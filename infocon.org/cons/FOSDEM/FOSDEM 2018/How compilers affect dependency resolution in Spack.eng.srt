1
00:00:04,680 --> 00:00:09,550
okay so I'm<font color="#E5E5E5"> Todd gamblin</font><font color="#CCCCCC"> I am going to</font>

2
00:00:08,440 --> 00:00:12,129
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> compiler dependency</font>

3
00:00:09,550 --> 00:00:13,690
resolution in<font color="#E5E5E5"> spec or rather how</font>

4
00:00:12,130 --> 00:00:17,170
compilers<font color="#E5E5E5"> affect dependency resolution</font>

5
00:00:13,690 --> 00:00:18,310
inspect this for some context<font color="#CCCCCC"> I'm from</font>

6
00:00:17,170 --> 00:00:20,860
Lawrence Livermore National Laboratory

7
00:00:18,310 --> 00:00:22,150
<font color="#CCCCCC">it's this</font><font color="#E5E5E5"> square mile facility in</font>

8
00:00:20,860 --> 00:00:24,099
<font color="#E5E5E5">Livermore California it's about an hour</font>

9
00:00:22,150 --> 00:00:25,900
<font color="#E5E5E5">from San Francisco it's maybe 6,000</font>

10
00:00:24,099 --> 00:00:26,980
people<font color="#CCCCCC"> who work there</font><font color="#E5E5E5"> we do national</font>

11
00:00:25,900 --> 00:00:30,520
security stuff for the Department of

12
00:00:26,980 --> 00:00:32,770
Energy<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we are pretty invested in</font>

13
00:00:30,520 --> 00:00:34,000
<font color="#CCCCCC">high-performance</font><font color="#E5E5E5"> computing</font><font color="#CCCCCC"> and so that's</font>

14
00:00:32,770 --> 00:00:36,700
where that<font color="#CCCCCC"> comes from</font>

15
00:00:34,000 --> 00:00:39,010
this is Sequoia it's a<font color="#E5E5E5"> 1.5 million core</font>

16
00:00:36,700 --> 00:00:41,140
system the cases are off so you can<font color="#E5E5E5"> see</font>

17
00:00:39,010 --> 00:00:42,460
the network on there<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are the kinds</font>

18
00:00:41,140 --> 00:00:44,710
<font color="#E5E5E5">of machines that</font><font color="#CCCCCC"> we have to try</font><font color="#E5E5E5"> to build</font>

19
00:00:42,460 --> 00:00:47,380
for and it's<font color="#E5E5E5"> not pleasant and so that's</font>

20
00:00:44,710 --> 00:00:49,360
where<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> spec has</font><font color="#E5E5E5"> come from</font><font color="#CCCCCC"> specs a</font>

21
00:00:47,380 --> 00:00:51,700
<font color="#E5E5E5">general-purpose from source package</font>

22
00:00:49,360 --> 00:00:54,010
manager<font color="#CCCCCC"> it's inspired somewhat by</font>

23
00:00:51,700 --> 00:00:55,510
homebrew and<font color="#CCCCCC"> Nix</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're like I said</font>

24
00:00:54,010 --> 00:00:57,280
we're targeting HPC<font color="#E5E5E5"> and scientific</font>

25
00:00:55,510 --> 00:00:59,739
<font color="#CCCCCC">computing it has a growing community</font>

26
00:00:57,280 --> 00:01:01,320
<font color="#CCCCCC">these are lines of</font><font color="#E5E5E5"> code by different</font>

27
00:00:59,740 --> 00:01:03,880
<font color="#CCCCCC">organizations in the packages by</font>

28
00:01:01,320 --> 00:01:05,199
<font color="#CCCCCC">overtime</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so you can see</font><font color="#E5E5E5"> that like</font>

29
00:01:03,880 --> 00:01:06,759
I've been told about 2015 it was<font color="#E5E5E5"> all</font>

30
00:01:05,199 --> 00:01:07,899
Livermore<font color="#E5E5E5"> and then we started getting</font>

31
00:01:06,759 --> 00:01:10,509
contributions<font color="#CCCCCC"> from all sorts of people</font>

32
00:01:07,900 --> 00:01:13,899
<font color="#CCCCCC">after that</font><font color="#E5E5E5"> and it's been it's been going</font>

33
00:01:10,509 --> 00:01:15,850
well<font color="#CCCCCC"> the goals of spec are focused</font>

34
00:01:13,899 --> 00:01:19,630
around flexibility we're not trying to

35
00:01:15,850 --> 00:01:21,130
be a stable<font color="#CCCCCC"> of distro yet we're</font><font color="#E5E5E5"> mostly</font>

36
00:01:19,630 --> 00:01:22,749
focused on<font color="#E5E5E5"> helping people get things</font>

37
00:01:21,130 --> 00:01:25,719
<font color="#CCCCCC">built for high performance</font><font color="#E5E5E5"> on big</font>

38
00:01:22,749 --> 00:01:27,068
machines<font color="#E5E5E5"> and also running on laptops and</font>

39
00:01:25,719 --> 00:01:29,288
<font color="#CCCCCC">other places that</font><font color="#E5E5E5"> scientists need to run</font>

40
00:01:27,069 --> 00:01:30,789
and come out of<font color="#E5E5E5"> the blue</font><font color="#CCCCCC"> x clusters we</font>

41
00:01:29,289 --> 00:01:31,960
want to make it easy to<font color="#E5E5E5"> build</font><font color="#CCCCCC"> packages</font>

42
00:01:30,789 --> 00:01:33,399
with lots of different<font color="#E5E5E5"> compilers</font>

43
00:01:31,960 --> 00:01:35,678
different compiler options<font color="#CCCCCC"> different</font>

44
00:01:33,399 --> 00:01:38,259
flags to swap compilers<font color="#CCCCCC"> in and out of a</font>

45
00:01:35,679 --> 00:01:40,090
build and to swap implementations of

46
00:01:38,259 --> 00:01:41,530
libraries so like MPI<font color="#CCCCCC"> and other</font><font color="#E5E5E5"> ABI</font>

47
00:01:40,090 --> 00:01:43,289
<font color="#E5E5E5">incompatible libraries we want to be</font>

48
00:01:41,530 --> 00:01:46,840
able to swap those in and out easily

49
00:01:43,289 --> 00:01:48,399
<font color="#CCCCCC">from a built and</font><font color="#E5E5E5"> and so the end goal</font><font color="#CCCCCC"> is</font>

50
00:01:46,840 --> 00:01:51,100
to<font color="#CCCCCC"> help scientists</font><font color="#E5E5E5"> in the Department of</font>

51
00:01:48,399 --> 00:01:52,810
Energy<font color="#CCCCCC"> and elsewhere actually get their</font>

52
00:01:51,100 --> 00:01:56,109
<font color="#E5E5E5">software up and running on fairly exotic</font>

53
00:01:52,810 --> 00:01:59,079
architectures<font color="#CCCCCC"> how do</font><font color="#E5E5E5"> we do that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

54
00:01:56,109 --> 00:02:00,880
a CLI syntax<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> supposed to make</font><font color="#CCCCCC"> it</font>

55
00:01:59,079 --> 00:02:03,669
easy to<font color="#CCCCCC"> install a package lots of</font>

56
00:02:00,880 --> 00:02:04,779
different ways<font color="#CCCCCC"> in the base case it looks</font>

57
00:02:03,670 --> 00:02:06,399
an awful lot like another package

58
00:02:04,779 --> 00:02:08,258
manager you might say stack install MPI

59
00:02:06,399 --> 00:02:09,910
leaks<font color="#E5E5E5"> that's a tool that we</font><font color="#CCCCCC"> developed</font>

60
00:02:08,258 --> 00:02:12,369
for analyzing MPI programs<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little more</font>

61
00:02:09,910 --> 00:02:14,200
and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> fact should do something</font>

62
00:02:12,370 --> 00:02:15,640
sensible<font color="#E5E5E5"> if you say that if you want to</font>

63
00:02:14,200 --> 00:02:17,929
<font color="#E5E5E5">get more specific you could say install</font>

64
00:02:15,640 --> 00:02:19,250
MPI<font color="#CCCCCC"> League's at version 3.3</font>

65
00:02:17,930 --> 00:02:21,260
so you can specify the custom version

66
00:02:19,250 --> 00:02:23,540
<font color="#E5E5E5">you can say what compiler you want to</font>

67
00:02:21,260 --> 00:02:26,090
build it<font color="#CCCCCC"> with so you</font><font color="#E5E5E5"> can say</font><font color="#CCCCCC"> % GCC @ 4 7</font>

68
00:02:23,540 --> 00:02:28,220
3<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> that you can add build options that</font>

69
00:02:26,090 --> 00:02:30,650
are exposed by<font color="#E5E5E5"> the packages</font><font color="#CCCCCC"> you can</font>

70
00:02:28,220 --> 00:02:33,109
inject<font color="#CCCCCC"> C flags into the</font><font color="#E5E5E5"> build and then</font>

71
00:02:30,650 --> 00:02:34,700
this syntax<font color="#E5E5E5"> is recursive so you can</font>

72
00:02:33,110 --> 00:02:36,620
basically apply the same<font color="#E5E5E5"> constraints on</font>

73
00:02:34,700 --> 00:02:38,060
your dependencies<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's saying I</font>

74
00:02:36,620 --> 00:02:40,609
know that thing depends on<font color="#CCCCCC"> n pitch</font>

75
00:02:38,060 --> 00:02:45,379
<font color="#E5E5E5">somehow so build it with M pitch version</font>

76
00:02:40,609 --> 00:02:46,640
3.2 and build that with GCC<font color="#E5E5E5"> so how</font><font color="#CCCCCC"> does</font>

77
00:02:45,379 --> 00:02:49,370
this<font color="#E5E5E5"> look from the package perspective</font>

78
00:02:46,640 --> 00:02:50,899
<font color="#E5E5E5">we're trying to keep that simple to the</font>

79
00:02:49,370 --> 00:02:52,459
<font color="#CCCCCC">fact</font><font color="#E5E5E5"> packages this should look familiar</font>

80
00:02:50,900 --> 00:02:55,040
<font color="#E5E5E5">to anyone who's ever seen a homebrew</font>

81
00:02:52,459 --> 00:02:59,030
package<font color="#E5E5E5"> they're just Python classes it</font>

82
00:02:55,040 --> 00:03:00,319
has a simple<font color="#E5E5E5"> Python DSL and what's going</font>

83
00:02:59,030 --> 00:03:02,120
<font color="#E5E5E5">on here is all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> stuff at the class</font>

84
00:03:00,319 --> 00:03:03,768
<font color="#CCCCCC">level is metadata this is so</font><font color="#E5E5E5"> this is</font>

85
00:03:02,120 --> 00:03:04,849
your<font color="#CCCCCC"> homepage</font><font color="#E5E5E5"> URL</font><font color="#CCCCCC"> these are the</font>

86
00:03:03,769 --> 00:03:06,139
different versions that<font color="#CCCCCC"> you could build</font>

87
00:03:04,849 --> 00:03:07,760
<font color="#E5E5E5">with the package and</font><font color="#CCCCCC"> also the</font><font color="#E5E5E5"> hashes</font>

88
00:03:06,139 --> 00:03:09,680
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> could download them from we can</font>

89
00:03:07,760 --> 00:03:12,019
<font color="#E5E5E5">sort of try to extrapolate these URLs</font>

90
00:03:09,680 --> 00:03:14,480
from<font color="#E5E5E5"> this one</font><font color="#CCCCCC"> these are the</font><font color="#E5E5E5"> dependencies</font>

91
00:03:12,019 --> 00:03:15,680
<font color="#CCCCCC">and so this is C make</font><font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> built</font>

92
00:03:14,480 --> 00:03:18,230
dependency these are all the<font color="#CCCCCC"> link</font>

93
00:03:15,680 --> 00:03:19,639
dependencies and<font color="#E5E5E5"> you can see that you</font>

94
00:03:18,230 --> 00:03:20,959
can provide<font color="#CCCCCC"> those same constraints that</font>

95
00:03:19,639 --> 00:03:22,730
<font color="#E5E5E5">you can provide on</font><font color="#CCCCCC"> the command line</font><font color="#E5E5E5"> to</font>

96
00:03:20,959 --> 00:03:24,829
<font color="#CCCCCC">the actual dependency so you can say</font>

97
00:03:22,730 --> 00:03:27,399
that<font color="#CCCCCC"> this thing depends on boost 1.42 or</font>

98
00:03:24,829 --> 00:03:30,620
higher with the multi-threaded option

99
00:03:27,400 --> 00:03:32,419
the<font color="#E5E5E5"> the methods the actual instance of</font>

100
00:03:30,620 --> 00:03:33,680
the package is basically an installer we

101
00:03:32,419 --> 00:03:35,659
call these methods<font color="#E5E5E5"> on it to get things</font>

102
00:03:33,680 --> 00:03:39,049
<font color="#E5E5E5">installed and so all this does really is</font>

103
00:03:35,659 --> 00:03:42,918
<font color="#E5E5E5">it it deals with</font><font color="#CCCCCC"> CMake and it calls make</font>

104
00:03:39,049 --> 00:03:45,109
and make install so<font color="#E5E5E5"> we passed the</font>

105
00:03:42,919 --> 00:03:46,549
dependency<font color="#E5E5E5"> tag in here through the spec</font>

106
00:03:45,109 --> 00:03:48,739
<font color="#E5E5E5">and so you can refer</font><font color="#CCCCCC"> to all of your</font>

107
00:03:46,549 --> 00:03:52,129
dependencies<font color="#E5E5E5"> in some fixed configuration</font>

108
00:03:48,739 --> 00:03:54,199
<font color="#E5E5E5">from inside the package file the idea is</font>

109
00:03:52,129 --> 00:03:55,489
that<font color="#E5E5E5"> by the time</font><font color="#CCCCCC"> you get to</font><font color="#E5E5E5"> the install</font>

110
00:03:54,199 --> 00:03:56,690
<font color="#CCCCCC">method we've already</font><font color="#E5E5E5"> worked out what the</font>

111
00:03:55,489 --> 00:03:58,069
dag should look<font color="#CCCCCC"> like so you shouldn't</font>

112
00:03:56,690 --> 00:03:59,810
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to do any searching around on the</font>

113
00:03:58,069 --> 00:04:00,858
system we<font color="#E5E5E5"> just tell you what to</font><font color="#CCCCCC"> build</font>

114
00:03:59,810 --> 00:04:02,659
<font color="#E5E5E5">and you translate</font><font color="#CCCCCC"> it into build</font>

115
00:04:00,859 --> 00:04:04,400
instructions

116
00:04:02,659 --> 00:04:07,159
the other thing<font color="#CCCCCC"> inspect that we do to</font>

117
00:04:04,400 --> 00:04:09,079
<font color="#E5E5E5">enable that swapping is we have virtual</font>

118
00:04:07,159 --> 00:04:10,340
dependencies and<font color="#E5E5E5"> so the idea is that you</font>

119
00:04:09,079 --> 00:04:12,739
depend<font color="#E5E5E5"> on an interface something like</font>

120
00:04:10,340 --> 00:04:14,269
MPI or maybe people are more<font color="#CCCCCC"> familiar</font>

121
00:04:12,739 --> 00:04:17,289
with<font color="#E5E5E5"> like</font><font color="#CCCCCC"> jpg where there's</font><font color="#E5E5E5"> JPEG and</font>

122
00:04:14,269 --> 00:04:20,539
<font color="#E5E5E5">JPEG turbo those are interfaces and</font>

123
00:04:17,289 --> 00:04:21,560
<font color="#CCCCCC">they're not implementations</font><font color="#E5E5E5"> and so in a</font>

124
00:04:20,539 --> 00:04:23,780
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of package managers you can only</font>

125
00:04:21,560 --> 00:04:26,180
<font color="#E5E5E5">depend on specific packages here you can</font>

126
00:04:23,780 --> 00:04:27,529
<font color="#E5E5E5">have one package</font><font color="#CCCCCC"> that provides</font><font color="#E5E5E5"> MPI and</font>

127
00:04:26,180 --> 00:04:28,610
they can provide it at<font color="#CCCCCC"> different</font>

128
00:04:27,529 --> 00:04:30,110
versions<font color="#CCCCCC"> when they're at different</font>

129
00:04:28,610 --> 00:04:31,970
versions<font color="#CCCCCC"> so I can say I'm</font>

130
00:04:30,110 --> 00:04:35,210
<font color="#CCCCCC">and that bitch I provide</font><font color="#E5E5E5"> NPI version</font><font color="#CCCCCC"> too</font>

131
00:04:31,970 --> 00:04:37,849
when I'm<font color="#E5E5E5"> at</font><font color="#CCCCCC"> 1.9 or higher and</font><font color="#E5E5E5"> then the</font>

132
00:04:35,210 --> 00:04:40,159
actual<font color="#CCCCCC"> packages</font><font color="#E5E5E5"> like this one here you</font>

133
00:04:37,849 --> 00:04:42,080
<font color="#E5E5E5">depend on MPI at a particular</font><font color="#CCCCCC"> version</font>

134
00:04:40,159 --> 00:04:44,360
and so<font color="#CCCCCC"> it's fact that's</font><font color="#E5E5E5"> the job of</font>

135
00:04:42,080 --> 00:04:46,430
<font color="#E5E5E5">looking at this dag saying oh it depends</font>

136
00:04:44,360 --> 00:04:48,110
<font color="#E5E5E5">on MPI what version of MPI does it</font>

137
00:04:46,430 --> 00:04:50,360
depend<font color="#E5E5E5"> on and I'm gonna pair</font><font color="#CCCCCC"> it up with</font>

138
00:04:48,110 --> 00:04:52,610
one of<font color="#E5E5E5"> these providers and you can also</font>

139
00:04:50,360 --> 00:04:54,319
specify<font color="#E5E5E5"> a specific provider on the</font>

140
00:04:52,610 --> 00:04:56,360
command<font color="#CCCCCC"> line</font><font color="#E5E5E5"> and so it's really easy</font>

141
00:04:54,319 --> 00:04:57,949
<font color="#E5E5E5">with this to type a bunch of commands</font>

142
00:04:56,360 --> 00:05:00,919
<font color="#E5E5E5">and essentially get lots of different</font>

143
00:04:57,949 --> 00:05:02,750
builds of the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> package to compare</font>

144
00:05:00,919 --> 00:05:05,960
and<font color="#E5E5E5"> in to sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> settle</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> a nicely</font>

145
00:05:02,750 --> 00:05:07,940
tuned one to do the compiler swapping we

146
00:05:05,960 --> 00:05:10,039
build with compiler wrappers<font color="#CCCCCC"> this is</font>

147
00:05:07,940 --> 00:05:12,159
kind of like<font color="#E5E5E5"> homebrew shims these are</font>

148
00:05:10,039 --> 00:05:15,500
basically little wrappers that<font color="#E5E5E5"> add</font>

149
00:05:12,159 --> 00:05:18,080
include library and our path parameters

150
00:05:15,500 --> 00:05:20,000
to the things<font color="#E5E5E5"> that stack built and so</font>

151
00:05:18,080 --> 00:05:21,409
what this guarantees you is<font color="#E5E5E5"> that all the</font>

152
00:05:20,000 --> 00:05:23,120
libraries<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you build masback all the</font>

153
00:05:21,409 --> 00:05:24,469
executables<font color="#CCCCCC"> and things they know where</font>

154
00:05:23,120 --> 00:05:25,729
to<font color="#CCCCCC"> find their dependencies which can be</font>

155
00:05:24,469 --> 00:05:27,770
<font color="#E5E5E5">useful if you're building lots of</font>

156
00:05:25,729 --> 00:05:29,870
<font color="#E5E5E5">versions of things and you don't know</font>

157
00:05:27,770 --> 00:05:30,919
you know which which things you<font color="#E5E5E5"> what you</font>

158
00:05:29,870 --> 00:05:33,620
were<font color="#E5E5E5"> doing at Build time when you get</font>

159
00:05:30,919 --> 00:05:36,318
around to running things to<font color="#E5E5E5"> manage all</font>

160
00:05:33,620 --> 00:05:37,940
that versioning<font color="#CCCCCC"> the way that versions</font>

161
00:05:36,319 --> 00:05:39,080
work in<font color="#E5E5E5"> spec is I mean we have the</font>

162
00:05:37,940 --> 00:05:40,879
<font color="#E5E5E5">actual version of the package</font><font color="#CCCCCC"> but we</font>

163
00:05:39,080 --> 00:05:42,800
have<font color="#E5E5E5"> those other options</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> well you can</font>

164
00:05:40,879 --> 00:05:45,409
<font color="#E5E5E5">think of a stack version as this entire</font>

165
00:05:42,800 --> 00:05:46,909
<font color="#E5E5E5">dependency</font><font color="#CCCCCC"> tag for a</font><font color="#E5E5E5"> project so this</font>

166
00:05:45,409 --> 00:05:48,529
<font color="#E5E5E5">would be the version</font><font color="#CCCCCC"> of MPI leaks plus</font>

167
00:05:46,909 --> 00:05:50,060
all<font color="#E5E5E5"> of its dependencies</font><font color="#CCCCCC"> plus their</font>

168
00:05:48,529 --> 00:05:52,520
<font color="#CCCCCC">metadata</font><font color="#E5E5E5"> that stuff turned into a</font>

169
00:05:50,060 --> 00:05:54,560
document<font color="#E5E5E5"> and then hashed and so then you</font>

170
00:05:52,520 --> 00:05:56,299
take<font color="#E5E5E5"> that hatch and</font><font color="#CCCCCC"> we give every</font>

171
00:05:54,560 --> 00:05:58,520
package that we install a unique

172
00:05:56,300 --> 00:05:59,810
installation directory like this<font color="#E5E5E5"> and</font>

173
00:05:58,520 --> 00:06:01,008
<font color="#E5E5E5">essentially the libraries in each of</font>

174
00:05:59,810 --> 00:06:02,330
these directories they know which other

175
00:06:01,009 --> 00:06:06,949
directories<font color="#E5E5E5"> within the same install</font>

176
00:06:02,330 --> 00:06:08,960
<font color="#E5E5E5">route to find their dependencies we like</font>

177
00:06:06,949 --> 00:06:09,889
our<font color="#CCCCCC"> path a lot because</font><font color="#E5E5E5"> the rationale is</font>

178
00:06:08,960 --> 00:06:10,940
you knew what you were<font color="#CCCCCC"> doing when you</font>

179
00:06:09,889 --> 00:06:12,710
built the package or at least the

180
00:06:10,940 --> 00:06:14,029
package<font color="#CCCCCC"> manager did</font><font color="#E5E5E5"> and by the time you</font>

181
00:06:12,710 --> 00:06:15,529
get<font color="#E5E5E5"> around to running it it's you know</font>

182
00:06:14,029 --> 00:06:17,389
we don't want<font color="#E5E5E5"> to put it on you to</font>

183
00:06:15,529 --> 00:06:19,279
<font color="#E5E5E5">remember all the dependencies and things</font>

184
00:06:17,389 --> 00:06:20,629
<font color="#CCCCCC">that you and</font><font color="#E5E5E5"> where they live for these</font>

185
00:06:19,279 --> 00:06:23,089
packages<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is what people have done</font>

186
00:06:20,629 --> 00:06:26,449
manually for a long time so we're trying

187
00:06:23,089 --> 00:06:27,319
<font color="#E5E5E5">to fix that</font><font color="#CCCCCC"> the dependency model centers</font>

188
00:06:26,449 --> 00:06:29,240
<font color="#CCCCCC">around something</font><font color="#E5E5E5"> that we call</font>

189
00:06:27,319 --> 00:06:30,440
concretization<font color="#E5E5E5"> in what mode most package</font>

190
00:06:29,240 --> 00:06:34,430
<font color="#CCCCCC">managers</font><font color="#E5E5E5"> I guess called dependency</font>

191
00:06:30,440 --> 00:06:35,960
resolution<font color="#E5E5E5"> the concretization it's kind</font>

192
00:06:34,430 --> 00:06:37,669
of like dependency resolution except for

193
00:06:35,960 --> 00:06:40,729
like I<font color="#E5E5E5"> said we're solving for more than</font>

194
00:06:37,669 --> 00:06:42,229
just<font color="#E5E5E5"> package inversion you can depend on</font>

195
00:06:40,729 --> 00:06:42,878
something<font color="#E5E5E5"> plus an option you can depend</font>

196
00:06:42,229 --> 00:06:45,039
<font color="#E5E5E5">on something</font>

197
00:06:42,879 --> 00:06:46,259
with a particular<font color="#CCCCCC"> compiler</font><font color="#E5E5E5"> and so the</font>

198
00:06:45,039 --> 00:06:50,229
constraints can<font color="#CCCCCC"> be a</font><font color="#E5E5E5"> little more</font>

199
00:06:46,259 --> 00:06:51,699
<font color="#E5E5E5">extensive throughout the packages</font><font color="#CCCCCC"> so</font>

200
00:06:50,229 --> 00:06:53,258
what happens when<font color="#E5E5E5"> you</font><font color="#CCCCCC"> type that</font><font color="#E5E5E5"> on the</font>

201
00:06:51,699 --> 00:06:55,149
command<font color="#CCCCCC"> line if you say install MPI</font>

202
00:06:53,259 --> 00:06:56,379
leaks with with this dependency at that

203
00:06:55,149 --> 00:06:58,659
<font color="#CCCCCC">version and it's other</font><font color="#E5E5E5"> dependencies</font>

204
00:06:56,379 --> 00:07:00,969
another version<font color="#E5E5E5"> is we build an abstract</font>

205
00:06:58,659 --> 00:07:02,589
<font color="#E5E5E5">dag with some of the constraints on it</font>

206
00:07:00,969 --> 00:07:04,419
<font color="#CCCCCC">and then we take that</font><font color="#E5E5E5"> we run it through</font>

207
00:07:02,589 --> 00:07:06,669
<font color="#E5E5E5">the concrete</font><font color="#CCCCCC"> Iser and</font><font color="#E5E5E5"> it's job is</font><font color="#CCCCCC"> to</font>

208
00:07:04,419 --> 00:07:08,859
<font color="#CCCCCC">fill out all the details on</font><font color="#E5E5E5"> this thing</font>

209
00:07:06,669 --> 00:07:10,959
so<font color="#E5E5E5"> that by the time</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> into install</font>

210
00:07:08,860 --> 00:07:12,129
you have all the<font color="#CCCCCC"> information about</font><font color="#E5E5E5"> the</font>

211
00:07:10,959 --> 00:07:13,240
thing<font color="#CCCCCC"> that you're going</font><font color="#E5E5E5"> to build you</font>

212
00:07:12,129 --> 00:07:14,229
don't have to<font color="#CCCCCC"> ask any questions</font><font color="#E5E5E5"> you</font>

213
00:07:13,240 --> 00:07:16,539
don't<font color="#E5E5E5"> have to go searching for things</font>

214
00:07:14,229 --> 00:07:20,830
you<font color="#CCCCCC"> just say okay what you know what</font>

215
00:07:16,539 --> 00:07:22,688
<font color="#CCCCCC">it's back tell me to build the</font><font color="#E5E5E5"> other</font>

216
00:07:20,830 --> 00:07:24,929
thing here is that<font color="#CCCCCC"> and this will</font><font color="#E5E5E5"> be</font>

217
00:07:22,689 --> 00:07:27,550
important<font color="#E5E5E5"> later is that</font><font color="#CCCCCC"> the nodes here</font>

218
00:07:24,929 --> 00:07:29,258
<font color="#CCCCCC">they can have different</font><font color="#E5E5E5"> compilers so</font>

219
00:07:27,550 --> 00:07:30,639
currently we're modeling<font color="#E5E5E5"> the compiler is</font>

220
00:07:29,259 --> 00:07:33,099
an attribute<font color="#CCCCCC"> on the node and I'll get a</font>

221
00:07:30,639 --> 00:07:35,860
<font color="#E5E5E5">little</font><font color="#CCCCCC"> more into that later the other</font>

222
00:07:33,099 --> 00:07:37,899
constraint that<font color="#E5E5E5"> we impose on this is we</font>

223
00:07:35,860 --> 00:07:39,580
want there to be<font color="#E5E5E5"> only one instance of a</font>

224
00:07:37,899 --> 00:07:42,249
particular package in a dag so if I do

225
00:07:39,580 --> 00:07:44,289
one build of an<font color="#E5E5E5"> application</font><font color="#CCCCCC"> I enforce</font>

226
00:07:42,249 --> 00:07:46,119
this constraint<font color="#E5E5E5"> that basically there can</font>

227
00:07:44,289 --> 00:07:48,248
only be one call path library in here

228
00:07:46,119 --> 00:07:51,309
that's imposed by the native language

229
00:07:48,249 --> 00:07:52,869
runtime<font color="#CCCCCC"> languages like JavaScript have</font>

230
00:07:51,309 --> 00:07:53,949
support for<font color="#E5E5E5"> multi version tags and</font>

231
00:07:52,869 --> 00:07:55,719
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> their module system will</font>

232
00:07:53,949 --> 00:07:56,979
<font color="#E5E5E5">actually allow you to have</font><font color="#CCCCCC"> one package</font>

233
00:07:55,719 --> 00:07:58,808
<font color="#E5E5E5">over here calling one version of</font><font color="#CCCCCC"> a</font>

234
00:07:56,979 --> 00:08:00,159
dependency<font color="#CCCCCC"> and another package</font><font color="#E5E5E5"> over here</font>

235
00:07:58,809 --> 00:08:02,229
calling this<font color="#CCCCCC"> a</font><font color="#E5E5E5"> different version of the</font>

236
00:08:00,159 --> 00:08:03,849
same<font color="#E5E5E5"> dependency we're dealing with</font>

237
00:08:02,229 --> 00:08:05,800
<font color="#E5E5E5">native stuff and so we have to deal with</font>

238
00:08:03,849 --> 00:08:09,819
<font color="#CCCCCC">LD data so or</font><font color="#E5E5E5"> dial D or whatever the</font>

239
00:08:05,800 --> 00:08:11,199
linker is on the platform<font color="#CCCCCC"> and so you can</font>

240
00:08:09,819 --> 00:08:12,550
link and executable where there are

241
00:08:11,199 --> 00:08:13,629
different libraries in<font color="#E5E5E5"> your DAGs that</font>

242
00:08:12,550 --> 00:08:15,879
depend on different<font color="#CCCCCC"> versions of</font>

243
00:08:13,629 --> 00:08:18,279
<font color="#CCCCCC">something like lip standard C++ we</font>

244
00:08:15,879 --> 00:08:20,469
really don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to because it's a race</font>

245
00:08:18,279 --> 00:08:22,569
it<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> basically the first version</font>

246
00:08:20,469 --> 00:08:24,550
<font color="#E5E5E5">of that library will get loaded the</font>

247
00:08:22,569 --> 00:08:25,569
second one gets invoked<font color="#E5E5E5"> and then it ends</font>

248
00:08:24,550 --> 00:08:27,219
up calling<font color="#E5E5E5"> a function in the first</font>

249
00:08:25,569 --> 00:08:28,990
<font color="#E5E5E5">version and if the ABI</font><font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> compatible</font>

250
00:08:27,219 --> 00:08:31,509
<font color="#E5E5E5">you get a nasty error and the things</font>

251
00:08:28,990 --> 00:08:34,029
explode<font color="#E5E5E5"> and so one of the things we have</font>

252
00:08:31,509 --> 00:08:35,829
a lot<font color="#CCCCCC"> of problems</font><font color="#E5E5E5"> with is managing all</font>

253
00:08:34,029 --> 00:08:37,568
<font color="#CCCCCC">the different</font><font color="#E5E5E5"> versions of C++ compilers</font>

254
00:08:35,828 --> 00:08:39,399
in<font color="#E5E5E5"> the standard Lib with with you know</font>

255
00:08:37,568 --> 00:08:42,218
<font color="#E5E5E5">the recent proliferation of versions of</font>

256
00:08:39,399 --> 00:08:43,448
C++<font color="#E5E5E5"> I think that's a good thing</font>

257
00:08:42,219 --> 00:08:45,339
<font color="#CCCCCC">personally because I think</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of good</font>

258
00:08:43,448 --> 00:08:46,420
<font color="#E5E5E5">things have</font><font color="#CCCCCC"> happened to C++ lately but</font>

259
00:08:45,339 --> 00:08:48,310
<font color="#E5E5E5">it is something that makes the build</font>

260
00:08:46,420 --> 00:08:50,319
harder for users especially<font color="#E5E5E5"> if we're</font>

261
00:08:48,310 --> 00:08:52,959
using older versions of<font color="#E5E5E5"> the OS like rl6</font>

262
00:08:50,319 --> 00:08:54,089
<font color="#E5E5E5">where the the default standard C++ is</font>

263
00:08:52,959 --> 00:08:55,199
pretty old<font color="#E5E5E5"> and you</font>

264
00:08:54,089 --> 00:08:58,170
<font color="#CCCCCC">we often want to build with a new one</font>

265
00:08:55,199 --> 00:08:59,609
<font color="#CCCCCC">that's not</font><font color="#E5E5E5"> the system version</font><font color="#CCCCCC"> so in</font>

266
00:08:58,170 --> 00:09:01,439
<font color="#E5E5E5">general you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> want to have two</font>

267
00:08:59,610 --> 00:09:05,040
<font color="#CCCCCC">versions of one library</font><font color="#E5E5E5"> in the same</font>

268
00:09:01,439 --> 00:09:06,509
process<font color="#E5E5E5"> basic</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so why aren't</font>

269
00:09:05,040 --> 00:09:08,370
compilers proper dependencies inspect

270
00:09:06,509 --> 00:09:11,309
right now well it's mostly for

271
00:09:08,370 --> 00:09:12,569
expedience<font color="#E5E5E5"> we wanted to mix compilers in</font>

272
00:09:11,309 --> 00:09:13,589
<font color="#E5E5E5">one dag because we wanted</font><font color="#CCCCCC"> to play around</font>

273
00:09:12,569 --> 00:09:16,410
<font color="#E5E5E5">with</font><font color="#CCCCCC"> lots of different</font><font color="#E5E5E5"> types of</font>

274
00:09:13,589 --> 00:09:18,839
compilers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we can't do that with our</font>

275
00:09:16,410 --> 00:09:21,660
<font color="#E5E5E5">one compiler per there are one in one</font>

276
00:09:18,839 --> 00:09:25,199
thing per one instance<font color="#CCCCCC"> of each</font><font color="#E5E5E5"> package</font>

277
00:09:21,660 --> 00:09:27,059
per dag restriction and so what spec

278
00:09:25,199 --> 00:09:28,589
does is when<font color="#E5E5E5"> you run</font><font color="#CCCCCC"> in spec for</font><font color="#E5E5E5"> the</font>

279
00:09:27,059 --> 00:09:30,240
first time or<font color="#E5E5E5"> if you run spec compilers</font>

280
00:09:28,589 --> 00:09:31,439
it searches your environment<font color="#E5E5E5"> and finds</font>

281
00:09:30,240 --> 00:09:33,569
<font color="#E5E5E5">all the compilers in your</font><font color="#CCCCCC"> environment</font>

282
00:09:31,439 --> 00:09:35,069
and sets up a file<font color="#E5E5E5"> like this essentially</font>

283
00:09:33,569 --> 00:09:38,490
<font color="#E5E5E5">this says here's here's your C compiler</font>

284
00:09:35,069 --> 00:09:39,990
<font color="#E5E5E5">C++ different Fortran compilers what</font>

285
00:09:38,490 --> 00:09:42,360
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system was it for things like</font>

286
00:09:39,990 --> 00:09:44,490
<font color="#E5E5E5">that modules if you can load it from a</font>

287
00:09:42,360 --> 00:09:46,499
module and<font color="#E5E5E5"> it uses this as the</font>

288
00:09:44,490 --> 00:09:48,389
description<font color="#CCCCCC"> of the compiler</font><font color="#E5E5E5"> and you have</font>

289
00:09:46,499 --> 00:09:50,160
<font color="#CCCCCC">this spec identifier down here</font><font color="#E5E5E5"> this is</font>

290
00:09:48,389 --> 00:09:51,180
what gets put<font color="#E5E5E5"> on the dag right now so</font>

291
00:09:50,160 --> 00:09:54,120
we'll just say use<font color="#CCCCCC"> that particular</font>

292
00:09:51,180 --> 00:09:55,709
compiler<font color="#CCCCCC"> and we trust that if we</font>

293
00:09:54,120 --> 00:09:59,040
detected it then it's the<font color="#E5E5E5"> same version</font>

294
00:09:55,709 --> 00:10:00,149
across<font color="#E5E5E5"> the different</font><font color="#CCCCCC"> systems so that's</font>

295
00:09:59,040 --> 00:10:03,719
<font color="#CCCCCC">what we did</font>

296
00:10:00,149 --> 00:10:04,800
<font color="#E5E5E5">what do we care</font><font color="#CCCCCC"> about that so much so we</font>

297
00:10:03,720 --> 00:10:06,660
want to use lots<font color="#E5E5E5"> of different fancy</font>

298
00:10:04,800 --> 00:10:08,128
compilers for<font color="#CCCCCC"> high</font><font color="#E5E5E5"> performance we like</font>

299
00:10:06,660 --> 00:10:10,319
running the Intel compiler it tends to

300
00:10:08,129 --> 00:10:12,149
<font color="#E5E5E5">get</font><font color="#CCCCCC"> better performance than GCC on the</font>

301
00:10:10,319 --> 00:10:14,189
Intel machines we run on if we run on a

302
00:10:12,149 --> 00:10:16,860
Cray<font color="#E5E5E5"> we tend</font><font color="#CCCCCC"> to like the PGI compiler or</font>

303
00:10:14,189 --> 00:10:18,748
the<font color="#E5E5E5"> Cray compiler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you know there's</font>

304
00:10:16,860 --> 00:10:20,370
there other nice tuned compilers for

305
00:10:18,749 --> 00:10:21,329
<font color="#E5E5E5">different systems</font><font color="#CCCCCC"> on the IBM's</font><font color="#E5E5E5"> Excel</font>

306
00:10:20,370 --> 00:10:23,279
tends to get<font color="#E5E5E5"> the best performance</font>

307
00:10:21,329 --> 00:10:26,758
<font color="#E5E5E5">slightly even</font><font color="#CCCCCC"> though it takes forever to</font>

308
00:10:23,279 --> 00:10:28,259
compile<font color="#E5E5E5"> and then the other thing is</font><font color="#CCCCCC"> that</font>

309
00:10:26,759 --> 00:10:29,699
<font color="#E5E5E5">on many of our machines we actually have</font>

310
00:10:28,259 --> 00:10:31,559
to<font color="#E5E5E5"> use a special compiler because we're</font>

311
00:10:29,699 --> 00:10:33,870
cross compiling for<font color="#E5E5E5"> the compute</font><font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> so</font>

312
00:10:31,559 --> 00:10:35,279
like on<font color="#CCCCCC"> our Blue Gene systems the front</font>

313
00:10:33,870 --> 00:10:37,050
end is not<font color="#E5E5E5"> the same architecture as</font><font color="#CCCCCC"> the</font>

314
00:10:35,279 --> 00:10:38,160
back<font color="#CCCCCC"> end</font><font color="#E5E5E5"> and that's the case on a lot of</font>

315
00:10:37,050 --> 00:10:40,620
the crates today that uses the unthe

316
00:10:38,160 --> 00:10:42,179
eyes they have<font color="#CCCCCC"> a Xeon</font><font color="#E5E5E5"> front-end and they</font>

317
00:10:40,620 --> 00:10:43,139
have a<font color="#CCCCCC"> Phi back-end and</font><font color="#E5E5E5"> you can't</font>

318
00:10:42,179 --> 00:10:45,360
<font color="#E5E5E5">compile</font>

319
00:10:43,139 --> 00:10:47,069
you can't run<font color="#E5E5E5"> back-end executables on</font>

320
00:10:45,360 --> 00:10:49,860
the front end<font color="#E5E5E5"> the front end is where</font>

321
00:10:47,069 --> 00:10:50,998
<font color="#E5E5E5">people log in</font><font color="#CCCCCC"> to build and so the</font><font color="#E5E5E5"> other</font>

322
00:10:49,860 --> 00:10:54,089
<font color="#E5E5E5">reason that we care</font><font color="#CCCCCC"> about the compilers</font>

323
00:10:50,999 --> 00:10:56,009
is<font color="#E5E5E5"> people want advanced compiler</font>

324
00:10:54,089 --> 00:10:58,259
features<font color="#E5E5E5"> so a lot of our programmers are</font>

325
00:10:56,009 --> 00:11:00,389
using things like<font color="#CCCCCC"> OpenMP to do threading</font>

326
00:10:58,259 --> 00:11:03,029
on the big fat cores that<font color="#E5E5E5"> we have on the</font>

327
00:11:00,389 --> 00:11:04,439
front<font color="#E5E5E5"> end nodes</font><font color="#CCCCCC"> we care about</font><font color="#E5E5E5"> those C++</font>

328
00:11:03,029 --> 00:11:06,889
<font color="#E5E5E5">language levels and features like</font><font color="#CCCCCC"> that</font>

329
00:11:04,439 --> 00:11:07,969
<font color="#CCCCCC">we care</font><font color="#E5E5E5"> about building with CUDA</font><font color="#CCCCCC"> Oh</font>

330
00:11:06,889 --> 00:11:09,649
those things are features that<font color="#CCCCCC"> are</font>

331
00:11:07,970 --> 00:11:10,850
exposed<font color="#CCCCCC"> by the compiler you might say</font>

332
00:11:09,649 --> 00:11:13,429
that<font color="#E5E5E5"> their interface is exposed by the</font>

333
00:11:10,850 --> 00:11:15,350
compiler<font color="#CCCCCC"> and we want to be able to</font>

334
00:11:13,429 --> 00:11:16,369
experiment<font color="#E5E5E5"> with them and</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> it</font>

335
00:11:15,350 --> 00:11:18,290
would be<font color="#CCCCCC"> nice if we had a proper</font>

336
00:11:16,369 --> 00:11:19,850
dependency model for that stuff<font color="#E5E5E5"> so all</font>

337
00:11:18,290 --> 00:11:22,939
<font color="#CCCCCC">of these things</font><font color="#E5E5E5"> pose some challenges for</font>

338
00:11:19,850 --> 00:11:24,769
the dependency models all right I

339
00:11:22,939 --> 00:11:27,858
already<font color="#E5E5E5"> talked about this a little bit</font>

340
00:11:24,769 --> 00:11:29,809
but the the<font color="#CCCCCC"> the fancy vendor compilers</font>

341
00:11:27,859 --> 00:11:30,919
do tend<font color="#CCCCCC"> to get better</font><font color="#E5E5E5"> performance the</font>

342
00:11:29,809 --> 00:11:33,738
other issues that you<font color="#E5E5E5"> can have with</font>

343
00:11:30,919 --> 00:11:36,230
<font color="#E5E5E5">those are that if you're using those</font>

344
00:11:33,739 --> 00:11:37,730
<font color="#E5E5E5">most of the OSS projects don't test with</font>

345
00:11:36,230 --> 00:11:39,499
them<font color="#CCCCCC"> so if you're</font><font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> build</font>

346
00:11:37,730 --> 00:11:42,379
something<font color="#CCCCCC"> like C make with the Excel</font>

347
00:11:39,499 --> 00:11:44,359
compiler<font color="#E5E5E5"> it is unlikely to work because</font>

348
00:11:42,379 --> 00:11:46,189
<font color="#E5E5E5">they probably haven't tested with it and</font>

349
00:11:44,359 --> 00:11:48,290
so and there's also no<font color="#CCCCCC"> reason to do that</font>

350
00:11:46,189 --> 00:11:51,439
<font color="#E5E5E5">so for a lot of</font><font color="#CCCCCC"> these build</font><font color="#E5E5E5"> dependencies</font>

351
00:11:48,290 --> 00:11:52,969
we tend to<font color="#E5E5E5"> not build them with the the</font>

352
00:11:51,439 --> 00:11:55,009
nicer compilers we'll just build<font color="#E5E5E5"> the</font>

353
00:11:52,970 --> 00:11:56,449
numerical stuff that does all the<font color="#E5E5E5"> number</font>

354
00:11:55,009 --> 00:11:58,970
<font color="#CCCCCC">crunching and we'll try to</font><font color="#E5E5E5"> build these</font>

355
00:11:56,449 --> 00:12:00,229
to build dependencies<font color="#CCCCCC"> with something a</font>

356
00:11:58,970 --> 00:12:03,859
little<font color="#CCCCCC"> safer because</font><font color="#E5E5E5"> we don't care</font><font color="#CCCCCC"> about</font>

357
00:12:00,230 --> 00:12:06,919
the performance so what<font color="#E5E5E5"> does this look</font>

358
00:12:03,859 --> 00:12:08,419
like<font color="#CCCCCC"> we want to we have a dag like this</font>

359
00:12:06,919 --> 00:12:10,489
where I've got a bunch of<font color="#E5E5E5"> different</font>

360
00:12:08,419 --> 00:12:12,439
<font color="#CCCCCC">packages the bees are build dependencies</font>

361
00:12:10,489 --> 00:12:14,720
<font color="#CCCCCC">two L's</font><font color="#E5E5E5"> or linked dependencies the ars</font>

362
00:12:12,439 --> 00:12:16,279
<font color="#E5E5E5">are run dependencies</font><font color="#CCCCCC"> I want to go and</font>

363
00:12:14,720 --> 00:12:17,600
<font color="#E5E5E5">build this so that the build</font>

364
00:12:16,279 --> 00:12:18,949
dependencies get built with the easiest

365
00:12:17,600 --> 00:12:20,569
compiler possible where I don't<font color="#CCCCCC"> care</font>

366
00:12:18,949 --> 00:12:22,008
<font color="#CCCCCC">about performance</font><font color="#E5E5E5"> but anything</font><font color="#CCCCCC"> that</font>

367
00:12:20,569 --> 00:12:24,049
links<font color="#E5E5E5"> into this thing which I intend to</font>

368
00:12:22,009 --> 00:12:26,089
<font color="#E5E5E5">run on the back end where then which I</font>

369
00:12:24,049 --> 00:12:28,399
intend to<font color="#E5E5E5"> run fast it's</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> get</font>

370
00:12:26,089 --> 00:12:30,709
<font color="#E5E5E5">built with the</font><font color="#CCCCCC"> fast</font><font color="#E5E5E5"> compiler what we</font>

371
00:12:28,399 --> 00:12:32,209
tried so far<font color="#E5E5E5"> is we've made it so that we</font>

372
00:12:30,709 --> 00:12:33,589
<font color="#E5E5E5">just if anything is a pure build</font>

373
00:12:32,209 --> 00:12:36,319
dependency anything under there<font color="#E5E5E5"> that</font>

374
00:12:33,589 --> 00:12:38,720
<font color="#E5E5E5">needs to run in the build environment</font><font color="#CCCCCC"> we</font>

375
00:12:36,319 --> 00:12:40,279
make we<font color="#E5E5E5"> just build</font><font color="#CCCCCC"> that with the easy</font>

376
00:12:38,720 --> 00:12:42,259
compiler<font color="#E5E5E5"> and so what ends up happening</font>

377
00:12:40,279 --> 00:12:44,869
<font color="#E5E5E5">is so this is a pure build dependency</font>

378
00:12:42,259 --> 00:12:47,389
here<font color="#CCCCCC"> you get this whole tree building</font>

379
00:12:44,869 --> 00:12:49,399
<font color="#CCCCCC">with the easy compiler so it's like GCC</font>

380
00:12:47,389 --> 00:12:50,779
<font color="#CCCCCC">or something</font><font color="#E5E5E5"> this is a link dependency</font>

381
00:12:49,399 --> 00:12:52,119
so it forces<font color="#CCCCCC"> this guy to</font><font color="#E5E5E5"> be built with</font>

382
00:12:50,779 --> 00:12:54,919
the fast compiler along with the<font color="#E5E5E5"> route</font>

383
00:12:52,119 --> 00:12:56,539
<font color="#CCCCCC">and so on</font><font color="#E5E5E5"> down this this link and run</font>

384
00:12:54,919 --> 00:12:57,889
chain<font color="#E5E5E5"> and we know that this needs</font><font color="#CCCCCC"> to run</font>

385
00:12:56,539 --> 00:12:59,809
in the run environment so we figure it's

386
00:12:57,889 --> 00:13:01,699
something computational so we'll<font color="#E5E5E5"> build</font>

387
00:12:59,809 --> 00:13:03,108
<font color="#E5E5E5">that with the fast compiler too and then</font>

388
00:13:01,699 --> 00:13:05,118
this<font color="#E5E5E5"> is a pure build dependency so we</font>

389
00:13:03,109 --> 00:13:07,789
just make<font color="#CCCCCC"> that easy again you'll</font><font color="#E5E5E5"> notice</font>

390
00:13:05,119 --> 00:13:10,339
<font color="#E5E5E5">that this</font><font color="#CCCCCC"> is a build dependency but it's</font>

391
00:13:07,789 --> 00:13:12,980
it's<font color="#E5E5E5"> something that's fast that depends</font>

392
00:13:10,339 --> 00:13:14,539
on this other<font color="#CCCCCC"> library as both a link and</font>

393
00:13:12,980 --> 00:13:16,089
to build dependency so here we're just

394
00:13:14,539 --> 00:13:19,850
prioritizing the link dependency because

395
00:13:16,089 --> 00:13:20,860
we could still<font color="#E5E5E5"> use the code that we</font>

396
00:13:19,850 --> 00:13:22,000
built if we're if we

397
00:13:20,860 --> 00:13:24,790
<font color="#E5E5E5">two different compilers</font><font color="#CCCCCC"> for the same</font>

398
00:13:22,000 --> 00:13:27,400
architecture<font color="#E5E5E5"> so we get away with that</font>

399
00:13:24,790 --> 00:13:30,760
here this seems to work<font color="#CCCCCC"> pretty well</font><font color="#E5E5E5"> for</font>

400
00:13:27,400 --> 00:13:33,160
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of our numerical codes and we're</font>

401
00:13:30,760 --> 00:13:34,840
planning<font color="#E5E5E5"> on where'd you get in things</font>

402
00:13:33,160 --> 00:13:37,209
get a little more complicated<font color="#CCCCCC"> when you</font>

403
00:13:34,840 --> 00:13:39,280
try<font color="#CCCCCC"> to cross compile so why do</font><font color="#E5E5E5"> you care</font>

404
00:13:37,210 --> 00:13:40,180
<font color="#CCCCCC">about cross compilation well</font><font color="#E5E5E5"> your big</font>

405
00:13:39,280 --> 00:13:42,160
machine has a different architecture

406
00:13:40,180 --> 00:13:43,599
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the front end</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the user login</font>

407
00:13:42,160 --> 00:13:45,400
<font color="#E5E5E5">knows we tend to provision with these</font>

408
00:13:43,600 --> 00:13:47,650
nice big fat cores for building like

409
00:13:45,400 --> 00:13:49,510
power<font color="#CCCCCC"> 9s or</font><font color="#E5E5E5"> power 7s on the actual</font>

410
00:13:47,650 --> 00:13:51,370
blue-jean machine<font color="#E5E5E5"> they run a standard</font>

411
00:13:49,510 --> 00:13:53,950
<font color="#E5E5E5">Linux distro it's a nice easy</font>

412
00:13:51,370 --> 00:13:54,580
<font color="#CCCCCC">environment to work in but to run</font><font color="#E5E5E5"> on the</font>

413
00:13:53,950 --> 00:13:56,920
compute nodes

414
00:13:54,580 --> 00:13:59,290
<font color="#E5E5E5">you know we run a special core</font><font color="#CCCCCC"> it has a</font>

415
00:13:56,920 --> 00:14:01,599
lightweight OS it's not the same<font color="#CCCCCC"> runtime</font>

416
00:13:59,290 --> 00:14:03,730
that<font color="#E5E5E5"> exists on the front end and that's</font>

417
00:14:01,600 --> 00:14:05,350
for performance<font color="#E5E5E5"> and for reducing OS</font>

418
00:14:03,730 --> 00:14:06,640
noise in these parallel applications

419
00:14:05,350 --> 00:14:07,360
<font color="#E5E5E5">have to synchronize frequently if you</font>

420
00:14:06,640 --> 00:14:09,069
have a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> noise</font>

421
00:14:07,360 --> 00:14:11,170
the synchronization<font color="#CCCCCC"> can be a lot</font><font color="#E5E5E5"> more</font>

422
00:14:09,070 --> 00:14:13,290
costly<font color="#E5E5E5"> so we care about that when we're</font>

423
00:14:11,170 --> 00:14:15,760
<font color="#CCCCCC">running on a million</font><font color="#E5E5E5"> cores</font>

424
00:14:13,290 --> 00:14:17,469
<font color="#CCCCCC">you</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> build the things here you</font>

425
00:14:15,760 --> 00:14:20,620
submit<font color="#E5E5E5"> jobs or workload manager and it</font>

426
00:14:17,470 --> 00:14:22,240
runs them back there and<font color="#E5E5E5"> then that's how</font>

427
00:14:20,620 --> 00:14:24,160
you get<font color="#E5E5E5"> your speed that's how we get</font>

428
00:14:22,240 --> 00:14:25,620
machines this big is by compacting<font color="#CCCCCC"> the</font>

429
00:14:24,160 --> 00:14:31,510
processors<font color="#E5E5E5"> more densely and using</font>

430
00:14:25,620 --> 00:14:34,030
special cores<font color="#E5E5E5"> why not build natively on</font>

431
00:14:31,510 --> 00:14:35,170
<font color="#E5E5E5">the compute</font><font color="#CCCCCC"> nodes in many cases if you</font>

432
00:14:34,030 --> 00:14:37,270
build<font color="#E5E5E5"> on the compute</font><font color="#CCCCCC"> nodes it's pretty</font>

433
00:14:35,170 --> 00:14:38,469
slow we have lots of those cores but

434
00:14:37,270 --> 00:14:39,910
that doesn't mean<font color="#E5E5E5"> they're fast</font>

435
00:14:38,470 --> 00:14:42,490
<font color="#E5E5E5">they're fast when you use lots of them</font>

436
00:14:39,910 --> 00:14:44,530
but if you<font color="#E5E5E5"> look at say a Xeon Phi it's</font>

437
00:14:42,490 --> 00:14:46,390
like it's one chip it has 72 atom cores

438
00:14:44,530 --> 00:14:47,920
on it each one is 1.4 gigahertz and<font color="#E5E5E5"> if</font>

439
00:14:46,390 --> 00:14:49,180
you tried<font color="#E5E5E5"> to</font><font color="#CCCCCC"> build any kind of</font>

440
00:14:47,920 --> 00:14:52,060
significant thing on<font color="#E5E5E5"> that it could take</font>

441
00:14:49,180 --> 00:14:53,560
<font color="#E5E5E5">hours and</font><font color="#CCCCCC"> hours</font><font color="#E5E5E5"> typically those things</font>

442
00:14:52,060 --> 00:14:54,969
only<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the network file system</font><font color="#CCCCCC"> too</font>

443
00:14:53,560 --> 00:14:57,099
because the nodes are diskless and so

444
00:14:54,970 --> 00:14:59,200
this is the giant pain to build out

445
00:14:57,100 --> 00:15:00,370
there and then also<font color="#E5E5E5"> many of the</font>

446
00:14:59,200 --> 00:15:02,410
compilers aren't even ported<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

447
00:15:00,370 --> 00:15:05,440
compute nodes<font color="#CCCCCC"> you want they only run on</font>

448
00:15:02,410 --> 00:15:06,520
a straight<font color="#E5E5E5"> Linux distro and so we don't</font>

449
00:15:05,440 --> 00:15:08,320
<font color="#CCCCCC">really</font><font color="#E5E5E5"> have the option</font><font color="#CCCCCC"> of building</font><font color="#E5E5E5"> on</font>

450
00:15:06,520 --> 00:15:10,540
the compute nodes<font color="#CCCCCC"> in some cases we've</font>

451
00:15:08,320 --> 00:15:12,820
also had people<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to do a make - J out</font>

452
00:15:10,540 --> 00:15:15,339
<font color="#E5E5E5">on these Leon</font><font color="#CCCCCC"> 5 chips</font><font color="#E5E5E5"> and they've blown</font>

453
00:15:12,820 --> 00:15:17,380
out<font color="#E5E5E5"> their Intel license because there</font>

454
00:15:15,340 --> 00:15:20,440
were so many threads on the thing and

455
00:15:17,380 --> 00:15:22,090
<font color="#E5E5E5">instead they started you know 256 copies</font>

456
00:15:20,440 --> 00:15:24,160
of the Intel compiler and only had 64

457
00:15:22,090 --> 00:15:26,520
licenses so<font color="#CCCCCC"> that can</font><font color="#E5E5E5"> be sort of a</font>

458
00:15:24,160 --> 00:15:26,520
<font color="#E5E5E5">problem</font>

459
00:15:26,880 --> 00:15:30,120
so there's all kinds of<font color="#CCCCCC"> reasons not to</font>

460
00:15:28,470 --> 00:15:33,029
build on the on the exotic in the exotic

461
00:15:30,120 --> 00:15:35,579
<font color="#E5E5E5">place</font><font color="#CCCCCC"> so how do the build dependencies</font>

462
00:15:33,029 --> 00:15:37,079
actually work with cross compiles<font color="#CCCCCC"> so</font>

463
00:15:35,579 --> 00:15:38,519
<font color="#CCCCCC">recall we've got these</font><font color="#E5E5E5"> three builds up</font>

464
00:15:37,079 --> 00:15:40,888
and it<font color="#E5E5E5"> was getting</font><font color="#CCCCCC"> a three build or</font>

465
00:15:38,519 --> 00:15:42,600
three dependency types<font color="#E5E5E5"> builder things</font>

466
00:15:40,889 --> 00:15:43,589
that you want<font color="#E5E5E5"> to run at</font><font color="#CCCCCC"> Build time link</font>

467
00:15:42,600 --> 00:15:45,029
are things that the package is<font color="#CCCCCC"> gonna</font>

468
00:15:43,589 --> 00:15:46,860
link with and run are things that<font color="#E5E5E5"> you</font>

469
00:15:45,029 --> 00:15:49,139
might invoke at<font color="#CCCCCC"> runtime so the build and</font>

470
00:15:46,860 --> 00:15:51,120
<font color="#E5E5E5">run ones are basically commands</font><font color="#CCCCCC"> you have</font>

471
00:15:49,139 --> 00:15:52,500
<font color="#E5E5E5">an issue now</font><font color="#CCCCCC"> because you need your build</font>

472
00:15:51,120 --> 00:15:53,639
<font color="#E5E5E5">up in disease built for the architecture</font>

473
00:15:52,500 --> 00:15:55,740
where<font color="#E5E5E5"> you're building because they have</font>

474
00:15:53,639 --> 00:15:57,060
to<font color="#CCCCCC"> run</font><font color="#E5E5E5"> at build time and we got away</font>

475
00:15:55,740 --> 00:15:58,319
<font color="#E5E5E5">before with cheating and basically</font>

476
00:15:57,060 --> 00:15:59,819
building some of<font color="#E5E5E5"> the things</font><font color="#CCCCCC"> that we're</font>

477
00:15:58,319 --> 00:16:03,240
both<font color="#CCCCCC"> linked and build</font><font color="#E5E5E5"> dependencies for</font>

478
00:15:59,819 --> 00:16:04,319
the<font color="#CCCCCC"> backend and so we can't do that</font>

479
00:16:03,240 --> 00:16:05,459
<font color="#E5E5E5">anymore because we're actually cross</font>

480
00:16:04,319 --> 00:16:06,810
compiling if we build the build

481
00:16:05,459 --> 00:16:09,839
dependencies for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> backend they really</font>

482
00:16:06,810 --> 00:16:12,979
won't run on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> even if even</font>

483
00:16:09,839 --> 00:16:15,110
<font color="#E5E5E5">if it's they won't run</font><font color="#CCCCCC"> on the front-end</font>

484
00:16:12,980 --> 00:16:17,519
because it's a different<font color="#CCCCCC"> architecture</font>

485
00:16:15,110 --> 00:16:18,870
and so we could use<font color="#CCCCCC"> our build dependency</font>

486
00:16:17,519 --> 00:16:20,639
trick here sort of but we have to modify

487
00:16:18,870 --> 00:16:22,829
<font color="#E5E5E5">it a little</font><font color="#CCCCCC"> bit here's that</font><font color="#E5E5E5"> same dag</font>

488
00:16:20,639 --> 00:16:24,269
from last time you can<font color="#E5E5E5"> do the thing</font>

489
00:16:22,829 --> 00:16:25,739
where<font color="#E5E5E5"> you basically run the front-end</font>

490
00:16:24,269 --> 00:16:27,180
compilers for<font color="#E5E5E5"> these libraries that are</font>

491
00:16:25,740 --> 00:16:29,940
<font color="#E5E5E5">basically dependent on through</font><font color="#CCCCCC"> pure</font>

492
00:16:27,180 --> 00:16:31,800
build dependencies but if you have a

493
00:16:29,940 --> 00:16:33,089
<font color="#CCCCCC">problem this</font><font color="#E5E5E5"> build dependency here it</font>

494
00:16:31,800 --> 00:16:34,500
<font color="#E5E5E5">needs to be run in the build</font><font color="#CCCCCC"> environment</font>

495
00:16:33,089 --> 00:16:36,120
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> won't run</font><font color="#CCCCCC"> anymore because now</font>

496
00:16:34,500 --> 00:16:37,680
<font color="#E5E5E5">it's for a different</font><font color="#CCCCCC"> architecture same</font>

497
00:16:36,120 --> 00:16:39,689
down<font color="#CCCCCC"> here</font><font color="#E5E5E5"> this build dependency has a</font>

498
00:16:37,680 --> 00:16:40,709
run dependency<font color="#CCCCCC"> on this thing</font><font color="#E5E5E5"> and so this</font>

499
00:16:39,689 --> 00:16:44,519
won't run because it's a different

500
00:16:40,709 --> 00:16:45,660
<font color="#CCCCCC">architecture what we do here and or at</font>

501
00:16:44,519 --> 00:16:47,519
least what we're<font color="#CCCCCC"> planning</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> doing this</font>

502
00:16:45,660 --> 00:16:49,560
is the new<font color="#E5E5E5"> model is that we would</font>

503
00:16:47,519 --> 00:16:51,269
<font color="#CCCCCC">actually duplicate these guys and so if</font>

504
00:16:49,560 --> 00:16:52,920
you have built<font color="#E5E5E5"> if you have these kinds</font>

505
00:16:51,269 --> 00:16:54,120
of dependency relationships you actually

506
00:16:52,920 --> 00:16:57,060
have to make<font color="#E5E5E5"> a different version</font><font color="#CCCCCC"> of</font>

507
00:16:54,120 --> 00:16:59,779
these two<font color="#E5E5E5"> guys to run on the</font><font color="#CCCCCC"> front-end</font>

508
00:16:57,060 --> 00:17:02,518
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so we have to actually split</font><font color="#E5E5E5"> the dag</font>

509
00:16:59,779 --> 00:17:05,069
<font color="#CCCCCC">now you have sort of a violation</font><font color="#E5E5E5"> of our</font>

510
00:17:02,519 --> 00:17:07,020
original<font color="#CCCCCC"> constraint which is that this</font>

511
00:17:05,069 --> 00:17:08,879
now you have two<font color="#CCCCCC"> versions of</font><font color="#E5E5E5"> five in the</font>

512
00:17:07,020 --> 00:17:11,339
same dag<font color="#E5E5E5"> and two versions</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> eight in</font>

513
00:17:08,880 --> 00:17:12,569
the same dag<font color="#E5E5E5"> that's not so good but we</font>

514
00:17:11,339 --> 00:17:15,089
<font color="#CCCCCC">can handle</font><font color="#E5E5E5"> it we have to modify our</font>

515
00:17:12,569 --> 00:17:18,869
model a little<font color="#E5E5E5"> bit but at least now</font><font color="#CCCCCC"> we</font>

516
00:17:15,089 --> 00:17:20,399
can<font color="#E5E5E5"> run we can actually run on the cross</font>

517
00:17:18,869 --> 00:17:21,658
<font color="#CCCCCC">compiled machines</font><font color="#E5E5E5"> it's just a little</font>

518
00:17:20,400 --> 00:17:23,189
<font color="#E5E5E5">more complicated and there's a few more</font>

519
00:17:21,659 --> 00:17:25,230
relaxed constraints<font color="#CCCCCC"> that we have to deal</font>

520
00:17:23,189 --> 00:17:26,280
<font color="#CCCCCC">with</font><font color="#E5E5E5"> there's some other interesting</font>

521
00:17:25,230 --> 00:17:27,839
constraints<font color="#CCCCCC"> that</font><font color="#E5E5E5"> come up in this</font>

522
00:17:26,280 --> 00:17:30,120
<font color="#CCCCCC">environment that like</font><font color="#E5E5E5"> this when I wasn't</font>

523
00:17:27,839 --> 00:17:32,100
<font color="#CCCCCC">even expecting there are certain tools</font>

524
00:17:30,120 --> 00:17:33,539
like<font color="#E5E5E5"> set up tools and Python that</font>

525
00:17:32,100 --> 00:17:35,428
actually add code to<font color="#E5E5E5"> the installed</font>

526
00:17:33,539 --> 00:17:36,570
package and so you may<font color="#CCCCCC"> think that</font><font color="#E5E5E5"> you</font>

527
00:17:35,429 --> 00:17:37,830
could<font color="#E5E5E5"> just do resolution kind of</font>

528
00:17:36,570 --> 00:17:38,970
separately for the front<font color="#E5E5E5"> end in the back</font>

529
00:17:37,830 --> 00:17:41,789
<font color="#E5E5E5">end</font>

530
00:17:38,970 --> 00:17:44,460
but you actually<font color="#E5E5E5"> can't because this</font>

531
00:17:41,789 --> 00:17:46,020
<font color="#CCCCCC">setup tools is running in this</font><font color="#E5E5E5"> Python on</font>

532
00:17:44,460 --> 00:17:47,789
the on the<font color="#E5E5E5"> front</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> and it's gonna</font>

533
00:17:46,020 --> 00:17:49,200
inject code that needs to run in this

534
00:17:47,789 --> 00:17:50,250
<font color="#E5E5E5">Python on the back end the pythons</font>

535
00:17:49,200 --> 00:17:51,840
interpreted why does it care about

536
00:17:50,250 --> 00:17:53,640
architectures well you don't<font color="#E5E5E5"> care about</font>

537
00:17:51,840 --> 00:17:55,080
architectures but you do have a

538
00:17:53,640 --> 00:17:56,909
constraint that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> art these</font><font color="#CCCCCC"> two</font>

539
00:17:55,080 --> 00:17:58,439
pythons now have to be the same<font color="#CCCCCC"> version</font>

540
00:17:56,909 --> 00:18:00,179
otherwise the code that<font color="#E5E5E5"> setup tools is</font>

541
00:17:58,440 --> 00:18:04,409
<font color="#CCCCCC">going to inject to run back here</font><font color="#E5E5E5"> is</font>

542
00:18:00,179 --> 00:18:06,480
<font color="#E5E5E5">going to fail</font><font color="#CCCCCC"> and so we now have</font><font color="#E5E5E5"> you</font>

543
00:18:04,409 --> 00:18:08,309
<font color="#CCCCCC">know we</font><font color="#E5E5E5"> have a dag where we have to have</font>

544
00:18:06,480 --> 00:18:10,530
<font color="#E5E5E5">two different versions of the</font><font color="#CCCCCC"> same</font>

545
00:18:08,309 --> 00:18:12,210
package<font color="#CCCCCC"> in it and we have</font><font color="#E5E5E5"> constraints</font>

546
00:18:10,530 --> 00:18:14,039
across architectures that<font color="#CCCCCC"> run through</font>

547
00:18:12,210 --> 00:18:16,260
the<font color="#E5E5E5"> dependency problem that we're</font>

548
00:18:14,039 --> 00:18:19,830
<font color="#CCCCCC">solving and so that one actually</font>

549
00:18:16,260 --> 00:18:20,908
surprised me I was<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was it was it was</font>

550
00:18:19,830 --> 00:18:23,908
pretty<font color="#E5E5E5"> cool that we actually have to</font>

551
00:18:20,909 --> 00:18:27,510
deal<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> and then the</font>

552
00:18:23,909 --> 00:18:28,620
last issue<font color="#E5E5E5"> compiler dependencies I said</font>

553
00:18:27,510 --> 00:18:30,120
that compilers are<font color="#E5E5E5"> a special case</font>

554
00:18:28,620 --> 00:18:33,959
inspector<font color="#E5E5E5"> right now and we did that to</font>

555
00:18:30,120 --> 00:18:35,760
get<font color="#E5E5E5"> it working quickly</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> true but</font>

556
00:18:33,960 --> 00:18:37,679
what<font color="#E5E5E5"> we'd</font><font color="#CCCCCC"> really like to</font><font color="#E5E5E5"> do is have a</font>

557
00:18:35,760 --> 00:18:39,539
more<font color="#E5E5E5"> natural dependency model for our</font>

558
00:18:37,679 --> 00:18:40,830
<font color="#E5E5E5">packages where you don't have to</font>

559
00:18:39,539 --> 00:18:42,240
remember all<font color="#CCCCCC"> the different versions of</font>

560
00:18:40,830 --> 00:18:43,830
<font color="#E5E5E5">the compiler</font><font color="#CCCCCC"> that support the level</font><font color="#E5E5E5"> of</font>

561
00:18:42,240 --> 00:18:45,510
<font color="#CCCCCC">C++ that you care about we don't</font><font color="#E5E5E5"> want</font>

562
00:18:43,830 --> 00:18:47,850
the packages<font color="#E5E5E5"> to have to say I need GCC</font>

563
00:18:45,510 --> 00:18:49,200
<font color="#E5E5E5">for 93</font><font color="#CCCCCC"> I need</font><font color="#E5E5E5"> Intel 17</font>

564
00:18:47,850 --> 00:18:51,000
<font color="#CCCCCC">I need this other compiler at this</font>

565
00:18:49,200 --> 00:18:54,450
version<font color="#E5E5E5"> we just want them</font><font color="#CCCCCC"> to say I</font><font color="#E5E5E5"> need</font>

566
00:18:51,000 --> 00:18:58,140
<font color="#E5E5E5">c++ 17 or I need these features from C++</font>

567
00:18:54,450 --> 00:18:59,520
17 the other issue<font color="#E5E5E5"> is that compilers in</font>

568
00:18:58,140 --> 00:19:01,080
our current model can't easily<font color="#E5E5E5"> have</font>

569
00:18:59,520 --> 00:19:03,270
their own dependencies and actually this

570
00:19:01,080 --> 00:19:04,770
<font color="#E5E5E5">comes up you would be surprised some</font>

571
00:19:03,270 --> 00:19:07,320
<font color="#E5E5E5">compilers actually depend on other</font>

572
00:19:04,770 --> 00:19:11,340
compilers<font color="#CCCCCC"> so if you</font><font color="#E5E5E5"> run the Intel</font>

573
00:19:07,320 --> 00:19:13,530
compiler<font color="#CCCCCC"> it depends</font><font color="#E5E5E5"> on GCC because it</font>

574
00:19:11,340 --> 00:19:15,330
relies on it for its lips<font color="#E5E5E5"> tender C++ and</font>

575
00:19:13,530 --> 00:19:16,649
so there's the<font color="#E5E5E5"> nastiest version</font>

576
00:19:15,330 --> 00:19:18,870
synchronization problem that you've ever

577
00:19:16,650 --> 00:19:20,429
seen<font color="#E5E5E5"> when you try to build with new</font>

578
00:19:18,870 --> 00:19:21,989
versions<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the Intel compiler on</font>

579
00:19:20,429 --> 00:19:24,780
systems where the standard C++<font color="#E5E5E5"> library</font>

580
00:19:21,990 --> 00:19:27,780
<font color="#CCCCCC">is very old and so you have to actually</font>

581
00:19:24,780 --> 00:19:29,789
you have to tell it<font color="#E5E5E5"> to use a newer GCC</font>

582
00:19:27,780 --> 00:19:31,289
then the system GCC and you have to

583
00:19:29,789 --> 00:19:32,580
remember<font color="#CCCCCC"> to</font><font color="#E5E5E5"> our path that in so that</font>

584
00:19:31,289 --> 00:19:34,980
<font color="#E5E5E5">when you actually run the binary it</font>

585
00:19:32,580 --> 00:19:36,030
finds the right<font color="#CCCCCC"> live standard C++</font><font color="#E5E5E5"> either</font>

586
00:19:34,980 --> 00:19:37,470
<font color="#E5E5E5">that or you have to have</font><font color="#CCCCCC"> the user</font>

587
00:19:36,030 --> 00:19:40,610
remember to source all<font color="#CCCCCC"> the right files</font>

588
00:19:37,470 --> 00:19:43,669
to get the applications availing<font color="#E5E5E5"> to run</font>

589
00:19:40,610 --> 00:19:45,678
so what we're planning on<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is</font>

590
00:19:43,669 --> 00:19:47,990
factoring the compilers out as actual

591
00:19:45,679 --> 00:19:49,399
dependencies<font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually this would</font>

592
00:19:47,990 --> 00:19:50,630
allow us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have virtual dependencies</font>

593
00:19:49,399 --> 00:19:52,489
for<font color="#E5E5E5"> the different language levels so</font><font color="#CCCCCC"> we</font>

594
00:19:50,630 --> 00:19:54,409
could have C++<font color="#CCCCCC"> eleven seventeen fourteen</font>

595
00:19:52,490 --> 00:19:56,090
things like that<font color="#CCCCCC"> openmp is another one</font>

596
00:19:54,409 --> 00:19:58,730
that<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> it's really good</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> could</font>

597
00:19:56,090 --> 00:20:00,709
say we depend on<font color="#CCCCCC"> openmp for</font><font color="#E5E5E5"> and we could</font>

598
00:19:58,730 --> 00:20:01,909
have compilers provide both say<font color="#CCCCCC"> C++ at</font>

599
00:20:00,710 --> 00:20:04,429
different versions<font color="#CCCCCC"> and OpenMP at</font>

600
00:20:01,909 --> 00:20:07,460
different<font color="#E5E5E5"> versions so</font><font color="#CCCCCC"> suppose we</font><font color="#E5E5E5"> do that</font>

601
00:20:04,429 --> 00:20:09,110
<font color="#E5E5E5">you've got a package here</font><font color="#CCCCCC"> you've got it</font>

602
00:20:07,460 --> 00:20:11,029
depending on the Intel compiler at

603
00:20:09,110 --> 00:20:13,370
version 17 which then depends on GCC

604
00:20:11,029 --> 00:20:14,870
this is actually kind<font color="#CCCCCC"> of fine</font><font color="#E5E5E5"> we don't</font>

605
00:20:13,370 --> 00:20:16,549
<font color="#CCCCCC">have to do very much special here and</font>

606
00:20:14,870 --> 00:20:17,870
you could<font color="#E5E5E5"> actually do this with</font>

607
00:20:16,549 --> 00:20:20,240
conditional dependencies<font color="#E5E5E5"> you could just</font>

608
00:20:17,870 --> 00:20:22,668
say Intel at 17<font color="#E5E5E5"> depends on a specific</font>

609
00:20:20,240 --> 00:20:24,190
<font color="#CCCCCC">version range of GCC</font><font color="#E5E5E5"> and you wouldn't</font>

610
00:20:22,669 --> 00:20:27,260
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to introduce anything too special</font>

611
00:20:24,190 --> 00:20:28,909
<font color="#CCCCCC">to this dag but suppose that you now</font>

612
00:20:27,260 --> 00:20:30,440
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> build against something that's</font>

613
00:20:28,909 --> 00:20:32,179
<font color="#CCCCCC">already installed</font><font color="#E5E5E5"> that used an older</font>

614
00:20:30,440 --> 00:20:33,289
version of Intel and this actually<font color="#E5E5E5"> comes</font>

615
00:20:32,179 --> 00:20:36,110
<font color="#E5E5E5">up because we have so many compilers</font>

616
00:20:33,289 --> 00:20:37,940
running<font color="#CCCCCC"> around frequently where now you</font>

617
00:20:36,110 --> 00:20:39,979
want<font color="#E5E5E5"> to link this against the second</font>

618
00:20:37,940 --> 00:20:42,590
<font color="#CCCCCC">library and that one's built with Intel</font>

619
00:20:39,980 --> 00:20:44,240
15 this<font color="#E5E5E5"> is already installed and</font><font color="#CCCCCC"> that</font>

620
00:20:42,590 --> 00:20:47,178
built with GCC at four point nine point

621
00:20:44,240 --> 00:20:48,740
three well if you if you have these

622
00:20:47,179 --> 00:20:50,179
<font color="#E5E5E5">virgin ranges here you have this Intel</font>

623
00:20:48,740 --> 00:20:51,710
compiler depending on a specific<font color="#CCCCCC"> version</font>

624
00:20:50,179 --> 00:20:53,299
range of GCC<font color="#E5E5E5"> you have this Intel</font>

625
00:20:51,710 --> 00:20:57,620
compiler<font color="#E5E5E5"> depending on a version range of</font>

626
00:20:53,299 --> 00:20:59,690
GCC<font color="#CCCCCC"> it's still not constrained enough</font>

627
00:20:57,620 --> 00:21:01,189
that you can sync the standard C++

628
00:20:59,690 --> 00:21:03,320
<font color="#E5E5E5">versions between the compilers and</font>

629
00:21:01,190 --> 00:21:06,080
<font color="#E5E5E5">ensure that</font><font color="#CCCCCC"> they're consistent</font><font color="#E5E5E5"> and so</font>

630
00:21:03,320 --> 00:21:10,070
what we have to do here is<font color="#E5E5E5"> actually</font>

631
00:21:06,080 --> 00:21:12,260
introduce another type<font color="#CCCCCC"> of dependency so</font>

632
00:21:10,070 --> 00:21:14,240
what is<font color="#E5E5E5"> a compiler</font>

633
00:21:12,260 --> 00:21:16,070
it's a build dependency that imposes

634
00:21:14,240 --> 00:21:19,070
some link dependencies on the things

635
00:21:16,070 --> 00:21:20,389
<font color="#E5E5E5">that it builds and so in this case it's</font>

636
00:21:19,070 --> 00:21:23,678
the runtime libraries it's things like

637
00:21:20,389 --> 00:21:26,389
lips and<font color="#CCCCCC"> your C++ it's deliver that here</font>

638
00:21:23,679 --> 00:21:27,470
<font color="#CCCCCC">it's all the</font><font color="#E5E5E5"> different libraries</font><font color="#CCCCCC"> that</font>

639
00:21:26,389 --> 00:21:29,689
<font color="#CCCCCC">are bundled with the compiler that</font><font color="#E5E5E5"> you</font>

640
00:21:27,470 --> 00:21:31,220
don't see<font color="#E5E5E5"> on the link line and so what</font>

641
00:21:29,690 --> 00:21:33,860
we have to do is add hidden<font color="#E5E5E5"> dependencies</font>

642
00:21:31,220 --> 00:21:35,149
<font color="#E5E5E5">to the dag and normalize them like we</font>

643
00:21:33,860 --> 00:21:36,979
did<font color="#CCCCCC"> originally where we only have one</font>

644
00:21:35,149 --> 00:21:39,260
<font color="#E5E5E5">instance of them for the whole</font><font color="#CCCCCC"> dag</font>

645
00:21:36,980 --> 00:21:40,580
so the new dependency model looks kind

646
00:21:39,260 --> 00:21:44,360
of<font color="#E5E5E5"> like this if I have that dag from</font>

647
00:21:40,580 --> 00:21:46,789
before<font color="#CCCCCC"> now I say okay these compilers</font>

648
00:21:44,360 --> 00:21:49,428
<font color="#E5E5E5">here I need to figure out some way</font><font color="#CCCCCC"> to</font>

649
00:21:46,789 --> 00:21:51,139
get their standard C++ synced up so I

650
00:21:49,429 --> 00:21:52,679
have them impose a link dependency on

651
00:21:51,139 --> 00:21:54,840
<font color="#E5E5E5">the thing that</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> building and</font>

652
00:21:52,679 --> 00:21:56,850
now you get these two implicit hidden

653
00:21:54,840 --> 00:21:58,860
dependencies<font color="#E5E5E5"> from the compiler on</font><font color="#CCCCCC"> Lib</font>

654
00:21:56,850 --> 00:22:01,498
standard<font color="#E5E5E5"> C++ and we forced this to have</font>

655
00:21:58,860 --> 00:22:03,899
one node<font color="#E5E5E5"> for lips tender C++ per dag and</font>

656
00:22:01,499 --> 00:22:05,100
when those constraints get merged<font color="#CCCCCC"> then</font>

657
00:22:03,899 --> 00:22:07,979
you'll get a conflict at<font color="#E5E5E5"> the lip</font>

658
00:22:05,100 --> 00:22:11,189
standard C++ is are not synced<font color="#CCCCCC"> between</font>

659
00:22:07,980 --> 00:22:12,990
these different compilers<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and so</font>

660
00:22:11,190 --> 00:22:14,610
<font color="#E5E5E5">this is the model we're planning on</font>

661
00:22:12,990 --> 00:22:15,720
going to<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> it's pretty cool</font>

662
00:22:14,610 --> 00:22:16,949
because it<font color="#E5E5E5"> allows us to actually have</font>

663
00:22:15,720 --> 00:22:19,559
<font color="#E5E5E5">virtual dependencies for compiler</font>

664
00:22:16,950 --> 00:22:21,419
features and ensure consistency of<font color="#E5E5E5"> the</font>

665
00:22:19,559 --> 00:22:23,249
runtime<font color="#E5E5E5"> libraries and get the</font><font color="#CCCCCC"> árpád's</font>

666
00:22:21,419 --> 00:22:27,419
<font color="#E5E5E5">right which will make a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> people</font>

667
00:22:23,249 --> 00:22:29,129
<font color="#CCCCCC">happy</font><font color="#E5E5E5"> on our clusters so that's the</font>

668
00:22:27,419 --> 00:22:31,789
<font color="#CCCCCC">summary</font><font color="#E5E5E5"> we're working out constraints</font>

669
00:22:29,129 --> 00:22:34,619
for compiler<font color="#E5E5E5"> integration</font><font color="#CCCCCC"> it's not easy</font>

670
00:22:31,789 --> 00:22:37,139
<font color="#CCCCCC">weird things can happen</font><font color="#E5E5E5"> surprising</font>

671
00:22:34,619 --> 00:22:38,490
things<font color="#E5E5E5"> cross compiling can affect how</font>

672
00:22:37,139 --> 00:22:40,199
your pythons have<font color="#E5E5E5"> to be synced between</font>

673
00:22:38,490 --> 00:22:41,399
<font color="#E5E5E5">the front end and the back</font><font color="#CCCCCC"> end and and</font>

674
00:22:40,200 --> 00:22:43,889
also thing is you have to<font color="#E5E5E5"> add additional</font>

675
00:22:41,399 --> 00:22:45,178
dependencies<font color="#E5E5E5"> to the dag</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're trying</font>

676
00:22:43,889 --> 00:22:47,820
to make this part of<font color="#CCCCCC"> spax build</font>

677
00:22:45,179 --> 00:22:48,809
configuration and we're hoping that this

678
00:22:47,820 --> 00:22:50,070
<font color="#E5E5E5">will make it</font><font color="#CCCCCC"> really easy</font><font color="#E5E5E5"> to write a</font>

679
00:22:48,809 --> 00:22:52,080
single<font color="#E5E5E5"> source package that you can</font>

680
00:22:50,070 --> 00:22:55,350
<font color="#E5E5E5">compile in lots of different</font><font color="#CCCCCC"> ways</font><font color="#E5E5E5"> on</font>

681
00:22:52,080 --> 00:22:57,178
some pretty<font color="#E5E5E5"> exotic machines so I have a</font>

682
00:22:55,350 --> 00:22:59,070
bunch of<font color="#E5E5E5"> stack stickers over there if</font>

683
00:22:57,179 --> 00:23:12,720
people want stickers so come and<font color="#E5E5E5"> get</font>

684
00:22:59,070 --> 00:23:14,249
them<font color="#E5E5E5"> and that's all for</font><font color="#CCCCCC"> my talk right</font>

685
00:23:12,720 --> 00:23:16,019
<font color="#E5E5E5">now I think so it was taking forever</font>

686
00:23:14,249 --> 00:23:17,940
<font color="#E5E5E5">because</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> some really oh sorry</font>

687
00:23:16,019 --> 00:23:19,590
<font color="#E5E5E5">let's repeat the question</font><font color="#CCCCCC"> so the</font>

688
00:23:17,940 --> 00:23:20,610
<font color="#E5E5E5">question was</font><font color="#CCCCCC"> for the sizes of</font><font color="#E5E5E5"> DAGs that</font>

689
00:23:19,590 --> 00:23:23,220
we're dealing<font color="#CCCCCC"> with how</font><font color="#E5E5E5"> long does</font>

690
00:23:20,610 --> 00:23:25,559
concretization take it takes no more

691
00:23:23,220 --> 00:23:27,779
than<font color="#CCCCCC"> like five</font><font color="#E5E5E5"> seconds right</font><font color="#CCCCCC"> now for</font>

692
00:23:25,559 --> 00:23:29,519
what we've got it may take<font color="#CCCCCC"> longer once</font>

693
00:23:27,779 --> 00:23:31,830
we go<font color="#E5E5E5"> to a full Sat solver</font><font color="#CCCCCC"> I'm not sure</font>

694
00:23:29,519 --> 00:23:34,320
we're a<font color="#CCCCCC"> little greedy right now</font><font color="#E5E5E5"> in the</font>

695
00:23:31,830 --> 00:23:36,720
way<font color="#E5E5E5"> that we do the solve but you know</font>

696
00:23:34,320 --> 00:23:41,999
most most<font color="#E5E5E5"> of that is Python being slow</font>

697
00:23:36,720 --> 00:23:45,480
<font color="#E5E5E5">and</font><font color="#CCCCCC"> not how fast saat can run when</font>

698
00:23:41,999 --> 00:23:47,009
<font color="#CCCCCC">things go wrong</font><font color="#E5E5E5"> how exposed to the user</font>

699
00:23:45,480 --> 00:23:49,529
<font color="#E5E5E5">I guess the ones I'm most interested in</font>

700
00:23:47,009 --> 00:23:53,940
is<font color="#E5E5E5"> if it's a kind of quite</font>

701
00:23:49,529 --> 00:23:56,940
concretization<font color="#E5E5E5"> fails yeah yes you</font><font color="#CCCCCC"> can</font>

702
00:23:53,940 --> 00:23:58,070
result something<font color="#CCCCCC"> or similarly if say you</font>

703
00:23:56,940 --> 00:24:01,820
asked to interview

704
00:23:58,070 --> 00:24:03,530
<font color="#E5E5E5">CCC 4.7</font><font color="#CCCCCC"> yes it will be built 4.8</font><font color="#E5E5E5"> and</font>

705
00:24:01,820 --> 00:24:04,850
that's not being defined in the package

706
00:24:03,530 --> 00:24:06,649
sure because<font color="#CCCCCC"> then one's</font><font color="#E5E5E5"> tried that</font>

707
00:24:04,850 --> 00:24:10,669
<font color="#E5E5E5">particular combination</font><font color="#CCCCCC"> right what do</font>

708
00:24:06,650 --> 00:24:12,560
each of<font color="#CCCCCC"> those</font><font color="#E5E5E5"> cases</font><font color="#CCCCCC"> okay so I guess the</font>

709
00:24:10,670 --> 00:24:14,450
<font color="#CCCCCC">the shorter so the question was</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> is</font>

710
00:24:12,560 --> 00:24:16,850
that<font color="#E5E5E5"> exposed to the user when</font>

711
00:24:14,450 --> 00:24:18,020
<font color="#E5E5E5">concretization fails and if the packages</font>

712
00:24:16,850 --> 00:24:20,840
<font color="#CCCCCC">don't expose all the</font><font color="#E5E5E5"> right constraints</font>

713
00:24:18,020 --> 00:24:24,350
and if the build fails<font color="#CCCCCC"> so the short</font>

714
00:24:20,840 --> 00:24:26,060
answer<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not well and so you know if</font>

715
00:24:24,350 --> 00:24:27,379
<font color="#E5E5E5">computerization fails</font><font color="#CCCCCC"> I wouldn't say</font>

716
00:24:26,060 --> 00:24:28,909
that<font color="#E5E5E5"> we have the best error messages in</font>

717
00:24:27,380 --> 00:24:30,410
the world yet<font color="#CCCCCC"> if it's a simple</font>

718
00:24:28,910 --> 00:24:32,300
constraint<font color="#CCCCCC"> you may get the two</font>

719
00:24:30,410 --> 00:24:34,280
constraints conflicting that<font color="#E5E5E5"> you expect</font>

720
00:24:32,300 --> 00:24:35,710
so it may say<font color="#E5E5E5"> this thing depends on GCC</font>

721
00:24:34,280 --> 00:24:37,730
and you're trying to<font color="#E5E5E5"> build with Intel</font>

722
00:24:35,710 --> 00:24:39,170
often it<font color="#E5E5E5"> takes some thought to figure</font>

723
00:24:37,730 --> 00:24:40,790
out exactly what it's trying to<font color="#E5E5E5"> say</font><font color="#CCCCCC"> to</font>

724
00:24:39,170 --> 00:24:43,490
you which is not<font color="#E5E5E5"> great</font><font color="#CCCCCC"> so that's</font>

725
00:24:40,790 --> 00:24:45,710
something we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> improve for the build</font>

726
00:24:43,490 --> 00:24:47,300
failure<font color="#E5E5E5"> part we've tried pretty</font><font color="#CCCCCC"> hard to</font>

727
00:24:45,710 --> 00:24:49,460
make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so that a big build will give</font>

728
00:24:47,300 --> 00:24:51,830
you intelligent<font color="#E5E5E5"> error messages we stole</font>

729
00:24:49,460 --> 00:24:54,410
the magic regular expressions from<font color="#E5E5E5"> C</font>

730
00:24:51,830 --> 00:24:56,389
<font color="#E5E5E5">test and so</font><font color="#CCCCCC"> we'll actually</font><font color="#E5E5E5"> go and parse</font>

731
00:24:54,410 --> 00:24:59,330
the build log and spit out highlighted

732
00:24:56,390 --> 00:25:00,590
error messages for with context for what

733
00:24:59,330 --> 00:25:04,070
happened but yeah it's<font color="#E5E5E5"> still an error</font>

734
00:25:00,590 --> 00:25:06,709
<font color="#CCCCCC">message</font><font color="#E5E5E5"> so this is still an improvement</font>

735
00:25:04,070 --> 00:25:08,330
over building by hand which is<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

736
00:25:06,710 --> 00:25:21,500
<font color="#E5E5E5">the bar that</font><font color="#CCCCCC"> were we're</font><font color="#E5E5E5"> trying to get</font>

737
00:25:08,330 --> 00:25:24,110
above it would introduce a<font color="#E5E5E5"> new version</font>

738
00:25:21,500 --> 00:25:26,030
of spec<font color="#CCCCCC"> it wouldn't be</font><font color="#E5E5E5"> incompatible with</font>

739
00:25:24,110 --> 00:25:27,320
the old one<font color="#E5E5E5"> I'm sorry but so what's the</font>

740
00:25:26,030 --> 00:25:28,670
time frame<font color="#CCCCCC"> for</font><font color="#E5E5E5"> all this stuff and we'll</font>

741
00:25:27,320 --> 00:25:31,550
it makes back incompatible with old

742
00:25:28,670 --> 00:25:33,530
versions of stack we try to stay

743
00:25:31,550 --> 00:25:34,879
backward compatible with like the stuff

744
00:25:33,530 --> 00:25:36,770
that<font color="#CCCCCC"> we installed so that a</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> version</font>

745
00:25:34,880 --> 00:25:38,960
of<font color="#CCCCCC"> spec cannons can understand the old</font>

746
00:25:36,770 --> 00:25:40,340
<font color="#E5E5E5">database so you would still</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

747
00:25:38,960 --> 00:25:42,710
<font color="#E5E5E5">see your old packages it may just</font>

748
00:25:40,340 --> 00:25:46,010
rebuild a<font color="#E5E5E5"> lot of stuff yeah</font><font color="#CCCCCC"> and so the</font>

749
00:25:42,710 --> 00:25:48,050
<font color="#E5E5E5">time frame would be by September is sort</font>

750
00:25:46,010 --> 00:25:50,070
<font color="#E5E5E5">of the the latest we're hoping for</font>

751
00:25:48,050 --> 00:25:53,649
<font color="#E5E5E5">earlier</font>

752
00:25:50,070 --> 00:25:59,739
<font color="#E5E5E5">I think so I think my time</font><font color="#CCCCCC"> is up Thanks</font>

753
00:25:53,650 --> 00:25:59,739
[Applause]

