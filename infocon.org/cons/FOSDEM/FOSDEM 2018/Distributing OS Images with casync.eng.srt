1
00:00:05,060 --> 00:00:10,829
hi I'm not<font color="#CCCCCC"> a farthing</font><font color="#E5E5E5"> you might know me</font>

2
00:00:07,950 --> 00:00:13,920
<font color="#CCCCCC">from system Dean stuff I'm going</font><font color="#E5E5E5"> to talk</font>

3
00:00:10,830 --> 00:00:17,009
today<font color="#E5E5E5"> about CS Inc which</font><font color="#CCCCCC"> is my little</font>

4
00:00:13,920 --> 00:00:19,380
side project<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> very unfortunate is</font>

5
00:00:17,010 --> 00:00:20,369
that<font color="#E5E5E5"> exactly at this time or like in 20</font>

6
00:00:19,380 --> 00:00:22,500
minutes or something there's another

7
00:00:20,369 --> 00:00:25,320
talk about<font color="#CCCCCC"> C async</font><font color="#E5E5E5"> actually somewhere on</font>

8
00:00:22,500 --> 00:00:27,029
the other<font color="#E5E5E5"> end of the campus</font><font color="#CCCCCC"> I would much</font>

9
00:00:25,320 --> 00:00:29,490
rather be<font color="#E5E5E5"> at that one</font><font color="#CCCCCC"> actually but</font>

10
00:00:27,029 --> 00:00:31,170
anyway<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the ones who might have seen</font>

11
00:00:29,490 --> 00:00:33,809
this talk like for<font color="#CCCCCC"> example at all</font>

12
00:00:31,170 --> 00:00:34,920
systems go at<font color="#CCCCCC"> DEFCON last month's it's</font>

13
00:00:33,809 --> 00:00:37,019
<font color="#E5E5E5">probably good idea</font><font color="#CCCCCC"> could to the other</font>

14
00:00:34,920 --> 00:00:39,540
one<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you learn</font><font color="#E5E5E5"> something new</font><font color="#CCCCCC"> because</font>

15
00:00:37,020 --> 00:00:41,700
<font color="#CCCCCC">this</font><font color="#E5E5E5"> one's just mostly the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> sliders</font>

16
00:00:39,540 --> 00:00:45,870
before<font color="#CCCCCC"> a little bit updated though</font>

17
00:00:41,700 --> 00:00:48,809
<font color="#E5E5E5">anyway I'm talking</font><font color="#CCCCCC"> about CI sync yeah</font>

18
00:00:45,870 --> 00:00:51,809
let's jump right in

19
00:00:48,809 --> 00:00:53,459
what is CI think<font color="#E5E5E5"> the name say syncs</font>

20
00:00:51,809 --> 00:00:56,160
supposed to suggest the relationship to

21
00:00:53,460 --> 00:00:57,390
<font color="#E5E5E5">content-addressable file systems</font><font color="#CCCCCC"> well by</font>

22
00:00:56,160 --> 00:00:59,069
the<font color="#E5E5E5"> way if anyone has a question about</font>

23
00:00:57,390 --> 00:01:00,930
<font color="#E5E5E5">any of what I'm saying</font><font color="#CCCCCC"> here</font>

24
00:00:59,070 --> 00:01:02,760
I much prefer if you interrupt me right

25
00:01:00,930 --> 00:01:04,979
<font color="#E5E5E5">away and we have a discussion on topic</font>

26
00:01:02,760 --> 00:01:06,420
than doing<font color="#E5E5E5"> all of that at the end so by</font>

27
00:01:04,979 --> 00:01:08,700
any means<font color="#CCCCCC"> you're completely welcome to</font>

28
00:01:06,420 --> 00:01:10,229
<font color="#E5E5E5">interrupt me yes see I think</font>

29
00:01:08,700 --> 00:01:12,090
<font color="#CCCCCC">content-addressable file</font><font color="#E5E5E5"> systems</font>

30
00:01:10,229 --> 00:01:13,560
everybody knows<font color="#E5E5E5"> those like get like</font>

31
00:01:12,090 --> 00:01:17,220
everybody a few probably<font color="#E5E5E5"> plays around</font>

32
00:01:13,560 --> 00:01:18,899
<font color="#CCCCCC">was get</font><font color="#E5E5E5"> every day yeah you know how this</font>

33
00:01:17,220 --> 00:01:19,830
works<font color="#E5E5E5"> content-addressable file system of</font>

34
00:01:18,899 --> 00:01:21,780
these<font color="#E5E5E5"> things where you have these hashes</font>

35
00:01:19,830 --> 00:01:23,399
<font color="#CCCCCC">and they refer to objects and</font><font color="#E5E5E5"> then you</font>

36
00:01:21,780 --> 00:01:25,679
can use these hashes in<font color="#E5E5E5"> place of the</font>

37
00:01:23,399 --> 00:01:28,140
objects<font color="#E5E5E5"> and then you can build trees and</font>

38
00:01:25,679 --> 00:01:30,479
<font color="#E5E5E5">these kind of things of that so that's</font>

39
00:01:28,140 --> 00:01:32,729
<font color="#E5E5E5">one concept that's the icing</font><font color="#CCCCCC"> picks</font><font color="#E5E5E5"> up</font>

40
00:01:30,479 --> 00:01:34,740
and the other<font color="#E5E5E5"> one is</font><font color="#CCCCCC"> arcing</font><font color="#E5E5E5"> finish</font><font color="#CCCCCC"> or I</font>

41
00:01:32,729 --> 00:01:36,750
<font color="#E5E5E5">think everybody knows that</font><font color="#CCCCCC"> too what most</font>

42
00:01:34,740 --> 00:01:39,030
people<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> know probably who use our</font>

43
00:01:36,750 --> 00:01:41,580
<font color="#CCCCCC">sink every day is</font><font color="#E5E5E5"> the actual smart part</font>

44
00:01:39,030 --> 00:01:44,099
about the algorithm about that it's<font color="#E5E5E5"> Z</font>

45
00:01:41,580 --> 00:01:48,149
rsync algorithm<font color="#E5E5E5"> the</font><font color="#CCCCCC"> arsenic algorithm is</font>

46
00:01:44,099 --> 00:01:50,399
something<font color="#CCCCCC"> that only actually happens in</font>

47
00:01:48,149 --> 00:01:52,200
our sink<font color="#CCCCCC"> if it realizes there's the same</font>

48
00:01:50,399 --> 00:01:53,700
file on both sides like<font color="#E5E5E5"> on the local</font>

49
00:01:52,200 --> 00:01:55,890
<font color="#E5E5E5">side on the remote side and then the</font>

50
00:01:53,700 --> 00:01:58,259
actual smart part of our<font color="#E5E5E5"> sink takes</font>

51
00:01:55,890 --> 00:02:00,509
place which is<font color="#E5E5E5"> that it tries to figure</font>

52
00:01:58,259 --> 00:02:02,759
<font color="#E5E5E5">out the differences and recognize the</font>

53
00:02:00,509 --> 00:02:05,759
same data blocks in those files<font color="#CCCCCC"> even if</font>

54
00:02:02,759 --> 00:02:10,649
they shifted in the file<font color="#E5E5E5"> by</font><font color="#CCCCCC"> variable</font>

55
00:02:05,759 --> 00:02:12,780
amounts of bytes so yeah<font color="#E5E5E5"> our thing is an</font>

56
00:02:10,649 --> 00:02:15,510
awesome technology<font color="#E5E5E5"> like I think it was</font>

57
00:02:12,780 --> 00:02:16,799
<font color="#E5E5E5">originally written in 1992 and the ideas</font>

58
00:02:15,510 --> 00:02:17,319
behind that unfortunately<font color="#CCCCCC"> and</font><font color="#E5E5E5"> never</font>

59
00:02:16,799 --> 00:02:19,750
became

60
00:02:17,319 --> 00:02:22,000
standard<font color="#E5E5E5"> and what people do have a lots</font>

61
00:02:19,750 --> 00:02:23,349
of<font color="#E5E5E5"> products who use the the arcing</font>

62
00:02:22,000 --> 00:02:24,819
algorithm but unfortunately there are

63
00:02:23,349 --> 00:02:27,849
also a lot of products that should use

64
00:02:24,819 --> 00:02:29,200
it that don't<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> it's an interesting</font>

65
00:02:27,849 --> 00:02:32,429
<font color="#E5E5E5">little algorithm we'll talk about that</font>

66
00:02:29,200 --> 00:02:35,200
<font color="#CCCCCC">later on so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the combination of</font>

67
00:02:32,430 --> 00:02:37,629
course this<font color="#E5E5E5"> doesn't really say</font><font color="#CCCCCC"> much so</font>

68
00:02:35,200 --> 00:02:39,129
what<font color="#E5E5E5"> is it actually</font><font color="#CCCCCC"> I call it a content</font>

69
00:02:37,629 --> 00:02:41,140
addressable data synchronization tool

70
00:02:39,129 --> 00:02:42,578
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> little bit like our thing</font><font color="#CCCCCC"> and a</font>

71
00:02:41,140 --> 00:02:46,328
little<font color="#CCCCCC"> bit like it but it's also not</font>

72
00:02:42,579 --> 00:02:48,730
<font color="#CCCCCC">like it and also</font><font color="#E5E5E5"> not like our think</font><font color="#CCCCCC"> it's</font>

73
00:02:46,329 --> 00:02:50,260
<font color="#E5E5E5">primary use case is file system like</font><font color="#CCCCCC"> it</font>

74
00:02:48,730 --> 00:02:52,500
can synchronize<font color="#CCCCCC"> file system trees for</font>

75
00:02:50,260 --> 00:02:55,269
cases where you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> many similar trees</font>

76
00:02:52,500 --> 00:02:57,150
one major use case and<font color="#E5E5E5"> the original one</font>

77
00:02:55,269 --> 00:03:00,669
the one I cared about the<font color="#E5E5E5"> most initially</font>

78
00:02:57,150 --> 00:03:03,099
is about<font color="#E5E5E5"> delivering us images like OS</font>

79
00:03:00,669 --> 00:03:05,590
images meaning container images<font color="#E5E5E5"> VM</font>

80
00:03:03,099 --> 00:03:09,159
images<font color="#E5E5E5"> IOT images whatever you want to</font>

81
00:03:05,590 --> 00:03:12,099
call<font color="#E5E5E5"> them</font><font color="#CCCCCC"> something large</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you tend</font>

82
00:03:09,159 --> 00:03:14,530
to<font color="#E5E5E5"> update and pretty regular intervals</font>

83
00:03:12,099 --> 00:03:16,388
<font color="#E5E5E5">but it mostly stays the same except for</font>

84
00:03:14,530 --> 00:03:21,400
<font color="#E5E5E5">a couple</font><font color="#CCCCCC"> of things that you like fix a</font>

85
00:03:16,389 --> 00:03:23,709
bug in<font color="#E5E5E5"> or add something right yeah</font><font color="#CCCCCC"> OS</font>

86
00:03:21,400 --> 00:03:26,799
<font color="#E5E5E5">container IOT</font><font color="#CCCCCC"> VM whatever you call it it</font>

87
00:03:23,709 --> 00:03:28,659
has<font color="#E5E5E5"> two other use cases though that I'm</font>

88
00:03:26,799 --> 00:03:30,879
<font color="#E5E5E5">mostly</font><font color="#CCCCCC"> focus on thing like adding</font>

89
00:03:28,659 --> 00:03:32,650
functionality for<font color="#E5E5E5"> that right now</font>

90
00:03:30,879 --> 00:03:34,268
which<font color="#E5E5E5"> I think of pretty much</font><font color="#CCCCCC"> the same</font>

91
00:03:32,650 --> 00:03:36,040
actually<font color="#E5E5E5"> it's the synchronization of</font>

92
00:03:34,269 --> 00:03:39,549
your home directory<font color="#CCCCCC"> between systems or</font>

93
00:03:36,040 --> 00:03:41,530
backup backup<font color="#E5E5E5"> of course is very similar</font>

94
00:03:39,549 --> 00:03:44,379
in some ways but<font color="#CCCCCC"> also different than</font>

95
00:03:41,530 --> 00:03:47,229
others it's similar because<font color="#E5E5E5"> you actually</font>

96
00:03:44,379 --> 00:03:48,250
also<font color="#E5E5E5"> focus on large file system trees</font>

97
00:03:47,229 --> 00:03:50,650
like for example<font color="#E5E5E5"> your home directory</font>

98
00:03:48,250 --> 00:03:54,879
<font color="#E5E5E5">which mostly</font><font color="#CCCCCC"> every time you want to</font><font color="#E5E5E5"> do</font>

99
00:03:50,650 --> 00:03:57,190
backup<font color="#E5E5E5"> stays the same except</font><font color="#CCCCCC"> for the few</font>

100
00:03:54,879 --> 00:03:58,690
things<font color="#E5E5E5"> places where it doesn't right so</font>

101
00:03:57,190 --> 00:04:00,669
and<font color="#E5E5E5"> the backup system wants</font><font color="#CCCCCC"> to be</font>

102
00:03:58,690 --> 00:04:02,620
efficient<font color="#E5E5E5"> should take benefit of this of</font>

103
00:04:00,669 --> 00:04:04,599
<font color="#CCCCCC">course if people I back up their</font><font color="#E5E5E5"> stuff</font>

104
00:04:02,620 --> 00:04:05,919
is tar<font color="#CCCCCC"> that's not very efficient because</font>

105
00:04:04,599 --> 00:04:08,108
every time you<font color="#E5E5E5"> tell the whole thing up</font>

106
00:04:05,919 --> 00:04:10,120
<font color="#CCCCCC">so its</font><font color="#E5E5E5"> first of all</font><font color="#CCCCCC"> it's very slow and</font>

107
00:04:08,109 --> 00:04:14,530
<font color="#E5E5E5">secondly you store a lot of it on the</font>

108
00:04:10,120 --> 00:04:17,310
data so yeah these two use cases<font color="#CCCCCC"> image</font>

109
00:04:14,530 --> 00:04:20,079
delivery and backup<font color="#CCCCCC"> /o ah home</font>

110
00:04:17,310 --> 00:04:22,150
<font color="#E5E5E5">synchronization are different but I</font>

111
00:04:20,079 --> 00:04:25,080
think<font color="#CCCCCC"> this could be like similar enough</font>

112
00:04:22,150 --> 00:04:28,929
so that<font color="#E5E5E5"> we can cover them with a</font><font color="#CCCCCC"> saint's</font>

113
00:04:25,080 --> 00:04:31,030
<font color="#CCCCCC">program CI sync can operate on two</font>

114
00:04:28,930 --> 00:04:33,610
<font color="#E5E5E5">layers like which</font>

115
00:04:31,030 --> 00:04:35,380
<font color="#E5E5E5">and you pick is up to you and depends on</font>

116
00:04:33,610 --> 00:04:37,600
a use case<font color="#E5E5E5"> first of all it can operate</font>

117
00:04:35,380 --> 00:04:39,040
<font color="#E5E5E5">on the block layer so the data images</font>

118
00:04:37,600 --> 00:04:41,260
that it's like the<font color="#CCCCCC"> wefts images said</font><font color="#E5E5E5"> the</font>

119
00:04:39,040 --> 00:04:43,240
delivers<font color="#CCCCCC"> two systems can be</font><font color="#E5E5E5"> basically</font>

120
00:04:41,260 --> 00:04:46,090
what<font color="#E5E5E5"> you'd eat off of a block</font><font color="#CCCCCC"> device</font>

121
00:04:43,240 --> 00:04:47,770
<font color="#E5E5E5">right like so raw XD for image like the</font>

122
00:04:46,090 --> 00:04:50,969
actual blocks of the XD for image or

123
00:04:47,770 --> 00:04:53,380
<font color="#E5E5E5">squash</font><font color="#CCCCCC"> device image</font><font color="#E5E5E5"> or whatever you like</font>

124
00:04:50,970 --> 00:04:55,330
secondly it can operate<font color="#E5E5E5"> on the file</font>

125
00:04:53,380 --> 00:04:57,070
system model<font color="#E5E5E5"> in that case it looks at</font>

126
00:04:55,330 --> 00:04:59,260
files in directories like like your home

127
00:04:57,070 --> 00:05:01,930
directory<font color="#CCCCCC"> so that's there's a lot of</font>

128
00:04:59,260 --> 00:05:03,370
level further up<font color="#CCCCCC"> um in that case you're</font>

129
00:05:01,930 --> 00:05:06,970
independent of the file system<font color="#CCCCCC"> used in</font>

130
00:05:03,370 --> 00:05:09,310
<font color="#E5E5E5">the below to some point at</font><font color="#CCCCCC"> least</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

131
00:05:06,970 --> 00:05:12,370
just look at more structured data<font color="#CCCCCC"> in a</font>

132
00:05:09,310 --> 00:05:16,090
tree form<font color="#E5E5E5"> so what does</font><font color="#CCCCCC"> CA sync actually</font>

133
00:05:12,370 --> 00:05:18,940
do understanding<font color="#E5E5E5"> that is like the core</font>

134
00:05:16,090 --> 00:05:22,510
of this talk<font color="#E5E5E5"> is first step what it does</font>

135
00:05:18,940 --> 00:05:23,500
is it serialize everything<font color="#E5E5E5"> we operate on</font>

136
00:05:22,510 --> 00:05:25,690
the block device that's pretty easy

137
00:05:23,500 --> 00:05:27,850
<font color="#CCCCCC">right we</font><font color="#E5E5E5"> just read it off</font><font color="#CCCCCC"> the block</font>

138
00:05:25,690 --> 00:05:30,790
device it's already see realized<font color="#E5E5E5"> if we</font>

139
00:05:27,850 --> 00:05:32,980
<font color="#CCCCCC">operate on the file system level it's</font>

140
00:05:30,790 --> 00:05:34,480
also something that<font color="#E5E5E5"> everybody does all</font>

141
00:05:32,980 --> 00:05:38,200
the time which is<font color="#CCCCCC"> star sings up</font>

142
00:05:34,480 --> 00:05:40,570
essentially<font color="#E5E5E5"> I don't actually use tar for</font>

143
00:05:38,200 --> 00:05:43,560
some reasons like that's one of<font color="#E5E5E5"> the</font>

144
00:05:40,570 --> 00:05:45,909
reasons I care about reproducibility and

145
00:05:43,560 --> 00:05:47,770
<font color="#E5E5E5">car has certain issues with that like</font>

146
00:05:45,910 --> 00:05:50,260
reproducibility basically means that<font color="#E5E5E5"> if</font>

147
00:05:47,770 --> 00:05:52,150
you have<font color="#E5E5E5"> one file system tree on your</font>

148
00:05:50,260 --> 00:05:54,340
disk<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> gotta get the guarantee</font>

149
00:05:52,150 --> 00:05:56,950
that<font color="#E5E5E5"> the cessation of it is exactly one</font>

150
00:05:54,340 --> 00:05:59,260
thing and one thing only<font color="#E5E5E5"> and does not</font>

151
00:05:56,950 --> 00:06:01,599
change depending<font color="#CCCCCC"> on which day of the</font>

152
00:05:59,260 --> 00:06:03,219
<font color="#CCCCCC">week you do the series ation on or</font>

153
00:06:01,600 --> 00:06:06,790
what's the<font color="#CCCCCC"> backing file system actually</font>

154
00:06:03,220 --> 00:06:08,410
<font color="#E5E5E5">is or anything else like this generally</font>

155
00:06:06,790 --> 00:06:10,840
<font color="#E5E5E5">tar is not very good at that because in</font>

156
00:06:08,410 --> 00:06:13,330
tar the files<font color="#E5E5E5"> inside the directories</font>

157
00:06:10,840 --> 00:06:14,739
they appear in the<font color="#E5E5E5"> order that ever the</font>

158
00:06:13,330 --> 00:06:16,000
file system decides to push out and that

159
00:06:14,740 --> 00:06:20,680
might<font color="#CCCCCC"> depend on many factors</font><font color="#E5E5E5"> including</font>

160
00:06:16,000 --> 00:06:23,170
<font color="#E5E5E5">hash algorithms and whatnot so anyway</font>

161
00:06:20,680 --> 00:06:25,180
<font color="#E5E5E5">c8r like that's how</font><font color="#CCCCCC"> i called</font><font color="#E5E5E5"> master</font>

162
00:06:23,170 --> 00:06:27,010
ization format like all the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> things</font>

163
00:06:25,180 --> 00:06:30,610
<font color="#E5E5E5">that I came up</font><font color="#CCCCCC"> with see almost done with</font>

164
00:06:27,010 --> 00:06:32,380
the two<font color="#CCCCCC"> characters</font><font color="#E5E5E5"> CNA but to see it</font><font color="#CCCCCC"> z8r</font>

165
00:06:30,610 --> 00:06:35,350
<font color="#E5E5E5">Singh is essentially just tar</font>

166
00:06:32,380 --> 00:06:37,900
however it's reproducible<font color="#CCCCCC"> and well</font>

167
00:06:35,350 --> 00:06:40,090
<font color="#E5E5E5">defined in that and secondly it's a</font>

168
00:06:37,900 --> 00:06:42,760
random access right so that if you want

169
00:06:40,090 --> 00:06:44,289
<font color="#E5E5E5">to access some file at the end of the</font>

170
00:06:42,760 --> 00:06:46,058
<font color="#E5E5E5">series ation you don't have to read</font>

171
00:06:44,289 --> 00:06:48,520
<font color="#E5E5E5">all the beginning like</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Fatah</font>

172
00:06:46,059 --> 00:06:51,520
<font color="#E5E5E5">but for the sake of discussion let's</font>

173
00:06:48,520 --> 00:06:52,899
just<font color="#CCCCCC"> assume</font><font color="#E5E5E5"> as the same</font><font color="#CCCCCC"> sing a</font><font color="#E5E5E5"> star yeah</font>

174
00:06:51,520 --> 00:06:54,490
on the<font color="#E5E5E5"> block layer easy just read the</font>

175
00:06:52,899 --> 00:06:56,430
block after block and on the<font color="#CCCCCC"> file system</font>

176
00:06:54,490 --> 00:06:59,110
<font color="#CCCCCC">layer almost as easy just turn</font><font color="#E5E5E5"> it up</font>

177
00:06:56,430 --> 00:07:00,969
<font color="#E5E5E5">that was</font><font color="#CCCCCC"> the first step now we have this</font>

178
00:06:59,110 --> 00:07:02,559
long<font color="#E5E5E5"> series</font><font color="#CCCCCC"> ation start somewhere</font><font color="#E5E5E5"> and</font>

179
00:07:00,969 --> 00:07:02,949
somewhere<font color="#E5E5E5"> and it's just a series of</font>

180
00:07:02,559 --> 00:07:07,869
<font color="#CCCCCC">bytes</font>

181
00:07:02,949 --> 00:07:10,089
now we split it up<font color="#E5E5E5"> in a way like how the</font>

182
00:07:07,869 --> 00:07:11,529
arsenic algorithm does<font color="#CCCCCC"> so we take the</font>

183
00:07:10,089 --> 00:07:14,559
series<font color="#E5E5E5"> ation chop it in a series of</font>

184
00:07:11,529 --> 00:07:16,839
chunks these chunks<font color="#E5E5E5"> do not have</font><font color="#CCCCCC"> to have</font>

185
00:07:14,559 --> 00:07:19,659
a<font color="#E5E5E5"> have the same size all the time the</font>

186
00:07:16,839 --> 00:07:22,569
<font color="#CCCCCC">sized is a function of what's in the</font>

187
00:07:19,659 --> 00:07:24,339
<font color="#E5E5E5">data what's actually happening there is</font>

188
00:07:22,569 --> 00:07:26,020
<font color="#E5E5E5">that there's a like this is the arsenic</font>

189
00:07:24,339 --> 00:07:28,689
algorithm ultimately<font color="#CCCCCC"> is the hash</font>

190
00:07:26,020 --> 00:07:33,008
function<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this calculated basically</font>

191
00:07:28,689 --> 00:07:37,300
for<font color="#E5E5E5"> every set of 48 bytes</font><font color="#CCCCCC"> of the stream</font>

192
00:07:33,009 --> 00:07:40,180
<font color="#E5E5E5">and</font><font color="#CCCCCC"> when the resulting hash value holds</font>

193
00:07:37,300 --> 00:07:42,550
in some mathematical expression which is

194
00:07:40,180 --> 00:07:47,860
hash function<font color="#E5E5E5"> model</font><font color="#CCCCCC"> loop Q equals</font>

195
00:07:42,550 --> 00:07:49,779
<font color="#E5E5E5">something</font><font color="#CCCCCC"> then we do a cut what's the</font>

196
00:07:47,860 --> 00:07:53,469
effect of this<font color="#E5E5E5"> this effect of this is</font>

197
00:07:49,779 --> 00:07:56,439
<font color="#E5E5E5">that same data results in cuts between</font>

198
00:07:53,469 --> 00:07:58,449
<font color="#E5E5E5">these chunks at the very same places why</font>

199
00:07:56,439 --> 00:08:01,659
is that interesting<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> interesting</font>

200
00:07:58,449 --> 00:08:04,149
because if we<font color="#E5E5E5"> would</font><font color="#CCCCCC"> actually cut an</font>

201
00:08:01,659 --> 00:08:06,308
equity distance intervals<font color="#E5E5E5"> right like we</font>

202
00:08:04,149 --> 00:08:08,439
would always cut<font color="#CCCCCC"> after I don't know 64 K</font>

203
00:08:06,309 --> 00:08:11,289
and<font color="#E5E5E5"> you insert one</font><font color="#CCCCCC"> bite to the front</font>

204
00:08:08,439 --> 00:08:13,119
then all the blocks<font color="#CCCCCC"> through the rest of</font>

205
00:08:11,289 --> 00:08:14,589
civilization will change<font color="#E5E5E5"> to because they</font>

206
00:08:13,119 --> 00:08:16,119
all got<font color="#E5E5E5"> shifted a little bit to the</font>

207
00:08:14,589 --> 00:08:17,919
right<font color="#E5E5E5"> and this will</font><font color="#CCCCCC"> happen</font><font color="#E5E5E5"> all the time</font>

208
00:08:16,119 --> 00:08:19,869
<font color="#CCCCCC">because again like most</font><font color="#E5E5E5"> of the time we</font>

209
00:08:17,919 --> 00:08:21,698
<font color="#E5E5E5">talk about</font><font color="#CCCCCC"> a tarring here</font><font color="#E5E5E5"> so if you add</font>

210
00:08:19,869 --> 00:08:23,080
one file in the front yes sure you added

211
00:08:21,699 --> 00:08:25,419
a couple<font color="#E5E5E5"> of</font><font color="#CCCCCC"> bites to the</font><font color="#E5E5E5"> front so all</font>

212
00:08:23,080 --> 00:08:26,979
the blocks in<font color="#CCCCCC"> the end would change this</font>

213
00:08:25,419 --> 00:08:29,438
algorithm<font color="#E5E5E5"> the rsync algorithm like this</font>

214
00:08:26,979 --> 00:08:31,479
chunking stuff has the effects<font color="#E5E5E5"> same data</font>

215
00:08:29,439 --> 00:08:33,610
will result in the<font color="#E5E5E5"> same chunks will</font>

216
00:08:31,479 --> 00:08:34,929
result in the<font color="#E5E5E5"> same chunking locations</font>

217
00:08:33,610 --> 00:08:36,370
<font color="#E5E5E5">that basically means</font><font color="#CCCCCC"> that if you</font>

218
00:08:34,929 --> 00:08:38,438
inserted by it somewhere and remove a

219
00:08:36,370 --> 00:08:40,240
<font color="#CCCCCC">byte somewhere it does not explode into</font>

220
00:08:38,438 --> 00:08:42,639
<font color="#E5E5E5">the rest of</font><font color="#CCCCCC"> civilization but</font><font color="#E5E5E5"> it will</font>

221
00:08:40,240 --> 00:08:44,410
<font color="#E5E5E5">change this one block around it but</font>

222
00:08:42,639 --> 00:08:45,880
after<font color="#CCCCCC"> that block you get back</font><font color="#E5E5E5"> into the</font>

223
00:08:44,410 --> 00:08:48,009
normal<font color="#E5E5E5"> chunking that he had before right</font>

224
00:08:45,880 --> 00:08:50,680
<font color="#E5E5E5">this is like the interesting bit about</font>

225
00:08:48,009 --> 00:08:52,120
it<font color="#E5E5E5"> it's what like deduplicating file</font>

226
00:08:50,680 --> 00:08:54,939
<font color="#E5E5E5">system at least</font><font color="#CCCCCC"> the good ones generally</font>

227
00:08:52,120 --> 00:08:57,699
<font color="#E5E5E5">do</font><font color="#CCCCCC"> it's what</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> sink does it's what</font>

228
00:08:54,939 --> 00:08:58,019
<font color="#CCCCCC">what to call them</font><font color="#E5E5E5"> Dropbox</font><font color="#CCCCCC"> does to some</font>

229
00:08:57,699 --> 00:09:00,618
degree

230
00:08:58,019 --> 00:09:02,910
and it's the interesting bit about it<font color="#CCCCCC"> so</font>

231
00:09:00,619 --> 00:09:03,540
<font color="#CCCCCC">summary again</font><font color="#E5E5E5"> first steps to realize</font>

232
00:09:02,910 --> 00:09:07,969
<font color="#E5E5E5">everything</font>

233
00:09:03,540 --> 00:09:07,969
second step slices up into<font color="#E5E5E5"> little chunks</font>

234
00:09:08,420 --> 00:09:14,849
yeah why do we do this<font color="#CCCCCC"> yeah for the</font>

235
00:09:12,480 --> 00:09:17,879
adding extra<font color="#CCCCCC"> Biden function dribble up</font>

236
00:09:14,850 --> 00:09:19,619
to the rest of it<font color="#CCCCCC"> the used</font><font color="#E5E5E5"> algorithm</font>

237
00:09:17,879 --> 00:09:22,170
that we use<font color="#CCCCCC"> for this is buzz hash</font><font color="#E5E5E5"> which</font>

238
00:09:19,619 --> 00:09:23,429
is a cyclic hash function it's it's

239
00:09:22,170 --> 00:09:25,889
ultimately just an implementation detail

240
00:09:23,429 --> 00:09:27,660
<font color="#CCCCCC">that we do this</font><font color="#E5E5E5"> the good thing about</font>

241
00:09:25,889 --> 00:09:30,269
this is<font color="#CCCCCC"> that it's relatively cheap to</font>

242
00:09:27,660 --> 00:09:31,860
calculate right like we<font color="#E5E5E5"> don't like I</font>

243
00:09:30,269 --> 00:09:35,369
mean<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> if if we actually</font>

244
00:09:31,860 --> 00:09:37,619
wanted<font color="#CCCCCC"> to calculate the 48</font><font color="#E5E5E5"> byte window</font>

245
00:09:35,369 --> 00:09:39,179
over the entire stream and shifted along

246
00:09:37,619 --> 00:09:41,239
<font color="#E5E5E5">that we would calculate a lot of stuff</font>

247
00:09:39,179 --> 00:09:44,249
<font color="#E5E5E5">the fact that we use</font><font color="#CCCCCC"> pass - makes that</font>

248
00:09:41,239 --> 00:09:47,069
much<font color="#E5E5E5"> much much</font><font color="#CCCCCC"> cheaper</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the common</font>

249
00:09:44,249 --> 00:09:49,350
case<font color="#CCCCCC"> yeah this is what I mentioned here</font>

250
00:09:47,069 --> 00:09:52,829
like you use the hash<font color="#E5E5E5"> but you calculate</font>

251
00:09:49,350 --> 00:09:55,230
for<font color="#E5E5E5"> each of those 48 bytes</font><font color="#CCCCCC"> take it</font>

252
00:09:52,829 --> 00:09:57,508
<font color="#CCCCCC">Moodle of some value</font><font color="#E5E5E5"> Q and check if it's</font>

253
00:09:55,230 --> 00:10:00,179
Q minus 1 and if it is so<font color="#E5E5E5"> he applies a</font>

254
00:09:57,509 --> 00:10:01,739
cut if not you continue<font color="#E5E5E5"> calculate the</font>

255
00:10:00,179 --> 00:10:03,179
same<font color="#E5E5E5"> thing for the</font><font color="#CCCCCC"> next but if that</font>

256
00:10:01,739 --> 00:10:04,410
holds<font color="#E5E5E5"> then you make a cut</font><font color="#CCCCCC"> if it's still</font>

257
00:10:03,179 --> 00:10:07,769
doesn't you go to the next<font color="#E5E5E5"> one and so</font><font color="#CCCCCC"> on</font>

258
00:10:04,410 --> 00:10:10,559
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> on by</font><font color="#E5E5E5"> picking this Q the right</font>

259
00:10:07,769 --> 00:10:13,110
way you<font color="#CCCCCC"> can select</font><font color="#E5E5E5"> the average chunk</font>

260
00:10:10,559 --> 00:10:16,139
size right which the idea<font color="#E5E5E5"> basically is</font>

261
00:10:13,110 --> 00:10:18,209
<font color="#E5E5E5">that</font><font color="#CCCCCC"> yeah an average I want a 64 K</font><font color="#E5E5E5"> box</font>

262
00:10:16,139 --> 00:10:19,230
<font color="#CCCCCC">I'll a chunk sizes but</font><font color="#E5E5E5"> there can be a</font>

263
00:10:18,209 --> 00:10:20,518
<font color="#E5E5E5">little bit smaller they can be a little</font>

264
00:10:19,230 --> 00:10:25,019
<font color="#E5E5E5">large that's fine as long as the average</font>

265
00:10:20,519 --> 00:10:27,360
<font color="#E5E5E5">is 64 K that was</font><font color="#CCCCCC"> a second step third</font>

266
00:10:25,019 --> 00:10:29,249
step<font color="#E5E5E5"> after we chunked it a lot we</font>

267
00:10:27,360 --> 00:10:31,049
calculate a strong hash function like

268
00:10:29,249 --> 00:10:32,279
these<font color="#CCCCCC"> massages is like we forget</font>

269
00:10:31,049 --> 00:10:33,779
<font color="#CCCCCC">everything that we did</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> bus -</font>

270
00:10:32,279 --> 00:10:35,429
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this rotating hash function</font>

271
00:10:33,779 --> 00:10:37,259
<font color="#E5E5E5">it's not a strong hash function we only</font>

272
00:10:35,429 --> 00:10:38,759
use<font color="#CCCCCC"> it for chunking</font><font color="#E5E5E5"> sing</font><font color="#CCCCCC"> ups we forgot</font>

273
00:10:37,259 --> 00:10:40,290
<font color="#CCCCCC">that now in the third step</font><font color="#E5E5E5"> we use</font><font color="#CCCCCC"> a</font>

274
00:10:38,759 --> 00:10:42,600
<font color="#CCCCCC">strong hash function</font><font color="#E5E5E5"> the one we're</font>

275
00:10:40,290 --> 00:10:46,618
actually using<font color="#E5E5E5"> a shaft life on a 12 256</font>

276
00:10:42,600 --> 00:10:48,389
<font color="#E5E5E5">it's not so well known</font><font color="#CCCCCC"> where a member of</font>

277
00:10:46,619 --> 00:10:54,209
<font color="#CCCCCC">the shaft family it's it's</font><font color="#E5E5E5"> basically</font>

278
00:10:48,389 --> 00:10:56,149
sha-512 but cut to 256<font color="#E5E5E5"> bits and the</font>

279
00:10:54,209 --> 00:10:58,888
reason why<font color="#E5E5E5"> that's a good thing is</font>

280
00:10:56,149 --> 00:11:03,089
because it's a lot<font color="#CCCCCC"> faster to calculate</font>

281
00:10:58,889 --> 00:11:05,560
<font color="#E5E5E5">then shot 256 on 64-bit processors which</font>

282
00:11:03,089 --> 00:11:09,210
is what we mostly have

283
00:11:05,560 --> 00:11:11,140
it's it's not<font color="#E5E5E5"> really</font><font color="#CCCCCC"> shot 512 cut</font><font color="#E5E5E5"> to cut</font>

284
00:11:09,210 --> 00:11:13,030
<font color="#E5E5E5">756 bits is</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> because it actually</font>

285
00:11:11,140 --> 00:11:14,470
starts with<font color="#E5E5E5"> a different value that it's</font>

286
00:11:13,030 --> 00:11:16,000
not<font color="#CCCCCC"> value so it actually results in</font>

287
00:11:14,470 --> 00:11:18,010
<font color="#CCCCCC">different values anyway long story short</font>

288
00:11:16,000 --> 00:11:20,320
<font color="#E5E5E5">it's a strong hash function it's like</font>

289
00:11:18,010 --> 00:11:21,370
what<font color="#E5E5E5"> get users use a sha-1 we use</font>

290
00:11:20,320 --> 00:11:25,540
something<font color="#CCCCCC"> a little bit</font><font color="#E5E5E5"> more modern</font>

291
00:11:21,370 --> 00:11:28,480
ultimately when we hash these chunks we

292
00:11:25,540 --> 00:11:30,240
then can use the hashes as an

293
00:11:28,480 --> 00:11:33,190
identification for the individual chunks

294
00:11:30,240 --> 00:11:35,110
<font color="#E5E5E5">now at the same</font><font color="#CCCCCC"> time as we do all this</font>

295
00:11:33,190 --> 00:11:37,330
we write out an index file<font color="#E5E5E5"> that's how I</font>

296
00:11:35,110 --> 00:11:39,900
call it which is<font color="#CCCCCC"> very simple</font><font color="#E5E5E5"> it's just</font>

297
00:11:37,330 --> 00:11:41,920
<font color="#CCCCCC">ultimately just a list</font><font color="#E5E5E5"> of these hashes</font>

298
00:11:39,900 --> 00:11:44,290
<font color="#CCCCCC">actually it's not</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> list of hashes</font>

299
00:11:41,920 --> 00:11:45,880
because I want random access and the

300
00:11:44,290 --> 00:11:47,500
random access to the series ation

301
00:11:45,880 --> 00:11:48,939
<font color="#CCCCCC">streams a little bit difficult</font><font color="#E5E5E5"> if every</font>

302
00:11:47,500 --> 00:11:51,730
chunk has<font color="#E5E5E5"> a different size because you</font>

303
00:11:48,940 --> 00:11:53,320
never know<font color="#CCCCCC"> if I want</font><font color="#E5E5E5"> to go to bite</font><font color="#CCCCCC"> five</font>

304
00:11:51,730 --> 00:11:55,600
million<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> series ation and you</font>

305
00:11:53,320 --> 00:11:57,520
would have<font color="#CCCCCC"> to live</font><font color="#E5E5E5"> would be of one a</font><font color="#CCCCCC"> n</font>

306
00:11:55,600 --> 00:11:59,470
and<font color="#E5E5E5"> that would suck so actually it's</font>

307
00:11:57,520 --> 00:12:02,079
<font color="#E5E5E5">just a list of offsets with the right</font>

308
00:11:59,470 --> 00:12:04,930
hashes<font color="#E5E5E5"> these index files are sufficient</font>

309
00:12:02,080 --> 00:12:07,570
<font color="#E5E5E5">like they they explicitly they define</font>

310
00:12:04,930 --> 00:12:09,849
one version of<font color="#E5E5E5"> the tree very explicitly</font>

311
00:12:07,570 --> 00:12:11,530
because<font color="#E5E5E5"> all you have to do is like the</font>

312
00:12:09,850 --> 00:12:12,880
hashes refer to chunks if you can't

313
00:12:11,530 --> 00:12:14,560
<font color="#E5E5E5">connect the chunks in the order that</font><font color="#CCCCCC"> the</font>

314
00:12:12,880 --> 00:12:18,640
index file says<font color="#E5E5E5"> you're back at the</font>

315
00:12:14,560 --> 00:12:20,050
<font color="#CCCCCC">original series ation for step after</font><font color="#E5E5E5"> we</font>

316
00:12:18,640 --> 00:12:22,030
did all<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and read at</font><font color="#E5E5E5"> the index file</font>

317
00:12:20,050 --> 00:12:25,000
and<font color="#E5E5E5"> have these chunks we compress the</font>

318
00:12:22,030 --> 00:12:26,980
chunks individually<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> just used some</font>

319
00:12:25,000 --> 00:12:30,640
<font color="#E5E5E5">standard like compression like</font><font color="#CCCCCC"> it zet</font>

320
00:12:26,980 --> 00:12:31,930
<font color="#E5E5E5">STD this</font><font color="#CCCCCC"> Facebook fancy</font><font color="#E5E5E5"> compression</font>

321
00:12:30,640 --> 00:12:36,069
algorithm<font color="#E5E5E5"> that everybody likes these</font>

322
00:12:31,930 --> 00:12:38,199
days<font color="#E5E5E5"> then every single</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of those</font>

323
00:12:36,070 --> 00:12:40,630
<font color="#E5E5E5">chunks which are as mentioned</font>

324
00:12:38,200 --> 00:12:42,610
<font color="#E5E5E5">uncompressed they're around 64</font><font color="#CCCCCC"> K we</font>

325
00:12:40,630 --> 00:12:45,220
place<font color="#E5E5E5"> them in one big directory and</font>

326
00:12:42,610 --> 00:12:46,750
there's<font color="#E5E5E5"> what we call</font><font color="#CCCCCC"> the chunk store we</font>

327
00:12:45,220 --> 00:12:50,050
place<font color="#E5E5E5"> them in the directory where each</font>

328
00:12:46,750 --> 00:12:51,670
file is named after the hash so now you

329
00:12:50,050 --> 00:12:52,930
have<font color="#E5E5E5"> better you want big directory with</font>

330
00:12:51,670 --> 00:12:55,360
lots of little smart files that

331
00:12:52,930 --> 00:12:57,939
individually compressed<font color="#E5E5E5"> and whose names</font>

332
00:12:55,360 --> 00:12:59,680
are all hashes and then you just have to

333
00:12:57,940 --> 00:13:01,060
pick out the right<font color="#E5E5E5"> ones in the right</font>

334
00:12:59,680 --> 00:13:04,000
order<font color="#E5E5E5"> and you're back at the</font><font color="#CCCCCC"> original</font>

335
00:13:01,060 --> 00:13:07,630
series<font color="#E5E5E5"> ation and</font><font color="#CCCCCC"> that's all let's</font><font color="#E5E5E5"> see I</font>

336
00:13:04,000 --> 00:13:10,510
<font color="#E5E5E5">think</font><font color="#CCCCCC"> ultimately does recapitulate we</font>

337
00:13:07,630 --> 00:13:11,890
serialize first<font color="#E5E5E5"> then we chunk then we</font>

338
00:13:10,510 --> 00:13:14,890
hash everything<font color="#CCCCCC"> and create the</font><font color="#E5E5E5"> index at</font>

339
00:13:11,890 --> 00:13:16,610
<font color="#CCCCCC">the same time then we compress it</font><font color="#E5E5E5"> and</font>

340
00:13:14,890 --> 00:13:19,410
store<font color="#CCCCCC"> it</font><font color="#E5E5E5"> somewhere</font>

341
00:13:16,610 --> 00:13:22,200
if we want<font color="#E5E5E5"> to extract one of these</font>

342
00:13:19,410 --> 00:13:25,890
things we do the opposite<font color="#E5E5E5"> right we</font>

343
00:13:22,200 --> 00:13:29,780
acquire the index file<font color="#E5E5E5"> we go through the</font>

344
00:13:25,890 --> 00:13:32,780
index file item by item<font color="#CCCCCC"> look for the</font>

345
00:13:29,780 --> 00:13:34,920
chunk in the chunk store uncompress it

346
00:13:32,780 --> 00:13:36,689
<font color="#E5E5E5">concatenate the whole thing so that we</font>

347
00:13:34,920 --> 00:13:47,280
have a<font color="#CCCCCC"> civilization and</font><font color="#E5E5E5"> DISA realizes to</font>

348
00:13:36,690 --> 00:13:48,870
<font color="#E5E5E5">disk</font><font color="#CCCCCC"> and that's really</font><font color="#E5E5E5"> all there is well</font>

349
00:13:47,280 --> 00:13:51,270
I mean it doesn't<font color="#E5E5E5"> do anything with</font><font color="#CCCCCC"> the</font>

350
00:13:48,870 --> 00:13:52,740
<font color="#E5E5E5">civilization right and good also focuses</font>

351
00:13:51,270 --> 00:13:55,680
very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> so one of the major</font>

352
00:13:52,740 --> 00:13:57,450
differences<font color="#E5E5E5"> here is that I don't care</font>

353
00:13:55,680 --> 00:13:59,670
about the file boundary ultimately I get

354
00:13:57,450 --> 00:14:02,010
rid of<font color="#E5E5E5"> it very</font><font color="#CCCCCC"> very early on</font><font color="#E5E5E5"> get cast</font>

355
00:13:59,670 --> 00:14:05,099
and<font color="#CCCCCC"> and arcing to they all care about</font>

356
00:14:02,010 --> 00:14:07,110
<font color="#E5E5E5">the file boundary right so I think that</font>

357
00:14:05,100 --> 00:14:08,390
is a<font color="#CCCCCC"> weakness by means the strengths in</font>

358
00:14:07,110 --> 00:14:11,340
some ways and weakness and<font color="#E5E5E5"> others</font>

359
00:14:08,390 --> 00:14:13,560
<font color="#CCCCCC">because what arcing and</font><font color="#E5E5E5"> get are never</font>

360
00:14:11,340 --> 00:14:17,160
capable office like they cannot really

361
00:14:13,560 --> 00:14:21,359
track<font color="#E5E5E5"> when</font><font color="#CCCCCC"> like content moves between</font>

362
00:14:17,160 --> 00:14:22,860
<font color="#CCCCCC">files right it also has this like it</font>

363
00:14:21,360 --> 00:14:24,180
specifically in our think that's a

364
00:14:22,860 --> 00:14:25,950
<font color="#E5E5E5">problem right because</font><font color="#CCCCCC"> arcing is</font><font color="#E5E5E5"> not</font>

365
00:14:24,180 --> 00:14:28,140
capable of recognizing when you rename<font color="#E5E5E5"> a</font>

366
00:14:25,950 --> 00:14:29,790
file or<font color="#CCCCCC"> something like that</font><font color="#E5E5E5"> because like</font>

367
00:14:28,140 --> 00:14:32,100
<font color="#E5E5E5">this algorithm the arcing algorithm is</font>

368
00:14:29,790 --> 00:14:33,930
an arcing only applied on individual

369
00:14:32,100 --> 00:14:35,280
files<font color="#CCCCCC"> if both of them like if they exist</font>

370
00:14:33,930 --> 00:14:36,689
under<font color="#CCCCCC"> the same name on</font><font color="#E5E5E5"> both of sites</font>

371
00:14:35,280 --> 00:14:40,020
then it's efficient otherwise it's not

372
00:14:36,690 --> 00:14:41,790
so this stuff<font color="#CCCCCC"> forever</font><font color="#E5E5E5"> has this benefit</font>

373
00:14:40,020 --> 00:14:43,050
like I see<font color="#CCCCCC"> realized first</font><font color="#E5E5E5"> then I forget</font>

374
00:14:41,790 --> 00:14:44,490
<font color="#CCCCCC">everything</font><font color="#E5E5E5"> about what I just</font><font color="#CCCCCC"> see</font>

375
00:14:43,050 --> 00:14:46,410
realized<font color="#E5E5E5"> in the file boundary and</font>

376
00:14:44,490 --> 00:14:48,090
anything like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and chunk it</font><font color="#E5E5E5"> up at</font>

377
00:14:46,410 --> 00:14:49,709
<font color="#CCCCCC">that point which has</font><font color="#E5E5E5"> the nice benefit</font>

378
00:14:48,090 --> 00:14:51,990
small<font color="#E5E5E5"> files</font><font color="#CCCCCC"> have got good lumped</font>

379
00:14:49,710 --> 00:14:53,820
together with<font color="#E5E5E5"> now</font><font color="#CCCCCC"> that small files two</font>

380
00:14:51,990 --> 00:14:57,150
tubes<font color="#E5E5E5"> until</font><font color="#CCCCCC"> I reach the average chunk</font>

381
00:14:53,820 --> 00:14:59,400
size and the the big<font color="#E5E5E5"> files are split</font><font color="#CCCCCC"> up</font>

382
00:14:57,150 --> 00:15:02,339
<font color="#E5E5E5">into small bits so that</font><font color="#CCCCCC"> I reached the</font>

383
00:14:59,400 --> 00:15:05,130
average chunk size<font color="#E5E5E5"> so yeah and has a</font>

384
00:15:02,339 --> 00:15:07,260
nice benefits that<font color="#CCCCCC"> yeah same files that</font>

385
00:15:05,130 --> 00:15:09,180
move between directories<font color="#CCCCCC"> I'll perfectly</font>

386
00:15:07,260 --> 00:15:11,189
well recognized with<font color="#E5E5E5"> this because I only</font>

387
00:15:09,180 --> 00:15:12,660
care about<font color="#E5E5E5"> the data contents I don't</font>

388
00:15:11,190 --> 00:15:15,300
care about file boundaries<font color="#E5E5E5"> and anything</font>

389
00:15:12,660 --> 00:15:16,949
like this so yeah<font color="#E5E5E5"> key difference to our</font>

390
00:15:15,300 --> 00:15:18,510
<font color="#CCCCCC">think or</font><font color="#E5E5E5"> West</font><font color="#CCCCCC"> real rustic</font><font color="#E5E5E5"> I mean there</font>

391
00:15:16,950 --> 00:15:20,820
<font color="#E5E5E5">are many</font><font color="#CCCCCC"> systems that</font><font color="#E5E5E5"> use some of these</font>

392
00:15:18,510 --> 00:15:22,410
<font color="#CCCCCC">pits there's at least</font><font color="#E5E5E5"> to my knowledge no</font>

393
00:15:20,820 --> 00:15:24,600
system<font color="#E5E5E5"> that</font><font color="#CCCCCC"> uses them this combination</font>

394
00:15:22,410 --> 00:15:26,579
<font color="#E5E5E5">to build a system like this but the key</font>

395
00:15:24,600 --> 00:15:29,100
difference<font color="#E5E5E5"> yeah forget the file</font><font color="#CCCCCC"> boundary</font>

396
00:15:26,580 --> 00:15:30,120
<font color="#CCCCCC">it's it's I don't care about the file</font>

397
00:15:29,100 --> 00:15:32,250
laundry

398
00:15:30,120 --> 00:15:34,700
limiting yourself by<font color="#E5E5E5"> always keeping the</font>

399
00:15:32,250 --> 00:15:36,900
<font color="#E5E5E5">file boundary in in your mind</font>

400
00:15:34,700 --> 00:15:46,830
banks a lot of things<font color="#CCCCCC"> very difficult</font>

401
00:15:36,900 --> 00:15:48,120
like tracking<font color="#E5E5E5"> changes across question by</font>

402
00:15:46,830 --> 00:15:49,560
the<font color="#E5E5E5"> way I figure I should repeat those</font>

403
00:15:48,120 --> 00:15:51,750
questions right<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> question was that</font>

404
00:15:49,560 --> 00:15:55,410
<font color="#E5E5E5">if we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> care</font><font color="#CCCCCC"> about file boundaries</font>

405
00:15:51,750 --> 00:15:58,710
how<font color="#E5E5E5"> do hard links work I don't care</font>

406
00:15:55,410 --> 00:16:01,770
about<font color="#E5E5E5"> hard links it's my</font><font color="#CCCCCC"> awesome so okay</font>

407
00:15:58,710 --> 00:16:03,240
<font color="#E5E5E5">it's not quite</font><font color="#CCCCCC"> that easy so um</font><font color="#E5E5E5"> I do care</font>

408
00:16:01,770 --> 00:16:04,620
about<font color="#CCCCCC"> Harling so I guess</font><font color="#E5E5E5"> thought about</font>

409
00:16:03,240 --> 00:16:05,820
this<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a long time</font><font color="#E5E5E5"> whether I should</font>

410
00:16:04,620 --> 00:16:07,140
<font color="#CCCCCC">actually care about hard links and</font>

411
00:16:05,820 --> 00:16:09,300
actually serialize the fact that<font color="#E5E5E5"> they</font>

412
00:16:07,140 --> 00:16:11,130
exist<font color="#CCCCCC"> ultimately they generally don't</font>

413
00:16:09,300 --> 00:16:13,709
<font color="#CCCCCC">right like you know and if you if you</font>

414
00:16:11,130 --> 00:16:15,120
<font color="#E5E5E5">tar up with the Debian immature</font><font color="#CCCCCC"> fedora</font>

415
00:16:13,710 --> 00:16:18,660
<font color="#CCCCCC">which is</font><font color="#E5E5E5"> something you won't</font><font color="#CCCCCC"> find many</font>

416
00:16:15,120 --> 00:16:20,220
hard links in there<font color="#CCCCCC"> I use them there</font>

417
00:16:18,660 --> 00:16:23,130
heavily<font color="#E5E5E5"> so there's a</font><font color="#CCCCCC"> moat in an</font>

418
00:16:20,220 --> 00:16:25,830
extraction mode<font color="#E5E5E5"> that come to later</font><font color="#CCCCCC"> where</font>

419
00:16:23,130 --> 00:16:27,240
we you basically can use an existing

420
00:16:25,830 --> 00:16:30,420
<font color="#E5E5E5">tree that you already have on</font><font color="#CCCCCC"> the system</font>

421
00:16:27,240 --> 00:16:32,670
<font color="#CCCCCC">and then extract</font><font color="#E5E5E5"> a new version and then</font>

422
00:16:30,420 --> 00:16:34,349
we'll if you<font color="#E5E5E5"> want to hard links the old</font>

423
00:16:32,670 --> 00:16:36,569
version<font color="#E5E5E5"> to the new version so that</font><font color="#CCCCCC"> it</font>

424
00:16:34,350 --> 00:16:38,850
<font color="#CCCCCC">basically can have two versions of your</font>

425
00:16:36,570 --> 00:16:41,430
image<font color="#CCCCCC"> and everything that's similar</font>

426
00:16:38,850 --> 00:16:42,870
<font color="#CCCCCC">identical is hotlinked up if you follow</font>

427
00:16:41,430 --> 00:16:45,089
<font color="#E5E5E5">what I mean but let's talk about that a</font>

428
00:16:42,870 --> 00:16:47,570
little bit<font color="#E5E5E5"> later again any other</font>

429
00:16:45,089 --> 00:16:47,570
question at this<font color="#E5E5E5"> point</font>

430
00:16:55,330 --> 00:17:00,290
yeah so the<font color="#CCCCCC"> question was</font><font color="#E5E5E5"> about the hash</font>

431
00:16:57,680 --> 00:17:03,410
collisions<font color="#E5E5E5"> right well I mean it's yeah</font>

432
00:17:00,290 --> 00:17:06,050
it happens sure in<font color="#E5E5E5"> theory but we don't</font>

433
00:17:03,410 --> 00:17:07,849
have enough<font color="#E5E5E5"> atoms in this universe to</font>

434
00:17:06,050 --> 00:17:09,889
make this like build a machine that<font color="#E5E5E5"> can</font>

435
00:17:07,849 --> 00:17:11,540
<font color="#E5E5E5">actually happen I mean it happens for</font>

436
00:17:09,890 --> 00:17:16,010
<font color="#CCCCCC">sha-1</font><font color="#E5E5E5"> this is way stronger one is shot</font>

437
00:17:11,540 --> 00:17:17,750
200 512<font color="#E5E5E5"> flash 256 but if you if we live</font>

438
00:17:16,010 --> 00:17:20,240
<font color="#E5E5E5">in a world where collisions are actually</font>

439
00:17:17,750 --> 00:17:22,520
happen then we have a problem anyway I

440
00:17:20,240 --> 00:17:24,079
was good and<font color="#E5E5E5"> so on and everything else -</font>

441
00:17:22,520 --> 00:17:25,790
<font color="#E5E5E5">right like before I have to think about</font>

442
00:17:24,079 --> 00:17:27,050
<font color="#E5E5E5">that a lot</font><font color="#CCCCCC"> of other people had to think</font>

443
00:17:25,790 --> 00:17:30,490
<font color="#E5E5E5">about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and fix it</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> them and they</font>

444
00:17:27,050 --> 00:17:30,490
<font color="#CCCCCC">just can't copy their solution</font>

445
00:17:30,790 --> 00:17:43,010
everything else<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> point so how do</font>

446
00:17:39,559 --> 00:17:45,290
they handle repetitive<font color="#E5E5E5"> data within files</font>

447
00:17:43,010 --> 00:17:47,570
themselves<font color="#CCCCCC"> so like this civilization I</font>

448
00:17:45,290 --> 00:17:49,460
mean it<font color="#CCCCCC"> reaches all the</font><font color="#E5E5E5"> files and then</font>

449
00:17:47,570 --> 00:17:51,080
if you have<font color="#CCCCCC"> repetitive data was in</font><font color="#E5E5E5"> the</font>

450
00:17:49,460 --> 00:17:53,500
same file this will<font color="#CCCCCC"> always result in</font><font color="#E5E5E5"> the</font>

451
00:17:51,080 --> 00:17:56,030
<font color="#CCCCCC">same chunk so on the server</font><font color="#E5E5E5"> ultimately</font>

452
00:17:53,500 --> 00:17:57,170
the number<font color="#CCCCCC"> of chunks ending up like if</font>

453
00:17:56,030 --> 00:17:58,700
you add<font color="#E5E5E5"> them and by side there will be</font>

454
00:17:57,170 --> 00:18:01,190
<font color="#E5E5E5">much smaller first like it will</font>

455
00:17:58,700 --> 00:18:03,590
automatically recognize similarities or

456
00:18:01,190 --> 00:18:07,490
identic<font color="#CCCCCC"> cavities whatever you call them</font>

457
00:18:03,590 --> 00:18:09,290
in<font color="#E5E5E5"> within files it will identify them</font>

458
00:18:07,490 --> 00:18:10,790
across files<font color="#E5E5E5"> because it doesn't really</font>

459
00:18:09,290 --> 00:18:12,260
care about files right like that's<font color="#CCCCCC"> a</font>

460
00:18:10,790 --> 00:18:14,240
good<font color="#E5E5E5"> thing so yeah it's very efficient</font>

461
00:18:12,260 --> 00:18:17,390
<font color="#CCCCCC">like it will reduce I like</font><font color="#E5E5E5"> to throw all</font>

462
00:18:14,240 --> 00:18:19,400
the duplicates<font color="#CCCCCC"> data around out</font><font color="#E5E5E5"> like of</font>

463
00:18:17,390 --> 00:18:20,780
<font color="#CCCCCC">course always within</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> average chunk</font>

464
00:18:19,400 --> 00:18:22,580
size right like if you have identical

465
00:18:20,780 --> 00:18:24,710
data that is shorter than the average

466
00:18:22,580 --> 00:18:26,149
<font color="#CCCCCC">what minimal chunks that and</font><font color="#E5E5E5"> we'll never</font>

467
00:18:24,710 --> 00:18:32,330
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to find that right it's not for</font>

468
00:18:26,150 --> 00:18:34,700
<font color="#E5E5E5">that but the name of the compression</font>

469
00:18:32,330 --> 00:18:36,350
algorithm that's that STD it's a

470
00:18:34,700 --> 00:18:41,960
<font color="#CCCCCC">facebook</font><font color="#E5E5E5"> saying like it's</font><font color="#CCCCCC"> relatively</font>

471
00:18:36,350 --> 00:18:44,240
good compressing and very fast like<font color="#E5E5E5"> you</font>

472
00:18:41,960 --> 00:18:46,940
<font color="#E5E5E5">can use expert and you can use something</font>

473
00:18:44,240 --> 00:18:48,230
else<font color="#E5E5E5"> too but yeah I mean you can</font><font color="#CCCCCC"> even</font>

474
00:18:46,940 --> 00:18:49,640
the hash function can replace that<font color="#CCCCCC"> too</font>

475
00:18:48,230 --> 00:18:51,260
but the thing is<font color="#E5E5E5"> I wanted to play and</font>

476
00:18:49,640 --> 00:18:53,690
you might even<font color="#CCCCCC"> want to replace the hash</font>

477
00:18:51,260 --> 00:18:56,570
function like if you care about 32-bit

478
00:18:53,690 --> 00:18:59,150
processors<font color="#E5E5E5"> shot to fix</font><font color="#CCCCCC"> five sixes</font><font color="#E5E5E5"> way</font>

479
00:18:56,570 --> 00:19:00,379
<font color="#E5E5E5">fast on those so if that's what you what</font>

480
00:18:59,150 --> 00:19:01,520
you care<font color="#CCCCCC"> about then you should probably</font>

481
00:19:00,380 --> 00:19:03,320
<font color="#E5E5E5">swap that out</font>

482
00:19:01,520 --> 00:19:07,940
but I think<font color="#CCCCCC"> most computers are probably</font>

483
00:19:03,320 --> 00:19:11,720
64-bit so that's what we default<font color="#E5E5E5"> to okay</font>

484
00:19:07,940 --> 00:19:13,580
<font color="#E5E5E5">let's continue yeah so average the</font>

485
00:19:11,720 --> 00:19:15,610
chunks<font color="#E5E5E5"> are evenly sized and we can</font>

486
00:19:13,580 --> 00:19:18,110
recognize<font color="#E5E5E5"> similar box in different files</font>

487
00:19:15,610 --> 00:19:20,389
<font color="#CCCCCC">firery names this way files moving this</font>

488
00:19:18,110 --> 00:19:22,909
way<font color="#E5E5E5"> we can recognize the same file</font>

489
00:19:20,390 --> 00:19:25,220
<font color="#E5E5E5">contents within files even</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> and yeah</font>

490
00:19:22,910 --> 00:19:26,720
<font color="#E5E5E5">why do we</font><font color="#CCCCCC"> always list</font><font color="#E5E5E5"> similar</font><font color="#CCCCCC"> file</font>

491
00:19:25,220 --> 00:19:29,030
<font color="#CCCCCC">system interests will result in mostly</font>

492
00:19:26,720 --> 00:19:30,650
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same chunk files</font><font color="#E5E5E5"> and hence you get</font>

493
00:19:29,030 --> 00:19:33,139
efficient<font color="#CCCCCC"> storage of many related trees</font>

494
00:19:30,650 --> 00:19:37,010
and all that<font color="#E5E5E5"> without keeping any kind of</font>

495
00:19:33,140 --> 00:19:38,690
history<font color="#E5E5E5"> it's also what's really nice</font>

496
00:19:37,010 --> 00:19:44,240
about is<font color="#E5E5E5"> that everything is implicitly</font>

497
00:19:38,690 --> 00:19:46,010
validated<font color="#E5E5E5"> right not me wait</font><font color="#CCCCCC"> so</font>

498
00:19:44,240 --> 00:19:47,600
everything is implicitly valid<font color="#E5E5E5"> verified</font>

499
00:19:46,010 --> 00:19:49,040
so this is the<font color="#CCCCCC"> invited thing that some</font>

500
00:19:47,600 --> 00:19:57,530
of you might<font color="#CCCCCC"> owe it reminds me</font><font color="#E5E5E5"> that my</font>

501
00:19:49,040 --> 00:19:58,909
<font color="#E5E5E5">talk has begun that's nice that's the</font>

502
00:19:57,530 --> 00:20:00,830
<font color="#E5E5E5">ambient</font><font color="#CCCCCC"> varieties some of you might</font>

503
00:19:58,910 --> 00:20:02,630
heard of<font color="#E5E5E5"> its it's a life kernel a</font>

504
00:20:00,830 --> 00:20:04,310
<font color="#E5E5E5">functionality</font><font color="#CCCCCC"> that basically</font><font color="#E5E5E5"> allows the</font>

505
00:20:02,630 --> 00:20:06,680
system to validate<font color="#E5E5E5"> every read access to</font>

506
00:20:04,310 --> 00:20:09,679
<font color="#E5E5E5">the heart it's a hard drive and</font>

507
00:20:06,680 --> 00:20:11,930
guarantees cryptographically<font color="#E5E5E5"> that what</font>

508
00:20:09,680 --> 00:20:13,960
is<font color="#E5E5E5"> being read is</font><font color="#CCCCCC"> actually the version</font>

509
00:20:11,930 --> 00:20:15,950
<font color="#E5E5E5">that whatever the vendor put together</font>

510
00:20:13,960 --> 00:20:18,170
<font color="#E5E5E5">this stuff will give simplicity</font><font color="#CCCCCC"> a</font>

511
00:20:15,950 --> 00:20:19,760
<font color="#E5E5E5">similar behavior right like because we</font>

512
00:20:18,170 --> 00:20:21,470
check everything<font color="#E5E5E5"> against the index and</font>

513
00:20:19,760 --> 00:20:24,379
<font color="#E5E5E5">the index contains the</font><font color="#CCCCCC"> Christoffel</font><font color="#E5E5E5"> if a</font>

514
00:20:21,470 --> 00:20:27,080
cryptographically strong hash values of

515
00:20:24,380 --> 00:20:28,880
all the data blocks all<font color="#CCCCCC"> the chunks we</font>

516
00:20:27,080 --> 00:20:30,919
get the same behavior<font color="#E5E5E5"> there right like</font>

517
00:20:28,880 --> 00:20:35,020
<font color="#E5E5E5">we got the complete</font><font color="#CCCCCC"> guarantee you</font><font color="#E5E5E5"> won't</font>

518
00:20:30,920 --> 00:20:37,100
be able<font color="#E5E5E5"> to play games with</font><font color="#CCCCCC"> us and</font>

519
00:20:35,020 --> 00:20:39,500
provide<font color="#CCCCCC"> us with wrong data and we</font>

520
00:20:37,100 --> 00:20:41,209
wouldn't<font color="#E5E5E5"> notice</font><font color="#CCCCCC"> it's also</font><font color="#E5E5E5"> relatively</font>

521
00:20:39,500 --> 00:20:44,770
<font color="#CCCCCC">city unfriendly</font><font color="#E5E5E5"> like content delivery</font>

522
00:20:41,210 --> 00:20:47,750
network friendly<font color="#E5E5E5"> because you know it</font>

523
00:20:44,770 --> 00:20:50,000
roughly our<font color="#E5E5E5"> chunks are always the</font><font color="#CCCCCC"> same</font>

524
00:20:47,750 --> 00:20:51,530
size<font color="#E5E5E5"> right like and you can pick while</font>

525
00:20:50,000 --> 00:20:54,350
when you<font color="#E5E5E5"> you see I think what your</font>

526
00:20:51,530 --> 00:20:57,200
average chunk size shall be so since<font color="#E5E5E5"> CDN</font>

527
00:20:54,350 --> 00:20:58,610
<font color="#E5E5E5">is generally like you pay for the number</font>

528
00:20:57,200 --> 00:21:02,420
<font color="#CCCCCC">of objects requested or something like</font>

529
00:20:58,610 --> 00:21:03,860
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> pick like how</font>

530
00:21:02,420 --> 00:21:06,230
much you want to<font color="#E5E5E5"> pay to the CDN use</font>

531
00:21:03,860 --> 00:21:07,850
larger chunks that<font color="#CCCCCC"> basically means fewer</font>

532
00:21:06,230 --> 00:21:13,090
objects can be<font color="#CCCCCC"> requested by clients if</font>

533
00:21:07,850 --> 00:21:13,090
they want<font color="#E5E5E5"> to download something but less</font>

534
00:21:16,440 --> 00:21:21,640
we won't be able<font color="#E5E5E5"> to duplicate so much so</font>

535
00:21:19,930 --> 00:21:23,350
it's ready we see the<font color="#CCCCCC"> Anthony I mean the</font>

536
00:21:21,640 --> 00:21:25,390
other systems like<font color="#CCCCCC"> for example OS</font><font color="#E5E5E5"> tree</font>

537
00:21:23,350 --> 00:21:26,860
<font color="#E5E5E5">as one they traditionally started out at</font>

538
00:21:25,390 --> 00:21:28,810
least<font color="#E5E5E5"> as something where every</font>

539
00:21:26,860 --> 00:21:31,000
individual file<font color="#E5E5E5"> would get attached and</font>

540
00:21:28,810 --> 00:21:32,409
would be put on the HTTP server so if

541
00:21:31,000 --> 00:21:34,780
you look at Etsy or something we have

542
00:21:32,410 --> 00:21:36,700
those tons of very small files and<font color="#E5E5E5"> C</font>

543
00:21:34,780 --> 00:21:38,170
<font color="#CCCCCC">hosts and whatever they're called they</font>

544
00:21:36,700 --> 00:21:40,600
would all get this little<font color="#E5E5E5"> object</font><font color="#CCCCCC"> you</font>

545
00:21:38,170 --> 00:21:42,310
would<font color="#CCCCCC"> have to pay</font><font color="#E5E5E5"> CDN with millions and</font>

546
00:21:40,600 --> 00:21:44,649
millions of get requests<font color="#CCCCCC"> because every</font>

547
00:21:42,310 --> 00:21:47,460
client requested that their way out<font color="#E5E5E5"> of</font>

548
00:21:44,650 --> 00:21:49,690
that<font color="#CCCCCC"> problem was adding binary</font><font color="#E5E5E5"> Delta's</font>

549
00:21:47,460 --> 00:21:51,340
<font color="#E5E5E5">when your</font><font color="#CCCCCC"> Delta's actually something</font>

550
00:21:49,690 --> 00:21:54,430
<font color="#E5E5E5">very opposed to what I'm doing</font><font color="#CCCCCC"> here</font>

551
00:21:51,340 --> 00:21:56,020
because binary Delta's between different

552
00:21:54,430 --> 00:21:57,730
<font color="#E5E5E5">versions always implies history right</font>

553
00:21:56,020 --> 00:22:00,550
you need<font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> history</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to</font>

554
00:21:57,730 --> 00:22:03,760
have somebody who<font color="#E5E5E5"> sits down and figures</font>

555
00:22:00,550 --> 00:22:06,310
out what are the image versions that<font color="#E5E5E5"> is</font>

556
00:22:03,760 --> 00:22:08,170
<font color="#E5E5E5">worth updating between so that</font><font color="#CCCCCC"> it pre</font>

557
00:22:06,310 --> 00:22:10,690
calculates the<font color="#CCCCCC"> DIF and puts it on the</font>

558
00:22:08,170 --> 00:22:13,570
server<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> management</font><font color="#CCCCCC"> work</font>

559
00:22:10,690 --> 00:22:15,550
with this<font color="#E5E5E5"> stuff nothing</font><font color="#CCCCCC"> of that sort is</font>

560
00:22:13,570 --> 00:22:17,590
required right like<font color="#E5E5E5"> every image stands</font>

561
00:22:15,550 --> 00:22:19,419
for its own and if data blocks are

562
00:22:17,590 --> 00:22:21,159
<font color="#CCCCCC">reused</font><font color="#E5E5E5"> that's automatically detected</font>

563
00:22:19,420 --> 00:22:22,690
because<font color="#CCCCCC"> I don't care</font><font color="#E5E5E5"> about history</font><font color="#CCCCCC"> I</font>

564
00:22:21,160 --> 00:22:24,220
don't<font color="#CCCCCC"> care about anyone managing</font>

565
00:22:22,690 --> 00:22:27,120
<font color="#E5E5E5">anything I</font><font color="#CCCCCC"> just care about the chunks</font>

566
00:22:24,220 --> 00:22:31,030
<font color="#E5E5E5">and they automatically out of themselves</font>

567
00:22:27,120 --> 00:22:35,439
<font color="#E5E5E5">deduplicate themselves any questions</font>

568
00:22:31,030 --> 00:22:37,450
<font color="#E5E5E5">otherwise so why all this yeah when</font>

569
00:22:35,440 --> 00:22:40,090
<font color="#CCCCCC">acquiring in you a new image we</font><font color="#E5E5E5"> can</font>

570
00:22:37,450 --> 00:22:42,580
actually take<font color="#CCCCCC"> benefit of the fact that</font>

571
00:22:40,090 --> 00:22:43,990
<font color="#E5E5E5">usually like if you do a operating</font>

572
00:22:42,580 --> 00:22:45,100
system upgrade you already have one

573
00:22:43,990 --> 00:22:48,160
<font color="#E5E5E5">version right like that's the definition</font>

574
00:22:45,100 --> 00:22:50,590
of an upgrade<font color="#CCCCCC"> so we can actually go over</font>

575
00:22:48,160 --> 00:22:52,000
<font color="#E5E5E5">the file system</font><font color="#CCCCCC"> and do the</font><font color="#E5E5E5"> same</font>

576
00:22:50,590 --> 00:22:54,100
algorithm that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> just explained and</font>

577
00:22:52,000 --> 00:22:55,960
then<font color="#E5E5E5"> we'll get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> list of hashes that we</font>

578
00:22:54,100 --> 00:22:57,790
already<font color="#E5E5E5"> have that we can read on the</font>

579
00:22:55,960 --> 00:22:59,680
version<font color="#CCCCCC"> that we already have and then</font>

580
00:22:57,790 --> 00:23:01,240
<font color="#E5E5E5">when we do an update we just copy it</font>

581
00:22:59,680 --> 00:23:02,710
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> file system that we already</font>

582
00:23:01,240 --> 00:23:05,020
have into<font color="#E5E5E5"> the new version</font><font color="#CCCCCC"> that we're</font>

583
00:23:02,710 --> 00:23:06,430
about<font color="#E5E5E5"> to create and only the chunks that</font>

584
00:23:05,020 --> 00:23:10,060
<font color="#CCCCCC">we</font><font color="#E5E5E5"> don't have yet we actually acquire</font>

585
00:23:06,430 --> 00:23:11,650
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> internet so yeah basically with</font>

586
00:23:10,060 --> 00:23:13,990
everything that we have<font color="#CCCCCC"> we</font><font color="#E5E5E5"> get a pool of</font>

587
00:23:11,650 --> 00:23:16,180
reusable<font color="#CCCCCC"> chunks</font><font color="#E5E5E5"> interesting thing about</font>

588
00:23:13,990 --> 00:23:18,790
<font color="#E5E5E5">this</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it actually allows even</font>

589
00:23:16,180 --> 00:23:22,650
updating efficiently or relatively

590
00:23:18,790 --> 00:23:25,470
efficiently between<font color="#E5E5E5"> theoretically</font>

591
00:23:22,650 --> 00:23:27,750
<font color="#E5E5E5">foreign</font>

592
00:23:25,470 --> 00:23:29,940
like images like for example<font color="#E5E5E5"> you could</font>

593
00:23:27,750 --> 00:23:32,639
actually tell<font color="#CCCCCC"> ci</font><font color="#E5E5E5"> sink to use your Debian</font>

594
00:23:29,940 --> 00:23:34,230
image as a base for installing<font color="#CCCCCC"> the new</font>

595
00:23:32,639 --> 00:23:36,029
version of your<font color="#E5E5E5"> Fedora image right and</font>

596
00:23:34,230 --> 00:23:37,350
they think would would would

597
00:23:36,029 --> 00:23:38,820
automatically<font color="#CCCCCC"> recognize the similarities</font>

598
00:23:37,350 --> 00:23:40,860
<font color="#CCCCCC">and</font><font color="#E5E5E5"> there are some I mean it's not gonna</font>

599
00:23:38,820 --> 00:23:44,129
<font color="#E5E5E5">be as efficient if they actually share</font>

600
00:23:40,860 --> 00:23:45,418
<font color="#E5E5E5">some common history but it will</font>

601
00:23:44,130 --> 00:23:47,340
<font color="#CCCCCC">recognize what the similarities like</font>

602
00:23:45,419 --> 00:23:50,039
<font color="#CCCCCC">timezone data and locale data which</font>

603
00:23:47,340 --> 00:23:51,809
tends<font color="#E5E5E5"> to change relatively seldomly so</font>

604
00:23:50,039 --> 00:23:55,440
which is kind of nice<font color="#E5E5E5"> right like because</font>

605
00:23:51,809 --> 00:23:57,960
you don't<font color="#CCCCCC"> need any actual historical</font>

606
00:23:55,440 --> 00:24:00,590
relationship if there is one<font color="#E5E5E5"> that</font>

607
00:23:57,960 --> 00:24:03,090
<font color="#E5E5E5">translates to</font><font color="#CCCCCC"> to better efficiency but</font>

608
00:24:00,590 --> 00:24:05,428
yeah you can<font color="#E5E5E5"> actually throw any kind</font><font color="#CCCCCC"> of</font>

609
00:24:03,090 --> 00:24:07,529
treat on it and see I think<font color="#CCCCCC"> will</font>

610
00:24:05,429 --> 00:24:09,120
recognize the similarities<font color="#E5E5E5"> and if they</font>

611
00:24:07,529 --> 00:24:10,679
aren't<font color="#E5E5E5"> then it doesn't hurt it just</font>

612
00:24:09,120 --> 00:24:12,658
makes a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit slower initially</font>

613
00:24:10,679 --> 00:24:14,909
because<font color="#E5E5E5"> we have to index everything but</font>

614
00:24:12,659 --> 00:24:18,659
other than that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> doesn't cost</font><font color="#E5E5E5"> you</font>

615
00:24:14,909 --> 00:24:20,370
anything yeah so there's automatic

616
00:24:18,659 --> 00:24:22,139
robust reusing of what's download before

617
00:24:20,370 --> 00:24:24,000
<font color="#E5E5E5">right because we ever</font><font color="#CCCCCC"> seen who's</font>

618
00:24:22,139 --> 00:24:26,729
cryptographically verified<font color="#E5E5E5"> even if you</font>

619
00:24:24,000 --> 00:24:28,019
have like the old version was modified

620
00:24:26,730 --> 00:24:30,750
locally because<font color="#E5E5E5"> somebody hacked and</font>

621
00:24:28,019 --> 00:24:32,759
whatever else we<font color="#CCCCCC"> wouldn't use it</font><font color="#E5E5E5"> right</font>

622
00:24:30,750 --> 00:24:35,039
<font color="#E5E5E5">like we wouldn't use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> because we read</font>

623
00:24:32,759 --> 00:24:36,480
<font color="#CCCCCC">the stuff from</font><font color="#E5E5E5"> disk hash it up again and</font>

624
00:24:35,039 --> 00:24:59,158
check<font color="#E5E5E5"> it against what we expect it to be</font>

625
00:24:36,480 --> 00:25:00,750
<font color="#E5E5E5">if it's not a good question I like it</font>

626
00:24:59,159 --> 00:25:02,190
<font color="#E5E5E5">really depends</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> your use case what the</font>

627
00:25:00,750 --> 00:25:04,679
by the way the question<font color="#CCCCCC"> was regarding</font>

628
00:25:02,190 --> 00:25:06,629
<font color="#CCCCCC">tank sizes</font><font color="#E5E5E5"> and how do you choose the</font>

629
00:25:04,679 --> 00:25:09,990
right<font color="#E5E5E5"> chunk</font><font color="#CCCCCC"> sizes for you what you want</font>

630
00:25:06,629 --> 00:25:11,279
to<font color="#E5E5E5"> do and what the trade-offs are yeah I</font>

631
00:25:09,990 --> 00:25:12,179
can't really gives you the perfect

632
00:25:11,279 --> 00:25:14,700
answer<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> because it really</font>

633
00:25:12,179 --> 00:25:16,440
<font color="#E5E5E5">depends</font><font color="#CCCCCC"> on what</font><font color="#E5E5E5"> you're doing</font><font color="#CCCCCC"> and for</font>

634
00:25:14,700 --> 00:25:20,279
many use cases<font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't have any answer</font>

635
00:25:16,440 --> 00:25:22,409
<font color="#CCCCCC">at all but yeah</font><font color="#E5E5E5"> as mentioned</font><font color="#CCCCCC"> that it</font>

636
00:25:20,279 --> 00:25:23,580
like I don't know for the back up case

637
00:25:22,409 --> 00:25:25,019
for example<font color="#E5E5E5"> things will be very very</font>

638
00:25:23,580 --> 00:25:27,120
different<font color="#CCCCCC"> than for the for the image</font>

639
00:25:25,019 --> 00:25:29,220
delivery case and for<font color="#E5E5E5"> the image delivery</font>

640
00:25:27,120 --> 00:25:30,989
case it really vents what you<font color="#E5E5E5"> actually</font>

641
00:25:29,220 --> 00:25:32,580
ship like for example<font color="#CCCCCC"> some people ship</font>

642
00:25:30,990 --> 00:25:35,039
<font color="#E5E5E5">squashed FS actually</font><font color="#CCCCCC"> I would</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> them</font>

643
00:25:32,580 --> 00:25:37,810
<font color="#CCCCCC">up that's later squash FS</font><font color="#E5E5E5"> and series is</font>

644
00:25:35,039 --> 00:25:39,850
<font color="#E5E5E5">very much contradictory to this</font>

645
00:25:37,810 --> 00:25:41,740
concept because<font color="#CCCCCC"> washer Fez removes</font>

646
00:25:39,850 --> 00:25:44,199
<font color="#E5E5E5">redundancy anyway so I won't recognize</font>

647
00:25:41,740 --> 00:25:46,030
any change<font color="#E5E5E5"> the data within it and in</font>

648
00:25:44,200 --> 00:25:49,780
<font color="#E5E5E5">theory if</font><font color="#CCCCCC"> you have fully compressed data</font>

649
00:25:46,030 --> 00:25:51,910
then<font color="#CCCCCC"> yeah every change</font><font color="#E5E5E5"> in the beginning</font>

650
00:25:49,780 --> 00:25:54,220
will explode<font color="#E5E5E5"> into the rest of the of the</font>

651
00:25:51,910 --> 00:25:55,840
image anyway now squash<font color="#E5E5E5"> FS thankfully</font>

652
00:25:54,220 --> 00:25:57,490
<font color="#CCCCCC">isn't like that because squash FS still</font>

653
00:25:55,840 --> 00:25:59,080
needs to be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> random access</font><font color="#CCCCCC"> filesystem</font>

654
00:25:57,490 --> 00:26:02,260
<font color="#CCCCCC">so what they actually</font><font color="#E5E5E5"> do is they</font>

655
00:25:59,080 --> 00:26:03,730
compress<font color="#E5E5E5"> a little and then they stop the</font>

656
00:26:02,260 --> 00:26:05,140
compression<font color="#CCCCCC"> restart the compression for</font>

657
00:26:03,730 --> 00:26:07,240
<font color="#CCCCCC">the next stuff and then add an</font><font color="#E5E5E5"> index at</font>

658
00:26:05,140 --> 00:26:09,400
the<font color="#E5E5E5"> end so because that</font><font color="#CCCCCC"> is that way if</font>

659
00:26:07,240 --> 00:26:11,050
you synchronize things properly<font color="#E5E5E5"> with CA</font>

660
00:26:09,400 --> 00:26:12,640
syncs chunking<font color="#E5E5E5"> right like the block size</font>

661
00:26:11,050 --> 00:26:15,520
that that<font color="#E5E5E5"> squat</font><font color="#CCCCCC"> reverse uses and the</font>

662
00:26:12,640 --> 00:26:17,860
tracking size that<font color="#CCCCCC"> C I</font><font color="#E5E5E5"> think you this</font>

663
00:26:15,520 --> 00:26:19,480
you<font color="#E5E5E5"> can actually even deliver caution of</font>

664
00:26:17,860 --> 00:26:22,060
s relatively efficiently<font color="#CCCCCC"> but if you're</font>

665
00:26:19,480 --> 00:26:23,980
<font color="#E5E5E5">asking</font><font color="#CCCCCC"> me now what the best the right</font>

666
00:26:22,060 --> 00:26:25,929
setting says I can't really tell<font color="#CCCCCC"> you</font>

667
00:26:23,980 --> 00:26:28,450
that<font color="#CCCCCC"> because it depends on</font><font color="#E5E5E5"> a use case</font>

668
00:26:25,930 --> 00:26:29,950
and<font color="#E5E5E5"> people have to crunch the numbers</font>

669
00:26:28,450 --> 00:26:31,600
for us to<font color="#E5E5E5"> figure out what's right for</font>

670
00:26:29,950 --> 00:26:33,460
them now this is actually<font color="#E5E5E5"> something that</font>

671
00:26:31,600 --> 00:26:38,020
<font color="#E5E5E5">the other talk on the other end of the</font>

672
00:26:33,460 --> 00:26:39,700
of the venue here is<font color="#E5E5E5"> doing like he</font>

673
00:26:38,020 --> 00:26:42,940
<font color="#E5E5E5">actually put a lot of container images</font>

674
00:26:39,700 --> 00:26:45,940
<font color="#E5E5E5">on</font><font color="#CCCCCC"> ci sink and try to figure</font><font color="#E5E5E5"> out when</font>

675
00:26:42,940 --> 00:26:47,950
this actually starts making<font color="#E5E5E5"> a lot of</font>

676
00:26:45,940 --> 00:26:49,930
<font color="#E5E5E5">sense and when it doesn't do</font><font color="#CCCCCC"> so much and</font>

677
00:26:47,950 --> 00:26:52,210
<font color="#E5E5E5">you should</font><font color="#CCCCCC"> she gave</font><font color="#E5E5E5"> me quick overview</font>

678
00:26:49,930 --> 00:26:53,740
about<font color="#E5E5E5"> the results of this but yeah if</font>

679
00:26:52,210 --> 00:26:56,550
<font color="#E5E5E5">you want the answer for the question</font><font color="#CCCCCC"> you</font>

680
00:26:53,740 --> 00:26:56,550
have<font color="#E5E5E5"> to go to the other side</font>

681
00:27:03,419 --> 00:27:08,260
<font color="#E5E5E5">in one place</font><font color="#CCCCCC"> so the question was</font>

682
00:27:06,250 --> 00:27:12,130
regarding can we have at the same place

683
00:27:08,260 --> 00:27:14,140
<font color="#E5E5E5">index files for different chunk sizes so</font>

684
00:27:12,130 --> 00:27:16,510
I mean you sure you<font color="#E5E5E5"> can do everything</font>

685
00:27:14,140 --> 00:27:18,549
<font color="#E5E5E5">right like see I think won't stop you</font>

686
00:27:16,510 --> 00:27:21,580
<font color="#E5E5E5">but of course if</font><font color="#CCCCCC"> you operate it with</font>

687
00:27:18,549 --> 00:27:24,039
different chunk sizes<font color="#E5E5E5"> csing</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> chunk</font>

688
00:27:21,580 --> 00:27:25,418
at different places so actually<font color="#CCCCCC"> I mean</font>

689
00:27:24,039 --> 00:27:27,340
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> that you could reuse chunks</font>

690
00:27:25,419 --> 00:27:29,080
<font color="#E5E5E5">it's very unlikely that you can reuse</font>

691
00:27:27,340 --> 00:27:31,510
chunks because<font color="#E5E5E5"> we will chunk differently</font>

692
00:27:29,080 --> 00:27:33,909
ultimately right but you can't place

693
00:27:31,510 --> 00:27:35,140
them but honestly<font color="#E5E5E5"> before you deploy see</font>

694
00:27:33,910 --> 00:27:36,909
I think<font color="#CCCCCC"> you should do</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> homework and</font>

695
00:27:35,140 --> 00:27:39,250
figure<font color="#E5E5E5"> out what the perfect chunk size</font>

696
00:27:36,909 --> 00:27:40,630
for<font color="#E5E5E5"> your stuff is ultimately I mean it's</font>

697
00:27:39,250 --> 00:27:42,100
not<font color="#CCCCCC"> that it's completely have to be</font><font color="#E5E5E5"> set</font>

698
00:27:40,630 --> 00:27:45,750
<font color="#CCCCCC">in stone right</font><font color="#E5E5E5"> like you'd change it</font>

699
00:27:42,100 --> 00:27:48,010
later<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the back it won't hurt you</font>

700
00:27:45,750 --> 00:27:50,140
technically it will<font color="#E5E5E5"> only hurt you</font><font color="#CCCCCC"> that</font>

701
00:27:48,010 --> 00:27:51,400
yeah when you do<font color="#E5E5E5"> fiddle around with a</font>

702
00:27:50,140 --> 00:27:52,840
chunk size all<font color="#CCCCCC"> the time over the</font>

703
00:27:51,400 --> 00:27:55,240
progress<font color="#E5E5E5"> of your project</font><font color="#CCCCCC"> each time you</font>

704
00:27:52,840 --> 00:27:57,580
do it<font color="#E5E5E5"> and then reuse it like the the</font>

705
00:27:55,240 --> 00:27:58,059
level of reuse for the chunks goes to

706
00:27:57,580 --> 00:28:00,309
<font color="#E5E5E5">zero</font>

707
00:27:58,059 --> 00:28:02,200
usually<font color="#E5E5E5"> but it's not that</font><font color="#CCCCCC"> it's like it</font>

708
00:28:00,309 --> 00:28:04,178
<font color="#E5E5E5">won't create technical problems</font><font color="#CCCCCC"> it will</font>

709
00:28:02,200 --> 00:28:05,950
<font color="#E5E5E5">just if you fiddle too much then the</font>

710
00:28:04,179 --> 00:28:18,880
<font color="#E5E5E5">bandwidth savings that this is supposed</font>

711
00:28:05,950 --> 00:28:20,919
to<font color="#E5E5E5"> provide you will not be delivered so</font>

712
00:28:18,880 --> 00:28:23,740
the question was regarding updating<font color="#CCCCCC"> I</font>

713
00:28:20,919 --> 00:28:25,240
<font color="#CCCCCC">life I eighty images with this</font><font color="#E5E5E5"> and what</font>

714
00:28:23,740 --> 00:28:26,500
the<font color="#CCCCCC"> quad</font><font color="#E5E5E5"> chests are about doing this so</font>

715
00:28:25,240 --> 00:28:28,120
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> definitely</font><font color="#E5E5E5"> one of the use</font><font color="#CCCCCC"> cases</font>

716
00:28:26,500 --> 00:28:31,090
right like you saw the IOT<font color="#E5E5E5"> and then I'm</font>

717
00:28:28,120 --> 00:28:32,408
a<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the thing and well I mean you</font><font color="#E5E5E5"> know</font>

718
00:28:31,090 --> 00:28:34,120
if you do the double buffering thing

719
00:28:32,409 --> 00:28:38,080
like the a<font color="#CCCCCC"> B petition stuff right this</font>

720
00:28:34,120 --> 00:28:40,149
<font color="#E5E5E5">should</font><font color="#CCCCCC"> be pretty well</font><font color="#E5E5E5"> like it really</font>

721
00:28:38,080 --> 00:28:42,158
depends what your<font color="#E5E5E5"> constraints are do you</font>

722
00:28:40,150 --> 00:28:44,470
<font color="#E5E5E5">actually care about</font><font color="#CCCCCC"> runtime for</font><font color="#E5E5E5"> this or</font>

723
00:28:42,159 --> 00:28:47,679
do<font color="#E5E5E5"> you not like do care that like I mean</font>

724
00:28:44,470 --> 00:28:49,570
<font color="#E5E5E5">will like if we if we try to like if you</font>

725
00:28:47,679 --> 00:28:51,700
take<font color="#E5E5E5"> benefit of the seeding stuff like</font>

726
00:28:49,570 --> 00:28:54,370
seeding is how I call this that you look

727
00:28:51,700 --> 00:28:56,049
at the the operating system version you

728
00:28:54,370 --> 00:28:58,750
already have and<font color="#E5E5E5"> chop it up and use this</font>

729
00:28:56,049 --> 00:29:00,460
as a pool<font color="#CCCCCC"> of chunks then of</font><font color="#E5E5E5"> course takes</font>

730
00:28:58,750 --> 00:29:03,880
a lot of time right like indexing all of

731
00:29:00,460 --> 00:29:05,890
that<font color="#E5E5E5"> and you could cache the results of</font>

732
00:29:03,880 --> 00:29:08,500
the indexing<font color="#E5E5E5"> but if you</font><font color="#CCCCCC"> actually have</font>

733
00:29:05,890 --> 00:29:10,179
<font color="#CCCCCC">file system</font><font color="#E5E5E5"> treats a change then the</font>

734
00:29:08,500 --> 00:29:12,429
cache<font color="#E5E5E5"> like we can't maintain this</font>

735
00:29:10,179 --> 00:29:14,130
there's no there's no sufficient<font color="#E5E5E5"> API in</font>

736
00:29:12,429 --> 00:29:16,570
<font color="#E5E5E5">Linux how we can</font>

737
00:29:14,130 --> 00:29:18,280
detect changes on the<font color="#E5E5E5"> block layer at</font>

738
00:29:16,570 --> 00:29:22,059
least on the<font color="#CCCCCC"> filesystem layer that's</font><font color="#E5E5E5"> not</font>

739
00:29:18,280 --> 00:29:23,620
too<font color="#E5E5E5"> much of a problem but yeah if you</font>

740
00:29:22,059 --> 00:29:25,149
want a one-stop<font color="#CCCCCC"> solution that already is</font>

741
00:29:23,620 --> 00:29:27,340
well tested<font color="#E5E5E5"> and people know exactly what</font>

742
00:29:25,150 --> 00:29:28,690
<font color="#CCCCCC">the parameters are that you want</font><font color="#E5E5E5"> to put</font>

743
00:29:27,340 --> 00:29:31,360
in there<font color="#E5E5E5"> and see your</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> not for you</font>

744
00:29:28,690 --> 00:29:32,710
<font color="#E5E5E5">but yeah this is stuff that's</font><font color="#CCCCCC"> right</font>

745
00:29:31,360 --> 00:29:33,909
still<font color="#E5E5E5"> relatively new I know that a lot</font>

746
00:29:32,710 --> 00:29:35,080
of people have<font color="#E5E5E5"> been doing this live as I</font>

747
00:29:33,910 --> 00:29:37,300
learned recently there's even a

748
00:29:35,080 --> 00:29:39,370
reimplementation of the<font color="#CCCCCC"> CAC</font><font color="#E5E5E5"> client side</font>

749
00:29:37,300 --> 00:29:41,740
at least<font color="#E5E5E5"> and go but nobody told me about</font>

750
00:29:39,370 --> 00:29:43,270
until yesterday and so apparently

751
00:29:41,740 --> 00:29:46,510
<font color="#CCCCCC">there's some</font><font color="#E5E5E5"> adoption but ultimately</font>

752
00:29:43,270 --> 00:29:51,309
most of the code is<font color="#E5E5E5"> lesser than a year</font>

753
00:29:46,510 --> 00:29:52,990
right<font color="#CCCCCC"> so yeah I think it I</font><font color="#E5E5E5"> mean my</font>

754
00:29:51,309 --> 00:29:54,370
<font color="#CCCCCC">answers</font><font color="#E5E5E5"> definitely it's absolutely the</font>

755
00:29:52,990 --> 00:29:55,870
<font color="#E5E5E5">use case for this right that's what I</font>

756
00:29:54,370 --> 00:29:57,459
<font color="#CCCCCC">care care</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> is actually what they</font>

757
00:29:55,870 --> 00:29:59,020
want to<font color="#E5E5E5"> build is like a self</font><font color="#CCCCCC"> updating</font>

758
00:29:57,460 --> 00:30:00,760
stuff where people<font color="#CCCCCC"> are a little bit</font>

759
00:29:59,020 --> 00:30:03,700
smarter<font color="#CCCCCC"> than just dding things around</font><font color="#E5E5E5"> or</font>

760
00:30:00,760 --> 00:30:05,410
tearing things<font color="#E5E5E5"> around but it's not it's</font>

761
00:30:03,700 --> 00:30:07,059
<font color="#E5E5E5">not a ready-made solution like it's not</font>

762
00:30:05,410 --> 00:30:08,559
a product<font color="#E5E5E5"> it's it's a building block</font>

763
00:30:07,059 --> 00:30:11,040
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> have to make fit to whatever</font>

764
00:30:08,559 --> 00:30:11,040
you<font color="#E5E5E5"> want to</font>

765
00:30:15,090 --> 00:30:22,889
<font color="#E5E5E5">so there was another one about this</font><font color="#CCCCCC"> oh</font>

766
00:30:17,260 --> 00:30:22,890
good that I know now<font color="#CCCCCC"> who did</font><font color="#E5E5E5"> that</font>

767
00:30:23,640 --> 00:30:27,640
awesome yeah<font color="#E5E5E5"> okay they're great people</font>

768
00:30:25,680 --> 00:30:29,590
<font color="#E5E5E5">anyway I probably should watch the video</font>

769
00:30:27,640 --> 00:30:31,120
<font color="#CCCCCC">about that and the other</font><font color="#E5E5E5"> one that</font><font color="#CCCCCC"> 3c</font>

770
00:30:29,590 --> 00:30:34,449
async talks at the same conference<font color="#E5E5E5"> is</font>

771
00:30:31,120 --> 00:30:37,270
awesome<font color="#CCCCCC"> anyway nobody has question let's</font>

772
00:30:34,450 --> 00:30:38,410
continue<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the slides</font><font color="#CCCCCC"> yeah this is</font>

773
00:30:37,270 --> 00:30:39,850
something<font color="#CCCCCC"> I really wanted</font><font color="#E5E5E5"> to stress</font>

774
00:30:38,410 --> 00:30:41,140
<font color="#E5E5E5">there's no revision control I already</font>

775
00:30:39,850 --> 00:30:43,899
mentioned<font color="#E5E5E5"> this right like this problem</font>

776
00:30:41,140 --> 00:30:45,760
was y ou s<font color="#E5E5E5"> tree</font><font color="#CCCCCC"> tried to solve by having</font>

777
00:30:43,900 --> 00:30:47,710
binary<font color="#CCCCCC"> Delta's between the key versions</font>

778
00:30:45,760 --> 00:30:50,950
that people want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> download</font><font color="#E5E5E5"> a upgrade</font>

779
00:30:47,710 --> 00:30:52,990
with this is not as necessary at all

780
00:30:50,950 --> 00:30:55,600
there is no revision control<font color="#E5E5E5"> revision</font>

781
00:30:52,990 --> 00:30:57,640
control is a<font color="#CCCCCC"> useful thing</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> developers</font>

782
00:30:55,600 --> 00:30:59,080
I think<font color="#E5E5E5"> but</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> deployment I think it's</font>

783
00:30:57,640 --> 00:31:00,340
a weakness<font color="#E5E5E5"> I'd like</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> for example</font>

784
00:30:59,080 --> 00:31:01,270
is<font color="#E5E5E5"> the weakness</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> docker model for</font>

785
00:31:00,340 --> 00:31:04,449
example<font color="#CCCCCC"> because I have these</font><font color="#E5E5E5"> layers</font>

786
00:31:01,270 --> 00:31:06,580
which are two things<font color="#CCCCCC"> they're on one side</font>

787
00:31:04,450 --> 00:31:08,590
they are revision control for developers

788
00:31:06,580 --> 00:31:10,210
<font color="#E5E5E5">right so that they start from the</font><font color="#CCCCCC"> Debian</font>

789
00:31:08,590 --> 00:31:14,050
thing and then they make<font color="#CCCCCC"> that</font><font color="#E5E5E5"> changes</font>

790
00:31:10,210 --> 00:31:16,060
but on the other hand<font color="#E5E5E5"> they they also are</font>

791
00:31:14,050 --> 00:31:18,700
<font color="#CCCCCC">there way how they want</font><font color="#E5E5E5"> to reduce</font>

792
00:31:16,060 --> 00:31:20,379
<font color="#E5E5E5">downloads right like because everybody</font>

793
00:31:18,700 --> 00:31:21,880
<font color="#E5E5E5">already has Ubuntu version they</font><font color="#CCCCCC"> didn't</font>

794
00:31:20,380 --> 00:31:23,590
people<font color="#CCCCCC"> don't need to download</font><font color="#E5E5E5"> them I</font>

795
00:31:21,880 --> 00:31:26,200
don't<font color="#CCCCCC"> think you should intermix that</font>

796
00:31:23,590 --> 00:31:28,030
ever<font color="#E5E5E5"> and since this is about delivery</font>

797
00:31:26,200 --> 00:31:29,650
primarily and not supposed<font color="#E5E5E5"> to be another</font>

798
00:31:28,030 --> 00:31:31,570
get like not supposed<font color="#E5E5E5"> to be revision</font>

799
00:31:29,650 --> 00:31:34,990
control<font color="#E5E5E5"> the emphasis is</font><font color="#CCCCCC"> really yeah</font>

800
00:31:31,570 --> 00:31:38,409
<font color="#E5E5E5">there has to be no history and you don't</font>

801
00:31:34,990 --> 00:31:41,260
have to manage<font color="#E5E5E5"> anything and if you yeah</font>

802
00:31:38,410 --> 00:31:43,690
it's all standalone<font color="#E5E5E5"> individual thing and</font>

803
00:31:41,260 --> 00:31:45,790
if you<font color="#CCCCCC"> if two people happen to have the</font>

804
00:31:43,690 --> 00:31:48,400
<font color="#E5E5E5">same data are somewhere and share no</font>

805
00:31:45,790 --> 00:31:53,290
history together<font color="#CCCCCC"> the same chunks will be</font>

806
00:31:48,400 --> 00:31:54,910
recognized<font color="#E5E5E5"> anyway regardless yeah forget</font>

807
00:31:53,290 --> 00:31:56,860
revision control<font color="#E5E5E5"> and we find</font>

808
00:31:54,910 --> 00:31:58,510
similarities<font color="#E5E5E5"> automatically there is</font>

809
00:31:56,860 --> 00:32:01,840
revision<font color="#CCCCCC"> controllers for</font><font color="#E5E5E5"> developers it's</font>

810
00:31:58,510 --> 00:32:03,520
not for deployment<font color="#E5E5E5"> then yeah already</font>

811
00:32:01,840 --> 00:32:05,530
<font color="#E5E5E5">mention that I'm not using tar</font>

812
00:32:03,520 --> 00:32:08,170
<font color="#E5E5E5">like you to see I tar this little thing</font>

813
00:32:05,530 --> 00:32:10,240
<font color="#CCCCCC">that I came</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> it's strictly</font>

814
00:32:08,170 --> 00:32:12,220
reproducible<font color="#E5E5E5"> right there's only one</font>

815
00:32:10,240 --> 00:32:15,280
valid<font color="#E5E5E5"> series</font><font color="#CCCCCC"> ation with c8r for</font>

816
00:32:12,220 --> 00:32:16,780
directory tree<font color="#CCCCCC"> this stuff is defined so</font>

817
00:32:15,280 --> 00:32:20,110
that<font color="#E5E5E5"> it could actually be</font><font color="#CCCCCC"> tattooed ATO</font>

818
00:32:16,780 --> 00:32:21,280
<font color="#E5E5E5">like all the warts of</font><font color="#CCCCCC"> tar</font><font color="#E5E5E5"> removed but</font>

819
00:32:20,110 --> 00:32:22,959
then again<font color="#E5E5E5"> I'm not pushing for</font><font color="#CCCCCC"> that I</font>

820
00:32:21,280 --> 00:32:25,080
don't really<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> the problem</font>

821
00:32:22,960 --> 00:32:27,630
we're<font color="#E5E5E5"> trying to solve</font>

822
00:32:25,080 --> 00:32:29,129
and yeah that's<font color="#E5E5E5"> random access it has a</font>

823
00:32:27,630 --> 00:32:30,840
<font color="#E5E5E5">couple like the random accessing is</font>

824
00:32:29,130 --> 00:32:34,760
awesome because it basically<font color="#CCCCCC"> allows a</font>

825
00:32:30,840 --> 00:32:37,230
<font color="#E5E5E5">sink to mount these index files remotely</font>

826
00:32:34,760 --> 00:32:39,990
<font color="#E5E5E5">into into the local file system</font><font color="#CCCCCC"> live</font>

827
00:32:37,230 --> 00:32:42,170
<font color="#CCCCCC">fuse</font><font color="#E5E5E5"> and then in the background</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can</font>

828
00:32:39,990 --> 00:32:45,540
download the chunks as I need<font color="#E5E5E5"> them as</font>

829
00:32:42,170 --> 00:32:47,460
the client accesses them<font color="#CCCCCC"> and because I</font>

830
00:32:45,540 --> 00:32:49,889
have random<font color="#E5E5E5"> access I can give you proper</font>

831
00:32:47,460 --> 00:32:53,190
file system there<font color="#E5E5E5"> that basically ends up</font>

832
00:32:49,890 --> 00:32:56,670
on your<font color="#E5E5E5"> local system incrementally as</font>

833
00:32:53,190 --> 00:32:57,930
you use it<font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> that random access</font>

834
00:32:56,670 --> 00:33:00,450
thing is something<font color="#E5E5E5"> very much a</font>

835
00:32:57,930 --> 00:33:01,950
shortcoming<font color="#CCCCCC"> oft</font><font color="#E5E5E5"> are a couple</font><font color="#CCCCCC"> of other</font>

836
00:33:00,450 --> 00:33:04,710
things<font color="#CCCCCC"> by the way like I care a</font><font color="#E5E5E5"> lot of a</font>

837
00:33:01,950 --> 00:33:06,180
metadata control so<font color="#CCCCCC"> matter dare control</font>

838
00:33:04,710 --> 00:33:08,430
means like<font color="#E5E5E5"> depending on your use case</font>

839
00:33:06,180 --> 00:33:10,770
<font color="#CCCCCC">you need different metadata</font><font color="#E5E5E5"> in your in</font>

840
00:33:08,430 --> 00:33:13,380
<font color="#CCCCCC">your archives like for example if you do</font>

841
00:33:10,770 --> 00:33:15,360
in IOT but what<font color="#E5E5E5"> a container image he</font>

842
00:33:13,380 --> 00:33:18,120
<font color="#E5E5E5">generally don't care about M times like</font>

843
00:33:15,360 --> 00:33:20,280
modification times because M times are a

844
00:33:18,120 --> 00:33:23,310
bad<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> for that thing</font><font color="#E5E5E5"> because they</font>

845
00:33:20,280 --> 00:33:24,990
are like<font color="#E5E5E5"> contradictory</font><font color="#CCCCCC"> boos</font><font color="#E5E5E5"> reproduce</font>

846
00:33:23,310 --> 00:33:27,480
<font color="#E5E5E5">ability right like if you put together</font>

847
00:33:24,990 --> 00:33:30,330
<font color="#E5E5E5">your image today with GCC in rpm or</font>

848
00:33:27,480 --> 00:33:31,920
whatever else<font color="#E5E5E5"> and generate the exact</font>

849
00:33:30,330 --> 00:33:33,810
<font color="#E5E5E5">same bytes on</font><font color="#CCCCCC"> discs they will still have</font>

850
00:33:31,920 --> 00:33:35,730
<font color="#E5E5E5">different</font><font color="#CCCCCC"> end times than if you do it</font>

851
00:33:33,810 --> 00:33:37,200
<font color="#CCCCCC">the the tomorrow right like because the</font>

852
00:33:35,730 --> 00:33:40,650
modification times will then be the ones

853
00:33:37,200 --> 00:33:42,600
of tomorrow<font color="#E5E5E5"> so if you do</font><font color="#CCCCCC"> container</font><font color="#E5E5E5"> right</font>

854
00:33:40,650 --> 00:33:45,360
<font color="#CCCCCC">images</font><font color="#E5E5E5"> you generally don't want</font><font color="#CCCCCC"> M times</font>

855
00:33:42,600 --> 00:33:47,100
because they they mean changes that

856
00:33:45,360 --> 00:33:48,929
you're not interested<font color="#CCCCCC"> in if you have a</font>

857
00:33:47,100 --> 00:33:50,790
do a backup<font color="#CCCCCC"> of your home directory you</font>

858
00:33:48,930 --> 00:33:52,440
very much care about<font color="#E5E5E5"> M times they're</font>

859
00:33:50,790 --> 00:33:56,120
actually useful<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> out like</font>

860
00:33:52,440 --> 00:33:59,850
<font color="#CCCCCC">on what</font><font color="#E5E5E5"> day</font><font color="#CCCCCC"> did you work</font><font color="#E5E5E5"> on which</font>

861
00:33:56,120 --> 00:34:01,199
<font color="#E5E5E5">document so and and</font><font color="#CCCCCC"> c8r actually do</font><font color="#E5E5E5"> care</font>

862
00:33:59,850 --> 00:34:04,320
a lot about that<font color="#CCCCCC"> so that you</font><font color="#E5E5E5"> can</font>

863
00:34:01,200 --> 00:34:06,840
explicitly pick the<font color="#E5E5E5"> the metadata that is</font>

864
00:34:04,320 --> 00:34:08,340
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> included in</font><font color="#E5E5E5"> civilization</font><font color="#CCCCCC"> and</font>

865
00:34:06,840 --> 00:34:10,259
that's kind<font color="#CCCCCC"> of for me and requirement</font>

866
00:34:08,340 --> 00:34:13,350
also<font color="#E5E5E5"> for the reproducibility</font><font color="#CCCCCC"> right so</font>

867
00:34:10,260 --> 00:34:14,669
that if you actually<font color="#E5E5E5"> are</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> control or</font>

868
00:34:13,350 --> 00:34:16,770
whether<font color="#E5E5E5"> to store</font><font color="#CCCCCC"> m times whether to</font>

869
00:34:14,668 --> 00:34:20,668
stored user access modes<font color="#CCCCCC"> whether you</font>

870
00:34:16,770 --> 00:34:23,130
user identities like<font color="#E5E5E5"> like shown and sync</font>

871
00:34:20,668 --> 00:34:24,629
like that whether we store ACLs or

872
00:34:23,130 --> 00:34:25,770
extended attributes all<font color="#E5E5E5"> the things only</font>

873
00:34:24,630 --> 00:34:28,260
when<font color="#E5E5E5"> you're in control you can actually</font>

874
00:34:25,770 --> 00:34:29,850
make sense of the reproducibility<font color="#E5E5E5"> there</font>

875
00:34:28,260 --> 00:34:31,890
the metadata that<font color="#E5E5E5"> we store is very</font>

876
00:34:29,850 --> 00:34:33,569
<font color="#CCCCCC">comprehensive I don't know any tool that</font>

877
00:34:31,889 --> 00:34:35,399
goes into that MIDI<font color="#E5E5E5"> tail because we</font>

878
00:34:33,570 --> 00:34:37,530
store all<font color="#E5E5E5"> the weird stuff</font><font color="#CCCCCC"> that we have</font>

879
00:34:35,399 --> 00:34:38,980
nowadays and<font color="#E5E5E5"> Linux like these these file</font>

880
00:34:37,530 --> 00:34:41,500
attributes like the chapters

881
00:34:38,980 --> 00:34:44,500
and I don't<font color="#E5E5E5"> know quote our project IDs</font>

882
00:34:41,500 --> 00:34:50,889
and<font color="#E5E5E5"> all the exotic weirdness</font><font color="#CCCCCC"> that we</font>

883
00:34:44,500 --> 00:34:59,700
have nowadays yeah<font color="#CCCCCC"> I am</font><font color="#E5E5E5"> for the question</font>

884
00:34:50,889 --> 00:35:02,730
at this<font color="#E5E5E5"> point like all of this is about</font>

885
00:34:59,700 --> 00:35:05,950
reproducibility<font color="#E5E5E5"> all about immutability</font>

886
00:35:02,730 --> 00:35:07,089
<font color="#E5E5E5">so that that every axis is validated all</font>

887
00:35:05,950 --> 00:35:08,919
the time through this<font color="#CCCCCC"> and</font><font color="#E5E5E5"> next thing</font>

888
00:35:07,089 --> 00:35:10,960
then that<font color="#CCCCCC"> basically means</font><font color="#E5E5E5"> everything's</font>

889
00:35:08,920 --> 00:35:12,220
read-only<font color="#E5E5E5"> right so if you're looking</font><font color="#CCCCCC"> for</font>

890
00:35:10,960 --> 00:35:14,410
a<font color="#CCCCCC"> general-purpose</font><font color="#E5E5E5"> file system this is</font>

891
00:35:12,220 --> 00:35:16,540
<font color="#E5E5E5">not it this is an archive format this</font><font color="#CCCCCC"> is</font>

892
00:35:14,410 --> 00:35:20,799
a image delivery format and the

893
00:35:16,540 --> 00:35:22,180
cryptography is equal to q1<font color="#CCCCCC"> when you</font>

894
00:35:20,800 --> 00:35:24,190
<font color="#E5E5E5">actually play</font><font color="#CCCCCC"> around this year I think</font>

895
00:35:22,180 --> 00:35:26,799
<font color="#E5E5E5">you'll see a couple of different</font><font color="#CCCCCC"> files</font>

896
00:35:24,190 --> 00:35:29,530
<font color="#E5E5E5">the primary one is CAI the X let's</font><font color="#CCCCCC"> the</font>

897
00:35:26,800 --> 00:35:32,230
index file<font color="#E5E5E5"> is it is as mentioned just</font><font color="#CCCCCC"> a</font>

898
00:35:29,530 --> 00:35:34,450
list<font color="#E5E5E5"> of hashes was the offsets or the</font>

899
00:35:32,230 --> 00:35:36,790
<font color="#CCCCCC">lengths of</font><font color="#E5E5E5"> the individual chunks there's</font>

900
00:35:34,450 --> 00:35:39,368
some saying<font color="#E5E5E5"> CAI be X exactly</font><font color="#CCCCCC"> the same</font>

901
00:35:36,790 --> 00:35:41,680
thing internally<font color="#CCCCCC"> the difference is only</font>

902
00:35:39,369 --> 00:35:43,839
semantically like one is that if you

903
00:35:41,680 --> 00:35:45,578
operate<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the block level the other one</font>

904
00:35:43,839 --> 00:35:48,220
if you operate on the file system level

905
00:35:45,579 --> 00:35:49,780
right<font color="#CCCCCC"> see eight are already mentioned</font>

906
00:35:48,220 --> 00:35:51,189
that<font color="#E5E5E5"> is the pretty much the same thing</font>

907
00:35:49,780 --> 00:35:53,260
as tar<font color="#E5E5E5"> except that it has</font><font color="#CCCCCC"> the</font>

908
00:35:51,190 --> 00:35:54,640
<font color="#E5E5E5">reproducibility</font><font color="#CCCCCC"> thousands</font><font color="#E5E5E5"> of attributes</font>

909
00:35:53,260 --> 00:35:58,420
<font color="#E5E5E5">random access and these kind of things</font>

910
00:35:54,640 --> 00:36:00,609
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then there's a dot</font><font color="#CCCCCC"> C a STR which is</font>

911
00:35:58,420 --> 00:36:02,200
a<font color="#E5E5E5"> chunks</font><font color="#CCCCCC"> toe directory so it's</font><font color="#E5E5E5"> not a</font>

912
00:36:00,609 --> 00:36:03,759
file as the directory and<font color="#CCCCCC"> that's where</font>

913
00:36:02,200 --> 00:36:05,470
if you<font color="#E5E5E5"> actually go in there you'll see a</font>

914
00:36:03,760 --> 00:36:08,470
lot of littles files<font color="#E5E5E5"> all named after</font>

915
00:36:05,470 --> 00:36:10,118
hashes<font color="#CCCCCC"> that if you actually look into</font>

916
00:36:08,470 --> 00:36:11,770
<font color="#E5E5E5">them you see that</font><font color="#CCCCCC"> all that</font><font color="#E5E5E5"> STD</font>

917
00:36:10,119 --> 00:36:14,530
compressed and if you decompress<font color="#E5E5E5"> them</font>

918
00:36:11,770 --> 00:36:16,599
and use open<font color="#E5E5E5"> SSL to carry out the hash</font>

919
00:36:14,530 --> 00:36:19,030
<font color="#E5E5E5">so you'll figure</font><font color="#CCCCCC"> out that yeah</font><font color="#E5E5E5"> they map</font>

920
00:36:16,599 --> 00:36:21,250
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> exactly the file name they're</font>

921
00:36:19,030 --> 00:36:22,480
stored<font color="#CCCCCC"> on them</font><font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> come</font>

922
00:36:21,250 --> 00:36:24,880
<font color="#E5E5E5">into contact with this these are</font><font color="#CCCCCC"> the</font>

923
00:36:22,480 --> 00:36:26,410
four<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> see that a</font>

924
00:36:24,880 --> 00:36:27,579
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> more actually like this but</font>

925
00:36:26,410 --> 00:36:29,710
these are<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ones that actually matter</font>

926
00:36:27,579 --> 00:36:32,770
so doesn't that mean<font color="#CCCCCC"> that when you do</font>

927
00:36:29,710 --> 00:36:36,940
see s in the space of<font color="#E5E5E5"> you</font>

928
00:36:32,770 --> 00:36:39,880
<font color="#CCCCCC">the</font><font color="#E5E5E5"> sign is the theme</font><font color="#CCCCCC"> that when you</font>

929
00:36:36,940 --> 00:36:42,220
think because<font color="#E5E5E5"> you are creating the CiTR</font>

930
00:36:39,880 --> 00:36:46,920
<font color="#E5E5E5">this</font><font color="#CCCCCC"> means that you</font><font color="#E5E5E5"> are your</font><font color="#CCCCCC"> passion go</font>

931
00:36:42,220 --> 00:36:46,919
because you<font color="#E5E5E5"> have to generate all that</font>

932
00:36:47,940 --> 00:36:53,500
<font color="#CCCCCC">so the question is regarding if my</font><font color="#E5E5E5"> local</font>

933
00:36:50,440 --> 00:36:56,410
file system grows<font color="#E5E5E5"> if I do use it so</font><font color="#CCCCCC"> see</font>

934
00:36:53,500 --> 00:36:57,910
<font color="#CCCCCC">I</font><font color="#E5E5E5"> sync and store</font><font color="#CCCCCC"> stuff locally</font><font color="#E5E5E5"> if you</font>

935
00:36:56,410 --> 00:37:00,460
want to then of course you will<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

936
00:36:57,910 --> 00:37:02,290
<font color="#CCCCCC">pay for the local store but it can</font>

937
00:37:00,460 --> 00:37:04,360
<font color="#E5E5E5">actually do the same thing remotely</font>

938
00:37:02,290 --> 00:37:06,640
right now<font color="#E5E5E5"> only through SSH to some other</font>

939
00:37:04,360 --> 00:37:08,020
side<font color="#E5E5E5"> and in that case we store a little</font>

940
00:37:06,640 --> 00:37:10,359
<font color="#E5E5E5">bit of temporary data but that's not</font>

941
00:37:08,020 --> 00:37:12,640
substantial data that's a<font color="#E5E5E5"> little bit so</font>

942
00:37:10,360 --> 00:37:14,650
the idea really is when you<font color="#E5E5E5"> create an</font>

943
00:37:12,640 --> 00:37:16,540
archive like this we<font color="#E5E5E5"> sent to the other</font>

944
00:37:14,650 --> 00:37:18,520
side list of chunks that<font color="#E5E5E5"> we would like</font>

945
00:37:16,540 --> 00:37:20,650
<font color="#CCCCCC">to store there and then the</font><font color="#E5E5E5"> other side</font>

946
00:37:18,520 --> 00:37:22,750
tells us oh I already<font color="#E5E5E5"> have these chunks</font>

947
00:37:20,650 --> 00:37:23,950
but<font color="#CCCCCC"> these ones</font><font color="#E5E5E5"> I still need and then we</font>

948
00:37:22,750 --> 00:37:26,950
<font color="#E5E5E5">sent them the ones that it still needs</font>

949
00:37:23,950 --> 00:37:28,509
so it's relatively efficient there but

950
00:37:26,950 --> 00:37:30,549
then<font color="#CCCCCC"> again</font><font color="#E5E5E5"> like so far it was optimized</font>

951
00:37:28,510 --> 00:37:33,790
about making delivery cheap<font color="#E5E5E5"> not about</font>

952
00:37:30,550 --> 00:37:35,530
<font color="#E5E5E5">creating making a creation cheap right</font>

953
00:37:33,790 --> 00:37:37,600
like not about the archiving<font color="#E5E5E5"> stack but</font>

954
00:37:35,530 --> 00:37:39,790
of the extracting step<font color="#E5E5E5"> this is changing</font>

955
00:37:37,600 --> 00:37:41,618
now as I'm<font color="#E5E5E5"> looking into solving the</font>

956
00:37:39,790 --> 00:37:43,810
<font color="#E5E5E5">backup thing more because in the backup</font>

957
00:37:41,619 --> 00:37:46,420
sing more<font color="#CCCCCC"> suddenly the the leading</font>

958
00:37:43,810 --> 00:37:47,859
<font color="#E5E5E5">archiving sting becomes like the big</font>

959
00:37:46,420 --> 00:37:55,210
<font color="#CCCCCC">problem because</font><font color="#E5E5E5"> it needs to be fast and</font>

960
00:37:47,859 --> 00:37:57,990
<font color="#E5E5E5">things like that probably 10 megawatts</font>

961
00:37:55,210 --> 00:37:57,990
<font color="#E5E5E5">and most of something</font>

962
00:38:01,190 --> 00:38:05,000
and some change

963
00:38:12,369 --> 00:38:16,249
<font color="#E5E5E5">okay so the question</font><font color="#CCCCCC"> was regarding if we</font>

964
00:38:14,630 --> 00:38:18,319
generate<font color="#E5E5E5"> in the next</font><font color="#CCCCCC"> file then</font><font color="#E5E5E5"> the</font>

965
00:38:16,249 --> 00:38:19,730
change is<font color="#E5E5E5"> made on the directory</font><font color="#CCCCCC"> and we</font>

966
00:38:18,319 --> 00:38:21,619
generate another in<font color="#E5E5E5"> that file</font>

967
00:38:19,730 --> 00:38:23,390
do we take benefit of the fact<font color="#CCCCCC"> that we</font>

968
00:38:21,619 --> 00:38:27,829
already<font color="#E5E5E5"> index at once the answer to</font><font color="#CCCCCC"> that</font>

969
00:38:23,390 --> 00:38:29,749
is yes<font color="#E5E5E5"> since yesterday so it's a big</font>

970
00:38:27,829 --> 00:38:32,059
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> like if we if we actually</font><font color="#E5E5E5"> care</font>

971
00:38:29,749 --> 00:38:33,738
about the<font color="#E5E5E5"> backup case right this is what</font>

972
00:38:32,059 --> 00:38:35,989
we need<font color="#E5E5E5"> to optimize</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> right like I</font>

973
00:38:33,739 --> 00:38:37,789
want<font color="#E5E5E5"> to go for high frequency backup so</font>

974
00:38:35,989 --> 00:38:39,499
<font color="#E5E5E5">what I'm really hoping to deliver</font>

975
00:38:37,789 --> 00:38:40,880
eventually is<font color="#E5E5E5"> that we can do your home</font>

976
00:38:39,499 --> 00:38:42,288
directory every five minutes<font color="#E5E5E5"> or so</font><font color="#CCCCCC"> you</font>

977
00:38:40,880 --> 00:38:47,059
do backup and you don't have to pay for

978
00:38:42,289 --> 00:38:49,640
<font color="#E5E5E5">it massive amounts of time</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> UNIX</font>

979
00:38:47,059 --> 00:38:52,099
makes<font color="#CCCCCC"> it really hard because we don't</font>

980
00:38:49,640 --> 00:38:53,569
know what files have changed there is<font color="#CCCCCC"> no</font>

981
00:38:52,099 --> 00:38:54,019
generally<font color="#CCCCCC"> accepted API for</font><font color="#E5E5E5"> doing that</font>

982
00:38:53,569 --> 00:38:56,210
<font color="#E5E5E5">right</font>

983
00:38:54,019 --> 00:38:57,558
but if s is something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> but it</font>

984
00:38:56,210 --> 00:38:59,480
<font color="#E5E5E5">doesn't really work and who use butter</font>

985
00:38:57,559 --> 00:39:02,150
<font color="#CCCCCC">office</font><font color="#E5E5E5"> anyway and the other ones don't</font>

986
00:38:59,480 --> 00:39:03,799
have<font color="#E5E5E5"> that at all so what we actually do</font>

987
00:39:02,150 --> 00:39:05,930
is we<font color="#E5E5E5"> do what get does and what</font>

988
00:39:03,799 --> 00:39:08,390
<font color="#E5E5E5">everybody else does as well we</font><font color="#CCCCCC"> stopped</font>

989
00:39:05,930 --> 00:39:09,618
the whole tree and see what has<font color="#CCCCCC"> actually</font>

990
00:39:08,390 --> 00:39:11,269
changed<font color="#E5E5E5"> we try to be a little bit</font>

991
00:39:09,619 --> 00:39:13,849
smarter<font color="#CCCCCC"> than most people though</font><font color="#E5E5E5"> we use a</font>

992
00:39:11,269 --> 00:39:15,680
file system generation<font color="#CCCCCC"> Connor's which is</font>

993
00:39:13,849 --> 00:39:18,079
a little-known<font color="#E5E5E5"> feature that most file</font>

994
00:39:15,680 --> 00:39:19,399
systems on<font color="#CCCCCC"> Linux and</font><font color="#E5E5E5"> leaf have nobody</font>

995
00:39:18,079 --> 00:39:21,069
knows how precise is actually really

996
00:39:19,400 --> 00:39:23,180
defined but the essence<font color="#E5E5E5"> is that</font>

997
00:39:21,069 --> 00:39:27,200
supposedly<font color="#E5E5E5"> and every change</font><font color="#CCCCCC"> you make</font><font color="#E5E5E5"> to</font>

998
00:39:23,180 --> 00:39:29,598
file their increased in some way and<font color="#CCCCCC"> so</font>

999
00:39:27,200 --> 00:39:31,700
if they<font color="#E5E5E5"> haven't changed then you can use</font>

1000
00:39:29,599 --> 00:39:34,670
<font color="#E5E5E5">that to know that they haven't changed</font>

1001
00:39:31,700 --> 00:39:37,999
<font color="#E5E5E5">right so since yesterday is when my</font>

1002
00:39:34,670 --> 00:39:39,950
colleague emerged my patch that may

1003
00:39:37,999 --> 00:39:41,899
benefit took benefit of that<font color="#E5E5E5"> we have</font>

1004
00:39:39,950 --> 00:39:45,019
this caching thing in place<font color="#E5E5E5"> where</font>

1005
00:39:41,900 --> 00:39:46,849
<font color="#E5E5E5">basically yeah so for the first like in</font>

1006
00:39:45,019 --> 00:39:48,799
the<font color="#E5E5E5"> first iteration</font><font color="#CCCCCC"> we serialize the</font>

1007
00:39:46,849 --> 00:39:50,900
whole thing as I explained but then we

1008
00:39:48,799 --> 00:39:53,180
store<font color="#E5E5E5"> information that last time I</font>

1009
00:39:50,900 --> 00:39:55,369
looked<font color="#E5E5E5"> at this file in this</font><font color="#CCCCCC"> version this</font>

1010
00:39:53,180 --> 00:39:57,828
<font color="#E5E5E5">M time I note and then generation</font>

1011
00:39:55,369 --> 00:40:00,079
counter it<font color="#CCCCCC"> hashed to</font><font color="#E5E5E5"> this thing and by</font>

1012
00:39:57,829 --> 00:40:02,239
the way in the chunk that refers to this

1013
00:40:00,079 --> 00:40:04,369
hash<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> also this in this in this</font>

1014
00:40:02,239 --> 00:40:07,999
<font color="#E5E5E5">in this files was this inode number</font><font color="#CCCCCC"> M</font>

1015
00:40:04,369 --> 00:40:09,739
time blah blah blah and<font color="#CCCCCC"> then I verify</font>

1016
00:40:07,999 --> 00:40:12,200
that if<font color="#E5E5E5"> that's still the</font><font color="#CCCCCC"> case and if</font>

1017
00:40:09,739 --> 00:40:14,359
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> the case then I just</font><font color="#E5E5E5"> use the</font>

1018
00:40:12,200 --> 00:40:16,189
hash and<font color="#E5E5E5"> I can I don't have to actually</font>

1019
00:40:14,359 --> 00:40:17,960
read stuff off disk<font color="#CCCCCC"> I don't actually</font>

1020
00:40:16,190 --> 00:40:20,809
have<font color="#CCCCCC"> to hash it again I don't actually</font>

1021
00:40:17,960 --> 00:40:22,460
have<font color="#CCCCCC"> to compress</font><font color="#E5E5E5"> it again so yes we do</font>

1022
00:40:20,809 --> 00:40:23,250
<font color="#E5E5E5">tech benefit of</font><font color="#CCCCCC"> that now since yesterday</font>

1023
00:40:22,460 --> 00:40:30,990
when<font color="#CCCCCC"> the patch</font><font color="#E5E5E5"> was</font>

1024
00:40:23,250 --> 00:40:32,820
<font color="#E5E5E5">right yes</font><font color="#CCCCCC"> so the question was if I</font>

1025
00:40:30,990 --> 00:40:34,200
looked at the<font color="#CCCCCC"> Bork</font><font color="#E5E5E5"> back up yes like I</font>

1026
00:40:32,820 --> 00:40:36,000
mean a<font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of systems that are like</font>

1027
00:40:34,200 --> 00:40:37,740
this<font color="#E5E5E5"> they all end up the</font><font color="#CCCCCC"> same thing we</font>

1028
00:40:36,000 --> 00:40:40,320
have<font color="#E5E5E5"> nothing in this area like ideally</font>

1029
00:40:37,740 --> 00:40:42,270
if Linux was like a<font color="#E5E5E5"> really good</font>

1030
00:40:40,320 --> 00:40:43,770
operating system we had some better API

1031
00:40:42,270 --> 00:40:46,200
so there's like<font color="#E5E5E5"> for example requisite</font>

1032
00:40:43,770 --> 00:40:47,670
recursive<font color="#CCCCCC"> M time it's a thing</font><font color="#E5E5E5"> that 15</font>

1033
00:40:46,200 --> 00:40:49,710
years ago<font color="#E5E5E5"> people already wanted this and</font>

1034
00:40:47,670 --> 00:40:51,630
still<font color="#E5E5E5"> not there</font><font color="#CCCCCC"> and people want</font><font color="#E5E5E5"> that for</font>

1035
00:40:49,710 --> 00:40:53,700
search engines<font color="#E5E5E5"> people want this for</font>

1036
00:40:51,630 --> 00:40:55,980
backup solutions if it<font color="#E5E5E5"> was there would</font>

1037
00:40:53,700 --> 00:40:57,870
so love to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't</font>

1038
00:40:55,980 --> 00:40:59,730
have recursive<font color="#CCCCCC"> end time we have to</font>

1039
00:40:57,870 --> 00:41:02,339
<font color="#E5E5E5">descend in the entire tree start</font>

1040
00:40:59,730 --> 00:41:03,540
<font color="#E5E5E5">everything and sucks thankfully Linux</font>

1041
00:41:02,340 --> 00:41:04,860
has been optimized<font color="#E5E5E5"> for that thing</font>

1042
00:41:03,540 --> 00:41:06,570
<font color="#E5E5E5">because that's what everybody</font><font color="#CCCCCC"> do does</font>

1043
00:41:04,860 --> 00:41:09,060
right so<font color="#E5E5E5"> that's why get stuff is</font>

1044
00:41:06,570 --> 00:41:11,490
<font color="#E5E5E5">actually pretty fast</font><font color="#CCCCCC"> if it</font><font color="#E5E5E5"> wasn't then</font>

1045
00:41:09,060 --> 00:41:20,850
yeah<font color="#E5E5E5"> people</font><font color="#CCCCCC"> wouldn't be plans of get so</font>

1046
00:41:11,490 --> 00:41:23,279
much so the question was regarding like

1047
00:41:20,850 --> 00:41:25,860
is how are the next files and the<font color="#E5E5E5"> stores</font>

1048
00:41:23,280 --> 00:41:27,600
linked up they aren't the idea<font color="#E5E5E5"> really is</font>

1049
00:41:25,860 --> 00:41:30,990
<font color="#E5E5E5">that the data can</font><font color="#CCCCCC"> come</font><font color="#E5E5E5"> from everywhere</font>

1050
00:41:27,600 --> 00:41:34,290
<font color="#E5E5E5">and you have to tell</font><font color="#CCCCCC"> see I</font><font color="#E5E5E5"> think when</font>

1051
00:41:30,990 --> 00:41:35,939
you invoke it<font color="#CCCCCC"> where which stores</font><font color="#E5E5E5"> itself</font>

1052
00:41:34,290 --> 00:41:38,400
shall<font color="#CCCCCC"> be using</font><font color="#E5E5E5"> it can use any number of</font>

1053
00:41:35,940 --> 00:41:41,190
stores<font color="#E5E5E5"> the idea is even that later on</font>

1054
00:41:38,400 --> 00:41:42,450
<font color="#E5E5E5">like it can use local seeds that means</font>

1055
00:41:41,190 --> 00:41:44,820
like local versions that<font color="#E5E5E5"> you already</font>

1056
00:41:42,450 --> 00:41:47,910
have<font color="#CCCCCC"> to can use stores</font><font color="#E5E5E5"> but ultimately I</font>

1057
00:41:44,820 --> 00:41:49,680
want<font color="#E5E5E5"> to go to some point</font><font color="#CCCCCC"> where like we</font>

1058
00:41:47,910 --> 00:41:52,649
have a multicast protocol that on the

1059
00:41:49,680 --> 00:41:54,720
local<font color="#CCCCCC"> broadcasts domain of your network</font>

1060
00:41:52,650 --> 00:41:56,940
<font color="#CCCCCC">can actually create</font><font color="#E5E5E5"> ask for these these</font>

1061
00:41:54,720 --> 00:41:58,790
blocks as well<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> is basically</font>

1062
00:41:56,940 --> 00:42:00,810
that<font color="#E5E5E5"> if you have this big cloud thingy</font>

1063
00:41:58,790 --> 00:42:02,820
<font color="#E5E5E5">installation where everybody runs every</font>

1064
00:42:00,810 --> 00:42:04,680
node runs the<font color="#E5E5E5"> same operating system that</font>

1065
00:42:02,820 --> 00:42:06,140
instead<font color="#CCCCCC"> of every</font><font color="#E5E5E5"> single node downloading</font>

1066
00:42:04,680 --> 00:42:09,120
the new version of the operating<font color="#E5E5E5"> system</font>

1067
00:42:06,140 --> 00:42:11,700
<font color="#CCCCCC">they pick something download it</font><font color="#E5E5E5"> and then</font>

1068
00:42:09,120 --> 00:42:13,920
for everything they<font color="#E5E5E5"> constantly asked on</font>

1069
00:42:11,700 --> 00:42:16,560
a multicast<font color="#E5E5E5"> for other blocks and</font><font color="#CCCCCC"> there</font>

1070
00:42:13,920 --> 00:42:18,570
would<font color="#E5E5E5"> be perfectly safe even because</font>

1071
00:42:16,560 --> 00:42:20,279
it's all<font color="#E5E5E5"> clear finish Sakura I like if</font>

1072
00:42:18,570 --> 00:42:21,900
somebody gives you data you

1073
00:42:20,280 --> 00:42:23,460
just<font color="#E5E5E5"> calculate the hash figure out snob</font>

1074
00:42:21,900 --> 00:42:24,960
right and throw it away<font color="#E5E5E5"> but the idea</font>

1075
00:42:23,460 --> 00:42:26,280
really is<font color="#E5E5E5"> that I mean the model like</font>

1076
00:42:24,960 --> 00:42:27,630
this<font color="#E5E5E5"> is not only useful for cloud it's</font>

1077
00:42:26,280 --> 00:42:30,570
<font color="#CCCCCC">also for</font><font color="#E5E5E5"> IOT devices right like if you</font>

1078
00:42:27,630 --> 00:42:32,670
have lots<font color="#E5E5E5"> of things like that so yeah</font>

1079
00:42:30,570 --> 00:42:35,010
there's on purpose<font color="#CCCCCC"> no implicit</font>

1080
00:42:32,670 --> 00:42:37,020
<font color="#E5E5E5">connection between the the chunk store</font>

1081
00:42:35,010 --> 00:42:38,700
in the index<font color="#E5E5E5"> because I</font>

1082
00:42:37,020 --> 00:42:57,750
people to enable<font color="#E5E5E5"> to get the chunks from</font>

1083
00:42:38,700 --> 00:42:59,069
whatever<font color="#E5E5E5"> they like</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> and we like</font>

1084
00:42:57,750 --> 00:43:00,600
the question was<font color="#E5E5E5"> regarding what's the</font>

1085
00:42:59,070 --> 00:43:01,950
next step<font color="#CCCCCC"> after adding this multicast</font>

1086
00:43:00,600 --> 00:43:04,350
stuff if we<font color="#E5E5E5"> do something like BitTorrent</font>

1087
00:43:01,950 --> 00:43:06,720
<font color="#CCCCCC">a DHT stuff</font><font color="#E5E5E5"> well I mean it's not you</font>

1088
00:43:04,350 --> 00:43:09,690
know my focus<font color="#E5E5E5"> right now is image</font>

1089
00:43:06,720 --> 00:43:11,339
delivery and backup and for backup I'm

1090
00:43:09,690 --> 00:43:17,580
not even sure how you would use torrents

1091
00:43:11,340 --> 00:43:18,720
like stuff there<font color="#CCCCCC"> but sure yeah</font><font color="#E5E5E5"> I mean</font>

1092
00:43:17,580 --> 00:43:20,670
sure there's lots<font color="#E5E5E5"> of things possible</font>

1093
00:43:18,720 --> 00:43:22,290
<font color="#CCCCCC">right like but we like this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font>

1094
00:43:20,670 --> 00:43:24,150
<font color="#CCCCCC">finished</font><font color="#E5E5E5"> yet</font><font color="#CCCCCC"> not even with</font><font color="#E5E5E5"> the stuff</font>

1095
00:43:22,290 --> 00:43:26,370
<font color="#CCCCCC">that I'm doing and</font><font color="#E5E5E5"> then I have ideas</font>

1096
00:43:24,150 --> 00:43:28,920
about lots of<font color="#CCCCCC"> things but not even the</font>

1097
00:43:26,370 --> 00:43:39,930
multicast thing is<font color="#E5E5E5"> in any way more than</font>

1098
00:43:28,920 --> 00:43:41,400
<font color="#CCCCCC">a thought somewhere so I</font><font color="#E5E5E5"> notify if we</font>

1099
00:43:39,930 --> 00:43:44,040
can use I notify<font color="#E5E5E5"> to get the</font>

1100
00:43:41,400 --> 00:43:46,710
notifications about<font color="#E5E5E5"> changes</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I</font>

1101
00:43:44,040 --> 00:43:48,000
notified it is an awful I feel like<font color="#CCCCCC"> it's</font>

1102
00:43:46,710 --> 00:43:51,180
another one of<font color="#CCCCCC"> those Linux file system</font>

1103
00:43:48,000 --> 00:43:52,980
<font color="#E5E5E5">API</font><font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> sock</font><font color="#CCCCCC"> it's it first of all</font>

1104
00:43:51,180 --> 00:43:56,220
<font color="#CCCCCC">the synchronous and</font><font color="#E5E5E5"> it throws</font><font color="#CCCCCC"> away stuff</font>

1105
00:43:52,980 --> 00:43:58,280
and it was<font color="#E5E5E5"> like it's rows away</font><font color="#CCCCCC"> whence</font>

1106
00:43:56,220 --> 00:44:01,319
like if the<font color="#E5E5E5"> this the if the event queue</font>

1107
00:43:58,280 --> 00:44:02,790
is crowded<font color="#E5E5E5"> and it throws away and if you</font>

1108
00:44:01,320 --> 00:44:05,400
do you're supposed<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> everything</font>

1109
00:44:02,790 --> 00:44:08,009
anyway right like so<font color="#E5E5E5"> then it</font><font color="#CCCCCC"> doesn't do</font>

1110
00:44:05,400 --> 00:44:10,830
offline<font color="#E5E5E5"> changes right so it basically</font>

1111
00:44:08,010 --> 00:44:12,120
means like<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> took the hard disk arm</font>

1112
00:44:10,830 --> 00:44:13,620
<font color="#CCCCCC">pose and some other device made a change</font>

1113
00:44:12,120 --> 00:44:15,509
there you will<font color="#E5E5E5"> never I know if it won't</font>

1114
00:44:13,620 --> 00:44:17,130
<font color="#E5E5E5">tell</font><font color="#CCCCCC"> you about that of course</font><font color="#E5E5E5"> and the</font>

1115
00:44:15,510 --> 00:44:18,570
biggest<font color="#CCCCCC"> problem is it's not recursive</font>

1116
00:44:17,130 --> 00:44:20,010
right like this<font color="#E5E5E5"> is supposed to be for</font>

1117
00:44:18,570 --> 00:44:21,690
for home directories that<font color="#E5E5E5"> have a couple</font>

1118
00:44:20,010 --> 00:44:24,570
<font color="#CCCCCC">of gigabytes</font><font color="#E5E5E5"> of size</font><font color="#CCCCCC"> or terabytes</font>

1119
00:44:21,690 --> 00:44:25,350
whatever else and in deep directories

1120
00:44:24,570 --> 00:44:27,660
and<font color="#CCCCCC"> inotify</font>

1121
00:44:25,350 --> 00:44:30,900
<font color="#E5E5E5">does not work recursively right like</font>

1122
00:44:27,660 --> 00:44:32,310
people try<font color="#E5E5E5"> and then they run out of I</font>

1123
00:44:30,900 --> 00:44:34,170
not handles but it's not designed for

1124
00:44:32,310 --> 00:44:36,360
that it's it's just no it doesn't<font color="#E5E5E5"> work</font>

1125
00:44:34,170 --> 00:44:38,220
<font color="#CCCCCC">and also</font><font color="#E5E5E5"> I really</font><font color="#CCCCCC"> don't want an online</font>

1126
00:44:36,360 --> 00:44:42,180
component<font color="#E5E5E5"> because online component means</font>

1127
00:44:38,220 --> 00:44:43,290
like<font color="#CCCCCC"> it's sucks for for like emmited</font>

1128
00:44:42,180 --> 00:44:45,270
stuff and<font color="#CCCCCC"> things like that right</font><font color="#E5E5E5"> I</font>

1129
00:44:43,290 --> 00:44:46,830
wanted a component<font color="#CCCCCC"> that I look at the</font>

1130
00:44:45,270 --> 00:44:48,600
stuff as it's now and do<font color="#E5E5E5"> the best</font><font color="#CCCCCC"> out of</font>

1131
00:44:46,830 --> 00:44:50,180
it<font color="#CCCCCC"> and then I go away</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

1132
00:44:48,600 --> 00:44:51,440
eventually call me again<font color="#E5E5E5"> and I do the</font>

1133
00:44:50,180 --> 00:44:52,940
thing and<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have to stay</font><font color="#CCCCCC"> around</font>

1134
00:44:51,440 --> 00:44:58,540
and watch<font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> you do because that's</font>

1135
00:44:52,940 --> 00:44:58,540
people anyway that's more question

1136
00:45:10,570 --> 00:45:20,210
where's my slide about this<font color="#CCCCCC"> hey I had</font>

1137
00:45:13,730 --> 00:45:21,800
<font color="#E5E5E5">this log about this</font><font color="#CCCCCC"> oh this is light of</font>

1138
00:45:20,210 --> 00:45:23,810
course<font color="#E5E5E5"> so there's this slide here but</font>

1139
00:45:21,800 --> 00:45:25,880
<font color="#E5E5E5">that's not what you can type and then</font>

1140
00:45:23,810 --> 00:45:29,870
you see like you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the CI index if</font>

1141
00:45:25,880 --> 00:45:31,190
you don't specify store explicitly<font color="#CCCCCC"> you</font>

1142
00:45:29,870 --> 00:45:34,759
<font color="#CCCCCC">see I think you're smart enough to look</font>

1143
00:45:31,190 --> 00:45:36,080
for the store next<font color="#E5E5E5"> to where this is so</font>

1144
00:45:34,760 --> 00:45:39,140
it will<font color="#E5E5E5"> automatically</font><font color="#CCCCCC"> make up the URL</font>

1145
00:45:36,080 --> 00:45:41,390
HTTP example.com<font color="#E5E5E5"> slash default dot CA</font>

1146
00:45:39,140 --> 00:45:42,859
STR and look for the stores there so

1147
00:45:41,390 --> 00:45:44,810
that you have this one thing<font color="#E5E5E5"> and then if</font>

1148
00:45:42,860 --> 00:45:46,070
this just<font color="#E5E5E5"> works if you do this then</font><font color="#CCCCCC"> you</font>

1149
00:45:44,810 --> 00:45:47,120
get<font color="#CCCCCC"> a directory somewhere</font><font color="#E5E5E5"> and then you</font>

1150
00:45:46,070 --> 00:45:48,890
<font color="#E5E5E5">can go</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> it and</font><font color="#CCCCCC"> we'll download</font>

1151
00:45:47,120 --> 00:45:50,089
<font color="#E5E5E5">everything then it's actually</font><font color="#CCCCCC"> kind of</font>

1152
00:45:48,890 --> 00:45:53,210
nice even because<font color="#CCCCCC"> of this is</font>

1153
00:45:50,090 --> 00:45:54,980
progressively but while<font color="#E5E5E5"> you access it</font><font color="#CCCCCC"> I</font>

1154
00:45:53,210 --> 00:45:57,350
could have a prefetch thing in there<font color="#E5E5E5"> but</font>

1155
00:45:54,980 --> 00:45:58,550
while<font color="#E5E5E5"> you access that has pulled those</font>

1156
00:45:57,350 --> 00:46:03,350
with<font color="#E5E5E5"> a higher</font><font color="#CCCCCC"> priority and</font><font color="#E5E5E5"> think like</font>

1157
00:45:58,550 --> 00:46:06,550
<font color="#CCCCCC">that it's well</font><font color="#E5E5E5"> the file names are the</font>

1158
00:46:03,350 --> 00:46:06,549
hashes so<font color="#E5E5E5"> there is nothing</font>

1159
00:46:20,080 --> 00:46:25,460
so so the<font color="#CCCCCC"> question is regarding where</font>

1160
00:46:23,510 --> 00:46:26,900
does the directory<font color="#E5E5E5"> tree</font><font color="#CCCCCC"> information come</font>

1161
00:46:25,460 --> 00:46:29,630
when<font color="#CCCCCC"> you're down when you do</font><font color="#E5E5E5"> something</font>

1162
00:46:26,900 --> 00:46:30,800
like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> basically you know like there</font>

1163
00:46:29,630 --> 00:46:33,770
multiple<font color="#CCCCCC"> layers here right like that's</font>

1164
00:46:30,800 --> 00:46:35,770
<font color="#CCCCCC">the indexing and the indexed thing I I</font>

1165
00:46:33,770 --> 00:46:37,730
have a random access thing<font color="#E5E5E5"> yeah</font>

1166
00:46:35,770 --> 00:46:40,009
interface to<font color="#CCCCCC"> that right</font><font color="#E5E5E5"> like I can</font>

1167
00:46:37,730 --> 00:46:41,330
basically say give me<font color="#CCCCCC"> bite</font><font color="#E5E5E5"> 1 million</font>

1168
00:46:40,010 --> 00:46:43,870
from my stream<font color="#CCCCCC"> and then I have a</font>

1169
00:46:41,330 --> 00:46:45,890
relatively efficient like<font color="#E5E5E5"> it's log n</font>

1170
00:46:43,870 --> 00:46:47,990
algorithm to<font color="#E5E5E5"> figure out in which chunk</font>

1171
00:46:45,890 --> 00:46:49,640
it is and then I<font color="#E5E5E5"> can download that chunk</font>

1172
00:46:47,990 --> 00:46:51,799
from from the internet wherever<font color="#E5E5E5"> I have</font>

1173
00:46:49,640 --> 00:46:55,730
<font color="#E5E5E5">maybe I have it already I</font><font color="#CCCCCC"> don't know</font>

1174
00:46:51,800 --> 00:46:57,890
and then within it<font color="#CCCCCC"> because</font><font color="#E5E5E5"> of random</font>

1175
00:46:55,730 --> 00:47:01,280
access on the upper layer as well<font color="#CCCCCC"> about</font>

1176
00:46:57,890 --> 00:47:03,410
<font color="#CCCCCC">in the Tarlov layer as well I just need</font>

1177
00:47:01,280 --> 00:47:05,900
to like<font color="#E5E5E5"> basically the way how the</font><font color="#CCCCCC"> Attar</font>

1178
00:47:03,410 --> 00:47:07,940
works there<font color="#E5E5E5"> is that it's the fire form</font>

1179
00:47:05,900 --> 00:47:09,620
is supposed to be composable meaning

1180
00:47:07,940 --> 00:47:13,610
that the<font color="#CCCCCC"> seer is</font><font color="#E5E5E5"> ation of a directory</font>

1181
00:47:09,620 --> 00:47:17,450
tree is strictly<font color="#E5E5E5"> the series ation of all</font>

1182
00:47:13,610 --> 00:47:20,270
the stuff within<font color="#CCCCCC"> it concatenated plus</font>

1183
00:47:17,450 --> 00:47:21,890
some header and footer right<font color="#E5E5E5"> so it's</font>

1184
00:47:20,270 --> 00:47:23,270
strictly composable the composability is

1185
00:47:21,890 --> 00:47:24,770
a nice thing if we want to recognize

1186
00:47:23,270 --> 00:47:27,440
stuff but this basically means<font color="#E5E5E5"> that</font>

1187
00:47:24,770 --> 00:47:29,540
<font color="#CCCCCC">they're never pointers from up to inner</font>

1188
00:47:27,440 --> 00:47:32,510
and from inner to<font color="#E5E5E5"> upper to outside if</font>

1189
00:47:29,540 --> 00:47:34,250
you see what I mean<font color="#CCCCCC"> and the random</font>

1190
00:47:32,510 --> 00:47:35,750
access stuff is reached by having at the

1191
00:47:34,250 --> 00:47:39,710
end of every directory<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font>

1192
00:47:35,750 --> 00:47:41,540
like a<font color="#CCCCCC"> bisection table where which we</font>

1193
00:47:39,710 --> 00:47:43,130
use<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> the right file so ultimately</font>

1194
00:47:41,540 --> 00:47:44,779
what happens there<font color="#E5E5E5"> basically is that</font>

1195
00:47:43,130 --> 00:47:47,320
<font color="#E5E5E5">it's a little bit like a file</font><font color="#CCCCCC"> system but</font>

1196
00:47:44,780 --> 00:47:49,700
<font color="#CCCCCC">a weird file system because I actually I</font>

1197
00:47:47,320 --> 00:47:52,760
don't not only<font color="#CCCCCC"> want random access while</font>

1198
00:47:49,700 --> 00:47:55,730
reading I also want like<font color="#CCCCCC"> a serialized</font>

1199
00:47:52,760 --> 00:47:57,950
<font color="#E5E5E5">access efficiency</font><font color="#CCCCCC"> realized access while</font>

1200
00:47:55,730 --> 00:47:59,960
writing<font color="#E5E5E5"> and reading so it's like it's</font>

1201
00:47:57,950 --> 00:48:03,200
<font color="#CCCCCC">like this hybrid</font><font color="#E5E5E5"> of something that is</font>

1202
00:47:59,960 --> 00:48:04,610
random<font color="#E5E5E5"> access but also is streamable but</font>

1203
00:48:03,200 --> 00:48:06,290
because<font color="#CCCCCC"> I streamable</font><font color="#E5E5E5"> functionality in</font>

1204
00:48:04,610 --> 00:48:08,330
tar is actually kind of nice and<font color="#E5E5E5"> I</font>

1205
00:48:06,290 --> 00:48:09,650
thought that would<font color="#CCCCCC"> be nice to keep so</font>

1206
00:48:08,330 --> 00:48:10,819
it's<font color="#E5E5E5"> something like a file</font><font color="#CCCCCC"> system and</font>

1207
00:48:09,650 --> 00:48:12,050
<font color="#E5E5E5">then you</font><font color="#CCCCCC"> have the upper lay on the lower</font>

1208
00:48:10,820 --> 00:48:13,880
level and<font color="#E5E5E5"> the upper layer figures out</font>

1209
00:48:12,050 --> 00:48:15,230
where to look and<font color="#E5E5E5"> the lower level then</font>

1210
00:48:13,880 --> 00:48:17,090
translates that to actual<font color="#E5E5E5"> chunks that</font>

1211
00:48:15,230 --> 00:48:19,130
<font color="#E5E5E5">have to request it through a teepee</font><font color="#CCCCCC"> I</font>

1212
00:48:17,090 --> 00:48:21,950
hope that answers your question

1213
00:48:19,130 --> 00:48:27,710
does that<font color="#CCCCCC"> relevances</font><font color="#E5E5E5"> means that you can</font>

1214
00:48:21,950 --> 00:48:28,640
<font color="#E5E5E5">just pull any part of an image</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> so</font>

1215
00:48:27,710 --> 00:48:30,619
the<font color="#CCCCCC"> question was regarding whether</font>

1216
00:48:28,640 --> 00:48:35,170
<font color="#E5E5E5">random access means that I can part</font>

1217
00:48:30,619 --> 00:48:35,170
download any part of any<font color="#E5E5E5"> image randomly</font>

1218
00:48:37,089 --> 00:48:42,049
so the questions whether you can extract

1219
00:48:39,529 --> 00:48:45,799
<font color="#E5E5E5">parts of the archives random parts</font>

1220
00:48:42,049 --> 00:48:47,509
<font color="#CCCCCC">render sub</font><font color="#E5E5E5"> trees and yes you can I think</font>

1221
00:48:45,799 --> 00:48:50,720
<font color="#CCCCCC">I did not implement that here's our</font><font color="#E5E5E5"> like</font>

1222
00:48:47,509 --> 00:48:52,460
you you can't like but it's not<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it</font>

1223
00:48:50,720 --> 00:48:54,200
wasn't<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> it was too lazy</font>

1224
00:48:52,460 --> 00:48:56,359
there's also<font color="#E5E5E5"> by the way this</font><font color="#CCCCCC"> thing here</font>

1225
00:48:54,200 --> 00:48:58,279
see<font color="#CCCCCC"> anything make def maybe this is the</font>

1226
00:48:56,359 --> 00:49:00,739
same<font color="#E5E5E5"> thing as the mounting but on the</font>

1227
00:48:58,279 --> 00:49:05,180
<font color="#E5E5E5">block layer so as you see this mounts</font>

1228
00:49:00,739 --> 00:49:06,529
<font color="#CCCCCC">EAD acts</font><font color="#E5E5E5"> instead of a</font><font color="#CCCCCC"> CAI DX and then</font><font color="#E5E5E5"> if</font>

1229
00:49:05,180 --> 00:49:09,890
you do this you<font color="#E5E5E5"> basically get a device</font>

1230
00:49:06,529 --> 00:49:12,170
and slash def<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> blocked about like</font>

1231
00:49:09,890 --> 00:49:15,140
any other you can mount it you can look

1232
00:49:12,170 --> 00:49:16,579
at it with<font color="#E5E5E5"> whatever tool you</font><font color="#CCCCCC"> like as you</font>

1233
00:49:15,140 --> 00:49:18,339
access a<font color="#E5E5E5"> little down load stuff in the</font>

1234
00:49:16,579 --> 00:49:23,569
background<font color="#CCCCCC"> it makes it available locally</font>

1235
00:49:18,339 --> 00:49:25,369
<font color="#CCCCCC">kind of cool actually recognize things</font>

1236
00:49:23,569 --> 00:49:27,799
<font color="#E5E5E5">by the way we</font><font color="#CCCCCC"> already mentioned</font><font color="#E5E5E5"> that</font>

1237
00:49:25,369 --> 00:49:29,900
hard links<font color="#E5E5E5"> are pretty cool like you can</font>

1238
00:49:27,799 --> 00:49:32,359
do<font color="#E5E5E5"> that of your multiple</font><font color="#CCCCCC"> trees</font><font color="#E5E5E5"> we also</font>

1239
00:49:29,900 --> 00:49:35,690
do refuelings<font color="#CCCCCC"> I how many</font><font color="#E5E5E5"> minutes do you</font>

1240
00:49:32,359 --> 00:49:38,719
have<font color="#CCCCCC"> five so it does rattling</font><font color="#E5E5E5"> rattling</font>

1241
00:49:35,690 --> 00:49:40,400
so this is new file system<font color="#E5E5E5"> concept like</font>

1242
00:49:38,719 --> 00:49:42,469
butter has had that for<font color="#CCCCCC"> ages and</font><font color="#E5E5E5"> now</font>

1243
00:49:40,400 --> 00:49:44,599
access<font color="#E5E5E5"> is getting that</font><font color="#CCCCCC"> to ref links are</font>

1244
00:49:42,469 --> 00:49:46,069
basically way how you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> have two files</font>

1245
00:49:44,599 --> 00:49:48,319
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> filesystem and they share the</font>

1246
00:49:46,069 --> 00:49:50,269
same<font color="#CCCCCC"> data on</font><font color="#E5E5E5"> disk so</font><font color="#CCCCCC"> that the copies</font>

1247
00:49:48,319 --> 00:49:53,058
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> have don't come at the full</font>

1248
00:49:50,269 --> 00:49:54,738
price of actually being copies<font color="#E5E5E5"> and all</font>

1249
00:49:53,059 --> 00:49:57,079
of<font color="#CCCCCC"> that in a copy-on-write fashion so</font>

1250
00:49:54,739 --> 00:50:01,009
when you write to<font color="#CCCCCC"> one of these two files</font>

1251
00:49:57,079 --> 00:50:03,619
<font color="#E5E5E5">it gets automatically duplicated so that</font>

1252
00:50:01,009 --> 00:50:04,880
they don't<font color="#E5E5E5"> interfere</font><font color="#CCCCCC"> which is massively</font>

1253
00:50:03,619 --> 00:50:07,249
different from hard links because in

1254
00:50:04,880 --> 00:50:09,200
hard links both ways into the file are

1255
00:50:07,249 --> 00:50:10,999
identical and if you change<font color="#E5E5E5"> one than the</font>

1256
00:50:09,200 --> 00:50:13,640
<font color="#E5E5E5">other one</font><font color="#CCCCCC"> changes to the hard link</font>

1257
00:50:10,999 --> 00:50:15,259
<font color="#E5E5E5">things is a is an optional thing because</font>

1258
00:50:13,640 --> 00:50:17,450
it has<font color="#E5E5E5"> these effects</font><font color="#CCCCCC"> basically means</font>

1259
00:50:15,259 --> 00:50:20,029
hard link<font color="#E5E5E5"> if you do the hard link stuff</font>

1260
00:50:17,450 --> 00:50:22,968
then you can't ever write<font color="#CCCCCC"> to the trees</font>

1261
00:50:20,029 --> 00:50:24,559
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just an extract it because you</font>

1262
00:50:22,969 --> 00:50:26,150
will<font color="#E5E5E5"> then</font><font color="#CCCCCC"> also modify the</font><font color="#E5E5E5"> other trees</font>

1263
00:50:24,559 --> 00:50:27,380
<font color="#CCCCCC">that you might have the raffling saying</font>

1264
00:50:26,150 --> 00:50:29,180
is however fully transparent to

1265
00:50:27,380 --> 00:50:31,940
applications because<font color="#CCCCCC"> of this copy</font><font color="#E5E5E5"> and</font>

1266
00:50:29,180 --> 00:50:33,049
write nature that that<font color="#E5E5E5"> it has it's</font>

1267
00:50:31,940 --> 00:50:34,849
actually<font color="#E5E5E5"> really cool this</font><font color="#CCCCCC"> thing</font>

1268
00:50:33,049 --> 00:50:36,859
like the<font color="#E5E5E5"> fact that like I use butter if</font>

1269
00:50:34,849 --> 00:50:38,299
<font color="#CCCCCC">s and I if I extract one of mine</font><font color="#E5E5E5"> images</font>

1270
00:50:36,859 --> 00:50:40,969
<font color="#E5E5E5">and then a different</font><font color="#CCCCCC"> version</font><font color="#E5E5E5"> of my</font>

1271
00:50:38,299 --> 00:50:43,609
images<font color="#E5E5E5"> it's basically the disk space</font>

1272
00:50:40,969 --> 00:50:45,979
usage<font color="#E5E5E5"> is like I mean I don't know 1%</font>

1273
00:50:43,609 --> 00:50:48,380
<font color="#E5E5E5">more I pay for each image</font><font color="#CCCCCC"> version there</font>

1274
00:50:45,979 --> 00:50:52,058
than otherwise<font color="#E5E5E5"> it's exactly identically</font>

1275
00:50:48,380 --> 00:50:54,079
in every way<font color="#CCCCCC"> I don't know about any</font>

1276
00:50:52,059 --> 00:50:57,469
backup systems I can't deliver<font color="#E5E5E5"> anything</font>

1277
00:50:54,079 --> 00:51:01,659
<font color="#E5E5E5">like this by</font><font color="#CCCCCC"> the way but yeah</font><font color="#E5E5E5"> cool stuff</font>

1278
00:50:57,469 --> 00:51:01,659
any questions<font color="#E5E5E5"> otherwise at this point</font>

1279
00:51:09,970 --> 00:51:17,339
<font color="#CCCCCC">a high-tech device which has</font><font color="#E5E5E5"> a tumor</font>

1280
00:51:14,710 --> 00:51:20,340
size of 22

1281
00:51:17,340 --> 00:51:20,340
and

1282
00:51:28,990 --> 00:51:33,020
well<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> question was regarding</font>

1283
00:51:31,520 --> 00:51:34,580
<font color="#E5E5E5">whether this is suitable</font><font color="#CCCCCC"> and very</font>

1284
00:51:33,020 --> 00:51:37,340
<font color="#E5E5E5">constrained systems right like where you</font>

1285
00:51:34,580 --> 00:51:39,799
<font color="#E5E5E5">have</font><font color="#CCCCCC"> very little space and very little</font>

1286
00:51:37,340 --> 00:51:41,210
<font color="#E5E5E5">time right like I don't know this is</font><font color="#CCCCCC"> not</font>

1287
00:51:39,800 --> 00:51:43,490
<font color="#E5E5E5">the world I live in right like</font><font color="#CCCCCC"> I</font>

1288
00:51:41,210 --> 00:51:46,940
<font color="#E5E5E5">generally this is not optimized for</font>

1289
00:51:43,490 --> 00:51:49,459
<font color="#E5E5E5">utter minimalism</font><font color="#CCCCCC"> right this this relies</font>

1290
00:51:46,940 --> 00:51:51,410
on on<font color="#E5E5E5"> open</font><font color="#CCCCCC"> SSL and this kind of things</font>

1291
00:51:49,460 --> 00:51:54,170
<font color="#E5E5E5">and I mean</font><font color="#CCCCCC"> it's not that we pull in</font>

1292
00:51:51,410 --> 00:51:56,359
millions of dependencies but we do pull

1293
00:51:54,170 --> 00:51:59,240
in open SSL at minimum and Libeccio and

1294
00:51:56,360 --> 00:52:01,870
these kind of<font color="#E5E5E5"> things and and the stuff</font>

1295
00:51:59,240 --> 00:52:03,680
<font color="#E5E5E5">that does like it calculates hashes and</font>

1296
00:52:01,870 --> 00:52:05,540
<font color="#E5E5E5">compresses and these kind of things</font>

1297
00:52:03,680 --> 00:52:07,370
<font color="#CCCCCC">that's probably it's not optimized</font><font color="#E5E5E5"> for</font>

1298
00:52:05,540 --> 00:52:08,900
the tiniest bit<font color="#E5E5E5"> that said I'm pretty</font>

1299
00:52:07,370 --> 00:52:10,640
<font color="#E5E5E5">sure it's fine for</font><font color="#CCCCCC"> anything like arm</font>

1300
00:52:08,900 --> 00:52:11,960
like the regular<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> embedded device</font>

1301
00:52:10,640 --> 00:52:13,970
that you find it should be fine for

1302
00:52:11,960 --> 00:52:15,680
<font color="#CCCCCC">Raspberry Pi</font><font color="#E5E5E5"> perfectly but if you</font>

1303
00:52:13,970 --> 00:52:24,580
talking<font color="#E5E5E5"> about microcontrollers</font><font color="#CCCCCC"> now</font>

1304
00:52:15,680 --> 00:52:27,740
forgot that<font color="#E5E5E5"> yeah yeah that's</font><font color="#CCCCCC"> a big thing</font>

1305
00:52:24,580 --> 00:52:28,400
<font color="#CCCCCC">so let me quickly like I got</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> 2</font>

1306
00:52:27,740 --> 00:52:31,520
<font color="#E5E5E5">minutes or</font><font color="#CCCCCC"> something</font>

1307
00:52:28,400 --> 00:52:33,320
<font color="#CCCCCC">three minutes reproducibility matters a</font>

1308
00:52:31,520 --> 00:52:34,670
lot to<font color="#E5E5E5"> me so here's actually because we</font>

1309
00:52:33,320 --> 00:52:36,620
can't see<font color="#E5E5E5"> realize that stuff and</font><font color="#CCCCCC"> because</font>

1310
00:52:34,670 --> 00:52:38,630
it is<font color="#E5E5E5"> so perfect</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> disability there's</font>

1311
00:52:36,620 --> 00:52:40,310
actually these<font color="#E5E5E5"> two commands</font><font color="#CCCCCC"> die just</font><font color="#E5E5E5"> an</font>

1312
00:52:38,630 --> 00:52:41,390
<font color="#CCCCCC">EM tree and if you</font><font color="#E5E5E5"> run those</font><font color="#CCCCCC"> on any</font>

1313
00:52:40,310 --> 00:52:43,730
directory it will<font color="#E5E5E5"> actually calculate</font>

1314
00:52:41,390 --> 00:52:47,480
digest for<font color="#E5E5E5"> you that identifies that</font>

1315
00:52:43,730 --> 00:52:50,090
<font color="#CCCCCC">version</font><font color="#E5E5E5"> of the tree perfectly so what</font>

1316
00:52:47,480 --> 00:52:51,350
this<font color="#CCCCCC"> actually does it</font><font color="#E5E5E5"> CI tar</font><font color="#CCCCCC"> sit-up</font>

1317
00:52:50,090 --> 00:52:53,810
<font color="#E5E5E5">serves the way all the data but</font>

1318
00:52:51,350 --> 00:52:56,810
calculates the<font color="#E5E5E5"> it's awesome over</font><font color="#CCCCCC"> it so</font>

1319
00:52:53,810 --> 00:52:58,310
it's a very<font color="#CCCCCC"> nice way how you can</font><font color="#E5E5E5"> get it</font>

1320
00:52:56,810 --> 00:53:00,290
<font color="#CCCCCC">sha</font><font color="#E5E5E5"> for some directory and</font><font color="#CCCCCC"> you see if</font>

1321
00:52:58,310 --> 00:53:01,670
the directory<font color="#E5E5E5"> management anyway so it's</font>

1322
00:53:00,290 --> 00:53:03,560
completely out<font color="#CCCCCC"> of scope for the rest of</font>

1323
00:53:01,670 --> 00:53:05,300
things<font color="#E5E5E5"> but it's kind of nice to</font><font color="#CCCCCC"> have C I</font>

1324
00:53:03,560 --> 00:53:06,950
think<font color="#CCCCCC"> M tree</font><font color="#E5E5E5"> is similar to this M tree</font>

1325
00:53:05,300 --> 00:53:09,020
<font color="#E5E5E5">is a former that the FreeBSD people came</font>

1326
00:53:06,950 --> 00:53:13,009
up<font color="#CCCCCC"> with it's</font><font color="#E5E5E5"> a manifest tree it</font>

1327
00:53:09,020 --> 00:53:15,230
basically like<font color="#E5E5E5"> the list of files and</font>

1328
00:53:13,010 --> 00:53:18,830
<font color="#E5E5E5">directories that should be there and</font>

1329
00:53:15,230 --> 00:53:20,330
where the contents should have this hash

1330
00:53:18,830 --> 00:53:21,710
and<font color="#E5E5E5"> where the metadata</font><font color="#CCCCCC"> should be this</font>

1331
00:53:20,330 --> 00:53:23,360
<font color="#E5E5E5">and</font><font color="#CCCCCC"> this and this and</font><font color="#E5E5E5"> C I think</font><font color="#CCCCCC"> M tree</font>

1332
00:53:21,710 --> 00:53:26,570
allows you to very efficiently<font color="#CCCCCC"> generate</font>

1333
00:53:23,360 --> 00:53:29,240
the same thing<font color="#E5E5E5"> from a</font><font color="#CCCCCC"> CI index or from</font><font color="#E5E5E5"> a</font>

1334
00:53:26,570 --> 00:53:31,010
raw file system<font color="#CCCCCC"> so I don't know it's</font>

1335
00:53:29,240 --> 00:53:32,238
it's it's it's<font color="#E5E5E5"> kind of useful this stuff</font>

1336
00:53:31,010 --> 00:53:34,039
<font color="#E5E5E5">it's kind of</font>

1337
00:53:32,239 --> 00:53:35,709
the fringes<font color="#E5E5E5"> of what we do it's a side</font>

1338
00:53:34,039 --> 00:53:38,810
<font color="#CCCCCC">effect that we can do this</font><font color="#E5E5E5"> very easily</font>

1339
00:53:35,709 --> 00:53:40,089
<font color="#CCCCCC">but</font><font color="#E5E5E5"> it's interesting to mention still</font>

1340
00:53:38,810 --> 00:53:42,319
[Music]

1341
00:53:40,089 --> 00:53:43,999
<font color="#CCCCCC">seeing can do local operation like</font>

1342
00:53:42,319 --> 00:53:47,058
<font color="#CCCCCC">directed</font><font color="#E5E5E5"> file system we can download</font>

1343
00:53:43,999 --> 00:53:49,819
from FTP HTTP HTTP FTP like the<font color="#E5E5E5"> usual</font>

1344
00:53:47,059 --> 00:53:52,159
<font color="#E5E5E5">set and SFTP it can upload currently</font>

1345
00:53:49,819 --> 00:53:53,749
<font color="#CCCCCC">only through SSH but that's not because</font>

1346
00:53:52,159 --> 00:53:55,819
<font color="#E5E5E5">I didn't want to</font><font color="#CCCCCC"> support that but mostly</font>

1347
00:53:53,749 --> 00:53:58,308
because<font color="#E5E5E5"> I didn't find the time to yet</font>

1348
00:53:55,819 --> 00:54:01,099
<font color="#CCCCCC">the idea is that long and</font><font color="#E5E5E5"> later on maybe</font>

1349
00:53:58,309 --> 00:54:03,589
<font color="#E5E5E5">we get backends for s3 whatever else so</font>

1350
00:54:01,099 --> 00:54:06,259
<font color="#CCCCCC">that you can do a local backup</font><font color="#E5E5E5"> and put</font>

1351
00:54:03,589 --> 00:54:08,209
it on Amazon whatever you like<font color="#CCCCCC"> so this</font>

1352
00:54:06,259 --> 00:54:09,769
interesting does you it get shifting for

1353
00:54:08,209 --> 00:54:13,029
those few people<font color="#E5E5E5"> who use containers</font><font color="#CCCCCC"> with</font>

1354
00:54:09,769 --> 00:54:15,198
<font color="#E5E5E5">use the namespaces they want to go into</font>

1355
00:54:13,029 --> 00:54:16,939
<font color="#E5E5E5">details one other thing that's actually</font>

1356
00:54:15,199 --> 00:54:18,799
<font color="#E5E5E5">kind of nice is like when you operate</font><font color="#CCCCCC"> on</font>

1357
00:54:16,939 --> 00:54:20,058
the block device layer<font color="#E5E5E5"> now</font><font color="#CCCCCC"> usually</font><font color="#E5E5E5"> the</font>

1358
00:54:18,799 --> 00:54:21,439
file systems that<font color="#CCCCCC"> you store your block</font>

1359
00:54:20,059 --> 00:54:23,299
<font color="#E5E5E5">devices are way smaller than the block</font>

1360
00:54:21,439 --> 00:54:25,459
<font color="#CCCCCC">device</font><font color="#E5E5E5"> themselves like for</font><font color="#CCCCCC"> example your</font>

1361
00:54:23,299 --> 00:54:27,199
squash<font color="#E5E5E5"> FS and it's compressed but the</font>

1362
00:54:25,459 --> 00:54:28,788
petitioner you put it in<font color="#E5E5E5"> usually you</font>

1363
00:54:27,199 --> 00:54:30,019
have at<font color="#E5E5E5"> least twice the size because you</font>

1364
00:54:28,789 --> 00:54:32,629
want<font color="#CCCCCC"> to have some</font><font color="#E5E5E5"> room for upgrades it's</font>

1365
00:54:30,019 --> 00:54:34,788
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this is annoying for</font>

1366
00:54:32,629 --> 00:54:37,219
<font color="#E5E5E5">sync like this right like because if you</font>

1367
00:54:34,789 --> 00:54:39,079
like depending<font color="#CCCCCC"> on big the SD card or</font>

1368
00:54:37,219 --> 00:54:41,119
whatever<font color="#CCCCCC"> is it is you have any a MIDI</font>

1369
00:54:39,079 --> 00:54:42,619
device is you might end up with

1370
00:54:41,119 --> 00:54:43,669
completely<font color="#E5E5E5"> different partitions right</font>

1371
00:54:42,619 --> 00:54:45,109
like<font color="#E5E5E5"> there because there might be</font>

1372
00:54:43,669 --> 00:54:46,399
different amounts<font color="#CCCCCC"> of space behind that</font>

1373
00:54:45,109 --> 00:54:49,069
in the space might not be initialized

1374
00:54:46,399 --> 00:54:50,509
<font color="#E5E5E5">made might be who</font><font color="#CCCCCC"> knows anyway I see I</font>

1375
00:54:49,069 --> 00:54:52,759
<font color="#CCCCCC">think it's relatively</font><font color="#E5E5E5"> smart actually can</font>

1376
00:54:50,509 --> 00:54:55,039
read the size from the<font color="#E5E5E5"> file</font><font color="#CCCCCC"> system so it</font>

1377
00:54:52,759 --> 00:54:56,719
has a minimal power for a couple<font color="#CCCCCC"> of</font>

1378
00:54:55,039 --> 00:54:58,129
important<font color="#E5E5E5"> file system headers and</font>

1379
00:54:56,719 --> 00:55:01,609
figures<font color="#E5E5E5"> out the actual size of</font><font color="#CCCCCC"> the file</font>

1380
00:54:58,129 --> 00:55:03,379
system<font color="#E5E5E5"> so it can do stuff</font><font color="#CCCCCC"> so the last</font>

1381
00:55:01,609 --> 00:55:05,719
bit<font color="#E5E5E5"> is</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> future and that's the</font>

1382
00:55:03,379 --> 00:55:07,609
<font color="#E5E5E5">encryption stuff so over Christmas I</font>

1383
00:55:05,719 --> 00:55:11,929
actually sat down with<font color="#E5E5E5"> my brother who's</font>

1384
00:55:07,609 --> 00:55:14,869
a crypto postdoc about figuring<font color="#E5E5E5"> out how</font>

1385
00:55:11,929 --> 00:55:16,549
we do the cryptography so he'll get a

1386
00:55:14,869 --> 00:55:19,459
paper out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it and I'll get the crypto</font>

1387
00:55:16,549 --> 00:55:21,979
system that will hopefully convince

1388
00:55:19,459 --> 00:55:23,118
<font color="#E5E5E5">people enough about the idea yes there's</font>

1389
00:55:21,979 --> 00:55:25,788
gonna be crypto and<font color="#E5E5E5"> it's gonna be strong</font>

1390
00:55:23,119 --> 00:55:26,869
crypto and<font color="#E5E5E5"> it's gonna be the idea is</font>

1391
00:55:25,789 --> 00:55:28,159
basically<font color="#E5E5E5"> I want to go for this model</font>

1392
00:55:26,869 --> 00:55:30,079
<font color="#E5E5E5">that</font><font color="#CCCCCC"> people use it for the home</font>

1393
00:55:28,159 --> 00:55:31,909
directory<font color="#E5E5E5"> they can store it on service</font>

1394
00:55:30,079 --> 00:55:33,619
<font color="#E5E5E5">that they don't have to trust and those</font>

1395
00:55:31,909 --> 00:55:35,649
servers don't<font color="#E5E5E5"> know what they're storing</font>

1396
00:55:33,619 --> 00:55:39,229
<font color="#E5E5E5">and they have no way to figure it</font><font color="#CCCCCC"> out</font>

1397
00:55:35,649 --> 00:55:40,489
and yeah<font color="#E5E5E5"> the</font><font color="#CCCCCC"> informations all</font><font color="#E5E5E5"> available</font>

1398
00:55:39,229 --> 00:55:42,919
<font color="#E5E5E5">on the client-side</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> will still</font>

1399
00:55:40,489 --> 00:55:45,349
duplicate at least<font color="#CCCCCC"> between you but</font>

1400
00:55:42,920 --> 00:55:47,900
she also<font color="#E5E5E5"> with others anyway</font><font color="#CCCCCC"> no time</font>

1401
00:55:45,349 --> 00:55:49,930
<font color="#CCCCCC">anymore right but one question one</font>

1402
00:55:47,900 --> 00:55:49,930
question

1403
00:55:54,970 --> 00:55:59,180
yeah the<font color="#CCCCCC"> question was regarding what</font>

1404
00:55:57,290 --> 00:56:01,058
about<font color="#E5E5E5"> seven restoring fancy file</font>

1405
00:55:59,180 --> 00:56:04,700
metadata like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> cylindrical as mentioned</font>

1406
00:56:01,059 --> 00:56:06,770
metadata<font color="#E5E5E5"> control is important so if you</font>

1407
00:56:04,700 --> 00:56:12,078
look at this there's actually<font color="#E5E5E5"> have this</font>

1408
00:56:06,770 --> 00:56:14,030
one slice here slide here<font color="#CCCCCC"> metadata</font>

1409
00:56:12,079 --> 00:56:15,589
controls and like you have these<font color="#CCCCCC"> dashed</font>

1410
00:56:14,030 --> 00:56:17,900
<font color="#CCCCCC">at</font><font color="#E5E5E5"> with and that's just was out things</font>

1411
00:56:15,589 --> 00:56:19,759
<font color="#E5E5E5">and on these arguments you list</font>

1412
00:56:17,900 --> 00:56:21,559
explicitly the metadata<font color="#E5E5E5"> you want to</font>

1413
00:56:19,760 --> 00:56:24,859
store the metadata<font color="#E5E5E5"> you wouldn't want a</font>

1414
00:56:21,559 --> 00:56:26,809
store<font color="#CCCCCC"> so and as a ton lot of metadata</font>

1415
00:56:24,859 --> 00:56:29,299
<font color="#E5E5E5">that is as a Linux label so extended</font>

1416
00:56:26,809 --> 00:56:31,520
attribute that protocol project quota

1417
00:56:29,299 --> 00:56:34,160
there's you Eddie's<font color="#E5E5E5"> whatever you like</font>

1418
00:56:31,520 --> 00:56:36,170
and<font color="#CCCCCC"> then you depending on a use case</font><font color="#E5E5E5"> you</font>

1419
00:56:34,160 --> 00:56:38,058
say which ones you<font color="#E5E5E5"> want and which ones</font>

1420
00:56:36,170 --> 00:56:39,740
you<font color="#E5E5E5"> don't want right and</font><font color="#CCCCCC"> like for the</font>

1421
00:56:38,059 --> 00:56:41,470
home directory backup thing you would

1422
00:56:39,740 --> 00:56:43,399
probably say I'm not<font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in user</font>

1423
00:56:41,470 --> 00:56:45,169
identity because the stuff is owned<font color="#CCCCCC"> by</font>

1424
00:56:43,400 --> 00:56:48,109
you anyway<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you do want empty at</font>

1425
00:56:45,170 --> 00:56:50,930
times for<font color="#CCCCCC"> IOT Singh you say oh I care</font>

1426
00:56:48,109 --> 00:56:53,000
about the ownership file<font color="#E5E5E5"> ownership but I</font>

1427
00:56:50,930 --> 00:56:55,640
do<font color="#E5E5E5"> not care about the EM trees so you</font>

1428
00:56:53,000 --> 00:56:58,040
pick<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> big specifically what you want</font>

1429
00:56:55,640 --> 00:57:00,859
<font color="#E5E5E5">and I think they're about</font><font color="#CCCCCC"> like forty so</font>

1430
00:56:58,040 --> 00:57:02,990
different bits that you<font color="#E5E5E5"> can pick anyway</font>

1431
00:57:00,859 --> 00:57:05,299
I think<font color="#E5E5E5"> that's my time thank you</font><font color="#CCCCCC"> very</font>

1432
00:57:02,990 --> 00:57:07,009
<font color="#E5E5E5">much if you have any questions ask them</font>

1433
00:57:05,299 --> 00:57:10,160
very<font color="#E5E5E5"> soon because I'm heading off to the</font>

1434
00:57:07,010 --> 00:57:11,540
<font color="#E5E5E5">airport and yeah unfortunately</font><font color="#CCCCCC"> he</font>

1435
00:57:10,160 --> 00:57:13,370
couldn't see<font color="#E5E5E5"> the other talk which I</font>

1436
00:57:11,540 --> 00:57:22,610
would really<font color="#E5E5E5"> have loved to see</font>

1437
00:57:13,370 --> 00:57:22,609
[Applause]

