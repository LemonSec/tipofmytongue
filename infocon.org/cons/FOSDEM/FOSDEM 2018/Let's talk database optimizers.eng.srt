1
00:00:05,470 --> 00:00:10,370
okay so let's get started thank you

2
00:00:08,870 --> 00:00:13,340
everybody for coming<font color="#CCCCCC"> my name is</font><font color="#E5E5E5"> Vicenta</font>

3
00:00:10,370 --> 00:00:15,889
<font color="#CCCCCC">I am a software engineer for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> MRED</font><font color="#E5E5E5"> B</font>

4
00:00:13,340 --> 00:00:17,869
<font color="#CCCCCC">foundation</font><font color="#E5E5E5"> and today I'm going to give</font>

5
00:00:15,889 --> 00:00:20,660
you a brief overview<font color="#E5E5E5"> of the new</font>

6
00:00:17,869 --> 00:00:23,840
developments in optimizers we've already

7
00:00:20,660 --> 00:00:25,820
heard<font color="#CCCCCC"> oysters talk about histograms</font><font color="#E5E5E5"> so</font>

8
00:00:23,840 --> 00:00:28,509
that's something that<font color="#CCCCCC"> Murray DB has in a</font>

9
00:00:25,820 --> 00:00:30,710
different format in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 10-1</font><font color="#E5E5E5"> and onwards</font>

10
00:00:28,510 --> 00:00:35,180
<font color="#CCCCCC">and</font><font color="#E5E5E5"> now we're going to compare a few</font>

11
00:00:30,710 --> 00:00:36,589
other<font color="#E5E5E5"> things that optimizers can do so</font>

12
00:00:35,180 --> 00:00:39,440
first of<font color="#E5E5E5"> all what is the goal</font><font color="#CCCCCC"> of the</font>

13
00:00:36,589 --> 00:00:42,290
query optimizer<font color="#CCCCCC"> so we want to get given</font>

14
00:00:39,440 --> 00:00:45,500
<font color="#E5E5E5">a certain sequel query the fastest time</font>

15
00:00:42,290 --> 00:00:47,570
possible when executing it<font color="#E5E5E5"> and we have</font>

16
00:00:45,500 --> 00:00:49,400
different<font color="#CCCCCC"> tools to</font><font color="#E5E5E5"> do that we can choose</font>

17
00:00:47,570 --> 00:00:51,979
<font color="#CCCCCC">to either</font><font color="#E5E5E5"> cache something some data</font>

18
00:00:49,400 --> 00:00:56,150
<font color="#E5E5E5">before</font><font color="#CCCCCC"> we actually compute the full</font>

19
00:00:51,979 --> 00:00:59,479
result we<font color="#E5E5E5"> can do some index lookups and</font>

20
00:00:56,150 --> 00:01:02,000
get your that<font color="#E5E5E5"> data faster this way or</font><font color="#CCCCCC"> we</font>

21
00:00:59,479 --> 00:01:03,920
can<font color="#E5E5E5"> try to rewrite your query in a more</font>

22
00:01:02,000 --> 00:01:08,990
efficient<font color="#CCCCCC"> manner that we can query it</font>

23
00:01:03,920 --> 00:01:11,240
faster that so now<font color="#CCCCCC"> problem is the number</font>

24
00:01:08,990 --> 00:01:14,360
<font color="#CCCCCC">of</font><font color="#E5E5E5"> possible plans grows exponentially</font>

25
00:01:11,240 --> 00:01:16,699
<font color="#E5E5E5">with the number of tables it's actually</font>

26
00:01:14,360 --> 00:01:20,570
<font color="#E5E5E5">a factorial number of</font><font color="#CCCCCC"> tables but let's</font>

27
00:01:16,700 --> 00:01:22,850
say<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> exponential and in a</font>

28
00:01:20,570 --> 00:01:25,190
<font color="#CCCCCC">perfect world the query optimizer</font><font color="#E5E5E5"> should</font>

29
00:01:22,850 --> 00:01:26,990
be able<font color="#E5E5E5"> to give you the best result all</font>

30
00:01:25,190 --> 00:01:29,509
<font color="#E5E5E5">the time unfortunately</font><font color="#CCCCCC"> that's not the</font>

31
00:01:26,990 --> 00:01:32,060
<font color="#CCCCCC">case</font><font color="#E5E5E5"> for many queries it does happen</font><font color="#CCCCCC"> but</font>

32
00:01:29,510 --> 00:01:35,330
there are certain instances<font color="#E5E5E5"> where it</font>

33
00:01:32,060 --> 00:01:37,630
works<font color="#E5E5E5"> quite badly we're not going to be</font>

34
00:01:35,330 --> 00:01:40,130
too<font color="#CCCCCC"> concerned</font><font color="#E5E5E5"> about those for now but</font>

35
00:01:37,630 --> 00:01:42,500
any<font color="#CCCCCC"> optimization</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> do we try to</font>

36
00:01:40,130 --> 00:01:48,280
reduce<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> possible queries</font>

37
00:01:42,500 --> 00:01:50,630
which behave poorly so in<font color="#CCCCCC"> order to</font>

38
00:01:48,280 --> 00:01:53,840
explain what kind<font color="#CCCCCC"> of optimizations we're</font>

39
00:01:50,630 --> 00:01:56,899
doing in recent developments<font color="#CCCCCC"> I need a</font>

40
00:01:53,840 --> 00:02:00,229
bit<font color="#E5E5E5"> of background</font><font color="#CCCCCC"> so first of all</font><font color="#E5E5E5"> a</font>

41
00:01:56,900 --> 00:02:02,210
<font color="#E5E5E5">derived table in my skill is any sort</font><font color="#CCCCCC"> of</font>

42
00:02:00,229 --> 00:02:05,210
<font color="#CCCCCC">table which you can</font><font color="#E5E5E5"> find as part of a</font>

43
00:02:02,210 --> 00:02:07,100
sub-query in the from clause<font color="#E5E5E5"> whenever I</font>

44
00:02:05,210 --> 00:02:09,649
say<font color="#CCCCCC"> they're derived table it's either</font>

45
00:02:07,100 --> 00:02:11,120
<font color="#E5E5E5">this</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> a view as part</font><font color="#CCCCCC"> of the from</font>

46
00:02:09,649 --> 00:02:17,690
<font color="#E5E5E5">clause</font><font color="#CCCCCC"> so a view is</font><font color="#E5E5E5"> basically the same</font>

47
00:02:11,120 --> 00:02:18,410
thing<font color="#CCCCCC"> here's our query example we want</font>

48
00:02:17,690 --> 00:02:24,050
to<font color="#E5E5E5"> get</font>

49
00:02:18,410 --> 00:02:26,930
<font color="#E5E5E5">all our customers which had orders</font><font color="#CCCCCC"> with</font>

50
00:02:24,050 --> 00:02:30,920
which had large orders so greater<font color="#CCCCCC"> than 1</font>

51
00:02:26,930 --> 00:02:32,780
million entries in their order there's

52
00:02:30,920 --> 00:02:35,899
<font color="#E5E5E5">only a few customers so that's why</font><font color="#CCCCCC"> there</font>

53
00:02:32,780 --> 00:02:40,930
<font color="#CCCCCC">are VIP</font><font color="#E5E5E5"> customers and the orders have to</font>

54
00:02:35,900 --> 00:02:40,930
be from<font color="#E5E5E5"> October start to end 2017</font>

55
00:02:41,360 --> 00:02:48,710
how would you execute this in a naive

56
00:02:44,870 --> 00:02:52,190
fashion well we first<font color="#E5E5E5"> compute the result</font>

57
00:02:48,710 --> 00:02:54,860
in<font color="#E5E5E5"> this table here</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is October</font>

58
00:02:52,190 --> 00:02:58,880
orders<font color="#CCCCCC"> we just do a</font><font color="#E5E5E5"> filter on the orders</font>

59
00:02:54,860 --> 00:03:02,510
<font color="#E5E5E5">on the date and then we try</font><font color="#CCCCCC"> to join this</font>

60
00:02:58,880 --> 00:03:04,579
table with VIP customers using the join

61
00:03:02,510 --> 00:03:07,000
condition<font color="#E5E5E5"> the amount must be greater</font>

62
00:03:04,580 --> 00:03:09,380
than<font color="#E5E5E5"> 1 million so here's the set of</font>

63
00:03:07,000 --> 00:03:11,690
<font color="#CCCCCC">October orders a head-mounted a 1</font>

64
00:03:09,380 --> 00:03:14,510
million<font color="#CCCCCC"> that part will enter the join</font>

65
00:03:11,690 --> 00:03:19,340
with the VIP<font color="#E5E5E5"> customers and you get your</font>

66
00:03:14,510 --> 00:03:21,290
result<font color="#CCCCCC"> however we can do better than</font>

67
00:03:19,340 --> 00:03:24,020
<font color="#E5E5E5">that and this is something</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> my skill</font>

68
00:03:21,290 --> 00:03:27,109
and<font color="#CCCCCC"> Marie DB and obviously percona says</font>

69
00:03:24,020 --> 00:03:30,160
<font color="#CCCCCC">there based on my skill also</font><font color="#E5E5E5"> do we</font>

70
00:03:27,110 --> 00:03:34,610
rewrite the<font color="#CCCCCC"> spiri because we can and</font>

71
00:03:30,160 --> 00:03:37,010
this data<font color="#E5E5E5"> this condition here it's only</font>

72
00:03:34,610 --> 00:03:39,140
based<font color="#E5E5E5"> on orders and if we move this</font>

73
00:03:37,010 --> 00:03:42,350
condition<font color="#E5E5E5"> outside of the sub-query and</font>

74
00:03:39,140 --> 00:03:44,329
just<font color="#E5E5E5"> replace the custom table with the</font>

75
00:03:42,350 --> 00:03:48,049
orders table we're going to get<font color="#E5E5E5"> this</font>

76
00:03:44,330 --> 00:03:49,670
query so now the optimizer has a more

77
00:03:48,050 --> 00:03:50,959
general view<font color="#E5E5E5"> of how we actually want to</font>

78
00:03:49,670 --> 00:03:54,559
query<font color="#E5E5E5"> the data we</font><font color="#CCCCCC"> have all the</font>

79
00:03:50,959 --> 00:03:58,400
<font color="#CCCCCC">conditions in one place and this leads</font>

80
00:03:54,560 --> 00:03:59,810
to<font color="#E5E5E5"> a better query plan</font><font color="#CCCCCC"> if you do explain</font>

81
00:03:58,400 --> 00:04:02,000
<font color="#E5E5E5">you will see that we only</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> two</font>

82
00:03:59,810 --> 00:04:04,430
tables visible VIP customers<font color="#CCCCCC"> in</font><font color="#E5E5E5"> orders</font>

83
00:04:02,000 --> 00:04:08,120
we don't see October<font color="#CCCCCC"> orders anywhere in</font>

84
00:04:04,430 --> 00:04:12,680
the explain plan<font color="#E5E5E5"> and the execution goes</font>

85
00:04:08,120 --> 00:04:16,030
as follows<font color="#CCCCCC"> we get the orders then we get</font>

86
00:04:12,680 --> 00:04:18,108
the<font color="#CCCCCC"> October orders</font><font color="#E5E5E5"> and the amount</font>

87
00:04:16,029 --> 00:04:20,208
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> an intersection happening so</font>

88
00:04:18,108 --> 00:04:21,950
there's not<font color="#E5E5E5"> there are orders that</font><font color="#CCCCCC"> are</font>

89
00:04:20,209 --> 00:04:25,010
<font color="#E5E5E5">not in October which have greater than</font><font color="#CCCCCC"> 1</font>

90
00:04:21,950 --> 00:04:26,900
million amount<font color="#E5E5E5"> only the intersection of</font>

91
00:04:25,010 --> 00:04:29,659
all these conditions<font color="#E5E5E5"> will enter the</font><font color="#CCCCCC"> join</font>

92
00:04:26,900 --> 00:04:31,450
operation<font color="#E5E5E5"> and then this gets joined with</font>

93
00:04:29,660 --> 00:04:34,520
VIP customers

94
00:04:31,450 --> 00:04:37,070
so instead of first computing<font color="#E5E5E5"> everything</font>

95
00:04:34,520 --> 00:04:39,460
here we just do one table scan<font color="#E5E5E5"> over</font>

96
00:04:37,070 --> 00:04:41,659
orders and one over VIP customers

97
00:04:39,460 --> 00:04:43,190
there's there are some tricks to<font color="#E5E5E5"> buffer</font>

98
00:04:41,660 --> 00:04:47,840
results but I'm not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go into too</font>

99
00:04:43,190 --> 00:04:49,700
many details details<font color="#E5E5E5"> here</font><font color="#CCCCCC"> so conclusion</font>

100
00:04:47,840 --> 00:04:53,359
is<font color="#CCCCCC"> that merging is good</font><font color="#E5E5E5"> it simplifies</font>

101
00:04:49,700 --> 00:04:57,039
<font color="#CCCCCC">the query</font><font color="#E5E5E5"> and as I</font><font color="#CCCCCC"> said it works</font><font color="#E5E5E5"> in all</font>

102
00:04:53,360 --> 00:04:59,930
stable<font color="#E5E5E5"> versions of mysql or mariadb</font>

103
00:04:57,040 --> 00:05:02,540
<font color="#E5E5E5">however there's a</font><font color="#CCCCCC"> problem when we</font><font color="#E5E5E5"> when</font>

104
00:04:59,930 --> 00:05:04,430
aggregation comes into play<font color="#E5E5E5"> we can't use</font>

105
00:05:02,540 --> 00:05:05,870
<font color="#CCCCCC">it when aggregation happens because</font><font color="#E5E5E5"> if</font>

106
00:05:04,430 --> 00:05:07,750
you<font color="#CCCCCC"> rewrite the query which has an</font>

107
00:05:05,870 --> 00:05:12,890
aggregate<font color="#CCCCCC"> function in the sub query</font>

108
00:05:07,750 --> 00:05:17,000
results are not<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you expected so</font>

109
00:05:12,890 --> 00:05:20,020
here's an example we want the<font color="#CCCCCC"> october</font>

110
00:05:17,000 --> 00:05:23,560
totals<font color="#E5E5E5"> so all the the number of orders</font>

111
00:05:20,020 --> 00:05:29,120
<font color="#CCCCCC">the number of items ordered</font><font color="#E5E5E5"> per customer</font>

112
00:05:23,560 --> 00:05:33,800
<font color="#E5E5E5">in october if we were to join this query</font>

113
00:05:29,120 --> 00:05:36,920
inside the main one<font color="#CCCCCC"> you would actually</font>

114
00:05:33,800 --> 00:05:38,030
<font color="#E5E5E5">start aggregating stuff in this one and</font>

115
00:05:36,920 --> 00:05:41,060
<font color="#E5E5E5">you don't want to do that you actually</font>

116
00:05:38,030 --> 00:05:44,510
<font color="#E5E5E5">want the totals for one customer</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

117
00:05:41,060 --> 00:05:48,710
case which is<font color="#CCCCCC"> customer ID equal</font><font color="#E5E5E5"> one but</font>

118
00:05:44,510 --> 00:05:54,020
we have<font color="#CCCCCC"> a group</font><font color="#E5E5E5"> by customer ID so</font><font color="#CCCCCC"> we can</font>

119
00:05:48,710 --> 00:05:55,159
make<font color="#E5E5E5"> use of this here all right so we</font>

120
00:05:54,020 --> 00:05:57,049
<font color="#E5E5E5">have lots of customers</font><font color="#CCCCCC"> we don't want to</font>

121
00:05:55,160 --> 00:06:00,830
get all of all the totals<font color="#CCCCCC"> just for one</font>

122
00:05:57,050 --> 00:06:03,710
customer<font color="#E5E5E5"> so you make use of this group</font>

123
00:06:00,830 --> 00:06:07,250
by column here<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> identify this</font>

124
00:06:03,710 --> 00:06:08,539
condition customer ID and we push<font color="#CCCCCC"> this</font>

125
00:06:07,250 --> 00:06:10,760
condition all the<font color="#CCCCCC"> way to the where</font>

126
00:06:08,540 --> 00:06:12,290
<font color="#E5E5E5">clause here because we have this group</font>

127
00:06:10,760 --> 00:06:15,530
by column here

128
00:06:12,290 --> 00:06:21,590
<font color="#E5E5E5">so now when aggregated we only aggregate</font>

129
00:06:15,530 --> 00:06:24,409
<font color="#E5E5E5">one customer so we get our orders we get</font>

130
00:06:21,590 --> 00:06:26,659
<font color="#E5E5E5">only customer one orders and then we sum</font>

131
00:06:24,410 --> 00:06:28,400
those up<font color="#CCCCCC"> so instead of doing aggregation</font>

132
00:06:26,660 --> 00:06:33,350
over the full data set<font color="#E5E5E5"> we just aggregate</font>

133
00:06:28,400 --> 00:06:38,810
<font color="#E5E5E5">one customer this optimization is</font>

134
00:06:33,350 --> 00:06:40,670
available in<font color="#CCCCCC"> MariaDB</font><font color="#E5E5E5"> 1010 - and this</font>

135
00:06:38,810 --> 00:06:42,780
tactic also works for window functions

136
00:06:40,670 --> 00:06:44,340
<font color="#E5E5E5">if you are here from the start</font>

137
00:06:42,780 --> 00:06:47,179
if you've seen<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have window</font>

138
00:06:44,340 --> 00:06:49,619
functions in<font color="#CCCCCC"> more ddb 10th 10</font><font color="#E5E5E5"> - and</font>

139
00:06:47,180 --> 00:06:54,690
there is also window functions coming in

140
00:06:49,620 --> 00:06:56,330
<font color="#E5E5E5">MySQL</font><font color="#CCCCCC"> 8 0 so we</font><font color="#E5E5E5"> can push the same</font>

141
00:06:54,690 --> 00:06:59,610
condition if you have a window function

142
00:06:56,330 --> 00:07:03,240
<font color="#E5E5E5">with a partition by</font><font color="#CCCCCC"> clause here</font><font color="#E5E5E5"> so</font>

143
00:06:59,610 --> 00:07:05,910
partition by means that you compute this

144
00:07:03,240 --> 00:07:08,220
rank sequence for each customer<font color="#E5E5E5"> you can</font>

145
00:07:05,910 --> 00:07:11,760
see here customer ID equals<font color="#CCCCCC"> 1 has orders</font>

146
00:07:08,220 --> 00:07:14,250
1 2 3 or the ranks<font color="#E5E5E5"> same for customer 2</font>

147
00:07:11,760 --> 00:07:17,219
and so<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and we don't</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to have to</font>

148
00:07:14,250 --> 00:07:19,890
compute this<font color="#E5E5E5"> rank column for all of the</font>

149
00:07:17,220 --> 00:07:23,990
table if we're only interested in

150
00:07:19,890 --> 00:07:28,890
customers and<font color="#E5E5E5"> customer ones top 3 orders</font>

151
00:07:23,990 --> 00:07:30,660
so we only want<font color="#E5E5E5"> this here and because we</font>

152
00:07:28,890 --> 00:07:32,490
have this equality<font color="#E5E5E5"> condition here and</font>

153
00:07:30,660 --> 00:07:33,900
there is<font color="#E5E5E5"> this partition by</font><font color="#CCCCCC"> clause here</font>

154
00:07:32,490 --> 00:07:37,140
<font color="#E5E5E5">you know what we know that we can</font>

155
00:07:33,900 --> 00:07:39,840
simplify the query and push this part of

156
00:07:37,140 --> 00:07:46,800
the condition<font color="#CCCCCC"> all the way up here in</font><font color="#E5E5E5"> the</font>

157
00:07:39,840 --> 00:07:48,479
where Clause of<font color="#E5E5E5"> this query so here so if</font>

158
00:07:46,800 --> 00:07:50,070
you if you push this you<font color="#E5E5E5"> only get to</font>

159
00:07:48,479 --> 00:07:55,890
compute<font color="#E5E5E5"> this part and this information</font>

160
00:07:50,070 --> 00:07:58,080
<font color="#E5E5E5">is not not even accessed</font><font color="#CCCCCC"> okay so if</font><font color="#E5E5E5"> you</font>

161
00:07:55,890 --> 00:08:00,210
compare how execution would happen

162
00:07:58,080 --> 00:08:03,330
<font color="#E5E5E5">currently in</font><font color="#CCCCCC"> Mirae</font><font color="#E5E5E5"> db10</font><font color="#CCCCCC"> 2 which is the</font>

163
00:08:00,210 --> 00:08:06,330
<font color="#E5E5E5">stable release minus QL it's 0 which has</font>

164
00:08:03,330 --> 00:08:08,849
window functions<font color="#E5E5E5"> my escalate David</font>

165
00:08:06,330 --> 00:08:10,950
computes all free top top<font color="#CCCCCC"> free orders</font>

166
00:08:08,850 --> 00:08:13,680
for<font color="#CCCCCC"> all customers</font><font color="#E5E5E5"> and then you would get</font>

167
00:08:10,950 --> 00:08:18,060
<font color="#E5E5E5">the customer the rows for customer ID</font>

168
00:08:13,680 --> 00:08:19,500
equals<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> Emory DB</font><font color="#E5E5E5"> 10 free and also in</font>

169
00:08:18,060 --> 00:08:23,280
<font color="#E5E5E5">pause</font><font color="#CCCCCC"> Bears we've also tested how</font>

170
00:08:19,500 --> 00:08:25,520
possible asset you will only compute the

171
00:08:23,280 --> 00:08:27,960
top<font color="#CCCCCC"> 3 orders</font><font color="#E5E5E5"> for customer ID equals 1</font>

172
00:08:25,520 --> 00:08:30,359
and<font color="#E5E5E5"> in some cases this can be much</font>

173
00:08:27,960 --> 00:08:32,490
faster<font color="#E5E5E5"> because we can make use of</font>

174
00:08:30,360 --> 00:08:40,060
indexes to identify the rows for that

175
00:08:32,490 --> 00:08:42,250
particular customer make sense so<font color="#CCCCCC"> far</font>

176
00:08:40,059 --> 00:08:48,520
okay either<font color="#E5E5E5"> I'm very clear or nobody's</font>

177
00:08:42,250 --> 00:08:51,460
understanding anything<font color="#CCCCCC"> at all</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> final</font>

178
00:08:48,520 --> 00:08:53,770
<font color="#E5E5E5">optimization</font><font color="#CCCCCC"> I think the name for</font><font color="#E5E5E5"> this</font>

179
00:08:51,460 --> 00:08:55,660
<font color="#E5E5E5">is not quite fortunate so we're probably</font>

180
00:08:53,770 --> 00:08:59,020
going<font color="#CCCCCC"> to change it so for</font><font color="#E5E5E5"> now we call it</font>

181
00:08:55,660 --> 00:09:01,750
<font color="#CCCCCC">split grouping for</font><font color="#E5E5E5"> derived so what</font>

182
00:08:59,020 --> 00:09:03,189
happens<font color="#CCCCCC"> here where we have a similar</font>

183
00:09:01,750 --> 00:09:06,790
query to the<font color="#E5E5E5"> one</font><font color="#CCCCCC"> before we have a group</font>

184
00:09:03,190 --> 00:09:09,880
by statement but<font color="#E5E5E5"> because the there is no</font>

185
00:09:06,790 --> 00:09:13,599
<font color="#CCCCCC">equality we don't filter</font><font color="#E5E5E5"> by one customer</font>

186
00:09:09,880 --> 00:09:16,660
ID<font color="#E5E5E5"> we have a range of customers</font><font color="#CCCCCC"> we have</font>

187
00:09:13,600 --> 00:09:18,730
customer name in John and Bob but we

188
00:09:16,660 --> 00:09:22,480
don't have customer name<font color="#CCCCCC"> inside orders</font>

189
00:09:18,730 --> 00:09:24,480
we have<font color="#E5E5E5"> customer ID</font><font color="#CCCCCC"> ok so so we</font><font color="#E5E5E5"> have the</font>

190
00:09:22,480 --> 00:09:27,700
<font color="#CCCCCC">join condition here customer ID equals</font>

191
00:09:24,480 --> 00:09:31,240
<font color="#E5E5E5">October totals customer ID and we filter</font>

192
00:09:27,700 --> 00:09:33,130
by customer name so we can't do

193
00:09:31,240 --> 00:09:37,680
condition push down<font color="#CCCCCC"> immediately because</font>

194
00:09:33,130 --> 00:09:41,939
there<font color="#CCCCCC"> is no column customer name here</font>

195
00:09:37,680 --> 00:09:44,650
however<font color="#E5E5E5"> we can be smart about this and</font>

196
00:09:41,940 --> 00:09:47,080
actually<font color="#E5E5E5"> let's first look at how we</font><font color="#CCCCCC"> are</font>

197
00:09:44,650 --> 00:09:50,800
not<font color="#E5E5E5"> smart</font><font color="#CCCCCC"> so when we're</font><font color="#E5E5E5"> not smart we do</font>

198
00:09:47,080 --> 00:09:54,580
a sum<font color="#E5E5E5"> of everything so for all customers</font>

199
00:09:50,800 --> 00:09:56,560
we get the sum and then<font color="#E5E5E5"> we this means we</font>

200
00:09:54,580 --> 00:10:00,100
get<font color="#CCCCCC"> the October totals</font><font color="#E5E5E5"> and then for each</font>

201
00:09:56,560 --> 00:10:02,469
customer<font color="#E5E5E5"> we filter only Bob and John for</font>

202
00:10:00,100 --> 00:10:04,240
<font color="#E5E5E5">both and join them so we have to do</font>

203
00:10:02,470 --> 00:10:09,360
aggregation over the full orders table

204
00:10:04,240 --> 00:10:09,360
<font color="#E5E5E5">again not good this gets big very fast</font>

205
00:10:09,510 --> 00:10:17,740
as you see we don't<font color="#E5E5E5"> need customer</font><font color="#CCCCCC"> X when</font>

206
00:10:15,490 --> 00:10:20,950
we're smart we actually look<font color="#E5E5E5"> at</font>

207
00:10:17,740 --> 00:10:24,070
customers first<font color="#E5E5E5"> we see which customer</font>

208
00:10:20,950 --> 00:10:27,370
IDs we are allowed to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> and we only</font>

209
00:10:24,070 --> 00:10:29,470
aggregate those customers so we can

210
00:10:27,370 --> 00:10:34,150
<font color="#E5E5E5">compute a sum for Bob and we can compute</font>

211
00:10:29,470 --> 00:10:35,770
a<font color="#E5E5E5"> sum for John and this way we</font>

212
00:10:34,150 --> 00:10:41,110
completely ignore this part<font color="#E5E5E5"> of the table</font>

213
00:10:35,770 --> 00:10:43,180
<font color="#CCCCCC">as well as this part of the</font><font color="#E5E5E5"> table</font><font color="#CCCCCC"> there</font>

214
00:10:41,110 --> 00:10:45,220
<font color="#E5E5E5">is some requirements for this though in</font>

215
00:10:43,180 --> 00:10:47,979
order<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> do this we have to</font>

216
00:10:45,220 --> 00:10:50,080
have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> joint</font><font color="#E5E5E5"> condition here so we have</font>

217
00:10:47,980 --> 00:10:51,889
to have something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> links orders to</font>

218
00:10:50,080 --> 00:10:55,519
customers in this case customer ID

219
00:10:51,889 --> 00:10:59,769
is linked<font color="#CCCCCC"> this is the column that</font><font color="#E5E5E5"> links</font>

220
00:10:55,519 --> 00:11:03,379
the two<font color="#CCCCCC"> tables and we also must have</font><font color="#E5E5E5"> a</font>

221
00:10:59,769 --> 00:11:05,989
index on the group by column to be<font color="#CCCCCC"> able</font>

222
00:11:03,379 --> 00:11:07,819
<font color="#CCCCCC">to</font><font color="#E5E5E5"> quickly check if the customer that we</font>

223
00:11:05,989 --> 00:11:10,100
are looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually in the table</font>

224
00:11:07,819 --> 00:11:12,889
<font color="#E5E5E5">so here we want to have</font><font color="#CCCCCC"> an index</font><font color="#E5E5E5"> to</font>

225
00:11:10,100 --> 00:11:15,980
check if<font color="#CCCCCC"> it's Bob in orders but Bob is</font>

226
00:11:12,889 --> 00:11:17,540
Bob Bob's ID<font color="#E5E5E5"> in orders if you don't have</font>

227
00:11:15,980 --> 00:11:19,220
this<font color="#E5E5E5"> this optimization won't actually</font>

228
00:11:17,540 --> 00:11:20,929
<font color="#CCCCCC">work right now it's still in the</font>

229
00:11:19,220 --> 00:11:23,389
<font color="#E5E5E5">beginning phases so we haven't really</font>

230
00:11:20,929 --> 00:11:25,369
optimized this for all cases we only

231
00:11:23,389 --> 00:11:27,889
<font color="#CCCCCC">apply it when we're definitely</font><font color="#E5E5E5"> sure that</font>

232
00:11:25,369 --> 00:11:30,139
it will<font color="#E5E5E5"> bring a speed up otherwise we</font>

233
00:11:27,889 --> 00:11:31,730
<font color="#CCCCCC">are very we don't use it because</font><font color="#E5E5E5"> we're</font>

234
00:11:30,139 --> 00:11:37,279
not<font color="#E5E5E5"> sure if</font><font color="#CCCCCC"> it's going to</font><font color="#E5E5E5"> produce a</font>

235
00:11:31,730 --> 00:11:39,470
better<font color="#E5E5E5"> query plan and to look up to see</font>

236
00:11:37,279 --> 00:11:41,899
how features<font color="#E5E5E5"> stack up</font><font color="#CCCCCC"> well we have the</font>

237
00:11:39,470 --> 00:11:43,879
right table<font color="#E5E5E5"> view merge this the first</font>

238
00:11:41,899 --> 00:11:47,209
<font color="#E5E5E5">thing we talked</font><font color="#CCCCCC"> about in all stable</font>

239
00:11:43,879 --> 00:11:49,429
versions<font color="#CCCCCC"> condition pushdown is a Marida</font>

240
00:11:47,209 --> 00:11:53,238
be only<font color="#CCCCCC"> specific feature window</font>

241
00:11:49,429 --> 00:11:54,619
functions are coming<font color="#CCCCCC"> into MySQL h0</font><font color="#E5E5E5"> and I</font>

242
00:11:53,239 --> 00:11:57,499
<font color="#CCCCCC">haven't personally</font><font color="#E5E5E5"> check but I believe</font>

243
00:11:54,619 --> 00:12:02,239
<font color="#E5E5E5">merge actually works with</font><font color="#CCCCCC"> cities too in</font>

244
00:11:57,499 --> 00:12:03,949
my skill and also condition<font color="#CCCCCC"> pushed down</font>

245
00:12:02,239 --> 00:12:05,689
for partition by and split table

246
00:12:03,949 --> 00:12:08,449
grouping is only available<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Murray to</font>

247
00:12:05,689 --> 00:12:12,049
be<font color="#E5E5E5"> 10 feet</font><font color="#CCCCCC"> so we're hoping that MySQL</font>

248
00:12:08,449 --> 00:12:14,299
<font color="#E5E5E5">can also implement this because if more</font>

249
00:12:12,049 --> 00:12:16,389
more users get optimizations it's better

250
00:12:14,299 --> 00:12:18,639
for everybody

251
00:12:16,389 --> 00:12:21,319
obviously this is<font color="#CCCCCC"> not a comprehensive</font>

252
00:12:18,639 --> 00:12:23,449
comparison<font color="#E5E5E5"> I'm not trying to show</font><font color="#CCCCCC"> that</font>

253
00:12:21,319 --> 00:12:24,860
<font color="#CCCCCC">MySQL doesn't</font><font color="#E5E5E5"> have any features or we</font>

254
00:12:23,449 --> 00:12:26,540
that we<font color="#E5E5E5"> have so a lot more</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> just</font>

255
00:12:24,860 --> 00:12:34,239
<font color="#CCCCCC">on the features which I talked about</font>

256
00:12:26,540 --> 00:12:38,029
<font color="#E5E5E5">during this talk</font><font color="#CCCCCC"> okay this is actually a</font>

257
00:12:34,239 --> 00:12:39,799
overview<font color="#E5E5E5"> of how things work</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

258
00:12:38,029 --> 00:12:43,339
based what I talked about<font color="#E5E5E5"> if you want to</font>

259
00:12:39,799 --> 00:12:45,439
read we read this somewhere it's it's

260
00:12:43,339 --> 00:12:49,100
<font color="#CCCCCC">available</font><font color="#E5E5E5"> I will make</font><font color="#CCCCCC"> I'll post this</font>

261
00:12:45,439 --> 00:12:53,379
talk on on the FOSDEM link so you<font color="#E5E5E5"> can</font>

262
00:12:49,100 --> 00:12:56,739
<font color="#E5E5E5">download it there</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that's all I had</font>

263
00:12:53,379 --> 00:12:56,739
thank you very<font color="#E5E5E5"> much</font>

264
00:13:02,519 --> 00:13:13,660
yes if there's<font color="#E5E5E5"> an I actually have more</font>

265
00:13:10,990 --> 00:13:15,309
slides<font color="#E5E5E5"> possibly but it's a bit difficult</font>

266
00:13:13,660 --> 00:13:25,319
<font color="#E5E5E5">so if people are interested I</font><font color="#CCCCCC"> can talk</font>

267
00:13:15,309 --> 00:13:25,319
more about<font color="#E5E5E5"> it offline yep go ahead</font>

268
00:13:35,330 --> 00:13:40,480
so is it this this<font color="#CCCCCC"> one</font>

269
00:14:08,790 --> 00:14:12,839
so I'm not<font color="#E5E5E5"> really sure</font><font color="#CCCCCC"> I get your</font>

270
00:14:10,950 --> 00:14:17,450
<font color="#E5E5E5">question so let me try and rephrase it</font>

271
00:14:12,840 --> 00:14:20,310
<font color="#E5E5E5">so the question</font><font color="#CCCCCC"> is why don't</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a</font>

272
00:14:17,450 --> 00:14:24,440
where<font color="#E5E5E5"> clause inside the view view here</font>

273
00:14:20,310 --> 00:14:28,400
right<font color="#CCCCCC"> well for example if you</font><font color="#E5E5E5"> try to</font>

274
00:14:24,440 --> 00:14:32,670
make an application for users which

275
00:14:28,400 --> 00:14:34,140
which works for<font color="#E5E5E5"> multiple you say say</font>

276
00:14:32,670 --> 00:14:35,699
you're in a company<font color="#CCCCCC"> and you want this</font>

277
00:14:34,140 --> 00:14:38,400
view to work for<font color="#CCCCCC"> multiple departments</font>

278
00:14:35,700 --> 00:14:42,830
<font color="#E5E5E5">maybe don't want filter by a specific</font>

279
00:14:38,400 --> 00:14:42,829
<font color="#E5E5E5">user for that department so</font><font color="#CCCCCC"> that's why</font>

280
00:15:10,600 --> 00:15:14,980
well maybe the example is not the

281
00:15:13,390 --> 00:15:16,569
example<font color="#E5E5E5"> is to showcase the optimization</font>

282
00:15:14,980 --> 00:15:17,800
possible it's<font color="#E5E5E5"> not to show that</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

283
00:15:16,570 --> 00:15:23,290
<font color="#CCCCCC">the way you should actually write all</font>

284
00:15:17,800 --> 00:15:24,459
your<font color="#CCCCCC"> queries</font><font color="#E5E5E5"> okay yes you can</font><font color="#CCCCCC"> optimize</font>

285
00:15:23,290 --> 00:15:26,680
it<font color="#E5E5E5"> manually but yeah</font>

286
00:15:24,460 --> 00:15:31,420
the idea from the start<font color="#CCCCCC"> of the talk is</font>

287
00:15:26,680 --> 00:15:34,390
this so in a perfect<font color="#E5E5E5"> world any query</font>

288
00:15:31,420 --> 00:15:38,079
should<font color="#E5E5E5"> run fast</font><font color="#CCCCCC"> okay so that's what</font>

289
00:15:34,390 --> 00:15:40,680
we're trying<font color="#E5E5E5"> for even if you shoot</font>

290
00:15:38,080 --> 00:15:40,680
yourself<font color="#E5E5E5"> in the foot</font>

291
00:15:48,079 --> 00:15:53,180
okay thank you

