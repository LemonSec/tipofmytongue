1
00:00:05,190 --> 00:00:11,170
so this talk<font color="#CCCCCC"> is about OS s7 which</font><font color="#E5E5E5"> is an</font>

2
00:00:08,710 --> 00:00:14,140
<font color="#CCCCCC">open-source implementation of the</font><font color="#E5E5E5"> dash</font><font color="#CCCCCC"> 7</font>

3
00:00:11,170 --> 00:00:17,529
<font color="#E5E5E5">communication stack and I'm just gonna</font>

4
00:00:14,140 --> 00:00:19,450
leave<font color="#CCCCCC"> Glenn</font><font color="#E5E5E5"> the floor</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> thank you for</font>

5
00:00:17,529 --> 00:00:21,250
the<font color="#E5E5E5"> introduction that's very nice being</font>

6
00:00:19,450 --> 00:00:23,400
here I was<font color="#E5E5E5"> here a lot of</font><font color="#CCCCCC"> times before</font>

7
00:00:21,250 --> 00:00:26,770
<font color="#E5E5E5">but comfortably sitting in the audience</font>

8
00:00:23,400 --> 00:00:28,869
<font color="#CCCCCC">now it's a new for me standing here</font><font color="#E5E5E5"> but</font>

9
00:00:26,770 --> 00:00:30,189
anyway<font color="#E5E5E5"> I worked at the ideal app</font>

10
00:00:28,869 --> 00:00:32,860
research group of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> University of</font>

11
00:00:30,189 --> 00:00:35,020
<font color="#E5E5E5">Antwerp and I'm ik and our part of the</font>

12
00:00:32,860 --> 00:00:36,790
group is<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> a low-power communication</font>

13
00:00:35,020 --> 00:00:39,190
and<font color="#E5E5E5"> localization and it is in this</font>

14
00:00:36,790 --> 00:00:42,550
context that we got into contact<font color="#CCCCCC"> with</font>

15
00:00:39,190 --> 00:00:44,680
the<font color="#CCCCCC"> Seven</font><font color="#E5E5E5"> Alliance very actively where</font>

16
00:00:42,550 --> 00:00:46,419
we are an<font color="#E5E5E5"> active member in the Alliance</font>

17
00:00:44,680 --> 00:00:49,750
<font color="#E5E5E5">and also driving your purse or stack</font>

18
00:00:46,420 --> 00:00:54,130
which<font color="#CCCCCC"> is a topic</font><font color="#E5E5E5"> of today so the</font><font color="#CCCCCC"> dash</font><font color="#E5E5E5"> 7</font>

19
00:00:49,750 --> 00:00:56,470
<font color="#CCCCCC">spec is originating from iso 18000</font><font color="#E5E5E5"> - 7</font>

20
00:00:54,130 --> 00:00:59,860
<font color="#E5E5E5">so hence the name and</font><font color="#CCCCCC"> that was purely</font>

21
00:00:56,470 --> 00:01:03,129
<font color="#E5E5E5">focused on active RFID in this new</font>

22
00:00:59,860 --> 00:01:06,729
evolution of the spec we<font color="#E5E5E5"> try to make it</font>

23
00:01:03,130 --> 00:01:09,189
<font color="#CCCCCC">more generic for</font><font color="#E5E5E5"> IOT use cases</font><font color="#CCCCCC"> it's</font>

24
00:01:06,729 --> 00:01:11,560
<font color="#E5E5E5">focused on suit gears bands and it's</font>

25
00:01:09,189 --> 00:01:15,130
<font color="#E5E5E5">using a star or</font><font color="#CCCCCC"> tree topology</font><font color="#E5E5E5"> so we're</font>

26
00:01:11,560 --> 00:01:17,679
not<font color="#E5E5E5"> using</font><font color="#CCCCCC"> a machine currently we're at</font>

27
00:01:15,130 --> 00:01:21,068
version 1.1 of<font color="#E5E5E5"> the specs published about</font>

28
00:01:17,679 --> 00:01:22,929
one year ago so some key aspects without

29
00:01:21,069 --> 00:01:25,509
going too deep<font color="#E5E5E5"> into the specification</font>

30
00:01:22,929 --> 00:01:27,369
<font color="#E5E5E5">itself it's focused on low-power</font>

31
00:01:25,509 --> 00:01:30,189
communication and a synchronous

32
00:01:27,369 --> 00:01:31,990
communication<font color="#CCCCCC"> and there's a lot of</font>

33
00:01:30,189 --> 00:01:36,008
<font color="#CCCCCC">functionality embedded in the circus we</font>

34
00:01:31,990 --> 00:01:37,719
will see<font color="#E5E5E5"> see later also basically in</font>

35
00:01:36,009 --> 00:01:39,609
<font color="#CCCCCC">there 7 everything is a file this</font><font color="#E5E5E5"> is</font>

36
00:01:37,719 --> 00:01:42,298
<font color="#E5E5E5">configuration of the stack itself but</font>

37
00:01:39,609 --> 00:01:44,979
also sensor values are<font color="#E5E5E5"> stored in a file</font>

38
00:01:42,299 --> 00:01:46,869
this is also the main application

39
00:01:44,979 --> 00:01:49,929
interface you would use from your

40
00:01:46,869 --> 00:01:52,779
<font color="#E5E5E5">application or from an external node</font><font color="#CCCCCC"> you</font>

41
00:01:49,929 --> 00:01:57,249
would do<font color="#E5E5E5"> familiar operations like read</font>

42
00:01:52,779 --> 00:02:01,630
file or write<font color="#E5E5E5"> file to the</font><font color="#CCCCCC"> to manage the</font>

43
00:01:57,249 --> 00:02:03,729
the<font color="#E5E5E5"> stack effect</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is done using ALP</font>

44
00:02:01,630 --> 00:02:05,469
commands which is just a efficient

45
00:02:03,729 --> 00:02:09,270
binary representation of<font color="#CCCCCC"> these</font>

46
00:02:05,469 --> 00:02:12,250
operations what I have right here<font color="#E5E5E5"> is</font>

47
00:02:09,270 --> 00:02:15,730
another shell of death kit<font color="#E5E5E5"> from St which</font>

48
00:02:12,250 --> 00:02:17,630
is<font color="#E5E5E5"> running -</font><font color="#CCCCCC"> 7 modem on</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> it's</font>

49
00:02:15,730 --> 00:02:20,269
connected<font color="#CCCCCC"> with my laptop using us</font>

50
00:02:17,630 --> 00:02:23,269
be and on the serial connection we<font color="#CCCCCC"> talk</font>

51
00:02:20,270 --> 00:02:25,700
this LP command<font color="#E5E5E5"> sets on the laptop we</font>

52
00:02:23,270 --> 00:02:27,770
<font color="#CCCCCC">have a Python framework called PI d7 a</font>

53
00:02:25,700 --> 00:02:31,940
and it<font color="#CCCCCC"> basically does a translation to</font>

54
00:02:27,770 --> 00:02:35,720
and from a LP<font color="#E5E5E5"> so I'll I'll be doing a</font>

55
00:02:31,940 --> 00:02:37,880
few demos somewhere between the

56
00:02:35,720 --> 00:02:40,510
presentation<font color="#CCCCCC"> so I'll be switching</font><font color="#E5E5E5"> over a</font>

57
00:02:37,880 --> 00:02:40,510
few<font color="#E5E5E5"> times</font>

58
00:02:46,920 --> 00:02:54,239
if I can find<font color="#E5E5E5"> it yeah</font><font color="#CCCCCC"> so the Python</font>

59
00:02:51,270 --> 00:02:56,460
framework<font color="#E5E5E5"> also has a small user</font>

60
00:02:54,240 --> 00:02:58,320
interface which we which<font color="#CCCCCC"> we use to</font>

61
00:02:56,460 --> 00:03:01,380
<font color="#CCCCCC">manage the modem so now it's connected</font>

62
00:02:58,320 --> 00:03:03,120
<font color="#CCCCCC">with</font><font color="#E5E5E5"> this this module here and here for</font>

63
00:03:01,380 --> 00:03:05,310
instance<font color="#E5E5E5"> you can browse some system</font>

64
00:03:03,120 --> 00:03:06,900
files which are<font color="#CCCCCC"> defined there</font><font color="#E5E5E5"> and you</font>

65
00:03:05,310 --> 00:03:10,730
can feel here for instance<font color="#E5E5E5"> this contains</font>

66
00:03:06,900 --> 00:03:13,650
<font color="#E5E5E5">the UID</font><font color="#CCCCCC"> there's a firmware</font><font color="#E5E5E5"> version file</font>

67
00:03:10,730 --> 00:03:16,859
<font color="#CCCCCC">there's an access profile which defines</font>

68
00:03:13,650 --> 00:03:18,810
some channel bands and some data rate

69
00:03:16,860 --> 00:03:20,670
<font color="#CCCCCC">and stuff like that</font><font color="#E5E5E5"> so this is just a</font>

70
00:03:18,810 --> 00:03:24,180
view on<font color="#E5E5E5"> the file</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> which we now</font>

71
00:03:20,670 --> 00:03:28,679
query using this al<font color="#CCCCCC"> peak amount you</font><font color="#E5E5E5"> can</font>

72
00:03:24,180 --> 00:03:30,450
also execute a command like this you can

73
00:03:28,680 --> 00:03:33,239
just<font color="#E5E5E5"> say a read file and want to read</font>

74
00:03:30,450 --> 00:03:35,488
file<font color="#CCCCCC"> 0 and execute and you</font><font color="#E5E5E5"> would get the</font>

75
00:03:33,239 --> 00:03:43,560
UID file here I don't know<font color="#E5E5E5"> if it's</font>

76
00:03:35,489 --> 00:03:46,080
feasible<font color="#CCCCCC"> no</font><font color="#E5E5E5"> ok so</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> hands I</font>

77
00:03:43,560 --> 00:03:47,489
<font color="#E5E5E5">have two notes here which are the same</font>

78
00:03:46,080 --> 00:03:49,230
difficut but they have a shield the

79
00:03:47,489 --> 00:03:53,310
shield on<font color="#CCCCCC"> top of it</font><font color="#E5E5E5"> containing sensors</font>

80
00:03:49,230 --> 00:03:55,410
<font color="#CCCCCC">raises a temperature sensor sensor so</font>

81
00:03:53,310 --> 00:03:57,239
the application running on<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is very</font>

82
00:03:55,410 --> 00:03:59,720
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> this is basically</font><font color="#E5E5E5"> everything</font>

83
00:03:57,239 --> 00:04:02,820
this is<font color="#E5E5E5"> this is on the application layer</font>

84
00:03:59,720 --> 00:04:04,920
<font color="#E5E5E5">we just read the temperature value from</font>

85
00:04:02,820 --> 00:04:06,780
the sensor<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we write</font><font color="#E5E5E5"> it in a file on</font>

86
00:04:04,920 --> 00:04:09,450
<font color="#E5E5E5">the</font><font color="#CCCCCC"> external file system in a specific</font>

87
00:04:06,780 --> 00:04:11,790
<font color="#CCCCCC">file for for this temperature</font><font color="#E5E5E5"> value and</font>

88
00:04:09,450 --> 00:04:14,518
then we reschedule it again to do<font color="#E5E5E5"> this</font>

89
00:04:11,790 --> 00:04:16,380
periodically<font color="#CCCCCC"> every 10 seconds</font><font color="#E5E5E5"> so this is</font>

90
00:04:14,519 --> 00:04:18,060
everything there is at the application

91
00:04:16,380 --> 00:04:20,100
<font color="#E5E5E5">layer and</font><font color="#CCCCCC"> the rest is managed by the</font>

92
00:04:18,060 --> 00:04:23,610
<font color="#E5E5E5">sack I</font><font color="#CCCCCC"> will be using this application</font>

93
00:04:20,100 --> 00:04:28,050
throughout the demo so if I go back<font color="#CCCCCC"> to</font>

94
00:04:23,610 --> 00:04:30,479
<font color="#E5E5E5">this UI</font><font color="#CCCCCC"> I can now instead of using the</font>

95
00:04:28,050 --> 00:04:32,700
host interface<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> the local module</font>

96
00:04:30,479 --> 00:04:34,860
connected<font color="#E5E5E5"> over the serial I can execute</font>

97
00:04:32,700 --> 00:04:36,870
the same commands<font color="#E5E5E5"> to through the dash</font><font color="#CCCCCC"> 7</font>

98
00:04:34,860 --> 00:04:38,880
interface afford<font color="#E5E5E5"> its to the</font><font color="#CCCCCC"> dash</font><font color="#E5E5E5"> 7</font>

99
00:04:36,870 --> 00:04:40,740
interface<font color="#E5E5E5"> I specify</font><font color="#CCCCCC"> stake some</font>

100
00:04:38,880 --> 00:04:43,469
configuration for instance how to<font color="#E5E5E5"> access</font>

101
00:04:40,740 --> 00:04:45,479
the<font color="#CCCCCC"> nodes and</font><font color="#E5E5E5"> then then it will execute</font>

102
00:04:43,470 --> 00:04:49,880
the<font color="#CCCCCC"> same command which was the</font><font color="#E5E5E5"> reach UID</font>

103
00:04:45,479 --> 00:04:49,880
on this<font color="#CCCCCC"> other on this other interface</font>

104
00:04:50,300 --> 00:04:55,790
<font color="#CCCCCC">I</font><font color="#E5E5E5"> started it yeah so as you can</font><font color="#CCCCCC"> see we</font>

105
00:04:53,960 --> 00:04:58,039
now<font color="#CCCCCC"> have two responses which are from</font>

106
00:04:55,790 --> 00:04:59,570
<font color="#E5E5E5">these notes</font><font color="#CCCCCC"> so that's that's fully</font>

107
00:04:58,040 --> 00:05:01,640
transparent you execute the same

108
00:04:59,570 --> 00:05:04,669
commands to<font color="#CCCCCC"> knock local notes as to a</font>

109
00:05:01,640 --> 00:05:08,490
remote<font color="#E5E5E5"> note</font>

110
00:05:04,669 --> 00:05:10,378
also I mentioned<font color="#CCCCCC"> that we were writing a</font>

111
00:05:08,490 --> 00:05:13,589
temperature file it's just in<font color="#CCCCCC"> another</font>

112
00:05:10,379 --> 00:05:16,110
file so if I take<font color="#CCCCCC"> 564 can I happen to</font>

113
00:05:13,589 --> 00:05:18,270
know it's<font color="#CCCCCC"> two bytes long</font><font color="#E5E5E5"> I can just read</font>

114
00:05:16,110 --> 00:05:21,330
out the temperature data<font color="#E5E5E5"> just as I</font><font color="#CCCCCC"> would</font>

115
00:05:18,270 --> 00:05:25,139
read<font color="#E5E5E5"> out the UID of the note so you see</font>

116
00:05:21,330 --> 00:05:26,818
the two bytes<font color="#E5E5E5"> coming in these are the</font>

117
00:05:25,139 --> 00:05:29,639
raw bytes we don't parse it here because

118
00:05:26,819 --> 00:05:32,189
it's<font color="#CCCCCC"> not a</font><font color="#E5E5E5"> system defined file it's</font>

119
00:05:29,639 --> 00:05:34,469
something it's user specific so I'll

120
00:05:32,189 --> 00:05:36,809
show later how<font color="#E5E5E5"> you can visualize it but</font>

121
00:05:34,469 --> 00:05:42,959
<font color="#CCCCCC">there are the</font><font color="#E5E5E5"> the temperature of the two</font>

122
00:05:36,809 --> 00:05:45,930
<font color="#E5E5E5">notes</font><font color="#CCCCCC"> okay so what happens here</font><font color="#E5E5E5"> is this</font>

123
00:05:42,959 --> 00:05:47,399
<font color="#CCCCCC">is our sensor note the application is</font>

124
00:05:45,930 --> 00:05:49,800
<font color="#E5E5E5">basically writing the sensor file</font>

125
00:05:47,399 --> 00:05:52,169
continuously or periodically it writes

126
00:05:49,800 --> 00:05:54,330
the sensor file<font color="#E5E5E5"> and the rest is managed</font>

127
00:05:52,169 --> 00:05:57,180
by<font color="#E5E5E5"> the diagnostic so here we have the</font>

128
00:05:54,330 --> 00:05:59,188
interrogator which was this note here it

129
00:05:57,180 --> 00:06:02,129
just<font color="#CCCCCC"> executes the command read sensor</font>

130
00:05:59,189 --> 00:06:04,139
<font color="#E5E5E5">file the</font><font color="#CCCCCC"> sac will receive it will read</font>

131
00:06:02,129 --> 00:06:07,409
the<font color="#E5E5E5"> sensor file and we'll retransmits or</font>

132
00:06:04,139 --> 00:06:09,839
will answer the<font color="#CCCCCC"> the data so the</font>

133
00:06:07,409 --> 00:06:13,438
application doesn't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> application is</font>

134
00:06:09,839 --> 00:06:14,819
totally unaware of this happening this

135
00:06:13,439 --> 00:06:16,860
is what we call the the<font color="#CCCCCC"> full</font>

136
00:06:14,819 --> 00:06:18,629
communication scheme and it's useful<font color="#CCCCCC"> if</font>

137
00:06:16,860 --> 00:06:21,149
you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> request the data only when</font>

138
00:06:18,629 --> 00:06:23,849
we need us so for<font color="#E5E5E5"> instance on an</font>

139
00:06:21,149 --> 00:06:25,199
external<font color="#E5E5E5"> event like the door closes and</font>

140
00:06:23,849 --> 00:06:28,219
<font color="#CCCCCC">you</font><font color="#E5E5E5"> want to query all the notes inside</font>

141
00:06:25,199 --> 00:06:32,129
<font color="#E5E5E5">or user pressing a button on the DUI</font>

142
00:06:28,219 --> 00:06:34,169
then<font color="#CCCCCC"> pool communication makes sense</font><font color="#E5E5E5"> you</font>

143
00:06:32,129 --> 00:06:36,559
can also integrate multiple responders

144
00:06:34,169 --> 00:06:36,558
at once

145
00:06:38,030 --> 00:06:45,659
sorry now how does this happen

146
00:06:41,870 --> 00:06:47,699
as I said it's used<font color="#E5E5E5"> for low power and a</font>

147
00:06:45,659 --> 00:06:49,740
synchronous networking<font color="#E5E5E5"> so the nodes</font>

148
00:06:47,699 --> 00:06:51,000
there can't be continuously listening

149
00:06:49,740 --> 00:06:53,099
because<font color="#CCCCCC"> they would consume too much</font>

150
00:06:51,000 --> 00:06:54,569
<font color="#CCCCCC">power</font><font color="#E5E5E5"> and they're not synchronized as</font>

151
00:06:53,099 --> 00:06:58,169
well so what<font color="#CCCCCC"> we do is an ad hoc</font>

152
00:06:54,569 --> 00:07:02,610
synchronization<font color="#CCCCCC"> I can show this like</font>

153
00:06:58,169 --> 00:07:04,770
this<font color="#CCCCCC"> I I hope it is</font><font color="#E5E5E5"> feasible</font><font color="#CCCCCC"> but it's a</font>

154
00:07:02,610 --> 00:07:07,740
screenshot<font color="#E5E5E5"> of logic analyzer where you</font>

155
00:07:04,770 --> 00:07:10,560
have the top<font color="#CCCCCC"> two</font><font color="#E5E5E5"> rows are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> requester</font>

156
00:07:07,740 --> 00:07:13,830
<font color="#E5E5E5">and the top one is the transmission and</font>

157
00:07:10,560 --> 00:07:15,719
then we have the reception<font color="#CCCCCC"> the RX</font><font color="#E5E5E5"> and</font>

158
00:07:13,830 --> 00:07:18,330
then the same<font color="#CCCCCC"> thing for for</font><font color="#E5E5E5"> two</font>

159
00:07:15,719 --> 00:07:21,060
responders and here<font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> that the</font>

160
00:07:18,330 --> 00:07:23,430
responders will go into<font color="#CCCCCC"> rx mode</font>

161
00:07:21,060 --> 00:07:26,580
<font color="#E5E5E5">periodically they will chat scan the</font>

162
00:07:23,430 --> 00:07:27,960
channel for background frames and the

163
00:07:26,580 --> 00:07:30,060
other one does<font color="#E5E5E5"> that as well</font><font color="#CCCCCC"> and you can</font>

164
00:07:27,960 --> 00:07:31,039
<font color="#CCCCCC">see it happens a synchronously</font><font color="#E5E5E5"> compared</font>

165
00:07:30,060 --> 00:07:33,569
<font color="#E5E5E5">to the other one</font>

166
00:07:31,039 --> 00:07:34,800
so there's<font color="#E5E5E5"> cam for background frame what</font>

167
00:07:33,569 --> 00:07:37,020
<font color="#E5E5E5">is a background</font><font color="#CCCCCC"> frame it basically</font>

168
00:07:34,800 --> 00:07:38,699
contains an<font color="#CCCCCC"> estimated time</font><font color="#E5E5E5"> of arrival of</font>

169
00:07:37,020 --> 00:07:41,460
the foreground<font color="#E5E5E5"> frame which will follow</font>

170
00:07:38,699 --> 00:07:43,379
so it's used<font color="#CCCCCC"> for synchronization so they</font>

171
00:07:41,460 --> 00:07:44,909
go<font color="#E5E5E5"> into receive mode the check if the</font>

172
00:07:43,379 --> 00:07:46,800
the<font color="#E5E5E5"> energy on the channel is above the</font>

173
00:07:44,909 --> 00:07:49,199
<font color="#E5E5E5">noise floor or</font><font color="#CCCCCC"> not if it isn't they go</font>

174
00:07:46,800 --> 00:07:51,240
asleep as<font color="#CCCCCC"> soon as possible</font><font color="#E5E5E5"> if it is they</font>

175
00:07:49,199 --> 00:07:53,310
try<font color="#E5E5E5"> to decode the background frame and</font>

176
00:07:51,240 --> 00:07:57,150
when they receive that<font color="#E5E5E5"> they go back and</font>

177
00:07:53,310 --> 00:07:59,210
sleep<font color="#E5E5E5"> until</font><font color="#CCCCCC"> this time</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> pause so if</font>

178
00:07:57,150 --> 00:08:02,099
you want to transmit<font color="#E5E5E5"> the query as a</font>

179
00:07:59,210 --> 00:08:03,779
requester you would basically<font color="#E5E5E5"> here and</font>

180
00:08:02,099 --> 00:08:06,120
<font color="#E5E5E5">it happens here flutter channel with</font>

181
00:08:03,779 --> 00:08:08,669
background frames for a period which is

182
00:08:06,120 --> 00:08:11,969
<font color="#E5E5E5">the same amount of time or a bit bigger</font>

183
00:08:08,669 --> 00:08:13,770
<font color="#E5E5E5">than the scan</font><font color="#CCCCCC"> on scan interval</font><font color="#E5E5E5"> so during</font>

184
00:08:11,969 --> 00:08:15,060
<font color="#CCCCCC">one seconds this background the</font>

185
00:08:13,770 --> 00:08:16,620
<font color="#CCCCCC">requester will send his background</font>

186
00:08:15,060 --> 00:08:20,009
frames and it will basically<font color="#CCCCCC"> count down</font>

187
00:08:16,620 --> 00:08:22,800
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> see here I don't know if</font>

188
00:08:20,009 --> 00:08:25,409
it's visible but this this here is a bit

189
00:08:22,800 --> 00:08:26,879
wider than<font color="#E5E5E5"> this other one because here</font>

190
00:08:25,409 --> 00:08:29,099
it actually<font color="#E5E5E5"> receives the background</font>

191
00:08:26,879 --> 00:08:31,669
frame so at this<font color="#E5E5E5"> point in time this node</font>

192
00:08:29,099 --> 00:08:34,380
knows<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the request will be sent here</font>

193
00:08:31,669 --> 00:08:37,228
and<font color="#E5E5E5"> the same thing happens</font><font color="#CCCCCC"> here and now</font>

194
00:08:34,380 --> 00:08:39,059
basically<font color="#E5E5E5"> they are synchronized so the</font>

195
00:08:37,229 --> 00:08:41,430
<font color="#E5E5E5">request will</font><font color="#CCCCCC"> be transmitted here they</font>

196
00:08:39,059 --> 00:08:44,250
will both be<font color="#CCCCCC"> in receive mode here and</font>

197
00:08:41,429 --> 00:08:45,089
then they will response here using

198
00:08:44,250 --> 00:08:48,779
csma/ca

199
00:08:45,089 --> 00:08:51,940
<font color="#CCCCCC">who responds to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> to the requester</font>

200
00:08:48,779 --> 00:08:55,930
so this is<font color="#CCCCCC"> a tock synchronization or</font>

201
00:08:51,940 --> 00:08:59,860
<font color="#E5E5E5">low-power listening but we also support</font>

202
00:08:55,930 --> 00:09:01,959
<font color="#CCCCCC">this</font><font color="#E5E5E5"> push communication</font><font color="#CCCCCC"> push</font>

203
00:08:59,860 --> 00:09:03,279
communication is used for when your

204
00:09:01,959 --> 00:09:04,420
techniques to talk first

205
00:09:03,279 --> 00:09:06,640
for instance here we<font color="#E5E5E5"> measure the</font>

206
00:09:04,420 --> 00:09:08,380
<font color="#E5E5E5">temperature every 10 seconds imagine</font>

207
00:09:06,640 --> 00:09:09,730
<font color="#E5E5E5">that we would require to capture all</font>

208
00:09:08,380 --> 00:09:11,860
<font color="#E5E5E5">these measurements</font><font color="#CCCCCC"> it wouldn't make</font>

209
00:09:09,730 --> 00:09:14,470
sense<font color="#E5E5E5"> to go query them every 10 seconds</font>

210
00:09:11,860 --> 00:09:17,440
<font color="#E5E5E5">we can</font><font color="#CCCCCC"> just as well lit</font><font color="#E5E5E5"> a note sent them</font>

211
00:09:14,470 --> 00:09:21,430
to us<font color="#CCCCCC"> and push them push it to us</font><font color="#E5E5E5"> every</font>

212
00:09:17,440 --> 00:09:23,830
10 seconds<font color="#E5E5E5"> now you can you can</font><font color="#CCCCCC"> kotas in</font>

213
00:09:21,430 --> 00:09:25,479
the application<font color="#E5E5E5"> layer of course but</font><font color="#CCCCCC"> that</font>

214
00:09:23,830 --> 00:09:27,430
<font color="#E5E5E5">segment provides a more generic way to</font>

215
00:09:25,480 --> 00:09:31,839
do this without touching<font color="#E5E5E5"> the application</font>

216
00:09:27,430 --> 00:09:33,189
that's<font color="#E5E5E5"> called the action protocol so</font>

217
00:09:31,839 --> 00:09:35,950
this is the same diagram<font color="#E5E5E5"> where the</font>

218
00:09:33,190 --> 00:09:38,200
application writes<font color="#E5E5E5"> the sensor file but</font>

219
00:09:35,950 --> 00:09:39,910
now we configure<font color="#CCCCCC"> the sensor file to</font>

220
00:09:38,200 --> 00:09:42,339
trigger the action protocol when written

221
00:09:39,910 --> 00:09:44,230
<font color="#E5E5E5">so an action protocol takes two more</font>

222
00:09:42,339 --> 00:09:46,600
files it takes an<font color="#E5E5E5"> action file and an</font>

223
00:09:44,230 --> 00:09:49,300
interface file and<font color="#E5E5E5"> the action file is</font>

224
00:09:46,600 --> 00:09:51,820
the action which<font color="#E5E5E5"> will be executed and</font>

225
00:09:49,300 --> 00:09:54,250
interface file is<font color="#E5E5E5"> specified where the</font>

226
00:09:51,820 --> 00:09:56,380
output of the action should go to so if

227
00:09:54,250 --> 00:09:59,279
we now before we had our query here

228
00:09:56,380 --> 00:10:01,540
saying<font color="#E5E5E5"> read sensor file data if we now</font>

229
00:09:59,279 --> 00:10:03,310
we are not sending<font color="#E5E5E5"> this right now</font>

230
00:10:01,540 --> 00:10:04,810
<font color="#E5E5E5">because we're doing push communication</font>

231
00:10:03,310 --> 00:10:07,029
but we're storing it inside<font color="#CCCCCC"> of the</font>

232
00:10:04,810 --> 00:10:10,779
action file so when the file<font color="#CCCCCC"> is written</font>

233
00:10:07,029 --> 00:10:13,390
the stack<font color="#E5E5E5"> will execute the read file</font>

234
00:10:10,779 --> 00:10:14,740
<font color="#E5E5E5">come on so it will return 21 degrees and</font>

235
00:10:13,390 --> 00:10:17,050
it will<font color="#CCCCCC"> be transmitted</font><font color="#E5E5E5"> over the</font>

236
00:10:14,740 --> 00:10:18,430
<font color="#E5E5E5">interface which is</font><font color="#CCCCCC"> specified here</font><font color="#E5E5E5"> where</font>

237
00:10:17,050 --> 00:10:21,459
you can say it's transmitted on this

238
00:10:18,430 --> 00:10:24,339
channel<font color="#E5E5E5"> using</font><font color="#CCCCCC"> a security</font><font color="#E5E5E5"> or whatever and</font>

239
00:10:21,459 --> 00:10:26,560
it will transmit<font color="#CCCCCC"> the file so basically</font>

240
00:10:24,339 --> 00:10:28,839
what we<font color="#E5E5E5"> did</font><font color="#CCCCCC"> is we removed this</font><font color="#E5E5E5"> one but</font>

241
00:10:26,560 --> 00:10:30,040
we<font color="#CCCCCC"> pre-registered it in</font><font color="#E5E5E5"> the note and it</font>

242
00:10:28,839 --> 00:10:32,880
will be triggered<font color="#CCCCCC"> because it's</font>

243
00:10:30,040 --> 00:10:32,880
configured that way

244
00:10:33,960 --> 00:10:39,960
so I can demo this<font color="#CCCCCC"> I will not be using</font>

245
00:10:38,070 --> 00:10:42,420
<font color="#E5E5E5">the</font><font color="#CCCCCC"> UI to configure this</font><font color="#E5E5E5"> now but I will</font>

246
00:10:39,960 --> 00:10:44,460
using<font color="#E5E5E5"> the API so I have some some script</font>

247
00:10:42,420 --> 00:10:47,880
which will do this will make<font color="#CCCCCC"> it a big</font>

248
00:10:44,460 --> 00:10:49,830
<font color="#E5E5E5">big here okay</font><font color="#CCCCCC"> so I use this</font><font color="#E5E5E5"> script to</font>

249
00:10:47,880 --> 00:10:54,930
choose the Python API and<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> it</font>

250
00:10:49,830 --> 00:11:00,540
reconfigured<font color="#CCCCCC"> 2 notes so</font><font color="#E5E5E5"> I can also show</font>

251
00:10:54,930 --> 00:11:02,729
this in<font color="#E5E5E5"> the dashboard this is a things</font>

252
00:11:00,540 --> 00:11:04,469
<font color="#E5E5E5">board which we use for dashboarding so</font>

253
00:11:02,730 --> 00:11:08,730
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> you can see data coming in from</font>

254
00:11:04,470 --> 00:11:12,560
from<font color="#CCCCCC"> two more nodes so it's 21 degrees</font>

255
00:11:08,730 --> 00:11:15,570
depending<font color="#CCCCCC"> on the node here</font><font color="#E5E5E5"> 21 or 23</font>

256
00:11:12,560 --> 00:11:17,760
things<font color="#E5E5E5"> what is an open source platform</font>

257
00:11:15,570 --> 00:11:21,270
<font color="#CCCCCC">we</font><font color="#E5E5E5"> use for dashboarding and for managing</font>

258
00:11:17,760 --> 00:11:23,310
our our<font color="#E5E5E5"> devices so all our devices are</font>

259
00:11:21,270 --> 00:11:27,600
here and<font color="#CCCCCC"> also the salt witness mentioned</font>

260
00:11:23,310 --> 00:11:33,719
<font color="#E5E5E5">before but I'm not going to into much</font>

261
00:11:27,600 --> 00:11:35,670
details<font color="#CCCCCC"> about this</font><font color="#E5E5E5"> okay now</font><font color="#CCCCCC"> ILP has some</font>

262
00:11:33,720 --> 00:11:37,530
<font color="#E5E5E5">more operations except from read and</font>

263
00:11:35,670 --> 00:11:39,060
write you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> also do queries</font><font color="#CCCCCC"> for</font>

264
00:11:37,530 --> 00:11:42,839
instance you can do an arithmetic

265
00:11:39,060 --> 00:11:46,050
comparison between a value<font color="#E5E5E5"> in a file</font><font color="#CCCCCC"> and</font>

266
00:11:42,840 --> 00:11:51,210
a value<font color="#E5E5E5"> you provide and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can you can</font>

267
00:11:46,050 --> 00:11:53,010
<font color="#E5E5E5">chain</font><font color="#CCCCCC"> ALP actions and the result of this</font>

268
00:11:51,210 --> 00:11:54,930
query operation will determine if

269
00:11:53,010 --> 00:11:58,590
further actions are<font color="#E5E5E5"> being executed or</font>

270
00:11:54,930 --> 00:12:00,449
<font color="#CCCCCC">not so I'll give an example later but</font>

271
00:11:58,590 --> 00:12:02,400
you<font color="#E5E5E5"> can use this for</font><font color="#CCCCCC"> for some smart</font>

272
00:12:00,450 --> 00:12:05,250
<font color="#E5E5E5">addressing instead of addressing a node</font>

273
00:12:02,400 --> 00:12:08,340
by ID<font color="#E5E5E5"> you would say I want</font><font color="#CCCCCC"> all nodes of</font>

274
00:12:05,250 --> 00:12:10,910
type A<font color="#E5E5E5"> or all nodes where the</font><font color="#CCCCCC"> humidity</font>

275
00:12:08,340 --> 00:12:15,020
<font color="#CCCCCC">is below</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> and the temperature is</font>

276
00:12:10,910 --> 00:12:15,020
below<font color="#E5E5E5"> that for instance</font>

277
00:12:16,210 --> 00:12:21,230
we could also use<font color="#CCCCCC"> this to accent our</font>

278
00:12:18,950 --> 00:12:22,940
demo a bit further<font color="#E5E5E5"> so now we're</font>

279
00:12:21,230 --> 00:12:25,610
transmitting the temperature every<font color="#E5E5E5"> 10</font>

280
00:12:22,940 --> 00:12:27,470
seconds but imagine that<font color="#E5E5E5"> 23 degrees is</font>

281
00:12:25,610 --> 00:12:29,540
<font color="#E5E5E5">considered normal and we also want</font><font color="#CCCCCC"> to</font>

282
00:12:27,470 --> 00:12:31,250
only want<font color="#E5E5E5"> an alarm when it's above 25</font>

283
00:12:29,540 --> 00:12:32,569
degrees for instance then all these

284
00:12:31,250 --> 00:12:35,900
<font color="#E5E5E5">messages would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> a waste of energy</font>

285
00:12:32,570 --> 00:12:39,110
<font color="#E5E5E5">right now so if we could</font><font color="#CCCCCC"> just have</font><font color="#E5E5E5"> this</font>

286
00:12:35,900 --> 00:12:41,689
this condition stored in the query<font color="#E5E5E5"> like</font>

287
00:12:39,110 --> 00:12:44,390
<font color="#CCCCCC">this so we</font><font color="#E5E5E5"> will prepend the the query</font>

288
00:12:41,690 --> 00:12:46,340
<font color="#E5E5E5">before</font><font color="#CCCCCC"> the the read action and the</font>

289
00:12:44,390 --> 00:12:52,130
reaction will only be<font color="#CCCCCC"> executed when</font><font color="#E5E5E5"> the</font>

290
00:12:46,340 --> 00:12:54,830
query is filled through so<font color="#CCCCCC"> okay I'll</font>

291
00:12:52,130 --> 00:12:57,050
show this now<font color="#E5E5E5"> I'll use the same script</font>

292
00:12:54,830 --> 00:12:59,450
that I can provide<font color="#CCCCCC"> it with with the</font>

293
00:12:57,050 --> 00:13:02,349
parameter now<font color="#E5E5E5"> I'm going to check what's</font>

294
00:12:59,450 --> 00:13:02,350
the<font color="#E5E5E5"> temperatures</font>

295
00:13:02,780 --> 00:13:12,380
so it's a<font color="#CCCCCC"> 23° so let's say</font><font color="#E5E5E5"> 23.5 and it</font>

296
00:13:10,340 --> 00:13:14,000
changes again<font color="#CCCCCC"> it just changed the</font>

297
00:13:12,380 --> 00:13:15,560
configuration over the air of the of the

298
00:13:14,000 --> 00:13:18,200
files<font color="#CCCCCC"> the application isn't aware</font><font color="#E5E5E5"> but</font>

299
00:13:15,560 --> 00:13:21,079
<font color="#E5E5E5">you see no new data is coming in</font><font color="#CCCCCC"> right</font>

300
00:13:18,200 --> 00:13:26,390
now<font color="#E5E5E5"> now of course the proof that it will</font>

301
00:13:21,080 --> 00:13:34,910
I need to increase<font color="#CCCCCC"> the temperature</font><font color="#E5E5E5"> which</font>

302
00:13:26,390 --> 00:13:41,240
I hope it does now<font color="#E5E5E5"> okay it's even of</font>

303
00:13:34,910 --> 00:13:43,069
<font color="#E5E5E5">skill</font><font color="#CCCCCC"> so back to the presentation so</font>

304
00:13:41,240 --> 00:13:45,170
<font color="#E5E5E5">yeah what we did was we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> modified</font>

305
00:13:43,070 --> 00:13:47,420
this file and again application wasn't

306
00:13:45,170 --> 00:13:53,079
wasn't<font color="#E5E5E5"> aware that we</font><font color="#CCCCCC"> doing it and still</font>

307
00:13:47,420 --> 00:13:53,079
we modified the behavior of<font color="#E5E5E5"> our network</font>

308
00:13:53,170 --> 00:13:58,250
okay<font color="#E5E5E5"> so to recap</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> two main</font>

309
00:13:56,330 --> 00:14:00,770
communication schemes where you push

310
00:13:58,250 --> 00:14:04,160
when you have periodic data or sensor

311
00:14:00,770 --> 00:14:05,990
triggered data and<font color="#E5E5E5"> pull if you want to</font>

312
00:14:04,160 --> 00:14:08,630
do want<font color="#CCCCCC"> to trigger</font><font color="#E5E5E5"> or want to query</font><font color="#CCCCCC"> on</font>

313
00:14:05,990 --> 00:14:10,460
some<font color="#E5E5E5"> external event basically</font><font color="#CCCCCC"> in</font>

314
00:14:08,630 --> 00:14:14,689
practice<font color="#E5E5E5"> you would use a combination of</font>

315
00:14:10,460 --> 00:14:16,160
<font color="#E5E5E5">both</font><font color="#CCCCCC"> you would enable pool to to to</font>

316
00:14:14,690 --> 00:14:19,160
configure the<font color="#CCCCCC"> node and you</font><font color="#E5E5E5"> would push</font>

317
00:14:16,160 --> 00:14:21,020
most<font color="#E5E5E5"> data which is triggered by the</font>

318
00:14:19,160 --> 00:14:24,980
sensor there also<font color="#E5E5E5"> some other options</font>

319
00:14:21,020 --> 00:14:27,050
<font color="#CCCCCC">with I didn't mentioned a lot</font><font color="#E5E5E5"> or which I</font>

320
00:14:24,980 --> 00:14:28,970
didn't go into detail but<font color="#CCCCCC"> for instance</font>

321
00:14:27,050 --> 00:14:31,120
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> have dormant sessions for non</font>

322
00:14:28,970 --> 00:14:33,890
<font color="#E5E5E5">urgent downlink or you could have</font>

323
00:14:31,120 --> 00:14:36,560
configure your gateway<font color="#E5E5E5"> to do Scannell</font>

324
00:14:33,890 --> 00:14:38,930
<font color="#CCCCCC">channeling very fast</font><font color="#E5E5E5"> on a few channels</font>

325
00:14:36,560 --> 00:14:40,250
<font color="#E5E5E5">and then your note would pick a random</font>

326
00:14:38,930 --> 00:14:43,489
<font color="#E5E5E5">channel it would do a very small</font>

327
00:14:40,250 --> 00:14:46,040
advertising frame to lock your gateway

328
00:14:43,490 --> 00:14:48,170
which would give you some so frequency

329
00:14:46,040 --> 00:14:52,310
agility and increase throughput<font color="#E5E5E5"> for</font>

330
00:14:48,170 --> 00:14:54,740
instance so I already I only<font color="#E5E5E5"> mentioned a</font>

331
00:14:52,310 --> 00:14:57,650
very<font color="#E5E5E5"> small part of the stack but here</font>

332
00:14:54,740 --> 00:15:00,280
you can<font color="#E5E5E5"> see the layer a few concepts</font>

333
00:14:57,650 --> 00:15:00,280
which are there

334
00:15:01,200 --> 00:15:06,780
so for instance<font color="#E5E5E5"> we of quality-of-service</font>

335
00:15:03,360 --> 00:15:10,650
<font color="#E5E5E5">power out</font><font color="#CCCCCC"> of scaling one of routing</font>

336
00:15:06,780 --> 00:15:12,780
<font color="#CCCCCC">Network layer is encryption we have</font>

337
00:15:10,650 --> 00:15:15,780
three<font color="#CCCCCC"> different data rates</font><font color="#E5E5E5"> at three</font>

338
00:15:12,780 --> 00:15:18,630
different<font color="#E5E5E5"> bands so gears bands</font>

339
00:15:15,780 --> 00:15:21,030
there's also<font color="#E5E5E5"> Laura in gray</font><font color="#CCCCCC"> weisstein</font>

340
00:15:18,630 --> 00:15:25,439
<font color="#CCCCCC">gray</font><font color="#E5E5E5"> it's in part of the the spec by</font>

341
00:15:21,030 --> 00:15:26,760
itself<font color="#E5E5E5"> so but we use it just to test the</font>

342
00:15:25,440 --> 00:15:31,740
<font color="#E5E5E5">Laura</font><font color="#CCCCCC"> five beneath it and it doesn't</font>

343
00:15:26,760 --> 00:15:35,250
<font color="#CCCCCC">change</font><font color="#E5E5E5"> anything above the spec so I</font>

344
00:15:31,740 --> 00:15:37,830
talked a lot in<font color="#CCCCCC"> general about</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> seven</font>

345
00:15:35,250 --> 00:15:40,110
<font color="#CCCCCC">all this</font><font color="#E5E5E5"> action</font><font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> the open</font>

346
00:15:37,830 --> 00:15:41,460
<font color="#E5E5E5">source implementation of this so the</font>

347
00:15:40,110 --> 00:15:44,370
goal is to<font color="#E5E5E5"> be a reference implementation</font>

348
00:15:41,460 --> 00:15:45,990
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the spec and we want to generate</font>

349
00:15:44,370 --> 00:15:48,870
<font color="#CCCCCC">interesting the spec and</font><font color="#E5E5E5"> have people</font>

350
00:15:45,990 --> 00:15:51,780
testing it<font color="#E5E5E5"> and contributing it's also</font>

351
00:15:48,870 --> 00:15:55,260
<font color="#E5E5E5">targeted it's a</font><font color="#CCCCCC"> patch license</font><font color="#E5E5E5"> - so it's</font>

352
00:15:51,780 --> 00:15:58,290
very useful for commercial products as

353
00:15:55,260 --> 00:16:00,660
well<font color="#CCCCCC"> and without</font><font color="#E5E5E5"> going too</font><font color="#CCCCCC"> much into</font>

354
00:15:58,290 --> 00:16:01,980
detail<font color="#E5E5E5"> the architecture is a bit like</font>

355
00:16:00,660 --> 00:16:04,560
<font color="#E5E5E5">this where you have a hardware</font>

356
00:16:01,980 --> 00:16:07,470
abstraction layer which has<font color="#E5E5E5"> some API</font>

357
00:16:04,560 --> 00:16:10,489
<font color="#E5E5E5">sand you have different drivers for MCU</font>

358
00:16:07,470 --> 00:16:12,630
peripherals and for radios<font color="#E5E5E5"> and they're</font>

359
00:16:10,490 --> 00:16:15,060
glued together<font color="#E5E5E5"> basically by something</font>

360
00:16:12,630 --> 00:16:17,760
<font color="#E5E5E5">called a platform where you can specify</font>

361
00:16:15,060 --> 00:16:20,400
a combination of drivers<font color="#E5E5E5"> and you specify</font>

362
00:16:17,760 --> 00:16:21,990
the wiring on<font color="#E5E5E5"> the physical board so the</font>

363
00:16:20,400 --> 00:16:24,230
platform<font color="#CCCCCC"> is more or less your physical</font>

364
00:16:21,990 --> 00:16:27,090
board and they have<font color="#CCCCCC"> a framework</font>

365
00:16:24,230 --> 00:16:30,330
components which contains logging and

366
00:16:27,090 --> 00:16:31,950
scheduling for<font color="#E5E5E5"> instance and then the</font>

367
00:16:30,330 --> 00:16:34,920
modules contains the network<font color="#CCCCCC"> stacks who</font>

368
00:16:31,950 --> 00:16:37,560
<font color="#E5E5E5">have the dash</font><font color="#CCCCCC"> seven stack</font><font color="#E5E5E5"> there we also</font>

369
00:16:34,920 --> 00:16:42,150
recently added<font color="#E5E5E5"> the lower one stack to</font>

370
00:16:37,560 --> 00:16:44,310
this with<font color="#E5E5E5"> multi-modality and then in</font>

371
00:16:42,150 --> 00:16:45,900
terms<font color="#E5E5E5"> of hardware we focus now mainly on</font>

372
00:16:44,310 --> 00:16:49,739
the<font color="#CCCCCC"> Murata module which is</font><font color="#E5E5E5"> also the</font>

373
00:16:45,900 --> 00:16:53,189
<font color="#E5E5E5">module which is used here</font><font color="#CCCCCC"> so it's an</font>

374
00:16:49,740 --> 00:16:56,430
stm32 l0 microcontroller using an

375
00:16:53,190 --> 00:16:58,110
eccentric chip on on one module which<font color="#CCCCCC"> is</font>

376
00:16:56,430 --> 00:17:00,449
very easy<font color="#E5E5E5"> to integrate you need a</font>

377
00:16:58,110 --> 00:17:03,360
<font color="#E5E5E5">minimal amount of external components</font>

378
00:17:00,450 --> 00:17:05,580
you just put it<font color="#E5E5E5"> on the board</font>

379
00:17:03,360 --> 00:17:07,170
especially<font color="#CCCCCC"> even if you have an existing</font>

380
00:17:05,579 --> 00:17:09,240
board where your application is<font color="#CCCCCC"> running</font>

381
00:17:07,170 --> 00:17:12,150
on one microcontroller<font color="#E5E5E5"> you</font><font color="#CCCCCC"> cannot miss</font>

382
00:17:09,240 --> 00:17:12,810
<font color="#CCCCCC">moriata</font><font color="#E5E5E5"> module and use it as a</font><font color="#CCCCCC"> dash 7</font>

383
00:17:12,150 --> 00:17:14,640
modem

384
00:17:12,810 --> 00:17:16,649
and then it's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> easy to integrate</font>

385
00:17:14,640 --> 00:17:18,510
this your application does<font color="#CCCCCC"> not interfere</font>

386
00:17:16,650 --> 00:17:22,770
with the<font color="#CCCCCC"> stack timings and</font><font color="#E5E5E5"> vice versa</font>

387
00:17:18,510 --> 00:17:24,690
<font color="#CCCCCC">and also it</font><font color="#E5E5E5"> could make it</font><font color="#CCCCCC"> easier to to</font>

388
00:17:22,770 --> 00:17:29,580
do certification because<font color="#E5E5E5"> your modem can</font>

389
00:17:24,690 --> 00:17:31,680
be certified<font color="#E5E5E5"> separately so that</font><font color="#CCCCCC"> was the</font>

390
00:17:29,580 --> 00:17:34,379
<font color="#E5E5E5">the firmware part we also have some</font>

391
00:17:31,680 --> 00:17:36,570
<font color="#E5E5E5">related tools the by</font><font color="#CCCCCC"> d7a framework</font>

392
00:17:34,380 --> 00:17:39,780
<font color="#CCCCCC">already mentioned so parser and</font>

393
00:17:36,570 --> 00:17:43,050
generator for out frames out or frames

394
00:17:39,780 --> 00:17:45,480
<font color="#E5E5E5">sorry</font><font color="#CCCCCC"> it also contains a modem</font><font color="#E5E5E5"> API which</font>

395
00:17:43,050 --> 00:17:47,730
is used to<font color="#CCCCCC"> to interact with with the</font>

396
00:17:45,480 --> 00:17:51,150
modem<font color="#CCCCCC"> there's some examples and tools</font>

397
00:17:47,730 --> 00:17:53,490
<font color="#E5E5E5">and a basic web UI and then we also have</font>

398
00:17:51,150 --> 00:17:56,430
the the things<font color="#E5E5E5"> about gateway which was</font>

399
00:17:53,490 --> 00:17:59,640
used<font color="#CCCCCC"> for injecting</font><font color="#E5E5E5"> the data in</font><font color="#CCCCCC"> kingsport</font>

400
00:17:56,430 --> 00:18:01,290
<font color="#CCCCCC">so in that also uses</font><font color="#E5E5E5"> PI D</font><font color="#CCCCCC"> seven eight to</font>

401
00:17:59,640 --> 00:18:04,560
talk with<font color="#CCCCCC"> a modem</font><font color="#E5E5E5"> but on the other end</font>

402
00:18:01,290 --> 00:18:09,090
implements<font color="#CCCCCC"> MQTT</font><font color="#E5E5E5"> api</font><font color="#CCCCCC"> of things port and</font>

403
00:18:04,560 --> 00:18:12,720
it allows you to to transmit<font color="#E5E5E5"> your</font>

404
00:18:09,090 --> 00:18:15,360
telemetry data<font color="#E5E5E5"> and to manage your your</font>

405
00:18:12,720 --> 00:18:17,400
devices<font color="#E5E5E5"> also for the things borghese you</font>

406
00:18:15,360 --> 00:18:19,649
can provide very simple<font color="#E5E5E5"> plugins to</font><font color="#CCCCCC"> parse</font>

407
00:18:17,400 --> 00:18:21,720
your<font color="#CCCCCC"> sensory data</font><font color="#E5E5E5"> which is why here we</font>

408
00:18:19,650 --> 00:18:23,010
show the<font color="#E5E5E5"> temperature data and not the</font>

409
00:18:21,720 --> 00:18:25,140
two bytes<font color="#E5E5E5"> you saw before</font>

410
00:18:23,010 --> 00:18:27,750
<font color="#E5E5E5">they're just parsed before entering the</font>

411
00:18:25,140 --> 00:18:30,690
things<font color="#CCCCCC"> board platform</font><font color="#E5E5E5"> and it enters the</font>

412
00:18:27,750 --> 00:18:34,740
<font color="#E5E5E5">air as temperature data and then finally</font>

413
00:18:30,690 --> 00:18:37,490
we have a test suite which is<font color="#E5E5E5"> running on</font>

414
00:18:34,740 --> 00:18:41,790
physical<font color="#CCCCCC"> modems so we attach it</font><font color="#E5E5E5"> into a</font>

415
00:18:37,490 --> 00:18:43,620
PC<font color="#E5E5E5"> and we execute some tests which are</font>

416
00:18:41,790 --> 00:18:46,560
written in<font color="#E5E5E5"> Python and also using</font><font color="#CCCCCC"> the</font>

417
00:18:43,620 --> 00:18:49,010
Python framework and that's<font color="#E5E5E5"> driven by by</font>

418
00:18:46,560 --> 00:18:51,389
Jenkins<font color="#CCCCCC"> the goal there is to</font><font color="#E5E5E5"> test a full</font>

419
00:18:49,010 --> 00:18:54,570
behavior of the of the spec you<font color="#CCCCCC"> know the</font>

420
00:18:51,390 --> 00:18:58,880
<font color="#E5E5E5">stack but we're not quite</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> yet but</font>

421
00:18:54,570 --> 00:19:02,159
it's still useful already the next<font color="#E5E5E5"> steps</font>

422
00:18:58,880 --> 00:19:04,080
we're not feature complete<font color="#E5E5E5"> yet</font><font color="#CCCCCC"> to the</font>

423
00:19:02,160 --> 00:19:05,970
the current version of<font color="#CCCCCC"> the spec we're</font>

424
00:19:04,080 --> 00:19:07,740
working on but we're now at the<font color="#E5E5E5"> point</font>

425
00:19:05,970 --> 00:19:09,780
<font color="#CCCCCC">where a lot of pieces</font><font color="#E5E5E5"> of the puzzles are</font>

426
00:19:07,740 --> 00:19:12,030
actually available<font color="#CCCCCC"> and you could do a</font>

427
00:19:09,780 --> 00:19:14,310
lot<font color="#CCCCCC"> of things with the current</font>

428
00:19:12,030 --> 00:19:16,139
implementation already but still<font color="#E5E5E5"> we need</font>

429
00:19:14,310 --> 00:19:18,419
to<font color="#E5E5E5"> progress this further in the meantime</font>

430
00:19:16,140 --> 00:19:20,280
we're also discussing<font color="#CCCCCC"> in version 1.2</font><font color="#E5E5E5"> of</font>

431
00:19:18,420 --> 00:19:22,610
the specification so this needs to<font color="#CCCCCC"> be</font>

432
00:19:20,280 --> 00:19:25,410
implemented<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> of course</font>

433
00:19:22,610 --> 00:19:27,540
then what we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to provide next also</font>

434
00:19:25,410 --> 00:19:29,130
<font color="#CCCCCC">is to make it easier to interface from</font>

435
00:19:27,540 --> 00:19:31,950
<font color="#E5E5E5">an application microcontroller with the</font>

436
00:19:29,130 --> 00:19:35,670
modem<font color="#CCCCCC"> so we want to provide a see modem</font>

437
00:19:31,950 --> 00:19:39,930
library and<font color="#E5E5E5"> also enable over-the-air</font>

438
00:19:35,670 --> 00:19:42,720
updates which is one one big advantage

439
00:19:39,930 --> 00:19:46,620
of -<font color="#CCCCCC"> given that you have a low latency</font>

440
00:19:42,720 --> 00:19:48,300
<font color="#CCCCCC">darlink to do this actually then finally</font>

441
00:19:46,620 --> 00:19:52,830
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to enable porting to other</font>

442
00:19:48,300 --> 00:19:55,200
operating systems so<font color="#CCCCCC"> always this 7</font><font color="#E5E5E5"> was</font>

443
00:19:52,830 --> 00:19:57,570
there for historical reasons<font color="#CCCCCC"> but we're</font>

444
00:19:55,200 --> 00:19:59,370
not<font color="#E5E5E5"> very interested in developing the</font>

445
00:19:57,570 --> 00:20:01,770
operating system by ourselves so

446
00:19:59,370 --> 00:20:04,469
<font color="#E5E5E5">maintaining the scheduler</font><font color="#CCCCCC"> or the dr.</font>

447
00:20:01,770 --> 00:20:07,379
abstraction layer<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not our goal so</font>

448
00:20:04,470 --> 00:20:10,020
ideally we<font color="#E5E5E5"> want to support this to</font>

449
00:20:07,380 --> 00:20:12,030
another operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> now we're</font>

450
00:20:10,020 --> 00:20:15,629
looking<font color="#E5E5E5"> into</font><font color="#CCCCCC"> that we also we did some</font>

451
00:20:12,030 --> 00:20:18,420
first step steps with<font color="#E5E5E5"> riot so maybe in</font>

452
00:20:15,630 --> 00:20:21,660
the future<font color="#E5E5E5"> we will be using right</font><font color="#CCCCCC"> you'll</font>

453
00:20:18,420 --> 00:20:24,330
see so that's<font color="#E5E5E5"> about it</font><font color="#CCCCCC"> I have a few</font>

454
00:20:21,660 --> 00:20:25,080
links here<font color="#E5E5E5"> to the documentation</font><font color="#CCCCCC"> to get</font>

455
00:20:24,330 --> 00:20:27,000
you started

456
00:20:25,080 --> 00:20:29,189
<font color="#CCCCCC">- the code to do mailing lists and</font>

457
00:20:27,000 --> 00:20:32,240
<font color="#CCCCCC">Twitter and also</font><font color="#E5E5E5"> you can download the</font>

458
00:20:29,190 --> 00:20:39,080
spec<font color="#E5E5E5"> for free from the Alliance</font><font color="#CCCCCC"> website</font>

459
00:20:32,240 --> 00:20:39,080
so<font color="#CCCCCC"> that was it questions</font>

460
00:20:49,030 --> 00:20:55,310
it's not specified<font color="#CCCCCC"> so it's not that</font><font color="#E5E5E5"> it's</font>

461
00:20:53,150 --> 00:20:56,780
<font color="#E5E5E5">not possible</font><font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> not the way how</font><font color="#CCCCCC"> to</font>

462
00:20:55,310 --> 00:20:59,330
do routing<font color="#E5E5E5"> for instance it's</font><font color="#CCCCCC"> not</font>

463
00:20:56,780 --> 00:21:02,030
specified<font color="#E5E5E5"> in the spec so what we do is</font>

464
00:20:59,330 --> 00:21:05,360
in each star or<font color="#E5E5E5"> three so using one</font><font color="#CCCCCC"> Hope</font>

465
00:21:02,030 --> 00:21:07,430
<font color="#E5E5E5">Atmos this in the adult in the</font>

466
00:21:05,360 --> 00:21:09,439
specification<font color="#E5E5E5"> but if you want to do more</font>

467
00:21:07,430 --> 00:21:11,480
<font color="#E5E5E5">complex routing or meshing then it will</font>

468
00:21:09,440 --> 00:21:13,850
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be handled by</font><font color="#CCCCCC"> an by an upper</font>

469
00:21:11,480 --> 00:21:17,420
layer so it's<font color="#E5E5E5"> not something we we</font>

470
00:21:13,850 --> 00:21:18,649
support<font color="#E5E5E5"> for now also because the due</font><font color="#CCCCCC"> to</font>

471
00:21:17,420 --> 00:21:20,870
the fact that<font color="#E5E5E5"> we're using sub</font><font color="#CCCCCC"> diggers</font>

472
00:21:18,650 --> 00:21:24,530
<font color="#E5E5E5">you can do cover quite a lot of range</font>

473
00:21:20,870 --> 00:21:29,810
with<font color="#E5E5E5"> only one up so meshing is not</font>

474
00:21:24,530 --> 00:21:31,399
that's necessary anymore<font color="#E5E5E5"> and yeah it</font>

475
00:21:29,810 --> 00:21:40,870
would require<font color="#E5E5E5"> more synchronization of</font>

476
00:21:31,400 --> 00:21:40,870
course so<font color="#CCCCCC"> advise are</font><font color="#E5E5E5"> you storing them</font>

477
00:21:41,260 --> 00:21:49,970
<font color="#E5E5E5">yeah so the question</font><font color="#CCCCCC"> was if the fast</font>

478
00:21:47,900 --> 00:21:51,380
we're writing<font color="#E5E5E5"> where</font><font color="#CCCCCC"> are distort</font><font color="#E5E5E5"> or is</font>

479
00:21:49,970 --> 00:21:53,720
stored in RAM or<font color="#CCCCCC"> are they</font><font color="#E5E5E5"> sort more</font>

480
00:21:51,380 --> 00:21:57,500
permanently<font color="#E5E5E5"> the answer is right now</font>

481
00:21:53,720 --> 00:22:01,120
they're stored in RAM<font color="#CCCCCC"> but they should be</font>

482
00:21:57,500 --> 00:22:03,740
stored<font color="#E5E5E5"> in a more permanent setting</font>

483
00:22:01,120 --> 00:22:07,360
<font color="#E5E5E5">depending on the file you could</font>

484
00:22:03,740 --> 00:22:07,360
configure you have<font color="#E5E5E5"> a transient file</font>

485
00:22:10,100 --> 00:22:18,830
<font color="#CCCCCC">I switch which we changed which</font>

486
00:22:13,390 --> 00:22:20,740
you know for<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> something coming</font>

487
00:22:18,830 --> 00:22:23,149
from<font color="#E5E5E5"> that</font><font color="#CCCCCC"> sensor</font><font color="#E5E5E5"> you could just as well</font>

488
00:22:20,740 --> 00:22:25,640
<font color="#CCCCCC">keeping</font><font color="#E5E5E5"> around because you will just</font>

489
00:22:23,150 --> 00:22:28,309
read it again but configuration files of

490
00:22:25,640 --> 00:22:30,559
<font color="#CCCCCC">course need to be stored in Rome but</font>

491
00:22:28,309 --> 00:22:32,000
that's something which<font color="#CCCCCC"> is on our to-do</font>

492
00:22:30,559 --> 00:22:33,980
list which is not there yet

493
00:22:32,000 --> 00:22:35,840
for the<font color="#E5E5E5"> moment so right now it's in RAM</font>

494
00:22:33,980 --> 00:22:38,059
<font color="#E5E5E5">everything is around and how do you</font>

495
00:22:35,840 --> 00:22:43,220
<font color="#E5E5E5">define who is</font><font color="#CCCCCC"> allowed to write which</font>

496
00:22:38,059 --> 00:22:45,440
file<font color="#CCCCCC"> there's a concept of a remote node</font>

497
00:22:43,220 --> 00:22:48,799
is always<font color="#E5E5E5"> a guest by default and you</font>

498
00:22:45,440 --> 00:22:51,799
<font color="#E5E5E5">have you</font><font color="#CCCCCC"> have access permissions of</font>

499
00:22:48,799 --> 00:22:56,750
<font color="#CCCCCC">guest user and</font><font color="#E5E5E5"> root so remote user is a</font>

500
00:22:51,799 --> 00:22:59,149
guest<font color="#CCCCCC"> then the</font><font color="#E5E5E5"> local user is the</font><font color="#CCCCCC"> root by</font>

501
00:22:56,750 --> 00:23:03,080
default and a serial<font color="#E5E5E5"> over the serial</font>

502
00:22:59,149 --> 00:23:05,770
link is the user<font color="#CCCCCC"> so we have some</font>

503
00:23:03,080 --> 00:23:05,770
permissions there

504
00:23:09,149 --> 00:23:13,279
<font color="#E5E5E5">all right more questions</font><font color="#CCCCCC"> enough</font>

505
00:23:13,640 --> 00:23:23,099
<font color="#E5E5E5">okay that's it okay thank you</font>

506
00:23:16,960 --> 00:23:23,099
[Applause]

