1
00:04:58,950 --> 00:05:06,219
hello perfect<font color="#E5E5E5"> okay so how do works</font><font color="#CCCCCC"> now</font>

2
00:05:03,000 --> 00:05:07,630
<font color="#CCCCCC">so at the end</font><font color="#E5E5E5"> you get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 13 so it doesn't</font>

3
00:05:06,220 --> 00:05:09,700
<font color="#E5E5E5">call</font><font color="#CCCCCC"> counter valuing works</font><font color="#E5E5E5"> well it's</font>

4
00:05:07,630 --> 00:05:13,360
<font color="#E5E5E5">actually called constant folding but the</font>

5
00:05:09,700 --> 00:05:14,620
difference is moot<font color="#E5E5E5"> so now we get to</font><font color="#CCCCCC"> more</font>

6
00:05:13,360 --> 00:05:16,540
complex<font color="#E5E5E5"> stuff imagine you have a</font>

7
00:05:14,620 --> 00:05:18,970
function it has<font color="#E5E5E5"> local variables and it</font>

8
00:05:16,540 --> 00:05:21,580
has some loops and stuff<font color="#E5E5E5"> so how do you</font>

9
00:05:18,970 --> 00:05:24,430
consult that<font color="#E5E5E5"> like turn that into a tree</font>

10
00:05:21,580 --> 00:05:26,080
and start collapsing it like that's not

11
00:05:24,430 --> 00:05:28,210
<font color="#E5E5E5">really possible this is code that you</font>

12
00:05:26,080 --> 00:05:31,060
walk down<font color="#E5E5E5"> from the top</font><font color="#CCCCCC"> to the bottom and</font>

13
00:05:28,210 --> 00:05:33,010
you execute<font color="#CCCCCC"> each instruction after each</font>

14
00:05:31,060 --> 00:05:34,630
other<font color="#E5E5E5"> like you would do at runtime but</font>

15
00:05:33,010 --> 00:05:36,990
<font color="#E5E5E5">this is not possible</font><font color="#CCCCCC"> if you try to</font>

16
00:05:34,630 --> 00:05:41,110
<font color="#CCCCCC">combine things like you cannot combine</font>

17
00:05:36,990 --> 00:05:42,520
<font color="#CCCCCC">why divides</font><font color="#E5E5E5"> equals</font><font color="#CCCCCC"> two because what are</font>

18
00:05:41,110 --> 00:05:44,380
you combining there there's there's no

19
00:05:42,520 --> 00:05:46,930
two values to combine to something else

20
00:05:44,380 --> 00:05:49,150
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we were trying to</font><font color="#E5E5E5"> look up for a look</font>

21
00:05:46,930 --> 00:05:50,710
<font color="#E5E5E5">at something new where we could do local</font>

22
00:05:49,150 --> 00:05:52,299
<font color="#E5E5E5">variables which are not possible</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> in</font>

23
00:05:50,710 --> 00:05:55,180
constants<font color="#E5E5E5"> right now where you can do</font>

24
00:05:52,300 --> 00:05:56,650
mutation and where we can do loops these

25
00:05:55,180 --> 00:05:58,060
<font color="#E5E5E5">are things that we want</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to do</font>

26
00:05:56,650 --> 00:06:00,760
it like right<font color="#CCCCCC"> now you cannot do them at</font>

27
00:05:58,060 --> 00:06:02,980
compile time<font color="#E5E5E5"> you you just can do them at</font>

28
00:06:00,760 --> 00:06:04,539
<font color="#CCCCCC">run time but even if the if there's an</font>

29
00:06:02,980 --> 00:06:06,220
error in<font color="#E5E5E5"> this program you won't detect</font>

30
00:06:04,540 --> 00:06:09,820
<font color="#E5E5E5">it at compile time it'll panic at</font>

31
00:06:06,220 --> 00:06:10,990
runtime<font color="#CCCCCC"> so the compiler developers</font>

32
00:06:09,820 --> 00:06:14,070
<font color="#E5E5E5">decided to do it right</font>

33
00:06:10,990 --> 00:06:16,510
they<font color="#E5E5E5"> created</font><font color="#CCCCCC"> a mirror which is a</font>

34
00:06:14,070 --> 00:06:19,300
structure<font color="#CCCCCC"> that allows you to</font><font color="#E5E5E5"> do the</font>

35
00:06:16,510 --> 00:06:21,550
sequential constant<font color="#CCCCCC"> evaluation instead</font>

36
00:06:19,300 --> 00:06:23,290
of the folding<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then somebody wrote</font>

37
00:06:21,550 --> 00:06:26,380
<font color="#CCCCCC">something called Miri which is the mere</font>

38
00:06:23,290 --> 00:06:29,919
interpreter which allows you<font color="#CCCCCC"> to evaluate</font>

39
00:06:26,380 --> 00:06:32,169
<font color="#CCCCCC">mere code and if the mere code contains</font>

40
00:06:29,919 --> 00:06:33,880
<font color="#E5E5E5">solely constants well then you can just</font>

41
00:06:32,169 --> 00:06:35,500
<font color="#CCCCCC">evaluate it to the end and look at the</font>

42
00:06:33,880 --> 00:06:38,200
end result<font color="#CCCCCC"> and then store the end result</font>

43
00:06:35,500 --> 00:06:40,960
<font color="#E5E5E5">and when you started</font><font color="#CCCCCC"> doing it they were</font>

44
00:06:38,200 --> 00:06:43,510
looking<font color="#E5E5E5"> at like integers and and adding</font>

45
00:06:40,960 --> 00:06:45,159
them and similar things like<font color="#E5E5E5"> that but at</font>

46
00:06:43,510 --> 00:06:48,550
some point they kind<font color="#E5E5E5"> of got crazy and</font>

47
00:06:45,160 --> 00:06:51,100
then we got pointers and<font color="#E5E5E5"> pointer</font>

48
00:06:48,550 --> 00:06:53,050
arithmetic<font color="#E5E5E5"> and calling C functions and</font>

49
00:06:51,100 --> 00:06:54,970
calling<font color="#CCCCCC"> sis calls and</font><font color="#E5E5E5"> yeah right now</font>

50
00:06:53,050 --> 00:06:57,640
we're not<font color="#CCCCCC"> quite at reading files yet</font><font color="#E5E5E5"> but</font>

51
00:06:54,970 --> 00:07:00,040
we can do print line and reading from s

52
00:06:57,640 --> 00:07:04,419
<font color="#CCCCCC">Citian so if you just</font><font color="#E5E5E5"> pipe your file</font>

53
00:07:00,040 --> 00:07:05,950
<font color="#E5E5E5">until the SDN you can read files that's</font>

54
00:07:04,419 --> 00:07:06,969
a little bit much<font color="#CCCCCC"> for console evaluation</font>

55
00:07:05,950 --> 00:07:10,900
<font color="#E5E5E5">but well</font>

56
00:07:06,970 --> 00:07:13,810
we try to<font color="#E5E5E5"> get there so last year I added</font>

57
00:07:10,900 --> 00:07:15,609
<font color="#CCCCCC">Miriah to Rusty as an experiment where</font>

58
00:07:13,810 --> 00:07:17,620
we were running<font color="#E5E5E5"> the old</font><font color="#CCCCCC"> console a little</font>

59
00:07:15,610 --> 00:07:19,450
next<font color="#E5E5E5"> to the new one and comparing them</font>

60
00:07:17,620 --> 00:07:20,860
<font color="#E5E5E5">so just</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure like we're not</font>

61
00:07:19,450 --> 00:07:22,420
introducing<font color="#CCCCCC"> any weird stuff that</font><font color="#E5E5E5"> we</font>

62
00:07:20,860 --> 00:07:25,240
don't<font color="#E5E5E5"> want to have because right now we</font>

63
00:07:22,420 --> 00:07:26,740
<font color="#E5E5E5">just want to get the new we're</font><font color="#CCCCCC"> myriad so</font>

64
00:07:25,240 --> 00:07:28,150
we can get<font color="#E5E5E5"> new</font><font color="#CCCCCC"> features in the future</font>

65
00:07:26,740 --> 00:07:30,580
<font color="#E5E5E5">but we don't want to break anybody's</font>

66
00:07:28,150 --> 00:07:34,539
code<font color="#E5E5E5"> so that was running well in</font>

67
00:07:30,580 --> 00:07:37,590
December<font color="#CCCCCC"> it was a big pull request</font><font color="#E5E5E5"> a</font>

68
00:07:34,540 --> 00:07:40,900
<font color="#E5E5E5">trust</font><font color="#CCCCCC"> fest which had like</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1600 commits</font>

69
00:07:37,590 --> 00:07:43,239
<font color="#E5E5E5">it has</font><font color="#CCCCCC"> 7k lines of code added to the</font>

70
00:07:40,900 --> 00:07:46,780
rest compiler which is a lot but you

71
00:07:43,240 --> 00:07:48,430
have<font color="#E5E5E5"> to remember this is something</font>

72
00:07:46,780 --> 00:07:50,409
<font color="#E5E5E5">that's essentially a virtual</font><font color="#CCCCCC"> machine</font>

73
00:07:48,430 --> 00:07:53,140
running<font color="#E5E5E5"> your rest code at compile time</font>

74
00:07:50,410 --> 00:07:57,730
<font color="#E5E5E5">and producing a</font><font color="#CCCCCC"> value that you can</font><font color="#E5E5E5"> then</font>

75
00:07:53,140 --> 00:08:00,070
compile down into<font color="#E5E5E5"> your final binary the</font>

76
00:07:57,730 --> 00:08:00,910
next step was well removing the old

77
00:08:00,070 --> 00:08:03,550
console valuator

78
00:08:00,910 --> 00:08:05,740
which touched another<font color="#CCCCCC"> 6,000 lines</font><font color="#E5E5E5"> of</font>

79
00:08:03,550 --> 00:08:08,080
<font color="#CCCCCC">code but it didn't add anything</font><font color="#E5E5E5"> new</font>

80
00:08:05,740 --> 00:08:10,860
<font color="#E5E5E5">instead it removed all the old crap that</font>

81
00:08:08,080 --> 00:08:13,840
we had in there any old compiler<font color="#E5E5E5"> and</font>

82
00:08:10,860 --> 00:08:15,850
well now it's gone<font color="#CCCCCC"> the pod</font><font color="#E5E5E5"> request isn't</font>

83
00:08:13,840 --> 00:08:17,919
merged yet but it's running<font color="#E5E5E5"> right now is</font>

84
00:08:15,850 --> 00:08:19,120
the rest<font color="#E5E5E5"> compiled developers are</font><font color="#CCCCCC"> merging</font>

85
00:08:17,919 --> 00:08:21,340
it at<font color="#E5E5E5"> the moment</font><font color="#CCCCCC"> it's basically already</font>

86
00:08:19,120 --> 00:08:23,590
<font color="#E5E5E5">approved just checking every single</font>

87
00:08:21,340 --> 00:08:24,070
crate and<font color="#CCCCCC"> create sale</font><font color="#E5E5E5"> whether we don't</font>

88
00:08:23,590 --> 00:08:25,840
break it

89
00:08:24,070 --> 00:08:28,750
with the<font color="#CCCCCC"> gnu compiler</font><font color="#E5E5E5"> because well we</font>

90
00:08:25,840 --> 00:08:30,820
don't want to<font color="#E5E5E5"> break anybody's code so</font>

91
00:08:28,750 --> 00:08:33,039
let's<font color="#CCCCCC"> go back to the</font><font color="#E5E5E5"> bottom</font><font color="#CCCCCC"> what is</font><font color="#E5E5E5"> Mir</font>

92
00:08:30,820 --> 00:08:34,929
<font color="#E5E5E5">Mir is called the medium intermediate</font>

93
00:08:33,039 --> 00:08:37,479
representation where what's that well

94
00:08:34,929 --> 00:08:40,329
it's basically<font color="#E5E5E5"> an assembler assembler</font>

95
00:08:37,479 --> 00:08:43,960
language but it's very<font color="#E5E5E5"> close to what</font><font color="#CCCCCC"> how</font>

96
00:08:40,330 --> 00:08:47,110
rust builds<font color="#E5E5E5"> your your code</font><font color="#CCCCCC"> so you have</font>

97
00:08:43,960 --> 00:08:50,110
types you don't have any registers you

98
00:08:47,110 --> 00:08:51,250
have<font color="#E5E5E5"> local</font><font color="#CCCCCC"> variables and</font><font color="#E5E5E5"> it's already</font>

99
00:08:50,110 --> 00:08:52,810
used for<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> Baro</font>

100
00:08:51,250 --> 00:08:54,250
checking is done<font color="#CCCCCC"> completely on</font><font color="#E5E5E5"> the</font>

101
00:08:52,810 --> 00:08:55,839
mirror so that's where we're getting

102
00:08:54,250 --> 00:08:58,650
nonlinear<font color="#CCCCCC"> lifetimes in the future from</font>

103
00:08:55,839 --> 00:09:01,089
from Mir and<font color="#E5E5E5"> Baro checking on the mirror</font>

104
00:08:58,650 --> 00:09:03,069
<font color="#E5E5E5">also in the</font><font color="#CCCCCC"> future we might be able to</font>

105
00:09:01,089 --> 00:09:04,480
do guaranteed optimizations like tail

106
00:09:03,070 --> 00:09:07,410
call optimization and<font color="#E5E5E5"> so on on the</font>

107
00:09:04,480 --> 00:09:11,800
mirror like everything<font color="#E5E5E5"> that's rust</font>

108
00:09:07,410 --> 00:09:13,839
<font color="#E5E5E5">required will</font><font color="#CCCCCC"> be done on a mirror so</font>

109
00:09:11,800 --> 00:09:16,359
mirror<font color="#E5E5E5"> looks a little bit like</font><font color="#CCCCCC"> that it's</font>

110
00:09:13,839 --> 00:09:19,270
like<font color="#CCCCCC"> a big</font><font color="#E5E5E5"> text blob that you can't</font>

111
00:09:16,360 --> 00:09:20,800
really read it's essentially if you if

112
00:09:19,270 --> 00:09:22,089
you read all<font color="#E5E5E5"> the small steps</font>

113
00:09:20,800 --> 00:09:25,569
there it<font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> rest</font><font color="#E5E5E5"> code but</font>

114
00:09:22,089 --> 00:09:28,029
there's go to<font color="#E5E5E5"> us in there like a lot of</font>

115
00:09:25,570 --> 00:09:29,769
<font color="#CCCCCC">co2</font><font color="#E5E5E5"> and you don't want</font><font color="#CCCCCC"> to read code</font>

116
00:09:28,029 --> 00:09:30,910
let's go to us<font color="#E5E5E5"> so instead you can</font>

117
00:09:29,769 --> 00:09:32,890
convert it<font color="#CCCCCC"> into</font><font color="#E5E5E5"> a graphical</font>

118
00:09:30,910 --> 00:09:34,149
representation<font color="#E5E5E5"> so this is exactly the</font>

119
00:09:32,890 --> 00:09:35,890
same<font color="#E5E5E5"> code this and this is the same</font>

120
00:09:34,149 --> 00:09:37,959
thing<font color="#E5E5E5"> the only difference is all the</font>

121
00:09:35,890 --> 00:09:40,000
local<font color="#CCCCCC"> variables declared on top are</font>

122
00:09:37,959 --> 00:09:42,040
turned into virtual stack and all the

123
00:09:40,000 --> 00:09:44,380
blocks in<font color="#E5E5E5"> there</font><font color="#CCCCCC"> with go-to are turned</font>

124
00:09:42,040 --> 00:09:47,260
into a graph was<font color="#E5E5E5"> arrows between them so</font>

125
00:09:44,380 --> 00:09:48,700
you<font color="#E5E5E5"> can actually read your code and this</font>

126
00:09:47,260 --> 00:09:52,899
<font color="#E5E5E5">is actually a tool that you can</font><font color="#CCCCCC"> use to</font>

127
00:09:48,700 --> 00:09:55,480
step through your your constant code to

128
00:09:52,899 --> 00:09:58,390
check like what is the doing<font color="#CCCCCC"> what is the</font>

129
00:09:55,480 --> 00:10:06,850
the virtual memory of Mary<font color="#E5E5E5"> doing well</font>

130
00:09:58,390 --> 00:10:09,970
what's going<font color="#E5E5E5"> on and yeah so Mary is a</font>

131
00:10:06,850 --> 00:10:11,290
mere interpreter<font color="#E5E5E5"> so you can execute all</font>

132
00:10:09,970 --> 00:10:13,540
<font color="#CCCCCC">the code it has</font><font color="#E5E5E5"> no undefined behavior</font>

133
00:10:11,290 --> 00:10:15,730
<font color="#E5E5E5">you can do pointer arithmetic you can do</font>

134
00:10:13,540 --> 00:10:17,319
whatever you want<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you try to do</font>

135
00:10:15,730 --> 00:10:19,720
anything<font color="#E5E5E5"> behavior compiler will simply</font>

136
00:10:17,320 --> 00:10:21,970
tell<font color="#E5E5E5"> you well</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> try to</font><font color="#CCCCCC"> define your</font>

137
00:10:19,720 --> 00:10:24,820
behavior here<font color="#CCCCCC"> please don't do that</font>

138
00:10:21,970 --> 00:10:26,890
so it'll<font color="#E5E5E5"> give you an error</font><font color="#CCCCCC"> message that</font>

139
00:10:24,820 --> 00:10:28,660
like it looks<font color="#E5E5E5"> like a rest compiler error</font>

140
00:10:26,890 --> 00:10:30,160
message it just<font color="#CCCCCC"> tells you at this line</font>

141
00:10:28,660 --> 00:10:34,240
of code you're doing<font color="#E5E5E5"> any fine behavior</font>

142
00:10:30,160 --> 00:10:35,860
<font color="#E5E5E5">just stop and try</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> works</font>

143
00:10:34,240 --> 00:10:37,720
for<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of things like like please try</font>

144
00:10:35,860 --> 00:10:40,029
<font color="#E5E5E5">to break Mary it's really hard like</font>

145
00:10:37,720 --> 00:10:42,250
there's a few things that<font color="#CCCCCC"> we know about</font>

146
00:10:40,029 --> 00:10:44,740
<font color="#CCCCCC">like you can actually</font><font color="#E5E5E5"> mutate non mutable</font>

147
00:10:42,250 --> 00:10:47,500
variables but that's basically by the

148
00:10:44,740 --> 00:10:49,990
definition<font color="#E5E5E5"> a mutable variable is just a</font>

149
00:10:47,500 --> 00:10:52,899
<font color="#E5E5E5">lint telling you you are allowed to</font>

150
00:10:49,990 --> 00:10:55,300
mutate it but whether<font color="#E5E5E5"> you like that at a</font>

151
00:10:52,899 --> 00:10:58,360
background memory is mutable<font color="#E5E5E5"> that's</font>

152
00:10:55,300 --> 00:11:00,550
completely well you're completely

153
00:10:58,360 --> 00:11:02,440
allowed to modify<font color="#E5E5E5"> it actually there's no</font>

154
00:11:00,550 --> 00:11:09,189
nothing<font color="#E5E5E5"> restricting you from modifying</font>

155
00:11:02,440 --> 00:11:11,110
immutable<font color="#E5E5E5"> variable yeah so</font><font color="#CCCCCC"> I already</font>

156
00:11:09,190 --> 00:11:13,209
told you<font color="#E5E5E5"> me read the tool it can do a</font>

157
00:11:11,110 --> 00:11:17,940
<font color="#E5E5E5">lot of stuff like read from command line</font>

158
00:11:13,209 --> 00:11:19,899
<font color="#CCCCCC">or do some syscalls</font><font color="#E5E5E5"> some easier ones but</font>

159
00:11:17,940 --> 00:11:22,209
well we<font color="#E5E5E5"> don't want all of that in</font>

160
00:11:19,899 --> 00:11:25,329
compiler<font color="#CCCCCC"> so what we're doing right now</font>

161
00:11:22,209 --> 00:11:28,540
is we're separating<font color="#CCCCCC"> Merida tool and</font><font color="#E5E5E5"> Mary</font>

162
00:11:25,329 --> 00:11:29,800
<font color="#E5E5E5">the constable</font><font color="#CCCCCC"> Raider</font><font color="#E5E5E5"> and the constant</font>

163
00:11:28,540 --> 00:11:32,199
value<font color="#CCCCCC"> that does everything</font><font color="#E5E5E5"> you expect</font>

164
00:11:29,800 --> 00:11:33,800
from a constant value if it computes

165
00:11:32,199 --> 00:11:35,390
your<font color="#E5E5E5"> pluses</font><font color="#CCCCCC"> you</font>

166
00:11:33,800 --> 00:11:37,969
multiplications it calls functions and

167
00:11:35,390 --> 00:11:39,319
so<font color="#CCCCCC"> on</font><font color="#E5E5E5"> but it doesn't do print line it</font>

168
00:11:37,970 --> 00:11:40,880
<font color="#CCCCCC">doesn't use</font><font color="#E5E5E5"> those calls because this</font>

169
00:11:39,320 --> 00:11:43,220
<font color="#E5E5E5">calls doing conservation that's just</font>

170
00:11:40,880 --> 00:11:45,589
weird<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we might do it in the future</font>

171
00:11:43,220 --> 00:11:46,940
<font color="#CCCCCC">but we'll need RFC's for that because we</font>

172
00:11:45,589 --> 00:11:50,029
don't<font color="#CCCCCC"> just randomly</font><font color="#E5E5E5"> want to enable</font>

173
00:11:46,940 --> 00:11:51,680
random features<font color="#E5E5E5"> that maybe are bad so</font>

174
00:11:50,029 --> 00:11:53,810
<font color="#E5E5E5">but what you can do</font><font color="#CCCCCC"> instead was</font><font color="#E5E5E5"> me read</font>

175
00:11:51,680 --> 00:11:56,089
a tool is well you<font color="#E5E5E5"> have a test</font><font color="#CCCCCC"> suite</font><font color="#E5E5E5"> and</font>

176
00:11:53,810 --> 00:11:58,040
<font color="#CCCCCC">you kind</font><font color="#E5E5E5"> of getting undefined behavior</font>

177
00:11:56,089 --> 00:12:00,890
somewhere you don't<font color="#E5E5E5"> know where so you</font>

178
00:11:58,040 --> 00:12:03,160
just run kygo<font color="#CCCCCC"> miri</font><font color="#E5E5E5"> instead of</font><font color="#CCCCCC"> carga test</font>

179
00:12:00,890 --> 00:12:05,930
<font color="#E5E5E5">and it'll run all your tests with miry</font>

180
00:12:03,160 --> 00:12:07,640
through the<font color="#CCCCCC"> cons evaluators</font><font color="#E5E5E5"> so if you do</font>

181
00:12:05,930 --> 00:12:09,560
any undefined<font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> just stop</font>

182
00:12:07,640 --> 00:12:12,290
and<font color="#E5E5E5"> tell you this test at this line of</font>

183
00:12:09,560 --> 00:12:14,149
code is doing<font color="#E5E5E5"> anything behavior and to</font>

184
00:12:12,290 --> 00:12:17,209
top off on that it'll print a stack

185
00:12:14,149 --> 00:12:18,890
trace<font color="#E5E5E5"> like if you're inside</font><font color="#CCCCCC"> live STD in</font>

186
00:12:17,209 --> 00:12:20,989
the<font color="#E5E5E5"> vector function push inside</font>

187
00:12:18,890 --> 00:12:22,760
something whatever deep it'll<font color="#E5E5E5"> tell you a</font>

188
00:12:20,990 --> 00:12:25,070
stack trace down to where you're doing

189
00:12:22,760 --> 00:12:26,870
undefined behavior<font color="#E5E5E5"> it's not like gdb</font>

190
00:12:25,070 --> 00:12:30,950
<font color="#CCCCCC">which which crashes</font><font color="#E5E5E5"> at some point when</font>

191
00:12:26,870 --> 00:12:32,480
you're at an actual<font color="#E5E5E5"> error it stops you</font>

192
00:12:30,950 --> 00:12:34,190
<font color="#E5E5E5">right when you're doing a</font><font color="#CCCCCC"> defined</font>

193
00:12:32,480 --> 00:12:35,570
<font color="#E5E5E5">behavior like right before</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and then</font>

194
00:12:34,190 --> 00:12:37,850
you can even<font color="#E5E5E5"> look at the memory and say</font>

195
00:12:35,570 --> 00:12:40,040
<font color="#CCCCCC">okay well</font><font color="#E5E5E5"> how does it look what where am</font>

196
00:12:37,850 --> 00:12:41,990
<font color="#CCCCCC">i all right now and then you can find</font>

197
00:12:40,040 --> 00:12:46,370
<font color="#E5E5E5">out how your code is</font><font color="#CCCCCC"> doing anything</font>

198
00:12:41,990 --> 00:12:48,110
behavior<font color="#E5E5E5"> so this is the tool</font><font color="#CCCCCC"> side</font>

199
00:12:46,370 --> 00:12:49,730
effects of using<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> this and</font><font color="#CCCCCC"> cons</font>

200
00:12:48,110 --> 00:12:51,110
evaluation is you can start<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> heap</font>

201
00:12:49,730 --> 00:12:53,750
allocation<font color="#CCCCCC"> in constants</font>

202
00:12:51,110 --> 00:12:55,190
well you can't we disabled it but we

203
00:12:53,750 --> 00:12:57,380
will be able<font color="#E5E5E5"> to build and in the future</font>

204
00:12:55,190 --> 00:12:59,800
<font color="#CCCCCC">so</font><font color="#E5E5E5"> you can do strings you</font><font color="#CCCCCC"> can do serda</font>

205
00:12:57,380 --> 00:13:02,810
decoding<font color="#E5E5E5"> of JSON files at compile time</font>

206
00:12:59,800 --> 00:13:04,880
<font color="#E5E5E5">convert that into a structure store that</font>

207
00:13:02,810 --> 00:13:06,619
structure and static memory<font color="#E5E5E5"> and then you</font>

208
00:13:04,880 --> 00:13:08,480
have<font color="#E5E5E5"> your configuration already parsed</font>

209
00:13:06,620 --> 00:13:10,790
already check for errors<font color="#E5E5E5"> everything at</font>

210
00:13:08,480 --> 00:13:12,680
compile time in memory<font color="#CCCCCC"> they could just</font>

211
00:13:10,790 --> 00:13:14,209
say<font color="#CCCCCC"> ok we're like what's the</font><font color="#E5E5E5"> setting and</font>

212
00:13:12,680 --> 00:13:15,829
<font color="#E5E5E5">you get the setting you you don't need</font>

213
00:13:14,209 --> 00:13:17,810
<font color="#E5E5E5">to check anything you don't need it I</font>

214
00:13:15,829 --> 00:13:19,370
may have<font color="#E5E5E5"> to file present and you have</font>

215
00:13:17,810 --> 00:13:21,589
like a big<font color="#CCCCCC"> configuration file like a</font>

216
00:13:19,370 --> 00:13:23,449
JSON or XML<font color="#CCCCCC"> this might</font><font color="#E5E5E5"> take megabytes or</font>

217
00:13:21,589 --> 00:13:25,970
something<font color="#E5E5E5"> convert them down to</font><font color="#CCCCCC"> binaries</font>

218
00:13:23,449 --> 00:13:29,300
<font color="#E5E5E5">they found two kilobytes or even less so</font>

219
00:13:25,970 --> 00:13:31,240
<font color="#E5E5E5">you save all the computation time at</font>

220
00:13:29,300 --> 00:13:33,890
compile time you save all the memory<font color="#E5E5E5"> and</font>

221
00:13:31,240 --> 00:13:34,070
you even get error checking<font color="#E5E5E5"> at compile</font>

222
00:13:33,890 --> 00:13:40,350
time

223
00:13:34,070 --> 00:13:46,790
so yeah these are<font color="#E5E5E5"> a</font><font color="#CCCCCC"> side-effect</font>

224
00:13:40,350 --> 00:13:48,529
[Applause]

225
00:13:46,790 --> 00:13:50,469
there's still some things<font color="#CCCCCC"> that we need</font>

226
00:13:48,529 --> 00:13:54,380
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do in the future</font>

227
00:13:50,470 --> 00:13:55,779
for example there's some<font color="#E5E5E5"> very complex</font>

228
00:13:54,380 --> 00:13:57,800
<font color="#E5E5E5">things when people start</font><font color="#CCCCCC"> using</font>

229
00:13:55,779 --> 00:14:00,649
<font color="#E5E5E5">associated types and associated</font>

230
00:13:57,800 --> 00:14:01,339
constants like technically do you<font color="#CCCCCC"> think</font>

231
00:14:00,649 --> 00:14:03,649
<font color="#CCCCCC">so all right</font>

232
00:14:01,339 --> 00:14:05,810
but<font color="#CCCCCC"> Miria will just say sorry</font><font color="#E5E5E5"> this is</font>

233
00:14:03,649 --> 00:14:07,130
too complex for me<font color="#CCCCCC"> the old con</font><font color="#E5E5E5"> sevillio</font>

234
00:14:05,810 --> 00:14:10,010
said the same thing so we're not<font color="#E5E5E5"> losing</font>

235
00:14:07,130 --> 00:14:10,640
any any features here<font color="#E5E5E5"> but the thing is</font>

236
00:14:10,010 --> 00:14:12,319
<font color="#CCCCCC">was Miri</font>

237
00:14:10,640 --> 00:14:14,689
<font color="#E5E5E5">we can actually start</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> these things</font>

238
00:14:12,320 --> 00:14:16,370
like<font color="#CCCCCC"> we can think about</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> are you</font>

239
00:14:14,690 --> 00:14:18,709
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to do is we we</font><font color="#CCCCCC"> have a structured</font>

240
00:14:16,370 --> 00:14:21,440
way<font color="#CCCCCC"> to approach this</font><font color="#E5E5E5"> for example think</font>

241
00:14:18,709 --> 00:14:24,800
about<font color="#E5E5E5"> you have an array and the length</font>

242
00:14:21,440 --> 00:14:27,260
of the array<font color="#E5E5E5"> depends on a trait</font>

243
00:14:24,800 --> 00:14:30,979
implementation for this<font color="#E5E5E5"> array that you</font>

244
00:14:27,260 --> 00:14:32,510
don't know the length of so you need to

245
00:14:30,980 --> 00:14:33,829
look at the trait implementation but to

246
00:14:32,510 --> 00:14:35,000
<font color="#E5E5E5">get at a trait implementation you need</font>

247
00:14:33,829 --> 00:14:36,620
to have to type for which you need the

248
00:14:35,000 --> 00:14:38,269
length for which you need to trade

249
00:14:36,620 --> 00:14:41,990
implementation yeah you're<font color="#E5E5E5"> going to end</font>

250
00:14:38,269 --> 00:14:43,910
in a cycle<font color="#E5E5E5"> so but maybe that value</font><font color="#CCCCCC"> you</font>

251
00:14:41,990 --> 00:14:46,520
need for the<font color="#CCCCCC"> length</font><font color="#E5E5E5"> is completely</font>

252
00:14:43,910 --> 00:14:48,079
independent<font color="#E5E5E5"> of the length that you</font><font color="#CCCCCC"> need</font>

253
00:14:46,520 --> 00:14:50,089
so there's no cycle it's it's<font color="#E5E5E5"> just an</font>

254
00:14:48,079 --> 00:14:52,099
information attached to the<font color="#CCCCCC"> array</font><font color="#E5E5E5"> in</font>

255
00:14:50,089 --> 00:14:54,110
<font color="#E5E5E5">general and</font><font color="#CCCCCC"> to do these things</font><font color="#E5E5E5"> that's</font>

256
00:14:52,100 --> 00:14:55,970
called partial<font color="#E5E5E5"> evaluation because you</font>

257
00:14:54,110 --> 00:14:58,250
don't know everything<font color="#CCCCCC"> but you</font><font color="#E5E5E5"> know</font>

258
00:14:55,970 --> 00:14:59,300
enough<font color="#CCCCCC"> to compute the</font><font color="#E5E5E5"> value and this is</font>

259
00:14:58,250 --> 00:15:01,880
<font color="#E5E5E5">the big</font><font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> we're going to be</font>

260
00:14:59,300 --> 00:15:06,079
<font color="#CCCCCC">working</font><font color="#E5E5E5"> on this year</font><font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> going to</font>

261
00:15:01,880 --> 00:15:08,180
<font color="#E5E5E5">take time and yeah we're not a big thing</font>

262
00:15:06,079 --> 00:15:13,399
that we're<font color="#CCCCCC"> working on is allowing for</font>

263
00:15:08,180 --> 00:15:19,430
<font color="#CCCCCC">example gdb</font><font color="#E5E5E5"> to run</font><font color="#CCCCCC"> rest code with</font><font color="#E5E5E5"> miry</font>

264
00:15:13,399 --> 00:15:22,190
<font color="#E5E5E5">on actual physical memory so instead of</font>

265
00:15:19,430 --> 00:15:24,500
trying to actually<font color="#E5E5E5"> execute real code</font>

266
00:15:22,190 --> 00:15:26,529
<font color="#E5E5E5">you're going to run these things on your</font>

267
00:15:24,500 --> 00:15:30,260
actual memory but with the<font color="#E5E5E5"> miry debugger</font>

268
00:15:26,529 --> 00:15:31,850
<font color="#CCCCCC">checking the code for things like</font>

269
00:15:30,260 --> 00:15:34,069
<font color="#E5E5E5">undefined behavior and so on in your</font>

270
00:15:31,850 --> 00:15:36,800
debugger<font color="#E5E5E5"> so you can run gdb and</font><font color="#CCCCCC"> then you</font>

271
00:15:34,070 --> 00:15:38,540
execute a small command it got compiled

272
00:15:36,800 --> 00:15:40,790
it'll get<font color="#E5E5E5"> run by</font><font color="#CCCCCC"> Miri</font><font color="#E5E5E5"> and I'll tell you</font>

273
00:15:38,540 --> 00:15:42,709
some results<font color="#E5E5E5"> that you usually could not</font>

274
00:15:40,790 --> 00:15:46,990
get because<font color="#E5E5E5"> this kind of complex</font>

275
00:15:42,709 --> 00:15:46,989
evaluation<font color="#CCCCCC"> just isn't possible in gdb</font>

276
00:15:47,860 --> 00:15:52,190
also one feature<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to have if</font>

277
00:15:50,630 --> 00:15:53,510
you compile your<font color="#CCCCCC"> code and you have a</font>

278
00:15:52,190 --> 00:15:56,329
constant<font color="#CCCCCC"> evaluation error</font>

279
00:15:53,510 --> 00:15:59,089
well compiler could stop at<font color="#E5E5E5"> that point</font>

280
00:15:56,329 --> 00:16:01,010
<font color="#E5E5E5">and</font><font color="#CCCCCC"> offer</font><font color="#E5E5E5"> your debugging window telling</font>

281
00:15:59,089 --> 00:16:02,690
you exactly what<font color="#E5E5E5"> went wrong like you</font>

282
00:16:01,010 --> 00:16:04,399
usually get a stack trace<font color="#E5E5E5"> that tells you</font>

283
00:16:02,690 --> 00:16:05,990
<font color="#E5E5E5">okay it went wrong here and there and</font>

284
00:16:04,399 --> 00:16:08,449
<font color="#E5E5E5">there and there</font><font color="#CCCCCC"> but you don't</font><font color="#E5E5E5"> know any</font>

285
00:16:05,990 --> 00:16:09,680
values<font color="#E5E5E5"> you know you don't know how the</font>

286
00:16:08,449 --> 00:16:11,449
memory looks maybe you did some weird

287
00:16:09,680 --> 00:16:13,040
pointers things and your constants<font color="#E5E5E5"> you</font>

288
00:16:11,449 --> 00:16:15,380
don't know<font color="#E5E5E5"> exactly what's going on so</font>

289
00:16:13,040 --> 00:16:18,110
the next step is to allow you to call

290
00:16:15,380 --> 00:16:19,699
<font color="#E5E5E5">your compiler and then just stop when</font>

291
00:16:18,110 --> 00:16:22,220
something goes wrong<font color="#CCCCCC"> and inspect what</font>

292
00:16:19,699 --> 00:16:23,599
exit<font color="#E5E5E5"> exactly is going on so these are</font>

293
00:16:22,220 --> 00:16:25,610
the things that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> working on but</font>

294
00:16:23,600 --> 00:16:27,860
<font color="#E5E5E5">what's</font><font color="#CCCCCC"> even better for you</font><font color="#E5E5E5"> is you can</font>

295
00:16:25,610 --> 00:16:29,240
help<font color="#CCCCCC"> too and you can write</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> C's</font>

296
00:16:27,860 --> 00:16:32,449
because<font color="#E5E5E5"> we have a lot</font><font color="#CCCCCC"> of features that</font>

297
00:16:29,240 --> 00:16:35,360
<font color="#E5E5E5">are basically just error needs RFC</font>

298
00:16:32,449 --> 00:16:37,219
<font color="#CCCCCC">format</font><font color="#E5E5E5"> some texts about what kind of RC</font>

299
00:16:35,360 --> 00:16:40,010
we need<font color="#E5E5E5"> this is literally</font><font color="#CCCCCC"> just to check</font>

300
00:16:37,220 --> 00:16:41,810
if<font color="#CCCCCC"> something is</font><font color="#E5E5E5"> not allowed report this</font>

301
00:16:40,010 --> 00:16:44,660
error and<font color="#E5E5E5"> below us the code that would</font>

302
00:16:41,810 --> 00:16:46,939
<font color="#E5E5E5">execute if it were allowed so the code</font>

303
00:16:44,660 --> 00:16:49,250
is there like we just<font color="#E5E5E5"> need</font><font color="#CCCCCC"> our C so you</font>

304
00:16:46,940 --> 00:16:52,070
<font color="#E5E5E5">need to write a text and that explains</font>

305
00:16:49,250 --> 00:16:53,570
<font color="#E5E5E5">how this affects</font><font color="#CCCCCC"> other things but you</font>

306
00:16:52,070 --> 00:16:54,949
<font color="#E5E5E5">need to write it</font><font color="#CCCCCC"> from a user perspective</font>

307
00:16:53,570 --> 00:16:56,779
you<font color="#CCCCCC"> don't need to care about</font>

308
00:16:54,949 --> 00:16:58,490
implementation<font color="#CCCCCC"> the</font><font color="#E5E5E5"> implementation is</font>

309
00:16:56,779 --> 00:17:00,470
there you<font color="#E5E5E5"> just need</font><font color="#CCCCCC"> a right</font><font color="#E5E5E5"> how you</font>

310
00:16:58,490 --> 00:17:03,769
wanted this feature to work<font color="#E5E5E5"> and we can</font>

311
00:17:00,470 --> 00:17:05,630
just<font color="#CCCCCC"> turn it on so yeah please</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> that</font>

312
00:17:03,769 --> 00:17:08,059
we need<font color="#E5E5E5"> our FCS and we don't have enough</font>

313
00:17:05,630 --> 00:17:10,730
people<font color="#E5E5E5"> annoying the</font><font color="#CCCCCC"> address compiler or</font>

314
00:17:08,059 --> 00:17:13,428
developers to actually enable the

315
00:17:10,730 --> 00:17:14,689
features if the<font color="#CCCCCC"> feature is required by</font>

316
00:17:13,429 --> 00:17:19,669
enough<font color="#CCCCCC"> people we're probably</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

317
00:17:14,689 --> 00:17:21,350
get it<font color="#E5E5E5"> pretty quickly yeah one other</font>

318
00:17:19,669 --> 00:17:23,089
thing they can do<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can go to the rest</font>

319
00:17:21,349 --> 00:17:25,520
compiler<font color="#E5E5E5"> and look through the</font>

320
00:17:23,089 --> 00:17:27,770
<font color="#E5E5E5">documentation and think this function</font>

321
00:17:25,520 --> 00:17:29,179
doesn't<font color="#CCCCCC"> do anything weird it doesn't do</font>

322
00:17:27,770 --> 00:17:32,840
anything that depends<font color="#E5E5E5"> on runtime value</font>

323
00:17:29,179 --> 00:17:34,850
<font color="#E5E5E5">is no randomization</font><font color="#CCCCCC"> and so on mmm</font><font color="#E5E5E5"> it</font>

324
00:17:32,840 --> 00:17:36,799
could be a constant function this

325
00:17:34,850 --> 00:17:38,889
function could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> evaluated at compile</font>

326
00:17:36,799 --> 00:17:41,480
time<font color="#E5E5E5"> so all</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do is open an</font>

327
00:17:38,890 --> 00:17:44,630
<font color="#CCCCCC">put request to the rest compiler writing</font>

328
00:17:41,480 --> 00:17:46,700
<font color="#E5E5E5">Const in front of the FN and you're</font>

329
00:17:44,630 --> 00:17:47,809
already<font color="#CCCCCC"> helping us because you found a</font>

330
00:17:46,700 --> 00:17:49,309
function that<font color="#E5E5E5"> we could make Const</font>

331
00:17:47,809 --> 00:17:50,540
there's a pull request you're talking

332
00:17:49,309 --> 00:17:52,940
with the rest compiler developers about

333
00:17:50,540 --> 00:17:55,760
<font color="#E5E5E5">it and we're gonna turn</font><font color="#CCCCCC"> it into</font><font color="#E5E5E5"> constant</font>

334
00:17:52,940 --> 00:18:00,080
<font color="#CCCCCC">and then it works</font><font color="#E5E5E5"> it's now a constant</font>

335
00:17:55,760 --> 00:18:02,900
function these things are really easy to

336
00:18:00,080 --> 00:18:04,370
<font color="#E5E5E5">do but somebody</font><font color="#CCCCCC"> needs to do them and</font><font color="#E5E5E5"> we</font>

337
00:18:02,900 --> 00:18:06,500
<font color="#CCCCCC">already trying to</font><font color="#E5E5E5"> do hard</font><font color="#CCCCCC"> saying so</font>

338
00:18:04,370 --> 00:18:07,250
would be really cool if you guys would

339
00:18:06,500 --> 00:18:10,700
<font color="#CCCCCC">help us there</font>

340
00:18:07,250 --> 00:18:12,970
and yeah<font color="#E5E5E5"> make the rest compiler even</font>

341
00:18:10,700 --> 00:18:24,770
more<font color="#CCCCCC"> awesome than it already is</font>

342
00:18:12,970 --> 00:18:38,120
<font color="#CCCCCC">Thanks so does anybody have</font><font color="#E5E5E5"> any</font>

343
00:18:24,770 --> 00:18:41,510
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> okay the question is if we</font>

344
00:18:38,120 --> 00:18:43,540
<font color="#CCCCCC">can automate the process</font><font color="#E5E5E5"> from finding</font>

345
00:18:41,510 --> 00:18:46,250
functions that could<font color="#E5E5E5"> be constant and</font>

346
00:18:43,540 --> 00:18:49,310
making them<font color="#E5E5E5"> making</font><font color="#CCCCCC"> these suggestions</font>

347
00:18:46,250 --> 00:18:51,770
<font color="#E5E5E5">automatic we probably can that's I have</font>

348
00:18:49,310 --> 00:18:52,159
no idea why<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> never thought about</font>

349
00:18:51,770 --> 00:18:54,410
that

350
00:18:52,160 --> 00:18:57,440
that's like I'm developing<font color="#CCCCCC"> Clippy like</font>

351
00:18:54,410 --> 00:18:58,610
every few<font color="#CCCCCC"> weeks but yeah that's that's</font>

352
00:18:57,440 --> 00:19:00,470
<font color="#E5E5E5">really good question</font>

353
00:18:58,610 --> 00:19:02,570
we should totally<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it won't</font><font color="#CCCCCC"> work</font>

354
00:19:00,470 --> 00:19:05,180
<font color="#CCCCCC">for</font><font color="#E5E5E5"> everything like it's really hard to</font>

355
00:19:02,570 --> 00:19:08,120
<font color="#E5E5E5">detect if something is constable</font><font color="#CCCCCC"> uribl</font>

356
00:19:05,180 --> 00:19:09,500
<font color="#E5E5E5">if it were easy</font><font color="#CCCCCC"> we just do it automatic</font>

357
00:19:08,120 --> 00:19:12,290
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you wouldn't need to annotate</font>

358
00:19:09,500 --> 00:19:15,650
anything but it is basically<font color="#E5E5E5"> the halting</font>

359
00:19:12,290 --> 00:19:18,740
problem<font color="#CCCCCC"> like sometimes to</font><font color="#E5E5E5"> check where</font>

360
00:19:15,650 --> 00:19:20,210
their function is constant variable<font color="#CCCCCC"> you</font>

361
00:19:18,740 --> 00:19:22,580
<font color="#E5E5E5">probably need infinite computation time</font>

362
00:19:20,210 --> 00:19:24,560
<font color="#E5E5E5">to figure it out so</font><font color="#CCCCCC"> that might not</font><font color="#E5E5E5"> quite</font>

363
00:19:22,580 --> 00:19:34,159
work out<font color="#E5E5E5"> but for the easy things we can</font>

364
00:19:24,560 --> 00:19:35,899
definitely<font color="#E5E5E5"> do that yes the question is</font>

365
00:19:34,160 --> 00:19:38,600
where they're adding cons to a constant

366
00:19:35,900 --> 00:19:41,000
<font color="#E5E5E5">to a function so making it a constant</font>

367
00:19:38,600 --> 00:19:43,070
would be<font color="#CCCCCC"> a breaking change</font><font color="#E5E5E5"> no it will</font>

368
00:19:41,000 --> 00:19:45,770
never be a breaking<font color="#CCCCCC"> change to move from</font>

369
00:19:43,070 --> 00:19:48,110
<font color="#CCCCCC">FN to constant n that's impossible to be</font>

370
00:19:45,770 --> 00:19:49,430
breaking<font color="#CCCCCC"> change</font><font color="#E5E5E5"> in by itself what would</font>

371
00:19:48,110 --> 00:19:52,669
be a breaking<font color="#CCCCCC"> change is going</font><font color="#E5E5E5"> the other</font>

372
00:19:49,430 --> 00:19:54,380
way from<font color="#E5E5E5"> constant to FN to say this</font>

373
00:19:52,670 --> 00:19:56,720
<font color="#E5E5E5">means you need</font><font color="#CCCCCC"> to think about whether</font>

374
00:19:54,380 --> 00:19:59,450
this function<font color="#CCCCCC"> would</font><font color="#E5E5E5"> ever in the future</font>

375
00:19:56,720 --> 00:20:01,730
of<font color="#CCCCCC"> rust</font><font color="#E5E5E5"> do something that could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> not</font>

376
00:19:59,450 --> 00:20:03,350
constant for example<font color="#CCCCCC"> access random</font>

377
00:20:01,730 --> 00:20:06,080
number generators or do something<font color="#CCCCCC"> other</font>

378
00:20:03,350 --> 00:20:09,020
<font color="#E5E5E5">like actually in the current time or so</font>

379
00:20:06,080 --> 00:20:10,760
<font color="#CCCCCC">so on if it would ever do that in the</font>

380
00:20:09,020 --> 00:20:12,470
future<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you cannot turn it from FN</font>

381
00:20:10,760 --> 00:20:13,760
to<font color="#E5E5E5"> count of n right now this is</font>

382
00:20:12,470 --> 00:20:15,530
something<font color="#CCCCCC"> that wouldn't</font><font color="#E5E5E5"> be automatically</font>

383
00:20:13,760 --> 00:20:20,830
checkable because it's just semantics<font color="#E5E5E5"> of</font>

384
00:20:15,530 --> 00:20:20,830
the function yes

385
00:20:23,250 --> 00:20:28,330
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I am prepared for this question</font>

386
00:20:25,840 --> 00:20:28,959
<font color="#CCCCCC">because Pascal already asked me this</font>

387
00:20:28,330 --> 00:20:31,419
<font color="#CCCCCC">question</font>

388
00:20:28,960 --> 00:20:33,490
so sufficiently advanced<font color="#E5E5E5"> incremental</font>

389
00:20:31,420 --> 00:20:36,520
compilation<font color="#CCCCCC"> it's indistinguishable from</font>

390
00:20:33,490 --> 00:20:37,570
a<font color="#CCCCCC"> ripple so the rest</font><font color="#E5E5E5"> can pilot if</font>

391
00:20:36,520 --> 00:20:39,160
<font color="#E5E5E5">they're doing incremental compilation</font>

392
00:20:37,570 --> 00:20:41,620
things we<font color="#E5E5E5"> might have heard about those</font>

393
00:20:39,160 --> 00:20:43,720
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is to speed up compilation so</font>

394
00:20:41,620 --> 00:20:46,419
instead of having<font color="#E5E5E5"> to recompile for</font>

395
00:20:43,720 --> 00:20:47,950
adding a small variable or anything<font color="#CCCCCC"> the</font>

396
00:20:46,420 --> 00:20:51,400
compiler just recompile supports that

397
00:20:47,950 --> 00:20:54,580
<font color="#E5E5E5">you changed if you get this incremental</font>

398
00:20:51,400 --> 00:20:57,460
compilation<font color="#E5E5E5"> good enough at some point</font>

399
00:20:54,580 --> 00:20:59,949
you<font color="#E5E5E5"> won't care if there's no ripple</font>

400
00:20:57,460 --> 00:21:02,140
because you'll<font color="#CCCCCC"> just be weak the ripple</font>

401
00:20:59,950 --> 00:21:04,420
will be just a wrapper<font color="#E5E5E5"> around the rest</font>

402
00:21:02,140 --> 00:21:06,460
compiler<font color="#CCCCCC"> that just adds new stuff to a</font>

403
00:21:04,420 --> 00:21:09,280
<font color="#E5E5E5">file and then reruns the rest compiler</font>

404
00:21:06,460 --> 00:21:11,350
<font color="#E5E5E5">and memory the console evaluation</font>

405
00:21:09,280 --> 00:21:12,730
memorizes with<font color="#CCCCCC"> instragram</font><font color="#E5E5E5"> incremental</font>

406
00:21:11,350 --> 00:21:15,639
compilation<font color="#CCCCCC"> to values from the previous</font>

407
00:21:12,730 --> 00:21:23,370
<font color="#E5E5E5">compilation so this will be a batch</font>

408
00:21:15,640 --> 00:21:23,370
script with like three<font color="#E5E5E5"> lines yes</font>

409
00:21:33,100 --> 00:21:40,189
<font color="#CCCCCC">the question is since</font><font color="#E5E5E5"> mutable</font>

410
00:21:37,760 --> 00:21:44,270
immutability<font color="#E5E5E5"> is to default</font><font color="#CCCCCC"> for locals</font>

411
00:21:40,190 --> 00:21:46,370
and<font color="#E5E5E5"> so on would it be better like if</font>

412
00:21:44,270 --> 00:21:49,430
<font color="#CCCCCC">rust started in you to</font><font color="#E5E5E5"> make everything</font>

413
00:21:46,370 --> 00:21:52,639
default<font color="#CCCCCC"> content and then half of</font><font color="#E5E5E5"> a flag</font>

414
00:21:49,430 --> 00:21:53,660
for making it not constant<font color="#CCCCCC"> I personally</font>

415
00:21:52,640 --> 00:21:54,830
would think that<font color="#E5E5E5"> would be the correct</font>

416
00:21:53,660 --> 00:21:57,380
<font color="#E5E5E5">solution</font>

417
00:21:54,830 --> 00:21:59,270
we had a<font color="#CCCCCC"> RFC about that where there was</font>

418
00:21:57,380 --> 00:22:01,430
a big<font color="#E5E5E5"> discussion about it and at some</font>

419
00:21:59,270 --> 00:22:07,840
<font color="#E5E5E5">point we just realized well switching</font>

420
00:22:01,430 --> 00:22:10,760
around<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be a</font><font color="#E5E5E5"> breaking change</font><font color="#CCCCCC"> so it</font>

421
00:22:07,840 --> 00:22:13,129
it's<font color="#E5E5E5"> questionable like you can't really</font>

422
00:22:10,760 --> 00:22:14,930
<font color="#E5E5E5">test it like with immutability and</font>

423
00:22:13,130 --> 00:22:16,820
mutability it's easy to<font color="#E5E5E5"> just look at big</font>

424
00:22:14,930 --> 00:22:18,980
database a<font color="#CCCCCC"> big big code</font><font color="#E5E5E5"> basis and look</font>

425
00:22:16,820 --> 00:22:22,040
how it's done there but<font color="#CCCCCC"> Wisconsin ofin</font>

426
00:22:18,980 --> 00:22:24,440
the<font color="#E5E5E5"> problem is there's not much previous</font>

427
00:22:22,040 --> 00:22:26,540
experience<font color="#E5E5E5"> about</font><font color="#CCCCCC"> that like we have</font><font color="#E5E5E5"> other</font>

428
00:22:24,440 --> 00:22:29,120
languages that<font color="#E5E5E5"> do best effort</font><font color="#CCCCCC"> consul</font>

429
00:22:26,540 --> 00:22:30,770
valuation<font color="#E5E5E5"> where you for example</font><font color="#CCCCCC"> enlist</font>

430
00:22:29,120 --> 00:22:31,879
where<font color="#E5E5E5"> you just throw random statements</font>

431
00:22:30,770 --> 00:22:36,680
in there and they're gonna get evaluated

432
00:22:31,880 --> 00:22:38,930
<font color="#CCCCCC">if they are</font><font color="#E5E5E5"> valuable and here we try</font><font color="#CCCCCC"> to</font>

433
00:22:36,680 --> 00:22:42,590
do it<font color="#E5E5E5"> upfront by deciding whether it's</font>

434
00:22:38,930 --> 00:22:44,780
constant variable or not<font color="#CCCCCC"> it's a really</font>

435
00:22:42,590 --> 00:22:46,870
hard<font color="#E5E5E5"> decision</font><font color="#CCCCCC"> and it would probably be</font>

436
00:22:44,780 --> 00:22:49,040
better<font color="#CCCCCC"> to do the other</font><font color="#E5E5E5"> way around but</font>

437
00:22:46,870 --> 00:22:52,729
<font color="#E5E5E5">that might</font><font color="#CCCCCC"> just lead to people randomly</font>

438
00:22:49,040 --> 00:22:54,530
throwing not constant on it<font color="#E5E5E5"> so right</font><font color="#CCCCCC"> now</font>

439
00:22:52,730 --> 00:22:56,240
we're just<font color="#E5E5E5"> opting for the</font><font color="#CCCCCC"> Lindt option</font>

440
00:22:54,530 --> 00:22:59,590
<font color="#E5E5E5">that tells you when to</font><font color="#CCCCCC"> make it constant</font>

441
00:22:56,240 --> 00:22:59,590
and then you're done<font color="#E5E5E5"> with it</font>

442
00:23:15,020 --> 00:23:24,690
[Applause]

