1
00:00:18,800 --> 00:00:41,280
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> I have</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> once when there will be</font>

2
00:00:27,060 --> 00:00:44,550
questions<font color="#E5E5E5"> because thank you very much so</font>

3
00:00:41,280 --> 00:00:47,039
hi<font color="#CCCCCC"> guys my name is Anil Quinn I've been</font>

4
00:00:44,550 --> 00:00:49,678
working in<font color="#E5E5E5"> red that for the last two</font>

5
00:00:47,039 --> 00:00:51,480
interesting years I'm a part of<font color="#E5E5E5"> the over</font>

6
00:00:49,679 --> 00:00:54,269
<font color="#CCCCCC">tessellate team</font><font color="#E5E5E5"> the red</font><font color="#CCCCCC"> at</font>

7
00:00:51,480 --> 00:00:58,730
virtualization<font color="#E5E5E5"> and currently I'm mostly</font>

8
00:00:54,269 --> 00:01:01,949
working around<font color="#E5E5E5"> Qbert so let's start</font>

9
00:00:58,730 --> 00:01:07,289
<font color="#E5E5E5">basically the topic today is the need</font>

10
00:01:01,949 --> 00:01:09,658
for load balancing<font color="#CCCCCC"> in kubernetes</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> to</font>

11
00:01:07,290 --> 00:01:11,820
talk<font color="#E5E5E5"> about it we need</font><font color="#CCCCCC"> to first go over</font>

12
00:01:09,659 --> 00:01:15,509
what is people notice in a nutshell and

13
00:01:11,820 --> 00:01:18,329
also what is<font color="#E5E5E5"> Hubert Howe scheduling</font>

14
00:01:15,509 --> 00:01:22,079
works in kubernetes<font color="#E5E5E5"> and then understand</font>

15
00:01:18,329 --> 00:01:24,809
why do we even need<font color="#E5E5E5"> load balancing after</font>

16
00:01:22,079 --> 00:01:26,779
<font color="#CCCCCC">understanding</font><font color="#E5E5E5"> the needs we'll see some</font>

17
00:01:24,810 --> 00:01:31,140
of<font color="#E5E5E5"> the projects already out there and</font>

18
00:01:26,780 --> 00:01:34,590
concepts in kubernetes<font color="#E5E5E5"> and also we will</font>

19
00:01:31,140 --> 00:01:36,719
focus on one major<font color="#E5E5E5"> project in kubernetes</font>

20
00:01:34,590 --> 00:01:39,990
incubator called<font color="#E5E5E5"> the scheduler for load</font>

21
00:01:36,719 --> 00:01:42,329
<font color="#E5E5E5">balancing after that we'll see what else</font>

22
00:01:39,990 --> 00:01:44,929
might<font color="#CCCCCC"> be</font><font color="#E5E5E5"> done around that area with an</font>

23
00:01:42,329 --> 00:01:47,158
emphasis on scheduling simulation and

24
00:01:44,930 --> 00:01:49,469
finally<font color="#E5E5E5"> finally all of that will come</font>

25
00:01:47,159 --> 00:01:52,439
<font color="#CCCCCC">down</font><font color="#E5E5E5"> to load balancing virtual machines</font>

26
00:01:49,469 --> 00:01:56,969
in our cube<font color="#E5E5E5"> wheel fold with a load</font>

27
00:01:52,439 --> 00:02:00,210
balancing experimental algorithm<font color="#E5E5E5"> we'll</font>

28
00:01:56,969 --> 00:02:03,298
have an<font color="#E5E5E5"> example at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> so first of</font>

29
00:02:00,210 --> 00:02:05,579
all kubernetes<font color="#E5E5E5"> so kubernetes</font><font color="#CCCCCC"> is as you</font>

30
00:02:03,299 --> 00:02:08,600
know<font color="#E5E5E5"> what most of you might know is an</font>

31
00:02:05,579 --> 00:02:12,239
open<font color="#E5E5E5"> open source platform designed to</font>

32
00:02:08,600 --> 00:02:15,829
auto scale deployment<font color="#E5E5E5"> automate</font>

33
00:02:12,240 --> 00:02:18,620
deployment<font color="#E5E5E5"> scaling and orchestrate the</font>

34
00:02:15,830 --> 00:02:23,150
<font color="#E5E5E5">containerized applications doing all</font>

35
00:02:18,620 --> 00:02:25,460
that on<font color="#E5E5E5"> the cluster</font><font color="#CCCCCC"> level so at the</font>

36
00:02:23,150 --> 00:02:27,140
minimum kubernetes can<font color="#E5E5E5"> schedule and run</font>

37
00:02:25,460 --> 00:02:30,080
<font color="#E5E5E5">the containerized application across</font>

38
00:02:27,140 --> 00:02:33,079
<font color="#E5E5E5">multiple virtual</font><font color="#CCCCCC"> or physical hosts and</font>

39
00:02:30,080 --> 00:02:35,360
they could be around<font color="#E5E5E5"> up to</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> thousand</font>

40
00:02:33,080 --> 00:02:40,450
<font color="#E5E5E5">of them doing that in a manner that</font>

41
00:02:35,360 --> 00:02:42,680
<font color="#E5E5E5">maximizes the</font><font color="#CCCCCC"> hosts resources and</font>

42
00:02:40,450 --> 00:02:44,989
kubernetes<font color="#E5E5E5"> containerized</font>

43
00:02:42,680 --> 00:02:47,630
infrastructure allows you to control<font color="#E5E5E5"> and</font>

44
00:02:44,990 --> 00:02:49,970
automate<font color="#E5E5E5"> application deployments in</font>

45
00:02:47,630 --> 00:02:52,549
addition it<font color="#E5E5E5"> also allows you</font><font color="#CCCCCC"> to mount an</font>

46
00:02:49,970 --> 00:02:56,480
<font color="#E5E5E5">ad storage to</font><font color="#CCCCCC"> keep these applications in</font>

47
00:02:52,550 --> 00:03:00,050
a stateful in a stateful state meaning

48
00:02:56,480 --> 00:03:01,579
because containers<font color="#E5E5E5"> usually have</font><font color="#CCCCCC"> unfurled</font>

49
00:03:00,050 --> 00:03:04,459
these files that<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> lost after</font>

50
00:03:01,580 --> 00:03:07,160
<font color="#E5E5E5">they're gone</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to have persistent</font>

51
00:03:04,459 --> 00:03:09,440
volumes to keep stateful data and<font color="#E5E5E5"> also</font>

52
00:03:07,160 --> 00:03:14,480
allow containers<font color="#CCCCCC"> to share data among</font>

53
00:03:09,440 --> 00:03:16,400
themselves so it should be<font color="#CCCCCC"> easy to scale</font>

54
00:03:14,480 --> 00:03:19,340
containers application and resources on

55
00:03:16,400 --> 00:03:23,120
the fly and kubernetes<font color="#E5E5E5"> is also a</font>

56
00:03:19,340 --> 00:03:24,790
declarative platform meaning<font color="#CCCCCC"> i'm telling</font>

57
00:03:23,120 --> 00:03:27,350
kubernetes using a specific

58
00:03:24,790 --> 00:03:29,630
specification file usually<font color="#E5E5E5"> usually these</font>

59
00:03:27,350 --> 00:03:31,640
are<font color="#CCCCCC"> llamó files</font><font color="#E5E5E5"> how do I want</font>

60
00:03:29,630 --> 00:03:33,820
applications to run and it's guaranteed

61
00:03:31,640 --> 00:03:36,470
<font color="#CCCCCC">that the applications will run that way</font>

62
00:03:33,820 --> 00:03:38,209
it also provides monitoring<font color="#CCCCCC"> in help</font>

63
00:03:36,470 --> 00:03:44,000
tools for health<font color="#CCCCCC"> check-in and</font>

64
00:03:38,209 --> 00:03:46,820
self-healing<font color="#E5E5E5"> etc to understand a bit</font>

65
00:03:44,000 --> 00:03:50,600
about<font color="#CCCCCC"> scheduling and</font><font color="#E5E5E5"> how scheduling</font>

66
00:03:46,820 --> 00:03:53,000
works I'll talk about some<font color="#CCCCCC"> of the</font>

67
00:03:50,600 --> 00:03:55,390
<font color="#E5E5E5">components in kubernetes</font><font color="#CCCCCC"> I won't go over</font>

68
00:03:53,000 --> 00:03:58,300
the<font color="#CCCCCC"> entire architecture</font>

69
00:03:55,390 --> 00:04:02,119
so basically kubernetes runs on top of

70
00:03:58,300 --> 00:04:05,060
operating system and<font color="#CCCCCC"> it's and ether</font>

71
00:04:02,120 --> 00:04:07,610
<font color="#E5E5E5">interactive</font><font color="#CCCCCC"> pots</font><font color="#E5E5E5"> running on notes notes</font>

72
00:04:05,060 --> 00:04:10,670
for<font color="#CCCCCC"> that matter</font><font color="#E5E5E5"> are our hosts so let's</font>

73
00:04:07,610 --> 00:04:11,650
zoom a<font color="#CCCCCC"> bit to kubernetes node and what</font>

74
00:04:10,670 --> 00:04:15,569
it<font color="#E5E5E5"> contains</font>

75
00:04:11,650 --> 00:04:18,120
so our scheduling unit

76
00:04:15,569 --> 00:04:20,009
in communities<font color="#E5E5E5"> as a pot a pot is a</font>

77
00:04:18,120 --> 00:04:21,949
collection of containers one or more

78
00:04:20,009 --> 00:04:26,280
containers<font color="#E5E5E5"> that have shared storage</font>

79
00:04:21,949 --> 00:04:29,310
networking<font color="#E5E5E5"> and being</font><font color="#CCCCCC"> a declarative</font>

80
00:04:26,280 --> 00:04:30,960
language kubernetes is you create a pot

81
00:04:29,310 --> 00:04:33,750
with a specification<font color="#E5E5E5"> file the</font>

82
00:04:30,960 --> 00:04:37,710
specification file will contain image

83
00:04:33,750 --> 00:04:39,990
data<font color="#E5E5E5"> storage data resources I want to</font>

84
00:04:37,710 --> 00:04:43,739
<font color="#CCCCCC">allocate for the circuit specific</font><font color="#E5E5E5"> pot</font>

85
00:04:39,990 --> 00:04:46,199
such as CPU<font color="#E5E5E5"> and memory and these pots</font>

86
00:04:43,740 --> 00:04:50,250
<font color="#E5E5E5">run on the host I mentioned either</font>

87
00:04:46,199 --> 00:04:53,130
physical<font color="#CCCCCC"> or virtual in a cabinet this</font>

88
00:04:50,250 --> 00:04:54,960
node you<font color="#CCCCCC"> have services that keeps the</font>

89
00:04:53,130 --> 00:04:57,000
node<font color="#CCCCCC"> running and communicate with</font><font color="#E5E5E5"> the</font>

90
00:04:54,960 --> 00:04:59,370
outer world<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of them is a cubelet</font>

91
00:04:57,000 --> 00:05:00,720
<font color="#CCCCCC">which is some sort of an agent for</font><font color="#E5E5E5"> the</font>

92
00:04:59,370 --> 00:05:03,660
node to communicate with other

93
00:05:00,720 --> 00:05:05,580
components<font color="#CCCCCC"> in cuba</font><font color="#E5E5E5"> Nettie's and keep us</font>

94
00:05:03,660 --> 00:05:08,820
keep an eye on<font color="#E5E5E5"> the state of</font><font color="#CCCCCC"> the world in</font>

95
00:05:05,580 --> 00:05:10,919
the changes<font color="#E5E5E5"> and other comments although</font>

96
00:05:08,820 --> 00:05:14,280
it might<font color="#E5E5E5"> contain services such as docker</font>

97
00:05:10,919 --> 00:05:19,590
<font color="#E5E5E5">or other container runtimes</font><font color="#CCCCCC"> and a queue</font>

98
00:05:14,280 --> 00:05:22,198
proxy<font color="#E5E5E5"> solve the master components</font>

99
00:05:19,590 --> 00:05:24,719
relevant to this lecture<font color="#E5E5E5"> is first of all</font>

100
00:05:22,199 --> 00:05:28,080
<font color="#CCCCCC">the API server so the API</font><font color="#E5E5E5"> server is</font><font color="#CCCCCC"> the</font>

101
00:05:24,720 --> 00:05:30,419
gateway to kubernetes<font color="#E5E5E5"> it's basically the</font>

102
00:05:28,080 --> 00:05:32,969
<font color="#CCCCCC">front-end</font><font color="#E5E5E5"> it receives commands</font><font color="#CCCCCC"> from the</font>

103
00:05:30,419 --> 00:05:35,580
outer<font color="#E5E5E5"> world of DevOps for example and</font>

104
00:05:32,970 --> 00:05:39,419
relate relays them down to kubernetes

105
00:05:35,580 --> 00:05:42,330
<font color="#E5E5E5">and this is how we communicate another</font>

106
00:05:39,419 --> 00:05:44,120
major component is etcd etcd

107
00:05:42,330 --> 00:05:48,300
is the backing<font color="#CCCCCC"> store</font><font color="#E5E5E5"> of kubernetes</font>

108
00:05:44,120 --> 00:05:51,780
kubernetes runs on resources<font color="#E5E5E5"> one</font>

109
00:05:48,300 --> 00:05:56,340
resource for<font color="#CCCCCC"> example is our</font><font color="#E5E5E5"> pods so it</font>

110
00:05:51,780 --> 00:05:58,979
is it the hips in a key<font color="#E5E5E5"> value pair all</font>

111
00:05:56,340 --> 00:06:02,789
the information needed for<font color="#CCCCCC"> our world</font><font color="#E5E5E5"> and</font>

112
00:05:58,979 --> 00:06:06,060
it's in a stateful way so a pod will be

113
00:06:02,789 --> 00:06:09,330
contained in etcd<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it its</font><font color="#E5E5E5"> identity</font>

114
00:06:06,060 --> 00:06:11,580
and<font color="#E5E5E5"> we can always examine it</font><font color="#CCCCCC"> States so</font>

115
00:06:09,330 --> 00:06:13,530
one of<font color="#E5E5E5"> the components in communities</font>

116
00:06:11,580 --> 00:06:17,039
examining the state<font color="#E5E5E5"> of the world is a</font>

117
00:06:13,530 --> 00:06:20,159
scheduler<font color="#CCCCCC"> but before I talk about the</font>

118
00:06:17,039 --> 00:06:23,550
scheduler<font color="#E5E5E5"> the scheduler is one of the</font>

119
00:06:20,159 --> 00:06:25,950
backing<font color="#E5E5E5"> from a background thread in</font>

120
00:06:23,550 --> 00:06:28,100
kubernetes called<font color="#E5E5E5"> controllers each</font>

121
00:06:25,950 --> 00:06:31,670
control controller<font color="#E5E5E5"> looks at the state</font>

122
00:06:28,100 --> 00:06:35,350
the world in any<font color="#E5E5E5"> etcd and act upon them</font>

123
00:06:31,670 --> 00:06:39,350
<font color="#E5E5E5">running</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the background for defined</font>

124
00:06:35,350 --> 00:06:44,810
they found the ratio for examining etcd

125
00:06:39,350 --> 00:06:47,390
<font color="#E5E5E5">so the basic the</font><font color="#CCCCCC"> basic job of</font><font color="#E5E5E5"> a schedule</font>

126
00:06:44,810 --> 00:06:50,090
is to look if a note<font color="#E5E5E5"> if a pod was</font>

127
00:06:47,390 --> 00:06:53,180
created<font color="#E5E5E5"> and it doesn't have a note</font>

128
00:06:50,090 --> 00:06:55,669
assigned to it takes that pod and

129
00:06:53,180 --> 00:07:01,160
schedule it<font color="#CCCCCC"> on top</font><font color="#E5E5E5"> of one</font><font color="#CCCCCC"> of the nodes</font>

130
00:06:55,670 --> 00:07:03,500
in kubernetes so we talked about very

131
00:07:01,160 --> 00:07:06,550
<font color="#CCCCCC">briefly about kubernetes</font><font color="#E5E5E5"> and now we get</font>

132
00:07:03,500 --> 00:07:11,000
<font color="#E5E5E5">the cue grid so cube roots basically</font>

133
00:07:06,550 --> 00:07:13,370
<font color="#E5E5E5">comes to converge to infrastructures we</font>

134
00:07:11,000 --> 00:07:15,800
have our kubernetes infrastructure which

135
00:07:13,370 --> 00:07:19,280
is about containers<font color="#E5E5E5"> but we still want to</font>

136
00:07:15,800 --> 00:07:20,960
<font color="#E5E5E5">manage VMs so Cubert is an add-on for</font>

137
00:07:19,280 --> 00:07:23,630
<font color="#CCCCCC">cuba Nettie's</font><font color="#E5E5E5"> that allows</font><font color="#CCCCCC"> us also to</font>

138
00:07:20,960 --> 00:07:28,370
manage<font color="#CCCCCC"> manage</font><font color="#E5E5E5"> virtual</font><font color="#CCCCCC"> machines</font>

139
00:07:23,630 --> 00:07:30,530
alongside containers this<font color="#E5E5E5"> is a classical</font>

140
00:07:28,370 --> 00:07:33,080
example so containers<font color="#E5E5E5"> is the strong</font>

141
00:07:30,530 --> 00:07:36,859
<font color="#E5E5E5">buzzword around the world it's</font>

142
00:07:33,080 --> 00:07:40,580
considered the<font color="#E5E5E5"> strongest way to go right</font>

143
00:07:36,860 --> 00:07:44,650
<font color="#CCCCCC">now it's faster</font><font color="#E5E5E5"> it's stronger it's sorry</font>

144
00:07:40,580 --> 00:07:47,599
now it's scalable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> consol really high</font>

145
00:07:44,650 --> 00:07:49,729
like Superman for example on the other

146
00:07:47,600 --> 00:07:53,090
hand we have still have our<font color="#E5E5E5"> virtual</font>

147
00:07:49,730 --> 00:07:56,720
machines<font color="#CCCCCC"> so they have their old bulky</font>

148
00:07:53,090 --> 00:07:59,179
utility belt with a<font color="#CCCCCC"> full-out</font><font color="#E5E5E5"> world stack</font>

149
00:07:56,720 --> 00:08:02,890
<font color="#E5E5E5">containing starting from bias and</font>

150
00:07:59,180 --> 00:08:08,390
network adapters storage virtualization

151
00:08:02,890 --> 00:08:10,640
<font color="#E5E5E5">CPU and more but the world is still not</font>

152
00:08:08,390 --> 00:08:13,310
ready to<font color="#CCCCCC"> get rid of virtual machines the</font>

153
00:08:10,640 --> 00:08:19,010
<font color="#CCCCCC">world still</font><font color="#E5E5E5"> needs also Batman for that</font>

154
00:08:13,310 --> 00:08:21,500
matter<font color="#CCCCCC"> so that's that's the main reason</font>

155
00:08:19,010 --> 00:08:23,210
<font color="#CCCCCC">for us to</font><font color="#E5E5E5"> have a</font><font color="#CCCCCC"> convert in convert</font>

156
00:08:21,500 --> 00:08:25,970
infrastructure we don't want to manage

157
00:08:23,210 --> 00:08:29,390
<font color="#CCCCCC">two infrastructures that will give us a</font>

158
00:08:25,970 --> 00:08:35,750
large overhead and duplicate resources

159
00:08:29,390 --> 00:08:38,960
<font color="#CCCCCC">etc so for that we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> Cubert so cube</font>

160
00:08:35,750 --> 00:08:43,130
root comes on top<font color="#E5E5E5"> of kubernetes and</font>

161
00:08:38,960 --> 00:08:45,320
<font color="#CCCCCC">so with</font><font color="#E5E5E5"> it it</font><font color="#CCCCCC"> drops really</font><font color="#E5E5E5"> easy to a</font>

162
00:08:43,130 --> 00:08:49,370
kubernetes cluster<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need to add</font>

163
00:08:45,320 --> 00:08:52,460
to add an<font color="#E5E5E5"> additional all</font><font color="#CCCCCC"> set up it's</font>

164
00:08:49,370 --> 00:08:54,560
<font color="#E5E5E5">really simple to install</font><font color="#CCCCCC"> and it takes</font>

165
00:08:52,460 --> 00:08:58,640
all of the kubernetes benefits and

166
00:08:54,560 --> 00:09:02,750
capabilities such as<font color="#CCCCCC"> scheduling and also</font>

167
00:08:58,640 --> 00:09:05,569
managing it well in a declarative way so

168
00:09:02,750 --> 00:09:09,350
I talked about<font color="#E5E5E5"> pots but</font><font color="#CCCCCC"> Cubert is about</font>

169
00:09:05,570 --> 00:09:13,580
virtual machines<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> represent in</font>

170
00:09:09,350 --> 00:09:15,950
<font color="#CCCCCC">cubed virtual machines</font><font color="#E5E5E5"> as the way</font><font color="#CCCCCC"> pods</font>

171
00:09:13,580 --> 00:09:17,780
are represented in kubernetes<font color="#CCCCCC"> in a</font>

172
00:09:15,950 --> 00:09:21,160
declarative way and they<font color="#E5E5E5"> are managed the</font>

173
00:09:17,780 --> 00:09:23,900
same<font color="#CCCCCC"> ways a pod is managing kubernetes</font>

174
00:09:21,160 --> 00:09:25,550
to understand the concept of load

175
00:09:23,900 --> 00:09:28,220
balancing in communities<font color="#E5E5E5"> and virtual</font>

176
00:09:25,550 --> 00:09:30,829
machines<font color="#CCCCCC"> think about it this way a</font>

177
00:09:28,220 --> 00:09:32,570
virtual<font color="#E5E5E5"> machine is running on top</font><font color="#CCCCCC"> of one</font>

178
00:09:30,830 --> 00:09:33,890
or more pots<font color="#E5E5E5"> so when</font><font color="#CCCCCC"> I'll talk about</font>

179
00:09:32,570 --> 00:09:36,410
<font color="#E5E5E5">scheduling pots</font>

180
00:09:33,890 --> 00:09:42,860
<font color="#E5E5E5">it's basically scheduling virtual</font>

181
00:09:36,410 --> 00:09:45,110
<font color="#E5E5E5">machines we have</font><font color="#CCCCCC"> a twist so just a quick</font>

182
00:09:42,860 --> 00:09:49,190
simple overview<font color="#E5E5E5"> how scheduling works in</font>

183
00:09:45,110 --> 00:09:50,810
kubernetes<font color="#E5E5E5"> so you have the client the</font>

184
00:09:49,190 --> 00:09:54,080
<font color="#CCCCCC">client side where you can run commands</font>

185
00:09:50,810 --> 00:09:56,810
<font color="#E5E5E5">using cube city earth with cube</font><font color="#CCCCCC"> soup</font>

186
00:09:54,080 --> 00:09:59,210
<font color="#CCCCCC">they'll you can initiate a command</font><font color="#E5E5E5"> given</font>

187
00:09:56,810 --> 00:10:02,150
<font color="#E5E5E5">the specification file as kubernetes</font>

188
00:09:59,210 --> 00:10:04,940
being a declarative platform about<font color="#E5E5E5"> the</font>

189
00:10:02,150 --> 00:10:08,780
<font color="#E5E5E5">pod that file will contain as I said</font>

190
00:10:04,940 --> 00:10:11,270
<font color="#E5E5E5">images the image storage and also for</font>

191
00:10:08,780 --> 00:10:14,270
scheduling matters how much resources I

192
00:10:11,270 --> 00:10:17,030
<font color="#E5E5E5">want it to consume or what is the</font>

193
00:10:14,270 --> 00:10:20,360
<font color="#E5E5E5">maximum equals can consume or minimum it</font>

194
00:10:17,030 --> 00:10:22,640
needs so<font color="#CCCCCC"> we created a pot and now we</font>

195
00:10:20,360 --> 00:10:26,390
have a<font color="#CCCCCC"> pot definition the pot is not</font>

196
00:10:22,640 --> 00:10:30,050
running<font color="#E5E5E5"> on any</font><font color="#CCCCCC"> hosts yet</font><font color="#E5E5E5"> once we created</font>

197
00:10:26,390 --> 00:10:36,380
a pot its data is stored in<font color="#E5E5E5"> etcd but</font>

198
00:10:30,050 --> 00:10:39,170
<font color="#E5E5E5">without any</font><font color="#CCCCCC"> host so the scheduler being</font>

199
00:10:36,380 --> 00:10:40,970
a<font color="#CCCCCC"> controller a controller</font><font color="#E5E5E5"> that looks at</font>

200
00:10:39,170 --> 00:10:43,130
the state<font color="#CCCCCC"> of the world</font><font color="#E5E5E5"> notices hey I</font>

201
00:10:40,970 --> 00:10:46,780
have a pod right now it doesn't<font color="#CCCCCC"> have any</font>

202
00:10:43,130 --> 00:10:49,910
<font color="#CCCCCC">host so I'll assign that</font><font color="#E5E5E5"> port to no Dex</font>

203
00:10:46,780 --> 00:10:52,699
<font color="#E5E5E5">schedule the schedule works according to</font>

204
00:10:49,910 --> 00:10:57,709
policies<font color="#E5E5E5"> and some threshold you want to</font>

205
00:10:52,700 --> 00:11:02,060
define examples from our we<font color="#E5E5E5"> orbit world</font>

206
00:10:57,710 --> 00:11:05,420
can be<font color="#E5E5E5"> power-saving evenly distribute</font>

207
00:11:02,060 --> 00:11:07,969
and it acts with filters or in

208
00:11:05,420 --> 00:11:10,699
kubernetes world<font color="#CCCCCC"> are</font><font color="#E5E5E5"> predicates and also</font>

209
00:11:07,970 --> 00:11:14,020
weights or priorities in communities<font color="#CCCCCC"> wat</font>

210
00:11:10,700 --> 00:11:17,560
so doing all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these calculations</font><font color="#CCCCCC"> it</font>

211
00:11:14,020 --> 00:11:20,960
finally comes out<font color="#E5E5E5"> the best</font><font color="#CCCCCC"> host for that</font>

212
00:11:17,560 --> 00:11:23,660
specific<font color="#CCCCCC"> boat once he decides</font><font color="#E5E5E5"> what's</font>

213
00:11:20,960 --> 00:11:29,270
what's<font color="#E5E5E5"> the target</font><font color="#CCCCCC"> host or the</font><font color="#E5E5E5"> cat target</font>

214
00:11:23,660 --> 00:11:31,310
<font color="#CCCCCC">node it updates</font><font color="#E5E5E5"> the state in etcd so the</font>

215
00:11:29,270 --> 00:11:33,530
body<font color="#E5E5E5"> is now</font><font color="#CCCCCC"> over state with its assigned</font>

216
00:11:31,310 --> 00:11:37,250
to know the specific node node<font color="#CCCCCC"> X for</font>

217
00:11:33,530 --> 00:11:40,610
death<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> matter the agent running</font>

218
00:11:37,250 --> 00:11:43,940
<font color="#E5E5E5">on node X notices that something has</font>

219
00:11:40,610 --> 00:11:46,490
changed<font color="#E5E5E5"> VP CD the pot is now assigned</font>

220
00:11:43,940 --> 00:11:49,340
for no leaks in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PCB so said hey I'm</font>

221
00:11:46,490 --> 00:11:52,520
supposed<font color="#CCCCCC"> to run</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> pot</font><font color="#E5E5E5"> and finally</font>

222
00:11:49,340 --> 00:11:54,620
starts a<font color="#CCCCCC"> process which it runs the pot</font>

223
00:11:52,520 --> 00:11:56,990
with all of its container on<font color="#CCCCCC"> top of it</font>

224
00:11:54,620 --> 00:12:00,490
so that's a very<font color="#CCCCCC"> simple flow of</font>

225
00:11:56,990 --> 00:12:04,070
scheduling in kubernetes

226
00:12:00,490 --> 00:12:08,480
so now we now<font color="#E5E5E5"> we talked about scheduling</font>

227
00:12:04,070 --> 00:12:11,150
<font color="#E5E5E5">let's talk a bit about load balancing so</font>

228
00:12:08,480 --> 00:12:15,650
here's the blast from the past<font color="#CCCCCC"> this</font>

229
00:12:11,150 --> 00:12:17,300
<font color="#CCCCCC">editor so it will help</font><font color="#E5E5E5"> us a bit to</font>

230
00:12:15,650 --> 00:12:21,470
understand why do we even<font color="#E5E5E5"> need load</font>

231
00:12:17,300 --> 00:12:24,410
balancing so like your classical old

232
00:12:21,470 --> 00:12:27,170
hard<font color="#E5E5E5"> disk when you create files delete</font>

233
00:12:24,410 --> 00:12:30,560
files<font color="#CCCCCC"> add capacity to it</font><font color="#E5E5E5"> you create</font>

234
00:12:27,170 --> 00:12:33,979
holes and the state of<font color="#E5E5E5"> the artist is</font><font color="#CCCCCC"> not</font>

235
00:12:30,560 --> 00:12:36,709
as good<font color="#E5E5E5"> as it was at the</font><font color="#CCCCCC"> start and this</font>

236
00:12:33,980 --> 00:12:40,010
is a factor<font color="#CCCCCC"> for that matter that the</font>

237
00:12:36,710 --> 00:12:43,130
defragmentation<font color="#E5E5E5"> work and captured this</font>

238
00:12:40,010 --> 00:12:47,030
to be in a more consistent state<font color="#E5E5E5"> same</font>

239
00:12:43,130 --> 00:12:49,610
thing goes to kubernetes cluster<font color="#E5E5E5"> you can</font>

240
00:12:47,030 --> 00:12:50,839
look at<font color="#CCCCCC"> ports as files for creation</font>

241
00:12:49,610 --> 00:12:54,200
<font color="#E5E5E5">Potter mination</font>

242
00:12:50,840 --> 00:12:57,980
adding adding<font color="#E5E5E5"> more nodes will get the</font>

243
00:12:54,200 --> 00:13:00,460
cluster to<font color="#CCCCCC"> be in an app I won't say</font>

244
00:12:57,980 --> 00:13:02,240
unstable but not in an optimized<font color="#CCCCCC"> state</font>

245
00:13:00,460 --> 00:13:04,310
so

246
00:13:02,240 --> 00:13:06,830
the one of the main reasons for<font color="#E5E5E5"> that</font>

247
00:13:04,310 --> 00:13:09,109
that<font color="#E5E5E5"> scheduling decisions in kubernetes</font>

248
00:13:06,830 --> 00:13:12,500
<font color="#E5E5E5">are made only once</font><font color="#CCCCCC"> once you create a pot</font>

249
00:13:09,110 --> 00:13:15,050
and once it's trying to<font color="#E5E5E5"> note it won't it</font>

250
00:13:12,500 --> 00:13:17,720
won't be moved again<font color="#CCCCCC"> the decision is</font>

251
00:13:15,050 --> 00:13:20,149
final<font color="#CCCCCC"> until the</font><font color="#E5E5E5"> pot is terminated and</font>

252
00:13:17,720 --> 00:13:22,910
then a replacement<font color="#E5E5E5"> one will come and the</font>

253
00:13:20,149 --> 00:13:26,779
scheduler will<font color="#E5E5E5"> just schedule it</font><font color="#CCCCCC"> to a new</font>

254
00:13:22,910 --> 00:13:27,829
node<font color="#CCCCCC"> but again pots</font><font color="#E5E5E5"> are killed and then</font>

255
00:13:26,779 --> 00:13:29,810
they don't live<font color="#E5E5E5"> anymore</font>

256
00:13:27,830 --> 00:13:35,180
in a replacement what comes instead of

257
00:13:29,810 --> 00:13:38,060
them<font color="#E5E5E5"> so because of that we need a way to</font>

258
00:13:35,180 --> 00:13:41,750
<font color="#E5E5E5">optimize the cluster layout we want to</font>

259
00:13:38,060 --> 00:13:44,209
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> situation</font><font color="#E5E5E5"> and decide</font><font color="#CCCCCC"> ok I have</font>

260
00:13:41,750 --> 00:13:46,250
some<font color="#CCCCCC"> pots running on certain nodes and</font>

261
00:13:44,209 --> 00:13:48,649
maybe shifting them to other nodes<font color="#E5E5E5"> will</font>

262
00:13:46,250 --> 00:13:51,410
optimize<font color="#E5E5E5"> the cluster layout and give me</font>

263
00:13:48,649 --> 00:13:54,050
a more evenly distributed<font color="#CCCCCC"> cluster or</font>

264
00:13:51,410 --> 00:13:57,140
maybe I<font color="#E5E5E5"> can switch some pots to other</font>

265
00:13:54,050 --> 00:14:01,550
nodes<font color="#E5E5E5"> and save some power by disabling</font>

266
00:13:57,140 --> 00:14:04,580
one node a complete<font color="#E5E5E5"> framework of that</font>

267
00:14:01,550 --> 00:14:07,430
doesn't doesn't<font color="#CCCCCC"> exist</font><font color="#E5E5E5"> yet in kubernetes</font>

268
00:14:04,580 --> 00:14:11,660
but there's work<font color="#E5E5E5"> being done and work</font>

269
00:14:07,430 --> 00:14:14,630
that has been done<font color="#E5E5E5"> for now so in the</font>

270
00:14:11,660 --> 00:14:17,600
kubernetes world let's take a look about

271
00:14:14,630 --> 00:14:25,520
a few of the<font color="#CCCCCC"> examples</font><font color="#E5E5E5"> that currently</font>

272
00:14:17,600 --> 00:14:29,810
exist in<font color="#CCCCCC"> communities so</font><font color="#E5E5E5"> we have the</font>

273
00:14:25,520 --> 00:14:32,360
classical scaling auto scaling so it's

274
00:14:29,810 --> 00:14:35,779
the autoscaler<font color="#E5E5E5"> it simply noticed the</font>

275
00:14:32,360 --> 00:14:38,270
state of the kubernetes cluster<font color="#CCCCCC"> and if</font>

276
00:14:35,779 --> 00:14:40,640
it sees that<font color="#CCCCCC"> their resources</font><font color="#E5E5E5"> are almost</font>

277
00:14:38,270 --> 00:14:44,959
exhausted<font color="#CCCCCC"> it will automatically</font><font color="#E5E5E5"> bring up</font>

278
00:14:40,640 --> 00:14:48,079
a<font color="#E5E5E5"> node bear in mind that it brings up</font>

279
00:14:44,959 --> 00:14:50,750
the node and doesn't move existing<font color="#E5E5E5"> pot</font>

280
00:14:48,079 --> 00:14:52,790
yet to the new node<font color="#E5E5E5"> this is for upcoming</font>

281
00:14:50,750 --> 00:14:55,490
<font color="#E5E5E5">nodes for newly created node in the</font>

282
00:14:52,790 --> 00:14:56,680
future so I won't<font color="#E5E5E5"> worsen the state of</font>

283
00:14:55,490 --> 00:14:58,930
the cluster

284
00:14:56,680 --> 00:15:02,510
another thing is eviction policy

285
00:14:58,930 --> 00:15:07,189
eviction policy<font color="#E5E5E5"> you can look at</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> also</font>

286
00:15:02,510 --> 00:15:09,680
<font color="#CCCCCC">as a concept but for balancing right now</font>

287
00:15:07,190 --> 00:15:11,480
you can look<font color="#E5E5E5"> at it as a concept for a</font>

288
00:15:09,680 --> 00:15:14,180
specific<font color="#E5E5E5"> node and not for the entire</font>

289
00:15:11,480 --> 00:15:17,810
system meaning<font color="#CCCCCC"> I have a note and I said</font>

290
00:15:14,180 --> 00:15:20,060
defined thresholds for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> note</font><font color="#E5E5E5"> once I</font>

291
00:15:17,810 --> 00:15:23,390
reach these thresholds after a grace

292
00:15:20,060 --> 00:15:26,329
period<font color="#CCCCCC"> you defined the node will start</font>

293
00:15:23,390 --> 00:15:29,600
<font color="#CCCCCC">evicting pre-empting</font><font color="#E5E5E5"> a sorry</font><font color="#CCCCCC"> evicting</font>

294
00:15:26,330 --> 00:15:32,210
pot from<font color="#E5E5E5"> that note until</font><font color="#CCCCCC"> it reaches a</font>

295
00:15:29,600 --> 00:15:36,790
stable<font color="#E5E5E5"> state again again it's in a</font>

296
00:15:32,210 --> 00:15:40,279
concept<font color="#E5E5E5"> of one note from from other</font>

297
00:15:36,790 --> 00:15:42,529
virtualization<font color="#E5E5E5"> concepts and maybe other</font>

298
00:15:40,279 --> 00:15:45,200
cluster concepts<font color="#E5E5E5"> you might have heard</font>

299
00:15:42,529 --> 00:15:49,490
about affinity which<font color="#E5E5E5"> basically means a</font>

300
00:15:45,200 --> 00:15:51,860
pot can run along<font color="#CCCCCC"> other pot or a pot can</font>

301
00:15:49,490 --> 00:15:54,410
run on certain hosts<font color="#E5E5E5"> and you have also</font>

302
00:15:51,860 --> 00:15:57,320
<font color="#CCCCCC">ante affinity which</font><font color="#E5E5E5"> means complete</font>

303
00:15:54,410 --> 00:16:00,250
opposite<font color="#E5E5E5"> in kubernetes you have also the</font>

304
00:15:57,320 --> 00:16:04,370
concept of taints and toleration<font color="#E5E5E5"> then</font>

305
00:16:00,250 --> 00:16:07,390
means that<font color="#CCCCCC"> a node will repeal certain</font>

306
00:16:04,370 --> 00:16:11,360
<font color="#E5E5E5">pots according</font><font color="#CCCCCC"> to defined labels and</font>

307
00:16:07,390 --> 00:16:15,260
definitions but you can put on a pot

308
00:16:11,360 --> 00:16:18,470
certain<font color="#E5E5E5"> toleration that means okay the</font>

309
00:16:15,260 --> 00:16:20,240
node will reject this<font color="#E5E5E5"> in that pot but if</font>

310
00:16:18,470 --> 00:16:23,270
I have a toleration then a pot can<font color="#CCCCCC"> be</font>

311
00:16:20,240 --> 00:16:26,630
scheduled<font color="#CCCCCC"> on that note an example for</font>

312
00:16:23,270 --> 00:16:30,230
<font color="#CCCCCC">load-balancing world or maybe for damage</font>

313
00:16:26,630 --> 00:16:32,660
control<font color="#E5E5E5"> one paint can</font><font color="#CCCCCC"> be once I reached</font>

314
00:16:30,230 --> 00:16:35,060
out<font color="#E5E5E5"> of space or out</font><font color="#CCCCCC"> of memory in</font><font color="#E5E5E5"> a</font>

315
00:16:32,660 --> 00:16:36,860
certain node then it applies immediately

316
00:16:35,060 --> 00:16:39,260
an eviction for the pot running on a

317
00:16:36,860 --> 00:16:44,180
<font color="#E5E5E5">note because</font><font color="#CCCCCC"> it cannot tolerate</font><font color="#E5E5E5"> out of</font>

318
00:16:39,260 --> 00:16:46,670
<font color="#CCCCCC">disk</font><font color="#E5E5E5"> and finally another another</font>

319
00:16:44,180 --> 00:16:50,719
solution kubernetes<font color="#CCCCCC"> is about pot</font>

320
00:16:46,670 --> 00:16:53,689
priority and preemption<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> its</font>

321
00:16:50,720 --> 00:16:56,750
<font color="#E5E5E5">scoring</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> pots meaning I want to</font>

322
00:16:53,690 --> 00:16:59,510
grade the pot from 1 to<font color="#CCCCCC"> 1000 for example</font>

323
00:16:56,750 --> 00:17:03,230
being<font color="#CCCCCC"> 1,000 the</font><font color="#E5E5E5"> highest</font><font color="#CCCCCC"> strength so</font>

324
00:16:59,510 --> 00:17:05,300
critical pots will get<font color="#CCCCCC"> 1,000 and not so</font>

325
00:17:03,230 --> 00:17:08,510
critical<font color="#E5E5E5"> thoughts will get something in</font>

326
00:17:05,300 --> 00:17:12,470
the<font color="#E5E5E5"> middle maybe less and once I reach a</font>

327
00:17:08,510 --> 00:17:16,609
<font color="#CCCCCC">specific threshold</font><font color="#E5E5E5"> no sorry critical pot</font>

328
00:17:12,470 --> 00:17:19,610
that will have a high score<font color="#E5E5E5"> are favored</font>

329
00:17:16,609 --> 00:17:23,329
over pots that have<font color="#E5E5E5"> a lower scope scope</font>

330
00:17:19,609 --> 00:17:25,639
so for that<font color="#CCCCCC"> matter I want</font><font color="#E5E5E5"> to create a</font>

331
00:17:23,329 --> 00:17:26,959
new pot which is critical<font color="#CCCCCC"> or I have a</font>

332
00:17:25,640 --> 00:17:29,390
critical pot that

333
00:17:26,959 --> 00:17:32,299
down in what's created again and I<font color="#CCCCCC"> need</font>

334
00:17:29,390 --> 00:17:35,059
<font color="#CCCCCC">it to run</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what we've lower low</font>

335
00:17:32,299 --> 00:17:36,529
priority will be preempted<font color="#E5E5E5"> they will be</font>

336
00:17:35,059 --> 00:17:39,639
moved and the<font color="#E5E5E5"> preemption will cause</font>

337
00:17:36,529 --> 00:17:42,740
critical<font color="#E5E5E5"> pots to be scheduled on a note</font>

338
00:17:39,640 --> 00:17:45,710
these<font color="#E5E5E5"> are partial solutions for the</font>

339
00:17:42,740 --> 00:17:47,720
system that does<font color="#CCCCCC"> relief the state of the</font>

340
00:17:45,710 --> 00:17:54,710
system but it's still not a complete

341
00:17:47,720 --> 00:17:58,220
load balancing solution<font color="#E5E5E5"> so this was</font>

342
00:17:54,710 --> 00:17:59,899
kubernetes<font color="#E5E5E5"> and also kubernetes has great</font>

343
00:17:58,220 --> 00:18:02,029
repository<font color="#E5E5E5"> of repository called</font>

344
00:17:59,899 --> 00:18:05,120
kubernetes<font color="#E5E5E5"> incubator with interesting</font>

345
00:18:02,029 --> 00:18:07,730
projects in it and two of the projects

346
00:18:05,120 --> 00:18:11,360
related to load balancing<font color="#CCCCCC"> or cluster</font>

347
00:18:07,730 --> 00:18:13,419
capacity and the scheduler<font color="#E5E5E5"> so before I</font>

348
00:18:11,360 --> 00:18:16,100
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the scheduler just</font><font color="#CCCCCC"> two quick</font>

349
00:18:13,419 --> 00:18:18,700
overview about classic capacity<font color="#E5E5E5"> master</font>

350
00:18:16,100 --> 00:18:22,730
capacity means I get a<font color="#E5E5E5"> pod specification</font>

351
00:18:18,700 --> 00:18:26,779
rivets for that matter<font color="#E5E5E5"> desired resources</font>

352
00:18:22,730 --> 00:18:30,080
and it takes a snapshot<font color="#E5E5E5"> of the state of</font>

353
00:18:26,779 --> 00:18:33,190
the cluster and then tries to<font color="#E5E5E5"> see on how</font>

354
00:18:30,080 --> 00:18:36,168
<font color="#CCCCCC">many how many</font><font color="#E5E5E5"> nodes the pod will be</font>

355
00:18:33,190 --> 00:18:38,299
deployed on<font color="#E5E5E5"> or assigned to until it</font>

356
00:18:36,169 --> 00:18:41,630
reaches a certain limit<font color="#E5E5E5"> and then we'll</font>

357
00:18:38,299 --> 00:18:43,730
sail<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I I scheduled a number of</font>

358
00:18:41,630 --> 00:18:48,700
thought and<font color="#E5E5E5"> I cannot schedule</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> more</font>

359
00:18:43,730 --> 00:18:51,080
<font color="#E5E5E5">pods dance I did that it's</font><font color="#CCCCCC"> for</font>

360
00:18:48,700 --> 00:18:56,029
specification<font color="#E5E5E5"> of a specific pod and</font>

361
00:18:51,080 --> 00:18:57,770
again not<font color="#E5E5E5"> a complete solution so we're</font>

362
00:18:56,029 --> 00:19:00,730
good we're coming out<font color="#CCCCCC"> to this schedule</font>

363
00:18:57,770 --> 00:19:03,260
this scheduler<font color="#E5E5E5"> currently looks like</font>

364
00:19:00,730 --> 00:19:09,679
something<font color="#CCCCCC"> that is more close to</font><font color="#E5E5E5"> a</font>

365
00:19:03,260 --> 00:19:11,510
complete<font color="#E5E5E5"> load balancing solution so like</font>

366
00:19:09,679 --> 00:19:15,320
classical load balancers for<font color="#E5E5E5"> loop</font>

367
00:19:11,510 --> 00:19:19,370
workloads<font color="#E5E5E5"> the scheduler</font><font color="#CCCCCC"> you set a</font>

368
00:19:15,320 --> 00:19:23,000
certain<font color="#CCCCCC"> strategy or policy can be high</font>

369
00:19:19,370 --> 00:19:26,658
utilization low utilization<font color="#CCCCCC"> power</font>

370
00:19:23,000 --> 00:19:29,299
savings<font color="#CCCCCC"> maybe in the</font><font color="#E5E5E5"> future having said</font>

371
00:19:26,659 --> 00:19:32,840
that policy<font color="#E5E5E5"> it looks for a trigger for a</font>

372
00:19:29,299 --> 00:19:34,760
state<font color="#E5E5E5"> that would it can enable load</font>

373
00:19:32,840 --> 00:19:36,678
balancing in the system<font color="#E5E5E5"> meaning I got to</font>

374
00:19:34,760 --> 00:19:39,500
a<font color="#CCCCCC"> certain state and</font><font color="#E5E5E5"> now I can see that I</font>

375
00:19:36,679 --> 00:19:42,049
<font color="#CCCCCC">can take down one pod kill it and</font>

376
00:19:39,500 --> 00:19:44,780
the scheduler<font color="#E5E5E5"> reschedule it again so</font>

377
00:19:42,049 --> 00:19:46,429
once it look once<font color="#E5E5E5"> he'd get</font><font color="#CCCCCC"> to gets to</font>

378
00:19:44,780 --> 00:19:50,260
<font color="#E5E5E5">that</font><font color="#CCCCCC"> situation it kills about</font>

379
00:19:46,429 --> 00:19:53,600
evicts the pod<font color="#E5E5E5"> a pod been a part of</font>

380
00:19:50,260 --> 00:19:57,950
kubernetes concept<font color="#E5E5E5"> part of deployment or</font>

381
00:19:53,600 --> 00:20:00,860
replication set or application control

382
00:19:57,950 --> 00:20:03,140
will<font color="#E5E5E5"> be recreated</font><font color="#CCCCCC"> instead of the kill</font>

383
00:20:00,860 --> 00:20:05,539
pod and the scheduler<font color="#E5E5E5"> with the new state</font>

384
00:20:03,140 --> 00:20:07,820
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> system of the cluster will</font>

385
00:20:05,539 --> 00:20:11,510
probably schedule<font color="#E5E5E5"> schedule</font><font color="#CCCCCC"> it on a new</font>

386
00:20:07,820 --> 00:20:14,899
better note than it was before<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> all</font>

387
00:20:11,510 --> 00:20:16,640
of<font color="#E5E5E5"> that with an emphasis of minimal</font>

388
00:20:14,900 --> 00:20:18,740
disturbance to<font color="#E5E5E5"> the clutter</font><font color="#CCCCCC"> I don't want</font>

389
00:20:16,640 --> 00:20:20,240
to start killing<font color="#E5E5E5"> pods all over and</font>

390
00:20:18,740 --> 00:20:23,110
evicting them<font color="#E5E5E5"> over and</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> again</font>

391
00:20:20,240 --> 00:20:27,380
because they might not<font color="#CCCCCC"> be reassigned or</font>

392
00:20:23,110 --> 00:20:32,600
<font color="#E5E5E5">it might not improve</font><font color="#CCCCCC"> the state of the</font>

393
00:20:27,380 --> 00:20:36,200
cluster so one existing policy for

394
00:20:32,600 --> 00:20:40,070
example<font color="#CCCCCC"> it's low utilization you can see</font>

395
00:20:36,200 --> 00:20:43,100
that<font color="#E5E5E5"> them on top once I once I see</font><font color="#CCCCCC"> that</font>

396
00:20:40,070 --> 00:20:45,049
the node<font color="#E5E5E5"> has a state with lower number</font>

397
00:20:43,100 --> 00:20:47,360
of<font color="#E5E5E5"> odd</font><font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> then something</font><font color="#CCCCCC"> I defined</font>

398
00:20:45,049 --> 00:20:51,350
and<font color="#CCCCCC"> a low memory and CPU it means I</font>

399
00:20:47,360 --> 00:20:56,600
might want to evict<font color="#E5E5E5"> some</font><font color="#CCCCCC"> pots into</font><font color="#E5E5E5"> that</font>

400
00:20:51,350 --> 00:20:58,939
node<font color="#CCCCCC"> so I can level the system</font><font color="#E5E5E5"> this can</font>

401
00:20:56,600 --> 00:21:01,820
be caught for example if autoscaler

402
00:20:58,940 --> 00:21:03,380
brought up a node and it doesn't have a

403
00:21:01,820 --> 00:21:06,710
lot of<font color="#E5E5E5"> pods running on it and I want</font><font color="#CCCCCC"> to</font>

404
00:21:03,380 --> 00:21:09,530
balance<font color="#E5E5E5"> the system so it</font><font color="#CCCCCC"> basically will</font>

405
00:21:06,710 --> 00:21:12,289
kill a pod and hopefully the schedule

406
00:21:09,530 --> 00:21:20,450
will reschedule<font color="#E5E5E5"> that spot on top of the</font>

407
00:21:12,289 --> 00:21:22,908
new I<font color="#CCCCCC"> don't know so again because</font><font color="#E5E5E5"> we're</font>

408
00:21:20,450 --> 00:21:25,760
repeating<font color="#E5E5E5"> that kubernetes is declarative</font>

409
00:21:22,909 --> 00:21:28,730
<font color="#E5E5E5">and the scheduler also gets a</font>

410
00:21:25,760 --> 00:21:34,640
declarative file with that specific

411
00:21:28,730 --> 00:21:38,270
policy so for the example<font color="#CCCCCC"> of Lolita lies</font>

412
00:21:34,640 --> 00:21:41,809
<font color="#CCCCCC">ation</font><font color="#E5E5E5"> of the zoom in a bit we define</font>

413
00:21:38,270 --> 00:21:44,299
specific threshold for<font color="#E5E5E5"> or low</font>

414
00:21:41,809 --> 00:21:47,990
utilizations<font color="#E5E5E5"> so we can see at the</font><font color="#CCCCCC"> top</font>

415
00:21:44,299 --> 00:21:50,050
<font color="#E5E5E5">example that I defined I want 20% of CPU</font>

416
00:21:47,990 --> 00:21:52,540
and maybe<font color="#CCCCCC"> 20</font><font color="#E5E5E5"> for memories</font>

417
00:21:50,050 --> 00:21:55,210
the best example<font color="#E5E5E5"> but a simple threshold</font>

418
00:21:52,540 --> 00:21:59,320
of memory<font color="#CCCCCC"> that wasn't</font><font color="#E5E5E5"> reach and also</font>

419
00:21:55,210 --> 00:22:01,930
<font color="#E5E5E5">number of pots if a note applies to all</font>

420
00:21:59,320 --> 00:22:04,870
of<font color="#E5E5E5"> these thresholds and it's under it</font>

421
00:22:01,930 --> 00:22:06,970
then it triggers<font color="#E5E5E5"> that the scheduler to</font>

422
00:22:04,870 --> 00:22:09,310
start<font color="#E5E5E5"> searching</font><font color="#CCCCCC"> for other nodes</font><font color="#E5E5E5"> where it</font>

423
00:22:06,970 --> 00:22:12,610
can evict pots<font color="#E5E5E5"> from so we can also</font>

424
00:22:09,310 --> 00:22:15,820
define<font color="#E5E5E5"> target thresholds</font><font color="#CCCCCC"> for nodes you</font>

425
00:22:12,610 --> 00:22:18,929
<font color="#E5E5E5">want to evict pots from so it will be</font>

426
00:22:15,820 --> 00:22:22,629
the others up all the other values<font color="#E5E5E5"> above</font>

427
00:22:18,930 --> 00:22:27,690
50<font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> 50</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> 50 pots will cause a</font>

428
00:22:22,630 --> 00:22:27,690
pot to be<font color="#E5E5E5"> evicted for that specific node</font>

429
00:22:31,230 --> 00:22:38,710
so you just you can't<font color="#E5E5E5"> just start killing</font>

430
00:22:34,600 --> 00:22:42,790
evicting pots<font color="#E5E5E5"> from every note you</font><font color="#CCCCCC"> can't</font>

431
00:22:38,710 --> 00:22:47,320
<font color="#E5E5E5">affect evict critical pots pots that are</font>

432
00:22:42,790 --> 00:22:51,909
not expected to terminate have local

433
00:22:47,320 --> 00:22:53,379
<font color="#CCCCCC">storage for that example again they need</font>

434
00:22:51,910 --> 00:22:55,480
to be a part of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> deployment or a</font>

435
00:22:53,380 --> 00:22:57,760
relation set so they will be recreated

436
00:22:55,480 --> 00:23:00,910
<font color="#CCCCCC">otherwise killing them won't mean</font>

437
00:22:57,760 --> 00:23:03,550
anything<font color="#CCCCCC"> and we want to affect</font><font color="#E5E5E5"> of course</font>

438
00:23:00,910 --> 00:23:10,150
<font color="#E5E5E5">best</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> of pots before critical or</font><font color="#CCCCCC"> burst</font>

439
00:23:03,550 --> 00:23:13,750
of all pots so something is still

440
00:23:10,150 --> 00:23:17,830
<font color="#CCCCCC">missing here</font><font color="#E5E5E5"> that might contribute also</font>

441
00:23:13,750 --> 00:23:21,640
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> disk a jeweler project we want to</font>

442
00:23:17,830 --> 00:23:23,530
know before we evict<font color="#E5E5E5"> the pod and let</font>

443
00:23:21,640 --> 00:23:26,500
kubernetes create a new<font color="#E5E5E5"> one</font>

444
00:23:23,530 --> 00:23:29,410
if a new<font color="#E5E5E5"> pod will even be scheduled on</font>

445
00:23:26,500 --> 00:23:32,440
some node maybe we do all of this work

446
00:23:29,410 --> 00:23:34,720
in vain<font color="#CCCCCC"> we want to have a more accurate</font>

447
00:23:32,440 --> 00:23:37,540
simulation of the system state and

448
00:23:34,720 --> 00:23:40,650
reassignment<font color="#E5E5E5"> not only taking a snapshot</font>

449
00:23:37,540 --> 00:23:43,420
<font color="#CCCCCC">but maybe doing it in</font><font color="#E5E5E5"> real time and</font>

450
00:23:40,650 --> 00:23:50,080
finally actual replacement<font color="#CCCCCC"> of pots to</font>

451
00:23:43,420 --> 00:23:52,420
better nodes so for that<font color="#E5E5E5"> matter we want</font>

452
00:23:50,080 --> 00:23:55,870
to have the<font color="#CCCCCC"> ability of scheduling</font>

453
00:23:52,420 --> 00:23:57,280
simulation scheduling simulation or<font color="#E5E5E5"> dry</font>

454
00:23:55,870 --> 00:23:58,800
<font color="#E5E5E5">run functionality for that matter</font>

455
00:23:57,280 --> 00:24:03,330
doesn't<font color="#E5E5E5"> exist yet</font>

456
00:23:58,800 --> 00:24:06,180
<font color="#CCCCCC">Nettie's it's an</font><font color="#E5E5E5"> open issue we are also</font>

457
00:24:03,330 --> 00:24:07,770
working to contribute on that matter<font color="#E5E5E5"> to</font>

458
00:24:06,180 --> 00:24:11,790
have<font color="#E5E5E5"> the ability for drawing on</font>

459
00:24:07,770 --> 00:24:14,370
scheduling so<font color="#E5E5E5"> scheduling simulation</font>

460
00:24:11,790 --> 00:24:16,920
basically means you take a join<font color="#CCCCCC"> one</font>

461
00:24:14,370 --> 00:24:19,409
<font color="#E5E5E5">endpoint</font><font color="#CCCCCC"> that will take a note a pod</font>

462
00:24:16,920 --> 00:24:22,920
sorry<font color="#CCCCCC"> and eventually</font><font color="#E5E5E5"> we will tell you</font>

463
00:24:19,410 --> 00:24:25,770
where<font color="#CCCCCC"> the pod will</font><font color="#E5E5E5"> be created or well</font>

464
00:24:22,920 --> 00:24:28,410
the where the pod will be binded to or

465
00:24:25,770 --> 00:24:31,590
even<font color="#CCCCCC"> before I want to see if it</font><font color="#E5E5E5"> can be</font>

466
00:24:28,410 --> 00:24:34,560
even binded to a specific<font color="#E5E5E5"> note even</font>

467
00:24:31,590 --> 00:24:37,350
before<font color="#E5E5E5"> getting the results so these are</font>

468
00:24:34,560 --> 00:24:43,679
two<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the outputs</font><font color="#CCCCCC"> very simple</font><font color="#E5E5E5"> for a dry</font>

469
00:24:37,350 --> 00:24:46,290
runs functionality so as I said the use

470
00:24:43,680 --> 00:24:50,670
cases can<font color="#CCCCCC"> be very</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> for rescheduling</font>

471
00:24:46,290 --> 00:24:52,889
<font color="#CCCCCC">a node balancing if I can</font><font color="#E5E5E5"> pre know where</font>

472
00:24:50,670 --> 00:24:54,960
<font color="#E5E5E5">I would schedule that pod on a</font><font color="#CCCCCC"> specific</font>

473
00:24:52,890 --> 00:24:57,960
<font color="#CCCCCC">note that will really help me before</font>

474
00:24:54,960 --> 00:25:01,560
starting<font color="#E5E5E5"> changing the cluster state and</font>

475
00:24:57,960 --> 00:25:03,840
load balancing the system for clutter

476
00:25:01,560 --> 00:25:05,669
capacity analysis for<font color="#CCCCCC"> example instead of</font>

477
00:25:03,840 --> 00:25:07,889
taking a whole snapshot I can just<font color="#E5E5E5"> run</font>

478
00:25:05,670 --> 00:25:10,260
<font color="#CCCCCC">dry scheduling</font><font color="#E5E5E5"> on each pod and then see</font>

479
00:25:07,890 --> 00:25:11,040
what happens<font color="#CCCCCC"> and maybe it would be more</font>

480
00:25:10,260 --> 00:25:14,550
accurate

481
00:25:11,040 --> 00:25:17,909
instead of having time elapsed since I

482
00:25:14,550 --> 00:25:20,430
took<font color="#CCCCCC"> that snapshot</font><font color="#E5E5E5"> also for auto scaling</font>

483
00:25:17,910 --> 00:25:22,160
in kubernetes if I<font color="#E5E5E5"> scale up</font><font color="#CCCCCC"> a node I</font>

484
00:25:20,430 --> 00:25:26,970
want to see what happens next

485
00:25:22,160 --> 00:25:29,850
etc you<font color="#CCCCCC"> also have the</font><font color="#E5E5E5"> capability in</font>

486
00:25:26,970 --> 00:25:31,980
kubernetes to use replacement schedulers

487
00:25:29,850 --> 00:25:34,110
<font color="#CCCCCC">meaning you can</font><font color="#E5E5E5"> create you can create</font>

488
00:25:31,980 --> 00:25:36,870
your own scheduler and have<font color="#E5E5E5"> maybe it's</font>

489
00:25:34,110 --> 00:25:41,639
trigger<font color="#CCCCCC"> predicates</font><font color="#E5E5E5"> of filters so</font>

490
00:25:36,870 --> 00:25:45,469
<font color="#E5E5E5">Stricker Freddie cats usually logically</font>

491
00:25:41,640 --> 00:25:49,020
saying they they<font color="#E5E5E5"> might not like to</font>

492
00:25:45,470 --> 00:25:52,380
<font color="#E5E5E5">assign</font><font color="#CCCCCC"> pods to nodes as easy as</font><font color="#E5E5E5"> in the</font>

493
00:25:49,020 --> 00:25:56,910
kubernetes<font color="#CCCCCC"> top scheduler so we want to</font>

494
00:25:52,380 --> 00:25:59,520
better know how it will happen there<font color="#E5E5E5"> are</font>

495
00:25:56,910 --> 00:26:01,950
some<font color="#E5E5E5"> obstacles</font><font color="#CCCCCC"> for creating this drawin</font>

496
00:25:59,520 --> 00:26:04,050
functionality<font color="#CCCCCC"> on kubernetes</font><font color="#E5E5E5"> because</font>

497
00:26:01,950 --> 00:26:05,430
first of all<font color="#E5E5E5"> we don't want to affect the</font>

498
00:26:04,050 --> 00:26:08,790
state of the world<font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> want to</font>

499
00:26:05,430 --> 00:26:11,160
affect the etcd so which we need<font color="#E5E5E5"> to</font>

500
00:26:08,790 --> 00:26:11,700
leverage caching mechanism in the

501
00:26:11,160 --> 00:26:13,669
cabinet

502
00:26:11,700 --> 00:26:17,220
existing scheduler<font color="#E5E5E5"> which won't be easy</font>

503
00:26:13,669 --> 00:26:19,710
<font color="#CCCCCC">and also</font><font color="#E5E5E5"> we don't want</font><font color="#CCCCCC"> to just a victor</font>

504
00:26:17,220 --> 00:26:22,049
pot and then run it back again<font color="#CCCCCC"> because</font>

505
00:26:19,710 --> 00:26:25,590
I'm<font color="#CCCCCC"> changing the state of the world</font><font color="#E5E5E5"> so</font>

506
00:26:22,049 --> 00:26:34,440
it should be<font color="#CCCCCC"> something more memory wise</font>

507
00:26:25,590 --> 00:26:36,209
instead of changing<font color="#E5E5E5"> etcd so it all comes</font>

508
00:26:34,440 --> 00:26:40,350
down to load balancing virtual machines

509
00:26:36,210 --> 00:26:44,279
of<font color="#E5E5E5"> the concepts I mentioned</font><font color="#CCCCCC"> before</font>

510
00:26:40,350 --> 00:26:45,928
so taking kubernetes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> cupid</font><font color="#E5E5E5"> using</font>

511
00:26:44,279 --> 00:26:47,909
<font color="#CCCCCC">drive and functionality for load</font>

512
00:26:45,929 --> 00:26:48,330
balancing<font color="#CCCCCC"> maybe four with the disc a</font>

513
00:26:47,909 --> 00:26:51,750
<font color="#CCCCCC">jeweller</font>

514
00:26:48,330 --> 00:26:57,529
maybe another algorithm and migrating

515
00:26:51,750 --> 00:27:00,360
eventually<font color="#CCCCCC"> VMS but before we talk about</font>

516
00:26:57,529 --> 00:27:02,820
just running the algorithm<font color="#E5E5E5"> migrating</font>

517
00:27:00,360 --> 00:27:05,399
<font color="#CCCCCC">viens what does it mean</font><font color="#E5E5E5"> so virtual</font>

518
00:27:02,820 --> 00:27:07,769
machine<font color="#CCCCCC"> take it</font><font color="#E5E5E5"> let's look at it in an</font>

519
00:27:05,399 --> 00:27:11,268
absolute way abstract way<font color="#E5E5E5"> virtual</font>

520
00:27:07,769 --> 00:27:13,679
<font color="#E5E5E5">machines run on</font><font color="#CCCCCC"> pod</font><font color="#E5E5E5"> one or more pods</font><font color="#CCCCCC"> and</font>

521
00:27:11,269 --> 00:27:15,690
we don't want to kill virtual machines

522
00:27:13,679 --> 00:27:18,149
<font color="#CCCCCC">we</font><font color="#E5E5E5"> don't want to evict the pod that a</font>

523
00:27:15,690 --> 00:27:20,549
virtual<font color="#E5E5E5"> machine runs on killing it will</font>

524
00:27:18,149 --> 00:27:24,658
say we<font color="#E5E5E5"> don't it</font><font color="#CCCCCC"> doesn't really create</font><font color="#E5E5E5"> a</font>

525
00:27:20,549 --> 00:27:26,820
live migration<font color="#E5E5E5"> so for that matter</font><font color="#CCCCCC"> what</font>

526
00:27:24,659 --> 00:27:28,620
we want<font color="#CCCCCC"> to do is before killing</font><font color="#E5E5E5"> the pot</font>

527
00:27:26,820 --> 00:27:32,158
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> virtual machine is creating a</font>

528
00:27:28,620 --> 00:27:34,289
replacement pod and then transferring

529
00:27:32,159 --> 00:27:37,559
the workload of the<font color="#E5E5E5"> virtual machine</font><font color="#CCCCCC"> to</font>

530
00:27:34,289 --> 00:27:39,870
the new pod as a result of load

531
00:27:37,559 --> 00:27:46,830
balancing<font color="#CCCCCC"> and shifting a</font><font color="#E5E5E5"> pod to another</font>

532
00:27:39,870 --> 00:27:49,199
node so<font color="#CCCCCC"> cube root</font><font color="#E5E5E5"> has a new object</font>

533
00:27:46,830 --> 00:27:52,110
<font color="#E5E5E5">called migration which defines a</font>

534
00:27:49,200 --> 00:27:55,080
destination<font color="#E5E5E5"> node defines what is the VM</font>

535
00:27:52,110 --> 00:27:58,590
and the status of<font color="#E5E5E5"> the state so once a</font>

536
00:27:55,080 --> 00:28:01,500
migration object is created<font color="#E5E5E5"> we schedule</font>

537
00:27:58,590 --> 00:28:03,899
a new pod it schedules a new pod when it

538
00:28:01,500 --> 00:28:07,590
starts<font color="#E5E5E5"> it triggers the migration and</font><font color="#CCCCCC"> at</font>

539
00:28:03,899 --> 00:28:10,129
the end the<font color="#E5E5E5"> VM moves moves to the new to</font>

540
00:28:07,590 --> 00:28:10,129
the new pod

541
00:28:14,200 --> 00:28:21,310
so how can<font color="#E5E5E5"> it work on Cupid so as I said</font>

542
00:28:17,960 --> 00:28:24,200
where did<font color="#E5E5E5"> the scheduler</font><font color="#CCCCCC"> the scheduler</font>

543
00:28:21,310 --> 00:28:26,750
evicts the first body<font color="#E5E5E5"> sees from a</font>

544
00:28:24,200 --> 00:28:30,260
<font color="#CCCCCC">specific node and then lets a new pod</font>

545
00:28:26,750 --> 00:28:32,780
<font color="#E5E5E5">krispy kreme kills it and kubernetes</font><font color="#CCCCCC"> and</font>

546
00:28:30,260 --> 00:28:39,080
the<font color="#E5E5E5"> replacement pod would be rescheduled</font>

547
00:28:32,780 --> 00:28:41,389
<font color="#CCCCCC">rescheduled by kubernetes</font><font color="#E5E5E5"> but we don't</font>

548
00:28:39,080 --> 00:28:44,389
want<font color="#E5E5E5"> to kill the pot yet so instead of</font>

549
00:28:41,390 --> 00:28:47,510
it we will just<font color="#E5E5E5"> block for</font><font color="#CCCCCC"> eviction of</font>

550
00:28:44,390 --> 00:28:50,270
<font color="#E5E5E5">pot deletions and virtual machine</font>

551
00:28:47,510 --> 00:28:52,190
migration will be in the<font color="#E5E5E5"> background we</font>

552
00:28:50,270 --> 00:28:54,020
will create a regression object<font color="#CCCCCC"> a new</font>

553
00:28:52,190 --> 00:28:57,380
<font color="#E5E5E5">pod will be created and then a virtual</font>

554
00:28:54,020 --> 00:29:01,639
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> will finally move there I also</font>

555
00:28:57,380 --> 00:29:04,940
talked about scheduling simulation<font color="#E5E5E5"> so we</font>

556
00:29:01,640 --> 00:29:07,460
might<font color="#CCCCCC"> want one we might be able</font><font color="#E5E5E5"> to</font>

557
00:29:04,940 --> 00:29:10,010
neglect the<font color="#E5E5E5"> scheduler project and do</font>

558
00:29:07,460 --> 00:29:12,260
explicit load balancing based on

559
00:29:10,010 --> 00:29:16,850
migration<font color="#E5E5E5"> objects and utilizing the</font>

560
00:29:12,260 --> 00:29:20,330
<font color="#CCCCCC">Dragon functionality so this is an</font>

561
00:29:16,850 --> 00:29:22,429
example for a<font color="#CCCCCC"> brute-force</font><font color="#E5E5E5"> algorithm that</font>

562
00:29:20,330 --> 00:29:26,480
will make use of such<font color="#CCCCCC"> drivin</font>

563
00:29:22,430 --> 00:29:29,720
functionality<font color="#CCCCCC"> I will go all over</font><font color="#E5E5E5"> the</font>

564
00:29:26,480 --> 00:29:35,090
pots<font color="#E5E5E5"> in this cluster</font><font color="#CCCCCC"> taken from all the</font>

565
00:29:29,720 --> 00:29:37,280
<font color="#CCCCCC">nodes</font><font color="#E5E5E5"> dry run will dry run them with</font><font color="#CCCCCC"> the</font>

566
00:29:35,090 --> 00:29:43,399
scheduler<font color="#E5E5E5"> and see what is the</font>

567
00:29:37,280 --> 00:29:45,110
destination<font color="#E5E5E5"> node so for each pot that I</font>

568
00:29:43,400 --> 00:29:47,690
found the<font color="#CCCCCC"> destination node I want to</font>

569
00:29:45,110 --> 00:29:49,669
score it<font color="#E5E5E5"> give it some sort of scoring</font>

570
00:29:47,690 --> 00:29:50,150
<font color="#E5E5E5">game</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> want to score</font><font color="#E5E5E5"> the node</font>

571
00:29:49,670 --> 00:29:52,010
itself

572
00:29:50,150 --> 00:29:54,260
<font color="#CCCCCC">I will score according to the note</font>

573
00:29:52,010 --> 00:29:57,470
according<font color="#E5E5E5"> to its memory</font><font color="#CCCCCC"> consumption</font>

574
00:29:54,260 --> 00:30:01,879
<font color="#E5E5E5">according to CPU</font><font color="#CCCCCC"> maybe other aspects you</font>

575
00:29:57,470 --> 00:30:05,600
want to add later<font color="#E5E5E5"> on using priorities so</font>

576
00:30:01,880 --> 00:30:08,360
I have an overall score score for that

577
00:30:05,600 --> 00:30:10,070
<font color="#E5E5E5">matter let's let's see that the higher</font>

578
00:30:08,360 --> 00:30:13,040
score is the better migration so I

579
00:30:10,070 --> 00:30:17,270
scored the migration<font color="#E5E5E5"> eventually so once</font>

580
00:30:13,040 --> 00:30:22,090
<font color="#CCCCCC">I've went all over</font><font color="#E5E5E5"> possible all over</font>

581
00:30:17,270 --> 00:30:22,090
<font color="#CCCCCC">possible migrations</font><font color="#E5E5E5"> I'll get</font>

582
00:30:22,650 --> 00:30:27,720
<font color="#E5E5E5">a list of all migration results and then</font>

583
00:30:25,290 --> 00:30:30,360
like in MapReduce<font color="#CCCCCC"> I will reduce it to</font>

584
00:30:27,720 --> 00:30:33,960
<font color="#E5E5E5">the best score that I have and according</font>

585
00:30:30,360 --> 00:30:36,389
to that<font color="#E5E5E5"> I will initiate the migration so</font>

586
00:30:33,960 --> 00:30:38,340
the best migration will be for the<font color="#E5E5E5"> best</font>

587
00:30:36,390 --> 00:30:40,890
<font color="#CCCCCC">overall and then</font><font color="#E5E5E5"> will trigger a</font>

588
00:30:38,340 --> 00:30:45,270
migration event<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> pod will be</font>

589
00:30:40,890 --> 00:30:48,420
rescheduled<font color="#E5E5E5"> this could be very CPU</font>

590
00:30:45,270 --> 00:30:51,420
consuming since<font color="#CCCCCC"> its</font><font color="#E5E5E5"> brute force but it's</font>

591
00:30:48,420 --> 00:30:53,240
another<font color="#CCCCCC"> example how you can utilize dry</font>

592
00:30:51,420 --> 00:30:55,590
<font color="#E5E5E5">run functionality in</font><font color="#CCCCCC"> cuba Nettie's</font>

593
00:30:53,240 --> 00:31:03,030
without using other projects<font color="#CCCCCC"> or maybe</font>

594
00:30:55,590 --> 00:31:05,490
<font color="#E5E5E5">creating your own own load balancer</font><font color="#CCCCCC"> okay</font>

595
00:31:03,030 --> 00:31:07,860
so we talked about kubernetes<font color="#CCCCCC"> cube</font>

596
00:31:05,490 --> 00:31:10,020
<font color="#CCCCCC">virtual balancing scheduling dry</font><font color="#E5E5E5"> run</font>

597
00:31:07,860 --> 00:31:11,969
scheduling<font color="#E5E5E5"> but it all comes down to</font>

598
00:31:10,020 --> 00:31:12,560
virtual machine and balancing virtual

599
00:31:11,970 --> 00:31:15,270
machines

600
00:31:12,560 --> 00:31:17,730
we are<font color="#E5E5E5"> leveraging kubernetes concepts</font>

601
00:31:15,270 --> 00:31:21,090
using<font color="#CCCCCC"> cupid we're leveraging the</font>

602
00:31:17,730 --> 00:31:23,400
scheduler<font color="#E5E5E5"> and finally we might want and</font>

603
00:31:21,090 --> 00:31:27,199
wish to<font color="#E5E5E5"> add more capabilities to</font>

604
00:31:23,400 --> 00:31:30,000
kubernetes such as<font color="#E5E5E5"> dragon functionality</font>

605
00:31:27,200 --> 00:31:33,240
kubernetes are still on death on their

606
00:31:30,000 --> 00:31:35,970
side<font color="#E5E5E5"> our youth</font><font color="#CCCCCC"> are adding more</font><font color="#E5E5E5"> concepts</font>

607
00:31:33,240 --> 00:31:37,890
for optimizing cluster and you<font color="#CCCCCC"> will</font>

608
00:31:35,970 --> 00:31:42,260
always see in each person a new concept

609
00:31:37,890 --> 00:31:46,290
<font color="#CCCCCC">eviction policy is a bit new also also</font>

610
00:31:42,260 --> 00:31:49,500
<font color="#E5E5E5">what what priorities new so it's an</font>

611
00:31:46,290 --> 00:31:53,879
ongoing ongoing<font color="#E5E5E5"> work on that map on that</font>

612
00:31:49,500 --> 00:31:56,730
<font color="#E5E5E5">area so there's still more</font><font color="#CCCCCC"> to come</font><font color="#E5E5E5"> still</font>

613
00:31:53,880 --> 00:31:58,440
<font color="#E5E5E5">work for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> virtual machines world but</font>

614
00:31:56,730 --> 00:32:00,840
it's all<font color="#E5E5E5"> very interesting</font><font color="#CCCCCC"> and exciting</font>

615
00:31:58,440 --> 00:32:02,730
<font color="#E5E5E5">and I think in the following next year</font>

616
00:32:00,840 --> 00:32:05,250
you'll have<font color="#E5E5E5"> you'll see more concrete</font>

617
00:32:02,730 --> 00:32:09,960
results in converged infrastructure for

618
00:32:05,250 --> 00:32:14,150
virtual machines<font color="#E5E5E5"> and containers so that</font>

619
00:32:09,960 --> 00:32:18,830
was for me<font color="#E5E5E5"> and if you have any questions</font>

620
00:32:14,150 --> 00:32:18,830
I'll be happy<font color="#CCCCCC"> to answer yes</font>

621
00:32:34,140 --> 00:33:03,580
again can<font color="#CCCCCC"> you repeat the question you</font>

622
00:32:44,980 --> 00:33:05,200
don't<font color="#CCCCCC"> want to isolate the problem so</font>

623
00:33:03,580 --> 00:33:08,800
you're asking<font color="#E5E5E5"> if you</font>

624
00:33:05,200 --> 00:33:12,060
it's about acid<font color="#E5E5E5"> isolation and load</font><font color="#CCCCCC"> bands</font>

625
00:33:08,800 --> 00:33:12,060
how are you talking<font color="#E5E5E5"> about throughput</font>

626
00:33:18,799 --> 00:33:26,519
<font color="#CCCCCC">No okay so if I got</font><font color="#E5E5E5"> it correctly is you</font>

627
00:33:24,120 --> 00:33:33,350
think the problem is<font color="#CCCCCC"> isolations</font><font color="#E5E5E5"> and why</font>

628
00:33:26,519 --> 00:33:36,059
do you basically again<font color="#E5E5E5"> it's it's about</font>

629
00:33:33,350 --> 00:33:38,699
the load balancing<font color="#CCCCCC"> concept</font><font color="#E5E5E5"> is about the</font>

630
00:33:36,059 --> 00:33:42,539
<font color="#E5E5E5">system of the cluster the state of nodes</font>

631
00:33:38,700 --> 00:33:44,940
and resource consumption<font color="#E5E5E5"> it means that I</font>

632
00:33:42,539 --> 00:33:47,610
<font color="#E5E5E5">have certain containers in pots running</font>

633
00:33:44,940 --> 00:33:51,029
on a<font color="#CCCCCC"> node and the node came to a certain</font>

634
00:33:47,610 --> 00:33:53,879
<font color="#CCCCCC">state where I</font><font color="#E5E5E5"> have other nodes that can</font>

635
00:33:51,029 --> 00:33:55,740
take<font color="#E5E5E5"> some of the pots again</font><font color="#CCCCCC"> if you're</font>

636
00:33:53,880 --> 00:33:57,480
talking<font color="#CCCCCC"> about as the</font><font color="#E5E5E5"> isolation you have</font>

637
00:33:55,740 --> 00:33:59,730
a phonetic concept for that and<font color="#CCCCCC"> dates</font>

638
00:33:57,480 --> 00:34:02,309
<font color="#CCCCCC">and Toleration</font><font color="#E5E5E5"> meaning I want simple to</font>

639
00:33:59,730 --> 00:34:04,620
simple containers<font color="#CCCCCC"> to one specific node</font>

640
00:34:02,309 --> 00:34:07,158
if I understand<font color="#E5E5E5"> correctly these are</font>

641
00:34:04,620 --> 00:34:09,540
other concepts being<font color="#E5E5E5"> in affinity and</font>

642
00:34:07,159 --> 00:34:11,879
paints<font color="#E5E5E5"> and toleration but balancing</font>

643
00:34:09,540 --> 00:34:13,800
concept<font color="#E5E5E5"> is around just stable on is</font>

644
00:34:11,879 --> 00:34:17,779
stabilizing<font color="#E5E5E5"> the system in terms of</font>

645
00:34:13,800 --> 00:34:17,780
workloads<font color="#E5E5E5"> and resources</font>

646
00:34:20,500 --> 00:34:28,360
as far as<font color="#CCCCCC"> I knew</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the migration</font>

647
00:34:24,100 --> 00:34:28,360
<font color="#E5E5E5">on this migraine and</font>

648
00:34:28,850 --> 00:34:33,290
on my container<font color="#E5E5E5"> at the migration</font>

649
00:34:37,699 --> 00:34:45,449
<font color="#E5E5E5">NBC's</font><font color="#CCCCCC"> its said about peace no it's not</font>

650
00:34:43,529 --> 00:34:47,929
<font color="#E5E5E5">open we see is not supported</font><font color="#CCCCCC"> by</font>

651
00:34:45,449 --> 00:34:47,928
kubernetes

652
00:35:00,050 --> 00:35:21,570
it's a similar approach yeah<font color="#CCCCCC"> again it's</font>

653
00:35:18,930 --> 00:35:23,310
it's nothing<font color="#E5E5E5"> this is kubernetes but I'll</font>

654
00:35:21,570 --> 00:35:39,030
be happy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> discuss with you later on</font>

655
00:35:23,310 --> 00:35:40,890
<font color="#CCCCCC">about this</font><font color="#E5E5E5"> approach yeah yet again</font><font color="#CCCCCC"> is</font>

656
00:35:39,030 --> 00:35:50,610
that<font color="#CCCCCC"> a naive approach for live migration</font>

657
00:35:40,890 --> 00:35:52,560
on top of<font color="#CCCCCC"> Cuban artists</font><font color="#E5E5E5"> okay so you</font>

658
00:35:50,610 --> 00:35:55,680
asked if the approach of<font color="#CCCCCC"> discus</font><font color="#E5E5E5"> this</font>

659
00:35:52,560 --> 00:35:59,370
<font color="#CCCCCC">scheduled a sonic for Qbert or not only</font>

660
00:35:55,680 --> 00:36:03,960
<font color="#E5E5E5">for pivot this scheduler is a project</font>

661
00:35:59,370 --> 00:36:07,589
for kubernetes not not<font color="#E5E5E5"> Qbert but it can</font>

662
00:36:03,960 --> 00:36:11,280
also contribute for Qbert for virtual

663
00:36:07,590 --> 00:36:14,330
machines<font color="#CCCCCC"> we can use as I said at the end</font>

664
00:36:11,280 --> 00:36:17,580
of the presentation we can leverage it

665
00:36:14,330 --> 00:36:19,230
see where we can evict<font color="#E5E5E5"> the pod and then</font>

666
00:36:17,580 --> 00:36:21,180
instead<font color="#CCCCCC"> of letting it</font><font color="#E5E5E5"> evicted again</font>

667
00:36:19,230 --> 00:36:22,740
pod it's in the kubernetes world<font color="#E5E5E5"> we're</font>

668
00:36:21,180 --> 00:36:27,000
talking<font color="#E5E5E5"> about virtual machines</font><font color="#CCCCCC"> running</font>

669
00:36:22,740 --> 00:36:29,729
on pods so this scheduler<font color="#E5E5E5"> a victor pod</font>

670
00:36:27,000 --> 00:36:32,550
and then a pot is recreated and the

671
00:36:29,730 --> 00:36:34,770
kubernetes scheduler just schedules the

672
00:36:32,550 --> 00:36:38,820
replacement pod on a new node<font color="#CCCCCC"> that's a</font>

673
00:36:34,770 --> 00:36:41,640
kubernetes concept so integrating<font color="#CCCCCC"> Hubert</font>

674
00:36:38,820 --> 00:36:43,980
concept is not it's blocking<font color="#E5E5E5"> the spot</font>

675
00:36:41,640 --> 00:36:47,009
deletion creating a replacement pod and

676
00:36:43,980 --> 00:36:49,590
<font color="#E5E5E5">by by by creating a migration object</font>

677
00:36:47,010 --> 00:36:53,450
which is a part of<font color="#CCCCCC"> Qbert and</font><font color="#E5E5E5"> then moving</font>

678
00:36:49,590 --> 00:36:53,450
<font color="#E5E5E5">the VM to</font><font color="#CCCCCC"> a new pod</font>

679
00:36:58,170 --> 00:37:09,609
so<font color="#E5E5E5"> are there known</font><font color="#CCCCCC"> Qbert applications</font>

680
00:37:01,059 --> 00:37:14,529
for that<font color="#E5E5E5"> concept in life</font>

681
00:37:09,609 --> 00:37:16,359
<font color="#E5E5E5">my guess no you cannot do live</font>

682
00:37:14,529 --> 00:37:19,779
migrations for containers because<font color="#E5E5E5"> the</font>

683
00:37:16,359 --> 00:37:23,199
concept<font color="#E5E5E5"> again for pods</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> it's once</font>

684
00:37:19,779 --> 00:37:32,619
they're terminated<font color="#E5E5E5"> its final very room</font>

685
00:37:23,199 --> 00:37:34,989
for<font color="#CCCCCC"> monarchies</font><font color="#E5E5E5"> watching yeah what's the</font>

686
00:37:32,619 --> 00:37:37,150
different virtual cubelet<font color="#E5E5E5"> what's the</font>

687
00:37:34,989 --> 00:37:51,150
difference between virtual<font color="#CCCCCC"> qubit and the</font>

688
00:37:37,150 --> 00:37:54,009
cube<font color="#E5E5E5"> third I'm less</font><font color="#CCCCCC"> familiar with the</font>

689
00:37:51,150 --> 00:37:59,829
Microsoft Project<font color="#CCCCCC"> maybe it has the same</font>

690
00:37:54,009 --> 00:38:02,829
concept so<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> an integration</font><font color="#E5E5E5"> for Azure</font>

691
00:37:59,829 --> 00:38:06,339
Microsoft so unless familiar with that

692
00:38:02,829 --> 00:38:10,809
but like maybe we can talk about<font color="#CCCCCC"> the</font>

693
00:38:06,339 --> 00:38:16,019
differences<font color="#E5E5E5"> I don't have time for</font>

694
00:38:10,809 --> 00:38:16,019
another question yeah

695
00:38:31,270 --> 00:38:34,380
[Music]

696
00:38:39,330 --> 00:38:42,369
[Music]

697
00:38:48,580 --> 00:38:51,770
[Music]

698
00:38:56,490 --> 00:39:02,859
so you're talking<font color="#E5E5E5"> about the question it</font>

699
00:39:00,130 --> 00:39:07,210
was<font color="#E5E5E5"> about the load balancing Network</font>

700
00:39:02,860 --> 00:39:10,000
load if I understand<font color="#CCCCCC"> correctly or this</font>

701
00:39:07,210 --> 00:39:13,930
guy<font color="#CCCCCC"> or other concept</font><font color="#E5E5E5"> other than CPU and</font>

702
00:39:10,000 --> 00:39:16,510
memory on top of kubernetes<font color="#CCCCCC"> I give an</font>

703
00:39:13,930 --> 00:39:19,180
<font color="#E5E5E5">example for CPU</font><font color="#CCCCCC"> and memory just to grasp</font>

704
00:39:16,510 --> 00:39:24,760
the<font color="#CCCCCC"> things in kubernetes you can also</font>

705
00:39:19,180 --> 00:39:27,399
<font color="#CCCCCC">apply to to pod labels</font><font color="#E5E5E5"> other than</font>

706
00:39:24,760 --> 00:39:29,230
labeling<font color="#E5E5E5"> pots</font><font color="#CCCCCC"> I know in terms</font><font color="#E5E5E5"> of</font>

707
00:39:27,400 --> 00:39:32,020
throughput<font color="#E5E5E5"> kubernetes does have a load</font>

708
00:39:29,230 --> 00:39:35,070
balancing which<font color="#CCCCCC"> isn't not a lot balancer</font>

709
00:39:32,020 --> 00:39:38,410
<font color="#E5E5E5">I talked about</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> about throughput but</font>

710
00:39:35,070 --> 00:39:40,420
you can also apply extra predicates<font color="#CCCCCC"> I</font>

711
00:39:38,410 --> 00:39:42,430
don't know if you read<font color="#E5E5E5"> about the</font>

712
00:39:40,420 --> 00:39:45,220
kubernetes<font color="#CCCCCC"> scheduler itself</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> you can</font>

713
00:39:42,430 --> 00:39:48,009
create<font color="#E5E5E5"> your</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> schedule with trigger</font>

714
00:39:45,220 --> 00:39:50,350
<font color="#E5E5E5">predicate and maybe add filtering</font><font color="#CCCCCC"> for</font>

715
00:39:48,010 --> 00:39:54,370
networking and<font color="#E5E5E5"> other priority for that</font>

716
00:39:50,350 --> 00:39:56,170
matter also<font color="#E5E5E5"> for i/o so the concept is</font>

717
00:39:54,370 --> 00:40:05,250
<font color="#CCCCCC">fine</font><font color="#E5E5E5"> but you can always add</font><font color="#CCCCCC"> on top of</font>

718
00:39:56,170 --> 00:40:05,250
this<font color="#E5E5E5"> okay</font>

719
00:40:19,820 --> 00:40:21,880
<font color="#E5E5E5">you</font>

