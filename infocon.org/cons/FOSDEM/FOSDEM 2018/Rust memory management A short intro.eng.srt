1
00:00:22,950 --> 00:00:28,360
hello everyone<font color="#CCCCCC"> I</font><font color="#E5E5E5"> wasn't expecting this</font>

2
00:00:26,230 --> 00:00:30,670
many<font color="#E5E5E5"> people say</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> there were four</font>

3
00:00:28,360 --> 00:00:34,360
people<font color="#E5E5E5"> because it's 10:00</font><font color="#CCCCCC"> in the morning</font>

4
00:00:30,670 --> 00:00:37,269
but yeah thanks for<font color="#E5E5E5"> coming I</font>

5
00:00:34,360 --> 00:00:40,480
my name is Ishaan<font color="#CCCCCC"> I work at a company</font>

6
00:00:37,269 --> 00:00:43,449
small<font color="#E5E5E5"> company in Berlin called</font><font color="#CCCCCC"> kinfoke</font>

7
00:00:40,480 --> 00:00:45,699
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> for hire Linux expertise company</font>

8
00:00:43,449 --> 00:00:50,920
mostly<font color="#CCCCCC"> I work around kubernetes and</font>

9
00:00:45,699 --> 00:00:53,858
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> in container technologies and I've</font>

10
00:00:50,920 --> 00:00:57,069
been fond<font color="#E5E5E5"> of rust for a long time ever</font>

11
00:00:53,859 --> 00:00:58,809
since it<font color="#CCCCCC"> was first</font><font color="#E5E5E5"> introduced it was</font>

12
00:00:57,069 --> 00:01:00,969
<font color="#E5E5E5">pretty unstable so nobody could use it</font>

13
00:00:58,809 --> 00:01:04,479
<font color="#E5E5E5">but lately I have been using it</font>

14
00:01:00,969 --> 00:01:06,880
<font color="#E5E5E5">especially now I also</font><font color="#CCCCCC"> it works a bit so</font>

15
00:01:04,479 --> 00:01:09,340
yeah I wanted<font color="#E5E5E5"> to introduce memory</font>

16
00:01:06,880 --> 00:01:11,710
<font color="#E5E5E5">management because a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> people when</font>

17
00:01:09,340 --> 00:01:14,170
<font color="#CCCCCC">they come across</font><font color="#E5E5E5"> this new</font><font color="#CCCCCC"> language they</font>

18
00:01:11,710 --> 00:01:16,240
stumble<font color="#E5E5E5"> with at least I did I was really</font>

19
00:01:14,170 --> 00:01:18,579
having a<font color="#E5E5E5"> hard time with the memory</font>

20
00:01:16,240 --> 00:01:24,850
aspect of it<font color="#E5E5E5"> so it's good to have an</font>

21
00:01:18,579 --> 00:01:28,530
<font color="#E5E5E5">introduction to that so how many of you</font>

22
00:01:24,850 --> 00:01:32,109
know essential rust<font color="#CCCCCC"> like some some of it</font>

23
00:01:28,530 --> 00:01:33,579
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> quite many so I do I won't get into a</font>

24
00:01:32,109 --> 00:01:36,250
lot of details anyway<font color="#E5E5E5"> but I'll just</font>

25
00:01:33,579 --> 00:01:39,850
<font color="#E5E5E5">quickly introduce</font><font color="#CCCCCC"> the aspects that</font><font color="#E5E5E5"> I'll</font>

26
00:01:36,250 --> 00:01:41,439
use later<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the examples</font><font color="#CCCCCC"> well mainly</font>

27
00:01:39,850 --> 00:01:45,009
<font color="#E5E5E5">it's like a system programming language</font>

28
00:01:41,439 --> 00:01:47,350
so it's there<font color="#E5E5E5"> some programming languages</font>

29
00:01:45,009 --> 00:01:49,990
they ensure safety some programming

30
00:01:47,350 --> 00:01:51,579
languages<font color="#E5E5E5"> ensure efficiency but with</font>

31
00:01:49,990 --> 00:01:53,859
rust you<font color="#E5E5E5"> have both</font><font color="#CCCCCC"> of them at the same</font>

32
00:01:51,579 --> 00:01:56,229
<font color="#CCCCCC">time</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is the focus on both of</font>

33
00:01:53,859 --> 00:01:59,140
these things in the design<font color="#CCCCCC"> of the</font>

34
00:01:56,229 --> 00:02:02,380
<font color="#E5E5E5">language</font><font color="#CCCCCC"> so it makes it really really</font>

35
00:01:59,140 --> 00:02:05,280
<font color="#CCCCCC">awesome language in my opinion and you</font>

36
00:02:02,380 --> 00:02:09,639
<font color="#CCCCCC">have a concept of zero cost abstractions</font>

37
00:02:05,280 --> 00:02:13,170
so everything you code in in rust<font color="#CCCCCC"> you it</font>

38
00:02:09,639 --> 00:02:13,170
will<font color="#E5E5E5"> be have a equivalent</font>

39
00:02:13,599 --> 00:02:20,048
performance as<font color="#CCCCCC"> if you write it in C or</font>

40
00:02:16,540 --> 00:02:22,060
<font color="#E5E5E5">C++ actually Sebastian he's in the queue</font>

41
00:02:20,049 --> 00:02:25,030
outside<font color="#CCCCCC"> I think</font>

42
00:02:22,060 --> 00:02:27,189
he's not here right<font color="#CCCCCC"> he's working on</font>

43
00:02:25,030 --> 00:02:30,849
<font color="#CCCCCC">gstreamer he's writing gstreamer</font>

44
00:02:27,189 --> 00:02:35,739
<font color="#CCCCCC">plug-ins and elements in in rust and he</font>

45
00:02:30,849 --> 00:02:37,899
<font color="#CCCCCC">actually saved a lot of CPU</font><font color="#E5E5E5"> he made it</font>

46
00:02:35,739 --> 00:02:39,879
made the code<font color="#E5E5E5"> perform</font><font color="#CCCCCC"> much better</font>

47
00:02:37,900 --> 00:02:43,060
<font color="#E5E5E5">because</font><font color="#CCCCCC"> in rust you can you can achieve</font>

48
00:02:39,879 --> 00:02:47,980
it more<font color="#E5E5E5"> easily</font><font color="#CCCCCC"> because of</font><font color="#E5E5E5"> the zero cost</font>

49
00:02:43,060 --> 00:02:50,590
abstractions<font color="#CCCCCC"> that we have in rust it has</font>

50
00:02:47,980 --> 00:02:54,369
a non mutable state by default<font color="#E5E5E5"> so if you</font>

51
00:02:50,590 --> 00:02:56,500
want<font color="#E5E5E5"> to mark something as mutable you</font>

52
00:02:54,370 --> 00:02:59,109
have to use a<font color="#E5E5E5"> keyword</font><font color="#CCCCCC"> so when you have a</font>

53
00:02:56,500 --> 00:03:00,909
problem<font color="#E5E5E5"> in your code</font><font color="#CCCCCC"> base</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can you</font>

54
00:02:59,109 --> 00:03:04,480
<font color="#CCCCCC">know which variables and which</font>

55
00:03:00,909 --> 00:03:07,690
parameters to to look for<font color="#E5E5E5"> because it's a</font>

56
00:03:04,480 --> 00:03:09,280
non mutable<font color="#E5E5E5"> state you it won't give you</font>

57
00:03:07,690 --> 00:03:13,239
any problem<font color="#E5E5E5"> because it doesn't change so</font>

58
00:03:09,280 --> 00:03:16,000
why would<font color="#CCCCCC"> Pro create a problem so it's a</font>

59
00:03:13,239 --> 00:03:17,980
mutant mutable<font color="#E5E5E5"> state that you need to</font>

60
00:03:16,000 --> 00:03:21,849
look<font color="#CCCCCC"> for and</font><font color="#E5E5E5"> that's why it's by default</font>

61
00:03:17,980 --> 00:03:24,879
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have everything non mutable and</font><font color="#E5E5E5"> it</font>

62
00:03:21,849 --> 00:03:29,349
has strict ownership semantics<font color="#CCCCCC"> in C and</font>

63
00:03:24,879 --> 00:03:31,540
C++<font color="#CCCCCC"> you usually</font><font color="#E5E5E5"> just give a pointer</font><font color="#CCCCCC"> to</font>

64
00:03:29,349 --> 00:03:34,540
someone and then you<font color="#CCCCCC"> have to establish</font>

65
00:03:31,540 --> 00:03:38,078
<font color="#E5E5E5">some sort of way</font><font color="#CCCCCC"> to make sure that</font>

66
00:03:34,540 --> 00:03:41,048
nobody double freeze it or especially<font color="#E5E5E5"> in</font>

67
00:03:38,079 --> 00:03:43,989
C we have like we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> been using in</font>

68
00:03:41,049 --> 00:03:47,199
<font color="#CCCCCC">genome dilip libraries for reference</font>

69
00:03:43,989 --> 00:03:49,690
counting all objects so<font color="#E5E5E5"> you have to</font>

70
00:03:47,199 --> 00:03:51,250
handle<font color="#E5E5E5"> that manually in C of course but</font>

71
00:03:49,690 --> 00:03:53,949
in<font color="#CCCCCC"> rust you</font><font color="#E5E5E5"> don't have to do that</font>

72
00:03:51,250 --> 00:03:57,730
manually<font color="#E5E5E5"> but you have to think</font><font color="#CCCCCC"> about how</font>

73
00:03:53,949 --> 00:04:01,569
ownership works and at one<font color="#CCCCCC"> time there</font>

74
00:03:57,730 --> 00:04:08,679
can<font color="#E5E5E5"> be only one owner to a resource</font><font color="#CCCCCC"> I'll</font>

75
00:04:01,569 --> 00:04:11,589
show<font color="#E5E5E5"> it examples later how that</font><font color="#CCCCCC"> is so we</font>

76
00:04:08,680 --> 00:04:14,109
will<font color="#E5E5E5"> start with a simple</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> in an</font>

77
00:04:11,590 --> 00:04:16,720
other in<font color="#E5E5E5"> other programming languages</font>

78
00:04:14,109 --> 00:04:21,280
something like this<font color="#E5E5E5"> you're passing an</font>

79
00:04:16,720 --> 00:04:22,990
array vector<font color="#CCCCCC"> to to a function and it's</font>

80
00:04:21,279 --> 00:04:25,659
just adding<font color="#CCCCCC"> two first two elements</font><font color="#E5E5E5"> of</font>

81
00:04:22,990 --> 00:04:26,810
<font color="#E5E5E5">that and returning it</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> many</font>

82
00:04:25,659 --> 00:04:31,969
languages this would

83
00:04:26,810 --> 00:04:36,139
just work fine<font color="#E5E5E5"> but you add that and then</font>

84
00:04:31,970 --> 00:04:41,410
<font color="#CCCCCC">you show it it's fine but in rust this</font>

85
00:04:36,139 --> 00:04:45,860
<font color="#E5E5E5">won't work because when you as it says</font>

86
00:04:41,410 --> 00:04:48,080
when you<font color="#CCCCCC"> past the vector there</font><font color="#E5E5E5"> you pass</font>

87
00:04:45,860 --> 00:04:50,300
the ownership to<font color="#CCCCCC"> that</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> and you</font>

88
00:04:48,080 --> 00:04:53,330
never get got that ownership<font color="#E5E5E5"> back so</font>

89
00:04:50,300 --> 00:04:54,800
later on you<font color="#E5E5E5"> can't use the the</font><font color="#CCCCCC"> the</font>

90
00:04:53,330 --> 00:04:56,919
resource<font color="#E5E5E5"> that you already pass to it</font>

91
00:04:54,800 --> 00:04:59,360
<font color="#E5E5E5">because you gave</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the ownership and</font>

92
00:04:56,919 --> 00:05:02,299
the main thing<font color="#E5E5E5"> is there are two kinds of</font>

93
00:04:59,360 --> 00:05:05,090
types<font color="#CCCCCC"> in in rust there</font><font color="#E5E5E5"> is copy types and</font>

94
00:05:02,300 --> 00:05:10,010
then there's move types by copy types

95
00:05:05,090 --> 00:05:12,109
there is the simple<font color="#E5E5E5"> types in in rust for</font>

96
00:05:10,010 --> 00:05:14,599
example integers and<font color="#E5E5E5"> volumes and those</font>

97
00:05:12,110 --> 00:05:17,080
kind that can be passed<font color="#E5E5E5"> around</font><font color="#CCCCCC"> like as</font>

98
00:05:14,600 --> 00:05:20,510
copies<font color="#CCCCCC"> without any performance problems</font>

99
00:05:17,080 --> 00:05:22,490
<font color="#E5E5E5">easily copied those always get copied so</font>

100
00:05:20,510 --> 00:05:24,919
when you<font color="#E5E5E5"> pass it</font><font color="#CCCCCC"> to a function if in the</font>

101
00:05:22,490 --> 00:05:26,780
in the example if I was passing integers

102
00:05:24,919 --> 00:05:31,120
directly that example<font color="#E5E5E5"> would</font><font color="#CCCCCC"> have worked</font>

103
00:05:26,780 --> 00:05:33,950
<font color="#CCCCCC">because it's a copy type</font><font color="#E5E5E5"> but move types</font>

104
00:05:31,120 --> 00:05:35,780
which are most of the types by default

105
00:05:33,950 --> 00:05:38,870
you create your<font color="#CCCCCC"> own data type it will be</font>

106
00:05:35,780 --> 00:05:41,719
by default<font color="#CCCCCC"> a move type and by move I</font>

107
00:05:38,870 --> 00:05:43,910
don't<font color="#E5E5E5"> mean the whole thing moving but</font>

108
00:05:41,720 --> 00:05:45,350
<font color="#E5E5E5">moving</font><font color="#CCCCCC"> off ownership so you give the</font>

109
00:05:43,910 --> 00:05:47,750
ownership to<font color="#E5E5E5"> someone else when you pass</font>

110
00:05:45,350 --> 00:05:50,210
<font color="#CCCCCC">it to them if you pass</font><font color="#E5E5E5"> by by value and</font>

111
00:05:47,750 --> 00:05:53,810
you can't use<font color="#CCCCCC"> it anymore</font>

112
00:05:50,210 --> 00:05:56,780
and that's as I said in rust<font color="#E5E5E5"> by default</font>

113
00:05:53,810 --> 00:05:58,940
<font color="#E5E5E5">everything has only an only one every</font>

114
00:05:56,780 --> 00:06:02,299
<font color="#E5E5E5">deucer resource has only one owner at a</font>

115
00:05:58,940 --> 00:06:05,510
time in the code<font color="#E5E5E5"> so it's very clear and</font>

116
00:06:02,300 --> 00:06:09,440
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> been rust so knows</font><font color="#E5E5E5"> when to</font><font color="#CCCCCC"> free the</font>

117
00:06:05,510 --> 00:06:10,909
resource and<font color="#E5E5E5"> when not you but the thing</font>

118
00:06:09,440 --> 00:06:13,010
is<font color="#E5E5E5"> you can't you can't work like that</font>

119
00:06:10,910 --> 00:06:15,620
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> to you know</font><font color="#CCCCCC"> have multiple</font>

120
00:06:13,010 --> 00:06:17,750
ownership owners and stuff and one<font color="#E5E5E5"> of</font>

121
00:06:15,620 --> 00:06:21,260
the first<font color="#E5E5E5"> ways to do</font><font color="#CCCCCC"> it and one of the</font>

122
00:06:17,750 --> 00:06:24,410
most<font color="#E5E5E5"> obvious and most</font><font color="#CCCCCC"> used is borrowing</font>

123
00:06:21,260 --> 00:06:27,950
which is like in C++<font color="#CCCCCC"> and C both was</font><font color="#E5E5E5"> by</font>

124
00:06:24,410 --> 00:06:30,830
reference<font color="#CCCCCC"> more likely plasmas so the</font>

125
00:06:27,950 --> 00:06:34,490
same example<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just turned</font><font color="#E5E5E5"> the</font>

126
00:06:30,830 --> 00:06:38,150
parameter into a reference so when you

127
00:06:34,490 --> 00:06:40,700
pass<font color="#CCCCCC"> it by reference you</font><font color="#E5E5E5"> are borrowing</font>

128
00:06:38,150 --> 00:06:42,859
the<font color="#CCCCCC"> ownership of that</font><font color="#E5E5E5"> resource to the</font>

129
00:06:40,700 --> 00:06:45,289
function<font color="#CCCCCC"> you're calling temporarily and</font>

130
00:06:42,860 --> 00:06:46,190
once that<font color="#E5E5E5"> scope</font><font color="#CCCCCC"> win which ships</font><font color="#E5E5E5"> borrowed</font>

131
00:06:45,290 --> 00:06:48,020
<font color="#E5E5E5">that's over</font>

132
00:06:46,190 --> 00:06:51,969
then the boring is finished<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you have</font>

133
00:06:48,020 --> 00:06:54,799
the your resource back<font color="#CCCCCC"> but if I had kept</font>

134
00:06:51,970 --> 00:06:56,480
ownership if I for example<font color="#E5E5E5"> if I had said</font>

135
00:06:54,800 --> 00:06:58,760
<font color="#CCCCCC">ampersand we and then assign it to a</font>

136
00:06:56,480 --> 00:07:01,790
local<font color="#E5E5E5"> variable</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> has the same scope as</font>

137
00:06:58,760 --> 00:07:04,010
V then and then I could<font color="#E5E5E5"> not have used</font><font color="#CCCCCC"> it</font>

138
00:07:01,790 --> 00:07:05,840
while it's still borrowed so while it's

139
00:07:04,010 --> 00:07:07,760
borrowed you cannot use it<font color="#CCCCCC"> but</font><font color="#E5E5E5"> once the</font>

140
00:07:05,840 --> 00:07:11,450
<font color="#E5E5E5">borrowing is finished which is based on</font>

141
00:07:07,760 --> 00:07:13,940
scopes<font color="#E5E5E5"> and the scope in this case is the</font>

142
00:07:11,450 --> 00:07:15,320
DEF of that function that<font color="#E5E5E5"> you called so</font>

143
00:07:13,940 --> 00:07:20,420
when<font color="#E5E5E5"> it returns you got the ownership</font>

144
00:07:15,320 --> 00:07:21,950
<font color="#E5E5E5">back</font><font color="#CCCCCC"> I went following so far or I have</font>

145
00:07:20,420 --> 00:07:24,140
<font color="#E5E5E5">20 minutes</font><font color="#CCCCCC"> to explain this</font><font color="#E5E5E5"> very</font>

146
00:07:21,950 --> 00:07:27,469
complicated<font color="#E5E5E5"> subject so I'm trying my</font>

147
00:07:24,140 --> 00:07:29,180
best<font color="#CCCCCC"> but the problem with borrows is as</font>

148
00:07:27,470 --> 00:07:31,970
I said it's temporary you you get<font color="#CCCCCC"> it</font>

149
00:07:29,180 --> 00:07:34,130
back and the resource<font color="#E5E5E5"> that borrowed it</font>

150
00:07:31,970 --> 00:07:35,770
<font color="#E5E5E5">you can't keep it forever and you don't</font>

151
00:07:34,130 --> 00:07:40,310
have the<font color="#CCCCCC"> ownership at the same time</font>

152
00:07:35,770 --> 00:07:41,599
<font color="#CCCCCC">exactly so we will we will start</font><font color="#E5E5E5"> with an</font>

153
00:07:40,310 --> 00:07:45,110
<font color="#E5E5E5">example</font>

154
00:07:41,600 --> 00:07:49,250
I fly helicopters so I have my example

155
00:07:45,110 --> 00:07:50,840
<font color="#E5E5E5">there</font><font color="#CCCCCC"> relate to that so</font><font color="#E5E5E5"> the average</font>

156
00:07:49,250 --> 00:07:52,460
<font color="#E5E5E5">patient every</font><font color="#CCCCCC"> aircraft has a</font>

157
00:07:50,840 --> 00:07:54,919
registration so<font color="#CCCCCC"> but it's a simple</font>

158
00:07:52,460 --> 00:07:57,859
structure and<font color="#E5E5E5"> I have an implementation</font>

159
00:07:54,920 --> 00:08:01,190
<font color="#CCCCCC">for</font><font color="#E5E5E5"> it it's</font><font color="#CCCCCC"> just a constructor get a</font>

160
00:07:57,860 --> 00:08:03,320
registration<font color="#CCCCCC"> as a string this string</font>

161
00:08:01,190 --> 00:08:06,320
type is<font color="#CCCCCC"> their own string type so you</font>

162
00:08:03,320 --> 00:08:08,150
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> instant there</font><font color="#E5E5E5"> is two string types</font>

163
00:08:06,320 --> 00:08:10,730
in<font color="#CCCCCC"> rusts one is the owned one is not</font>

164
00:08:08,150 --> 00:08:13,849
owned there are none owned is there is a

165
00:08:10,730 --> 00:08:15,740
<font color="#E5E5E5">borrow it's a piece of the string which</font>

166
00:08:13,850 --> 00:08:17,990
could be<font color="#E5E5E5"> the whole string itself as well</font>

167
00:08:15,740 --> 00:08:23,780
but it's a borrow but this string with

168
00:08:17,990 --> 00:08:27,080
the capital S is a is the own type so<font color="#CCCCCC"> we</font>

169
00:08:23,780 --> 00:08:30,260
from<font color="#CCCCCC"> main we pass it a string and on</font>

170
00:08:27,080 --> 00:08:33,350
string<font color="#E5E5E5"> and then we want</font><font color="#CCCCCC"> to just use it</font>

171
00:08:30,260 --> 00:08:35,929
there<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> after we passed it to the</font>

172
00:08:33,350 --> 00:08:38,570
<font color="#CCCCCC">Helle</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> structure constructor we again</font>

173
00:08:35,929 --> 00:08:41,209
<font color="#CCCCCC">use it</font><font color="#E5E5E5"> ourselves and that won't work</font>

174
00:08:38,570 --> 00:08:44,630
<font color="#E5E5E5">because when we pass</font><font color="#CCCCCC"> by value</font><font color="#E5E5E5"> we gave it</font>

175
00:08:41,210 --> 00:08:46,730
the<font color="#E5E5E5"> ownership so as you like last time</font>

176
00:08:44,630 --> 00:08:49,700
so it's<font color="#E5E5E5"> very similar or actually</font><font color="#CCCCCC"> it's</font>

177
00:08:46,730 --> 00:08:52,730
the<font color="#E5E5E5"> same just different context you move</font>

178
00:08:49,700 --> 00:08:54,920
<font color="#E5E5E5">the value and you can't use</font><font color="#CCCCCC"> it anymore</font>

179
00:08:52,730 --> 00:08:57,410
so what would<font color="#CCCCCC"> we do in this case</font><font color="#E5E5E5"> the</font>

180
00:08:54,920 --> 00:09:01,459
<font color="#E5E5E5">easiest</font><font color="#CCCCCC"> solution is to use a data type</font>

181
00:08:57,410 --> 00:09:05,000
called<font color="#E5E5E5"> RC which it's abbreviation for</font>

182
00:09:01,460 --> 00:09:07,850
reference counting and what it does it's

183
00:09:05,000 --> 00:09:10,070
a container type which you you put

184
00:09:07,850 --> 00:09:12,590
something<font color="#E5E5E5"> in it and it adds reference</font>

185
00:09:10,070 --> 00:09:14,120
counting to that resource<font color="#CCCCCC"> so the</font>

186
00:09:12,590 --> 00:09:16,310
resource itself<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't need to copy</font>

187
00:09:14,120 --> 00:09:19,040
it around<font color="#E5E5E5"> if you want to</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> it around</font>

188
00:09:16,310 --> 00:09:21,170
and<font color="#E5E5E5"> have multiple owners in the same</font>

189
00:09:19,040 --> 00:09:24,410
code of the same resource<font color="#E5E5E5"> and instead</font>

190
00:09:21,170 --> 00:09:26,780
you just<font color="#CCCCCC"> use RC and what it does is like</font>

191
00:09:24,410 --> 00:09:30,020
<font color="#E5E5E5">each time you create a new</font><font color="#CCCCCC"> user for it</font>

192
00:09:26,780 --> 00:09:33,230
you increase the reference count on on

193
00:09:30,020 --> 00:09:35,140
that<font color="#E5E5E5"> resource contain resource</font><font color="#CCCCCC"> and then</font>

194
00:09:33,230 --> 00:09:37,580
once you're all<font color="#E5E5E5"> these scopes are</font>

195
00:09:35,140 --> 00:09:40,100
finished that have borrowed<font color="#CCCCCC"> their</font><font color="#E5E5E5"> that</font>

196
00:09:37,580 --> 00:09:44,900
have increased the reference count<font color="#CCCCCC"> the</font>

197
00:09:40,100 --> 00:09:46,760
<font color="#CCCCCC">rest automatically the destroys the</font>

198
00:09:44,900 --> 00:09:50,810
resource<font color="#E5E5E5"> the underlying resource because</font>

199
00:09:46,760 --> 00:09:52,400
now there is no corners for it<font color="#E5E5E5"> so it's</font>

200
00:09:50,810 --> 00:09:54,430
<font color="#E5E5E5">just</font><font color="#CCCCCC"> like any reference counting in any</font>

201
00:09:52,400 --> 00:09:57,140
programming languages you must have seen

202
00:09:54,430 --> 00:09:59,689
<font color="#CCCCCC">so in this case we just</font><font color="#E5E5E5"> we do it exactly</font>

203
00:09:57,140 --> 00:10:02,420
<font color="#E5E5E5">the same but instead of passing the</font>

204
00:09:59,690 --> 00:10:06,530
string directly<font color="#E5E5E5"> we now put it in a RC</font>

205
00:10:02,420 --> 00:10:10,430
and pass the RC clone method<font color="#CCCCCC"> so by clone</font>

206
00:10:06,530 --> 00:10:11,839
<font color="#CCCCCC">I created a new reference count I</font>

207
00:10:10,430 --> 00:10:14,510
increase the reference count on it

208
00:10:11,840 --> 00:10:18,080
so the<font color="#CCCCCC"> bandit goes to that one then when</font>

209
00:10:14,510 --> 00:10:20,300
the new function<font color="#CCCCCC"> ap keeps the ownership</font>

210
00:10:18,080 --> 00:10:22,460
<font color="#CCCCCC">so now we have</font><font color="#E5E5E5"> two owners of the same</font>

211
00:10:20,300 --> 00:10:25,550
resource so when I said in the<font color="#CCCCCC"> beginning</font>

212
00:10:22,460 --> 00:10:27,950
that<font color="#E5E5E5"> you can only have one owner at a</font>

213
00:10:25,550 --> 00:10:30,740
time I kind of lied<font color="#CCCCCC"> but</font><font color="#E5E5E5"> not exactly</font>

214
00:10:27,950 --> 00:10:33,200
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> really can't have two owners</font>

215
00:10:30,740 --> 00:10:35,510
but<font color="#CCCCCC"> Trust provides you ways of</font><font color="#E5E5E5"> working</font>

216
00:10:33,200 --> 00:10:37,460
around<font color="#E5E5E5"> it in a safe way in other</font>

217
00:10:35,510 --> 00:10:39,140
programming languages you just you can

218
00:10:37,460 --> 00:10:41,090
just<font color="#E5E5E5"> really nearly pass things around</font>

219
00:10:39,140 --> 00:10:43,910
and<font color="#CCCCCC"> ownership they</font><font color="#E5E5E5"> can there can be</font>

220
00:10:41,090 --> 00:10:47,720
<font color="#CCCCCC">multiple owners and language have no way</font>

221
00:10:43,910 --> 00:10:50,329
<font color="#CCCCCC">of testing</font><font color="#E5E5E5"> if you will</font><font color="#CCCCCC"> destroy</font><font color="#E5E5E5"> the</font>

222
00:10:47,720 --> 00:10:52,640
resource well<font color="#E5E5E5"> another part of the code</font>

223
00:10:50,330 --> 00:10:55,730
is<font color="#CCCCCC"> still using that resource but in rust</font>

224
00:10:52,640 --> 00:10:58,100
<font color="#E5E5E5">since you put it in RC breast ensures</font>

225
00:10:55,730 --> 00:10:59,779
that the resource is always there<font color="#CCCCCC"> as</font>

226
00:10:58,100 --> 00:11:08,329
long<font color="#E5E5E5"> as there's a</font>

227
00:10:59,779 --> 00:11:10,639
<font color="#E5E5E5">a user of that resource sir no it's not</font>

228
00:11:08,329 --> 00:11:14,138
it's a<font color="#CCCCCC"> it's a yeah it's in this case</font>

229
00:11:10,639 --> 00:11:14,139
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> just increases the reference count</font>

230
00:11:14,980 --> 00:11:23,480
<font color="#E5E5E5">good question but the problem is our</font>

231
00:11:19,129 --> 00:11:25,430
<font color="#CCCCCC">city</font><font color="#E5E5E5"> is not for multiple threats</font><font color="#CCCCCC"> if I</font>

232
00:11:23,480 --> 00:11:27,139
run this for<font color="#E5E5E5"> example now I</font><font color="#CCCCCC"> introduce</font>

233
00:11:25,430 --> 00:11:29,540
<font color="#CCCCCC">it's the same example</font><font color="#E5E5E5"> as previously</font>

234
00:11:27,139 --> 00:11:31,970
almost except this<font color="#E5E5E5"> time I have added a</font>

235
00:11:29,540 --> 00:11:34,339
method<font color="#E5E5E5"> and I'm calling that</font><font color="#CCCCCC"> method from</font>

236
00:11:31,970 --> 00:11:36,889
another thread<font color="#E5E5E5"> so I launched another</font>

237
00:11:34,339 --> 00:11:40,120
threat<font color="#CCCCCC"> to call that method and now</font>

238
00:11:36,889 --> 00:11:43,970
multiple threads are using the same<font color="#E5E5E5"> RC</font>

239
00:11:40,120 --> 00:11:47,379
which we have<font color="#CCCCCC"> RC</font><font color="#E5E5E5"> in the structure so</font>

240
00:11:43,970 --> 00:11:51,379
this one will<font color="#E5E5E5"> end up in an error</font>

241
00:11:47,379 --> 00:11:54,019
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like this arrests have these</font>

242
00:11:51,379 --> 00:11:57,290
traits<font color="#E5E5E5"> concept of traits and different</font>

243
00:11:54,019 --> 00:12:02,870
structs implement<font color="#CCCCCC"> different traits and</font>

244
00:11:57,290 --> 00:12:05,779
that's how it ensures that different

245
00:12:02,870 --> 00:12:08,389
guarantees are met<font color="#E5E5E5"> and in this case</font>

246
00:12:05,779 --> 00:12:09,829
there is<font color="#E5E5E5"> a trait called sin that needs</font>

247
00:12:08,389 --> 00:12:11,720
to<font color="#CCCCCC"> be implemented by</font><font color="#E5E5E5"> structures if they</font>

248
00:12:09,829 --> 00:12:17,089
want to<font color="#E5E5E5"> be accessible by different</font>

249
00:12:11,720 --> 00:12:20,209
threads<font color="#CCCCCC"> so we need a</font><font color="#E5E5E5"> different struct</font>

250
00:12:17,089 --> 00:12:21,829
which implements that<font color="#E5E5E5"> trait that rust</font>

251
00:12:20,209 --> 00:12:24,800
<font color="#CCCCCC">needs if</font><font color="#E5E5E5"> you want to access it</font><font color="#CCCCCC"> from</font>

252
00:12:21,829 --> 00:12:27,709
different<font color="#E5E5E5"> threads</font><font color="#CCCCCC"> and that structure</font><font color="#E5E5E5"> we</font>

253
00:12:24,800 --> 00:12:31,008
have in the STD in the standard library

254
00:12:27,709 --> 00:12:33,128
<font color="#E5E5E5">is</font><font color="#CCCCCC"> arc it's just</font><font color="#E5E5E5"> atomic reference</font>

255
00:12:31,009 --> 00:12:35,480
counting so the<font color="#E5E5E5"> reference count is</font>

256
00:12:33,129 --> 00:12:38,300
<font color="#E5E5E5">atomic in this case it's very</font><font color="#CCCCCC"> similar to</font>

257
00:12:35,480 --> 00:12:43,250
the RC like the main<font color="#CCCCCC"> thing is that</font><font color="#E5E5E5"> it's</font>

258
00:12:38,300 --> 00:12:46,160
<font color="#E5E5E5">thread safe so instead of RC I use arc</font>

259
00:12:43,250 --> 00:12:52,480
and the same example<font color="#CCCCCC"> it's same</font><font color="#E5E5E5"> code will</font>

260
00:12:46,160 --> 00:12:52,480
just work yeah

261
00:12:53,160 --> 00:12:58,650
but the problem is<font color="#E5E5E5"> then our sees that</font>

262
00:12:55,620 --> 00:13:01,920
it's not a<font color="#CCCCCC"> sorry arc is not is</font><font color="#E5E5E5"> that it's</font>

263
00:12:58,650 --> 00:13:04,100
not mutable so you can't like get<font color="#E5E5E5"> a</font>

264
00:13:01,920 --> 00:13:09,569
resource<font color="#E5E5E5"> out of it and then modify</font><font color="#CCCCCC"> it</font>

265
00:13:04,100 --> 00:13:12,710
that's not possible<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> look at</font>

266
00:13:09,570 --> 00:13:16,520
example<font color="#E5E5E5"> so this time it's the</font><font color="#CCCCCC"> same exact</font>

267
00:13:12,710 --> 00:13:20,190
code again<font color="#E5E5E5"> except that in the hover</font>

268
00:13:16,520 --> 00:13:24,000
method now we are modifying<font color="#E5E5E5"> the resource</font>

269
00:13:20,190 --> 00:13:25,440
and these are the methods<font color="#E5E5E5"> I'm calling is</font>

270
00:13:24,000 --> 00:13:27,960
just the<font color="#E5E5E5"> normal methods of the string</font>

271
00:13:25,440 --> 00:13:29,700
type clearing<font color="#E5E5E5"> the string and then</font>

272
00:13:27,960 --> 00:13:32,880
pushing another spring on<font color="#E5E5E5"> on the</font>

273
00:13:29,700 --> 00:13:37,800
existing string but this this won't<font color="#E5E5E5"> work</font>

274
00:13:32,880 --> 00:13:39,900
because modifying it<font color="#CCCCCC"> and the main thing</font>

275
00:13:37,800 --> 00:13:41,819
<font color="#CCCCCC">is I can't borrow that's mutable</font><font color="#E5E5E5"> because</font>

276
00:13:39,900 --> 00:13:46,050
it's not a mutable resource<font color="#E5E5E5"> and then</font>

277
00:13:41,820 --> 00:13:48,900
mark<font color="#E5E5E5"> it as money so for those things you</font>

278
00:13:46,050 --> 00:13:53,130
need yet<font color="#CCCCCC"> another data</font><font color="#E5E5E5"> structure called</font>

279
00:13:48,900 --> 00:13:55,560
mutex<font color="#E5E5E5"> which is just like</font><font color="#CCCCCC"> a mutex in any</font>

280
00:13:53,130 --> 00:14:00,110
programming languages<font color="#E5E5E5"> and libraries you</font>

281
00:13:55,560 --> 00:14:02,670
get locks on the resource<font color="#E5E5E5"> so we put our</font>

282
00:14:00,110 --> 00:14:04,620
mutex in an arc<font color="#E5E5E5"> because we want to</font>

283
00:14:02,670 --> 00:14:06,990
<font color="#CCCCCC">access it from</font><font color="#E5E5E5"> multiple</font><font color="#CCCCCC"> threads</font><font color="#E5E5E5"> atomic</font>

284
00:14:04,620 --> 00:14:08,730
with the atomic reference counting so

285
00:14:06,990 --> 00:14:11,130
the arc is adding atomic reference

286
00:14:08,730 --> 00:14:14,910
counting and then<font color="#E5E5E5"> the mutex is ensuring</font>

287
00:14:11,130 --> 00:14:17,550
that you can have mutable locks on the

288
00:14:14,910 --> 00:14:20,520
resource and so you have multiple

289
00:14:17,550 --> 00:14:22,290
container types<font color="#E5E5E5"> you you will see that in</font>

290
00:14:20,520 --> 00:14:24,810
<font color="#CCCCCC">some times and rust you you need</font><font color="#E5E5E5"> to have</font>

291
00:14:22,290 --> 00:14:27,390
multiple containers to the same resource

292
00:14:24,810 --> 00:14:29,969
<font color="#E5E5E5">but the thing is you have type aliasing</font>

293
00:14:27,390 --> 00:14:32,069
<font color="#CCCCCC">so you can use that to create</font><font color="#E5E5E5"> a new type</font>

294
00:14:29,970 --> 00:14:34,950
for your complex type very very easily

295
00:14:32,070 --> 00:14:40,710
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> just Elias so it makes things</font>

296
00:14:34,950 --> 00:14:46,410
pretty easy to follow anyway so this

297
00:14:40,710 --> 00:14:48,720
time<font color="#E5E5E5"> you just use mutex you</font><font color="#CCCCCC"> create like</font>

298
00:14:46,410 --> 00:14:51,089
when you created the arc<font color="#E5E5E5"> you in there</font>

299
00:14:48,720 --> 00:14:53,630
you<font color="#CCCCCC"> just to a new mutex and put the</font>

300
00:14:51,090 --> 00:14:58,170
resource in the mutex but in the hover

301
00:14:53,630 --> 00:15:00,720
<font color="#E5E5E5">you need a you take a lock of the of the</font>

302
00:14:58,170 --> 00:15:03,620
from the<font color="#CCCCCC"> mutex</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> when you access the</font>

303
00:15:00,720 --> 00:15:05,970
<font color="#E5E5E5">mutex is since it's contained in arc you</font>

304
00:15:03,620 --> 00:15:12,300
you<font color="#E5E5E5"> get a atomic reference so</font>

305
00:15:05,970 --> 00:15:14,459
you<font color="#E5E5E5"> it's attractive</font><font color="#CCCCCC"> and once you get the</font>

306
00:15:12,300 --> 00:15:16,529
lock<font color="#CCCCCC"> you then you can do whatever you</font>

307
00:15:14,459 --> 00:15:18,628
want because<font color="#E5E5E5"> you have gotten</font><font color="#CCCCCC"> yourself a</font>

308
00:15:16,529 --> 00:15:23,730
music mutable references to the to a

309
00:15:18,629 --> 00:15:25,319
resource and then the thing is that<font color="#CCCCCC"> rust</font>

310
00:15:23,730 --> 00:15:27,540
is very much the memory management is

311
00:15:25,319 --> 00:15:30,209
very much based on scopes<font color="#E5E5E5"> so once you</font>

312
00:15:27,540 --> 00:15:33,180
are<font color="#CCCCCC"> out of that scope which is</font><font color="#E5E5E5"> the hover</font>

313
00:15:30,209 --> 00:15:35,250
method the lock that you acquired will

314
00:15:33,180 --> 00:15:38,160
be freed automatically for you so you

315
00:15:35,250 --> 00:15:40,139
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> freed if you want to I</font>

316
00:15:38,160 --> 00:15:43,019
<font color="#E5E5E5">know as far</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I know there is an unlock</font>

317
00:15:40,139 --> 00:15:46,800
method<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you usually you</font><font color="#CCCCCC"> don't need to</font>

318
00:15:43,019 --> 00:15:52,160
you<font color="#CCCCCC"> just use scopes to signal</font><font color="#E5E5E5"> like that</font>

319
00:15:46,800 --> 00:15:58,199
<font color="#CCCCCC">okay I'm done with</font><font color="#E5E5E5"> the with a lock</font><font color="#CCCCCC"> and</font>

320
00:15:52,160 --> 00:16:00,779
<font color="#CCCCCC">similar to the mutex there is a type</font>

321
00:15:58,199 --> 00:16:02,969
called<font color="#CCCCCC"> readwrite lock which is</font><font color="#E5E5E5"> if you</font>

322
00:16:00,779 --> 00:16:05,009
<font color="#E5E5E5">have multiple</font><font color="#CCCCCC"> threats that some of them</font>

323
00:16:02,970 --> 00:16:08,069
needs<font color="#E5E5E5"> only read access not write access</font>

324
00:16:05,009 --> 00:16:09,959
<font color="#E5E5E5">so it it could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> very inefficient</font><font color="#CCCCCC"> if</font>

325
00:16:08,069 --> 00:16:11,849
you have if<font color="#CCCCCC"> you're if you use new Tex</font>

326
00:16:09,959 --> 00:16:15,209
because every thread will have<font color="#CCCCCC"> to wait</font>

327
00:16:11,850 --> 00:16:17,250
<font color="#E5E5E5">for the other tribe to finish access and</font>

328
00:16:15,209 --> 00:16:19,170
then be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> with the</font>

329
00:16:17,250 --> 00:16:22,910
readwrite lock you can have multiple

330
00:16:19,170 --> 00:16:28,040
readers<font color="#CCCCCC"> of the same resource so multiple</font>

331
00:16:22,910 --> 00:16:31,350
<font color="#CCCCCC">these</font><font color="#E5E5E5"> threads can can lock on the same</font>

332
00:16:28,040 --> 00:16:34,469
resource at the<font color="#E5E5E5"> same time as a read read</font>

333
00:16:31,350 --> 00:16:36,600
lock but not write lock so but if<font color="#E5E5E5"> there</font>

334
00:16:34,470 --> 00:16:39,000
<font color="#E5E5E5">is a thread X having a write lock then</font>

335
00:16:36,600 --> 00:16:44,069
others have to wait for for that to

336
00:16:39,000 --> 00:16:46,319
finish<font color="#E5E5E5"> yeah it's very similar I'm I'm</font>

337
00:16:44,069 --> 00:16:51,170
<font color="#E5E5E5">really sorry I'm going really fast but I</font>

338
00:16:46,319 --> 00:16:56,670
have very<font color="#CCCCCC"> little time as I mentioned so</font>

339
00:16:51,170 --> 00:16:59,370
box is<font color="#CCCCCC"> the type when you when you</font>

340
00:16:56,670 --> 00:17:02,910
usually<font color="#CCCCCC"> create a resource</font><font color="#E5E5E5"> you put it</font>

341
00:16:59,370 --> 00:17:05,189
usually<font color="#CCCCCC"> on the stack and</font><font color="#E5E5E5"> but if you use</font>

342
00:17:02,910 --> 00:17:08,609
those data<font color="#E5E5E5"> structures</font><font color="#CCCCCC"> that I mentioned</font>

343
00:17:05,189 --> 00:17:14,280
<font color="#CCCCCC">RCE</font><font color="#E5E5E5"> arc and those you put it on the heap</font>

344
00:17:08,609 --> 00:17:15,688
<font color="#E5E5E5">but it's it's more heavy RCS has a</font>

345
00:17:14,280 --> 00:17:17,639
<font color="#CCCCCC">reference counting and</font><font color="#E5E5E5"> it needs to</font>

346
00:17:15,689 --> 00:17:19,330
<font color="#CCCCCC">ensure that reference count increases</font>

347
00:17:17,640 --> 00:17:22,360
decreases<font color="#CCCCCC"> bla bla</font>

348
00:17:19,329 --> 00:17:24,369
so you don't<font color="#E5E5E5"> want to use</font><font color="#CCCCCC"> it just for</font>

349
00:17:22,359 --> 00:17:25,689
<font color="#E5E5E5">allocating on the heap so if you want to</font>

350
00:17:24,369 --> 00:17:29,590
just allocate<font color="#E5E5E5"> something on the heap to</font>

351
00:17:25,690 --> 00:17:31,480
<font color="#CCCCCC">pass it around</font><font color="#E5E5E5"> well and keep the the</font>

352
00:17:29,590 --> 00:17:33,730
resource around<font color="#CCCCCC"> for for longer than one</font>

353
00:17:31,480 --> 00:17:36,820
function or<font color="#E5E5E5"> something you can use</font>

354
00:17:33,730 --> 00:17:39,910
<font color="#E5E5E5">something called box and</font><font color="#CCCCCC"> it's very</font>

355
00:17:36,820 --> 00:17:41,500
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> create a new box and the</font>

356
00:17:39,910 --> 00:17:43,840
<font color="#E5E5E5">five in there is not the size people</font>

357
00:17:41,500 --> 00:17:45,880
<font color="#E5E5E5">think fits the size but that's just an</font>

358
00:17:43,840 --> 00:17:48,909
integer<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I want to keep in</font><font color="#E5E5E5"> the box</font>

359
00:17:45,880 --> 00:17:50,770
and then<font color="#E5E5E5"> you just use it</font><font color="#CCCCCC"> like as if it's</font>

360
00:17:48,910 --> 00:17:53,200
not contained<font color="#E5E5E5"> in a box there is it's</font>

361
00:17:50,770 --> 00:17:56,500
like<font color="#CCCCCC"> usable like as if it was just the</font>

362
00:17:53,200 --> 00:18:00,070
integer itself<font color="#CCCCCC"> just like in our case of</font>

363
00:17:56,500 --> 00:18:03,400
<font color="#CCCCCC">RC an</font><font color="#E5E5E5"> arc</font><font color="#CCCCCC"> another thing with the</font><font color="#E5E5E5"> box is</font>

364
00:18:00,070 --> 00:18:07,810
<font color="#E5E5E5">very important is that it</font><font color="#CCCCCC"> gives the</font>

365
00:18:03,400 --> 00:18:11,200
resource<font color="#CCCCCC"> it keeps a size so if for</font>

366
00:18:07,810 --> 00:18:14,350
example this case<font color="#E5E5E5"> in rust you</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> enums</font>

367
00:18:11,200 --> 00:18:17,530
can be<font color="#E5E5E5"> complex you can have data inside</font>

368
00:18:14,350 --> 00:18:19,480
your enum<font color="#E5E5E5"> particular enums and so in</font>

369
00:18:17,530 --> 00:18:27,160
this<font color="#E5E5E5"> case we want to</font><font color="#CCCCCC"> create a list that</font>

370
00:18:19,480 --> 00:18:30,940
<font color="#E5E5E5">is have other nodes in</font><font color="#CCCCCC"> it so we want to</font>

371
00:18:27,160 --> 00:18:32,650
keep a list<font color="#E5E5E5"> in a list and you can't do</font>

372
00:18:30,940 --> 00:18:35,110
that<font color="#CCCCCC"> because rust won't be able</font><font color="#E5E5E5"> to tell</font>

373
00:18:32,650 --> 00:18:38,580
how much memory<font color="#E5E5E5"> to allocate to this</font>

374
00:18:35,110 --> 00:18:41,050
because<font color="#E5E5E5"> you know it's infinite recursion</font>

375
00:18:38,580 --> 00:18:44,230
<font color="#CCCCCC">we can break that infinite recursion</font><font color="#E5E5E5"> by</font>

376
00:18:41,050 --> 00:18:47,379
using<font color="#CCCCCC"> box because box the</font><font color="#E5E5E5"> list that if</font>

377
00:18:44,230 --> 00:18:49,120
it's it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a list it's on the</font>

378
00:18:47,380 --> 00:18:51,850
on the heap<font color="#E5E5E5"> and you only get a pointer</font>

379
00:18:49,120 --> 00:18:54,610
in the box and pointer is always the

380
00:18:51,850 --> 00:18:58,330
<font color="#E5E5E5">same size so you solve the problem</font><font color="#CCCCCC"> and</font>

381
00:18:54,610 --> 00:19:01,090
without<font color="#E5E5E5"> using any pointers itself in</font>

382
00:18:58,330 --> 00:19:03,070
rust you can use pointers<font color="#E5E5E5"> especially an</font>

383
00:19:01,090 --> 00:19:05,919
unsafe code when<font color="#E5E5E5"> you mark it as unsafe</font>

384
00:19:03,070 --> 00:19:09,310
<font color="#E5E5E5">but typically you can't avoid it and you</font>

385
00:19:05,920 --> 00:19:13,840
should avoid<font color="#E5E5E5"> it because that's where the</font>

386
00:19:09,310 --> 00:19:16,000
problems are<font color="#CCCCCC"> usually yeah I wanted</font><font color="#E5E5E5"> to</font>

387
00:19:13,840 --> 00:19:19,419
discuss<font color="#E5E5E5"> briefly the</font><font color="#CCCCCC"> life times</font><font color="#E5E5E5"> and this</font>

388
00:19:16,000 --> 00:19:21,700
was another<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> I was hurrying up</font><font color="#CCCCCC"> I</font>

389
00:19:19,420 --> 00:19:24,010
have done the same talk before in other

390
00:19:21,700 --> 00:19:26,410
conferences<font color="#E5E5E5"> but I always avoid</font><font color="#CCCCCC"> lifetimes</font>

391
00:19:24,010 --> 00:19:29,260
<font color="#CCCCCC">so this is my first time addressing it I</font>

392
00:19:26,410 --> 00:19:33,180
hope I can do some justice<font color="#CCCCCC"> to it because</font>

393
00:19:29,260 --> 00:19:33,180
it's people<font color="#E5E5E5"> are</font><font color="#CCCCCC"> afraid of it</font>

394
00:19:33,470 --> 00:19:42,200
so as I mentioned<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> you can pass</font>

395
00:19:38,549 --> 00:19:46,770
<font color="#CCCCCC">things by reference</font><font color="#E5E5E5"> and references are</font>

396
00:19:42,200 --> 00:19:49,830
temporary<font color="#E5E5E5"> and the the scopes define the</font>

397
00:19:46,770 --> 00:19:52,350
lifetimes of things<font color="#CCCCCC"> so in this case you</font>

398
00:19:49,830 --> 00:19:53,939
get two strings in the<font color="#E5E5E5"> longest function</font>

399
00:19:52,350 --> 00:20:01,559
it just returns the<font color="#E5E5E5"> longest string you</font>

400
00:19:53,940 --> 00:20:03,090
have sorry I have my<font color="#E5E5E5"> pointer here</font><font color="#CCCCCC"> and so</font>

401
00:20:01,559 --> 00:20:04,470
this<font color="#E5E5E5"> should</font><font color="#CCCCCC"> work right because you just</font>

402
00:20:03,090 --> 00:20:08,629
pass the references you get the

403
00:20:04,470 --> 00:20:14,010
<font color="#CCCCCC">reference to the longest string and yeah</font>

404
00:20:08,630 --> 00:20:18,090
<font color="#CCCCCC">but it wouldn't work</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> rust</font>

405
00:20:14,010 --> 00:20:20,160
doesn't<font color="#E5E5E5"> know when and</font><font color="#CCCCCC"> you get</font><font color="#E5E5E5"> helpful</font>

406
00:20:18,090 --> 00:20:21,780
very helpful messages<font color="#E5E5E5"> and nowadays from</font>

407
00:20:20,160 --> 00:20:25,440
from<font color="#CCCCCC"> rust compilers so that's that's</font>

408
00:20:21,780 --> 00:20:27,840
<font color="#CCCCCC">really cool so you borrowed</font><font color="#E5E5E5"> a value and</font>

409
00:20:25,440 --> 00:20:29,340
then<font color="#E5E5E5"> you return a</font><font color="#CCCCCC"> reference to one</font><font color="#E5E5E5"> of</font>

410
00:20:27,840 --> 00:20:32,220
the board values and<font color="#E5E5E5"> rust doesn't know</font>

411
00:20:29,340 --> 00:20:36,330
well<font color="#CCCCCC"> you can easily County detail which</font>

412
00:20:32,220 --> 00:20:39,059
which one it<font color="#CCCCCC"> is and you have</font><font color="#E5E5E5"> multiple in</font>

413
00:20:36,330 --> 00:20:43,580
<font color="#E5E5E5">parameters and one out</font><font color="#CCCCCC"> parameter so in</font>

414
00:20:39,059 --> 00:20:45,960
in<font color="#E5E5E5"> this case you have to tell it how</font>

415
00:20:43,580 --> 00:20:50,610
<font color="#CCCCCC">long would the reference that</font><font color="#E5E5E5"> you're</font>

416
00:20:45,960 --> 00:20:54,000
returning<font color="#E5E5E5"> have to be kept alive and what</font>

417
00:20:50,610 --> 00:20:58,770
other resources it<font color="#E5E5E5"> is associated with so</font>

418
00:20:54,000 --> 00:21:01,980
it<font color="#E5E5E5"> keeps them both alive long enough so</font>

419
00:20:58,770 --> 00:21:05,520
<font color="#CCCCCC">we can I know there the syntax of</font>

420
00:21:01,980 --> 00:21:07,410
<font color="#CCCCCC">lifetimes</font><font color="#E5E5E5"> it's a bit</font><font color="#CCCCCC"> takes a</font><font color="#E5E5E5"> while to</font>

421
00:21:05,520 --> 00:21:09,870
<font color="#E5E5E5">get used</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and even when you get used</font>

422
00:21:07,410 --> 00:21:12,030
<font color="#E5E5E5">to its you still hate it but that's how</font>

423
00:21:09,870 --> 00:21:15,780
<font color="#CCCCCC">it is I</font><font color="#E5E5E5"> don't I have no better</font>

424
00:21:12,030 --> 00:21:18,950
<font color="#E5E5E5">suggestion so</font><font color="#CCCCCC"> I don't criticize much but</font>

425
00:21:15,780 --> 00:21:22,230
I know that<font color="#E5E5E5"> it seems really really weird</font>

426
00:21:18,950 --> 00:21:25,650
<font color="#CCCCCC">so you you declare</font><font color="#E5E5E5"> and the function</font>

427
00:21:22,230 --> 00:21:28,020
definition<font color="#CCCCCC"> a lifetime it's an</font><font color="#E5E5E5"> abstract</font>

428
00:21:25,650 --> 00:21:30,480
concept of the lifetime so and you

429
00:21:28,020 --> 00:21:33,240
declared that<font color="#E5E5E5"> all the all the resources</font>

430
00:21:30,480 --> 00:21:36,150
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you're using like</font><font color="#CCCCCC"> the input</font>

431
00:21:33,240 --> 00:21:40,860
<font color="#E5E5E5">parameters and the return value have the</font>

432
00:21:36,150 --> 00:21:43,720
same exact<font color="#E5E5E5"> lifetime</font><font color="#CCCCCC"> which means to tell</font>

433
00:21:40,860 --> 00:21:50,059
<font color="#CCCCCC">two compiler res compiler</font><font color="#E5E5E5"> that</font>

434
00:21:43,720 --> 00:21:52,790
if you if a s1 s2 and<font color="#E5E5E5"> the return value</font>

435
00:21:50,059 --> 00:21:56,330
needs to be kept alive<font color="#E5E5E5"> together so you</font>

436
00:21:52,790 --> 00:21:59,840
can't it can't free<font color="#E5E5E5"> for example the</font><font color="#CCCCCC"> s-1</font>

437
00:21:56,330 --> 00:22:02,960
that is<font color="#E5E5E5"> being passed before the usage of</font>

438
00:21:59,840 --> 00:22:08,830
<font color="#E5E5E5">the return value is finished</font><font color="#CCCCCC"> or the same</font>

439
00:22:02,960 --> 00:22:11,710
with s2<font color="#E5E5E5"> so in in here in the example</font><font color="#CCCCCC"> we</font>

440
00:22:08,830 --> 00:22:15,320
sorry

441
00:22:11,710 --> 00:22:17,750
we<font color="#CCCCCC"> passed the two</font><font color="#E5E5E5"> values and then</font><font color="#CCCCCC"> we get</font>

442
00:22:15,320 --> 00:22:20,030
the reference back and<font color="#CCCCCC"> at this time</font><font color="#E5E5E5"> it's</font>

443
00:22:17,750 --> 00:22:22,760
it<font color="#E5E5E5"> the usages</font><font color="#CCCCCC"> are exactly the</font><font color="#E5E5E5"> same as we</font>

444
00:22:20,030 --> 00:22:26,170
had in the<font color="#CCCCCC"> previous example it's</font><font color="#E5E5E5"> just</font>

445
00:22:22,760 --> 00:22:28,250
that we now<font color="#E5E5E5"> they told</font><font color="#CCCCCC"> rust what are the</font>

446
00:22:26,170 --> 00:22:32,179
<font color="#CCCCCC">Association of</font><font color="#E5E5E5"> the different lifetimes</font>

447
00:22:28,250 --> 00:22:34,100
<font color="#E5E5E5">involved and the lifetimes are more like</font>

448
00:22:32,179 --> 00:22:37,510
declarative<font color="#E5E5E5"> than instructive so it's</font>

449
00:22:34,100 --> 00:22:40,250
like you give hint to the<font color="#E5E5E5"> compiler and</font>

450
00:22:37,510 --> 00:22:41,840
it's up to<font color="#CCCCCC"> the compiler</font><font color="#E5E5E5"> how it handles</font>

451
00:22:40,250 --> 00:22:44,110
those you just tell it<font color="#CCCCCC"> like these</font>

452
00:22:41,840 --> 00:22:49,100
resources are related<font color="#E5E5E5"> don't free them</font>

453
00:22:44,110 --> 00:22:51,740
before you<font color="#CCCCCC"> three others</font><font color="#E5E5E5"> yeah actually</font>

454
00:22:49,100 --> 00:22:53,240
that's all I had<font color="#E5E5E5"> so I think I have a lot</font>

455
00:22:51,740 --> 00:23:06,620
<font color="#CCCCCC">of time for questions and</font><font color="#E5E5E5"> that's good</font>

456
00:22:53,240 --> 00:23:08,950
thing<font color="#E5E5E5"> okay do you want me to move</font><font color="#CCCCCC"> to the</font>

457
00:23:06,620 --> 00:23:08,949
<font color="#E5E5E5">previous slide</font>

458
00:23:27,490 --> 00:23:35,030
<font color="#CCCCCC">not exactly sorry</font><font color="#E5E5E5"> I'm not used</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it so</font>

459
00:23:32,480 --> 00:23:38,600
and I was<font color="#E5E5E5"> told to repeat the question</font>

460
00:23:35,030 --> 00:23:43,160
the question is that there is case where

461
00:23:38,600 --> 00:23:45,649
<font color="#CCCCCC">s1 is is to be returned</font><font color="#E5E5E5"> and not as</font><font color="#CCCCCC"> to</font>

462
00:23:43,160 --> 00:23:48,920
and in<font color="#E5E5E5"> that case we don't</font><font color="#CCCCCC"> care about s2</font>

463
00:23:45,650 --> 00:23:50,809
anymore<font color="#E5E5E5"> and it's the</font><font color="#CCCCCC"> s-1 that</font><font color="#E5E5E5"> that can't</font>

464
00:23:48,920 --> 00:23:56,300
be freed<font color="#CCCCCC"> while the return value still</font>

465
00:23:50,809 --> 00:24:00,020
well around<font color="#E5E5E5"> that's true</font><font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> very</font>

466
00:23:56,300 --> 00:24:02,870
<font color="#E5E5E5">hard for compiler to to find these out</font>

467
00:24:00,020 --> 00:24:04,520
one thing<font color="#E5E5E5"> I did not mention is that in</font>

468
00:24:02,870 --> 00:24:07,340
<font color="#E5E5E5">rust you</font><font color="#CCCCCC"> have something called lifetime</font>

469
00:24:04,520 --> 00:24:09,470
<font color="#E5E5E5">illusion like</font><font color="#CCCCCC"> the one of the code that</font>

470
00:24:07,340 --> 00:24:11,870
you saw earlier<font color="#E5E5E5"> where I was using</font>

471
00:24:09,470 --> 00:24:14,419
references but you<font color="#E5E5E5"> notice that</font><font color="#CCCCCC"> there was</font>

472
00:24:11,870 --> 00:24:16,309
<font color="#E5E5E5">no</font><font color="#CCCCCC"> lifetime involved there and the</font>

473
00:24:14,419 --> 00:24:19,340
<font color="#E5E5E5">reason was that lifetimes are always</font>

474
00:24:16,309 --> 00:24:21,500
there<font color="#E5E5E5"> except that in many cases at</font><font color="#CCCCCC"> least</font>

475
00:24:19,340 --> 00:24:24,559
the simple cases rust is smart<font color="#CCCCCC"> enough to</font>

476
00:24:21,500 --> 00:24:26,360
detect<font color="#E5E5E5"> okay the compiler and it declares</font>

477
00:24:24,559 --> 00:24:28,340
them<font color="#E5E5E5"> for you in the code so you don't</font>

478
00:24:26,360 --> 00:24:31,040
have<font color="#CCCCCC"> to care for them</font><font color="#E5E5E5"> but it's like a</font>

479
00:24:28,340 --> 00:24:32,418
bit complicated examples like these<font color="#E5E5E5"> then</font>

480
00:24:31,040 --> 00:24:34,550
<font color="#E5E5E5">you will start true when you</font><font color="#CCCCCC"> have</font>

481
00:24:32,419 --> 00:24:36,620
multiple references being passed and

482
00:24:34,550 --> 00:24:39,350
<font color="#E5E5E5">then you have returned as a reference as</font>

483
00:24:36,620 --> 00:24:41,479
well<font color="#E5E5E5"> then rust will get would not know</font>

484
00:24:39,350 --> 00:24:45,918
<font color="#CCCCCC">how to</font><font color="#E5E5E5"> handle that because if it can</font>

485
00:24:41,480 --> 00:24:47,900
handle it<font color="#CCCCCC"> on its own but not</font><font color="#E5E5E5"> through</font>

486
00:24:45,919 --> 00:24:49,490
their lifetime syntax it's like because

487
00:24:47,900 --> 00:24:52,429
<font color="#E5E5E5">it's more dynamic like we don't know</font>

488
00:24:49,490 --> 00:24:55,220
which one the<font color="#E5E5E5"> which string that will be</font>

489
00:24:52,429 --> 00:24:57,950
passed is is going<font color="#E5E5E5"> to be longest so it's</font>

490
00:24:55,220 --> 00:25:00,410
more like a dynamic decision<font color="#E5E5E5"> and rust</font>

491
00:24:57,950 --> 00:25:04,870
does all all<font color="#CCCCCC"> thing statically so it</font>

492
00:25:00,410 --> 00:25:04,870
needs<font color="#E5E5E5"> to it needs to do it this way</font>

493
00:25:15,830 --> 00:25:22,470
<font color="#CCCCCC">No you can have multiple lifetimes</font>

494
00:25:18,570 --> 00:25:23,840
<font color="#CCCCCC">that's true but in this</font><font color="#E5E5E5"> case you need</font>

495
00:25:22,470 --> 00:25:27,690
both<font color="#E5E5E5"> of them because you</font><font color="#CCCCCC"> don't know</font>

496
00:25:23,840 --> 00:25:29,820
<font color="#E5E5E5">before</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know which parameters will be</font>

497
00:25:27,690 --> 00:25:32,399
<font color="#E5E5E5">passed because it's more dynamic thing</font>

498
00:25:29,820 --> 00:25:34,799
<font color="#E5E5E5">like you don't know it when you're</font>

499
00:25:32,399 --> 00:25:38,840
compiling just that function let's say

500
00:25:34,799 --> 00:25:41,490
<font color="#E5E5E5">in a library and it will be used by</font>

501
00:25:38,840 --> 00:25:44,459
<font color="#E5E5E5">people you don't know</font><font color="#CCCCCC"> and you don't know</font>

502
00:25:41,490 --> 00:25:47,669
what will<font color="#E5E5E5"> be passed so it will you will</font>

503
00:25:44,460 --> 00:25:50,490
only know dynamically which which case

504
00:25:47,669 --> 00:26:02,580
would<font color="#E5E5E5"> it be so that's why it's it's not</font>

505
00:25:50,490 --> 00:26:05,129
possible no other<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> you put</font><font color="#E5E5E5"> like</font>

506
00:26:02,580 --> 00:26:08,428
in there<font color="#CCCCCC"> in this example you you have</font>

507
00:26:05,129 --> 00:26:11,279
like a lifetime<font color="#E5E5E5"> a you just put a comma</font>

508
00:26:08,429 --> 00:26:12,720
<font color="#E5E5E5">lifetime B so you can declare</font><font color="#CCCCCC"> multiple</font>

509
00:26:11,279 --> 00:26:17,610
and then you can use them<font color="#CCCCCC"> like the same</font>

510
00:26:12,720 --> 00:26:21,539
as<font color="#CCCCCC"> C I'm using a left sorry the question</font>

511
00:26:17,610 --> 00:26:26,809
was<font color="#E5E5E5"> if I can have multiple lifetimes</font><font color="#CCCCCC"> in</font>

512
00:26:21,539 --> 00:26:26,809
there and that's<font color="#E5E5E5"> what answered sorry</font>

513
00:26:28,380 --> 00:26:31,469
[Music]

514
00:26:35,450 --> 00:26:39,910
the question is if the lifetime is part

515
00:26:37,640 --> 00:26:43,670
of<font color="#E5E5E5"> the reference type</font>

516
00:26:39,910 --> 00:26:46,880
not exactly<font color="#CCCCCC"> but it's always there like</font>

517
00:26:43,670 --> 00:26:49,160
<font color="#E5E5E5">when you pass things by reference</font><font color="#CCCCCC"> the</font>

518
00:26:46,880 --> 00:26:51,160
life there's a lifetime involved<font color="#E5E5E5"> it's</font>

519
00:26:49,160 --> 00:26:55,090
just<font color="#CCCCCC"> the</font><font color="#E5E5E5"> difference is whether you</font>

520
00:26:51,160 --> 00:26:58,310
<font color="#CCCCCC">declare you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> declare it or not</font>

521
00:26:55,090 --> 00:27:01,429
yeah actually it's implemented through

522
00:26:58,310 --> 00:27:04,419
something called generics in in rust<font color="#E5E5E5"> if</font>

523
00:27:01,430 --> 00:27:07,010
you look into generics<font color="#CCCCCC"> you will see that</font>

524
00:27:04,420 --> 00:27:09,340
<font color="#E5E5E5">syntax of declaring them exactly exactly</font>

525
00:27:07,010 --> 00:27:11,540
<font color="#E5E5E5">the same and that's how</font><font color="#CCCCCC"> its implemented</font>

526
00:27:09,340 --> 00:27:13,159
<font color="#CCCCCC">and you might want to read up on that</font>

527
00:27:11,540 --> 00:27:37,550
it's it's pretty interesting<font color="#E5E5E5"> stuff how</font>

528
00:27:13,160 --> 00:27:39,140
<font color="#E5E5E5">lifetimes are implemented so</font><font color="#CCCCCC"> that the</font>

529
00:27:37,550 --> 00:27:41,270
question<font color="#CCCCCC"> is if I understood correctly</font><font color="#E5E5E5"> is</font>

530
00:27:39,140 --> 00:27:43,850
<font color="#E5E5E5">that if in multi-threaded application is</font>

531
00:27:41,270 --> 00:27:49,940
it possible for<font color="#E5E5E5"> one tattoo or</font><font color="#CCCCCC"> write the</font>

532
00:27:43,850 --> 00:27:51,770
other resource of others no no no like

533
00:27:49,940 --> 00:27:58,010
you can't really mess<font color="#CCCCCC"> up with lifetime</font>

534
00:27:51,770 --> 00:28:00,820
<font color="#CCCCCC">though</font><font color="#E5E5E5"> I sure okay</font>

535
00:27:58,010 --> 00:28:00,820
you know it's

536
00:28:04,550 --> 00:28:06,610
<font color="#E5E5E5">you</font>

