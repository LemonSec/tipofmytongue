1
00:00:05,250 --> 00:00:10,650
well my name is<font color="#CCCCCC"> Paulo</font><font color="#E5E5E5"> Savini</font><font color="#CCCCCC"> I am</font>

2
00:00:08,600 --> 00:00:13,799
compiler<font color="#E5E5E5"> engineer interns you can see</font>

3
00:00:10,650 --> 00:00:17,789
that<font color="#CCCCCC"> my</font><font color="#E5E5E5"> Kozma and I'm here to talk</font><font color="#CCCCCC"> about</font>

4
00:00:13,799 --> 00:00:19,920
her a little<font color="#E5E5E5"> about security and how the</font>

5
00:00:17,789 --> 00:00:23,400
compiler can help the programmer to

6
00:00:19,920 --> 00:00:27,359
<font color="#CCCCCC">strikin they could against some kinds of</font>

7
00:00:23,400 --> 00:00:30,869
<font color="#E5E5E5">facts and actually how many</font><font color="#CCCCCC"> of you were</font>

8
00:00:27,359 --> 00:00:33,360
in this<font color="#E5E5E5"> lab room last year well quite a</font>

9
00:00:30,869 --> 00:00:35,460
few yeah<font color="#E5E5E5"> and some of you may recall</font>

10
00:00:33,360 --> 00:00:37,590
<font color="#E5E5E5">actually that so there was a similar</font>

11
00:00:35,460 --> 00:00:39,690
<font color="#E5E5E5">talk last year from Johnny Burnette</font><font color="#CCCCCC"> that</font>

12
00:00:37,590 --> 00:00:41,910
please raise your hand<font color="#CCCCCC"> Jamie yeah yeah</font>

13
00:00:39,690 --> 00:00:46,739
<font color="#E5E5E5">he made me</font><font color="#CCCCCC"> raise my head last</font><font color="#E5E5E5"> year so</font>

14
00:00:41,910 --> 00:00:48,179
now<font color="#E5E5E5"> my turn</font><font color="#CCCCCC"> right and he talked about</font>

15
00:00:46,740 --> 00:00:51,660
<font color="#E5E5E5">the secure project that it is no</font>

16
00:00:48,180 --> 00:00:55,320
personal project that aims at adding to

17
00:00:51,660 --> 00:00:57,629
our VM some tools to improve security of

18
00:00:55,320 --> 00:00:59,580
the code<font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about it later</font>

19
00:00:57,630 --> 00:01:02,310
these talk is a kind of<font color="#CCCCCC"> follow up that</font>

20
00:00:59,580 --> 00:01:07,770
<font color="#E5E5E5">talk because it's about my contribution</font>

21
00:01:02,310 --> 00:01:10,290
<font color="#CCCCCC">to that process</font><font color="#E5E5E5"> to that project so I'll</font>

22
00:01:07,770 --> 00:01:12,420
talk<font color="#CCCCCC"> to you about what kind of threats I</font>

23
00:01:10,290 --> 00:01:14,610
mean<font color="#E5E5E5"> that's that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> based on</font>

24
00:01:12,420 --> 00:01:16,500
<font color="#E5E5E5">information leakage of devices then I</font>

25
00:01:14,610 --> 00:01:18,510
will introduce<font color="#CCCCCC"> to you the</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> project</font>

26
00:01:16,500 --> 00:01:20,820
<font color="#E5E5E5">that</font><font color="#CCCCCC"> which was involved to do this work</font>

27
00:01:18,510 --> 00:01:22,830
and then I'll talk you<font color="#E5E5E5"> about</font><font color="#CCCCCC"> this</font>

28
00:01:20,820 --> 00:01:26,339
<font color="#E5E5E5">slicing because miss</font><font color="#CCCCCC"> Larson</font><font color="#E5E5E5"> is basically</font>

29
00:01:22,830 --> 00:01:29,100
the technique<font color="#CCCCCC"> which is based my children</font>

30
00:01:26,340 --> 00:01:31,590
developing<font color="#E5E5E5"> and and then talk about the</font>

31
00:01:29,100 --> 00:01:34,798
tool that<font color="#CCCCCC"> B slicer that</font><font color="#E5E5E5"> you may guess</font>

32
00:01:31,590 --> 00:01:36,960
what it does<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and they</font><font color="#E5E5E5"> will make a</font>

33
00:01:34,799 --> 00:01:43,049
few<font color="#E5E5E5"> final consideration</font><font color="#CCCCCC"> about what we</font>

34
00:01:36,960 --> 00:01:46,080
are<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> see so</font><font color="#CCCCCC"> first story when we</font>

35
00:01:43,049 --> 00:01:47,880
talk<font color="#CCCCCC"> about information</font><font color="#E5E5E5"> leakage</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

36
00:01:46,080 --> 00:01:50,960
huge variety of these may<font color="#E5E5E5"> come to our</font>

37
00:01:47,880 --> 00:01:53,310
<font color="#CCCCCC">minds</font><font color="#E5E5E5"> but what I mean here is</font>

38
00:01:50,960 --> 00:01:56,580
<font color="#CCCCCC">information leakage related to small</font>

39
00:01:53,310 --> 00:01:58,409
<font color="#CCCCCC">Kroenke devices specifically</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> joint</font>

40
00:01:56,580 --> 00:02:00,630
<font color="#CCCCCC">device</font><font color="#E5E5E5"> is designed to perform</font>

41
00:01:58,409 --> 00:02:04,170
encryptions so<font color="#E5E5E5"> we were talking about</font>

42
00:02:00,630 --> 00:02:08,878
small<font color="#E5E5E5"> chips for instance on smart cards</font>

43
00:02:04,170 --> 00:02:11,879
or mouth films<font color="#E5E5E5"> so not like chips of</font>

44
00:02:08,878 --> 00:02:13,859
<font color="#CCCCCC">general purpose computers</font><font color="#E5E5E5"> right so small</font>

45
00:02:11,879 --> 00:02:14,849
chips<font color="#E5E5E5"> that perform the operations so</font>

46
00:02:13,860 --> 00:02:16,800
that<font color="#CCCCCC"> host</font>

47
00:02:14,849 --> 00:02:19,280
few<font color="#CCCCCC"> processes</font>

48
00:02:16,800 --> 00:02:23,010
and why is that important<font color="#CCCCCC"> because</font>

49
00:02:19,280 --> 00:02:25,080
<font color="#CCCCCC">concepts some features</font><font color="#E5E5E5"> increasing</font>

50
00:02:23,010 --> 00:02:27,510
features like the power<font color="#E5E5E5"> consumption of</font>

51
00:02:25,080 --> 00:02:29,460
the chip or<font color="#E5E5E5"> the execution time of the</font>

52
00:02:27,510 --> 00:02:32,220
program<font color="#E5E5E5"> also any other kind of a mission</font>

53
00:02:29,460 --> 00:02:36,630
<font color="#CCCCCC">that</font><font color="#E5E5E5"> require quite unavoidable like</font>

54
00:02:32,220 --> 00:02:39,350
<font color="#CCCCCC">extra money leaks</font><font color="#E5E5E5"> could could</font><font color="#CCCCCC"> be related</font>

55
00:02:36,630 --> 00:02:43,950
<font color="#CCCCCC">more easily than a general-purpose</font>

56
00:02:39,350 --> 00:02:47,540
<font color="#E5E5E5">general general purpose CPU to what's</font>

57
00:02:43,950 --> 00:02:49,560
going<font color="#E5E5E5"> on on the chip so if somehow this</font>

58
00:02:47,540 --> 00:02:52,560
interesting feature of<font color="#E5E5E5"> these behaviors</font>

59
00:02:49,560 --> 00:02:55,020
can<font color="#CCCCCC"> be related to the sensitive</font><font color="#E5E5E5"> data</font>

60
00:02:52,560 --> 00:02:59,580
<font color="#CCCCCC">that are being processed you are what is</font>

61
00:02:55,020 --> 00:03:03,290
<font color="#E5E5E5">called a side channel as a channel that</font>

62
00:02:59,580 --> 00:03:06,090
can give an attacker the opportunity to

63
00:03:03,290 --> 00:03:09,420
to get some clues<font color="#E5E5E5"> about what</font><font color="#CCCCCC"> the</font>

64
00:03:06,090 --> 00:03:12,180
sensitive data<font color="#E5E5E5"> are we don't need to find</font>

65
00:03:09,420 --> 00:03:14,670
a flow in the<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> Argonne itself or</font>

66
00:03:12,180 --> 00:03:16,350
<font color="#CCCCCC">to use a brute force</font><font color="#E5E5E5"> attack so that's</font>

67
00:03:14,670 --> 00:03:20,280
why it's so<font color="#E5E5E5"> dangerous because this way</font>

68
00:03:16,350 --> 00:03:21,810
sorry<font color="#E5E5E5"> this way some algorithm may be</font>

69
00:03:20,280 --> 00:03:26,010
quite powerless against<font color="#E5E5E5"> this kind of</font>

70
00:03:21,810 --> 00:03:28,560
threat<font color="#CCCCCC"> I</font><font color="#E5E5E5"> actually give you an example</font>

71
00:03:26,010 --> 00:03:33,720
<font color="#CCCCCC">before</font><font color="#E5E5E5"> moving</font><font color="#CCCCCC"> to a real example imagine</font>

72
00:03:28,560 --> 00:03:37,110
<font color="#CCCCCC">for instance that</font><font color="#E5E5E5"> we are using a smart</font>

73
00:03:33,720 --> 00:03:39,359
card on a reader<font color="#CCCCCC"> and the reception is</font>

74
00:03:37,110 --> 00:03:42,870
<font color="#E5E5E5">all that he'll probably</font><font color="#CCCCCC"> puts a device</font>

75
00:03:39,360 --> 00:03:45,110
<font color="#E5E5E5">near that we can for instance</font><font color="#CCCCCC"> intercept</font>

76
00:03:42,870 --> 00:03:49,080
<font color="#E5E5E5">the electromagnetic emission right</font><font color="#CCCCCC"> a</font>

77
00:03:45,110 --> 00:03:51,570
sophisticated<font color="#E5E5E5"> tool</font><font color="#CCCCCC"> if for</font><font color="#E5E5E5"> any reason</font>

78
00:03:49,080 --> 00:03:54,510
<font color="#E5E5E5">there is a different measurement</font>

79
00:03:51,570 --> 00:03:57,630
<font color="#CCCCCC">Commission</font><font color="#E5E5E5"> according to the fact that in</font>

80
00:03:54,510 --> 00:04:00,929
a<font color="#E5E5E5"> certain moment</font><font color="#CCCCCC"> zero or one of the of</font>

81
00:03:57,630 --> 00:04:05,880
<font color="#CCCCCC">the key is</font><font color="#E5E5E5"> being processed that could be</font>

82
00:04:00,930 --> 00:04:07,410
<font color="#E5E5E5">give the the advice</font><font color="#CCCCCC"> a clue about</font><font color="#E5E5E5"> whether</font>

83
00:04:05,880 --> 00:04:09,600
at a certain position<font color="#E5E5E5"> the key there is a</font>

84
00:04:07,410 --> 00:04:11,010
zero or one that's<font color="#E5E5E5"> the kind of</font><font color="#CCCCCC"> fact I</font>

85
00:04:09,600 --> 00:04:13,700
<font color="#CCCCCC">talked about</font><font color="#E5E5E5"> this is quite a silly</font>

86
00:04:11,010 --> 00:04:17,000
<font color="#CCCCCC">example but should give you an</font><font color="#E5E5E5"> idea I</font>

87
00:04:13,700 --> 00:04:19,680
also put<font color="#CCCCCC"> some real example from real</font>

88
00:04:17,000 --> 00:04:22,410
encryption libraries this<font color="#E5E5E5"> is quite old</font>

89
00:04:19,680 --> 00:04:26,010
actually<font color="#CCCCCC"> and is it has been solved</font><font color="#E5E5E5"> at</font>

90
00:04:22,410 --> 00:04:27,540
don't worry<font color="#E5E5E5"> I also put a reference at</font>

91
00:04:26,010 --> 00:04:30,180
the<font color="#E5E5E5"> bottom</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> other</font>

92
00:04:27,540 --> 00:04:32,940
caption so you can find<font color="#CCCCCC"> these security</font>

93
00:04:30,180 --> 00:04:36,300
issues<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the database</font><font color="#CCCCCC"> of the CVE</font><font color="#E5E5E5"> that</font>

94
00:04:32,940 --> 00:04:39,300
little babies<font color="#E5E5E5"> but just to give you an</font>

95
00:04:36,300 --> 00:04:44,040
example this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> example although our</font>

96
00:04:39,300 --> 00:04:46,410
timing<font color="#CCCCCC"> site</font><font color="#E5E5E5"> channel because someone put</font>

97
00:04:44,040 --> 00:04:49,020
<font color="#E5E5E5">the padding in the</font><font color="#CCCCCC"> so-called buff on in</font>

98
00:04:46,410 --> 00:04:52,080
there it's a<font color="#E5E5E5"> pro and then used P to</font>

99
00:04:49,020 --> 00:04:54,900
point<font color="#E5E5E5"> to buff what P was also used in</font><font color="#CCCCCC"> a</font>

100
00:04:52,080 --> 00:04:57,570
condition of<font color="#E5E5E5"> an if closed and if close</font>

101
00:04:54,900 --> 00:04:59,130
that if satisfied<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> Kazakh</font>

102
00:04:57,570 --> 00:05:02,130
condition satisfied<font color="#E5E5E5"> will make the</font>

103
00:04:59,130 --> 00:05:07,080
subroutine<font color="#CCCCCC"> returned that means that the</font>

104
00:05:02,130 --> 00:05:09,330
<font color="#E5E5E5">flow can the flow control here depends</font>

105
00:05:07,080 --> 00:05:12,330
on<font color="#E5E5E5"> how in this case</font><font color="#CCCCCC"> how long is the</font>

106
00:05:09,330 --> 00:05:13,800
padding so<font color="#E5E5E5"> with the proper tool and</font>

107
00:05:12,330 --> 00:05:16,050
proper<font color="#E5E5E5"> of course sophisticated tool</font>

108
00:05:13,800 --> 00:05:17,520
based on statistics and<font color="#CCCCCC"> solves</font><font color="#E5E5E5"> it's not</font>

109
00:05:16,050 --> 00:05:18,180
so easy<font color="#CCCCCC"> to understand that but with a</font>

110
00:05:17,520 --> 00:05:21,900
proper<font color="#E5E5E5"> tool</font>

111
00:05:18,180 --> 00:05:23,460
someone could understand how long is the

112
00:05:21,900 --> 00:05:27,900
padding and<font color="#E5E5E5"> we don't want that to</font><font color="#CCCCCC"> happen</font>

113
00:05:23,460 --> 00:05:32,700
of course another example of timing

114
00:05:27,900 --> 00:05:34,919
<font color="#CCCCCC">side-channel happens when we use</font>

115
00:05:32,700 --> 00:05:38,760
sensitive data to<font color="#E5E5E5"> access memory for</font>

116
00:05:34,920 --> 00:05:42,420
<font color="#CCCCCC">instance in</font><font color="#E5E5E5"> his example the highlighted</font>

117
00:05:38,760 --> 00:05:44,760
variables are the sensitive<font color="#E5E5E5"> ones well</font>

118
00:05:42,420 --> 00:05:47,580
you can see that<font color="#CCCCCC"> Y has</font><font color="#E5E5E5"> been used to</font>

119
00:05:44,760 --> 00:05:52,080
<font color="#E5E5E5">either contain some sensitive data as we</font>

120
00:05:47,580 --> 00:05:57,390
used to access the array<font color="#CCCCCC"> are and in this</font>

121
00:05:52,080 --> 00:05:59,669
case an attacker<font color="#E5E5E5"> that has access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> to</font>

122
00:05:57,390 --> 00:06:06,750
the system<font color="#E5E5E5"> or may also influence that</font>

123
00:05:59,670 --> 00:06:09,930
the cache may understand whether what<font color="#E5E5E5"> is</font>

124
00:06:06,750 --> 00:06:12,030
the content<font color="#E5E5E5"> of Y by monitoring the</font>

125
00:06:09,930 --> 00:06:14,340
<font color="#E5E5E5">events of cache hit or cache miss of</font>

126
00:06:12,030 --> 00:06:17,549
course of course

127
00:06:14,340 --> 00:06:19,349
you need<font color="#E5E5E5"> to proper tools again but this</font>

128
00:06:17,550 --> 00:06:27,420
<font color="#CCCCCC">is</font><font color="#E5E5E5"> anyway a possibility and we</font><font color="#CCCCCC"> have to</font>

129
00:06:19,350 --> 00:06:30,240
banish<font color="#CCCCCC"> that to several projects risen up</font>

130
00:06:27,420 --> 00:06:32,750
to<font color="#CCCCCC"> solve this kind of issues these are a</font>

131
00:06:30,240 --> 00:06:35,550
couple of them<font color="#E5E5E5"> Oh the latter project</font>

132
00:06:32,750 --> 00:06:37,520
<font color="#E5E5E5">that is run by the curtain research</font>

133
00:06:35,550 --> 00:06:40,290
group of the<font color="#CCCCCC"> University of Bristol</font>

134
00:06:37,520 --> 00:06:41,580
<font color="#CCCCCC">particularly aims at developing some</font>

135
00:06:40,290 --> 00:06:44,530
tools

136
00:06:41,580 --> 00:06:46,000
that<font color="#CCCCCC"> helps the programmer test their</font>

137
00:06:44,530 --> 00:06:47,710
<font color="#E5E5E5">devices on their implementation</font><font color="#CCCCCC"> against</font>

138
00:06:46,000 --> 00:06:49,420
<font color="#E5E5E5">these kind of threats side channels</font>

139
00:06:47,710 --> 00:06:53,739
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> learn based on informational</font>

140
00:06:49,420 --> 00:06:55,450
leakages<font color="#CCCCCC"> their aim actually is to</font>

141
00:06:53,740 --> 00:06:59,470
<font color="#E5E5E5">provide these tools to any programmer</font>

142
00:06:55,450 --> 00:07:02,530
<font color="#CCCCCC">rather than what because actually to</font>

143
00:06:59,470 --> 00:07:04,270
test devices<font color="#E5E5E5"> and system against this</font>

144
00:07:02,530 --> 00:07:06,190
kind<font color="#E5E5E5"> of threats requires you to</font><font color="#CCCCCC"> have a</font>

145
00:07:04,270 --> 00:07:09,609
deep knowledge<font color="#E5E5E5"> or side channels and</font>

146
00:07:06,190 --> 00:07:11,950
sometimes also big resources<font color="#E5E5E5"> that not</font>

147
00:07:09,610 --> 00:07:15,790
all the labs<font color="#E5E5E5"> have so that's the aim of</font>

148
00:07:11,950 --> 00:07:18,640
the project<font color="#CCCCCC"> - to bring the</font><font color="#E5E5E5"> expertise in</font>

149
00:07:15,790 --> 00:07:21,880
<font color="#E5E5E5">Rick</font><font color="#CCCCCC"> literally attacks to the</font><font color="#E5E5E5"> table of</font>

150
00:07:18,640 --> 00:07:23,349
any developer and they partner with

151
00:07:21,880 --> 00:07:25,870
<font color="#CCCCCC">Amber convene order to achieve their</font>

152
00:07:23,350 --> 00:07:30,190
goal and that's how the secured project

153
00:07:25,870 --> 00:07:33,190
was born<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> an open</font><font color="#E5E5E5"> source project</font>

154
00:07:30,190 --> 00:07:35,710
<font color="#CCCCCC">it is more focused on a compiler</font><font color="#E5E5E5"> because</font>

155
00:07:33,190 --> 00:07:37,210
it aims<font color="#E5E5E5"> at adding some tools</font><font color="#CCCCCC"> to open</font>

156
00:07:35,710 --> 00:07:41,080
<font color="#E5E5E5">source compilers like did you see in a</font>

157
00:07:37,210 --> 00:07:42,940
<font color="#E5E5E5">lot of</font><font color="#CCCCCC"> yen that seemingly had the</font>

158
00:07:41,080 --> 00:07:47,409
programmer<font color="#E5E5E5"> to write more secure coding</font>

159
00:07:42,940 --> 00:07:50,200
these kind of threats here are some of

160
00:07:47,410 --> 00:07:52,240
the things we<font color="#CCCCCC"> are developing</font><font color="#E5E5E5"> this</font>

161
00:07:50,200 --> 00:07:55,710
project still active<font color="#E5E5E5"> and we are working</font>

162
00:07:52,240 --> 00:07:58,720
on these tools are<font color="#CCCCCC"> - that can</font>

163
00:07:55,710 --> 00:08:03,250
automatically<font color="#CCCCCC"> be sliced some structured</font>

164
00:07:58,720 --> 00:08:06,300
regional your code or<font color="#CCCCCC"> - to resist some</font>

165
00:08:03,250 --> 00:08:08,680
sensitive data<font color="#E5E5E5"> left on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stack by</font>

166
00:08:06,300 --> 00:08:10,780
<font color="#CCCCCC">assembler</font><font color="#E5E5E5"> team for instance</font><font color="#CCCCCC"> and that can</font>

167
00:08:08,680 --> 00:08:13,450
be<font color="#E5E5E5"> so collected by an appropriate</font><font color="#CCCCCC"> Acker</font>

168
00:08:10,780 --> 00:08:17,109
<font color="#E5E5E5">and then some warnings that let you know</font>

169
00:08:13,450 --> 00:08:19,780
<font color="#E5E5E5">whether in the code you're writing there</font>

170
00:08:17,110 --> 00:08:22,120
<font color="#E5E5E5">are some bad practices</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> bad</font><font color="#CCCCCC"> choice of</font>

171
00:08:19,780 --> 00:08:29,020
<font color="#CCCCCC">the implementation that</font><font color="#E5E5E5"> could lead to a</font>

172
00:08:22,120 --> 00:08:32,909
side channel later so I<font color="#E5E5E5"> had to ask you</font>

173
00:08:29,020 --> 00:08:34,809
how many of you heard<font color="#E5E5E5"> about bit slicing</font>

174
00:08:32,909 --> 00:08:36,730
more than what I<font color="#E5E5E5"> expected</font>

175
00:08:34,809 --> 00:08:40,089
right<font color="#E5E5E5"> yeah that's</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> secure</font>

176
00:08:36,730 --> 00:08:42,150
completeness I<font color="#E5E5E5"> explained you when really</font>

177
00:08:40,090 --> 00:08:45,970
<font color="#E5E5E5">what it is</font>

178
00:08:42,150 --> 00:08:47,800
starting from<font color="#E5E5E5"> mmm there's previous use</font>

179
00:08:45,970 --> 00:08:52,950
<font color="#E5E5E5">before we had the microprocessor</font>

180
00:08:47,800 --> 00:08:56,490
<font color="#CCCCCC">miss</font><font color="#E5E5E5"> lysine was basically used to obtain</font>

181
00:08:52,950 --> 00:09:00,630
let's say processor without<font color="#E5E5E5"> the longer</font>

182
00:08:56,490 --> 00:09:03,000
word<font color="#CCCCCC"> by ideally let's say putting</font>

183
00:09:00,630 --> 00:09:05,220
<font color="#E5E5E5">together to work together</font><font color="#CCCCCC"> and one</font><font color="#E5E5E5"> B</font>

184
00:09:03,000 --> 00:09:07,320
processor to build a<font color="#E5E5E5"> virtual and B</font>

185
00:09:05,220 --> 00:09:10,500
processor let's say like<font color="#E5E5E5"> a synth system</font>

186
00:09:07,320 --> 00:09:14,070
like a single<font color="#E5E5E5"> multiple data system but</font>

187
00:09:10,500 --> 00:09:17,310
of course in<font color="#CCCCCC"> order</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do that you</font><font color="#E5E5E5"> need</font>

188
00:09:14,070 --> 00:09:19,920
<font color="#E5E5E5">also to transform the software had to</font>

189
00:09:17,310 --> 00:09:24,839
run on this<font color="#E5E5E5"> on the system that means</font>

190
00:09:19,920 --> 00:09:27,930
that you had to to<font color="#E5E5E5"> be slice</font><font color="#CCCCCC"> a sorry for</font>

191
00:09:24,840 --> 00:09:33,270
<font color="#CCCCCC">that</font><font color="#E5E5E5"> to be sliced data and the argument</font>

192
00:09:27,930 --> 00:09:36,479
as<font color="#E5E5E5"> well as was going to show you now you</font>

193
00:09:33,270 --> 00:09:39,000
could do it also<font color="#E5E5E5"> in software by say</font>

194
00:09:36,480 --> 00:09:43,050
simulating this virtual processor on a

195
00:09:39,000 --> 00:09:44,700
general<font color="#E5E5E5"> purpose CPU</font><font color="#CCCCCC"> why of</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> be</font>

196
00:09:43,050 --> 00:09:46,410
<font color="#CCCCCC">slicing the data and is actually</font>

197
00:09:44,700 --> 00:09:49,860
algorithm and then I explain why<font color="#CCCCCC"> you</font>

198
00:09:46,410 --> 00:09:51,660
<font color="#CCCCCC">should do that</font><font color="#E5E5E5"> nowadays before that</font>

199
00:09:49,860 --> 00:09:54,270
would like to<font color="#E5E5E5"> show you an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of a</font>

200
00:09:51,660 --> 00:09:56,550
simple be slicing<font color="#E5E5E5"> let's take for</font>

201
00:09:54,270 --> 00:09:58,949
<font color="#E5E5E5">instance that array as an input on the</font>

202
00:09:56,550 --> 00:10:01,800
left and let's imagine<font color="#E5E5E5"> we want to be</font>

203
00:09:58,950 --> 00:10:04,100
slice it this array on<font color="#CCCCCC"> the right is not</font>

204
00:10:01,800 --> 00:10:08,130
complete<font color="#E5E5E5"> of course because it would be</font>

205
00:10:04,100 --> 00:10:10,050
<font color="#E5E5E5">eight times longer</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> one because it</font>

206
00:10:08,130 --> 00:10:14,689
will have one element per each<font color="#CCCCCC"> bit of</font>

207
00:10:10,050 --> 00:10:19,469
<font color="#CCCCCC">the</font><font color="#E5E5E5"> original array so much longer</font><font color="#CCCCCC"> and</font>

208
00:10:14,690 --> 00:10:22,710
simply we put<font color="#E5E5E5"> each bit of the original</font>

209
00:10:19,470 --> 00:10:25,800
rayman a new element of our array of

210
00:10:22,710 --> 00:10:30,750
slices<font color="#CCCCCC"> we call them like that from now</font>

211
00:10:25,800 --> 00:10:33,800
on this slice is right what about the

212
00:10:30,750 --> 00:10:36,060
algorithm here<font color="#E5E5E5"> is a simpler example</font>

213
00:10:33,800 --> 00:10:41,189
let's imagine that<font color="#E5E5E5"> the argument a we</font>

214
00:10:36,060 --> 00:10:43,229
meant to run on<font color="#E5E5E5"> that input was that loop</font>

215
00:10:41,190 --> 00:10:45,120
in at the top

216
00:10:43,230 --> 00:10:50,100
just a simple cooperation between the

217
00:10:45,120 --> 00:10:53,730
device of the<font color="#CCCCCC"> only erase if</font><font color="#E5E5E5"> you want to</font>

218
00:10:50,100 --> 00:10:57,150
be<font color="#CCCCCC"> sliced</font><font color="#E5E5E5"> argument we have to substitute</font>

219
00:10:53,730 --> 00:11:00,270
<font color="#CCCCCC">that each saw operation of that loop we</font>

220
00:10:57,150 --> 00:11:02,520
just<font color="#CCCCCC"> set of eight so operation perform</font>

221
00:11:00,270 --> 00:11:04,850
each one of one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> bits</font><font color="#CCCCCC"> we seen</font>

222
00:11:02,520 --> 00:11:04,850
<font color="#CCCCCC">before</font>

223
00:11:05,980 --> 00:11:09,829
right<font color="#E5E5E5"> you may be wondering why</font><font color="#CCCCCC"> should we</font>

224
00:11:09,470 --> 00:11:12,800
do that

225
00:11:09,829 --> 00:11:18,849
I mean<font color="#E5E5E5"> dividing data and add</font>

226
00:11:12,800 --> 00:11:22,479
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> besides you</font><font color="#E5E5E5"> may that that</font>

227
00:11:18,850 --> 00:11:25,759
just some<font color="#CCCCCC"> arguing can be</font><font color="#E5E5E5"> sliced and</font>

228
00:11:22,480 --> 00:11:27,550
moreover<font color="#E5E5E5"> or</font><font color="#CCCCCC"> if some of</font><font color="#E5E5E5"> this would</font>

229
00:11:25,759 --> 00:11:31,069
benefit from this<font color="#E5E5E5"> kind of representation</font>

230
00:11:27,550 --> 00:11:32,810
<font color="#E5E5E5">for instance the single inputs multiple</font>

231
00:11:31,069 --> 00:11:35,959
data systems<font color="#CCCCCC"> would</font><font color="#E5E5E5"> that from this</font>

232
00:11:32,810 --> 00:11:37,489
because the rougane are better

233
00:11:35,959 --> 00:11:39,170
<font color="#E5E5E5">throughput</font><font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see from this</font>

234
00:11:37,490 --> 00:11:41,959
example this<font color="#E5E5E5"> is an evolution of the</font>

235
00:11:39,170 --> 00:11:46,009
previous example in which we<font color="#E5E5E5"> are using</font>

236
00:11:41,959 --> 00:11:51,800
we are taking<font color="#E5E5E5"> more instances at the same</font>

237
00:11:46,009 --> 00:11:54,740
time of input and we feel<font color="#E5E5E5"> in the</font>

238
00:11:51,800 --> 00:11:56,329
<font color="#E5E5E5">remaining bits of the slices with bits</font>

239
00:11:54,740 --> 00:12:00,980
of the other inputs as you can see here

240
00:11:56,329 --> 00:12:02,810
in an orthogonal way this way you make

241
00:12:00,980 --> 00:12:07,519
just<font color="#E5E5E5"> make</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple calculation</font><font color="#CCCCCC"> instead</font>

242
00:12:02,810 --> 00:12:11,119
<font color="#CCCCCC">of making well</font><font color="#E5E5E5"> eight times more like so</font>

243
00:12:07,519 --> 00:12:13,910
operation and just<font color="#CCCCCC"> processing one array</font>

244
00:12:11,120 --> 00:12:17,720
we<font color="#E5E5E5"> and anyway make eight times more like</font>

245
00:12:13,910 --> 00:12:21,290
so operation but we process<font color="#E5E5E5"> so well</font>

246
00:12:17,720 --> 00:12:23,600
<font color="#E5E5E5">eight input</font><font color="#CCCCCC"> distances so basically in</font>

247
00:12:21,290 --> 00:12:25,939
this<font color="#E5E5E5"> case we balance the truth</font><font color="#CCCCCC"> booth the</font>

248
00:12:23,600 --> 00:12:28,279
loss of throughput<font color="#E5E5E5"> but we could also</font><font color="#CCCCCC"> use</font>

249
00:12:25,940 --> 00:12:30,290
slices that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> longer for instance</font><font color="#E5E5E5"> 32</font>

250
00:12:28,279 --> 00:12:33,380
bits in the case we will<font color="#E5E5E5"> gain throughput</font>

251
00:12:30,290 --> 00:12:35,990
<font color="#E5E5E5">because it will process 32 inputs</font>

252
00:12:33,380 --> 00:12:39,319
<font color="#E5E5E5">distances at the same time but is it</font>

253
00:12:35,990 --> 00:12:42,920
just<font color="#CCCCCC"> about efficiency in</font><font color="#E5E5E5"> cryptography</font>

254
00:12:39,319 --> 00:12:45,469
instead be slicing<font color="#E5E5E5"> as we</font><font color="#CCCCCC"> suggest as</font>

255
00:12:42,920 --> 00:12:49,040
quite interesting technique<font color="#E5E5E5"> to address</font>

256
00:12:45,470 --> 00:12:50,810
<font color="#E5E5E5">that problem of tiny side channels and</font>

257
00:12:49,040 --> 00:12:56,599
why is that because<font color="#E5E5E5"> as you as a</font><font color="#CCCCCC"> tree</font>

258
00:12:50,810 --> 00:12:59,420
before the transformation<font color="#E5E5E5"> of nagger it</font>

259
00:12:56,600 --> 00:13:01,100
actually implies that the original

260
00:12:59,420 --> 00:13:03,250
<font color="#CCCCCC">argument is transformed into an</font>

261
00:13:01,100 --> 00:13:05,899
<font color="#CCCCCC">equivalent</font><font color="#E5E5E5"> version</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> made all the</font>

262
00:13:03,250 --> 00:13:07,880
atomic<font color="#CCCCCC"> doing operations</font><font color="#E5E5E5"> operation that</font>

263
00:13:05,899 --> 00:13:11,300
<font color="#E5E5E5">can be</font><font color="#CCCCCC"> performed</font><font color="#E5E5E5"> on just one single</font><font color="#CCCCCC"> bit</font>

264
00:13:07,880 --> 00:13:13,790
and as you may know the atomic<font color="#CCCCCC"> building</font>

265
00:13:11,300 --> 00:13:16,010
<font color="#E5E5E5">operations execution time</font><font color="#CCCCCC"> it does</font><font color="#E5E5E5"> not</font>

266
00:13:13,790 --> 00:13:16,910
depend<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the input</font><font color="#E5E5E5"> take for instance</font>

267
00:13:16,010 --> 00:13:19,460
the<font color="#E5E5E5"> acts of</font>

268
00:13:16,910 --> 00:13:23,060
operation or<font color="#CCCCCC"> order logic</font><font color="#E5E5E5"> operation like</font>

269
00:13:19,460 --> 00:13:25,520
<font color="#E5E5E5">an or or and so if we</font><font color="#CCCCCC"> manage to</font>

270
00:13:23,060 --> 00:13:28,910
<font color="#E5E5E5">translate a whole hog</font><font color="#CCCCCC"> original into this</font>

271
00:13:25,520 --> 00:13:31,910
equivalent atomic boolean version we

272
00:13:28,910 --> 00:13:34,130
obtain an equivalent a target<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font>

273
00:13:31,910 --> 00:13:35,780
an overall execution time that does<font color="#E5E5E5"> not</font>

274
00:13:34,130 --> 00:13:37,939
<font color="#E5E5E5">depend on the input and this is very</font>

275
00:13:35,780 --> 00:13:43,520
crucial<font color="#CCCCCC"> for a block cipher</font><font color="#E5E5E5"> for instance</font>

276
00:13:37,940 --> 00:13:45,410
that<font color="#E5E5E5"> molar is also usually a single</font>

277
00:13:43,520 --> 00:13:48,020
input<font color="#CCCCCC"> a multiple data system so that</font>

278
00:13:45,410 --> 00:13:54,530
will gain also throughput from this

279
00:13:48,020 --> 00:13:58,579
technique as I was saying here<font color="#E5E5E5"> sooner</font>

280
00:13:54,530 --> 00:14:01,329
the<font color="#E5E5E5"> B slicer and you may as I said you</font>

281
00:13:58,580 --> 00:14:05,570
may<font color="#E5E5E5"> guess what the slicer does</font>

282
00:14:01,330 --> 00:14:08,390
practically it<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> 11</font><font color="#E5E5E5"> pass as many of</font>

283
00:14:05,570 --> 00:14:12,950
you may have<font color="#E5E5E5"> heard in the first talk or</font>

284
00:14:08,390 --> 00:14:16,189
what a<font color="#CCCCCC"> a DM pass is a pass that lets</font>

285
00:14:12,950 --> 00:14:18,710
<font color="#CCCCCC">that automatically be slices as I said</font>

286
00:14:16,190 --> 00:14:22,340
<font color="#E5E5E5">select the area of the of yours whose</font>

287
00:14:18,710 --> 00:14:25,790
code and I also meant<font color="#E5E5E5"> to add the</font>

288
00:14:22,340 --> 00:14:28,550
<font color="#CCCCCC">possibility to</font><font color="#E5E5E5"> have to manage</font><font color="#CCCCCC"> yourself</font>

289
00:14:25,790 --> 00:14:30,800
some<font color="#CCCCCC"> this last data because the aim of</font>

290
00:14:28,550 --> 00:14:32,689
<font color="#E5E5E5">the B slicer would be to spare you the</font>

291
00:14:30,800 --> 00:14:34,280
need to please<font color="#E5E5E5"> rise</font><font color="#CCCCCC"> your update on</font>

292
00:14:32,690 --> 00:14:36,890
<font color="#CCCCCC">you're arguing</font><font color="#E5E5E5"> that this can be quite</font>

293
00:14:34,280 --> 00:14:39,410
<font color="#CCCCCC">painful because you have to isolate</font><font color="#E5E5E5"> all</font>

294
00:14:36,890 --> 00:14:42,050
<font color="#CCCCCC">the bits</font><font color="#E5E5E5"> and put them in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> proper place</font>

295
00:14:39,410 --> 00:14:45,829
and then you have to transform<font color="#E5E5E5"> a go in</font>

296
00:14:42,050 --> 00:14:50,750
equivalent equivalent<font color="#E5E5E5"> or formal version</font>

297
00:14:45,830 --> 00:14:52,700
and if you do not know how to<font color="#E5E5E5"> do it</font>

298
00:14:50,750 --> 00:14:55,570
properly<font color="#CCCCCC"> you can also end up in mistakes</font>

299
00:14:52,700 --> 00:14:57,890
so we'd like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> provide an automatic</font>

300
00:14:55,570 --> 00:15:01,360
<font color="#E5E5E5">mechanism to do that for you since it's</font>

301
00:14:57,890 --> 00:15:05,180
<font color="#CCCCCC">quite mechanical but from time to time</font>

302
00:15:01,360 --> 00:15:07,660
<font color="#E5E5E5">you may need to do it to manage</font><font color="#CCCCCC"> each</font>

303
00:15:05,180 --> 00:15:12,560
<font color="#CCCCCC">other slice it on your own and then I'll</font>

304
00:15:07,660 --> 00:15:14,329
show<font color="#E5E5E5"> you how it should</font><font color="#CCCCCC"> work so that's</font>

305
00:15:12,560 --> 00:15:17,869
<font color="#E5E5E5">how it should</font><font color="#CCCCCC"> work up</font><font color="#E5E5E5"> we'd like to see</font>

306
00:15:14,330 --> 00:15:22,370
it work with the ultimate and<font color="#E5E5E5"> art way to</font>

307
00:15:17,870 --> 00:15:24,620
be slicing<font color="#E5E5E5"> I mean - I'm</font><font color="#CCCCCC"> saying I mean</font>

308
00:15:22,370 --> 00:15:26,660
<font color="#CCCCCC">because it's still</font><font color="#E5E5E5"> work-in-progress</font><font color="#CCCCCC"> so I</font>

309
00:15:24,620 --> 00:15:29,100
mean to introduce a pragma that takes

310
00:15:26,660 --> 00:15:30,870
for instance as arguments the

311
00:15:29,100 --> 00:15:34,590
<font color="#CCCCCC">that instructors that needed to be a</font>

312
00:15:30,870 --> 00:15:37,590
<font color="#CCCCCC">baby sliced and like encloses the part</font>

313
00:15:34,590 --> 00:15:40,290
of the other code that has to be sliced

314
00:15:37,590 --> 00:15:41,780
and<font color="#E5E5E5"> so that's what will happen from the</font>

315
00:15:40,290 --> 00:15:45,300
previous example

316
00:15:41,780 --> 00:15:49,560
that's the compiler would<font color="#E5E5E5"> create</font><font color="#CCCCCC"> a</font>

317
00:15:45,300 --> 00:15:51,540
<font color="#CCCCCC">second</font><font color="#E5E5E5"> version of the of the code and by</font>

318
00:15:49,560 --> 00:15:56,699
hiding it to you I mean you don't need

319
00:15:51,540 --> 00:15:59,360
to to care<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> and then it does it</font>

320
00:15:56,700 --> 00:15:59,360
automatically

321
00:16:00,080 --> 00:16:06,660
well while about<font color="#E5E5E5"> so the other behavior I</font>

322
00:16:03,690 --> 00:16:09,960
was talking about<font color="#E5E5E5"> so the case in which</font>

323
00:16:06,660 --> 00:16:12,030
we want we need<font color="#E5E5E5"> some</font><font color="#CCCCCC"> B slash data</font><font color="#E5E5E5"> for</font>

324
00:16:09,960 --> 00:16:16,530
instance because our implementation<font color="#E5E5E5"> of</font>

325
00:16:12,030 --> 00:16:20,819
the<font color="#E5E5E5"> block cipher</font><font color="#CCCCCC"> needs us to handle</font>

326
00:16:16,530 --> 00:16:25,980
these<font color="#CCCCCC"> slices on our own it worked this</font>

327
00:16:20,820 --> 00:16:28,650
way we need<font color="#E5E5E5"> to allocate ourselves for</font>

328
00:16:25,980 --> 00:16:31,080
instance an array of slices or the<font color="#E5E5E5"> total</font>

329
00:16:28,650 --> 00:16:35,970
length but it's not so difficult of

330
00:16:31,080 --> 00:16:37,740
course<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we I</font><font color="#CCCCCC"> mean to add a</font>

331
00:16:35,970 --> 00:16:40,950
built-in<font color="#CCCCCC"> function like that</font><font color="#E5E5E5"> they could</font>

332
00:16:37,740 --> 00:16:42,660
<font color="#E5E5E5">take the data you want to be sliced on</font>

333
00:16:40,950 --> 00:16:46,050
<font color="#E5E5E5">there are contained in an array and</font>

334
00:16:42,660 --> 00:16:48,420
array at the<font color="#E5E5E5"> top and then the</font><font color="#CCCCCC"> Aria</font>

335
00:16:46,050 --> 00:16:53,760
slices you want this data to be sliced

336
00:16:48,420 --> 00:16:55,560
into of<font color="#CCCCCC"> course I also mean to to</font><font color="#E5E5E5"> create</font>

337
00:16:53,760 --> 00:16:58,800
some built-in<font color="#CCCCCC"> function</font><font color="#E5E5E5"> that can take</font>

338
00:16:55,560 --> 00:17:01,319
more input distances and put them in a

339
00:16:58,800 --> 00:17:03,839
<font color="#CCCCCC">competent way in a single array of</font>

340
00:17:01,320 --> 00:17:09,350
slices because of the reason you've seen

341
00:17:03,840 --> 00:17:14,490
<font color="#CCCCCC">before for the same systems right now</font>

342
00:17:09,349 --> 00:17:18,750
<font color="#CCCCCC">let's make</font><font color="#E5E5E5"> a step back because be</font>

343
00:17:14,490 --> 00:17:20,280
slicing<font color="#E5E5E5"> my sound wonderful</font><font color="#CCCCCC"> but the</font>

344
00:17:18,750 --> 00:17:22,230
problem is that<font color="#E5E5E5"> it is not because</font><font color="#CCCCCC"> we</font>

345
00:17:20,280 --> 00:17:25,020
<font color="#E5E5E5">don't have to forget the side effects</font>

346
00:17:22,230 --> 00:17:27,240
<font color="#E5E5E5">don't be slicing as you see before this</font>

347
00:17:25,020 --> 00:17:29,970
nice implies an increase<font color="#CCCCCC"> of the</font>

348
00:17:27,240 --> 00:17:31,170
<font color="#E5E5E5">allocated space and those an increase</font>

349
00:17:29,970 --> 00:17:33,930
all<font color="#CCCCCC"> the operations</font><font color="#E5E5E5"> needed to be</font>

350
00:17:31,170 --> 00:17:36,150
performed<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you need to decompose</font>

351
00:17:33,930 --> 00:17:40,560
the data you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> manage the slices</font>

352
00:17:36,150 --> 00:17:42,330
also and as I<font color="#E5E5E5"> said before</font><font color="#CCCCCC"> only some</font>

353
00:17:40,560 --> 00:17:44,100
<font color="#E5E5E5">arguments can</font><font color="#CCCCCC"> be efficiently be sliced</font>

354
00:17:42,330 --> 00:17:46,710
<font color="#CCCCCC">and we are</font><font color="#E5E5E5"> not talking about only</font>

355
00:17:44,100 --> 00:17:49,230
<font color="#E5E5E5">security but also efficiency because</font><font color="#CCCCCC"> Fe</font>

356
00:17:46,710 --> 00:17:51,720
<font color="#CCCCCC">G is an almost not important secure in</font>

357
00:17:49,230 --> 00:17:56,460
<font color="#E5E5E5">most sighters and so we have to consider</font>

358
00:17:51,720 --> 00:18:00,390
also that<font color="#E5E5E5"> aspect so as I said there are</font>

359
00:17:56,460 --> 00:18:02,220
<font color="#E5E5E5">some systems as we seen before</font><font color="#CCCCCC"> our what</font>

360
00:18:00,390 --> 00:18:04,260
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> des because they gain and they</font>

361
00:18:02,220 --> 00:18:08,550
may<font color="#E5E5E5"> gain a lot full foot I will be</font>

362
00:18:04,260 --> 00:18:11,720
<font color="#CCCCCC">slicing</font><font color="#E5E5E5"> and what ciphers they may also</font>

363
00:18:08,550 --> 00:18:14,280
gain the precious feature of the

364
00:18:11,720 --> 00:18:19,670
independence from the input of the

365
00:18:14,280 --> 00:18:22,740
execution time<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so what</font><font color="#CCCCCC"> we gain</font><font color="#E5E5E5"> that</font>

366
00:18:19,670 --> 00:18:24,210
<font color="#E5E5E5">resistance against the tiny side channel</font>

367
00:18:22,740 --> 00:18:34,970
<font color="#E5E5E5">attacks with similar</font><font color="#CCCCCC"> we've seen before</font>

368
00:18:24,210 --> 00:18:37,400
<font color="#CCCCCC">but of</font><font color="#E5E5E5"> course never forget that</font><font color="#CCCCCC"> any</font>

369
00:18:34,970 --> 00:18:40,910
dependency the may occur between the

370
00:18:37,400 --> 00:18:44,820
<font color="#E5E5E5">several bits of the same input distance</font>

371
00:18:40,910 --> 00:18:47,660
<font color="#E5E5E5">may cause a</font><font color="#CCCCCC"> lot of efficiency because</font>

372
00:18:44,820 --> 00:18:51,720
they may prevent you<font color="#CCCCCC"> from processing</font>

373
00:18:47,660 --> 00:18:54,350
<font color="#E5E5E5">several slices in parallel but also</font>

374
00:18:51,720 --> 00:19:00,480
could prevent sometimes also the

375
00:18:54,350 --> 00:19:02,100
<font color="#CCCCCC">mistress transformation and</font><font color="#E5E5E5"> also</font>

376
00:19:00,480 --> 00:19:06,210
remember that's also block cipher<font color="#CCCCCC"> that</font>

377
00:19:02,100 --> 00:19:07,830
look like the best<font color="#CCCCCC"> kindest ever there</font>

378
00:19:06,210 --> 00:19:09,510
might be some implementation of the same

379
00:19:07,830 --> 00:19:11,340
block ciphers<font color="#CCCCCC"> there would not benefit</font>

380
00:19:09,510 --> 00:19:14,670
from<font color="#E5E5E5"> this slicing just because of the</font>

381
00:19:11,340 --> 00:19:17,459
implementation choices<font color="#E5E5E5"> and so that's why</font>

382
00:19:14,670 --> 00:19:20,880
I conclude here by saying that this kind

383
00:19:17,460 --> 00:19:24,930
<font color="#E5E5E5">of tool may be</font><font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> this for this</font>

384
00:19:20,880 --> 00:19:27,330
<font color="#E5E5E5">reason but should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> used very</font><font color="#CCCCCC"> carefully</font>

385
00:19:24,930 --> 00:19:30,510
because if you<font color="#CCCCCC"> are concerned about</font>

386
00:19:27,330 --> 00:19:33,000
efficiency and security<font color="#E5E5E5"> of course you</font>

387
00:19:30,510 --> 00:19:35,610
first you need to understand whether

388
00:19:33,000 --> 00:19:39,420
your block cipher implementation<font color="#E5E5E5"> really</font>

389
00:19:35,610 --> 00:19:41,820
fits it right thank<font color="#E5E5E5"> you for your</font>

390
00:19:39,420 --> 00:19:44,010
patience<font color="#E5E5E5"> and if there are any</font><font color="#CCCCCC"> questions</font>

391
00:19:41,820 --> 00:19:46,830
or suggestions<font color="#CCCCCC"> I really open to</font>

392
00:19:44,010 --> 00:19:49,960
suggestions<font color="#E5E5E5"> please ask</font>

393
00:19:46,830 --> 00:19:49,960
[Applause]

394
00:19:52,460 --> 00:20:14,640
yes please<font color="#CCCCCC"> so it could you and partner</font>

395
00:20:13,049 --> 00:20:17,520
<font color="#CCCCCC">with</font><font color="#E5E5E5"> me repeat the question about sir</font>

396
00:20:14,640 --> 00:20:38,730
you were saying that usually in<font color="#E5E5E5"> Cyprus</font>

397
00:20:17,520 --> 00:20:40,530
see ya so is asking me about the

398
00:20:38,730 --> 00:20:43,190
substitution operation that's in some

399
00:20:40,530 --> 00:20:45,928
<font color="#CCCCCC">broad ciphers happened like in AES</font>

400
00:20:43,190 --> 00:20:49,020
algorithms so the substitution boxes

401
00:20:45,929 --> 00:20:52,169
that are<font color="#E5E5E5"> used to to remove the linearity</font>

402
00:20:49,020 --> 00:20:55,020
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> block cipher itself</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> raise a</font>

403
00:20:52,169 --> 00:20:58,320
<font color="#CCCCCC">very good point</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> they what it is</font>

404
00:20:55,020 --> 00:21:01,350
one<font color="#CCCCCC"> of the first</font><font color="#E5E5E5"> features I was trying</font>

405
00:20:58,320 --> 00:21:03,000
<font color="#E5E5E5">to be slice in the precentral cipher I</font>

406
00:21:01,350 --> 00:21:05,280
don't know if some of<font color="#E5E5E5"> you heard of it</font>

407
00:21:03,000 --> 00:21:10,980
<font color="#E5E5E5">but these are kind of light version of</font>

408
00:21:05,280 --> 00:21:13,830
<font color="#CCCCCC">the AES in that case well just</font><font color="#E5E5E5"> explain</font>

409
00:21:10,980 --> 00:21:16,049
<font color="#CCCCCC">how it works</font><font color="#E5E5E5"> on the plane that's all</font>

410
00:21:13,830 --> 00:21:22,020
that's<font color="#CCCCCC"> around the cipher text anyway</font><font color="#E5E5E5"> has</font>

411
00:21:16,049 --> 00:21:25,168
been encrypted by substituting if<font color="#CCCCCC"> by</font>

412
00:21:22,020 --> 00:21:28,740
<font color="#E5E5E5">weight the</font><font color="#CCCCCC"> values found in</font><font color="#E5E5E5"> in a table</font>

413
00:21:25,169 --> 00:21:34,200
the substitution table<font color="#E5E5E5"> so in this case</font>

414
00:21:28,740 --> 00:21:39,179
you have that you're<font color="#E5E5E5"> just clutching data</font>

415
00:21:34,200 --> 00:21:41,910
from memory actually<font color="#CCCCCC"> I I kind of saw</font>

416
00:21:39,179 --> 00:21:45,330
that issue in the present<font color="#CCCCCC"> law cipher by</font>

417
00:21:41,910 --> 00:21:48,150
implementing those small substitution<font color="#CCCCCC"> s</font>

418
00:21:45,330 --> 00:21:50,668
boxes<font color="#CCCCCC"> aside the substitution tables with</font>

419
00:21:48,150 --> 00:21:53,190
some<font color="#E5E5E5"> logic functions that correspond to</font>

420
00:21:50,669 --> 00:21:54,960
them<font color="#E5E5E5"> you know by using methods like</font>

421
00:21:53,190 --> 00:21:57,000
heard of<font color="#CCCCCC"> the beam tears and</font><font color="#E5E5E5"> the kind of</font>

422
00:21:54,960 --> 00:22:00,690
<font color="#E5E5E5">methods the problem is that in the</font>

423
00:21:57,000 --> 00:22:04,549
<font color="#E5E5E5">present box cipher those</font><font color="#CCCCCC"> S</font><font color="#E5E5E5"> boxes were</font>

424
00:22:00,690 --> 00:22:08,489
<font color="#CCCCCC">quite simple because</font><font color="#E5E5E5"> they were just well</font>

425
00:22:04,549 --> 00:22:10,889
they're just<font color="#CCCCCC"> 60 elements</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> for a</font>

426
00:22:08,489 --> 00:22:16,349
<font color="#E5E5E5">four bits long</font><font color="#CCCCCC"> but a yes use quite</font>

427
00:22:10,889 --> 00:22:18,869
bigger substitution tables<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and also</font>

428
00:22:16,349 --> 00:22:21,629
many other block<font color="#E5E5E5"> ciphers use tables</font><font color="#CCCCCC"> to</font>

429
00:22:18,869 --> 00:22:27,289
do their job<font color="#CCCCCC"> because it's very very more</font>

430
00:22:21,629 --> 00:22:30,738
efficient so well the prom<font color="#E5E5E5"> is still open</font>

431
00:22:27,289 --> 00:22:34,080
<font color="#CCCCCC">as I</font><font color="#E5E5E5"> discussed with</font><font color="#CCCCCC"> Daniel page of the</font>

432
00:22:30,739 --> 00:22:37,200
leather project<font color="#E5E5E5"> it's still rather and</font>

433
00:22:34,080 --> 00:22:39,928
very open because some<font color="#CCCCCC"> of those tables</font>

434
00:22:37,200 --> 00:22:43,889
<font color="#E5E5E5">are</font><font color="#CCCCCC"> hold them</font><font color="#E5E5E5"> actually are based on</font>

435
00:22:39,929 --> 00:23:02,039
complex mathematical calculation<font color="#E5E5E5"> I</font>

436
00:22:43,889 --> 00:23:05,939
<font color="#CCCCCC">studies so it's still very open you're</font>

437
00:23:02,039 --> 00:23:11,039
asking me<font color="#E5E5E5"> whether I use our mixed a form</font>

438
00:23:05,940 --> 00:23:12,479
of I mean in<font color="#CCCCCC"> of</font><font color="#E5E5E5"> case if I be sliced part</font>

439
00:23:11,039 --> 00:23:14,989
of the program and<font color="#E5E5E5"> the other part is</font>

440
00:23:12,479 --> 00:23:14,989
just<font color="#CCCCCC"> table</font>

441
00:23:19,040 --> 00:23:22,099
[Music]

442
00:23:23,560 --> 00:23:29,480
so you<font color="#CCCCCC"> asked about</font><font color="#E5E5E5"> whether I'm using</font>

443
00:23:25,730 --> 00:23:33,410
just<font color="#CCCCCC"> moon operations like and EXO</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> I</font>

444
00:23:29,480 --> 00:23:35,570
use other operations<font color="#CCCCCC"> also</font><font color="#E5E5E5"> you mean to</font>

445
00:23:33,410 --> 00:23:37,990
implement those<font color="#CCCCCC"> s-boxes</font><font color="#E5E5E5"> that's what you</font>

446
00:23:35,570 --> 00:23:37,990
mean<font color="#E5E5E5"> all right</font>

447
00:23:38,530 --> 00:23:46,760
actually I implemented quite<font color="#E5E5E5"> a while ago</font>

448
00:23:41,780 --> 00:23:52,870
<font color="#E5E5E5">almost</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> year ago</font><font color="#CCCCCC"> and actually I</font><font color="#E5E5E5"> think I</font>

449
00:23:46,760 --> 00:23:56,570
used end operations<font color="#E5E5E5"> also right because I</font>

450
00:23:52,870 --> 00:23:58,669
I used the method of the identify the

451
00:23:56,570 --> 00:24:00,950
method<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the minterms you know</font><font color="#CCCCCC"> I just</font>

452
00:23:58,670 --> 00:24:03,200
since there were small<font color="#E5E5E5"> s</font><font color="#CCCCCC"> bosses I just</font>

453
00:24:00,950 --> 00:24:04,700
<font color="#E5E5E5">seen all the outputs and then</font>

454
00:24:03,200 --> 00:24:07,910
implemented them with this<font color="#E5E5E5"> logic</font>

455
00:24:04,700 --> 00:24:10,790
<font color="#E5E5E5">function made of minterms so or</font><font color="#CCCCCC"> an end</font>

456
00:24:07,910 --> 00:24:13,130
operations<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> it's not so</font>

457
00:24:10,790 --> 00:24:14,840
efficient as the problem that's<font color="#E5E5E5"> why also</font>

458
00:24:13,130 --> 00:24:19,630
some of these tables are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> transacting</font>

459
00:24:14,840 --> 00:24:19,629
this way<font color="#E5E5E5"> but at least for that small</font>

460
00:24:42,880 --> 00:24:48,710
right<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> you asked me whether about</font>

461
00:24:46,220 --> 00:24:50,690
an<font color="#E5E5E5"> example which we have an operation</font>

462
00:24:48,710 --> 00:24:54,640
that depends<font color="#E5E5E5"> on the input for the</font>

463
00:24:50,690 --> 00:24:57,560
excretion<font color="#E5E5E5"> time and that it's poured into</font>

464
00:24:54,640 --> 00:24:59,720
what a version equivalent<font color="#E5E5E5"> that is not</font>

465
00:24:57,560 --> 00:25:01,850
<font color="#E5E5E5">dependent on the input well</font>

466
00:24:59,720 --> 00:25:04,760
unfortunately I didn't bring<font color="#E5E5E5"> that kind</font>

467
00:25:01,850 --> 00:25:07,209
<font color="#E5E5E5">of example</font><font color="#CCCCCC"> here and I didn't go</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> far</font>

468
00:25:04,760 --> 00:25:10,240
<font color="#E5E5E5">to transform that kind of things but</font>

469
00:25:07,210 --> 00:25:12,260
just to<font color="#E5E5E5"> let</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know how it works</font>

470
00:25:10,240 --> 00:25:14,870
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> when you</font><font color="#E5E5E5"> have that kind</font><font color="#CCCCCC"> of</font>

471
00:25:12,260 --> 00:25:18,350
operations<font color="#CCCCCC"> that depend on the input</font><font color="#E5E5E5"> you</font>

472
00:25:14,870 --> 00:25:20,750
may choose to implement the equivalent

473
00:25:18,350 --> 00:25:24,560
version<font color="#CCCCCC"> of those without</font><font color="#E5E5E5"> logic functions</font>

474
00:25:20,750 --> 00:25:26,660
were same moment ago and that's<font color="#E5E5E5"> how they</font>

475
00:25:24,560 --> 00:25:28,310
usually do in the papers you read about

476
00:25:26,660 --> 00:25:32,360
it there are several papers on be

477
00:25:28,310 --> 00:25:36,379
slicing<font color="#E5E5E5"> and they for instance for</font>

478
00:25:32,360 --> 00:25:39,429
<font color="#E5E5E5">instance implement disagree inversions</font>

479
00:25:36,380 --> 00:25:43,300
with<font color="#CCCCCC"> longest</font><font color="#E5E5E5"> really long expressions of</font>

480
00:25:39,430 --> 00:25:46,190
atomic operations of the<font color="#E5E5E5"> other bits</font><font color="#CCCCCC"> I</font>

481
00:25:43,300 --> 00:25:48,770
think had put some example out<font color="#CCCCCC"> here</font>

482
00:25:46,190 --> 00:25:50,900
that's quite interesting<font color="#E5E5E5"> because I put a</font>

483
00:25:48,770 --> 00:25:56,600
<font color="#E5E5E5">couple of links of a couple of papers</font>

484
00:25:50,900 --> 00:26:00,620
<font color="#E5E5E5">first</font><font color="#CCCCCC"> one actually</font><font color="#E5E5E5"> is about the slice</font>

485
00:25:56,600 --> 00:26:02,270
version of the AES algorithm and<font color="#CCCCCC"> that</font>

486
00:26:00,620 --> 00:26:04,370
Squatch interest<font color="#CCCCCC"> at sea to see how they</font>

487
00:26:02,270 --> 00:26:06,790
saw that and the<font color="#E5E5E5"> kind of problems we</font>

488
00:26:04,370 --> 00:26:11,709
<font color="#CCCCCC">were talking</font><font color="#E5E5E5"> about I want to go but as a</font>

489
00:26:06,790 --> 00:26:30,200
if I remember well<font color="#E5E5E5"> they use a lot of</font>

490
00:26:11,710 --> 00:26:33,440
logic<font color="#CCCCCC"> functions like that well it's</font><font color="#E5E5E5"> okay</font>

491
00:26:30,200 --> 00:26:36,410
<font color="#E5E5E5">you asked me what</font><font color="#CCCCCC"> about or if I have non</font>

492
00:26:33,440 --> 00:26:38,000
multiplication or on an addition<font color="#E5E5E5"> or a</font>

493
00:26:36,410 --> 00:26:41,390
subtraction division<font color="#E5E5E5"> or that kind of</font>

494
00:26:38,000 --> 00:26:44,540
stuff<font color="#CCCCCC"> I think it is just about shock</font>

495
00:26:41,390 --> 00:26:46,670
compromise I mean whether<font color="#E5E5E5"> you prefer to</font>

496
00:26:44,540 --> 00:26:48,530
lose<font color="#E5E5E5"> a little efficiency just not</font><font color="#CCCCCC"> you</font>

497
00:26:46,670 --> 00:26:51,980
have to transfer completely your block

498
00:26:48,530 --> 00:26:58,100
cipher because<font color="#E5E5E5"> actually your security</font>

499
00:26:51,980 --> 00:27:00,380
needs<font color="#CCCCCC"> quite anyway or whether you</font><font color="#E5E5E5"> are</font>

500
00:26:58,100 --> 00:27:03,679
you are willing<font color="#E5E5E5"> to do it and transform</font>

501
00:27:00,380 --> 00:27:05,960
<font color="#E5E5E5">into completely because there are some</font>

502
00:27:03,680 --> 00:27:08,180
<font color="#E5E5E5">abstractions on implementation of those</font>

503
00:27:05,960 --> 00:27:10,220
operations<font color="#CCCCCC"> that are a little more</font>

504
00:27:08,180 --> 00:27:12,020
efficient for<font color="#E5E5E5"> this purpose but of course</font>

505
00:27:10,220 --> 00:27:16,070
there's<font color="#CCCCCC"> still dependency forcing</font><font color="#E5E5E5"> the</font>

506
00:27:12,020 --> 00:27:17,660
addition of<font color="#E5E5E5"> the carry and the stuff so</font>

507
00:27:16,070 --> 00:27:19,879
that kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> dependency</font><font color="#E5E5E5"> cannot be</font>

508
00:27:17,660 --> 00:27:22,220
completely avoid it but<font color="#E5E5E5"> at least can be</font>

509
00:27:19,880 --> 00:27:24,230
<font color="#E5E5E5">improved</font><font color="#CCCCCC"> with the particular</font>

510
00:27:22,220 --> 00:27:26,180
implementation of<font color="#CCCCCC"> that algorithm but if</font>

511
00:27:24,230 --> 00:27:28,730
you want to<font color="#E5E5E5"> change completely</font><font color="#CCCCCC"> your box</font>

512
00:27:26,180 --> 00:27:29,900
either because you<font color="#E5E5E5"> think that the</font><font color="#CCCCCC"> u.s.</font>

513
00:27:28,730 --> 00:27:32,560
security oversight wouldn't be

514
00:27:29,900 --> 00:27:35,860
compromised by that

515
00:27:32,560 --> 00:27:48,570
could be your<font color="#E5E5E5"> your choice I mean yeah if</font>

516
00:27:35,860 --> 00:28:20,889
that<font color="#E5E5E5"> answer your question yeah you mean</font>

517
00:27:48,570 --> 00:28:23,909
with a multiple input or no so you are

518
00:28:20,890 --> 00:28:27,310
suggesting that's why<font color="#E5E5E5"> using</font><font color="#CCCCCC"> this</font>

519
00:28:23,910 --> 00:28:30,370
function<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you remain</font><font color="#CCCCCC"> but from the</font>

520
00:28:27,310 --> 00:28:35,500
transformation<font color="#CCCCCC"> of the of the data</font><font color="#E5E5E5"> right</font>

521
00:28:30,370 --> 00:28:38,560
<font color="#E5E5E5">you made this time right well yeah</font>

522
00:28:35,500 --> 00:28:40,630
that's true<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean one of the warnings I</font>

523
00:28:38,560 --> 00:28:42,730
like to include<font color="#E5E5E5"> and when in the</font>

524
00:28:40,630 --> 00:28:44,710
instruction<font color="#E5E5E5"> of this tool is</font><font color="#CCCCCC"> to be</font>

525
00:28:42,730 --> 00:28:46,000
<font color="#E5E5E5">careful about how many times you do</font>

526
00:28:44,710 --> 00:28:48,580
something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> because every time</font>

527
00:28:46,000 --> 00:28:49,870
you do it<font color="#E5E5E5"> you lose time for the</font>

528
00:28:48,580 --> 00:28:51,159
transformation that<font color="#E5E5E5"> said they compile</font>

529
00:28:49,870 --> 00:28:54,399
<font color="#E5E5E5">we're introducing it in the</font><font color="#CCCCCC"> program of</font>

530
00:28:51,160 --> 00:28:55,320
course<font color="#E5E5E5"> and so to suggest would be to do</font>

531
00:28:54,400 --> 00:28:57,970
it<font color="#E5E5E5"> carefully</font>

532
00:28:55,320 --> 00:29:06,460
<font color="#CCCCCC">and then you ask</font><font color="#E5E5E5"> me about any trick to</font>

533
00:28:57,970 --> 00:29:08,470
<font color="#CCCCCC">do the same thing</font><font color="#E5E5E5"> more quickly right so</font>

534
00:29:06,460 --> 00:29:09,670
you probably<font color="#E5E5E5"> are talking about</font><font color="#CCCCCC"> an</font>

535
00:29:08,470 --> 00:29:13,060
implementation the<font color="#CCCCCC"> phone in the</font>

536
00:29:09,670 --> 00:29:15,790
<font color="#CCCCCC">beginning is already say bit less</font>

537
00:29:13,060 --> 00:29:20,710
oriented right so yeah that's possible

538
00:29:15,790 --> 00:29:22,960
<font color="#E5E5E5">of course but that's really possible</font><font color="#CCCCCC"> and</font>

539
00:29:20,710 --> 00:29:27,100
<font color="#E5E5E5">I suggest if you know what you're doing</font>

540
00:29:22,960 --> 00:29:29,350
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> yeah because</font><font color="#CCCCCC"> what I was telling</font>

541
00:29:27,100 --> 00:29:34,510
about<font color="#E5E5E5"> this tool is that it aims at</font>

542
00:29:29,350 --> 00:29:38,879
sparing you this kind of work or<font color="#CCCCCC"> spare</font>

543
00:29:34,510 --> 00:29:38,879
you the need to you know be<font color="#E5E5E5"> too much</font>

544
00:29:58,920 --> 00:30:06,840
right so you're<font color="#E5E5E5"> suggesting to simply</font>

545
00:30:03,310 --> 00:30:08,550
<font color="#E5E5E5">adopt a</font><font color="#CCCCCC"> different way to access the data</font>

546
00:30:06,840 --> 00:30:11,230
yeah

547
00:30:08,550 --> 00:30:14,500
so for<font color="#E5E5E5"> instance you're suggesting that</font>

548
00:30:11,230 --> 00:30:17,820
<font color="#E5E5E5">we might instead of using this function</font>

549
00:30:14,500 --> 00:30:21,000
<font color="#E5E5E5">we might access the bits of the array</font>

550
00:30:17,820 --> 00:30:26,110
called<font color="#E5E5E5"> array sorry for this example and</font>

551
00:30:21,000 --> 00:30:29,620
properly<font color="#CCCCCC"> directly in a proper way</font><font color="#E5E5E5"> just</font>

552
00:30:26,110 --> 00:30:29,949
to<font color="#E5E5E5"> avoid transformation yeah oh yes of</font>

553
00:30:29,620 --> 00:30:32,189
course

554
00:30:29,950 --> 00:30:34,780
I mean some<font color="#CCCCCC"> implantation already do that</font>

555
00:30:32,190 --> 00:30:38,460
<font color="#CCCCCC">definition that I still don't need my</font>

556
00:30:34,780 --> 00:30:42,190
tool<font color="#E5E5E5"> already</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> road</font><font color="#E5E5E5"> but yet</font>

557
00:30:38,460 --> 00:30:46,870
<font color="#E5E5E5">again that that case which already some</font>

558
00:30:42,190 --> 00:30:48,880
people<font color="#CCCCCC"> just</font><font color="#E5E5E5"> prefer start will be slicing</font>

559
00:30:46,870 --> 00:30:52,929
by using a tool that's already<font color="#CCCCCC"> there for</font>

560
00:30:48,880 --> 00:30:55,140
<font color="#E5E5E5">you of</font><font color="#CCCCCC"> course</font><font color="#E5E5E5"> any more efficient choice</font>

561
00:30:52,930 --> 00:30:59,880
<font color="#E5E5E5">is of course preferable to that one yeah</font>

562
00:30:55,140 --> 00:30:59,880
is<font color="#E5E5E5"> that answer your questions right</font>

563
00:31:00,090 --> 00:31:07,020
<font color="#CCCCCC">another question or suggestion right</font>

564
00:31:04,030 --> 00:31:07,020
<font color="#E5E5E5">okay thank you</font>

