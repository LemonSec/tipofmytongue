1
00:00:05,359 --> 00:00:09,090
so continuing<font color="#E5E5E5"> this part of lightning</font>

2
00:00:07,740 --> 00:00:11,070
talks where we talk<font color="#E5E5E5"> about Apache</font>

3
00:00:09,090 --> 00:00:14,260
Software Foundation<font color="#E5E5E5"> projects is</font>

4
00:00:11,070 --> 00:00:17,610
Alexander<font color="#CCCCCC"> B Zubov</font><font color="#E5E5E5"> who will be talking</font>

5
00:00:14,260 --> 00:00:17,610
visualization<font color="#CCCCCC"> of Big Data</font>

6
00:00:23,090 --> 00:00:29,550
and test it<font color="#E5E5E5"> just hey hey</font>

7
00:00:25,880 --> 00:00:31,619
okay Kenny here<font color="#E5E5E5"> okay so I think it's a</font>

8
00:00:29,550 --> 00:00:34,710
bit different<font color="#E5E5E5"> from what</font><font color="#CCCCCC"> German</font><font color="#E5E5E5"> has</font>

9
00:00:31,619 --> 00:00:36,750
announced<font color="#E5E5E5"> so I used to work on</font>

10
00:00:34,710 --> 00:00:38,489
<font color="#CCCCCC">visualization for</font><font color="#E5E5E5"> big data but this</font>

11
00:00:36,750 --> 00:00:40,379
particular<font color="#E5E5E5"> talk is about tools for</font>

12
00:00:38,489 --> 00:00:42,599
<font color="#E5E5E5">large-scale collection and analysis of</font>

13
00:00:40,379 --> 00:00:44,129
source code repositories<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

14
00:00:42,600 --> 00:00:46,230
<font color="#E5E5E5">something I've been working</font><font color="#CCCCCC"> on and last</font>

15
00:00:44,129 --> 00:00:48,030
<font color="#E5E5E5">half-year and that's exciting and even</font>

16
00:00:46,230 --> 00:00:51,209
maybe more exciting<font color="#E5E5E5"> than visualization</font>

17
00:00:48,030 --> 00:00:54,149
<font color="#E5E5E5">part so my name</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Alex and well I'm</font>

18
00:00:51,210 --> 00:00:56,399
engineer at sourced and also<font color="#E5E5E5"> a</font><font color="#CCCCCC"> committer</font>

19
00:00:54,149 --> 00:00:57,810
<font color="#E5E5E5">and</font><font color="#CCCCCC"> PMC the patches open</font><font color="#E5E5E5"> source is a</font>

20
00:00:56,399 --> 00:01:00,030
<font color="#E5E5E5">start-up in Madrid</font><font color="#CCCCCC"> that I joined</font>

21
00:00:57,810 --> 00:01:01,920
recently<font color="#E5E5E5"> it's very cool and all the</font>

22
00:01:00,030 --> 00:01:04,559
<font color="#E5E5E5">things that we work on there are open</font>

23
00:01:01,920 --> 00:01:07,830
<font color="#CCCCCC">source so</font><font color="#E5E5E5"> and I'm going to talk</font><font color="#CCCCCC"> about</font>

24
00:01:04,559 --> 00:01:11,610
some tools that I built my colleagues

25
00:01:07,830 --> 00:01:14,720
built during the daytime job<font color="#E5E5E5"> so while we</font>

26
00:01:11,610 --> 00:01:17,130
collect a<font color="#E5E5E5"> lot of source code but why and</font>

27
00:01:14,720 --> 00:01:20,369
so it's twofold one it's the research

28
00:01:17,130 --> 00:01:23,220
material<font color="#CCCCCC"> for</font><font color="#E5E5E5"> academia and two it's the</font>

29
00:01:20,369 --> 00:01:25,860
fuel for<font color="#CCCCCC"> data-driven products on top</font><font color="#E5E5E5"> of</font>

30
00:01:23,220 --> 00:01:29,340
the source<font color="#E5E5E5"> code and it's kind of rapidly</font>

31
00:01:25,860 --> 00:01:32,330
evolving area<font color="#CCCCCC"> of building</font><font color="#E5E5E5"> better tooling</font>

32
00:01:29,340 --> 00:01:34,799
to write programs so it's quite<font color="#CCCCCC"> exciting</font>

33
00:01:32,330 --> 00:01:35,760
<font color="#CCCCCC">but</font><font color="#E5E5E5"> first you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get the data and</font>

34
00:01:34,799 --> 00:01:38,610
that's<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to talk about</font>

35
00:01:35,760 --> 00:01:41,580
<font color="#CCCCCC">it's open source pipeline that you can</font>

36
00:01:38,610 --> 00:01:43,530
use on premises<font color="#E5E5E5"> to collect a</font><font color="#CCCCCC"> lot of git</font>

37
00:01:41,580 --> 00:01:45,560
repositories because well it's the<font color="#CCCCCC"> most</font>

38
00:01:43,530 --> 00:01:48,180
popular version<font color="#E5E5E5"> control system and</font>

39
00:01:45,560 --> 00:01:50,430
that's the source of truth<font color="#E5E5E5"> both source</font>

40
00:01:48,180 --> 00:01:52,590
code and the collection pipeline is

41
00:01:50,430 --> 00:01:55,140
pretty standard<font color="#CCCCCC"> like who</font><font color="#E5E5E5"> better crowler</font>

42
00:01:52,590 --> 00:01:57,890
<font color="#E5E5E5">a distributed storage and the parallel</font>

43
00:01:55,140 --> 00:02:00,180
<font color="#CCCCCC">processing so after you store that</font>

44
00:01:57,890 --> 00:02:02,640
<font color="#E5E5E5">probably you want to go through that and</font>

45
00:02:00,180 --> 00:02:04,979
figure<font color="#E5E5E5"> something out</font><font color="#CCCCCC"> so we'll briefly go</font>

46
00:02:02,640 --> 00:02:06,659
through the tech stack and what the

47
00:02:04,979 --> 00:02:07,798
takeaway<font color="#CCCCCC"> of this talk is that if you</font>

48
00:02:06,659 --> 00:02:09,509
interested<font color="#CCCCCC"> in a large scale data</font>

49
00:02:07,799 --> 00:02:11,459
collection there are awesome existing

50
00:02:09,508 --> 00:02:13,200
open source<font color="#E5E5E5"> tools and there are some new</font>

51
00:02:11,459 --> 00:02:16,440
ones<font color="#CCCCCC"> that I wanted</font><font color="#E5E5E5"> to share today</font>

52
00:02:13,200 --> 00:02:18,660
so things that<font color="#CCCCCC"> have</font><font color="#E5E5E5"> red or gray boxes</font>

53
00:02:16,440 --> 00:02:21,989
around<font color="#E5E5E5"> are the things that we build a</font>

54
00:02:18,660 --> 00:02:24,900
source but<font color="#E5E5E5"> we've got to go through all</font>

55
00:02:21,989 --> 00:02:26,519
this tech one by one and to run the

56
00:02:24,900 --> 00:02:28,530
software well you need some hardware and

57
00:02:26,519 --> 00:02:31,019
then it's the structure side we have a

58
00:02:28,530 --> 00:02:33,299
dedicated cluster with which is I think

59
00:02:31,019 --> 00:02:34,950
kind<font color="#E5E5E5"> of called the immutable</font>

60
00:02:33,299 --> 00:02:37,500
infrastructure<font color="#CCCCCC"> these days so there's</font>

61
00:02:34,950 --> 00:02:39,630
basically<font color="#E5E5E5"> machines that up from boot</font>

62
00:02:37,500 --> 00:02:41,910
<font color="#E5E5E5">provisioned with Korres and they</font>

63
00:02:39,630 --> 00:02:43,350
eventually become<font color="#E5E5E5"> a part of a kubernetes</font>

64
00:02:41,910 --> 00:02:46,530
cluster where you can schedule<font color="#E5E5E5"> your</font>

65
00:02:43,350 --> 00:02:48,930
application on so it's very nice<font color="#E5E5E5"> and</font>

66
00:02:46,530 --> 00:02:50,549
automated<font color="#CCCCCC"> there's going to be</font><font color="#E5E5E5"> detailed</font>

67
00:02:48,930 --> 00:02:53,400
talk about that in configuration

68
00:02:50,549 --> 00:02:55,290
<font color="#E5E5E5">management camp on Tuesday in</font><font color="#CCCCCC"> camp if</font>

69
00:02:53,400 --> 00:02:58,680
somebody up for<font color="#CCCCCC"> learning more details</font>

70
00:02:55,290 --> 00:03:00,750
about<font color="#CCCCCC"> infrastructure part</font><font color="#E5E5E5"> on the</font>

71
00:02:58,680 --> 00:03:04,650
collection<font color="#CCCCCC"> part</font><font color="#E5E5E5"> so look at machines we</font>

72
00:03:00,750 --> 00:03:05,910
want to get some<font color="#CCCCCC"> neat repositories</font><font color="#E5E5E5"> so it</font>

73
00:03:04,650 --> 00:03:08,010
consists of two<font color="#E5E5E5"> parts</font>

74
00:03:05,910 --> 00:03:10,948
getting the<font color="#E5E5E5"> URLs</font><font color="#CCCCCC"> to that repositories</font>

75
00:03:08,010 --> 00:03:13,679
and then basically cloning them and well

76
00:03:10,949 --> 00:03:15,000
they will focus<font color="#E5E5E5"> on git and that's the</font>

77
00:03:13,680 --> 00:03:18,150
most<font color="#E5E5E5"> popular</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> so we need to talk</font>

78
00:03:15,000 --> 00:03:20,760
get language<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> we</font>

79
00:03:18,150 --> 00:03:22,980
implemented<font color="#E5E5E5"> custom implementation of the</font>

80
00:03:20,760 --> 00:03:24,840
git protocol format and storage format

81
00:03:22,980 --> 00:03:27,510
called<font color="#E5E5E5"> good get and was</font><font color="#CCCCCC"> a talk</font><font color="#E5E5E5"> about it</font>

82
00:03:24,840 --> 00:03:30,570
last<font color="#E5E5E5"> year and it's written</font><font color="#CCCCCC"> goal language</font>

83
00:03:27,510 --> 00:03:33,858
<font color="#E5E5E5">that room it's a pure go implementation</font>

84
00:03:30,570 --> 00:03:36,510
one of the big<font color="#E5E5E5"> five validation of kit</font>

85
00:03:33,859 --> 00:03:38,250
it's very extensible and it's

86
00:03:36,510 --> 00:03:40,108
interesting<font color="#E5E5E5"> you can do a lot of things</font>

87
00:03:38,250 --> 00:03:43,139
like store things in memory<font color="#E5E5E5"> when you</font>

88
00:03:40,109 --> 00:03:45,660
<font color="#E5E5E5">want to or add custom protocols or store</font>

89
00:03:43,139 --> 00:03:49,699
things<font color="#E5E5E5"> in</font><font color="#CCCCCC"> database if</font><font color="#E5E5E5"> you want to so</font>

90
00:03:45,660 --> 00:03:53,609
that's something we use for<font color="#CCCCCC"> cloning part</font>

91
00:03:49,699 --> 00:03:55,709
and then they're two separate<font color="#CCCCCC"> programs</font>

92
00:03:53,609 --> 00:03:57,389
one<font color="#CCCCCC"> is to find</font><font color="#E5E5E5"> the URL so they get</font>

93
00:03:55,709 --> 00:04:00,859
repositories and store them<font color="#CCCCCC"> in database</font>

94
00:03:57,389 --> 00:04:04,519
and second one to schedule<font color="#E5E5E5"> their cloning</font>

95
00:04:00,859 --> 00:04:07,049
this called<font color="#E5E5E5"> rubbers and bogus parts and</font>

96
00:04:04,519 --> 00:04:09,299
well there's hundreds of<font color="#E5E5E5"> millions</font>

97
00:04:07,049 --> 00:04:10,949
I get repositories<font color="#E5E5E5"> so we want to be</font>

98
00:04:09,299 --> 00:04:12,870
space efficient and there's some nice

99
00:04:10,949 --> 00:04:14,579
<font color="#E5E5E5">tricks you can do like store Forks</font>

100
00:04:12,870 --> 00:04:16,590
<font color="#E5E5E5">together and single git repository</font>

101
00:04:14,579 --> 00:04:19,530
<font color="#CCCCCC">because you have an extensible gift</font>

102
00:04:16,589 --> 00:04:21,750
library<font color="#E5E5E5"> and that's the concept of rooted</font>

103
00:04:19,529 --> 00:04:24,059
requester is depicted in<font color="#E5E5E5"> the middle so</font>

104
00:04:21,750 --> 00:04:25,830
<font color="#E5E5E5">basically replaces the store history and</font>

105
00:04:24,060 --> 00:04:28,560
start with<font color="#CCCCCC"> their initial commit to the</font>

106
00:04:25,830 --> 00:04:33,180
same hash gets stored in very<font color="#CCCCCC"> single big</font>

107
00:04:28,560 --> 00:04:34,860
repository<font color="#E5E5E5"> which is works really nice</font><font color="#CCCCCC"> so</font>

108
00:04:33,180 --> 00:04:35,520
<font color="#E5E5E5">well you collected URLs and you</font>

109
00:04:34,860 --> 00:04:37,050
<font color="#CCCCCC">collected</font>

110
00:04:35,520 --> 00:04:39,000
get your posters most probably<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

111
00:04:37,050 --> 00:04:41,300
store<font color="#CCCCCC"> that somewhere</font><font color="#E5E5E5"> and it's got to be</font>

112
00:04:39,000 --> 00:04:44,810
distributed<font color="#CCCCCC"> so on URL</font>

113
00:04:41,300 --> 00:04:47,419
it's just<font color="#E5E5E5"> a Postgres database</font><font color="#CCCCCC"> we wrote</font>

114
00:04:44,810 --> 00:04:49,099
custom<font color="#E5E5E5"> your Auriemma implementation and</font>

115
00:04:47,419 --> 00:04:52,250
<font color="#E5E5E5">go which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> type safe and quite nice</font>

116
00:04:49,099 --> 00:04:55,789
<font color="#E5E5E5">called calyx and for a poster</font><font color="#CCCCCC"> Heidi's</font>

117
00:04:52,250 --> 00:04:57,949
<font color="#CCCCCC">HDFS which works</font><font color="#E5E5E5"> very well but it scales</font>

118
00:04:55,789 --> 00:04:59,560
linearly with<font color="#CCCCCC"> a number of files</font><font color="#E5E5E5"> in it so</font>

119
00:04:57,949 --> 00:05:01,759
you want to minimize number of files

120
00:04:59,560 --> 00:05:04,610
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> how we do it with custom</font>

121
00:05:01,759 --> 00:05:06,770
archive format implementation<font color="#CCCCCC"> so every</font>

122
00:05:04,610 --> 00:05:09,770
route<font color="#E5E5E5"> to three boys three end up being</font>

123
00:05:06,770 --> 00:05:11,628
in a single file inside database this<font color="#CCCCCC"> is</font>

124
00:05:09,770 --> 00:05:13,310
<font color="#CCCCCC">the example</font><font color="#E5E5E5"> of custom archive</font>

125
00:05:11,629 --> 00:05:16,819
implementation called<font color="#CCCCCC"> Siva</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> secure</font>

126
00:05:13,310 --> 00:05:19,370
<font color="#CCCCCC">and able and indexed format so it's</font>

127
00:05:16,819 --> 00:05:21,560
<font color="#E5E5E5">water based and this way you can fit</font>

128
00:05:19,370 --> 00:05:24,860
your<font color="#E5E5E5"> poster once and then append it</font>

129
00:05:21,560 --> 00:05:31,610
after new clones or fetches happen and

130
00:05:24,860 --> 00:05:33,259
sold stored in HDFS so when after<font color="#E5E5E5"> it</font>

131
00:05:31,610 --> 00:05:36,770
gets<font color="#E5E5E5"> stored you want to protest it</font>

132
00:05:33,259 --> 00:05:39,080
somehow<font color="#E5E5E5"> and well</font><font color="#CCCCCC"> apache spark</font><font color="#E5E5E5"> is a good</font>

133
00:05:36,770 --> 00:05:41,448
way to do batch processing and on<font color="#CCCCCC"> a</font>

134
00:05:39,080 --> 00:05:43,430
<font color="#E5E5E5">cluster</font><font color="#CCCCCC"> of machines barkas go is is</font>

135
00:05:41,449 --> 00:05:45,830
something<font color="#E5E5E5"> useful people understand and</font>

136
00:05:43,430 --> 00:05:48,139
and know how to do and we do custom

137
00:05:45,830 --> 00:05:50,690
library to expose those git repositories

138
00:05:48,139 --> 00:05:54,469
to<font color="#CCCCCC"> the SPARC API level it's called</font>

139
00:05:50,690 --> 00:05:56,719
<font color="#E5E5E5">ensign and well it exposes references</font>

140
00:05:54,469 --> 00:05:59,990
commits files and so<font color="#CCCCCC"> on in</font><font color="#E5E5E5"> spark</font>

141
00:05:56,719 --> 00:06:03,500
language be that Python or scholar which

142
00:05:59,990 --> 00:06:05,449
is super nice<font color="#CCCCCC"> and it talks through jpc</font>

143
00:06:03,500 --> 00:06:07,250
interfaces to more advanced stages of

144
00:06:05,449 --> 00:06:09,710
analysis<font color="#E5E5E5"> of the source code if you want</font>

145
00:06:07,250 --> 00:06:11,750
to do that<font color="#E5E5E5"> here's example of usage of</font>

146
00:06:09,710 --> 00:06:14,960
<font color="#CCCCCC">that library I'm not sure if you can</font><font color="#E5E5E5"> see</font>

147
00:06:11,750 --> 00:06:16,430
that<font color="#CCCCCC"> it's you can extract with a simple</font>

148
00:06:14,960 --> 00:06:19,388
<font color="#CCCCCC">pipeline like that you express the</font>

149
00:06:16,430 --> 00:06:21,560
extraction of<font color="#E5E5E5"> Francis taking they had</font>

150
00:06:19,389 --> 00:06:24,669
<font color="#E5E5E5">reference and then getting all the files</font>

151
00:06:21,560 --> 00:06:26,960
and<font color="#E5E5E5"> for every file do something like</font>

152
00:06:24,669 --> 00:06:29,448
<font color="#E5E5E5">detective language and so on which is</font>

153
00:06:26,960 --> 00:06:30,919
<font color="#E5E5E5">quite concise and really great that both</font>

154
00:06:29,449 --> 00:06:33,680
engineers and machine<font color="#CCCCCC"> learning people</font>

155
00:06:30,919 --> 00:06:39,710
can use that<font color="#CCCCCC"> because</font><font color="#E5E5E5"> there is Python and</font>

156
00:06:33,680 --> 00:06:41,180
scholar IP<font color="#E5E5E5"> is for that and well</font><font color="#CCCCCC"> after</font>

157
00:06:39,710 --> 00:06:42,620
just iterating through files<font color="#E5E5E5"> most</font>

158
00:06:41,180 --> 00:06:45,110
probably<font color="#E5E5E5"> want to do some more advanced</font>

159
00:06:42,620 --> 00:06:47,719
stuff<font color="#E5E5E5"> and there are two projects on</font>

160
00:06:45,110 --> 00:06:49,849
beside that<font color="#CCCCCC"> do have build one is enry</font>

161
00:06:47,719 --> 00:06:51,620
which is a programming language detector

162
00:06:49,849 --> 00:06:53,659
<font color="#E5E5E5">it's kind of</font>

163
00:06:51,620 --> 00:06:56,389
right parts of the github linguist<font color="#E5E5E5"> is</font>

164
00:06:53,660 --> 00:06:58,040
the thing in Ruby<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it have you sit</font>

165
00:06:56,389 --> 00:06:59,570
it shows you the distribution<font color="#E5E5E5"> of</font>

166
00:06:58,040 --> 00:07:02,540
languages on top of your repositories

167
00:06:59,570 --> 00:07:04,370
<font color="#CCCCCC">one that we use</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> an NGO there is</font>

168
00:07:02,540 --> 00:07:06,020
compatible with<font color="#E5E5E5"> a linguist and this</font>

169
00:07:04,370 --> 00:07:08,120
faster

170
00:07:06,020 --> 00:07:10,070
<font color="#E5E5E5">you're basically from</font><font color="#CCCCCC"> four to twenty</font>

171
00:07:08,120 --> 00:07:13,550
times<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> on our measurements then</font>

172
00:07:10,070 --> 00:07:15,409
then original<font color="#CCCCCC"> Ruby one and another</font><font color="#E5E5E5"> one</font>

173
00:07:13,550 --> 00:07:19,639
is project<font color="#E5E5E5"> Babel Fish which is a bit</font>

174
00:07:15,410 --> 00:07:22,639
different<font color="#E5E5E5"> because well first it's it's</font>

175
00:07:19,639 --> 00:07:24,530
scalable parser infrastructure so it

176
00:07:22,639 --> 00:07:26,240
drops native parsers and<font color="#CCCCCC"> fat inside</font>

177
00:07:24,530 --> 00:07:28,849
containers that<font color="#E5E5E5"> you can schedule across</font>

178
00:07:26,240 --> 00:07:31,699
<font color="#E5E5E5">the cluster and that exposes</font><font color="#CCCCCC"> uniforms</font>

179
00:07:28,850 --> 00:07:33,979
<font color="#CCCCCC">ERP C API</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that way you can extract a</font>

180
00:07:31,699 --> 00:07:36,470
lot of information from the<font color="#E5E5E5"> source code</font>

181
00:07:33,979 --> 00:07:38,419
in very uniform fashion<font color="#E5E5E5"> and it has</font>

182
00:07:36,470 --> 00:07:41,210
drivers<font color="#E5E5E5"> for many different languages and</font>

183
00:07:38,419 --> 00:07:43,370
something called<font color="#E5E5E5"> universal AB 1663 which</font>

184
00:07:41,210 --> 00:07:45,770
is native syntax tree of the language

185
00:07:43,370 --> 00:07:47,600
<font color="#E5E5E5">annotated</font><font color="#CCCCCC"> with some language independent</font>

186
00:07:45,770 --> 00:07:54,320
things that you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> be interested</font><font color="#E5E5E5"> in</font>

187
00:07:47,600 --> 00:07:56,690
<font color="#E5E5E5">on</font><font color="#CCCCCC"> their later analysis stages and well</font>

188
00:07:54,320 --> 00:07:58,430
that's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> high-level overview and there</font>

189
00:07:56,690 --> 00:08:00,910
are some future things that<font color="#E5E5E5"> we want to</font>

190
00:07:58,430 --> 00:08:03,919
get<font color="#E5E5E5"> done for</font><font color="#CCCCCC"> example on kubernetes side</font>

191
00:08:00,910 --> 00:08:06,680
having bare-metal cluster and<font color="#E5E5E5"> persisting</font>

192
00:08:03,919 --> 00:08:10,400
storage is not not<font color="#E5E5E5"> really easy thing to</font>

193
00:08:06,680 --> 00:08:12,139
make on the collection side<font color="#E5E5E5"> there's a</font>

194
00:08:10,400 --> 00:08:14,719
concept of<font color="#CCCCCC"> staged event-driven</font>

195
00:08:12,139 --> 00:08:16,520
architecture<font color="#CCCCCC"> it's a paper published</font><font color="#E5E5E5"> by</font>

196
00:08:14,720 --> 00:08:17,960
Google<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> about how to make a</font>

197
00:08:16,520 --> 00:08:20,900
scalable<font color="#CCCCCC"> system that dynamically</font>

198
00:08:17,960 --> 00:08:23,330
saturate<font color="#E5E5E5"> the some resources by having</font>

199
00:08:20,900 --> 00:08:25,969
queues in between the stages<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

200
00:08:23,330 --> 00:08:29,570
very interesting<font color="#E5E5E5"> if you want to do</font>

201
00:08:25,970 --> 00:08:31,070
<font color="#CCCCCC">called</font><font color="#E5E5E5"> 100 million of repositories</font><font color="#CCCCCC"> on</font>

202
00:08:29,570 --> 00:08:33,049
the processing side we're looking into

203
00:08:31,070 --> 00:08:37,458
<font color="#CCCCCC">editing distributed indexes to speed up</font>

204
00:08:33,049 --> 00:08:39,588
<font color="#CCCCCC">APIs park</font><font color="#E5E5E5"> queries that we have and on</font>

205
00:08:37,458 --> 00:08:41,989
<font color="#CCCCCC">analysis part or advanced things like</font>

206
00:08:39,589 --> 00:08:44,720
how do you<font color="#CCCCCC"> default a strict syntax tree</font>

207
00:08:41,990 --> 00:08:46,910
or how do you<font color="#E5E5E5"> sir cross language</font>

208
00:08:44,720 --> 00:08:48,560
<font color="#CCCCCC">information from abstract syntax tree</font>

209
00:08:46,910 --> 00:08:53,410
<font color="#E5E5E5">which we are</font><font color="#CCCCCC"> looking at in a</font><font color="#E5E5E5"> Babel Fish</font>

210
00:08:48,560 --> 00:08:53,410
project but it

211
00:08:56,620 --> 00:09:14,709
any questions right<font color="#CCCCCC"> so that's the</font>

212
00:09:12,110 --> 00:09:16,850
<font color="#CCCCCC">question was do</font><font color="#E5E5E5"> we look at the</font><font color="#CCCCCC"> red knees</font>

213
00:09:14,709 --> 00:09:19,160
<font color="#CCCCCC">so the thing is</font><font color="#E5E5E5"> the collection pipeline</font>

214
00:09:16,850 --> 00:09:21,290
I described<font color="#CCCCCC"> is generic</font><font color="#E5E5E5"> so you get</font>

215
00:09:19,160 --> 00:09:24,350
<font color="#E5E5E5">everything you</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> full</font><font color="#CCCCCC"> repositories</font><font color="#E5E5E5"> on</font>

216
00:09:21,290 --> 00:09:27,319
the project<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the tech language this</font>

217
00:09:24,350 --> 00:09:29,300
does not do anything except what github

218
00:09:27,319 --> 00:09:31,579
is already<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> so it's also</font><font color="#E5E5E5"> doing the</font>

219
00:09:29,300 --> 00:09:34,130
same<font color="#CCCCCC"> job</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> there is some</font><font color="#E5E5E5"> research in</font>

220
00:09:31,579 --> 00:09:35,420
that area<font color="#E5E5E5"> which is quite cool how which</font>

221
00:09:34,130 --> 00:09:37,759
comes from<font color="#CCCCCC"> natural language processing</font>

222
00:09:35,420 --> 00:09:39,829
<font color="#E5E5E5">and machine learning area well how do</font>

223
00:09:37,759 --> 00:09:41,569
you tell which language is<font color="#CCCCCC"> that like</font>

224
00:09:39,829 --> 00:09:43,130
basically<font color="#E5E5E5"> classify language based on the</font>

225
00:09:41,569 --> 00:09:45,319
source code and<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> pretty good</font>

226
00:09:43,130 --> 00:09:47,810
<font color="#E5E5E5">results it's not inside</font><font color="#CCCCCC"> Emory first it's</font>

227
00:09:45,319 --> 00:09:49,699
more yet but it's more<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the research</font>

228
00:09:47,810 --> 00:09:53,329
stage and I<font color="#E5E5E5"> think it has a lot of</font>

229
00:09:49,699 --> 00:09:56,300
potential<font color="#E5E5E5"> well hopefully even to be able</font>

230
00:09:53,329 --> 00:09:57,920
<font color="#CCCCCC">to merge upstream and in github</font>

231
00:09:56,300 --> 00:10:01,060
implementation so it does a better job

232
00:09:57,920 --> 00:10:05,870
<font color="#E5E5E5">but here this and that's good one</font>

233
00:10:01,060 --> 00:10:06,569
any other questions<font color="#CCCCCC"> okay thank you</font><font color="#E5E5E5"> so</font>

234
00:10:05,870 --> 00:10:10,379
much

235
00:10:06,570 --> 00:10:10,379
[Applause]

