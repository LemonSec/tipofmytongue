1
00:00:05,839 --> 00:00:10,160
thank you

2
00:00:07,140 --> 00:00:13,350
[Applause]

3
00:00:10,160 --> 00:00:15,360
hi<font color="#E5E5E5"> everyone so I'm</font><font color="#CCCCCC"> Camry and this is</font>

4
00:00:13,350 --> 00:00:17,250
what fell we are both software engineers

5
00:00:15,360 --> 00:00:19,400
at<font color="#CCCCCC"> eight ago</font><font color="#E5E5E5"> and today we will</font><font color="#CCCCCC"> talk</font>

6
00:00:17,250 --> 00:00:21,960
<font color="#CCCCCC">about you</font><font color="#E5E5E5"> will talk you about</font><font color="#CCCCCC"> linkage</font>

7
00:00:19,400 --> 00:00:26,759
which is about to bring source code

8
00:00:21,960 --> 00:00:30,599
analysis to the message so<font color="#CCCCCC"> linkage</font><font color="#E5E5E5"> is a</font>

9
00:00:26,759 --> 00:00:33,329
meta<font color="#CCCCCC"> compiler</font><font color="#E5E5E5"> okay what language in this</font>

10
00:00:30,599 --> 00:00:37,320
project we<font color="#CCCCCC"> created a DSL to make it easy</font>

11
00:00:33,329 --> 00:00:40,650
to basically implement<font color="#CCCCCC"> front-end front</font>

12
00:00:37,320 --> 00:00:43,500
ends like compiler front<font color="#E5E5E5"> ends so it's</font>

13
00:00:40,650 --> 00:00:47,239
<font color="#CCCCCC">lankey generates libraries which can be</font>

14
00:00:43,500 --> 00:00:50,609
used to be the<font color="#E5E5E5"> first half of compilers</font>

15
00:00:47,239 --> 00:00:52,820
<font color="#CCCCCC">that can also</font><font color="#E5E5E5"> be used in debuggers to</font>

16
00:00:50,609 --> 00:00:55,440
<font color="#CCCCCC">past an expression and to evaluate it</font>

17
00:00:52,820 --> 00:00:57,390
<font color="#E5E5E5">for interactive cut browsers when you</font>

18
00:00:55,440 --> 00:00:59,239
can click<font color="#E5E5E5"> on an identifier and that</font>

19
00:00:57,390 --> 00:01:03,629
leads you to<font color="#CCCCCC"> the definition of this</font>

20
00:00:59,239 --> 00:01:06,690
identifier to<font color="#CCCCCC"> write also static</font>

21
00:01:03,629 --> 00:01:08,940
analyzers like linters or think of<font color="#E5E5E5"> the</font>

22
00:01:06,690 --> 00:01:10,620
assailant<font color="#E5E5E5"> ID or this kind of thing and</font>

23
00:01:08,940 --> 00:01:13,770
also<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to provide to</font><font color="#E5E5E5"> make it easy</font>

24
00:01:10,620 --> 00:01:15,659
to<font color="#E5E5E5"> write refactoring tools that for</font>

25
00:01:13,770 --> 00:01:17,610
instance<font color="#E5E5E5"> you</font><font color="#CCCCCC"> asked on</font><font color="#E5E5E5"> your whole code</font>

26
00:01:15,659 --> 00:01:24,030
<font color="#E5E5E5">base</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> please rename this type</font>

27
00:01:17,610 --> 00:01:26,430
definition and all the usage of it so

28
00:01:24,030 --> 00:01:29,520
we've created this originally because

29
00:01:26,430 --> 00:01:33,180
when in the ADA ecosystem we exactly

30
00:01:29,520 --> 00:01:35,729
need this kind of library to implement

31
00:01:33,180 --> 00:01:38,250
to improve<font color="#E5E5E5"> tooling in general so</font><font color="#CCCCCC"> linkage</font>

32
00:01:35,729 --> 00:01:41,429
was for<font color="#E5E5E5"> that but it's it can be used for</font>

33
00:01:38,250 --> 00:01:43,710
<font color="#E5E5E5">other languages as well so let's have a</font>

34
00:01:41,430 --> 00:01:45,750
brief tour on the DSL<font color="#E5E5E5"> and how you</font>

35
00:01:43,710 --> 00:01:51,570
express things<font color="#E5E5E5"> out can use</font><font color="#CCCCCC"> this link</font><font color="#E5E5E5"> it</font>

36
00:01:45,750 --> 00:01:52,350
actually so first of all so for now the

37
00:01:51,570 --> 00:01:54,089
link it's

38
00:01:52,350 --> 00:01:58,199
it's a compiler<font color="#CCCCCC"> you feed it</font><font color="#E5E5E5"> a</font>

39
00:01:54,090 --> 00:02:00,630
python-based DSL so it's<font color="#E5E5E5"> you're not</font>

40
00:01:58,200 --> 00:02:03,469
really writing<font color="#E5E5E5"> PA Python just using the</font>

41
00:02:00,630 --> 00:02:07,199
Python syntax to express something else

42
00:02:03,469 --> 00:02:11,700
<font color="#E5E5E5">one day</font><font color="#CCCCCC"> we'll we'll probably have a</font>

43
00:02:07,200 --> 00:02:12,900
dedicated syntax so first of<font color="#E5E5E5"> all that</font>

44
00:02:11,700 --> 00:02:15,420
should<font color="#E5E5E5"> look familiar</font>

45
00:02:12,900 --> 00:02:17,310
<font color="#E5E5E5">the first when you get when you create a</font>

46
00:02:15,420 --> 00:02:20,220
language<font color="#E5E5E5"> the first step is to</font><font color="#CCCCCC"> create a</font>

47
00:02:17,310 --> 00:02:22,349
<font color="#CCCCCC">lecture for it</font><font color="#E5E5E5"> so you can split a stream</font>

48
00:02:20,220 --> 00:02:23,109
into a sequence of tokens<font color="#E5E5E5"> so the first</font>

49
00:02:22,349 --> 00:02:25,000
thing<font color="#E5E5E5"> to do</font>

50
00:02:23,110 --> 00:02:26,710
to actually<font color="#CCCCCC"> define the list of tokens</font>

51
00:02:25,000 --> 00:02:30,010
that<font color="#CCCCCC"> your lecture</font><font color="#E5E5E5"> is supposed to create</font>

52
00:02:26,710 --> 00:02:33,070
<font color="#E5E5E5">and then you provide rules that well</font>

53
00:02:30,010 --> 00:02:36,250
<font color="#E5E5E5">start from</font><font color="#CCCCCC"> regex and</font><font color="#E5E5E5"> compile it into</font>

54
00:02:33,070 --> 00:02:38,049
some metadata to actually implement the

55
00:02:36,250 --> 00:02:40,180
lecture so this<font color="#E5E5E5"> is this should be</font>

56
00:02:38,050 --> 00:02:42,670
<font color="#CCCCCC">familiar if you</font><font color="#E5E5E5"> have already written a</font>

57
00:02:40,180 --> 00:02:46,420
specification for flex for instance it's

58
00:02:42,670 --> 00:02:52,450
the same same mechanism the next layer

59
00:02:46,420 --> 00:02:54,429
is to<font color="#E5E5E5"> actually define the</font><font color="#CCCCCC"> list of nodes</font>

60
00:02:52,450 --> 00:02:58,959
<font color="#E5E5E5">of three nodes that your parsers are</font>

61
00:02:54,430 --> 00:03:00,610
going to create so here you can see well

62
00:02:58,959 --> 00:03:04,510
<font color="#E5E5E5">using the Python syntax you define a</font>

63
00:03:00,610 --> 00:03:08,170
<font color="#CCCCCC">class</font><font color="#E5E5E5"> PR key where a</font><font color="#CCCCCC"> knot can</font><font color="#E5E5E5"> be extract</font>

64
00:03:04,510 --> 00:03:09,880
and so on and each node can<font color="#CCCCCC"> have</font><font color="#E5E5E5"> a list</font>

65
00:03:08,170 --> 00:03:11,200
of fields<font color="#E5E5E5"> so for instance if you have a</font>

66
00:03:09,880 --> 00:03:12,640
function definition you<font color="#CCCCCC"> have a field</font>

67
00:03:11,200 --> 00:03:14,829
<font color="#CCCCCC">that gives the name of the function</font>

68
00:03:12,640 --> 00:03:19,000
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are lists of arguments the body of</font>

69
00:03:14,830 --> 00:03:23,230
<font color="#E5E5E5">its etc so you defined the</font><font color="#CCCCCC"> tree</font><font color="#E5E5E5"> and the</font>

70
00:03:19,000 --> 00:03:25,750
next<font color="#E5E5E5"> step you just</font><font color="#CCCCCC"> create your</font><font color="#E5E5E5"> rights</font>

71
00:03:23,230 --> 00:03:27,600
passing rules<font color="#CCCCCC"> so like in Python if you</font>

72
00:03:25,750 --> 00:03:30,880
know it<font color="#CCCCCC"> Oh yuck</font>

73
00:03:27,600 --> 00:03:35,829
<font color="#E5E5E5">you right so</font><font color="#CCCCCC"> passwords</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> recursive</font>

74
00:03:30,880 --> 00:03:37,600
<font color="#E5E5E5">descent</font><font color="#CCCCCC"> fashion - well</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> eh okay this</font>

75
00:03:35,830 --> 00:03:39,790
rule if you<font color="#E5E5E5"> find this token and second</font>

76
00:03:37,600 --> 00:03:42,459
you<font color="#CCCCCC"> will produce this node and this in a</font>

77
00:03:39,790 --> 00:03:44,440
recursive<font color="#E5E5E5"> fashion so and this is built</font>

78
00:03:42,459 --> 00:03:46,420
as<font color="#CCCCCC"> it's is compiled into</font><font color="#E5E5E5"> passing that</font>

79
00:03:44,440 --> 00:03:47,760
passing library that is based on

80
00:03:46,420 --> 00:03:51,190
<font color="#CCCCCC">packrats</font>

81
00:03:47,760 --> 00:03:54,940
so<font color="#E5E5E5"> blankets will take all the</font>

82
00:03:51,190 --> 00:03:59,200
definitions<font color="#CCCCCC"> I showed and</font><font color="#E5E5E5"> it will compile</font>

83
00:03:54,940 --> 00:04:02,410
that<font color="#E5E5E5"> in particular</font><font color="#CCCCCC"> it will so it will it</font>

84
00:03:59,200 --> 00:04:04,600
will analyze<font color="#E5E5E5"> the grammar and from it</font><font color="#CCCCCC"> it</font>

85
00:04:02,410 --> 00:04:07,239
<font color="#E5E5E5">would say okay we're creating this kind</font>

86
00:04:04,600 --> 00:04:08,709
of node with this kind of field and this

87
00:04:07,239 --> 00:04:11,230
kind<font color="#E5E5E5"> of field so it will perform type</font>

88
00:04:08,709 --> 00:04:13,930
inference<font color="#E5E5E5"> and</font><font color="#CCCCCC"> if you remember</font><font color="#E5E5E5"> here</font>

89
00:04:11,230 --> 00:04:16,269
so I can define field<font color="#E5E5E5"> without</font><font color="#CCCCCC"> providing</font>

90
00:04:13,930 --> 00:04:18,190
them type<font color="#E5E5E5"> well the grammar will infer</font>

91
00:04:16,269 --> 00:04:20,108
type is they are not specified otherwise

92
00:04:18,190 --> 00:04:23,640
you can specify them to be more explicit

93
00:04:20,108 --> 00:04:27,099
<font color="#E5E5E5">and language with check for consistency</font>

94
00:04:23,640 --> 00:04:29,650
<font color="#CCCCCC">okay so now we have</font><font color="#E5E5E5"> well the</font><font color="#CCCCCC"> really the</font>

95
00:04:27,100 --> 00:04:32,320
<font color="#E5E5E5">top the bottom layer of your</font><font color="#CCCCCC"> front-end</font>

96
00:04:29,650 --> 00:04:35,169
so you have like saying passing and the

97
00:04:32,320 --> 00:04:36,760
next step is semantic analysis so the

98
00:04:35,169 --> 00:04:38,409
first thing so somatically

99
00:04:36,760 --> 00:04:41,020
this is the part that<font color="#CCCCCC"> should answer</font>

100
00:04:38,410 --> 00:04:43,900
<font color="#CCCCCC">questions such</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> what is this</font>

101
00:04:41,020 --> 00:04:46,539
<font color="#CCCCCC">innate failure</font><font color="#E5E5E5"> referring to what is the</font>

102
00:04:43,900 --> 00:04:49,810
type of this<font color="#E5E5E5"> expression and so on so the</font>

103
00:04:46,540 --> 00:04:51,790
basis for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is what's called</font><font color="#CCCCCC"> in</font>

104
00:04:49,810 --> 00:04:56,350
literature<font color="#CCCCCC"> scooping or lexical</font>

105
00:04:51,790 --> 00:05:00,190
environments<font color="#E5E5E5"> so here we provide so in</font><font color="#CCCCCC"> HD</font>

106
00:04:56,350 --> 00:05:03,370
<font color="#E5E5E5">nodes we provide the annotation special</font>

107
00:05:00,190 --> 00:05:05,140
annotations that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> describe okay</font><font color="#CCCCCC"> we</font>

108
00:05:03,370 --> 00:05:07,750
have a<font color="#E5E5E5"> function okay let's this function</font>

109
00:05:05,140 --> 00:05:09,580
<font color="#E5E5E5">creates the scope and everything that</font>

110
00:05:07,750 --> 00:05:12,730
will<font color="#CCCCCC"> happen inside it will act on</font><font color="#E5E5E5"> this</font>

111
00:05:09,580 --> 00:05:14,859
code<font color="#E5E5E5"> again in a recursive</font><font color="#CCCCCC"> fashion</font><font color="#E5E5E5"> and so</font>

112
00:05:12,730 --> 00:05:18,040
this this special annotations will

113
00:05:14,860 --> 00:05:20,680
enable you to create mappings so<font color="#E5E5E5"> kind of</font>

114
00:05:18,040 --> 00:05:24,930
dictionaries that<font color="#E5E5E5"> snap</font><font color="#CCCCCC"> from identifiers</font>

115
00:05:20,680 --> 00:05:27,820
to<font color="#CCCCCC"> nods so this is</font><font color="#E5E5E5"> a first</font><font color="#CCCCCC"> step</font><font color="#E5E5E5"> and then</font>

116
00:05:24,930 --> 00:05:31,930
<font color="#E5E5E5">you will implement semantic analysis</font>

117
00:05:27,820 --> 00:05:36,460
using well<font color="#E5E5E5"> you create use add yet</font>

118
00:05:31,930 --> 00:05:38,380
another kind<font color="#E5E5E5"> of annotation</font><font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> so this</font>

119
00:05:36,460 --> 00:05:40,960
kind of annotation so it's methods we

120
00:05:38,380 --> 00:05:43,480
call them properties<font color="#CCCCCC"> link it</font><font color="#E5E5E5"> the public</font>

121
00:05:40,960 --> 00:05:45,580
one will<font color="#E5E5E5"> actually implement the semantic</font>

122
00:05:43,480 --> 00:05:49,180
analysis<font color="#E5E5E5"> API that you want to provide</font><font color="#CCCCCC"> to</font>

123
00:05:45,580 --> 00:05:52,000
your users as a library<font color="#E5E5E5"> author such as</font>

124
00:05:49,180 --> 00:05:54,250
here<font color="#E5E5E5"> so we have a vertical property that</font>

125
00:05:52,000 --> 00:05:56,070
will well on<font color="#E5E5E5"> the variable reference it</font>

126
00:05:54,250 --> 00:05:59,320
will fetch<font color="#E5E5E5"> the corresponding variable</font>

127
00:05:56,070 --> 00:06:01,599
<font color="#CCCCCC">declaration</font><font color="#E5E5E5"> and you can also have</font>

128
00:05:59,320 --> 00:06:03,430
<font color="#E5E5E5">private properties that will just be</font>

129
00:06:01,600 --> 00:06:06,670
implementation details and users<font color="#CCCCCC"> won't</font>

130
00:06:03,430 --> 00:06:08,500
see that<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> this properties</font><font color="#E5E5E5"> you</font>

131
00:06:06,670 --> 00:06:10,180
<font color="#CCCCCC">write them using a functional</font>

132
00:06:08,500 --> 00:06:13,630
<font color="#E5E5E5">programming language</font><font color="#CCCCCC"> that we created so</font>

133
00:06:10,180 --> 00:06:15,970
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is this part here</font><font color="#CCCCCC"> so here you take</font>

134
00:06:13,630 --> 00:06:17,560
<font color="#CCCCCC">for instance the current node that</font><font color="#E5E5E5"> it's</font>

135
00:06:15,970 --> 00:06:20,200
a valuable reference<font color="#CCCCCC"> you take the</font>

136
00:06:17,560 --> 00:06:22,840
<font color="#E5E5E5">environment that is associated to it and</font>

137
00:06:20,200 --> 00:06:25,030
you perform a request giving its name so

138
00:06:22,840 --> 00:06:27,940
it's supposed<font color="#E5E5E5"> to if the net is the</font>

139
00:06:25,030 --> 00:06:31,090
<font color="#E5E5E5">variable definition is</font><font color="#CCCCCC"> on the scope</font><font color="#E5E5E5"> it</font>

140
00:06:27,940 --> 00:06:33,240
will return it so here<font color="#E5E5E5"> we'll we don't</font>

141
00:06:31,090 --> 00:06:35,530
see it but there are types in this

142
00:06:33,240 --> 00:06:38,590
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> an internal language that is</font>

143
00:06:35,530 --> 00:06:40,510
typed and with type inference so<font color="#CCCCCC"> blanket</font>

144
00:06:38,590 --> 00:06:43,840
<font color="#E5E5E5">when it compiles it make sure</font><font color="#CCCCCC"> that your</font>

145
00:06:40,510 --> 00:06:47,020
expressions actually<font color="#E5E5E5"> have a</font>

146
00:06:43,840 --> 00:06:51,489
<font color="#CCCCCC">are meaningful</font><font color="#E5E5E5"> and we reject incorrect</font>

147
00:06:47,020 --> 00:06:54,280
ones<font color="#E5E5E5"> okay so with</font><font color="#CCCCCC"> just this base we can</font>

148
00:06:51,490 --> 00:06:56,940
already do<font color="#E5E5E5"> passing and resist for a</font>

149
00:06:54,280 --> 00:06:59,260
great deal<font color="#E5E5E5"> of languages and this is cool</font>

150
00:06:56,940 --> 00:07:01,449
so<font color="#E5E5E5"> all you have</font><font color="#CCCCCC"> to do is to</font><font color="#E5E5E5"> write all</font>

151
00:06:59,260 --> 00:07:04,240
the properties you<font color="#E5E5E5"> need to answer the</font>

152
00:07:01,449 --> 00:07:08,110
request<font color="#E5E5E5"> that you want users to</font><font color="#CCCCCC"> 12 access</font>

153
00:07:04,240 --> 00:07:12,360
to but there is<font color="#CCCCCC"> still a missing piece</font>

154
00:07:08,110 --> 00:07:16,240
which is<font color="#CCCCCC"> annada we needed it which is a</font>

155
00:07:12,360 --> 00:07:19,330
valid resolution which is so<font color="#CCCCCC"> and</font><font color="#E5E5E5"> type</font>

156
00:07:16,240 --> 00:07:22,210
<font color="#E5E5E5">inference</font><font color="#CCCCCC"> these are problems that</font><font color="#E5E5E5"> are</font>

157
00:07:19,330 --> 00:07:25,359
difficult<font color="#E5E5E5"> to solve</font><font color="#CCCCCC"> just using a mirror</font>

158
00:07:22,210 --> 00:07:28,090
functional language because for example

159
00:07:25,360 --> 00:07:31,030
here let's see we have an example<font color="#E5E5E5"> well</font>

160
00:07:28,090 --> 00:07:34,210
we have several<font color="#CCCCCC"> functions that are that</font>

161
00:07:31,030 --> 00:07:36,549
<font color="#E5E5E5">have names that are equal but they</font>

162
00:07:34,210 --> 00:07:38,950
accept arguments and have<font color="#E5E5E5"> written types</font>

163
00:07:36,550 --> 00:07:41,110
that are<font color="#E5E5E5"> not exactly similar so for</font>

164
00:07:38,950 --> 00:07:41,500
simple cases such as this one or<font color="#E5E5E5"> this</font>

165
00:07:41,110 --> 00:07:44,560
one

166
00:07:41,500 --> 00:07:47,889
well here we have a call<font color="#E5E5E5"> equal to</font><font color="#CCCCCC"> f1</font><font color="#E5E5E5"> so</font>

167
00:07:44,560 --> 00:07:50,860
one of<font color="#E5E5E5"> these two that takes an int so an</font>

168
00:07:47,889 --> 00:07:52,930
integral<font color="#E5E5E5"> literal so it has to be a call</font>

169
00:07:50,860 --> 00:07:55,419
to<font color="#CCCCCC"> the first one</font><font color="#E5E5E5"> so here we have a</font>

170
00:07:52,930 --> 00:07:59,020
floating-point number<font color="#CCCCCC"> so it has to be</font>

171
00:07:55,419 --> 00:08:01,210
this one<font color="#CCCCCC"> here we call f2 with an</font>

172
00:07:59,020 --> 00:08:03,780
integral interval<font color="#E5E5E5"> and there are no f2</font>

173
00:08:01,210 --> 00:08:06,789
function<font color="#CCCCCC"> excepting integral to all</font><font color="#E5E5E5"> so</font>

174
00:08:03,780 --> 00:08:09,969
this<font color="#CCCCCC"> resolves to</font><font color="#E5E5E5"> nowhere</font><font color="#CCCCCC"> and you have</font>

175
00:08:06,789 --> 00:08:12,430
<font color="#E5E5E5">complex cases such as this one so we can</font>

176
00:08:09,970 --> 00:08:16,750
see here<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we may be able to solve</font>

177
00:08:12,430 --> 00:08:18,910
<font color="#E5E5E5">with some fancy algorithm which f2 is</font>

178
00:08:16,750 --> 00:08:20,169
called here you see it takes a character

179
00:08:18,910 --> 00:08:23,280
literal<font color="#E5E5E5"> but</font><font color="#CCCCCC"> ok</font>

180
00:08:20,169 --> 00:08:27,310
both f2 takes a character literal so

181
00:08:23,280 --> 00:08:30,609
here the difficult thing<font color="#E5E5E5"> is that solving</font>

182
00:08:27,310 --> 00:08:33,458
actually<font color="#CCCCCC"> we're doing the riddle because</font>

183
00:08:30,610 --> 00:08:35,349
<font color="#CCCCCC">the resolution of names</font><font color="#E5E5E5"> is a program</font>

184
00:08:33,458 --> 00:08:37,958
that requires<font color="#E5E5E5"> some non non local</font>

185
00:08:35,349 --> 00:08:41,370
<font color="#E5E5E5">knowledge resolving which function is</font>

186
00:08:37,958 --> 00:08:43,630
called by here by this f1 call

187
00:08:41,370 --> 00:08:44,410
dependence can depend on something<font color="#E5E5E5"> that</font>

188
00:08:43,630 --> 00:08:46,839
is quite far

189
00:08:44,410 --> 00:08:49,060
so yeah it's requires non-local

190
00:08:46,839 --> 00:08:51,820
knowledge so just to have something

191
00:08:49,060 --> 00:08:54,280
about<font color="#E5E5E5"> that this problem is a</font><font color="#CCCCCC"> de specifc</font>

192
00:08:51,820 --> 00:08:57,080
in a de we have that so<font color="#E5E5E5"> you can overload</font>

193
00:08:54,280 --> 00:08:58,790
on the return type of<font color="#CCCCCC"> a function</font><font color="#E5E5E5"> but in</font>

194
00:08:57,080 --> 00:09:01,700
<font color="#CCCCCC">the functional</font><font color="#E5E5E5"> programming languages</font>

195
00:08:58,790 --> 00:09:03,380
<font color="#E5E5E5">such as okay Mel you have a</font><font color="#CCCCCC"> non-local</font>

196
00:09:01,700 --> 00:09:05,330
<font color="#E5E5E5">type inference and you have the same</font>

197
00:09:03,380 --> 00:09:07,189
kinds<font color="#E5E5E5"> of problem</font><font color="#CCCCCC"> so what we are trying</font>

198
00:09:05,330 --> 00:09:10,430
<font color="#E5E5E5">to do is have a general solution for</font>

199
00:09:07,190 --> 00:09:14,720
<font color="#CCCCCC">these kinds of</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and this general</font>

200
00:09:10,430 --> 00:09:18,050
<font color="#CCCCCC">solution is well so if we take the</font>

201
00:09:14,720 --> 00:09:19,850
<font color="#E5E5E5">example that I just quoted earlier so</font>

202
00:09:18,050 --> 00:09:22,310
this is the complex<font color="#CCCCCC"> code that we</font><font color="#E5E5E5"> want to</font>

203
00:09:19,850 --> 00:09:26,480
<font color="#E5E5E5">solve we can collect a set of</font>

204
00:09:22,310 --> 00:09:28,579
constraints so here so let's<font color="#E5E5E5"> follow the</font>

205
00:09:26,480 --> 00:09:32,380
purpose of<font color="#CCCCCC"> discussion let's</font><font color="#E5E5E5"> call this</font>

206
00:09:28,580 --> 00:09:38,510
this<font color="#E5E5E5"> function called C this one constant</font>

207
00:09:32,380 --> 00:09:41,840
function call B and this one a so we see

208
00:09:38,510 --> 00:09:44,720
that a takes character<font color="#CCCCCC"> argument</font><font color="#E5E5E5"> so here</font>

209
00:09:41,840 --> 00:09:47,060
we<font color="#CCCCCC"> have this conference so a</font><font color="#E5E5E5"> its first</font>

210
00:09:44,720 --> 00:09:52,100
argument<font color="#E5E5E5"> well its type would be must be</font>

211
00:09:47,060 --> 00:09:55,069
a character we pass the result of a<font color="#CCCCCC"> to</font>

212
00:09:52,100 --> 00:09:58,010
as an argument<font color="#E5E5E5"> of B so the return type</font>

213
00:09:55,070 --> 00:10:00,350
<font color="#E5E5E5">of a must be the type of the first</font>

214
00:09:58,010 --> 00:10:01,100
argument of be the same applies for the

215
00:10:00,350 --> 00:10:05,210
<font color="#CCCCCC">outer</font><font color="#E5E5E5"> call</font>

216
00:10:01,100 --> 00:10:08,380
and because we're calling<font color="#E5E5E5"> because a is</font>

217
00:10:05,210 --> 00:10:12,110
about coding<font color="#CCCCCC"> F 2 well we see</font><font color="#E5E5E5"> that a is</font>

218
00:10:08,380 --> 00:10:14,180
one of these two girls<font color="#E5E5E5"> on the same line</font>

219
00:10:12,110 --> 00:10:17,000
one<font color="#E5E5E5"> of these two</font><font color="#CCCCCC"> declarations same goes</font>

220
00:10:14,180 --> 00:10:19,339
for B and C<font color="#E5E5E5"> and so you collect a set of</font>

221
00:10:17,000 --> 00:10:21,140
constraints and then well in rank each

222
00:10:19,340 --> 00:10:25,520
we provide along with the functional

223
00:10:21,140 --> 00:10:28,900
language but satisfy<font color="#CCCCCC"> get what's</font><font color="#E5E5E5"> name</font>

224
00:10:25,520 --> 00:10:28,900
<font color="#CCCCCC">yeah it's over</font>

225
00:10:30,750 --> 00:10:35,320
<font color="#E5E5E5">so something</font><font color="#CCCCCC"> that takes</font><font color="#E5E5E5"> a set of</font>

226
00:10:32,980 --> 00:10:37,320
constraints<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that give you hopefully</font>

227
00:10:35,320 --> 00:10:40,750
<font color="#CCCCCC">the unique solution to this problem</font><font color="#E5E5E5"> and</font>

228
00:10:37,320 --> 00:10:43,600
so using all<font color="#E5E5E5"> these building blocks while</font>

229
00:10:40,750 --> 00:10:45,430
you're supposed to<font color="#E5E5E5"> already Express be</font>

230
00:10:43,600 --> 00:10:49,810
able to express semantic analysis for

231
00:10:45,430 --> 00:10:53,459
quite a large copies of languages<font color="#E5E5E5"> and I</font>

232
00:10:49,810 --> 00:10:58,619
will never<font color="#E5E5E5"> ever speak about what's next</font>

233
00:10:53,460 --> 00:11:00,150
here<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> let's be quick how much time</font>

234
00:10:58,620 --> 00:11:03,790
thank you

235
00:11:00,150 --> 00:11:05,980
okay so<font color="#E5E5E5"> Sam</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> described to use a</font>

236
00:11:03,790 --> 00:11:07,599
<font color="#E5E5E5">mechanism by which</font><font color="#CCCCCC"> you describe your</font>

237
00:11:05,980 --> 00:11:11,620
language so the language<font color="#CCCCCC"> specification</font>

238
00:11:07,600 --> 00:11:13,150
and this is what you as a like if you

239
00:11:11,620 --> 00:11:15,460
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to write a new language content</font>

240
00:11:13,150 --> 00:11:17,500
this is<font color="#E5E5E5"> what you you will do but then</font>

241
00:11:15,460 --> 00:11:19,810
<font color="#E5E5E5">you will have users for</font><font color="#CCCCCC"> your library</font>

242
00:11:17,500 --> 00:11:23,440
<font color="#E5E5E5">people who want to for example</font><font color="#CCCCCC"> write</font>

243
00:11:19,810 --> 00:11:24,939
refactorings for<font color="#CCCCCC"> ada</font><font color="#E5E5E5"> or whatever</font>

244
00:11:23,440 --> 00:11:26,770
<font color="#CCCCCC">language from for</font><font color="#E5E5E5"> the moment we</font><font color="#CCCCCC"> only</font>

245
00:11:24,940 --> 00:11:31,000
have<font color="#E5E5E5"> ADA so ADA or ADA</font>

246
00:11:26,770 --> 00:11:32,710
<font color="#CCCCCC">but then we expect</font><font color="#E5E5E5"> whether a lot more so</font>

247
00:11:31,000 --> 00:11:38,080
we I'm going to talk<font color="#E5E5E5"> about what we</font>

248
00:11:32,710 --> 00:11:40,180
generate so if it's not<font color="#CCCCCC"> abuse yet</font>

249
00:11:38,080 --> 00:11:42,570
because it's a bit complicated<font color="#CCCCCC"> the meta</font>

250
00:11:40,180 --> 00:11:45,430
compiler is<font color="#CCCCCC"> not a very</font><font color="#E5E5E5"> simple project</font>

251
00:11:42,570 --> 00:11:47,380
<font color="#CCCCCC">this is the</font><font color="#E5E5E5"> pipeline of</font><font color="#CCCCCC"> long kids so</font>

252
00:11:45,430 --> 00:11:49,270
basically you will provide your language

253
00:11:47,380 --> 00:11:51,610
<font color="#E5E5E5">specification this is what</font><font color="#CCCCCC"> piana has</font>

254
00:11:49,270 --> 00:11:53,620
been talking<font color="#E5E5E5"> about so far and then</font><font color="#CCCCCC"> you</font>

255
00:11:51,610 --> 00:11:55,870
feed<font color="#CCCCCC"> that to</font><font color="#E5E5E5"> rank it and it will</font>

256
00:11:53,620 --> 00:11:57,640
<font color="#E5E5E5">generate a library like something you</font>

257
00:11:55,870 --> 00:12:00,310
can<font color="#E5E5E5"> call from your code and that will</font>

258
00:11:57,640 --> 00:12:03,939
provide you knowledge<font color="#CCCCCC"> so this ivory</font><font color="#E5E5E5"> is</font>

259
00:12:00,310 --> 00:12:06,520
in<font color="#CCCCCC"> ada a language that who maybe never</font>

260
00:12:03,940 --> 00:12:08,290
heard about<font color="#E5E5E5"> but here not because we</font>

261
00:12:06,520 --> 00:12:11,170
provide<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of bindings to other</font>

262
00:12:08,290 --> 00:12:12,849
languages<font color="#E5E5E5"> like</font><font color="#CCCCCC"> C Python</font><font color="#E5E5E5"> and it's really</font>

263
00:12:11,170 --> 00:12:15,520
<font color="#CCCCCC">easy to</font><font color="#E5E5E5"> generate bindings for</font><font color="#CCCCCC"> other</font>

264
00:12:12,850 --> 00:12:17,680
languages<font color="#E5E5E5"> and on top</font><font color="#CCCCCC"> of that the hope of</font>

265
00:12:15,520 --> 00:12:19,380
the whole project<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> from</font>

266
00:12:17,680 --> 00:12:23,760
this language<font color="#E5E5E5"> specification to generate</font>

267
00:12:19,380 --> 00:12:28,530
generic tools that I'm going<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> into</font>

268
00:12:23,760 --> 00:12:32,470
so the basically<font color="#CCCCCC"> Emory is made in Ada so</font>

269
00:12:28,530 --> 00:12:33,640
it was an<font color="#CCCCCC"> easy choice</font><font color="#E5E5E5"> for us I'm just</font>

270
00:12:32,470 --> 00:12:36,090
going<font color="#CCCCCC"> to point at the name</font><font color="#E5E5E5"> of the</font>

271
00:12:33,640 --> 00:12:38,770
<font color="#CCCCCC">company so that</font><font color="#E5E5E5"> you understand edik or</font>

272
00:12:36,090 --> 00:12:41,529
basically<font color="#CCCCCC"> we needed low-level</font><font color="#E5E5E5"> language</font>

273
00:12:38,770 --> 00:12:45,389
that can produce fast codes and

274
00:12:41,529 --> 00:12:45,389
that doesn't have memory<font color="#E5E5E5"> management</font>

275
00:12:45,600 --> 00:12:49,720
policy<font color="#E5E5E5"> built-in that would be</font>

276
00:12:48,069 --> 00:12:51,878
<font color="#E5E5E5">complicated</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> handle in ideas</font>

277
00:12:49,720 --> 00:12:54,519
for example<font color="#CCCCCC"> we didn't want to</font><font color="#E5E5E5"> ship a GC</font>

278
00:12:51,879 --> 00:12:56,470
along with the libraries<font color="#E5E5E5"> because if you</font>

279
00:12:54,519 --> 00:13:01,569
need<font color="#E5E5E5"> to have results fast maybe it's not</font>

280
00:12:56,470 --> 00:13:03,040
a very good idea cetera et cetera<font color="#E5E5E5"> but we</font>

281
00:13:01,569 --> 00:13:05,110
could<font color="#E5E5E5"> have chosen</font><font color="#CCCCCC"> another language but</font>

282
00:13:03,040 --> 00:13:06,879
<font color="#E5E5E5">ADA was</font><font color="#CCCCCC"> an obvious choice for us because</font>

283
00:13:05,110 --> 00:13:11,889
we have a lot of<font color="#CCCCCC"> ADA knowledge and it's</font>

284
00:13:06,879 --> 00:13:13,480
right<font color="#CCCCCC"> on target for this use so since</font>

285
00:13:11,889 --> 00:13:16,449
not a lot of<font color="#CCCCCC"> people use data we provide</font>

286
00:13:13,480 --> 00:13:18,069
bindings to see and to<font color="#CCCCCC"> python and python</font>

287
00:13:16,449 --> 00:13:20,139
is the de facto<font color="#CCCCCC"> scripting language of</font>

288
00:13:18,069 --> 00:13:22,628
the ecosystem so once you generate<font color="#E5E5E5"> it</font>

289
00:13:20,139 --> 00:13:24,550
your library you can right<font color="#CCCCCC"> away use it</font>

290
00:13:22,629 --> 00:13:26,740
from<font color="#CCCCCC"> Python launching an interactive</font>

291
00:13:24,550 --> 00:13:29,319
shell<font color="#E5E5E5"> and for example passing a source</font>

292
00:13:26,740 --> 00:13:32,079
code and asking for knowledge<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the</font>

293
00:13:29,319 --> 00:13:34,990
code<font color="#E5E5E5"> and it's easy to</font><font color="#CCCCCC"> generate bindings</font>

294
00:13:32,079 --> 00:13:36,160
to new<font color="#E5E5E5"> languages because</font><font color="#CCCCCC"> long kit has</font>

295
00:13:34,990 --> 00:13:38,139
the knowledge<font color="#E5E5E5"> comes in on which</font>

296
00:13:36,160 --> 00:13:40,749
specification about<font color="#E5E5E5"> everything so</font>

297
00:13:38,139 --> 00:13:42,790
<font color="#CCCCCC">datatypes</font><font color="#E5E5E5"> the fields the functions</font><font color="#CCCCCC"> that</font>

298
00:13:40,749 --> 00:13:46,949
<font color="#CCCCCC">are available</font><font color="#E5E5E5"> so it can very easily</font>

299
00:13:42,790 --> 00:13:49,120
generate bindings to other languages so

300
00:13:46,949 --> 00:13:50,889
<font color="#E5E5E5">interesting point about</font><font color="#CCCCCC"> launch</font><font color="#E5E5E5"> it</font>

301
00:13:49,120 --> 00:13:53,290
<font color="#E5E5E5">generated libraries</font><font color="#CCCCCC"> is that they are</font>

302
00:13:50,889 --> 00:13:55,029
crafted for<font color="#E5E5E5"> incremental analysis the</font>

303
00:13:53,290 --> 00:13:56,740
reason we<font color="#E5E5E5"> express for example the</font>

304
00:13:55,029 --> 00:13:59,709
properties in a functional<font color="#E5E5E5"> language and</font>

305
00:13:56,740 --> 00:14:01,300
the reason everything<font color="#E5E5E5"> is declarative is</font>

306
00:13:59,709 --> 00:14:03,099
so that we have<font color="#CCCCCC"> freedom in the</font>

307
00:14:01,300 --> 00:14:07,899
implementation<font color="#E5E5E5"> to do some things that</font>

308
00:14:03,100 --> 00:14:11,050
takes the<font color="#CCCCCC"> semantic and generate</font>

309
00:14:07,899 --> 00:14:12,970
<font color="#E5E5E5">increment and analyzer for it so as</font>

310
00:14:11,050 --> 00:14:15,128
<font color="#E5E5E5">little state as possible</font><font color="#CCCCCC"> in the spec so</font>

311
00:14:12,970 --> 00:14:17,019
that we can do an incremental analyzer

312
00:14:15,129 --> 00:14:19,930
<font color="#E5E5E5">and for either what this mean is that if</font>

313
00:14:17,019 --> 00:14:22,059
you change<font color="#CCCCCC"> the</font><font color="#E5E5E5"> file you don't need to</font>

314
00:14:19,930 --> 00:14:24,638
recompute<font color="#CCCCCC"> every fact that depends</font><font color="#E5E5E5"> on it</font>

315
00:14:22,059 --> 00:14:26,949
every time like<font color="#CCCCCC"> your most</font><font color="#E5E5E5"> compiler would</font>

316
00:14:24,639 --> 00:14:29,170
do I know some<font color="#E5E5E5"> compiler more clever than</font>

317
00:14:26,949 --> 00:14:32,439
<font color="#E5E5E5">that but the notch is not for example</font>

318
00:14:29,170 --> 00:14:34,120
<font color="#CCCCCC">which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the main compiler for Aida so</font>

319
00:14:32,439 --> 00:14:39,639
this was very<font color="#E5E5E5"> important for integration</font>

320
00:14:34,120 --> 00:14:41,649
into<font color="#CCCCCC"> IDs for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is an example of</font>

321
00:14:39,639 --> 00:14:43,329
something we did<font color="#E5E5E5"> with</font><font color="#CCCCCC"> debater</font><font color="#E5E5E5"> wrong</font>

322
00:14:41,649 --> 00:14:46,509
which is<font color="#E5E5E5"> an engine generated with long</font>

323
00:14:43,329 --> 00:14:49,989
<font color="#E5E5E5">kit and it's a static analyzer for</font><font color="#CCCCCC"> ADA</font>

324
00:14:46,509 --> 00:14:52,240
very small it's this code is just<font color="#E5E5E5"> the</font>

325
00:14:49,990 --> 00:14:54,390
whole static analyzer using the libanon

326
00:14:52,240 --> 00:14:57,120
library<font color="#E5E5E5"> what it does is something</font><font color="#CCCCCC"> there</font>

327
00:14:54,390 --> 00:14:59,699
simple<font color="#E5E5E5"> it checks for binary operators</font>

328
00:14:57,120 --> 00:15:01,950
like addition subtraction and checks if

329
00:14:59,700 --> 00:15:04,050
syntactically<font color="#E5E5E5"> the two parents</font><font color="#CCCCCC"> are the</font>

330
00:15:01,950 --> 00:15:07,860
<font color="#CCCCCC">same so it's a very simple</font><font color="#E5E5E5"> static</font>

331
00:15:04,050 --> 00:15:10,109
<font color="#E5E5E5">analysis check and surprisingly we run</font>

332
00:15:07,860 --> 00:15:13,260
it<font color="#CCCCCC"> an orchid basis and we found</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

333
00:15:10,110 --> 00:15:17,100
bugs in our code<font color="#E5E5E5"> bases despite extensive</font>

334
00:15:13,260 --> 00:15:20,700
testing and<font color="#E5E5E5"> other more powerful static</font>

335
00:15:17,100 --> 00:15:23,070
analysis run on it<font color="#E5E5E5"> so once you have a</font>

336
00:15:20,700 --> 00:15:25,470
static you want<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> have a syntactic</font>

337
00:15:23,070 --> 00:15:27,240
analyzer for your language<font color="#CCCCCC"> well if you</font>

338
00:15:25,470 --> 00:15:28,860
have that<font color="#CCCCCC"> the actual thing that your</font>

339
00:15:27,240 --> 00:15:30,900
tips you can do a lot of<font color="#E5E5E5"> stuff that</font><font color="#CCCCCC"> is</font>

340
00:15:28,860 --> 00:15:33,540
really<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> and this could</font><font color="#E5E5E5"> be</font>

341
00:15:30,900 --> 00:15:36,990
<font color="#CCCCCC">adapted for another launch it</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> we</font>

342
00:15:33,540 --> 00:15:39,480
have a Python faster<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example and we</font>

343
00:15:36,990 --> 00:15:42,180
<font color="#CCCCCC">have this one running on</font><font color="#E5E5E5"> Python 2 so</font>

344
00:15:39,480 --> 00:15:45,720
it's very<font color="#CCCCCC"> easy to adapt because</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> API</font>

345
00:15:42,180 --> 00:15:47,910
is exactly the same so what we<font color="#E5E5E5"> also</font>

346
00:15:45,720 --> 00:15:50,700
generate automatically from your grammar

347
00:15:47,910 --> 00:15:53,219
definition and your<font color="#E5E5E5"> tree definition is a</font>

348
00:15:50,700 --> 00:15:56,100
<font color="#E5E5E5">nun parser so we have</font><font color="#CCCCCC"> Amin to pass code</font>

349
00:15:53,220 --> 00:15:58,500
but we also have a<font color="#CCCCCC"> mean to take a tree</font>

350
00:15:56,100 --> 00:16:01,230
and produce a<font color="#E5E5E5"> new source file from it</font>

351
00:15:58,500 --> 00:16:03,570
not<font color="#E5E5E5"> using any source information</font><font color="#CCCCCC"> so this</font>

352
00:16:01,230 --> 00:16:05,070
<font color="#E5E5E5">is useful because if you</font><font color="#CCCCCC"> remember I told</font>

353
00:16:03,570 --> 00:16:07,530
you that<font color="#E5E5E5"> we want to be able</font><font color="#CCCCCC"> to do</font>

354
00:16:05,070 --> 00:16:10,530
refactorings with the libraries so it

355
00:16:07,530 --> 00:16:13,380
<font color="#E5E5E5">means that you can modify the tree and</font>

356
00:16:10,530 --> 00:16:15,030
then you can call an and parse primitive

357
00:16:13,380 --> 00:16:17,460
and it will<font color="#E5E5E5"> generate a new</font><font color="#CCCCCC"> source so</font>

358
00:16:15,030 --> 00:16:20,420
this<font color="#E5E5E5"> is a very neat</font>

359
00:16:17,460 --> 00:16:23,310
<font color="#E5E5E5">abstraction</font><font color="#CCCCCC"> to build refactorings</font><font color="#E5E5E5"> upon</font>

360
00:16:20,420 --> 00:16:24,900
so it uses<font color="#E5E5E5"> the grammar the st definition</font>

361
00:16:23,310 --> 00:16:28,229
you don't need to write anything else<font color="#CCCCCC"> it</font>

362
00:16:24,900 --> 00:16:29,880
will<font color="#E5E5E5"> generate and pass automatic and so</font>

363
00:16:28,230 --> 00:16:34,770
you can use it<font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> kind of stuff</font>

364
00:16:29,880 --> 00:16:37,290
<font color="#CCCCCC">so this is an ADA source code ok simple</font>

365
00:16:34,770 --> 00:16:39,540
<font color="#CCCCCC">robot</font><font color="#E5E5E5"> problem program very simple and</font>

366
00:16:37,290 --> 00:16:42,150
then we want<font color="#E5E5E5"> to change it change the</font>

367
00:16:39,540 --> 00:16:45,930
string<font color="#CCCCCC"> literal</font><font color="#E5E5E5"> to by world but not using</font>

368
00:16:42,150 --> 00:16:47,760
<font color="#CCCCCC">a</font><font color="#E5E5E5"> set or whatever but you</font><font color="#CCCCCC"> using the tree</font>

369
00:16:45,930 --> 00:16:50,969
directly<font color="#E5E5E5"> and so this is an example</font>

370
00:16:47,760 --> 00:16:54,270
<font color="#CCCCCC">program that you</font><font color="#E5E5E5"> can do using the ADA</font>

371
00:16:50,970 --> 00:16:58,200
<font color="#E5E5E5">from 10 you will look for the code and</font>

372
00:16:54,270 --> 00:17:00,960
then you will<font color="#E5E5E5"> start to</font><font color="#CCCCCC"> D and rewrite the</font>

373
00:16:58,200 --> 00:17:02,940
string literal<font color="#CCCCCC"> and put by word instead</font>

374
00:17:00,960 --> 00:17:04,949
<font color="#E5E5E5">of hello world</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is all done</font><font color="#CCCCCC"> at</font>

375
00:17:02,940 --> 00:17:07,660
the tree<font color="#E5E5E5"> level not at the source level</font>

376
00:17:04,949 --> 00:17:10,240
and then you apply the<font color="#CCCCCC"> jib</font>

377
00:17:07,660 --> 00:17:15,160
you<font color="#CCCCCC"> obtained the new program</font><font color="#E5E5E5"> so this is</font>

378
00:17:10,240 --> 00:17:18,540
<font color="#E5E5E5">very convenient I don't know how much</font>

379
00:17:15,160 --> 00:17:21,340
time<font color="#E5E5E5"> I have left very</font><font color="#CCCCCC"> little actually</font><font color="#E5E5E5"> so</font>

380
00:17:18,540 --> 00:17:24,129
we ship a number of tools along with the

381
00:17:21,339 --> 00:17:26,379
libraries and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hope</font><font color="#E5E5E5"> from the Ranchod</font>

382
00:17:24,130 --> 00:17:28,540
project is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so now we go</font><font color="#E5E5E5"> along the</font>

383
00:17:26,380 --> 00:17:30,670
more generic tools we have that<font color="#E5E5E5"> you can</font>

384
00:17:28,540 --> 00:17:32,260
<font color="#E5E5E5">use so once you have a language</font>

385
00:17:30,670 --> 00:17:34,320
specification you have generic tools

386
00:17:32,260 --> 00:17:36,280
working<font color="#E5E5E5"> on it so we have simple</font>

387
00:17:34,320 --> 00:17:38,379
command-line tools that you can use

388
00:17:36,280 --> 00:17:44,200
<font color="#E5E5E5">playground is</font><font color="#CCCCCC"> an interactive</font><font color="#E5E5E5"> shell based</font>

389
00:17:38,380 --> 00:17:46,390
on<font color="#CCCCCC"> ipython</font><font color="#E5E5E5"> paris is a just</font><font color="#CCCCCC"> HD damper but</font>

390
00:17:44,200 --> 00:17:48,610
we have a more<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> like a</font>

391
00:17:46,390 --> 00:17:52,150
prototype<font color="#CCCCCC"> for a generic code inventor</font>

392
00:17:48,610 --> 00:17:53,800
for example so this is for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> DES and</font>

393
00:17:52,150 --> 00:17:56,190
what you would<font color="#E5E5E5"> do is provide the</font>

394
00:17:53,800 --> 00:17:59,020
declarative<font color="#CCCCCC"> way of indenting your code</font>

395
00:17:56,190 --> 00:18:01,540
for the tree so you say<font color="#E5E5E5"> for a package</font>

396
00:17:59,020 --> 00:18:02,860
declaration for example I want<font color="#E5E5E5"> the</font>

397
00:18:01,540 --> 00:18:05,110
<font color="#E5E5E5">public and the private part to</font><font color="#CCCCCC"> be</font>

398
00:18:02,860 --> 00:18:08,139
<font color="#E5E5E5">implemented</font><font color="#CCCCCC"> by rock food which which</font>

399
00:18:05,110 --> 00:18:10,030
says<font color="#E5E5E5"> increment by three columns and then</font>

400
00:18:08,140 --> 00:18:11,740
the engine will do that automatically

401
00:18:10,030 --> 00:18:13,629
<font color="#E5E5E5">and if you have a new language content</font>

402
00:18:11,740 --> 00:18:16,000
<font color="#E5E5E5">all you need to do is to write this map</font>

403
00:18:13,630 --> 00:18:20,110
and<font color="#CCCCCC"> you have an indenter for for your</font>

404
00:18:16,000 --> 00:18:22,360
<font color="#E5E5E5">language syntax highlighter could be</font>

405
00:18:20,110 --> 00:18:23,979
produced along the same<font color="#E5E5E5"> way we have all</font>

406
00:18:22,360 --> 00:18:29,770
the information<font color="#CCCCCC"> we need to</font><font color="#E5E5E5"> produce a</font>

407
00:18:23,980 --> 00:18:31,390
syntax highlighter and<font color="#CCCCCC"> going</font><font color="#E5E5E5"> this way we</font>

408
00:18:29,770 --> 00:18:33,550
could<font color="#E5E5E5"> imagine at some</font><font color="#CCCCCC"> point being able</font>

409
00:18:31,390 --> 00:18:35,710
to provide<font color="#E5E5E5"> a whole server for the</font>

410
00:18:33,550 --> 00:18:37,570
language<font color="#E5E5E5"> server protocol so you write</font>

411
00:18:35,710 --> 00:18:40,120
your language specification you write

412
00:18:37,570 --> 00:18:42,189
how<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> go to definition</font><font color="#CCCCCC"> Auto</font>

413
00:18:40,120 --> 00:18:46,540
<font color="#E5E5E5">completion etc and it will generate the</font>

414
00:18:42,190 --> 00:18:51,280
<font color="#E5E5E5">engine that does it and you can directly</font>

415
00:18:46,540 --> 00:18:53,409
plug it into your editor so for the

416
00:18:51,280 --> 00:18:57,430
moment<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> done at all</font><font color="#CCCCCC"> it's just</font>

417
00:18:53,410 --> 00:19:00,790
<font color="#CCCCCC">a dream but we have a we have a</font>

418
00:18:57,430 --> 00:19:02,710
prototype for it<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> just a new vm</font>

419
00:19:00,790 --> 00:19:04,510
plug-in and<font color="#CCCCCC"> that already</font><font color="#E5E5E5"> does quite a</font>

420
00:19:02,710 --> 00:19:07,840
<font color="#E5E5E5">lot of stuff like indentation go to</font>

421
00:19:04,510 --> 00:19:09,400
<font color="#CCCCCC">definition for ada</font><font color="#E5E5E5"> and it does a subset</font>

422
00:19:07,840 --> 00:19:12,419
of<font color="#E5E5E5"> that for python</font><font color="#CCCCCC"> too because we have a</font>

423
00:19:09,400 --> 00:19:12,420
<font color="#CCCCCC">python fronton</font>

424
00:19:13,550 --> 00:19:20,690
so we already<font color="#E5E5E5"> have a few prototypes for</font>

425
00:19:18,190 --> 00:19:22,700
<font color="#CCCCCC">front-ends based on LAN kit</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have a</font>

426
00:19:20,690 --> 00:19:26,300
<font color="#E5E5E5">debate</font><font color="#CCCCCC"> on that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> amour</font><font color="#E5E5E5"> most complete</font>

427
00:19:22,700 --> 00:19:28,340
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> Python so for Python we</font>

428
00:19:26,300 --> 00:19:31,460
<font color="#CCCCCC">mostly have the parser but we have a</font>

429
00:19:28,340 --> 00:19:34,010
very<font color="#E5E5E5"> simple model of how the scoping</font>

430
00:19:31,460 --> 00:19:35,630
<font color="#E5E5E5">works so in Python since it's a</font><font color="#CCCCCC"> dynamic</font>

431
00:19:34,010 --> 00:19:38,150
language<font color="#E5E5E5"> we don't really have static</font>

432
00:19:35,630 --> 00:19:40,520
scoping<font color="#E5E5E5"> but you can model it so that you</font>

433
00:19:38,150 --> 00:19:43,670
can use it in<font color="#CCCCCC"> IDE</font><font color="#E5E5E5"> so we have that and we</font>

434
00:19:40,520 --> 00:19:47,629
played with<font color="#CCCCCC"> other simple</font><font color="#E5E5E5"> languages like</font>

435
00:19:43,670 --> 00:19:49,940
JSON<font color="#E5E5E5"> or K config to prove</font><font color="#CCCCCC"> that we can</font>

436
00:19:47,630 --> 00:19:51,260
actually<font color="#E5E5E5"> generate content for more</font>

437
00:19:49,940 --> 00:19:53,540
languages<font color="#E5E5E5"> and for</font><font color="#CCCCCC"> some moments</font><font color="#E5E5E5"> that's</font>

438
00:19:51,260 --> 00:19:55,070
all<font color="#E5E5E5"> but we hope that raising awareness</font>

439
00:19:53,540 --> 00:19:59,240
about<font color="#E5E5E5"> the project people will try to</font>

440
00:19:55,070 --> 00:20:00,800
write new content maybe<font color="#E5E5E5"> and tell us that</font>

441
00:19:59,240 --> 00:20:04,310
it<font color="#CCCCCC"> doesn't work</font><font color="#E5E5E5"> at all and</font><font color="#CCCCCC"> that we need</font>

442
00:20:00,800 --> 00:20:05,990
to<font color="#CCCCCC"> fix everything so thank</font><font color="#E5E5E5"> you for</font>

443
00:20:04,310 --> 00:20:08,780
listening<font color="#CCCCCC"> you can find the sources</font><font color="#E5E5E5"> for</font>

444
00:20:05,990 --> 00:20:10,610
rank it<font color="#E5E5E5"> on github here and we have a</font>

445
00:20:08,780 --> 00:20:12,770
<font color="#E5E5E5">tutorial so if you want to write a new</font>

446
00:20:10,610 --> 00:20:14,600
front end<font color="#CCCCCC"> for on kit we already</font><font color="#E5E5E5"> have the</font>

447
00:20:12,770 --> 00:20:16,460
tutorials that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can find</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> so it's</font>

448
00:20:14,600 --> 00:20:19,040
still a work<font color="#CCCCCC"> in progress</font>

449
00:20:16,460 --> 00:20:21,140
<font color="#CCCCCC">ap eyes are</font><font color="#E5E5E5"> moving and for the moment</font>

450
00:20:19,040 --> 00:20:23,690
<font color="#CCCCCC">except the tutorial we don't have much</font>

451
00:20:21,140 --> 00:20:26,810
more<font color="#CCCCCC"> doc</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we will gladly accept any</font>

452
00:20:23,690 --> 00:20:29,260
feedback issues could<font color="#CCCCCC"> requests etc</font><font color="#E5E5E5"> thank</font>

453
00:20:26,810 --> 00:20:29,260
you<font color="#E5E5E5"> very much</font>

454
00:20:34,370 --> 00:20:39,620
questions<font color="#E5E5E5"> yes go</font><font color="#CCCCCC"> ahead</font>

455
00:20:40,220 --> 00:20:45,750
<font color="#CCCCCC">coal generation yourself so somebody can</font>

456
00:20:43,320 --> 00:20:47,510
maybe use it<font color="#E5E5E5"> for both</font><font color="#CCCCCC"> type</font><font color="#E5E5E5"> of simple</font>

457
00:20:45,750 --> 00:20:50,700
<font color="#E5E5E5">back</font><font color="#CCCCCC"> end for</font><font color="#E5E5E5"> his language was introduced</font>

458
00:20:47,510 --> 00:20:54,060
<font color="#CCCCCC">so the question was do you have plans to</font>

459
00:20:50,700 --> 00:20:56,340
generate<font color="#CCCCCC"> it be</font><font color="#E5E5E5"> able to generate a simple</font>

460
00:20:54,060 --> 00:21:00,000
<font color="#E5E5E5">back end for the languages</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> imagine you</font>

461
00:20:56,340 --> 00:21:01,889
mean declaratively<font color="#CCCCCC"> also yeah of</font><font color="#E5E5E5"> course</font>

462
00:21:00,000 --> 00:21:03,480
so of course you<font color="#CCCCCC"> can write back-end</font>

463
00:21:01,890 --> 00:21:05,130
<font color="#E5E5E5">using the</font><font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> for the moment you</font>

464
00:21:03,480 --> 00:21:05,970
<font color="#E5E5E5">know but that's not what</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> talking</font>

465
00:21:05,130 --> 00:21:08,670
about

466
00:21:05,970 --> 00:21:11,130
we had some ideas<font color="#CCCCCC"> about that it's really</font>

467
00:21:08,670 --> 00:21:13,650
<font color="#E5E5E5">not our</font><font color="#CCCCCC"> target at work but nothing</font>

468
00:21:11,130 --> 00:21:16,260
<font color="#E5E5E5">prevents it nothing prevents it to do it</font>

469
00:21:13,650 --> 00:21:20,070
<font color="#E5E5E5">if you like it's a very interesting</font>

470
00:21:16,260 --> 00:21:22,920
topic<font color="#CCCCCC"> so yeah I have a few ideas of how</font>

471
00:21:20,070 --> 00:21:31,250
to do that but nothing in<font color="#E5E5E5"> the work for</font>

472
00:21:22,920 --> 00:21:34,710
the moment yeah yes yes<font color="#E5E5E5"> so we have a</font>

473
00:21:31,250 --> 00:21:36,660
concept called<font color="#CCCCCC"> tree</font><font color="#E5E5E5"> Diaz and so when you</font>

474
00:21:34,710 --> 00:21:38,850
pass<font color="#E5E5E5"> the tokens you can say this</font><font color="#CCCCCC"> is the</font>

475
00:21:36,660 --> 00:21:40,260
<font color="#CCCCCC">token relevant for the tree and this</font><font color="#E5E5E5"> is</font>

476
00:21:38,850 --> 00:21:44,790
a<font color="#CCCCCC"> token that</font><font color="#E5E5E5"> you need to store</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

477
00:21:40,260 --> 00:21:48,330
tree but that<font color="#E5E5E5"> won't imply a you know yes</font>

478
00:21:44,790 --> 00:21:50,220
thank you<font color="#E5E5E5"> very much fr was passing so in</font>

479
00:21:48,330 --> 00:21:52,139
that case it<font color="#E5E5E5"> will it will be stored in</font>

480
00:21:50,220 --> 00:21:54,510
the node what we don't<font color="#E5E5E5"> do for the moment</font>

481
00:21:52,140 --> 00:21:56,640
<font color="#CCCCCC">is provide the</font><font color="#E5E5E5"> rewriting API that allows</font>

482
00:21:54,510 --> 00:21:59,400
you to<font color="#E5E5E5"> insert comments but we plan to</font>

483
00:21:56,640 --> 00:22:06,140
<font color="#E5E5E5">add that at some point to I think</font><font color="#CCCCCC"> there</font>

484
00:21:59,400 --> 00:22:06,140
<font color="#E5E5E5">was a question okay cool yes</font>

485
00:22:10,610 --> 00:22:16,919
so the question<font color="#E5E5E5"> was what is</font><font color="#CCCCCC"> the</font>

486
00:22:13,050 --> 00:22:20,480
<font color="#E5E5E5">expressiveness of your constraints</font><font color="#CCCCCC"> since</font>

487
00:22:16,920 --> 00:22:23,280
I<font color="#E5E5E5"> despite the</font><font color="#CCCCCC"> appearance is I'm not very</font>

488
00:22:20,480 --> 00:22:26,600
advanced at constraint solvers<font color="#E5E5E5"> could you</font>

489
00:22:23,280 --> 00:22:26,600
precise your question a<font color="#E5E5E5"> little bit</font>

490
00:22:43,250 --> 00:22:52,130
so yeah<font color="#E5E5E5"> so the what the precision was if</font>

491
00:22:50,330 --> 00:22:53,779
you need if you<font color="#E5E5E5"> want to type</font><font color="#CCCCCC"> a mail with</font>

492
00:22:52,130 --> 00:22:56,059
<font color="#CCCCCC">it you need to convince the type</font>

493
00:22:53,779 --> 00:22:58,039
environment<font color="#CCCCCC"> in the constraints so</font><font color="#E5E5E5"> we</font>

494
00:22:56,059 --> 00:22:59,120
have some ways of doing that<font color="#E5E5E5"> I don't</font>

495
00:22:58,039 --> 00:23:00,860
know yet<font color="#CCCCCC"> if they are</font><font color="#E5E5E5"> going to be</font>

496
00:22:59,120 --> 00:23:02,360
<font color="#CCCCCC">sufficient for email I'm working in a</font>

497
00:23:00,860 --> 00:23:04,729
<font color="#CCCCCC">prototype and at some point I would like</font>

498
00:23:02,360 --> 00:23:08,389
<font color="#E5E5E5">to publish a small example</font><font color="#CCCCCC"> slash paper</font>

499
00:23:04,730 --> 00:23:10,429
about<font color="#E5E5E5"> that for the moment</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> we really</font>

500
00:23:08,389 --> 00:23:12,019
crafted it for<font color="#CCCCCC"> EDA and then we are going</font>

501
00:23:10,429 --> 00:23:15,429
to<font color="#E5E5E5"> extend the semantics so that it is</font>

502
00:23:12,019 --> 00:23:15,429
<font color="#E5E5E5">useful format</font><font color="#CCCCCC"> and more</font><font color="#E5E5E5"> than that</font>

503
00:23:19,560 --> 00:23:30,440
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> very much</font>

504
00:23:21,710 --> 00:23:30,440
[Applause]

