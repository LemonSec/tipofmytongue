1
00:00:05,630 --> 00:00:13,480
I feel very<font color="#E5E5E5"> very strange because I woke</font>

2
00:00:09,469 --> 00:00:16,610
up<font color="#CCCCCC"> at</font><font color="#E5E5E5"> 3:30 this</font><font color="#CCCCCC"> morning</font><font color="#E5E5E5"> to go from</font>

3
00:00:13,480 --> 00:00:19,100
countryside of France to here so I

4
00:00:16,610 --> 00:00:23,750
really<font color="#CCCCCC"> feel jet-lagged so I hope you</font>

5
00:00:19,100 --> 00:00:28,450
don't feel the same<font color="#CCCCCC"> and at least I'll be</font>

6
00:00:23,750 --> 00:00:30,940
able<font color="#E5E5E5"> to be on time so please help me</font>

7
00:00:28,450 --> 00:00:34,010
<font color="#E5E5E5">because I tend to be a little bit chatty</font>

8
00:00:30,940 --> 00:00:38,690
<font color="#E5E5E5">for those who do not know Leonardo</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

9
00:00:34,010 --> 00:00:40,870
is the arm ecosystem<font color="#E5E5E5"> collaboration so we</font>

10
00:00:38,690 --> 00:00:43,818
have companies<font color="#CCCCCC"> like Google Facebook</font>

11
00:00:40,870 --> 00:00:48,440
Alibaba<font color="#E5E5E5"> Red Hat</font>

12
00:00:43,819 --> 00:00:49,100
Cisco<font color="#E5E5E5"> Ericsson</font><font color="#CCCCCC"> Huawei Nokia KVM and XP</font>

13
00:00:48,440 --> 00:00:52,248
<font color="#CCCCCC">ti</font>

14
00:00:49,100 --> 00:00:54,760
<font color="#CCCCCC">St well a shop</font><font color="#E5E5E5"> so many of those</font>

15
00:00:52,249 --> 00:00:57,589
<font color="#E5E5E5">companies are either building silicon or</font>

16
00:00:54,760 --> 00:00:59,718
building systems on<font color="#CCCCCC"> top of that and we</font>

17
00:00:57,589 --> 00:01:05,658
collaborate inside<font color="#CCCCCC"> lee narrow to produce</font>

18
00:00:59,719 --> 00:01:11,780
things and to push technology in<font color="#E5E5E5"> in many</font>

19
00:01:05,659 --> 00:01:14,119
different<font color="#E5E5E5"> communities and</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> of the</font>

20
00:01:11,780 --> 00:01:19,579
members there was a request to<font color="#CCCCCC"> have a</font>

21
00:01:14,119 --> 00:01:23,450
technology to to<font color="#E5E5E5"> sustain time-sensitive</font>

22
00:01:19,579 --> 00:01:28,280
networking we try to do it with the

23
00:01:23,450 --> 00:01:32,450
<font color="#E5E5E5">kernel with 500 megahertz 1 gigahertz</font>

24
00:01:28,280 --> 00:01:35,570
<font color="#E5E5E5">CPUs</font><font color="#CCCCCC"> and the result</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> latency</font>

25
00:01:32,450 --> 00:01:39,979
<font color="#CCCCCC">is</font><font color="#E5E5E5"> of jitter are not really consistent</font>

26
00:01:35,570 --> 00:01:43,339
<font color="#E5E5E5">with what applications want and when you</font>

27
00:01:39,979 --> 00:01:46,039
have when the latency<font color="#E5E5E5"> is between 20 and</font>

28
00:01:43,340 --> 00:01:48,799
40 times<font color="#E5E5E5"> what it should be and when the</font>

29
00:01:46,039 --> 00:01:52,090
jitter is 200 or 600 times what it

30
00:01:48,799 --> 00:01:55,009
should<font color="#CCCCCC"> be even</font><font color="#E5E5E5"> though we try to optimize</font>

31
00:01:52,090 --> 00:01:57,590
<font color="#E5E5E5">it does not look reasonable to think</font>

32
00:01:55,009 --> 00:02:01,939
that<font color="#CCCCCC"> we're dividing the figures by a</font>

33
00:01:57,590 --> 00:02:04,840
factor of 50<font color="#CCCCCC"> on average so that's</font><font color="#E5E5E5"> why we</font>

34
00:02:01,939 --> 00:02:10,130
had to<font color="#E5E5E5"> find a solution on userland</font>

35
00:02:04,840 --> 00:02:13,310
and then<font color="#CCCCCC"> why not Odie PDP DK to handle</font>

36
00:02:10,130 --> 00:02:15,320
that well in<font color="#E5E5E5"> the automotive industry</font>

37
00:02:13,310 --> 00:02:18,950
people<font color="#E5E5E5"> have solved the problem</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> quite</font>

38
00:02:15,320 --> 00:02:22,370
<font color="#E5E5E5">some</font><font color="#CCCCCC"> time and</font><font color="#E5E5E5"> maybe they already have</font>

39
00:02:18,950 --> 00:02:25,238
a<font color="#E5E5E5"> tcp/ip stack</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> New Zealand and access</font>

40
00:02:22,370 --> 00:02:29,170
the hardware through<font color="#E5E5E5"> proprietary systems</font>

41
00:02:25,239 --> 00:02:31,910
proprietary<font color="#E5E5E5"> methods so why not having a</font>

42
00:02:29,170 --> 00:02:35,540
standardized<font color="#CCCCCC"> method that that is</font><font color="#E5E5E5"> valid</font>

43
00:02:31,910 --> 00:02:39,230
for<font color="#CCCCCC"> everyone that is also consumable by</font>

44
00:02:35,540 --> 00:02:42,679
<font color="#E5E5E5">the PDK OTP or even DPP directly for</font>

45
00:02:39,230 --> 00:02:46,069
example<font color="#CCCCCC"> one</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> case for VPP would be to</font>

46
00:02:42,680 --> 00:02:49,940
have<font color="#CCCCCC"> ve th access direct ve th access</font>

47
00:02:46,069 --> 00:02:51,980
for container networking and have and be

48
00:02:49,940 --> 00:02:57,829
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> to have</font><font color="#E5E5E5"> a very high</font>

49
00:02:51,980 --> 00:03:01,790
<font color="#CCCCCC">performance so we</font><font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to have a very</font>

50
00:02:57,829 --> 00:03:04,760
generic solution<font color="#CCCCCC"> okay well</font><font color="#E5E5E5"> here o copy</font>

51
00:03:01,790 --> 00:03:11,090
so<font color="#E5E5E5"> why</font><font color="#CCCCCC"> zero copy if</font><font color="#E5E5E5"> you look at 100</font>

52
00:03:04,760 --> 00:03:13,429
<font color="#CCCCCC">Gigabit adapter that's 148 million</font>

53
00:03:11,090 --> 00:03:15,349
packet per second that's<font color="#E5E5E5"> roughly 15</font>

54
00:03:13,430 --> 00:03:20,650
gigabyte per second and that's roughly

55
00:03:15,349 --> 00:03:24,980
<font color="#CCCCCC">one DMA</font><font color="#E5E5E5"> channel so if you if you have</font>

56
00:03:20,650 --> 00:03:28,130
ring descriptors along with packets<font color="#CCCCCC"> +</font>

57
00:03:24,980 --> 00:03:31,608
what what was just described as the

58
00:03:28,130 --> 00:03:34,269
virtual descriptors for an abstraction

59
00:03:31,609 --> 00:03:37,160
<font color="#E5E5E5">of that and then you copy the packets</font>

60
00:03:34,269 --> 00:03:41,480
<font color="#E5E5E5">basically you have all the</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> channels of</font>

61
00:03:37,160 --> 00:03:44,480
the the<font color="#E5E5E5"> the CPU package that are fully</font>

62
00:03:41,480 --> 00:03:47,179
used for that<font color="#E5E5E5"> so then for VPP you have</font>

63
00:03:44,480 --> 00:03:48,858
the<font color="#CCCCCC"> 0 memory bandwidth</font><font color="#E5E5E5"> to look for the</font>

64
00:03:47,180 --> 00:03:52,910
routes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if you have 1 million routes</font>

65
00:03:48,859 --> 00:03:54,950
<font color="#E5E5E5">then you really have a problem so for</font>

66
00:03:52,910 --> 00:03:58,609
the design<font color="#E5E5E5"> we want to make sure that</font>

67
00:03:54,950 --> 00:04:01,280
<font color="#E5E5E5">even for 100 gigabit we still preserve</font>

68
00:03:58,609 --> 00:04:08,870
memory bandwidth for the real

69
00:04:01,280 --> 00:04:11,090
application<font color="#E5E5E5"> secure so in the past we've</font>

70
00:04:08,870 --> 00:04:14,630
<font color="#CCCCCC">been using you i/o or</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> that</font>

71
00:04:11,090 --> 00:04:16,660
<font color="#CCCCCC">or</font><font color="#E5E5E5"> VF</font><font color="#CCCCCC"> I oh no</font><font color="#E5E5E5"> mm you and in the context</font>

72
00:04:14,630 --> 00:04:20,209
of Spectre and meltdown<font color="#E5E5E5"> I would say that</font>

73
00:04:16,660 --> 00:04:22,370
we<font color="#E5E5E5"> probably wants to make sure</font><font color="#CCCCCC"> that the</font>

74
00:04:20,209 --> 00:04:28,039
memory<font color="#CCCCCC"> is a very well protected</font>

75
00:04:22,370 --> 00:04:31,240
subsystem so let's not do although<font color="#CCCCCC"> any</font>

76
00:04:28,039 --> 00:04:31,240
<font color="#E5E5E5">way other way</font><font color="#CCCCCC"> than iommu</font>

77
00:04:31,330 --> 00:04:37,359
use along<font color="#E5E5E5"> Network IO so Network IO is</font>

78
00:04:34,780 --> 00:04:42,219
not about building<font color="#E5E5E5"> a device driver it's</font>

79
00:04:37,360 --> 00:04:43,720
about just getting<font color="#E5E5E5"> the the packet</font><font color="#CCCCCC"> queues</font>

80
00:04:42,220 --> 00:04:47,050
<font color="#E5E5E5">in the packets themselves</font>

81
00:04:43,720 --> 00:04:50,310
let's not<font color="#E5E5E5"> initialize the hardware if you</font>

82
00:04:47,050 --> 00:04:55,270
look at the code the code<font color="#E5E5E5"> size for a</font>

83
00:04:50,310 --> 00:04:57,280
<font color="#E5E5E5">real tech adapter</font><font color="#CCCCCC"> it's 10,000 lines of</font>

84
00:04:55,270 --> 00:04:58,960
<font color="#E5E5E5">code and out of those 10,000 eyes of</font>

85
00:04:57,280 --> 00:05:01,090
code you may have<font color="#E5E5E5"> eight thousand</font><font color="#CCCCCC"> ninth</font>

86
00:04:58,960 --> 00:05:02,948
which are about<font color="#CCCCCC"> the different</font>

87
00:05:01,090 --> 00:05:04,568
initialization<font color="#E5E5E5"> procedure for this</font>

88
00:05:02,949 --> 00:05:07,509
particular flavor or this particular

89
00:05:04,569 --> 00:05:10,240
<font color="#E5E5E5">hardware revision and you don't want to</font>

90
00:05:07,509 --> 00:05:13,539
<font color="#CCCCCC">replicate that whole thing in</font><font color="#E5E5E5"> the PDK</font>

91
00:05:10,240 --> 00:05:15,849
<font color="#CCCCCC">ODP of EPP</font><font color="#E5E5E5"> so what you want is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> let</font>

92
00:05:13,539 --> 00:05:19,659
the kernel do what it's good at<font color="#E5E5E5"> at</font>

93
00:05:15,849 --> 00:05:27,130
driving the<font color="#E5E5E5"> devices but let the user</font>

94
00:05:19,659 --> 00:05:30,400
land capture the just<font color="#E5E5E5"> data path and</font><font color="#CCCCCC"> if</font>

95
00:05:27,130 --> 00:05:33,520
we want to<font color="#E5E5E5"> have dual stack so that's the</font>

96
00:05:30,400 --> 00:05:38,710
which means<font color="#E5E5E5"> that one port can</font><font color="#CCCCCC"> be used by</font>

97
00:05:33,520 --> 00:05:44,289
the kernel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a user on application so</font>

98
00:05:38,710 --> 00:05:46,530
the very idea<font color="#E5E5E5"> is you have</font><font color="#CCCCCC"> net-net devs</font>

99
00:05:44,289 --> 00:05:50,580
in the kernel<font color="#CCCCCC"> that have rings and</font>

100
00:05:46,530 --> 00:05:54,099
packets<font color="#E5E5E5"> and through some communication</font>

101
00:05:50,580 --> 00:05:56,979
what we want is to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to have the</font>

102
00:05:54,099 --> 00:05:59,380
<font color="#E5E5E5">Rings accessible or visible in the user</font>

103
00:05:56,979 --> 00:06:03,580
land and the packets<font color="#E5E5E5"> also controlled</font>

104
00:05:59,380 --> 00:06:08,409
through<font color="#CCCCCC"> user land but</font><font color="#E5E5E5"> what we want also</font>

105
00:06:03,580 --> 00:06:11,979
<font color="#CCCCCC">is that if you use normal if configure</font>

106
00:06:08,409 --> 00:06:16,169
or other IP route<font color="#E5E5E5"> to commands that they</font>

107
00:06:11,979 --> 00:06:18,849
can influence the user on application

108
00:06:16,169 --> 00:06:22,120
<font color="#E5E5E5">and if you the user on application</font><font color="#CCCCCC"> wants</font>

109
00:06:18,849 --> 00:06:24,430
<font color="#E5E5E5">to change the MTU it will just use the</font>

110
00:06:22,120 --> 00:06:29,550
<font color="#E5E5E5">equivalent of the net link interface or</font>

111
00:06:24,430 --> 00:06:29,550
whatever ioctl<font color="#E5E5E5"> you need to change that</font>

112
00:06:31,380 --> 00:06:34,919
so that's the

113
00:06:35,970 --> 00:06:46,710
that's<font color="#CCCCCC"> where the design goals one way</font><font color="#E5E5E5"> to</font>

114
00:06:41,680 --> 00:06:52,480
implement was just described use<font color="#CCCCCC"> f x DP</font>

115
00:06:46,710 --> 00:06:55,870
<font color="#E5E5E5">and that's a very good solution now we</font>

116
00:06:52,480 --> 00:06:57,430
have another<font color="#E5E5E5"> topic which is if you if</font>

117
00:06:55,870 --> 00:06:58,060
you go a<font color="#E5E5E5"> really high speed on the</font>

118
00:06:57,430 --> 00:07:00,400
network

119
00:06:58,060 --> 00:07:03,000
what about storage<font color="#CCCCCC"> what</font><font color="#E5E5E5"> about the other</font>

120
00:07:00,400 --> 00:07:06,549
accelerators<font color="#E5E5E5"> for crypto compression</font>

121
00:07:03,000 --> 00:07:08,110
<font color="#CCCCCC">pattern-matching</font><font color="#E5E5E5"> if you have a solution</font>

122
00:07:06,550 --> 00:07:13,630
<font color="#CCCCCC">for network but</font><font color="#E5E5E5"> you don't have a</font>

123
00:07:08,110 --> 00:07:16,480
<font color="#E5E5E5">solution for the other aspects of the</font>

124
00:07:13,630 --> 00:07:20,770
<font color="#CCCCCC">lifecycle of communications</font><font color="#E5E5E5"> then you may</font>

125
00:07:16,480 --> 00:07:25,080
<font color="#CCCCCC">just solving a part of</font><font color="#E5E5E5"> the problem so we</font>

126
00:07:20,770 --> 00:07:28,240
think<font color="#E5E5E5"> we need a solution that addresses</font>

127
00:07:25,080 --> 00:07:32,320
<font color="#CCCCCC">io in general from userland in a very</font>

128
00:07:28,240 --> 00:07:34,600
generic way<font color="#E5E5E5"> that can be applied to two</font>

129
00:07:32,320 --> 00:07:39,159
storage blocks<font color="#CCCCCC"> two to crypto</font>

130
00:07:34,600 --> 00:07:41,260
acceleration to compression etc and also

131
00:07:39,160 --> 00:07:44,680
that that that that<font color="#E5E5E5"> is able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> handle</font>

132
00:07:41,260 --> 00:07:48,310
all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> i/o models that you can find on</font>

133
00:07:44,680 --> 00:07:52,950
earth<font color="#CCCCCC"> and let's let's talk</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> i/o</font>

134
00:07:48,310 --> 00:07:57,940
models a little bit so<font color="#E5E5E5"> that's a typical</font>

135
00:07:52,950 --> 00:08:01,300
<font color="#E5E5E5">NIC so you have descriptors and</font><font color="#CCCCCC"> you have</font>

136
00:07:57,940 --> 00:08:05,850
packets<font color="#E5E5E5"> usually everyone thinks of this</font>

137
00:08:01,300 --> 00:08:09,250
model only<font color="#E5E5E5"> so you have a bunch of</font>

138
00:08:05,850 --> 00:08:11,590
buffers<font color="#E5E5E5"> fixed size buffers let's say two</font>

139
00:08:09,250 --> 00:08:14,620
<font color="#E5E5E5">kilobyte and that represents the packet</font>

140
00:08:11,590 --> 00:08:17,919
memory and then you have the descriptors

141
00:08:14,620 --> 00:08:21,280
<font color="#E5E5E5">and before before being able</font><font color="#CCCCCC"> to receive</font>

142
00:08:17,919 --> 00:08:23,950
packets<font color="#CCCCCC"> you have to state in each of</font>

143
00:08:21,280 --> 00:08:30,280
those descriptors where are the

144
00:08:23,950 --> 00:08:33,400
different buffers<font color="#CCCCCC"> so that's the</font><font color="#E5E5E5"> typical</font>

145
00:08:30,280 --> 00:08:36,789
<font color="#E5E5E5">model in that model on</font><font color="#CCCCCC"> a two megabyte</font>

146
00:08:33,400 --> 00:08:42,098
<font color="#E5E5E5">huge page you can squeeze one thousand</font>

147
00:08:36,789 --> 00:08:45,790
packets 64 byte packets or one<font color="#E5E5E5"> 1500 byte</font>

148
00:08:42,099 --> 00:08:49,449
packets<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> squeeze</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> 1000</font>

149
00:08:45,790 --> 00:08:51,610
packets<font color="#CCCCCC"> now there are other</font>

150
00:08:49,449 --> 00:08:56,560
which is coming<font color="#E5E5E5"> in in our</font><font color="#CCCCCC"> resources</font>

151
00:08:51,610 --> 00:08:59,069
environment you have<font color="#CCCCCC"> these those</font>

152
00:08:56,560 --> 00:09:03,518
descriptors but you may have<font color="#CCCCCC"> multiple</font>

153
00:08:59,069 --> 00:09:05,920
<font color="#E5E5E5">packet arrays this is not about</font><font color="#CCCCCC"> cues you</font>

154
00:09:03,519 --> 00:09:07,629
<font color="#E5E5E5">know where you have RSS and when you</font>

155
00:09:05,920 --> 00:09:09,939
want to<font color="#E5E5E5"> distribute the load</font><font color="#CCCCCC"> between</font>

156
00:09:07,629 --> 00:09:14,579
different<font color="#CCCCCC"> cues that's a different topic</font>

157
00:09:09,939 --> 00:09:19,360
here this is<font color="#E5E5E5"> about having let's say</font>

158
00:09:14,579 --> 00:09:23,319
<font color="#CCCCCC">packet cells that are 128 bytes you have</font>

159
00:09:19,360 --> 00:09:28,300
packet cells of 256<font color="#E5E5E5"> and packet cells of</font>

160
00:09:23,319 --> 00:09:32,860
<font color="#CCCCCC">2 kilobyte what</font><font color="#E5E5E5"> this means is that you</font>

161
00:09:28,300 --> 00:09:36,008
can have multiple<font color="#E5E5E5"> packet arrays and for</font>

162
00:09:32,860 --> 00:09:38,319
a<font color="#E5E5E5"> single flow you can have multiple</font>

163
00:09:36,009 --> 00:09:41,050
packet arrays which means that if<font color="#E5E5E5"> you</font>

164
00:09:38,319 --> 00:09:43,779
are<font color="#CCCCCC"> doing an IPSec offload in software</font>

165
00:09:41,050 --> 00:09:47,949
or in hardware for a single tunnel we

166
00:09:43,779 --> 00:09:48,790
can have multiple packet queues well

167
00:09:47,949 --> 00:09:50,620
sorry

168
00:09:48,790 --> 00:09:55,000
multiple packet arrays that<font color="#CCCCCC"> can be</font>

169
00:09:50,620 --> 00:10:00,790
handled<font color="#E5E5E5"> by different CPUs or different</font>

170
00:09:55,000 --> 00:10:05,949
Hardware blocks so this for example<font color="#E5E5E5"> in</font>

171
00:10:00,790 --> 00:10:08,500
the<font color="#E5E5E5"> AF</font><font color="#CCCCCC"> x DP is not yet</font><font color="#E5E5E5"> supported but</font>

172
00:10:05,949 --> 00:10:10,569
maybe that<font color="#CCCCCC"> was the</font><font color="#E5E5E5"> discussion on the</font>

173
00:10:08,500 --> 00:10:13,829
mailing list maybe<font color="#E5E5E5"> the</font><font color="#CCCCCC"> disk the model</font>

174
00:10:10,569 --> 00:10:18,699
can<font color="#CCCCCC"> be extended to</font><font color="#E5E5E5"> support that it's yet</font>

175
00:10:13,829 --> 00:10:21,638
not fully known there is another model

176
00:10:18,699 --> 00:10:25,529
<font color="#E5E5E5">for for packet reception and that's the</font>

177
00:10:21,639 --> 00:10:28,779
tape model<font color="#E5E5E5"> so you have the descriptors</font>

178
00:10:25,529 --> 00:10:31,360
<font color="#E5E5E5">that's the only common thing in all</font>

179
00:10:28,779 --> 00:10:35,439
those packet over stove<font color="#E5E5E5"> and then you</font>

180
00:10:31,360 --> 00:10:38,970
have<font color="#CCCCCC"> an unstructured memory area they</font>

181
00:10:35,439 --> 00:10:43,420
have no notion of<font color="#E5E5E5"> a packet buffer at all</font>

182
00:10:38,970 --> 00:10:46,180
so all packets can all just put<font color="#E5E5E5"> one of</font>

183
00:10:43,420 --> 00:10:48,790
after the other<font color="#E5E5E5"> or between let's say</font>

184
00:10:46,180 --> 00:10:51,250
with some placement rules but the

185
00:10:48,790 --> 00:10:54,550
<font color="#E5E5E5">hardware decides</font><font color="#CCCCCC"> exactly where it wants</font>

186
00:10:51,250 --> 00:10:57,950
<font color="#CCCCCC">to place the packets so in that case for</font>

187
00:10:54,550 --> 00:11:02,180
<font color="#CCCCCC">example</font><font color="#E5E5E5"> for a 2 megabyte</font>

188
00:10:57,950 --> 00:11:05,210
area you can squeeze<font color="#CCCCCC"> 32,000 64 byte</font>

189
00:11:02,180 --> 00:11:13,459
packet which<font color="#CCCCCC"> is a little bit</font><font color="#E5E5E5"> more than</font>

190
00:11:05,210 --> 00:11:15,860
<font color="#CCCCCC">1000 so those models</font><font color="#E5E5E5"> why do they exist</font>

191
00:11:13,460 --> 00:11:20,270
this model is essentially to be<font color="#CCCCCC"> able to</font>

192
00:11:15,860 --> 00:11:23,500
have parallelism<font color="#CCCCCC"> on a single tunnel this</font>

193
00:11:20,270 --> 00:11:27,230
one is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> is to be able to beat the DMA</font>

194
00:11:23,500 --> 00:11:32,810
transaction bottleneck that<font color="#E5E5E5"> we have on</font>

195
00:11:27,230 --> 00:11:35,600
PCI on PCI on the gen 3 times 8<font color="#E5E5E5"> you have</font>

196
00:11:32,810 --> 00:11:39,800
roughly 42 million DMA transactions per

197
00:11:35,600 --> 00:11:42,890
second<font color="#E5E5E5"> regardless of its arm Intel or</font>

198
00:11:39,800 --> 00:11:45,589
whatever that's<font color="#E5E5E5"> a PCI limitation which</font>

199
00:11:42,890 --> 00:11:47,480
means that if<font color="#CCCCCC"> you have one packet 'equal</font>

200
00:11:45,589 --> 00:11:50,270
when the image<font color="#CCCCCC"> was of</font><font color="#E5E5E5"> transaction per</font>

201
00:11:47,480 --> 00:11:53,390
second your limit<font color="#E5E5E5"> is 42 million packet</font>

202
00:11:50,270 --> 00:11:57,439
per second so if you have a 50 gig<font color="#E5E5E5"> line</font>

203
00:11:53,390 --> 00:11:59,899
card<font color="#CCCCCC"> which is in theories</font><font color="#E5E5E5"> 74 million</font>

204
00:11:57,440 --> 00:12:02,180
packet per second<font color="#E5E5E5"> if you use that model</font>

205
00:11:59,899 --> 00:12:05,060
<font color="#CCCCCC">you can't reach the line</font><font color="#E5E5E5"> rate it's not</font>

206
00:12:02,180 --> 00:12:09,079
because your software is<font color="#E5E5E5"> not good it's</font>

207
00:12:05,060 --> 00:12:14,329
<font color="#E5E5E5">not it's the the fact that the DMA</font>

208
00:12:09,080 --> 00:12:18,400
transaction limit the<font color="#CCCCCC"> D a lot of IO you</font>

209
00:12:14,330 --> 00:12:18,400
can do<font color="#CCCCCC"> so that's why those models</font><font color="#E5E5E5"> exist</font>

210
00:12:18,880 --> 00:12:26,060
for<font color="#E5E5E5"> transmit we have the same same stuff</font>

211
00:12:21,980 --> 00:12:28,760
and<font color="#E5E5E5"> you have ways to again to beat the</font>

212
00:12:26,060 --> 00:12:35,109
top of the<font color="#CCCCCC"> GMA transaction limitation on</font>

213
00:12:28,760 --> 00:12:38,630
the output<font color="#CCCCCC"> side so F packet was good but</font>

214
00:12:35,110 --> 00:12:44,390
we<font color="#CCCCCC"> need more</font><font color="#E5E5E5"> than just</font><font color="#CCCCCC"> networking and we</font>

215
00:12:38,630 --> 00:12:47,390
need to be able to<font color="#E5E5E5"> in to support all the</font>

216
00:12:44,390 --> 00:12:48,589
<font color="#CCCCCC">other models</font><font color="#E5E5E5"> DNA</font><font color="#CCCCCC"> barf has been around</font>

217
00:12:47,390 --> 00:12:52,130
for quite<font color="#E5E5E5"> some time</font>

218
00:12:48,589 --> 00:12:55,880
but it's<font color="#E5E5E5"> very</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> it's well done for</font>

219
00:12:52,130 --> 00:12:58,399
large buffers<font color="#E5E5E5"> that</font><font color="#CCCCCC"> or even more</font><font color="#E5E5E5"> than</font>

220
00:12:55,880 --> 00:13:00,980
<font color="#E5E5E5">four kilobytes but not for 64 byte</font>

221
00:12:58,399 --> 00:13:05,930
packets and 148 million packet per

222
00:13:00,980 --> 00:13:09,050
second<font color="#E5E5E5"> if you use VF IO natively you</font><font color="#CCCCCC"> use</font>

223
00:13:05,930 --> 00:13:10,219
you lose the net dev support in the

224
00:13:09,050 --> 00:13:13,939
kernel so

225
00:13:10,220 --> 00:13:17,260
we we thought that<font color="#CCCCCC"> VF IOM day which has</font>

226
00:13:13,940 --> 00:13:21,550
been introduced by Intel to support

227
00:13:17,260 --> 00:13:25,490
virtual GPUs in<font color="#E5E5E5"> qmu was the right</font>

228
00:13:21,550 --> 00:13:30,520
underlying framework to support<font color="#CCCCCC"> userland</font>

229
00:13:25,490 --> 00:13:36,080
<font color="#CCCCCC">IO for not only networking but also for</font>

230
00:13:30,520 --> 00:13:39,020
other accelerators and by the way we<font color="#E5E5E5"> fi</font>

231
00:13:36,080 --> 00:13:42,830
<font color="#E5E5E5">um the route has</font><font color="#CCCCCC"> been well is being</font>

232
00:13:39,020 --> 00:13:46,400
investigated by your Intel<font color="#E5E5E5"> which is son</font>

233
00:13:42,830 --> 00:13:49,340
<font color="#E5E5E5">min son Ming young and ran hat on one</font>

234
00:13:46,400 --> 00:13:52,819
side and Huawei is working on leveraging

235
00:13:49,340 --> 00:13:55,300
the same<font color="#CCCCCC"> vfi um dev for crypto device</font>

236
00:13:52,820 --> 00:13:55,300
support

237
00:14:01,770 --> 00:14:14,189
so one thing we we ended up<font color="#E5E5E5"> doing is we</font>

238
00:14:10,100 --> 00:14:17,460
separate the packets and<font color="#E5E5E5"> the Rings we</font>

239
00:14:14,190 --> 00:14:20,840
say that the Rings<font color="#CCCCCC"> are the the entities</font>

240
00:14:17,460 --> 00:14:23,820
that<font color="#CCCCCC"> are managed by by the</font><font color="#E5E5E5"> kernel</font>

241
00:14:20,840 --> 00:14:25,560
<font color="#E5E5E5">creating a ring correcting a</font><font color="#CCCCCC"> Q can be</font>

242
00:14:23,820 --> 00:14:27,600
very complicated<font color="#E5E5E5"> depending on the</font>

243
00:14:25,560 --> 00:14:29,369
<font color="#E5E5E5">hardware so we don't want the user</font><font color="#CCCCCC"> on</font>

244
00:14:27,600 --> 00:14:31,740
<font color="#E5E5E5">application to deal with that complexity</font>

245
00:14:29,370 --> 00:14:33,630
<font color="#E5E5E5">at the same time also when we do</font><font color="#CCCCCC"> it when</font>

246
00:14:31,740 --> 00:14:35,370
<font color="#E5E5E5">we when</font><font color="#CCCCCC"> you transition from kernel to</font>

247
00:14:33,630 --> 00:14:40,320
user on you don't want to have a

248
00:14:35,370 --> 00:14:41,640
undefined ring you may have an empty

249
00:14:40,320 --> 00:14:45,660
ring but<font color="#CCCCCC"> you don't want to have an</font>

250
00:14:41,640 --> 00:14:47,970
undefined<font color="#E5E5E5"> ring so the idea was to keep</font>

251
00:14:45,660 --> 00:14:51,000
the<font color="#CCCCCC"> lifecycle of</font><font color="#E5E5E5"> the Rings inside the</font>

252
00:14:47,970 --> 00:14:57,080
kernel<font color="#E5E5E5"> and just bring the packet memory</font>

253
00:14:51,000 --> 00:15:02,760
handling in<font color="#E5E5E5"> into userland and that's</font>

254
00:14:57,080 --> 00:15:05,190
that's<font color="#E5E5E5"> what what happens for the</font><font color="#CCCCCC"> the</font>

255
00:15:02,760 --> 00:15:08,850
<font color="#CCCCCC">lifecycle of an application</font><font color="#E5E5E5"> that they</font>

256
00:15:05,190 --> 00:15:12,990
choose<font color="#CCCCCC"> let em Dave</font><font color="#E5E5E5"> so first of all we</font>

257
00:15:08,850 --> 00:15:16,830
want to to make<font color="#CCCCCC"> sure that there is</font><font color="#E5E5E5"> a</font>

258
00:15:12,990 --> 00:15:19,560
limited or zero difference<font color="#E5E5E5"> from a code</font>

259
00:15:16,830 --> 00:15:22,800
perspective<font color="#E5E5E5"> when the net</font><font color="#CCCCCC"> em dev is</font>

260
00:15:19,560 --> 00:15:26,010
activated or not<font color="#E5E5E5"> in in the kernel</font><font color="#CCCCCC"> so if</font>

261
00:15:22,800 --> 00:15:30,770
you have a fourth wheel driver<font color="#E5E5E5"> if you</font>

262
00:15:26,010 --> 00:15:34,890
load it it will behave<font color="#CCCCCC"> exactly as</font><font color="#E5E5E5"> as if</font>

263
00:15:30,770 --> 00:15:37,110
the<font color="#CCCCCC"> the additions</font><font color="#E5E5E5"> the patches were not</font>

264
00:15:34,890 --> 00:15:39,030
there but if you<font color="#E5E5E5"> have this global enable</font>

265
00:15:37,110 --> 00:15:43,140
parameter then there is a little<font color="#E5E5E5"> bit of</font>

266
00:15:39,030 --> 00:15:46,050
change<font color="#E5E5E5"> in the code in the code path what</font>

267
00:15:43,140 --> 00:15:49,260
<font color="#E5E5E5">the change do is essentially make sure</font>

268
00:15:46,050 --> 00:15:51,810
that we don't<font color="#E5E5E5"> create security issues so</font>

269
00:15:49,260 --> 00:15:54,830
we make sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the Rings are pagesize</font>

270
00:15:51,810 --> 00:16:00,420
aligned<font color="#CCCCCC"> in a number</font><font color="#E5E5E5"> of things</font><font color="#CCCCCC"> like that</font>

271
00:15:54,830 --> 00:16:05,460
once the<font color="#E5E5E5"> driver is loaded we have to</font>

272
00:16:00,420 --> 00:16:09,270
capture<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> queues</font><font color="#E5E5E5"> in New</font><font color="#CCCCCC"> Zealand so</font>

273
00:16:05,460 --> 00:16:11,610
we do a set of configuration those

274
00:16:09,270 --> 00:16:13,670
configurations are coming<font color="#CCCCCC"> directly from</font>

275
00:16:11,610 --> 00:16:17,570
<font color="#E5E5E5">the Intel</font><font color="#CCCCCC"> BFI</font>

276
00:16:13,670 --> 00:16:22,760
<font color="#E5E5E5">the framework to build virtual GPUs but</font>

277
00:16:17,570 --> 00:16:25,460
we use<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> create virtual</font><font color="#CCCCCC"> NICs we</font>

278
00:16:22,760 --> 00:16:28,700
ensure<font color="#CCCCCC"> that the transition from Colonel</font>

279
00:16:25,460 --> 00:16:31,820
to userland<font color="#E5E5E5"> happens in a very in a</font>

280
00:16:28,700 --> 00:16:38,330
smooth way<font color="#E5E5E5"> and we leverage a very</font>

281
00:16:31,820 --> 00:16:42,920
generic<font color="#E5E5E5"> vfi um the framework to pass all</font>

282
00:16:38,330 --> 00:16:47,480
the relevant structures<font color="#E5E5E5"> to control the</font>

283
00:16:42,920 --> 00:16:50,060
the<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> the doorbells the</font>

284
00:16:47,480 --> 00:16:58,070
different if it's a PCI device the

285
00:16:50,060 --> 00:17:00,530
different config<font color="#E5E5E5"> spaces etc so when the</font>

286
00:16:58,070 --> 00:17:06,230
application starts<font color="#CCCCCC"> its again</font><font color="#E5E5E5"> it's just</font>

287
00:17:00,530 --> 00:17:08,300
<font color="#E5E5E5">using the</font><font color="#CCCCCC"> VFA um dev system</font><font color="#E5E5E5"> column so we</font>

288
00:17:06,230 --> 00:17:11,240
have not<font color="#E5E5E5"> defined that that's already in</font>

289
00:17:08,300 --> 00:17:16,790
kernel<font color="#E5E5E5"> followed</font><font color="#CCCCCC"> ten we just make</font><font color="#E5E5E5"> sure</font>

290
00:17:11,240 --> 00:17:20,260
that<font color="#CCCCCC"> we we added some semantics into</font>

291
00:17:16,790 --> 00:17:27,050
into the framework<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> about</font>

292
00:17:20,260 --> 00:17:30,940
packet<font color="#E5E5E5"> queues and in packet arrays and</font>

293
00:17:27,050 --> 00:17:34,850
then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> userland</font><font color="#E5E5E5"> actually does the</font>

294
00:17:30,940 --> 00:17:36,350
allocation of<font color="#CCCCCC"> memory in a</font><font color="#E5E5E5"> way that is</font>

295
00:17:34,850 --> 00:17:39,080
consistent with<font color="#E5E5E5"> the different idea</font>

296
00:17:36,350 --> 00:17:41,840
models we we saw and there is<font color="#E5E5E5"> something</font>

297
00:17:39,080 --> 00:17:43,480
that<font color="#E5E5E5"> that has to</font><font color="#CCCCCC"> be done in this context</font>

298
00:17:41,840 --> 00:17:46,189
as<font color="#CCCCCC"> we're dealing directly with the</font>

299
00:17:43,480 --> 00:17:48,800
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> there is one thing which is</font><font color="#CCCCCC"> a</font>

300
00:17:46,190 --> 00:17:53,480
<font color="#E5E5E5">little bit complex and that's DMA</font>

301
00:17:48,800 --> 00:17:56,720
<font color="#E5E5E5">syncing so in some architectures DMA</font>

302
00:17:53,480 --> 00:17:58,510
operations are always coherent which

303
00:17:56,720 --> 00:18:04,130
means that you don't<font color="#E5E5E5"> have to deal with</font>

304
00:17:58,510 --> 00:18:06,470
<font color="#CCCCCC">trash</font><font color="#E5E5E5"> validation or flushing in those</font>

305
00:18:04,130 --> 00:18:08,810
architectures but most architectures are

306
00:18:06,470 --> 00:18:12,440
not like<font color="#E5E5E5"> that and you need to deal</font><font color="#CCCCCC"> with</font>

307
00:18:08,810 --> 00:18:15,889
<font color="#E5E5E5">that and so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> means that at some</font>

308
00:18:12,440 --> 00:18:18,500
<font color="#CCCCCC">point</font><font color="#E5E5E5"> you may have</font><font color="#CCCCCC"> to do what the kernel</font>

309
00:18:15,890 --> 00:18:22,310
does<font color="#E5E5E5"> but in a smaller way so that we</font>

310
00:18:18,500 --> 00:18:24,440
don't<font color="#CCCCCC"> lose the performance by doing DMA</font>

311
00:18:22,310 --> 00:18:26,908
<font color="#CCCCCC">syncs on every packet you may want to do</font>

312
00:18:24,440 --> 00:18:36,749
like VPP<font color="#E5E5E5"> you may want to do the</font>

313
00:18:26,909 --> 00:18:39,239
many<font color="#E5E5E5"> sinks on a vector of packets so</font>

314
00:18:36,749 --> 00:18:42,330
what<font color="#E5E5E5"> this</font><font color="#CCCCCC"> means in terms of code</font><font color="#E5E5E5"> we</font>

315
00:18:39,239 --> 00:18:46,679
<font color="#E5E5E5">tried that on on a number of systems and</font>

316
00:18:42,330 --> 00:18:49,710
that's<font color="#E5E5E5"> the the kernel driver could code</font>

317
00:18:46,679 --> 00:18:52,229
base and that's the the kernel and user

318
00:18:49,710 --> 00:18:56,549
along lines that have<font color="#E5E5E5"> been added to</font>

319
00:18:52,229 --> 00:19:01,379
actually do<font color="#E5E5E5"> packet i/o if you look at</font>

320
00:18:56,549 --> 00:19:03,239
the DPD<font color="#CCCCCC"> KPM</font><font color="#E5E5E5"> d44 for this we're closer to</font>

321
00:19:01,379 --> 00:19:07,259
<font color="#E5E5E5">thirty thousand</font><font color="#CCCCCC"> nine because</font><font color="#E5E5E5"> it's</font>

322
00:19:03,239 --> 00:19:13,950
replicating the same stuff well here

323
00:19:07,259 --> 00:19:21,269
<font color="#E5E5E5">we're looking at a very reduced now if</font>

324
00:19:13,950 --> 00:19:25,999
we<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> performance</font><font color="#E5E5E5"> so on this 40 gig</font>

325
00:19:21,269 --> 00:19:30,749
card on the transmit side we reach the

326
00:19:25,999 --> 00:19:33,779
the DMA transaction per second rate on

327
00:19:30,749 --> 00:19:35,759
this one we don't<font color="#E5E5E5"> know if if it's a</font>

328
00:19:33,779 --> 00:19:40,679
hardware limit or if it's if it's the

329
00:19:35,759 --> 00:19:44,820
way we actually<font color="#E5E5E5"> handled the hardware for</font>

330
00:19:40,679 --> 00:19:46,409
this<font color="#CCCCCC"> channel card will beat the</font><font color="#E5E5E5"> GMA</font>

331
00:19:44,820 --> 00:19:49,168
transaction per second<font color="#E5E5E5"> because they have</font>

332
00:19:46,409 --> 00:19:51,899
a<font color="#E5E5E5"> value model that allows it and we know</font>

333
00:19:49,169 --> 00:19:56,429
that when we don't know how to properly

334
00:19:51,899 --> 00:20:00,689
drive the hardware yet<font color="#E5E5E5"> and talking with</font>

335
00:19:56,429 --> 00:20:03,720
with the<font color="#CCCCCC"> channel guys</font><font color="#E5E5E5"> we know that for</font>

336
00:20:00,690 --> 00:20:07,830
the the<font color="#E5E5E5"> t 650 gig card will be able to</font>

337
00:20:03,720 --> 00:20:10,289
receive and transmit at line rate<font color="#E5E5E5"> but</font>

338
00:20:07,830 --> 00:20:13,639
that's that's<font color="#E5E5E5"> the goal to for the</font><font color="#CCCCCC"> next</font>

339
00:20:10,289 --> 00:20:13,639
the<font color="#CCCCCC"> next few</font><font color="#E5E5E5"> weeks</font>

340
00:20:29,000 --> 00:20:38,929
yes<font color="#E5E5E5"> so what's next</font><font color="#CCCCCC"> I think I'm running</font>

341
00:20:36,120 --> 00:20:43,469
<font color="#CCCCCC">and I'm good</font>

342
00:20:38,929 --> 00:20:45,240
we haven't yet pushed<font color="#E5E5E5"> an RFC</font><font color="#CCCCCC"> because we</font>

343
00:20:43,470 --> 00:20:49,950
<font color="#CCCCCC">needed to</font><font color="#E5E5E5"> make sure that at</font><font color="#CCCCCC"> least it</font>

344
00:20:45,240 --> 00:20:53,100
works<font color="#E5E5E5"> it was not was not clear and we</font>

345
00:20:49,950 --> 00:20:57,390
really would like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> with the FX DP</font>

346
00:20:53,100 --> 00:21:02,330
<font color="#E5E5E5">guy so hopefully we'll be able to to</font>

347
00:20:57,390 --> 00:21:02,330
talk with a with a beer<font color="#E5E5E5"> or later today</font>

348
00:21:02,780 --> 00:21:08,789
we don't<font color="#CCCCCC"> really want to say that</font><font color="#E5E5E5"> that's</font>

349
00:21:05,220 --> 00:21:11,730
<font color="#E5E5E5">the way to do things we'd like that the</font>

350
00:21:08,789 --> 00:21:14,220
<font color="#E5E5E5">community finds a way that is acceptable</font>

351
00:21:11,730 --> 00:21:18,510
<font color="#E5E5E5">so that we reach a certain performance</font>

352
00:21:14,220 --> 00:21:22,049
<font color="#E5E5E5">level and a certain let's say generosity</font>

353
00:21:18,510 --> 00:21:25,740
<font color="#E5E5E5">of architecture support and also maybe</font>

354
00:21:22,049 --> 00:21:31,710
go a little bit beyond the network so

355
00:21:25,740 --> 00:21:39,049
this is really<font color="#E5E5E5"> about discussion now the</font>

356
00:21:31,710 --> 00:21:41,309
<font color="#E5E5E5">colonel has no that's a personal topic</font>

357
00:21:39,049 --> 00:21:45,720
usually<font color="#CCCCCC"> the colonel considered the</font>

358
00:21:41,309 --> 00:21:47,940
hardware is good<font color="#E5E5E5"> that it drives it and</font>

359
00:21:45,720 --> 00:21:51,030
<font color="#E5E5E5">that that's that that's that's good but</font>

360
00:21:47,940 --> 00:21:54,510
what happened with the management<font color="#E5E5E5"> engine</font>

361
00:21:51,030 --> 00:21:58,200
and all those stuff<font color="#E5E5E5"> and the fact that</font>

362
00:21:54,510 --> 00:22:00,390
GPUs have programs running on it<font color="#CCCCCC"> that</font>

363
00:21:58,200 --> 00:22:03,510
network cards have programs running on

364
00:22:00,390 --> 00:22:10,669
<font color="#E5E5E5">it you culturally</font><font color="#CCCCCC"> trust the car to not</font>

365
00:22:03,510 --> 00:22:14,549
do<font color="#CCCCCC"> DMA on any area of</font><font color="#E5E5E5"> memory so my I</font>

366
00:22:10,669 --> 00:22:18,900
would like we all always consider<font color="#E5E5E5"> that</font>

367
00:22:14,549 --> 00:22:22,200
<font color="#E5E5E5">devices should always be now behind</font>

368
00:22:18,900 --> 00:22:24,120
iommu so that whatever<font color="#E5E5E5"> happened inside</font>

369
00:22:22,200 --> 00:22:28,340
the device the firmware<font color="#E5E5E5"> the software</font>

370
00:22:24,120 --> 00:22:28,340
does<font color="#CCCCCC"> not attack the</font><font color="#E5E5E5"> kernel from outside</font>

371
00:22:29,000 --> 00:22:35,429
the use of the S which is the<font color="#E5E5E5"> coherent</font>

372
00:22:32,370 --> 00:22:39,090
interconnects so you have<font color="#CCCCCC"> c6 you</font><font color="#E5E5E5"> have</font>

373
00:22:35,429 --> 00:22:41,270
open<font color="#CCCCCC"> Cappy you have Intel has</font><font color="#E5E5E5"> I don't</font>

374
00:22:39,090 --> 00:22:46,480
know the name for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know if I</font>

375
00:22:41,270 --> 00:22:49,730
<font color="#E5E5E5">know the name for that but anyways those</font>

376
00:22:46,480 --> 00:22:53,240
models will radically<font color="#E5E5E5"> change how we</font>

377
00:22:49,730 --> 00:22:54,980
should build device drivers because for

378
00:22:53,240 --> 00:22:59,600
example we<font color="#E5E5E5"> always think that there is</font>

379
00:22:54,980 --> 00:23:01,610
DMA so we have a packet and<font color="#CCCCCC"> we want to</font>

380
00:22:59,600 --> 00:23:05,899
move<font color="#E5E5E5"> that package from</font><font color="#CCCCCC"> the car to the</font>

381
00:23:01,610 --> 00:23:07,760
<font color="#E5E5E5">host but with coherent interconnects</font><font color="#CCCCCC"> it</font>

382
00:23:05,900 --> 00:23:10,460
will<font color="#E5E5E5"> just be able to pass a pointer and</font>

383
00:23:07,760 --> 00:23:11,840
say that's<font color="#E5E5E5"> the packet and if you want to</font>

384
00:23:10,460 --> 00:23:14,360
access just<font color="#E5E5E5"> the header you will just</font>

385
00:23:11,840 --> 00:23:14,720
have but you will bear the<font color="#E5E5E5"> cost of the</font>

386
00:23:14,360 --> 00:23:17,030
header

387
00:23:14,720 --> 00:23:20,060
there will be no transport of all the

388
00:23:17,030 --> 00:23:23,870
<font color="#E5E5E5">packet from</font><font color="#CCCCCC"> the hook from the adapter to</font>

389
00:23:20,060 --> 00:23:26,240
the<font color="#CCCCCC"> host memory which</font><font color="#E5E5E5"> means that</font>

390
00:23:23,870 --> 00:23:31,879
typically<font color="#E5E5E5"> we try to avoid scatter gather</font>

391
00:23:26,240 --> 00:23:35,870
list and have tail room and<font color="#E5E5E5"> head room to</font>

392
00:23:31,880 --> 00:23:38,360
be<font color="#CCCCCC"> able to add tunnel headers but with</font>

393
00:23:35,870 --> 00:23:42,949
c6<font color="#CCCCCC"> generally coherent interconnects that</font>

394
00:23:38,360 --> 00:23:46,810
may be totally<font color="#E5E5E5"> useless so I think this</font>

395
00:23:42,950 --> 00:23:50,810
will<font color="#CCCCCC"> change the</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> we do</font><font color="#E5E5E5"> drivers and</font>

396
00:23:46,810 --> 00:23:53,899
Gen Z is almost multiplying the memory

397
00:23:50,810 --> 00:23:56,510
bandwidth by a factor of<font color="#CCCCCC"> six to eight so</font>

398
00:23:53,900 --> 00:24:03,230
this will<font color="#CCCCCC"> also change how we'll see</font>

399
00:23:56,510 --> 00:24:06,110
<font color="#E5E5E5">memory and because</font><font color="#CCCCCC"> of that I would like</font>

400
00:24:03,230 --> 00:24:12,730
<font color="#E5E5E5">those ideas to be integrated in in the</font>

401
00:24:06,110 --> 00:24:12,729
user<font color="#CCCCCC"> on frameworks and I'm done</font>

402
00:24:15,230 --> 00:24:19,059
so any questions

403
00:24:27,870 --> 00:24:43,439
<font color="#CCCCCC">while do I create a bi-directional</font>

404
00:24:30,150 --> 00:24:43,440
mapping remain the during descriptors

405
00:25:02,170 --> 00:25:18,160
<font color="#CCCCCC">and on</font><font color="#E5E5E5"> see by direction sorry in the</font>

406
00:25:11,750 --> 00:25:22,430
middle ah yes<font color="#CCCCCC"> bidirectional</font><font color="#E5E5E5"> yes because</font>

407
00:25:18,160 --> 00:25:25,610
if you do a packet forward<font color="#E5E5E5"> from point A</font>

408
00:25:22,430 --> 00:25:31,340
to point B when<font color="#CCCCCC"> you when you first get</font>

409
00:25:25,610 --> 00:25:32,959
the buffer<font color="#E5E5E5"> you don't know what you want</font>

410
00:25:31,340 --> 00:25:35,689
to be<font color="#E5E5E5"> flexible in the way</font><font color="#CCCCCC"> you will be</font>

411
00:25:32,960 --> 00:25:38,600
<font color="#CCCCCC">sinking so you can allocate the the</font>

412
00:25:35,690 --> 00:25:41,510
buffers of<font color="#E5E5E5"> bi-directional</font><font color="#CCCCCC"> and then do</font>

413
00:25:38,600 --> 00:25:42,980
the<font color="#CCCCCC"> mapping and</font><font color="#E5E5E5"> the latest moment but</font>

414
00:25:41,510 --> 00:25:47,629
<font color="#E5E5E5">essentially what is important is that</font>

415
00:25:42,980 --> 00:25:49,760
the iommu<font color="#E5E5E5"> domain has to span all all the</font>

416
00:25:47,630 --> 00:25:54,100
<font color="#CCCCCC">i/o VA has to span</font><font color="#E5E5E5"> all the devices so</font>

417
00:25:49,760 --> 00:25:56,840
<font color="#CCCCCC">that one Iove address is</font><font color="#E5E5E5"> valid for</font><font color="#CCCCCC"> any</font>

418
00:25:54,100 --> 00:26:00,139
descriptor that<font color="#CCCCCC"> you will put it put</font><font color="#E5E5E5"> into</font>

419
00:25:56,840 --> 00:26:05,540
<font color="#E5E5E5">I don't know if it makes any good</font>

420
00:26:00,140 --> 00:26:07,940
English descriptors are different they

421
00:26:05,540 --> 00:26:11,360
are as they are<font color="#E5E5E5"> maintained by the kernel</font>

422
00:26:07,940 --> 00:26:13,730
the<font color="#E5E5E5"> evidence</font><font color="#CCCCCC"> they are not in</font><font color="#E5E5E5"> a separate</font>

423
00:26:11,360 --> 00:26:16,060
i/o VA but we can consider that<font color="#E5E5E5"> they are</font>

424
00:26:13,730 --> 00:26:19,910
<font color="#E5E5E5">in a separate i/o VA on which we have a</font>

425
00:26:16,060 --> 00:26:24,020
<font color="#CCCCCC">long mapping but uncontrollably</font>

426
00:26:19,910 --> 00:26:28,310
the the best address of<font color="#CCCCCC"> that because</font>

427
00:26:24,020 --> 00:26:31,160
that's the<font color="#E5E5E5"> kernel who decide and when</font>

428
00:26:28,310 --> 00:26:31,700
when we map those those areas from<font color="#CCCCCC"> New</font>

429
00:26:31,160 --> 00:26:36,590
<font color="#CCCCCC">Zealand</font>

430
00:26:31,700 --> 00:26:40,010
we never specify the DMA or the<font color="#CCCCCC"> base</font>

431
00:26:36,590 --> 00:26:43,250
address we just<font color="#E5E5E5"> specify a VF I um</font>

432
00:26:40,010 --> 00:26:44,990
they've<font color="#E5E5E5"> I</font><font color="#CCCCCC"> Region ID which will be then</font>

433
00:26:43,250 --> 00:26:51,680
translated so that we don't mess around

434
00:26:44,990 --> 00:26:53,270
with addresses from<font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> okay so</font>

435
00:26:51,680 --> 00:26:54,680
we have no<font color="#CCCCCC"> more time for questions I'm</font>

436
00:26:53,270 --> 00:26:55,660
afraid<font color="#E5E5E5"> Francois</font>

437
00:26:54,680 --> 00:26:59,670
thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

438
00:26:55,660 --> 00:27:02,779
[Applause]

439
00:26:59,670 --> 00:27:02,779
[Music]

