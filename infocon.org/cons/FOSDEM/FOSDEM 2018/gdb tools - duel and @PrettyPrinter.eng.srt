1
00:00:08,850 --> 00:00:14,370
all of this talk about<font color="#CCCCCC"> Judy</font><font color="#E5E5E5"> beetles</font>

2
00:00:11,370 --> 00:00:16,259
and Judy beetles is so of course I see

3
00:00:14,370 --> 00:00:18,360
many have opened the laptop<font color="#CCCCCC"> I start from</font>

4
00:00:16,260 --> 00:00:21,539
the what usually should be the last

5
00:00:18,360 --> 00:00:23,880
slide<font color="#E5E5E5"> so</font><font color="#CCCCCC"> gdb</font><font color="#E5E5E5"> tools is a Python package</font>

6
00:00:21,539 --> 00:00:26,430
it's in its own<font color="#E5E5E5"> PI P I so you can</font>

7
00:00:23,880 --> 00:00:27,990
install<font color="#E5E5E5"> it and you can</font><font color="#CCCCCC"> actually install</font>

8
00:00:26,430 --> 00:00:29,700
that now if<font color="#E5E5E5"> you ever looked up open then</font>

9
00:00:27,990 --> 00:00:34,079
<font color="#E5E5E5">you can try some simple</font><font color="#CCCCCC"> things you're in</font>

10
00:00:29,700 --> 00:00:38,160
the dog but first<font color="#CCCCCC"> i'll be</font><font color="#E5E5E5"> talking about</font>

11
00:00:34,079 --> 00:00:40,620
<font color="#E5E5E5">page a painter and gdb</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> contains</font>

12
00:00:38,160 --> 00:00:43,078
<font color="#E5E5E5">it's a</font><font color="#CCCCCC"> Python</font><font color="#E5E5E5"> package again dates of two</font>

13
00:00:40,620 --> 00:00:44,699
modulus<font color="#E5E5E5"> and ribbon to the first one</font><font color="#CCCCCC"> dual</font>

14
00:00:43,079 --> 00:00:47,670
<font color="#CCCCCC">at</font><font color="#E5E5E5"> the second one and that's</font><font color="#CCCCCC"> artful</font><font color="#E5E5E5"> in</font>

15
00:00:44,699 --> 00:00:52,318
<font color="#E5E5E5">3d printer and first let Knox who know</font>

16
00:00:47,670 --> 00:00:55,559
<font color="#CCCCCC">that gdb has a Python API yeah obviously</font>

17
00:00:52,319 --> 00:00:58,019
<font color="#CCCCCC">and who tried to do</font><font color="#E5E5E5"> anything with Python</font>

18
00:00:55,559 --> 00:01:01,349
in<font color="#CCCCCC"> gdb and who knows what</font><font color="#E5E5E5"> pretty</font>

19
00:00:58,019 --> 00:01:10,740
printers are okay<font color="#E5E5E5"> in code or</font><font color="#CCCCCC"> tap little</font>

20
00:01:01,350 --> 00:01:11,909
<font color="#E5E5E5">in their situation yeah</font><font color="#CCCCCC"> okay so then at</font>

21
00:01:10,740 --> 00:01:15,210
<font color="#E5E5E5">least some of you will recognize the</font>

22
00:01:11,909 --> 00:01:18,240
<font color="#CCCCCC">plane and some others will see an</font>

23
00:01:15,210 --> 00:01:20,669
<font color="#E5E5E5">introduction so that's how most of</font>

24
00:01:18,240 --> 00:01:22,560
examples I'm unmarried<font color="#CCCCCC"> eBay development</font>

25
00:01:20,670 --> 00:01:24,920
before<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> was my</font><font color="#CCCCCC"> stall developer so</font>

26
00:01:22,560 --> 00:01:28,140
I spent many hours per week inside gdb

27
00:01:24,920 --> 00:01:30,270
inside MySQL D and most of the examples

28
00:01:28,140 --> 00:01:31,710
<font color="#E5E5E5">in this talk are taken straight from a</font>

29
00:01:30,270 --> 00:01:35,070
gdb he<font color="#CCCCCC"> serves</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> practical they</font>

30
00:01:31,710 --> 00:01:36,929
all real nothing hypothetical so that's

31
00:01:35,070 --> 00:01:38,250
basically how<font color="#E5E5E5"> usually my debugging</font>

32
00:01:36,930 --> 00:01:40,829
session goes when I need<font color="#E5E5E5"> to print some</font>

33
00:01:38,250 --> 00:01:42,990
of<font color="#E5E5E5"> that say so say</font><font color="#CCCCCC"> either structures</font>

34
00:01:40,829 --> 00:01:44,699
this one is a bitmap and I want to<font color="#E5E5E5"> print</font>

35
00:01:42,990 --> 00:01:46,320
it<font color="#CCCCCC"> so I printed and</font><font color="#E5E5E5"> then I get</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

36
00:01:44,700 --> 00:01:49,649
structure<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> I need to print the</font>

37
00:01:46,320 --> 00:01:52,258
array<font color="#CCCCCC"> of integers and only 52 bits of it</font>

38
00:01:49,649 --> 00:01:56,359
are violet so this is at this end<font color="#E5E5E5"> of it</font>

39
00:01:52,259 --> 00:01:58,439
is red and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is some garbage so but I</font>

40
00:01:56,359 --> 00:01:59,939
shouldn't don't want to care<font color="#E5E5E5"> about</font>

41
00:01:58,439 --> 00:02:03,779
garbage<font color="#E5E5E5"> I just want to see those bits</font>

42
00:01:59,939 --> 00:02:06,538
and that's a string<font color="#E5E5E5"> object inside mesh</font>

43
00:02:03,780 --> 00:02:08,038
<font color="#CCCCCC">ADB it's a thing as a point and</font><font color="#E5E5E5"> this is</font>

44
00:02:06,539 --> 00:02:09,899
<font color="#CCCCCC">an interesting part because this is the</font>

45
00:02:08,038 --> 00:02:11,369
length<font color="#E5E5E5"> and the rest again is garbage</font><font color="#CCCCCC"> and</font>

46
00:02:09,899 --> 00:02:12,690
I<font color="#CCCCCC"> don't really want to</font><font color="#E5E5E5"> see the rest of</font>

47
00:02:11,370 --> 00:02:15,480
<font color="#E5E5E5">it I</font><font color="#CCCCCC"> just want to see the string</font><font color="#E5E5E5"> and</font>

48
00:02:12,690 --> 00:02:18,150
that's<font color="#E5E5E5"> why gdb introduced pretty</font>

49
00:02:15,480 --> 00:02:21,599
printers<font color="#E5E5E5"> yeah and there are</font><font color="#CCCCCC"> also complex</font>

50
00:02:18,150 --> 00:02:24,030
<font color="#E5E5E5">structures and let's my what</font>

51
00:02:21,599 --> 00:02:28,200
probably most hated example so<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> go</font>

52
00:02:24,030 --> 00:02:30,569
mode<font color="#E5E5E5"> as a 64-bit integer where every</font><font color="#CCCCCC"> bit</font>

53
00:02:28,200 --> 00:02:32,578
means something and when I want<font color="#E5E5E5"> to print</font>

54
00:02:30,569 --> 00:02:33,958
<font color="#E5E5E5">it so I print it I get some number and</font>

55
00:02:32,579 --> 00:02:35,819
then I<font color="#E5E5E5"> pretend binary and then I tried</font>

56
00:02:33,959 --> 00:02:37,379
to<font color="#E5E5E5"> figure out what</font><font color="#CCCCCC"> combination of</font><font color="#E5E5E5"> bits</font>

57
00:02:35,819 --> 00:02:39,929
creates<font color="#E5E5E5"> exactly the same number and then</font>

58
00:02:37,379 --> 00:02:41,849
I eventually arrive at<font color="#E5E5E5"> the same time but</font>

59
00:02:39,930 --> 00:02:43,920
<font color="#E5E5E5">then I got it that actually</font><font color="#CCCCCC"> takes two</font>

60
00:02:41,849 --> 00:02:45,750
<font color="#CCCCCC">minutes just</font><font color="#E5E5E5"> to print a variable and</font>

61
00:02:43,920 --> 00:02:49,230
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> many debate later this from</font>

62
00:02:45,750 --> 00:02:50,489
GFC<font color="#E5E5E5"> it's in your system includes it's a</font>

63
00:02:49,230 --> 00:02:52,858
kind of<font color="#E5E5E5"> storage when you print that</font><font color="#CCCCCC"> you</font>

64
00:02:50,489 --> 00:02:54,870
get a first number which tells<font color="#CCCCCC"> you what</font>

65
00:02:52,859 --> 00:02:56,849
those bytes means they<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> import</font>

66
00:02:54,870 --> 00:02:59,129
interpret them according<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> number</font>

67
00:02:56,849 --> 00:03:01,649
<font color="#E5E5E5">and I happen to know that one means</font><font color="#CCCCCC"> ipv4</font>

68
00:02:59,129 --> 00:03:04,108
so I can<font color="#E5E5E5"> print this when this number 10</font>

69
00:03:01,650 --> 00:03:08,250
I get ipv4 it's not the easiest to print

70
00:03:04,109 --> 00:03:11,069
<font color="#CCCCCC">easy to debug structure so this why GDB</font>

71
00:03:08,250 --> 00:03:15,629
GDB has constant of pretty printers and

72
00:03:11,069 --> 00:03:18,238
when I find a<font color="#E5E5E5"> good piece top would have</font>

73
00:03:15,629 --> 00:03:19,709
just have shown I created<font color="#E5E5E5"> I finally</font>

74
00:03:18,239 --> 00:03:22,469
decided to<font color="#E5E5E5"> write a printer printer and</font>

75
00:03:19,709 --> 00:03:24,030
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> has a pretty good</font><font color="#E5E5E5"> documentation</font>

76
00:03:22,469 --> 00:03:25,888
so this is how it usually goes<font color="#CCCCCC"> so you</font>

77
00:03:24,030 --> 00:03:27,509
<font color="#E5E5E5">need to create a class that</font><font color="#CCCCCC"> gets gdb</font>

78
00:03:25,889 --> 00:03:29,430
value is an<font color="#E5E5E5"> argument so</font><font color="#CCCCCC"> you need to save</font>

79
00:03:27,509 --> 00:03:31,649
<font color="#E5E5E5">it because later you'll need to</font><font color="#CCCCCC"> use it</font>

80
00:03:29,430 --> 00:03:33,299
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to to write the actual</font>

81
00:03:31,650 --> 00:03:35,699
<font color="#CCCCCC">code</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you care about how to convert</font>

82
00:03:33,299 --> 00:03:37,650
<font color="#CCCCCC">the value</font><font color="#E5E5E5"> to the string that you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

83
00:03:35,699 --> 00:03:38,849
see when you're debugging<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then entry</font>

84
00:03:37,650 --> 00:03:41,250
then I do<font color="#E5E5E5"> it for the second</font><font color="#CCCCCC"> class</font>

85
00:03:38,849 --> 00:03:42,720
<font color="#E5E5E5">because I wanted</font><font color="#CCCCCC"> to start from two</font>

86
00:03:41,250 --> 00:03:44,009
printer printers and then I need<font color="#E5E5E5"> to</font>

87
00:03:42,720 --> 00:03:46,049
<font color="#E5E5E5">create some something</font><font color="#CCCCCC"> each called</font>

88
00:03:44,009 --> 00:03:48,119
collection printer printer then I need

89
00:03:46,049 --> 00:03:49,859
to add Pinterest repeating the class

90
00:03:48,120 --> 00:03:51,449
name three more times<font color="#E5E5E5"> that's the class</font>

91
00:03:49,859 --> 00:03:54,750
name<font color="#E5E5E5"> is repeated four times</font><font color="#CCCCCC"> just on one</font>

92
00:03:51,449 --> 00:03:56,129
slide<font color="#E5E5E5"> and the second format for more</font>

93
00:03:54,750 --> 00:03:57,840
time for the second class<font color="#CCCCCC"> and then I</font>

94
00:03:56,129 --> 00:04:00,448
need<font color="#E5E5E5"> to register it and then I'm done</font>

95
00:03:57,840 --> 00:04:03,959
and about that time I<font color="#E5E5E5"> already know it</font>

96
00:04:00,449 --> 00:04:05,310
because this<font color="#E5E5E5"> is because</font><font color="#CCCCCC"> this is what I</font>

97
00:04:03,959 --> 00:04:07,590
want<font color="#E5E5E5"> to write this what I want to write</font>

98
00:04:05,310 --> 00:04:11,430
and<font color="#CCCCCC"> not the rest</font><font color="#E5E5E5"> and that's my problem</font>

99
00:04:07,590 --> 00:04:14,609
<font color="#E5E5E5">with this API something laptop is slow</font>

100
00:04:11,430 --> 00:04:16,139
<font color="#E5E5E5">so and I need to write a lot of code</font>

101
00:04:14,609 --> 00:04:19,139
that<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> care about and</font>

102
00:04:16,139 --> 00:04:21,090
actually<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> started because I</font><font color="#E5E5E5"> wanted</font>

103
00:04:19,139 --> 00:04:22,919
to have five<font color="#E5E5E5"> or</font><font color="#CCCCCC"> six 3d printers and I</font>

104
00:04:21,089 --> 00:04:24,359
also want to recognize pointers so it

105
00:04:22,919 --> 00:04:26,370
will be like twelve twelve different

106
00:04:24,360 --> 00:04:30,180
<font color="#CCCCCC">pretty printers very tired of</font>

107
00:04:26,370 --> 00:04:32,159
corporation so this way<font color="#CCCCCC"> I mean that you</font>

108
00:04:30,180 --> 00:04:34,740
created<font color="#E5E5E5"> these pretty</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> decorator</font>

109
00:04:32,159 --> 00:04:36,719
<font color="#E5E5E5">where this is pretty much</font>

110
00:04:34,740 --> 00:04:38,759
<font color="#CCCCCC">duck you</font><font color="#E5E5E5"> mentioned because this is the</font>

111
00:04:36,720 --> 00:04:40,470
class<font color="#CCCCCC"> name</font><font color="#E5E5E5"> and this is the code that I</font>

112
00:04:38,759 --> 00:04:42,240
care about<font color="#CCCCCC"> and</font><font color="#E5E5E5"> again this is the class</font>

113
00:04:40,470 --> 00:04:43,500
name<font color="#CCCCCC"> is called I care about nothin</font><font color="#E5E5E5"> else</font>

114
00:04:42,240 --> 00:04:45,840
<font color="#E5E5E5">is hidden beside the pretty to be</font><font color="#CCCCCC"> the</font>

115
00:04:43,500 --> 00:04:47,580
decorator<font color="#E5E5E5"> and then it's much</font><font color="#CCCCCC"> easier to</font>

116
00:04:45,840 --> 00:04:51,270
much easier to write and much less code

117
00:04:47,580 --> 00:04:52,889
and no<font color="#CCCCCC"> copy-paste in</font><font color="#E5E5E5"> anymore and after</font>

118
00:04:51,270 --> 00:04:54,900
that my debugging sessions that<font color="#CCCCCC"> you go</font>

119
00:04:52,889 --> 00:04:56,340
something<font color="#CCCCCC"> like it's a bit</font><font color="#E5E5E5"> messed up in</font>

120
00:04:54,900 --> 00:04:59,429
that admit<font color="#E5E5E5"> mastering the British things</font>

121
00:04:56,340 --> 00:05:02,969
when I put<font color="#E5E5E5"> into this set of beats</font><font color="#CCCCCC"> I get</font>

122
00:04:59,430 --> 00:05:05,220
<font color="#E5E5E5">immediately two beats deciphered in a</font>

123
00:05:02,970 --> 00:05:10,380
way so<font color="#E5E5E5"> and this is how I</font><font color="#CCCCCC"> kissed or just</font>

124
00:05:05,220 --> 00:05:17,220
<font color="#CCCCCC">a pretender so this was very picketed</font>

125
00:05:10,380 --> 00:05:18,630
<font color="#E5E5E5">and this was</font><font color="#CCCCCC"> the printer now the more</font>

126
00:05:17,220 --> 00:05:22,919
complex<font color="#E5E5E5"> model and more interesting for</font>

127
00:05:18,630 --> 00:05:24,300
me this<font color="#E5E5E5"> is the language deal with the</font>

128
00:05:22,919 --> 00:05:27,150
strange occurring debugging you might

129
00:05:24,300 --> 00:05:28,349
even like so let me first talk about<font color="#E5E5E5"> the</font>

130
00:05:27,150 --> 00:05:31,409
history of<font color="#CCCCCC"> doodle</font>

131
00:05:28,349 --> 00:05:33,930
so my personal<font color="#E5E5E5"> and first encounter was</font>

132
00:05:31,409 --> 00:05:35,610
<font color="#CCCCCC">Jew was like 15 years</font><font color="#E5E5E5"> ago when I was the</font>

133
00:05:33,930 --> 00:05:38,880
<font color="#E5E5E5">bug in</font><font color="#CCCCCC"> Sam my</font><font color="#E5E5E5"> squirrel back on some old</font>

134
00:05:35,610 --> 00:05:40,530
<font color="#E5E5E5">Eric's and Isis agent into it and I was</font>

135
00:05:38,880 --> 00:05:42,300
<font color="#E5E5E5">doing something in gdb and I did gdb</font>

136
00:05:40,530 --> 00:05:44,419
help<font color="#E5E5E5"> and I saw a strange command called</font>

137
00:05:42,300 --> 00:05:47,460
<font color="#CCCCCC">deal which I haven't seen in GD before</font>

138
00:05:44,419 --> 00:05:50,250
<font color="#E5E5E5">so I did help</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> it what something cool</font>

139
00:05:47,460 --> 00:05:52,650
for printing<font color="#E5E5E5"> linked lists and arrays and</font>

140
00:05:50,250 --> 00:05:55,050
<font color="#E5E5E5">I loved it and I wish links had it and</font>

141
00:05:52,650 --> 00:05:57,388
it didn't so I forgot<font color="#E5E5E5"> about it and</font><font color="#CCCCCC"> then</font>

142
00:05:55,050 --> 00:05:59,580
five years later for some reason I

143
00:05:57,389 --> 00:06:01,469
remember<font color="#CCCCCC"> it and I googled I found that</font>

144
00:05:59,580 --> 00:06:04,380
it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> specific to Alex it</font>

145
00:06:01,469 --> 00:06:08,639
<font color="#CCCCCC">was actually</font><font color="#E5E5E5"> created in 1993 by Michael</font>

146
00:06:04,380 --> 00:06:12,000
: and it was a patch for gdb version 4

147
00:06:08,639 --> 00:06:14,039
at that time and apparently from<font color="#E5E5E5"> what I</font>

148
00:06:12,000 --> 00:06:15,360
gather from various emails<font color="#CCCCCC"> Michael Cole</font>

149
00:06:14,039 --> 00:06:17,729
had some principles<font color="#E5E5E5"> and he</font><font color="#CCCCCC"> didn't like</font>

150
00:06:15,360 --> 00:06:19,949
GPL<font color="#E5E5E5"> so he put his patch in public domain</font>

151
00:06:17,729 --> 00:06:21,270
<font color="#E5E5E5">and did it be</font><font color="#CCCCCC"> developer</font><font color="#E5E5E5"> they had their</font>

152
00:06:19,949 --> 00:06:22,949
own<font color="#CCCCCC"> principles laid quite all the</font>

153
00:06:21,270 --> 00:06:24,719
<font color="#CCCCCC">patches to be in Japan and they didn't</font>

154
00:06:22,949 --> 00:06:28,889
like public domain so the<font color="#CCCCCC"> partner get</font>

155
00:06:24,719 --> 00:06:32,099
got into<font color="#E5E5E5"> gdb so yeah Michael Cohen</font>

156
00:06:28,889 --> 00:06:33,900
didn't get his language in known and gdb

157
00:06:32,099 --> 00:06:37,530
didn't get this wonderful feature<font color="#CCCCCC"> and I</font>

158
00:06:33,900 --> 00:06:40,789
stopped at 425 for yeah<font color="#E5E5E5"> well at</font><font color="#CCCCCC"> least</font>

159
00:06:37,530 --> 00:06:45,388
for<font color="#E5E5E5"> 10-15 years without deal in gdb</font>

160
00:06:40,789 --> 00:06:46,860
so everybody wins<font color="#E5E5E5"> but luckily developers</font>

161
00:06:45,389 --> 00:06:49,080
<font color="#E5E5E5">and gentle they weren't</font>

162
00:06:46,860 --> 00:06:52,139
<font color="#CCCCCC">that passion about GPS</font><font color="#E5E5E5"> I submitted the</font>

163
00:06:49,080 --> 00:06:54,300
patch<font color="#E5E5E5"> i ported GPL to GD</font><font color="#CCCCCC"> b6</font><font color="#E5E5E5"> and</font>

164
00:06:52,139 --> 00:06:56,610
submitted to gentle<font color="#E5E5E5"> let's just watch</font>

165
00:06:54,300 --> 00:06:58,610
anguish<font color="#E5E5E5"> in</font><font color="#CCCCCC"> my laptop and</font><font color="#E5E5E5"> it was in</font>

166
00:06:56,610 --> 00:07:01,439
gentle a distribution patch in the<font color="#E5E5E5"> whole</font>

167
00:06:58,610 --> 00:07:04,409
2008<font color="#E5E5E5"> automatically applied and if</font>

168
00:07:01,439 --> 00:07:07,560
anybody installed<font color="#E5E5E5"> gdb ingento which</font>

169
00:07:04,409 --> 00:07:09,659
later<font color="#CCCCCC"> didn't to move to gdb seven and</font>

170
00:07:07,560 --> 00:07:12,060
the pageant apply anymore<font color="#E5E5E5"> and I tried it</font>

171
00:07:09,659 --> 00:07:14,310
didn't really<font color="#E5E5E5"> apply it was</font><font color="#CCCCCC"> checked a lot</font>

172
00:07:12,060 --> 00:07:15,000
<font color="#E5E5E5">of changes in gdb</font><font color="#CCCCCC"> seven so again I</font>

173
00:07:14,310 --> 00:07:17,250
<font color="#CCCCCC">forgot about</font><font color="#E5E5E5"> it</font>

174
00:07:15,000 --> 00:07:19,139
and last<font color="#CCCCCC"> year I remember about it again</font>

175
00:07:17,250 --> 00:07:21,210
and<font color="#E5E5E5"> then I didn't they implemented deal</font>

176
00:07:19,139 --> 00:07:24,479
completely from scratch in Python is in

177
00:07:21,210 --> 00:07:26,068
gdb<font color="#CCCCCC"> Python API</font><font color="#E5E5E5"> so now it's a modular</font>

178
00:07:24,479 --> 00:07:28,650
cable or<font color="#CCCCCC"> dat runtime it doesn't depend</font>

179
00:07:26,069 --> 00:07:30,539
on anything<font color="#E5E5E5"> in gdb internals it doesn't</font>

180
00:07:28,650 --> 00:07:31,799
<font color="#E5E5E5">need much in gdb doesn't</font><font color="#CCCCCC"> compiling</font><font color="#E5E5E5"> you</font>

181
00:07:30,539 --> 00:07:34,438
just can download the Python one you can

182
00:07:31,800 --> 00:07:36,449
load at runtime you<font color="#E5E5E5"> can load it from gdb</font>

183
00:07:34,439 --> 00:07:39,419
in it it will<font color="#E5E5E5"> work even if you</font><font color="#CCCCCC"> average</font>

184
00:07:36,449 --> 00:07:41,460
<font color="#E5E5E5">DB because it only depends on documented</font>

185
00:07:39,419 --> 00:07:47,370
gdb Python API<font color="#E5E5E5"> and I hope they</font><font color="#CCCCCC"> will keep</font>

186
00:07:41,460 --> 00:07:50,120
the stable so now what is actually the

187
00:07:47,370 --> 00:07:52,710
<font color="#E5E5E5">water can do so I think this picture</font><font color="#CCCCCC"> is</font>

188
00:07:50,120 --> 00:07:56,729
quite familiar to<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> who ever</font>

189
00:07:52,710 --> 00:08:00,089
<font color="#CCCCCC">debarked anything in my ADB table list</font>

190
00:07:56,729 --> 00:08:02,099
is a structure<font color="#E5E5E5"> that contains all tables</font>

191
00:08:00,089 --> 00:08:03,900
that are used by<font color="#E5E5E5"> any particular scale</font>

192
00:08:02,099 --> 00:08:05,250
<font color="#CCCCCC">quarry</font><font color="#E5E5E5"> so ever want to see you ever want</font>

193
00:08:03,900 --> 00:08:06,900
to<font color="#E5E5E5"> print it so I first</font><font color="#CCCCCC"> be in the first</font>

194
00:08:05,250 --> 00:08:08,879
table then<font color="#E5E5E5"> if in the second one the</font>

195
00:08:06,900 --> 00:08:10,318
third one<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on and so on until I</font>

196
00:08:08,879 --> 00:08:12,529
<font color="#E5E5E5">they put in the whole list or I get</font>

197
00:08:10,319 --> 00:08:15,120
bored

198
00:08:12,529 --> 00:08:17,819
and with you it can be<font color="#CCCCCC"> done with just</font>

199
00:08:15,120 --> 00:08:20,610
<font color="#CCCCCC">one command you told you to print the</font>

200
00:08:17,819 --> 00:08:22,439
linked list<font color="#CCCCCC"> and Neil works the least</font>

201
00:08:20,610 --> 00:08:25,879
until it gets the null pointer and it

202
00:08:22,439 --> 00:08:25,879
prints every single<font color="#CCCCCC"> element in</font><font color="#E5E5E5"> the list</font>

203
00:08:26,950 --> 00:08:33,130
and this is but this is extension<font color="#E5E5E5"> of the</font>

204
00:08:30,190 --> 00:08:35,860
<font color="#CCCCCC">Euro to the noodle</font><font color="#E5E5E5"> is an extension of C</font>

205
00:08:33,130 --> 00:08:38,169
syntax C expression syntax in a way and

206
00:08:35,860 --> 00:08:40,330
this<font color="#CCCCCC"> is a dual extension of the</font><font color="#E5E5E5"> syntax</font>

207
00:08:38,169 --> 00:08:42,429
it tells you to traverse<font color="#E5E5E5"> a linked list</font>

208
00:08:40,330 --> 00:08:44,440
<font color="#CCCCCC">using the next global</font><font color="#E5E5E5"> pointer</font><font color="#CCCCCC"> every</font>

209
00:08:42,429 --> 00:08:45,640
<font color="#E5E5E5">element must have this</font><font color="#CCCCCC"> negative</font><font color="#E5E5E5"> of a</font>

210
00:08:44,440 --> 00:08:48,730
pointer and<font color="#E5E5E5"> then it will just move</font><font color="#CCCCCC"> a</font>

211
00:08:45,640 --> 00:09:09,699
<font color="#E5E5E5">pointer and put in the table</font><font color="#CCCCCC"> name for</font>

212
00:08:48,730 --> 00:09:11,830
every element<font color="#CCCCCC"> I was going to</font><font color="#E5E5E5"> explain the</font>

213
00:09:09,700 --> 00:09:13,480
fundamentals<font color="#CCCCCC"> later</font><font color="#E5E5E5"> we're just starting</font>

214
00:09:11,830 --> 00:09:15,610
from few examples<font color="#E5E5E5"> but</font><font color="#CCCCCC"> there's no spree</font>

215
00:09:13,480 --> 00:09:20,320
<font color="#E5E5E5">tip into position</font><font color="#CCCCCC"> just a regular C just</font>

216
00:09:15,610 --> 00:09:24,520
<font color="#E5E5E5">a regular string</font><font color="#CCCCCC"> meant another example</font>

217
00:09:20,320 --> 00:09:26,200
from<font color="#E5E5E5"> the linked list this list is not</font>

218
00:09:24,520 --> 00:09:27,699
<font color="#E5E5E5">longer so I don't print I just want to</font>

219
00:09:26,200 --> 00:09:30,700
see how long the trees<font color="#E5E5E5"> and then this</font>

220
00:09:27,700 --> 00:09:35,110
<font color="#E5E5E5">appetizer</font><font color="#CCCCCC"> it tells</font><font color="#E5E5E5"> me how many elements</font>

221
00:09:30,700 --> 00:09:38,290
are in the linked<font color="#E5E5E5"> list in a way and this</font>

222
00:09:35,110 --> 00:09:39,850
<font color="#CCCCCC">is an</font><font color="#E5E5E5"> example so</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> I want to</font><font color="#CCCCCC"> find</font>

223
00:09:38,290 --> 00:09:42,130
<font color="#E5E5E5">whether this item is present in this</font>

224
00:09:39,850 --> 00:09:46,590
linked<font color="#CCCCCC"> list or</font><font color="#E5E5E5"> not yes sure enough</font><font color="#CCCCCC"> it's</font>

225
00:09:42,130 --> 00:09:49,420
present and it has number<font color="#CCCCCC"> 5 in village</font>

226
00:09:46,590 --> 00:09:51,370
and one more<font color="#E5E5E5"> example to show</font><font color="#CCCCCC"> what you</font>

227
00:09:49,420 --> 00:09:52,959
can<font color="#E5E5E5"> do with arrays arrays are very easy</font>

228
00:09:51,370 --> 00:09:55,060
you can<font color="#CCCCCC"> use because you</font><font color="#E5E5E5"> can use</font><font color="#CCCCCC"> arrange</font>

229
00:09:52,960 --> 00:09:57,490
instead of an array<font color="#E5E5E5"> index you can print</font>

230
00:09:55,060 --> 00:10:00,819
the whole is the<font color="#E5E5E5"> whole array is</font><font color="#CCCCCC"> just one</font>

231
00:09:57,490 --> 00:10:02,830
command<font color="#E5E5E5"> and it's a very common idiom to</font>

232
00:10:00,820 --> 00:10:04,690
<font color="#E5E5E5">have an array</font><font color="#CCCCCC"> that where you</font><font color="#E5E5E5"> don't know</font>

233
00:10:02,830 --> 00:10:07,030
<font color="#E5E5E5">the number of elements</font><font color="#CCCCCC"> but you have some</font>

234
00:10:04,690 --> 00:10:09,670
property on the last element<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mark the</font>

235
00:10:07,030 --> 00:10:11,829
end in this particular case the last

236
00:10:09,670 --> 00:10:15,370
element<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> array has the name equals</font>

237
00:10:11,830 --> 00:10:18,450
now so I use an open-ended range<font color="#E5E5E5"> saying</font>

238
00:10:15,370 --> 00:10:21,340
start from<font color="#E5E5E5"> zero and go well ad infinitum</font>

239
00:10:18,450 --> 00:10:23,230
<font color="#CCCCCC">but stop at</font><font color="#E5E5E5"> zero but then</font><font color="#CCCCCC"> it'll</font>

240
00:10:21,340 --> 00:10:24,970
automatically go<font color="#E5E5E5"> and it'll stop when N</font>

241
00:10:23,230 --> 00:10:28,150
equals<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can print</font><font color="#CCCCCC"> erase</font>

242
00:10:24,970 --> 00:10:32,700
where I<font color="#CCCCCC"> don't know the length</font><font color="#E5E5E5"> in Iran's</font>

243
00:10:28,150 --> 00:10:32,699
another element the name<font color="#CCCCCC"> whose</font><font color="#E5E5E5"> zero hmm</font>

244
00:10:34,670 --> 00:10:45,209
I'll<font color="#E5E5E5"> show that later here and this is</font>

245
00:10:42,120 --> 00:10:48,270
the one most important thing where<font color="#CCCCCC"> the</font>

246
00:10:45,210 --> 00:10:49,950
<font color="#E5E5E5">whole logic</font><font color="#CCCCCC"> or duel is based upon so in</font>

247
00:10:48,270 --> 00:10:51,770
C you can write an<font color="#E5E5E5"> expression like</font><font color="#CCCCCC"> one</font>

248
00:10:49,950 --> 00:10:54,060
plus<font color="#E5E5E5"> a hundred and then</font><font color="#CCCCCC"> once this</font>

249
00:10:51,770 --> 00:10:56,069
<font color="#CCCCCC">expression and the hundred expression</font>

250
00:10:54,060 --> 00:10:58,410
and the result of one<font color="#CCCCCC"> personage is</font>

251
00:10:56,070 --> 00:11:01,080
<font color="#E5E5E5">another expression with the value of 101</font>

252
00:10:58,410 --> 00:11:03,180
<font color="#E5E5E5">and indeed every expression</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> turn can</font>

253
00:11:01,080 --> 00:11:04,590
have many values<font color="#E5E5E5"> instead of one you can</font>

254
00:11:03,180 --> 00:11:06,870
have<font color="#CCCCCC"> at least</font><font color="#E5E5E5"> of one</font><font color="#CCCCCC"> two three for</font>

255
00:11:04,590 --> 00:11:09,510
example<font color="#E5E5E5"> and found that you can have many</font>

256
00:11:06,870 --> 00:11:12,360
<font color="#E5E5E5">values and then when you apply a plus</font>

257
00:11:09,510 --> 00:11:14,490
plus is a regular C operator that only

258
00:11:12,360 --> 00:11:17,460
<font color="#E5E5E5">works on individual values it'll work on</font>

259
00:11:14,490 --> 00:11:18,930
every possible<font color="#E5E5E5"> value pair where first</font>

260
00:11:17,460 --> 00:11:20,520
value<font color="#E5E5E5"> is taken from the</font><font color="#CCCCCC"> first apparent</font>

261
00:11:18,930 --> 00:11:23,550
and second value<font color="#E5E5E5"> is</font><font color="#CCCCCC"> taken from the other</font>

262
00:11:20,520 --> 00:11:25,439
<font color="#CCCCCC">around</font><font color="#E5E5E5"> let's</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> downloaded you can</font>

263
00:11:23,550 --> 00:11:27,390
<font color="#CCCCCC">just type it in and you'll see this very</font>

264
00:11:25,440 --> 00:11:30,480
result<font color="#E5E5E5"> and this works</font>

265
00:11:27,390 --> 00:11:32,640
<font color="#E5E5E5">this is generalization</font><font color="#CCCCCC"> books on every</font><font color="#E5E5E5"> C</font>

266
00:11:30,480 --> 00:11:35,580
operator<font color="#E5E5E5"> by taking a subscript of an</font>

267
00:11:32,640 --> 00:11:38,069
array or of a string there are two

268
00:11:35,580 --> 00:11:39,870
<font color="#E5E5E5">strings into two subscripts</font><font color="#CCCCCC"> so the</font>

269
00:11:38,070 --> 00:11:41,790
square brackets will be applied four

270
00:11:39,870 --> 00:11:44,460
times to every combination<font color="#CCCCCC"> there is a</font>

271
00:11:41,790 --> 00:11:46,469
focus for at least this expression<font color="#E5E5E5"> will</font>

272
00:11:44,460 --> 00:11:50,360
have four result expression will have

273
00:11:46,470 --> 00:11:52,650
four values<font color="#CCCCCC"> BC and EF so just a small</font>

274
00:11:50,360 --> 00:11:57,440
generalization of the C syntax<font color="#E5E5E5"> allowing</font>

275
00:11:52,650 --> 00:11:59,790
an expression to return many values and

276
00:11:57,440 --> 00:12:02,580
because of that<font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> easy to go</font>

277
00:11:59,790 --> 00:12:06,349
from existing expression that we use<font color="#E5E5E5"> in</font>

278
00:12:02,580 --> 00:12:08,490
print in gdb to<font color="#E5E5E5"> dual expressions in deal</font>

279
00:12:06,350 --> 00:12:10,950
because<font color="#CCCCCC"> this is how I would print a</font>

280
00:12:08,490 --> 00:12:12,630
<font color="#E5E5E5">single element from the table</font><font color="#CCCCCC"> option</font>

281
00:12:10,950 --> 00:12:14,790
<font color="#E5E5E5">this is a structured has an element</font>

282
00:12:12,630 --> 00:12:16,680
called name so I just want printed a my

283
00:12:14,790 --> 00:12:19,230
period like<font color="#E5E5E5"> this it's nothing</font><font color="#CCCCCC"> fancy in</font>

284
00:12:16,680 --> 00:12:21,540
here<font color="#E5E5E5"> now I would want</font><font color="#CCCCCC"> to print many many</font>

285
00:12:19,230 --> 00:12:23,850
I<font color="#E5E5E5"> would simply accept a place the index</font>

286
00:12:21,540 --> 00:12:25,110
<font color="#CCCCCC">please arrange and then I would print</font>

287
00:12:23,850 --> 00:12:27,030
<font color="#E5E5E5">many elements at once</font>

288
00:12:25,110 --> 00:12:29,520
because this is<font color="#E5E5E5"> just a small extension</font>

289
00:12:27,030 --> 00:12:32,900
<font color="#E5E5E5">of</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> of just no generalization of</font>

290
00:12:29,520 --> 00:12:32,900
existence<font color="#E5E5E5"> index</font>

291
00:12:33,110 --> 00:12:38,459
and the same works for<font color="#CCCCCC"> link list</font>

292
00:12:36,149 --> 00:12:41,610
<font color="#E5E5E5">this is intentionally complex example</font>

293
00:12:38,459 --> 00:12:43,410
<font color="#E5E5E5">it's C so there's the reference in</font><font color="#CCCCCC"> the</font>

294
00:12:41,610 --> 00:12:45,600
pointer then<font color="#E5E5E5"> you've got Scotland with</font>

295
00:12:43,410 --> 00:12:47,279
<font color="#CCCCCC">its</font><font color="#E5E5E5"> word pointed seats not C++ then a</font>

296
00:12:45,600 --> 00:12:49,440
<font color="#E5E5E5">couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> more the references then I get</font>

297
00:12:47,279 --> 00:12:51,120
a long path on my file system<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> I</font>

298
00:12:49,440 --> 00:12:52,320
add something just to just keep the

299
00:12:51,120 --> 00:12:54,660
beginning and get to the interesting

300
00:12:52,320 --> 00:12:57,750
<font color="#E5E5E5">part</font><font color="#CCCCCC"> and if I want if I would</font><font color="#E5E5E5"> want to</font>

301
00:12:54,660 --> 00:12:59,880
print the<font color="#E5E5E5"> whole list</font><font color="#CCCCCC"> I would just need</font>

302
00:12:57,750 --> 00:13:02,010
to extend it a<font color="#E5E5E5"> little bit by specifying</font>

303
00:12:59,880 --> 00:13:03,920
how to traverse<font color="#E5E5E5"> the list and then I</font>

304
00:13:02,010 --> 00:13:07,529
would get<font color="#E5E5E5"> the Holy Spirit at once and</font>

305
00:13:03,920 --> 00:13:10,319
this<font color="#CCCCCC"> works exactly as you would you</font>

306
00:13:07,529 --> 00:13:13,170
might<font color="#CCCCCC"> have expect</font><font color="#E5E5E5"> because in</font><font color="#CCCCCC"> C the or</font>

307
00:13:10,320 --> 00:13:14,610
with gdb<font color="#CCCCCC"> print after print command it</font>

308
00:13:13,170 --> 00:13:18,719
would take the value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this pointer</font>

309
00:13:14,610 --> 00:13:20,760
then it would take the data member of

310
00:13:18,720 --> 00:13:25,529
this structure<font color="#E5E5E5"> then</font><font color="#CCCCCC"> cast and then and</font><font color="#E5E5E5"> so</font>

311
00:13:20,760 --> 00:13:27,750
on<font color="#E5E5E5"> and here this command with long arrow</font>

312
00:13:25,529 --> 00:13:30,930
<font color="#E5E5E5">those two it</font><font color="#CCCCCC"> would generate a list of</font>

313
00:13:27,750 --> 00:13:32,760
values and then for<font color="#CCCCCC"> every value it would</font>

314
00:13:30,930 --> 00:13:35,189
do<font color="#E5E5E5"> this one and then that one and then</font>

315
00:13:32,760 --> 00:13:36,810
that one<font color="#E5E5E5"> so it will</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> pretty much</font>

316
00:13:35,190 --> 00:13:43,070
<font color="#E5E5E5">like this command but instead</font><font color="#CCCCCC"> of one-way</font>

317
00:13:36,810 --> 00:13:45,479
<font color="#E5E5E5">there will be a list of values so and so</font>

318
00:13:43,070 --> 00:13:47,220
and let's make<font color="#E5E5E5"> a</font><font color="#CCCCCC"> checkpoint so if</font>

319
00:13:45,480 --> 00:13:49,860
somebody would want<font color="#CCCCCC"> to leave the room</font>

320
00:13:47,220 --> 00:13:51,269
right now<font color="#E5E5E5"> this the one that's the one</font>

321
00:13:49,860 --> 00:13:55,350
important thing<font color="#E5E5E5"> I would want</font><font color="#CCCCCC"> you to</font>

322
00:13:51,269 --> 00:13:57,209
<font color="#E5E5E5">remember so in do the any expression</font>

323
00:13:55,350 --> 00:13:59,790
condition many values and conventional

324
00:13:57,209 --> 00:14:02,189
<font color="#E5E5E5">separators they work with many</font><font color="#CCCCCC"> values by</font>

325
00:13:59,790 --> 00:14:04,439
<font color="#CCCCCC">that</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> apply to</font><font color="#E5E5E5"> every value in</font>

326
00:14:02,190 --> 00:14:07,019
order<font color="#E5E5E5"> and there are three ways</font><font color="#CCCCCC"> in you to</font>

327
00:14:04,440 --> 00:14:09,529
generate<font color="#E5E5E5"> those not make many values one</font>

328
00:14:07,019 --> 00:14:12,990
way is<font color="#E5E5E5"> using enumerations by simply</font>

329
00:14:09,529 --> 00:14:15,149
specifying many expressions with comma

330
00:14:12,990 --> 00:14:18,449
one can also second way is using<font color="#E5E5E5"> rangers</font>

331
00:14:15,149 --> 00:14:20,550
<font color="#E5E5E5">two expressions with two dots between</font>

332
00:14:18,449 --> 00:14:22,949
and<font color="#CCCCCC"> that can</font><font color="#E5E5E5"> be also open ranges where</font>

333
00:14:20,550 --> 00:14:25,140
either<font color="#E5E5E5"> first boundary or the second</font>

334
00:14:22,949 --> 00:14:28,319
<font color="#E5E5E5">boundary is emitted and that's also</font><font color="#CCCCCC"> a</font>

335
00:14:25,140 --> 00:14:30,510
list traversal that I've just<font color="#CCCCCC"> shown</font>

336
00:14:28,320 --> 00:14:33,110
<font color="#CCCCCC">increased but it's not only</font><font color="#E5E5E5"> for linked</font>

337
00:14:30,510 --> 00:14:36,660
<font color="#CCCCCC">lists because by combining those</font>

338
00:14:33,110 --> 00:14:39,269
operators you can<font color="#CCCCCC"> easily just</font><font color="#E5E5E5"> as easy</font>

339
00:14:36,660 --> 00:14:40,980
<font color="#CCCCCC">traverse traverse binary trees by saying</font>

340
00:14:39,269 --> 00:14:43,410
that you need platform you need to<font color="#E5E5E5"> type</font>

341
00:14:40,980 --> 00:14:44,870
<font color="#E5E5E5">of</font><font color="#CCCCCC"> two poor</font><font color="#E5E5E5"> internal just one this is</font>

342
00:14:43,410 --> 00:14:46,550
not a new operator just<font color="#E5E5E5"> combined</font>

343
00:14:44,870 --> 00:14:54,260
because all the traitors can<font color="#CCCCCC"> be combined</font>

344
00:14:46,550 --> 00:14:55,939
just<font color="#E5E5E5"> as easily in C as in C yes</font><font color="#CCCCCC"> I'll I</font>

345
00:14:54,260 --> 00:14:57,530
don't<font color="#CCCCCC"> have example with your colleagues</font>

346
00:14:55,940 --> 00:15:00,520
I have<font color="#E5E5E5"> example in the manual</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I Alex</font>

347
00:14:57,530 --> 00:15:02,600
<font color="#E5E5E5">I'll mention circle on this later I</font>

348
00:15:00,520 --> 00:15:03,860
couldn't find an<font color="#E5E5E5"> example of circular</font>

349
00:15:02,600 --> 00:15:08,150
<font color="#E5E5E5">least inside</font><font color="#CCCCCC"> MariaDB so I don't have</font>

350
00:15:03,860 --> 00:15:10,700
<font color="#E5E5E5">this example so</font><font color="#CCCCCC"> now a little bit</font><font color="#E5E5E5"> more</font>

351
00:15:08,150 --> 00:15:12,949
<font color="#E5E5E5">advanced but still useful operators the</font>

352
00:15:10,700 --> 00:15:15,650
operator which<font color="#E5E5E5"> I call until this is this</font>

353
00:15:12,950 --> 00:15:19,670
one this example I've<font color="#CCCCCC"> already shown it</font>

354
00:15:15,650 --> 00:15:21,980
<font color="#E5E5E5">means go from the</font><font color="#CCCCCC"> zero to every element</font>

355
00:15:19,670 --> 00:15:25,339
of the array<font color="#CCCCCC"> and stop going</font><font color="#E5E5E5"> when the</font>

356
00:15:21,980 --> 00:15:27,290
name equals zero so<font color="#E5E5E5"> this one number five</font>

357
00:15:25,340 --> 00:15:31,300
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the phrase is not</font><font color="#CCCCCC"> winter in here</font>

358
00:15:27,290 --> 00:15:34,010
<font color="#CCCCCC">that's why</font><font color="#E5E5E5"> dual stop iteration but yeah</font>

359
00:15:31,300 --> 00:15:36,290
there's actually<font color="#E5E5E5"> a similar thing when</font>

360
00:15:34,010 --> 00:15:38,450
you can specify it and then something<font color="#E5E5E5"> to</font>

361
00:15:36,290 --> 00:15:40,790
print many<font color="#E5E5E5"> arrays and there's some</font>

362
00:15:38,450 --> 00:15:42,920
syntax<font color="#CCCCCC"> cream that you put</font><font color="#E5E5E5"> at the end in</font>

363
00:15:40,790 --> 00:15:44,930
<font color="#E5E5E5">Europe this is not something to put at</font>

364
00:15:42,920 --> 00:15:46,640
the<font color="#E5E5E5"> end it's</font><font color="#CCCCCC"> just normal operator which</font>

365
00:15:44,930 --> 00:15:48,739
can be combined with any<font color="#CCCCCC"> other apparatus</font>

366
00:15:46,640 --> 00:15:51,920
and Pilatus just normal it could be used

367
00:15:48,740 --> 00:15:53,830
<font color="#E5E5E5">in the yeah it could be used in the</font>

368
00:15:51,920 --> 00:15:57,170
<font color="#E5E5E5">middle of the expression just</font><font color="#CCCCCC"> the same</font>

369
00:15:53,830 --> 00:15:59,150
<font color="#E5E5E5">the table filled array is it's an array</font>

370
00:15:57,170 --> 00:16:00,770
<font color="#E5E5E5">of all fields of the table it's not</font>

371
00:15:59,150 --> 00:16:02,780
<font color="#E5E5E5">array of structures like here it's a lot</font>

372
00:16:00,770 --> 00:16:04,699
of pointers<font color="#CCCCCC"> to structures and</font><font color="#E5E5E5"> it's</font>

373
00:16:02,780 --> 00:16:08,360
terminated with a null pointer so first

374
00:16:04,700 --> 00:16:10,310
I need<font color="#CCCCCC"> to walk</font><font color="#E5E5E5"> the whole array and stop</font>

375
00:16:08,360 --> 00:16:12,020
at<font color="#E5E5E5"> the null pointer and then for every</font>

376
00:16:10,310 --> 00:16:13,579
<font color="#E5E5E5">element of the array</font><font color="#CCCCCC"> I put in the field</font>

377
00:16:12,020 --> 00:16:15,949
name<font color="#E5E5E5"> this is different from this one</font>

378
00:16:13,580 --> 00:16:19,430
because here I've applied<font color="#E5E5E5"> at a curator</font>

379
00:16:15,950 --> 00:16:21,020
at<font color="#CCCCCC"> the end but just to show it's normal</font>

380
00:16:19,430 --> 00:16:24,770
<font color="#E5E5E5">accurate it could be used anywhere in</font>

381
00:16:21,020 --> 00:16:27,230
the<font color="#E5E5E5"> expression where it makes sense but</font>

382
00:16:24,770 --> 00:16:30,410
in fact is right to<font color="#E5E5E5"> the question that</font>

383
00:16:27,230 --> 00:16:32,690
<font color="#CCCCCC">was just asked this is a</font><font color="#E5E5E5"> shortcut</font>

384
00:16:30,410 --> 00:16:35,959
a simplified<font color="#E5E5E5"> syntax the full syntax for</font>

385
00:16:32,690 --> 00:16:39,560
this<font color="#CCCCCC"> operator</font><font color="#E5E5E5"> means shows that this here</font>

386
00:16:35,960 --> 00:16:42,740
<font color="#CCCCCC">could be the second expression for each</font>

387
00:16:39,560 --> 00:16:44,750
and the iteration stops with when this

388
00:16:42,740 --> 00:16:46,280
expression<font color="#CCCCCC"> becomes</font><font color="#E5E5E5"> true so I can book</font>

389
00:16:44,750 --> 00:16:48,410
the whole array and print the whole

390
00:16:46,280 --> 00:16:49,939
structures for every element<font color="#CCCCCC"> and I need</font>

391
00:16:48,410 --> 00:16:52,250
to stop when the name becomes<font color="#CCCCCC"> zero</font>

392
00:16:49,940 --> 00:16:55,220
<font color="#E5E5E5">that's how it stops in the name</font><font color="#CCCCCC"> between</font>

393
00:16:52,250 --> 00:16:57,990
<font color="#E5E5E5">zero so you</font><font color="#CCCCCC"> can put here an arbitrary</font>

394
00:16:55,220 --> 00:17:00,149
expression<font color="#CCCCCC"> and walking</font><font color="#E5E5E5"> down the array</font>

395
00:16:57,990 --> 00:17:04,890
stop we'll stop<font color="#E5E5E5"> when this expression</font>

396
00:17:00,149 --> 00:17:06,599
<font color="#CCCCCC">becomes</font><font color="#E5E5E5"> strong this until accelerator is</font>

397
00:17:04,890 --> 00:17:12,589
most commonly<font color="#E5E5E5"> used with open-ended</font>

398
00:17:06,599 --> 00:17:18,270
Rangers<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it can</font><font color="#E5E5E5"> actually be used to</font>

399
00:17:12,589 --> 00:17:21,448
do as to<font color="#CCCCCC"> do cyclic list because then you</font>

400
00:17:18,270 --> 00:17:23,040
do again to<font color="#E5E5E5"> a generator base to air with</font>

401
00:17:21,449 --> 00:17:25,980
a long arrow<font color="#E5E5E5"> and you tell it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> stop</font>

402
00:17:23,040 --> 00:17:28,260
<font color="#CCCCCC">when the end of the end of the list</font>

403
00:17:25,980 --> 00:17:32,030
becomes<font color="#CCCCCC"> at the beginning so you can do</font>

404
00:17:28,260 --> 00:17:32,030
like you can stop psychically this way

405
00:17:38,300 --> 00:17:44,070
<font color="#CCCCCC">then if you</font><font color="#E5E5E5"> print a screen</font><font color="#CCCCCC"> full</font><font color="#E5E5E5"> it will</font>

406
00:17:42,210 --> 00:17:46,020
<font color="#E5E5E5">ask you</font><font color="#CCCCCC"> can't continue</font><font color="#E5E5E5"> or not continue</font>

407
00:17:44,070 --> 00:17:49,950
and then you still say stop or press

408
00:17:46,020 --> 00:17:53,490
<font color="#E5E5E5">ctrl C if you disable</font><font color="#CCCCCC"> that another</font>

409
00:17:49,950 --> 00:17:55,380
useful feature is filters so in my ad

410
00:17:53,490 --> 00:17:56,970
<font color="#E5E5E5">being mask well there's a concept of</font>

411
00:17:55,380 --> 00:17:59,970
virtual<font color="#CCCCCC"> fields it's</font><font color="#E5E5E5"> fields in the table</font>

412
00:17:56,970 --> 00:18:01,410
<font color="#CCCCCC">that I generated and the virtual</font><font color="#E5E5E5"> field</font>

413
00:17:59,970 --> 00:18:03,179
is<font color="#CCCCCC"> different from a normal field because</font>

414
00:18:01,410 --> 00:18:06,990
they have vehicle info pointer being

415
00:18:03,179 --> 00:18:08,940
<font color="#CCCCCC">nonzero so if I want to</font><font color="#E5E5E5"> see all virtual</font>

416
00:18:06,990 --> 00:18:11,309
fields in a table<font color="#E5E5E5"> I would probably do</font>

417
00:18:08,940 --> 00:18:14,190
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this so</font><font color="#CCCCCC"> I would print the</font>

418
00:18:11,309 --> 00:18:16,770
<font color="#E5E5E5">whole array and I fight look in what</font>

419
00:18:14,190 --> 00:18:18,360
fields become info it's not<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and if</font>

420
00:18:16,770 --> 00:18:22,379
I<font color="#E5E5E5"> look very careful at this slide I</font>

421
00:18:18,360 --> 00:18:24,300
could see that<font color="#E5E5E5"> it's 2nd 6th and 7th but</font>

422
00:18:22,380 --> 00:18:27,360
<font color="#E5E5E5">so</font><font color="#CCCCCC"> are two process</font><font color="#E5E5E5"> first I don't</font><font color="#CCCCCC"> really</font>

423
00:18:24,300 --> 00:18:29,100
want to<font color="#E5E5E5"> look very carefully for</font><font color="#CCCCCC"> money</font>

424
00:18:27,360 --> 00:18:31,080
difference in characters<font color="#E5E5E5"> secondly there</font>

425
00:18:29,100 --> 00:18:33,559
would be a hundred<font color="#E5E5E5"> of fields it's only</font>

426
00:18:31,080 --> 00:18:36,419
two virtual I would probably<font color="#CCCCCC"> miss that</font>

427
00:18:33,559 --> 00:18:40,550
so what I do I<font color="#CCCCCC"> put a question mark in</font>

428
00:18:36,420 --> 00:18:43,559
<font color="#E5E5E5">here after the inequality operator and</font>

429
00:18:40,550 --> 00:18:45,389
the comparison operator becomes<font color="#E5E5E5"> a field</font>

430
00:18:43,559 --> 00:18:48,030
<font color="#E5E5E5">operator it looks like kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> like a</font>

431
00:18:45,390 --> 00:18:51,030
<font color="#E5E5E5">grip so if the result is false</font><font color="#CCCCCC"> zero is</font>

432
00:18:48,030 --> 00:18:52,920
<font color="#E5E5E5">not</font><font color="#CCCCCC"> printed at all and if it's true then</font>

433
00:18:51,030 --> 00:18:56,340
<font color="#CCCCCC">the result of the</font><font color="#E5E5E5"> expression is printed</font>

434
00:18:52,920 --> 00:18:58,800
so now I can<font color="#E5E5E5"> be easily see this paper</font>

435
00:18:56,340 --> 00:19:02,370
<font color="#E5E5E5">right there are all healed</font><font color="#CCCCCC"> to six and</font>

436
00:18:58,800 --> 00:19:04,169
<font color="#CCCCCC">seven like have nonzero or</font><font color="#E5E5E5"> vehicle info</font>

437
00:19:02,370 --> 00:19:05,939
pointers<font color="#E5E5E5"> and because this is just an</font>

438
00:19:04,170 --> 00:19:08,100
<font color="#CCCCCC">expression it also doesn't have to be at</font>

439
00:19:05,940 --> 00:19:09,780
the end<font color="#CCCCCC"> I can stock</font><font color="#E5E5E5"> embed it into</font>

440
00:19:08,100 --> 00:19:10,428
another expression<font color="#CCCCCC"> and peer in field</font>

441
00:19:09,780 --> 00:19:13,970
names<font color="#E5E5E5"> just</font>

442
00:19:10,429 --> 00:19:16,129
well by printing<font color="#E5E5E5"> field name of Fidel of</font>

443
00:19:13,970 --> 00:19:17,419
the result of this expression<font color="#E5E5E5"> because</font>

444
00:19:16,129 --> 00:19:19,730
this is<font color="#E5E5E5"> just a</font><font color="#CCCCCC"> repression to the first</font>

445
00:19:17,419 --> 00:19:21,259
three results and I can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it by the</font>

446
00:19:19,730 --> 00:19:27,860
<font color="#E5E5E5">reference in the pointer</font><font color="#CCCCCC"> and Britain</font>

447
00:19:21,259 --> 00:19:31,159
<font color="#CCCCCC">fill names and back to the example with</font>

448
00:19:27,860 --> 00:19:34,039
<font color="#E5E5E5">the table names you have seen this the</font>

449
00:19:31,159 --> 00:19:35,869
dual print<font color="#E5E5E5"> set first</font><font color="#CCCCCC"> prints</font><font color="#E5E5E5"> the first</font>

450
00:19:34,039 --> 00:19:38,240
element of<font color="#E5E5E5"> the linked linked list the</font>

451
00:19:35,869 --> 00:19:41,360
second one<font color="#E5E5E5"> and then it stops</font><font color="#CCCCCC"> print into</font>

452
00:19:38,240 --> 00:19:43,279
a very long path<font color="#E5E5E5"> to the last element it</font>

453
00:19:41,360 --> 00:19:45,918
prints this thing in double square

454
00:19:43,279 --> 00:19:48,499
brackets<font color="#E5E5E5"> it's not just a way to have a</font>

455
00:19:45,919 --> 00:19:51,409
shorter<font color="#CCCCCC"> printouts this is actually a</font>

456
00:19:48,499 --> 00:19:52,970
syntax in<font color="#CCCCCC"> do</font><font color="#E5E5E5"> to specify that</font><font color="#CCCCCC"> you want a</font>

457
00:19:51,409 --> 00:19:55,100
<font color="#E5E5E5">specific value out</font><font color="#CCCCCC"> of the list</font><font color="#E5E5E5"> of values</font>

458
00:19:52,970 --> 00:19:58,970
<font color="#E5E5E5">so I can just</font><font color="#CCCCCC"> use it in print the third</font>

459
00:19:55,100 --> 00:20:01,759
table<font color="#E5E5E5"> and this is a very short example</font>

460
00:19:58,970 --> 00:20:03,230
just to explain<font color="#CCCCCC"> just to highlight</font><font color="#E5E5E5"> how it</font>

461
00:20:01,759 --> 00:20:05,269
works this<font color="#E5E5E5"> is the least of five values I</font>

462
00:20:03,230 --> 00:20:09,019
want the third value starting<font color="#E5E5E5"> from zero</font>

463
00:20:05,269 --> 00:20:11,509
so<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> four and a practical example</font>

464
00:20:09,019 --> 00:20:13,279
would be if<font color="#CCCCCC"> I were want</font><font color="#E5E5E5"> to print the</font>

465
00:20:11,509 --> 00:20:16,549
<font color="#E5E5E5">last element of</font><font color="#CCCCCC"> the very long linked</font>

466
00:20:13,279 --> 00:20:18,559
list<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> just print expand the whole</font>

467
00:20:16,549 --> 00:20:20,749
linked<font color="#E5E5E5"> list</font><font color="#CCCCCC"> and here I can calculate</font><font color="#E5E5E5"> the</font>

468
00:20:18,559 --> 00:20:22,158
<font color="#CCCCCC">length of the linked list minus one and</font>

469
00:20:20,749 --> 00:20:24,490
this way I'll print just<font color="#E5E5E5"> the last</font>

470
00:20:22,159 --> 00:20:27,289
element without printing the whole thing

471
00:20:24,490 --> 00:20:29,779
so<font color="#CCCCCC"> although separators they be can be</font>

472
00:20:27,289 --> 00:20:35,779
combined to<font color="#CCCCCC"> produce rather</font><font color="#E5E5E5"> complex</font>

473
00:20:29,779 --> 00:20:37,340
<font color="#E5E5E5">expressions and this is again example</font>

474
00:20:35,779 --> 00:20:40,190
from the<font color="#CCCCCC"> previous slide where I print</font>

475
00:20:37,340 --> 00:20:42,499
the last<font color="#CCCCCC"> element of the array</font><font color="#E5E5E5"> and I want</font>

476
00:20:40,190 --> 00:20:44,779
to show that<font color="#CCCCCC"> right</font><font color="#E5E5E5"> or curly braces if I</font>

477
00:20:42,499 --> 00:20:49,159
up this<font color="#CCCCCC"> one and cure braces</font><font color="#E5E5E5"> I have</font><font color="#CCCCCC"> then</font>

478
00:20:44,779 --> 00:20:51,230
I I won't have the expression<font color="#E5E5E5"> in here I</font>

479
00:20:49,159 --> 00:20:53,149
have its<font color="#CCCCCC"> value because</font><font color="#E5E5E5"> curly braces they</font>

480
00:20:51,230 --> 00:20:55,279
<font color="#E5E5E5">broke by a big</font><font color="#CCCCCC"> dork</font><font color="#E5E5E5"> like braces but they</font>

481
00:20:53,149 --> 00:20:59,178
also evaluate the<font color="#E5E5E5"> result</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> printed in</font>

482
00:20:55,279 --> 00:21:01,789
here so I can<font color="#CCCCCC"> easily see what element in</font>

483
00:20:59,179 --> 00:21:04,240
the array was found by the previous

484
00:21:01,789 --> 00:21:04,240
expression

485
00:21:06,420 --> 00:21:11,070
<font color="#E5E5E5">and there are also aggregation</font><font color="#CCCCCC"> a</font>

486
00:21:07,950 --> 00:21:14,490
<font color="#CCCCCC">curators the one that</font><font color="#E5E5E5"> sounds the value</font>

487
00:21:11,070 --> 00:21:15,570
<font color="#E5E5E5">it's not like I said it I want to</font>

488
00:21:14,490 --> 00:21:17,400
<font color="#CCCCCC">consider the length</font><font color="#E5E5E5"> of the linked list</font>

489
00:21:15,570 --> 00:21:19,740
<font color="#E5E5E5">but it doesn't really calculate the</font>

490
00:21:17,400 --> 00:21:21,840
length of the linked list<font color="#E5E5E5"> it</font><font color="#CCCCCC"> it can be</font>

491
00:21:19,740 --> 00:21:23,550
<font color="#E5E5E5">applied</font><font color="#CCCCCC"> to any expression and it will</font>

492
00:21:21,840 --> 00:21:26,100
<font color="#E5E5E5">return</font><font color="#CCCCCC"> the number</font><font color="#E5E5E5"> of values in this</font>

493
00:21:23,550 --> 00:21:28,649
expression<font color="#E5E5E5"> so here I do a multiplier</font>

494
00:21:26,100 --> 00:21:30,870
value expression that works the whole

495
00:21:28,650 --> 00:21:33,060
increased in the joints all the elements

496
00:21:30,870 --> 00:21:34,379
in the<font color="#CCCCCC"> linked list</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then I apply</font><font color="#E5E5E5"> the</font>

497
00:21:33,060 --> 00:21:35,970
current decorator<font color="#E5E5E5"> and it returns the</font>

498
00:21:34,380 --> 00:21:37,940
<font color="#CCCCCC">number of elements in this</font><font color="#E5E5E5"> expressionist</font>

499
00:21:35,970 --> 00:21:42,000
number of elements in<font color="#E5E5E5"> the linked list</font>

500
00:21:37,940 --> 00:21:44,220
another one is<font color="#CCCCCC"> sums all the numbers</font><font color="#E5E5E5"> of</font>

501
00:21:42,000 --> 00:21:46,740
all the<font color="#E5E5E5"> numbers from the all the values</font>

502
00:21:44,220 --> 00:21:50,880
in<font color="#E5E5E5"> the expression in it and it can</font><font color="#CCCCCC"> be</font>

503
00:21:46,740 --> 00:21:53,490
used if I want in in<font color="#CCCCCC"> money</font><font color="#E5E5E5"> a DB for</font>

504
00:21:50,880 --> 00:21:55,140
example this<font color="#CCCCCC"> ruptured sounds how many</font>

505
00:21:53,490 --> 00:21:56,760
times a particular<font color="#CCCCCC"> skill</font><font color="#E5E5E5"> statement was</font>

506
00:21:55,140 --> 00:21:58,740
executed<font color="#E5E5E5"> and if I want to do a sum of</font>

507
00:21:56,760 --> 00:22:00,450
how many times any<font color="#CCCCCC"> piece girl said</font>

508
00:21:58,740 --> 00:22:02,880
mother good executed I can just do it

509
00:22:00,450 --> 00:22:07,350
with<font color="#E5E5E5"> jewel this way and then I come to</font>

510
00:22:02,880 --> 00:22:08,490
<font color="#CCCCCC">the number 17 and this</font><font color="#E5E5E5"> is not a complete</font>

511
00:22:07,350 --> 00:22:11,730
<font color="#CCCCCC">description</font><font color="#E5E5E5"> of deals there are other</font>

512
00:22:08,490 --> 00:22:13,170
<font color="#E5E5E5">apparatus which are not</font><font color="#CCCCCC"> as often</font><font color="#E5E5E5"> used as</font>

513
00:22:11,730 --> 00:22:15,450
those that I've already<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> I</font>

514
00:22:13,170 --> 00:22:18,480
mentioned them the<font color="#E5E5E5"> essential practices</font><font color="#CCCCCC"> i</font>

515
00:22:15,450 --> 00:22:21,840
used pretty much<font color="#E5E5E5"> daily well some of them</font>

516
00:22:18,480 --> 00:22:27,690
weekly and others that<font color="#E5E5E5"> I didn't mention</font>

517
00:22:21,840 --> 00:22:32,100
<font color="#CCCCCC">I use maybe never</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> maybe once a month</font>

518
00:22:27,690 --> 00:22:34,020
but they came from the original<font color="#E5E5E5"> original</font>

519
00:22:32,100 --> 00:22:35,639
deal<font color="#E5E5E5"> that was implemented by Michael</font>

520
00:22:34,020 --> 00:22:40,160
<font color="#CCCCCC">Cohen I tried to preserve the semantics</font>

521
00:22:35,640 --> 00:22:40,160
<font color="#CCCCCC">and all the operators so</font>

522
00:22:44,870 --> 00:22:55,100
it's all<font color="#CCCCCC"> very useful I guess the first</font>

523
00:22:49,759 --> 00:22:59,539
question is what<font color="#E5E5E5"> like what license this</font>

524
00:22:55,100 --> 00:23:02,149
is the<font color="#E5E5E5"> dual py under now is a GPL</font><font color="#CCCCCC"> I</font>

525
00:22:59,539 --> 00:23:05,240
think it's<font color="#E5E5E5"> business as far as I remember</font>

526
00:23:02,149 --> 00:23:07,639
it you know<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> III close one of the</font>

527
00:23:05,240 --> 00:23:10,129
reasons that you<font color="#E5E5E5"> had mentioned earlier</font>

528
00:23:07,639 --> 00:23:13,729
<font color="#E5E5E5">was it</font><font color="#CCCCCC"> doesn't invoke clear</font><font color="#E5E5E5"> printers on</font>

529
00:23:10,129 --> 00:23:20,119
the actual printed values<font color="#E5E5E5"> so like in</font>

530
00:23:13,730 --> 00:23:22,039
that linked list yeah<font color="#CCCCCC"> sorry</font>

531
00:23:20,119 --> 00:24:06,199
well I don't come in and<font color="#E5E5E5"> slide but it</font>

532
00:23:22,039 --> 00:24:08,869
uses not normal because<font color="#E5E5E5"> it's using so it</font>

533
00:24:06,200 --> 00:24:11,600
will<font color="#CCCCCC"> work</font><font color="#E5E5E5"> with any</font><font color="#CCCCCC"> language but the</font><font color="#E5E5E5"> GL</font>

534
00:24:08,869 --> 00:24:13,730
syntax is<font color="#CCCCCC"> C</font><font color="#E5E5E5"> based so you need to</font><font color="#CCCCCC"> syntax</font>

535
00:24:11,600 --> 00:24:16,330
in dual expressions<font color="#E5E5E5"> whatever you use in</font>

536
00:24:13,730 --> 00:24:18,559
when you do print command in gdb<font color="#CCCCCC"> its</font>

537
00:24:16,330 --> 00:24:20,210
dual doesn't have anything degree<font color="#E5E5E5"> that</font>

538
00:24:18,559 --> 00:24:22,970
it has a built-in<font color="#E5E5E5"> parser that parses</font>

539
00:24:20,210 --> 00:24:27,619
expressions<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to the new</font>

540
00:24:22,970 --> 00:24:29,240
language well if you just you just need

541
00:24:27,619 --> 00:24:31,610
to<font color="#E5E5E5"> use Python you just need to use</font>

542
00:24:29,240 --> 00:24:33,379
Pascal syntax when you do<font color="#CCCCCC"> Piscotty</font>

543
00:24:31,610 --> 00:24:35,959
expression window print you need to<font color="#E5E5E5"> use</font>

544
00:24:33,379 --> 00:24:39,939
syntax it's<font color="#CCCCCC"> in C syntax for pascal is</font>

545
00:24:35,960 --> 00:24:39,940
for<font color="#E5E5E5"> pascal expressions when you do</font>

546
00:24:41,920 --> 00:24:47,530
yes if you had a struct that<font color="#E5E5E5"> had a</font>

547
00:24:45,400 --> 00:24:49,870
pointer to<font color="#E5E5E5"> like an array and then the</font>

548
00:24:47,530 --> 00:24:52,840
struct field there<font color="#E5E5E5"> was the number of</font>

549
00:24:49,870 --> 00:24:58,540
elements<font color="#E5E5E5"> I didn't see a syntax that</font>

550
00:24:52,840 --> 00:25:01,720
apply to that<font color="#E5E5E5"> like where you don't need</font>

551
00:24:58,540 --> 00:25:04,320
<font color="#E5E5E5">to</font><font color="#CCCCCC"> use outside condition for that you</font>

552
00:25:01,720 --> 00:25:04,320
can just

553
00:25:08,970 --> 00:25:16,780
you can just use the<font color="#CCCCCC"> wrench</font><font color="#E5E5E5"> you can</font>

554
00:25:11,020 --> 00:25:18,610
<font color="#CCCCCC">specify length here yeah</font><font color="#E5E5E5"> it's a traitor</font>

555
00:25:16,780 --> 00:25:21,250
is to<font color="#CCCCCC"> notice a operator those two are</font>

556
00:25:18,610 --> 00:25:23,679
expressions<font color="#E5E5E5"> everything is an expression</font>

557
00:25:21,250 --> 00:25:30,250
<font color="#CCCCCC">and they can be</font><font color="#E5E5E5"> combined</font><font color="#CCCCCC"> any way</font><font color="#E5E5E5"> you</font>

558
00:25:23,680 --> 00:25:32,290
want yeah it'll<font color="#E5E5E5"> check the name of the</font>

559
00:25:30,250 --> 00:25:35,890
variable or name of<font color="#CCCCCC"> the structure</font>

560
00:25:32,290 --> 00:25:38,909
structure field depending on the yes<font color="#E5E5E5"> if</font>

561
00:25:35,890 --> 00:25:38,910
<font color="#E5E5E5">you're inside</font><font color="#CCCCCC"> structure</font>

562
00:25:46,820 --> 00:25:52,129
that's that that's<font color="#E5E5E5"> non customizable like</font>

563
00:25:49,369 --> 00:26:00,529
you've got no no no the<font color="#E5E5E5"> only</font><font color="#CCCCCC"> thing you</font>

564
00:25:52,129 --> 00:26:02,539
have is curly braces yeah<font color="#E5E5E5"> the only thing</font>

565
00:26:00,529 --> 00:26:04,369
<font color="#CCCCCC">if you would carry brace around</font>

566
00:26:02,539 --> 00:26:06,049
something<font color="#E5E5E5"> then you have its value in</font>

567
00:26:04,369 --> 00:26:11,149
here instead of the original symbolic

568
00:26:06,049 --> 00:26:17,690
expression but<font color="#CCCCCC"> I I've copied the syntax</font>

569
00:26:11,149 --> 00:26:19,488
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> front of</font><font color="#CCCCCC"> the original do almost</font>

570
00:26:17,690 --> 00:26:22,489
original do you<font color="#CCCCCC"> put in the string in</font>

571
00:26:19,489 --> 00:26:27,409
here<font color="#CCCCCC"> I used</font><font color="#E5E5E5"> gdb standard printer so I</font>

572
00:26:22,489 --> 00:26:31,209
get I<font color="#E5E5E5"> I</font><font color="#CCCCCC"> need to first so this thing is</font>

573
00:26:27,409 --> 00:26:31,209
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> to disappoint like in here</font>

574
00:26:52,600 --> 00:27:02,780
well<font color="#CCCCCC"> cash the counter operation fetch</font><font color="#E5E5E5"> /p</font>

575
00:27:00,290 --> 00:27:04,790
trilogy<font color="#CCCCCC"> it does not count n elements in</font>

576
00:27:02,780 --> 00:27:06,590
<font color="#E5E5E5">the array</font><font color="#CCCCCC"> or anything intelligence</font><font color="#E5E5E5"> the</font>

577
00:27:04,790 --> 00:27:08,540
number of values in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> expression if I</font>

578
00:27:06,590 --> 00:27:10,129
<font color="#E5E5E5">put it in here it would return hundred</font>

579
00:27:08,540 --> 00:27:12,409
because<font color="#E5E5E5"> this expression has hundred</font><font color="#CCCCCC"> to</font>

580
00:27:10,130 --> 00:27:15,980
<font color="#CCCCCC">values</font><font color="#E5E5E5"> so if you need to you get an</font>

581
00:27:12,410 --> 00:27:22,990
array<font color="#E5E5E5"> then you need to convert</font><font color="#CCCCCC"> it to all</font>

582
00:27:15,980 --> 00:27:22,990
values of<font color="#CCCCCC"> the array by using and then</font>

583
00:27:42,760 --> 00:27:50,920
and<font color="#E5E5E5"> I'm assuming then that do pass is</font>

584
00:27:45,920 --> 00:27:50,920
actual expressions<font color="#CCCCCC"> GD B's expression so</font>

585
00:27:51,640 --> 00:27:58,250
well it doesn't<font color="#E5E5E5"> pass individual</font>

586
00:27:54,650 --> 00:28:00,740
expressions it<font color="#CCCCCC"> passes</font><font color="#E5E5E5"> it will pass th D</font>

587
00:27:58,250 --> 00:28:02,390
and then it'll use get the structure for

588
00:28:00,740 --> 00:28:04,640
<font color="#CCCCCC">that and that'll get really released</font>

589
00:28:02,390 --> 00:28:07,100
member of the change<font color="#CCCCCC"> the structure</font><font color="#E5E5E5"> I'm</font>

590
00:28:04,640 --> 00:28:08,900
just<font color="#E5E5E5"> wondering how you could you know</font>

591
00:28:07,100 --> 00:28:11,000
creative casting<font color="#E5E5E5"> how that would work</font>

592
00:28:08,900 --> 00:28:14,240
I mean say you've got a value and<font color="#E5E5E5"> you</font>

593
00:28:11,000 --> 00:28:18,260
<font color="#E5E5E5">want to cast it to another value and you</font>

594
00:28:14,240 --> 00:28:21,020
know whether it'll it'll get it'll get

595
00:28:18,260 --> 00:28:25,740
<font color="#CCCCCC">to be</font>

596
00:28:21,020 --> 00:28:27,750
type object for the cost and then<font color="#CCCCCC"> ago</font>

597
00:28:25,740 --> 00:28:34,620
<font color="#CCCCCC">cast the previous previously DB value</font><font color="#E5E5E5"> to</font>

598
00:28:27,750 --> 00:28:37,350
this one this<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> original</font>

599
00:28:34,620 --> 00:28:39,030
<font color="#E5E5E5">G didn't do it didn't do question</font>

600
00:28:37,350 --> 00:28:41,159
<font color="#CCCCCC">properly because there were syntax</font>

601
00:28:39,030 --> 00:28:42,720
ambiguity and the<font color="#CCCCCC"> by the way</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> thought</font>

602
00:28:41,160 --> 00:28:44,190
<font color="#CCCCCC">cinders ambiguous I just assumed</font><font color="#E5E5E5"> this a</font>

603
00:28:42,720 --> 00:28:45,450
type I tried to resolve<font color="#CCCCCC"> it to type</font><font color="#E5E5E5"> and</font>

604
00:28:44,190 --> 00:28:56,370
doesn't know<font color="#E5E5E5"> which type as a result in</font>

605
00:28:45,450 --> 00:29:00,210
severe depression yes<font color="#CCCCCC"> yeah I've got this</font>

606
00:28:56,370 --> 00:29:06,389
question<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> the sense I've got it</font><font color="#E5E5E5"> as</font>

607
00:29:00,210 --> 00:29:07,950
a issue in github I didn't I didn't<font color="#E5E5E5"> I</font>

608
00:29:06,390 --> 00:29:09,900
didn't invest any effort into<font color="#CCCCCC"> that I</font>

609
00:29:07,950 --> 00:29:13,140
<font color="#E5E5E5">mean really</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> particular I don't</font>

610
00:29:09,900 --> 00:29:18,180
know maybe<font color="#CCCCCC"> there's many more requests</font>

611
00:29:13,140 --> 00:29:19,890
<font color="#E5E5E5">I'll look into it I guess</font><font color="#CCCCCC"> it should be</font>

612
00:29:18,180 --> 00:29:23,370
<font color="#CCCCCC">picture sure</font><font color="#E5E5E5"> to separate the parts from</font>

613
00:29:19,890 --> 00:29:25,940
<font color="#E5E5E5">the</font><font color="#CCCCCC"> db-api</font><font color="#E5E5E5"> stuff then it might be</font>

614
00:29:23,370 --> 00:29:25,939
<font color="#CCCCCC">possible</font>

615
00:29:28,800 --> 00:29:31,940
[Music]

616
00:29:34,460 --> 00:29:37,559
[Applause]

617
00:29:50,630 --> 00:29:53,829
[Music]

618
00:30:06,299 --> 00:30:18,418
any more questions yes so that's that's

619
00:30:15,509 --> 00:30:22,049
some limitation of<font color="#E5E5E5"> gdb pythonic right so</font>

620
00:30:18,419 --> 00:30:24,120
I can<font color="#CCCCCC"> do function calls</font><font color="#E5E5E5"> like I can it</font>

621
00:30:22,049 --> 00:30:27,210
can invoke normal functions<font color="#E5E5E5"> it cannot</font>

622
00:30:24,120 --> 00:30:33,629
invoke gdb built-in functions and it

623
00:30:27,210 --> 00:30:36,029
cannot invoke objects object methods

624
00:30:33,630 --> 00:30:38,070
because object methods<font color="#E5E5E5"> and gdb built-in</font>

625
00:30:36,029 --> 00:30:40,620
functions they are<font color="#E5E5E5"> not callable when</font>

626
00:30:38,070 --> 00:30:42,689
converted to GDP value<font color="#E5E5E5"> so that's a bug</font>

627
00:30:40,620 --> 00:30:46,189
report about<font color="#CCCCCC"> that and</font><font color="#E5E5E5"> there's not much</font>

628
00:30:42,690 --> 00:30:46,190
activity<font color="#CCCCCC"> around there</font>

629
00:30:50,640 --> 00:30:55,680
no no I guess<font color="#CCCCCC"> that was the main one</font>

630
00:31:01,180 --> 00:31:06,900
<font color="#CCCCCC">ah yeah her depression</font>

631
00:31:06,990 --> 00:31:10,100
<font color="#CCCCCC">your equation</font>

632
00:31:18,310 --> 00:31:22,960
could you please<font color="#E5E5E5"> speak</font><font color="#CCCCCC"> up louder</font>

633
00:31:26,050 --> 00:31:30,629
can<font color="#CCCCCC"> you use</font><font color="#E5E5E5"> dual expressions with a</font>

634
00:31:28,000 --> 00:31:30,630
<font color="#E5E5E5">display</font><font color="#CCCCCC"> clock</font>

635
00:31:51,330 --> 00:31:58,919


636
00:31:53,760 --> 00:32:01,080
<font color="#CCCCCC">you change the display of this one no no</font>

637
00:31:58,920 --> 00:32:03,360
because it's it's well<font color="#CCCCCC"> it's design it</font>

638
00:32:01,080 --> 00:32:05,550
was designed to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> easily print and</font>

639
00:32:03,360 --> 00:32:07,770
<font color="#E5E5E5">analyze structures it's not an language</font>

640
00:32:05,550 --> 00:32:12,620
<font color="#CCCCCC">to generate pretty reports out</font><font color="#E5E5E5"> of your</font>

641
00:32:07,770 --> 00:32:16,220
data so<font color="#E5E5E5"> that's not much formatting of</font>

642
00:32:12,620 --> 00:32:16,219
what you do with<font color="#CCCCCC"> the data</font>

643
00:32:21,290 --> 00:32:24,220
<font color="#CCCCCC">yes I can</font>

644
00:32:38,220 --> 00:32:44,319
[Applause]

645
00:32:45,500 --> 00:33:21,830
the parser even if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> something is</font>

646
00:33:18,299 --> 00:33:21,830
generally<font color="#E5E5E5"> useful for you</font>

647
00:33:25,280 --> 00:33:27,820
yeah

648
00:33:29,340 --> 00:33:35,668
[Music]

649
00:33:32,220 --> 00:33:35,669
thank you for the talk

