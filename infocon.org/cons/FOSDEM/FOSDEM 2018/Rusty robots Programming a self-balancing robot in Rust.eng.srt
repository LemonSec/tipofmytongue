1
00:00:04,940 --> 00:00:13,850
we have<font color="#E5E5E5"> Jorge operatio</font>

2
00:00:08,220 --> 00:00:13,850
is going to be presenting on<font color="#CCCCCC"> robots</font>

3
00:00:22,699 --> 00:00:28,140
<font color="#CCCCCC">thank you</font>

4
00:00:25,699 --> 00:00:30,240
we<font color="#E5E5E5"> don't have as much time I would like</font>

5
00:00:28,140 --> 00:00:32,989
so we'll type in right<font color="#E5E5E5"> into</font><font color="#CCCCCC"> you</font>

6
00:00:30,240 --> 00:00:43,110
yeah sure can you hear mother back<font color="#CCCCCC"> yes</font>

7
00:00:32,989 --> 00:00:45,120
<font color="#E5E5E5">no trash out</font><font color="#CCCCCC"> okay I will shout okay so</font>

8
00:00:43,110 --> 00:00:47,250
this is the robot<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the front</font>

9
00:00:45,120 --> 00:00:49,739
view<font color="#CCCCCC"> and you can see it's a wheel robot</font>

10
00:00:47,250 --> 00:00:51,450
and only has two wheels<font color="#E5E5E5"> and the mass</font><font color="#CCCCCC"> of</font>

11
00:00:49,739 --> 00:00:55,290
white on the top<font color="#E5E5E5"> is the electronics that</font>

12
00:00:51,450 --> 00:00:57,000
<font color="#E5E5E5">will control</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and there's some cortex</font>

13
00:00:55,290 --> 00:00:59,070
<font color="#E5E5E5">in my controller in there</font><font color="#CCCCCC"> among other</font>

14
00:00:57,000 --> 00:01:00,870
things<font color="#CCCCCC"> and this the side view you</font><font color="#E5E5E5"> can</font>

15
00:00:59,070 --> 00:01:03,660
see<font color="#E5E5E5"> he</font><font color="#CCCCCC"> only has two wheels</font><font color="#E5E5E5"> no extra</font>

16
00:01:00,870 --> 00:01:05,039
support point and<font color="#E5E5E5"> the robot is clearly</font>

17
00:01:03,660 --> 00:01:07,140
unstable<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> matter which</font>

18
00:01:05,039 --> 00:01:11,850
position<font color="#CCCCCC"> you</font><font color="#E5E5E5"> put it on it will always</font>

19
00:01:07,140 --> 00:01:14,940
fall to<font color="#E5E5E5"> either side and this is similar</font>

20
00:01:11,850 --> 00:01:16,678
<font color="#E5E5E5">to a common</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> in control theory</font>

21
00:01:14,940 --> 00:01:18,810
which is<font color="#E5E5E5"> the inverted pendulum problem</font>

22
00:01:16,679 --> 00:01:20,910
and<font color="#CCCCCC"> it that problem we have an inverted</font>

23
00:01:18,810 --> 00:01:23,130
<font color="#E5E5E5">pendulum on top of a</font><font color="#CCCCCC"> moving car which</font>

24
00:01:20,910 --> 00:01:26,580
you<font color="#CCCCCC"> can move</font><font color="#E5E5E5"> using this force F now the</font>

25
00:01:23,130 --> 00:01:28,770
pendulum<font color="#E5E5E5"> will fall due to gravity and to</font>

26
00:01:26,580 --> 00:01:30,390
compensate<font color="#CCCCCC"> that falling action</font><font color="#E5E5E5"> what you</font>

27
00:01:28,770 --> 00:01:32,130
have to do is if the<font color="#CCCCCC"> pendulum is moving</font>

28
00:01:30,390 --> 00:01:34,319
to a left then you also have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> move the</font>

29
00:01:32,130 --> 00:01:36,720
<font color="#CCCCCC">cart</font><font color="#E5E5E5"> to a left to compensate so the</font>

30
00:01:34,319 --> 00:01:39,330
problem boils down to picking a force F

31
00:01:36,720 --> 00:01:43,289
<font color="#E5E5E5">that according to the tilt angle theta</font>

32
00:01:39,330 --> 00:01:46,020
<font color="#E5E5E5">that you see there okay</font>

33
00:01:43,289 --> 00:01:47,880
so we'll need<font color="#E5E5E5"> to find that tilt angle</font>

34
00:01:46,020 --> 00:01:50,429
and for that<font color="#E5E5E5"> we have an accelerometer on</font>

35
00:01:47,880 --> 00:01:52,080
the robot<font color="#CCCCCC"> and as the name implies an</font>

36
00:01:50,429 --> 00:01:54,929
accelerometer measures<font color="#E5E5E5"> proper</font>

37
00:01:52,080 --> 00:01:58,770
acceleration and this<font color="#E5E5E5"> sense when using</font>

38
00:01:54,929 --> 00:02:01,550
as the<font color="#E5E5E5"> MP</font><font color="#CCCCCC"> you 9250 now how do I get the</font>

39
00:01:58,770 --> 00:02:03,420
chill angle from the acceleration and

40
00:02:01,550 --> 00:02:04,649
accelerometers<font color="#E5E5E5"> even when they are</font><font color="#CCCCCC"> non</font>

41
00:02:03,420 --> 00:02:07,410
<font color="#CCCCCC">moving they always sends the</font>

42
00:02:04,649 --> 00:02:08,818
acceleration of the gravity<font color="#E5E5E5"> and on the</font>

43
00:02:07,410 --> 00:02:11,038
<font color="#E5E5E5">picture on the left you see that the</font>

44
00:02:08,818 --> 00:02:12,839
sensor<font color="#CCCCCC"> is horizontal</font><font color="#E5E5E5"> and in that case</font>

45
00:02:11,038 --> 00:02:14,849
the salaah meter is<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> indicate</font>

46
00:02:12,840 --> 00:02:18,390
that the acceleration across the X and<font color="#E5E5E5"> Y</font>

47
00:02:14,849 --> 00:02:20,760
<font color="#E5E5E5">axis are zero but across the C axis is</font>

48
00:02:18,390 --> 00:02:22,350
<font color="#CCCCCC">1 times the gravity or</font><font color="#E5E5E5"> 1g and that's</font>

49
00:02:20,760 --> 00:02:24,720
going to<font color="#E5E5E5"> be a</font><font color="#CCCCCC"> feel angle of</font><font color="#E5E5E5"> 0 degrees</font>

50
00:02:22,350 --> 00:02:27,209
and now on the right to see that I have

51
00:02:24,720 --> 00:02:29,520
<font color="#E5E5E5">tilde essential by some angle and it</font>

52
00:02:27,209 --> 00:02:31,470
<font color="#CCCCCC">that case they</font><font color="#E5E5E5"> really across the y&z</font>

53
00:02:29,520 --> 00:02:33,540
<font color="#CCCCCC">axis are going to be</font><font color="#E5E5E5"> nonzero</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if you</font>

54
00:02:31,470 --> 00:02:35,730
do some trigonometry there<font color="#E5E5E5"> you'll find</font>

55
00:02:33,540 --> 00:02:40,049
<font color="#E5E5E5">out that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> angle</font><font color="#CCCCCC"> is the arctangent of</font>

56
00:02:35,730 --> 00:02:42,239
the<font color="#CCCCCC"> ratio of the</font><font color="#E5E5E5"> Y and C</font><font color="#CCCCCC"> components and</font>

57
00:02:40,050 --> 00:02:43,800
let's see how that<font color="#CCCCCC"> works out in practice</font>

58
00:02:42,240 --> 00:02:46,320
this is<font color="#E5E5E5"> data collecting from</font><font color="#CCCCCC"> the</font>

59
00:02:43,800 --> 00:02:48,239
accelerometer<font color="#E5E5E5"> and one is horizontal and</font>

60
00:02:46,320 --> 00:02:51,060
it's not moving<font color="#E5E5E5"> on the top you see</font><font color="#CCCCCC"> the</font>

61
00:02:48,239 --> 00:02:54,570
acceleration across the<font color="#CCCCCC"> y</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> z axis and</font>

62
00:02:51,060 --> 00:02:56,160
the data is noisy<font color="#CCCCCC"> and at the</font><font color="#E5E5E5"> bottom you</font>

63
00:02:54,570 --> 00:02:57,840
see the<font color="#CCCCCC"> our tangent formula from before</font>

64
00:02:56,160 --> 00:03:01,140
<font color="#E5E5E5">and that's going to be the feel angle</font>

65
00:02:57,840 --> 00:03:03,030
and the angle is<font color="#E5E5E5"> around</font><font color="#CCCCCC"> 2.9 degrees</font><font color="#E5E5E5"> and</font>

66
00:03:01,140 --> 00:03:06,570
that<font color="#E5E5E5"> makes</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> since the sensory</font>

67
00:03:03,030 --> 00:03:08,250
surgeonbell should be near<font color="#CCCCCC"> zero now what</font>

68
00:03:06,570 --> 00:03:09,930
happens if I start<font color="#E5E5E5"> moving the</font><font color="#CCCCCC"> salaah</font>

69
00:03:08,250 --> 00:03:12,660
<font color="#E5E5E5">meter and this data is</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> moving the</font>

70
00:03:09,930 --> 00:03:14,070
thermometer<font color="#E5E5E5"> on a horizontal table so in</font>

71
00:03:12,660 --> 00:03:17,310
that case the<font color="#E5E5E5"> feel angle should still be</font>

72
00:03:14,070 --> 00:03:18,840
<font color="#CCCCCC">0 because I know</font><font color="#E5E5E5"> tilt in</font><font color="#CCCCCC"> the sensor but</font>

73
00:03:17,310 --> 00:03:20,760
what we see here is that<font color="#E5E5E5"> once you</font>

74
00:03:18,840 --> 00:03:22,950
<font color="#E5E5E5">compute the angle using the formula from</font>

75
00:03:20,760 --> 00:03:25,620
<font color="#CCCCCC">before you get a lot</font><font color="#E5E5E5"> of oscillations and</font>

76
00:03:22,950 --> 00:03:27,238
this is clearly<font color="#E5E5E5"> wrong and the problem is</font>

77
00:03:25,620 --> 00:03:28,650
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> formula from before</font><font color="#CCCCCC"> was</font>

78
00:03:27,239 --> 00:03:30,120
assuming that<font color="#CCCCCC"> the only acceleration</font>

79
00:03:28,650 --> 00:03:31,680
measured by the sensor<font color="#CCCCCC"> passed</font><font color="#E5E5E5"> the</font>

80
00:03:30,120 --> 00:03:32,970
gravity and<font color="#E5E5E5"> that's not going to be the</font>

81
00:03:31,680 --> 00:03:36,060
case as<font color="#CCCCCC"> soon as you start moving the</font>

82
00:03:32,970 --> 00:03:38,130
sensor now<font color="#E5E5E5"> the</font><font color="#CCCCCC"> salami that is not enough</font>

83
00:03:36,060 --> 00:03:41,280
to get<font color="#E5E5E5"> us the</font><font color="#CCCCCC"> telling</font><font color="#E5E5E5"> goal so we also</font>

84
00:03:38,130 --> 00:03:44,070
have a gyroscope<font color="#CCCCCC"> on the robot</font><font color="#E5E5E5"> an algebra</font>

85
00:03:41,280 --> 00:03:46,170
scope measures the angular rate or the

86
00:03:44,070 --> 00:03:48,120
speed at<font color="#CCCCCC"> which the sensor is rotating</font>

87
00:03:46,170 --> 00:03:49,950
and<font color="#E5E5E5"> this is perfect because with this we</font>

88
00:03:48,120 --> 00:03:52,950
can<font color="#E5E5E5"> measure exactly</font><font color="#CCCCCC"> how the angle is</font>

89
00:03:49,950 --> 00:03:54,600
changing and the same sense<font color="#E5E5E5"> of from</font>

90
00:03:52,950 --> 00:03:58,048
before has<font color="#E5E5E5"> both an accelerometer and a</font>

91
00:03:54,600 --> 00:04:00,480
gyroscope<font color="#E5E5E5"> again this is data from</font><font color="#CCCCCC"> the</font>

92
00:03:58,049 --> 00:04:03,690
sensor<font color="#CCCCCC"> horizontally without</font><font color="#E5E5E5"> moving at</font>

93
00:04:00,480 --> 00:04:05,100
the top you<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> angular rate and at</font>

94
00:04:03,690 --> 00:04:06,750
what point you have the<font color="#CCCCCC"> till angle which</font>

95
00:04:05,100 --> 00:04:09,900
you<font color="#E5E5E5"> can get from integrating the top</font>

96
00:04:06,750 --> 00:04:13,290
<font color="#E5E5E5">signal and you see there that the</font><font color="#CCCCCC"> angle</font>

97
00:04:09,900 --> 00:04:15,660
says that<font color="#E5E5E5"> is increasing as</font><font color="#CCCCCC"> time goes by</font>

98
00:04:13,290 --> 00:04:17,548
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> wrong because the sensor is</font>

99
00:04:15,660 --> 00:04:20,250
horizontal and the problem here<font color="#E5E5E5"> is that</font>

100
00:04:17,548 --> 00:04:23,669
the<font color="#E5E5E5"> gyroscope says that the angular rate</font>

101
00:04:20,250 --> 00:04:25,620
is<font color="#E5E5E5"> nonzero</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> common in this</font>

102
00:04:23,669 --> 00:04:27,000
kind<font color="#E5E5E5"> of sensors and is called bias and</font>

103
00:04:25,620 --> 00:04:28,500
the opposite<font color="#E5E5E5"> in the measurement is</font>

104
00:04:27,000 --> 00:04:30,360
<font color="#E5E5E5">called bias and what you have to do is</font>

105
00:04:28,500 --> 00:04:33,569
calibrate the<font color="#E5E5E5"> sensor by removing the</font>

106
00:04:30,360 --> 00:04:35,400
and this the<font color="#E5E5E5"> the data once the sensor</font>

107
00:04:33,569 --> 00:04:37,379
has<font color="#CCCCCC"> been calibrated</font><font color="#E5E5E5"> and now the</font><font color="#CCCCCC"> angular</font>

108
00:04:35,400 --> 00:04:39,120
rate is around<font color="#E5E5E5"> zero and once you compute</font>

109
00:04:37,379 --> 00:04:40,830
<font color="#E5E5E5">the integral at the bottom the angle is</font>

110
00:04:39,120 --> 00:04:43,199
also<font color="#E5E5E5"> around zero which is the correct</font>

111
00:04:40,830 --> 00:04:44,789
result you want now

112
00:04:43,199 --> 00:04:46,710
the accelerometer and gyroscope have

113
00:04:44,789 --> 00:04:48,870
problems on<font color="#E5E5E5"> their own but what you can</font>

114
00:04:46,710 --> 00:04:50,580
do is combine both measurements<font color="#E5E5E5"> using a</font>

115
00:04:48,870 --> 00:04:53,219
technique called sensor<font color="#CCCCCC"> fission to get a</font>

116
00:04:50,580 --> 00:04:55,530
better estimate<font color="#CCCCCC"> of the angle and turn</font>

117
00:04:53,219 --> 00:04:56,969
many ways to do sensor<font color="#E5E5E5"> fusion but a</font>

118
00:04:55,530 --> 00:04:59,369
<font color="#E5E5E5">Kalman filter is appropriate in this</font>

119
00:04:56,969 --> 00:05:02,039
case now I'm going into the details of

120
00:04:59,370 --> 00:05:03,659
<font color="#E5E5E5">the mat behind Kalman filters but as you</font>

121
00:05:02,039 --> 00:05:06,080
<font color="#E5E5E5">said that they are not actually filters</font>

122
00:05:03,659 --> 00:05:08,699
but they are system state estimators<font color="#CCCCCC"> and</font>

123
00:05:06,080 --> 00:05:10,979
<font color="#CCCCCC">for this Kalman filter</font><font color="#E5E5E5"> have chosen and</font>

124
00:05:08,699 --> 00:05:13,740
state<font color="#E5E5E5"> of the teal angle and also the</font>

125
00:05:10,979 --> 00:05:15,508
<font color="#CCCCCC">yellow</font><font color="#E5E5E5"> scope bias and here we see a</font>

126
00:05:13,740 --> 00:05:17,789
simplified interface<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> Canon Peter</font>

127
00:05:15,509 --> 00:05:20,099
has<font color="#E5E5E5"> submitted some tuning parameters</font>

128
00:05:17,789 --> 00:05:22,050
<font color="#E5E5E5">from here and the filter have to start</font>

129
00:05:20,099 --> 00:05:25,949
with some<font color="#CCCCCC"> initial state which is the</font>

130
00:05:22,050 --> 00:05:27,509
<font color="#CCCCCC">angle</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the yellow scope bias and then</font>

131
00:05:25,949 --> 00:05:29,449
every time we have a new measurement<font color="#E5E5E5"> we</font>

132
00:05:27,509 --> 00:05:31,409
are<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> update this filter</font><font color="#E5E5E5"> and</font>

133
00:05:29,449 --> 00:05:33,449
while the filter will do is try<font color="#CCCCCC"> to</font>

134
00:05:31,409 --> 00:05:35,699
predict<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next state using his</font>

135
00:05:33,449 --> 00:05:37,169
previous state<font color="#E5E5E5"> and they will compare</font>

136
00:05:35,699 --> 00:05:38,699
that<font color="#CCCCCC"> to the measurements from the yellow</font>

137
00:05:37,169 --> 00:05:39,870
scope and the accelerometer<font color="#E5E5E5"> and you</font>

138
00:05:38,699 --> 00:05:43,740
study information<font color="#E5E5E5"> to get a better</font>

139
00:05:39,870 --> 00:05:45,919
estimate<font color="#E5E5E5"> of the angle and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is why</font>

140
00:05:43,740 --> 00:05:48,180
the Kalman filter looks like in action

141
00:05:45,919 --> 00:05:50,909
<font color="#CCCCCC">again this is data from the sensor</font>

142
00:05:48,180 --> 00:05:52,800
horizontal<font color="#E5E5E5"> without moving and the blue</font>

143
00:05:50,909 --> 00:05:55,710
dots<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> teal angle computed only</font>

144
00:05:52,800 --> 00:05:58,289
using<font color="#CCCCCC"> accelerated data and the Green</font>

145
00:05:55,710 --> 00:06:00,299
<font color="#CCCCCC">Line is the</font><font color="#E5E5E5"> Kalman filter and what said</font>

146
00:05:58,289 --> 00:06:02,430
<font color="#E5E5E5">the same thing that</font><font color="#CCCCCC"> the angle</font><font color="#E5E5E5"> is around</font>

147
00:06:00,300 --> 00:06:04,259
<font color="#CCCCCC">2.9 but the difference is that the</font>

148
00:06:02,430 --> 00:06:07,069
Kalman filter has much less noise<font color="#CCCCCC"> and it</font>

149
00:06:04,259 --> 00:06:09,539
has one order of<font color="#CCCCCC"> magnitude less noise</font>

150
00:06:07,069 --> 00:06:11,370
<font color="#E5E5E5">now we have another</font><font color="#CCCCCC"> example where I</font><font color="#E5E5E5"> move</font>

151
00:06:09,539 --> 00:06:15,270
the sensor<font color="#E5E5E5"> from a position of three</font>

152
00:06:11,370 --> 00:06:16,860
agrees to 19 and the blue<font color="#CCCCCC"> line is teal</font>

153
00:06:15,270 --> 00:06:18,960
angle from<font color="#E5E5E5"> only that centimeter and</font>

154
00:06:16,860 --> 00:06:21,449
green line is<font color="#E5E5E5"> the Kalman filter as you</font>

155
00:06:18,960 --> 00:06:24,388
can see the color<font color="#E5E5E5"> filter you see it has</font>

156
00:06:21,449 --> 00:06:26,520
a smooth<font color="#E5E5E5"> transition from 0 to</font><font color="#CCCCCC"> 90</font><font color="#E5E5E5"> but the</font>

157
00:06:24,389 --> 00:06:28,620
thermometer has oscillations<font color="#E5E5E5"> around</font><font color="#CCCCCC"> the</font>

158
00:06:26,520 --> 00:06:31,378
whole transition<font color="#E5E5E5"> while</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> using the</font>

159
00:06:28,620 --> 00:06:33,539
Kalman filter here<font color="#CCCCCC"> ok now we have</font><font color="#E5E5E5"> the</font>

160
00:06:31,379 --> 00:06:35,520
angle and<font color="#E5E5E5"> we have to move the motors to</font>

161
00:06:33,539 --> 00:06:38,550
be able<font color="#CCCCCC"> to stabilize</font><font color="#E5E5E5"> the robot and for</font>

162
00:06:35,520 --> 00:06:41,430
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> use this piece</font><font color="#E5E5E5"> of electronics</font>

163
00:06:38,550 --> 00:06:42,810
called<font color="#CCCCCC"> H bridge and this module</font><font color="#E5E5E5"> has to a</font>

164
00:06:41,430 --> 00:06:44,910
bridge<font color="#E5E5E5"> and we can use that</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> control</font>

165
00:06:42,810 --> 00:06:47,260
<font color="#E5E5E5">the two motors on</font><font color="#CCCCCC"> the road</font>

166
00:06:44,910 --> 00:06:49,840
and with h-bridge we can control the

167
00:06:47,260 --> 00:06:51,820
direction of the<font color="#CCCCCC"> model an h-bridge</font>

168
00:06:49,840 --> 00:06:54,429
<font color="#E5E5E5">basically is just</font><font color="#CCCCCC"> four switches</font><font color="#E5E5E5"> arranged</font>

169
00:06:51,820 --> 00:06:56,110
<font color="#E5E5E5">as you see on the screen and on the Left</font>

170
00:06:54,430 --> 00:06:59,830
we<font color="#CCCCCC"> have one of the possible states of</font>

171
00:06:56,110 --> 00:07:01,810
<font color="#E5E5E5">the H bridge and in that state the power</font>

172
00:06:59,830 --> 00:07:03,280
<font color="#E5E5E5">supply</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> applied to them motor and I</font>

173
00:07:01,810 --> 00:07:05,950
will<font color="#E5E5E5"> apply some voltage to make the</font>

174
00:07:03,280 --> 00:07:08,679
motor move and and<font color="#E5E5E5"> the state</font><font color="#CCCCCC"> on the</font>

175
00:07:05,950 --> 00:07:10,599
right<font color="#CCCCCC"> the</font><font color="#E5E5E5"> voltage is</font><font color="#CCCCCC"> also going to be</font>

176
00:07:08,680 --> 00:07:12,340
applied<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> motor but with reverse</font>

177
00:07:10,600 --> 00:07:15,790
polarity<font color="#CCCCCC"> that</font><font color="#E5E5E5"> will make it a spin in the</font>

178
00:07:12,340 --> 00:07:17,469
<font color="#CCCCCC">other</font><font color="#E5E5E5"> direction</font><font color="#CCCCCC"> so it has four stitches</font>

179
00:07:15,790 --> 00:07:20,740
and you could get<font color="#CCCCCC"> sixteen different</font>

180
00:07:17,470 --> 00:07:22,630
<font color="#E5E5E5">possible state from</font><font color="#CCCCCC"> that but in</font><font color="#E5E5E5"> practice</font>

181
00:07:20,740 --> 00:07:24,340
we only use four states<font color="#E5E5E5"> the two you see</font>

182
00:07:22,630 --> 00:07:25,570
there and<font color="#E5E5E5"> the other one</font><font color="#CCCCCC"> is when you</font><font color="#E5E5E5"> have</font>

183
00:07:24,340 --> 00:07:27,849
everything<font color="#E5E5E5"> open</font><font color="#CCCCCC"> and the motor is</font>

184
00:07:25,570 --> 00:07:29,950
disconnected<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the power supply</font><font color="#CCCCCC"> and</font>

185
00:07:27,850 --> 00:07:31,930
the other state is<font color="#CCCCCC"> when you short</font>

186
00:07:29,950 --> 00:07:33,789
<font color="#CCCCCC">circuit</font><font color="#E5E5E5"> the motor by say closing the two</font>

187
00:07:31,930 --> 00:07:35,590
switches<font color="#E5E5E5"> at the bottom and I will make</font>

188
00:07:33,790 --> 00:07:38,770
<font color="#E5E5E5">the</font><font color="#CCCCCC"> water</font><font color="#E5E5E5"> break so we will stop almost</font>

189
00:07:35,590 --> 00:07:40,150
immediately and with<font color="#CCCCCC"> this bridge you can</font>

190
00:07:38,770 --> 00:07:41,979
<font color="#E5E5E5">also control the speed</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the motor</font>

191
00:07:40,150 --> 00:07:44,500
<font color="#CCCCCC">which we are going to</font><font color="#E5E5E5"> need in this robot</font>

192
00:07:41,980 --> 00:07:44,830
and<font color="#CCCCCC"> we can do that isn't this technique</font>

193
00:07:44,500 --> 00:07:47,320
called

194
00:07:44,830 --> 00:07:49,240
pulse width modulation<font color="#E5E5E5"> and the main idea</font>

195
00:07:47,320 --> 00:07:51,310
is<font color="#CCCCCC"> that instead of having the motor</font>

196
00:07:49,240 --> 00:07:53,280
connected to the power supply<font color="#E5E5E5"> the</font><font color="#CCCCCC"> whole</font>

197
00:07:51,310 --> 00:07:56,620
time we are going to connect<font color="#E5E5E5"> it just for</font>

198
00:07:53,280 --> 00:07:57,849
75%<font color="#E5E5E5"> of the time say and</font><font color="#CCCCCC"> you're 25</font>

199
00:07:56,620 --> 00:07:59,680
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> we are going to leave</font><font color="#CCCCCC"> it</font>

200
00:07:57,850 --> 00:08:01,540
disconnected<font color="#E5E5E5"> this is going to transfer</font>

201
00:07:59,680 --> 00:08:04,030
less power into the model we<font color="#CCCCCC"> should make</font>

202
00:08:01,540 --> 00:08:06,040
it<font color="#CCCCCC"> the spin slower so this ratio between</font>

203
00:08:04,030 --> 00:08:07,809
the own time and the<font color="#E5E5E5"> total time is</font>

204
00:08:06,040 --> 00:08:11,710
called<font color="#E5E5E5"> the duty cycle and</font><font color="#CCCCCC"> it can go from</font>

205
00:08:07,810 --> 00:08:14,050
<font color="#CCCCCC">0 to</font><font color="#E5E5E5"> 100 percent and so</font><font color="#CCCCCC"> 100 percent</font><font color="#E5E5E5"> will</font>

206
00:08:11,710 --> 00:08:16,870
make the motor spin<font color="#E5E5E5"> at full speed and 0</font>

207
00:08:14,050 --> 00:08:20,080
will make it stop<font color="#E5E5E5"> now we have the two</font>

208
00:08:16,870 --> 00:08:22,540
pieces<font color="#E5E5E5"> we have the angle and we can</font>

209
00:08:20,080 --> 00:08:25,539
control<font color="#E5E5E5"> the mother so how can we pick a</font>

210
00:08:22,540 --> 00:08:28,420
duty cycle<font color="#CCCCCC"> to stabilize the robot</font><font color="#E5E5E5"> we can</font>

211
00:08:25,540 --> 00:08:30,520
use this PID controller and there in

212
00:08:28,420 --> 00:08:33,250
this diagram the process on the<font color="#CCCCCC"> right is</font>

213
00:08:30,520 --> 00:08:35,919
the robot and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> variable Y is the till</font>

214
00:08:33,250 --> 00:08:37,840
<font color="#E5E5E5">angle measure and on the Left we have</font>

215
00:08:35,919 --> 00:08:40,929
this variable R which is<font color="#E5E5E5"> the set</font><font color="#CCCCCC"> point</font>

216
00:08:37,840 --> 00:08:42,250
which is<font color="#E5E5E5"> the angle we want the trouble</font>

217
00:08:40,929 --> 00:08:43,900
to be at<font color="#E5E5E5"> so if we pick something</font><font color="#CCCCCC"> like</font>

218
00:08:42,250 --> 00:08:46,810
<font color="#CCCCCC">zero that will make the robot</font><font color="#E5E5E5"> stay</font>

219
00:08:43,900 --> 00:08:49,420
upright<font color="#E5E5E5"> and the difference between those</font>

220
00:08:46,810 --> 00:08:51,579
<font color="#CCCCCC">two</font><font color="#E5E5E5"> is the error and that error is</font><font color="#CCCCCC"> going</font>

221
00:08:49,420 --> 00:08:54,729
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> called by these three PID gains</font>

222
00:08:51,580 --> 00:08:56,500
and it's going<font color="#E5E5E5"> to turn into this control</font>

223
00:08:54,730 --> 00:08:57,610
variable U which is<font color="#E5E5E5"> the duty cycle we</font>

224
00:08:56,500 --> 00:09:01,810
apply<font color="#E5E5E5"> to the model</font>

225
00:08:57,610 --> 00:09:03,850
and now everything here<font color="#E5E5E5"> is going to be</font>

226
00:09:01,810 --> 00:09:06,250
compute at<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> except</font><font color="#E5E5E5"> for the PID</font>

227
00:09:03,850 --> 00:09:10,480
gains<font color="#CCCCCC"> dollar has</font><font color="#E5E5E5"> to be selected</font><font color="#CCCCCC"> before</font>

228
00:09:06,250 --> 00:09:13,960
running the<font color="#E5E5E5"> PID controller so if you</font>

229
00:09:10,480 --> 00:09:17,050
pick the right<font color="#CCCCCC"> gains for the PID</font>

230
00:09:13,960 --> 00:09:20,950
controller then we<font color="#E5E5E5"> get something like</font>

231
00:09:17,050 --> 00:09:26,770
<font color="#CCCCCC">this we get a stable system the robot</font>

232
00:09:20,950 --> 00:09:28,990
<font color="#CCCCCC">and longer</font><font color="#E5E5E5"> Falls and here we have data</font>

233
00:09:26,770 --> 00:09:31,960
<font color="#E5E5E5">from that previous video and you can</font><font color="#CCCCCC"> see</font>

234
00:09:28,990 --> 00:09:34,780
that at the<font color="#CCCCCC"> top we have the teal angle</font>

235
00:09:31,960 --> 00:09:36,370
measure and the blue line and<font color="#CCCCCC"> the Green</font>

236
00:09:34,780 --> 00:09:38,470
<font color="#CCCCCC">Line is the set point which shows in</font>

237
00:09:36,370 --> 00:09:39,940
this case it was 10 degrees<font color="#CCCCCC"> and the</font>

238
00:09:38,470 --> 00:09:43,240
action<font color="#E5E5E5"> of the PID</font><font color="#CCCCCC"> controller is going to</font>

239
00:09:39,940 --> 00:09:46,060
try<font color="#E5E5E5"> to stabilize the teal angle so it</font>

240
00:09:43,240 --> 00:09:48,160
will try to<font color="#E5E5E5"> match the set point at the</font>

241
00:09:46,060 --> 00:09:51,729
<font color="#CCCCCC">bottom you can see</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> duty cycle shows</font>

242
00:09:48,160 --> 00:09:53,800
him by the PID controller and there a

243
00:09:51,730 --> 00:09:57,850
<font color="#E5E5E5">negative value means that the motor</font>

244
00:09:53,800 --> 00:10:00,329
reverses its<font color="#E5E5E5"> orientation but that's not</font>

245
00:09:57,850 --> 00:10:02,800
the only<font color="#E5E5E5"> possible outcome</font><font color="#CCCCCC"> if you are</font>

246
00:10:00,330 --> 00:10:04,840
trying to guess what the correct KD

247
00:10:02,800 --> 00:10:06,729
gains are so if you<font color="#CCCCCC"> ensure thing</font>

248
00:10:04,840 --> 00:10:13,360
<font color="#E5E5E5">correctly you get something like</font><font color="#CCCCCC"> this</font>

249
00:10:06,730 --> 00:10:15,880
<font color="#CCCCCC">and unstable</font><font color="#E5E5E5"> system and what you got</font>

250
00:10:13,360 --> 00:10:17,890
there is oscillatory<font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> so instead</font>

251
00:10:15,880 --> 00:10:20,670
of having<font color="#E5E5E5"> the T Lang will converge to</font>

252
00:10:17,890 --> 00:10:24,040
<font color="#E5E5E5">the set point you get this oscillation</font>

253
00:10:20,670 --> 00:10:25,420
<font color="#CCCCCC">around the</font><font color="#E5E5E5"> set point and well that's</font>

254
00:10:24,040 --> 00:10:28,360
<font color="#E5E5E5">something you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> want so let's</font>

255
00:10:25,420 --> 00:10:30,189
continue<font color="#E5E5E5"> with the stable PD gains so</font>

256
00:10:28,360 --> 00:10:32,410
before we have unstable<font color="#E5E5E5"> system by the</font>

257
00:10:30,190 --> 00:10:35,110
robot didn't move<font color="#E5E5E5"> but at the end we want</font>

258
00:10:32,410 --> 00:10:36,880
to<font color="#E5E5E5"> be able to move the robot so what</font>

259
00:10:35,110 --> 00:10:39,970
should<font color="#CCCCCC"> we do</font><font color="#E5E5E5"> to move the robot like this</font>

260
00:10:36,880 --> 00:10:41,860
for example<font color="#CCCCCC"> and the only</font><font color="#E5E5E5"> thing we have</font>

261
00:10:39,970 --> 00:10:43,360
to<font color="#CCCCCC"> do is change the setpoint so before</font>

262
00:10:41,860 --> 00:10:45,820
<font color="#E5E5E5">it was 10 degrees</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that gave us</font>

263
00:10:43,360 --> 00:10:49,180
<font color="#E5E5E5">almost no motion but just in a value of</font>

264
00:10:45,820 --> 00:10:51,780
<font color="#E5E5E5">4</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to make the</font>

265
00:10:49,180 --> 00:10:54,459
robot move<font color="#E5E5E5"> so the top we see again the</font>

266
00:10:51,780 --> 00:10:56,620
<font color="#CCCCCC">teal angle stabilizes</font><font color="#E5E5E5"> around the</font>

267
00:10:54,460 --> 00:10:59,560
setpoint and at the<font color="#E5E5E5"> bottom we</font><font color="#CCCCCC"> have the</font>

268
00:10:56,620 --> 00:11:01,000
PID<font color="#E5E5E5"> a output which is the duty cycle</font>

269
00:10:59,560 --> 00:11:02,770
which stabilizes but this time in

270
00:11:01,000 --> 00:11:06,730
<font color="#E5E5E5">sterilizes</font><font color="#CCCCCC"> to unknown zero</font><font color="#E5E5E5"> valuing that</font>

271
00:11:02,770 --> 00:11:08,800
give us a<font color="#E5E5E5"> speed on the motor and a value</font>

272
00:11:06,730 --> 00:11:10,990
less than 10 give us our forward motion

273
00:11:08,800 --> 00:11:12,430
<font color="#E5E5E5">and if we</font><font color="#CCCCCC"> shows a value</font><font color="#E5E5E5"> larger</font>

274
00:11:10,990 --> 00:11:18,490
and then that<font color="#E5E5E5"> will give</font><font color="#CCCCCC"> us a backward</font>

275
00:11:12,430 --> 00:11:19,930
motion okay so at this point of<font color="#CCCCCC"> time you</font>

276
00:11:18,490 --> 00:11:23,620
are wondering okay this is cool and<font color="#E5E5E5"> all</font>

277
00:11:19,930 --> 00:11:26,410
but<font color="#E5E5E5"> wasn't this talk about rust</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> now</font>

278
00:11:23,620 --> 00:11:31,630
let's talk about<font color="#CCCCCC"> how rust</font><font color="#E5E5E5"> helped build</font>

279
00:11:26,410 --> 00:11:33,130
this kind<font color="#E5E5E5"> of application</font><font color="#CCCCCC"> and in this</font>

280
00:11:31,630 --> 00:11:35,680
<font color="#CCCCCC">diagram you see</font><font color="#E5E5E5"> the microcontroller in</font>

281
00:11:33,130 --> 00:11:37,480
the center and the other components are

282
00:11:35,680 --> 00:11:40,599
the external components to which the my

283
00:11:37,480 --> 00:11:42,610
<font color="#CCCCCC">controller is connected to and each</font><font color="#E5E5E5"> H in</font>

284
00:11:40,600 --> 00:11:45,670
this graph is one of the my<font color="#E5E5E5"> controller</font>

285
00:11:42,610 --> 00:11:47,320
pins and the direction<font color="#E5E5E5"> of the H</font>

286
00:11:45,670 --> 00:11:50,110
indicates<font color="#E5E5E5"> where</font><font color="#CCCCCC"> the pin is configured as</font>

287
00:11:47,320 --> 00:11:51,730
an input<font color="#E5E5E5"> or as an output and the label</font>

288
00:11:50,110 --> 00:11:53,890
indicates what<font color="#CCCCCC"> the functionality of</font><font color="#E5E5E5"> that</font>

289
00:11:51,730 --> 00:11:55,209
<font color="#E5E5E5">pin is and the bottom line here is that</font>

290
00:11:53,890 --> 00:11:56,800
<font color="#E5E5E5">you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> configure everything</font>

291
00:11:55,209 --> 00:11:58,750
correctly<font color="#E5E5E5"> otherwise your system will not</font>

292
00:11:56,800 --> 00:12:01,620
work<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will have a hard time</font>

293
00:11:58,750 --> 00:12:05,800
figuring out<font color="#CCCCCC"> what it's not working and</font>

294
00:12:01,620 --> 00:12:09,580
Roskam<font color="#CCCCCC"> hella fear</font><font color="#E5E5E5"> if you design your API</font>

295
00:12:05,800 --> 00:12:11,649
like something like<font color="#E5E5E5"> this and</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> in</font>

296
00:12:09,580 --> 00:12:13,660
<font color="#E5E5E5">this program we are going to set up a</font>

297
00:12:11,649 --> 00:12:16,089
serial interface<font color="#CCCCCC"> and for that we need to</font>

298
00:12:13,660 --> 00:12:19,600
use two pins<font color="#CCCCCC"> a transmission pin TX</font><font color="#E5E5E5"> and</font>

299
00:12:16,089 --> 00:12:21,610
our reception pin rx<font color="#E5E5E5"> now and the first</font>

300
00:12:19,600 --> 00:12:23,620
<font color="#E5E5E5">line we are</font><font color="#CCCCCC"> going to take all the</font>

301
00:12:21,610 --> 00:12:26,079
peripherals of the my controller into

302
00:12:23,620 --> 00:12:27,910
the current scope<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now the second</font>

303
00:12:26,079 --> 00:12:30,279
<font color="#E5E5E5">line we are</font><font color="#CCCCCC"> going to take just one</font>

304
00:12:27,910 --> 00:12:32,620
peripheral which is the<font color="#CCCCCC"> EPI Oh a which</font>

305
00:12:30,279 --> 00:12:34,810
is<font color="#E5E5E5"> in charge</font><font color="#CCCCCC"> of configuring the pins of</font>

306
00:12:32,620 --> 00:12:38,709
the<font color="#CCCCCC"> my controller and we are going</font><font color="#E5E5E5"> to</font>

307
00:12:34,810 --> 00:12:41,140
split<font color="#E5E5E5"> that into 16 independent pins now</font>

308
00:12:38,709 --> 00:12:44,649
the front line is going<font color="#E5E5E5"> to change the</font>

309
00:12:41,140 --> 00:12:48,010
pin pa9<font color="#E5E5E5"> into is going</font><font color="#CCCCCC"> to put it</font><font color="#E5E5E5"> into</font>

310
00:12:44,649 --> 00:12:49,770
alternate<font color="#E5E5E5"> push-pull output mode and that</font>

311
00:12:48,010 --> 00:12:53,770
<font color="#CCCCCC">means we are</font><font color="#E5E5E5"> going to use for the TX pin</font>

312
00:12:49,770 --> 00:12:57,130
and important to note here<font color="#CCCCCC"> is the type</font>

313
00:12:53,770 --> 00:13:00,670
of the TX variable and then you<font color="#E5E5E5"> can see</font>

314
00:12:57,130 --> 00:13:02,740
the pin name<font color="#CCCCCC"> pi9 but you also have this</font>

315
00:13:00,670 --> 00:13:04,899
parameter inside which says alternate

316
00:13:02,740 --> 00:13:07,600
<font color="#E5E5E5">push-pull and that's the state the pin</font>

317
00:13:04,899 --> 00:13:11,050
is in and this technique<font color="#E5E5E5"> of putting the</font>

318
00:13:07,600 --> 00:13:15,250
state of your<font color="#E5E5E5"> some value into</font><font color="#CCCCCC"> the type</font>

319
00:13:11,050 --> 00:13:17,890
is called a type state and the in line

320
00:13:15,250 --> 00:13:22,240
number<font color="#E5E5E5"> 4</font><font color="#CCCCCC"> we have simply assigned the</font>

321
00:13:17,890 --> 00:13:24,310
pink p8n to the our X<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> and we</font>

322
00:13:22,240 --> 00:13:24,880
have again<font color="#E5E5E5"> the name of a pin in the type</font>

323
00:13:24,310 --> 00:13:26,890
we

324
00:13:24,880 --> 00:13:30,370
<font color="#CCCCCC">10 but the state is different is</font><font color="#E5E5E5"> in</font>

325
00:13:26,890 --> 00:13:32,350
input mode and the<font color="#E5E5E5"> next thing we do</font><font color="#CCCCCC"> is</font>

326
00:13:30,370 --> 00:13:35,050
we<font color="#E5E5E5"> create we create a certain interface</font>

327
00:13:32,350 --> 00:13:38,320
and to create<font color="#E5E5E5"> that we pass both TX and</font>

328
00:13:35,050 --> 00:13:40,900
rx by<font color="#E5E5E5"> value now</font>

329
00:13:38,320 --> 00:13:43,300
this constructor is written in such a

330
00:13:40,900 --> 00:13:45,430
way<font color="#CCCCCC"> that if you</font><font color="#E5E5E5"> haven't configured your</font>

331
00:13:43,300 --> 00:13:47,319
<font color="#CCCCCC">PIN correctly</font><font color="#E5E5E5"> in the right mode then</font>

332
00:13:45,430 --> 00:13:49,959
this<font color="#E5E5E5"> won't compile because</font><font color="#CCCCCC"> it has to</font>

333
00:13:47,320 --> 00:13:52,840
have<font color="#CCCCCC"> any</font><font color="#E5E5E5"> specific type to be passed here</font>

334
00:13:49,960 --> 00:13:54,790
and that means<font color="#CCCCCC"> that you cannot do the</font>

335
00:13:52,840 --> 00:13:58,090
comparation incorrectly because<font color="#E5E5E5"> then</font>

336
00:13:54,790 --> 00:14:00,250
<font color="#E5E5E5">your program</font><font color="#CCCCCC"> won't compile and another</font>

337
00:13:58,090 --> 00:14:01,990
thing<font color="#E5E5E5"> you get here is that</font><font color="#CCCCCC"> for example</font>

338
00:14:00,250 --> 00:14:04,660
the last<font color="#E5E5E5"> line tries to change the mode</font>

339
00:14:01,990 --> 00:14:06,880
of the<font color="#CCCCCC"> RX pin into output mode and that</font>

340
00:14:04,660 --> 00:14:08,890
<font color="#CCCCCC">will break</font><font color="#E5E5E5"> the seal extraction because</font>

341
00:14:06,880 --> 00:14:11,110
the cell extraction expects<font color="#E5E5E5"> that pin to</font>

342
00:14:08,890 --> 00:14:13,810
<font color="#E5E5E5">be in input mode but you</font><font color="#CCCCCC"> cannot do that</font>

343
00:14:11,110 --> 00:14:15,580
<font color="#E5E5E5">in this with this API because when you</font>

344
00:14:13,810 --> 00:14:18,729
<font color="#E5E5E5">construct the serial abstraction you</font>

345
00:14:15,580 --> 00:14:21,340
pass TX and rx by value<font color="#E5E5E5"> so</font><font color="#CCCCCC"> now the</font>

346
00:14:18,730 --> 00:14:23,170
<font color="#E5E5E5">serial extraction owns</font><font color="#CCCCCC"> what pins and you</font>

347
00:14:21,340 --> 00:14:29,530
cannot configure them to be any<font color="#E5E5E5"> other</font>

348
00:14:23,170 --> 00:14:32,319
<font color="#CCCCCC">thing and one other thing a-rod's helps</font>

349
00:14:29,530 --> 00:14:33,970
with is generic drivers so the<font color="#E5E5E5"> my</font>

350
00:14:32,320 --> 00:14:35,350
controller has<font color="#CCCCCC"> two interface this</font>

351
00:14:33,970 --> 00:14:39,100
external<font color="#E5E5E5"> component which</font><font color="#CCCCCC"> is the</font>

352
00:14:35,350 --> 00:14:42,130
accelerometer<font color="#CCCCCC"> and gyroscope</font><font color="#E5E5E5"> so instead</font>

353
00:14:39,100 --> 00:14:43,570
of writing code or a driver that<font color="#E5E5E5"> lets my</font>

354
00:14:42,130 --> 00:14:47,260
my controller interface with<font color="#E5E5E5"> that</font>

355
00:14:43,570 --> 00:14:50,050
component<font color="#CCCCCC"> I chose to write</font><font color="#E5E5E5"> the driver</font>

356
00:14:47,260 --> 00:14:52,960
using generic programming so<font color="#E5E5E5"> that it can</font>

357
00:14:50,050 --> 00:14:55,329
work with different<font color="#E5E5E5"> platforms</font><font color="#CCCCCC"> and the</font>

358
00:14:52,960 --> 00:14:59,190
key<font color="#CCCCCC"> here with generic programming</font><font color="#E5E5E5"> are</font>

359
00:14:55,330 --> 00:15:02,410
traits which you can see and this<font color="#CCCCCC"> spi</font>

360
00:14:59,190 --> 00:15:04,000
type parameter in this bound by these

361
00:15:02,410 --> 00:15:06,520
<font color="#CCCCCC">two traits and these trains are</font>

362
00:15:04,000 --> 00:15:08,980
interfaces and they basically<font color="#E5E5E5"> said you</font>

363
00:15:06,520 --> 00:15:10,930
can construct this driver<font color="#CCCCCC"> if you pass me</font>

364
00:15:08,980 --> 00:15:14,560
<font color="#E5E5E5">this type which implements this SPI</font>

365
00:15:10,930 --> 00:15:16,239
interface<font color="#E5E5E5"> and that means that as long</font><font color="#CCCCCC"> as</font>

366
00:15:14,560 --> 00:15:17,829
<font color="#E5E5E5">I provide</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> type that implements the</font>

367
00:15:16,240 --> 00:15:19,690
interface<font color="#E5E5E5"> then it could be implemented</font>

368
00:15:17,830 --> 00:15:20,220
<font color="#E5E5E5">for a my controller or for a Raspberry</font>

369
00:15:19,690 --> 00:15:22,420
<font color="#E5E5E5">Pi</font>

370
00:15:20,220 --> 00:15:24,970
<font color="#E5E5E5">this driver doesn't care about that</font>

371
00:15:22,420 --> 00:15:27,280
about<font color="#E5E5E5"> those details</font><font color="#CCCCCC"> so this driver can</font>

372
00:15:24,970 --> 00:15:32,110
be<font color="#E5E5E5"> reused across different devices or</font>

373
00:15:27,280 --> 00:15:34,060
platforms and now so the<font color="#E5E5E5"> community is</font>

374
00:15:32,110 --> 00:15:36,670
putting together<font color="#CCCCCC"> this</font><font color="#E5E5E5"> embedded</font><font color="#CCCCCC"> culprit</font>

375
00:15:34,060 --> 00:15:38,709
what we<font color="#E5E5E5"> have is just a bunch of traits</font>

376
00:15:36,670 --> 00:15:40,599
which represent different

377
00:15:38,710 --> 00:15:43,780
<font color="#CCCCCC">abstraction you</font><font color="#E5E5E5"> have and embedded</font>

378
00:15:40,600 --> 00:15:47,470
systems<font color="#CCCCCC"> which are seen in the face spi</font><font color="#E5E5E5"> I</font>

379
00:15:43,780 --> 00:15:50,550
to see bus<font color="#CCCCCC"> and they will</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> me goal here</font>

380
00:15:47,470 --> 00:15:53,950
is code reuse so as a mission before

381
00:15:50,550 --> 00:15:57,040
<font color="#E5E5E5">driver</font><font color="#CCCCCC"> arataura</font><font color="#E5E5E5"> simply write the driver</font>

382
00:15:53,950 --> 00:15:59,320
using these<font color="#E5E5E5"> trades and they will support</font>

383
00:15:57,040 --> 00:16:01,000
any platform that implements these

384
00:15:59,320 --> 00:16:03,670
traits<font color="#E5E5E5"> and they don't have to write any</font>

385
00:16:01,000 --> 00:16:06,700
<font color="#E5E5E5">platform specific code and the benefit</font>

386
00:16:03,670 --> 00:16:08,050
for<font color="#E5E5E5"> the developers who are targeting</font>

387
00:16:06,700 --> 00:16:10,450
some platform<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> once they</font>

388
00:16:08,050 --> 00:16:12,400
implement is embedded<font color="#CCCCCC"> health</font><font color="#E5E5E5"> trades they</font>

389
00:16:10,450 --> 00:16:16,030
get for<font color="#E5E5E5"> free all the generic drivers</font>

390
00:16:12,400 --> 00:16:18,640
that are built upon<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and right now</font>

391
00:16:16,030 --> 00:16:20,589
we<font color="#E5E5E5"> don't have many drivers published on</font>

392
00:16:18,640 --> 00:16:23,020
<font color="#E5E5E5">crates lodi oh but the communities were</font>

393
00:16:20,590 --> 00:16:28,770
linking<font color="#E5E5E5"> together to get allowed and out</font>

394
00:16:23,020 --> 00:16:32,650
this year<font color="#E5E5E5"> and the communication model is</font>

395
00:16:28,770 --> 00:16:35,170
one model<font color="#CCCCCC"> well was really shined</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i'm</font>

396
00:16:32,650 --> 00:16:37,360
using this model for communicating

397
00:16:35,170 --> 00:16:40,180
<font color="#CCCCCC">wirelessly between the robot and my</font>

398
00:16:37,360 --> 00:16:42,220
laptop<font color="#CCCCCC"> or my</font><font color="#E5E5E5"> phone and this model</font>

399
00:16:40,180 --> 00:16:43,689
<font color="#CCCCCC">SEPs</font><font color="#E5E5E5"> serial interface from</font><font color="#CCCCCC"> the my</font>

400
00:16:42,220 --> 00:16:45,370
contour which is a<font color="#E5E5E5"> simplified</font><font color="#CCCCCC"> interface</font>

401
00:16:43,690 --> 00:16:48,760
<font color="#CCCCCC">so then the Macondo</font><font color="#E5E5E5"> doesn't have to</font>

402
00:16:45,370 --> 00:16:50,680
implement<font color="#E5E5E5"> the Bluetooth stack now I use</font>

403
00:16:48,760 --> 00:16:53,350
this<font color="#CCCCCC"> mainly to lock data from the robot</font>

404
00:16:50,680 --> 00:16:56,530
so then I<font color="#CCCCCC"> can analyze that</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> and</font>

405
00:16:53,350 --> 00:16:58,480
this<font color="#CCCCCC"> model is limited to communication</font>

406
00:16:56,530 --> 00:17:01,120
speed of around 10 kilobytes per second

407
00:16:58,480 --> 00:17:03,610
and I want to<font color="#E5E5E5"> lock data really fast so I</font>

408
00:17:01,120 --> 00:17:07,319
have two<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> format that will let me</font>

409
00:17:03,610 --> 00:17:10,450
<font color="#E5E5E5">do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and I chose a binary format</font><font color="#CCCCCC"> just</font>

410
00:17:07,319 --> 00:17:13,540
directly<font color="#CCCCCC"> translates all the types into</font>

411
00:17:10,450 --> 00:17:15,339
binary<font color="#E5E5E5"> format but in my application you</font>

412
00:17:13,540 --> 00:17:17,859
have<font color="#CCCCCC"> to write any binary</font><font color="#E5E5E5"> serialization</font>

413
00:17:15,339 --> 00:17:20,919
our personality<font color="#E5E5E5"> instead I simply grab</font>

414
00:17:17,859 --> 00:17:22,839
this biodegrade from<font color="#E5E5E5"> Chris dot IO and I</font>

415
00:17:20,920 --> 00:17:26,620
use<font color="#CCCCCC"> that to</font><font color="#E5E5E5"> serialize the data into an</font>

416
00:17:22,839 --> 00:17:29,080
array and<font color="#CCCCCC"> now this works and I can</font><font color="#E5E5E5"> send</font>

417
00:17:26,619 --> 00:17:30,459
data in binary format<font color="#E5E5E5"> to my laptop but</font>

418
00:17:29,080 --> 00:17:33,280
there is a problem<font color="#CCCCCC"> because this is a</font>

419
00:17:30,460 --> 00:17:37,180
<font color="#E5E5E5">wireless link data might be</font><font color="#CCCCCC"> drop if the</font>

420
00:17:33,280 --> 00:17:40,000
robot said gets too far<font color="#CCCCCC"> away</font><font color="#E5E5E5"> so to solve</font>

421
00:17:37,180 --> 00:17:43,450
<font color="#CCCCCC">that problem I can add</font><font color="#E5E5E5"> friend limiters</font>

422
00:17:40,000 --> 00:17:45,250
<font color="#E5E5E5">to my data before sending that and for</font>

423
00:17:43,450 --> 00:17:47,490
<font color="#E5E5E5">that I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use this cops frame</font>

424
00:17:45,250 --> 00:17:50,800
crate which is<font color="#E5E5E5"> also increased load</font><font color="#CCCCCC"> i/o</font>

425
00:17:47,490 --> 00:17:52,500
and this algorri

426
00:17:50,800 --> 00:17:54,899
frame delimiter<font color="#E5E5E5"> which is used</font>

427
00:17:52,500 --> 00:17:56,340
zero and<font color="#E5E5E5"> then translates the rest of the</font>

428
00:17:54,900 --> 00:17:59,040
data so it doesn't have any<font color="#E5E5E5"> zero in</font>

429
00:17:56,340 --> 00:18:02,909
there and it what provides a way<font color="#E5E5E5"> to</font>

430
00:17:59,040 --> 00:18:05,970
encode and decode the frame and once I

431
00:18:02,910 --> 00:18:07,890
had<font color="#CCCCCC"> that then my data was properly</font>

432
00:18:05,970 --> 00:18:10,020
<font color="#CCCCCC">trained delimited</font><font color="#E5E5E5"> but then I started</font>

433
00:18:07,890 --> 00:18:13,290
<font color="#E5E5E5">wondering could it be that I lose some</font>

434
00:18:10,020 --> 00:18:16,020
<font color="#E5E5E5">weight</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and I still get a valid</font>

435
00:18:13,290 --> 00:18:20,070
frame on the laptop and I will still get

436
00:18:16,020 --> 00:18:22,590
a young<font color="#CCCCCC"> data out of</font><font color="#E5E5E5"> that so I</font><font color="#CCCCCC"> added a</font>

437
00:18:20,070 --> 00:18:24,750
checksum to<font color="#E5E5E5"> my data to</font><font color="#CCCCCC"> verify that the</font>

438
00:18:22,590 --> 00:18:27,149
frame<font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> what I wanted to send</font>

439
00:18:24,750 --> 00:18:29,130
and again<font color="#CCCCCC"> I didn't implement that in the</font>

440
00:18:27,150 --> 00:18:31,200
application<font color="#CCCCCC"> I</font><font color="#E5E5E5"> simply grab a checksum</font>

441
00:18:29,130 --> 00:18:34,830
<font color="#CCCCCC">crate</font><font color="#E5E5E5"> and press dot IO in this case the</font>

442
00:18:31,200 --> 00:18:38,430
CRC<font color="#E5E5E5"> 16 and here you can see the full</font>

443
00:18:34,830 --> 00:18:40,530
code i sterilize my data and compute the

444
00:18:38,430 --> 00:18:42,990
<font color="#E5E5E5">checksum append that and then turn that</font>

445
00:18:40,530 --> 00:18:48,750
<font color="#CCCCCC">into a cop's print and put</font><font color="#E5E5E5"> that on the</font>

446
00:18:42,990 --> 00:18:50,640
wire and one of the last<font color="#E5E5E5"> parts is</font>

447
00:18:48,750 --> 00:18:54,450
concurrency<font color="#E5E5E5"> so I have to do multitasking</font>

448
00:18:50,640 --> 00:18:56,280
<font color="#CCCCCC">on the my controller</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't have to</font>

449
00:18:54,450 --> 00:18:58,800
do this<font color="#CCCCCC"> two tasks and for that I use</font>

450
00:18:56,280 --> 00:19:04,530
<font color="#E5E5E5">this real time for the</font><font color="#CCCCCC"> masses</font><font color="#E5E5E5"> or RTFM</font>

451
00:18:58,800 --> 00:19:06,419
framework and it lets<font color="#E5E5E5"> me do tasks on top</font>

452
00:19:04,530 --> 00:19:08,700
of inner handlers<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> basically a</font>

453
00:19:06,420 --> 00:19:11,550
harbor base scheduler<font color="#E5E5E5"> so it is really</font>

454
00:19:08,700 --> 00:19:14,400
fast and efficient but since this<font color="#E5E5E5"> was I</font>

455
00:19:11,550 --> 00:19:17,430
have<font color="#E5E5E5"> to worry about data races so I have</font>

456
00:19:14,400 --> 00:19:19,710
<font color="#E5E5E5">this</font><font color="#CCCCCC"> two tasks one was periodic where I</font>

457
00:19:17,430 --> 00:19:21,540
read<font color="#E5E5E5"> the sensors</font><font color="#CCCCCC"> oblate my common filter</font>

458
00:19:19,710 --> 00:19:23,820
<font color="#E5E5E5">update the PID component and lock the</font>

459
00:19:21,540 --> 00:19:27,149
data<font color="#E5E5E5"> and then I have this other kind of</font>

460
00:19:23,820 --> 00:19:29,280
a<font color="#E5E5E5"> synchronous task where my laptop send</font>

461
00:19:27,150 --> 00:19:31,170
some<font color="#E5E5E5"> data to the</font><font color="#CCCCCC"> my Condren</font><font color="#E5E5E5"> and I use</font>

462
00:19:29,280 --> 00:19:37,500
<font color="#CCCCCC">that to change the PID game because I</font>

463
00:19:31,170 --> 00:19:40,470
was manually tuning the gains and<font color="#CCCCCC"> we use</font>

464
00:19:37,500 --> 00:19:42,000
<font color="#CCCCCC">inner</font><font color="#E5E5E5"> handlers</font><font color="#CCCCCC"> they and you need to</font>

465
00:19:40,470 --> 00:19:45,840
share data between the end then you<font color="#E5E5E5"> have</font>

466
00:19:42,000 --> 00:19:48,210
to use static variables and static

467
00:19:45,840 --> 00:19:51,090
variables are<font color="#E5E5E5"> troublesome one because</font>

468
00:19:48,210 --> 00:19:53,460
they you might run into that arises<font color="#E5E5E5"> but</font>

469
00:19:51,090 --> 00:19:56,070
I think a major<font color="#E5E5E5"> problem from my point of</font>

470
00:19:53,460 --> 00:19:57,540
view is that they make<font color="#CCCCCC"> the code and not</font>

471
00:19:56,070 --> 00:19:59,280
readable<font color="#CCCCCC"> because then anything</font><font color="#E5E5E5"> can</font>

472
00:19:57,540 --> 00:20:02,520
modify the<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> so you don't know</font>

473
00:19:59,280 --> 00:20:05,460
who has access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> variable but with</font>

474
00:20:02,520 --> 00:20:06,030
<font color="#E5E5E5">this framework we have this declarative</font>

475
00:20:05,460 --> 00:20:07,590
up mark

476
00:20:06,030 --> 00:20:09,360
where you define<font color="#E5E5E5"> all</font><font color="#CCCCCC"> your resources</font>

477
00:20:07,590 --> 00:20:11,370
<font color="#E5E5E5">which are nothing else</font><font color="#CCCCCC"> that static</font>

478
00:20:09,360 --> 00:20:13,679
variables<font color="#E5E5E5"> and then you declare</font><font color="#CCCCCC"> your</font>

479
00:20:11,370 --> 00:20:16,919
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> and you assign the resources to</font>

480
00:20:13,680 --> 00:20:18,660
the task<font color="#E5E5E5"> so then when you're writing the</font>

481
00:20:16,920 --> 00:20:21,390
<font color="#CCCCCC">task body which is at the</font><font color="#E5E5E5"> bottom then</font>

482
00:20:18,660 --> 00:20:23,850
<font color="#CCCCCC">just ask only</font><font color="#E5E5E5"> has access</font><font color="#CCCCCC"> to the</font>

483
00:20:21,390 --> 00:20:27,870
<font color="#E5E5E5">resources which was declared in the app</font>

484
00:20:23,850 --> 00:20:29,429
macro and if you try to access any<font color="#E5E5E5"> other</font>

485
00:20:27,870 --> 00:20:31,139
resource that<font color="#E5E5E5"> wasn't declared up for</font>

486
00:20:29,430 --> 00:20:34,470
that task you<font color="#CCCCCC"> will get a compiler error</font>

487
00:20:31,140 --> 00:20:38,190
<font color="#E5E5E5">and the framework also takes care of if</font>

488
00:20:34,470 --> 00:20:39,780
you have sharing<font color="#CCCCCC"> between a resources</font>

489
00:20:38,190 --> 00:20:41,610
<font color="#CCCCCC">share between two tasks and the frame</font>

490
00:20:39,780 --> 00:20:44,580
<font color="#E5E5E5">will take care</font><font color="#CCCCCC"> of ensuring that the</font>

491
00:20:41,610 --> 00:20:46,679
access is free of that<font color="#CCCCCC"> raises</font><font color="#E5E5E5"> and for</font>

492
00:20:44,580 --> 00:20:49,830
example<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are staffed at the bottom</font>

493
00:20:46,680 --> 00:20:53,250
to<font color="#E5E5E5"> access the PID resources</font><font color="#CCCCCC"> sherry</font><font color="#E5E5E5"> has</font>

494
00:20:49,830 --> 00:20:59,820
to use a<font color="#CCCCCC"> lock to a ship</font><font color="#E5E5E5"> data race</font>

495
00:20:53,250 --> 00:21:02,580
freedom<font color="#E5E5E5"> okay some other</font><font color="#CCCCCC"> random stuff the</font>

496
00:20:59,820 --> 00:21:06,510
CPU uses of the migrant<font color="#CCCCCC"> dollar was</font>

497
00:21:02,580 --> 00:21:10,350
around<font color="#CCCCCC"> 21% the</font><font color="#E5E5E5"> CPU was shown in act 64</font>

498
00:21:06,510 --> 00:21:12,480
makers and he had no<font color="#E5E5E5"> FPU and the control</font>

499
00:21:10,350 --> 00:21:16,679
loop was running around<font color="#E5E5E5"> 500 times</font><font color="#CCCCCC"> per</font>

500
00:21:12,480 --> 00:21:19,530
second binary<font color="#E5E5E5"> size my application was</font>

501
00:21:16,680 --> 00:21:21,480
around<font color="#E5E5E5"> what four hundred lines of code</font>

502
00:21:19,530 --> 00:21:23,310
<font color="#CCCCCC">excluding</font><font color="#E5E5E5"> the cold from the dependencies</font>

503
00:21:21,480 --> 00:21:27,150
everything that and then in the<font color="#CCCCCC"> binary</font>

504
00:21:23,310 --> 00:21:28,740
came from<font color="#CCCCCC"> our</font><font color="#E5E5E5"> source code and the binary</font>

505
00:21:27,150 --> 00:21:31,560
size was around eight point five

506
00:21:28,740 --> 00:21:33,900
kilobytes<font color="#E5E5E5"> in flash</font><font color="#CCCCCC"> and actually two</font>

507
00:21:31,560 --> 00:21:35,760
kilobytes<font color="#E5E5E5"> of that are due to software</font>

508
00:21:33,900 --> 00:21:41,340
emulation of<font color="#E5E5E5"> float arithmetic because I</font>

509
00:21:35,760 --> 00:21:43,470
don't have an FPU<font color="#CCCCCC"> Ram was 140 bytes</font><font color="#E5E5E5"> and</font>

510
00:21:41,340 --> 00:21:45,929
I didn't use any dynamic memory

511
00:21:43,470 --> 00:21:48,450
allocation<font color="#E5E5E5"> the button you can</font><font color="#CCCCCC"> see the</font>

512
00:21:45,930 --> 00:21:50,250
<font color="#CCCCCC">biggest symbols</font><font color="#E5E5E5"> and a mountain you will</font>

513
00:21:48,450 --> 00:21:54,720
<font color="#E5E5E5">find this software emulation of</font><font color="#CCCCCC"> I</font>

514
00:21:50,250 --> 00:21:56,820
<font color="#CCCCCC">triplet floats finally this is the</font>

515
00:21:54,720 --> 00:22:00,270
<font color="#E5E5E5">dependency graph of the project it has</font>

516
00:21:56,820 --> 00:22:02,250
<font color="#E5E5E5">around 20 dependencies</font><font color="#CCCCCC"> excluding build</font>

517
00:22:00,270 --> 00:22:05,100
dependencies<font color="#E5E5E5"> so there's a lot of code</font>

518
00:22:02,250 --> 00:22:07,650
<font color="#CCCCCC">reviews in there one</font><font color="#E5E5E5"> thing I found scary</font>

519
00:22:05,100 --> 00:22:09,389
is that<font color="#E5E5E5"> most of those crates have been</font>

520
00:22:07,650 --> 00:22:11,550
written<font color="#CCCCCC"> by me except</font><font color="#E5E5E5"> for like three or</font>

521
00:22:09,390 --> 00:22:14,910
<font color="#CCCCCC">four</font><font color="#E5E5E5"> but if you were writing this</font><font color="#CCCCCC"> then</font>

522
00:22:11,550 --> 00:22:15,980
you have<font color="#E5E5E5"> to do all the</font><font color="#CCCCCC"> work right in the</font>

523
00:22:14,910 --> 00:22:19,440
<font color="#E5E5E5">dependences</font>

524
00:22:15,980 --> 00:22:20,010
<font color="#CCCCCC">okay in</font><font color="#E5E5E5"> conclusion</font><font color="#CCCCCC"> ross is small</font><font color="#E5E5E5"> enough</font>

525
00:22:19,440 --> 00:22:22,230
so he<font color="#CCCCCC"> can</font>

526
00:22:20,010 --> 00:22:23,670
fit in a<font color="#CCCCCC"> Mike Rinder</font><font color="#E5E5E5"> is also perform</font>

527
00:22:22,230 --> 00:22:26,400
enough that you can implement<font color="#E5E5E5"> is</font>

528
00:22:23,670 --> 00:22:28,590
<font color="#CCCCCC">time-sensitive control system on a</font>

529
00:22:26,400 --> 00:22:30,080
<font color="#CCCCCC">resource-constrained device it's also</font>

530
00:22:28,590 --> 00:22:33,179
<font color="#E5E5E5">memory safe you can do multitasking</font>

531
00:22:30,080 --> 00:22:35,699
<font color="#CCCCCC">without having to care about</font><font color="#E5E5E5"> data races</font>

532
00:22:33,180 --> 00:22:37,590
or<font color="#CCCCCC"> wherever</font><font color="#E5E5E5"> that it also lets you write</font>

533
00:22:35,700 --> 00:22:38,910
more correct code<font color="#CCCCCC"> as we saw in the</font><font color="#E5E5E5"> pin</font>

534
00:22:37,590 --> 00:22:41,459
configuration you cannot get it<font color="#CCCCCC"> wrong</font>

535
00:22:38,910 --> 00:22:43,350
with the API<font color="#CCCCCC"> you can also easily use</font>

536
00:22:41,460 --> 00:22:45,390
<font color="#E5E5E5">their particle which we use a lot</font><font color="#CCCCCC"> in the</font>

537
00:22:43,350 --> 00:22:47,459
communication<font color="#CCCCCC"> module and it's also good</font>

538
00:22:45,390 --> 00:22:49,440
for code<font color="#E5E5E5"> reuse we'll have this genetic</font>

539
00:22:47,460 --> 00:22:53,250
driver which<font color="#E5E5E5"> skill can be used in many</font>

540
00:22:49,440 --> 00:23:14,580
<font color="#E5E5E5">different platforms that's all I have</font>

541
00:22:53,250 --> 00:23:16,260
thank<font color="#E5E5E5"> you yes</font><font color="#CCCCCC"> so what is already a</font>

542
00:23:14,580 --> 00:23:18,330
costume<font color="#CCCCCC"> oh yes</font>

543
00:23:16,260 --> 00:23:20,640
the question<font color="#E5E5E5"> was how was it to</font>

544
00:23:18,330 --> 00:23:22,110
<font color="#CCCCCC">cross-compile to that target so I think</font>

545
00:23:20,640 --> 00:23:25,490
is that the<font color="#CCCCCC"> Ross compiler is already</font><font color="#E5E5E5"> a</font>

546
00:23:22,110 --> 00:23:27,629
cross compiler by default so I didn't

547
00:23:25,490 --> 00:23:29,700
need to<font color="#E5E5E5"> do anything special</font><font color="#CCCCCC"> I could</font>

548
00:23:27,630 --> 00:23:32,160
<font color="#CCCCCC">really generate machine code for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> amp</font>

549
00:23:29,700 --> 00:23:34,080
context<font color="#E5E5E5"> my controller the only</font><font color="#CCCCCC"> external</font>

550
00:23:32,160 --> 00:23:36,030
<font color="#E5E5E5">to told that I needed was</font><font color="#CCCCCC"> a linker</font>

551
00:23:34,080 --> 00:23:39,449
<font color="#E5E5E5">because Rossi doesn't include a linker</font>

552
00:23:36,030 --> 00:23:41,340
inside<font color="#CCCCCC"> so I use LD</font><font color="#E5E5E5"> unknown</font><font color="#CCCCCC"> ABI LD and</font>

553
00:23:39,450 --> 00:23:52,170
then<font color="#E5E5E5"> there was the only</font><font color="#CCCCCC"> external</font>

554
00:23:41,340 --> 00:23:55,080
dependency I had the question is what's

555
00:23:52,170 --> 00:23:56,780
my<font color="#E5E5E5"> background for doing this and</font>

556
00:23:55,080 --> 00:24:00,330
<font color="#CCCCCC">actually I have a Bachelor in</font>

557
00:23:56,780 --> 00:24:02,160
mechatronics engineering and yeah

558
00:24:00,330 --> 00:24:03,990
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> I took</font><font color="#E5E5E5"> like several semester</font>

559
00:24:02,160 --> 00:24:11,040
<font color="#E5E5E5">for control</font><font color="#CCCCCC"> theory</font><font color="#E5E5E5"> so this is the kind</font>

560
00:24:03,990 --> 00:24:13,850
of stuff we do there yes<font color="#E5E5E5"> the back</font>

561
00:24:11,040 --> 00:24:13,850
yes you

562
00:24:34,850 --> 00:24:40,709
<font color="#E5E5E5">okay the question</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it was using a</font>

563
00:24:38,880 --> 00:24:42,990
cortex in my<font color="#CCCCCC"> controi how hard will be to</font>

564
00:24:40,710 --> 00:24:48,630
support<font color="#CCCCCC"> all the architects are</font><font color="#E5E5E5"> also all</font>

565
00:24:42,990 --> 00:24:52,140
the other my controllers<font color="#E5E5E5"> right okay</font><font color="#CCCCCC"> okay</font>

566
00:24:48,630 --> 00:24:54,660
only about<font color="#E5E5E5"> the cortex my contrary and so</font>

567
00:24:52,140 --> 00:24:58,200
to get a more device support we have a

568
00:24:54,660 --> 00:25:00,780
tool<font color="#E5E5E5"> called SVD two rods which so</font>

569
00:24:58,200 --> 00:25:02,910
<font color="#E5E5E5">benders give us this</font><font color="#CCCCCC"> description</font><font color="#E5E5E5"> of all</font>

570
00:25:00,780 --> 00:25:05,430
the register<font color="#E5E5E5"> in a my controller and this</font>

571
00:25:02,910 --> 00:25:08,520
SVD format which<font color="#CCCCCC"> is a finalist an</font><font color="#E5E5E5"> XML</font>

572
00:25:05,430 --> 00:25:10,470
file and we can<font color="#E5E5E5"> translate that into</font><font color="#CCCCCC"> Russ</font>

573
00:25:08,520 --> 00:25:12,870
<font color="#CCCCCC">code that levels use all the registers</font>

574
00:25:10,470 --> 00:25:16,560
on the my<font color="#CCCCCC"> contrary so</font><font color="#E5E5E5"> that gets like</font>

575
00:25:12,870 --> 00:25:18,479
<font color="#CCCCCC">ninety percent</font><font color="#E5E5E5"> of the work done and if</font>

576
00:25:16,560 --> 00:25:20,190
you have the SVD file for<font color="#CCCCCC"> a micron</font>

577
00:25:18,480 --> 00:25:23,550
product and basically you can<font color="#E5E5E5"> already do</font>

578
00:25:20,190 --> 00:25:25,230
io and use the registers<font color="#E5E5E5"> and on top of</font>

579
00:25:23,550 --> 00:25:27,480
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you will want</font><font color="#CCCCCC"> to build something</font><font color="#E5E5E5"> a</font>

580
00:25:25,230 --> 00:25:28,980
<font color="#E5E5E5">slightly higher level because</font>

581
00:25:27,480 --> 00:25:31,200
manipulating the register can be

582
00:25:28,980 --> 00:25:33,390
error-prone<font color="#CCCCCC"> and for</font><font color="#E5E5E5"> that we have this</font>

583
00:25:31,200 --> 00:25:35,430
embedded<font color="#CCCCCC"> hull</font><font color="#E5E5E5"> traits and if you</font>

584
00:25:33,390 --> 00:25:38,490
implement<font color="#E5E5E5"> a hull ty uses that interface</font>

585
00:25:35,430 --> 00:25:40,590
then it's like<font color="#CCCCCC"> ten percent of the job</font>

586
00:25:38,490 --> 00:25:43,590
<font color="#E5E5E5">left and once you do that then you get</font>

587
00:25:40,590 --> 00:25:46,590
<font color="#CCCCCC">access to these generic drivers right</font>

588
00:25:43,590 --> 00:25:47,970
now people are<font color="#CCCCCC"> mainly using stm32 my</font>

589
00:25:46,590 --> 00:25:53,010
controllers<font color="#CCCCCC"> I have seen some people</font>

590
00:25:47,970 --> 00:25:57,570
<font color="#E5E5E5">using like an XP LPC and a bit of</font><font color="#CCCCCC"> Sam</font>

591
00:25:53,010 --> 00:25:59,730
from a PR<font color="#E5E5E5"> and but the boards that have</font>

592
00:25:57,570 --> 00:26:01,500
<font color="#CCCCCC">most</font><font color="#E5E5E5"> support are they blue pill which is</font>

593
00:25:59,730 --> 00:26:09,410
the one<font color="#CCCCCC"> agent here</font><font color="#E5E5E5"> and a few of the</font>

594
00:26:01,500 --> 00:26:09,410
<font color="#E5E5E5">discoveries</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> sir another question</font>

595
00:26:25,240 --> 00:26:33,680
[Applause]

