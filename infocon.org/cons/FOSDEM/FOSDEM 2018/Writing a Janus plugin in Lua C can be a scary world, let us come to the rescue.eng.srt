1
00:00:05,529 --> 00:00:10,040
<font color="#E5E5E5">okay thanks for</font><font color="#CCCCCC"> the introduction</font><font color="#E5E5E5"> so I'm</font>

2
00:00:08,148 --> 00:00:11,719
<font color="#CCCCCC">Emma Lorenzo I'm from Napoli in the</font>

3
00:00:10,040 --> 00:00:13,099
south<font color="#E5E5E5"> of Italy which means that pretty</font>

4
00:00:11,719 --> 00:00:15,520
much<font color="#CCCCCC"> the only thing</font><font color="#E5E5E5"> that really need to</font>

5
00:00:13,099 --> 00:00:19,939
know<font color="#E5E5E5"> about me</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> this is a big No</font>

6
00:00:15,520 --> 00:00:22,880
<font color="#CCCCCC">okay now that</font><font color="#E5E5E5"> now that we have settled</font>

7
00:00:19,939 --> 00:00:24,710
<font color="#CCCCCC">this for good once and for all</font><font color="#E5E5E5"> let's</font>

8
00:00:22,880 --> 00:00:26,390
let's start<font color="#E5E5E5"> with the presentation so I</font>

9
00:00:24,710 --> 00:00:28,730
don't know how many<font color="#E5E5E5"> of you actually</font><font color="#CCCCCC"> know</font>

10
00:00:26,390 --> 00:00:30,619
about<font color="#CCCCCC"> Janis already this</font><font color="#E5E5E5"> is going to be</font>

11
00:00:28,730 --> 00:00:33,050
<font color="#E5E5E5">just a</font><font color="#CCCCCC"> very quick</font><font color="#E5E5E5"> recap about</font><font color="#CCCCCC"> what it</font><font color="#E5E5E5"> is</font>

12
00:00:30,619 --> 00:00:34,010
it's basically<font color="#E5E5E5"> it was conceived as a</font>

13
00:00:33,050 --> 00:00:37,010
<font color="#CCCCCC">general-purpose</font>

14
00:00:34,010 --> 00:00:38,989
web RTC server and I'll try<font color="#E5E5E5"> to explain</font>

15
00:00:37,010 --> 00:00:40,220
by what we mean by<font color="#CCCCCC"> general-purpose</font><font color="#E5E5E5"> in</font>

16
00:00:38,989 --> 00:00:41,779
this sense it's of<font color="#E5E5E5"> course all open</font>

17
00:00:40,220 --> 00:00:45,199
<font color="#E5E5E5">sourced or demos and documentation</font>

18
00:00:41,780 --> 00:00:47,120
<font color="#CCCCCC">available there</font><font color="#E5E5E5"> and the idea was that we</font>

19
00:00:45,199 --> 00:00:49,190
would write a<font color="#CCCCCC"> core that</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font>

20
00:00:47,120 --> 00:00:51,619
<font color="#E5E5E5">responsible for the</font><font color="#CCCCCC"> WebRTC</font><font color="#E5E5E5"> stack so</font>

21
00:00:49,190 --> 00:00:54,349
<font color="#E5E5E5">Stephen just explained what how WebRTC</font>

22
00:00:51,619 --> 00:00:57,589
works what it is basically<font color="#E5E5E5"> this web RTC</font>

23
00:00:54,350 --> 00:00:58,699
stack allows<font color="#CCCCCC"> Janus to act as a browser</font>

24
00:00:57,589 --> 00:01:00,229
in the communication in that

25
00:00:58,699 --> 00:01:02,599
<font color="#E5E5E5">peer-to-peer communication that you saw</font>

26
00:01:00,229 --> 00:01:04,400
before<font color="#E5E5E5"> so these web RTC stack was</font>

27
00:01:02,600 --> 00:01:06,890
responsible<font color="#E5E5E5"> for all eyes detail I saw</font>

28
00:01:04,400 --> 00:01:09,050
the protocols that that relates<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> RTC</font>

29
00:01:06,890 --> 00:01:10,460
and then we have<font color="#E5E5E5"> different</font><font color="#CCCCCC"> models to</font>

30
00:01:09,050 --> 00:01:12,590
take care<font color="#E5E5E5"> of the rest</font><font color="#CCCCCC"> so we do have a</font>

31
00:01:10,460 --> 00:01:14,720
Janus API so a way<font color="#E5E5E5"> to communicate with</font>

32
00:01:12,590 --> 00:01:18,230
Janus to control what it needs<font color="#E5E5E5"> to do and</font>

33
00:01:14,720 --> 00:01:19,820
<font color="#CCCCCC">how and this</font><font color="#E5E5E5"> is available</font><font color="#CCCCCC"> different</font>

34
00:01:18,230 --> 00:01:21,620
models can implement different<font color="#E5E5E5"> protocol</font>

35
00:01:19,820 --> 00:01:24,199
<font color="#CCCCCC">transport</font><font color="#E5E5E5"> for this but more importantly</font>

36
00:01:21,620 --> 00:01:26,150
we have<font color="#E5E5E5"> all the media logic implemented</font>

37
00:01:24,200 --> 00:01:28,640
as different plugins as<font color="#CCCCCC"> well which</font><font color="#E5E5E5"> means</font>

38
00:01:26,150 --> 00:01:30,260
that this way<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just write a new</font>

39
00:01:28,640 --> 00:01:31,820
<font color="#E5E5E5">plugin to have Janus behave in a</font>

40
00:01:30,260 --> 00:01:33,290
different<font color="#CCCCCC"> way so handle</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> p.r</font>

41
00:01:31,820 --> 00:01:36,259
connections that<font color="#E5E5E5"> you created with the</font>

42
00:01:33,290 --> 00:01:38,990
core in a different way<font color="#CCCCCC"> so by default</font><font color="#E5E5E5"> by</font>

43
00:01:36,260 --> 00:01:40,760
the<font color="#E5E5E5"> stock plugins allow you to have an</font>

44
00:01:38,990 --> 00:01:42,740
SF you plug in<font color="#E5E5E5"> something that allows you</font>

45
00:01:40,760 --> 00:01:45,230
to<font color="#E5E5E5"> do some basic video conferencing</font>

46
00:01:42,740 --> 00:01:47,330
let's say an audio mixer ways to talk to

47
00:01:45,230 --> 00:01:50,270
the SIP<font color="#E5E5E5"> word way to talk to our TSP</font>

48
00:01:47,330 --> 00:01:52,670
cameras or whatever so all the logic

49
00:01:50,270 --> 00:01:54,259
belongs there so if there is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> new need</font>

50
00:01:52,670 --> 00:01:56,540
that you have<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> not covered by the</font>

51
00:01:54,260 --> 00:01:58,970
existing<font color="#E5E5E5"> plugins you just need to write</font>

52
00:01:56,540 --> 00:02:01,130
a new<font color="#E5E5E5"> plugin to handle media</font><font color="#CCCCCC"> Emre</font>

53
00:01:58,970 --> 00:02:03,679
added to journals and it will it will

54
00:02:01,130 --> 00:02:05,630
theoretically<font color="#E5E5E5"> work the only caveat here</font>

55
00:02:03,680 --> 00:02:07,310
<font color="#CCCCCC">is that Janus</font><font color="#E5E5E5"> is written in C which</font>

56
00:02:05,630 --> 00:02:09,228
<font color="#CCCCCC">means that you if you</font><font color="#E5E5E5"> want to write a</font>

57
00:02:07,310 --> 00:02:11,720
new<font color="#CCCCCC"> plug-in you typically have to write</font>

58
00:02:09,229 --> 00:02:13,160
it<font color="#E5E5E5"> in C as well which may or may not be</font>

59
00:02:11,720 --> 00:02:16,340
an issue for<font color="#E5E5E5"> you I mean</font><font color="#CCCCCC"> for some it</font>

60
00:02:13,160 --> 00:02:17,880
might be because<font color="#CCCCCC"> you you need to know</font>

61
00:02:16,340 --> 00:02:20,310
how<font color="#E5E5E5"> to code</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> C and make sure</font>

62
00:02:17,880 --> 00:02:25,769
not screwing up and causing<font color="#CCCCCC"> issues from</font>

63
00:02:20,310 --> 00:02:28,470
any sort<font color="#E5E5E5"> and just to give you an</font><font color="#CCCCCC"> idea of</font>

64
00:02:25,770 --> 00:02:30,360
<font color="#E5E5E5">how the plug-in API looks and this this</font>

65
00:02:28,470 --> 00:02:32,430
<font color="#E5E5E5">is important just</font><font color="#CCCCCC"> because I'll get back</font>

66
00:02:30,360 --> 00:02:34,170
<font color="#E5E5E5">to</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it in a few slides when well</font>

67
00:02:32,430 --> 00:02:37,290
address the<font color="#E5E5E5"> the purpose of this talk</font>

68
00:02:34,170 --> 00:02:39,239
here is that typically a plug-in<font color="#E5E5E5"> has to</font>

69
00:02:37,290 --> 00:02:41,010
implement<font color="#E5E5E5"> a set of callbacks in order to</font>

70
00:02:39,240 --> 00:02:42,990
talk to the core because of course if

71
00:02:41,010 --> 00:02:45,540
you want to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> plugged as a model to</font><font color="#CCCCCC"> to</font>

72
00:02:42,990 --> 00:02:47,670
<font color="#CCCCCC">jános as a core application you</font><font color="#E5E5E5"> have to</font>

73
00:02:45,540 --> 00:02:49,769
respect some some<font color="#CCCCCC"> API is</font><font color="#E5E5E5"> in order to</font>

74
00:02:47,670 --> 00:02:53,190
communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it and</font><font color="#E5E5E5"> typically it's</font>

75
00:02:49,770 --> 00:02:55,380
just let's say some some ways to to

76
00:02:53,190 --> 00:02:57,570
<font color="#CCCCCC">register at the decoder let's say this</font>

77
00:02:55,380 --> 00:02:59,490
is<font color="#CCCCCC"> my package name this is</font><font color="#E5E5E5"> my version</font><font color="#CCCCCC"> a</font>

78
00:02:57,570 --> 00:03:01,590
couple of meters to initialize the

79
00:02:59,490 --> 00:03:03,120
<font color="#CCCCCC">plug-in and to destroy it</font><font color="#E5E5E5"> and typically</font>

80
00:03:01,590 --> 00:03:05,160
<font color="#E5E5E5">even it is called whenever your</font><font color="#CCCCCC"> plug-in</font>

81
00:03:03,120 --> 00:03:06,720
<font color="#E5E5E5">is loaded which happens at startup so</font>

82
00:03:05,160 --> 00:03:08,609
<font color="#CCCCCC">channel starts starts</font><font color="#E5E5E5"> on load the</font>

83
00:03:06,720 --> 00:03:10,830
plugins<font color="#CCCCCC"> you will get them notified</font>

84
00:03:08,610 --> 00:03:12,510
whenever your<font color="#CCCCCC"> plug-in starts and destroy</font>

85
00:03:10,830 --> 00:03:13,830
instead is called when when<font color="#CCCCCC"> Janus is</font>

86
00:03:12,510 --> 00:03:15,810
shutting down<font color="#E5E5E5"> so that you can keep track</font>

87
00:03:13,830 --> 00:03:18,090
<font color="#CCCCCC">of the life cycle of Janus itself that</font>

88
00:03:15,810 --> 00:03:20,880
way some versioning information as we

89
00:03:18,090 --> 00:03:23,100
said but<font color="#E5E5E5"> most importantly some ways to</font>

90
00:03:20,880 --> 00:03:25,049
handle users so to interact with

91
00:03:23,100 --> 00:03:26,850
sessions<font color="#E5E5E5"> because typically the</font><font color="#CCCCCC"> journals</font>

92
00:03:25,050 --> 00:03:28,740
<font color="#CCCCCC">core will notify you</font><font color="#E5E5E5"> anytime that a user</font>

93
00:03:26,850 --> 00:03:31,440
attaches to your<font color="#E5E5E5"> plug-in we call</font><font color="#CCCCCC"> this</font>

94
00:03:28,740 --> 00:03:32,040
<font color="#E5E5E5">attached as a metered so</font><font color="#CCCCCC"> anytime that</font>

95
00:03:31,440 --> 00:03:33,930
<font color="#CCCCCC">the</font><font color="#E5E5E5"> user</font>

96
00:03:32,040 --> 00:03:35,850
joins your<font color="#E5E5E5"> plug-in you are notified</font>

97
00:03:33,930 --> 00:03:38,730
<font color="#E5E5E5">about this so that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can keep start</font>

98
00:03:35,850 --> 00:03:40,320
keeping<font color="#CCCCCC"> track of</font><font color="#E5E5E5"> this user you can start</font>

99
00:03:38,730 --> 00:03:42,359
<font color="#E5E5E5">receiving messages from the user you are</font>

100
00:03:40,320 --> 00:03:44,280
<font color="#CCCCCC">notified anytime a peer connections for</font>

101
00:03:42,360 --> 00:03:46,770
this user on this specific connection

102
00:03:44,280 --> 00:03:48,270
came up or came down and of course most

103
00:03:46,770 --> 00:03:50,070
important of<font color="#E5E5E5"> them all you are</font><font color="#CCCCCC"> notified</font>

104
00:03:48,270 --> 00:03:52,020
anytime you have been coming<font color="#E5E5E5"> data from</font>

105
00:03:50,070 --> 00:03:53,970
the<font color="#E5E5E5"> two sir so if the browser is sending</font>

106
00:03:52,020 --> 00:03:56,190
RTP packets via<font color="#CCCCCC"> the web</font>

107
00:03:53,970 --> 00:03:57,660
rtcpeerconnection<font color="#E5E5E5"> these RTP packets get</font>

108
00:03:56,190 --> 00:03:59,520
to you in the<font color="#CCCCCC"> plugin so that you can</font>

109
00:03:57,660 --> 00:04:01,709
<font color="#E5E5E5">then decide what you want to do with it</font>

110
00:03:59,520 --> 00:04:03,120
<font color="#E5E5E5">which we</font><font color="#CCCCCC"> maybe I'm going to</font><font color="#E5E5E5"> send this to</font>

111
00:04:01,709 --> 00:04:04,800
<font color="#CCCCCC">all of the other participants in a</font>

112
00:04:03,120 --> 00:04:06,300
<font color="#E5E5E5">conference or I'm going to decode it add</font>

113
00:04:04,800 --> 00:04:08,760
it<font color="#CCCCCC"> to a mix I'm</font><font color="#E5E5E5"> going to send it to</font><font color="#CCCCCC"> a</font>

114
00:04:06,300 --> 00:04:10,800
CPUs or whatever same thing<font color="#E5E5E5"> for artistic</font>

115
00:04:08,760 --> 00:04:12,450
<font color="#E5E5E5">we are TCP statistics and data channel</font>

116
00:04:10,800 --> 00:04:15,420
messages as well because you may want<font color="#CCCCCC"> to</font>

117
00:04:12,450 --> 00:04:18,238
end<font color="#E5E5E5"> just data channel so that asanas in</font>

118
00:04:15,420 --> 00:04:19,890
conjunction with media<font color="#E5E5E5"> and in general</font>

119
00:04:18,238 --> 00:04:21,750
this allows you<font color="#E5E5E5"> to track all the life</font>

120
00:04:19,890 --> 00:04:25,530
cycle of a specific peer connection for

121
00:04:21,750 --> 00:04:27,780
a user which<font color="#CCCCCC"> is quite useful</font><font color="#E5E5E5"> and finally</font>

122
00:04:25,530 --> 00:04:30,239
of course<font color="#E5E5E5"> the core itself also exposes</font>

123
00:04:27,780 --> 00:04:31,248
an<font color="#E5E5E5"> API by which begins can then start</font>

124
00:04:30,240 --> 00:04:33,859
sending<font color="#CCCCCC"> in</font>

125
00:04:31,249 --> 00:04:36,349
<font color="#E5E5E5">for back to the user stuff like ways to</font>

126
00:04:33,859 --> 00:04:38,419
send messages<font color="#CCCCCC"> to a user via the Genesis</font>

127
00:04:36,349 --> 00:04:40,998
API and this is important<font color="#E5E5E5"> because each</font>

128
00:04:38,419 --> 00:04:42,619
plug-in<font color="#E5E5E5"> has its own API</font><font color="#CCCCCC"> conceived you</font>

129
00:04:40,999 --> 00:04:44,629
<font color="#E5E5E5">can consider each plug-in in</font><font color="#CCCCCC"> jános as a</font>

130
00:04:42,619 --> 00:04:45,439
separate application living within

131
00:04:44,629 --> 00:04:47,449
Genesis itself

132
00:04:45,439 --> 00:04:49,729
meaning<font color="#E5E5E5"> that each plug-in can actually</font>

133
00:04:47,449 --> 00:04:52,249
implement their own messaging that then

134
00:04:49,729 --> 00:04:54,019
gets transported over the Janus API<font color="#E5E5E5"> and</font>

135
00:04:52,249 --> 00:04:55,129
<font color="#E5E5E5">you can do that we are I'll show a</font>

136
00:04:54,019 --> 00:04:57,589
<font color="#E5E5E5">couple of</font><font color="#CCCCCC"> sequence</font><font color="#E5E5E5"> there are ones</font><font color="#CCCCCC"> that</font>

137
00:04:55,129 --> 00:05:01,129
<font color="#E5E5E5">show how this works</font><font color="#CCCCCC"> and at the same time</font>

138
00:04:57,589 --> 00:05:03,229
you can<font color="#E5E5E5"> also tell Janus when you have an</font>

139
00:05:01,129 --> 00:05:05,299
RTP packet to<font color="#CCCCCC"> send back to the user when</font>

140
00:05:03,229 --> 00:05:07,758
<font color="#CCCCCC">you are statistics to send data shine a</font>

141
00:05:05,299 --> 00:05:10,219
message to send and<font color="#E5E5E5"> so these two set of</font>

142
00:05:07,759 --> 00:05:12,169
<font color="#E5E5E5">API is allow a plug-in to both receive</font>

143
00:05:10,219 --> 00:05:13,759
and<font color="#E5E5E5"> send media at any time or repair</font>

144
00:05:12,169 --> 00:05:16,729
connection which gives you complete

145
00:05:13,759 --> 00:05:19,189
<font color="#E5E5E5">control over what</font><font color="#CCCCCC"> peer connection will</font>

146
00:05:16,729 --> 00:05:20,839
transport for within<font color="#E5E5E5"> the context of a</font>

147
00:05:19,189 --> 00:05:23,509
session<font color="#CCCCCC"> and then you have some</font>

148
00:05:20,839 --> 00:05:24,860
additional methods let's say<font color="#CCCCCC"> closed a</font>

149
00:05:23,509 --> 00:05:27,019
peer connection because you don't want

150
00:05:24,860 --> 00:05:28,579
it<font color="#E5E5E5"> anymore and stuff like this</font><font color="#CCCCCC"> and just</font>

151
00:05:27,019 --> 00:05:31,909
to give you<font color="#CCCCCC"> an idea of how this works</font>

152
00:05:28,579 --> 00:05:33,709
from from a<font color="#E5E5E5"> sequencer perspective the</font>

153
00:05:31,909 --> 00:05:36,739
<font color="#E5E5E5">idea is that the user decides to attach</font>

154
00:05:33,709 --> 00:05:38,389
to a specific<font color="#CCCCCC"> plugin and typically the</font>

155
00:05:36,739 --> 00:05:40,279
user<font color="#E5E5E5"> just specifies the plug-in name</font>

156
00:05:38,389 --> 00:05:42,889
<font color="#E5E5E5">space which is the unique</font><font color="#CCCCCC"> identifier for</font>

157
00:05:40,279 --> 00:05:44,719
<font color="#CCCCCC">a</font><font color="#E5E5E5"> plug-in the general score knows the</font>

158
00:05:42,889 --> 00:05:47,029
the<font color="#CCCCCC"> plug-in is registered somewhere</font><font color="#E5E5E5"> and</font>

159
00:05:44,719 --> 00:05:50,299
so uses the create session callback to

160
00:05:47,029 --> 00:05:51,949
add the new user<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> plug-in</font>

161
00:05:50,299 --> 00:05:53,448
<font color="#E5E5E5">then it's up</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> plug-in it's up to</font>

162
00:05:51,949 --> 00:05:56,209
you it's<font color="#E5E5E5"> a responsibility</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the plug-in</font>

163
00:05:53,449 --> 00:05:58,819
<font color="#CCCCCC">itself</font><font color="#E5E5E5"> to to take care</font><font color="#CCCCCC"> of the of this</font>

164
00:05:56,209 --> 00:06:00,529
user and and do what we've seen before

165
00:05:58,819 --> 00:06:03,019
<font color="#E5E5E5">so keeping</font><font color="#CCCCCC"> track of the user maybe</font>

166
00:06:00,529 --> 00:06:05,569
create a new<font color="#E5E5E5"> structure for</font><font color="#CCCCCC"> this user to</font>

167
00:06:03,019 --> 00:06:07,669
add as a conference<font color="#CCCCCC"> participant</font><font color="#E5E5E5"> or</font>

168
00:06:05,569 --> 00:06:10,039
whatever<font color="#CCCCCC"> and then any time the user</font>

169
00:06:07,669 --> 00:06:11,799
<font color="#CCCCCC">sends a message via the</font><font color="#E5E5E5"> browser or</font>

170
00:06:10,039 --> 00:06:14,089
whatever meant for that specific plug-in

171
00:06:11,799 --> 00:06:17,029
the general score will strip<font color="#E5E5E5"> everything</font>

172
00:06:14,089 --> 00:06:19,189
else and<font color="#E5E5E5"> we'll just give the message</font>

173
00:06:17,029 --> 00:06:24,110
itself to the three plugins so that this

174
00:06:19,189 --> 00:06:26,199
can be<font color="#E5E5E5"> processed somehow and the way</font>

175
00:06:24,110 --> 00:06:28,759
that these messaging works is that

176
00:06:26,199 --> 00:06:30,229
typically where plugins can handle

177
00:06:28,759 --> 00:06:32,749
messages in two different<font color="#E5E5E5"> ways in a</font>

178
00:06:30,229 --> 00:06:35,239
synchronous<font color="#E5E5E5"> or</font><font color="#CCCCCC"> in a synchronous approach</font>

179
00:06:32,749 --> 00:06:37,399
when you handle messages synchronously

180
00:06:35,239 --> 00:06:38,808
<font color="#CCCCCC">then you just send</font><font color="#E5E5E5"> a response right</font><font color="#CCCCCC"> away</font>

181
00:06:37,399 --> 00:06:40,550
to that callback<font color="#CCCCCC"> that we've seen before</font>

182
00:06:38,809 --> 00:06:42,589
<font color="#E5E5E5">so you receive</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> message to do</font>

183
00:06:40,550 --> 00:06:44,620
precisely to send a response back<font color="#CCCCCC"> and</font>

184
00:06:42,589 --> 00:06:47,110
<font color="#E5E5E5">this can be useful</font><font color="#CCCCCC"> for instance</font><font color="#E5E5E5"> in</font>

185
00:06:44,620 --> 00:06:49,000
like you were like<font color="#CCCCCC"> when I request is for</font>

186
00:06:47,110 --> 00:06:51,310
<font color="#CCCCCC">give</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of conferences that these</font>

187
00:06:49,000 --> 00:06:52,870
<font color="#CCCCCC">plug-in handles and stuff</font><font color="#E5E5E5"> like this in</font>

188
00:06:51,310 --> 00:06:55,780
this case<font color="#E5E5E5"> is pretty much</font><font color="#CCCCCC"> tinkle sickness</font>

189
00:06:52,870 --> 00:06:58,270
<font color="#E5E5E5">suc but more often than not like</font><font color="#CCCCCC"> plugins</font>

190
00:06:55,780 --> 00:07:00,219
actually communicate a synchronous me

191
00:06:58,270 --> 00:07:03,310
instead which means that<font color="#E5E5E5"> users send a</font>

192
00:07:00,220 --> 00:07:04,840
message<font color="#E5E5E5"> the core</font><font color="#CCCCCC"> passes</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> message to</font>

193
00:07:03,310 --> 00:07:06,669
the<font color="#E5E5E5"> plug-in the plug-in just sends an</font>

194
00:07:04,840 --> 00:07:08,590
ACK back and then later on<font color="#CCCCCC"> will send you</font>

195
00:07:06,669 --> 00:07:10,049
one or more events notifications to take

196
00:07:08,590 --> 00:07:11,979
care<font color="#CCCCCC"> of this</font>

197
00:07:10,050 --> 00:07:13,360
the a synchronous messaging is

198
00:07:11,979 --> 00:07:16,599
particularly important because<font color="#E5E5E5"> it also</font>

199
00:07:13,360 --> 00:07:19,180
takes care<font color="#E5E5E5"> of the WebRTC negotiation by</font>

200
00:07:16,600 --> 00:07:21,220
itself so Stephen has anticipated<font color="#E5E5E5"> how</font>

201
00:07:19,180 --> 00:07:24,490
SDP offers and answers are involved

202
00:07:21,220 --> 00:07:26,979
plugins are responsible<font color="#CCCCCC"> to prepare that</font>

203
00:07:24,490 --> 00:07:28,990
<font color="#E5E5E5">those is DP offers and answers</font><font color="#CCCCCC"> depending</font>

204
00:07:26,979 --> 00:07:30,400
on who originates the session and this

205
00:07:28,990 --> 00:07:32,979
is all done in a<font color="#E5E5E5"> synchronous way so</font>

206
00:07:30,400 --> 00:07:35,229
<font color="#CCCCCC">maybe a user sends an offer it gets to</font>

207
00:07:32,979 --> 00:07:37,000
the<font color="#CCCCCC"> plug-in the call will strip out the</font>

208
00:07:35,229 --> 00:07:39,130
<font color="#E5E5E5">WebRTC stuff it will just give you</font><font color="#CCCCCC"> a</font>

209
00:07:37,000 --> 00:07:41,229
<font color="#CCCCCC">bare-bones DP'd the the plug-in prepares</font>

210
00:07:39,130 --> 00:07:44,199
<font color="#E5E5E5">an offer an</font><font color="#CCCCCC"> enhancer it sends it back</font><font color="#E5E5E5"> so</font>

211
00:07:41,229 --> 00:07:47,199
same thing<font color="#E5E5E5"> when the plug-in is actually</font>

212
00:07:44,199 --> 00:07:49,450
offering something<font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> of course</font>

213
00:07:47,199 --> 00:07:51,010
<font color="#CCCCCC">we</font><font color="#E5E5E5"> as we've seen media will</font><font color="#CCCCCC"> be just</font>

214
00:07:49,450 --> 00:07:53,229
<font color="#CCCCCC">bridged</font><font color="#E5E5E5"> by the general score so</font><font color="#CCCCCC"> the</font>

215
00:07:51,010 --> 00:07:55,030
users and something we are secure<font color="#E5E5E5"> RTP</font>

216
00:07:53,229 --> 00:07:56,560
the plug-in will strip the security part

217
00:07:55,030 --> 00:08:00,070
and the plugins will have<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to the</font>

218
00:07:56,560 --> 00:08:01,840
unencrypted traffic<font color="#E5E5E5"> for</font><font color="#CCCCCC"> daily needs as</font>

219
00:08:00,070 --> 00:08:03,460
we've<font color="#E5E5E5"> seen as I</font><font color="#CCCCCC"> anticipated before</font><font color="#E5E5E5"> all</font>

220
00:08:01,840 --> 00:08:05,979
of these plugins and meters need to be

221
00:08:03,460 --> 00:08:08,229
implemented<font color="#CCCCCC"> it see because that's how C</font>

222
00:08:05,979 --> 00:08:11,889
<font color="#E5E5E5">Janice was conceived so</font><font color="#CCCCCC"> Janice loads the</font>

223
00:08:08,229 --> 00:08:14,169
shared<font color="#E5E5E5"> model and expects C interface to</font>

224
00:08:11,889 --> 00:08:15,639
<font color="#CCCCCC">communicate</font><font color="#E5E5E5"> to it but if we</font><font color="#CCCCCC"> think about</font>

225
00:08:14,169 --> 00:08:17,680
<font color="#E5E5E5">it we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> really need the whole</font>

226
00:08:15,639 --> 00:08:19,810
<font color="#E5E5E5">plug-in to be in C if as long as the</font>

227
00:08:17,680 --> 00:08:21,639
interfaces are something that<font color="#E5E5E5"> looks like</font>

228
00:08:19,810 --> 00:08:23,199
<font color="#E5E5E5">C and</font><font color="#CCCCCC"> deployed in the</font><font color="#E5E5E5"> chorus FB then we</font>

229
00:08:21,639 --> 00:08:25,510
can<font color="#CCCCCC"> implement all the logic in whatever</font>

230
00:08:23,199 --> 00:08:28,479
language<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> if we then implement</font>

231
00:08:25,510 --> 00:08:31,090
the hooks in<font color="#E5E5E5"> somehow so that</font><font color="#CCCCCC"> we have</font>

232
00:08:28,479 --> 00:08:33,338
some stubs<font color="#E5E5E5"> that then delegate all the</font>

233
00:08:31,090 --> 00:08:35,049
logic<font color="#CCCCCC"> to something else</font><font color="#E5E5E5"> which in</font>

234
00:08:33,339 --> 00:08:36,880
principle except it's exactly what we

235
00:08:35,049 --> 00:08:38,859
did<font color="#CCCCCC"> with the Lua</font><font color="#E5E5E5"> plug-in which at the</font>

236
00:08:36,880 --> 00:08:42,909
moment is a pull request<font color="#CCCCCC"> that is</font>

237
00:08:38,860 --> 00:08:44,770
available<font color="#E5E5E5"> on our</font><font color="#CCCCCC"> Janus repository I also</font>

238
00:08:42,909 --> 00:08:47,020
wrote a small<font color="#E5E5E5"> tutorial</font><font color="#CCCCCC"> about how to</font>

239
00:08:44,770 --> 00:08:49,569
write a<font color="#CCCCCC"> lower script from scratch to use</font>

240
00:08:47,020 --> 00:08:53,050
<font color="#E5E5E5">this I'll go a bit on this later on and</font>

241
00:08:49,570 --> 00:08:54,730
the basics are<font color="#CCCCCC"> that typically</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font>

242
00:08:53,050 --> 00:08:57,640
<font color="#E5E5E5">a few things that we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider so</font>

243
00:08:54,730 --> 00:08:58,390
when for<font color="#E5E5E5"> this Lua plug-in we basically</font>

244
00:08:57,640 --> 00:09:00,310
<font color="#E5E5E5">decided</font>

245
00:08:58,390 --> 00:09:02,620
of course it's<font color="#E5E5E5"> still a</font><font color="#CCCCCC"> C plugin</font><font color="#E5E5E5"> because</font>

246
00:09:00,310 --> 00:09:05,020
we<font color="#E5E5E5"> need a</font><font color="#CCCCCC"> C interface but then these</font>

247
00:09:02,620 --> 00:09:07,030
<font color="#CCCCCC">plug-in loads a user provided Lua script</font>

248
00:09:05,020 --> 00:09:09,130
when you initialize it so you say open

249
00:09:07,030 --> 00:09:10,420
<font color="#CCCCCC">this Luis quit which can be maybe</font>

250
00:09:09,130 --> 00:09:12,160
different scripts<font color="#E5E5E5"> for different</font>

251
00:09:10,420 --> 00:09:14,079
applications<font color="#E5E5E5"> then all the plug-in</font>

252
00:09:12,160 --> 00:09:15,819
<font color="#E5E5E5">callbacks are implemented in C but they</font>

253
00:09:14,080 --> 00:09:18,190
then call a lower function so that<font color="#E5E5E5"> the</font>

254
00:09:15,820 --> 00:09:21,100
Lua script can handle those requests in

255
00:09:18,190 --> 00:09:22,930
and at the<font color="#E5E5E5"> same time the the this</font>

256
00:09:21,100 --> 00:09:25,240
<font color="#E5E5E5">plug-in also implements all the core</font>

257
00:09:22,930 --> 00:09:27,489
methods<font color="#E5E5E5"> that should be needed to</font>

258
00:09:25,240 --> 00:09:29,470
<font color="#E5E5E5">communicate with the weedy core and</font>

259
00:09:27,490 --> 00:09:31,870
exposes them as<font color="#E5E5E5"> Lua functions so</font><font color="#CCCCCC"> that</font>

260
00:09:29,470 --> 00:09:34,570
when I call push event from a Lua script

261
00:09:31,870 --> 00:09:36,070
<font color="#E5E5E5">the C plug-in will code will transform</font>

262
00:09:34,570 --> 00:09:38,410
them in something<font color="#CCCCCC"> that the core will be</font>

263
00:09:36,070 --> 00:09:39,970
able to digest<font color="#CCCCCC"> and in order to track</font>

264
00:09:38,410 --> 00:09:42,699
users and sessions in a way that both

265
00:09:39,970 --> 00:09:45,070
<font color="#E5E5E5">the CL Lua code can identify we chose</font>

266
00:09:42,700 --> 00:09:48,880
just<font color="#E5E5E5"> for a for simplicity to use a</font>

267
00:09:45,070 --> 00:09:50,590
unique numeric ID<font color="#CCCCCC"> tool</font><font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> and in</font>

268
00:09:48,880 --> 00:09:53,290
<font color="#E5E5E5">principle this is exactly what we did so</font>

269
00:09:50,590 --> 00:09:55,390
some kind of a<font color="#E5E5E5"> C to lure proxy</font>

270
00:09:53,290 --> 00:09:56,980
communication even<font color="#E5E5E5"> though there are</font><font color="#CCCCCC"> some</font>

271
00:09:55,390 --> 00:09:59,110
problems<font color="#CCCCCC"> that we needed</font><font color="#E5E5E5"> to address that</font>

272
00:09:56,980 --> 00:10:01,090
I'll talk<font color="#E5E5E5"> about in a minute which means</font>

273
00:09:59,110 --> 00:10:04,030
that if<font color="#CCCCCC"> you look</font><font color="#E5E5E5"> at the date that API</font>

274
00:10:01,090 --> 00:10:05,680
that we've seen<font color="#CCCCCC"> before this</font><font color="#E5E5E5"> is the C</font>

275
00:10:04,030 --> 00:10:07,600
version of these callbacks<font color="#E5E5E5"> that the</font>

276
00:10:05,680 --> 00:10:09,670
<font color="#E5E5E5">plugin implements because the core needs</font>

277
00:10:07,600 --> 00:10:11,860
them but they<font color="#E5E5E5"> are in turn than all</font>

278
00:10:09,670 --> 00:10:14,439
passed to<font color="#CCCCCC"> Louis to lower function on the</font>

279
00:10:11,860 --> 00:10:15,850
other end<font color="#E5E5E5"> the only two important ones in</font>

280
00:10:14,440 --> 00:10:17,710
this case are in<font color="#E5E5E5"> it and destroy because</font>

281
00:10:15,850 --> 00:10:21,160
<font color="#E5E5E5">for the versioning information the Lua</font>

282
00:10:17,710 --> 00:10:22,900
plug-in can answer<font color="#CCCCCC"> its</font><font color="#E5E5E5"> in himself but if</font>

283
00:10:21,160 --> 00:10:24,969
you want to override<font color="#CCCCCC"> that information as</font>

284
00:10:22,900 --> 00:10:27,490
<font color="#CCCCCC">well you can basically</font><font color="#E5E5E5"> and more</font>

285
00:10:24,970 --> 00:10:29,770
importantly for<font color="#CCCCCC"> all the session</font>

286
00:10:27,490 --> 00:10:32,200
management<font color="#E5E5E5"> we have alternatives for that</font>

287
00:10:29,770 --> 00:10:33,819
<font color="#E5E5E5">as well so whenever a user attaches with</font>

288
00:10:32,200 --> 00:10:35,710
there will be a create session called

289
00:10:33,820 --> 00:10:40,810
back cold on the Lua script and so on

290
00:10:35,710 --> 00:10:42,700
with<font color="#E5E5E5"> the only exceptions of incoming RTP</font>

291
00:10:40,810 --> 00:10:44,530
are TCP and data which you<font color="#CCCCCC"> might</font>

292
00:10:42,700 --> 00:10:46,540
implement but you probably<font color="#E5E5E5"> will not want</font>

293
00:10:44,530 --> 00:10:49,810
to end tip eclis you will<font color="#CCCCCC"> not</font><font color="#E5E5E5"> want to as</font>

294
00:10:46,540 --> 00:10:51,430
<font color="#CCCCCC">I explained</font><font color="#E5E5E5"> in a</font><font color="#CCCCCC"> minute and for of</font>

295
00:10:49,810 --> 00:10:52,810
course<font color="#CCCCCC"> for sending is stuff back it's</font>

296
00:10:51,430 --> 00:10:55,180
<font color="#CCCCCC">pretty much the</font><font color="#E5E5E5"> same thing so</font>

297
00:10:52,810 --> 00:10:58,109
the Lua script will call push event or

298
00:10:55,180 --> 00:11:00,640
<font color="#E5E5E5">in session or whatever this will be</font>

299
00:10:58,110 --> 00:11:02,770
intercepted<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the simple game via</font><font color="#E5E5E5"> this</font>

300
00:11:00,640 --> 00:11:05,560
<font color="#CCCCCC">lewis e communication and and it will be</font>

301
00:11:02,770 --> 00:11:08,170
<font color="#E5E5E5">sent by the core to the core by the lure</font>

302
00:11:05,560 --> 00:11:10,449
to<font color="#E5E5E5"> the Lua plug-in itself which means</font>

303
00:11:08,170 --> 00:11:11,540
that<font color="#E5E5E5"> very simply this</font><font color="#CCCCCC"> plug-in then acts</font>

304
00:11:10,450 --> 00:11:13,310
as an intermediary

305
00:11:11,540 --> 00:11:14,810
layer between<font color="#CCCCCC"> the</font><font color="#E5E5E5"> C word and the Lua</font>

306
00:11:13,310 --> 00:11:17,239
script so anytime something comes from

307
00:11:14,810 --> 00:11:20,839
<font color="#E5E5E5">one direction</font><font color="#CCCCCC"> it translates it to to</font><font color="#E5E5E5"> the</font>

308
00:11:17,240 --> 00:11:22,459
other part and<font color="#CCCCCC"> vice versa typically the</font>

309
00:11:20,839 --> 00:11:24,110
there are there were a couple<font color="#E5E5E5"> of issues</font>

310
00:11:22,459 --> 00:11:27,709
that<font color="#E5E5E5"> we had to employ to take care</font>

311
00:11:24,110 --> 00:11:29,389
<font color="#E5E5E5">though most importantly we've seen how a</font>

312
00:11:27,709 --> 00:11:32,000
synchronous event<font color="#E5E5E5"> are more very</font>

313
00:11:29,389 --> 00:11:33,920
important in the<font color="#E5E5E5"> plugins communication</font>

314
00:11:32,000 --> 00:11:37,519
because that's also<font color="#E5E5E5"> how negotiations</font>

315
00:11:33,920 --> 00:11:39,979
happens and the problem was that the Lua

316
00:11:37,519 --> 00:11:41,360
<font color="#E5E5E5">is typically single trade I mean they</font>

317
00:11:39,980 --> 00:11:43,220
have a concept of<font color="#CCCCCC"> treads but they are</font>

318
00:11:41,360 --> 00:11:45,620
not<font color="#E5E5E5"> really</font><font color="#CCCCCC"> threads they're mostly called</font>

319
00:11:43,220 --> 00:11:47,569
<font color="#CCCCCC">coroutines typically and besides the</font>

320
00:11:45,620 --> 00:11:49,790
access to the low estate which means the

321
00:11:47,569 --> 00:11:51,889
Lua script<font color="#E5E5E5"> that we loaded</font><font color="#CCCCCC"> at access</font><font color="#E5E5E5"> the</font>

322
00:11:49,790 --> 00:11:54,380
we might<font color="#E5E5E5"> call it the</font><font color="#CCCCCC"> virtual machine for</font>

323
00:11:51,889 --> 00:11:56,149
the Lua script that we are handling<font color="#E5E5E5"> is</font>

324
00:11:54,380 --> 00:11:57,860
<font color="#CCCCCC">not thread safe so we cannot access it</font>

325
00:11:56,149 --> 00:12:00,410
<font color="#CCCCCC">from multiple threads without</font><font color="#E5E5E5"> causing</font>

326
00:11:57,860 --> 00:12:02,240
trouble basically<font color="#E5E5E5"> so we had to first of</font>

327
00:12:00,410 --> 00:12:04,130
all lock that to a state<font color="#CCCCCC"> anytime that we</font>

328
00:12:02,240 --> 00:12:06,230
wanted<font color="#E5E5E5"> to access it and most importantly</font>

329
00:12:04,130 --> 00:12:08,329
we had to implement<font color="#E5E5E5"> some sort</font><font color="#CCCCCC"> of a C</font>

330
00:12:06,230 --> 00:12:10,370
scheduler<font color="#CCCCCC"> that we could implement</font><font color="#E5E5E5"> to</font>

331
00:12:08,329 --> 00:12:11,508
take advantage of<font color="#CCCCCC"> anytime that</font><font color="#E5E5E5"> we wanted</font>

332
00:12:10,370 --> 00:12:13,940
<font color="#CCCCCC">to have some kind of a synchronous</font>

333
00:12:11,509 --> 00:12:16,130
<font color="#E5E5E5">communication</font><font color="#CCCCCC"> so anytime the Lua script</font>

334
00:12:13,940 --> 00:12:18,889
wants to have a<font color="#E5E5E5"> message handle</font><font color="#CCCCCC"> that</font>

335
00:12:16,130 --> 00:12:21,290
synchronously<font color="#CCCCCC"> it will basically</font><font color="#E5E5E5"> just say</font>

336
00:12:18,889 --> 00:12:24,440
create a core routine keep it in a task

337
00:12:21,290 --> 00:12:26,990
list<font color="#E5E5E5"> and then notify the scheduler in C</font>

338
00:12:24,440 --> 00:12:28,519
to say<font color="#E5E5E5"> I will need these to</font><font color="#CCCCCC"> be handled</font>

339
00:12:26,990 --> 00:12:30,680
in<font color="#E5E5E5"> a quarantine later on as soon as</font>

340
00:12:28,519 --> 00:12:32,300
there<font color="#CCCCCC"> is time</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> that which</font><font color="#E5E5E5"> is what we</font>

341
00:12:30,680 --> 00:12:34,550
implemented via emitter that<font color="#CCCCCC"> is called</font>

342
00:12:32,300 --> 00:12:36,439
POC scheduler so the Lua<font color="#E5E5E5"> plug-in will</font>

343
00:12:34,550 --> 00:12:37,969
just call this<font color="#E5E5E5"> method</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> method</font><font color="#CCCCCC"> will</font>

344
00:12:36,440 --> 00:12:41,180
handle a thread internally<font color="#E5E5E5"> that then</font>

345
00:12:37,970 --> 00:12:43,069
keeps it secure in order to then call

346
00:12:41,180 --> 00:12:45,500
the core routine as if as if<font color="#E5E5E5"> it were a</font>

347
00:12:43,069 --> 00:12:47,930
generic was<font color="#CCCCCC"> do a function later on</font><font color="#E5E5E5"> and</font>

348
00:12:45,500 --> 00:12:50,029
<font color="#E5E5E5">you can see it pretty much as</font>

349
00:12:47,930 --> 00:12:51,709
exemplified here I'm<font color="#E5E5E5"> not going</font><font color="#CCCCCC"> I will</font>

350
00:12:50,029 --> 00:12:56,180
not go too much<font color="#E5E5E5"> into the details due to</font>

351
00:12:51,709 --> 00:12:57,680
lack of<font color="#CCCCCC"> time but we you can ask for more</font>

352
00:12:56,180 --> 00:13:01,760
information<font color="#CCCCCC"> later</font><font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> interested</font>

353
00:12:57,680 --> 00:13:06,109
<font color="#E5E5E5">in this and this is a very simple</font>

354
00:13:01,760 --> 00:13:07,850
example<font color="#CCCCCC"> of how you can</font><font color="#E5E5E5"> do that so</font><font color="#CCCCCC"> you</font>

355
00:13:06,110 --> 00:13:09,410
have a<font color="#CCCCCC"> message you want to</font><font color="#E5E5E5"> add you want</font>

356
00:13:07,850 --> 00:13:12,410
<font color="#CCCCCC">these to be handled the synchronously</font>

357
00:13:09,410 --> 00:13:14,420
<font color="#E5E5E5">you you</font><font color="#CCCCCC"> added to a to your own</font><font color="#E5E5E5"> ash map</font>

358
00:13:12,410 --> 00:13:16,550
or<font color="#E5E5E5"> whatever you call</font><font color="#CCCCCC"> folk scheduler and</font>

359
00:13:14,420 --> 00:13:20,060
then<font color="#E5E5E5"> a thread will wake up in the C code</font>

360
00:13:16,550 --> 00:13:22,160
to them invoke later on<font color="#CCCCCC"> be</font><font color="#E5E5E5"> a resume</font>

361
00:13:20,060 --> 00:13:23,239
schedule or the<font color="#CCCCCC"> detest</font><font color="#E5E5E5"> list so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

362
00:13:22,160 --> 00:13:25,339
can do it again

363
00:13:23,240 --> 00:13:28,010
we also have an alternative to let's say

364
00:13:25,340 --> 00:13:29,840
time<font color="#CCCCCC"> callbacks on on your own</font><font color="#E5E5E5"> on your</font>

365
00:13:28,010 --> 00:13:31,640
<font color="#E5E5E5">own schedule rather than let's say</font><font color="#CCCCCC"> call</font>

366
00:13:29,840 --> 00:13:33,620
<font color="#E5E5E5">this</font><font color="#CCCCCC"> method as soon as it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> possible</font>

367
00:13:31,640 --> 00:13:39,080
and<font color="#E5E5E5"> you can do that via I am metered</font>

368
00:13:33,620 --> 00:13:41,090
that is called that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> called the time</font>

369
00:13:39,080 --> 00:13:43,130
callback which basically means<font color="#E5E5E5"> you say</font>

370
00:13:41,090 --> 00:13:44,810
<font color="#E5E5E5">call this</font><font color="#CCCCCC"> callback with this arguments</font>

371
00:13:43,130 --> 00:13:46,430
in five seconds for instance and

372
00:13:44,810 --> 00:13:48,680
typically<font color="#E5E5E5"> the approach is</font><font color="#CCCCCC"> exactly the</font>

373
00:13:46,430 --> 00:13:50,239
same<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> trade back in the</font><font color="#E5E5E5"> C code</font>

374
00:13:48,680 --> 00:13:51,770
that takes<font color="#E5E5E5"> care of this as</font><font color="#CCCCCC"> soon</font><font color="#E5E5E5"> as the</font>

375
00:13:50,240 --> 00:13:53,630
time pass we invoke the<font color="#CCCCCC"> function that</font>

376
00:13:51,770 --> 00:13:55,490
you want<font color="#E5E5E5"> it to be invoked which makes</font>

377
00:13:53,630 --> 00:13:57,800
for an easy way<font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> this a</font>

378
00:13:55,490 --> 00:13:59,600
synchronous behavior that we needed but

379
00:13:57,800 --> 00:14:01,370
<font color="#CCCCCC">more this</font><font color="#E5E5E5"> is actually more important</font>

380
00:13:59,600 --> 00:14:03,860
<font color="#CCCCCC">than</font><font color="#E5E5E5"> the rest</font><font color="#CCCCCC"> we wanted</font><font color="#E5E5E5"> to have also a</font>

381
00:14:01,370 --> 00:14:05,570
way<font color="#E5E5E5"> to handle RTP or</font><font color="#CCCCCC"> TCP and data in a</font>

382
00:14:03,860 --> 00:14:07,880
way<font color="#E5E5E5"> that would not completely block the</font>

383
00:14:05,570 --> 00:14:09,620
<font color="#E5E5E5">newest state machine because as we've</font>

384
00:14:07,880 --> 00:14:11,720
seen<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have methods to handle</font><font color="#E5E5E5"> incoming</font>

385
00:14:09,620 --> 00:14:13,700
traffic so an incoming RTP<font color="#CCCCCC"> method to</font>

386
00:14:11,720 --> 00:14:17,660
handle<font color="#E5E5E5"> incoming RTP traffic for instance</font>

387
00:14:13,700 --> 00:14:19,310
<font color="#CCCCCC">the let's say the the normal way you</font>

388
00:14:17,660 --> 00:14:21,949
think<font color="#E5E5E5"> you'll be you could do this would</font>

389
00:14:19,310 --> 00:14:23,630
mean<font color="#E5E5E5"> take this RTP packet and pass it to</font>

390
00:14:21,950 --> 00:14:25,730
<font color="#CCCCCC">lieu</font><font color="#E5E5E5"> exactly as it is and let's do a</font>

391
00:14:23,630 --> 00:14:28,040
worry<font color="#E5E5E5"> about it which is</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> not an</font>

392
00:14:25,730 --> 00:14:30,500
option<font color="#CCCCCC"> because as we've seen Lua is</font>

393
00:14:28,040 --> 00:14:32,870
<font color="#E5E5E5">single</font><font color="#CCCCCC"> threaded it will</font><font color="#E5E5E5"> completely kill</font>

394
00:14:30,500 --> 00:14:36,320
performances if you try to have Lua take

395
00:14:32,870 --> 00:14:39,610
care of<font color="#E5E5E5"> this delivery itself so the the</font>

396
00:14:36,320 --> 00:14:41,990
way<font color="#CCCCCC"> that we handled it</font><font color="#E5E5E5"> was to basically</font>

397
00:14:39,610 --> 00:14:44,870
<font color="#E5E5E5">handle this in in a different</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> and</font>

398
00:14:41,990 --> 00:14:46,730
this<font color="#E5E5E5"> was because for RTP and rtcp and</font>

399
00:14:44,870 --> 00:14:48,110
that as well the<font color="#CCCCCC"> traffic may actually be</font>

400
00:14:46,730 --> 00:14:51,070
very<font color="#E5E5E5"> frequent which means that you may</font>

401
00:14:48,110 --> 00:14:54,290
<font color="#CCCCCC">actually kill performance if</font><font color="#E5E5E5"> you did it</font>

402
00:14:51,070 --> 00:14:55,940
<font color="#E5E5E5">directly there so we basically</font>

403
00:14:54,290 --> 00:14:57,920
implemented some meters<font color="#CCCCCC"> that allow you</font>

404
00:14:55,940 --> 00:15:00,470
<font color="#E5E5E5">to configure the routing of</font><font color="#CCCCCC"> the media</font>

405
00:14:57,920 --> 00:15:03,680
depending on how media<font color="#E5E5E5"> is flowing in and</font>

406
00:15:00,470 --> 00:15:06,110
then let the C code worry about<font color="#E5E5E5"> actually</font>

407
00:15:03,680 --> 00:15:08,000
delivering<font color="#E5E5E5"> these packets in a one</font><font color="#CCCCCC"> or</font>

408
00:15:06,110 --> 00:15:10,940
<font color="#E5E5E5">either direction and the concept was</font>

409
00:15:08,000 --> 00:15:12,740
<font color="#E5E5E5">quite simple so we</font><font color="#CCCCCC"> chose to add a couple</font>

410
00:15:10,940 --> 00:15:14,930
<font color="#E5E5E5">of meters that</font><font color="#CCCCCC"> are called</font><font color="#E5E5E5"> add recipient</font>

411
00:15:12,740 --> 00:15:17,480
<font color="#E5E5E5">a remove recipient that basically allow</font>

412
00:15:14,930 --> 00:15:19,910
<font color="#E5E5E5">you</font><font color="#CCCCCC"> to say</font><font color="#E5E5E5"> for these specific users all</font>

413
00:15:17,480 --> 00:15:22,250
media coming from this user<font color="#E5E5E5"> send it to</font>

414
00:15:19,910 --> 00:15:23,959
<font color="#CCCCCC">this other user instead</font><font color="#E5E5E5"> and of course</font>

415
00:15:22,250 --> 00:15:25,370
you can<font color="#E5E5E5"> call these multiple times for</font>

416
00:15:23,960 --> 00:15:27,200
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> user so that you can add a</font>

417
00:15:25,370 --> 00:15:29,600
<font color="#E5E5E5">one-to-one conversation or a one-to-many</font>

418
00:15:27,200 --> 00:15:31,220
conversation if you<font color="#CCCCCC"> wanted</font><font color="#E5E5E5"> and then the</font>

419
00:15:29,600 --> 00:15:33,290
C<font color="#E5E5E5"> plug-in takes care of all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> rest so</font>

420
00:15:31,220 --> 00:15:35,630
<font color="#CCCCCC">they overriding the RTP headers if</font>

421
00:15:33,290 --> 00:15:37,130
needed<font color="#E5E5E5"> sending packets around as they</font>

422
00:15:35,630 --> 00:15:38,060
are<font color="#E5E5E5"> needed and so on</font><font color="#CCCCCC"> without the Lua</font>

423
00:15:37,130 --> 00:15:40,550
<font color="#CCCCCC">plug-in meeting</font>

424
00:15:38,060 --> 00:15:42,500
<font color="#CCCCCC">worry about</font><font color="#E5E5E5"> anything at all so it just</font>

425
00:15:40,550 --> 00:15:45,079
<font color="#CCCCCC">lets say turn some knobs and</font><font color="#E5E5E5"> some buds</font>

426
00:15:42,500 --> 00:15:47,480
here and there to say this is where<font color="#CCCCCC"> the</font>

427
00:15:45,080 --> 00:15:49,130
<font color="#E5E5E5">media should flow and this is flexible</font>

428
00:15:47,480 --> 00:15:50,900
<font color="#CCCCCC">enough to</font><font color="#E5E5E5"> allow you to</font><font color="#CCCCCC"> do any</font><font color="#E5E5E5"> kind of</font>

429
00:15:49,130 --> 00:15:53,270
<font color="#CCCCCC">communication from</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> to one to</font>

430
00:15:50,900 --> 00:15:55,670
actually<font color="#CCCCCC"> a</font><font color="#E5E5E5"> complete</font><font color="#CCCCCC"> SFU if</font><font color="#E5E5E5"> you wanted to</font>

431
00:15:53,270 --> 00:15:57,410
do<font color="#E5E5E5"> that and this is a very simple</font>

432
00:15:55,670 --> 00:15:59,300
example<font color="#CCCCCC"> where for instance a</font><font color="#E5E5E5"> list is</font>

433
00:15:57,410 --> 00:16:01,819
starting to send media just<font color="#CCCCCC"> Bob be</font>

434
00:15:59,300 --> 00:16:03,920
<font color="#E5E5E5">subscribed to it and then we receive a</font>

435
00:16:01,820 --> 00:16:06,980
<font color="#E5E5E5">new meter that says send this media to</font>

436
00:16:03,920 --> 00:16:08,479
Tom as well which<font color="#E5E5E5"> means that the packets</font>

437
00:16:06,980 --> 00:16:13,490
<font color="#E5E5E5">that</font><font color="#CCCCCC"> l is this sending will</font><font color="#E5E5E5"> be sent to</font>

438
00:16:08,480 --> 00:16:16,640
both<font color="#E5E5E5"> eventually</font><font color="#CCCCCC"> you can see a</font><font color="#E5E5E5"> couple of</font>

439
00:16:13,490 --> 00:16:18,380
<font color="#E5E5E5">examples</font><font color="#CCCCCC"> here so for instance we in</font><font color="#E5E5E5"> that</font>

440
00:16:16,640 --> 00:16:19,970
<font color="#CCCCCC">pull request that I've shown before we</font>

441
00:16:18,380 --> 00:16:22,400
have a couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> examples out of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> box</font>

442
00:16:19,970 --> 00:16:24,530
so one of<font color="#E5E5E5"> the examples</font><font color="#CCCCCC"> was we</font><font color="#E5E5E5"> just</font>

443
00:16:22,400 --> 00:16:27,050
replicated the exact echo test<font color="#E5E5E5"> that we</font>

444
00:16:24,530 --> 00:16:28,760
have<font color="#E5E5E5"> implemented in C as the</font><font color="#CCCCCC"> Lua plug-in</font>

445
00:16:27,050 --> 00:16:30,890
<font color="#E5E5E5">itself which means in this case it is</font>

446
00:16:28,760 --> 00:16:32,720
<font color="#CCCCCC">really</font><font color="#E5E5E5"> easy we replicate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same API</font>

447
00:16:30,890 --> 00:16:34,790
<font color="#E5E5E5">and then we just make sure</font><font color="#CCCCCC"> that whatever</font>

448
00:16:32,720 --> 00:16:37,220
the<font color="#E5E5E5"> user is sending we send back</font><font color="#CCCCCC"> to him</font>

449
00:16:34,790 --> 00:16:40,010
which as<font color="#E5E5E5"> you may expect it just means</font>

450
00:16:37,220 --> 00:16:41,480
<font color="#E5E5E5">that as</font><font color="#CCCCCC"> soon</font><font color="#E5E5E5"> as the WebRTC connection</font>

451
00:16:40,010 --> 00:16:44,210
goes up and we know it<font color="#CCCCCC"> because we</font><font color="#E5E5E5"> are</font>

452
00:16:41,480 --> 00:16:46,760
notified about this by the<font color="#E5E5E5"> C plug-in we</font>

453
00:16:44,210 --> 00:16:48,860
just call an<font color="#CCCCCC"> addressee piant method</font><font color="#E5E5E5"> for</font>

454
00:16:46,760 --> 00:16:50,960
this session and we pass it to the same

455
00:16:48,860 --> 00:16:52,520
session itself<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that we say any packet</font>

456
00:16:50,960 --> 00:16:55,570
that<font color="#E5E5E5"> is coming</font><font color="#CCCCCC"> from these sessions and</font>

457
00:16:52,520 --> 00:16:58,130
it back to the same session which is

458
00:16:55,570 --> 00:16:59,780
kind of easy but<font color="#E5E5E5"> already shows the</font>

459
00:16:58,130 --> 00:17:03,680
flexibility that<font color="#CCCCCC"> you can do with it</font>

460
00:16:59,780 --> 00:17:05,690
<font color="#E5E5E5">but of</font><font color="#CCCCCC"> course this is more almost</font><font color="#E5E5E5"> done</font>

461
00:17:03,680 --> 00:17:08,389
okay so I'll fly<font color="#E5E5E5"> with</font><font color="#CCCCCC"> don't delay this</font>

462
00:17:05,690 --> 00:17:10,190
<font color="#CCCCCC">light so</font><font color="#E5E5E5"> we also have an</font><font color="#CCCCCC"> s fu</font><font color="#E5E5E5"> clone so</font>

463
00:17:08,390 --> 00:17:11,780
you can in the<font color="#CCCCCC"> results raise more video</font>

464
00:17:10,190 --> 00:17:13,970
conferencing application written in Lua

465
00:17:11,780 --> 00:17:15,410
that is kind<font color="#E5E5E5"> of the kind of cool where</font>

466
00:17:13,970 --> 00:17:16,940
you<font color="#CCCCCC"> actually do</font><font color="#E5E5E5"> this add recipients</font>

467
00:17:15,410 --> 00:17:19,730
tough for a one-to-many kind of thing

468
00:17:16,940 --> 00:17:21,590
but I<font color="#E5E5E5"> also wrote a complete tutorial to</font>

469
00:17:19,730 --> 00:17:24,890
write a plug-in from scratch using a

470
00:17:21,589 --> 00:17:27,020
<font color="#E5E5E5">video call example and you can see it on</font>

471
00:17:24,890 --> 00:17:28,970
our<font color="#E5E5E5"> blog we</font><font color="#CCCCCC"> have a complete post over</font>

472
00:17:27,020 --> 00:17:30,440
here that goes all over the<font color="#E5E5E5"> basics so it</font>

473
00:17:28,970 --> 00:17:31,970
starts<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> very beginning and</font><font color="#E5E5E5"> it</font>

474
00:17:30,440 --> 00:17:33,410
will drive you<font color="#CCCCCC"> in</font><font color="#E5E5E5"> explaining all the</font>

475
00:17:31,970 --> 00:17:36,890
steps that<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do in order to do</font>

476
00:17:33,410 --> 00:17:39,320
that<font color="#E5E5E5"> I also implemented a small demo at</font>

477
00:17:36,890 --> 00:17:41,750
<font color="#E5E5E5">an Astra</font><font color="#CCCCCC"> Astrakhan a few months ago that</font>

478
00:17:39,320 --> 00:17:44,179
they took<font color="#CCCCCC"> advantage of that</font><font color="#E5E5E5"> and I also</font>

479
00:17:41,750 --> 00:17:45,770
wrote a demo specifically for this

480
00:17:44,180 --> 00:17:47,240
session here unfortunately<font color="#CCCCCC"> there is no</font>

481
00:17:45,770 --> 00:17:49,250
time for<font color="#E5E5E5"> that but if you go</font><font color="#CCCCCC"> over that</font>

482
00:17:47,240 --> 00:17:50,720
<font color="#CCCCCC">link over</font><font color="#E5E5E5"> there there is a something</font>

483
00:17:49,250 --> 00:17:53,659
that<font color="#E5E5E5"> looks like the video call</font>

484
00:17:50,720 --> 00:17:55,010
is<font color="#CCCCCC"> actually a</font><font color="#E5E5E5"> chatroulette so I assume</font>

485
00:17:53,659 --> 00:17:57,230
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know pretty</font><font color="#E5E5E5"> much how</font><font color="#CCCCCC"> shuttle</font>

486
00:17:55,010 --> 00:17:58,789
let's work so you start you are not

487
00:17:57,230 --> 00:18:00,500
connecting<font color="#CCCCCC"> to anybody then somebody</font>

488
00:17:58,789 --> 00:18:02,419
randomly made your name in this

489
00:18:00,500 --> 00:18:05,030
completely unedited<font color="#CCCCCC"> in</font><font color="#E5E5E5"> another</font><font color="#CCCCCC"> thread</font>

490
00:18:02,419 --> 00:18:07,159
<font color="#E5E5E5">picture is made see then people</font><font color="#CCCCCC"> make</font>

491
00:18:05,030 --> 00:18:09,320
<font color="#CCCCCC">game a go</font><font color="#E5E5E5"> away and then another match</font>

492
00:18:07,159 --> 00:18:11,510
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> coming for me which I may</font>

493
00:18:09,320 --> 00:18:13,908
not<font color="#CCCCCC"> be really comfortable with so I I</font>

494
00:18:11,510 --> 00:18:15,470
may decide<font color="#CCCCCC"> to drop</font><font color="#E5E5E5"> the communication</font>

495
00:18:13,909 --> 00:18:17,299
instead<font color="#CCCCCC"> and all of these happens within</font>

496
00:18:15,470 --> 00:18:19,429
the context of the same<font color="#E5E5E5"> peer connection</font>

497
00:18:17,299 --> 00:18:21,379
so I connect to<font color="#E5E5E5"> the plug-in once and</font>

498
00:18:19,429 --> 00:18:23,179
then I just send buttons to say I<font color="#CCCCCC"> accept</font>

499
00:18:21,380 --> 00:18:24,650
this match I reject this match and so on

500
00:18:23,179 --> 00:18:26,950
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> plug-in in the background</font>

501
00:18:24,650 --> 00:18:30,080
decides<font color="#E5E5E5"> we should receive my media and</font>

502
00:18:26,950 --> 00:18:32,240
dynamically so in this way<font color="#E5E5E5"> so and I'm</font>

503
00:18:30,080 --> 00:18:34,340
almost<font color="#E5E5E5"> done</font><font color="#CCCCCC"> here so what to do next I</font>

504
00:18:32,240 --> 00:18:36,020
mean<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are some things missing so</font>

505
00:18:34,340 --> 00:18:37,428
typically there are<font color="#E5E5E5"> the most advanced</font>

506
00:18:36,020 --> 00:18:39,559
stuff that we have<font color="#E5E5E5"> in journals are not</font>

507
00:18:37,429 --> 00:18:41,240
available<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> plug-in yet like</font>

508
00:18:39,559 --> 00:18:44,090
simulcasting and stuff like<font color="#CCCCCC"> these and</font>

509
00:18:41,240 --> 00:18:46,220
besides<font color="#E5E5E5"> these blue a plug-in is also</font>

510
00:18:44,090 --> 00:18:47,870
based<font color="#CCCCCC"> on a branch that is</font><font color="#E5E5E5"> experiment</font>

511
00:18:46,220 --> 00:18:50,539
experimental by<font color="#E5E5E5"> itself because it's</font>

512
00:18:47,870 --> 00:18:51,799
<font color="#CCCCCC">dereference counters branch but there</font>

513
00:18:50,539 --> 00:18:53,150
are some things<font color="#CCCCCC"> that we may</font><font color="#E5E5E5"> want to do</font>

514
00:18:51,799 --> 00:18:54,679
in the future<font color="#E5E5E5"> like for instance we I</font>

515
00:18:53,150 --> 00:18:56,690
mentioned that we have a couple<font color="#E5E5E5"> of other</font>

516
00:18:54,679 --> 00:18:58,760
type of plugins like transports and

517
00:18:56,690 --> 00:19:00,740
<font color="#E5E5E5">event handlers so it might make sense to</font>

518
00:18:58,760 --> 00:19:03,590
<font color="#CCCCCC">start to think about</font><font color="#E5E5E5"> Lua for those as</font>

519
00:19:00,740 --> 00:19:04,549
well<font color="#E5E5E5"> if it makes any</font><font color="#CCCCCC"> sense but actually</font>

520
00:19:03,590 --> 00:19:06,350
it's something<font color="#E5E5E5"> that is more</font><font color="#CCCCCC"> interesting</font>

521
00:19:04,549 --> 00:19:07,879
<font color="#CCCCCC">to me</font><font color="#E5E5E5"> start experimenting with</font><font color="#CCCCCC"> other</font>

522
00:19:06,350 --> 00:19:10,340
<font color="#E5E5E5">programming languages as</font><font color="#CCCCCC"> well because</font>

523
00:19:07,880 --> 00:19:12,500
Lua<font color="#E5E5E5"> may be just an opening door for</font><font color="#CCCCCC"> for</font>

524
00:19:10,340 --> 00:19:14,360
<font color="#E5E5E5">these we already have all the hoops in</font>

525
00:19:12,500 --> 00:19:16,159
<font color="#CCCCCC">place to decide how to then communicate</font>

526
00:19:14,360 --> 00:19:18,620
<font color="#E5E5E5">with a different</font><font color="#CCCCCC"> language and</font><font color="#E5E5E5"> have all</font>

527
00:19:16,159 --> 00:19:20,270
the hooks and stubs in<font color="#E5E5E5"> the C code so it</font>

528
00:19:18,620 --> 00:19:22,010
should<font color="#E5E5E5"> be easy enough</font><font color="#CCCCCC"> to let's say use</font>

529
00:19:20,270 --> 00:19:24,440
something like<font color="#E5E5E5"> duct tape or something</font>

530
00:19:22,010 --> 00:19:25,970
else to communicate instead with other

531
00:19:24,440 --> 00:19:28,340
programming languages with javis like

532
00:19:25,970 --> 00:19:29,480
JavaScript or<font color="#CCCCCC"> Python or whatever else I</font>

533
00:19:28,340 --> 00:19:32,629
mean<font color="#E5E5E5"> this is something that I'd like</font><font color="#CCCCCC"> to</font>

534
00:19:29,480 --> 00:19:34,070
experiment<font color="#E5E5E5"> in the future and I hope this</font>

535
00:19:32,630 --> 00:19:36,020
is was interesting<font color="#E5E5E5"> enough for</font><font color="#CCCCCC"> you to</font>

536
00:19:34,070 --> 00:19:38,090
play with<font color="#CCCCCC"> them so if you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to start</font>

537
00:19:36,020 --> 00:19:39,260
<font color="#E5E5E5">playing with these or maybe also start</font>

538
00:19:38,090 --> 00:19:41,629
implementing a new programming language

539
00:19:39,260 --> 00:19:43,429
by yourself just just play with it<font color="#E5E5E5"> and</font>

540
00:19:41,630 --> 00:19:45,710
<font color="#E5E5E5">let us</font><font color="#CCCCCC"> know it would</font><font color="#E5E5E5"> be would be really</font>

541
00:19:43,429 --> 00:19:49,880
<font color="#CCCCCC">cool</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know if we</font>

542
00:19:45,710 --> 00:19:52,510
have time<font color="#CCCCCC"> for</font><font color="#E5E5E5"> questions or refer them ok</font>

543
00:19:49,880 --> 00:19:52,510
sorry<font color="#CCCCCC"> about it</font>

