1
00:00:05,250 --> 00:00:11,440
so hello<font color="#E5E5E5"> everyone thank you thank you</font>

2
00:00:08,590 --> 00:00:14,639
<font color="#E5E5E5">for being here</font><font color="#CCCCCC"> I'm councilman a I'm</font>

3
00:00:11,440 --> 00:00:18,759
working for<font color="#CCCCCC"> nutrional</font><font color="#E5E5E5"> we are doing</font>

4
00:00:14,639 --> 00:00:23,110
<font color="#E5E5E5">network cards smart</font><font color="#CCCCCC"> knicks in particular</font>

5
00:00:18,760 --> 00:00:27,270
we<font color="#E5E5E5"> have a card that is able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> upload</font>

6
00:00:23,110 --> 00:00:31,780
some<font color="#E5E5E5"> ebps</font><font color="#CCCCCC"> applications so EB PF x DP</font>

7
00:00:27,270 --> 00:00:35,469
<font color="#E5E5E5">programs and this is what I am</font><font color="#CCCCCC"> about to</font>

8
00:00:31,780 --> 00:00:37,480
<font color="#E5E5E5">present</font><font color="#CCCCCC"> here today so this is rather low</font>

9
00:00:35,469 --> 00:00:38,769
level in comparison<font color="#CCCCCC"> with most of</font><font color="#E5E5E5"> the</font>

10
00:00:37,480 --> 00:00:44,519
previous<font color="#E5E5E5"> talks at least</font>

11
00:00:38,769 --> 00:00:44,519
so maybe just<font color="#E5E5E5"> before</font><font color="#CCCCCC"> starting</font>

12
00:00:59,230 --> 00:01:10,870
with<font color="#CCCCCC"> a machine</font><font color="#E5E5E5"> inside the Linux kernel</font>

13
00:01:05,010 --> 00:01:15,520
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is this was created first to filter</font>

14
00:01:10,870 --> 00:01:19,120
packets<font color="#CCCCCC"> now it's more generic than</font><font color="#E5E5E5"> that</font>

15
00:01:15,520 --> 00:01:21,520
so we have a variety of<font color="#CCCCCC"> attach points in</font>

16
00:01:19,120 --> 00:01:24,220
that little kernel for attaching<font color="#E5E5E5"> various</font>

17
00:01:21,520 --> 00:01:26,710
kind of<font color="#E5E5E5"> programs so we have TC for</font>

18
00:01:24,220 --> 00:01:29,260
traffic control where<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can get some</font>

19
00:01:26,710 --> 00:01:32,020
packets and process<font color="#E5E5E5"> them</font><font color="#CCCCCC"> XDP which is</font>

20
00:01:29,260 --> 00:01:35,560
nearly<font color="#CCCCCC"> the same thing but at the driver</font>

21
00:01:32,020 --> 00:01:37,630
level<font color="#CCCCCC"> to to get more performances</font><font color="#E5E5E5"> we</font>

22
00:01:35,560 --> 00:01:39,729
have a lot of tracing and monitoring

23
00:01:37,630 --> 00:01:42,220
applications you can attach programs to

24
00:01:39,729 --> 00:01:46,630
<font color="#CCCCCC">care probes for example not to trace</font>

25
00:01:42,220 --> 00:01:50,050
points regarding a BPF itself<font color="#E5E5E5"> the</font>

26
00:01:46,630 --> 00:01:53,229
architecture is<font color="#E5E5E5"> not too complicated</font>

27
00:01:50,050 --> 00:01:55,800
<font color="#E5E5E5">that's something close to</font><font color="#CCCCCC"> an assembly</font>

28
00:01:53,229 --> 00:01:58,860
<font color="#E5E5E5">language so you have registers and</font>

29
00:01:55,800 --> 00:02:01,570
arithmetic<font color="#CCCCCC"> and logic operations</font><font color="#E5E5E5"> and</font>

30
00:01:58,860 --> 00:02:05,550
<font color="#CCCCCC">those registers and their values so</font>

31
00:02:01,570 --> 00:02:11,109
that's<font color="#E5E5E5"> 11 64-bit registers you have a</font>

32
00:02:05,550 --> 00:02:13,690
512 bytes stack you can<font color="#CCCCCC"> read and write</font>

33
00:02:11,110 --> 00:02:16,060
<font color="#CCCCCC">data to</font><font color="#E5E5E5"> the context on which the program</font>

34
00:02:13,690 --> 00:02:18,970
is working<font color="#E5E5E5"> so for packet processing for</font>

35
00:02:16,060 --> 00:02:25,209
<font color="#CCCCCC">example you you access directly to</font><font color="#E5E5E5"> the</font>

36
00:02:18,970 --> 00:02:28,780
<font color="#E5E5E5">to the packet data and so you can you</font>

37
00:02:25,209 --> 00:02:31,540
don't have to manually write every bit

38
00:02:28,780 --> 00:02:34,540
we<font color="#E5E5E5"> have instructions in</font><font color="#CCCCCC"> a some video in</font>

39
00:02:31,540 --> 00:02:38,859
binary you<font color="#E5E5E5"> have an</font><font color="#CCCCCC"> LLVM back-end that</font>

40
00:02:34,540 --> 00:02:40,780
makes you able to<font color="#E5E5E5"> compile from</font><font color="#CCCCCC"> c into an</font>

41
00:02:38,860 --> 00:02:44,680
object<font color="#E5E5E5"> file containing</font><font color="#CCCCCC"> subjective byte</font>

42
00:02:40,780 --> 00:02:47,560
code so<font color="#E5E5E5"> that can be see mostly but can</font>

43
00:02:44,680 --> 00:02:50,590
be also<font color="#E5E5E5"> through</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> go or</font><font color="#CCCCCC"> rest or other</font>

44
00:02:47,560 --> 00:02:53,280
languages and once you have the<font color="#CCCCCC"> object</font>

45
00:02:50,590 --> 00:02:58,180
file you can inject that into the kernel

46
00:02:53,280 --> 00:03:00,780
with some user space<font color="#E5E5E5"> - such as tcpip ER</font>

47
00:02:58,180 --> 00:03:03,340
or the<font color="#E5E5E5"> ones depending</font><font color="#CCCCCC"> of your use case</font>

48
00:03:00,780 --> 00:03:05,349
and it arrives in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Condors</font><font color="#E5E5E5"> that's</font>

49
00:03:03,340 --> 00:03:07,689
<font color="#CCCCCC">something coming from user space</font><font color="#E5E5E5"> so we</font>

50
00:03:05,349 --> 00:03:09,640
want to make sure<font color="#E5E5E5"> we don't hang or crush</font>

51
00:03:07,689 --> 00:03:12,129
the kernel that's<font color="#E5E5E5"> a bit sensitive</font><font color="#CCCCCC"> we</font>

52
00:03:09,640 --> 00:03:12,640
have security issues<font color="#CCCCCC"> so we have a very</font>

53
00:03:12,129 --> 00:03:15,069
<font color="#CCCCCC">fire</font>

54
00:03:12,640 --> 00:03:18,790
<font color="#E5E5E5">tied</font><font color="#CCCCCC"> to Colonel that's supposed to check</font>

55
00:03:15,069 --> 00:03:22,510
the program<font color="#E5E5E5"> is safe and</font><font color="#CCCCCC"> secure</font><font color="#E5E5E5"> and won't</font>

56
00:03:18,790 --> 00:03:24,910
create any issue inside<font color="#CCCCCC"> yo</font><font color="#E5E5E5"> colonel so it</font>

57
00:03:22,510 --> 00:03:29,260
passes the verifier<font color="#E5E5E5"> if it's not rejected</font>

58
00:03:24,910 --> 00:03:31,180
it can be interpreted<font color="#CCCCCC"> in the color</font><font color="#E5E5E5"> for</font>

59
00:03:29,260 --> 00:03:33,070
example<font color="#CCCCCC"> each time I receive a packet on</font>

60
00:03:31,180 --> 00:03:35,410
my<font color="#CCCCCC"> interface I will run the program</font><font color="#E5E5E5"> in</font>

61
00:03:33,070 --> 00:03:38,620
<font color="#E5E5E5">the packet</font><font color="#CCCCCC"> or it can</font><font color="#E5E5E5"> be jet compiled if</font>

62
00:03:35,410 --> 00:03:42,700
I want to<font color="#CCCCCC"> so JT's just in time just in</font>

63
00:03:38,620 --> 00:03:46,480
time<font color="#CCCCCC"> compiled to get native instructions</font>

64
00:03:42,700 --> 00:03:48,780
to go<font color="#E5E5E5"> even faster it has a couple</font><font color="#CCCCCC"> of</font>

65
00:03:46,480 --> 00:03:52,810
additional<font color="#CCCCCC"> features in regard with</font>

66
00:03:48,780 --> 00:03:54,880
<font color="#CCCCCC">previously older version of BPF</font><font color="#E5E5E5"> which</font>

67
00:03:52,810 --> 00:03:58,840
was<font color="#CCCCCC"> an e4 packet version for packet</font>

68
00:03:54,880 --> 00:04:02,950
filtering so now we have maps which has

69
00:03:58,840 --> 00:04:05,680
some some pairs of values and entries

70
00:04:02,950 --> 00:04:07,209
that can be stored<font color="#E5E5E5"> in</font><font color="#CCCCCC"> particular</font><font color="#E5E5E5"> memory</font>

71
00:04:05,680 --> 00:04:10,060
and that can be shared<font color="#E5E5E5"> between</font>

72
00:04:07,209 --> 00:04:13,360
<font color="#CCCCCC">differently gift programs or</font><font color="#E5E5E5"> also</font>

73
00:04:10,060 --> 00:04:16,570
between<font color="#E5E5E5"> DPF programs and user space</font>

74
00:04:13,360 --> 00:04:18,790
programs<font color="#CCCCCC"> we have for example hashmaps</font>

75
00:04:16,570 --> 00:04:21,608
<font color="#E5E5E5">array maps in the variety</font><font color="#CCCCCC"> of other maps</font>

76
00:04:18,790 --> 00:04:24,400
<font color="#E5E5E5">for some specific use cases we have</font>

77
00:04:21,608 --> 00:04:27,719
tankers that<font color="#CCCCCC"> are some kinds of little</font>

78
00:04:24,400 --> 00:04:31,409
<font color="#CCCCCC">jumps from one program to another one</font>

79
00:04:27,720 --> 00:04:35,410
<font color="#E5E5E5">these</font><font color="#CCCCCC"> rows for chaining several programs</font>

80
00:04:31,410 --> 00:04:38,380
<font color="#E5E5E5">you can have telcos</font><font color="#CCCCCC"> and the conditions</font>

81
00:04:35,410 --> 00:04:39,970
so you can run this program<font color="#CCCCCC"> or this</font>

82
00:04:38,380 --> 00:04:42,430
<font color="#E5E5E5">program depending on a previous</font>

83
00:04:39,970 --> 00:04:45,870
condition you have helpers which<font color="#E5E5E5"> has</font>

84
00:04:42,430 --> 00:04:49,060
some functions<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> it's</font>

85
00:04:45,870 --> 00:04:51,220
white list of functions if you want that

86
00:04:49,060 --> 00:04:55,120
can be called<font color="#CCCCCC"> directly from the DPF</font>

87
00:04:51,220 --> 00:04:58,810
programs themselves<font color="#E5E5E5"> and this is do you</font>

88
00:04:55,120 --> 00:05:01,300
get the<font color="#CCCCCC"> time stamp</font><font color="#E5E5E5"> or to access</font><font color="#CCCCCC"> to the</font>

89
00:04:58,810 --> 00:05:04,030
<font color="#E5E5E5">maps from</font><font color="#CCCCCC"> the DPF programs or to get</font>

90
00:05:01,300 --> 00:05:06,760
random numbers or to grow shrink packet

91
00:05:04,030 --> 00:05:09,969
there<font color="#E5E5E5"> is a lot of helpers available in</font>

92
00:05:06,760 --> 00:05:11,039
the severity of functions that<font color="#CCCCCC"> would be</font>

93
00:05:09,970 --> 00:05:13,210
otherwise

94
00:05:11,039 --> 00:05:16,810
<font color="#E5E5E5">somewhat more difficult</font><font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> in</font>

95
00:05:13,210 --> 00:05:19,830
<font color="#CCCCCC">vpf directly so we have the surface</font><font color="#E5E5E5"> so</font>

96
00:05:16,810 --> 00:05:22,750
that's a diagram of the<font color="#CCCCCC"> PF workflow</font>

97
00:05:19,830 --> 00:05:25,690
typically I would write<font color="#CCCCCC"> my program in</font><font color="#E5E5E5"> C</font>

98
00:05:22,750 --> 00:05:26,110
source code<font color="#E5E5E5"> I would combine it with</font><font color="#CCCCCC"> LLVM</font>

99
00:05:25,690 --> 00:05:29,229
<font color="#E5E5E5">of</font>

100
00:05:26,110 --> 00:05:32,169
and inject it into the<font color="#CCCCCC"> Colonel's who say</font>

101
00:05:29,229 --> 00:05:34,810
I<font color="#E5E5E5"> want to attach my program</font><font color="#CCCCCC"> to the TC</font>

102
00:05:32,169 --> 00:05:37,568
interface I would use DC<font color="#CCCCCC"> and the command</font>

103
00:05:34,810 --> 00:05:41,139
line<font color="#E5E5E5"> to inject that program through</font><font color="#CCCCCC"> the</font>

104
00:05:37,569 --> 00:05:41,919
<font color="#CCCCCC">DPF</font><font color="#E5E5E5"> Cisco it will be checked by the</font>

105
00:05:41,139 --> 00:05:45,099
verifier

106
00:05:41,919 --> 00:05:47,710
<font color="#E5E5E5">if it passes verifications then it can</font>

107
00:05:45,099 --> 00:05:50,590
<font color="#E5E5E5">be loaded into the</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> or possibly</font>

108
00:05:47,710 --> 00:05:56,318
jet<font color="#CCCCCC"> compiled and once it's loaded I can</font>

109
00:05:50,590 --> 00:05:58,060
attach<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> four in this example TC by</font>

110
00:05:56,319 --> 00:06:03,009
using<font color="#E5E5E5"> another culture</font>

111
00:05:58,060 --> 00:06:04,840
<font color="#CCCCCC">BES code and I can</font><font color="#E5E5E5"> interact</font><font color="#CCCCCC"> with maps</font>

112
00:06:03,009 --> 00:06:08,349
<font color="#E5E5E5">possibly from user</font><font color="#CCCCCC"> space if you my</font>

113
00:06:04,840 --> 00:06:13,479
program uses<font color="#CCCCCC"> maps again with</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> PPF</font>

114
00:06:08,349 --> 00:06:19,060
<font color="#CCCCCC">Cisco</font><font color="#E5E5E5"> and so that's the basics for for</font>

115
00:06:13,479 --> 00:06:24,310
PDF<font color="#E5E5E5"> with TC and now we have</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> hook</font>

116
00:06:19,060 --> 00:06:27,520
than TC which is a driver<font color="#CCCCCC"> levels so the</font>

117
00:06:24,310 --> 00:06:31,509
idea behind<font color="#CCCCCC"> xdp for</font><font color="#E5E5E5"> express data</font><font color="#CCCCCC"> path</font>

118
00:06:27,520 --> 00:06:35,020
that we<font color="#E5E5E5"> want to get the packets as soon</font>

119
00:06:31,509 --> 00:06:37,990
as possible not<font color="#CCCCCC"> to send them to use a</font>

120
00:06:35,020 --> 00:06:40,930
space<font color="#E5E5E5"> such</font><font color="#CCCCCC"> as with the PDK</font><font color="#E5E5E5"> or other user</font>

121
00:06:37,990 --> 00:06:44,050
space by<font color="#CCCCCC"> candle bypass solutions we want</font>

122
00:06:40,930 --> 00:06:46,419
to trust them<font color="#E5E5E5"> possibly in cooperation</font>

123
00:06:44,050 --> 00:06:51,879
with<font color="#E5E5E5"> the stack but before they</font><font color="#CCCCCC"> reach</font>

124
00:06:46,419 --> 00:06:54,969
really the kernel stack so the idea is

125
00:06:51,879 --> 00:06:58,089
to to hook inside the driver and to run

126
00:06:54,969 --> 00:07:00,219
your<font color="#E5E5E5"> PF program at this point so it's</font>

127
00:06:58,089 --> 00:07:04,539
something<font color="#E5E5E5"> quite recent it's been the</font>

128
00:07:00,219 --> 00:07:10,089
<font color="#CCCCCC">Kerner since version 4.8 a couple of</font>

129
00:07:04,539 --> 00:07:12,150
years<font color="#E5E5E5"> ago and so</font><font color="#CCCCCC"> it's fast data plane</font>

130
00:07:10,089 --> 00:07:14,589
solution which is part<font color="#E5E5E5"> of the kernel</font>

131
00:07:12,150 --> 00:07:19,349
<font color="#E5E5E5">which has been developed</font><font color="#CCCCCC"> to improve the</font>

132
00:07:14,589 --> 00:07:23,500
kernel performances for networking<font color="#CCCCCC"> if I</font>

133
00:07:19,349 --> 00:07:26,169
take another<font color="#E5E5E5"> diagram</font><font color="#CCCCCC"> I still here in the</font>

134
00:07:23,500 --> 00:07:29,740
corner<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have my net devices here is</font>

135
00:07:26,169 --> 00:07:32,198
<font color="#E5E5E5">Linux</font><font color="#CCCCCC"> Network stack with for our</font>

136
00:07:29,740 --> 00:07:35,050
previous example TC ingress this<font color="#E5E5E5"> egress</font>

137
00:07:32,199 --> 00:07:36,789
interfaces<font color="#CCCCCC"> circuits on which</font><font color="#E5E5E5"> I can I</font>

138
00:07:35,050 --> 00:07:40,089
could<font color="#E5E5E5"> also attach</font><font color="#CCCCCC"> VP of programs but</font>

139
00:07:36,789 --> 00:07:42,190
here I focus on<font color="#CCCCCC"> xdp so typically what we</font>

140
00:07:40,089 --> 00:07:45,819
would<font color="#E5E5E5"> have with the PDK would be sending</font>

141
00:07:42,190 --> 00:07:47,860
<font color="#CCCCCC">all the packets</font><font color="#E5E5E5"> to use a space process</font>

142
00:07:45,819 --> 00:07:52,120
them in user space and then back<font color="#E5E5E5"> to the</font>

143
00:07:47,860 --> 00:07:55,990
interface<font color="#CCCCCC"> XDP is not the same</font><font color="#E5E5E5"> we have</font>

144
00:07:52,120 --> 00:07:58,209
everything in the kernel<font color="#E5E5E5"> so I did my</font>

145
00:07:55,990 --> 00:08:01,569
packet before<font color="#E5E5E5"> reaching</font><font color="#CCCCCC"> so general stack</font>

146
00:07:58,209 --> 00:08:05,080
<font color="#E5E5E5">and I run my program</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> process the</font>

147
00:08:01,569 --> 00:08:08,229
packet I can have several return values

148
00:08:05,080 --> 00:08:10,539
from the<font color="#CCCCCC"> DPF programs that will be</font>

149
00:08:08,229 --> 00:08:13,409
<font color="#CCCCCC">interpreted for example to drop the</font>

150
00:08:10,539 --> 00:08:16,750
program to send<font color="#E5E5E5"> it back</font><font color="#CCCCCC"> to the same</font>

151
00:08:13,409 --> 00:08:19,630
interface<font color="#E5E5E5"> after</font><font color="#CCCCCC"> editing for example if</font><font color="#E5E5E5"> I</font>

152
00:08:16,750 --> 00:08:21,370
want to<font color="#E5E5E5"> just add an encapsulation</font><font color="#CCCCCC"> edit</font>

153
00:08:19,630 --> 00:08:24,610
my packet and send it back<font color="#CCCCCC"> to the same</font>

154
00:08:21,370 --> 00:08:30,550
port<font color="#CCCCCC"> I can do that I can also redirect</font>

155
00:08:24,610 --> 00:08:33,699
it<font color="#CCCCCC"> to any other net device or forwards</font>

156
00:08:30,550 --> 00:08:36,969
<font color="#CCCCCC">it to the stack if I want</font><font color="#E5E5E5"> to have some</font>

157
00:08:33,698 --> 00:08:41,098
more complex processing the idea is not

158
00:08:36,969 --> 00:08:43,839
to make things too difficult to make

159
00:08:41,099 --> 00:08:46,449
<font color="#E5E5E5">complex processing steps with</font><font color="#CCCCCC"> HTTPS</font>

160
00:08:43,839 --> 00:08:49,810
rather to try something fast for the

161
00:08:46,449 --> 00:08:51,310
simplest<font color="#E5E5E5"> user use cases and otherwise I</font>

162
00:08:49,810 --> 00:08:54,160
will send<font color="#E5E5E5"> my packets to the network</font>

163
00:08:51,310 --> 00:08:56,410
stack<font color="#CCCCCC"> instead</font><font color="#E5E5E5"> so I can still benefit</font>

164
00:08:54,160 --> 00:08:59,680
from<font color="#E5E5E5"> everything that's available from</font>

165
00:08:56,410 --> 00:09:03,189
the Linux kernel stack so that's really

166
00:08:59,680 --> 00:09:06,699
a way to<font color="#E5E5E5"> implement something fast inside</font>

167
00:09:03,190 --> 00:09:10,480
the<font color="#CCCCCC"> kernel so what do we</font><font color="#E5E5E5"> actually use</font>

168
00:09:06,699 --> 00:09:12,939
<font color="#CCCCCC">XDP for the main use cases would be a</font>

169
00:09:10,480 --> 00:09:17,020
lot balancing and protection against

170
00:09:12,940 --> 00:09:18,089
<font color="#E5E5E5">denial of service distributed denial of</font>

171
00:09:17,020 --> 00:09:21,310
service attacks

172
00:09:18,089 --> 00:09:24,899
so mostly Facebook has been presenting

173
00:09:21,310 --> 00:09:27,939
some stuff about these these use cases

174
00:09:24,899 --> 00:09:31,329
some some<font color="#E5E5E5"> other applications including</font>

175
00:09:27,940 --> 00:09:34,390
distributed firewalls<font color="#E5E5E5"> and there are a</font>

176
00:09:31,329 --> 00:09:38,109
<font color="#E5E5E5">lot more of use cases that are maybe not</font>

177
00:09:34,390 --> 00:09:41,170
<font color="#CCCCCC">as much deployed but</font><font color="#E5E5E5"> very interesting</font><font color="#CCCCCC"> -</font>

178
00:09:38,110 --> 00:09:44,400
for<font color="#CCCCCC"> example there is packet</font><font color="#E5E5E5"> capture on</font>

179
00:09:41,170 --> 00:09:50,170
sericata that is starting<font color="#E5E5E5"> to use</font>

180
00:09:44,400 --> 00:09:52,240
<font color="#CCCCCC">XDP</font><font color="#E5E5E5"> and latest versions for those who</font>

181
00:09:50,170 --> 00:09:54,699
were here<font color="#CCCCCC"> last year and</font>

182
00:09:52,240 --> 00:09:58,240
attended to<font color="#CCCCCC"> my presentation I was</font>

183
00:09:54,700 --> 00:10:01,029
<font color="#E5E5E5">speaking about</font><font color="#CCCCCC"> stateful processing for</font>

184
00:09:58,240 --> 00:10:03,160
<font color="#CCCCCC">packets</font><font color="#E5E5E5"> with the</font><font color="#CCCCCC"> Biba research project</font>

185
00:10:01,029 --> 00:10:07,839
and it was<font color="#CCCCCC"> also based on EBP I've</font>

186
00:10:03,160 --> 00:10:13,230
already<font color="#E5E5E5"> seen</font><font color="#CCCCCC"> iam of</font><font color="#E5E5E5"> pseudos interesting</font>

187
00:10:07,839 --> 00:10:18,220
stuff for to ensuring the<font color="#E5E5E5"> security of</font>

188
00:10:13,230 --> 00:10:21,339
Linux containers so we do have<font color="#E5E5E5"> a number</font>

189
00:10:18,220 --> 00:10:23,560
of interesting<font color="#E5E5E5"> use cases for BPF it's</font>

190
00:10:21,339 --> 00:10:27,160
already deployed it's available in Linux

191
00:10:23,560 --> 00:10:30,010
<font color="#E5E5E5">and then what we are trying</font><font color="#CCCCCC"> to do from</font>

192
00:10:27,160 --> 00:10:33,910
<font color="#CCCCCC">here is to get even more performances</font>

193
00:10:30,010 --> 00:10:38,140
and to send this<font color="#E5E5E5"> VP</font><font color="#CCCCCC"> of programs</font><font color="#E5E5E5"> to the</font>

194
00:10:33,910 --> 00:10:42,420
device<font color="#E5E5E5"> itself so why do</font><font color="#CCCCCC"> we want to</font>

195
00:10:38,140 --> 00:10:42,420
<font color="#CCCCCC">offload</font><font color="#E5E5E5"> we want to</font><font color="#CCCCCC"> offload</font><font color="#E5E5E5"> because</font>

196
00:10:45,699 --> 00:10:49,479
<font color="#E5E5E5">target for float it's pretty much</font>

197
00:10:48,459 --> 00:10:52,209
self-contained

198
00:10:49,480 --> 00:10:56,230
it's a<font color="#E5E5E5"> program running</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> its own once</font>

199
00:10:52,209 --> 00:11:01,089
it's compiled<font color="#E5E5E5"> it's something that</font>

200
00:10:56,230 --> 00:11:05,589
performant<font color="#CCCCCC"> it goes fast and if we want</font>

201
00:11:01,089 --> 00:11:09,790
<font color="#CCCCCC">to go even</font><font color="#E5E5E5"> faster</font><font color="#CCCCCC"> and to take</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of</font>

202
00:11:05,589 --> 00:11:12,279
the load off CPUs from the<font color="#E5E5E5"> hosts</font><font color="#CCCCCC"> the</font>

203
00:11:09,790 --> 00:11:14,079
only solution we have left is to run the

204
00:11:12,279 --> 00:11:15,519
programs on the hardware<font color="#E5E5E5"> in the end so</font>

205
00:11:14,079 --> 00:11:20,349
that's what<font color="#CCCCCC"> we're trying to do at</font>

206
00:11:15,519 --> 00:11:22,839
Nationals so we also want<font color="#E5E5E5"> you to have</font>

207
00:11:20,350 --> 00:11:25,799
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> works with Linux with the</font>

208
00:11:22,839 --> 00:11:29,350
kernel we don't want to have a

209
00:11:25,799 --> 00:11:31,899
proprietary language<font color="#E5E5E5"> to perform</font>

210
00:11:29,350 --> 00:11:35,169
<font color="#CCCCCC">offloaded applications and your cards</font><font color="#E5E5E5"> so</font>

211
00:11:31,899 --> 00:11:38,109
we are using vp f<font color="#CCCCCC"> @</font><font color="#E5E5E5"> x DP so how does</font>

212
00:11:35,169 --> 00:11:40,239
<font color="#E5E5E5">that work first if you want to upload</font>

213
00:11:38,109 --> 00:11:44,079
you have to get the correct architecture

214
00:11:40,239 --> 00:11:49,179
<font color="#E5E5E5">you must have a card that's able to to</font>

215
00:11:44,079 --> 00:11:52,209
offload BPF so this is a presentation<font color="#CCCCCC"> a</font>

216
00:11:49,179 --> 00:11:55,389
simplified presentation of course of the

217
00:11:52,209 --> 00:11:58,268
metronome<font color="#CCCCCC"> and FP card you have a nick</font>

218
00:11:55,389 --> 00:12:01,419
you have a chip<font color="#E5E5E5"> and that Nick</font><font color="#CCCCCC"> you have</font>

219
00:11:58,269 --> 00:12:06,069
six islands per chip<font color="#CCCCCC"> each of these</font>

220
00:12:01,419 --> 00:12:09,730
islands<font color="#E5E5E5"> for BPF uses ten calls and on</font>

221
00:12:06,069 --> 00:12:12,029
<font color="#CCCCCC">each call we have four fates are those</font>

222
00:12:09,730 --> 00:12:16,149
<font color="#E5E5E5">files we have</font><font color="#CCCCCC"> general-purpose</font><font color="#E5E5E5"> registers</font>

223
00:12:12,029 --> 00:12:21,100
<font color="#CCCCCC">we have also local</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> one kilobytes</font>

224
00:12:16,149 --> 00:12:23,439
we have other other areas of memories

225
00:12:21,100 --> 00:12:26,799
and the islands or the<font color="#E5E5E5"> cheapest on it</font>

226
00:12:23,439 --> 00:12:29,379
and it so happens that<font color="#CCCCCC"> we are able</font><font color="#E5E5E5"> with</font>

227
00:12:26,799 --> 00:12:32,499
this architecture<font color="#E5E5E5"> you map the main</font>

228
00:12:29,379 --> 00:12:34,839
components of a<font color="#CCCCCC"> DPF programs to the</font>

229
00:12:32,499 --> 00:12:38,199
components of the<font color="#E5E5E5"> Nick so for example we</font>

230
00:12:34,839 --> 00:12:41,649
have<font color="#E5E5E5"> our</font><font color="#CCCCCC"> eleven registers used by</font><font color="#E5E5E5"> BPF</font>

231
00:12:38,199 --> 00:12:47,889
that we can map to<font color="#E5E5E5"> the general-purpose</font>

232
00:12:41,649 --> 00:12:49,779
registers<font color="#E5E5E5"> in the cost</font><font color="#CCCCCC"> I think we have</font><font color="#E5E5E5"> 32</font>

233
00:12:47,889 --> 00:12:53,139
such registers so that's enough<font color="#CCCCCC"> for the</font>

234
00:12:49,779 --> 00:12:56,499
<font color="#E5E5E5">11 from BPA if we have the stack that</font><font color="#CCCCCC"> is</font>

235
00:12:53,139 --> 00:12:59,079
small enough<font color="#E5E5E5"> for BPF to hold in the</font>

236
00:12:56,499 --> 00:13:02,759
local memory<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> thread</font><font color="#E5E5E5"> of the calls</font>

237
00:12:59,079 --> 00:13:06,339
and we<font color="#E5E5E5"> have the map that we can store</font>

238
00:13:02,759 --> 00:13:09,489
<font color="#CCCCCC">underneath with there's some subtlety</font>

239
00:13:06,339 --> 00:13:12,429
here we're also trying to to<font color="#E5E5E5"> cache some</font>

240
00:13:09,489 --> 00:13:14,709
entries of the map into other areas<font color="#CCCCCC"> in</font>

241
00:13:12,429 --> 00:13:17,829
<font color="#CCCCCC">particular and the CGM here</font><font color="#E5E5E5"> but</font>

242
00:13:14,709 --> 00:13:21,189
<font color="#E5E5E5">basically it's too small</font><font color="#CCCCCC"> to hold all</font><font color="#E5E5E5"> the</font>

243
00:13:17,829 --> 00:13:24,128
<font color="#CCCCCC">maps so we are trying to to take as much</font>

244
00:13:21,189 --> 00:13:27,608
as<font color="#E5E5E5"> you can closer to the calls otherwise</font>

245
00:13:24,129 --> 00:13:32,230
it's in DRAM underneath so we have this

246
00:13:27,609 --> 00:13:35,639
architecture we<font color="#CCCCCC"> also have to be sure</font>

247
00:13:32,230 --> 00:13:40,389
<font color="#E5E5E5">that the processors are able to run BPF</font>

248
00:13:35,639 --> 00:13:43,089
<font color="#E5E5E5">so what happens in the none of route</font>

249
00:13:40,389 --> 00:13:47,619
case is that<font color="#CCCCCC"> BPF programs can be JIT</font>

250
00:13:43,089 --> 00:13:50,109
compiled in the<font color="#E5E5E5"> when we</font><font color="#CCCCCC"> are offloading</font>

251
00:13:47,619 --> 00:13:54,100
<font color="#CCCCCC">we're doing the same we have</font><font color="#E5E5E5"> our own JIT</font>

252
00:13:50,109 --> 00:13:56,799
compiler which is in our drivers so<font color="#E5E5E5"> we</font>

253
00:13:54,100 --> 00:13:59,019
are somehow<font color="#CCCCCC"> cutting our compiler to to</font>

254
00:13:56,799 --> 00:14:02,290
transform the<font color="#CCCCCC"> EB clear</font><font color="#E5E5E5"> bytecode into</font>

255
00:13:59,019 --> 00:14:04,119
native instructions for the card<font color="#E5E5E5"> which</font>

256
00:14:02,290 --> 00:14:08,160
means<font color="#E5E5E5"> that we also have to make</font><font color="#CCCCCC"> sure</font>

257
00:14:04,119 --> 00:14:12,879
<font color="#CCCCCC">that it can be run on 32-bit registers</font>

258
00:14:08,160 --> 00:14:16,209
<font color="#E5E5E5">EBP by default is 64-bit registers we</font>

259
00:14:12,879 --> 00:14:21,129
have processes<font color="#E5E5E5"> unable to</font><font color="#CCCCCC"> use 32-bit</font>

260
00:14:16,209 --> 00:14:27,160
registers so happily we are<font color="#E5E5E5"> able to do</font>

261
00:14:21,129 --> 00:14:31,149
to you to you to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> DPF in this way</font><font color="#E5E5E5"> by</font>

262
00:14:27,160 --> 00:14:33,990
<font color="#CCCCCC">I</font><font color="#E5E5E5"> telling it</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> two-bit operations</font>

263
00:14:31,149 --> 00:14:36,819
and we also have a number of

264
00:14:33,990 --> 00:14:40,569
<font color="#E5E5E5">optimizations in</font><font color="#CCCCCC"> our JIT compiler in</font>

265
00:14:36,819 --> 00:14:43,209
order to to improve the the<font color="#CCCCCC"> bytecode</font>

266
00:14:40,569 --> 00:14:47,560
<font color="#E5E5E5">that we will want to save some</font>

267
00:14:43,209 --> 00:14:49,750
instructions where we can to go faster

268
00:14:47,560 --> 00:14:51,550
on some specific sequences of

269
00:14:49,750 --> 00:14:54,459
instructions and so on<font color="#E5E5E5"> you know that</font>

270
00:14:51,550 --> 00:14:57,699
should be<font color="#CCCCCC"> as fast as</font><font color="#E5E5E5"> possible so</font><font color="#CCCCCC"> we have</font>

271
00:14:54,459 --> 00:15:00,518
our<font color="#E5E5E5"> texture now we must make</font><font color="#CCCCCC"> sure so</font>

272
00:14:57,699 --> 00:15:03,269
that<font color="#E5E5E5"> the kernel is able to pass the</font>

273
00:15:00,519 --> 00:15:06,910
program and the relevant metadata to the

274
00:15:03,269 --> 00:15:08,399
to the<font color="#CCCCCC"> card and for</font><font color="#E5E5E5"> this we had a lot</font><font color="#CCCCCC"> of</font>

275
00:15:06,910 --> 00:15:14,050
work to do

276
00:15:08,399 --> 00:15:16,540
on<font color="#CCCCCC"> Linux itself so this diagram is</font>

277
00:15:14,050 --> 00:15:18,969
nearly the<font color="#CCCCCC"> same at</font><font color="#E5E5E5"> the one I</font><font color="#CCCCCC"> showed</font><font color="#E5E5E5"> at</font>

278
00:15:16,540 --> 00:15:21,670
the<font color="#CCCCCC"> start of</font><font color="#E5E5E5"> the presentation we still</font>

279
00:15:18,970 --> 00:15:24,490
have a user program injecting a<font color="#CCCCCC"> BPF</font>

280
00:15:21,670 --> 00:15:25,089
<font color="#E5E5E5">program through the</font><font color="#CCCCCC"> BBF Cisco stands a</font>

281
00:15:24,490 --> 00:15:30,310
<font color="#E5E5E5">verifier</font>

282
00:15:25,089 --> 00:15:33,550
then then the program which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> attached</font>

283
00:15:30,310 --> 00:15:36,130
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> possibly with</font><font color="#CCCCCC"> the JIT</font>

284
00:15:33,550 --> 00:15:40,269
compiler<font color="#E5E5E5"> now if we want</font><font color="#CCCCCC"> to upload</font>

285
00:15:36,130 --> 00:15:42,519
<font color="#E5E5E5">programs</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> some additional work</font>

286
00:15:40,269 --> 00:15:44,339
to<font color="#E5E5E5"> perform at the driver level in</font>

287
00:15:42,519 --> 00:15:48,519
particular<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have a number of</font>

288
00:15:44,339 --> 00:15:53,649
operations here that are exposed<font color="#CCCCCC"> by the</font>

289
00:15:48,519 --> 00:15:56,319
driver so for example<font color="#E5E5E5"> to attach programs</font>

290
00:15:53,649 --> 00:15:58,569
to prepare the<font color="#E5E5E5"> verifier and so on and</font>

291
00:15:56,319 --> 00:16:02,069
also to<font color="#E5E5E5"> make sure that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> killer knows</font>

292
00:15:58,569 --> 00:16:06,849
that this program is<font color="#CCCCCC"> of ready so</font>

293
00:16:02,069 --> 00:16:10,029
previously sorry<font color="#E5E5E5"> previously we would</font>

294
00:16:06,850 --> 00:16:13,420
send to<font color="#E5E5E5"> the BPF Cisco the list of</font>

295
00:16:10,029 --> 00:16:16,990
instructions from that<font color="#E5E5E5"> program its</font>

296
00:16:13,420 --> 00:16:19,180
length<font color="#E5E5E5"> its type is it TC classifier is</font>

297
00:16:16,990 --> 00:16:24,309
it<font color="#CCCCCC"> an</font><font color="#E5E5E5"> x</font><font color="#CCCCCC"> DP program is it something else</font>

298
00:16:19,180 --> 00:16:28,120
and now we have a new<font color="#E5E5E5"> value that's added</font>

299
00:16:24,309 --> 00:16:30,459
for float which is if' index so the

300
00:16:28,120 --> 00:16:33,220
index<font color="#E5E5E5"> of the interface on which</font><font color="#CCCCCC"> we want</font>

301
00:16:30,459 --> 00:16:35,489
<font color="#CCCCCC">to offload</font><font color="#E5E5E5"> our program and by using this</font>

302
00:16:33,220 --> 00:16:37,569
<font color="#E5E5E5">values the killer will be able to</font>

303
00:16:35,490 --> 00:16:39,459
understand that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> program is to be</font>

304
00:16:37,569 --> 00:16:43,959
<font color="#E5E5E5">offloaded and to</font><font color="#CCCCCC"> tree</font>

305
00:16:39,459 --> 00:16:47,498
<font color="#E5E5E5">so we have those operations made</font>

306
00:16:43,959 --> 00:16:49,899
available with the<font color="#CCCCCC"> BPF and</font><font color="#E5E5E5"> do and what</font>

307
00:16:47,499 --> 00:16:53,079
happens<font color="#CCCCCC"> is that when the program is</font>

308
00:16:49,899 --> 00:16:56,999
uploaded<font color="#E5E5E5"> so</font><font color="#CCCCCC"> Colonel will first try</font><font color="#E5E5E5"> to</font>

309
00:16:53,079 --> 00:17:01,420
<font color="#CCCCCC">find for which device from the iaf index</font>

310
00:16:56,999 --> 00:17:03,999
<font color="#E5E5E5">sub program is to be offloaded</font><font color="#CCCCCC"> and to</font>

311
00:17:01,420 --> 00:17:07,178
get the list of<font color="#CCCCCC"> those operations</font><font color="#E5E5E5"> and</font>

312
00:17:03,999 --> 00:17:09,419
then each time the BPF NGO is called

313
00:17:07,179 --> 00:17:13,299
after<font color="#CCCCCC"> that we are able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> call directly</font>

314
00:17:09,419 --> 00:17:16,500
<font color="#E5E5E5">the callbacks from the driver to process</font>

315
00:17:13,299 --> 00:17:19,148
our<font color="#E5E5E5"> BPF</font><font color="#CCCCCC"> byte code so for example before</font>

316
00:17:16,500 --> 00:17:21,970
<font color="#E5E5E5">starting the</font><font color="#CCCCCC"> verifier</font><font color="#E5E5E5"> itself we will be</font>

317
00:17:19,148 --> 00:17:24,398
able<font color="#E5E5E5"> to call</font><font color="#CCCCCC"> a function should</font><font color="#E5E5E5"> three</font>

318
00:17:21,970 --> 00:17:28,000
<font color="#E5E5E5">plans of verifying side from the driver</font>

319
00:17:24,398 --> 00:17:31,418
we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> also checked made at the driver</font>

320
00:17:28,000 --> 00:17:33,250
level to<font color="#E5E5E5"> ensure that we can upload</font><font color="#CCCCCC"> that</font>

321
00:17:31,419 --> 00:17:36,760
program and we<font color="#E5E5E5"> won't have security</font>

322
00:17:33,250 --> 00:17:39,789
<font color="#E5E5E5">issues by uploading it so for example we</font>

323
00:17:36,760 --> 00:17:42,520
could be susceptible<font color="#E5E5E5"> to reject programs</font>

324
00:17:39,789 --> 00:17:44,350
that try to<font color="#E5E5E5"> use some instructions we</font>

325
00:17:42,520 --> 00:17:46,840
don't<font color="#CCCCCC"> support some brief instructions</font><font color="#E5E5E5"> we</font>

326
00:17:44,350 --> 00:17:51,699
don't<font color="#E5E5E5"> support or some helpers that</font><font color="#CCCCCC"> we</font>

327
00:17:46,840 --> 00:17:57,389
want support and this<font color="#CCCCCC"> is all done by</font>

328
00:17:51,700 --> 00:18:00,760
this<font color="#E5E5E5"> callback that's also after the</font>

329
00:17:57,390 --> 00:18:04,659
<font color="#CCCCCC">preparation of the verifier</font><font color="#E5E5E5"> and which is</font>

330
00:18:00,760 --> 00:18:06,340
called each time<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> file your checks</font>

331
00:18:04,659 --> 00:18:08,830
and instruction so<font color="#CCCCCC"> we have a single</font>

332
00:18:06,340 --> 00:18:11,709
<font color="#E5E5E5">callback to make sure that every</font>

333
00:18:08,830 --> 00:18:13,928
instruction is<font color="#CCCCCC"> ok it's good for the</font>

334
00:18:11,710 --> 00:18:17,200
kernel verifier but we want to make<font color="#CCCCCC"> sure</font>

335
00:18:13,929 --> 00:18:19,120
that also<font color="#E5E5E5"> it's good for the cow and this</font>

336
00:18:17,200 --> 00:18:22,210
is something<font color="#CCCCCC"> we can do</font><font color="#E5E5E5"> with the with</font>

337
00:18:19,120 --> 00:18:23,949
<font color="#E5E5E5">this callback we can also call out</font>

338
00:18:22,210 --> 00:18:25,659
translation<font color="#E5E5E5"> function from the JIT</font>

339
00:18:23,950 --> 00:18:28,210
compiler so that's<font color="#CCCCCC"> actually not true</font>

340
00:18:25,659 --> 00:18:29,830
<font color="#CCCCCC">demo so JIT compiler from the kernel</font>

341
00:18:28,210 --> 00:18:32,020
anymore which is<font color="#E5E5E5"> called we call instead</font>

342
00:18:29,830 --> 00:18:35,168
directly<font color="#E5E5E5"> is a JIT from our driver in</font>

343
00:18:32,020 --> 00:18:38,860
<font color="#E5E5E5">combining</font><font color="#CCCCCC"> two to NFP instructions and if</font>

344
00:18:35,169 --> 00:18:41,740
P is the architecture<font color="#CCCCCC"> of our car</font><font color="#E5E5E5"> and so</font>

345
00:18:38,860 --> 00:18:44,979
on<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have a list</font><font color="#E5E5E5"> of callbacks here</font>

346
00:18:41,740 --> 00:18:48,490
that are exposed through<font color="#E5E5E5"> this NGO</font>

347
00:18:44,980 --> 00:18:51,000
<font color="#CCCCCC">Network device operation</font><font color="#E5E5E5"> and all of this</font>

348
00:18:48,490 --> 00:18:53,260
<font color="#E5E5E5">makes it</font>

349
00:18:51,000 --> 00:18:55,929
<font color="#CCCCCC">choo-choo</font><font color="#E5E5E5"> off-road to get the programs</font>

350
00:18:53,260 --> 00:19:01,210
<font color="#CCCCCC">into correct shape to run them</font><font color="#E5E5E5"> under</font>

351
00:18:55,929 --> 00:19:04,150
card<font color="#E5E5E5"> rather easy so once we have our</font>

352
00:19:01,210 --> 00:19:10,260
program<font color="#E5E5E5"> checked and verified and sheet</font>

353
00:19:04,150 --> 00:19:14,620
compiled<font color="#E5E5E5"> we can call TC again so by</font>

354
00:19:10,260 --> 00:19:16,660
cutting through the BPF<font color="#CCCCCC"> Sisko at the TC</font>

355
00:19:14,620 --> 00:19:19,330
framework in the<font color="#E5E5E5"> canner</font><font color="#CCCCCC"> we'll be able to</font>

356
00:19:16,660 --> 00:19:22,330
get this offloaded object which is<font color="#E5E5E5"> the</font>

357
00:19:19,330 --> 00:19:26,199
same<font color="#E5E5E5"> thing and</font><font color="#CCCCCC"> to attach</font><font color="#E5E5E5"> it for example</font>

358
00:19:22,330 --> 00:19:29,379
<font color="#E5E5E5">to</font><font color="#CCCCCC"> this interface with the NGO setup TC</font>

359
00:19:26,200 --> 00:19:31,270
or<font color="#E5E5E5"> if we don't want to see program if</font>

360
00:19:29,380 --> 00:19:33,970
you<font color="#E5E5E5"> want an</font><font color="#CCCCCC"> x DP program instead</font><font color="#E5E5E5"> that</font>

361
00:19:31,270 --> 00:19:36,580
would be IP<font color="#CCCCCC"> command and</font><font color="#E5E5E5"> that will be</font>

362
00:19:33,970 --> 00:19:41,880
this<font color="#E5E5E5"> and you again that would call the x</font>

363
00:19:36,580 --> 00:19:46,600
<font color="#E5E5E5">DP attached function so just some</font>

364
00:19:41,880 --> 00:19:48,850
additional<font color="#E5E5E5"> remarks on this aspect so the</font>

365
00:19:46,600 --> 00:19:51,270
<font color="#CCCCCC">way fair use is</font><font color="#E5E5E5"> you come back to check</font>

366
00:19:48,850 --> 00:19:54,490
every instruction<font color="#CCCCCC"> I've said that already</font>

367
00:19:51,270 --> 00:20:02,080
<font color="#CCCCCC">so driver has also</font><font color="#E5E5E5"> its</font><font color="#CCCCCC"> own error</font>

368
00:19:54,490 --> 00:20:04,630
messages<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> improve the debugging</font><font color="#E5E5E5"> by</font>

369
00:20:02,080 --> 00:20:07,389
using<font color="#E5E5E5"> for examples before log very far</font>

370
00:20:04,630 --> 00:20:10,299
<font color="#CCCCCC">from the kingdom to retrieve errors at</font>

371
00:20:07,390 --> 00:20:12,580
verification time or we<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> other</font>

372
00:20:10,299 --> 00:20:16,090
mechanisms such as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> clicking</font><font color="#CCCCCC"> Stanley</font>

373
00:20:12,580 --> 00:20:17,980
extended<font color="#CCCCCC"> access</font><font color="#E5E5E5"> re to get informations</font>

374
00:20:16,090 --> 00:20:20,918
in the<font color="#E5E5E5"> console rather than in candle</font>

375
00:20:17,980 --> 00:20:26,070
logs when we have errors from<font color="#CCCCCC"> the</font>

376
00:20:20,919 --> 00:20:30,190
<font color="#E5E5E5">drivers so that's just remarks so anyway</font>

377
00:20:26,070 --> 00:20:33,129
we<font color="#CCCCCC"> have our architecture we have a float</font>

378
00:20:30,190 --> 00:20:37,900
<font color="#E5E5E5">supported in the</font><font color="#CCCCCC"> kernel now</font><font color="#E5E5E5"> and we still</font>

379
00:20:33,130 --> 00:20:40,809
<font color="#CCCCCC">have to to update the the tools that we</font>

380
00:20:37,900 --> 00:20:44,320
<font color="#E5E5E5">need to that</font><font color="#CCCCCC"> we need to use to work with</font>

381
00:20:40,809 --> 00:20:46,980
<font color="#CCCCCC">PPF so for example I'm using TC for</font>

382
00:20:44,320 --> 00:20:52,000
<font color="#E5E5E5">reading programs</font><font color="#CCCCCC"> I'm Judy and</font><font color="#E5E5E5"> using IP</font>

383
00:20:46,980 --> 00:20:55,540
comment for my<font color="#E5E5E5"> table to package to to</font>

384
00:20:52,000 --> 00:20:59,140
attach<font color="#CCCCCC"> xdp programs by</font><font color="#E5E5E5"> default those</font>

385
00:20:55,540 --> 00:21:01,809
tools are not supporting<font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> floods</font>

386
00:20:59,140 --> 00:21:02,670
so what we had<font color="#E5E5E5"> to do was to patch them</font>

387
00:21:01,809 --> 00:21:05,500
<font color="#E5E5E5">to</font>

388
00:21:02,670 --> 00:21:09,220
to update the syntax of<font color="#E5E5E5"> those commands</font>

389
00:21:05,500 --> 00:21:11,020
to tell them that here<font color="#E5E5E5"> look I want to</font>

390
00:21:09,220 --> 00:21:13,330
<font color="#E5E5E5">upload this program to the</font><font color="#CCCCCC"> NIC</font>

391
00:21:11,020 --> 00:21:15,520
so I want you<font color="#E5E5E5"> to understand that I am</font>

392
00:21:13,330 --> 00:21:17,590
<font color="#E5E5E5">trying to offload and I want you to</font>

393
00:21:15,520 --> 00:21:20,980
understand that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are supposed to pass</font>

394
00:21:17,590 --> 00:21:23,409
the<font color="#CCCCCC"> indexers interface to the</font><font color="#E5E5E5"> Kilner so</font>

395
00:21:20,980 --> 00:21:26,620
this is some work<font color="#CCCCCC"> that we have done</font>

396
00:21:23,410 --> 00:21:32,010
already<font color="#CCCCCC"> so the the</font><font color="#E5E5E5"> latest versions are</font>

397
00:21:26,620 --> 00:21:36,340
<font color="#CCCCCC">patch</font><font color="#E5E5E5"> we also have to to</font><font color="#CCCCCC"> make them ask</font>

398
00:21:32,010 --> 00:21:39,010
to the<font color="#E5E5E5"> channel to create</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> maps the</font><font color="#CCCCCC"> bf</font>

399
00:21:36,340 --> 00:21:42,879
maps on the device<font color="#E5E5E5"> itself for flooding</font>

400
00:21:39,010 --> 00:21:46,150
<font color="#CCCCCC">Maps programs using</font><font color="#E5E5E5"> maps and we also had</font>

401
00:21:42,880 --> 00:21:49,270
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> or to</font><font color="#CCCCCC"> update</font><font color="#E5E5E5"> some other tools</font>

402
00:21:46,150 --> 00:21:52,680
used with<font color="#CCCCCC"> PPF for</font><font color="#E5E5E5"> example BPF</font><font color="#CCCCCC"> tooth</font>

403
00:21:49,270 --> 00:21:55,510
which is now in<font color="#E5E5E5"> the kernel tree is a</font>

404
00:21:52,680 --> 00:21:56,500
simple<font color="#CCCCCC"> truth that's</font><font color="#E5E5E5"> able to list load</font>

405
00:21:55,510 --> 00:22:00,330
<font color="#CCCCCC">pin dump</font>

406
00:21:56,500 --> 00:22:03,760
instructions for GT they are not rigid

407
00:22:00,330 --> 00:22:04,679
<font color="#E5E5E5">bqf programs</font><font color="#CCCCCC"> it works also with mat so</font>

408
00:22:03,760 --> 00:22:07,390
we'll see groups

409
00:22:04,680 --> 00:22:11,140
that's something with the<font color="#E5E5E5"> block we also</font>

410
00:22:07,390 --> 00:22:16,600
<font color="#CCCCCC">patch a DMC</font><font color="#E5E5E5"> in order to be able to</font>

411
00:22:11,140 --> 00:22:19,750
<font color="#E5E5E5">compile from a human friendly form of a</font>

412
00:22:16,600 --> 00:22:22,240
<font color="#E5E5E5">BPF assembly directly into object files</font>

413
00:22:19,750 --> 00:22:26,730
and this<font color="#E5E5E5"> is in particular this</font><font color="#CCCCCC"> is very</font>

414
00:22:22,240 --> 00:22:29,680
useful to compile<font color="#E5E5E5"> objectified from</font>

415
00:22:26,730 --> 00:22:32,560
<font color="#CCCCCC">France for some specific sequences of</font>

416
00:22:29,680 --> 00:22:37,150
instructions<font color="#E5E5E5"> we don't have to read it</font>

417
00:22:32,560 --> 00:22:41,379
<font color="#E5E5E5">binary files that's pretty pretty</font>

418
00:22:37,150 --> 00:22:44,320
<font color="#CCCCCC">handful</font><font color="#E5E5E5"> so once we have all</font><font color="#CCCCCC"> of this we</font>

419
00:22:41,380 --> 00:22:48,040
<font color="#E5E5E5">still have to get again better</font>

420
00:22:44,320 --> 00:22:50,710
performances get new<font color="#E5E5E5"> features so try to</font>

421
00:22:48,040 --> 00:22:53,340
do our<font color="#E5E5E5"> best to</font><font color="#CCCCCC"> have everything work and</font>

422
00:22:50,710 --> 00:22:57,310
work very<font color="#CCCCCC"> well</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what we have already</font>

423
00:22:53,340 --> 00:22:59,949
if I<font color="#E5E5E5"> summarize what we</font><font color="#CCCCCC"> already have</font><font color="#E5E5E5"> in</font>

424
00:22:57,310 --> 00:23:03,760
the kernel in the integrals we have TC

425
00:22:59,950 --> 00:23:07,870
and<font color="#CCCCCC"> x DP hardware flowed</font><font color="#E5E5E5"> we are working</font>

426
00:23:03,760 --> 00:23:10,270
on<font color="#E5E5E5"> 32-bit registers</font><font color="#CCCCCC"> we have various</font>

427
00:23:07,870 --> 00:23:12,459
<font color="#E5E5E5">treated community optimizations</font>

428
00:23:10,270 --> 00:23:15,190
nearly<font color="#E5E5E5"> on</font><font color="#CCCCCC"> EBP F instructions are</font>

429
00:23:12,460 --> 00:23:16,250
supported<font color="#CCCCCC"> we spot the stack we support</font>

430
00:23:15,190 --> 00:23:19,430
some helpers

431
00:23:16,250 --> 00:23:22,310
not much but a couple<font color="#E5E5E5"> of them we can</font>

432
00:23:19,430 --> 00:23:27,110
access<font color="#CCCCCC"> directly to the packet contents</font>

433
00:23:22,310 --> 00:23:31,250
<font color="#E5E5E5">so read</font><font color="#CCCCCC"> and write</font><font color="#E5E5E5"> into packet data all</font>

434
00:23:27,110 --> 00:23:33,979
packet header<font color="#CCCCCC"> we have several XDP</font>

435
00:23:31,250 --> 00:23:36,410
<font color="#CCCCCC">actions</font><font color="#E5E5E5"> supported so we can send the</font>

436
00:23:33,980 --> 00:23:38,780
packet back to the port it came from we

437
00:23:36,410 --> 00:23:42,320
<font color="#E5E5E5">can pass it to the stack so to the host</font>

438
00:23:38,780 --> 00:23:44,990
from<font color="#E5E5E5"> Sonique</font><font color="#CCCCCC"> we can drop the packets we</font>

439
00:23:42,320 --> 00:23:48,620
can create new headers to<font color="#E5E5E5"> encapsulate</font>

440
00:23:44,990 --> 00:23:49,970
those packets<font color="#CCCCCC"> we do support maps now not</font>

441
00:23:48,620 --> 00:23:53,929
for long

442
00:23:49,970 --> 00:23:56,240
we have<font color="#CCCCCC"> Ashe maps and</font><font color="#E5E5E5"> remotes they</font><font color="#CCCCCC"> are</font>

443
00:23:53,930 --> 00:24:00,080
read only from<font color="#CCCCCC"> DPF programs at this time</font>

444
00:23:56,240 --> 00:24:05,390
<font color="#E5E5E5">but they can be updated from user space</font>

445
00:24:00,080 --> 00:24:11,689
programs so we've tried<font color="#CCCCCC"> to improve</font><font color="#E5E5E5"> our</font>

446
00:24:05,390 --> 00:24:15,710
messages<font color="#CCCCCC"> to with PFA your log X stack</font><font color="#E5E5E5"> we</font>

447
00:24:11,690 --> 00:24:19,700
have updated the tools that<font color="#E5E5E5"> we use</font><font color="#CCCCCC"> to</font>

448
00:24:15,710 --> 00:24:21,740
work with<font color="#E5E5E5"> PDF and with all of this we</font>

449
00:24:19,700 --> 00:24:28,820
are<font color="#CCCCCC"> obtaining pretty interesting</font>

450
00:24:21,740 --> 00:24:32,660
performances<font color="#E5E5E5"> so this example is</font><font color="#CCCCCC"> XDP load</font>

451
00:24:28,820 --> 00:24:36,350
<font color="#E5E5E5">balancers so that's the combination of</font>

452
00:24:32,660 --> 00:24:39,260
two files<font color="#E5E5E5"> that are two sample files that</font>

453
00:24:36,350 --> 00:24:43,070
are in the<font color="#CCCCCC"> Linux kernel trees so what is</font>

454
00:24:39,260 --> 00:24:46,460
a checks<font color="#E5E5E5"> IP tuner and the other one is a</font>

455
00:24:43,070 --> 00:24:50,450
layer for load balancer<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> program</font>

456
00:24:46,460 --> 00:24:54,860
<font color="#CCCCCC">is something</font><font color="#E5E5E5"> about 800 ebps instructions</font>

457
00:24:50,450 --> 00:24:58,590
there are formal jobs in that program<font color="#CCCCCC"> we</font>

458
00:24:54,860 --> 00:25:00,539
just<font color="#CCCCCC"> remove per</font><font color="#E5E5E5"> CPU array</font><font color="#CCCCCC"> Maps</font>

459
00:24:58,590 --> 00:25:02,490
you have this<font color="#CCCCCC"> uni BPF we don't report</font>

460
00:25:00,539 --> 00:25:05,429
<font color="#CCCCCC">that into cats so</font><font color="#E5E5E5"> we are using simple</font>

461
00:25:02,490 --> 00:25:09,360
maths instead simpler remaps

462
00:25:05,429 --> 00:25:12,029
and so with all of<font color="#E5E5E5"> this with what</font><font color="#CCCCCC"> we</font>

463
00:25:09,360 --> 00:25:15,990
have<font color="#E5E5E5"> on the card on the</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> we are</font>

464
00:25:12,029 --> 00:25:20,760
attaining<font color="#E5E5E5"> more than 40 million packets</font>

465
00:25:15,990 --> 00:25:22,860
per second so that's pretty pretty good

466
00:25:20,760 --> 00:25:26,100
for now we<font color="#E5E5E5"> are still trying to improve</font>

467
00:25:22,860 --> 00:25:28,199
<font color="#E5E5E5">that to get more features so we</font><font color="#CCCCCC"> are</font>

468
00:25:26,100 --> 00:25:32,939
working<font color="#E5E5E5"> on adding the redirect action</font>

469
00:25:28,200 --> 00:25:34,830
for<font color="#CCCCCC"> xdp to make</font><font color="#E5E5E5"> add the operations were</font>

470
00:25:32,940 --> 00:25:38,279
trying to improve map management by

471
00:25:34,830 --> 00:25:40,320
caching some entries from<font color="#E5E5E5"> the map</font><font color="#CCCCCC"> packet</font>

472
00:25:38,279 --> 00:25:44,120
management<font color="#CCCCCC"> to we would like to take the</font>

473
00:25:40,320 --> 00:25:48,678
packet closer to the course<font color="#E5E5E5"> and the chip</font>

474
00:25:44,120 --> 00:25:51,090
<font color="#E5E5E5">we are trying to</font><font color="#CCCCCC"> improve 32-bit</font>

475
00:25:48,679 --> 00:25:54,350
<font color="#CCCCCC">instruction support</font><font color="#E5E5E5"> in particular I</font>

476
00:25:51,090 --> 00:26:00,320
would<font color="#E5E5E5"> like to have clung in</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> general</font>

477
00:25:54,350 --> 00:26:04,139
code that's<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to use with registers</font>

478
00:26:00,320 --> 00:26:06,510
<font color="#E5E5E5">we want to remember some locks and that</font>

479
00:26:04,140 --> 00:26:08,460
we use in the firmware for the<font color="#CCCCCC"> maps</font><font color="#E5E5E5"> you</font>

480
00:26:06,510 --> 00:26:12,419
know that you double memory bandwidth

481
00:26:08,460 --> 00:26:14,549
for the maps<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> work on their</font>

482
00:26:12,419 --> 00:26:17,190
<font color="#CCCCCC">cores</font><font color="#E5E5E5"> to do to be able to change</font><font color="#CCCCCC"> several</font>

483
00:26:14,549 --> 00:26:19,860
<font color="#E5E5E5">programs so several programs in the</font><font color="#CCCCCC"> NIC</font>

484
00:26:17,190 --> 00:26:21,990
and possibly or so if<font color="#E5E5E5"> we don't report</font>

485
00:26:19,860 --> 00:26:24,270
some feature that's required for one

486
00:26:21,990 --> 00:26:29,159
<font color="#E5E5E5">program in particular we would like</font><font color="#CCCCCC"> to</font>

487
00:26:24,270 --> 00:26:32,100
be able<font color="#E5E5E5"> to continue training programs on</font>

488
00:26:29,159 --> 00:26:35,669
the host possibly<font color="#E5E5E5"> that's something</font>

489
00:26:32,100 --> 00:26:38,850
that's in<font color="#E5E5E5"> progress</font><font color="#CCCCCC"> too we want</font><font color="#E5E5E5"> to</font>

490
00:26:35,669 --> 00:26:39,149
improve<font color="#CCCCCC"> bf2 still we can not at this</font>

491
00:26:38,850 --> 00:26:41,789
<font color="#E5E5E5">time</font>

492
00:26:39,149 --> 00:26:43,649
done<font color="#CCCCCC"> cheat compile the instructions</font>

493
00:26:41,789 --> 00:26:47,279
because<font color="#E5E5E5"> we have a patch for</font><font color="#CCCCCC"> minutest</font>

494
00:26:43,649 --> 00:26:51,050
<font color="#E5E5E5">which has not been pushed upstream</font><font color="#CCCCCC"> we</font>

495
00:26:47,279 --> 00:26:53,900
have more JIT compiler optimizations in

496
00:26:51,050 --> 00:26:55,790
in work<font color="#CCCCCC"> too so a lot</font><font color="#E5E5E5"> of things</font><font color="#CCCCCC"> we're</font>

497
00:26:53,900 --> 00:27:02,210
trying to<font color="#E5E5E5"> do to push for the next</font><font color="#CCCCCC"> Linux</font>

498
00:26:55,790 --> 00:27:06,170
releases and yeah so basically<font color="#E5E5E5"> that's</font>

499
00:27:02,210 --> 00:27:11,000
<font color="#CCCCCC">it's a lot</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> work to</font><font color="#E5E5E5"> do so</font><font color="#CCCCCC"> just to</font>

500
00:27:06,170 --> 00:27:15,260
summarize<font color="#CCCCCC"> ebf SDP it's very efficient</font><font color="#E5E5E5"> we</font>

501
00:27:11,000 --> 00:27:17,810
are<font color="#E5E5E5"> trying to to get the load of the CPU</font>

502
00:27:15,260 --> 00:27:23,690
as much as possible<font color="#E5E5E5"> so</font><font color="#CCCCCC"> to offload</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font>

503
00:27:17,810 --> 00:27:26,360
this<font color="#CCCCCC"> but still it's a</font><font color="#E5E5E5"> way to to</font>

504
00:27:23,690 --> 00:27:27,920
cooperate with<font color="#CCCCCC"> Linux kernel we are not</font>

505
00:27:26,360 --> 00:27:31,159
<font color="#E5E5E5">trying to bypass everything we</font><font color="#CCCCCC"> are</font>

506
00:27:27,920 --> 00:27:33,560
trying<font color="#E5E5E5"> to get it from the kernel to</font>

507
00:27:31,160 --> 00:27:37,370
<font color="#E5E5E5">possibly pass packets</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the stack if</font>

508
00:27:33,560 --> 00:27:40,580
that's<font color="#CCCCCC"> required and so the good thing</font>

509
00:27:37,370 --> 00:27:44,979
<font color="#CCCCCC">for every people every other companies</font>

510
00:27:40,580 --> 00:27:48,350
that we would like<font color="#CCCCCC"> to try to avoid BPF</font>

511
00:27:44,980 --> 00:27:51,160
in the future<font color="#E5E5E5"> that everything on the</font>

512
00:27:48,350 --> 00:27:54,070
kernel and the driver<font color="#CCCCCC"> stream so it's</font>

513
00:27:51,160 --> 00:27:58,550
it's in the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> already so that's</font>

514
00:27:54,070 --> 00:28:00,800
<font color="#E5E5E5">that's a good thing</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> so that's it</font>

515
00:27:58,550 --> 00:28:03,080
so I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know if we have time for</font>

516
00:28:00,800 --> 00:28:08,590
questions<font color="#CCCCCC"> thank you</font>

517
00:28:03,080 --> 00:28:08,590
there are questions three minutes

518
00:28:20,409 --> 00:28:32,450
so can we share<font color="#E5E5E5"> map between several</font><font color="#CCCCCC"> XDP</font>

519
00:28:29,870 --> 00:28:35,270
programs<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know</font>

520
00:28:32,450 --> 00:28:39,580
underneath yourself<font color="#CCCCCC"> you would only have</font>

521
00:28:35,270 --> 00:28:42,860
<font color="#CCCCCC">once</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> x DP</font><font color="#E5E5E5"> program at</font><font color="#CCCCCC"> a time</font>

522
00:28:39,580 --> 00:28:45,110
so you would like to share<font color="#E5E5E5"> that</font><font color="#CCCCCC"> map</font>

523
00:28:42,860 --> 00:28:47,120
which<font color="#CCCCCC"> is on the card itself</font><font color="#E5E5E5"> not on</font><font color="#CCCCCC"> the</font>

524
00:28:45,110 --> 00:28:50,870
<font color="#E5E5E5">host you would like to share it</font><font color="#CCCCCC"> with</font>

525
00:28:47,120 --> 00:28:52,279
other devices<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think we can do</font>

526
00:28:50,870 --> 00:28:55,699
<font color="#E5E5E5">that at this</font><font color="#CCCCCC"> time I don't</font><font color="#E5E5E5"> know what</font>

527
00:28:52,279 --> 00:28:57,890
performance is for the remote access

528
00:28:55,700 --> 00:29:02,390
<font color="#CCCCCC">system the map would be so at this time</font>

529
00:28:57,890 --> 00:29:04,039
we could share them with anything<font color="#CCCCCC"> that</font>

530
00:29:02,390 --> 00:29:07,159
would update the<font color="#CCCCCC"> maps or read the</font><font color="#E5E5E5"> map</font>

531
00:29:04,039 --> 00:29:10,070
from<font color="#E5E5E5"> user space</font><font color="#CCCCCC"> if it's</font><font color="#E5E5E5"> on another Nick</font>

532
00:29:07,159 --> 00:29:12,980
and I don't know how we could do<font color="#CCCCCC"> that</font>

533
00:29:10,070 --> 00:29:15,820
yet<font color="#CCCCCC"> not systematic so there's time for</font>

534
00:29:12,980 --> 00:29:15,820
one<font color="#CCCCCC"> more question</font>

535
00:29:17,980 --> 00:29:21,820
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> just one air</font>

536
00:29:33,980 --> 00:29:38,309
<font color="#E5E5E5">okay so I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> repeat the question</font>

537
00:29:36,059 --> 00:29:55,139
so do you have any support for<font color="#E5E5E5"> transmit</font>

538
00:29:38,309 --> 00:29:59,789
<font color="#CCCCCC">queue</font><font color="#E5E5E5"> so on the side so HTTP</font><font color="#CCCCCC"> and me and</font>

539
00:29:55,139 --> 00:30:01,580
the<font color="#E5E5E5"> RH</font><font color="#CCCCCC"> sites so if it's if we're talking</font>

540
00:29:59,789 --> 00:30:18,690
<font color="#E5E5E5">about</font><font color="#CCCCCC"> you kept afloat</font>

541
00:30:01,580 --> 00:30:21,360
no it's ingress we okay so<font color="#E5E5E5"> I think we're</font>

542
00:30:18,690 --> 00:30:23,899
out of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> Quentin</font><font color="#CCCCCC"> take very</font>

543
00:30:21,360 --> 00:30:23,899
<font color="#CCCCCC">thank you</font><font color="#E5E5E5"> so much</font>

