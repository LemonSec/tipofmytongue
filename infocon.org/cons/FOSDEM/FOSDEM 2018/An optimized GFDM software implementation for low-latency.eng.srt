1
00:00:06,800 --> 00:00:12,959
<font color="#CCCCCC">okay so welcome to my talk</font><font color="#E5E5E5"> unfortunately</font>

2
00:00:10,650 --> 00:00:16,199
we had some hiccups with the<font color="#E5E5E5"> equipment</font>

3
00:00:12,959 --> 00:00:19,650
so currently the<font color="#E5E5E5"> flights will not be on</font>

4
00:00:16,199 --> 00:00:22,470
the<font color="#CCCCCC"> live stream now but you can down</font>

5
00:00:19,650 --> 00:00:26,070
there with them on the<font color="#CCCCCC"> fosston website</font>

6
00:00:22,470 --> 00:00:28,679
so I'm sorry<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that welcome to my</font>

7
00:00:26,070 --> 00:00:31,250
presentation<font color="#CCCCCC"> it's called an optimized M</font>

8
00:00:28,679 --> 00:00:34,589
<font color="#E5E5E5">so for implementation for</font><font color="#CCCCCC"> load agency</font>

9
00:00:31,250 --> 00:00:35,850
first<font color="#E5E5E5"> I want to have a few words on Who</font>

10
00:00:34,590 --> 00:00:39,060
I am where I work

11
00:00:35,850 --> 00:00:40,260
my name is<font color="#CCCCCC"> johannes</font><font color="#E5E5E5"> demo and I work with</font>

12
00:00:39,060 --> 00:00:42,870
the<font color="#CCCCCC"> Department of Communications</font>

13
00:00:40,260 --> 00:00:45,480
engineering and even<font color="#CCCCCC"> our University of</font>

14
00:00:42,870 --> 00:00:50,220
Bremen<font color="#E5E5E5"> and Bremen Germany the German</font>

15
00:00:45,480 --> 00:00:52,830
appreciation is actually<font color="#CCCCCC"> AMT and then</font>

16
00:00:50,220 --> 00:00:56,400
there are work with<font color="#CCCCCC"> Bakuman</font><font color="#E5E5E5"> and</font>

17
00:00:52,830 --> 00:00:58,530
professor<font color="#E5E5E5"> Larry's I'm in the</font><font color="#CCCCCC"> cosy our</font>

18
00:00:56,400 --> 00:01:01,710
research<font color="#CCCCCC"> group is mainly</font><font color="#E5E5E5"> focused on</font>

19
00:00:58,530 --> 00:01:04,949
wireless<font color="#CCCCCC"> communications so physical</font>

20
00:01:01,710 --> 00:01:10,499
layer or<font color="#CCCCCC"> mac layer and yeah we do some</font>

21
00:01:04,949 --> 00:01:14,939
signal processing<font color="#CCCCCC"> in general too so why</font>

22
00:01:10,499 --> 00:01:16,859
do we<font color="#E5E5E5"> work on</font><font color="#CCCCCC"> GF DM</font><font color="#E5E5E5"> if you look at</font>

23
00:01:14,939 --> 00:01:18,419
<font color="#CCCCCC">state-of-the-art technologies for</font>

24
00:01:16,859 --> 00:01:22,520
<font color="#E5E5E5">wireless communications</font>

25
00:01:18,420 --> 00:01:26,729
they're usually optimized for high well

26
00:01:22,520 --> 00:01:29,908
for high data rates like LTE but they

27
00:01:26,729 --> 00:01:32,340
also have become quite high latency and

28
00:01:29,909 --> 00:01:34,499
also they have low reliability if you

29
00:01:32,340 --> 00:01:36,719
think of LTE again they usually have a

30
00:01:34,499 --> 00:01:42,170
target frame<font color="#E5E5E5"> error rate of 1 to the</font>

31
00:01:36,719 --> 00:01:42,169
power of minus<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> 10% packet loss and</font>

32
00:01:42,679 --> 00:01:49,499
well also<font color="#E5E5E5"> it's summed up domestic</font>

33
00:01:46,590 --> 00:01:51,780
communications and<font color="#E5E5E5"> mostly you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> FPGAs</font>

34
00:01:49,499 --> 00:01:58,889
or everything's implemented in an ASIC

35
00:01:51,780 --> 00:02:01,319
and yeah pretty<font color="#CCCCCC"> much</font><font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> we work in a</font>

36
00:01:58,889 --> 00:02:05,068
<font color="#CCCCCC">realm where</font><font color="#E5E5E5"> we are looking at industry</font>

37
00:02:01,319 --> 00:02:08,130
<font color="#CCCCCC">for porno applications there we have a</font>

38
00:02:05,069 --> 00:02:10,920
whole<font color="#E5E5E5"> different</font><font color="#CCCCCC"> set up if you think of</font>

39
00:02:08,130 --> 00:02:14,549
<font color="#E5E5E5">communications we usually require</font>

40
00:02:10,919 --> 00:02:17,970
<font color="#E5E5E5">latency of less than</font><font color="#CCCCCC"> one millisecond we</font>

41
00:02:14,549 --> 00:02:20,970
have a very high reliability

42
00:02:17,970 --> 00:02:26,280
<font color="#E5E5E5">the requirement it's debatable if this</font>

43
00:02:20,970 --> 00:02:29,430
<font color="#E5E5E5">figure is really useful but anyways we</font>

44
00:02:26,280 --> 00:02:32,220
need to have a more reliable<font color="#E5E5E5"> to reliable</font>

45
00:02:29,430 --> 00:02:34,620
communication system<font color="#E5E5E5"> and also we know</font>

46
00:02:32,220 --> 00:02:38,040
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> thing works in a deterministic</font>

47
00:02:34,620 --> 00:02:40,440
way<font color="#CCCCCC"> so if you look at this</font><font color="#E5E5E5"> example those</font>

48
00:02:38,040 --> 00:02:43,549
slides here they<font color="#CCCCCC"> just move</font><font color="#E5E5E5"> around and</font>

49
00:02:40,440 --> 00:02:46,290
date<font color="#CCCCCC"> just periodically</font><font color="#E5E5E5"> send up updates</font>

50
00:02:43,550 --> 00:02:48,050
<font color="#E5E5E5">where they are how fast they</font><font color="#CCCCCC"> move</font>

51
00:02:46,290 --> 00:02:50,579
etcetera etcetera<font color="#E5E5E5"> and they do this</font>

52
00:02:48,050 --> 00:02:53,070
periodically<font color="#E5E5E5"> and they are all connected</font>

53
00:02:50,580 --> 00:02:56,490
to the<font color="#CCCCCC"> system and they all expect an</font>

54
00:02:53,070 --> 00:02:58,620
<font color="#E5E5E5">update every so and so often and if they</font>

55
00:02:56,490 --> 00:03:01,230
don't<font color="#E5E5E5"> get an update ever so soft and</font><font color="#CCCCCC"> the</font>

56
00:02:58,620 --> 00:03:03,470
whole<font color="#CCCCCC"> system</font><font color="#E5E5E5"> will shut down and well</font>

57
00:03:01,230 --> 00:03:08,340
that translates<font color="#E5E5E5"> to your whole production</font>

58
00:03:03,470 --> 00:03:11,490
<font color="#E5E5E5">will just shut down that would be bad</font>

59
00:03:08,340 --> 00:03:15,600
for your company so you<font color="#E5E5E5"> want to have a</font>

60
00:03:11,490 --> 00:03:18,210
reliable<font color="#E5E5E5"> communication system and in the</font>

61
00:03:15,600 --> 00:03:20,220
future<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to have mayor of</font>

62
00:03:18,210 --> 00:03:22,620
flexibility<font color="#E5E5E5"> and we want to have a</font>

63
00:03:20,220 --> 00:03:26,540
software<font color="#CCCCCC"> implementation that is primary</font>

64
00:03:22,620 --> 00:03:29,520
risible<font color="#E5E5E5"> why do we want to have that well</font>

65
00:03:26,540 --> 00:03:30,989
this<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> one example</font><font color="#E5E5E5"> but systems</font>

66
00:03:29,520 --> 00:03:33,090
might look<font color="#CCCCCC"> totally different for</font>

67
00:03:30,989 --> 00:03:36,110
different applications<font color="#E5E5E5"> so we want to</font>

68
00:03:33,090 --> 00:03:39,300
have<font color="#E5E5E5"> as much flexibility as we can have</font>

69
00:03:36,110 --> 00:03:41,130
so now what we're working on we want to

70
00:03:39,300 --> 00:03:44,870
have a new<font color="#E5E5E5"> wireless communication system</font>

71
00:03:41,130 --> 00:03:47,220
<font color="#E5E5E5">and there's a project</font><font color="#CCCCCC"> called high flex</font>

72
00:03:44,870 --> 00:03:50,870
<font color="#E5E5E5">it's supported by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> federal ministry</font>

73
00:03:47,220 --> 00:03:54,780
of<font color="#E5E5E5"> education and</font><font color="#CCCCCC"> research in germany and</font>

74
00:03:50,870 --> 00:03:59,280
it's on<font color="#E5E5E5"> this whole conglomerate</font><font color="#CCCCCC"> of</font>

75
00:03:54,780 --> 00:04:04,010
industrial radio<font color="#CCCCCC"> so that's where I work</font>

76
00:03:59,280 --> 00:04:07,500
<font color="#CCCCCC">a little</font><font color="#E5E5E5"> outline of my presentation here</font>

77
00:04:04,010 --> 00:04:10,320
<font color="#E5E5E5">when I first start with a more concise</font>

78
00:04:07,500 --> 00:04:12,420
introduction of what I do then I will

79
00:04:10,320 --> 00:04:15,720
<font color="#CCCCCC">introduce</font><font color="#E5E5E5"> generalized frequency division</font>

80
00:04:12,420 --> 00:04:18,719
multiplexing or<font color="#CCCCCC"> DF DM</font><font color="#E5E5E5"> as if</font><font color="#CCCCCC"> already</font>

81
00:04:15,720 --> 00:04:21,269
heard in the title then I will talk

82
00:04:18,720 --> 00:04:22,890
<font color="#E5E5E5">about our low latency SDR implementation</font>

83
00:04:21,269 --> 00:04:27,180
and finally there<font color="#E5E5E5"> will be a conclusion</font>

84
00:04:22,890 --> 00:04:29,580
<font color="#CCCCCC">so let's start</font><font color="#E5E5E5"> with the introduction if</font>

85
00:04:27,180 --> 00:04:31,500
we have a look<font color="#E5E5E5"> at the system model for</font>

86
00:04:29,580 --> 00:04:33,570
communication system

87
00:04:31,500 --> 00:04:35,640
on a file layer we usually have<font color="#E5E5E5"> a source</font>

88
00:04:33,570 --> 00:04:37,980
we have<font color="#E5E5E5"> thank kind of forward error</font>

89
00:04:35,640 --> 00:04:40,500
correction<font color="#E5E5E5"> and today I'm going to talk</font>

90
00:04:37,980 --> 00:04:44,760
about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> waveform so that's the part</font>

91
00:04:40,500 --> 00:04:46,890
I'm<font color="#E5E5E5"> gonna focus on</font><font color="#CCCCCC"> today and our</font>

92
00:04:44,760 --> 00:04:50,099
requirements here are that we<font color="#CCCCCC"> have it</font>

93
00:04:46,890 --> 00:04:54,000
more<font color="#CCCCCC"> flexible than before that</font><font color="#E5E5E5"> the one</font>

94
00:04:50,100 --> 00:05:01,290
to have it robust and we need to have

95
00:04:54,000 --> 00:05:05,090
favorable consistent properties well so

96
00:05:01,290 --> 00:05:09,270
<font color="#E5E5E5">a little bit further</font><font color="#CCCCCC"> I already said that</font>

97
00:05:05,090 --> 00:05:11,729
<font color="#CCCCCC">one</font><font color="#E5E5E5"> half</font><font color="#CCCCCC"> lays a latency of less than one</font>

98
00:05:09,270 --> 00:05:17,549
millisecond<font color="#E5E5E5"> so if we look at this system</font>

99
00:05:11,730 --> 00:05:20,910
<font color="#E5E5E5">now we have a device that needs to send</font>

100
00:05:17,550 --> 00:05:25,830
out status and receive an update<font color="#E5E5E5"> within</font>

101
00:05:20,910 --> 00:05:28,410
one millisecond<font color="#CCCCCC"> and in between there's</font><font color="#E5E5E5"> a</font>

102
00:05:25,830 --> 00:05:31,260
communication system<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we'll have a</font>

103
00:05:28,410 --> 00:05:34,200
<font color="#E5E5E5">channel here we can control</font><font color="#CCCCCC"> its</font>

104
00:05:31,260 --> 00:05:37,230
properties by setting certain filter

105
00:05:34,200 --> 00:05:39,590
properties etc<font color="#CCCCCC"> and the frequency but in</font>

106
00:05:37,230 --> 00:05:42,660
the end well we have to deal with<font color="#E5E5E5"> it</font>

107
00:05:39,590 --> 00:05:45,570
but what we can completely control<font color="#E5E5E5"> is</font>

108
00:05:42,660 --> 00:05:49,620
our signal processing here here and here

109
00:05:45,570 --> 00:05:52,260
<font color="#E5E5E5">and this is the one we want to have as</font>

110
00:05:49,620 --> 00:05:55,650
an<font color="#E5E5E5"> SDR implementation and then we want</font>

111
00:05:52,260 --> 00:05:58,740
to<font color="#CCCCCC"> measure its latency</font><font color="#E5E5E5"> so we can have</font>

112
00:05:55,650 --> 00:06:01,380
first feeling<font color="#E5E5E5"> of how good</font><font color="#CCCCCC"> it will</font>

113
00:05:58,740 --> 00:06:04,020
perform and what<font color="#E5E5E5"> we have to expect from</font>

114
00:06:01,380 --> 00:06:05,969
that implementation then and then

115
00:06:04,020 --> 00:06:11,219
finally we want<font color="#CCCCCC"> to answer the question</font>

116
00:06:05,970 --> 00:06:14,430
can<font color="#CCCCCC"> be achieved low latency so now to</font>

117
00:06:11,220 --> 00:06:18,930
dive deeper into<font color="#E5E5E5"> GF DM I will introduced</font>

118
00:06:14,430 --> 00:06:21,540
<font color="#E5E5E5">that well reckon they everyone used</font>

119
00:06:18,930 --> 00:06:23,910
single carrier transmission so you had a

120
00:06:21,540 --> 00:06:27,390
<font color="#E5E5E5">certain bandwidth and you were just</font>

121
00:06:23,910 --> 00:06:29,820
divided<font color="#E5E5E5"> over time into time slots that's</font>

122
00:06:27,390 --> 00:06:33,539
what we depicted here so you would

123
00:06:29,820 --> 00:06:36,390
transmit<font color="#CCCCCC"> n symbols complex symbols</font><font color="#E5E5E5"> in</font>

124
00:06:33,540 --> 00:06:38,660
digital communications mostly and you

125
00:06:36,390 --> 00:06:43,820
would send<font color="#E5E5E5"> them out one after the other</font>

126
00:06:38,660 --> 00:06:46,070
<font color="#E5E5E5">as we increase data rate</font><font color="#CCCCCC"> that kind of</font>

127
00:06:43,820 --> 00:06:49,310
have involved a lot of<font color="#E5E5E5"> problems like</font>

128
00:06:46,070 --> 00:06:52,219
multipath propagation<font color="#CCCCCC"> and we needed more</font>

129
00:06:49,310 --> 00:06:55,820
<font color="#CCCCCC">and more complex</font><font color="#E5E5E5"> equalizers so along</font>

130
00:06:52,220 --> 00:07:00,800
<font color="#E5E5E5">came over DM which helps us solve a lot</font>

131
00:06:55,820 --> 00:07:01,940
of problems<font color="#E5E5E5"> here and also we got a lot</font>

132
00:07:00,800 --> 00:07:04,880
more<font color="#E5E5E5"> flexibility</font>

133
00:07:01,940 --> 00:07:07,400
now instead<font color="#CCCCCC"> of dividing our resources in</font>

134
00:07:04,880 --> 00:07:12,020
time we<font color="#E5E5E5"> just divide them in frequency so</font>

135
00:07:07,400 --> 00:07:14,299
<font color="#CCCCCC">we have low bandwidth subcarriers</font><font color="#E5E5E5"> still</font>

136
00:07:12,020 --> 00:07:20,630
we can<font color="#E5E5E5"> transmit and complex symbols at</font>

137
00:07:14,300 --> 00:07:23,060
time<font color="#CCCCCC"> gvm wants to be more flexible here</font>

138
00:07:20,630 --> 00:07:25,909
so we can have flexible scheme where we

139
00:07:23,060 --> 00:07:29,990
<font color="#E5E5E5">divide our resources time and</font><font color="#CCCCCC"> frequency</font>

140
00:07:25,910 --> 00:07:32,240
into<font color="#E5E5E5"> sub carriers here and time slots</font>

141
00:07:29,990 --> 00:07:35,270
that's this direction<font color="#E5E5E5"> okay</font>

142
00:07:32,240 --> 00:07:39,440
still we have n complex<font color="#E5E5E5"> symbols that we</font>

143
00:07:35,270 --> 00:07:44,270
can transmit on our end data<font color="#E5E5E5"> symbols but</font>

144
00:07:39,440 --> 00:07:46,930
<font color="#E5E5E5">now it's more flexible so how does the G</font>

145
00:07:44,270 --> 00:07:49,460
of DM work just<font color="#E5E5E5"> a quick introduction</font>

146
00:07:46,930 --> 00:07:54,850
<font color="#E5E5E5">first we assume we have complex</font><font color="#CCCCCC"> symbols</font>

147
00:07:49,460 --> 00:08:00,590
these T's and we want to map them to

148
00:07:54,850 --> 00:08:04,220
<font color="#E5E5E5">certain resources so we</font><font color="#CCCCCC"> go here</font><font color="#E5E5E5"> tour</font>

149
00:08:00,590 --> 00:08:07,940
resources and we just map our DS to

150
00:08:04,220 --> 00:08:13,160
these resources<font color="#E5E5E5"> and well we save that</font><font color="#CCCCCC"> in</font>

151
00:08:07,940 --> 00:08:15,350
a vector of size<font color="#CCCCCC"> n</font><font color="#E5E5E5"> of course and every</font>

152
00:08:13,160 --> 00:08:18,710
single<font color="#E5E5E5"> one of these elements</font><font color="#CCCCCC"> in the</font>

153
00:08:15,350 --> 00:08:24,350
vector<font color="#E5E5E5"> now corresponds to one resource</font>

154
00:08:18,710 --> 00:08:26,359
element<font color="#E5E5E5"> here in our resource grid if for</font>

155
00:08:24,350 --> 00:08:28,400
some reason<font color="#E5E5E5"> don't want to use all the</font>

156
00:08:26,360 --> 00:08:30,680
resources<font color="#E5E5E5"> we can just set them to zero</font>

157
00:08:28,400 --> 00:08:33,020
so would look like

158
00:08:30,680 --> 00:08:37,299
we just don't transmit on that frequency

159
00:08:33,020 --> 00:08:40,130
<font color="#E5E5E5">the next step will be to do modulation</font>

160
00:08:37,299 --> 00:08:43,939
well if you'll read through the papers

161
00:08:40,130 --> 00:08:46,610
<font color="#E5E5E5">you'll see a modulation matrix a and it</font>

162
00:08:43,940 --> 00:08:51,710
just multiplied by<font color="#E5E5E5"> D and bam you have</font>

163
00:08:46,610 --> 00:08:55,940
your<font color="#E5E5E5"> transmit signal well how does a</font>

164
00:08:51,710 --> 00:08:57,560
look like<font color="#E5E5E5"> it can for every resource it</font>

165
00:08:55,940 --> 00:08:59,690
contains a circulation

166
00:08:57,560 --> 00:09:02,810
if that modulated replica of a prototype

167
00:08:59,690 --> 00:09:05,300
<font color="#E5E5E5">filter so the prototype filter does</font>

168
00:09:02,810 --> 00:09:08,239
<font color="#CCCCCC">actually shape our signal just</font><font color="#E5E5E5"> like we</font>

169
00:09:05,300 --> 00:09:09,829
would do with for<font color="#CCCCCC"> example a single carry</font>

170
00:09:08,240 --> 00:09:12,560
transmission where we have the<font color="#E5E5E5"> route</font>

171
00:09:09,830 --> 00:09:16,490
<font color="#E5E5E5">raised cosine filter and now we just</font>

172
00:09:12,560 --> 00:09:18,829
<font color="#E5E5E5">shift it to the frequency and the time</font>

173
00:09:16,490 --> 00:09:22,040
where<font color="#E5E5E5"> we want to transmit</font><font color="#CCCCCC"> a certain</font>

174
00:09:18,830 --> 00:09:25,520
symbol<font color="#CCCCCC"> that's what actually</font><font color="#E5E5E5"> every entry</font>

175
00:09:22,040 --> 00:09:28,660
of a does<font color="#E5E5E5"> contained for every symbol</font>

176
00:09:25,520 --> 00:09:34,220
<font color="#E5E5E5">want</font><font color="#CCCCCC"> transmitted in such a</font><font color="#E5E5E5"> GG</font><font color="#CCCCCC"> FDM frame</font>

177
00:09:28,660 --> 00:09:36,439
and<font color="#E5E5E5"> I mentioned over the</font><font color="#CCCCCC"> ML</font><font color="#E5E5E5"> layer now in</font>

178
00:09:34,220 --> 00:09:38,779
contrast<font color="#CCCCCC"> to</font><font color="#E5E5E5"> ovm we do not use</font>

179
00:09:36,440 --> 00:09:41,720
rectangular filters in time anymore<font color="#CCCCCC"> if</font>

180
00:09:38,779 --> 00:09:44,480
<font color="#E5E5E5">you're familiar with of the M basically</font>

181
00:09:41,720 --> 00:09:46,300
you<font color="#E5E5E5"> have a rectangular filter over time</font>

182
00:09:44,480 --> 00:09:51,710
and that translates into a sink and

183
00:09:46,300 --> 00:09:55,189
frequency and that's good but we<font color="#E5E5E5"> want to</font>

184
00:09:51,710 --> 00:10:00,260
do<font color="#E5E5E5"> better and tackle the problems</font><font color="#CCCCCC"> that</font>

185
00:09:55,190 --> 00:10:03,710
involve<font color="#E5E5E5"> that last thing we do is we can</font>

186
00:10:00,260 --> 00:10:07,490
still use a cyclic prefix but<font color="#E5E5E5"> we do only</font>

187
00:10:03,710 --> 00:10:12,560
<font color="#E5E5E5">use one per frame and set off for</font><font color="#CCCCCC"> every</font>

188
00:10:07,490 --> 00:10:15,920
over the<font color="#E5E5E5"> M symbol in</font><font color="#CCCCCC"> OD m so we might be</font>

189
00:10:12,560 --> 00:10:20,810
<font color="#CCCCCC">more efficient there why what do we want</font>

190
00:10:15,920 --> 00:10:24,410
to have a cyclic<font color="#E5E5E5"> prefix well this all</font>

191
00:10:20,810 --> 00:10:29,050
<font color="#CCCCCC">translates to a</font><font color="#E5E5E5"> circular frame property</font>

192
00:10:24,410 --> 00:10:33,319
<font color="#E5E5E5">and that again in terms translates to</font>

193
00:10:29,050 --> 00:10:38,479
more simple<font color="#CCCCCC"> equalization technology so</font>

194
00:10:33,320 --> 00:10:42,020
we have simpler<font color="#CCCCCC"> Equalization if we use a</font>

195
00:10:38,480 --> 00:10:43,640
cyclic prefix<font color="#E5E5E5"> hopefully so we want to</font>

196
00:10:42,020 --> 00:10:47,930
have that and it's<font color="#E5E5E5"> great that</font><font color="#CCCCCC"> we can</font>

197
00:10:43,640 --> 00:10:50,240
have<font color="#E5E5E5"> that with</font><font color="#CCCCCC"> TM</font><font color="#E5E5E5"> - okay so there's one</font>

198
00:10:47,930 --> 00:10:53,120
challenge<font color="#CCCCCC"> I told you the a it's just a</font>

199
00:10:50,240 --> 00:10:56,510
<font color="#CCCCCC">matrix and this matrix might be quite</font>

200
00:10:53,120 --> 00:10:59,120
large so this multiplication<font color="#E5E5E5"> is very</font>

201
00:10:56,510 --> 00:11:02,650
<font color="#CCCCCC">inefficient and we want to improve on</font>

202
00:10:59,120 --> 00:11:05,420
<font color="#E5E5E5">that just to give you a quick</font><font color="#CCCCCC"> overview</font>

203
00:11:02,650 --> 00:11:07,130
<font color="#E5E5E5">we want to modulate</font><font color="#CCCCCC"> that again</font><font color="#E5E5E5"> but now</font>

204
00:11:05,420 --> 00:11:09,770
we<font color="#E5E5E5"> want to do that in a frequency</font><font color="#CCCCCC"> domain</font>

205
00:11:07,130 --> 00:11:12,170
we choose our subcarrier filters such

206
00:11:09,770 --> 00:11:17,180
that they<font color="#E5E5E5"> are shaped like</font>

207
00:11:12,170 --> 00:11:20,150
so we'll only have<font color="#CCCCCC"> nonzero</font><font color="#E5E5E5"> elements for</font>

208
00:11:17,180 --> 00:11:24,680
our<font color="#CCCCCC"> subcarrier and</font><font color="#E5E5E5"> some area around it</font>

209
00:11:20,150 --> 00:11:29,900
and now we can implement that with a

210
00:11:24,680 --> 00:11:33,920
fast Fourier transformation<font color="#E5E5E5"> okay that</font>

211
00:11:29,900 --> 00:11:36,350
<font color="#CCCCCC">also involves a few more things so the</font>

212
00:11:33,920 --> 00:11:38,000
<font color="#E5E5E5">first thing is we will always have</font>

213
00:11:36,350 --> 00:11:42,170
<font color="#E5E5E5">interference with neighboring</font><font color="#CCCCCC"> sub</font>

214
00:11:38,000 --> 00:11:44,410
<font color="#CCCCCC">carriers you can see they overlap</font><font color="#E5E5E5"> but we</font>

215
00:11:42,170 --> 00:11:47,030
can manage<font color="#E5E5E5"> this interference because</font>

216
00:11:44,410 --> 00:11:48,890
with our filter design we<font color="#E5E5E5"> are now in</font>

217
00:11:47,030 --> 00:11:51,260
<font color="#CCCCCC">charge of this interference and we</font><font color="#E5E5E5"> can</font>

218
00:11:48,890 --> 00:11:56,150
<font color="#CCCCCC">actually later</font><font color="#E5E5E5"> on the receiver we can</font>

219
00:11:51,260 --> 00:11:58,430
<font color="#E5E5E5">cancel that out ah</font><font color="#CCCCCC"> and this design then</font>

220
00:11:56,150 --> 00:12:00,770
translates to a more robust

221
00:11:58,430 --> 00:12:04,430
implementation<font color="#E5E5E5"> if you think of</font>

222
00:12:00,770 --> 00:12:08,329
imperfections like frequency offsets and

223
00:12:04,430 --> 00:12:11,150
timing offsets<font color="#E5E5E5"> so the system where we</font>

224
00:12:08,330 --> 00:12:13,880
actually<font color="#E5E5E5"> have more</font><font color="#CCCCCC"> local localized</font>

225
00:12:11,150 --> 00:12:15,910
filter for our sub carriers will<font color="#E5E5E5"> be more</font>

226
00:12:13,880 --> 00:12:21,560
robust against this kind of

227
00:12:15,910 --> 00:12:26,800
<font color="#E5E5E5">imperfections okay so let's move on to</font>

228
00:12:21,560 --> 00:12:26,800
<font color="#E5E5E5">our low latency SDR implementation</font><font color="#CCCCCC"> I</font>

229
00:12:26,890 --> 00:12:32,090
didn't need to have to start<font color="#CCCCCC"> from</font>

230
00:12:28,760 --> 00:12:35,569
scratch<font color="#E5E5E5"> when</font><font color="#CCCCCC"> I started</font><font color="#E5E5E5"> to look at G of</font>

231
00:12:32,090 --> 00:12:40,640
DM I looked around if I could find any

232
00:12:35,570 --> 00:12:45,950
previous<font color="#E5E5E5"> works and I did thanks Emily</font>

233
00:12:40,640 --> 00:12:50,150
he already<font color="#E5E5E5"> started</font><font color="#CCCCCC"> grg of DM and</font><font color="#E5E5E5"> well I</font>

234
00:12:45,950 --> 00:12:54,110
<font color="#E5E5E5">took that up and implemented all</font><font color="#CCCCCC"> the</font>

235
00:12:50,150 --> 00:12:58,100
things I need it<font color="#E5E5E5"> and worked on code</font>

236
00:12:54,110 --> 00:13:02,600
optimization I added quite<font color="#E5E5E5"> a few tests</font>

237
00:12:58,100 --> 00:13:05,630
so<font color="#E5E5E5"> we could improve on code here and now</font>

238
00:13:02,600 --> 00:13:07,190
the<font color="#E5E5E5"> system has a few components so we</font>

239
00:13:05,630 --> 00:13:09,670
<font color="#E5E5E5">can do modulation we can do in</font>

240
00:13:07,190 --> 00:13:13,880
demodulation will also have

241
00:13:09,670 --> 00:13:17,589
<font color="#E5E5E5">synchronization part and we can't have</font>

242
00:13:13,880 --> 00:13:17,590
this mapper and<font color="#E5E5E5"> D mapper</font>

243
00:13:18,350 --> 00:13:28,439
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit on our well software</font>

244
00:13:25,079 --> 00:13:32,849
<font color="#E5E5E5">structure if you</font><font color="#CCCCCC"> are in academia</font><font color="#E5E5E5"> you</font>

245
00:13:28,439 --> 00:13:35,160
often have well look at single frames

246
00:13:32,850 --> 00:13:39,089
and<font color="#E5E5E5"> you do quite a bit</font><font color="#CCCCCC"> of outline</font>

247
00:13:35,160 --> 00:13:41,040
processing for your simulations so your

248
00:13:39,089 --> 00:13:44,939
honor have an interface<font color="#E5E5E5"> to use with</font>

249
00:13:41,040 --> 00:13:51,209
<font color="#E5E5E5">Python to use it with numpy</font><font color="#CCCCCC"> and scifi or</font>

250
00:13:44,939 --> 00:13:54,740
some other unnamed software<font color="#E5E5E5"> and also</font>

251
00:13:51,209 --> 00:13:59,359
this is quite nice to play around and

252
00:13:54,740 --> 00:14:02,189
just get a feeling<font color="#E5E5E5"> for how things work</font>

253
00:13:59,360 --> 00:14:04,490
<font color="#CCCCCC">here</font><font color="#E5E5E5"> we want to have an interface a</font>

254
00:14:02,189 --> 00:14:08,368
simple interface so<font color="#E5E5E5"> we can just do</font><font color="#CCCCCC"> that</font>

255
00:14:04,490 --> 00:14:11,910
<font color="#CCCCCC">then we</font><font color="#E5E5E5"> want to have our implementation</font>

256
00:14:08,369 --> 00:14:15,240
which is<font color="#E5E5E5"> very modular</font><font color="#CCCCCC"> it's optimized and</font>

257
00:14:11,910 --> 00:14:18,089
again should have<font color="#E5E5E5"> simple just</font><font color="#CCCCCC"> c++</font>

258
00:14:15,240 --> 00:14:22,949
interface we just push around<font color="#E5E5E5"> to your</font>

259
00:14:18,089 --> 00:14:25,470
pointers<font color="#E5E5E5"> and then on the</font><font color="#CCCCCC"> other hand you</font>

260
00:14:22,949 --> 00:14:29,579
can<font color="#CCCCCC"> just plug that into a new radio so</font>

261
00:14:25,470 --> 00:14:31,319
you<font color="#CCCCCC"> can just</font><font color="#E5E5E5"> plug that into</font><font color="#CCCCCC"> your block</font>

262
00:14:29,579 --> 00:14:34,309
structure just call the appropriate

263
00:14:31,319 --> 00:14:37,469
<font color="#E5E5E5">functions pause around the pointers and</font>

264
00:14:34,309 --> 00:14:40,049
yeah<font color="#E5E5E5"> just use all the benefits of</font><font color="#CCCCCC"> caen</font>

265
00:14:37,470 --> 00:14:42,809
radio like it takes care<font color="#CCCCCC"> that everything</font>

266
00:14:40,049 --> 00:14:44,939
runs fast<font color="#CCCCCC"> that it runs multi-threaded</font>

267
00:14:42,809 --> 00:14:46,860
<font color="#CCCCCC">there you have</font><font color="#E5E5E5"> your hardware interfaces</font>

268
00:14:44,939 --> 00:14:50,219
you don't have to worry<font color="#E5E5E5"> about that I</font>

269
00:14:46,860 --> 00:14:54,990
mean<font color="#E5E5E5"> no one wants to rewrite any drivers</font>

270
00:14:50,220 --> 00:14:57,619
<font color="#E5E5E5">or things like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so that's the</font>

271
00:14:54,990 --> 00:15:02,699
general<font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> how we split our</font>

272
00:14:57,619 --> 00:15:05,069
<font color="#E5E5E5">software into different components the</font>

273
00:15:02,699 --> 00:15:06,779
last part I want<font color="#E5E5E5"> to actually show</font><font color="#CCCCCC"> you</font>

274
00:15:05,069 --> 00:15:11,009
some<font color="#E5E5E5"> benchmarks of the different parts</font>

275
00:15:06,779 --> 00:15:12,869
<font color="#E5E5E5">of our system first off</font><font color="#CCCCCC"> for this</font>

276
00:15:11,009 --> 00:15:17,730
benchmark setup I<font color="#CCCCCC"> have made a few</font>

277
00:15:12,869 --> 00:15:19,170
assumptions<font color="#E5E5E5"> so we would also always look</font>

278
00:15:17,730 --> 00:15:21,480
at the perfect<font color="#E5E5E5"> channel so there's no</font>

279
00:15:19,170 --> 00:15:23,849
noise or<font color="#E5E5E5"> well actually no channel</font>

280
00:15:21,480 --> 00:15:27,360
<font color="#E5E5E5">wouldn't make sense for performance</font>

281
00:15:23,850 --> 00:15:31,410
evaluations but for benchmarks works

282
00:15:27,360 --> 00:15:33,959
fine then<font color="#E5E5E5"> also</font>

283
00:15:31,410 --> 00:15:36,089
for the kind<font color="#CCCCCC"> of communication systems</font>

284
00:15:33,959 --> 00:15:39,719
<font color="#E5E5E5">I'm looking at will always have small</font>

285
00:15:36,089 --> 00:15:43,849
packets it's debatable if<font color="#E5E5E5"> 1024-bit is</font>

286
00:15:39,720 --> 00:15:48,299
still a<font color="#E5E5E5"> small packet but that's up to</font>

287
00:15:43,849 --> 00:15:50,909
<font color="#CCCCCC">all the people involved in every project</font>

288
00:15:48,299 --> 00:15:54,269
<font color="#E5E5E5">then</font><font color="#CCCCCC"> also we always look</font><font color="#E5E5E5"> at small</font>

289
00:15:50,909 --> 00:15:59,579
<font color="#E5E5E5">constellations like</font><font color="#CCCCCC"> QPSK the</font><font color="#E5E5E5"> one go</font><font color="#CCCCCC"> up</font>

290
00:15:54,269 --> 00:16:01,799
to like<font color="#E5E5E5"> 54 km in order to understand the</font>

291
00:15:59,579 --> 00:16:04,289
simulations a bit better<font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to have</font>

292
00:16:01,799 --> 00:16:09,119
to know about<font color="#E5E5E5"> two parameters and the</font>

293
00:16:04,289 --> 00:16:11,489
block size<font color="#E5E5E5"> of our</font><font color="#CCCCCC"> DM frame</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> J</font><font color="#E5E5E5"> it's the</font>

294
00:16:09,119 --> 00:16:16,679
amount<font color="#E5E5E5"> of interference cancellations</font>

295
00:16:11,489 --> 00:16:19,409
iterations<font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> I mentioned that we</font>

296
00:16:16,679 --> 00:16:23,220
will have managed interference between

297
00:16:19,409 --> 00:16:24,809
different subcarriers<font color="#CCCCCC"> well we have we</font>

298
00:16:23,220 --> 00:16:27,599
allowed that<font color="#CCCCCC"> in the first</font><font color="#E5E5E5"> place so now</font>

299
00:16:24,809 --> 00:16:32,429
we<font color="#E5E5E5"> need to cancel it out in a smart way</font>

300
00:16:27,599 --> 00:16:34,529
<font color="#CCCCCC">and then we want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify which parts</font>

301
00:16:32,429 --> 00:16:39,600
of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> actually taking</font><font color="#E5E5E5"> up</font>

302
00:16:34,529 --> 00:16:43,769
<font color="#CCCCCC">most time and which parameters need to</font>

303
00:16:39,600 --> 00:16:47,759
<font color="#E5E5E5">be chosen carefully</font><font color="#CCCCCC"> such that</font><font color="#E5E5E5"> the system</font>

304
00:16:43,769 --> 00:16:50,369
does<font color="#E5E5E5"> not well exhibit bad performance</font>

305
00:16:47,759 --> 00:16:53,489
like the latency will go up by

306
00:16:50,369 --> 00:16:55,649
tremendously or the<font color="#E5E5E5"> throughput will just</font>

307
00:16:53,489 --> 00:16:59,999
<font color="#CCCCCC">decrease up to the</font><font color="#E5E5E5"> point where it's not</font>

308
00:16:55,649 --> 00:17:03,509
usable anymore<font color="#E5E5E5"> for us</font><font color="#CCCCCC"> okay so let's</font>

309
00:16:59,999 --> 00:17:06,240
first look<font color="#E5E5E5"> at the transmit side</font><font color="#CCCCCC"> we have</font>

310
00:17:03,509 --> 00:17:08,189
three parts<font color="#E5E5E5"> we have mapper we have a</font>

311
00:17:06,240 --> 00:17:12,240
modulator and<font color="#CCCCCC"> we have like a prix fixe</font>

312
00:17:08,189 --> 00:17:15,870
<font color="#CCCCCC">addition and as you can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> resource</font>

313
00:17:12,240 --> 00:17:19,529
mapping<font color="#CCCCCC"> in cyclic prefix addition just</font>

314
00:17:15,869 --> 00:17:22,079
don't play a role here<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are less</font>

315
00:17:19,529 --> 00:17:24,898
<font color="#CCCCCC">than one or two</font><font color="#E5E5E5"> microseconds for every</font>

316
00:17:22,079 --> 00:17:30,480
frame so the interesting<font color="#CCCCCC"> part is</font>

317
00:17:24,898 --> 00:17:34,049
actually the<font color="#CCCCCC"> modulator</font><font color="#E5E5E5"> and you can see</font>

318
00:17:30,480 --> 00:17:39,740
that for<font color="#E5E5E5"> two parameter settings</font>

319
00:17:34,049 --> 00:17:43,289
I choose 128 or 64<font color="#CCCCCC"> subcarriers here</font><font color="#E5E5E5"> and</font>

320
00:17:39,740 --> 00:17:44,580
then you just<font color="#CCCCCC"> vary the number of times</font>

321
00:17:43,289 --> 00:17:46,950
<font color="#CCCCCC">thoughts you</font><font color="#E5E5E5"> have</font>

322
00:17:44,580 --> 00:17:50,340
you might wonder<font color="#E5E5E5"> why do don't we just</font>

323
00:17:46,950 --> 00:17:53,399
choose powers<font color="#CCCCCC"> of two for our</font><font color="#E5E5E5"> modulation</font>

324
00:17:50,340 --> 00:17:58,830
<font color="#CCCCCC">well if you look at literature</font><font color="#E5E5E5"> again</font>

325
00:17:53,399 --> 00:18:02,760
<font color="#E5E5E5">you'll see that you can't actually use G</font>

326
00:17:58,830 --> 00:18:06,149
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> M with integer powers in time and</font>

327
00:18:02,760 --> 00:18:08,700
frequency at the<font color="#E5E5E5"> same time so we end up</font>

328
00:18:06,149 --> 00:18:11,428
<font color="#E5E5E5">with this kind of weird well use here</font>

329
00:18:08,700 --> 00:18:14,100
and that also brings us to the reason

330
00:18:11,429 --> 00:18:19,909
<font color="#CCCCCC">why this</font><font color="#E5E5E5"> is not</font><font color="#CCCCCC"> just linearly increasing</font>

331
00:18:14,100 --> 00:18:22,799
but if we have a look at well the<font color="#CCCCCC"> fftw</font>

332
00:18:19,909 --> 00:18:28,019
implementation that does the<font color="#E5E5E5"> Fourier</font>

333
00:18:22,799 --> 00:18:30,450
<font color="#E5E5E5">transforms for us if we have small prime</font>

334
00:18:28,019 --> 00:18:35,340
factors for example<font color="#CCCCCC"> here if</font><font color="#E5E5E5"> you look at</font>

335
00:18:30,450 --> 00:18:38,789
these<font color="#CCCCCC"> values sorry</font><font color="#E5E5E5"> this will you that's</font>

336
00:18:35,340 --> 00:18:41,760
the dot here<font color="#E5E5E5"> have small prime factors so</font>

337
00:18:38,789 --> 00:18:45,510
our Fourier transform can<font color="#E5E5E5"> be implemented</font>

338
00:18:41,760 --> 00:18:48,510
quite efficiently and it's quite fast<font color="#CCCCCC"> if</font>

339
00:18:45,510 --> 00:18:51,149
<font color="#E5E5E5">you have a look at this</font><font color="#CCCCCC"> value here so</font>

340
00:18:48,510 --> 00:18:53,700
that's that dot here we have quite<font color="#E5E5E5"> large</font>

341
00:18:51,149 --> 00:18:59,789
prime factors<font color="#CCCCCC"> nineteen is already large</font>

342
00:18:53,700 --> 00:19:04,019
here so our implementation will increase

343
00:18:59,789 --> 00:19:09,210
in terms of latency<font color="#CCCCCC"> so we need to choose</font>

344
00:19:04,019 --> 00:19:12,600
our<font color="#CCCCCC"> parameters here very carefully</font><font color="#E5E5E5"> okay</font>

345
00:19:09,210 --> 00:19:15,149
so now we know<font color="#CCCCCC"> that on the</font><font color="#E5E5E5"> other side</font>

346
00:19:12,600 --> 00:19:22,110
<font color="#CCCCCC">and the receiver side</font><font color="#E5E5E5"> we first start</font>

347
00:19:15,149 --> 00:19:25,080
with synchronization<font color="#E5E5E5"> since we have a</font>

348
00:19:22,110 --> 00:19:28,860
system where<font color="#CCCCCC"> we expect quite</font><font color="#E5E5E5"> highest in</font>

349
00:19:25,080 --> 00:19:30,899
ours like<font color="#E5E5E5"> ten</font><font color="#CCCCCC"> newbies of something</font><font color="#E5E5E5"> we</font>

350
00:19:28,860 --> 00:19:34,469
will always<font color="#E5E5E5"> start with energy detection</font>

351
00:19:30,899 --> 00:19:38,309
which is quite fast<font color="#E5E5E5"> and then just search</font>

352
00:19:34,470 --> 00:19:41,490
for<font color="#E5E5E5"> the correct symbol start or frame</font>

353
00:19:38,309 --> 00:19:44,158
start in a certain window<font color="#E5E5E5"> and now here</font>

354
00:19:41,490 --> 00:19:46,970
<font color="#E5E5E5">you can see</font><font color="#CCCCCC"> that depending</font><font color="#E5E5E5"> on the number</font>

355
00:19:44,159 --> 00:19:50,429
<font color="#CCCCCC">of subcarriers our implementation</font>

356
00:19:46,970 --> 00:19:53,520
increases<font color="#E5E5E5"> in terms of latency here so</font>

357
00:19:50,429 --> 00:19:58,010
one frame<font color="#E5E5E5"> we want to just synchronize</font>

358
00:19:53,520 --> 00:19:59,820
find the correct position of our frame

359
00:19:58,010 --> 00:20:03,000
<font color="#CCCCCC">depending on</font><font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of subcarriers</font>

360
00:19:59,820 --> 00:20:12,840
<font color="#E5E5E5">this might take like 18 microseconds</font><font color="#CCCCCC"> for</font>

361
00:20:03,000 --> 00:20:16,350
or over 40<font color="#E5E5E5"> okay next up the most</font>

362
00:20:12,840 --> 00:20:21,720
important part demodulation<font color="#E5E5E5"> here you can</font>

363
00:20:16,350 --> 00:20:24,330
see that again<font color="#E5E5E5"> we have this behavior</font><font color="#CCCCCC"> due</font>

364
00:20:21,720 --> 00:20:30,270
<font color="#E5E5E5">to prime factors here and our Fourier</font>

365
00:20:24,330 --> 00:20:33,590
transform so we should again<font color="#CCCCCC"> choose our</font>

366
00:20:30,270 --> 00:20:37,050
values<font color="#E5E5E5"> here wisely but also we can see</font>

367
00:20:33,590 --> 00:20:39,270
if you need<font color="#E5E5E5"> to do more interference</font>

368
00:20:37,050 --> 00:20:44,700
cancellation<font color="#CCCCCC"> of course that will</font><font color="#E5E5E5"> add up</font>

369
00:20:39,270 --> 00:20:48,420
<font color="#CCCCCC">to our latency as well but actually not</font>

370
00:20:44,700 --> 00:20:51,270
too much it's<font color="#CCCCCC"> not like we can't afford a</font>

371
00:20:48,420 --> 00:20:54,510
few iterations of interference

372
00:20:51,270 --> 00:21:01,200
cancellation without going over our

373
00:20:54,510 --> 00:21:03,660
latency budget so it's already<font color="#CCCCCC"> already</font>

374
00:21:01,200 --> 00:21:07,800
almost<font color="#E5E5E5"> it</font><font color="#CCCCCC"> I want to come to my</font>

375
00:21:03,660 --> 00:21:12,110
conclusion here<font color="#E5E5E5"> they have a look at the</font>

376
00:21:07,800 --> 00:21:17,460
overall agency<font color="#E5E5E5"> budget of a system that</font>

377
00:21:12,110 --> 00:21:20,399
we designed for<font color="#E5E5E5"> two</font><font color="#CCCCCC"> different numbers of</font>

378
00:21:17,460 --> 00:21:25,280
<font color="#CCCCCC">sub carriers</font><font color="#E5E5E5"> and here I just</font><font color="#CCCCCC"> brought a</font>

379
00:21:20,400 --> 00:21:28,350
<font color="#E5E5E5">little example so if you think</font><font color="#CCCCCC"> back well</font>

380
00:21:25,280 --> 00:21:33,090
64 sub carriers we have 21 times

381
00:21:28,350 --> 00:21:35,730
thoughts<font color="#E5E5E5"> so that translates 2344 complex</font>

382
00:21:33,090 --> 00:21:40,169
symbols<font color="#E5E5E5"> we could possibly squeeze</font><font color="#CCCCCC"> into</font>

383
00:21:35,730 --> 00:21:42,210
one<font color="#E5E5E5"> g of the M frame and we now</font><font color="#CCCCCC"> think of</font>

384
00:21:40,170 --> 00:21:44,700
it that<font color="#CCCCCC"> we're running 20 mega samples</font>

385
00:21:42,210 --> 00:21:47,640
per second so<font color="#CCCCCC"> we occupy it like 20</font>

386
00:21:44,700 --> 00:21:50,670
megahertz of bandwidth<font color="#CCCCCC"> we have an</font><font color="#E5E5E5"> air</font>

387
00:21:47,640 --> 00:21:54,809
<font color="#E5E5E5">time of roughly seventy four</font>

388
00:21:50,670 --> 00:21:59,850
microseconds we then add<font color="#E5E5E5"> another one by</font>

389
00:21:54,809 --> 00:22:05,629
processing delay of a hundred<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I know</font>

390
00:21:59,850 --> 00:22:09,449
of 92<font color="#E5E5E5"> microseconds</font><font color="#CCCCCC"> so if we just</font><font color="#E5E5E5"> go from</font>

391
00:22:05,630 --> 00:22:10,980
transmitter to receiver<font color="#E5E5E5"> latency will be</font>

392
00:22:09,450 --> 00:22:17,580
around

393
00:22:10,980 --> 00:22:21,030
<font color="#E5E5E5">roughly around 166 microseconds and then</font>

394
00:22:17,580 --> 00:22:23,809
in the end<font color="#E5E5E5"> and then if we</font><font color="#CCCCCC"> think bag of</font>

395
00:22:21,030 --> 00:22:27,660
the<font color="#CCCCCC"> this circle in the beginning our</font>

396
00:22:23,809 --> 00:22:31,740
<font color="#CCCCCC">round-trip time will be in the well</font>

397
00:22:27,660 --> 00:22:34,309
somewhere<font color="#E5E5E5"> in that range so free onion 30</font>

398
00:22:31,740 --> 00:22:40,140
microseconds<font color="#CCCCCC"> so that's what we need to</font>

399
00:22:34,309 --> 00:22:43,980
expect from such a system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that in</font>

400
00:22:40,140 --> 00:22:45,900
terms just proves<font color="#E5E5E5"> the point that we can</font>

401
00:22:43,980 --> 00:22:46,970
<font color="#CCCCCC">actually do a load latency SDR</font>

402
00:22:45,900 --> 00:22:50,460
implementation

403
00:22:46,970 --> 00:23:01,799
whooping radio and thanks for<font color="#CCCCCC"> our your</font>

404
00:22:50,460 --> 00:23:18,419
attention<font color="#CCCCCC"> yes maybe one time for one</font>

405
00:23:01,799 --> 00:23:21,540
<font color="#E5E5E5">question so yeah yeah here yeah so</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> we</font>

406
00:23:18,419 --> 00:23:24,540
also improve reliability<font color="#E5E5E5"> that was the</font>

407
00:23:21,540 --> 00:23:31,440
<font color="#CCCCCC">question or</font><font color="#E5E5E5"> in this work we only looked</font>

408
00:23:24,540 --> 00:23:34,470
at<font color="#E5E5E5"> low latency but a few thing bag of</font>

409
00:23:31,440 --> 00:23:37,169
how he talked<font color="#E5E5E5"> about imperfections of our</font>

410
00:23:34,470 --> 00:23:40,260
channel<font color="#CCCCCC"> it for</font><font color="#E5E5E5"> example if we have</font>

411
00:23:37,169 --> 00:23:43,970
<font color="#E5E5E5">offsets</font><font color="#CCCCCC"> that we might not be able to</font>

412
00:23:40,260 --> 00:23:50,850
<font color="#CCCCCC">compensate for then G</font><font color="#E5E5E5"> of them would also</font>

413
00:23:43,970 --> 00:23:54,230
show quite favorable figures<font color="#E5E5E5"> in terms</font><font color="#CCCCCC"> of</font>

414
00:23:50,850 --> 00:23:54,230
reliability<font color="#E5E5E5"> yeah</font>

415
00:23:56,810 --> 00:24:33,480
yes<font color="#E5E5E5"> yeah that's a good</font><font color="#CCCCCC"> question so</font><font color="#E5E5E5"> okay</font>

416
00:24:31,560 --> 00:24:35,639
<font color="#CCCCCC">um keep it quick</font>

417
00:24:33,480 --> 00:24:39,960
why would I want to<font color="#E5E5E5"> have an SDR an</font>

418
00:24:35,640 --> 00:24:42,690
industry 4.0 application<font color="#E5E5E5"> well we want to</font>

419
00:24:39,960 --> 00:24:44,790
have it as<font color="#CCCCCC"> flexible as possible so we</font>

420
00:24:42,690 --> 00:24:49,190
<font color="#E5E5E5">can just play</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> with our parameters</font>

421
00:24:44,790 --> 00:24:52,080
and everything and and the thing that

422
00:24:49,190 --> 00:24:55,050
doing everything in software it's just

423
00:24:52,080 --> 00:24:57,149
the easier way to go<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> more</font>

424
00:24:55,050 --> 00:24:59,159
flexible it's faster<font color="#CCCCCC"> to implement and</font>

425
00:24:57,150 --> 00:25:02,070
everything if you start<font color="#E5E5E5"> to implemented</font>

426
00:24:59,160 --> 00:25:03,690
on<font color="#E5E5E5"> FPGAs you have to open up</font><font color="#CCCCCC"> just so</font>

427
00:25:02,070 --> 00:25:07,970
many more questions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font>

428
00:25:03,690 --> 00:25:12,170
<font color="#E5E5E5">answer besides all the algorithms so</font>

429
00:25:07,970 --> 00:25:12,170
that's the<font color="#E5E5E5"> reason for it</font>

430
00:25:12,900 --> 00:25:17,279
[Applause]

