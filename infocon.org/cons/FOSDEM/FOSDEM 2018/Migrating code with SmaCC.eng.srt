1
00:00:04,630 --> 00:00:11,320
so yeah I'm John Brant<font color="#E5E5E5"> and for about 25</font>

2
00:00:09,100 --> 00:00:14,770
years<font color="#CCCCCC"> now I've been building tools to</font>

3
00:00:11,320 --> 00:00:18,400
refactor<font color="#CCCCCC"> code or migrate code</font><font color="#E5E5E5"> transform</font>

4
00:00:14,770 --> 00:00:20,680
codes and I started out building tools

5
00:00:18,400 --> 00:00:23,919
and small talk for refactoring small

6
00:00:20,680 --> 00:00:26,680
talk then I went to migrating small talk

7
00:00:23,920 --> 00:00:31,480
using the same tools<font color="#E5E5E5"> and now I</font><font color="#CCCCCC"> migrate</font>

8
00:00:26,680 --> 00:00:34,750
pretty much any code to<font color="#E5E5E5"> other code so</font>

9
00:00:31,480 --> 00:00:37,120
there's<font color="#E5E5E5"> many ways to migrate code</font><font color="#CCCCCC"> and I</font>

10
00:00:34,750 --> 00:00:38,890
<font color="#E5E5E5">have this is kind of my strategy so</font>

11
00:00:37,120 --> 00:00:40,568
first thing<font color="#E5E5E5"> you have to define the</font>

12
00:00:38,890 --> 00:00:44,409
<font color="#E5E5E5">parser for whatever language you're</font>

13
00:00:40,569 --> 00:00:45,940
<font color="#CCCCCC">going to migrate</font><font color="#E5E5E5"> from a lot of times we</font>

14
00:00:44,409 --> 00:00:49,300
already have the parser<font color="#E5E5E5"> but sometimes</font>

15
00:00:45,940 --> 00:00:50,739
you don't so find a parser the next

16
00:00:49,300 --> 00:00:53,919
thing is you create your transformation

17
00:00:50,739 --> 00:00:56,409
program that's going<font color="#E5E5E5"> to basically run</font>

18
00:00:53,920 --> 00:00:59,710
and convert all<font color="#CCCCCC"> your</font><font color="#E5E5E5"> code to the the new</font>

19
00:00:56,409 --> 00:01:01,359
new language and one of the final things

20
00:00:59,710 --> 00:01:03,459
<font color="#E5E5E5">as a lot of times</font><font color="#CCCCCC"> will have to have a</font>

21
00:01:01,359 --> 00:01:05,110
<font color="#E5E5E5">compatibility</font><font color="#CCCCCC"> layer because there's</font>

22
00:01:03,459 --> 00:01:07,030
features and the old language<font color="#E5E5E5"> that</font>

23
00:01:05,110 --> 00:01:14,560
aren't available in the new<font color="#CCCCCC"> language and</font>

24
00:01:07,030 --> 00:01:17,110
<font color="#E5E5E5">will need to support those now</font><font color="#CCCCCC"> SMAC</font>

25
00:01:14,560 --> 00:01:20,259
itself just handles the first<font color="#E5E5E5"> two the</font>

26
00:01:17,110 --> 00:01:24,509
<font color="#E5E5E5">compatibility layers all up to you but</font>

27
00:01:20,259 --> 00:01:28,390
<font color="#CCCCCC">SMAC can help you</font><font color="#E5E5E5"> both on the first two</font>

28
00:01:24,509 --> 00:01:31,479
and the good thing about this migration

29
00:01:28,390 --> 00:01:33,219
<font color="#E5E5E5">strategy is that essentially the</font>

30
00:01:31,479 --> 00:01:36,390
developers<font color="#E5E5E5"> can continue the normal</font>

31
00:01:33,219 --> 00:01:39,699
development<font color="#E5E5E5"> he's in the old system we so</font>

32
00:01:36,390 --> 00:01:43,270
really<font color="#E5E5E5"> this is a risk as long you know</font>

33
00:01:39,700 --> 00:01:47,140
they they can develop<font color="#E5E5E5"> I can go in and</font>

34
00:01:43,270 --> 00:01:49,240
<font color="#E5E5E5">define the rules do all that work</font><font color="#CCCCCC"> and so</font>

35
00:01:47,140 --> 00:01:53,320
you're not stopping development<font color="#E5E5E5"> if I</font>

36
00:01:49,240 --> 00:01:56,439
fail all<font color="#E5E5E5"> it is is you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> I I didn't</font>

37
00:01:53,320 --> 00:02:00,398
<font color="#CCCCCC">for you know they</font><font color="#E5E5E5"> they can still</font><font color="#CCCCCC"> use the</font>

38
00:01:56,439 --> 00:02:01,839
<font color="#CCCCCC">old system the bad bad part about</font><font color="#E5E5E5"> this</font>

39
00:02:00,399 --> 00:02:04,539
and the reason<font color="#CCCCCC"> why most people</font><font color="#E5E5E5"> don't</font>

40
00:02:01,840 --> 00:02:07,359
like these migrations is it keeps the

41
00:02:04,539 --> 00:02:09,490
same<font color="#E5E5E5"> design so if you had a you know a</font>

42
00:02:07,359 --> 00:02:14,710
poor program before<font color="#CCCCCC"> you'll still</font><font color="#E5E5E5"> have a</font>

43
00:02:09,490 --> 00:02:17,200
poor program after this strategy works

44
00:02:14,710 --> 00:02:18,190
fairly<font color="#CCCCCC"> well for probably</font><font color="#E5E5E5"> a hundred</font>

45
00:02:17,200 --> 00:02:21,459
<font color="#E5E5E5">thousand line</font>

46
00:02:18,190 --> 00:02:23,410
<font color="#CCCCCC">per grams</font><font color="#E5E5E5"> and up anything</font><font color="#CCCCCC"> smaller than</font>

47
00:02:21,460 --> 00:02:25,720
that you're probably getting into

48
00:02:23,410 --> 00:02:28,720
overhead that<font color="#E5E5E5"> you might just rewrite</font><font color="#CCCCCC"> up</font>

49
00:02:25,720 --> 00:02:31,510
my hand or use some other methods<font color="#CCCCCC"> most</font>

50
00:02:28,720 --> 00:02:34,000
of the projects I've<font color="#CCCCCC"> done have been in</font>

51
00:02:31,510 --> 00:02:37,030
<font color="#E5E5E5">the range of 1 million lines I've done</font>

52
00:02:34,000 --> 00:02:44,620
probably from a hundred thousand<font color="#CCCCCC"> at 6</font>

53
00:02:37,030 --> 00:02:48,070
million<font color="#CCCCCC"> or so</font><font color="#E5E5E5"> so smack itself</font><font color="#CCCCCC"> especially</font>

54
00:02:44,620 --> 00:02:50,380
<font color="#CCCCCC">just a standard parser generator</font><font color="#E5E5E5"> kind of</font>

55
00:02:48,070 --> 00:02:52,840
like long lines of yak or bison or

56
00:02:50,380 --> 00:02:55,750
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that it's an lalr parser</font>

57
00:02:52,840 --> 00:03:00,520
generator and lr 1 parser generator<font color="#CCCCCC"> it</font>

58
00:02:55,750 --> 00:03:04,090
sports the GL are<font color="#E5E5E5"> the generalized</font><font color="#CCCCCC"> lr so</font>

59
00:03:00,520 --> 00:03:08,290
that can do ambiguous<font color="#E5E5E5"> grammars</font><font color="#CCCCCC"> it can</font>

60
00:03:04,090 --> 00:03:11,040
also<font color="#E5E5E5"> generate a STS</font><font color="#CCCCCC"> and it does some</font>

61
00:03:08,290 --> 00:03:11,040
pattern matching

62
00:03:13,050 --> 00:03:19,950
so<font color="#CCCCCC"> here here's a basic grammar for a</font>

63
00:03:16,260 --> 00:03:24,810
simple expression<font color="#E5E5E5"> you know I guess it's</font>

64
00:03:19,950 --> 00:03:26,519
just a just simple addition where you

65
00:03:24,810 --> 00:03:28,740
can have number plus a<font color="#E5E5E5"> number you can</font>

66
00:03:26,520 --> 00:03:31,110
<font color="#CCCCCC">put</font><font color="#E5E5E5"> parentheses around it now all the</font>

67
00:03:28,740 --> 00:03:33,450
code if you<font color="#E5E5E5"> remove out all the</font>

68
00:03:31,110 --> 00:03:35,880
<font color="#E5E5E5">underlying code that's just the grammar</font>

69
00:03:33,450 --> 00:03:39,750
for<font color="#E5E5E5"> that the underlying code is for</font>

70
00:03:35,880 --> 00:03:42,630
defining the<font color="#CCCCCC"> ast</font><font color="#E5E5E5"> so you can see like the</font>

71
00:03:39,750 --> 00:03:45,300
first thing is the that<font color="#CCCCCC"> % root</font>

72
00:03:42,630 --> 00:03:47,640
expression essentially<font color="#E5E5E5"> that that defines</font>

73
00:03:45,300 --> 00:03:52,320
<font color="#E5E5E5">you the root of the hierarchy</font><font color="#CCCCCC"> for your</font>

74
00:03:47,640 --> 00:03:54,260
ast nodes suffix<font color="#E5E5E5"> is basically the suffix</font>

75
00:03:52,320 --> 00:03:58,140
we're going to put on all the nodes<font color="#E5E5E5"> so</font>

76
00:03:54,260 --> 00:03:59,910
then then in each one of<font color="#CCCCCC"> those we can</font>

77
00:03:58,140 --> 00:04:01,529
<font color="#E5E5E5">define the variables so if</font><font color="#CCCCCC"> we have on</font>

78
00:03:59,910 --> 00:04:03,840
the first line<font color="#CCCCCC"> and expression or the</font>

79
00:04:01,530 --> 00:04:06,450
first production<font color="#E5E5E5"> and expression it says</font>

80
00:04:03,840 --> 00:04:07,970
we're<font color="#CCCCCC"> gonna have</font><font color="#E5E5E5"> for that addition</font>

81
00:04:06,450 --> 00:04:10,470
<font color="#CCCCCC">expression that</font><font color="#E5E5E5"> well I have</font><font color="#CCCCCC"> a left</font>

82
00:04:07,970 --> 00:04:13,290
<font color="#E5E5E5">variable that has holds the left</font>

83
00:04:10,470 --> 00:04:15,090
expression<font color="#E5E5E5"> the operator variables will</font>

84
00:04:13,290 --> 00:04:17,029
hold the operator token which will be

85
00:04:15,090 --> 00:04:19,350
just the plus then<font color="#E5E5E5"> we'll have the right</font>

86
00:04:17,029 --> 00:04:22,609
variables<font color="#E5E5E5"> will hold the right expression</font>

87
00:04:19,350 --> 00:04:24,870
and we'll<font color="#E5E5E5"> create a binary node for that</font>

88
00:04:22,610 --> 00:04:26,610
similarly like the<font color="#E5E5E5"> the second line we</font>

89
00:04:24,870 --> 00:04:29,370
<font color="#CCCCCC">have a left</font><font color="#E5E5E5"> grant and right crayon</font>

90
00:04:26,610 --> 00:04:34,260
<font color="#CCCCCC">however we do</font><font color="#E5E5E5"> not name the expression in</font>

91
00:04:29,370 --> 00:04:35,670
<font color="#CCCCCC">that line in that</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> SMAC will figure</font>

92
00:04:34,260 --> 00:04:38,550
out<font color="#CCCCCC"> that what you're really wanting to</font>

93
00:04:35,670 --> 00:04:41,120
<font color="#E5E5E5">do is add left paren and write cream to</font>

94
00:04:38,550 --> 00:04:44,640
<font color="#E5E5E5">whatever that expression returned and</font>

95
00:04:41,120 --> 00:04:46,230
since it sees that the type of<font color="#E5E5E5"> that node</font>

96
00:04:44,640 --> 00:04:48,900
is<font color="#E5E5E5"> going to be an</font><font color="#CCCCCC"> expression it can</font>

97
00:04:46,230 --> 00:04:52,920
<font color="#CCCCCC">actually figure out that what you want</font>

98
00:04:48,900 --> 00:04:53,849
<font color="#E5E5E5">is a collection of</font><font color="#CCCCCC"> variables with the</font>

99
00:04:52,920 --> 00:04:56,010
<font color="#CCCCCC">left Rian's</font>

100
00:04:53,850 --> 00:04:57,870
multiple or collection of left<font color="#E5E5E5"> parens</font>

101
00:04:56,010 --> 00:05:01,140
and<font color="#E5E5E5"> election right friends on each</font>

102
00:04:57,870 --> 00:05:03,980
expression<font color="#E5E5E5"> node so from that grammar we</font>

103
00:05:01,140 --> 00:05:06,000
generate essentially<font color="#E5E5E5"> these three classes</font>

104
00:05:03,980 --> 00:05:08,280
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the expression though</font><font color="#E5E5E5"> being the</font>

105
00:05:06,000 --> 00:05:10,620
root we<font color="#CCCCCC"> have our left parens being a</font>

106
00:05:08,280 --> 00:05:12,780
<font color="#E5E5E5">collection of parentheses or collection</font>

107
00:05:10,620 --> 00:05:14,250
<font color="#CCCCCC">of prints</font><font color="#E5E5E5"> the tokens right friends being</font>

108
00:05:12,780 --> 00:05:17,130
<font color="#CCCCCC">the</font><font color="#E5E5E5"> collection</font><font color="#CCCCCC"> of the right prints the</font>

109
00:05:14,250 --> 00:05:19,110
tokens<font color="#CCCCCC"> that and all nodes will have</font><font color="#E5E5E5"> that</font>

110
00:05:17,130 --> 00:05:20,800
<font color="#E5E5E5">the binary node will</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> our left and</font>

111
00:05:19,110 --> 00:05:27,909
<font color="#CCCCCC">right was the operator and then</font>

112
00:05:20,800 --> 00:05:29,800
number and<font color="#CCCCCC"> will have the value</font><font color="#E5E5E5"> now the</font>

113
00:05:27,909 --> 00:05:32,590
transformation<font color="#E5E5E5"> program is really where</font>

114
00:05:29,800 --> 00:05:34,659
<font color="#CCCCCC">all the work really</font><font color="#E5E5E5"> takes</font><font color="#CCCCCC"> place</font><font color="#E5E5E5"> in the</font>

115
00:05:32,590 --> 00:05:36,669
project because<font color="#E5E5E5"> there's where you're</font>

116
00:05:34,659 --> 00:05:40,509
<font color="#E5E5E5">writing your rules to convert everything</font>

117
00:05:36,669 --> 00:05:43,150
<font color="#E5E5E5">and for the smack it has basically a set</font>

118
00:05:40,509 --> 00:05:45,250
of<font color="#CCCCCC"> rules</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not a set more it's an</font>

119
00:05:43,150 --> 00:05:47,679
ordered list of rules<font color="#CCCCCC"> applied</font><font color="#E5E5E5"> in order</font>

120
00:05:45,250 --> 00:05:50,590
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> can define some methods and</font>

121
00:05:47,680 --> 00:05:55,659
properties that<font color="#CCCCCC"> you can use for the in</font>

122
00:05:50,590 --> 00:05:57,878
those<font color="#E5E5E5"> rules</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are essentially two</font>

123
00:05:55,659 --> 00:06:00,219
<font color="#CCCCCC">different types of the rules there</font><font color="#E5E5E5"> is</font>

124
00:05:57,879 --> 00:06:03,669
the clarity<font color="#CCCCCC"> of pattern rules</font><font color="#E5E5E5"> and there's</font>

125
00:06:00,219 --> 00:06:05,800
the imperative coding rules imperative

126
00:06:03,669 --> 00:06:08,258
coding<font color="#E5E5E5"> rules basically gives you small</font>

127
00:06:05,800 --> 00:06:10,300
talk<font color="#E5E5E5"> you can write whatever you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> it</font>

128
00:06:08,259 --> 00:06:12,340
doesn't<font color="#CCCCCC"> have to do anything perm</font><font color="#E5E5E5"> the</font>

129
00:06:10,300 --> 00:06:15,460
migration you can write stuff<font color="#CCCCCC"> that</font><font color="#E5E5E5"> loads</font>

130
00:06:12,340 --> 00:06:17,948
files or whatever<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just lets you</font><font color="#E5E5E5"> do</font>

131
00:06:15,460 --> 00:06:20,590
about anything<font color="#E5E5E5"> generally those type</font><font color="#CCCCCC"> of</font>

132
00:06:17,949 --> 00:06:23,740
rules we<font color="#CCCCCC"> used for the</font><font color="#E5E5E5"> generic and</font>

133
00:06:20,590 --> 00:06:27,130
general syntax<font color="#E5E5E5"> so if you're converting a</font>

134
00:06:23,740 --> 00:06:28,900
method or a class<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the one that</font>

135
00:06:27,130 --> 00:06:30,520
will convert all the syntax for<font color="#CCCCCC"> the</font>

136
00:06:28,900 --> 00:06:33,250
method<font color="#E5E5E5"> or</font><font color="#CCCCCC"> class</font><font color="#E5E5E5"> a lot of times in those</font>

137
00:06:30,520 --> 00:06:35,049
imperative rules<font color="#E5E5E5"> and they can also do</font>

138
00:06:33,250 --> 00:06:38,740
some control flow so if you want<font color="#E5E5E5"> to</font>

139
00:06:35,050 --> 00:06:40,539
process one section of<font color="#CCCCCC"> a AST before</font>

140
00:06:38,740 --> 00:06:44,830
another section of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AST that's what</font>

141
00:06:40,539 --> 00:06:47,139
they handle now the pattern rules<font color="#E5E5E5"> a lot</font>

142
00:06:44,830 --> 00:06:50,050
<font color="#E5E5E5">of times we</font><font color="#CCCCCC"> use those for</font><font color="#E5E5E5"> things that</font>

143
00:06:47,139 --> 00:06:52,029
are one-off so you're in the middle<font color="#CCCCCC"> of a</font>

144
00:06:50,050 --> 00:06:54,219
file<font color="#CCCCCC"> you notice this one expression</font>

145
00:06:52,029 --> 00:06:55,900
<font color="#E5E5E5">needs to be treated</font><font color="#CCCCCC"> differently than</font>

146
00:06:54,219 --> 00:06:57,849
every place else<font color="#E5E5E5"> you've had that</font>

147
00:06:55,900 --> 00:07:00,400
expression<font color="#CCCCCC"> there might be something</font>

148
00:06:57,849 --> 00:07:01,840
special<font color="#E5E5E5"> in the context so you can write</font>

149
00:07:00,400 --> 00:07:05,378
a pattern rule just for that one

150
00:07:01,840 --> 00:07:06,729
<font color="#CCCCCC">location and the good thing about</font><font color="#E5E5E5"> those</font>

151
00:07:05,379 --> 00:07:08,949
are they're fairly<font color="#E5E5E5"> quick</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write</font>

152
00:07:06,729 --> 00:07:13,770
because<font color="#E5E5E5"> they look</font><font color="#CCCCCC"> exactly like the code</font>

153
00:07:08,949 --> 00:07:13,770
and you<font color="#CCCCCC"> can transform them that way</font>

154
00:07:15,259 --> 00:07:23,580
so in the pattern<font color="#CCCCCC"> rules</font><font color="#E5E5E5"> essentially the</font>

155
00:07:18,539 --> 00:07:27,060
search expression<font color="#E5E5E5"> is just a normal text</font>

156
00:07:23,580 --> 00:07:28,979
string like you have an ax<font color="#CCCCCC"> from your</font>

157
00:07:27,060 --> 00:07:31,379
<font color="#E5E5E5">program except that you have these</font>

158
00:07:28,979 --> 00:07:35,580
patterns patterns in the middle of them

159
00:07:31,379 --> 00:07:39,060
<font color="#E5E5E5">and on the search part</font><font color="#CCCCCC"> it gets parsed</font>

160
00:07:35,580 --> 00:07:41,128
into<font color="#E5E5E5"> an</font><font color="#CCCCCC"> ast on the replace side the</font>

161
00:07:39,060 --> 00:07:46,710
whole pattern is just<font color="#E5E5E5"> a string that gets</font>

162
00:07:41,129 --> 00:07:50,250
macro expanded in order<font color="#E5E5E5"> to support</font>

163
00:07:46,710 --> 00:07:53,130
pattern matching<font color="#E5E5E5"> and our parser we have</font>

164
00:07:50,250 --> 00:07:56,220
to define first that needs to<font color="#E5E5E5"> be a d lr</font>

165
00:07:53,130 --> 00:07:58,500
parser because what we do is every<font color="#E5E5E5"> place</font>

166
00:07:56,220 --> 00:08:04,860
you have<font color="#E5E5E5"> the pattern in there we have to</font>

167
00:07:58,500 --> 00:08:07,259
<font color="#CCCCCC">parse all possible all possible</font><font color="#E5E5E5"> trees</font>

168
00:08:04,860 --> 00:08:09,870
with that pattern<font color="#E5E5E5"> in there so the</font>

169
00:08:07,259 --> 00:08:12,870
pattern could our example<font color="#CCCCCC"> here</font><font color="#E5E5E5"> the</font>

170
00:08:09,870 --> 00:08:14,729
pattern kid match a<font color="#E5E5E5"> binary node maybe or</font>

171
00:08:12,870 --> 00:08:16,500
a<font color="#E5E5E5"> pattern can batch in number node we</font>

172
00:08:14,729 --> 00:08:19,258
might have to parse<font color="#E5E5E5"> you know all</font>

173
00:08:16,500 --> 00:08:21,719
possible interpretations of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so neat</font>

174
00:08:19,259 --> 00:08:25,169
<font color="#E5E5E5">the</font><font color="#CCCCCC"> gr parser we also need</font><font color="#E5E5E5"> the pattern</font>

175
00:08:21,719 --> 00:08:28,919
token since you know various languages

176
00:08:25,169 --> 00:08:33,240
have different grammars you know we need

177
00:08:28,919 --> 00:08:35,370
<font color="#E5E5E5">to have something</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> let's does not</font>

178
00:08:33,240 --> 00:08:38,549
conflict<font color="#E5E5E5"> with the existing grammar so I</font>

179
00:08:35,370 --> 00:08:41,429
know most languages<font color="#CCCCCC"> no no do not use a</font>

180
00:08:38,549 --> 00:08:44,370
back<font color="#E5E5E5"> quit or back quote and so that's</font>

181
00:08:41,429 --> 00:08:45,719
what we normally is<font color="#E5E5E5"> so here we have the</font>

182
00:08:44,370 --> 00:08:47,190
<font color="#E5E5E5">pattern</font><font color="#CCCCCC"> token is going to be a back</font>

183
00:08:45,720 --> 00:08:51,180
quote followed by anything<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not a</font>

184
00:08:47,190 --> 00:08:53,220
back quote<font color="#CCCCCC"> and with a back quote</font><font color="#E5E5E5"> there's</font>

185
00:08:51,180 --> 00:08:56,550
languages like JavaScript now that's

186
00:08:53,220 --> 00:08:57,810
<font color="#E5E5E5">using back quote so</font><font color="#CCCCCC"> you might have</font><font color="#E5E5E5"> to do</font>

187
00:08:56,550 --> 00:09:00,329
something<font color="#E5E5E5"> different for those type of</font>

188
00:08:57,810 --> 00:09:03,079
languages and<font color="#E5E5E5"> that allows you</font><font color="#CCCCCC"> to specify</font>

189
00:09:00,329 --> 00:09:03,079
all you want

190
00:09:03,290 --> 00:09:09,380
so using<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can write then</font>

191
00:09:06,230 --> 00:09:12,500
expressions<font color="#E5E5E5"> like the one you see there</font>

192
00:09:09,380 --> 00:09:14,660
where you have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> plus a or the pattern</font>

193
00:09:12,500 --> 00:09:17,810
variable a plus the pattern variable a

194
00:09:14,660 --> 00:09:22,240
is going to<font color="#E5E5E5"> be rewritten by whatever the</font>

195
00:09:17,810 --> 00:09:25,010
pattern variable was a times two<font color="#CCCCCC"> and</font>

196
00:09:22,240 --> 00:09:27,740
they<font color="#E5E5E5"> say that pattern variable can match</font>

197
00:09:25,010 --> 00:09:34,580
any ast node<font color="#E5E5E5"> so it can match a single</font>

198
00:09:27,740 --> 00:09:37,730
<font color="#CCCCCC">number come a a a binary expression</font><font color="#E5E5E5"> so</font>

199
00:09:34,580 --> 00:09:40,910
here's our example or an example<font color="#E5E5E5"> we have</font>

200
00:09:37,730 --> 00:09:43,130
<font color="#CCCCCC">original code of</font><font color="#E5E5E5"> 3 plus</font><font color="#CCCCCC"> 3 and we're</font>

201
00:09:40,910 --> 00:09:46,030
going<font color="#CCCCCC"> to search for</font><font color="#E5E5E5"> the pattern a plus a</font>

202
00:09:43,130 --> 00:09:49,580
so what we do is we parse both of those

203
00:09:46,030 --> 00:09:51,949
so on the Left<font color="#E5E5E5"> we get the standard ast</font>

204
00:09:49,580 --> 00:09:53,330
<font color="#E5E5E5">and</font><font color="#CCCCCC"> on the right we get an AST but with</font>

205
00:09:51,950 --> 00:09:56,090
the pattern variables in there

206
00:09:53,330 --> 00:10:00,260
so we have the anything<font color="#CCCCCC"> node in there</font>

207
00:09:56,090 --> 00:10:03,260
<font color="#CCCCCC">and well we run unification across that</font>

208
00:10:00,260 --> 00:10:05,990
<font color="#E5E5E5">and we get the pattern variable a equals</font>

209
00:10:03,260 --> 00:10:08,120
<font color="#E5E5E5">3 now we add 3 plus 4 we'd run</font>

210
00:10:05,990 --> 00:10:11,590
unification unification would fail and

211
00:10:08,120 --> 00:10:11,590
so it<font color="#E5E5E5"> wouldn't match</font>

212
00:10:14,030 --> 00:10:18,709
now whenever<font color="#E5E5E5"> we have a replacement</font>

213
00:10:17,050 --> 00:10:21,410
<font color="#E5E5E5">replacement works a little bit</font>

214
00:10:18,710 --> 00:10:24,490
differently it's not we<font color="#CCCCCC"> don't parse the</font>

215
00:10:21,410 --> 00:10:27,860
expression we treat it as<font color="#E5E5E5"> a string macro</font>

216
00:10:24,490 --> 00:10:30,830
instead what we do<font color="#E5E5E5"> is whatever got</font>

217
00:10:27,860 --> 00:10:32,630
matched we just delete that<font color="#E5E5E5"> and replace</font>

218
00:10:30,830 --> 00:10:37,670
<font color="#E5E5E5">it</font><font color="#CCCCCC"> with whatever</font><font color="#E5E5E5"> that string macro</font>

219
00:10:32,630 --> 00:10:39,290
expanded out to this<font color="#E5E5E5"> I think this works</font>

220
00:10:37,670 --> 00:10:41,599
fairly well whenever you're converting

221
00:10:39,290 --> 00:10:43,459
<font color="#E5E5E5">from one language to another otherwise</font>

222
00:10:41,600 --> 00:10:45,110
you'd end up<font color="#CCCCCC"> with two</font><font color="#E5E5E5"> different parse</font>

223
00:10:43,460 --> 00:10:47,480
trees from two different<font color="#CCCCCC"> languages</font>

224
00:10:45,110 --> 00:10:49,780
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> they're in the same tree</font>

225
00:10:47,480 --> 00:10:54,140
essentially there are two different

226
00:10:49,780 --> 00:10:56,510
parse nodes from different<font color="#E5E5E5"> languages so</font>

227
00:10:54,140 --> 00:10:58,750
that's a reason<font color="#CCCCCC"> why</font><font color="#E5E5E5"> on the rewrite we</font>

228
00:10:56,510 --> 00:11:03,439
don't write rewrite trees we were

229
00:10:58,750 --> 00:11:05,900
<font color="#CCCCCC">rewriting</font><font color="#E5E5E5"> with strings so essentially</font>

230
00:11:03,440 --> 00:11:09,140
take the<font color="#E5E5E5"> string delete it and take the</font>

231
00:11:05,900 --> 00:11:13,699
replacement macro with the pattern macro

232
00:11:09,140 --> 00:11:16,640
and put in the whenever<font color="#CCCCCC"> we have the</font>

233
00:11:13,700 --> 00:11:19,460
pattern variable in there<font color="#E5E5E5"> bollocks we</font>

234
00:11:16,640 --> 00:11:21,939
process that that<font color="#E5E5E5"> subtree and whatever</font>

235
00:11:19,460 --> 00:11:27,560
<font color="#E5E5E5">it returns we put that in the macro and</font>

236
00:11:21,940 --> 00:11:31,640
replace that<font color="#E5E5E5"> so in our example we had</font>

237
00:11:27,560 --> 00:11:34,670
the replacement we wanted of<font color="#CCCCCC"> the pattern</font>

238
00:11:31,640 --> 00:11:36,800
variable<font color="#E5E5E5"> a times</font><font color="#CCCCCC"> two and we matched with</font>

239
00:11:34,670 --> 00:11:40,839
the pattern variable<font color="#E5E5E5"> a equal three so</font>

240
00:11:36,800 --> 00:11:44,300
replace everything with<font color="#E5E5E5"> three times two</font>

241
00:11:40,839 --> 00:11:46,900
so here's a<font color="#E5E5E5"> couple examples from some</font>

242
00:11:44,300 --> 00:11:51,410
migration<font color="#E5E5E5"> some</font><font color="#CCCCCC"> Delphi code that we did</font>

243
00:11:46,900 --> 00:11:54,110
the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> as one of</font><font color="#E5E5E5"> these kind of</font>

244
00:11:51,410 --> 00:11:55,699
one-off expressions you go through and

245
00:11:54,110 --> 00:11:58,420
you start to<font color="#CCCCCC"> migrate the code and</font><font color="#E5E5E5"> you</font>

246
00:11:55,700 --> 00:12:01,730
notice that some places they use this

247
00:11:58,420 --> 00:12:06,469
<font color="#E5E5E5">for loop which the ending condition was</font>

248
00:12:01,730 --> 00:12:08,510
<font color="#E5E5E5">minus one the normal for looping rewrite</font>

249
00:12:06,470 --> 00:12:11,360
would have been less than<font color="#E5E5E5"> or</font><font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to C</font>

250
00:12:08,510 --> 00:12:13,250
minus<font color="#E5E5E5"> one but we could change that to be</font>

251
00:12:11,360 --> 00:12:15,410
less than and make the code a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

252
00:12:13,250 --> 00:12:17,810
nicer<font color="#E5E5E5"> so that's the type of</font><font color="#CCCCCC"> one-off</font>

253
00:12:15,410 --> 00:12:19,130
expressions that<font color="#CCCCCC"> will we'll do in</font><font color="#E5E5E5"> the</font>

254
00:12:17,810 --> 00:12:21,579
pattern matching<font color="#CCCCCC"> to make the code a</font>

255
00:12:19,130 --> 00:12:25,490
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit nicer whenever it's converted</font>

256
00:12:21,580 --> 00:12:27,410
the second one is actually<font color="#E5E5E5"> some code</font>

257
00:12:25,490 --> 00:12:31,670
that<font color="#E5E5E5"> and.net</font>

258
00:12:27,410 --> 00:12:33,829
you're not able to set the minimum<font color="#E5E5E5"> size</font>

259
00:12:31,670 --> 00:12:35,420
or the minimum<font color="#E5E5E5"> height of a window by</font>

260
00:12:33,830 --> 00:12:37,210
<font color="#CCCCCC">itself you have</font><font color="#E5E5E5"> to set the minimum size</font>

261
00:12:35,420 --> 00:12:42,699
which includes<font color="#E5E5E5"> the height and the width</font>

262
00:12:37,210 --> 00:12:45,800
<font color="#E5E5E5">so what we do is whenever on on that</font>

263
00:12:42,700 --> 00:12:47,660
<font color="#CCCCCC">a-slash</font><font color="#E5E5E5"> forms</font><font color="#CCCCCC"> tea custom form what</font>

264
00:12:45,800 --> 00:12:50,569
that's essentially saying is we're<font color="#CCCCCC"> gonna</font>

265
00:12:47,660 --> 00:12:53,660
<font color="#E5E5E5">match some something we'll call it a but</font>

266
00:12:50,570 --> 00:12:55,690
it has to be<font color="#CCCCCC"> of type P custom form so if</font>

267
00:12:53,660 --> 00:12:59,300
you're doing<font color="#E5E5E5"> it from some other thing</font>

268
00:12:55,690 --> 00:13:01,340
<font color="#E5E5E5">it's not gonna match so the type of</font>

269
00:12:59,300 --> 00:13:08,479
<font color="#E5E5E5">whatever a is has to be a tea custom</font>

270
00:13:01,340 --> 00:13:11,240
form so then the code rules so code

271
00:13:08,480 --> 00:13:14,870
rules and smacker essentially just any

272
00:13:11,240 --> 00:13:18,920
small<font color="#E5E5E5"> talk expression for the the search</font>

273
00:13:14,870 --> 00:13:21,350
part what we do is we have an ast node

274
00:13:18,920 --> 00:13:24,069
that must match then some code but that

275
00:13:21,350 --> 00:13:27,100
<font color="#E5E5E5">returns if it</font><font color="#CCCCCC"> returns true then look</font>

276
00:13:24,070 --> 00:13:31,760
it's going<font color="#E5E5E5"> to match the replacement or</font>

277
00:13:27,100 --> 00:13:33,920
generally either<font color="#CCCCCC"> in three different</font>

278
00:13:31,760 --> 00:13:37,430
forms so<font color="#E5E5E5"> they're like edit expressions</font>

279
00:13:33,920 --> 00:13:41,630
so you can edit the<font color="#CCCCCC"> Edit the methods</font><font color="#E5E5E5"> or</font>

280
00:13:37,430 --> 00:13:43,729
<font color="#CCCCCC">edit the source code</font><font color="#E5E5E5"> control flow where</font>

281
00:13:41,630 --> 00:13:45,740
<font color="#CCCCCC">you tell it which nodes to do are just</font>

282
00:13:43,730 --> 00:13:49,240
<font color="#E5E5E5">generic small talk code where you can</font>

283
00:13:45,740 --> 00:13:49,240
load files do whatever you want

284
00:13:51,050 --> 00:13:58,189
<font color="#E5E5E5">added expressions so we tried to make it</font>

285
00:13:54,320 --> 00:14:00,050
<font color="#CCCCCC">so that create a language</font><font color="#E5E5E5"> that would</font>

286
00:13:58,190 --> 00:14:01,550
look more<font color="#CCCCCC"> like what you</font><font color="#E5E5E5"> would think of</font>

287
00:14:00,050 --> 00:14:04,819
whenever<font color="#E5E5E5"> you just describing what you're</font>

288
00:14:01,550 --> 00:14:09,439
going to<font color="#E5E5E5"> do so you do things like self</font>

289
00:14:04,820 --> 00:14:12,230
<font color="#E5E5E5">replace some node with some text for</font>

290
00:14:09,440 --> 00:14:14,690
replacing<font color="#E5E5E5"> you know if you want to move</font>

291
00:14:12,230 --> 00:14:17,839
one node before<font color="#E5E5E5"> another you can do self</font>

292
00:14:14,690 --> 00:14:20,240
move this node before<font color="#E5E5E5"> another node so we</font>

293
00:14:17,839 --> 00:14:22,279
<font color="#E5E5E5">try to make it like what you would think</font>

294
00:14:20,240 --> 00:14:24,350
if you<font color="#CCCCCC"> were editing like what you would</font>

295
00:14:22,279 --> 00:14:27,589
tell somebody<font color="#CCCCCC"> to do if they were setting</font>

296
00:14:24,350 --> 00:14:34,610
<font color="#E5E5E5">down an editor I'm saying with inserting</font>

297
00:14:27,589 --> 00:14:37,339
deleting<font color="#E5E5E5"> I'm control flow normally the</font>

298
00:14:34,610 --> 00:14:40,279
way smack handle stuff is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> go starts</font>

299
00:14:37,339 --> 00:14:42,529
it from the root of<font color="#E5E5E5"> the tree and</font>

300
00:14:40,279 --> 00:14:46,370
processes down<font color="#E5E5E5"> until it finds a match</font>

301
00:14:42,529 --> 00:14:48,079
<font color="#CCCCCC">and on these code rules</font><font color="#E5E5E5"> once it finds a</font>

302
00:14:46,370 --> 00:14:51,560
<font color="#CCCCCC">match unless you tell it to do something</font>

303
00:14:48,079 --> 00:14:54,800
<font color="#E5E5E5">it's going to stop right</font><font color="#CCCCCC"> there we can</font>

304
00:14:51,560 --> 00:14:56,569
change that<font color="#E5E5E5"> by telling it either you</font>

305
00:14:54,800 --> 00:14:59,390
know<font color="#E5E5E5"> you can process the children of</font>

306
00:14:56,570 --> 00:15:01,390
this node<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> continue</font><font color="#CCCCCC"> on processing</font>

307
00:14:59,390 --> 00:15:06,949
<font color="#CCCCCC">this node so if some other later rule</font>

308
00:15:01,390 --> 00:15:09,050
matches<font color="#E5E5E5"> the same node you can process</font>

309
00:15:06,949 --> 00:15:12,800
<font color="#E5E5E5">whatever so like if you wanted to</font>

310
00:15:09,050 --> 00:15:14,209
<font color="#CCCCCC">process the tree bottom-up</font><font color="#E5E5E5"> instead all</font>

311
00:15:12,800 --> 00:15:17,390
you'd have to do is write a rule it said

312
00:15:14,209 --> 00:15:19,790
self process children self<font color="#E5E5E5"> continue and</font>

313
00:15:17,390 --> 00:15:21,819
that would change<font color="#E5E5E5"> from gonna top down to</font>

314
00:15:19,790 --> 00:15:25,310
bottom up<font color="#E5E5E5"> diversity</font>

315
00:15:21,820 --> 00:15:27,620
so here's a couple<font color="#CCCCCC"> of examples of those</font>

316
00:15:25,310 --> 00:15:29,630
type of<font color="#E5E5E5"> matches first</font><font color="#CCCCCC"> one's from</font><font color="#E5E5E5"> Delphi</font>

317
00:15:27,620 --> 00:15:33,350
<font color="#CCCCCC">where we just take a statement</font><font color="#E5E5E5"> block as</font>

318
00:15:29,630 --> 00:15:36,470
<font color="#CCCCCC">began an end</font><font color="#E5E5E5"> and we do replace the begin</font>

319
00:15:33,350 --> 00:15:38,630
with the opening<font color="#CCCCCC"> prints an opening curly</font>

320
00:15:36,470 --> 00:15:41,360
bracket<font color="#CCCCCC"> place the end with the ending</font>

321
00:15:38,630 --> 00:15:45,740
curly bracket<font color="#E5E5E5"> and we continue process</font>

322
00:15:41,360 --> 00:15:48,170
the rest of that tree<font color="#CCCCCC"> the second ones</font>

323
00:15:45,740 --> 00:15:50,870
from some<font color="#E5E5E5"> powerbuilder migration</font><font color="#CCCCCC"> weary</font>

324
00:15:48,170 --> 00:15:53,839
migrated to c-sharp<font color="#CCCCCC"> and they have</font><font color="#E5E5E5"> these</font>

325
00:15:50,870 --> 00:15:57,740
function objects and<font color="#CCCCCC"> a</font><font color="#E5E5E5"> function object</font>

326
00:15:53,839 --> 00:16:00,890
we we need to<font color="#E5E5E5"> check whether we check the</font>

327
00:15:57,740 --> 00:16:02,990
type type<font color="#E5E5E5"> node but the type notes</font><font color="#CCCCCC"> would</font>

328
00:16:00,890 --> 00:16:05,210
<font color="#E5E5E5">be anything any type of</font>

329
00:16:02,990 --> 00:16:06,680
powerbuilder type so we<font color="#CCCCCC"> also need</font><font color="#E5E5E5"> to</font>

330
00:16:05,210 --> 00:16:09,140
check<font color="#E5E5E5"> whether it equals</font><font color="#CCCCCC"> function object</font>

331
00:16:06,680 --> 00:16:11,239
so and whenever<font color="#E5E5E5"> we do that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> set a</font>

332
00:16:09,140 --> 00:16:14,870
couple<font color="#E5E5E5"> of properties then we just</font>

333
00:16:11,240 --> 00:16:20,089
replace the<font color="#E5E5E5"> whole match with a partial</font>

334
00:16:14,870 --> 00:16:22,310
beginning<font color="#E5E5E5"> a partial class so that's</font>

335
00:16:20,089 --> 00:16:28,730
pretty<font color="#CCCCCC"> much it for the type of</font><font color="#E5E5E5"> rules</font>

336
00:16:22,310 --> 00:16:32,000
<font color="#E5E5E5">that we can we can do doing smack one of</font>

337
00:16:28,730 --> 00:16:36,680
the things I have done<font color="#CCCCCC"> though is to add</font>

338
00:16:32,000 --> 00:16:40,600
<font color="#E5E5E5">some custom tools in there so here's for</font>

339
00:16:36,680 --> 00:16:44,239
<font color="#CCCCCC">a custom debugger that we have for</font>

340
00:16:40,600 --> 00:16:46,970
debugging<font color="#E5E5E5"> grammars so if you debug your</font>

341
00:16:44,240 --> 00:16:48,890
parser and<font color="#CCCCCC"> one of the things you know if</font>

342
00:16:46,970 --> 00:16:50,660
you have a table generated parser a lot

343
00:16:48,890 --> 00:16:54,350
of things are just<font color="#CCCCCC"> like numbers and your</font>

344
00:16:50,660 --> 00:16:58,120
<font color="#E5E5E5">table so it's</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> hard to</font><font color="#CCCCCC"> debug</font><font color="#E5E5E5"> what</font>

345
00:16:54,350 --> 00:17:02,120
what we do is we store off kind of<font color="#E5E5E5"> the</font>

346
00:16:58,120 --> 00:17:06,140
<font color="#E5E5E5">meaning of those tables</font><font color="#CCCCCC"> or the</font><font color="#E5E5E5"> integers</font>

347
00:17:02,120 --> 00:17:09,439
<font color="#E5E5E5">and give it symbolic names so here we we</font>

348
00:17:06,140 --> 00:17:14,079
have<font color="#E5E5E5"> our parsing some JavaScript</font><font color="#CCCCCC"> code</font>

349
00:17:09,439 --> 00:17:17,420
and in the top left we<font color="#CCCCCC"> have our stack of</font>

350
00:17:14,079 --> 00:17:19,040
what's being parsed<font color="#E5E5E5"> so at the bottom</font>

351
00:17:17,420 --> 00:17:21,020
level we're parsing the you got the

352
00:17:19,040 --> 00:17:25,089
module<font color="#E5E5E5"> list then</font><font color="#CCCCCC"> we have the VAR token</font>

353
00:17:21,020 --> 00:17:27,559
and then some variable declarations<font color="#E5E5E5"> and</font>

354
00:17:25,089 --> 00:17:31,129
the comma right before that so we're

355
00:17:27,559 --> 00:17:35,870
right at parsing<font color="#E5E5E5"> let's see if I can meet</font>

356
00:17:31,130 --> 00:17:39,500
<font color="#CCCCCC">that there</font><font color="#E5E5E5"> I can't do do small we're</font>

357
00:17:35,870 --> 00:17:44,389
parsing what's selected<font color="#CCCCCC"> there in the</font>

358
00:17:39,500 --> 00:17:47,540
bottom<font color="#CCCCCC"> or in the</font><font color="#E5E5E5"> middle and we hit that</font>

359
00:17:44,390 --> 00:17:50,300
sort of look ahead<font color="#E5E5E5"> so in the top top</font>

360
00:17:47,540 --> 00:17:53,000
right here we have<font color="#E5E5E5"> essentially all our</font>

361
00:17:50,300 --> 00:17:55,010
<font color="#E5E5E5">possible actions for that look</font><font color="#CCCCCC"> ahead or</font>

362
00:17:53,000 --> 00:17:58,790
for that state<font color="#CCCCCC"> that we're currently</font><font color="#E5E5E5"> in</font>

363
00:17:55,010 --> 00:18:00,379
and so we can if you could read<font color="#E5E5E5"> the it's</font>

364
00:17:58,790 --> 00:18:02,720
going to match this identifier and<font color="#E5E5E5"> it's</font>

365
00:18:00,380 --> 00:18:03,620
<font color="#E5E5E5">going to be a shift action so the next</font>

366
00:18:02,720 --> 00:18:05,510
thing we're going<font color="#E5E5E5"> to shift that</font>

367
00:18:03,620 --> 00:18:07,879
<font color="#E5E5E5">identifier a lot of times what will</font>

368
00:18:05,510 --> 00:18:09,710
happen<font color="#CCCCCC"> is if you</font><font color="#E5E5E5"> have a parser</font><font color="#CCCCCC"> error</font><font color="#E5E5E5"> you</font>

369
00:18:07,880 --> 00:18:12,260
can open up the<font color="#E5E5E5"> debugger and you can see</font>

370
00:18:09,710 --> 00:18:13,910
<font color="#CCCCCC">immediately</font><font color="#E5E5E5"> we have this type of token</font>

371
00:18:12,260 --> 00:18:16,129
<font color="#E5E5E5">and</font>

372
00:18:13,910 --> 00:18:19,700
there's no action<font color="#E5E5E5"> for that token that's</font>

373
00:18:16,130 --> 00:18:21,410
<font color="#E5E5E5">the air so you can see immediately</font><font color="#CCCCCC"> of it</font>

374
00:18:19,700 --> 00:18:22,669
should you should<font color="#E5E5E5"> add an action so you</font>

375
00:18:21,410 --> 00:18:25,760
might have missed a<font color="#E5E5E5"> semicolon or</font>

376
00:18:22,669 --> 00:18:28,850
whatever<font color="#E5E5E5"> earlier on so that's</font><font color="#CCCCCC"> a type of</font>

377
00:18:25,760 --> 00:18:31,640
step we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to look for the GL RS</font>

378
00:18:28,850 --> 00:18:34,610
<font color="#CCCCCC">we'll just list all the states itself</font>

379
00:18:31,640 --> 00:18:37,760
it's doing multiple parses and the

380
00:18:34,610 --> 00:18:40,549
grammar<font color="#CCCCCC"> we can see that it's actually</font>

381
00:18:37,760 --> 00:18:43,309
ambiguous<font color="#CCCCCC"> grammar so we have multiple</font>

382
00:18:40,549 --> 00:18:46,220
<font color="#E5E5E5">different</font><font color="#CCCCCC"> paths through there so we have</font>

383
00:18:43,309 --> 00:18:48,639
the<font color="#E5E5E5"> section here which shows the input</font>

384
00:18:46,220 --> 00:18:51,140
that<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> parsing</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually</font>

385
00:18:48,640 --> 00:18:52,789
select<font color="#CCCCCC"> someplace in the middle of the</font>

386
00:18:51,140 --> 00:18:58,460
input<font color="#CCCCCC"> and through step the cursor and it</font>

387
00:18:52,789 --> 00:19:04,490
or parse to that location<font color="#CCCCCC"> the scanner</font>

388
00:18:58,460 --> 00:19:06,370
<font color="#CCCCCC">State is here</font><font color="#E5E5E5"> normally unless you're it</font>

389
00:19:04,490 --> 00:19:09,250
will<font color="#CCCCCC"> always display like the scope so</font>

390
00:19:06,370 --> 00:19:14,418
<font color="#E5E5E5">the</font><font color="#CCCCCC"> smack parsers can have multiple</font>

391
00:19:09,250 --> 00:19:15,799
scopes that's<font color="#CCCCCC"> it</font><font color="#E5E5E5"> scanning in and if</font>

392
00:19:14,419 --> 00:19:17,659
you're in the middle of scanning<font color="#E5E5E5"> it and</font>

393
00:19:15,799 --> 00:19:19,400
show some<font color="#E5E5E5"> more detail but and the</font>

394
00:19:17,659 --> 00:19:22,400
bottoms<font color="#E5E5E5"> the standard debugger</font>

395
00:19:19,400 --> 00:19:26,559
information that you would see normally

396
00:19:22,400 --> 00:19:26,559
it's not<font color="#E5E5E5"> that interesting</font>

397
00:19:27,160 --> 00:19:35,140
so when we match we also have preview

398
00:19:30,910 --> 00:19:36,970
support so<font color="#E5E5E5"> you run</font><font color="#CCCCCC"> running the rule say</font>

399
00:19:35,140 --> 00:19:39,550
preview and I'll bring up two different

400
00:19:36,970 --> 00:19:41,590
<font color="#CCCCCC">windows like this</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> give a</font><font color="#CCCCCC"> 2</font>

401
00:19:39,550 --> 00:19:45,159
<font color="#E5E5E5">different views with the input on the</font>

402
00:19:41,590 --> 00:19:47,770
left and your resulting code on the

403
00:19:45,160 --> 00:19:49,720
right but<font color="#CCCCCC"> you can do is put your cursor</font>

404
00:19:47,770 --> 00:19:52,180
<font color="#CCCCCC">anywhere</font><font color="#E5E5E5"> in there you could select some</font>

405
00:19:49,720 --> 00:19:57,400
stuff<font color="#E5E5E5"> so here what I did was like put</font>

406
00:19:52,180 --> 00:20:01,030
the cursor like<font color="#E5E5E5"> in here and when I do</font>

407
00:19:57,400 --> 00:20:04,150
that<font color="#CCCCCC"> it tells</font><font color="#E5E5E5"> me which rules change that</font>

408
00:20:01,030 --> 00:20:06,639
piece of code and if then if you select

409
00:20:04,150 --> 00:20:09,160
a real<font color="#CCCCCC"> it will then highlight the</font>

410
00:20:06,640 --> 00:20:12,340
sections on the right of every little

411
00:20:09,160 --> 00:20:16,240
<font color="#E5E5E5">piece of change so here I selected here</font>

412
00:20:12,340 --> 00:20:18,820
for this<font color="#E5E5E5"> and it told</font><font color="#CCCCCC"> me this event event</font>

413
00:20:16,240 --> 00:20:23,020
<font color="#E5E5E5">declaration node</font><font color="#CCCCCC"> rule</font><font color="#E5E5E5"> change that</font><font color="#CCCCCC"> text</font>

414
00:20:18,820 --> 00:20:26,700
it put in put in that that<font color="#E5E5E5"> this piece</font>

415
00:20:23,020 --> 00:20:29,470
added<font color="#E5E5E5"> the semicolon there and added the</font>

416
00:20:26,700 --> 00:20:31,120
ending print see on the left it<font color="#CCCCCC"> just</font>

417
00:20:29,470 --> 00:20:35,070
highlights<font color="#CCCCCC"> the node that actually</font>

418
00:20:31,120 --> 00:20:37,750
matched now from this I could actually

419
00:20:35,070 --> 00:20:40,270
tell it to go<font color="#E5E5E5"> to the rule directly from</font>

420
00:20:37,750 --> 00:20:44,830
<font color="#E5E5E5">here I can also tell it to bring up the</font>

421
00:20:40,270 --> 00:20:47,920
debugger so I have a<font color="#CCCCCC"> real debugger which</font>

422
00:20:44,830 --> 00:20:51,070
has essentially<font color="#CCCCCC"> the stack of the</font><font color="#E5E5E5"> rules</font>

423
00:20:47,920 --> 00:20:53,470
up there on the top<font color="#CCCCCC"> left</font><font color="#E5E5E5"> the rule</font><font color="#CCCCCC"> that's</font>

424
00:20:51,070 --> 00:20:56,439
<font color="#E5E5E5">being executed</font><font color="#CCCCCC"> we have the original code</font>

425
00:20:53,470 --> 00:20:59,050
<font color="#E5E5E5">and the ending code and we can step</font>

426
00:20:56,440 --> 00:21:02,080
through there we can also scroll down

427
00:20:59,050 --> 00:21:04,149
here and<font color="#E5E5E5"> run to cursor or whatever this</font>

428
00:21:02,080 --> 00:21:07,990
down<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> some inspector stuff</font>

429
00:21:04,150 --> 00:21:10,270
but so it's all these<font color="#E5E5E5"> tools that makes</font>

430
00:21:07,990 --> 00:21:13,300
it a lot<font color="#E5E5E5"> easier</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> to where where</font>

431
00:21:10,270 --> 00:21:16,090
you need to be<font color="#E5E5E5"> for finding out who</font>

432
00:21:13,300 --> 00:21:17,820
changed this<font color="#CCCCCC"> and why you know when when</font>

433
00:21:16,090 --> 00:21:24,870
it's not<font color="#E5E5E5"> performing correctly</font>

434
00:21:17,820 --> 00:21:24,870
so with that I'll open<font color="#E5E5E5"> up the questions</font>

435
00:21:25,870 --> 00:21:35,629
yes our parser to parse them how do you

436
00:21:33,800 --> 00:21:38,230
see the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> wave like starting</font><font color="#E5E5E5"> the</font>

437
00:21:35,630 --> 00:21:42,200
parser<font color="#E5E5E5"> stuff that is not</font><font color="#CCCCCC"> necessarily</font>

438
00:21:38,230 --> 00:21:47,090
grammar<font color="#E5E5E5"> it's looking for</font><font color="#CCCCCC"> ya</font><font color="#E5E5E5"> because</font>

439
00:21:42,200 --> 00:21:50,300
basically the so<font color="#E5E5E5"> what he's asking is</font>

440
00:21:47,090 --> 00:21:54,560
<font color="#CCCCCC">that how do</font><font color="#E5E5E5"> I start from any place in</font>

441
00:21:50,300 --> 00:21:56,360
the grammar<font color="#CCCCCC"> and because you can't just</font>

442
00:21:54,560 --> 00:21:59,240
start from the start node because these

443
00:21:56,360 --> 00:22:02,419
patterns<font color="#CCCCCC"> can you know be any node down</font>

444
00:21:59,240 --> 00:22:06,770
below<font color="#E5E5E5"> and the way I did</font><font color="#CCCCCC"> is start from</font>

445
00:22:02,420 --> 00:22:09,440
all of them<font color="#E5E5E5"> and most of them will fail</font>

446
00:22:06,770 --> 00:22:11,780
you know immediately because they won't

447
00:22:09,440 --> 00:22:16,400
<font color="#E5E5E5">be able to shift what you're looking for</font>

448
00:22:11,780 --> 00:22:19,490
and the patterns are fairly small

449
00:22:16,400 --> 00:22:21,610
you know<font color="#CCCCCC"> it's milliseconds</font><font color="#E5E5E5"> especially</font>

450
00:22:19,490 --> 00:22:21,610
though

451
00:22:22,360 --> 00:22:33,490
<font color="#CCCCCC">there you go yes so</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> we resolve</font>

452
00:22:31,210 --> 00:22:36,370
conflicts between<font color="#E5E5E5"> overlapping patterns</font>

453
00:22:33,490 --> 00:22:40,210
what I do is actually<font color="#E5E5E5"> take all</font><font color="#CCCCCC"> the</font>

454
00:22:36,370 --> 00:22:42,070
possible patterns so I will so you<font color="#E5E5E5"> know</font>

455
00:22:40,210 --> 00:22:44,650
if this this<font color="#CCCCCC"> expression and</font><font color="#E5E5E5"> this pattern</font>

456
00:22:42,070 --> 00:22:47,800
<font color="#CCCCCC">expressed can potentially be you know</font>

457
00:22:44,650 --> 00:22:50,880
five<font color="#CCCCCC"> different sub trees I'll try them</font>

458
00:22:47,800 --> 00:22:50,879
all for matching

459
00:22:52,670 --> 00:22:55,809
any other questions

460
00:23:02,550 --> 00:23:08,079
[Applause]

