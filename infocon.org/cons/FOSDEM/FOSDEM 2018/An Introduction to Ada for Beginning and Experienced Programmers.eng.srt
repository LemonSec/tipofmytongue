1
00:00:05,200 --> 00:00:13,850
so good morning said I'm dropping them

2
00:00:10,639 --> 00:00:16,128
from<font color="#E5E5E5"> a company called</font><font color="#CCCCCC"> EDA log which is a</font>

3
00:00:13,850 --> 00:00:19,910
company<font color="#E5E5E5"> doing mostly his business with</font>

4
00:00:16,129 --> 00:00:22,400
EDA<font color="#E5E5E5"> so you may think</font><font color="#CCCCCC"> oh that guy will</font>

5
00:00:19,910 --> 00:00:23,150
tell you how nice EDA is because that's

6
00:00:22,400 --> 00:00:26,570
his business

7
00:00:23,150 --> 00:00:29,779
<font color="#CCCCCC">so let's be</font><font color="#E5E5E5"> clear</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> stood in a previous</font>

8
00:00:26,570 --> 00:00:33,200
life I was teaching an engineering

9
00:00:29,780 --> 00:00:35,450
school<font color="#E5E5E5"> compilation languages so on</font>

10
00:00:33,200 --> 00:00:39,170
and I thought<font color="#CCCCCC"> ADA was a good language</font>

11
00:00:35,450 --> 00:00:43,310
<font color="#CCCCCC">and I made my business</font><font color="#E5E5E5"> on ADA because I</font>

12
00:00:39,170 --> 00:00:46,700
thought it was my business<font color="#CCCCCC"> so it drove</font>

13
00:00:43,310 --> 00:00:52,310
me to<font color="#E5E5E5"> having</font><font color="#CCCCCC"> business with it</font><font color="#E5E5E5"> not the</font>

14
00:00:46,700 --> 00:00:55,280
other way around<font color="#CCCCCC"> okay I have</font><font color="#E5E5E5"> about 45</font>

15
00:00:52,310 --> 00:00:58,309
minutes<font color="#CCCCCC"> so I won't tell you everything</font>

16
00:00:55,280 --> 00:01:02,090
about area I just try<font color="#E5E5E5"> to give you</font>

17
00:00:58,309 --> 00:01:04,968
another<font color="#CCCCCC"> view of</font><font color="#E5E5E5"> the spirit of the</font>

18
00:01:02,090 --> 00:01:08,000
language and how it's different from

19
00:01:04,968 --> 00:01:13,210
<font color="#E5E5E5">other languages</font><font color="#CCCCCC"> okay there</font><font color="#E5E5E5"> are something</font>

20
00:01:08,000 --> 00:01:16,909
it looks<font color="#E5E5E5"> like regular</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> with</font>

21
00:01:13,210 --> 00:01:19,369
usual feature but as you dig into it

22
00:01:16,909 --> 00:01:26,990
you'll see that<font color="#E5E5E5"> it's more different</font><font color="#CCCCCC"> than</font>

23
00:01:19,370 --> 00:01:31,220
<font color="#CCCCCC">one may think</font><font color="#E5E5E5"> first so the name ADA is</font>

24
00:01:26,990 --> 00:01:34,610
not an acronym<font color="#CCCCCC"> it's it comes</font><font color="#E5E5E5"> from ADA</font>

25
00:01:31,220 --> 00:01:39,048
Byron<font color="#E5E5E5"> who is supposed to be</font><font color="#CCCCCC"> the first</font>

26
00:01:34,610 --> 00:01:40,939
programmer so she wrote<font color="#E5E5E5"> a program for</font>

27
00:01:39,049 --> 00:01:44,960
the Babbage machine<font color="#E5E5E5"> I don't know if you</font>

28
00:01:40,939 --> 00:01:46,820
heard about<font color="#CCCCCC"> that she could never run her</font>

29
00:01:44,960 --> 00:01:47,630
programs because the machine was never

30
00:01:46,820 --> 00:01:50,658
built

31
00:01:47,630 --> 00:01:55,220
but her programs have been rewritten<font color="#E5E5E5"> in</font>

32
00:01:50,659 --> 00:01:57,710
<font color="#E5E5E5">Tier one later and they are said to</font><font color="#CCCCCC"> have</font>

33
00:01:55,220 --> 00:02:00,408
worked<font color="#E5E5E5"> right from the start</font>

34
00:01:57,710 --> 00:02:03,289
<font color="#E5E5E5">so the first programmer was a lady</font><font color="#CCCCCC"> and</font>

35
00:02:00,409 --> 00:02:07,369
the first program had no bugs<font color="#E5E5E5"> things</font>

36
00:02:03,290 --> 00:02:10,158
have<font color="#CCCCCC"> changed and</font><font color="#E5E5E5"> both these aspects the</font>

37
00:02:07,369 --> 00:02:12,690
<font color="#E5E5E5">duration of the language has</font><font color="#CCCCCC"> been issued</font>

38
00:02:10,158 --> 00:02:15,359
in 1983

39
00:02:12,690 --> 00:02:19,380
so it was<font color="#E5E5E5"> quite advanced for</font><font color="#CCCCCC"> its time</font>

40
00:02:15,360 --> 00:02:22,740
with advanced feature like exception

41
00:02:19,380 --> 00:02:27,600
generics and<font color="#E5E5E5"> tasking it was</font><font color="#CCCCCC"> they were</font>

42
00:02:22,740 --> 00:02:30,000
<font color="#E5E5E5">and</font><font color="#CCCCCC"> still are</font><font color="#E5E5E5"> new new features</font><font color="#CCCCCC"> new thing</font>

43
00:02:27,600 --> 00:02:34,769
<font color="#E5E5E5">they invented</font><font color="#CCCCCC"> especially for ADA</font>

44
00:02:30,000 --> 00:02:38,130
it's rather gathering together<font color="#E5E5E5"> the best</font>

45
00:02:34,770 --> 00:02:40,020
ideas from other languages<font color="#E5E5E5"> so everything</font>

46
00:02:38,130 --> 00:02:43,410
you having a die existed in previous

47
00:02:40,020 --> 00:02:45,630
<font color="#E5E5E5">languages</font><font color="#CCCCCC"> it's just simply</font><font color="#E5E5E5"> these of the</font>

48
00:02:43,410 --> 00:02:51,090
best<font color="#E5E5E5"> ideas that appeared in various</font>

49
00:02:45,630 --> 00:02:57,680
<font color="#E5E5E5">languages due to devolution of software</font>

50
00:02:51,090 --> 00:02:57,680
<font color="#E5E5E5">or</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> also there was major</font>

51
00:02:57,890 --> 00:03:05,459
improvement in 1995 with introduction of

52
00:03:02,460 --> 00:03:07,950
object-oriented programming protected

53
00:03:05,460 --> 00:03:12,990
objects which are<font color="#E5E5E5"> a mechanism for</font>

54
00:03:07,950 --> 00:03:15,390
synchronizing<font color="#E5E5E5"> between tasks well</font><font color="#CCCCCC"> first</font>

55
00:03:12,990 --> 00:03:17,850
is a term for<font color="#CCCCCC"> threats</font>

56
00:03:15,390 --> 00:03:21,029
actually in 1983<font color="#CCCCCC"> that were the common</font>

57
00:03:17,850 --> 00:03:25,010
name for<font color="#E5E5E5"> the thing</font><font color="#CCCCCC"> it's later that the</font>

58
00:03:21,030 --> 00:03:29,340
term threads<font color="#CCCCCC"> was was coined in</font>

59
00:03:25,010 --> 00:03:34,579
<font color="#CCCCCC">hierarchical libraries which is a way to</font>

60
00:03:29,340 --> 00:03:37,260
<font color="#CCCCCC">organize</font><font color="#E5E5E5"> modules note that ADA was first</font>

61
00:03:34,580 --> 00:03:42,090
standardized<font color="#CCCCCC"> object-oriented languages</font>

62
00:03:37,260 --> 00:03:48,899
in 1995<font color="#CCCCCC"> the second one was C++ three</font>

63
00:03:42,090 --> 00:03:50,489
years<font color="#E5E5E5"> later then languages evolved</font><font color="#CCCCCC"> well</font>

64
00:03:48,900 --> 00:03:54,440
you know<font color="#CCCCCC"> that you always have</font><font color="#E5E5E5"> different</font>

65
00:03:50,489 --> 00:03:58,920
<font color="#CCCCCC">versions and in two</font><font color="#E5E5E5"> or five the main</font>

66
00:03:54,440 --> 00:04:03,480
edition was interfaces<font color="#E5E5E5"> like Java or C</font>

67
00:03:58,920 --> 00:04:06,329
sharp interfaces and<font color="#CCCCCC"> built plane</font>

68
00:04:03,480 --> 00:04:10,380
improved engineer all existing features

69
00:04:06,330 --> 00:04:13,470
but it was less the<font color="#E5E5E5"> other big bang has</font>

70
00:04:10,380 --> 00:04:18,480
happened in 1995<font color="#E5E5E5"> and the story goes on</font>

71
00:04:13,470 --> 00:04:21,029
we had a new state version in 2012 and

72
00:04:18,480 --> 00:04:23,530
it's going<font color="#E5E5E5"> more and more formal more</font>

73
00:04:21,029 --> 00:04:26,799
towards program proof

74
00:04:23,530 --> 00:04:30,960
so we have invariant precondition<font color="#CCCCCC"> force</font>

75
00:04:26,800 --> 00:04:34,510
<font color="#E5E5E5">condition and things to make compiler</font>

76
00:04:30,960 --> 00:04:38,039
<font color="#E5E5E5">able to prove behavior and more</font>

77
00:04:34,510 --> 00:04:41,020
sophisticated checks at<font color="#E5E5E5"> runtime</font>

78
00:04:38,040 --> 00:04:46,330
<font color="#CCCCCC">regarding this evolution I would stress</font>

79
00:04:41,020 --> 00:04:48,820
<font color="#E5E5E5">that we went from a</font><font color="#CCCCCC"> Big Bang</font><font color="#E5E5E5"> in 1995</font>

80
00:04:46,330 --> 00:04:53,370
where it was a big rewrite<font color="#CCCCCC"> of the whole</font>

81
00:04:48,820 --> 00:04:57,310
standard to<font color="#CCCCCC"> a more continuous</font><font color="#E5E5E5"> evolution</font>

82
00:04:53,370 --> 00:05:01,030
<font color="#E5E5E5">where we gradually add more</font><font color="#CCCCCC"> libraries</font>

83
00:04:57,310 --> 00:05:04,540
<font color="#E5E5E5">than evolve features and less complete</font>

84
00:05:01,030 --> 00:05:11,950
changes so it's in a<font color="#CCCCCC"> sense a sign a sign</font>

85
00:05:04,540 --> 00:05:15,840
<font color="#E5E5E5">of maturity</font><font color="#CCCCCC"> so in free software</font><font color="#E5E5E5"> event</font>

86
00:05:11,950 --> 00:05:18,820
here and it's important to<font color="#E5E5E5"> note that</font>

87
00:05:15,840 --> 00:05:22,539
free software does<font color="#CCCCCC"> not like to</font><font color="#E5E5E5"> depend on</font>

88
00:05:18,820 --> 00:05:23,590
proprietary<font color="#CCCCCC"> technologies</font><font color="#E5E5E5"> it belongs to</font>

89
00:05:22,540 --> 00:05:26,970
nobody

90
00:05:23,590 --> 00:05:31,630
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> it's an international standard</font>

91
00:05:26,970 --> 00:05:34,210
<font color="#E5E5E5">there is no big pocket that owns it</font>

92
00:05:31,630 --> 00:05:37,780
<font color="#E5E5E5">which is a problem</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have no</font>

93
00:05:34,210 --> 00:05:41,140
nobody to pay for retirement<font color="#CCCCCC"> okay so</font>

94
00:05:37,780 --> 00:05:43,000
it's we're happy to be<font color="#E5E5E5"> here to get the</font>

95
00:05:41,140 --> 00:05:45,430
word through because it's hard because

96
00:05:43,000 --> 00:05:52,390
nobody had the money to<font color="#CCCCCC"> pay for</font><font color="#E5E5E5"> big and</font>

97
00:05:45,430 --> 00:05:56,169
<font color="#E5E5E5">spider so we have free compilers so it's</font>

98
00:05:52,390 --> 00:05:59,710
an international<font color="#CCCCCC"> standard and it's the</font>

99
00:05:56,169 --> 00:06:01,539
<font color="#E5E5E5">standard is freely available</font><font color="#CCCCCC"> the</font>

100
00:05:59,710 --> 00:06:05,169
standard has<font color="#CCCCCC"> been</font><font color="#E5E5E5"> published by a</font>

101
00:06:01,539 --> 00:06:09,070
<font color="#E5E5E5">springer Springer is not exactly in</font><font color="#CCCCCC"> the</font>

102
00:06:05,169 --> 00:06:12,370
free anything<font color="#E5E5E5"> business</font><font color="#CCCCCC"> however here is</font>

103
00:06:09,070 --> 00:06:16,060
an excerpt from the<font color="#CCCCCC"> copyright</font><font color="#E5E5E5"> from a</font>

104
00:06:12,370 --> 00:06:19,360
springer book that says that this

105
00:06:16,060 --> 00:06:22,750
document may be copied in whole or in

106
00:06:19,360 --> 00:06:25,520
<font color="#E5E5E5">part</font><font color="#CCCCCC"> I get that the</font><font color="#E5E5E5"> only book at</font>

107
00:06:22,750 --> 00:06:29,150
Springer with that kind<font color="#CCCCCC"> of copyright</font>

108
00:06:25,520 --> 00:06:32,830
the who ADA effort has always been

109
00:06:29,150 --> 00:06:37,489
completely<font color="#CCCCCC"> open the standard can be</font>

110
00:06:32,830 --> 00:06:43,190
<font color="#E5E5E5">downloaded in HTML</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> PDF in every form</font>

111
00:06:37,490 --> 00:06:46,120
you need<font color="#E5E5E5"> it you have</font><font color="#CCCCCC"> three compilers</font><font color="#E5E5E5"> and</font>

112
00:06:43,190 --> 00:06:50,509
proprietary compiler<font color="#E5E5E5"> why not</font>

113
00:06:46,120 --> 00:06:53,630
and many free resources<font color="#E5E5E5"> so here are some</font>

114
00:06:50,509 --> 00:06:55,849
pointers<font color="#CCCCCC"> and you well you can type a DAT</font>

115
00:06:53,630 --> 00:06:59,770
<font color="#E5E5E5">something underneath and you you</font>

116
00:06:55,849 --> 00:06:59,770
<font color="#E5E5E5">certainly finally anything you need</font>

117
00:07:00,250 --> 00:07:12,039
community with<font color="#CCCCCC"> two new</font><font color="#E5E5E5"> groups the first</font>

118
00:07:06,710 --> 00:07:12,039
one is in<font color="#CCCCCC"> English even one in</font><font color="#E5E5E5"> French and</font>

119
00:07:24,680 --> 00:07:27,889
[Music]

120
00:07:29,840 --> 00:07:33,630
[Laughter]

121
00:07:44,080 --> 00:07:49,940
we don't hear much<font color="#CCCCCC"> of</font><font color="#E5E5E5"> aid so who is</font>

122
00:07:47,479 --> 00:07:54,020
using it actually many<font color="#CCCCCC"> people are using</font>

123
00:07:49,940 --> 00:07:56,060
<font color="#CCCCCC">ADA and you</font><font color="#E5E5E5"> don't always know that you</font>

124
00:07:54,020 --> 00:07:59,990
are<font color="#E5E5E5"> running on era for example if you</font>

125
00:07:56,060 --> 00:08:02,659
take<font color="#CCCCCC"> a TGV all the mechanism that</font>

126
00:07:59,990 --> 00:08:05,930
control the speed<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the Train the the</font>

127
00:08:02,659 --> 00:08:09,229
needles and all the safety part<font color="#E5E5E5"> of it</font>

128
00:08:05,930 --> 00:08:14,840
are written in<font color="#CCCCCC"> ADA there</font><font color="#E5E5E5"> are lots of ADA</font>

129
00:08:09,229 --> 00:08:19,159
in the a380<font color="#E5E5E5"> and also in the a400m this</font>

130
00:08:14,840 --> 00:08:23,919
is the automated subway in Paris line 14

131
00:08:19,159 --> 00:08:23,919
and 9<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> the running on ADA</font>

132
00:08:25,900 --> 00:08:37,098
<font color="#CCCCCC">ok 14 years in space woke</font><font color="#E5E5E5"> up and work</font>

133
00:08:31,280 --> 00:08:41,338
perfectly<font color="#E5E5E5"> as expected fully in</font><font color="#CCCCCC"> ADA</font>

134
00:08:37,099 --> 00:08:44,370
and this is a luxury<font color="#CCCCCC"> yachts the King</font><font color="#E5E5E5"> cat</font>

135
00:08:41,339 --> 00:08:46,649
<font color="#E5E5E5">also fully written Anita</font><font color="#CCCCCC"> when you buy</font>

136
00:08:44,370 --> 00:08:49,380
that kind<font color="#CCCCCC"> of baby you</font><font color="#E5E5E5"> don't want to be</font>

137
00:08:46,649 --> 00:08:57,529
stuck<font color="#CCCCCC"> in the middle</font><font color="#E5E5E5"> of the ocean</font><font color="#CCCCCC"> due to</font>

138
00:08:49,380 --> 00:08:57,529
<font color="#CCCCCC">a software bug okay so why would you use</font>

139
00:08:59,509 --> 00:09:03,630
<font color="#E5E5E5">first of all we say when failure is not</font>

140
00:09:02,610 --> 00:09:07,170
an option

141
00:09:03,630 --> 00:09:10,769
there is a huge<font color="#E5E5E5"> stress on writing safe</font>

142
00:09:07,170 --> 00:09:13,889
and secure software<font color="#E5E5E5"> and that's why most</font>

143
00:09:10,769 --> 00:09:18,540
<font color="#E5E5E5">of the example</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> I showed you where</font>

144
00:09:13,889 --> 00:09:23,180
safety<font color="#CCCCCC"> critical however the system</font>

145
00:09:18,540 --> 00:09:27,360
should<font color="#CCCCCC"> not fail either and in a sense I</font>

146
00:09:23,180 --> 00:09:30,029
claim that<font color="#CCCCCC"> it should be used more among</font>

147
00:09:27,360 --> 00:09:32,880
safety critical systems<font color="#E5E5E5"> building safety</font>

148
00:09:30,029 --> 00:09:36,329
<font color="#E5E5E5">critical system you have plenty of money</font>

149
00:09:32,880 --> 00:09:39,149
<font color="#E5E5E5">to check everything</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> even if you write</font>

150
00:09:36,329 --> 00:09:42,359
in a crazy<font color="#CCCCCC"> language you'll have the</font>

151
00:09:39,149 --> 00:09:44,519
money to make<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that it works now if</font>

152
00:09:42,360 --> 00:09:46,980
you are not in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> business</font><font color="#E5E5E5"> you don't</font>

153
00:09:44,519 --> 00:09:50,069
have that money<font color="#E5E5E5"> so it's important to</font>

154
00:09:46,980 --> 00:09:53,040
<font color="#CCCCCC">have</font><font color="#E5E5E5"> tools that</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> ensure you the same</font>

155
00:09:50,069 --> 00:09:55,740
<font color="#E5E5E5">level of quality</font><font color="#CCCCCC"> as required for safety</font>

156
00:09:53,040 --> 00:10:05,279
critical systems<font color="#E5E5E5"> without having to pay</font>

157
00:09:55,740 --> 00:10:09,480
<font color="#CCCCCC">the</font><font color="#E5E5E5"> price of course impossible</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> you</font>

158
00:10:05,279 --> 00:10:12,149
<font color="#E5E5E5">we have a way to dimension the side of</font>

159
00:10:09,480 --> 00:10:15,209
the buffer<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to what will be put</font>

160
00:10:12,149 --> 00:10:18,360
in it<font color="#CCCCCC"> so it's impossible to</font><font color="#E5E5E5"> have another</font>

161
00:10:15,209 --> 00:10:21,029
flow arithmetic all the<font color="#CCCCCC"> holes and all</font>

162
00:10:18,360 --> 00:10:25,199
that stuff is checked so<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> all</font>

163
00:10:21,029 --> 00:10:27,990
impossible<font color="#CCCCCC"> many of these</font><font color="#E5E5E5"> things can be</font>

164
00:10:25,199 --> 00:10:32,149
<font color="#E5E5E5">checked at compile time I will give you</font>

165
00:10:27,990 --> 00:10:36,810
an example<font color="#CCCCCC"> in a token</font><font color="#E5E5E5"> smooth-talking but</font>

166
00:10:32,149 --> 00:10:40,350
<font color="#CCCCCC">12</font><font color="#E5E5E5"> if you're interested in</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but very</font>

167
00:10:36,810 --> 00:10:43,979
often<font color="#E5E5E5"> something doesn't compile and you</font>

168
00:10:40,350 --> 00:10:45,150
realize that it doesn't compile before

169
00:10:43,980 --> 00:10:49,020
because

170
00:10:45,150 --> 00:10:51,780
your design is inconsistent<font color="#E5E5E5"> the language</font>

171
00:10:49,020 --> 00:10:54,680
<font color="#E5E5E5">is close to the design if the design is</font>

172
00:10:51,780 --> 00:10:57,540
wrong it won't compile<font color="#E5E5E5"> so that's</font>

173
00:10:54,680 --> 00:11:00,209
<font color="#E5E5E5">difficult to measure of course but</font>

174
00:10:57,540 --> 00:11:05,030
<font color="#E5E5E5">that's a very interesting effect of</font>

175
00:11:00,210 --> 00:11:09,270
<font color="#E5E5E5">using either it is not just translating</font>

176
00:11:05,030 --> 00:11:12,420
something into machine code<font color="#E5E5E5"> it is about</font>

177
00:11:09,270 --> 00:11:21,540
<font color="#CCCCCC">checking and ensuring that</font><font color="#E5E5E5"> everything is</font>

178
00:11:12,420 --> 00:11:24,060
<font color="#E5E5E5">consistent so</font><font color="#CCCCCC"> the idea is that</font><font color="#E5E5E5"> what's</font>

179
00:11:21,540 --> 00:11:26,430
important in a language is<font color="#E5E5E5"> not what it</font>

180
00:11:24,060 --> 00:11:29,219
allows or people tell you by language

181
00:11:26,430 --> 00:11:32,120
can do this and this and<font color="#E5E5E5"> this we</font><font color="#CCCCCC"> are the</font>

182
00:11:29,220 --> 00:11:35,250
only ones<font color="#E5E5E5"> to tell you the language</font>

183
00:11:32,120 --> 00:11:38,250
<font color="#E5E5E5">prevents you from doing things from</font>

184
00:11:35,250 --> 00:11:44,880
doing bad<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> so it's important</font><font color="#CCCCCC"> it</font>

185
00:11:38,250 --> 00:11:47,910
what it forbids<font color="#E5E5E5"> not what it allows so</font>

186
00:11:44,880 --> 00:11:51,600
for free software<font color="#E5E5E5"> generally we need a</font>

187
00:11:47,910 --> 00:11:54,620
<font color="#E5E5E5">reach a consistent language there is</font><font color="#CCCCCC"> a</font>

188
00:11:51,600 --> 00:11:57,360
small picture<font color="#E5E5E5"> on the basis you</font><font color="#CCCCCC"> have a</font>

189
00:11:54,620 --> 00:11:59,820
classical procedural language<font color="#CCCCCC"> the syntax</font>

190
00:11:57,360 --> 00:12:02,580
is based on Pascal<font color="#E5E5E5"> there were</font>

191
00:11:59,820 --> 00:12:05,790
requirements and one main requirement

192
00:12:02,580 --> 00:12:10,190
<font color="#E5E5E5">was</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> language has to be readable</font>

193
00:12:05,790 --> 00:12:13,829
and on the point of<font color="#CCCCCC"> view</font><font color="#E5E5E5"> of read body</font>

194
00:12:10,190 --> 00:12:16,410
the Pascal basis is likely to be the

195
00:12:13,830 --> 00:12:19,470
best<font color="#E5E5E5"> starting point there is</font><font color="#CCCCCC"> a very</font>

196
00:12:16,410 --> 00:12:22,520
strong typing<font color="#CCCCCC"> system but truly</font><font color="#E5E5E5"> very</font>

197
00:12:19,470 --> 00:12:26,610
strong<font color="#E5E5E5"> many languages claim to be very</font>

198
00:12:22,520 --> 00:12:30,840
strongly typed<font color="#E5E5E5"> but here the typing</font>

199
00:12:26,610 --> 00:12:33,630
system<font color="#CCCCCC"> is really the backbone of all the</font>

200
00:12:30,840 --> 00:12:37,830
language I will give you examples we

201
00:12:33,630 --> 00:12:42,050
specialized features packages to make

202
00:12:37,830 --> 00:12:44,430
<font color="#E5E5E5">clean proper modules that separate</font>

203
00:12:42,050 --> 00:12:47,370
specification<font color="#E5E5E5"> from implementation</font>

204
00:12:44,430 --> 00:12:51,870
strategy<font color="#CCCCCC"> now most languages nowadays</font>

205
00:12:47,370 --> 00:12:54,960
don't have a clear<font color="#CCCCCC"> notion of module</font><font color="#E5E5E5"> the</font>

206
00:12:51,870 --> 00:12:56,520
class is something<font color="#E5E5E5"> that's too small to</font>

207
00:12:54,960 --> 00:12:59,130
<font color="#CCCCCC">represent</font><font color="#E5E5E5"> module</font>

208
00:12:56,520 --> 00:13:01,709
often you need sets of party that<font color="#CCCCCC"> work</font>

209
00:12:59,130 --> 00:13:04,290
together and so on<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> something</font>

210
00:13:01,709 --> 00:13:07,339
you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a syntactic structure for</font>

211
00:13:04,290 --> 00:13:10,199
<font color="#CCCCCC">that in most languages</font><font color="#E5E5E5"> that the package</font>

212
00:13:07,339 --> 00:13:13,020
exceptions now there are quite common in

213
00:13:10,200 --> 00:13:16,580
programming<font color="#CCCCCC"> languages for</font><font color="#E5E5E5"> handling</font>

214
00:13:13,020 --> 00:13:20,279
<font color="#E5E5E5">anything that can</font><font color="#CCCCCC"> happen at runtime</font>

215
00:13:16,580 --> 00:13:26,640
<font color="#E5E5E5">anything bad is translated into an</font>

216
00:13:20,279 --> 00:13:28,980
exception<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so it generates for you</font>

217
00:13:26,640 --> 00:13:32,790
<font color="#E5E5E5">something like templates if</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> I</font>

218
00:13:28,980 --> 00:13:36,270
go<font color="#CCCCCC"> over</font><font color="#E5E5E5"> that multitasking is built into</font>

219
00:13:32,790 --> 00:13:39,180
<font color="#E5E5E5">the language</font><font color="#CCCCCC"> now you have Java C Java</font>

220
00:13:36,270 --> 00:13:41,819
certain names of languages have built in

221
00:13:39,180 --> 00:13:45,390
<font color="#E5E5E5">multitasking that</font><font color="#CCCCCC"> it was like</font><font color="#E5E5E5"> you when</font>

222
00:13:41,820 --> 00:13:47,459
it<font color="#CCCCCC"> have started and a bridge to</font>

223
00:13:45,390 --> 00:13:50,550
<font color="#CCCCCC">low-level</font><font color="#E5E5E5"> program here I'll show you an</font>

224
00:13:47,459 --> 00:13:53,699
<font color="#CCCCCC">example of that also how you can have</font>

225
00:13:50,550 --> 00:13:56,939
access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> low-level features while still</font>

226
00:13:53,700 --> 00:14:01,790
being in a<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> view</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> what you</font>

227
00:13:56,940 --> 00:14:05,130
are doing this is included to serve

228
00:14:01,790 --> 00:14:08,010
programming methodologies<font color="#E5E5E5"> that's very</font>

229
00:14:05,130 --> 00:14:11,010
important nowadays many people<font color="#E5E5E5"> everybody</font>

230
00:14:08,010 --> 00:14:14,160
will tell you well what's important is

231
00:14:11,010 --> 00:14:19,920
<font color="#CCCCCC">to have</font><font color="#E5E5E5"> good methodologies nobody will</font>

232
00:14:14,160 --> 00:14:23,329
dare saying the opposite people say well

233
00:14:19,920 --> 00:14:26,670
if you<font color="#E5E5E5"> have a good method</font><font color="#CCCCCC"> then who cares</font>

234
00:14:23,329 --> 00:14:30,329
what the programming language when it

235
00:14:26,670 --> 00:14:33,890
comes to coding<font color="#CCCCCC"> either we say no there</font>

236
00:14:30,329 --> 00:14:37,739
is no<font color="#E5E5E5"> reason to stop the methodological</font>

237
00:14:33,890 --> 00:14:41,220
<font color="#E5E5E5">effort when you turn into the coding</font>

238
00:14:37,740 --> 00:14:43,950
<font color="#E5E5E5">phase the coding phase should be should</font>

239
00:14:41,220 --> 00:14:47,550
continue the methodological<font color="#E5E5E5"> effort the</font>

240
00:14:43,950 --> 00:14:50,850
coding phase<font color="#E5E5E5"> should translate the object</font>

241
00:14:47,550 --> 00:14:53,670
of the methods and<font color="#E5E5E5"> the connection</font>

242
00:14:50,850 --> 00:14:56,660
<font color="#CCCCCC">between the code and the</font><font color="#E5E5E5"> objects of the</font>

243
00:14:53,670 --> 00:14:59,360
metal<font color="#E5E5E5"> of the method should be</font><font color="#CCCCCC"> very clear</font>

244
00:14:56,660 --> 00:15:04,100
<font color="#E5E5E5">so don't give up the methodological</font>

245
00:14:59,360 --> 00:15:07,589
<font color="#E5E5E5">aspects when you come to coding</font>

246
00:15:04,100 --> 00:15:11,089
<font color="#E5E5E5">including of course</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> since 1995</font>

247
00:15:07,589 --> 00:15:11,089
or<font color="#CCCCCC"> object-oriented</font>

248
00:15:11,400 --> 00:15:19,360
then you have some little dog houses

249
00:15:15,190 --> 00:15:23,980
<font color="#E5E5E5">here these are the</font><font color="#CCCCCC"> specialized</font><font color="#E5E5E5"> annex</font>

250
00:15:19,360 --> 00:15:26,170
<font color="#E5E5E5">it's just no I shouldn't say extension</font>

251
00:15:23,980 --> 00:15:28,480
<font color="#E5E5E5">there are components to the language</font>

252
00:15:26,170 --> 00:15:31,689
were very specialized<font color="#CCCCCC"> feature</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> are</font>

253
00:15:28,480 --> 00:15:34,930
optional<font color="#CCCCCC"> because</font><font color="#E5E5E5"> not everybody needs the</font>

254
00:15:31,690 --> 00:15:38,440
same thing so<font color="#E5E5E5"> this is for example some</font>

255
00:15:34,930 --> 00:15:42,010
extra packages for<font color="#E5E5E5"> real time or for high</font>

256
00:15:38,440 --> 00:15:45,160
criticality systems or<font color="#E5E5E5"> for business</font>

257
00:15:42,010 --> 00:15:49,300
<font color="#E5E5E5">systems distributed and so on so that's</font>

258
00:15:45,160 --> 00:15:54,010
just a set of specialized I think

259
00:15:49,300 --> 00:15:57,310
components so all of these<font color="#E5E5E5"> looks like a</font>

260
00:15:54,010 --> 00:15:59,560
classical<font color="#CCCCCC"> language but I told you</font><font color="#E5E5E5"> it's</font>

261
00:15:57,310 --> 00:16:05,380
more different<font color="#E5E5E5"> that in signal a trust</font>

262
00:15:59,560 --> 00:16:09,780
<font color="#E5E5E5">you</font><font color="#CCCCCC"> another thing</font><font color="#E5E5E5"> that's special to</font><font color="#CCCCCC"> Ada</font>

263
00:16:05,380 --> 00:16:13,330
is the building block approach<font color="#CCCCCC"> we'll see</font>

264
00:16:09,780 --> 00:16:20,050
there<font color="#E5E5E5"> is no syntactic construct called a</font>

265
00:16:13,330 --> 00:16:24,540
class<font color="#E5E5E5"> in</font><font color="#CCCCCC"> ADA why because the approach is</font>

266
00:16:20,050 --> 00:16:30,760
to provide<font color="#E5E5E5"> reusable stores that</font><font color="#CCCCCC"> you</font>

267
00:16:24,540 --> 00:16:33,310
assemble to build what<font color="#CCCCCC"> you need you know</font>

268
00:16:30,760 --> 00:16:39,189
the<font color="#E5E5E5"> difference between Playmobil and</font>

269
00:16:33,310 --> 00:16:45,430
Lego<font color="#CCCCCC"> King Playmobil allow you have very</font>

270
00:16:39,190 --> 00:16:49,030
nice<font color="#E5E5E5"> pieces very specialized if you take</font>

271
00:16:45,430 --> 00:16:50,739
a box<font color="#CCCCCC"> there is nothing from a box you</font>

272
00:16:49,030 --> 00:16:52,209
can use<font color="#E5E5E5"> to play with</font><font color="#CCCCCC"> a completely</font>

273
00:16:50,740 --> 00:16:54,850
different box because they are all

274
00:16:52,210 --> 00:16:58,930
<font color="#E5E5E5">specialized</font><font color="#CCCCCC"> very nice for one purpose</font>

275
00:16:54,850 --> 00:17:03,060
<font color="#CCCCCC">you can do anything</font><font color="#E5E5E5"> else with them the</font>

276
00:16:58,930 --> 00:17:06,250
legal approach is to have building box

277
00:17:03,060 --> 00:17:08,139
<font color="#E5E5E5">what can you do with one block nothing</font>

278
00:17:06,250 --> 00:17:12,609
<font color="#CCCCCC">it's not</font><font color="#E5E5E5"> interesting nobody plays with</font>

279
00:17:08,140 --> 00:17:15,550
<font color="#CCCCCC">one Lego box okay</font><font color="#E5E5E5"> but when you</font><font color="#CCCCCC"> assemble</font>

280
00:17:12,609 --> 00:17:17,760
them<font color="#E5E5E5"> then you can build very simple</font>

281
00:17:15,550 --> 00:17:21,089
things like<font color="#E5E5E5"> that</font>

282
00:17:17,760 --> 00:17:26,339
very sophisticated<font color="#E5E5E5"> like that or even</font>

283
00:17:21,089 --> 00:17:29,730
this so the ADA approach is definitely

284
00:17:26,339 --> 00:17:32,250
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Lego</font><font color="#CCCCCC"> okay we have building blocks</font>

285
00:17:29,730 --> 00:17:34,890
<font color="#E5E5E5">when you put the box together you build</font>

286
00:17:32,250 --> 00:17:40,320
<font color="#E5E5E5">a class when you do the blocks somewhat</font>

287
00:17:34,890 --> 00:17:43,530
differently you build<font color="#E5E5E5"> something so the</font>

288
00:17:40,320 --> 00:17:47,460
statements are look like what you have

289
00:17:43,530 --> 00:17:50,760
in<font color="#E5E5E5"> most languages with a certain number</font>

290
00:17:47,460 --> 00:17:54,960
<font color="#CCCCCC">of</font><font color="#E5E5E5"> security features for example</font><font color="#CCCCCC"> in a</font>

291
00:17:50,760 --> 00:17:57,930
for loop<font color="#CCCCCC"> and not that every statement</font><font color="#E5E5E5"> is</font>

292
00:17:54,960 --> 00:18:00,420
ended by<font color="#CCCCCC"> and and you repeat the</font><font color="#E5E5E5"> key word</font>

293
00:17:57,930 --> 00:18:03,420
that<font color="#E5E5E5"> makes it a lot more readable and</font>

294
00:18:00,420 --> 00:18:05,120
helps you to<font color="#CCCCCC"> understand what</font><font color="#E5E5E5"> has what's</font>

295
00:18:03,420 --> 00:18:09,090
happening

296
00:18:05,120 --> 00:18:10,679
the see here that<font color="#CCCCCC"> controls the loop for</font>

297
00:18:09,090 --> 00:18:15,409
<font color="#E5E5E5">the rules of the</font><font color="#CCCCCC"> language it's a</font>

298
00:18:10,680 --> 00:18:19,110
constant so you cannot change changing

299
00:18:15,410 --> 00:18:22,170
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> a local constant to the loop so it</font>

300
00:18:19,110 --> 00:18:24,899
doesn't exist<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> exit the loop so</font>

301
00:18:22,170 --> 00:18:26,940
you cannot cheat you cannot change it in

302
00:18:24,900 --> 00:18:29,880
<font color="#CCCCCC">the middle of the loop</font><font color="#E5E5E5"> you cannot access</font>

303
00:18:26,940 --> 00:18:33,810
it<font color="#E5E5E5"> once you have exited the loop when</font>

304
00:18:29,880 --> 00:18:37,680
you have when<font color="#E5E5E5"> you see that it is</font>

305
00:18:33,810 --> 00:18:41,490
formally provable<font color="#E5E5E5"> that see we take all</font>

306
00:18:37,680 --> 00:18:46,320
values<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the type</font><font color="#CCCCCC"> caller okay and</font>

307
00:18:41,490 --> 00:18:49,560
nobody<font color="#E5E5E5"> will show you while</font><font color="#CCCCCC"> loops you</font><font color="#E5E5E5"> can</font>

308
00:18:46,320 --> 00:18:52,110
have<font color="#CCCCCC"> game</font><font color="#E5E5E5"> fields which that allows you</font>

309
00:18:49,560 --> 00:18:57,840
<font color="#CCCCCC">to exit the loop on certain conditions</font>

310
00:18:52,110 --> 00:19:00,330
so the power of expression<font color="#E5E5E5"> of</font><font color="#CCCCCC"> EDA is is</font>

311
00:18:57,840 --> 00:19:02,760
quite<font color="#E5E5E5"> good by the way</font><font color="#CCCCCC"> since we are</font>

312
00:19:00,330 --> 00:19:07,169
talking free software here remember

313
00:19:02,760 --> 00:19:11,790
<font color="#E5E5E5">readability is important the principle</font>

314
00:19:07,170 --> 00:19:14,960
<font color="#E5E5E5">of free software is many eyeballs the</font>

315
00:19:11,790 --> 00:19:18,750
software<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be readable by anybody</font>

316
00:19:14,960 --> 00:19:22,730
<font color="#E5E5E5">okay so having a readable language is</font>

317
00:19:18,750 --> 00:19:22,730
<font color="#E5E5E5">something important for</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> software</font>

318
00:19:23,380 --> 00:19:29,660
so this is an example I<font color="#CCCCCC"> think you can</font>

319
00:19:26,870 --> 00:19:32,600
understand this one it<font color="#CCCCCC"> is important to</font>

320
00:19:29,660 --> 00:19:36,110
note that in the<font color="#CCCCCC"> case statement is like</font>

321
00:19:32,600 --> 00:19:39,500
the<font color="#CCCCCC"> sea switch if you want but here</font>

322
00:19:36,110 --> 00:19:42,949
<font color="#E5E5E5">given that we</font><font color="#CCCCCC"> are strongly typed</font><font color="#E5E5E5"> we know</font>

323
00:19:39,500 --> 00:19:46,910
the type of<font color="#E5E5E5"> I and the type is a set of</font>

324
00:19:42,950 --> 00:19:50,300
values<font color="#E5E5E5"> therefore the compiler knows</font><font color="#CCCCCC"> the</font>

325
00:19:46,910 --> 00:19:55,280
set of<font color="#E5E5E5"> values and will check that every</font>

326
00:19:50,300 --> 00:19:59,510
possible<font color="#CCCCCC"> value is given</font><font color="#E5E5E5"> here in the</font><font color="#CCCCCC"> coin</font>

327
00:19:55,280 --> 00:20:03,170
<font color="#CCCCCC">closing the various branches if you omit</font>

328
00:19:59,510 --> 00:20:07,670
the one others that the<font color="#E5E5E5"> else the</font>

329
00:20:03,170 --> 00:20:11,720
otherwise if you<font color="#E5E5E5"> want then the compiler</font>

330
00:20:07,670 --> 00:20:13,930
we check the full coverage<font color="#E5E5E5"> and it's a</font>

331
00:20:11,720 --> 00:20:17,840
very nice feature<font color="#E5E5E5"> because if you change</font>

332
00:20:13,930 --> 00:20:21,440
the type of<font color="#E5E5E5"> I the first time Yuri</font>

333
00:20:17,840 --> 00:20:23,240
<font color="#CCCCCC">compiled every place</font><font color="#E5E5E5"> where you forgot to</font>

334
00:20:21,440 --> 00:20:26,240
change your code it will not compile

335
00:20:23,240 --> 00:20:28,280
<font color="#CCCCCC">anymore</font><font color="#E5E5E5"> so you say oh thank you nice</font>

336
00:20:26,240 --> 00:20:31,490
compiler<font color="#E5E5E5"> you tell me where I forgot to</font>

337
00:20:28,280 --> 00:20:33,680
do<font color="#CCCCCC"> something rather</font><font color="#E5E5E5"> than having the</font>

338
00:20:31,490 --> 00:20:43,490
value simply ignored and you're changing

339
00:20:33,680 --> 00:20:47,360
but<font color="#CCCCCC"> bug for house</font><font color="#E5E5E5"> structured types have</font>

340
00:20:43,490 --> 00:20:50,630
values like<font color="#E5E5E5"> any other type and therefore</font>

341
00:20:47,360 --> 00:20:53,360
<font color="#E5E5E5">it's important to express them so we</font>

342
00:20:50,630 --> 00:20:56,870
have syntax for example to express

343
00:20:53,360 --> 00:21:00,800
directly<font color="#E5E5E5"> arrays and matrices</font><font color="#CCCCCC"> that's how</font>

344
00:20:56,870 --> 00:21:03,199
you can write<font color="#CCCCCC"> a unit matrix in era</font><font color="#E5E5E5"> from</font>

345
00:21:00,800 --> 00:21:09,350
<font color="#E5E5E5">the point of view of readability</font><font color="#CCCCCC"> then</font>

346
00:21:03,200 --> 00:21:13,760
<font color="#CCCCCC">little but here I'm creating small</font>

347
00:21:09,350 --> 00:21:17,659
linked<font color="#E5E5E5"> list so you see a new node whose</font>

348
00:21:13,760 --> 00:21:21,710
value is<font color="#E5E5E5"> 10,000 and next is a new node</font>

349
00:21:17,660 --> 00:21:23,960
whose value is<font color="#CCCCCC"> 200 9 and next is null</font>

350
00:21:21,710 --> 00:21:28,370
and<font color="#E5E5E5"> so on so I can the idea is to</font>

351
00:21:23,960 --> 00:21:30,890
describe<font color="#CCCCCC"> globally the structures and not</font>

352
00:21:28,370 --> 00:21:32,159
to always<font color="#E5E5E5"> return to the deepest level</font>

353
00:21:30,890 --> 00:21:35,280
and

354
00:21:32,160 --> 00:21:40,500
individual machine words<font color="#E5E5E5"> daddy ID you</font>

355
00:21:35,280 --> 00:21:44,250
try to work globally so what about

356
00:21:40,500 --> 00:21:46,560
<font color="#E5E5E5">strong typing here I felt</font><font color="#CCCCCC"> defined the</font>

357
00:21:44,250 --> 00:21:50,460
type called an<font color="#E5E5E5"> age the age of a person</font>

358
00:21:46,560 --> 00:21:53,429
<font color="#E5E5E5">for example so the lower</font><font color="#CCCCCC"> bound is</font>

359
00:21:50,460 --> 00:21:56,690
currently 0 0 / bound well we can

360
00:21:53,430 --> 00:22:00,870
discuss it but<font color="#E5E5E5"> 1 2</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> 5 should be</font><font color="#CCCCCC"> enough</font>

361
00:21:56,690 --> 00:22:08,130
<font color="#CCCCCC">in a building go to - file with some</font>

362
00:22:00,870 --> 00:22:12,389
parking<font color="#E5E5E5"> falls</font><font color="#CCCCCC"> to 15</font><font color="#E5E5E5"> we are conceptually</font>

363
00:22:08,130 --> 00:22:15,390
completely different so you can declare

364
00:22:12,390 --> 00:22:18,540
<font color="#CCCCCC">a variable of those types</font><font color="#E5E5E5"> assign correct</font>

365
00:22:15,390 --> 00:22:21,750
value to them<font color="#E5E5E5"> but if you try to write my</font>

366
00:22:18,540 --> 00:22:25,139
age<font color="#E5E5E5"> colony pull my</font><font color="#CCCCCC"> flaw the compiler</font>

367
00:22:21,750 --> 00:22:28,740
will tell you now this is<font color="#E5E5E5"> of type floor</font>

368
00:22:25,140 --> 00:22:34,080
this is of type age this assignment is

369
00:22:28,740 --> 00:22:37,080
<font color="#E5E5E5">not allowed it seems so obvious I mean</font>

370
00:22:34,080 --> 00:22:40,320
<font color="#E5E5E5">that you cannot add apples and oranges</font>

371
00:22:37,080 --> 00:22:44,600
<font color="#E5E5E5">but as far</font><font color="#CCCCCC"> as I</font><font color="#E5E5E5"> know idea is that the</font>

372
00:22:40,320 --> 00:22:48,480
only<font color="#E5E5E5"> language that allows you to declare</font>

373
00:22:44,600 --> 00:22:51,030
numerical types that are incompatible

374
00:22:48,480 --> 00:22:54,090
so you preserve<font color="#CCCCCC"> that different thing</font>

375
00:22:51,030 --> 00:22:58,730
it's not because they are represented<font color="#CCCCCC"> by</font>

376
00:22:54,090 --> 00:22:58,730
numbers that<font color="#E5E5E5"> is the same thing</font><font color="#CCCCCC"> okay</font>

377
00:23:00,270 --> 00:23:10,090
the idea<font color="#E5E5E5"> curing is that if you design</font>

378
00:23:04,870 --> 00:23:12,760
<font color="#CCCCCC">something you have a problem level we</font>

379
00:23:10,090 --> 00:23:15,189
define things<font color="#E5E5E5"> that are</font><font color="#CCCCCC"> completely</font>

380
00:23:12,760 --> 00:23:21,030
<font color="#CCCCCC">different</font><font color="#E5E5E5"> independent</font><font color="#CCCCCC"> like an eighth</font>

381
00:23:15,190 --> 00:23:25,150
floor and etc<font color="#E5E5E5"> you had a machine rival</font>

382
00:23:21,030 --> 00:23:29,440
machines<font color="#E5E5E5"> deal with bytes in float</font>

383
00:23:25,150 --> 00:23:32,710
whatever<font color="#E5E5E5"> these are machine types in a</font>

384
00:23:29,440 --> 00:23:37,559
good design<font color="#E5E5E5"> what you have to do is first</font>

385
00:23:32,710 --> 00:23:42,190
to analyze your problem and then let the

386
00:23:37,559 --> 00:23:45,250
translation<font color="#CCCCCC"> into machine types with</font>

387
00:23:42,190 --> 00:23:48,280
other languages the types<font color="#E5E5E5"> that are</font>

388
00:23:45,250 --> 00:23:53,200
provided by<font color="#CCCCCC"> the language</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> meshing</font>

389
00:23:48,280 --> 00:23:56,289
types<font color="#E5E5E5"> therefore you have</font><font color="#CCCCCC"> to do the</font>

390
00:23:53,200 --> 00:23:59,950
mapping between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> problem</font>

391
00:23:56,289 --> 00:24:04,179
level type and machine type<font color="#CCCCCC"> what</font>

392
00:23:59,950 --> 00:24:06,970
urinator<font color="#E5E5E5"> is that you work you describe</font>

393
00:24:04,179 --> 00:24:10,600
<font color="#CCCCCC">your problem at the problem level</font><font color="#E5E5E5"> and</font>

394
00:24:06,970 --> 00:24:15,970
the compiler is in charge<font color="#E5E5E5"> of doing the</font>

395
00:24:10,600 --> 00:24:21,209
<font color="#CCCCCC">mapping so a client</font><font color="#E5E5E5"> tells you</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have</font>

396
00:24:15,970 --> 00:24:26,980
something<font color="#CCCCCC"> that goes to 0 to 250 fine oh</font>

397
00:24:21,210 --> 00:24:31,900
no it<font color="#E5E5E5"> was not 250 it was 260 no problem</font>

398
00:24:26,980 --> 00:24:36,340
I<font color="#CCCCCC"> changed 250 to 260 and this will not</font>

399
00:24:31,900 --> 00:24:39,549
break anything in my program behind the

400
00:24:36,340 --> 00:24:42,309
same all your types will move from<font color="#E5E5E5"> 1 to</font>

401
00:24:39,549 --> 00:24:46,389
<font color="#E5E5E5">2 bytes but that's done by the compiler</font>

402
00:24:42,309 --> 00:24:48,129
there are dependency rules that ensure

403
00:24:46,390 --> 00:24:51,240
that<font color="#E5E5E5"> everything that needs to be</font>

404
00:24:48,130 --> 00:24:54,900
recompiled will be recompiled<font color="#E5E5E5"> so you</font>

405
00:24:51,240 --> 00:24:54,900
it's not<font color="#E5E5E5"> a problem</font>

406
00:24:55,289 --> 00:25:04,720
so packages<font color="#CCCCCC"> are the way to control</font>

407
00:25:00,730 --> 00:25:07,240
visibility in general you have<font color="#E5E5E5"> what you</font>

408
00:25:04,720 --> 00:25:09,549
expect to<font color="#E5E5E5"> tell your client if you want</font>

409
00:25:07,240 --> 00:25:12,700
it's an approach where you are<font color="#CCCCCC"> a</font>

410
00:25:09,549 --> 00:25:15,730
<font color="#CCCCCC">provider of a software component</font>

411
00:25:12,700 --> 00:25:18,730
user<font color="#E5E5E5"> so you have the user view which is</font>

412
00:25:15,730 --> 00:25:21,730
abstract<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can define</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> type as</font>

413
00:25:18,730 --> 00:25:24,130
private<font color="#E5E5E5"> meaning okay there is a type I</font>

414
00:25:21,730 --> 00:25:27,880
don't<font color="#CCCCCC"> tell you what</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> I keep it for</font>

415
00:25:24,130 --> 00:25:31,080
<font color="#E5E5E5">me and in the private part there you'll</font>

416
00:25:27,880 --> 00:25:35,410
have<font color="#CCCCCC"> to give the full definition</font><font color="#E5E5E5"> and</font>

417
00:25:31,080 --> 00:25:37,300
maybe constants for<font color="#E5E5E5"> here I have declared</font>

418
00:25:35,410 --> 00:25:39,790
constant but I cannot give the value

419
00:25:37,300 --> 00:25:42,790
because the type is private<font color="#E5E5E5"> so in the</font>

420
00:25:39,790 --> 00:25:44,950
private part<font color="#E5E5E5"> then you</font><font color="#CCCCCC"> tell to the</font>

421
00:25:42,790 --> 00:25:50,050
compiler<font color="#E5E5E5"> because the compiler needs to</font>

422
00:25:44,950 --> 00:25:53,530
know what the actual<font color="#E5E5E5"> definitions are so</font>

423
00:25:50,050 --> 00:25:55,240
you have completely<font color="#E5E5E5"> abstract view</font><font color="#CCCCCC"> where</font>

424
00:25:53,530 --> 00:25:58,030
<font color="#E5E5E5">you don't know how it is</font><font color="#CCCCCC"> represented in</font>

425
00:25:55,240 --> 00:26:03,070
machine and then<font color="#E5E5E5"> you define the</font>

426
00:25:58,030 --> 00:26:05,470
representation oops then you have a body

427
00:26:03,070 --> 00:26:09,090
<font color="#CCCCCC">and</font><font color="#E5E5E5"> in the body of the package you</font><font color="#CCCCCC"> have</font>

428
00:26:05,470 --> 00:26:12,580
<font color="#E5E5E5">of course to provide all the bodies the</font>

429
00:26:09,090 --> 00:26:14,740
implementation of<font color="#E5E5E5"> what you have</font>

430
00:26:12,580 --> 00:26:17,590
announced in the specification so in a

431
00:26:14,740 --> 00:26:21,460
sense it works a bit like<font color="#CCCCCC"> a dot H and a</font>

432
00:26:17,590 --> 00:26:26,020
dot C file<font color="#E5E5E5"> but there is no guarantee</font>

433
00:26:21,460 --> 00:26:29,230
<font color="#E5E5E5">that that to use dot H just a</font>

434
00:26:26,020 --> 00:26:33,879
convenience having includes<font color="#E5E5E5"> in see</font>

435
00:26:29,230 --> 00:26:36,850
nothing forces you to have<font color="#CCCCCC"> inconsistent</font>

436
00:26:33,880 --> 00:26:40,590
<font color="#CCCCCC">heaters or</font><font color="#E5E5E5"> whatever okay here</font>

437
00:26:36,850 --> 00:26:40,590
<font color="#CCCCCC">everything's</font><font color="#E5E5E5"> checked by a compiler</font>

438
00:26:42,220 --> 00:26:47,679
and then you can use them here<font color="#E5E5E5"> I have</font>

439
00:26:45,039 --> 00:26:51,190
redefined operation<font color="#E5E5E5"> right multiply and</font>

440
00:26:47,679 --> 00:26:55,720
divide on colors by a<font color="#CCCCCC"> real factor around</font>

441
00:26:51,190 --> 00:26:58,330
so I can<font color="#CCCCCC"> use them normally so the idea</font>

442
00:26:55,720 --> 00:27:01,360
<font color="#E5E5E5">is to enforce abstraction in the sense</font>

443
00:26:58,330 --> 00:27:03,668
that<font color="#CCCCCC"> type that reflect the problem</font>

444
00:27:01,360 --> 00:27:09,399
domain<font color="#E5E5E5"> independently of the</font>

445
00:27:03,669 --> 00:27:12,009
implementation<font color="#CCCCCC"> also when you use a</font>

446
00:27:09,399 --> 00:27:15,370
package or<font color="#E5E5E5"> anything else by the way you</font>

447
00:27:12,009 --> 00:27:18,490
have to<font color="#E5E5E5"> name it in a ways close this</font>

448
00:27:15,370 --> 00:27:22,289
means<font color="#E5E5E5"> that whenever a module depends on</font>

449
00:27:18,490 --> 00:27:26,529
another module this dependency is always

450
00:27:22,289 --> 00:27:29,350
explicit waiting<font color="#E5E5E5"> in the source file</font><font color="#CCCCCC"> so</font>

451
00:27:26,529 --> 00:27:32,860
it's<font color="#CCCCCC"> very easy</font><font color="#E5E5E5"> in an ADA program you</font>

452
00:27:29,350 --> 00:27:35,379
know what depends on what if<font color="#CCCCCC"> I've</font>

453
00:27:32,860 --> 00:27:38,229
<font color="#E5E5E5">chained that modules well which modules</font>

454
00:27:35,379 --> 00:27:45,209
will be<font color="#E5E5E5"> impacted and so on you just have</font>

455
00:27:38,230 --> 00:27:49,360
<font color="#E5E5E5">to follow a very simple graph something</font>

456
00:27:45,210 --> 00:27:55,450
also<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I know of in no other language</font>

457
00:27:49,360 --> 00:27:58,629
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> of discriminated</font><font color="#CCCCCC"> size</font><font color="#E5E5E5"> in a</font>

458
00:27:55,450 --> 00:28:03,759
sense<font color="#CCCCCC"> the type can have a discriminant</font>

459
00:27:58,629 --> 00:28:07,299
which<font color="#E5E5E5"> is a kind of parameter destroyed</font>

460
00:28:03,759 --> 00:28:10,629
<font color="#E5E5E5">the data structure the shape of the data</font>

461
00:28:07,299 --> 00:28:13,299
structure will depend on the value<font color="#CCCCCC"> of</font>

462
00:28:10,629 --> 00:28:16,418
the parameter<font color="#E5E5E5"> that's called the</font>

463
00:28:13,299 --> 00:28:21,220
discriminant<font color="#E5E5E5"> so here I</font><font color="#CCCCCC"> have an example I</font>

464
00:28:16,419 --> 00:28:23,890
have a<font color="#E5E5E5"> student record so</font>

465
00:28:21,220 --> 00:28:27,040
it's<font color="#E5E5E5"> student has a major little science</font>

466
00:28:23,890 --> 00:28:32,620
or technology<font color="#CCCCCC"> grades are that the French</font>

467
00:28:27,040 --> 00:28:34,990
grading system from<font color="#E5E5E5"> zero to</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> everybody</font>

468
00:28:32,620 --> 00:28:37,959
has a name and<font color="#E5E5E5"> an angry a great in</font>

469
00:28:34,990 --> 00:28:41,590
<font color="#CCCCCC">English in math and depending on the</font>

470
00:28:37,960 --> 00:28:43,960
major<font color="#E5E5E5"> it will include a grade in</font>

471
00:28:41,590 --> 00:28:46,570
<font color="#E5E5E5">lighting or physics and chemistry or</font>

472
00:28:43,960 --> 00:28:52,480
technology or<font color="#CCCCCC"> something like</font><font color="#E5E5E5"> that so</font>

473
00:28:46,570 --> 00:28:56,350
it's a bit<font color="#E5E5E5"> like having</font><font color="#CCCCCC"> Union in abstract</font>

474
00:28:52,480 --> 00:29:00,160
<font color="#E5E5E5">but it's fully con control you can</font><font color="#CCCCCC"> teach</font>

475
00:28:56,350 --> 00:29:04,740
your major is in letters you cannot

476
00:29:00,160 --> 00:29:08,860
access<font color="#CCCCCC"> note in failure</font><font color="#E5E5E5"> grade in physics</font>

477
00:29:04,740 --> 00:29:12,780
<font color="#CCCCCC">okay because it's freely a variable</font>

478
00:29:08,860 --> 00:29:12,780
shape data

479
00:29:16,570 --> 00:29:25,340
object-oriented programming is<font color="#CCCCCC"> a typical</font>

480
00:29:19,910 --> 00:29:27,850
example<font color="#E5E5E5"> of building box so we</font><font color="#CCCCCC"> think that</font>

481
00:29:25,340 --> 00:29:31,280
packages support encapsulation

482
00:29:27,850 --> 00:29:34,580
limitation of<font color="#E5E5E5"> visibilities there are</font>

483
00:29:31,280 --> 00:29:38,990
special kind of types called<font color="#E5E5E5"> tag types</font>

484
00:29:34,580 --> 00:29:44,179
<font color="#E5E5E5">that support dynamic dispatching so a</font>

485
00:29:38,990 --> 00:29:46,610
class is<font color="#E5E5E5"> an encapsulation of types with</font>

486
00:29:44,180 --> 00:29:49,850
dynamic dispatching so it's a

487
00:29:46,610 --> 00:29:53,510
programming<font color="#CCCCCC"> pattern where</font><font color="#E5E5E5"> you have a tag</font>

488
00:29:49,850 --> 00:30:00,500
type declared<font color="#E5E5E5"> in a package so a typical</font>

489
00:29:53,510 --> 00:30:04,070
example<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that not very original</font><font color="#CCCCCC"> you</font>

490
00:30:00,500 --> 00:30:06,890
define a tag type so that's<font color="#CCCCCC"> an amine</font>

491
00:30:04,070 --> 00:30:08,899
convention you can<font color="#E5E5E5"> call it</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> and</font>

492
00:30:06,890 --> 00:30:12,890
you give the name<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> class to the</font>

493
00:30:08,900 --> 00:30:15,590
package<font color="#E5E5E5"> so you would write widget dot</font>

494
00:30:12,890 --> 00:30:17,540
instance if you want an instance of the

495
00:30:15,590 --> 00:30:21,199
class<font color="#E5E5E5"> widget</font><font color="#CCCCCC"> okay</font>

496
00:30:17,540 --> 00:30:23,480
and you declare operations<font color="#E5E5E5"> so it's</font>

497
00:30:21,200 --> 00:30:26,929
called<font color="#E5E5E5"> the primitive operation in Ada</font>

498
00:30:23,480 --> 00:30:31,100
<font color="#CCCCCC">it's a method</font><font color="#E5E5E5"> if you want in the all the</font>

499
00:30:26,929 --> 00:30:37,610
<font color="#E5E5E5">operation on your</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> declared in</font>

500
00:30:31,100 --> 00:30:44,000
the same package and then you can derive

501
00:30:37,610 --> 00:30:46,428
a<font color="#E5E5E5"> new type from an existing one adding</font>

502
00:30:44,000 --> 00:30:49,730
some new components<font color="#E5E5E5"> and redefine</font>

503
00:30:46,429 --> 00:30:53,320
operation so that<font color="#E5E5E5"> the usual way of doing</font>

504
00:30:49,730 --> 00:30:53,320
<font color="#E5E5E5">object orientation</font>

505
00:30:53,490 --> 00:31:04,140
<font color="#CCCCCC">I didn't</font><font color="#E5E5E5"> talk about pointers there is no</font>

506
00:31:00,210 --> 00:31:08,700
need to<font color="#CCCCCC"> have pointers when you need</font>

507
00:31:04,140 --> 00:31:15,059
<font color="#E5E5E5">object orientation either since 1983 has</font>

508
00:31:08,700 --> 00:31:26,130
always been able to<font color="#CCCCCC"> allocate variables</font>

509
00:31:15,059 --> 00:31:28,110
of dynamic size on the stack pointers as

510
00:31:26,130 --> 00:31:30,630
soon as it's come to object orientation

511
00:31:28,110 --> 00:31:33,510
<font color="#CCCCCC">well some people write</font><font color="#E5E5E5"> that under</font>

512
00:31:30,630 --> 00:31:36,690
beautiful<font color="#E5E5E5"> theory called concerns but the</font>

513
00:31:33,510 --> 00:31:39,480
real<font color="#E5E5E5"> reason as soon as you don't do</font>

514
00:31:36,690 --> 00:31:41,580
object orientation you have polymorphism

515
00:31:39,480 --> 00:31:44,190
<font color="#E5E5E5">so you don't know the size of</font><font color="#CCCCCC"> the</font>

516
00:31:41,580 --> 00:31:47,149
<font color="#E5E5E5">objects and that so you cannot declare</font>

517
00:31:44,190 --> 00:31:50,370
them on the stack but in a that we have

518
00:31:47,150 --> 00:31:52,530
<font color="#E5E5E5">dynamically sized objects so we have no</font>

519
00:31:50,370 --> 00:31:54,780
<font color="#CCCCCC">reason to</font><font color="#E5E5E5"> be in any way connected</font><font color="#CCCCCC"> to</font>

520
00:31:52,530 --> 00:31:58,260
pointers<font color="#E5E5E5"> any practice of course you</font>

521
00:31:54,780 --> 00:32:01,139
often need pointers to objects because

522
00:31:58,260 --> 00:32:03,150
you have<font color="#CCCCCC"> the lists</font><font color="#E5E5E5"> of objects or</font><font color="#CCCCCC"> things</font>

523
00:32:01,140 --> 00:32:05,580
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you mean pointers because</font>

524
00:32:03,150 --> 00:32:09,170
<font color="#CCCCCC">you have lists not</font><font color="#E5E5E5"> because you have</font>

525
00:32:05,580 --> 00:32:09,169
objects<font color="#CCCCCC"> okay</font>

526
00:32:13,570 --> 00:32:20,350
something that's<font color="#E5E5E5"> also very special to</font>

527
00:32:16,640 --> 00:32:26,840
<font color="#E5E5E5">Ada</font><font color="#CCCCCC"> it that we make the difference</font>

528
00:32:20,350 --> 00:32:29,959
between<font color="#E5E5E5"> node in a tree I'm talking</font><font color="#CCCCCC"> about</font>

529
00:32:26,840 --> 00:32:33,290
a hierarchy of types okay<font color="#E5E5E5"> that</font><font color="#CCCCCC"> defines a</font>

530
00:32:29,960 --> 00:32:38,840
tree and because we<font color="#E5E5E5"> are very strongly</font>

531
00:32:33,290 --> 00:32:44,389
type a specific<font color="#CCCCCC"> type adjust that time</font>

532
00:32:38,840 --> 00:32:46,399
and we have what we called so here I

533
00:32:44,390 --> 00:32:50,860
have widget window menu

534
00:32:46,400 --> 00:32:55,940
a<font color="#E5E5E5"> pop-up window and</font><font color="#CCCCCC"> who do I have to</font>

535
00:32:50,860 --> 00:32:59,240
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> narrow down</font><font color="#E5E5E5"> menu and so on that</font>

536
00:32:55,940 --> 00:33:02,360
makes a tree<font color="#E5E5E5"> okay an object declared of</font>

537
00:32:59,240 --> 00:33:07,160
type would vet can hold only<font color="#E5E5E5"> values of</font>

538
00:33:02,360 --> 00:33:11,510
type widget<font color="#E5E5E5"> nothing else we need the</font>

539
00:33:07,160 --> 00:33:15,800
difference<font color="#E5E5E5"> with the whole tree a node in</font>

540
00:33:11,510 --> 00:33:18,650
a tree<font color="#E5E5E5"> generates a tree so it's a</font>

541
00:33:15,800 --> 00:33:21,970
different type<font color="#CCCCCC"> in EDA called widget T</font>

542
00:33:18,650 --> 00:33:26,510
<font color="#E5E5E5">class which is in a sense the Union</font>

543
00:33:21,970 --> 00:33:29,870
<font color="#CCCCCC">command</font><font color="#E5E5E5"> here the union of all the values</font>

544
00:33:26,510 --> 00:33:32,660
from widget and all tabs<font color="#CCCCCC"> that inherit</font>

545
00:33:29,870 --> 00:33:36,110
from widget and so we make a clear

546
00:33:32,660 --> 00:33:40,070
difference<font color="#CCCCCC"> between the node and the tree</font>

547
00:33:36,110 --> 00:33:43,010
<font color="#CCCCCC">that's generated</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> that node so that's</font>

548
00:33:40,070 --> 00:33:45,919
also something<font color="#E5E5E5"> quite original it has</font><font color="#CCCCCC"> a</font>

549
00:33:43,010 --> 00:33:47,510
number<font color="#CCCCCC"> of implications well I</font><font color="#E5E5E5"> won't have</font>

550
00:33:45,920 --> 00:33:50,090
to<font color="#E5E5E5"> date</font><font color="#CCCCCC"> at time to discuss any</font>

551
00:33:47,510 --> 00:33:54,440
everything<font color="#E5E5E5"> here but it's certainly</font><font color="#CCCCCC"> very</font>

552
00:33:50,090 --> 00:33:57,980
interesting and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> bring something new</font>

553
00:33:54,440 --> 00:34:00,620
to the<font color="#E5E5E5"> object orientation to have a</font>

554
00:33:57,980 --> 00:34:03,170
distinction<font color="#E5E5E5"> and so I can for</font><font color="#CCCCCC"> example</font>

555
00:34:00,620 --> 00:34:06,679
have<font color="#E5E5E5"> a positive move that applies</font>

556
00:34:03,170 --> 00:34:09,590
equally to any widget so<font color="#CCCCCC"> it's parameter</font>

557
00:34:06,680 --> 00:34:14,060
is type<font color="#E5E5E5"> wind</font><font color="#CCCCCC"> jetty class so it means it</font>

558
00:34:09,590 --> 00:34:16,159
<font color="#E5E5E5">can</font><font color="#CCCCCC"> accept</font><font color="#E5E5E5"> any value in the tree so it</font>

559
00:34:14,060 --> 00:34:19,090
can be a window I mean<font color="#E5E5E5"> you pop up water</font>

560
00:34:16,159 --> 00:34:19,090
whatever<font color="#E5E5E5"> you are</font>

561
00:34:21,230 --> 00:34:28,469
and well you can use it<font color="#CCCCCC"> normally and the</font>

562
00:34:24,870 --> 00:34:30,929
<font color="#CCCCCC">since 205 we are it's a same trick as in</font>

563
00:34:28,469 --> 00:34:34,109
Python<font color="#E5E5E5"> for example the first parameter</font>

564
00:34:30,929 --> 00:34:41,270
can go in front if you<font color="#CCCCCC"> want the object</font>

565
00:34:34,110 --> 00:34:45,510
dot method notation<font color="#E5E5E5"> okay interfaces were</font>

566
00:34:41,270 --> 00:34:48,889
added to that<font color="#E5E5E5"> in 205</font><font color="#CCCCCC"> so you can derive</font>

567
00:34:45,510 --> 00:34:52,380
from one type<font color="#E5E5E5"> and several interfaces</font>

568
00:34:48,889 --> 00:34:55,739
<font color="#E5E5E5">just a small improvement</font><font color="#CCCCCC"> or an interface</font>

569
00:34:52,380 --> 00:34:59,280
has only abstract methods<font color="#CCCCCC"> oh no matter</font>

570
00:34:55,739 --> 00:35:01,470
<font color="#E5E5E5">we have methods that do nothing you have</font>

571
00:34:59,280 --> 00:35:06,960
no diamond problem because they are<font color="#E5E5E5"> all</font>

572
00:35:01,470 --> 00:35:08,819
equivalent<font color="#E5E5E5"> and so I can have a</font>

573
00:35:06,960 --> 00:35:16,980
<font color="#E5E5E5">persistent type eat something that</font>

574
00:35:08,820 --> 00:35:20,820
<font color="#E5E5E5">offers read and write okay convenient</font>

575
00:35:16,980 --> 00:35:23,210
<font color="#CCCCCC">function so but exceptions the only</font>

576
00:35:20,820 --> 00:35:25,500
thing important is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know that</font>

577
00:35:23,210 --> 00:35:28,500
everything<font color="#E5E5E5"> that can happen at runtime</font>

578
00:35:25,500 --> 00:35:31,830
generates an exception in<font color="#E5E5E5"> C++ for</font>

579
00:35:28,500 --> 00:35:35,070
example exceptions were added quite late

580
00:35:31,830 --> 00:35:37,830
in<font color="#E5E5E5"> the history of language and there is</font>

581
00:35:35,070 --> 00:35:41,280
also that<font color="#E5E5E5"> IDE that the compiler should</font>

582
00:35:37,830 --> 00:35:43,890
<font color="#E5E5E5">not do something</font><font color="#CCCCCC"> that's not written</font><font color="#E5E5E5"> by</font>

583
00:35:41,280 --> 00:35:46,230
the programmer<font color="#CCCCCC"> I understand</font><font color="#E5E5E5"> that</font>

584
00:35:43,890 --> 00:35:50,580
position<font color="#E5E5E5"> it's not the ADA's position</font>

585
00:35:46,230 --> 00:35:55,350
that's all so in<font color="#CCCCCC"> Ada</font><font color="#E5E5E5"> opposition is that</font>

586
00:35:50,580 --> 00:35:59,880
if anything<font color="#CCCCCC"> goes wrong</font><font color="#E5E5E5"> the program has</font>

587
00:35:55,350 --> 00:36:01,680
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> aware of that so in</font><font color="#CCCCCC"> C++ if you</font>

588
00:35:59,880 --> 00:36:03,720
have another flow nobody knows what

589
00:36:01,680 --> 00:36:06,750
happens<font color="#CCCCCC"> okay it's not defined by</font><font color="#E5E5E5"> the</font>

590
00:36:03,720 --> 00:36:09,209
standard in era<font color="#E5E5E5"> an exception is raised</font>

591
00:36:06,750 --> 00:36:12,050
because exception are built<font color="#E5E5E5"> into the</font>

592
00:36:09,210 --> 00:36:17,760
language<font color="#E5E5E5"> and anything bad that happens</font>

593
00:36:12,050 --> 00:36:20,700
generates an exception every<font color="#E5E5E5"> exception</font>

594
00:36:17,760 --> 00:36:23,940
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be handled</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> if you are</font>

595
00:36:20,700 --> 00:36:26,549
writing software<font color="#CCCCCC"> for my missile for</font>

596
00:36:23,940 --> 00:36:28,860
example<font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> run after it</font><font color="#E5E5E5"> to hit</font>

597
00:36:26,550 --> 00:36:31,180
control<font color="#CCCCCC"> Adel</font><font color="#E5E5E5"> okay</font>

598
00:36:28,860 --> 00:36:35,080
<font color="#E5E5E5">the software has</font><font color="#CCCCCC"> to take care of</font>

599
00:36:31,180 --> 00:36:37,000
<font color="#E5E5E5">anything and that's an old proverb so</font>

600
00:36:35,080 --> 00:36:41,529
you once you've taken care of the

601
00:36:37,000 --> 00:36:48,670
unexpected<font color="#E5E5E5"> remember to take</font><font color="#CCCCCC"> care of the</font>

602
00:36:41,530 --> 00:36:51,880
unexpected unexpected<font color="#E5E5E5"> generates</font><font color="#CCCCCC"> time is</font>

603
00:36:48,670 --> 00:36:55,180
running so I'll go faster<font color="#E5E5E5"> is a way to</font>

604
00:36:51,880 --> 00:36:59,230
have<font color="#E5E5E5"> inside templates in a sense to</font>

605
00:36:55,180 --> 00:37:03,339
reuse algorithm that can<font color="#E5E5E5"> work on every</font>

606
00:36:59,230 --> 00:37:07,030
type so this is to swap<font color="#E5E5E5"> to variable with</font>

607
00:37:03,340 --> 00:37:10,210
generate from private<font color="#E5E5E5"> type and from this</font>

608
00:37:07,030 --> 00:37:17,850
model<font color="#CCCCCC"> in a sense you can instantiate a</font>

609
00:37:10,210 --> 00:37:21,420
real procedure<font color="#E5E5E5"> by providing the</font><font color="#CCCCCC"> the type</font>

610
00:37:17,850 --> 00:37:24,730
tasking<font color="#E5E5E5"> is built</font><font color="#CCCCCC"> into the language</font><font color="#E5E5E5"> so</font>

611
00:37:21,420 --> 00:37:28,700
threads there are<font color="#E5E5E5"> high-level object that</font>

612
00:37:24,730 --> 00:37:30,300
can<font color="#CCCCCC"> be passed to the program continue</font>

613
00:37:28,700 --> 00:37:33,129
[Music]

614
00:37:30,300 --> 00:37:37,210
ways of communicating high-level

615
00:37:33,130 --> 00:37:41,250
communications<font color="#CCCCCC"> to rendezvous</font><font color="#E5E5E5"> that are</font>

616
00:37:37,210 --> 00:37:44,770
between<font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> and protected objects and</font>

617
00:37:41,250 --> 00:37:47,830
so I<font color="#E5E5E5"> don't have time to give the details</font>

618
00:37:44,770 --> 00:37:50,170
<font color="#E5E5E5">but tasking is easy to use that</font>

619
00:37:47,830 --> 00:37:51,880
important<font color="#CCCCCC"> you just</font><font color="#E5E5E5"> declare your</font><font color="#CCCCCC"> task</font>

620
00:37:50,170 --> 00:37:56,740
<font color="#E5E5E5">object and you have your task it</font>

621
00:37:51,880 --> 00:38:00,010
starting finishes as appropriate and in

622
00:37:56,740 --> 00:38:03,609
general<font color="#CCCCCC"> people use P</font><font color="#E5E5E5"> thread only when</font>

623
00:38:00,010 --> 00:38:07,510
forced<font color="#CCCCCC"> to</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> Anita we have such a</font>

624
00:38:03,610 --> 00:38:10,480
convenient asking model that well if we

625
00:38:07,510 --> 00:38:14,620
<font color="#CCCCCC">can use tasking we do just not more</font>

626
00:38:10,480 --> 00:38:19,220
difficult<font color="#CCCCCC"> than anything else I'd</font><font color="#E5E5E5"> like to</font>

627
00:38:14,620 --> 00:38:22,310
show<font color="#E5E5E5"> you this because it's important</font>

628
00:38:19,220 --> 00:38:25,368
here how do we<font color="#E5E5E5"> access the low-level from</font>

629
00:38:22,310 --> 00:38:28,640
a<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> approach first imagine this</font>

630
00:38:25,369 --> 00:38:29,570
<font color="#E5E5E5">and we present some hardware register or</font>

631
00:38:28,640 --> 00:38:32,930
something like<font color="#E5E5E5"> that</font>

632
00:38:29,570 --> 00:38:36,109
<font color="#CCCCCC">okay I give a description as a record</font>

633
00:38:32,930 --> 00:38:38,118
like<font color="#CCCCCC"> it's tracked if you want and then</font>

634
00:38:36,109 --> 00:38:41,330
you can<font color="#E5E5E5"> have what is called a</font>

635
00:38:38,119 --> 00:38:41,780
representation clothes that will tell

636
00:38:41,330 --> 00:38:44,990
you

637
00:38:41,780 --> 00:38:47,780
bit<font color="#E5E5E5"> by bit where the various components</font>

638
00:38:44,990 --> 00:38:51,859
are so this syntax<font color="#E5E5E5"> means that on that</font>

639
00:38:47,780 --> 00:38:55,520
boolean is bit<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> that count is</font><font color="#CCCCCC"> bits</font>

640
00:38:51,859 --> 00:39:02,630
one<font color="#CCCCCC"> two seven</font><font color="#E5E5E5"> and status bits</font><font color="#CCCCCC"> eight to</font>

641
00:38:55,520 --> 00:39:07,300
<font color="#E5E5E5">fifteen exactly at a bit and then you</font>

642
00:39:02,630 --> 00:39:10,880
still use the high-level statements

643
00:39:07,300 --> 00:39:13,550
indexing that's an array<font color="#CCCCCC"> that's all and</font>

644
00:39:10,880 --> 00:39:17,300
at the lowest<font color="#E5E5E5"> level you</font><font color="#CCCCCC"> get exactly</font><font color="#E5E5E5"> the</font>

645
00:39:13,550 --> 00:39:19,970
the<font color="#CCCCCC"> Machine you want so some people say</font>

646
00:39:17,300 --> 00:39:26,839
<font color="#CCCCCC">well I need a low level</font><font color="#E5E5E5"> language because</font>

647
00:39:19,970 --> 00:39:30,319
I have to make little access we<font color="#CCCCCC"> said you</font>

648
00:39:26,839 --> 00:39:33,619
describe the level<font color="#CCCCCC"> therefore you can</font>

649
00:39:30,320 --> 00:39:42,410
keep a high level approach<font color="#E5E5E5"> and get what</font>

650
00:39:33,619 --> 00:39:45,290
you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> at the low level how to access</font>

651
00:39:42,410 --> 00:39:47,930
<font color="#CCCCCC">their memory time is running there our</font>

652
00:39:45,290 --> 00:39:50,390
feature to include machine code these

653
00:39:47,930 --> 00:39:52,339
are features to handle<font color="#E5E5E5"> interrupts</font>

654
00:39:50,390 --> 00:39:55,910
it's fully<font color="#CCCCCC"> past you will have example</font>

655
00:39:52,339 --> 00:39:58,759
<font color="#E5E5E5">later today you have really ways to</font>

656
00:39:55,910 --> 00:40:01,759
access<font color="#CCCCCC"> the</font><font color="#E5E5E5"> low-level</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing is</font>

657
00:39:58,760 --> 00:40:03,500
that it's not<font color="#E5E5E5"> forbidden</font><font color="#CCCCCC"> to do low-level</font>

658
00:40:01,760 --> 00:40:06,550
programming<font color="#E5E5E5"> but you have to state it</font>

659
00:40:03,500 --> 00:40:09,050
clearly<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> want to use these things</font>

660
00:40:06,550 --> 00:40:11,660
<font color="#E5E5E5">somewhere you'll say that you depend on</font>

661
00:40:09,050 --> 00:40:14,450
<font color="#E5E5E5">interrupt or that you depend on thing</font>

662
00:40:11,660 --> 00:40:18,080
<font color="#E5E5E5">that allowed to somehow time</font><font color="#CCCCCC"> checking</font>

663
00:40:14,450 --> 00:40:19,220
<font color="#CCCCCC">vendor type things first</font><font color="#E5E5E5"> I give you a</font>

664
00:40:18,080 --> 00:40:22,598
<font color="#E5E5E5">small idea</font>

665
00:40:19,220 --> 00:40:24,950
on an axis system programming real-time

666
00:40:22,599 --> 00:40:27,950
distributed system a very<font color="#CCCCCC"> interesting</font>

667
00:40:24,950 --> 00:40:31,430
model would<font color="#E5E5E5"> work it would be</font><font color="#CCCCCC"> were</font>

668
00:40:27,950 --> 00:40:32,430
several<font color="#CCCCCC"> house in itself</font><font color="#E5E5E5"> information</font>

669
00:40:31,430 --> 00:40:35,040
<font color="#E5E5E5">systems</font>

670
00:40:32,430 --> 00:40:40,620
<font color="#CCCCCC">numerix and of course</font><font color="#E5E5E5"> safety and</font>

671
00:40:35,040 --> 00:40:44,250
security<font color="#CCCCCC"> is</font><font color="#E5E5E5"> very portable between it's</font>

672
00:40:40,620 --> 00:40:47,609
<font color="#CCCCCC">really the same code</font><font color="#E5E5E5"> all these</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> to</font>

673
00:40:44,250 --> 00:40:49,980
make and throw on our ways<font color="#CCCCCC"> to patch</font>

674
00:40:47,610 --> 00:40:57,080
according<font color="#E5E5E5"> to the variation it's not</font>

675
00:40:49,980 --> 00:41:02,510
portability<font color="#CCCCCC"> ok there is a validation</font>

676
00:40:57,080 --> 00:41:08,210
<font color="#E5E5E5">suite</font><font color="#CCCCCC"> to ensure that</font><font color="#E5E5E5"> all compiler</font>

677
00:41:02,510 --> 00:41:08,210
<font color="#E5E5E5">compile exactly the same language</font>

678
00:41:10,910 --> 00:41:16,350
<font color="#E5E5E5">believe me I have a number of programs</font><font color="#CCCCCC"> I</font>

679
00:41:14,100 --> 00:41:17,970
never have different<font color="#E5E5E5"> version between</font>

680
00:41:16,350 --> 00:41:26,310
<font color="#CCCCCC">line-x Windows or</font><font color="#E5E5E5"> whatever</font>

681
00:41:17,970 --> 00:41:31,470
it's<font color="#E5E5E5"> 100% synchronous</font><font color="#CCCCCC"> sometimes we need</font>

682
00:41:26,310 --> 00:41:34,320
one package that<font color="#CCCCCC"> will include</font><font color="#E5E5E5"> if you</font>

683
00:41:31,470 --> 00:41:37,379
have dependency explicit dependencies on

684
00:41:34,320 --> 00:41:42,570
the system<font color="#E5E5E5"> but that would be confined to</font>

685
00:41:37,380 --> 00:41:45,630
<font color="#CCCCCC">one package writing is</font><font color="#E5E5E5"> also important</font>

686
00:41:42,570 --> 00:41:48,480
and we<font color="#CCCCCC"> have seen the compiler has</font><font color="#E5E5E5"> much</font>

687
00:41:45,630 --> 00:41:51,420
information we are lucky<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to</font>

688
00:41:48,480 --> 00:41:53,700
<font color="#CCCCCC">give to have compiler that give very</font>

689
00:41:51,420 --> 00:41:57,510
good<font color="#E5E5E5"> error messages and that saves a lot</font>

690
00:41:53,700 --> 00:41:59,910
of time like fixing if you<font color="#CCCCCC"> misspell</font><font color="#E5E5E5"> one</font>

691
00:41:57,510 --> 00:42:03,300
of your own variable a compiler can tell

692
00:41:59,910 --> 00:42:05,390
there is<font color="#E5E5E5"> a variable that's almost the</font>

693
00:42:03,300 --> 00:42:10,200
same maybe you wanted this one and so<font color="#CCCCCC"> on</font>

694
00:42:05,390 --> 00:42:12,299
well saved a lot of time of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> I</font>

695
00:42:10,200 --> 00:42:16,830
said<font color="#CCCCCC"> you are protected from</font><font color="#E5E5E5"> many</font>

696
00:42:12,300 --> 00:42:19,080
mistakes<font color="#E5E5E5"> strong typing in the first</font><font color="#CCCCCC"> time</font>

697
00:42:16,830 --> 00:42:22,950
<font color="#E5E5E5">you try it</font><font color="#CCCCCC"> you are angry at the compiler</font>

698
00:42:19,080 --> 00:42:25,230
<font color="#CCCCCC">while the compiler don't</font><font color="#E5E5E5"> accept that and</font>

699
00:42:22,950 --> 00:42:29,060
then you realize<font color="#CCCCCC"> I</font><font color="#E5E5E5"> made a mistake</font>

700
00:42:25,230 --> 00:42:29,060
<font color="#CCCCCC">thank</font><font color="#E5E5E5"> you gentle compiler</font>

701
00:42:30,270 --> 00:42:39,400
so you spend<font color="#CCCCCC"> your time</font><font color="#E5E5E5"> on designing</font>

702
00:42:33,730 --> 00:42:42,010
that's better you than chasing<font color="#E5E5E5"> bugs it</font>

703
00:42:39,400 --> 00:42:44,080
can interface with<font color="#E5E5E5"> other languages it</font>

704
00:42:42,010 --> 00:42:48,820
has<font color="#CCCCCC"> also a number of thing that are</font>

705
00:42:44,080 --> 00:42:52,020
<font color="#E5E5E5">unique to</font><font color="#CCCCCC"> ADA so you can expect at that</font>

706
00:42:48,820 --> 00:42:54,250
time<font color="#E5E5E5"> that I tell you you should use</font><font color="#CCCCCC"> it I</font>

707
00:42:52,020 --> 00:42:59,230
won't tell you<font color="#CCCCCC"> that you are grown-up</font>

708
00:42:54,250 --> 00:43:01,750
<font color="#E5E5E5">you're nice</font><font color="#CCCCCC"> people you are able to to</font>

709
00:42:59,230 --> 00:43:06,690
know what you have to do okay<font color="#CCCCCC"> now what I</font>

710
00:43:01,750 --> 00:43:08,830
<font color="#E5E5E5">want just</font><font color="#CCCCCC"> to tell you is please try ADA</font>

711
00:43:06,690 --> 00:43:10,980
<font color="#E5E5E5">see how it works</font>

712
00:43:08,830 --> 00:43:14,350
you<font color="#E5E5E5"> have three compilers free for</font>

713
00:43:10,980 --> 00:43:16,930
downloading<font color="#E5E5E5"> use it you have a community</font>

714
00:43:14,350 --> 00:43:20,700
<font color="#CCCCCC">that is willing to</font><font color="#E5E5E5"> help you in the first</font>

715
00:43:16,930 --> 00:43:20,700
step and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can judge for yourself</font>

716
00:43:21,610 --> 00:43:52,650
[Applause]

717
00:43:30,500 --> 00:43:54,900
yeah yes there is a subset<font color="#CCCCCC"> of ADA</font><font color="#E5E5E5"> which</font>

718
00:43:52,650 --> 00:43:57,750
is at the same time a kind of a superset

719
00:43:54,900 --> 00:44:02,300
<font color="#E5E5E5">because there are some extension in the</font>

720
00:43:57,750 --> 00:44:06,420
<font color="#CCCCCC">form</font><font color="#E5E5E5"> my won't be into detail could spark</font>

721
00:44:02,300 --> 00:44:10,020
and that's<font color="#E5E5E5"> a formally provable part of</font>

722
00:44:06,420 --> 00:44:16,710
ADA<font color="#E5E5E5"> with tools do we have something</font>

723
00:44:10,020 --> 00:44:18,920
about<font color="#E5E5E5"> spa spa</font><font color="#CCCCCC"> so you'll be interested in</font>

724
00:44:16,710 --> 00:44:18,920
<font color="#CCCCCC">that</font>

