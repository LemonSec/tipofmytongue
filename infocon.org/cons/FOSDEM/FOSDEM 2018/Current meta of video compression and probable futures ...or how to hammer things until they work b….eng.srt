1
00:00:06,090 --> 00:00:13,480
<font color="#CCCCCC">alrights hi well my name is rostislav I</font>

2
00:00:10,480 --> 00:00:15,910
go by the alias Adam euchre<font color="#CCCCCC"> I work</font><font color="#E5E5E5"> for</font>

3
00:00:13,480 --> 00:00:18,369
Mozilla<font color="#E5E5E5"> on video compression and I am an</font>

4
00:00:15,910 --> 00:00:20,980
ffmpeg developer<font color="#CCCCCC"> what are we talking</font>

5
00:00:18,369 --> 00:00:22,750
about<font color="#E5E5E5"> today is is something which is</font>

6
00:00:20,980 --> 00:00:24,880
<font color="#CCCCCC">kind of unusual</font><font color="#E5E5E5"> for me because</font><font color="#CCCCCC"> I usually</font>

7
00:00:22,750 --> 00:00:26,649
go<font color="#CCCCCC"> for technical</font><font color="#E5E5E5"> thoughts</font><font color="#CCCCCC"> I confuse</font>

8
00:00:24,880 --> 00:00:29,918
everyone<font color="#E5E5E5"> in the audience</font><font color="#CCCCCC"> they hate</font><font color="#E5E5E5"> me</font>

9
00:00:26,649 --> 00:00:32,980
<font color="#E5E5E5">and no one wants me to come back</font><font color="#CCCCCC"> what</font>

10
00:00:29,919 --> 00:00:35,829
I'll be<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> this time is is</font>

11
00:00:32,980 --> 00:00:39,129
more<font color="#E5E5E5"> of a history on what has</font><font color="#CCCCCC"> happened</font>

12
00:00:35,829 --> 00:00:40,810
with with<font color="#E5E5E5"> codecs</font><font color="#CCCCCC"> which have tried to to</font>

13
00:00:39,130 --> 00:00:44,380
push the boundaries<font color="#CCCCCC"> of what is possible</font>

14
00:00:40,810 --> 00:00:47,200
with with video compression and and how

15
00:00:44,380 --> 00:00:50,710
a video codec is is developed and how

16
00:00:47,200 --> 00:00:54,490
old<font color="#CCCCCC"> cortex might might also be of some</font>

17
00:00:50,710 --> 00:00:56,620
use<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> title of</font><font color="#CCCCCC"> this talk or the</font>

18
00:00:54,490 --> 00:00:59,290
hotel<font color="#CCCCCC"> might have</font><font color="#E5E5E5"> been a bit influenced</font>

19
00:00:56,620 --> 00:01:05,199
by a post which<font color="#E5E5E5"> was recently</font><font color="#CCCCCC"> posted by</font>

20
00:00:59,290 --> 00:01:09,070
<font color="#CCCCCC">the mighty MPEG head of the Chairman</font><font color="#E5E5E5"> a</font>

21
00:01:05,199 --> 00:01:12,220
<font color="#CCCCCC">variant</font><font color="#E5E5E5"> of MPEG and he said how the</font>

22
00:01:09,070 --> 00:01:15,639
<font color="#CCCCCC">development model of a v1 is giving</font>

23
00:01:12,220 --> 00:01:18,760
innovation and it's killing research

24
00:01:15,640 --> 00:01:21,670
done on video codecs<font color="#E5E5E5"> and I'm I'm just</font>

25
00:01:18,760 --> 00:01:25,150
<font color="#CCCCCC">here to tell well Dallas can tell if</font>

26
00:01:21,670 --> 00:01:28,030
you're wrong and and I'll start by by

27
00:01:25,150 --> 00:01:31,570
<font color="#E5E5E5">doing the exact opposite of proving</font>

28
00:01:28,030 --> 00:01:34,840
<font color="#E5E5E5">these wrong by</font><font color="#CCCCCC"> saying well how did we</font>

29
00:01:31,570 --> 00:01:37,839
get<font color="#CCCCCC"> to this point</font><font color="#E5E5E5"> and what Couric's did</font>

30
00:01:34,840 --> 00:01:41,040
not help<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> to this point so so</font>

31
00:01:37,840 --> 00:01:43,420
we're at this point<font color="#E5E5E5"> now where we have a</font>

32
00:01:41,040 --> 00:01:45,190
standard set of coding tools which are

33
00:01:43,420 --> 00:01:50,439
<font color="#E5E5E5">used</font><font color="#CCCCCC"> by pretty much all video</font>

34
00:01:45,190 --> 00:01:53,320
compression codecs<font color="#E5E5E5"> everywhere and so you</font>

35
00:01:50,439 --> 00:01:54,880
have a motion<font color="#E5E5E5"> vector search you get a</font>

36
00:01:53,320 --> 00:01:57,490
context for<font color="#E5E5E5"> the frame which is part of a</font>

37
00:01:54,880 --> 00:02:00,880
<font color="#E5E5E5">control system so it's not really needed</font>

38
00:01:57,490 --> 00:02:03,640
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> this right</font><font color="#CCCCCC"> you do an audio search</font>

39
00:02:00,880 --> 00:02:06,009
for each block this<font color="#CCCCCC"> T skeletonization</font>

40
00:02:03,640 --> 00:02:08,649
loop<font color="#E5E5E5"> filter some entropy coding and most</font>

41
00:02:06,009 --> 00:02:10,538
of these tools<font color="#E5E5E5"> were present in well all</font>

42
00:02:08,649 --> 00:02:14,469
<font color="#CCCCCC">of them are actually present in MPEG</font>

43
00:02:10,538 --> 00:02:16,239
codec<font color="#E5E5E5"> sense since the nineties so so you</font>

44
00:02:14,469 --> 00:02:19,090
can<font color="#CCCCCC"> you</font><font color="#E5E5E5"> might say well</font>

45
00:02:16,240 --> 00:02:21,400
<font color="#E5E5E5">Tech has has completely changed and</font>

46
00:02:19,090 --> 00:02:23,500
<font color="#E5E5E5">revolutionized video</font><font color="#CCCCCC"> coding</font><font color="#E5E5E5"> and yeah</font>

47
00:02:21,400 --> 00:02:25,870
that's that's partly<font color="#CCCCCC"> true they they</font>

48
00:02:23,500 --> 00:02:28,450
shown us a way that we can do things

49
00:02:25,870 --> 00:02:31,180
which is guaranteed<font color="#CCCCCC"> to pretty much</font><font color="#E5E5E5"> work</font>

50
00:02:28,450 --> 00:02:33,280
so if you<font color="#E5E5E5"> implement this you can just</font>

51
00:02:31,180 --> 00:02:36,070
<font color="#E5E5E5">barge in your codec and it will work</font>

52
00:02:33,280 --> 00:02:40,990
<font color="#CCCCCC">just as well as any other MPEG auric</font><font color="#E5E5E5"> but</font>

53
00:02:36,070 --> 00:02:42,790
but I'm here to talk<font color="#E5E5E5"> about the the the</font>

54
00:02:40,990 --> 00:02:45,850
codecs<font color="#CCCCCC"> which came from the left</font><font color="#E5E5E5"> field so</font>

55
00:02:42,790 --> 00:02:50,109
to speak<font color="#E5E5E5"> one of these codecs was</font><font color="#CCCCCC"> dirac</font>

56
00:02:45,850 --> 00:02:53,410
<font color="#CCCCCC">Jarek was a attempt at making a</font>

57
00:02:50,110 --> 00:02:55,420
next-generation codec<font color="#E5E5E5"> by the BBC they</font>

58
00:02:53,410 --> 00:02:57,280
were planning to<font color="#CCCCCC"> use this in the road</font>

59
00:02:55,420 --> 00:02:59,109
cast networks they were planning to<font color="#CCCCCC"> have</font>

60
00:02:57,280 --> 00:03:02,140
hardware support they had<font color="#E5E5E5"> vendors lined</font>

61
00:02:59,110 --> 00:03:05,740
up<font color="#E5E5E5"> they had all</font><font color="#CCCCCC"> sorts of advanced coding</font>

62
00:03:02,140 --> 00:03:08,859
techniques<font color="#E5E5E5"> but it was all let down by by</font>

63
00:03:05,740 --> 00:03:12,400
the very thing<font color="#E5E5E5"> it tried to implement</font>

64
00:03:08,860 --> 00:03:14,890
which was babe let's see wavelets<font color="#E5E5E5"> came</font>

65
00:03:12,400 --> 00:03:16,870
<font color="#E5E5E5">more or less from from around the 90s</font>

66
00:03:14,890 --> 00:03:19,450
and people were convinced they were the

67
00:03:16,870 --> 00:03:22,290
future<font color="#CCCCCC"> of video</font><font color="#E5E5E5"> encoding what they</font>

68
00:03:19,450 --> 00:03:25,299
didn't realize was<font color="#CCCCCC"> that wavelets</font><font color="#E5E5E5"> were</font>

69
00:03:22,290 --> 00:03:27,549
impractical in the way that they docked

70
00:03:25,300 --> 00:03:31,150
wavelets were not very<font color="#CCCCCC"> practical for</font>

71
00:03:27,550 --> 00:03:32,440
video encoding<font color="#E5E5E5"> instead of image</font><font color="#CCCCCC"> coding</font>

72
00:03:31,150 --> 00:03:34,330
they<font color="#CCCCCC"> weren't very well for image coding</font>

73
00:03:32,440 --> 00:03:36,760
<font color="#E5E5E5">but they didn't work well for video</font>

74
00:03:34,330 --> 00:03:40,570
coding where you have will constantly

75
00:03:36,760 --> 00:03:43,959
have<font color="#E5E5E5"> to to to to copy parts of an image</font>

76
00:03:40,570 --> 00:03:47,859
<font color="#E5E5E5">to another part of an image</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> whether</font>

77
00:03:43,960 --> 00:03:50,980
<font color="#E5E5E5">it's didn't really perfect that another</font>

78
00:03:47,860 --> 00:03:54,580
codec which try<font color="#CCCCCC"> to revolutionize</font><font color="#E5E5E5"> image</font>

79
00:03:50,980 --> 00:03:56,649
coding<font color="#E5E5E5"> this time was</font><font color="#CCCCCC"> JPEG 2000</font><font color="#E5E5E5"> it's</font>

80
00:03:54,580 --> 00:03:59,220
newer than JPEG so<font color="#E5E5E5"> you would expect this</font>

81
00:03:56,650 --> 00:04:02,500
<font color="#CCCCCC">to be far</font><font color="#E5E5E5"> better than JPEG but it isn't</font>

82
00:03:59,220 --> 00:04:05,920
it uses all<font color="#E5E5E5"> kinds of new techniques</font><font color="#CCCCCC"> you</font>

83
00:04:02,500 --> 00:04:08,680
to try to compress images better but it

84
00:04:05,920 --> 00:04:11,109
doesn't<font color="#CCCCCC"> do a much better job than</font><font color="#E5E5E5"> JPEG</font>

85
00:04:08,680 --> 00:04:13,470
<font color="#CCCCCC">and it's such a shame that</font><font color="#E5E5E5"> nowadays</font><font color="#CCCCCC"> it's</font>

86
00:04:11,110 --> 00:04:16,660
<font color="#E5E5E5">being used in the cinema industry and</font>

87
00:04:13,470 --> 00:04:20,470
<font color="#CCCCCC">Dan VLC are complaining that they cannot</font>

88
00:04:16,660 --> 00:04:22,830
decode<font color="#E5E5E5"> TCP is fast enough and another</font>

89
00:04:20,470 --> 00:04:25,610
codec which<font color="#E5E5E5"> also try to revolutionize</font>

90
00:04:22,830 --> 00:04:27,830
video encoding<font color="#CCCCCC"> mosaic you tree the</font>

91
00:04:25,610 --> 00:04:29,960
the reason why they failed was their

92
00:04:27,830 --> 00:04:32,389
business<font color="#E5E5E5"> model didn't publish anything</font>

93
00:04:29,960 --> 00:04:34,938
and people<font color="#E5E5E5"> had to reverse</font><font color="#CCCCCC"> engineer the</font>

94
00:04:32,389 --> 00:04:37,490
<font color="#CCCCCC">correct from the tools</font><font color="#E5E5E5"> and if they have</font>

95
00:04:34,939 --> 00:04:39,050
<font color="#E5E5E5">to reverse engineer it then well they're</font>

96
00:04:37,490 --> 00:04:41,030
<font color="#E5E5E5">probably not going to</font><font color="#CCCCCC"> put a writing and</font>

97
00:04:39,050 --> 00:04:43,849
<font color="#E5E5E5">in quarters</font><font color="#CCCCCC"> so that chorok itself</font><font color="#E5E5E5"> won't</font>

98
00:04:41,030 --> 00:04:45,438
develop in the open source game and it

99
00:04:43,849 --> 00:04:47,389
won't<font color="#CCCCCC"> develop in the commercial scheme</font>

100
00:04:45,439 --> 00:04:48,520
as well<font color="#E5E5E5"> because there's no support for</font>

101
00:04:47,389 --> 00:04:54,020
<font color="#E5E5E5">it really</font>

102
00:04:48,520 --> 00:04:55,969
another one was<font color="#E5E5E5"> dollar which which tried</font>

103
00:04:54,020 --> 00:05:01,330
<font color="#E5E5E5">to do things completely differently in</font>

104
00:04:55,969 --> 00:05:05,000
<font color="#E5E5E5">order to to evade software patents</font><font color="#CCCCCC"> and</font>

105
00:05:01,330 --> 00:05:09,139
at the<font color="#E5E5E5"> end it it caught up to</font><font color="#CCCCCC"> to a CBC</font>

106
00:05:05,000 --> 00:05:12,169
and was considered to to actually

107
00:05:09,139 --> 00:05:18,969
<font color="#E5E5E5">surprise it in terms of image and video</font>

108
00:05:12,169 --> 00:05:22,669
quality<font color="#CCCCCC"> unfortunately it was it was well</font>

109
00:05:18,969 --> 00:05:25,849
priority prioritized<font color="#E5E5E5"> in order to work on</font>

110
00:05:22,669 --> 00:05:28,430
<font color="#CCCCCC">everyone</font><font color="#E5E5E5"> which was kind of a success</font>

111
00:05:25,849 --> 00:05:30,909
<font color="#CCCCCC">actually because the outcome was that</font>

112
00:05:28,430 --> 00:05:38,150
two major calling tools were reported to

113
00:05:30,909 --> 00:05:39,919
<font color="#E5E5E5">to a v1 and one was rewritten so and</font>

114
00:05:38,150 --> 00:05:44,750
finally<font color="#CCCCCC"> you might think that I'm</font><font color="#E5E5E5"> biased</font>

115
00:05:39,919 --> 00:05:47,990
<font color="#E5E5E5">and that impact itself has had no</font>

116
00:05:44,750 --> 00:05:49,520
negative<font color="#E5E5E5"> core accent we're</font><font color="#CCCCCC"> always</font>

117
00:05:47,990 --> 00:05:51,319
perfect in<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> they did well</font>

118
00:05:49,520 --> 00:05:53,508
that's not always true<font color="#CCCCCC"> because with</font>

119
00:05:51,319 --> 00:05:56,389
mpeg-4 they<font color="#E5E5E5"> completely messed up it was</font>

120
00:05:53,509 --> 00:06:00,889
a an insanely complicated and massive

121
00:05:56,389 --> 00:06:02,419
codec which which required people<font color="#CCCCCC"> to</font>

122
00:06:00,889 --> 00:06:04,759
actually write a good<font color="#E5E5E5"> software</font>

123
00:06:02,419 --> 00:06:07,159
implementation<font color="#E5E5E5"> which in order to to</font>

124
00:06:04,759 --> 00:06:08,569
actually<font color="#E5E5E5"> popularize</font><font color="#CCCCCC"> it and that that is</font>

125
00:06:07,159 --> 00:06:11,029
part of the<font color="#E5E5E5"> reason why it became popular</font>

126
00:06:08,569 --> 00:06:13,879
<font color="#E5E5E5">because of encoders like expert and</font>

127
00:06:11,029 --> 00:06:18,110
defects<font color="#CCCCCC"> but it brought</font><font color="#E5E5E5"> something to the</font>

128
00:06:13,879 --> 00:06:25,129
table as<font color="#E5E5E5"> well global motion so so all</font>

129
00:06:18,110 --> 00:06:27,740
these these codecs<font color="#E5E5E5"> didn't realize they</font>

130
00:06:25,129 --> 00:06:28,849
didn't have potential<font color="#CCCCCC"> they did have the</font>

131
00:06:27,740 --> 00:06:31,969
wrong business<font color="#E5E5E5"> model or were</font>

132
00:06:28,849 --> 00:06:35,089
<font color="#E5E5E5">deprioritize and so on but what does</font><font color="#CCCCCC"> it</font>

133
00:06:31,969 --> 00:06:37,870
take to<font color="#E5E5E5"> to develop a new codec well you</font>

134
00:06:35,089 --> 00:06:37,870
need<font color="#CCCCCC"> to balance</font>

135
00:06:39,110 --> 00:06:43,669
did I miss this<font color="#CCCCCC"> light no I</font><font color="#E5E5E5"> don't you</font>

136
00:06:41,720 --> 00:06:45,949
need to<font color="#CCCCCC"> balance all of these three</font>

137
00:06:43,669 --> 00:06:47,750
things<font color="#CCCCCC"> so we need to satisfy hardware</font>

138
00:06:45,949 --> 00:06:50,110
complexity you need to satisfy software

139
00:06:47,750 --> 00:06:52,550
complexity and unity<font color="#E5E5E5"> to satisfy can play</font>

140
00:06:50,110 --> 00:06:55,729
<font color="#E5E5E5">compression as well</font><font color="#CCCCCC"> and finally</font><font color="#E5E5E5"> you also</font>

141
00:06:52,550 --> 00:06:59,389
<font color="#E5E5E5">need to satisfy well the the actual</font>

142
00:06:55,729 --> 00:07:02,508
licensing as well<font color="#CCCCCC"> as any patents</font><font color="#E5E5E5"> as well</font>

143
00:06:59,389 --> 00:07:05,060
and if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't do that then then you</font>

144
00:07:02,509 --> 00:07:13,400
suffer the<font color="#E5E5E5"> fate of the previous</font><font color="#CCCCCC"> codecs</font>

145
00:07:05,060 --> 00:07:15,469
which<font color="#CCCCCC"> I talked about</font><font color="#E5E5E5"> so well that you</font>

146
00:07:13,400 --> 00:07:17,659
are inherently incompatible so what is

147
00:07:15,469 --> 00:07:20,389
easy<font color="#E5E5E5"> in software is kind of difficult</font><font color="#CCCCCC"> in</font>

148
00:07:17,659 --> 00:07:23,360
<font color="#CCCCCC">Hardware usually and what is easy in</font>

149
00:07:20,389 --> 00:07:26,000
hardware so stuff like conditions and

150
00:07:23,360 --> 00:07:29,180
branches are our<font color="#CCCCCC"> Lola paintwork</font><font color="#E5E5E5"> for in</font>

151
00:07:26,000 --> 00:07:32,690
software because<font color="#CCCCCC"> hardware has no</font>

152
00:07:29,180 --> 00:07:34,849
predictors and<font color="#E5E5E5"> and and</font><font color="#CCCCCC"> miss branches and</font>

153
00:07:32,690 --> 00:07:36,409
things<font color="#E5E5E5"> like that which reduce</font>

154
00:07:34,849 --> 00:07:39,169
performance<font color="#E5E5E5"> quite a lot and if you</font>

155
00:07:36,409 --> 00:07:41,180
<font color="#E5E5E5">reduce</font><font color="#CCCCCC"> performance you generally</font>

156
00:07:39,169 --> 00:07:44,180
increase complexity<font color="#E5E5E5"> as well because you</font>

157
00:07:41,180 --> 00:07:48,469
have to either try<font color="#CCCCCC"> to make it simpler or</font>

158
00:07:44,180 --> 00:07:53,960
you just leave it<font color="#CCCCCC"> as is and suffer the</font>

159
00:07:48,469 --> 00:07:56,270
<font color="#CCCCCC">penalty but eventually from</font><font color="#E5E5E5"> from the</font>

160
00:07:53,960 --> 00:07:59,060
components which I listed<font color="#E5E5E5"> in my first</font>

161
00:07:56,270 --> 00:08:02,000
slide which are which are the essential

162
00:07:59,060 --> 00:08:03,590
parts of<font color="#E5E5E5"> writing game which are the</font>

163
00:08:02,000 --> 00:08:06,500
<font color="#E5E5E5">standard way you write a video</font>

164
00:08:03,590 --> 00:08:09,289
compression codec nowadays<font color="#E5E5E5"> one of them</font>

165
00:08:06,500 --> 00:08:11,029
is most of them are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> bottleneck</font>

166
00:08:09,289 --> 00:08:13,190
so you can constantly<font color="#CCCCCC"> improve it you can</font>

167
00:08:11,029 --> 00:08:14,779
reduce software<font color="#E5E5E5"> complexity you can</font>

168
00:08:13,190 --> 00:08:16,909
reduce<font color="#CCCCCC"> hardware complexity you can</font>

169
00:08:14,779 --> 00:08:19,879
increase compression but<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end one</font>

170
00:08:16,909 --> 00:08:21,860
<font color="#CCCCCC">of these jewels is</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> give up this</font>

171
00:08:19,879 --> 00:08:24,770
<font color="#CCCCCC">going to pollinate you in terms of</font>

172
00:08:21,860 --> 00:08:28,580
<font color="#E5E5E5">repressions so you have to replace</font><font color="#CCCCCC"> it</font>

173
00:08:24,770 --> 00:08:32,750
<font color="#E5E5E5">and where exactly do</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> get ideas from</font>

174
00:08:28,580 --> 00:08:34,939
from from<font color="#CCCCCC"> where to replace it from well</font>

175
00:08:32,750 --> 00:08:37,429
<font color="#E5E5E5">you pick them up from</font><font color="#CCCCCC"> old codecs so like</font>

176
00:08:34,940 --> 00:08:42,289
I said<font color="#CCCCCC"> Darla contributed some tools to</font>

177
00:08:37,429 --> 00:08:45,229
<font color="#CCCCCC">the JV one</font><font color="#E5E5E5"> mpeg-4 had a little bit of</font>

178
00:08:42,289 --> 00:08:47,040
contribution as<font color="#CCCCCC"> well B</font><font color="#E5E5E5"> frames didn't</font>

179
00:08:45,230 --> 00:08:48,389
make an appearance because

180
00:08:47,040 --> 00:08:50,130
they wouldn't<font color="#E5E5E5"> need it because you could</font>

181
00:08:48,389 --> 00:08:54,779
do more flexible things with the way

182
00:08:50,130 --> 00:08:58,290
that vp9<font color="#CCCCCC"> had it's invisible</font>

183
00:08:54,779 --> 00:09:01,920
<font color="#E5E5E5">frames</font><font color="#CCCCCC"> so there was no</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

184
00:08:58,290 --> 00:09:04,319
frame<font color="#CCCCCC"> support so at the end you need to</font>

185
00:09:01,920 --> 00:09:08,750
know where where to change things from

186
00:09:04,319 --> 00:09:14,670
<font color="#E5E5E5">you need research</font><font color="#CCCCCC"> and since none of</font><font color="#E5E5E5"> them</font>

187
00:09:08,750 --> 00:09:16,769
want<font color="#E5E5E5"> to to to to</font><font color="#CCCCCC"> have compromises on</font>

188
00:09:14,670 --> 00:09:21,029
compression<font color="#E5E5E5"> or on any other coding tools</font>

189
00:09:16,769 --> 00:09:23,459
then then really<font color="#E5E5E5"> you need to pick ideas</font>

190
00:09:21,029 --> 00:09:25,050
here from research papers or from old

191
00:09:23,459 --> 00:09:28,888
<font color="#CCCCCC">Couric's so if you want to see what's</font>

192
00:09:25,050 --> 00:09:30,719
going<font color="#E5E5E5"> to be in a v2 or a v1 plus nine</font>

193
00:09:28,889 --> 00:09:34,380
thousand or<font color="#E5E5E5"> something you need</font><font color="#CCCCCC"> to look</font>

194
00:09:30,720 --> 00:09:36,690
into what older<font color="#E5E5E5"> codecs did and what</font>

195
00:09:34,380 --> 00:09:39,089
research has<font color="#E5E5E5"> been</font><font color="#CCCCCC"> going on because while</font>

196
00:09:36,690 --> 00:09:42,180
the core exam<font color="#CCCCCC"> selves didn't make it in</font>

197
00:09:39,089 --> 00:09:46,290
terms of popularity they<font color="#CCCCCC"> they didn't</font>

198
00:09:42,180 --> 00:09:47,689
leave<font color="#E5E5E5"> research</font><font color="#CCCCCC"> behind which which might</font>

199
00:09:46,290 --> 00:09:51,980
still be developed you never know

200
00:09:47,690 --> 00:09:55,110
wavelets are still being researched<font color="#E5E5E5"> into</font>

201
00:09:51,980 --> 00:09:57,240
<font color="#E5E5E5">and they have found a bit of application</font>

202
00:09:55,110 --> 00:10:00,589
in in terms<font color="#E5E5E5"> of error resilience because</font>

203
00:09:57,240 --> 00:10:03,630
wavelets<font color="#E5E5E5"> are very resilient errors</font>

204
00:10:00,589 --> 00:10:07,980
<font color="#E5E5E5">everyone does not include wavelets but</font>

205
00:10:03,630 --> 00:10:11,329
who knows maybe every<font color="#E5E5E5"> two will so so I</font>

206
00:10:07,980 --> 00:10:15,180
<font color="#E5E5E5">finish a bit early and you might think</font>

207
00:10:11,329 --> 00:10:18,420
<font color="#CCCCCC">that it's</font><font color="#E5E5E5"> that I should just end it but</font>

208
00:10:15,180 --> 00:10:22,160
I<font color="#E5E5E5"> don't because I have a small end core</font>

209
00:10:18,420 --> 00:10:25,769
<font color="#E5E5E5">see I've been working on</font><font color="#CCCCCC"> Vulcan</font><font color="#E5E5E5"> recently</font>

210
00:10:22,160 --> 00:10:31,769
Vulcan<font color="#E5E5E5"> if you don't know is a</font><font color="#CCCCCC"> new API</font>

211
00:10:25,769 --> 00:10:34,579
for accessing<font color="#E5E5E5"> the GPU and and what it</font>

212
00:10:31,769 --> 00:10:37,649
<font color="#E5E5E5">allows you to do is completely</font>

213
00:10:34,579 --> 00:10:40,739
completely control the<font color="#E5E5E5"> GPU in order to</font>

214
00:10:37,649 --> 00:10:42,779
have perfect in<font color="#E5E5E5"> order to to know what it</font>

215
00:10:40,740 --> 00:10:45,389
will do predictably and in order to<font color="#CCCCCC"> have</font>

216
00:10:42,779 --> 00:10:49,470
consistent performance on on all vendors

217
00:10:45,389 --> 00:10:51,690
<font color="#CCCCCC">and drivers so so the reason why Vulcan</font>

218
00:10:49,470 --> 00:10:56,010
has never been<font color="#E5E5E5"> used</font>

219
00:10:51,690 --> 00:10:59,820
the reason why<font color="#E5E5E5"> well the other API is</font>

220
00:10:56,010 --> 00:11:02,460
like direct3d and OpenGL have never been

221
00:10:59,820 --> 00:11:04,890
<font color="#E5E5E5">used in</font><font color="#CCCCCC"> video encoding</font><font color="#E5E5E5"> was that they</font>

222
00:11:02,460 --> 00:11:07,620
were quite<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot limited in what</font><font color="#CCCCCC"> they</font>

223
00:11:04,890 --> 00:11:10,319
allowed you to do<font color="#E5E5E5"> and they were extended</font>

224
00:11:07,620 --> 00:11:13,080
infinite number of<font color="#E5E5E5"> times like with</font>

225
00:11:10,320 --> 00:11:16,170
<font color="#CCCCCC">OpenGL frame buffers which kind</font><font color="#E5E5E5"> of</font>

226
00:11:13,080 --> 00:11:19,770
allowed you to render<font color="#CCCCCC"> off screen but</font>

227
00:11:16,170 --> 00:11:24,479
<font color="#CCCCCC">volcán completely</font><font color="#E5E5E5"> redoes the way that</font>

228
00:11:19,770 --> 00:11:26,340
that dark<font color="#CCCCCC"> says the GPU one it allows you</font>

229
00:11:24,480 --> 00:11:30,450
<font color="#E5E5E5">to do in theory things which were</font>

230
00:11:26,340 --> 00:11:35,340
impossible to<font color="#E5E5E5"> do with with with</font>

231
00:11:30,450 --> 00:11:38,970
conventional api's so one<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> issues</font>

232
00:11:35,340 --> 00:11:42,030
with using<font color="#CCCCCC"> Vokoun or gpo to do video</font>

233
00:11:38,970 --> 00:11:45,210
encoding<font color="#E5E5E5"> is getting the data there</font><font color="#CCCCCC"> too</font>

234
00:11:42,030 --> 00:11:49,380
in the first place<font color="#E5E5E5"> so with voc so with</font>

235
00:11:45,210 --> 00:11:51,210
<font color="#CCCCCC">opengl we had to create a texture and</font>

236
00:11:49,380 --> 00:11:56,910
then<font color="#E5E5E5"> you had</font><font color="#CCCCCC"> to uploading</font><font color="#E5E5E5"> in some way</font>

237
00:11:51,210 --> 00:11:58,890
and<font color="#E5E5E5"> all of this was CPU bound so so even</font>

238
00:11:56,910 --> 00:12:01,680
though you could<font color="#CCCCCC"> have a hybrid</font><font color="#E5E5E5"> kind of</font>

239
00:11:58,890 --> 00:12:04,920
encoder<font color="#E5E5E5"> you still had to have</font><font color="#CCCCCC"> a</font>

240
00:12:01,680 --> 00:12:08,099
dedicated<font color="#CCCCCC"> tread</font><font color="#E5E5E5"> to to to upload images</font>

241
00:12:04,920 --> 00:12:12,390
<font color="#CCCCCC">to the GPU and download</font><font color="#E5E5E5"> information back</font>

242
00:12:08,100 --> 00:12:14,910
and having<font color="#E5E5E5"> another tread well it usually</font>

243
00:12:12,390 --> 00:12:17,910
scares people<font color="#E5E5E5"> who work with OpenGL</font>

244
00:12:14,910 --> 00:12:21,240
because OpenGL has a global portrait

245
00:12:17,910 --> 00:12:23,610
<font color="#CCCCCC">state which is hard</font><font color="#E5E5E5"> to work around with</font>

246
00:12:21,240 --> 00:12:26,610
thankfully<font color="#CCCCCC"> Vulcan gives you many</font><font color="#E5E5E5"> many</font>

247
00:12:23,610 --> 00:12:29,940
ways<font color="#E5E5E5"> in</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> you could upload data to</font>

248
00:12:26,610 --> 00:12:32,520
<font color="#E5E5E5">the GPU in the first place</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> one of</font>

249
00:12:29,940 --> 00:12:34,650
<font color="#E5E5E5">the ways is the traditional way of doing</font>

250
00:12:32,520 --> 00:12:38,069
<font color="#CCCCCC">it so we have a linear image which is</font>

251
00:12:34,650 --> 00:12:42,209
<font color="#E5E5E5">lying around on your</font><font color="#CCCCCC"> Holstrom what you</font>

252
00:12:38,070 --> 00:12:45,210
could do is you could you could create a

253
00:12:42,210 --> 00:12:47,730
bokken linear image you could mark the

254
00:12:45,210 --> 00:12:50,100
<font color="#E5E5E5">memory which parts that image and then</font>

255
00:12:47,730 --> 00:12:53,040
<font color="#E5E5E5">you could memory copy your image there</font>

256
00:12:50,100 --> 00:12:54,390
you<font color="#E5E5E5"> don't need any global crit States</font>

257
00:12:53,040 --> 00:12:57,360
<font color="#E5E5E5">you don't</font><font color="#CCCCCC"> need to mess around with</font>

258
00:12:54,390 --> 00:13:00,329
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> just mop it up for it it's</font>

259
00:12:57,360 --> 00:13:02,389
there it's to use the CPU<font color="#E5E5E5"> however so</font>

260
00:13:00,329 --> 00:13:05,819
<font color="#E5E5E5">so you'd still need</font><font color="#CCCCCC"> a separate</font><font color="#E5E5E5"> read</font>

261
00:13:02,389 --> 00:13:08,579
another way is is the traditional way of

262
00:13:05,819 --> 00:13:11,910
doing<font color="#E5E5E5"> it</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> using a linear image</font>

263
00:13:08,579 --> 00:13:15,209
which is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> say that the data</font><font color="#E5E5E5"> is laid</font>

264
00:13:11,910 --> 00:13:18,600
out<font color="#E5E5E5"> as it is on your</font><font color="#CCCCCC"> Holstrom and as</font><font color="#E5E5E5"> a</font>

265
00:13:15,209 --> 00:13:22,939
<font color="#CCCCCC">GPO say that because</font><font color="#E5E5E5"> of tread because of</font>

266
00:13:18,600 --> 00:13:26,549
cache coherence is you could have a

267
00:13:22,939 --> 00:13:29,399
device<font color="#E5E5E5"> local to</font><font color="#CCCCCC"> Emily tiled image</font><font color="#E5E5E5"> you</font>

268
00:13:26,549 --> 00:13:32,670
create a<font color="#CCCCCC"> host visible linear buffer you</font>

269
00:13:29,399 --> 00:13:36,139
map it you upload it and then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> use</font>

270
00:13:32,670 --> 00:13:36,139
the command<font color="#E5E5E5"> cues to actually</font>

271
00:13:38,440 --> 00:13:40,920
<font color="#CCCCCC">Oh pee</font>

272
00:13:43,340 --> 00:13:48,350
<font color="#E5E5E5">Papi's what you could do instead is what</font>

273
00:13:46,490 --> 00:13:50,600
<font color="#CCCCCC">volcán allows you to do finally using a</font>

274
00:13:48,350 --> 00:13:54,440
distinction<font color="#E5E5E5"> but still is you could</font>

275
00:13:50,600 --> 00:13:57,170
create a<font color="#E5E5E5"> whole</font><font color="#CCCCCC"> visible image like</font>

276
00:13:54,440 --> 00:13:59,450
exactly like<font color="#E5E5E5"> one but</font><font color="#CCCCCC"> instead of using</font>

277
00:13:57,170 --> 00:14:02,750
this image<font color="#E5E5E5"> to do your calculations own</font>

278
00:13:59,450 --> 00:14:07,070
<font color="#E5E5E5">you could instead you can instead copy</font>

279
00:14:02,750 --> 00:14:10,279
it via<font color="#CCCCCC"> an a synchronous skill to the to</font>

280
00:14:07,070 --> 00:14:12,770
the to the to another<font color="#E5E5E5"> image which is</font>

281
00:14:10,279 --> 00:14:16,210
optimally<font color="#E5E5E5"> tiled and the</font><font color="#CCCCCC"> best part is you</font>

282
00:14:12,770 --> 00:14:21,439
can<font color="#E5E5E5"> actually import file</font><font color="#CCCCCC"> descriptors or</font>

283
00:14:16,210 --> 00:14:24,110
or<font color="#E5E5E5"> GPO or CPU</font><font color="#CCCCCC"> holes memory and then the</font>

284
00:14:21,440 --> 00:14:26,390
driver or depending on<font color="#E5E5E5"> how well</font><font color="#CCCCCC"> its</font>

285
00:14:24,110 --> 00:14:28,490
implement it can do the copying for you

286
00:14:26,390 --> 00:14:31,040
so you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to have a separate</font>

287
00:14:28,490 --> 00:14:33,800
read in order to<font color="#E5E5E5"> copy things to the GPO</font>

288
00:14:31,040 --> 00:14:36,230
you could just send it right<font color="#CCCCCC"> away it</font>

289
00:14:33,800 --> 00:14:39,199
<font color="#E5E5E5">will come it will create a temporary</font>

290
00:14:36,230 --> 00:14:41,390
image but in theory this will be much

291
00:14:39,200 --> 00:14:44,120
much faster<font color="#E5E5E5"> than anything has lot so</font>

292
00:14:41,390 --> 00:14:46,550
granted this this<font color="#CCCCCC"> Vokoun allows us to</font>

293
00:14:44,120 --> 00:14:48,170
solve one issue<font color="#E5E5E5"> another issue that comes</font>

294
00:14:46,550 --> 00:14:51,260
with<font color="#E5E5E5"> using the</font><font color="#CCCCCC"> GPO</font><font color="#E5E5E5"> to image through</font>

295
00:14:48,170 --> 00:14:54,319
encoding is that it's it's<font color="#E5E5E5"> not very</font>

296
00:14:51,260 --> 00:14:55,760
practical<font color="#E5E5E5"> in terms of what it offers so</font>

297
00:14:54,320 --> 00:14:58,640
video encoding is usually very

298
00:14:55,760 --> 00:15:00,080
sequential you have have a bunch of

299
00:14:58,640 --> 00:15:01,850
coefficients you need to quantize<font color="#E5E5E5"> them</font>

300
00:15:00,080 --> 00:15:04,000
you need<font color="#CCCCCC"> to encode them and you have a</font>

301
00:15:01,850 --> 00:15:06,320
very<font color="#E5E5E5"> large amount of prediction so each</font>

302
00:15:04,000 --> 00:15:08,300
<font color="#E5E5E5">coefficient depends on the</font><font color="#CCCCCC"> previous one</font>

303
00:15:06,320 --> 00:15:10,610
<font color="#CCCCCC">and each bit inside</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bitstream</font>

304
00:15:08,300 --> 00:15:15,050
depends on the<font color="#E5E5E5"> previous ones</font><font color="#CCCCCC"> so so</font>

305
00:15:10,610 --> 00:15:17,420
things<font color="#E5E5E5"> like so things like doing entropy</font>

306
00:15:15,050 --> 00:15:21,140
coding on the GPU is simply<font color="#E5E5E5"> impractical</font>

307
00:15:17,420 --> 00:15:23,990
and<font color="#CCCCCC"> infeasible with with with any</font><font color="#E5E5E5"> API or</font>

308
00:15:21,140 --> 00:15:28,220
with any<font color="#CCCCCC"> GPU but</font><font color="#E5E5E5"> what you could do</font>

309
00:15:23,990 --> 00:15:31,760
<font color="#E5E5E5">instead is you could have a a</font><font color="#CCCCCC"> an</font>

310
00:15:28,220 --> 00:15:35,209
algorithm which which does things like

311
00:15:31,760 --> 00:15:38,900
<font color="#E5E5E5">searching for block sizes and tracks are</font>

312
00:15:35,209 --> 00:15:42,260
visual weights on each<font color="#E5E5E5"> on each bit of</font>

313
00:15:38,900 --> 00:15:45,199
<font color="#E5E5E5">the</font><font color="#CCCCCC"> image</font><font color="#E5E5E5"> so so you have</font><font color="#CCCCCC"> to export</font><font color="#E5E5E5"> that</font>

314
00:15:42,260 --> 00:15:48,170
to to<font color="#E5E5E5"> the GPO and since you do the</font>

315
00:15:45,200 --> 00:15:49,970
uploads for free<font color="#CCCCCC"> uoq if you have a</font><font color="#E5E5E5"> look</font>

316
00:15:48,170 --> 00:15:52,099
<font color="#E5E5E5">ahead which is sufficiently large</font><font color="#CCCCCC"> so a</font>

317
00:15:49,970 --> 00:15:53,900
few frames<font color="#E5E5E5"> then there's no problem of</font>

318
00:15:52,100 --> 00:15:55,470
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> just exporting this this whole</font>

319
00:15:53,900 --> 00:15:58,790
process<font color="#E5E5E5"> to the</font>

320
00:15:55,470 --> 00:16:02,640
so you could have<font color="#CCCCCC"> CP Oh which which will</font>

321
00:15:58,790 --> 00:16:04,469
instead do things like search more<font color="#CCCCCC"> block</font>

322
00:16:02,640 --> 00:16:09,949
sizes<font color="#CCCCCC"> and motion vectors and</font>

323
00:16:04,470 --> 00:16:12,630
quantization indices for each<font color="#E5E5E5"> block</font><font color="#CCCCCC"> so</font>

324
00:16:09,950 --> 00:16:15,810
what you could also do is you could

325
00:16:12,630 --> 00:16:18,029
search for<font color="#CCCCCC"> motion vectors this will</font><font color="#E5E5E5"> also</font>

326
00:16:15,810 --> 00:16:20,599
save you<font color="#CCCCCC"> a large amount of time</font><font color="#E5E5E5"> if you</font>

327
00:16:18,029 --> 00:16:23,959
were to do this on the GPU as well

328
00:16:20,600 --> 00:16:28,260
<font color="#CCCCCC">there's quite a lot of</font><font color="#E5E5E5"> research that</font>

329
00:16:23,959 --> 00:16:30,260
went<font color="#E5E5E5"> into using the GPU for motion</font>

330
00:16:28,260 --> 00:16:33,029
vector search<font color="#E5E5E5"> there's quite a lot of</font>

331
00:16:30,260 --> 00:16:35,730
<font color="#E5E5E5">algorithms</font><font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of research</font>

332
00:16:33,029 --> 00:16:37,649
<font color="#CCCCCC">papers but unfortunately there's very</font>

333
00:16:35,730 --> 00:16:41,209
little actual code and most of the

334
00:16:37,649 --> 00:16:44,010
<font color="#E5E5E5">research involves</font><font color="#CCCCCC"> Kirra which is well</font>

335
00:16:41,209 --> 00:16:46,290
the standard<font color="#E5E5E5"> way you use the GPU for</font>

336
00:16:44,010 --> 00:16:48,630
anything right<font color="#E5E5E5"> now and it's vendor</font>

337
00:16:46,290 --> 00:16:50,610
locked and it's<font color="#E5E5E5"> horrible and you need</font>

338
00:16:48,630 --> 00:16:53,610
<font color="#E5E5E5">proprietary drivers to actually use it</font>

339
00:16:50,610 --> 00:16:55,560
<font color="#CCCCCC">so so it's a no-go for most people but</font>

340
00:16:53,610 --> 00:16:59,010
thankfully<font color="#CCCCCC"> Vokoun allows you to to have</font>

341
00:16:55,560 --> 00:17:02,779
<font color="#CCCCCC">a generic part for</font><font color="#E5E5E5"> all GPUs and throw</font>

342
00:16:59,010 --> 00:17:05,760
<font color="#CCCCCC">Rio operating systems not this one not</font>

343
00:17:02,779 --> 00:17:09,329
<font color="#E5E5E5">on the Mac because it's not available on</font>

344
00:17:05,760 --> 00:17:12,089
Mac it's only available<font color="#CCCCCC"> one on Linux and</font>

345
00:17:09,329 --> 00:17:13,859
and anything which<font color="#E5E5E5"> will implement it</font>

346
00:17:12,089 --> 00:17:16,619
<font color="#CCCCCC">mark doesn't</font><font color="#E5E5E5"> because they want to have</font>

347
00:17:13,859 --> 00:17:18,389
<font color="#E5E5E5">their own metal thing which is which if</font>

348
00:17:16,619 --> 00:17:20,698
you have looked<font color="#E5E5E5"> at it it's exactly like</font>

349
00:17:18,390 --> 00:17:23,429
<font color="#CCCCCC">Vokoun in absolutely every way they even</font>

350
00:17:20,699 --> 00:17:25,890
call things the same<font color="#CCCCCC"> way</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> Vulcan</font><font color="#E5E5E5"> - so</font>

351
00:17:23,429 --> 00:17:27,839
you could potentially<font color="#CCCCCC"> just just string</font>

352
00:17:25,890 --> 00:17:30,179
substitution and end up with<font color="#E5E5E5"> something</font>

353
00:17:27,839 --> 00:17:32,460
working in metal but<font color="#E5E5E5"> that allows you to</font>

354
00:17:30,179 --> 00:17:34,140
but that would<font color="#CCCCCC"> mean actually having to</font>

355
00:17:32,460 --> 00:17:37,230
template<font color="#E5E5E5"> every single bit of course you</font>

356
00:17:34,140 --> 00:17:38,850
you make so it's<font color="#E5E5E5"> unclear why they</font>

357
00:17:37,230 --> 00:17:40,320
haven't allowed it but thankfully there

358
00:17:38,850 --> 00:17:44,459
<font color="#CCCCCC">is an open-source</font><font color="#E5E5E5"> alternative which</font>

359
00:17:40,320 --> 00:17:47,790
allows you to<font color="#CCCCCC"> to Interop</font><font color="#E5E5E5"> meadow meadow</font>

360
00:17:44,460 --> 00:17:49,740
with a broken<font color="#E5E5E5"> API so this solves the</font>

361
00:17:47,790 --> 00:17:51,960
second issue you could still<font color="#CCCCCC"> use the gpo</font>

362
00:17:49,740 --> 00:17:53,940
for something for video encoding<font color="#E5E5E5"> now</font>

363
00:17:51,960 --> 00:17:56,880
there's a third issue when using<font color="#E5E5E5"> the GPS</font>

364
00:17:53,940 --> 00:17:58,860
to encode and it's and it has to do<font color="#CCCCCC"> with</font>

365
00:17:56,880 --> 00:18:00,480
<font color="#E5E5E5">memory management you see allocating</font>

366
00:17:58,860 --> 00:18:02,520
memory on the GPU is kind of expensive

367
00:18:00,480 --> 00:18:03,960
<font color="#CCCCCC">because you</font><font color="#E5E5E5"> have to go to the driver and</font>

368
00:18:02,520 --> 00:18:07,700
then and then the driver has<font color="#CCCCCC"> to do all</font>

369
00:18:03,960 --> 00:18:10,549
the management<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to find memory has</font><font color="#E5E5E5"> to</font>

370
00:18:07,700 --> 00:18:14,360
has to set it to<font color="#CCCCCC"> be your son let's not</font>

371
00:18:10,549 --> 00:18:18,799
forget<font color="#E5E5E5"> that</font><font color="#CCCCCC"> GPUs are quite a lot like</font>

372
00:18:14,360 --> 00:18:21,830
like just<font color="#CCCCCC"> scipios</font><font color="#E5E5E5"> with quite a lot of</font>

373
00:18:18,799 --> 00:18:23,899
treads<font color="#E5E5E5"> so it still has</font><font color="#CCCCCC"> a memory</font>

374
00:18:21,830 --> 00:18:25,639
<font color="#E5E5E5">management unit which</font><font color="#CCCCCC"> marks physical</font>

375
00:18:23,899 --> 00:18:31,250
addresses<font color="#E5E5E5"> to virtual addresses</font><font color="#CCCCCC"> and back</font>

376
00:18:25,639 --> 00:18:33,289
and<font color="#E5E5E5"> forth so one of the things you could</font>

377
00:18:31,250 --> 00:18:36,679
do with<font color="#E5E5E5"> Vulcan is it allows you to</font>

378
00:18:33,289 --> 00:18:39,289
lazily allocate memory on the GPU<font color="#E5E5E5"> which</font>

379
00:18:36,679 --> 00:18:41,539
which<font color="#CCCCCC"> is to say</font><font color="#E5E5E5"> that you don't have to</font>

380
00:18:39,289 --> 00:18:43,850
keep you don't have to allocate all of

381
00:18:41,539 --> 00:18:47,990
<font color="#E5E5E5">your memory at startup instead you could</font>

382
00:18:43,850 --> 00:18:50,689
let the<font color="#CCCCCC"> gpo handle things like temporary</font>

383
00:18:47,990 --> 00:18:53,720
<font color="#CCCCCC">buffer</font><font color="#E5E5E5"> so temporary images for for in</font>

384
00:18:50,690 --> 00:18:56,840
<font color="#E5E5E5">between pipeline image transfer or</font>

385
00:18:53,720 --> 00:18:59,120
information transfer<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> where you don't</font>

386
00:18:56,840 --> 00:19:02,559
waste memory<font color="#E5E5E5"> unless it's actually needed</font>

387
00:18:59,120 --> 00:19:05,059
so these images allow you to also

388
00:19:02,559 --> 00:19:07,519
completely eliminate the need<font color="#CCCCCC"> to do any</font>

389
00:19:05,059 --> 00:19:10,549
kind of image copying or buffer copying

390
00:19:07,519 --> 00:19:13,279
as well because the GPU or<font color="#CCCCCC"> the driver</font>

391
00:19:10,549 --> 00:19:16,850
itself is usually smart enough to to

392
00:19:13,279 --> 00:19:19,070
know when it's<font color="#E5E5E5"> safe</font><font color="#CCCCCC"> to when it's</font><font color="#E5E5E5"> safe to</font>

393
00:19:16,850 --> 00:19:20,449
to just reuse<font color="#CCCCCC"> that bit of memory</font><font color="#E5E5E5"> without</font>

394
00:19:19,070 --> 00:19:22,460
actually having<font color="#E5E5E5"> to copy it so</font>

395
00:19:20,450 --> 00:19:26,480
potentially lazy allocated memory<font color="#E5E5E5"> could</font>

396
00:19:22,460 --> 00:19:29,389
could save your memory and time<font color="#E5E5E5"> actually</font>

397
00:19:26,480 --> 00:19:30,830
<font color="#CCCCCC">doing a GPUs GPO</font><font color="#E5E5E5"> mem copy if the</font>

398
00:19:29,389 --> 00:19:34,370
compiler<font color="#E5E5E5"> is smart enough and if you</font>

399
00:19:30,830 --> 00:19:38,320
manage<font color="#E5E5E5"> your buffers well enough</font><font color="#CCCCCC"> another</font>

400
00:19:34,370 --> 00:19:41,658
issue<font color="#E5E5E5"> is that if you if you don't reuse</font>

401
00:19:38,320 --> 00:19:46,480
<font color="#E5E5E5">images so for instance if your decoder</font>

402
00:19:41,659 --> 00:19:46,480
run encoder<font color="#CCCCCC"> can support any</font><font color="#E5E5E5"> number of</font>

403
00:19:46,630 --> 00:19:52,820
pixel format changes or<font color="#CCCCCC"> with changes or</font>

404
00:19:49,700 --> 00:19:54,799
high changes then<font color="#E5E5E5"> you may</font><font color="#CCCCCC"> end up in a</font>

405
00:19:52,820 --> 00:19:57,289
<font color="#CCCCCC">situation where you constantly</font><font color="#E5E5E5"> destroy</font>

406
00:19:54,799 --> 00:19:59,960
your your buffer pool and then you

407
00:19:57,289 --> 00:20:05,360
reallocate<font color="#E5E5E5"> it</font><font color="#CCCCCC"> with with this new pixel</font>

408
00:19:59,960 --> 00:20:07,309
format<font color="#CCCCCC"> but thankfully using</font><font color="#E5E5E5"> Vokoun and</font>

409
00:20:05,360 --> 00:20:09,949
<font color="#CCCCCC">its new</font>

410
00:20:07,309 --> 00:20:13,370
<font color="#CCCCCC">we</font><font color="#E5E5E5"> play an extension you could allocate</font>

411
00:20:09,950 --> 00:20:15,340
many multi-plane images at once<font color="#E5E5E5"> and the</font>

412
00:20:13,370 --> 00:20:19,039
driver should internally pull with

413
00:20:15,340 --> 00:20:22,519
resources and and<font color="#E5E5E5"> decide which one needs</font>

414
00:20:19,039 --> 00:20:26,090
<font color="#E5E5E5">allegation by by by checking which one</font>

415
00:20:22,519 --> 00:20:28,879
<font color="#CCCCCC">of the previous images it can</font><font color="#E5E5E5"> reuse</font><font color="#CCCCCC"> and</font>

416
00:20:26,090 --> 00:20:30,860
finally the final<font color="#E5E5E5"> issue with using the</font>

417
00:20:28,879 --> 00:20:32,480
<font color="#E5E5E5">GPU to do encoding is that you need to</font>

418
00:20:30,860 --> 00:20:34,998
<font color="#CCCCCC">get</font><font color="#E5E5E5"> the data back in somehow</font><font color="#CCCCCC"> and</font>

419
00:20:32,480 --> 00:20:38,059
thankfully<font color="#E5E5E5"> broken like everything it</font>

420
00:20:34,999 --> 00:20:40,279
does<font color="#E5E5E5"> allows you to do many ways to to</font>

421
00:20:38,059 --> 00:20:42,350
<font color="#CCCCCC">actually get any</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> back so you</font>

422
00:20:40,279 --> 00:20:43,909
<font color="#E5E5E5">could put it in a host visible buffer</font>

423
00:20:42,350 --> 00:20:46,639
<font color="#E5E5E5">map it</font>

424
00:20:43,909 --> 00:20:48,830
you could even export memory via a file

425
00:20:46,639 --> 00:20:51,229
descriptor and then seek into it and

426
00:20:48,830 --> 00:20:54,199
read it<font color="#E5E5E5"> like a standard file descriptor</font>

427
00:20:51,230 --> 00:20:58,159
and<font color="#CCCCCC"> the driver will do the copying or</font>

428
00:20:54,200 --> 00:21:03,139
any management<font color="#CCCCCC"> for you if if if it has</font>

429
00:20:58,159 --> 00:21:07,519
to work<font color="#E5E5E5"> interesting in place so this is</font>

430
00:21:03,139 --> 00:21:09,258
my<font color="#CCCCCC"> working</font><font color="#E5E5E5"> work in progress</font><font color="#CCCCCC"> tree right</font>

431
00:21:07,519 --> 00:21:11,869
now it<font color="#E5E5E5"> doesn't use the CPU less</font>

432
00:21:09,259 --> 00:21:14,509
uploading but<font color="#E5E5E5"> it's all work in progress</font>

433
00:21:11,869 --> 00:21:17,449
<font color="#CCCCCC">it does do arbitrary filtering and</font><font color="#E5E5E5"> it</font>

434
00:21:14,509 --> 00:21:19,279
does you<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's it is</font><font color="#E5E5E5"> able to import</font>

435
00:21:17,450 --> 00:21:22,690
<font color="#CCCCCC">um frames it cannot</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> anything</font><font color="#E5E5E5"> useful</font>

436
00:21:19,279 --> 00:21:26,210
with them because<font color="#E5E5E5"> of an underside with</font>

437
00:21:22,690 --> 00:21:27,919
with with the spec but it's all there

438
00:21:26,210 --> 00:21:31,309
you<font color="#E5E5E5"> can test it and</font><font color="#CCCCCC"> hopefully it will</font>

439
00:21:27,919 --> 00:21:32,929
get<font color="#CCCCCC"> merchan in the</font><font color="#E5E5E5"> FF entry soon so you</font>

440
00:21:31,309 --> 00:21:35,720
<font color="#CCCCCC">could give</font><font color="#E5E5E5"> it a test</font><font color="#CCCCCC"> so you could draw</font>

441
00:21:32,929 --> 00:21:55,360
an arbitrary shaders and<font color="#E5E5E5"> so on</font><font color="#CCCCCC"> so any</font>

442
00:21:35,720 --> 00:21:55,360
questions sorry<font color="#CCCCCC"> the</font><font color="#E5E5E5"> AK in the back</font>

443
00:21:58,640 --> 00:22:04,820
oh did<font color="#E5E5E5"> I have to hack anything</font><font color="#CCCCCC"> no</font>

444
00:22:02,210 --> 00:22:06,559
actually there's a there's an external

445
00:22:04,820 --> 00:22:09,830
handle you<font color="#CCCCCC"> can use the import memory in</font>

446
00:22:06,559 --> 00:22:11,540
<font color="#E5E5E5">Vulcan and this happens with a new</font>

447
00:22:09,830 --> 00:22:12,199
<font color="#CCCCCC">extension which is just post it and it</font>

448
00:22:11,540 --> 00:22:16,490
does work

449
00:22:12,200 --> 00:22:19,070
however<font color="#CCCCCC"> damage you get is is is styled</font>

450
00:22:16,490 --> 00:22:20,990
<font color="#E5E5E5">so if you try to read it like a tiled</font>

451
00:22:19,070 --> 00:22:23,600
image and copy<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> aural image</font><font color="#E5E5E5"> it</font>

452
00:22:20,990 --> 00:22:26,330
will<font color="#E5E5E5"> end up scrambled because because</font>

453
00:22:23,600 --> 00:22:29,840
the driver doesn't<font color="#CCCCCC"> yet support</font>

454
00:22:26,330 --> 00:22:32,570
detailing<font color="#E5E5E5"> using DRM images as a source</font>

455
00:22:29,840 --> 00:22:34,730
but I've contacted<font color="#E5E5E5"> message developers</font>

456
00:22:32,570 --> 00:22:36,200
and they're planning<font color="#CCCCCC"> to put a new</font>

457
00:22:34,730 --> 00:22:39,049
extension up which will allow you<font color="#E5E5E5"> to do</font>

458
00:22:36,200 --> 00:22:40,580
that<font color="#E5E5E5"> there's also another extension on</font>

459
00:22:39,049 --> 00:22:43,879
the development which will allow you to

460
00:22:40,580 --> 00:22:48,260
to<font color="#CCCCCC"> also use the same part for</font><font color="#E5E5E5"> DRM</font>

461
00:22:43,880 --> 00:22:54,250
importing to do<font color="#E5E5E5"> importing of</font><font color="#CCCCCC"> OpenCL</font>

462
00:22:48,260 --> 00:22:57,400
<font color="#CCCCCC">personal and VA api</font><font color="#E5E5E5"> images so you could</font>

463
00:22:54,250 --> 00:23:01,370
you could<font color="#E5E5E5"> potentially do processing</font>

464
00:22:57,400 --> 00:23:06,830
<font color="#E5E5E5">right on</font><font color="#CCCCCC"> the AAPI decoded images</font><font color="#E5E5E5"> without</font>

465
00:23:01,370 --> 00:23:13,250
any overhead<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> CPU Gritti another</font>

466
00:23:06,830 --> 00:23:15,168
question<font color="#E5E5E5"> I think somewhere there no no</font>

467
00:23:13,250 --> 00:23:18,890
make sense because<font color="#E5E5E5"> I went quite a lot of</font>

468
00:23:15,169 --> 00:23:21,950
<font color="#E5E5E5">off topic because I found out that the</font>

469
00:23:18,890 --> 00:23:25,490
later stage that my original<font color="#CCCCCC"> topic was a</font>

470
00:23:21,950 --> 00:23:27,080
bit too small<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually fit in 25</font>

471
00:23:25,490 --> 00:23:32,600
minutes<font color="#CCCCCC"> but</font><font color="#E5E5E5"> thankfully this is better</font>

472
00:23:27,080 --> 00:23:34,689
much better<font color="#E5E5E5"> yeah it is is that good</font>

473
00:23:32,600 --> 00:23:41,750
<font color="#E5E5E5">laughs transfer question</font>

474
00:23:34,690 --> 00:23:44,630
<font color="#CCCCCC">yeah since ffmpeg</font><font color="#E5E5E5"> involves much more</font>

475
00:23:41,750 --> 00:23:46,970
than<font color="#CCCCCC"> peg do you think of renaming the</font>

476
00:23:44,630 --> 00:23:50,390
project at some point

477
00:23:46,970 --> 00:23:52,580
no<font color="#E5E5E5"> thankfully because look it's now</font>

478
00:23:50,390 --> 00:23:54,590
going to<font color="#E5E5E5"> be cool once impact goes down</font>

479
00:23:52,580 --> 00:24:11,020
<font color="#E5E5E5">so it's going to be cool in a retro sort</font>

480
00:23:54,590 --> 00:24:11,020
of way sorry memory off last question

481
00:24:20,800 --> 00:24:25,669
<font color="#CCCCCC">you mentioned</font><font color="#E5E5E5"> CUDA</font><font color="#CCCCCC"> but proposed using</font>

482
00:24:23,990 --> 00:24:28,220
<font color="#E5E5E5">VOC and instead yep</font>

483
00:24:25,670 --> 00:24:31,100
but as I understand it<font color="#E5E5E5"> OpenCL is the</font>

484
00:24:28,220 --> 00:24:33,050
open equivalent to CUDA<font color="#E5E5E5"> isn't it so why</font>

485
00:24:31,100 --> 00:24:37,730
are<font color="#CCCCCC"> using</font><font color="#E5E5E5"> bulk and instead of open CL</font>

486
00:24:33,050 --> 00:24:39,290
well because<font color="#CCCCCC"> volcán is newer</font><font color="#E5E5E5"> no actually</font>

487
00:24:37,730 --> 00:24:41,360
because<font color="#CCCCCC"> what can allows you to you old</font>

488
00:24:39,290 --> 00:24:43,730
things which you<font color="#E5E5E5"> aren't allowed to do</font>

489
00:24:41,360 --> 00:24:46,990
with with<font color="#CCCCCC"> open CL granted open</font><font color="#E5E5E5"> CL is</font>

490
00:24:43,730 --> 00:24:51,010
more comfortable to<font color="#E5E5E5"> work with then then</font>

491
00:24:46,990 --> 00:24:53,690
<font color="#CCCCCC">volcans Purvi format which which means</font>

492
00:24:51,010 --> 00:24:57,260
you need a separate compiler in order to

493
00:24:53,690 --> 00:24:59,870
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> compile</font><font color="#CCCCCC"> Vokoun kernels into</font>

494
00:24:57,260 --> 00:25:05,210
<font color="#CCCCCC">Purvi and then upload that</font><font color="#E5E5E5"> somehow to</font>

495
00:24:59,870 --> 00:25:07,570
the using the<font color="#E5E5E5"> api to the GPO</font><font color="#CCCCCC"> but broken</font>

496
00:25:05,210 --> 00:25:12,860
<font color="#E5E5E5">does allow you to</font><font color="#CCCCCC"> do more things with</font>

497
00:25:07,570 --> 00:25:16,810
<font color="#CCCCCC">GPO dent and then opens here now it's</font>

498
00:25:12,860 --> 00:25:19,280
newer which is better

499
00:25:16,810 --> 00:25:21,639
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> how to Luger alright</font>

500
00:25:19,280 --> 00:25:21,639
thanks

