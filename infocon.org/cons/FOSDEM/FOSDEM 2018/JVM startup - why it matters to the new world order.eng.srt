1
00:00:05,150 --> 00:00:10,059
<font color="#E5E5E5">all right so I was told</font>

2
00:00:07,420 --> 00:00:12,730
start anytime<font color="#E5E5E5"> I'm ready and this being a</font>

3
00:00:10,059 --> 00:00:15,430
talk on startup let's<font color="#E5E5E5"> get going so JB</font>

4
00:00:12,730 --> 00:00:18,340
I'm<font color="#CCCCCC"> stirred up</font><font color="#E5E5E5"> why it matters to the New</font>

5
00:00:15,430 --> 00:00:20,349
World<font color="#E5E5E5"> Order again I work for a company</font>

6
00:00:18,340 --> 00:00:23,830
with lawyers<font color="#E5E5E5"> and so don't</font><font color="#CCCCCC"> trust the</font>

7
00:00:20,349 --> 00:00:25,690
things that I say Who<font color="#E5E5E5"> am I I'm Dan</font>

8
00:00:23,830 --> 00:00:28,000
hiding<font color="#CCCCCC"> good I work</font><font color="#E5E5E5"> for IBM</font><font color="#CCCCCC"> I worked for</font>

9
00:00:25,690 --> 00:00:30,279
IBM<font color="#CCCCCC"> for about ten years</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> all that</font>

10
00:00:28,000 --> 00:00:31,930
<font color="#E5E5E5">time doing virtual machine development</font>

11
00:00:30,279 --> 00:00:35,080
<font color="#CCCCCC">I've been involved in a</font><font color="#E5E5E5"> bunch of</font>

12
00:00:31,930 --> 00:00:37,030
different<font color="#E5E5E5"> Jay SRS and the big thing for</font>

13
00:00:35,080 --> 00:00:38,440
me<font color="#CCCCCC"> right now is</font><font color="#E5E5E5"> that I'm pleased to say</font>

14
00:00:37,030 --> 00:00:42,940
I'm<font color="#E5E5E5"> one of the project leads for</font><font color="#CCCCCC"> Eclipse</font>

15
00:00:38,440 --> 00:00:45,909
<font color="#E5E5E5">open j9 so open j9 was created September</font>

16
00:00:42,940 --> 00:00:47,190
of 2017<font color="#E5E5E5"> but of course the code goes back</font>

17
00:00:45,909 --> 00:00:50,350
much further<font color="#CCCCCC"> than</font><font color="#E5E5E5"> that</font>

18
00:00:47,190 --> 00:00:52,000
<font color="#E5E5E5">being IBM's production JVM</font><font color="#CCCCCC"> so if you're</font>

19
00:00:50,350 --> 00:00:54,010
interested<font color="#CCCCCC"> you know while we're talking</font>

20
00:00:52,000 --> 00:00:56,769
<font color="#E5E5E5">I know the Wi-Fi is</font><font color="#CCCCCC"> not great here</font><font color="#E5E5E5"> but</font>

21
00:00:54,010 --> 00:01:00,040
<font color="#CCCCCC">check out</font><font color="#E5E5E5"> the website</font><font color="#CCCCCC"> check out the the</font>

22
00:00:56,769 --> 00:01:01,600
<font color="#CCCCCC">github</font><font color="#E5E5E5"> and take a look at the code</font><font color="#CCCCCC"> one</font>

23
00:01:00,040 --> 00:01:03,940
of the nice things<font color="#CCCCCC"> about this particular</font>

24
00:01:01,600 --> 00:01:07,000
set of<font color="#E5E5E5"> code is the license for it it's</font>

25
00:01:03,940 --> 00:01:09,158
<font color="#E5E5E5">EPL v2 with the secondary</font><font color="#CCCCCC"> licences</font>

26
00:01:07,000 --> 00:01:14,549
clause<font color="#E5E5E5"> which means that it's compatible</font>

27
00:01:09,159 --> 00:01:16,719
with open JDK<font color="#CCCCCC"> and that Apache</font><font color="#E5E5E5"> 2 as well</font>

28
00:01:14,549 --> 00:01:18,640
<font color="#CCCCCC">being an eclipse project we're</font><font color="#E5E5E5"> really</font>

29
00:01:16,719 --> 00:01:23,589
<font color="#CCCCCC">open and</font><font color="#E5E5E5"> interested in anybody who wants</font>

30
00:01:18,640 --> 00:01:24,969
<font color="#E5E5E5">to join in and contribute so now I'm</font>

31
00:01:23,590 --> 00:01:27,609
<font color="#CCCCCC">going to jump into</font><font color="#E5E5E5"> talking a little bit</font>

32
00:01:24,969 --> 00:01:28,780
<font color="#E5E5E5">about the old world order</font><font color="#CCCCCC"> and then we'll</font>

33
00:01:27,609 --> 00:01:30,579
talk<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about the new world</font>

34
00:01:28,780 --> 00:01:32,920
order<font color="#CCCCCC"> and</font><font color="#E5E5E5"> some of the changes that we've</font>

35
00:01:30,579 --> 00:01:35,109
seen<font color="#E5E5E5"> and how that relates the JVM</font>

36
00:01:32,920 --> 00:01:38,109
<font color="#CCCCCC">startup so in the old world</font>

37
00:01:35,109 --> 00:01:40,179
<font color="#E5E5E5">you typically wrote your code</font><font color="#CCCCCC"> tested</font><font color="#E5E5E5"> it</font>

38
00:01:38,109 --> 00:01:44,490
<font color="#E5E5E5">checked it into your version control and</font>

39
00:01:40,179 --> 00:01:46,929
then it sat there<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a while</font><font color="#CCCCCC"> eventually</font>

40
00:01:44,490 --> 00:01:49,298
<font color="#CCCCCC">you deploy it maybe</font><font color="#E5E5E5"> to a nice server</font>

41
00:01:46,929 --> 00:01:52,840
farm that looked like this maybe it

42
00:01:49,299 --> 00:01:54,340
looked more like that but<font color="#E5E5E5"> those</font>

43
00:01:52,840 --> 00:01:57,880
deployments<font color="#E5E5E5"> they didn't happen</font><font color="#CCCCCC"> very</font>

44
00:01:54,340 --> 00:01:59,619
<font color="#E5E5E5">often</font><font color="#CCCCCC"> deployments used to be kind of a</font>

45
00:01:57,880 --> 00:02:01,990
<font color="#E5E5E5">scary thing</font><font color="#CCCCCC"> for a</font><font color="#E5E5E5"> lot of people and so</font>

46
00:01:59,619 --> 00:02:04,569
they were commonly only done<font color="#E5E5E5"> maybe every</font>

47
00:02:01,990 --> 00:02:07,359
six months maybe<font color="#E5E5E5"> a couple of times a</font>

48
00:02:04,569 --> 00:02:09,520
year<font color="#E5E5E5"> and they were scary because they</font>

49
00:02:07,359 --> 00:02:12,819
were done infrequently<font color="#CCCCCC"> so there was a</font>

50
00:02:09,520 --> 00:02:15,180
lot of code changes in there a lot<font color="#CCCCCC"> of</font>

51
00:02:12,819 --> 00:02:17,319
development had been done between

52
00:02:15,180 --> 00:02:18,260
<font color="#CCCCCC">deployments and so people</font><font color="#E5E5E5"> were scared of</font>

53
00:02:17,319 --> 00:02:19,849
them<font color="#E5E5E5"> which meant</font>

54
00:02:18,260 --> 00:02:24,170
did them<font color="#E5E5E5"> infrequently which meant</font><font color="#CCCCCC"> that</font>

55
00:02:19,849 --> 00:02:26,569
they were scary to do<font color="#CCCCCC"> but it also meant</font>

56
00:02:24,170 --> 00:02:29,390
<font color="#CCCCCC">that stirred up was a very very small</font>

57
00:02:26,569 --> 00:02:31,129
<font color="#CCCCCC">fraction of your</font><font color="#E5E5E5"> actual runtime right if</font>

58
00:02:29,390 --> 00:02:34,279
your application runs for<font color="#E5E5E5"> six months</font>

59
00:02:31,129 --> 00:02:36,950
<font color="#E5E5E5">before you started again who cares how</font>

60
00:02:34,280 --> 00:02:39,530
long startup takes right the goal at

61
00:02:36,950 --> 00:02:41,268
<font color="#CCCCCC">that time was often peak throughput</font><font color="#E5E5E5"> so</font>

62
00:02:39,530 --> 00:02:42,079
<font color="#E5E5E5">even if startup took a little bit took a</font>

63
00:02:41,269 --> 00:02:44,750
<font color="#E5E5E5">little bit to get your application</font>

64
00:02:42,079 --> 00:02:46,819
warmed up who cares it was such a small

65
00:02:44,750 --> 00:02:51,349
<font color="#CCCCCC">fraction</font><font color="#E5E5E5"> of that total</font><font color="#CCCCCC"> lifetime of your</font>

66
00:02:46,819 --> 00:02:55,518
application but you<font color="#CCCCCC"> know the world has</font>

67
00:02:51,349 --> 00:02:58,459
<font color="#CCCCCC">changed and it's changed</font><font color="#E5E5E5"> because now</font>

68
00:02:55,519 --> 00:03:00,500
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> starting to</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> at more metrics</font>

69
00:02:58,459 --> 00:03:02,810
than just the peak throughput right

70
00:03:00,500 --> 00:03:05,900
<font color="#E5E5E5">almost everybody is doing continuous</font>

71
00:03:02,810 --> 00:03:08,299
<font color="#CCCCCC">integration</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> in some form you know</font>

72
00:03:05,900 --> 00:03:11,599
you check out your code<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you're</font>

73
00:03:08,299 --> 00:03:13,129
poor you create a pull request<font color="#CCCCCC"> and your</font>

74
00:03:11,599 --> 00:03:16,310
code<font color="#E5E5E5"> gets tested before it gets merged</font>

75
00:03:13,129 --> 00:03:20,659
<font color="#E5E5E5">back in and that build is going to run a</font>

76
00:03:16,310 --> 00:03:22,040
<font color="#E5E5E5">bunch of your testing</font><font color="#CCCCCC"> and often</font><font color="#E5E5E5"> that</font>

77
00:03:20,659 --> 00:03:24,410
<font color="#E5E5E5">means you're getting a lot of JVM</font>

78
00:03:22,040 --> 00:03:25,790
<font color="#CCCCCC">startups inside your CI pipeline right</font>

79
00:03:24,410 --> 00:03:27,918
you're starting the JVM to run your

80
00:03:25,790 --> 00:03:29,780
testing maybe you can batch your<font color="#E5E5E5"> tests</font>

81
00:03:27,919 --> 00:03:31,699
<font color="#E5E5E5">together maybe you can't depending on</font>

82
00:03:29,780 --> 00:03:34,280
what they're<font color="#CCCCCC"> doing in the VM and</font><font color="#E5E5E5"> so</font>

83
00:03:31,699 --> 00:03:36,260
suddenly<font color="#E5E5E5"> JVM startup and application</font>

84
00:03:34,280 --> 00:03:38,780
startup<font color="#E5E5E5"> starts to become a measurable</font>

85
00:03:36,260 --> 00:03:41,418
part of your build process<font color="#E5E5E5"> it starts</font><font color="#CCCCCC"> to</font>

86
00:03:38,780 --> 00:03:46,730
affect<font color="#E5E5E5"> how</font><font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> you can turn the</font>

87
00:03:41,419 --> 00:03:49,010
crank<font color="#E5E5E5"> and innovate and then once you've</font>

88
00:03:46,730 --> 00:03:51,319
done<font color="#CCCCCC"> the magic thing of getting CI</font>

89
00:03:49,010 --> 00:03:52,940
running<font color="#E5E5E5"> you know you want to get into</font>

90
00:03:51,319 --> 00:03:54,198
continuous deployment right you've

91
00:03:52,940 --> 00:03:56,389
checked out you've compiled<font color="#E5E5E5"> you've</font>

92
00:03:54,199 --> 00:03:58,730
tested<font color="#E5E5E5"> and now your system can</font>

93
00:03:56,389 --> 00:04:01,400
automatically deploy for you which<font color="#E5E5E5"> means</font>

94
00:03:58,730 --> 00:04:04,159
you go from<font color="#E5E5E5"> deploying maybe a couple of</font>

95
00:04:01,400 --> 00:04:08,000
times a year<font color="#CCCCCC"> to</font><font color="#E5E5E5"> possibly several times a</font>

96
00:04:04,159 --> 00:04:09,980
day<font color="#E5E5E5"> even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> this isn't automated</font><font color="#CCCCCC"> we were</font>

97
00:04:08,000 --> 00:04:12,349
still seeing people deploying much more

98
00:04:09,980 --> 00:04:15,078
frequently<font color="#CCCCCC"> and so that startup time</font>

99
00:04:12,349 --> 00:04:18,048
<font color="#E5E5E5">suddenly becomes a much bigger</font><font color="#CCCCCC"> factor in</font>

100
00:04:15,079 --> 00:04:19,728
your<font color="#CCCCCC"> runtime and then what talk is</font>

101
00:04:18,048 --> 00:04:22,729
<font color="#E5E5E5">complete without mentioning</font><font color="#CCCCCC"> the cloud</font>

102
00:04:19,728 --> 00:04:24,440
and with cloud<font color="#E5E5E5"> you get a lot of</font>

103
00:04:22,729 --> 00:04:26,840
horizontal<font color="#E5E5E5"> scaling right instead</font><font color="#CCCCCC"> of</font>

104
00:04:24,440 --> 00:04:28,639
buying a bigger machine<font color="#CCCCCC"> you start to run</font>

105
00:04:26,840 --> 00:04:31,039
more instances<font color="#CCCCCC"> of your application the</font>

106
00:04:28,639 --> 00:04:31,910
<font color="#CCCCCC">more</font><font color="#E5E5E5"> instances you run the more JVM</font>

107
00:04:31,039 --> 00:04:35,120
startup

108
00:04:31,910 --> 00:04:36,620
and actually the<font color="#E5E5E5"> length of time it</font><font color="#CCCCCC"> takes</font>

109
00:04:35,120 --> 00:04:38,210
<font color="#E5E5E5">for the JVM to start up for your</font>

110
00:04:36,620 --> 00:04:41,270
application to<font color="#CCCCCC"> start up them</font><font color="#E5E5E5"> to be ready</font>

111
00:04:38,210 --> 00:04:43,130
<font color="#E5E5E5">affects how early you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to scale the</font>

112
00:04:41,270 --> 00:04:45,590
earlier you have<font color="#CCCCCC"> to scale</font><font color="#E5E5E5"> the more money</font>

113
00:04:43,130 --> 00:04:47,420
<font color="#CCCCCC">it costs you this is cloud economics</font>

114
00:04:45,590 --> 00:04:49,130
<font color="#E5E5E5">you're paying for your memory the more</font>

115
00:04:47,420 --> 00:04:50,330
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> to pay for</font><font color="#E5E5E5"> more instances</font>

116
00:04:49,130 --> 00:04:55,040
you're running the more memory you're

117
00:04:50,330 --> 00:04:57,289
paying for and then you know to continue

118
00:04:55,040 --> 00:04:59,090
<font color="#CCCCCC">to be buzzword compliant we have Micro</font>

119
00:04:57,290 --> 00:05:01,760
<font color="#CCCCCC">Services which takes</font><font color="#E5E5E5"> your scaling</font>

120
00:04:59,090 --> 00:05:05,000
<font color="#E5E5E5">problem and multiplies it across</font>

121
00:05:01,760 --> 00:05:06,770
multiple<font color="#E5E5E5"> micro services so instead of</font>

122
00:05:05,000 --> 00:05:08,210
having one<font color="#E5E5E5"> model if that you're starting</font>

123
00:05:06,770 --> 00:05:11,270
<font color="#CCCCCC">up multiple times in</font><font color="#E5E5E5"> your scale you've</font>

124
00:05:08,210 --> 00:05:12,919
now got dozens or hundreds of micro

125
00:05:11,270 --> 00:05:17,510
services<font color="#CCCCCC"> each one</font><font color="#E5E5E5"> of those paying</font>

126
00:05:12,920 --> 00:05:19,430
<font color="#E5E5E5">startup costs</font><font color="#CCCCCC"> and then the next major</font>

127
00:05:17,510 --> 00:05:21,770
change<font color="#E5E5E5"> we're starting to</font><font color="#CCCCCC"> see is</font>

128
00:05:19,430 --> 00:05:24,800
<font color="#E5E5E5">serverless computing so I've pulled this</font>

129
00:05:21,770 --> 00:05:25,099
picture from<font color="#E5E5E5"> open wisk or Apache open</font>

130
00:05:24,800 --> 00:05:27,920
<font color="#E5E5E5">wisk</font>

131
00:05:25,100 --> 00:05:30,740
and the model here<font color="#E5E5E5"> for those who aren't</font>

132
00:05:27,920 --> 00:05:32,660
familiar with<font color="#E5E5E5"> serverless</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> you know you</font>

133
00:05:30,740 --> 00:05:34,370
<font color="#E5E5E5">have some set of events that occur and</font>

134
00:05:32,660 --> 00:05:36,500
<font color="#CCCCCC">you have rules</font><font color="#E5E5E5"> that listen for those</font>

135
00:05:34,370 --> 00:05:37,880
<font color="#E5E5E5">events when they happen they fire some</font>

136
00:05:36,500 --> 00:05:42,920
action and<font color="#E5E5E5"> typically the way those</font>

137
00:05:37,880 --> 00:05:45,200
actions get fired<font color="#CCCCCC"> is they</font><font color="#E5E5E5"> run a a docker</font>

138
00:05:42,920 --> 00:05:46,940
container<font color="#CCCCCC"> write the model is often your</font>

139
00:05:45,200 --> 00:05:48,890
action comes in your docker container

140
00:05:46,940 --> 00:05:51,440
spins up<font color="#E5E5E5"> it services your action and</font>

141
00:05:48,890 --> 00:05:53,450
then the docker container goes away so

142
00:05:51,440 --> 00:05:55,160
<font color="#E5E5E5">that means your startup now is not just</font>

143
00:05:53,450 --> 00:05:56,300
the<font color="#E5E5E5"> startup of your application it's</font>

144
00:05:55,160 --> 00:05:59,120
also the<font color="#CCCCCC"> start up with</font><font color="#E5E5E5"> a docker</font>

145
00:05:56,300 --> 00:06:00,860
container<font color="#CCCCCC"> startup of</font><font color="#E5E5E5"> the JVM the startup</font>

146
00:05:59,120 --> 00:06:02,990
of your application<font color="#CCCCCC"> so there's</font><font color="#E5E5E5"> a long</font>

147
00:06:00,860 --> 00:06:04,850
latency<font color="#E5E5E5"> so if you look into serverless</font>

148
00:06:02,990 --> 00:06:07,610
computing they often complain about cold

149
00:06:04,850 --> 00:06:09,980
starts the<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> is so bad</font><font color="#CCCCCC"> that</font>

150
00:06:07,610 --> 00:06:14,060
the service providers<font color="#CCCCCC"> actually cheat a</font>

151
00:06:09,980 --> 00:06:15,740
little bit<font color="#E5E5E5"> here and they claim that your</font>

152
00:06:14,060 --> 00:06:18,020
container will<font color="#CCCCCC"> be shut down</font><font color="#E5E5E5"> or</font>

153
00:06:15,740 --> 00:06:19,580
<font color="#E5E5E5">conceptually is there for one request</font>

154
00:06:18,020 --> 00:06:22,250
<font color="#E5E5E5">but they actually keep them</font><font color="#CCCCCC"> around a</font>

155
00:06:19,580 --> 00:06:24,440
small number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> so that second</font>

156
00:06:22,250 --> 00:06:27,250
<font color="#CCCCCC">request don't always pay that same hot</font>

157
00:06:24,440 --> 00:06:30,350
start or that same cold start problem

158
00:06:27,250 --> 00:06:32,360
<font color="#E5E5E5">right ideally though the JVM should be</font>

159
00:06:30,350 --> 00:06:34,430
able<font color="#E5E5E5"> to start fast enough that none</font><font color="#CCCCCC"> of</font>

160
00:06:32,360 --> 00:06:36,110
this is needed that<font color="#CCCCCC"> the service</font>

161
00:06:34,430 --> 00:06:40,430
providers can<font color="#CCCCCC"> go back to the very</font><font color="#E5E5E5"> simple</font>

162
00:06:36,110 --> 00:06:42,170
start<font color="#CCCCCC"> a container on every request</font><font color="#E5E5E5"> the</font>

163
00:06:40,430 --> 00:06:43,139
other<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> piece of this is that</font>

164
00:06:42,170 --> 00:06:48,270
we

165
00:06:43,139 --> 00:06:51,270
to see<font color="#E5E5E5"> a loss of the</font><font color="#CCCCCC"> ability through</font><font color="#E5E5E5"> the</font>

166
00:06:48,270 --> 00:06:53,400
<font color="#E5E5E5">JVM to learn from previous runs so in a</font>

167
00:06:51,270 --> 00:06:55,219
serverless model where you're<font color="#CCCCCC"> starting a</font>

168
00:06:53,400 --> 00:06:57,870
<font color="#CCCCCC">new container for every request</font>

169
00:06:55,219 --> 00:07:01,080
<font color="#E5E5E5">everything is treated as a first run the</font>

170
00:06:57,870 --> 00:07:05,099
JVM can't easily cache things<font color="#E5E5E5"> away</font><font color="#CCCCCC"> to be</font>

171
00:07:01,080 --> 00:07:07,349
able<font color="#E5E5E5"> to use them</font><font color="#CCCCCC"> for later runs so what</font>

172
00:07:05,099 --> 00:07:09,860
is<font color="#E5E5E5"> our new world look like deployments</font>

173
00:07:07,349 --> 00:07:12,539
are frequent<font color="#E5E5E5"> often multiple times a day</font>

174
00:07:09,860 --> 00:07:14,520
<font color="#E5E5E5">startup even if it's exactly</font><font color="#CCCCCC"> the same</font>

175
00:07:12,539 --> 00:07:16,889
time as<font color="#E5E5E5"> the length of time as it used to</font>

176
00:07:14,520 --> 00:07:19,818
be in the old<font color="#E5E5E5"> world has now become a</font>

177
00:07:16,889 --> 00:07:24,060
much larger fraction<font color="#E5E5E5"> of your uptime and</font>

178
00:07:19,819 --> 00:07:27,060
we've lost<font color="#E5E5E5"> the ability to learn from</font>

179
00:07:24,060 --> 00:07:29,009
<font color="#E5E5E5">previous runs because now we're seeing</font>

180
00:07:27,060 --> 00:07:30,930
<font color="#E5E5E5">lots and lots of first runs and never</font>

181
00:07:29,009 --> 00:07:35,550
really<font color="#CCCCCC"> seeing what</font><font color="#E5E5E5"> would be considered a</font>

182
00:07:30,930 --> 00:07:40,430
second run so even in the old world

183
00:07:35,550 --> 00:07:43,199
though<font color="#CCCCCC"> there were times where the JVM</font>

184
00:07:40,430 --> 00:07:46,919
still cared about other metrics than

185
00:07:43,199 --> 00:07:48,719
pure throughput<font color="#CCCCCC"> so historically</font><font color="#E5E5E5"> the JVM</font>

186
00:07:46,919 --> 00:07:50,250
didn't have to be a good neighbor<font color="#CCCCCC"> it was</font>

187
00:07:48,719 --> 00:07:52,379
<font color="#E5E5E5">able to say I'm running on this</font><font color="#CCCCCC"> machine</font>

188
00:07:50,250 --> 00:07:54,180
I'm going<font color="#CCCCCC"> to grab all the resources I'm</font>

189
00:07:52,379 --> 00:07:56,939
going to assume I'm<font color="#CCCCCC"> the only one here</font>

190
00:07:54,180 --> 00:08:00,750
<font color="#E5E5E5">and you know it gave you really</font><font color="#CCCCCC"> good</font>

191
00:07:56,939 --> 00:08:03,629
throughput for that but there were<font color="#CCCCCC"> still</font>

192
00:08:00,750 --> 00:08:06,500
times where that wasn't<font color="#CCCCCC"> good enough</font>

193
00:08:03,629 --> 00:08:08,310
you know the classic<font color="#E5E5E5"> xkcd about</font>

194
00:08:06,500 --> 00:08:11,430
developers slacking off while they're

195
00:08:08,310 --> 00:08:13,500
compliant<font color="#E5E5E5"> compiling their code</font><font color="#CCCCCC"> this also</font>

196
00:08:11,430 --> 00:08:16,050
applies<font color="#CCCCCC"> to the length of</font><font color="#E5E5E5"> time it</font><font color="#CCCCCC"> takes</font>

197
00:08:13,500 --> 00:08:17,580
to<font color="#E5E5E5"> deploy your</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> right if the JVM</font>

198
00:08:16,050 --> 00:08:19,020
takes a long time<font color="#E5E5E5"> to</font><font color="#CCCCCC"> start up to get</font>

199
00:08:17,580 --> 00:08:22,198
your<font color="#E5E5E5"> application up and</font><font color="#CCCCCC"> running it means</font>

200
00:08:19,020 --> 00:08:22,799
you can only do<font color="#E5E5E5"> so many startups</font><font color="#CCCCCC"> in a</font>

201
00:08:22,199 --> 00:08:25,439
given day

202
00:08:22,800 --> 00:08:28,259
<font color="#E5E5E5">and so we the JVM needed to come up with</font>

203
00:08:25,439 --> 00:08:29,729
<font color="#E5E5E5">ways to make that better</font><font color="#CCCCCC"> and debugging</font>

204
00:08:28,259 --> 00:08:32,099
<font color="#E5E5E5">is even worse because</font><font color="#CCCCCC"> there's often</font><font color="#E5E5E5"> a</font>

205
00:08:29,729 --> 00:08:36,740
higher performance hit when you enter

206
00:08:32,099 --> 00:08:36,740
debug mode compared<font color="#E5E5E5"> to regular mode</font>

207
00:08:41,179 --> 00:08:45,650
so the JVMs gave us options to<font color="#E5E5E5"> work</font>

208
00:08:44,030 --> 00:08:47,930
around some<font color="#CCCCCC"> of this right there's X</font>

209
00:08:45,650 --> 00:08:49,160
<font color="#CCCCCC">QuickStart</font><font color="#E5E5E5"> for open j9</font><font color="#CCCCCC"> I think the</font>

210
00:08:47,930 --> 00:08:52,670
equivalent to that would have<font color="#CCCCCC"> been -</font>

211
00:08:49,160 --> 00:08:55,579
client<font color="#E5E5E5"> for hotspot</font><font color="#CCCCCC"> and what</font><font color="#E5E5E5"> this did is</font>

212
00:08:52,670 --> 00:08:57,829
<font color="#E5E5E5">it traded your peak throughput for a</font>

213
00:08:55,580 --> 00:09:01,130
faster<font color="#E5E5E5"> startup so you might wonder why</font>

214
00:08:57,830 --> 00:09:06,530
<font color="#CCCCCC">is there a trade here and the answer is</font>

215
00:09:01,130 --> 00:09:08,540
the interpreter<font color="#E5E5E5"> one of the really good</font>

216
00:09:06,530 --> 00:09:10,160
sources<font color="#E5E5E5"> of profiling</font><font color="#CCCCCC"> data for a</font><font color="#E5E5E5"> JVM is</font>

217
00:09:08,540 --> 00:09:11,599
<font color="#E5E5E5">the interpreter because</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> okay for</font>

218
00:09:10,160 --> 00:09:13,640
<font color="#CCCCCC">the interpreter to take a little bit</font>

219
00:09:11,600 --> 00:09:16,460
<font color="#E5E5E5">more time to do</font><font color="#CCCCCC"> things to be able</font><font color="#E5E5E5"> to get</font>

220
00:09:13,640 --> 00:09:18,350
that profiling<font color="#CCCCCC"> data for you and so the</font>

221
00:09:16,460 --> 00:09:20,420
sooner you compile the less of that

222
00:09:18,350 --> 00:09:23,000
<font color="#E5E5E5">really rich profiling data</font><font color="#CCCCCC"> you get and</font>

223
00:09:20,420 --> 00:09:24,800
<font color="#E5E5E5">so you make this trade-off between your</font>

224
00:09:23,000 --> 00:09:28,130
peak throughput which is going<font color="#E5E5E5"> to rely</font>

225
00:09:24,800 --> 00:09:31,280
on some<font color="#E5E5E5"> of that that interpreter</font>

226
00:09:28,130 --> 00:09:33,380
profiling data<font color="#E5E5E5"> and you know</font><font color="#CCCCCC"> your faster</font>

227
00:09:31,280 --> 00:09:35,030
startup<font color="#E5E5E5"> you can get into JIT code faster</font>

228
00:09:33,380 --> 00:09:39,560
<font color="#E5E5E5">but you're not</font><font color="#CCCCCC"> gonna have as much data</font>

229
00:09:35,030 --> 00:09:42,140
so<font color="#CCCCCC"> the other place even</font><font color="#E5E5E5"> in the old world</font>

230
00:09:39,560 --> 00:09:46,310
<font color="#CCCCCC">that</font><font color="#E5E5E5"> people cared about other metrics</font>

231
00:09:42,140 --> 00:09:47,750
<font color="#E5E5E5">was actually footprint and that drove us</font>

232
00:09:46,310 --> 00:09:49,880
<font color="#CCCCCC">to create something</font><font color="#E5E5E5"> we call the share</font>

233
00:09:47,750 --> 00:09:52,070
classes<font color="#E5E5E5"> cache right this is where maybe</font>

234
00:09:49,880 --> 00:09:54,890
I'm running<font color="#E5E5E5"> multiple JVMs</font><font color="#CCCCCC"> on the same</font>

235
00:09:52,070 --> 00:09:56,510
system<font color="#CCCCCC"> I really</font><font color="#E5E5E5"> don't want to pay the</font>

236
00:09:54,890 --> 00:09:59,540
footprint<font color="#E5E5E5"> for all of the data</font><font color="#CCCCCC"> all the</font>

237
00:09:56,510 --> 00:10:01,100
time<font color="#E5E5E5"> so I've given other talks where</font>

238
00:09:59,540 --> 00:10:04,040
I've talked about<font color="#E5E5E5"> why the class file</font>

239
00:10:01,100 --> 00:10:07,820
formats a horrible format for the the

240
00:10:04,040 --> 00:10:10,130
JVM to interpret and what j9 has done is

241
00:10:07,820 --> 00:10:12,200
it takes that<font color="#E5E5E5"> class file and it creates</font>

242
00:10:10,130 --> 00:10:14,990
a new piece<font color="#CCCCCC"> of metadata it calls the j9</font>

243
00:10:12,200 --> 00:10:17,360
ROM class<font color="#E5E5E5"> so this is all the symbolic</font>

244
00:10:14,990 --> 00:10:19,070
<font color="#CCCCCC">information from the class file</font><font color="#E5E5E5"> but it's</font>

245
00:10:17,360 --> 00:10:20,630
put in a better format to<font color="#E5E5E5"> be able to</font>

246
00:10:19,070 --> 00:10:22,730
walk<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the interpreter</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

247
00:10:20,630 --> 00:10:25,280
find the the data it<font color="#CCCCCC"> needs at runtime</font>

248
00:10:22,730 --> 00:10:26,780
<font color="#CCCCCC">and it's typically much smaller</font><font color="#E5E5E5"> than a</font>

249
00:10:25,280 --> 00:10:30,020
class file because we throw away<font color="#E5E5E5"> the</font>

250
00:10:26,780 --> 00:10:33,020
bits you don't need and then in<font color="#CCCCCC"> addition</font>

251
00:10:30,020 --> 00:10:34,880
<font color="#E5E5E5">to that we also have a j9</font><font color="#CCCCCC"> ram class this</font>

252
00:10:33,020 --> 00:10:37,730
acts like a cache<font color="#E5E5E5"> for any of the live</font>

253
00:10:34,880 --> 00:10:40,310
pointers<font color="#CCCCCC"> so when you've resolved a</font>

254
00:10:37,730 --> 00:10:41,600
string<font color="#E5E5E5"> using</font><font color="#CCCCCC"> when you're doing a load</font>

255
00:10:40,310 --> 00:10:44,510
constant<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> when you need to</font>

256
00:10:41,600 --> 00:10:48,130
<font color="#E5E5E5">put that string pointer somewhere</font><font color="#CCCCCC"> and so</font>

257
00:10:44,510 --> 00:10:48,130
that<font color="#E5E5E5"> ends up in the</font><font color="#CCCCCC"> j9 Ram class</font>

258
00:10:48,630 --> 00:10:54,700
so if I'm running<font color="#E5E5E5"> three JVMs on the same</font>

259
00:10:51,940 --> 00:10:57,700
system<font color="#CCCCCC"> and I've loaded basically the</font>

260
00:10:54,700 --> 00:10:59,770
same classes<font color="#E5E5E5"> I've got you know</font><font color="#CCCCCC"> ROM</font>

261
00:10:57,700 --> 00:11:02,170
<font color="#CCCCCC">classes and RAM classes</font><font color="#E5E5E5"> for the same</font>

262
00:10:59,770 --> 00:11:04,810
things in<font color="#CCCCCC"> each of them</font><font color="#E5E5E5"> now if we look</font><font color="#CCCCCC"> to</font>

263
00:11:02,170 --> 00:11:06,939
<font color="#E5E5E5">the world of something like C or C++ if</font>

264
00:11:04,810 --> 00:11:11,949
I'm<font color="#CCCCCC"> running the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> three</font>

265
00:11:06,940 --> 00:11:13,600
times<font color="#E5E5E5"> the code there is in shared</font>

266
00:11:11,950 --> 00:11:15,760
libraries a lot of times and so I'm only

267
00:11:13,600 --> 00:11:18,760
<font color="#E5E5E5">paying a one copy of that code in memory</font>

268
00:11:15,760 --> 00:11:21,670
each process is<font color="#CCCCCC"> able to share that</font>

269
00:11:18,760 --> 00:11:25,420
<font color="#E5E5E5">executable code</font><font color="#CCCCCC"> and so you know I get a</font>

270
00:11:21,670 --> 00:11:27,430
footprint savings so we<font color="#CCCCCC"> said our</font><font color="#E5E5E5"> ROM</font>

271
00:11:25,420 --> 00:11:30,870
classes are<font color="#E5E5E5"> through ROM once they're</font>

272
00:11:27,430 --> 00:11:30,870
<font color="#CCCCCC">created nobody writes to them and</font>

273
00:11:31,380 --> 00:11:35,770
they're<font color="#CCCCCC"> positioned independent so I can</font>

274
00:11:33,730 --> 00:11:37,660
load them in to memory anywhere I want

275
00:11:35,770 --> 00:11:40,240
<font color="#CCCCCC">and so really</font><font color="#E5E5E5"> what I want to do is take</font>

276
00:11:37,660 --> 00:11:43,240
<font color="#E5E5E5">those three copies and make them one</font><font color="#CCCCCC"> and</font>

277
00:11:40,240 --> 00:11:44,200
so we created<font color="#E5E5E5"> a shared memory area that</font>

278
00:11:43,240 --> 00:11:47,620
all JVMs

279
00:11:44,200 --> 00:11:49,300
on the machine<font color="#E5E5E5"> that have access to can</font>

280
00:11:47,620 --> 00:11:51,760
share that<font color="#E5E5E5"> and so you only pay for one</font>

281
00:11:49,300 --> 00:11:53,650
copy of the<font color="#CCCCCC"> rom class right so</font><font color="#E5E5E5"> we've</font>

282
00:11:51,760 --> 00:11:57,130
taken the executable code<font color="#E5E5E5"> Chavez</font>

283
00:11:53,650 --> 00:11:58,779
bytecode<font color="#CCCCCC"> the constant pool</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> kind of</font>

284
00:11:57,130 --> 00:12:00,459
data and<font color="#CCCCCC"> we've said</font><font color="#E5E5E5"> look you only</font><font color="#CCCCCC"> really</font>

285
00:11:58,779 --> 00:12:02,050
<font color="#CCCCCC">need one</font><font color="#E5E5E5"> copy of this in memory all the</font>

286
00:12:00,459 --> 00:12:04,689
JVM s that are<font color="#CCCCCC"> currently running</font><font color="#E5E5E5"> to</font>

287
00:12:02,050 --> 00:12:07,439
share that so the major<font color="#CCCCCC"> thing this gives</font>

288
00:12:04,690 --> 00:12:10,120
you is a footprint win usually about<font color="#CCCCCC"> 20%</font>

289
00:12:07,440 --> 00:12:11,680
<font color="#CCCCCC">but it also</font><font color="#E5E5E5"> gives you a startup win</font>

290
00:12:10,120 --> 00:12:14,050
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have to take those</font>

291
00:12:11,680 --> 00:12:17,500
class files<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> and parse them and</font>

292
00:12:14,050 --> 00:12:19,750
convert them<font color="#CCCCCC"> that's already done you can</font>

293
00:12:17,500 --> 00:12:24,370
<font color="#CCCCCC">just load the existing one out of</font><font color="#E5E5E5"> the</font>

294
00:12:19,750 --> 00:12:26,380
share classes cache<font color="#CCCCCC"> so I know I show 3j</font>

295
00:12:24,370 --> 00:12:29,100
VMs running at the same time you<font color="#E5E5E5"> get the</font>

296
00:12:26,380 --> 00:12:31,689
<font color="#E5E5E5">same kind of benefits</font><font color="#CCCCCC"> if you're running</font>

297
00:12:29,100 --> 00:12:33,310
JVM<font color="#E5E5E5"> is one after</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> because once</font>

298
00:12:31,690 --> 00:12:34,959
you<font color="#E5E5E5"> don't get the footprint win in that</font>

299
00:12:33,310 --> 00:12:40,300
case<font color="#E5E5E5"> because you're still paying</font><font color="#CCCCCC"> for one</font>

300
00:12:34,959 --> 00:12:42,459
copy<font color="#CCCCCC"> but you do get</font><font color="#E5E5E5"> the startup win</font>

301
00:12:40,300 --> 00:12:43,930
because<font color="#E5E5E5"> you don't the</font><font color="#CCCCCC"> second JVM</font><font color="#E5E5E5"> can</font>

302
00:12:42,459 --> 00:12:46,619
reuse the wrong classes<font color="#E5E5E5"> that have</font>

303
00:12:43,930 --> 00:12:46,620
already been<font color="#CCCCCC"> created</font>

304
00:12:47,740 --> 00:12:52,660
right so if the talking would start up

305
00:12:50,590 --> 00:12:54,820
<font color="#CCCCCC">what</font><font color="#E5E5E5"> actually happens at</font><font color="#CCCCCC"> start up I'm</font>

306
00:12:52,660 --> 00:12:57,910
gonna give a<font color="#E5E5E5"> really high-level overview</font>

307
00:12:54,820 --> 00:12:59,770
<font color="#E5E5E5">of some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the things</font><font color="#CCCCCC"> that occur so we</font>

308
00:12:57,910 --> 00:13:03,250
can see you know areas that the JVM

309
00:12:59,770 --> 00:13:06,220
needs to change in you know here's<font color="#CCCCCC"> my</font>

310
00:13:03,250 --> 00:13:08,170
command line<font color="#E5E5E5"> you know Java dash X share</font>

311
00:13:06,220 --> 00:13:09,820
classes<font color="#E5E5E5"> maybe you've got a bunch of</font>

312
00:13:08,170 --> 00:13:12,490
other<font color="#CCCCCC"> options there</font><font color="#E5E5E5"> you know if we're</font>

313
00:13:09,820 --> 00:13:15,750
being truly honest most people's command

314
00:13:12,490 --> 00:13:22,270
lines are<font color="#E5E5E5"> pages long</font><font color="#CCCCCC"> worth</font><font color="#E5E5E5"> of options</font>

315
00:13:15,750 --> 00:13:23,530
usually copied<font color="#E5E5E5"> from stack overflow but</font>

316
00:13:22,270 --> 00:13:27,550
what happens when<font color="#E5E5E5"> you hit Enter</font>

317
00:13:23,530 --> 00:13:30,699
well the invocation<font color="#E5E5E5"> API comes along this</font>

318
00:13:27,550 --> 00:13:32,770
<font color="#E5E5E5">is defined in a specification you can go</font>

319
00:13:30,700 --> 00:13:35,080
look up exactly<font color="#E5E5E5"> what it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> but it</font>

320
00:13:32,770 --> 00:13:38,020
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> is a call that creates the</font>

321
00:13:35,080 --> 00:13:41,050
Java VM<font color="#E5E5E5"> for you so the Java launcher is</font>

322
00:13:38,020 --> 00:13:42,340
just a piece of C code anybody can write

323
00:13:41,050 --> 00:13:44,650
their own launcher using the invocation

324
00:13:42,340 --> 00:13:47,590
<font color="#E5E5E5">API and it'll go off and create</font><font color="#CCCCCC"> you a</font>

325
00:13:44,650 --> 00:13:50,260
Java VM and so what what happens in this

326
00:13:47,590 --> 00:13:51,730
process<font color="#CCCCCC"> is there's a lot of string</font>

327
00:13:50,260 --> 00:13:55,030
parsing<font color="#E5E5E5"> to parse your</font><font color="#CCCCCC"> command-line</font>

328
00:13:51,730 --> 00:13:56,980
options<font color="#E5E5E5"> some allocation to create your</font>

329
00:13:55,030 --> 00:13:59,530
data structures and out of this you get

330
00:13:56,980 --> 00:14:01,900
<font color="#E5E5E5">back a</font><font color="#CCCCCC"> java vm</font><font color="#E5E5E5"> structure that you can</font>

331
00:13:59,530 --> 00:14:04,510
<font color="#CCCCCC">use and you</font><font color="#E5E5E5"> get a bunch of threads</font>

332
00:14:01,900 --> 00:14:06,220
usually right<font color="#E5E5E5"> there are GC helper</font>

333
00:14:04,510 --> 00:14:08,650
threads that<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> created there</font>

334
00:14:06,220 --> 00:14:10,480
are JIT compilation threads<font color="#E5E5E5"> there are</font>

335
00:14:08,650 --> 00:14:13,390
<font color="#E5E5E5">other random threads that the runtime</font>

336
00:14:10,480 --> 00:14:15,040
needs so there's a lot of allocation

337
00:14:13,390 --> 00:14:16,420
happening at startup<font color="#CCCCCC"> this isn't</font>

338
00:14:15,040 --> 00:14:20,920
different<font color="#E5E5E5"> than what you would</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> out of</font>

339
00:14:16,420 --> 00:14:23,079
<font color="#E5E5E5">any other managed runtime and then the</font>

340
00:14:20,920 --> 00:14:24,430
GC has to allocate the heap and<font color="#E5E5E5"> the</font>

341
00:14:23,080 --> 00:14:28,180
reason I call it<font color="#E5E5E5"> the heap is there's</font>

342
00:14:24,430 --> 00:14:30,579
<font color="#CCCCCC">often a hidden startup cost in the heap</font>

343
00:14:28,180 --> 00:14:32,650
<font color="#E5E5E5">and that's due</font><font color="#CCCCCC"> to the fact</font><font color="#E5E5E5"> that you've</font>

344
00:14:30,580 --> 00:14:34,990
reserved a large chunk of<font color="#CCCCCC"> memory and</font><font color="#E5E5E5"> now</font>

345
00:14:32,650 --> 00:14:37,060
you have to page it in and we<font color="#CCCCCC"> often see</font>

346
00:14:34,990 --> 00:14:38,620
this<font color="#CCCCCC"> in GC logs when you've you know</font>

347
00:14:37,060 --> 00:14:42,010
been running a scavenge and<font color="#E5E5E5"> the first</font>

348
00:14:38,620 --> 00:14:43,960
time you touch the evacuate space it's

349
00:14:42,010 --> 00:14:46,300
actually<font color="#CCCCCC"> a slower scavenge than any</font>

350
00:14:43,960 --> 00:14:49,570
other scavenger so there's a<font color="#E5E5E5"> little bit</font>

351
00:14:46,300 --> 00:14:51,010
<font color="#E5E5E5">of a cost there as well and then the</font>

352
00:14:49,570 --> 00:14:53,170
classes<font color="#CCCCCC"> that have to</font><font color="#E5E5E5"> be loaded</font><font color="#CCCCCC"> at</font>

353
00:14:51,010 --> 00:14:54,630
startup<font color="#E5E5E5"> right</font><font color="#CCCCCC"> we have a bunch of class</font>

354
00:14:53,170 --> 00:14:56,939
files they<font color="#CCCCCC"> have to be</font><font color="#E5E5E5"> loaded</font>

355
00:14:54,630 --> 00:14:58,380
so you've got<font color="#CCCCCC"> disk access</font><font color="#E5E5E5"> they've got to</font>

356
00:14:56,940 --> 00:15:01,140
be<font color="#E5E5E5"> right into memory they have to be</font>

357
00:14:58,380 --> 00:15:03,030
parsed<font color="#CCCCCC"> they have to be verified and then</font>

358
00:15:01,140 --> 00:15:05,340
you<font color="#E5E5E5"> create your</font><font color="#CCCCCC"> rom</font><font color="#E5E5E5"> in your ram classes</font>

359
00:15:03,030 --> 00:15:07,290
out of<font color="#CCCCCC"> these things</font><font color="#E5E5E5"> and so running hello</font>

360
00:15:05,340 --> 00:15:09,420
world on<font color="#E5E5E5"> a Java 8 you're talking</font>

361
00:15:07,290 --> 00:15:11,550
probably<font color="#CCCCCC"> about</font><font color="#E5E5E5"> 400 classes to get loaded</font>

362
00:15:09,420 --> 00:15:13,170
<font color="#CCCCCC">and by the time you add a larger</font>

363
00:15:11,550 --> 00:15:17,130
application<font color="#E5E5E5"> and that pulls in</font><font color="#CCCCCC"> more and</font>

364
00:15:13,170 --> 00:15:17,939
more<font color="#CCCCCC"> classes and then all the while that</font>

365
00:15:17,130 --> 00:15:19,890
<font color="#E5E5E5">this is happening</font>

366
00:15:17,940 --> 00:15:22,440
your<font color="#CCCCCC"> interpreters</font><font color="#E5E5E5"> running its profiling</font>

367
00:15:19,890 --> 00:15:23,880
the data<font color="#E5E5E5"> and your JIT compilers are</font>

368
00:15:22,440 --> 00:15:26,640
running in the<font color="#E5E5E5"> background</font><font color="#CCCCCC"> jetting and so</font>

369
00:15:23,880 --> 00:15:28,290
there's<font color="#E5E5E5"> this fight</font><font color="#CCCCCC"> between getting</font><font color="#E5E5E5"> your</font>

370
00:15:26,640 --> 00:15:32,880
application<font color="#E5E5E5"> up and running</font><font color="#CCCCCC"> and getting</font>

371
00:15:28,290 --> 00:15:34,319
<font color="#E5E5E5">it up and</font><font color="#CCCCCC"> running fast so if we look at</font>

372
00:15:32,880 --> 00:15:35,820
<font color="#E5E5E5">that</font><font color="#CCCCCC"> process there's a lot of things in</font>

373
00:15:34,320 --> 00:15:39,090
there that<font color="#CCCCCC"> we could do that we could</font>

374
00:15:35,820 --> 00:15:41,330
<font color="#CCCCCC">really change the JVM</font><font color="#E5E5E5"> so we need to look</font>

375
00:15:39,090 --> 00:15:46,440
at how do we<font color="#E5E5E5"> do that</font>

376
00:15:41,330 --> 00:15:49,160
and with<font color="#CCCCCC"> open j9</font><font color="#E5E5E5"> we've been doing a lot</font>

377
00:15:46,440 --> 00:15:51,120
<font color="#CCCCCC">of investigation</font><font color="#E5E5E5"> into these areas</font><font color="#CCCCCC"> so</font>

378
00:15:49,160 --> 00:15:52,800
<font color="#CCCCCC">things I'm going to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about summer</font>

379
00:15:51,120 --> 00:15:55,830
areas we're interested in working in

380
00:15:52,800 --> 00:15:57,449
summer areas we've already<font color="#E5E5E5"> started so</font>

381
00:15:55,830 --> 00:16:02,730
the first<font color="#CCCCCC"> one is how many people are</font>

382
00:15:57,450 --> 00:16:04,320
aware<font color="#CCCCCC"> of</font><font color="#E5E5E5"> j-link in</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> 9 what have I</font>

383
00:16:02,730 --> 00:16:10,140
told you<font color="#E5E5E5"> it was good the more than</font><font color="#CCCCCC"> four</font>

384
00:16:04,320 --> 00:16:12,270
more<font color="#E5E5E5"> than footprint j-link is usually</font>

385
00:16:10,140 --> 00:16:14,310
pushed for footprint<font color="#CCCCCC"> we say</font><font color="#E5E5E5"> you know</font>

386
00:16:12,270 --> 00:16:15,900
<font color="#CCCCCC">modernize your</font><font color="#E5E5E5"> application run</font><font color="#CCCCCC"> Jaylin</font>

387
00:16:14,310 --> 00:16:18,959
can you'll get a smaller custom runtime

388
00:16:15,900 --> 00:16:20,819
you can deploy all of<font color="#CCCCCC"> that's true the</font>

389
00:16:18,960 --> 00:16:22,440
really cool opportunity though<font color="#E5E5E5"> is it</font>

390
00:16:20,820 --> 00:16:24,810
gets<font color="#CCCCCC"> people used</font><font color="#E5E5E5"> to running a tool</font>

391
00:16:22,440 --> 00:16:26,820
<font color="#E5E5E5">before they do deployment</font><font color="#CCCCCC"> once you're</font>

392
00:16:24,810 --> 00:16:28,349
running a tool the JVM can do all kinds

393
00:16:26,820 --> 00:16:29,490
of<font color="#E5E5E5"> other things you know these are</font>

394
00:16:28,350 --> 00:16:31,530
things<font color="#CCCCCC"> we could have done in the past</font>

395
00:16:29,490 --> 00:16:34,230
<font color="#E5E5E5">but getting people</font><font color="#CCCCCC"> to run those tools</font>

396
00:16:31,530 --> 00:16:36,180
has been difficult<font color="#CCCCCC"> and so now you know</font>

397
00:16:34,230 --> 00:16:38,370
if we can if<font color="#CCCCCC"> jaylen gets a lot of</font><font color="#E5E5E5"> buy-in</font>

398
00:16:36,180 --> 00:16:41,550
<font color="#CCCCCC">there's a lot of opportunity here we</font>

399
00:16:38,370 --> 00:16:45,840
could pre create share classes caches we

400
00:16:41,550 --> 00:16:48,689
could pre do the the<font color="#E5E5E5"> ROM class creation</font>

401
00:16:45,840 --> 00:16:51,960
<font color="#E5E5E5">maybe we could create ahead of time</font>

402
00:16:48,690 --> 00:16:53,880
<font color="#CCCCCC">compiled code for you</font><font color="#E5E5E5"> there's all kinds</font>

403
00:16:51,960 --> 00:16:57,170
of opportunities<font color="#CCCCCC"> for optimization once</font>

404
00:16:53,880 --> 00:17:00,920
people get used to running<font color="#E5E5E5"> an extra tool</font>

405
00:16:57,170 --> 00:17:03,799
so I've mentioned<font color="#CCCCCC"> äôt on j9s head äôt</font>

406
00:17:00,920 --> 00:17:05,240
for a long time now and<font color="#E5E5E5"> much I can't</font>

407
00:17:03,799 --> 00:17:07,699
remember exactly<font color="#E5E5E5"> when we introduced it</font>

408
00:17:05,240 --> 00:17:09,649
but back<font color="#E5E5E5"> in the days of WebSphere</font>

409
00:17:07,699 --> 00:17:13,039
<font color="#CCCCCC">WebSphere real time we put a lot</font><font color="#E5E5E5"> of</font>

410
00:17:09,648 --> 00:17:16,279
effort<font color="#E5E5E5"> into</font><font color="#CCCCCC"> making</font><font color="#E5E5E5"> sure that that we had</font>

411
00:17:13,039 --> 00:17:17,898
<font color="#CCCCCC">äôt capabilities and so we looked</font><font color="#E5E5E5"> at our</font>

412
00:17:16,279 --> 00:17:20,000
<font color="#E5E5E5">shared classes cache and said this is</font>

413
00:17:17,898 --> 00:17:21,739
great<font color="#E5E5E5"> for storing</font><font color="#CCCCCC"> rom classes but the</font>

414
00:17:20,000 --> 00:17:23,299
other thing<font color="#E5E5E5"> I want to store there is the</font>

415
00:17:21,740 --> 00:17:25,459
other kind<font color="#CCCCCC"> of executable code</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to</font>

416
00:17:23,299 --> 00:17:29,019
store my<font color="#E5E5E5"> jetty code in there and so on</font>

417
00:17:25,459 --> 00:17:31,639
<font color="#CCCCCC">start up the JVM generates</font><font color="#E5E5E5"> a ot code and</font>

418
00:17:29,019 --> 00:17:33,830
stores<font color="#E5E5E5"> that away into the share classes</font>

419
00:17:31,639 --> 00:17:35,539
cache<font color="#E5E5E5"> along with some metadata to make</font>

420
00:17:33,830 --> 00:17:38,299
sure that you know it's valid to reuse

421
00:17:35,539 --> 00:17:41,779
that code<font color="#E5E5E5"> and it stores some interpreter</font>

422
00:17:38,299 --> 00:17:44,360
profiling<font color="#CCCCCC"> data we've seen</font><font color="#E5E5E5"> startup</font>

423
00:17:41,779 --> 00:17:47,000
improvements between<font color="#E5E5E5"> 10 and</font><font color="#CCCCCC"> 30% when you</font>

424
00:17:44,360 --> 00:17:48,979
use the share classes cache that won't

425
00:17:47,000 --> 00:17:52,070
be the first run<font color="#CCCCCC"> that'll be</font><font color="#E5E5E5"> the second</font>

426
00:17:48,980 --> 00:17:53,690
run<font color="#CCCCCC"> so this is what we call</font><font color="#E5E5E5"> dynamic</font><font color="#CCCCCC"> äôt</font>

427
00:17:52,070 --> 00:17:55,309
you don't run a tool and have it

428
00:17:53,690 --> 00:17:56,960
generate<font color="#CCCCCC"> you're ahead of time code you</font>

429
00:17:55,309 --> 00:17:59,418
<font color="#E5E5E5">actually just run your java application</font>

430
00:17:56,960 --> 00:18:01,639
<font color="#E5E5E5">and so the first run creates your</font><font color="#CCCCCC"> IOT</font>

431
00:17:59,419 --> 00:18:04,570
code and saves<font color="#E5E5E5"> it away and later runs</font>

432
00:18:01,639 --> 00:18:07,399
can then reload that<font color="#E5E5E5"> and reuse that</font><font color="#CCCCCC"> and</font>

433
00:18:04,570 --> 00:18:09,320
so as we<font color="#E5E5E5"> look at the new world we have</font>

434
00:18:07,399 --> 00:18:11,510
to look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> ways of increasing the</font>

435
00:18:09,320 --> 00:18:14,240
<font color="#CCCCCC">ability to use this</font><font color="#E5E5E5"> especially in the</font>

436
00:18:11,510 --> 00:18:18,049
face<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that first run problem I</font>

437
00:18:14,240 --> 00:18:19,519
mentioned<font color="#CCCCCC"> earlier so one of the</font><font color="#E5E5E5"> other</font>

438
00:18:18,049 --> 00:18:22,399
areas<font color="#E5E5E5"> I've talked about has been</font>

439
00:18:19,519 --> 00:18:26,649
<font color="#E5E5E5">interpretive profiling getting rich data</font>

440
00:18:22,399 --> 00:18:29,059
out of<font color="#CCCCCC"> that and</font><font color="#E5E5E5"> so in open j9 we've</font>

441
00:18:26,649 --> 00:18:32,049
introduced<font color="#CCCCCC"> what we're calling J</font>

442
00:18:29,059 --> 00:18:35,149
profiling<font color="#E5E5E5"> which is a way</font><font color="#CCCCCC"> of putting</font>

443
00:18:32,049 --> 00:18:36,950
counters into compiled code but being

444
00:18:35,149 --> 00:18:38,750
<font color="#CCCCCC">very careful</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> how you</font><font color="#E5E5E5"> place them so</font>

445
00:18:36,950 --> 00:18:40,820
that there's minimal counters on hot

446
00:18:38,750 --> 00:18:42,289
paths the obvious<font color="#CCCCCC"> algorithm when you're</font>

447
00:18:40,820 --> 00:18:44,029
working on<font color="#CCCCCC"> something like this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> to put</font>

448
00:18:42,289 --> 00:18:45,529
a<font color="#E5E5E5"> counter on every basic block and</font><font color="#CCCCCC"> then</font>

449
00:18:44,029 --> 00:18:47,000
<font color="#E5E5E5">you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> just you know walk whatever</font>

450
00:18:45,529 --> 00:18:49,039
<font color="#CCCCCC">path you want</font><font color="#E5E5E5"> and see which one's the</font>

451
00:18:47,000 --> 00:18:51,409
<font color="#E5E5E5">hardest but then you're paying for a lot</font>

452
00:18:49,039 --> 00:18:54,379
<font color="#E5E5E5">about a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of counter updates on your</font>

453
00:18:51,409 --> 00:18:57,080
<font color="#CCCCCC">hot</font><font color="#E5E5E5"> paths which you don't want</font><font color="#CCCCCC"> to do so</font>

454
00:18:54,380 --> 00:18:59,539
there's a document in the open j9 repo

455
00:18:57,080 --> 00:19:01,549
<font color="#E5E5E5">that describes some of the details of</font>

456
00:18:59,539 --> 00:19:03,350
<font color="#E5E5E5">how this works but it's it's an</font>

457
00:19:01,549 --> 00:19:05,570
<font color="#CCCCCC">algorithm that</font><font color="#E5E5E5"> very carefully places</font>

458
00:19:03,350 --> 00:19:09,129
<font color="#E5E5E5">those counters and then patches them in</font>

459
00:19:05,570 --> 00:19:10,780
and<font color="#E5E5E5"> out</font><font color="#CCCCCC"> the cool thing about this is</font>

460
00:19:09,130 --> 00:19:13,750
<font color="#E5E5E5">it means that you don't</font><font color="#CCCCCC"> have to stay in</font>

461
00:19:10,780 --> 00:19:16,240
the interpreter as long<font color="#CCCCCC"> it means that</font>

462
00:19:13,750 --> 00:19:18,090
you can go to<font color="#E5E5E5"> jaded code earlier because</font>

463
00:19:16,240 --> 00:19:21,960
you can<font color="#E5E5E5"> still get</font><font color="#CCCCCC"> that high fidelity</font>

464
00:19:18,090 --> 00:19:24,189
<font color="#E5E5E5">profiling data</font><font color="#CCCCCC"> I look at that Gini code</font>

465
00:19:21,960 --> 00:19:26,980
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> can just</font><font color="#E5E5E5"> turn your counters</font>

466
00:19:24,190 --> 00:19:29,010
on or off<font color="#E5E5E5"> and strobe them to the level</font>

467
00:19:26,980 --> 00:19:31,840
that<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> the data you need</font>

468
00:19:29,010 --> 00:19:33,850
<font color="#CCCCCC">part of</font><font color="#E5E5E5"> this is in there's still more</font>

469
00:19:31,840 --> 00:19:38,919
development work on<font color="#E5E5E5"> this going on at the</font>

470
00:19:33,850 --> 00:19:43,090
project<font color="#E5E5E5"> and then the next one is an area</font>

471
00:19:38,920 --> 00:19:44,680
we've<font color="#CCCCCC"> been looking at</font><font color="#E5E5E5"> what if you know</font>

472
00:19:43,090 --> 00:19:46,000
we talked<font color="#E5E5E5"> about</font><font color="#CCCCCC"> micro-services earlier</font>

473
00:19:44,680 --> 00:19:48,640
what if you wanted to deploy an

474
00:19:46,000 --> 00:19:50,410
application<font color="#CCCCCC"> you know hundreds</font><font color="#E5E5E5"> of copies</font>

475
00:19:48,640 --> 00:19:52,510
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> application in containers</font>

476
00:19:50,410 --> 00:19:55,060
each container has a copy of<font color="#E5E5E5"> your</font>

477
00:19:52,510 --> 00:19:56,220
application<font color="#CCCCCC"> a copy of the VM and</font><font color="#E5E5E5"> a copy</font>

478
00:19:55,060 --> 00:19:59,649
of the<font color="#E5E5E5"> jiff</font>

479
00:19:56,220 --> 00:20:03,730
we've already got the<font color="#CCCCCC"> share classes</font>

480
00:19:59,650 --> 00:20:06,760
<font color="#E5E5E5">cache that helps you save on startup</font>

481
00:20:03,730 --> 00:20:08,290
time<font color="#CCCCCC"> but what if we were able to make it</font>

482
00:20:06,760 --> 00:20:09,730
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> could save on all your</font>

483
00:20:08,290 --> 00:20:11,470
compilations right instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> having</font>

484
00:20:09,730 --> 00:20:14,860
<font color="#E5E5E5">each of these applications</font><font color="#CCCCCC"> compiled</font>

485
00:20:11,470 --> 00:20:17,710
string and object<font color="#E5E5E5"> and</font><font color="#CCCCCC"> whatever else</font><font color="#E5E5E5"> over</font>

486
00:20:14,860 --> 00:20:21,280
and<font color="#E5E5E5"> over and over again</font><font color="#CCCCCC"> what if we made</font>

487
00:20:17,710 --> 00:20:23,620
this into some<font color="#CCCCCC"> kind of service this is</font>

488
00:20:21,280 --> 00:20:26,470
<font color="#CCCCCC">the next evolution of</font><font color="#E5E5E5"> our shared classes</font>

489
00:20:23,620 --> 00:20:28,419
<font color="#E5E5E5">cache technology and that's</font><font color="#CCCCCC"> to be able</font>

490
00:20:26,470 --> 00:20:30,550
<font color="#E5E5E5">to take the JIT</font><font color="#CCCCCC"> out of the</font><font color="#E5E5E5"> application</font>

491
00:20:28,420 --> 00:20:32,940
right<font color="#E5E5E5"> right off the bat you're gonna get</font>

492
00:20:30,550 --> 00:20:35,139
a fairly<font color="#E5E5E5"> significant footprint savings</font>

493
00:20:32,940 --> 00:20:38,580
<font color="#CCCCCC">probably about a hundred</font><font color="#E5E5E5"> Meg for the JIT</font>

494
00:20:35,140 --> 00:20:43,530
scratch space<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> eight Meg for</font><font color="#E5E5E5"> the</font>

495
00:20:38,580 --> 00:20:45,909
compiled code<font color="#E5E5E5"> or sorry the</font><font color="#CCCCCC"> the jits</font><font color="#E5E5E5"> dll</font>

496
00:20:43,530 --> 00:20:47,560
<font color="#E5E5E5">but you're also going to</font><font color="#CCCCCC"> probably get</font>

497
00:20:45,910 --> 00:20:49,240
<font color="#CCCCCC">startup wins</font><font color="#E5E5E5"> out of this right if you're</font>

498
00:20:47,560 --> 00:20:51,250
running<font color="#CCCCCC"> the same application over and</font>

499
00:20:49,240 --> 00:20:53,020
over and<font color="#CCCCCC"> over again when you go to</font>

500
00:20:51,250 --> 00:20:54,220
request to compile<font color="#E5E5E5"> there's no reason</font>

501
00:20:53,020 --> 00:20:57,490
that service can't give you back

502
00:20:54,220 --> 00:20:58,870
something it's<font color="#E5E5E5"> already compiled right</font>

503
00:20:57,490 --> 00:21:00,700
<font color="#E5E5E5">that you don't have to wait</font><font color="#CCCCCC"> for the</font>

504
00:20:58,870 --> 00:21:02,560
compile you might not even<font color="#E5E5E5"> have to wait</font>

505
00:21:00,700 --> 00:21:07,330
for lower tier compiles<font color="#E5E5E5"> you could jump</font>

506
00:21:02,560 --> 00:21:09,120
<font color="#E5E5E5">straighter straight into higher tiers</font><font color="#CCCCCC"> so</font>

507
00:21:07,330 --> 00:21:13,270
this is an area that<font color="#E5E5E5"> we're actively</font>

508
00:21:09,120 --> 00:21:16,239
investigating at the project<font color="#E5E5E5"> and just to</font>

509
00:21:13,270 --> 00:21:19,000
throw<font color="#CCCCCC"> this up</font><font color="#E5E5E5"> because we're pretty proud</font>

510
00:21:16,240 --> 00:21:22,750
<font color="#CCCCCC">of us I know what</font><font color="#E5E5E5"> said in the old world</font>

511
00:21:19,000 --> 00:21:25,540
we talked and look mostly at throughput

512
00:21:22,750 --> 00:21:27,190
that's not the whole<font color="#CCCCCC"> story with open j9</font>

513
00:21:25,540 --> 00:21:30,159
we've always worked<font color="#E5E5E5"> on trying to trade</font>

514
00:21:27,190 --> 00:21:31,870
<font color="#E5E5E5">off throughput</font><font color="#CCCCCC"> startup and footprint and</font>

515
00:21:30,160 --> 00:21:34,660
I think we've<font color="#E5E5E5"> done a pretty good job</font><font color="#CCCCCC"> so</font>

516
00:21:31,870 --> 00:21:37,659
<font color="#CCCCCC">if you check</font><font color="#E5E5E5"> out the</font><font color="#CCCCCC"> Eclipse open j9</font>

517
00:21:34,660 --> 00:21:39,670
builds and<font color="#E5E5E5"> you run</font><font color="#CCCCCC"> with X shared classes</font>

518
00:21:37,660 --> 00:21:41,680
we have you know some descriptions<font color="#E5E5E5"> of</font>

519
00:21:39,670 --> 00:21:44,710
running day trader which<font color="#E5E5E5"> show</font><font color="#CCCCCC"> that we</font>

520
00:21:41,680 --> 00:21:47,200
started<font color="#E5E5E5"> 35 percent quicker than a</font>

521
00:21:44,710 --> 00:21:50,590
vanilla<font color="#E5E5E5"> open JDK</font><font color="#CCCCCC"> and we used about half</font>

522
00:21:47,200 --> 00:21:53,560
<font color="#CCCCCC">the memory even after a lot</font><font color="#E5E5E5"> of load so</font>

523
00:21:50,590 --> 00:21:55,360
if you're interested<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> you know</font>

524
00:21:53,560 --> 00:21:58,659
check out<font color="#E5E5E5"> the link there</font><font color="#CCCCCC"> that talks</font>

525
00:21:55,360 --> 00:22:01,810
about the description of this<font color="#E5E5E5"> or go to</font>

526
00:21:58,660 --> 00:22:05,050
the adopt open<font color="#E5E5E5"> JDK project download it</font>

527
00:22:01,810 --> 00:22:09,040
<font color="#CCCCCC">yourself so has anybody heard of</font><font color="#E5E5E5"> the</font>

528
00:22:05,050 --> 00:22:11,320
<font color="#E5E5E5">adopt open JDK project</font><font color="#CCCCCC"> ok so some people</font>

529
00:22:09,040 --> 00:22:14,320
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is sort of the</font><font color="#E5E5E5"> best place</font><font color="#CCCCCC"> to get</font>

530
00:22:11,320 --> 00:22:17,560
<font color="#E5E5E5">your open JDK builds they build vanilla</font>

531
00:22:14,320 --> 00:22:20,919
<font color="#E5E5E5">open JDK and they build open JDK with</font>

532
00:22:17,560 --> 00:22:23,639
<font color="#CCCCCC">eclipse open j9 they're building the</font>

533
00:22:20,920 --> 00:22:26,110
same code that<font color="#CCCCCC"> you get out of open</font><font color="#E5E5E5"> JDK</font>

534
00:22:23,640 --> 00:22:28,000
<font color="#CCCCCC">they're doing their best</font><font color="#E5E5E5"> to run J CK's</font>

535
00:22:26,110 --> 00:22:30,129
on it to run testing on it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure</font>

536
00:22:28,000 --> 00:22:33,010
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you're getting a valid build</font><font color="#E5E5E5"> that's</font>

537
00:22:30,130 --> 00:22:36,610
not mystery meat<font color="#CCCCCC"> so you know check this</font>

538
00:22:33,010 --> 00:22:42,670
out<font color="#CCCCCC"> it's a great place to get builds and</font>

539
00:22:36,610 --> 00:22:44,649
then of course<font color="#E5E5E5"> working</font><font color="#CCCCCC"> for open</font><font color="#E5E5E5"> j9 check</font>

540
00:22:42,670 --> 00:22:47,320
out open j9 you know download the builds

541
00:22:44,650 --> 00:22:49,360
from adopt run your application<font color="#E5E5E5"> let us</font>

542
00:22:47,320 --> 00:22:51,460
<font color="#E5E5E5">know you know we want to hear about</font><font color="#CCCCCC"> your</font>

543
00:22:49,360 --> 00:22:53,500
successes<font color="#CCCCCC"> we also want to hear</font><font color="#E5E5E5"> about</font>

544
00:22:51,460 --> 00:22:55,570
<font color="#E5E5E5">your failures and your amazing results</font>

545
00:22:53,500 --> 00:22:58,390
<font color="#CCCCCC">with it we're gonna keep hacking</font><font color="#E5E5E5"> on it</font>

546
00:22:55,570 --> 00:23:00,879
<font color="#E5E5E5">to improve it</font><font color="#CCCCCC"> so you know join us meet</font>

547
00:22:58,390 --> 00:23:03,910
us at the community<font color="#E5E5E5"> on github or you can</font>

548
00:23:00,880 --> 00:23:05,440
join<font color="#CCCCCC"> our slack you know</font><font color="#E5E5E5"> gauging from the</font>

549
00:23:03,910 --> 00:23:10,690
room earlier this morning slack is not

550
00:23:05,440 --> 00:23:11,920
<font color="#E5E5E5">well loved but and at this point I think</font>

551
00:23:10,690 --> 00:23:16,680
<font color="#CCCCCC">I've finished with about a</font><font color="#E5E5E5"> minute to</font>

552
00:23:11,920 --> 00:23:16,680
spare so maybe one question<font color="#E5E5E5"> yep</font>

553
00:23:43,970 --> 00:23:49,899
so we're still early<font color="#CCCCCC"> days on the jet as</font>

554
00:23:46,639 --> 00:23:52,610
a service we're still prototyping<font color="#CCCCCC"> that</font>

555
00:23:49,899 --> 00:23:54,739
we've seen you<font color="#CCCCCC"> know with our experience</font>

556
00:23:52,610 --> 00:23:58,250
<font color="#E5E5E5">with our</font><font color="#CCCCCC"> shared classes</font><font color="#E5E5E5"> cache technology</font>

557
00:23:54,740 --> 00:24:04,190
that the<font color="#CCCCCC"> äôt code being</font><font color="#E5E5E5"> able to store</font>

558
00:23:58,250 --> 00:24:06,500
<font color="#E5E5E5">that plus the the</font><font color="#CCCCCC"> inter the profiling</font>

559
00:24:04,190 --> 00:24:08,149
<font color="#E5E5E5">data and some</font><font color="#CCCCCC"> hit hints</font><font color="#E5E5E5"> to the jet has</font>

560
00:24:06,500 --> 00:24:10,490
been<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> good</font>

561
00:24:08,149 --> 00:24:13,699
I expect that experience to<font color="#CCCCCC"> continue to</font>

562
00:24:10,490 --> 00:24:17,330
hold across<font color="#E5E5E5"> most applications and as</font>

563
00:24:13,700 --> 00:24:18,799
with anything<font color="#E5E5E5"> there's probably there's</font>

564
00:24:17,330 --> 00:24:21,799
probably<font color="#CCCCCC"> a balancing point some</font>

565
00:24:18,799 --> 00:24:24,740
applications might be very sensitive<font color="#E5E5E5"> to</font>

566
00:24:21,799 --> 00:24:26,480
<font color="#CCCCCC">the</font><font color="#E5E5E5"> data they're running</font><font color="#CCCCCC"> but most are</font>

567
00:24:24,740 --> 00:24:32,050
going<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> know benefit from this kind</font>

568
00:24:26,480 --> 00:24:35,359
<font color="#E5E5E5">of approach thanks everybody</font>

569
00:24:32,050 --> 00:24:35,359
[Applause]

