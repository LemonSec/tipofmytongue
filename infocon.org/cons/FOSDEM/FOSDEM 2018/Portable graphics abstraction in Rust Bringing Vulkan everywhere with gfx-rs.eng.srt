1
00:00:26,760 --> 00:01:08,850
okay so we're not gonna sit<font color="#E5E5E5"> here</font><font color="#CCCCCC"> so I'm</font>

2
00:00:29,470 --> 00:01:11,890
gonna be there yep the keys work so

3
00:01:08,850 --> 00:01:14,890
hello<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> I'm medium also a</font>

4
00:01:11,890 --> 00:01:17,200
graphics engineer at Mozilla I work in

5
00:01:14,890 --> 00:01:20,410
Firefox<font color="#E5E5E5"> web browser</font><font color="#CCCCCC"> and before that</font><font color="#E5E5E5"> I</font>

6
00:01:17,200 --> 00:01:23,230
worked in a game<font color="#E5E5E5"> dev industry which</font>

7
00:01:20,410 --> 00:01:26,470
inspired<font color="#CCCCCC"> me to start</font><font color="#E5E5E5"> writing a graphics</font>

8
00:01:23,230 --> 00:01:30,910
abstraction layer in rust<font color="#E5E5E5"> and this is</font>

9
00:01:26,470 --> 00:01:32,410
<font color="#CCCCCC">Markus</font><font color="#E5E5E5"> who joined us recently to rewrite</font>

10
00:01:30,910 --> 00:01:38,110
<font color="#CCCCCC">it and that's what we are</font><font color="#E5E5E5"> going to talk</font>

11
00:01:32,410 --> 00:01:42,520
<font color="#E5E5E5">about the idea is to have a single</font>

12
00:01:38,110 --> 00:01:46,060
<font color="#E5E5E5">abstraction layer to run on all the</font>

13
00:01:42,520 --> 00:01:49,420
platforms that<font color="#E5E5E5"> we have unfortunately the</font>

14
00:01:46,060 --> 00:01:53,020
graphics API<font color="#E5E5E5"> have been branched out</font><font color="#CCCCCC"> we</font>

15
00:01:49,420 --> 00:01:55,840
have Microsoft<font color="#E5E5E5"> pushing the DirectX 12 in</font>

16
00:01:53,020 --> 00:02:00,119
the windows ecosystem<font color="#E5E5E5"> and we have Apple</font>

17
00:01:55,840 --> 00:02:02,620
pushing for metal<font color="#E5E5E5"> everything else is</font>

18
00:02:00,120 --> 00:02:04,840
adopting<font color="#E5E5E5"> Vulcan quite successfully</font>

19
00:02:02,620 --> 00:02:09,700
<font color="#E5E5E5">including the Android the most popular</font>

20
00:02:04,840 --> 00:02:12,190
ability system and OpenGL is still alive

21
00:02:09,699 --> 00:02:14,170
as well<font color="#E5E5E5"> and we want all</font><font color="#CCCCCC"> of those to be</font>

22
00:02:12,190 --> 00:02:18,480
<font color="#CCCCCC">available through a single interface</font><font color="#E5E5E5"> in</font>

23
00:02:14,170 --> 00:02:18,480
rust<font color="#E5E5E5"> that is hopefully safe and fast</font>

24
00:02:19,600 --> 00:02:27,859
we started in 2014<font color="#E5E5E5"> and the legend is we</font>

25
00:02:25,880 --> 00:02:30,230
had three threats at the beginning and

26
00:02:27,860 --> 00:02:33,200
then we were fast tracking through the

27
00:02:30,230 --> 00:02:36,560
evolution of the<font color="#E5E5E5"> api's as the native API</font>

28
00:02:33,200 --> 00:02:39,320
did so first we got<font color="#CCCCCC"> Cameron buffers we</font>

29
00:02:36,560 --> 00:02:41,860
got rid<font color="#E5E5E5"> of threads and then we followed</font>

30
00:02:39,320 --> 00:02:45,109
with resource<font color="#CCCCCC"> fuse pipeline</font><font color="#E5E5E5"> States</font>

31
00:02:41,860 --> 00:02:49,670
<font color="#CCCCCC">eventually</font><font color="#E5E5E5"> getting</font><font color="#CCCCCC"> this VD</font><font color="#E5E5E5"> 11 and metal</font>

32
00:02:45,110 --> 00:02:52,190
back ends<font color="#CCCCCC"> and then somewhere around</font><font color="#E5E5E5"> 2017</font>

33
00:02:49,670 --> 00:02:54,920
<font color="#E5E5E5">when we started first talks about</font>

34
00:02:52,190 --> 00:02:58,430
integrating<font color="#CCCCCC"> into web render it appeared</font>

35
00:02:54,920 --> 00:03:01,929
<font color="#CCCCCC">to us that even though we already had</font>

36
00:02:58,430 --> 00:03:04,970
the core layer split out of the

37
00:03:01,930 --> 00:03:07,730
higher-level<font color="#E5E5E5"> rendering we still weren't</font>

38
00:03:04,970 --> 00:03:11,090
<font color="#E5E5E5">zero-cost enough so we decided to go</font>

39
00:03:07,730 --> 00:03:14,079
lower level we decided to implement<font color="#E5E5E5"> the</font>

40
00:03:11,090 --> 00:03:22,040
core to be completely<font color="#E5E5E5"> zero cost and</font>

41
00:03:14,080 --> 00:03:27,410
that's where Marcus comes in this is the

42
00:03:22,040 --> 00:03:29,870
main road map of<font color="#E5E5E5"> our work and if you are</font>

43
00:03:27,410 --> 00:03:32,630
taking<font color="#CCCCCC"> one thing from our top and that</font>

44
00:03:29,870 --> 00:03:34,730
should be this slide I believe<font color="#E5E5E5"> at the</font>

45
00:03:32,630 --> 00:03:37,220
center you<font color="#CCCCCC"> see</font><font color="#E5E5E5"> hardware abstraction</font>

46
00:03:34,730 --> 00:03:38,450
layer that's our new core that's the

47
00:03:37,220 --> 00:03:43,130
name of<font color="#E5E5E5"> the new</font><font color="#CCCCCC"> core</font>

48
00:03:38,450 --> 00:03:48,500
it's Vulcan like rust<font color="#E5E5E5"> API very</font><font color="#CCCCCC"> low-level</font>

49
00:03:43,130 --> 00:03:50,720
<font color="#E5E5E5">quite unsafe</font><font color="#CCCCCC"> that different graphics</font>

50
00:03:48,500 --> 00:03:53,900
backends implement<font color="#E5E5E5"> including Vulcan</font>

51
00:03:50,720 --> 00:03:56,930
metal<font color="#CCCCCC"> d3 12</font><font color="#E5E5E5"> and OpenGL</font><font color="#CCCCCC"> these are the</font>

52
00:03:53,900 --> 00:03:59,300
<font color="#E5E5E5">backends</font><font color="#CCCCCC"> that we already have now and we</font>

53
00:03:56,930 --> 00:04:02,930
<font color="#CCCCCC">are getting</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> 3G 11 soon enough as</font>

54
00:03:59,300 --> 00:04:05,810
well<font color="#CCCCCC"> the clients of</font><font color="#E5E5E5"> the hardware</font>

55
00:04:02,930 --> 00:04:08,570
abstraction layer are many aside<font color="#E5E5E5"> from</font>

56
00:04:05,810 --> 00:04:10,010
the user<font color="#E5E5E5"> apps we have the Vulcan</font>

57
00:04:08,570 --> 00:04:12,470
<font color="#E5E5E5">portability layer which we are talking</font>

58
00:04:10,010 --> 00:04:14,899
<font color="#CCCCCC">about a little</font><font color="#E5E5E5"> bit later we have the</font>

59
00:04:12,470 --> 00:04:17,779
warden test framework to ensure<font color="#E5E5E5"> no</font>

60
00:04:14,900 --> 00:04:20,810
regressions in the graphics<font color="#E5E5E5"> tests and we</font>

61
00:04:17,779 --> 00:04:23,830
have a web GPU prototype based<font color="#E5E5E5"> on servo</font>

62
00:04:20,810 --> 00:04:23,830
<font color="#E5E5E5">that's using that</font>

63
00:04:25,190 --> 00:04:30,820
little bit more<font color="#CCCCCC"> about the warden test</font>

64
00:04:27,560 --> 00:04:34,420
framework<font color="#E5E5E5"> it consists of three</font><font color="#CCCCCC"> parts</font>

65
00:04:30,820 --> 00:04:38,090
<font color="#E5E5E5">first one is we are able to describe</font>

66
00:04:34,420 --> 00:04:42,320
<font color="#CCCCCC">graphics resources and passes in</font>

67
00:04:38,090 --> 00:04:45,950
readable<font color="#CCCCCC"> source which we use the rusty</font>

68
00:04:42,320 --> 00:04:48,800
object notation for it<font color="#CCCCCC"> says here's my</font>

69
00:04:45,950 --> 00:04:51,080
images buffers<font color="#E5E5E5"> here's what I'm going</font><font color="#CCCCCC"> to</font>

70
00:04:48,800 --> 00:04:54,950
do this with them<font color="#E5E5E5"> in the following</font>

71
00:04:51,080 --> 00:04:57,500
passes and then we have we can load it

72
00:04:54,950 --> 00:04:59,630
all<font color="#E5E5E5"> with a particular graphics back-end</font>

73
00:04:57,500 --> 00:05:02,240
so that it instant<font color="#E5E5E5"> she eats the</font>

74
00:04:59,630 --> 00:05:04,570
resources on the<font color="#E5E5E5"> GPU and creates the</font>

75
00:05:02,240 --> 00:05:06,950
<font color="#CCCCCC">common buffers</font><font color="#E5E5E5"> to implement passes and</font>

76
00:05:04,570 --> 00:05:10,250
then we have a breath test framework

77
00:05:06,950 --> 00:05:14,960
which<font color="#E5E5E5"> has very simple</font><font color="#CCCCCC"> ref that's defined</font>

78
00:05:10,250 --> 00:05:16,820
and it<font color="#E5E5E5"> runs the graphics passes on the</font>

79
00:05:14,960 --> 00:05:21,229
specific<font color="#E5E5E5"> backends compares the</font>

80
00:05:16,820 --> 00:05:23,570
expectations with the<font color="#E5E5E5"> tests this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> an</font>

81
00:05:21,230 --> 00:05:26,440
example of the resources<font color="#E5E5E5"> we have an</font>

82
00:05:23,570 --> 00:05:29,900
image with the specified format and

83
00:05:26,440 --> 00:05:33,050
dimensions we<font color="#CCCCCC"> have a render pass</font><font color="#E5E5E5"> with</font>

84
00:05:29,900 --> 00:05:38,570
one attachment<font color="#CCCCCC"> and once a pass</font><font color="#E5E5E5"> just as</font>

85
00:05:33,050 --> 00:05:40,360
an example<font color="#CCCCCC"> of roughly how it looks this</font>

86
00:05:38,570 --> 00:05:43,010
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> contents of the pass we have</font><font color="#CCCCCC"> the</font>

87
00:05:40,360 --> 00:05:49,360
<font color="#CCCCCC">setting the viewports the pipeline and</font>

88
00:05:43,010 --> 00:05:49,360
drawing a single single triangle<font color="#E5E5E5"> here</font>

89
00:06:16,910 --> 00:06:24,270
okay so then why we want to<font color="#E5E5E5"> actually use</font>

90
00:06:20,340 --> 00:06:26,489
rust<font color="#E5E5E5"> instead of for example C++ there</font>

91
00:06:24,270 --> 00:06:31,219
<font color="#E5E5E5">are a few nice bits of rust and compared</font>

92
00:06:26,490 --> 00:06:33,360
<font color="#E5E5E5">to the basic concurrency</font><font color="#CCCCCC"> all Const</font><font color="#E5E5E5"> new</font>

93
00:06:31,220 --> 00:06:37,980
features like<font color="#CCCCCC"> pattern matching and</font>

94
00:06:33,360 --> 00:06:41,090
they're sensing which basically tells

95
00:06:37,980 --> 00:06:43,560
<font color="#E5E5E5">you that every</font><font color="#CCCCCC"> object in our</font><font color="#E5E5E5"> API is</font>

96
00:06:41,090 --> 00:06:47,280
sensing so you can<font color="#E5E5E5"> access it from all</font>

97
00:06:43,560 --> 00:06:51,720
threats and concurrently<font color="#E5E5E5"> and there's</font>

98
00:06:47,280 --> 00:06:55,890
also<font color="#CCCCCC"> immutability</font><font color="#E5E5E5"> which we use</font><font color="#CCCCCC"> to say</font>

99
00:06:51,720 --> 00:06:56,670
for<font color="#CCCCCC"> example you can change this object</font>

100
00:06:55,890 --> 00:07:00,349
or you can't

101
00:06:56,670 --> 00:07:06,090
and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> also encodes if you need to</font>

102
00:07:00,350 --> 00:07:08,210
externally enforce single access because

103
00:07:06,090 --> 00:07:12,479
for example<font color="#E5E5E5"> some objects can only be</font>

104
00:07:08,210 --> 00:07:14,849
<font color="#E5E5E5">accessed on one thread at one time so if</font>

105
00:07:12,480 --> 00:07:18,680
you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> if you see mutable access you</font>

106
00:07:14,850 --> 00:07:18,680
usually<font color="#E5E5E5"> indicates that you need to</font>

107
00:07:18,740 --> 00:07:26,280
<font color="#E5E5E5">externally synchronize</font><font color="#CCCCCC"> your object then</font>

108
00:07:22,100 --> 00:07:29,280
traits and associated types which we use

109
00:07:26,280 --> 00:07:32,549
<font color="#E5E5E5">quite heavily which is each you will</font><font color="#CCCCCC"> see</font>

110
00:07:29,280 --> 00:07:36,210
later on<font color="#CCCCCC"> and we split all the things</font>

111
00:07:32,550 --> 00:07:39,030
<font color="#CCCCCC">into multiple repositories</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font>

112
00:07:36,210 --> 00:07:41,219
one repository<font color="#E5E5E5"> is the hardware exception</font>

113
00:07:39,030 --> 00:07:43,530
layer and then for each<font color="#E5E5E5"> back-end we have</font>

114
00:07:41,220 --> 00:07:47,420
an additional repository<font color="#E5E5E5"> and for</font><font color="#CCCCCC"> each</font>

115
00:07:43,530 --> 00:07:50,820
yeah<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> great</font>

116
00:07:47,420 --> 00:07:54,510
so what we are<font color="#CCCCCC"> currently missing</font><font color="#E5E5E5"> is for</font>

117
00:07:50,820 --> 00:07:57,120
<font color="#CCCCCC">example</font><font color="#E5E5E5"> non-exhaustive enums which are</font>

118
00:07:54,510 --> 00:08:00,150
basically<font color="#CCCCCC"> required as we also provide an</font>

119
00:07:57,120 --> 00:08:03,390
higher level<font color="#E5E5E5"> abstraction for this work</font>

120
00:08:00,150 --> 00:08:05,320
<font color="#E5E5E5">compatibility implementation and there</font>

121
00:08:03,390 --> 00:08:10,120
are cases<font color="#E5E5E5"> where</font>

122
00:08:05,320 --> 00:08:12,310
<font color="#CCCCCC">Volken could return as enum values which</font>

123
00:08:10,120 --> 00:08:15,450
may<font color="#E5E5E5"> not really know at the current time</font>

124
00:08:12,310 --> 00:08:19,150
<font color="#E5E5E5">of implementing which could come from us</font>

125
00:08:15,450 --> 00:08:22,599
<font color="#CCCCCC">future</font><font color="#E5E5E5"> driver which</font><font color="#CCCCCC"> returned</font><font color="#E5E5E5"> us this new</font>

126
00:08:19,150 --> 00:08:25,870
in eval use then struct alignments<font color="#E5E5E5"> and</font>

127
00:08:22,600 --> 00:08:28,780
shaders<font color="#E5E5E5"> which it happens every</font><font color="#CCCCCC"> day that</font>

128
00:08:25,870 --> 00:08:32,080
we misaligned some shader struct because

129
00:08:28,780 --> 00:08:35,079
<font color="#E5E5E5">I'm just one page of Vulcan</font>

130
00:08:32,080 --> 00:08:37,570
specification which basically says how

131
00:08:35,080 --> 00:08:41,590
<font color="#E5E5E5">you need to align your fields and it's</font>

132
00:08:37,570 --> 00:08:45,010
usually you do something wrong there

133
00:08:41,590 --> 00:08:49,690
then<font color="#CCCCCC"> Constantine Eric's</font><font color="#E5E5E5"> which would give</font>

134
00:08:45,010 --> 00:08:53,380
us<font color="#E5E5E5"> the</font><font color="#CCCCCC"> possibility to use arrays</font><font color="#E5E5E5"> fixed</font>

135
00:08:49,690 --> 00:08:56,710
<font color="#CCCCCC">size</font><font color="#E5E5E5"> areas more often in the library</font>

136
00:08:53,380 --> 00:08:59,250
interface<font color="#E5E5E5"> we basically expose a quite</font>

137
00:08:56,710 --> 00:09:02,770
generic interface using<font color="#CCCCCC"> into iterator</font>

138
00:08:59,250 --> 00:09:04,810
but<font color="#CCCCCC"> yeah fixed sized</font>

139
00:09:02,770 --> 00:09:07,890
<font color="#E5E5E5">errors would help quite a lot for the</font>

140
00:09:04,810 --> 00:09:10,449
user side<font color="#CCCCCC"> to looks a bit better and</font>

141
00:09:07,890 --> 00:09:12,310
<font color="#E5E5E5">exclusive cargo futures and at the</font>

142
00:09:10,450 --> 00:09:16,120
moment<font color="#CCCCCC"> you could something</font><font color="#E5E5E5"> could do</font>

143
00:09:12,310 --> 00:09:20,260
something<font color="#CCCCCC"> like I want dx12 and will</font><font color="#E5E5E5"> can</font>

144
00:09:16,120 --> 00:09:22,930
<font color="#E5E5E5">to run at the</font><font color="#CCCCCC"> same time</font><font color="#E5E5E5"> somehow but it</font>

145
00:09:20,260 --> 00:09:29,230
usually<font color="#E5E5E5"> will mess up here and you</font>

146
00:09:22,930 --> 00:09:31,150
usually only<font color="#CCCCCC"> want and dx12</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> Vulcan so</font>

147
00:09:29,230 --> 00:09:34,300
the packet right is our main interface

148
00:09:31,150 --> 00:09:36,220
<font color="#E5E5E5">it's one large</font><font color="#CCCCCC"> straight you have</font><font color="#E5E5E5"> to in</font>

149
00:09:34,300 --> 00:09:39,810
<font color="#E5E5E5">to have to</font><font color="#CCCCCC"> implement if you want to</font>

150
00:09:36,220 --> 00:09:42,790
implement<font color="#E5E5E5"> a back-end we basically</font>

151
00:09:39,810 --> 00:09:47,290
divided into the special<font color="#E5E5E5"> objects like</font>

152
00:09:42,790 --> 00:09:50,890
the device or a command Q which you can

153
00:09:47,290 --> 00:09:55,209
call functions<font color="#E5E5E5"> on and the basic</font>

154
00:09:50,890 --> 00:09:58,030
resources<font color="#E5E5E5"> like shaders above image which</font>

155
00:09:55,210 --> 00:10:03,910
you<font color="#CCCCCC"> usually just</font><font color="#E5E5E5"> pass around and create</font>

156
00:09:58,030 --> 00:10:09,449
and delete so for the<font color="#CCCCCC"> roadmap 2018</font><font color="#E5E5E5"> and</font>

157
00:10:03,910 --> 00:10:11,920
we would like<font color="#CCCCCC"> to become Mozilla project</font>

158
00:10:09,450 --> 00:10:15,250
<font color="#E5E5E5">because we want to integrate into web</font>

159
00:10:11,920 --> 00:10:18,459
render and also into the<font color="#E5E5E5"> web GPU part</font>

160
00:10:15,250 --> 00:10:22,570
which will<font color="#CCCCCC"> Dimitri will talk</font><font color="#E5E5E5"> about</font>

161
00:10:18,460 --> 00:10:26,350
and one side project is<font color="#E5E5E5"> working</font>

162
00:10:22,570 --> 00:10:31,480
<font color="#E5E5E5">portability it's an initiative from</font>

163
00:10:26,350 --> 00:10:35,740
Vulcan<font color="#E5E5E5"> from Kronos</font><font color="#CCCCCC"> we are they try to do</font>

164
00:10:31,480 --> 00:10:39,130
all the<font color="#CCCCCC"> three three backends</font><font color="#E5E5E5"> work on</font>

165
00:10:35,740 --> 00:10:42,339
<font color="#CCCCCC">dx12</font><font color="#E5E5E5"> and metal and provide one</font><font color="#CCCCCC"> RP Eve</font>

166
00:10:39,130 --> 00:10:47,200
<font color="#CCCCCC">subsets from the work and</font><font color="#E5E5E5"> a PE which can</font>

167
00:10:42,339 --> 00:10:49,510
map to<font color="#CCCCCC"> all these</font><font color="#E5E5E5"> three backends and our</font>

168
00:10:47,200 --> 00:10:52,180
goal<font color="#CCCCCC"> is to implement the full</font>

169
00:10:49,510 --> 00:10:54,910
compatibility<font color="#CCCCCC"> layer using our hardware</font>

170
00:10:52,180 --> 00:10:57,370
abstraction layer and we currently can

171
00:10:54,910 --> 00:11:00,779
already pass a few examples like

172
00:10:57,370 --> 00:11:04,779
<font color="#E5E5E5">triangles or pipeline example from</font>

173
00:11:00,779 --> 00:11:09,100
common samples from working samples<font color="#E5E5E5"> and</font>

174
00:11:04,779 --> 00:11:12,820
we are<font color="#E5E5E5"> aiming at implementing or hooking</font>

175
00:11:09,100 --> 00:11:15,790
<font color="#E5E5E5">up the Vulcan conformance test we can</font>

176
00:11:12,820 --> 00:11:19,720
<font color="#E5E5E5">try to hook up the</font><font color="#CCCCCC"> wolken conformance</font>

177
00:11:15,790 --> 00:11:23,740
test suit and run run<font color="#E5E5E5"> the tests against</font>

178
00:11:19,720 --> 00:11:26,709
our<font color="#CCCCCC"> hardware exception layer</font><font color="#E5E5E5"> and that's</font>

179
00:11:23,740 --> 00:11:28,540
<font color="#E5E5E5">how it looks from our side we basically</font>

180
00:11:26,709 --> 00:11:31,900
have our Hardware extraction layer on

181
00:11:28,540 --> 00:11:33,279
the<font color="#CCCCCC"> bottom which is</font><font color="#E5E5E5"> to DFARS side and on</font>

182
00:11:31,900 --> 00:11:38,980
the top<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> the portability layer</font>

183
00:11:33,279 --> 00:11:41,770
and you can interface it using driver<font color="#E5E5E5"> in</font>

184
00:11:38,980 --> 00:11:43,480
the implementation<font color="#E5E5E5"> or using a</font><font color="#CCCCCC"> static</font>

185
00:11:41,770 --> 00:11:45,970
library<font color="#E5E5E5"> and if you don't want to</font>

186
00:11:43,480 --> 00:11:48,330
directly link it link it from<font color="#CCCCCC"> sea</font>

187
00:11:45,970 --> 00:11:48,330
library

188
00:11:51,310 --> 00:12:06,300
<font color="#E5E5E5">a little bit more information about what</font>

189
00:12:00,520 --> 00:12:10,300
web GPU is it's a w3c<font color="#E5E5E5"> working group</font>

190
00:12:06,300 --> 00:12:12,729
which<font color="#E5E5E5"> Microsoft Apple Mozilla and Google</font>

191
00:12:10,300 --> 00:12:15,490
are part of and as well as a lot<font color="#E5E5E5"> of</font>

192
00:12:12,730 --> 00:12:20,920
independent actors<font color="#E5E5E5"> that is trying</font><font color="#CCCCCC"> to</font>

193
00:12:15,490 --> 00:12:23,830
<font color="#E5E5E5">design a new API to provide newer lower</font>

194
00:12:20,920 --> 00:12:26,849
level concepts<font color="#CCCCCC"> onto the web for faster</font>

195
00:12:23,830 --> 00:12:29,230
<font color="#E5E5E5">interactive applications on the web and</font>

196
00:12:26,850 --> 00:12:33,130
there's been a lot of discussions<font color="#E5E5E5"> over</font>

197
00:12:29,230 --> 00:12:35,770
what the<font color="#E5E5E5"> next-gen API is gonna be in we</font>

198
00:12:33,130 --> 00:12:40,650
I'm a part of the group<font color="#E5E5E5"> and we don't</font>

199
00:12:35,770 --> 00:12:43,449
seem<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a lot to agree on so far</font>

200
00:12:40,650 --> 00:12:46,689
<font color="#CCCCCC">everyone is sort</font><font color="#E5E5E5"> of pushing</font><font color="#CCCCCC"> in a</font>

201
00:12:43,450 --> 00:12:50,020
different direction<font color="#CCCCCC"> so our position</font>

202
00:12:46,690 --> 00:12:52,060
<font color="#E5E5E5">there is to have something either</font>

203
00:12:50,020 --> 00:12:58,089
<font color="#E5E5E5">exactly like Vulcan or very close to</font>

204
00:12:52,060 --> 00:13:02,290
Vulcan<font color="#CCCCCC"> and based on that we developed a</font>

205
00:12:58,089 --> 00:13:09,010
prototype<font color="#E5E5E5"> that is using servo but adding</font>

206
00:13:02,290 --> 00:13:11,349
<font color="#CCCCCC">a new web IDL based API that has</font>

207
00:13:09,010 --> 00:13:16,330
<font color="#E5E5E5">basically Vulcan calls in it so you can</font>

208
00:13:11,350 --> 00:13:18,970
I go that low level and create<font color="#CCCCCC"> your</font>

209
00:13:16,330 --> 00:13:22,589
pipeline barriers and descriptors on the

210
00:13:18,970 --> 00:13:25,570
web<font color="#E5E5E5"> using javascript or web assembly and</font>

211
00:13:22,589 --> 00:13:27,610
run it in the<font color="#E5E5E5"> browsers which in the</font>

212
00:13:25,570 --> 00:13:33,220
browser which<font color="#CCCCCC"> is currently a</font><font color="#E5E5E5"> very</font>

213
00:13:27,610 --> 00:13:37,260
specific<font color="#CCCCCC"> Fork of servo</font><font color="#E5E5E5"> our future plans</font>

214
00:13:33,220 --> 00:13:42,580
<font color="#E5E5E5">with the web GPU include trying to get a</font>

215
00:13:37,260 --> 00:13:45,850
native application<font color="#CCCCCC"> France compiling</font><font color="#E5E5E5"> to</font>

216
00:13:42,580 --> 00:13:47,830
the web using<font color="#CCCCCC"> web assembly</font><font color="#E5E5E5"> so a native</font>

217
00:13:45,850 --> 00:13:50,110
application using<font color="#CCCCCC"> volca to be compiled</font>

218
00:13:47,830 --> 00:13:52,000
<font color="#CCCCCC">using</font><font color="#E5E5E5"> web assembly for</font><font color="#CCCCCC"> the web on the</font>

219
00:13:50,110 --> 00:13:54,580
browser<font color="#E5E5E5"> so that it just runs in the</font>

220
00:13:52,000 --> 00:13:58,060
browser<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that you don't need to learn</font>

221
00:13:54,580 --> 00:14:00,420
a<font color="#E5E5E5"> new API that</font><font color="#CCCCCC"> you can just use</font><font color="#E5E5E5"> Vulcan</font>

222
00:13:58,060 --> 00:14:00,420
on the web

223
00:14:03,180 --> 00:14:07,239
now<font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> more about the</font>

224
00:14:05,529 --> 00:14:09,730
<font color="#CCCCCC">ecosystem that we have and its history</font>

225
00:14:07,240 --> 00:14:12,490
<font color="#CCCCCC">seems to</font><font color="#E5E5E5"> have a lot</font><font color="#CCCCCC"> more time left that</font>

226
00:14:09,730 --> 00:14:15,699
we're gonna<font color="#E5E5E5"> start on each of them</font>

227
00:14:12,490 --> 00:14:18,759
closely<font color="#CCCCCC"> there is a few engines</font><font color="#E5E5E5"> in rust</font>

228
00:14:15,699 --> 00:14:22,748
<font color="#E5E5E5">at the moment none</font><font color="#CCCCCC"> of them is major</font>

229
00:14:18,759 --> 00:14:24,249
enough<font color="#CCCCCC"> but they're very promising namely</font>

230
00:14:22,749 --> 00:14:28,569
<font color="#E5E5E5">good game easy</font>

231
00:14:24,249 --> 00:14:32,579
amethyst<font color="#E5E5E5"> and three</font><font color="#CCCCCC"> RS all of those use</font>

232
00:14:28,569 --> 00:14:34,809
the older<font color="#CCCCCC"> Jeff XR s at the moment where</font>

233
00:14:32,579 --> 00:14:36,550
amethyst is already transitioning

234
00:14:34,809 --> 00:14:40,149
<font color="#CCCCCC">towards the new hardware</font><font color="#E5E5E5"> abstraction</font>

235
00:14:36,550 --> 00:14:44,019
layer it's extremely promising to us

236
00:14:40,149 --> 00:14:45,129
since they not only<font color="#E5E5E5"> are</font><font color="#CCCCCC"> poured</font><font color="#E5E5E5"> into the</font>

237
00:14:44,019 --> 00:14:48,129
hardware abstraction layer<font color="#E5E5E5"> they're</font>

238
00:14:45,129 --> 00:14:51,189
<font color="#E5E5E5">bringing bringing</font><font color="#CCCCCC"> the higher levels</font><font color="#E5E5E5"> for</font>

239
00:14:48,129 --> 00:14:54,309
<font color="#CCCCCC">us to use</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> a library that</font>

240
00:14:51,189 --> 00:14:57,430
<font color="#E5E5E5">manages memory for you so that you don't</font>

241
00:14:54,309 --> 00:14:59,139
have to care about particular memory

242
00:14:57,430 --> 00:15:01,449
types that the driver exposes you just

243
00:14:59,139 --> 00:15:03,819
say oh I want<font color="#E5E5E5"> this buffer and the</font>

244
00:15:01,449 --> 00:15:07,290
library handles the actual heap

245
00:15:03,819 --> 00:15:11,740
management and allocation of<font color="#E5E5E5"> the memory</font>

246
00:15:07,290 --> 00:15:14,230
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> driver for you or a frame graph</font>

247
00:15:11,740 --> 00:15:17,139
sort of thing which allows you<font color="#E5E5E5"> to</font>

248
00:15:14,230 --> 00:15:19,569
describe all your graphics<font color="#E5E5E5"> workload as</font>

249
00:15:17,139 --> 00:15:22,180
one big graph which<font color="#CCCCCC"> is then</font>

250
00:15:19,569 --> 00:15:25,920
automatically<font color="#E5E5E5"> deriving the dependencies</font>

251
00:15:22,180 --> 00:15:28,388
the memory barriers<font color="#E5E5E5"> for you and possibly</font>

252
00:15:25,920 --> 00:15:31,750
<font color="#E5E5E5">schedules it to run on</font><font color="#CCCCCC"> multiple Hardware</font>

253
00:15:28,389 --> 00:15:33,819
queues for execution in<font color="#E5E5E5"> parallel so this</font>

254
00:15:31,750 --> 00:15:35,800
is what amethyst folks are bringing<font color="#CCCCCC"> on</font>

255
00:15:33,819 --> 00:15:39,069
<font color="#CCCCCC">the table</font><font color="#E5E5E5"> and I'm sure a good</font><font color="#CCCCCC"> game</font>

256
00:15:35,800 --> 00:15:43,329
museum<font color="#CCCCCC"> vrs will follow and use hardware</font>

257
00:15:39,069 --> 00:15:46,420
abstraction layer in 2018<font color="#E5E5E5"> other than</font>

258
00:15:43,329 --> 00:15:50,800
<font color="#CCCCCC">that we have a very</font><font color="#E5E5E5"> interesting plans</font>

259
00:15:46,420 --> 00:15:54,279
with volcano<font color="#CCCCCC"> as a project that we are</font>

260
00:15:50,800 --> 00:15:55,540
<font color="#CCCCCC">often being compared to in fact</font><font color="#E5E5E5"> now the</font>

261
00:15:54,279 --> 00:15:57,670
comparison doesn't<font color="#E5E5E5"> make much sense</font>

262
00:15:55,540 --> 00:16:00,670
because<font color="#E5E5E5"> we are lower level we</font><font color="#CCCCCC"> are</font>

263
00:15:57,670 --> 00:16:04,889
implementing Vulcan and volcano is based

264
00:16:00,670 --> 00:16:09,009
on Vulcan<font color="#E5E5E5"> so what we want to do is to</font>

265
00:16:04,889 --> 00:16:11,529
let users use volcano<font color="#E5E5E5"> on top of</font><font color="#CCCCCC"> GFX</font>

266
00:16:09,009 --> 00:16:13,420
hardware abstraction layer so in a sense

267
00:16:11,529 --> 00:16:14,080
it's a drop-in replacement<font color="#CCCCCC"> the users</font>

268
00:16:13,420 --> 00:16:16,000
will<font color="#E5E5E5"> not need to</font>

269
00:16:14,080 --> 00:16:19,360
do anything<font color="#E5E5E5"> and they will instantly get</font>

270
00:16:16,000 --> 00:16:23,980
access to Apple and Microsoft platforms

271
00:16:19,360 --> 00:16:25,420
<font color="#E5E5E5">potentially Xbox one as well so that's</font>

272
00:16:23,980 --> 00:16:30,430
something<font color="#E5E5E5"> that we are</font><font color="#CCCCCC"> working on right</font>

273
00:16:25,420 --> 00:16:32,079
<font color="#CCCCCC">now and finally</font><font color="#E5E5E5"> web render is Mozilla</font>

274
00:16:30,430 --> 00:16:37,439
research project<font color="#CCCCCC"> that is currently being</font>

275
00:16:32,080 --> 00:16:40,510
integrated into Firefox<font color="#E5E5E5"> it is in need of</font>

276
00:16:37,440 --> 00:16:45,010
better control of the<font color="#E5E5E5"> latency resources</font>

277
00:16:40,510 --> 00:16:46,840
and more direct access<font color="#E5E5E5"> on Windows</font>

278
00:16:45,010 --> 00:16:47,950
platforms for for<font color="#CCCCCC"> example playing</font><font color="#E5E5E5"> the</font>

279
00:16:46,840 --> 00:16:52,840
video efficiently

280
00:16:47,950 --> 00:16:55,000
so our<font color="#CCCCCC"> volton portability or graphic</font>

281
00:16:52,840 --> 00:16:58,030
abstraction layer makes perfect sense to

282
00:16:55,000 --> 00:17:00,190
<font color="#CCCCCC">be a part of web render and we are</font>

283
00:16:58,030 --> 00:17:02,890
<font color="#E5E5E5">already working on that we have a group</font>

284
00:17:00,190 --> 00:17:06,580
in<font color="#E5E5E5"> Zagat University in Hungary</font>

285
00:17:02,890 --> 00:17:10,829
that's 14<font color="#E5E5E5"> web render and they have an</font>

286
00:17:06,579 --> 00:17:13,839
exciting<font color="#E5E5E5"> progress so far</font><font color="#CCCCCC"> so they</font>

287
00:17:10,829 --> 00:17:16,060
<font color="#E5E5E5">translated the shaders automatically and</font>

288
00:17:13,839 --> 00:17:18,310
they already<font color="#CCCCCC"> rust they</font><font color="#E5E5E5"> already run our</font>

289
00:17:16,060 --> 00:17:21,010
<font color="#CCCCCC">ref test framework</font><font color="#E5E5E5"> so we're looking</font>

290
00:17:18,310 --> 00:17:24,369
<font color="#E5E5E5">forward to see where</font><font color="#CCCCCC"> blender running</font><font color="#E5E5E5"> on</font>

291
00:17:21,010 --> 00:17:30,970
how this<font color="#E5E5E5"> year</font><font color="#CCCCCC"> potentially</font><font color="#E5E5E5"> up streamed as</font>

292
00:17:24,369 --> 00:17:35,199
well to Firefox<font color="#E5E5E5"> and we have a very</font>

293
00:17:30,970 --> 00:17:37,780
lively<font color="#CCCCCC"> Gator chat which does not have a</font>

294
00:17:35,200 --> 00:17:41,230
link here<font color="#CCCCCC"> but we have also a blog post</font>

295
00:17:37,780 --> 00:17:43,389
and you<font color="#CCCCCC"> can just jump on the project</font>

296
00:17:41,230 --> 00:17:48,580
page on<font color="#E5E5E5"> gif tab and it will</font><font color="#CCCCCC"> have all the</font>

297
00:17:43,390 --> 00:17:49,960
links<font color="#E5E5E5"> that you you will ever need</font><font color="#CCCCCC"> we are</font>

298
00:17:48,580 --> 00:17:55,210
always happy<font color="#CCCCCC"> to answer your questions</font>

299
00:17:49,960 --> 00:18:00,270
<font color="#CCCCCC">and right now I'm going to run a demo</font>

300
00:17:55,210 --> 00:18:00,270
<font color="#E5E5E5">that markers have reading written</font>

301
00:18:08,280 --> 00:18:14,420
the demo features<font color="#E5E5E5"> quite</font><font color="#CCCCCC"> a few compute</font>

302
00:18:10,830 --> 00:18:18,629
shaders<font color="#CCCCCC"> in some rendering as well and</font>

303
00:18:14,420 --> 00:18:22,020
it's fairly complex it simulates ocean

304
00:18:18,630 --> 00:18:24,570
<font color="#E5E5E5">water and it runs exactly the same on</font>

305
00:18:22,020 --> 00:18:29,690
this<font color="#E5E5E5"> video</font><font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> metal and Vulcan</font><font color="#CCCCCC"> using</font>

306
00:18:24,570 --> 00:18:29,689
the same shaders<font color="#E5E5E5"> and the same API calls</font>

307
00:18:32,330 --> 00:18:46,089
so that is it<font color="#E5E5E5"> very different questions</font>

308
00:18:36,570 --> 00:18:46,089
[Applause]

309
00:18:53,000 --> 00:19:01,290
so the question is why do we<font color="#CCCCCC"> consider it</font>

310
00:18:56,640 --> 00:19:05,730
a zero cost abstraction layer<font color="#E5E5E5"> it's zero</font>

311
00:19:01,290 --> 00:19:08,040
cost<font color="#E5E5E5"> in a sense that if you want to</font><font color="#CCCCCC"> it</font>

312
00:19:05,730 --> 00:19:12,600
to<font color="#E5E5E5"> be backed by Vulcan then we don't do</font>

313
00:19:08,040 --> 00:19:15,750
any<font color="#CCCCCC"> hippo locations and we don't do any</font>

314
00:19:12,600 --> 00:19:18,570
smart pointers<font color="#E5E5E5"> management for you</font>

315
00:19:15,750 --> 00:19:22,770
it has explicit<font color="#E5E5E5"> like allocation at free</font>

316
00:19:18,570 --> 00:19:24,960
calls for<font color="#E5E5E5"> resources of course there is</font>

317
00:19:22,770 --> 00:19:27,990
certain parts that<font color="#CCCCCC"> we have to do in</font>

318
00:19:24,960 --> 00:19:32,550
order for the same<font color="#CCCCCC"> API to run on D 312</font>

319
00:19:27,990 --> 00:19:34,920
and metal<font color="#CCCCCC"> so this is not exactly zero</font>

320
00:19:32,550 --> 00:19:36,960
cost<font color="#E5E5E5"> in that sense this</font><font color="#CCCCCC"> is as low</font><font color="#E5E5E5"> cost</font>

321
00:19:34,920 --> 00:19:38,910
as we can<font color="#E5E5E5"> afford but this is this goes</font>

322
00:19:36,960 --> 00:19:42,290
in line not<font color="#CCCCCC"> in our own</font><font color="#E5E5E5"> reasoning but</font>

323
00:19:38,910 --> 00:19:45,240
more in line<font color="#E5E5E5"> of the Vulcan portability</font>

324
00:19:42,290 --> 00:19:48,230
technical<font color="#E5E5E5"> subgroup and the design</font><font color="#CCCCCC"> that</font>

325
00:19:45,240 --> 00:19:51,810
we're doing<font color="#E5E5E5"> as a part of the group so</font>

326
00:19:48,230 --> 00:19:55,440
it's very little<font color="#E5E5E5"> minimum overhead we</font>

327
00:19:51,810 --> 00:19:58,220
can't afford<font color="#E5E5E5"> any extra GPU work for</font>

328
00:19:55,440 --> 00:19:58,220
whatever we're doing

329
00:20:06,880 --> 00:20:24,350
<font color="#CCCCCC">is your question</font><font color="#E5E5E5"> that we're losing quite</font>

330
00:20:09,260 --> 00:20:25,670
a bit of<font color="#E5E5E5"> command buffers</font><font color="#CCCCCC"> in metal okay</font>

331
00:20:24,350 --> 00:20:27,320
<font color="#E5E5E5">so the question</font><font color="#CCCCCC"> is how do we</font><font color="#E5E5E5"> deal with</font>

332
00:20:25,670 --> 00:20:30,440
the performance<font color="#E5E5E5"> loss from not being able</font>

333
00:20:27,320 --> 00:20:31,340
to<font color="#E5E5E5"> reuse common buffers in metal that</font><font color="#CCCCCC"> is</font>

334
00:20:30,440 --> 00:20:36,770
very<font color="#E5E5E5"> unfortunate</font>

335
00:20:31,340 --> 00:20:41,419
<font color="#E5E5E5">and what molten</font><font color="#CCCCCC"> decay is doing as one of</font>

336
00:20:36,770 --> 00:20:43,879
<font color="#E5E5E5">our competitors technically is having a</font>

337
00:20:41,420 --> 00:20:47,710
like a software a list of commands<font color="#CCCCCC"> build</font>

338
00:20:43,880 --> 00:20:49,790
<font color="#E5E5E5">up independent of the hardware list so I</font>

339
00:20:47,710 --> 00:20:53,710
don't<font color="#E5E5E5"> think we have</font><font color="#CCCCCC"> that think</font><font color="#E5E5E5"> a minute</font>

340
00:20:49,790 --> 00:20:53,710
right<font color="#CCCCCC"> now but that's</font><font color="#E5E5E5"> the plan</font><font color="#CCCCCC"> right now</font>

341
00:21:01,539 --> 00:21:08,359
other any plans for<font color="#E5E5E5"> the graphical UI</font>

342
00:21:04,519 --> 00:21:10,249
toolkit<font color="#E5E5E5"> we are extremely</font><font color="#CCCCCC"> busy with</font>

343
00:21:08,359 --> 00:21:12,320
making<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> hardware</font>

344
00:21:10,249 --> 00:21:17,090
abstraction layer<font color="#E5E5E5"> like the lowest level</font>

345
00:21:12,320 --> 00:21:21,559
of<font color="#E5E5E5"> abstraction works and our next steps</font>

346
00:21:17,090 --> 00:21:23,599
are<font color="#E5E5E5"> more in terms of getting the like</font>

347
00:21:21,559 --> 00:21:26,029
frame graph sort of libraries or the

348
00:21:23,599 --> 00:21:29,479
<font color="#E5E5E5">memory management libraries solid before</font>

349
00:21:26,029 --> 00:21:33,200
<font color="#CCCCCC">we can think about the UI</font><font color="#E5E5E5"> however I</font>

350
00:21:29,479 --> 00:21:36,889
expect<font color="#E5E5E5"> Conrad to be able to</font><font color="#CCCCCC"> report</font><font color="#E5E5E5"> it on</font>

351
00:21:33,200 --> 00:21:42,049
GFX<font color="#CCCCCC"> how</font><font color="#E5E5E5"> eventually</font><font color="#CCCCCC"> it's a graphical UI</font>

352
00:21:36,889 --> 00:21:44,059
toolkit for rust<font color="#E5E5E5"> as well as our friendly</font>

353
00:21:42,049 --> 00:21:46,609
amethyst folks are likely to come<font color="#CCCCCC"> up</font>

354
00:21:44,059 --> 00:21:48,820
<font color="#E5E5E5">with something</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> so we hope for your</font>

355
00:21:46,609 --> 00:21:48,820
help

356
00:22:12,490 --> 00:22:19,250
so historically<font color="#CCCCCC"> before the you write</font><font color="#E5E5E5"> we</font>

357
00:22:15,830 --> 00:22:21,350
<font color="#E5E5E5">required we require sorry the question</font>

358
00:22:19,250 --> 00:22:23,740
<font color="#CCCCCC">was how do we handle shaders</font><font color="#E5E5E5"> with</font>

359
00:22:21,350 --> 00:22:26,840
regards to<font color="#CCCCCC"> different platforms</font>

360
00:22:23,740 --> 00:22:28,610
<font color="#CCCCCC">historically we required the users to</font>

361
00:22:26,840 --> 00:22:30,290
<font color="#CCCCCC">provide all the shaders for</font><font color="#E5E5E5"> the backends</font>

362
00:22:28,610 --> 00:22:33,590
that<font color="#E5E5E5"> they use like separate shaders</font><font color="#CCCCCC"> for</font>

363
00:22:30,290 --> 00:22:36,710
metal<font color="#E5E5E5"> OpenGL and d3</font><font color="#CCCCCC"> at 11:00</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> the</font>

364
00:22:33,590 --> 00:22:39,909
<font color="#CCCCCC">new</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> as we are</font><font color="#E5E5E5"> going for the Vulcan</font>

365
00:22:36,710 --> 00:22:42,410
portability goal<font color="#E5E5E5"> we only accepts</font><font color="#CCCCCC"> PRV and</font>

366
00:22:39,910 --> 00:22:44,660
from<font color="#E5E5E5"> spear</font><font color="#CCCCCC"> V we generate all the</font><font color="#E5E5E5"> backend</font>

367
00:22:42,410 --> 00:22:46,460
specific shaders and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> patched the</font>

368
00:22:44,660 --> 00:22:48,980
logic like coordinate systems and

369
00:22:46,460 --> 00:22:51,430
descriptors IDs<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to the</font>

370
00:22:48,980 --> 00:22:55,250
specifics of the<font color="#E5E5E5"> backend</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we are</font>

371
00:22:51,430 --> 00:22:58,100
translating the shader<font color="#E5E5E5"> into we're using</font>

372
00:22:55,250 --> 00:23:01,610
the<font color="#E5E5E5"> spirit across as like a helper</font>

373
00:22:58,100 --> 00:23:04,669
library to do that and our far future

374
00:23:01,610 --> 00:23:06,530
<font color="#CCCCCC">for plans would be</font><font color="#E5E5E5"> to have a rust</font>

375
00:23:04,670 --> 00:23:08,780
alternative to that<font color="#E5E5E5"> as well since that's</font>

376
00:23:06,530 --> 00:23:11,510
<font color="#E5E5E5">the biggest non rust component that we</font>

377
00:23:08,780 --> 00:23:13,160
use<font color="#E5E5E5"> right now so right now</font>

378
00:23:11,510 --> 00:23:15,050
you supply<font color="#E5E5E5"> your shaders</font><font color="#CCCCCC"> in spirit II of</font>

379
00:23:13,160 --> 00:23:17,840
course the most convenient way<font color="#CCCCCC"> to do</font>

380
00:23:15,050 --> 00:23:20,419
that would be<font color="#CCCCCC"> to write it in GLSL say</font>

381
00:23:17,840 --> 00:23:24,020
<font color="#E5E5E5">4.1</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then have them</font><font color="#CCCCCC"> converted using</font>

382
00:23:20,420 --> 00:23:25,580
<font color="#E5E5E5">gel assault</font><font color="#CCCCCC"> asperity that's what worden</font>

383
00:23:24,020 --> 00:23:28,639
test framework is saying at least<font color="#E5E5E5"> you</font>

384
00:23:25,580 --> 00:23:31,629
<font color="#CCCCCC">writer</font><font color="#E5E5E5"> shaders in like geocell and dusts</font>

385
00:23:28,640 --> 00:23:31,630
them against Barry

386
00:23:53,800 --> 00:24:00,820
so the question the question<font color="#CCCCCC"> is how does</font>

387
00:23:57,070 --> 00:24:04,360
web GPU is going to expose<font color="#CCCCCC"> Vulcan</font><font color="#E5E5E5"> given</font>

388
00:24:00,820 --> 00:24:07,149
the WebGL is way higher level so yes

389
00:24:04,360 --> 00:24:09,669
it's a hard<font color="#CCCCCC"> question and Vulcan is a</font>

390
00:24:07,150 --> 00:24:12,430
hard sell<font color="#E5E5E5"> for multiple reasons on</font><font color="#CCCCCC"> the</font>

391
00:24:09,670 --> 00:24:14,680
web<font color="#E5E5E5"> not only because it's low level but</font>

392
00:24:12,430 --> 00:24:16,330
all the consequences from it is like

393
00:24:14,680 --> 00:24:19,060
it's easy to<font color="#CCCCCC"> build</font><font color="#E5E5E5"> a user signature</font>

394
00:24:16,330 --> 00:24:21,250
<font color="#E5E5E5">based on what you</font><font color="#CCCCCC"> worry about what</font>

395
00:24:19,060 --> 00:24:23,950
device can do and on the web it's<font color="#CCCCCC"> not</font>

396
00:24:21,250 --> 00:24:26,950
<font color="#CCCCCC">save and there's a whole lot of concerns</font>

397
00:24:23,950 --> 00:24:29,200
<font color="#CCCCCC">that not only</font><font color="#E5E5E5"> make not only Vulcan but</font>

398
00:24:26,950 --> 00:24:32,860
<font color="#E5E5E5">in general</font><font color="#CCCCCC"> go in any low level</font><font color="#E5E5E5"> on the</font>

399
00:24:29,200 --> 00:24:35,620
<font color="#E5E5E5">graphic side to slightly start breaking</font>

400
00:24:32,860 --> 00:24:38,770
the rules of the web<font color="#E5E5E5"> so we're trying to</font>

401
00:24:35,620 --> 00:24:40,600
find our philosophy there and our

402
00:24:38,770 --> 00:24:43,410
priority is getting like the maximum

403
00:24:40,600 --> 00:24:43,409
performance<font color="#E5E5E5"> of the web</font>

404
00:24:47,930 --> 00:24:58,720
[Applause]

405
00:24:54,800 --> 00:24:58,720
[Music]

