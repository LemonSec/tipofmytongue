1
00:00:05,210 --> 00:00:14,460
so it<font color="#CCCCCC"> can can we start now</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> all</font>

2
00:00:10,800 --> 00:00:17,070
<font color="#E5E5E5">right so let's start so to pick</font><font color="#CCCCCC"> today</font>

3
00:00:14,460 --> 00:00:20,099
<font color="#E5E5E5">for me is something a bit less travel I</font>

4
00:00:17,070 --> 00:00:23,369
guess which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beginning of bill</font><font color="#E5E5E5"> and</font>

5
00:00:20,099 --> 00:00:26,240
I know<font color="#CCCCCC"> if some of</font><font color="#E5E5E5"> you ever wish</font><font color="#CCCCCC"> you</font>

6
00:00:23,369 --> 00:00:28,800
<font color="#CCCCCC">could do like GDD make something</font>

7
00:00:26,240 --> 00:00:31,680
probably doesn't work<font color="#CCCCCC"> and even if it</font>

8
00:00:28,800 --> 00:00:34,170
worked<font color="#CCCCCC"> just</font><font color="#E5E5E5"> for make</font><font color="#CCCCCC"> billed</font><font color="#E5E5E5"> are usually</font>

9
00:00:31,680 --> 00:00:40,290
bit more complicated<font color="#E5E5E5"> than</font><font color="#CCCCCC"> just running</font>

10
00:00:34,170 --> 00:00:42,360
make so quick thing about<font color="#E5E5E5"> me I'm I'm on</font>

11
00:00:40,290 --> 00:00:44,640
a mission<font color="#E5E5E5"> to make it easy to</font><font color="#CCCCCC"> reuse free</font>

12
00:00:42,360 --> 00:00:48,989
and<font color="#E5E5E5"> liberal</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> open source software</font>

13
00:00:44,640 --> 00:00:50,550
<font color="#CCCCCC">I</font><font color="#E5E5E5"> maintain or contribute</font><font color="#CCCCCC"> to many project</font>

14
00:00:48,989 --> 00:00:53,690
I've been<font color="#E5E5E5"> half an elf</font>

15
00:00:50,550 --> 00:00:56,599
<font color="#CCCCCC">Alper bit at some time on s trace</font>

16
00:00:53,690 --> 00:01:00,390
contribute to be on the Linux<font color="#E5E5E5"> kernel</font>

17
00:00:56,600 --> 00:01:03,989
mostly to<font color="#E5E5E5"> black people about licensing</font>

18
00:01:00,390 --> 00:01:05,759
issues and the co-founder<font color="#E5E5E5"> FS</font><font color="#CCCCCC"> PDX</font><font color="#E5E5E5"> I used</font>

19
00:01:03,989 --> 00:01:08,580
to be a committee on<font color="#CCCCCC"> eclipse and G but</font>

20
00:01:05,759 --> 00:01:12,810
<font color="#E5E5E5">in the past the most of what</font><font color="#CCCCCC"> I coding is</font>

21
00:01:08,580 --> 00:01:14,429
<font color="#E5E5E5">either Python C++ and I try to stay</font><font color="#CCCCCC"> away</font>

22
00:01:12,810 --> 00:01:19,709
from<font color="#E5E5E5"> JavaScript but I'm forced</font><font color="#CCCCCC"> into it</font>

23
00:01:14,429 --> 00:01:24,539
<font color="#E5E5E5">now and then so why why</font><font color="#CCCCCC"> should you care</font>

24
00:01:19,709 --> 00:01:27,869
about understanding<font color="#CCCCCC"> your build there's</font>

25
00:01:24,539 --> 00:01:29,810
several reasons<font color="#CCCCCC"> first</font><font color="#E5E5E5"> and foremost is</font>

26
00:01:27,869 --> 00:01:32,390
you<font color="#E5E5E5"> want to have</font><font color="#CCCCCC"> a fine-grained</font>

27
00:01:29,810 --> 00:01:34,709
understanding what gets in your<font color="#E5E5E5"> binary</font>

28
00:01:32,390 --> 00:01:37,920
<font color="#E5E5E5">and you would say well</font><font color="#CCCCCC"> of course I know</font>

29
00:01:34,709 --> 00:01:42,810
that's my code<font color="#CCCCCC"> I know exactly what gets</font>

30
00:01:37,920 --> 00:01:46,289
built<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it also pretty</font><font color="#E5E5E5"> much until</font><font color="#CCCCCC"> you</font>

31
00:01:42,810 --> 00:01:48,479
have more than one<font color="#CCCCCC"> CN</font><font color="#E5E5E5"> header file now</font>

32
00:01:46,289 --> 00:01:52,110
think about something like<font color="#CCCCCC"> wheeled</font>

33
00:01:48,479 --> 00:01:56,270
<font color="#CCCCCC">building a full</font><font color="#E5E5E5"> Android device that</font>

34
00:01:52,110 --> 00:01:58,050
means<font color="#CCCCCC"> a whole</font><font color="#E5E5E5"> stack from the kernel app</font>

35
00:01:56,270 --> 00:02:00,209
this<font color="#CCCCCC"> build</font>

36
00:01:58,050 --> 00:02:05,780
typically involves multiple language

37
00:02:00,209 --> 00:02:08,009
compilers some people binaries scripts

38
00:02:05,780 --> 00:02:10,530
<font color="#E5E5E5">there's about four</font><font color="#CCCCCC"> hundred thousand</font>

39
00:02:08,008 --> 00:02:12,988
steps which are<font color="#CCCCCC"> executed when you build</font>

40
00:02:10,530 --> 00:02:16,349
<font color="#E5E5E5">another iDevice roughly that gives you a</font>

41
00:02:12,989 --> 00:02:17,470
bit of an<font color="#E5E5E5"> idea of the the complexity</font><font color="#CCCCCC"> of</font>

42
00:02:16,349 --> 00:02:19,810
the problem and<font color="#E5E5E5"> that</font>

43
00:02:17,470 --> 00:02:24,100
<font color="#CCCCCC">scale this is no longer fully</font>

44
00:02:19,810 --> 00:02:25,720
deterministic<font color="#E5E5E5"> now even if you don't do</font>

45
00:02:24,100 --> 00:02:29,230
<font color="#CCCCCC">system programming's but do application</font>

46
00:02:25,720 --> 00:02:31,300
<font color="#CCCCCC">level programming you create two node</font>

47
00:02:29,230 --> 00:02:35,109
package talking about JavaScript<font color="#CCCCCC"> and you</font>

48
00:02:31,300 --> 00:02:37,750
say<font color="#E5E5E5"> npm install and well guess what you</font>

49
00:02:35,110 --> 00:02:40,930
have<font color="#E5E5E5"> now 200 or 300 dependencies</font><font color="#CCCCCC"> that</font>

50
00:02:37,750 --> 00:02:43,630
were installed from left and<font color="#E5E5E5"> right and</font>

51
00:02:40,930 --> 00:02:46,150
<font color="#E5E5E5">that's only go large bill</font><font color="#CCCCCC"> orbit like</font>

52
00:02:43,630 --> 00:02:48,579
<font color="#CCCCCC">magic</font><font color="#E5E5E5"> we know that work eventually they</font>

53
00:02:46,150 --> 00:02:50,800
do most of the time they do but it's

54
00:02:48,580 --> 00:02:53,530
really<font color="#E5E5E5"> hard to understand exactly what</font>

55
00:02:50,800 --> 00:02:57,100
happens<font color="#E5E5E5"> especially like in this case of</font>

56
00:02:53,530 --> 00:02:58,990
<font color="#E5E5E5">NPM or maven</font><font color="#CCCCCC"> or application and</font><font color="#E5E5E5"> language</font>

57
00:02:57,100 --> 00:03:00,760
<font color="#E5E5E5">specific package managers things</font><font color="#CCCCCC"> are</font>

58
00:02:58,990 --> 00:03:04,420
<font color="#CCCCCC">faction provision at Build time</font><font color="#E5E5E5"> so they</font>

59
00:03:00,760 --> 00:03:07,120
come from the network<font color="#CCCCCC"> I remember long</font>

60
00:03:04,420 --> 00:03:10,089
<font color="#E5E5E5">time</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> to a small</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> package</font>

61
00:03:07,120 --> 00:03:11,970
<font color="#E5E5E5">Java package called</font><font color="#CCCCCC"> rhino</font><font color="#E5E5E5"> to the</font>

62
00:03:10,090 --> 00:03:15,370
JavaScript interpreter<font color="#E5E5E5"> written in Java</font>

63
00:03:11,970 --> 00:03:17,170
<font color="#E5E5E5">and part of its build script was</font>

64
00:03:15,370 --> 00:03:19,690
actually doing the double<font color="#E5E5E5"> you get to</font>

65
00:03:17,170 --> 00:03:22,869
fetch some code integrated in the<font color="#E5E5E5"> bill</font>

66
00:03:19,690 --> 00:03:25,239
you need the source<font color="#CCCCCC"> and basically you</font>

67
00:03:22,870 --> 00:03:28,150
ended<font color="#E5E5E5"> up with some binaries you didn't</font>

68
00:03:25,239 --> 00:03:29,530
you<font color="#CCCCCC"> we had no idea</font><font color="#E5E5E5"> where they were</font>

69
00:03:28,150 --> 00:03:31,390
coming<font color="#CCCCCC"> from eventually they were just</font>

70
00:03:29,530 --> 00:03:34,590
<font color="#CCCCCC">popping up out</font><font color="#E5E5E5"> of thin air unless you</font>

71
00:03:31,390 --> 00:03:38,820
could trace exactly what was<font color="#CCCCCC"> happening</font>

72
00:03:34,590 --> 00:03:38,820
there's other applications which<font color="#CCCCCC"> is</font>

73
00:03:39,150 --> 00:03:45,820
eventually<font color="#E5E5E5"> we already submitting</font>

74
00:03:42,070 --> 00:03:47,590
vulnerable code<font color="#E5E5E5"> we're integrating</font>

75
00:03:45,820 --> 00:03:49,900
vulnerable package they<font color="#E5E5E5"> may be licensing</font>

76
00:03:47,590 --> 00:03:52,150
issues where things like<font color="#E5E5E5"> linking</font>

77
00:03:49,900 --> 00:03:54,610
dynamically versus statically when comes

78
00:03:52,150 --> 00:03:56,709
the LGPL GPL haven't<font color="#CCCCCC"> have their own</font>

79
00:03:54,610 --> 00:04:00,700
importance<font color="#E5E5E5"> and this is the kind</font><font color="#CCCCCC"> of</font>

80
00:03:56,709 --> 00:04:04,209
things that you you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to which are</font>

81
00:04:00,700 --> 00:04:07,390
reason why you may<font color="#E5E5E5"> want care so now let</font>

82
00:04:04,209 --> 00:04:09,250
me<font color="#E5E5E5"> state the problem is given some</font>

83
00:04:07,390 --> 00:04:11,589
<font color="#CCCCCC">binary or package I want to know where</font>

84
00:04:09,250 --> 00:04:14,769
they're<font color="#E5E5E5"> coming from and eventually which</font>

85
00:04:11,590 --> 00:04:16,829
<font color="#E5E5E5">no open source package they're built</font>

86
00:04:14,769 --> 00:04:20,039
from

87
00:04:16,829 --> 00:04:21,599
<font color="#CCCCCC">I want to show you to trace exactly what</font>

88
00:04:20,039 --> 00:04:24,719
<font color="#E5E5E5">you complete</font><font color="#CCCCCC"> a corresponding source code</font>

89
00:04:21,599 --> 00:04:28,319
which is<font color="#CCCCCC"> more released</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> T term that</font>

90
00:04:24,720 --> 00:04:30,930
<font color="#E5E5E5">that applies</font><font color="#CCCCCC"> to the GPL and I want to do</font>

91
00:04:28,319 --> 00:04:34,919
that<font color="#CCCCCC"> eventually in the large for large</font>

92
00:04:30,930 --> 00:04:37,469
complex build like whole device or in

93
00:04:34,919 --> 00:04:40,080
the<font color="#E5E5E5"> small which is I'm targeting single</font>

94
00:04:37,469 --> 00:04:42,960
binaries and I need to understand

95
00:04:40,080 --> 00:04:44,550
exactly what gets<font color="#E5E5E5"> into it that</font><font color="#CCCCCC"> makes</font>

96
00:04:42,960 --> 00:04:47,750
sense<font color="#E5E5E5"> so</font><font color="#CCCCCC"> far is it something</font><font color="#E5E5E5"> that the</font>

97
00:04:44,550 --> 00:04:50,789
problem that<font color="#CCCCCC"> you guys have had at times</font>

98
00:04:47,750 --> 00:04:52,409
more or<font color="#E5E5E5"> less</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it's it's it's</font>

99
00:04:50,789 --> 00:04:56,909
absolutely well it's a pretty narrow use

100
00:04:52,409 --> 00:04:58,379
case most<font color="#E5E5E5"> of the time we hope the build</font>

101
00:04:56,909 --> 00:05:00,919
runs and we don't have problem with<font color="#E5E5E5"> the</font>

102
00:04:58,379 --> 00:05:03,990
bills and and we<font color="#E5E5E5"> don't want to touch it</font>

103
00:05:00,919 --> 00:05:07,049
<font color="#CCCCCC">okay so now the techniques to get there</font>

104
00:05:03,990 --> 00:05:10,110
<font color="#E5E5E5">there's many ways but the only</font><font color="#CCCCCC"> technique</font>

105
00:05:07,050 --> 00:05:13,590
<font color="#E5E5E5">I will talk today about is what I call</font>

106
00:05:10,110 --> 00:05:18,120
dynamic forward<font color="#E5E5E5"> build tracing that means</font>

107
00:05:13,590 --> 00:05:20,279
you have to run the build and you

108
00:05:18,120 --> 00:05:22,800
execute<font color="#CCCCCC"> your build</font><font color="#E5E5E5"> with some tracing</font>

109
00:05:20,279 --> 00:05:25,409
magic<font color="#CCCCCC"> we'll come</font><font color="#E5E5E5"> to it in a second such</font>

110
00:05:22,800 --> 00:05:28,879
that you<font color="#E5E5E5"> eventually can create from this</font>

111
00:05:25,409 --> 00:05:32,909
trace<font color="#CCCCCC"> a graph of your processors</font>

112
00:05:28,879 --> 00:05:35,400
executables and<font color="#E5E5E5"> five transformation at</font>

113
00:05:32,909 --> 00:05:38,069
full depth and complexity<font color="#E5E5E5"> that you can</font>

114
00:05:35,400 --> 00:05:40,229
then<font color="#E5E5E5"> query to understand well here is</font>

115
00:05:38,069 --> 00:05:43,560
this source which binary is it used in

116
00:05:40,229 --> 00:05:46,460
or is this<font color="#CCCCCC"> binary which are the source</font>

117
00:05:43,560 --> 00:05:51,599
that were used to<font color="#CCCCCC"> actually make the</font>

118
00:05:46,460 --> 00:05:53,400
<font color="#E5E5E5">binary there's many other techniques and</font>

119
00:05:51,599 --> 00:05:55,699
<font color="#E5E5E5">they're off the peak but let me cite</font>

120
00:05:53,400 --> 00:05:58,109
them just so we can<font color="#E5E5E5"> put them out</font>

121
00:05:55,699 --> 00:06:00,620
<font color="#E5E5E5">anything that would be instrumenting the</font>

122
00:05:58,110 --> 00:06:03,349
<font color="#E5E5E5">build tools or</font><font color="#CCCCCC"> the compilers of</font><font color="#E5E5E5"> limit</font>

123
00:06:00,620 --> 00:06:06,180
<font color="#E5E5E5">the techniques I'm talking here are not</font>

124
00:06:03,349 --> 00:06:07,740
requiring any change whatsoever to your

125
00:06:06,180 --> 00:06:08,909
build environment<font color="#CCCCCC"> so it doesn't</font><font color="#E5E5E5"> care</font>

126
00:06:07,740 --> 00:06:13,050
<font color="#CCCCCC">about what build environment you could</font>

127
00:06:08,909 --> 00:06:16,650
use<font color="#E5E5E5"> make</font><font color="#CCCCCC"> C make build a node package run</font>

128
00:06:13,050 --> 00:06:19,469
<font color="#E5E5E5">some script it doesn't matter anything</font>

129
00:06:16,650 --> 00:06:21,029
that's static<font color="#E5E5E5"> analysis that means you</font>

130
00:06:19,469 --> 00:06:24,060
start from the binary<font color="#E5E5E5"> for instance</font>

131
00:06:21,029 --> 00:06:25,889
<font color="#E5E5E5">collect work debug symbols which is</font>

132
00:06:24,060 --> 00:06:28,979
technique used<font color="#CCCCCC"> igb</font>

133
00:06:25,889 --> 00:06:31,139
<font color="#E5E5E5">to point back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> source it's out of</font><font color="#CCCCCC"> it</font>

134
00:06:28,979 --> 00:06:32,669
anything would be tracing the<font color="#E5E5E5"> run time</font>

135
00:06:31,139 --> 00:06:35,270
is a question itself<font color="#E5E5E5"> or so</font><font color="#CCCCCC"> we're</font>

136
00:06:32,669 --> 00:06:37,590
<font color="#E5E5E5">strictly talking about the</font><font color="#CCCCCC"> build though</font>

137
00:06:35,270 --> 00:06:40,878
<font color="#E5E5E5">eventually the same tool could have</font>

138
00:06:37,590 --> 00:06:44,008
applications<font color="#CCCCCC"> for</font><font color="#E5E5E5"> dynamic tracing of</font>

139
00:06:40,879 --> 00:06:49,249
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> execution of code that's not</font><font color="#CCCCCC"> a</font>

140
00:06:44,009 --> 00:06:52,590
primary<font color="#CCCCCC"> purpose other things especially</font>

141
00:06:49,249 --> 00:06:55,229
<font color="#E5E5E5">disassembly emulation</font><font color="#CCCCCC"> reusing compiler</font>

142
00:06:52,590 --> 00:06:56,969
<font color="#CCCCCC">Convention for instance</font><font color="#E5E5E5"> at class file in</font>

143
00:06:55,229 --> 00:06:59,460
Java<font color="#E5E5E5"> typically comes from the</font>

144
00:06:56,969 --> 00:07:02,909
<font color="#E5E5E5">corresponding</font><font color="#CCCCCC"> Java file with the same</font>

145
00:06:59,460 --> 00:07:05,219
path<font color="#E5E5E5"> or same sub path so none of</font><font color="#CCCCCC"> that</font>

146
00:07:02,909 --> 00:07:09,150
<font color="#CCCCCC">symbols and debug symbols also</font><font color="#E5E5E5"> are out</font>

147
00:07:05,219 --> 00:07:12,719
of<font color="#E5E5E5"> the scope actually the technique here</font>

148
00:07:09,150 --> 00:07:16,799
doesn't care about symbols and<font color="#E5E5E5"> debugging</font>

149
00:07:12,719 --> 00:07:18,779
symbols<font color="#CCCCCC"> at all now</font><font color="#E5E5E5"> these techniques are</font>

150
00:07:16,800 --> 00:07:20,400
interesting especially<font color="#CCCCCC"> the last few ones</font>

151
00:07:18,779 --> 00:07:23,659
are something I'm working on

152
00:07:20,400 --> 00:07:26,310
I said in<font color="#E5E5E5"> in my abstract that I was</font>

153
00:07:23,659 --> 00:07:28,498
<font color="#E5E5E5">actually presenting that</font><font color="#CCCCCC"> too at the end</font>

154
00:07:26,310 --> 00:07:31,289
<font color="#E5E5E5">but I'll come to that in</font><font color="#CCCCCC"> a second</font>

155
00:07:28,499 --> 00:07:33,289
<font color="#E5E5E5">so the problem static</font><font color="#CCCCCC"> analysis</font><font color="#E5E5E5"> is not an</font>

156
00:07:31,289 --> 00:07:36,810
exact<font color="#E5E5E5"> science</font><font color="#CCCCCC"> is difficult</font>

157
00:07:33,289 --> 00:07:39,870
instrumentation is for<font color="#E5E5E5"> instance you were</font>

158
00:07:36,810 --> 00:07:41,759
to instrument GCC or<font color="#E5E5E5"> make has been</font>

159
00:07:39,870 --> 00:07:44,250
several<font color="#CCCCCC"> times</font><font color="#E5E5E5"> there's new</font><font color="#CCCCCC"> attempts</font><font color="#E5E5E5"> in</font>

160
00:07:41,759 --> 00:07:47,189
that space is complicated because<font color="#E5E5E5"> you</font>

161
00:07:44,250 --> 00:07:48,930
eventually<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to instrument</font><font color="#E5E5E5"> each and</font>

162
00:07:47,189 --> 00:07:51,860
every build<font color="#E5E5E5"> it's very planet on the</font>

163
00:07:48,930 --> 00:07:54,599
internals of the code most of the time

164
00:07:51,860 --> 00:07:57,509
so both dynamic<font color="#E5E5E5"> and static analysis are</font>

165
00:07:54,599 --> 00:08:00,330
complicated static analysis<font color="#CCCCCC"> in the best</font>

166
00:07:57,509 --> 00:08:01,889
case<font color="#CCCCCC"> you</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> have all the symbols that</font>

167
00:08:00,330 --> 00:08:05,639
exist in the binaries that<font color="#E5E5E5"> you can trace</font>

168
00:08:01,889 --> 00:08:10,219
an ambiguously to your source but that's

169
00:08:05,639 --> 00:08:13,740
not the case<font color="#E5E5E5"> at scale in practice and</font>

170
00:08:10,219 --> 00:08:15,569
also<font color="#E5E5E5"> bills when they</font><font color="#CCCCCC"> are large enough</font>

171
00:08:13,740 --> 00:08:17,370
<font color="#CCCCCC">they're complicated</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> there are few</font>

172
00:08:15,569 --> 00:08:20,219
people<font color="#E5E5E5"> in a team that usually understand</font>

173
00:08:17,370 --> 00:08:22,409
them<font color="#E5E5E5"> and few people</font><font color="#CCCCCC"> the variable to make</font>

174
00:08:20,219 --> 00:08:25,800
<font color="#E5E5E5">sense of them in a way</font><font color="#CCCCCC"> that they can</font>

175
00:08:22,409 --> 00:08:28,438
evolve them efficiently<font color="#CCCCCC"> so just saying</font>

176
00:08:25,800 --> 00:08:30,889
<font color="#E5E5E5">oh if you mind just making sure that you</font>

177
00:08:28,439 --> 00:08:35,099
could GCC compiler<font color="#CCCCCC"> managing everything</font>

178
00:08:30,889 --> 00:08:36,899
<font color="#E5E5E5">it's usually not trivial and you turn it</font>

179
00:08:35,099 --> 00:08:39,289
in one<font color="#CCCCCC"> place but</font><font color="#E5E5E5"> it happens that there's</font>

180
00:08:36,899 --> 00:08:41,000
this other executable that's built

181
00:08:39,289 --> 00:08:43,549
another way and it won't be<font color="#E5E5E5"> built in the</font>

182
00:08:41,000 --> 00:08:45,019
<font color="#CCCCCC">bad mood</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's it's in practice I</font>

183
00:08:43,549 --> 00:08:47,479
found it extremely<font color="#E5E5E5"> difficult to obtain</font>

184
00:08:45,019 --> 00:08:49,940
<font color="#CCCCCC">proper debug artifact where you could do</font>

185
00:08:47,480 --> 00:08:55,339
<font color="#CCCCCC">only aesthetic analysis</font><font color="#E5E5E5"> to trace things</font>

186
00:08:49,940 --> 00:08:58,160
<font color="#E5E5E5">back the other thing is that it's pretty</font>

187
00:08:55,339 --> 00:09:00,350
hard<font color="#CCCCCC"> to conclude that something is not</font>

188
00:08:58,160 --> 00:09:02,779
<font color="#E5E5E5">built</font><font color="#CCCCCC"> so you have a bunch of code</font><font color="#E5E5E5"> check</font>

189
00:09:00,350 --> 00:09:05,089
out let's assume you have everything<font color="#E5E5E5"> and</font>

190
00:09:02,779 --> 00:09:09,860
<font color="#E5E5E5">you're not fetching anything remotely</font>

191
00:09:05,089 --> 00:09:13,399
with<font color="#CCCCCC"> network how do you know which</font><font color="#E5E5E5"> part</font>

192
00:09:09,860 --> 00:09:15,680
of the code<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> built it's it's not</font>

193
00:09:13,399 --> 00:09:17,750
completely evident<font color="#E5E5E5"> the other thing</font>

194
00:09:15,680 --> 00:09:19,339
that's important<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind is</font>

195
00:09:17,750 --> 00:09:21,649
that<font color="#E5E5E5"> building is not the same as</font>

196
00:09:19,339 --> 00:09:25,040
deploying you may for instance part of

197
00:09:21,649 --> 00:09:29,149
the bill executing tests and this test

198
00:09:25,040 --> 00:09:32,120
<font color="#E5E5E5">may not be part of your actual deployed</font>

199
00:09:29,149 --> 00:09:35,870
runtime binaries this in apply with

200
00:09:32,120 --> 00:09:39,319
tools<font color="#E5E5E5"> and in some cases bits of the tool</font>

201
00:09:35,870 --> 00:09:43,760
chain<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in your</font><font color="#CCCCCC"> deployment but</font>

202
00:09:39,319 --> 00:09:47,990
some<font color="#E5E5E5"> other don't so any any question the</font>

203
00:09:43,760 --> 00:09:50,750
context is clear for<font color="#CCCCCC"> everyone so far ok</font>

204
00:09:47,990 --> 00:09:53,149
so the ideal solution should<font color="#E5E5E5"> be very</font>

205
00:09:50,750 --> 00:09:55,850
easy<font color="#E5E5E5"> honest requiring absolutely no</font>

206
00:09:53,149 --> 00:09:59,440
change the<font color="#CCCCCC"> building configuration it</font>

207
00:09:55,850 --> 00:10:02,149
should be hundred percent<font color="#CCCCCC"> accurate and</font>

208
00:09:59,440 --> 00:10:08,269
allow me<font color="#E5E5E5"> to really understand everything</font>

209
00:10:02,149 --> 00:10:11,750
<font color="#E5E5E5">about the bill and so what's what's</font><font color="#CCCCCC"> the</font>

210
00:10:08,269 --> 00:10:14,839
approach<font color="#E5E5E5"> Cisco's I'm assuming a lot</font><font color="#CCCCCC"> of</font>

211
00:10:11,750 --> 00:10:18,529
you are<font color="#E5E5E5"> under saying what the</font><font color="#CCCCCC"> cisco is</font>

212
00:10:14,839 --> 00:10:21,350
but for those<font color="#E5E5E5"> that</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> a simple way to</font>

213
00:10:18,529 --> 00:10:24,980
think<font color="#E5E5E5"> about system</font><font color="#CCCCCC"> calls is that's the</font>

214
00:10:21,350 --> 00:10:26,870
<font color="#E5E5E5">matching language of the kernel the</font>

215
00:10:24,980 --> 00:10:31,790
<font color="#E5E5E5">Linux kernel in particular Colonels and</font>

216
00:10:26,870 --> 00:10:34,040
<font color="#E5E5E5">generals and the kernel typically</font>

217
00:10:31,790 --> 00:10:36,649
doesn't<font color="#E5E5E5"> know much about what's happening</font>

218
00:10:34,040 --> 00:10:41,630
above it knows about file system<font color="#CCCCCC"> Network</font>

219
00:10:36,649 --> 00:10:44,060
<font color="#E5E5E5">CPU scheduling and simple thing it does</font>

220
00:10:41,630 --> 00:10:46,699
<font color="#E5E5E5">it's up it's being asked to open</font><font color="#CCCCCC"> a file</font>

221
00:10:44,060 --> 00:10:47,949
close<font color="#E5E5E5"> a file</font><font color="#CCCCCC"> read some bytes</font><font color="#E5E5E5"> write some</font>

222
00:10:46,699 --> 00:10:49,779
bytes

223
00:10:47,949 --> 00:10:51,819
<font color="#CCCCCC">spooning process that</font><font color="#E5E5E5"> kind of things are</font>

224
00:10:49,779 --> 00:10:54,939
very<font color="#CCCCCC"> low-level and that's why it's a</font>

225
00:10:51,819 --> 00:10:58,389
<font color="#E5E5E5">good</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> to think about it in terms of</font>

226
00:10:54,939 --> 00:11:01,529
the<font color="#E5E5E5"> equivalent of machine language</font><font color="#CCCCCC"> for</font>

227
00:10:58,389 --> 00:11:03,609
user space<font color="#CCCCCC"> now the other thing about</font>

228
00:11:01,529 --> 00:11:06,339
system<font color="#CCCCCC"> calls at least in the context of</font>

229
00:11:03,609 --> 00:11:08,589
Linux is that everything you<font color="#CCCCCC"> do in user</font>

230
00:11:06,339 --> 00:11:09,069
space<font color="#E5E5E5"> ends up as a system called in the</font>

231
00:11:08,589 --> 00:11:12,160
kernel

232
00:11:09,069 --> 00:11:14,469
it's<font color="#CCCCCC"> hundred percent accurate you</font><font color="#E5E5E5"> know</font>

233
00:11:12,160 --> 00:11:17,319
everything<font color="#CCCCCC"> that happens but you're</font>

234
00:11:14,470 --> 00:11:21,069
looking<font color="#CCCCCC"> from below the</font><font color="#E5E5E5"> only thing you</font>

235
00:11:17,319 --> 00:11:23,079
see is<font color="#CCCCCC"> opened fire with file</font><font color="#E5E5E5"> read bytes</font>

236
00:11:21,069 --> 00:11:23,559
<font color="#CCCCCC">close file</font><font color="#E5E5E5"> this kind of operations very</font>

237
00:11:23,079 --> 00:11:28,748
<font color="#CCCCCC">low-level</font>

238
00:11:23,559 --> 00:11:31,389
<font color="#E5E5E5">but</font><font color="#CCCCCC"> you see</font><font color="#E5E5E5"> everything so the tool is</font>

239
00:11:28,749 --> 00:11:34,720
<font color="#E5E5E5">called trace code and and the approach</font>

240
00:11:31,389 --> 00:11:40,480
is<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> simple you run your real</font>

241
00:11:34,720 --> 00:11:43,089
<font color="#CCCCCC">nurse trace which is</font><font color="#E5E5E5"> a tool that</font><font color="#CCCCCC"> you</font>

242
00:11:40,480 --> 00:11:49,089
have<font color="#E5E5E5"> the maintainer</font><font color="#CCCCCC"> in this room me tree</font>

243
00:11:43,089 --> 00:11:53,019
I'm not worthy<font color="#CCCCCC"> and stress is a system</font>

244
00:11:49,089 --> 00:11:55,119
<font color="#CCCCCC">called tracer for Linux and the way you</font>

245
00:11:53,019 --> 00:11:57,419
run it is that you prefix<font color="#E5E5E5"> the command</font>

246
00:11:55,119 --> 00:12:00,730
<font color="#CCCCCC">that you want to execute with this trace</font>

247
00:11:57,419 --> 00:12:03,009
eventually<font color="#E5E5E5"> some extra flags and it will</font>

248
00:12:00,730 --> 00:12:06,249
collect<font color="#E5E5E5"> the trace of everything that</font>

249
00:12:03,009 --> 00:12:10,179
happens in the kernel so<font color="#CCCCCC"> it</font><font color="#E5E5E5"> basically</font>

250
00:12:06,249 --> 00:12:12,129
like this assembly of the<font color="#CCCCCC"> machine</font>

251
00:12:10,179 --> 00:12:16,779
<font color="#CCCCCC">language of the kernel</font><font color="#E5E5E5"> that you get for</font>

252
00:12:12,129 --> 00:12:18,660
whatever you started in<font color="#E5E5E5"> user space in my</font>

253
00:12:16,779 --> 00:12:23,169
<font color="#E5E5E5">case and it's probably not</font><font color="#CCCCCC"> the best case</font>

254
00:12:18,660 --> 00:12:25,089
I'm trusting every system<font color="#CCCCCC"> code which is</font>

255
00:12:23,169 --> 00:12:28,569
huge<font color="#E5E5E5"> like think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the full stack</font>

256
00:12:25,089 --> 00:12:29,980
Android build<font color="#CCCCCC"> 400,000 operations</font><font color="#E5E5E5"> you're</font>

257
00:12:28,569 --> 00:12:32,589
talking about<font color="#E5E5E5"> the trace that's in the</font>

258
00:12:29,980 --> 00:12:34,779
range<font color="#E5E5E5"> of 20 gigabytes so typically</font>

259
00:12:32,589 --> 00:12:36,749
bigger than the<font color="#E5E5E5"> executive all</font><font color="#CCCCCC"> you're</font>

260
00:12:34,779 --> 00:12:39,369
building and probably bigger than every

261
00:12:36,749 --> 00:12:42,160
<font color="#E5E5E5">artifacts and intermediate 10 files of</font>

262
00:12:39,369 --> 00:12:45,549
the build that<font color="#E5E5E5"> were created and that</font>

263
00:12:42,160 --> 00:12:47,169
probably could be optimized but it's

264
00:12:45,549 --> 00:12:52,209
it's actually<font color="#E5E5E5"> simpler just to trace</font>

265
00:12:47,169 --> 00:12:54,879
everything<font color="#E5E5E5"> once you have this trace we</font>

266
00:12:52,209 --> 00:12:58,508
process the trace and<font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> rebuild a</font>

267
00:12:54,879 --> 00:13:00,790
directed graph of<font color="#CCCCCC"> five transformations</font>

268
00:12:58,509 --> 00:13:05,470
that<font color="#E5E5E5"> happen over again</font>

269
00:13:00,790 --> 00:13:08,410
<font color="#CCCCCC">to all executable so again the system</font>

270
00:13:05,470 --> 00:13:13,600
<font color="#CCCCCC">code levels read/write up and</font><font color="#E5E5E5"> closed</font>

271
00:13:08,410 --> 00:13:15,160
<font color="#E5E5E5">circuit</font><font color="#CCCCCC"> file descriptors and</font><font color="#E5E5E5"> this</font>

272
00:13:13,600 --> 00:13:17,830
<font color="#CCCCCC">happens in the context of</font><font color="#E5E5E5"> a process the</font>

273
00:13:15,160 --> 00:13:19,360
<font color="#CCCCCC">process the context of an executable</font><font color="#E5E5E5"> and</font>

274
00:13:17,830 --> 00:13:22,600
you're<font color="#E5E5E5"> basically saying</font><font color="#CCCCCC"> okay I</font><font color="#E5E5E5"> have a</font>

275
00:13:19,360 --> 00:13:24,820
process<font color="#E5E5E5"> there's some file</font><font color="#CCCCCC"> operation</font><font color="#E5E5E5"> that</font>

276
00:13:22,600 --> 00:13:27,670
<font color="#E5E5E5">take place there</font><font color="#CCCCCC"> so I collect</font><font color="#E5E5E5"> them here</font>

277
00:13:24,820 --> 00:13:29,650
and<font color="#E5E5E5"> you trace the</font><font color="#CCCCCC"> life cycle of</font><font color="#E5E5E5"> the</font>

278
00:13:27,670 --> 00:13:34,540
files<font color="#CCCCCC"> over the processes</font><font color="#E5E5E5"> and executive</font>

279
00:13:29,650 --> 00:13:36,550
<font color="#CCCCCC">bolt</font><font color="#E5E5E5"> once you have</font><font color="#CCCCCC"> that in a graph model</font>

280
00:13:34,540 --> 00:13:40,540
you can create whichever way you want we

281
00:13:36,550 --> 00:13:43,329
say<font color="#CCCCCC"> okay I do topological sort and from</font>

282
00:13:40,540 --> 00:13:46,560
that<font color="#E5E5E5"> source file tell me what is the</font>

283
00:13:43,330 --> 00:13:49,830
last file in my graph that's never been

284
00:13:46,560 --> 00:13:52,650
read<font color="#CCCCCC"> anymore it's only been written to</font>

285
00:13:49,830 --> 00:13:56,080
it's not read<font color="#CCCCCC"> and what happens</font>

286
00:13:52,650 --> 00:13:58,390
automatically<font color="#E5E5E5"> in some of the simplest</font>

287
00:13:56,080 --> 00:14:00,580
case<font color="#CCCCCC"> is that the thing that's</font><font color="#E5E5E5"> only</font>

288
00:13:58,390 --> 00:14:04,270
written<font color="#E5E5E5"> to</font><font color="#CCCCCC"> never read</font><font color="#E5E5E5"> it's at the end of</font>

289
00:14:00,580 --> 00:14:06,610
the graph is actually<font color="#E5E5E5"> your binary on the</font>

290
00:14:04,270 --> 00:14:10,180
other hand if you take<font color="#CCCCCC"> some</font><font color="#E5E5E5"> binary and</font>

291
00:14:06,610 --> 00:14:11,890
say give me some<font color="#CCCCCC"> file at the</font><font color="#E5E5E5"> end of the</font>

292
00:14:10,180 --> 00:14:15,880
graph<font color="#E5E5E5"> the other</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going in the</font>

293
00:14:11,890 --> 00:14:19,600
<font color="#CCCCCC">reverse way that's</font><font color="#E5E5E5"> only read and never</font>

294
00:14:15,880 --> 00:14:21,870
written that<font color="#CCCCCC"> in most case is a source</font>

295
00:14:19,600 --> 00:14:21,870
file

296
00:14:23,340 --> 00:14:29,530
so the cool<font color="#CCCCCC"> thing about that</font><font color="#E5E5E5"> it's</font>

297
00:14:26,200 --> 00:14:31,960
completely<font color="#E5E5E5"> agnostic</font><font color="#CCCCCC"> with regard</font><font color="#E5E5E5"> to the</font>

298
00:14:29,530 --> 00:14:35,050
compiler<font color="#CCCCCC"> the make tools you use the</font>

299
00:14:31,960 --> 00:14:37,390
build chain<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> care the programming</font>

300
00:14:35,050 --> 00:14:41,589
language<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't require</font><font color="#CCCCCC"> any</font>

301
00:14:37,390 --> 00:14:44,230
change<font color="#E5E5E5"> your build process and that's</font>

302
00:14:41,590 --> 00:14:48,310
really what makes it<font color="#CCCCCC"> useful in fairly</font>

303
00:14:44,230 --> 00:14:50,920
large array of use case the only<font color="#E5E5E5"> thing</font>

304
00:14:48,310 --> 00:14:54,810
you need is to<font color="#CCCCCC"> run your bill</font><font color="#E5E5E5"> nurse trace</font>

305
00:14:50,920 --> 00:14:57,400
<font color="#E5E5E5">and run it on Linux there are ways to</font>

306
00:14:54,810 --> 00:15:00,339
<font color="#E5E5E5">collect the same kind of system trace on</font>

307
00:14:57,400 --> 00:15:04,930
Mac with<font color="#CCCCCC"> dtrace and with some magical</font>

308
00:15:00,340 --> 00:15:07,240
invocation on<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> but that's none of</font>

309
00:15:04,930 --> 00:15:10,180
my<font color="#E5E5E5"> interests so but I know it's possible</font>

310
00:15:07,240 --> 00:15:13,000
<font color="#E5E5E5">I've even seen implementations from some</font>

311
00:15:10,180 --> 00:15:15,479
testing tool using<font color="#CCCCCC"> chromium that</font>

312
00:15:13,000 --> 00:15:18,660
<font color="#E5E5E5">actually has a similar approach</font><font color="#CCCCCC"> and</font>

313
00:15:15,480 --> 00:15:21,460
they're trying to<font color="#CCCCCC"> isolate the runs of</font>

314
00:15:18,660 --> 00:15:24,069
tests<font color="#E5E5E5"> so</font><font color="#CCCCCC"> they know</font><font color="#E5E5E5"> exactly which files</font>

315
00:15:21,460 --> 00:15:25,810
are<font color="#E5E5E5"> used to run a single unit test so</font>

316
00:15:24,070 --> 00:15:28,980
they can paralyze that more efficiently

317
00:15:25,810 --> 00:15:32,380
<font color="#E5E5E5">and they use a similar technique to</font>

318
00:15:28,980 --> 00:15:35,320
<font color="#E5E5E5">collect during</font><font color="#CCCCCC"> a test run</font><font color="#E5E5E5"> which files</font>

319
00:15:32,380 --> 00:15:38,320
are being<font color="#CCCCCC"> touched</font><font color="#E5E5E5"> and they've</font>

320
00:15:35,320 --> 00:15:43,840
implemented also<font color="#CCCCCC"> dtrace</font><font color="#E5E5E5"> tracer and the</font>

321
00:15:38,320 --> 00:15:45,910
<font color="#CCCCCC">windows-based</font><font color="#E5E5E5"> tracer and the cool thing</font>

322
00:15:43,840 --> 00:15:48,370
<font color="#CCCCCC">is that it really</font><font color="#E5E5E5"> provides is 20/20</font>

323
00:15:45,910 --> 00:15:50,170
vision<font color="#CCCCCC"> into the build process at least</font>

324
00:15:48,370 --> 00:15:54,010
<font color="#E5E5E5">some aspect of the build process which</font>

325
00:15:50,170 --> 00:15:56,079
is what tools<font color="#E5E5E5"> were used what executables</font>

326
00:15:54,010 --> 00:16:01,240
were spawned<font color="#E5E5E5"> what files were read and</font>

327
00:15:56,080 --> 00:16:02,920
written to and in which order so<font color="#CCCCCC"> let's</font>

328
00:16:01,240 --> 00:16:05,050
look a bit that the<font color="#CCCCCC"> defense if it's a</font>

329
00:16:02,920 --> 00:16:07,839
graph so<font color="#E5E5E5"> you can you</font><font color="#CCCCCC"> can pass it</font><font color="#E5E5E5"> two</font>

330
00:16:05,050 --> 00:16:14,229
dots<font color="#E5E5E5"> and</font><font color="#CCCCCC"> graph this and you can</font><font color="#E5E5E5"> actually</font>

331
00:16:07,840 --> 00:16:17,920
build<font color="#E5E5E5"> cool things about it</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> going</font>

332
00:16:14,230 --> 00:16:23,170
<font color="#CCCCCC">to try</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple first which</font>

333
00:16:17,920 --> 00:16:27,520
is<font color="#E5E5E5"> some single patch elf</font><font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> single C</font>

334
00:16:23,170 --> 00:16:31,599
file<font color="#CCCCCC"> mini tool created</font><font color="#E5E5E5"> for a distro</font>

335
00:16:27,520 --> 00:16:34,810
called next which just

336
00:16:31,600 --> 00:16:36,870
<font color="#E5E5E5">fiddles with</font><font color="#CCCCCC"> the elf format internals to</font>

337
00:16:34,810 --> 00:16:41,099
<font color="#CCCCCC">do some relocation and</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> that</font>

338
00:16:36,870 --> 00:16:44,380
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> an example of real graph</font>

339
00:16:41,100 --> 00:16:46,149
from<font color="#CCCCCC"> patch shelf</font><font color="#E5E5E5"> so let's walk</font><font color="#CCCCCC"> through</font>

340
00:16:44,380 --> 00:16:47,439
that we<font color="#CCCCCC"> won't</font><font color="#E5E5E5"> folks for more complex</font>

341
00:16:46,149 --> 00:16:52,180
ones afterwards but let's walk through

342
00:16:47,440 --> 00:16:57,819
this one so at the top<font color="#CCCCCC"> I see here</font>

343
00:16:52,180 --> 00:17:00,849
collect<font color="#E5E5E5"> to some executable from GCC for</font>

344
00:16:57,819 --> 00:17:03,399
<font color="#CCCCCC">six with some PID at some timestamp</font>

345
00:17:00,850 --> 00:17:07,089
<font color="#E5E5E5">that's what this box says naturally</font>

346
00:17:03,399 --> 00:17:09,189
<font color="#CCCCCC">reads to temp files I don't know why but</font>

347
00:17:07,089 --> 00:17:12,010
<font color="#E5E5E5">it</font><font color="#CCCCCC"> does I don't know who</font><font color="#E5E5E5"> created this</font>

348
00:17:09,189 --> 00:17:13,539
temp files<font color="#E5E5E5"> and this is a dead end</font><font color="#CCCCCC"> in</font>

349
00:17:12,010 --> 00:17:17,890
terms<font color="#E5E5E5"> of graph it doesn't go anywhere</font>

350
00:17:13,539 --> 00:17:20,500
<font color="#E5E5E5">else</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> can ignore</font><font color="#CCCCCC"> that now</font><font color="#E5E5E5"> more</font>

351
00:17:17,890 --> 00:17:23,110
interestingly<font color="#E5E5E5"> I can see my make file</font>

352
00:17:20,500 --> 00:17:23,890
that's being<font color="#E5E5E5"> read by make kind of</font><font color="#CCCCCC"> make</font>

353
00:17:23,109 --> 00:17:25,839
<font color="#E5E5E5">sense right</font>

354
00:17:23,890 --> 00:17:31,380
that's what the<font color="#E5E5E5"> kind of things we would</font>

355
00:17:25,839 --> 00:17:33,730
expect of course<font color="#CCCCCC"> but here at that stage</font>

356
00:17:31,380 --> 00:17:35,380
maybe it's a filtered graph actually<font color="#CCCCCC"> in</font>

357
00:17:33,730 --> 00:17:38,110
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case I</font><font color="#E5E5E5"> don't remember exactly but</font>

358
00:17:35,380 --> 00:17:40,059
<font color="#CCCCCC">this doesn't</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> anywhere else we see</font>

359
00:17:38,110 --> 00:17:44,649
also that<font color="#CCCCCC"> bash was running under the</font>

360
00:17:40,059 --> 00:17:48,129
<font color="#E5E5E5">control well</font><font color="#CCCCCC"> nape was running</font><font color="#E5E5E5"> in shell</font>

361
00:17:44,650 --> 00:17:51,159
mode<font color="#CCCCCC"> so under the control of - so this</font>

362
00:17:48,130 --> 00:17:53,320
is a small branch of the<font color="#E5E5E5"> dead graph here</font>

363
00:17:51,159 --> 00:17:57,159
we see another<font color="#CCCCCC"> interesting things where</font>

364
00:17:53,320 --> 00:17:59,230
there's a dot depth directory with dot

365
00:17:57,159 --> 00:18:03,309
peel files<font color="#E5E5E5"> together with a</font><font color="#CCCCCC"> neck</font><font color="#E5E5E5"> file</font>

366
00:17:59,230 --> 00:18:06,700
which I'll write<font color="#E5E5E5"> again</font><font color="#CCCCCC"> thymic there's</font>

367
00:18:03,309 --> 00:18:08,289
some invocation<font color="#E5E5E5"> of G + + no idea what</font>

368
00:18:06,700 --> 00:18:10,059
it's<font color="#CCCCCC"> for maybe they're</font><font color="#E5E5E5"> doing some</font>

369
00:18:08,289 --> 00:18:11,830
configured for this this graph has been

370
00:18:10,059 --> 00:18:14,950
<font color="#CCCCCC">a bit filtered and welcome back to the</font>

371
00:18:11,830 --> 00:18:18,520
filtering afterwards now the interesting

372
00:18:14,950 --> 00:18:22,360
<font color="#E5E5E5">stuff here actually</font><font color="#CCCCCC"> let</font><font color="#E5E5E5"> me use</font><font color="#CCCCCC"> that</font>

373
00:18:18,520 --> 00:18:26,650
<font color="#E5E5E5">pointer after all first step we're</font>

374
00:18:22,360 --> 00:18:31,899
reading a dot<font color="#E5E5E5"> F file then I'm reading</font><font color="#CCCCCC"> my</font>

375
00:18:26,650 --> 00:18:35,309
patch<font color="#E5E5E5"> of that CC a few standard</font><font color="#CCCCCC"> include</font>

376
00:18:31,900 --> 00:18:35,309
provided by the tool chain and

377
00:18:35,880 --> 00:18:43,000
eventually this<font color="#E5E5E5"> is all processed by a</font>

378
00:18:38,110 --> 00:18:44,209
tool called CC 1<font color="#CCCCCC"> + which frankly until</font><font color="#E5E5E5"> I</font>

379
00:18:43,000 --> 00:18:47,450
use

380
00:18:44,210 --> 00:18:49,520
<font color="#CCCCCC">tres good I knew IDE GCC was actually</font>

381
00:18:47,450 --> 00:18:53,170
not some kind<font color="#E5E5E5"> of monolithic stuff but</font>

382
00:18:49,520 --> 00:18:56,510
many tools<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the C++ preprocessor</font>

383
00:18:53,170 --> 00:19:01,000
that transforms C code

384
00:18:56,510 --> 00:19:01,000
in assembly

385
00:19:02,060 --> 00:19:07,580
<font color="#E5E5E5">it also creates as a side</font><font color="#CCCCCC"> effect</font><font color="#E5E5E5"> some</font>

386
00:19:04,790 --> 00:19:10,879
back shelf T P alpha which is<font color="#E5E5E5"> some</font>

387
00:19:07,580 --> 00:19:15,740
internal file whatever<font color="#E5E5E5"> it is on the</font>

388
00:19:10,880 --> 00:19:18,350
bottom<font color="#E5E5E5"> branch here it invokes the the</font>

389
00:19:15,740 --> 00:19:23,630
new assembler which<font color="#E5E5E5"> eventually produce</font>

390
00:19:18,350 --> 00:19:28,899
the dollar<font color="#CCCCCC"> object file and finally</font>

391
00:19:23,630 --> 00:19:32,270
invoke the linker LD to produce

392
00:19:28,900 --> 00:19:34,520
<font color="#E5E5E5">eventually my patch</font><font color="#CCCCCC"> elf executable so</font>

393
00:19:32,270 --> 00:19:36,110
it's<font color="#E5E5E5"> actually pretty surprising when you</font>

394
00:19:34,520 --> 00:19:38,570
<font color="#E5E5E5">see the the complexity</font><font color="#CCCCCC"> in number of</font>

395
00:19:36,110 --> 00:19:43,729
<font color="#E5E5E5">steps things are going through for a</font>

396
00:19:38,570 --> 00:19:45,320
single<font color="#CCCCCC"> cc file with one include</font><font color="#E5E5E5"> there is</font>

397
00:19:43,730 --> 00:19:48,980
also stuff that they are<font color="#CCCCCC"> doing at</font><font color="#E5E5E5"> the</font>

398
00:19:45,320 --> 00:19:52,280
top which<font color="#CCCCCC"> is eventually</font><font color="#E5E5E5"> dead branch</font>

399
00:19:48,980 --> 00:19:53,810
<font color="#CCCCCC">ending in make processing some</font>

400
00:19:52,280 --> 00:19:56,780
dependency<font color="#CCCCCC"> files so there's a lot</font><font color="#E5E5E5"> of</font>

401
00:19:53,810 --> 00:19:59,409
this<font color="#CCCCCC"> peel temp and</font><font color="#E5E5E5"> dependent</font><font color="#CCCCCC"> supplies</font>

402
00:19:56,780 --> 00:20:03,399
which<font color="#E5E5E5"> are created at various</font><font color="#CCCCCC"> places</font>

403
00:19:59,410 --> 00:20:08,630
<font color="#E5E5E5">during the typical Bluetooth chain wheel</font>

404
00:20:03,400 --> 00:20:12,620
<font color="#E5E5E5">so now as I said if I say</font><font color="#CCCCCC"> patch</font><font color="#E5E5E5"> shelf</font>

405
00:20:08,630 --> 00:20:17,030
tell me what are the source well if you

406
00:20:12,620 --> 00:20:20,959
create a graph backwards the source<font color="#E5E5E5"> are</font>

407
00:20:17,030 --> 00:20:24,080
this<font color="#E5E5E5"> which are</font><font color="#CCCCCC"> the things</font><font color="#E5E5E5"> which are at</font>

408
00:20:20,960 --> 00:20:26,270
the left<font color="#CCCCCC"> end of</font><font color="#E5E5E5"> a topological sort which</font>

409
00:20:24,080 --> 00:20:31,399
have<font color="#E5E5E5"> been only</font><font color="#CCCCCC"> been read and never been</font>

410
00:20:26,270 --> 00:20:34,270
written to now if we do a bit<font color="#CCCCCC"> more</font>

411
00:20:31,400 --> 00:20:34,270
complex things

412
00:20:40,120 --> 00:20:47,570
I've probably filtered some of<font color="#E5E5E5"> its</font>

413
00:20:42,830 --> 00:20:50,779
<font color="#E5E5E5">students some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> options yeah yeah</font>

414
00:20:47,570 --> 00:21:02,928
yeah yeah in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> I probably go</font>

415
00:20:50,779 --> 00:21:05,299
<font color="#E5E5E5">ahead in some case that that usually</font>

416
00:21:02,929 --> 00:21:07,460
<font color="#E5E5E5">depends but so there's a bunch</font><font color="#CCCCCC"> of</font>

417
00:21:05,299 --> 00:21:09,860
<font color="#E5E5E5">options do filtering</font><font color="#CCCCCC"> and one of the</font>

418
00:21:07,460 --> 00:21:11,539
things you don't care<font color="#CCCCCC"> too much about in</font>

419
00:21:09,860 --> 00:21:14,299
<font color="#E5E5E5">many case would be to filter out make</font>

420
00:21:11,539 --> 00:21:16,129
files from your<font color="#E5E5E5"> graph if you're</font>

421
00:21:14,299 --> 00:21:17,389
concerned about the<font color="#E5E5E5"> source file if you</font>

422
00:21:16,129 --> 00:21:19,248
<font color="#E5E5E5">were concerned only about the</font><font color="#CCCCCC"> next file</font>

423
00:21:17,389 --> 00:21:21,110
you want<font color="#E5E5E5"> to keep that so this is</font>

424
00:21:19,249 --> 00:21:24,619
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> built from bash so that</font>

425
00:21:21,110 --> 00:21:28,309
starts to be a bit more<font color="#CCCCCC"> complicated to</font>

426
00:21:24,619 --> 00:21:34,850
the point where it's it's exceeding the

427
00:21:28,309 --> 00:21:42,168
capacity of<font color="#E5E5E5"> some of my</font><font color="#CCCCCC"> Linux distro</font><font color="#E5E5E5"> PDF</font>

428
00:21:34,850 --> 00:21:47,178
viewer so how you generate<font color="#E5E5E5"> this graph is</font>

429
00:21:42,169 --> 00:21:47,779
you have one option called graphic<font color="#E5E5E5"> sub</font>

430
00:21:47,179 --> 00:21:50,269
<font color="#CCCCCC">c'mon</font>

431
00:21:47,779 --> 00:21:56,149
trace<font color="#E5E5E5"> or command once you've done your</font>

432
00:21:50,269 --> 00:21:59,559
processing you basically<font color="#E5E5E5"> say here are my</font>

433
00:21:56,149 --> 00:21:59,559
traces build<font color="#E5E5E5"> me</font><font color="#CCCCCC"> a graph</font>

434
00:22:00,240 --> 00:22:04,320
one kind<font color="#E5E5E5"> of edge in</font><font color="#CCCCCC"> the graph or over</font>

435
00:22:02,040 --> 00:22:08,639
two different<font color="#E5E5E5"> kinds if you have an edge</font>

436
00:22:04,320 --> 00:22:11,159
where process takes one file<font color="#CCCCCC"> or</font><font color="#E5E5E5"> produce</font>

437
00:22:08,640 --> 00:22:12,990
<font color="#CCCCCC">a</font><font color="#E5E5E5"> different file but also then you have</font>

438
00:22:11,160 --> 00:22:22,020
edges in the graph<font color="#CCCCCC"> or you have a process</font>

439
00:22:12,990 --> 00:22:25,080
<font color="#CCCCCC">that creates child processes</font><font color="#E5E5E5"> yeah so the</font>

440
00:22:22,020 --> 00:22:27,620
<font color="#E5E5E5">thing is</font><font color="#CCCCCC"> that we trace process and there</font>

441
00:22:25,080 --> 00:22:30,270
sir processes we create process tree<font color="#E5E5E5"> and</font>

442
00:22:27,620 --> 00:22:33,120
the process tree gets eventually

443
00:22:30,270 --> 00:22:35,309
squashed<font color="#E5E5E5"> if</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no interesting</font>

444
00:22:33,120 --> 00:22:41,209
operation<font color="#E5E5E5"> that takes place at an</font>

445
00:22:35,309 --> 00:22:41,210
ancestor so that's why in the graph of

446
00:22:41,510 --> 00:22:48,360
<font color="#E5E5E5">in the graph if I was looking</font><font color="#CCCCCC"> at the</font>

447
00:22:44,340 --> 00:22:51,419
graph of<font color="#E5E5E5"> path shelf here we</font><font color="#CCCCCC"> conflate</font><font color="#E5E5E5"> for</font>

448
00:22:48,360 --> 00:22:54,240
instance the<font color="#E5E5E5"> fact there's bash and MV in</font>

449
00:22:51,420 --> 00:22:56,280
one process<font color="#E5E5E5"> this is actually the child</font>

450
00:22:54,240 --> 00:22:58,470
<font color="#E5E5E5">process and it conflates the executive</font>

451
00:22:56,280 --> 00:23:01,770
<font color="#E5E5E5">all from the parent process we didn't do</font>

452
00:22:58,470 --> 00:23:15,450
anything<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> just spawn</font><font color="#CCCCCC"> the</font>

453
00:23:01,770 --> 00:23:19,250
<font color="#CCCCCC">process well that's interesting because</font>

454
00:23:15,450 --> 00:23:22,520
I've stumbled on some wheels<font color="#CCCCCC"> I</font><font color="#E5E5E5"> saw that</font>

455
00:23:19,250 --> 00:23:26,580
early on<font color="#E5E5E5"> GCC for instance was always</font>

456
00:23:22,520 --> 00:23:28,050
piping for instance CC files<font color="#E5E5E5"> and CC</font><font color="#CCCCCC"> 1</font>

457
00:23:26,580 --> 00:23:32,340
<font color="#CCCCCC">plus fight to assembly but that's not</font>

458
00:23:28,050 --> 00:23:34,710
the<font color="#E5E5E5"> case I found actually</font><font color="#CCCCCC"> builds where</font>

459
00:23:32,340 --> 00:23:35,850
effectively<font color="#E5E5E5"> you had no direct files</font>

460
00:23:34,710 --> 00:23:38,460
<font color="#E5E5E5">being created at all</font>

461
00:23:35,850 --> 00:23:40,949
they were just<font color="#E5E5E5"> bite whatever magic</font>

462
00:23:38,460 --> 00:23:52,110
configuration was used I don't know but

463
00:23:40,950 --> 00:23:54,240
it's<font color="#CCCCCC"> possible yeah well you still have</font>

464
00:23:52,110 --> 00:23:55,949
socket operations in this case you see

465
00:23:54,240 --> 00:23:58,980
I'm sorry<font color="#CCCCCC"> file descriptor operations</font>

466
00:23:55,950 --> 00:24:00,870
that<font color="#E5E5E5"> take place even when you're just</font><font color="#CCCCCC"> by</font>

467
00:23:58,980 --> 00:24:02,640
playing you still<font color="#E5E5E5"> have file descriptors</font>

468
00:24:00,870 --> 00:24:05,270
<font color="#E5E5E5">and actually we're not really tracing</font>

469
00:24:02,640 --> 00:24:10,530
files<font color="#E5E5E5"> but we're tracing file descriptors</font>

470
00:24:05,270 --> 00:24:12,330
so therefore they're probably<font color="#E5E5E5"> HK is</font>

471
00:24:10,530 --> 00:24:14,310
where this<font color="#E5E5E5"> doesn't hold</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> percent</font>

472
00:24:12,330 --> 00:24:16,439
but<font color="#E5E5E5"> in practice</font>

473
00:24:14,310 --> 00:24:19,020
and that's some<font color="#CCCCCC"> of the thing</font><font color="#E5E5E5"> I'll come</font>

474
00:24:16,440 --> 00:24:21,360
back to it's actually<font color="#CCCCCC"> a bit hard at</font>

475
00:24:19,020 --> 00:24:24,960
times to<font color="#CCCCCC"> reverse-engineer</font><font color="#E5E5E5"> what happens</font>

476
00:24:21,360 --> 00:24:26,820
at the descriptor level try to making

477
00:24:24,960 --> 00:24:29,610
<font color="#E5E5E5">sense of what</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> means from a user</font>

478
00:24:26,820 --> 00:24:36,419
space perspective there's not<font color="#E5E5E5"> always a</font>

479
00:24:29,610 --> 00:24:38,399
kind<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> hundred percent one-to-one</font>

480
00:24:36,420 --> 00:24:45,090
matching<font color="#E5E5E5"> another case that's interesting</font>

481
00:24:38,400 --> 00:24:48,630
is say you have<font color="#E5E5E5"> a compiler that</font><font color="#CCCCCC"> you can</font>

482
00:24:45,090 --> 00:24:52,860
pipe files<font color="#E5E5E5"> to but this was a completely</font>

483
00:24:48,630 --> 00:24:54,570
<font color="#E5E5E5">unrelated</font><font color="#CCCCCC"> each will be built</font><font color="#E5E5E5"> to</font>

484
00:24:52,860 --> 00:24:56,459
something which is<font color="#CCCCCC"> completely related</font><font color="#E5E5E5"> to</font>

485
00:24:54,570 --> 00:25:00,659
<font color="#E5E5E5">a previous</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the use</font><font color="#E5E5E5"> case that</font>

486
00:24:56,460 --> 00:25:03,240
<font color="#E5E5E5">happens</font><font color="#CCCCCC"> too and the trick here which is</font>

487
00:25:00,660 --> 00:25:07,140
not<font color="#CCCCCC"> 100% implemented</font><font color="#E5E5E5"> is to track</font><font color="#CCCCCC"> the</font>

488
00:25:03,240 --> 00:25:11,670
<font color="#E5E5E5">life cycle</font><font color="#CCCCCC"> of file descriptors and to</font>

489
00:25:07,140 --> 00:25:14,130
the multiplex<font color="#E5E5E5"> when a given executable</font>

490
00:25:11,670 --> 00:25:18,450
looks like<font color="#E5E5E5"> it's processing several files</font>

491
00:25:14,130 --> 00:25:20,730
that are related or<font color="#CCCCCC"> it's processing</font>

492
00:25:18,450 --> 00:25:23,420
several files to write several<font color="#E5E5E5"> outputs</font>

493
00:25:20,730 --> 00:25:27,740
that<font color="#CCCCCC"> are completely unrelated there's</font>

494
00:25:23,420 --> 00:25:30,270
there's<font color="#E5E5E5"> desk works of course it's not</font>

495
00:25:27,740 --> 00:25:33,920
perfect<font color="#CCCCCC"> you know in no respect but</font>

496
00:25:30,270 --> 00:25:37,950
there's a there's ways to<font color="#E5E5E5"> handle this so</font>

497
00:25:33,920 --> 00:25:43,110
<font color="#E5E5E5">- you see on the</font><font color="#CCCCCC"> left</font><font color="#E5E5E5"> that starts to be</font>

498
00:25:37,950 --> 00:25:45,060
a bit messy interesting by the<font color="#E5E5E5"> wall so</font>

499
00:25:43,110 --> 00:25:46,709
you've seen the graph<font color="#E5E5E5"> if you have a</font>

500
00:25:45,060 --> 00:25:50,340
configure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> obliquity at some point</font>

501
00:25:46,710 --> 00:25:55,230
<font color="#E5E5E5">of</font><font color="#CCCCCC"> time you'll see a configure H and you</font>

502
00:25:50,340 --> 00:25:58,429
see how<font color="#E5E5E5"> and where and when it's used if</font>

503
00:25:55,230 --> 00:26:02,840
you were if you were<font color="#E5E5E5"> to look here</font>

504
00:25:58,430 --> 00:26:02,840
actually<font color="#E5E5E5"> I probably have a bear</font>

505
00:26:07,030 --> 00:26:14,040
I think<font color="#E5E5E5"> ocular is about to better zoom</font>

506
00:26:09,670 --> 00:26:20,710
<font color="#E5E5E5">on these on this large yes much better</font>

507
00:26:14,040 --> 00:26:24,550
so that's<font color="#E5E5E5"> another bill</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> caps it</font>

508
00:26:20,710 --> 00:26:27,810
<font color="#E5E5E5">will render eventually so you see how</font>

509
00:26:24,550 --> 00:26:30,220
files on the<font color="#E5E5E5"> left a bunch of</font><font color="#CCCCCC"> C and Rh</font>

510
00:26:27,810 --> 00:26:34,090
ends up being<font color="#E5E5E5"> multiplexed through</font>

511
00:26:30,220 --> 00:26:37,380
multiple processes<font color="#E5E5E5"> as a side note by</font><font color="#CCCCCC"> the</font>

512
00:26:34,090 --> 00:26:39,730
<font color="#CCCCCC">way in most</font><font color="#E5E5E5"> standard make new make build</font>

513
00:26:37,380 --> 00:26:44,020
<font color="#E5E5E5">there's something to be crazy that's</font>

514
00:26:39,730 --> 00:26:46,870
going on which is<font color="#E5E5E5"> the presence of RCS</font>

515
00:26:44,020 --> 00:26:48,910
files<font color="#E5E5E5"> and a lot of older version control</font>

516
00:26:46,870 --> 00:26:52,560
things are checked<font color="#CCCCCC"> over</font><font color="#E5E5E5"> and over again</font>

517
00:26:48,910 --> 00:26:55,030
and we're talking<font color="#E5E5E5"> like eventually</font>

518
00:26:52,560 --> 00:26:57,970
hundreds of thousands<font color="#E5E5E5"> or millions and</font>

519
00:26:55,030 --> 00:27:00,970
millions of<font color="#E5E5E5"> times on a large build which</font>

520
00:26:57,970 --> 00:27:03,130
could<font color="#CCCCCC"> represent roughly</font><font color="#E5E5E5"> then 20% of the</font>

521
00:27:00,970 --> 00:27:05,890
time<font color="#CCCCCC"> spanning building just checking for</font>

522
00:27:03,130 --> 00:27:08,350
<font color="#E5E5E5">the existence of non present files</font>

523
00:27:05,890 --> 00:27:09,910
I'm sure there's folks that<font color="#E5E5E5"> understand</font>

524
00:27:08,350 --> 00:27:11,980
much better make than I do and there's

525
00:27:09,910 --> 00:27:14,080
simple<font color="#E5E5E5"> flags to pass to avoid that that</font>

526
00:27:11,980 --> 00:27:16,540
<font color="#CCCCCC">kind of behavior but I've seen it seen</font>

527
00:27:14,080 --> 00:27:20,470
practice on large bills and surprising

528
00:27:16,540 --> 00:27:22,899
<font color="#E5E5E5">in some cases how some baggage gets</font>

529
00:27:20,470 --> 00:27:25,390
carried over and and just impacts every

530
00:27:22,900 --> 00:27:30,820
<font color="#E5E5E5">build by default unless you you know</font>

531
00:27:25,390 --> 00:27:35,410
<font color="#E5E5E5">about it so in the case</font><font color="#CCCCCC"> of cups</font><font color="#E5E5E5"> which is</font>

532
00:27:30,820 --> 00:27:38,639
a printing tool for Linux<font color="#E5E5E5"> we have a</font>

533
00:27:35,410 --> 00:27:42,130
bunch of<font color="#CCCCCC"> sissy files we</font><font color="#E5E5E5"> have again</font>

534
00:27:38,640 --> 00:27:46,080
assembly<font color="#E5E5E5"> that are created yes</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> blur</font>

535
00:27:42,130 --> 00:27:49,990
that's great invoked<font color="#E5E5E5"> over and over again</font>

536
00:27:46,080 --> 00:27:52,740
<font color="#E5E5E5">eventually</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> go to the far for the</font>

537
00:27:49,990 --> 00:27:55,330
right we have<font color="#CCCCCC"> a bunch of</font><font color="#E5E5E5"> data files and</font>

538
00:27:52,740 --> 00:27:59,670
we have our magic<font color="#E5E5E5"> invocations to the</font>

539
00:27:55,330 --> 00:27:59,669
linker here<font color="#E5E5E5"> LD</font>

540
00:28:00,070 --> 00:28:04,899
and so in this<font color="#E5E5E5"> case I have something</font>

541
00:28:02,530 --> 00:28:11,710
which is<font color="#E5E5E5"> probably HP GL some kind of</font>

542
00:28:04,900 --> 00:28:18,250
executable<font color="#E5E5E5"> for a HP GL printers</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a</font>

543
00:28:11,710 --> 00:28:21,400
shared object created here and I have

544
00:28:18,250 --> 00:28:24,450
<font color="#E5E5E5">some weird loops that may happen</font><font color="#CCCCCC"> I have</font>

545
00:28:21,400 --> 00:28:27,010
a bunch of<font color="#CCCCCC"> dades static libraries</font>

546
00:28:24,450 --> 00:28:28,630
archives which are created more

547
00:28:27,010 --> 00:28:31,000
executable so that starts to be a bit

548
00:28:28,630 --> 00:28:34,330
more involved at some<font color="#CCCCCC"> key at some scale</font>

549
00:28:31,000 --> 00:28:37,510
eventually<font color="#E5E5E5"> building</font><font color="#CCCCCC"> a graph unless you</font>

550
00:28:34,330 --> 00:28:40,540
have a very<font color="#CCCCCC"> large machine</font><font color="#E5E5E5"> there is many</font>

551
00:28:37,510 --> 00:28:43,350
CPUs and<font color="#E5E5E5"> a very large printer and and</font>

552
00:28:40,540 --> 00:28:46,600
big screen doesn't<font color="#CCCCCC"> make sense anymore</font>

553
00:28:43,350 --> 00:28:51,189
<font color="#CCCCCC">but it's very handy for reasonably sized</font>

554
00:28:46,600 --> 00:28:54,790
<font color="#E5E5E5">smaller build actually</font><font color="#CCCCCC"> you can even</font>

555
00:28:51,190 --> 00:28:58,210
<font color="#E5E5E5">funnily enough trace the build of</font>

556
00:28:54,790 --> 00:29:04,060
<font color="#E5E5E5">history on directories which has a kind</font>

557
00:28:58,210 --> 00:29:09,330
of a nice recursive<font color="#E5E5E5"> build to it and so</font>

558
00:29:04,060 --> 00:29:09,330
<font color="#E5E5E5">let's it needs it</font><font color="#CCCCCC"> needs ocular to</font>

559
00:29:12,760 --> 00:29:22,870
yeah so if we<font color="#CCCCCC"> zoom here we should see a</font>

560
00:29:19,600 --> 00:29:27,240
single<font color="#CCCCCC"> Astraeus executable that's</font>

561
00:29:22,870 --> 00:29:32,020
created yeah<font color="#E5E5E5"> it's there on</font><font color="#CCCCCC"> the left</font>

562
00:29:27,240 --> 00:29:37,480
and it's nicely multiplexed<font color="#E5E5E5"> in the big</font>

563
00:29:32,020 --> 00:29:41,020
<font color="#CCCCCC">LD invocation with a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> dolls</font><font color="#E5E5E5"> and so</font>

564
00:29:37,480 --> 00:29:46,690
it's<font color="#E5E5E5"> pretty straightforward build not</font>

565
00:29:41,020 --> 00:29:51,400
much to say there we have some assembly

566
00:29:46,690 --> 00:29:53,590
files which are created<font color="#E5E5E5"> which in this</font>

567
00:29:51,400 --> 00:29:55,059
case are actually it's interesting<font color="#CCCCCC"> well</font>

568
00:29:53,590 --> 00:29:57,970
there's always some assembly quad that's

569
00:29:55,059 --> 00:30:01,540
created usually in GCC build<font color="#E5E5E5"> at some</font>

570
00:29:57,970 --> 00:30:05,200
step<font color="#E5E5E5"> either from the CCE pre-processing</font>

571
00:30:01,540 --> 00:30:08,530
<font color="#CCCCCC">or the c processing</font><font color="#E5E5E5"> itself because we</font>

572
00:30:05,200 --> 00:30:12,510
don't<font color="#E5E5E5"> have we don't have</font><font color="#CCCCCC"> c++ yet in</font>

573
00:30:08,530 --> 00:30:12,510
<font color="#CCCCCC">industries</font><font color="#E5E5E5"> probably not for a long while</font>

574
00:30:13,799 --> 00:30:21,340
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so let's go back</font><font color="#CCCCCC"> to the where we</font>

575
00:30:19,360 --> 00:30:23,260
were here<font color="#E5E5E5"> so it was showing some of the</font>

576
00:30:21,340 --> 00:30:25,980
output so it's a<font color="#E5E5E5"> come online tool pretty</font>

577
00:30:23,260 --> 00:30:25,980
<font color="#E5E5E5">straightforward</font>

578
00:30:26,160 --> 00:30:32,190
come with some<font color="#CCCCCC"> help</font>

579
00:30:27,910 --> 00:30:35,850
written in<font color="#CCCCCC"> Python primarily a lot of the</font>

580
00:30:32,190 --> 00:30:38,290
<font color="#E5E5E5">heavy</font><font color="#CCCCCC"> lifting is about</font><font color="#E5E5E5"> parsing the trace</font>

581
00:30:35,850 --> 00:30:40,689
there's been some f-14s trace to make

582
00:30:38,290 --> 00:30:43,629
<font color="#CCCCCC">the towers</font><font color="#E5E5E5"> the trace</font><font color="#CCCCCC"> easier</font><font color="#E5E5E5"> to parse and</font>

583
00:30:40,690 --> 00:30:46,410
<font color="#E5E5E5">eventually that kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> tool could go</font>

584
00:30:43,630 --> 00:30:49,179
<font color="#CCCCCC">away in the</font><font color="#E5E5E5"> future all the trace parsing</font>

585
00:30:46,410 --> 00:30:53,650
<font color="#E5E5E5">but it still</font><font color="#CCCCCC"> requires a bit of</font><font color="#E5E5E5"> work</font>

586
00:30:49,179 --> 00:30:56,530
there<font color="#CCCCCC"> and a lot of options</font><font color="#E5E5E5"> and help the</font>

587
00:30:53,650 --> 00:31:01,330
<font color="#E5E5E5">general steps is you're on your trace</font>

588
00:30:56,530 --> 00:31:02,830
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> apply some filtering for</font>

589
00:31:01,330 --> 00:31:04,830
instance you may not be<font color="#E5E5E5"> interested from</font>

590
00:31:02,830 --> 00:31:10,418
<font color="#E5E5E5">a scene that comes from the tool chain</font>

591
00:31:04,830 --> 00:31:12,879
or some system<font color="#CCCCCC"> includes and then you can</font>

592
00:31:10,419 --> 00:31:19,120
do<font color="#CCCCCC"> inventories of all the reads and</font>

593
00:31:12,880 --> 00:31:21,490
<font color="#E5E5E5">writes or graphing or queries of the</font>

594
00:31:19,120 --> 00:31:25,110
relationships<font color="#E5E5E5"> from source to binary or</font>

595
00:31:21,490 --> 00:31:25,110
from any source to any<font color="#E5E5E5"> binary</font>

596
00:31:26,500 --> 00:31:32,900
and so the the<font color="#E5E5E5"> internal model is at the</font>

597
00:31:29,840 --> 00:31:36,520
bottom there's a bunch of processes

598
00:31:32,900 --> 00:31:39,790
which<font color="#E5E5E5"> are related together</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> see IDs</font>

599
00:31:36,520 --> 00:31:42,080
<font color="#E5E5E5">they hold the list of reads</font><font color="#CCCCCC"> and writes</font>

600
00:31:39,790 --> 00:31:46,700
<font color="#CCCCCC">listed is acute</font><font color="#E5E5E5"> about that were spun</font><font color="#CCCCCC"> on</font>

601
00:31:42,080 --> 00:31:48,530
<font color="#E5E5E5">forked and the children and reads and</font>

602
00:31:46,700 --> 00:31:50,600
writes<font color="#E5E5E5"> are grouped in operations where</font>

603
00:31:48,530 --> 00:31:53,750
you have a process<font color="#CCCCCC"> that with some source</font>

604
00:31:50,600 --> 00:31:57,080
<font color="#E5E5E5">well we know to feed our source code we</font>

605
00:31:53,750 --> 00:32:02,000
treat some source file<font color="#E5E5E5"> and write</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> some</font>

606
00:31:57,080 --> 00:32:03,800
<font color="#E5E5E5">target at some time</font><font color="#CCCCCC"> there's some</font>

607
00:32:02,000 --> 00:32:08,960
<font color="#CCCCCC">specific which are atomic</font><font color="#E5E5E5"> read write</font>

608
00:32:03,800 --> 00:32:11,000
like a<font color="#E5E5E5"> rename where you have a single</font>

609
00:32:08,960 --> 00:32:13,100
system<font color="#CCCCCC"> calls that's actually</font><font color="#E5E5E5"> written</font>

610
00:32:11,000 --> 00:32:15,710
right at the same time and then the

611
00:32:13,100 --> 00:32:19,070
<font color="#CCCCCC">notion of an executable and</font><font color="#E5E5E5"> there a</font>

612
00:32:15,710 --> 00:32:20,510
hierarchy then<font color="#CCCCCC"> I written the hierarchy</font>

613
00:32:19,070 --> 00:32:22,399
<font color="#CCCCCC">bottom-up</font><font color="#E5E5E5"> but that's a hierarchy</font>

614
00:32:20,510 --> 00:32:25,760
<font color="#CCCCCC">generally</font><font color="#E5E5E5"> speaking and then your</font>

615
00:32:22,400 --> 00:32:27,770
relations between each of these now the

616
00:32:25,760 --> 00:32:31,840
complication<font color="#E5E5E5"> parsing a stress I alluded</font>

617
00:32:27,770 --> 00:32:35,360
to it<font color="#CCCCCC"> the thing that's difficult</font><font color="#E5E5E5"> also is</font>

618
00:32:31,840 --> 00:32:37,220
tracing the life of a file<font color="#CCCCCC"> descriptor</font>

619
00:32:35,360 --> 00:32:41,449
because file descriptors<font color="#CCCCCC"> are the number</font>

620
00:32:37,220 --> 00:32:43,309
<font color="#E5E5E5">that gets reused</font><font color="#CCCCCC"> they get a path and</font><font color="#E5E5E5"> you</font>

621
00:32:41,450 --> 00:32:47,090
<font color="#CCCCCC">want to trace the absolute path but</font><font color="#E5E5E5"> they</font>

622
00:32:43,309 --> 00:32:48,980
get reused<font color="#E5E5E5"> over time and right</font><font color="#CCCCCC"> now in</font>

623
00:32:47,090 --> 00:32:50,419
the context<font color="#E5E5E5"> I was alluding earlier which</font>

624
00:32:48,980 --> 00:32:52,280
is<font color="#E5E5E5"> long-running agree table which</font>

625
00:32:50,420 --> 00:32:54,740
processes<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> files which are not</font>

626
00:32:52,280 --> 00:32:58,070
<font color="#E5E5E5">related the</font><font color="#CCCCCC"> de-multiplexing of this</font>

627
00:32:54,740 --> 00:33:00,280
<font color="#E5E5E5">operation is not working great and what</font>

628
00:32:58,070 --> 00:33:02,780
I think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> doing is integrating a</font>

629
00:33:00,280 --> 00:33:05,389
<font color="#CCCCCC">time line and tracing for</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> by</font>

630
00:33:02,780 --> 00:33:07,309
<font color="#CCCCCC">descripted</font><font color="#E5E5E5"> their life cycle</font><font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of</font>

631
00:33:05,390 --> 00:33:08,450
nanoseconds<font color="#E5E5E5"> from where their life to</font>

632
00:33:07,309 --> 00:33:10,850
when they're closed

633
00:33:08,450 --> 00:33:13,370
and whenever file descriptor shows up

634
00:33:10,850 --> 00:33:16,730
eventually<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the same file path or</font>

635
00:33:13,370 --> 00:33:18,979
the same file descriptor number then

636
00:33:16,730 --> 00:33:22,940
it's considered<font color="#CCCCCC"> a new one</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> it died it</font>

637
00:33:18,980 --> 00:33:25,790
was<font color="#E5E5E5"> closed before</font><font color="#CCCCCC"> so the other thing is</font>

638
00:33:22,940 --> 00:33:27,620
anything<font color="#CCCCCC"> that</font><font color="#E5E5E5"> John and non-interest</font><font color="#CCCCCC"> in</font>

639
00:33:25,790 --> 00:33:29,840
<font color="#CCCCCC">PI so actually I lied when I told</font><font color="#E5E5E5"> you it</font>

640
00:33:27,620 --> 00:33:31,219
was really<font color="#CCCCCC"> completely agnostic I didn't</font>

641
00:33:29,840 --> 00:33:32,809
need<font color="#CCCCCC"> to know anything about the build</font>

642
00:33:31,220 --> 00:33:34,570
system that's not entirely true in

643
00:33:32,809 --> 00:33:37,600
practice

644
00:33:34,570 --> 00:33:39,370
if you have a large graph<font color="#E5E5E5"> you may have a</font>

645
00:33:37,600 --> 00:33:42,310
lot<font color="#CCCCCC"> of junk</font><font color="#E5E5E5"> and you want to do some</font>

646
00:33:39,370 --> 00:33:45,429
filtering<font color="#E5E5E5"> and this filtering requires to</font>

647
00:33:42,310 --> 00:33:47,409
understand what's taking<font color="#E5E5E5"> place</font><font color="#CCCCCC"> so say</font>

648
00:33:45,430 --> 00:33:50,260
you don't<font color="#E5E5E5"> care about all the the dot</font>

649
00:33:47,410 --> 00:33:53,200
<font color="#CCCCCC">peel the</font><font color="#E5E5E5"> CPU and all these</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> files</font>

650
00:33:50,260 --> 00:33:56,470
created by<font color="#E5E5E5"> make you may want to filter</font>

651
00:33:53,200 --> 00:33:59,170
this<font color="#E5E5E5"> so the facility provided there is</font>

652
00:33:56,470 --> 00:34:02,290
<font color="#E5E5E5">to collect inventories of these reads</font>

653
00:33:59,170 --> 00:34:05,440
and writes<font color="#E5E5E5"> group them and then apply</font>

654
00:34:02,290 --> 00:34:09,790
filtering<font color="#E5E5E5"> command line vocations so you</font>

655
00:34:05,440 --> 00:34:12,639
can prune these from<font color="#E5E5E5"> your graph these</font>

656
00:34:09,790 --> 00:34:15,340
tend<font color="#CCCCCC"> to be fairly repetitive to say you</font>

657
00:34:12,639 --> 00:34:16,870
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> ignore anything</font><font color="#E5E5E5"> /tmp and what</font>

658
00:34:15,340 --> 00:34:19,390
I'm seeking there to make<font color="#E5E5E5"> it more</font>

659
00:34:16,870 --> 00:34:21,880
efficient is<font color="#CCCCCC"> to build common profiles</font>

660
00:34:19,389 --> 00:34:25,870
for typical build environments<font color="#CCCCCC"> where</font>

661
00:34:21,880 --> 00:34:28,570
<font color="#CCCCCC">this is set of Rex patents to include or</font>

662
00:34:25,870 --> 00:34:33,310
exclude<font color="#CCCCCC"> systemically certain files</font><font color="#E5E5E5"> as an</font>

663
00:34:28,570 --> 00:34:35,730
option so that<font color="#E5E5E5"> it's simpler</font><font color="#CCCCCC"> to do the</font>

664
00:34:33,310 --> 00:34:35,730
simpler things

665
00:34:39,569 --> 00:34:48,089
it's a graph it's a<font color="#E5E5E5"> directory</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can</font>

666
00:34:42,099 --> 00:34:51,899
create<font color="#CCCCCC"> both side but it's do excuse me</font>

667
00:34:48,089 --> 00:34:55,710
you can you feel<font color="#E5E5E5"> turret to process level</font>

668
00:34:51,899 --> 00:34:58,630
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> can say I</font><font color="#E5E5E5"> want to filter right</font>

669
00:34:55,710 --> 00:35:01,150
that meets this pattern or<font color="#CCCCCC"> weed</font><font color="#E5E5E5"> that</font>

670
00:34:58,630 --> 00:35:03,250
<font color="#CCCCCC">meets</font><font color="#E5E5E5"> this pattern I want to always</font>

671
00:35:01,150 --> 00:35:06,190
<font color="#CCCCCC">include a read or write that means</font>

672
00:35:03,250 --> 00:35:09,759
inspect them<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> put patterns in</font>

673
00:35:06,190 --> 00:35:14,259
<font color="#CCCCCC">in a list</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> just enter</font><font color="#E5E5E5"> a long term</font>

674
00:35:09,759 --> 00:35:17,890
online<font color="#CCCCCC"> so one of the original use case</font>

675
00:35:14,259 --> 00:35:21,460
when I build<font color="#E5E5E5"> that</font><font color="#CCCCCC"> to was</font><font color="#E5E5E5"> I was actually</font>

676
00:35:17,890 --> 00:35:26,109
<font color="#E5E5E5">doing an analysis of the code base of</font>

677
00:35:21,460 --> 00:35:29,410
large git repository<font color="#CCCCCC"> hoster</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> i will</font>

678
00:35:26,109 --> 00:35:32,170
not<font color="#CCCCCC"> name and there was one problematic</font>

679
00:35:29,410 --> 00:35:35,170
executable which was not<font color="#CCCCCC"> cheat</font><font color="#E5E5E5"> code and</font>

680
00:35:32,170 --> 00:35:37,710
we didn't knew exactly what was<font color="#CCCCCC"> the</font>

681
00:35:35,170 --> 00:35:42,369
source code<font color="#E5E5E5"> that was</font><font color="#CCCCCC"> used to</font><font color="#E5E5E5"> build it</font><font color="#CCCCCC"> so</font>

682
00:35:37,710 --> 00:35:44,619
one<font color="#CCCCCC"> of the application is to understand</font>

683
00:35:42,369 --> 00:35:49,440
for instance static dynamic<font color="#E5E5E5"> linking with</font>

684
00:35:44,619 --> 00:35:54,009
other code<font color="#CCCCCC"> especially popular code</font><font color="#E5E5E5"> but</font>

685
00:35:49,440 --> 00:35:56,470
another<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is and it's just</font><font color="#E5E5E5"> not one</font>

686
00:35:54,009 --> 00:35:58,329
of my sub project is well you<font color="#E5E5E5"> know</font>

687
00:35:56,470 --> 00:36:01,868
exactly<font color="#E5E5E5"> what the source code you</font><font color="#CCCCCC"> have</font>

688
00:35:58,329 --> 00:36:04,299
<font color="#E5E5E5">and you're distributing</font><font color="#CCCCCC"> you know if</font>

689
00:36:01,869 --> 00:36:05,920
there's a nice software package that<font color="#CCCCCC"> are</font>

690
00:36:04,299 --> 00:36:09,670
vulnerable<font color="#CCCCCC"> using it so that can be an</font>

691
00:36:05,920 --> 00:36:11,319
<font color="#E5E5E5">application once you know finally what's</font>

692
00:36:09,670 --> 00:36:14,170
the resulting license if you're

693
00:36:11,319 --> 00:36:16,538
combining<font color="#CCCCCC"> GPR non GPL code in one</font>

694
00:36:14,170 --> 00:36:18,430
executable eventually you can<font color="#CCCCCC"> conclude</font>

695
00:36:16,539 --> 00:36:20,920
with implicitly that your<font color="#CCCCCC"> result in</font>

696
00:36:18,430 --> 00:36:24,730
<font color="#CCCCCC">binary should</font><font color="#E5E5E5"> be made available under</font>

697
00:36:20,920 --> 00:36:26,769
<font color="#E5E5E5">GPL GPL compatible license</font><font color="#CCCCCC"> this</font>

698
00:36:24,730 --> 00:36:29,680
<font color="#E5E5E5">information of reliability and licensing</font>

699
00:36:26,769 --> 00:36:31,959
is not always easy<font color="#CCCCCC"> to access to on every</font>

700
00:36:29,680 --> 00:36:33,848
software packages and<font color="#CCCCCC"> and</font><font color="#E5E5E5"> starting a</font>

701
00:36:31,960 --> 00:36:37,240
small project on the<font color="#E5E5E5"> side with others to</font>

702
00:36:33,849 --> 00:36:41,309
<font color="#E5E5E5">help every fourth</font><font color="#CCCCCC"> project maintainer</font>

703
00:36:37,240 --> 00:36:44,500
<font color="#E5E5E5">provide more more clarity in</font><font color="#CCCCCC"> that domain</font>

704
00:36:41,309 --> 00:36:47,319
so<font color="#E5E5E5"> tools it's on</font><font color="#CCCCCC"> github it's really nice</font>

705
00:36:44,500 --> 00:36:49,300
<font color="#E5E5E5">on</font><font color="#CCCCCC"> a batch license and as I said</font><font color="#E5E5E5"> next</font>

706
00:36:47,319 --> 00:36:53,190
<font color="#E5E5E5">step is</font>

707
00:36:49,300 --> 00:36:55,990
a few things<font color="#E5E5E5"> by descriptive timeline</font>

708
00:36:53,190 --> 00:36:58,690
separate tool that would work on static

709
00:36:55,990 --> 00:37:01,899
analysis and<font color="#CCCCCC"> Static reversing to simapro</font>

710
00:36:58,690 --> 00:37:05,800
<font color="#CCCCCC">choosing symbols and debug symbols which</font>

711
00:37:01,900 --> 00:37:07,599
is both more complicated than simpler in

712
00:37:05,800 --> 00:37:09,670
<font color="#E5E5E5">the end it should</font><font color="#CCCCCC"> fade into</font><font color="#E5E5E5"> the same</font>

713
00:37:07,599 --> 00:37:11,530
graph<font color="#E5E5E5"> that you should be able to create</font>

714
00:37:09,670 --> 00:37:15,630
the same way or more fuzzy approach

715
00:37:11,530 --> 00:37:19,690
using signatures on the binary side and

716
00:37:15,630 --> 00:37:21,700
again<font color="#CCCCCC"> I lied I said that I would provide</font>

717
00:37:19,690 --> 00:37:23,680
<font color="#E5E5E5">also an extension</font><font color="#CCCCCC"> that that's the same</font>

718
00:37:21,700 --> 00:37:26,169
<font color="#E5E5E5">thing on the static side but I've not</font>

719
00:37:23,680 --> 00:37:29,770
finished<font color="#E5E5E5"> it I started to</font><font color="#CCCCCC"> work on the elf</font>

720
00:37:26,170 --> 00:37:32,230
<font color="#CCCCCC">makuu</font><font color="#E5E5E5"> and wimpy parsers to extract</font>

721
00:37:29,770 --> 00:37:36,150
symbols and the<font color="#CCCCCC"> bug symbols but</font><font color="#E5E5E5"> it's</font>

722
00:37:32,230 --> 00:37:36,150
still working<font color="#CCCCCC"> progress at this stage so</font>

723
00:37:36,480 --> 00:37:43,180
<font color="#CCCCCC">credit so</font><font color="#E5E5E5"> a stress really works if</font>

724
00:37:40,210 --> 00:37:46,780
you've not used it you should use it use

725
00:37:43,180 --> 00:37:49,240
<font color="#CCCCCC">it now use it every day</font><font color="#E5E5E5"> and you'll be</font>

726
00:37:46,780 --> 00:37:51,849
you'll be<font color="#CCCCCC"> really having a happier life</font>

727
00:37:49,240 --> 00:37:53,890
because of<font color="#CCCCCC"> that and you can send</font><font color="#E5E5E5"> me tree</font>

728
00:37:51,849 --> 00:37:55,990
<font color="#E5E5E5">within the room here and many other</font>

729
00:37:53,890 --> 00:37:59,319
contributors<font color="#E5E5E5"> it's actually one of the</font>

730
00:37:55,990 --> 00:38:04,270
<font color="#CCCCCC">longest running</font><font color="#E5E5E5"> very active open-source</font>

731
00:37:59,319 --> 00:38:09,640
project<font color="#E5E5E5"> it predates Linux bye good bye</font>

732
00:38:04,270 --> 00:38:12,759
good margin in terms of ancestry<font color="#E5E5E5"> and I</font>

733
00:38:09,640 --> 00:38:14,828
didn't invent anything<font color="#E5E5E5"> but that I tried</font>

734
00:38:12,760 --> 00:38:18,990
<font color="#E5E5E5">to model</font><font color="#CCCCCC"> something that implemented</font><font color="#E5E5E5"> the</font>

735
00:38:14,829 --> 00:38:21,490
paper made by folks<font color="#E5E5E5"> much smarter than me</font>

736
00:38:18,990 --> 00:38:23,740
<font color="#CCCCCC">which is the little-known people</font><font color="#E5E5E5"> that</font>

737
00:38:21,490 --> 00:38:25,169
are encourage you to read which didn't

738
00:38:23,740 --> 00:38:28,509
came with an<font color="#E5E5E5"> open source implementation</font>

739
00:38:25,170 --> 00:38:31,030
<font color="#CCCCCC">unfortunately these are the guys like</font>

740
00:38:28,510 --> 00:38:33,730
<font color="#E5E5E5">sundar Brandenburg Alka destra which are</font>

741
00:38:31,030 --> 00:38:36,130
<font color="#E5E5E5">war</font><font color="#CCCCCC"> behind the Knicks distro so then</font>

742
00:38:33,730 --> 00:38:40,329
they<font color="#CCCCCC"> know</font><font color="#E5E5E5"> a little bit of a few things</font>

743
00:38:36,130 --> 00:38:43,319
about clinics in general and that's<font color="#E5E5E5"> it</font>

744
00:38:40,329 --> 00:38:43,319
thank<font color="#E5E5E5"> you very</font><font color="#CCCCCC"> much</font>

745
00:38:49,430 --> 00:38:56,339
so I think we have one minute for

746
00:38:52,170 --> 00:38:57,920
<font color="#CCCCCC">questions maybe to</font><font color="#E5E5E5"> tell me oh we have</font>

747
00:38:56,339 --> 00:39:08,609
<font color="#CCCCCC">ten minutes oh</font><font color="#E5E5E5"> that's great</font>

748
00:38:57,920 --> 00:39:15,660
yes it's from experience about about<font color="#CCCCCC"> 20</font>

749
00:39:08,609 --> 00:39:18,390
<font color="#CCCCCC">percent so it's very acceptable</font><font color="#E5E5E5"> one of</font>

750
00:39:15,660 --> 00:39:20,569
the largest some of the larger<font color="#E5E5E5"> Iran I</font>

751
00:39:18,390 --> 00:39:27,290
made were on<font color="#E5E5E5"> full stack Android device</font>

752
00:39:20,569 --> 00:39:35,819
<font color="#E5E5E5">and using a DC desktop</font><font color="#CCCCCC"> IDN desktop with</font>

753
00:39:27,290 --> 00:39:41,960
- I am<font color="#CCCCCC"> no</font><font color="#E5E5E5"> for for quad cores each</font><font color="#CCCCCC"> with</font>

754
00:39:35,819 --> 00:39:46,069
<font color="#CCCCCC">drawers right so that was</font><font color="#E5E5E5"> 32 32 threads</font>

755
00:39:41,960 --> 00:39:46,069
with<font color="#E5E5E5"> -</font><font color="#CCCCCC"> j32</font>

756
00:39:46,220 --> 00:39:52,348
<font color="#E5E5E5">the deal was taking an hour and 20</font>

757
00:39:49,319 --> 00:39:56,009
minutes<font color="#CCCCCC"> as opposed to maybe 45 to an</font>

758
00:39:52,349 --> 00:39:58,680
hour<font color="#CCCCCC"> so it's it's it's</font><font color="#E5E5E5"> really acceptable</font>

759
00:39:56,010 --> 00:40:00,750
<font color="#E5E5E5">in practice because you don't always</font>

760
00:39:58,680 --> 00:40:04,799
need<font color="#CCCCCC"> to dive at that level</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> detail</font>

761
00:40:00,750 --> 00:40:07,950
hopefully in<font color="#CCCCCC"> your build the the time</font>

762
00:40:04,799 --> 00:40:11,849
when you want<font color="#CCCCCC"> to do that kind of deep</font>

763
00:40:07,950 --> 00:40:13,618
diving<font color="#CCCCCC"> it's it's not deterrent</font><font color="#E5E5E5"> now do</font>

764
00:40:11,849 --> 00:40:22,020
you want<font color="#E5E5E5"> to run all your bills on direct</font>

765
00:40:13,619 --> 00:40:25,260
<font color="#E5E5E5">trace probably not so the question is</font>

766
00:40:22,020 --> 00:40:32,549
how<font color="#CCCCCC"> big are the trace files big</font>

767
00:40:25,260 --> 00:40:34,049
big the point is that a<font color="#E5E5E5"> straight is</font>

768
00:40:32,549 --> 00:40:35,520
trying to<font color="#CCCCCC"> capture in something that</font>

769
00:40:34,049 --> 00:40:37,530
<font color="#E5E5E5">makes sense</font><font color="#CCCCCC"> for you man and</font><font color="#E5E5E5"> this</font>

770
00:40:35,520 --> 00:40:39,839
eventually possible everything<font color="#CCCCCC"> that</font>

771
00:40:37,530 --> 00:40:42,210
happens at the kernel<font color="#CCCCCC"> level and if</font><font color="#E5E5E5"> you</font>

772
00:40:39,839 --> 00:40:43,380
trace everything<font color="#E5E5E5"> you know there's a lot</font>

773
00:40:42,210 --> 00:40:47,609
<font color="#E5E5E5">of weird</font><font color="#CCCCCC"> stuff that happened in the</font>

774
00:40:43,380 --> 00:40:50,069
kernel like<font color="#CCCCCC"> calling Intel home to make</font>

775
00:40:47,609 --> 00:40:53,210
<font color="#E5E5E5">sure everything's fine with now on</font>

776
00:40:50,069 --> 00:40:53,210
inspector and other stuff

777
00:40:58,630 --> 00:41:01,990
is it practical

778
00:41:03,670 --> 00:41:07,520
so is it<font color="#CCCCCC"> practical for this role to run</font>

779
00:41:06,410 --> 00:41:11,930
<font color="#E5E5E5">all</font><font color="#CCCCCC"> their build on</font>

780
00:41:07,520 --> 00:41:14,960
I guess<font color="#E5E5E5"> though yes on the on</font><font color="#CCCCCC"> I dog</font>

781
00:41:11,930 --> 00:41:16,580
business<font color="#CCCCCC"> not on a regular</font><font color="#E5E5E5"> basis and</font>

782
00:41:14,960 --> 00:41:19,610
another<font color="#CCCCCC"> question that's related for</font>

783
00:41:16,580 --> 00:41:22,340
instances<font color="#CCCCCC"> would that be any application</font>

784
00:41:19,610 --> 00:41:24,890
for<font color="#E5E5E5"> reboot reproducible</font><font color="#CCCCCC"> builds which is</font>

785
00:41:22,340 --> 00:41:27,230
<font color="#E5E5E5">interesting to people and that it has</font>

786
00:41:24,890 --> 00:41:31,040
some because it helps you get<font color="#CCCCCC"> the</font>

787
00:41:27,230 --> 00:41:33,350
<font color="#CCCCCC">financing of</font><font color="#E5E5E5"> what's happening</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the</font>

788
00:41:31,040 --> 00:41:36,140
difficulty<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> because I lied it's</font>

789
00:41:33,350 --> 00:41:39,140
<font color="#E5E5E5">not</font><font color="#CCCCCC"> 100% bill agnostic</font><font color="#E5E5E5"> we need to</font>

790
00:41:36,140 --> 00:41:40,400
understand a bit<font color="#CCCCCC"> about what's cooking</font><font color="#E5E5E5"> in</font>

791
00:41:39,140 --> 00:41:43,339
terms of the<font color="#CCCCCC"> lower level</font><font color="#E5E5E5"> fire</font>

792
00:41:40,400 --> 00:41:46,480
interactions<font color="#E5E5E5"> to make full</font><font color="#CCCCCC"> use of it so</font>

793
00:41:43,340 --> 00:41:46,480
yes and<font color="#E5E5E5"> no yes</font>

794
00:41:51,040 --> 00:41:56,200
can you speak louder please<font color="#CCCCCC"> the left via</font>

795
00:41:53,530 --> 00:42:00,010
the<font color="#E5E5E5"> poles to</font><font color="#CCCCCC"> the link I guess you get</font><font color="#E5E5E5"> a</font>

796
00:41:56,200 --> 00:42:03,480
<font color="#E5E5E5">note</font><font color="#CCCCCC"> I recall</font><font color="#E5E5E5"> yes but if it's called 100</font>

797
00:42:00,010 --> 00:42:03,480
times might be important just have

798
00:42:03,500 --> 00:42:09,680
so as<font color="#E5E5E5"> part of the filtering you can also</font>

799
00:42:07,220 --> 00:42:13,720
filter<font color="#E5E5E5"> executive</font><font color="#CCCCCC"> bullet</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of your</font>

800
00:42:09,680 --> 00:42:18,529
process<font color="#E5E5E5"> block and when you remove a node</font>

801
00:42:13,720 --> 00:42:20,839
<font color="#CCCCCC">this way what happens is that I</font><font color="#E5E5E5"> rebuild</font>

802
00:42:18,530 --> 00:42:23,750
the<font color="#CCCCCC"> link between the nodes on both sides</font>

803
00:42:20,840 --> 00:42:26,030
so it's as if<font color="#E5E5E5"> in this case if you were</font>

804
00:42:23,750 --> 00:42:28,640
to prune out<font color="#E5E5E5"> the</font><font color="#CCCCCC"> LD</font><font color="#E5E5E5"> executive</font><font color="#CCCCCC"> outs as if</font>

805
00:42:26,030 --> 00:42:33,530
the<font color="#E5E5E5"> LD didn't exist</font><font color="#CCCCCC"> and you go</font><font color="#E5E5E5"> straight</font>

806
00:42:28,640 --> 00:42:35,690
from 61<font color="#CCCCCC"> to an executable eventually</font>

807
00:42:33,530 --> 00:42:43,010
which cannot<font color="#E5E5E5"> beat weird but that that</font>

808
00:42:35,690 --> 00:42:44,600
could be eventually happening which

809
00:42:43,010 --> 00:42:47,300
which is<font color="#E5E5E5"> a default by default you would</font>

810
00:42:44,600 --> 00:42:48,680
see the link process without it's always

811
00:42:47,300 --> 00:42:51,200
there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> see as many</font>

812
00:42:48,680 --> 00:42:53,509
invocations<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the build and the</font><font color="#E5E5E5"> linker</font>

813
00:42:51,200 --> 00:42:58,850
calls as there are calls<font color="#E5E5E5"> so if you're</font>

814
00:42:53,510 --> 00:43:00,710
building<font color="#CCCCCC"> lots of shell object and</font>

815
00:42:58,850 --> 00:43:03,440
executables or<font color="#E5E5E5"> kernel mode you in the</font>

816
00:43:00,710 --> 00:43:06,410
end you<font color="#E5E5E5"> will</font><font color="#CCCCCC"> have a lot of LD invocation</font>

817
00:43:03,440 --> 00:43:08,900
<font color="#CCCCCC">usually LG is</font><font color="#E5E5E5"> not too big problem in the</font>

818
00:43:06,410 --> 00:43:14,890
graph it's more all the intermediate

819
00:43:08,900 --> 00:43:14,890
<font color="#CCCCCC">step of compilation yes</font>

820
00:43:17,440 --> 00:43:22,660
<font color="#E5E5E5">non-determinism and a</font><font color="#CCCCCC"> build like</font>

821
00:43:19,250 --> 00:43:22,660
<font color="#CCCCCC">slender-billed Posner's</font>

822
00:43:23,860 --> 00:43:29,600
so the question is could it<font color="#E5E5E5"> be used to</font>

823
00:43:27,700 --> 00:43:31,370
figure<font color="#E5E5E5"> out if your build is</font>

824
00:43:29,600 --> 00:43:35,540
non-deterministic<font color="#E5E5E5"> like when it calls</font><font color="#CCCCCC"> a</font>

825
00:43:31,370 --> 00:43:37,790
system clock<font color="#CCCCCC"> in its current form</font><font color="#E5E5E5"> no</font>

826
00:43:35,540 --> 00:43:41,060
<font color="#E5E5E5">because I don't care about anything that</font>

827
00:43:37,790 --> 00:43:45,770
<font color="#E5E5E5">doesn't touch a file now the code passes</font>

828
00:43:41,060 --> 00:43:48,890
<font color="#E5E5E5">the trace and just ignores things that</font>

829
00:43:45,770 --> 00:43:52,040
<font color="#CCCCCC">don't touch files or sockets</font><font color="#E5E5E5"> you could</font>

830
00:43:48,890 --> 00:43:58,759
take the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> code and enhance it</font><font color="#CCCCCC"> to be</font>

831
00:43:52,040 --> 00:44:01,340
to trace that<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of things</font><font color="#E5E5E5"> all right</font>

832
00:43:58,760 --> 00:44:07,579
thank you<font color="#CCCCCC"> very much and</font><font color="#E5E5E5"> I'll be outside</font>

833
00:44:01,340 --> 00:44:07,579
[Applause]

