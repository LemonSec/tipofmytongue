1
00:00:42,480 --> 00:00:50,980
so if<font color="#E5E5E5"> I</font><font color="#CCCCCC"> ok so hello</font><font color="#E5E5E5"> everybody I'm</font><font color="#CCCCCC"> Quan</font>

2
00:00:48,000 --> 00:00:53,620
<font color="#E5E5E5">start with</font><font color="#CCCCCC"> a scheme I can represent as</font>

3
00:00:50,980 --> 00:00:55,569
<font color="#E5E5E5">neatly</font><font color="#CCCCCC"> two presentations later</font><font color="#E5E5E5"> and today</font>

4
00:00:53,620 --> 00:00:57,610
<font color="#CCCCCC">I'm going to present</font><font color="#E5E5E5"> you a perfect that</font>

5
00:00:55,570 --> 00:00:59,080
we call<font color="#CCCCCC"> easyJet which is</font><font color="#E5E5E5"> a library</font><font color="#CCCCCC"> that</font>

6
00:00:57,610 --> 00:01:01,449
tries<font color="#CCCCCC"> to</font><font color="#E5E5E5"> bring just-in-time combination</font>

7
00:00:59,080 --> 00:01:03,280
for sea bass bass<font color="#CCCCCC"> curves so as I said</font>

8
00:01:01,449 --> 00:01:04,690
it's a actually it's a compiler that

9
00:01:03,280 --> 00:01:07,900
<font color="#CCCCCC">sister library so it's</font><font color="#E5E5E5"> not only a</font>

10
00:01:04,690 --> 00:01:09,820
library<font color="#E5E5E5"> parent and consideration so it's</font>

11
00:01:07,900 --> 00:01:12,430
not a<font color="#E5E5E5"> critical machine a magical</font><font color="#CCCCCC"> vector</font>

12
00:01:09,820 --> 00:01:15,279
machine but optimizes your code and

13
00:01:12,430 --> 00:01:17,320
looks at it<font color="#CCCCCC"> on monitor set and that's a</font>

14
00:01:15,280 --> 00:01:19,090
lot of<font color="#E5E5E5"> tricks and it's also not the</font>

15
00:01:17,320 --> 00:01:22,630
building blocks for<font color="#CCCCCC"> a just-in-time</font>

16
00:01:19,090 --> 00:01:27,220
compiler<font color="#E5E5E5"> like the LLVM or like the new</font>

17
00:01:22,630 --> 00:01:29,560
<font color="#E5E5E5">GT is so to figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> more or less what</font>

18
00:01:27,220 --> 00:01:30,149
it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to show you a quick</font>

19
00:01:29,560 --> 00:01:33,550
example

20
00:01:30,149 --> 00:01:36,820
<font color="#E5E5E5">so here trust me this is a convolution</font>

21
00:01:33,550 --> 00:01:40,450
kernel<font color="#E5E5E5"> we are playing a convolution</font>

22
00:01:36,820 --> 00:01:42,580
kernel<font color="#E5E5E5"> over the video stream and for</font>

23
00:01:40,450 --> 00:01:45,069
<font color="#E5E5E5">example if you look at the mask the mask</font>

24
00:01:42,580 --> 00:01:46,899
size on the mask<font color="#E5E5E5"> area that may be</font>

25
00:01:45,069 --> 00:01:50,470
changed by the user<font color="#E5E5E5"> at any time during</font>

26
00:01:46,899 --> 00:01:53,080
execution<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> cup okay they</font><font color="#E5E5E5"> may</font><font color="#CCCCCC"> say</font>

27
00:01:50,470 --> 00:01:55,270
<font color="#CCCCCC">limpid same and they</font><font color="#E5E5E5"> bit same I'm going</font>

28
00:01:53,080 --> 00:01:57,369
to come<font color="#E5E5E5"> the dimensions of the image and</font>

29
00:01:55,270 --> 00:01:59,860
the number of channels<font color="#CCCCCC"> of the image this</font>

30
00:01:57,369 --> 00:02:01,479
may change depending on their<font color="#CCCCCC"> on the</font>

31
00:01:59,860 --> 00:02:03,910
<font color="#E5E5E5">video input it's not the same for</font><font color="#CCCCCC"> I work</font>

32
00:02:01,479 --> 00:02:07,119
on that<font color="#E5E5E5"> maybe for HD video or something</font>

33
00:02:03,910 --> 00:02:08,739
<font color="#E5E5E5">else we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> make some assertions appear</font>

34
00:02:07,119 --> 00:02:11,039
<font color="#E5E5E5">but we don't know</font><font color="#CCCCCC"> the exact value at</font>

35
00:02:08,739 --> 00:02:14,739
compile time that<font color="#CCCCCC"> this battles will take</font>

36
00:02:11,039 --> 00:02:16,299
so it could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> profitable to</font><font color="#E5E5E5"> generate a</font>

37
00:02:14,739 --> 00:02:18,700
specialized<font color="#CCCCCC"> version for the kernel</font>

38
00:02:16,300 --> 00:02:20,200
function<font color="#E5E5E5"> for the values that</font><font color="#CCCCCC"> are taking</font>

39
00:02:18,700 --> 00:02:22,420
actually at one<font color="#CCCCCC"> time for</font><font color="#E5E5E5"> all these</font>

40
00:02:20,200 --> 00:02:25,209
variables<font color="#E5E5E5"> how do we do this we use the</font>

41
00:02:22,420 --> 00:02:27,730
<font color="#E5E5E5">easy shin-bi ready and how do we do that</font>

42
00:02:25,209 --> 00:02:30,340
<font color="#CCCCCC">we choose the code like that</font><font color="#E5E5E5"> so we have</font>

43
00:02:27,730 --> 00:02:31,720
only<font color="#E5E5E5"> one color on one function call</font><font color="#CCCCCC"> in</font>

44
00:02:30,340 --> 00:02:34,630
the entire library

45
00:02:31,720 --> 00:02:35,709
I don't know<font color="#CCCCCC"> clear if you are familiar</font>

46
00:02:34,630 --> 00:02:39,340
<font color="#CCCCCC">with</font><font color="#E5E5E5"> STD Wynd</font>

47
00:02:35,709 --> 00:02:42,670
anybody have ever heard of it<font color="#CCCCCC"> so it's a</font>

48
00:02:39,340 --> 00:02:44,830
standard C++ construct it's really all I

49
00:02:42,670 --> 00:02:49,030
<font color="#E5E5E5">think and it allows you to get a</font>

50
00:02:44,830 --> 00:02:50,800
<font color="#E5E5E5">function object and by binding the</font>

51
00:02:49,030 --> 00:02:52,400
parameters of the<font color="#E5E5E5"> function that is</font>

52
00:02:50,800 --> 00:02:55,120
<font color="#E5E5E5">passive parameter</font>

53
00:02:52,400 --> 00:02:59,269
to respect<font color="#E5E5E5"> the same semantics as</font><font color="#CCCCCC"> st vine</font>

54
00:02:55,120 --> 00:03:02,450
<font color="#CCCCCC">because it's practical to to not come to</font>

55
00:02:59,269 --> 00:03:04,909
learn a<font color="#CCCCCC"> new interface so here what this</font>

56
00:03:02,450 --> 00:03:07,069
<font color="#CCCCCC">function call is doing is</font><font color="#E5E5E5"> specializing</font>

57
00:03:04,909 --> 00:03:08,900
it's<font color="#E5E5E5"> simulating</font><font color="#CCCCCC"> advantium a new version</font>

58
00:03:07,069 --> 00:03:09,708
of the kernel function<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to</font>

59
00:03:08,900 --> 00:03:12,920
pass<font color="#CCCCCC"> masks</font>

60
00:03:09,709 --> 00:03:15,769
<font color="#E5E5E5">maxsize and mask area</font><font color="#CCCCCC"> are the first</font>

61
00:03:12,920 --> 00:03:18,140
single<font color="#E5E5E5"> and third parameters of the new</font>

62
00:03:15,769 --> 00:03:19,970
function of the code to kernel is going

63
00:03:18,140 --> 00:03:22,189
to put the actual constant the actual

64
00:03:19,970 --> 00:03:24,140
value of<font color="#CCCCCC"> these variables in the new</font>

65
00:03:22,189 --> 00:03:26,120
version<font color="#E5E5E5"> so for example on some</font>

66
00:03:24,140 --> 00:03:28,578
optimizations<font color="#CCCCCC"> like confirm propagation</font>

67
00:03:26,120 --> 00:03:30,680
<font color="#CCCCCC">the controlling can do some extra work</font>

68
00:03:28,579 --> 00:03:32,629
now<font color="#E5E5E5"> now that they have this new</font>

69
00:03:30,680 --> 00:03:33,769
information available we are<font color="#E5E5E5"> going to</font>

70
00:03:32,629 --> 00:03:35,959
take the first and the second<font color="#CCCCCC"> parameter</font>

71
00:03:33,769 --> 00:03:40,819
of the<font color="#CCCCCC"> litigated function and we're</font>

72
00:03:35,959 --> 00:03:42,379
<font color="#CCCCCC">going to forward it to Colonel</font><font color="#E5E5E5"> us the</font>

73
00:03:40,819 --> 00:03:44,659
image seen as<font color="#E5E5E5"> the input sign on that</font>

74
00:03:42,379 --> 00:03:47,149
thing<font color="#E5E5E5"> and then we are going to</font><font color="#CCCCCC"> also fix</font>

75
00:03:44,659 --> 00:03:50,480
the image dimensions and the number of

76
00:03:47,150 --> 00:03:52,430
channels<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the values taken here and</font>

77
00:03:50,480 --> 00:03:55,369
<font color="#E5E5E5">this is going to give us</font><font color="#CCCCCC"> a function</font>

78
00:03:52,430 --> 00:03:57,680
<font color="#CCCCCC">object that we can</font><font color="#E5E5E5"> call us any function</font>

79
00:03:55,370 --> 00:04:00,109
object like we do here<font color="#CCCCCC"> and it's going</font><font color="#E5E5E5"> to</font>

80
00:03:57,680 --> 00:04:01,760
complete the same function as it's going

81
00:04:00,109 --> 00:04:03,069
to compute the<font color="#CCCCCC"> same as the code that we</font>

82
00:04:01,760 --> 00:04:05,209
seen<font color="#CCCCCC"> before</font>

83
00:04:03,069 --> 00:04:07,578
let's cool<font color="#E5E5E5"> all this is that wherever</font>

84
00:04:05,209 --> 00:04:09,799
doing able to in C++<font color="#CCCCCC"> so everything is a</font>

85
00:04:07,579 --> 00:04:12,169
C++ object we can do everything<font color="#E5E5E5"> that we</font>

86
00:04:09,799 --> 00:04:13,639
do with our typical C++ object so we<font color="#E5E5E5"> can</font>

87
00:04:12,169 --> 00:04:16,190
store it<font color="#E5E5E5"> on a vector move it around</font>

88
00:04:13,639 --> 00:04:18,560
<font color="#E5E5E5">study common or stow it on an STD map</font>

89
00:04:16,190 --> 00:04:20,298
for example<font color="#CCCCCC"> to create</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> code cache and</font>

90
00:04:18,560 --> 00:04:22,370
we<font color="#CCCCCC"> actually provide so</font><font color="#E5E5E5"> we have a second</font>

91
00:04:20,298 --> 00:04:26,270
thing that we played with<font color="#CCCCCC"> the level that</font>

92
00:04:22,370 --> 00:04:28,610
it's a simple code cache<font color="#E5E5E5"> that allows us</font>

93
00:04:26,270 --> 00:04:31,780
<font color="#CCCCCC">to</font><font color="#E5E5E5"> not you have to recompile the entire</font>

94
00:04:28,610 --> 00:04:34,550
code if you<font color="#CCCCCC"> are ready compile it before</font>

95
00:04:31,780 --> 00:04:36,229
so the syntax it's the same as before

96
00:04:34,550 --> 00:04:37,659
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> thing that it changes that</font>

97
00:04:36,229 --> 00:04:40,190
<font color="#E5E5E5">we will return</font><font color="#CCCCCC"> a constant reference</font>

98
00:04:37,659 --> 00:04:45,830
<font color="#E5E5E5">because the code it's owned</font><font color="#CCCCCC"> by the cache</font>

99
00:04:40,190 --> 00:04:46,280
and not by<font color="#E5E5E5"> there by us how does this</font>

100
00:04:45,830 --> 00:04:48,800
work

101
00:04:46,280 --> 00:04:50,989
<font color="#E5E5E5">okay I said it was a container</font><font color="#CCCCCC"> I see a</font>

102
00:04:48,800 --> 00:04:53,930
sister library<font color="#E5E5E5"> it's because it actually</font>

103
00:04:50,990 --> 00:04:56,150
<font color="#CCCCCC">needs some container health</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have</font>

104
00:04:53,930 --> 00:04:59,930
<font color="#CCCCCC">one led I'm plugging</font><font color="#E5E5E5"> that it's loaded</font>

105
00:04:56,150 --> 00:05:01,969
<font color="#E5E5E5">that is going to</font><font color="#CCCCCC"> cut</font><font color="#E5E5E5"> the cost or live a</font>

106
00:04:59,930 --> 00:05:04,669
<font color="#E5E5E5">nice way to embed the</font><font color="#CCCCCC"> bit code</font>

107
00:05:01,969 --> 00:05:06,969
associated<font color="#CCCCCC"> to a coach to alert to a</font>

108
00:05:04,669 --> 00:05:06,969
<font color="#CCCCCC">railway</font>

