1
00:00:04,580 --> 00:00:12,260
hi<font color="#E5E5E5"> everybody</font>

2
00:00:07,729 --> 00:00:16,520
<font color="#E5E5E5">I'm Christine flood</font><font color="#CCCCCC"> this is an</font><font color="#E5E5E5"> exciting</font>

3
00:00:12,260 --> 00:00:18,410
time<font color="#E5E5E5"> to be a GC</font><font color="#CCCCCC"> weenie</font><font color="#E5E5E5"> there's for the</font>

4
00:00:16,520 --> 00:00:22,160
first time in a decade<font color="#CCCCCC"> we have two new</font>

5
00:00:18,410 --> 00:00:24,050
collectors happening in<font color="#CCCCCC"> open JDK plus g1</font>

6
00:00:22,160 --> 00:00:26,830
<font color="#CCCCCC">is</font><font color="#E5E5E5"> getting better and</font><font color="#CCCCCC"> better</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

7
00:00:24,050 --> 00:00:29,750
<font color="#CCCCCC">time</font><font color="#E5E5E5"> so I wanted to sort of frame a</font>

8
00:00:26,830 --> 00:00:32,570
conversation around how do we actually

9
00:00:29,750 --> 00:00:35,420
<font color="#E5E5E5">compare these collectors and how do you</font>

10
00:00:32,570 --> 00:00:38,930
<font color="#E5E5E5">tell which one is better right we really</font>

11
00:00:35,420 --> 00:00:41,000
want to have a technical discussion

12
00:00:38,930 --> 00:00:43,129
<font color="#E5E5E5">about collectors rather than a</font><font color="#CCCCCC"> political</font>

13
00:00:41,000 --> 00:00:47,479
discussion<font color="#E5E5E5"> and that's what I'm hoping to</font>

14
00:00:43,129 --> 00:00:49,280
<font color="#E5E5E5">do with this talk</font><font color="#CCCCCC"> it's sort of it might</font>

15
00:00:47,479 --> 00:00:50,570
<font color="#E5E5E5">be if you're</font><font color="#CCCCCC"> a real GC wienie it's going</font>

16
00:00:49,280 --> 00:00:52,839
to be obvious<font color="#CCCCCC"> and if you don't know</font>

17
00:00:50,570 --> 00:00:55,489
anything<font color="#E5E5E5"> about garbage collection</font><font color="#CCCCCC"> then</font>

18
00:00:52,839 --> 00:00:56,629
it's<font color="#E5E5E5"> probably going to be kind</font><font color="#CCCCCC"> of not</font>

19
00:00:55,489 --> 00:00:59,059
<font color="#CCCCCC">that interesting but if you're in the</font>

20
00:00:56,629 --> 00:01:00,920
middle<font color="#E5E5E5"> hopefully this will get</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> on</font>

21
00:00:59,059 --> 00:01:05,658
the<font color="#E5E5E5"> same page in terms of what's</font>

22
00:01:00,920 --> 00:01:07,220
important<font color="#CCCCCC"> I did</font><font color="#E5E5E5"> this talk and</font><font color="#CCCCCC"> Alexei</font>

23
00:01:05,659 --> 00:01:08,299
gave me a lot of<font color="#CCCCCC"> feedback so I put his</font>

24
00:01:07,220 --> 00:01:09,770
name<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the slide but if there's</font>

25
00:01:08,299 --> 00:01:14,570
anything that's<font color="#E5E5E5"> wrong or a mistake it's</font>

26
00:01:09,770 --> 00:01:18,830
mine thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for that vote</font>

27
00:01:14,570 --> 00:01:20,300
<font color="#E5E5E5">of support</font><font color="#CCCCCC"> okay so what do we really</font>

28
00:01:18,830 --> 00:01:22,070
<font color="#CCCCCC">care about when we're measuring GC</font>

29
00:01:20,300 --> 00:01:24,979
performance people<font color="#E5E5E5"> show pause times</font>

30
00:01:22,070 --> 00:01:27,110
people show throughput<font color="#E5E5E5"> people show a</font>

31
00:01:24,980 --> 00:01:29,120
footprint<font color="#E5E5E5"> footprint is actually getting</font>

32
00:01:27,110 --> 00:01:30,530
<font color="#CCCCCC">more and</font><font color="#E5E5E5"> more important and it's one of</font>

33
00:01:29,120 --> 00:01:33,320
<font color="#E5E5E5">those things</font><font color="#CCCCCC"> that up until now has been</font>

34
00:01:30,530 --> 00:01:35,720
<font color="#E5E5E5">pretty much hidden in the JVM you have a</font>

35
00:01:33,320 --> 00:01:37,369
card table nobody<font color="#E5E5E5"> talks about it</font><font color="#CCCCCC"> the</font>

36
00:01:35,720 --> 00:01:39,590
<font color="#CCCCCC">container folks all say you know I have</font>

37
00:01:37,370 --> 00:01:41,450
a<font color="#CCCCCC"> 200 you know 200</font><font color="#E5E5E5"> megabyte heap how</font>

38
00:01:39,590 --> 00:01:43,220
come my process is using<font color="#CCCCCC"> 400 megabytes</font>

39
00:01:41,450 --> 00:01:45,650
<font color="#E5E5E5">and that's because there's other data</font>

40
00:01:43,220 --> 00:01:48,380
structures inside and we need to talk

41
00:01:45,650 --> 00:01:50,270
<font color="#CCCCCC">about those now</font><font color="#E5E5E5"> so these are sort</font><font color="#CCCCCC"> of the</font>

42
00:01:48,380 --> 00:01:51,770
<font color="#CCCCCC">three metrics that I'd like us to talk</font>

43
00:01:50,270 --> 00:01:54,830
<font color="#E5E5E5">about when we're talking</font><font color="#CCCCCC"> about different</font>

44
00:01:51,770 --> 00:01:56,929
GC algorithms you know how fast do I get

45
00:01:54,830 --> 00:01:59,658
my answer what's the end and<font color="#E5E5E5"> run time</font><font color="#CCCCCC"> I</font>

46
00:01:56,930 --> 00:02:02,690
want<font color="#E5E5E5"> to talk about the footprint how</font>

47
00:01:59,659 --> 00:02:04,909
much memory does the<font color="#CCCCCC"> program use all of</font>

48
00:02:02,690 --> 00:02:06,408
it measured externally so I don't want

49
00:02:04,909 --> 00:02:08,810
the<font color="#E5E5E5"> program reporting it I want to get</font>

50
00:02:06,409 --> 00:02:11,150
it<font color="#E5E5E5"> from external tools and the</font>

51
00:02:08,810 --> 00:02:13,250
responsiveness<font color="#E5E5E5"> again I want this from</font>

52
00:02:11,150 --> 00:02:14,600
<font color="#E5E5E5">external tools right I don't</font><font color="#CCCCCC"> know if you</font>

53
00:02:13,250 --> 00:02:16,250
guys know<font color="#CCCCCC"> it but sometimes</font><font color="#E5E5E5"> when you look</font>

54
00:02:14,600 --> 00:02:17,750
<font color="#E5E5E5">at your GC logs they tell you the amount</font>

55
00:02:16,250 --> 00:02:20,030
<font color="#E5E5E5">of time you've actually spent in GC</font>

56
00:02:17,750 --> 00:02:21,350
and not<font color="#E5E5E5"> really the amount of time it</font>

57
00:02:20,030 --> 00:02:23,480
took to<font color="#CCCCCC"> stop all the threads</font><font color="#E5E5E5"> and start</font>

58
00:02:21,350 --> 00:02:25,400
<font color="#CCCCCC">GC and stop GC and start all the threads</font>

59
00:02:23,480 --> 00:02:28,130
<font color="#E5E5E5">again so I really want an external</font>

60
00:02:25,400 --> 00:02:29,330
measurement<font color="#E5E5E5"> of what are the pauses and I</font>

61
00:02:28,130 --> 00:02:30,620
want to be able<font color="#CCCCCC"> to have a metric which</font>

62
00:02:29,330 --> 00:02:35,570
we'll talk about in<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> while</font><font color="#CCCCCC"> about</font>

63
00:02:30,620 --> 00:02:36,830
<font color="#CCCCCC">what that is</font><font color="#E5E5E5"> so how do you manage your</font>

64
00:02:35,570 --> 00:02:39,049
<font color="#E5E5E5">throughput this is one of those things</font>

65
00:02:36,830 --> 00:02:41,330
that's really<font color="#E5E5E5"> hard back in</font><font color="#CCCCCC"> the day I've</font>

66
00:02:39,050 --> 00:02:44,030
<font color="#CCCCCC">been doing this</font><font color="#E5E5E5"> off and on for a long</font>

67
00:02:41,330 --> 00:02:46,160
<font color="#CCCCCC">time and we</font><font color="#E5E5E5"> used to make</font><font color="#CCCCCC"> a run 10 times</font>

68
00:02:44,030 --> 00:02:48,920
<font color="#CCCCCC">and cross out the</font><font color="#E5E5E5"> highest cross off the</font>

69
00:02:46,160 --> 00:02:51,410
<font color="#E5E5E5">lowest</font><font color="#CCCCCC"> average the rest it</font><font color="#E5E5E5"> really</font>

70
00:02:48,920 --> 00:02:52,850
wall clock time is hard<font color="#E5E5E5"> and I'll talk</font>

71
00:02:51,410 --> 00:02:54,980
about<font color="#E5E5E5"> that a little bit more but</font><font color="#CCCCCC"> we also</font>

72
00:02:52,850 --> 00:02:57,070
have thanks to<font color="#E5E5E5"> Alexei we have</font><font color="#CCCCCC"> jmh and</font>

73
00:02:54,980 --> 00:03:00,590
that does a lot of<font color="#E5E5E5"> this for you</font>

74
00:02:57,070 --> 00:03:02,420
so<font color="#E5E5E5"> for wall clock time I just use time</font>

75
00:03:00,590 --> 00:03:03,590
to measure it and this is<font color="#E5E5E5"> actually a</font>

76
00:03:02,420 --> 00:03:05,030
little<font color="#E5E5E5"> bit I mean this looks really</font>

77
00:03:03,590 --> 00:03:06,290
<font color="#E5E5E5">boring but if you look at it it's even</font>

78
00:03:05,030 --> 00:03:07,400
<font color="#E5E5E5">got a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> interesting things in</font><font color="#CCCCCC"> it</font>

79
00:03:06,290 --> 00:03:09,560
right

80
00:03:07,400 --> 00:03:11,270
I picked a program that I'm calling

81
00:03:09,560 --> 00:03:13,220
<font color="#CCCCCC">Scooby that is really hard for the</font>

82
00:03:11,270 --> 00:03:14,300
garbage collector<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I know a lot</font>

83
00:03:13,220 --> 00:03:15,680
about garbage collection I know how to

84
00:03:14,300 --> 00:03:17,030
make a program<font color="#E5E5E5"> that's going</font><font color="#CCCCCC"> to be hard</font>

85
00:03:15,680 --> 00:03:20,420
and make the garbage collector miserable

86
00:03:17,030 --> 00:03:22,580
<font color="#E5E5E5">and that's what this</font><font color="#CCCCCC"> is here you can see</font>

87
00:03:20,420 --> 00:03:24,798
<font color="#CCCCCC">that when</font><font color="#E5E5E5"> you run parallel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> serial</font>

88
00:03:22,580 --> 00:03:27,380
parallel does take you know<font color="#E5E5E5"> a</font>

89
00:03:24,799 --> 00:03:29,540
millisecond<font color="#E5E5E5"> and a half less but look at</font>

90
00:03:27,380 --> 00:03:31,450
how much time the user<font color="#CCCCCC"> spend it spent</font>

91
00:03:29,540 --> 00:03:33,829
like a minute in<font color="#E5E5E5"> 19 seconds of CPU power</font>

92
00:03:31,450 --> 00:03:35,390
<font color="#E5E5E5">right if you're trying to measure your</font>

93
00:03:33,830 --> 00:03:37,549
CPU cycles that's something that you

94
00:03:35,390 --> 00:03:39,260
might<font color="#CCCCCC"> want to keep in mind when you're</font>

95
00:03:37,549 --> 00:03:43,549
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to to talk</font><font color="#CCCCCC"> about two</font><font color="#E5E5E5"> different</font>

96
00:03:39,260 --> 00:03:45,320
garbage collectors wall clock time is a

97
00:03:43,549 --> 00:03:47,090
bad measurement right<font color="#E5E5E5"> it's not</font>

98
00:03:45,320 --> 00:03:49,269
repeatable<font color="#CCCCCC"> I just did two runs</font><font color="#E5E5E5"> of the</font>

99
00:03:47,090 --> 00:03:53,329
same thing and there's a difference of

100
00:03:49,269 --> 00:03:55,790
<font color="#E5E5E5">three milliseconds or thereabouts</font><font color="#CCCCCC"> so you</font>

101
00:03:53,329 --> 00:03:57,380
know don't<font color="#E5E5E5"> use this unless you're</font>

102
00:03:55,790 --> 00:04:02,239
<font color="#E5E5E5">running something really big like</font><font color="#CCCCCC"> spec</font>

103
00:03:57,380 --> 00:04:04,760
<font color="#CCCCCC">to</font><font color="#E5E5E5"> ABB don't use wall clock time use the</font>

104
00:04:02,239 --> 00:04:07,310
micro benchmark harness here I<font color="#E5E5E5"> just ran</font>

105
00:04:04,760 --> 00:04:09,920
<font color="#CCCCCC">again I'm naming</font><font color="#E5E5E5"> my program silly things</font>

106
00:04:07,310 --> 00:04:12,790
<font color="#E5E5E5">but if</font><font color="#CCCCCC"> you use</font><font color="#E5E5E5"> jmh you can get a much</font>

107
00:04:09,920 --> 00:04:16,159
better metric you can<font color="#E5E5E5"> say you know with</font>

108
00:04:12,790 --> 00:04:20,839
<font color="#CCCCCC">99.9%</font><font color="#E5E5E5"> certainty that it's gonna be</font>

109
00:04:16,160 --> 00:04:23,120
between 254 and 294 right so in ops per

110
00:04:20,839 --> 00:04:24,469
minute so you get you get a confidence

111
00:04:23,120 --> 00:04:26,690
<font color="#CCCCCC">interval and</font><font color="#E5E5E5"> this is something you</font>

112
00:04:24,470 --> 00:04:28,250
<font color="#CCCCCC">really can use to compare to garbage</font>

113
00:04:26,690 --> 00:04:30,590
collectors it's something that's

114
00:04:28,250 --> 00:04:32,979
<font color="#CCCCCC">repeatable and reasonable to use as a</font>

115
00:04:30,590 --> 00:04:32,979
metric

116
00:04:33,490 --> 00:04:38,630
so this talk is<font color="#E5E5E5"> a little schizophrenic</font>

117
00:04:36,320 --> 00:04:39,650
<font color="#E5E5E5">bear with me it's partially what you</font>

118
00:04:38,630 --> 00:04:41,150
want to do to make sure<font color="#E5E5E5"> your garbage</font>

119
00:04:39,650 --> 00:04:42,349
collectors but it's also what you want

120
00:04:41,150 --> 00:04:44,210
to do if your<font color="#E5E5E5"> garbage collector isn't</font>

121
00:04:42,350 --> 00:04:45,470
performing<font color="#E5E5E5"> because that's what I know</font>

122
00:04:44,210 --> 00:04:46,820
how<font color="#CCCCCC"> to do when I want to</font><font color="#E5E5E5"> make sure</font><font color="#CCCCCC"> that</font>

123
00:04:45,470 --> 00:04:51,770
we're<font color="#CCCCCC"> all talking</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> thing</font>

124
00:04:46,820 --> 00:04:54,770
so I use perc and it tells you

125
00:04:51,770 --> 00:04:56,150
instruction<font color="#E5E5E5"> counts cycle counts they can</font>

126
00:04:54,770 --> 00:04:59,030
be different<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> can be important</font>

127
00:04:56,150 --> 00:05:00,770
<font color="#CCCCCC">it can tell you cache misses way back</font><font color="#E5E5E5"> in</font>

128
00:04:59,030 --> 00:05:02,570
the day cache misses were the thing for

129
00:05:00,770 --> 00:05:04,580
parallel GC finding out all<font color="#E5E5E5"> the global</font>

130
00:05:02,570 --> 00:05:07,490
variables and getting rid of<font color="#E5E5E5"> them that's</font>

131
00:05:04,580 --> 00:05:08,900
an important metric<font color="#E5E5E5"> TLB misses basically</font>

132
00:05:07,490 --> 00:05:10,880
<font color="#E5E5E5">these</font><font color="#CCCCCC"> are all the metrics</font><font color="#E5E5E5"> that you can</font>

133
00:05:08,900 --> 00:05:12,679
<font color="#E5E5E5">look at to see how well your garbage</font>

134
00:05:10,880 --> 00:05:15,110
collector is performing<font color="#E5E5E5"> and it does</font>

135
00:05:12,680 --> 00:05:18,110
differ<font color="#CCCCCC"> right you can get</font><font color="#E5E5E5"> different cache</font>

136
00:05:15,110 --> 00:05:19,580
behavior<font color="#CCCCCC"> depending on whether you do</font>

137
00:05:18,110 --> 00:05:22,700
breadth-first or depth-first search of

138
00:05:19,580 --> 00:05:24,770
your tree<font color="#E5E5E5"> when you copy objects</font><font color="#CCCCCC"> you can</font>

139
00:05:22,700 --> 00:05:26,719
get you can rearrange your objects<font color="#E5E5E5"> in a</font>

140
00:05:24,770 --> 00:05:28,430
way to get<font color="#CCCCCC"> better cache performance so I</font>

141
00:05:26,720 --> 00:05:33,050
<font color="#CCCCCC">think these are all metrics of how well</font>

142
00:05:28,430 --> 00:05:34,760
your garbage collector is<font color="#E5E5E5"> behaving so as</font>

143
00:05:33,050 --> 00:05:36,320
I said this is<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> Cisco</font><font color="#CCCCCC"> Fenner</font>

144
00:05:34,760 --> 00:05:37,789
schizophrenic but<font color="#E5E5E5"> I wanted to show you</font>

145
00:05:36,320 --> 00:05:39,770
exactly what I do

146
00:05:37,790 --> 00:05:43,160
when I want to get an instruction count

147
00:05:39,770 --> 00:05:44,930
<font color="#CCCCCC">I don't know if you guys use perf</font><font color="#E5E5E5"> but</font>

148
00:05:43,160 --> 00:05:46,490
you can also inject<font color="#E5E5E5"> the</font><font color="#CCCCCC"> jittered symbols</font>

149
00:05:44,930 --> 00:05:49,490
into perf so you can see<font color="#E5E5E5"> exactly what's</font>

150
00:05:46,490 --> 00:05:51,169
<font color="#E5E5E5">going on when you run it and you can get</font>

151
00:05:49,490 --> 00:05:52,940
a report<font color="#E5E5E5"> that gives you where you're</font>

152
00:05:51,169 --> 00:05:57,740
spending your<font color="#CCCCCC"> time</font><font color="#E5E5E5"> so for this</font>

153
00:05:52,940 --> 00:06:00,950
particular<font color="#E5E5E5"> torturous example we're</font>

154
00:05:57,740 --> 00:06:04,850
spending almost<font color="#E5E5E5"> 90% of our</font><font color="#CCCCCC"> time in the</font>

155
00:06:00,950 --> 00:06:06,590
JVM it's all in garbage collection<font color="#CCCCCC"> all</font>

156
00:06:04,850 --> 00:06:08,120
right you can see here<font color="#E5E5E5"> I'm picking on</font>

157
00:06:06,590 --> 00:06:09,229
parallel GC<font color="#E5E5E5"> because it's one of the</font>

158
00:06:08,120 --> 00:06:11,510
older garbage collectors and there's

159
00:06:09,230 --> 00:06:13,550
nobody's<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> search mate is at me but</font>

160
00:06:11,510 --> 00:06:14,719
you can<font color="#E5E5E5"> see that here you know you're</font>

161
00:06:13,550 --> 00:06:16,480
<font color="#CCCCCC">spending</font><font color="#E5E5E5"> eighty eight percent</font><font color="#CCCCCC"> of your</font>

162
00:06:14,720 --> 00:06:19,010
time<font color="#E5E5E5"> on garbage collection</font>

163
00:06:16,480 --> 00:06:21,320
this is an important sort of<font color="#E5E5E5"> metric to</font>

164
00:06:19,010 --> 00:06:23,120
run so you can see how well your garbage

165
00:06:21,320 --> 00:06:29,630
collector<font color="#E5E5E5"> is performing</font><font color="#CCCCCC"> if you had a</font>

166
00:06:23,120 --> 00:06:31,580
<font color="#E5E5E5">really good garbage collector you know</font>

167
00:06:29,630 --> 00:06:32,990
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> jaded code would</font><font color="#E5E5E5"> be running</font>

168
00:06:31,580 --> 00:06:34,789
would<font color="#CCCCCC"> be a much higher percentage of</font>

169
00:06:32,990 --> 00:06:38,000
what was<font color="#E5E5E5"> going on or if you had a</font>

170
00:06:34,790 --> 00:06:42,260
<font color="#E5E5E5">program that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> less perverse but</font><font color="#CCCCCC"> just</font>

171
00:06:38,000 --> 00:06:44,330
to show<font color="#E5E5E5"> you what you can see in I've run</font>

172
00:06:42,260 --> 00:06:44,539
those you can also run<font color="#CCCCCC"> perf stat to give</font>

173
00:06:44,330 --> 00:06:47,150
you

174
00:06:44,540 --> 00:06:49,130
<font color="#CCCCCC">high-level overview</font><font color="#E5E5E5"> of what's going on</font>

175
00:06:47,150 --> 00:06:51,640
<font color="#E5E5E5">just to give you an idea</font><font color="#CCCCCC"> of how well</font><font color="#E5E5E5"> the</font>

176
00:06:49,130 --> 00:06:54,320
garbage collector<font color="#CCCCCC"> is working</font>

177
00:06:51,640 --> 00:06:56,510
measuring footprint<font color="#CCCCCC"> this is important</font>

178
00:06:54,320 --> 00:06:59,210
how big how much memory<font color="#E5E5E5"> are you actually</font>

179
00:06:56,510 --> 00:07:01,280
<font color="#CCCCCC">using and I gave you two tools here</font>

180
00:06:59,210 --> 00:07:04,010
because they're sort<font color="#E5E5E5"> of filling a</font>

181
00:07:01,280 --> 00:07:09,320
different niche in my mind<font color="#E5E5E5"> right</font><font color="#CCCCCC"> P map</font>

182
00:07:04,010 --> 00:07:11,810
will tell<font color="#CCCCCC"> you will give you a sort of a</font>

183
00:07:09,320 --> 00:07:14,000
static<font color="#E5E5E5"> view of what's what's there but I</font>

184
00:07:11,810 --> 00:07:16,340
prefer top because it can give you sort

185
00:07:14,000 --> 00:07:18,800
of an<font color="#CCCCCC"> over time how much memory am i</font>

186
00:07:16,340 --> 00:07:21,380
using<font color="#E5E5E5"> and the thing that's</font><font color="#CCCCCC"> interesting</font>

187
00:07:18,800 --> 00:07:22,820
with<font color="#E5E5E5"> this is you can actually see while</font>

188
00:07:21,380 --> 00:07:25,070
watching<font color="#E5E5E5"> top that some garbage</font>

189
00:07:22,820 --> 00:07:27,920
collectors<font color="#E5E5E5"> give back memory when they're</font>

190
00:07:25,070 --> 00:07:30,020
not using<font color="#E5E5E5"> it</font><font color="#CCCCCC"> right so if you've</font>

191
00:07:27,920 --> 00:07:31,940
provisioned your heap to be between you

192
00:07:30,020 --> 00:07:34,700
know<font color="#CCCCCC"> ten megabytes</font><font color="#E5E5E5"> and two gigabytes and</font>

193
00:07:31,940 --> 00:07:36,320
you get into a<font color="#E5E5E5"> steady state does the</font>

194
00:07:34,700 --> 00:07:39,020
garbage collector give the<font color="#E5E5E5"> memory back</font>

195
00:07:36,320 --> 00:07:41,240
to<font color="#CCCCCC"> the LS this is really important</font><font color="#E5E5E5"> when</font>

196
00:07:39,020 --> 00:07:43,760
you're<font color="#E5E5E5"> running</font><font color="#CCCCCC"> in a container</font><font color="#E5E5E5"> and you've</font>

197
00:07:41,240 --> 00:07:46,040
got your process<font color="#E5E5E5"> that's sort of quest</font>

198
00:07:43,760 --> 00:07:48,349
<font color="#E5E5E5">and it's not it doesn't need all that</font>

199
00:07:46,040 --> 00:07:49,460
<font color="#CCCCCC">much space</font><font color="#E5E5E5"> anymore so this is one</font><font color="#CCCCCC"> of</font>

200
00:07:48,350 --> 00:07:51,950
<font color="#CCCCCC">those metrics you might want to think</font>

201
00:07:49,460 --> 00:07:56,690
about if this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> important</font><font color="#CCCCCC"> to you what</font>

202
00:07:51,950 --> 00:07:58,400
is the memory<font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> over time and so</font>

203
00:07:56,690 --> 00:07:59,630
what tools do<font color="#CCCCCC"> we have to look at our</font>

204
00:07:58,400 --> 00:08:02,810
memory footprint and figure out what's

205
00:07:59,630 --> 00:08:05,090
<font color="#E5E5E5">going on</font><font color="#CCCCCC"> native memory tracking again</font>

206
00:08:02,810 --> 00:08:06,440
<font color="#E5E5E5">I've got the command</font><font color="#CCCCCC"> lines here mostly</font>

207
00:08:05,090 --> 00:08:08,150
<font color="#E5E5E5">just so that if you guys are sitting</font>

208
00:08:06,440 --> 00:08:10,910
<font color="#E5E5E5">there you can look at them and just copy</font>

209
00:08:08,150 --> 00:08:13,070
and paste them<font color="#CCCCCC"> but it's interesting</font><font color="#E5E5E5"> to</font>

210
00:08:10,910 --> 00:08:15,500
<font color="#CCCCCC">look at what</font><font color="#E5E5E5"> native tracking tells you</font>

211
00:08:13,070 --> 00:08:17,960
where your memory is going right so

212
00:08:15,500 --> 00:08:23,630
here's parallel GC<font color="#E5E5E5"> and serial GC</font><font color="#CCCCCC"> they're</font>

213
00:08:17,960 --> 00:08:26,210
heaps<font color="#E5E5E5"> are the same size but you can see</font>

214
00:08:23,630 --> 00:08:28,190
that parallel GC<font color="#E5E5E5"> has more</font><font color="#CCCCCC"> threads</font><font color="#E5E5E5"> so it</font>

215
00:08:26,210 --> 00:08:29,989
uses<font color="#CCCCCC"> more thread memory which makes</font>

216
00:08:28,190 --> 00:08:32,140
<font color="#E5E5E5">sense it didn't at first but when</font><font color="#CCCCCC"> I</font>

217
00:08:29,990 --> 00:08:35,780
looked<font color="#E5E5E5"> at it so okay that makes sense</font>

218
00:08:32,140 --> 00:08:38,870
<font color="#CCCCCC">the GC internal data structures are</font>

219
00:08:35,780 --> 00:08:42,380
different<font color="#CCCCCC"> sizes so parallel GC has more</font>

220
00:08:38,870 --> 00:08:45,320
data structures<font color="#CCCCCC"> and</font><font color="#E5E5E5"> make sure that's</font>

221
00:08:42,380 --> 00:08:50,630
right<font color="#E5E5E5"> they're about the same</font><font color="#CCCCCC"> and</font>

222
00:08:45,320 --> 00:08:52,040
committed<font color="#E5E5E5"> oh no so 105 Vega bytes versus</font>

223
00:08:50,630 --> 00:08:54,620
<font color="#CCCCCC">six</font><font color="#E5E5E5"> megabytes in terms of GC data</font>

224
00:08:52,040 --> 00:08:57,250
structures<font color="#E5E5E5"> so basically you can you want</font>

225
00:08:54,620 --> 00:09:00,940
to look at how<font color="#E5E5E5"> much extra</font><font color="#CCCCCC"> memory or</font><font color="#E5E5E5"> your</font>

226
00:08:57,250 --> 00:09:03,490
GC<font color="#E5E5E5"> is using right it's it's not really</font>

227
00:09:00,940 --> 00:09:05,230
fair<font color="#CCCCCC"> okay I'm gonna</font><font color="#E5E5E5"> be honest it's not</font>

228
00:09:03,490 --> 00:09:07,330
<font color="#E5E5E5">really fair to</font><font color="#CCCCCC"> blame</font><font color="#E5E5E5"> Shenandoah for the</font>

229
00:09:05,230 --> 00:09:09,460
extra forwarding pointer<font color="#E5E5E5"> that we keep in</font>

230
00:09:07,330 --> 00:09:10,780
the<font color="#E5E5E5"> heap unless you also account for the</font>

231
00:09:09,460 --> 00:09:13,090
card tables and all the other<font color="#CCCCCC"> their</font>

232
00:09:10,780 --> 00:09:14,709
<font color="#E5E5E5">external data structures that</font><font color="#CCCCCC"> the other</font>

233
00:09:13,090 --> 00:09:16,630
<font color="#E5E5E5">garbage collectors are using so you</font>

234
00:09:14,710 --> 00:09:20,490
really want to go to<font color="#CCCCCC"> residence</font><font color="#E5E5E5"> set size</font>

235
00:09:16,630 --> 00:09:20,490
to sort<font color="#E5E5E5"> of compare them apples to apples</font>

236
00:09:20,970 --> 00:09:26,080
<font color="#CCCCCC">if you're trying to diagnose your</font>

237
00:09:23,860 --> 00:09:28,600
garbage collector<font color="#CCCCCC"> I know this tool is no</font>

238
00:09:26,080 --> 00:09:33,310
longer supported I'm<font color="#E5E5E5"> gonna be done way</font>

239
00:09:28,600 --> 00:09:34,780
ahead of<font color="#E5E5E5"> time don't worry about it</font><font color="#CCCCCC"> J</font><font color="#E5E5E5"> hat</font>

240
00:09:33,310 --> 00:09:37,239
it's not support<font color="#CCCCCC"> anything we're but it's</font>

241
00:09:34,780 --> 00:09:39,310
really really<font color="#CCCCCC"> useful it gives you you</font>

242
00:09:37,240 --> 00:09:41,380
can look at the live data size of your

243
00:09:39,310 --> 00:09:43,599
heap and you can see how close<font color="#E5E5E5"> your</font>

244
00:09:41,380 --> 00:09:46,600
garbage collector is<font color="#E5E5E5"> to the live data</font>

245
00:09:43,600 --> 00:09:49,840
size how much floating<font color="#E5E5E5"> garbage how much</font>

246
00:09:46,600 --> 00:09:53,050
slop is there it can also you<font color="#E5E5E5"> could have</font>

247
00:09:49,840 --> 00:09:56,290
<font color="#E5E5E5">a Java memory leak in Java you can have</font>

248
00:09:53,050 --> 00:09:57,760
a memory leak<font color="#E5E5E5"> in Java so if you are</font>

249
00:09:56,290 --> 00:10:01,719
somehow<font color="#E5E5E5"> holding</font><font color="#CCCCCC"> on to</font><font color="#E5E5E5"> things you didn't</font>

250
00:09:57,760 --> 00:10:03,160
expect<font color="#CCCCCC"> j-hat i'll show you that and this</font>

251
00:10:01,720 --> 00:10:05,370
is this<font color="#E5E5E5"> just gives you an idea</font><font color="#CCCCCC"> of how</font>

252
00:10:03,160 --> 00:10:05,370
that<font color="#E5E5E5"> works</font>

253
00:10:06,720 --> 00:10:13,600
GC<font color="#CCCCCC"> lives</font><font color="#E5E5E5"> these tell you how your memory</font>

254
00:10:10,960 --> 00:10:15,160
is running but it's just<font color="#E5E5E5"> the heap but</font>

255
00:10:13,600 --> 00:10:16,990
one<font color="#E5E5E5"> I mean if you look at that</font><font color="#CCCCCC"> red one</font>

256
00:10:15,160 --> 00:10:19,480
you did a young generation GC where you

257
00:10:16,990 --> 00:10:21,640
did you know 62 milliseconds<font color="#E5E5E5"> of copying</font>

258
00:10:19,480 --> 00:10:25,870
<font color="#CCCCCC">heap and you got nothing back</font><font color="#E5E5E5"> right</font>

259
00:10:21,640 --> 00:10:27,370
that's probably<font color="#CCCCCC"> not a good that that's</font>

260
00:10:25,870 --> 00:10:30,160
<font color="#E5E5E5">either it's not a good fit</font><font color="#CCCCCC"> between your</font>

261
00:10:27,370 --> 00:10:31,600
algorithm and your application<font color="#E5E5E5"> right the</font>

262
00:10:30,160 --> 00:10:33,819
algorithm is trying<font color="#E5E5E5"> really hard to get</font>

263
00:10:31,600 --> 00:10:36,220
collect young stuff and this particular

264
00:10:33,820 --> 00:10:37,690
application has no young stuff so if you

265
00:10:36,220 --> 00:10:41,410
can look at the GC logs and see how

266
00:10:37,690 --> 00:10:42,760
<font color="#E5E5E5">effective they're being all right so</font>

267
00:10:41,410 --> 00:10:44,740
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the one that</font><font color="#E5E5E5"> we really want to</font>

268
00:10:42,760 --> 00:10:47,170
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about now that we've got low</font>

269
00:10:44,740 --> 00:10:50,950
latency GC is coming<font color="#E5E5E5"> down the pike what</font>

270
00:10:47,170 --> 00:10:54,630
is the memory responsiveness and<font color="#CCCCCC"> the</font>

271
00:10:50,950 --> 00:10:57,610
tools are<font color="#CCCCCC"> not as good</font><font color="#E5E5E5"> as we would hope</font>

272
00:10:54,630 --> 00:11:00,130
right we have GC logs and<font color="#E5E5E5"> we have J</font>

273
00:10:57,610 --> 00:11:02,260
hiccup and<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go into what we</font>

274
00:11:00,130 --> 00:11:05,530
really want soon<font color="#E5E5E5"> but this is what we</font>

275
00:11:02,260 --> 00:11:06,970
currently<font color="#E5E5E5"> have so we have the logs and</font>

276
00:11:05,530 --> 00:11:09,310
you can look at the logs to see what the

277
00:11:06,970 --> 00:11:10,660
pause times are

278
00:11:09,310 --> 00:11:12,099
you know these<font color="#E5E5E5"> pause times are pretty</font>

279
00:11:10,660 --> 00:11:14,469
<font color="#E5E5E5">high so you know that this isn't going</font>

280
00:11:12,100 --> 00:11:15,550
to<font color="#E5E5E5"> be a very responsive collector but we</font>

281
00:11:14,470 --> 00:11:19,720
want to be able to have a more

282
00:11:15,550 --> 00:11:22,959
fine-grained<font color="#E5E5E5"> way to talk about pause</font>

283
00:11:19,720 --> 00:11:25,959
times you can use<font color="#CCCCCC"> J hiccup from asel</font>

284
00:11:22,959 --> 00:11:28,089
from Azul<font color="#CCCCCC"> and that gives you a</font><font color="#E5E5E5"> histogram</font>

285
00:11:25,959 --> 00:11:31,420
of<font color="#E5E5E5"> pause times and tells you where you</font>

286
00:11:28,089 --> 00:11:33,370
<font color="#CCCCCC">are this is better</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> nothing but</font><font color="#E5E5E5"> it's</font>

287
00:11:31,420 --> 00:11:35,529
not what I want

288
00:11:33,370 --> 00:11:40,360
here's J hiccup<font color="#E5E5E5"> for my aweful program</font>

289
00:11:35,529 --> 00:11:45,999
that shows that you know<font color="#CCCCCC"> 50% of your</font>

290
00:11:40,360 --> 00:11:48,249
pauses are over are way too big<font color="#CCCCCC"> right so</font>

291
00:11:45,999 --> 00:11:50,019
<font color="#CCCCCC">for this</font><font color="#E5E5E5"> particular</font><font color="#CCCCCC"> instance is showing</font>

292
00:11:48,249 --> 00:11:52,360
you<font color="#CCCCCC"> that this is</font><font color="#E5E5E5"> not a good match</font><font color="#CCCCCC"> I</font>

293
00:11:50,019 --> 00:11:54,449
wanted<font color="#E5E5E5"> to run a regular program just to</font>

294
00:11:52,360 --> 00:11:58,540
show that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know I'm</font><font color="#E5E5E5"> picking on people</font>

295
00:11:54,449 --> 00:12:00,670
<font color="#E5E5E5">for a regular</font><font color="#CCCCCC"> g1 program</font><font color="#E5E5E5"> that did sort</font>

296
00:11:58,540 --> 00:12:02,649
of a generational behavior you can<font color="#E5E5E5"> see</font>

297
00:12:00,670 --> 00:12:04,899
that you can<font color="#E5E5E5"> get like</font><font color="#CCCCCC"> 95% of your</font><font color="#E5E5E5"> pause</font>

298
00:12:02,649 --> 00:12:07,269
times under<font color="#E5E5E5"> 10 milliseconds which you</font>

299
00:12:04,899 --> 00:12:08,589
want which is<font color="#E5E5E5"> really good but we think</font>

300
00:12:07,269 --> 00:12:12,970
<font color="#CCCCCC">that with the low latency pasta and</font>

301
00:12:08,589 --> 00:12:14,740
collectors we can do even<font color="#CCCCCC"> better</font><font color="#E5E5E5"> so the</font>

302
00:12:12,970 --> 00:12:16,389
metrics I wish I had and some<font color="#E5E5E5"> of these</font>

303
00:12:14,740 --> 00:12:17,589
were actively<font color="#CCCCCC"> working on in some</font><font color="#E5E5E5"> of</font>

304
00:12:16,389 --> 00:12:20,980
these I just<font color="#CCCCCC"> wanted to put on</font><font color="#E5E5E5"> the table</font>

305
00:12:17,589 --> 00:12:22,930
<font color="#CCCCCC">for discussion I would really like a</font>

306
00:12:20,980 --> 00:12:26,199
tool that gave us the<font color="#CCCCCC"> total memory</font><font color="#E5E5E5"> over</font>

307
00:12:22,930 --> 00:12:27,399
time<font color="#E5E5E5"> right I showed you what top did but</font>

308
00:12:26,199 --> 00:12:29,649
if we could have<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that just</font>

309
00:12:27,399 --> 00:12:31,329
<font color="#CCCCCC">gave you a graph of memory usage I went</font>

310
00:12:29,649 --> 00:12:32,949
to my you know<font color="#CCCCCC"> I work for Red</font><font color="#E5E5E5"> Hat I went</font>

311
00:12:31,329 --> 00:12:34,839
and<font color="#E5E5E5"> talked to the</font><font color="#CCCCCC"> Linux weenies and I</font>

312
00:12:32,949 --> 00:12:36,189
want this tool and if anybody<font color="#E5E5E5"> knows</font><font color="#CCCCCC"> of a</font>

313
00:12:34,839 --> 00:12:38,319
tool that does this<font color="#E5E5E5"> that would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> great</font>

314
00:12:36,189 --> 00:12:40,990
but I<font color="#E5E5E5"> just want to write a tool that I</font>

315
00:12:38,319 --> 00:12:42,910
<font color="#E5E5E5">put</font><font color="#CCCCCC"> pointed a pit or I put before</font><font color="#E5E5E5"> my</font>

316
00:12:40,990 --> 00:12:44,610
<font color="#CCCCCC">Java command that gives me a graph</font><font color="#E5E5E5"> of</font>

317
00:12:42,910 --> 00:12:48,730
memory used over<font color="#CCCCCC"> time</font>

318
00:12:44,610 --> 00:12:51,399
wouldn't that be swell<font color="#CCCCCC"> I'd like</font>

319
00:12:48,730 --> 00:12:54,040
something<font color="#E5E5E5"> when you have a positive that</font>

320
00:12:51,399 --> 00:12:55,899
gets reported you say<font color="#CCCCCC"> ok it ended it 250</font>

321
00:12:54,040 --> 00:12:58,779
milliseconds and<font color="#E5E5E5"> it took 50 milliseconds</font>

322
00:12:55,899 --> 00:13:00,459
<font color="#E5E5E5">I'd really like some way of graphing</font>

323
00:12:58,779 --> 00:13:04,319
that with the start time<font color="#E5E5E5"> in the end time</font>

324
00:13:00,459 --> 00:13:06,849
<font color="#E5E5E5">so that I could create graphs like this</font>

325
00:13:04,319 --> 00:13:08,679
<font color="#E5E5E5">where the black lines are your Java</font>

326
00:13:06,850 --> 00:13:11,529
threads and the red lines are<font color="#E5E5E5"> your GC</font>

327
00:13:08,679 --> 00:13:13,360
threads<font color="#CCCCCC"> I find this a lot</font><font color="#E5E5E5"> easier to look</font>

328
00:13:11,529 --> 00:13:15,339
<font color="#E5E5E5">at and figure</font><font color="#CCCCCC"> out what's going on in</font>

329
00:13:13,360 --> 00:13:17,679
fact with<font color="#E5E5E5"> parallel do you see it looks</font>

330
00:13:15,339 --> 00:13:18,639
kind<font color="#CCCCCC"> of like</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> your Java</font>

331
00:13:17,679 --> 00:13:20,589
threads are running<font color="#E5E5E5"> and then you have</font>

332
00:13:18,639 --> 00:13:21,370
the whole<font color="#E5E5E5"> machine doing GC your Java</font>

333
00:13:20,589 --> 00:13:24,730
threads<font color="#E5E5E5"> or anything</font>

334
00:13:21,370 --> 00:13:26,529
huge<font color="#E5E5E5"> TC so when you have a graph like</font>

335
00:13:24,730 --> 00:13:28,020
this<font color="#E5E5E5"> gives you a much better idea of</font>

336
00:13:26,529 --> 00:13:31,870
<font color="#E5E5E5">what's going on in the garbage collector</font>

337
00:13:28,020 --> 00:13:33,939
<font color="#E5E5E5">and I did one for</font><font color="#CCCCCC"> g1 these are real runs</font>

338
00:13:31,870 --> 00:13:36,370
by<font color="#E5E5E5"> the way I actually took the data</font>

339
00:13:33,940 --> 00:13:39,480
lunged it put it into<font color="#E5E5E5"> latex and threw it</font>

340
00:13:36,370 --> 00:13:41,830
right<font color="#CCCCCC"> for</font><font color="#E5E5E5"> g1 you can see when we start</font>

341
00:13:39,480 --> 00:13:44,680
<font color="#E5E5E5">we're doing really well you've got these</font>

342
00:13:41,830 --> 00:13:46,180
the travelpod runs and the GC threads

343
00:13:44,680 --> 00:13:47,949
run and the<font color="#CCCCCC"> Java thread runs the GC</font>

344
00:13:46,180 --> 00:13:50,140
threads in and that looks really<font color="#E5E5E5"> cool</font>

345
00:13:47,950 --> 00:13:53,140
<font color="#E5E5E5">and then we</font><font color="#CCCCCC"> get to it when</font><font color="#E5E5E5"> we fall off a</font>

346
00:13:50,140 --> 00:13:54,430
cliff<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then at the end of the full GC</font>

347
00:13:53,140 --> 00:13:56,230
it says<font color="#E5E5E5"> oh maybe I should</font><font color="#CCCCCC"> do a</font>

348
00:13:54,430 --> 00:13:58,120
concurrent<font color="#E5E5E5"> mark and that's what the blue</font>

349
00:13:56,230 --> 00:13:59,920
threads are and you can<font color="#E5E5E5"> see those I I</font>

350
00:13:58,120 --> 00:14:02,050
would really<font color="#E5E5E5"> like to be able to display</font>

351
00:13:59,920 --> 00:14:09,069
this kind<font color="#E5E5E5"> of data so you can</font><font color="#CCCCCC"> visualize</font>

352
00:14:02,050 --> 00:14:11,969
what<font color="#CCCCCC"> your garbage collector is doing now</font>

353
00:14:09,070 --> 00:14:14,290
we're<font color="#E5E5E5"> down</font><font color="#CCCCCC"> to the metric we really want</font>

354
00:14:11,970 --> 00:14:17,080
what we really want is<font color="#E5E5E5"> something called</font>

355
00:14:14,290 --> 00:14:18,819
minimum mutator<font color="#E5E5E5"> utilization watch this</font>

356
00:14:17,080 --> 00:14:21,820
is not what we really<font color="#CCCCCC"> want the</font><font color="#E5E5E5"> next one</font>

357
00:14:18,820 --> 00:14:24,640
<font color="#E5E5E5">well we'll start with this one</font><font color="#CCCCCC"> basically</font>

358
00:14:21,820 --> 00:14:27,250
<font color="#E5E5E5">out of every 10 milliseconds how many</font>

359
00:14:24,640 --> 00:14:30,040
milliseconds<font color="#E5E5E5"> did the prop</font><font color="#CCCCCC"> the javathread</font>

360
00:14:27,250 --> 00:14:34,209
get and how<font color="#E5E5E5"> many milliseconds did the</font>

361
00:14:30,040 --> 00:14:36,459
garbage collector thread get<font color="#E5E5E5"> and so when</font>

362
00:14:34,209 --> 00:14:38,500
you<font color="#E5E5E5"> use this kind of a metric you</font>

363
00:14:36,459 --> 00:14:41,410
<font color="#E5E5E5">actually have something where you can</font>

364
00:14:38,500 --> 00:14:42,459
compare apples to apples<font color="#CCCCCC"> that what</font>

365
00:14:41,410 --> 00:14:44,709
you're going to<font color="#E5E5E5"> get out of it is the</font>

366
00:14:42,459 --> 00:14:46,150
<font color="#E5E5E5">answer</font><font color="#CCCCCC"> - am</font><font color="#E5E5E5"> I going to be able to</font>

367
00:14:44,709 --> 00:14:49,630
guarantee<font color="#E5E5E5"> your response time of 10</font>

368
00:14:46,150 --> 00:14:51,959
milliseconds right<font color="#E5E5E5"> it has the as is the</font>

369
00:14:49,630 --> 00:14:56,140
<font color="#CCCCCC">Java processor getting enough time</font><font color="#E5E5E5"> out</font>

370
00:14:51,959 --> 00:15:00,430
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this isn't mine</font><font color="#CCCCCC"> this is from Chang</font>

371
00:14:56,140 --> 00:15:03,540
<font color="#E5E5E5">and blow up from the</font><font color="#CCCCCC"> paperback</font><font color="#E5E5E5"> 2000s</font><font color="#CCCCCC"> it</font>

372
00:15:00,430 --> 00:15:06,729
was<font color="#E5E5E5"> improved</font><font color="#CCCCCC"> MMU isn't good enough</font>

373
00:15:03,540 --> 00:15:08,529
<font color="#E5E5E5">because</font><font color="#CCCCCC"> the size of</font><font color="#E5E5E5"> your window your</font>

374
00:15:06,730 --> 00:15:10,930
window can get bigger<font color="#E5E5E5"> and your</font><font color="#CCCCCC"> java</font>

375
00:15:08,529 --> 00:15:13,330
utilization can<font color="#E5E5E5"> get smaller so this is</font>

376
00:15:10,930 --> 00:15:16,270
what we<font color="#E5E5E5"> really</font><font color="#CCCCCC"> want we really want</font>

377
00:15:13,330 --> 00:15:17,500
bounded memory utilization<font color="#CCCCCC"> this is the</font>

378
00:15:16,270 --> 00:15:19,990
metric<font color="#E5E5E5"> and we want to get it from</font>

379
00:15:17,500 --> 00:15:22,000
externally we want to run a<font color="#E5E5E5"> Linux tool</font>

380
00:15:19,990 --> 00:15:24,520
that runs against your Java program<font color="#CCCCCC"> and</font>

381
00:15:22,000 --> 00:15:27,520
measures what's going on<font color="#E5E5E5"> and gives us</font>

382
00:15:24,520 --> 00:15:29,110
valid memory utilization<font color="#E5E5E5"> and this is the</font>

383
00:15:27,520 --> 00:15:32,890
number<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to use if we're comparing</font>

384
00:15:29,110 --> 00:15:34,780
<font color="#E5E5E5">low latency garbage collectors so I</font>

385
00:15:32,890 --> 00:15:34,990
wanted<font color="#E5E5E5"> to frame the conversation that's</font>

386
00:15:34,780 --> 00:15:38,260
why

387
00:15:34,990 --> 00:15:40,149
answer<font color="#CCCCCC"> there are other metrics that</font><font color="#E5E5E5"> have</font>

388
00:15:38,260 --> 00:15:41,529
been used in<font color="#E5E5E5"> the GC literature so I'm</font>

389
00:15:40,149 --> 00:15:43,839
gonna put them<font color="#CCCCCC"> up there I</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> think</font>

390
00:15:41,529 --> 00:15:46,689
they're as important<font color="#E5E5E5"> but they're still</font>

391
00:15:43,839 --> 00:15:49,630
interesting<font color="#E5E5E5"> right the bytes copied per</font>

392
00:15:46,690 --> 00:15:51,580
bytes allocated this<font color="#E5E5E5"> is an interesting</font>

393
00:15:49,630 --> 00:15:53,320
measure of how<font color="#E5E5E5"> much how hard the GC is</font>

394
00:15:51,580 --> 00:15:57,250
working and the thing<font color="#E5E5E5"> that's interesting</font>

395
00:15:53,320 --> 00:15:59,230
about<font color="#E5E5E5"> this everybody</font><font color="#CCCCCC"> poo-poos CMS CMS</font>

396
00:15:57,250 --> 00:16:01,779
wins on this<font color="#E5E5E5"> one right because</font><font color="#CCCCCC"> the old</font>

397
00:15:59,230 --> 00:16:03,490
generation stuff doesn't<font color="#E5E5E5"> get</font><font color="#CCCCCC"> copied so</font>

398
00:16:01,779 --> 00:16:06,189
in terms of bytes copied provides

399
00:16:03,490 --> 00:16:07,839
allocated it does really well until<font color="#CCCCCC"> it</font>

400
00:16:06,190 --> 00:16:09,760
hits<font color="#E5E5E5"> the fragmentation problem and falls</font>

401
00:16:07,839 --> 00:16:11,110
off<font color="#E5E5E5"> but if you're running in a container</font>

402
00:16:09,760 --> 00:16:12,399
and<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just shoot it and start it</font>

403
00:16:11,110 --> 00:16:14,529
up<font color="#CCCCCC"> again you don't</font><font color="#E5E5E5"> care about</font>

404
00:16:12,399 --> 00:16:16,060
fragmentation<font color="#CCCCCC"> so there are some cases</font>

405
00:16:14,529 --> 00:16:24,399
<font color="#E5E5E5">where where this is an interesting</font>

406
00:16:16,060 --> 00:16:26,589
metric what<font color="#CCCCCC"> epsilon</font><font color="#E5E5E5"> does even</font><font color="#CCCCCC"> better yes</font>

407
00:16:24,399 --> 00:16:33,010
it might<font color="#E5E5E5"> fall off the cliff sooner</font>

408
00:16:26,589 --> 00:16:35,410
though<font color="#CCCCCC"> I'd love</font><font color="#E5E5E5"> to see generated live</font>

409
00:16:33,010 --> 00:16:37,240
data graphs<font color="#CCCCCC"> j-hat gives you this</font><font color="#E5E5E5"> but</font>

410
00:16:35,410 --> 00:16:39,939
this is<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that it would</font><font color="#E5E5E5"> require</font>

411
00:16:37,240 --> 00:16:41,290
<font color="#E5E5E5">running for a long time but if we could</font>

412
00:16:39,940 --> 00:16:43,510
give you<font color="#CCCCCC"> the live data graph of your</font>

413
00:16:41,290 --> 00:16:45,880
<font color="#E5E5E5">program over time and then give you the</font>

414
00:16:43,510 --> 00:16:48,130
the garbage<font color="#E5E5E5"> collected the size of the</font>

415
00:16:45,880 --> 00:16:50,050
heap that's actually occupied<font color="#E5E5E5"> this is a</font>

416
00:16:48,130 --> 00:16:54,490
great way to<font color="#E5E5E5"> compare to garbage</font>

417
00:16:50,050 --> 00:16:57,550
collectors<font color="#CCCCCC"> objects visited provides</font>

418
00:16:54,490 --> 00:16:59,709
reclaimed one of the problems with

419
00:16:57,550 --> 00:17:02,170
concurrent<font color="#CCCCCC"> garbage collectors that do a</font>

420
00:16:59,709 --> 00:17:03,699
marking<font color="#E5E5E5"> of the entire heap is a lot of</font>

421
00:17:02,170 --> 00:17:06,520
times there's you know<font color="#E5E5E5"> this little</font><font color="#CCCCCC"> bit</font>

422
00:17:03,700 --> 00:17:08,260
over here<font color="#E5E5E5"> that's changing and this 200</font>

423
00:17:06,520 --> 00:17:11,770
gigabytes<font color="#E5E5E5"> of tenured stuff that you end</font>

424
00:17:08,260 --> 00:17:13,359
up walking every GC cycle<font color="#E5E5E5"> so I think</font>

425
00:17:11,770 --> 00:17:15,939
<font color="#E5E5E5">that that is a metric that's pretty</font>

426
00:17:13,359 --> 00:17:19,119
interesting<font color="#CCCCCC"> is you</font><font color="#E5E5E5"> know can we get that</font>

427
00:17:15,939 --> 00:17:22,240
<font color="#E5E5E5">down can we somehow summarize the old</font>

428
00:17:19,119 --> 00:17:23,800
generation right but not with the

429
00:17:22,240 --> 00:17:27,069
<font color="#CCCCCC">remember sets like g1 but with something</font>

430
00:17:23,800 --> 00:17:30,659
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> small and concise to be able</font>

431
00:17:27,069 --> 00:17:33,700
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> this metric down and</font>

432
00:17:30,660 --> 00:17:37,540
fragmentation costs<font color="#E5E5E5"> different collectors</font>

433
00:17:33,700 --> 00:17:39,160
<font color="#E5E5E5">have different ways of handling how they</font>

434
00:17:37,540 --> 00:17:42,670
allocate<font color="#CCCCCC"> their</font><font color="#E5E5E5"> storage how they do their</font>

435
00:17:39,160 --> 00:17:44,500
regions you can<font color="#E5E5E5"> have CMS gets fragmented</font>

436
00:17:42,670 --> 00:17:46,450
and<font color="#E5E5E5"> you can have lots of Swiss Swiss</font>

437
00:17:44,500 --> 00:17:47,880
<font color="#E5E5E5">cheese like old generation where you</font>

438
00:17:46,450 --> 00:17:49,410
can't put<font color="#CCCCCC"> anything</font>

439
00:17:47,880 --> 00:17:53,370
but you can also have<font color="#CCCCCC"> tea lab</font>

440
00:17:49,410 --> 00:17:55,200
allocations<font color="#E5E5E5"> with that have space at the</font>

441
00:17:53,370 --> 00:17:57,000
bottom<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> have region allocations</font>

442
00:17:55,200 --> 00:17:58,620
with space at the<font color="#E5E5E5"> bottom the question is</font>

443
00:17:57,000 --> 00:18:01,500
how many<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these holes are there in</font>

444
00:17:58,620 --> 00:18:03,510
<font color="#E5E5E5">your heap and and can we keep</font><font color="#CCCCCC"> track of</font>

445
00:18:01,500 --> 00:18:05,130
<font color="#E5E5E5">those and report them and which garbage</font>

446
00:18:03,510 --> 00:18:10,050
collector<font color="#E5E5E5"> does better with not leaving a</font>

447
00:18:05,130 --> 00:18:16,260
lot of<font color="#E5E5E5"> small holes and</font><font color="#CCCCCC"> I'm done and</font><font color="#E5E5E5"> I'm</font>

448
00:18:10,050 --> 00:18:18,600
early<font color="#CCCCCC"> I told you I would be early</font><font color="#E5E5E5"> so I</font>

449
00:18:16,260 --> 00:18:20,070
do have time if<font color="#E5E5E5"> anybody has any</font>

450
00:18:18,600 --> 00:18:23,179
<font color="#CCCCCC">questions for me I'm happy to answer</font>

451
00:18:20,070 --> 00:18:54,570
them<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I have probably</font><font color="#CCCCCC"> a minute or two</font>

452
00:18:23,180 --> 00:18:56,280
yes do you trust your GC<font color="#CCCCCC"> locks I would</font>

453
00:18:54,570 --> 00:18:58,379
like<font color="#E5E5E5"> to I</font><font color="#CCCCCC"> would like to make that better</font>

454
00:18:56,280 --> 00:19:00,420
<font color="#CCCCCC">like I said it's an exciting time for</font>

455
00:18:58,380 --> 00:19:03,090
garbage collection<font color="#E5E5E5"> again right people</font>

456
00:19:00,420 --> 00:19:04,500
care and so we're at a point<font color="#CCCCCC"> where we</font>

457
00:19:03,090 --> 00:19:06,110
can<font color="#E5E5E5"> start doing</font><font color="#CCCCCC"> some more of those</font>

458
00:19:04,500 --> 00:19:08,970
metrics and making them available<font color="#CCCCCC"> I</font>

459
00:19:06,110 --> 00:19:10,229
would<font color="#CCCCCC"> like to do that I'm not I</font><font color="#E5E5E5"> don't I</font>

460
00:19:08,970 --> 00:19:11,820
can't commit<font color="#CCCCCC"> to it right now because I</font>

461
00:19:10,230 --> 00:19:15,240
have a lot of<font color="#E5E5E5"> things on my</font><font color="#CCCCCC"> plate but</font><font color="#E5E5E5"> I</font>

462
00:19:11,820 --> 00:19:17,639
would love to have<font color="#CCCCCC"> bmu metric from</font><font color="#E5E5E5"> an</font>

463
00:19:15,240 --> 00:19:19,770
external Linux tool<font color="#CCCCCC"> that ran against</font>

464
00:19:17,640 --> 00:19:21,600
Java<font color="#E5E5E5"> I would love to have sort of a</font>

465
00:19:19,770 --> 00:19:23,730
graph of what's going<font color="#E5E5E5"> on so</font><font color="#CCCCCC"> that you can</font>

466
00:19:21,600 --> 00:19:26,100
see visually<font color="#E5E5E5"> rather than having to parse</font>

467
00:19:23,730 --> 00:19:28,050
GC logs<font color="#E5E5E5"> if anybody in the community</font>

468
00:19:26,100 --> 00:19:30,330
<font color="#E5E5E5">wants to do this it's all there</font><font color="#CCCCCC"> and I</font>

469
00:19:28,050 --> 00:19:31,620
would I would cheer you on<font color="#E5E5E5"> and I would</font>

470
00:19:30,330 --> 00:19:32,820
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know you can have my firstborn son</font>

471
00:19:31,620 --> 00:19:35,669
he's a pain in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> butt</font>

472
00:19:32,820 --> 00:19:38,149
but yes I<font color="#E5E5E5"> would be very excited anything</font>

473
00:19:35,670 --> 00:19:38,150
<font color="#E5E5E5">else</font><font color="#CCCCCC"> yes</font>

474
00:19:46,690 --> 00:19:51,610
there is no way<font color="#CCCCCC"> to fix that</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's</font>

475
00:19:50,080 --> 00:19:55,210
<font color="#CCCCCC">it has to do</font><font color="#E5E5E5"> with what's going on in</font>

476
00:19:51,610 --> 00:19:58,719
<font color="#E5E5E5">your</font><font color="#CCCCCC"> machine and sometimes inside</font><font color="#E5E5E5"> the</font>

477
00:19:55,210 --> 00:20:01,120
JVM there's<font color="#E5E5E5"> weird magic that I can't</font>

478
00:19:58,720 --> 00:20:02,590
<font color="#E5E5E5">explain right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> seen cliff click through</font>

479
00:20:01,120 --> 00:20:05,969
the same talk and he couldn't<font color="#E5E5E5"> explain it</font>

480
00:20:02,590 --> 00:20:08,649
<font color="#E5E5E5">either</font><font color="#CCCCCC"> right so so</font><font color="#E5E5E5"> walk</font><font color="#CCCCCC"> hawk time is not</font>

481
00:20:05,970 --> 00:20:10,600
you really<font color="#CCCCCC"> want</font><font color="#E5E5E5"> jmh if you're running a</font>

482
00:20:08,650 --> 00:20:12,130
micro benchmark<font color="#CCCCCC"> and if you're running</font><font color="#E5E5E5"> a</font>

483
00:20:10,600 --> 00:20:16,959
<font color="#E5E5E5">really big like</font><font color="#CCCCCC"> spec to a baby for two</font>

484
00:20:12,130 --> 00:20:20,040
<font color="#E5E5E5">hours then it all gets averaged out any</font>

485
00:20:16,960 --> 00:20:20,040
other<font color="#E5E5E5"> questions yes</font>

486
00:20:42,270 --> 00:20:47,520
you're absolutely<font color="#E5E5E5"> right and</font><font color="#CCCCCC"> I don't have</font>

487
00:20:44,670 --> 00:20:49,470
any insight<font color="#CCCCCC"> I wish I did</font><font color="#E5E5E5"> right I wish</font>

488
00:20:47,520 --> 00:20:51,900
that<font color="#E5E5E5"> there was you</font><font color="#CCCCCC"> know that's</font><font color="#E5E5E5"> part of</font>

489
00:20:49,470 --> 00:20:53,700
the problem<font color="#CCCCCC"> for</font><font color="#E5E5E5"> me is</font><font color="#CCCCCC"> that we have rate</font>

490
00:20:51,900 --> 00:20:56,190
barriers and<font color="#CCCCCC"> if the javathread hits an</font>

491
00:20:53,700 --> 00:20:58,440
<font color="#E5E5E5">object and in Shenandoah if a</font><font color="#CCCCCC"> javathread</font>

492
00:20:56,190 --> 00:21:01,110
<font color="#E5E5E5">hits an old generation object about to</font>

493
00:20:58,440 --> 00:21:02,910
be copied<font color="#E5E5E5"> it has to copy that so that</font>

494
00:21:01,110 --> 00:21:05,280
has to somehow<font color="#E5E5E5"> be accounted for in</font>

495
00:21:02,910 --> 00:21:08,940
garbage collection time<font color="#E5E5E5"> but I'm not sure</font>

496
00:21:05,280 --> 00:21:12,720
quite<font color="#E5E5E5"> I don't know how that's</font><font color="#CCCCCC"> going to</font>

497
00:21:08,940 --> 00:21:17,790
<font color="#E5E5E5">work</font><font color="#CCCCCC"> and and it's hard</font><font color="#E5E5E5"> because that</font>

498
00:21:12,720 --> 00:21:20,480
<font color="#E5E5E5">object copy is so fast all right I guess</font>

499
00:21:17,790 --> 00:21:25,220
I'm done unless there's<font color="#E5E5E5"> anything else</font>

500
00:21:20,480 --> 00:21:25,220
<font color="#E5E5E5">try all the</font><font color="#CCCCCC"> garbage collectors really</font>

