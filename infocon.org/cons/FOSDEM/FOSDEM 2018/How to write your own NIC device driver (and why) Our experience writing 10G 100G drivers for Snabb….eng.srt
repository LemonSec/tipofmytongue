1
00:00:04,770 --> 00:00:09,649
so my name's Luke and this is<font color="#CCCCCC"> assume you</font>

2
00:00:07,180 --> 00:00:11,690
and we're here to tell<font color="#CCCCCC"> you about the</font><font color="#E5E5E5"> Jew</font>

3
00:00:09,650 --> 00:00:14,269
your own ethernet device drivers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> how</font>

4
00:00:11,690 --> 00:00:16,640
we do this in<font color="#CCCCCC"> the snap project and snap</font>

5
00:00:14,269 --> 00:00:18,680
is very briefly<font color="#E5E5E5"> a networking framework</font>

6
00:00:16,640 --> 00:00:21,110
that you<font color="#E5E5E5"> can think of as similar to DP</font>

7
00:00:18,680 --> 00:00:23,930
<font color="#CCCCCC">DK</font><font color="#E5E5E5"> but it's a much smaller project it's</font>

8
00:00:21,110 --> 00:00:25,369
written<font color="#E5E5E5"> completely in Lua and it's</font>

9
00:00:23,930 --> 00:00:27,109
driven<font color="#E5E5E5"> by</font><font color="#CCCCCC"> a small</font><font color="#E5E5E5"> independent</font>

10
00:00:25,369 --> 00:00:29,810
<font color="#E5E5E5">application developers rather than large</font>

11
00:00:27,109 --> 00:00:32,239
equipment<font color="#E5E5E5"> vendors and the the three main</font>

12
00:00:29,810 --> 00:00:34,489
<font color="#CCCCCC">reasons</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> we writes</font><font color="#E5E5E5"> our own even</font><font color="#CCCCCC"> our</font>

13
00:00:32,238 --> 00:00:37,730
device drivers are<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fear of</font><font color="#E5E5E5"> eternal</font>

14
00:00:34,489 --> 00:00:41,019
<font color="#E5E5E5">damnation their pursuit of our righteous</font>

15
00:00:37,730 --> 00:00:44,360
destiny<font color="#E5E5E5"> and insatiable lust for power</font>

16
00:00:41,019 --> 00:00:46,220
<font color="#E5E5E5">which I can expand then slightly so the</font>

17
00:00:44,360 --> 00:00:47,449
fear of<font color="#CCCCCC"> eternal</font><font color="#E5E5E5"> damnation comes from the</font>

18
00:00:46,220 --> 00:00:49,070
<font color="#E5E5E5">belief that there is such a place as</font>

19
00:00:47,449 --> 00:00:50,869
<font color="#CCCCCC">drive to heaven and there is such a</font>

20
00:00:49,070 --> 00:00:53,589
<font color="#E5E5E5">place as</font><font color="#CCCCCC"> Drive a hell</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can</font>

21
00:00:50,869 --> 00:00:56,540
describe<font color="#E5E5E5"> these places quite vividly</font>

22
00:00:53,589 --> 00:00:58,070
so in<font color="#E5E5E5"> driver heaven when you have a</font>

23
00:00:56,540 --> 00:00:59,750
networking application and you need to

24
00:00:58,070 --> 00:01:00,680
support<font color="#CCCCCC"> a new Ethernet</font><font color="#E5E5E5"> adapter for</font><font color="#CCCCCC"> it</font>

25
00:00:59,750 --> 00:01:01,939
for some<font color="#CCCCCC"> reason you</font><font color="#E5E5E5"> have a new</font>

26
00:01:00,680 --> 00:01:04,640
requirement<font color="#CCCCCC"> you need some new hardware</font>

27
00:01:01,939 --> 00:01:06,290
<font color="#E5E5E5">you'll find a promising vendor you'll go</font>

28
00:01:04,640 --> 00:01:08,060
to their website you'll click the<font color="#E5E5E5"> link</font>

29
00:01:06,290 --> 00:01:10,460
<font color="#E5E5E5">that says download device</font><font color="#CCCCCC"> driver</font>

30
00:01:08,060 --> 00:01:13,040
specification here you'll get a file

31
00:01:10,460 --> 00:01:14,449
that's<font color="#E5E5E5"> about 20 pages long</font><font color="#CCCCCC"> because</font>

32
00:01:13,040 --> 00:01:15,710
because<font color="#CCCCCC"> there's no rocket science to</font>

33
00:01:14,450 --> 00:01:18,440
just take packets in and out of memory

34
00:01:15,710 --> 00:01:20,179
under some lights multiplexing<font color="#CCCCCC"> you'll</font>

35
00:01:18,440 --> 00:01:21,500
read the spec and you'll say<font color="#CCCCCC"> ok I</font>

36
00:01:20,180 --> 00:01:23,150
understand that this<font color="#E5E5E5"> is gonna work fine</font>

37
00:01:21,500 --> 00:01:25,070
<font color="#CCCCCC">for me and I can write a driver in</font>

38
00:01:23,150 --> 00:01:26,630
something like<font color="#CCCCCC"> 500</font><font color="#E5E5E5"> lines of</font><font color="#CCCCCC"> code about</font>

39
00:01:25,070 --> 00:01:28,009
the complexity of<font color="#CCCCCC"> adjacent puzzle</font>

40
00:01:26,630 --> 00:01:30,560
because<font color="#CCCCCC"> you know it's just</font><font color="#E5E5E5"> packets in</font>

41
00:01:28,010 --> 00:01:32,720
and out of memory<font color="#E5E5E5"> but before you do that</font>

42
00:01:30,560 --> 00:01:34,010
<font color="#CCCCCC">you'd go out to github</font><font color="#E5E5E5"> and you'd see you</font>

43
00:01:32,720 --> 00:01:35,510
<font color="#E5E5E5">know who else is written drivers</font><font color="#CCCCCC"> already</font>

44
00:01:34,010 --> 00:01:40,490
you<font color="#CCCCCC"> in</font><font color="#E5E5E5"> drive a heaven github has a</font>

45
00:01:35,510 --> 00:01:41,360
little drivers and and and you're gonna

46
00:01:40,490 --> 00:01:42,619
look around<font color="#E5E5E5"> you're gonna look for</font>

47
00:01:41,360 --> 00:01:44,030
<font color="#E5E5E5">something to</font><font color="#CCCCCC"> suits</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> application and</font>

48
00:01:42,620 --> 00:01:45,650
it's going<font color="#E5E5E5"> to depend critically on what</font>

49
00:01:44,030 --> 00:01:47,540
<font color="#CCCCCC">domain you're in you might</font><font color="#E5E5E5"> be very very</font>

50
00:01:45,650 --> 00:01:48,920
<font color="#E5E5E5">very sensitive to throughput well you</font>

51
00:01:47,540 --> 00:01:50,180
might be<font color="#E5E5E5"> very sensitive to latency or</font>

52
00:01:48,920 --> 00:01:52,729
you might be very<font color="#E5E5E5"> sensitive to packet</font>

53
00:01:50,180 --> 00:01:53,630
loss and<font color="#E5E5E5"> depending on those</font><font color="#CCCCCC"> requirements</font>

54
00:01:52,729 --> 00:01:56,090
it's going to<font color="#E5E5E5"> really influence what</font>

55
00:01:53,630 --> 00:01:57,259
driver would suit you you're also going

56
00:01:56,090 --> 00:01:58,880
to<font color="#E5E5E5"> be very sensitive to the to the</font>

57
00:01:57,260 --> 00:02:00,290
platforms that<font color="#E5E5E5"> are supported do you know</font>

58
00:01:58,880 --> 00:02:01,789
deploy which operating<font color="#CCCCCC"> system do you</font>

59
00:02:00,290 --> 00:02:03,950
<font color="#E5E5E5">want to deploy on and do you want to be</font>

60
00:02:01,790 --> 00:02:06,530
in kernel<font color="#CCCCCC"> space or in user space do you</font>

61
00:02:03,950 --> 00:02:07,970
<font color="#CCCCCC">want to be in containers</font><font color="#E5E5E5"> and what</font>

62
00:02:06,530 --> 00:02:09,769
programming language do<font color="#E5E5E5"> you want to use</font>

63
00:02:07,970 --> 00:02:11,209
because<font color="#E5E5E5"> I mean these days in an</font>

64
00:02:09,769 --> 00:02:12,530
application<font color="#E5E5E5"> developer</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> use any</font>

65
00:02:11,209 --> 00:02:13,909
programming<font color="#CCCCCC"> language that</font><font color="#E5E5E5"> you like and</font>

66
00:02:12,530 --> 00:02:16,190
everything<font color="#E5E5E5"> can run in user</font><font color="#CCCCCC"> space so you</font>

67
00:02:13,909 --> 00:02:17,290
<font color="#E5E5E5">could be programming in C in Java in</font>

68
00:02:16,190 --> 00:02:18,909
rust in go

69
00:02:17,290 --> 00:02:21,220
in<font color="#CCCCCC"> lure</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> whatever and</font><font color="#E5E5E5"> that's really</font>

70
00:02:18,909 --> 00:02:23,409
<font color="#E5E5E5">your choice and you know you would find</font>

71
00:02:21,220 --> 00:02:24,549
a driver that<font color="#CCCCCC"> suits you so then I'm good</font>

72
00:02:23,409 --> 00:02:26,109
have you<font color="#E5E5E5"> either find the</font><font color="#CCCCCC"> driver you want</font>

73
00:02:24,549 --> 00:02:27,189
<font color="#E5E5E5">and you embed</font><font color="#CCCCCC"> that very quickly and</font>

74
00:02:26,110 --> 00:02:28,750
<font color="#E5E5E5">you're up and running</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you join that</font>

75
00:02:27,189 --> 00:02:30,280
<font color="#CCCCCC">community or</font><font color="#E5E5E5"> if you don't find it you</font>

76
00:02:28,750 --> 00:02:32,709
<font color="#E5E5E5">just ride yourself it's only 500 lines</font>

77
00:02:30,280 --> 00:02:33,790
of code and and then you know you put<font color="#CCCCCC"> it</font>

78
00:02:32,709 --> 00:02:35,200
up and the next<font color="#CCCCCC"> people</font><font color="#E5E5E5"> come along and</font>

79
00:02:33,790 --> 00:02:39,849
<font color="#E5E5E5">they join your</font><font color="#CCCCCC"> community so that's</font>

80
00:02:35,200 --> 00:02:42,250
that's driver heaven<font color="#CCCCCC"> drive the hell is a</font>

81
00:02:39,849 --> 00:02:43,569
bit different<font color="#E5E5E5"> enjoy</font><font color="#CCCCCC"> heaven</font><font color="#E5E5E5"> hell you have</font>

82
00:02:42,250 --> 00:02:44,769
<font color="#CCCCCC">you need a sporting you network</font>

83
00:02:43,569 --> 00:02:46,268
interface you go to the vendors website

84
00:02:44,769 --> 00:02:47,650
<font color="#E5E5E5">and you click around furiously</font>

85
00:02:46,269 --> 00:02:49,450
everywhere you can<font color="#E5E5E5"> find and you don't</font>

86
00:02:47,650 --> 00:02:52,390
find any link<font color="#E5E5E5"> to download the the host</font>

87
00:02:49,450 --> 00:02:53,890
host to device interface so you<font color="#E5E5E5"> open</font>

88
00:02:52,390 --> 00:02:55,208
like<font color="#CCCCCC"> a support request and you say well</font>

89
00:02:53,890 --> 00:02:56,589
can I please have<font color="#CCCCCC"> a copy</font><font color="#E5E5E5"> of it and you</font>

90
00:02:55,209 --> 00:02:59,290
<font color="#E5E5E5">don't get anything back for some weeks</font>

91
00:02:56,590 --> 00:03:00,700
and then you you may make some<font color="#E5E5E5"> calls and</font>

92
00:02:59,290 --> 00:03:02,200
<font color="#E5E5E5">pull some strings and you find an</font>

93
00:03:00,700 --> 00:03:04,000
<font color="#CCCCCC">Account Manager you</font><font color="#E5E5E5"> can escalate through</font>

94
00:03:02,200 --> 00:03:04,328
and get some<font color="#CCCCCC"> attention</font><font color="#E5E5E5"> and then they say</font>

95
00:03:04,000 --> 00:03:06,069
<font color="#CCCCCC">okay</font>

96
00:03:04,329 --> 00:03:07,780
very very very secretly just<font color="#E5E5E5"> for your</font>

97
00:03:06,069 --> 00:03:09,849
eyes<font color="#CCCCCC"> only here's a here's a</font><font color="#E5E5E5"> description</font>

98
00:03:07,780 --> 00:03:11,290
of the interface<font color="#E5E5E5"> and that's a thousand</font>

99
00:03:09,849 --> 00:03:13,599
pages long<font color="#CCCCCC"> it's not twenty pages</font><font color="#E5E5E5"> long</font>

100
00:03:11,290 --> 00:03:15,280
and<font color="#CCCCCC"> now you've</font><font color="#E5E5E5"> got a problem right</font>

101
00:03:13,599 --> 00:03:16,959
<font color="#E5E5E5">because you have a requirement you</font><font color="#CCCCCC"> need</font>

102
00:03:15,280 --> 00:03:19,659
<font color="#E5E5E5">to ship with new hardware support you've</font>

103
00:03:16,959 --> 00:03:21,430
got a<font color="#E5E5E5"> deadline can you really put on</font>

104
00:03:19,659 --> 00:03:23,620
your critical path to read a thousand

105
00:03:21,430 --> 00:03:25,359
page manual and then implement the

106
00:03:23,620 --> 00:03:26,620
driver and then not be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to share the</font>

107
00:03:25,359 --> 00:03:27,699
spec with anybody else<font color="#E5E5E5"> so that you're</font>

108
00:03:26,620 --> 00:03:30,340
stuck maintaining it all by yourself

109
00:03:27,699 --> 00:03:32,079
<font color="#CCCCCC">over and over and</font><font color="#E5E5E5"> you can't do that of</font>

110
00:03:30,340 --> 00:03:33,190
<font color="#CCCCCC">course</font><font color="#E5E5E5"> so you so</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> kind of forced</font>

111
00:03:32,079 --> 00:03:36,340
to give up<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> idea of writing your</font>

112
00:03:33,190 --> 00:03:37,660
own driver<font color="#E5E5E5"> and then you go to github</font><font color="#CCCCCC"> and</font>

113
00:03:36,340 --> 00:03:38,500
see<font color="#CCCCCC"> where drivers are all for you</font><font color="#E5E5E5"> know</font>

114
00:03:37,660 --> 00:03:39,819
because<font color="#CCCCCC"> you've got to use something off</font>

115
00:03:38,500 --> 00:03:41,139
the<font color="#CCCCCC"> shelf</font><font color="#E5E5E5"> and of course nobody else has</font>

116
00:03:39,819 --> 00:03:42,668
written a driver either everybody<font color="#CCCCCC"> else</font>

117
00:03:41,139 --> 00:03:44,470
made<font color="#CCCCCC"> the same calculation that</font><font color="#E5E5E5"> you did</font>

118
00:03:42,669 --> 00:03:47,319
and there's nothing there<font color="#E5E5E5"> so the vendor</font>

119
00:03:44,470 --> 00:03:48,879
<font color="#E5E5E5">driver is</font><font color="#CCCCCC"> the only</font><font color="#E5E5E5"> game</font><font color="#CCCCCC"> in town</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay</font>

120
00:03:47,319 --> 00:03:50,198
so you<font color="#E5E5E5"> get the vendors driver and it's</font>

121
00:03:48,879 --> 00:03:51,940
<font color="#E5E5E5">going to be written in some programming</font>

122
00:03:50,199 --> 00:03:53,949
language and<font color="#E5E5E5"> it's going to</font><font color="#CCCCCC"> support some</font>

123
00:03:51,940 --> 00:03:57,879
platforms<font color="#E5E5E5"> and it's may or may</font><font color="#CCCCCC"> not work</font>

124
00:03:53,949 --> 00:03:59,590
<font color="#E5E5E5">in containers and and you're never</font><font color="#CCCCCC"> going</font>

125
00:03:57,879 --> 00:04:00,790
<font color="#E5E5E5">to understand it and</font><font color="#CCCCCC"> anytime you have</font>

126
00:03:59,590 --> 00:04:01,870
<font color="#CCCCCC">any kind</font><font color="#E5E5E5"> of a problem if your</font>

127
00:04:00,790 --> 00:04:03,340
performance<font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> at the level that</font>

128
00:04:01,870 --> 00:04:04,989
<font color="#CCCCCC">meets</font><font color="#E5E5E5"> your expectations we get some</font>

129
00:04:03,340 --> 00:04:06,849
really really<font color="#CCCCCC"> strange production bugs</font>

130
00:04:04,989 --> 00:04:08,319
<font color="#E5E5E5">the main</font><font color="#CCCCCC"> row</font><font color="#E5E5E5"> of the device driver you're</font>

131
00:04:06,849 --> 00:04:09,790
gonna have to be resolving these through

132
00:04:08,319 --> 00:04:11,560
conference calls with<font color="#E5E5E5"> your vendor and</font>

133
00:04:09,790 --> 00:04:16,810
that's just that's just<font color="#E5E5E5"> no way to live</font>

134
00:04:11,560 --> 00:04:18,399
right<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> driver hell and this</font>

135
00:04:16,810 --> 00:04:20,079
brings us to<font color="#CCCCCC"> the pursuit</font><font color="#E5E5E5"> of our own</font>

136
00:04:18,399 --> 00:04:21,190
righteous destiny so we are standing<font color="#E5E5E5"> at</font>

137
00:04:20,079 --> 00:04:22,990
a crossroads<font color="#CCCCCC"> right when we write</font>

138
00:04:21,190 --> 00:04:23,350
<font color="#CCCCCC">application we have driver hell</font><font color="#E5E5E5"> and we</font>

139
00:04:22,990 --> 00:04:25,780
have

140
00:04:23,350 --> 00:04:27,250
<font color="#E5E5E5">driver heaven and we we get to decide</font>

141
00:04:25,780 --> 00:04:29,559
for ourselves which kind of route we're

142
00:04:27,250 --> 00:04:31,360
going down<font color="#E5E5E5"> and the very very very first</font>

143
00:04:29,560 --> 00:04:32,920
<font color="#E5E5E5">step</font><font color="#CCCCCC"> to kind of</font><font color="#E5E5E5"> everything follows from</font>

144
00:04:31,360 --> 00:04:34,210
is whether you're prepared<font color="#CCCCCC"> to use</font>

145
00:04:32,920 --> 00:04:36,700
hardware<font color="#E5E5E5"> that you don't have any</font>

146
00:04:34,210 --> 00:04:38,739
documentation<font color="#E5E5E5"> for that that you can't</font>

147
00:04:36,700 --> 00:04:41,170
see how it works<font color="#CCCCCC"> so once you've done</font>

148
00:04:38,740 --> 00:04:42,850
that you<font color="#E5E5E5"> can try your own drivers</font><font color="#CCCCCC"> you're</font>

149
00:04:41,170 --> 00:04:44,710
also<font color="#E5E5E5"> not gonna</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to use drivers in</font>

150
00:04:42,850 --> 00:04:46,180
developed independently by other people

151
00:04:44,710 --> 00:04:48,549
<font color="#CCCCCC">so you take the next step and</font><font color="#E5E5E5"> you're</font>

152
00:04:46,180 --> 00:04:50,410
using something<font color="#CCCCCC"> that's just</font><font color="#E5E5E5"> from the</font>

153
00:04:48,550 --> 00:04:51,670
vendor and you're never gonna understand

154
00:04:50,410 --> 00:04:53,500
it<font color="#E5E5E5"> cuz</font><font color="#CCCCCC"> you know the</font><font color="#E5E5E5"> docs none of your</font>

155
00:04:51,670 --> 00:04:55,420
colleagues gonna understand it and and

156
00:04:53,500 --> 00:04:57,160
from there you know the<font color="#E5E5E5"> vendors gonna</font>

157
00:04:55,420 --> 00:04:58,390
realize<font color="#E5E5E5"> that nobody else is really</font>

158
00:04:57,160 --> 00:05:00,790
reading their code is<font color="#CCCCCC"> just all going</font>

159
00:04:58,390 --> 00:05:01,659
kind<font color="#E5E5E5"> of blindly upstream and you know</font>

160
00:05:00,790 --> 00:05:03,220
and they<font color="#E5E5E5"> don't get any kind of</font>

161
00:05:01,660 --> 00:05:04,540
constructive constructive feedback from

162
00:05:03,220 --> 00:05:05,770
<font color="#CCCCCC">anybody and everything just kind of</font>

163
00:05:04,540 --> 00:05:08,680
comes off<font color="#E5E5E5"> the rails</font>

164
00:05:05,770 --> 00:05:11,500
<font color="#E5E5E5">so we we don't want</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> so the</font>

165
00:05:08,680 --> 00:05:13,510
<font color="#E5E5E5">alternative then which is which</font><font color="#CCCCCC"> is kind</font>

166
00:05:11,500 --> 00:05:14,890
<font color="#E5E5E5">of harder so so</font><font color="#CCCCCC"> driver heaven is</font><font color="#E5E5E5"> not</font>

167
00:05:13,510 --> 00:05:17,500
very far<font color="#CCCCCC"> away that's</font><font color="#E5E5E5"> a kind of a steep</font>

168
00:05:14,890 --> 00:05:18,789
climb that's a bit of a<font color="#E5E5E5"> vigorous path so</font>

169
00:05:17,500 --> 00:05:20,410
the first step is to say no we won't<font color="#E5E5E5"> use</font>

170
00:05:18,790 --> 00:05:21,970
any hardware<font color="#E5E5E5"> that doesn't that isn't</font>

171
00:05:20,410 --> 00:05:23,200
<font color="#E5E5E5">publicly</font><font color="#CCCCCC"> documented so if you can't go</font>

172
00:05:21,970 --> 00:05:25,480
to<font color="#E5E5E5"> the vendors website and click a link</font>

173
00:05:23,200 --> 00:05:27,430
and<font color="#CCCCCC"> get</font><font color="#E5E5E5"> the spec then then it's just not</font>

174
00:05:25,480 --> 00:05:28,480
it's just<font color="#E5E5E5"> not a not a valid option and</font>

175
00:05:27,430 --> 00:05:30,340
that's<font color="#E5E5E5"> that's tough right</font>

176
00:05:28,480 --> 00:05:32,200
like when we when<font color="#CCCCCC"> we started we only</font>

177
00:05:30,340 --> 00:05:33,219
<font color="#E5E5E5">could use Intel cars because Intel was</font>

178
00:05:32,200 --> 00:05:35,950
the<font color="#E5E5E5"> only company that put good</font>

179
00:05:33,220 --> 00:05:38,860
specifications<font color="#CCCCCC"> online without you know</font>

180
00:05:35,950 --> 00:05:40,210
for<font color="#E5E5E5"> everybody to see and</font><font color="#CCCCCC"> then you</font><font color="#E5E5E5"> read</font>

181
00:05:38,860 --> 00:05:42,550
and understand<font color="#E5E5E5"> these specifications</font>

182
00:05:40,210 --> 00:05:43,810
right because even even like<font color="#E5E5E5"> Intel</font>

183
00:05:42,550 --> 00:05:46,030
manuals<font color="#CCCCCC"> they're a</font><font color="#E5E5E5"> thousand pages they're</font>

184
00:05:43,810 --> 00:05:47,560
not<font color="#CCCCCC"> twenty pages and it might only be 20</font>

185
00:05:46,030 --> 00:05:48,940
<font color="#E5E5E5">or 30 pages of that that's really really</font>

186
00:05:47,560 --> 00:05:50,650
<font color="#E5E5E5">relevant to you but it takes a lot</font><font color="#CCCCCC"> of</font>

187
00:05:48,940 --> 00:05:52,330
time to read through<font color="#E5E5E5"> and understand that</font>

188
00:05:50,650 --> 00:05:54,969
can condense it down<font color="#E5E5E5"> and see what what</font>

189
00:05:52,330 --> 00:05:56,590
the relevant<font color="#CCCCCC"> subset is and then you do</font>

190
00:05:54,970 --> 00:05:57,940
our drivers<font color="#CCCCCC"> and you you've got to</font><font color="#E5E5E5"> do</font>

191
00:05:56,590 --> 00:05:59,919
this kind of<font color="#E5E5E5"> in a group wise way you</font>

192
00:05:57,940 --> 00:06:01,120
can't just have<font color="#CCCCCC"> one person</font><font color="#E5E5E5"> who wrote all</font>

193
00:05:59,920 --> 00:06:02,230
the<font color="#CCCCCC"> drivers</font><font color="#E5E5E5"> and is the only person</font><font color="#CCCCCC"> who</font>

194
00:06:01,120 --> 00:06:03,610
understands<font color="#CCCCCC"> that you need to</font><font color="#E5E5E5"> kind of</font>

195
00:06:02,230 --> 00:06:04,960
spread<font color="#CCCCCC"> the work around</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

196
00:06:03,610 --> 00:06:06,610
<font color="#E5E5E5">something we've done</font><font color="#CCCCCC"> orden in a snap</font>

197
00:06:04,960 --> 00:06:08,140
world we started with the driver<font color="#E5E5E5"> then</font>

198
00:06:06,610 --> 00:06:09,880
somebody else came<font color="#E5E5E5"> along and needed a</font>

199
00:06:08,140 --> 00:06:11,349
sportful related card and somebody else

200
00:06:09,880 --> 00:06:12,520
needed<font color="#E5E5E5"> some features</font><font color="#CCCCCC"> and we've kind</font><font color="#E5E5E5"> of</font>

201
00:06:11,350 --> 00:06:15,100
spread it<font color="#CCCCCC"> around so we</font><font color="#E5E5E5"> have a lot of</font>

202
00:06:12,520 --> 00:06:16,539
<font color="#CCCCCC">people who have done work on</font><font color="#E5E5E5"> the drivers</font>

203
00:06:15,100 --> 00:06:19,600
in one way<font color="#E5E5E5"> or another and understand</font>

204
00:06:16,540 --> 00:06:20,770
parts of them and you<font color="#E5E5E5"> need to you need</font>

205
00:06:19,600 --> 00:06:22,180
to<font color="#E5E5E5"> engage</font><font color="#CCCCCC"> with the vendors you</font><font color="#E5E5E5"> need to</font>

206
00:06:20,770 --> 00:06:24,580
be part<font color="#E5E5E5"> of a kind of a constructive</font>

207
00:06:22,180 --> 00:06:26,740
dialogue<font color="#CCCCCC"> and the way that we're trying</font>

208
00:06:24,580 --> 00:06:28,630
<font color="#E5E5E5">to kind of get into this driver heaven</font>

209
00:06:26,740 --> 00:06:30,520
we we engaged last year<font color="#CCCCCC"> with with</font>

210
00:06:28,630 --> 00:06:31,480
Mellanox<font color="#CCCCCC"> together with Deutsche Telekom</font>

211
00:06:30,520 --> 00:06:33,520
and

212
00:06:31,480 --> 00:06:35,020
convinced them<font color="#CCCCCC"> to take the driver</font>

213
00:06:33,520 --> 00:06:36,039
interface<font color="#E5E5E5"> for the connect</font><font color="#CCCCCC"> X Nick and</font>

214
00:06:35,020 --> 00:06:37,060
make a public<font color="#E5E5E5"> version of the</font>

215
00:06:36,040 --> 00:06:39,040
specification<font color="#E5E5E5"> and put it on their</font>

216
00:06:37,060 --> 00:06:40,120
website<font color="#E5E5E5"> so now if you go to</font><font color="#CCCCCC"> Minister</font>

217
00:06:39,040 --> 00:06:41,770
<font color="#CCCCCC">comb you can click the link that says</font>

218
00:06:40,120 --> 00:06:43,750
programming reference manual and get<font color="#E5E5E5"> the</font>

219
00:06:41,770 --> 00:06:44,890
<font color="#E5E5E5">spec</font><font color="#CCCCCC"> and write your</font><font color="#E5E5E5"> own driver for for</font>

220
00:06:43,750 --> 00:06:46,000
the connect X<font color="#E5E5E5"> cards and a couple of</font>

221
00:06:44,890 --> 00:06:47,590
people have<font color="#E5E5E5"> contacted me and told me</font>

222
00:06:46,000 --> 00:06:48,640
that they get<font color="#CCCCCC"> exactly that</font><font color="#E5E5E5"> because you</font>

223
00:06:47,590 --> 00:06:51,310
know the specification was now available

224
00:06:48,640 --> 00:06:52,840
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> was fantastic</font><font color="#CCCCCC"> and you need to</font>

225
00:06:51,310 --> 00:06:53,920
seek out kindred spirits because<font color="#CCCCCC"> there's</font>

226
00:06:52,840 --> 00:06:55,750
strength in<font color="#E5E5E5"> numbers so</font><font color="#CCCCCC"> that's why we're</font>

227
00:06:53,920 --> 00:06:57,040
here<font color="#CCCCCC"> right so</font><font color="#E5E5E5"> we're trying to get to</font>

228
00:06:55,750 --> 00:06:58,900
drive a heaven when<font color="#E5E5E5"> although we're there</font>

229
00:06:57,040 --> 00:07:02,680
yet we're kind of<font color="#E5E5E5"> climbing as hard as we</font>

230
00:06:58,900 --> 00:07:03,849
<font color="#E5E5E5">can</font><font color="#CCCCCC"> and it's it's you know</font><font color="#E5E5E5"> we put some</font>

231
00:07:02,680 --> 00:07:05,200
stuff on github maybe you guys could

232
00:07:03,850 --> 00:07:07,030
have some code on<font color="#E5E5E5"> github to you know</font>

233
00:07:05,200 --> 00:07:08,469
maybe<font color="#E5E5E5"> one time you'll find yourself in a</font>

234
00:07:07,030 --> 00:07:09,820
<font color="#CCCCCC">position that</font><font color="#E5E5E5"> it would make sense to to</font>

235
00:07:08,470 --> 00:07:12,390
write some drivers and join in<font color="#E5E5E5"> this</font>

236
00:07:09,820 --> 00:07:15,040
community<font color="#E5E5E5"> and that would be really cool</font>

237
00:07:12,390 --> 00:07:16,599
so that's<font color="#E5E5E5"> driver heaven and hell and</font>

238
00:07:15,040 --> 00:07:20,020
<font color="#E5E5E5">that's maybe reason enough to write</font>

239
00:07:16,600 --> 00:07:21,400
drivers<font color="#E5E5E5"> but thankfully as a bonus if</font>

240
00:07:20,020 --> 00:07:22,659
you're<font color="#E5E5E5"> writing your own drivers it also</font>

241
00:07:21,400 --> 00:07:24,700
means that<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are some applications</font>

242
00:07:22,660 --> 00:07:26,260
<font color="#E5E5E5">that you can write that you couldn't</font>

243
00:07:24,700 --> 00:07:27,460
write at all<font color="#E5E5E5"> using off-the-shelf drivers</font>

244
00:07:26,260 --> 00:07:28,750
it's a really<font color="#E5E5E5"> nice thing once you drop</font>

245
00:07:27,460 --> 00:07:30,640
down<font color="#E5E5E5"> and actually understand what the</font>

246
00:07:28,750 --> 00:07:31,690
<font color="#CCCCCC">harbor's capabilities are there are some</font>

247
00:07:30,640 --> 00:07:34,419
things you<font color="#E5E5E5"> can do that you</font><font color="#CCCCCC"> just couldn't</font>

248
00:07:31,690 --> 00:07:37,990
<font color="#E5E5E5">do before</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> have three examples from</font>

249
00:07:34,420 --> 00:07:39,580
snob land<font color="#CCCCCC"> the first one is a</font><font color="#E5E5E5"> program</font>

250
00:07:37,990 --> 00:07:41,290
<font color="#CCCCCC">called packet blaster which is in a</font>

251
00:07:39,580 --> 00:07:43,750
<font color="#E5E5E5">simple it's it's a load generator with</font>

252
00:07:41,290 --> 00:07:45,160
infinite capacity so it transmits

253
00:07:43,750 --> 00:07:46,990
packets<font color="#CCCCCC"> onto the network and the basic</font>

254
00:07:45,160 --> 00:07:48,910
property is you give it one<font color="#CCCCCC"> CPU per</font>

255
00:07:46,990 --> 00:07:51,190
processor and it is always i/o bound it

256
00:07:48,910 --> 00:07:52,450
will<font color="#E5E5E5"> never run out of CPU cycles so I</font>

257
00:07:51,190 --> 00:07:55,570
have a<font color="#CCCCCC"> screen shot here</font><font color="#E5E5E5"> that you</font>

258
00:07:52,450 --> 00:07:57,580
probably<font color="#E5E5E5"> can't read but it's it's there</font>

259
00:07:55,570 --> 00:08:01,570
on a server<font color="#CCCCCC"> with</font><font color="#E5E5E5"> twenty ten gig ports</font>

260
00:07:57,580 --> 00:08:03,700
and this is soccer soccer<font color="#CCCCCC"> zero and is</font>

261
00:08:01,570 --> 00:08:05,710
sending<font color="#CCCCCC"> 14</font><font color="#E5E5E5"> point eight eight million</font>

262
00:08:03,700 --> 00:08:07,900
packets per second on each port<font color="#E5E5E5"> and this</font>

263
00:08:05,710 --> 00:08:09,460
is the same thing on socket one so it's

264
00:08:07,900 --> 00:08:11,440
about<font color="#E5E5E5"> 300 million packets per second in</font>

265
00:08:09,460 --> 00:08:12,909
total<font color="#E5E5E5"> going out</font><font color="#CCCCCC"> just generating load for</font>

266
00:08:11,440 --> 00:08:15,010
testing stressing some application and

267
00:08:12,910 --> 00:08:16,720
in<font color="#E5E5E5"> h-type down here we have a</font><font color="#CCCCCC"> hundred</font>

268
00:08:15,010 --> 00:08:17,800
<font color="#E5E5E5">percent on one</font><font color="#CCCCCC"> core there and one</font>

269
00:08:16,720 --> 00:08:19,420
hundred<font color="#E5E5E5"> percent of one core there and</font>

270
00:08:17,800 --> 00:08:20,860
nothing else on any<font color="#E5E5E5"> of the other kind of</font>

271
00:08:19,420 --> 00:08:22,420
<font color="#E5E5E5">twenty</font><font color="#CCCCCC"> two cores so it's a nice thing</font>

272
00:08:20,860 --> 00:08:24,790
<font color="#CCCCCC">and when</font><font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to generate a lot</font><font color="#E5E5E5"> of</font>

273
00:08:22,420 --> 00:08:26,050
load for cheap like we have<font color="#CCCCCC"> a server</font>

274
00:08:24,790 --> 00:08:27,790
that<font color="#E5E5E5"> you want to want</font><font color="#CCCCCC"> to benchmark or</font>

275
00:08:26,050 --> 00:08:32,799
<font color="#E5E5E5">upon a stress test</font><font color="#CCCCCC"> you know and loopback</font>

276
00:08:27,790 --> 00:08:35,200
mode<font color="#E5E5E5"> another application we have is is</font>

277
00:08:32,799 --> 00:08:36,549
<font color="#E5E5E5">fire hose</font><font color="#CCCCCC"> also the</font><font color="#E5E5E5"> the trick with packet</font>

278
00:08:35,200 --> 00:08:38,680
blaster the way that works<font color="#E5E5E5"> quickly is</font>

279
00:08:36,549 --> 00:08:41,010
that<font color="#CCCCCC"> never ever does any poor packet</font>

280
00:08:38,679 --> 00:08:42,329
work<font color="#E5E5E5"> so when it</font><font color="#CCCCCC"> starts up it fills</font><font color="#E5E5E5"> all</font>

281
00:08:41,010 --> 00:08:43,919
the<font color="#CCCCCC"> transmit descriptor rings were</font><font color="#E5E5E5"> all</font>

282
00:08:42,330 --> 00:08:45,540
the traffic that<font color="#E5E5E5"> you want and then it</font>

283
00:08:43,919 --> 00:08:47,939
just<font color="#E5E5E5"> puts them all into a loop so it</font>

284
00:08:45,540 --> 00:08:49,230
takes no time<font color="#E5E5E5"> flap to just to just keep</font>

285
00:08:47,940 --> 00:08:50,670
<font color="#CCCCCC">telling the card to just keep on doing</font>

286
00:08:49,230 --> 00:08:52,740
<font color="#CCCCCC">what it's doing and</font><font color="#E5E5E5"> there's no so it's</font>

287
00:08:50,670 --> 00:08:54,240
less than one instruction executed per

288
00:08:52,740 --> 00:08:57,990
packet transmitted so that's the trick

289
00:08:54,240 --> 00:08:59,280
there and then<font color="#CCCCCC"> firehose is kind of it's</font>

290
00:08:57,990 --> 00:09:01,640
<font color="#E5E5E5">kind of the reverse of packet blaster</font>

291
00:08:59,280 --> 00:09:03,660
<font color="#CCCCCC">this is a packet packet capture</font>

292
00:09:01,640 --> 00:09:05,340
<font color="#E5E5E5">application that starts up and</font>

293
00:09:03,660 --> 00:09:07,469
statically set<font color="#E5E5E5"> up the allocated packet</font>

294
00:09:05,340 --> 00:09:09,420
buffers in memory static<font color="#CCCCCC"> Lee initializes</font>

295
00:09:07,470 --> 00:09:10,650
all of the receive descriptors to<font color="#E5E5E5"> point</font>

296
00:09:09,420 --> 00:09:12,060
to that memory<font color="#E5E5E5"> and then just runs them</font>

297
00:09:10,650 --> 00:09:14,100
in a loop and every time a packet is

298
00:09:12,060 --> 00:09:16,170
available it just synchronously calls a

299
00:09:14,100 --> 00:09:18,510
<font color="#E5E5E5">see callback so again it's only a couple</font>

300
00:09:16,170 --> 00:09:20,310
<font color="#CCCCCC">of instructions</font><font color="#E5E5E5"> executed on this</font>

301
00:09:18,510 --> 00:09:22,230
application pour a packet<font color="#E5E5E5"> and</font><font color="#CCCCCC"> everything</font>

302
00:09:20,310 --> 00:09:23,609
<font color="#CCCCCC">every other cycle is available for the</font>

303
00:09:22,230 --> 00:09:24,900
application so these are these are<font color="#E5E5E5"> both</font>

304
00:09:23,610 --> 00:09:27,300
<font color="#CCCCCC">applications where it's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> not</font>

305
00:09:24,900 --> 00:09:29,340
conceivable to match the efficiency<font color="#E5E5E5"> on</font>

306
00:09:27,300 --> 00:09:31,920
any<font color="#E5E5E5"> any framework that's doing any work</font>

307
00:09:29,340 --> 00:09:33,450
kind of a per packet at all and and

308
00:09:31,920 --> 00:09:35,040
finally<font color="#CCCCCC"> is an application called sides</font>

309
00:09:33,450 --> 00:09:37,710
by<font color="#CCCCCC"> there's suddenly</font><font color="#E5E5E5"> new that I'm working</font>

310
00:09:35,040 --> 00:09:39,480
<font color="#E5E5E5">on which which does a kind</font><font color="#CCCCCC"> of a side</font>

311
00:09:37,710 --> 00:09:41,640
channel<font color="#E5E5E5"> attack against an</font><font color="#CCCCCC"> existing</font>

312
00:09:39,480 --> 00:09:45,420
device<font color="#E5E5E5"> driver side channel attacks are</font>

313
00:09:41,640 --> 00:09:47,069
cool now right<font color="#E5E5E5"> so so this is solving a</font>

314
00:09:45,420 --> 00:09:48,599
problem<font color="#E5E5E5"> where you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a server with a</font>

315
00:09:47,070 --> 00:09:49,830
bunch of network cards and the network

316
00:09:48,600 --> 00:09:52,050
cards can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used in different ways the</font>

317
00:09:49,830 --> 00:09:54,450
<font color="#CCCCCC">Konan might have a card VPP</font><font color="#E5E5E5"> you might</font>

318
00:09:52,050 --> 00:09:55,979
<font color="#E5E5E5">now have</font><font color="#CCCCCC"> a car to VM</font><font color="#E5E5E5"> everyone's</font><font color="#CCCCCC"> or</font>

319
00:09:54,450 --> 00:09:58,410
different cards and so you have<font color="#E5E5E5"> no kind</font>

320
00:09:55,980 --> 00:09:59,730
<font color="#CCCCCC">of unified way to</font><font color="#E5E5E5"> control them but if</font>

321
00:09:58,410 --> 00:10:01,439
you<font color="#E5E5E5"> drop down to the hardware level and</font>

322
00:09:59,730 --> 00:10:02,880
look in physical memory<font color="#E5E5E5"> and inspect PCI</font>

323
00:10:01,440 --> 00:10:05,570
registers directly then everything is

324
00:10:02,880 --> 00:10:07,680
the same<font color="#E5E5E5"> so if you have a sideways</font>

325
00:10:05,570 --> 00:10:08,670
<font color="#E5E5E5">monitoring application it can</font><font color="#CCCCCC"> see all of</font>

326
00:10:07,680 --> 00:10:10,050
the<font color="#CCCCCC"> traffic passing through and</font>

327
00:10:08,670 --> 00:10:11,699
everything<font color="#E5E5E5"> because</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> DMA level at</font>

328
00:10:10,050 --> 00:10:12,750
the<font color="#E5E5E5"> hardware level it's the same and it</font>

329
00:10:11,700 --> 00:10:14,070
<font color="#E5E5E5">has to do this without</font><font color="#CCCCCC"> actually</font>

330
00:10:12,750 --> 00:10:15,900
disturbing applications and<font color="#E5E5E5"> of course</font>

331
00:10:14,070 --> 00:10:28,650
you can't do that with an off-the-shelf

332
00:10:15,900 --> 00:10:30,209
driver that's the why so Luke told<font color="#E5E5E5"> you</font>

333
00:10:28,650 --> 00:10:32,670
about<font color="#E5E5E5"> why we want to get to driver</font>

334
00:10:30,210 --> 00:10:35,220
heaven and I'm here to talk<font color="#CCCCCC"> about in</font>

335
00:10:32,670 --> 00:10:37,380
this part how we can sort of start<font color="#CCCCCC"> to</font>

336
00:10:35,220 --> 00:10:39,930
<font color="#E5E5E5">get there and in particular house NAB's</font>

337
00:10:37,380 --> 00:10:43,200
drivers work<font color="#E5E5E5"> and how it's on the path to</font>

338
00:10:39,930 --> 00:10:44,430
getting to driver heaven and this part

339
00:10:43,200 --> 00:10:46,290
just<font color="#E5E5E5"> gives a flavor of the</font>

340
00:10:44,430 --> 00:10:48,479
<font color="#CCCCCC">implementation because of time I</font><font color="#E5E5E5"> won't</font>

341
00:10:46,290 --> 00:10:50,920
<font color="#CCCCCC">be able to</font><font color="#E5E5E5"> get into too much detail but</font>

342
00:10:48,480 --> 00:10:53,769
let's start with<font color="#CCCCCC"> sort of the big</font><font color="#E5E5E5"> picture</font>

343
00:10:50,920 --> 00:10:56,639
of the snap driver world so<font color="#E5E5E5"> I'm gonna be</font>

344
00:10:53,769 --> 00:10:59,170
<font color="#E5E5E5">talking about snaps</font><font color="#CCCCCC"> in tell Nick treble</font>

345
00:10:56,639 --> 00:11:01,149
<font color="#E5E5E5">and that's</font><font color="#CCCCCC"> about one thousand four</font>

346
00:10:59,170 --> 00:11:03,819
hundred<font color="#E5E5E5"> eighty five lines of code of Lua</font>

347
00:11:01,149 --> 00:11:05,649
<font color="#E5E5E5">I'm that Chris pretty high level so it's</font>

348
00:11:03,820 --> 00:11:10,209
not quite<font color="#E5E5E5"> five hundred lines of code</font><font color="#CCCCCC"> but</font>

349
00:11:05,649 --> 00:11:12,639
<font color="#CCCCCC">it's getting</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and the nice thing</font>

350
00:11:10,209 --> 00:11:14,469
about this driver is<font color="#E5E5E5"> that it's it's we</font>

351
00:11:12,639 --> 00:11:17,199
saw we're using an implementation of Lua

352
00:11:14,470 --> 00:11:19,329
called legit<font color="#E5E5E5"> and there is quite high</font>

353
00:11:17,199 --> 00:11:22,180
level<font color="#E5E5E5"> so the code is</font><font color="#CCCCCC"> quite easy to</font>

354
00:11:19,329 --> 00:11:24,099
understand and<font color="#CCCCCC"> Lua JIT because of its</font>

355
00:11:22,180 --> 00:11:25,660
tracing JIT compiler is quite performant

356
00:11:24,100 --> 00:11:28,690
and so we're able<font color="#E5E5E5"> to get the</font>

357
00:11:25,660 --> 00:11:32,230
abstractions that Lua has<font color="#CCCCCC"> are</font><font color="#E5E5E5"> with</font>

358
00:11:28,690 --> 00:11:35,649
relatively low cost<font color="#E5E5E5"> so I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> show</font>

359
00:11:32,230 --> 00:11:37,480
you some<font color="#CCCCCC"> awesome code showing</font><font color="#E5E5E5"> you how</font>

360
00:11:35,649 --> 00:11:39,730
this<font color="#E5E5E5"> driver is implemented and we'll</font>

361
00:11:37,480 --> 00:11:44,880
<font color="#E5E5E5">just talk</font><font color="#CCCCCC"> about how the received part of</font>

362
00:11:39,730 --> 00:11:48,220
the functionality works<font color="#CCCCCC"> so basically</font><font color="#E5E5E5"> a</font>

363
00:11:44,880 --> 00:11:50,889
snap driver is an app<font color="#CCCCCC"> like everything</font>

364
00:11:48,220 --> 00:11:53,199
else in snap<font color="#E5E5E5"> and so when I say</font>

365
00:11:50,889 --> 00:11:55,420
<font color="#E5E5E5">everything else basically a snap program</font>

366
00:11:53,199 --> 00:11:58,120
is composed of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bunch of apps that</font><font color="#E5E5E5"> are</font>

367
00:11:55,420 --> 00:12:01,029
hooked<font color="#E5E5E5"> up in a graph like this</font><font color="#CCCCCC"> so for</font>

368
00:11:58,120 --> 00:12:02,800
<font color="#E5E5E5">example this has two instances of driver</font>

369
00:12:01,029 --> 00:12:05,980
<font color="#CCCCCC">apps</font><font color="#E5E5E5"> and they're connected some filter</font>

370
00:12:02,800 --> 00:12:09,810
apps<font color="#E5E5E5"> and you can create various</font>

371
00:12:05,980 --> 00:12:12,399
combinations of apps<font color="#CCCCCC"> and interesting</font>

372
00:12:09,810 --> 00:12:16,268
<font color="#E5E5E5">interesting graphs</font><font color="#CCCCCC"> they give you the</font>

373
00:12:12,399 --> 00:12:19,510
<font color="#E5E5E5">functionality</font><font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> and so a</font>

374
00:12:16,269 --> 00:12:22,000
snap<font color="#E5E5E5"> app is really just a Lua object</font>

375
00:12:19,510 --> 00:12:23,980
that has a particular<font color="#E5E5E5"> set of methods so</font>

376
00:12:22,000 --> 00:12:25,300
for example I<font color="#E5E5E5"> might have a new</font><font color="#CCCCCC"> method</font>

377
00:12:23,980 --> 00:12:28,060
which<font color="#E5E5E5"> does the initialization for the</font>

378
00:12:25,300 --> 00:12:29,560
app and push and pull methods which

379
00:12:28,060 --> 00:12:32,589
basically does things like receive and

380
00:12:29,560 --> 00:12:34,209
transmit for a particular app so if

381
00:12:32,589 --> 00:12:35,500
we're talking<font color="#E5E5E5"> about a driver a</font><font color="#CCCCCC"> driver is</font>

382
00:12:34,209 --> 00:12:38,229
<font color="#E5E5E5">also just an</font><font color="#CCCCCC"> object that has some</font>

383
00:12:35,500 --> 00:12:39,790
methods<font color="#E5E5E5"> so in particular let's consider</font>

384
00:12:38,230 --> 00:12:44,490
the pull method<font color="#E5E5E5"> which is the part that</font>

385
00:12:39,790 --> 00:12:47,050
implements the receive functionality<font color="#CCCCCC"> so</font>

386
00:12:44,490 --> 00:12:48,760
yeah so what the what<font color="#CCCCCC"> the</font><font color="#E5E5E5"> driver does is</font>

387
00:12:47,050 --> 00:12:51,490
it maintains a ring buffer<font color="#E5E5E5"> at the the</font>

388
00:12:48,760 --> 00:12:54,180
descriptor ring<font color="#CCCCCC"> and then the the Nick</font>

389
00:12:51,490 --> 00:12:55,899
will use DNA to<font color="#E5E5E5"> send</font><font color="#CCCCCC"> packets via the</font>

390
00:12:54,180 --> 00:12:58,599
<font color="#E5E5E5">descriptor ring into the memory</font>

391
00:12:55,899 --> 00:13:00,730
allocated by a driver so<font color="#E5E5E5"> that looks is</font>

392
00:12:58,600 --> 00:13:01,400
kind<font color="#CCCCCC"> of like this</font><font color="#E5E5E5"> on this diagram here</font>

393
00:13:00,730 --> 00:13:03,680
on

394
00:13:01,400 --> 00:13:08,510
on the right side<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> a descriptor</font>

395
00:13:03,680 --> 00:13:10,609
ring and the the<font color="#CCCCCC"> head first</font><font color="#E5E5E5"> the first</font>

396
00:13:08,510 --> 00:13:11,990
<font color="#E5E5E5">point</font><font color="#CCCCCC"> of there is the head pointer and</font>

397
00:13:10,610 --> 00:13:15,590
there's a so tail pointer the second

398
00:13:11,990 --> 00:13:18,080
pointer there<font color="#CCCCCC"> and basically</font><font color="#E5E5E5"> the the blue</font>

399
00:13:15,590 --> 00:13:20,630
portion between<font color="#E5E5E5"> the two pointers is the</font>

400
00:13:18,080 --> 00:13:22,580
part that<font color="#E5E5E5"> is available for use so</font>

401
00:13:20,630 --> 00:13:24,620
they're empty slots<font color="#CCCCCC"> that the Nick can</font>

402
00:13:22,580 --> 00:13:26,630
send packets into<font color="#E5E5E5"> and the great parts of</font>

403
00:13:24,620 --> 00:13:28,610
<font color="#E5E5E5">the occupied</font><font color="#CCCCCC"> portion</font><font color="#E5E5E5"> and the driver has</font>

404
00:13:26,630 --> 00:13:29,950
<font color="#CCCCCC">to maintain</font><font color="#E5E5E5"> this ring by allocating it</font>

405
00:13:28,610 --> 00:13:32,060
somewhere<font color="#E5E5E5"> in memory and then</font>

406
00:13:29,950 --> 00:13:34,130
manipulating<font color="#E5E5E5"> the register is on the</font><font color="#CCCCCC"> Nick</font>

407
00:13:32,060 --> 00:13:36,229
to set the base address<font color="#E5E5E5"> for the ring and</font>

408
00:13:34,130 --> 00:13:37,640
<font color="#CCCCCC">also</font><font color="#E5E5E5"> maintained things like the atarid</font>

409
00:13:36,230 --> 00:13:39,200
<font color="#CCCCCC">tail register and make sure that it's</font>

410
00:13:37,640 --> 00:13:42,470
pointing<font color="#E5E5E5"> at the right spot</font><font color="#CCCCCC"> so for</font>

411
00:13:39,200 --> 00:13:44,990
<font color="#E5E5E5">example if the if the Nick consumes or</font>

412
00:13:42,470 --> 00:13:46,880
sorry the driver consumes a packet and

413
00:13:44,990 --> 00:13:50,690
<font color="#E5E5E5">then makes another spot empty it moves</font>

414
00:13:46,880 --> 00:13:52,730
the tail pointer down<font color="#E5E5E5"> down like this and</font>

415
00:13:50,690 --> 00:13:55,130
<font color="#E5E5E5">then in the actual driver code</font><font color="#CCCCCC"> he'll we</font>

416
00:13:52,730 --> 00:13:58,550
manipulate<font color="#E5E5E5"> these registers it's pretty</font>

417
00:13:55,130 --> 00:14:00,530
<font color="#CCCCCC">straightforward so in the code basically</font>

418
00:13:58,550 --> 00:14:03,170
to access a register you<font color="#E5E5E5"> would use a</font>

419
00:14:00,530 --> 00:14:05,420
call like the one here which is

420
00:14:03,170 --> 00:14:07,490
<font color="#E5E5E5">accessing the self object which is the</font>

421
00:14:05,420 --> 00:14:10,160
<font color="#E5E5E5">driver object itself and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> it's</font>

422
00:14:07,490 --> 00:14:12,740
<font color="#E5E5E5">accessing this dot R field which is a</font>

423
00:14:10,160 --> 00:14:15,020
<font color="#E5E5E5">table of all the registers that</font><font color="#CCCCCC"> the</font>

424
00:14:12,740 --> 00:14:17,990
driver uses<font color="#CCCCCC"> and then you can access the</font>

425
00:14:15,020 --> 00:14:20,390
<font color="#CCCCCC">Rd T field in that</font><font color="#E5E5E5"> which is an</font><font color="#CCCCCC"> object</font>

426
00:14:17,990 --> 00:14:21,590
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can call to get the value</font>

427
00:14:20,390 --> 00:14:23,720
<font color="#E5E5E5">that's currently in the register and</font>

428
00:14:21,590 --> 00:14:25,880
<font color="#E5E5E5">similarly you can just call it by</font>

429
00:14:23,720 --> 00:14:28,510
passing<font color="#CCCCCC"> a value into it to set the</font>

430
00:14:25,880 --> 00:14:30,800
register value and this<font color="#E5E5E5"> is using</font><font color="#CCCCCC"> mmio</font>

431
00:14:28,510 --> 00:14:32,720
underneath using<font color="#CCCCCC"> a</font><font color="#E5E5E5"> support library that</font>

432
00:14:30,800 --> 00:14:35,780
snap provides to do all the actual

433
00:14:32,720 --> 00:14:38,740
<font color="#E5E5E5">low-level work and this line here it's</font>

434
00:14:35,780 --> 00:14:42,350
<font color="#CCCCCC">just incrementing that</font><font color="#E5E5E5"> the tail pointer</font>

435
00:14:38,740 --> 00:14:44,000
<font color="#CCCCCC">and making</font><font color="#E5E5E5"> sure that if it goes past the</font>

436
00:14:42,350 --> 00:14:48,470
end of<font color="#E5E5E5"> the ring that it comes</font><font color="#CCCCCC"> back</font>

437
00:14:44,000 --> 00:14:50,570
around<font color="#CCCCCC"> okay so in</font><font color="#E5E5E5"> addition to</font>

438
00:14:48,470 --> 00:14:52,220
manipulating<font color="#E5E5E5"> the registers for the</font>

439
00:14:50,570 --> 00:14:54,980
<font color="#E5E5E5">descriptor ring you also have to</font>

440
00:14:52,220 --> 00:14:58,490
allocate the memory for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and for the</font>

441
00:14:54,980 --> 00:14:59,720
Intel for<font color="#E5E5E5"> the Intel card the each entry</font>

442
00:14:58,490 --> 00:15:04,100
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the descriptor ring kind of looks</font>

443
00:14:59,720 --> 00:15:06,050
like this<font color="#CCCCCC"> half of</font><font color="#E5E5E5"> a is an address to a</font>

444
00:15:04,100 --> 00:15:08,120
packet buffer that's<font color="#E5E5E5"> allocated by the</font>

445
00:15:06,050 --> 00:15:11,420
driver and<font color="#E5E5E5"> then the other half</font><font color="#CCCCCC"> is some</font>

446
00:15:08,120 --> 00:15:14,000
<font color="#E5E5E5">metadata that</font><font color="#CCCCCC"> Nick provides small also</font>

447
00:15:11,420 --> 00:15:14,490
<font color="#CCCCCC">in the actual driver we represent one of</font>

448
00:15:14,000 --> 00:15:16,709
<font color="#E5E5E5">these</font>

449
00:15:14,490 --> 00:15:20,100
trees<font color="#E5E5E5"> using this data type declaration</font>

450
00:15:16,709 --> 00:15:22,199
and this is using the<font color="#E5E5E5"> Lua JIT</font><font color="#CCCCCC"> fi</font><font color="#E5E5E5"> which</font>

451
00:15:20,100 --> 00:15:24,350
lets you basically<font color="#E5E5E5"> use C data structures</font>

452
00:15:22,200 --> 00:15:27,810
as<font color="#E5E5E5"> Lua objects that you can manipulate</font>

453
00:15:24,350 --> 00:15:30,330
<font color="#CCCCCC">easily and then to allocate the</font>

454
00:15:27,810 --> 00:15:32,160
descriptor ring<font color="#CCCCCC"> you can use these two</font>

455
00:15:30,330 --> 00:15:34,110
lines the first<font color="#E5E5E5"> line is just computing</font>

456
00:15:32,160 --> 00:15:36,240
the size based on<font color="#E5E5E5"> the the calculated</font>

457
00:15:34,110 --> 00:15:38,910
size from<font color="#E5E5E5"> the FFI and then the second</font>

458
00:15:36,240 --> 00:15:40,740
<font color="#E5E5E5">line uses some support libraries that</font>

459
00:15:38,910 --> 00:15:44,130
snap provides to allocate some<font color="#E5E5E5"> DM a</font>

460
00:15:40,740 --> 00:15:46,860
<font color="#CCCCCC">friendly memory</font><font color="#E5E5E5"> that we can use for the</font>

461
00:15:44,130 --> 00:15:49,140
descriptor ring and then given that

462
00:15:46,860 --> 00:15:52,170
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> then we can write the main method</font>

463
00:15:49,140 --> 00:15:54,899
<font color="#CCCCCC">that does the receive and functionality</font>

464
00:15:52,170 --> 00:15:56,430
for this driver<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's and it's just</font>

465
00:15:54,899 --> 00:15:58,920
this code so this<font color="#E5E5E5"> is a little simplify</font>

466
00:15:56,430 --> 00:16:01,170
<font color="#E5E5E5">from the actual code</font><font color="#CCCCCC"> for ease of putting</font>

467
00:15:58,920 --> 00:16:05,939
<font color="#E5E5E5">on inside</font><font color="#CCCCCC"> but it's pretty similar to the</font>

468
00:16:01,170 --> 00:16:07,110
<font color="#CCCCCC">actual code and this this method so this</font>

469
00:16:05,940 --> 00:16:08,880
<font color="#E5E5E5">first line</font><font color="#CCCCCC"> here is the</font><font color="#E5E5E5"> method</font>

470
00:16:07,110 --> 00:16:11,880
declaration saying<font color="#E5E5E5"> it's a pole method</font>

471
00:16:08,880 --> 00:16:13,529
<font color="#E5E5E5">for the driver and in the first line</font>

472
00:16:11,880 --> 00:16:15,750
we're synchronizing<font color="#E5E5E5"> we're calling a</font>

473
00:16:13,529 --> 00:16:21,320
method<font color="#CCCCCC"> sync receive to synchronize the</font>

474
00:16:15,750 --> 00:16:23,850
drivers<font color="#CCCCCC"> basically copy of the pointers</font>

475
00:16:21,320 --> 00:16:27,329
and<font color="#E5E5E5"> the drivers are sorry the</font><font color="#CCCCCC"> Knicks</font>

476
00:16:23,850 --> 00:16:29,399
view of the pointers and then there's a

477
00:16:27,329 --> 00:16:31,109
main loop here<font color="#E5E5E5"> which is basically</font><font color="#CCCCCC"> just</font>

478
00:16:29,399 --> 00:16:33,390
<font color="#E5E5E5">looping over</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> maximum number of</font>

479
00:16:31,110 --> 00:16:36,690
packets<font color="#CCCCCC"> that we can put in</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the</font>

480
00:16:33,390 --> 00:16:39,390
<font color="#CCCCCC">in the in an app link at once and then</font>

481
00:16:36,690 --> 00:16:41,700
on each loop iteration<font color="#E5E5E5"> we check if</font>

482
00:16:39,390 --> 00:16:43,380
there's packets available in the<font color="#CCCCCC"> ring</font>

483
00:16:41,700 --> 00:16:45,480
descriptor<font color="#CCCCCC"> and if there's not</font><font color="#E5E5E5"> we just</font>

484
00:16:43,380 --> 00:16:47,790
<font color="#E5E5E5">break out of the loop</font><font color="#CCCCCC"> and if there is</font>

485
00:16:45,480 --> 00:16:49,740
available if there are packets available

486
00:16:47,790 --> 00:16:51,750
then we call this a receive method to

487
00:16:49,740 --> 00:16:53,459
actually<font color="#E5E5E5"> get the packet from the packet</font>

488
00:16:51,750 --> 00:16:56,490
buffer we've allocated<font color="#CCCCCC"> and then send it</font>

489
00:16:53,459 --> 00:16:59,250
<font color="#E5E5E5">off</font><font color="#CCCCCC"> to the next</font><font color="#E5E5E5"> app in the graph in our</font>

490
00:16:56,490 --> 00:17:00,779
snap program and then finally<font color="#E5E5E5"> after</font>

491
00:16:59,250 --> 00:17:03,690
we've done the receive we can just

492
00:17:00,779 --> 00:17:06,119
allocate new<font color="#E5E5E5"> buffers</font><font color="#CCCCCC"> to replace the ones</font>

493
00:17:03,690 --> 00:17:10,140
that we've read off<font color="#CCCCCC"> of the descriptor</font>

494
00:17:06,119 --> 00:17:12,359
ring and then<font color="#E5E5E5"> I'm just going</font><font color="#CCCCCC"> to show you</font>

495
00:17:10,140 --> 00:17:15,000
<font color="#E5E5E5">one of these helper functions here this</font>

496
00:17:12,359 --> 00:17:17,010
that's used in this<font color="#E5E5E5"> main</font><font color="#CCCCCC"> method to show</font>

497
00:17:15,000 --> 00:17:20,550
you kind<font color="#CCCCCC"> of give you an idea of</font><font color="#E5E5E5"> what</font>

498
00:17:17,010 --> 00:17:21,959
it's like this is<font color="#E5E5E5"> the receive method</font><font color="#CCCCCC"> and</font>

499
00:17:20,550 --> 00:17:26,579
this is the one<font color="#E5E5E5"> that actually</font><font color="#CCCCCC"> patches</font>

500
00:17:21,959 --> 00:17:28,260
<font color="#CCCCCC">the packet that you</font><font color="#E5E5E5"> want to read and</font>

501
00:17:26,579 --> 00:17:30,810
it's pretty sure all you

502
00:17:28,260 --> 00:17:33,090
is you first<font color="#E5E5E5"> take copy of the tail</font>

503
00:17:30,810 --> 00:17:38,970
register<font color="#E5E5E5"> by reading off this</font><font color="#CCCCCC"> rdt</font>

504
00:17:33,090 --> 00:17:42,179
register<font color="#E5E5E5"> and then using that register</font>

505
00:17:38,970 --> 00:17:45,000
value<font color="#CCCCCC"> you then index into the descriptor</font>

506
00:17:42,180 --> 00:17:46,890
ring<font color="#CCCCCC"> to get some</font><font color="#E5E5E5"> metadata about the</font>

507
00:17:45,000 --> 00:17:50,250
packet and then you also use the same

508
00:17:46,890 --> 00:17:53,010
<font color="#CCCCCC">index</font><font color="#E5E5E5"> to to look up the the actual</font>

509
00:17:50,250 --> 00:17:56,970
packet buffer in the<font color="#E5E5E5"> South rx packets</font>

510
00:17:53,010 --> 00:17:58,620
array<font color="#E5E5E5"> and then after you do that you</font>

511
00:17:56,970 --> 00:18:00,240
delete the packet from<font color="#E5E5E5"> the array because</font>

512
00:17:58,620 --> 00:18:03,000
<font color="#E5E5E5">you no</font><font color="#CCCCCC"> longer need</font><font color="#E5E5E5"> it</font>

513
00:18:00,240 --> 00:18:06,120
and will allocate a new<font color="#E5E5E5"> one</font><font color="#CCCCCC"> and then you</font>

514
00:18:03,000 --> 00:18:07,770
use this self dot<font color="#CCCCCC"> ret call to</font><font color="#E5E5E5"> increment</font>

515
00:18:06,120 --> 00:18:08,429
the tail pointer so it's pretty

516
00:18:07,770 --> 00:18:10,530
<font color="#E5E5E5">straightforward</font>

517
00:18:08,430 --> 00:18:12,630
the<font color="#E5E5E5"> codes</font><font color="#CCCCCC"> pretty easy</font><font color="#E5E5E5"> to read and it's</font>

518
00:18:10,530 --> 00:18:15,149
very short<font color="#CCCCCC"> and all the helper functions</font>

519
00:18:12,630 --> 00:18:17,640
on this<font color="#CCCCCC"> previous slide</font><font color="#E5E5E5"> here like sync</font>

520
00:18:15,150 --> 00:18:20,250
receive and receive and so on<font color="#CCCCCC"> are about</font>

521
00:18:17,640 --> 00:18:26,010
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> length as this as</font><font color="#E5E5E5"> this method</font>

522
00:18:20,250 --> 00:18:28,470
<font color="#E5E5E5">here so it's pretty</font><font color="#CCCCCC"> short and</font><font color="#E5E5E5"> all this</font>

523
00:18:26,010 --> 00:18:30,090
all this basically<font color="#CCCCCC"> shows you that it's</font>

524
00:18:28,470 --> 00:18:32,010
<font color="#E5E5E5">pretty easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write a driver like this</font>

525
00:18:30,090 --> 00:18:33,120
<font color="#E5E5E5">using</font><font color="#CCCCCC"> glue agent and using this kind of</font>

526
00:18:32,010 --> 00:18:34,740
<font color="#E5E5E5">approach</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do this in your</font>

527
00:18:33,120 --> 00:18:36,260
favorite programming language<font color="#E5E5E5"> and put it</font>

528
00:18:34,740 --> 00:18:39,090
up<font color="#E5E5E5"> on github</font><font color="#CCCCCC"> too</font>

529
00:18:36,260 --> 00:18:40,230
<font color="#E5E5E5">okay so let me talk</font><font color="#CCCCCC"> now about a little</font>

530
00:18:39,090 --> 00:18:41,610
<font color="#E5E5E5">bit about recent work we've been doing</font>

531
00:18:40,230 --> 00:18:45,480
on this driver<font color="#E5E5E5"> and some future work that</font>

532
00:18:41,610 --> 00:18:49,590
<font color="#E5E5E5">we want to do so recently</font><font color="#CCCCCC"> I mean some</font>

533
00:18:45,480 --> 00:18:52,440
colleagues added support for RSS and<font color="#CCCCCC"> VMD</font>

534
00:18:49,590 --> 00:18:54,959
cubed to<font color="#CCCCCC"> the driver I was mentioning and</font>

535
00:18:52,440 --> 00:18:57,150
the advantage here is<font color="#CCCCCC"> the RSS basically</font>

536
00:18:54,960 --> 00:19:00,630
lets you scale more easily to multiple

537
00:18:57,150 --> 00:19:03,150
course and the idea is that<font color="#E5E5E5"> our RSS lets</font>

538
00:19:00,630 --> 00:19:05,130
you hash flows<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> you can</font>

539
00:19:03,150 --> 00:19:07,710
distribute<font color="#E5E5E5"> them</font><font color="#CCCCCC"> two separate queues so</font>

540
00:19:05,130 --> 00:19:10,320
pictorially<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of looks like this you</font>

541
00:19:07,710 --> 00:19:12,690
have a packet and it enters the<font color="#CCCCCC"> nick and</font>

542
00:19:10,320 --> 00:19:14,700
the<font color="#CCCCCC"> nick will hash the packet based</font><font color="#E5E5E5"> on</font>

543
00:19:12,690 --> 00:19:17,130
its flow characteristics and then send

544
00:19:14,700 --> 00:19:21,030
it to<font color="#E5E5E5"> one of multiple queues that are on</font>

545
00:19:17,130 --> 00:19:22,650
the Nick<font color="#CCCCCC"> and then in little DNA that</font>

546
00:19:21,030 --> 00:19:25,350
into the memory<font color="#E5E5E5"> that the driver is</font>

547
00:19:22,650 --> 00:19:27,000
allocated in<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> and so basically the</font>

548
00:19:25,350 --> 00:19:30,959
idea<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can have separate</font>

549
00:19:27,000 --> 00:19:33,300
instances of the snap driver app and

550
00:19:30,960 --> 00:19:35,640
running on different<font color="#E5E5E5"> cores</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's</font>

551
00:19:33,300 --> 00:19:38,970
how you can<font color="#E5E5E5"> scale to multiple cores in</font>

552
00:19:35,640 --> 00:19:40,470
snap<font color="#E5E5E5"> in the current release and I should</font>

553
00:19:38,970 --> 00:19:41,610
also<font color="#E5E5E5"> mention that all of the work for</font>

554
00:19:40,470 --> 00:19:45,980
<font color="#E5E5E5">the</font>

555
00:19:41,610 --> 00:19:48,510
the<font color="#CCCCCC"> RSS support</font><font color="#E5E5E5"> was done by peepers do</font>

556
00:19:45,980 --> 00:19:50,640
and then finally talking<font color="#E5E5E5"> about some</font>

557
00:19:48,510 --> 00:19:53,309
<font color="#E5E5E5">future work so the current Intel driver</font>

558
00:19:50,640 --> 00:19:56,910
supports<font color="#E5E5E5"> some 1g cards and also supports</font>

559
00:19:53,309 --> 00:19:58,470
the intel 8259<font color="#CCCCCC"> 9 and in the future we'd</font>

560
00:19:56,910 --> 00:20:03,500
like to work on<font color="#CCCCCC"> supporting more NYX for</font>

561
00:19:58,470 --> 00:20:03,500
example the XL<font color="#E5E5E5"> 710 as well</font>

562
00:20:03,510 --> 00:20:16,559
yep so that's<font color="#E5E5E5"> it thank you</font><font color="#CCCCCC"> for listening</font>

563
00:20:07,790 --> 00:20:16,559
[Applause]

564
00:20:18,660 --> 00:20:25,560
any questions<font color="#CCCCCC"> in the back there</font>

565
00:20:43,330 --> 00:20:46,779
<font color="#CCCCCC">Yeah right</font><font color="#E5E5E5"> so I mean getting the</font>

566
00:20:45,460 --> 00:20:49,330
<font color="#E5E5E5">no-knock spear and release was like a</font>

567
00:20:46,779 --> 00:20:51,220
<font color="#CCCCCC">two-year project</font><font color="#E5E5E5"> and and the way we got</font>

568
00:20:49,330 --> 00:20:53,918
<font color="#CCCCCC">a damn</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not actually us it was it</font>

569
00:20:51,220 --> 00:20:56,200
was<font color="#CCCCCC"> Newman</font><font color="#E5E5E5"> Kowalewski and</font><font color="#CCCCCC"> Reina shuts</font>

570
00:20:53,919 --> 00:20:58,360
Meyer at Deutsche Telekom who said these

571
00:20:56,200 --> 00:21:00,129
<font color="#E5E5E5">guys</font><font color="#CCCCCC"> are running</font><font color="#E5E5E5"> a driver for your card</font>

572
00:20:58,360 --> 00:21:01,689
<font color="#CCCCCC">if you don't give in the docs the</font>

573
00:21:00,129 --> 00:21:03,730
<font color="#E5E5E5">projects have failed</font><font color="#CCCCCC"> we're not gonna be</font>

574
00:21:01,690 --> 00:21:05,850
able<font color="#E5E5E5"> to buy it so you know balls in your</font>

575
00:21:03,730 --> 00:21:05,850
court

576
00:21:07,080 --> 00:21:11,289
yeah so I don't<font color="#CCCCCC"> know the</font><font color="#E5E5E5"> only way we've</font>

577
00:21:09,429 --> 00:21:13,509
succeeded is to a very big customer and

578
00:21:11,289 --> 00:21:15,369
who understands<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> going on and does</font>

579
00:21:13,509 --> 00:21:17,710
not<font color="#E5E5E5"> you know I think the challenge is oh</font>

580
00:21:15,369 --> 00:21:20,019
<font color="#E5E5E5">sorry repeat the question the question</font>

581
00:21:17,710 --> 00:21:22,239
<font color="#CCCCCC">was as a community how can</font><font color="#E5E5E5"> we get</font>

582
00:21:20,019 --> 00:21:23,769
vendors to release prevailing vendors to

583
00:21:22,239 --> 00:21:25,119
release their their descriptions you

584
00:21:23,769 --> 00:21:27,279
know normally you<font color="#CCCCCC"> use</font><font color="#E5E5E5"> like talking to a</font>

585
00:21:25,119 --> 00:21:28,988
<font color="#CCCCCC">brick wall</font><font color="#E5E5E5"> and and I would say to frame</font>

586
00:21:27,279 --> 00:21:31,929
the<font color="#CCCCCC"> problem</font><font color="#E5E5E5"> I would say vendors don't</font>

587
00:21:28,989 --> 00:21:33,580
<font color="#E5E5E5">care about people just people contacting</font>

588
00:21:31,929 --> 00:21:35,409
them off the street<font color="#E5E5E5"> right they they're</font>

589
00:21:33,580 --> 00:21:37,330
driven by<font color="#E5E5E5"> their by their key account</font>

590
00:21:35,409 --> 00:21:38,950
managers on their big accounts and the

591
00:21:37,330 --> 00:21:40,269
problem<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is that that the big</font>

592
00:21:38,950 --> 00:21:41,470
accounts the vendors<font color="#E5E5E5"> will fall over</font>

593
00:21:40,269 --> 00:21:42,850
<font color="#CCCCCC">themselves to help them right so they're</font>

594
00:21:41,470 --> 00:21:44,019
<font color="#E5E5E5">always already getting what they want so</font>

595
00:21:42,850 --> 00:21:46,209
the problem is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this is not widely</font>

596
00:21:44,019 --> 00:21:48,489
distributed so the<font color="#CCCCCC"> only thing</font><font color="#E5E5E5"> that works</font>

597
00:21:46,210 --> 00:21:50,619
that I think is you need to find someone

598
00:21:48,489 --> 00:21:52,450
important a<font color="#E5E5E5"> Deutsche Telekom a Google or</font>

599
00:21:50,619 --> 00:21:55,178
Facebook someone like that<font color="#CCCCCC"> who will</font><font color="#E5E5E5"> go</font>

600
00:21:52,450 --> 00:21:56,529
<font color="#E5E5E5">and say you got</font><font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> like in</font>

601
00:21:55,179 --> 00:21:58,989
the<font color="#E5E5E5"> Manics case</font><font color="#CCCCCC"> it escalated</font><font color="#E5E5E5"> all the way</font>

602
00:21:56,529 --> 00:22:01,389
up to the CEO<font color="#E5E5E5"> to sign off on on putting</font>

603
00:21:58,989 --> 00:22:02,590
out<font color="#E5E5E5"> an ad to make a whole new revision</font>

604
00:22:01,389 --> 00:22:06,758
of the manual with the<font color="#E5E5E5"> subsets they're</font>

605
00:22:02,590 --> 00:22:08,529
<font color="#E5E5E5">familiar comforts and everything so talk</font>

606
00:22:06,759 --> 00:22:12,429
to<font color="#CCCCCC"> your friends who are executives in</font>

607
00:22:08,529 --> 00:22:14,980
big companies<font color="#CCCCCC"> and there and tell them</font>

608
00:22:12,429 --> 00:22:16,539
<font color="#CCCCCC">that tell them that you know when the</font>

609
00:22:14,980 --> 00:22:17,919
specifications are open that means

610
00:22:16,539 --> 00:22:19,389
<font color="#E5E5E5">there's a lot of development</font><font color="#CCCCCC"> being done</font>

611
00:22:17,919 --> 00:22:21,309
the<font color="#E5E5E5"> little guys as well a lot</font><font color="#CCCCCC"> of their</font>

612
00:22:19,389 --> 00:22:22,928
actual<font color="#E5E5E5"> interesting innovation comes</font><font color="#CCCCCC"> from</font>

613
00:22:21,309 --> 00:22:23,769
and<font color="#E5E5E5"> they're a huge beneficiaries the big</font>

614
00:22:22,929 --> 00:22:25,210
fish are<font color="#CCCCCC"> actually really big</font>

615
00:22:23,769 --> 00:22:26,320
beneficiaries are all of this you<font color="#E5E5E5"> think</font>

616
00:22:25,210 --> 00:22:28,090
of all the code they get from Linux and

617
00:22:26,320 --> 00:22:29,529
everything and I<font color="#CCCCCC"> think probably a lot</font><font color="#E5E5E5"> of</font>

618
00:22:28,090 --> 00:22:30,999
companies are<font color="#CCCCCC"> not conscious that it is a</font>

619
00:22:29,529 --> 00:22:33,249
it<font color="#CCCCCC"> is a problem for the</font><font color="#E5E5E5"> little guys</font>

620
00:22:30,999 --> 00:22:34,690
because the vendors are<font color="#E5E5E5"> so sweet with</font>

621
00:22:33,249 --> 00:22:36,249
them so maybe maybe<font color="#E5E5E5"> you to build</font>

622
00:22:34,690 --> 00:22:37,230
awareness<font color="#E5E5E5"> with the big companies about</font>

623
00:22:36,249 --> 00:22:39,540
how easily they

624
00:22:37,230 --> 00:22:56,730
can<font color="#E5E5E5"> consider the problem</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> the</font>

625
00:22:39,540 --> 00:22:59,490
upside would be for them<font color="#CCCCCC"> so the question</font>

626
00:22:56,730 --> 00:23:02,520
was<font color="#CCCCCC"> how big is the support library that</font>

627
00:22:59,490 --> 00:23:03,870
the driver<font color="#E5E5E5"> is using</font><font color="#CCCCCC"> so it's it's</font>

628
00:23:02,520 --> 00:23:06,179
<font color="#CCCCCC">actually pretty</font><font color="#E5E5E5"> small itself I don't</font>

629
00:23:03,870 --> 00:23:14,399
<font color="#E5E5E5">have a number of lines off the top of my</font>

630
00:23:06,179 --> 00:23:17,059
<font color="#E5E5E5">head do you know any other questions in</font>

631
00:23:14,400 --> 00:23:17,059
<font color="#E5E5E5">the back over there</font>

632
00:23:35,100 --> 00:23:39,060
so can<font color="#E5E5E5"> you</font><font color="#CCCCCC"> repeat the</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> again</font>

633
00:23:52,650 --> 00:23:58,440
I<font color="#CCCCCC"> say the crust so</font><font color="#E5E5E5"> the question is what</font>

634
00:23:55,650 --> 00:24:01,020
happens<font color="#E5E5E5"> if two workers tries to process</font>

635
00:23:58,440 --> 00:24:03,030
the same packets<font color="#E5E5E5"> that's that's not</font><font color="#CCCCCC"> an</font>

636
00:24:01,020 --> 00:24:04,470
issue in<font color="#E5E5E5"> this case because two</font><font color="#CCCCCC"> workers</font>

637
00:24:03,030 --> 00:24:07,010
<font color="#E5E5E5">shouldn't be working on the same</font>

638
00:24:04,470 --> 00:24:14,610
<font color="#CCCCCC">received two in the setup</font><font color="#E5E5E5"> they'll be</font>

639
00:24:07,010 --> 00:24:19,430
each receive<font color="#CCCCCC"> QD gets its own</font><font color="#E5E5E5"> app any</font>

640
00:24:14,610 --> 00:24:19,429
other questions in the middle

641
00:24:33,169 --> 00:24:46,679
<font color="#E5E5E5">so can you say that one more time</font><font color="#CCCCCC"> yes so</font>

642
00:24:44,580 --> 00:24:48,870
the question<font color="#CCCCCC"> is the driver code that I</font>

643
00:24:46,679 --> 00:24:51,330
<font color="#E5E5E5">showed is very synchronous and doing you</font>

644
00:24:48,870 --> 00:24:56,340
to use asynchronous<font color="#E5E5E5"> programming in other</font>

645
00:24:51,330 --> 00:24:57,990
cases<font color="#E5E5E5"> so not in the particular kinds of</font>

646
00:24:56,340 --> 00:25:00,840
<font color="#E5E5E5">code I showed here but in the</font>

647
00:24:57,990 --> 00:25:03,150
<font color="#E5E5E5">configuration code for the for the NIC</font>

648
00:25:00,840 --> 00:25:05,039
or for the<font color="#CCCCCC"> driver</font><font color="#E5E5E5"> sorry sometimes we</font>

649
00:25:03,150 --> 00:25:06,570
need to<font color="#CCCCCC"> use more in a circular styles of</font>

650
00:25:05,039 --> 00:25:08,309
programming<font color="#CCCCCC"> in</font><font color="#E5E5E5"> particular we need to</font>

651
00:25:06,570 --> 00:25:10,740
<font color="#E5E5E5">sometimes coordinate</font><font color="#CCCCCC"> between different</font>

652
00:25:08,309 --> 00:25:12,240
instances of<font color="#CCCCCC"> a driver that are using the</font>

653
00:25:10,740 --> 00:25:13,830
<font color="#E5E5E5">same</font><font color="#CCCCCC"> configuration registers and there</font>

654
00:25:12,240 --> 00:25:19,799
we need<font color="#E5E5E5"> to use more kind of concurrent</font>

655
00:25:13,830 --> 00:25:23,370
<font color="#CCCCCC">programming ideas</font><font color="#E5E5E5"> yep any other</font>

656
00:25:19,799 --> 00:25:25,680
questions<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I don't see</font><font color="#CCCCCC"> any other</font>

657
00:25:23,370 --> 00:25:34,079
questions<font color="#CCCCCC"> thanks</font>

658
00:25:25,680 --> 00:25:34,079
[Applause]

