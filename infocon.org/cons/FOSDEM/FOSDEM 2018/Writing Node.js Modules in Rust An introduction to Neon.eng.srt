1
00:00:04,590 --> 00:00:09,680
<font color="#E5E5E5">okay but it only started introducing</font>

2
00:00:07,170 --> 00:00:14,580
<font color="#CCCCCC">yourselves oh yeah</font>

3
00:00:09,680 --> 00:00:19,439
so<font color="#CCCCCC"> ah you need an odious</font><font color="#E5E5E5"> add-on Oh kind</font>

4
00:00:14,580 --> 00:00:22,679
of fast<font color="#CCCCCC"> because you might need more</font>

5
00:00:19,440 --> 00:00:26,730
<font color="#CCCCCC">performance in</font><font color="#E5E5E5"> noches or you have a</font>

6
00:00:22,679 --> 00:00:30,150
native library that you want<font color="#E5E5E5"> to you want</font>

7
00:00:26,730 --> 00:00:32,369
<font color="#E5E5E5">it to be used in</font><font color="#CCCCCC"> different languages for</font>

8
00:00:30,150 --> 00:00:34,339
<font color="#E5E5E5">example</font><font color="#CCCCCC"> Ruby Python and</font><font color="#E5E5E5"> then you're</font>

9
00:00:32,369 --> 00:00:38,070
right<font color="#E5E5E5"> um</font>

10
00:00:34,340 --> 00:00:39,570
bindings for that<font color="#CCCCCC"> library of yours or</font>

11
00:00:38,070 --> 00:00:43,890
you want more<font color="#CCCCCC"> freedom in memory</font>

12
00:00:39,570 --> 00:00:45,210
management or you might<font color="#E5E5E5"> even</font><font color="#CCCCCC"> use you</font>

13
00:00:43,890 --> 00:00:48,210
won't even<font color="#CCCCCC"> want to use</font><font color="#E5E5E5"> some low-level</font>

14
00:00:45,210 --> 00:00:48,840
API<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your application and in OTS you</font>

15
00:00:48,210 --> 00:00:52,290
just can't

16
00:00:48,840 --> 00:00:53,640
without the proper binding or you didn't

17
00:00:52,290 --> 00:00:55,730
even like JavaScript but<font color="#E5E5E5"> that's not a</font>

18
00:00:53,640 --> 00:00:58,290
good<font color="#CCCCCC"> reason</font>

19
00:00:55,730 --> 00:01:00,540
<font color="#CCCCCC">alright so how to write</font><font color="#E5E5E5"> an odious I</font>

20
00:00:58,290 --> 00:01:05,519
don't know I searched it and<font color="#E5E5E5"> C++ fills</font>

21
00:01:00,540 --> 00:01:09,350
up not a fan<font color="#E5E5E5"> and I hope you</font><font color="#CCCCCC"> are not a</font>

22
00:01:05,519 --> 00:01:14,249
fan of<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> because this is the</font><font color="#CCCCCC"> Ross room</font>

23
00:01:09,350 --> 00:01:17,820
so I found<font color="#CCCCCC"> nyan nyan is a project to</font>

24
00:01:14,249 --> 00:01:21,479
bring Ross and<font color="#E5E5E5"> nodejs closer well it</font>

25
00:01:17,820 --> 00:01:26,280
helps you to write bindings so it sound

26
00:01:21,479 --> 00:01:29,249
quite<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to get started with is not</font>

27
00:01:26,280 --> 00:01:32,789
very visible<font color="#E5E5E5"> but you could install the</font>

28
00:01:29,249 --> 00:01:37,589
CLI from NPM and<font color="#E5E5E5"> you can easily create a</font>

29
00:01:32,789 --> 00:01:39,329
new<font color="#E5E5E5"> project with neon new and then it</font>

30
00:01:37,590 --> 00:01:41,579
will tell you<font color="#E5E5E5"> that hey this is your</font>

31
00:01:39,329 --> 00:01:47,508
<font color="#CCCCCC">JavaScript file and this</font><font color="#E5E5E5"> is your rust</font>

32
00:01:41,579 --> 00:01:53,428
file<font color="#E5E5E5"> now they're connected so this is a</font>

33
00:01:47,509 --> 00:01:59,759
example<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> Ross</font><font color="#E5E5E5"> file that that exports</font>

34
00:01:53,429 --> 00:02:01,619
<font color="#E5E5E5">in module 2</font><font color="#CCCCCC"> to no js' so this is this</font><font color="#E5E5E5"> is</font>

35
00:01:59,759 --> 00:02:04,829
the<font color="#E5E5E5"> example that</font><font color="#CCCCCC"> neon actually gives you</font>

36
00:02:01,619 --> 00:02:09,318
<font color="#CCCCCC">and it's quite</font><font color="#E5E5E5"> simple what it does is</font>

37
00:02:04,829 --> 00:02:12,239
<font color="#CCCCCC">just returns</font><font color="#E5E5E5"> the hello node string and</font>

38
00:02:09,318 --> 00:02:15,720
then on the<font color="#CCCCCC"> other side you can see on</font>

39
00:02:12,240 --> 00:02:17,610
the<font color="#CCCCCC"> JavaScript side on the right you</font>

40
00:02:15,720 --> 00:02:18,750
require the module and you call the

41
00:02:17,610 --> 00:02:24,180
hello<font color="#E5E5E5"> method</font>

42
00:02:18,750 --> 00:02:28,470
and when you run<font color="#E5E5E5"> it</font><font color="#CCCCCC"> I works so there is</font>

43
00:02:24,180 --> 00:02:34,140
um<font color="#E5E5E5"> you can see there is a neon created</font>

44
00:02:28,470 --> 00:02:37,670
the register module macro and then using

45
00:02:34,140 --> 00:02:43,079
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> can export your functions and</font>

46
00:02:37,670 --> 00:02:47,670
at the same time it also it brought the

47
00:02:43,080 --> 00:02:50,490
<font color="#CCCCCC">Jes types that for example here we use</font>

48
00:02:47,670 --> 00:02:54,119
the J string<font color="#E5E5E5"> so there is like</font><font color="#CCCCCC"> a J's</font>

49
00:02:50,490 --> 00:02:58,770
<font color="#E5E5E5">knowledge is undefined GS number it's</font>

50
00:02:54,120 --> 00:03:02,730
all these<font color="#CCCCCC"> things and it it built this on</font>

51
00:02:58,770 --> 00:03:08,400
top of the v8 bindings which is v8 is

52
00:03:02,730 --> 00:03:10,920
the<font color="#E5E5E5"> JavaScript engine for nodejs</font><font color="#CCCCCC"> alright</font>

53
00:03:08,400 --> 00:03:13,140
so talking about<font color="#E5E5E5"> performance</font><font color="#CCCCCC"> so some</font>

54
00:03:10,920 --> 00:03:15,750
people say<font color="#CCCCCC"> that ok we want to use this</font>

55
00:03:13,140 --> 00:03:18,410
we want<font color="#E5E5E5"> to writing Ross because I</font><font color="#CCCCCC"> think</font>

56
00:03:15,750 --> 00:03:20,490
Ross<font color="#CCCCCC"> is gonna be way faster than</font><font color="#E5E5E5"> nodejs</font>

57
00:03:18,410 --> 00:03:25,709
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> gonna be way faster than JavaScript</font>

58
00:03:20,490 --> 00:03:28,320
<font color="#E5E5E5">but do not underestimate JavaScript it</font>

59
00:03:25,709 --> 00:03:30,510
can optimize it<font color="#CCCCCC"> well it can be never</font>

60
00:03:28,320 --> 00:03:33,660
like<font color="#CCCCCC"> drost but you can get pretty</font><font color="#E5E5E5"> close</font>

61
00:03:30,510 --> 00:03:36,060
<font color="#CCCCCC">sometimes sometimes but what</font><font color="#E5E5E5"> is also</font>

62
00:03:33,660 --> 00:03:39,390
hard to<font color="#CCCCCC"> optimize it so if you're</font><font color="#E5E5E5"> good at</font>

63
00:03:36,060 --> 00:03:41,310
javascript<font color="#E5E5E5"> it may be better to</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> um</font><font color="#CCCCCC"> c</font>

64
00:03:39,390 --> 00:03:47,760
optimize it and if<font color="#CCCCCC"> it see if it matches</font>

65
00:03:41,310 --> 00:03:50,400
your<font color="#E5E5E5"> goals or</font><font color="#CCCCCC"> not so and</font><font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> you</font>

66
00:03:47,760 --> 00:03:56,760
make a call from the from the<font color="#E5E5E5"> JavaScript</font>

67
00:03:50,400 --> 00:03:59,820
<font color="#E5E5E5">land to the</font><font color="#CCCCCC"> ross land and then the v8</font>

68
00:03:56,760 --> 00:04:04,530
has<font color="#CCCCCC"> to do a certain</font><font color="#E5E5E5"> number of checks and</font>

69
00:03:59,820 --> 00:04:07,890
these things<font color="#E5E5E5"> cannot be optimized mmm so</font>

70
00:04:04,530 --> 00:04:12,900
trying<font color="#E5E5E5"> to avoid it as</font><font color="#CCCCCC"> much as possible</font>

71
00:04:07,890 --> 00:04:14,790
<font color="#E5E5E5">so like the best if you if you using the</font>

72
00:04:12,900 --> 00:04:16,730
library<font color="#E5E5E5"> for performance and let's say</font>

73
00:04:14,790 --> 00:04:20,730
you<font color="#E5E5E5"> have a lot of</font><font color="#CCCCCC"> data to</font><font color="#E5E5E5"> be processed</font>

74
00:04:16,730 --> 00:04:23,760
<font color="#E5E5E5">you want to send all the</font><font color="#CCCCCC"> data at one</font>

75
00:04:20,730 --> 00:04:26,970
shot<font color="#CCCCCC"> through to the</font><font color="#E5E5E5"> ross code process it</font>

76
00:04:23,760 --> 00:04:28,890
and<font color="#CCCCCC"> then send it back</font><font color="#E5E5E5"> so do not call the</font>

77
00:04:26,970 --> 00:04:30,510
<font color="#CCCCCC">ross code from JavaScript multiple times</font>

78
00:04:28,890 --> 00:04:31,840
<font color="#E5E5E5">during this because</font><font color="#CCCCCC"> that would be</font>

79
00:04:30,510 --> 00:04:36,370
<font color="#E5E5E5">expensive</font>

80
00:04:31,840 --> 00:04:40,388
in terms of performance<font color="#E5E5E5"> so same</font><font color="#CCCCCC"> thing</font>

81
00:04:36,370 --> 00:04:44,910
goes<font color="#CCCCCC"> really down interacting JavaScript</font>

82
00:04:40,389 --> 00:04:50,590
objects<font color="#E5E5E5"> from rust so in this example you</font>

83
00:04:44,910 --> 00:04:54,730
<font color="#CCCCCC">can see that</font><font color="#E5E5E5"> we create a new</font><font color="#CCCCCC"> JavaScript</font>

84
00:04:50,590 --> 00:05:01,270
object and then we trying<font color="#CCCCCC"> to set</font><font color="#E5E5E5"> three</font>

85
00:04:54,730 --> 00:05:04,120
properties<font color="#E5E5E5"> and this potentially might</font>

86
00:05:01,270 --> 00:05:07,320
call the<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> code from the rust</font>

87
00:05:04,120 --> 00:05:12,250
<font color="#E5E5E5">because</font><font color="#CCCCCC"> in JavaScript you can set</font>

88
00:05:07,320 --> 00:05:15,550
setters on objects<font color="#E5E5E5"> and this will also be</font>

89
00:05:12,250 --> 00:05:19,570
expensive<font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact I would say for</font>

90
00:05:15,550 --> 00:05:21,070
setting setting<font color="#E5E5E5"> properties in objects as</font>

91
00:05:19,570 --> 00:05:23,110
much as you can try<font color="#E5E5E5"> to do it in</font>

92
00:05:21,070 --> 00:05:24,580
JavaScript<font color="#E5E5E5"> code because we eight will</font>

93
00:05:23,110 --> 00:05:29,110
optimize your code<font color="#E5E5E5"> but this is not</font>

94
00:05:24,580 --> 00:05:32,800
optimized code anymore<font color="#E5E5E5"> and if you have a</font>

95
00:05:29,110 --> 00:05:36,940
lot<font color="#CCCCCC"> of data</font><font color="#E5E5E5"> trying to use buffers which</font>

96
00:05:32,800 --> 00:05:43,479
are which is an odious<font color="#CCCCCC"> datatype</font><font color="#E5E5E5"> that</font>

97
00:05:36,940 --> 00:05:45,430
refers to a space in memory<font color="#E5E5E5"> and they are</font>

98
00:05:43,479 --> 00:05:51,729
much they<font color="#E5E5E5"> are much faster</font><font color="#CCCCCC"> than strings</font>

99
00:05:45,430 --> 00:05:54,370
in when you send them to rust so<font color="#E5E5E5"> you saw</font>

100
00:05:51,729 --> 00:05:57,610
<font color="#E5E5E5">some</font><font color="#CCCCCC"> this call</font><font color="#E5E5E5"> dot scope and you're</font>

101
00:05:54,370 --> 00:06:01,090
<font color="#E5E5E5">probably wondering what</font><font color="#CCCCCC"> is that why do</font>

102
00:05:57,610 --> 00:06:06,060
you<font color="#E5E5E5"> have to pass it around</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> javascript</font>

103
00:06:01,090 --> 00:06:08,739
is a<font color="#E5E5E5"> garbage collected language and v8</font>

104
00:06:06,060 --> 00:06:10,960
we it wants to<font color="#E5E5E5"> know that</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> did you</font>

105
00:06:08,740 --> 00:06:14,350
where<font color="#E5E5E5"> this object belongs to and which</font>

106
00:06:10,960 --> 00:06:17,340
<font color="#CCCCCC">function does it belong to see if that</font>

107
00:06:14,350 --> 00:06:20,260
function<font color="#E5E5E5"> goes on out of scope</font><font color="#CCCCCC"> it can</font>

108
00:06:17,340 --> 00:06:24,849
garbage collect<font color="#E5E5E5"> that those values</font><font color="#CCCCCC"> that</font>

109
00:06:20,260 --> 00:06:28,270
were created there<font color="#E5E5E5"> so this call dot</font>

110
00:06:24,850 --> 00:06:30,490
scope<font color="#E5E5E5"> is is the way that you hint v8</font>

111
00:06:28,270 --> 00:06:32,770
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Hades for</font><font color="#E5E5E5"> example this string that</font>

112
00:06:30,490 --> 00:06:38,770
<font color="#CCCCCC">you are creating it belongs to the</font>

113
00:06:32,770 --> 00:06:40,870
function<font color="#CCCCCC"> that called it so you have to</font>

114
00:06:38,770 --> 00:06:44,010
pass around<font color="#CCCCCC"> call dot scope whenever you</font>

115
00:06:40,870 --> 00:06:44,010
create a new values

116
00:06:44,370 --> 00:06:53,650
puffers<font color="#CCCCCC"> this is something about</font><font color="#E5E5E5"> them so</font>

117
00:06:48,780 --> 00:06:56,669
like I said it would<font color="#E5E5E5"> be faster to</font><font color="#CCCCCC"> use</font>

118
00:06:53,650 --> 00:07:01,659
buffers<font color="#CCCCCC"> around rather than</font><font color="#E5E5E5"> strings</font>

119
00:06:56,670 --> 00:07:08,170
<font color="#E5E5E5">here's a small example of buffers and in</font>

120
00:07:01,660 --> 00:07:11,650
this example<font color="#CCCCCC"> you get this work great</font><font color="#E5E5E5"> so</font>

121
00:07:08,170 --> 00:07:14,290
you have you can access<font color="#E5E5E5"> the comp the</font>

122
00:07:11,650 --> 00:07:17,260
arguments of<font color="#E5E5E5"> your function that for</font>

123
00:07:14,290 --> 00:07:20,310
<font color="#E5E5E5">example is exported to JavaScript this</font>

124
00:07:17,260 --> 00:07:23,409
require makes shows that that it<font color="#E5E5E5"> has the</font>

125
00:07:20,310 --> 00:07:27,160
it has that<font color="#E5E5E5"> argument the first argument</font>

126
00:07:23,410 --> 00:07:34,120
<font color="#E5E5E5">and then it will convert it to a</font><font color="#CCCCCC"> JS</font>

127
00:07:27,160 --> 00:07:36,010
buffer so sarcastic to<font color="#CCCCCC"> JS buffer so then</font>

128
00:07:34,120 --> 00:07:37,360
once you<font color="#E5E5E5"> have your buffer you want to</font>

129
00:07:36,010 --> 00:07:39,370
get your date<font color="#E5E5E5"> you want to get the data</font>

130
00:07:37,360 --> 00:07:45,330
<font color="#E5E5E5">out well do you have to call this</font><font color="#CCCCCC"> Tod</font>

131
00:07:39,370 --> 00:07:47,920
grab method which which creates a lock

132
00:07:45,330 --> 00:07:52,260
because you don't want to be messing

133
00:07:47,920 --> 00:07:52,260
around with<font color="#E5E5E5"> the data in memory whenever</font>

134
00:07:52,470 --> 00:07:57,960
whenever you're<font color="#CCCCCC"> in Ross because</font><font color="#E5E5E5"> assuming</font>

135
00:07:55,870 --> 00:08:00,370
that you could<font color="#E5E5E5"> be on</font><font color="#CCCCCC"> another thread</font><font color="#E5E5E5"> and</font>

136
00:07:57,960 --> 00:08:02,349
then there is<font color="#E5E5E5"> a there</font><font color="#CCCCCC"> is a JavaScript</font>

137
00:08:00,370 --> 00:08:04,900
thread<font color="#E5E5E5"> rezoning you want to acquire a</font>

138
00:08:02,350 --> 00:08:06,220
lock and make sure that nobody<font color="#CCCCCC"> else is</font>

139
00:08:04,900 --> 00:08:10,390
touching<font color="#CCCCCC"> that data and it is</font><font color="#E5E5E5"> saying</font>

140
00:08:06,220 --> 00:08:12,600
<font color="#CCCCCC">customs and state so this graph takes</font>

141
00:08:10,390 --> 00:08:16,530
care of that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then in here you can</font>

142
00:08:12,600 --> 00:08:19,420
get<font color="#E5E5E5"> the data or muted the data in the</font>

143
00:08:16,530 --> 00:08:24,130
then so in this case you are converting

144
00:08:19,420 --> 00:08:27,190
to<font color="#CCCCCC"> a slice and then so just for this</font>

145
00:08:24,130 --> 00:08:30,490
example<font color="#E5E5E5"> what</font><font color="#CCCCCC"> I should</font><font color="#E5E5E5"> I should also show</font>

146
00:08:27,190 --> 00:08:32,830
that<font color="#E5E5E5"> how to create a new buffer so it's</font>

147
00:08:30,490 --> 00:08:35,919
quite<font color="#E5E5E5"> easy just some faster scope and</font>

148
00:08:32,830 --> 00:08:41,400
then the length<font color="#E5E5E5"> so in this case I wanted</font>

149
00:08:35,919 --> 00:08:46,270
to just copy this<font color="#CCCCCC"> and this buffer</font><font color="#E5E5E5"> that</font>

150
00:08:41,400 --> 00:08:50,770
the function<font color="#E5E5E5"> was called so in this case</font>

151
00:08:46,270 --> 00:08:54,040
we just<font color="#E5E5E5"> get the size of it and then I</font>

152
00:08:50,770 --> 00:08:56,020
have to call the grab method again so

153
00:08:54,040 --> 00:08:57,550
you can<font color="#E5E5E5"> create a lock and</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font>

154
00:08:56,020 --> 00:09:03,040
we

155
00:08:57,550 --> 00:09:04,810
people<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> put the mute so then we</font>

156
00:09:03,040 --> 00:09:09,250
say that<font color="#E5E5E5"> this this argument is going to</font>

157
00:09:04,810 --> 00:09:12,399
be muted and<font color="#E5E5E5"> we just say that copy from</font>

158
00:09:09,250 --> 00:09:15,370
<font color="#CCCCCC">Stein switch which copies that original</font>

159
00:09:12,399 --> 00:09:17,980
buffer into it<font color="#E5E5E5"> so then we can return</font>

160
00:09:15,370 --> 00:09:21,910
<font color="#CCCCCC">that buffer and then</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> Sam has</font>

161
00:09:17,980 --> 00:09:27,790
that a new<font color="#E5E5E5"> buffer around all right</font>

162
00:09:21,910 --> 00:09:34,480
<font color="#E5E5E5">so classes so jnanam created another</font>

163
00:09:27,790 --> 00:09:37,740
macro for creating types<font color="#E5E5E5"> so you can have</font>

164
00:09:34,480 --> 00:09:40,990
your own<font color="#E5E5E5"> Ross classes in in neon and</font>

165
00:09:37,740 --> 00:09:44,649
then<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you can use them</font><font color="#CCCCCC"> in JavaScript</font>

166
00:09:40,990 --> 00:09:46,870
<font color="#E5E5E5">have the same some methods and some some</font>

167
00:09:44,649 --> 00:09:50,370
properties<font color="#CCCCCC"> on top of them maybe you can</font>

168
00:09:46,870 --> 00:09:55,630
also have some<font color="#E5E5E5"> hidden properties there</font>

169
00:09:50,370 --> 00:09:58,240
so there is a<font color="#CCCCCC"> so neon</font>

170
00:09:55,630 --> 00:10:04,120
makes it easy Dean gives you<font color="#E5E5E5"> a you have</font>

171
00:09:58,240 --> 00:10:07,170
to make<font color="#CCCCCC"> it emitted so with</font><font color="#E5E5E5"> this in that</font>

172
00:10:04,120 --> 00:10:12,790
<font color="#CCCCCC">method you will create your</font><font color="#E5E5E5"> object and</font>

173
00:10:07,170 --> 00:10:14,740
then make sure<font color="#E5E5E5"> that all the arguments</font>

174
00:10:12,790 --> 00:10:16,719
worried are there so this<font color="#CCCCCC"> is a this is</font><font color="#E5E5E5"> a</font>

175
00:10:14,740 --> 00:10:20,230
in JavaScript we would call<font color="#CCCCCC"> that the</font>

176
00:10:16,720 --> 00:10:21,730
constructor and<font color="#E5E5E5"> then here's another</font>

177
00:10:20,230 --> 00:10:27,550
<font color="#CCCCCC">method</font><font color="#E5E5E5"> hello</font>

178
00:10:21,730 --> 00:10:31,570
so which<font color="#E5E5E5"> have two arguments so we want</font>

179
00:10:27,550 --> 00:10:35,649
one<font color="#CCCCCC"> argument</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is an name</font>

180
00:10:31,570 --> 00:10:38,170
and<font color="#E5E5E5"> it also accesses the this</font><font color="#CCCCCC"> argument</font>

181
00:10:35,649 --> 00:10:42,190
<font color="#E5E5E5">in the method which in JavaScript refers</font>

182
00:10:38,170 --> 00:10:49,020
to the<font color="#CCCCCC"> the objects itself so which</font>

183
00:10:42,190 --> 00:10:49,020
refers to this whole greater object<font color="#E5E5E5"> and</font>

184
00:10:49,290 --> 00:10:57,189
in this case we also have to<font color="#E5E5E5"> use this</font>

185
00:10:52,420 --> 00:11:00,540
<font color="#CCCCCC">Sun grab method to make sure that we can</font>

186
00:10:57,190 --> 00:11:03,100
get our<font color="#E5E5E5"> own greater object and get this</font>

187
00:11:00,540 --> 00:11:07,930
<font color="#E5E5E5">original string that put was put there</font>

188
00:11:03,100 --> 00:11:10,149
and from it so in<font color="#E5E5E5"> case and you have to</font>

189
00:11:07,930 --> 00:11:10,939
call<font color="#E5E5E5"> the</font><font color="#CCCCCC"> grab so it creates a lock</font>

190
00:11:10,149 --> 00:11:14,030
around<font color="#E5E5E5"> it</font>

191
00:11:10,940 --> 00:11:19,120
make sure<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> modified in the in</font>

192
00:11:14,030 --> 00:11:23,209
the JavaScript<font color="#E5E5E5"> land no there is also</font>

193
00:11:19,120 --> 00:11:25,280
tasks<font color="#CCCCCC"> and it is for background jobs</font><font color="#E5E5E5"> so</font>

194
00:11:23,210 --> 00:11:27,980
for<font color="#E5E5E5"> example you have</font><font color="#CCCCCC"> a some synchronous</font>

195
00:11:25,280 --> 00:11:30,589
code that you<font color="#E5E5E5"> want to run you</font><font color="#CCCCCC"> can you</font>

196
00:11:27,980 --> 00:11:33,350
can use tasks and then<font color="#CCCCCC"> it will it will</font>

197
00:11:30,590 --> 00:11:37,430
use the v8 API to create<font color="#CCCCCC"> a thread in the</font>

198
00:11:33,350 --> 00:11:39,950
background and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do some heavy</font>

199
00:11:37,430 --> 00:11:44,150
computation without blocking<font color="#E5E5E5"> the non je</font>

200
00:11:39,950 --> 00:11:48,560
s main without blocking<font color="#E5E5E5"> the node.js main</font>

201
00:11:44,150 --> 00:11:50,449
thread so in this case you can now for

202
00:11:48,560 --> 00:11:52,880
example<font color="#E5E5E5"> calculate all the Fibonacci</font>

203
00:11:50,450 --> 00:11:59,210
numbers<font color="#CCCCCC"> I should have an argument I</font>

204
00:11:52,880 --> 00:12:04,070
forgot<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so you would have</font><font color="#E5E5E5"> a perform</font>

205
00:11:59,210 --> 00:12:05,930
function that<font color="#E5E5E5"> that you do whatever needs</font>

206
00:12:04,070 --> 00:12:07,850
to be done<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that thread and then you</font>

207
00:12:05,930 --> 00:12:11,959
will<font color="#E5E5E5"> also get a call and it's completed</font>

208
00:12:07,850 --> 00:12:15,620
<font color="#E5E5E5">and then you can convert</font><font color="#CCCCCC"> the results to</font>

209
00:12:11,960 --> 00:12:21,170
<font color="#E5E5E5">the JavaScript values in there or throw</font>

210
00:12:15,620 --> 00:12:24,980
an error<font color="#E5E5E5"> and running it is quite easy</font>

211
00:12:21,170 --> 00:12:30,969
<font color="#CCCCCC">just called the scheduled tasks so</font>

212
00:12:24,980 --> 00:12:35,990
<font color="#CCCCCC">schedule method of your of</font><font color="#E5E5E5"> your object</font>

213
00:12:30,970 --> 00:12:38,780
<font color="#E5E5E5">so there is another tip there</font><font color="#CCCCCC"> is um</font>

214
00:12:35,990 --> 00:12:42,020
<font color="#CCCCCC">something called</font><font color="#E5E5E5"> the project called not</font>

215
00:12:38,780 --> 00:12:45,050
neon<font color="#CCCCCC"> third</font><font color="#E5E5E5"> a I'm not</font><font color="#CCCCCC"> sure if I'm</font>

216
00:12:42,020 --> 00:12:49,480
pronouncing it right but it makes it

217
00:12:45,050 --> 00:12:52,370
quite<font color="#E5E5E5"> easy to write write write write</font>

218
00:12:49,480 --> 00:12:55,610
code with neon because it takes care<font color="#CCCCCC"> of</font>

219
00:12:52,370 --> 00:13:01,520
all the conversion of<font color="#CCCCCC"> the arguments and</font>

220
00:12:55,610 --> 00:13:07,190
everything so this is also a module<font color="#CCCCCC"> that</font>

221
00:13:01,520 --> 00:13:11,260
is exported<font color="#CCCCCC"> to the Ross</font><font color="#E5E5E5"> lamp so you can</font>

222
00:13:07,190 --> 00:13:14,930
see that it's quite simple Ross code<font color="#E5E5E5"> and</font>

223
00:13:11,260 --> 00:13:18,040
it doesn't have any of<font color="#E5E5E5"> those it doesn't</font>

224
00:13:14,930 --> 00:13:23,290
<font color="#E5E5E5">have any conversion of the arguments to</font>

225
00:13:18,040 --> 00:13:28,180
<font color="#E5E5E5">the Ross types and back and forth</font>

226
00:13:23,290 --> 00:13:32,310
so it's<font color="#E5E5E5"> quite good</font><font color="#CCCCCC"> I say</font><font color="#E5E5E5"> try because I'm</font>

227
00:13:28,180 --> 00:13:34,989
not sure about the performance

228
00:13:32,310 --> 00:13:37,359
requirements for your project<font color="#CCCCCC"> this might</font>

229
00:13:34,990 --> 00:13:42,040
<font color="#E5E5E5">be a little bit slower than then I think</font>

230
00:13:37,360 --> 00:13:45,040
it is<font color="#CCCCCC"> and at the same time it's a new</font>

231
00:13:42,040 --> 00:13:46,899
<font color="#E5E5E5">project so things might go wrong</font><font color="#CCCCCC"> and</font>

232
00:13:45,040 --> 00:13:50,500
sometimes<font color="#CCCCCC"> some people are not fan of</font>

233
00:13:46,899 --> 00:13:51,730
abstractions<font color="#E5E5E5"> too much so it might</font><font color="#CCCCCC"> be a</font>

234
00:13:50,500 --> 00:13:52,300
<font color="#E5E5E5">little bit too much</font><font color="#CCCCCC"> of an abstraction</font>

235
00:13:51,730 --> 00:13:54,490
for you

236
00:13:52,300 --> 00:14:02,819
but if you want to<font color="#E5E5E5"> just try things</font><font color="#CCCCCC"> out</font>

237
00:13:54,490 --> 00:14:04,839
it's quite<font color="#CCCCCC"> good</font><font color="#E5E5E5"> so who uses neon well I</font>

238
00:14:02,819 --> 00:14:07,479
think it's not<font color="#CCCCCC"> that it's not</font><font color="#E5E5E5"> very</font>

239
00:14:04,839 --> 00:14:11,170
visible<font color="#E5E5E5"> that but in the NPM registry I</font>

240
00:14:07,480 --> 00:14:12,759
could um<font color="#E5E5E5"> I did a search and there was</font>

241
00:14:11,170 --> 00:14:17,189
more than a few projects interestingly

242
00:14:12,759 --> 00:14:20,290
<font color="#CCCCCC">used neon</font><font color="#E5E5E5"> that was surprised actually</font>

243
00:14:17,190 --> 00:14:26,800
<font color="#CCCCCC">one of the most interesting ones</font><font color="#E5E5E5"> is um</font>

244
00:14:20,290 --> 00:14:31,029
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> leap sodium which is which is no</font>

245
00:14:26,800 --> 00:14:34,329
<font color="#CCCCCC">js' body</font><font color="#E5E5E5"> bindings to rust sodium and it</font>

246
00:14:31,029 --> 00:14:39,670
is used in<font color="#CCCCCC"> the wire app which is which</font>

247
00:14:34,329 --> 00:14:41,979
is<font color="#E5E5E5"> a messaging app so that's um that</font>

248
00:14:39,670 --> 00:14:44,769
that's that's<font color="#E5E5E5"> and then they are one of</font>

249
00:14:41,980 --> 00:14:47,550
<font color="#E5E5E5">the contributors</font><font color="#CCCCCC"> to this project and</font>

250
00:14:44,769 --> 00:14:52,449
sure<font color="#E5E5E5"> makes it even more interesting</font><font color="#CCCCCC"> so</font>

251
00:14:47,550 --> 00:14:56,740
it's like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I saw that there</font><font color="#E5E5E5"> are a</font>

252
00:14:52,449 --> 00:14:58,389
few<font color="#E5E5E5"> more cryptography modules in that</font>

253
00:14:56,740 --> 00:15:01,720
were written with rust and<font color="#CCCCCC"> then exported</font>

254
00:14:58,389 --> 00:15:05,470
to<font color="#E5E5E5"> node.js which makes sense cause you</font>

255
00:15:01,720 --> 00:15:07,899
<font color="#E5E5E5">probably want</font><font color="#CCCCCC"> to want</font><font color="#E5E5E5"> to do some</font>

256
00:15:05,470 --> 00:15:11,189
sensitive stuff fine your<font color="#CCCCCC"> rosco that is</font>

257
00:15:07,899 --> 00:15:15,370
<font color="#CCCCCC">um</font><font color="#E5E5E5"> that has a high performance and then</font>

258
00:15:11,189 --> 00:15:18,279
<font color="#E5E5E5">do</font><font color="#CCCCCC"> retain</font><font color="#E5E5E5"> your buffers and</font><font color="#CCCCCC"> OJ has to be</font>

259
00:15:15,370 --> 00:15:20,319
used there it makes a lot<font color="#CCCCCC"> of sense</font><font color="#E5E5E5"> to</font>

260
00:15:18,279 --> 00:15:27,240
use rust to write cryptographic code in

261
00:15:20,319 --> 00:15:27,240
<font color="#E5E5E5">JavaScript in short so</font><font color="#CCCCCC"> that there's some</font>

262
00:15:27,480 --> 00:15:35,800
<font color="#E5E5E5">there is some compilers and</font><font color="#CCCCCC"> parsers that</font>

263
00:15:31,529 --> 00:15:37,160
<font color="#CCCCCC">are</font><font color="#E5E5E5"> written for rust and this is a good</font>

264
00:15:35,800 --> 00:15:40,000
<font color="#CCCCCC">thing because</font>

265
00:15:37,160 --> 00:15:43,930
so you would write<font color="#E5E5E5"> your own for example</font>

266
00:15:40,000 --> 00:15:46,310
<font color="#E5E5E5">library let's say is it's a it's a</font>

267
00:15:43,930 --> 00:15:48,410
compiler and<font color="#CCCCCC"> then you would write</font>

268
00:15:46,310 --> 00:15:50,810
bindings for it in in<font color="#CCCCCC"> different</font>

269
00:15:48,410 --> 00:15:53,660
languages for<font color="#CCCCCC"> example one for JavaScript</font>

270
00:15:50,810 --> 00:15:57,079
<font color="#CCCCCC">the one for Ruby one for</font><font color="#E5E5E5"> Python one for</font>

271
00:15:53,660 --> 00:15:58,760
Java<font color="#E5E5E5"> and then you only have to let write</font>

272
00:15:57,080 --> 00:16:01,910
your library<font color="#CCCCCC"> once but it can be used</font>

273
00:15:58,760 --> 00:16:03,890
everywhere<font color="#E5E5E5"> it also makes sense</font><font color="#CCCCCC"> if you</font>

274
00:16:01,910 --> 00:16:07,089
<font color="#CCCCCC">don't like all those</font><font color="#E5E5E5"> languages and you</font>

275
00:16:03,890 --> 00:16:10,069
want to use your own favorite<font color="#CCCCCC"> Rost</font>

276
00:16:07,090 --> 00:16:15,490
so<font color="#E5E5E5"> there's a lot</font><font color="#CCCCCC"> of examples</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that</font>

277
00:16:10,070 --> 00:16:19,670
with<font color="#CCCCCC"> c++</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> libsass which is</font>

278
00:16:15,490 --> 00:16:24,890
which is<font color="#CCCCCC"> a transpiler for converting SAS</font>

279
00:16:19,670 --> 00:16:26,449
code to CSS which which<font color="#CCCCCC"> makes it makes</font>

280
00:16:24,890 --> 00:16:29,140
it easier for<font color="#E5E5E5"> some front-end developers</font>

281
00:16:26,450 --> 00:16:32,720
to write in a better language than CSS

282
00:16:29,140 --> 00:16:34,790
and libsass is is actually<font color="#CCCCCC"> in in</font><font color="#E5E5E5"> written</font>

283
00:16:32,720 --> 00:16:38,660
in<font color="#CCCCCC"> c++</font><font color="#E5E5E5"> but has bindings for all the</font>

284
00:16:34,790 --> 00:16:43,969
different languages<font color="#E5E5E5"> some good example of</font>

285
00:16:38,660 --> 00:16:46,069
this kind<font color="#E5E5E5"> of is this type</font><font color="#CCCCCC"> of library</font><font color="#E5E5E5"> the</font>

286
00:16:43,970 --> 00:16:47,840
reason I'm saying that is<font color="#E5E5E5"> that I'm</font>

287
00:16:46,070 --> 00:16:50,960
hoping that you guys are<font color="#CCCCCC"> Rostova loopers</font>

288
00:16:47,840 --> 00:16:53,180
<font color="#E5E5E5">and you would go on and create some</font>

289
00:16:50,960 --> 00:17:00,650
node.js modules for somebody like me to

290
00:16:53,180 --> 00:17:02,620
use<font color="#CCCCCC"> well anyway so</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about being</font>

291
00:17:00,650 --> 00:17:09,589
able to be shortened than I thought

292
00:17:02,620 --> 00:17:12,290
so there's um about<font color="#CCCCCC"> the examples neon</font><font color="#E5E5E5"> is</font>

293
00:17:09,589 --> 00:17:16,480
quite new<font color="#CCCCCC"> so you will go to</font><font color="#E5E5E5"> the web site</font>

294
00:17:12,290 --> 00:17:16,480
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> will see there is</font><font color="#E5E5E5"> nothing there</font>

295
00:17:16,900 --> 00:17:23,839
so I<font color="#CCCCCC"> can there</font><font color="#E5E5E5"> is I found if I found a</font>

296
00:17:20,839 --> 00:17:28,730
few<font color="#E5E5E5"> and then looking around and trying</font>

297
00:17:23,839 --> 00:17:30,649
<font color="#E5E5E5">to experiment so here they are it would</font>

298
00:17:28,730 --> 00:17:32,840
be nice if<font color="#CCCCCC"> you if you have a writer name</font>

299
00:17:30,650 --> 00:17:36,320
if you try<font color="#E5E5E5"> something and then you could</font>

300
00:17:32,840 --> 00:17:40,449
<font color="#E5E5E5">um</font><font color="#CCCCCC"> add on your example so to the neon</font>

301
00:17:36,320 --> 00:17:44,379
example project<font color="#E5E5E5"> it would be appreciated</font>

302
00:17:40,450 --> 00:17:44,380
so yeah

303
00:17:44,610 --> 00:17:51,379
any questions<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right</font>

304
00:18:01,620 --> 00:18:10,469
well what's the best<font color="#E5E5E5"> practice for</font><font color="#CCCCCC"> rusty</font>

305
00:18:07,810 --> 00:18:17,679
<font color="#CCCCCC">bloopers and</font><font color="#E5E5E5"> to write the JavaScript API</font>

306
00:18:10,470 --> 00:18:21,760
documentation<font color="#E5E5E5"> is it alright</font><font color="#CCCCCC"> the tricky</font>

307
00:18:17,680 --> 00:18:27,880
<font color="#CCCCCC">question well there is a there is a lot</font>

308
00:18:21,760 --> 00:18:31,120
<font color="#E5E5E5">of JavaScript projects and that and all</font>

309
00:18:27,880 --> 00:18:34,180
<font color="#CCCCCC">of them use different tools</font><font color="#E5E5E5"> to to have</font>

310
00:18:31,120 --> 00:18:41,409
their own<font color="#E5E5E5"> documentation and to build up</font>

311
00:18:34,180 --> 00:18:45,490
their<font color="#E5E5E5"> website</font><font color="#CCCCCC"> hmm so I think one of my</font>

312
00:18:41,410 --> 00:18:49,720
<font color="#E5E5E5">favorites is the J's talk I'm sorry doc</font>

313
00:18:45,490 --> 00:18:52,150
module and which which compiles your

314
00:18:49,720 --> 00:18:54,340
<font color="#E5E5E5">code and which compiles your</font>

315
00:18:52,150 --> 00:18:58,510
documentation<font color="#E5E5E5"> it makes</font><font color="#CCCCCC"> a nice UML page</font>

316
00:18:54,340 --> 00:19:00,850
from out of it I might<font color="#E5E5E5"> be how my it</font>

317
00:18:58,510 --> 00:19:03,520
might be<font color="#E5E5E5"> like it's a bit</font><font color="#CCCCCC"> nam in the past</font>

318
00:19:00,850 --> 00:19:08,590
because it's it's been a<font color="#CCCCCC"> while that I</font>

319
00:19:03,520 --> 00:19:13,560
have maintained<font color="#E5E5E5"> any project but I think</font>

320
00:19:08,590 --> 00:19:17,639
that the thing is<font color="#E5E5E5"> that if you are if you</font>

321
00:19:13,560 --> 00:19:19,720
if you have a<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> some new</font>

322
00:19:17,640 --> 00:19:21,580
JavaScript<font color="#CCCCCC"> project with all the bells</font>

323
00:19:19,720 --> 00:19:23,020
and<font color="#CCCCCC"> whistles</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can have a look</font>

324
00:19:21,580 --> 00:19:25,449
around<font color="#E5E5E5"> and what tools they use I</font><font color="#CCCCCC"> think</font>

325
00:19:23,020 --> 00:19:26,920
that would be<font color="#E5E5E5"> the best the that's that's</font>

326
00:19:25,450 --> 00:19:28,420
another problem<font color="#E5E5E5"> in the JavaScript world</font>

327
00:19:26,920 --> 00:19:32,560
<font color="#E5E5E5">that everything changes every year</font>

328
00:19:28,420 --> 00:19:34,920
and me as a<font color="#CCCCCC"> JavaScript developer I</font>

329
00:19:32,560 --> 00:19:39,960
cannot keep up<font color="#CCCCCC"> with it</font>

330
00:19:34,920 --> 00:19:39,960
<font color="#E5E5E5">so I hope I answered</font><font color="#CCCCCC"> your question</font>

331
00:19:45,300 --> 00:19:52,930
no no<font color="#E5E5E5"> I've it's um it's my understanding</font>

332
00:19:50,650 --> 00:19:54,870
that I might be wrong it's it's a it's a

333
00:19:52,930 --> 00:19:58,200
guess but<font color="#E5E5E5"> from the project description</font>

334
00:19:54,870 --> 00:20:03,239
that<font color="#E5E5E5"> lip sodium is written in rust and</font>

335
00:19:58,200 --> 00:20:04,900
then the the<font color="#E5E5E5"> the wire</font><font color="#CCCCCC"> messaging app is</font>

336
00:20:03,240 --> 00:20:08,110
written in<font color="#E5E5E5"> nodejs</font>

337
00:20:04,900 --> 00:20:09,400
and then they use that<font color="#E5E5E5"> they user</font><font color="#CCCCCC"> and</font>

338
00:20:08,110 --> 00:20:26,889
they use the bindings that<font color="#E5E5E5"> they wrote</font>

339
00:20:09,400 --> 00:20:30,250
<font color="#E5E5E5">for</font><font color="#CCCCCC"> lip sodium</font><font color="#E5E5E5"> so jnana yeah sorry how</font>

340
00:20:26,890 --> 00:20:35,590
is<font color="#CCCCCC"> it to distribute node.js</font><font color="#E5E5E5"> module with</font>

341
00:20:30,250 --> 00:20:38,320
a with neon and<font color="#CCCCCC"> Rose bindings in NPM so</font>

342
00:20:35,590 --> 00:20:43,750
<font color="#E5E5E5">neon takes care of it luckily it gives</font>

343
00:20:38,320 --> 00:20:45,970
you<font color="#E5E5E5"> a you gives you one one command</font><font color="#CCCCCC"> neon</font>

344
00:20:43,750 --> 00:20:48,060
build and it will build your code and

345
00:20:45,970 --> 00:20:51,580
it's pretty ready to be imported from

346
00:20:48,060 --> 00:20:53,889
<font color="#E5E5E5">JavaScript at the same time you can you</font>

347
00:20:51,580 --> 00:20:58,240
put<font color="#E5E5E5"> your Ross code and the JavaScript</font>

348
00:20:53,890 --> 00:21:03,790
code in your<font color="#E5E5E5"> project and then and then</font>

349
00:20:58,240 --> 00:21:07,090
in the package<font color="#CCCCCC"> dot JSON you put a put</font>

350
00:21:03,790 --> 00:21:08,860
neon billed as a<font color="#E5E5E5"> installed script so</font>

351
00:21:07,090 --> 00:21:12,850
whenever the package is installed it

352
00:21:08,860 --> 00:21:17,860
<font color="#E5E5E5">will build build</font><font color="#CCCCCC"> the module and then you</font>

353
00:21:12,850 --> 00:21:21,209
can publish that as an NPM project on

354
00:21:17,860 --> 00:21:21,209
NPM<font color="#CCCCCC"> alright</font>

355
00:21:28,079 --> 00:21:31,859
the other thing something I forgot<font color="#CCCCCC"> to</font>

356
00:21:30,519 --> 00:21:35,049
<font color="#CCCCCC">mention that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> would also have to</font>

357
00:21:31,859 --> 00:21:39,938
install the neon CLI as a dependency to

358
00:21:35,049 --> 00:21:41,439
your app and then which would<font color="#E5E5E5"> be</font>

359
00:21:39,939 --> 00:21:43,659
automatically<font color="#E5E5E5"> installed whenever</font>

360
00:21:41,439 --> 00:21:45,399
whenever<font color="#E5E5E5"> you user installs it but</font><font color="#CCCCCC"> the</font>

361
00:21:43,659 --> 00:21:49,089
<font color="#CCCCCC">roast wouldn't be installed with it so</font>

362
00:21:45,399 --> 00:21:53,799
you<font color="#E5E5E5"> have to tell the user</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> install</font>

363
00:21:49,089 --> 00:21:56,168
<font color="#E5E5E5">roast as well well you could also build</font>

364
00:21:53,799 --> 00:22:00,668
build your binaries ahead of time and

365
00:21:56,169 --> 00:22:03,909
then and then download them whenever<font color="#E5E5E5"> the</font>

366
00:22:00,669 --> 00:22:05,739
project is installed but<font color="#E5E5E5"> I'm not sure</font>

367
00:22:03,909 --> 00:22:07,689
how that<font color="#E5E5E5"> would work out because I don't</font>

368
00:22:05,739 --> 00:22:10,439
<font color="#CCCCCC">have any experience</font><font color="#E5E5E5"> in building binaries</font>

369
00:22:07,689 --> 00:22:10,439
for multiple platforms

370
00:22:18,179 --> 00:22:28,750
um<font color="#E5E5E5"> that would</font><font color="#CCCCCC"> be a bad idea</font>

371
00:22:23,580 --> 00:22:31,510
<font color="#E5E5E5">so a scannable to be feasible to install</font>

372
00:22:28,750 --> 00:22:38,020
<font color="#CCCCCC">trust</font><font color="#E5E5E5"> beside your package</font><font color="#CCCCCC"> when whenever</font>

373
00:22:31,510 --> 00:22:40,690
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> installed and well damn you don't</font>

374
00:22:38,020 --> 00:22:41,889
want to mess with<font color="#E5E5E5"> the with the user that</font>

375
00:22:40,690 --> 00:22:44,530
they have<font color="#CCCCCC"> there of their own was</font>

376
00:22:41,890 --> 00:22:49,950
installed but well one thing<font color="#CCCCCC"> that you</font>

377
00:22:44,530 --> 00:22:49,950
could do is that you would you<font color="#E5E5E5"> would</font>

378
00:22:50,970 --> 00:22:55,570
<font color="#CCCCCC">installed</font><font color="#E5E5E5"> for example well don't don't</font>

379
00:22:53,590 --> 00:22:58,178
install it have a local binary of<font color="#E5E5E5"> loss</font>

380
00:22:55,570 --> 00:23:00,700
downloaded to your to<font color="#CCCCCC"> the to</font><font color="#E5E5E5"> your</font>

381
00:22:58,179 --> 00:23:03,370
<font color="#E5E5E5">package</font><font color="#CCCCCC"> and folder and then trying to</font>

382
00:23:00,700 --> 00:23:06,100
use that<font color="#E5E5E5"> hopefully you can configure me</font>

383
00:23:03,370 --> 00:23:09,699
<font color="#E5E5E5">on to be smart about it and use</font><font color="#CCCCCC"> that</font>

384
00:23:06,100 --> 00:23:11,709
binary instead not not<font color="#CCCCCC"> sure if neon can</font>

385
00:23:09,700 --> 00:23:16,059
you can do that with neon maybe if you

386
00:23:11,710 --> 00:23:21,790
<font color="#E5E5E5">are if you if you mess</font><font color="#CCCCCC"> around with the</font>

387
00:23:16,059 --> 00:23:24,870
path variable<font color="#CCCCCC"> so yeah it's a kind</font><font color="#E5E5E5"> of I</font>

388
00:23:21,790 --> 00:23:39,010
guess that's<font color="#E5E5E5"> kind of uncharted territory</font>

389
00:23:24,870 --> 00:23:42,668
<font color="#CCCCCC">alright any more questions</font><font color="#E5E5E5"> so Dave</font>

390
00:23:39,010 --> 00:23:47,309
Herman<font color="#CCCCCC"> is the original maintainer</font><font color="#E5E5E5"> so</font>

391
00:23:42,669 --> 00:23:47,309
thanks to<font color="#E5E5E5"> him I'm here yeah</font>

