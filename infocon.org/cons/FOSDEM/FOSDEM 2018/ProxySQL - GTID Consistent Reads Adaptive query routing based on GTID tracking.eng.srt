1
00:00:12,110 --> 00:00:17,099
<font color="#E5E5E5">okay thanks man for</font><font color="#CCCCCC"> those of you that</font>

2
00:00:14,610 --> 00:00:20,250
don't know me my<font color="#CCCCCC"> name is Nick visas</font><font color="#E5E5E5"> I've</font>

3
00:00:17,099 --> 00:00:23,610
been working with<font color="#E5E5E5"> Rene as a proxy SQL</font>

4
00:00:20,250 --> 00:00:28,890
<font color="#CCCCCC">commit over the last</font><font color="#E5E5E5"> few months</font><font color="#CCCCCC"> and I'm</font>

5
00:00:23,610 --> 00:00:31,289
also a my SQL DBA<font color="#CCCCCC"> before I kick off</font><font color="#E5E5E5"> this</font>

6
00:00:28,890 --> 00:00:35,250
<font color="#CCCCCC">presentation just</font><font color="#E5E5E5"> a question a show of</font>

7
00:00:31,289 --> 00:00:40,250
hands<font color="#CCCCCC"> for me</font><font color="#E5E5E5"> to gauge</font><font color="#CCCCCC"> who's familiar</font>

8
00:00:35,250 --> 00:00:49,110
with asynchronous<font color="#CCCCCC"> replication semi sync</font>

9
00:00:40,250 --> 00:00:50,879
proxy SQL<font color="#E5E5E5"> okay GT ID okay great</font>

10
00:00:49,110 --> 00:00:52,469
so let's kick<font color="#E5E5E5"> off</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> proxies held</font>

11
00:00:50,879 --> 00:00:54,269
since everyone's familiar with<font color="#E5E5E5"> this I</font>

12
00:00:52,469 --> 00:00:58,230
won't focus on it<font color="#E5E5E5"> too much it's a layer</font>

13
00:00:54,270 --> 00:01:00,510
<font color="#CCCCCC">seven</font><font color="#E5E5E5"> database proxy</font><font color="#CCCCCC"> okay</font>

14
00:00:58,230 --> 00:01:02,940
primary integration is<font color="#E5E5E5"> with MySQL</font>

15
00:01:00,510 --> 00:01:06,479
protocol there is some support<font color="#E5E5E5"> also for</font>

16
00:01:02,940 --> 00:01:08,910
<font color="#CCCCCC">clique</font><font color="#E5E5E5"> house and by the way in there's a</font>

17
00:01:06,479 --> 00:01:11,729
birds<font color="#E5E5E5"> of a feather fashion at quarter to</font>

18
00:01:08,910 --> 00:01:13,590
<font color="#E5E5E5">five in room h3</font><font color="#CCCCCC"> two to eight for those</font>

19
00:01:11,729 --> 00:01:15,420
of you that are interested<font color="#CCCCCC"> for those</font>

20
00:01:13,590 --> 00:01:18,810
that<font color="#E5E5E5"> are not familiar with clickers</font><font color="#CCCCCC"> it's</font>

21
00:01:15,420 --> 00:01:22,140
<font color="#CCCCCC">blazing-fast you</font><font color="#E5E5E5"> should check it out</font>

22
00:01:18,810 --> 00:01:23,610
so moving<font color="#CCCCCC"> back to proxy SQL it's built</font>

23
00:01:22,140 --> 00:01:27,209
<font color="#E5E5E5">for high</font><font color="#CCCCCC"> performance high availability</font>

24
00:01:23,610 --> 00:01:29,220
<font color="#E5E5E5">and it's feature-rich so there's a wide</font>

25
00:01:27,209 --> 00:01:33,179
variety of stuff<font color="#E5E5E5"> that you can configure</font>

26
00:01:29,220 --> 00:01:36,149
to<font color="#E5E5E5"> get various functionality as well</font><font color="#CCCCCC"> as</font>

27
00:01:33,179 --> 00:01:38,640
<font color="#CCCCCC">to tune the proxy as you'd like it to</font>

28
00:01:36,149 --> 00:01:41,550
behave<font color="#CCCCCC"> so quick overview of the</font>

29
00:01:38,640 --> 00:01:44,550
architecture<font color="#CCCCCC"> clients connect the</font>

30
00:01:41,550 --> 00:01:46,470
requests are evaluated and depending<font color="#E5E5E5"> on</font>

31
00:01:44,550 --> 00:01:49,229
the configuration you've put<font color="#CCCCCC"> into proxy</font>

32
00:01:46,470 --> 00:01:52,950
SQL certain actions will be performed<font color="#E5E5E5"> so</font>

33
00:01:49,229 --> 00:01:56,640
like key areas are<font color="#CCCCCC"> read/write split</font>

34
00:01:52,950 --> 00:01:58,709
sharding query right and for<font color="#E5E5E5"> this</font>

35
00:01:56,640 --> 00:02:02,069
session we'll be<font color="#E5E5E5"> focusing on</font><font color="#CCCCCC"> readwrite</font>

36
00:01:58,709 --> 00:02:03,950
split and specifically<font color="#CCCCCC"> did the</font>

37
00:02:02,069 --> 00:02:06,899
challenges<font color="#CCCCCC"> that we have with</font>

38
00:02:03,950 --> 00:02:08,670
<font color="#E5E5E5">master-slave replication so</font><font color="#CCCCCC"> roll</font>

39
00:02:06,899 --> 00:02:11,790
<font color="#E5E5E5">familiar with replication the biggest</font>

40
00:02:08,669 --> 00:02:13,530
problem is replication lag<font color="#E5E5E5"> and being</font>

41
00:02:11,790 --> 00:02:16,798
able to retrieve data that is fresh

42
00:02:13,530 --> 00:02:18,450
<font color="#CCCCCC">enough from</font><font color="#E5E5E5"> our slaves so I mean we have</font>

43
00:02:16,799 --> 00:02:21,269
<font color="#E5E5E5">this problem in asynchronous</font><font color="#CCCCCC"> replication</font>

44
00:02:18,450 --> 00:02:22,859
in semi synchronous replication<font color="#CCCCCC"> we can</font>

45
00:02:21,269 --> 00:02:24,870
be more<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that our data</font><font color="#E5E5E5"> has reached</font>

46
00:02:22,860 --> 00:02:28,170
our slaves so the integrity<font color="#E5E5E5"> is there</font>

47
00:02:24,870 --> 00:02:33,570
<font color="#CCCCCC">that we can still read stale data</font>

48
00:02:28,170 --> 00:02:36,940
so in<font color="#E5E5E5"> order to avoid reading stale data</font>

49
00:02:33,570 --> 00:02:38,920
especially<font color="#E5E5E5"> when an application connects</font>

50
00:02:36,940 --> 00:02:40,930
both to a master and a slave<font color="#E5E5E5"> it has to</font>

51
00:02:38,920 --> 00:02:43,780
maintain<font color="#CCCCCC"> two sets of connections and it</font>

52
00:02:40,930 --> 00:02:46,480
also has to<font color="#E5E5E5"> be aware</font><font color="#CCCCCC"> of how fresh the</font>

53
00:02:43,780 --> 00:02:47,980
data is<font color="#E5E5E5"> on a slave so looking at this in</font>

54
00:02:46,480 --> 00:02:51,459
more detail<font color="#CCCCCC"> okay</font>

55
00:02:47,980 --> 00:02:54,519
typically<font color="#E5E5E5"> an application will write data</font>

56
00:02:51,460 --> 00:02:57,210
<font color="#E5E5E5">to a master that data may or may not</font>

57
00:02:54,520 --> 00:02:59,200
<font color="#E5E5E5">have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> replicated to</font><font color="#CCCCCC"> the slave the</font>

58
00:02:57,210 --> 00:03:02,410
<font color="#CCCCCC">application</font><font color="#E5E5E5"> will then have</font><font color="#CCCCCC"> to connect</font><font color="#E5E5E5"> to</font>

59
00:02:59,200 --> 00:03:05,769
the slave and read that data if we're

60
00:03:02,410 --> 00:03:08,320
doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> readwrite split so stale data</font>

61
00:03:05,770 --> 00:03:12,220
can be<font color="#E5E5E5"> received this makes our</font>

62
00:03:08,320 --> 00:03:14,709
developers unhappy with proxy SQL the

63
00:03:12,220 --> 00:03:16,359
readwrite split we overcome the problem

64
00:03:14,710 --> 00:03:18,910
of<font color="#CCCCCC"> maintaining separate connections to</font>

65
00:03:16,360 --> 00:03:21,010
masters and slaves because we have the

66
00:03:18,910 --> 00:03:23,890
concept of reader and writer host groups

67
00:03:21,010 --> 00:03:26,920
so the application<font color="#E5E5E5"> can just blindly send</font>

68
00:03:23,890 --> 00:03:29,950
all requests reads<font color="#CCCCCC"> writes to proxy SQL</font>

69
00:03:26,920 --> 00:03:32,339
proxy SQL will route the<font color="#CCCCCC"> writes</font><font color="#E5E5E5"> to the</font>

70
00:03:29,950 --> 00:03:34,209
master<font color="#E5E5E5"> and then route the reads to the</font>

71
00:03:32,340 --> 00:03:38,770
slaves depending on the configuration

72
00:03:34,209 --> 00:03:41,470
<font color="#CCCCCC">that we set up</font><font color="#E5E5E5"> in the query rules</font><font color="#CCCCCC"> so the</font>

73
00:03:38,770 --> 00:03:43,030
big benefit is<font color="#CCCCCC"> that we don't</font><font color="#E5E5E5"> have to</font>

74
00:03:41,470 --> 00:03:46,209
make application changes<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

75
00:03:43,030 --> 00:03:52,810
route our read queries to slave or to

76
00:03:46,209 --> 00:03:55,480
route our rights to a master all traffic

77
00:03:52,810 --> 00:03:57,370
<font color="#E5E5E5">is sent to a single IP to a single port</font>

78
00:03:55,480 --> 00:03:59,950
<font color="#E5E5E5">so you don't have to reconfigure it on</font>

79
00:03:57,370 --> 00:04:01,780
on failover<font color="#CCCCCC"> and we can dynamically</font>

80
00:03:59,950 --> 00:04:04,420
modify the configuration<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> in</font>

81
00:04:01,780 --> 00:04:06,160
proxy SQL<font color="#E5E5E5"> to down slaves when we need to</font>

82
00:04:04,420 --> 00:04:09,850
do maintenance<font color="#E5E5E5"> to add more slaves when</font>

83
00:04:06,160 --> 00:04:12,299
we need<font color="#E5E5E5"> to scale so that</font><font color="#CCCCCC"> one area is</font>

84
00:04:09,850 --> 00:04:15,370
covered<font color="#E5E5E5"> but even with this configuration</font>

85
00:04:12,300 --> 00:04:19,918
<font color="#E5E5E5">stale data can be</font><font color="#CCCCCC"> an issue</font><font color="#E5E5E5"> because I</font>

86
00:04:15,370 --> 00:04:22,780
mean<font color="#E5E5E5"> proxy SQL in itself does provide</font>

87
00:04:19,918 --> 00:04:25,450
replication monitoring<font color="#E5E5E5"> so we can set the</font>

88
00:04:22,780 --> 00:04:28,000
threshold for instance of<font color="#E5E5E5"> 30 seconds and</font>

89
00:04:25,450 --> 00:04:31,090
say if our data is more than 30 seconds

90
00:04:28,000 --> 00:04:33,640
although<font color="#E5E5E5"> even one second old don't read</font>

91
00:04:31,090 --> 00:04:35,380
from this slave<font color="#CCCCCC"> so we'll</font><font color="#E5E5E5"> become</font><font color="#CCCCCC"> that</font>

92
00:04:33,640 --> 00:04:38,860
<font color="#E5E5E5">issue but there's still a possibility</font>

93
00:04:35,380 --> 00:04:43,130
<font color="#CCCCCC">that</font><font color="#E5E5E5"> our data will be one second</font>

94
00:04:38,860 --> 00:04:45,110
stale and in<font color="#E5E5E5"> addition to</font><font color="#CCCCCC"> that this</font>

95
00:04:43,130 --> 00:04:47,150
monitoring<font color="#CCCCCC"> happens from proxy SQL</font><font color="#E5E5E5"> and</font>

96
00:04:45,110 --> 00:04:49,010
it's basically polling the slaves<font color="#CCCCCC"> at a</font>

97
00:04:47,150 --> 00:04:52,280
<font color="#E5E5E5">configurable interval which has a</font>

98
00:04:49,010 --> 00:04:58,280
minimum<font color="#CCCCCC"> of one second so up to two</font>

99
00:04:52,280 --> 00:05:00,650
seconds of delayed data<font color="#E5E5E5"> so we kind of</font>

100
00:04:58,280 --> 00:05:03,200
have to<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about how replication</font>

101
00:05:00,650 --> 00:05:05,090
works<font color="#E5E5E5"> and go into</font><font color="#CCCCCC"> a bit of</font><font color="#E5E5E5"> detail</font><font color="#CCCCCC"> to see</font>

102
00:05:03,200 --> 00:05:06,770
how we can<font color="#CCCCCC"> overcome</font><font color="#E5E5E5"> this problem with</font>

103
00:05:05,090 --> 00:05:10,369
asynchronous<font color="#E5E5E5"> replication as we all know</font>

104
00:05:06,770 --> 00:05:13,520
it's all it operates basically with a

105
00:05:10,370 --> 00:05:14,990
bin<font color="#E5E5E5"> lock position</font><font color="#CCCCCC"> file in position</font><font color="#E5E5E5"> so</font>

106
00:05:13,520 --> 00:05:16,669
all the<font color="#CCCCCC"> events are written to the file</font>

107
00:05:14,990 --> 00:05:21,140
<font color="#CCCCCC">it's sent to</font><font color="#E5E5E5"> the slaves and all of these</font>

108
00:05:16,670 --> 00:05:22,730
<font color="#E5E5E5">events</font><font color="#CCCCCC"> are processed one by one</font><font color="#E5E5E5"> so both</font>

109
00:05:21,140 --> 00:05:24,320
in<font color="#E5E5E5"> terms of processing it's kind of a</font>

110
00:05:22,730 --> 00:05:25,820
little bit<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a bottleneck</font><font color="#CCCCCC"> things have</font>

111
00:05:24,320 --> 00:05:27,110
to happen in sequence<font color="#E5E5E5"> and masters and</font>

112
00:05:25,820 --> 00:05:30,710
<font color="#CCCCCC">slaves have to be</font><font color="#E5E5E5"> completely</font>

113
00:05:27,110 --> 00:05:32,570
synchronized<font color="#E5E5E5"> in addition when we're</font>

114
00:05:30,710 --> 00:05:34,669
<font color="#E5E5E5">doing things like failover we have to</font>

115
00:05:32,570 --> 00:05:37,010
ensure that our slaves are at a<font color="#E5E5E5"> certain</font>

116
00:05:34,670 --> 00:05:43,160
<font color="#E5E5E5">position in order to connect to our</font>

117
00:05:37,010 --> 00:05:45,590
masters so<font color="#E5E5E5"> GPI</font><font color="#CCCCCC"> d was introduced to help</font>

118
00:05:43,160 --> 00:05:47,060
solve this problem<font color="#CCCCCC"> of course the main</font>

119
00:05:45,590 --> 00:05:49,520
difference<font color="#CCCCCC"> here is that we have a</font><font color="#E5E5E5"> unique</font>

120
00:05:47,060 --> 00:05:51,950
identifier<font color="#CCCCCC"> for</font><font color="#E5E5E5"> every transaction</font><font color="#CCCCCC"> which</font>

121
00:05:49,520 --> 00:05:54,830
is not unique<font color="#CCCCCC"> just to</font><font color="#E5E5E5"> that host but</font>

122
00:05:51,950 --> 00:05:58,310
unique to every<font color="#CCCCCC"> single host</font><font color="#E5E5E5"> within the</font>

123
00:05:54,830 --> 00:06:00,320
<font color="#CCCCCC">cluster so the specific area that I</font><font color="#E5E5E5"> want</font>

124
00:05:58,310 --> 00:06:02,720
<font color="#E5E5E5">is to keep in mind for today's session</font>

125
00:06:00,320 --> 00:06:05,510
is the structure of<font color="#E5E5E5"> the GT ID it's</font>

126
00:06:02,720 --> 00:06:07,730
basically a colon separated<font color="#CCCCCC"> identifier</font>

127
00:06:05,510 --> 00:06:15,070
with the source ID and the transaction

128
00:06:07,730 --> 00:06:19,600
ID so why is GT ID important for us

129
00:06:15,070 --> 00:06:22,400
essentially<font color="#E5E5E5"> this gives us the ability to</font>

130
00:06:19,600 --> 00:06:24,050
<font color="#CCCCCC">detect which transactions have not been</font>

131
00:06:22,400 --> 00:06:26,719
have<font color="#CCCCCC"> been executed</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> have not</font><font color="#E5E5E5"> been</font>

132
00:06:24,050 --> 00:06:27,730
executed<font color="#E5E5E5"> it allows</font><font color="#CCCCCC"> auto positioning so</font>

133
00:06:26,720 --> 00:06:30,890
we can just

134
00:06:27,730 --> 00:06:35,110
restructure<font color="#CCCCCC"> our master slave topology as</font>

135
00:06:30,890 --> 00:06:38,599
we wish and starting<font color="#E5E5E5"> from</font><font color="#CCCCCC"> 5 6 5 and</font>

136
00:06:35,110 --> 00:06:40,480
<font color="#E5E5E5">later</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> 5 6 9 variables were</font>

137
00:06:38,600 --> 00:06:43,940
introduced so<font color="#CCCCCC"> that we could actually</font>

138
00:06:40,480 --> 00:06:46,460
delay our selects on a slave and wait

139
00:06:43,940 --> 00:06:48,530
for a certain GT ID position to be

140
00:06:46,460 --> 00:06:50,630
reached before<font color="#E5E5E5"> executing the statement</font>

141
00:06:48,530 --> 00:06:52,789
so this is<font color="#CCCCCC"> quite good it's a better</font>

142
00:06:50,630 --> 00:06:55,649
approach it allows us<font color="#E5E5E5"> to</font>

143
00:06:52,789 --> 00:06:58,349
get the data<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want and avoid stale</font>

144
00:06:55,649 --> 00:07:00,629
data<font color="#E5E5E5"> but there is</font><font color="#CCCCCC"> still a delay</font><font color="#E5E5E5"> because</font>

145
00:06:58,349 --> 00:07:02,219
we have to wait until<font color="#E5E5E5"> that that data is</font>

146
00:07:00,629 --> 00:07:04,889
replicated and if it doesn't replicate

147
00:07:02,219 --> 00:07:10,289
up until the certain<font color="#E5E5E5"> point we'll get an</font>

148
00:07:04,889 --> 00:07:12,629
error on the connection so in<font color="#CCCCCC"> my SQL 5:7</font>

149
00:07:10,289 --> 00:07:14,369
<font color="#CCCCCC">a variable was introduced that's pretty</font>

150
00:07:12,629 --> 00:07:16,680
important<font color="#E5E5E5"> now this is available in</font>

151
00:07:14,369 --> 00:07:19,860
<font color="#CCCCCC">Percona server and articles MySQL</font><font color="#E5E5E5"> but</font>

152
00:07:16,680 --> 00:07:22,080
not in Moorea DB as of yet<font color="#CCCCCC"> so the</font>

153
00:07:19,860 --> 00:07:24,569
variable is session<font color="#E5E5E5"> track GT IDs and</font>

154
00:07:22,080 --> 00:07:28,279
<font color="#E5E5E5">basically when you enable this you can</font>

155
00:07:24,569 --> 00:07:30,659
get either the own GT ID so the<font color="#E5E5E5"> GP ID</font>

156
00:07:28,279 --> 00:07:32,009
generated for<font color="#CCCCCC"> a specific</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> of</font>

157
00:07:30,659 --> 00:07:34,229
transactions actually<font color="#E5E5E5"> the last</font>

158
00:07:32,009 --> 00:07:37,199
transaction<font color="#E5E5E5"> that you executed or the</font>

159
00:07:34,229 --> 00:07:39,839
full set of GT IDs returned in the<font color="#CCCCCC"> ok</font>

160
00:07:37,199 --> 00:07:44,669
packet so whenever<font color="#E5E5E5"> I'm executing a write</font>

161
00:07:39,839 --> 00:07:47,009
I will know what GT ID position<font color="#CCCCCC"> a server</font>

162
00:07:44,669 --> 00:07:49,229
will have to have processed in order<font color="#E5E5E5"> for</font>

163
00:07:47,009 --> 00:07:51,419
my transaction to<font color="#CCCCCC"> be consistent so</font>

164
00:07:49,229 --> 00:07:53,758
having this<font color="#CCCCCC"> information I can query a</font>

165
00:07:51,419 --> 00:07:55,498
slave and say what's your GT ID position

166
00:07:53,759 --> 00:07:59,389
<font color="#CCCCCC">okay you've already reached that</font><font color="#E5E5E5"> point</font>

167
00:07:55,499 --> 00:08:04,469
<font color="#CCCCCC">I'm good to execute my select statement</font>

168
00:07:59,389 --> 00:08:07,860
<font color="#CCCCCC">so I mean we thought</font><font color="#E5E5E5"> about how this can</font>

169
00:08:04,469 --> 00:08:09,539
be leveraged in in proxy SQL and<font color="#CCCCCC"> Rene</font>

170
00:08:07,860 --> 00:08:11,099
<font color="#E5E5E5">was like designing this and thinking</font>

171
00:08:09,539 --> 00:08:12,719
about how<font color="#CCCCCC"> can we do it</font><font color="#E5E5E5"> there's basically</font>

172
00:08:11,099 --> 00:08:16,469
two approaches<font color="#CCCCCC"> to the to solve this</font>

173
00:08:12,719 --> 00:08:18,629
problem<font color="#CCCCCC"> the</font><font color="#E5E5E5"> one is making a request to</font>

174
00:08:16,469 --> 00:08:21,808
<font color="#CCCCCC">the slave and asking it what's your GT</font>

175
00:08:18,629 --> 00:08:24,389
ID position so I mean this<font color="#E5E5E5"> implies</font>

176
00:08:21,809 --> 00:08:26,219
<font color="#E5E5E5">polling this implies some delay</font>

177
00:08:24,389 --> 00:08:30,029
essentially it's the<font color="#CCCCCC"> same problem</font><font color="#E5E5E5"> that</font>

178
00:08:26,219 --> 00:08:34,198
<font color="#E5E5E5">we have when we're monitoring for slave</font>

179
00:08:30,029 --> 00:08:35,610
delay with a regular host group so we're

180
00:08:34,198 --> 00:08:39,179
polling<font color="#E5E5E5"> we have that delay of the</font>

181
00:08:35,610 --> 00:08:40,979
interval it can work but it's<font color="#E5E5E5"> not the</font>

182
00:08:39,179 --> 00:08:44,899
<font color="#E5E5E5">best approach</font><font color="#CCCCCC"> so what's the other option</font>

183
00:08:40,979 --> 00:08:44,899
<font color="#E5E5E5">instead of pulling pushing</font>

184
00:08:51,899 --> 00:08:55,040
something<font color="#E5E5E5"> it wasn't</font>

185
00:08:55,800 --> 00:09:02,329
it's<font color="#E5E5E5"> everything clear and any questions</font>

186
00:08:59,550 --> 00:09:04,439
I mean<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> very important that</font><font color="#E5E5E5"> this</font>

187
00:09:02,329 --> 00:09:06,868
everything discussed up until this point

188
00:09:04,439 --> 00:09:11,748
is<font color="#CCCCCC"> completely cleared for the next slide</font>

189
00:09:06,869 --> 00:09:11,749
<font color="#CCCCCC">so if anybody</font><font color="#E5E5E5"> has questions gray area</font>

190
00:09:11,869 --> 00:09:21,029
okay<font color="#CCCCCC"> so the push method</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

191
00:09:17,339 --> 00:09:23,939
<font color="#E5E5E5">polling slaves to get their GT ID why</font>

192
00:09:21,029 --> 00:09:27,329
not have the MySQL server itself have a

193
00:09:23,939 --> 00:09:29,429
process running<font color="#E5E5E5"> there and push the GT</font>

194
00:09:27,329 --> 00:09:31,618
<font color="#CCCCCC">IDs that have been processed to all the</font>

195
00:09:29,429 --> 00:09:34,379
mice<font color="#E5E5E5"> to all the proxy SQL servers</font>

196
00:09:31,619 --> 00:09:37,160
connected<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> way we avoid having</font><font color="#E5E5E5"> to</font>

197
00:09:34,379 --> 00:09:40,170
<font color="#E5E5E5">request the data we avoid</font><font color="#CCCCCC"> having to wait</font>

198
00:09:37,160 --> 00:09:43,829
the slaves just<font color="#E5E5E5"> process binary log event</font>

199
00:09:40,170 --> 00:09:45,479
<font color="#E5E5E5">and then send their GT ID positions so I</font>

200
00:09:43,829 --> 00:09:47,128
mean it's more optimized and it's

201
00:09:45,480 --> 00:09:48,809
especially<font color="#E5E5E5"> important in a large-scale</font>

202
00:09:47,129 --> 00:09:51,959
deployment where you have a lot<font color="#CCCCCC"> of hosts</font>

203
00:09:48,809 --> 00:09:54,509
both<font color="#E5E5E5"> MySQL servers and proxy SQL</font><font color="#CCCCCC"> servers</font>

204
00:09:51,959 --> 00:09:56,699
so to solve this<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> Renee came up</font>

205
00:09:54,509 --> 00:09:58,619
with the proxy SQL<font color="#CCCCCC"> bin</font><font color="#E5E5E5"> la garita</font>

206
00:09:56,699 --> 00:10:00,389
reader which is essentially a

207
00:09:58,619 --> 00:10:03,209
lightweight process that will run<font color="#CCCCCC"> on a</font>

208
00:10:00,389 --> 00:10:04,589
MySQL server<font color="#E5E5E5"> it's designed with proxy</font>

209
00:10:03,209 --> 00:10:07,109
<font color="#E5E5E5">skills principles of high availability</font>

210
00:10:04,589 --> 00:10:09,569
<font color="#E5E5E5">and high performance it's very</font>

211
00:10:07,110 --> 00:10:11,819
lightweight<font color="#CCCCCC"> there was a lot of work done</font>

212
00:10:09,569 --> 00:10:15,509
<font color="#E5E5E5">to minimize the CPU usage</font><font color="#CCCCCC"> and the</font>

213
00:10:11,819 --> 00:10:18,389
network overhead<font color="#E5E5E5"> in fact how does the</font>

214
00:10:15,509 --> 00:10:20,790
<font color="#E5E5E5">process work it processes bin logs as if</font>

215
00:10:18,389 --> 00:10:24,179
it were a slave<font color="#E5E5E5"> but running locally on</font>

216
00:10:20,790 --> 00:10:27,449
<font color="#E5E5E5">the same MySQL server it strips</font><font color="#CCCCCC"> all of</font>

217
00:10:24,179 --> 00:10:31,799
the<font color="#E5E5E5"> information</font><font color="#CCCCCC"> except the GT ID and it</font>

218
00:10:27,449 --> 00:10:34,378
even strips the source ID and just<font color="#E5E5E5"> sends</font>

219
00:10:31,799 --> 00:10:36,689
the transaction ID<font color="#E5E5E5"> until the sauce ID is</font>

220
00:10:34,379 --> 00:10:38,759
changed<font color="#CCCCCC"> so this very little</font><font color="#E5E5E5"> network</font>

221
00:10:36,689 --> 00:10:41,910
traffic<font color="#E5E5E5"> this very little CPU overhead</font>

222
00:10:38,759 --> 00:10:44,399
<font color="#E5E5E5">and it also has an auto auto restart</font>

223
00:10:41,910 --> 00:10:47,009
mechanism in case<font color="#E5E5E5"> it fails</font><font color="#CCCCCC"> and also</font>

224
00:10:44,399 --> 00:10:49,319
reconnect<font color="#E5E5E5"> in case proxy or</font><font color="#CCCCCC"> SQL is not</font>

225
00:10:47,009 --> 00:10:55,639
able<font color="#CCCCCC"> to contact it so let's</font><font color="#E5E5E5"> just have a</font>

226
00:10:49,319 --> 00:10:55,639
look at this on a diagram<font color="#E5E5E5"> yes</font>

227
00:11:01,100 --> 00:11:11,750
yes so it will send<font color="#CCCCCC"> it and then it will</font>

228
00:11:08,130 --> 00:11:15,270
it will not resend<font color="#E5E5E5"> it until</font><font color="#CCCCCC"> it changes</font>

229
00:11:11,750 --> 00:11:17,670
so basically what's happened is<font color="#CCCCCC"> that it</font>

230
00:11:15,270 --> 00:11:19,710
takes<font color="#E5E5E5"> the status of the or diginity</font>

231
00:11:17,670 --> 00:11:22,410
executed on<font color="#E5E5E5"> the mast on the server and</font>

232
00:11:19,710 --> 00:11:24,720
as soon<font color="#E5E5E5"> as a client</font><font color="#CCCCCC"> in this case will be</font>

233
00:11:22,410 --> 00:11:27,270
<font color="#E5E5E5">Roxy sequel connect to this process it</font>

234
00:11:24,720 --> 00:11:30,450
will<font color="#E5E5E5"> send the Fuji</font><font color="#CCCCCC"> dataset</font><font color="#E5E5E5"> and from</font><font color="#CCCCCC"> that</font>

235
00:11:27,270 --> 00:11:33,240
<font color="#E5E5E5">moment on will send the first</font><font color="#CCCCCC"> GT ad</font>

236
00:11:30,450 --> 00:11:35,190
executed with all the server<font color="#E5E5E5"> und and the</font>

237
00:11:33,240 --> 00:11:37,740
transaction<font color="#CCCCCC"> ID and then from that moment</font>

238
00:11:35,190 --> 00:11:41,640
<font color="#E5E5E5">on it will only send the</font><font color="#CCCCCC"> transaction ID</font>

239
00:11:37,740 --> 00:11:45,030
until the moment<font color="#E5E5E5"> they a new UID is</font>

240
00:11:41,640 --> 00:11:47,400
<font color="#E5E5E5">generated so</font><font color="#CCCCCC"> it just a way</font><font color="#E5E5E5"> to minimize</font>

241
00:11:45,030 --> 00:11:49,380
to minimize<font color="#CCCCCC"> network</font><font color="#E5E5E5"> bandit as soon as</font>

242
00:11:47,400 --> 00:11:51,780
possible because<font color="#E5E5E5"> this is designed to</font>

243
00:11:49,380 --> 00:11:53,730
have hundreds of proxy connecting<font color="#E5E5E5"> to</font>

244
00:11:51,780 --> 00:11:55,439
every<font color="#E5E5E5"> database server so of course you</font>

245
00:11:53,730 --> 00:12:05,930
should try to minimize the<font color="#E5E5E5"> probe usage</font>

246
00:11:55,440 --> 00:12:08,880
as much as<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> so MySQL will send</font>

247
00:12:05,930 --> 00:12:11,160
the replication<font color="#E5E5E5"> data and all</font><font color="#CCCCCC"> of the GT</font>

248
00:12:08,880 --> 00:12:15,150
ID and whatever needs to<font color="#CCCCCC"> be written to</font>

249
00:12:11,160 --> 00:12:18,209
the<font color="#E5E5E5"> slaves and the</font><font color="#CCCCCC"> bin log reader will</font>

250
00:12:15,150 --> 00:12:20,730
run locally<font color="#E5E5E5"> read</font><font color="#CCCCCC"> all of these as</font><font color="#E5E5E5"> reneges</font>

251
00:12:18,210 --> 00:12:24,180
described<font color="#E5E5E5"> and send them to</font><font color="#CCCCCC"> all the proxy</font>

252
00:12:20,730 --> 00:12:26,490
SQL instances so every<font color="#CCCCCC"> single proxy SQL</font>

253
00:12:24,180 --> 00:12:31,140
instance that connects to a MySQL<font color="#E5E5E5"> server</font>

254
00:12:26,490 --> 00:12:33,810
<font color="#E5E5E5">will have if it's been configured to</font>

255
00:12:31,140 --> 00:12:37,020
collect that will have the exact

256
00:12:33,810 --> 00:12:40,800
position for<font color="#E5E5E5"> every instance so at this</font>

257
00:12:37,020 --> 00:12:44,880
point we know what<font color="#E5E5E5"> position our slaves</font>

258
00:12:40,800 --> 00:12:48,420
are at but how do<font color="#E5E5E5"> we achieve the</font>

259
00:12:44,880 --> 00:12:50,820
consistency so proxy scale<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

260
00:12:48,420 --> 00:12:55,469
configured<font color="#E5E5E5"> to enforce this consistency</font>

261
00:12:50,820 --> 00:12:58,790
on specific<font color="#E5E5E5"> host groups</font><font color="#CCCCCC"> and if you've</font>

262
00:12:55,470 --> 00:13:02,970
enabled this what proxy SQL will do is

263
00:12:58,790 --> 00:13:07,709
when a session<font color="#E5E5E5"> is initiated and some</font>

264
00:13:02,970 --> 00:13:08,570
transactions are<font color="#E5E5E5"> occurring</font><font color="#CCCCCC"> my proxy SQL</font>

265
00:13:07,710 --> 00:13:10,310
will

266
00:13:08,570 --> 00:13:12,980
check the status<font color="#E5E5E5"> of a host before</font>

267
00:13:10,310 --> 00:13:17,239
<font color="#CCCCCC">routing</font><font color="#E5E5E5"> a selected and it will check to</font>

268
00:13:12,980 --> 00:13:20,780
<font color="#E5E5E5">see</font><font color="#CCCCCC"> if the GTI be the last GT ID that</font>

269
00:13:17,240 --> 00:13:23,030
was executed<font color="#CCCCCC"> for that session on a group</font>

270
00:13:20,780 --> 00:13:26,410
of service has<font color="#E5E5E5"> been executed on</font><font color="#CCCCCC"> the</font>

271
00:13:23,030 --> 00:13:29,839
slave<font color="#E5E5E5"> before sending the query</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

272
00:13:26,410 --> 00:13:32,060
let's take<font color="#CCCCCC"> a simple example</font><font color="#E5E5E5"> of two two</font>

273
00:13:29,840 --> 00:13:35,030
slaves<font color="#E5E5E5"> and one master</font><font color="#CCCCCC"> it will check</font><font color="#E5E5E5"> the</font>

274
00:13:32,060 --> 00:13:37,099
<font color="#E5E5E5">first in its own internal in memory list</font>

275
00:13:35,030 --> 00:13:39,770
<font color="#E5E5E5">it will not find it it will check the</font>

276
00:13:37,100 --> 00:13:41,510
second<font color="#E5E5E5"> if it still does not find it it</font>

277
00:13:39,770 --> 00:13:44,449
will then route the<font color="#E5E5E5"> query to the master</font>

278
00:13:41,510 --> 00:13:49,580
so<font color="#E5E5E5"> you'll always have fresh data your</font>

279
00:13:44,450 --> 00:13:52,130
<font color="#E5E5E5">latency will be low and you</font><font color="#CCCCCC"> can even</font>

280
00:13:49,580 --> 00:13:53,930
configure this<font color="#E5E5E5"> just on a host group you</font>

281
00:13:52,130 --> 00:13:56,360
<font color="#CCCCCC">don't necessarily need the replication</font>

282
00:13:53,930 --> 00:14:00,949
host group so let's just have<font color="#E5E5E5"> a look at</font>

283
00:13:56,360 --> 00:14:03,200
this<font color="#E5E5E5"> in in terms of a replication host</font>

284
00:14:00,950 --> 00:14:07,160
group so the application will send the

285
00:14:03,200 --> 00:14:09,370
reads<font color="#E5E5E5"> and writes</font><font color="#CCCCCC"> to to proxy SQL DML</font>

286
00:14:07,160 --> 00:14:13,640
will be routed to<font color="#E5E5E5"> the writer host group</font>

287
00:14:09,370 --> 00:14:16,070
this will<font color="#CCCCCC"> be written on the master the</font>

288
00:14:13,640 --> 00:14:18,020
next<font color="#E5E5E5"> request look the next dql request</font>

289
00:14:16,070 --> 00:14:21,280
will come in some select or something

290
00:14:18,020 --> 00:14:24,560
like<font color="#CCCCCC"> that then proxy SQL will evaluate</font>

291
00:14:21,280 --> 00:14:26,120
which slaves are<font color="#E5E5E5"> up-to-date</font><font color="#CCCCCC"> and if none</font>

292
00:14:24,560 --> 00:14:28,189
of them are are<font color="#E5E5E5"> up-to-date</font>

293
00:14:26,120 --> 00:14:30,950
it will route it to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> master provided</font>

294
00:14:28,190 --> 00:14:36,830
<font color="#E5E5E5">that the master is included in the</font>

295
00:14:30,950 --> 00:14:39,470
reader host group so to<font color="#CCCCCC"> sum up</font><font color="#E5E5E5"> let's</font>

296
00:14:36,830 --> 00:14:42,830
have a look at what is supported for GT

297
00:14:39,470 --> 00:14:45,260
ID consistent reads in proxy SQL<font color="#E5E5E5"> with</font>

298
00:14:42,830 --> 00:14:46,610
basic master-slave replication<font color="#E5E5E5"> we</font>

299
00:14:45,260 --> 00:14:49,580
support both asynchronous replication

300
00:14:46,610 --> 00:14:51,830
and semi synchronous replication<font color="#E5E5E5"> for</font>

301
00:14:49,580 --> 00:14:55,250
multi master<font color="#E5E5E5"> in ODB cluster and group</font>

302
00:14:51,830 --> 00:14:57,980
replication is also supported finally a

303
00:14:55,250 --> 00:14:59,900
quick note about<font color="#E5E5E5"> the requirements and GT</font>

304
00:14:57,980 --> 00:15:03,020
ID is required<font color="#E5E5E5"> for all of the servers</font>

305
00:14:59,900 --> 00:15:05,689
that<font color="#E5E5E5"> are part of the host group and of</font>

306
00:15:03,020 --> 00:15:07,430
course<font color="#E5E5E5"> MySQL 5.7 so that we can have</font>

307
00:15:05,690 --> 00:15:09,700
that information<font color="#E5E5E5"> returned in the</font><font color="#CCCCCC"> ok</font>

308
00:15:07,430 --> 00:15:12,260
packet<font color="#E5E5E5"> and finally at the current moment</font>

309
00:15:09,700 --> 00:15:15,540
<font color="#E5E5E5">the bin like format must be configured</font>

310
00:15:12,260 --> 00:15:18,540
<font color="#CCCCCC">to</font><font color="#E5E5E5"> row so</font>

311
00:15:15,540 --> 00:15:21,569
what time is<font color="#CCCCCC"> it time for any to do a</font>

312
00:15:18,540 --> 00:15:29,540
live<font color="#E5E5E5"> demo and for all of you to see how</font>

313
00:15:21,570 --> 00:15:29,540
this<font color="#E5E5E5"> works in action so</font><font color="#CCCCCC"> questions yes</font>

314
00:15:36,890 --> 00:15:43,250
okay so basically<font color="#E5E5E5"> though it work is that</font>

315
00:15:39,760 --> 00:15:45,260
the<font color="#CCCCCC"> GED of the transaction executed from</font>

316
00:15:43,250 --> 00:15:47,870
<font color="#E5E5E5">the client is written from the okay</font>

317
00:15:45,260 --> 00:15:50,480
pocket<font color="#E5E5E5"> so for every client session</font>

318
00:15:47,870 --> 00:15:52,490
<font color="#CCCCCC">Rox is equally striking the</font><font color="#E5E5E5"> GED for that</font>

319
00:15:50,480 --> 00:15:55,580
specific client<font color="#E5E5E5"> so when it need to</font>

320
00:15:52,490 --> 00:15:58,910
<font color="#E5E5E5">execute the a select statement</font><font color="#CCCCCC"> its check</font>

321
00:15:55,580 --> 00:16:01,640
which slaves<font color="#E5E5E5"> has that specific</font><font color="#CCCCCC"> gdb</font><font color="#E5E5E5"> it</font>

322
00:15:58,910 --> 00:16:04,069
does not<font color="#E5E5E5"> check</font><font color="#CCCCCC"> the last JB written for</font>

323
00:16:01,640 --> 00:16:12,170
<font color="#CCCCCC">whenever for whatever</font><font color="#E5E5E5"> connection just</font>

324
00:16:04,070 --> 00:16:14,390
<font color="#CCCCCC">for</font><font color="#E5E5E5"> that specific client just</font>

325
00:16:12,170 --> 00:16:17,150
<font color="#CCCCCC">technically yes</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> also</font>

326
00:16:14,390 --> 00:16:18,590
<font color="#CCCCCC">send the</font><font color="#E5E5E5"> queries to our slaves it is few</font>

327
00:16:17,150 --> 00:16:20,390
seconds lagging behind

328
00:16:18,590 --> 00:16:22,790
but you initially<font color="#E5E5E5"> that the bride</font><font color="#CCCCCC"> has</font>

329
00:16:20,390 --> 00:16:25,280
been written<font color="#E5E5E5"> by one</font><font color="#CCCCCC"> specific client hast</font>

330
00:16:22,790 --> 00:16:27,349
<font color="#E5E5E5">reached the slave and one important</font>

331
00:16:25,280 --> 00:16:29,390
<font color="#E5E5E5">thing is</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> to enable</font>

332
00:16:27,350 --> 00:16:31,970
<font color="#E5E5E5">these features</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> any term sort of</font>

333
00:16:29,390 --> 00:16:33,439
<font color="#E5E5E5">traffic but you can specify</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> select</font>

334
00:16:31,970 --> 00:16:35,600
<font color="#E5E5E5">statement</font><font color="#CCCCCC"> you want these features to</font>

335
00:16:33,440 --> 00:16:38,060
want enabled<font color="#E5E5E5"> it's not you don't</font><font color="#CCCCCC"> enable</font>

336
00:16:35,600 --> 00:16:41,170
<font color="#E5E5E5">to globally you enabled for rare type of</font>

337
00:16:38,060 --> 00:16:41,170
select statement

338
00:16:52,779 --> 00:16:57,459
technically not correct<font color="#E5E5E5"> it doesn't query</font>

339
00:16:55,180 --> 00:16:59,888
them to check if they have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> GDD</font>

340
00:16:57,459 --> 00:17:02,638
<font color="#E5E5E5">but it mean generally internally check</font>

341
00:16:59,889 --> 00:17:06,189
if those slaves have already<font color="#E5E5E5"> the data</font>

342
00:17:02,639 --> 00:17:09,250
now<font color="#CCCCCC"> the principle</font><font color="#E5E5E5"> of a check if there</font>

343
00:17:06,189 --> 00:17:11,260
are<font color="#E5E5E5"> if the slaves have the data first</font>

344
00:17:09,250 --> 00:17:13,539
<font color="#E5E5E5">and then the master because normally if</font>

345
00:17:11,260 --> 00:17:15,429
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> using replication husba the</font>

346
00:17:13,539 --> 00:17:17,319
master<font color="#CCCCCC"> is in the same</font><font color="#E5E5E5"> post group as the</font>

347
00:17:15,429 --> 00:17:19,659
slaves<font color="#CCCCCC"> because it's part</font><font color="#E5E5E5"> of the reader</font>

348
00:17:17,319 --> 00:17:21,369
but with a lower weight<font color="#E5E5E5"> so the</font>

349
00:17:19,659 --> 00:17:23,079
probability of the query set being sent

350
00:17:21,369 --> 00:17:25,839
to the slave<font color="#CCCCCC"> is higher than</font><font color="#E5E5E5"> to obviously</font>

351
00:17:23,079 --> 00:17:27,938
<font color="#E5E5E5">being sent</font><font color="#CCCCCC"> to the master</font><font color="#E5E5E5"> what if the GED</font>

352
00:17:25,839 --> 00:17:30,280
<font color="#E5E5E5">is not executed</font><font color="#CCCCCC"> or none of the slaves</font>

353
00:17:27,939 --> 00:17:31,720
<font color="#E5E5E5">and later on the master because actually</font>

354
00:17:30,280 --> 00:17:35,139
technically<font color="#E5E5E5"> it is possible</font><font color="#CCCCCC"> that between</font>

355
00:17:31,720 --> 00:17:37,000
<font color="#CCCCCC">lock reader reply</font><font color="#E5E5E5"> slightly later have an</font>

356
00:17:35,140 --> 00:17:40,840
unlikely but<font color="#E5E5E5"> the possibility is</font><font color="#CCCCCC"> there</font>

357
00:17:37,000 --> 00:17:42,909
the same principle apply of how<font color="#E5E5E5"> proxy</font>

358
00:17:40,840 --> 00:17:44,980
<font color="#E5E5E5">seek will behave when there is no</font>

359
00:17:42,909 --> 00:17:47,140
serving<font color="#E5E5E5"> our host group it just wait for</font>

360
00:17:44,980 --> 00:17:49,450
the server<font color="#CCCCCC"> to come for a server to be</font>

361
00:17:47,140 --> 00:17:54,059
<font color="#CCCCCC">avaible</font><font color="#E5E5E5"> so technically you might have a</font>

362
00:17:49,450 --> 00:17:54,059
slightly delay the worst case

363
00:18:04,230 --> 00:18:09,310
the debtor will come after<font color="#CCCCCC"> 10 second</font><font color="#E5E5E5"> it</font>

364
00:18:07,210 --> 00:18:13,740
is the<font color="#E5E5E5"> default for a</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> not being</font>

365
00:18:09,310 --> 00:18:13,740
available in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> housetop</font><font color="#E5E5E5"> let me go back</font>

366
00:18:14,070 --> 00:18:25,300
<font color="#CCCCCC">see which</font><font color="#E5E5E5"> is the best light to probably</font>

367
00:18:21,750 --> 00:18:28,180
<font color="#E5E5E5">permit this one let me</font><font color="#CCCCCC"> just go the side</font>

368
00:18:25,300 --> 00:18:31,480
so the wet work is that the application

369
00:18:28,180 --> 00:18:34,210
is writing here<font color="#E5E5E5"> so then the master</font><font color="#CCCCCC"> reply</font>

370
00:18:31,480 --> 00:18:36,070
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> okay proxy sequel knows what is</font>

371
00:18:34,210 --> 00:18:38,620
the<font color="#E5E5E5"> okay the GED</font><font color="#CCCCCC"> and the talk a</font><font color="#E5E5E5"> packet</font>

372
00:18:36,070 --> 00:18:40,090
<font color="#E5E5E5">reply to the client with okay then by</font>

373
00:18:38,620 --> 00:18:42,669
the time that the client<font color="#E5E5E5"> is sending</font>

374
00:18:40,090 --> 00:18:44,770
<font color="#E5E5E5">another query you can pretty much ensure</font>

375
00:18:42,670 --> 00:18:48,130
that at least the master has<font color="#E5E5E5"> turned the</font>

376
00:18:44,770 --> 00:18:51,430
<font color="#E5E5E5">GDD to the proxy so the probability of</font>

377
00:18:48,130 --> 00:18:53,320
having<font color="#E5E5E5"> this guy sending a query before</font>

378
00:18:51,430 --> 00:18:55,330
this one returned agility to the master

379
00:18:53,320 --> 00:18:57,220
is unlikely to<font color="#CCCCCC"> happen technically</font>

380
00:18:55,330 --> 00:19:00,639
possible but<font color="#CCCCCC"> the probability extremely</font>

381
00:18:57,220 --> 00:19:03,070
low and and then depend how fast are the

382
00:19:00,640 --> 00:19:04,330
slave to process the<font color="#CCCCCC"> GTD and reply back</font>

383
00:19:03,070 --> 00:19:06,280
to<font color="#E5E5E5"> the proxy</font>

384
00:19:04,330 --> 00:19:08,770
but the<font color="#CCCCCC"> idea is</font><font color="#E5E5E5"> that we are eliminating</font>

385
00:19:06,280 --> 00:19:12,070
<font color="#CCCCCC">all the external Network round-trip</font>

386
00:19:08,770 --> 00:19:14,440
because when this will execute a query<font color="#E5E5E5"> a</font>

387
00:19:12,070 --> 00:19:16,540
select statement<font color="#CCCCCC"> this already knows what</font>

388
00:19:14,440 --> 00:19:18,040
<font color="#CCCCCC">are the GDD</font><font color="#E5E5E5"> executed both here and there</font>

389
00:19:16,540 --> 00:19:22,230
<font color="#E5E5E5">it doesn't</font><font color="#CCCCCC"> have to check them</font>

390
00:19:18,040 --> 00:19:22,230
it already knows<font color="#E5E5E5"> yes</font>

391
00:19:35,670 --> 00:19:41,000
<font color="#CCCCCC">every</font><font color="#E5E5E5"> client has his own state so the</font>

392
00:19:38,460 --> 00:19:41,000
<font color="#E5E5E5">GTA did</font>

393
00:19:58,580 --> 00:20:04,340
so if you have only<font color="#E5E5E5"> one proxy what you</font>

394
00:20:02,060 --> 00:20:06,139
<font color="#E5E5E5">are saying is very easy</font><font color="#CCCCCC"> to do to</font>

395
00:20:04,340 --> 00:20:07,459
<font color="#CCCCCC">implement because this proxy will know</font>

396
00:20:06,140 --> 00:20:09,110
what the<font color="#E5E5E5"> create has been sent to the</font>

397
00:20:07,460 --> 00:20:11,210
other base server<font color="#CCCCCC"> master</font>

398
00:20:09,110 --> 00:20:14,209
slaves whatever<font color="#E5E5E5"> but if you have multiple</font>

399
00:20:11,210 --> 00:20:17,680
proxy then this process<font color="#CCCCCC"> does not know</font>

400
00:20:14,210 --> 00:20:20,180
what has<font color="#E5E5E5"> been executed</font><font color="#CCCCCC"> by that one</font>

401
00:20:17,680 --> 00:20:26,240
<font color="#CCCCCC">technically</font><font color="#E5E5E5"> can be implemented in some</font>

402
00:20:20,180 --> 00:20:26,960
other way like relying only on the bin

403
00:20:26,240 --> 00:20:29,810
log<font color="#E5E5E5"> leader</font>

404
00:20:26,960 --> 00:20:33,920
so whatever bin<font color="#E5E5E5"> log has been executed up</font>

405
00:20:29,810 --> 00:20:39,800
to that<font color="#CCCCCC"> moment</font><font color="#E5E5E5"> but a consequence of this</font>

406
00:20:33,920 --> 00:20:42,110
might<font color="#E5E5E5"> be that let's see let me think it</font>

407
00:20:39,800 --> 00:20:44,060
<font color="#E5E5E5">probably has to wait some interval to</font>

408
00:20:42,110 --> 00:20:48,889
make sure that nothing<font color="#CCCCCC"> guys was executed</font>

409
00:20:44,060 --> 00:20:51,560
in<font color="#E5E5E5"> between I'm not really sure how how</font>

410
00:20:48,890 --> 00:20:59,050
to implement this or even<font color="#E5E5E5"> if what are</font>

411
00:20:51,560 --> 00:20:59,050
the challenges<font color="#E5E5E5"> yeah okay so demo</font>

412
00:21:24,570 --> 00:21:30,779
so we were trying<font color="#E5E5E5"> oh you cannot read</font>

413
00:21:28,480 --> 00:21:30,779
here

414
00:21:40,310 --> 00:21:46,639
<font color="#E5E5E5">I'm trying to zoom out now so take that</font>

415
00:21:43,950 --> 00:21:46,640
<font color="#E5E5E5">yes</font>

416
00:21:49,840 --> 00:21:56,409
<font color="#E5E5E5">okay so there were two things that I</font>

417
00:21:53,500 --> 00:21:59,230
wanted to show<font color="#E5E5E5"> one is one proxy sequel</font>

418
00:21:56,410 --> 00:22:01,810
instance that is collecting metrics<font color="#E5E5E5"> from</font>

419
00:21:59,230 --> 00:22:03,310
30 database server<font color="#E5E5E5"> at the same time so</font>

420
00:22:01,810 --> 00:22:05,080
it's collecting method for all of them

421
00:22:03,310 --> 00:22:07,000
and they want to<font color="#E5E5E5"> show the</font><font color="#CCCCCC"> city</font>

422
00:22:05,080 --> 00:22:09,040
utilization and<font color="#CCCCCC"> the demands of</font>

423
00:22:07,000 --> 00:22:11,080
realization<font color="#E5E5E5"> but unfortunately the VPN</font>

424
00:22:09,040 --> 00:22:15,520
doesn't seem to<font color="#E5E5E5"> work so I'm going to</font>

425
00:22:11,080 --> 00:22:16,290
<font color="#E5E5E5">also only to show another one</font><font color="#CCCCCC"> so in this</font>

426
00:22:15,520 --> 00:22:20,920
session

427
00:22:16,290 --> 00:22:22,420
what we have is<font color="#E5E5E5"> okay so I don't know how</font>

428
00:22:20,920 --> 00:22:24,220
many<font color="#E5E5E5"> of you</font><font color="#CCCCCC"> are familiar</font><font color="#E5E5E5"> with the web</font>

429
00:22:22,420 --> 00:22:26,380
proxy sequel is being<font color="#CCCCCC"> configured</font><font color="#E5E5E5"> so it</font>

430
00:22:24,220 --> 00:22:29,170
has an admin interface and which

431
00:22:26,380 --> 00:22:33,160
basically execute<font color="#E5E5E5"> DML to configure the</font>

432
00:22:29,170 --> 00:22:38,140
<font color="#E5E5E5">proxy or the</font><font color="#CCCCCC"> configurational is on his</font>

433
00:22:33,160 --> 00:22:41,440
<font color="#CCCCCC">own tables so for example table</font><font color="#E5E5E5"> my</font>

434
00:22:38,140 --> 00:22:43,840
secret<font color="#E5E5E5"> servers in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> tables there are</font>

435
00:22:41,440 --> 00:22:46,630
all the servers that are configured as a

436
00:22:43,840 --> 00:22:48,399
back-end for<font color="#E5E5E5"> proxy sequel and in our</font>

437
00:22:46,630 --> 00:22:50,890
case what we have<font color="#E5E5E5"> introduced for these</font>

438
00:22:48,400 --> 00:22:53,230
new features<font color="#CCCCCC"> is this new variable Cities</font>

439
00:22:50,890 --> 00:22:55,510
this new<font color="#CCCCCC"> columns with this GID port so</font>

440
00:22:53,230 --> 00:22:57,640
we<font color="#E5E5E5"> have hostname port 10 HTTP</font><font color="#CCCCCC"> port</font>

441
00:22:55,510 --> 00:23:01,210
<font color="#CCCCCC">report is basically where the blog</font>

442
00:22:57,640 --> 00:23:05,830
reader is listening<font color="#E5E5E5"> so for example you</font>

443
00:23:01,210 --> 00:23:14,410
can run select host group ID hostname

444
00:23:05,830 --> 00:23:17,490
port<font color="#E5E5E5"> gjd port from my</font><font color="#CCCCCC"> secret service I'm</font>

445
00:23:14,410 --> 00:23:20,710
just removing everything<font color="#E5E5E5"> else so we have</font>

446
00:23:17,490 --> 00:23:24,310
<font color="#CCCCCC">to ha stop was group 1 and host group 2</font>

447
00:23:20,710 --> 00:23:26,440
where<font color="#E5E5E5"> GD ad port is</font><font color="#CCCCCC"> enabler</font><font color="#E5E5E5"> is not</font><font color="#CCCCCC"> 0 so</font>

448
00:23:24,310 --> 00:23:28,149
a participant will connect on<font color="#CCCCCC"> that port</font>

449
00:23:26,440 --> 00:23:30,220
<font color="#E5E5E5">and retrieve the</font><font color="#CCCCCC"> gkd</font>

450
00:23:28,150 --> 00:23:33,490
and all this is<font color="#CCCCCC"> happening in</font><font color="#E5E5E5"> real</font><font color="#CCCCCC"> time</font>

451
00:23:30,220 --> 00:23:35,650
so there is a new tables your tables

452
00:23:33,490 --> 00:23:37,660
from start so<font color="#E5E5E5"> in</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> the star schema</font>

453
00:23:35,650 --> 00:23:39,640
<font color="#CCCCCC">is where all the metrics are being</font>

454
00:23:37,660 --> 00:23:44,530
collected<font color="#E5E5E5"> and specifically we are</font>

455
00:23:39,640 --> 00:23:47,970
<font color="#CCCCCC">interested in this table</font><font color="#E5E5E5"> so select star</font>

456
00:23:44,530 --> 00:23:47,970
from start

457
00:23:48,980 --> 00:23:56,000
that secret<font color="#CCCCCC"> GTD executed</font><font color="#E5E5E5"> so here we have</font>

458
00:23:53,540 --> 00:23:58,370
the proxy sequel is<font color="#E5E5E5"> conducting GTD from</font>

459
00:23:56,000 --> 00:24:00,380
those<font color="#E5E5E5"> two server it is this one is</font><font color="#CCCCCC"> the</font>

460
00:23:58,370 --> 00:24:04,729
master<font color="#CCCCCC"> and those two</font><font color="#E5E5E5"> were</font><font color="#CCCCCC"> the slave and</font>

461
00:24:00,380 --> 00:24:08,150
in<font color="#E5E5E5"> real time is telling you the executed</font>

462
00:24:04,730 --> 00:24:11,270
set and how many<font color="#E5E5E5"> gdb event has been read</font>

463
00:24:08,150 --> 00:24:12,559
so<font color="#CCCCCC"> far from that server if you</font><font color="#E5E5E5"> executed</font>

464
00:24:11,270 --> 00:24:19,700
few<font color="#E5E5E5"> times you will</font><font color="#CCCCCC"> see that of course</font>

465
00:24:12,559 --> 00:24:23,000
<font color="#CCCCCC">toast counter are changing</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font>

466
00:24:19,700 --> 00:24:33,730
also guess which one is<font color="#E5E5E5"> the master</font><font color="#CCCCCC"> and</font>

467
00:24:23,000 --> 00:24:33,730
which one is the<font color="#E5E5E5"> slave okay</font>

468
00:24:34,780 --> 00:24:56,850
oh yeah okay so<font color="#E5E5E5"> so create table starts</font>

469
00:24:46,770 --> 00:24:59,920
my sequel<font color="#CCCCCC"> so this table also collect</font>

470
00:24:56,850 --> 00:25:02,429
this table collect all the statistic of

471
00:24:59,920 --> 00:25:08,410
all the queries<font color="#CCCCCC"> that are being executed</font>

472
00:25:02,430 --> 00:25:12,930
<font color="#E5E5E5">and it also now there is our new columns</font>

473
00:25:08,410 --> 00:25:20,890
that is queries<font color="#E5E5E5"> appear DTD</font><font color="#CCCCCC"> sync</font><font color="#E5E5E5"> so</font>

474
00:25:12,930 --> 00:25:24,750
<font color="#E5E5E5">select star select queries</font><font color="#CCCCCC"> where is GG</font>

475
00:25:20,890 --> 00:25:24,750
<font color="#CCCCCC">ID same</font>

476
00:25:35,570 --> 00:25:40,649
so here the<font color="#E5E5E5"> host book there are some</font>

477
00:25:38,970 --> 00:25:42,690
<font color="#CCCCCC">service</font><font color="#E5E5E5"> to have to know these features</font>

478
00:25:40,650 --> 00:25:44,360
enabled because<font color="#E5E5E5"> this actually is a proxy</font>

479
00:25:42,690 --> 00:25:47,160
<font color="#CCCCCC">seek were disconnected not to one</font>

480
00:25:44,360 --> 00:25:50,490
cluster<font color="#CCCCCC"> but there are</font><font color="#E5E5E5"> multiple cluster</font>

481
00:25:47,160 --> 00:25:54,030
behind it<font color="#E5E5E5"> so it's only tells you where</font>

482
00:25:50,490 --> 00:25:57,000
<font color="#E5E5E5">the queries has been executed so a lot</font>

483
00:25:54,030 --> 00:25:59,100
of<font color="#E5E5E5"> queries has been executed without GED</font>

484
00:25:57,000 --> 00:26:01,290
enforced<font color="#E5E5E5"> while other query have been</font>

485
00:25:59,100 --> 00:26:05,610
executed<font color="#CCCCCC"> with the GED enforced so it</font>

486
00:26:01,290 --> 00:26:07,770
will read<font color="#E5E5E5"> it will when it's reading is</font>

487
00:26:05,610 --> 00:26:14,629
making sure that<font color="#CCCCCC"> the server is</font><font color="#E5E5E5"> in sync</font>

488
00:26:07,770 --> 00:26:16,830
with<font color="#CCCCCC"> the master teammates over</font><font color="#E5E5E5"> okay</font>

489
00:26:14,630 --> 00:26:18,450
steady saying<font color="#E5E5E5"> either question actually</font>

490
00:26:16,830 --> 00:26:38,929
<font color="#E5E5E5">the demo was going to supposed to be a</font>

491
00:26:18,450 --> 00:26:38,930
bit<font color="#E5E5E5"> longer have question why</font>

492
00:26:43,220 --> 00:26:50,369
[Applause]

