1
00:00:06,130 --> 00:00:14,629
so our next<font color="#E5E5E5"> speaker is marking its key</font>

2
00:00:09,920 --> 00:00:19,400
<font color="#E5E5E5">and thank you thank you</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> for coming</font>

3
00:00:14,629 --> 00:00:22,850
<font color="#CCCCCC">to my talk before I start</font><font color="#E5E5E5"> let me just</font>

4
00:00:19,400 --> 00:00:25,880
<font color="#E5E5E5">spend maybe a minute or two about</font><font color="#CCCCCC"> myself</font>

5
00:00:22,850 --> 00:00:27,770
Who am I so I if you in case you<font color="#E5E5E5"> don't</font>

6
00:00:25,880 --> 00:00:30,770
<font color="#E5E5E5">know me at all I have been</font><font color="#CCCCCC"> a patient</font>

7
00:00:27,770 --> 00:00:33,469
programmer<font color="#E5E5E5"> since I can remember and I</font>

8
00:00:30,770 --> 00:00:36,170
have a special inclination towards<font color="#E5E5E5"> let's</font>

9
00:00:33,469 --> 00:00:39,680
say system level staff and microkernels

10
00:00:36,170 --> 00:00:43,660
<font color="#CCCCCC">I have also been working on the</font><font color="#E5E5E5"> Helen OS</font>

11
00:00:39,680 --> 00:00:47,570
microkernel<font color="#E5E5E5"> multi server project</font><font color="#CCCCCC"> since</font>

12
00:00:43,660 --> 00:00:52,760
2004<font color="#CCCCCC"> but this talk won't</font><font color="#E5E5E5"> be about</font><font color="#CCCCCC"> Helena</font>

13
00:00:47,570 --> 00:00:54,829
was this this year<font color="#E5E5E5"> I also changed</font><font color="#CCCCCC"> rows</font>

14
00:00:52,760 --> 00:00:58,010
<font color="#E5E5E5">quite recently so I have spent more than</font>

15
00:00:54,829 --> 00:01:01,600
<font color="#CCCCCC">10 years in academia</font><font color="#E5E5E5"> and last year I</font>

16
00:00:58,010 --> 00:01:04,250
<font color="#CCCCCC">decided that I should</font><font color="#E5E5E5"> also look on the</font>

17
00:01:01,600 --> 00:01:07,340
operating system<font color="#E5E5E5"> development</font><font color="#CCCCCC"> landscape</font>

18
00:01:04,250 --> 00:01:09,350
in industry<font color="#E5E5E5"> so I switched to have a</font>

19
00:01:07,340 --> 00:01:11,320
technologies you might probably<font color="#E5E5E5"> know who</font>

20
00:01:09,350 --> 00:01:16,039
are they as a producer<font color="#CCCCCC"> of</font><font color="#E5E5E5"> smartphones</font>

21
00:01:11,320 --> 00:01:19,460
<font color="#E5E5E5">some of you might know who is supplier</font>

22
00:01:16,040 --> 00:01:22,520
<font color="#E5E5E5">to tell co-operators and enterprise</font>

23
00:01:19,460 --> 00:01:24,350
companies but we also we are a large

24
00:01:22,520 --> 00:01:26,990
<font color="#E5E5E5">company so we have</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> a low</font>

25
00:01:24,350 --> 00:01:30,408
<font color="#E5E5E5">microkernel partially formally verified</font>

26
00:01:26,990 --> 00:01:32,600
<font color="#E5E5E5">we have also a unicorn of actually two</font>

27
00:01:30,409 --> 00:01:34,430
of<font color="#E5E5E5"> them but I won't be talking</font><font color="#CCCCCC"> about</font>

28
00:01:32,600 --> 00:01:38,960
this<font color="#E5E5E5"> either because these are</font><font color="#CCCCCC"> open</font>

29
00:01:34,430 --> 00:01:42,770
<font color="#E5E5E5">closed source software so far so maybe</font>

30
00:01:38,960 --> 00:01:47,000
another time so what I'm going to talk

31
00:01:42,770 --> 00:01:50,210
about<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> don't know the</font>

32
00:01:47,000 --> 00:01:52,040
keywords or<font color="#E5E5E5"> buzzwords so however you</font>

33
00:01:50,210 --> 00:01:54,589
<font color="#E5E5E5">would call them from the title of the</font>

34
00:01:52,040 --> 00:01:57,200
talk so this is the primary motivation

35
00:01:54,590 --> 00:02:01,790
of my talk<font color="#E5E5E5"> something called memory</font>

36
00:01:57,200 --> 00:02:05,200
barrier<font color="#E5E5E5"> probably have</font><font color="#CCCCCC"> noticed that the</font>

37
00:02:01,790 --> 00:02:09,259
issue<font color="#E5E5E5"> of current computer hardware of</font>

38
00:02:05,200 --> 00:02:13,069
architectures<font color="#CCCCCC"> at least since</font><font color="#E5E5E5"> the</font>

39
00:02:09,258 --> 00:02:16,099
beginning of 1980s<font color="#E5E5E5"> is that the relative</font>

40
00:02:13,069 --> 00:02:19,189
speed of the CPU

41
00:02:16,099 --> 00:02:21,439
<font color="#CCCCCC">grows much faster than the relative</font>

42
00:02:19,189 --> 00:02:26,709
speed<font color="#CCCCCC"> of memory this this this graph</font>

43
00:02:21,439 --> 00:02:29,090
shows this comparison<font color="#E5E5E5"> up to 2005 but</font>

44
00:02:26,709 --> 00:02:31,519
believe me<font color="#E5E5E5"> there has there</font><font color="#CCCCCC"> has been no</font>

45
00:02:29,090 --> 00:02:33,799
positive change<font color="#E5E5E5"> with</font><font color="#CCCCCC"> regards to this</font><font color="#E5E5E5"> so</font>

46
00:02:31,519 --> 00:02:38,180
basically<font color="#E5E5E5"> we have very fast powerful</font>

47
00:02:33,799 --> 00:02:42,650
CPUs which are being starved<font color="#CCCCCC"> from</font><font color="#E5E5E5"> data</font>

48
00:02:38,180 --> 00:02:46,579
the<font color="#E5E5E5"> the memory</font><font color="#CCCCCC"> RAM and of course also</font>

49
00:02:42,650 --> 00:02:51,140
persistent memory<font color="#E5E5E5"> is not able to keep</font>

50
00:02:46,579 --> 00:02:54,819
track<font color="#CCCCCC"> performance wise there is a</font>

51
00:02:51,140 --> 00:02:58,849
textbook example and one way how<font color="#E5E5E5"> to</font>

52
00:02:54,819 --> 00:03:01,129
solve this<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and those are caches</font>

53
00:02:58,849 --> 00:03:04,578
of<font color="#E5E5E5"> course our CPUs currently have a</font>

54
00:03:01,129 --> 00:03:07,280
multitude layers of caches that<font color="#E5E5E5"> tries to</font>

55
00:03:04,579 --> 00:03:11,120
mitigate this problem some<font color="#CCCCCC"> somehow to</font>

56
00:03:07,280 --> 00:03:14,420
make the CPU be a<font color="#CCCCCC"> to to allow the CPU to</font>

57
00:03:11,120 --> 00:03:18,079
run<font color="#E5E5E5"> at its top speed by caching</font><font color="#CCCCCC"> the data</font>

58
00:03:14,420 --> 00:03:20,000
that it needs<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> and of course this</font>

59
00:03:18,079 --> 00:03:22,459
<font color="#CCCCCC">needs to be</font><font color="#E5E5E5"> taken into</font><font color="#CCCCCC"> account so this</font>

60
00:03:20,000 --> 00:03:24,919
<font color="#E5E5E5">is like I have</font><font color="#CCCCCC"> set a textbook textbook</font>

61
00:03:22,459 --> 00:03:28,489
example imagine<font color="#E5E5E5"> you have a comparison</font><font color="#CCCCCC"> of</font>

62
00:03:24,919 --> 00:03:31,669
two<font color="#E5E5E5"> sorting algorithms one is classical</font>

63
00:03:28,489 --> 00:03:35,239
quicksort which is a<font color="#E5E5E5"> comparison sorting</font>

64
00:03:31,669 --> 00:03:38,359
<font color="#CCCCCC">algorithm so it</font><font color="#E5E5E5"> runs at</font><font color="#CCCCCC"> Big O n Times</font>

65
00:03:35,239 --> 00:03:41,000
log n with where the N is the number<font color="#E5E5E5"> of</font>

66
00:03:38,359 --> 00:03:43,190
<font color="#E5E5E5">elements you are sorting and if you know</font>

67
00:03:41,000 --> 00:03:46,760
<font color="#E5E5E5">something about your elements you</font><font color="#CCCCCC"> can</font>

68
00:03:43,190 --> 00:03:49,669
<font color="#E5E5E5">use very special sorting algorithms like</font>

69
00:03:46,760 --> 00:03:54,698
radix sort<font color="#CCCCCC"> which can run</font><font color="#E5E5E5"> in linear time</font>

70
00:03:49,669 --> 00:03:57,440
<font color="#CCCCCC">so you implement it you benchmark it and</font>

71
00:03:54,699 --> 00:03:59,780
the first benchmark<font color="#E5E5E5"> is quite reasonable</font>

72
00:03:57,440 --> 00:04:03,379
so depending on the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> elements</font>

73
00:03:59,780 --> 00:04:06,379
<font color="#E5E5E5">you are sorting you you count the number</font>

74
00:04:03,379 --> 00:04:10,790
<font color="#CCCCCC">of instructions per item</font><font color="#E5E5E5"> and you get</font>

75
00:04:06,379 --> 00:04:17,389
what you expect the the<font color="#E5E5E5"> the quicksort is</font>

76
00:04:10,790 --> 00:04:21,019
initially slower but you know has a

77
00:04:17,389 --> 00:04:26,030
lower number<font color="#E5E5E5"> or has</font><font color="#CCCCCC"> a has a lower number</font>

78
00:04:21,019 --> 00:04:28,880
<font color="#E5E5E5">of instructions per item but</font>

79
00:04:26,030 --> 00:04:31,039
then of<font color="#E5E5E5"> course the</font><font color="#CCCCCC"> Alex</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> Duane's</font>

80
00:04:28,880 --> 00:04:33,110
because<font color="#E5E5E5"> it's linear</font><font color="#CCCCCC"> algorithms</font><font color="#E5E5E5"> nothing</font>

81
00:04:31,040 --> 00:04:35,110
<font color="#E5E5E5">so much surprising that that's what you</font>

82
00:04:33,110 --> 00:04:38,450
<font color="#CCCCCC">expect from the theoretical</font>

83
00:04:35,110 --> 00:04:39,260
computational complexity however if you

84
00:04:38,450 --> 00:04:42,080
have just<font color="#E5E5E5"> a straightforward</font>

85
00:04:39,260 --> 00:04:45,289
implementation of<font color="#E5E5E5"> these algorithms</font><font color="#CCCCCC"> you</font>

86
00:04:42,080 --> 00:04:47,659
might get into<font color="#CCCCCC"> this so</font><font color="#E5E5E5"> you are now not</font>

87
00:04:45,290 --> 00:04:49,580
comparing the number<font color="#E5E5E5"> of instructions but</font>

88
00:04:47,660 --> 00:04:52,760
the actual<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of CPU cycles that</font>

89
00:04:49,580 --> 00:04:55,820
needs to<font color="#E5E5E5"> be taken per</font><font color="#CCCCCC"> pair one element</font>

90
00:04:52,760 --> 00:04:58,370
<font color="#E5E5E5">by the by the implementation</font><font color="#CCCCCC"> of the</font>

91
00:04:55,820 --> 00:04:59,960
algorithm<font color="#CCCCCC"> and suddenly this</font><font color="#E5E5E5"> is a totally</font>

92
00:04:58,370 --> 00:05:03,980
<font color="#CCCCCC">different picture so</font><font color="#E5E5E5"> certainly the</font>

93
00:04:59,960 --> 00:05:04,729
linear algorithm is not winning<font color="#E5E5E5"> for some</font>

94
00:05:03,980 --> 00:05:08,960
reason

95
00:05:04,730 --> 00:05:12,710
so of course there is some not only<font color="#CCCCCC"> some</font>

96
00:05:08,960 --> 00:05:15,409
some additive constant which is hidden

97
00:05:12,710 --> 00:05:17,719
<font color="#E5E5E5">by the Big O notation but also some</font>

98
00:05:15,410 --> 00:05:22,550
<font color="#E5E5E5">obviously some multiplicative constant</font>

99
00:05:17,720 --> 00:05:24,320
that<font color="#E5E5E5"> is still beating beating</font><font color="#CCCCCC"> so where</font>

100
00:05:22,550 --> 00:05:27,050
the<font color="#E5E5E5"> quicksort is surprisingly still</font>

101
00:05:24,320 --> 00:05:29,409
<font color="#CCCCCC">beating the elixir and if you dig even</font>

102
00:05:27,050 --> 00:05:33,169
deeper<font color="#E5E5E5"> of course you can you can read</font>

103
00:05:29,410 --> 00:05:35,900
this textbook example yourself<font color="#E5E5E5"> you can</font>

104
00:05:33,169 --> 00:05:38,479
find out that the<font color="#E5E5E5"> issue is precisely the</font>

105
00:05:35,900 --> 00:05:42,979
incorrect or unofficial use of the

106
00:05:38,479 --> 00:05:45,039
caches<font color="#CCCCCC"> so the way how</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know normally</font>

107
00:05:42,979 --> 00:05:48,020
<font color="#E5E5E5">in a very straightforward</font>

108
00:05:45,039 --> 00:05:51,430
<font color="#E5E5E5">straightforward way implement those two</font>

109
00:05:48,020 --> 00:05:53,870
algorithms<font color="#E5E5E5"> makes the quicksort much more</font>

110
00:05:51,430 --> 00:05:57,500
cash friendly than the radix sort

111
00:05:53,870 --> 00:06:00,410
<font color="#E5E5E5">so although radix sort shoot</font>

112
00:05:57,500 --> 00:06:03,380
beats quicksort<font color="#E5E5E5"> it probably won't</font>

113
00:06:00,410 --> 00:06:06,200
because<font color="#E5E5E5"> you don't use the spatial and</font>

114
00:06:03,380 --> 00:06:09,440
temporal locality of<font color="#E5E5E5"> the data you</font><font color="#CCCCCC"> are</font>

115
00:06:06,200 --> 00:06:12,050
accessing properly thus the caches

116
00:06:09,440 --> 00:06:14,450
cannot help you does you have<font color="#E5E5E5"> to end up</font>

117
00:06:12,050 --> 00:06:16,669
reading from from the memory<font color="#E5E5E5"> and the</font>

118
00:06:14,450 --> 00:06:19,640
memory barrier I<font color="#E5E5E5"> have spoken about</font>

119
00:06:16,669 --> 00:06:21,849
<font color="#E5E5E5">deepening in the beginning kills you so</font>

120
00:06:19,640 --> 00:06:25,969
of course one way to do<font color="#E5E5E5"> it is to</font>

121
00:06:21,850 --> 00:06:30,900
implement your algorithm in a cache

122
00:06:25,970 --> 00:06:33,000
aware way and make it<font color="#E5E5E5"> cache friendly</font>

123
00:06:30,900 --> 00:06:35,429
<font color="#E5E5E5">okay I will stop here</font><font color="#CCCCCC"> I I could</font>

124
00:06:33,000 --> 00:06:37,560
<font color="#E5E5E5">obviously talk about this</font><font color="#CCCCCC"> topic for four</font>

125
00:06:35,430 --> 00:06:39,860
hours but let's switch to<font color="#CCCCCC"> something</font>

126
00:06:37,560 --> 00:06:42,960
<font color="#CCCCCC">different just just one</font><font color="#E5E5E5"> small</font>

127
00:06:39,860 --> 00:06:45,200
<font color="#E5E5E5">observation that that you should take</font>

128
00:06:42,960 --> 00:06:50,039
home if nothing else from this<font color="#CCCCCC"> talk of</font>

129
00:06:45,200 --> 00:06:52,950
course<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> consider</font><font color="#E5E5E5"> accessing memory</font>

130
00:06:50,040 --> 00:06:56,670
<font color="#CCCCCC">as a constant operation as an operation</font>

131
00:06:52,950 --> 00:06:59,539
with constant complexity but it so it's

132
00:06:56,670 --> 00:07:03,440
true that random access to the memory

133
00:06:59,540 --> 00:07:08,360
<font color="#CCCCCC">takes a constant</font><font color="#E5E5E5"> time of operations one</font>

134
00:07:03,440 --> 00:07:11,070
<font color="#E5E5E5">but it does not necessarily take one</font><font color="#CCCCCC"> a</font>

135
00:07:08,360 --> 00:07:14,880
constant number<font color="#CCCCCC"> of time units</font><font color="#E5E5E5"> precisely</font>

136
00:07:11,070 --> 00:07:18,420
because of you have because of<font color="#E5E5E5"> this disk</font>

137
00:07:14,880 --> 00:07:21,090
<font color="#E5E5E5">caching</font><font color="#CCCCCC"> effects which can can make your</font>

138
00:07:18,420 --> 00:07:23,220
algorithm running<font color="#CCCCCC"> ten or 100 times</font>

139
00:07:21,090 --> 00:07:25,770
slower<font color="#CCCCCC"> if you don't fit into the cache</font>

140
00:07:23,220 --> 00:07:28,980
<font color="#CCCCCC">so this is this</font><font color="#E5E5E5"> is not true actually</font>

141
00:07:25,770 --> 00:07:33,260
<font color="#CCCCCC">what</font><font color="#E5E5E5"> you should consider is that the</font>

142
00:07:28,980 --> 00:07:36,360
memory access into today's<font color="#CCCCCC"> Ram is</font>

143
00:07:33,260 --> 00:07:39,030
something like<font color="#CCCCCC"> Beco</font><font color="#E5E5E5"> square root of n</font>

144
00:07:36,360 --> 00:07:41,430
where<font color="#CCCCCC"> d</font><font color="#E5E5E5"> n is the size of your</font><font color="#CCCCCC"> data or</font>

145
00:07:39,030 --> 00:07:44,039
<font color="#E5E5E5">your working set so generally speaking</font>

146
00:07:41,430 --> 00:07:46,830
the<font color="#E5E5E5"> more data your algorithm is working</font>

147
00:07:44,040 --> 00:07:48,600
<font color="#CCCCCC">with the slower</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> obviously</font>

148
00:07:46,830 --> 00:07:51,030
because you don't you cannot fit all the

149
00:07:48,600 --> 00:07:55,920
data into your fast quick caches you

150
00:07:51,030 --> 00:07:57,989
have to access and there are some ways

151
00:07:55,920 --> 00:08:00,240
or proposed ways how<font color="#E5E5E5"> to break this</font>

152
00:07:57,990 --> 00:08:04,410
memory barrier how to get rid of<font color="#E5E5E5"> this</font>

153
00:08:00,240 --> 00:08:06,780
<font color="#E5E5E5">this troublesome issue because of course</font>

154
00:08:04,410 --> 00:08:09,450
it is troublesome<font color="#CCCCCC"> it violates our</font>

155
00:08:06,780 --> 00:08:11,789
primary assumption that accessing a

156
00:08:09,450 --> 00:08:14,450
random piece of memory<font color="#CCCCCC"> should be should</font>

157
00:08:11,790 --> 00:08:17,130
take always the same constant time and

158
00:08:14,450 --> 00:08:20,820
one of them is somehow

159
00:08:17,130 --> 00:08:23,820
<font color="#E5E5E5">rethinking the entire hardware</font>

160
00:08:20,820 --> 00:08:26,610
architecture of our<font color="#E5E5E5"> machines</font><font color="#CCCCCC"> of course</font>

161
00:08:23,820 --> 00:08:29,730
<font color="#CCCCCC">if I show you this basic picture</font><font color="#E5E5E5"> of the</font>

162
00:08:26,610 --> 00:08:32,730
point<font color="#E5E5E5"> noi'm an architecture it's not</font>

163
00:08:29,730 --> 00:08:35,340
completely<font color="#E5E5E5"> fitting we have more complex</font>

164
00:08:32,730 --> 00:08:39,270
machines than<font color="#CCCCCC"> there were built and</font>

165
00:08:35,340 --> 00:08:40,510
designed<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 1940s more CPU was not just</font>

166
00:08:39,270 --> 00:08:44,860
one

167
00:08:40,510 --> 00:08:47,170
you our<font color="#E5E5E5"> peripherals are usually combined</font>

168
00:08:44,860 --> 00:08:50,050
they<font color="#E5E5E5"> are not strictly input and output</font>

169
00:08:47,170 --> 00:08:52,780
they can be input output<font color="#E5E5E5"> and so on but</font>

170
00:08:50,050 --> 00:08:54,459
generally<font color="#CCCCCC"> speaking</font><font color="#E5E5E5"> our machines are</font>

171
00:08:52,780 --> 00:08:58,120
<font color="#CCCCCC">still for nine months so there is this</font>

172
00:08:54,460 --> 00:09:00,670
clear separation<font color="#E5E5E5"> between memory between</font>

173
00:08:58,120 --> 00:09:02,770
<font color="#CCCCCC">a computing unit that does some</font>

174
00:09:00,670 --> 00:09:05,829
calculations<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the data and</font><font color="#E5E5E5"> between</font>

175
00:09:02,770 --> 00:09:10,600
let's say persistent peripherals that

176
00:09:05,830 --> 00:09:12,940
store the data<font color="#E5E5E5"> persistently and this</font>

177
00:09:10,600 --> 00:09:17,410
could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> changed so for</font><font color="#E5E5E5"> example you</font>

178
00:09:12,940 --> 00:09:21,310
might have<font color="#E5E5E5"> heard about</font><font color="#CCCCCC"> some new emerging</font>

179
00:09:17,410 --> 00:09:25,810
memory technologies<font color="#E5E5E5"> that try</font><font color="#CCCCCC"> to solve</font>

180
00:09:21,310 --> 00:09:29,229
the problem of<font color="#E5E5E5"> the memory barrier I have</font>

181
00:09:25,810 --> 00:09:34,599
spoken so that they strive to be as fast

182
00:09:29,230 --> 00:09:37,720
as we<font color="#E5E5E5"> can make the CPUs and ideally also</font>

183
00:09:34,600 --> 00:09:39,460
combine the split between<font color="#E5E5E5"> the persistent</font>

184
00:09:37,720 --> 00:09:41,920
and non-persistent or volatile

185
00:09:39,460 --> 00:09:45,490
non-volatile memory so to have a

186
00:09:41,920 --> 00:09:48,849
<font color="#E5E5E5">persistent</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> that would be as fast</font>

187
00:09:45,490 --> 00:09:50,560
as<font color="#E5E5E5"> the CPUs</font><font color="#CCCCCC"> that would obviously solve</font>

188
00:09:48,850 --> 00:09:53,200
all our problems

189
00:09:50,560 --> 00:09:55,089
it<font color="#E5E5E5"> would it would also reshape the way</font>

190
00:09:53,200 --> 00:09:57,460
how our<font color="#E5E5E5"> software is being built so if</font>

191
00:09:55,090 --> 00:10:00,880
you have heard about projects like the

192
00:09:57,460 --> 00:10:03,280
machine from HP or if you would listen

193
00:10:00,880 --> 00:10:08,040
<font color="#E5E5E5">to the parallel talk that is currently</font>

194
00:10:03,280 --> 00:10:11,290
running<font color="#CCCCCC"> by time-proven</font>

195
00:10:08,040 --> 00:10:13,150
he might he might tell you some

196
00:10:11,290 --> 00:10:16,380
<font color="#E5E5E5">historical perspective</font><font color="#CCCCCC"> - to this</font>

197
00:10:13,150 --> 00:10:19,510
different computer architectures

198
00:10:16,380 --> 00:10:21,910
basically<font color="#E5E5E5"> single level memory or</font>

199
00:10:19,510 --> 00:10:24,370
<font color="#E5E5E5">universal memory</font><font color="#CCCCCC"> I have listed some of</font>

200
00:10:21,910 --> 00:10:27,250
the of the currently<font color="#E5E5E5"> being developed</font>

201
00:10:24,370 --> 00:10:29,050
technologies that<font color="#E5E5E5"> try to try to make</font>

202
00:10:27,250 --> 00:10:32,140
this work

203
00:10:29,050 --> 00:10:34,780
again as<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see probably by looking</font>

204
00:10:32,140 --> 00:10:36,939
on<font color="#E5E5E5"> your smartphone smartphone by working</font>

205
00:10:34,780 --> 00:10:41,740
on<font color="#E5E5E5"> your laptops we don't have these</font>

206
00:10:36,940 --> 00:10:44,110
technologies<font color="#E5E5E5"> in them yet so they are</font>

207
00:10:41,740 --> 00:10:48,220
<font color="#E5E5E5">promising they might there might help or</font>

208
00:10:44,110 --> 00:10:50,800
<font color="#CCCCCC">our problems</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> near future</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> but</font>

209
00:10:48,220 --> 00:10:52,290
they are not doing<font color="#CCCCCC"> it yet</font><font color="#E5E5E5"> so I won't be</font>

210
00:10:50,800 --> 00:10:54,660
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about this either</font>

211
00:10:52,290 --> 00:10:58,498
so let me<font color="#E5E5E5"> switch to pick for the third</font>

212
00:10:54,660 --> 00:11:03,059
time and let me speak<font color="#E5E5E5"> about let's say</font>

213
00:10:58,499 --> 00:11:07,559
<font color="#E5E5E5">more evolutionary</font><font color="#CCCCCC"> less</font><font color="#E5E5E5"> radical solutions</font>

214
00:11:03,059 --> 00:11:10,858
to do the problem of the memory barrier

215
00:11:07,559 --> 00:11:13,350
and this is called<font color="#E5E5E5"> near data processing</font>

216
00:11:10,859 --> 00:11:17,399
so reshaping the architecture of the

217
00:11:13,350 --> 00:11:20,689
computers<font color="#CCCCCC"> by moving the computations or</font>

218
00:11:17,399 --> 00:11:23,699
some parts of the computations<font color="#E5E5E5"> closer to</font>

219
00:11:20,689 --> 00:11:27,299
where the data actually<font color="#CCCCCC"> is</font><font color="#E5E5E5"> so for</font>

220
00:11:23,699 --> 00:11:29,248
example moving<font color="#E5E5E5"> the computation partially</font>

221
00:11:27,299 --> 00:11:31,379
to<font color="#E5E5E5"> the memory or to the storage of</font>

222
00:11:29,249 --> 00:11:33,359
<font color="#E5E5E5">course again this is not</font><font color="#CCCCCC"> a completely</font>

223
00:11:31,379 --> 00:11:35,429
<font color="#CCCCCC">new idea that's why this is an</font>

224
00:11:33,359 --> 00:11:39,449
evolutionary not a revolutionary

225
00:11:35,429 --> 00:11:42,358
<font color="#E5E5E5">approach because partial</font><font color="#CCCCCC"> locality</font><font color="#E5E5E5"> or</font>

226
00:11:39,449 --> 00:11:45,149
<font color="#E5E5E5">spatial locality of data is something</font>

227
00:11:42,359 --> 00:11:47,369
<font color="#CCCCCC">that we have been using in all the other</font>

228
00:11:45,149 --> 00:11:49,139
approaches for a long time and for

229
00:11:47,369 --> 00:11:51,600
<font color="#E5E5E5">example GPUs are basically doing the</font>

230
00:11:49,139 --> 00:11:54,359
<font color="#CCCCCC">same for the past 15 years so so you</font><font color="#E5E5E5"> are</font>

231
00:11:51,600 --> 00:11:57,899
having very specialized<font color="#E5E5E5"> circuit</font><font color="#CCCCCC"> or a</font>

232
00:11:54,359 --> 00:12:01,669
<font color="#CCCCCC">very specialized processors that work on</font>

233
00:11:57,899 --> 00:12:05,970
the data close<font color="#E5E5E5"> store close to</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> and</font>

234
00:12:01,669 --> 00:12:09,059
not having not not bearing the the

235
00:12:05,970 --> 00:12:12,329
<font color="#E5E5E5">primary CPU the general CPU with with</font>

236
00:12:09,059 --> 00:12:14,759
these tasks so it's about<font color="#E5E5E5"> breaking the</font>

237
00:12:12,329 --> 00:12:17,099
monopoly of the<font color="#E5E5E5"> of the primary CPU on</font>

238
00:12:14,759 --> 00:12:19,919
working on<font color="#E5E5E5"> the data our CPUs are fast</font>

239
00:12:17,100 --> 00:12:22,109
but<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are also power-hungry</font><font color="#E5E5E5"> so if you</font>

240
00:12:19,919 --> 00:12:25,019
can have a dedicated circuitry like<font color="#E5E5E5"> that</font>

241
00:12:22,109 --> 00:12:28,429
that can solve power part of<font color="#E5E5E5"> the problem</font>

242
00:12:25,019 --> 00:12:31,649
<font color="#CCCCCC">part of</font><font color="#E5E5E5"> the data processing problem</font>

243
00:12:28,429 --> 00:12:34,439
<font color="#CCCCCC">closer to</font><font color="#E5E5E5"> the data</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can save on</font><font color="#CCCCCC"> from</font>

244
00:12:31,649 --> 00:12:36,449
performance<font color="#E5E5E5"> and you can potentially also</font>

245
00:12:34,439 --> 00:12:38,368
<font color="#E5E5E5">save on the energy because you don't</font>

246
00:12:36,449 --> 00:12:42,118
have you have less data to move around

247
00:12:38,369 --> 00:12:45,689
<font color="#CCCCCC">the machine this has been</font><font color="#E5E5E5"> shown</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

248
00:12:42,119 --> 00:12:48,089
<font color="#CCCCCC">true I</font><font color="#E5E5E5"> mean I'm really not just just</font>

249
00:12:45,689 --> 00:12:51,289
inventing this<font color="#E5E5E5"> stuff you can read</font>

250
00:12:48,089 --> 00:12:56,359
<font color="#E5E5E5">academic publications from from</font><font color="#CCCCCC"> people</font>

251
00:12:51,289 --> 00:13:00,239
from some<font color="#CCCCCC"> songs for example and others</font>

252
00:12:56,359 --> 00:13:03,809
who really<font color="#E5E5E5"> show that this near data</font>

253
00:13:00,239 --> 00:13:06,470
processing approach<font color="#E5E5E5"> can work in specific</font>

254
00:13:03,809 --> 00:13:10,839
cases<font color="#E5E5E5"> so for example this is one</font>

255
00:13:06,470 --> 00:13:15,350
that shows the new data processing<font color="#E5E5E5"> on on</font>

256
00:13:10,839 --> 00:13:20,480
on SSD storages<font color="#E5E5E5"> or SSD controllers where</font>

257
00:13:15,350 --> 00:13:23,990
you can<font color="#E5E5E5"> really offload part of let's say</font>

258
00:13:20,480 --> 00:13:28,190
database queries or big data queries on

259
00:13:23,990 --> 00:13:32,480
to the<font color="#E5E5E5"> SSD controller itself and it will</font>

260
00:13:28,190 --> 00:13:35,029
<font color="#CCCCCC">perform better immediately you can say</font>

261
00:13:32,480 --> 00:13:37,490
<font color="#E5E5E5">okay this might</font><font color="#CCCCCC"> not work in all cases</font><font color="#E5E5E5"> of</font>

262
00:13:35,029 --> 00:13:39,970
course<font color="#E5E5E5"> not</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> it won't work in case</font>

263
00:13:37,490 --> 00:13:42,110
where the<font color="#E5E5E5"> data processing is</font>

264
00:13:39,970 --> 00:13:44,720
computational have a computational I

265
00:13:42,110 --> 00:13:46,910
have a in that case the<font color="#E5E5E5"> the poor</font><font color="#CCCCCC"> arm</font>

266
00:13:44,720 --> 00:13:51,260
cores that are<font color="#E5E5E5"> on the controllers cannot</font>

267
00:13:46,910 --> 00:13:53,449
possibly beat the beef<font color="#E5E5E5"> a CPU multi-core</font>

268
00:13:51,260 --> 00:13:56,510
CPU which you have in the center<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your</font>

269
00:13:53,450 --> 00:13:58,640
computer architecture<font color="#E5E5E5"> but think about a</font>

270
00:13:56,510 --> 00:14:01,730
<font color="#E5E5E5">different scenario think about when your</font>

271
00:13:58,640 --> 00:14:05,120
CPU is currently<font color="#CCCCCC"> already on the road so</font>

272
00:14:01,730 --> 00:14:07,130
it's loaded to<font color="#CCCCCC"> 90% or</font><font color="#E5E5E5"> whatever then that</font>

273
00:14:05,120 --> 00:14:10,640
<font color="#CCCCCC">little help that</font><font color="#E5E5E5"> little push</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

274
00:14:07,130 --> 00:14:12,290
can get from the from the from<font color="#E5E5E5"> from the</font>

275
00:14:10,640 --> 00:14:14,630
embedded cores in<font color="#E5E5E5"> the controllers</font>

276
00:14:12,290 --> 00:14:17,060
<font color="#E5E5E5">although they are not so fast</font><font color="#CCCCCC"> can still</font>

277
00:14:14,630 --> 00:14:18,770
help you<font color="#CCCCCC"> to think about</font><font color="#E5E5E5"> them as</font>

278
00:14:17,060 --> 00:14:22,279
coprocessors<font color="#E5E5E5"> as an additional</font>

279
00:14:18,770 --> 00:14:25,520
computational units that<font color="#E5E5E5"> will get that</font>

280
00:14:22,279 --> 00:14:27,950
might get you more of<font color="#E5E5E5"> computational</font>

281
00:14:25,520 --> 00:14:31,459
power<font color="#E5E5E5"> so that that really works and</font>

282
00:14:27,950 --> 00:14:34,610
about<font color="#E5E5E5"> the other other benefits the</font>

283
00:14:31,459 --> 00:14:37,130
energy consumption<font color="#CCCCCC"> yes this also has</font>

284
00:14:34,610 --> 00:14:40,570
been<font color="#CCCCCC"> shown</font><font color="#E5E5E5"> to help because again</font>

285
00:14:37,130 --> 00:14:44,529
depending<font color="#E5E5E5"> on the scenario</font><font color="#CCCCCC"> you can just</font>

286
00:14:40,570 --> 00:14:50,470
save the actual energy<font color="#CCCCCC"> I mean I mean</font><font color="#E5E5E5"> in</font>

287
00:14:44,529 --> 00:14:52,670
in watts<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that you spend when</font>

288
00:14:50,470 --> 00:14:54,440
<font color="#CCCCCC">pre-computing something or</font><font color="#E5E5E5"> prevent</font>

289
00:14:52,670 --> 00:14:57,800
<font color="#E5E5E5">filtering something close</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> data</font>

290
00:14:54,440 --> 00:15:01,220
<font color="#E5E5E5">compared to the usual case where you</font>

291
00:14:57,800 --> 00:15:04,790
just blindly<font color="#E5E5E5"> move the data to</font><font color="#CCCCCC"> the to the</font>

292
00:15:01,220 --> 00:15:07,610
<font color="#E5E5E5">power-hungry beef a primary CPU where</font>

293
00:15:04,790 --> 00:15:11,420
half<font color="#E5E5E5"> of the data will be thrown away</font>

294
00:15:07,610 --> 00:15:14,600
anyway or maybe even<font color="#E5E5E5"> more</font><font color="#CCCCCC"> so of course</font>

295
00:15:11,420 --> 00:15:16,939
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very important it's it's it's in</font>

296
00:15:14,600 --> 00:15:19,279
<font color="#CCCCCC">its</font><font color="#E5E5E5"> scenario specific or workload</font>

297
00:15:16,940 --> 00:15:21,949
specific and the the best

298
00:15:19,279 --> 00:15:25,759
way or the<font color="#E5E5E5"> best case where this really</font>

299
00:15:21,949 --> 00:15:29,420
<font color="#E5E5E5">works is when</font><font color="#CCCCCC"> you have a large filtering</font>

300
00:15:25,759 --> 00:15:31,430
ratio or a large selectivity<font color="#CCCCCC"> so you you</font>

301
00:15:29,420 --> 00:15:34,579
<font color="#E5E5E5">save on moving the data that you would</font>

302
00:15:31,430 --> 00:15:37,550
filter<font color="#E5E5E5"> out anyway</font><font color="#CCCCCC"> or where you can</font><font color="#E5E5E5"> do</font>

303
00:15:34,579 --> 00:15:39,769
some some let's<font color="#E5E5E5"> say very basic pre</font>

304
00:15:37,550 --> 00:15:42,859
computations<font color="#CCCCCC"> that might help you for the</font>

305
00:15:39,769 --> 00:15:44,959
more heavy ones<font color="#E5E5E5"> and these are where the</font>

306
00:15:42,860 --> 00:15:49,430
<font color="#E5E5E5">two branches</font><font color="#CCCCCC"> of new data processing</font>

307
00:15:44,959 --> 00:15:52,459
basically<font color="#CCCCCC"> work so first is the</font><font color="#E5E5E5"> new data</font>

308
00:15:49,430 --> 00:15:58,489
processing in memory<font color="#E5E5E5"> so really on the</font>

309
00:15:52,459 --> 00:16:00,050
DRAM chips<font color="#CCCCCC"> where of course this is</font><font color="#E5E5E5"> the</font>

310
00:15:58,490 --> 00:16:02,600
<font color="#CCCCCC">problem we have started</font><font color="#E5E5E5"> with in the</font>

311
00:16:00,050 --> 00:16:07,069
beginning so the DRAM is is slower than

312
00:16:02,600 --> 00:16:11,420
<font color="#E5E5E5">then then the CPU is it the circuitry</font>

313
00:16:07,069 --> 00:16:15,920
cannot be created<font color="#CCCCCC"> to operate on such a</font>

314
00:16:11,420 --> 00:16:18,378
speed as the CPU<font color="#CCCCCC"> cpus do and if you</font>

315
00:16:15,920 --> 00:16:20,479
would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to do it or if you if you</font>

316
00:16:18,379 --> 00:16:24,519
<font color="#E5E5E5">are</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> do it like</font><font color="#CCCCCC"> using static Ram</font>

317
00:16:20,480 --> 00:16:28,100
then it's much more complex<font color="#E5E5E5"> and costly</font>

318
00:16:24,519 --> 00:16:31,129
but but the DRAM chips have still a<font color="#E5E5E5"> lot</font>

319
00:16:28,100 --> 00:16:35,360
<font color="#CCCCCC">of parallelism</font><font color="#E5E5E5"> in them so imagine a</font>

320
00:16:31,129 --> 00:16:37,309
<font color="#E5E5E5">regular</font><font color="#CCCCCC"> DIMM which you put into into</font>

321
00:16:35,360 --> 00:16:40,089
<font color="#E5E5E5">your machines it has multiple multiple</font>

322
00:16:37,309 --> 00:16:43,459
chips these multiple<font color="#E5E5E5"> chips have</font>

323
00:16:40,089 --> 00:16:46,189
independent<font color="#E5E5E5"> memory matrices in them this</font>

324
00:16:43,459 --> 00:16:50,660
<font color="#CCCCCC">is a crude picture</font><font color="#E5E5E5"> how how the DRAM</font>

325
00:16:46,189 --> 00:16:53,329
might might work<font color="#CCCCCC"> so each</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> you need</font>

326
00:16:50,660 --> 00:16:57,110
to<font color="#CCCCCC"> access some</font><font color="#E5E5E5"> word in this memory the</font>

327
00:16:53,329 --> 00:17:00,459
DRAM controller has<font color="#CCCCCC"> to program the the</font>

328
00:16:57,110 --> 00:17:05,000
memory matrix to fetch a relatively long

329
00:17:00,459 --> 00:17:09,220
<font color="#CCCCCC">Hardware words</font><font color="#E5E5E5"> maybe 256 bits maybe even</font>

330
00:17:05,000 --> 00:17:13,250
even larger<font color="#CCCCCC"> and then you have to</font>

331
00:17:09,220 --> 00:17:15,319
<font color="#E5E5E5">pre-filter or filter the the smaller</font>

332
00:17:13,250 --> 00:17:18,859
units that you<font color="#E5E5E5"> are actually trying to</font>

333
00:17:15,319 --> 00:17:21,289
Excel access<font color="#CCCCCC"> and of course even with the</font>

334
00:17:18,859 --> 00:17:24,500
current<font color="#E5E5E5"> caching approaches you do some</font>

335
00:17:21,289 --> 00:17:26,809
optimizations<font color="#CCCCCC"> like you usually you</font><font color="#E5E5E5"> are</font>

336
00:17:24,500 --> 00:17:29,090
not interested in<font color="#E5E5E5"> individual words but</font>

337
00:17:26,809 --> 00:17:32,460
you are<font color="#E5E5E5"> interested in entire cache lines</font>

338
00:17:29,090 --> 00:17:34,959
<font color="#CCCCCC">so that that helps you</font>

339
00:17:32,460 --> 00:17:37,210
pre-populating the<font color="#E5E5E5"> cash</font><font color="#CCCCCC"> you might do</font>

340
00:17:34,960 --> 00:17:40,179
<font color="#E5E5E5">some prefetching you might do things</font>

341
00:17:37,210 --> 00:17:43,270
like<font color="#E5E5E5"> I don't know</font><font color="#CCCCCC"> critical word first</font>

342
00:17:40,179 --> 00:17:45,000
which will fetch you<font color="#CCCCCC"> the</font><font color="#E5E5E5"> bids that</font><font color="#CCCCCC"> you</font>

343
00:17:43,270 --> 00:17:48,070
are really interested<font color="#E5E5E5"> in and then</font>

344
00:17:45,000 --> 00:17:50,830
prefetch<font color="#E5E5E5"> the rest of the of the hardware</font>

345
00:17:48,070 --> 00:17:52,510
<font color="#E5E5E5">war to the</font><font color="#CCCCCC"> cache and so on</font><font color="#E5E5E5"> but I mean</font>

346
00:17:50,830 --> 00:17:55,379
you can go further<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> imagine that</font>

347
00:17:52,510 --> 00:17:58,360
<font color="#E5E5E5">since you have</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> this level</font><font color="#CCCCCC"> of</font>

348
00:17:55,380 --> 00:18:02,260
possible parallelism there<font color="#E5E5E5"> you can you</font>

349
00:17:58,360 --> 00:18:05,020
can extend this this gating logic to do

350
00:18:02,260 --> 00:18:09,158
some simple bitwise filtering so

351
00:18:05,020 --> 00:18:10,840
removing<font color="#E5E5E5"> the data which do not follow</font>

352
00:18:09,159 --> 00:18:13,630
the pattern you<font color="#CCCCCC"> are interested in or</font>

353
00:18:10,840 --> 00:18:16,750
making some very crude bitwise

354
00:18:13,630 --> 00:18:20,200
computations<font color="#E5E5E5"> so this won't slow it in</font>

355
00:18:16,750 --> 00:18:21,880
any way and again it might save you from

356
00:18:20,200 --> 00:18:27,000
moving<font color="#E5E5E5"> the data that you would throw</font>

357
00:18:21,880 --> 00:18:31,059
away later<font color="#E5E5E5"> on still so this is one thing</font>

358
00:18:27,000 --> 00:18:33,179
<font color="#E5E5E5">one branch of new data processing</font><font color="#CCCCCC"> I'm</font>

359
00:18:31,059 --> 00:18:35,980
currently not<font color="#E5E5E5"> working on this because</font>

360
00:18:33,179 --> 00:18:39,070
<font color="#E5E5E5">Huawei unfortunately does not produce</font>

361
00:18:35,980 --> 00:18:43,299
<font color="#CCCCCC">its D gram chips so we have we are let</font>

362
00:18:39,070 --> 00:18:45,250
me<font color="#CCCCCC"> limit it here but I do work on the</font>

363
00:18:43,299 --> 00:18:48,158
other branch which is<font color="#E5E5E5"> in storage</font>

364
00:18:45,250 --> 00:18:50,890
processing<font color="#E5E5E5"> so applying very similar</font>

365
00:18:48,159 --> 00:18:53,640
principles on on the the persistent

366
00:18:50,890 --> 00:18:57,760
memory<font color="#E5E5E5"> on on SSD chips on flash memory</font>

367
00:18:53,640 --> 00:19:00,309
<font color="#CCCCCC">where you have I mean</font><font color="#E5E5E5"> you can use the</font>

368
00:18:57,760 --> 00:19:02,950
same principle you can you can benefit

369
00:19:00,309 --> 00:19:05,139
from<font color="#E5E5E5"> the fact that that</font><font color="#CCCCCC"> you can you have</font>

370
00:19:02,950 --> 00:19:08,770
several flash chips that<font color="#CCCCCC"> you can access</font>

371
00:19:05,140 --> 00:19:12,909
in parallel<font color="#CCCCCC"> these chips themselves have</font>

372
00:19:08,770 --> 00:19:15,149
a<font color="#E5E5E5"> possibility</font><font color="#CCCCCC"> to do to do another</font><font color="#E5E5E5"> what's</font>

373
00:19:12,909 --> 00:19:18,070
a level of parallelism do to do to<font color="#CCCCCC"> the</font>

374
00:19:15,149 --> 00:19:24,309
two<font color="#E5E5E5"> independent</font><font color="#CCCCCC"> channels and ways they</font>

375
00:19:18,070 --> 00:19:26,070
<font color="#CCCCCC">provide and also</font><font color="#E5E5E5"> the SSD controllers do</font>

376
00:19:24,309 --> 00:19:29,139
you have more computational power

377
00:19:26,070 --> 00:19:30,760
<font color="#CCCCCC">inherently</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> than the DRAM chips</font>

378
00:19:29,140 --> 00:19:32,830
<font color="#E5E5E5">because you already need some</font>

379
00:19:30,760 --> 00:19:35,549
computational power there from the

380
00:19:32,830 --> 00:19:37,750
beginning<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to do some some</font>

381
00:19:35,549 --> 00:19:39,970
flashlights or translation you<font color="#CCCCCC"> have a</font>

382
00:19:37,750 --> 00:19:41,559
<font color="#E5E5E5">suppressed</font><font color="#CCCCCC"> flushed registration where</font>

383
00:19:39,970 --> 00:19:44,130
<font color="#E5E5E5">you have to do the garbage collecting</font>

384
00:19:41,559 --> 00:19:48,090
due to

385
00:19:44,130 --> 00:19:53,740
we're<font color="#E5E5E5"> level</font><font color="#CCCCCC"> rank so</font><font color="#E5E5E5"> so it's not not</font>

386
00:19:48,090 --> 00:19:57,159
surprising to<font color="#E5E5E5"> have oh no let's say above</font>

387
00:19:53,740 --> 00:20:00,280
<font color="#E5E5E5">consumer slightly on the border between</font>

388
00:19:57,160 --> 00:20:04,410
consumer<font color="#CCCCCC"> and enterprise flight</font>

389
00:20:00,280 --> 00:20:09,790
controllers let's say an<font color="#CCCCCC"> eight-core arm</font>

390
00:20:04,410 --> 00:20:11,890
CPU<font color="#E5E5E5"> so this already provides you with</font>

391
00:20:09,790 --> 00:20:17,170
more possibilities<font color="#E5E5E5"> than doing just</font><font color="#CCCCCC"> very</font>

392
00:20:11,890 --> 00:20:22,900
simple static filtering and we have our

393
00:20:17,170 --> 00:20:25,660
<font color="#E5E5E5">own prototype where we try to test and</font>

394
00:20:22,900 --> 00:20:30,160
benchmark these ideas<font color="#CCCCCC"> this should be</font>

395
00:20:25,660 --> 00:20:32,740
open sourced probably this<font color="#E5E5E5"> year so you</font>

396
00:20:30,160 --> 00:20:34,900
will you<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to to use</font><font color="#CCCCCC"> it</font>

397
00:20:32,740 --> 00:20:37,030
anybody will be<font color="#E5E5E5"> able to use it and we of</font>

398
00:20:34,900 --> 00:20:39,520
course base it on on a different<font color="#E5E5E5"> open</font>

399
00:20:37,030 --> 00:20:41,980
<font color="#E5E5E5">source project</font><font color="#CCCCCC"> so this is why I'm</font><font color="#E5E5E5"> going</font>

400
00:20:39,520 --> 00:20:44,260
<font color="#E5E5E5">to</font><font color="#CCCCCC"> spend a few minutes talking</font><font color="#E5E5E5"> about</font>

401
00:20:41,980 --> 00:20:46,060
this<font color="#E5E5E5"> so if you don't</font><font color="#CCCCCC"> know there is a</font>

402
00:20:44,260 --> 00:20:50,010
<font color="#E5E5E5">very nice open source project called</font>

403
00:20:46,060 --> 00:20:54,460
<font color="#E5E5E5">open SSD which is basically a GPL</font>

404
00:20:50,010 --> 00:20:57,370
implementation of an entire<font color="#CCCCCC"> se real</font>

405
00:20:54,460 --> 00:21:00,220
<font color="#CCCCCC">world SSD controller</font><font color="#E5E5E5"> so it has two parts</font>

406
00:20:57,370 --> 00:21:04,750
<font color="#CCCCCC">it has a</font><font color="#E5E5E5"> specification of the hardware</font>

407
00:21:00,220 --> 00:21:08,860
<font color="#E5E5E5">for for</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> FPGA</font><font color="#CCCCCC"> Xilinx platform and you</font>

408
00:21:04,750 --> 00:21:11,140
<font color="#E5E5E5">can actually release take real</font><font color="#CCCCCC"> man chips</font>

409
00:21:08,860 --> 00:21:14,350
<font color="#E5E5E5">to it and it has everything you would</font>

410
00:21:11,140 --> 00:21:18,310
<font color="#CCCCCC">expect like the own Finn interface and</font>

411
00:21:14,350 --> 00:21:20,740
the PCI<font color="#CCCCCC"> Express nvme interface for</font>

412
00:21:18,310 --> 00:21:25,450
communicating<font color="#E5E5E5"> with the host and it also</font>

413
00:21:20,740 --> 00:21:27,700
contains<font color="#E5E5E5"> firmware source which does all</font>

414
00:21:25,450 --> 00:21:29,770
<font color="#E5E5E5">the things I have</font><font color="#CCCCCC"> mentioned so the flash</font>

415
00:21:27,700 --> 00:21:33,240
transition layer garbage collecting and

416
00:21:29,770 --> 00:21:37,240
so on it<font color="#E5E5E5"> very nice project and we</font><font color="#CCCCCC"> are</font>

417
00:21:33,240 --> 00:21:40,600
extending<font color="#E5E5E5"> this project to provide some</font>

418
00:21:37,240 --> 00:21:43,210
generic<font color="#E5E5E5"> new data processing capabilities</font>

419
00:21:40,600 --> 00:21:45,909
on top of the and<font color="#CCCCCC"> vme protocol and</font><font color="#E5E5E5"> you</font>

420
00:21:43,210 --> 00:21:48,580
would also like<font color="#CCCCCC"> to push it eventually</font>

421
00:21:45,910 --> 00:21:51,550
into the<font color="#E5E5E5"> nvme specification so it</font>

422
00:21:48,580 --> 00:21:53,620
wouldn't<font color="#E5E5E5"> be like who have a vendor</font>

423
00:21:51,550 --> 00:21:56,280
specific thing but<font color="#E5E5E5"> it would be a</font>

424
00:21:53,620 --> 00:22:00,219
<font color="#CCCCCC">general-purpose</font>

425
00:21:56,280 --> 00:22:04,270
standard<font color="#E5E5E5"> so what we can do we</font><font color="#CCCCCC"> can or</font>

426
00:22:00,220 --> 00:22:07,140
<font color="#E5E5E5">would we should be able to do in the</font>

427
00:22:04,270 --> 00:22:12,330
course<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> year is to</font><font color="#E5E5E5"> upload some</font>

428
00:22:07,140 --> 00:22:14,980
data processing<font color="#E5E5E5"> go to the controller</font>

429
00:22:12,330 --> 00:22:17,649
<font color="#CCCCCC">possibly using</font><font color="#E5E5E5"> some safe</font><font color="#CCCCCC"> bytecode</font>

430
00:22:14,980 --> 00:22:20,740
because of course when<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> speaking</font>

431
00:22:17,650 --> 00:22:23,110
<font color="#E5E5E5">about offloading some code somewhere we</font>

432
00:22:20,740 --> 00:22:25,780
<font color="#E5E5E5">always have to think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the potential</font>

433
00:22:23,110 --> 00:22:28,750
security threats and<font color="#E5E5E5"> issues we don't</font>

434
00:22:25,780 --> 00:22:32,230
<font color="#CCCCCC">take this lightly this is connected to</font>

435
00:22:28,750 --> 00:22:34,120
the to<font color="#CCCCCC"> the data set so imagine that you</font>

436
00:22:32,230 --> 00:22:36,400
might have multiple tenants multiple

437
00:22:34,120 --> 00:22:40,030
<font color="#E5E5E5">independent users accessing the data</font>

438
00:22:36,400 --> 00:22:42,670
then you don't want them to trip trip

439
00:22:40,030 --> 00:22:46,149
under their shoes<font color="#E5E5E5"> so you want to be</font><font color="#CCCCCC"> able</font>

440
00:22:42,670 --> 00:22:48,640
<font color="#CCCCCC">to isolate</font><font color="#E5E5E5"> them as as is the kernel</font>

441
00:22:46,150 --> 00:22:53,500
would isolate them in case of<font color="#E5E5E5"> normal</font>

442
00:22:48,640 --> 00:22:55,810
data access<font color="#E5E5E5"> and then we have the NDP</font>

443
00:22:53,500 --> 00:22:58,540
read and write commands which are

444
00:22:55,810 --> 00:23:00,520
equivalent<font color="#E5E5E5"> to the usual</font><font color="#CCCCCC"> read and write</font>

445
00:22:58,540 --> 00:23:03,159
commands but with this<font color="#E5E5E5"> additional data</font>

446
00:23:00,520 --> 00:23:06,790
processing<font color="#CCCCCC"> so</font><font color="#E5E5E5"> filter so it could</font>

447
00:23:03,160 --> 00:23:11,500
potentially<font color="#E5E5E5"> do filtering or some</font>

448
00:23:06,790 --> 00:23:13,780
aggregation<font color="#E5E5E5"> or maybe other</font><font color="#CCCCCC"> things the</font>

449
00:23:11,500 --> 00:23:17,260
computational model<font color="#CCCCCC"> we are currently</font>

450
00:23:13,780 --> 00:23:19,750
<font color="#E5E5E5">using is</font><font color="#CCCCCC"> float based so of course we</font>

451
00:23:17,260 --> 00:23:23,140
don't want<font color="#E5E5E5"> to have arbitrary execution</font>

452
00:23:19,750 --> 00:23:25,210
on the controller<font color="#E5E5E5"> calling some Cisco's</font>

453
00:23:23,140 --> 00:23:27,910
whatever that would not make much sense

454
00:23:25,210 --> 00:23:29,950
it<font color="#CCCCCC"> should be really</font><font color="#E5E5E5"> tied</font><font color="#CCCCCC"> to what this</font><font color="#E5E5E5"> is</font>

455
00:23:27,910 --> 00:23:33,400
supposed<font color="#CCCCCC"> to do so do some data</font>

456
00:23:29,950 --> 00:23:35,890
processing and we are<font color="#E5E5E5"> adding totally new</font>

457
00:23:33,400 --> 00:23:38,830
and<font color="#CCCCCC"> vme command for transforming the</font>

458
00:23:35,890 --> 00:23:42,100
<font color="#CCCCCC">data so in the most simplest case you</font>

459
00:23:38,830 --> 00:23:44,620
can<font color="#E5E5E5"> think about it as data copying</font>

460
00:23:42,100 --> 00:23:46,510
without going through without sending

461
00:23:44,620 --> 00:23:50,590
<font color="#E5E5E5">the data to</font><font color="#CCCCCC"> the host and back so</font>

462
00:23:46,510 --> 00:23:53,170
currently if if the<font color="#E5E5E5"> if you have any nvme</font>

463
00:23:50,590 --> 00:23:54,879
flash controller or sysd controller and

464
00:23:53,170 --> 00:23:57,580
you would like<font color="#E5E5E5"> to implement something</font>

465
00:23:54,880 --> 00:24:00,820
<font color="#CCCCCC">like I don't</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> copy-on-write on on</font>

466
00:23:57,580 --> 00:24:02,620
<font color="#E5E5E5">fire systems like</font><font color="#CCCCCC"> battery FS or ZFS you</font>

467
00:24:00,820 --> 00:24:07,510
unfurnished unfortunately you have to

468
00:24:02,620 --> 00:24:09,049
<font color="#E5E5E5">really</font><font color="#CCCCCC"> rely</font><font color="#E5E5E5"> for the metadata read read</font>

469
00:24:07,510 --> 00:24:11,119
the metadata from from

470
00:24:09,049 --> 00:24:14,299
device and<font color="#CCCCCC"> sending back to</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> other</font>

471
00:24:11,119 --> 00:24:17,570
<font color="#E5E5E5">addresses this this might save you the</font>

472
00:24:14,299 --> 00:24:24,889
<font color="#CCCCCC">round-trip</font><font color="#E5E5E5"> so even for this simple case</font>

473
00:24:17,570 --> 00:24:26,899
this might be beneficial<font color="#CCCCCC"> okay so we we</font>

474
00:24:24,889 --> 00:24:29,570
we would certainly<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to demonstrate</font>

475
00:24:26,899 --> 00:24:32,629
<font color="#E5E5E5">this not just</font><font color="#CCCCCC"> on two examples but on</font>

476
00:24:29,570 --> 00:24:35,559
some<font color="#E5E5E5"> real-life scenario so</font><font color="#CCCCCC"> we are</font>

477
00:24:32,629 --> 00:24:39,110
<font color="#CCCCCC">currently working</font><font color="#E5E5E5"> on a on a custom</font>

478
00:24:35,559 --> 00:24:41,899
storage engine for<font color="#E5E5E5"> MySQL that would make</font>

479
00:24:39,110 --> 00:24:42,769
use of this by means of doing<font color="#CCCCCC"> operator</font>

480
00:24:41,899 --> 00:24:44,899
push downs

481
00:24:42,769 --> 00:24:48,080
so really<font color="#E5E5E5"> that would you expect if you</font>

482
00:24:44,899 --> 00:24:51,619
have<font color="#CCCCCC"> SQL</font><font color="#E5E5E5"> query like select something</font>

483
00:24:48,080 --> 00:24:54,559
where something<font color="#E5E5E5"> that where part should</font>

484
00:24:51,619 --> 00:24:57,289
be<font color="#E5E5E5"> at least partially pushed down or</font>

485
00:24:54,559 --> 00:25:01,730
floated to<font color="#CCCCCC"> the storage</font><font color="#E5E5E5"> and maybe maybe</font>

486
00:24:57,289 --> 00:25:05,600
some other other scenarios we also have

487
00:25:01,730 --> 00:25:09,739
a just<font color="#CCCCCC"> like as a sidenote</font><font color="#E5E5E5"> created an</font>

488
00:25:05,600 --> 00:25:12,049
emulator in<font color="#CCCCCC"> qumu for basically</font><font color="#E5E5E5"> it's it's</font>

489
00:25:09,739 --> 00:25:15,769
a interesting<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> where you have one</font>

490
00:25:12,049 --> 00:25:17,869
<font color="#CCCCCC">qmo running the the arm firmware of the</font>

491
00:25:15,769 --> 00:25:23,419
SSD controller<font color="#E5E5E5"> another</font><font color="#CCCCCC"> qmo where you</font>

492
00:25:17,869 --> 00:25:25,549
have the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> host like</font><font color="#E5E5E5"> usual x86 virtual</font>

493
00:25:23,419 --> 00:25:29,779
machine<font color="#E5E5E5"> and you connect those two so</font>

494
00:25:25,549 --> 00:25:32,029
that you can<font color="#CCCCCC"> independently verify your</font>

495
00:25:29,779 --> 00:25:34,159
extensions<font color="#E5E5E5"> of course this cannot be</font><font color="#CCCCCC"> used</font>

496
00:25:32,029 --> 00:25:37,720
<font color="#E5E5E5">for benchmarking</font><font color="#CCCCCC"> purposes this is just</font>

497
00:25:34,159 --> 00:25:42,019
for speeding up<font color="#E5E5E5"> the development because</font>

498
00:25:37,720 --> 00:25:44,389
although<font color="#CCCCCC"> Xilinx tools are interesting</font>

499
00:25:42,019 --> 00:25:47,269
they<font color="#CCCCCC"> are not open source and</font><font color="#E5E5E5"> we are</font>

500
00:25:44,389 --> 00:25:50,418
<font color="#CCCCCC">literally dedicated to the open</font><font color="#E5E5E5"> approach</font>

501
00:25:47,269 --> 00:25:52,129
<font color="#CCCCCC">so of course everything performance wise</font>

502
00:25:50,419 --> 00:25:55,789
would need to be done on the<font color="#CCCCCC"> honda</font>

503
00:25:52,129 --> 00:26:00,459
actual hardware<font color="#E5E5E5"> but for especially for</font>

504
00:25:55,789 --> 00:26:07,629
<font color="#E5E5E5">people to be able to poke into this</font>

505
00:26:00,460 --> 00:26:10,399
<font color="#E5E5E5">having a qmo</font><font color="#CCCCCC"> modal would</font><font color="#E5E5E5"> be nice</font><font color="#CCCCCC"> ok so</font>

506
00:26:07,629 --> 00:26:11,629
how do<font color="#E5E5E5"> micro</font><font color="#CCCCCC"> kernels fit into this</font>

507
00:26:10,399 --> 00:26:13,939
because we<font color="#E5E5E5"> are in a microkernel</font>

508
00:26:11,629 --> 00:26:19,240
deployment I have hardly mentioned them

509
00:26:13,940 --> 00:26:24,340
<font color="#CCCCCC">I think this is just the first step</font>

510
00:26:19,240 --> 00:26:28,300
this really calls for for a totally

511
00:26:24,340 --> 00:26:31,959
<font color="#E5E5E5">different approach to programming our</font>

512
00:26:28,300 --> 00:26:34,780
machines<font color="#E5E5E5"> currently</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> would describe the</font>

513
00:26:31,960 --> 00:26:37,150
<font color="#E5E5E5">approach as computational and</font>

514
00:26:34,780 --> 00:26:40,090
computational eccentric<font color="#CCCCCC"> so we have still</font>

515
00:26:37,150 --> 00:26:42,790
this the central CPU that<font color="#E5E5E5"> does most of</font>

516
00:26:40,090 --> 00:26:44,678
the heavy<font color="#CCCCCC"> lifting and</font><font color="#E5E5E5"> we just upload</font>

517
00:26:42,790 --> 00:26:48,420
from<font color="#E5E5E5"> time to time something goes to some</font>

518
00:26:44,679 --> 00:26:52,240
floating units<font color="#CCCCCC"> be</font><font color="#E5E5E5"> the GPU SSD in memory</font>

519
00:26:48,420 --> 00:26:55,030
<font color="#E5E5E5">smart memory whatever</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we can really</font>

520
00:26:52,240 --> 00:26:57,010
go further we can really start thinking

521
00:26:55,030 --> 00:27:00,210
<font color="#CCCCCC">about our machines as massively</font>

522
00:26:57,010 --> 00:27:02,820
distributed systems<font color="#E5E5E5"> again and not only</font>

523
00:27:00,210 --> 00:27:07,420
distributed across<font color="#CCCCCC"> the network but also</font>

524
00:27:02,820 --> 00:27:10,330
<font color="#E5E5E5">think about them as as a combination</font><font color="#CCCCCC"> of</font>

525
00:27:07,420 --> 00:27:13,690
multiple heterogeneous computational

526
00:27:10,330 --> 00:27:15,720
units within the<font color="#CCCCCC"> box you have so</font><font color="#E5E5E5"> not</font>

527
00:27:13,690 --> 00:27:18,910
<font color="#E5E5E5">just a central CPU and some some</font>

528
00:27:15,720 --> 00:27:22,360
peripherals around it but thinking about

529
00:27:18,910 --> 00:27:25,390
<font color="#CCCCCC">it as a combination of different</font><font color="#E5E5E5"> if four</font>

530
00:27:22,360 --> 00:27:26,939
CPUs<font color="#E5E5E5"> possibly with different instruction</font>

531
00:27:25,390 --> 00:27:30,150
set architectures with different

532
00:27:26,940 --> 00:27:34,179
different<font color="#CCCCCC"> ways how they operate</font><font color="#E5E5E5"> but</font>

533
00:27:30,150 --> 00:27:36,420
processing<font color="#E5E5E5"> the data running your</font>

534
00:27:34,179 --> 00:27:41,230
programs your applications<font color="#E5E5E5"> in</font>

535
00:27:36,420 --> 00:27:43,240
combination<font color="#CCCCCC"> and there goes their goal</font>

536
00:27:41,230 --> 00:27:45,910
microkernels<font color="#CCCCCC"> I mean micro kernels are</font>

537
00:27:43,240 --> 00:27:50,700
ideal<font color="#CCCCCC"> for this because micro kernels</font><font color="#E5E5E5"> on</font>

538
00:27:45,910 --> 00:27:54,970
one side create a very simple<font color="#CCCCCC"> lean</font>

539
00:27:50,700 --> 00:27:58,360
<font color="#E5E5E5">interface for 40 applications basically</font>

540
00:27:54,970 --> 00:28:01,300
just memory<font color="#E5E5E5"> management scheduling and</font>

541
00:27:58,360 --> 00:28:04,659
IPC<font color="#E5E5E5"> and the IPC part is also important</font>

542
00:28:01,300 --> 00:28:07,710
because it<font color="#CCCCCC"> creates an abstract</font><font color="#E5E5E5"> and at</font>

543
00:28:04,660 --> 00:28:11,980
the same time well-defined interface for

544
00:28:07,710 --> 00:28:14,440
<font color="#E5E5E5">creating systems like Norman basically</font>

545
00:28:11,980 --> 00:28:16,840
showed in the<font color="#CCCCCC"> previous lecture for</font>

546
00:28:14,440 --> 00:28:21,130
<font color="#E5E5E5">creating complex systems built of</font><font color="#CCCCCC"> the</font>

547
00:28:16,840 --> 00:28:25,320
fine-grained<font color="#E5E5E5"> components and this is why</font>

548
00:28:21,130 --> 00:28:28,510
I like multi server<font color="#CCCCCC"> micro kernels</font>

549
00:28:25,320 --> 00:28:30,610
hopefully<font color="#E5E5E5"> many of you do also but this</font>

550
00:28:28,510 --> 00:28:32,230
<font color="#E5E5E5">can be simply extended</font><font color="#CCCCCC"> I mean why</font>

551
00:28:30,610 --> 00:28:34,780
thinking about

552
00:28:32,230 --> 00:28:38,080
just a single CPU running<font color="#CCCCCC"> a single</font>

553
00:28:34,780 --> 00:28:40,809
microkernel and<font color="#E5E5E5"> a single composition of</font>

554
00:28:38,080 --> 00:28:43,780
components<font color="#E5E5E5"> on top of it</font><font color="#CCCCCC"> why not</font><font color="#E5E5E5"> think</font>

555
00:28:40,809 --> 00:28:46,780
<font color="#E5E5E5">about this as as a distributed system</font>

556
00:28:43,780 --> 00:28:47,918
<font color="#CCCCCC">and most of the building</font><font color="#E5E5E5"> blocks will</font>

557
00:28:46,780 --> 00:28:52,540
stay the same

558
00:28:47,919 --> 00:28:55,450
you<font color="#E5E5E5"> can run maybe different</font><font color="#CCCCCC"> microcon was</font>

559
00:28:52,540 --> 00:29:00,460
<font color="#E5E5E5">but with implementing a very similar</font><font color="#CCCCCC"> API</font>

560
00:28:55,450 --> 00:29:02,710
<font color="#CCCCCC">on on the</font><font color="#E5E5E5"> primary CPU on some embedded</font>

561
00:29:00,460 --> 00:29:07,390
cores in your SSD<font color="#E5E5E5"> in your neck in your</font>

562
00:29:02,710 --> 00:29:10,330
<font color="#E5E5E5">GPU and you can just spread the entire</font>

563
00:29:07,390 --> 00:29:13,290
system among these<font color="#E5E5E5"> different course</font>

564
00:29:10,330 --> 00:29:15,790
<font color="#E5E5E5">while keeping the communication</font>

565
00:29:13,290 --> 00:29:18,250
<font color="#E5E5E5">interface the same of course the</font>

566
00:29:15,790 --> 00:29:20,830
transport<font color="#CCCCCC"> below will be</font><font color="#E5E5E5"> different</font>

567
00:29:18,250 --> 00:29:25,330
<font color="#E5E5E5">because it's it's a different</font><font color="#CCCCCC"> pain</font>

568
00:29:20,830 --> 00:29:29,350
to send a message<font color="#CCCCCC"> from from one CPU</font><font color="#E5E5E5"> to</font>

569
00:29:25,330 --> 00:29:31,540
<font color="#CCCCCC">the other but that</font><font color="#E5E5E5"> then using a shared</font>

570
00:29:29,350 --> 00:29:34,928
memory<font color="#E5E5E5"> in memory coherent system of</font>

571
00:29:31,540 --> 00:29:38,590
course but in principle the<font color="#E5E5E5"> API can can</font>

572
00:29:34,929 --> 00:29:44,110
cover it<font color="#E5E5E5"> it does in many</font><font color="#CCCCCC"> micro kernels I</font>

573
00:29:38,590 --> 00:29:46,720
mean Samuel<font color="#E5E5E5"> has also said this in the</font>

574
00:29:44,110 --> 00:29:49,299
<font color="#E5E5E5">morning so it's probably</font><font color="#CCCCCC"> very easy in</font>

575
00:29:46,720 --> 00:29:51,580
most most micro kernels including new

576
00:29:49,299 --> 00:29:55,650
heart to just extend the communication

577
00:29:51,580 --> 00:29:58,870
between the<font color="#E5E5E5"> between</font><font color="#CCCCCC"> the tasks from from</font>

578
00:29:55,650 --> 00:30:00,730
the regular one to communicating<font color="#E5E5E5"> over</font>

579
00:29:58,870 --> 00:30:05,049
network and going<font color="#E5E5E5"> into a distributed</font>

580
00:30:00,730 --> 00:30:07,120
system<font color="#CCCCCC"> why so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are this</font><font color="#E5E5E5"> basically this</font>

581
00:30:05,049 --> 00:30:10,679
slide is just<font color="#E5E5E5"> for the people</font><font color="#CCCCCC"> who are</font>

582
00:30:07,120 --> 00:30:13,449
reading<font color="#CCCCCC"> the slides so this somehow</font>

583
00:30:10,679 --> 00:30:16,890
summarizes what I have just said so the

584
00:30:13,450 --> 00:30:19,240
IPC is<font color="#CCCCCC"> the least common denominator</font>

585
00:30:16,890 --> 00:30:21,610
<font color="#CCCCCC">suta and the message passing mechanism</font>

586
00:30:19,240 --> 00:30:28,919
<font color="#CCCCCC">can be used to build</font><font color="#E5E5E5"> distributed systems</font>

587
00:30:21,610 --> 00:30:31,120
very easily<font color="#E5E5E5"> and final final point we as</font>

588
00:30:28,919 --> 00:30:34,179
microkernel<font color="#E5E5E5"> multi server developers</font><font color="#CCCCCC"> I</font>

589
00:30:31,120 --> 00:30:36,250
used to think in terms<font color="#CCCCCC"> of distributed</font>

590
00:30:34,179 --> 00:30:40,040
<font color="#CCCCCC">systems naturally because we don't build</font>

591
00:30:36,250 --> 00:30:44,060
those huge monoliths<font color="#E5E5E5"> we</font>

592
00:30:40,040 --> 00:30:46,310
if we do something<font color="#E5E5E5"> we know that we</font>

593
00:30:44,060 --> 00:30:48,889
<font color="#E5E5E5">should stick this small component and</font>

594
00:30:46,310 --> 00:30:51,379
glue it<font color="#CCCCCC"> to this most component and stick</font>

595
00:30:48,890 --> 00:30:55,490
another small component into it in the

596
00:30:51,380 --> 00:30:58,010
<font color="#E5E5E5">middle and building something complex</font>

597
00:30:55,490 --> 00:31:01,310
<font color="#E5E5E5">from LEGO bricks and it's nice</font>

598
00:30:58,010 --> 00:31:04,430
so just switching<font color="#E5E5E5"> the perspective from</font>

599
00:31:01,310 --> 00:31:08,899
building<font color="#E5E5E5"> let's say a system that runs on</font>

600
00:31:04,430 --> 00:31:10,670
a single<font color="#CCCCCC"> CPU or or a</font><font color="#E5E5E5"> single single</font>

601
00:31:08,900 --> 00:31:12,950
computational unit<font color="#E5E5E5"> to distributed system</font>

602
00:31:10,670 --> 00:31:16,730
it's not<font color="#CCCCCC"> a far it's not a big stretch I</font>

603
00:31:12,950 --> 00:31:21,740
would say<font color="#CCCCCC"> okay so aren't we actually</font>

604
00:31:16,730 --> 00:31:23,990
talking<font color="#CCCCCC"> about multi car</font><font color="#E5E5E5"> knows yes why</font>

605
00:31:21,740 --> 00:31:27,730
not<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> this approach it that I have</font>

606
00:31:23,990 --> 00:31:30,140
coined<font color="#E5E5E5"> multi microkernels could be also</font>

607
00:31:27,730 --> 00:31:31,910
<font color="#E5E5E5">implemented by multi</font><font color="#CCCCCC"> kernel sexual if</font>

608
00:31:30,140 --> 00:31:34,700
you look on<font color="#CCCCCC"> viral fish of project like</font>

609
00:31:31,910 --> 00:31:37,520
that<font color="#CCCCCC"> or different similar projects like</font>

610
00:31:34,700 --> 00:31:40,490
<font color="#CCCCCC">Barrow fish they are</font><font color="#E5E5E5"> basically micro</font>

611
00:31:37,520 --> 00:31:43,400
kernels taken to the extreme<font color="#CCCCCC"> so running</font>

612
00:31:40,490 --> 00:31:45,620
<font color="#E5E5E5">a separate kernel on each individual</font>

613
00:31:43,400 --> 00:31:48,410
core<font color="#E5E5E5"> even though you have memory</font>

614
00:31:45,620 --> 00:31:51,290
<font color="#E5E5E5">coherency between them so I mean this is</font>

615
00:31:48,410 --> 00:31:55,490
this<font color="#CCCCCC"> is nothing</font><font color="#E5E5E5"> against the idea I am</font>

616
00:31:51,290 --> 00:31:57,770
proposing what about unique kernels<font color="#E5E5E5"> okay</font>

617
00:31:55,490 --> 00:32:00,080
<font color="#E5E5E5">why not if you insist on them I mean if</font>

618
00:31:57,770 --> 00:32:02,660
you imagine that that you have you<font color="#E5E5E5"> have</font>

619
00:32:00,080 --> 00:32:05,929
a<font color="#E5E5E5"> micro kernel with a single</font><font color="#CCCCCC"> static</font>

620
00:32:02,660 --> 00:32:08,210
workload on top of it and for<font color="#CCCCCC"> some</font>

621
00:32:05,930 --> 00:32:10,130
reason you<font color="#E5E5E5"> don't care about the</font>

622
00:32:08,210 --> 00:32:12,200
<font color="#E5E5E5">isolation between the kernel layer and</font>

623
00:32:10,130 --> 00:32:15,410
the<font color="#E5E5E5"> use</font><font color="#CCCCCC"> of space</font><font color="#E5E5E5"> layer that's basically</font>

624
00:32:12,200 --> 00:32:20,290
<font color="#E5E5E5">does basically a unicorn on so it's also</font>

625
00:32:15,410 --> 00:32:24,290
<font color="#E5E5E5">covered I mean we are all friends</font><font color="#CCCCCC"> so</font>

626
00:32:20,290 --> 00:32:26,720
<font color="#CCCCCC">what what I propose</font><font color="#E5E5E5"> for myself of course</font>

627
00:32:24,290 --> 00:32:29,930
<font color="#CCCCCC">I would</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> glad if you extend this idea</font>

628
00:32:26,720 --> 00:32:31,910
<font color="#E5E5E5">in any direction you choose to to do</font>

629
00:32:29,930 --> 00:32:37,520
some initial<font color="#CCCCCC"> step so we are already</font>

630
00:32:31,910 --> 00:32:41,150
<font color="#E5E5E5">working on the in storage workload</font><font color="#CCCCCC"> the</font>

631
00:32:37,520 --> 00:32:44,750
<font color="#CCCCCC">floating we might move</font><font color="#E5E5E5"> to tunics maybe</font>

632
00:32:41,150 --> 00:32:47,480
next<font color="#E5E5E5"> year and gradually</font><font color="#CCCCCC"> as we implement</font>

633
00:32:44,750 --> 00:32:52,190
<font color="#E5E5E5">this practically to measure a to</font>

634
00:32:47,480 --> 00:32:55,250
benchmark<font color="#CCCCCC"> gates</font><font color="#E5E5E5"> to to extend it we might</font>

635
00:32:52,190 --> 00:32:57,620
<font color="#E5E5E5">move from our crew</font><font color="#CCCCCC"> runtimes which we</font>

636
00:32:55,250 --> 00:33:01,039
obviously need to<font color="#CCCCCC"> some proto</font>

637
00:32:57,620 --> 00:33:03,820
microkernels<font color="#E5E5E5"> then gradually to move we</font>

638
00:33:01,039 --> 00:33:06,408
can<font color="#E5E5E5"> really move to full-fledged</font>

639
00:33:03,820 --> 00:33:09,019
<font color="#E5E5E5">microkernels and the important</font><font color="#CCCCCC"> thing</font>

640
00:33:06,409 --> 00:33:11,600
that I'm obviously just skipping<font color="#E5E5E5"> and</font>

641
00:33:09,019 --> 00:33:14,750
it's it's an open problem<font color="#CCCCCC"> I have to</font>

642
00:33:11,600 --> 00:33:16,639
create some nice frameworks for creating

643
00:33:14,750 --> 00:33:19,509
these distributed applications<font color="#E5E5E5"> because</font>

644
00:33:16,639 --> 00:33:23,570
<font color="#E5E5E5">of course this is</font><font color="#CCCCCC"> the same issue with</font>

645
00:33:19,509 --> 00:33:25,820
concurrency people usually<font color="#E5E5E5"> avoid writing</font>

646
00:33:23,570 --> 00:33:27,950
<font color="#E5E5E5">concurrent code because it's</font>

647
00:33:25,820 --> 00:33:30,860
<font color="#E5E5E5">conceptually more complex than</font><font color="#CCCCCC"> just</font>

648
00:33:27,950 --> 00:33:33,200
writing sequential code<font color="#E5E5E5"> step</font><font color="#CCCCCC"> 1 step 2</font>

649
00:33:30,860 --> 00:33:35,719
step<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> then a loop then step 4</font>

650
00:33:33,200 --> 00:33:39,409
I mean this is simple to<font color="#E5E5E5"> grasp writing</font>

651
00:33:35,720 --> 00:33:42,409
code in<font color="#E5E5E5"> a vectorized way is simply more</font>

652
00:33:39,409 --> 00:33:44,809
complex to think of and<font color="#CCCCCC"> distributive</font>

653
00:33:42,409 --> 00:33:46,820
<font color="#E5E5E5">systems that's the same issue so of</font>

654
00:33:44,809 --> 00:33:49,039
course in the<font color="#E5E5E5"> end in the</font><font color="#CCCCCC"> end of the day</font>

655
00:33:46,820 --> 00:33:50,960
what<font color="#CCCCCC"> you would like</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have would</font><font color="#E5E5E5"> we</font>

656
00:33:49,039 --> 00:33:52,429
would like to<font color="#E5E5E5"> have are some very nice</font>

657
00:33:50,960 --> 00:33:54,919
frameworks with some very nice

658
00:33:52,429 --> 00:33:58,009
abstractions something like an<font color="#E5E5E5"> actor</font>

659
00:33:54,919 --> 00:34:02,240
<font color="#CCCCCC">model or agent model that would allow</font>

660
00:33:58,009 --> 00:34:06,190
the end programmers to to make use of

661
00:34:02,240 --> 00:34:10,879
this machinery<font color="#E5E5E5"> in a very simple</font><font color="#CCCCCC"> way</font>

662
00:34:06,190 --> 00:34:15,740
simple from from the conceptual<font color="#E5E5E5"> point of</font>

663
00:34:10,879 --> 00:34:19,759
view<font color="#CCCCCC"> okay yes so this is something</font>

664
00:34:15,739 --> 00:34:21,229
between engineering and and research so

665
00:34:19,760 --> 00:34:24,260
of<font color="#E5E5E5"> course there are many open questions</font>

666
00:34:21,230 --> 00:34:28,240
<font color="#E5E5E5">of course in the end of the day this</font>

667
00:34:24,260 --> 00:34:31,159
requires a lot<font color="#CCCCCC"> of manpower</font><font color="#E5E5E5"> as usual so I</font>

668
00:34:28,239 --> 00:34:33,589
mean there is<font color="#E5E5E5"> this</font><font color="#CCCCCC"> elephant in do in</font>

669
00:34:31,159 --> 00:34:37,040
this<font color="#CCCCCC"> microkernel of room every every</font>

670
00:34:33,589 --> 00:34:38,899
<font color="#CCCCCC">year what if we all claim that</font><font color="#E5E5E5"> the micro</font>

671
00:34:37,040 --> 00:34:42,520
<font color="#E5E5E5">kernels are so great so why are you</font>

672
00:34:38,899 --> 00:34:44,868
<font color="#CCCCCC">using them every day everywhere</font>

673
00:34:42,520 --> 00:34:48,040
<font color="#E5E5E5">basically we don't</font><font color="#CCCCCC"> have the manpower to</font>

674
00:34:44,869 --> 00:34:52,250
<font color="#E5E5E5">to push them that far I mean though</font>

675
00:34:48,040 --> 00:34:53,480
<font color="#E5E5E5">those are</font><font color="#CCCCCC"> not problems</font><font color="#E5E5E5"> of the idea those</font>

676
00:34:52,250 --> 00:34:57,050
<font color="#E5E5E5">are the problems</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the implementation</font>

677
00:34:53,480 --> 00:35:00,710
<font color="#CCCCCC">and we just we are just running</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font>

678
00:34:57,050 --> 00:35:02,170
duct<font color="#E5E5E5"> tape or</font><font color="#CCCCCC"> the wd-40 sometimes we turn</font>

679
00:35:00,710 --> 00:35:05,619
<font color="#E5E5E5">to Tom that's</font>

680
00:35:02,170 --> 00:35:08,920
<font color="#E5E5E5">any problem</font><font color="#CCCCCC"> it's at</font><font color="#E5E5E5"> least as I</font><font color="#CCCCCC"> see it</font><font color="#E5E5E5"> so</font>

681
00:35:05,619 --> 00:35:11,530
to sum up I have showed you<font color="#E5E5E5"> first that</font>

682
00:35:08,920 --> 00:35:14,020
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have some issues with current current</font>

683
00:35:11,530 --> 00:35:17,380
computers you<font color="#E5E5E5"> probably know it the</font>

684
00:35:14,020 --> 00:35:19,990
<font color="#E5E5E5">memory is too slow or in other words</font>

685
00:35:17,380 --> 00:35:23,700
it's much slower<font color="#E5E5E5"> than we would like</font><font color="#CCCCCC"> it</font>

686
00:35:19,990 --> 00:35:25,689
<font color="#CCCCCC">to have</font><font color="#E5E5E5"> there are some revolutionary</font>

687
00:35:23,700 --> 00:35:28,980
<font color="#E5E5E5">approaches how to solve this problem</font>

688
00:35:25,690 --> 00:35:31,809
<font color="#E5E5E5">like implementing a better memory</font><font color="#CCCCCC"> and</font>

689
00:35:28,980 --> 00:35:34,210
there are some evolutionary ways how<font color="#E5E5E5"> to</font>

690
00:35:31,809 --> 00:35:36,460
solve<font color="#E5E5E5"> it like</font><font color="#CCCCCC"> moving the some of the</font>

691
00:35:34,210 --> 00:35:39,790
computations closer to the<font color="#E5E5E5"> data making</font>

692
00:35:36,460 --> 00:35:42,270
<font color="#CCCCCC">use of the fact that the memory</font><font color="#E5E5E5"> might</font>

693
00:35:39,790 --> 00:35:44,799
have a big large<font color="#CCCCCC"> light latency</font><font color="#E5E5E5"> but</font>

694
00:35:42,270 --> 00:35:50,849
inherently<font color="#E5E5E5"> it's working in parallel way</font>

695
00:35:44,799 --> 00:35:50,849
<font color="#E5E5E5">I have shown you by means of reference</font>

696
00:35:57,070 --> 00:35:59,130
you

697
00:36:01,510 --> 00:36:09,190
well<font color="#E5E5E5"> click party</font><font color="#CCCCCC"> microphones I have to</font>

698
00:36:06,500 --> 00:36:12,050
thank<font color="#CCCCCC"> all my colleagues from our who are</font>

699
00:36:09,190 --> 00:36:16,359
<font color="#E5E5E5">in storage</font><font color="#CCCCCC"> and DP team because of course</font>

700
00:36:12,050 --> 00:36:16,359
this<font color="#E5E5E5"> is not just my my world</font>

701
00:36:30,940 --> 00:36:36,549
and so feel<font color="#CCCCCC"> free to</font><font color="#E5E5E5"> contact them and if</font>

702
00:36:35,289 --> 00:36:39,650
you have any questions I would be happy

703
00:36:36,549 --> 00:36:47,959
<font color="#E5E5E5">to</font><font color="#CCCCCC"> answer</font><font color="#E5E5E5"> them thank you for attention</font>

704
00:36:39,650 --> 00:36:47,959
[Applause]

705
00:36:55,390 --> 00:36:58,560
[Music]

706
00:37:28,950 --> 00:37:38,230
so the question is how do we<font color="#E5E5E5"> plan to</font>

707
00:37:33,430 --> 00:37:39,848
manage<font color="#E5E5E5"> or how do we manage the</font><font color="#CCCCCC"> spatial</font>

708
00:37:38,230 --> 00:37:41,770
<font color="#CCCCCC">locality</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> data in case of the</font>

709
00:37:39,849 --> 00:37:43,420
<font color="#E5E5E5">MySQL storage engine we are implementing</font>

710
00:37:41,770 --> 00:37:45,960
it<font color="#E5E5E5"> we are implementing and how do we</font>

711
00:37:43,420 --> 00:37:49,210
escape the<font color="#CCCCCC"> filesystem layers and so on</font>

712
00:37:45,960 --> 00:37:51,880
between<font color="#E5E5E5"> the storage and</font><font color="#CCCCCC"> the database</font><font color="#E5E5E5"> so</font>

713
00:37:49,210 --> 00:37:55,150
I will start with<font color="#E5E5E5"> the end with what I</font>

714
00:37:51,880 --> 00:37:58,809
have repeated as the last part<font color="#E5E5E5"> of course</font>

715
00:37:55,150 --> 00:38:01,900
<font color="#E5E5E5">we first implement our storage engine as</font>

716
00:37:58,809 --> 00:38:04,779
a<font color="#CCCCCC"> block-based so we we just</font><font color="#E5E5E5"> avoid the</font>

717
00:38:01,900 --> 00:38:09,010
<font color="#CCCCCC">filesystem</font><font color="#E5E5E5"> content completely we also</font>

718
00:38:04,779 --> 00:38:13,900
avoid the kernel completely in the first

719
00:38:09,010 --> 00:38:17,099
step by by accessing the the nvme SSD

720
00:38:13,900 --> 00:38:19,869
controller<font color="#CCCCCC"> directly from user space</font>

721
00:38:17,099 --> 00:38:22,599
eventually<font color="#E5E5E5"> we would obviously need to</font>

722
00:38:19,869 --> 00:38:24,760
<font color="#E5E5E5">include at</font><font color="#CCCCCC"> least for some scenarios all</font>

723
00:38:22,599 --> 00:38:28,119
these immediate steps<font color="#E5E5E5"> so we would have</font>

724
00:38:24,760 --> 00:38:29,770
to keep<font color="#E5E5E5"> the kernel there for arbitration</font>

725
00:38:28,119 --> 00:38:33,130
<font color="#E5E5E5">we would have to have a file system</font>

726
00:38:29,770 --> 00:38:34,930
<font color="#CCCCCC">therefore</font><font color="#E5E5E5"> our arbitration and yes we are</font>

727
00:38:33,130 --> 00:38:38,099
<font color="#E5E5E5">thinking about this this is exactly why</font>

728
00:38:34,930 --> 00:38:40,210
we we also think<font color="#E5E5E5"> about the security</font>

729
00:38:38,099 --> 00:38:42,069
<font color="#E5E5E5">potential</font><font color="#CCCCCC"> security problems and</font><font color="#E5E5E5"> issues</font>

730
00:38:40,210 --> 00:38:44,220
from<font color="#E5E5E5"> the very beginning we don't want to</font>

731
00:38:42,069 --> 00:38:46,720
somehow stick or glued

732
00:38:44,220 --> 00:38:49,779
afterwards<font color="#E5E5E5"> to to the to the finished</font>

733
00:38:46,720 --> 00:38:53,410
solution<font color="#CCCCCC"> so basically the the file</font>

734
00:38:49,780 --> 00:38:55,330
system driver in the kernel or<font color="#E5E5E5"> in</font>

735
00:38:53,410 --> 00:38:59,049
<font color="#CCCCCC">userspace</font><font color="#E5E5E5"> if we are talking about</font><font color="#CCCCCC"> micro</font>

736
00:38:55,330 --> 00:39:03,910
<font color="#E5E5E5">kernels would have to instruct the the</font>

737
00:38:59,050 --> 00:39:06,210
nvme driver<font color="#E5E5E5"> and in the end the the SSD</font>

738
00:39:03,910 --> 00:39:09,730
controller<font color="#E5E5E5"> which parts of the data</font>

739
00:39:06,210 --> 00:39:14,590
belong belong to individual files<font color="#E5E5E5"> so</font>

740
00:39:09,730 --> 00:39:16,720
<font color="#E5E5E5">that the the NDP code running on the</font>

741
00:39:14,590 --> 00:39:20,740
controller<font color="#E5E5E5"> we will</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> boundaries</font>

742
00:39:16,720 --> 00:39:22,299
<font color="#E5E5E5">so that's it that that's that's that's</font>

743
00:39:20,740 --> 00:39:25,870
this ocean from the security point of

744
00:39:22,300 --> 00:39:27,790
view<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the performance</font><font color="#E5E5E5"> yeah this of</font>

745
00:39:25,870 --> 00:39:30,790
course<font color="#E5E5E5"> basically you are</font><font color="#CCCCCC"> saying that</font>

746
00:39:27,790 --> 00:39:35,110
<font color="#CCCCCC">that the far system</font><font color="#E5E5E5"> layout can screw up</font>

747
00:39:30,790 --> 00:39:37,390
<font color="#E5E5E5">the benefits</font><font color="#CCCCCC"> we might get software</font>

748
00:39:35,110 --> 00:39:40,150
hardware cool designs so the file system

749
00:39:37,390 --> 00:39:43,839
needs<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be aware of it some some of</font>

750
00:39:40,150 --> 00:39:46,330
current file systems are somehow<font color="#E5E5E5"> aware</font>

751
00:39:43,840 --> 00:39:48,820
<font color="#E5E5E5">of the of the internal or can be made</font>

752
00:39:46,330 --> 00:39:53,529
aware about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> internal configuration</font>

753
00:39:48,820 --> 00:39:55,570
of the SSD<font color="#CCCCCC"> drive we can</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> think about</font>

754
00:39:53,530 --> 00:39:58,540
implementing<font color="#E5E5E5"> part of the file system</font>

755
00:39:55,570 --> 00:40:00,550
<font color="#CCCCCC">itself as the NDP code running on the</font>

756
00:39:58,540 --> 00:40:03,220
controller<font color="#CCCCCC"> there are many possible</font>

757
00:40:00,550 --> 00:40:05,230
approaches but we are not there<font color="#CCCCCC"> yet but</font>

758
00:40:03,220 --> 00:40:07,830
<font color="#CCCCCC">we</font><font color="#E5E5E5"> are thinking about it</font><font color="#CCCCCC"> so if that</font>

759
00:40:05,230 --> 00:40:07,830
answers your question

760
00:40:15,350 --> 00:40:39,049
<font color="#CCCCCC">mm-hm so the question was again</font><font color="#E5E5E5"> related</font>

761
00:40:36,650 --> 00:40:42,110
to<font color="#E5E5E5"> security so how do we handle the fact</font>

762
00:40:39,050 --> 00:40:45,080
<font color="#CCCCCC">that the firmware</font><font color="#E5E5E5"> can be buggy if I</font>

763
00:40:42,110 --> 00:40:47,990
understand it correctly<font color="#CCCCCC"> I mean this</font>

764
00:40:45,080 --> 00:40:50,270
frankly<font color="#CCCCCC"> is out of scope of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> GUI we</font>

765
00:40:47,990 --> 00:40:53,810
<font color="#CCCCCC">just</font><font color="#E5E5E5"> I mean the back at the firmware</font><font color="#CCCCCC"> can</font>

766
00:40:50,270 --> 00:40:56,780
be buggy<font color="#E5E5E5"> right now I mean if if you look</font>

767
00:40:53,810 --> 00:41:00,320
on any real firmware on any real SSD

768
00:40:56,780 --> 00:41:02,240
controller multitude of<font color="#E5E5E5"> things can go</font>

769
00:41:00,320 --> 00:41:04,130
wrong it can just<font color="#E5E5E5"> access different</font>

770
00:41:02,240 --> 00:41:07,459
different parts of the memory<font color="#E5E5E5"> if it's</font>

771
00:41:04,130 --> 00:41:09,800
<font color="#CCCCCC">implemented incorrectly so so on the</font>

772
00:41:07,460 --> 00:41:12,740
very<font color="#E5E5E5"> basic level there has to be some</font>

773
00:41:09,800 --> 00:41:14,660
some<font color="#CCCCCC"> contract some some level of trust</font>

774
00:41:12,740 --> 00:41:18,830
between<font color="#E5E5E5"> the OS and the</font><font color="#CCCCCC"> firmware</font><font color="#E5E5E5"> of</font>

775
00:41:14,660 --> 00:41:21,410
course<font color="#E5E5E5"> and once we establish this this</font>

776
00:41:18,830 --> 00:41:25,580
base of trust<font color="#CCCCCC"> we of course need to</font><font color="#E5E5E5"> have</font>

777
00:41:21,410 --> 00:41:28,160
some strong assurances that that the the

778
00:41:25,580 --> 00:41:30,770
<font color="#E5E5E5">the operating system or</font><font color="#CCCCCC"> the end user is</font>

779
00:41:28,160 --> 00:41:34,490
not<font color="#E5E5E5"> uploading something dangerous to to</font>

780
00:41:30,770 --> 00:41:37,250
the storage which<font color="#E5E5E5"> can be done in at</font>

781
00:41:34,490 --> 00:41:39,859
least<font color="#E5E5E5"> in two ways</font><font color="#CCCCCC"> one way is isolation</font>

782
00:41:37,250 --> 00:41:41,750
<font color="#E5E5E5">on the hardware level using</font><font color="#CCCCCC"> MMU</font><font color="#E5E5E5"> of</font>

783
00:41:39,860 --> 00:41:44,540
course now you are<font color="#E5E5E5"> always thinking about</font>

784
00:41:41,750 --> 00:41:46,700
meltdown and<font color="#CCCCCC"> Spectre so yeah we</font><font color="#E5E5E5"> assume</font>

785
00:41:44,540 --> 00:41:48,230
that<font color="#E5E5E5"> this these issues will</font><font color="#CCCCCC"> be</font>

786
00:41:46,700 --> 00:41:53,240
eventually fixed by the CPU

787
00:41:48,230 --> 00:41:57,530
manufacturers and come like from<font color="#E5E5E5"> by</font>

788
00:41:53,240 --> 00:41:59,330
safety by by by<font color="#E5E5E5"> definition so having a</font>

789
00:41:57,530 --> 00:42:01,820
<font color="#E5E5E5">bytecode or</font><font color="#CCCCCC"> a different way how</font><font color="#E5E5E5"> you</font>

790
00:41:59,330 --> 00:42:03,230
<font color="#E5E5E5">upload the data that is inherently safe</font>

791
00:42:01,820 --> 00:42:05,240
that could be could be checked

792
00:42:03,230 --> 00:42:07,610
statically by some static checker or

793
00:42:05,240 --> 00:42:09,799
<font color="#E5E5E5">some static verifier on on the framework</font>

794
00:42:07,610 --> 00:42:13,400
<font color="#E5E5E5">that it really does only what is</font>

795
00:42:09,800 --> 00:42:15,680
supposed to be<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> that it won't crush</font>

796
00:42:13,400 --> 00:42:19,540
the<font color="#CCCCCC"> firmware</font><font color="#E5E5E5"> and so on so these are the</font>

797
00:42:15,680 --> 00:42:19,540
two<font color="#CCCCCC"> components of the security</font>

798
00:42:37,749 --> 00:42:43,209
so the question is how do we<font color="#E5E5E5"> solve the</font>

799
00:42:40,489 --> 00:42:45,910
potential problem of having<font color="#E5E5E5"> different</font>

800
00:42:43,210 --> 00:42:48,229
transports potentially<font color="#CCCCCC"> between different</font>

801
00:42:45,910 --> 00:42:52,879
<font color="#CCCCCC">microkernels running on these different</font>

802
00:42:48,229 --> 00:42:56,450
<font color="#E5E5E5">nodes of the distributed system yes so</font>

803
00:42:52,880 --> 00:43:02,239
again<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> evolutionary first we we</font>

804
00:42:56,450 --> 00:43:04,549
assume<font color="#CCCCCC"> that those systems can that they</font>

805
00:43:02,239 --> 00:43:07,369
use or they can<font color="#CCCCCC"> negotiate some some</font>

806
00:43:04,549 --> 00:43:12,049
<font color="#E5E5E5">Common Pleas denominator as a transport</font>

807
00:43:07,369 --> 00:43:14,779
<font color="#E5E5E5">so so I don't</font><font color="#CCCCCC"> know maybe it's</font><font color="#E5E5E5"> all for</font>

808
00:43:12,049 --> 00:43:18,170
protocol<font color="#E5E5E5"> or something like</font><font color="#CCCCCC"> that so it's</font>

809
00:43:14,779 --> 00:43:20,450
basically possible<font color="#CCCCCC"> if it's not</font><font color="#E5E5E5"> possible</font>

810
00:43:18,170 --> 00:43:23,329
or if we<font color="#E5E5E5"> really go far into the</font><font color="#CCCCCC"> future</font>

811
00:43:20,450 --> 00:43:27,078
where we<font color="#CCCCCC"> where we think about</font><font color="#E5E5E5"> different</font>

812
00:43:23,329 --> 00:43:28,880
communication mechanisms<font color="#E5E5E5"> that's again at</font>

813
00:43:27,079 --> 00:43:30,859
least could be theoretically sold by

814
00:43:28,880 --> 00:43:35,869
some<font color="#E5E5E5"> connectors or by some by some</font>

815
00:43:30,859 --> 00:43:38,359
<font color="#E5E5E5">adapters</font><font color="#CCCCCC"> that basically adapt the one</font>

816
00:43:35,869 --> 00:43:40,460
transport to the other transport<font color="#E5E5E5"> think</font>

817
00:43:38,359 --> 00:43:42,519
about<font color="#E5E5E5"> network bridges</font><font color="#CCCCCC"> I mean yeah they</font>

818
00:43:40,460 --> 00:43:46,400
are not<font color="#E5E5E5"> popular they are not being used</font>

819
00:43:42,519 --> 00:43:46,968
much people try to avoid<font color="#E5E5E5"> them as</font><font color="#CCCCCC"> much as</font>

820
00:43:46,400 --> 00:43:49,219
possible

821
00:43:46,969 --> 00:43:51,049
but if you need<font color="#E5E5E5"> to connect to networking</font>

822
00:43:49,219 --> 00:43:52,999
technologies which are<font color="#E5E5E5"> different you can</font>

823
00:43:51,049 --> 00:43:57,380
have a bridge between them<font color="#E5E5E5"> that's that's</font>

824
00:43:52,999 --> 00:44:00,249
the approach<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> speaking if it if</font>

825
00:43:57,380 --> 00:44:00,249
it's<font color="#E5E5E5"> not satisfies</font>

826
00:44:02,530 --> 00:44:07,220
so the question so the question<font color="#CCCCCC"> is</font>

827
00:44:05,870 --> 00:44:12,350
whether this would need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

828
00:44:07,220 --> 00:44:28,220
transparent<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> ideally yes of course so</font>

829
00:44:12,350 --> 00:44:32,930
yeah so the<font color="#CCCCCC"> question is how do we make</font>

830
00:44:28,220 --> 00:44:36,430
<font color="#E5E5E5">use of this code of floating on the</font>

831
00:44:32,930 --> 00:44:38,870
level of application developers well

832
00:44:36,430 --> 00:44:41,779
again when you look on<font color="#CCCCCC"> it on from</font><font color="#E5E5E5"> the</font>

833
00:44:38,870 --> 00:44:46,029
low low level implementation<font color="#CCCCCC"> point of</font>

834
00:44:41,780 --> 00:44:48,680
<font color="#E5E5E5">view you would have to have some some</font>

835
00:44:46,030 --> 00:44:51,920
small relatively small reasonable

836
00:44:48,680 --> 00:44:55,399
functions that you would<font color="#E5E5E5"> able to somehow</font>

837
00:44:51,920 --> 00:44:58,070
cross compile to the<font color="#E5E5E5"> bytecode or some to</font>

838
00:44:55,400 --> 00:45:00,920
some other form<font color="#E5E5E5"> and you would be</font><font color="#CCCCCC"> able to</font>

839
00:44:58,070 --> 00:45:04,490
transport them to upload them to to the

840
00:45:00,920 --> 00:45:06,800
device<font color="#E5E5E5"> and then then just</font><font color="#CCCCCC"> run them but</font>

841
00:45:04,490 --> 00:45:08,930
of<font color="#E5E5E5"> course this is not this is not very</font>

842
00:45:06,800 --> 00:45:11,720
satisfactory<font color="#E5E5E5"> so that's that's the last</font>

843
00:45:08,930 --> 00:45:13,460
point<font color="#E5E5E5"> I have mentioned</font><font color="#CCCCCC"> the ideally</font><font color="#E5E5E5"> there</font>

844
00:45:11,720 --> 00:45:15,560
should be some high level interface<font color="#E5E5E5"> some</font>

845
00:45:13,460 --> 00:45:19,490
some high level abstraction why how to

846
00:45:15,560 --> 00:45:21,500
how to<font color="#E5E5E5"> do it so if we think about this</font>

847
00:45:19,490 --> 00:45:23,379
as a data processing problem<font color="#E5E5E5"> there are</font>

848
00:45:21,500 --> 00:45:26,720
some paradigms there are some

849
00:45:23,380 --> 00:45:29,510
computational models such as<font color="#E5E5E5"> float data</font>

850
00:45:26,720 --> 00:45:32,240
flow and so<font color="#E5E5E5"> on which could be somehow</font>

851
00:45:29,510 --> 00:45:36,740
used to to make<font color="#CCCCCC"> it more feasible</font><font color="#E5E5E5"> but</font>

852
00:45:32,240 --> 00:45:40,910
again<font color="#E5E5E5"> software is complicated I mean if</font>

853
00:45:36,740 --> 00:45:44,750
you<font color="#CCCCCC"> are if you are implementing</font><font color="#E5E5E5"> a web</font>

854
00:45:40,910 --> 00:45:48,620
application<font color="#CCCCCC"> just</font><font color="#E5E5E5"> as an</font><font color="#CCCCCC"> example you</font><font color="#E5E5E5"> don't</font>

855
00:45:44,750 --> 00:45:53,390
really<font color="#CCCCCC"> care how how</font><font color="#E5E5E5"> is the is the</font>

856
00:45:48,620 --> 00:45:55,580
browser<font color="#E5E5E5"> making good use of the GPU to to</font>

857
00:45:53,390 --> 00:45:57,410
run your web application faster<font color="#E5E5E5"> so there</font>

858
00:45:55,580 --> 00:45:59,090
are layers of software<font color="#E5E5E5"> and different</font>

859
00:45:57,410 --> 00:46:02,299
layers<font color="#E5E5E5"> have different responsibilities</font>

860
00:45:59,090 --> 00:46:09,490
<font color="#E5E5E5">so you ideally the the</font><font color="#CCCCCC"> n programmer</font>

861
00:46:02,300 --> 00:46:09,490
<font color="#E5E5E5">should be mostly oblivious</font><font color="#CCCCCC"> to it</font>

862
00:46:11,849 --> 00:46:23,160
so thanks again<font color="#CCCCCC"> for</font><font color="#E5E5E5"> your attention</font>

863
00:46:15,720 --> 00:46:23,160
[Applause]

