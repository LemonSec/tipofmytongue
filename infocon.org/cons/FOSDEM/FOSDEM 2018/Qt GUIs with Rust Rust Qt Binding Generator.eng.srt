1
00:00:06,120 --> 00:00:11,350
because<font color="#CCCCCC"> your thunder uber is going to</font>

2
00:00:08,980 --> 00:00:15,180
<font color="#E5E5E5">talk about rust with beauty</font>

3
00:00:11,350 --> 00:00:15,180
please give me a<font color="#E5E5E5"> real warm welcome</font>

4
00:00:19,140 --> 00:00:25,390
well thank you<font color="#CCCCCC"> very much I'm happy to</font>

5
00:00:23,200 --> 00:00:27,040
<font color="#CCCCCC">finally may have made it</font><font color="#E5E5E5"> into this room</font>

6
00:00:25,390 --> 00:00:32,680
it<font color="#E5E5E5"> turned out you have to be speaker and</font>

7
00:00:27,040 --> 00:00:36,370
then it's easy to<font color="#CCCCCC"> get in so I assume</font>

8
00:00:32,680 --> 00:00:38,200
that<font color="#E5E5E5"> most people here are firstly</font><font color="#CCCCCC"> Russ</font>

9
00:00:36,370 --> 00:00:40,150
developers and maybe secondly also

10
00:00:38,200 --> 00:00:42,430
<font color="#E5E5E5">there's some</font><font color="#CCCCCC"> cute guys here</font><font color="#E5E5E5"> so who is a</font>

11
00:00:40,150 --> 00:00:45,430
cute developer here<font color="#E5E5E5"> just</font><font color="#CCCCCC"> to oh great</font>

12
00:00:42,430 --> 00:00:47,590
<font color="#E5E5E5">quite a few yeah</font><font color="#CCCCCC"> so some of the stuff</font>

13
00:00:45,430 --> 00:00:50,800
will look more familiar<font color="#E5E5E5"> to you then most</font>

14
00:00:47,590 --> 00:00:52,660
of<font color="#E5E5E5"> the other stuff so</font><font color="#CCCCCC"> I yeah for the</font>

15
00:00:50,800 --> 00:00:54,910
people who<font color="#E5E5E5"> don't know</font><font color="#CCCCCC"> cute so much I've</font>

16
00:00:52,660 --> 00:00:58,419
also had some have added some code

17
00:00:54,910 --> 00:01:00,099
<font color="#CCCCCC">examples there</font><font color="#E5E5E5"> since there are not so</font>

18
00:00:58,420 --> 00:01:02,770
many cute developers I think<font color="#CCCCCC"> also this</font>

19
00:01:00,100 --> 00:01:06,520
image here who has ever seen this image

20
00:01:02,770 --> 00:01:10,119
before<font color="#E5E5E5"> two people yeah I guess three</font>

21
00:01:06,520 --> 00:01:11,860
even right<font color="#E5E5E5"> so this is like a logo which</font>

22
00:01:10,119 --> 00:01:13,630
was on the<font color="#E5E5E5"> top of the documentation</font><font color="#CCCCCC"> of</font>

23
00:01:11,860 --> 00:01:17,649
cute one<font color="#CCCCCC"> there about so it's like</font>

24
00:01:13,630 --> 00:01:21,160
somewhere<font color="#CCCCCC"> in the 90s</font><font color="#E5E5E5"> but considering</font>

25
00:01:17,649 --> 00:01:24,520
<font color="#CCCCCC">that combining worst and cute is not</font><font color="#E5E5E5"> so</font>

26
00:01:21,160 --> 00:01:26,979
easy<font color="#CCCCCC"> I thought this sort of</font><font color="#E5E5E5"> man looking</font>

27
00:01:24,520 --> 00:01:29,740
a bit distraught<font color="#CCCCCC"> would</font><font color="#E5E5E5"> be a good opening</font>

28
00:01:26,979 --> 00:01:32,259
<font color="#E5E5E5">image for this talk but the good news is</font>

29
00:01:29,740 --> 00:01:35,530
it's actually<font color="#CCCCCC"> totally feasible</font><font color="#E5E5E5"> to</font>

30
00:01:32,259 --> 00:01:36,970
combine those<font color="#CCCCCC"> two things</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> rustic</font>

31
00:01:35,530 --> 00:01:40,899
<font color="#CCCCCC">you'd binding generator will help you</font>

32
00:01:36,970 --> 00:01:42,850
with<font color="#CCCCCC"> that to start us off well a</font>

33
00:01:40,899 --> 00:01:45,910
<font color="#CCCCCC">takeaway I think this talk would be</font><font color="#E5E5E5"> good</font>

34
00:01:42,850 --> 00:01:48,339
for for<font color="#E5E5E5"> us developers for</font><font color="#CCCCCC"> cue developers</font>

35
00:01:45,910 --> 00:01:49,959
for people developing cute<font color="#E5E5E5"> because I</font>

36
00:01:48,340 --> 00:01:51,910
think they can<font color="#CCCCCC"> learn</font><font color="#E5E5E5"> and not a lot from</font>

37
00:01:49,959 --> 00:01:53,740
the worst language<font color="#E5E5E5"> but also people who</font>

38
00:01:51,910 --> 00:01:56,800
<font color="#CCCCCC">are interested in writing a native cused</font>

39
00:01:53,740 --> 00:01:58,958
<font color="#E5E5E5">native rust UI learning from what cute</font>

40
00:01:56,800 --> 00:02:00,789
has done<font color="#E5E5E5"> over the</font><font color="#CCCCCC"> past 20 years could</font>

41
00:01:58,959 --> 00:02:03,550
also<font color="#E5E5E5"> be very insightful</font><font color="#CCCCCC"> so for them I</font>

42
00:02:00,789 --> 00:02:05,800
<font color="#E5E5E5">hope this talk is also one that</font><font color="#CCCCCC"> has some</font>

43
00:02:03,550 --> 00:02:08,889
<font color="#E5E5E5">nice</font><font color="#CCCCCC"> messages so here are three</font>

44
00:02:05,800 --> 00:02:11,140
applications<font color="#E5E5E5"> this is a tiny</font><font color="#CCCCCC"> one that I</font>

45
00:02:08,889 --> 00:02:14,319
blogged<font color="#E5E5E5"> a while back and which was also</font>

46
00:02:11,140 --> 00:02:16,450
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> west reddit</font><font color="#E5E5E5"> as a tutorial this is</font>

47
00:02:14,319 --> 00:02:18,958
basically a<font color="#CCCCCC"> qml application i'll explain</font>

48
00:02:16,450 --> 00:02:22,690
later<font color="#E5E5E5"> what</font><font color="#CCCCCC"> qml is that is powered by</font>

49
00:02:18,959 --> 00:02:24,640
rust<font color="#E5E5E5"> and all that was does here is it</font>

50
00:02:22,690 --> 00:02:26,620
has a threat and it gives some seconds

51
00:02:24,640 --> 00:02:28,559
<font color="#E5E5E5">every second has an event and then this</font>

52
00:02:26,620 --> 00:02:31,340
<font color="#E5E5E5">rust mogul rotates</font>

53
00:02:28,560 --> 00:02:34,770
the rustic<font color="#CCCCCC"> you'd binding generator</font>

54
00:02:31,340 --> 00:02:37,200
<font color="#E5E5E5">repository has a demo</font><font color="#CCCCCC"> application which</font>

55
00:02:34,770 --> 00:02:40,590
showcases all the different styles<font color="#CCCCCC"> of</font>

56
00:02:37,200 --> 00:02:42,810
widgets you have in cute<font color="#E5E5E5"> so this is just</font>

57
00:02:40,590 --> 00:02:46,140
a different<font color="#E5E5E5"> styling but you can also use</font>

58
00:02:42,810 --> 00:02:48,150
cute quick which is a type of<font color="#CCCCCC"> widget</font>

59
00:02:46,140 --> 00:02:51,299
that<font color="#E5E5E5"> is very much optimized for your</font>

60
00:02:48,150 --> 00:02:53,700
<font color="#CCCCCC">graphics processor</font><font color="#E5E5E5"> and we also have cute</font>

61
00:02:51,300 --> 00:02:56,690
quick controls<font color="#CCCCCC"> too which is more in line</font>

62
00:02:53,700 --> 00:03:00,209
<font color="#CCCCCC">with what you</font><font color="#E5E5E5"> see on mobile devices</font><font color="#CCCCCC"> and</font>

63
00:02:56,690 --> 00:03:04,380
all of these things are bundled into<font color="#CCCCCC"> one</font>

64
00:03:00,209 --> 00:03:07,560
application here but later<font color="#CCCCCC"> on</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> this</font>

65
00:03:04,380 --> 00:03:09,329
<font color="#CCCCCC">talk will mostly be talking about this</font>

66
00:03:07,560 --> 00:03:12,000
<font color="#E5E5E5">demo application we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to walk</font>

67
00:03:09,330 --> 00:03:15,750
through<font color="#CCCCCC"> how to write code like</font><font color="#E5E5E5"> this to</font>

68
00:03:12,000 --> 00:03:21,360
power a<font color="#E5E5E5"> to-do application with</font><font color="#CCCCCC"> rusts</font><font color="#E5E5E5"> and</font>

69
00:03:15,750 --> 00:03:24,390
cute<font color="#E5E5E5"> so back to the slides</font><font color="#CCCCCC"> the goal of</font>

70
00:03:21,360 --> 00:03:26,850
this project<font color="#E5E5E5"> was to</font><font color="#CCCCCC"> find a way to write</font>

71
00:03:24,390 --> 00:03:28,380
programs<font color="#E5E5E5"> that combine</font><font color="#CCCCCC"> queue robust</font><font color="#E5E5E5"> but</font>

72
00:03:26,850 --> 00:03:30,750
since I<font color="#E5E5E5"> was doing in the server as a</font>

73
00:03:28,380 --> 00:03:33,000
hobby it should be a small effort<font color="#E5E5E5"> to</font>

74
00:03:30,750 --> 00:03:34,620
create this tool but<font color="#E5E5E5"> when it's finished</font>

75
00:03:33,000 --> 00:03:37,049
<font color="#CCCCCC">it</font><font color="#E5E5E5"> should also be small I had to</font>

76
00:03:34,620 --> 00:03:38,640
actually<font color="#E5E5E5"> use it it should be easy</font><font color="#CCCCCC"> to</font>

77
00:03:37,049 --> 00:03:41,600
combine<font color="#E5E5E5"> these two languages even though</font>

78
00:03:38,640 --> 00:03:43,679
C++ and was<font color="#CCCCCC"> arrests also very different</font>

79
00:03:41,600 --> 00:03:46,440
<font color="#CCCCCC">it should be</font><font color="#E5E5E5"> simple with minimal</font>

80
00:03:43,680 --> 00:03:47,910
dependencies and this is<font color="#E5E5E5"> very important</font>

81
00:03:46,440 --> 00:03:50,450
to me<font color="#CCCCCC"> the</font><font color="#E5E5E5"> end result should be that</font><font color="#CCCCCC"> you</font>

82
00:03:47,910 --> 00:03:55,140
<font color="#E5E5E5">write good cute code and good worst code</font>

83
00:03:50,450 --> 00:03:59,130
and and not rust<font color="#E5E5E5"> with ugly cute or cute</font>

84
00:03:55,140 --> 00:04:00,200
with ugly rust so<font color="#E5E5E5"> where what is</font><font color="#CCCCCC"> cute and</font>

85
00:03:59,130 --> 00:04:02,549
<font color="#E5E5E5">where is it used</font>

86
00:04:00,200 --> 00:04:07,679
<font color="#E5E5E5">these are logos from</font><font color="#CCCCCC"> some of the</font>

87
00:04:02,549 --> 00:04:09,690
projects that<font color="#CCCCCC"> are using cute here's one</font>

88
00:04:07,680 --> 00:04:14,579
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Lena Stovall's helps coding VLC you</font>

89
00:04:09,690 --> 00:04:18,260
all know the KDE<font color="#E5E5E5"> community is basically</font>

90
00:04:14,579 --> 00:04:20,090
built on cute<font color="#CCCCCC"> the the plasma desktop</font>

91
00:04:18,260 --> 00:04:23,400
<font color="#E5E5E5">uses cutes</font>

92
00:04:20,089 --> 00:04:25,710
<font color="#CCCCCC">you can write 3d applications</font><font color="#E5E5E5"> with cute</font>

93
00:04:23,400 --> 00:04:28,500
and there you<font color="#CCCCCC"> have a sort of state state</font>

94
00:04:25,710 --> 00:04:32,750
machine<font color="#E5E5E5"> to steer everything so it's a</font>

95
00:04:28,500 --> 00:04:35,930
very rich<font color="#CCCCCC"> very large set</font><font color="#E5E5E5"> of libraries to</font>

96
00:04:32,750 --> 00:04:38,580
<font color="#CCCCCC">write your user interface in and</font>

97
00:04:35,930 --> 00:04:41,450
therefore<font color="#CCCCCC"> it</font><font color="#E5E5E5"> would be great if you could</font>

98
00:04:38,580 --> 00:04:44,280
use it with worst

99
00:04:41,450 --> 00:04:46,620
also in the embedded<font color="#E5E5E5"> world cute is used</font>

100
00:04:44,280 --> 00:04:48,450
a lot<font color="#E5E5E5"> here's a picture</font><font color="#CCCCCC"> from a promo</font>

101
00:04:46,620 --> 00:04:50,400
video and you see<font color="#E5E5E5"> that they're</font><font color="#CCCCCC"> pointing</font>

102
00:04:48,450 --> 00:04:52,650
the cute<font color="#E5E5E5"> logos and lots of parts of the</font>

103
00:04:50,400 --> 00:04:54,179
car<font color="#E5E5E5"> not exactly sure</font><font color="#CCCCCC"> what they</font><font color="#E5E5E5"> mean by</font>

104
00:04:52,650 --> 00:04:56,960
<font color="#CCCCCC">that but I think the overall message</font><font color="#E5E5E5"> is</font>

105
00:04:54,180 --> 00:04:59,780
we have some<font color="#CCCCCC"> low-power processors and</font>

106
00:04:56,960 --> 00:05:02,489
display on it and we power<font color="#E5E5E5"> it with cute</font>

107
00:04:59,780 --> 00:05:05,369
<font color="#E5E5E5">so you can also put it</font><font color="#CCCCCC"> on your fridge or</font>

108
00:05:02,490 --> 00:05:08,190
<font color="#E5E5E5">on</font><font color="#CCCCCC"> your thermostat whatever there are</font>

109
00:05:05,370 --> 00:05:10,620
tons of bindings already for cute<font color="#E5E5E5"> lots</font>

110
00:05:08,190 --> 00:05:13,740
of different<font color="#E5E5E5"> languages and yeah why do</font>

111
00:05:10,620 --> 00:05:15,510
you normally<font color="#CCCCCC"> have bindings do</font><font color="#E5E5E5"> you want</font>

112
00:05:13,740 --> 00:05:16,140
to use a<font color="#E5E5E5"> language which is</font><font color="#CCCCCC"> more familiar</font>

113
00:05:15,510 --> 00:05:18,390
to<font color="#E5E5E5"> you</font>

114
00:05:16,140 --> 00:05:19,830
cute itself is<font color="#E5E5E5"> written in C++</font><font color="#CCCCCC"> and maybe</font>

115
00:05:18,390 --> 00:05:22,500
you're more<font color="#E5E5E5"> familiar with one of</font><font color="#CCCCCC"> the</font>

116
00:05:19,830 --> 00:05:24,960
languages<font color="#E5E5E5"> on top here or you have a</font>

117
00:05:22,500 --> 00:05:28,380
large<font color="#E5E5E5"> project and maybe all the guys</font>

118
00:05:24,960 --> 00:05:30,180
from<font color="#CCCCCC"> the lots of logos before those</font><font color="#E5E5E5"> are</font>

119
00:05:28,380 --> 00:05:32,550
existing<font color="#E5E5E5"> projects are interested in</font>

120
00:05:30,180 --> 00:05:35,070
adding some<font color="#CCCCCC"> rust</font><font color="#E5E5E5"> into that into the mix</font>

121
00:05:32,550 --> 00:05:37,830
<font color="#E5E5E5">into</font><font color="#CCCCCC"> the projects so you</font><font color="#E5E5E5"> might want to</font>

122
00:05:35,070 --> 00:05:39,840
combine<font color="#E5E5E5"> existing code with it and then</font>

123
00:05:37,830 --> 00:05:42,900
you also<font color="#E5E5E5"> need a library the typical</font>

124
00:05:39,840 --> 00:05:45,539
<font color="#CCCCCC">approach to do a binding is to take the</font>

125
00:05:42,900 --> 00:05:47,070
cute<font color="#CCCCCC"> c++ base</font><font color="#E5E5E5"> build a binding on top and</font>

126
00:05:45,540 --> 00:05:49,710
then<font color="#E5E5E5"> put the other language there and</font>

127
00:05:47,070 --> 00:05:52,260
that's not the approach<font color="#E5E5E5"> I'm going to</font>

128
00:05:49,710 --> 00:05:55,409
take here<font color="#E5E5E5"> and I'll explain</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> what we</font>

129
00:05:52,260 --> 00:05:58,110
are going<font color="#E5E5E5"> to do well I guess you know</font>

130
00:05:55,410 --> 00:05:58,620
these advantages by heart<font color="#CCCCCC"> why is</font><font color="#E5E5E5"> what so</font>

131
00:05:58,110 --> 00:06:02,340
cool

132
00:05:58,620 --> 00:06:04,650
it's<font color="#CCCCCC"> very safe one of my favorite things</font>

133
00:06:02,340 --> 00:06:06,840
the<font color="#E5E5E5"> first is the algebraic data types</font>

134
00:06:04,650 --> 00:06:08,760
also<font color="#E5E5E5"> known as simply the</font><font color="#CCCCCC"> in amps that's</font>

135
00:06:06,840 --> 00:06:11,700
something that<font color="#CCCCCC"> c++ simply doesn't</font><font color="#E5E5E5"> have I</font>

136
00:06:08,760 --> 00:06:14,130
think<font color="#E5E5E5"> it's great the markers are very</font>

137
00:06:11,700 --> 00:06:18,060
clever<font color="#CCCCCC"> cargo</font><font color="#E5E5E5"> is great but all of these</font>

138
00:06:14,130 --> 00:06:20,030
<font color="#E5E5E5">things are not</font><font color="#CCCCCC"> really there in</font><font color="#E5E5E5"> C++ but</font>

139
00:06:18,060 --> 00:06:22,290
at least not<font color="#CCCCCC"> in the way that</font><font color="#E5E5E5"> Q uses them</font>

140
00:06:20,030 --> 00:06:23,909
<font color="#E5E5E5">it's a great</font><font color="#CCCCCC"> library but these</font>

141
00:06:22,290 --> 00:06:26,610
innovations in rust simply haven't<font color="#E5E5E5"> made</font>

142
00:06:23,910 --> 00:06:29,460
it<font color="#E5E5E5"> into cutely yet so if</font><font color="#CCCCCC"> you're going</font><font color="#E5E5E5"> to</font>

143
00:06:26,610 --> 00:06:31,050
make an API of rust<font color="#E5E5E5"> on top of cute then</font>

144
00:06:29,460 --> 00:06:33,289
we're leaving<font color="#E5E5E5"> a lot of advantages on the</font>

145
00:06:31,050 --> 00:06:36,600
table so<font color="#E5E5E5"> that's why I think</font><font color="#CCCCCC"> that</font>

146
00:06:33,290 --> 00:06:38,460
<font color="#E5E5E5">wrapping a cute API</font><font color="#CCCCCC"> in rust would be</font>

147
00:06:36,600 --> 00:06:41,580
like fitting a square peg in a round

148
00:06:38,460 --> 00:06:44,609
hole<font color="#E5E5E5"> that's not going to work but</font>

149
00:06:41,580 --> 00:06:47,599
there's a solution<font color="#E5E5E5"> what we could do is</font>

150
00:06:44,610 --> 00:06:50,460
just<font color="#E5E5E5"> shine a light differently on it and</font>

151
00:06:47,600 --> 00:06:53,280
well here's the square<font color="#CCCCCC"> year's round</font>

152
00:06:50,460 --> 00:06:55,489
<font color="#CCCCCC">great we just put some</font><font color="#E5E5E5"> JSON in the</font>

153
00:06:53,280 --> 00:06:55,489
middle

154
00:06:55,520 --> 00:07:01,020
so yeah how will<font color="#E5E5E5"> that work</font><font color="#CCCCCC"> okay so we're</font>

155
00:06:59,940 --> 00:07:03,240
<font color="#E5E5E5">going to do the binding</font><font color="#CCCCCC"> in two</font>

156
00:07:01,020 --> 00:07:05,490
directions<font color="#CCCCCC"> first</font><font color="#E5E5E5"> you're gonna write your</font>

157
00:07:03,240 --> 00:07:07,710
<font color="#CCCCCC">data</font><font color="#E5E5E5"> model in JSON and I'll show you</font>

158
00:07:05,490 --> 00:07:09,509
later<font color="#E5E5E5"> how to do that and then you</font>

159
00:07:07,710 --> 00:07:12,359
<font color="#CCCCCC">generate bindings</font><font color="#E5E5E5"> from that and these</font>

160
00:07:09,509 --> 00:07:14,880
bindings<font color="#E5E5E5"> talk to your user</font><font color="#CCCCCC"> interface and</font>

161
00:07:12,360 --> 00:07:16,410
to<font color="#E5E5E5"> us and all the purple boxes here</font>

162
00:07:14,880 --> 00:07:18,600
stuff that you have to<font color="#CCCCCC"> write so if you</font>

163
00:07:16,410 --> 00:07:20,970
came<font color="#E5E5E5"> in here thinking I'm gonna write a</font>

164
00:07:18,600 --> 00:07:22,680
user<font color="#E5E5E5"> interface only</font><font color="#CCCCCC"> arrest</font><font color="#E5E5E5"> that's not</font>

165
00:07:20,970 --> 00:07:25,080
what<font color="#E5E5E5"> this talk is about</font><font color="#CCCCCC"> you still will</font>

166
00:07:22,680 --> 00:07:27,150
have to either<font color="#E5E5E5"> use</font><font color="#CCCCCC"> qml which is a very</font>

167
00:07:25,080 --> 00:07:30,120
nice<font color="#CCCCCC"> declarative language</font><font color="#E5E5E5"> or cute which</font>

168
00:07:27,150 --> 00:07:31,859
is<font color="#CCCCCC"> C++ on top of your rust but the</font>

169
00:07:30,120 --> 00:07:34,620
advantage<font color="#E5E5E5"> is if you take this</font><font color="#CCCCCC"> approach</font>

170
00:07:31,860 --> 00:07:37,680
<font color="#E5E5E5">then you have separated the logic of</font>

171
00:07:34,620 --> 00:07:39,270
<font color="#E5E5E5">your application very well and if you</font>

172
00:07:37,680 --> 00:07:42,810
want<font color="#CCCCCC"> you could also</font><font color="#E5E5E5"> put then</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> different</font>

173
00:07:39,270 --> 00:07:46,258
you<font color="#E5E5E5"> are on top like HTML so this is the</font>

174
00:07:42,810 --> 00:07:48,750
approach we're going to take now<font color="#CCCCCC"> I need</font>

175
00:07:46,259 --> 00:07:50,820
to explain a bit<font color="#E5E5E5"> about the core</font>

176
00:07:48,750 --> 00:07:54,870
principle<font color="#E5E5E5"> of how cute works the basic</font>

177
00:07:50,820 --> 00:07:59,130
thing in cute is<font color="#CCCCCC"> Q objects a Q object is</font>

178
00:07:54,870 --> 00:08:02,159
a class and you can<font color="#E5E5E5"> give it</font><font color="#CCCCCC"> signals and</font>

179
00:07:59,130 --> 00:08:05,580
slots<font color="#E5E5E5"> and outside of cute people call</font>

180
00:08:02,159 --> 00:08:07,650
these things events<font color="#E5E5E5"> and listeners</font><font color="#CCCCCC"> and so</font>

181
00:08:05,580 --> 00:08:10,948
you combine<font color="#E5E5E5"> build a loosely coupled</font>

182
00:08:07,650 --> 00:08:12,270
system and<font color="#E5E5E5"> it's loosely coupled if one</font>

183
00:08:10,949 --> 00:08:14,430
of the object is<font color="#CCCCCC"> destroyed then the</font>

184
00:08:12,270 --> 00:08:17,010
<font color="#E5E5E5">connection is broken</font><font color="#CCCCCC"> it's the same as</font>

185
00:08:14,430 --> 00:08:19,289
what<font color="#CCCCCC"> you have in JavaScript I imagine so</font>

186
00:08:17,010 --> 00:08:21,510
<font color="#CCCCCC">it takes you have</font><font color="#E5E5E5"> memory manager because</font>

187
00:08:19,289 --> 00:08:22,889
you have hierarchical ownership you just

188
00:08:21,510 --> 00:08:24,240
say when you create something<font color="#CCCCCC"> this is</font>

189
00:08:22,889 --> 00:08:27,090
the<font color="#E5E5E5"> parent where you destroyed the whole</font>

190
00:08:24,240 --> 00:08:29,909
<font color="#E5E5E5">hayek hierarchies destroyed and objects</font>

191
00:08:27,090 --> 00:08:31,739
have properties<font color="#E5E5E5"> now there's</font><font color="#CCCCCC"> another</font>

192
00:08:29,909 --> 00:08:34,349
important building block in cute and

193
00:08:31,740 --> 00:08:37,140
that's the<font color="#CCCCCC"> cue abstract</font><font color="#E5E5E5"> item model</font><font color="#CCCCCC"> a</font>

194
00:08:34,349 --> 00:08:40,289
long complex name but<font color="#CCCCCC"> basically what it</font>

195
00:08:37,140 --> 00:08:45,000
<font color="#CCCCCC">is it's the</font><font color="#E5E5E5"> way data is represented from</font>

196
00:08:40,289 --> 00:08:47,670
your logic to to the user interface<font color="#CCCCCC"> and</font>

197
00:08:45,000 --> 00:08:50,970
it's used everywhere<font color="#E5E5E5"> so here is a table</font>

198
00:08:47,670 --> 00:08:53,339
<font color="#E5E5E5">and a</font><font color="#CCCCCC"> graph and there's one data model</font>

199
00:08:50,970 --> 00:08:55,950
underneath which is<font color="#E5E5E5"> an implementation of</font>

200
00:08:53,339 --> 00:08:59,010
this model<font color="#E5E5E5"> and it's used in</font><font color="#CCCCCC"> two places</font>

201
00:08:55,950 --> 00:09:01,230
<font color="#E5E5E5">in a very different way and here you see</font>

202
00:08:59,010 --> 00:09:02,520
a table<font color="#CCCCCC"> I'm not sure if everybody</font><font color="#E5E5E5"> in the</font>

203
00:09:01,230 --> 00:09:04,200
back and see it here<font color="#E5E5E5"> but one of the</font>

204
00:09:02,520 --> 00:09:06,510
cells on the table<font color="#E5E5E5"> shows a percentage</font>

205
00:09:04,200 --> 00:09:07,970
<font color="#CCCCCC">and</font><font color="#E5E5E5"> it's filled partially and that's</font>

206
00:09:06,510 --> 00:09:09,889
also<font color="#CCCCCC"> a trick</font><font color="#E5E5E5"> we</font>

207
00:09:07,970 --> 00:09:12,769
she's implemented on the<font color="#E5E5E5"> UI level but</font>

208
00:09:09,889 --> 00:09:14,629
the data underneath<font color="#E5E5E5"> is provided by this</font>

209
00:09:12,769 --> 00:09:17,060
abstract item model and you<font color="#E5E5E5"> can also</font>

210
00:09:14,629 --> 00:09:19,009
have trees<font color="#E5E5E5"> so this is used everywhere in</font>

211
00:09:17,060 --> 00:09:22,310
cute but it's kind of<font color="#E5E5E5"> hard to implement</font>

212
00:09:19,009 --> 00:09:25,370
<font color="#CCCCCC">even if you just do it in C++</font><font color="#E5E5E5"> so the</font>

213
00:09:22,310 --> 00:09:27,410
tool<font color="#E5E5E5"> that I'm presenting is focusing</font>

214
00:09:25,370 --> 00:09:29,019
<font color="#CCCCCC">very strongly</font><font color="#E5E5E5"> on making it easy to do</font>

215
00:09:27,410 --> 00:09:32,329
<font color="#E5E5E5">this</font>

216
00:09:29,019 --> 00:09:36,560
so<font color="#E5E5E5"> yet basically you can even forget</font>

217
00:09:32,329 --> 00:09:38,508
about this<font color="#E5E5E5"> and just know that we're</font>

218
00:09:36,560 --> 00:09:43,699
gonna<font color="#E5E5E5"> build a model which</font><font color="#CCCCCC"> gives you all</font>

219
00:09:38,509 --> 00:09:45,649
<font color="#CCCCCC">of that okay so how it's gonna work</font><font color="#E5E5E5"> we</font>

220
00:09:43,699 --> 00:09:48,170
write a<font color="#E5E5E5"> model description in Jason and</font>

221
00:09:45,649 --> 00:09:50,629
then<font color="#E5E5E5"> the tool would generate a binding</font>

222
00:09:48,170 --> 00:09:53,660
dot H and<font color="#CCCCCC"> a</font><font color="#E5E5E5"> binding dot CPP file which</font>

223
00:09:50,629 --> 00:09:56,480
we use in our C++ code and an interface

224
00:09:53,660 --> 00:09:59,170
RS which will contain a trait<font color="#E5E5E5"> a rust</font>

225
00:09:56,480 --> 00:10:01,790
<font color="#CCCCCC">trait which</font><font color="#E5E5E5"> you have to implement and</font>

226
00:09:59,170 --> 00:10:03,949
then you compile your<font color="#E5E5E5"> rust code into a</font>

227
00:10:01,790 --> 00:10:07,219
static<font color="#CCCCCC"> library which you link to your</font>

228
00:10:03,949 --> 00:10:11,209
C++<font color="#E5E5E5"> application and you either import it</font>

229
00:10:07,220 --> 00:10:14,360
with binding dot<font color="#E5E5E5"> H or if you're using</font>

230
00:10:11,209 --> 00:10:15,888
<font color="#CCCCCC">qml with import rust code the</font><font color="#E5E5E5"> rest code</font>

231
00:10:14,360 --> 00:10:17,689
is<font color="#CCCCCC"> name you can use</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can think</font><font color="#E5E5E5"> of</font>

232
00:10:15,889 --> 00:10:25,759
yourself<font color="#CCCCCC"> just this</font><font color="#E5E5E5"> is what I use in</font><font color="#CCCCCC"> my</font>

233
00:10:17,689 --> 00:10:29,889
examples briefly about<font color="#CCCCCC"> qml cute modeling</font>

234
00:10:25,759 --> 00:10:32,809
language this<font color="#E5E5E5"> is a very nice innovation</font>

235
00:10:29,889 --> 00:10:36,110
which was<font color="#E5E5E5"> triggered when Nokia bought</font>

236
00:10:32,809 --> 00:10:38,329
cute<font color="#CCCCCC"> they wanted</font><font color="#E5E5E5"> to make phones with</font>

237
00:10:36,110 --> 00:10:40,759
very performant<font color="#E5E5E5"> and easy to write user</font>

238
00:10:38,329 --> 00:10:42,829
interfaces<font color="#E5E5E5"> so what they did is they came</font>

239
00:10:40,759 --> 00:10:47,230
up with<font color="#CCCCCC"> a declarative user interface</font>

240
00:10:42,829 --> 00:10:50,180
<font color="#CCCCCC">language</font><font color="#E5E5E5"> and it can do to</font><font color="#CCCCCC"> the do to deal</font>

241
00:10:47,230 --> 00:10:51,740
programs or 3d even<font color="#E5E5E5"> and it's used in</font>

242
00:10:50,180 --> 00:10:54,050
<font color="#E5E5E5">lots of mobile applications so it</font>

243
00:10:51,740 --> 00:10:55,790
started<font color="#E5E5E5"> off at Nokia megaphones the</font>

244
00:10:54,050 --> 00:10:59,449
<font color="#CCCCCC">Boonta</font><font color="#E5E5E5"> phones are using it everywhere</font>

245
00:10:55,790 --> 00:11:02,089
sailfish<font color="#E5E5E5"> KDE plasma desktop KDE plasma</font>

246
00:10:59,449 --> 00:11:04,508
mobile and you<font color="#E5E5E5"> can also use it for iOS</font>

247
00:11:02,089 --> 00:11:06,889
and Android apps<font color="#E5E5E5"> if you like that stuff</font>

248
00:11:04,509 --> 00:11:10,309
<font color="#E5E5E5">which apparently is the majority of the</font>

249
00:11:06,889 --> 00:11:12,970
people<font color="#CCCCCC"> it's designed for efficiency</font><font color="#E5E5E5"> on</font>

250
00:11:10,309 --> 00:11:15,199
graphics cards<font color="#E5E5E5"> so and that's actually</font>

251
00:11:12,970 --> 00:11:17,899
when we're talking about rust is not

252
00:11:15,199 --> 00:11:21,120
unlike web render which is as quite a

253
00:11:17,899 --> 00:11:24,760
lot<font color="#CCCCCC"> of similarities in the ways design</font>

254
00:11:21,120 --> 00:11:26,740
<font color="#CCCCCC">okay so now we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to write a</font><font color="#E5E5E5"> small</font>

255
00:11:24,760 --> 00:11:29,890
application<font color="#E5E5E5"> so you understand a</font><font color="#CCCCCC"> bit more</font>

256
00:11:26,740 --> 00:11:32,560
<font color="#E5E5E5">of how all of this works together</font><font color="#CCCCCC"> this</font>

257
00:11:29,890 --> 00:11:38,050
is a to do application<font color="#CCCCCC"> and this</font>

258
00:11:32,560 --> 00:11:42,760
<font color="#E5E5E5">application there is a website called to</font>

259
00:11:38,050 --> 00:11:44,740
do MVC comm<font color="#E5E5E5"> where the same specification</font>

260
00:11:42,760 --> 00:11:48,370
is implemented in like 20 or 30

261
00:11:44,740 --> 00:11:50,140
different<font color="#CCCCCC"> JavaScript frameworks</font><font color="#E5E5E5"> and I</font>

262
00:11:48,370 --> 00:11:53,950
took<font color="#E5E5E5"> that</font><font color="#CCCCCC"> specification and implemented</font>

263
00:11:50,140 --> 00:11:55,270
<font color="#E5E5E5">this with</font><font color="#CCCCCC"> qml rust</font><font color="#E5E5E5"> just because I didn't</font>

264
00:11:53,950 --> 00:11:56,950
really<font color="#CCCCCC"> know what I should write</font><font color="#E5E5E5"> I</font>

265
00:11:55,270 --> 00:11:58,810
thought well here's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> specification</font>

266
00:11:56,950 --> 00:12:02,070
already given let's just implement that

267
00:11:58,810 --> 00:12:05,560
and I can look at application here a bit

268
00:12:02,070 --> 00:12:09,550
so what else should<font color="#E5E5E5"> I need to do well</font>

269
00:12:05,560 --> 00:12:12,640
keep talking<font color="#E5E5E5"> I</font><font color="#CCCCCC"> guess</font><font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> tick</font>

270
00:12:09,550 --> 00:12:15,010
off<font color="#E5E5E5"> stuff here and you can just see the</font>

271
00:12:12,640 --> 00:12:17,590
active parts<font color="#E5E5E5"> or only the completed ones</font>

272
00:12:15,010 --> 00:12:20,830
<font color="#CCCCCC">I can come clear the stuff that's</font>

273
00:12:17,590 --> 00:12:23,440
completed<font color="#E5E5E5"> go back to all I can toggle</font>

274
00:12:20,830 --> 00:12:26,350
here<font color="#E5E5E5"> everything so it has some basic</font>

275
00:12:23,440 --> 00:12:28,720
<font color="#E5E5E5">functionality and this is the UI part of</font>

276
00:12:26,350 --> 00:12:33,310
<font color="#E5E5E5">this is about 150 lines of code and the</font>

277
00:12:28,720 --> 00:12:34,750
model beneath<font color="#E5E5E5"> is is fairly simple so if</font>

278
00:12:33,310 --> 00:12:37,719
you want<font color="#E5E5E5"> to build this how do we start</font>

279
00:12:34,750 --> 00:12:42,160
first<font color="#E5E5E5"> we need to write the binding where</font>

280
00:12:37,720 --> 00:12:45,310
we<font color="#E5E5E5"> describe a model now the object we</font>

281
00:12:42,160 --> 00:12:47,740
call todos and the type will<font color="#CCCCCC"> be a list</font>

282
00:12:45,310 --> 00:12:50,260
we have a list of to-do items what you

283
00:12:47,740 --> 00:12:54,310
can put here is either an object which

284
00:12:50,260 --> 00:12:55,630
<font color="#E5E5E5">is</font><font color="#CCCCCC"> only one item</font><font color="#E5E5E5"> or a list or a tree the</font>

285
00:12:54,310 --> 00:12:57,280
it will have properties and the

286
00:12:55,630 --> 00:12:58,990
properties<font color="#CCCCCC"> are there</font><font color="#E5E5E5"> should be a count</font>

287
00:12:57,280 --> 00:13:00,790
of a number of<font color="#E5E5E5"> items</font><font color="#CCCCCC"> and the active</font>

288
00:12:58,990 --> 00:13:03,880
count<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> items I</font>

289
00:13:00,790 --> 00:13:06,610
still need to do and every item<font color="#E5E5E5"> in the</font>

290
00:13:03,880 --> 00:13:09,580
list is either<font color="#E5E5E5"> completed or</font><font color="#CCCCCC"> not so this</font>

291
00:13:06,610 --> 00:13:15,640
is a boolean<font color="#E5E5E5"> field and it has a text a</font>

292
00:13:09,580 --> 00:13:17,620
description probably some people<font color="#E5E5E5"> here</font>

293
00:13:15,640 --> 00:13:20,230
are thinking why<font color="#CCCCCC"> not just write</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> macro</font>

294
00:13:17,620 --> 00:13:23,470
<font color="#CCCCCC">well maybe we'll do that at some</font><font color="#E5E5E5"> point</font>

295
00:13:20,230 --> 00:13:28,960
<font color="#E5E5E5">but for</font><font color="#CCCCCC"> now it's just adjacent</font>

296
00:13:23,470 --> 00:13:30,640
description okay let's<font color="#E5E5E5"> check off now we</font>

297
00:13:28,960 --> 00:13:33,370
need to<font color="#E5E5E5"> run the generator</font>

298
00:13:30,640 --> 00:13:34,180
so that's just<font color="#E5E5E5"> one executable you call</font>

299
00:13:33,370 --> 00:13:37,839
it with<font color="#E5E5E5"> the file</font>

300
00:13:34,180 --> 00:13:39,819
and this is set up<font color="#CCCCCC"> like this so that</font><font color="#E5E5E5"> you</font>

301
00:13:37,839 --> 00:13:42,760
<font color="#E5E5E5">can integrate it at</font><font color="#CCCCCC"> sea make or hit</font>

302
00:13:39,820 --> 00:13:44,860
<font color="#CCCCCC">cargo</font><font color="#E5E5E5"> and build RS and this generates so</font>

303
00:13:42,760 --> 00:13:46,720
these three files that<font color="#CCCCCC"> I mentioned and</font>

304
00:13:44,860 --> 00:13:49,300
then what I need<font color="#CCCCCC"> to do is I need to</font>

305
00:13:46,720 --> 00:13:53,740
<font color="#E5E5E5">write an implementation dot RS which is</font>

306
00:13:49,300 --> 00:13:55,479
a<font color="#CCCCCC"> rust file</font><font color="#E5E5E5"> okay now we're going to look</font>

307
00:13:53,740 --> 00:13:57,610
inside<font color="#E5E5E5"> the three generated files and</font>

308
00:13:55,480 --> 00:13:59,230
they're gonna look a bit complicated but

309
00:13:57,610 --> 00:14:02,260
<font color="#CCCCCC">you don't have to do that it's</font><font color="#E5E5E5"> just to</font>

310
00:13:59,230 --> 00:14:05,350
<font color="#CCCCCC">show you a bit of</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> it goes</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> goes</font>

311
00:14:02,260 --> 00:14:08,560
on underneath<font color="#E5E5E5"> so this is a bit of C++</font>

312
00:14:05,350 --> 00:14:12,430
<font color="#CCCCCC">it's the class two deuce</font><font color="#E5E5E5"> and it</font>

313
00:14:08,560 --> 00:14:14,649
implements<font color="#CCCCCC"> abstract</font><font color="#E5E5E5"> item model</font><font color="#CCCCCC"> it has a</font>

314
00:14:12,430 --> 00:14:17,890
constructor<font color="#CCCCCC"> a destructor</font><font color="#E5E5E5"> it declares and</font>

315
00:14:14,649 --> 00:14:19,480
properties and<font color="#CCCCCC"> it declares also some</font>

316
00:14:17,890 --> 00:14:22,930
functions for setting and getting<font color="#CCCCCC"> the</font>

317
00:14:19,480 --> 00:14:25,770
values so this<font color="#E5E5E5"> is fairly simple</font><font color="#CCCCCC"> and</font>

318
00:14:22,930 --> 00:14:29,529
there's an implementation<font color="#E5E5E5"> along with it</font>

319
00:14:25,770 --> 00:14:31,810
<font color="#E5E5E5">so here is the foreign function</font>

320
00:14:29,529 --> 00:14:35,140
<font color="#E5E5E5">interface that talks to us so these</font>

321
00:14:31,810 --> 00:14:37,569
<font color="#CCCCCC">functions are declared in the C++</font><font color="#E5E5E5"> part</font>

322
00:14:35,140 --> 00:14:39,220
and should be implemented by<font color="#E5E5E5"> rust you</font>

323
00:14:37,570 --> 00:14:40,750
also won't have<font color="#E5E5E5"> to do this but this is</font>

324
00:14:39,220 --> 00:14:44,020
<font color="#CCCCCC">the point</font><font color="#E5E5E5"> where the two languages meet</font>

325
00:14:40,750 --> 00:14:47,920
where they connect up and here is a bit

326
00:14:44,020 --> 00:14:51,970
<font color="#E5E5E5">of example code which is typical for</font>

327
00:14:47,920 --> 00:14:54,670
<font color="#CCCCCC">this</font><font color="#E5E5E5"> data model you have the class and</font>

328
00:14:51,970 --> 00:14:57,370
as a<font color="#E5E5E5"> function data you give it an index</font>

329
00:14:54,670 --> 00:15:01,540
and<font color="#E5E5E5"> a world and the role can be</font><font color="#CCCCCC"> I would</font>

330
00:14:57,370 --> 00:15:03,670
like to have a display<font color="#E5E5E5"> or a color or in</font>

331
00:15:01,540 --> 00:15:05,140
our<font color="#E5E5E5"> case</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> description or if it's</font>

332
00:15:03,670 --> 00:15:08,260
<font color="#E5E5E5">completed or not that can also be your</font>

333
00:15:05,140 --> 00:15:10,510
<font color="#E5E5E5">world and</font><font color="#CCCCCC"> then here's</font><font color="#E5E5E5"> a big switch</font>

334
00:15:08,260 --> 00:15:13,450
statement<font color="#E5E5E5"> which calls into</font><font color="#CCCCCC"> the rest code</font>

335
00:15:10,510 --> 00:15:15,939
so it calls<font color="#E5E5E5"> to rust and asks get me the</font>

336
00:15:13,450 --> 00:15:19,180
completed<font color="#CCCCCC"> version for this index or the</font>

337
00:15:15,940 --> 00:15:21,250
<font color="#E5E5E5">description</font><font color="#CCCCCC"> for this index</font><font color="#E5E5E5"> and again all</font>

338
00:15:19,180 --> 00:15:22,620
of this is generated so<font color="#CCCCCC"> you don't have</font>

339
00:15:21,250 --> 00:15:25,180
to worry<font color="#E5E5E5"> about it</font>

340
00:15:22,620 --> 00:15:27,760
but how does<font color="#E5E5E5"> it look on the rust side</font>

341
00:15:25,180 --> 00:15:30,729
well on the west side<font color="#E5E5E5"> we have a trait</font>

342
00:15:27,760 --> 00:15:34,270
called the tool to<font color="#CCCCCC"> deuce trait and it</font>

343
00:15:30,730 --> 00:15:37,510
has a constructor which you need<font color="#E5E5E5"> to</font>

344
00:15:34,270 --> 00:15:40,899
<font color="#E5E5E5">implement and it has an emitter the</font>

345
00:15:37,510 --> 00:15:42,760
emitter is<font color="#E5E5E5"> there so that you can emit</font>

346
00:15:40,899 --> 00:15:45,070
signals when something has changed<font color="#CCCCCC"> so</font>

347
00:15:42,760 --> 00:15:47,319
you can signal<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the user interface</font>

348
00:15:45,070 --> 00:15:49,720
<font color="#CCCCCC">that something has changed</font>

349
00:15:47,320 --> 00:15:53,680
for example some item was added<font color="#E5E5E5"> to the</font>

350
00:15:49,720 --> 00:15:56,800
<font color="#E5E5E5">list</font><font color="#CCCCCC"> as functions for inserting worse</font>

351
00:15:53,680 --> 00:16:00,370
and here are the functions to get<font color="#CCCCCC"> the</font>

352
00:15:56,800 --> 00:16:03,040
value if number 1<font color="#E5E5E5"> 2 3 or 5 is completed</font>

353
00:16:00,370 --> 00:16:04,720
or<font color="#CCCCCC"> not and you can</font><font color="#E5E5E5"> set it to be</font>

354
00:16:03,040 --> 00:16:11,140
completed or you can<font color="#E5E5E5"> get the description</font>

355
00:16:04,720 --> 00:16:13,870
<font color="#E5E5E5">or set the description so</font><font color="#CCCCCC"> two items left</font>

356
00:16:11,140 --> 00:16:17,530
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is the work that you will have</font>

357
00:16:13,870 --> 00:16:19,120
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do when you write connection when you</font>

358
00:16:17,530 --> 00:16:21,370
write an<font color="#CCCCCC"> application with rust</font><font color="#E5E5E5"> and cute</font>

359
00:16:19,120 --> 00:16:26,550
<font color="#CCCCCC">so we need to implement the rest part</font>

360
00:16:21,370 --> 00:16:29,020
and the cute<font color="#E5E5E5"> part so</font><font color="#CCCCCC"> hurt the rust part</font>

361
00:16:26,550 --> 00:16:32,170
we<font color="#E5E5E5"> are implementing a list the list has</font>

362
00:16:29,020 --> 00:16:34,680
items<font color="#E5E5E5"> so we just have a struct with a</font>

363
00:16:32,170 --> 00:16:37,420
<font color="#E5E5E5">boolean and a string so far so</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> and</font>

364
00:16:34,680 --> 00:16:39,729
then we have the object<font color="#E5E5E5"> that contains</font>

365
00:16:37,420 --> 00:16:43,060
<font color="#E5E5E5">the whole list of these items</font><font color="#CCCCCC"> and it</font>

366
00:16:39,730 --> 00:16:45,370
also<font color="#E5E5E5"> contains a account of how many</font>

367
00:16:43,060 --> 00:16:50,079
items<font color="#E5E5E5"> have not been finished</font><font color="#CCCCCC"> yet this</font><font color="#E5E5E5"> is</font>

368
00:16:45,370 --> 00:16:54,730
a cached value and it has two objects<font color="#E5E5E5"> to</font>

369
00:16:50,080 --> 00:16:57,880
talk to the<font color="#E5E5E5"> outside so the how now we</font>

370
00:16:54,730 --> 00:17:01,210
implement<font color="#CCCCCC"> implement the</font><font color="#E5E5E5"> trade and this</font>

371
00:16:57,880 --> 00:17:03,040
is<font color="#E5E5E5"> also fairly simple we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to get the</font>

372
00:17:01,210 --> 00:17:05,530
value for the active count and we just

373
00:17:03,040 --> 00:17:07,869
return the value<font color="#E5E5E5"> also</font><font color="#CCCCCC"> for the total</font>

374
00:17:05,530 --> 00:17:10,089
count<font color="#E5E5E5"> we just return the</font><font color="#CCCCCC"> the length of</font>

375
00:17:07,869 --> 00:17:12,399
the list and when we want to know the

376
00:17:10,089 --> 00:17:16,449
description<font color="#CCCCCC"> at a certain index</font><font color="#E5E5E5"> we just</font>

377
00:17:12,400 --> 00:17:18,100
give back that value so<font color="#E5E5E5"> this is quite</font>

378
00:17:16,450 --> 00:17:19,600
<font color="#E5E5E5">straightforward and simple and this is</font>

379
00:17:18,099 --> 00:17:22,449
the part which you<font color="#E5E5E5"> will have to</font>

380
00:17:19,599 --> 00:17:26,159
implement<font color="#CCCCCC"> when you are writing</font><font color="#E5E5E5"> a</font>

381
00:17:22,450 --> 00:17:29,080
connection between<font color="#CCCCCC"> wealth and</font><font color="#E5E5E5"> queues so</font>

382
00:17:26,160 --> 00:17:35,260
how do we do the last bit<font color="#CCCCCC"> of it and</font>

383
00:17:29,080 --> 00:17:37,929
that's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> qml part in our case we have</font>

384
00:17:35,260 --> 00:17:40,060
created this<font color="#CCCCCC"> object and this object we</font>

385
00:17:37,930 --> 00:17:44,080
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to expose</font><font color="#CCCCCC"> to this</font><font color="#E5E5E5"> rust code</font><font color="#CCCCCC"> to this</font>

386
00:17:40,060 --> 00:17:45,940
cute<font color="#E5E5E5"> code so we import the rust code we</font>

387
00:17:44,080 --> 00:17:50,260
have called version<font color="#CCCCCC"> one well you can</font>

388
00:17:45,940 --> 00:17:52,090
give it any number<font color="#CCCCCC"> you like the</font>

389
00:17:50,260 --> 00:17:54,280
<font color="#E5E5E5">application</font><font color="#CCCCCC"> window is</font><font color="#E5E5E5"> basically</font>

390
00:17:52,090 --> 00:17:56,949
something<font color="#E5E5E5"> between</font><font color="#CCCCCC"> brackets here so this</font>

391
00:17:54,280 --> 00:18:00,908
is<font color="#CCCCCC"> qml</font><font color="#E5E5E5"> if in case you've</font><font color="#CCCCCC"> never seen it</font>

392
00:17:56,950 --> 00:18:02,799
it's<font color="#E5E5E5"> a very fairly simple language</font>

393
00:18:00,909 --> 00:18:04,809
here we have our<font color="#E5E5E5"> object so this object</font>

394
00:18:02,799 --> 00:18:09,039
here is what we<font color="#E5E5E5"> have implemented</font><font color="#CCCCCC"> with</font>

395
00:18:04,809 --> 00:18:11,470
<font color="#E5E5E5">rust</font><font color="#CCCCCC"> and we give it an ID</font><font color="#E5E5E5"> so all of our</font>

396
00:18:09,039 --> 00:18:13,869
<font color="#CCCCCC">to-do information is in this object</font><font color="#E5E5E5"> and</font>

397
00:18:11,470 --> 00:18:16,269
we put it here<font color="#E5E5E5"> it's not a graphical</font>

398
00:18:13,869 --> 00:18:19,299
thing<font color="#E5E5E5"> but we we put it here so that</font><font color="#CCCCCC"> we</font>

399
00:18:16,269 --> 00:18:21,580
can access it from<font color="#E5E5E5"> our graphical</font>

400
00:18:19,299 --> 00:18:23,889
interface and our main graphical

401
00:18:21,580 --> 00:18:27,399
interface is below here<font color="#CCCCCC"> that is</font>

402
00:18:23,889 --> 00:18:30,039
applicable<font color="#CCCCCC"> list view and it has a model</font>

403
00:18:27,399 --> 00:18:33,219
<font color="#E5E5E5">the model is the to do model which we</font>

404
00:18:30,039 --> 00:18:37,210
<font color="#CCCCCC">have defined here</font><font color="#E5E5E5"> and we have a delegate</font>

405
00:18:33,220 --> 00:18:39,039
<font color="#E5E5E5">and the delegate is the UI item that we</font>

406
00:18:37,210 --> 00:18:41,769
show<font color="#CCCCCC"> for every item in the list and</font>

407
00:18:39,039 --> 00:18:43,929
that's defined<font color="#E5E5E5"> here so it's a</font><font color="#CCCCCC"> component</font>

408
00:18:41,769 --> 00:18:47,769
<font color="#E5E5E5">and it has a pain and it has a checkbox</font>

409
00:18:43,929 --> 00:18:49,779
the<font color="#CCCCCC"> checkbox</font><font color="#E5E5E5"> is the checkbox checked or</font>

410
00:18:47,769 --> 00:18:52,059
not<font color="#E5E5E5"> it's a declarative language it</font><font color="#CCCCCC"> is</font>

411
00:18:49,779 --> 00:18:54,489
checked if the value<font color="#E5E5E5"> of completed is</font>

412
00:18:52,059 --> 00:18:57,099
true so<font color="#E5E5E5"> this is the information which</font><font color="#CCCCCC"> is</font>

413
00:18:54,489 --> 00:18:58,539
gotten from<font color="#CCCCCC"> the rust</font><font color="#E5E5E5"> side and this</font>

414
00:18:57,099 --> 00:19:01,178
description<font color="#E5E5E5"> is</font><font color="#CCCCCC"> also gotten from the</font>

415
00:18:58,539 --> 00:19:02,889
website<font color="#E5E5E5"> but in here it just looks</font><font color="#CCCCCC"> very</font>

416
00:19:01,179 --> 00:19:05,830
natural<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just write the name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

417
00:19:02,889 --> 00:19:08,349
value<font color="#E5E5E5"> you want and it's automatically</font>

418
00:19:05,830 --> 00:19:11,259
assigned<font color="#E5E5E5"> to this text here to the text</font>

419
00:19:08,349 --> 00:19:16,439
of this<font color="#E5E5E5"> label yeah</font>

420
00:19:11,259 --> 00:19:16,440
and that's it so our application<font color="#E5E5E5"> is done</font>

421
00:19:17,369 --> 00:19:22,238
so in conclusion<font color="#E5E5E5"> if you want to combine</font>

422
00:19:21,159 --> 00:19:23,919
<font color="#E5E5E5">rust and cute</font>

423
00:19:22,239 --> 00:19:26,679
you should not in my opinion at least

424
00:19:23,919 --> 00:19:29,889
shoehorn<font color="#E5E5E5"> the whole of cute into a REST</font>

425
00:19:26,679 --> 00:19:32,139
API<font color="#CCCCCC"> but instead you should wrap your</font>

426
00:19:29,889 --> 00:19:34,119
rust code in a<font color="#E5E5E5"> cue object or acute</font>

427
00:19:32,139 --> 00:19:36,728
<font color="#CCCCCC">absurd</font><font color="#E5E5E5"> item model which you can then</font>

428
00:19:34,119 --> 00:19:39,609
naturally use in your cute or<font color="#CCCCCC"> qml</font>

429
00:19:36,729 --> 00:19:40,929
application and by<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> that and you</font>

430
00:19:39,609 --> 00:19:43,599
<font color="#E5E5E5">don't actually have</font><font color="#CCCCCC"> to do it yourself</font>

431
00:19:40,929 --> 00:19:44,470
because<font color="#E5E5E5"> the prosecute binding generator</font>

432
00:19:43,599 --> 00:19:46,989
<font color="#CCCCCC">does it for you</font>

433
00:19:44,470 --> 00:19:49,930
you get good<font color="#E5E5E5"> cute code and good</font><font color="#CCCCCC"> rest</font>

434
00:19:46,989 --> 00:19:57,870
codes that's it

435
00:19:49,930 --> 00:20:23,140
[Applause]

436
00:19:57,870 --> 00:20:25,120
yes yes<font color="#E5E5E5"> okay so the question is how do</font>

437
00:20:23,140 --> 00:20:27,850
you<font color="#E5E5E5"> deal with different threats because</font>

438
00:20:25,120 --> 00:20:29,889
cute<font color="#E5E5E5"> must have a user interface threat</font>

439
00:20:27,850 --> 00:20:32,860
<font color="#CCCCCC">well it does if</font><font color="#E5E5E5"> you have a cute</font>

440
00:20:29,890 --> 00:20:35,500
application the main threat<font color="#E5E5E5"> the threat</font>

441
00:20:32,860 --> 00:20:37,389
that<font color="#E5E5E5"> you start is the cute threat and if</font>

442
00:20:35,500 --> 00:20:40,030
you want additional threats in your rest

443
00:20:37,390 --> 00:20:41,919
code you will simply start when you

444
00:20:40,030 --> 00:20:44,678
<font color="#E5E5E5">construct your object</font><font color="#CCCCCC"> you start a</font>

445
00:20:41,919 --> 00:20:47,020
separate threat and that is then alive

446
00:20:44,679 --> 00:20:50,559
as<font color="#CCCCCC"> long as your object is kept alive</font><font color="#E5E5E5"> by</font>

447
00:20:47,020 --> 00:20:53,889
your cute code so you can do any type<font color="#CCCCCC"> of</font>

448
00:20:50,559 --> 00:20:56,290
number<font color="#E5E5E5"> of threats</font><font color="#CCCCCC"> you can you can keep</font>

449
00:20:53,890 --> 00:20:57,370
<font color="#E5E5E5">the running and</font><font color="#CCCCCC"> the signals you send to</font>

450
00:20:56,290 --> 00:20:59,678
the user interface

451
00:20:57,370 --> 00:21:00,820
those are<font color="#CCCCCC"> threats safe but you don't</font>

452
00:20:59,679 --> 00:21:02,890
have<font color="#E5E5E5"> to worry about that it's</font>

453
00:21:00,820 --> 00:21:04,689
<font color="#E5E5E5">automatically taken care</font><font color="#CCCCCC"> of what you</font>

454
00:21:02,890 --> 00:21:06,580
need<font color="#CCCCCC"> to know is that</font><font color="#E5E5E5"> in rust you can</font>

455
00:21:04,690 --> 00:21:09,429
just start as many threats as you want

456
00:21:06,580 --> 00:21:12,159
in the object that is generated<font color="#E5E5E5"> for you</font>

457
00:21:09,429 --> 00:21:19,440
<font color="#E5E5E5">so in your implementation dot RS you can</font>

458
00:21:12,160 --> 00:21:19,440
go wild<font color="#E5E5E5"> with the threats you want yes</font>

459
00:21:29,910 --> 00:21:34,870
the question<font color="#E5E5E5"> is how do you do with build</font>

460
00:21:32,950 --> 00:21:39,610
systems<font color="#CCCCCC"> do you take a lot</font><font color="#E5E5E5"> of advantage</font>

461
00:21:34,870 --> 00:21:40,928
of cargo or not<font color="#E5E5E5"> basically you're free to</font>

462
00:21:39,610 --> 00:21:44,639
do<font color="#E5E5E5"> whatever you like with</font><font color="#CCCCCC"> your build</font>

463
00:21:40,929 --> 00:21:47,440
system<font color="#CCCCCC"> all you need to do is call this</font>

464
00:21:44,640 --> 00:21:51,750
<font color="#E5E5E5">binary to generate the code</font><font color="#CCCCCC"> for you</font><font color="#E5E5E5"> and</font>

465
00:21:47,440 --> 00:21:55,000
we have some templates that have<font color="#E5E5E5"> C make</font>

466
00:21:51,750 --> 00:21:56,590
which call<font color="#CCCCCC"> into cargo but if you don't</font>

467
00:21:55,000 --> 00:21:58,600
like that<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you would like to put</font>

468
00:21:56,590 --> 00:22:00,580
everything in cargo you're free<font color="#E5E5E5"> to do</font>

469
00:21:58,600 --> 00:22:03,120
that<font color="#E5E5E5"> but</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> project doesn't currently</font>

470
00:22:00,580 --> 00:22:06,370
<font color="#E5E5E5">do it but it's a matter of just calling</font>

471
00:22:03,120 --> 00:22:09,520
calling<font color="#E5E5E5"> that in</font><font color="#CCCCCC"> in-built RS</font>

472
00:22:06,370 --> 00:22:22,899
in cargo yeah so it's<font color="#E5E5E5"> not in the box but</font>

473
00:22:09,520 --> 00:22:26,680
you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> it yes yeah the question</font><font color="#CCCCCC"> is</font>

474
00:22:22,900 --> 00:22:28,690
how do you<font color="#E5E5E5"> do asynchronous work like</font>

475
00:22:26,680 --> 00:22:31,540
with hyper for example or other<font color="#CCCCCC"> Tokyo</font>

476
00:22:28,690 --> 00:22:33,370
things<font color="#E5E5E5"> that works</font><font color="#CCCCCC"> exactly perfectly fine</font>

477
00:22:31,540 --> 00:22:36,730
<font color="#E5E5E5">what you do is you in your</font>

478
00:22:33,370 --> 00:22:38,830
implementation<font color="#CCCCCC"> those RS you</font><font color="#E5E5E5"> set up your</font>

479
00:22:36,730 --> 00:22:42,040
hyper<font color="#E5E5E5"> or</font><font color="#CCCCCC"> Tokyo</font><font color="#E5E5E5"> loop and that is running</font>

480
00:22:38,830 --> 00:22:44,230
<font color="#E5E5E5">in your rust threat then which you sit</font>

481
00:22:42,040 --> 00:22:45,790
which you create yourself<font color="#E5E5E5"> and there you</font>

482
00:22:44,230 --> 00:22:47,770
you set up everything<font color="#CCCCCC"> for asynchronous</font>

483
00:22:45,790 --> 00:22:49,360
<font color="#CCCCCC">IO</font><font color="#E5E5E5"> and Q it is not involved at all</font>

484
00:22:47,770 --> 00:22:51,400
whenever you get<font color="#E5E5E5"> asynchronous</font>

485
00:22:49,360 --> 00:22:52,959
information<font color="#E5E5E5"> you can decide if it</font>

486
00:22:51,400 --> 00:22:55,000
<font color="#CCCCCC">warrants a signal to the user interface</font>

487
00:22:52,960 --> 00:22:57,970
<font color="#CCCCCC">and then the user interface is updated</font>

488
00:22:55,000 --> 00:23:10,750
so it's<font color="#CCCCCC"> it's thread safe and</font><font color="#E5E5E5"> it's kind</font>

489
00:22:57,970 --> 00:23:16,000
of separate yes the question<font color="#CCCCCC"> was</font><font color="#E5E5E5"> where</font>

490
00:23:10,750 --> 00:23:20,250
is the code that exposes<font color="#E5E5E5"> the rust the</font><font color="#CCCCCC"> Q</font>

491
00:23:16,000 --> 00:23:20,250
objects to the<font color="#CCCCCC"> qml</font><font color="#E5E5E5"> is that the question</font>

492
00:23:21,630 --> 00:23:27,460
<font color="#E5E5E5">they're initiating the</font><font color="#CCCCCC"> qml</font><font color="#E5E5E5"> scene yes</font>

493
00:23:24,940 --> 00:23:29,650
<font color="#CCCCCC">okay so the question</font><font color="#E5E5E5"> is how did you</font>

494
00:23:27,460 --> 00:23:34,350
<font color="#CCCCCC">create</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> qml scene and how did you tie</font>

495
00:23:29,650 --> 00:23:37,870
the the rough stuff<font color="#E5E5E5"> into</font><font color="#CCCCCC"> qml that was a</font>

496
00:23:34,350 --> 00:23:40,090
<font color="#CCCCCC">10 line</font><font color="#E5E5E5"> c++ file which i you're right</font><font color="#CCCCCC"> i</font>

497
00:23:37,870 --> 00:23:44,159
didn't show but it's mainly always the

498
00:23:40,090 --> 00:23:49,030
same you initiate your<font color="#CCCCCC"> qml scene you</font>

499
00:23:44,160 --> 00:23:51,700
instantiate<font color="#CCCCCC"> you you you you you</font><font color="#E5E5E5"> register</font>

500
00:23:49,030 --> 00:23:55,600
your<font color="#CCCCCC"> rust object into the</font><font color="#E5E5E5"> UML scene and</font>

501
00:23:51,700 --> 00:23:58,120
you're done it's off to the races yeah

502
00:23:55,600 --> 00:24:04,530
but it's<font color="#CCCCCC"> always the</font><font color="#E5E5E5"> same so you can copy</font>

503
00:23:58,120 --> 00:24:04,530
the file from<font color="#E5E5E5"> a template yeah</font><font color="#CCCCCC"> yeah yes</font>

504
00:24:24,410 --> 00:24:44,100
right<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> repeat</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first part</font><font color="#CCCCCC"> of</font>

505
00:24:27,840 --> 00:24:45,600
the question yes yes right yeah the

506
00:24:44,100 --> 00:24:49,949
question<font color="#E5E5E5"> again is</font><font color="#CCCCCC"> how do</font><font color="#E5E5E5"> you register</font>

507
00:24:45,600 --> 00:24:54,360
<font color="#CCCCCC">the the rest cute objects to the qml and</font>

508
00:24:49,950 --> 00:24:57,270
can<font color="#E5E5E5"> I do it live as well the answer is</font>

509
00:24:54,360 --> 00:24:59,490
<font color="#CCCCCC">the same you do what you normally do on</font>

510
00:24:57,270 --> 00:25:01,860
<font color="#E5E5E5">the</font><font color="#CCCCCC"> c++ site is you have a queue object</font>

511
00:24:59,490 --> 00:25:05,580
<font color="#E5E5E5">you</font><font color="#CCCCCC"> instantiate it</font><font color="#E5E5E5"> and you register it</font>

512
00:25:01,860 --> 00:25:07,110
to the<font color="#CCCCCC"> qml scene</font><font color="#E5E5E5"> and yes</font><font color="#CCCCCC"> i am pretty</font>

513
00:25:05,580 --> 00:25:13,970
sure you can do it life<font color="#E5E5E5"> although</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't</font>

514
00:25:07,110 --> 00:25:13,969
<font color="#E5E5E5">have an example which does that yes</font>

515
00:25:22,340 --> 00:25:26,059
yet the question<font color="#CCCCCC"> is the implementation</font>

516
00:25:24,440 --> 00:25:28,070
<font color="#E5E5E5">looks pretty straight forward have you</font>

517
00:25:26,059 --> 00:25:30,879
considered<font color="#CCCCCC"> doing it with derive and I</font>

518
00:25:28,070 --> 00:25:34,600
assume that<font color="#E5E5E5"> you mean</font>

519
00:25:30,880 --> 00:25:38,030
derive on the<font color="#E5E5E5"> west side so basically</font>

520
00:25:34,600 --> 00:25:43,668
<font color="#CCCCCC">amico</font><font color="#E5E5E5"> I'm not entirely sure how</font><font color="#CCCCCC"> the rive</font>

521
00:25:38,030 --> 00:25:47,470
is implemented to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> honest okay yeah so</font>

522
00:25:43,669 --> 00:25:50,740
could you implement this in rust as

523
00:25:47,470 --> 00:25:53,539
<font color="#E5E5E5">annotation on a class you</font><font color="#CCCCCC"> probably could</font>

524
00:25:50,740 --> 00:25:56,480
yes<font color="#E5E5E5"> you probably could</font><font color="#CCCCCC"> I simply haven't</font>

525
00:25:53,539 --> 00:25:57,860
done so because<font color="#E5E5E5"> initially I wanted to be</font>

526
00:25:56,480 --> 00:26:00,950
very<font color="#CCCCCC"> hands-on</font><font color="#E5E5E5"> on the code I was</font>

527
00:25:57,860 --> 00:26:03,678
<font color="#E5E5E5">generated in fact all the demo codes and</font>

528
00:26:00,950 --> 00:26:06,230
the<font color="#CCCCCC"> testing code which is in the project</font>

529
00:26:03,679 --> 00:26:08,419
which is<font color="#CCCCCC"> generators is also committed so</font>

530
00:26:06,230 --> 00:26:11,030
<font color="#E5E5E5">that whenever I change the generator to</font>

531
00:26:08,419 --> 00:26:13,909
that I have a sort of testing that<font color="#E5E5E5"> the</font>

532
00:26:11,030 --> 00:26:16,100
code<font color="#CCCCCC"> is still the same</font><font color="#E5E5E5"> and if I would</font>

533
00:26:13,909 --> 00:26:17,419
<font color="#E5E5E5">have done it with a derive then it would</font>

534
00:26:16,100 --> 00:26:18,949
be only there during<font color="#E5E5E5"> the compile step</font>

535
00:26:17,419 --> 00:26:20,299
and I would a bit I<font color="#E5E5E5"> would need to do</font>

536
00:26:18,950 --> 00:26:26,140
some different things<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually check</font>

537
00:26:20,299 --> 00:26:26,139
but it's perfectly possible<font color="#E5E5E5"> yes yes oh</font>

538
00:26:26,380 --> 00:26:30,760
yeah that's fine<font color="#CCCCCC"> yep</font>

539
00:26:33,820 --> 00:26:35,879
<font color="#E5E5E5">you</font>

