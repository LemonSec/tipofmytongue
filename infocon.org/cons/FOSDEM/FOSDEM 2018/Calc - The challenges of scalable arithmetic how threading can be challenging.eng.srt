1
00:00:06,960 --> 00:00:15,399
excellent well thank you<font color="#E5E5E5"> for coming</font>

2
00:00:13,240 --> 00:00:16,360
am<font color="#E5E5E5"> I ready</font><font color="#CCCCCC"> you kidding</font><font color="#E5E5E5"> a man time</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am</font>

3
00:00:15,400 --> 00:00:19,300
I'm late good

4
00:00:16,360 --> 00:00:22,448
so calc calc threading so this is what

5
00:00:19,300 --> 00:00:24,070
I'm<font color="#E5E5E5"> going to say um</font><font color="#CCCCCC"> so it's not</font>

6
00:00:22,449 --> 00:00:25,599
interesting it's<font color="#E5E5E5"> an index but here's the</font>

7
00:00:24,070 --> 00:00:28,689
disclaimer<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> much all of this was</font>

8
00:00:25,599 --> 00:00:30,429
<font color="#E5E5E5">done by</font><font color="#CCCCCC"> tourists and</font><font color="#E5E5E5"> Dennis Francis who</font>

9
00:00:28,689 --> 00:00:32,740
<font color="#E5E5E5">neither of whom can be</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> today which</font>

10
00:00:30,429 --> 00:00:36,460
is<font color="#CCCCCC"> great</font><font color="#E5E5E5"> shame but</font><font color="#CCCCCC"> I was partly</font>

11
00:00:32,740 --> 00:00:38,920
<font color="#E5E5E5">responsible for</font><font color="#CCCCCC"> and helped too so</font><font color="#E5E5E5"> here</font>

12
00:00:36,460 --> 00:00:40,780
we go<font color="#E5E5E5"> so calc is a pretty interesting</font>

13
00:00:38,920 --> 00:00:43,720
<font color="#CCCCCC">codebase</font><font color="#E5E5E5"> obviously like everything else</font>

14
00:00:40,780 --> 00:00:45,340
it's<font color="#CCCCCC"> 30-plus years old the data</font>

15
00:00:43,720 --> 00:00:48,089
structures have improved a huge amount

16
00:00:45,340 --> 00:00:50,470
recently in the last<font color="#E5E5E5"> three</font><font color="#CCCCCC"> four years</font>

17
00:00:48,090 --> 00:00:52,420
<font color="#E5E5E5">but there's still some significant scope</font>

18
00:00:50,470 --> 00:00:55,930
<font color="#E5E5E5">for improvement there we'll look at how</font>

19
00:00:52,420 --> 00:00:57,940
they are<font color="#E5E5E5"> in a bit but the calculation</font>

20
00:00:55,930 --> 00:00:59,350
engine has been left pretty<font color="#CCCCCC"> much as is</font>

21
00:00:57,940 --> 00:01:01,750
we<font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> tack another one on the side</font>

22
00:00:59,350 --> 00:01:06,189
to do<font color="#CCCCCC"> OpenCL calculation and compiling</font>

23
00:01:01,750 --> 00:01:08,320
formulae<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two OpenCL but it's been</font>

24
00:01:06,189 --> 00:01:10,809
badly<font color="#E5E5E5"> in need of love and so we'll look</font>

25
00:01:08,320 --> 00:01:14,020
a little<font color="#E5E5E5"> bit how it works and how</font><font color="#CCCCCC"> we</font>

26
00:01:10,810 --> 00:01:15,789
improved<font color="#E5E5E5"> it to thread it so since early</font>

27
00:01:14,020 --> 00:01:16,869
<font color="#E5E5E5">bravas 4.3 the data structures have</font>

28
00:01:15,789 --> 00:01:18,039
looked<font color="#E5E5E5"> pretty much like</font><font color="#CCCCCC"> this you have a</font>

29
00:01:16,869 --> 00:01:20,109
document which<font color="#CCCCCC"> is I guess</font><font color="#E5E5E5"> your</font>

30
00:01:18,039 --> 00:01:21,850
spreadsheet<font color="#CCCCCC"> incited you have a whole</font>

31
00:01:20,109 --> 00:01:24,039
series of sheets which<font color="#E5E5E5"> are called tables</font>

32
00:01:21,850 --> 00:01:25,749
so several tabs

33
00:01:24,039 --> 00:01:27,819
<font color="#CCCCCC">I guess along</font><font color="#E5E5E5"> the bottom and then we</font>

34
00:01:25,749 --> 00:01:30,310
have<font color="#CCCCCC"> Coulomb Euler column egg</font><font color="#E5E5E5"> anyway</font>

35
00:01:27,819 --> 00:01:31,359
columns<font color="#E5E5E5"> which which is stored something</font>

36
00:01:30,310 --> 00:01:34,149
like this so there's a whole<font color="#E5E5E5"> array of</font>

37
00:01:31,359 --> 00:01:36,548
<font color="#E5E5E5">fixed size array rather large one of</font>

38
00:01:34,149 --> 00:01:38,109
columns and then down<font color="#CCCCCC"> it we</font><font color="#E5E5E5"> have these</font>

39
00:01:36,549 --> 00:01:40,090
wonderful<font color="#E5E5E5"> multi-dimensional data</font>

40
00:01:38,109 --> 00:01:44,079
structures<font color="#E5E5E5"> that are sort of spans of</font>

41
00:01:40,090 --> 00:01:46,149
contiguous<font color="#CCCCCC"> types</font><font color="#E5E5E5"> in chunks going down</font>

42
00:01:44,079 --> 00:01:49,270
there so we have things<font color="#CCCCCC"> like blocks of</font>

43
00:01:46,149 --> 00:01:50,740
strings or<font color="#E5E5E5"> chunks of doubles or you know</font>

44
00:01:49,270 --> 00:01:53,560
various other<font color="#CCCCCC"> things but we'll</font><font color="#E5E5E5"> really be</font>

45
00:01:50,740 --> 00:01:55,589
looking<font color="#E5E5E5"> at the formula</font><font color="#CCCCCC"> cell the formula</font>

46
00:01:53,560 --> 00:01:58,030
<font color="#CCCCCC">cell stuff today</font>

47
00:01:55,590 --> 00:01:59,560
<font color="#E5E5E5">so inside</font><font color="#CCCCCC"> those formula</font><font color="#E5E5E5"> cells you have</font><font color="#CCCCCC"> a</font>

48
00:01:58,030 --> 00:02:02,200
whole run<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> formula cells bang</font>

49
00:01:59,560 --> 00:02:04,569
<font color="#E5E5E5">grammaire bang like</font><font color="#CCCCCC"> this but we try and</font>

50
00:02:02,200 --> 00:02:06,399
group<font color="#E5E5E5"> information together about them so</font>

51
00:02:04,569 --> 00:02:08,259
there's a<font color="#E5E5E5"> token array and the take an</font>

52
00:02:06,399 --> 00:02:11,050
array basically represents your formula

53
00:02:08,258 --> 00:02:13,359
<font color="#E5E5E5">you know so you have equals</font><font color="#CCCCCC"> sum 1 comma</font>

54
00:02:11,050 --> 00:02:14,739
2 comma<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> and there's two</font>

55
00:02:13,360 --> 00:02:17,110
<font color="#CCCCCC">representations of that the first thing</font>

56
00:02:14,739 --> 00:02:18,400
is a<font color="#CCCCCC"> take</font><font color="#E5E5E5"> an array like this and these</font>

57
00:02:17,110 --> 00:02:20,590
Takens are the same token

58
00:02:18,400 --> 00:02:24,400
in a different<font color="#CCCCCC"> order so this one would</font>

59
00:02:20,590 --> 00:02:25,750
<font color="#CCCCCC">be you know some one-two-three and the</font>

60
00:02:24,400 --> 00:02:29,049
reverse<font color="#E5E5E5"> polish equivalent which would be</font>

61
00:02:25,750 --> 00:02:31,629
<font color="#CCCCCC">one two three</font><font color="#E5E5E5"> some of</font><font color="#CCCCCC"> course</font><font color="#E5E5E5"> this is</font>

62
00:02:29,049 --> 00:02:33,069
<font color="#E5E5E5">quite a simple example</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> you</font>

63
00:02:31,629 --> 00:02:34,149
<font color="#E5E5E5">know a lot</font><font color="#CCCCCC"> more twisted ways but the</font>

64
00:02:33,069 --> 00:02:35,768
nice<font color="#CCCCCC"> thing about</font><font color="#E5E5E5"> the reverse polish is</font>

65
00:02:34,150 --> 00:02:38,319
you don't have<font color="#CCCCCC"> to do any</font><font color="#E5E5E5"> complicated</font>

66
00:02:35,769 --> 00:02:41,319
stuff you execute this this stuff

67
00:02:38,319 --> 00:02:43,720
<font color="#E5E5E5">pushing and pulling</font><font color="#CCCCCC"> - a simple</font><font color="#E5E5E5"> stack as</font>

68
00:02:41,319 --> 00:02:44,890
you calculate so yeah there's a whole

69
00:02:43,720 --> 00:02:46,299
lot of<font color="#E5E5E5"> different</font><font color="#CCCCCC"> things like</font><font color="#E5E5E5"> this but</font>

70
00:02:44,890 --> 00:02:48,040
the key things I guess are things like

71
00:02:46,299 --> 00:02:50,410
single<font color="#CCCCCC"> references like get and get a</font>

72
00:02:48,040 --> 00:02:52,120
cell from<font color="#E5E5E5"> a1 or whatever double</font>

73
00:02:50,410 --> 00:02:53,500
reference getting a range of cells and

74
00:02:52,120 --> 00:02:57,310
<font color="#E5E5E5">this</font><font color="#CCCCCC"> can of</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> three dimensional</font>

75
00:02:53,500 --> 00:02:59,019
ranges through<font color="#E5E5E5"> multiple sheets there are</font>

76
00:02:57,310 --> 00:03:00,310
<font color="#CCCCCC">a special</font><font color="#E5E5E5"> cases for external references</font>

77
00:02:59,019 --> 00:03:03,390
from<font color="#E5E5E5"> other things and of course simple</font>

78
00:03:00,310 --> 00:03:06,790
numbers strings<font color="#E5E5E5"> and then operations like</font>

79
00:03:03,390 --> 00:03:10,988
do a division<font color="#CCCCCC"> or you know execute</font><font color="#E5E5E5"> this</font>

80
00:03:06,790 --> 00:03:12,190
macro<font color="#E5E5E5"> with these</font><font color="#CCCCCC"> parameters and here's</font>

81
00:03:10,989 --> 00:03:16,690
how it works a when we want to calculate

82
00:03:12,190 --> 00:03:17,829
<font color="#E5E5E5">a formula we well</font><font color="#CCCCCC"> alright there</font><font color="#E5E5E5"> are</font>

83
00:03:16,690 --> 00:03:19,510
<font color="#E5E5E5">several ways of triggering this but one</font>

84
00:03:17,829 --> 00:03:21,220
<font color="#E5E5E5">way</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> just get a value out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a cell</font>

85
00:03:19,510 --> 00:03:24,010
so<font color="#E5E5E5"> you ask</font><font color="#CCCCCC"> yourself give me your value</font>

86
00:03:21,220 --> 00:03:25,660
and if it's just<font color="#CCCCCC"> a simple double</font><font color="#E5E5E5"> or</font>

87
00:03:24,010 --> 00:03:27,010
something in this<font color="#E5E5E5"> this array then well</font>

88
00:03:25,660 --> 00:03:29,799
we just<font color="#E5E5E5"> passed a double back but if it's</font>

89
00:03:27,010 --> 00:03:31,120
a<font color="#E5E5E5"> formula we need to check if we</font>

90
00:03:29,799 --> 00:03:33,609
<font color="#E5E5E5">actually need</font><font color="#CCCCCC"> to calculate the results</font>

91
00:03:31,120 --> 00:03:35,290
<font color="#E5E5E5">so this may be interpret stuff goes well</font>

92
00:03:33,609 --> 00:03:38,440
<font color="#E5E5E5">maybe we should actually recalculate</font>

93
00:03:35,290 --> 00:03:40,690
before we<font color="#E5E5E5"> return</font><font color="#CCCCCC"> the double</font><font color="#E5E5E5"> and so that</font>

94
00:03:38,440 --> 00:03:42,639
<font color="#E5E5E5">eventually ends up in to interpret and</font>

95
00:03:40,690 --> 00:03:43,930
then there's an<font color="#E5E5E5"> amazing recursion</font>

96
00:03:42,639 --> 00:03:46,959
flattening thing here which I'll talk

97
00:03:43,930 --> 00:03:49,000
about later<font color="#E5E5E5"> and eventually ends up in a</font>

98
00:03:46,959 --> 00:03:50,829
thing<font color="#E5E5E5"> called interpret tail</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font>

99
00:03:49,000 --> 00:03:54,129
creates an interpreter object on the

100
00:03:50,829 --> 00:03:55,599
heap<font color="#CCCCCC"> passes the code in it which is the</font>

101
00:03:54,129 --> 00:03:58,840
token array where it is in<font color="#E5E5E5"> the document</font>

102
00:03:55,599 --> 00:04:00,448
<font color="#CCCCCC">all those</font><font color="#E5E5E5"> other good</font><font color="#CCCCCC"> stuff and does</font>

103
00:03:58,840 --> 00:04:02,859
interpret on it interpret then of course

104
00:04:00,449 --> 00:04:06,430
<font color="#E5E5E5">starts building this stack of these</font>

105
00:04:02,859 --> 00:04:08,650
reverse<font color="#CCCCCC"> Polish Takens execute</font><font color="#E5E5E5"> those one</font>

106
00:04:06,430 --> 00:04:10,660
<font color="#CCCCCC">by one</font><font color="#E5E5E5"> and as part of that process you</font>

107
00:04:08,650 --> 00:04:12,549
recall that<font color="#CCCCCC"> some of these things are go</font>

108
00:04:10,660 --> 00:04:16,870
get data out<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> sheets somewhere</font>

109
00:04:12,549 --> 00:04:18,519
else yeah as part of that sometimes<font color="#CCCCCC"> we</font>

110
00:04:16,870 --> 00:04:21,099
recurse back up here and we<font color="#E5E5E5"> find</font>

111
00:04:18,519 --> 00:04:23,320
something<font color="#E5E5E5"> else that</font><font color="#CCCCCC"> needs another cell</font>

112
00:04:21,099 --> 00:04:26,740
<font color="#CCCCCC">see</font><font color="#E5E5E5"> if you imagine a case such as a</font>

113
00:04:23,320 --> 00:04:29,260
entire column and<font color="#E5E5E5"> so on types 42 in</font><font color="#CCCCCC"> a1</font>

114
00:04:26,740 --> 00:04:30,700
and then they type equals a1<font color="#E5E5E5"> and a2 and</font>

115
00:04:29,260 --> 00:04:31,560
<font color="#E5E5E5">they fill this all the way down so you</font>

116
00:04:30,700 --> 00:04:33,389
<font color="#CCCCCC">have a million</font>

117
00:04:31,560 --> 00:04:36,870
for<font color="#E5E5E5"> merely all of which refer to</font><font color="#CCCCCC"> the</font>

118
00:04:33,389 --> 00:04:39,240
<font color="#E5E5E5">last one</font><font color="#CCCCCC"> and then you call get value on</font>

119
00:04:36,870 --> 00:04:43,020
the very bottom<font color="#E5E5E5"> cell as you're trying to</font>

120
00:04:39,240 --> 00:04:44,550
draw the screen<font color="#E5E5E5"> or whatever um this then</font>

121
00:04:43,020 --> 00:04:46,409
potentially can recurse a million deep

122
00:04:44,550 --> 00:04:49,020
<font color="#E5E5E5">down your stack and it's not</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very</font>

123
00:04:46,410 --> 00:04:51,180
shallow<font color="#E5E5E5"> recursion and so there is this</font>

124
00:04:49,020 --> 00:04:52,500
quotes amazing recursion flattening here

125
00:04:51,180 --> 00:04:54,210
which goes there

126
00:04:52,500 --> 00:04:56,340
you know<font color="#CCCCCC"> we're accursed quite a lot at</font>

127
00:04:54,210 --> 00:04:58,020
<font color="#E5E5E5">this point</font><font color="#CCCCCC"> we're starting to panic</font><font color="#E5E5E5"> about</font>

128
00:04:56,340 --> 00:05:01,159
how much heap we've got maybe you should

129
00:04:58,020 --> 00:05:03,330
do something<font color="#E5E5E5"> creative you know</font><font color="#CCCCCC"> no I</font>

130
00:05:01,160 --> 00:05:05,430
rearranged what we're doing in some way

131
00:05:03,330 --> 00:05:07,469
<font color="#E5E5E5">says to defer work and come back and do</font>

132
00:05:05,430 --> 00:05:09,540
some more<font color="#E5E5E5"> later</font><font color="#CCCCCC"> and hopefully complete</font>

133
00:05:07,470 --> 00:05:11,729
<font color="#E5E5E5">say there's some there's</font><font color="#CCCCCC"> some fun stuff</font>

134
00:05:09,540 --> 00:05:14,220
there<font color="#E5E5E5"> that probably doesn't there hmm</font>

135
00:05:11,729 --> 00:05:15,810
over much thought<font color="#E5E5E5"> but it's just a bit</font>

136
00:05:14,220 --> 00:05:18,050
irritating and of course that's<font color="#CCCCCC"> just a</font>

137
00:05:15,810 --> 00:05:19,919
single column you can<font color="#E5E5E5"> imagine much worse</font>

138
00:05:18,050 --> 00:05:23,729
situations we<font color="#CCCCCC"> have these very deep</font>

139
00:05:19,919 --> 00:05:25,409
<font color="#E5E5E5">traces so you recall that actually all</font>

140
00:05:23,729 --> 00:05:27,030
of these Takens are arranged into a

141
00:05:25,410 --> 00:05:28,650
formula cell group and we know how big

142
00:05:27,030 --> 00:05:33,510
this thing is<font color="#E5E5E5"> we know it spans a whole</font>

143
00:05:28,650 --> 00:05:35,159
column so perhaps we<font color="#E5E5E5"> could do better see</font>

144
00:05:33,510 --> 00:05:37,560
there's a single interpret formula group

145
00:05:35,160 --> 00:05:39,060
that in various<font color="#E5E5E5"> cases is called and</font>

146
00:05:37,560 --> 00:05:41,460
should be called more frequently<font color="#E5E5E5"> but</font>

147
00:05:39,060 --> 00:05:43,380
there are<font color="#E5E5E5"> future plans for that</font><font color="#CCCCCC"> and this</font>

148
00:05:41,460 --> 00:05:46,229
essentially can do something<font color="#CCCCCC"> different</font>

149
00:05:43,380 --> 00:05:48,450
<font color="#E5E5E5">so the existing</font><font color="#CCCCCC"> OpenCL and software</font>

150
00:05:46,229 --> 00:05:51,360
cases<font color="#E5E5E5"> then can try and interpret great</font>

151
00:05:48,450 --> 00:05:53,969
chunk of this group at once and to do

152
00:05:51,360 --> 00:05:55,890
<font color="#E5E5E5">that what we do is we we call get value</font>

153
00:05:53,970 --> 00:05:58,380
this<font color="#E5E5E5"> thing that can</font><font color="#CCCCCC"> recursos you'll call</font>

154
00:05:55,890 --> 00:05:59,820
on all of<font color="#CCCCCC"> our input</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> look at</font>

155
00:05:58,380 --> 00:06:01,860
the formula group and we<font color="#E5E5E5"> can go well</font>

156
00:05:59,820 --> 00:06:04,020
this formula<font color="#E5E5E5"> only operates on</font><font color="#CCCCCC"> one cell</font>

157
00:06:01,860 --> 00:06:05,160
<font color="#E5E5E5">but as we go down the</font><font color="#CCCCCC"> column that</font><font color="#E5E5E5"> cell</font>

158
00:06:04,020 --> 00:06:07,650
will<font color="#CCCCCC"> actually turn into</font><font color="#E5E5E5"> all of these</font>

159
00:06:05,160 --> 00:06:10,289
<font color="#CCCCCC">other cells</font><font color="#E5E5E5"> so as it goes down we should</font>

160
00:06:07,650 --> 00:06:12,210
<font color="#E5E5E5">fetch all of this data at once and pack</font>

161
00:06:10,289 --> 00:06:14,610
it away<font color="#E5E5E5"> into a</font><font color="#CCCCCC"> matrix so this works</font>

162
00:06:12,210 --> 00:06:17,130
<font color="#E5E5E5">nicely for</font><font color="#CCCCCC"> simple string and double</font>

163
00:06:14,610 --> 00:06:20,400
values and we pick all<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> into a</font>

164
00:06:17,130 --> 00:06:22,440
nice flat uniform chunk of memory<font color="#E5E5E5"> so</font>

165
00:06:20,400 --> 00:06:23,580
instead of<font color="#E5E5E5"> looking at formula cells and</font>

166
00:06:22,440 --> 00:06:27,600
doing operations<font color="#E5E5E5"> for each of them we</font>

167
00:06:23,580 --> 00:06:29,789
<font color="#E5E5E5">have just array of doubles</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> say</font>

168
00:06:27,600 --> 00:06:31,530
<font color="#E5E5E5">- yeah first of all we check that</font><font color="#CCCCCC"> it's</font>

169
00:06:29,789 --> 00:06:34,050
safe to do this<font color="#E5E5E5"> for some value of safe</font>

170
00:06:31,530 --> 00:06:35,849
and you know<font color="#E5E5E5"> we think that</font><font color="#CCCCCC"> this is a</font>

171
00:06:34,050 --> 00:06:38,580
formula<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can optimize and this</font>

172
00:06:35,850 --> 00:06:40,470
this set of Takens is safe to do this

173
00:06:38,580 --> 00:06:41,969
stuff with now we get<font color="#CCCCCC"> these values and</font>

174
00:06:40,470 --> 00:06:43,770
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can choose we can send these</font><font color="#CCCCCC"> to</font>

175
00:06:41,970 --> 00:06:44,889
<font color="#CCCCCC">OpenCL so we can push</font><font color="#E5E5E5"> those across to</font>

176
00:06:43,770 --> 00:06:48,039
your<font color="#E5E5E5"> GPU</font>

177
00:06:44,889 --> 00:06:50,469
we can compile these Takens to some

178
00:06:48,039 --> 00:06:51,969
clever OpenCL kernel<font color="#E5E5E5"> and we can shovel</font>

179
00:06:50,469 --> 00:06:53,830
<font color="#E5E5E5">that data and we can get the results</font>

180
00:06:51,969 --> 00:06:55,719
back<font color="#CCCCCC"> and in some cases that works really</font>

181
00:06:53,830 --> 00:06:57,580
<font color="#E5E5E5">well and</font><font color="#CCCCCC"> it's really fast</font><font color="#E5E5E5"> and other</font>

182
00:06:55,719 --> 00:07:00,909
cases<font color="#E5E5E5"> compiling the kernel is slower</font>

183
00:06:57,580 --> 00:07:02,229
than actually executing us you don't<font color="#E5E5E5"> win</font>

184
00:07:00,909 --> 00:07:05,199
it depends on the shape of<font color="#CCCCCC"> your sheet</font>

185
00:07:02,229 --> 00:07:07,240
<font color="#E5E5E5">and say we have some some stuff now</font><font color="#CCCCCC"> that</font>

186
00:07:05,199 --> 00:07:09,849
<font color="#E5E5E5">tries to judge the weight of a formula</font>

187
00:07:07,240 --> 00:07:12,069
<font color="#E5E5E5">how much work is it really doing</font><font color="#CCCCCC"> um is</font>

188
00:07:09,849 --> 00:07:14,110
it<font color="#E5E5E5"> as simple copy memory copy in which</font>

189
00:07:12,069 --> 00:07:15,520
case copying<font color="#CCCCCC"> in to the GPU</font><font color="#E5E5E5"> and back</font>

190
00:07:14,110 --> 00:07:16,900
again<font color="#CCCCCC"> it's not you</font><font color="#E5E5E5"> know it's not going</font>

191
00:07:15,520 --> 00:07:19,419
<font color="#E5E5E5">to help</font><font color="#CCCCCC"> I'm already doing</font><font color="#E5E5E5"> more</font>

192
00:07:16,900 --> 00:07:22,120
<font color="#E5E5E5">complicated function and then</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> got a</font>

193
00:07:19,419 --> 00:07:24,099
software version<font color="#CCCCCC"> too that does some kind</font>

194
00:07:22,120 --> 00:07:26,469
<font color="#E5E5E5">of accelerated you know SSE accelerated</font>

195
00:07:24,099 --> 00:07:30,460
summing across<font color="#E5E5E5"> these things in some some</font>

196
00:07:26,469 --> 00:07:32,229
nice way yeah<font color="#E5E5E5"> and as we as we calculate</font>

197
00:07:30,460 --> 00:07:34,810
these<font color="#CCCCCC"> things on the software stack down</font>

198
00:07:32,229 --> 00:07:36,128
here we we manipulate this matrix so

199
00:07:34,810 --> 00:07:37,599
that<font color="#CCCCCC"> it looks different</font><font color="#E5E5E5"> but we don't do</font>

200
00:07:36,129 --> 00:07:40,029
any copying<font color="#E5E5E5"> so we have a sort of</font>

201
00:07:37,599 --> 00:07:42,759
abstract<font color="#CCCCCC"> matrix the Kenda yeah created</font>

202
00:07:40,029 --> 00:07:44,979
over here very<font color="#CCCCCC"> late at night you know</font>

203
00:07:42,759 --> 00:07:47,199
before a deadline<font color="#CCCCCC"> so make this work very</font>

204
00:07:44,979 --> 00:07:48,960
beautifully<font color="#CCCCCC"> so and it turns out to be</font>

205
00:07:47,199 --> 00:07:51,129
<font color="#CCCCCC">very efficient as we'll see later</font>

206
00:07:48,960 --> 00:07:53,830
so<font color="#E5E5E5"> why</font><font color="#CCCCCC"> thread well we need thread</font>

207
00:07:51,129 --> 00:07:55,719
because well sometimes CPUs get actually

208
00:07:53,830 --> 00:07:57,219
slower you know<font color="#E5E5E5"> the megahertz goes down</font>

209
00:07:55,719 --> 00:07:58,599
the IPC goes down but hey I've got

210
00:07:57,219 --> 00:08:00,219
another three course that aren't<font color="#E5E5E5"> doing</font>

211
00:07:58,599 --> 00:08:01,569
anything<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know which is good for</font>

212
00:08:00,219 --> 00:08:04,810
<font color="#E5E5E5">thermal management perhaps you can move</font>

213
00:08:01,569 --> 00:08:07,180
<font color="#CCCCCC">to a cool core always but um anyway the</font>

214
00:08:04,810 --> 00:08:08,650
<font color="#E5E5E5">process clocks are anyhow tiny pretty</font>

215
00:08:07,180 --> 00:08:10,810
much at<font color="#E5E5E5"> four gigahertz you're not going</font>

216
00:08:08,650 --> 00:08:14,049
to get much<font color="#CCCCCC"> faster than that so they're</font>

217
00:08:10,810 --> 00:08:16,750
all<font color="#E5E5E5"> going very</font><font color="#CCCCCC"> much wider and so if you</font>

218
00:08:14,050 --> 00:08:18,520
want an IPC<font color="#CCCCCC"> improvement because</font>

219
00:08:16,750 --> 00:08:21,219
instructions per clock are pretty much

220
00:08:18,520 --> 00:08:22,479
<font color="#E5E5E5">well they're not improving hugely even</font>

221
00:08:21,219 --> 00:08:24,189
with all this clever speculative

222
00:08:22,479 --> 00:08:28,180
execution that<font color="#E5E5E5"> we're so fond of these</font>

223
00:08:24,189 --> 00:08:30,669
days<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> see the good news is that</font>

224
00:08:28,180 --> 00:08:32,919
<font color="#E5E5E5">our AMD is really you</font><font color="#CCCCCC"> know I'm stirring</font>

225
00:08:30,669 --> 00:08:36,760
up this market<font color="#CCCCCC"> and providing</font><font color="#E5E5E5"> new high</font>

226
00:08:32,919 --> 00:08:38,380
IPC widely threaded<font color="#E5E5E5"> staff laptops you</font>

227
00:08:36,760 --> 00:08:39,909
know I think<font color="#CCCCCC"> arguably have a you know</font>

228
00:08:38,380 --> 00:08:41,729
<font color="#CCCCCC">four thread sort of minimum the</font>

229
00:08:39,909 --> 00:08:43,630
<font color="#E5E5E5">mid-range stuff is eight threads</font>

230
00:08:41,729 --> 00:08:45,670
<font color="#E5E5E5">workstations 16 threads</font>

231
00:08:43,630 --> 00:08:47,829
I mean it's cheap<font color="#E5E5E5"> I I</font><font color="#CCCCCC"> meet people that</font>

232
00:08:45,670 --> 00:08:49,120
buy these things<font color="#E5E5E5"> your new PC will have</font>

233
00:08:47,829 --> 00:08:51,250
more threads than you you<font color="#E5E5E5"> know what to</font>

234
00:08:49,120 --> 00:08:53,410
do with and<font color="#CCCCCC"> so of course</font><font color="#E5E5E5"> AMD has been</font>

235
00:08:51,250 --> 00:08:57,459
trying<font color="#E5E5E5"> to help make</font><font color="#CCCCCC"> sure they re used</font>

236
00:08:53,410 --> 00:08:58,689
used effectively so<font color="#E5E5E5"> Marcus my my friend</font>

237
00:08:57,459 --> 00:09:00,400
at the back here as a hero who

238
00:08:58,690 --> 00:09:02,740
<font color="#E5E5E5">this crash reporting thing and we we</font>

239
00:09:00,400 --> 00:09:04,840
were looking at<font color="#E5E5E5"> the statistics the other</font>

240
00:09:02,740 --> 00:09:07,510
night to see well<font color="#E5E5E5"> how many</font><font color="#CCCCCC"> cause do</font>

241
00:09:04,840 --> 00:09:09,100
people have and frustratingly<font color="#E5E5E5"> CPUs are</font>

242
00:09:07,510 --> 00:09:11,410
very good at repointing their core count

243
00:09:09,100 --> 00:09:12,790
but not<font color="#E5E5E5"> their thread count so</font><font color="#CCCCCC"> some of</font>

244
00:09:11,410 --> 00:09:14,350
these are<font color="#E5E5E5"> hyper threaded course and some</font>

245
00:09:12,790 --> 00:09:15,640
aren't<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> irritating so I</font>

246
00:09:14,350 --> 00:09:18,070
wanted<font color="#E5E5E5"> to show you how many threads</font>

247
00:09:15,640 --> 00:09:19,180
people actually<font color="#E5E5E5"> have the despair</font><font color="#CCCCCC"> um but</font>

248
00:09:18,070 --> 00:09:21,400
the bad<font color="#CCCCCC"> news</font><font color="#E5E5E5"> is that some people</font><font color="#CCCCCC"> still</font>

249
00:09:19,180 --> 00:09:22,569
<font color="#CCCCCC">have</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> mm one core though</font><font color="#E5E5E5"> I'd like to</font>

250
00:09:21,400 --> 00:09:25,390
think<font color="#E5E5E5"> it's hyper threaded so they have</font>

251
00:09:22,570 --> 00:09:27,130
at least<font color="#E5E5E5"> two</font><font color="#CCCCCC"> threads as you</font><font color="#E5E5E5"> can see this</font>

252
00:09:25,390 --> 00:09:29,530
is a declining number<font color="#CCCCCC"> of people with</font><font color="#E5E5E5"> two</font>

253
00:09:27,130 --> 00:09:31,270
or potentially four threads and then

254
00:09:29,530 --> 00:09:33,310
there's well there's<font color="#CCCCCC"> really quite a lot</font>

255
00:09:31,270 --> 00:09:35,170
of<font color="#E5E5E5"> people here with</font><font color="#CCCCCC"> four or maybe</font><font color="#E5E5E5"> four</font>

256
00:09:33,310 --> 00:09:37,750
cores that<font color="#E5E5E5"> are weak I don't like it</font>

257
00:09:35,170 --> 00:09:39,969
either way you see the picture this this

258
00:09:37,750 --> 00:09:42,220
guy is growing<font color="#E5E5E5"> and will grow more um if</font>

259
00:09:39,970 --> 00:09:45,010
we enlarge the very small bit at the top

260
00:09:42,220 --> 00:09:48,370
the trend is even more<font color="#CCCCCC"> encouraging so</font>

261
00:09:45,010 --> 00:09:51,189
you know the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 48</font><font color="#E5E5E5"> CPU machines we even</font>

262
00:09:48,370 --> 00:09:53,110
got some 8080 core guys<font color="#E5E5E5"> that</font><font color="#CCCCCC"> seem to be</font>

263
00:09:51,190 --> 00:09:54,880
crashing so I don't know whether<font color="#E5E5E5"> you can</font>

264
00:09:53,110 --> 00:09:56,920
<font color="#E5E5E5">extrapolate from the crash data that</font>

265
00:09:54,880 --> 00:09:59,530
more threads means you crash more often

266
00:09:56,920 --> 00:10:01,360
<font color="#E5E5E5">it's quite possible</font><font color="#CCCCCC"> and maybe</font><font color="#E5E5E5"> we get</font>

267
00:09:59,530 --> 00:10:04,660
less reliable<font color="#E5E5E5"> as we go but but either</font>

268
00:10:01,360 --> 00:10:06,970
way<font color="#E5E5E5"> the idea is that everything is is</font>

269
00:10:04,660 --> 00:10:11,079
<font color="#E5E5E5">getting more um more threaded so we</font>

270
00:10:06,970 --> 00:10:12,940
should<font color="#E5E5E5"> use that stuff so so threading</font>

271
00:10:11,080 --> 00:10:14,260
interpret formula group<font color="#CCCCCC"> so</font><font color="#E5E5E5"> what we</font>

272
00:10:12,940 --> 00:10:16,120
really wanted to do was reuse the

273
00:10:14,260 --> 00:10:17,920
existing formula<font color="#E5E5E5"> core rather than</font>

274
00:10:16,120 --> 00:10:20,620
<font color="#CCCCCC">creating more special cases off at the</font>

275
00:10:17,920 --> 00:10:24,250
side<font color="#CCCCCC"> we wanted</font><font color="#E5E5E5"> to take</font><font color="#CCCCCC"> that and avoid</font>

276
00:10:20,620 --> 00:10:26,260
too much<font color="#CCCCCC"> sub setting and ideally remove</font>

277
00:10:24,250 --> 00:10:28,030
the software interpreter as well so that

278
00:10:26,260 --> 00:10:31,840
it could be<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> collapse everything</font>

279
00:10:28,030 --> 00:10:32,920
in so<font color="#E5E5E5"> that's how we started out so since</font>

280
00:10:31,840 --> 00:10:35,170
the idea<font color="#E5E5E5"> basically is that we</font>

281
00:10:32,920 --> 00:10:37,209
<font color="#CCCCCC">precalculate are dependent cells much as</font>

282
00:10:35,170 --> 00:10:40,750
now<font color="#E5E5E5"> but instead</font><font color="#CCCCCC"> of stuffing them all</font>

283
00:10:37,210 --> 00:10:42,040
into<font color="#E5E5E5"> a matrix in a in a strange way</font><font color="#CCCCCC"> we</font>

284
00:10:40,750 --> 00:10:43,510
just<font color="#E5E5E5"> leave them where they</font><font color="#CCCCCC"> are we're</font>

285
00:10:42,040 --> 00:10:46,390
confident<font color="#CCCCCC"> that when we go to</font><font color="#E5E5E5"> get them</font>

286
00:10:43,510 --> 00:10:47,920
maybe interpret we return false<font color="#CCCCCC"> and so</font>

287
00:10:46,390 --> 00:10:51,130
we don't<font color="#E5E5E5"> need to worry we can just use</font>

288
00:10:47,920 --> 00:10:52,599
the existing<font color="#E5E5E5"> code</font><font color="#CCCCCC"> of course if maybe</font>

289
00:10:51,130 --> 00:10:54,670
interpret actually calls interpret and

290
00:10:52,600 --> 00:10:56,230
we recurse<font color="#CCCCCC"> this is a big old assertion</font>

291
00:10:54,670 --> 00:10:57,939
there that goes bang and the whole thing

292
00:10:56,230 --> 00:10:59,110
falls in a heap<font color="#CCCCCC"> and so we've</font><font color="#E5E5E5"> been</font>

293
00:10:57,940 --> 00:11:01,600
<font color="#E5E5E5">catching</font><font color="#CCCCCC"> a few of these assertions in</font>

294
00:10:59,110 --> 00:11:02,680
the crash testing which is<font color="#E5E5E5"> exciting then</font>

295
00:11:01,600 --> 00:11:04,780
of<font color="#CCCCCC"> course for some functions</font><font color="#E5E5E5"> that are</font>

296
00:11:02,680 --> 00:11:07,089
horrible and we have the black<font color="#CCCCCC"> list</font><font color="#E5E5E5"> but</font>

297
00:11:04,780 --> 00:11:08,800
we could<font color="#E5E5E5"> paralyze essentially reusing</font>

298
00:11:07,089 --> 00:11:10,600
the existing code which which is<font color="#CCCCCC"> which</font>

299
00:11:08,800 --> 00:11:11,620
<font color="#CCCCCC">is pretty nice</font><font color="#E5E5E5"> so the schema goes</font>

300
00:11:10,600 --> 00:11:12,760
something like<font color="#E5E5E5"> this you call all you'll</font>

301
00:11:11,620 --> 00:11:14,710
get values

302
00:11:12,760 --> 00:11:17,050
say that subsequently all your maybe

303
00:11:14,710 --> 00:11:18,190
interprets will return false or not not

304
00:11:17,050 --> 00:11:21,279
do<font color="#E5E5E5"> anything and</font><font color="#CCCCCC"> just give you the raw</font>

305
00:11:18,190 --> 00:11:22,990
value again the amazing recursion

306
00:11:21,279 --> 00:11:25,240
flattening I think we actually

307
00:11:22,990 --> 00:11:27,520
<font color="#E5E5E5">implemented this time and so you then in</font>

308
00:11:25,240 --> 00:11:31,450
interpret<font color="#E5E5E5"> tale</font><font color="#CCCCCC"> you you start to</font><font color="#E5E5E5"> parallel</font>

309
00:11:27,520 --> 00:11:32,529
eyes<font color="#CCCCCC"> ok as you</font><font color="#E5E5E5"> interpret this whole</font>

310
00:11:31,450 --> 00:11:34,450
group you<font color="#E5E5E5"> can call this in multiple</font>

311
00:11:32,529 --> 00:11:37,660
<font color="#CCCCCC">threads</font><font color="#E5E5E5"> after you set everything up</font>

312
00:11:34,450 --> 00:11:38,980
nicely<font color="#E5E5E5"> at the beginning so yeah so</font>

313
00:11:37,660 --> 00:11:40,949
that's<font color="#E5E5E5"> that was basically the plan and</font>

314
00:11:38,980 --> 00:11:43,600
there's a nice big assert here that says

315
00:11:40,950 --> 00:11:46,240
don't do it if the threaded group

316
00:11:43,600 --> 00:11:48,339
<font color="#E5E5E5">calculus in progress</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that sounds good</font>

317
00:11:46,240 --> 00:11:50,740
<font color="#E5E5E5">um the only problem is it turns out</font><font color="#CCCCCC"> hmm</font>

318
00:11:48,339 --> 00:11:52,690
<font color="#CCCCCC">when you look into it that</font><font color="#E5E5E5"> the nice</font>

319
00:11:50,740 --> 00:11:54,130
pictures<font color="#E5E5E5"> of here are not quite as</font>

320
00:11:52,690 --> 00:11:57,220
wonderful<font color="#E5E5E5"> so the SD interpreter for</font>

321
00:11:54,130 --> 00:12:00,520
example mutates<font color="#CCCCCC"> the actual</font><font color="#E5E5E5"> formula as it</font>

322
00:11:57,220 --> 00:12:02,529
calculates it so due<font color="#E5E5E5"> to a fit of cunning</font>

323
00:12:00,520 --> 00:12:05,230
the iteration variable is actually<font color="#CCCCCC"> in</font>

324
00:12:02,529 --> 00:12:07,270
the token itself<font color="#CCCCCC"> so we actually take an</font>

325
00:12:05,230 --> 00:12:08,770
<font color="#CCCCCC">array self of course</font><font color="#E5E5E5"> there's a whole</font><font color="#CCCCCC"> lot</font>

326
00:12:07,270 --> 00:12:10,209
of complicated<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> going on you know</font>

327
00:12:08,770 --> 00:12:12,160
there are macros being called

328
00:12:10,209 --> 00:12:13,750
then in theory can<font color="#E5E5E5"> do anything right</font>

329
00:12:12,160 --> 00:12:15,160
<font color="#CCCCCC">they can they can mutate the document</font>

330
00:12:13,750 --> 00:12:17,350
the table the cells the thing that

331
00:12:15,160 --> 00:12:18,819
you're in<font color="#CCCCCC"> right now some of the</font>

332
00:12:17,350 --> 00:12:21,250
functions when you take the dependency

333
00:12:18,820 --> 00:12:24,700
<font color="#CCCCCC">graph which is</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> tied to the</font>

334
00:12:21,250 --> 00:12:26,230
document<font color="#E5E5E5"> and a disaster and so yeah so</font>

335
00:12:24,700 --> 00:12:29,290
<font color="#CCCCCC">we</font><font color="#E5E5E5"> were really rather keen to have</font>

336
00:12:26,230 --> 00:12:30,880
simple locking<font color="#E5E5E5"> that didn't require lots</font>

337
00:12:29,290 --> 00:12:32,469
of highly granular locking everywhere

338
00:12:30,880 --> 00:12:34,540
<font color="#E5E5E5">particularly if that's going to be in</font>

339
00:12:32,470 --> 00:12:37,839
the<font color="#E5E5E5"> the common single threaded case</font>

340
00:12:34,540 --> 00:12:39,219
that's<font color="#CCCCCC"> also I still use it so</font><font color="#E5E5E5"> we get</font><font color="#CCCCCC"> to</font>

341
00:12:37,839 --> 00:12:42,190
make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> mom hmm</font>

342
00:12:39,220 --> 00:12:44,350
relatively simple so so we cleaned<font color="#E5E5E5"> up</font>

343
00:12:42,190 --> 00:12:46,450
<font color="#E5E5E5">this magic of having the the current</font>

344
00:12:44,350 --> 00:12:47,890
index inside<font color="#E5E5E5"> the instance of the token</font>

345
00:12:46,450 --> 00:12:49,690
array that you're iterating over<font color="#CCCCCC"> your</font>

346
00:12:47,890 --> 00:12:51,130
<font color="#E5E5E5">like this first this</font><font color="#CCCCCC"> is an iterator</font>

347
00:12:49,690 --> 00:12:53,290
start give me the first<font color="#E5E5E5"> one</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you</font>

348
00:12:51,130 --> 00:12:55,750
<font color="#E5E5E5">call get next get next and it's it's</font>

349
00:12:53,290 --> 00:12:58,420
mutating the thing itself<font color="#E5E5E5"> so we now have</font>

350
00:12:55,750 --> 00:13:00,370
a nice external iterator<font color="#E5E5E5"> we have</font>

351
00:12:58,420 --> 00:13:01,959
mutation guards everywhere<font color="#E5E5E5"> that</font>

352
00:13:00,370 --> 00:13:04,660
<font color="#E5E5E5">essentially designed to sort of crash</font>

353
00:13:01,959 --> 00:13:07,540
and<font color="#E5E5E5"> lock hard you know if they</font><font color="#CCCCCC"> ever see</font>

354
00:13:04,660 --> 00:13:10,000
<font color="#E5E5E5">a mutation</font><font color="#CCCCCC"> that occurs while this this</font>

355
00:13:07,540 --> 00:13:11,500
<font color="#E5E5E5">threaded calculation is</font><font color="#CCCCCC"> going on and so</font>

356
00:13:10,000 --> 00:13:16,390
we<font color="#CCCCCC"> had those sprinkle layers liberally</font>

357
00:13:11,500 --> 00:13:18,190
in scary-looking places yeah so by

358
00:13:16,390 --> 00:13:20,500
turning various things off<font color="#CCCCCC"> indirects</font>

359
00:13:18,190 --> 00:13:22,600
offset<font color="#E5E5E5"> match and so on and actually if</font>

360
00:13:20,500 --> 00:13:24,820
<font color="#E5E5E5">you look up an</font><font color="#CCCCCC"> H</font><font color="#E5E5E5"> lookup generate new</font>

361
00:13:22,600 --> 00:13:26,730
dependencies as they calculate to turn

362
00:13:24,820 --> 00:13:29,710
those off

363
00:13:26,730 --> 00:13:31,390
macros we<font color="#CCCCCC"> disable for now and if you</font>

364
00:13:29,710 --> 00:13:33,160
look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> what Excel does they look at the</font>

365
00:13:31,390 --> 00:13:34,960
macro<font color="#E5E5E5"> code and go</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a pure</font>

366
00:13:33,160 --> 00:13:37,420
<font color="#CCCCCC">function it</font><font color="#E5E5E5"> doesn't mutate stuff so</font>

367
00:13:34,960 --> 00:13:39,280
actually Excel<font color="#E5E5E5"> doesn't allow macros</font><font color="#CCCCCC"> that</font>

368
00:13:37,420 --> 00:13:41,620
do stupid stuff<font color="#CCCCCC"> to be called in</font><font color="#E5E5E5"> formula</font>

369
00:13:39,280 --> 00:13:43,209
but<font color="#E5E5E5"> we're not quite as advanced as that</font>

370
00:13:41,620 --> 00:13:44,920
<font color="#E5E5E5">what would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> nicer</font><font color="#E5E5E5"> would be to</font>

371
00:13:43,210 --> 00:13:46,720
paralyze the<font color="#E5E5E5"> basic interpreter but</font>

372
00:13:44,920 --> 00:13:47,770
that's<font color="#E5E5E5"> quite an exciting exciting</font>

373
00:13:46,720 --> 00:13:48,970
problem there are<font color="#E5E5E5"> people out</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> in</font>

374
00:13:47,770 --> 00:13:51,520
the<font color="#CCCCCC"> industry that</font><font color="#E5E5E5"> would love to</font><font color="#CCCCCC"> have</font>

375
00:13:48,970 --> 00:13:54,910
parallel macro execution<font color="#E5E5E5"> because</font><font color="#CCCCCC"> their</font>

376
00:13:51,520 --> 00:13:56,890
quant<font color="#E5E5E5"> uses these weird functions for you</font>

377
00:13:54,910 --> 00:14:00,550
know<font color="#E5E5E5"> pricing Greeks or whatever and they</font>

378
00:13:56,890 --> 00:14:01,990
want one<font color="#E5E5E5"> that quick</font><font color="#CCCCCC"> out yeah there's a</font>

379
00:14:00,550 --> 00:14:04,060
whole lot of<font color="#E5E5E5"> stuff at the moment</font><font color="#CCCCCC"> we</font>

380
00:14:01,990 --> 00:14:06,880
allow external you know extensions to be

381
00:14:04,060 --> 00:14:08,319
<font color="#E5E5E5">cooled because well they're just as bad</font>

382
00:14:06,880 --> 00:14:10,420
<font color="#E5E5E5">as macros but they probably don't exist</font>

383
00:14:08,320 --> 00:14:12,460
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so if there</font><font color="#E5E5E5"> are that's all</font><font color="#CCCCCC"> right you</font>

384
00:14:10,420 --> 00:14:15,430
know we should<font color="#CCCCCC"> probably turn that off</font>

385
00:14:12,460 --> 00:14:18,190
<font color="#CCCCCC">and there are</font><font color="#E5E5E5"> even more nasty</font><font color="#CCCCCC"> is more</font>

386
00:14:15,430 --> 00:14:20,020
more global variables left and right and

387
00:14:18,190 --> 00:14:21,610
as we started look at<font color="#E5E5E5"> these it's nowhere</font>

388
00:14:20,020 --> 00:14:22,870
obvious to hang them<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> actually</font>

389
00:14:21,610 --> 00:14:25,210
be sensible so we have a whole<font color="#CCCCCC"> weight of</font>

390
00:14:22,870 --> 00:14:27,160
<font color="#CCCCCC">thread local variables for the</font>

391
00:14:25,210 --> 00:14:29,350
calculation stack<font color="#E5E5E5"> current document being</font>

392
00:14:27,160 --> 00:14:31,329
calculated matrix positions and a few

393
00:14:29,350 --> 00:14:33,310
more we had to upgrade the Mac<font color="#E5E5E5"> tool</font>

394
00:14:31,330 --> 00:14:38,170
chain to make thread-local variables

395
00:14:33,310 --> 00:14:40,089
work which is slightly unfortunate and

396
00:14:38,170 --> 00:14:41,530
eventually we then<font color="#E5E5E5"> for</font><font color="#CCCCCC"> we did it</font>

397
00:14:40,090 --> 00:14:43,030
<font color="#E5E5E5">introduced an SC interpreted context</font>

398
00:14:41,530 --> 00:14:45,730
<font color="#CCCCCC">that</font><font color="#E5E5E5"> became more and</font><font color="#CCCCCC"> more things that</font><font color="#E5E5E5"> we</font>

399
00:14:43,030 --> 00:14:48,130
wanted<font color="#E5E5E5"> to hang somewhere to optimize and</font>

400
00:14:45,730 --> 00:14:50,080
perform<font color="#CCCCCC"> improve performance</font><font color="#E5E5E5"> and so now</font>

401
00:14:48,130 --> 00:14:52,689
we<font color="#CCCCCC"> passed a an</font><font color="#E5E5E5"> interpretive context</font>

402
00:14:50,080 --> 00:14:55,210
<font color="#E5E5E5">through many of the</font><font color="#CCCCCC"> functions and try</font>

403
00:14:52,690 --> 00:14:58,330
<font color="#CCCCCC">and try and</font><font color="#E5E5E5"> make that</font><font color="#CCCCCC"> add up so how did</font>

404
00:14:55,210 --> 00:15:00,310
it<font color="#CCCCCC"> go well initially</font><font color="#E5E5E5"> I mean it did quite</font>

405
00:14:58,330 --> 00:15:02,080
<font color="#CCCCCC">well so so this</font><font color="#E5E5E5"> is the this is the</font>

406
00:15:00,310 --> 00:15:03,849
<font color="#E5E5E5">single threaded calculation this is</font><font color="#CCCCCC"> the</font>

407
00:15:02,080 --> 00:15:05,320
same performance<font color="#E5E5E5"> with just one thread so</font>

408
00:15:03,850 --> 00:15:08,920
<font color="#E5E5E5">you know hopefully this would be</font>

409
00:15:05,320 --> 00:15:11,470
<font color="#E5E5E5">reasonably flat there's two things</font><font color="#CCCCCC"> said</font>

410
00:15:08,920 --> 00:15:14,349
there's my<font color="#E5E5E5"> Linux laptop and then there's</font>

411
00:15:11,470 --> 00:15:15,280
some<font color="#CCCCCC"> rising 16 core monster</font><font color="#E5E5E5"> and there's</font>

412
00:15:14,350 --> 00:15:16,360
several things<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> here which</font>

413
00:15:15,280 --> 00:15:18,130
probably<font color="#E5E5E5"> better</font><font color="#CCCCCC"> actually on a log plot</font>

414
00:15:16,360 --> 00:15:19,840
<font color="#E5E5E5">if you draw the log plot you see</font><font color="#CCCCCC"> this</font>

415
00:15:18,130 --> 00:15:21,790
<font color="#E5E5E5">going very nicely linearly downwards</font>

416
00:15:19,840 --> 00:15:24,430
until<font color="#E5E5E5"> you</font><font color="#CCCCCC"> hyper thread at which</font><font color="#E5E5E5"> point</font>

417
00:15:21,790 --> 00:15:25,870
yeah you know it<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> really speed up</font>

418
00:15:24,430 --> 00:15:28,120
<font color="#E5E5E5">a whole lot you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see this flatten off</font>

419
00:15:25,870 --> 00:15:29,440
massively at the end because<font color="#E5E5E5"> we're</font>

420
00:15:28,120 --> 00:15:31,960
really<font color="#E5E5E5"> hammering this thing quite hard</font>

421
00:15:29,440 --> 00:15:33,850
<font color="#E5E5E5">such as the hyper threading doesn't work</font>

422
00:15:31,960 --> 00:15:36,550
well<font color="#CCCCCC"> say well in</font><font color="#E5E5E5"> this of course</font><font color="#CCCCCC"> this is</font>

423
00:15:33,850 --> 00:15:38,590
because it's<font color="#E5E5E5"> doing a big SSE this test</font>

424
00:15:36,550 --> 00:15:39,729
is<font color="#CCCCCC"> just a large sum</font><font color="#E5E5E5"> and it's doing a lot</font>

425
00:15:38,590 --> 00:15:41,230
of double work

426
00:15:39,730 --> 00:15:43,089
<font color="#CCCCCC">Piper spring</font><font color="#E5E5E5"> probably</font><font color="#CCCCCC"> helps you more</font><font color="#E5E5E5"> on</font>

427
00:15:41,230 --> 00:15:46,360
other<font color="#E5E5E5"> other</font><font color="#CCCCCC"> use cases</font><font color="#E5E5E5"> but at the moment</font>

428
00:15:43,089 --> 00:15:50,440
<font color="#CCCCCC">we turn that off and it</font><font color="#E5E5E5"> actually speeds</font>

429
00:15:46,360 --> 00:15:53,050
things up so so<font color="#CCCCCC"> yeah so to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> point</font>

430
00:15:50,440 --> 00:15:54,430
then we have had four sets of

431
00:15:53,050 --> 00:15:56,199
calculations so we could do a plain old

432
00:15:54,430 --> 00:15:59,050
calculation<font color="#E5E5E5"> single</font><font color="#CCCCCC"> early</font><font color="#E5E5E5"> we could have</font>

433
00:15:56,200 --> 00:16:01,120
the software<font color="#CCCCCC"> group threaded a</font><font color="#E5E5E5"> sync</font>

434
00:15:59,050 --> 00:16:03,519
single threaded calculation so again

435
00:16:01,120 --> 00:16:04,899
<font color="#CCCCCC">aggregate</font><font color="#E5E5E5"> stuff in matrix calculate</font><font color="#CCCCCC"> we</font>

436
00:16:03,519 --> 00:16:06,519
have the<font color="#E5E5E5"> open CL thing and now we have</font>

437
00:16:04,899 --> 00:16:09,070
the new threaded calculation<font color="#E5E5E5"> like at</font>

438
00:16:06,519 --> 00:16:11,620
<font color="#E5E5E5">least nice acronyms I've added and then</font>

439
00:16:09,070 --> 00:16:13,000
horror of Horrors<font color="#E5E5E5"> on benchmarking it we</font>

440
00:16:11,620 --> 00:16:15,190
discovered<font color="#E5E5E5"> that sometimes the new</font>

441
00:16:13,000 --> 00:16:17,890
threaded calculation which is all shiny

442
00:16:15,190 --> 00:16:19,240
<font color="#CCCCCC">and pretty</font><font color="#E5E5E5"> and you know doing no locking</font>

443
00:16:17,890 --> 00:16:21,459
really at<font color="#E5E5E5"> all</font><font color="#CCCCCC"> and absolutely wonderful</font>

444
00:16:19,240 --> 00:16:22,930
<font color="#CCCCCC">um was slower</font><font color="#E5E5E5"> than the single threaded</font>

445
00:16:21,459 --> 00:16:24,760
calculation<font color="#E5E5E5"> with the software group</font>

446
00:16:22,930 --> 00:16:29,229
interpreter so that's pretty<font color="#E5E5E5"> depressing</font>

447
00:16:24,760 --> 00:16:30,339
<font color="#CCCCCC">after some you know month of work yeah</font>

448
00:16:29,230 --> 00:16:31,720
and it turns out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> actually the</font>

449
00:16:30,339 --> 00:16:33,730
process<font color="#CCCCCC"> of collecting all that</font><font color="#E5E5E5"> data from</font>

450
00:16:31,720 --> 00:16:37,750
<font color="#CCCCCC">the sheets</font><font color="#E5E5E5"> checking</font><font color="#CCCCCC"> its types fooling</font>

451
00:16:33,730 --> 00:16:38,950
around<font color="#E5E5E5"> looking at format types and so on</font>

452
00:16:37,750 --> 00:16:41,290
and so<font color="#E5E5E5"> on for each formula cell is</font>

453
00:16:38,950 --> 00:16:42,670
<font color="#E5E5E5">really expensive and often it's done</font>

454
00:16:41,290 --> 00:16:43,959
again and<font color="#E5E5E5"> again and again</font><font color="#CCCCCC"> for these</font>

455
00:16:42,670 --> 00:16:45,790
things where you have an N squared so

456
00:16:43,959 --> 00:16:47,529
you're doing<font color="#E5E5E5"> a big operation on a column</font>

457
00:16:45,790 --> 00:16:51,279
and then you're doing<font color="#E5E5E5"> it</font><font color="#CCCCCC"> multiple times</font>

458
00:16:47,529 --> 00:16:52,839
<font color="#E5E5E5">as you go down and yeah</font><font color="#CCCCCC"> an egg of course</font>

459
00:16:51,279 --> 00:16:54,550
collects it once and<font color="#E5E5E5"> then it's hyper</font>

460
00:16:52,839 --> 00:16:57,490
optimized as a<font color="#CCCCCC"> si goodness you know</font>

461
00:16:54,550 --> 00:17:00,550
<font color="#E5E5E5">really whipping through through that so</font>

462
00:16:57,490 --> 00:17:01,660
<font color="#E5E5E5">hmm so we then threaded the a version as</font>

463
00:17:00,550 --> 00:17:03,040
<font color="#CCCCCC">well so</font><font color="#E5E5E5"> instead of having a single</font>

464
00:17:01,660 --> 00:17:05,470
<font color="#E5E5E5">threaded software group</font><font color="#CCCCCC"> in software</font><font color="#E5E5E5"> we</font>

465
00:17:03,040 --> 00:17:08,438
threaded<font color="#E5E5E5"> that as well and then suddenly</font>

466
00:17:05,470 --> 00:17:11,410
life was was good again

467
00:17:08,439 --> 00:17:14,770
<font color="#E5E5E5">so I got a</font><font color="#CCCCCC"> picture of some</font><font color="#E5E5E5"> of that in a</font>

468
00:17:11,410 --> 00:17:16,449
minute<font color="#E5E5E5"> them how how the stats looked so</font>

469
00:17:14,770 --> 00:17:17,589
why<font color="#E5E5E5"> are we</font><font color="#CCCCCC"> so then we sit there we're</font>

470
00:17:16,449 --> 00:17:19,120
going well it's all very<font color="#CCCCCC"> well</font><font color="#E5E5E5"> getting a</font>

471
00:17:17,589 --> 00:17:20,889
you know a<font color="#E5E5E5"> 6x but</font><font color="#CCCCCC"> we've got eight</font>

472
00:17:19,119 --> 00:17:23,438
threads why are we getting an<font color="#E5E5E5"> 8x</font><font color="#CCCCCC"> you</font>

473
00:17:20,890 --> 00:17:25,120
know or<font color="#CCCCCC"> 9 X</font><font color="#E5E5E5"> ideally you know you hear</font>

474
00:17:23,439 --> 00:17:27,939
<font color="#CCCCCC">about these sort of super linear</font>

475
00:17:25,119 --> 00:17:31,780
speed-up<font color="#E5E5E5"> stew you</font><font color="#CCCCCC"> to extra</font><font color="#E5E5E5"> cash use they</font>

476
00:17:27,939 --> 00:17:32,860
read well in the<font color="#E5E5E5"> textbooks donate so so</font>

477
00:17:31,780 --> 00:17:34,629
we start looking<font color="#E5E5E5"> on Windows since I've</font>

478
00:17:32,860 --> 00:17:38,199
seen herbal profiling tools there but

479
00:17:34,630 --> 00:17:39,340
some on Linux we use<font color="#E5E5E5"> purse</font><font color="#CCCCCC"> but looking</font>

480
00:17:38,200 --> 00:17:40,600
for thread issues it's<font color="#CCCCCC"> not entirely</font>

481
00:17:39,340 --> 00:17:43,330
<font color="#E5E5E5">obvious of course if you've got a lot</font>

482
00:17:40,600 --> 00:17:45,040
contention<font color="#CCCCCC"> you know there's a lot</font><font color="#E5E5E5"> of</font>

483
00:17:43,330 --> 00:17:46,689
time spent sleeping but it's not real

484
00:17:45,040 --> 00:17:49,480
<font color="#E5E5E5">time you know like the kernel is going</font>

485
00:17:46,690 --> 00:17:51,850
off<font color="#E5E5E5"> and counting sheep instead</font><font color="#CCCCCC"> and that</font>

486
00:17:49,480 --> 00:17:53,150
<font color="#CCCCCC">doesn't really show up easily on</font><font color="#E5E5E5"> many of</font>

487
00:17:51,850 --> 00:17:54,800
the profiling<font color="#E5E5E5"> tools</font>

488
00:17:53,150 --> 00:17:57,200
and so the whole lot of different events

489
00:17:54,800 --> 00:18:02,270
<font color="#CCCCCC">you can look at and you can</font><font color="#E5E5E5"> look at sort</font>

490
00:17:57,200 --> 00:18:05,059
of bouncing of<font color="#CCCCCC"> kernel of futex</font><font color="#E5E5E5"> memory</font>

491
00:18:02,270 --> 00:18:06,950
locations between<font color="#E5E5E5"> threads I guess and</font>

492
00:18:05,059 --> 00:18:08,899
there's various things<font color="#CCCCCC"> like that but we</font>

493
00:18:06,950 --> 00:18:10,160
spent a lot of time eventually<font color="#CCCCCC"> Perth</font>

494
00:18:08,900 --> 00:18:13,130
turned out to be the probably<font color="#CCCCCC"> the best</font>

495
00:18:10,160 --> 00:18:14,240
thing to<font color="#E5E5E5"> help help with this and looking</font>

496
00:18:13,130 --> 00:18:16,280
for things<font color="#CCCCCC"> like false</font><font color="#E5E5E5"> sharing where</font>

497
00:18:14,240 --> 00:18:18,320
<font color="#E5E5E5">you've tried to separate your memory but</font>

498
00:18:16,280 --> 00:18:19,850
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> you're allocator is smart it</font>

499
00:18:18,320 --> 00:18:21,740
shoves all the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> sized things in the</font>

500
00:18:19,850 --> 00:18:23,300
same place<font color="#CCCCCC"> next</font><font color="#E5E5E5"> to each other and they</font>

501
00:18:21,740 --> 00:18:25,100
<font color="#CCCCCC">all end up in</font><font color="#E5E5E5"> the same cache line</font><font color="#CCCCCC"> and</font>

502
00:18:23,300 --> 00:18:27,050
then this bounces<font color="#E5E5E5"> between all your</font><font color="#CCCCCC"> cores</font>

503
00:18:25,100 --> 00:18:30,290
so we tried we tried<font color="#E5E5E5"> looking at a lot of</font>

504
00:18:27,050 --> 00:18:31,879
<font color="#E5E5E5">these things and with with not</font><font color="#CCCCCC"> a vast</font>

505
00:18:30,290 --> 00:18:33,950
amount of success but here was some of

506
00:18:31,880 --> 00:18:34,910
<font color="#CCCCCC">Horrors we found so most of the</font>

507
00:18:33,950 --> 00:18:36,440
threading things that we were<font color="#E5E5E5"> looking</font>

508
00:18:34,910 --> 00:18:40,220
for<font color="#E5E5E5"> didn't turn out to be terribly</font><font color="#CCCCCC"> uh</font>

509
00:18:36,440 --> 00:18:42,830
you know<font color="#E5E5E5"> findable but the other stuff</font>

510
00:18:40,220 --> 00:18:44,830
<font color="#E5E5E5">was pretty silly so as you operate</font><font color="#CCCCCC"> on</font>

511
00:18:42,830 --> 00:18:47,090
this reverse<font color="#E5E5E5"> polish stack we were</font>

512
00:18:44,830 --> 00:18:49,669
regularly<font color="#E5E5E5"> just allocating and freeing</font>

513
00:18:47,090 --> 00:18:52,850
things<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> time as we</font><font color="#E5E5E5"> did it</font>

514
00:18:49,670 --> 00:18:54,080
and yeah that using using the<font color="#CCCCCC"> actually</font>

515
00:18:52,850 --> 00:18:56,570
using the system allocation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> certain</font>

516
00:18:54,080 --> 00:18:58,040
<font color="#CCCCCC">mattias which one here really sped</font>

517
00:18:56,570 --> 00:18:59,240
<font color="#E5E5E5">things are particularly for for parallel</font>

518
00:18:58,040 --> 00:19:03,050
use there so we dropped the custom

519
00:18:59,240 --> 00:19:05,120
allocator<font color="#E5E5E5"> and after that we also reuse</font>

520
00:19:03,050 --> 00:19:06,889
these<font color="#CCCCCC"> tokens where possible so so why</font>

521
00:19:05,120 --> 00:19:08,479
bother allocating and freeing hundreds

522
00:19:06,890 --> 00:19:11,030
of<font color="#E5E5E5"> double</font><font color="#CCCCCC"> Takens when you</font><font color="#E5E5E5"> just did that</font>

523
00:19:08,480 --> 00:19:13,130
just before<font color="#E5E5E5"> so we have a little a little</font>

524
00:19:11,030 --> 00:19:15,760
stash of<font color="#E5E5E5"> some so there's no need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take</font>

525
00:19:13,130 --> 00:19:17,900
a look<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just reuse the thing</font>

526
00:19:15,760 --> 00:19:19,879
another<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> folly that people</font>

527
00:19:17,900 --> 00:19:21,080
<font color="#E5E5E5">like is to use standard stack because it</font>

528
00:19:19,880 --> 00:19:22,340
sounds<font color="#E5E5E5"> like if you're making</font><font color="#CCCCCC"> a stack</font>

529
00:19:21,080 --> 00:19:24,020
that's what you want<font color="#E5E5E5"> right</font>

530
00:19:22,340 --> 00:19:25,850
but let me<font color="#E5E5E5"> tell you</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> your use</font><font color="#CCCCCC"> case is</font>

531
00:19:24,020 --> 00:19:27,889
<font color="#CCCCCC">to extend</font><font color="#E5E5E5"> and grow a stack like this you</font>

532
00:19:25,850 --> 00:19:30,169
know you exactly don't want a stack

533
00:19:27,890 --> 00:19:31,880
because<font color="#E5E5E5"> underneath it uses a DQ which</font>

534
00:19:30,170 --> 00:19:33,920
has got a list inside<font color="#E5E5E5"> it so every time</font>

535
00:19:31,880 --> 00:19:35,570
you push something<font color="#E5E5E5"> on it it allocates a</font>

536
00:19:33,920 --> 00:19:37,220
new<font color="#E5E5E5"> note and</font><font color="#CCCCCC"> when you're multiple e</font>

537
00:19:35,570 --> 00:19:38,540
threaded<font color="#E5E5E5"> what you really don't want is</font>

538
00:19:37,220 --> 00:19:40,429
to<font color="#E5E5E5"> be constantly hammering your</font>

539
00:19:38,540 --> 00:19:41,960
allocator left and<font color="#E5E5E5"> left and right to</font>

540
00:19:40,429 --> 00:19:43,610
allocate and free all these tiny nodes

541
00:19:41,960 --> 00:19:46,820
<font color="#E5E5E5">and chain them together</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> use a</font>

542
00:19:43,610 --> 00:19:48,260
vector<font color="#E5E5E5"> very nice a wind just comes out</font>

543
00:19:46,820 --> 00:19:49,939
<font color="#E5E5E5">of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> course the</font>

544
00:19:48,260 --> 00:19:51,650
interpreter context which starts to

545
00:19:49,940 --> 00:19:52,429
cache these things as being freed and

546
00:19:51,650 --> 00:19:54,380
reallocated

547
00:19:52,429 --> 00:19:58,250
so just by saving<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> things</font>

548
00:19:54,380 --> 00:20:01,220
we we got a lot better<font color="#CCCCCC"> um so there are</font>

549
00:19:58,250 --> 00:20:03,080
some<font color="#E5E5E5"> other particularly awful things so</font>

550
00:20:01,220 --> 00:20:06,010
we see the sfx item set which is a

551
00:20:03,080 --> 00:20:08,320
<font color="#E5E5E5">favorite of</font><font color="#CCCCCC"> Bjorn's</font><font color="#E5E5E5"> and and many others</font>

552
00:20:06,010 --> 00:20:11,490
appearing<font color="#E5E5E5"> right in the middle of the</font>

553
00:20:08,320 --> 00:20:14,500
interpreter<font color="#CCCCCC"> so you know people are doing</font>

554
00:20:11,490 --> 00:20:16,000
<font color="#E5E5E5">get number format on cells as they do</font>

555
00:20:14,500 --> 00:20:18,580
this arithmetic<font color="#E5E5E5"> which shouldn't need to</font>

556
00:20:16,000 --> 00:20:21,880
<font color="#CCCCCC">be</font><font color="#E5E5E5"> used at all so this gets a valuable</font>

557
00:20:18,580 --> 00:20:24,070
<font color="#CCCCCC">zero is in</font><font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> get value get</font>

558
00:20:21,880 --> 00:20:25,600
value function<font color="#CCCCCC"> and it just um</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> just</font>

559
00:20:24,070 --> 00:20:28,990
<font color="#E5E5E5">does some some really crazy stuff you</font>

560
00:20:25,600 --> 00:20:30,399
<font color="#E5E5E5">know like and it's it's really unclear</font>

561
00:20:28,990 --> 00:20:32,140
why it needs<font color="#E5E5E5"> to do this and you start</font>

562
00:20:30,400 --> 00:20:35,170
looking<font color="#CCCCCC"> into this and it's it's really</font><font color="#E5E5E5"> a</font>

563
00:20:32,140 --> 00:20:37,030
it's<font color="#CCCCCC"> rather rather frightening</font><font color="#E5E5E5"> so here's</font>

564
00:20:35,170 --> 00:20:39,670
here's a sort of performance story<font color="#CCCCCC"> say</font>

565
00:20:37,030 --> 00:20:41,620
so as we threaded<font color="#E5E5E5"> your time wants to get</font>

566
00:20:39,670 --> 00:20:42,790
lower if you<font color="#E5E5E5"> want to get faster so so we</font>

567
00:20:41,620 --> 00:20:44,679
do all this nice threading work and<font color="#E5E5E5"> this</font>

568
00:20:42,790 --> 00:20:46,389
<font color="#E5E5E5">is the first step off a recent master I</font>

569
00:20:44,680 --> 00:20:47,920
guess and some<font color="#E5E5E5"> sheets got massively</font>

570
00:20:46,390 --> 00:20:49,390
faster which is<font color="#E5E5E5"> good you</font><font color="#CCCCCC"> know so</font><font color="#E5E5E5"> we're</font>

571
00:20:47,920 --> 00:20:52,420
going from<font color="#E5E5E5"> my</font><font color="#CCCCCC"> own way up</font><font color="#E5E5E5"> here to way</font>

572
00:20:49,390 --> 00:20:54,550
down<font color="#CCCCCC"> here maybe you know maybe twice as</font>

573
00:20:52,420 --> 00:20:55,510
fast<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is great</font><font color="#E5E5E5"> and but at the same</font>

574
00:20:54,550 --> 00:20:58,899
time<font color="#E5E5E5"> the whole lot of old sheets got</font>

575
00:20:55,510 --> 00:21:00,100
snow which seems strange<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> reason</font>

576
00:20:58,900 --> 00:21:01,630
they got<font color="#CCCCCC"> slowed</font><font color="#E5E5E5"> was that we turned off</font>

577
00:21:00,100 --> 00:21:03,760
the<font color="#E5E5E5"> software interpreter so that was</font>

578
00:21:01,630 --> 00:21:06,190
doing this nice pre gather and then some

579
00:21:03,760 --> 00:21:07,540
and<font color="#E5E5E5"> then push</font><font color="#CCCCCC"> it back so by threading</font>

580
00:21:06,190 --> 00:21:10,210
the software interpreter then we managed

581
00:21:07,540 --> 00:21:12,060
to<font color="#E5E5E5"> get back you know some of this stuff</font>

582
00:21:10,210 --> 00:21:14,500
stopping<font color="#CCCCCC"> thrashing to take an array</font>

583
00:21:12,060 --> 00:21:17,050
having the number of threads so getting

584
00:21:14,500 --> 00:21:19,780
<font color="#E5E5E5">rid of</font><font color="#CCCCCC"> hyper threading took us to here</font>

585
00:21:17,050 --> 00:21:22,510
<font color="#E5E5E5">so flat flattish for some loads and big</font>

586
00:21:19,780 --> 00:21:24,220
wins<font color="#CCCCCC"> for other so getting</font><font color="#E5E5E5"> rid of</font><font color="#CCCCCC"> hype</font>

587
00:21:22,510 --> 00:21:26,530
<font color="#CCCCCC">three we just use half the number</font><font color="#E5E5E5"> of</font>

588
00:21:24,220 --> 00:21:29,470
threads<font color="#E5E5E5"> and the OS knows what to do now</font>

589
00:21:26,530 --> 00:21:31,990
on its own custom allocator again big

590
00:21:29,470 --> 00:21:34,420
wins for<font color="#E5E5E5"> some</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> a slight win</font>

591
00:21:31,990 --> 00:21:36,520
lot loss for others<font color="#E5E5E5"> I'm cashing formula</font>

592
00:21:34,420 --> 00:21:37,780
double tokens various other lots of

593
00:21:36,520 --> 00:21:39,970
commits that<font color="#E5E5E5"> don't do anything isn't</font>

594
00:21:37,780 --> 00:21:40,840
that nice you know<font color="#CCCCCC"> so it's good TV it's</font>

595
00:21:39,970 --> 00:21:42,990
good to<font color="#E5E5E5"> know you're making a difference</font>

596
00:21:40,840 --> 00:21:46,840
<font color="#CCCCCC">as you as you do these</font><font color="#E5E5E5"> three factors</font>

597
00:21:42,990 --> 00:21:48,550
<font color="#E5E5E5">mm-hmm and what else yeah</font><font color="#CCCCCC"> C++ wrote</font>

598
00:21:46,840 --> 00:21:50,590
various other other things<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> end</font>

599
00:21:48,550 --> 00:21:52,360
<font color="#CCCCCC">but</font><font color="#E5E5E5"> still overall pretty pretty good</font>

600
00:21:50,590 --> 00:21:53,949
<font color="#CCCCCC">coming down from you know sort of I'd</font>

601
00:21:52,360 --> 00:21:58,419
<font color="#E5E5E5">only six six hundred milliseconds down</font>

602
00:21:53,950 --> 00:22:00,370
to<font color="#CCCCCC"> 154 for this one and</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> 1601</font>

603
00:21:58,420 --> 00:22:03,010
point six seconds down to less than<font color="#E5E5E5"> half</font>

604
00:22:00,370 --> 00:22:06,010
<font color="#E5E5E5">a second and around half a second and so</font>

605
00:22:03,010 --> 00:22:09,670
<font color="#E5E5E5">on so yeah so that's pretty much</font><font color="#CCCCCC"> the</font>

606
00:22:06,010 --> 00:22:11,470
thing and what should be<font color="#CCCCCC"> next well yeah</font>

607
00:22:09,670 --> 00:22:14,100
the crash testing loads these hundred

608
00:22:11,470 --> 00:22:15,850
thousand documents<font color="#CCCCCC"> and it asserts</font>

609
00:22:14,100 --> 00:22:18,189
liberally left and right

610
00:22:15,850 --> 00:22:19,480
almost<font color="#E5E5E5"> certainly implicit intersection</font>

611
00:22:18,190 --> 00:22:21,190
is killing<font color="#E5E5E5"> us so implicit in</font>

612
00:22:19,480 --> 00:22:24,490
section is a clever way<font color="#CCCCCC"> of writing</font>

613
00:22:21,190 --> 00:22:26,020
<font color="#E5E5E5">formally wrong and calc and noticing</font>

614
00:22:24,490 --> 00:22:29,530
this<font color="#CCCCCC"> and correcting them as it</font>

615
00:22:26,020 --> 00:22:31,270
calculates<font color="#E5E5E5"> I simplify but yeah people</font>

616
00:22:29,530 --> 00:22:34,780
can deliberately use it I suppose but I

617
00:22:31,270 --> 00:22:36,220
don't know why they would and so the

618
00:22:34,780 --> 00:22:38,500
reason is that they write a smaller

619
00:22:36,220 --> 00:22:40,060
range than there is actually ends up

620
00:22:38,500 --> 00:22:42,430
<font color="#E5E5E5">being used and</font><font color="#CCCCCC"> so when we look at our</font>

621
00:22:40,060 --> 00:22:44,470
dependence we don't pre calculate stuff

622
00:22:42,430 --> 00:22:45,880
and then<font color="#E5E5E5"> multiple threads get caught in</font>

623
00:22:44,470 --> 00:22:47,410
this assertive oh dear

624
00:22:45,880 --> 00:22:50,710
we're fetching the station it's not

625
00:22:47,410 --> 00:22:51,910
calculated<font color="#CCCCCC"> yeah well I'd like</font><font color="#E5E5E5"> to kill</font>

626
00:22:50,710 --> 00:22:53,950
those<font color="#CCCCCC"> global variables that's actually</font>

627
00:22:51,910 --> 00:22:55,720
probably<font color="#E5E5E5"> relatively easy for</font><font color="#CCCCCC"> a newbie to</font>

628
00:22:53,950 --> 00:22:57,610
<font color="#E5E5E5">do maybe should</font><font color="#CCCCCC"> be an easy hack now</font>

629
00:22:55,720 --> 00:23:02,320
because we got<font color="#CCCCCC"> this nice context to put</font>

630
00:22:57,610 --> 00:23:03,879
them<font color="#E5E5E5"> on yeah</font><font color="#CCCCCC"> big</font><font color="#E5E5E5"> stuff like killing the</font>

631
00:23:02,320 --> 00:23:06,580
<font color="#E5E5E5">formula</font><font color="#CCCCCC"> cell and making it a formula</font>

632
00:23:03,880 --> 00:23:08,320
cell group one<font color="#E5E5E5"> of these groups that</font><font color="#CCCCCC"> just</font>

633
00:23:06,580 --> 00:23:09,939
happens to be one long that would<font color="#E5E5E5"> be</font>

634
00:23:08,320 --> 00:23:13,030
<font color="#E5E5E5">kind of nice and then maybe be able</font><font color="#CCCCCC"> to</font>

635
00:23:09,940 --> 00:23:15,850
simplify<font color="#CCCCCC"> some of these these pieces and</font>

636
00:23:13,030 --> 00:23:19,000
<font color="#E5E5E5">making the plain</font><font color="#CCCCCC"> old calculation just a</font>

637
00:23:15,850 --> 00:23:20,620
single threaded<font color="#E5E5E5"> threaded calculation and</font>

638
00:23:19,000 --> 00:23:23,110
<font color="#CCCCCC">finally getting rid of this format type</font>

639
00:23:20,620 --> 00:23:27,550
stuff that<font color="#CCCCCC"> should never be happening at</font>

640
00:23:23,110 --> 00:23:28,090
all during calculation<font color="#CCCCCC"> I think so that's</font>

641
00:23:27,550 --> 00:23:29,590
<font color="#CCCCCC">about it</font>

642
00:23:28,090 --> 00:23:33,010
throw the conclusions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> kind of</font>

643
00:23:29,590 --> 00:23:34,560
<font color="#E5E5E5">obvious yeah one point here is that it's</font>

644
00:23:33,010 --> 00:23:36,730
actually<font color="#CCCCCC"> just an economic</font><font color="#E5E5E5"> problem</font>

645
00:23:34,560 --> 00:23:39,030
unfortunately technology is fun and all

646
00:23:36,730 --> 00:23:41,200
that but<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know just</font><font color="#E5E5E5"> being able to</font>

647
00:23:39,030 --> 00:23:42,370
<font color="#E5E5E5">invest in optimizing this thing as soon</font>

648
00:23:41,200 --> 00:23:43,990
as you open<font color="#CCCCCC"> the profiler you</font><font color="#E5E5E5"> start</font>

649
00:23:42,370 --> 00:23:46,629
thinking why is it doing<font color="#CCCCCC"> that that's</font>

650
00:23:43,990 --> 00:23:48,670
really<font color="#E5E5E5"> silly</font><font color="#CCCCCC"> so yep</font><font color="#E5E5E5"> just thanks then to</font>

651
00:23:46,630 --> 00:23:52,840
<font color="#CCCCCC">MD for supporting</font><font color="#E5E5E5"> it that's my talk any</font>

652
00:23:48,670 --> 00:23:54,580
questions so you have a finger up<font color="#CCCCCC"> man</font>

653
00:23:52,840 --> 00:23:59,980
<font color="#CCCCCC">know you're trying not to</font><font color="#E5E5E5"> look like a</font>

654
00:23:54,580 --> 00:24:01,870
questioner<font color="#E5E5E5"> okay anyone else the first</font>

655
00:23:59,980 --> 00:24:07,120
<font color="#E5E5E5">person has to be brave but after that</font>

656
00:24:01,870 --> 00:24:08,439
it's easy<font color="#CCCCCC"> okay how</font><font color="#E5E5E5"> many threads do two</font>

657
00:24:07,120 --> 00:24:10,419
people have I'm<font color="#E5E5E5"> going to do a poll since</font>

658
00:24:08,440 --> 00:24:13,870
you're all static<font color="#E5E5E5"> does anyone have a</font>

659
00:24:10,420 --> 00:24:16,660
single threaded<font color="#E5E5E5"> laptop or CPU they're</font>

660
00:24:13,870 --> 00:24:18,520
using a tool<font color="#E5E5E5"> okay you know if it's your</font>

661
00:24:16,660 --> 00:24:22,060
main work PC<font color="#E5E5E5"> oh</font><font color="#CCCCCC"> you do okay it's the</font>

662
00:24:18,520 --> 00:24:24,400
Raspberry Pi one yeah okay<font color="#CCCCCC"> I thought</font><font color="#E5E5E5"> I</font>

663
00:24:22,060 --> 00:24:26,649
thought it would be excellent<font color="#CCCCCC"> oh yeah</font>

664
00:24:24,400 --> 00:24:30,640
your phone is ancient<font color="#CCCCCC"> yeah the</font><font color="#E5E5E5"> fork a</font>

665
00:24:26,650 --> 00:24:34,450
phone<font color="#E5E5E5"> so how about two okay</font>

666
00:24:30,640 --> 00:24:36,190
I need<font color="#E5E5E5"> a key so I'm</font><font color="#CCCCCC"> talking Fred so</font>

667
00:24:34,450 --> 00:24:38,950
let's do<font color="#E5E5E5"> two threads so</font><font color="#CCCCCC"> you chew threads</font>

668
00:24:36,190 --> 00:24:40,809
<font color="#E5E5E5">um anyone with two threads</font><font color="#CCCCCC"> says the sky</font>

669
00:24:38,950 --> 00:24:43,120
<font color="#E5E5E5">and that's what you actively use in your</font>

670
00:24:40,809 --> 00:24:45,879
day-to-day work<font color="#E5E5E5"> okay fair enough</font>

671
00:24:43,120 --> 00:24:48,280
<font color="#E5E5E5">so sue it's not I once had a BBC micro</font>

672
00:24:45,880 --> 00:24:54,929
<font color="#CCCCCC">six 502 a 8 bit</font><font color="#E5E5E5"> I'm talking the you know</font>

673
00:24:48,280 --> 00:24:56,370
sort<font color="#CCCCCC"> of I'm so full</font><font color="#E5E5E5"> who's good for 408</font>

674
00:24:54,929 --> 00:25:00,370
that's me

675
00:24:56,370 --> 00:25:02,139
<font color="#CCCCCC">16</font><font color="#E5E5E5"> okay it starts to top out at this</font>

676
00:25:00,370 --> 00:25:04,360
<font color="#E5E5E5">point</font><font color="#CCCCCC"> any man</font><font color="#E5E5E5"> who can do better than 16</font>

677
00:25:02,140 --> 00:25:18,330
<font color="#E5E5E5">on their workstation your home tell me</font>

678
00:25:04,360 --> 00:25:21,129
and it's 64 yeah<font color="#E5E5E5"> 12 yeah yeah yeah yep</font>

679
00:25:18,330 --> 00:25:22,600
yes<font color="#E5E5E5"> so you see that</font><font color="#CCCCCC"> that is true so</font>

680
00:25:21,130 --> 00:25:28,630
there's<font color="#E5E5E5"> thermal management in in these</font>

681
00:25:22,600 --> 00:25:30,428
<font color="#E5E5E5">things</font><font color="#CCCCCC"> yeah however arguably it is</font>

682
00:25:28,630 --> 00:25:32,980
<font color="#CCCCCC">better to be yeah more efficient</font><font color="#E5E5E5"> and get</font>

683
00:25:30,429 --> 00:25:34,679
it done<font color="#E5E5E5"> quicker and then final thing for</font>

684
00:25:32,980 --> 00:25:37,960
<font color="#CCCCCC">all have it</font><font color="#E5E5E5"> going for a long old time</font>

685
00:25:34,679 --> 00:25:41,380
arguably race to<font color="#CCCCCC"> idle so they say</font><font color="#E5E5E5"> but</font>

686
00:25:37,960 --> 00:25:42,940
who knows<font color="#E5E5E5"> race to idle well like that</font>

687
00:25:41,380 --> 00:25:44,440
the<font color="#E5E5E5"> a</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> this is the the hurry up and</font>

688
00:25:42,940 --> 00:25:47,020
<font color="#E5E5E5">wait it's like the</font><font color="#CCCCCC"> military approach to</font>

689
00:25:44,440 --> 00:25:48,400
power saving<font color="#E5E5E5"> you know yeah good that was</font>

690
00:25:47,020 --> 00:25:49,690
<font color="#E5E5E5">that was not a question but that was a</font>

691
00:25:48,400 --> 00:25:52,620
good statement<font color="#E5E5E5"> thank you anything else</font>

692
00:25:49,690 --> 00:25:52,620
we got out<font color="#E5E5E5"> of three minutes</font>

693
00:25:58,610 --> 00:26:02,990
okay<font color="#E5E5E5"> Wow</font>

694
00:26:04,550 --> 00:26:10,169
could we integrate<font color="#CCCCCC"> LLVM to to compile</font>

695
00:26:07,650 --> 00:26:12,210
the formula<font color="#E5E5E5"> yeah I think so so that</font>

696
00:26:10,170 --> 00:26:14,490
there is in fact an<font color="#CCCCCC"> LLVM compiling the</font>

697
00:26:12,210 --> 00:26:16,250
formula solution already<font color="#E5E5E5"> built in but</font>

698
00:26:14,490 --> 00:26:18,780
it's typically known<font color="#CCCCCC"> as software OpenCL</font>

699
00:26:16,250 --> 00:26:20,340
<font color="#E5E5E5">and if you look under the hood</font><font color="#CCCCCC"> of these</font>

700
00:26:18,780 --> 00:26:22,889
open<font color="#CCCCCC"> CLM foundation so what you rapidly</font>

701
00:26:20,340 --> 00:26:24,689
discover is<font color="#CCCCCC"> that it's pretty much that</font>

702
00:26:22,890 --> 00:26:27,570
the the<font color="#E5E5E5"> problem is of</font><font color="#CCCCCC"> course it's not a</font>

703
00:26:24,690 --> 00:26:30,180
<font color="#E5E5E5">perfect match</font><font color="#CCCCCC"> for what we do</font><font color="#E5E5E5"> and in</font>

704
00:26:27,570 --> 00:26:32,669
terms<font color="#E5E5E5"> of our formula</font><font color="#CCCCCC"> our formula</font><font color="#E5E5E5"> engine</font>

705
00:26:30,180 --> 00:26:33,900
is heavily built around a lot<font color="#CCCCCC"> of the</font>

706
00:26:32,670 --> 00:26:35,580
concepts I've showed you<font color="#CCCCCC"> it</font><font color="#E5E5E5"> turns the</font>

707
00:26:33,900 --> 00:26:39,630
stack and how these<font color="#E5E5E5"> things are passed</font>

708
00:26:35,580 --> 00:26:42,870
and so you know the sine function<font color="#E5E5E5"> is not</font>

709
00:26:39,630 --> 00:26:47,160
a<font color="#CCCCCC"> see</font><font color="#E5E5E5"> function that's like</font><font color="#CCCCCC"> double do the</font>

710
00:26:42,870 --> 00:26:49,320
<font color="#CCCCCC">sine sig double it's like a have this</font>

711
00:26:47,160 --> 00:26:50,730
<font color="#CCCCCC">hammered bag of hammers of things you</font>

712
00:26:49,320 --> 00:26:52,409
could<font color="#E5E5E5"> get and what if you pass a bill</font>

713
00:26:50,730 --> 00:26:54,690
into it and what if you pass a you know

714
00:26:52,410 --> 00:26:57,150
string you know it's sort<font color="#E5E5E5"> of all shoved</font>

715
00:26:54,690 --> 00:26:58,620
into that formula<font color="#CCCCCC"> and say in terms</font><font color="#E5E5E5"> of</font>

716
00:26:57,150 --> 00:27:00,870
code reuse and simplification it's not

717
00:26:58,620 --> 00:27:02,610
what I do but Marcus has you know Marcus

718
00:27:00,870 --> 00:27:04,139
is our calc hero maintain it<font color="#E5E5E5"> wave</font><font color="#CCCCCC"> the</font>

719
00:27:02,610 --> 00:27:05,850
<font color="#E5E5E5">hand market so people harass you</font>

720
00:27:04,140 --> 00:27:08,130
afterwards<font color="#E5E5E5"> and you know so you</font><font color="#CCCCCC"> see he</font>

721
00:27:05,850 --> 00:27:10,679
probably has a more<font color="#E5E5E5"> detailed view but</font>

722
00:27:08,130 --> 00:27:14,210
yeah it's it's a good<font color="#E5E5E5"> idea perhaps but</font>

723
00:27:10,680 --> 00:27:14,210
but<font color="#E5E5E5"> we like</font><font color="#CCCCCC"> to simplify mark</font>

724
00:27:27,820 --> 00:27:32,899
yeah yeah<font color="#E5E5E5"> see there's</font><font color="#CCCCCC"> already</font>

725
00:27:30,860 --> 00:27:34,399
<font color="#E5E5E5">refactoring we can do to carry on this</font>

726
00:27:32,900 --> 00:27:36,950
<font color="#CCCCCC">improvement and make it to the point</font>

727
00:27:34,400 --> 00:27:39,290
<font color="#E5E5E5">that we could have something much much</font>

728
00:27:36,950 --> 00:27:41,390
sweet here<font color="#CCCCCC"> but yeah I think the wins</font>

729
00:27:39,290 --> 00:27:45,379
<font color="#CCCCCC">LLVM I'll give you</font><font color="#E5E5E5"> our small compared to</font>

730
00:27:41,390 --> 00:27:47,120
the refactoring<font color="#CCCCCC"> the cool cool fun goods</font>

731
00:27:45,380 --> 00:27:48,990
well there's<font color="#E5E5E5"> nothing else thanks so much</font>

732
00:27:47,120 --> 00:27:55,500
you make it

733
00:27:48,990 --> 00:27:55,500
[Applause]

