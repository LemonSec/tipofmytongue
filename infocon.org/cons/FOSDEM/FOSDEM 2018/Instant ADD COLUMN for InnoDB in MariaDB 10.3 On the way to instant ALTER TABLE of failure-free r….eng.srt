1
00:00:04,730 --> 00:00:09,720
<font color="#E5E5E5">okay thanks man for</font><font color="#CCCCCC"> those of you that</font>

2
00:00:07,230 --> 00:00:12,870
don't know me my<font color="#CCCCCC"> name</font><font color="#E5E5E5"> is Nick visas I've</font>

3
00:00:09,720 --> 00:00:16,020
been working with<font color="#E5E5E5"> Rene as a proxy SQL</font>

4
00:00:12,870 --> 00:00:21,210
<font color="#CCCCCC">committee</font><font color="#E5E5E5"> over the last few</font><font color="#CCCCCC"> months</font><font color="#E5E5E5"> and</font>

5
00:00:16,020 --> 00:00:23,789
I'm also a my SQL DBA<font color="#CCCCCC"> before I kick off</font>

6
00:00:21,210 --> 00:00:27,690
<font color="#E5E5E5">this</font><font color="#CCCCCC"> presentation just</font><font color="#E5E5E5"> a question a show</font>

7
00:00:23,789 --> 00:00:30,920
of hands<font color="#CCCCCC"> committed</font><font color="#E5E5E5"> to gauge</font><font color="#CCCCCC"> who's</font>

8
00:00:27,690 --> 00:00:39,620
familiar with asynchronous<font color="#CCCCCC"> replication</font>

9
00:00:30,920 --> 00:00:41,730
<font color="#E5E5E5">semi</font><font color="#CCCCCC"> sink</font><font color="#E5E5E5"> proxy SQL</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> GT ID</font><font color="#CCCCCC"> okay</font>

10
00:00:39,620 --> 00:00:43,500
<font color="#E5E5E5">great</font>

11
00:00:41,730 --> 00:00:45,089
so let's kick<font color="#E5E5E5"> off with proxies held</font>

12
00:00:43,500 --> 00:00:46,890
since everyone's familiar with<font color="#E5E5E5"> this I</font>

13
00:00:45,090 --> 00:00:50,850
won't focus on it<font color="#E5E5E5"> too much it's a layer</font>

14
00:00:46,890 --> 00:00:53,129
<font color="#CCCCCC">7</font><font color="#E5E5E5"> database proxy</font><font color="#CCCCCC"> ok</font>

15
00:00:50,850 --> 00:00:55,559
primary integration is with MySQL

16
00:00:53,129 --> 00:00:59,099
protocol there is some support<font color="#E5E5E5"> also for</font>

17
00:00:55,559 --> 00:01:01,530
<font color="#E5E5E5">click house and by the way in there's a</font>

18
00:00:59,100 --> 00:01:04,589
birds<font color="#E5E5E5"> of a feather session at quarter to</font>

19
00:01:01,530 --> 00:01:06,450
<font color="#CCCCCC">5:00 in room h3 2 to 8 for those of you</font>

20
00:01:04,589 --> 00:01:08,520
that are<font color="#CCCCCC"> interested</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> those that</font><font color="#E5E5E5"> are</font>

21
00:01:06,450 --> 00:01:11,429
not familiar<font color="#E5E5E5"> with clickers it's blazing</font>

22
00:01:08,520 --> 00:01:14,759
<font color="#E5E5E5">fast you</font><font color="#CCCCCC"> should check it out</font>

23
00:01:11,429 --> 00:01:16,229
so moving<font color="#CCCCCC"> back to proxy SQL</font><font color="#E5E5E5"> it's built</font>

24
00:01:14,759 --> 00:01:19,860
<font color="#E5E5E5">for high</font><font color="#CCCCCC"> performance high availability</font>

25
00:01:16,229 --> 00:01:22,009
<font color="#E5E5E5">and it's feature-rich so there's a wide</font>

26
00:01:19,860 --> 00:01:25,800
variety of stuff that you<font color="#E5E5E5"> can configure</font>

27
00:01:22,009 --> 00:01:28,770
<font color="#CCCCCC">to get various functionality as well as</font>

28
00:01:25,800 --> 00:01:31,259
<font color="#CCCCCC">to tune the proxy as you'd like it to</font>

29
00:01:28,770 --> 00:01:34,170
behave<font color="#CCCCCC"> so quick overview of the</font>

30
00:01:31,259 --> 00:01:37,170
architecture<font color="#E5E5E5"> clients connect the</font>

31
00:01:34,170 --> 00:01:39,090
requests<font color="#E5E5E5"> are evaluated and depending on</font>

32
00:01:37,170 --> 00:01:41,849
the configuration you've put<font color="#E5E5E5"> into proxy</font>

33
00:01:39,090 --> 00:01:45,599
SQL certain actions will be performed so

34
00:01:41,849 --> 00:01:49,259
like key areas are<font color="#CCCCCC"> read/write splits</font>

35
00:01:45,599 --> 00:01:51,330
<font color="#E5E5E5">sharding query right and for this</font>

36
00:01:49,259 --> 00:01:54,690
session we'll be<font color="#E5E5E5"> focusing on</font><font color="#CCCCCC"> readwrite</font>

37
00:01:51,330 --> 00:01:56,569
split and specifically did the

38
00:01:54,690 --> 00:01:59,520
challenges<font color="#CCCCCC"> that we have with</font>

39
00:01:56,569 --> 00:02:01,289
<font color="#E5E5E5">master-slave replication so well</font>

40
00:01:59,520 --> 00:02:04,410
familiar with<font color="#E5E5E5"> replication the biggest</font>

41
00:02:01,289 --> 00:02:06,149
problem is replication lag and being

42
00:02:04,410 --> 00:02:09,508
able to retrieve data that is fresh

43
00:02:06,149 --> 00:02:11,068
<font color="#CCCCCC">enough from</font><font color="#E5E5E5"> our slaves</font><font color="#CCCCCC"> so I mean we</font><font color="#E5E5E5"> have</font>

44
00:02:09,508 --> 00:02:13,890
this problem<font color="#E5E5E5"> in</font><font color="#CCCCCC"> asynchronous replication</font>

45
00:02:11,068 --> 00:02:15,480
in semi synchronous replication<font color="#CCCCCC"> we can</font>

46
00:02:13,890 --> 00:02:17,488
be more<font color="#CCCCCC"> sure that our</font><font color="#E5E5E5"> data has reached</font>

47
00:02:15,480 --> 00:02:18,790
our slaves so the integrity<font color="#E5E5E5"> is there</font>

48
00:02:17,489 --> 00:02:24,459
that<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> still</font>

49
00:02:18,790 --> 00:02:28,180
<font color="#CCCCCC">retail data</font><font color="#E5E5E5"> so in order to avoid reading</font>

50
00:02:24,459 --> 00:02:30,370
stale data<font color="#E5E5E5"> especially when an</font>

51
00:02:28,180 --> 00:02:32,319
application<font color="#E5E5E5"> connects both to a master</font>

52
00:02:30,370 --> 00:02:34,359
and a slave it has to maintain<font color="#E5E5E5"> two sets</font>

53
00:02:32,319 --> 00:02:37,149
of connections<font color="#E5E5E5"> and it also has to be</font>

54
00:02:34,359 --> 00:02:39,640
aware<font color="#CCCCCC"> of how fresh the data is</font><font color="#E5E5E5"> on a</font>

55
00:02:37,150 --> 00:02:40,599
slave so looking at this in<font color="#CCCCCC"> more detail</font>

56
00:02:39,640 --> 00:02:44,048
<font color="#CCCCCC">okay</font>

57
00:02:40,599 --> 00:02:47,138
typically<font color="#E5E5E5"> an application will write data</font>

58
00:02:44,049 --> 00:02:50,319
to<font color="#CCCCCC"> a master that data may or may not</font>

59
00:02:47,139 --> 00:02:51,819
<font color="#E5E5E5">have been</font><font color="#CCCCCC"> replicated to the slave</font><font color="#E5E5E5"> the</font>

60
00:02:50,319 --> 00:02:55,030
application will then<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to connect</font><font color="#E5E5E5"> to</font>

61
00:02:51,819 --> 00:02:58,388
the slave and read that<font color="#E5E5E5"> data if we're</font>

62
00:02:55,030 --> 00:03:00,939
doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> readwrite split</font><font color="#E5E5E5"> so stale data</font>

63
00:02:58,389 --> 00:03:04,840
can<font color="#CCCCCC"> be received</font><font color="#E5E5E5"> this makes our</font>

64
00:03:00,939 --> 00:03:07,328
developers unhappy with proxy SQL the

65
00:03:04,840 --> 00:03:08,980
<font color="#E5E5E5">readwrite split we overcome the problem</font>

66
00:03:07,329 --> 00:03:11,530
of<font color="#CCCCCC"> maintaining separate connections to</font>

67
00:03:08,980 --> 00:03:13,629
masters and slaves because we have the

68
00:03:11,530 --> 00:03:16,510
concept of reader and writer host groups

69
00:03:13,629 --> 00:03:19,530
so the application<font color="#E5E5E5"> can just blindly send</font>

70
00:03:16,510 --> 00:03:22,569
all requests reads<font color="#E5E5E5"> writes to proxy SQL</font>

71
00:03:19,530 --> 00:03:24,959
proxy SQL will<font color="#E5E5E5"> route the</font><font color="#CCCCCC"> writes</font><font color="#E5E5E5"> to the</font>

72
00:03:22,569 --> 00:03:26,828
master<font color="#CCCCCC"> and then route the</font><font color="#E5E5E5"> reads to the</font>

73
00:03:24,959 --> 00:03:31,389
slaves depending on the configuration

74
00:03:26,829 --> 00:03:34,090
<font color="#CCCCCC">that we set up</font><font color="#E5E5E5"> in the query rules so the</font>

75
00:03:31,389 --> 00:03:35,739
big benefit is that we<font color="#E5E5E5"> don't have to</font>

76
00:03:34,090 --> 00:03:38,829
make application changes<font color="#E5E5E5"> in order to</font>

77
00:03:35,739 --> 00:03:45,579
route our read queries to slave or to

78
00:03:38,829 --> 00:03:48,099
route our rights to a master all<font color="#E5E5E5"> traffic</font>

79
00:03:45,579 --> 00:03:49,989
is sent<font color="#E5E5E5"> to a single IP to a single port</font>

80
00:03:48,099 --> 00:03:52,569
<font color="#E5E5E5">so you don't have to reconfigure it on</font>

81
00:03:49,989 --> 00:03:54,400
on failover<font color="#E5E5E5"> and we can dynamically</font>

82
00:03:52,569 --> 00:03:57,040
modify the configuration<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> in</font>

83
00:03:54,400 --> 00:03:58,780
proxy SQL<font color="#E5E5E5"> to down slaves when we need to</font>

84
00:03:57,040 --> 00:04:02,470
do<font color="#CCCCCC"> maintenance to add more slaves when</font>

85
00:03:58,780 --> 00:04:04,919
we need<font color="#CCCCCC"> to scale so that one area is</font>

86
00:04:02,470 --> 00:04:07,959
covered<font color="#E5E5E5"> but even with this configuration</font>

87
00:04:04,919 --> 00:04:12,540
<font color="#E5E5E5">stale data can</font><font color="#CCCCCC"> be an issue</font><font color="#E5E5E5"> because I</font>

88
00:04:07,959 --> 00:04:15,400
mean proxy SQL in itself<font color="#E5E5E5"> does provide</font>

89
00:04:12,540 --> 00:04:18,039
replication monitoring<font color="#E5E5E5"> so we can set the</font>

90
00:04:15,400 --> 00:04:20,590
threshold for instance of<font color="#E5E5E5"> 30 seconds and</font>

91
00:04:18,039 --> 00:04:23,710
say if our data is more than 30 seconds

92
00:04:20,589 --> 00:04:26,258
<font color="#CCCCCC">although even one second old</font><font color="#E5E5E5"> don't read</font>

93
00:04:23,710 --> 00:04:28,000
from<font color="#CCCCCC"> the slave so we'll become that</font>

94
00:04:26,259 --> 00:04:31,460
issue<font color="#E5E5E5"> but there's still a possibility</font>

95
00:04:28,000 --> 00:04:35,729
<font color="#CCCCCC">that</font><font color="#E5E5E5"> our data will be one second</font>

96
00:04:31,460 --> 00:04:37,710
stale and in addition<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that this</font>

97
00:04:35,729 --> 00:04:39,750
monitoring<font color="#E5E5E5"> happens from proxy SQL and</font>

98
00:04:37,710 --> 00:04:41,638
<font color="#E5E5E5">it's basically polling the slaves at a</font>

99
00:04:39,750 --> 00:04:43,379
configurable<font color="#E5E5E5"> interval which has a</font>

100
00:04:41,639 --> 00:04:49,639
minimum<font color="#CCCCCC"> of one second</font>

101
00:04:43,379 --> 00:04:52,289
so up to two seconds of delayed data so

102
00:04:49,639 --> 00:04:55,050
we kind of have<font color="#CCCCCC"> to think about</font><font color="#E5E5E5"> how</font>

103
00:04:52,289 --> 00:04:56,759
replication<font color="#E5E5E5"> works and go into a bit of</font>

104
00:04:55,050 --> 00:04:58,979
<font color="#CCCCCC">detail to</font><font color="#E5E5E5"> see how we can</font><font color="#CCCCCC"> overcome this</font>

105
00:04:56,759 --> 00:05:02,250
problem with asynchronous<font color="#E5E5E5"> replication as</font>

106
00:04:58,979 --> 00:05:04,680
we all know it's all it operates

107
00:05:02,250 --> 00:05:06,990
basically with a bin<font color="#E5E5E5"> lock</font><font color="#CCCCCC"> position</font><font color="#E5E5E5"> file</font>

108
00:05:04,680 --> 00:05:08,310
in position<font color="#E5E5E5"> so all the events</font><font color="#CCCCCC"> are</font>

109
00:05:06,990 --> 00:05:10,219
written to<font color="#CCCCCC"> the file</font><font color="#E5E5E5"> it's sent to the</font>

110
00:05:08,310 --> 00:05:14,190
slaves<font color="#E5E5E5"> and all of these events</font><font color="#CCCCCC"> are</font>

111
00:05:10,219 --> 00:05:15,780
processed one by one so both in terms of

112
00:05:14,190 --> 00:05:17,400
processing it's kind of<font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> of</font>

113
00:05:15,780 --> 00:05:19,138
a<font color="#E5E5E5"> bottleneck things have to happen in</font>

114
00:05:17,400 --> 00:05:22,159
sequence<font color="#E5E5E5"> and masters and</font><font color="#CCCCCC"> slaves have to</font>

115
00:05:19,139 --> 00:05:24,900
be completely<font color="#CCCCCC"> synchronized in addition</font>

116
00:05:22,159 --> 00:05:26,909
when we're<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> things like failover we</font>

117
00:05:24,900 --> 00:05:29,520
have to ensure that our slaves are at a

118
00:05:26,909 --> 00:05:35,250
certain<font color="#CCCCCC"> position in order to connect to</font>

119
00:05:29,520 --> 00:05:38,039
<font color="#E5E5E5">our masters so GPI</font><font color="#CCCCCC"> d was introduced to</font>

120
00:05:35,250 --> 00:05:39,360
help solve this problem<font color="#CCCCCC"> of course the</font>

121
00:05:38,039 --> 00:05:41,400
main difference here<font color="#CCCCCC"> is that we have a</font>

122
00:05:39,360 --> 00:05:43,919
<font color="#E5E5E5">unique identifier</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> every transaction</font>

123
00:05:41,400 --> 00:05:47,039
which is not<font color="#E5E5E5"> unique just to that host</font>

124
00:05:43,919 --> 00:05:50,729
<font color="#E5E5E5">but unique to every</font><font color="#CCCCCC"> single host</font><font color="#E5E5E5"> within</font>

125
00:05:47,039 --> 00:05:52,529
the<font color="#CCCCCC"> cluster so the</font><font color="#E5E5E5"> specific area</font><font color="#CCCCCC"> that I</font>

126
00:05:50,729 --> 00:05:54,599
want this to<font color="#CCCCCC"> keep in mind for today's</font>

127
00:05:52,529 --> 00:05:57,110
<font color="#E5E5E5">session is the structure of the GT ID</font>

128
00:05:54,599 --> 00:05:59,759
<font color="#CCCCCC">it's basically a colon separated</font>

129
00:05:57,110 --> 00:06:05,460
<font color="#E5E5E5">identifier with the source ID and the</font>

130
00:05:59,759 --> 00:06:10,770
transaction ID so why is GT ID important

131
00:06:05,460 --> 00:06:14,279
for us essentially<font color="#E5E5E5"> this gives us the</font>

132
00:06:10,770 --> 00:06:16,139
ability<font color="#E5E5E5"> to</font><font color="#CCCCCC"> detect which transactions</font>

133
00:06:14,279 --> 00:06:18,449
<font color="#E5E5E5">have not been have been</font><font color="#CCCCCC"> executed</font><font color="#E5E5E5"> and</font>

134
00:06:16,139 --> 00:06:21,330
have not been<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> it allows Auto</font>

135
00:06:18,449 --> 00:06:24,650
positioning so we can just restructure

136
00:06:21,330 --> 00:06:30,050
our master slave topology as we wish and

137
00:06:24,650 --> 00:06:32,219
starting from<font color="#CCCCCC"> 5 6 5 and later and 5 6 9</font>

138
00:06:30,050 --> 00:06:35,430
variables were introduced<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that we</font>

139
00:06:32,219 --> 00:06:37,740
could actually delay our selects on a

140
00:06:35,430 --> 00:06:40,589
slave and wait for a certain GT ID

141
00:06:37,740 --> 00:06:42,959
position to be reached before executing

142
00:06:40,589 --> 00:06:44,849
the statement so this is quite<font color="#CCCCCC"> good it's</font>

143
00:06:42,959 --> 00:06:48,270
a better approach<font color="#CCCCCC"> it allows us</font><font color="#E5E5E5"> to</font>

144
00:06:44,849 --> 00:06:50,969
<font color="#CCCCCC">you get the data we want and avoid stale</font>

145
00:06:48,270 --> 00:06:53,248
data<font color="#E5E5E5"> but there is still</font><font color="#CCCCCC"> a delay</font><font color="#E5E5E5"> because</font>

146
00:06:50,969 --> 00:06:54,808
we have to wait until<font color="#E5E5E5"> that that data is</font>

147
00:06:53,249 --> 00:06:57,509
replicated and if it doesn't replicate

148
00:06:54,809 --> 00:07:02,429
up until the certain<font color="#E5E5E5"> point we'll get an</font>

149
00:06:57,509 --> 00:07:04,889
error on the connection so in<font color="#CCCCCC"> MySQL five</font>

150
00:07:02,429 --> 00:07:06,599
<font color="#CCCCCC">seven a variable</font><font color="#E5E5E5"> was introduced that's</font>

151
00:07:04,889 --> 00:07:09,300
pretty important<font color="#E5E5E5"> now this is available</font>

152
00:07:06,599 --> 00:07:12,479
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Percona server and Oracle's MySQL but</font>

153
00:07:09,300 --> 00:07:14,729
not in Moorea<font color="#E5E5E5"> DB as of yet</font><font color="#CCCCCC"> so the</font>

154
00:07:12,479 --> 00:07:17,188
variable is session<font color="#E5E5E5"> track GT IDs and</font>

155
00:07:14,729 --> 00:07:20,899
basically when you enable<font color="#E5E5E5"> this you can</font>

156
00:07:17,189 --> 00:07:23,159
get<font color="#E5E5E5"> either the own GT ID so the</font><font color="#CCCCCC"> GP ID</font>

157
00:07:20,899 --> 00:07:24,599
generated for a<font color="#E5E5E5"> specific set</font><font color="#CCCCCC"> of</font>

158
00:07:23,159 --> 00:07:26,849
transactions<font color="#E5E5E5"> actually the last</font>

159
00:07:24,599 --> 00:07:29,819
<font color="#E5E5E5">transaction that you executed or the</font>

160
00:07:26,849 --> 00:07:32,459
full set of GT IDs returned in the<font color="#CCCCCC"> okay</font>

161
00:07:29,819 --> 00:07:37,289
packet so whenever I'm<font color="#CCCCCC"> executing a</font><font color="#E5E5E5"> write</font>

162
00:07:32,459 --> 00:07:39,629
I will<font color="#E5E5E5"> know what GT ID position</font><font color="#CCCCCC"> a server</font>

163
00:07:37,289 --> 00:07:41,849
will have to have processed in order<font color="#E5E5E5"> for</font>

164
00:07:39,629 --> 00:07:44,039
my transaction to<font color="#CCCCCC"> be consistent so</font>

165
00:07:41,849 --> 00:07:46,378
having<font color="#E5E5E5"> this</font><font color="#CCCCCC"> information I can query a</font>

166
00:07:44,039 --> 00:07:48,119
slave and say what's your GT ID position

167
00:07:46,379 --> 00:07:52,009
<font color="#E5E5E5">okay you've already reached that point</font>

168
00:07:48,119 --> 00:07:57,089
<font color="#CCCCCC">I'm good to execute my select statement</font>

169
00:07:52,009 --> 00:08:00,479
<font color="#E5E5E5">so I mean we thought</font><font color="#CCCCCC"> about how this can</font>

170
00:07:57,089 --> 00:08:02,159
be leveraged in in proxy SQL and<font color="#CCCCCC"> Renee</font>

171
00:08:00,479 --> 00:08:03,539
was like<font color="#E5E5E5"> designing this and thinking</font>

172
00:08:02,159 --> 00:08:05,339
<font color="#CCCCCC">about how can we do it there's basically</font>

173
00:08:03,539 --> 00:08:09,089
<font color="#CCCCCC">two approaches to</font><font color="#E5E5E5"> the to solve this</font>

174
00:08:05,339 --> 00:08:10,559
<font color="#E5E5E5">problem the one is making a request to</font>

175
00:08:09,089 --> 00:08:13,039
<font color="#CCCCCC">the slave and asking it</font>

176
00:08:10,559 --> 00:08:16,709
what's your GT ID position so I mean

177
00:08:13,039 --> 00:08:18,688
this<font color="#E5E5E5"> implies polling this implies some</font>

178
00:08:16,709 --> 00:08:21,779
delay essentially it's the<font color="#CCCCCC"> same problem</font>

179
00:08:18,689 --> 00:08:26,490
that<font color="#CCCCCC"> we have when</font><font color="#E5E5E5"> we're monitoring for</font>

180
00:08:21,779 --> 00:08:28,229
slave delay with a regular host<font color="#E5E5E5"> group so</font>

181
00:08:26,490 --> 00:08:31,800
we're polling<font color="#E5E5E5"> we have that delay of the</font>

182
00:08:28,229 --> 00:08:33,598
interval it can work but it's<font color="#E5E5E5"> not the</font>

183
00:08:31,800 --> 00:08:37,519
<font color="#E5E5E5">best approach</font><font color="#CCCCCC"> so what's the other option</font>

184
00:08:33,599 --> 00:08:37,519
<font color="#E5E5E5">instead of pulling pushing</font>

185
00:08:44,279 --> 00:08:47,640
something<font color="#CCCCCC"> it was</font>

186
00:08:48,420 --> 00:08:54,800
<font color="#E5E5E5">it's everything clear and any questions</font>

187
00:08:52,170 --> 00:08:57,060
I mean<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> very important that</font><font color="#E5E5E5"> this</font>

188
00:08:54,800 --> 00:08:59,490
everything<font color="#E5E5E5"> discussed up until this point</font>

189
00:08:57,060 --> 00:09:04,369
is<font color="#CCCCCC"> completely cleared</font><font color="#E5E5E5"> for the next slide</font>

190
00:08:59,490 --> 00:09:04,370
<font color="#CCCCCC">so if anybody</font><font color="#E5E5E5"> has questions gray area</font>

191
00:09:04,490 --> 00:09:13,650
okay<font color="#CCCCCC"> so the push method instead of</font>

192
00:09:09,960 --> 00:09:16,560
<font color="#E5E5E5">polling slaves to get their GT ID why</font>

193
00:09:13,650 --> 00:09:19,949
not have the MySQL server itself have a

194
00:09:16,560 --> 00:09:22,050
process running<font color="#E5E5E5"> there and push the GT</font>

195
00:09:19,950 --> 00:09:24,240
<font color="#CCCCCC">IDs that have been processed to all the</font>

196
00:09:22,050 --> 00:09:27,000
mice<font color="#CCCCCC"> to all the proxy SQL</font><font color="#E5E5E5"> servers</font>

197
00:09:24,240 --> 00:09:29,780
connected in this<font color="#E5E5E5"> way we avoid</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to</font>

198
00:09:27,000 --> 00:09:32,790
<font color="#E5E5E5">request the data we avoid having to wait</font>

199
00:09:29,780 --> 00:09:36,449
the slaves just<font color="#E5E5E5"> process binary log event</font>

200
00:09:32,790 --> 00:09:38,099
<font color="#E5E5E5">and then send their GT ID positions so I</font>

201
00:09:36,450 --> 00:09:39,750
mean it's more<font color="#E5E5E5"> optimized and it's</font>

202
00:09:38,100 --> 00:09:41,430
especially<font color="#E5E5E5"> important in a large-scale</font>

203
00:09:39,750 --> 00:09:44,580
deployment where you have a lot<font color="#CCCCCC"> of hosts</font>

204
00:09:41,430 --> 00:09:47,130
both<font color="#E5E5E5"> MySQL servers and proxy SQL</font><font color="#CCCCCC"> servers</font>

205
00:09:44,580 --> 00:09:49,320
so to solve this<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> Renee came</font><font color="#E5E5E5"> up</font>

206
00:09:47,130 --> 00:09:51,240
with the proxy SQL<font color="#CCCCCC"> ben la garita</font>

207
00:09:49,320 --> 00:09:53,010
reader<font color="#E5E5E5"> which is essentially a</font>

208
00:09:51,240 --> 00:09:55,830
lightweight process that will run<font color="#E5E5E5"> on a</font>

209
00:09:53,010 --> 00:09:57,210
MySQL server<font color="#E5E5E5"> it's designed with proxy</font>

210
00:09:55,830 --> 00:09:59,730
skills principles of high availability

211
00:09:57,210 --> 00:10:02,190
<font color="#E5E5E5">and high performance it's very</font>

212
00:09:59,730 --> 00:10:04,440
lightweight<font color="#CCCCCC"> there was a lot of work done</font>

213
00:10:02,190 --> 00:10:08,130
to<font color="#E5E5E5"> minimize the CPU usage</font><font color="#CCCCCC"> and the</font>

214
00:10:04,440 --> 00:10:11,010
network<font color="#E5E5E5"> overhead in fact how does the</font>

215
00:10:08,130 --> 00:10:13,380
<font color="#E5E5E5">process work it processes</font><font color="#CCCCCC"> bin</font><font color="#E5E5E5"> logs as if</font>

216
00:10:11,010 --> 00:10:16,800
it were a slave but running locally on

217
00:10:13,380 --> 00:10:20,070
<font color="#E5E5E5">the same MySQL server it strips</font><font color="#CCCCCC"> all of</font>

218
00:10:16,800 --> 00:10:24,420
the information<font color="#E5E5E5"> except the GT ID and it</font>

219
00:10:20,070 --> 00:10:27,000
even strips the source ID and<font color="#CCCCCC"> just sends</font>

220
00:10:24,420 --> 00:10:29,310
the transaction ID<font color="#E5E5E5"> until the sauce ID is</font>

221
00:10:27,000 --> 00:10:31,380
changed<font color="#CCCCCC"> so this very little</font><font color="#E5E5E5"> network</font>

222
00:10:29,310 --> 00:10:34,530
traffic this very little CPU overhead

223
00:10:31,380 --> 00:10:37,020
<font color="#E5E5E5">and it also has an auto auto restart</font>

224
00:10:34,530 --> 00:10:39,630
mechanism<font color="#E5E5E5"> in case</font><font color="#CCCCCC"> it fails</font><font color="#E5E5E5"> and also</font>

225
00:10:37,020 --> 00:10:41,939
reconnect<font color="#E5E5E5"> in case proxy or SQL is not</font>

226
00:10:39,630 --> 00:10:48,260
able<font color="#E5E5E5"> to contact it so let's just have a</font>

227
00:10:41,940 --> 00:10:48,260
look at<font color="#E5E5E5"> this on a diagram yes</font>

228
00:10:53,710 --> 00:11:04,360
yes so it will send<font color="#E5E5E5"> it and then it will</font>

229
00:11:00,770 --> 00:11:07,880
it will not resend<font color="#E5E5E5"> it until it changes</font>

230
00:11:04,360 --> 00:11:10,280
so basically what's happened is<font color="#CCCCCC"> that it</font>

231
00:11:07,880 --> 00:11:12,320
takes<font color="#CCCCCC"> the status of the or</font><font color="#E5E5E5"> diginity</font>

232
00:11:10,280 --> 00:11:15,020
executed on<font color="#E5E5E5"> the mast on the server and</font>

233
00:11:12,320 --> 00:11:17,330
as soon<font color="#E5E5E5"> as a client in this</font><font color="#CCCCCC"> case will be</font>

234
00:11:15,020 --> 00:11:19,880
<font color="#E5E5E5">Roxy sequel connect to this process</font><font color="#CCCCCC"> it</font>

235
00:11:17,330 --> 00:11:23,060
will send the Fuji TV set<font color="#E5E5E5"> and from that</font>

236
00:11:19,880 --> 00:11:25,880
<font color="#E5E5E5">moment on</font><font color="#CCCCCC"> we'll send the first GT ad</font>

237
00:11:23,060 --> 00:11:27,800
executed with all the server<font color="#CCCCCC"> uld and the</font>

238
00:11:25,880 --> 00:11:30,350
<font color="#E5E5E5">transaction ID and then from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> moment</font>

239
00:11:27,800 --> 00:11:34,280
<font color="#E5E5E5">on it will only send the transaction ID</font>

240
00:11:30,350 --> 00:11:37,670
until the moment<font color="#CCCCCC"> they a new UID</font><font color="#E5E5E5"> is</font>

241
00:11:34,280 --> 00:11:39,980
<font color="#E5E5E5">generated so it just a way to minimize</font>

242
00:11:37,670 --> 00:11:40,490
<font color="#E5E5E5">to minimize net</font><font color="#CCCCCC"> roband</font><font color="#E5E5E5"> it as soon as</font>

243
00:11:39,980 --> 00:11:42,200
<font color="#E5E5E5">possible</font>

244
00:11:40,490 --> 00:11:44,750
<font color="#E5E5E5">because this is designed to have</font>

245
00:11:42,200 --> 00:11:46,550
hundreds of proxy connecting<font color="#CCCCCC"> to every</font>

246
00:11:44,750 --> 00:11:48,530
database server<font color="#E5E5E5"> so of course you should</font>

247
00:11:46,550 --> 00:11:59,569
try to minimize the<font color="#E5E5E5"> producers as much as</font>

248
00:11:48,530 --> 00:12:01,760
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> so MySQL will send the</font>

249
00:11:59,570 --> 00:12:03,920
replication<font color="#E5E5E5"> data and all of</font><font color="#CCCCCC"> the GT ID</font>

250
00:12:01,760 --> 00:12:07,970
and<font color="#E5E5E5"> whatever needs to be written to</font><font color="#CCCCCC"> the</font>

251
00:12:03,920 --> 00:12:10,819
slaves and the<font color="#CCCCCC"> benlloch reader will run</font>

252
00:12:07,970 --> 00:12:13,340
locally read all of these as<font color="#E5E5E5"> reneges</font>

253
00:12:10,820 --> 00:12:16,790
described and send them<font color="#CCCCCC"> to all the proxy</font>

254
00:12:13,340 --> 00:12:19,130
SQL instances so every<font color="#E5E5E5"> single proxy SQL</font>

255
00:12:16,790 --> 00:12:23,719
instance<font color="#E5E5E5"> that connects to a MySQL server</font>

256
00:12:19,130 --> 00:12:26,450
will have if it's been configured<font color="#E5E5E5"> to</font>

257
00:12:23,720 --> 00:12:29,630
<font color="#CCCCCC">collect that will have the exact</font>

258
00:12:26,450 --> 00:12:33,410
position for<font color="#E5E5E5"> every instance so at this</font>

259
00:12:29,630 --> 00:12:37,490
point we know what position<font color="#CCCCCC"> our slaves</font>

260
00:12:33,410 --> 00:12:41,030
are at but how do<font color="#E5E5E5"> we achieve the</font>

261
00:12:37,490 --> 00:12:43,460
consistency so proxy scale<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

262
00:12:41,030 --> 00:12:48,079
configured<font color="#E5E5E5"> to enforce this consistency</font>

263
00:12:43,460 --> 00:12:51,400
on specific<font color="#E5E5E5"> host groups and if you've</font>

264
00:12:48,080 --> 00:12:55,610
enabled this<font color="#E5E5E5"> what proxy SQL will do is</font>

265
00:12:51,400 --> 00:13:00,350
when a session<font color="#E5E5E5"> is initiated and some</font>

266
00:12:55,610 --> 00:13:02,960
transactions are<font color="#E5E5E5"> occurring my proxy SQL</font>

267
00:13:00,350 --> 00:13:05,600
will check the status of<font color="#E5E5E5"> a host before</font>

268
00:13:02,960 --> 00:13:06,590
<font color="#CCCCCC">rooting a selected and it will</font><font color="#E5E5E5"> check to</font>

269
00:13:05,600 --> 00:13:10,240
<font color="#E5E5E5">see</font>

270
00:13:06,590 --> 00:13:13,580
if the<font color="#E5E5E5"> GTI be the last GT ID that was</font>

271
00:13:10,240 --> 00:13:15,890
<font color="#E5E5E5">executed for that session on a group of</font>

272
00:13:13,580 --> 00:13:20,030
service has been executed<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the slave</font>

273
00:13:15,890 --> 00:13:22,760
<font color="#CCCCCC">before</font><font color="#E5E5E5"> sending the query</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so let's</font>

274
00:13:20,030 --> 00:13:25,040
take<font color="#CCCCCC"> a simple example of</font><font color="#E5E5E5"> two two slaves</font>

275
00:13:22,760 --> 00:13:28,430
<font color="#E5E5E5">and one master it will check the first</font>

276
00:13:25,040 --> 00:13:29,719
in its own internal<font color="#E5E5E5"> in memory list it</font>

277
00:13:28,430 --> 00:13:32,390
will not find it<font color="#E5E5E5"> it will check the</font>

278
00:13:29,720 --> 00:13:34,130
<font color="#E5E5E5">second</font><font color="#CCCCCC"> if it</font><font color="#E5E5E5"> still does not find it it</font>

279
00:13:32,390 --> 00:13:37,069
will then route<font color="#CCCCCC"> the query to the master</font>

280
00:13:34,130 --> 00:13:42,320
<font color="#E5E5E5">so</font><font color="#CCCCCC"> you'll always have</font><font color="#E5E5E5"> fresh data your</font>

281
00:13:37,070 --> 00:13:44,750
<font color="#E5E5E5">latency will be low and you can</font><font color="#CCCCCC"> even</font>

282
00:13:42,320 --> 00:13:46,550
configure this just on a host group you

283
00:13:44,750 --> 00:13:48,980
don't<font color="#CCCCCC"> necessarily need the replication</font>

284
00:13:46,550 --> 00:13:53,569
host group so let's just have a<font color="#E5E5E5"> look at</font>

285
00:13:48,980 --> 00:13:55,820
this<font color="#E5E5E5"> in in terms of a replication host</font>

286
00:13:53,570 --> 00:13:59,780
group so the application will send the

287
00:13:55,820 --> 00:14:01,990
reads<font color="#E5E5E5"> and writes to to proxy SQL</font><font color="#CCCCCC"> DML</font>

288
00:13:59,780 --> 00:14:06,260
will be routed to<font color="#E5E5E5"> the writer host group</font>

289
00:14:01,990 --> 00:14:08,690
this will<font color="#CCCCCC"> be written on the master the</font>

290
00:14:06,260 --> 00:14:10,640
next<font color="#E5E5E5"> request look the next dql request</font>

291
00:14:08,690 --> 00:14:13,900
will come in some select or something

292
00:14:10,640 --> 00:14:17,180
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that then proxy SQL will evaluate</font>

293
00:14:13,900 --> 00:14:18,740
which slaves<font color="#E5E5E5"> are</font><font color="#CCCCCC"> up-to-date and if none</font>

294
00:14:17,180 --> 00:14:20,810
of them are are<font color="#E5E5E5"> up-to-date</font>

295
00:14:18,740 --> 00:14:23,570
it will route it to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> master provided</font>

296
00:14:20,810 --> 00:14:29,449
<font color="#E5E5E5">that the master is included in the</font>

297
00:14:23,570 --> 00:14:32,090
reader host group so to sum up let's

298
00:14:29,450 --> 00:14:35,450
have a look at what is supported for<font color="#E5E5E5"> GT</font>

299
00:14:32,090 --> 00:14:37,880
ID consistent reads in proxy SQL with

300
00:14:35,450 --> 00:14:39,230
basic master-slave replication<font color="#E5E5E5"> we</font>

301
00:14:37,880 --> 00:14:42,200
support both<font color="#E5E5E5"> asynchronous replication</font>

302
00:14:39,230 --> 00:14:44,450
and semi synchronous replication<font color="#E5E5E5"> for</font>

303
00:14:42,200 --> 00:14:47,870
multi<font color="#CCCCCC"> master in ODB cluster and group</font>

304
00:14:44,450 --> 00:14:50,720
replication is also supported<font color="#E5E5E5"> finally a</font>

305
00:14:47,870 --> 00:14:52,550
quick note about<font color="#E5E5E5"> the requirements GT ID</font>

306
00:14:50,720 --> 00:14:55,880
is required<font color="#CCCCCC"> for</font><font color="#E5E5E5"> all of the servers that</font>

307
00:14:52,550 --> 00:14:58,520
<font color="#CCCCCC">are part of the host group and of course</font>

308
00:14:55,880 --> 00:15:00,470
<font color="#CCCCCC">MySQL 5.7 so that we can have</font><font color="#E5E5E5"> that</font>

309
00:14:58,520 --> 00:15:03,290
<font color="#E5E5E5">information returned in the</font><font color="#CCCCCC"> ok packet</font>

310
00:15:00,470 --> 00:15:05,270
and finally at<font color="#E5E5E5"> the current moment the</font>

311
00:15:03,290 --> 00:15:11,000
<font color="#E5E5E5">bin link format must be configured</font><font color="#CCCCCC"> to</font>

312
00:15:05,270 --> 00:15:13,939
<font color="#CCCCCC">row</font><font color="#E5E5E5"> so what time is it time</font><font color="#CCCCCC"> for any to</font>

313
00:15:11,000 --> 00:15:17,320
do<font color="#CCCCCC"> it live</font><font color="#E5E5E5"> demo and for all of you to</font>

314
00:15:13,940 --> 00:15:17,320
see how this works in action<font color="#E5E5E5"> so</font>

315
00:15:18,110 --> 00:15:22,180
questions apart<font color="#E5E5E5"> yes</font>

316
00:15:29,510 --> 00:15:35,930
okay so basically<font color="#E5E5E5"> though it work is that</font>

317
00:15:32,380 --> 00:15:37,880
the<font color="#CCCCCC"> GED of the transaction executed</font><font color="#E5E5E5"> from</font>

318
00:15:35,930 --> 00:15:41,060
the client is written from<font color="#CCCCCC"> the okay</font>

319
00:15:37,880 --> 00:15:43,100
pocket<font color="#E5E5E5"> so for every client session</font><font color="#CCCCCC"> Roxie</font>

320
00:15:41,060 --> 00:15:45,109
<font color="#CCCCCC">sequel is tracking the GED for that</font>

321
00:15:43,100 --> 00:15:47,660
specific client<font color="#E5E5E5"> so</font><font color="#CCCCCC"> will it need to</font>

322
00:15:45,110 --> 00:15:51,170
execute<font color="#CCCCCC"> the a select statement it's</font>

323
00:15:47,660 --> 00:15:53,630
check<font color="#E5E5E5"> which slaves has that specific</font><font color="#CCCCCC"> GDD</font>

324
00:15:51,170 --> 00:15:56,510
<font color="#CCCCCC">it does not check</font><font color="#E5E5E5"> the last</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> written</font>

325
00:15:53,630 --> 00:16:04,790
for<font color="#CCCCCC"> whatever for</font><font color="#E5E5E5"> whatever connection</font>

326
00:15:56,510 --> 00:16:07,010
just<font color="#CCCCCC"> for that specific client just</font>

327
00:16:04,790 --> 00:16:09,769
technically yes<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> you might also</font>

328
00:16:07,010 --> 00:16:11,209
<font color="#E5E5E5">send the queries to our slaves it is few</font>

329
00:16:09,769 --> 00:16:13,010
seconds lagging behind

330
00:16:11,209 --> 00:16:15,410
but you initially<font color="#E5E5E5"> that the bride</font><font color="#CCCCCC"> has</font>

331
00:16:13,010 --> 00:16:17,899
been written<font color="#E5E5E5"> by one</font><font color="#CCCCCC"> specific client</font><font color="#E5E5E5"> hast</font>

332
00:16:15,410 --> 00:16:20,149
<font color="#E5E5E5">reached the slave and one important</font>

333
00:16:17,899 --> 00:16:22,010
<font color="#CCCCCC">thing is that you</font><font color="#E5E5E5"> don't have to</font><font color="#CCCCCC"> enable</font>

334
00:16:20,149 --> 00:16:24,589
these features<font color="#CCCCCC"> for any term</font><font color="#E5E5E5"> sort of</font>

335
00:16:22,010 --> 00:16:26,060
<font color="#E5E5E5">traffic but you can specify</font><font color="#CCCCCC"> which select</font>

336
00:16:24,589 --> 00:16:28,220
statement<font color="#E5E5E5"> you want these features</font><font color="#CCCCCC"> to</font>

337
00:16:26,060 --> 00:16:30,680
want enabled it's not you<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> enable</font>

338
00:16:28,220 --> 00:16:33,790
<font color="#CCCCCC">to globally</font><font color="#E5E5E5"> you enabled for rare type of</font>

339
00:16:30,680 --> 00:16:33,790
select statement

340
00:16:44,860 --> 00:16:49,930
<font color="#E5E5E5">it's technically not correct it doesn't</font>

341
00:16:47,500 --> 00:16:52,480
query them to check if they have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> GED</font>

342
00:16:49,930 --> 00:16:55,260
<font color="#E5E5E5">but it means generally internally check</font>

343
00:16:52,480 --> 00:16:58,810
if those slaves have already<font color="#E5E5E5"> the data</font>

344
00:16:55,260 --> 00:17:01,870
now<font color="#E5E5E5"> the principle of a check if there</font>

345
00:16:58,810 --> 00:17:03,819
are<font color="#E5E5E5"> if the slaves have the data first</font>

346
00:17:01,870 --> 00:17:05,619
and<font color="#E5E5E5"> then the master because normally</font>

347
00:17:03,820 --> 00:17:07,900
<font color="#E5E5E5">filled</font><font color="#CCCCCC"> using replication huzzah</font>

348
00:17:05,619 --> 00:17:09,790
the master<font color="#CCCCCC"> isn't the same host group as</font>

349
00:17:07,900 --> 00:17:12,280
the slaves<font color="#E5E5E5"> because it's part of the</font>

350
00:17:09,790 --> 00:17:13,990
reader<font color="#E5E5E5"> but with a lower weight so the</font>

351
00:17:12,280 --> 00:17:15,699
probability of the query set being sent

352
00:17:13,990 --> 00:17:18,550
to the slave is<font color="#E5E5E5"> higher than</font><font color="#CCCCCC"> to obviously</font>

353
00:17:15,699 --> 00:17:20,559
<font color="#E5E5E5">being sent</font><font color="#CCCCCC"> to the master</font><font color="#E5E5E5"> what if the GED</font>

354
00:17:18,550 --> 00:17:22,899
<font color="#E5E5E5">is not executed</font><font color="#CCCCCC"> no none of</font><font color="#E5E5E5"> the slaves</font>

355
00:17:20,559 --> 00:17:24,339
<font color="#E5E5E5">and later on the master because actually</font>

356
00:17:22,900 --> 00:17:27,760
technically<font color="#E5E5E5"> it is possible that between</font>

357
00:17:24,339 --> 00:17:29,620
<font color="#E5E5E5">log reader reply slightly later have</font><font color="#CCCCCC"> an</font>

358
00:17:27,760 --> 00:17:33,460
unlikely<font color="#E5E5E5"> but the possibility is</font><font color="#CCCCCC"> there</font>

359
00:17:29,620 --> 00:17:35,530
the same principle apply of how proxy

360
00:17:33,460 --> 00:17:37,600
seek will behave when there is no

361
00:17:35,530 --> 00:17:39,760
serving<font color="#E5E5E5"> our host group it just wait for</font>

362
00:17:37,600 --> 00:17:42,070
the server<font color="#CCCCCC"> to come for a server to be</font>

363
00:17:39,760 --> 00:17:46,679
<font color="#CCCCCC">avaible so technically you might have a</font>

364
00:17:42,070 --> 00:17:46,678
slightly delay the worst case

365
00:17:56,950 --> 00:18:01,930
the debtor will<font color="#E5E5E5"> come after</font><font color="#CCCCCC"> ten second it</font>

366
00:17:59,830 --> 00:18:06,360
is the<font color="#E5E5E5"> default for</font><font color="#CCCCCC"> a server</font><font color="#E5E5E5"> not being</font>

367
00:18:01,930 --> 00:18:06,360
available in the<font color="#CCCCCC"> housetop</font><font color="#E5E5E5"> let me go back</font>

368
00:18:06,720 --> 00:18:11,160
<font color="#CCCCCC">missing which is the</font><font color="#E5E5E5"> best light to</font>

369
00:18:12,300 --> 00:18:20,230
probably perfect<font color="#E5E5E5"> this one let me just go</font>

370
00:18:17,560 --> 00:18:23,350
the side so the wet work is that<font color="#E5E5E5"> the</font>

371
00:18:20,230 --> 00:18:25,660
application is writing here so then<font color="#E5E5E5"> the</font>

372
00:18:23,350 --> 00:18:28,060
master<font color="#CCCCCC"> reply with the</font><font color="#E5E5E5"> okay proxy sequel</font>

373
00:18:25,660 --> 00:18:29,980
<font color="#E5E5E5">knows what is the okay the GED</font><font color="#CCCCCC"> in the</font>

374
00:18:28,060 --> 00:18:32,470
<font color="#E5E5E5">Tokyo pocket reply</font><font color="#CCCCCC"> to the client with</font>

375
00:18:29,980 --> 00:18:34,600
<font color="#E5E5E5">okay then by the time that the client is</font>

376
00:18:32,470 --> 00:18:37,060
<font color="#CCCCCC">sending another query</font><font color="#E5E5E5"> you can pretty</font>

377
00:18:34,600 --> 00:18:40,179
much ensure that at least the master has

378
00:18:37,060 --> 00:18:43,330
<font color="#CCCCCC">ten</font><font color="#E5E5E5"> digit ID to the proxy so the</font>

379
00:18:40,180 --> 00:18:45,400
probability of having<font color="#E5E5E5"> this guy sending a</font>

380
00:18:43,330 --> 00:18:47,199
<font color="#E5E5E5">query before this one returned agility</font>

381
00:18:45,400 --> 00:18:49,000
to the master is unlikely to<font color="#CCCCCC"> happen</font>

382
00:18:47,200 --> 00:18:51,910
<font color="#E5E5E5">technically possible but the probability</font>

383
00:18:49,000 --> 00:18:54,640
<font color="#CCCCCC">extremely low and and then depend how</font>

384
00:18:51,910 --> 00:18:57,670
fast are the slave to process the<font color="#E5E5E5"> GT did</font>

385
00:18:54,640 --> 00:19:00,610
and reply back to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> proxy</font><font color="#CCCCCC"> but idea</font><font color="#E5E5E5"> is</font>

386
00:18:57,670 --> 00:19:03,250
<font color="#CCCCCC">that we are eliminating</font><font color="#E5E5E5"> all the external</font>

387
00:19:00,610 --> 00:19:05,169
<font color="#CCCCCC">network round-trip because when this</font>

388
00:19:03,250 --> 00:19:07,570
will execute a query<font color="#E5E5E5"> a select statement</font>

389
00:19:05,170 --> 00:19:09,700
<font color="#CCCCCC">this already knows what are the GDD</font>

390
00:19:07,570 --> 00:19:14,850
executed both here and there it doesn't

391
00:19:09,700 --> 00:19:14,850
<font color="#E5E5E5">have to check them it already</font><font color="#CCCCCC"> knows yes</font>

392
00:19:28,250 --> 00:19:33,580
<font color="#CCCCCC">yes every client has his own State so</font>

393
00:19:30,890 --> 00:19:33,580
the<font color="#CCCCCC"> GED</font>

394
00:19:51,179 --> 00:19:57,029
so if you have only<font color="#E5E5E5"> one proxy what</font>

395
00:19:54,539 --> 00:19:59,099
you're saying is very<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement</font>

396
00:19:57,029 --> 00:20:00,389
<font color="#CCCCCC">because this proxy will know</font><font color="#E5E5E5"> what the</font>

397
00:19:59,099 --> 00:20:00,869
<font color="#CCCCCC">credit has</font><font color="#E5E5E5"> been sent to the other base</font>

398
00:20:00,389 --> 00:20:03,389
server

399
00:20:00,869 --> 00:20:06,389
<font color="#CCCCCC">masters slaves whatever but if you have</font>

400
00:20:03,389 --> 00:20:08,309
<font color="#E5E5E5">multiple proxy then this process</font><font color="#CCCCCC"> does</font>

401
00:20:06,389 --> 00:20:12,449
not<font color="#E5E5E5"> know what has been executed</font><font color="#CCCCCC"> by that</font>

402
00:20:08,309 --> 00:20:18,210
one<font color="#CCCCCC"> technically</font><font color="#E5E5E5"> it can be implemented in</font>

403
00:20:12,450 --> 00:20:19,589
some other way<font color="#E5E5E5"> like relying only on the</font>

404
00:20:18,210 --> 00:20:22,440
<font color="#E5E5E5">bin log leader</font>

405
00:20:19,589 --> 00:20:26,519
so whatever bin log has been<font color="#CCCCCC"> executed</font><font color="#E5E5E5"> up</font>

406
00:20:22,440 --> 00:20:32,369
to that moment<font color="#E5E5E5"> but a consequence of this</font>

407
00:20:26,519 --> 00:20:34,739
might<font color="#E5E5E5"> be that let's see let me think it</font>

408
00:20:32,369 --> 00:20:36,689
probably<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to wait some interval to</font>

409
00:20:34,739 --> 00:20:41,519
make sure that nothing<font color="#CCCCCC"> else was executed</font>

410
00:20:36,690 --> 00:20:44,190
in<font color="#E5E5E5"> between I'm not really sure how how</font>

411
00:20:41,519 --> 00:20:51,589
to implement this or<font color="#CCCCCC"> even</font><font color="#E5E5E5"> if what are</font>

412
00:20:44,190 --> 00:20:51,589
the challenges<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> okay so demo</font>

413
00:21:17,169 --> 00:21:23,409
so we were trying<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> you cannot lead</font>

414
00:21:21,110 --> 00:21:23,408
here

415
00:21:32,800 --> 00:21:39,250
<font color="#E5E5E5">now I'm trying</font><font color="#CCCCCC"> to zoom out now it's</font><font color="#E5E5E5"> okay</font>

416
00:21:36,830 --> 00:21:39,250
yes

417
00:21:42,470 --> 00:21:49,039
<font color="#E5E5E5">okay so there were two things that</font><font color="#CCCCCC"> I</font>

418
00:21:46,129 --> 00:21:51,860
wanted to show<font color="#E5E5E5"> one is one proxy sequel</font>

419
00:21:49,039 --> 00:21:54,440
instance that is collecting metrics<font color="#E5E5E5"> from</font>

420
00:21:51,860 --> 00:21:55,908
<font color="#E5E5E5">30 database server at the same time so</font>

421
00:21:54,440 --> 00:21:57,649
it's collecting method for all of them

422
00:21:55,909 --> 00:22:00,200
and they want to<font color="#E5E5E5"> show the SIP</font>

423
00:21:57,649 --> 00:22:02,750
<font color="#E5E5E5">utilization and the</font><font color="#CCCCCC"> death utilization</font>

424
00:22:00,200 --> 00:22:04,549
but unfortunately the VPN<font color="#E5E5E5"> doesn't seem</font>

425
00:22:02,750 --> 00:22:08,919
to<font color="#E5E5E5"> work so I'm going</font><font color="#CCCCCC"> to also</font><font color="#E5E5E5"> only to</font>

426
00:22:04,549 --> 00:22:13,549
show another<font color="#E5E5E5"> one</font><font color="#CCCCCC"> so in this session</font>

427
00:22:08,919 --> 00:22:15,049
what we have is<font color="#E5E5E5"> okay so I don't know how</font>

428
00:22:13,549 --> 00:22:16,850
many<font color="#E5E5E5"> of you</font><font color="#CCCCCC"> are familiar with the web</font>

429
00:22:15,049 --> 00:22:18,980
proxy<font color="#CCCCCC"> Sybil is being configured</font><font color="#E5E5E5"> so it</font>

430
00:22:16,850 --> 00:22:21,769
has an admin interface and which

431
00:22:18,980 --> 00:22:25,789
basically<font color="#E5E5E5"> execute DML to configure the</font>

432
00:22:21,769 --> 00:22:30,740
proxy<font color="#E5E5E5"> or the configurational is on his</font>

433
00:22:25,789 --> 00:22:34,039
own tables so for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> my</font>

434
00:22:30,740 --> 00:22:36,470
Secret<font color="#E5E5E5"> Service in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> tables</font><font color="#CCCCCC"> there are</font>

435
00:22:34,039 --> 00:22:39,230
all the service<font color="#CCCCCC"> that configured as a</font>

436
00:22:36,470 --> 00:22:41,029
back-end<font color="#E5E5E5"> for proxy sequel and in our</font>

437
00:22:39,230 --> 00:22:43,340
case what we have<font color="#E5E5E5"> introduced for</font><font color="#CCCCCC"> these</font>

438
00:22:41,029 --> 00:22:45,860
new features<font color="#CCCCCC"> is this new variables that</font>

439
00:22:43,340 --> 00:22:48,830
is this new<font color="#E5E5E5"> column</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> this GID port so</font>

440
00:22:45,860 --> 00:22:50,240
we<font color="#CCCCCC"> have hostname port 10 HTTP port</font><font color="#E5E5E5"> JD</font>

441
00:22:48,830 --> 00:22:53,840
<font color="#E5E5E5">port is basically where the</font><font color="#CCCCCC"> big log</font>

442
00:22:50,240 --> 00:22:58,460
reader is listening<font color="#E5E5E5"> so for example we</font>

443
00:22:53,840 --> 00:23:05,918
<font color="#E5E5E5">can run select host group ID hostname</font>

444
00:22:58,460 --> 00:23:05,919
port<font color="#E5E5E5"> gjd port from my sequel servers</font>

445
00:23:06,279 --> 00:23:13,100
<font color="#CCCCCC">just removing</font><font color="#E5E5E5"> everything else so we have</font>

446
00:23:10,120 --> 00:23:16,219
<font color="#CCCCCC">to ha stop host group 1 and host group</font>

447
00:23:13,100 --> 00:23:18,649
to where<font color="#CCCCCC"> GDD port is enabled for</font><font color="#E5E5E5"> is not</font>

448
00:23:16,220 --> 00:23:21,649
<font color="#E5E5E5">0 so</font><font color="#CCCCCC"> app accessible</font><font color="#E5E5E5"> will connect on that</font>

449
00:23:18,649 --> 00:23:23,090
<font color="#E5E5E5">port and retrieve the GT ID and all this</font>

450
00:23:21,649 --> 00:23:26,120
is<font color="#E5E5E5"> happening in real time</font>

451
00:23:23,090 --> 00:23:28,309
so there is a new tables your tables

452
00:23:26,120 --> 00:23:30,229
from start so<font color="#E5E5E5"> in</font><font color="#CCCCCC"> start the</font><font color="#E5E5E5"> stud schema</font>

453
00:23:28,309 --> 00:23:32,240
is where all the<font color="#E5E5E5"> matrix will be</font>

454
00:23:30,230 --> 00:23:37,159
collected<font color="#CCCCCC"> and specifically we are</font>

455
00:23:32,240 --> 00:23:40,570
interested<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> table so select star</font>

456
00:23:37,159 --> 00:23:40,570
from start

457
00:23:41,529 --> 00:23:48,589
that secret<font color="#E5E5E5"> ETD executed so here we have</font>

458
00:23:46,159 --> 00:23:50,989
the proxy sequel is<font color="#E5E5E5"> conducting GTD from</font>

459
00:23:48,589 --> 00:23:52,999
those<font color="#E5E5E5"> two server it is</font><font color="#CCCCCC"> this one</font><font color="#E5E5E5"> is the</font>

460
00:23:50,989 --> 00:23:57,349
master<font color="#CCCCCC"> and those two are the</font><font color="#E5E5E5"> slave and</font>

461
00:23:52,999 --> 00:24:00,769
in<font color="#E5E5E5"> real time</font><font color="#CCCCCC"> is telling you the executed</font>

462
00:23:57,349 --> 00:24:03,918
set and how many<font color="#CCCCCC"> gdb</font><font color="#E5E5E5"> event has been read</font>

463
00:24:00,769 --> 00:24:05,179
so far<font color="#E5E5E5"> from</font><font color="#CCCCCC"> that server if you executed</font>

464
00:24:03,919 --> 00:24:12,320
few times you will<font color="#CCCCCC"> see that of course</font>

465
00:24:05,179 --> 00:24:15,619
<font color="#E5E5E5">those counters are changing and you</font><font color="#CCCCCC"> can</font>

466
00:24:12,320 --> 00:24:26,499
also guess which one is the<font color="#E5E5E5"> master</font><font color="#CCCCCC"> and</font>

467
00:24:15,619 --> 00:24:26,499
which one is<font color="#E5E5E5"> the slave okay</font>

468
00:24:29,300 --> 00:24:49,510
oh yeah<font color="#E5E5E5"> okay so so create table starts</font>

469
00:24:39,400 --> 00:24:52,520
my sequel<font color="#E5E5E5"> so this table also collect</font>

470
00:24:49,510 --> 00:24:54,790
this table<font color="#E5E5E5"> collect all the statistic of</font>

471
00:24:52,520 --> 00:25:01,040
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> queries that are being executed</font>

472
00:24:54,790 --> 00:25:05,560
and it also now there is our new columns

473
00:25:01,040 --> 00:25:13,760
that is queries<font color="#E5E5E5"> appear</font><font color="#CCCCCC"> DTD sync</font><font color="#E5E5E5"> so</font>

474
00:25:05,560 --> 00:25:17,350
select star select queries<font color="#CCCCCC"> which is GTI</font>

475
00:25:13,760 --> 00:25:17,350
<font color="#CCCCCC">be same</font>

476
00:25:20,909 --> 00:25:23,909
just

477
00:25:28,610 --> 00:25:33,110
so here the<font color="#CCCCCC"> host book there are</font><font color="#E5E5E5"> some</font>

478
00:25:31,580 --> 00:25:35,299
<font color="#E5E5E5">services</font><font color="#CCCCCC"> to happen all these features</font>

479
00:25:33,110 --> 00:25:37,000
enabled<font color="#CCCCCC"> because this actually is a proxy</font>

480
00:25:35,299 --> 00:25:39,769
<font color="#CCCCCC">sick were disconnected not to one</font>

481
00:25:37,000 --> 00:25:43,100
cluster<font color="#CCCCCC"> but there are multiple cluster</font>

482
00:25:39,769 --> 00:25:46,669
behind it<font color="#E5E5E5"> so it's only tells you where</font>

483
00:25:43,100 --> 00:25:49,610
the queries has been executed<font color="#E5E5E5"> so a lot</font>

484
00:25:46,669 --> 00:25:51,710
of<font color="#E5E5E5"> queries has been executed without GED</font>

485
00:25:49,610 --> 00:25:54,168
enforced<font color="#E5E5E5"> while other query have been</font>

486
00:25:51,710 --> 00:25:58,549
<font color="#E5E5E5">executed with gdb</font><font color="#CCCCCC"> enforced so it will</font>

487
00:25:54,169 --> 00:26:00,590
read<font color="#E5E5E5"> it will when it's reading is making</font>

488
00:25:58,549 --> 00:26:08,539
sure<font color="#CCCCCC"> that the server is</font><font color="#E5E5E5"> in sync with the</font>

489
00:26:00,590 --> 00:26:10,309
master<font color="#CCCCCC"> same is</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> okay still</font><font color="#E5E5E5"> is any</font>

490
00:26:08,539 --> 00:26:28,908
other question<font color="#E5E5E5"> actually them I was going</font>

491
00:26:10,309 --> 00:26:31,539
to<font color="#E5E5E5"> supposed to be a bit longer have</font>

492
00:26:28,909 --> 00:26:31,539
question why

493
00:26:35,840 --> 00:26:42,988
[Applause]

