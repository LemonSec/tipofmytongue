1
00:00:06,899 --> 00:00:15,670
<font color="#CCCCCC">okay hello everybody</font><font color="#E5E5E5"> so my name is here</font>

2
00:00:12,610 --> 00:00:18,550
I started<font color="#CCCCCC"> programming a long time ago as</font>

3
00:00:15,670 --> 00:00:21,400
a hobbyist on the Commodore line of home

4
00:00:18,550 --> 00:00:23,380
computers then about 25<font color="#E5E5E5"> years ago I</font>

5
00:00:21,400 --> 00:00:25,890
learned about Linux<font color="#E5E5E5"> and a bit later</font><font color="#CCCCCC"> I</font>

6
00:00:23,380 --> 00:00:28,990
started contributing to<font color="#E5E5E5"> Linux by</font>

7
00:00:25,890 --> 00:00:32,110
supporting the port for<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> amiga a</font>

8
00:00:28,990 --> 00:00:34,269
time 68k processor<font color="#CCCCCC"> later ported</font><font color="#E5E5E5"> Linux to</font>

9
00:00:32,110 --> 00:00:37,690
the common hardware reference platform

10
00:00:34,270 --> 00:00:39,429
which had a<font color="#E5E5E5"> PowerPC processor</font><font color="#CCCCCC"> and for</font>

11
00:00:37,690 --> 00:00:42,818
awhile<font color="#CCCCCC"> I was leaning member</font><font color="#E5E5E5"> for device</font>

12
00:00:39,429 --> 00:00:45,899
maintainer<font color="#E5E5E5"> in the meantime I'd started</font>

13
00:00:42,819 --> 00:00:47,949
working for Sony<font color="#E5E5E5"> and while at Sony</font><font color="#CCCCCC"> I</font>

14
00:00:45,899 --> 00:00:50,440
started working<font color="#E5E5E5"> on Linux for the</font>

15
00:00:47,949 --> 00:00:53,589
PlayStation 3<font color="#E5E5E5"> game computer</font><font color="#CCCCCC"> with the</font>

16
00:00:50,440 --> 00:00:56,709
Cell<font color="#CCCCCC"> processor was a really fun</font><font color="#E5E5E5"> time and</font>

17
00:00:53,589 --> 00:00:59,769
a few years<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> I became</font><font color="#E5E5E5"> a freelance</font>

18
00:00:56,710 --> 00:01:02,440
embedded Linux kernel hacker<font color="#E5E5E5"> and since</font>

19
00:00:59,769 --> 00:01:05,590
then I've mostly been doing upstream

20
00:01:02,440 --> 00:01:11,289
Linux work for renesis arm-based<font color="#E5E5E5"> as a</font>

21
00:01:05,590 --> 00:01:14,020
<font color="#CCCCCC">sees something it</font><font color="#E5E5E5"> seems</font><font color="#CCCCCC"> it titles are</font>

22
00:01:11,289 --> 00:01:16,180
not on the screen<font color="#E5E5E5"> but so something about</font>

23
00:01:14,020 --> 00:01:18,310
me opposed them so in 2000 I heard about

24
00:01:16,180 --> 00:01:19,899
<font color="#CCCCCC">this interesting new small conference</font>

25
00:01:18,310 --> 00:01:23,170
here in<font color="#E5E5E5"> Brussels calls awesome so I</font>

26
00:01:19,899 --> 00:01:25,329
decided to attend it<font color="#E5E5E5"> it was great next</font>

27
00:01:23,170 --> 00:01:27,909
year it was<font color="#CCCCCC"> awesome greater and greater</font>

28
00:01:25,329 --> 00:01:30,579
<font color="#E5E5E5">and greater and since 2004 I've been a</font>

29
00:01:27,909 --> 00:01:32,740
member of the program committee for the

30
00:01:30,579 --> 00:01:36,008
embedded<font color="#E5E5E5"> track and I've kept on</font>

31
00:01:32,740 --> 00:01:38,259
attending<font color="#CCCCCC"> Postum until</font><font color="#E5E5E5"> now but I've been</font>

32
00:01:36,009 --> 00:01:39,700
<font color="#CCCCCC">presenting</font><font color="#E5E5E5"> at many other conferences but</font>

33
00:01:38,259 --> 00:01:42,820
actually this is<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> time I'm</font>

34
00:01:39,700 --> 00:01:49,240
presenting at<font color="#CCCCCC"> FOSDEM so welcome to Linux</font>

35
00:01:42,820 --> 00:01:51,639
as an SPI slave so about three years<font color="#CCCCCC"> ago</font>

36
00:01:49,240 --> 00:01:54,460
<font color="#CCCCCC">Linux got support for</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> Square</font><font color="#E5E5E5"> C slave</font>

37
00:01:51,640 --> 00:01:58,689
support<font color="#E5E5E5"> and then people started</font>

38
00:01:54,460 --> 00:02:02,559
wondering could we<font color="#E5E5E5"> have SPI slave</font>

39
00:01:58,689 --> 00:02:05,139
support as well<font color="#CCCCCC"> where Linux is doing the</font>

40
00:02:02,560 --> 00:02:09,460
slave part of the SPI site and<font color="#E5E5E5"> not two</font>

41
00:02:05,140 --> 00:02:12,400
masters and<font color="#E5E5E5"> yeah the answer is yes but</font>

42
00:02:09,460 --> 00:02:16,060
so and in<font color="#E5E5E5"> this presentation I will tell</font>

43
00:02:12,400 --> 00:02:18,400
you what is<font color="#CCCCCC"> possible why it was that</font>

44
00:02:16,060 --> 00:02:22,629
difficult<font color="#CCCCCC"> what's different about</font><font color="#E5E5E5"> SB</font>

45
00:02:18,400 --> 00:02:26,079
<font color="#E5E5E5">I compared to other buses so let's start</font>

46
00:02:22,629 --> 00:02:27,489
with the basic<font color="#E5E5E5"> SPI bus it's a bit</font>

47
00:02:26,079 --> 00:02:32,260
annoying<font color="#E5E5E5"> that the titles are not there</font>

48
00:02:27,489 --> 00:02:35,430
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> we can handle so</font><font color="#CCCCCC"> SPI it started as</font>

49
00:02:32,260 --> 00:02:38,260
was developed by Motorola in the 80s to

50
00:02:35,430 --> 00:02:40,659
control<font color="#CCCCCC"> different simple peripherals</font>

51
00:02:38,260 --> 00:02:46,030
from a<font color="#E5E5E5"> microcontroller</font><font color="#CCCCCC"> without using too</font>

52
00:02:40,659 --> 00:02:48,370
many wires<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's bus and you have a</font>

53
00:02:46,030 --> 00:02:50,920
data outline from<font color="#E5E5E5"> the master to the</font>

54
00:02:48,370 --> 00:02:53,709
slave called<font color="#E5E5E5"> most route slave in you</font>

55
00:02:50,920 --> 00:02:56,828
have data in line going from<font color="#E5E5E5"> slaves to</font>

56
00:02:53,709 --> 00:02:58,540
the master there's a clock line

57
00:02:56,829 --> 00:03:00,819
controlled by<font color="#E5E5E5"> the master and there are</font>

58
00:02:58,540 --> 00:03:02,950
one<font color="#E5E5E5"> or</font><font color="#CCCCCC"> more ship</font><font color="#E5E5E5"> selects to select the</font>

59
00:03:00,819 --> 00:03:04,988
individual slaves so basically it's just

60
00:03:02,950 --> 00:03:07,108
a<font color="#CCCCCC"> glorified shift register so the</font>

61
00:03:04,989 --> 00:03:09,819
<font color="#E5E5E5">hardware is actually quite simple</font>

62
00:03:07,109 --> 00:03:13,000
<font color="#E5E5E5">important to notice is that it's the</font>

63
00:03:09,819 --> 00:03:18,608
master<font color="#E5E5E5"> who's in charge and</font><font color="#CCCCCC"> that there</font>

64
00:03:13,000 --> 00:03:21,370
can be multiple slaves<font color="#CCCCCC"> so and the master</font>

65
00:03:18,609 --> 00:03:23,889
<font color="#E5E5E5">is in control and we have simultaneous</font>

66
00:03:21,370 --> 00:03:26,620
<font color="#E5E5E5">transmit from master</font><font color="#CCCCCC"> to slave and</font>

67
00:03:23,889 --> 00:03:29,530
receive from<font color="#E5E5E5"> slave to master and</font><font color="#CCCCCC"> speech</font>

68
00:03:26,620 --> 00:03:31,900
can actually be fairly high they go from

69
00:03:29,530 --> 00:03:38,109
<font color="#E5E5E5">tens of kilohertz to a few tens of</font>

70
00:03:31,900 --> 00:03:40,150
megahertz so a<font color="#E5E5E5"> sample SPI transfer is</font>

71
00:03:38,109 --> 00:03:41,949
shown here so at the top<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have the</font>

72
00:03:40,150 --> 00:03:46,510
line with<font color="#E5E5E5"> data going from master to</font>

73
00:03:41,949 --> 00:03:48,519
<font color="#CCCCCC">slave below</font><font color="#E5E5E5"> that from slave to master</font>

74
00:03:46,510 --> 00:03:50,409
then the clock signal<font color="#E5E5E5"> and the ship</font>

75
00:03:48,519 --> 00:03:53,290
select so when the ship select is

76
00:03:50,409 --> 00:03:55,209
selected by<font color="#CCCCCC"> the master</font><font color="#E5E5E5"> a bit later it</font>

77
00:03:53,290 --> 00:03:57,400
starts clocking and then data goes out

78
00:03:55,209 --> 00:04:03,819
<font color="#E5E5E5">from master to slave and goes in from</font>

79
00:03:57,400 --> 00:04:06,340
slave to master<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is really</font><font color="#E5E5E5"> low-level</font>

80
00:04:03,819 --> 00:04:07,810
<font color="#CCCCCC">hardware and of course low and</font><font color="#E5E5E5"> Everhart</font>

81
00:04:06,340 --> 00:04:11,019
but can be<font color="#E5E5E5"> done in many different ways</font>

82
00:04:07,810 --> 00:04:12,879
<font color="#E5E5E5">so there are lots of options</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

83
00:04:11,019 --> 00:04:15,430
sampled data lines that's rising<font color="#E5E5E5"> edges</font>

84
00:04:12,879 --> 00:04:18,130
<font color="#E5E5E5">or falling edges of clocks what's the</font>

85
00:04:15,430 --> 00:04:21,099
polarity of the<font color="#E5E5E5"> clock chip select</font>

86
00:04:18,130 --> 00:04:23,440
polarities they can also be active

87
00:04:21,099 --> 00:04:25,210
<font color="#CCCCCC">higher active</font><font color="#E5E5E5"> low which bit do we</font>

88
00:04:23,440 --> 00:04:28,779
transfer first and in this case

89
00:04:25,210 --> 00:04:33,060
taken as to be<font color="#E5E5E5"> taken into</font><font color="#CCCCCC"> account as it</font>

90
00:04:28,779 --> 00:04:36,340
<font color="#CCCCCC">is</font><font color="#E5E5E5"> low hard work and not always</font>

91
00:04:33,060 --> 00:04:38,980
<font color="#CCCCCC">used</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> 8-bit systems</font><font color="#E5E5E5"> you can have</font><font color="#CCCCCC"> much</font>

92
00:04:36,340 --> 00:04:41,679
<font color="#E5E5E5">different bits of words 8 and 16 are</font>

93
00:04:38,980 --> 00:04:43,570
fairly simple to<font color="#CCCCCC"> handle but sometimes</font>

94
00:04:41,680 --> 00:04:46,240
you can have 12 bit words<font color="#E5E5E5"> something like</font>

95
00:04:43,570 --> 00:04:49,270
that and one important<font color="#E5E5E5"> parameter of</font>

96
00:04:46,240 --> 00:04:51,490
<font color="#E5E5E5">course is the transfer speed you</font><font color="#CCCCCC"> should</font>

97
00:04:49,270 --> 00:04:56,680
transfer data<font color="#E5E5E5"> not faster</font><font color="#CCCCCC"> than the</font><font color="#E5E5E5"> slave</font>

98
00:04:51,490 --> 00:04:59,020
can handle there are also a<font color="#CCCCCC"> few</font>

99
00:04:56,680 --> 00:05:01,750
simplifications possible not<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> SPI</font>

100
00:04:59,020 --> 00:05:03,760
systems implement the same thing<font color="#E5E5E5"> some</font>

101
00:05:01,750 --> 00:05:06,400
slaves you can only write<font color="#CCCCCC"> to so they</font>

102
00:05:03,760 --> 00:05:09,550
don't not connect<font color="#E5E5E5"> the master in slave</font>

103
00:05:06,400 --> 00:05:12,219
out lines<font color="#E5E5E5"> an example is an analog to</font>

104
00:05:09,550 --> 00:05:14,050
digital to analog<font color="#CCCCCC"> converter</font><font color="#E5E5E5"> you can have</font>

105
00:05:12,220 --> 00:05:15,730
slaves where you just want to read data

106
00:05:14,050 --> 00:05:17,950
like a sensor so<font color="#CCCCCC"> you don't have to</font>

107
00:05:15,730 --> 00:05:21,040
connect the<font color="#CCCCCC"> other wire</font><font color="#E5E5E5"> there are also</font>

108
00:05:17,950 --> 00:05:22,930
slaves where they combine<font color="#E5E5E5"> the data in</font>

109
00:05:21,040 --> 00:05:25,060
and data<font color="#E5E5E5"> out line so it's becomes a</font>

110
00:05:22,930 --> 00:05:26,860
<font color="#CCCCCC">half-duplex protocol</font><font color="#E5E5E5"> and if there's only</font>

111
00:05:25,060 --> 00:05:29,490
one<font color="#E5E5E5"> slave you don't need a ship</font><font color="#CCCCCC"> selected</font>

112
00:05:26,860 --> 00:05:31,530
<font color="#E5E5E5">that's an even further simplification</font>

113
00:05:29,490 --> 00:05:34,210
besides simplifications are<font color="#E5E5E5"> also</font>

114
00:05:31,530 --> 00:05:36,729
extensions<font color="#E5E5E5"> so people wanted higher speed</font>

115
00:05:34,210 --> 00:05:39,099
so they<font color="#E5E5E5"> thought maybe we can combine the</font>

116
00:05:36,730 --> 00:05:41,590
<font color="#CCCCCC">two data lines to transfer two bits of</font>

117
00:05:39,100 --> 00:05:43,900
<font color="#CCCCCC">data from master to</font><font color="#E5E5E5"> slave of a slave to</font>

118
00:05:41,590 --> 00:05:48,429
master<font color="#E5E5E5"> obviously it becomes half duplex</font>

119
00:05:43,900 --> 00:05:50,950
<font color="#CCCCCC">then later that was extended to what</font><font color="#E5E5E5"> SPI</font>

120
00:05:48,430 --> 00:05:53,260
<font color="#E5E5E5">where you add two extra wires and you</font>

121
00:05:50,950 --> 00:05:55,960
can<font color="#E5E5E5"> transfer four bits of data at the</font>

122
00:05:53,260 --> 00:05:58,719
<font color="#E5E5E5">same time this is typically</font><font color="#CCCCCC"> used for</font><font color="#E5E5E5"> SPI</font>

123
00:05:55,960 --> 00:06:01,479
flashes another way to make it even

124
00:05:58,720 --> 00:06:03,970
<font color="#E5E5E5">faster is</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> double data rate support</font>

125
00:06:01,480 --> 00:06:05,230
so<font color="#CCCCCC"> you sample the data at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rising and</font>

126
00:06:03,970 --> 00:06:08,170
<font color="#CCCCCC">the falling edge</font><font color="#E5E5E5"> of the clock</font>

127
00:06:05,230 --> 00:06:10,210
I don't think so far<font color="#CCCCCC"> Linux SPR supports</font>

128
00:06:08,170 --> 00:06:13,240
<font color="#E5E5E5">that maybe in some specialized SPI flash</font>

129
00:06:10,210 --> 00:06:16,989
controllers that that show up as MTD

130
00:06:13,240 --> 00:06:19,050
device and not as SPI probably they do

131
00:06:16,990 --> 00:06:22,030
and then recently we've been seeing

132
00:06:19,050 --> 00:06:24,550
systems where they're just<font color="#CCCCCC"> at too few</font>

133
00:06:22,030 --> 00:06:26,130
SPI flashes<font color="#E5E5E5"> and address them in parallel</font>

134
00:06:24,550 --> 00:06:28,920
and<font color="#E5E5E5"> then you have</font><font color="#CCCCCC"> eight bits of data and</font>

135
00:06:26,130 --> 00:06:35,020
sometimes it's also<font color="#E5E5E5"> called hyper flash</font>

136
00:06:28,920 --> 00:06:38,830
and that's even faster<font color="#CCCCCC"> so this is about</font>

137
00:06:35,020 --> 00:06:41,200
the SPI protocol<font color="#E5E5E5"> so an actual</font><font color="#CCCCCC"> SPI</font>

138
00:06:38,830 --> 00:06:45,419
messaging protocol consists of several

139
00:06:41,200 --> 00:06:45,420
transfers and<font color="#E5E5E5"> each transfer is</font>

140
00:06:46,150 --> 00:06:53,258
can be half duplex or full duplex<font color="#CCCCCC"> it</font>

141
00:06:51,189 --> 00:06:55,119
could can be a single transfer or dual

142
00:06:53,259 --> 00:06:56,979
and<font color="#E5E5E5"> a quat you can have some dummy</font>

143
00:06:55,119 --> 00:06:59,110
cycles<font color="#E5E5E5"> to give the slave some time to</font>

144
00:06:56,979 --> 00:07:00,998
calculate<font color="#E5E5E5"> some data</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> something like</font>

145
00:06:59,110 --> 00:07:02,860
<font color="#E5E5E5">that</font><font color="#CCCCCC"> but that's</font><font color="#E5E5E5"> all highly slave device</font>

146
00:07:00,999 --> 00:07:04,930
specific and it's<font color="#E5E5E5"> dictated by the</font>

147
00:07:02,860 --> 00:07:06,610
protocol<font color="#CCCCCC"> and typically as the ship</font>

148
00:07:04,930 --> 00:07:11,919
select is asserted for the whole message

149
00:07:06,610 --> 00:07:15,610
<font color="#CCCCCC">usually an example for</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> a simple</font>

150
00:07:11,919 --> 00:07:18,878
<font color="#E5E5E5">SPI flash</font><font color="#CCCCCC"> read so it consists of two</font>

151
00:07:15,610 --> 00:07:21,219
transfers as you can see here the chip

152
00:07:18,879 --> 00:07:24,219
select is asserted for the whole message

153
00:07:21,219 --> 00:07:25,689
<font color="#E5E5E5">and this is the first transfer here will</font>

154
00:07:24,219 --> 00:07:27,610
be the second transfer<font color="#E5E5E5"> the first</font>

155
00:07:25,689 --> 00:07:30,399
transfer<font color="#E5E5E5"> sends a command for this</font>

156
00:07:27,610 --> 00:07:33,490
particular<font color="#E5E5E5"> SPI flash</font><font color="#CCCCCC"> 3 means read</font><font color="#E5E5E5"> data</font>

157
00:07:30,399 --> 00:07:36,309
then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 2a is the offset where to read</font>

158
00:07:33,490 --> 00:07:37,539
the<font color="#E5E5E5"> memory you see</font><font color="#CCCCCC"> that the data is</font>

159
00:07:36,309 --> 00:07:40,629
transferred<font color="#CCCCCC"> from the master</font><font color="#E5E5E5"> to the slave</font>

160
00:07:37,539 --> 00:07:42,610
and<font color="#CCCCCC"> the second part of the transfer data</font>

161
00:07:40,629 --> 00:07:44,229
goes<font color="#CCCCCC"> from the slave to the master</font><font color="#E5E5E5"> and</font>

162
00:07:42,610 --> 00:07:51,249
<font color="#E5E5E5">that's actually the data that you read</font>

163
00:07:44,229 --> 00:07:54,610
from<font color="#E5E5E5"> the SPI flash so so</font><font color="#CCCCCC"> far the simple</font>

164
00:07:51,249 --> 00:07:58,930
basic<font color="#CCCCCC"> SPI now if you want to have</font>

165
00:07:54,610 --> 00:08:01,599
support for SPI slave in Linux<font color="#CCCCCC"> there are</font>

166
00:07:58,930 --> 00:08:03,129
a<font color="#E5E5E5"> few challenges</font><font color="#CCCCCC"> so the biggest</font><font color="#E5E5E5"> one is</font>

167
00:08:01,599 --> 00:08:06,490
basically<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have simultaneous</font>

168
00:08:03,129 --> 00:08:08,409
transmit and receive and that<font color="#E5E5E5"> the master</font>

169
00:08:06,490 --> 00:08:09,819
<font color="#CCCCCC">has control so the master controls the</font>

170
00:08:08,409 --> 00:08:12,998
<font color="#CCCCCC">ship</font><font color="#E5E5E5"> select the master controls the</font>

171
00:08:09,819 --> 00:08:15,969
clocking the slave has<font color="#CCCCCC"> to follow date so</font>

172
00:08:12,999 --> 00:08:18,550
it's real hard<font color="#CCCCCC"> real-time system that</font>

173
00:08:15,969 --> 00:08:20,740
also means that<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> master star</font>

174
00:08:18,550 --> 00:08:22,389
requests you to<font color="#E5E5E5"> send data that you must</font>

175
00:08:20,740 --> 00:08:27,069
<font color="#E5E5E5">have already written the data on the</font>

176
00:08:22,389 --> 00:08:29,199
slave side in the<font color="#CCCCCC"> transmitted FIFO it</font>

177
00:08:27,069 --> 00:08:31,089
also means<font color="#CCCCCC"> that if the master</font><font color="#E5E5E5"> sends</font><font color="#CCCCCC"> a</font>

178
00:08:29,199 --> 00:08:34,539
command<font color="#E5E5E5"> for example reading from a flash</font>

179
00:08:31,089 --> 00:08:38,019
that<font color="#CCCCCC"> a response has to be prepared</font>

180
00:08:34,539 --> 00:08:42,760
<font color="#E5E5E5">before by the slave if it's software</font>

181
00:08:38,019 --> 00:08:45,339
<font color="#CCCCCC">based so that</font><font color="#E5E5E5"> means that if you want</font><font color="#CCCCCC"> to</font>

182
00:08:42,760 --> 00:08:49,089
do software<font color="#E5E5E5"> SPI slave that the slave</font>

183
00:08:45,339 --> 00:08:52,449
<font color="#E5E5E5">response cannot be a reply to a command</font>

184
00:08:49,089 --> 00:08:54,459
in<font color="#E5E5E5"> the exact same SPI message so if we</font>

185
00:08:52,449 --> 00:08:56,529
want to do that<font color="#E5E5E5"> then we need SPI</font>

186
00:08:54,459 --> 00:08:59,310
protocol where the the slave<font color="#E5E5E5"> response</font>

187
00:08:56,529 --> 00:08:59,310
will<font color="#CCCCCC"> be in the</font><font color="#E5E5E5"> next</font>

188
00:09:01,540 --> 00:09:07,910
so how did<font color="#CCCCCC"> I start</font><font color="#E5E5E5"> working on this so as</font>

189
00:09:06,140 --> 00:09:09,589
I told<font color="#E5E5E5"> you before I'm doing contract</font>

190
00:09:07,910 --> 00:09:11,689
work for Renaissance<font color="#E5E5E5"> and then one</font><font color="#CCCCCC"> day</font>

191
00:09:09,589 --> 00:09:13,970
they asked me can<font color="#E5E5E5"> you please upstream</font>

192
00:09:11,690 --> 00:09:17,870
<font color="#CCCCCC">SBI slave support well be</font><font color="#E5E5E5"> a before</font><font color="#CCCCCC"> ice</font>

193
00:09:13,970 --> 00:09:21,830
<font color="#E5E5E5">Percy why don't we have it for SBI</font><font color="#CCCCCC"> I had</font>

194
00:09:17,870 --> 00:09:24,140
my doubts about<font color="#CCCCCC"> that but yeah then we</font>

195
00:09:21,830 --> 00:09:27,529
actually<font color="#E5E5E5"> had something so inside the</font>

196
00:09:24,140 --> 00:09:29,120
renessa<font color="#CCCCCC"> Sarkar BSP the</font><font color="#E5E5E5"> Wasco to support</font>

197
00:09:27,529 --> 00:09:30,770
that<font color="#E5E5E5"> so she probably know would be</font><font color="#CCCCCC"> a</font>

198
00:09:29,120 --> 00:09:33,740
speed that's<font color="#E5E5E5"> a board Support Package</font>

199
00:09:30,770 --> 00:09:36,439
<font color="#CCCCCC">it's an altar</font><font color="#E5E5E5"> not so old Linux kernel</font>

200
00:09:33,740 --> 00:09:39,200
source tree with<font color="#E5E5E5"> lots of patches on</font><font color="#CCCCCC"> top</font>

201
00:09:36,440 --> 00:09:43,339
that<font color="#E5E5E5"> at chains removed break various</font>

202
00:09:39,200 --> 00:09:46,850
levels<font color="#E5E5E5"> of functionality</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> usually the</font>

203
00:09:43,339 --> 00:09:50,300
<font color="#CCCCCC">code is</font><font color="#E5E5E5"> not ready for upstream but yeah</font>

204
00:09:46,850 --> 00:09:52,250
there was something<font color="#E5E5E5"> then I asked so what</font>

205
00:09:50,300 --> 00:09:54,680
<font color="#CCCCCC">kind of use case do you</font><font color="#E5E5E5"> have for this</font>

206
00:09:52,250 --> 00:09:56,930
<font color="#CCCCCC">SPI be slave implementation because</font>

207
00:09:54,680 --> 00:09:59,359
there are many challenges and<font color="#E5E5E5"> up till</font>

208
00:09:56,930 --> 00:10:01,939
now I didn't<font color="#E5E5E5"> manage</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get out the real</font>

209
00:09:59,360 --> 00:10:06,380
use case there so most<font color="#E5E5E5"> probably they're</font>

210
00:10:01,940 --> 00:10:09,620
using<font color="#E5E5E5"> SPI deaf from user space but we</font>

211
00:10:06,380 --> 00:10:11,810
don't really know<font color="#E5E5E5"> why but important part</font>

212
00:10:09,620 --> 00:10:12,890
here was<font color="#E5E5E5"> that the customer</font><font color="#CCCCCC"> for Myrna</font>

213
00:10:11,810 --> 00:10:14,959
<font color="#CCCCCC">says they were happy with the</font>

214
00:10:12,890 --> 00:10:17,870
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> so it must do</font><font color="#E5E5E5"> something</font>

215
00:10:14,959 --> 00:10:20,779
so<font color="#CCCCCC"> who am I</font><font color="#E5E5E5"> to say that</font><font color="#CCCCCC"> that it cannot</font>

216
00:10:17,870 --> 00:10:23,839
be<font color="#CCCCCC"> done</font><font color="#E5E5E5"> so I decided that yeah</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> let's</font>

217
00:10:20,779 --> 00:10:27,170
do<font color="#E5E5E5"> it create my</font><font color="#CCCCCC"> own use case there get</font>

218
00:10:23,839 --> 00:10:29,420
it working<font color="#E5E5E5"> and make the code fit for</font>

219
00:10:27,170 --> 00:10:30,979
<font color="#E5E5E5">upstreaming make the required changes</font><font color="#CCCCCC"> to</font>

220
00:10:29,420 --> 00:10:36,529
<font color="#E5E5E5">have it nicely fit into the existing</font>

221
00:10:30,980 --> 00:10:38,930
Linux SPI subsystem yeah to find a good

222
00:10:36,529 --> 00:10:44,600
use case<font color="#CCCCCC"> and to overcome the challenges</font>

223
00:10:38,930 --> 00:10:46,459
I<font color="#CCCCCC"> compared I like to compare the SPI bus</font>

224
00:10:44,600 --> 00:10:49,130
with a few other<font color="#E5E5E5"> buses where we do have</font>

225
00:10:46,459 --> 00:10:51,229
some kind<font color="#E5E5E5"> of slave support in the kernel</font>

226
00:10:49,130 --> 00:10:54,050
<font color="#CCCCCC">the first example is the I</font><font color="#E5E5E5"> square see</font>

227
00:10:51,230 --> 00:10:55,400
I'm not going<font color="#CCCCCC"> into</font><font color="#E5E5E5"> all detail but most</font>

228
00:10:54,050 --> 00:10:57,439
information<font color="#E5E5E5"> is on the slides which you</font>

229
00:10:55,400 --> 00:11:00,140
can download later<font color="#E5E5E5"> so a nice square sees</font>

230
00:10:57,440 --> 00:11:03,350
we did get slave support<font color="#CCCCCC"> a few years ago</font>

231
00:11:00,140 --> 00:11:08,270
<font color="#E5E5E5">and the major</font><font color="#CCCCCC"> reason why</font><font color="#E5E5E5"> that's workable</font>

232
00:11:03,350 --> 00:11:10,470
<font color="#CCCCCC">is that on I square seed the clocking is</font>

233
00:11:08,270 --> 00:11:14,460
also controlled by<font color="#E5E5E5"> the master</font>

234
00:11:10,470 --> 00:11:17,970
but it's<font color="#E5E5E5"> a an open drain signal and the</font>

235
00:11:14,460 --> 00:11:20,190
slave<font color="#E5E5E5"> can actually if the master asserts</font>

236
00:11:17,970 --> 00:11:22,170
the clock<font color="#E5E5E5"> and the slave</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> yet ready</font>

237
00:11:20,190 --> 00:11:24,200
it<font color="#E5E5E5"> can the slave can also assert the</font>

238
00:11:22,170 --> 00:11:26,699
clock<font color="#E5E5E5"> so because it's open drain it will</font>

239
00:11:24,200 --> 00:11:29,550
stay asserted and that's called<font color="#E5E5E5"> clock</font>

240
00:11:26,700 --> 00:11:33,660
<font color="#CCCCCC">scratching so during that</font><font color="#E5E5E5"> mechanism the</font>

241
00:11:29,550 --> 00:11:41,849
slave can delay everything<font color="#E5E5E5"> until it's</font>

242
00:11:33,660 --> 00:11:45,829
<font color="#E5E5E5">really ready another bus is the your</font><font color="#CCCCCC"> bus</font>

243
00:11:41,850 --> 00:11:48,270
<font color="#CCCCCC">the cereal a stand standard serial port</font>

244
00:11:45,830 --> 00:11:51,090
<font color="#CCCCCC">yeah if you're on the receiving</font><font color="#E5E5E5"> side of</font>

245
00:11:48,270 --> 00:11:53,910
<font color="#CCCCCC">the for as</font><font color="#E5E5E5"> a UART that yeah your receive</font>

246
00:11:51,090 --> 00:11:57,290
buffer<font color="#E5E5E5"> can</font><font color="#CCCCCC"> overflow but apart from that</font>

247
00:11:53,910 --> 00:12:00,839
<font color="#E5E5E5">or</font><font color="#CCCCCC"> not that's such big issues because</font>

248
00:11:57,290 --> 00:12:02,459
unlike for<font color="#CCCCCC"> SPI</font><font color="#E5E5E5"> the the other side</font>

249
00:12:00,840 --> 00:12:04,260
controls itself when it wants<font color="#CCCCCC"> to</font>

250
00:12:02,460 --> 00:12:08,520
transmit<font color="#CCCCCC"> something</font><font color="#E5E5E5"> so it can wait until</font>

251
00:12:04,260 --> 00:12:09,900
<font color="#E5E5E5">it's ready so the both channels are both</font>

252
00:12:08,520 --> 00:12:12,390
be directional channels are<font color="#CCCCCC"> really</font>

253
00:12:09,900 --> 00:12:14,340
separate and optionally you have a

254
00:12:12,390 --> 00:12:16,980
hardware flow control like request to

255
00:12:14,340 --> 00:12:21,360
send click to send<font color="#E5E5E5"> which makes it easier</font>

256
00:12:16,980 --> 00:12:22,950
a<font color="#E5E5E5"> third bus</font><font color="#CCCCCC"> I looked at was yeah it's</font>

257
00:12:21,360 --> 00:12:27,860
really<font color="#E5E5E5"> chain that</font><font color="#CCCCCC"> their titles are</font><font color="#E5E5E5"> not</font>

258
00:12:22,950 --> 00:12:27,860
visible<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> yes</font>

259
00:12:28,580 --> 00:12:34,260
so Ethernet<font color="#CCCCCC"> it's used to be half duplex</font>

260
00:12:32,250 --> 00:12:37,710
these days which switches<font color="#E5E5E5"> it's full</font>

261
00:12:34,260 --> 00:12:39,689
duplex but again here<font color="#E5E5E5"> each side controls</font>

262
00:12:37,710 --> 00:12:42,780
its own<font color="#E5E5E5"> when it's ready to transmit</font>

263
00:12:39,690 --> 00:12:44,610
<font color="#E5E5E5">something and on top of that</font><font color="#CCCCCC"> Ethernet is</font>

264
00:12:42,780 --> 00:12:48,480
usually used for<font color="#CCCCCC"> network transmissions</font>

265
00:12:44,610 --> 00:12:51,510
<font color="#E5E5E5">if packets are dropped or lost the</font>

266
00:12:48,480 --> 00:12:56,390
driver can drop them<font color="#E5E5E5"> and the upper</font>

267
00:12:51,510 --> 00:12:56,390
layers will usually<font color="#E5E5E5"> handle it fine later</font>

268
00:12:57,000 --> 00:13:04,890
it's about USB so USB everything is

269
00:13:01,260 --> 00:13:06,780
<font color="#E5E5E5">basically controlled by the master but</font>

270
00:13:04,890 --> 00:13:09,150
the master<font color="#E5E5E5"> pulls the bus and then there</font>

271
00:13:06,780 --> 00:13:12,089
are also packets and<font color="#CCCCCC"> acknowledgments so</font>

272
00:13:09,150 --> 00:13:15,620
it's quite complex but basically it

273
00:13:12,090 --> 00:13:19,350
means<font color="#CCCCCC"> that there's no real issue with</font>

274
00:13:15,620 --> 00:13:23,190
slave data<font color="#E5E5E5"> getting lost</font><font color="#CCCCCC"> the last</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is</font>

275
00:13:19,350 --> 00:13:24,300
one wire that's not so<font color="#E5E5E5"> interesting here</font>

276
00:13:23,190 --> 00:13:26,790
<font color="#E5E5E5">because we don't</font><font color="#CCCCCC"> have one</font>

277
00:13:24,300 --> 00:13:28,650
a slave support in Linux<font color="#CCCCCC"> I think it's</font>

278
00:13:26,790 --> 00:13:31,680
more<font color="#E5E5E5"> or less</font><font color="#CCCCCC"> similar like SPI if you</font>

279
00:13:28,650 --> 00:13:34,560
want to implement it<font color="#CCCCCC"> but let's do</font>

280
00:13:31,680 --> 00:13:36,209
<font color="#CCCCCC">something to be done so this</font><font color="#E5E5E5"> is a</font>

281
00:13:34,560 --> 00:13:40,199
<font color="#E5E5E5">summary of all the things</font><font color="#CCCCCC"> that we have</font>

282
00:13:36,210 --> 00:13:45,270
in<font color="#CCCCCC"> the various buses I went over that</font>

283
00:13:40,200 --> 00:13:47,910
<font color="#CCCCCC">make it simpler to to design a slave</font>

284
00:13:45,270 --> 00:13:53,990
protocol later<font color="#E5E5E5"> things like</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> flow</font>

285
00:13:47,910 --> 00:13:56,010
control and yeah upper layers handling

286
00:13:53,990 --> 00:13:57,600
retransmissions could be interesting if

287
00:13:56,010 --> 00:14:01,410
you want to<font color="#E5E5E5"> design</font><font color="#CCCCCC"> your own SPI slave</font>

288
00:13:57,600 --> 00:14:03,210
control so what kind of use cases can<font color="#CCCCCC"> be</font>

289
00:14:01,410 --> 00:14:05,040
<font color="#E5E5E5">half with</font><font color="#CCCCCC"> SPI slaves are definitely</font>

290
00:14:03,210 --> 00:14:07,650
possible<font color="#E5E5E5"> to implement one of them is</font>

291
00:14:05,040 --> 00:14:10,349
just<font color="#E5E5E5"> a master sending data to a slave no</font>

292
00:14:07,650 --> 00:14:13,020
data going from slave to master so as

293
00:14:10,350 --> 00:14:16,020
<font color="#E5E5E5">long</font><font color="#CCCCCC"> as you don't overflow the receive</font>

294
00:14:13,020 --> 00:14:18,090
<font color="#CCCCCC">five</font><font color="#E5E5E5"> for everything should</font><font color="#CCCCCC"> work so</font><font color="#E5E5E5"> if</font>

295
00:14:16,020 --> 00:14:21,350
<font color="#E5E5E5">just beats you don't go to two high</font>

296
00:14:18,090 --> 00:14:21,350
speeds<font color="#E5E5E5"> you can get it working</font>

297
00:14:22,010 --> 00:14:26,910
you could add flow control<font color="#E5E5E5"> another thing</font>

298
00:14:25,080 --> 00:14:29,490
is reading data from<font color="#CCCCCC"> the slave to the</font>

299
00:14:26,910 --> 00:14:31,579
master there are the issues<font color="#CCCCCC"> when you</font>

300
00:14:29,490 --> 00:14:34,290
know when the slave has data to<font color="#CCCCCC"> send</font>

301
00:14:31,580 --> 00:14:37,730
could also be<font color="#CCCCCC"> handled by</font><font color="#E5E5E5"> polling be</font>

302
00:14:34,290 --> 00:14:40,319
directional is a combination of<font color="#E5E5E5"> both</font>

303
00:14:37,730 --> 00:14:42,810
<font color="#CCCCCC">there you have to consider</font><font color="#E5E5E5"> that the</font>

304
00:14:40,320 --> 00:14:46,590
response can never be replied to<font color="#CCCCCC"> command</font>

305
00:14:42,810 --> 00:14:49,680
in the same<font color="#E5E5E5"> message</font><font color="#CCCCCC"> a nice example</font><font color="#E5E5E5"> of an</font>

306
00:14:46,590 --> 00:14:51,480
existing SPI protocol that the<font color="#CCCCCC"> chose of</font>

307
00:14:49,680 --> 00:14:54,540
<font color="#CCCCCC">this</font><font color="#E5E5E5"> limitations is in the Nordic</font>

308
00:14:51,480 --> 00:15:00,420
semiconductor n RF<font color="#CCCCCC"> eight zero zero one</font>

309
00:14:54,540 --> 00:15:02,040
<font color="#E5E5E5">Bluetooth</font><font color="#CCCCCC"> low-energy</font><font color="#E5E5E5"> controller</font><font color="#CCCCCC"> they</font>

310
00:15:00,420 --> 00:15:05,280
<font color="#E5E5E5">basically show what you</font><font color="#CCCCCC"> have to do there</font>

311
00:15:02,040 --> 00:15:10,050
<font color="#E5E5E5">and in that</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> they don't really use</font>

312
00:15:05,280 --> 00:15:11,699
the chip select<font color="#CCCCCC"> but</font><font color="#E5E5E5"> use two scoops to</font>

313
00:15:10,050 --> 00:15:13,620
separate signals there's a master

314
00:15:11,700 --> 00:15:15,450
request<font color="#E5E5E5"> which has been some kind of ship</font>

315
00:15:13,620 --> 00:15:16,830
select and slave ready so when<font color="#E5E5E5"> the</font>

316
00:15:15,450 --> 00:15:18,600
master<font color="#CCCCCC"> wants to send something he</font>

317
00:15:16,830 --> 00:15:20,550
asserts the master<font color="#E5E5E5"> request when the</font>

318
00:15:18,600 --> 00:15:22,560
slave is<font color="#E5E5E5"> ready to accept the data he</font>

319
00:15:20,550 --> 00:15:24,180
sorts the slave ready<font color="#E5E5E5"> then the master</font>

320
00:15:22,560 --> 00:15:26,069
sends commands which are<font color="#CCCCCC"> always first to</font>

321
00:15:24,180 --> 00:15:26,910
<font color="#E5E5E5">link by</font><font color="#CCCCCC"> its follow through</font><font color="#E5E5E5"> sub data at</font>

322
00:15:26,070 --> 00:15:29,070
the same time

323
00:15:26,910 --> 00:15:30,510
it reads data from<font color="#E5E5E5"> the slave which also</font>

324
00:15:29,070 --> 00:15:32,670
starts with<font color="#CCCCCC"> a length white followed by</font>

325
00:15:30,510 --> 00:15:34,550
data<font color="#CCCCCC"> if the length is</font><font color="#E5E5E5"> zero the slave</font>

326
00:15:32,670 --> 00:15:37,630
doesn't<font color="#E5E5E5"> have to say anything</font>

327
00:15:34,550 --> 00:15:39,729
now if the slave has something<font color="#E5E5E5"> to</font>

328
00:15:37,630 --> 00:15:41,769
some<font color="#E5E5E5"> information to send to the master</font>

329
00:15:39,730 --> 00:15:44,980
it will assert the slave<font color="#E5E5E5"> ready</font><font color="#CCCCCC"> signal</font>

330
00:15:41,769 --> 00:15:47,740
first after<font color="#CCCCCC"> that the master will assert</font>

331
00:15:44,980 --> 00:15:50,470
must request<font color="#CCCCCC"> send to the meek amount and</font>

332
00:15:47,740 --> 00:15:52,300
read the event<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the slave so and</font>

333
00:15:50,470 --> 00:15:54,699
<font color="#CCCCCC">datasheet there states explicitly that</font>

334
00:15:52,300 --> 00:15:56,290
the event is never that<font color="#E5E5E5"> the is received</font>

335
00:15:54,699 --> 00:16:02,709
from the master it's never replied to

336
00:15:56,290 --> 00:16:04,839
<font color="#E5E5E5">the command from the</font><font color="#CCCCCC"> most the slave so</font>

337
00:16:02,709 --> 00:16:07,000
yeah what we definitely can do is

338
00:16:04,839 --> 00:16:08,410
receive streams of data with simple

339
00:16:07,000 --> 00:16:10,180
messages<font color="#E5E5E5"> with</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> I don't go into</font>

340
00:16:08,410 --> 00:16:14,259
<font color="#E5E5E5">detail because you already LOI</font>

341
00:16:10,180 --> 00:16:17,430
<font color="#E5E5E5">running a bit out of</font><font color="#CCCCCC"> time so for</font><font color="#E5E5E5"> when</font>

342
00:16:14,259 --> 00:16:20,019
<font color="#E5E5E5">Linux gained as I square C slave support</font>

343
00:16:17,430 --> 00:16:24,239
<font color="#E5E5E5">the first example that</font><font color="#CCCCCC"> Wolfram Zhuang</font>

344
00:16:20,019 --> 00:16:26,980
<font color="#CCCCCC">wrote there was a an EEPROM simulator so</font>

345
00:16:24,240 --> 00:16:30,850
<font color="#E5E5E5">bi square</font><font color="#CCCCCC"> C that</font><font color="#E5E5E5"> worked because they had</font>

346
00:16:26,980 --> 00:16:32,740
you have clock scratching for<font color="#CCCCCC"> SPI</font><font color="#E5E5E5"> it's</font>

347
00:16:30,850 --> 00:16:34,870
more<font color="#CCCCCC"> complicated so I was wondering that</font>

348
00:16:32,740 --> 00:16:37,060
<font color="#E5E5E5">we could do something similar</font><font color="#CCCCCC"> if you</font>

349
00:16:34,870 --> 00:16:39,160
look at all the various SPI slave

350
00:16:37,060 --> 00:16:41,949
drivers that are in<font color="#E5E5E5"> Linux there was not</font>

351
00:16:39,160 --> 00:16:45,009
really<font color="#E5E5E5"> anything that I found interesting</font>

352
00:16:41,949 --> 00:16:46,660
<font color="#E5E5E5">I would have loved</font><font color="#CCCCCC"> to write a</font><font color="#E5E5E5"> SPI slave</font>

353
00:16:45,009 --> 00:16:48,939
Ethernet driver that<font color="#E5E5E5"> you could just</font>

354
00:16:46,660 --> 00:16:50,769
connect another Linux system of<font color="#E5E5E5"> recipe.i</font>

355
00:16:48,939 --> 00:16:53,469
and it would behave<font color="#CCCCCC"> like a fake network</font>

356
00:16:50,769 --> 00:16:57,069
interface but all the<font color="#CCCCCC"> its</font><font color="#E5E5E5"> SPI Ethernet</font>

357
00:16:53,470 --> 00:16:58,899
drivers they use protocols where the the

358
00:16:57,069 --> 00:17:00,880
response to a command is part<font color="#E5E5E5"> of the</font>

359
00:16:58,899 --> 00:17:03,970
same message<font color="#E5E5E5"> you could not do that from</font>

360
00:17:00,880 --> 00:17:06,609
<font color="#CCCCCC">slave so I had to come up with something</font>

361
00:17:03,970 --> 00:17:08,350
<font color="#CCCCCC">myself and one of example was that that</font>

362
00:17:06,609 --> 00:17:10,208
you<font color="#CCCCCC"> can query</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> uptime of a</font>

363
00:17:08,349 --> 00:17:11,980
system<font color="#E5E5E5"> and another one is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

364
00:17:10,209 --> 00:17:14,610
send some commands<font color="#E5E5E5"> to a system for</font>

365
00:17:11,980 --> 00:17:18,970
remote control<font color="#CCCCCC"> like suspend and reboot</font>

366
00:17:14,609 --> 00:17:20,109
and of course you can use<font color="#CCCCCC"> SPI</font><font color="#E5E5E5"> them so</font>

367
00:17:18,970 --> 00:17:24,039
this brings us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the actual</font>

368
00:17:20,109 --> 00:17:26,649
<font color="#E5E5E5">implementation so there are first steps</font>

369
00:17:24,039 --> 00:17:29,770
<font color="#E5E5E5">to be done the first</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> was to get</font>

370
00:17:26,650 --> 00:17:32,140
device tree bindings in extent then

371
00:17:29,770 --> 00:17:34,690
<font color="#E5E5E5">extent</font><font color="#CCCCCC"> spi</font><font color="#E5E5E5"> subsystems to support for</font>

372
00:17:32,140 --> 00:17:37,210
slaves extent one of the existing

373
00:17:34,690 --> 00:17:40,600
renesis as the bi master drivers to

374
00:17:37,210 --> 00:17:44,140
support slave and then some example<font color="#CCCCCC"> spi</font>

375
00:17:40,600 --> 00:17:48,280
slave handlers<font color="#E5E5E5"> device tree bindings</font><font color="#CCCCCC"> this</font>

376
00:17:44,140 --> 00:17:50,860
is sample for a normal<font color="#CCCCCC"> SPI bus</font><font color="#E5E5E5"> with the</font>

377
00:17:48,280 --> 00:17:51,430
master controller<font color="#E5E5E5"> so you have the device</font>

378
00:17:50,860 --> 00:17:54,219
node

379
00:17:51,430 --> 00:17:56,080
for the master<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you have a bus with</font>

380
00:17:54,220 --> 00:18:00,940
one or<font color="#CCCCCC"> more devices</font><font color="#E5E5E5"> in this case it's a</font>

381
00:17:56,080 --> 00:18:02,560
<font color="#CCCCCC">picnic and that's how it is described</font>

382
00:18:00,940 --> 00:18:08,590
<font color="#CCCCCC">for master controller so for a slave</font>

383
00:18:02,560 --> 00:18:12,370
controller we just add<font color="#E5E5E5"> a spi slave</font>

384
00:18:08,590 --> 00:18:14,159
<font color="#CCCCCC">property</font><font color="#E5E5E5"> and a single sub node without a</font>

385
00:18:12,370 --> 00:18:17,739
unit<font color="#CCCCCC"> elvis and without the register</font>

386
00:18:14,160 --> 00:18:19,840
representing the<font color="#E5E5E5"> the slave</font><font color="#CCCCCC"> the</font>

387
00:18:17,740 --> 00:18:21,850
<font color="#E5E5E5">compatible value here specifies what</font>

388
00:18:19,840 --> 00:18:24,490
protocol<font color="#E5E5E5"> is used that sub node is</font>

389
00:18:21,850 --> 00:18:29,860
optional we also made it<font color="#E5E5E5"> that you can</font>

390
00:18:24,490 --> 00:18:33,040
configure it from user<font color="#E5E5E5"> space later the</font>

391
00:18:29,860 --> 00:18:36,070
<font color="#CCCCCC">subsystem changes SPI slave support is</font>

392
00:18:33,040 --> 00:18:40,600
completely optional<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> new K config</font>

393
00:18:36,070 --> 00:18:43,810
<font color="#CCCCCC">segno this a new spi class device was</font>

394
00:18:40,600 --> 00:18:46,480
added<font color="#E5E5E5"> and the mechanism to bind the</font>

395
00:18:43,810 --> 00:18:48,429
slave protocol to the<font color="#E5E5E5"> actual slave</font>

396
00:18:46,480 --> 00:18:50,890
controller<font color="#E5E5E5"> so as I said there are two</font>

397
00:18:48,430 --> 00:18:52,570
<font color="#CCCCCC">ways one</font><font color="#E5E5E5"> of them was a compatible value</font>

398
00:18:50,890 --> 00:18:56,440
in DT which is<font color="#E5E5E5"> optional and the second</font>

399
00:18:52,570 --> 00:18:58,780
one is to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> a value of the actually</font>

400
00:18:56,440 --> 00:19:01,930
the<font color="#E5E5E5"> driver identifier to</font><font color="#CCCCCC"> a virtual</font><font color="#E5E5E5"> file</font>

401
00:18:58,780 --> 00:19:06,360
in<font color="#CCCCCC"> Sisyphus</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> sub system also</font><font color="#E5E5E5"> gained</font>

402
00:19:01,930 --> 00:19:08,980
three new API calls<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

403
00:19:06,360 --> 00:19:14,649
<font color="#E5E5E5">allocating a master controller you know</font>

404
00:19:08,980 --> 00:19:16,690
can allocate slave controller<font color="#CCCCCC"> the second</font>

405
00:19:14,650 --> 00:19:20,170
one is because<font color="#E5E5E5"> I've told you</font><font color="#CCCCCC"> before that</font>

406
00:19:16,690 --> 00:19:21,820
<font color="#E5E5E5">slave has to prepare data to be received</font>

407
00:19:20,170 --> 00:19:24,100
by<font color="#E5E5E5"> the master before it receives the</font>

408
00:19:21,820 --> 00:19:26,919
master request<font color="#E5E5E5"> so suppose that you have</font>

409
00:19:24,100 --> 00:19:28,600
already<font color="#E5E5E5"> prepared the data and then you</font>

410
00:19:26,920 --> 00:19:30,910
want<font color="#E5E5E5"> to unload the driver something that</font>

411
00:19:28,600 --> 00:19:33,159
like that<font color="#E5E5E5"> you have to abort</font><font color="#CCCCCC"> that</font>

412
00:19:30,910 --> 00:19:35,650
<font color="#E5E5E5">operation so a new API call for that is</font>

413
00:19:33,160 --> 00:19:37,360
added and the<font color="#CCCCCC"> third one is just a</font><font color="#E5E5E5"> simple</font>

414
00:19:35,650 --> 00:19:38,770
check of<font color="#CCCCCC"> to check whether</font><font color="#E5E5E5"> controller his</font>

415
00:19:37,360 --> 00:19:41,080
master and slave<font color="#E5E5E5"> and it takes into</font>

416
00:19:38,770 --> 00:19:43,450
account the<font color="#CCCCCC"> configuration options</font>

417
00:19:41,080 --> 00:19:46,030
<font color="#E5E5E5">offered for her drivers of support both</font>

418
00:19:43,450 --> 00:19:49,030
master<font color="#E5E5E5"> and slave and as a</font><font color="#CCCCCC"> rough step we</font>

419
00:19:46,030 --> 00:19:51,520
generalized that the current<font color="#CCCCCC"> SPI master</font>

420
00:19:49,030 --> 00:19:54,670
naming was changed to controller because

421
00:19:51,520 --> 00:19:56,200
everything stayed the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> but master</font>

422
00:19:54,670 --> 00:19:57,810
was not<font color="#CCCCCC"> a good name for that anymore</font><font color="#E5E5E5"> and</font>

423
00:19:56,200 --> 00:20:00,049
that's actually the<font color="#E5E5E5"> largest part of</font><font color="#CCCCCC"> the</font>

424
00:19:57,810 --> 00:20:03,720
departure

425
00:20:00,049 --> 00:20:11,720
so how does a<font color="#CCCCCC"> SBI master</font><font color="#E5E5E5"> driver looks</font>

426
00:20:03,720 --> 00:20:17,190
like this one this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> very simple one</font>

427
00:20:11,720 --> 00:20:19,710
<font color="#E5E5E5">you create a SPI masters structure you</font>

428
00:20:17,190 --> 00:20:21,960
fill in capabilities a few callbacks<font color="#E5E5E5"> and</font>

429
00:20:19,710 --> 00:20:23,160
<font color="#E5E5E5">you're registered and that's it what</font>

430
00:20:21,960 --> 00:20:27,059
needs to be changed<font color="#CCCCCC"> for a slave</font>

431
00:20:23,160 --> 00:20:28,830
controller instead<font color="#E5E5E5"> of SPI master</font><font color="#CCCCCC"> we now</font>

432
00:20:27,059 --> 00:20:32,549
<font color="#CCCCCC">have SPI controller which is basically</font>

433
00:20:28,830 --> 00:20:35,070
just exact the<font color="#CCCCCC"> same thing you call a log</font>

434
00:20:32,549 --> 00:20:38,210
slave instead<font color="#E5E5E5"> of all of masker take care</font>

435
00:20:35,070 --> 00:20:45,418
of the new go back register<font color="#E5E5E5"> everything</font>

436
00:20:38,210 --> 00:20:47,880
<font color="#E5E5E5">and that's it now the changes that had</font>

437
00:20:45,419 --> 00:20:50,130
to be made<font color="#E5E5E5"> to the vanessa's SPI master</font>

438
00:20:47,880 --> 00:20:53,130
<font color="#E5E5E5">driver they were actually quite small so</font>

439
00:20:50,130 --> 00:20:57,330
<font color="#E5E5E5">the low-level core of that was based on</font>

440
00:20:53,130 --> 00:20:58,500
the sample<font color="#CCCCCC"> back yard in the BSP so from</font>

441
00:20:57,330 --> 00:21:01,320
the hardware point of view it's actually

442
00:20:58,500 --> 00:21:03,740
<font color="#E5E5E5">quite simple and you just consider the</font>

443
00:21:01,320 --> 00:21:06,570
<font color="#E5E5E5">clock</font><font color="#CCCCCC"> and input instead of an output and</font>

444
00:21:03,740 --> 00:21:10,980
the rest of<font color="#E5E5E5"> the hardware will we handle</font>

445
00:21:06,570 --> 00:21:14,040
it fine on top<font color="#E5E5E5"> of that are the more</font>

446
00:21:10,980 --> 00:21:15,750
complex<font color="#E5E5E5"> things you have to register as a</font>

447
00:21:14,040 --> 00:21:18,540
master<font color="#CCCCCC"> or a slave controller based on</font>

448
00:21:15,750 --> 00:21:20,610
the<font color="#CCCCCC"> DD SPI slave property but it's</font>

449
00:21:18,540 --> 00:21:23,940
present or not

450
00:21:20,610 --> 00:21:26,010
when writing<font color="#E5E5E5"> when rising</font><font color="#CCCCCC"> hardware</font>

451
00:21:23,940 --> 00:21:27,570
<font color="#E5E5E5">drivers you typically program the</font>

452
00:21:26,010 --> 00:21:29,669
hardware to do something and then<font color="#E5E5E5"> you</font>

453
00:21:27,570 --> 00:21:31,799
wait<font color="#CCCCCC"> for an interrupted tab</font><font color="#E5E5E5"> to happen</font>

454
00:21:29,669 --> 00:21:33,480
that will<font color="#CCCCCC"> trigger</font><font color="#E5E5E5"> completion from a</font>

455
00:21:31,799 --> 00:21:35,280
master<font color="#E5E5E5"> controller driver it's something</font>

456
00:21:33,480 --> 00:21:36,960
<font color="#E5E5E5">waiting for completion with a very short</font>

457
00:21:35,280 --> 00:21:38,700
time out<font color="#CCCCCC"> just in case the</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> Hanks</font>

458
00:21:36,960 --> 00:21:41,010
for a slave controller you never know

459
00:21:38,700 --> 00:21:42,960
when the<font color="#CCCCCC"> Masters gonna send you command</font>

460
00:21:41,010 --> 00:21:45,450
<font color="#E5E5E5">could be in one second could be in one</font>

461
00:21:42,960 --> 00:21:47,880
<font color="#CCCCCC">hours or you have to use different</font><font color="#E5E5E5"> wait</font>

462
00:21:45,450 --> 00:21:49,730
for completion call<font color="#E5E5E5"> and one that can</font><font color="#CCCCCC"> be</font>

463
00:21:47,880 --> 00:21:52,679
aborted<font color="#E5E5E5"> through the slave</font><font color="#CCCCCC"> Oberth go back</font>

464
00:21:49,730 --> 00:21:54,390
and<font color="#E5E5E5"> but the current renesis</font><font color="#CCCCCC"> msi</font><font color="#E5E5E5"> RF</font>

465
00:21:52,679 --> 00:21:57,030
driver this<font color="#E5E5E5"> limitation that</font><font color="#CCCCCC"> the message</font>

466
00:21:54,390 --> 00:21:58,590
size must<font color="#CCCCCC"> be</font><font color="#E5E5E5"> known in advance</font><font color="#CCCCCC"> I think</font>

467
00:21:57,030 --> 00:22:00,870
that can<font color="#E5E5E5"> be relaxed because the hardware</font>

468
00:21:58,590 --> 00:22:02,370
<font color="#CCCCCC">does know when the the ship select is no</font>

469
00:22:00,870 --> 00:22:04,320
longer asserted and when the message is

470
00:22:02,370 --> 00:22:08,489
<font color="#E5E5E5">handed but that hasn't been implemented</font>

471
00:22:04,320 --> 00:22:12,360
yet now the final<font color="#E5E5E5"> part is the</font><font color="#CCCCCC"> spi slave</font>

472
00:22:08,490 --> 00:22:13,500
handles so the existing SPI slave

473
00:22:12,360 --> 00:22:15,840
drivers in the

474
00:22:13,500 --> 00:22:18,300
they all<font color="#E5E5E5"> assume that they're talking</font><font color="#CCCCCC"> to</font>

475
00:22:15,840 --> 00:22:20,310
a slave device<font color="#E5E5E5"> to master controller</font><font color="#CCCCCC"> so</font>

476
00:22:18,300 --> 00:22:23,879
the new<font color="#CCCCCC"> SPI slave handlers they are used</font>

477
00:22:20,310 --> 00:22:28,770
to to listen<font color="#E5E5E5"> to requests from a remote</font>

478
00:22:23,880 --> 00:22:30,900
master<font color="#CCCCCC"> we</font><font color="#E5E5E5"> managed</font><font color="#CCCCCC"> to keep most</font><font color="#E5E5E5"> of the</font>

479
00:22:28,770 --> 00:22:33,060
existing infrastructure as<font color="#CCCCCC"> is so</font>

480
00:22:30,900 --> 00:22:34,200
<font color="#E5E5E5">everything can be</font><font color="#CCCCCC"> reused</font><font color="#E5E5E5"> as much as</font>

481
00:22:33,060 --> 00:22:36,990
<font color="#CCCCCC">possible</font>

482
00:22:34,200 --> 00:22:39,570
SPI slave handle uses almost<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

483
00:22:36,990 --> 00:22:42,150
API<font color="#E5E5E5"> the only differences are is that</font>

484
00:22:39,570 --> 00:22:43,919
<font color="#CCCCCC">when you send data to</font><font color="#E5E5E5"> the master it will</font>

485
00:22:42,150 --> 00:22:46,320
not be sent<font color="#CCCCCC"> immediately but only when</font>

486
00:22:43,920 --> 00:22:50,550
the master<font color="#CCCCCC"> request</font><font color="#E5E5E5"> for it and you can</font>

487
00:22:46,320 --> 00:22:54,360
abort<font color="#E5E5E5"> it when it's you want to unload</font>

488
00:22:50,550 --> 00:22:56,340
the driver<font color="#E5E5E5"> for example we don't have</font>

489
00:22:54,360 --> 00:22:58,260
<font color="#E5E5E5">support for the ready signal yet which</font>

490
00:22:56,340 --> 00:22:59,760
is<font color="#E5E5E5"> part of some protocols but that can</font>

491
00:22:58,260 --> 00:23:02,190
easily<font color="#E5E5E5"> be implemented on top by the</font>

492
00:22:59,760 --> 00:23:04,590
driver<font color="#E5E5E5"> because mostly</font><font color="#CCCCCC"> Drive specific it</font>

493
00:23:02,190 --> 00:23:06,090
can be<font color="#E5E5E5"> handled with</font><font color="#CCCCCC"> the GPIO or GPIO</font>

494
00:23:04,590 --> 00:23:11,840
tight or<font color="#E5E5E5"> interrupt</font><font color="#CCCCCC"> or something like</font>

495
00:23:06,090 --> 00:23:15,959
<font color="#E5E5E5">that example normals</font><font color="#CCCCCC"> spi slave handler</font>

496
00:23:11,840 --> 00:23:19,439
in SPI driver<font color="#E5E5E5"> pro protein it can set up</font>

497
00:23:15,960 --> 00:23:22,380
some<font color="#E5E5E5"> stuff and then send messages to the</font>

498
00:23:19,440 --> 00:23:26,100
slave different api's are listed most of

499
00:23:22,380 --> 00:23:29,130
them here<font color="#E5E5E5"> an SPI slave handler is really</font>

500
00:23:26,100 --> 00:23:31,050
very<font color="#E5E5E5"> simpler similar there's one big</font>

501
00:23:29,130 --> 00:23:32,460
<font color="#CCCCCC">difference</font><font color="#E5E5E5"> though is</font><font color="#CCCCCC"> that if you want to</font>

502
00:23:31,050 --> 00:23:33,840
<font color="#E5E5E5">do something for</font><font color="#CCCCCC"> example your probe</font>

503
00:23:32,460 --> 00:23:35,820
function yet<font color="#CCCCCC"> you have to use a</font>

504
00:23:33,840 --> 00:23:38,010
non-blocking<font color="#CCCCCC"> SPI transfer because the</font>

505
00:23:35,820 --> 00:23:41,159
pro function should return and the data

506
00:23:38,010 --> 00:23:42,570
will<font color="#E5E5E5"> not really be sent here if you want</font>

507
00:23:41,160 --> 00:23:45,600
to do blocking<font color="#CCCCCC"> stub then you have to do</font>

508
00:23:42,570 --> 00:23:48,149
it<font color="#CCCCCC"> for mah from a threat</font><font color="#E5E5E5"> and the second</font>

509
00:23:45,600 --> 00:23:51,840
big change<font color="#E5E5E5"> is that in your remove</font>

510
00:23:48,150 --> 00:23:53,190
<font color="#CCCCCC">function you have to</font><font color="#E5E5E5"> abort anything that</font>

511
00:23:51,840 --> 00:23:55,290
has<font color="#CCCCCC"> been programmed</font><font color="#E5E5E5"> into the hard way</font>

512
00:23:53,190 --> 00:23:57,270
yet and then of course you have to wait

513
00:23:55,290 --> 00:24:02,280
for some way<font color="#E5E5E5"> to for the other threads to</font>

514
00:23:57,270 --> 00:24:05,400
complete something like that<font color="#CCCCCC"> now</font><font color="#E5E5E5"> that</font>

515
00:24:02,280 --> 00:24:07,670
one a simple<font color="#CCCCCC"> example of this</font><font color="#E5E5E5"> you have a</font>

516
00:24:05,400 --> 00:24:07,670
question

517
00:24:08,950 --> 00:24:15,040
some<font color="#E5E5E5"> three</font><font color="#CCCCCC"> where SBI so this half-duplex</font>

518
00:24:11,620 --> 00:24:17,620
<font color="#CCCCCC">is behaving as a slave</font><font color="#E5E5E5"> you might get</font>

519
00:24:15,040 --> 00:24:21,899
<font color="#E5E5E5">interrupted or</font><font color="#CCCCCC"> you might conflict</font><font color="#E5E5E5"> on</font>

520
00:24:17,620 --> 00:24:36,790
your master<font color="#CCCCCC"> inputs slave</font><font color="#E5E5E5"> out with this</font>

521
00:24:21,900 --> 00:24:38,440
<font color="#E5E5E5">seriously</font><font color="#CCCCCC"> yeah that's good I think the</font>

522
00:24:36,790 --> 00:24:40,360
three wire<font color="#E5E5E5"> interface handling it in</font>

523
00:24:38,440 --> 00:24:43,000
slave mode is not that simple

524
00:24:40,360 --> 00:24:44,530
and actually the the slave needs to know

525
00:24:43,000 --> 00:24:46,960
the protocol and needs<font color="#E5E5E5"> to know when it</font>

526
00:24:44,530 --> 00:24:52,870
switches from from<font color="#E5E5E5"> transmit to receive</font>

527
00:24:46,960 --> 00:25:02,260
so then you don't<font color="#CCCCCC"> need</font><font color="#E5E5E5"> a yeah you don't</font>

528
00:24:52,870 --> 00:25:03,669
<font color="#CCCCCC">need a wire because the even most a</font>

529
00:25:02,260 --> 00:25:05,590
slave should know what protocol they

530
00:25:03,670 --> 00:25:09,100
<font color="#CCCCCC">would have to talk</font><font color="#E5E5E5"> to each other so as</font>

531
00:25:05,590 --> 00:25:11,770
it breaks<font color="#E5E5E5"> down</font><font color="#CCCCCC"> aim so back to the</font>

532
00:25:09,100 --> 00:25:14,350
example so I wrote after<font color="#E5E5E5"> three small</font>

533
00:25:11,770 --> 00:25:17,440
examples here<font color="#E5E5E5"> that's the last part after</font>

534
00:25:14,350 --> 00:25:20,770
that<font color="#E5E5E5"> Lee education questions so a first</font>

535
00:25:17,440 --> 00:25:22,990
<font color="#E5E5E5">example</font><font color="#CCCCCC"> here is that this is the slave</font>

536
00:25:20,770 --> 00:25:25,090
time and<font color="#E5E5E5"> lore which will respond with</font>

537
00:25:22,990 --> 00:25:27,940
<font color="#E5E5E5">the uptime of the system so this uses</font>

538
00:25:25,090 --> 00:25:31,179
<font color="#CCCCCC">the virtual</font><font color="#E5E5E5"> filing system</font><font color="#CCCCCC"> has to convert</font>

539
00:25:27,940 --> 00:25:34,120
the slave<font color="#CCCCCC"> handle so you this time</font><font color="#E5E5E5"> you</font>

540
00:25:31,180 --> 00:25:36,850
write the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the driver to it and</font>

541
00:25:34,120 --> 00:25:39,939
after<font color="#CCCCCC"> that I used</font><font color="#E5E5E5"> SPI</font><font color="#CCCCCC"> devtest</font><font color="#E5E5E5"> to write</font>

542
00:25:36,850 --> 00:25:42,370
some dummy bytes<font color="#E5E5E5"> and in the response you</font>

543
00:25:39,940 --> 00:25:45,360
will see here the uptime in seconds and

544
00:25:42,370 --> 00:25:47,500
<font color="#E5E5E5">in microseconds from the remote system</font>

545
00:25:45,360 --> 00:25:50,620
<font color="#E5E5E5">note</font><font color="#CCCCCC"> that this is the</font><font color="#E5E5E5"> uptime and the</font>

546
00:25:47,500 --> 00:25:53,470
previous<font color="#E5E5E5"> message was on the other system</font>

547
00:25:50,620 --> 00:25:55,750
was received<font color="#E5E5E5"> because it had to it's not</font>

548
00:25:53,470 --> 00:25:59,260
when the master requests sends message

549
00:25:55,750 --> 00:26:02,830
to the to the slave<font color="#E5E5E5"> it's a time from</font>

550
00:25:59,260 --> 00:26:04,450
when the slave prepared it this could be

551
00:26:02,830 --> 00:26:06,370
used as a simple Deadman switch for

552
00:26:04,450 --> 00:26:08,410
example because if this remote system

553
00:26:06,370 --> 00:26:09,939
dies then you<font color="#E5E5E5"> will no longer</font><font color="#CCCCCC"> receive</font><font color="#E5E5E5"> a</font>

554
00:26:08,410 --> 00:26:12,730
valid time but all<font color="#E5E5E5"> zeros or one</font><font color="#CCCCCC"> or</font>

555
00:26:09,940 --> 00:26:15,190
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that the second example</font>

556
00:26:12,730 --> 00:26:17,080
is system control handler which you can

557
00:26:15,190 --> 00:26:19,570
use to suspend to resume<font color="#E5E5E5"> a system you</font>

558
00:26:17,080 --> 00:26:21,610
<font color="#CCCCCC">just write a specific</font><font color="#E5E5E5"> command to it the</font>

559
00:26:19,570 --> 00:26:22,389
yeah the weird hex numbers here are

560
00:26:21,610 --> 00:26:26,229
chosen such

561
00:26:22,390 --> 00:26:28,240
<font color="#CCCCCC">that I</font><font color="#E5E5E5"> connect some shift registers and</font>

562
00:26:26,230 --> 00:26:30,550
a seven-segment leds<font color="#CCCCCC"> to the bus so I</font>

563
00:26:28,240 --> 00:26:33,310
could see an interesting<font color="#E5E5E5"> character on on</font>

564
00:26:30,550 --> 00:26:35,379
that<font color="#E5E5E5"> one likes</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> suspend</font>

565
00:26:33,310 --> 00:26:39,370
something<font color="#CCCCCC"> later</font><font color="#E5E5E5"> and third example is</font>

566
00:26:35,380 --> 00:26:41,020
using<font color="#E5E5E5"> SPI</font><font color="#CCCCCC"> deaf if you put more</font>

567
00:26:39,370 --> 00:26:43,719
information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the tests</font><font color="#CCCCCC"> or of this</font>

568
00:26:41,020 --> 00:26:45,850
alien absorb<font color="#E5E5E5"> we keep</font><font color="#CCCCCC"> its yes I do you</font>

569
00:26:43,720 --> 00:26:49,720
did<font color="#E5E5E5"> use DT</font><font color="#CCCCCC"> overlays just for people who</font>

570
00:26:45,850 --> 00:26:55,629
<font color="#E5E5E5">are</font><font color="#CCCCCC"> interested in that and we got this</font>

571
00:26:49,720 --> 00:26:59,950
in 4.13<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> mark antenna</font><font color="#E5E5E5"> I'd like</font>

572
00:26:55,630 --> 00:27:01,570
<font color="#E5E5E5">to say what things you get you we could</font>

573
00:26:59,950 --> 00:27:03,820
use in the future<font color="#E5E5E5"> more support for</font>

574
00:27:01,570 --> 00:27:08,010
slaves<font color="#CCCCCC"> or other slave controllers</font><font color="#E5E5E5"> for</font>

575
00:27:03,820 --> 00:27:10,840
now we have foreign SSMS<font color="#CCCCCC"> iof rescale</font><font color="#E5E5E5"> IMX</font>

576
00:27:08,010 --> 00:27:38,950
more handlers<font color="#E5E5E5"> for</font><font color="#CCCCCC"> real-world protocols</font>

577
00:27:10,840 --> 00:27:40,300
<font color="#E5E5E5">perhaps IP networking so yeah so the</font>

578
00:27:38,950 --> 00:27:42,430
question<font color="#E5E5E5"> is whether the patches for the</font>

579
00:27:40,300 --> 00:27:44,889
<font color="#E5E5E5">big</font><font color="#CCCCCC"> urban black are related to this</font><font color="#E5E5E5"> in</font>

580
00:27:42,430 --> 00:27:46,210
2016<font color="#E5E5E5"> they must be definitely be newer</font>

581
00:27:44,890 --> 00:27:48,730
than<font color="#CCCCCC"> the ones from</font><font color="#E5E5E5"> the Renaissance</font>

582
00:27:46,210 --> 00:27:52,860
<font color="#CCCCCC">Bigsby because I think there</font><font color="#E5E5E5"> is though</font>

583
00:27:48,730 --> 00:27:52,860
those<font color="#E5E5E5"> dead back to 2014</font>

584
00:28:09,489 --> 00:28:14,419
yeah so the<font color="#CCCCCC"> question is about signals</font>

585
00:28:12,440 --> 00:28:16,759
from<font color="#E5E5E5"> interrupt signals from the slave to</font>

586
00:28:14,419 --> 00:28:18,350
the master<font color="#E5E5E5"> that you have to</font><font color="#CCCCCC"> implement</font>

587
00:28:16,759 --> 00:28:31,940
them in the driver yes so the idea is

588
00:28:18,350 --> 00:28:34,519
that<font color="#E5E5E5"> you do that on top yeah so the</font>

589
00:28:31,940 --> 00:28:38,409
slave wants<font color="#E5E5E5"> to send interrupts it can</font>

590
00:28:34,519 --> 00:28:38,409
use a GPIO to assert the signal

591
00:28:59,379 --> 00:29:03,769
yeah so the question<font color="#CCCCCC"> was</font><font color="#E5E5E5"> going to use</font>

592
00:29:01,369 --> 00:29:05,720
this<font color="#E5E5E5"> SPI flash about</font><font color="#CCCCCC"> the probe</font>

593
00:29:03,769 --> 00:29:07,759
<font color="#E5E5E5">I didn't implement SPI flash support</font>

594
00:29:05,720 --> 00:29:10,970
because<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it has knowing protocol</font>

595
00:29:07,759 --> 00:29:14,539
where it relies on the commands<font color="#CCCCCC"> that you</font>

596
00:29:10,970 --> 00:29:17,450
sent in the<font color="#E5E5E5"> same message so you send the</font>

597
00:29:14,539 --> 00:29:19,429
command<font color="#E5E5E5"> to read data and then the slave</font>

598
00:29:17,450 --> 00:29:22,460
has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> respond with data in that same</font>

599
00:29:19,429 --> 00:29:26,259
<font color="#CCCCCC">message and</font><font color="#E5E5E5"> that's not</font><font color="#CCCCCC"> SPI flash</font><font color="#E5E5E5"> right</font>

600
00:29:22,460 --> 00:29:26,259
you could implement that's true

601
00:29:41,970 --> 00:29:46,060
<font color="#E5E5E5">yeah so the</font><font color="#CCCCCC"> question is you could just</font>

602
00:29:44,380 --> 00:29:49,210
ignore<font color="#E5E5E5"> the read</font><font color="#CCCCCC"> commands and just send</font>

603
00:29:46,060 --> 00:29:50,649
data anyway yes but if<font color="#E5E5E5"> you know what the</font>

604
00:29:49,210 --> 00:29:52,360
other in advance<font color="#E5E5E5"> were there but the</font>

605
00:29:50,650 --> 00:29:53,800
other<font color="#CCCCCC"> side's will will requesting you</font>

606
00:29:52,360 --> 00:30:05,679
can do that but<font color="#E5E5E5"> then basically that</font>

607
00:29:53,800 --> 00:30:17,620
<font color="#E5E5E5">becomes part</font><font color="#CCCCCC"> of the protocol for</font><font color="#E5E5E5"> FPGAs</font>

608
00:30:05,680 --> 00:30:21,130
<font color="#CCCCCC">burger programming it's so the question</font>

609
00:30:17,620 --> 00:30:24,570
is considered SD card emulation<font color="#E5E5E5"> SD card</font>

610
00:30:21,130 --> 00:30:28,510
emulation is as a similar<font color="#E5E5E5"> issue as</font>

611
00:30:24,570 --> 00:30:31,060
<font color="#CCCCCC">reading from spi flash</font><font color="#E5E5E5"> so you can access</font>

612
00:30:28,510 --> 00:30:33,700
<font color="#CCCCCC">a SD card</font><font color="#E5E5E5"> and treat</font><font color="#CCCCCC"> it like</font><font color="#E5E5E5"> a spi slave</font>

613
00:30:31,060 --> 00:30:36,060
I'm talking to it but emulating<font color="#CCCCCC"> in SD</font>

614
00:30:33,700 --> 00:30:39,600
card<font color="#E5E5E5"> but unless it's</font><font color="#CCCCCC"> just for writing</font>

615
00:30:36,060 --> 00:30:39,600
you cannot do it

616
00:30:45,520 --> 00:30:52,889
have<font color="#E5E5E5"> any more questions No</font>

617
00:30:56,230 --> 00:31:02,859
yeah I think I'm<font color="#CCCCCC"> mr. mixed up the</font><font color="#E5E5E5"> the</font>

618
00:31:00,649 --> 00:31:02,859
times

619
00:31:05,860 --> 00:31:12,719
[Applause]

