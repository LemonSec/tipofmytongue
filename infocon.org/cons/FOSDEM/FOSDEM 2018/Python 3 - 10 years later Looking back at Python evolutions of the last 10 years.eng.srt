1
00:00:04,690 --> 00:00:10,719
hi hi everybody<font color="#E5E5E5"> my talk is about</font>

2
00:00:07,210 --> 00:00:13,639
<font color="#E5E5E5">fighting free ten years later my name is</font>

3
00:00:10,719 --> 00:00:18,529
<font color="#CCCCCC">Victor Serena</font><font color="#E5E5E5"> I'm</font>

4
00:00:13,639 --> 00:00:21,020
since 2010<font color="#CCCCCC"> what does it mean to</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> on</font>

5
00:00:18,529 --> 00:00:23,390
<font color="#E5E5E5">cpython it means for example to to</font>

6
00:00:21,020 --> 00:00:26,779
maintain<font color="#CCCCCC"> the CI to fix her regressions</font>

7
00:00:23,390 --> 00:00:29,509
to take care<font color="#CCCCCC"> of the back tracker</font><font color="#E5E5E5"> to to</font>

8
00:00:26,779 --> 00:00:32,540
help<font color="#E5E5E5"> to</font><font color="#CCCCCC"> redo patches</font><font color="#E5E5E5"> help to debug some</font>

9
00:00:29,509 --> 00:00:35,960
some issues but also take care<font color="#E5E5E5"> of the</font>

10
00:00:32,540 --> 00:00:37,010
<font color="#E5E5E5">mailing</font><font color="#CCCCCC"> is to answer</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> follow</font>

11
00:00:35,960 --> 00:00:39,320
some<font color="#CCCCCC"> peps</font>

12
00:00:37,010 --> 00:00:43,280
in fact there<font color="#CCCCCC"> are many many things that</font>

13
00:00:39,320 --> 00:00:45,980
that should be<font color="#E5E5E5"> done</font><font color="#CCCCCC"> in Python and I'm</font>

14
00:00:43,280 --> 00:00:49,670
working<font color="#CCCCCC"> for C</font><font color="#E5E5E5"> Python and but also on</font>

15
00:00:45,980 --> 00:00:55,190
OpenStack for<font color="#CCCCCC"> rats</font><font color="#E5E5E5"> and I'm I am a very</font>

16
00:00:49,670 --> 00:00:58,220
happy<font color="#E5E5E5"> beam on</font><font color="#CCCCCC"> federal user I decided to</font>

17
00:00:55,190 --> 00:00:59,930
group my my slides<font color="#E5E5E5"> into</font><font color="#CCCCCC"> force isms</font><font color="#E5E5E5"> so</font>

18
00:00:58,220 --> 00:01:05,000
the<font color="#CCCCCC"> ten years will be in four seasons</font>

19
00:00:59,930 --> 00:01:08,000
<font color="#CCCCCC">and we'll start with autumn the birth of</font>

20
00:01:05,000 --> 00:01:10,189
Python 3000 because at the beginning<font color="#E5E5E5"> it</font>

21
00:01:08,000 --> 00:01:15,170
<font color="#E5E5E5">was called criticisms and not fightin</font>

22
00:01:10,189 --> 00:01:19,728
fightin free was in 2006 with with the

23
00:01:15,170 --> 00:01:22,940
<font color="#E5E5E5">pep called Python 3000 and the thing is</font>

24
00:01:19,729 --> 00:01:25,130
that<font color="#E5E5E5"> at this time some people</font><font color="#CCCCCC"> started to</font>

25
00:01:22,940 --> 00:01:28,000
complain<font color="#E5E5E5"> about design issues of the</font>

26
00:01:25,130 --> 00:01:31,580
<font color="#E5E5E5">Python language which were called</font><font color="#CCCCCC"> walks</font>

27
00:01:28,000 --> 00:01:33,590
for example in Python<font color="#CCCCCC"> 2 you have this</font>

28
00:01:31,580 --> 00:01:37,310
<font color="#CCCCCC">Moneta girl and you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> also a large</font>

29
00:01:33,590 --> 00:01:39,590
integer and the idea is that you if<font color="#E5E5E5"> you</font>

30
00:01:37,310 --> 00:01:41,900
start with<font color="#E5E5E5"> a small integer depending on</font>

31
00:01:39,590 --> 00:01:45,049
the<font color="#E5E5E5"> operation you may get a small or</font>

32
00:01:41,900 --> 00:01:46,990
<font color="#CCCCCC">large integer so to check the type of a</font>

33
00:01:45,049 --> 00:01:52,400
<font color="#CCCCCC">variable you have</font><font color="#E5E5E5"> to check</font><font color="#CCCCCC"> for both type</font>

34
00:01:46,990 --> 00:01:54,140
at once there is also a new class

35
00:01:52,400 --> 00:01:56,509
introduced during<font color="#CCCCCC"> the site has a</font>

36
00:01:54,140 --> 00:01:59,720
development cycle of Python Python<font color="#E5E5E5"> 2</font>

37
00:01:56,509 --> 00:02:01,820
which is called the new class you<font color="#E5E5E5"> get a</font>

38
00:01:59,720 --> 00:02:07,220
new class when you<font color="#E5E5E5"> inherit from the</font>

39
00:02:01,820 --> 00:02:09,619
object object type and if you don't hear

40
00:02:07,220 --> 00:02:11,599
it<font color="#E5E5E5"> from an object you get an oil class</font>

41
00:02:09,619 --> 00:02:14,780
and some features<font color="#CCCCCC"> like</font><font color="#E5E5E5"> properties</font>

42
00:02:11,599 --> 00:02:18,560
doesn't work as expected<font color="#E5E5E5"> on all class</font>

43
00:02:14,780 --> 00:02:20,810
so having this these two things<font color="#E5E5E5"> like</font>

44
00:02:18,560 --> 00:02:21,530
small integer<font color="#CCCCCC"> no nucleus on all class</font>

45
00:02:20,810 --> 00:02:24,240
can<font color="#E5E5E5"> be</font>

46
00:02:21,530 --> 00:02:27,030
confusing for newcomers<font color="#E5E5E5"> because you have</font>

47
00:02:24,240 --> 00:02:30,810
to<font color="#E5E5E5"> explain why we</font><font color="#CCCCCC"> didn't</font><font color="#E5E5E5"> have a single</font>

48
00:02:27,030 --> 00:02:33,390
single<font color="#CCCCCC"> thing at the beginning</font><font color="#E5E5E5"> there is</font>

49
00:02:30,810 --> 00:02:35,700
also a question<font color="#E5E5E5"> about division because</font>

50
00:02:33,390 --> 00:02:38,519
when you don't when you start<font color="#CCCCCC"> learning a</font>

51
00:02:35,700 --> 00:02:41,459
new language like Python<font color="#CCCCCC"> it was</font>

52
00:02:38,520 --> 00:02:44,220
surprising<font color="#CCCCCC"> to</font><font color="#E5E5E5"> there's a division of two</font>

53
00:02:41,460 --> 00:02:47,820
integrals<font color="#CCCCCC"> give an integrals</font><font color="#E5E5E5"> and not a</font>

54
00:02:44,220 --> 00:02:51,450
protein point number<font color="#E5E5E5"> maybe if you are</font>

55
00:02:47,820 --> 00:02:53,430
used to<font color="#E5E5E5"> Python today it seems you</font>

56
00:02:51,450 --> 00:02:57,170
understand<font color="#E5E5E5"> the reason but when you start</font>

57
00:02:53,430 --> 00:03:00,840
a<font color="#CCCCCC"> new language again it can be confusing</font>

58
00:02:57,170 --> 00:03:02,760
about<font color="#E5E5E5"> Unicode</font><font color="#CCCCCC"> I think that Python 2 is a</font>

59
00:03:00,840 --> 00:03:04,560
good support of<font color="#CCCCCC"> Unicode if you are using</font>

60
00:03:02,760 --> 00:03:06,750
using<font color="#E5E5E5"> heard everywhere in your</font>

61
00:03:04,560 --> 00:03:09,840
application which means<font color="#CCCCCC"> that you decode</font>

62
00:03:06,750 --> 00:03:14,040
all inputs and you ankle<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and cut</font>

63
00:03:09,840 --> 00:03:17,340
back the output<font color="#E5E5E5"> if you only use</font><font color="#CCCCCC"> unicode</font>

64
00:03:14,040 --> 00:03:19,380
everywhere everything is fine but if you

65
00:03:17,340 --> 00:03:21,690
start<font color="#E5E5E5"> using a module which</font><font color="#CCCCCC"> is not</font>

66
00:03:19,380 --> 00:03:26,010
compatible with<font color="#CCCCCC"> fighting</font><font color="#E5E5E5"> will be first</font>

67
00:03:21,690 --> 00:03:28,980
sorry<font color="#E5E5E5"> unicode you may you may or you may</font>

68
00:03:26,010 --> 00:03:32,310
not get some issues<font color="#E5E5E5"> depending on the</font>

69
00:03:28,980 --> 00:03:36,268
content<font color="#CCCCCC"> of the text it means that if you</font>

70
00:03:32,310 --> 00:03:39,120
only process<font color="#E5E5E5"> English it will be fine but</font>

71
00:03:36,269 --> 00:03:43,440
<font color="#E5E5E5">if you start to get</font><font color="#CCCCCC"> french names with</font>

72
00:03:39,120 --> 00:03:46,320
accents<font color="#E5E5E5"> you may get have a</font><font color="#CCCCCC"> Unicode arrow</font>

73
00:03:43,440 --> 00:03:49,829
which is something quite annoying

74
00:03:46,320 --> 00:03:52,739
because it means<font color="#CCCCCC"> that you get the ER at</font>

75
00:03:49,830 --> 00:03:55,019
runtime<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you don't get there at the</font>

76
00:03:52,739 --> 00:03:57,920
<font color="#E5E5E5">first</font><font color="#CCCCCC"> run so</font><font color="#E5E5E5"> depending</font><font color="#CCCCCC"> on the content it</font>

77
00:03:55,019 --> 00:04:01,769
can<font color="#E5E5E5"> be very annoying</font>

78
00:03:57,920 --> 00:04:03,780
another<font color="#E5E5E5"> design issue I would call a</font>

79
00:04:01,769 --> 00:04:06,989
design<font color="#E5E5E5"> issue of Python 2 is that when</font>

80
00:04:03,780 --> 00:04:09,570
you<font color="#E5E5E5"> compare two types which are not</font>

81
00:04:06,989 --> 00:04:11,489
which don't implement the comparison for

82
00:04:09,570 --> 00:04:14,190
<font color="#CCCCCC">these two types</font><font color="#E5E5E5"> there is a fallback in</font>

83
00:04:11,489 --> 00:04:16,530
Python<font color="#CCCCCC"> 2 when you take the name</font>

84
00:04:14,190 --> 00:04:19,680
of the type example if you<font color="#E5E5E5"> compare</font><font color="#CCCCCC"> a</font>

85
00:04:16,529 --> 00:04:23,549
<font color="#E5E5E5">number and a string button</font><font color="#CCCCCC"> we'll take</font>

86
00:04:19,680 --> 00:04:26,780
the name of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> type like int and the</font>

87
00:04:23,550 --> 00:04:30,360
string STR and compare the string and

88
00:04:26,780 --> 00:04:34,830
this order<font color="#E5E5E5"> may not be the order that you</font>

89
00:04:30,360 --> 00:04:36,810
expected<font color="#CCCCCC"> and when one part of the</font><font color="#E5E5E5"> bottom</font>

90
00:04:34,830 --> 00:04:40,169
pile of the<font color="#CCCCCC"> P is not to get to</font><font color="#E5E5E5"> make a</font>

91
00:04:36,810 --> 00:04:42,810
<font color="#E5E5E5">guess of the intent of the developer but</font>

92
00:04:40,170 --> 00:04:46,260
the<font color="#E5E5E5"> philosophy is</font><font color="#CCCCCC"> not to let the</font>

93
00:04:42,810 --> 00:04:50,180
developer make this choice and<font color="#E5E5E5"> so what</font>

94
00:04:46,260 --> 00:04:53,460
last issue was<font color="#CCCCCC"> import</font><font color="#E5E5E5"> in Python 2 you</font>

95
00:04:50,180 --> 00:04:56,790
may be aware<font color="#E5E5E5"> that if you have a file</font>

96
00:04:53,460 --> 00:04:59,609
name with the same names as<font color="#E5E5E5"> a module is</font>

97
00:04:56,790 --> 00:05:03,330
a<font color="#CCCCCC"> storage library you you get</font><font color="#E5E5E5"> your local</font>

98
00:04:59,610 --> 00:05:06,150
file example if you create<font color="#CCCCCC"> sis got PI in</font>

99
00:05:03,330 --> 00:05:08,400
your project<font color="#E5E5E5"> you you may get this file</font>

100
00:05:06,150 --> 00:05:13,979
instead<font color="#CCCCCC"> of the one</font><font color="#E5E5E5"> from the standard</font>

101
00:05:08,400 --> 00:05:16,320
library but<font color="#CCCCCC"> guido van rossum when he</font>

102
00:05:13,980 --> 00:05:19,380
started to design a<font color="#E5E5E5"> Python free he did</font>

103
00:05:16,320 --> 00:05:22,620
not<font color="#E5E5E5"> want to break everything so he</font>

104
00:05:19,380 --> 00:05:28,650
wanted<font color="#E5E5E5"> to control the</font><font color="#CCCCCC"> risk to reduce</font>

105
00:05:22,620 --> 00:05:30,690
<font color="#CCCCCC">risk of a big fire for example we we</font>

106
00:05:28,650 --> 00:05:33,390
decided<font color="#CCCCCC"> to not break everything but</font>

107
00:05:30,690 --> 00:05:38,250
really<font color="#E5E5E5"> focus on a few unknown design</font>

108
00:05:33,390 --> 00:05:41,430
issues<font color="#E5E5E5"> the title</font><font color="#CCCCCC"> Watts and the</font><font color="#E5E5E5"> world</font>

109
00:05:38,250 --> 00:05:44,790
also<font color="#E5E5E5"> an</font><font color="#CCCCCC"> open community the open</font>

110
00:05:41,430 --> 00:05:49,590
<font color="#E5E5E5">community process for deciding what to</font>

111
00:05:44,790 --> 00:05:52,590
<font color="#CCCCCC">change this process is a pet</font><font color="#E5E5E5"> so we we</font>

112
00:05:49,590 --> 00:05:55,750
had a many pets called<font color="#E5E5E5"> free thousands on</font>

113
00:05:52,590 --> 00:05:59,469
a number to describe the changes on

114
00:05:55,750 --> 00:06:02,140
<font color="#E5E5E5">maiden Python Python</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> there</font>

115
00:05:59,470 --> 00:06:04,360
<font color="#E5E5E5">is a pet for the two he organizes</font>

116
00:06:02,140 --> 00:06:09,669
<font color="#CCCCCC">conduct library to change our names of</font>

117
00:06:04,360 --> 00:06:12,370
the modules<font color="#CCCCCC"> and another choice was to</font>

118
00:06:09,670 --> 00:06:16,630
not implement the<font color="#E5E5E5"> interpreter</font><font color="#CCCCCC"> from</font>

119
00:06:12,370 --> 00:06:20,680
scratch the<font color="#E5E5E5"> idea that if you start</font><font color="#CCCCCC"> from</font>

120
00:06:16,630 --> 00:06:23,260
the same code<font color="#CCCCCC"> base and make changes you</font>

121
00:06:20,680 --> 00:06:26,160
<font color="#E5E5E5">you get a better backward compatibility</font>

122
00:06:23,260 --> 00:06:30,190
<font color="#E5E5E5">especially for the capi</font>

123
00:06:26,160 --> 00:06:33,250
<font color="#CCCCCC">study to me these are</font><font color="#E5E5E5"> all this words to</font>

124
00:06:30,190 --> 00:06:37,090
reduce<font color="#E5E5E5"> the risk and the last one is to</font>

125
00:06:33,250 --> 00:06:38,950
announce the<font color="#CCCCCC"> end of life of</font><font color="#E5E5E5"> Python 2 to</font>

126
00:06:37,090 --> 00:06:42,400
make it very obvious for people that's

127
00:06:38,950 --> 00:06:44,500
<font color="#E5E5E5">the visa data a deadline you must be</font>

128
00:06:42,400 --> 00:06:48,789
aware<font color="#CCCCCC"> that at this time you will</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

129
00:06:44,500 --> 00:06:55,090
support your project<font color="#E5E5E5"> and</font><font color="#CCCCCC"> here here it</font>

130
00:06:48,790 --> 00:06:58,450
comes<font color="#E5E5E5"> to Holy Grail Python 3 in 2008</font><font color="#CCCCCC"> you</font>

131
00:06:55,090 --> 00:07:02,979
get it we did it

132
00:06:58,450 --> 00:07:05,590
and the first migration<font color="#CCCCCC"> new plan was</font>

133
00:07:02,980 --> 00:07:08,590
<font color="#E5E5E5">very simple in fact Python Python</font><font color="#CCCCCC"> free</font>

134
00:07:05,590 --> 00:07:11,619
<font color="#CCCCCC">comes in the</font><font color="#E5E5E5"> stolid library</font><font color="#CCCCCC"> pattern free</font>

135
00:07:08,590 --> 00:07:14,200
comes with a tool called<font color="#CCCCCC"> - to free it's</font>

136
00:07:11,620 --> 00:07:17,770
two ports<font color="#E5E5E5"> your Python 2 code to Python 3</font>

137
00:07:14,200 --> 00:07:20,229
<font color="#E5E5E5">at once and the idea is very simple is</font>

138
00:07:17,770 --> 00:07:22,450
that<font color="#E5E5E5"> she runs the you</font><font color="#CCCCCC"> ran the store on</font>

139
00:07:20,230 --> 00:07:26,700
your code days<font color="#CCCCCC"> when you're done you're</font>

140
00:07:22,450 --> 00:07:34,240
comfortable with<font color="#CCCCCC"> patent-free</font><font color="#E5E5E5"> maybe</font>

141
00:07:26,700 --> 00:07:36,280
didn't<font color="#E5E5E5"> walk as expected maybe because</font>

142
00:07:34,240 --> 00:07:39,790
the thing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that when you pour code to</font>

143
00:07:36,280 --> 00:07:42,849
Python 3<font color="#E5E5E5"> the thing is that you drop use</font>

144
00:07:39,790 --> 00:07:45,190
the support<font color="#E5E5E5"> of item</font><font color="#CCCCCC"> 2 and basically</font><font color="#E5E5E5"> at</font>

145
00:07:42,850 --> 00:07:50,980
this time it means<font color="#E5E5E5"> dropping support for</font>

146
00:07:45,190 --> 00:07:54,280
all users so<font color="#CCCCCC"> the author of the</font><font color="#E5E5E5"> modules</font>

147
00:07:50,980 --> 00:07:58,900
<font color="#CCCCCC">the cheese shop decided</font><font color="#E5E5E5"> to let no that's</font>

148
00:07:54,280 --> 00:08:00,909
a no-go<font color="#CCCCCC"> and they did not want to to make</font>

149
00:07:58,900 --> 00:08:03,120
that change<font color="#CCCCCC"> they didn't want to</font><font color="#E5E5E5"> be the</font>

150
00:08:00,910 --> 00:08:05,540
<font color="#E5E5E5">first one to make the change</font>

151
00:08:03,120 --> 00:08:08,970
I didn't want to be the early adopter

152
00:08:05,540 --> 00:08:10,320
<font color="#CCCCCC">another</font><font color="#E5E5E5"> unexpected issue is that in</font>

153
00:08:08,970 --> 00:08:12,720
<font color="#CCCCCC">practice when you are the</font><font color="#E5E5E5"> code base</font>

154
00:08:10,320 --> 00:08:16,110
<font color="#E5E5E5">sometimes you have external dependencies</font>

155
00:08:12,720 --> 00:08:19,200
<font color="#CCCCCC">and if you don't put all dependencies of</font>

156
00:08:16,110 --> 00:08:21,090
<font color="#E5E5E5">your application</font><font color="#CCCCCC"> even if you put</font><font color="#E5E5E5"> your</font>

157
00:08:19,200 --> 00:08:22,200
own<font color="#E5E5E5"> code base to Python free</font><font color="#CCCCCC"> news</font>

158
00:08:21,090 --> 00:08:27,320
you are still<font color="#E5E5E5"> blocked by the</font>

159
00:08:22,200 --> 00:08:30,180
<font color="#CCCCCC">dependencies so</font><font color="#E5E5E5"> the problem was</font><font color="#CCCCCC"> that</font>

160
00:08:27,320 --> 00:08:32,610
<font color="#E5E5E5">everybody was when waiting until it was</font>

161
00:08:30,180 --> 00:08:38,820
some someone moves and nobody wanted<font color="#CCCCCC"> to</font>

162
00:08:32,610 --> 00:08:41,279
move and the last<font color="#E5E5E5"> point is that in fact</font>

163
00:08:38,820 --> 00:08:44,820
we didn't expect<font color="#E5E5E5"> that Python to was so</font>

164
00:08:41,279 --> 00:08:46,830
much popular we<font color="#CCCCCC"> we did not expect it</font>

165
00:08:44,820 --> 00:08:49,260
<font color="#E5E5E5">that many companies</font><font color="#CCCCCC"> are very</font><font color="#E5E5E5"> large code</font>

166
00:08:46,830 --> 00:08:51,480
bases<font color="#CCCCCC"> written in Python because there is</font>

167
00:08:49,260 --> 00:08:55,529
not<font color="#CCCCCC"> only</font><font color="#E5E5E5"> the published code but also the</font>

168
00:08:51,480 --> 00:09:00,710
<font color="#E5E5E5">private code written by companies and it</font>

169
00:08:55,529 --> 00:09:00,710
was a so<font color="#CCCCCC"> it didn't go as expected</font>

170
00:09:01,400 --> 00:09:07,350
<font color="#CCCCCC">another issue with the Python</font><font color="#E5E5E5"> 3 is what</font>

171
00:09:04,500 --> 00:09:09,120
<font color="#E5E5E5">I which</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> the technical depth so</font>

172
00:09:07,350 --> 00:09:12,480
explain the<font color="#E5E5E5"> other issue</font><font color="#CCCCCC"> imagine that</font>

173
00:09:09,120 --> 00:09:15,660
<font color="#CCCCCC">your you</font><font color="#E5E5E5"> have to ask your manager to get</font>

174
00:09:12,480 --> 00:09:18,180
some time<font color="#E5E5E5"> to work</font><font color="#CCCCCC"> on Python</font><font color="#E5E5E5"> 3 so your</font>

175
00:09:15,660 --> 00:09:21,630
manager what should I let you<font color="#E5E5E5"> walk on</font>

176
00:09:18,180 --> 00:09:23,880
<font color="#E5E5E5">Python 3 supports the developer</font><font color="#CCCCCC"> overall</font>

177
00:09:21,630 --> 00:09:28,589
<font color="#E5E5E5">this new</font><font color="#CCCCCC"> cool</font><font color="#E5E5E5"> fight of repeaters</font>

178
00:09:23,880 --> 00:09:33,480
<font color="#CCCCCC">obviously</font><font color="#E5E5E5"> okay but can we</font><font color="#CCCCCC"> use all these</font>

179
00:09:28,589 --> 00:09:35,520
features<font color="#E5E5E5"> well since we are still stuck</font>

180
00:09:33,480 --> 00:09:41,100
at Python<font color="#CCCCCC"> - we still have to</font><font color="#E5E5E5"> support</font><font color="#CCCCCC"> my</font>

181
00:09:35,520 --> 00:09:44,910
<font color="#CCCCCC">- nope so</font><font color="#E5E5E5"> the issue with Python 3 that's</font>

182
00:09:41,100 --> 00:09:47,430
even if you do all the boring<font color="#E5E5E5"> process of</font>

183
00:09:44,910 --> 00:09:49,680
<font color="#E5E5E5">integration</font><font color="#CCCCCC"> you don't get any new</font>

184
00:09:47,430 --> 00:09:52,709
feature of<font color="#E5E5E5"> Python 3 because you have to</font>

185
00:09:49,680 --> 00:09:54,270
support vital - so because<font color="#E5E5E5"> of that it</font>

186
00:09:52,709 --> 00:09:57,479
<font color="#E5E5E5">was very difficult</font><font color="#CCCCCC"> to ask</font><font color="#E5E5E5"> your manager</font>

187
00:09:54,270 --> 00:10:02,270
to get time<font color="#CCCCCC"> - but</font><font color="#E5E5E5"> also to motivate</font>

188
00:09:57,480 --> 00:10:02,270
yourself to spend time<font color="#CCCCCC"> on that and</font>

189
00:10:02,480 --> 00:10:09,230
an<font color="#E5E5E5"> immigration like that means to modify</font>

190
00:10:05,480 --> 00:10:12,080
the code and you may know that's any

191
00:10:09,230 --> 00:10:14,480
tiny change<font color="#E5E5E5"> in the code is likely to</font>

192
00:10:12,080 --> 00:10:16,640
introduce regressions so you have to

193
00:10:14,480 --> 00:10:19,670
justify<font color="#CCCCCC"> not only that you spend time on</font>

194
00:10:16,640 --> 00:10:22,580
a useless immigration<font color="#E5E5E5"> but also that you</font>

195
00:10:19,670 --> 00:10:25,729
<font color="#E5E5E5">are going to</font><font color="#CCCCCC"> introduce bugs</font><font color="#E5E5E5"> so that's</font>

196
00:10:22,580 --> 00:10:30,010
not<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say to a manager who was</font>

197
00:10:25,730 --> 00:10:30,010
customer waiting for the new new future

198
00:10:30,580 --> 00:10:36,260
<font color="#CCCCCC">another</font><font color="#E5E5E5"> choice to make when you port</font>

199
00:10:33,290 --> 00:10:39,079
code<font color="#CCCCCC"> item free</font><font color="#E5E5E5"> when you use</font><font color="#CCCCCC"> - - free</font>

200
00:10:36,260 --> 00:10:41,560
study<font color="#E5E5E5"> said if you would like to keep the</font>

201
00:10:39,080 --> 00:10:43,910
Python tube a Python 2 code base

202
00:10:41,560 --> 00:10:48,380
<font color="#E5E5E5">unchanged</font><font color="#CCCCCC"> or if you would</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> to create</font>

203
00:10:43,910 --> 00:10:50,360
a single<font color="#E5E5E5"> code base or</font><font color="#CCCCCC"> a Python 2 and</font>

204
00:10:48,380 --> 00:10:52,490
<font color="#CCCCCC">python</font><font color="#E5E5E5"> 3 in two different branches or</font>

205
00:10:50,360 --> 00:10:56,180
maybe a two<font color="#E5E5E5"> different project in three</font>

206
00:10:52,490 --> 00:10:58,640
different repositories so some some

207
00:10:56,180 --> 00:11:00,979
project<font color="#E5E5E5"> decided to</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> really for to have</font>

208
00:10:58,640 --> 00:11:05,240
two different repositories<font color="#E5E5E5"> or at least</font>

209
00:11:00,980 --> 00:11:06,800
to have two different<font color="#CCCCCC"> branches</font><font color="#E5E5E5"> and to</font>

210
00:11:05,240 --> 00:11:09,230
give you an example there<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> DNS</font>

211
00:11:06,800 --> 00:11:11,449
fighter<font color="#CCCCCC"> I think that this one decided to</font>

212
00:11:09,230 --> 00:11:13,490
use two different<font color="#CCCCCC"> branches and but also</font>

213
00:11:11,450 --> 00:11:16,850
to distributes<font color="#E5E5E5"> record with two different</font>

214
00:11:13,490 --> 00:11:19,280
<font color="#CCCCCC">names</font><font color="#E5E5E5"> because you was not able to</font>

215
00:11:16,850 --> 00:11:23,930
<font color="#E5E5E5">install DNS</font><font color="#CCCCCC"> fighter on</font><font color="#E5E5E5"> Python free and</font>

216
00:11:19,280 --> 00:11:26,569
DNS<font color="#E5E5E5"> Python free to</font><font color="#CCCCCC"> occupy tofu for</font><font color="#E5E5E5"> the</font>

217
00:11:23,930 --> 00:11:28,370
some projects<font color="#E5E5E5"> the company behind the</font>

218
00:11:26,570 --> 00:11:31,130
<font color="#CCCCCC">project didn't want to spend time of</font>

219
00:11:28,370 --> 00:11:35,330
<font color="#CCCCCC">Python free because of the</font><font color="#E5E5E5"> the hairy</font>

220
00:11:31,130 --> 00:11:37,610
manager and<font color="#E5E5E5"> so community decided to fork</font>

221
00:11:35,330 --> 00:11:40,160
the project like<font color="#CCCCCC"> pill to create a new</font>

222
00:11:37,610 --> 00:11:42,140
project called<font color="#CCCCCC"> Palau and the first</font>

223
00:11:40,160 --> 00:11:47,060
<font color="#CCCCCC">change of below it was to add</font><font color="#E5E5E5"> pattern</font>

224
00:11:42,140 --> 00:11:50,240
<font color="#E5E5E5">free supports another more tricky issue</font>

225
00:11:47,060 --> 00:11:52,849
is when the project is made by<font color="#E5E5E5"> God</font>

226
00:11:50,240 --> 00:11:56,480
<font color="#CCCCCC">awesome</font><font color="#E5E5E5"> it was an open source project</font>

227
00:11:52,850 --> 00:12:00,110
like my sequel<font color="#E5E5E5"> my sequel Python but</font><font color="#CCCCCC"> the</font>

228
00:11:56,480 --> 00:12:02,660
maintainer<font color="#E5E5E5"> doesn't show up so for this</font>

229
00:12:00,110 --> 00:12:05,330
case<font color="#E5E5E5"> it was very very annoying because</font>

230
00:12:02,660 --> 00:12:07,110
many people<font color="#E5E5E5"> are using my sequel like</font>

231
00:12:05,330 --> 00:12:12,560
many people<font color="#CCCCCC"> using junk</font>

232
00:12:07,110 --> 00:12:16,320
but also in my case for OpenStack it was

233
00:12:12,560 --> 00:12:19,469
<font color="#CCCCCC">LGBT used by OpenStack my company reddit</font>

234
00:12:16,320 --> 00:12:22,710
so not being<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> discuss</font><font color="#CCCCCC"> with the</font>

235
00:12:19,470 --> 00:12:24,720
database it was really blocking<font color="#E5E5E5"> and I</font>

236
00:12:22,710 --> 00:12:29,460
think that three different<font color="#CCCCCC"> people wrote</font>

237
00:12:24,720 --> 00:12:33,600
the world<font color="#CCCCCC"> change were full request what</font>

238
00:12:29,460 --> 00:12:36,150
my sequel<font color="#E5E5E5"> Python to Python 3 but after</font>

239
00:12:33,600 --> 00:12:39,870
two years<font color="#E5E5E5"> we we still don't have any</font>

240
00:12:36,150 --> 00:12:42,510
news from the<font color="#E5E5E5"> maintainer so some people</font>

241
00:12:39,870 --> 00:12:43,650
<font color="#E5E5E5">decided</font><font color="#CCCCCC"> to fall the project and to</font>

242
00:12:42,510 --> 00:12:46,920
create a<font color="#E5E5E5"> new one</font>

243
00:12:43,650 --> 00:12:48,930
<font color="#E5E5E5">we never knew and they know but when you</font>

244
00:12:46,920 --> 00:12:50,430
<font color="#E5E5E5">get a new name you you make it may have</font>

245
00:12:48,930 --> 00:12:54,949
new issue because<font color="#CCCCCC"> you have to modify</font>

246
00:12:50,430 --> 00:12:58,290
<font color="#E5E5E5">your project to</font><font color="#CCCCCC"> change the import name</font>

247
00:12:54,950 --> 00:13:01,050
and when<font color="#CCCCCC"> python 3 was released the</font>

248
00:12:58,290 --> 00:13:08,219
stable<font color="#CCCCCC"> version of Python tool was</font><font color="#E5E5E5"> Python</font>

249
00:13:01,050 --> 00:13:10,859
2.6<font color="#CCCCCC"> Python 2.6 already</font><font color="#E5E5E5"> as some some</font>

250
00:13:08,220 --> 00:13:14,660
things to<font color="#E5E5E5"> prepare the migration to</font>

251
00:13:10,860 --> 00:13:18,920
Python<font color="#CCCCCC"> 3 for examples Ariza bytes type</font>

252
00:13:14,660 --> 00:13:22,530
which is a<font color="#CCCCCC"> analogous to</font><font color="#E5E5E5"> the sting type</font>

253
00:13:18,920 --> 00:13:26,040
the reserves of the beep-beep<font color="#E5E5E5"> prefix to</font>

254
00:13:22,530 --> 00:13:29,760
annotate which string our<font color="#E5E5E5"> bytes but you</font>

255
00:13:26,040 --> 00:13:31,500
still need many many<font color="#E5E5E5"> tiny changes and in</font>

256
00:13:29,760 --> 00:13:36,200
your code days<font color="#CCCCCC"> if you would like to have</font>

257
00:13:31,500 --> 00:13:39,030
<font color="#E5E5E5">a</font><font color="#CCCCCC"> 74</font><font color="#E5E5E5"> days</font><font color="#CCCCCC"> or PI over 2 and</font><font color="#E5E5E5"> PI</font><font color="#CCCCCC"> 33 so it</font>

258
00:13:36,200 --> 00:13:42,480
<font color="#CCCCCC">when you still had to support to the</font><font color="#E5E5E5"> 6</font>

259
00:13:39,030 --> 00:13:45,930
which was the only<font color="#E5E5E5"> version available it</font>

260
00:13:42,480 --> 00:13:49,800
was quite quite difficult<font color="#E5E5E5"> to you had</font>

261
00:13:45,930 --> 00:13:54,140
many make many many tiny changes and you

262
00:13:49,800 --> 00:13:57,449
also<font color="#CCCCCC"> needs back part like</font><font color="#E5E5E5"> unit</font><font color="#CCCCCC"> tests too</font>

263
00:13:54,140 --> 00:14:02,250
<font color="#CCCCCC">but also all others to</font><font color="#E5E5E5"> get new features</font>

264
00:13:57,450 --> 00:14:06,470
of item from Python 3 and on<font color="#E5E5E5"> the Python</font>

265
00:14:02,250 --> 00:14:09,770
<font color="#E5E5E5">3 side up to Python 3.2</font>

266
00:14:06,470 --> 00:14:13,670
there is using<font color="#CCCCCC"> the new prefix</font><font color="#E5E5E5"> or Unicode</font>

267
00:14:09,770 --> 00:14:16,430
string<font color="#E5E5E5"> whether syntax</font><font color="#CCCCCC"> they are and when</font>

268
00:14:13,670 --> 00:14:18,709
you<font color="#E5E5E5"> add to write code for Python 2 and</font>

269
00:14:16,430 --> 00:14:21,170
Python<font color="#CCCCCC"> free in the same file</font><font color="#E5E5E5"> not being</font>

270
00:14:18,710 --> 00:14:24,920
able to annotate<font color="#CCCCCC"> Unicode</font><font color="#E5E5E5"> string</font><font color="#CCCCCC"> whether</font>

271
00:14:21,170 --> 00:14:27,349
<font color="#CCCCCC">blocka issue for python to you</font>

272
00:14:24,920 --> 00:14:29,930
there was<font color="#CCCCCC"> a trick</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a you</font>

273
00:14:27,350 --> 00:14:32,210
function of the<font color="#CCCCCC"> six module and using</font>

274
00:14:29,930 --> 00:14:36,020
this function you<font color="#CCCCCC"> you get</font><font color="#E5E5E5"> a Unicode</font>

275
00:14:32,210 --> 00:14:37,970
string<font color="#E5E5E5"> but it means that instead</font><font color="#CCCCCC"> of just</font>

276
00:14:36,020 --> 00:14:41,060
writing a training you have<font color="#CCCCCC"> to call a</font>

277
00:14:37,970 --> 00:14:45,320
function<font color="#E5E5E5"> so it's kind of quite annoying</font>

278
00:14:41,060 --> 00:14:49,670
<font color="#E5E5E5">by surprising it's not the most</font>

279
00:14:45,320 --> 00:14:53,360
straightforward solution and by the way

280
00:14:49,670 --> 00:14:57,050
<font color="#E5E5E5">the sixth module is a module with many</font>

281
00:14:53,360 --> 00:14:59,510
small tools to write some code for

282
00:14:57,050 --> 00:15:01,670
<font color="#E5E5E5">working on Python to</font><font color="#CCCCCC"> anti-tumor free</font><font color="#E5E5E5"> so</font>

283
00:14:59,510 --> 00:15:04,160
depending<font color="#E5E5E5"> on the Python version you will</font>

284
00:15:01,670 --> 00:15:08,060
get it<font color="#E5E5E5"> codes the different functions</font><font color="#CCCCCC"> but</font>

285
00:15:04,160 --> 00:15:12,260
<font color="#CCCCCC">you</font><font color="#E5E5E5"> in your code you</font><font color="#CCCCCC"> only write one</font>

286
00:15:08,060 --> 00:15:19,310
constant function<font color="#CCCCCC"> call after out on</font><font color="#E5E5E5"> come</font>

287
00:15:12,260 --> 00:15:25,670
comes<font color="#E5E5E5"> the</font><font color="#CCCCCC"> called the</font><font color="#E5E5E5"> winter he started</font>

288
00:15:19,310 --> 00:15:28,750
with my<font color="#E5E5E5"> two free of shame chime chime in</font>

289
00:15:25,670 --> 00:15:32,680
2011 someone<font color="#E5E5E5"> created this websites</font>

290
00:15:28,750 --> 00:15:36,650
<font color="#E5E5E5">Zintan wasn't me to blame</font><font color="#CCCCCC"> people is</font>

291
00:15:32,680 --> 00:15:40,430
<font color="#E5E5E5">worth more to motivate people to start</font>

292
00:15:36,650 --> 00:15:42,890
to spend time<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Python free and you may</font>

293
00:15:40,430 --> 00:15:45,920
see that<font color="#E5E5E5"> on this picture that's almost</font>

294
00:15:42,890 --> 00:15:47,480
normal<font color="#CCCCCC"> June of the two thousand</font><font color="#E5E5E5"> most</font>

295
00:15:45,920 --> 00:15:51,500
popular module<font color="#CCCCCC"> were compatible with</font>

296
00:15:47,480 --> 00:15:57,560
<font color="#CCCCCC">pattern free so in 2011</font><font color="#E5E5E5"> we started very</font>

297
00:15:51,500 --> 00:16:00,470
from from for far and at this<font color="#CCCCCC"> times</font><font color="#E5E5E5"> I</font>

298
00:15:57,560 --> 00:16:02,469
identified three big big players on the

299
00:16:00,470 --> 00:16:06,320
Python community<font color="#E5E5E5"> three big applications</font>

300
00:16:02,470 --> 00:16:08,720
as I was a twisted twisted framer

301
00:16:06,320 --> 00:16:09,290
which is a promote to<font color="#E5E5E5"> write clients on</font>

302
00:16:08,720 --> 00:16:12,440
seven

303
00:16:09,290 --> 00:16:15,560
<font color="#E5E5E5">Network networking code</font><font color="#CCCCCC"> the weather</font>

304
00:16:12,440 --> 00:16:17,930
<font color="#CCCCCC">source material which</font><font color="#E5E5E5"> is a source</font>

305
00:16:15,560 --> 00:16:18,258
<font color="#CCCCCC">control management tool similar to to</font><font color="#E5E5E5"> do</font>

306
00:16:17,930 --> 00:16:22,670
<font color="#E5E5E5">it</font>

307
00:16:18,259 --> 00:16:26,029
<font color="#CCCCCC">git and mercurial is fully written</font><font color="#E5E5E5"> in</font>

308
00:16:22,670 --> 00:16:28,550
<font color="#E5E5E5">Python the service also</font><font color="#CCCCCC"> django which is</font>

309
00:16:26,029 --> 00:16:32,630
nowadays very famous but<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> 10 years</font>

310
00:16:28,550 --> 00:16:35,689
<font color="#E5E5E5">ago it wasn't and the problem</font><font color="#CCCCCC"> with</font>

311
00:16:32,630 --> 00:16:38,779
twisted is that it's only<font color="#CCCCCC"> exchange bytes</font>

312
00:16:35,690 --> 00:16:40,970
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it's network out and on the</font><font color="#E5E5E5"> wire</font>

313
00:16:38,779 --> 00:16:46,100
there is no<font color="#E5E5E5"> Unicode and the wire you</font>

314
00:16:40,970 --> 00:16:49,190
only have a flow of bytes so I didn't we

315
00:16:46,100 --> 00:16:52,759
use<font color="#E5E5E5"> Unicode as a first citizen class in</font>

316
00:16:49,190 --> 00:16:55,190
Python free was an issue<font color="#E5E5E5"> and it's a same</font>

317
00:16:52,759 --> 00:16:57,319
for mercury because<font color="#CCCCCC"> material doesn't</font>

318
00:16:55,190 --> 00:16:59,690
<font color="#E5E5E5">really try to understand all the content</font>

319
00:16:57,319 --> 00:17:04,010
of<font color="#E5E5E5"> the file in</font><font color="#CCCCCC"> materials the</font><font color="#E5E5E5"> content of</font>

320
00:16:59,690 --> 00:17:07,790
the file<font color="#E5E5E5"> but is basically bytes and</font>

321
00:17:04,010 --> 00:17:09,770
possible case of jingle<font color="#E5E5E5"> think that but</font>

322
00:17:07,790 --> 00:17:13,369
when<font color="#CCCCCC"> Python free was released at least</font>

323
00:17:09,770 --> 00:17:19,158
<font color="#E5E5E5">this</font><font color="#CCCCCC"> report of Unicode was not not so</font>

324
00:17:13,369 --> 00:17:23,049
good and because of all the issue of the

325
00:17:19,159 --> 00:17:25,220
<font color="#E5E5E5">migration of small Wars of small things</font>

326
00:17:23,049 --> 00:17:27,049
<font color="#E5E5E5">more and more people started to complain</font>

327
00:17:25,220 --> 00:17:30,320
<font color="#CCCCCC">that</font><font color="#E5E5E5"> maybe</font>

328
00:17:27,049 --> 00:17:32,870
<font color="#E5E5E5">patent-free wasn't a good idea</font><font color="#CCCCCC"> Python</font>

329
00:17:30,320 --> 00:17:35,149
feeders and<font color="#E5E5E5"> bringing anything because as</font>

330
00:17:32,870 --> 00:17:36,590
I explained if even if you<font color="#E5E5E5"> put your code</font>

331
00:17:35,150 --> 00:17:41,710
you still don't<font color="#E5E5E5"> have access</font><font color="#CCCCCC"> to new</font>

332
00:17:36,590 --> 00:17:44,360
features<font color="#CCCCCC"> and they</font><font color="#E5E5E5"> also complain of a</font>

333
00:17:41,710 --> 00:17:46,510
<font color="#E5E5E5">Unicode because when you have</font><font color="#CCCCCC"> a python 2</font>

334
00:17:44,360 --> 00:17:50,168
application

335
00:17:46,510 --> 00:17:52,390
you only process text<font color="#E5E5E5"> as</font><font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> and even</font>

336
00:17:50,169 --> 00:17:53,799
if you take some<font color="#E5E5E5"> two different</font><font color="#CCCCCC"> text</font><font color="#E5E5E5"> into</font>

337
00:17:52,390 --> 00:17:56,380
different language<font color="#E5E5E5"> into different</font>

338
00:17:53,799 --> 00:17:59,168
<font color="#E5E5E5">encodings</font><font color="#CCCCCC"> when you combine them there is</font>

339
00:17:56,380 --> 00:18:01,030
no<font color="#E5E5E5"> zero in the worst case</font><font color="#CCCCCC"> you get mangy</font>

340
00:17:59,169 --> 00:18:03,880
<font color="#E5E5E5">back which means</font><font color="#CCCCCC"> that you you get</font>

341
00:18:01,030 --> 00:18:06,100
strange letters<font color="#E5E5E5"> but it's not a new</font><font color="#CCCCCC"> issue</font>

342
00:18:03,880 --> 00:18:09,790
because as a programming<font color="#E5E5E5"> minute crash</font>

343
00:18:06,100 --> 00:18:13,209
with a hard fight an exception<font color="#CCCCCC"> so</font>

344
00:18:09,790 --> 00:18:14,129
according to<font color="#E5E5E5"> them but bytes it's the way</font>

345
00:18:13,210 --> 00:18:21,059
<font color="#CCCCCC">to go</font>

346
00:18:14,130 --> 00:18:25,540
<font color="#E5E5E5">it's the best</font><font color="#CCCCCC"> idea to</font><font color="#E5E5E5"> to store text and</font>

347
00:18:21,059 --> 00:18:31,750
even<font color="#E5E5E5"> worse the troll started to discuss</font>

348
00:18:25,540 --> 00:18:34,270
about an idea called Python 2.8 the

349
00:18:31,750 --> 00:18:36,010
rationale was<font color="#CCCCCC"> that since people are</font>

350
00:18:34,270 --> 00:18:39,639
still using<font color="#E5E5E5"> pattern</font><font color="#CCCCCC"> 2 in production</font>

351
00:18:36,010 --> 00:18:42,309
since<font color="#E5E5E5"> it just works</font><font color="#CCCCCC"> people are very</font>

352
00:18:39,640 --> 00:18:44,380
<font color="#E5E5E5">happy with patent - maybe we should</font>

353
00:18:42,309 --> 00:18:47,110
<font color="#E5E5E5">continue the development of Python</font><font color="#CCCCCC"> 2 and</font>

354
00:18:44,380 --> 00:18:49,419
just<font color="#E5E5E5"> add new features or maybe at least</font>

355
00:18:47,110 --> 00:18:53,979
<font color="#E5E5E5">back</font><font color="#CCCCCC"> post some features</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> Titan</font><font color="#E5E5E5"> free</font>

356
00:18:49,419 --> 00:18:57,309
to Python<font color="#E5E5E5"> - that's the C Python called</font>

357
00:18:53,980 --> 00:19:00,100
developer disagree with that<font color="#E5E5E5"> because of</font>

358
00:18:57,309 --> 00:19:03,190
thing is<font color="#E5E5E5"> that many people are volunteers</font>

359
00:19:00,100 --> 00:19:05,559
to<font color="#CCCCCC"> work on C Python and I didn't want to</font>

360
00:19:03,190 --> 00:19:08,830
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to duplicate the work between</font>

361
00:19:05,559 --> 00:19:12,190
Python<font color="#E5E5E5"> 2 and Python 3 so the C Python</font>

362
00:19:08,830 --> 00:19:14,168
developer<font color="#E5E5E5"> we did not want to duplicate</font>

363
00:19:12,190 --> 00:19:20,380
the work and<font color="#E5E5E5"> really focus on</font><font color="#CCCCCC"> the future</font>

364
00:19:14,169 --> 00:19:20,830
and help people to<font color="#E5E5E5"> me great but even</font><font color="#CCCCCC"> 5</font>

365
00:19:20,380 --> 00:19:24,910
years<font color="#E5E5E5"> ago</font>

366
00:19:20,830 --> 00:19:27,820
<font color="#CCCCCC">you're still you could still read</font>

367
00:19:24,910 --> 00:19:30,130
something like<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> people that</font>

368
00:19:27,820 --> 00:19:33,760
Python free will will<font color="#E5E5E5"> never take</font><font color="#CCCCCC"> up</font>

369
00:19:30,130 --> 00:19:35,080
<font color="#E5E5E5">because we only have to</font><font color="#CCCCCC"> 2% of people are</font>

370
00:19:33,760 --> 00:19:39,299
using Python 3

371
00:19:35,080 --> 00:19:42,370
maybe it was a bad idea<font color="#E5E5E5"> just forget it</font>

372
00:19:39,299 --> 00:19:45,280
but<font color="#CCCCCC"> the see</font><font color="#E5E5E5"> potential developers decided</font>

373
00:19:42,370 --> 00:19:48,280
that you know there<font color="#E5E5E5"> is no Python</font><font color="#CCCCCC"> 2.8</font>

374
00:19:45,280 --> 00:19:50,930
it's not going to happen because<font color="#CCCCCC"> we own</font>

375
00:19:48,280 --> 00:19:53,510
the language<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are the developer</font>

376
00:19:50,930 --> 00:19:56,450
we don't want to duplicate the walk<font color="#E5E5E5"> it</font>

377
00:19:53,510 --> 00:19:59,840
doesn't make sense to go backwards

378
00:19:56,450 --> 00:20:03,640
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of the Python watts the design</font>

379
00:19:59,840 --> 00:20:08,510
issues<font color="#CCCCCC"> we wanted to fix all these issues</font>

380
00:20:03,640 --> 00:20:12,830
so our pet was published in 2011<font color="#E5E5E5"> the pet</font>

381
00:20:08,510 --> 00:20:15,500
not found<font color="#CCCCCC"> 404 it's a Python - that's</font>

382
00:20:12,830 --> 00:20:19,010
<font color="#CCCCCC">eight urns</font><font color="#E5E5E5"> and really the schedule and</font>

383
00:20:15,500 --> 00:20:23,120
<font color="#E5E5E5">if</font><font color="#CCCCCC"> you look differently at numbers with</font>

384
00:20:19,010 --> 00:20:25,129
<font color="#CCCCCC">upper like</font><font color="#E5E5E5"> top top 50 most popular</font>

385
00:20:23,120 --> 00:20:28,550
project on<font color="#E5E5E5"> pi PI</font>

386
00:20:25,130 --> 00:20:30,350
in fact we are more close<font color="#CCCCCC"> to 80%</font><font color="#E5E5E5"> of</font>

387
00:20:28,550 --> 00:20:35,600
project which are compatible with Python

388
00:20:30,350 --> 00:20:38,449
free so it's not like<font color="#CCCCCC"> 2% and in my</font>

389
00:20:35,600 --> 00:20:41,090
<font color="#CCCCCC">opinion the best thing that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> did in</font>

390
00:20:38,450 --> 00:20:44,810
the last years was to extend the<font color="#CCCCCC"> support</font>

391
00:20:41,090 --> 00:20:47,149
for<font color="#E5E5E5"> Python to the</font><font color="#CCCCCC"> idea is to make it</font>

392
00:20:44,810 --> 00:20:49,850
<font color="#CCCCCC">very</font><font color="#E5E5E5"> clear</font><font color="#CCCCCC"> that we are not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

393
00:20:47,150 --> 00:20:53,600
abandon<font color="#E5E5E5"> people we are not going</font><font color="#CCCCCC"> to heal</font>

394
00:20:49,850 --> 00:20:56,270
<font color="#CCCCCC">Python to users</font><font color="#E5E5E5"> we really want wanted to</font>

395
00:20:53,600 --> 00:20:59,240
help<font color="#E5E5E5"> people to migrate and give time</font><font color="#CCCCCC"> to</font>

396
00:20:56,270 --> 00:21:03,290
people<font color="#CCCCCC"> - to emigrate</font><font color="#E5E5E5"> - don't force them</font>

397
00:20:59,240 --> 00:21:06,380
to do it right<font color="#E5E5E5"> now</font><font color="#CCCCCC"> so Guido van Rossum</font>

398
00:21:03,290 --> 00:21:09,620
<font color="#E5E5E5">decided to extend the end of life by</font>

399
00:21:06,380 --> 00:21:12,290
<font color="#E5E5E5">five years in fact it means to double</font><font color="#CCCCCC"> so</font>

400
00:21:09,620 --> 00:21:16,429
<font color="#CCCCCC">support time from five years to Daniel's</font>

401
00:21:12,290 --> 00:21:19,100
which is a longest support that we we

402
00:21:16,430 --> 00:21:21,980
have it in<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> and for your</font>

403
00:21:19,100 --> 00:21:26,300
<font color="#E5E5E5">information the end of life is very very</font>

404
00:21:21,980 --> 00:21:31,190
<font color="#E5E5E5">close now in two years after the cold</font>

405
00:21:26,300 --> 00:21:35,889
winter comes to<font color="#CCCCCC"> spring flowers</font><font color="#E5E5E5"> the</font>

406
00:21:31,190 --> 00:21:39,560
plants are growing things<font color="#E5E5E5"> are changing</font>

407
00:21:35,890 --> 00:21:42,800
<font color="#E5E5E5">so the first very good news is that we</font>

408
00:21:39,560 --> 00:21:45,200
fixed our first<font color="#E5E5E5"> a problem in Python</font>

409
00:21:42,800 --> 00:21:48,770
what is the first<font color="#E5E5E5"> problem in Python is</font>

410
00:21:45,200 --> 00:21:52,340
how can I install<font color="#E5E5E5"> something in Python</font>

411
00:21:48,770 --> 00:21:55,190
how can I install a dependency and<font color="#CCCCCC"> the</font>

412
00:21:52,340 --> 00:21:58,040
usual answer<font color="#E5E5E5"> was you just have to</font>

413
00:21:55,190 --> 00:21:59,450
install<font color="#E5E5E5"> setup tools</font><font color="#CCCCCC"> okay but I wanted to</font>

414
00:21:58,040 --> 00:22:01,820
install<font color="#E5E5E5"> something I have to install</font>

415
00:21:59,450 --> 00:22:04,460
something<font color="#E5E5E5"> else how can</font><font color="#CCCCCC"> I install setup</font>

416
00:22:01,820 --> 00:22:06,710
<font color="#E5E5E5">tools so you</font><font color="#CCCCCC"> have to find a new</font><font color="#E5E5E5"> Stella</font>

417
00:22:04,460 --> 00:22:09,790
on red<font color="#CCCCCC"> site to get</font><font color="#E5E5E5"> it on your computer</font>

418
00:22:06,710 --> 00:22:12,860
<font color="#E5E5E5">to</font><font color="#CCCCCC"> Rama's which means to have</font>

419
00:22:09,790 --> 00:22:16,670
<font color="#E5E5E5">administrator privilege which isn't</font>

420
00:22:12,860 --> 00:22:18,709
<font color="#E5E5E5">maybe not the case so it was annoying</font>

421
00:22:16,670 --> 00:22:20,450
for everybody<font color="#CCCCCC"> because it was very</font>

422
00:22:18,710 --> 00:22:22,220
difficult to install<font color="#E5E5E5"> set of</font><font color="#CCCCCC"> Torahs it</font>

423
00:22:20,450 --> 00:22:25,100
was very difficult to find<font color="#E5E5E5"> documentation</font>

424
00:22:22,220 --> 00:22:27,020
<font color="#E5E5E5">and there was not only a set of tools</font>

425
00:22:25,100 --> 00:22:33,919
<font color="#CCCCCC">but also distribute</font><font color="#E5E5E5"> and maybe other</font>

426
00:22:27,020 --> 00:22:38,450
competitors so in 2011<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tip 1.0 was</font>

427
00:22:33,920 --> 00:22:44,350
released and the<font color="#E5E5E5"> huge tree was in 2004</font>

428
00:22:38,450 --> 00:22:49,190
<font color="#E5E5E5">14 the</font><font color="#CCCCCC"> python 3 7 9</font><font color="#E5E5E5"> and python 3 4</font><font color="#CCCCCC"> now</font>

429
00:22:44,350 --> 00:22:51,800
<font color="#E5E5E5">comes with new module called</font><font color="#CCCCCC"> intro pip</font>

430
00:22:49,190 --> 00:22:55,220
<font color="#E5E5E5">it's not really</font><font color="#CCCCCC"> pip itself it's an</font>

431
00:22:51,800 --> 00:22:58,190
Easterner<font color="#E5E5E5"> to install pip and you fix the</font>

432
00:22:55,220 --> 00:23:01,550
bootstrap issue of installing<font color="#E5E5E5"> pip and</font>

433
00:22:58,190 --> 00:23:04,190
the thing is<font color="#E5E5E5"> that's since it's part of</font>

434
00:23:01,550 --> 00:23:06,200
the<font color="#CCCCCC"> stomach library people</font><font color="#E5E5E5"> stopped to</font>

435
00:23:04,190 --> 00:23:06,980
ask<font color="#CCCCCC"> of the answer what is what is</font><font color="#E5E5E5"> the</font>

436
00:23:06,200 --> 00:23:08,810
best option

437
00:23:06,980 --> 00:23:11,540
they just started<font color="#CCCCCC"> to use pip</font><font color="#E5E5E5"> because</font>

438
00:23:08,810 --> 00:23:14,750
<font color="#E5E5E5">it's it's part of python so slowly it</font>

439
00:23:11,540 --> 00:23:18,170
<font color="#E5E5E5">becomes a de-facto installer and now by</font>

440
00:23:14,750 --> 00:23:20,270
<font color="#E5E5E5">the Linux distribution and the windows</font>

441
00:23:18,170 --> 00:23:21,800
installer<font color="#CCCCCC"> so</font><font color="#E5E5E5"> my question is Tara all</font>

442
00:23:20,270 --> 00:23:25,460
come with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> pip</font>

443
00:23:21,800 --> 00:23:28,370
so you don't<font color="#E5E5E5"> have to to worry about that</font>

444
00:23:25,460 --> 00:23:31,070
and today it's much much<font color="#E5E5E5"> more</font><font color="#CCCCCC"> easier to</font>

445
00:23:28,370 --> 00:23:35,449
<font color="#E5E5E5">install something</font><font color="#CCCCCC"> twin seller external</font>

446
00:23:31,070 --> 00:23:38,419
dependency on<font color="#CCCCCC"> may be the</font><font color="#E5E5E5"> first approach</font>

447
00:23:35,450 --> 00:23:43,490
<font color="#E5E5E5">of dropping python 2 was not</font><font color="#CCCCCC"> a good</font><font color="#E5E5E5"> idea</font>

448
00:23:38,420 --> 00:23:46,310
<font color="#CCCCCC">so slowly</font><font color="#E5E5E5"> a new idea comes up but you</font>

449
00:23:43,490 --> 00:23:47,810
have<font color="#CCCCCC"> to understand that it takes</font><font color="#E5E5E5"> a lot</font>

450
00:23:46,310 --> 00:23:50,780
<font color="#E5E5E5">of time to understand that it was</font><font color="#CCCCCC"> a</font>

451
00:23:47,810 --> 00:23:53,820
mistake<font color="#CCCCCC"> it takes time</font><font color="#E5E5E5"> to</font>

452
00:23:50,780 --> 00:23:58,850
to<font color="#E5E5E5"> listen to users who</font><font color="#CCCCCC"> listen to</font>

453
00:23:53,820 --> 00:24:02,639
developers<font color="#E5E5E5"> so it took us a few years to</font>

454
00:23:58,850 --> 00:24:05,428
to come up with<font color="#E5E5E5"> this new approach so</font>

455
00:24:02,640 --> 00:24:07,140
maybe it seems very<font color="#CCCCCC"> simple today to say</font>

456
00:24:05,429 --> 00:24:10,860
that but you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to understand that we</font>

457
00:24:07,140 --> 00:24:13,830
it took<font color="#E5E5E5"> us time to to find this clever</font>

458
00:24:10,860 --> 00:24:19,020
<font color="#E5E5E5">ID is</font><font color="#CCCCCC"> that instead of</font><font color="#E5E5E5"> promoting root of</font>

459
00:24:13,830 --> 00:24:20,909
<font color="#E5E5E5">2 to 3 which was not a good idea</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> - we</font>

460
00:24:19,020 --> 00:24:23,700
should start to drop<font color="#CCCCCC"> right</font><font color="#E5E5E5"> inclusive</font>

461
00:24:20,910 --> 00:24:27,179
<font color="#CCCCCC">arts</font><font color="#E5E5E5"> may be a better idea is just to add</font>

462
00:24:23,700 --> 00:24:29,820
<font color="#E5E5E5">right on free supports and by doing</font><font color="#CCCCCC"> that</font>

463
00:24:27,179 --> 00:24:33,020
a lot<font color="#CCCCCC"> of things are changing because for</font>

464
00:24:29,820 --> 00:24:36,600
example<font color="#E5E5E5"> the migration</font><font color="#CCCCCC"> that is not a</font>

465
00:24:33,020 --> 00:24:39,600
single shot<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> port your</font>

466
00:24:36,600 --> 00:24:42,570
<font color="#E5E5E5">wall application at once to</font><font color="#CCCCCC"> patent-free</font>

467
00:24:39,600 --> 00:24:45,149
you can do it by<font color="#E5E5E5"> small pieces one by one</font>

468
00:24:42,570 --> 00:24:48,360
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> work on a</font><font color="#E5E5E5"> single directory you</font>

469
00:24:45,150 --> 00:24:51,120
can<font color="#E5E5E5"> put a single dependency and by doing</font>

470
00:24:48,360 --> 00:24:54,209
that<font color="#E5E5E5"> you can also check for regression</font>

471
00:24:51,120 --> 00:24:56,520
<font color="#E5E5E5">on Python - if you have</font><font color="#CCCCCC"> two tests and</font>

472
00:24:54,210 --> 00:25:00,900
<font color="#CCCCCC">are</font><font color="#E5E5E5"> running a CI running to check your</font>

473
00:24:56,520 --> 00:25:04,350
code<font color="#E5E5E5"> and we started to see new tools</font>

474
00:25:00,900 --> 00:25:07,290
like<font color="#E5E5E5"> modernize the stool</font><font color="#CCCCCC"> is a text your</font>

475
00:25:04,350 --> 00:25:09,299
Python 2 code and add course<font color="#CCCCCC"> to the six</font>

476
00:25:07,290 --> 00:25:11,370
<font color="#CCCCCC">module to make</font><font color="#E5E5E5"> it compatible with Python</font>

477
00:25:09,299 --> 00:25:13,879
<font color="#CCCCCC">free</font><font color="#E5E5E5"> so you keep the vital to support</font>

478
00:25:11,370 --> 00:25:17,280
<font color="#E5E5E5">and you get vital free support for free</font>

479
00:25:13,880 --> 00:25:19,860
and there is another project that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> bro</font>

480
00:25:17,280 --> 00:25:23,160
it's called sixer<font color="#CCCCCC"> this one has a</font>

481
00:25:19,860 --> 00:25:26,129
different<font color="#E5E5E5"> story</font><font color="#CCCCCC"> I'm working on OpenStack</font>

482
00:25:23,160 --> 00:25:29,220
<font color="#E5E5E5">if you don't know OpenStack it's a giant</font>

483
00:25:26,130 --> 00:25:34,559
pile<font color="#CCCCCC"> of code</font><font color="#E5E5E5"> - minions lines of code</font><font color="#CCCCCC"> so</font>

484
00:25:29,220 --> 00:25:36,630
it's huge and<font color="#E5E5E5"> fourpence</font><font color="#CCCCCC"> tired I</font><font color="#E5E5E5"> have to</font>

485
00:25:34,559 --> 00:25:39,870
start with evangelize<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> free</font>

486
00:25:36,630 --> 00:25:42,179
because even four years ago people were

487
00:25:39,870 --> 00:25:46,429
still<font color="#E5E5E5"> not convinced that they have to</font>

488
00:25:42,179 --> 00:25:49,680
post code to<font color="#E5E5E5"> Python free so</font>

489
00:25:46,430 --> 00:25:52,170
when I started<font color="#E5E5E5"> to wrote giant patches</font>

490
00:25:49,680 --> 00:25:54,270
<font color="#E5E5E5">using modern eyes or other tools they</font>

491
00:25:52,170 --> 00:25:55,950
didn't want even<font color="#CCCCCC"> to look at the full</font>

492
00:25:54,270 --> 00:25:58,920
<font color="#CCCCCC">request because</font><font color="#E5E5E5"> it was a giant full</font>

493
00:25:55,950 --> 00:26:01,050
request<font color="#CCCCCC"> and you have to know that</font><font color="#E5E5E5"> in</font>

494
00:25:58,920 --> 00:26:04,650
OpenStack things are moving very very

495
00:26:01,050 --> 00:26:07,350
quickly<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's a huge project with</font>

496
00:26:04,650 --> 00:26:10,530
I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> 2000</font><font color="#E5E5E5"> people or more walking on</font>

497
00:26:07,350 --> 00:26:13,169
the<font color="#E5E5E5"> same code base</font><font color="#CCCCCC"> so if you generate a</font>

498
00:26:10,530 --> 00:26:15,660
pull request<font color="#CCCCCC"> in a few hours later you</font>

499
00:26:13,170 --> 00:26:17,880
<font color="#E5E5E5">get</font><font color="#CCCCCC"> a conflict so you have to wait to</font>

500
00:26:15,660 --> 00:26:21,090
fix the conflict<font color="#E5E5E5"> and push back and wait</font>

501
00:26:17,880 --> 00:26:24,240
was a new review<font color="#E5E5E5"> and it's not going to</font>

502
00:26:21,090 --> 00:26:25,139
finish for<font color="#E5E5E5"> six</font><font color="#CCCCCC"> I took a different</font>

503
00:26:24,240 --> 00:26:29,280
approach

504
00:26:25,140 --> 00:26:31,050
instead of making all changes at once<font color="#CCCCCC"> in</font>

505
00:26:29,280 --> 00:26:34,110
<font color="#E5E5E5">fact you can</font><font color="#CCCCCC"> just make a single change</font>

506
00:26:31,050 --> 00:26:36,870
<font color="#CCCCCC">like just add parentheses to</font><font color="#E5E5E5"> prints to</font>

507
00:26:34,110 --> 00:26:39,209
make the<font color="#CCCCCC"> prints statement compatible</font>

508
00:26:36,870 --> 00:26:41,639
with<font color="#CCCCCC"> fighting free and by doing</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

509
00:26:39,210 --> 00:26:43,980
was able to produce very small pull

510
00:26:41,640 --> 00:26:48,120
requests<font color="#E5E5E5"> which are straightforward to</font>

511
00:26:43,980 --> 00:26:50,280
review and with very small<font color="#E5E5E5"> pull requests</font>

512
00:26:48,120 --> 00:26:54,060
quickly<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to run unit tests on</font>

513
00:26:50,280 --> 00:26:55,649
Python free and now basically<font color="#E5E5E5"> the world</font>

514
00:26:54,060 --> 00:26:58,139
<font color="#E5E5E5">open side</font><font color="#CCCCCC"> project</font>

515
00:26:55,650 --> 00:27:00,420
as a unit<font color="#E5E5E5"> test working on Python free</font>

516
00:26:58,140 --> 00:27:03,030
and even<font color="#E5E5E5"> today we have functional tests</font>

517
00:27:00,420 --> 00:27:07,800
<font color="#E5E5E5">running on Python 3 so we are very close</font>

518
00:27:03,030 --> 00:27:11,160
<font color="#E5E5E5">to our full support</font><font color="#CCCCCC"> when you have a very</font>

519
00:27:07,800 --> 00:27:13,770
large code days like OpenStack you get

520
00:27:11,160 --> 00:27:17,550
new issues<font color="#E5E5E5"> there because for</font><font color="#CCCCCC"> example</font>

521
00:27:13,770 --> 00:27:20,010
even huge companies the people<font color="#CCCCCC"> are</font>

522
00:27:17,550 --> 00:27:22,950
moving<font color="#E5E5E5"> from</font><font color="#CCCCCC"> one team to another or quit</font>

523
00:27:20,010 --> 00:27:25,640
<font color="#CCCCCC">the company or leave the project four of</font>

524
00:27:22,950 --> 00:27:29,100
the reason it's called<font color="#E5E5E5"> the turnover and</font>

525
00:27:25,640 --> 00:27:31,380
when you lose original authors of the

526
00:27:29,100 --> 00:27:34,050
code is<font color="#CCCCCC"> very</font><font color="#E5E5E5"> difficult to modify</font><font color="#CCCCCC"> a code</font>

527
00:27:31,380 --> 00:27:36,660
that you<font color="#CCCCCC"> don't understand especially if</font>

528
00:27:34,050 --> 00:27:39,750
you don't<font color="#E5E5E5"> have unit tests so maybe</font>

529
00:27:36,660 --> 00:27:43,200
before<font color="#E5E5E5"> starting to make changes to add</font>

530
00:27:39,750 --> 00:27:45,600
<font color="#CCCCCC">patapri support maybe</font><font color="#E5E5E5"> you you have</font>

531
00:27:43,200 --> 00:27:47,820
<font color="#E5E5E5">better time</font><font color="#CCCCCC"> to work on testing your code</font>

532
00:27:45,600 --> 00:27:50,129
days just to make<font color="#CCCCCC"> sure that you are not</font>

533
00:27:47,820 --> 00:27:52,830
<font color="#CCCCCC">breaking anything</font>

534
00:27:50,129 --> 00:27:56,488
the drug box<font color="#CCCCCC"> company decided to take to</font>

535
00:27:52,830 --> 00:27:58,889
take<font color="#E5E5E5"> another approach is</font><font color="#CCCCCC"> that as I</font>

536
00:27:56,489 --> 00:28:01,289
wanted<font color="#E5E5E5"> to annotate the</font><font color="#CCCCCC"> type because if</font>

537
00:27:58,889 --> 00:28:04,709
you<font color="#E5E5E5"> are coming</font><font color="#CCCCCC"> from a language like Java</font>

538
00:28:01,289 --> 00:28:07,889
<font color="#E5E5E5">you can the type of all function</font>

539
00:28:04,710 --> 00:28:10,049
parameters is very explicit<font color="#CCCCCC"> and the</font>

540
00:28:07,889 --> 00:28:13,080
benefit of that is that you can run a

541
00:28:10,049 --> 00:28:19,700
static analysis to make<font color="#E5E5E5"> sure that you</font>

542
00:28:13,080 --> 00:28:23,039
pass the right type so by doing that you

543
00:28:19,700 --> 00:28:25,799
<font color="#E5E5E5">you get a lot of bugs as the</font><font color="#CCCCCC"> computation</font>

544
00:28:23,039 --> 00:28:27,359
time<font color="#E5E5E5"> so you you make your code better</font><font color="#CCCCCC"> it</font>

545
00:28:25,799 --> 00:28:30,899
works better

546
00:28:27,359 --> 00:28:34,590
that's a few<font color="#E5E5E5"> years</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> I was not told</font>

547
00:28:30,899 --> 00:28:38,580
why don't we just add the ability<font color="#E5E5E5"> to</font>

548
00:28:34,590 --> 00:28:41,879
annotate<font color="#E5E5E5"> type but on purpose</font>

549
00:28:38,580 --> 00:28:45,989
<font color="#CCCCCC">we</font><font color="#E5E5E5"> decided to not standardized how to to</font>

550
00:28:41,879 --> 00:28:47,820
annotate types which means that you can

551
00:28:45,989 --> 00:28:51,929
<font color="#E5E5E5">use a string you can use an expression</font>

552
00:28:47,820 --> 00:28:54,359
<font color="#CCCCCC">you can write whatever you want</font><font color="#E5E5E5"> but you</font>

553
00:28:51,929 --> 00:28:57,320
<font color="#CCCCCC">are</font><font color="#E5E5E5"> not able to use your own custom</font><font color="#CCCCCC"> a</font>

554
00:28:54,359 --> 00:29:02,639
<font color="#CCCCCC">custom</font><font color="#E5E5E5"> annotation to validate the code</font>

555
00:28:57,320 --> 00:29:05,850
<font color="#E5E5E5">so what we what they did is first to</font>

556
00:29:02,639 --> 00:29:08,729
using you with the help<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Widow</font><font color="#E5E5E5"> van</font>

557
00:29:05,850 --> 00:29:13,139
<font color="#E5E5E5">Rossum and others they brought a module</font>

558
00:29:08,730 --> 00:29:16,220
called<font color="#E5E5E5"> typing typing is a stone that way</font>

559
00:29:13,139 --> 00:29:17,508
to describe annotation to say that you

560
00:29:16,220 --> 00:29:21,019
[Music]

561
00:29:17,509 --> 00:29:25,409
<font color="#E5E5E5">to have a list of integrals you have</font>

562
00:29:21,019 --> 00:29:27,809
<font color="#E5E5E5">very specific syntax for that</font><font color="#CCCCCC"> and there</font>

563
00:29:25,409 --> 00:29:31,320
<font color="#CCCCCC">is a different syntax</font><font color="#E5E5E5"> from more evolved</font>

564
00:29:27,809 --> 00:29:33,869
<font color="#E5E5E5">types so they started to write</font><font color="#CCCCCC"> on a lot</font>

565
00:29:31,320 --> 00:29:37,350
<font color="#CCCCCC">of a specification for for all these</font>

566
00:29:33,869 --> 00:29:41,220
annotations<font color="#E5E5E5"> and in parallel a different</font>

567
00:29:37,350 --> 00:29:43,859
team was working<font color="#CCCCCC"> on a static analyzer</font><font color="#E5E5E5"> to</font>

568
00:29:41,220 --> 00:29:47,490
use this annotation<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> that</font>

569
00:29:43,859 --> 00:29:51,840
everything is everything is<font color="#CCCCCC"> working</font>

570
00:29:47,490 --> 00:29:55,260
and the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> idea for</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> free is</font><font color="#E5E5E5"> that</font>

571
00:29:51,840 --> 00:29:56,639
they started<font color="#CCCCCC"> to annotate type to make</font>

572
00:29:55,260 --> 00:30:02,760
sure that as I<font color="#CCCCCC"> don't introduce</font>

573
00:29:56,640 --> 00:30:05,910
regressions and<font color="#E5E5E5"> to</font><font color="#CCCCCC"> touch issues another</font>

574
00:30:02,760 --> 00:30:12,510
approach to make the<font color="#CCCCCC"> emigration easier</font>

575
00:30:05,910 --> 00:30:14,940
<font color="#CCCCCC">is that when when you look at individual</font>

576
00:30:12,510 --> 00:30:17,340
changes in vitam free they are very very

577
00:30:14,940 --> 00:30:20,460
small like just add parentheses<font color="#CCCCCC"> a</font><font color="#E5E5E5"> print</font>

578
00:30:17,340 --> 00:30:23,730
<font color="#CCCCCC">it's not a big</font><font color="#E5E5E5"> deal</font><font color="#CCCCCC"> but if you look at</font>

579
00:30:20,460 --> 00:30:26,310
each individual changes<font color="#CCCCCC"> all together in</font>

580
00:30:23,730 --> 00:30:31,290
<font color="#E5E5E5">fact the gap between python 2 and python</font>

581
00:30:26,310 --> 00:30:35,159
3 is quite big<font color="#CCCCCC"> so what we try to do is</font>

582
00:30:31,290 --> 00:30:37,950
to<font color="#E5E5E5"> to reduce</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> gap by building</font><font color="#CCCCCC"> bridges</font><font color="#E5E5E5"> a</font>

583
00:30:35,160 --> 00:30:42,360
bridge between the<font color="#CCCCCC"> two versions</font><font color="#E5E5E5"> to make</font>

584
00:30:37,950 --> 00:30:47,370
the migration<font color="#E5E5E5"> easier for example in</font>

585
00:30:42,360 --> 00:30:49,290
<font color="#CCCCCC">Python</font><font color="#E5E5E5"> 3 we introduced the new prefix it</font>

586
00:30:47,370 --> 00:30:54,000
was very difficult<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> C Python</font>

587
00:30:49,290 --> 00:30:56,040
<font color="#E5E5E5">developer</font><font color="#CCCCCC"> to understand</font><font color="#E5E5E5"> that because we</font>

588
00:30:54,000 --> 00:30:58,290
<font color="#E5E5E5">like the purity of the language</font><font color="#CCCCCC"> we</font>

589
00:30:56,040 --> 00:31:01,649
wanted<font color="#E5E5E5"> to have a language varies</font><font color="#CCCCCC"> very</font>

590
00:30:58,290 --> 00:31:03,870
regular are very simple to<font color="#CCCCCC"> learn and</font><font color="#E5E5E5"> it</font>

591
00:31:01,650 --> 00:31:06,450
does not<font color="#E5E5E5"> make sense to annotate Unicode</font>

592
00:31:03,870 --> 00:31:11,820
<font color="#E5E5E5">because everything is already a Unicode</font>

593
00:31:06,450 --> 00:31:14,760
string<font color="#CCCCCC"> by</font><font color="#E5E5E5"> default so it took a few years</font>

594
00:31:11,820 --> 00:31:18,120
<font color="#E5E5E5">so for year after the</font><font color="#CCCCCC"> release of</font><font color="#E5E5E5"> by Tom</font>

595
00:31:14,760 --> 00:31:20,160
<font color="#E5E5E5">Frieden</font><font color="#CCCCCC"> zero to accept that ok maybe it</font>

596
00:31:18,120 --> 00:31:23,189
wasn't the<font color="#E5E5E5"> best idea</font><font color="#CCCCCC"> to remove the</font>

597
00:31:20,160 --> 00:31:26,370
prefix<font color="#CCCCCC"> maybe to write a single</font><font color="#E5E5E5"> code base</font>

598
00:31:23,190 --> 00:31:29,640
for Python 2 and Python 3 using the<font color="#CCCCCC"> new</font>

599
00:31:26,370 --> 00:31:34,020
prefix<font color="#CCCCCC"> ok maybe it makes sense</font><font color="#E5E5E5"> and let's</font>

600
00:31:29,640 --> 00:31:36,690
do that<font color="#CCCCCC"> and trust me it was a really big</font>

601
00:31:34,020 --> 00:31:40,290
change<font color="#E5E5E5"> for</font><font color="#CCCCCC"> me because before</font><font color="#E5E5E5"> battlefield</font>

602
00:31:36,690 --> 00:31:43,210
<font color="#E5E5E5">3 it was very very painful to to</font>

603
00:31:40,290 --> 00:31:47,080
annotate 6<font color="#E5E5E5"> that Hugh scores of function</font>

604
00:31:43,210 --> 00:31:49,360
spring ice<font color="#CCCCCC"> proofs bad it was difficult</font>

605
00:31:47,080 --> 00:31:54,039
to explain<font color="#E5E5E5"> people why you have to call a</font>

606
00:31:49,360 --> 00:31:59,199
function<font color="#CCCCCC"> just</font><font color="#E5E5E5"> to get a</font><font color="#CCCCCC"> spring so it was</font>

607
00:31:54,039 --> 00:32:03,450
a<font color="#E5E5E5"> very good</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> and in 2015</font><font color="#CCCCCC"> the Python</font>

608
00:31:59,200 --> 00:32:07,990
3.5 introduced introduced back in fact

609
00:32:03,450 --> 00:32:09,940
the formatting<font color="#E5E5E5"> of bytes the this</font>

610
00:32:07,990 --> 00:32:12,970
specific change is very useful for

611
00:32:09,940 --> 00:32:14,799
<font color="#E5E5E5">projects</font><font color="#CCCCCC"> like twisted because we seed</font>

612
00:32:12,970 --> 00:32:20,230
<font color="#E5E5E5">only used bytes for the networking</font>

613
00:32:14,799 --> 00:32:22,870
<font color="#E5E5E5">clients and servers and before this</font>

614
00:32:20,230 --> 00:32:25,840
<font color="#E5E5E5">change to format a spring you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

615
00:32:22,870 --> 00:32:29,260
take your your bytes decode your bytes

616
00:32:25,840 --> 00:32:31,360
to get<font color="#CCCCCC"> Unicode to process Unicode to</font>

617
00:32:29,260 --> 00:32:35,408
format the string and encode back

618
00:32:31,360 --> 00:32:38,020
<font color="#CCCCCC">Unicode to bytes</font><font color="#E5E5E5"> and people like the</font>

619
00:32:35,409 --> 00:32:41,140
<font color="#E5E5E5">twisted developer doesn't understand why</font>

620
00:32:38,020 --> 00:32:44,350
you have<font color="#CCCCCC"> to decode an anchored if you</font>

621
00:32:41,140 --> 00:32:47,200
<font color="#E5E5E5">only</font><font color="#CCCCCC"> wanted bytes doesn't</font><font color="#E5E5E5"> make sense to</font>

622
00:32:44,350 --> 00:32:50,158
make<font color="#CCCCCC"> these few useless changes</font>

623
00:32:47,200 --> 00:32:53,830
operations<font color="#E5E5E5"> because it's also slower to</font>

624
00:32:50,159 --> 00:32:58,000
<font color="#E5E5E5">decoding encode and doing the directly</font>

625
00:32:53,830 --> 00:33:01,418
<font color="#E5E5E5">formatting on bytes so this tiny change</font>

626
00:32:58,000 --> 00:33:04,360
<font color="#E5E5E5">and block the immigration of twisted for</font>

627
00:33:01,419 --> 00:33:08,049
example at<font color="#E5E5E5"> least it was much more easier</font>

628
00:33:04,360 --> 00:33:10,600
for<font color="#CCCCCC"> them to pause the code and on the</font>

629
00:33:08,049 --> 00:33:13,658
<font color="#CCCCCC">pythons</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> 2 side</font><font color="#E5E5E5"> we also made</font>

630
00:33:10,600 --> 00:33:17,649
changes<font color="#E5E5E5"> to simplify this immigration</font>

631
00:33:13,659 --> 00:33:19,929
what we did is to to add warnings<font color="#CCCCCC"> it</font>

632
00:33:17,649 --> 00:33:22,539
means that when<font color="#E5E5E5"> you enable</font><font color="#CCCCCC"> these</font>

633
00:33:19,929 --> 00:33:25,720
warnings<font color="#E5E5E5"> running your codes your Python</font>

634
00:33:22,539 --> 00:33:28,000
2 code<font color="#E5E5E5"> start to complain</font><font color="#CCCCCC"> that maybe this</font>

635
00:33:25,720 --> 00:33:30,970
code doesn't<font color="#E5E5E5"> look correct in Python</font><font color="#CCCCCC"> 3</font>

636
00:33:28,000 --> 00:33:34,409
<font color="#E5E5E5">maybe you can look at this code</font><font color="#CCCCCC"> and do</font>

637
00:33:30,970 --> 00:33:34,409
something to fix it and

638
00:33:34,630 --> 00:33:39,009
the good thing<font color="#CCCCCC"> with that is that you</font>

639
00:33:37,120 --> 00:33:41,258
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> have to wait until all your code</font>

640
00:33:39,009 --> 00:33:45,120
days<font color="#CCCCCC"> all your dependencies</font><font color="#E5E5E5"> is brought it</font>

641
00:33:41,259 --> 00:33:49,230
<font color="#E5E5E5">to Python 3 Python</font><font color="#CCCCCC"> free you can start by</font>

642
00:33:45,120 --> 00:33:55,449
looking at the oldest<font color="#CCCCCC"> morning's</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> to</font>

643
00:33:49,230 --> 00:33:58,779
<font color="#CCCCCC">to to fix them one by one so you can see</font>

644
00:33:55,450 --> 00:34:03,100
<font color="#CCCCCC">that we we made changes</font><font color="#E5E5E5"> of both sides to</font>

645
00:33:58,779 --> 00:34:04,570
reduce the gap<font color="#E5E5E5"> and another another</font><font color="#CCCCCC"> thing</font>

646
00:34:03,100 --> 00:34:06,850
which doesn't<font color="#E5E5E5"> come from C Python</font>

647
00:34:04,570 --> 00:34:09,759
directly but more from<font color="#CCCCCC"> the community is</font>

648
00:34:06,850 --> 00:34:13,210
<font color="#E5E5E5">that more</font><font color="#CCCCCC"> people started to bug</font><font color="#E5E5E5"> ports</font>

649
00:34:09,760 --> 00:34:16,149
<font color="#CCCCCC">Python</font><font color="#E5E5E5"> free features to Python</font><font color="#CCCCCC"> 2 because</font>

650
00:34:13,210 --> 00:34:20,740
technically sometimes it was<font color="#E5E5E5"> just</font>

651
00:34:16,149 --> 00:34:23,109
possible<font color="#E5E5E5"> to do it and by doing</font><font color="#CCCCCC"> that you</font>

652
00:34:20,739 --> 00:34:25,750
can<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can start</font><font color="#E5E5E5"> to use new Python 3</font>

653
00:34:23,109 --> 00:34:29,918
features because they are now<font color="#E5E5E5"> available</font>

654
00:34:25,750 --> 00:34:34,149
on<font color="#CCCCCC"> titan titan ii so for examples in him</font>

655
00:34:29,918 --> 00:34:36,969
<font color="#CCCCCC">3 3 4 is a new module</font><font color="#E5E5E5"> a name of Python</font>

656
00:34:34,149 --> 00:34:41,440
3.4<font color="#E5E5E5"> so it becomes possible to use new</font>

657
00:34:36,969 --> 00:34:46,618
new features like<font color="#CCCCCC"> that and after the</font>

658
00:34:41,440 --> 00:34:46,619
<font color="#E5E5E5">spring comes</font><font color="#CCCCCC"> summertime</font>

659
00:34:47,260 --> 00:34:52,480
time to enjoy<font color="#E5E5E5"> so to come</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to the</font>

660
00:34:50,500 --> 00:34:56,560
<font color="#E5E5E5">previous slide of the Python</font><font color="#CCCCCC"> Wall of</font>

661
00:34:52,480 --> 00:34:59,170
<font color="#E5E5E5">shame</font><font color="#CCCCCC"> we only had nine percent of the</font>

662
00:34:56,560 --> 00:35:03,460
module which were<font color="#CCCCCC"> compatible with</font><font color="#E5E5E5"> Python</font>

663
00:34:59,170 --> 00:35:06,340
free and the author of<font color="#E5E5E5"> the website built</font>

664
00:35:03,460 --> 00:35:08,200
this<font color="#CCCCCC"> website to motivate people and one</font>

665
00:35:06,340 --> 00:35:11,260
day he decided<font color="#CCCCCC"> to change the name of</font><font color="#E5E5E5"> the</font>

666
00:35:08,200 --> 00:35:16,839
website to<font color="#E5E5E5"> Python Python free world of</font>

667
00:35:11,260 --> 00:35:21,820
<font color="#E5E5E5">superpower</font><font color="#CCCCCC"> and today we are</font><font color="#E5E5E5"> very close</font>

668
00:35:16,840 --> 00:35:23,650
to<font color="#E5E5E5"> 100 percent</font><font color="#CCCCCC"> of projects of mm most</font>

669
00:35:21,820 --> 00:35:27,160
popular<font color="#E5E5E5"> projects compatible with Python</font>

670
00:35:23,650 --> 00:35:30,460
free<font color="#E5E5E5"> in practice we</font><font color="#CCCCCC"> we miss something</font>

671
00:35:27,160 --> 00:35:32,710
like<font color="#E5E5E5"> 10 projects but it's not really an</font>

672
00:35:30,460 --> 00:35:35,530
issue because the stem project are

673
00:35:32,710 --> 00:35:39,220
usually deprecated or<font color="#E5E5E5"> we place with a</font>

674
00:35:35,530 --> 00:35:42,760
better<font color="#E5E5E5"> solution a new</font><font color="#CCCCCC"> way to fix the</font>

675
00:35:39,220 --> 00:35:45,009
issue or just<font color="#E5E5E5"> a fork of</font><font color="#CCCCCC"> the project for</font>

676
00:35:42,760 --> 00:35:49,180
<font color="#CCCCCC">example I</font><font color="#E5E5E5"> might seek well clients is not</font>

677
00:35:45,010 --> 00:35:51,640
profitable<font color="#CCCCCC"> but you have my sequel sorry</font>

678
00:35:49,180 --> 00:35:53,230
it<font color="#E5E5E5"> was my sequel Python which is not</font>

679
00:35:51,640 --> 00:35:56,700
comfortable<font color="#E5E5E5"> but you have my sequel</font>

680
00:35:53,230 --> 00:35:56,700
clients which is<font color="#CCCCCC"> a patchwork</font>

681
00:35:57,450 --> 00:36:04,680
and you have to know that<font color="#CCCCCC"> Python credit</font>

682
00:35:59,820 --> 00:36:06,930
6 is<font color="#CCCCCC"> now faster than bytom 2.7 here you</font>

683
00:36:04,680 --> 00:36:09,960
can see that the<font color="#CCCCCC"> Green Line</font><font color="#E5E5E5"> are smaller</font>

684
00:36:06,930 --> 00:36:13,319
<font color="#E5E5E5">in fact the time use timing is</font>

685
00:36:09,960 --> 00:36:16,010
normalized<font color="#E5E5E5"> on Python</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> so if it's</font>

686
00:36:13,320 --> 00:36:19,680
smaller<font color="#E5E5E5"> it means that</font><font color="#CCCCCC"> python 2 is pasta</font>

687
00:36:16,010 --> 00:36:24,540
<font color="#E5E5E5">and this is just the most significant</font>

688
00:36:19,680 --> 00:36:26,089
benchmark where the difference is<font color="#E5E5E5"> is</font>

689
00:36:24,540 --> 00:36:30,420
largest

690
00:36:26,090 --> 00:36:33,360
so you can see that on many benchmark

691
00:36:30,420 --> 00:36:37,880
especially on a synth sin<font color="#E5E5E5"> pi it's way</font>

692
00:36:33,360 --> 00:36:40,320
way faster<font color="#E5E5E5"> up to</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> times faster</font><font color="#CCCCCC"> in fact</font>

693
00:36:37,880 --> 00:36:44,220
<font color="#CCCCCC">so to give you</font><font color="#E5E5E5"> an idea</font><font color="#CCCCCC"> of the</font>

694
00:36:40,320 --> 00:36:47,310
performance work that we<font color="#E5E5E5"> did there was a</font>

695
00:36:44,220 --> 00:36:51,060
<font color="#E5E5E5">talk at previous Pike on us</font>

696
00:36:47,310 --> 00:36:53,970
made by<font color="#E5E5E5"> Instagram because Instagram is</font>

697
00:36:51,060 --> 00:36:54,980
working hard on posting the<font color="#CCCCCC"> codebase to</font>

698
00:36:53,970 --> 00:36:57,930
<font color="#E5E5E5">patent-free</font>

699
00:36:54,980 --> 00:36:59,820
for different reason<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> they</font>

700
00:36:57,930 --> 00:37:02,509
would<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> use a sink IO and I think</font>

701
00:36:59,820 --> 00:37:05,850
I<font color="#E5E5E5"> will only use</font><font color="#CCCCCC"> a balloon</font><font color="#E5E5E5"> fighting free</font>

702
00:37:02,510 --> 00:37:09,810
but<font color="#CCCCCC"> also</font><font color="#E5E5E5"> Python free as less less burg</font>

703
00:37:05,850 --> 00:37:13,950
it's much better as I didn't<font color="#E5E5E5"> want to to</font>

704
00:37:09,810 --> 00:37:16,680
postpone the technical depth and very

705
00:37:13,950 --> 00:37:19,410
good<font color="#E5E5E5"> feedback from Instagram is</font><font color="#CCCCCC"> that not</font>

706
00:37:16,680 --> 00:37:21,720
only<font color="#E5E5E5"> I reported a huge for days because</font>

707
00:37:19,410 --> 00:37:27,060
Instagram for your<font color="#E5E5E5"> information is</font>

708
00:37:21,720 --> 00:37:30,930
<font color="#E5E5E5">something like 700 millions users so</font>

709
00:37:27,060 --> 00:37:33,270
it's a very very<font color="#CCCCCC"> very large project with</font>

710
00:37:30,930 --> 00:37:35,790
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> users and it's fully written in</font>

711
00:37:33,270 --> 00:37:38,520
Python<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's not not a food or smart</font>

712
00:37:35,790 --> 00:37:40,590
thing and because they have a lot of

713
00:37:38,520 --> 00:37:44,190
users and because<font color="#E5E5E5"> Instagram as</font>

714
00:37:40,590 --> 00:37:46,230
competitors they are not<font color="#E5E5E5"> able to start</font>

715
00:37:44,190 --> 00:37:49,020
<font color="#E5E5E5">from scratch</font><font color="#CCCCCC"> the default language or</font>

716
00:37:46,230 --> 00:37:52,620
restaurant from scratch on Python<font color="#E5E5E5"> free</font>

717
00:37:49,020 --> 00:37:53,890
<font color="#E5E5E5">so what they did is to post code</font><font color="#CCCCCC"> piece</font>

718
00:37:52,620 --> 00:37:57,069
<font color="#CCCCCC">by piece</font>

719
00:37:53,890 --> 00:37:59,830
and they succeeded to<font color="#CCCCCC"> port the card so</font>

720
00:37:57,070 --> 00:38:04,260
at the end you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> it on on the CPU</font>

721
00:37:59,830 --> 00:38:08,850
side<font color="#CCCCCC"> CPU in this case is</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> usable</font><font color="#E5E5E5"> the</font>

722
00:38:04,260 --> 00:38:12,910
<font color="#CCCCCC">WSGI</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Django on this side they saved</font>

723
00:38:08,850 --> 00:38:16,210
<font color="#CCCCCC">12% of CPU just by moving the code to</font>

724
00:38:12,910 --> 00:38:19,029
Python 3<font color="#E5E5E5"> so they are using less hardware</font>

725
00:38:16,210 --> 00:38:22,030
and trust me for Instagram it means

726
00:38:19,030 --> 00:38:24,820
something because<font color="#E5E5E5"> when you have a seven</font>

727
00:38:22,030 --> 00:38:29,020
and<font color="#E5E5E5"> a hundred minions users</font><font color="#CCCCCC"> Hardware</font>

728
00:38:24,820 --> 00:38:29,680
becomes very<font color="#CCCCCC"> expensive but on the memory</font>

729
00:38:29,020 --> 00:38:34,090
side

730
00:38:29,680 --> 00:38:36,669
they also saved<font color="#CCCCCC"> 30%</font><font color="#E5E5E5"> from the memory so</font>

731
00:38:34,090 --> 00:38:39,790
again it's very very very important for

732
00:38:36,670 --> 00:38:46,960
them on of the memories most<font color="#CCCCCC"> the saving</font>

733
00:38:39,790 --> 00:38:49,750
was on the<font color="#E5E5E5"> salary side to show you or so</font>

734
00:38:46,960 --> 00:38:52,870
why you should you should move<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Python</font>

735
00:38:49,750 --> 00:38:56,190
free<font color="#CCCCCC"> you have to know that</font><font color="#E5E5E5"> I started to</font>

736
00:38:52,870 --> 00:38:59,170
collect<font color="#E5E5E5"> a list of long bags of Python -</font>

737
00:38:56,190 --> 00:39:03,270
even if I'm working on a<font color="#E5E5E5"> sip I turn and</font>

738
00:38:59,170 --> 00:39:06,960
I we we all want<font color="#E5E5E5"> to fight include to be</font>

739
00:39:03,270 --> 00:39:10,110
<font color="#E5E5E5">to be very stable</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> or perfectly</font>

740
00:39:06,960 --> 00:39:14,980
sometimes we are<font color="#CCCCCC"> not able to</font><font color="#E5E5E5"> fix bugs</font>

741
00:39:10,110 --> 00:39:18,270
<font color="#E5E5E5">because I would say that Python 2.7</font><font color="#CCCCCC"> is</font>

742
00:39:14,980 --> 00:39:22,320
super stable<font color="#E5E5E5"> because we</font>

743
00:39:18,270 --> 00:39:25,759
we have a<font color="#CCCCCC"> support</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 10 years</font><font color="#E5E5E5"> we have</font>

744
00:39:22,320 --> 00:39:29,580
large companies<font color="#E5E5E5"> based on Python Python</font><font color="#CCCCCC"> -</font>

745
00:39:25,760 --> 00:39:31,470
we we didn't want<font color="#E5E5E5"> to break the language</font>

746
00:39:29,580 --> 00:39:36,360
<font color="#E5E5E5">we</font><font color="#CCCCCC"> didn't break we want to break</font>

747
00:39:31,470 --> 00:39:38,759
applications so<font color="#CCCCCC"> it's the backward</font>

748
00:39:36,360 --> 00:39:41,460
compatibility is even more important<font color="#E5E5E5"> in</font>

749
00:39:38,760 --> 00:39:44,990
Python tools I mean<font color="#E5E5E5"> Python free and</font>

750
00:39:41,460 --> 00:39:48,750
another issue is<font color="#E5E5E5"> also technical because</font>

751
00:39:44,990 --> 00:39:51,450
for example<font color="#E5E5E5"> item 2 supports a lot of</font>

752
00:39:48,750 --> 00:39:55,170
<font color="#E5E5E5">legacy platforms and we don't want to</font>

753
00:39:51,450 --> 00:39:59,009
lose<font color="#E5E5E5"> their supports we</font><font color="#CCCCCC"> supports</font><font color="#E5E5E5"> a multi</font>

754
00:39:55,170 --> 00:40:02,250
multiple<font color="#E5E5E5"> spreading implementation while</font>

755
00:39:59,010 --> 00:40:04,830
<font color="#CCCCCC">python 3 only supports</font><font color="#E5E5E5"> piece read and</font>

756
00:40:02,250 --> 00:40:07,440
<font color="#E5E5E5">windows for all these reasons</font><font color="#CCCCCC"> it's</font>

757
00:40:04,830 --> 00:40:11,100
<font color="#CCCCCC">become very</font><font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> fix the exam so</font>

758
00:40:07,440 --> 00:40:13,170
to give you an example<font color="#CCCCCC"> unicode we cannot</font>

759
00:40:11,100 --> 00:40:13,920
change<font color="#E5E5E5"> unicode in python so it's just</font>

760
00:40:13,170 --> 00:40:16,050
not<font color="#E5E5E5"> possible</font>

761
00:40:13,920 --> 00:40:21,360
<font color="#E5E5E5">because</font><font color="#CCCCCC"> people rely on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> current</font>

762
00:40:16,050 --> 00:40:24,720
<font color="#E5E5E5">behavior</font><font color="#CCCCCC"> another example is the python</font>

763
00:40:21,360 --> 00:40:28,590
<font color="#CCCCCC">dict</font><font color="#E5E5E5"> type as a vulnerability where you</font>

764
00:40:24,720 --> 00:40:32,250
can make a denial of service on a server

765
00:40:28,590 --> 00:40:34,440
when you inject a specific HTTP header

766
00:40:32,250 --> 00:40:39,210
<font color="#E5E5E5">you are able to crash the server with a</font>

767
00:40:34,440 --> 00:40:41,609
very small payload<font color="#E5E5E5"> and when quantum is</font>

768
00:40:39,210 --> 00:40:44,520
you for that is to randomize<font color="#E5E5E5"> the ash</font>

769
00:40:41,609 --> 00:40:46,920
function<font color="#E5E5E5"> because the attacker is not no</font>

770
00:40:44,520 --> 00:40:50,640
longer able<font color="#CCCCCC"> to generate a specific</font>

771
00:40:46,920 --> 00:40:54,020
<font color="#CCCCCC">pattern to</font><font color="#E5E5E5"> crash the dick type but in</font>

772
00:40:50,640 --> 00:40:57,540
<font color="#CCCCCC">python true we were not able to enables</font>

773
00:40:54,020 --> 00:41:00,960
the protection by default again<font color="#E5E5E5"> because</font>

774
00:40:57,540 --> 00:41:03,869
of the backward compatibility<font color="#E5E5E5"> and the</font>

775
00:41:00,960 --> 00:41:07,230
<font color="#CCCCCC">sub process</font><font color="#E5E5E5"> module is not</font><font color="#CCCCCC"> spread safe</font>

776
00:41:03,869 --> 00:41:10,080
<font color="#E5E5E5">maybe on you are not aware</font><font color="#CCCCCC"> of that but</font>

777
00:41:07,230 --> 00:41:13,220
when you start to get such issue is very

778
00:41:10,080 --> 00:41:15,000
painful<font color="#E5E5E5"> because you may know that</font>

779
00:41:13,220 --> 00:41:17,430
multi-threading is<font color="#E5E5E5"> not some</font>

780
00:41:15,000 --> 00:41:20,190
<font color="#E5E5E5">deterministic it depends on the timing</font>

781
00:41:17,430 --> 00:41:23,430
of the<font color="#CCCCCC"> Sur process so you may or you may</font>

782
00:41:20,190 --> 00:41:25,820
not get<font color="#CCCCCC"> the</font><font color="#E5E5E5"> crash very difficult so to</font>

783
00:41:23,430 --> 00:41:27,690
find the<font color="#CCCCCC"> relationship</font><font color="#E5E5E5"> between the</font>

784
00:41:25,820 --> 00:41:31,410
misreading<font color="#CCCCCC"> of the crash</font>

785
00:41:27,690 --> 00:41:34,650
<font color="#E5E5E5">and we cannot fix that the recursive</font>

786
00:41:31,410 --> 00:41:36,810
lock is not senior safe<font color="#CCCCCC"> a senior is for</font>

787
00:41:34,650 --> 00:41:38,760
example<font color="#CCCCCC"> when you spawn</font><font color="#E5E5E5"> a subprocess</font><font color="#CCCCCC"> and</font>

788
00:41:36,810 --> 00:41:41,370
the<font color="#CCCCCC"> sir process completes you get back</font>

789
00:41:38,760 --> 00:41:45,150
an education with a<font color="#CCCCCC"> eunuch senior and</font>

790
00:41:41,370 --> 00:41:49,080
when you get<font color="#CCCCCC"> a senior if</font><font color="#E5E5E5"> you get it on</font>

791
00:41:45,150 --> 00:41:52,170
<font color="#E5E5E5">the</font><font color="#CCCCCC"> bad balance</font><font color="#E5E5E5"> the recursive lock</font><font color="#CCCCCC"> may</font>

792
00:41:49,080 --> 00:41:55,950
<font color="#CCCCCC">be become inconsistent so it's also</font><font color="#E5E5E5"> very</font>

793
00:41:52,170 --> 00:41:57,840
annoying issue because you<font color="#E5E5E5"> don't you are</font>

794
00:41:55,950 --> 00:42:00,470
not able to expect seniors you cannot

795
00:41:57,840 --> 00:42:03,750
control seniors<font color="#E5E5E5"> so it varies so painful</font>

796
00:42:00,470 --> 00:42:06,149
the last issue is<font color="#CCCCCC"> that even if you</font>

797
00:42:03,750 --> 00:42:09,840
modify<font color="#CCCCCC"> your code</font><font color="#E5E5E5"> to use monotonic lock</font>

798
00:42:06,150 --> 00:42:12,480
to avoid issue with winter on the<font color="#E5E5E5"> summer</font>

799
00:42:09,840 --> 00:42:15,780
<font color="#E5E5E5">time the DST change when you add or</font>

800
00:42:12,480 --> 00:42:20,190
remove one over even if you make your

801
00:42:15,780 --> 00:42:24,720
code safe<font color="#CCCCCC"> Python internal still use as a</font>

802
00:42:20,190 --> 00:42:28,170
system<font color="#CCCCCC"> clock which has the issue but on</font>

803
00:42:24,720 --> 00:42:32,009
the bright side of<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> free we fix</font>

804
00:42:28,170 --> 00:42:34,230
the issue<font color="#E5E5E5"> like we added the time time</font>

805
00:42:32,010 --> 00:42:37,220
<font color="#E5E5E5">dot monotonic clock which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> now</font>

806
00:42:34,230 --> 00:42:40,260
available<font color="#CCCCCC"> on all platforms</font>

807
00:42:37,220 --> 00:42:42,890
another more tricky challenge<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that so</font>

808
00:42:40,260 --> 00:42:45,660
the file descriptor<font color="#CCCCCC"> has no in</font>

809
00:42:42,890 --> 00:42:48,509
uninhabitable<font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that when you</font>

810
00:42:45,660 --> 00:42:52,140
spawn a process using<font color="#CCCCCC"> fork an</font><font color="#E5E5E5"> exec or</font>

811
00:42:48,510 --> 00:42:54,570
<font color="#CCCCCC">the process you you don't innervate</font><font color="#E5E5E5"> the</font>

812
00:42:52,140 --> 00:42:59,279
file that that are open in the<font color="#E5E5E5"> parent</font>

813
00:42:54,570 --> 00:43:03,330
process because in Python<font color="#E5E5E5"> 2 if you open</font>

814
00:42:59,280 --> 00:43:05,940
a file and spawn a process even<font color="#E5E5E5"> if you</font>

815
00:43:03,330 --> 00:43:08,670
<font color="#E5E5E5">close your file in the parents and if</font>

816
00:43:05,940 --> 00:43:10,410
it's<font color="#E5E5E5"> still open in</font><font color="#CCCCCC"> the shell process the</font>

817
00:43:08,670 --> 00:43:13,850
file<font color="#E5E5E5"> is not closed technically in the</font>

818
00:43:10,410 --> 00:43:16,069
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> kernel so the data may not be flat</font>

819
00:43:13,850 --> 00:43:19,759
<font color="#CCCCCC">you may not be able to</font><font color="#E5E5E5"> remove the file</font>

820
00:43:16,070 --> 00:43:23,050
on Windows<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> a lot of very</font>

821
00:43:19,760 --> 00:43:26,030
annoying issues because<font color="#E5E5E5"> of that and</font>

822
00:43:23,050 --> 00:43:28,850
something<font color="#E5E5E5"> more quickly critical is that</font>

823
00:43:26,030 --> 00:43:31,430
if you open<font color="#CCCCCC"> solidify like file with</font>

824
00:43:28,850 --> 00:43:34,880
passwords or<font color="#E5E5E5"> solitaire</font>

825
00:43:31,430 --> 00:43:36,140
critical information if you<font color="#CCCCCC"> inner 8 the</font>

826
00:43:34,880 --> 00:43:38,960
file descriptor<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the child process</font>

827
00:43:36,140 --> 00:43:42,379
<font color="#CCCCCC">technically is able to read this file or</font>

828
00:43:38,960 --> 00:43:44,630
<font color="#E5E5E5">even to write into this file so we</font>

829
00:43:42,380 --> 00:43:48,440
decided<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> make them non</font>

830
00:43:44,630 --> 00:43:50,510
inheritable by default<font color="#CCCCCC"> - just to fix the</font>

831
00:43:48,440 --> 00:43:53,780
issue for<font color="#E5E5E5"> everyone and</font><font color="#CCCCCC"> you don't have</font><font color="#E5E5E5"> to</font>

832
00:43:50,510 --> 00:43:57,470
<font color="#CCCCCC">modify your application for that another</font>

833
00:43:53,780 --> 00:44:02,450
change of<font color="#E5E5E5"> backward-compatible change is</font>

834
00:43:57,470 --> 00:44:04,870
that in<font color="#E5E5E5"> python 3.5 we changed how we</font>

835
00:44:02,450 --> 00:44:08,660
understand<font color="#E5E5E5"> yours because previously</font>

836
00:44:04,870 --> 00:44:10,580
<font color="#E5E5E5">youyou was able to to get an exception</font>

837
00:44:08,660 --> 00:44:15,049
<font color="#E5E5E5">in python when your function is</font>

838
00:44:10,580 --> 00:44:17,060
interrupted<font color="#E5E5E5"> but when when you get it you</font>

839
00:44:15,050 --> 00:44:19,820
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to restart manually your function</font>

840
00:44:17,060 --> 00:44:22,100
<font color="#E5E5E5">until you get no senior and we decided</font>

841
00:44:19,820 --> 00:44:25,750
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> it as a syllable</font><font color="#E5E5E5"> so you don't</font>

842
00:44:22,100 --> 00:44:29,630
have to worry about<font color="#E5E5E5"> that anymore</font><font color="#CCCCCC"> and</font>

843
00:44:25,750 --> 00:44:31,640
about<font color="#CCCCCC"> 5 file</font><font color="#E5E5E5"> descriptor</font><font color="#CCCCCC"> on non heritable</font>

844
00:44:29,630 --> 00:44:34,010
<font color="#CCCCCC">I wrote the PAP and it</font><font color="#E5E5E5"> took something</font>

845
00:44:31,640 --> 00:44:36,980
like<font color="#CCCCCC"> eight year eight months took</font><font color="#E5E5E5"> my</font>

846
00:44:34,010 --> 00:44:39,800
beans<font color="#CCCCCC"> Guido</font><font color="#E5E5E5"> van Rossum and</font><font color="#CCCCCC"> what he said</font>

847
00:44:36,980 --> 00:44:42,100
is that we are aware<font color="#CCCCCC"> of the code</font>

848
00:44:39,800 --> 00:44:45,500
breakage<font color="#E5E5E5"> this is likely to close and</font>

849
00:44:42,100 --> 00:44:50,299
doing it<font color="#E5E5E5"> anyway is was a good of the</font>

850
00:44:45,500 --> 00:44:53,390
<font color="#E5E5E5">main client to give you an</font><font color="#CCCCCC"> idea of</font>

851
00:44:50,300 --> 00:44:56,120
<font color="#E5E5E5">Python free we we are not less than</font>

852
00:44:53,390 --> 00:44:58,609
<font color="#CCCCCC">twenty</font><font color="#E5E5E5"> one new models</font><font color="#CCCCCC"> like the very</font>

853
00:44:56,120 --> 00:45:01,310
famous<font color="#E5E5E5"> as in Kyoto as an asynchronous</font>

854
00:44:58,610 --> 00:45:04,400
programming the new<font color="#CCCCCC"> in home</font><font color="#E5E5E5"> the popular</font>

855
00:45:01,310 --> 00:45:08,390
<font color="#E5E5E5">path lead module for file</font><font color="#CCCCCC"> names</font><font color="#E5E5E5"> but also</font>

856
00:45:04,400 --> 00:45:12,590
the very cool unit unit<font color="#CCCCCC"> tested</font><font color="#E5E5E5"> mock to</font>

857
00:45:08,390 --> 00:45:14,600
mock functions to<font color="#E5E5E5"> write more DD test in</font>

858
00:45:12,590 --> 00:45:19,010
fact since Python 3.6 you are the

859
00:45:14,600 --> 00:45:22,069
amazing<font color="#CCCCCC"> F string if you are not coming</font>

860
00:45:19,010 --> 00:45:23,720
<font color="#E5E5E5">from</font><font color="#CCCCCC"> pattern it seems</font><font color="#E5E5E5"> very stupid</font><font color="#CCCCCC"> that</font>

861
00:45:22,070 --> 00:45:26,510
it's a new thing<font color="#CCCCCC"> but</font>

862
00:45:23,720 --> 00:45:28,848
it took us a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of years</font><font color="#E5E5E5"> to say that</font>

863
00:45:26,510 --> 00:45:31,970
<font color="#CCCCCC">okay it was maybe a</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> idea to</font><font color="#E5E5E5"> support</font>

864
00:45:28,849 --> 00:45:35,839
at you<font color="#CCCCCC"> it's a new way to form a spring</font>

865
00:45:31,970 --> 00:45:38,689
<font color="#E5E5E5">you say with no percent a percent</font>

866
00:45:35,839 --> 00:45:42,109
operator or<font color="#E5E5E5"> dot formats function it's</font>

867
00:45:38,690 --> 00:45:44,630
just<font color="#CCCCCC"> F string and string is formatted in</font>

868
00:45:42,109 --> 00:45:48,020
place you can<font color="#E5E5E5"> pass a variable but you</font>

869
00:45:44,630 --> 00:45:50,450
<font color="#E5E5E5">can also pass you can technically it's a</font>

870
00:45:48,020 --> 00:45:56,300
Python statements<font color="#E5E5E5"> so you can call method</font>

871
00:45:50,450 --> 00:45:58,640
you can write operation we added a lot

872
00:45:56,300 --> 00:46:00,980
<font color="#CCCCCC">of</font><font color="#E5E5E5"> things to the language itself to the</font>

873
00:45:58,640 --> 00:46:03,828
<font color="#E5E5E5">Python language for</font><font color="#CCCCCC"> asynchronous</font>

874
00:46:00,980 --> 00:46:06,290
<font color="#CCCCCC">programming for I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> so the the</font>

875
00:46:03,829 --> 00:46:10,220
we first we added the yield from which

876
00:46:06,290 --> 00:46:13,609
delegates generator<font color="#E5E5E5"> from Amazon</font><font color="#CCCCCC"> subdue</font>

877
00:46:10,220 --> 00:46:16,819
narrator as asynch and await keywords

878
00:46:13,609 --> 00:46:19,369
were added to make<font color="#CCCCCC"> a</font><font color="#E5E5E5"> synchronous code</font>

879
00:46:16,819 --> 00:46:23,029
look more straightforward more simple

880
00:46:19,369 --> 00:46:25,810
and we we also added<font color="#CCCCCC"> support</font><font color="#E5E5E5"> for a</font>

881
00:46:23,030 --> 00:46:30,530
synchronous generators and<font color="#E5E5E5"> a synchronous</font>

882
00:46:25,810 --> 00:46:35,000
comprehensions<font color="#E5E5E5"> there are way way more</font>

883
00:46:30,530 --> 00:46:38,210
new<font color="#CCCCCC"> vitam fee new features new syntax is</font>

884
00:46:35,000 --> 00:46:40,130
like<font color="#E5E5E5"> keywords only arguments like the</font>

885
00:46:38,210 --> 00:46:44,780
print<font color="#E5E5E5"> function which no take arguments</font>

886
00:46:40,130 --> 00:46:46,670
<font color="#E5E5E5">like file on and you can use star on</font>

887
00:46:44,780 --> 00:46:50,960
double start to unpack<font color="#E5E5E5"> list</font><font color="#CCCCCC"> in</font>

888
00:46:46,670 --> 00:46:54,260
dictionary which is<font color="#E5E5E5"> really cool</font><font color="#CCCCCC"> and a</font>

889
00:46:50,960 --> 00:46:56,240
very<font color="#E5E5E5"> small thing but which is again</font>

890
00:46:54,260 --> 00:46:58,220
obvious is that<font color="#E5E5E5"> no</font><font color="#CCCCCC"> you are allowed to</font>

891
00:46:56,240 --> 00:47:01,368
write underscore to make<font color="#E5E5E5"> number of</font>

892
00:46:58,220 --> 00:47:04,490
literals<font color="#E5E5E5"> more readable</font><font color="#CCCCCC"> you can annotate</font>

893
00:47:01,369 --> 00:47:07,970
the type of<font color="#E5E5E5"> a variable</font><font color="#CCCCCC"> you can write</font>

894
00:47:04,490 --> 00:47:11,799
multiple with<font color="#CCCCCC"> not</font><font color="#E5E5E5"> exponential statements</font>

895
00:47:07,970 --> 00:47:14,299
on the single line<font color="#E5E5E5"> we get the new matrix</font>

896
00:47:11,800 --> 00:47:15,910
multiplication<font color="#E5E5E5"> which is something very</font>

897
00:47:14,300 --> 00:47:20,740
very<font color="#CCCCCC"> useful when you</font>

898
00:47:15,910 --> 00:47:23,230
<font color="#CCCCCC">an umpire</font><font color="#E5E5E5"> so with all these changes and</font>

899
00:47:20,740 --> 00:47:25,598
<font color="#CCCCCC">the successful</font><font color="#E5E5E5"> immigration</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> the</font>

900
00:47:23,230 --> 00:47:29,619
question is is it<font color="#CCCCCC"> time to bury</font>

901
00:47:25,599 --> 00:47:34,269
item<font color="#CCCCCC"> two in fact people</font><font color="#E5E5E5"> already started</font>

902
00:47:29,619 --> 00:47:37,240
to do it<font color="#E5E5E5"> like a fedora 2023</font><font color="#CCCCCC"> and the</font>

903
00:47:34,269 --> 00:47:40,808
<font color="#E5E5E5">latest</font><font color="#CCCCCC"> version of</font><font color="#E5E5E5"> Ubuntu already as no</font>

904
00:47:37,240 --> 00:47:43,839
vital<font color="#CCCCCC"> to</font><font color="#E5E5E5"> in the base system</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case</font>

905
00:47:40,809 --> 00:47:45,670
it means that<font color="#E5E5E5"> if you pull</font><font color="#CCCCCC"> up install a</font>

906
00:47:43,839 --> 00:47:48,609
Python<font color="#CCCCCC"> 2 application your still pool</font>

907
00:47:45,670 --> 00:47:51,039
<font color="#E5E5E5">fighting</font><font color="#CCCCCC"> to but in the best</font><font color="#E5E5E5"> system is</font>

908
00:47:48,609 --> 00:47:53,140
there is no fighting<font color="#CCCCCC"> - and you have</font><font color="#E5E5E5"> to</font>

909
00:47:51,039 --> 00:47:55,900
know<font color="#CCCCCC"> that you going to and fellow are</font>

910
00:47:53,140 --> 00:47:58,480
<font color="#CCCCCC">are very keen of Python</font><font color="#E5E5E5"> a lot of things</font>

911
00:47:55,900 --> 00:48:01,390
are written<font color="#E5E5E5"> in Python so it means that</font>

912
00:47:58,480 --> 00:48:04,180
we<font color="#CCCCCC"> already did most</font><font color="#E5E5E5"> of the work the</font>

913
00:48:01,390 --> 00:48:07,210
respite<font color="#E5E5E5"> of</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> statements which which</font>

914
00:48:04,180 --> 00:48:10,210
<font color="#CCCCCC">is a combined timeline of</font><font color="#E5E5E5"> all scientific</font>

915
00:48:07,210 --> 00:48:12,700
projects to show when the Python free

916
00:48:10,210 --> 00:48:14,829
support<font color="#E5E5E5"> will be dropped as I would like</font>

917
00:48:12,700 --> 00:48:17,169
<font color="#E5E5E5">to coordinate to</font><font color="#CCCCCC"> make it clear that's</font>

918
00:48:14,829 --> 00:48:21,119
you you have to start<font color="#E5E5E5"> working</font><font color="#CCCCCC"> python</font>

919
00:48:17,170 --> 00:48:24,670
free<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Python Python clock is a</font>

920
00:48:21,119 --> 00:48:30,369
countdown<font color="#E5E5E5"> until the death of Python</font><font color="#CCCCCC"> tool</font>

921
00:48:24,670 --> 00:48:34,630
and last year two big players of Titan

922
00:48:30,369 --> 00:48:38,470
which are<font color="#E5E5E5"> I 506 and</font><font color="#CCCCCC"> Django to decided to</font>

923
00:48:34,630 --> 00:48:41,079
<font color="#CCCCCC">wrap fight some free supports so I think</font>

924
00:48:38,470 --> 00:48:43,569
<font color="#E5E5E5">it's it's a huge thing for Python</font>

925
00:48:41,079 --> 00:48:47,769
because Django is very very popular<font color="#CCCCCC"> and</font>

926
00:48:43,569 --> 00:48:49,420
<font color="#E5E5E5">the thing the</font><font color="#CCCCCC"> thing that's even</font><font color="#E5E5E5"> Django</font>

927
00:48:47,769 --> 00:48:51,549
with logical<font color="#E5E5E5"> disease a lot of</font>

928
00:48:49,420 --> 00:48:56,849
dependencies<font color="#E5E5E5"> is able to move to pattern</font>

929
00:48:51,549 --> 00:48:56,849
free means something in<font color="#CCCCCC"> mean something</font>

930
00:49:08,760 --> 00:49:20,010
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think we are done</font><font color="#CCCCCC"> now seriously</font>

931
00:49:14,730 --> 00:49:22,440
for<font color="#E5E5E5"> Python for you have</font><font color="#CCCCCC"> tuned to we</font>

932
00:49:20,010 --> 00:49:25,980
learn<font color="#E5E5E5"> from our mistake</font><font color="#CCCCCC"> we understood</font>

933
00:49:22,440 --> 00:49:30,960
that it was<font color="#CCCCCC"> not the best</font><font color="#E5E5E5"> way to be great</font>

934
00:49:25,980 --> 00:49:33,390
compare them<font color="#CCCCCC"> to to</font><font color="#E5E5E5"> Python free and we we</font>

935
00:49:30,960 --> 00:49:35,850
will do<font color="#E5E5E5"> it very</font><font color="#CCCCCC"> very differently</font><font color="#E5E5E5"> I think</font>

936
00:49:33,390 --> 00:49:39,120
that<font color="#CCCCCC"> pythons</font><font color="#E5E5E5"> power will be as a</font><font color="#CCCCCC"> gtk for</font>

937
00:49:35,850 --> 00:49:41,240
another project<font color="#E5E5E5"> it will be just just the</font>

938
00:49:39,120 --> 00:49:44,880
next release<font color="#E5E5E5"> not backward-compatible</font>

939
00:49:41,240 --> 00:49:46,819
release as was<font color="#CCCCCC"> button</font><font color="#E5E5E5"> free we will use</font>

940
00:49:44,880 --> 00:49:50,130
exactly the same<font color="#E5E5E5"> deep regression process</font>

941
00:49:46,820 --> 00:49:52,980
that we are using<font color="#E5E5E5"> between</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> minor</font>

942
00:49:50,130 --> 00:49:55,920
<font color="#E5E5E5">part and free release like</font><font color="#CCCCCC"> three four</font>

943
00:49:52,980 --> 00:49:58,740
<font color="#CCCCCC">three five three six so it means that</font><font color="#E5E5E5"> we</font>

944
00:49:55,920 --> 00:50:02,490
start to deprecate<font color="#E5E5E5"> generate warnings and</font>

945
00:49:58,740 --> 00:50:04,979
only the release after<font color="#E5E5E5"> or sometimes it's</font>

946
00:50:02,490 --> 00:50:08,129
two<font color="#E5E5E5"> minutes later we start to remove the</font>

947
00:50:04,980 --> 00:50:10,200
code so we we are<font color="#E5E5E5"> giving more time to</font>

948
00:50:08,130 --> 00:50:12,690
<font color="#CCCCCC">people to</font><font color="#E5E5E5"> follow the code but</font><font color="#CCCCCC"> also to</font>

949
00:50:10,200 --> 00:50:14,730
communicate<font color="#E5E5E5"> on our changes on</font>

950
00:50:12,690 --> 00:50:18,900
<font color="#E5E5E5">documentation but also on the</font><font color="#CCCCCC"> codes</font>

951
00:50:14,730 --> 00:50:31,140
<font color="#E5E5E5">itself thank</font>

952
00:50:18,900 --> 00:50:31,140
[Applause]

