1
00:00:06,000 --> 00:00:10,780
and I timed<font color="#E5E5E5"> the talk and it was 42</font>

2
00:00:08,680 --> 00:00:14,680
<font color="#E5E5E5">minutes so I think I'm in perfect shape</font>

3
00:00:10,780 --> 00:00:17,740
<font color="#CCCCCC">my name is</font><font color="#E5E5E5"> Brian Duggan</font><font color="#CCCCCC"> and I'm going to</font>

4
00:00:14,680 --> 00:00:19,270
talk about<font color="#E5E5E5"> Perl 6 on Jupiter I want to</font>

5
00:00:17,740 --> 00:00:21,459
do a little poll first how many<font color="#E5E5E5"> people</font>

6
00:00:19,270 --> 00:00:24,670
have heard of Jupiter Jupiter notebooks

7
00:00:21,460 --> 00:00:28,720
or ipython notebooks or similar<font color="#CCCCCC"> things</font>

8
00:00:24,670 --> 00:00:31,030
<font color="#CCCCCC">okay about 50/50 good and how many</font>

9
00:00:28,720 --> 00:00:36,070
people<font color="#CCCCCC"> use</font><font color="#E5E5E5"> Perl 6 or know something</font>

10
00:00:31,030 --> 00:00:39,190
<font color="#CCCCCC">about it</font><font color="#E5E5E5"> or okay also okay good okay</font><font color="#CCCCCC"> so</font>

11
00:00:36,070 --> 00:00:41,469
my<font color="#CCCCCC"> name is Brian Duggan I'm here from</font>

12
00:00:39,190 --> 00:00:43,599
<font color="#E5E5E5">the</font><font color="#CCCCCC"> u.s.</font><font color="#E5E5E5"> from Philadelphia I work for a</font>

13
00:00:41,469 --> 00:00:46,870
company called prompt works<font color="#E5E5E5"> we are a</font>

14
00:00:43,600 --> 00:00:50,280
consulting<font color="#CCCCCC"> company</font><font color="#E5E5E5"> we do projects in a</font>

15
00:00:46,870 --> 00:00:55,199
variety<font color="#E5E5E5"> of languages Perl Python Ruby</font>

16
00:00:50,280 --> 00:00:59,889
JavaScript<font color="#E5E5E5"> elixir go</font>

17
00:00:55,199 --> 00:01:02,799
you're a polyglot<font color="#E5E5E5"> organization</font><font color="#CCCCCC"> this is</font>

18
00:00:59,889 --> 00:01:03,879
an outline of my talk<font color="#E5E5E5"> so I'm going</font><font color="#CCCCCC"> to</font>

19
00:01:02,799 --> 00:01:05,640
<font color="#E5E5E5">start off</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> little introduction</font>

20
00:01:03,879 --> 00:01:08,860
<font color="#CCCCCC">about Jupiter</font><font color="#E5E5E5"> the Jupiter system</font>

21
00:01:05,640 --> 00:01:11,020
<font color="#E5E5E5">notebooks and the console client</font><font color="#CCCCCC"> some of</font>

22
00:01:08,860 --> 00:01:13,630
the architecture for Jupiter what's it

23
00:01:11,020 --> 00:01:15,490
all about<font color="#CCCCCC"> and then I'm going to talk</font>

24
00:01:13,630 --> 00:01:18,100
<font color="#E5E5E5">about some of</font><font color="#CCCCCC"> the specifics of the Perl</font>

25
00:01:15,490 --> 00:01:21,969
6<font color="#CCCCCC"> kernel that</font><font color="#E5E5E5"> I've been working on</font>

26
00:01:18,100 --> 00:01:24,038
including<font color="#CCCCCC"> Auto completion and</font><font color="#E5E5E5"> then I'll</font>

27
00:01:21,969 --> 00:01:26,109
get<font color="#CCCCCC"> into</font><font color="#E5E5E5"> after talking about</font><font color="#CCCCCC"> the console</font>

28
00:01:24,039 --> 00:01:28,030
<font color="#CCCCCC">I'll talk about notebooks</font><font color="#E5E5E5"> I'll talk</font>

29
00:01:26,109 --> 00:01:29,890
about magics which are sort<font color="#E5E5E5"> of they're</font>

30
00:01:28,030 --> 00:01:31,840
sort of<font color="#E5E5E5"> like macros in a way they kind</font>

31
00:01:29,890 --> 00:01:34,689
<font color="#E5E5E5">of transform the</font><font color="#CCCCCC"> input or the output</font><font color="#E5E5E5"> of</font>

32
00:01:31,840 --> 00:01:37,869
different notebook cells<font color="#E5E5E5"> and then I'll</font>

33
00:01:34,689 --> 00:01:39,788
go<font color="#E5E5E5"> into some</font><font color="#CCCCCC"> more clever things like</font>

34
00:01:37,869 --> 00:01:42,219
<font color="#CCCCCC">comms which are ways of doing</font>

35
00:01:39,789 --> 00:01:45,369
asynchronous communication between the

36
00:01:42,219 --> 00:01:46,538
notebook and<font color="#E5E5E5"> the server and then finally</font>

37
00:01:45,369 --> 00:01:51,100
I'll go through a sort of a fancier

38
00:01:46,539 --> 00:01:51,939
notebook example<font color="#E5E5E5"> and show you how to</font><font color="#CCCCCC"> put</font>

39
00:01:51,100 --> 00:01:57,399
some<font color="#CCCCCC"> of these different features</font>

40
00:01:51,939 --> 00:02:00,490
together<font color="#E5E5E5"> but first if you have a laptop</font>

41
00:01:57,399 --> 00:02:02,740
<font color="#E5E5E5">you can play with Jupiter notebooks</font>

42
00:02:00,490 --> 00:02:04,539
while I'm<font color="#E5E5E5"> giving this talk if you are</font>

43
00:02:02,740 --> 00:02:07,089
looking<font color="#E5E5E5"> at your laptop anyway and want</font>

44
00:02:04,539 --> 00:02:08,949
<font color="#E5E5E5">something to do you can go to this</font><font color="#CCCCCC"> URL</font>

45
00:02:07,090 --> 00:02:11,050
which<font color="#CCCCCC"> is also linked</font><font color="#E5E5E5"> in the schedule</font>

46
00:02:08,949 --> 00:02:16,480
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the git repository for</font><font color="#E5E5E5"> the</font>

47
00:02:11,050 --> 00:02:18,760
<font color="#E5E5E5">kernel github</font><font color="#CCCCCC"> /b dug-in</font><font color="#E5E5E5"> / p6 - Jupiter -</font>

48
00:02:16,480 --> 00:02:18,940
kernel<font color="#E5E5E5"> and you'll see a button there</font>

49
00:02:18,760 --> 00:02:22,780
<font color="#E5E5E5">that</font>

50
00:02:18,940 --> 00:02:25,600
says launch binder that links to a site

51
00:02:22,780 --> 00:02:29,830
called<font color="#E5E5E5"> my binder org and when you click</font>

52
00:02:25,600 --> 00:02:32,019
<font color="#CCCCCC">that it'll automatically</font><font color="#E5E5E5"> spawn your very</font>

53
00:02:29,830 --> 00:02:36,130
own docker container that's running<font color="#E5E5E5"> Perl</font>

54
00:02:32,020 --> 00:02:41,650
6<font color="#E5E5E5"> and interacting with a web</font><font color="#CCCCCC"> Jupiter</font>

55
00:02:36,130 --> 00:02:44,290
notebook<font color="#CCCCCC"> okay so a little bit</font><font color="#E5E5E5"> about</font>

56
00:02:41,650 --> 00:02:47,500
<font color="#CCCCCC">Jupiter</font><font color="#E5E5E5"> so Jupiter started off as the</font>

57
00:02:44,290 --> 00:02:49,179
<font color="#CCCCCC">Iowas called ipython at first</font><font color="#E5E5E5"> and the</font>

58
00:02:47,500 --> 00:02:51,720
goal of<font color="#CCCCCC"> the project was</font><font color="#E5E5E5"> sort of to</font><font color="#CCCCCC"> take</font>

59
00:02:49,180 --> 00:02:54,730
people who were familiar<font color="#E5E5E5"> with using</font><font color="#CCCCCC"> a</font>

60
00:02:51,720 --> 00:02:57,490
<font color="#CCCCCC">repla read eval print loop</font><font color="#E5E5E5"> interface</font><font color="#CCCCCC"> and</font>

61
00:02:54,730 --> 00:02:59,470
just<font color="#CCCCCC"> make it</font><font color="#E5E5E5"> a little bit better so some</font>

62
00:02:57,490 --> 00:03:02,140
of<font color="#E5E5E5"> the improvements</font><font color="#CCCCCC"> that were made</font><font color="#E5E5E5"> were</font>

63
00:02:59,470 --> 00:03:04,870
for<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> making</font><font color="#CCCCCC"> it they called them</font>

64
00:03:02,140 --> 00:03:08,470
rich interactive shells<font color="#E5E5E5"> so instead of</font>

65
00:03:04,870 --> 00:03:10,720
<font color="#CCCCCC">only sending text and getting back text</font>

66
00:03:08,470 --> 00:03:13,350
in<font color="#E5E5E5"> your in your</font><font color="#CCCCCC"> repple you could also</font>

67
00:03:10,720 --> 00:03:18,010
get<font color="#E5E5E5"> back graphics so you could</font><font color="#CCCCCC"> generate</font>

68
00:03:13,350 --> 00:03:20,739
graphs visualizations of data<font color="#CCCCCC"> you could</font>

69
00:03:18,010 --> 00:03:22,239
separate the server<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the client so</font>

70
00:03:20,740 --> 00:03:26,170
<font color="#CCCCCC">that you could do more complex</font>

71
00:03:22,240 --> 00:03:29,440
<font color="#CCCCCC">calculations ipython when it became</font>

72
00:03:26,170 --> 00:03:31,350
Jupiter<font color="#CCCCCC"> part</font><font color="#E5E5E5"> of the reason it became it</font>

73
00:03:29,440 --> 00:03:34,450
<font color="#E5E5E5">was called</font><font color="#CCCCCC"> Jupiter was because they were</font>

74
00:03:31,350 --> 00:03:36,700
focusing on<font color="#CCCCCC"> three main languages</font><font color="#E5E5E5"> Julia R</font>

75
00:03:34,450 --> 00:03:38,738
and Python<font color="#E5E5E5"> and in fact just a</font><font color="#CCCCCC"> couple of</font>

76
00:03:36,700 --> 00:03:40,690
<font color="#E5E5E5">hours ago</font><font color="#CCCCCC"> I went</font><font color="#E5E5E5"> down to the data</font>

77
00:03:38,739 --> 00:03:42,489
science<font color="#E5E5E5"> track and there was a talk about</font>

78
00:03:40,690 --> 00:03:45,430
Julia<font color="#E5E5E5"> and they were using a Jupiter</font>

79
00:03:42,489 --> 00:03:48,880
notebook<font color="#CCCCCC"> so it's pretty</font><font color="#E5E5E5"> popular there</font>

80
00:03:45,430 --> 00:03:51,610
are about<font color="#E5E5E5"> 500,000 of them on github as a</font>

81
00:03:48,880 --> 00:03:54,180
statistic I read somewhere they support

82
00:03:51,610 --> 00:03:58,630
<font color="#E5E5E5">about 40 languages and now Perl</font><font color="#CCCCCC"> 6 too</font>

83
00:03:54,180 --> 00:04:00,850
and they're very<font color="#CCCCCC"> popular</font><font color="#E5E5E5"> in the</font>

84
00:03:58,630 --> 00:04:03,820
scientific community<font color="#CCCCCC"> so a</font><font color="#E5E5E5"> popular use</font>

85
00:04:00,850 --> 00:04:05,799
<font color="#CCCCCC">case for</font><font color="#E5E5E5"> a Jupiter notebook is to go</font>

86
00:04:03,820 --> 00:04:07,810
<font color="#CCCCCC">through a sequence</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> steps in a</font>

87
00:04:05,800 --> 00:04:11,350
<font color="#CCCCCC">computation and to sort</font><font color="#E5E5E5"> of show</font><font color="#CCCCCC"> the</font>

88
00:04:07,810 --> 00:04:13,720
results of<font color="#E5E5E5"> each one and after you do</font>

89
00:04:11,350 --> 00:04:15,519
<font color="#E5E5E5">this sort of session of interacting</font>

90
00:04:13,720 --> 00:04:16,810
showing the input and<font color="#E5E5E5"> the output you can</font>

91
00:04:15,519 --> 00:04:18,608
hand it to somebody<font color="#E5E5E5"> else</font>

92
00:04:16,810 --> 00:04:21,010
who<font color="#CCCCCC"> can then repeat the process</font><font color="#E5E5E5"> easily</font>

93
00:04:18,608 --> 00:04:24,190
<font color="#CCCCCC">so it's a way of sort of</font><font color="#E5E5E5"> sharing results</font>

94
00:04:21,010 --> 00:04:27,940
<font color="#CCCCCC">and sharing algorithms</font><font color="#E5E5E5"> between people</font>

95
00:04:24,190 --> 00:04:29,490
some some academic journals have even

96
00:04:27,940 --> 00:04:31,719
had some integration with<font color="#CCCCCC"> notebooks</font>

97
00:04:29,490 --> 00:04:32,090
<font color="#CCCCCC">nature did something with them on</font><font color="#E5E5E5"> their</font>

98
00:04:31,720 --> 00:04:38,090
<font color="#E5E5E5">website</font>

99
00:04:32,090 --> 00:04:40,760
at one point<font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> okay so let's talk</font>

100
00:04:38,090 --> 00:04:43,250
a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about the architecture okay</font>

101
00:04:40,760 --> 00:04:46,490
so your typical<font color="#CCCCCC"> read eval print loop</font>

102
00:04:43,250 --> 00:04:49,460
looks like this<font color="#E5E5E5"> you read something and</font>

103
00:04:46,490 --> 00:04:51,169
then like<font color="#CCCCCC"> 1+1 you evaluate it you get</font>

104
00:04:49,460 --> 00:04:53,539
<font color="#CCCCCC">two and then you print</font><font color="#E5E5E5"> it so you print</font>

105
00:04:51,169 --> 00:04:57,650
the string<font color="#CCCCCC"> two</font><font color="#E5E5E5"> usually this</font><font color="#CCCCCC"> happens all</font>

106
00:04:53,540 --> 00:05:02,830
in one single server you have<font color="#CCCCCC"> a single</font>

107
00:04:57,650 --> 00:05:02,830
program<font color="#CCCCCC"> single process come on in and</font>

108
00:05:03,250 --> 00:05:10,460
it's sort of a simple interface<font color="#CCCCCC"> to most</font>

109
00:05:07,460 --> 00:05:12,560
to any program<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> Jupiter</font>

110
00:05:10,460 --> 00:05:15,680
architecture basically takes the

111
00:05:12,560 --> 00:05:18,770
the<font color="#E5E5E5"> R and the P and the</font><font color="#CCCCCC"> E</font><font color="#E5E5E5"> and splits</font>

112
00:05:15,680 --> 00:05:21,020
them up so the read and<font color="#CCCCCC"> the print go</font>

113
00:05:18,770 --> 00:05:23,539
over here<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the client side</font><font color="#E5E5E5"> and the</font>

114
00:05:21,020 --> 00:05:25,909
eval goes over here<font color="#E5E5E5"> on the server side</font>

115
00:05:23,539 --> 00:05:28,270
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> even further</font><font color="#CCCCCC"> over here not just</font>

116
00:05:25,910 --> 00:05:31,190
so there's a server in the middle and

117
00:05:28,270 --> 00:05:34,070
then over<font color="#CCCCCC"> here on the left</font><font color="#E5E5E5"> is something</font>

118
00:05:31,190 --> 00:05:38,840
that what they call the kernel<font color="#CCCCCC"> so the</font>

119
00:05:34,070 --> 00:05:41,900
client<font color="#CCCCCC"> can be</font><font color="#E5E5E5"> either</font><font color="#CCCCCC"> a web page which is</font>

120
00:05:38,840 --> 00:05:44,510
using WebSockets<font color="#CCCCCC"> and</font><font color="#E5E5E5"> HTTP or it can be a</font>

121
00:05:41,900 --> 00:05:47,539
console client<font color="#E5E5E5"> where it's using curses</font>

122
00:05:44,510 --> 00:05:50,000
or<font color="#E5E5E5"> terminal stuff there's I think a</font>

123
00:05:47,539 --> 00:05:53,150
<font color="#CCCCCC">cutie client</font><font color="#E5E5E5"> also it has</font><font color="#CCCCCC"> another sort</font><font color="#E5E5E5"> of</font>

124
00:05:50,000 --> 00:05:54,320
<font color="#E5E5E5">interface</font><font color="#CCCCCC"> and then the kernel is sort</font><font color="#E5E5E5"> of</font>

125
00:05:53,150 --> 00:05:55,700
independent it can be written<font color="#E5E5E5"> in</font>

126
00:05:54,320 --> 00:06:00,139
whatever<font color="#E5E5E5"> language and it communicates</font>

127
00:05:55,700 --> 00:06:02,389
<font color="#CCCCCC">with the server</font><font color="#E5E5E5"> you can also have</font>

128
00:06:00,139 --> 00:06:04,570
multiple<font color="#E5E5E5"> clients on the front end and</font>

129
00:06:02,389 --> 00:06:07,310
multiple kernels on the back end<font color="#E5E5E5"> and the</font>

130
00:06:04,570 --> 00:06:10,190
<font color="#CCCCCC">server in the middle does the brokering</font>

131
00:06:07,310 --> 00:06:12,440
between the two so every time you<font color="#CCCCCC"> open a</font>

132
00:06:10,190 --> 00:06:15,469
<font color="#CCCCCC">new notebook it gets its</font><font color="#E5E5E5"> own dedicated</font>

133
00:06:12,440 --> 00:06:18,500
<font color="#E5E5E5">kernel so you can have several sessions</font>

134
00:06:15,470 --> 00:06:20,210
running at the same time with the server

135
00:06:18,500 --> 00:06:25,789
in the middle<font color="#E5E5E5"> making</font><font color="#CCCCCC"> sure that everybody</font>

136
00:06:20,210 --> 00:06:27,620
<font color="#E5E5E5">gets</font><font color="#CCCCCC"> the right messages so here's a</font>

137
00:06:25,789 --> 00:06:30,200
here's<font color="#CCCCCC"> another diagram</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is from the</font>

138
00:06:27,620 --> 00:06:32,780
documentation<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Jupiter documentation</font>

139
00:06:30,200 --> 00:06:34,370
so in the web use case<font color="#E5E5E5"> you have this</font>

140
00:06:32,780 --> 00:06:37,849
notebook<font color="#E5E5E5"> server in the middle that's</font>

141
00:06:34,370 --> 00:06:41,050
<font color="#E5E5E5">sending stuff</font><font color="#CCCCCC"> to the browser with HTTP</font>

142
00:06:37,849 --> 00:06:45,440
and WebSockets<font color="#E5E5E5"> it uses 0 mq to</font>

143
00:06:41,050 --> 00:06:47,330
communicate with the colonel<font color="#CCCCCC"> I'm not</font>

144
00:06:45,440 --> 00:06:50,870
gonna<font color="#E5E5E5"> talk about that protocol but it's</font>

145
00:06:47,330 --> 00:06:55,490
kind of messy<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then this server also</font>

146
00:06:50,870 --> 00:06:57,710
<font color="#E5E5E5">keeps</font><font color="#CCCCCC"> track of the the Brett the</font><font color="#E5E5E5"> session</font>

147
00:06:55,490 --> 00:06:59,419
so it<font color="#E5E5E5"> writes to this notebook file and</font>

148
00:06:57,710 --> 00:07:01,940
the notebook<font color="#E5E5E5"> file is basically</font><font color="#CCCCCC"> just a</font>

149
00:06:59,419 --> 00:07:03,799
bunch<font color="#E5E5E5"> of JSON that says like here's the</font>

150
00:07:01,940 --> 00:07:06,349
input<font color="#E5E5E5"> here's the output here's maybe</font>

151
00:07:03,800 --> 00:07:09,650
something<font color="#E5E5E5"> about the type of the output</font><font color="#CCCCCC"> a</font>

152
00:07:06,349 --> 00:07:12,590
few other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> but it's a simple JSON</font>

153
00:07:09,650 --> 00:07:14,239
file it ends<font color="#E5E5E5"> with the IP ynb for</font><font color="#CCCCCC"> a</font>

154
00:07:12,590 --> 00:07:16,219
Python notebook<font color="#E5E5E5"> suffix</font>

155
00:07:14,240 --> 00:07:18,320
and if you take<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of these JSON files</font>

156
00:07:16,219 --> 00:07:22,760
that ends in<font color="#E5E5E5"> that suffix and you put it</font>

157
00:07:18,320 --> 00:07:26,630
on github<font color="#E5E5E5"> it'll magically be rendered as</font>

158
00:07:22,760 --> 00:07:28,849
a nice visual sort of you know

159
00:07:26,630 --> 00:07:30,169
representation of the session so<font color="#E5E5E5"> just</font>

160
00:07:28,849 --> 00:07:31,700
the<font color="#CCCCCC"> same way that github renders</font>

161
00:07:30,169 --> 00:07:36,080
markdown and these other things it also

162
00:07:31,700 --> 00:07:38,990
renders<font color="#CCCCCC"> I py and B notebook files so</font>

163
00:07:36,080 --> 00:07:40,310
it's a<font color="#E5E5E5"> handy</font><font color="#CCCCCC"> way to sort of</font><font color="#E5E5E5"> share you</font>

164
00:07:38,990 --> 00:07:42,110
know this is what I typed and this is

165
00:07:40,310 --> 00:07:47,150
what I got so<font color="#CCCCCC"> what happened when you</font>

166
00:07:42,110 --> 00:07:48,710
<font color="#E5E5E5">typed</font><font color="#CCCCCC"> that kind of a thing no another</font>

167
00:07:47,150 --> 00:07:50,320
note some other<font color="#E5E5E5"> assumptions</font><font color="#CCCCCC"> or some</font>

168
00:07:48,710 --> 00:07:53,270
other aspects of the<font color="#E5E5E5"> architecture</font>

169
00:07:50,320 --> 00:07:55,099
<font color="#CCCCCC">there's not really</font><font color="#E5E5E5"> security it's not</font>

170
00:07:53,270 --> 00:07:56,659
really about security<font color="#E5E5E5"> you know you're</font>

171
00:07:55,099 --> 00:07:58,520
running<font color="#CCCCCC"> your own code so even though</font>

172
00:07:56,659 --> 00:08:00,919
there's a client-server thing you know

173
00:07:58,520 --> 00:08:02,840
if you want to crash everything you can

174
00:08:00,919 --> 00:08:05,090
you know if you want to use up all<font color="#CCCCCC"> your</font>

175
00:08:02,840 --> 00:08:07,159
resources<font color="#E5E5E5"> there's not there's no sense</font>

176
00:08:05,090 --> 00:08:09,320
of<font color="#E5E5E5"> your your typical client-server thing</font>

177
00:08:07,159 --> 00:08:11,240
it's like<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> you're you assume the</font>

178
00:08:09,320 --> 00:08:13,820
client is dangerous but in this sense

179
00:08:11,240 --> 00:08:15,409
<font color="#CCCCCC">you're controlling</font><font color="#E5E5E5"> the server so the</font>

180
00:08:13,820 --> 00:08:21,740
<font color="#E5E5E5">security has to</font><font color="#CCCCCC"> happen outside</font><font color="#E5E5E5"> of the</font>

181
00:08:15,409 --> 00:08:23,180
<font color="#E5E5E5">system yeah that's it and</font><font color="#CCCCCC"> Bo</font><font color="#E5E5E5"> in addition</font>

182
00:08:21,740 --> 00:08:26,590
to github there are other places<font color="#E5E5E5"> that</font>

183
00:08:23,180 --> 00:08:31,880
render the notebook files like NB<font color="#CCCCCC"> viewer</font>

184
00:08:26,590 --> 00:08:37,640
<font color="#CCCCCC">jupiter org ok so i'll</font><font color="#E5E5E5"> take a look at</font>

185
00:08:31,880 --> 00:08:39,740
the console<font color="#E5E5E5"> client first</font><font color="#CCCCCC"> so once you</font>

186
00:08:37,640 --> 00:08:42,909
install everything<font color="#E5E5E5"> if you type Jupiter -</font>

187
00:08:39,740 --> 00:08:46,610
console and say - -<font color="#E5E5E5"> kernel equals</font><font color="#CCCCCC"> perl 6</font>

188
00:08:42,909 --> 00:08:50,780
<font color="#E5E5E5">this will launch a console client</font><font color="#CCCCCC"> I like</font>

189
00:08:46,610 --> 00:08:56,420
to alias that<font color="#E5E5E5"> - I fix and you get this</font>

190
00:08:50,780 --> 00:08:58,110
nice<font color="#CCCCCC"> interactive shell and</font><font color="#E5E5E5"> you'll be</font>

191
00:08:56,420 --> 00:09:02,040
greeted<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this prompt</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> says</font>

192
00:08:58,110 --> 00:09:04,710
brackets<font color="#CCCCCC"> one and if</font><font color="#E5E5E5"> you type</font><font color="#CCCCCC"> something</font>

193
00:09:02,040 --> 00:09:06,569
in there<font color="#E5E5E5"> then you'll get out brackets</font>

194
00:09:04,710 --> 00:09:08,940
<font color="#E5E5E5">one so if I type in</font><font color="#CCCCCC"> the string hello</font>

195
00:09:06,570 --> 00:09:14,130
world<font color="#CCCCCC"> then the result</font><font color="#E5E5E5"> of that</font><font color="#CCCCCC"> expression</font>

196
00:09:08,940 --> 00:09:17,280
becomes<font color="#E5E5E5"> out</font><font color="#CCCCCC"> brackets</font><font color="#E5E5E5"> one which is the</font>

197
00:09:14,130 --> 00:09:19,530
string hello world<font color="#CCCCCC"> and you can do the</font>

198
00:09:17,280 --> 00:09:22,199
same thing<font color="#CCCCCC"> within</font><font color="#E5E5E5"> two and you get out</font>

199
00:09:19,530 --> 00:09:25,199
two<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on there's some special</font>

200
00:09:22,200 --> 00:09:29,610
<font color="#E5E5E5">tricks you can do so for instance the</font>

201
00:09:25,200 --> 00:09:31,470
underscore<font color="#E5E5E5"> which came from</font><font color="#CCCCCC"> Believe It or</font>

202
00:09:29,610 --> 00:09:33,150
<font color="#CCCCCC">Not Python uses underscore just</font><font color="#E5E5E5"> like we</font>

203
00:09:31,470 --> 00:09:35,820
do in<font color="#CCCCCC"> this situation</font>

204
00:09:33,150 --> 00:09:41,640
underscore refers to the result of the

205
00:09:35,820 --> 00:09:43,010
last of the last<font color="#E5E5E5"> output so and</font><font color="#CCCCCC"> in - it's</font>

206
00:09:41,640 --> 00:09:45,660
a little<font color="#E5E5E5"> dark</font><font color="#CCCCCC"> here but</font><font color="#E5E5E5"> it says</font>

207
00:09:43,010 --> 00:09:48,210
underscore dot flip<font color="#E5E5E5"> and what that means</font>

208
00:09:45,660 --> 00:09:50,069
is take the last output and call the

209
00:09:48,210 --> 00:09:54,120
flip<font color="#CCCCCC"> method on that</font><font color="#E5E5E5"> string which</font>

210
00:09:50,070 --> 00:09:56,430
reverses<font color="#E5E5E5"> the string and then you can</font>

211
00:09:54,120 --> 00:09:58,710
also refer to<font color="#E5E5E5"> the variable so then those</font>

212
00:09:56,430 --> 00:10:02,489
<font color="#CCCCCC">become immutable variables inside Perl 6</font>

213
00:09:58,710 --> 00:10:05,070
so there's a out<font color="#E5E5E5"> brackets 1 and if you</font>

214
00:10:02,490 --> 00:10:07,260
just type that says out brackets 1 dot

215
00:10:05,070 --> 00:10:11,820
you see<font color="#CCCCCC"> that's calling the uppercase</font>

216
00:10:07,260 --> 00:10:14,850
method on the string hello world<font color="#CCCCCC"> which</font>

217
00:10:11,820 --> 00:10:16,710
<font color="#E5E5E5">gives you hello world in all caps it's a</font>

218
00:10:14,850 --> 00:10:17,880
little bit it's<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit dark there</font>

219
00:10:16,710 --> 00:10:21,270
but I<font color="#E5E5E5"> don't know if you can see there's</font>

220
00:10:17,880 --> 00:10:23,550
a<font color="#E5E5E5"> there's an in one out out one in two</font>

221
00:10:21,270 --> 00:10:26,730
out<font color="#E5E5E5"> two in three but there's no out</font>

222
00:10:23,550 --> 00:10:32,040
<font color="#E5E5E5">three can anybody does anybody see why</font>

223
00:10:26,730 --> 00:10:35,610
there's no out<font color="#E5E5E5"> three it's a little dark</font>

224
00:10:32,040 --> 00:10:38,130
<font color="#CCCCCC">but the reason is</font><font color="#E5E5E5"> because in</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> it</font>

225
00:10:35,610 --> 00:10:40,710
actually says say hello hello<font color="#E5E5E5"> world or</font>

226
00:10:38,130 --> 00:10:42,750
<font color="#E5E5E5">it says say say out sub 1 so it's</font>

227
00:10:40,710 --> 00:10:45,030
<font color="#E5E5E5">sending stuff to standard out so</font>

228
00:10:42,750 --> 00:10:48,060
basically<font color="#CCCCCC"> in addition to having cells</font>

229
00:10:45,030 --> 00:10:49,890
that are the last expression<font color="#E5E5E5"> you can</font>

230
00:10:48,060 --> 00:10:52,770
send<font color="#E5E5E5"> things to standard out and those</font>

231
00:10:49,890 --> 00:10:54,600
<font color="#E5E5E5">little</font><font color="#CCCCCC"> things will appear</font><font color="#E5E5E5"> in between the</font>

232
00:10:52,770 --> 00:11:00,650
<font color="#E5E5E5">cells but they won't be put</font><font color="#CCCCCC"> into the in</font>

233
00:10:54,600 --> 00:11:02,730
and the out variables so<font color="#CCCCCC"> auto-completion</font>

234
00:11:00,650 --> 00:11:05,660
<font color="#E5E5E5">just sort of works the way you would</font>

235
00:11:02,730 --> 00:11:08,160
expect<font color="#CCCCCC"> it to for the basics</font><font color="#E5E5E5"> so if you</font>

236
00:11:05,660 --> 00:11:10,410
declare<font color="#CCCCCC"> a Lex a couple of lexical</font>

237
00:11:08,160 --> 00:11:13,139
variables here<font color="#E5E5E5"> and then</font>

238
00:11:10,410 --> 00:11:15,029
<font color="#E5E5E5">you start typing</font><font color="#CCCCCC"> dollar-something</font><font color="#E5E5E5"> - and</font>

239
00:11:13,139 --> 00:11:20,310
you hit tab you get<font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of for the</font>

240
00:11:15,029 --> 00:11:23,339
different lexical variables in<font color="#CCCCCC"> Perl 6</font>

241
00:11:20,310 --> 00:11:26,790
<font color="#CCCCCC">the way to do that programmatically</font><font color="#E5E5E5"> is</font>

242
00:11:23,339 --> 00:11:29,040
to call the<font color="#CCCCCC"> dock</font><font color="#E5E5E5"> keys method</font><font color="#CCCCCC"> on lexical</font>

243
00:11:26,790 --> 00:11:33,719
<font color="#E5E5E5">colon colon and that's the sort of the</font>

244
00:11:29,040 --> 00:11:36,990
local<font color="#E5E5E5"> symbol table</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's how it</font>

245
00:11:33,720 --> 00:11:39,839
<font color="#E5E5E5">works behind the scenes</font><font color="#CCCCCC"> you can also</font>

246
00:11:36,990 --> 00:11:43,439
autocomplete methods<font color="#E5E5E5"> so if you have a</font>

247
00:11:39,839 --> 00:11:45,420
variable<font color="#E5E5E5"> or an object or you know pretty</font>

248
00:11:43,439 --> 00:11:47,579
much anything<font color="#E5E5E5"> and you type dot then</font>

249
00:11:45,420 --> 00:11:49,529
you're about to make a method call<font color="#CCCCCC"> and</font>

250
00:11:47,579 --> 00:11:51,449
so then if you press<font color="#E5E5E5"> tab it'll look for</font>

251
00:11:49,529 --> 00:11:53,610
the methods<font color="#E5E5E5"> now this gives a little bit</font>

252
00:11:51,449 --> 00:11:56,519
it<font color="#E5E5E5"> gets a little interesting in Perl 6</font>

253
00:11:53,610 --> 00:11:59,250
because there's a very rich<font color="#E5E5E5"> type</font>

254
00:11:56,519 --> 00:12:01,589
hierarchy<font color="#CCCCCC"> so this is a this is a picture</font>

255
00:11:59,250 --> 00:12:03,740
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> type hierarchy</font><font color="#CCCCCC"> maybe I can zoom</font>

256
00:12:01,589 --> 00:12:03,740
in

257
00:12:13,630 --> 00:12:19,449
control<font color="#E5E5E5"> there we go so this</font><font color="#CCCCCC"> is the type</font>

258
00:12:17,500 --> 00:12:20,970
<font color="#CCCCCC">hierarchy so inte is in the middle here</font>

259
00:12:19,449 --> 00:12:23,258
and<font color="#E5E5E5"> you can sort of see that</font><font color="#CCCCCC"> inte</font>

260
00:12:20,970 --> 00:12:26,440
inherits from<font color="#E5E5E5"> Rio and inherits from</font>

261
00:12:23,259 --> 00:12:28,630
numeric and int<font color="#E5E5E5"> also inherits</font><font color="#CCCCCC"> from</font>

262
00:12:26,440 --> 00:12:30,040
something called cool which is<font color="#CCCCCC"> something</font>

263
00:12:28,630 --> 00:12:32,860
<font color="#CCCCCC">that could</font><font color="#E5E5E5"> be an integer or could be a</font>

264
00:12:30,040 --> 00:12:35,079
string<font color="#CCCCCC"> which inherits from</font><font color="#E5E5E5"> any which</font>

265
00:12:32,860 --> 00:12:37,360
inherits<font color="#CCCCCC"> from the generic</font><font color="#E5E5E5"> class and so</font>

266
00:12:35,079 --> 00:12:39,550
there are<font color="#CCCCCC"> actually a</font><font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> methods</font><font color="#E5E5E5"> on</font>

267
00:12:37,360 --> 00:12:41,920
integers and so if you<font color="#E5E5E5"> just press tab</font>

268
00:12:39,550 --> 00:12:43,269
you'll see<font color="#E5E5E5"> a huge number</font><font color="#CCCCCC"> of methods</font><font color="#E5E5E5"> most</font>

269
00:12:41,920 --> 00:12:46,360
of which are<font color="#E5E5E5"> probably not interested</font><font color="#CCCCCC"> in</font>

270
00:12:43,269 --> 00:12:48,279
so by default<font color="#E5E5E5"> if you just do a dot and</font>

271
00:12:46,360 --> 00:12:50,440
you press tab you only get the local

272
00:12:48,279 --> 00:12:51,819
methods from<font color="#E5E5E5"> the int class but then if</font>

273
00:12:50,440 --> 00:12:54,220
<font color="#E5E5E5">you</font><font color="#CCCCCC"> start typing something</font><font color="#E5E5E5"> then it</font>

274
00:12:51,819 --> 00:12:57,040
searches the<font color="#CCCCCC"> whole type hierarchy</font><font color="#E5E5E5"> to try</font>

275
00:12:54,220 --> 00:13:00,160
<font color="#E5E5E5">to find</font><font color="#CCCCCC"> out what you're looking for and</font>

276
00:12:57,040 --> 00:13:01,959
<font color="#E5E5E5">that distinction is made so if we have</font>

277
00:13:00,160 --> 00:13:06,100
we'll do a<font color="#E5E5E5"> little example here we</font><font color="#CCCCCC"> have</font>

278
00:13:01,959 --> 00:13:08,979
<font color="#E5E5E5">12 we do tab we get a lot</font><font color="#CCCCCC"> of stuff and</font>

279
00:13:06,100 --> 00:13:11,850
the way it finds out<font color="#E5E5E5"> what the methods</font>

280
00:13:08,980 --> 00:13:14,889
are<font color="#CCCCCC"> is it calls dot caret methods</font><font color="#E5E5E5"> on</font>

281
00:13:11,850 --> 00:13:18,639
number 12<font color="#E5E5E5"> so these are all the</font><font color="#CCCCCC"> methods</font>

282
00:13:14,889 --> 00:13:20,829
just<font color="#E5E5E5"> for the int class but then when it</font>

283
00:13:18,639 --> 00:13:24,790
wants to<font color="#E5E5E5"> find all</font><font color="#CCCCCC"> of them it sends the</font>

284
00:13:20,829 --> 00:13:26,229
all flag like that<font color="#E5E5E5"> and then this goes on</font>

285
00:13:24,790 --> 00:13:28,449
and<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and on and</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of stuff</font>

286
00:13:26,230 --> 00:13:30,189
in there<font color="#CCCCCC"> that's probably not</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> you're</font>

287
00:13:28,449 --> 00:13:32,920
looking<font color="#E5E5E5"> for you probably don't want to</font>

288
00:13:30,189 --> 00:13:35,500
<font color="#E5E5E5">uppercase your integer but it's there in</font>

289
00:13:32,920 --> 00:13:37,120
<font color="#E5E5E5">case you're in case you are doing</font>

290
00:13:35,500 --> 00:13:40,660
something<font color="#E5E5E5"> else that's not</font><font color="#CCCCCC"> in the</font>

291
00:13:37,120 --> 00:13:43,750
immediate class<font color="#CCCCCC"> there are some other</font>

292
00:13:40,660 --> 00:13:45,459
cute<font color="#E5E5E5"> shortcuts for</font><font color="#CCCCCC"> auto-completion</font>

293
00:13:43,750 --> 00:13:47,500
<font color="#E5E5E5">you may or may not have heard that</font>

294
00:13:45,459 --> 00:13:51,459
there's some cool Unicode stuff you can

295
00:13:47,500 --> 00:13:54,250
do with<font color="#CCCCCC"> Perl six</font><font color="#E5E5E5"> one of my favorite</font>

296
00:13:51,459 --> 00:13:56,829
things<font color="#E5E5E5"> as the set operators so if you</font>

297
00:13:54,250 --> 00:13:59,170
have two sets<font color="#E5E5E5"> and you want to find the</font>

298
00:13:56,829 --> 00:14:00,609
intersection<font color="#CCCCCC"> or the Union you can use</font>

299
00:13:59,170 --> 00:14:05,079
the Unicode union or intersection

300
00:14:00,610 --> 00:14:07,569
operator if you don't like<font color="#E5E5E5"> typing</font>

301
00:14:05,079 --> 00:14:09,638
<font color="#E5E5E5">Unicode there are there are</font><font color="#CCCCCC"> always ASCII</font>

302
00:14:07,569 --> 00:14:11,979
variants<font color="#CCCCCC"> of the operators so for</font>

303
00:14:09,639 --> 00:14:14,410
instance usually<font color="#E5E5E5"> it's open</font><font color="#CCCCCC"> parentheses</font>

304
00:14:11,980 --> 00:14:16,480
<font color="#E5E5E5">vertical bar close parentheses is kind</font>

305
00:14:14,410 --> 00:14:19,089
of like an or<font color="#CCCCCC"> four sets</font><font color="#E5E5E5"> that's how you</font>

306
00:14:16,480 --> 00:14:21,009
do<font color="#E5E5E5"> Union so if you start typing open</font>

307
00:14:19,089 --> 00:14:23,319
<font color="#CCCCCC">parenthesis and you press tab you can</font>

308
00:14:21,009 --> 00:14:26,490
see<font color="#E5E5E5"> all the Unicode set operator so it's</font>

309
00:14:23,319 --> 00:14:29,699
<font color="#CCCCCC">very</font><font color="#E5E5E5"> handy for typing typing those in</font>

310
00:14:26,490 --> 00:14:32,160
similarly subscripts<font color="#E5E5E5"> in</font><font color="#CCCCCC"> unicode behave</font>

311
00:14:29,699 --> 00:14:35,639
like exponents<font color="#E5E5E5"> so if you don't want to</font>

312
00:14:32,160 --> 00:14:37,589
do<font color="#E5E5E5"> star star</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can type star star and</font>

313
00:14:35,639 --> 00:14:41,250
hit tab and then it'll<font color="#E5E5E5"> be easier to</font>

314
00:14:37,589 --> 00:14:46,920
<font color="#E5E5E5">enter unicode exponents the atomic</font>

315
00:14:41,250 --> 00:14:48,990
operations<font color="#CCCCCC"> so these are useful one of</font>

316
00:14:46,920 --> 00:14:50,639
the cool features<font color="#CCCCCC"> about</font><font color="#E5E5E5"> Perl 6 is the</font>

317
00:14:48,990 --> 00:14:54,540
threading capability so it's very<font color="#E5E5E5"> easy</font>

318
00:14:50,639 --> 00:14:59,759
<font color="#CCCCCC">to start multiple threads that are then</font>

319
00:14:54,540 --> 00:15:02,579
using the same variables so if you're

320
00:14:59,759 --> 00:15:05,069
not<font color="#E5E5E5"> careful you can have race conditions</font>

321
00:15:02,579 --> 00:15:07,880
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> to help you</font><font color="#E5E5E5"> with that</font><font color="#CCCCCC"> Perl 6</font>

322
00:15:05,069 --> 00:15:11,849
provides<font color="#E5E5E5"> a number of atomic operations</font>

323
00:15:07,880 --> 00:15:14,430
<font color="#E5E5E5">atomic - something and if you don't want</font>

324
00:15:11,850 --> 00:15:17,250
to type all<font color="#CCCCCC"> that out</font><font color="#E5E5E5"> you can use the</font>

325
00:15:14,430 --> 00:15:20,160
<font color="#E5E5E5">Unicode atom symbol which is</font><font color="#CCCCCC"> a shortcut</font>

326
00:15:17,250 --> 00:15:26,250
<font color="#CCCCCC">for some of the atomic operations</font><font color="#E5E5E5"> I'll</font>

327
00:15:20,160 --> 00:15:31,980
show you an example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> okay</font>

328
00:15:26,250 --> 00:15:32,519
so let's<font color="#E5E5E5"> look at the basics of a</font>

329
00:15:31,980 --> 00:15:36,209
<font color="#E5E5E5">notebook</font>

330
00:15:32,519 --> 00:15:38,639
so<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> haven't if you're not using so</font>

331
00:15:36,209 --> 00:15:40,018
one of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> online versions</font><font color="#E5E5E5"> that provides</font>

332
00:15:38,639 --> 00:15:42,300
you with your own docker container if

333
00:15:40,019 --> 00:15:44,310
you've<font color="#CCCCCC"> installed it locally you type</font>

334
00:15:42,300 --> 00:15:47,519
Jupiter notebook and it'll pop<font color="#E5E5E5"> open a</font>

335
00:15:44,310 --> 00:15:50,758
web a web page<font color="#E5E5E5"> and it'll start a server</font>

336
00:15:47,519 --> 00:15:54,660
<font color="#E5E5E5">and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you can go to file new notebook</font>

337
00:15:50,759 --> 00:15:57,750
<font color="#E5E5E5">Perl 6 to start a notebook you'll have</font>

338
00:15:54,660 --> 00:16:01,550
cells like this<font color="#E5E5E5"> as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> already</font>

339
00:15:57,750 --> 00:16:05,579
this presentation is actually<font color="#E5E5E5"> a notebook</font>

340
00:16:01,550 --> 00:16:07,680
<font color="#CCCCCC">so you get the you get your ins and outs</font>

341
00:16:05,579 --> 00:16:09,180
on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> left</font><font color="#CCCCCC"> after you type something</font><font color="#E5E5E5"> you</font>

342
00:16:07,680 --> 00:16:10,160
see the<font color="#E5E5E5"> result of the execution</font>

343
00:16:09,180 --> 00:16:13,979
underneath it

344
00:16:10,160 --> 00:16:17,519
control-enter will execute a<font color="#E5E5E5"> cell so</font>

345
00:16:13,980 --> 00:16:20,610
here we<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> two to the 27 minus</font><font color="#E5E5E5"> one</font>

346
00:16:17,519 --> 00:16:22,620
<font color="#E5E5E5">and then you can edit the cell and rerun</font>

347
00:16:20,610 --> 00:16:25,079
<font color="#E5E5E5">it if you want to so we can go</font><font color="#CCCCCC"> back and</font>

348
00:16:22,620 --> 00:16:28,670
we can<font color="#E5E5E5"> say</font><font color="#CCCCCC"> - and then use</font><font color="#E5E5E5"> auto</font>

349
00:16:25,079 --> 00:16:28,670
completion<font color="#CCCCCC"> to say</font><font color="#E5E5E5"> one</font>

350
00:16:34,060 --> 00:16:42,069
<font color="#CCCCCC">27 minus 1 so it looks a little nicer</font>

351
00:16:38,680 --> 00:16:45,050
<font color="#CCCCCC">and then for instance does anybody</font>

352
00:16:42,069 --> 00:16:47,029
recognize<font color="#CCCCCC"> this member or know what the</font>

353
00:16:45,050 --> 00:16:53,329
answer<font color="#CCCCCC"> is if I ask whether or</font><font color="#E5E5E5"> not this</font>

354
00:16:47,029 --> 00:16:55,550
is a prime number<font color="#E5E5E5"> any guesses yes but he</font>

355
00:16:53,329 --> 00:16:58,969
knows<font color="#CCCCCC"> ok so correct it is a prime number</font>

356
00:16:55,550 --> 00:17:00,439
this is<font color="#E5E5E5"> a Mersenne</font><font color="#CCCCCC"> prime one of the ones</font>

357
00:16:58,970 --> 00:17:04,400
<font color="#E5E5E5">that he got correct there were a few</font>

358
00:17:00,439 --> 00:17:05,119
<font color="#E5E5E5">that he got incorrect but this one is</font>

359
00:17:04,400 --> 00:17:07,100
prime

360
00:17:05,119 --> 00:17:08,899
<font color="#E5E5E5">I tried there was just in</font><font color="#CCCCCC"> January the</font>

361
00:17:07,099 --> 00:17:11,329
largest known prime number was

362
00:17:08,900 --> 00:17:13,640
<font color="#E5E5E5">calculated it's</font><font color="#CCCCCC"> 2 to the 7 million</font>

363
00:17:11,329 --> 00:17:20,869
something<font color="#CCCCCC"> I tried it in the notebook</font><font color="#E5E5E5"> and</font>

364
00:17:13,640 --> 00:17:23,030
it did<font color="#E5E5E5"> not calculate</font><font color="#CCCCCC"> ok so these are the</font>

365
00:17:20,869 --> 00:17:25,579
<font color="#E5E5E5">important</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> control-enter</font><font color="#CCCCCC"> alt-enter</font>

366
00:17:23,030 --> 00:17:27,139
<font color="#E5E5E5">will give you a new one underneath</font><font color="#CCCCCC"> if</font>

367
00:17:25,579 --> 00:17:30,590
you see a<font color="#E5E5E5"> little star that means it's</font>

368
00:17:27,140 --> 00:17:32,090
busy<font color="#CCCCCC"> and then like</font><font color="#E5E5E5"> for reproducibility</font>

369
00:17:30,590 --> 00:17:33,439
that's an option in the menu<font color="#CCCCCC"> to just</font>

370
00:17:32,090 --> 00:17:41,000
clear all the inputs and sort<font color="#E5E5E5"> of take it</font>

371
00:17:33,440 --> 00:17:43,130
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> top and rerun everything ok so</font>

372
00:17:41,000 --> 00:17:45,740
<font color="#E5E5E5">output cells and standard route can have</font>

373
00:17:43,130 --> 00:17:47,419
mime types so let's say we we have a

374
00:17:45,740 --> 00:17:50,059
little expression<font color="#E5E5E5"> here that's just</font><font color="#CCCCCC"> an</font>

375
00:17:47,419 --> 00:17:52,399
SVG SVG so this is<font color="#E5E5E5"> just the</font><font color="#CCCCCC"> Q is just a</font>

376
00:17:50,059 --> 00:17:55,070
<font color="#CCCCCC">pearl six quoting construct this says</font>

377
00:17:52,399 --> 00:17:59,120
here's a here doc<font color="#E5E5E5"> and this is sort of a</font>

378
00:17:55,070 --> 00:18:02,928
very tiny SVG<font color="#CCCCCC"> if we run this we're gonna</font>

379
00:17:59,120 --> 00:18:11,110
get<font color="#E5E5E5"> a red</font><font color="#CCCCCC"> circle so it says oh it's an</font>

380
00:18:02,929 --> 00:18:16,159
SVG<font color="#CCCCCC"> I'll render it as an SVG</font><font color="#E5E5E5"> what else</font>

381
00:18:11,110 --> 00:18:17,899
<font color="#E5E5E5">so magics are ways of telling</font><font color="#CCCCCC"> the kernel</font>

382
00:18:16,159 --> 00:18:20,030
what to do<font color="#E5E5E5"> like I said they're sort of</font>

383
00:18:17,899 --> 00:18:22,059
<font color="#E5E5E5">like macros but they can do a little</font>

384
00:18:20,030 --> 00:18:25,490
<font color="#CCCCCC">more they're a little</font><font color="#E5E5E5"> more powerful so</font>

385
00:18:22,059 --> 00:18:28,010
just like you<font color="#E5E5E5"> can have</font><font color="#CCCCCC"> SVG's if you want</font>

386
00:18:25,490 --> 00:18:31,370
to<font color="#E5E5E5"> explicitly say the output here</font><font color="#CCCCCC"> is</font>

387
00:18:28,010 --> 00:18:33,679
HTML you can<font color="#CCCCCC"> do that too</font><font color="#E5E5E5"> so if you start</font>

388
00:18:31,370 --> 00:18:35,059
a cell with<font color="#E5E5E5"> %</font><font color="#CCCCCC"> percent or if you want</font><font color="#E5E5E5"> it</font>

389
00:18:33,679 --> 00:18:38,059
to be a comment you<font color="#E5E5E5"> can have it start</font>

390
00:18:35,059 --> 00:18:40,490
with number<font color="#CCCCCC"> % the</font><font color="#E5E5E5"> first line is</font>

391
00:18:38,059 --> 00:18:41,750
interpreted as a magic and there's sort

392
00:18:40,490 --> 00:18:44,150
<font color="#E5E5E5">of a list of them you can</font><font color="#CCCCCC"> see in the</font>

393
00:18:41,750 --> 00:18:47,150
documentation<font color="#E5E5E5"> so % %</font><font color="#CCCCCC"> agh</font>

394
00:18:44,150 --> 00:18:49,550
<font color="#CCCCCC">EML says i'm generating</font><font color="#E5E5E5"> HTML so this</font>

395
00:18:47,150 --> 00:18:52,060
string here instead<font color="#E5E5E5"> of being escaped</font>

396
00:18:49,550 --> 00:18:55,310
<font color="#CCCCCC">we'll just get rendered in the browser</font>

397
00:18:52,060 --> 00:19:00,500
<font color="#CCCCCC">okay so this is</font><font color="#E5E5E5"> so you get your bold and</font>

398
00:18:55,310 --> 00:19:03,649
your italics<font color="#CCCCCC"> you can also generate lay</font>

399
00:19:00,500 --> 00:19:05,120
<font color="#E5E5E5">tech</font><font color="#CCCCCC"> so this is as you can</font><font color="#E5E5E5"> imagine a</font>

400
00:19:03,650 --> 00:19:07,460
feature that is<font color="#E5E5E5"> very useful for</font>

401
00:19:05,120 --> 00:19:10,459
scientists sharing<font color="#CCCCCC"> results with a lot</font><font color="#E5E5E5"> of</font>

402
00:19:07,460 --> 00:19:13,550
<font color="#E5E5E5">equations</font><font color="#CCCCCC"> the notebooks themselves</font>

403
00:19:10,460 --> 00:19:15,860
support<font color="#CCCCCC"> sell</font><font color="#E5E5E5"> the notebooks support latex</font>

404
00:19:13,550 --> 00:19:19,610
<font color="#CCCCCC">sells</font><font color="#E5E5E5"> but you can also produce latex</font>

405
00:19:15,860 --> 00:19:22,939
output so in this example<font color="#E5E5E5"> I'm producing</font>

406
00:19:19,610 --> 00:19:25,129
a latex<font color="#CCCCCC"> that's a fraction</font><font color="#E5E5E5"> with 1 in the</font>

407
00:19:22,940 --> 00:19:27,500
denominator<font color="#CCCCCC"> the numerator a</font><font color="#E5E5E5"> 1 in the</font>

408
00:19:25,130 --> 00:19:31,810
numerator and<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the denominator and</font>

409
00:19:27,500 --> 00:19:35,930
I'm wrapping<font color="#E5E5E5"> it in a late tech equation</font>

410
00:19:31,810 --> 00:19:37,760
<font color="#CCCCCC">block</font><font color="#E5E5E5"> and that gives me a half this one</font>

411
00:19:35,930 --> 00:19:43,040
any latex people can tell what this<font color="#E5E5E5"> is</font>

412
00:19:37,760 --> 00:19:45,650
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be before I run it quadratic</font>

413
00:19:43,040 --> 00:19:47,300
equation yes<font color="#CCCCCC"> ok so you</font><font color="#E5E5E5"> can you can get</font>

414
00:19:45,650 --> 00:19:54,290
as complicated as<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to with your</font>

415
00:19:47,300 --> 00:19:56,419
latex<font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> some other cute magics we</font>

416
00:19:54,290 --> 00:19:58,490
have bash and run so if you start<font color="#E5E5E5"> this</font>

417
00:19:56,420 --> 00:20:01,250
<font color="#E5E5E5">all with bash that means actually I'm</font>

418
00:19:58,490 --> 00:20:06,170
not writing<font color="#E5E5E5"> Perl 6 I'm writing bash so</font>

419
00:20:01,250 --> 00:20:09,710
here's a little bash script<font color="#E5E5E5"> that echoes</font>

420
00:20:06,170 --> 00:20:11,840
a bunch of strings into another file<font color="#E5E5E5"> so</font>

421
00:20:09,710 --> 00:20:13,490
remember there's no security<font color="#E5E5E5"> you control</font>

422
00:20:11,840 --> 00:20:15,159
the file system<font color="#E5E5E5"> you can do whatever you</font>

423
00:20:13,490 --> 00:20:17,540
want even<font color="#E5E5E5"> though it's a client-server</font>

424
00:20:15,160 --> 00:20:21,110
situation so we're gonna make a file

425
00:20:17,540 --> 00:20:26,050
<font color="#E5E5E5">here that has three lines</font><font color="#CCCCCC"> and then we're</font>

426
00:20:21,110 --> 00:20:30,949
gonna<font color="#E5E5E5"> cat the file so we'll run this and</font>

427
00:20:26,050 --> 00:20:34,310
<font color="#E5E5E5">here's the</font><font color="#CCCCCC"> file we just created and then</font>

428
00:20:30,950 --> 00:20:37,250
run<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> take a file that's somewhere</font>

429
00:20:34,310 --> 00:20:39,110
on the<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> and run</font><font color="#E5E5E5"> it and what's kind</font>

430
00:20:37,250 --> 00:20:41,690
<font color="#E5E5E5">of interesting about this is that it</font>

431
00:20:39,110 --> 00:20:43,550
<font color="#E5E5E5">doesn't just run it in a</font><font color="#CCCCCC"> subprocess in</font>

432
00:20:41,690 --> 00:20:46,220
its own lexical scope or in another

433
00:20:43,550 --> 00:20:48,470
<font color="#E5E5E5">process</font><font color="#CCCCCC"> it runs it within the context</font><font color="#E5E5E5"> of</font>

434
00:20:46,220 --> 00:20:51,140
the current cell so that means any

435
00:20:48,470 --> 00:20:53,810
variables that<font color="#CCCCCC"> are declared inside that</font>

436
00:20:51,140 --> 00:20:56,180
file<font color="#E5E5E5"> are now accessible to you inside</font>

437
00:20:53,810 --> 00:20:57,740
the notebook<font color="#E5E5E5"> so I'm going to say run</font>

438
00:20:56,180 --> 00:20:59,090
<font color="#E5E5E5">calc p6</font>

439
00:20:57,740 --> 00:21:00,559
<font color="#E5E5E5">which is the file we just</font><font color="#CCCCCC"> created and</font>

440
00:20:59,090 --> 00:21:02,899
<font color="#E5E5E5">then I'll be able to print out dollar</font>

441
00:21:00,559 --> 00:21:05,389
distance which was declared inside an

442
00:21:02,900 --> 00:21:08,270
external file<font color="#E5E5E5"> so that's something that's</font>

443
00:21:05,390 --> 00:21:11,210
<font color="#E5E5E5">it's a little hard to do just</font><font color="#CCCCCC"> in Perl 6</font>

444
00:21:08,270 --> 00:21:19,100
alone<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you could do it in the</font><font color="#CCCCCC"> jupiter</font>

445
00:21:11,210 --> 00:21:22,190
notebook<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> is also possible</font><font color="#CCCCCC"> so</font>

446
00:21:19,100 --> 00:21:24,530
<font color="#CCCCCC">there is a JavaScript magic if you say</font><font color="#E5E5E5"> %</font>

447
00:21:22,190 --> 00:21:26,480
<font color="#CCCCCC">% javascript it means okay</font><font color="#E5E5E5"> this is not</font>

448
00:21:24,530 --> 00:21:29,360
<font color="#CCCCCC">perl 6 then it's not bash</font><font color="#E5E5E5"> this is just</font>

449
00:21:26,480 --> 00:21:32,030
JavaScript<font color="#CCCCCC"> and you can just do whatever</font>

450
00:21:29,360 --> 00:21:34,010
you want on the client<font color="#CCCCCC"> so in this</font>

451
00:21:32,030 --> 00:21:37,220
example I'm saying element dot append

452
00:21:34,010 --> 00:21:39,830
and<font color="#E5E5E5"> jQuery is available so it's saying</font>

453
00:21:37,220 --> 00:21:44,950
additive<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> put some</font>

454
00:21:39,830 --> 00:21:52,669
text<font color="#E5E5E5"> in it it says hello world okay so</font>

455
00:21:44,950 --> 00:21:56,540
let's run this<font color="#E5E5E5"> with JavaScript you can</font>

456
00:21:52,670 --> 00:21:58,280
<font color="#E5E5E5">also use external libraries it gets a</font>

457
00:21:56,540 --> 00:22:02,830
<font color="#CCCCCC">little bit tricky depending on the way</font>

458
00:21:58,280 --> 00:22:07,250
the import is<font color="#CCCCCC"> done with JavaScript</font><font color="#E5E5E5"> but</font>

459
00:22:02,830 --> 00:22:10,699
one way<font color="#E5E5E5"> to do it is with</font><font color="#CCCCCC"> requirejs so in</font>

460
00:22:07,250 --> 00:22:13,820
this example I'm loading<font color="#E5E5E5"> a library</font>

461
00:22:10,700 --> 00:22:16,340
<font color="#E5E5E5">called chart</font><font color="#CCCCCC"> Jas I put in comments the</font>

462
00:22:13,820 --> 00:22:17,870
the CDN location but I'm serving it

463
00:22:16,340 --> 00:22:21,770
locally<font color="#E5E5E5"> since</font><font color="#CCCCCC"> I didn't trust the</font>

464
00:22:17,870 --> 00:22:26,059
wireless situation<font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> gonna run this</font>

465
00:22:21,770 --> 00:22:29,300
and this loads<font color="#CCCCCC"> chart Jas into the</font>

466
00:22:26,059 --> 00:22:34,580
browser<font color="#CCCCCC"> and so what can you do with a</font>

467
00:22:29,300 --> 00:22:36,649
<font color="#E5E5E5">JavaScript graphing library well let's</font>

468
00:22:34,580 --> 00:22:39,620
make<font color="#E5E5E5"> a data structure in Perl 6 and send</font>

469
00:22:36,650 --> 00:22:41,720
it to<font color="#E5E5E5"> the JavaScript graphing library</font><font color="#CCCCCC"> ok</font>

470
00:22:39,620 --> 00:22:45,350
<font color="#E5E5E5">so here's a little data structure that</font>

471
00:22:41,720 --> 00:22:49,550
I'm making in Perl 6<font color="#CCCCCC"> this is just a</font>

472
00:22:45,350 --> 00:22:51,530
nested hash we've got a<font color="#E5E5E5"> type called</font>

473
00:22:49,550 --> 00:22:54,649
<font color="#CCCCCC">Bar</font><font color="#E5E5E5"> ascending an argument type bar</font>

474
00:22:51,530 --> 00:22:57,590
saying we're making a bar graph<font color="#CCCCCC"> I've got</font>

475
00:22:54,650 --> 00:23:00,230
some labels going from<font color="#CCCCCC"> happy-face to</font>

476
00:22:57,590 --> 00:23:02,270
smirky face so this is<font color="#E5E5E5"> just a range of</font>

477
00:23:00,230 --> 00:23:05,450
all the Unicode characters in between

478
00:23:02,270 --> 00:23:07,639
those two and then I've got a few<font color="#CCCCCC"> pieces</font>

479
00:23:05,450 --> 00:23:10,429
of<font color="#E5E5E5"> data underneath that</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to be</font>

480
00:23:07,640 --> 00:23:10,720
on the graph<font color="#CCCCCC"> that I'm</font><font color="#E5E5E5"> generating and if</font>

481
00:23:10,429 --> 00:23:14,820
we

482
00:23:10,720 --> 00:23:18,340
<font color="#E5E5E5">on this we we get this data structure</font>

483
00:23:14,820 --> 00:23:23,610
<font color="#CCCCCC">okay so remember it's just evaluating</font>

484
00:23:18,340 --> 00:23:27,370
the<font color="#E5E5E5"> parole in this case and then I can</font>

485
00:23:23,610 --> 00:23:30,340
generate<font color="#E5E5E5"> some HTML</font><font color="#CCCCCC"> and take the data</font>

486
00:23:27,370 --> 00:23:35,020
structure<font color="#E5E5E5"> that I just created</font><font color="#CCCCCC"> and insert</font>

487
00:23:30,340 --> 00:23:39,879
it into the<font color="#E5E5E5"> HTML so I use the HTML magic</font>

488
00:23:35,020 --> 00:23:42,070
<font color="#E5E5E5">and I use JSON fast and then I just</font>

489
00:23:39,880 --> 00:23:44,679
write a little<font color="#E5E5E5"> bit of I write a canvas</font>

490
00:23:42,070 --> 00:23:46,658
and then<font color="#E5E5E5"> I have this little there's a</font>

491
00:23:44,679 --> 00:23:49,419
little interpolation<font color="#CCCCCC"> here</font><font color="#E5E5E5"> where I kind</font>

492
00:23:46,659 --> 00:23:54,720
of like turn it into JSON<font color="#E5E5E5"> one place and</font>

493
00:23:49,419 --> 00:24:00,010
<font color="#E5E5E5">then turn</font><font color="#CCCCCC"> it back</font><font color="#E5E5E5"> in the HTML and then</font>

494
00:23:54,720 --> 00:24:01,450
we run<font color="#E5E5E5"> it and</font><font color="#CCCCCC"> we get</font><font color="#E5E5E5"> a nice graph so you</font>

495
00:24:00,010 --> 00:24:03,070
know and you can so it's sort of an

496
00:24:01,450 --> 00:24:05,530
interactive graph so<font color="#E5E5E5"> already you have</font>

497
00:24:03,070 --> 00:24:08,039
some nice sort of interactive sort<font color="#E5E5E5"> of</font>

498
00:24:05,530 --> 00:24:11,470
minimal interactive data visualization

499
00:24:08,039 --> 00:24:15,129
<font color="#CCCCCC">just by generating for all six data</font>

500
00:24:11,470 --> 00:24:16,720
structures and using<font color="#E5E5E5"> javascript</font><font color="#CCCCCC"> graphing</font>

501
00:24:15,130 --> 00:24:19,570
libraries and you can do this kind<font color="#E5E5E5"> of</font>

502
00:24:16,720 --> 00:24:22,750
thing with with<font color="#CCCCCC"> whatever you know three</font>

503
00:24:19,570 --> 00:24:27,120
<font color="#E5E5E5">js4 3d visualizations</font><font color="#CCCCCC"> any any</font>

504
00:24:22,750 --> 00:24:27,120
client-side utilities will work fine

505
00:24:28,380 --> 00:24:34,919
<font color="#CCCCCC">okay so let's talk about</font><font color="#E5E5E5"> something a</font>

506
00:24:31,299 --> 00:24:37,750
little bit trickier<font color="#E5E5E5"> and that is</font>

507
00:24:34,919 --> 00:24:40,480
something that they call<font color="#CCCCCC"> comms in</font><font color="#E5E5E5"> the</font>

508
00:24:37,750 --> 00:24:42,820
<font color="#E5E5E5">Jupiter world and I'll just use the</font>

509
00:24:40,480 --> 00:24:46,240
<font color="#CCCCCC">definition from</font><font color="#E5E5E5"> their documentation so</font>

510
00:24:42,820 --> 00:24:48,668
the<font color="#E5E5E5"> comm API is</font><font color="#CCCCCC"> a symmetric asynchronous</font>

511
00:24:46,240 --> 00:24:51,130
fire-and-forget style messaging<font color="#E5E5E5"> API it</font>

512
00:24:48,669 --> 00:24:53,289
allows the programmer<font color="#E5E5E5"> to send JSON</font><font color="#CCCCCC"> OBO</font>

513
00:24:51,130 --> 00:24:57,429
blobs<font color="#CCCCCC"> between the front end and</font><font color="#E5E5E5"> the back</font>

514
00:24:53,289 --> 00:25:00,908
end<font color="#E5E5E5"> okay so the jupiter kernel supports</font>

515
00:24:57,429 --> 00:25:05,110
the<font color="#CCCCCC"> com API</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to show a few</font>

516
00:25:00,909 --> 00:25:08,100
<font color="#CCCCCC">examples of how this works and why it</font>

517
00:25:05,110 --> 00:25:08,100
might be<font color="#CCCCCC"> useful</font>

518
00:25:10,020 --> 00:25:17,520
<font color="#E5E5E5">okay so the way it</font><font color="#CCCCCC"> works is you you use</font>

519
00:25:15,420 --> 00:25:20,400
a variable<font color="#E5E5E5"> called dollar star Jupiter</font>

520
00:25:17,520 --> 00:25:24,030
and you register a<font color="#CCCCCC"> comm and what that</font>

521
00:25:20,400 --> 00:25:28,530
<font color="#E5E5E5">means is you say take this name and</font>

522
00:25:24,030 --> 00:25:32,760
associate<font color="#CCCCCC"> it with this function and the</font>

523
00:25:28,530 --> 00:25:36,090
function then is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get two</font>

524
00:25:32,760 --> 00:25:39,660
channels<font color="#CCCCCC"> so in Perl 6 a channel is a</font>

525
00:25:36,090 --> 00:25:42,300
<font color="#E5E5E5">built-in data type</font><font color="#CCCCCC"> a channel is a</font><font color="#E5E5E5"> thread</font>

526
00:25:39,660 --> 00:25:43,760
<font color="#E5E5E5">safe</font><font color="#CCCCCC"> Q for stuff that's going in one</font>

527
00:25:42,300 --> 00:25:47,610
direction<font color="#E5E5E5"> or another</font>

528
00:25:43,760 --> 00:25:54,270
so I'm<font color="#E5E5E5"> registering a comm here called</font>

529
00:25:47,610 --> 00:25:57,928
counter and<font color="#E5E5E5"> the arrow there is saying</font>

530
00:25:54,270 --> 00:26:00,570
here's the<font color="#E5E5E5"> here's the here are the</font>

531
00:25:57,929 --> 00:26:03,740
<font color="#CCCCCC">parameters</font><font color="#E5E5E5"> for the function it's getting</font>

532
00:26:00,570 --> 00:26:10,860
a channel which is<font color="#CCCCCC"> called dollar out and</font>

533
00:26:03,740 --> 00:26:13,740
then within<font color="#E5E5E5"> the function I'm creating an</font>

534
00:26:10,860 --> 00:26:15,570
event loop that is essentially saying

535
00:26:13,740 --> 00:26:17,960
every<font color="#E5E5E5"> one second</font>

536
00:26:15,570 --> 00:26:21,030
send a new number<font color="#E5E5E5"> to the dollar out</font>

537
00:26:17,960 --> 00:26:25,440
<font color="#E5E5E5">channel</font><font color="#CCCCCC"> okay with me so far</font>

538
00:26:21,030 --> 00:26:28,770
<font color="#E5E5E5">so we the react whenever supply dot</font>

539
00:26:25,440 --> 00:26:31,530
interval 1 means<font color="#E5E5E5"> supply dot interval 1</font>

540
00:26:28,770 --> 00:26:33,330
is make a new supply where every<font color="#E5E5E5"> one</font>

541
00:26:31,530 --> 00:26:38,010
<font color="#E5E5E5">second you send me the next number and</font>

542
00:26:33,330 --> 00:26:42,110
then the whenever says associate this

543
00:26:38,010 --> 00:26:47,040
<font color="#CCCCCC">callback with it and then react</font><font color="#E5E5E5"> says</font>

544
00:26:42,110 --> 00:26:50,969
make a new event<font color="#E5E5E5"> loop and then we call</font>

545
00:26:47,040 --> 00:26:54,050
done when<font color="#E5E5E5"> I reaches 5 so we run if we</font>

546
00:26:50,970 --> 00:26:59,550
<font color="#E5E5E5">run this code we are creating a calm and</font>

547
00:26:54,050 --> 00:27:05,820
then on the front<font color="#CCCCCC"> end we use the jupiter</font>

548
00:26:59,550 --> 00:27:09,090
<font color="#CCCCCC">comm</font><font color="#E5E5E5"> api and say give</font><font color="#CCCCCC"> me a new</font><font color="#E5E5E5"> comm that</font>

549
00:27:05,820 --> 00:27:16,580
is registered as counter on the<font color="#E5E5E5"> back end</font>

550
00:27:09,090 --> 00:27:20,490
and then make a new div element and

551
00:27:16,580 --> 00:27:22,590
associate<font color="#E5E5E5"> with this comm a callback</font><font color="#CCCCCC"> on</font>

552
00:27:20,490 --> 00:27:26,950
the front end

553
00:27:22,590 --> 00:27:34,199
that says every<font color="#E5E5E5"> time you receive a</font>

554
00:27:26,950 --> 00:27:38,880
message<font color="#E5E5E5"> put it into the div</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> okay</font>

555
00:27:34,200 --> 00:27:41,289
it's that straightforward enough<font color="#E5E5E5"> sort of</font>

556
00:27:38,880 --> 00:27:45,750
<font color="#E5E5E5">okay that's what we're gonna get one two</font>

557
00:27:41,289 --> 00:27:51,370
three four five<font color="#E5E5E5"> very exciting yes okay</font>

558
00:27:45,750 --> 00:27:55,980
<font color="#CCCCCC">and I have another example with comms</font><font color="#E5E5E5"> to</font>

559
00:27:51,370 --> 00:27:58,479
show you the two-way communication<font color="#E5E5E5"> and</font>

560
00:27:55,980 --> 00:28:04,690
this<font color="#E5E5E5"> example so bear with me for a</font>

561
00:27:58,480 --> 00:28:07,990
second<font color="#CCCCCC"> we have an integer and we're</font>

562
00:28:04,690 --> 00:28:10,899
going to start<font color="#E5E5E5"> it at zero now every</font>

563
00:28:07,990 --> 00:28:13,539
second we<font color="#CCCCCC"> are going to send out the sum</font>

564
00:28:10,899 --> 00:28:16,658
of that<font color="#E5E5E5"> integer and the next number</font><font color="#CCCCCC"> that</font>

565
00:28:13,539 --> 00:28:19,629
<font color="#CCCCCC">comes back we're also going to start a</font>

566
00:28:16,659 --> 00:28:22,419
separate event<font color="#E5E5E5"> loop that is going to</font>

567
00:28:19,630 --> 00:28:24,940
receive<font color="#CCCCCC"> messages whenever we get</font><font color="#E5E5E5"> a</font>

568
00:28:22,419 --> 00:28:27,909
message<font color="#E5E5E5"> we're going to add that we're</font>

569
00:28:24,940 --> 00:28:30,039
<font color="#E5E5E5">going to assign</font><font color="#CCCCCC"> that to</font><font color="#E5E5E5"> our integer so</font>

570
00:28:27,909 --> 00:28:32,320
we're gonna send numbers we're gonna

571
00:28:30,039 --> 00:28:33,879
start<font color="#CCCCCC"> counting what</font><font color="#E5E5E5"> 0 1 2 but that if</font>

572
00:28:32,320 --> 00:28:36,879
somebody says here's<font color="#CCCCCC"> 100 then when you</font>

573
00:28:33,880 --> 00:28:40,870
say<font color="#CCCCCC"> ok 100 and 300</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 400</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 5 like</font>

574
00:28:36,880 --> 00:28:47,010
<font color="#E5E5E5">that so we have</font><font color="#CCCCCC"> to event loops they're</font>

575
00:28:40,870 --> 00:28:50,620
both using the<font color="#CCCCCC"> same variable dollar num</font>

576
00:28:47,010 --> 00:28:54,669
therefore to avoid race conditions we

577
00:28:50,620 --> 00:28:58,268
declare it as an atomic<font color="#E5E5E5"> int and when we</font>

578
00:28:54,669 --> 00:29:00,669
assign to<font color="#CCCCCC"> it we use atomic assign</font><font color="#E5E5E5"> so</font>

579
00:28:58,269 --> 00:29:02,559
this code<font color="#E5E5E5"> would work fine</font><font color="#CCCCCC"> if we didn't</font>

580
00:29:00,669 --> 00:29:07,750
do that<font color="#E5E5E5"> but there would be the</font>

581
00:29:02,559 --> 00:29:10,450
possibility<font color="#CCCCCC"> of race conditions okay so</font>

582
00:29:07,750 --> 00:29:15,760
let's run this<font color="#E5E5E5"> which registers this</font><font color="#CCCCCC"> comm</font>

583
00:29:10,450 --> 00:29:18,580
and then on the client<font color="#CCCCCC"> side we're going</font>

584
00:29:15,760 --> 00:29:21,970
to get one<font color="#E5E5E5"> of these comms</font>

585
00:29:18,580 --> 00:29:24,279
<font color="#E5E5E5">and we're going to send it the number 10</font>

586
00:29:21,970 --> 00:29:25,539
then the number 20 then the number 30

587
00:29:24,279 --> 00:29:28,929
then the number 40 so we're going<font color="#E5E5E5"> to</font>

588
00:29:25,539 --> 00:29:31,840
<font color="#E5E5E5">keep on increasing the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> that's</font>

589
00:29:28,929 --> 00:29:35,380
<font color="#E5E5E5">being added to so what we're expecting</font>

590
00:29:31,840 --> 00:29:35,870
<font color="#E5E5E5">to get back is zero and then we're going</font>

591
00:29:35,380 --> 00:29:37,340
to<font color="#E5E5E5"> send</font>

592
00:29:35,870 --> 00:29:39,199
and it's gonna say oh<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> not gonna send</font>

593
00:29:37,340 --> 00:29:41,149
<font color="#E5E5E5">you one I'm gonna send you 10 plus 1 or</font>

594
00:29:39,200 --> 00:29:43,640
<font color="#CCCCCC">11</font><font color="#E5E5E5"> and then we're gonna send 20 and it's</font>

595
00:29:41,150 --> 00:29:49,280
gonna send<font color="#CCCCCC"> okay I'll</font><font color="#E5E5E5"> send you 20 plus 2</font>

596
00:29:43,640 --> 00:29:50,450
which is<font color="#E5E5E5"> 22</font><font color="#CCCCCC"> so so</font><font color="#E5E5E5"> this is an example of</font>

597
00:29:49,280 --> 00:29:53,240
the kind of thing you<font color="#E5E5E5"> can do with</font>

598
00:29:50,450 --> 00:29:54,620
two-way communication<font color="#CCCCCC"> and you can sort</font>

599
00:29:53,240 --> 00:29:56,120
of start<font color="#CCCCCC"> with this as an example</font><font color="#E5E5E5"> for</font>

600
00:29:54,620 --> 00:29:58,610
<font color="#E5E5E5">yourself if you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> build on it and</font>

601
00:29:56,120 --> 00:30:05,870
<font color="#E5E5E5">make</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> that does</font><font color="#CCCCCC"> something more</font>

602
00:29:58,610 --> 00:30:08,979
important<font color="#E5E5E5"> okay so now I'm going to</font>

603
00:30:05,870 --> 00:30:12,649
finish<font color="#E5E5E5"> with a slightly fancier notebook</font>

604
00:30:08,980 --> 00:30:15,860
<font color="#CCCCCC">to sort of illustrate</font><font color="#E5E5E5"> the kind of thing</font>

605
00:30:12,650 --> 00:30:18,320
you<font color="#E5E5E5"> can do with a visualization and with</font>

606
00:30:15,860 --> 00:30:21,159
messages<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> from the server</font><font color="#E5E5E5"> to the</font>

607
00:30:18,320 --> 00:30:24,050
client<font color="#CCCCCC"> okay so we're going</font><font color="#E5E5E5"> to use the d3</font>

608
00:30:21,160 --> 00:30:27,679
visualization library<font color="#E5E5E5"> to visualize the</font>

609
00:30:24,050 --> 00:30:30,379
Fibonacci sequence<font color="#CCCCCC"> we're going to make a</font>

610
00:30:27,679 --> 00:30:31,730
sequence of<font color="#E5E5E5"> we're gonna have every</font>

611
00:30:30,380 --> 00:30:34,250
second we're<font color="#E5E5E5"> going to send a</font><font color="#CCCCCC"> new number</font>

612
00:30:31,730 --> 00:30:37,040
<font color="#E5E5E5">in the sequence</font><font color="#CCCCCC"> and we're gonna send</font>

613
00:30:34,250 --> 00:30:40,550
some other stuff<font color="#E5E5E5"> too</font><font color="#CCCCCC"> okay so we all know</font>

614
00:30:37,040 --> 00:30:44,590
the Fibonacci sequence 1<font color="#CCCCCC"> 1 2</font><font color="#E5E5E5"> 3 5</font><font color="#CCCCCC"> the</font>

615
00:30:40,550 --> 00:30:46,760
ratio<font color="#E5E5E5"> of successive terms 1 2</font><font color="#CCCCCC"> 1 2 2</font><font color="#E5E5E5"> 1</font>

616
00:30:44,590 --> 00:30:50,809
<font color="#CCCCCC">does everybody</font><font color="#E5E5E5"> know this that it</font>

617
00:30:46,760 --> 00:30:52,550
approaches the golden mean<font color="#CCCCCC"> 1 plus the</font>

618
00:30:50,809 --> 00:30:57,129
<font color="#E5E5E5">square root</font><font color="#CCCCCC"> of 5 over 2 ok</font>

619
00:30:52,550 --> 00:30:59,780
this was credited to Kepler<font color="#E5E5E5"> I learned</font>

620
00:30:57,130 --> 00:31:03,050
and so what we want<font color="#E5E5E5"> to do is we're gonna</font>

621
00:30:59,780 --> 00:31:05,840
<font color="#CCCCCC">visualize this by constructing</font><font color="#E5E5E5"> a golden</font>

622
00:31:03,050 --> 00:31:09,260
rectangle<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to have this</font>

623
00:31:05,840 --> 00:31:11,000
<font color="#CCCCCC">ratio so this</font><font color="#E5E5E5"> is how we're gonna do we</font>

624
00:31:09,260 --> 00:31:13,250
start<font color="#CCCCCC"> we start with a square in</font><font color="#E5E5E5"> the</font>

625
00:31:11,000 --> 00:31:15,500
middle<font color="#CCCCCC"> that's 1 by 1</font><font color="#E5E5E5"> then we put a</font>

626
00:31:13,250 --> 00:31:17,720
square on top<font color="#E5E5E5"> of that one</font><font color="#CCCCCC"> it's also</font><font color="#E5E5E5"> 1 by</font>

627
00:31:15,500 --> 00:31:19,940
1 then we put a square next<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it that's</font>

628
00:31:17,720 --> 00:31:22,190
<font color="#E5E5E5">2 by 2 then we go down we make</font><font color="#CCCCCC"> one</font>

629
00:31:19,940 --> 00:31:26,030
that's<font color="#E5E5E5"> 3 by 3 then we go</font><font color="#CCCCCC"> over we make</font>

630
00:31:22,190 --> 00:31:28,730
<font color="#CCCCCC">one that's</font><font color="#E5E5E5"> 5 by 5</font><font color="#CCCCCC"> and so the Fibonacci</font>

631
00:31:26,030 --> 00:31:32,809
<font color="#CCCCCC">numbers are the lengths of</font><font color="#E5E5E5"> the sides of</font>

632
00:31:28,730 --> 00:31:35,120
<font color="#E5E5E5">the rectangles 1 2 3 5 and we're</font>

633
00:31:32,809 --> 00:31:36,678
rotating we're going this<font color="#E5E5E5"> way this way</font>

634
00:31:35,120 --> 00:31:40,580
this<font color="#E5E5E5"> way this way</font>

635
00:31:36,679 --> 00:31:43,460
so we basically<font color="#E5E5E5"> have a sequence of these</font>

636
00:31:40,580 --> 00:31:47,770
<font color="#CCCCCC">directions which are vectors</font><font color="#E5E5E5"> so we're</font>

637
00:31:43,460 --> 00:31:51,700
going the direction<font color="#CCCCCC"> 1 comma 1 and then</font>

638
00:31:47,770 --> 00:31:52,930
<font color="#E5E5E5">you know one one let's say negative 1</font><font color="#CCCCCC"> in</font>

639
00:31:51,700 --> 00:31:55,770
the<font color="#CCCCCC"> x-direction one in the y direction</font>

640
00:31:52,930 --> 00:31:58,690
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we have these</font><font color="#CCCCCC"> different directions</font>

641
00:31:55,770 --> 00:32:01,150
<font color="#E5E5E5">and then by multiplying the</font><font color="#CCCCCC"> fibonacci</font>

642
00:31:58,690 --> 00:32:04,330
<font color="#E5E5E5">numbers by the directions</font><font color="#CCCCCC"> we're gonna</font>

643
00:32:01,150 --> 00:32:06,100
get<font color="#E5E5E5"> a vector</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> diagonal</font><font color="#CCCCCC"> and</font>

644
00:32:04,330 --> 00:32:07,750
the goal<font color="#CCCCCC"> here is that we want to compute</font>

645
00:32:06,100 --> 00:32:12,189
these coordinates for the different

646
00:32:07,750 --> 00:32:15,190
corners<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the rectangles okay so the</font>

647
00:32:12,190 --> 00:32:19,080
diagonals then so are the<font color="#E5E5E5"> first list</font>

648
00:32:15,190 --> 00:32:22,590
<font color="#CCCCCC">times the second list</font><font color="#E5E5E5"> where x means</font>

649
00:32:19,080 --> 00:32:26,110
multiply a scalar by a vector<font color="#CCCCCC"> okay so</font>

650
00:32:22,590 --> 00:32:30,419
for instance<font color="#CCCCCC"> 5 times 1 comma 1 is 5</font>

651
00:32:26,110 --> 00:32:34,570
comma 5<font color="#CCCCCC"> ok so these are different</font>

652
00:32:30,420 --> 00:32:36,880
<font color="#E5E5E5">diagonals and then</font><font color="#CCCCCC"> the corners are going</font>

653
00:32:34,570 --> 00:32:40,330
to be the sums of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> diagonals</font><font color="#E5E5E5"> so far</font>

654
00:32:36,880 --> 00:32:42,790
<font color="#CCCCCC">okay so start with</font><font color="#E5E5E5"> 0 then we add 1 then</font>

655
00:32:40,330 --> 00:32:46,330
we add the first<font color="#E5E5E5"> two to get here then we</font>

656
00:32:42,790 --> 00:32:48,300
add the first<font color="#CCCCCC"> 3 to</font><font color="#E5E5E5"> get here</font><font color="#CCCCCC"> right and</font>

657
00:32:46,330 --> 00:32:51,730
<font color="#E5E5E5">then we add the 4 to get to the fourth</font>

658
00:32:48,300 --> 00:32:53,440
is<font color="#E5E5E5"> that does that make</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> ok</font>

659
00:32:51,730 --> 00:32:55,540
so this is our so this is going to be

660
00:32:53,440 --> 00:32:57,580
our algorithm now so now we are<font color="#E5E5E5"> going to</font>

661
00:32:55,540 --> 00:33:00,159
do four lines of<font color="#E5E5E5"> Perl 6 one for each of</font>

662
00:32:57,580 --> 00:33:02,020
<font color="#CCCCCC">these lines to generate these four</font>

663
00:33:00,160 --> 00:33:05,380
infinite sequences and then we're<font color="#E5E5E5"> going</font>

664
00:33:02,020 --> 00:33:07,900
to send<font color="#E5E5E5"> them out to the client</font><font color="#CCCCCC"> one at a</font>

665
00:33:05,380 --> 00:33:12,370
<font color="#E5E5E5">time and see</font><font color="#CCCCCC"> if we can make a</font>

666
00:33:07,900 --> 00:33:20,260
visualization<font color="#CCCCCC"> okay so the first</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is</font>

667
00:33:12,370 --> 00:33:21,639
easy<font color="#CCCCCC"> this is one of</font><font color="#E5E5E5"> the well-known ways</font>

668
00:33:20,260 --> 00:33:24,250
of sort of<font color="#E5E5E5"> showing off some of the</font>

669
00:33:21,640 --> 00:33:28,420
functionality of<font color="#CCCCCC"> Perl 6</font><font color="#E5E5E5"> where you can</font>

670
00:33:24,250 --> 00:33:31,270
use the sequence operator<font color="#E5E5E5"> dot dot dot</font><font color="#CCCCCC"> to</font>

671
00:33:28,420 --> 00:33:38,310
generate an<font color="#CCCCCC"> infinite sequence so you say</font>

672
00:33:31,270 --> 00:33:41,560
1 comma 1 and<font color="#E5E5E5"> then star plus star means</font>

673
00:33:38,310 --> 00:33:46,600
<font color="#CCCCCC">so whenever you see a star star is</font>

674
00:33:41,560 --> 00:33:50,020
called<font color="#E5E5E5"> whatever star and when star is</font>

675
00:33:46,600 --> 00:33:55,419
used in an<font color="#CCCCCC"> expression it turns the</font>

676
00:33:50,020 --> 00:33:57,790
expression into a<font color="#E5E5E5"> subroutine and then it</font>

677
00:33:55,420 --> 00:34:00,730
becomes an<font color="#CCCCCC"> argument to the</font><font color="#E5E5E5"> subroutine</font>

678
00:33:57,790 --> 00:34:03,428
<font color="#E5E5E5">and if you use it twice</font>

679
00:34:00,730 --> 00:34:07,270
then the second one<font color="#E5E5E5"> becomes the second</font>

680
00:34:03,429 --> 00:34:12,100
argument to<font color="#E5E5E5"> the subroutine so</font><font color="#CCCCCC"> Star Plus</font>

681
00:34:07,270 --> 00:34:15,399
<font color="#E5E5E5">Star says make me a routine that takes</font>

682
00:34:12,100 --> 00:34:18,580
<font color="#E5E5E5">two arguments and returns the sum of the</font>

683
00:34:15,399 --> 00:34:21,609
two arguments<font color="#E5E5E5"> so by saying 1 comma 1</font>

684
00:34:18,580 --> 00:34:24,040
comma<font color="#E5E5E5"> star plus star this tells fro 6</font>

685
00:34:21,609 --> 00:34:26,739
how to generate the<font color="#E5E5E5"> next element of</font><font color="#CCCCCC"> the</font>

686
00:34:24,040 --> 00:34:29,129
<font color="#E5E5E5">sequence so we</font><font color="#CCCCCC"> say 1 1 star</font><font color="#E5E5E5"> plus star</font>

687
00:34:26,739 --> 00:34:32,199
dot dot infinity and the<font color="#CCCCCC"> Infinity</font>

688
00:34:29,129 --> 00:34:37,000
<font color="#CCCCCC">Unicode symbol works</font><font color="#E5E5E5"> so now we're gonna</font>

689
00:34:32,199 --> 00:34:41,310
<font color="#E5E5E5">evaluate at Fibonacci</font><font color="#CCCCCC"> up to 20 to show</font>

690
00:34:37,000 --> 00:34:46,929
the first 20 numbers<font color="#E5E5E5"> let's run this</font><font color="#CCCCCC"> one</font>

691
00:34:41,310 --> 00:34:51,580
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> all right so far so</font><font color="#CCCCCC"> good ok so for</font>

692
00:34:46,929 --> 00:34:53,379
<font color="#E5E5E5">the next one</font><font color="#CCCCCC"> the direction so the</font>

693
00:34:51,580 --> 00:34:57,609
directions are pretty easy this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just</font>

694
00:34:53,379 --> 00:34:59,650
this<font color="#E5E5E5"> these</font><font color="#CCCCCC"> four directions repeated an</font>

695
00:34:57,609 --> 00:35:03,310
infinite number<font color="#CCCCCC"> of times</font><font color="#E5E5E5"> so we just</font>

696
00:34:59,650 --> 00:35:05,020
<font color="#E5E5E5">write the list 1 1 - 1 1</font><font color="#CCCCCC"> we have to put</font>

697
00:35:03,310 --> 00:35:09,279
the vertical<font color="#CCCCCC"> bar at the beginning</font><font color="#E5E5E5"> which</font>

698
00:35:05,020 --> 00:35:12,730
sort<font color="#E5E5E5"> of flattens it and then X X is the</font>

699
00:35:09,280 --> 00:35:16,030
list repetition operator<font color="#E5E5E5"> so this makes</font>

700
00:35:12,730 --> 00:35:18,880
an infinite list of these<font color="#E5E5E5"> four numbers</font>

701
00:35:16,030 --> 00:35:24,880
<font color="#CCCCCC">and so let's print</font><font color="#E5E5E5"> out the first 5</font><font color="#CCCCCC"> of</font>

702
00:35:18,880 --> 00:35:27,070
those to see how that<font color="#CCCCCC"> looks okay so the</font>

703
00:35:24,880 --> 00:35:29,380
diagonals<font color="#CCCCCC"> now this is gonna get</font><font color="#E5E5E5"> a little</font>

704
00:35:27,070 --> 00:35:31,740
<font color="#E5E5E5">tricky</font><font color="#CCCCCC"> here so you remember how I said</font>

705
00:35:29,380 --> 00:35:34,750
<font color="#E5E5E5">we're multiplying a number by a vector</font>

706
00:35:31,740 --> 00:35:39,490
so the way to<font color="#E5E5E5"> multiply a number by a</font>

707
00:35:34,750 --> 00:35:43,300
vector<font color="#E5E5E5"> is to use the multiplication</font>

708
00:35:39,490 --> 00:35:45,879
operator surrounded<font color="#E5E5E5"> with a pair of angle</font>

709
00:35:43,300 --> 00:35:48,220
<font color="#CCCCCC">brackets a pair of angle brackets makes</font>

710
00:35:45,880 --> 00:35:50,710
an ordinary operator into a hyper

711
00:35:48,220 --> 00:35:52,379
operator and it says instead<font color="#E5E5E5"> of just</font>

712
00:35:50,710 --> 00:35:55,740
multiplying these numbers<font color="#CCCCCC"> together</font>

713
00:35:52,380 --> 00:36:03,160
<font color="#E5E5E5">multiply corresponding numbers together</font>

714
00:35:55,740 --> 00:36:06,430
<font color="#CCCCCC">so 1 hyper</font><font color="#E5E5E5"> x or 5 hyper x 1 comma 1 is 5</font>

715
00:36:03,160 --> 00:36:10,029
comma 5 so we want to combine these two

716
00:36:06,430 --> 00:36:11,740
<font color="#CCCCCC">arrays and the way we're combining</font><font color="#E5E5E5"> them</font>

717
00:36:10,030 --> 00:36:14,260
so we combine them using<font color="#E5E5E5"> the zip</font>

718
00:36:11,740 --> 00:36:16,600
<font color="#E5E5E5">operator</font><font color="#CCCCCC"> zip says</font><font color="#E5E5E5"> come</font>

719
00:36:14,260 --> 00:36:19,060
corresponding elements of<font color="#E5E5E5"> the array</font><font color="#CCCCCC"> but</font>

720
00:36:16,600 --> 00:36:22,180
zip takes an<font color="#CCCCCC"> argument</font><font color="#E5E5E5"> which is the</font>

721
00:36:19,060 --> 00:36:24,759
<font color="#E5E5E5">operator so the argument to the zip</font>

722
00:36:22,180 --> 00:36:27,660
operator<font color="#E5E5E5"> is the multiplication hyper</font>

723
00:36:24,760 --> 00:36:30,700
operator<font color="#CCCCCC"> I think I said that</font><font color="#E5E5E5"> right</font>

724
00:36:27,660 --> 00:36:32,799
<font color="#CCCCCC">and so we're going to</font><font color="#E5E5E5"> say directions</font>

725
00:36:30,700 --> 00:36:35,609
<font color="#E5E5E5">zipped with the multiplication hyper</font>

726
00:36:32,800 --> 00:36:40,210
operator over the Fibonacci numbers<font color="#CCCCCC"> and</font>

727
00:36:35,609 --> 00:36:44,380
this will give us<font color="#E5E5E5"> one one you know sort</font>

728
00:36:40,210 --> 00:36:49,960
of scaled so<font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> far so good</font><font color="#CCCCCC"> and then</font>

729
00:36:44,380 --> 00:36:52,380
for the corners<font color="#E5E5E5"> does anybody know what</font>

730
00:36:49,960 --> 00:36:55,960
operator would be useful<font color="#CCCCCC"> for the corners</font>

731
00:36:52,380 --> 00:36:59,520
okay so for the corners<font color="#E5E5E5"> what we want to</font>

732
00:36:55,960 --> 00:37:03,670
do is we want<font color="#E5E5E5"> to find the sum so</font><font color="#CCCCCC"> far</font>

733
00:36:59,520 --> 00:37:07,509
<font color="#CCCCCC">okay the sum of everything so far</font><font color="#E5E5E5"> can be</font>

734
00:37:03,670 --> 00:37:11,770
<font color="#E5E5E5">done using the triangular</font><font color="#CCCCCC"> reduce</font>

735
00:37:07,510 --> 00:37:15,330
operator<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so you all know the reduce</font>

736
00:37:11,770 --> 00:37:18,220
operator right reduce means<font color="#E5E5E5"> take an</font>

737
00:37:15,330 --> 00:37:20,770
operator<font color="#E5E5E5"> and just put it in</font><font color="#CCCCCC"> between all</font>

738
00:37:18,220 --> 00:37:24,368
the<font color="#CCCCCC"> elements</font><font color="#E5E5E5"> of the list right reduce</font>

739
00:37:20,770 --> 00:37:26,109
says like it's like take<font color="#E5E5E5"> one it's like</font>

740
00:37:24,369 --> 00:37:27,760
<font color="#E5E5E5">take the first thing off</font><font color="#CCCCCC"> use the reduce</font>

741
00:37:26,109 --> 00:37:30,160
operator and then you get something<font color="#CCCCCC"> else</font>

742
00:37:27,760 --> 00:37:32,020
<font color="#E5E5E5">then take</font><font color="#CCCCCC"> the whatever that is</font><font color="#E5E5E5"> use the</font>

743
00:37:30,160 --> 00:37:36,129
reduce operator and do it with<font color="#E5E5E5"> the next</font>

744
00:37:32,020 --> 00:37:39,460
thing so triangular reduce says<font color="#E5E5E5"> okay</font>

745
00:37:36,130 --> 00:37:41,410
it's<font color="#CCCCCC"> just like reduce except all those</font>

746
00:37:39,460 --> 00:37:44,080
little steps<font color="#E5E5E5"> you did along the way like</font>

747
00:37:41,410 --> 00:37:45,460
hold<font color="#E5E5E5"> on to those</font><font color="#CCCCCC"> say save those and</font>

748
00:37:44,080 --> 00:37:47,049
that's why it's a triangle<font color="#CCCCCC"> because you</font>

749
00:37:45,460 --> 00:37:48,850
sort<font color="#E5E5E5"> of generate like one and then say</font>

750
00:37:47,050 --> 00:37:51,790
you're<font color="#E5E5E5"> generating more and</font><font color="#CCCCCC"> more each</font>

751
00:37:48,850 --> 00:37:54,460
time<font color="#CCCCCC"> the way I like to think of</font><font color="#E5E5E5"> a reduce</font>

752
00:37:51,790 --> 00:37:57,580
operator is if you do a sort of a

753
00:37:54,460 --> 00:38:00,730
triangular reduce operator is<font color="#E5E5E5"> that if</font>

754
00:37:57,580 --> 00:38:05,340
you do a reduce if you do a triangular

755
00:38:00,730 --> 00:38:08,560
reduce over addition then from a math

756
00:38:05,340 --> 00:38:12,640
perspective you're turning a sequence

757
00:38:08,560 --> 00:38:14,710
into a series so the the two<font color="#CCCCCC"> words</font>

758
00:38:12,640 --> 00:38:17,950
sequence and series are sometimes used

759
00:38:14,710 --> 00:38:22,420
<font color="#E5E5E5">to refer</font><font color="#CCCCCC"> to just</font><font color="#E5E5E5"> a sequence of</font><font color="#CCCCCC"> values</font><font color="#E5E5E5"> or</font>

760
00:38:17,950 --> 00:38:24,609
a sequence of<font color="#E5E5E5"> partial sums okay so we</font>

761
00:38:22,420 --> 00:38:26,560
<font color="#CCCCCC">are using triangular</font><font color="#E5E5E5"> reduced but it's</font>

762
00:38:24,609 --> 00:38:28,000
not just<font color="#E5E5E5"> addition because</font><font color="#CCCCCC"> they're</font>

763
00:38:26,560 --> 00:38:31,450
vectors right so

764
00:38:28,000 --> 00:38:34,210
it's hyper<font color="#E5E5E5"> edition so to make the</font>

765
00:38:31,450 --> 00:38:36,310
corners we have<font color="#CCCCCC"> reduced which is the</font>

766
00:38:34,210 --> 00:38:38,230
<font color="#E5E5E5">square brackets</font><font color="#CCCCCC"> over</font>

767
00:38:36,310 --> 00:38:40,750
sorry triangular reduce which is the

768
00:38:38,230 --> 00:38:43,330
square brackets over hyper<font color="#CCCCCC"> edition and</font>

769
00:38:40,750 --> 00:38:45,300
then<font color="#E5E5E5"> we put</font><font color="#CCCCCC"> zero zero on at the end okay</font>

770
00:38:43,330 --> 00:38:49,900
and if we look at<font color="#E5E5E5"> the first five corners</font>

771
00:38:45,300 --> 00:38:52,870
<font color="#CCCCCC">that looks like</font><font color="#E5E5E5"> that and</font><font color="#CCCCCC"> by the</font><font color="#E5E5E5"> way</font>

772
00:38:49,900 --> 00:38:56,080
<font color="#E5E5E5">we're also going to</font><font color="#CCCCCC"> need the rotations</font><font color="#E5E5E5"> 0</font>

773
00:38:52,870 --> 00:38:59,609
90 180<font color="#CCCCCC"> you'll see why in the end so</font>

774
00:38:56,080 --> 00:38:59,610
we're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> going to make this list here</font>

775
00:39:00,150 --> 00:39:09,880
<font color="#E5E5E5">so we have</font><font color="#CCCCCC"> 5 infinite sequences and now</font>

776
00:39:07,480 --> 00:39:15,220
let's compute the ratios<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we want</font>

777
00:39:09,880 --> 00:39:17,440
to approximate<font color="#E5E5E5"> the ratios</font><font color="#CCCCCC"> so you can you</font>

778
00:39:15,220 --> 00:39:20,020
<font color="#CCCCCC">can take every pair of things</font><font color="#E5E5E5"> using</font>

779
00:39:17,440 --> 00:39:22,510
rotor<font color="#E5E5E5"> if you want to and then go back</font>

780
00:39:20,020 --> 00:39:23,830
one that's<font color="#E5E5E5"> also rotor so this is like</font>

781
00:39:22,510 --> 00:39:25,410
take two steps forward<font color="#E5E5E5"> and one step</font>

782
00:39:23,830 --> 00:39:30,819
<font color="#E5E5E5">backwards and give me a bunch of pairs</font>

783
00:39:25,410 --> 00:39:33,460
so<font color="#CCCCCC"> that kind of looks like this and then</font>

784
00:39:30,820 --> 00:39:35,590
we're just gonna<font color="#E5E5E5"> use regular old map to</font>

785
00:39:33,460 --> 00:39:37,750
divide the two things one after<font color="#E5E5E5"> the</font>

786
00:39:35,590 --> 00:39:40,930
other<font color="#E5E5E5"> turning into a fat rat to make it</font>

787
00:39:37,750 --> 00:39:43,120
<font color="#CCCCCC">arbitrary-precision running a</font><font color="#E5E5E5"> little low</font>

788
00:39:40,930 --> 00:39:46,149
on<font color="#E5E5E5"> time but this notebook will be</font>

789
00:39:43,120 --> 00:39:49,029
available<font color="#E5E5E5"> and we also want to look at</font>

790
00:39:46,150 --> 00:39:53,380
<font color="#E5E5E5">our accuracy so doing a</font><font color="#CCCCCC"> little algebra</font>

791
00:39:49,030 --> 00:39:55,180
<font color="#CCCCCC">we can see that two are minus ones to</font>

792
00:39:53,380 --> 00:39:56,830
<font color="#CCCCCC">our</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> one squared minus five should</font>

793
00:39:55,180 --> 00:39:58,990
be approximately<font color="#E5E5E5"> zero so we're going to</font>

794
00:39:56,830 --> 00:40:00,819
<font color="#E5E5E5">use this</font><font color="#CCCCCC"> number however</font><font color="#E5E5E5"> close we are to</font>

795
00:39:58,990 --> 00:40:02,620
<font color="#E5E5E5">zero that's how close that's how good</font>

796
00:40:00,820 --> 00:40:08,410
our<font color="#E5E5E5"> accuracy is so far in</font><font color="#CCCCCC"> the Fibonacci</font>

797
00:40:02,620 --> 00:40:13,420
sequence<font color="#E5E5E5"> in the ratio okay</font><font color="#CCCCCC"> so we'll take</font>

798
00:40:08,410 --> 00:40:17,440
the ratios<font color="#E5E5E5"> and convert them into this</font>

799
00:40:13,420 --> 00:40:20,560
form to get an idea<font color="#E5E5E5"> of the accuracy and</font>

800
00:40:17,440 --> 00:40:25,750
then we need<font color="#E5E5E5"> to make a bunch of messages</font>

801
00:40:20,560 --> 00:40:27,700
<font color="#CCCCCC">to send</font><font color="#E5E5E5"> to the client</font><font color="#CCCCCC"> okay so here we</font>

802
00:40:25,750 --> 00:40:30,310
<font color="#E5E5E5">have another little operator thing</font>

803
00:40:27,700 --> 00:40:32,470
happen<font color="#E5E5E5"> I I didn't think of this but then</font>

804
00:40:30,310 --> 00:40:34,690
I was on<font color="#CCCCCC"> a Perl 6 users mailing list and</font>

805
00:40:32,470 --> 00:40:35,930
Larry mentioned<font color="#E5E5E5"> this just by chance the</font>

806
00:40:34,690 --> 00:40:38,210
<font color="#CCCCCC">other day and I</font><font color="#E5E5E5"> thought</font>

807
00:40:35,930 --> 00:40:41,419
I have a way<font color="#E5E5E5"> to use that and that</font><font color="#CCCCCC"> is a</font>

808
00:40:38,210 --> 00:40:47,450
<font color="#E5E5E5">reduction using zip and comma so we have</font>

809
00:40:41,420 --> 00:40:49,640
a bunch of arrays<font color="#CCCCCC"> and essentially we</font>

810
00:40:47,450 --> 00:40:51,859
want<font color="#E5E5E5"> to take the first element</font><font color="#CCCCCC"> of all of</font>

811
00:40:49,640 --> 00:40:52,460
them<font color="#CCCCCC"> the second</font><font color="#E5E5E5"> all second element of</font>

812
00:40:51,860 --> 00:40:54,680
all of them

813
00:40:52,460 --> 00:40:56,450
the third<font color="#CCCCCC"> element of all of them and so</font>

814
00:40:54,680 --> 00:41:01,040
<font color="#E5E5E5">essentially we're</font><font color="#CCCCCC"> zipping them together</font>

815
00:40:56,450 --> 00:41:03,439
<font color="#E5E5E5">with comma</font><font color="#CCCCCC"> one at a</font><font color="#E5E5E5"> time to sort of make</font>

816
00:41:01,040 --> 00:41:05,660
a bunch of tuples<font color="#E5E5E5"> but</font><font color="#CCCCCC"> since we have zip</font>

817
00:41:03,440 --> 00:41:09,290
comma in between<font color="#E5E5E5"> all of our arrays we</font>

818
00:41:05,660 --> 00:41:11,440
can use reduce to simplify that<font color="#CCCCCC"> and so</font>

819
00:41:09,290 --> 00:41:13,730
then we're mapping<font color="#CCCCCC"> that to a little hash</font>

820
00:41:11,440 --> 00:41:15,290
<font color="#CCCCCC">notice some of these things stir we're</font>

821
00:41:13,730 --> 00:41:17,720
stringify because it's<font color="#CCCCCC"> arbitrary</font>

822
00:41:15,290 --> 00:41:19,700
precision<font color="#CCCCCC"> and a nude stands for</font>

823
00:41:17,720 --> 00:41:22,250
numerator denominator<font color="#CCCCCC"> so we're gonna get</font>

824
00:41:19,700 --> 00:41:26,899
those<font color="#E5E5E5"> things</font><font color="#CCCCCC"> and we also stringify the</font>

825
00:41:22,250 --> 00:41:30,770
accuracy okay<font color="#E5E5E5"> and so now</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> set up our</font>

826
00:41:26,900 --> 00:41:36,500
<font color="#CCCCCC">comm on the back end and on the</font><font color="#E5E5E5"> client</font>

827
00:41:30,770 --> 00:41:38,570
<font color="#E5E5E5">side</font><font color="#CCCCCC"> we bring in d3 and then we have</font>

828
00:41:36,500 --> 00:41:41,120
some JavaScript<font color="#E5E5E5"> which I will not go</font>

829
00:41:38,570 --> 00:41:44,140
through which<font color="#E5E5E5"> I've defined for adding a</font>

830
00:41:41,120 --> 00:41:48,140
square and zooming out<font color="#E5E5E5"> a little bit</font>

831
00:41:44,140 --> 00:41:52,060
<font color="#CCCCCC">finally we create</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> comm on the front</font>

832
00:41:48,140 --> 00:41:56,600
end<font color="#E5E5E5"> and every time we get a new message</font>

833
00:41:52,060 --> 00:41:58,730
we we add the square to our drawing<font color="#CCCCCC"> we</font>

834
00:41:56,600 --> 00:42:02,029
zoom out a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit and we show the</font>

835
00:41:58,730 --> 00:42:07,160
ratio<font color="#CCCCCC"> that we got from the server so</font>

836
00:42:02,030 --> 00:42:10,670
let's see what happens<font color="#E5E5E5"> here okay so here</font>

837
00:42:07,160 --> 00:42:13,509
<font color="#CCCCCC">we get our ratios</font><font color="#E5E5E5"> we're drawing using</font>

838
00:42:10,670 --> 00:42:16,190
the rotations we're drawing a new

839
00:42:13,510 --> 00:42:17,960
rectangle and the ratio of the width<font color="#E5E5E5"> of</font>

840
00:42:16,190 --> 00:42:20,680
<font color="#E5E5E5">the height is getting closer and closer</font>

841
00:42:17,960 --> 00:42:23,600
<font color="#E5E5E5">to the golden</font><font color="#CCCCCC"> ratio every time for</font><font color="#E5E5E5"> every</font>

842
00:42:20,680 --> 00:42:25,220
<font color="#E5E5E5">square that we add and you can see the</font>

843
00:42:23,600 --> 00:42:26,990
<font color="#CCCCCC">accuracy so there's no rounding here</font>

844
00:42:25,220 --> 00:42:28,520
right this<font color="#E5E5E5"> is arbitrary precision so you</font>

845
00:42:26,990 --> 00:42:31,939
can sort<font color="#E5E5E5"> of see</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> accuracy on</font><font color="#CCCCCC"> the</font>

846
00:42:28,520 --> 00:42:35,470
<font color="#E5E5E5">bottom you can</font><font color="#CCCCCC"> see the exact ratio as it</font>

847
00:42:31,940 --> 00:42:35,470
approaches<font color="#E5E5E5"> the</font><font color="#CCCCCC"> golden</font><font color="#E5E5E5"> mean</font>

848
00:42:35,540 --> 00:42:40,009
so in conclusion<font color="#E5E5E5"> Pro</font><font color="#CCCCCC"> six has a lot of</font>

849
00:42:38,570 --> 00:42:43,220
<font color="#E5E5E5">cool features</font><font color="#CCCCCC"> that work well with</font>

850
00:42:40,010 --> 00:42:44,960
<font color="#E5E5E5">Jupiter</font><font color="#CCCCCC"> previous example so I sort of</font>

851
00:42:43,220 --> 00:42:46,250
slowed it down a little<font color="#E5E5E5"> but in general</font>

852
00:42:44,960 --> 00:42:48,600
you<font color="#E5E5E5"> could use it for something that</font>

853
00:42:46,250 --> 00:42:50,850
<font color="#E5E5E5">takes a while computationally that</font>

854
00:42:48,600 --> 00:42:54,180
sends<font color="#E5E5E5"> back data as its able to make the</font>

855
00:42:50,850 --> 00:42:57,180
computations<font color="#CCCCCC"> the Unicode</font><font color="#E5E5E5"> supports in the</font>

856
00:42:54,180 --> 00:42:59,160
kernel is helpful<font color="#CCCCCC"> other things</font><font color="#E5E5E5"> like</font>

857
00:42:57,180 --> 00:43:02,250
infinite sequences and rational

858
00:42:59,160 --> 00:43:05,279
arithmetic<font color="#CCCCCC"> can be cool for doing</font>

859
00:43:02,250 --> 00:43:06,930
analyses<font color="#CCCCCC"> there's still a lot of</font><font color="#E5E5E5"> open</font>

860
00:43:05,280 --> 00:43:09,000
<font color="#CCCCCC">questions the one</font><font color="#E5E5E5"> on the bottom</font>

861
00:43:06,930 --> 00:43:12,029
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> is interesting you know what</font>

862
00:43:09,000 --> 00:43:14,130
do we<font color="#E5E5E5"> want in the native Perl 6 repple</font>

863
00:43:12,030 --> 00:43:19,440
<font color="#E5E5E5">how rich of a rich of a</font><font color="#CCCCCC"> ripple should it</font>

864
00:43:14,130 --> 00:43:22,110
be or how minimal should it be that's it

865
00:43:19,440 --> 00:43:23,700
<font color="#CCCCCC">thank</font><font color="#E5E5E5"> thank you all thanks</font><font color="#CCCCCC"> to the people</font>

866
00:43:22,110 --> 00:43:26,790
<font color="#E5E5E5">that's helped me with this presentation</font>

867
00:43:23,700 --> 00:43:28,589
<font color="#E5E5E5">and if you want to run</font><font color="#CCCCCC"> this talk there's</font>

868
00:43:26,790 --> 00:43:31,080
a git repository I'll put<font color="#E5E5E5"> this link into</font>

869
00:43:28,590 --> 00:43:32,550
<font color="#CCCCCC">the</font><font color="#E5E5E5"> FOSDEM program but you can actually</font>

870
00:43:31,080 --> 00:43:35,870
just<font color="#CCCCCC"> spin it up and</font><font color="#E5E5E5"> just go through it</font>

871
00:43:32,550 --> 00:43:38,720
yourself<font color="#E5E5E5"> and change it and break</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

872
00:43:35,870 --> 00:43:44,180
do whatever you want<font color="#E5E5E5"> so thank you</font>

873
00:43:38,720 --> 00:43:44,180
[Applause]

874
00:43:46,040 --> 00:43:54,810
<font color="#E5E5E5">maybe I think I'm out of time for</font>

875
00:43:48,450 --> 00:44:00,290
question<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> okay</font>

876
00:43:54,810 --> 00:44:00,290
question any question<font color="#CCCCCC"> or anything yes</font>

877
00:44:22,619 --> 00:44:39,219
how did you<font color="#CCCCCC"> say how difficult is it how</font>

878
00:44:34,779 --> 00:44:42,219
closes it to a native Python compiler<font color="#CCCCCC"> so</font>

879
00:44:39,219 --> 00:44:44,319
there's<font color="#CCCCCC"> there</font><font color="#E5E5E5"> still</font><font color="#CCCCCC"> - running in the</font>

880
00:44:42,219 --> 00:44:48,009
<font color="#E5E5E5">middle doing the server so it's</font>

881
00:44:44,319 --> 00:44:51,609
basically the<font color="#E5E5E5"> Perl 6 is doing the 0 mq</font>

882
00:44:48,009 --> 00:44:54,959
communication to the server<font color="#E5E5E5"> and so it's</font>

883
00:44:51,609 --> 00:44:54,959
implementing the<font color="#E5E5E5"> same protocol</font>

