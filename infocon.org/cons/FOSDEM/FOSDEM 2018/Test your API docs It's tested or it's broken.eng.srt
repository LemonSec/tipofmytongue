1
00:00:05,270 --> 00:00:08,390
[Music]

2
00:00:11,059 --> 00:00:15,530
<font color="#E5E5E5">okay so welcome to my talk</font>

3
00:00:15,839 --> 00:00:21,960
my name is honza and I pried open source

4
00:00:19,770 --> 00:00:24,660
for<font color="#E5E5E5"> APA which was acquired</font><font color="#CCCCCC"> by Oracle</font>

5
00:00:21,960 --> 00:00:28,320
last year<font color="#E5E5E5"> so those are the new masters</font>

6
00:00:24,660 --> 00:00:32,369
and I'm sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Hebei cartoonist as you</font>

7
00:00:28,320 --> 00:00:34,739
can see and I write software<font color="#E5E5E5"> into</font>

8
00:00:32,369 --> 00:00:38,070
programming<font color="#E5E5E5"> languages</font><font color="#CCCCCC"> mostly in</font>

9
00:00:34,739 --> 00:00:41,280
JavaScript<font color="#CCCCCC"> and in Python and while</font>

10
00:00:38,070 --> 00:00:45,510
<font color="#CCCCCC">JavaScript is my day job</font>

11
00:00:41,280 --> 00:00:47,460
<font color="#CCCCCC">Python is something I do with love and</font>

12
00:00:45,510 --> 00:00:48,890
I'm actually also<font color="#E5E5E5"> sort of patent</font>

13
00:00:47,460 --> 00:00:52,079
<font color="#E5E5E5">activist</font>

14
00:00:48,890 --> 00:00:55,019
and back in the Czech Republic<font color="#CCCCCC"> I helped</font>

15
00:00:52,079 --> 00:00:56,969
to to grow the local<font color="#E5E5E5"> community and so on</font>

16
00:00:55,019 --> 00:00:59,519
<font color="#CCCCCC">and when talking</font><font color="#E5E5E5"> about this I have to</font>

17
00:00:56,969 --> 00:01:01,199
tell<font color="#E5E5E5"> you little advertisement here I'm</font>

18
00:00:59,519 --> 00:01:03,989
part of the organizers team of the<font color="#CCCCCC"> bike</font>

19
00:01:01,199 --> 00:01:07,200
<font color="#CCCCCC">and of seize</font><font color="#E5E5E5"> it and I invite you to</font>

20
00:01:03,989 --> 00:01:08,030
submit talks and workshops to<font color="#E5E5E5"> just open</font>

21
00:01:07,200 --> 00:01:10,410
call for<font color="#CCCCCC"> papers</font>

22
00:01:08,030 --> 00:01:12,690
it is amazing conference<font color="#E5E5E5"> it has</font>

23
00:01:10,410 --> 00:01:15,630
everything conference needs to have like

24
00:01:12,690 --> 00:01:18,810
talks workshops people<font color="#E5E5E5"> playing ukulele</font>

25
00:01:15,630 --> 00:01:23,100
people having a good time<font color="#E5E5E5"> between</font>

26
00:01:18,810 --> 00:01:27,159
<font color="#E5E5E5">Highway and railway people</font>

27
00:01:23,100 --> 00:01:31,030
people partying<font color="#E5E5E5"> and people making people</font>

28
00:01:27,159 --> 00:01:33,479
pyramids<font color="#E5E5E5"> after</font><font color="#CCCCCC"> partying and it is in</font>

29
00:01:31,030 --> 00:01:37,869
<font color="#CCCCCC">Prak which has a lot of medieval houses</font>

30
00:01:33,479 --> 00:01:43,479
<font color="#E5E5E5">nothing against Brussels</font><font color="#CCCCCC"> and it is in</font>

31
00:01:37,869 --> 00:01:46,869
the Czech<font color="#CCCCCC"> Republic</font><font color="#E5E5E5"> I I've seen</font><font color="#CCCCCC"> I've seen</font>

32
00:01:43,479 --> 00:01:50,710
<font color="#E5E5E5">a theme here on FOSDEM</font><font color="#CCCCCC"> and in Brussels</font>

33
00:01:46,869 --> 00:01:52,539
<font color="#E5E5E5">and in Belgium</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> beer is the thing</font>

34
00:01:50,710 --> 00:01:56,470
here and<font color="#E5E5E5"> I want to assure you the Czech</font>

35
00:01:52,539 --> 00:02:00,250
Republic takes beer very seriously<font color="#CCCCCC"> so</font>

36
00:01:56,470 --> 00:02:02,740
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> PyCon</font><font color="#E5E5E5"> she said and this is end</font>

37
00:02:00,250 --> 00:02:06,549
of my little<font color="#E5E5E5"> advertisement now let's get</font>

38
00:02:02,740 --> 00:02:08,530
to<font color="#E5E5E5"> the talk</font><font color="#CCCCCC"> serious</font><font color="#E5E5E5"> stuff so API</font><font color="#CCCCCC"> it</font>

39
00:02:06,549 --> 00:02:11,530
<font color="#E5E5E5">probably came here to learn about this</font>

40
00:02:08,530 --> 00:02:14,650
thing<font color="#E5E5E5"> or API and I want you to</font>

41
00:02:11,530 --> 00:02:18,640
understand<font color="#CCCCCC"> why should you do that</font>

42
00:02:14,650 --> 00:02:21,280
<font color="#E5E5E5">like what is the why because how is easy</font>

43
00:02:18,640 --> 00:02:26,768
to<font color="#E5E5E5"> Google out but nobody tells you the</font>

44
00:02:21,280 --> 00:02:29,139
why so API it is<font color="#E5E5E5"> application programming</font>

45
00:02:26,769 --> 00:02:32,920
interface and the interface word is the

46
00:02:29,139 --> 00:02:36,400
<font color="#E5E5E5">most important here we have interface of</font>

47
00:02:32,920 --> 00:02:38,319
libraries as a Biden developer I can

48
00:02:36,400 --> 00:02:41,500
write my Python program I<font color="#E5E5E5"> can install</font>

49
00:02:38,319 --> 00:02:45,310
Django<font color="#E5E5E5"> which is a web framework</font><font color="#CCCCCC"> and then</font>

50
00:02:41,500 --> 00:02:48,970
I can use<font color="#E5E5E5"> its interface to leverage</font>

51
00:02:45,310 --> 00:02:50,440
whatever<font color="#CCCCCC"> Django offers to me then the</font>

52
00:02:48,970 --> 00:02:53,079
internet came and we started<font color="#CCCCCC"> to talk</font>

53
00:02:50,440 --> 00:02:57,370
<font color="#E5E5E5">about interface of systems so I can curl</font>

54
00:02:53,079 --> 00:03:00,160
the<font color="#E5E5E5"> github API and through to get up</font>

55
00:02:57,370 --> 00:03:02,859
interface like the HTTP interface<font color="#E5E5E5"> I can</font>

56
00:03:00,160 --> 00:03:08,620
<font color="#E5E5E5">do whatever I need</font><font color="#CCCCCC"> with get up I can get</font>

57
00:03:02,859 --> 00:03:11,650
<font color="#E5E5E5">information from get up and this all</font>

58
00:03:08,620 --> 00:03:13,930
seems quite technical like computers

59
00:03:11,650 --> 00:03:19,000
<font color="#E5E5E5">talking each other and</font><font color="#CCCCCC"> programs talking</font>

60
00:03:13,930 --> 00:03:21,549
each other<font color="#CCCCCC"> but it's more</font><font color="#E5E5E5"> because as I</font>

61
00:03:19,000 --> 00:03:24,819
said<font color="#E5E5E5"> previously I need to get some</font>

62
00:03:21,549 --> 00:03:29,680
information<font color="#CCCCCC"> from get</font><font color="#E5E5E5"> up I need to use</font>

63
00:03:24,819 --> 00:03:32,760
whatever<font color="#E5E5E5"> Django offers so it is it is</font>

64
00:03:29,680 --> 00:03:35,470
something between computer and the user

65
00:03:32,760 --> 00:03:38,980
<font color="#E5E5E5">so every interface</font>

66
00:03:35,470 --> 00:03:41,700
is<font color="#E5E5E5"> user interface even the Web</font><font color="#CCCCCC"> API or</font>

67
00:03:38,980 --> 00:03:44,769
the<font color="#E5E5E5"> interface</font><font color="#CCCCCC"> of the jungle library</font><font color="#E5E5E5"> and</font>

68
00:03:41,700 --> 00:03:49,269
as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> user interface</font><font color="#CCCCCC"> it should be</font><font color="#E5E5E5"> treated</font>

69
00:03:44,770 --> 00:03:53,010
<font color="#E5E5E5">as such</font><font color="#CCCCCC"> you may not</font><font color="#E5E5E5"> see the code</font>

70
00:03:49,270 --> 00:03:57,040
properly but just<font color="#CCCCCC"> imagine this</font><font color="#E5E5E5"> is a</font>

71
00:03:53,010 --> 00:04:01,120
simple HTTP request made<font color="#CCCCCC"> by</font><font color="#E5E5E5"> a standard</font>

72
00:03:57,040 --> 00:04:02,650
Python library<font color="#E5E5E5"> so when you want to do a</font>

73
00:04:01,120 --> 00:04:04,810
simple HTTP request

74
00:04:02,650 --> 00:04:07,959
you need to<font color="#E5E5E5"> write</font><font color="#CCCCCC"> I don't know ten lines</font>

75
00:04:04,810 --> 00:04:10,140
<font color="#E5E5E5">of this crazy code just because you</font>

76
00:04:07,959 --> 00:04:15,060
wanted<font color="#CCCCCC"> to pass</font><font color="#E5E5E5"> a user and password</font>

77
00:04:10,140 --> 00:04:15,059
<font color="#CCCCCC">except of just requesting a simple URL</font>

78
00:04:15,120 --> 00:04:21,700
<font color="#CCCCCC">do you like this coat I mean</font><font color="#E5E5E5"> doesn't</font>

79
00:04:17,980 --> 00:04:26,160
<font color="#E5E5E5">matter if you like Python or not</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is</font>

80
00:04:21,700 --> 00:04:28,060
long it<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> very readable writable</font>

81
00:04:26,160 --> 00:04:30,880
maintainable

82
00:04:28,060 --> 00:04:33,030
it's basically<font color="#E5E5E5"> with single word it's</font>

83
00:04:30,880 --> 00:04:33,030
ugly

84
00:04:33,690 --> 00:04:41,919
then person called<font color="#CCCCCC"> kena traits came and</font>

85
00:04:38,740 --> 00:04:45,310
realize this can't be like<font color="#E5E5E5"> this anymore</font>

86
00:04:41,919 --> 00:04:48,190
<font color="#E5E5E5">and wrote a library core called</font><font color="#CCCCCC"> requests</font>

87
00:04:45,310 --> 00:04:51,970
and the claim of this library<font color="#E5E5E5"> is</font><font color="#CCCCCC"> it's</font>

88
00:04:48,190 --> 00:04:56,070
HTTP<font color="#CCCCCC"> for humans so with the directness</font>

89
00:04:51,970 --> 00:04:59,290
library the it looks like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> and</font>

90
00:04:56,070 --> 00:05:01,510
please note that<font color="#E5E5E5"> just the first line is</font>

91
00:04:59,290 --> 00:05:04,030
usage of the library<font color="#CCCCCC"> the rest is just</font>

92
00:05:01,510 --> 00:05:07,810
inspecting the response<font color="#E5E5E5"> so we basically</font>

93
00:05:04,030 --> 00:05:11,530
<font color="#E5E5E5">got a</font><font color="#CCCCCC"> van liner which is readable which</font>

94
00:05:07,810 --> 00:05:16,540
is writable maintainable it's it's

95
00:05:11,530 --> 00:05:19,390
beautiful<font color="#CCCCCC"> and as you can see the</font>

96
00:05:16,540 --> 00:05:24,970
differences between interfaces are very

97
00:05:19,390 --> 00:05:28,750
user oriented<font color="#E5E5E5"> because the machine in in</font>

98
00:05:24,970 --> 00:05:31,510
this case<font color="#E5E5E5"> and in</font><font color="#CCCCCC"> this case the computer</font>

99
00:05:28,750 --> 00:05:34,930
<font color="#E5E5E5">gets basically the same instructions the</font>

100
00:05:31,510 --> 00:05:39,000
machine<font color="#E5E5E5"> doesn't care it's perfectly fine</font>

101
00:05:34,930 --> 00:05:39,000
with both but the user cares

102
00:05:39,070 --> 00:05:48,790
so how do you<font color="#E5E5E5"> design the</font><font color="#CCCCCC"> interface in a</font>

103
00:05:41,380 --> 00:05:51,300
way that is appealing<font color="#CCCCCC"> also to users do</font>

104
00:05:48,790 --> 00:05:54,700
<font color="#CCCCCC">you need to position</font><font color="#E5E5E5"> yourself in</font><font color="#CCCCCC"> to</font>

105
00:05:51,300 --> 00:06:00,220
basically in the role of your future

106
00:05:54,700 --> 00:06:02,650
user<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that case you should</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> enough</font>

107
00:06:00,220 --> 00:06:04,960
<font color="#CCCCCC">empathy to design something which</font>

108
00:06:02,650 --> 00:06:08,380
actually<font color="#E5E5E5"> makes sense and it's usable and</font>

109
00:06:04,960 --> 00:06:11,530
so on<font color="#E5E5E5"> because</font><font color="#CCCCCC"> otherwise you just as the</font>

110
00:06:08,380 --> 00:06:14,170
author of the library or<font color="#E5E5E5"> of the web api</font>

111
00:06:11,530 --> 00:06:19,150
<font color="#CCCCCC">you just write</font><font color="#E5E5E5"> a couple of functions</font>

112
00:06:14,170 --> 00:06:22,510
into a file and call the file a library

113
00:06:19,150 --> 00:06:27,849
and<font color="#E5E5E5"> if user complaints you just say do</font>

114
00:06:22,510 --> 00:06:29,920
with it<font color="#E5E5E5"> you know it worked for me how do</font>

115
00:06:27,850 --> 00:06:35,410
you do that how do you<font color="#E5E5E5"> position yourself</font>

116
00:06:29,920 --> 00:06:38,880
as as your user<font color="#E5E5E5"> well the easiest way</font><font color="#CCCCCC"> is</font>

117
00:06:35,410 --> 00:06:42,040
<font color="#E5E5E5">to write</font><font color="#CCCCCC"> tests</font><font color="#E5E5E5"> because in</font><font color="#CCCCCC"> tests I'm</font>

118
00:06:38,880 --> 00:06:44,740
easily<font color="#E5E5E5"> positioned as the</font><font color="#CCCCCC"> first user of</font>

119
00:06:42,040 --> 00:06:47,200
the library here<font color="#CCCCCC"> I need to use the</font>

120
00:06:44,740 --> 00:06:50,290
<font color="#CCCCCC">library to actually write actual tests</font>

121
00:06:47,200 --> 00:06:54,510
<font color="#E5E5E5">to call it to inspect whatever it</font>

122
00:06:50,290 --> 00:06:59,080
returns but it needs to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> first</font>

123
00:06:54,510 --> 00:07:02,440
because I need to<font color="#E5E5E5"> think first before the</font>

124
00:06:59,080 --> 00:07:04,690
<font color="#E5E5E5">actual coding so I need to think about</font>

125
00:07:02,440 --> 00:07:07,770
<font color="#E5E5E5">the interface</font><font color="#CCCCCC"> I need to write the</font><font color="#E5E5E5"> test</font>

126
00:07:04,690 --> 00:07:10,360
first<font color="#E5E5E5"> I need to write the library</font><font color="#CCCCCC"> write</font>

127
00:07:07,770 --> 00:07:13,890
the code which uses the library<font color="#E5E5E5"> before</font>

128
00:07:10,360 --> 00:07:16,210
<font color="#E5E5E5">the library exists so this is DVD</font>

129
00:07:13,890 --> 00:07:19,599
<font color="#CCCCCC">test-driven development I write</font><font color="#E5E5E5"> a test</font>

130
00:07:16,210 --> 00:07:24,219
first<font color="#E5E5E5"> and this helps</font><font color="#CCCCCC"> to design the</font>

131
00:07:19,600 --> 00:07:28,000
interface<font color="#CCCCCC"> I I pretend that</font><font color="#E5E5E5"> the library</font>

132
00:07:24,220 --> 00:07:29,800
exists<font color="#CCCCCC"> I write a test i test it it fails</font>

133
00:07:28,000 --> 00:07:34,230
because<font color="#CCCCCC"> the library doesn't</font><font color="#E5E5E5"> exist</font><font color="#CCCCCC"> and</font>

134
00:07:29,800 --> 00:07:34,230
then<font color="#CCCCCC"> i implement until the test is green</font>

135
00:07:34,900 --> 00:07:44,020
what can I do else<font color="#E5E5E5"> I can write down the</font>

136
00:07:38,410 --> 00:07:47,050
behavior first<font color="#CCCCCC"> I don't know how many of</font>

137
00:07:44,020 --> 00:07:51,159
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> gherkin or cucumber or familiar</font>

138
00:07:47,050 --> 00:07:53,560
<font color="#E5E5E5">with it's quite a lot okay so imagine</font>

139
00:07:51,160 --> 00:07:57,450
<font color="#CCCCCC">there text files like this it's simple</font>

140
00:07:53,560 --> 00:08:00,400
text file but<font color="#E5E5E5"> it's structured and you</font>

141
00:07:57,450 --> 00:08:03,610
<font color="#CCCCCC">write down</font><font color="#E5E5E5"> behavior of the of your</font>

142
00:08:00,400 --> 00:08:06,370
program<font color="#E5E5E5"> into this file the benefit of</font>

143
00:08:03,610 --> 00:08:10,680
this is<font color="#E5E5E5"> you focus</font><font color="#CCCCCC"> on the behavior of</font><font color="#E5E5E5"> the</font>

144
00:08:06,370 --> 00:08:13,150
program<font color="#E5E5E5"> from a user perspective and you</font>

145
00:08:10,680 --> 00:08:16,210
can write this before the implementation

146
00:08:13,150 --> 00:08:19,570
<font color="#CCCCCC">actually exists and because it's just</font>

147
00:08:16,210 --> 00:08:21,099
<font color="#CCCCCC">human readable file and</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> version</font>

148
00:08:19,570 --> 00:08:24,370
<font color="#E5E5E5">blind</font><font color="#CCCCCC"> so on you can put</font><font color="#E5E5E5"> it on github you</font>

149
00:08:21,100 --> 00:08:28,240
<font color="#E5E5E5">can share it with whoever you want</font><font color="#CCCCCC"> like</font>

150
00:08:24,370 --> 00:08:30,400
your clicks or<font color="#E5E5E5"> with your customer so you</font>

151
00:08:28,240 --> 00:08:35,020
can easily<font color="#E5E5E5"> agree on the behavior of the</font>

152
00:08:30,400 --> 00:08:38,260
<font color="#CCCCCC">program</font><font color="#E5E5E5"> and then you have it coded in</font>

153
00:08:35,020 --> 00:08:41,980
these text files<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the benefit of this</font>

154
00:08:38,260 --> 00:08:45,819
is that<font color="#CCCCCC"> you can test</font><font color="#E5E5E5"> it it is possible</font>

155
00:08:41,980 --> 00:08:49,870
<font color="#CCCCCC">and you can write tests which tests</font><font color="#E5E5E5"> the</font>

156
00:08:45,820 --> 00:08:53,920
behavior written in the files<font color="#E5E5E5"> this is</font>

157
00:08:49,870 --> 00:08:56,080
this is very<font color="#E5E5E5"> amazing because you think</font>

158
00:08:53,920 --> 00:08:58,540
<font color="#E5E5E5">about the</font><font color="#CCCCCC"> behavior</font><font color="#E5E5E5"> you write it down</font>

159
00:08:56,080 --> 00:09:04,570
agree<font color="#E5E5E5"> with people on the behavior and</font>

160
00:08:58,540 --> 00:09:06,310
then you write<font color="#E5E5E5"> a implementation but who</font>

161
00:09:04,570 --> 00:09:09,310
says the implementation is according<font color="#CCCCCC"> to</font>

162
00:09:06,310 --> 00:09:13,000
the behavior<font color="#E5E5E5"> well you never you can</font>

163
00:09:09,310 --> 00:09:15,250
<font color="#E5E5E5">never be sure but with the tests you can</font>

164
00:09:13,000 --> 00:09:18,220
automate that you can be always sure

165
00:09:15,250 --> 00:09:23,100
<font color="#E5E5E5">that the implementation fits the</font>

166
00:09:18,220 --> 00:09:26,470
original description<font color="#E5E5E5"> is important part</font>

167
00:09:23,100 --> 00:09:29,020
the<font color="#E5E5E5"> most important part</font><font color="#CCCCCC"> so you design</font>

168
00:09:26,470 --> 00:09:31,540
the thing you<font color="#E5E5E5"> set up the tests and then</font>

169
00:09:29,020 --> 00:09:33,819
<font color="#E5E5E5">you implement and and you're</font>

170
00:09:31,540 --> 00:09:35,530
implementing implementing until the

171
00:09:33,820 --> 00:09:40,990
implementation<font color="#CCCCCC"> actually fits the</font>

172
00:09:35,530 --> 00:09:42,850
<font color="#E5E5E5">original design</font><font color="#CCCCCC"> so you think</font><font color="#E5E5E5"> agree you</font>

173
00:09:40,990 --> 00:09:45,670
<font color="#CCCCCC">promised something</font><font color="#E5E5E5"> to your users your</font>

174
00:09:42,850 --> 00:09:49,080
customer then<font color="#CCCCCC"> you set up the</font><font color="#E5E5E5"> tests and</font>

175
00:09:45,670 --> 00:09:52,240
you<font color="#E5E5E5"> test and you</font><font color="#CCCCCC"> fulfill</font><font color="#E5E5E5"> the promise</font>

176
00:09:49,080 --> 00:09:56,230
but back to cannot race who made the

177
00:09:52,240 --> 00:10:00,300
request<font color="#E5E5E5"> library how did he design the</font>

178
00:09:56,230 --> 00:10:03,600
<font color="#E5E5E5">request library what approach did he use</font>

179
00:10:00,300 --> 00:10:07,540
he wrote an article which makes this

180
00:10:03,600 --> 00:10:10,000
this<font color="#E5E5E5"> question easier</font><font color="#CCCCCC"> how I develop</font>

181
00:10:07,540 --> 00:10:12,819
things and why<font color="#E5E5E5"> and in this article he</font>

182
00:10:10,000 --> 00:10:15,730
<font color="#CCCCCC">says before I start writing a single</font>

183
00:10:12,820 --> 00:10:18,640
line of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> I write the readme</font><font color="#E5E5E5"> and fill</font>

184
00:10:15,730 --> 00:10:20,740
it with usage examples<font color="#E5E5E5"> I pretend that</font>

185
00:10:18,640 --> 00:10:23,080
<font color="#E5E5E5">the module I want to build is already</font>

186
00:10:20,740 --> 00:10:28,410
written<font color="#E5E5E5"> and available and I write some</font>

187
00:10:23,080 --> 00:10:33,070
code with it<font color="#E5E5E5"> and this approach is called</font>

188
00:10:28,410 --> 00:10:36,550
readme driven development Tom Preston

189
00:10:33,070 --> 00:10:41,440
<font color="#E5E5E5">Werner wrote article about this</font><font color="#CCCCCC"> in 2010</font>

190
00:10:36,550 --> 00:10:44,829
<font color="#E5E5E5">and the thing goes like this</font><font color="#CCCCCC"> you have</font>

191
00:10:41,440 --> 00:10:47,050
simple readme file<font color="#E5E5E5"> and it contains</font>

192
00:10:44,830 --> 00:10:50,770
couple sentences or whatever the library

193
00:10:47,050 --> 00:10:54,150
- and usage examples<font color="#E5E5E5"> and those are like</font>

194
00:10:50,770 --> 00:10:57,280
crucial the essential usage examples

195
00:10:54,150 --> 00:11:00,579
like the the<font color="#E5E5E5"> most important stuff so</font><font color="#CCCCCC"> the</font>

196
00:10:57,280 --> 00:11:05,110
user actually understands how library

197
00:11:00,580 --> 00:11:07,180
works<font color="#E5E5E5"> and the benefits are you have</font>

198
00:11:05,110 --> 00:11:09,370
chance to<font color="#E5E5E5"> think through the project</font>

199
00:11:07,180 --> 00:11:14,079
<font color="#E5E5E5">first it's very important it helps to</font>

200
00:11:09,370 --> 00:11:17,260
design the interface and you don't you

201
00:11:14,080 --> 00:11:20,020
<font color="#E5E5E5">don't have to go and write</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> docs</font><font color="#CCCCCC"> when</font>

202
00:11:17,260 --> 00:11:24,030
you are done with<font color="#E5E5E5"> your project</font><font color="#CCCCCC"> because</font>

203
00:11:20,020 --> 00:11:27,579
at the<font color="#E5E5E5"> time the docs already exist</font><font color="#CCCCCC"> and</font>

204
00:11:24,030 --> 00:11:30,189
<font color="#CCCCCC">that's with</font><font color="#E5E5E5"> the cucumber and</font><font color="#CCCCCC"> so on you</font>

205
00:11:27,580 --> 00:11:32,050
can use the interface<font color="#E5E5E5"> before</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> exist</font>

206
00:11:30,190 --> 00:11:33,730
<font color="#CCCCCC">you can show it your</font><font color="#E5E5E5"> colleagues and they</font>

207
00:11:32,050 --> 00:11:35,199
can<font color="#E5E5E5"> actually write code which uses the</font>

208
00:11:33,730 --> 00:11:37,960
library<font color="#E5E5E5"> because they know the interface</font>

209
00:11:35,200 --> 00:11:39,820
right or they can tell you oh well this

210
00:11:37,960 --> 00:11:41,530
parameter I don't know I didn't like<font color="#E5E5E5"> it</font>

211
00:11:39,820 --> 00:11:46,270
and you can change<font color="#E5E5E5"> it before</font><font color="#CCCCCC"> you</font>

212
00:11:41,530 --> 00:11:46,839
actually start<font color="#CCCCCC"> to write code and</font><font color="#E5E5E5"> in the</font>

213
00:11:46,270 --> 00:11:49,870
readme

214
00:11:46,840 --> 00:11:55,050
you put the essential interface user

215
00:11:49,870 --> 00:11:56,950
expects that means whatever<font color="#E5E5E5"> is in readme</font>

216
00:11:55,050 --> 00:11:59,229
when it's broken

217
00:11:56,950 --> 00:12:02,630
your<font color="#CCCCCC"> library is broken</font>

218
00:11:59,230 --> 00:12:05,180
if it's not in<font color="#CCCCCC"> readme</font><font color="#E5E5E5"> it's a back it can</font>

219
00:12:02,630 --> 00:12:06,800
<font color="#E5E5E5">go to issues and</font><font color="#CCCCCC"> so on</font><font color="#E5E5E5"> but when it's in</font>

220
00:12:05,180 --> 00:12:09,109
read me your whole library<font color="#E5E5E5"> is broken</font>

221
00:12:06,800 --> 00:12:11,510
<font color="#E5E5E5">because user comes to read me</font><font color="#CCCCCC"> copy/paste</font>

222
00:12:09,110 --> 00:12:14,150
the example put it into<font color="#CCCCCC"> terminal and if</font>

223
00:12:11,510 --> 00:12:16,550
it doesn't<font color="#E5E5E5"> work then</font><font color="#CCCCCC"> library is broken</font>

224
00:12:14,150 --> 00:12:20,689
and<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to look for a different</font>

225
00:12:16,550 --> 00:12:22,959
library<font color="#E5E5E5"> so it's essential interface it's</font>

226
00:12:20,690 --> 00:12:28,640
essential contract with your users

227
00:12:22,960 --> 00:12:31,970
but again yeah and this must not get out

228
00:12:28,640 --> 00:12:36,110
<font color="#CCCCCC">of sync with code</font><font color="#E5E5E5"> but how do we achieve</font>

229
00:12:31,970 --> 00:12:41,690
this<font color="#E5E5E5"> again like we have some promise and</font>

230
00:12:36,110 --> 00:12:44,420
<font color="#E5E5E5">we have implementation we test it in</font>

231
00:12:41,690 --> 00:12:46,970
<font color="#E5E5E5">Python we have got</font><font color="#CCCCCC"> test</font>

232
00:12:44,420 --> 00:12:49,219
which actually<font color="#E5E5E5"> takes the text file and</font>

233
00:12:46,970 --> 00:12:52,160
<font color="#E5E5E5">it's able to parse out</font><font color="#CCCCCC"> the examples and</font>

234
00:12:49,220 --> 00:12:56,060
run them and if they<font color="#E5E5E5"> don't have the</font>

235
00:12:52,160 --> 00:12:59,270
output as<font color="#CCCCCC"> you documented in to read me</font>

236
00:12:56,060 --> 00:13:01,760
<font color="#E5E5E5">then it fails</font><font color="#CCCCCC"> you can put it into</font>

237
00:12:59,270 --> 00:13:04,790
continuous integration<font color="#E5E5E5"> and you can</font>

238
00:13:01,760 --> 00:13:08,090
<font color="#E5E5E5">ensure forever</font><font color="#CCCCCC"> the rest of your life</font>

239
00:13:04,790 --> 00:13:13,069
<font color="#E5E5E5">that this readme will be in sync with</font>

240
00:13:08,090 --> 00:13:15,050
your code<font color="#E5E5E5"> so you think about the</font>

241
00:13:13,070 --> 00:13:17,120
<font color="#E5E5E5">interface you agree with everyone on the</font>

242
00:13:15,050 --> 00:13:20,540
<font color="#E5E5E5">interface you write it down</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you read</font>

243
00:13:17,120 --> 00:13:23,180
me then you set up the tests and then

244
00:13:20,540 --> 00:13:28,189
you called until the the the

245
00:13:23,180 --> 00:13:30,079
implementation<font color="#CCCCCC"> fits the</font><font color="#E5E5E5"> promise and what</font>

246
00:13:28,190 --> 00:13:36,970
if we could<font color="#E5E5E5"> design and test</font><font color="#CCCCCC"> Web API</font><font color="#E5E5E5"> is</font>

247
00:13:30,080 --> 00:13:40,400
<font color="#E5E5E5">like this imagine you have read me</font><font color="#CCCCCC"> with</font>

248
00:13:36,970 --> 00:13:44,570
with<font color="#CCCCCC"> the name API</font><font color="#E5E5E5"> because it's not</font>

249
00:13:40,400 --> 00:13:47,569
really<font color="#E5E5E5"> its API and it has just</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of</font>

250
00:13:44,570 --> 00:13:50,660
sentences of how the API works and you

251
00:13:47,570 --> 00:13:56,300
recommend<font color="#E5E5E5"> a request and response with</font>

252
00:13:50,660 --> 00:13:58,850
examples would<font color="#E5E5E5"> it work well it works</font>

253
00:13:56,300 --> 00:14:02,300
this format exists its called<font color="#E5E5E5"> API</font>

254
00:13:58,850 --> 00:14:04,370
blueprint and<font color="#E5E5E5"> it's marked</font><font color="#CCCCCC"> and based it's</font>

255
00:14:02,300 --> 00:14:10,488
basically freeform text with<font color="#E5E5E5"> some</font>

256
00:14:04,370 --> 00:14:17,299
<font color="#CCCCCC">structure</font><font color="#E5E5E5"> and it has some users</font>

257
00:14:10,489 --> 00:14:21,629
and it's human<font color="#CCCCCC"> rideable human-readable</font>

258
00:14:17,299 --> 00:14:24,449
<font color="#CCCCCC">it works as read me</font><font color="#E5E5E5"> would work but at</font>

259
00:14:21,629 --> 00:14:26,309
the same time<font color="#E5E5E5"> it's machine readable so</font>

260
00:14:24,449 --> 00:14:28,738
you can parse it<font color="#E5E5E5"> and you can do whatever</font>

261
00:14:26,309 --> 00:14:32,488
you want with the data of<font color="#E5E5E5"> parts out</font><font color="#CCCCCC"> of</font>

262
00:14:28,739 --> 00:14:35,579
this document<font color="#E5E5E5"> and there is a tool which</font>

263
00:14:32,489 --> 00:14:38,519
<font color="#CCCCCC">I'm work on which is called dread and</font><font color="#E5E5E5"> it</font>

264
00:14:35,579 --> 00:14:42,539
works exactly as<font color="#E5E5E5"> the doc tests it takes</font>

265
00:14:38,519 --> 00:14:45,059
the document parse out<font color="#E5E5E5"> the examples runs</font>

266
00:14:42,539 --> 00:14:47,999
the examples against your implementation

267
00:14:45,059 --> 00:14:53,100
of<font color="#E5E5E5"> the API and tells you whether it fits</font>

268
00:14:47,999 --> 00:14:57,749
<font color="#E5E5E5">the API description or not it has</font>

269
00:14:53,100 --> 00:15:01,709
<font color="#E5E5E5">documentation and a nice logo</font><font color="#CCCCCC"> I have a</font>

270
00:14:57,749 --> 00:15:04,589
<font color="#E5E5E5">couple of stickers and it has some users</font>

271
00:15:01,709 --> 00:15:07,138
and I'm<font color="#E5E5E5"> very proud to</font><font color="#CCCCCC"> say that</font><font color="#E5E5E5"> it's</font>

272
00:15:04,589 --> 00:15:09,720
finally<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> we a couple</font>

273
00:15:07,139 --> 00:15:12,269
<font color="#E5E5E5">of years and years</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> we wrote it as</font>

274
00:15:09,720 --> 00:15:14,029
CoffeeScript<font color="#E5E5E5"> and it's like two days ago</font>

275
00:15:12,269 --> 00:15:16,350
<font color="#E5E5E5">or something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> my colleague</font>

276
00:15:14,029 --> 00:15:18,149
<font color="#CCCCCC">became the biggest</font><font color="#E5E5E5"> contributor of this</font>

277
00:15:16,350 --> 00:15:21,869
repo<font color="#CCCCCC"> because he switched the</font><font color="#E5E5E5"> whole code</font>

278
00:15:18,149 --> 00:15:25,589
base to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> - to JavaScript so finally</font>

279
00:15:21,869 --> 00:15:28,529
it's<font color="#CCCCCC"> JavaScript and there are some blog</font>

280
00:15:25,589 --> 00:15:31,889
<font color="#CCCCCC">posts and</font><font color="#E5E5E5"> so on so you're</font><font color="#CCCCCC"> basically not</font>

281
00:15:28,529 --> 00:15:35,720
<font color="#E5E5E5">the first one to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> it and there are</font>

282
00:15:31,889 --> 00:15:41,730
<font color="#CCCCCC">people talking</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> it on conferences</font>

283
00:15:35,720 --> 00:15:43,139
and sometimes because<font color="#E5E5E5"> web api</font><font color="#CCCCCC"> s-- can be</font>

284
00:15:41,730 --> 00:15:45,779
a complex thing you can have

285
00:15:43,139 --> 00:15:48,419
authorization<font color="#E5E5E5"> there or something</font><font color="#CCCCCC"> you may</font>

286
00:15:45,779 --> 00:15:51,149
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to extend the testing with</font>

287
00:15:48,419 --> 00:15:56,159
<font color="#CCCCCC">so-called hooks</font><font color="#E5E5E5"> and you can write hooks</font>

288
00:15:51,149 --> 00:15:59,009
already in these<font color="#E5E5E5"> languages most of them</font>

289
00:15:56,159 --> 00:16:01,439
are contributed so actually if you don't

290
00:15:59,009 --> 00:16:05,100
see<font color="#E5E5E5"> your favorite language</font><font color="#CCCCCC"> you can</font>

291
00:16:01,439 --> 00:16:09,269
easily set up<font color="#E5E5E5"> your</font><font color="#CCCCCC"> own hooks in in your</font>

292
00:16:05,100 --> 00:16:11,369
<font color="#E5E5E5">own favorite language and you can put it</font>

293
00:16:09,269 --> 00:16:13,769
into continuous integration<font color="#E5E5E5"> and forever</font>

294
00:16:11,369 --> 00:16:17,369
<font color="#CCCCCC">the rest of your</font><font color="#E5E5E5"> lives</font><font color="#CCCCCC"> you can ensure</font>

295
00:16:13,769 --> 00:16:22,690
that your<font color="#CCCCCC"> api will work as you designed</font>

296
00:16:17,369 --> 00:16:26,020
<font color="#CCCCCC">sue promised and</font><font color="#E5E5E5"> moreover you</font><font color="#CCCCCC"> can</font>

297
00:16:22,690 --> 00:16:28,390
you can make the the document<font color="#E5E5E5"> you wrote</font>

298
00:16:26,020 --> 00:16:33,240
you can make it something central to

299
00:16:28,390 --> 00:16:36,580
your API<font color="#E5E5E5"> development you can as its</font>

300
00:16:33,240 --> 00:16:38,580
<font color="#E5E5E5">machine readable</font><font color="#CCCCCC"> you can parse it</font><font color="#E5E5E5"> you</font>

301
00:16:36,580 --> 00:16:41,530
can generate documentation out for me

302
00:16:38,580 --> 00:16:43,810
<font color="#CCCCCC">you can generate</font><font color="#E5E5E5"> mock server out from it</font>

303
00:16:41,530 --> 00:16:45,970
<font color="#CCCCCC">most</font><font color="#E5E5E5"> there is something which just</font>

304
00:16:43,810 --> 00:16:47,380
replies with the examples and you can

305
00:16:45,970 --> 00:16:49,900
give<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to I don't</font><font color="#E5E5E5"> know your mobile</font>

306
00:16:47,380 --> 00:16:51,790
level<font color="#E5E5E5"> or perspire the actual</font>

307
00:16:49,900 --> 00:16:54,850
implementation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the API started and</font>

308
00:16:51,790 --> 00:16:56,709
they can try out<font color="#CCCCCC"> the API and they can</font>

309
00:16:54,850 --> 00:17:00,220
give<font color="#E5E5E5"> you</font><font color="#CCCCCC"> feedback</font><font color="#E5E5E5"> like no no this</font>

310
00:16:56,710 --> 00:17:02,410
parameter it doesn't work and you didn't

311
00:17:00,220 --> 00:17:04,930
write a single line<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> and you have</font>

312
00:17:02,410 --> 00:17:09,909
feedback<font color="#E5E5E5"> on your API like real world</font>

313
00:17:04,930 --> 00:17:11,860
<font color="#E5E5E5">feedback and you have the tests so</font>

314
00:17:09,910 --> 00:17:14,980
basically the document<font color="#CCCCCC"> becomes a</font><font color="#E5E5E5"> single</font>

315
00:17:11,859 --> 00:17:18,069
<font color="#E5E5E5">source of truth about your API and if I</font>

316
00:17:14,980 --> 00:17:20,230
add logos here this is the API blue

317
00:17:18,069 --> 00:17:23,079
brain<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> marked and based this is what</font>

318
00:17:20,230 --> 00:17:28,510
we do in apiary<font color="#E5E5E5"> and this is what I do in</font>

319
00:17:23,079 --> 00:17:31,840
apiary<font color="#E5E5E5"> and you may ask what about</font><font color="#CCCCCC"> the</font>

320
00:17:28,510 --> 00:17:36,040
<font color="#E5E5E5">open open API spec formerly known as</font>

321
00:17:31,840 --> 00:17:37,959
swagger<font color="#E5E5E5"> it works the same way instead of</font>

322
00:17:36,040 --> 00:17:40,720
API blueprint<font color="#E5E5E5"> you use the Swagger's back</font>

323
00:17:37,960 --> 00:17:44,320
but<font color="#CCCCCC"> it's general based or JSON based and</font>

324
00:17:40,720 --> 00:17:48,370
I don't<font color="#CCCCCC"> think it really really fits the</font>

325
00:17:44,320 --> 00:17:54,460
design<font color="#E5E5E5"> first or document first scenario</font>

326
00:17:48,370 --> 00:17:54,939
but up to so again<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> one two</font>

327
00:17:54,460 --> 00:17:58,510
<font color="#E5E5E5">three</font>

328
00:17:54,940 --> 00:18:04,030
you think you agree<font color="#E5E5E5"> about your about</font>

329
00:17:58,510 --> 00:18:07,180
<font color="#CCCCCC">your API</font><font color="#E5E5E5"> you write it down API</font>

330
00:18:04,030 --> 00:18:10,480
description<font color="#CCCCCC"> you</font><font color="#E5E5E5"> setup the tests with red</font>

331
00:18:07,180 --> 00:18:14,290
and you<font color="#CCCCCC"> fulfill the promise once you</font>

332
00:18:10,480 --> 00:18:18,210
implement the API<font color="#E5E5E5"> you can be sure that</font>

333
00:18:14,290 --> 00:18:18,210
<font color="#E5E5E5">you implement the promise</font>

334
00:18:18,400 --> 00:18:22,840
this like testing the<font color="#E5E5E5"> implementation</font>

335
00:18:21,100 --> 00:18:25,300
<font color="#E5E5E5">against design allows you designing</font>

336
00:18:22,840 --> 00:18:28,060
before implementing because otherwise

337
00:18:25,300 --> 00:18:30,270
you couldn't<font color="#E5E5E5"> be sure that it's not out</font>

338
00:18:28,060 --> 00:18:32,710
<font color="#CCCCCC">of sync</font>

339
00:18:30,270 --> 00:18:35,980
designing before implementing<font color="#E5E5E5"> allows you</font>

340
00:18:32,710 --> 00:18:39,400
better design<font color="#E5E5E5"> because when you design</font>

341
00:18:35,980 --> 00:18:43,390
first<font color="#CCCCCC"> you have better design Dredd</font>

342
00:18:39,400 --> 00:18:45,700
<font color="#E5E5E5">allows you better designed so remember</font>

343
00:18:43,390 --> 00:18:49,260
do everything first

344
00:18:45,700 --> 00:18:52,120
<font color="#E5E5E5">except of coding you do coding last</font>

345
00:18:49,260 --> 00:18:55,210
<font color="#E5E5E5">discuss the interface design before</font>

346
00:18:52,120 --> 00:18:59,439
implementing<font color="#E5E5E5"> use the interface</font><font color="#CCCCCC"> before</font>

347
00:18:55,210 --> 00:19:02,620
implementing<font color="#CCCCCC"> and use the interface</font>

348
00:18:59,440 --> 00:19:04,360
design as a single source<font color="#CCCCCC"> of truth</font><font color="#E5E5E5"> test</font>

349
00:19:02,620 --> 00:19:06,820
the implementation against design is

350
00:19:04,360 --> 00:19:08,770
this<font color="#E5E5E5"> is the most important thing</font>

351
00:19:06,820 --> 00:19:12,790
whatever you do test the implementation

352
00:19:08,770 --> 00:19:16,620
against<font color="#CCCCCC"> design</font><font color="#E5E5E5"> and PS</font><font color="#CCCCCC"> your advice user</font>

353
00:19:12,790 --> 00:19:16,620
interface<font color="#CCCCCC"> don't forget about</font><font color="#E5E5E5"> that and</font>

354
00:19:23,580 --> 00:19:50,080
we have time for one<font color="#CCCCCC"> question I wouldn't</font>

355
00:19:42,340 --> 00:19:52,330
<font color="#CCCCCC">happy yeah the</font><font color="#E5E5E5"> the testing of the API</font>

356
00:19:50,080 --> 00:19:55,149
works basically<font color="#CCCCCC"> on the on base that you</font>

357
00:19:52,330 --> 00:19:57,249
have the API description file and<font color="#CCCCCC"> its</font>

358
00:19:55,149 --> 00:19:59,469
<font color="#CCCCCC">specification by example it's similar to</font>

359
00:19:57,249 --> 00:20:02,559
cucumber or<font color="#E5E5E5"> the readme that you need to</font>

360
00:19:59,470 --> 00:20:04,419
provide examples<font color="#E5E5E5"> yeah you need to</font>

361
00:20:02,559 --> 00:20:06,869
<font color="#E5E5E5">provide examples they're crucial because</font>

362
00:20:04,419 --> 00:20:06,869
<font color="#E5E5E5">then</font>

