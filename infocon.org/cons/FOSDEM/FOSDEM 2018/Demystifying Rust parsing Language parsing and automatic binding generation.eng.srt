1
00:00:07,559 --> 00:00:11,580
<font color="#E5E5E5">so our next speaker is</font>

2
00:00:15,630 --> 00:00:22,350
<font color="#E5E5E5">hey thanks a lot and first let me</font>

3
00:00:20,020 --> 00:00:25,960
<font color="#CCCCCC">introduce myself and before that let me</font>

4
00:00:22,350 --> 00:00:29,110
say that it's<font color="#CCCCCC"> always great to see so</font>

5
00:00:25,960 --> 00:00:31,540
<font color="#CCCCCC">many</font><font color="#E5E5E5"> people in this room people who are</font>

6
00:00:29,110 --> 00:00:34,829
interested in<font color="#E5E5E5"> rust and the language</font>

7
00:00:31,540 --> 00:00:38,140
itself has started about two<font color="#CCCCCC"> years ago</font>

8
00:00:34,829 --> 00:00:41,200
<font color="#E5E5E5">less than a little bit more than two</font>

9
00:00:38,140 --> 00:00:42,610
<font color="#CCCCCC">years</font><font color="#E5E5E5"> ago and there will were maybe a</font>

10
00:00:41,200 --> 00:00:44,920
couple<font color="#E5E5E5"> of hundreds of</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> who were</font>

11
00:00:42,610 --> 00:00:46,870
<font color="#E5E5E5">interested in that</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> and now it's</font>

12
00:00:44,920 --> 00:00:49,000
<font color="#E5E5E5">really great</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see that is getting</font>

13
00:00:46,870 --> 00:00:53,038
traction and see a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people in this</font>

14
00:00:49,000 --> 00:00:56,109
room<font color="#E5E5E5"> who are interested in this topic so</font>

15
00:00:53,039 --> 00:00:58,929
introducing<font color="#E5E5E5"> myself my name is nikita</font><font color="#CCCCCC"> I</font>

16
00:00:56,109 --> 00:01:01,690
work at made safe<font color="#CCCCCC"> and might safe</font><font color="#E5E5E5"> is a</font>

17
00:00:58,929 --> 00:01:05,050
company<font color="#CCCCCC"> that develops peer-to-peer</font>

18
00:01:01,690 --> 00:01:08,020
network technology and I think we have

19
00:01:05,050 --> 00:01:11,200
one<font color="#E5E5E5"> of the largest code bases that</font><font color="#CCCCCC"> are</font>

20
00:01:08,020 --> 00:01:15,490
written in rust<font color="#E5E5E5"> so today I want to share</font>

21
00:01:11,200 --> 00:01:17,650
<font color="#CCCCCC">or share my experience developing one of</font>

22
00:01:15,490 --> 00:01:22,149
the<font color="#E5E5E5"> comprise one of the libraries that</font>

23
00:01:17,650 --> 00:01:27,550
<font color="#E5E5E5">comprise our stead and they want to talk</font>

24
00:01:22,150 --> 00:01:31,600
<font color="#E5E5E5">to you about parsing so Percy is one of</font>

25
00:01:27,550 --> 00:01:34,660
the<font color="#CCCCCC"> crucial steps in the company</font><font color="#E5E5E5"> in the</font>

26
00:01:31,600 --> 00:01:39,399
topic of compilers<font color="#E5E5E5"> and the compilers is</font>

27
00:01:34,660 --> 00:01:41,830
a<font color="#E5E5E5"> a complex topic by itself</font><font color="#CCCCCC"> so it's it</font>

28
00:01:39,400 --> 00:01:46,090
will be almost<font color="#E5E5E5"> impossible to cover all</font>

29
00:01:41,830 --> 00:01:48,730
the things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> go into compilers in 20</font>

30
00:01:46,090 --> 00:01:52,600
<font color="#E5E5E5">minutes so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> will be more like more</font>

31
00:01:48,730 --> 00:01:55,930
of an observant talk so I will cover the

32
00:01:52,600 --> 00:01:59,140
basics<font color="#E5E5E5"> and my you know goal here my goal</font>

33
00:01:55,930 --> 00:02:01,450
<font color="#E5E5E5">today is not to give you the entirety of</font>

34
00:01:59,140 --> 00:02:04,930
information about compilers but to

35
00:02:01,450 --> 00:02:09,190
<font color="#E5E5E5">inspire you and basically to pique your</font>

36
00:02:04,930 --> 00:02:11,739
<font color="#E5E5E5">interest and actually compilers is a</font>

37
00:02:09,190 --> 00:02:15,040
complex topic<font color="#E5E5E5"> and a lot of people are</font>

38
00:02:11,739 --> 00:02:17,739
scared<font color="#E5E5E5"> but it they opened the Dragon</font>

39
00:02:15,040 --> 00:02:19,929
book they see that<font color="#E5E5E5"> it consists of more</font>

40
00:02:17,739 --> 00:02:21,970
<font color="#CCCCCC">than thousand pages and they close the</font>

41
00:02:19,930 --> 00:02:24,550
book and never<font color="#E5E5E5"> read it again but</font>

42
00:02:21,970 --> 00:02:27,880
actually<font color="#E5E5E5"> compilers are very interesting</font>

43
00:02:24,550 --> 00:02:29,500
<font color="#E5E5E5">topic and if you take one part of it</font>

44
00:02:27,880 --> 00:02:34,440
<font color="#E5E5E5">they can</font><font color="#CCCCCC"> be</font>

45
00:02:29,500 --> 00:02:34,440
we useful and they're not that complex

46
00:02:35,400 --> 00:02:42,790
so let's start<font color="#E5E5E5"> from the basics so how</font>

47
00:02:39,630 --> 00:02:45,130
<font color="#CCCCCC">how parsing can be useful for</font><font color="#E5E5E5"> you so</font>

48
00:02:42,790 --> 00:02:47,650
what is actually<font color="#E5E5E5"> parsing so if you don't</font>

49
00:02:45,130 --> 00:02:51,940
know it is one of<font color="#E5E5E5"> the steps in</font><font color="#CCCCCC"> the</font>

50
00:02:47,650 --> 00:02:54,130
compiler<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> which allows you to</font>

51
00:02:51,940 --> 00:02:57,340
<font color="#E5E5E5">extract</font><font color="#CCCCCC"> meta information</font><font color="#E5E5E5"> about your code</font>

52
00:02:54,130 --> 00:02:59,950
<font color="#CCCCCC">so</font><font color="#E5E5E5"> you can actually imagine the compiler</font>

53
00:02:57,340 --> 00:03:03,459
as a kind of a pipeline<font color="#E5E5E5"> that consists</font><font color="#CCCCCC"> of</font>

54
00:02:59,950 --> 00:03:08,369
several steps<font color="#CCCCCC"> and the first step in the</font>

55
00:03:03,459 --> 00:03:12,160
compiler is the lexical<font color="#E5E5E5"> parsing the</font>

56
00:03:08,370 --> 00:03:15,489
excuse<font color="#E5E5E5"> me the lexical analysis the</font>

57
00:03:12,160 --> 00:03:18,790
lexical analysis is a simplest step that

58
00:03:15,489 --> 00:03:22,180
gets your code in its text

59
00:03:18,790 --> 00:03:26,739
representation<font color="#CCCCCC"> and transforms it to</font><font color="#E5E5E5"> a</font>

60
00:03:22,180 --> 00:03:30,730
set<font color="#CCCCCC"> of tokens a token is a very simple</font>

61
00:03:26,739 --> 00:03:33,280
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> and can be thought of as a word it</font>

62
00:03:30,730 --> 00:03:35,649
can<font color="#E5E5E5"> be a</font><font color="#CCCCCC"> keyword it can be a string out</font>

63
00:03:33,280 --> 00:03:38,260
<font color="#CCCCCC">of your code</font><font color="#E5E5E5"> it can be a number it can</font>

64
00:03:35,650 --> 00:03:44,310
be basically<font color="#CCCCCC"> anything a return return is</font>

65
00:03:38,260 --> 00:03:48,010
<font color="#E5E5E5">a</font><font color="#CCCCCC"> curl</font><font color="#E5E5E5"> is a token a fan is a token but</font>

66
00:03:44,310 --> 00:03:51,160
<font color="#CCCCCC">heavy</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> joking we can't do many</font>

67
00:03:48,010 --> 00:03:54,340
useful<font color="#CCCCCC"> things with</font><font color="#E5E5E5"> them right</font><font color="#CCCCCC"> we can do</font>

68
00:03:51,160 --> 00:03:57,519
many useful things<font color="#CCCCCC"> with just codes as</font>

69
00:03:54,340 --> 00:04:02,320
<font color="#CCCCCC">texts so what we do here is we puts</font>

70
00:03:57,519 --> 00:04:07,780
tokens in a token in token trees<font color="#CCCCCC"> and out</font>

71
00:04:02,320 --> 00:04:10,180
<font color="#E5E5E5">of those token trees we create out of</font>

72
00:04:07,780 --> 00:04:14,530
<font color="#E5E5E5">those token trees we create data</font>

73
00:04:10,180 --> 00:04:19,390
<font color="#E5E5E5">structure that's that is called abstract</font>

74
00:04:14,530 --> 00:04:22,540
syntax tree or<font color="#CCCCCC"> HD</font><font color="#E5E5E5"> for shirt</font><font color="#CCCCCC"> HD allows us</font>

75
00:04:19,390 --> 00:04:25,659
to extract<font color="#E5E5E5"> meta information out of our</font>

76
00:04:22,540 --> 00:04:28,440
<font color="#E5E5E5">codes and use</font><font color="#CCCCCC"> it this information to do</font>

77
00:04:25,660 --> 00:04:28,440
basically anything

78
00:04:32,189 --> 00:04:38,710
so how do<font color="#CCCCCC"> we apply is these for our</font>

79
00:04:36,129 --> 00:04:41,830
practical<font color="#CCCCCC"> code</font><font color="#E5E5E5"> you might think that HDS</font>

80
00:04:38,710 --> 00:04:45,308
are usable only<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> Roth compiler</font>

81
00:04:41,830 --> 00:04:48,849
<font color="#CCCCCC">itself or for now building some I don't</font>

82
00:04:45,309 --> 00:04:51,159
know some utilities or things<font color="#E5E5E5"> that</font>

83
00:04:48,849 --> 00:04:53,498
belong to the<font color="#E5E5E5"> Roth compiler but actually</font>

84
00:04:51,159 --> 00:04:57,339
<font color="#CCCCCC">histories have many everyday</font>

85
00:04:53,499 --> 00:04:59,229
<font color="#CCCCCC">applications so</font><font color="#E5E5E5"> you can extract</font><font color="#CCCCCC"> matter</font>

86
00:04:57,339 --> 00:05:02,499
<font color="#CCCCCC">information from your code and based on</font>

87
00:04:59,229 --> 00:05:05,770
<font color="#CCCCCC">that information you can</font><font color="#E5E5E5"> generate code</font>

88
00:05:02,499 --> 00:05:08,439
in other languages<font color="#E5E5E5"> this is very useful</font>

89
00:05:05,770 --> 00:05:10,899
<font color="#E5E5E5">if</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you deal</font>

90
00:05:08,439 --> 00:05:14,379
with<font color="#CCCCCC"> FFI or foreign function interface</font>

91
00:05:10,899 --> 00:05:17,439
and you want to create a library<font color="#E5E5E5"> in rust</font>

92
00:05:14,379 --> 00:05:20,259
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to be make</font><font color="#E5E5E5"> usable from</font>

93
00:05:17,439 --> 00:05:22,809
<font color="#E5E5E5">other languages and it will be very</font>

94
00:05:20,259 --> 00:05:25,599
tedious and complicated to<font color="#E5E5E5"> write this</font>

95
00:05:22,809 --> 00:05:30,370
code in<font color="#E5E5E5"> other languages to work with</font>

96
00:05:25,599 --> 00:05:33,279
your<font color="#CCCCCC"> rough library that's</font><font color="#E5E5E5"> why we have a</font>

97
00:05:30,370 --> 00:05:35,289
<font color="#CCCCCC">steez</font><font color="#E5E5E5"> you can basically scan all of your</font>

98
00:05:33,279 --> 00:05:37,029
<font color="#E5E5E5">libraries code and extract that</font>

99
00:05:35,289 --> 00:05:39,099
information about<font color="#E5E5E5"> the functions that you</font>

100
00:05:37,029 --> 00:05:41,409
export<font color="#E5E5E5"> from your library</font><font color="#CCCCCC"> and generate</font>

101
00:05:39,099 --> 00:05:44,889
<font color="#E5E5E5">code in other languages based on that</font>

102
00:05:41,409 --> 00:05:48,188
extracted<font color="#CCCCCC"> information and you can</font><font color="#E5E5E5"> also</font>

103
00:05:44,889 --> 00:05:50,860
transform your code<font color="#CCCCCC"> it's practically you</font>

104
00:05:48,189 --> 00:05:53,349
know when you want to apply<font color="#CCCCCC"> some kind</font><font color="#E5E5E5"> of</font>

105
00:05:50,860 --> 00:05:56,069
refactoring<font color="#E5E5E5"> to your code and</font><font color="#CCCCCC"> I believe</font>

106
00:05:53,349 --> 00:05:59,080
the<font color="#E5E5E5"> next talk we will be on this</font><font color="#CCCCCC"> topic</font>

107
00:05:56,069 --> 00:06:01,830
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> example you have</font><font color="#CCCCCC"> Clippy</font><font color="#E5E5E5"> that</font>

108
00:05:59,080 --> 00:06:07,209
shows you<font color="#E5E5E5"> many</font><font color="#CCCCCC"> compile errors in your</font>

109
00:06:01,830 --> 00:06:09,520
<font color="#CCCCCC">rusts code</font><font color="#E5E5E5"> and it's not so it is very</font>

110
00:06:07,209 --> 00:06:12,129
<font color="#E5E5E5">useful but it will be very nice</font><font color="#CCCCCC"> if it</font>

111
00:06:09,520 --> 00:06:14,188
could<font color="#E5E5E5"> do automatic transformation an</font>

112
00:06:12,129 --> 00:06:18,370
automatic refactoring of your code right

113
00:06:14,189 --> 00:06:20,110
so that what<font color="#E5E5E5"> you can do with ASD with HD</font>

114
00:06:18,370 --> 00:06:22,240
you have full information<font color="#E5E5E5"> about your</font>

115
00:06:20,110 --> 00:06:25,509
code and you can<font color="#E5E5E5"> also generate new code</font>

116
00:06:22,240 --> 00:06:27,669
out of<font color="#CCCCCC"> a steez so basically what you do</font>

117
00:06:25,509 --> 00:06:29,469
here<font color="#CCCCCC"> is you you're</font><font color="#E5E5E5"> taking the code of</font>

118
00:06:27,669 --> 00:06:33,370
<font color="#E5E5E5">your library and you're generating</font><font color="#CCCCCC"> new</font>

119
00:06:29,469 --> 00:06:36,479
code based on based<font color="#E5E5E5"> on that code and as</font>

120
00:06:33,370 --> 00:06:39,370
an output you<font color="#CCCCCC"> have a refactoring code</font>

121
00:06:36,479 --> 00:06:41,620
and there is also the<font color="#E5E5E5"> meta programming</font>

122
00:06:39,370 --> 00:06:44,560
aspect as basically<font color="#E5E5E5"> you're related to</font>

123
00:06:41,620 --> 00:06:47,320
macros and macros are very<font color="#E5E5E5"> similar to</font>

124
00:06:44,560 --> 00:06:49,630
how<font color="#CCCCCC"> a Steve's work so mockers basically</font>

125
00:06:47,320 --> 00:06:53,080
<font color="#E5E5E5">employed the HD framework that you have</font>

126
00:06:49,630 --> 00:06:56,469
in your compiler but the macros are

127
00:06:53,080 --> 00:06:59,889
accessible to<font color="#E5E5E5"> only within the scope of</font>

128
00:06:56,470 --> 00:07:04,169
the compiler<font color="#E5E5E5"> and with HD you have the</font>

129
00:06:59,889 --> 00:07:06,520
full information<font color="#E5E5E5"> about your code</font><font color="#CCCCCC"> so</font>

130
00:07:04,169 --> 00:07:09,159
basically<font color="#E5E5E5"> that means</font><font color="#CCCCCC"> that with meta</font>

131
00:07:06,520 --> 00:07:11,919
programming you<font color="#CCCCCC"> can generate any rust</font>

132
00:07:09,160 --> 00:07:17,050
code<font color="#E5E5E5"> based on the full</font><font color="#CCCCCC"> information that</font>

133
00:07:11,919 --> 00:07:19,750
you have extracted<font color="#E5E5E5"> from the east and of</font>

134
00:07:17,050 --> 00:07:23,710
<font color="#E5E5E5">course you can use SDS to compile your</font>

135
00:07:19,750 --> 00:07:26,169
<font color="#CCCCCC">code to</font><font color="#E5E5E5"> a binary but thankfully you</font>

136
00:07:23,710 --> 00:07:30,010
<font color="#E5E5E5">rusts the</font><font color="#CCCCCC"> Rath compiler does that part</font>

137
00:07:26,169 --> 00:07:32,500
<font color="#E5E5E5">for</font><font color="#CCCCCC"> us and of course you need to</font><font color="#E5E5E5"> know</font>

138
00:07:30,010 --> 00:07:34,300
<font color="#CCCCCC">that the use cases are not limited to</font>

139
00:07:32,500 --> 00:07:37,600
those that were<font color="#E5E5E5"> listed on the</font><font color="#CCCCCC"> previous</font>

140
00:07:34,300 --> 00:07:40,389
slide<font color="#E5E5E5"> there is a lot of there is a lot</font>

141
00:07:37,600 --> 00:07:47,889
more<font color="#CCCCCC"> use cases</font><font color="#E5E5E5"> and they are basically</font>

142
00:07:40,389 --> 00:07:50,860
limited<font color="#E5E5E5"> only by your imagination how</font>

143
00:07:47,889 --> 00:07:54,070
about a<font color="#E5E5E5"> purse is these by themselves are</font>

144
00:07:50,860 --> 00:07:56,800
pretty<font color="#E5E5E5"> absurd concept how do we actually</font>

145
00:07:54,070 --> 00:07:58,840
<font color="#E5E5E5">apply them to rust</font><font color="#CCCCCC"> because this is</font>

146
00:07:56,800 --> 00:08:03,820
<font color="#CCCCCC">talked about the rust language right and</font>

147
00:07:58,840 --> 00:08:06,520
in fact rust<font color="#CCCCCC"> library's multiple rust</font>

148
00:08:03,820 --> 00:08:11,229
libraries already<font color="#E5E5E5"> apply that concept and</font>

149
00:08:06,520 --> 00:08:13,870
we use these tools<font color="#CCCCCC"> every</font><font color="#E5E5E5"> day and ra7 key</font>

150
00:08:11,229 --> 00:08:15,639
is<font color="#E5E5E5"> also another great example of code</font>

151
00:08:13,870 --> 00:08:19,660
transformation because what it does is

152
00:08:15,639 --> 00:08:22,020
basically takes the HD that it has

153
00:08:19,660 --> 00:08:26,590
extracted<font color="#E5E5E5"> from the source code and</font>

154
00:08:22,020 --> 00:08:31,120
outputs<font color="#CCCCCC"> this is T with with</font><font color="#E5E5E5"> a formatting</font>

155
00:08:26,590 --> 00:08:33,909
that follows<font color="#E5E5E5"> the presets preset rules</font>

156
00:08:31,120 --> 00:08:36,520
about<font color="#E5E5E5"> the how indentation should work</font>

157
00:08:33,909 --> 00:08:40,539
how<font color="#E5E5E5"> to put its</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> to put the brackets</font>

158
00:08:36,520 --> 00:08:44,410
where to put the brackets and so on and

159
00:08:40,539 --> 00:08:47,860
clip is a similar<font color="#E5E5E5"> beast so it extracts</font>

160
00:08:44,410 --> 00:08:50,170
the<font color="#CCCCCC"> meta information from HD and based</font>

161
00:08:47,860 --> 00:08:55,839
on<font color="#E5E5E5"> that instructed extracted information</font>

162
00:08:50,170 --> 00:08:58,319
<font color="#CCCCCC">it checks whether</font><font color="#E5E5E5"> your code has any bad</font>

163
00:08:55,839 --> 00:09:02,010
patterns in it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> suggests</font>

164
00:08:58,320 --> 00:09:03,810
how to fix those bad patterns and there

165
00:09:02,010 --> 00:09:07,410
is no magic in it<font color="#E5E5E5"> you can basically</font>

166
00:09:03,810 --> 00:09:10,680
write your own clip a based on the

167
00:09:07,410 --> 00:09:16,260
compiler technologies and finally if you

168
00:09:10,680 --> 00:09:18,780
use IDs or text editors with with the

169
00:09:16,260 --> 00:09:21,510
eraser<font color="#E5E5E5"> plugin installed</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> are also</font>

170
00:09:18,780 --> 00:09:24,540
<font color="#CCCCCC">using a steez Easy's extract information</font>

171
00:09:21,510 --> 00:09:26,970
from<font color="#E5E5E5"> your code and you have killed</font>

172
00:09:24,540 --> 00:09:30,660
completion syntax highlighting<font color="#CCCCCC"> all the</font>

173
00:09:26,970 --> 00:09:34,920
<font color="#CCCCCC">nice things that</font><font color="#E5E5E5"> IDs provide you so IDE</font>

174
00:09:30,660 --> 00:09:36,689
is basically a compiler that compiler

175
00:09:34,920 --> 00:09:39,810
that<font color="#E5E5E5"> extracts</font><font color="#CCCCCC"> information from your code</font>

176
00:09:36,690 --> 00:09:43,170
and makes it more<font color="#E5E5E5"> usable and convenient</font>

177
00:09:39,810 --> 00:09:51,900
<font color="#CCCCCC">for you to write your code in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> users</font>

178
00:09:43,170 --> 00:09:54,750
<font color="#E5E5E5">interface so how do we actually use</font>

179
00:09:51,900 --> 00:09:56,850
these<font color="#E5E5E5"> ASDs and of course you don't have</font>

180
00:09:54,750 --> 00:09:59,700
<font color="#CCCCCC">to write your</font><font color="#E5E5E5"> own library or you don't</font>

181
00:09:56,850 --> 00:10:02,340
have to write<font color="#CCCCCC"> your own</font><font color="#E5E5E5"> code to extract</font>

182
00:09:59,700 --> 00:10:06,480
this information or parser code into<font color="#E5E5E5"> HTS</font>

183
00:10:02,340 --> 00:10:10,170
<font color="#E5E5E5">you have you have it already in the Rath</font>

184
00:10:06,480 --> 00:10:12,600
compiler and<font color="#E5E5E5"> you can use the lip syntax</font>

185
00:10:10,170 --> 00:10:17,579
<font color="#CCCCCC">that is an integral part of the compiler</font>

186
00:10:12,600 --> 00:10:21,290
<font color="#CCCCCC">to basically extract this parcel</font>

187
00:10:17,580 --> 00:10:24,120
information and use it<font color="#CCCCCC"> in your code</font>

188
00:10:21,290 --> 00:10:28,579
<font color="#E5E5E5">there is a caveat though</font><font color="#CCCCCC"> that's lip</font>

189
00:10:24,120 --> 00:10:31,790
syntax library is<font color="#E5E5E5"> available only in</font>

190
00:10:28,580 --> 00:10:36,870
<font color="#E5E5E5">night in the</font><font color="#CCCCCC"> nidal</font><font color="#E5E5E5"> version of compiler</font>

191
00:10:31,790 --> 00:10:41,579
and<font color="#CCCCCC"> whereas you use it to parser code</font>

192
00:10:36,870 --> 00:10:47,040
and it provides<font color="#E5E5E5"> a teaser basically in as</font>

193
00:10:41,580 --> 00:10:51,210
an<font color="#E5E5E5"> API but if you can't use the nightly</font>

194
00:10:47,040 --> 00:10:54,260
version of the compiler<font color="#CCCCCC"> the an</font>

195
00:10:51,210 --> 00:10:57,300
alternative<font color="#E5E5E5"> version will be syntax that</font>

196
00:10:54,260 --> 00:10:59,370
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> grade that has been ported from the</font>

197
00:10:57,300 --> 00:11:02,430
lips<font color="#CCCCCC"> index to a separate grade is</font>

198
00:10:59,370 --> 00:11:05,250
basically a code that has<font color="#CCCCCC"> been taken</font>

199
00:11:02,430 --> 00:11:07,829
<font color="#E5E5E5">from the Russ compiler and put into a</font>

200
00:11:05,250 --> 00:11:11,769
crate that<font color="#E5E5E5"> can work on a stable</font><font color="#CCCCCC"> branch</font>

201
00:11:07,830 --> 00:11:15,149
of the<font color="#E5E5E5"> Russ compiler and it's</font>

202
00:11:11,769 --> 00:11:18,040
it has the exact same API so you can

203
00:11:15,149 --> 00:11:21,249
<font color="#E5E5E5">basically use it interchangeably in your</font>

204
00:11:18,040 --> 00:11:23,319
library<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> want you</font><font color="#E5E5E5"> if you are not</font>

205
00:11:21,249 --> 00:11:26,110
allowed to<font color="#CCCCCC"> use an idle version of</font>

206
00:11:23,319 --> 00:11:30,519
compiler you can basically<font color="#E5E5E5"> just link</font>

207
00:11:26,110 --> 00:11:33,610
this this little library<font color="#CCCCCC"> and it's a</font>

208
00:11:30,519 --> 00:11:36,850
drop-in<font color="#CCCCCC"> replacement</font><font color="#E5E5E5"> but there's another</font>

209
00:11:33,610 --> 00:11:42,160
kavia in that<font color="#E5E5E5"> this library has</font><font color="#CCCCCC"> been</font>

210
00:11:36,850 --> 00:11:45,579
deprecated<font color="#CCCCCC"> and its</font><font color="#E5E5E5"> users mostly confined</font>

211
00:11:42,160 --> 00:11:47,170
to legacy projects<font color="#E5E5E5"> well you can still</font>

212
00:11:45,579 --> 00:11:52,359
use<font color="#CCCCCC"> it it's still available</font><font color="#E5E5E5"> on the</font>

213
00:11:47,170 --> 00:11:53,769
grades dot<font color="#CCCCCC"> io repository but there is</font>

214
00:11:52,360 --> 00:11:57,069
also an alternative<font color="#E5E5E5"> and if you're</font>

215
00:11:53,769 --> 00:11:58,540
starting<font color="#E5E5E5"> a</font><font color="#CCCCCC"> new version</font><font color="#E5E5E5"> of your basically</font>

216
00:11:57,069 --> 00:12:00,519
if you're<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> from scratch and not</font>

217
00:11:58,540 --> 00:12:02,679
from some kind<font color="#E5E5E5"> of legacy code you can</font>

218
00:12:00,519 --> 00:12:09,100
<font color="#CCCCCC">use an alternative library that's called</font>

219
00:12:02,679 --> 00:12:11,410
as sin sy n and<font color="#E5E5E5"> it is used by multiple</font>

220
00:12:09,100 --> 00:12:14,889
projects<font color="#E5E5E5"> too and this syntax</font><font color="#CCCCCC"> crate is</font>

221
00:12:11,410 --> 00:12:17,379
used by rust affinity stable<font color="#E5E5E5"> so it's</font>

222
00:12:14,889 --> 00:12:19,779
basically a matter<font color="#E5E5E5"> of preference</font>

223
00:12:17,379 --> 00:12:25,209
although the authors of<font color="#CCCCCC"> this library</font>

224
00:12:19,779 --> 00:12:27,759
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I would prefer you to not use it so</font>

225
00:12:25,209 --> 00:12:29,739
how do you actually<font color="#E5E5E5"> to put it in</font>

226
00:12:27,759 --> 00:12:34,779
practical<font color="#CCCCCC"> terms how do you actually use</font>

227
00:12:29,740 --> 00:12:37,869
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> basically import the syntax</font>

228
00:12:34,779 --> 00:12:41,829
which<font color="#CCCCCC"> isn't part of the wrath compiler</font>

229
00:12:37,869 --> 00:12:45,040
as a crate<font color="#E5E5E5"> you add this separate mmm</font>

230
00:12:41,829 --> 00:12:48,309
<font color="#CCCCCC">kicker flag that says that it's allowed</font>

231
00:12:45,040 --> 00:12:51,309
to<font color="#E5E5E5"> import private parts of the</font><font color="#CCCCCC"> res</font>

232
00:12:48,309 --> 00:12:57,819
compiler<font color="#E5E5E5"> and you basically import it and</font>

233
00:12:51,309 --> 00:13:00,969
use<font color="#CCCCCC"> it as a as a usual</font><font color="#E5E5E5"> library so then</font>

234
00:12:57,819 --> 00:13:05,319
you provide<font color="#E5E5E5"> a file name of</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Russ file</font>

235
00:13:00,970 --> 00:13:11,290
that you want<font color="#CCCCCC"> to parse another and as a</font>

236
00:13:05,319 --> 00:13:14,399
result you get<font color="#E5E5E5"> a vector of items so</font>

237
00:13:11,290 --> 00:13:17,769
items are actually<font color="#CCCCCC"> enums</font>

238
00:13:14,399 --> 00:13:19,959
<font color="#E5E5E5">that</font><font color="#CCCCCC"> represent all</font><font color="#E5E5E5"> that you can use in</font>

239
00:13:17,769 --> 00:13:21,929
your<font color="#E5E5E5"> code</font><font color="#CCCCCC"> so it represents functions</font>

240
00:13:19,959 --> 00:13:24,219
with their arguments<font color="#E5E5E5"> it represents</font>

241
00:13:21,929 --> 00:13:25,630
statements it represents all the

242
00:13:24,220 --> 00:13:29,470
expressions that<font color="#E5E5E5"> you haven't heard</font>

243
00:13:25,630 --> 00:13:34,000
code and<font color="#E5E5E5"> a nice thing about it is</font><font color="#CCCCCC"> that</font>

244
00:13:29,470 --> 00:13:36,040
it's an enum<font color="#E5E5E5"> and as you know we have</font><font color="#CCCCCC"> a</font>

245
00:13:34,000 --> 00:13:38,800
<font color="#E5E5E5">very nice language construct and rust</font>

246
00:13:36,040 --> 00:13:42,490
<font color="#CCCCCC">that works with enums there's</font><font color="#E5E5E5"> called</font>

247
00:13:38,800 --> 00:13:47,800
match<font color="#E5E5E5"> and by using pattern matching</font><font color="#CCCCCC"> it's</font>

248
00:13:42,490 --> 00:13:52,500
<font color="#E5E5E5">very simple it's very easy to actually</font>

249
00:13:47,800 --> 00:13:55,599
<font color="#CCCCCC">extract the</font><font color="#E5E5E5"> information from those items</font>

250
00:13:52,500 --> 00:13:59,860
<font color="#CCCCCC">you</font><font color="#E5E5E5"> basically match on the type of your</font>

251
00:13:55,600 --> 00:14:02,410
<font color="#E5E5E5">AC item which could</font><font color="#CCCCCC"> also call carry the</font>

252
00:13:59,860 --> 00:14:06,220
all the relevant information<font color="#CCCCCC"> with it in</font>

253
00:14:02,410 --> 00:14:12,790
its<font color="#E5E5E5"> anon variant and you use it however</font>

254
00:14:06,220 --> 00:14:15,300
you like so that's how it could<font color="#CCCCCC"> look</font>

255
00:14:12,790 --> 00:14:19,870
yeah it could<font color="#CCCCCC"> be a function</font><font color="#E5E5E5"> declaration</font>

256
00:14:15,300 --> 00:14:23,859
<font color="#E5E5E5">which has its inputs its arguments with</font>

257
00:14:19,870 --> 00:14:28,630
<font color="#E5E5E5">together with its types and it has also</font>

258
00:14:23,860 --> 00:14:32,080
on how to type so it goes on<font color="#CCCCCC"> like that</font>

259
00:14:28,630 --> 00:14:35,920
<font color="#E5E5E5">with other kinds of items with other</font>

260
00:14:32,080 --> 00:14:39,460
kinds of<font color="#E5E5E5"> STS</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's not a rocket</font>

261
00:14:35,920 --> 00:14:44,319
science so<font color="#E5E5E5"> you basically can continue in</font>

262
00:14:39,460 --> 00:14:47,910
the same manner and finally you know

263
00:14:44,320 --> 00:14:50,520
there is a<font color="#E5E5E5"> code generation aspect so</font>

264
00:14:47,910 --> 00:14:53,920
code generation has a lots and lots of

265
00:14:50,520 --> 00:14:56,920
<font color="#E5E5E5">useful and practical applications so it</font>

266
00:14:53,920 --> 00:14:59,860
<font color="#E5E5E5">enough for for an example when Mozilla</font>

267
00:14:56,920 --> 00:15:02,620
started to develop<font color="#E5E5E5"> servo they stumbled</font>

268
00:14:59,860 --> 00:15:05,230
upon an issue that there is many

269
00:15:02,620 --> 00:15:09,880
libraries that are not written in rust

270
00:15:05,230 --> 00:15:13,750
<font color="#CCCCCC">yet so to use these libraries that are</font>

271
00:15:09,880 --> 00:15:17,530
<font color="#E5E5E5">written in C</font><font color="#CCCCCC"> and C++</font><font color="#E5E5E5"> they got together</font>

272
00:15:13,750 --> 00:15:20,530
<font color="#E5E5E5">with</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> library</font><font color="#CCCCCC"> read sculptress baingan</font>

273
00:15:17,530 --> 00:15:23,560
so what it does basically<font color="#E5E5E5"> it uses si</font>

274
00:15:20,530 --> 00:15:26,800
<font color="#E5E5E5">Lang to extract the meta information</font>

275
00:15:23,560 --> 00:15:31,569
from<font color="#CCCCCC"> C++ code so basically can think</font>

276
00:15:26,800 --> 00:15:33,550
about it as as an analogy of that<font color="#CCCCCC"> lip</font>

277
00:15:31,570 --> 00:15:36,040
syntax from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> russ compiler but</font><font color="#E5E5E5"> it</font>

278
00:15:33,550 --> 00:15:37,990
works for<font color="#CCCCCC"> sibylla's</font><font color="#E5E5E5"> plus so</font><font color="#CCCCCC"> we'll</font>

279
00:15:36,040 --> 00:15:39,279
<font color="#CCCCCC">extract</font><font color="#E5E5E5"> the meta information from the</font>

280
00:15:37,990 --> 00:15:43,509
C++<font color="#CCCCCC"> code</font>

281
00:15:39,279 --> 00:15:47,350
and<font color="#E5E5E5"> generates code in rust so that that</font>

282
00:15:43,509 --> 00:15:49,060
way you get a<font color="#E5E5E5"> library that can talk to a</font>

283
00:15:47,350 --> 00:15:51,639
<font color="#CCCCCC">single class library but you</font><font color="#E5E5E5"> don't need</font>

284
00:15:49,060 --> 00:15:59,768
<font color="#CCCCCC">to write</font><font color="#E5E5E5"> it by hand</font><font color="#CCCCCC"> which will be of</font>

285
00:15:51,639 --> 00:16:03,430
<font color="#CCCCCC">course very tedious and error-prone so</font>

286
00:15:59,769 --> 00:16:06,370
then there is a civilization<font color="#E5E5E5"> aspect so</font>

287
00:16:03,430 --> 00:16:09,040
if you work<font color="#CCCCCC"> with protobufs or ro</font><font color="#E5E5E5"> or</font>

288
00:16:06,370 --> 00:16:11,410
other frameworks<font color="#CCCCCC"> that work with other</font>

289
00:16:09,040 --> 00:16:14,230
languages<font color="#E5E5E5"> they basically follow</font><font color="#CCCCCC"> the same</font>

290
00:16:11,410 --> 00:16:17,079
pattern<font color="#E5E5E5"> they have a description of data</font>

291
00:16:14,230 --> 00:16:22,870
structures<font color="#CCCCCC"> that you might need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> in</font>

292
00:16:17,079 --> 00:16:25,839
different<font color="#E5E5E5"> languages and they basically</font>

293
00:16:22,870 --> 00:16:29,769
use code generation to provide this

294
00:16:25,839 --> 00:16:32,170
feature<font color="#E5E5E5"> and in rust</font><font color="#CCCCCC"> you can do the same</font>

295
00:16:29,769 --> 00:16:34,329
and I believe there<font color="#E5E5E5"> is already a bunch</font>

296
00:16:32,170 --> 00:16:37,628
of libraries<font color="#CCCCCC"> that provide this thing for</font>

297
00:16:34,329 --> 00:16:39,638
you but if you want to make<font color="#E5E5E5"> a similar</font>

298
00:16:37,629 --> 00:16:46,720
thing<font color="#E5E5E5"> you can use code generation as</font>

299
00:16:39,639 --> 00:16:50,110
well and<font color="#E5E5E5"> finally why why do we use HTS</font>

300
00:16:46,720 --> 00:16:54,519
why do we use parsing instead of instead

301
00:16:50,110 --> 00:16:56,920
<font color="#CCCCCC">of just going by macros well first of</font>

302
00:16:54,519 --> 00:17:00,250
all macros<font color="#E5E5E5"> don't have an access to you</font>

303
00:16:56,920 --> 00:17:03,519
the environment that you know run<font color="#CCCCCC"> your</font>

304
00:17:00,250 --> 00:17:06,520
program in so<font color="#E5E5E5"> macros are kind of</font>

305
00:17:03,519 --> 00:17:08,530
<font color="#E5E5E5">isolated by the compiler context they</font>

306
00:17:06,520 --> 00:17:12,220
can't<font color="#E5E5E5"> access the input out they can't</font>

307
00:17:08,530 --> 00:17:14,639
<font color="#CCCCCC">read a file from your file system they</font>

308
00:17:12,220 --> 00:17:18,939
can't go<font color="#E5E5E5"> to the network and so on and</font>

309
00:17:14,640 --> 00:17:21,490
with and with parsing by parsing your

310
00:17:18,939 --> 00:17:25,000
code you can basically<font color="#E5E5E5"> have and have a</font>

311
00:17:21,490 --> 00:17:26,709
the all the power<font color="#E5E5E5"> that rust the rust</font>

312
00:17:25,000 --> 00:17:30,909
compiler and<font color="#E5E5E5"> the rust language provide</font>

313
00:17:26,709 --> 00:17:33,190
you and<font color="#CCCCCC"> not</font><font color="#E5E5E5"> only the rust language and</font>

314
00:17:30,909 --> 00:17:38,640
the the full power of<font color="#CCCCCC"> your environment</font>

315
00:17:33,190 --> 00:17:42,640
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the second aspect of it is that</font>

316
00:17:38,640 --> 00:17:45,460
macros 2.0 that should be available in

317
00:17:42,640 --> 00:17:48,309
<font color="#E5E5E5">the</font><font color="#CCCCCC"> wrath compiler soon should</font><font color="#E5E5E5"> cover at</font>

318
00:17:45,460 --> 00:17:51,800
least<font color="#E5E5E5"> a part of these use</font><font color="#CCCCCC"> cases so</font><font color="#E5E5E5"> you</font>

319
00:17:48,309 --> 00:17:55,040
might want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> follow this closely</font>

320
00:17:51,800 --> 00:17:58,790
and finally how do you actually<font color="#E5E5E5"> generate</font>

321
00:17:55,040 --> 00:18:01,940
your<font color="#E5E5E5"> code huh you can use a tool that</font>

322
00:17:58,790 --> 00:18:06,170
utilizes the<font color="#E5E5E5"> Builder pattern they</font>

323
00:18:01,940 --> 00:18:08,480
<font color="#E5E5E5">basically call functions</font><font color="#CCCCCC"> so to construct</font>

324
00:18:06,170 --> 00:18:10,160
a function<font color="#E5E5E5"> you will call item of</font><font color="#CCCCCC"> fun and</font>

325
00:18:08,480 --> 00:18:11,900
provide the context of that function<font color="#CCCCCC"> you</font>

326
00:18:10,160 --> 00:18:13,850
provide the function name<font color="#E5E5E5"> you provide</font>

327
00:18:11,900 --> 00:18:16,490
<font color="#E5E5E5">the function arguments and you provide</font>

328
00:18:13,850 --> 00:18:21,770
the function body<font color="#CCCCCC"> and as a result you</font>

329
00:18:16,490 --> 00:18:24,560
<font color="#CCCCCC">will get the ast item that will contain</font>

330
00:18:21,770 --> 00:18:27,400
<font color="#E5E5E5">on all the relevant information for your</font>

331
00:18:24,560 --> 00:18:30,200
function<font color="#E5E5E5"> and from that HT item you can</font>

332
00:18:27,400 --> 00:18:34,280
<font color="#E5E5E5">converted</font><font color="#CCCCCC"> it into into a string</font><font color="#E5E5E5"> and get</font>

333
00:18:30,200 --> 00:18:38,060
the<font color="#CCCCCC"> rescued as a result but it's not</font>

334
00:18:34,280 --> 00:18:40,160
very convenient<font color="#E5E5E5"> so what we can use</font>

335
00:18:38,060 --> 00:18:43,639
<font color="#E5E5E5">instead we can employ the</font><font color="#CCCCCC"> concept that</font>

336
00:18:40,160 --> 00:18:47,660
is called<font color="#E5E5E5"> quasi quasi quotation and it</font>

337
00:18:43,640 --> 00:18:50,030
is widely known and<font color="#E5E5E5"> widely</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

338
00:18:47,660 --> 00:18:51,620
<font color="#E5E5E5">lisp language and it's widely used by</font>

339
00:18:50,030 --> 00:18:55,010
some functional languages like Haskell

340
00:18:51,620 --> 00:18:59,360
for<font color="#E5E5E5"> example and the concept is quite</font>

341
00:18:55,010 --> 00:19:02,930
simple<font color="#CCCCCC"> it's server</font><font color="#E5E5E5"> resembling of macros</font>

342
00:18:59,360 --> 00:19:06,229
but actually<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of you know instead</font>

343
00:19:02,930 --> 00:19:09,200
<font color="#CCCCCC">of outputting just a string it provides</font>

344
00:19:06,230 --> 00:19:13,730
you with<font color="#E5E5E5"> tokens and the</font><font color="#CCCCCC"> HD</font><font color="#E5E5E5"> items that</font>

345
00:19:09,200 --> 00:19:16,910
<font color="#E5E5E5">you can use</font><font color="#CCCCCC"> further so</font><font color="#E5E5E5"> there is also a</font>

346
00:19:13,730 --> 00:19:19,730
<font color="#CCCCCC">rust library that</font><font color="#E5E5E5"> that's called</font><font color="#CCCCCC"> quote</font>

347
00:19:16,910 --> 00:19:22,570
that<font color="#E5E5E5"> provides a bunch of handy markers</font>

348
00:19:19,730 --> 00:19:27,020
that you can use to<font color="#CCCCCC"> generate your code</font>

349
00:19:22,570 --> 00:19:30,200
it<font color="#E5E5E5"> looks like this as you</font><font color="#CCCCCC"> can see it's</font>

350
00:19:27,020 --> 00:19:32,660
<font color="#E5E5E5">almost the same as you would have</font>

351
00:19:30,200 --> 00:19:35,420
written it if you have dealt with macros

352
00:19:32,660 --> 00:19:39,500
<font color="#CCCCCC">so you can just create</font><font color="#E5E5E5"> a new identifier</font>

353
00:19:35,420 --> 00:19:43,460
and place it in your<font color="#E5E5E5"> code instead of</font>

354
00:19:39,500 --> 00:19:45,310
<font color="#E5E5E5">placeholder</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> as a result and as a</font>

355
00:19:43,460 --> 00:19:48,530
result if<font color="#CCCCCC"> you convert it into a</font><font color="#E5E5E5"> string</font>

356
00:19:45,310 --> 00:19:52,429
<font color="#E5E5E5">you will get a resulting function a</font>

357
00:19:48,530 --> 00:19:55,760
resulting source code and you<font color="#CCCCCC"> can now</font>

358
00:19:52,430 --> 00:19:59,930
put<font color="#E5E5E5"> it into a file or do whatever you'd</font>

359
00:19:55,760 --> 00:20:03,400
like<font color="#E5E5E5"> with it and finally a small case</font><font color="#CCCCCC"> a</font>

360
00:19:59,930 --> 00:20:05,720
<font color="#E5E5E5">small case study about how can you use</font>

361
00:20:03,400 --> 00:20:10,759
parsing in your project

362
00:20:05,720 --> 00:20:14,629
so it made safe<font color="#E5E5E5"> we dealt with</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> task</font>

363
00:20:10,759 --> 00:20:19,460
will<font color="#CCCCCC"> was to</font><font color="#E5E5E5"> provide a library to be used</font>

364
00:20:14,629 --> 00:20:21,408
in basically<font color="#CCCCCC"> in</font><font color="#E5E5E5"> multiple languages</font><font color="#CCCCCC"> we</font>

365
00:20:19,460 --> 00:20:24,110
<font color="#E5E5E5">have a library that talks to</font><font color="#CCCCCC"> a p2p</font>

366
00:20:21,409 --> 00:20:27,169
<font color="#CCCCCC">network a peer-to-peer network and we</font>

367
00:20:24,110 --> 00:20:29,750
want people<font color="#CCCCCC"> to use it</font><font color="#E5E5E5"> from basically any</font>

368
00:20:27,169 --> 00:20:31,730
language<font color="#CCCCCC"> that exists and</font><font color="#E5E5E5"> we provide this</font>

369
00:20:29,750 --> 00:20:34,009
library<font color="#E5E5E5"> as</font><font color="#CCCCCC"> an FF I interface</font><font color="#E5E5E5"> so it</font>

370
00:20:31,730 --> 00:20:36,200
exports<font color="#CCCCCC"> a foreign function interface and</font>

371
00:20:34,009 --> 00:20:40,879
it's available as a<font color="#CCCCCC"> C library as any</font>

372
00:20:36,200 --> 00:20:43,759
other<font color="#E5E5E5"> C library but as we want it to be</font>

373
00:20:40,879 --> 00:20:46,850
<font color="#E5E5E5">used by as we want it to be used by</font>

374
00:20:43,759 --> 00:20:53,120
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> or from Python and from Java</font>

375
00:20:46,850 --> 00:20:55,850
<font color="#E5E5E5">and from other languages we and it's a</font>

376
00:20:53,120 --> 00:20:59,029
very tedious<font color="#E5E5E5"> process to just write that</font>

377
00:20:55,850 --> 00:21:00,918
code by hand<font color="#E5E5E5"> to write the</font><font color="#CCCCCC"> language</font>

378
00:20:59,029 --> 00:21:04,399
bindings code by<font color="#CCCCCC"> hand</font><font color="#E5E5E5"> we came</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with</font>

379
00:21:00,919 --> 00:21:06,740
that solution<font color="#E5E5E5"> of parsing basically</font>

380
00:21:04,399 --> 00:21:09,408
parsing our entire library<font color="#E5E5E5"> and export</font>

381
00:21:06,740 --> 00:21:12,470
them looking at<font color="#E5E5E5"> the exported</font><font color="#CCCCCC"> f5</font>

382
00:21:09,409 --> 00:21:14,509
functions and create generating Java and

383
00:21:12,470 --> 00:21:18,799
c-sharp and<font color="#E5E5E5"> Python code based on that</font>

384
00:21:14,509 --> 00:21:21,559
and besides<font color="#E5E5E5"> that now Java wouldn't work</font>

385
00:21:18,799 --> 00:21:25,039
simple with that code<font color="#CCCCCC"> so we also</font>

386
00:21:21,559 --> 00:21:28,460
generate<font color="#E5E5E5"> Jana bindings in rust so we</font>

387
00:21:25,039 --> 00:21:31,460
generate<font color="#E5E5E5"> rust code that exports</font><font color="#CCCCCC"> jane i</font>

388
00:21:28,460 --> 00:21:34,340
functions that<font color="#CCCCCC"> Java understand</font><font color="#E5E5E5"> and that</font>

389
00:21:31,460 --> 00:21:37,309
the entire code of that libraries ik is

390
00:21:34,340 --> 00:21:42,350
generated by basically<font color="#E5E5E5"> as a result of</font>

391
00:21:37,309 --> 00:21:44,450
code generator and the parser so<font color="#CCCCCC"> that's</font>

392
00:21:42,350 --> 00:21:46,689
it<font color="#E5E5E5"> and if you have any questions please</font>

393
00:21:44,450 --> 00:21:46,690
ask

394
00:21:46,890 --> 00:21:54,549
[Applause]

395
00:22:05,630 --> 00:22:23,600
my<font color="#E5E5E5"> library</font><font color="#CCCCCC"> and well well the question is</font>

396
00:22:19,360 --> 00:22:27,919
can you<font color="#CCCCCC"> use basically can you</font><font color="#E5E5E5"> transform</font>

397
00:22:23,600 --> 00:22:29,840
a STIs<font color="#E5E5E5"> in the compile time so when</font>

398
00:22:27,920 --> 00:22:32,600
you're compiling your<font color="#E5E5E5"> library can you</font>

399
00:22:29,840 --> 00:22:35,240
<font color="#E5E5E5">transform the</font><font color="#CCCCCC"> ast s to have some other</font>

400
00:22:32,600 --> 00:22:37,520
representation<font color="#CCCCCC"> and of course it is</font>

401
00:22:35,240 --> 00:22:39,470
possible<font color="#CCCCCC"> and you do it's with macros so</font>

402
00:22:37,520 --> 00:22:43,070
basically that what<font color="#E5E5E5"> micros does they</font>

403
00:22:39,470 --> 00:22:46,580
take the ast<font color="#E5E5E5"> 3 and they produce another</font>

404
00:22:43,070 --> 00:22:48,919
<font color="#E5E5E5">ast tree so mmm that is solved by macros</font>

405
00:22:46,580 --> 00:22:52,909
and also there is<font color="#CCCCCC"> a procedural matters</font>

406
00:22:48,920 --> 00:22:55,820
thing and there is also macros 2.0 so

407
00:22:52,910 --> 00:22:58,070
<font color="#CCCCCC">Rus provides multiple ways to transform</font>

408
00:22:55,820 --> 00:23:00,560
<font color="#E5E5E5">your code to some other representation</font>

409
00:22:58,070 --> 00:23:02,740
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you can choose whatever suits you</font>

410
00:23:00,560 --> 00:23:02,740
better

411
00:23:28,180 --> 00:23:34,450
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> question is can you basically do</font>

412
00:23:32,000 --> 00:23:38,810
a mock testing<font color="#E5E5E5"> in rust by replacing</font>

413
00:23:34,450 --> 00:23:41,570
<font color="#E5E5E5">structures with some other version</font><font color="#CCCCCC"> with</font>

414
00:23:38,810 --> 00:23:44,540
versions with instrumentation<font color="#E5E5E5"> and test</font>

415
00:23:41,570 --> 00:23:46,970
functions now and so on and yeah I

416
00:23:44,540 --> 00:23:49,100
believe<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> possible if you use the</font>

417
00:23:46,970 --> 00:23:51,620
compiler plugins and the procedural

418
00:23:49,100 --> 00:23:54,350
markers<font color="#E5E5E5"> and if you use the</font><font color="#CCCCCC"> derive</font><font color="#E5E5E5"> key in</font>

419
00:23:51,620 --> 00:23:57,020
<font color="#E5E5E5">keyword that</font><font color="#CCCCCC"> what it basically does and</font>

420
00:23:54,350 --> 00:24:00,260
that's also<font color="#E5E5E5"> how they how the</font><font color="#CCCCCC"> serger</font>

421
00:23:57,020 --> 00:24:02,210
library works<font color="#E5E5E5"> it derives your structs so</font>

422
00:24:00,260 --> 00:24:04,580
you just write<font color="#CCCCCC"> derived</font>

423
00:24:02,210 --> 00:24:07,490
<font color="#E5E5E5">our allies and</font><font color="#CCCCCC"> the rest the surgery</font>

424
00:24:04,580 --> 00:24:10,610
library takes that instruction and

425
00:24:07,490 --> 00:24:12,890
generates<font color="#E5E5E5"> in the serialization</font><font color="#CCCCCC"> and</font>

426
00:24:10,610 --> 00:24:16,040
deserialization codes for your structure

427
00:24:12,890 --> 00:24:19,010
<font color="#E5E5E5">so I believe</font><font color="#CCCCCC"> that so I can work in a</font>

428
00:24:16,040 --> 00:24:24,050
very<font color="#E5E5E5"> similar way for the mock testing</font>

429
00:24:19,010 --> 00:24:25,420
and the mock features of<font color="#E5E5E5"> so for the mock</font>

430
00:24:24,050 --> 00:24:41,960
version of your<font color="#CCCCCC"> trucks</font>

431
00:24:25,420 --> 00:24:46,060
any other questions yes<font color="#CCCCCC"> so the question</font>

432
00:24:41,960 --> 00:24:49,190
<font color="#CCCCCC">is is is there a project in rust yet</font>

433
00:24:46,060 --> 00:24:50,870
that is basically compiler generator

434
00:24:49,190 --> 00:24:55,100
that takes a description of a compiler

435
00:24:50,870 --> 00:24:57,919
<font color="#E5E5E5">and generates a compiler from from the</font>

436
00:24:55,100 --> 00:25:01,459
BNF grammar or whatever it's called

437
00:24:57,920 --> 00:25:04,400
yeah there is there<font color="#E5E5E5"> is a bunch of such</font>

438
00:25:01,460 --> 00:25:06,890
projects I believe for one is called<font color="#E5E5E5"> Lal</font>

439
00:25:04,400 --> 00:25:11,630
earth and it is based obviously on<font color="#CCCCCC"> a</font>

440
00:25:06,890 --> 00:25:12,950
<font color="#CCCCCC">lower parsing</font><font color="#E5E5E5"> so yeah there are there's</font>

441
00:25:11,630 --> 00:25:15,440
a multiple projects and you can

442
00:25:12,950 --> 00:25:18,290
basically find them by googling<font color="#CCCCCC"> Russ</font>

443
00:25:15,440 --> 00:25:21,980
compiler generator<font color="#E5E5E5"> and there is a</font>

444
00:25:18,290 --> 00:25:24,139
prominent<font color="#E5E5E5"> once and the activity that</font><font color="#CCCCCC"> are</font>

445
00:25:21,980 --> 00:25:28,430
being actively developed<font color="#E5E5E5"> so you can find</font>

446
00:25:24,140 --> 00:25:28,760
<font color="#E5E5E5">many of them</font><font color="#CCCCCC"> ok thanks all for your</font>

447
00:25:28,430 --> 00:25:33,349
attention

448
00:25:28,760 --> 00:25:33,349
[Applause]

