1
00:00:21,090 --> 00:00:25,770
hello everybody<font color="#CCCCCC"> in next talk</font><font color="#E5E5E5"> it will be</font>

2
00:00:23,400 --> 00:00:36,449
a lot testing<font color="#E5E5E5"> web services at Mozilla of</font>

3
00:00:25,770 --> 00:00:38,129
<font color="#E5E5E5">is motive by</font><font color="#CCCCCC"> Mara Gazette alright so</font>

4
00:00:36,449 --> 00:00:41,070
everyone<font color="#E5E5E5"> speaks French here can I switch</font>

5
00:00:38,129 --> 00:00:43,949
<font color="#E5E5E5">to French</font><font color="#CCCCCC"> sure yeah okay</font>

6
00:00:41,070 --> 00:00:44,550
<font color="#CCCCCC">Oh too bad</font><font color="#E5E5E5"> so I'll have to do</font><font color="#CCCCCC"> in English</font>

7
00:00:43,949 --> 00:00:47,489
I guess

8
00:00:44,550 --> 00:00:50,879
so I'm going<font color="#CCCCCC"> to talk about Molotov which</font>

9
00:00:47,489 --> 00:00:54,720
is a<font color="#CCCCCC"> load testing tool</font><font color="#E5E5E5"> we're writing at</font>

10
00:00:50,879 --> 00:00:59,820
Mozilla to<font color="#E5E5E5"> do some testing on our web</font>

11
00:00:54,720 --> 00:01:02,070
services<font color="#CCCCCC"> and if I have to give it to the</font>

12
00:00:59,820 --> 00:01:04,709
definition<font color="#E5E5E5"> of a single sentence it's a</font>

13
00:01:02,070 --> 00:01:10,080
Python<font color="#CCCCCC"> 3 load testing framework that</font>

14
00:01:04,709 --> 00:01:12,689
focuses on<font color="#CCCCCC"> web services so before I</font>

15
00:01:10,080 --> 00:01:14,548
present the tool itself I want<font color="#E5E5E5"> to take a</font>

16
00:01:12,689 --> 00:01:17,880
little<font color="#E5E5E5"> bit of time to explain what we're</font>

17
00:01:14,549 --> 00:01:20,070
doing<font color="#E5E5E5"> doing at Mozilla in terms of stuff</font>

18
00:01:17,880 --> 00:01:23,130
we deploy in the<font color="#E5E5E5"> cloud so Mozilla is</font>

19
00:01:20,070 --> 00:01:27,389
<font color="#E5E5E5">much more than a browser so how</font><font color="#CCCCCC"> many</font>

20
00:01:23,130 --> 00:01:31,560
<font color="#E5E5E5">people here use Firefox well it's the</font>

21
00:01:27,390 --> 00:01:33,380
<font color="#E5E5E5">possum so so when you use Firefox you</font>

22
00:01:31,560 --> 00:01:35,460
have some web services that<font color="#CCCCCC"> are</font>

23
00:01:33,380 --> 00:01:38,039
interacting with<font color="#CCCCCC"> your browser</font><font color="#E5E5E5"> for</font>

24
00:01:35,460 --> 00:01:39,839
<font color="#CCCCCC">example if you want to synchronize your</font>

25
00:01:38,039 --> 00:01:42,990
bookmarks it's going to call a web

26
00:01:39,840 --> 00:01:46,259
service in<font color="#E5E5E5"> Python on one of our server</font>

27
00:01:42,990 --> 00:01:49,770
<font color="#CCCCCC">and stuff</font><font color="#E5E5E5"> like that and we also have big</font>

28
00:01:46,259 --> 00:01:53,399
web applications so the two well-known

29
00:01:49,770 --> 00:01:55,619
application we have web apps<font color="#E5E5E5"> that we</font>

30
00:01:53,399 --> 00:01:59,249
maintain is the Mozilla developer

31
00:01:55,619 --> 00:02:00,869
Network which is like a pretty<font color="#CCCCCC"> awesome</font>

32
00:01:59,249 --> 00:02:04,079
website where you<font color="#E5E5E5"> can get some</font><font color="#CCCCCC"> help</font>

33
00:02:00,869 --> 00:02:06,780
about<font color="#E5E5E5"> CSS HTML supply that it's usually</font>

34
00:02:04,079 --> 00:02:08,310
the one that<font color="#E5E5E5"> comes in</font><font color="#CCCCCC"> when you search</font><font color="#E5E5E5"> on</font>

35
00:02:06,780 --> 00:02:10,740
the internet<font color="#CCCCCC"> about something about</font>

36
00:02:08,310 --> 00:02:14,390
JavaScript<font color="#E5E5E5"> it's usually darker flow or</font>

37
00:02:10,740 --> 00:02:17,430
MDM that comes in the<font color="#E5E5E5"> first results</font>

38
00:02:14,390 --> 00:02:20,190
<font color="#CCCCCC">there</font><font color="#E5E5E5"> is also the Firefox add-on so</font>

39
00:02:17,430 --> 00:02:23,790
basically become you install a an add-on

40
00:02:20,190 --> 00:02:26,850
in Firefox<font color="#E5E5E5"> or Thunderbird you get on</font>

41
00:02:23,790 --> 00:02:29,970
this website<font color="#E5E5E5"> and it has all the</font><font color="#CCCCCC"> add-ons</font>

42
00:02:26,850 --> 00:02:32,670
you can<font color="#CCCCCC"> saw and also have some service</font>

43
00:02:29,970 --> 00:02:35,130
<font color="#CCCCCC">to update the add-ons</font><font color="#E5E5E5"> you have installed</font>

44
00:02:32,670 --> 00:02:37,890
on your browser<font color="#E5E5E5"> so those are web</font>

45
00:02:35,130 --> 00:02:42,060
<font color="#E5E5E5">applications and then you have numerous</font>

46
00:02:37,890 --> 00:02:46,260
<font color="#E5E5E5">web services that we maintain to make</font>

47
00:02:42,060 --> 00:02:49,680
everything work<font color="#CCCCCC"> so I can't have the</font><font color="#E5E5E5"> full</font>

48
00:02:46,260 --> 00:02:52,200
<font color="#E5E5E5">little list</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> they are probably more</font>

49
00:02:49,680 --> 00:02:57,510
than 50 web services out there<font color="#E5E5E5"> to make</font>

50
00:02:52,200 --> 00:03:01,350
the whole Muslim system works<font color="#CCCCCC"> so</font><font color="#E5E5E5"> one of</font>

51
00:02:57,510 --> 00:03:03,060
<font color="#E5E5E5">the biggest one is perfect sync</font><font color="#CCCCCC"> the one</font>

52
00:03:01,350 --> 00:03:06,090
that is going to let you synchronize

53
00:03:03,060 --> 00:03:09,300
your history your bookmarks and stuff

54
00:03:06,090 --> 00:03:11,010
like that<font color="#E5E5E5"> across</font><font color="#CCCCCC"> your devices there is</font>

55
00:03:09,300 --> 00:03:14,959
<font color="#E5E5E5">another one called screenshots now you</font>

56
00:03:11,010 --> 00:03:14,959
can take<font color="#E5E5E5"> some screenshot in Firefox and</font>

57
00:03:14,989 --> 00:03:21,060
share some<font color="#E5E5E5"> screenshot and there's a new</font>

58
00:03:18,510 --> 00:03:23,640
<font color="#E5E5E5">one that's pretty cool</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> share a</font>

59
00:03:21,060 --> 00:03:26,040
file that gets<font color="#E5E5E5"> encrypted on the</font>

60
00:03:23,640 --> 00:03:28,260
<font color="#CCCCCC">client-side</font><font color="#E5E5E5"> to someone and it's gonna</font>

61
00:03:26,040 --> 00:03:30,090
stay in the cloud for I think<font color="#CCCCCC"> a month or</font>

62
00:03:28,260 --> 00:03:32,790
something<font color="#CCCCCC"> like that so that's an</font>

63
00:03:30,090 --> 00:03:34,709
experimental<font color="#E5E5E5"> one that it's something</font>

64
00:03:32,790 --> 00:03:35,670
<font color="#CCCCCC">that might stick around because people</font>

65
00:03:34,709 --> 00:03:38,250
like<font color="#E5E5E5"> it</font>

66
00:03:35,670 --> 00:03:41,369
<font color="#CCCCCC">I think the file limit is one</font><font color="#E5E5E5"> gigabyte</font>

67
00:03:38,250 --> 00:03:41,940
so you can share some pretty cool<font color="#CCCCCC"> stuff</font>

68
00:03:41,370 --> 00:03:44,730
with<font color="#E5E5E5"> that</font>

69
00:03:41,940 --> 00:03:47,850
so all this those are<font color="#E5E5E5"> our</font><font color="#CCCCCC"> Web Services</font>

70
00:03:44,730 --> 00:03:50,959
<font color="#E5E5E5">and if I had to give a definition</font><font color="#CCCCCC"> of</font>

71
00:03:47,850 --> 00:03:54,120
what's a web app I would<font color="#E5E5E5"> say that it's a</font>

72
00:03:50,959 --> 00:03:56,700
application<font color="#CCCCCC"> that gets cold</font><font color="#E5E5E5"> queries</font><font color="#CCCCCC"> some</font>

73
00:03:54,120 --> 00:03:57,150
<font color="#CCCCCC">backends</font><font color="#E5E5E5"> and spits some</font><font color="#CCCCCC"> HTML for the</font><font color="#E5E5E5"> end</font>

74
00:03:56,700 --> 00:03:59,310
<font color="#E5E5E5">user</font>

75
00:03:57,150 --> 00:04:02,430
that's roughly<font color="#CCCCCC"> the definition I would</font>

76
00:03:59,310 --> 00:04:05,310
give<font color="#CCCCCC"> about in the web app on the other</font>

77
00:04:02,430 --> 00:04:06,870
side web services are like a subset of

78
00:04:05,310 --> 00:04:10,470
<font color="#E5E5E5">web application</font>

79
00:04:06,870 --> 00:04:14,730
it's a<font color="#CCCCCC"> recitation that</font><font color="#E5E5E5"> most of the time</font>

80
00:04:10,470 --> 00:04:18,510
<font color="#E5E5E5">spits out some JSON and so basically you</font>

81
00:04:14,730 --> 00:04:21,269
have an<font color="#E5E5E5"> API in H in HTTP where you can</font>

82
00:04:18,510 --> 00:04:24,180
call slash items<font color="#E5E5E5"> slash blah blah blah</font>

83
00:04:21,269 --> 00:04:26,580
<font color="#E5E5E5">and use the right verb and get back some</font>

84
00:04:24,180 --> 00:04:30,060
JSON<font color="#CCCCCC"> same some JSON and do some stuff</font>

85
00:04:26,580 --> 00:04:32,430
like<font color="#E5E5E5"> that so it's not meant to be</font>

86
00:04:30,060 --> 00:04:34,710
<font color="#CCCCCC">displayed in your browser but</font><font color="#E5E5E5"> it's</font>

87
00:04:32,430 --> 00:04:37,800
<font color="#E5E5E5">useful when</font><font color="#CCCCCC"> you want to do some</font><font color="#E5E5E5"> stuff</font>

88
00:04:34,710 --> 00:04:42,359
with<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> you get so web service web</font>

89
00:04:37,800 --> 00:04:44,700
app and<font color="#CCCCCC"> if I could deeper into the</font>

90
00:04:42,360 --> 00:04:46,139
difference<font color="#E5E5E5"> I would</font><font color="#CCCCCC"> say that</font><font color="#E5E5E5"> a web app</font>

91
00:04:44,700 --> 00:04:48,659
has a part<font color="#CCCCCC"> that</font>

92
00:04:46,139 --> 00:04:52,199
gets executed in the<font color="#E5E5E5"> browser if you</font><font color="#CCCCCC"> have</font>

93
00:04:48,659 --> 00:04:56,610
<font color="#E5E5E5">some</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> it also stores some</font>

94
00:04:52,199 --> 00:05:00,240
cookies<font color="#E5E5E5"> and sometimes</font><font color="#CCCCCC"> keep a WebSocket</font>

95
00:04:56,610 --> 00:05:03,479
<font color="#CCCCCC">open between your browser and the server</font>

96
00:05:00,240 --> 00:05:07,379
<font color="#E5E5E5">and it has a specific</font><font color="#CCCCCC"> user</font>

97
00:05:03,479 --> 00:05:10,650
authentication flow for example<font color="#CCCCCC"> if</font>

98
00:05:07,379 --> 00:05:13,409
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> on Travie</font><font color="#E5E5E5"> or and use a</font>

99
00:05:10,650 --> 00:05:16,248
third-party<font color="#E5E5E5"> application</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> might do all</font>

100
00:05:13,409 --> 00:05:19,710
<font color="#CCCCCC">of dance</font><font color="#E5E5E5"> between</font><font color="#CCCCCC"> the two</font><font color="#E5E5E5"> websites and</font>

101
00:05:16,249 --> 00:05:22,620
the you<font color="#E5E5E5"> have to enter you your your</font>

102
00:05:19,710 --> 00:05:25,049
login password<font color="#CCCCCC"> and then grant access</font><font color="#E5E5E5"> to</font>

103
00:05:22,620 --> 00:05:27,949
an<font color="#E5E5E5"> application and all that work is</font><font color="#CCCCCC"> done</font>

104
00:05:25,050 --> 00:05:31,889
with<font color="#E5E5E5"> the user with a user interface and</font>

105
00:05:27,949 --> 00:05:33,990
last but not least<font color="#E5E5E5"> web application</font>

106
00:05:31,889 --> 00:05:37,500
usually<font color="#E5E5E5"> have a lot of caching</font><font color="#CCCCCC"> I was</font>

107
00:05:33,990 --> 00:05:40,199
talking about<font color="#E5E5E5"> the MDM and</font><font color="#CCCCCC"> ammo</font>

108
00:05:37,500 --> 00:05:43,349
previously those are big<font color="#CCCCCC"> django websites</font>

109
00:05:40,199 --> 00:05:46,069
<font color="#E5E5E5">and we want to make sure that we call</font>

110
00:05:43,349 --> 00:05:49,409
them the least often possible<font color="#E5E5E5"> because</font>

111
00:05:46,069 --> 00:05:51,599
<font color="#E5E5E5">django can be slow in some queries so we</font>

112
00:05:49,409 --> 00:05:54,539
have like a lot<font color="#E5E5E5"> of caching in front of</font>

113
00:05:51,599 --> 00:05:57,870
<font color="#CCCCCC">django to make sure</font><font color="#E5E5E5"> that the pages are</font>

114
00:05:54,539 --> 00:05:59,699
fast<font color="#E5E5E5"> enough so</font><font color="#CCCCCC"> stuff static files are</font>

115
00:05:57,870 --> 00:06:01,319
<font color="#CCCCCC">pushing CDN and stuff like that so web</font>

116
00:05:59,699 --> 00:06:04,919
application usually<font color="#E5E5E5"> have a lot</font><font color="#CCCCCC"> of</font>

117
00:06:01,319 --> 00:06:07,409
caching on the other hand web services

118
00:06:04,919 --> 00:06:10,198
you usually<font color="#E5E5E5"> don't have any caching there</font>

119
00:06:07,409 --> 00:06:14,550
as dumb as possible the<font color="#CCCCCC"> Joads want to</font>

120
00:06:10,199 --> 00:06:16,710
get queried<font color="#CCCCCC"> pink some</font><font color="#E5E5E5"> database baked</font>

121
00:06:14,550 --> 00:06:19,349
some<font color="#CCCCCC"> json and</font><font color="#E5E5E5"> send it</font><font color="#CCCCCC"> back as fast as</font>

122
00:06:16,710 --> 00:06:21,779
possible<font color="#CCCCCC"> so it's it's</font><font color="#E5E5E5"> pretty pretty</font>

123
00:06:19,349 --> 00:06:24,300
<font color="#CCCCCC">isolated it's pretty simple</font><font color="#E5E5E5"> and it's</font>

124
00:06:21,779 --> 00:06:27,060
meant<font color="#CCCCCC"> to be an</font><font color="#E5E5E5"> application to</font>

125
00:06:24,300 --> 00:06:30,629
application transaction<font color="#E5E5E5"> so you have to</font>

126
00:06:27,060 --> 00:06:34,199
have a<font color="#E5E5E5"> client</font><font color="#CCCCCC"> that's smart enough to</font>

127
00:06:30,629 --> 00:06:36,509
understand the<font color="#E5E5E5"> JSON you get back and do</font>

128
00:06:34,199 --> 00:06:39,389
<font color="#E5E5E5">something about it for instance in</font>

129
00:06:36,509 --> 00:06:42,289
<font color="#CCCCCC">firefox</font><font color="#E5E5E5"> when you use sync it's going to</font>

130
00:06:39,389 --> 00:06:46,710
do all the encryption<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> client-side</font>

131
00:06:42,289 --> 00:06:49,139
<font color="#E5E5E5">send some queries to firefox</font><font color="#CCCCCC"> sync which</font>

132
00:06:46,710 --> 00:06:52,500
are like dumb queries<font color="#CCCCCC"> hey please store</font>

133
00:06:49,139 --> 00:06:54,330
<font color="#CCCCCC">that encrypted blob</font><font color="#E5E5E5"> and then when you</font>

134
00:06:52,500 --> 00:06:56,129
<font color="#E5E5E5">want to synchronize stuff</font><font color="#CCCCCC"> you're just</font>

135
00:06:54,330 --> 00:06:59,698
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and it's gonna stay as</font>

136
00:06:56,129 --> 00:07:00,270
dumb as possible<font color="#CCCCCC"> and so that's for me</font>

137
00:06:59,699 --> 00:07:02,250
the biggest

138
00:07:00,270 --> 00:07:07,349
<font color="#CCCCCC">first</font><font color="#E5E5E5"> between a web</font><font color="#CCCCCC"> application that</font><font color="#E5E5E5"> is</font>

139
00:07:02,250 --> 00:07:10,230
smart<font color="#CCCCCC"> displays user interface</font><font color="#E5E5E5"> and do a</font>

140
00:07:07,350 --> 00:07:14,540
lot of caching and a web service<font color="#CCCCCC"> that is</font>

141
00:07:10,230 --> 00:07:16,800
roughly<font color="#E5E5E5"> a window to all the data or or</font>

142
00:07:14,540 --> 00:07:20,070
<font color="#E5E5E5">calculation you have on the</font><font color="#CCCCCC"> server-side</font>

143
00:07:16,800 --> 00:07:22,470
<font color="#CCCCCC">and it stays as dumb as possible and as</font>

144
00:07:20,070 --> 00:07:25,400
a matter of fact the trend<font color="#E5E5E5"> in the past</font>

145
00:07:22,470 --> 00:07:28,890
<font color="#E5E5E5">two</font><font color="#CCCCCC"> three four</font><font color="#E5E5E5"> years is then to</font>

146
00:07:25,400 --> 00:07:30,960
implement<font color="#CCCCCC"> micro</font><font color="#E5E5E5"> services which are</font><font color="#CCCCCC"> are</font>

147
00:07:28,890 --> 00:07:34,800
trying to make sure<font color="#CCCCCC"> that each web</font>

148
00:07:30,960 --> 00:07:37,229
service you deploy and use implement a

149
00:07:34,800 --> 00:07:41,090
<font color="#CCCCCC">single feature</font><font color="#E5E5E5"> and doesn't try to</font>

150
00:07:37,230 --> 00:07:41,090
implement<font color="#CCCCCC"> a bunch of</font><font color="#E5E5E5"> different stuff so</font>

151
00:07:41,480 --> 00:07:47,490
<font color="#CCCCCC">what</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> we test web services so</font>

152
00:07:44,430 --> 00:07:50,220
<font color="#CCCCCC">basically at mozilla when we want to</font>

153
00:07:47,490 --> 00:07:53,220
<font color="#E5E5E5">deploy new web services the first thing</font>

154
00:07:50,220 --> 00:07:55,860
we do when<font color="#CCCCCC"> we start to do some stress</font>

155
00:07:53,220 --> 00:07:58,140
testing is to make<font color="#CCCCCC"> sure we understand</font>

156
00:07:55,860 --> 00:08:01,800
how the web service work<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> make</font>

157
00:07:58,140 --> 00:08:04,860
sure<font color="#E5E5E5"> that we understand its behavior</font><font color="#CCCCCC"> and</font>

158
00:08:01,800 --> 00:08:08,400
we understand<font color="#E5E5E5"> how things are supposed to</font>

159
00:08:04,860 --> 00:08:12,030
<font color="#CCCCCC">work so we're gonna start to influence</font>

160
00:08:08,400 --> 00:08:13,440
<font color="#E5E5E5">in scenario that are trying to be as</font>

161
00:08:12,030 --> 00:08:16,219
realistic as possible

162
00:08:13,440 --> 00:08:19,770
and then start to send some load and

163
00:08:16,220 --> 00:08:22,830
eventually<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the goal</font><font color="#E5E5E5"> of course is</font>

164
00:08:19,770 --> 00:08:24,690
<font color="#CCCCCC">to find</font><font color="#E5E5E5"> its bottleneck but the goal</font><font color="#CCCCCC"> is</font>

165
00:08:22,830 --> 00:08:26,969
<font color="#E5E5E5">not to fix the bottleneck the goal is</font>

166
00:08:24,690 --> 00:08:31,190
just<font color="#E5E5E5"> to understand how the application</font>

167
00:08:26,970 --> 00:08:33,990
behaves and<font color="#CCCCCC"> what are its</font><font color="#E5E5E5"> bottlenecks</font><font color="#CCCCCC"> so</font>

168
00:08:31,190 --> 00:08:36,150
maybe<font color="#CCCCCC"> we'll fix them</font><font color="#E5E5E5"> but maybe we won't</font>

169
00:08:33,990 --> 00:08:38,549
fix them it really<font color="#E5E5E5"> depends on the cases</font>

170
00:08:36,150 --> 00:08:41,309
<font color="#E5E5E5">but that's basically the</font><font color="#CCCCCC"> reason why we</font>

171
00:08:38,549 --> 00:08:43,829
want to<font color="#E5E5E5"> test the web services and once</font>

172
00:08:41,309 --> 00:08:46,020
we know<font color="#CCCCCC"> how an application behaves</font><font color="#E5E5E5"> it</font>

173
00:08:43,830 --> 00:08:48,480
gives us an idea<font color="#CCCCCC"> about how we're going</font>

174
00:08:46,020 --> 00:08:52,890
<font color="#E5E5E5">to deploy it since we deploy everything</font>

175
00:08:48,480 --> 00:08:55,620
on Amazon<font color="#CCCCCC"> on the Edible you AWS services</font>

176
00:08:52,890 --> 00:08:58,290
<font color="#E5E5E5">we want to do some sizing we want to</font>

177
00:08:55,620 --> 00:09:00,000
understand what's<font color="#E5E5E5"> the best</font><font color="#CCCCCC"> size of VM</font>

178
00:08:58,290 --> 00:09:01,949
we're going to deploy on Amazon

179
00:09:00,000 --> 00:09:03,540
depending on the application<font color="#E5E5E5"> and stuff</font>

180
00:09:01,950 --> 00:09:06,020
<font color="#E5E5E5">like that so maybe I should</font><font color="#CCCCCC"> mute my</font>

181
00:09:03,540 --> 00:09:06,020
telephone

182
00:09:08,050 --> 00:09:15,920
so when we're<font color="#E5E5E5"> stressing an application</font>

183
00:09:12,620 --> 00:09:18,200
<font color="#E5E5E5">and we look test it we have a few things</font>

184
00:09:15,920 --> 00:09:20,510
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are happening in</font><font color="#E5E5E5"> in the box that</font>

185
00:09:18,200 --> 00:09:22,790
get stressed the the server<font color="#E5E5E5"> we're going</font>

186
00:09:20,510 --> 00:09:25,819
<font color="#CCCCCC">to use some ram we're going to use some</font>

187
00:09:22,790 --> 00:09:28,880
<font color="#E5E5E5">CPUs and we're gonna use some</font><font color="#CCCCCC"> FD so if</font>

188
00:09:25,820 --> 00:09:31,820
these are file descriptors and basically

189
00:09:28,880 --> 00:09:33,620
every<font color="#CCCCCC"> time</font><font color="#E5E5E5"> your web service or someone</font>

190
00:09:31,820 --> 00:09:35,780
<font color="#CCCCCC">that calls you web</font><font color="#E5E5E5"> service interacts</font>

191
00:09:33,620 --> 00:09:38,420
with the server<font color="#E5E5E5"> it's gonna use a socket</font>

192
00:09:35,780 --> 00:09:41,150
and<font color="#E5E5E5"> a socket is a file descriptor that</font>

193
00:09:38,420 --> 00:09:44,329
<font color="#E5E5E5">gets open</font><font color="#CCCCCC"> on on your box so those are</font>

194
00:09:41,150 --> 00:09:47,630
the three main things<font color="#CCCCCC"> the three men</font>

195
00:09:44,330 --> 00:09:52,190
resource you have<font color="#E5E5E5"> on on</font><font color="#CCCCCC"> the server</font><font color="#E5E5E5"> that</font>

196
00:09:47,630 --> 00:09:55,040
is going to get exhausted<font color="#CCCCCC"> when you use</font>

197
00:09:52,190 --> 00:09:57,770
all<font color="#CCCCCC"> of it because you're stressed by by</font>

198
00:09:55,040 --> 00:10:01,370
your client and sometimes some

199
00:09:57,770 --> 00:10:03,199
application<font color="#E5E5E5"> just are so slow that we</font>

200
00:10:01,370 --> 00:10:07,250
don't even<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> time to eat all the</font>

201
00:10:03,200 --> 00:10:09,440
CPU<font color="#CCCCCC"> RAM so that's another case so the</font>

202
00:10:07,250 --> 00:10:12,380
goal<font color="#CCCCCC"> of the stress test is to make sure</font>

203
00:10:09,440 --> 00:10:14,770
we understand when it happens and<font color="#E5E5E5"> we</font>

204
00:10:12,380 --> 00:10:18,860
want to make sure<font color="#E5E5E5"> that when</font><font color="#CCCCCC"> it happens</font>

205
00:10:14,770 --> 00:10:21,770
<font color="#E5E5E5">the web service is not</font><font color="#CCCCCC"> behaving in an</font>

206
00:10:18,860 --> 00:10:24,020
erratic<font color="#E5E5E5"> way so we we had a lot of cases</font>

207
00:10:21,770 --> 00:10:27,199
where<font color="#CCCCCC"> you start to</font><font color="#E5E5E5"> do low tests against</font>

208
00:10:24,020 --> 00:10:31,699
the service and everything<font color="#E5E5E5"> everything</font>

209
00:10:27,200 --> 00:10:33,860
start to<font color="#E5E5E5"> crash and then after you did</font>

210
00:10:31,700 --> 00:10:36,050
<font color="#CCCCCC">your load</font><font color="#E5E5E5"> test when you try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the</font>

211
00:10:33,860 --> 00:10:38,030
web service with a single user<font color="#E5E5E5"> nothing</font>

212
00:10:36,050 --> 00:10:40,880
it works<font color="#E5E5E5"> anymore because everything</font><font color="#CCCCCC"> is</font>

213
00:10:38,030 --> 00:10:43,640
borked<font color="#E5E5E5"> all the connectors in your web</font>

214
00:10:40,880 --> 00:10:46,280
<font color="#CCCCCC">service are are in a state where it's</font>

215
00:10:43,640 --> 00:10:50,240
not able<font color="#E5E5E5"> to work anymore</font><font color="#CCCCCC"> so we want to</font>

216
00:10:46,280 --> 00:10:53,420
make sure<font color="#E5E5E5"> that our web services are not</font>

217
00:10:50,240 --> 00:10:57,920
<font color="#E5E5E5">behaving like that</font><font color="#CCCCCC"> we also want to</font><font color="#E5E5E5"> make</font>

218
00:10:53,420 --> 00:10:59,630
sure that when things are<font color="#CCCCCC"> not when the</font>

219
00:10:57,920 --> 00:11:01,400
server is<font color="#E5E5E5"> not able to cope with</font><font color="#CCCCCC"> the load</font>

220
00:10:59,630 --> 00:11:04,670
anymore we're sending<font color="#E5E5E5"> back some clean</font>

221
00:11:01,400 --> 00:11:08,800
errors so<font color="#E5E5E5"> usually for web services is</font>

222
00:11:04,670 --> 00:11:12,020
all the errors<font color="#CCCCCC"> that site starts with</font><font color="#E5E5E5"> v</font><font color="#CCCCCC"> 0</font>

223
00:11:08,800 --> 00:11:14,180
<font color="#E5E5E5">so this is a list of all the problems we</font>

224
00:11:12,020 --> 00:11:17,960
<font color="#E5E5E5">get when we do some load testing a</font>

225
00:11:14,180 --> 00:11:20,180
<font color="#E5E5E5">concern or</font><font color="#CCCCCC"> serious the first one is so</font>

226
00:11:17,960 --> 00:11:20,610
how<font color="#CCCCCC"> many</font><font color="#E5E5E5"> people so this is a Python talk</font>

227
00:11:20,180 --> 00:11:23,630
so

228
00:11:20,610 --> 00:11:26,850
how many people here<font color="#E5E5E5"> implement Python</font>

229
00:11:23,630 --> 00:11:27,720
server<font color="#CCCCCC"> service or application please</font>

230
00:11:26,850 --> 00:11:30,240
raise your hand

231
00:11:27,720 --> 00:11:33,450
<font color="#CCCCCC">all right so how many</font><font color="#E5E5E5"> people use flask</font>

232
00:11:30,240 --> 00:11:35,820
or Django<font color="#E5E5E5"> okay cool</font>

233
00:11:33,450 --> 00:11:39,019
so basically when you're dealing<font color="#E5E5E5"> with a</font>

234
00:11:35,820 --> 00:11:42,029
flask or Django<font color="#E5E5E5"> or something similar</font>

235
00:11:39,019 --> 00:11:45,420
<font color="#CCCCCC">application</font><font color="#E5E5E5"> the biggest problem is its</font>

236
00:11:42,029 --> 00:11:49,700
lack<font color="#CCCCCC"> of parallelism which means that a</font>

237
00:11:45,420 --> 00:11:51,899
flask process or a Django process will

238
00:11:49,700 --> 00:11:54,990
take one request at a time

239
00:11:51,899 --> 00:11:57,959
and won't be able<font color="#CCCCCC"> to do it in an async</font>

240
00:11:54,990 --> 00:12:01,380
way and that can<font color="#CCCCCC"> be some that can be a</font>

241
00:11:57,959 --> 00:12:03,829
problem<font color="#E5E5E5"> for some web services maybe it's</font>

242
00:12:01,380 --> 00:12:07,350
not but<font color="#E5E5E5"> sometimes it's a problem and</font>

243
00:12:03,829 --> 00:12:09,390
even though<font color="#CCCCCC"> feet</font><font color="#E5E5E5"> flash has some feature</font>

244
00:12:07,350 --> 00:12:10,790
where you<font color="#E5E5E5"> can go multi-threaded most of</font>

245
00:12:09,390 --> 00:12:14,699
the time you don't do it<font color="#CCCCCC"> because it</font>

246
00:12:10,790 --> 00:12:16,980
opened a can of<font color="#E5E5E5"> worms</font><font color="#CCCCCC"> so usually a</font>

247
00:12:14,700 --> 00:12:19,920
Django or<font color="#E5E5E5"> a flask</font><font color="#CCCCCC"> application is a</font>

248
00:12:16,980 --> 00:12:23,190
single process single<font color="#CCCCCC"> requests at a time</font>

249
00:12:19,920 --> 00:12:27,170
service and when you start to send a lot

250
00:12:23,190 --> 00:12:29,910
of<font color="#CCCCCC"> floats on those they stack up</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

251
00:12:27,170 --> 00:12:32,010
<font color="#CCCCCC">web server in front of them like</font><font color="#E5E5E5"> nginx</font>

252
00:12:29,910 --> 00:12:33,779
or Apache or whatever they start to

253
00:12:32,010 --> 00:12:37,019
stack<font color="#CCCCCC"> up a lot</font><font color="#E5E5E5"> of requests that are</font>

254
00:12:33,779 --> 00:12:40,260
<font color="#E5E5E5">waiting for the process to take the next</font>

255
00:12:37,019 --> 00:12:43,949
one<font color="#CCCCCC"> and you usually get</font><font color="#E5E5E5"> timeouts really</font>

256
00:12:40,260 --> 00:12:46,800
quickly<font color="#E5E5E5"> so maybe for some web service is</font>

257
00:12:43,949 --> 00:12:48,779
not<font color="#E5E5E5"> a</font><font color="#CCCCCC"> problem but for</font><font color="#E5E5E5"> usually if you</font>

258
00:12:46,800 --> 00:12:51,269
want<font color="#E5E5E5"> something that scales well you have</font>

259
00:12:48,779 --> 00:12:53,100
to avoid this kind<font color="#E5E5E5"> of issue so this is</font>

260
00:12:51,269 --> 00:12:57,060
not true anymore if you're<font color="#E5E5E5"> doing some</font>

261
00:12:53,100 --> 00:13:00,149
<font color="#CCCCCC">Python 3 and use stuff like a i/o HTTP</font>

262
00:12:57,060 --> 00:13:03,479
or<font color="#CCCCCC"> fur</font><font color="#E5E5E5"> mark like</font><font color="#CCCCCC"> that because in in that</font>

263
00:13:00,149 --> 00:13:07,470
<font color="#E5E5E5">case they're able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> accept new</font>

264
00:13:03,480 --> 00:13:13,680
connection even<font color="#CCCCCC"> though the</font><font color="#E5E5E5"> request</font>

265
00:13:07,470 --> 00:13:18,990
<font color="#CCCCCC">that's being respond</font><font color="#E5E5E5"> is still going on</font>

266
00:13:13,680 --> 00:13:22,500
<font color="#E5E5E5">so</font><font color="#CCCCCC"> usually if we need</font><font color="#E5E5E5"> something that</font>

267
00:13:18,990 --> 00:13:24,480
<font color="#E5E5E5">goes fast we ask people to avoid</font><font color="#CCCCCC"> Django</font>

268
00:13:22,500 --> 00:13:29,120
<font color="#E5E5E5">flask and try to do something that</font>

269
00:13:24,480 --> 00:13:32,310
accepts<font color="#E5E5E5"> multiple connections</font><font color="#CCCCCC"> the other</font>

270
00:13:29,120 --> 00:13:34,410
thing we all<font color="#E5E5E5"> often see is IO bound</font>

271
00:13:32,310 --> 00:13:38,699
errors<font color="#E5E5E5"> so basically a web</font>

272
00:13:34,410 --> 00:13:41,009
<font color="#CCCCCC">service 90% of the</font><font color="#E5E5E5"> time is just an i/o</font>

273
00:13:38,699 --> 00:13:43,490
bound application that opens a bunch of

274
00:13:41,009 --> 00:13:46,920
sockets<font color="#E5E5E5"> to other service like</font><font color="#CCCCCC"> readies</font>

275
00:13:43,490 --> 00:13:50,579
memcache<font color="#E5E5E5"> or database or</font><font color="#CCCCCC"> stuff like that</font>

276
00:13:46,920 --> 00:13:52,800
<font color="#CCCCCC">and it has a lot of socket</font><font color="#E5E5E5"> open to the</font>

277
00:13:50,579 --> 00:13:54,870
service and if you don't do the thing

278
00:13:52,800 --> 00:13:57,660
right<font color="#CCCCCC"> if you don't like manage a pull</font><font color="#E5E5E5"> of</font>

279
00:13:54,870 --> 00:14:00,000
connection<font color="#E5E5E5"> if you're not taking care</font><font color="#CCCCCC"> of</font>

280
00:13:57,660 --> 00:14:03,779
recycling the<font color="#E5E5E5"> connector that it gets</font>

281
00:14:00,000 --> 00:14:07,199
borked<font color="#E5E5E5"> you get issues</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> you get</font>

282
00:14:03,779 --> 00:14:10,500
too many<font color="#E5E5E5"> open files</font><font color="#CCCCCC"> so that's when when</font>

283
00:14:07,199 --> 00:14:13,920
we load<font color="#E5E5E5"> test a web service that doesn't</font>

284
00:14:10,500 --> 00:14:17,129
<font color="#E5E5E5">properly recycle sockets it's gonna open</font>

285
00:14:13,920 --> 00:14:18,628
<font color="#E5E5E5">a lot of 50s on your server and at some</font>

286
00:14:17,129 --> 00:14:21,000
point it's gonna<font color="#E5E5E5"> spits out some errors</font>

287
00:14:18,629 --> 00:14:23,399
like that you get too many<font color="#CCCCCC"> connection</font>

288
00:14:21,000 --> 00:14:25,259
from<font color="#E5E5E5"> the database that happens when you</font>

289
00:14:23,399 --> 00:14:28,399
interact<font color="#E5E5E5"> with</font><font color="#CCCCCC"> buzzwords for example and</font>

290
00:14:25,259 --> 00:14:31,050
you're not you're<font color="#CCCCCC"> not taking</font><font color="#E5E5E5"> care of</font>

291
00:14:28,399 --> 00:14:34,110
limiting the<font color="#CCCCCC"> number of parallel</font>

292
00:14:31,050 --> 00:14:36,810
connection on the Postgres<font color="#E5E5E5"> it can happen</font>

293
00:14:34,110 --> 00:14:39,540
<font color="#E5E5E5">that</font><font color="#CCCCCC"> postcards start to send back some</font>

294
00:14:36,810 --> 00:14:42,180
<font color="#CCCCCC">error saying that a stop it now</font><font color="#E5E5E5"> so you</font>

295
00:14:39,540 --> 00:14:44,579
need to be<font color="#CCCCCC"> careful about that the other</font>

296
00:14:42,180 --> 00:14:46,019
one we see often is my sequel server has

297
00:14:44,579 --> 00:14:49,529
gone away<font color="#E5E5E5"> so who knows about this</font>

298
00:14:46,019 --> 00:14:51,839
message<font color="#E5E5E5"> yeah this is this is a the</font>

299
00:14:49,529 --> 00:14:54,750
crappy message the my sequel server will

300
00:14:51,839 --> 00:14:57,509
<font color="#E5E5E5">send you back when you're not doing</font>

301
00:14:54,750 --> 00:14:59,100
anything with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> socket</font><font color="#CCCCCC"> so basically</font><font color="#E5E5E5"> my</font>

302
00:14:57,509 --> 00:15:01,139
sequel will just shut it<font color="#E5E5E5"> down</font>

303
00:14:59,100 --> 00:15:03,649
<font color="#E5E5E5">so if you don't have</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> in your</font>

304
00:15:01,139 --> 00:15:06,089
web<font color="#E5E5E5"> service</font><font color="#CCCCCC"> that recycles the sockets</font>

305
00:15:03,649 --> 00:15:08,670
when they're not used you're gonna hit

306
00:15:06,089 --> 00:15:12,360
this issue and of<font color="#E5E5E5"> course connection</font>

307
00:15:08,670 --> 00:15:14,399
timeout time<font color="#E5E5E5"> timeout and the last one we</font>

308
00:15:12,360 --> 00:15:16,579
see is when<font color="#E5E5E5"> we exhausted the memory so</font>

309
00:15:14,399 --> 00:15:20,250
for example if you have an application

310
00:15:16,579 --> 00:15:23,399
web service that<font color="#E5E5E5"> puts a lot</font><font color="#CCCCCC"> of data in</font><font color="#E5E5E5"> a</font>

311
00:15:20,250 --> 00:15:27,720
local Redis<font color="#E5E5E5"> and it's it adds more and</font>

312
00:15:23,399 --> 00:15:32,399
<font color="#CCCCCC">more data and</font><font color="#E5E5E5"> if the scenario</font><font color="#CCCCCC"> we use is</font>

313
00:15:27,720 --> 00:15:35,069
adding<font color="#E5E5E5"> a data at will in Redis at some</font>

314
00:15:32,399 --> 00:15:39,120
point your memory will be<font color="#E5E5E5"> full and</font>

315
00:15:35,069 --> 00:15:43,199
<font color="#E5E5E5">that's when trouble happens depending on</font>

316
00:15:39,120 --> 00:15:45,680
the<font color="#E5E5E5"> system you</font><font color="#CCCCCC"> may have places where the</font>

317
00:15:43,199 --> 00:15:49,670
<font color="#CCCCCC">OEM killer a little</font><font color="#E5E5E5"> process that</font>

318
00:15:45,680 --> 00:15:51,770
<font color="#CCCCCC">they're DVM for example is</font><font color="#E5E5E5"> going to look</font>

319
00:15:49,670 --> 00:15:54,800
at what's<font color="#E5E5E5"> going on because it's running</font>

320
00:15:51,770 --> 00:15:58,790
<font color="#E5E5E5">out of memory</font><font color="#CCCCCC"> and just</font><font color="#E5E5E5"> kill your process</font>

321
00:15:54,800 --> 00:16:01,839
and or even<font color="#E5E5E5"> restart the server</font><font color="#CCCCCC"> so you</font>

322
00:15:58,790 --> 00:16:05,569
want to avoid<font color="#E5E5E5"> that and this is the three</font>

323
00:16:01,840 --> 00:16:09,770
kind of problems<font color="#E5E5E5"> we find when we load</font>

324
00:16:05,570 --> 00:16:11,960
<font color="#CCCCCC">tests our web service so what's a</font>

325
00:16:09,770 --> 00:16:14,590
healthy web service<font color="#CCCCCC"> a healthy what sir</font>

326
00:16:11,960 --> 00:16:18,560
is<font color="#CCCCCC"> another</font><font color="#E5E5E5"> service that's going to like</font>

327
00:16:14,590 --> 00:16:21,710
support hundreds<font color="#CCCCCC"> Kay's of requests</font><font color="#E5E5E5"> per</font>

328
00:16:18,560 --> 00:16:23,660
<font color="#E5E5E5">second or whatever</font><font color="#CCCCCC"> because sometimes you</font>

329
00:16:21,710 --> 00:16:26,510
don't need<font color="#E5E5E5"> that a healthy web service is</font>

330
00:16:23,660 --> 00:16:29,689
a web service where<font color="#CCCCCC"> you understand its</font>

331
00:16:26,510 --> 00:16:31,730
limit<font color="#E5E5E5"> and which has good enough</font>

332
00:16:29,690 --> 00:16:34,100
performances that that's the the most

333
00:16:31,730 --> 00:16:36,920
<font color="#E5E5E5">important stuff you know that a web</font>

334
00:16:34,100 --> 00:16:38,570
service if a web service is supposed<font color="#E5E5E5"> to</font>

335
00:16:36,920 --> 00:16:40,880
handle a<font color="#E5E5E5"> low or</font><font color="#CCCCCC"> 100 connection per</font>

336
00:16:38,570 --> 00:16:43,400
second<font color="#E5E5E5"> and if you looked at</font><font color="#CCCCCC"> it and</font>

337
00:16:40,880 --> 00:16:45,730
<font color="#CCCCCC">you're able to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> two 300 connections</font>

338
00:16:43,400 --> 00:16:47,959
per second you're good you're good to go

339
00:16:45,730 --> 00:16:50,630
<font color="#E5E5E5">and the other stuff that's super</font>

340
00:16:47,960 --> 00:16:54,290
important is to<font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that when you</font>

341
00:16:50,630 --> 00:16:56,990
send a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> float and this the web</font>

342
00:16:54,290 --> 00:17:00,829
service is resilient<font color="#E5E5E5"> it's it's able to</font>

343
00:16:56,990 --> 00:17:02,810
<font color="#CCCCCC">get back on its feet which means</font><font color="#E5E5E5"> it</font>

344
00:17:00,830 --> 00:17:05,390
spits out a<font color="#E5E5E5"> lot of five hurdles and and</font>

345
00:17:02,810 --> 00:17:09,230
when you start to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it as a regular</font>

346
00:17:05,390 --> 00:17:13,520
regular load<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> works as it used</font>

347
00:17:09,230 --> 00:17:15,230
to work<font color="#E5E5E5"> so if we don't have that</font><font color="#CCCCCC"> we</font>

348
00:17:13,520 --> 00:17:17,569
<font color="#CCCCCC">don't give the green</font><font color="#E5E5E5"> line to the green</font>

349
00:17:15,230 --> 00:17:20,780
light<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the web service for</font><font color="#CCCCCC"> it's to be</font>

350
00:17:17,569 --> 00:17:23,359
deployed<font color="#E5E5E5"> and last but not least you want</font>

351
00:17:20,780 --> 00:17:28,099
<font color="#E5E5E5">to make sure</font><font color="#CCCCCC"> especially at</font><font color="#E5E5E5"> Mozilla that</font>

352
00:17:23,359 --> 00:17:29,800
the service has a path<font color="#E5E5E5"> for scaling</font><font color="#CCCCCC"> even</font>

353
00:17:28,099 --> 00:17:31,969
though we're going<font color="#E5E5E5"> to deploy something</font>

354
00:17:29,800 --> 00:17:34,159
<font color="#CCCCCC">that's good enough for the load we</font>

355
00:17:31,970 --> 00:17:36,740
expecting<font color="#E5E5E5"> we want to make sure that we</font>

356
00:17:34,160 --> 00:17:38,090
know how to<font color="#E5E5E5"> scale it some service is</font>

357
00:17:36,740 --> 00:17:43,340
<font color="#E5E5E5">gonna be super</font><font color="#CCCCCC"> simple we're gonna add</font>

358
00:17:38,090 --> 00:17:45,949
<font color="#E5E5E5">some new box in Amazon like okay we have</font>

359
00:17:43,340 --> 00:17:48,260
more<font color="#CCCCCC"> users than</font><font color="#E5E5E5"> expected so instead of</font>

360
00:17:45,950 --> 00:17:49,490
having five bucks we're gonna add<font color="#E5E5E5"> 50</font>

361
00:17:48,260 --> 00:17:53,420
bucks and<font color="#CCCCCC"> that's it</font>

362
00:17:49,490 --> 00:17:55,820
but sometimes depending on<font color="#E5E5E5"> the design if</font>

363
00:17:53,420 --> 00:17:57,299
you're not doing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> proper starting on</font>

364
00:17:55,820 --> 00:18:00,269
<font color="#CCCCCC">paas grass or</font><font color="#E5E5E5"> whatever</font>

365
00:17:57,299 --> 00:18:02,220
you might have cases<font color="#CCCCCC"> where it's harder</font>

366
00:18:00,269 --> 00:18:04,919
to<font color="#CCCCCC"> add boxes</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> just have the service</font>

367
00:18:02,220 --> 00:18:08,669
<font color="#CCCCCC">cooked with more load</font><font color="#E5E5E5"> so you want to</font>

368
00:18:04,919 --> 00:18:13,679
make sure<font color="#E5E5E5"> that you think about that when</font>

369
00:18:08,669 --> 00:18:18,419
you do the scaling so one very<font color="#E5E5E5"> important</font>

370
00:18:13,679 --> 00:18:20,720
stuff<font color="#CCCCCC"> in the past five or six</font><font color="#E5E5E5"> years I've</font>

371
00:18:18,419 --> 00:18:23,429
never seen<font color="#E5E5E5"> any web service</font><font color="#CCCCCC"> that worked</font>

372
00:18:20,720 --> 00:18:25,529
<font color="#E5E5E5">directly when we load tested it I've</font>

373
00:18:23,429 --> 00:18:28,889
never seen<font color="#E5E5E5"> it I mean even the service we</font>

374
00:18:25,529 --> 00:18:31,970
built all<font color="#CCCCCC"> of them will fail</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> you</font>

375
00:18:28,889 --> 00:18:34,649
start to do some load testing<font color="#CCCCCC"> because</font>

376
00:18:31,970 --> 00:18:37,169
you<font color="#CCCCCC"> always</font><font color="#E5E5E5"> have to have</font><font color="#CCCCCC"> a round</font><font color="#E5E5E5"> of</font>

377
00:18:34,649 --> 00:18:38,939
tweaking all the configuration making

378
00:18:37,169 --> 00:18:41,970
<font color="#E5E5E5">sure you do</font><font color="#CCCCCC"> the right</font><font color="#E5E5E5"> stuff with</font><font color="#CCCCCC"> fuzz</font>

379
00:18:38,940 --> 00:18:44,489
grass or my sequel making sure that your

380
00:18:41,970 --> 00:18:46,320
pools are doing the right<font color="#CCCCCC"> stuff tweaking</font>

381
00:18:44,489 --> 00:18:49,799
all the timeouts and<font color="#E5E5E5"> stuff like that</font><font color="#CCCCCC"> so</font>

382
00:18:46,320 --> 00:18:53,009
<font color="#CCCCCC">unless your Chuck Norris it's crazy I'm</font>

383
00:18:49,799 --> 00:18:55,019
pretty sure the tool we're gonna use are

384
00:18:53,009 --> 00:19:00,330
going to break<font color="#CCCCCC"> yourself that's mostly</font>

385
00:18:55,019 --> 00:19:03,299
guaranteed<font color="#E5E5E5"> all right so how do we load</font>

386
00:19:00,330 --> 00:19:05,999
<font color="#E5E5E5">test</font><font color="#CCCCCC"> a web service so</font><font color="#E5E5E5"> it's pretty well</font>

387
00:19:03,299 --> 00:19:08,549
<font color="#E5E5E5">it's pretty simple the pattern we send</font>

388
00:19:05,999 --> 00:19:10,289
some load with<font color="#CCCCCC"> the realistic client</font>

389
00:19:08,549 --> 00:19:12,929
behavior<font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't want to do</font><font color="#CCCCCC"> like crazy</font>

390
00:19:10,289 --> 00:19:17,158
<font color="#E5E5E5">fuzzing stuff like standing some I don't</font>

391
00:19:12,929 --> 00:19:18,720
<font color="#CCCCCC">know</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> super slowly or doing some</font>

392
00:19:17,159 --> 00:19:22,080
crazy<font color="#CCCCCC"> stuff to try</font><font color="#E5E5E5"> to kill you we just</font>

393
00:19:18,720 --> 00:19:24,299
<font color="#E5E5E5">want to send some load like if it was</font>

394
00:19:22,080 --> 00:19:26,789
<font color="#E5E5E5">like regular client we want to collect</font>

395
00:19:24,299 --> 00:19:28,739
some<font color="#E5E5E5"> metrics to</font><font color="#CCCCCC"> see what's going</font><font color="#E5E5E5"> on and</font>

396
00:19:26,789 --> 00:19:33,059
we're<font color="#CCCCCC"> going to do</font><font color="#E5E5E5"> it again and again and</font>

397
00:19:28,739 --> 00:19:35,309
see what's happening so to do this you

398
00:19:33,059 --> 00:19:38,399
have<font color="#CCCCCC"> to wait to do it you can</font><font color="#E5E5E5"> use a</font>

399
00:19:35,309 --> 00:19:40,609
laptop<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> start to send some load</font>

400
00:19:38,399 --> 00:19:44,699
to you your service or<font color="#E5E5E5"> you can do a</font>

401
00:19:40,609 --> 00:19:46,080
distributed test<font color="#E5E5E5"> across</font><font color="#CCCCCC"> the cloud</font><font color="#E5E5E5"> where</font>

402
00:19:44,700 --> 00:19:49,350
you're<font color="#E5E5E5"> gonna have like I don't</font><font color="#CCCCCC"> know 100</font>

403
00:19:46,080 --> 00:19:51,928
<font color="#E5E5E5">boxes</font><font color="#CCCCCC"> trying to to interact with your</font>

404
00:19:49,350 --> 00:19:53,820
endpoint<font color="#E5E5E5"> and depending on the cases</font>

405
00:19:51,929 --> 00:19:55,499
<font color="#E5E5E5">sometimes you want to do some</font>

406
00:19:53,820 --> 00:19:57,570
<font color="#CCCCCC">distributed</font><font color="#E5E5E5"> load test and</font><font color="#CCCCCC"> sometimes you</font>

407
00:19:55,499 --> 00:20:03,539
can<font color="#CCCCCC"> just use a laptop to do everything</font>

408
00:19:57,570 --> 00:20:05,820
and and frankly<font color="#E5E5E5"> most web services we're</font>

409
00:20:03,539 --> 00:20:09,629
testing we're able to kill<font color="#CCCCCC"> it with a</font>

410
00:20:05,820 --> 00:20:11,120
single laptop<font color="#E5E5E5"> because most web services</font>

411
00:20:09,629 --> 00:20:14,139
are IO bound and

412
00:20:11,120 --> 00:20:16,520
as long as<font color="#E5E5E5"> you send a lot</font><font color="#CCCCCC"> of concurrent</font>

413
00:20:14,140 --> 00:20:18,400
<font color="#E5E5E5">requests you're gonna break it</font><font color="#CCCCCC"> so you</font>

414
00:20:16,520 --> 00:20:20,600
don't<font color="#CCCCCC"> need</font><font color="#E5E5E5"> like a very expensive</font>

415
00:20:18,400 --> 00:20:22,610
<font color="#E5E5E5">distributed system to break stuff</font>

416
00:20:20,600 --> 00:20:26,030
the only<font color="#E5E5E5"> case we have at Mozilla where</font>

417
00:20:22,610 --> 00:20:29,240
we need to<font color="#CCCCCC"> deploy a lot of those to a</font>

418
00:20:26,030 --> 00:20:31,940
massive load test is web push<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we</font>

419
00:20:29,240 --> 00:20:34,700
have to keep WebSocket connection<font color="#CCCCCC"> open</font>

420
00:20:31,940 --> 00:20:37,100
for hours to<font color="#E5E5E5"> see how the server behaves</font>

421
00:20:34,700 --> 00:20:39,170
<font color="#E5E5E5">so in that case you can't do it from a</font>

422
00:20:37,100 --> 00:20:43,159
single<font color="#E5E5E5"> spot so you have to deploy</font>

423
00:20:39,170 --> 00:20:44,990
<font color="#E5E5E5">something but other than</font><font color="#CCCCCC"> that just</font><font color="#E5E5E5"> this</font>

424
00:20:43,160 --> 00:20:47,000
laptop<font color="#E5E5E5"> as long as I have the bandwidth</font>

425
00:20:44,990 --> 00:20:51,160
and<font color="#E5E5E5"> the network I can break any web</font>

426
00:20:47,000 --> 00:20:53,750
<font color="#E5E5E5">service at Mozilla with just one tool</font>

427
00:20:51,160 --> 00:20:57,770
<font color="#CCCCCC">metrics so one thing</font><font color="#E5E5E5"> that's super</font>

428
00:20:53,750 --> 00:20:59,809
important about metrics<font color="#E5E5E5"> there are a lot</font>

429
00:20:57,770 --> 00:21:01,520
of tools out<font color="#CCCCCC"> there that when you start</font>

430
00:20:59,809 --> 00:21:04,070
to do some load testing<font color="#CCCCCC"> they're gonna</font>

431
00:21:01,520 --> 00:21:06,650
tell you that<font color="#CCCCCC"> your server is able</font><font color="#E5E5E5"> to do</font>

432
00:21:04,070 --> 00:21:08,300
<font color="#E5E5E5">500 requests per second and then you run</font>

433
00:21:06,650 --> 00:21:10,130
the same<font color="#CCCCCC"> test from another box</font><font color="#E5E5E5"> and</font>

434
00:21:08,300 --> 00:21:12,800
suddenly you have<font color="#E5E5E5"> 2,000 requests per</font>

435
00:21:10,130 --> 00:21:15,890
second because<font color="#CCCCCC"> that other laptop has a</font>

436
00:21:12,800 --> 00:21:20,659
better<font color="#E5E5E5"> network connection and then you</font>

437
00:21:15,890 --> 00:21:22,370
trying it on your grandmother laptop and

438
00:21:20,660 --> 00:21:25,760
suddenly you have<font color="#CCCCCC"> ten requests</font><font color="#E5E5E5"> per</font>

439
00:21:22,370 --> 00:21:29,239
second so the problem<font color="#E5E5E5"> is all the tools</font>

440
00:21:25,760 --> 00:21:32,720
<font color="#E5E5E5">that provide client-side metrics are</font>

441
00:21:29,240 --> 00:21:35,780
taking<font color="#E5E5E5"> into account the network</font>

442
00:21:32,720 --> 00:21:38,480
<font color="#CCCCCC">round-trip the network congestion</font><font color="#E5E5E5"> and</font>

443
00:21:35,780 --> 00:21:42,020
what's<font color="#E5E5E5"> going on in the laptop</font><font color="#CCCCCC"> you using</font>

444
00:21:38,480 --> 00:21:44,870
and<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> think it's a</font><font color="#E5E5E5"> good metric it</font>

445
00:21:42,020 --> 00:21:46,850
doesn't mean anything<font color="#E5E5E5"> I mean when Apache</font>

446
00:21:44,870 --> 00:21:49,760
bench tells you that your server is

447
00:21:46,850 --> 00:21:53,870
doing that<font color="#E5E5E5"> many requests per second this</font>

448
00:21:49,760 --> 00:21:55,730
number is not really useful to work and

449
00:21:53,870 --> 00:21:57,379
to understand what's<font color="#CCCCCC"> going on</font><font color="#E5E5E5"> what you</font>

450
00:21:55,730 --> 00:21:59,210
need<font color="#E5E5E5"> to do is to have metrics on the</font>

451
00:21:57,380 --> 00:22:00,980
<font color="#E5E5E5">server side</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to make sure</font><font color="#CCCCCC"> that</font>

452
00:21:59,210 --> 00:22:03,980
all<font color="#CCCCCC"> your web services you're deploying</font>

453
00:22:00,980 --> 00:22:08,270
<font color="#E5E5E5">have a good metric system based on</font>

454
00:22:03,980 --> 00:22:11,780
something<font color="#E5E5E5"> that is gathered somewhere for</font>

455
00:22:08,270 --> 00:22:14,179
example<font color="#CCCCCC"> on Amazon we use</font><font color="#E5E5E5"> tools like data</font>

456
00:22:11,780 --> 00:22:17,389
dog that provides live metrics<font color="#E5E5E5"> using</font>

457
00:22:14,179 --> 00:22:19,550
<font color="#E5E5E5">that D or stuff like that and this is</font>

458
00:22:17,390 --> 00:22:21,950
what you want to use when<font color="#E5E5E5"> you do some</font>

459
00:22:19,550 --> 00:22:23,780
load testing you don't want to rely on a

460
00:22:21,950 --> 00:22:27,690
<font color="#E5E5E5">client-side metric</font>

461
00:22:23,780 --> 00:22:30,930
so existing<font color="#E5E5E5"> tools before I wrote</font><font color="#CCCCCC"> Molotov</font>

462
00:22:27,690 --> 00:22:33,240
I looked at what was<font color="#E5E5E5"> existing</font><font color="#CCCCCC"> so we have</font>

463
00:22:30,930 --> 00:22:35,940
<font color="#E5E5E5">Apache bench but to test web service</font>

464
00:22:33,240 --> 00:22:39,720
it's<font color="#E5E5E5"> not useful because you</font><font color="#CCCCCC"> can't</font><font color="#E5E5E5"> write</font>

465
00:22:35,940 --> 00:22:43,940
complicated scripts<font color="#E5E5E5"> unless you try super</font>

466
00:22:39,720 --> 00:22:47,850
hard<font color="#CCCCCC"> Apache bench is just sending some</font>

467
00:22:43,940 --> 00:22:52,260
load on HTTP endpoint<font color="#E5E5E5"> and it's pretty</font>

468
00:22:47,850 --> 00:22:54,899
limited<font color="#CCCCCC"> so this is out of question</font>

469
00:22:52,260 --> 00:22:57,180
there is boom another tool<font color="#CCCCCC"> i've created</font>

470
00:22:54,900 --> 00:22:59,040
that mimics<font color="#CCCCCC"> Apache bench</font><font color="#E5E5E5"> but same thing</font>

471
00:22:57,180 --> 00:23:02,400
it's<font color="#E5E5E5"> not used to do some some</font>

472
00:22:59,040 --> 00:23:05,220
complicated<font color="#CCCCCC"> load testing is used to do</font>

473
00:23:02,400 --> 00:23:08,340
<font color="#E5E5E5">like smoke</font><font color="#CCCCCC"> test like just kill one end</font>

474
00:23:05,220 --> 00:23:13,200
<font color="#E5E5E5">point and then you have a bigger tool</font>

475
00:23:08,340 --> 00:23:15,000
like<font color="#E5E5E5"> Apache</font><font color="#CCCCCC"> g-j</font><font color="#E5E5E5"> meter so this is a java</font>

476
00:23:13,200 --> 00:23:17,730
application where you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> spend</font>

477
00:23:15,000 --> 00:23:21,150
<font color="#E5E5E5">hours to click around</font><font color="#CCCCCC"> to create your</font>

478
00:23:17,730 --> 00:23:24,330
your your load test<font color="#E5E5E5"> and then you can</font>

479
00:23:21,150 --> 00:23:27,330
export<font color="#CCCCCC"> an XML file or import</font><font color="#E5E5E5"> in it</font><font color="#CCCCCC"> I</font>

480
00:23:24,330 --> 00:23:29,429
mean yeah never say one thing<font color="#CCCCCC"> about</font>

481
00:23:27,330 --> 00:23:31,230
other technology<font color="#CCCCCC"> I'm not trying to</font><font color="#E5E5E5"> bash</font>

482
00:23:29,430 --> 00:23:35,310
Java or anything I'm just<font color="#E5E5E5"> saying that</font>

483
00:23:31,230 --> 00:23:39,960
<font color="#CCCCCC">jmeter</font><font color="#E5E5E5"> the user interface is not meant</font>

484
00:23:35,310 --> 00:23:43,740
to create<font color="#E5E5E5"> web services load test is</font>

485
00:23:39,960 --> 00:23:46,350
<font color="#E5E5E5">basically better Apache bench</font><font color="#CCCCCC"> so it's</font>

486
00:23:43,740 --> 00:23:49,200
<font color="#E5E5E5">not the right tool</font><font color="#CCCCCC"> to do some proper</font>

487
00:23:46,350 --> 00:23:52,129
load testing on<font color="#E5E5E5"> web services</font><font color="#CCCCCC"> and then</font>

488
00:23:49,200 --> 00:23:54,960
<font color="#E5E5E5">you have Grindr so Grindr is a titan</font>

489
00:23:52,130 --> 00:23:57,600
framework<font color="#E5E5E5"> it's pretty cool actually you</font>

490
00:23:54,960 --> 00:23:59,880
can write<font color="#E5E5E5"> everything in jaya so you can</font>

491
00:23:57,600 --> 00:24:04,439
create some<font color="#E5E5E5"> Python module and have them</font>

492
00:23:59,880 --> 00:24:05,790
executed in the Java interpreter<font color="#CCCCCC"> but you</font>

493
00:24:04,440 --> 00:24:09,620
have to<font color="#E5E5E5"> have a lot of gigabytes of</font>

494
00:24:05,790 --> 00:24:12,960
memory to have it running<font color="#E5E5E5"> and well</font>

495
00:24:09,620 --> 00:24:16,320
sometimes<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to run a</font><font color="#CCCCCC"> load</font><font color="#E5E5E5"> test</font>

496
00:24:12,960 --> 00:24:19,110
that's<font color="#E5E5E5"> gonna like call a few endpoints</font>

497
00:24:16,320 --> 00:24:20,550
<font color="#E5E5E5">we're on it super fast so if this</font><font color="#CCCCCC"> test</font>

498
00:24:19,110 --> 00:24:23,370
<font color="#E5E5E5">is gonna eat like</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> gigabyte of memory</font>

499
00:24:20,550 --> 00:24:25,020
it's a little bit of a pain if you<font color="#E5E5E5"> want</font>

500
00:24:23,370 --> 00:24:27,179
to<font color="#E5E5E5"> deploy</font><font color="#CCCCCC"> it on</font><font color="#E5E5E5"> Jenkins</font><font color="#CCCCCC"> and stuff like</font>

501
00:24:25,020 --> 00:24:29,190
<font color="#E5E5E5">that and then you have another one</font>

502
00:24:27,180 --> 00:24:32,400
called<font color="#E5E5E5"> B's with machine guns</font>

503
00:24:29,190 --> 00:24:34,500
that's the coolest<font color="#E5E5E5"> name I'm mad that</font>

504
00:24:32,400 --> 00:24:36,630
<font color="#E5E5E5">they don't make t-shirts</font><font color="#CCCCCC"> because I'm</font>

505
00:24:34,500 --> 00:24:40,110
pretty<font color="#CCCCCC"> sure those</font><font color="#E5E5E5"> two sure would be cool</font>

506
00:24:36,630 --> 00:24:42,510
so<font color="#E5E5E5"> bees with machine gun is</font><font color="#CCCCCC"> Orchestrator</font>

507
00:24:40,110 --> 00:24:45,240
that will allow you<font color="#CCCCCC"> to do a distributed</font>

508
00:24:42,510 --> 00:24:46,830
load test on Amazon<font color="#CCCCCC"> you create a small</font>

509
00:24:45,240 --> 00:24:49,500
<font color="#CCCCCC">Python script and then</font><font color="#E5E5E5"> these with</font>

510
00:24:46,830 --> 00:24:51,750
machine guns<font color="#E5E5E5"> take care of creating micro</font>

511
00:24:49,500 --> 00:24:54,299
Python instance on Amazon<font color="#E5E5E5"> and try to</font>

512
00:24:51,750 --> 00:24:56,940
<font color="#E5E5E5">keep</font><font color="#CCCCCC"> your box so this is pretty cool</font><font color="#E5E5E5"> but</font>

513
00:24:54,299 --> 00:24:58,440
in our case most of<font color="#E5E5E5"> the time we want to</font>

514
00:24:56,940 --> 00:25:00,990
do something locally so it's a little

515
00:24:58,440 --> 00:25:04,020
<font color="#E5E5E5">bit overkill</font><font color="#CCCCCC"> for what</font><font color="#E5E5E5"> we want to do and</font>

516
00:25:00,990 --> 00:25:07,289
then there is<font color="#E5E5E5"> locust so locust is in</font>

517
00:25:04,020 --> 00:25:10,168
Python it's using<font color="#E5E5E5"> G event and 0 mq it's</font>

518
00:25:07,289 --> 00:25:12,899
pretty cool<font color="#CCCCCC"> we've tried to use it but</font>

519
00:25:10,169 --> 00:25:15,570
there<font color="#CCCCCC"> are a</font><font color="#E5E5E5"> few limitation well so it's</font>

520
00:25:12,899 --> 00:25:18,719
it's meant<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work as</font><font color="#CCCCCC"> a distributed</font>

521
00:25:15,570 --> 00:25:22,139
thing<font color="#CCCCCC"> you can also run it locally but it</font>

522
00:25:18,720 --> 00:25:24,179
<font color="#E5E5E5">uses 0 mq which means if you get to</font>

523
00:25:22,140 --> 00:25:26,940
<font color="#E5E5E5">network split you get some issue</font><font color="#CCCCCC"> with</font>

524
00:25:24,179 --> 00:25:31,260
<font color="#E5E5E5">the 0</font><font color="#CCCCCC"> mq pipes</font><font color="#E5E5E5"> because it's gonna break</font>

525
00:25:26,940 --> 00:25:35,399
and supply<font color="#E5E5E5"> that so that's my next</font><font color="#CCCCCC"> slide</font>

526
00:25:31,260 --> 00:25:36,809
<font color="#CCCCCC">no yeah that's my</font><font color="#E5E5E5"> slide about it if you</font>

527
00:25:35,399 --> 00:25:39,270
want<font color="#E5E5E5"> to do something distributed is</font>

528
00:25:36,809 --> 00:25:42,178
super hard<font color="#CCCCCC"> to do it properly because you</font>

529
00:25:39,270 --> 00:25:43,799
<font color="#CCCCCC">have to take care about what happens if</font>

530
00:25:42,179 --> 00:25:46,409
so you have network splits and stuff

531
00:25:43,799 --> 00:25:48,480
like that<font color="#CCCCCC"> and when</font><font color="#E5E5E5"> you do a load test if</font>

532
00:25:46,409 --> 00:25:52,289
you want to do a lot<font color="#E5E5E5"> test that is</font>

533
00:25:48,480 --> 00:25:54,690
happening<font color="#E5E5E5"> for hours you can't rely on on</font>

534
00:25:52,289 --> 00:25:56,730
<font color="#CCCCCC">queues</font><font color="#E5E5E5"> like 0 mq you have to do</font>

535
00:25:54,690 --> 00:26:00,659
something<font color="#CCCCCC"> that's disconnected you have</font>

536
00:25:56,730 --> 00:26:06,240
to<font color="#E5E5E5"> collect</font><font color="#CCCCCC"> all your</font><font color="#E5E5E5"> data using something</font>

537
00:26:00,659 --> 00:26:10,470
that's<font color="#CCCCCC"> meant for it</font><font color="#E5E5E5"> and that's why we</font>

538
00:26:06,240 --> 00:26:13,230
<font color="#E5E5E5">ended up doing something we ended up</font>

539
00:26:10,470 --> 00:26:15,929
<font color="#E5E5E5">relying on Amazon to do all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

540
00:26:13,230 --> 00:26:19,110
<font color="#CCCCCC">things</font><font color="#E5E5E5"> because now in Amazon you have a</font>

541
00:26:15,929 --> 00:26:22,110
building<font color="#E5E5E5"> of castrator and you have tools</font>

542
00:26:19,110 --> 00:26:25,559
there<font color="#E5E5E5"> to do all their orchestration to</font>

543
00:26:22,110 --> 00:26:31,139
do all the data exchange<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I don't</font>

544
00:26:25,559 --> 00:26:34,168
<font color="#CCCCCC">think it's a good idea in 2018 to build</font>

545
00:26:31,140 --> 00:26:36,330
<font color="#E5E5E5">your own client server system</font><font color="#CCCCCC"> to do some</font>

546
00:26:34,169 --> 00:26:39,059
load testing I think<font color="#CCCCCC"> it's better to</font><font color="#E5E5E5"> rely</font>

547
00:26:36,330 --> 00:26:46,559
on what's there in the cloud Amazon or

548
00:26:39,059 --> 00:26:49,590
<font color="#E5E5E5">other tools so given that our planet</font>

549
00:26:46,559 --> 00:26:52,289
<font color="#CCCCCC">Mozilla is to provide a simple tool</font>

550
00:26:49,590 --> 00:26:54,840
looked<font color="#CCCCCC"> as super quickly</font><font color="#E5E5E5"> we want people</font>

551
00:26:52,289 --> 00:26:58,980
at<font color="#E5E5E5"> Mozilla that are not familiar with</font>

552
00:26:54,840 --> 00:27:01,439
Python<font color="#CCCCCC"> to be able to write a</font><font color="#E5E5E5"> low test by</font>

553
00:26:58,980 --> 00:27:03,440
copy and pasting<font color="#E5E5E5"> other existing load</font>

554
00:27:01,440 --> 00:27:06,299
<font color="#CCCCCC">tests so we want to</font><font color="#E5E5E5"> keep it simple</font><font color="#CCCCCC"> and</font>

555
00:27:03,440 --> 00:27:10,440
from there<font color="#CCCCCC"> when we have a load test</font>

556
00:27:06,299 --> 00:27:12,690
<font color="#E5E5E5">that's able to load test web service we</font>

557
00:27:10,440 --> 00:27:15,210
just put it in<font color="#E5E5E5"> a darker</font><font color="#CCCCCC"> image</font><font color="#E5E5E5"> and when</font>

558
00:27:12,690 --> 00:27:18,480
we need<font color="#E5E5E5"> to do a distributed load test</font><font color="#CCCCCC"> we</font>

559
00:27:15,210 --> 00:27:21,240
use Amazon<font color="#E5E5E5"> and darker to deploy and</font>

560
00:27:18,480 --> 00:27:24,870
orchestrate massive load<font color="#CCCCCC"> tests that can</font>

561
00:27:21,240 --> 00:27:28,320
run like<font color="#E5E5E5"> 200 and 300 boxes on Amazon but</font>

562
00:27:24,870 --> 00:27:29,908
like I said<font color="#CCCCCC"> before most of</font><font color="#E5E5E5"> the time we</font>

563
00:27:28,320 --> 00:27:33,000
just<font color="#E5E5E5"> take the test and run it on a</font>

564
00:27:29,909 --> 00:27:34,440
laptop<font color="#E5E5E5"> and break the service and go see</font>

565
00:27:33,000 --> 00:27:36,570
the dev and say hey I broke<font color="#E5E5E5"> your service</font>

566
00:27:34,440 --> 00:27:38,840
in two seconds now you need to do

567
00:27:36,570 --> 00:27:40,889
<font color="#E5E5E5">something about it</font>

568
00:27:38,840 --> 00:27:44,039
so<font color="#E5E5E5"> Molotov yeah</font>

569
00:27:40,890 --> 00:27:48,510
so that's<font color="#CCCCCC"> slide 819 so now I can talk</font>

570
00:27:44,039 --> 00:27:51,330
<font color="#E5E5E5">about molto somos top is a non</font>

571
00:27:48,510 --> 00:27:55,890
distributed<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> three load testing</font>

572
00:27:51,330 --> 00:28:02,220
framework<font color="#CCCCCC"> we wrote</font><font color="#E5E5E5"> using Python</font><font color="#CCCCCC"> 3 and</font>

573
00:27:55,890 --> 00:28:04,980
it's super simple it's simple<font color="#E5E5E5"> because we</font>

574
00:28:02,220 --> 00:28:08,039
want like I said before<font color="#E5E5E5"> anyone with</font>

575
00:28:04,980 --> 00:28:11,100
<font color="#E5E5E5">Mozilla to</font><font color="#CCCCCC"> be able to write some load</font>

576
00:28:08,039 --> 00:28:13,620
test it's highly extensible<font color="#E5E5E5"> it's a</font>

577
00:28:11,100 --> 00:28:17,100
framework where you can add extensions

578
00:28:13,620 --> 00:28:19,350
it has a lot of concurrency<font color="#E5E5E5"> it's based</font>

579
00:28:17,100 --> 00:28:21,899
<font color="#E5E5E5">on core routine like the native</font>

580
00:28:19,350 --> 00:28:26,039
<font color="#CCCCCC">co-routine we have now in Python 3 so</font>

581
00:28:21,899 --> 00:28:29,389
you're able<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tens of thousands</font>

582
00:28:26,039 --> 00:28:34,080
of concurrent requests from<font color="#E5E5E5"> a single</font>

583
00:28:29,390 --> 00:28:37,610
process it can it can run as multiple

584
00:28:34,080 --> 00:28:41,189
<font color="#CCCCCC">processes and it's based on a</font><font color="#E5E5E5"> i/o HTTP</font>

585
00:28:37,610 --> 00:28:43,500
which is a framework<font color="#E5E5E5"> based on Python 3</font><font color="#CCCCCC"> a</font>

586
00:28:41,190 --> 00:28:47,809
async i/o basically if you're familiar

587
00:28:43,500 --> 00:28:52,789
with requests which is a synchronous

588
00:28:47,809 --> 00:28:57,110
client to do some HTTP<font color="#CCCCCC"> AO HTTP client is</font>

589
00:28:52,789 --> 00:29:03,830
roughly the same thing<font color="#E5E5E5"> but using</font>

590
00:28:57,110 --> 00:29:06,409
<font color="#CCCCCC">a sink programming in Python 3 so one</font>

591
00:29:03,830 --> 00:29:11,030
laptop<font color="#E5E5E5"> running</font><font color="#CCCCCC"> motive this laptop</font><font color="#E5E5E5"> can</font>

592
00:29:06,410 --> 00:29:13,640
generate over 330 thousand requests per

593
00:29:11,030 --> 00:29:16,190
second<font color="#E5E5E5"> against any</font><font color="#CCCCCC"> endpoint as</font><font color="#E5E5E5"> long as</font>

594
00:29:13,640 --> 00:29:18,799
<font color="#E5E5E5">I'm connected to</font><font color="#CCCCCC"> a real network</font><font color="#E5E5E5"> so</font>

595
00:29:16,190 --> 00:29:23,809
basically using curtain in Python you

596
00:29:18,799 --> 00:29:27,379
<font color="#CCCCCC">can break most web services</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this is a</font>

597
00:29:23,809 --> 00:29:27,678
simple<font color="#CCCCCC"> exhibit enough can you</font><font color="#E5E5E5"> see over</font>

598
00:29:27,380 --> 00:29:32,690
there

599
00:29:27,679 --> 00:29:35,030
yeah cool<font color="#CCCCCC"> so that's the simplest example</font>

600
00:29:32,690 --> 00:29:39,110
once<font color="#E5E5E5"> your important motif</font><font color="#CCCCCC"> you have a</font>

601
00:29:35,030 --> 00:29:42,110
bunch<font color="#E5E5E5"> of okay</font><font color="#CCCCCC"> well this</font><font color="#E5E5E5"> there's a syntax</font>

602
00:29:39,110 --> 00:29:44,809
error<font color="#E5E5E5"> there so the scenario decorator is</font>

603
00:29:42,110 --> 00:29:46,879
part of the multipath edge so let's say

604
00:29:44,809 --> 00:29:50,000
it's important for motive<font color="#E5E5E5"> important star</font>

605
00:29:46,880 --> 00:29:52,370
<font color="#CCCCCC">okay so scenario</font><font color="#E5E5E5"> when you have you have</font>

606
00:29:50,000 --> 00:29:55,340
a core routine<font color="#E5E5E5"> you decorate</font><font color="#CCCCCC"> it with a</font>

607
00:29:52,370 --> 00:29:57,678
scenario decorator<font color="#E5E5E5"> and from there you</font>

608
00:29:55,340 --> 00:30:00,470
get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> session object which is a client</font>

609
00:29:57,679 --> 00:30:03,650
<font color="#E5E5E5">an HTTP client</font><font color="#CCCCCC"> that you can use to</font><font color="#E5E5E5"> to</font>

610
00:30:00,470 --> 00:30:06,190
<font color="#E5E5E5">Lotus your your server and from there</font>

611
00:30:03,650 --> 00:30:09,290
you can<font color="#CCCCCC"> just look at the AIO HTTP</font>

612
00:30:06,190 --> 00:30:12,049
documentation<font color="#E5E5E5"> it provides a very</font><font color="#CCCCCC"> simple</font>

613
00:30:09,290 --> 00:30:15,980
<font color="#CCCCCC">way to interact with a HTTP server</font><font color="#E5E5E5"> and</font>

614
00:30:12,049 --> 00:30:18,770
here<font color="#CCCCCC"> I'm doing</font><font color="#E5E5E5"> a get on the HTTP some</font>

615
00:30:15,980 --> 00:30:21,710
API I'm getting back a<font color="#E5E5E5"> response and I'm</font>

616
00:30:18,770 --> 00:30:24,200
<font color="#E5E5E5">checking that the status is 200 so</font>

617
00:30:21,710 --> 00:30:26,179
that's pretty simple<font color="#E5E5E5"> people</font><font color="#CCCCCC"> that are</font><font color="#E5E5E5"> not</font>

618
00:30:24,200 --> 00:30:26,870
<font color="#E5E5E5">familiar with Python or did</font><font color="#CCCCCC"> it a long</font>

619
00:30:26,179 --> 00:30:30,620
time<font color="#E5E5E5"> ago</font>

620
00:30:26,870 --> 00:30:33,409
at first they get a little<font color="#E5E5E5"> bit worried</font>

621
00:30:30,620 --> 00:30:35,178
<font color="#CCCCCC">about all</font><font color="#E5E5E5"> this async words they don't</font>

622
00:30:33,410 --> 00:30:37,190
quite understand what's going<font color="#E5E5E5"> on there</font>

623
00:30:35,179 --> 00:30:39,620
<font color="#CCCCCC">but it's ok</font><font color="#E5E5E5"> I'll just tell them</font><font color="#CCCCCC"> to copy</font>

624
00:30:37,190 --> 00:30:42,320
and<font color="#E5E5E5"> paste this example</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> change your</font>

625
00:30:39,620 --> 00:30:44,750
<font color="#CCCCCC">url there</font><font color="#E5E5E5"> and that's it</font><font color="#CCCCCC"> I mean that's</font>

626
00:30:42,320 --> 00:30:46,760
the only<font color="#CCCCCC"> stuff to know there</font><font color="#E5E5E5"> is a Singh</font>

627
00:30:44,750 --> 00:30:49,040
<font color="#E5E5E5">def in sync with and you're good to go</font>

628
00:30:46,760 --> 00:30:51,379
you can<font color="#E5E5E5"> do some load testing and once</font>

629
00:30:49,040 --> 00:30:55,639
you have this module you<font color="#CCCCCC"> can do motive</font>

630
00:30:51,380 --> 00:30:58,610
example<font color="#E5E5E5"> do I pass it a few options and</font>

631
00:30:55,640 --> 00:31:01,610
bam you have<font color="#CCCCCC"> a load</font><font color="#E5E5E5"> test</font><font color="#CCCCCC"> and in this</font>

632
00:30:58,610 --> 00:31:05,409
example<font color="#CCCCCC"> I'm running 10 and porking 10</font>

633
00:31:01,610 --> 00:31:08,479
processes and each process runs 200

634
00:31:05,410 --> 00:31:10,490
workers<font color="#E5E5E5"> a worker being a core routine</font>

635
00:31:08,480 --> 00:31:13,430
that's<font color="#E5E5E5"> going to call</font>

636
00:31:10,490 --> 00:31:16,640
and over<font color="#CCCCCC"> this</font><font color="#E5E5E5"> scenario until it breaks</font>

637
00:31:13,430 --> 00:31:19,610
<font color="#E5E5E5">and the -</font><font color="#CCCCCC"> ex option here says okay</font><font color="#E5E5E5"> run</font>

638
00:31:16,640 --> 00:31:24,110
that and as<font color="#E5E5E5"> soon as the there's an error</font>

639
00:31:19,610 --> 00:31:28,520
stop of course<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> create more</font>

640
00:31:24,110 --> 00:31:32,750
scenarios<font color="#CCCCCC"> here I have two scenario</font><font color="#E5E5E5"> do</font>

641
00:31:28,520 --> 00:31:35,870
this do that<font color="#CCCCCC"> the second one is checking</font>

642
00:31:32,750 --> 00:31:38,150
<font color="#E5E5E5">for</font><font color="#CCCCCC"> what's going on</font><font color="#E5E5E5"> the data you get</font>

643
00:31:35,870 --> 00:31:39,739
back<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> and when you create</font>

644
00:31:38,150 --> 00:31:43,640
<font color="#E5E5E5">two scenario like that and you run it</font>

645
00:31:39,740 --> 00:31:46,430
<font color="#CCCCCC">with molotov</font><font color="#E5E5E5"> each time a worker has</font>

646
00:31:43,640 --> 00:31:50,270
finished with<font color="#CCCCCC"> the scenario the trends</font>

647
00:31:46,430 --> 00:31:52,820
it picks randomly do this or do that<font color="#CCCCCC"> run</font>

648
00:31:50,270 --> 00:31:57,550
it finishes it picks randomly<font color="#E5E5E5"> the next</font>

649
00:31:52,820 --> 00:31:57,550
one etc<font color="#CCCCCC"> in the loop I'll tell you over</font>

650
00:31:57,700 --> 00:32:01,760
and<font color="#CCCCCC"> you can put some weight</font><font color="#E5E5E5"> because here</font>

651
00:32:00,500 --> 00:32:04,370
since<font color="#E5E5E5"> it's random</font>

652
00:32:01,760 --> 00:32:06,530
after a bit of<font color="#CCCCCC"> time 50%</font><font color="#E5E5E5"> of the time</font>

653
00:32:04,370 --> 00:32:09,560
you're<font color="#CCCCCC"> going to do do this and 50%</font><font color="#E5E5E5"> of</font>

654
00:32:06,530 --> 00:32:11,000
<font color="#CCCCCC">the</font><font color="#E5E5E5"> time you're going to do do</font><font color="#CCCCCC"> that so</font>

655
00:32:09,560 --> 00:32:12,710
here you<font color="#E5E5E5"> can put some weights you can</font>

656
00:32:11,000 --> 00:32:15,200
say hey I want to 90%<font color="#CCCCCC"> over the time I</font>

657
00:32:12,710 --> 00:32:18,260
want to<font color="#E5E5E5"> do that and</font><font color="#CCCCCC"> 10% of</font><font color="#E5E5E5"> the time I</font>

658
00:32:15,200 --> 00:32:21,350
will<font color="#E5E5E5"> do this so writing</font><font color="#CCCCCC"> moltov scenarios</font>

659
00:32:18,260 --> 00:32:24,670
in to do some load<font color="#CCCCCC"> tests</font><font color="#E5E5E5"> consists of</font>

660
00:32:21,350 --> 00:32:27,110
creating one<font color="#E5E5E5"> co-routine person are you</font>

661
00:32:24,670 --> 00:32:29,360
specifying the the weight of the

662
00:32:27,110 --> 00:32:31,969
scenario<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be as realistic as possible</font>

663
00:32:29,360 --> 00:32:35,510
from what you're using our users are

664
00:32:31,970 --> 00:32:40,070
<font color="#E5E5E5">doing with the web service and then call</font>

665
00:32:35,510 --> 00:32:43,129
the<font color="#CCCCCC"> mode of command line and and it's</font>

666
00:32:40,070 --> 00:32:45,169
also useful to I mean it's also a<font color="#E5E5E5"> good</font>

667
00:32:43,130 --> 00:32:47,390
at the documentation<font color="#E5E5E5"> for people because</font>

668
00:32:45,170 --> 00:32:50,600
they can<font color="#CCCCCC"> look at the load</font><font color="#E5E5E5"> test here and</font>

669
00:32:47,390 --> 00:32:54,410
know that the scenario<font color="#E5E5E5"> that's in do that</font>

670
00:32:50,600 --> 00:32:58,360
<font color="#E5E5E5">is represent 90% of the user of the</font>

671
00:32:54,410 --> 00:32:58,360
<font color="#CCCCCC">codes that are made on</font><font color="#E5E5E5"> the web service</font>

672
00:33:00,550 --> 00:33:05,540
<font color="#CCCCCC">we have test fixtures so you can create</font>

673
00:33:03,740 --> 00:33:07,880
a function that's<font color="#CCCCCC"> going to set for</font>

674
00:33:05,540 --> 00:33:11,510
<font color="#CCCCCC">example</font><font color="#E5E5E5"> authentication header for</font>

675
00:33:07,880 --> 00:33:14,090
example<font color="#CCCCCC"> it might be it might takes a few</font>

676
00:33:11,510 --> 00:33:16,520
seconds<font color="#E5E5E5"> to build authentication header</font>

677
00:33:14,090 --> 00:33:19,280
if you want to interact<font color="#CCCCCC"> with some</font><font color="#E5E5E5"> server</font>

678
00:33:16,520 --> 00:33:21,650
or stuff like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so here in prepare</font>

679
00:33:19,280 --> 00:33:24,470
some stuff<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> creating a variable</font>

680
00:33:21,650 --> 00:33:27,410
called<font color="#E5E5E5"> off where I'm storing</font>

681
00:33:24,470 --> 00:33:31,130
the<font color="#E5E5E5"> off header and then in a scenario</font><font color="#CCCCCC"> I</font>

682
00:33:27,410 --> 00:33:35,150
<font color="#E5E5E5">can call back this variable and use it</font>

683
00:33:31,130 --> 00:33:38,150
in my<font color="#CCCCCC"> header and this</font><font color="#E5E5E5"> is basically the</font>

684
00:33:35,150 --> 00:33:41,690
<font color="#CCCCCC">life cycle of a malt off test</font><font color="#E5E5E5"> and we</font>

685
00:33:38,150 --> 00:33:45,020
have decorators everywhere<font color="#E5E5E5"> for</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> to do</font>

686
00:33:41,690 --> 00:33:46,880
something<font color="#E5E5E5"> if you wanna like create some</font>

687
00:33:45,020 --> 00:33:49,520
stuff<font color="#E5E5E5"> before the test runs you're</font><font color="#CCCCCC"> gonna</font>

688
00:33:46,880 --> 00:33:52,670
<font color="#E5E5E5">use global setup before the test it</font>

689
00:33:49,520 --> 00:33:56,000
launched<font color="#E5E5E5"> you can do some stuff per</font>

690
00:33:52,670 --> 00:33:59,030
worker<font color="#E5E5E5"> that's the</font><font color="#CCCCCC"> setup decorator you</font>

691
00:33:56,000 --> 00:34:04,430
<font color="#CCCCCC">can do</font><font color="#E5E5E5"> stuff at the session level when a</font>

692
00:33:59,030 --> 00:34:08,029
worker create a<font color="#CCCCCC"> i/o HTTP client</font><font color="#E5E5E5"> and when</font>

693
00:34:04,430 --> 00:34:11,780
it's destroyed<font color="#CCCCCC"> you can you have three</font>

694
00:34:08,030 --> 00:34:14,510
different<font color="#E5E5E5"> teardowns at the session level</font>

695
00:34:11,780 --> 00:34:20,870
<font color="#CCCCCC">at the worker</font><font color="#E5E5E5"> level and at the end of</font>

696
00:34:14,510 --> 00:34:23,419
the test<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> an event system where</font>

697
00:34:20,870 --> 00:34:26,239
you can create<font color="#CCCCCC"> a function that will</font>

698
00:34:23,418 --> 00:34:29,770
receive events<font color="#E5E5E5"> every time something is</font>

699
00:34:26,239 --> 00:34:34,219
happening in<font color="#CCCCCC"> Molotov we sent a request</font>

700
00:34:29,770 --> 00:34:37,000
response was received<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have we have</font>

701
00:34:34,219 --> 00:34:39,888
updated the number of active workers<font color="#CCCCCC"> a</font>

702
00:34:37,000 --> 00:34:46,030
scenario starts the scenario was

703
00:34:39,889 --> 00:34:48,440
successful with Cerner you felt etc and

704
00:34:46,030 --> 00:34:52,399
so this is useful<font color="#E5E5E5"> if you want to do some</font>

705
00:34:48,440 --> 00:34:55,820
<font color="#E5E5E5">stuff to keep track</font><font color="#CCCCCC"> of what's</font><font color="#E5E5E5"> going on</font>

706
00:34:52,399 --> 00:34:59,810
it in<font color="#E5E5E5"> Molotov we also have extension so</font>

707
00:34:55,820 --> 00:35:01,520
this is a use case where<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> you</font>

708
00:34:59,810 --> 00:35:04,279
<font color="#E5E5E5">want to dump all your</font><font color="#CCCCCC"> results in a</font>

709
00:35:01,520 --> 00:35:08,390
<font color="#E5E5E5">single file so you can create a module</font>

710
00:35:04,280 --> 00:35:12,020
here called CSV dump where you're going

711
00:35:08,390 --> 00:35:15,200
to implement an event that records every

712
00:35:12,020 --> 00:35:17,480
time a request<font color="#E5E5E5"> is sent and you're going</font>

713
00:35:15,200 --> 00:35:19,640
to hook yourself<font color="#E5E5E5"> in the chill down at</font>

714
00:35:17,480 --> 00:35:22,790
the end of the<font color="#E5E5E5"> test just to dump this</font>

715
00:35:19,640 --> 00:35:25,339
list of requests<font color="#E5E5E5"> you did</font><font color="#CCCCCC"> and once you</font>

716
00:35:22,790 --> 00:35:27,650
created<font color="#E5E5E5"> this file you can just use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in</font>

717
00:35:25,340 --> 00:35:30,620
the command<font color="#E5E5E5"> line with the - - use</font>

718
00:35:27,650 --> 00:35:32,360
extension option<font color="#E5E5E5"> and tell people</font><font color="#CCCCCC"> ok</font>

719
00:35:30,620 --> 00:35:34,580
every<font color="#CCCCCC"> time you when you run a</font><font color="#E5E5E5"> load test</font>

720
00:35:32,360 --> 00:35:37,820
with motive you can use my<font color="#CCCCCC"> lose he has</font>

721
00:35:34,580 --> 00:35:40,790
read<font color="#CCCCCC"> M file and have your</font>

722
00:35:37,820 --> 00:35:48,400
test<font color="#CCCCCC"> them some result in a you know</font><font color="#E5E5E5"> CSV</font>

723
00:35:40,790 --> 00:35:51,020
file<font color="#E5E5E5"> whatever you can run it from get</font>

724
00:35:48,400 --> 00:35:57,260
<font color="#E5E5E5">let's say you have a motive test in a</font>

725
00:35:51,020 --> 00:36:00,680
git repo<font color="#E5E5E5"> and you want to run it from</font>

726
00:35:57,260 --> 00:36:03,800
your<font color="#E5E5E5"> laptop or</font><font color="#CCCCCC"> your CI system</font><font color="#E5E5E5"> without</font>

727
00:36:00,680 --> 00:36:06,890
having<font color="#E5E5E5"> to do to install anything you can</font>

728
00:36:03,800 --> 00:36:09,740
<font color="#E5E5E5">use most</font><font color="#CCCCCC"> left the name of the repo</font><font color="#E5E5E5"> and</font>

729
00:36:06,890 --> 00:36:12,589
the name<font color="#E5E5E5"> of the test</font><font color="#CCCCCC"> as long as you have</font>

730
00:36:09,740 --> 00:36:15,589
a<font color="#CCCCCC"> motive the</font><font color="#E5E5E5"> JSON file at the</font><font color="#CCCCCC"> top of the</font>

731
00:36:12,590 --> 00:36:20,660
repo<font color="#CCCCCC"> mol</font><font color="#E5E5E5"> slave is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> clone the repo</font>

732
00:36:15,590 --> 00:36:22,640
<font color="#CCCCCC">look at this file</font><font color="#E5E5E5"> find the test</font><font color="#CCCCCC"> find the</font>

733
00:36:20,660 --> 00:36:25,520
scenario<font color="#CCCCCC"> and run it for</font><font color="#E5E5E5"> you you can even</font>

734
00:36:22,640 --> 00:36:27,259
<font color="#E5E5E5">add some option like requirements that's</font>

735
00:36:25,520 --> 00:36:28,700
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> people install some stuff in your</font>

736
00:36:27,260 --> 00:36:31,340
environment before<font color="#E5E5E5"> it friends of the</font>

737
00:36:28,700 --> 00:36:36,680
test<font color="#E5E5E5"> you can set</font><font color="#CCCCCC"> up some environment</font>

738
00:36:31,340 --> 00:36:40,580
variable so it means<font color="#E5E5E5"> that if I install</font>

739
00:36:36,680 --> 00:36:42,740
<font color="#CCCCCC">moltov I can mole slave any</font><font color="#E5E5E5"> repo as long</font>

740
00:36:40,580 --> 00:36:44,330
<font color="#E5E5E5">as they're public and it's gonna run the</font>

741
00:36:42,740 --> 00:36:49,189
<font color="#E5E5E5">test for me</font><font color="#CCCCCC"> I don't have to install</font>

742
00:36:44,330 --> 00:36:49,670
locally the test and I can run it<font color="#E5E5E5"> from</font>

743
00:36:49,190 --> 00:36:53,810
docker

744
00:36:49,670 --> 00:36:57,170
so I have a docker image that has motive

745
00:36:53,810 --> 00:36:58,910
installed and run<font color="#E5E5E5"> male so it's it's</font>

746
00:36:57,170 --> 00:37:01,490
<font color="#CCCCCC">pretty straightforward</font><font color="#E5E5E5"> you do docker run</font>

747
00:36:58,910 --> 00:37:03,500
<font color="#E5E5E5">you provide</font><font color="#CCCCCC"> the repo the name of the</font>

748
00:37:01,490 --> 00:37:06,229
test you wanna run and it's going<font color="#E5E5E5"> to do</font>

749
00:37:03,500 --> 00:37:09,920
the same thing but inside a docker image

750
00:37:06,230 --> 00:37:13,330
<font color="#E5E5E5">and we want to do that because in our CI</font>

751
00:37:09,920 --> 00:37:17,060
environments if we wanna run a load test

752
00:37:13,330 --> 00:37:21,190
against the<font color="#CCCCCC"> project</font><font color="#E5E5E5"> we have to</font><font color="#CCCCCC"> do it in</font>

753
00:37:17,060 --> 00:37:21,190
a docker images so we<font color="#E5E5E5"> can use that tool</font>

754
00:37:21,640 --> 00:37:28,759
<font color="#CCCCCC">alright so feet are separated so amount</font>

755
00:37:26,120 --> 00:37:29,390
of tests are simple<font color="#CCCCCC"> coroutines Python</font>

756
00:37:28,760 --> 00:37:33,020
coroutines

757
00:37:29,390 --> 00:37:36,560
we have a<font color="#CCCCCC"> waiting system to for a</font>

758
00:37:33,020 --> 00:37:38,780
<font color="#CCCCCC">scenario distribution we have</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> hooks</font>

759
00:37:36,560 --> 00:37:41,509
everywhere during<font color="#CCCCCC"> the test so you can</font>

760
00:37:38,780 --> 00:37:44,420
<font color="#E5E5E5">add some code if you need we have</font>

761
00:37:41,510 --> 00:37:50,450
advanced<font color="#E5E5E5"> we have extensions you can run</font>

762
00:37:44,420 --> 00:37:54,260
stuff from get and you can<font color="#CCCCCC"> run in docker</font>

763
00:37:50,450 --> 00:37:56,118
so that's level<font color="#E5E5E5"> one and I mean in your</font>

764
00:37:54,260 --> 00:37:58,730
<font color="#CCCCCC">your key of needs in the low testing</font>

765
00:37:56,119 --> 00:38:00,380
that's<font color="#E5E5E5"> level</font><font color="#CCCCCC"> one level</font><font color="#E5E5E5"> two is taking</font>

766
00:37:58,730 --> 00:38:03,440
everything I<font color="#E5E5E5"> have to explain and put it</font>

767
00:38:00,380 --> 00:38:07,160
in a CI so you can do some continuous

768
00:38:03,440 --> 00:38:08,900
load testing<font color="#CCCCCC"> the goal here is to make</font>

769
00:38:07,160 --> 00:38:11,180
sure<font color="#CCCCCC"> that every time your developers</font>

770
00:38:08,900 --> 00:38:12,950
change<font color="#E5E5E5"> something a web service you are</font>

771
00:38:11,180 --> 00:38:15,710
able<font color="#E5E5E5"> to deploy</font><font color="#CCCCCC"> the new version of the</font>

772
00:38:12,950 --> 00:38:18,200
web service somewhere<font color="#E5E5E5"> and rerun your</font>

773
00:38:15,710 --> 00:38:22,960
<font color="#E5E5E5">test your load test to make</font><font color="#CCCCCC"> sure there</font>

774
00:38:18,200 --> 00:38:27,439
is no<font color="#CCCCCC"> loads regression speed regression</font>

775
00:38:22,960 --> 00:38:30,010
performance regressions<font color="#E5E5E5"> okay thank you</font>

776
00:38:27,440 --> 00:38:30,010
<font color="#E5E5E5">that's it</font>

777
00:38:35,990 --> 00:38:42,029
so just one question<font color="#CCCCCC"> so the logo is from</font>

778
00:38:39,540 --> 00:38:43,890
Juan Pablo Bravo<font color="#CCCCCC"> he's doing a lot of</font>

779
00:38:42,030 --> 00:38:47,550
cool icons if you want to check them<font color="#E5E5E5"> out</font>

780
00:38:43,890 --> 00:38:50,509
it's<font color="#CCCCCC"> cc-by</font><font color="#E5E5E5"> if I create a</font><font color="#CCCCCC"> moltov t-shirt</font>

781
00:38:47,550 --> 00:38:52,830
who wants one<font color="#CCCCCC"> Prince raise your hand</font>

782
00:38:50,510 --> 00:38:55,430
<font color="#CCCCCC">okay cool</font><font color="#E5E5E5"> okay cool that's good enough</font>

783
00:38:52,830 --> 00:38:55,430
<font color="#CCCCCC">awesome</font>

784
00:39:15,640 --> 00:39:23,270
hi<font color="#E5E5E5"> I'm great token a cool tool</font><font color="#CCCCCC"> just</font>

785
00:39:20,240 --> 00:39:26,740
<font color="#E5E5E5">another one that wasn't on your</font><font color="#CCCCCC"> list</font>

786
00:39:23,270 --> 00:39:29,090
<font color="#CCCCCC">Gatling</font><font color="#E5E5E5"> if you how can</font><font color="#CCCCCC"> you speak louder</font>

787
00:39:26,740 --> 00:39:33,140
<font color="#E5E5E5">another tool that wasn't on your</font><font color="#CCCCCC"> list</font>

788
00:39:29,090 --> 00:39:37,370
called<font color="#CCCCCC"> the Gatling yeah</font><font color="#E5E5E5"> yes written in</font>

789
00:39:33,140 --> 00:39:41,089
<font color="#CCCCCC">scala with akka actors</font><font color="#E5E5E5"> might be worth</font>

790
00:39:37,370 --> 00:39:43,270
<font color="#CCCCCC">checking out okay</font><font color="#E5E5E5"> I'm also wondering how</font>

791
00:39:41,090 --> 00:39:46,300
easy do you<font color="#CCCCCC"> think it would be to</font><font color="#E5E5E5"> extend</font>

792
00:39:43,270 --> 00:39:50,420
this for<font color="#CCCCCC"> something like a</font><font color="#E5E5E5"> database</font>

793
00:39:46,300 --> 00:39:54,320
<font color="#E5E5E5">testing database tasting like calling</font>

794
00:39:50,420 --> 00:39:56,140
some<font color="#CCCCCC"> TCP</font><font color="#E5E5E5"> insert of HTTP effectively yeah</font>

795
00:39:54,320 --> 00:39:58,070
connecting<font color="#E5E5E5"> with something you know</font>

796
00:39:56,140 --> 00:40:00,529
<font color="#CCCCCC">nectar</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> some queries</font><font color="#E5E5E5"> and</font>

797
00:39:58,070 --> 00:40:03,020
scenarios with weights<font color="#E5E5E5"> yeah you would</font>

798
00:40:00,530 --> 00:40:06,860
you<font color="#CCCCCC"> would have to plug in another</font>

799
00:40:03,020 --> 00:40:10,910
<font color="#E5E5E5">session object instead of a HTTP client</font>

800
00:40:06,860 --> 00:40:19,610
<font color="#CCCCCC">if you</font><font color="#E5E5E5"> provide the same</font><font color="#CCCCCC"> API I don't</font>

801
00:40:10,910 --> 00:40:25,089
think it's a lot of<font color="#E5E5E5"> work cool thanks any</font>

802
00:40:19,610 --> 00:40:25,090
other question here

803
00:40:32,560 --> 00:40:40,090
hi I'm currently using<font color="#E5E5E5"> PI tests to do</font>

804
00:40:36,730 --> 00:40:45,670
similar<font color="#E5E5E5"> things like calling an HTTP API</font>

805
00:40:40,090 --> 00:40:50,470
and also<font color="#E5E5E5"> WebSockets so what benefits</font>

806
00:40:45,670 --> 00:40:53,470
does<font color="#E5E5E5"> molotov have over</font><font color="#CCCCCC"> PI tests ok so</font><font color="#E5E5E5"> PI</font>

807
00:40:50,470 --> 00:40:55,839
test is not going to create a lot of

808
00:40:53,470 --> 00:40:59,410
coroutines and<font color="#E5E5E5"> running them in parallel</font>

809
00:40:55,840 --> 00:41:02,920
in<font color="#E5E5E5"> PI</font><font color="#CCCCCC"> tests when you run something</font><font color="#E5E5E5"> it's</font>

810
00:40:59,410 --> 00:41:05,170
meant to<font color="#E5E5E5"> run a single time everything so</font>

811
00:41:02,920 --> 00:41:07,690
the only<font color="#CCCCCC"> difference is that motive takes</font>

812
00:41:05,170 --> 00:41:11,620
care of running a bunch of<font color="#CCCCCC"> co-routine</font>

813
00:41:07,690 --> 00:41:14,170
for you<font color="#E5E5E5"> and shutting them down</font><font color="#CCCCCC"> ok so um</font>

814
00:41:11,620 --> 00:41:16,960
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> not one of my colleagues is</font>

815
00:41:14,170 --> 00:41:19,750
actually<font color="#E5E5E5"> currently working on also using</font>

816
00:41:16,960 --> 00:41:27,370
parallel execute or implementing

817
00:41:19,750 --> 00:41:29,440
parallel execution<font color="#E5E5E5"> just so ok</font><font color="#CCCCCC"> so then it</font>

818
00:41:27,370 --> 00:41:31,990
wouldn't<font color="#E5E5E5"> probably wouldn't give us a big</font>

819
00:41:29,440 --> 00:41:36,280
benefit over<font color="#E5E5E5"> what you would have also to</font>

820
00:41:31,990 --> 00:41:40,299
deal with your session<font color="#E5E5E5"> creation for the</font>

821
00:41:36,280 --> 00:41:41,860
<font color="#CCCCCC">HCP client but yeah that's</font><font color="#E5E5E5"> I mean if you</font>

822
00:41:40,300 --> 00:41:46,980
have something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> does that it's</font>

823
00:41:41,860 --> 00:41:46,980
pretty similar<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thanks</font>

824
00:41:50,850 --> 00:41:57,990
hi<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> for your talk do you think</font>

825
00:41:54,870 --> 00:42:00,870
we<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> Molotov to test systems at</font>

826
00:41:57,990 --> 00:42:03,259
scale automatically<font color="#E5E5E5"> I'm sorry I can't</font>

827
00:42:00,870 --> 00:42:03,259
hear you

828
00:42:04,950 --> 00:42:11,759
my question is do<font color="#CCCCCC"> you think we can use</font>

829
00:42:08,520 --> 00:42:15,360
<font color="#E5E5E5">Molotov to test systems that scale up</font>

830
00:42:11,760 --> 00:42:22,410
automatically<font color="#E5E5E5"> apps when the load is too</font>

831
00:42:15,360 --> 00:42:24,200
<font color="#CCCCCC">- I</font><font color="#E5E5E5"> oh yeah so well-well</font><font color="#CCCCCC"> you can test</font>

832
00:42:22,410 --> 00:42:27,480
and make<font color="#CCCCCC"> sure that it scales</font>

833
00:42:24,200 --> 00:42:32,100
<font color="#E5E5E5">automatically or</font><font color="#CCCCCC"> you can shut down</font><font color="#E5E5E5"> this</font>

834
00:42:27,480 --> 00:42:33,990
auto scaling<font color="#E5E5E5"> see how one load behaves so</font>

835
00:42:32,100 --> 00:42:36,710
you know when it's gonna also<font color="#E5E5E5"> scale so</font>

836
00:42:33,990 --> 00:42:36,709
that's why we do

837
00:42:48,220 --> 00:42:52,779
so small question is there<font color="#CCCCCC"> any kind of</font>

838
00:42:50,520 --> 00:42:56,860
example<font color="#E5E5E5"> of what kind of output motor</font>

839
00:42:52,780 --> 00:42:58,900
produces or what what kind of output can

840
00:42:56,860 --> 00:43:01,240
<font color="#CCCCCC">Molitor produce and what kind of let's</font>

841
00:42:58,900 --> 00:43:04,300
say reporting<font color="#CCCCCC"> information can it</font><font color="#E5E5E5"> so</font>

842
00:43:01,240 --> 00:43:07,000
motive is just showing<font color="#E5E5E5"> you</font><font color="#CCCCCC"> that</font>

843
00:43:04,300 --> 00:43:09,130
something is going on<font color="#E5E5E5"> you get back all</font>

844
00:43:07,000 --> 00:43:13,210
the trace<font color="#E5E5E5"> backs when something goes</font>

845
00:43:09,130 --> 00:43:16,000
<font color="#CCCCCC">wrong and if you</font><font color="#E5E5E5"> run a</font><font color="#CCCCCC"> test that</font><font color="#E5E5E5"> lasts</font>

846
00:43:13,210 --> 00:43:18,310
for I don't know<font color="#CCCCCC"> ten minutes you're</font>

847
00:43:16,000 --> 00:43:19,870
<font color="#E5E5E5">gonna have like progress and stuff</font><font color="#CCCCCC"> like</font>

848
00:43:18,310 --> 00:43:21,759
that but<font color="#E5E5E5"> that's it</font>

849
00:43:19,870 --> 00:43:24,310
if you want to add<font color="#E5E5E5"> more stuff you need</font>

850
00:43:21,760 --> 00:43:26,950
<font color="#E5E5E5">to use the hooks to add some more</font>

851
00:43:24,310 --> 00:43:29,500
<font color="#CCCCCC">information</font><font color="#E5E5E5"> but most of the time we run</font>

852
00:43:26,950 --> 00:43:31,980
it<font color="#E5E5E5"> and we look at what going on on the</font>

853
00:43:29,500 --> 00:43:31,980
server side

854
00:43:39,510 --> 00:43:45,120
hi thanks for the<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> just a question</font>

855
00:43:42,510 --> 00:43:46,980
one of the I've used locust<font color="#E5E5E5"> and one of</font>

856
00:43:45,120 --> 00:43:48,750
the nice<font color="#CCCCCC"> things that I</font><font color="#E5E5E5"> found in locust</font>

857
00:43:46,980 --> 00:43:50,880
was the<font color="#E5E5E5"> use</font><font color="#CCCCCC"> of feedback so when you were</font>

858
00:43:48,750 --> 00:43:53,790
developing<font color="#CCCCCC"> your your</font><font color="#E5E5E5"> test you kind of</font>

859
00:43:50,880 --> 00:43:56,430
you started you see what's<font color="#E5E5E5"> going on then</font>

860
00:43:53,790 --> 00:43:59,370
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> stop in and rerun it</font><font color="#CCCCCC"> and the web</font>

861
00:43:56,430 --> 00:44:02,220
interfaces<font color="#E5E5E5"> it's also nice</font><font color="#CCCCCC"> to show to</font>

862
00:43:59,370 --> 00:44:04,140
your<font color="#E5E5E5"> end-user or to to have some</font>

863
00:44:02,220 --> 00:44:06,060
graphical feedback how easy would<font color="#CCCCCC"> it be</font>

864
00:44:04,140 --> 00:44:09,000
or what kind of UX do you have in

865
00:44:06,060 --> 00:44:11,730
<font color="#CCCCCC">molotov to see what it's doing as it</font>

866
00:44:09,000 --> 00:44:15,060
goes<font color="#E5E5E5"> yeah and any chance of getting a</font>

867
00:44:11,730 --> 00:44:16,890
web view of that<font color="#E5E5E5"> right so on the client</font>

868
00:44:15,060 --> 00:44:19,380
side it's pretty<font color="#CCCCCC"> limited</font><font color="#E5E5E5"> it's just a</font>

869
00:44:16,890 --> 00:44:22,560
command<font color="#E5E5E5"> line and we just progress</font><font color="#CCCCCC"> you</font>

870
00:44:19,380 --> 00:44:24,720
know<font color="#E5E5E5"> and will only display trace backs</font>

871
00:44:22,560 --> 00:44:27,810
<font color="#E5E5E5">because everything else we do it on the</font>

872
00:44:24,720 --> 00:44:30,450
<font color="#E5E5E5">server side on Amazon consoles and data</font>

873
00:44:27,810 --> 00:44:32,790
<font color="#E5E5E5">dogs so we don't have any fancy user</font>

874
00:44:30,450 --> 00:44:33,629
interface<font color="#E5E5E5"> because we don't really need</font>

875
00:44:32,790 --> 00:44:36,960
<font color="#CCCCCC">it</font>

876
00:44:33,630 --> 00:44:38,670
I guess<font color="#CCCCCC"> locus is better for</font><font color="#E5E5E5"> this and for</font>

877
00:44:36,960 --> 00:44:40,590
<font color="#CCCCCC">some use case is better maybe to use</font>

878
00:44:38,670 --> 00:44:42,480
<font color="#E5E5E5">lockers because it has that</font><font color="#CCCCCC"> you can show</font>

879
00:44:40,590 --> 00:44:50,640
<font color="#E5E5E5">to people</font><font color="#CCCCCC"> and somewhere</font><font color="#E5E5E5"> else</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> for our</font>

880
00:44:42,480 --> 00:44:53,130
use case we didn't need that<font color="#E5E5E5"> so no more</font>

881
00:44:50,640 --> 00:44:54,779
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> all right thank you so I'll</font><font color="#CCCCCC"> be</font>

882
00:44:53,130 --> 00:44:55,990
around<font color="#E5E5E5"> in</font><font color="#CCCCCC"> case you want</font><font color="#E5E5E5"> to chat and</font>

883
00:44:54,780 --> 00:45:02,550
stuff<font color="#E5E5E5"> and thank you</font>

884
00:44:55,990 --> 00:45:06,689
[Applause]

885
00:45:02,550 --> 00:45:19,380
<font color="#CCCCCC">hey ma I</font><font color="#E5E5E5"> said it's been a long time yeah</font>

886
00:45:06,690 --> 00:45:19,380
yeah yeah absolutely well

887
00:46:14,269 --> 00:46:23,509
nice working want to see

888
00:46:36,030 --> 00:46:42,930
<font color="#E5E5E5">okay cool you know the general stuff you</font>

889
00:46:39,510 --> 00:46:49,860
see okay so basically one<font color="#CCCCCC"> of you needs</font>

890
00:46:42,930 --> 00:46:52,220
<font color="#CCCCCC">to</font><font color="#E5E5E5"> increase when it starts they need to</font>

891
00:46:49,860 --> 00:46:52,220
give them

892
00:47:32,230 --> 00:47:35,710
<font color="#CCCCCC">any questions</font>

893
00:48:07,280 --> 00:48:10,280
yes

894
00:48:12,410 --> 00:48:15,440
[Music]

