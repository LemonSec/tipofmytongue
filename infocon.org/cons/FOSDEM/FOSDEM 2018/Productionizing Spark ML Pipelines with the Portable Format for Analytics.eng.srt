1
00:00:04,620 --> 00:00:10,379
okay everyone<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> continue</font><font color="#CCCCCC"> our next</font>

2
00:00:07,410 --> 00:00:12,290
<font color="#E5E5E5">speaker is Nick from IBM principal</font>

3
00:00:10,380 --> 00:00:14,730
engineer<font color="#E5E5E5"> and he's gonna talk about</font>

4
00:00:12,290 --> 00:00:17,090
putting spark machine learning pipelines

5
00:00:14,730 --> 00:00:20,130
to production

6
00:00:17,090 --> 00:00:21,570
yeah good afternoon everyone and thanks

7
00:00:20,130 --> 00:00:23,869
for<font color="#CCCCCC"> having me here it's my first time at</font>

8
00:00:21,570 --> 00:00:27,448
FOSDEM<font color="#E5E5E5"> so it's great to</font><font color="#CCCCCC"> see all the</font>

9
00:00:23,869 --> 00:00:29,820
energy and<font color="#E5E5E5"> enthusiasm around open source</font>

10
00:00:27,449 --> 00:00:32,220
software<font color="#CCCCCC"> at this event</font><font color="#E5E5E5"> so it's great to</font>

11
00:00:29,820 --> 00:00:34,650
<font color="#E5E5E5">be here so today we're going to talk</font>

12
00:00:32,220 --> 00:00:36,600
about<font color="#E5E5E5"> collection izing spark ml type</font>

13
00:00:34,650 --> 00:00:38,790
lines<font color="#E5E5E5"> well actually any machine learning</font>

14
00:00:36,600 --> 00:00:40,410
<font color="#CCCCCC">but</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> focus</font><font color="#CCCCCC"> on spark with the</font>

15
00:00:38,790 --> 00:00:42,570
portable<font color="#E5E5E5"> format for analytics so using</font>

16
00:00:40,410 --> 00:00:45,540
open standards<font color="#CCCCCC"> or machine</font><font color="#E5E5E5"> learning</font>

17
00:00:42,570 --> 00:00:46,950
<font color="#E5E5E5">models</font><font color="#CCCCCC"> a little bit about me I'm Himmel</font>

18
00:00:45,540 --> 00:00:49,890
<font color="#E5E5E5">Nick on Twitter and github</font>

19
00:00:46,950 --> 00:00:51,840
I work in IBM<font color="#E5E5E5"> in the spark Technology</font>

20
00:00:49,890 --> 00:00:54,510
<font color="#E5E5E5">Center and</font><font color="#CCCCCC"> the cognitive open</font><font color="#E5E5E5"> Technology</font>

21
00:00:51,840 --> 00:00:57,989
team predominantly<font color="#E5E5E5"> working on machine</font>

22
00:00:54,510 --> 00:00:59,968
learning<font color="#CCCCCC"> AI</font><font color="#E5E5E5"> deep learning</font><font color="#CCCCCC"> and a lot of</font>

23
00:00:57,989 --> 00:01:01,649
my time is<font color="#E5E5E5"> spent in</font><font color="#CCCCCC"> the Apache</font><font color="#E5E5E5"> spark</font>

24
00:00:59,969 --> 00:01:03,390
project I'm a committed<font color="#E5E5E5"> in PMC member</font>

25
00:01:01,649 --> 00:01:05,339
there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I've written a fairly</font>

26
00:01:03,390 --> 00:01:08,970
out-of-date book now but it's called

27
00:01:05,339 --> 00:01:10,500
machine learning with spark so today

28
00:01:08,970 --> 00:01:13,590
we're<font color="#E5E5E5"> going to talk a little bit</font><font color="#CCCCCC"> about</font>

29
00:01:10,500 --> 00:01:15,149
the machine learning workflow<font color="#CCCCCC"> and then</font>

30
00:01:13,590 --> 00:01:17,250
some of the challenges inherent in that

31
00:01:15,149 --> 00:01:19,170
<font color="#E5E5E5">workflow in particular the kind of end</font>

32
00:01:17,250 --> 00:01:21,390
piece which is deploying those those

33
00:01:19,170 --> 00:01:25,080
machine learning pipelines<font color="#CCCCCC"> to production</font>

34
00:01:21,390 --> 00:01:27,390
<font color="#E5E5E5">and then how open standards can help</font>

35
00:01:25,080 --> 00:01:28,830
solve their problem<font color="#CCCCCC"> and some of the work</font>

36
00:01:27,390 --> 00:01:31,380
that me and my team<font color="#E5E5E5"> have been doing</font>

37
00:01:28,830 --> 00:01:33,869
<font color="#CCCCCC">around this this</font><font color="#E5E5E5"> challenge and then</font>

38
00:01:31,380 --> 00:01:37,770
finally kind<font color="#E5E5E5"> of a summary overview in</font>

39
00:01:33,869 --> 00:01:39,509
the future<font color="#E5E5E5"> directions of this work so</font>

40
00:01:37,770 --> 00:01:41,819
the machine learning workflow is really

41
00:01:39,509 --> 00:01:44,310
simple as you know<font color="#E5E5E5"> you take data you</font>

42
00:01:41,819 --> 00:01:48,000
apply machine learning<font color="#E5E5E5"> and you profit</font>

43
00:01:44,310 --> 00:01:50,700
<font color="#E5E5E5">make money right but in reality</font><font color="#CCCCCC"> here</font>

44
00:01:48,000 --> 00:01:54,179
it's a<font color="#E5E5E5"> very complex</font><font color="#CCCCCC"> beast</font><font color="#E5E5E5"> so it spans</font>

45
00:01:50,700 --> 00:01:56,580
multiple teams<font color="#CCCCCC"> you've got your data that</font>

46
00:01:54,179 --> 00:01:58,080
can<font color="#CCCCCC"> be various forms some of it is</font>

47
00:01:56,580 --> 00:02:00,959
historical something that is arriving in

48
00:01:58,080 --> 00:02:04,069
real time<font color="#CCCCCC"> it's across data stores across</font>

49
00:02:00,959 --> 00:02:06,810
<font color="#CCCCCC">systems you've got lineage you've got</font>

50
00:02:04,069 --> 00:02:08,310
metadata<font color="#E5E5E5"> you know you need to</font><font color="#CCCCCC"> kind of</font>

51
00:02:06,810 --> 00:02:10,170
<font color="#CCCCCC">record all of that and that's the domain</font>

52
00:02:08,310 --> 00:02:12,719
<font color="#E5E5E5">of</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> data engineering teams typically</font>

53
00:02:10,169 --> 00:02:15,629
in a you know<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a large organ to large</font>

54
00:02:12,719 --> 00:02:17,159
<font color="#E5E5E5">organization then the traditional</font><font color="#CCCCCC"> data</font>

55
00:02:15,629 --> 00:02:17,530
science<font color="#CCCCCC"> or machine learning workflow the</font>

56
00:02:17,159 --> 00:02:19,030
quest

57
00:02:17,530 --> 00:02:21,310
<font color="#CCCCCC">we'll think about is in the</font><font color="#E5E5E5"> middle here</font>

58
00:02:19,030 --> 00:02:23,319
<font color="#CCCCCC">you take your data which you</font><font color="#E5E5E5"> assume is</font>

59
00:02:21,310 --> 00:02:26,709
all nice<font color="#CCCCCC"> and</font><font color="#E5E5E5"> clean and available to you</font>

60
00:02:23,319 --> 00:02:28,720
<font color="#E5E5E5">you ingest that you apply some</font><font color="#CCCCCC"> data</font>

61
00:02:26,709 --> 00:02:31,030
exploration<font color="#CCCCCC"> feature transformation and</font>

62
00:02:28,720 --> 00:02:33,370
engineering and<font color="#E5E5E5"> you get that data into</font><font color="#CCCCCC"> a</font>

63
00:02:31,030 --> 00:02:35,620
format that<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> feed into your</font>

64
00:02:33,370 --> 00:02:38,140
<font color="#CCCCCC">machine learning model</font><font color="#E5E5E5"> and then the</font>

65
00:02:35,620 --> 00:02:40,209
<font color="#CCCCCC">piece that you know</font><font color="#E5E5E5"> most people</font><font color="#CCCCCC"> tend to</font>

66
00:02:38,140 --> 00:02:42,069
think<font color="#E5E5E5"> it takes up most of the time but</font>

67
00:02:40,209 --> 00:02:43,930
<font color="#CCCCCC">actually takes up some of the</font><font color="#E5E5E5"> least time</font>

68
00:02:42,069 --> 00:02:45,339
is this<font color="#E5E5E5"> model training</font><font color="#CCCCCC"> it's actually</font>

69
00:02:43,930 --> 00:02:48,400
selecting the model<font color="#E5E5E5"> and doing your</font>

70
00:02:45,340 --> 00:02:50,500
<font color="#CCCCCC">hardcore</font><font color="#E5E5E5"> pure machine learning is only a</font>

71
00:02:48,400 --> 00:02:51,040
<font color="#E5E5E5">really small piece</font><font color="#CCCCCC"> but it is a</font><font color="#E5E5E5"> critical</font>

72
00:02:50,500 --> 00:02:53,050
piece<font color="#CCCCCC"> yep</font>

73
00:02:51,040 --> 00:02:55,570
and<font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> domain of your</font><font color="#E5E5E5"> data</font>

74
00:02:53,050 --> 00:02:57,190
scientists<font color="#CCCCCC"> and</font><font color="#E5E5E5"> your researchers and then</font>

75
00:02:55,570 --> 00:03:00,280
once they<font color="#E5E5E5"> are done with it</font>

76
00:02:57,190 --> 00:03:02,410
they tend to throw it over the wall<font color="#E5E5E5"> and</font>

77
00:03:00,280 --> 00:03:05,140
say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> learning in production</font>

78
00:03:02,410 --> 00:03:07,540
engineers<font color="#CCCCCC"> here's my model written in R</font>

79
00:03:05,140 --> 00:03:11,708
<font color="#CCCCCC">or Python or whatever and you need to</font>

80
00:03:07,540 --> 00:03:13,480
deploy it so that you<font color="#E5E5E5"> know that spans a</font>

81
00:03:11,709 --> 00:03:15,100
pretty big boundary there and you<font color="#E5E5E5"> need</font>

82
00:03:13,480 --> 00:03:18,220
<font color="#E5E5E5">to take the</font><font color="#CCCCCC"> system and this workflow</font>

83
00:03:15,100 --> 00:03:21,700
into production<font color="#E5E5E5"> with all the with all</font>

84
00:03:18,220 --> 00:03:24,370
the requirements<font color="#E5E5E5"> for scalability</font><font color="#CCCCCC"> uptime</font>

85
00:03:21,700 --> 00:03:28,149
speed performance<font color="#E5E5E5"> monitoring that</font>

86
00:03:24,370 --> 00:03:30,370
entails that so it's not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> the models</font>

87
00:03:28,150 --> 00:03:33,160
that<font color="#CCCCCC"> need</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you deploy so you know</font>

88
00:03:30,370 --> 00:03:35,049
you've trained this fancy model<font color="#E5E5E5"> but you</font>

89
00:03:33,160 --> 00:03:37,540
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to deploy this entire</font>

90
00:03:35,049 --> 00:03:39,970
workflow of pre-processing<font color="#E5E5E5"> steps and</font>

91
00:03:37,540 --> 00:03:41,560
feature engineering<font color="#E5E5E5"> and cleaning of the</font>

92
00:03:39,970 --> 00:03:43,840
data<font color="#E5E5E5"> and all of that that comes before</font>

93
00:03:41,560 --> 00:03:45,489
it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you've got to worry about</font>

94
00:03:43,840 --> 00:03:47,680
versioning which version<font color="#E5E5E5"> of this model</font>

95
00:03:45,489 --> 00:03:49,060
are<font color="#CCCCCC"> you deploying have the features</font>

96
00:03:47,680 --> 00:03:51,519
changed<font color="#E5E5E5"> since the last version</font>

97
00:03:49,060 --> 00:03:53,350
so you know<font color="#E5E5E5"> your your training pipeline</font>

98
00:03:51,519 --> 00:03:55,720
<font color="#E5E5E5">needs to talk</font><font color="#CCCCCC"> to your</font><font color="#E5E5E5"> production system</font>

99
00:03:53,350 --> 00:03:57,070
about these kind of issues<font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally</font>

100
00:03:55,720 --> 00:03:59,920
once it's in production<font color="#E5E5E5"> as I mentioned</font>

101
00:03:57,070 --> 00:04:02,170
the real world system is to predict on

102
00:03:59,920 --> 00:04:04,298
new data<font color="#E5E5E5"> but it also needs to monitor do</font>

103
00:04:02,170 --> 00:04:06,190
live evaluation it needs to know<font color="#E5E5E5"> if</font>

104
00:04:04,299 --> 00:04:07,840
<font color="#E5E5E5">things are going wrong do I need to</font>

105
00:04:06,190 --> 00:04:10,030
retrain the model is performance<font color="#CCCCCC"> dipping</font>

106
00:04:07,840 --> 00:04:12,280
and<font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to take the feedback from that</font>

107
00:04:10,030 --> 00:04:14,140
<font color="#E5E5E5">system and put it into this feedback</font>

108
00:04:12,280 --> 00:04:16,060
<font color="#E5E5E5">loop which then comes back to your</font>

109
00:04:14,140 --> 00:04:18,608
historical<font color="#CCCCCC"> din</font><font color="#E5E5E5"> streaming data at the</font>

110
00:04:16,060 --> 00:04:20,289
beginning<font color="#E5E5E5"> as well as you know that</font><font color="#CCCCCC"> data</font>

111
00:04:18,608 --> 00:04:22,299
goes back<font color="#CCCCCC"> into</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> new data science</font>

112
00:04:20,289 --> 00:04:25,380
pipeline so this workflow<font color="#E5E5E5"> is really a</font>

113
00:04:22,300 --> 00:04:28,840
loop that spans teams as well<font color="#CCCCCC"> as tools</font>

114
00:04:25,380 --> 00:04:30,610
<font color="#CCCCCC">so there's a lot of disparate formats</font>

115
00:04:28,840 --> 00:04:32,260
for data

116
00:04:30,610 --> 00:04:35,700
there's a lot of<font color="#E5E5E5"> you know and those</font>

117
00:04:32,260 --> 00:04:38,710
schemas vary with time so as a features

118
00:04:35,700 --> 00:04:41,590
<font color="#E5E5E5">input formats</font><font color="#CCCCCC"> all the data that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font>

119
00:04:38,710 --> 00:04:44,200
available may change the definition of

120
00:04:41,590 --> 00:04:47,349
<font color="#CCCCCC">that data the definition of</font><font color="#E5E5E5"> the features</font>

121
00:04:44,200 --> 00:04:48,700
may change over<font color="#CCCCCC"> time you've got a whole</font>

122
00:04:47,350 --> 00:04:51,310
<font color="#E5E5E5">bunch of different</font><font color="#CCCCCC"> tools for</font><font color="#E5E5E5"> doing your</font>

123
00:04:48,700 --> 00:04:53,770
pre-processing<font color="#E5E5E5"> it's pretty common now</font><font color="#CCCCCC"> to</font>

124
00:04:51,310 --> 00:04:56,950
have pipelines<font color="#E5E5E5"> that do that or some sort</font>

125
00:04:53,770 --> 00:04:58,810
of framework or<font color="#CCCCCC"> toolkit</font><font color="#E5E5E5"> that allows you</font>

126
00:04:56,950 --> 00:05:00,310
<font color="#E5E5E5">to build pipelines such as I could learn</font>

127
00:04:58,810 --> 00:05:02,650
spark email<font color="#E5E5E5"> Deb</font>

128
00:05:00,310 --> 00:05:05,890
<font color="#CCCCCC">tensor flow and the the read</font><font color="#E5E5E5"> transform</font>

129
00:05:02,650 --> 00:05:08,890
the pre-processing<font color="#E5E5E5"> steps and then you</font>

130
00:05:05,890 --> 00:05:12,520
perform<font color="#CCCCCC"> fast validation</font><font color="#E5E5E5"> again sort of</font>

131
00:05:08,890 --> 00:05:15,909
spanning our Python<font color="#CCCCCC"> spark</font><font color="#E5E5E5"> whether</font><font color="#CCCCCC"> that's</font>

132
00:05:12,520 --> 00:05:19,690
<font color="#CCCCCC">scholar</font><font color="#E5E5E5"> Java Python</font><font color="#CCCCCC"> our tensorflow</font><font color="#E5E5E5"> etc</font>

133
00:05:15,910 --> 00:05:22,960
and then you've got the final<font color="#CCCCCC"> model</font><font color="#E5E5E5"> so</font>

134
00:05:19,690 --> 00:05:24,550
one important sort of<font color="#E5E5E5"> thing to note</font><font color="#CCCCCC"> here</font>

135
00:05:22,960 --> 00:05:27,580
that I've<font color="#E5E5E5"> mentioned a little bit before</font>

136
00:05:24,550 --> 00:05:30,270
<font color="#E5E5E5">is that the pipeline and the data schema</font>

137
00:05:27,580 --> 00:05:33,099
<font color="#E5E5E5">itself has to</font><font color="#CCCCCC"> be completely consistent</font>

138
00:05:30,270 --> 00:05:35,950
<font color="#E5E5E5">between your training your training and</font>

139
00:05:33,100 --> 00:05:38,770
data<font color="#E5E5E5"> processing</font><font color="#CCCCCC"> step and production</font><font color="#E5E5E5"> so</font>

140
00:05:35,950 --> 00:05:40,599
it doesn't help if you if you push a

141
00:05:38,770 --> 00:05:42,909
model to production<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then the</font><font color="#E5E5E5"> data</font>

142
00:05:40,600 --> 00:05:44,979
coming in to that<font color="#E5E5E5"> to the engineers</font>

143
00:05:42,910 --> 00:05:48,280
<font color="#CCCCCC">polyketide line is not different if the</font>

144
00:05:44,979 --> 00:05:50,530
schema changes if a feature<font color="#CCCCCC"> changes or</font>

145
00:05:48,280 --> 00:05:51,849
disappears in that model<font color="#E5E5E5"> you get</font>

146
00:05:50,530 --> 00:05:53,229
complete garbage<font color="#CCCCCC"> you know garbage in</font>

147
00:05:51,850 --> 00:05:56,530
garbage out and<font color="#CCCCCC"> it's not going</font><font color="#E5E5E5"> to work</font>

148
00:05:53,229 --> 00:05:58,419
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> effectively need to freeze that</font>

149
00:05:56,530 --> 00:06:00,190
pipeline<font color="#E5E5E5"> and you need to deploy your the</font>

150
00:05:58,419 --> 00:06:04,240
the frozen version<font color="#E5E5E5"> of that pipeline into</font>

151
00:06:00,190 --> 00:06:07,030
production<font color="#CCCCCC"> so I've mentioned</font><font color="#E5E5E5"> some of the</font>

152
00:06:04,240 --> 00:06:08,979
<font color="#CCCCCC">challenges you need to bridge and manage</font>

153
00:06:07,030 --> 00:06:11,500
all of these these<font color="#CCCCCC"> different gaps</font>

154
00:06:08,979 --> 00:06:13,479
between languages<font color="#CCCCCC"> frameworks the</font>

155
00:06:11,500 --> 00:06:16,270
dependencies of<font color="#E5E5E5"> those frameworks the</font>

156
00:06:13,479 --> 00:06:18,640
versions of them for version changes the

157
00:06:16,270 --> 00:06:20,919
behavior might change you<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a</font>

158
00:06:18,640 --> 00:06:22,180
type<font color="#E5E5E5"> coupling between the training and</font>

159
00:06:20,919 --> 00:06:24,520
the<font color="#E5E5E5"> version and training and the version</font>

160
00:06:22,180 --> 00:06:26,350
<font color="#CCCCCC">in production so deployment here is it's</font>

161
00:06:24,520 --> 00:06:29,289
<font color="#CCCCCC">not really the in the sense of the</font>

162
00:06:26,350 --> 00:06:31,060
DevOps<font color="#E5E5E5"> sense of the word of deploying an</font>

163
00:06:29,289 --> 00:06:33,219
artifact but it's it's really<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact</font>

164
00:06:31,060 --> 00:06:35,110
<font color="#CCCCCC">that you're</font><font color="#E5E5E5"> deploying this pipeline so</font>

165
00:06:33,220 --> 00:06:36,669
some of the<font color="#CCCCCC"> develop solutions to</font><font color="#E5E5E5"> help</font>

166
00:06:35,110 --> 00:06:39,070
<font color="#E5E5E5">you be for</font><font color="#CCCCCC"> example containers are</font>

167
00:06:36,669 --> 00:06:41,229
becoming quite popular<font color="#CCCCCC"> for all kinds of</font>

168
00:06:39,070 --> 00:06:42,510
deployment but certainly in<font color="#E5E5E5"> data science</font>

169
00:06:41,229 --> 00:06:44,940
and machine learning

170
00:06:42,510 --> 00:06:46,789
and it's<font color="#E5E5E5"> obvious to see why you know</font>

171
00:06:44,940 --> 00:06:49,380
it's really<font color="#E5E5E5"> compelling</font><font color="#CCCCCC"> to think about</font>

172
00:06:46,790 --> 00:06:50,640
you know we can wrap up<font color="#E5E5E5"> the final</font>

173
00:06:49,380 --> 00:06:52,020
version of that model<font color="#E5E5E5"> in a in a</font>

174
00:06:50,640 --> 00:06:54,719
container and<font color="#E5E5E5"> we can deploy</font><font color="#CCCCCC"> that that</font>

175
00:06:52,020 --> 00:06:57,180
does<font color="#E5E5E5"> help with things like dependencies</font>

176
00:06:54,720 --> 00:06:58,850
<font color="#CCCCCC">inversions certainly but the</font><font color="#E5E5E5"> still means</font>

177
00:06:57,180 --> 00:07:01,650
<font color="#E5E5E5">that you have to have a workflow that</font>

178
00:06:58,850 --> 00:07:04,890
that allows that<font color="#CCCCCC"> you know and and every</font>

179
00:07:01,650 --> 00:07:06,359
time<font color="#CCCCCC"> a version</font><font color="#E5E5E5"> updates that that</font>

180
00:07:04,890 --> 00:07:09,060
<font color="#E5E5E5">workflow that component of your workflow</font>

181
00:07:06,360 --> 00:07:09,990
might change one of<font color="#E5E5E5"> the other things to</font>

182
00:07:09,060 --> 00:07:12,210
<font color="#E5E5E5">think about is the performance</font>

183
00:07:09,990 --> 00:07:16,050
characteristics<font color="#E5E5E5"> can be really variable</font>

184
00:07:12,210 --> 00:07:18,840
<font color="#E5E5E5">across these these boundaries so hit</font>

185
00:07:16,050 --> 00:07:20,370
model inferencing and scoring

186
00:07:18,840 --> 00:07:24,270
<font color="#E5E5E5">intensifier may be quite performant</font>

187
00:07:20,370 --> 00:07:26,070
<font color="#E5E5E5">whereas something in</font><font color="#CCCCCC"> our or even pythons</font>

188
00:07:24,270 --> 00:07:29,219
I could learn in some cases and

189
00:07:26,070 --> 00:07:31,590
certainly<font color="#CCCCCC"> in</font><font color="#E5E5E5"> some cases</font><font color="#CCCCCC"> inspark</font><font color="#E5E5E5"> can have</font>

190
00:07:29,220 --> 00:07:34,890
serious<font color="#CCCCCC"> performance issues</font><font color="#E5E5E5"> particularly</font>

191
00:07:31,590 --> 00:07:36,690
for<font color="#E5E5E5"> real-time inference so ideally</font><font color="#CCCCCC"> you</font>

192
00:07:34,890 --> 00:07:38,130
want to<font color="#CCCCCC"> try and homogenize this as much</font>

193
00:07:36,690 --> 00:07:41,730
<font color="#E5E5E5">as possible you want to know that</font>

194
00:07:38,130 --> 00:07:43,980
<font color="#E5E5E5">whatever you used for training and</font>

195
00:07:41,730 --> 00:07:45,660
<font color="#E5E5E5">reprocessing</font><font color="#CCCCCC"> when you put into</font>

196
00:07:43,980 --> 00:07:48,900
<font color="#E5E5E5">production you want that performance to</font>

197
00:07:45,660 --> 00:07:50,760
be predictable so in a lack of

198
00:07:48,900 --> 00:07:52,679
<font color="#CCCCCC">standardization in this space</font><font color="#E5E5E5"> leads to</font>

199
00:07:50,760 --> 00:07:55,289
custom solutions so everybody rolls

200
00:07:52,680 --> 00:07:57,540
their own framework for scoring models

201
00:07:55,290 --> 00:08:00,120
<font color="#E5E5E5">and their own model serialization</font>

202
00:07:57,540 --> 00:08:02,400
formats<font color="#E5E5E5"> their own interchange mechanisms</font>

203
00:08:00,120 --> 00:08:04,740
and this work it's all custom<font color="#CCCCCC"> where</font>

204
00:08:02,400 --> 00:08:07,590
standards do exist<font color="#E5E5E5"> and a few if</font><font color="#CCCCCC"> you do</font>

205
00:08:04,740 --> 00:08:11,340
<font color="#E5E5E5">they have serious limitations</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font>

206
00:08:07,590 --> 00:08:13,049
<font color="#CCCCCC">ends up leading to</font><font color="#E5E5E5"> more custom stuff so</font>

207
00:08:11,340 --> 00:08:15,690
you can<font color="#E5E5E5"> you end up writing custom</font>

208
00:08:13,050 --> 00:08:17,130
<font color="#E5E5E5">extensions which which essentially means</font>

209
00:08:15,690 --> 00:08:19,440
<font color="#E5E5E5">you get no benefit from the standard</font>

210
00:08:17,130 --> 00:08:22,860
<font color="#E5E5E5">because the</font><font color="#CCCCCC"> standard itself is broken</font>

211
00:08:19,440 --> 00:08:28,110
<font color="#E5E5E5">and you and the portability component of</font>

212
00:08:22,860 --> 00:08:29,700
<font color="#E5E5E5">standardization is lost so that applies</font>

213
00:08:28,110 --> 00:08:31,590
to<font color="#CCCCCC"> you know to any</font><font color="#E5E5E5"> kind of machine</font>

214
00:08:29,700 --> 00:08:34,260
learning framework but<font color="#E5E5E5"> certainly for</font>

215
00:08:31,590 --> 00:08:38,370
SPARC itself<font color="#E5E5E5"> we have a lot of additional</font>

216
00:08:34,260 --> 00:08:39,870
challenges<font color="#CCCCCC"> so those of</font><font color="#E5E5E5"> you who know a</font>

217
00:08:38,370 --> 00:08:42,450
<font color="#E5E5E5">little bit about the SPARC ml may know</font>

218
00:08:39,870 --> 00:08:45,200
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> have smart Kamel pipelines</font>

219
00:08:42,450 --> 00:08:47,720
which is a component<font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows you to</font>

220
00:08:45,200 --> 00:08:50,160
quite easily and<font color="#E5E5E5"> elegantly create</font>

221
00:08:47,720 --> 00:08:52,380
machine<font color="#E5E5E5"> learning pipelines</font><font color="#CCCCCC"> using the</font>

222
00:08:50,160 --> 00:08:54,650
data frame abstraction so you take data

223
00:08:52,380 --> 00:08:56,300
frames and you and you transform

224
00:08:54,650 --> 00:08:57,800
the columns<font color="#E5E5E5"> of those data frame of that</font>

225
00:08:56,300 --> 00:08:59,599
data frame<font color="#CCCCCC"> as you go through the</font>

226
00:08:57,800 --> 00:09:02,780
components<font color="#CCCCCC"> of your</font><font color="#E5E5E5"> pipeline so</font>

227
00:08:59,600 --> 00:09:04,700
pre-processing feature extraction<font color="#E5E5E5"> and</font>

228
00:09:02,780 --> 00:09:07,490
<font color="#E5E5E5">then you know machine</font><font color="#CCCCCC"> learning model</font>

229
00:09:04,700 --> 00:09:09,830
training<font color="#E5E5E5"> and then you end up with with</font>

230
00:09:07,490 --> 00:09:13,670
<font color="#E5E5E5">something called a pipeline model which</font>

231
00:09:09,830 --> 00:09:14,930
is this exactly<font color="#E5E5E5"> this frozen</font><font color="#CCCCCC"> version of</font>

232
00:09:13,670 --> 00:09:16,819
<font color="#E5E5E5">your machine learning pipeline</font><font color="#CCCCCC"> or work</font>

233
00:09:14,930 --> 00:09:19,280
<font color="#CCCCCC">flow and</font><font color="#E5E5E5"> you can just feed a data frame</font>

234
00:09:16,820 --> 00:09:21,860
in and you get<font color="#E5E5E5"> your result out sounds</font>

235
00:09:19,280 --> 00:09:23,480
<font color="#E5E5E5">very neat however when you try to use</font>

236
00:09:21,860 --> 00:09:25,940
<font color="#CCCCCC">that to actually</font><font color="#E5E5E5"> deploy to production</font>

237
00:09:23,480 --> 00:09:28,610
scenario you have<font color="#CCCCCC"> a tight coupling to</font>

238
00:09:25,940 --> 00:09:30,110
the spark runs on so for training that's

239
00:09:28,610 --> 00:09:32,780
great because<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to do training</font><font color="#E5E5E5"> at</font>

240
00:09:30,110 --> 00:09:35,260
scale<font color="#E5E5E5"> and spark allows you to</font><font color="#CCCCCC"> scale</font><font color="#E5E5E5"> up</font>

241
00:09:32,780 --> 00:09:37,939
<font color="#CCCCCC">both the the</font><font color="#E5E5E5"> kind of traditional ETL</font>

242
00:09:35,260 --> 00:09:39,950
<font color="#CCCCCC">data</font><font color="#E5E5E5"> processing steps sometimes using</font>

243
00:09:37,940 --> 00:09:41,930
spark sequel<font color="#E5E5E5"> of components and</font>

244
00:09:39,950 --> 00:09:46,400
leveraging<font color="#E5E5E5"> the power of the optimizer</font>

245
00:09:41,930 --> 00:09:49,400
there<font color="#E5E5E5"> but when it comes</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> to inference</font>

246
00:09:46,400 --> 00:09:52,250
<font color="#E5E5E5">and scoring in real time you have this</font>

247
00:09:49,400 --> 00:09:54,140
<font color="#E5E5E5">overhead of the data frame so just to</font>

248
00:09:52,250 --> 00:09:57,200
generate the query plan<font color="#E5E5E5"> can take more</font>

249
00:09:54,140 --> 00:10:00,350
<font color="#E5E5E5">time</font><font color="#CCCCCC"> than and then you then you have for</font>

250
00:09:57,200 --> 00:10:01,850
scoring you know you have the overhead

251
00:10:00,350 --> 00:10:03,140
<font color="#E5E5E5">of task scheduling even if you're</font>

252
00:10:01,850 --> 00:10:05,870
running<font color="#E5E5E5"> that entire</font><font color="#CCCCCC"> you're purely</font>

253
00:10:03,140 --> 00:10:08,330
locally<font color="#E5E5E5"> so really is optimized for batch</font>

254
00:10:05,870 --> 00:10:10,700
scenarios in some cases streaming micro

255
00:10:08,330 --> 00:10:14,120
batch yes it can work<font color="#E5E5E5"> but certainly if</font>

256
00:10:10,700 --> 00:10:15,710
you have<font color="#CCCCCC"> a hard</font><font color="#E5E5E5"> real time limit and that</font>

257
00:10:14,120 --> 00:10:17,510
<font color="#E5E5E5">can you're depending on the domain</font><font color="#CCCCCC"> at</font>

258
00:10:15,710 --> 00:10:19,400
you and<font color="#E5E5E5"> can range from microseconds</font>

259
00:10:17,510 --> 00:10:21,439
<font color="#E5E5E5">through - no I was thinking up to a few</font>

260
00:10:19,400 --> 00:10:23,689
<font color="#CCCCCC">hundred milliseconds will</font><font color="#E5E5E5"> have a half a</font>

261
00:10:21,440 --> 00:10:26,150
second in latency<font color="#CCCCCC"> SPARC is just not</font>

262
00:10:23,690 --> 00:10:29,450
gonna<font color="#E5E5E5"> cut it it's not fast enough so</font>

263
00:10:26,150 --> 00:10:31,490
despite this elegant<font color="#E5E5E5"> API and your high</font>

264
00:10:29,450 --> 00:10:35,000
performance training<font color="#CCCCCC"> you you can't</font>

265
00:10:31,490 --> 00:10:36,380
really use it<font color="#CCCCCC"> for scoring so in order</font><font color="#E5E5E5"> to</font>

266
00:10:35,000 --> 00:10:38,150
actually<font color="#E5E5E5"> take</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> spark pipeline that</font>

267
00:10:36,380 --> 00:10:39,380
<font color="#E5E5E5">you've now trained and</font><font color="#CCCCCC"> spend a lot of</font>

268
00:10:38,150 --> 00:10:41,900
time working on and deploy it<font color="#CCCCCC"> to</font>

269
00:10:39,380 --> 00:10:44,090
production<font color="#CCCCCC"> there you need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do</font>

270
00:10:41,900 --> 00:10:46,250
something<font color="#CCCCCC"> completely custom so SPARC</font>

271
00:10:44,090 --> 00:10:48,110
uses its own<font color="#E5E5E5"> format for exporting things</font>

272
00:10:46,250 --> 00:10:50,750
you have to<font color="#E5E5E5"> write a custom reader for</font>

273
00:10:48,110 --> 00:10:52,550
that format<font color="#CCCCCC"> learn it back into</font><font color="#E5E5E5"> it's your</font>

274
00:10:50,750 --> 00:10:54,950
own custom machine learning<font color="#CCCCCC"> library for</font>

275
00:10:52,550 --> 00:10:58,219
<font color="#CCCCCC">real-time</font><font color="#E5E5E5"> scoring or write some custom</font>

276
00:10:54,950 --> 00:10:59,540
<font color="#E5E5E5">converter from spark format into your</font>

277
00:10:58,220 --> 00:11:01,010
library<font color="#E5E5E5"> of choice whether that might be</font>

278
00:10:59,540 --> 00:11:04,390
you<font color="#E5E5E5"> know as I could learn</font><font color="#CCCCCC"> a TENS flow</font>

279
00:11:01,010 --> 00:11:06,310
and<font color="#CCCCCC"> HTH - whatever it might be</font>

280
00:11:04,390 --> 00:11:08,240
<font color="#E5E5E5">so everything is</font>

281
00:11:06,310 --> 00:11:12,170
<font color="#CCCCCC">there's no kind</font><font color="#E5E5E5"> of off the shelf</font>

282
00:11:08,240 --> 00:11:13,970
solution well it is sort<font color="#CCCCCC"> of one that's</font><font color="#E5E5E5"> a</font>

283
00:11:12,170 --> 00:11:15,430
little<font color="#E5E5E5"> bit older</font><font color="#CCCCCC"> we'll talk about one</font>

284
00:11:13,970 --> 00:11:18,950
that<font color="#E5E5E5"> is a bit yeah</font>

285
00:11:15,430 --> 00:11:22,579
so the portable format for analytics is

286
00:11:18,950 --> 00:11:25,550
a is one of the<font color="#E5E5E5"> solutions that I believe</font>

287
00:11:22,579 --> 00:11:28,459
in for this<font color="#E5E5E5"> particular problem so it's</font>

288
00:11:25,550 --> 00:11:31,579
an open<font color="#CCCCCC"> standard for</font><font color="#E5E5E5"> deploying analytic</font>

289
00:11:28,459 --> 00:11:33,439
pipelines<font color="#E5E5E5"> and in created by the data</font>

290
00:11:31,579 --> 00:11:35,410
mining group of which<font color="#CCCCCC"> IBM is a founding</font>

291
00:11:33,440 --> 00:11:37,670
member<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there many other you know</font>

292
00:11:35,410 --> 00:11:39,649
<font color="#E5E5E5">enterprises large and small involved in</font>

293
00:11:37,670 --> 00:11:42,199
that<font color="#E5E5E5"> group</font><font color="#CCCCCC"> and its really</font><font color="#E5E5E5"> trying to be</font>

294
00:11:39,649 --> 00:11:44,240
the successor to PMML<font color="#E5E5E5"> which is the</font>

295
00:11:42,200 --> 00:11:46,850
predictive<font color="#CCCCCC"> model markup language that's</font>

296
00:11:44,240 --> 00:11:49,820
arguably the only<font color="#E5E5E5"> real open standard</font>

297
00:11:46,850 --> 00:11:53,390
that<font color="#CCCCCC"> is viable</font><font color="#E5E5E5"> today PMML is an</font>

298
00:11:49,820 --> 00:11:56,149
<font color="#E5E5E5">xml-based serialization format and have</font>

299
00:11:53,390 --> 00:11:58,250
specifies the<font color="#E5E5E5"> the kind of transforms</font><font color="#CCCCCC"> and</font>

300
00:11:56,149 --> 00:12:00,019
model that<font color="#E5E5E5"> that you're modeling and</font>

301
00:11:58,250 --> 00:12:04,820
prediction that<font color="#E5E5E5"> you want to do in that</font>

302
00:12:00,019 --> 00:12:06,800
pipeline<font color="#E5E5E5"> so it's great and has</font><font color="#CCCCCC"> upped the</font>

303
00:12:04,820 --> 00:12:08,570
<font color="#CCCCCC">box support for many common</font><font color="#E5E5E5"> components</font>

304
00:12:06,800 --> 00:12:10,849
you know your logistic regressions or

305
00:12:08,570 --> 00:12:13,670
<font color="#E5E5E5">you three models and random forests and</font>

306
00:12:10,850 --> 00:12:16,190
so on some pre-processing<font color="#E5E5E5"> but it has</font>

307
00:12:13,670 --> 00:12:18,829
<font color="#E5E5E5">many limitations and that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> led to</font>

308
00:12:16,190 --> 00:12:20,420
<font color="#E5E5E5">that exact problem of custom extensions</font>

309
00:12:18,829 --> 00:12:23,239
<font color="#CCCCCC">so everyone wrote custom extension</font>

310
00:12:20,420 --> 00:12:24,860
extension<font color="#CCCCCC"> points for PMML which</font>

311
00:12:23,240 --> 00:12:28,070
<font color="#E5E5E5">completely nullified</font><font color="#CCCCCC"> the benefit of that</font>

312
00:12:24,860 --> 00:12:30,440
<font color="#E5E5E5">standard</font><font color="#CCCCCC"> so PFA was created specifically</font>

313
00:12:28,070 --> 00:12:32,839
to<font color="#CCCCCC"> address those shortcomings</font><font color="#E5E5E5"> and the</font>

314
00:12:30,440 --> 00:12:35,329
idea is that<font color="#E5E5E5"> instead of XML</font><font color="#CCCCCC"> it uses JSON</font>

315
00:12:32,839 --> 00:12:37,850
<font color="#E5E5E5">so a little bit more modern that is the</font>

316
00:12:35,329 --> 00:12:40,819
serialization format<font color="#CCCCCC"> it specifies</font>

317
00:12:37,850 --> 00:12:44,209
schemas using Avro so any<font color="#E5E5E5"> average data</font>

318
00:12:40,820 --> 00:12:47,959
type you can use which effectively

319
00:12:44,209 --> 00:12:49,849
covers anything you care about and<font color="#E5E5E5"> then</font>

320
00:12:47,959 --> 00:12:52,399
<font color="#E5E5E5">it encodes the set of functions or</font>

321
00:12:49,850 --> 00:12:54,880
actions that<font color="#E5E5E5"> you perform on you input to</font>

322
00:12:52,399 --> 00:12:57,050
generate an output<font color="#E5E5E5"> so you can think of</font>

323
00:12:54,880 --> 00:12:59,750
<font color="#E5E5E5">this pipeline as a set of these</font>

324
00:12:57,050 --> 00:13:02,599
transformation nodes and PFA allows you

325
00:12:59,750 --> 00:13:05,300
to specify in a kind of mini mini

326
00:13:02,600 --> 00:13:07,600
functional mathematical language<font color="#E5E5E5"> what</font>

327
00:13:05,300 --> 00:13:11,630
you do on the input to create the output

328
00:13:07,600 --> 00:13:13,490
and of course given a single set of PFA

329
00:13:11,630 --> 00:13:15,170
to do one transformation node you can

330
00:13:13,490 --> 00:13:16,990
<font color="#E5E5E5">fairly</font><font color="#CCCCCC"> easily combine those nodes</font>

331
00:13:15,170 --> 00:13:18,699
together<font color="#E5E5E5"> into one</font>

332
00:13:16,990 --> 00:13:21,330
<font color="#E5E5E5">stick document</font><font color="#CCCCCC"> it's called a PFA</font>

333
00:13:18,700 --> 00:13:24,339
document<font color="#E5E5E5"> to specify your entire pipeline</font>

334
00:13:21,330 --> 00:13:26,440
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> type and function system means</font>

335
00:13:24,339 --> 00:13:28,810
that<font color="#E5E5E5"> once you've generated a valid key</font>

336
00:13:26,440 --> 00:13:30,910
<font color="#E5E5E5">affair document it can be effectively</font>

337
00:13:28,810 --> 00:13:33,250
<font color="#CCCCCC">type checked at runtime so that you know</font>

338
00:13:30,910 --> 00:13:35,920
<font color="#E5E5E5">that there's not going to be any any</font>

339
00:13:33,250 --> 00:13:39,339
strange kind of<font color="#E5E5E5"> runtime errors so it</font>

340
00:13:35,920 --> 00:13:40,870
you've got type safety<font color="#CCCCCC"> and it once</font>

341
00:13:39,339 --> 00:13:44,350
you've got a<font color="#E5E5E5"> valid</font><font color="#CCCCCC"> PF air document you</font>

342
00:13:40,870 --> 00:13:47,380
can run it on<font color="#CCCCCC"> any compliant PFA scoring</font>

343
00:13:44,350 --> 00:13:48,730
engine so you have true cross platform

344
00:13:47,380 --> 00:13:50,680
across framework<font color="#E5E5E5"> across language</font>

345
00:13:48,730 --> 00:13:52,300
portability<font color="#E5E5E5"> their reference</font>

346
00:13:50,680 --> 00:13:55,750
implementations available in<font color="#E5E5E5"> in Java</font>

347
00:13:52,300 --> 00:13:58,599
<font color="#E5E5E5">Python are you know typically for</font>

348
00:13:55,750 --> 00:13:59,920
producing<font color="#CCCCCC"> PFO documents</font><font color="#E5E5E5"> or model</font>

349
00:13:58,600 --> 00:14:01,930
versions of models here a little

350
00:13:59,920 --> 00:14:04,449
serialize model you<font color="#E5E5E5"> might be using yeah</font>

351
00:14:01,930 --> 00:14:05,349
<font color="#E5E5E5">apart</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the hard to do that for</font>

352
00:14:04,450 --> 00:14:08,260
scoring you're probably going<font color="#E5E5E5"> to be</font>

353
00:14:05,350 --> 00:14:09,580
<font color="#E5E5E5">using Java or yeah if you really want</font>

354
00:14:08,260 --> 00:14:11,830
performance maybe you're gonna write

355
00:14:09,580 --> 00:14:14,560
<font color="#CCCCCC">something in C++</font><font color="#E5E5E5"> so or go or something</font>

356
00:14:11,830 --> 00:14:17,860
like that so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> what it looks like</font>

357
00:14:14,560 --> 00:14:19,989
and yeah the the<font color="#E5E5E5"> JSON is it's not really</font>

358
00:14:17,860 --> 00:14:22,120
meant<font color="#E5E5E5"> for</font><font color="#CCCCCC"> human readability necessarily</font>

359
00:14:19,990 --> 00:14:27,459
it makes it easy for machines to

360
00:14:22,120 --> 00:14:28,899
<font color="#E5E5E5">generate so it's a bit verbose</font><font color="#CCCCCC"> but here</font>

361
00:14:27,459 --> 00:14:32,260
is you know<font color="#E5E5E5"> for example logistic</font>

362
00:14:28,899 --> 00:14:35,079
regression so we take in a double array

363
00:14:32,260 --> 00:14:38,319
which<font color="#CCCCCC"> is just a input</font><font color="#E5E5E5"> vector and we</font>

364
00:14:35,079 --> 00:14:41,529
output a predicted class<font color="#E5E5E5"> so those are</font>

365
00:14:38,320 --> 00:14:43,420
just a<font color="#E5E5E5"> broad types</font><font color="#CCCCCC"> and then the core</font>

366
00:14:41,529 --> 00:14:46,810
function here is<font color="#CCCCCC"> is what we call the</font>

367
00:14:43,420 --> 00:14:48,880
action<font color="#CCCCCC"> and that just specifies a set of</font>

368
00:14:46,810 --> 00:14:52,779
functions<font color="#E5E5E5"> to apply on the input to</font>

369
00:14:48,880 --> 00:14:54,839
<font color="#E5E5E5">rather the output so there are obviously</font>

370
00:14:52,779 --> 00:14:57,310
a<font color="#E5E5E5"> lot of built-in</font><font color="#CCCCCC"> functions within PFF</font>

371
00:14:54,839 --> 00:15:00,130
<font color="#CCCCCC">you can write you can write your own</font>

372
00:14:57,310 --> 00:15:01,569
user-defined functions using any of the

373
00:15:00,130 --> 00:15:03,850
<font color="#E5E5E5">built-in functionality but you know</font>

374
00:15:01,570 --> 00:15:05,890
there's some kind<font color="#E5E5E5"> of handy stuff for</font>

375
00:15:03,850 --> 00:15:08,560
your typical models including linear

376
00:15:05,890 --> 00:15:11,529
<font color="#E5E5E5">models so you just do a linear you call</font>

377
00:15:08,560 --> 00:15:14,979
the linear regression function which

378
00:15:11,529 --> 00:15:17,320
<font color="#E5E5E5">takes an input</font><font color="#CCCCCC"> vector</font><font color="#E5E5E5"> and a model cell</font>

379
00:15:14,980 --> 00:15:19,480
<font color="#E5E5E5">now don't have that much time</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> into</font>

380
00:15:17,320 --> 00:15:22,690
cells but a cell in<font color="#CCCCCC"> PFA is</font><font color="#E5E5E5"> just a way</font><font color="#CCCCCC"> of</font>

381
00:15:19,480 --> 00:15:24,370
<font color="#E5E5E5">specifying stored data so it'll be</font>

382
00:15:22,690 --> 00:15:27,940
typically<font color="#E5E5E5"> the coefficients of your model</font>

383
00:15:24,370 --> 00:15:29,910
<font color="#E5E5E5">who any your state that your pipeline</font>

384
00:15:27,940 --> 00:15:33,180
needs in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to do its work</font>

385
00:15:29,910 --> 00:15:36,810
be stored in these kind of immutable

386
00:15:33,180 --> 00:15:38,189
<font color="#E5E5E5">read-only cells so this function takes</font>

387
00:15:36,810 --> 00:15:40,410
<font color="#E5E5E5">the cell which is the</font><font color="#CCCCCC"> model which</font><font color="#E5E5E5"> is</font>

388
00:15:38,190 --> 00:15:42,720
effectively<font color="#CCCCCC"> the set of coefficients</font><font color="#E5E5E5"> does</font>

389
00:15:40,410 --> 00:15:45,120
a matrix multiplication<font color="#CCCCCC"> and you know</font>

390
00:15:42,720 --> 00:15:48,540
softbank's<font color="#CCCCCC"> linked odd Max and you're</font>

391
00:15:45,120 --> 00:15:50,010
done so you know<font color="#CCCCCC"> despite being a fairly</font>

392
00:15:48,540 --> 00:15:52,140
verbose<font color="#E5E5E5"> you know you can see that the</font>

393
00:15:50,010 --> 00:15:53,939
the<font color="#CCCCCC"> actually application</font><font color="#E5E5E5"> of it is very</font>

394
00:15:52,140 --> 00:15:56,340
<font color="#E5E5E5">simple it's just it's just it's</font><font color="#CCCCCC"> just</font>

395
00:15:53,940 --> 00:16:02,160
doing<font color="#E5E5E5"> the math</font><font color="#CCCCCC"> and specifying</font><font color="#E5E5E5"> that in in</font>

396
00:15:56,340 --> 00:16:05,640
this kind of<font color="#CCCCCC"> dsl</font><font color="#E5E5E5"> so as</font><font color="#CCCCCC"> i mentioned they</font>

397
00:16:02,160 --> 00:16:07,410
are there are reference implementations

398
00:16:05,640 --> 00:16:09,360
for<font color="#CCCCCC"> PF</font><font color="#E5E5E5"> air engines and there is one in</font>

399
00:16:07,410 --> 00:16:11,339
java<font color="#E5E5E5"> but it doesn't really allow you to</font>

400
00:16:09,360 --> 00:16:13,590
<font color="#E5E5E5">write PF air documents</font><font color="#CCCCCC"> or create you</font>

401
00:16:11,340 --> 00:16:15,660
know<font color="#E5E5E5"> create that export from from</font>

402
00:16:13,590 --> 00:16:17,190
something into<font color="#E5E5E5"> a</font><font color="#CCCCCC"> PFO document and this</font>

403
00:16:15,660 --> 00:16:20,160
is what i've created at the moment for

404
00:16:17,190 --> 00:16:22,020
<font color="#CCCCCC">spark</font><font color="#E5E5E5"> ml and we call it aardvark</font>

405
00:16:20,160 --> 00:16:24,540
I'm from<font color="#E5E5E5"> South Africa</font><font color="#CCCCCC"> so you may know</font>

406
00:16:22,020 --> 00:16:27,900
that<font color="#E5E5E5"> an aardvark is is something called</font>

407
00:16:24,540 --> 00:16:31,680
an earth Pig<font color="#CCCCCC"> it's like an anteater</font><font color="#E5E5E5"> so</font>

408
00:16:27,900 --> 00:16:33,720
that's that's where the name comes from

409
00:16:31,680 --> 00:16:35,370
but this<font color="#CCCCCC"> your the the core that is a</font>

410
00:16:33,720 --> 00:16:38,430
Scala DSL which you can see on the right

411
00:16:35,370 --> 00:16:41,340
<font color="#CCCCCC">here for creating PFA</font><font color="#E5E5E5"> and then spark hot</font>

412
00:16:38,430 --> 00:16:43,229
walk spark ml is<font color="#CCCCCC"> the user</font><font color="#E5E5E5"> that same</font><font color="#CCCCCC"> DSL</font>

413
00:16:41,340 --> 00:16:46,620
to export to your pipelines to spark

414
00:16:43,230 --> 00:16:50,760
<font color="#E5E5E5">we've got and you can</font><font color="#CCCCCC"> see it you know if</font>

415
00:16:46,620 --> 00:16:52,590
you compare the Scala code to<font color="#E5E5E5"> to the</font>

416
00:16:50,760 --> 00:16:55,050
<font color="#E5E5E5">JSON that's kind of generating that</font>

417
00:16:52,590 --> 00:16:56,490
<font color="#CCCCCC">exact a so so you know</font><font color="#E5E5E5"> you've got an</font>

418
00:16:55,050 --> 00:16:59,280
<font color="#CCCCCC">input you</font><font color="#E5E5E5"> define your cell with your</font>

419
00:16:56,490 --> 00:17:02,550
data and then<font color="#CCCCCC"> you provide you just</font>

420
00:16:59,280 --> 00:17:04,889
specify<font color="#E5E5E5"> your action with with with</font><font color="#CCCCCC"> this</font>

421
00:17:02,550 --> 00:17:08,609
<font color="#CCCCCC">caller DSL</font><font color="#E5E5E5"> so the idea is to</font><font color="#CCCCCC"> try and</font>

422
00:17:04,890 --> 00:17:11,340
<font color="#E5E5E5">make</font><font color="#CCCCCC"> it as as natural as possible and as</font>

423
00:17:08,609 --> 00:17:13,589
<font color="#CCCCCC">typesafe</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible you know to do that</font>

424
00:17:11,339 --> 00:17:16,409
<font color="#CCCCCC">and you're allowing a dreadful WestEd to</font>

425
00:17:13,589 --> 00:17:19,470
do some auto generation of case class

426
00:17:16,410 --> 00:17:21,950
magic and and<font color="#CCCCCC"> you know automatically</font>

427
00:17:19,470 --> 00:17:25,740
<font color="#E5E5E5">extract the classes the types</font><font color="#CCCCCC"> into ever</font>

428
00:17:21,950 --> 00:17:27,480
times so in terms<font color="#E5E5E5"> of coverage we have</font>

429
00:17:25,740 --> 00:17:29,190
full pipeline support<font color="#E5E5E5"> most feature</font>

430
00:17:27,480 --> 00:17:30,990
<font color="#E5E5E5">transformers almost all the machine</font>

431
00:17:29,190 --> 00:17:33,180
<font color="#E5E5E5">learning models in spark there are some</font>

432
00:17:30,990 --> 00:17:35,580
major missing features for example<font color="#E5E5E5"> is no</font>

433
00:17:33,180 --> 00:17:37,730
generic vector in PFA so you<font color="#CCCCCC"> you'd have</font>

434
00:17:35,580 --> 00:17:39,870
<font color="#E5E5E5">to</font><font color="#CCCCCC"> a dense vector a response vector and</font>

435
00:17:37,730 --> 00:17:41,430
really you<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to have a generic</font>

436
00:17:39,870 --> 00:17:43,290
<font color="#E5E5E5">one that can mix</font><font color="#CCCCCC"> or match</font>

437
00:17:41,430 --> 00:17:46,970
that because it gets<font color="#CCCCCC"> very cumbersome to</font>

438
00:17:43,290 --> 00:17:50,970
<font color="#E5E5E5">try and deal with both so very briefly</font>

439
00:17:46,970 --> 00:17:52,110
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> ypfa I mean</font><font color="#E5E5E5"> are there other you</font>

440
00:17:50,970 --> 00:17:54,810
know one or something<font color="#E5E5E5"> else</font><font color="#CCCCCC"> or the other</font>

441
00:17:52,110 --> 00:17:56,669
alternatives<font color="#CCCCCC"> Emily is a is a good</font>

442
00:17:54,810 --> 00:17:58,740
<font color="#E5E5E5">alternative</font><font color="#CCCCCC"> specifically</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> spark</font><font color="#E5E5E5"> and</font>

443
00:17:56,670 --> 00:18:00,750
more recently for for<font color="#CCCCCC"> psych Edwin and</font>

444
00:17:58,740 --> 00:18:04,170
tensorflow<font color="#E5E5E5"> it's completely written in</font>

445
00:18:00,750 --> 00:18:07,290
Scala<font color="#CCCCCC"> which means that you know</font><font color="#E5E5E5"> if it if</font>

446
00:18:04,170 --> 00:18:08,640
you want to to do anything<font color="#CCCCCC"> any custom</font>

447
00:18:07,290 --> 00:18:10,200
export of your own model you have<font color="#E5E5E5"> to</font>

448
00:18:08,640 --> 00:18:11,760
know<font color="#CCCCCC"> Scala which which may or may not be</font>

449
00:18:10,200 --> 00:18:13,440
a problem<font color="#E5E5E5"> but there are many many data</font>

450
00:18:11,760 --> 00:18:15,270
scientists<font color="#CCCCCC"> and machine learning</font>

451
00:18:13,440 --> 00:18:20,250
engineers may not know Scala they may be

452
00:18:15,270 --> 00:18:21,389
<font color="#E5E5E5">working in Python</font><font color="#CCCCCC"> or C so it's an open</font>

453
00:18:20,250 --> 00:18:23,940
format in the sense that<font color="#CCCCCC"> it's open</font>

454
00:18:21,390 --> 00:18:25,320
source<font color="#CCCCCC"> but it's not a standard</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font>

455
00:18:23,940 --> 00:18:27,060
<font color="#CCCCCC">is a really</font><font color="#E5E5E5"> led</font><font color="#CCCCCC"> to a few issues</font><font color="#E5E5E5"> in the</font>

456
00:18:25,320 --> 00:18:30,840
project<font color="#E5E5E5"> performance</font><font color="#CCCCCC"> is very</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> and</font>

457
00:18:27,060 --> 00:18:33,080
coverage is very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it really has</font>

458
00:18:30,840 --> 00:18:37,409
no doesn't have<font color="#CCCCCC"> this concept of</font>

459
00:18:33,080 --> 00:18:39,360
<font color="#E5E5E5">independence from across frameworks</font><font color="#CCCCCC"> all</font>

460
00:18:37,410 --> 00:18:41,730
<font color="#CCCCCC">versions so</font><font color="#E5E5E5"> you have a tight coupling</font>

461
00:18:39,360 --> 00:18:43,409
between the version of spark that<font color="#E5E5E5"> you</font>

462
00:18:41,730 --> 00:18:45,600
<font color="#CCCCCC">used to generate the model and export to</font>

463
00:18:43,410 --> 00:18:47,400
<font color="#E5E5E5">Emily and the Emily version you run in</font>

464
00:18:45,600 --> 00:18:48,750
production<font color="#CCCCCC"> which means every</font><font color="#E5E5E5"> time you</font>

465
00:18:47,400 --> 00:18:50,610
update you if you version<font color="#CCCCCC"> you have to</font>

466
00:18:48,750 --> 00:18:52,140
change the version<font color="#CCCCCC"> of spark and</font><font color="#E5E5E5"> him leap</font>

467
00:18:50,610 --> 00:18:54,689
in your<font color="#E5E5E5"> production system which is not</font>

468
00:18:52,140 --> 00:18:56,400
ideal<font color="#E5E5E5"> and recently the open neural</font>

469
00:18:54,690 --> 00:18:59,180
network<font color="#E5E5E5"> exchange was announced or in</font>

470
00:18:56,400 --> 00:19:01,440
<font color="#E5E5E5">Linux it's a protocol buffer</font>

471
00:18:59,180 --> 00:19:04,380
serialization format that<font color="#E5E5E5"> also specifies</font>

472
00:19:01,440 --> 00:19:06,510
the the set of<font color="#E5E5E5"> actions or functions or</font>

473
00:19:04,380 --> 00:19:08,850
operators that are<font color="#E5E5E5"> applied</font><font color="#CCCCCC"> in your</font><font color="#E5E5E5"> graph</font>

474
00:19:06,510 --> 00:19:10,530
your neural network<font color="#CCCCCC"> graph</font><font color="#E5E5E5"> it's quite</font>

475
00:19:08,850 --> 00:19:12,030
specific<font color="#CCCCCC"> to deep learning</font><font color="#E5E5E5"> at this stage</font>

476
00:19:10,530 --> 00:19:13,800
but in<font color="#E5E5E5"> that sense it's</font><font color="#CCCCCC"> very similar to</font>

477
00:19:12,030 --> 00:19:15,180
<font color="#CCCCCC">peer fair</font><font color="#E5E5E5"> and it appears to</font><font color="#CCCCCC"> be a great</font>

478
00:19:13,800 --> 00:19:17,399
standard for deep learning but as I

479
00:19:15,180 --> 00:19:18,750
mentioned<font color="#CCCCCC"> it</font><font color="#E5E5E5"> has pretty poor</font><font color="#CCCCCC"> support for</font>

480
00:19:17,400 --> 00:19:21,060
<font color="#E5E5E5">your traditional machine learning</font><font color="#CCCCCC"> or</font>

481
00:19:18,750 --> 00:19:23,280
analytic pipelines so tree based models

482
00:19:21,060 --> 00:19:24,629
<font color="#E5E5E5">string processing control flow the</font>

483
00:19:23,280 --> 00:19:27,800
intermediate variables are not really

484
00:19:24,630 --> 00:19:31,110
there but this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> something to</font><font color="#CCCCCC"> watch</font>

485
00:19:27,800 --> 00:19:33,020
so in summary PFA<font color="#E5E5E5"> I believe</font><font color="#CCCCCC"> provides a</font>

486
00:19:31,110 --> 00:19:35,100
<font color="#CCCCCC">open</font><font color="#E5E5E5"> standard for machine learning</font>

487
00:19:33,020 --> 00:19:38,129
pipeline deployment and analytic

488
00:19:35,100 --> 00:19:40,159
artifact deployment<font color="#CCCCCC"> it provides true</font>

489
00:19:38,130 --> 00:19:44,520
portability<font color="#E5E5E5"> across languages frameworks</font>

490
00:19:40,160 --> 00:19:46,290
<font color="#E5E5E5">runtimes</font><font color="#CCCCCC"> and versions and it provides</font>

491
00:19:44,520 --> 00:19:47,220
you<font color="#E5E5E5"> an exit execution and scoring</font>

492
00:19:46,290 --> 00:19:49,500
environment that is completely

493
00:19:47,220 --> 00:19:51,750
independent<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the producer so you can</font>

494
00:19:49,500 --> 00:19:53,130
whether you whatever language<font color="#E5E5E5"> or</font>

495
00:19:51,750 --> 00:19:53,840
framework you<font color="#E5E5E5"> use to produce your model</font>

496
00:19:53,130 --> 00:19:57,020
you

497
00:19:53,840 --> 00:19:58,908
keep the same scoring run time and<font color="#E5E5E5"> not</font>

498
00:19:57,020 --> 00:20:01,250
have to worry<font color="#E5E5E5"> about</font><font color="#CCCCCC"> version changes</font>

499
00:19:58,909 --> 00:20:02,690
upgrades and<font color="#E5E5E5"> so on so it was a</font>

500
00:20:01,250 --> 00:20:05,210
significant pain point for<font color="#E5E5E5"> the spark in</font>

501
00:20:02,690 --> 00:20:07,100
our ecosystem<font color="#E5E5E5"> because it's as mentioned</font>

502
00:20:05,210 --> 00:20:08,720
previously it's very difficult if<font color="#CCCCCC"> not</font>

503
00:20:07,100 --> 00:20:11,418
close to<font color="#CCCCCC"> impossible to actually</font><font color="#E5E5E5"> deploy</font>

504
00:20:08,720 --> 00:20:13,400
<font color="#CCCCCC">the spark in</font><font color="#E5E5E5"> our models</font><font color="#CCCCCC"> currently and</font>

505
00:20:11,419 --> 00:20:16,390
also<font color="#E5E5E5"> benefits the wider ecosystem so</font>

506
00:20:13,400 --> 00:20:19,429
those that are using<font color="#E5E5E5"> PMML to do export</font>

507
00:20:16,390 --> 00:20:21,440
<font color="#E5E5E5">experience like GBM scikit-learn are can</font>

508
00:20:19,429 --> 00:20:24,289
<font color="#CCCCCC">actually your kind of graduate at some</font>

509
00:20:21,440 --> 00:20:26,510
point to<font color="#CCCCCC"> the effect but there are risks</font>

510
00:20:24,289 --> 00:20:28,549
<font color="#CCCCCC">PFA is</font><font color="#E5E5E5"> a young standard it's still in</font>

511
00:20:26,510 --> 00:20:31,460
you're still developing<font color="#CCCCCC"> the performance</font>

512
00:20:28,549 --> 00:20:33,080
is<font color="#CCCCCC"> not tested had any scale</font><font color="#E5E5E5"> in</font>

513
00:20:31,460 --> 00:20:35,539
production<font color="#E5E5E5"> that is something</font><font color="#CCCCCC"> that we are</font>

514
00:20:33,080 --> 00:20:37,549
working<font color="#E5E5E5"> on what about deep learning is</font>

515
00:20:35,539 --> 00:20:38,330
very<font color="#E5E5E5"> hot right now and and everyone</font>

516
00:20:37,549 --> 00:20:40,639
wants to<font color="#CCCCCC"> know</font><font color="#E5E5E5"> about that</font>

517
00:20:38,330 --> 00:20:42,860
<font color="#E5E5E5">come here Faye</font><font color="#CCCCCC"> be a contender</font><font color="#E5E5E5"> there or</font>

518
00:20:40,640 --> 00:20:44,779
is<font color="#E5E5E5"> it just not suitable yeah and</font>

519
00:20:42,860 --> 00:20:46,520
understand it moves<font color="#E5E5E5"> slowly so if you</font>

520
00:20:44,779 --> 00:20:48,289
want<font color="#E5E5E5"> to change anything you</font><font color="#CCCCCC"> have to go</font>

521
00:20:46,520 --> 00:20:49,850
through<font color="#CCCCCC"> the Standards Committee so</font><font color="#E5E5E5"> that</font>

522
00:20:48,289 --> 00:20:51,770
comes with<font color="#CCCCCC"> benefits the standardization</font>

523
00:20:49,850 --> 00:20:54,080
of<font color="#E5E5E5"> standardization but you know there</font>

524
00:20:51,770 --> 00:20:58,220
are<font color="#CCCCCC"> just some downsides around</font><font color="#E5E5E5"> open</font>

525
00:20:54,080 --> 00:21:01,250
standards<font color="#CCCCCC"> too</font><font color="#E5E5E5"> so to wrap up the future</font>

526
00:20:58,220 --> 00:21:03,980
<font color="#E5E5E5">directions this is not a open source yet</font>

527
00:21:01,250 --> 00:21:06,649
but we are<font color="#CCCCCC"> working on</font><font color="#E5E5E5"> getting it to</font><font color="#CCCCCC"> the</font>

528
00:21:03,980 --> 00:21:08,450
state that<font color="#CCCCCC"> it can be can</font><font color="#E5E5E5"> be released</font>

529
00:21:06,649 --> 00:21:10,219
starting with<font color="#E5E5E5"> sparking our pipelines and</font>

530
00:21:08,450 --> 00:21:12,320
<font color="#E5E5E5">then later looking to add support for</font>

531
00:21:10,220 --> 00:21:15,200
<font color="#E5E5E5">scikit-learn and extra boost</font><font color="#CCCCCC"> light</font><font color="#E5E5E5"> CBM</font>

532
00:21:12,320 --> 00:21:17,330
and<font color="#E5E5E5"> some of these other</font><font color="#CCCCCC"> other projects</font>

533
00:21:15,200 --> 00:21:18,380
are already exists in the<font color="#E5E5E5"> hadrian</font>

534
00:21:17,330 --> 00:21:21,580
project<font color="#E5E5E5"> there's a link there in</font><font color="#CCCCCC"> the</font>

535
00:21:18,380 --> 00:21:25,100
slides<font color="#E5E5E5"> and so many are models and</font>

536
00:21:21,580 --> 00:21:26,720
<font color="#CCCCCC">functionality already is</font><font color="#E5E5E5"> exportable</font><font color="#CCCCCC"> we</font>

537
00:21:25,100 --> 00:21:29,990
<font color="#CCCCCC">were</font><font color="#E5E5E5"> busy perform doing performance</font>

538
00:21:26,720 --> 00:21:32,000
testing versus<font color="#E5E5E5"> spark</font><font color="#CCCCCC"> versus M leap</font><font color="#E5E5E5"> and</font>

539
00:21:29,990 --> 00:21:33,320
<font color="#CCCCCC">transit kind of tease out where the</font>

540
00:21:32,000 --> 00:21:37,309
performance issues are of which<font color="#CCCCCC"> there</font>

541
00:21:33,320 --> 00:21:39,320
<font color="#E5E5E5">are there are</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> and there are as a as</font>

542
00:21:37,309 --> 00:21:41,720
I mentioned earlier<font color="#CCCCCC"> there are a lot of</font>

543
00:21:39,320 --> 00:21:43,399
gaps<font color="#CCCCCC"> even in the PF air standard so one</font>

544
00:21:41,720 --> 00:21:47,270
<font color="#CCCCCC">of the main ones is a support for</font>

545
00:21:43,399 --> 00:21:50,178
generic<font color="#CCCCCC"> tensile vector and performance</font>

546
00:21:47,270 --> 00:21:52,760
improvements to the scoring<font color="#E5E5E5"> engine and</font>

547
00:21:50,179 --> 00:21:54,830
then finally we're looking<font color="#CCCCCC"> at can you</font>

548
00:21:52,760 --> 00:21:56,960
can one use PFF for deep learning

549
00:21:54,830 --> 00:21:58,820
it requires all<font color="#CCCCCC"> the you</font><font color="#E5E5E5"> know this</font>

550
00:21:56,960 --> 00:22:03,350
generic tensor schema<font color="#CCCCCC"> it</font><font color="#E5E5E5"> requires your</font>

551
00:21:58,820 --> 00:22:04,668
GPU operators to be partying and all the

552
00:22:03,350 --> 00:22:06,219
deep learning<font color="#E5E5E5"> specific operators to be</font>

553
00:22:04,669 --> 00:22:07,870
built in but

554
00:22:06,220 --> 00:22:09,340
that<font color="#E5E5E5"> this is something</font><font color="#CCCCCC"> that that</font>

555
00:22:07,870 --> 00:22:12,189
wouldn't<font color="#E5E5E5"> be too difficult</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's</font>

556
00:22:09,340 --> 00:22:13,809
that's<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we're so thanks very much to</font>

557
00:22:12,190 --> 00:22:31,480
<font color="#CCCCCC">some links and</font><font color="#E5E5E5"> references in the slides</font>

558
00:22:13,809 --> 00:22:35,129
which are<font color="#CCCCCC"> online questions thank you</font>

559
00:22:31,480 --> 00:22:38,890
<font color="#CCCCCC">very</font><font color="#E5E5E5"> much that was</font><font color="#CCCCCC"> very interesting I</font>

560
00:22:35,130 --> 00:22:40,960
understand<font color="#E5E5E5"> that the purpose</font><font color="#CCCCCC"> of the</font>

561
00:22:38,890 --> 00:22:43,630
standard is to facilitate<font color="#E5E5E5"> this link</font>

562
00:22:40,960 --> 00:22:45,360
between R&D<font color="#CCCCCC"> at the development of the</font>

563
00:22:43,630 --> 00:22:50,110
models<font color="#E5E5E5"> and then drilling in production</font>

564
00:22:45,360 --> 00:22:51,428
one of my<font color="#E5E5E5"> concerns is supposedly this</font>

565
00:22:50,110 --> 00:22:52,990
means that the framework used for

566
00:22:51,429 --> 00:22:55,240
development<font color="#E5E5E5"> of the model and</font><font color="#CCCCCC"> then for</font>

567
00:22:52,990 --> 00:22:58,210
the inference<font color="#E5E5E5"> might be different right</font>

568
00:22:55,240 --> 00:22:59,350
so one concern I have is when the<font color="#CCCCCC"> actual</font>

569
00:22:58,210 --> 00:23:00,429
<font color="#CCCCCC">implementation of</font><font color="#E5E5E5"> the models is</font>

570
00:22:59,350 --> 00:23:04,980
different it<font color="#CCCCCC"> doesn't mean that</font><font color="#E5E5E5"> we're</font>

571
00:23:00,429 --> 00:23:07,240
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to get the same results right so</font>

572
00:23:04,980 --> 00:23:08,950
probably that's<font color="#E5E5E5"> not the role of the the</font>

573
00:23:07,240 --> 00:23:13,679
<font color="#CCCCCC">standard actually to solve</font><font color="#E5E5E5"> but do you</font>

574
00:23:08,950 --> 00:23:13,679
think<font color="#CCCCCC"> that</font><font color="#E5E5E5"> puts kind of a limitation on</font>

575
00:23:15,720 --> 00:23:20,559
on and that the practicalities<font color="#CCCCCC"> of</font>

576
00:23:18,340 --> 00:23:22,480
actually having<font color="#E5E5E5"> this separation</font><font color="#CCCCCC"> you know</font>

577
00:23:20,559 --> 00:23:25,240
developing a model<font color="#E5E5E5"> in one frame work and</font>

578
00:23:22,480 --> 00:23:28,960
<font color="#E5E5E5">running it in another yeah I think it's</font>

579
00:23:25,240 --> 00:23:33,340
a good question<font color="#CCCCCC"> and</font><font color="#E5E5E5"> deliver one here</font>

580
00:23:28,960 --> 00:23:36,940
here the question so<font color="#CCCCCC"> there obviously</font>

581
00:23:33,340 --> 00:23:38,860
benefits<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to either approach so on the</font>

582
00:23:36,940 --> 00:23:41,980
one<font color="#E5E5E5"> hand you've got this this kind of</font>

583
00:23:38,860 --> 00:23:43,959
<font color="#E5E5E5">multiplicity and plethora of producers</font>

584
00:23:41,980 --> 00:23:46,150
we call them producers in this<font color="#E5E5E5"> in this</font>

585
00:23:43,960 --> 00:23:48,039
<font color="#E5E5E5">kind of scenario</font><font color="#CCCCCC"> they produce</font><font color="#E5E5E5"> the model</font>

586
00:23:46,150 --> 00:23:51,130
<font color="#E5E5E5">and in some cases you</font><font color="#CCCCCC"> can use that same</font>

587
00:23:48,039 --> 00:23:52,990
<font color="#E5E5E5">producer to to school so yeah generally</font>

588
00:23:51,130 --> 00:23:54,100
<font color="#E5E5E5">scoring in</font><font color="#CCCCCC"> four examples I could learn</font>

589
00:23:52,990 --> 00:23:56,559
is really<font color="#CCCCCC"> fast</font>

590
00:23:54,100 --> 00:23:59,439
scoring intensifier can be typically

591
00:23:56,559 --> 00:24:01,090
quite fast<font color="#E5E5E5"> and yeah and with and some of</font>

592
00:23:59,440 --> 00:24:03,070
these tricks of freezing<font color="#E5E5E5"> the graph and</font>

593
00:24:01,090 --> 00:24:05,850
make it more efficient at inference in

594
00:24:03,070 --> 00:24:08,379
time<font color="#CCCCCC"> it can be</font><font color="#E5E5E5"> quite quick scoring an</font><font color="#CCCCCC"> R</font>

595
00:24:05,850 --> 00:24:13,030
<font color="#E5E5E5">for a large model for</font><font color="#CCCCCC"> example may not be</font>

596
00:24:08,380 --> 00:24:15,070
<font color="#E5E5E5">fast so you know on that</font><font color="#CCCCCC"> hat on that</font>

597
00:24:13,030 --> 00:24:17,350
<font color="#E5E5E5">side</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it it's it's much much easier to</font>

598
00:24:15,070 --> 00:24:19,580
<font color="#CCCCCC">just say</font><font color="#E5E5E5"> okay we'll</font><font color="#CCCCCC"> use the same</font>

599
00:24:17,350 --> 00:24:21,290
producer to score the model and you

600
00:24:19,580 --> 00:24:24,530
you can solve some<font color="#E5E5E5"> of the pain points of</font>

601
00:24:21,290 --> 00:24:26,810
production housing it's you know things

602
00:24:24,530 --> 00:24:29,170
like the version<font color="#CCCCCC"> versioning</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> all and</font>

603
00:24:26,810 --> 00:24:32,060
and performance and so<font color="#E5E5E5"> on</font>

604
00:24:29,170 --> 00:24:33,560
for example using docker containers and

605
00:24:32,060 --> 00:24:35,780
there's a few projects<font color="#CCCCCC"> that'll do that</font>

606
00:24:33,560 --> 00:24:37,690
where you<font color="#E5E5E5"> provide a kind of serving</font>

607
00:24:35,780 --> 00:24:40,070
layer and underneath are you know

608
00:24:37,690 --> 00:24:42,500
independent<font color="#E5E5E5"> docker containers</font>

609
00:24:40,070 --> 00:24:44,840
effectively that will house that<font color="#E5E5E5"> kind of</font>

610
00:24:42,500 --> 00:24:48,220
model<font color="#CCCCCC"> and effectively a scoring function</font>

611
00:24:44,840 --> 00:24:50,300
<font color="#E5E5E5">whether it's a you know</font><font color="#CCCCCC"> scikit-learn</font>

612
00:24:48,220 --> 00:24:56,420
<font color="#CCCCCC">predictable transform or whether it's a</font>

613
00:24:50,300 --> 00:24:59,600
your<font color="#E5E5E5"> tensorflow run so that that is a</font>

614
00:24:56,420 --> 00:25:03,860
<font color="#E5E5E5">valid approach</font><font color="#CCCCCC"> but even then</font><font color="#E5E5E5"> you know</font>

615
00:24:59,600 --> 00:25:06,500
<font color="#E5E5E5">there's a there's</font><font color="#CCCCCC"> a big</font><font color="#E5E5E5"> challenge there</font>

616
00:25:03,860 --> 00:25:10,550
in managing at the the measure managing

617
00:25:06,500 --> 00:25:12,800
at version<font color="#E5E5E5"> the versioning and the</font><font color="#CCCCCC"> the</font>

618
00:25:10,550 --> 00:25:14,750
<font color="#E5E5E5">runtime dependencies and that the</font>

619
00:25:12,800 --> 00:25:17,389
changes that<font color="#E5E5E5"> happen on the other side</font>

620
00:25:14,750 --> 00:25:21,290
with the with the kind of standard

621
00:25:17,390 --> 00:25:25,390
approach using a standard approach yes

622
00:25:21,290 --> 00:25:27,950
there's a big challenge<font color="#E5E5E5"> in creating the</font>

623
00:25:25,390 --> 00:25:30,050
PFA version let's have for argument's

624
00:25:27,950 --> 00:25:34,070
sake of the model in the sense<font color="#E5E5E5"> that you</font>

625
00:25:30,050 --> 00:25:36,470
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write that logic so you know you</font>

626
00:25:34,070 --> 00:25:39,350
can to some extent have automatic

627
00:25:36,470 --> 00:25:41,510
translation layers that will take you to

628
00:25:39,350 --> 00:25:43,580
inspect<font color="#E5E5E5"> let's say tensor flow graph for</font>

629
00:25:41,510 --> 00:25:45,950
example<font color="#CCCCCC"> and convert that</font><font color="#E5E5E5"> and that's</font>

630
00:25:43,580 --> 00:25:47,330
certainly<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> but obviously a</font><font color="#E5E5E5"> lot</font>

631
00:25:45,950 --> 00:25:49,310
of<font color="#E5E5E5"> work otherwise</font><font color="#CCCCCC"> you know at the moment</font>

632
00:25:47,330 --> 00:25:51,409
<font color="#CCCCCC">for SPARC we've kind of written them by</font>

633
00:25:49,310 --> 00:25:53,389
hand so<font color="#CCCCCC"> that does involve a lot of</font>

634
00:25:51,410 --> 00:25:57,650
duplication of logic<font color="#E5E5E5"> you're writing it</font>

635
00:25:53,390 --> 00:25:59,660
in a different<font color="#E5E5E5"> form that's for scoring</font>

636
00:25:57,650 --> 00:26:00,620
you typically need a much less logic

637
00:25:59,660 --> 00:26:03,800
than for training

638
00:26:00,620 --> 00:26:05,679
so<font color="#CCCCCC"> yeah the the training pipeline can</font>

639
00:26:03,800 --> 00:26:09,590
involve some very complex algorithmic

640
00:26:05,680 --> 00:26:11,390
stuff happening scoring as you<font color="#CCCCCC"> saw for</font>

641
00:26:09,590 --> 00:26:13,730
<font color="#E5E5E5">even the most complex model scoring is</font>

642
00:26:11,390 --> 00:26:15,740
pretty pretty<font color="#E5E5E5"> much just a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit of</font>

643
00:26:13,730 --> 00:26:17,480
linear algebra<font color="#E5E5E5"> and some lookups and you</font>

644
00:26:15,740 --> 00:26:19,220
know it's pretty pretty basic stuff<font color="#CCCCCC"> and</font>

645
00:26:17,480 --> 00:26:21,950
that's that's really<font color="#CCCCCC"> the core idea</font><font color="#E5E5E5"> is</font>

646
00:26:19,220 --> 00:26:23,660
that this<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> is not meant to to</font>

647
00:26:21,950 --> 00:26:28,020
deal with training at all it's meant to

648
00:26:23,660 --> 00:26:29,840
<font color="#E5E5E5">you to make the scoring component kind</font>

649
00:26:28,020 --> 00:26:32,309
easier<font color="#CCCCCC"> to deploy and more standardized</font>

650
00:26:29,840 --> 00:26:35,549
<font color="#E5E5E5">so I don't know that</font><font color="#CCCCCC"> fully answers the</font>

651
00:26:32,309 --> 00:26:36,779
question but<font color="#E5E5E5"> it's not necessarily one</font>

652
00:26:35,549 --> 00:26:39,899
solution I<font color="#CCCCCC"> think there definite</font>

653
00:26:36,779 --> 00:26:42,059
drawbacks to the standard<font color="#E5E5E5"> and listed a</font>

654
00:26:39,899 --> 00:26:44,250
few of them<font color="#E5E5E5"> and you do</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to kind of</font>

655
00:26:42,059 --> 00:26:46,649
<font color="#E5E5E5">rewrite a lot of the logic but at the</font>

656
00:26:44,250 --> 00:26:48,840
same time on C once<font color="#CCCCCC"> you've kind of</font><font color="#E5E5E5"> done</font>

657
00:26:46,649 --> 00:26:53,070
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you're you're</font><font color="#CCCCCC"> then independent of</font>

658
00:26:48,840 --> 00:26:55,408
any changes in<font color="#E5E5E5"> here any major changes in</font>

659
00:26:53,070 --> 00:26:58,168
<font color="#E5E5E5">the producing framework of course if the</font>

660
00:26:55,409 --> 00:27:00,179
inference code<font color="#CCCCCC"> or code path changes you</font>

661
00:26:58,169 --> 00:27:01,350
need<font color="#E5E5E5"> to update that but yeah it</font><font color="#CCCCCC"> doesn't</font>

662
00:27:00,179 --> 00:27:02,640
<font color="#E5E5E5">it means</font><font color="#CCCCCC"> you don't have to redeploy it</font>

663
00:27:01,350 --> 00:27:05,039
like an entire new version<font color="#E5E5E5"> of your</font>

664
00:27:02,640 --> 00:27:06,630
<font color="#E5E5E5">scoring system</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> and that's</font>

665
00:27:05,039 --> 00:27:08,460
<font color="#E5E5E5">that I think is they can keep the key</font>

666
00:27:06,630 --> 00:27:11,340
benefit is<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> isolate your</font>

667
00:27:08,460 --> 00:27:13,350
production system<font color="#E5E5E5"> and</font><font color="#CCCCCC"> have it just just</font>

668
00:27:11,340 --> 00:27:14,820
<font color="#E5E5E5">take in these these arbitrary PFA</font>

669
00:27:13,350 --> 00:27:16,529
documents and as long as<font color="#E5E5E5"> it's a</font>

670
00:27:14,820 --> 00:27:18,809
compliant engine it can<font color="#E5E5E5"> read them and</font>

671
00:27:16,529 --> 00:27:20,490
score them without ever<font color="#E5E5E5"> upgrading at the</font>

672
00:27:18,809 --> 00:27:23,928
engine version<font color="#CCCCCC"> unless of course you</font><font color="#E5E5E5"> need</font>

673
00:27:20,490 --> 00:27:26,190
a new version<font color="#CCCCCC"> for</font><font color="#E5E5E5"> bugs or performance</font>

674
00:27:23,929 --> 00:27:34,130
thank you<font color="#E5E5E5"> very much</font>

675
00:27:26,190 --> 00:27:34,130
[Applause]

