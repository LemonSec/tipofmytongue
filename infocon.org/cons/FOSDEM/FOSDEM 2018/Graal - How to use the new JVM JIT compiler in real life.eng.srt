1
00:00:05,850 --> 00:00:13,790
<font color="#CCCCCC">Hey so my name is Chris</font><font color="#E5E5E5"> I</font>

2
00:00:10,100 --> 00:00:15,640
<font color="#E5E5E5">with Twitter</font><font color="#CCCCCC"> and so this this year</font><font color="#E5E5E5"> I</font>

3
00:00:13,790 --> 00:00:18,020
thought I'll do something different<font color="#E5E5E5"> and</font>

4
00:00:15,640 --> 00:00:20,990
<font color="#CCCCCC">I was a</font><font color="#E5E5E5"> little worried because I'm doing</font>

5
00:00:18,020 --> 00:00:23,300
<font color="#CCCCCC">basically everything's life that was</font>

6
00:00:20,990 --> 00:00:24,709
more<font color="#E5E5E5"> or</font><font color="#CCCCCC"> less and a wife I didn't really</font>

7
00:00:23,300 --> 00:00:27,350
work so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was a little worried about it</font>

8
00:00:24,710 --> 00:00:30,080
<font color="#CCCCCC">but we got it working so I work</font><font color="#E5E5E5"> for</font>

9
00:00:27,350 --> 00:00:32,180
Twitter<font color="#CCCCCC"> twitter has a small vm team</font>

10
00:00:30,080 --> 00:00:33,589
comes<font color="#CCCCCC"> just like the four people and then</font>

11
00:00:32,180 --> 00:00:36,080
we have<font color="#CCCCCC"> another guy working on the</font>

12
00:00:33,590 --> 00:00:37,730
machine learning stuff<font color="#CCCCCC"> if you're going</font>

13
00:00:36,080 --> 00:00:40,250
<font color="#E5E5E5">to tweet about this target would</font><font color="#CCCCCC"> be nice</font>

14
00:00:37,730 --> 00:00:41,930
<font color="#E5E5E5">if you at that hashtag so that my other</font>

15
00:00:40,250 --> 00:00:43,960
team colleagues know what's going on

16
00:00:41,930 --> 00:00:48,739
here<font color="#E5E5E5"> at FOSDEM</font>

17
00:00:43,960 --> 00:00:51,409
so in<font color="#E5E5E5"> general why am i</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> these talks</font>

18
00:00:48,739 --> 00:00:54,260
you<font color="#E5E5E5"> know you might have seen a talk of</font>

19
00:00:51,409 --> 00:00:55,970
mine before<font color="#E5E5E5"> and I know always about</font>

20
00:00:54,260 --> 00:00:57,050
<font color="#E5E5E5">growth stuff and how we do things I</font>

21
00:00:55,970 --> 00:00:59,750
<font color="#CCCCCC">don't know if you've seen</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> previous</font>

22
00:00:57,050 --> 00:01:01,309
talk where I<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about that we use</font>

23
00:00:59,750 --> 00:01:03,769
growl<font color="#E5E5E5"> at Twitter in production so it</font>

24
00:01:01,309 --> 00:01:06,289
<font color="#CCCCCC">actually works</font><font color="#E5E5E5"> in stuff so you can</font><font color="#CCCCCC"> watch</font>

25
00:01:03,769 --> 00:01:07,760
that<font color="#CCCCCC"> on youtube if you want</font><font color="#E5E5E5"> but the main</font>

26
00:01:06,290 --> 00:01:09,530
<font color="#E5E5E5">purpose of my talks is always to get</font>

27
00:01:07,760 --> 00:01:12,200
people to try<font color="#CCCCCC"> it like Christine just</font>

28
00:01:09,530 --> 00:01:18,170
<font color="#E5E5E5">said try your</font><font color="#CCCCCC"> Qi cease I said try your</font>

29
00:01:12,200 --> 00:01:20,600
compilers so a Twitter<font color="#E5E5E5"> we save money by</font>

30
00:01:18,170 --> 00:01:22,700
using<font color="#E5E5E5"> raw</font><font color="#CCCCCC"> I cannot tell you</font><font color="#E5E5E5"> how much</font>

31
00:01:20,600 --> 00:01:27,320
money but it's substantial it's way more

32
00:01:22,700 --> 00:01:31,250
<font color="#CCCCCC">than I get</font><font color="#E5E5E5"> paid so yeah I don't know if</font>

33
00:01:27,320 --> 00:01:38,658
that's good<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that so you</font><font color="#CCCCCC"> can also save</font>

34
00:01:31,250 --> 00:01:41,719
money<font color="#E5E5E5"> but yeah right exactly so</font><font color="#CCCCCC"> that's</font>

35
00:01:38,659 --> 00:01:43,759
one good reason<font color="#E5E5E5"> or something</font><font color="#CCCCCC"> you can you</font>

36
00:01:41,719 --> 00:01:45,949
can approach your management<font color="#E5E5E5"> and you</font>

37
00:01:43,759 --> 00:01:48,049
know say hey we might be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to save</font>

38
00:01:45,950 --> 00:01:49,820
<font color="#CCCCCC">some money so you have</font><font color="#E5E5E5"> to try it the</font>

39
00:01:48,049 --> 00:01:51,439
other<font color="#CCCCCC"> thing is that I</font><font color="#E5E5E5"> want to fix all</font>

40
00:01:49,820 --> 00:01:53,839
the bugs<font color="#E5E5E5"> that are there right</font>

41
00:01:51,439 --> 00:01:55,548
that's<font color="#E5E5E5"> also very selfish</font><font color="#CCCCCC"> because if you</font>

42
00:01:53,840 --> 00:01:57,200
guys find the bug and<font color="#E5E5E5"> you fix that bug</font>

43
00:01:55,549 --> 00:01:59,179
we our Twitter we don't hit it<font color="#CCCCCC"> and</font>

44
00:01:57,200 --> 00:02:02,240
Twitter stays up so that<font color="#E5E5E5"> that would be</font>

45
00:01:59,179 --> 00:02:04,159
good<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then lastly the also to improve</font>

46
00:02:02,240 --> 00:02:06,679
crawl<font color="#E5E5E5"> right there's</font><font color="#CCCCCC"> still a lot of stuff</font>

47
00:02:04,159 --> 00:02:08,539
we can<font color="#E5E5E5"> improve on and it's a little</font>

48
00:02:06,679 --> 00:02:13,040
<font color="#CCCCCC">easier</font><font color="#E5E5E5"> to work</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> in situ</font><font color="#CCCCCC"> so it's</font>

49
00:02:08,538 --> 00:02:16,100
actually easier<font color="#CCCCCC"> to do improvements and</font>

50
00:02:13,040 --> 00:02:19,010
then people<font color="#CCCCCC"> come to me after my talks</font>

51
00:02:16,100 --> 00:02:21,310
and<font color="#E5E5E5"> say well is it safe to</font><font color="#CCCCCC"> use or does</font>

52
00:02:19,010 --> 00:02:24,209
my<font color="#E5E5E5"> data center burn down if I run</font>

53
00:02:21,310 --> 00:02:27,970
so our data centers<font color="#E5E5E5"> are still fine and</font>

54
00:02:24,210 --> 00:02:30,420
since I don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> - last year or</font>

55
00:02:27,970 --> 00:02:32,890
<font color="#CCCCCC">something we are</font><font color="#E5E5E5"> running our main</font>

56
00:02:30,420 --> 00:02:36,130
Twitter services so basically everything

57
00:02:32,890 --> 00:02:38,859
<font color="#CCCCCC">you when you tweet or when you retweets</font>

58
00:02:36,130 --> 00:02:41,740
everything<font color="#CCCCCC"> 100% of that stuff is running</font>

59
00:02:38,860 --> 00:02:44,950
<font color="#E5E5E5">on crawling production today since last</font>

60
00:02:41,740 --> 00:02:47,470
<font color="#E5E5E5">June or something so it's fine</font><font color="#CCCCCC"> then</font>

61
00:02:44,950 --> 00:02:51,010
people<font color="#E5E5E5"> ask me how do I use it</font><font color="#CCCCCC"> where do I</font>

62
00:02:47,470 --> 00:02:53,800
get<font color="#E5E5E5"> it sometimes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> get emails later and</font>

63
00:02:51,010 --> 00:02:55,179
<font color="#E5E5E5">people have been trying it and they</font>

64
00:02:53,800 --> 00:02:58,150
mostly complain about the benchmark

65
00:02:55,180 --> 00:03:01,500
numbers and they usually say well it

66
00:02:58,150 --> 00:03:03,610
really sucks<font color="#CCCCCC"> that's because they don't</font>

67
00:03:01,500 --> 00:03:05,140
really understand that

68
00:03:03,610 --> 00:03:08,800
<font color="#CCCCCC">Rod's</font><font color="#E5E5E5"> different than the existing</font>

69
00:03:05,140 --> 00:03:13,570
competitors<font color="#CCCCCC"> and so this talk is to</font>

70
00:03:08,800 --> 00:03:15,430
explain<font color="#E5E5E5"> this so what is Gras</font><font color="#CCCCCC"> just</font>

71
00:03:13,570 --> 00:03:16,959
briefly it's a<font color="#CCCCCC"> child virtual machine</font>

72
00:03:15,430 --> 00:03:19,840
just-in-time compiler takes Java

73
00:03:16,959 --> 00:03:22,750
bytecode<font color="#E5E5E5"> and translated translates into</font>

74
00:03:19,840 --> 00:03:24,100
<font color="#E5E5E5">native</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> actively developed by Oracle</font>

75
00:03:22,750 --> 00:03:26,140
<font color="#E5E5E5">labs John Rose was talking about it</font>

76
00:03:24,100 --> 00:03:28,209
earlier<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit so I don't go too</font>

77
00:03:26,140 --> 00:03:30,640
<font color="#E5E5E5">much into detail these are the links</font>

78
00:03:28,209 --> 00:03:35,010
where<font color="#E5E5E5"> you can you know read up on it it</font>

79
00:03:30,640 --> 00:03:37,958
uses<font color="#E5E5E5"> JVM</font><font color="#CCCCCC"> CI and it's</font><font color="#E5E5E5"> written in Java</font><font color="#CCCCCC"> and</font>

80
00:03:35,010 --> 00:03:39,820
that's<font color="#E5E5E5"> very important to</font><font color="#CCCCCC"> remember</font>

81
00:03:37,959 --> 00:03:42,160
throughout the whole talk it's written

82
00:03:39,820 --> 00:03:45,850
in trouble<font color="#CCCCCC"> too it has all the properties</font>

83
00:03:42,160 --> 00:03:46,660
<font color="#CCCCCC">that Java programs have right it uses</font>

84
00:03:45,850 --> 00:03:48,579
Java heap memory

85
00:03:46,660 --> 00:03:53,350
it loads<font color="#E5E5E5"> classes all this stuff so</font>

86
00:03:48,580 --> 00:03:57,480
remember this<font color="#CCCCCC"> where do I get</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> the</font>

87
00:03:53,350 --> 00:03:59,109
answer as always<font color="#CCCCCC"> is</font><font color="#E5E5E5"> it depends</font>

88
00:03:57,480 --> 00:04:01,540
unfortunately but this will change

89
00:03:59,110 --> 00:04:04,780
<font color="#CCCCCC">pretty soon with with JDK 10 this will</font>

90
00:04:01,540 --> 00:04:07,690
change<font color="#E5E5E5"> but where do I get it so there is</font>

91
00:04:04,780 --> 00:04:10,810
chap<font color="#CCCCCC"> 295</font><font color="#E5E5E5"> which is the head of</font><font color="#CCCCCC"> time</font>

92
00:04:07,690 --> 00:04:13,840
compilation<font color="#CCCCCC"> shop and this one when</font><font color="#E5E5E5"> you</font>

93
00:04:10,810 --> 00:04:16,540
go to this chap you see<font color="#CCCCCC"> oh yeah it's in</font>

94
00:04:13,840 --> 00:04:19,510
release 9<font color="#E5E5E5"> and it's delivered so right</font>

95
00:04:16,540 --> 00:04:21,310
<font color="#E5E5E5">because lines out when you scroll all</font>

96
00:04:19,510 --> 00:04:24,130
<font color="#CCCCCC">the way down you see the dependencies</font>

97
00:04:21,310 --> 00:04:26,740
and<font color="#E5E5E5"> it says it depends on JVM CI and</font>

98
00:04:24,130 --> 00:04:30,600
then it<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> crawl and</font><font color="#E5E5E5"> so on and the</font>

99
00:04:26,740 --> 00:04:30,600
project<font color="#E5E5E5"> will merge crack or into the</font>

100
00:04:43,130 --> 00:04:55,740
and and it delivers<font color="#E5E5E5"> it magic and</font>

101
00:04:52,620 --> 00:04:57,990
delivered in<font color="#E5E5E5"> Linux x64 built</font><font color="#CCCCCC"> and so</font>

102
00:04:55,740 --> 00:05:01,949
that's the depends<font color="#E5E5E5"> so if you're running</font>

103
00:04:57,990 --> 00:05:08,639
<font color="#E5E5E5">on Linux x64 you can take JDK</font><font color="#CCCCCC"> 9 and you</font>

104
00:05:01,949 --> 00:05:11,880
have<font color="#CCCCCC"> grout automatically</font><font color="#E5E5E5"> if you're not</font>

105
00:05:08,639 --> 00:05:14,130
<font color="#CCCCCC">only an</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> x64</font><font color="#E5E5E5"> then you have to either</font>

106
00:05:11,880 --> 00:05:16,530
build it yourself or<font color="#E5E5E5"> you can download</font>

107
00:05:14,130 --> 00:05:18,360
<font color="#E5E5E5">them</font><font color="#CCCCCC"> Cheeta contain early access build</font>

108
00:05:16,530 --> 00:05:22,340
and then you get it<font color="#E5E5E5"> there's this there's</font>

109
00:05:18,360 --> 00:05:25,139
this one bug here that adds support for

110
00:05:22,340 --> 00:05:27,840
<font color="#E5E5E5">basically the reason why it's not</font><font color="#CCCCCC"> in 9</font>

111
00:05:25,139 --> 00:05:30,300
is because we couldn't write<font color="#CCCCCC"> the native</font>

112
00:05:27,840 --> 00:05:33,659
shared libraries for the alt feature

113
00:05:30,300 --> 00:05:36,720
<font color="#E5E5E5">that's what kind of do it</font><font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> what do</font>

114
00:05:33,659 --> 00:05:39,300
you need is a JDK with JVM CI<font color="#CCCCCC"> chip 243</font>

115
00:05:36,720 --> 00:05:42,270
and with<font color="#E5E5E5"> äôt because that gives you gras</font>

116
00:05:39,300 --> 00:05:45,840
for free basically<font color="#CCCCCC"> and that's on linux</font>

117
00:05:42,270 --> 00:05:48,840
that's created equal in<font color="#E5E5E5"> jdk 9 or mac</font>

118
00:05:45,840 --> 00:05:50,909
windows<font color="#E5E5E5"> critical than 10 and you can</font>

119
00:05:48,840 --> 00:05:53,880
<font color="#CCCCCC">download</font><font color="#E5E5E5"> it from here</font>

120
00:05:50,909 --> 00:05:58,070
and we're<font color="#E5E5E5"> not doing doing that now so</font>

121
00:05:53,880 --> 00:06:01,099
you the way<font color="#CCCCCC"> i do</font><font color="#E5E5E5"> this talk usually is</font><font color="#CCCCCC"> I</font>

122
00:05:58,070 --> 00:06:04,770
use an Oracle cloud container and I've I

123
00:06:01,099 --> 00:06:09,419
start that container up like on the fly

124
00:06:04,770 --> 00:06:10,948
<font color="#CCCCCC">and I'm</font><font color="#E5E5E5"> doing this to show you when when</font>

125
00:06:09,419 --> 00:06:12,750
people<font color="#CCCCCC"> like when I when I go to</font>

126
00:06:10,949 --> 00:06:15,990
conferences<font color="#CCCCCC"> and I see talks</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> people</font>

127
00:06:12,750 --> 00:06:19,320
who live demos<font color="#CCCCCC"> I always wonder how many</font>

128
00:06:15,990 --> 00:06:21,270
hours did they spend to prepare the

129
00:06:19,320 --> 00:06:22,650
container<font color="#E5E5E5"> or the machine that</font><font color="#CCCCCC"> actually</font>

130
00:06:21,270 --> 00:06:25,049
everything<font color="#E5E5E5"> worked right the demos and</font>

131
00:06:22,650 --> 00:06:28,409
<font color="#E5E5E5">stuff so and but</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> decided i fire up</font>

132
00:06:25,050 --> 00:06:30,030
like a clock container with no<font color="#CCCCCC"> setup at</font>

133
00:06:28,409 --> 00:06:31,979
all and do all<font color="#CCCCCC"> the demos and show you</font>

134
00:06:30,030 --> 00:06:37,559
that<font color="#CCCCCC"> really all you need</font><font color="#E5E5E5"> is download all</font>

135
00:06:31,979 --> 00:06:39,479
<font color="#E5E5E5">the you</font><font color="#CCCCCC"> know the jdk and so on but</font><font color="#E5E5E5"> since</font>

136
00:06:37,560 --> 00:06:44,009
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> only 25 minutes</font><font color="#CCCCCC"> i can't do this so</font>

137
00:06:39,479 --> 00:06:47,430
you<font color="#CCCCCC"> have to trust</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> on this one</font><font color="#E5E5E5"> I'm</font>

138
00:06:44,009 --> 00:06:50,009
just<font color="#CCCCCC"> showing you</font><font color="#E5E5E5"> so I started one up I'm</font>

139
00:06:47,430 --> 00:06:52,380
part<font color="#CCCCCC"> of the of the Oracle developers</font>

140
00:06:50,009 --> 00:06:55,559
champions program<font color="#CCCCCC"> and so they give me</font>

141
00:06:52,380 --> 00:06:57,899
<font color="#E5E5E5">free access to</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> cloud</font>

142
00:06:55,559 --> 00:06:59,729
time<font color="#E5E5E5"> it's like a budget and then I can</font>

143
00:06:57,899 --> 00:07:02,399
use<font color="#CCCCCC"> it that's really</font><font color="#E5E5E5"> nice so that's what</font>

144
00:06:59,729 --> 00:07:04,519
I'm using<font color="#CCCCCC"> so I have I have a machine in</font>

145
00:07:02,399 --> 00:07:06,899
<font color="#CCCCCC">Frankfurt as you can see here and</font>

146
00:07:04,519 --> 00:07:08,779
everything's so small that I don't<font color="#CCCCCC"> even</font>

147
00:07:06,899 --> 00:07:11,099
<font color="#E5E5E5">know how</font><font color="#CCCCCC"> to get there</font>

148
00:07:08,779 --> 00:07:14,579
all<font color="#E5E5E5"> right usually I don't</font><font color="#CCCCCC"> know how to</font>

149
00:07:11,099 --> 00:07:20,329
<font color="#E5E5E5">get there now there's more up here where</font>

150
00:07:14,579 --> 00:07:22,439
you can see<font color="#E5E5E5"> I don't know ah yes</font>

151
00:07:20,329 --> 00:07:25,469
<font color="#E5E5E5">instances that's what I want thank you</font>

152
00:07:22,439 --> 00:07:29,149
so I have a running<font color="#E5E5E5"> faster instance</font><font color="#CCCCCC"> and</font>

153
00:07:25,469 --> 00:07:33,989
it has a<font color="#E5E5E5"> public IP address this one so</font>

154
00:07:29,149 --> 00:07:39,209
we<font color="#E5E5E5"> just log</font><font color="#CCCCCC"> into this guy</font><font color="#E5E5E5"> right and the</font>

155
00:07:33,989 --> 00:07:40,709
second time and so we have I've already

156
00:07:39,209 --> 00:07:43,439
<font color="#CCCCCC">downloaded all the stuff that I</font><font color="#E5E5E5"> need and</font>

157
00:07:40,709 --> 00:07:46,319
we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the JDK 9 that's that's the open</font>

158
00:07:43,439 --> 00:07:48,359
JDK 9 build you can<font color="#CCCCCC"> get from Java dot</font>

159
00:07:46,319 --> 00:07:51,749
whatever<font color="#CCCCCC"> it's called</font><font color="#E5E5E5"> the link I had</font>

160
00:07:48,359 --> 00:07:54,748
earlier<font color="#E5E5E5"> so just download</font><font color="#CCCCCC"> that one and we</font>

161
00:07:51,749 --> 00:07:58,169
<font color="#E5E5E5">are setting just Java home here to this</font>

162
00:07:54,749 --> 00:07:59,909
<font color="#E5E5E5">directory and then we are also putting</font>

163
00:07:58,169 --> 00:08:02,669
it on the path and I've done this before

164
00:07:59,909 --> 00:08:06,209
<font color="#E5E5E5">so I can shortcut</font><font color="#CCCCCC"> a little bit and then</font>

165
00:08:02,669 --> 00:08:08,459
we have this<font color="#E5E5E5"> Java version and over here</font>

166
00:08:06,209 --> 00:08:10,409
we are<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same thing we're</font>

167
00:08:08,459 --> 00:08:11,429
comparing<font color="#CCCCCC"> c2 and Gras</font><font color="#E5E5E5"> that's that's why</font>

168
00:08:10,409 --> 00:08:14,248
I have two<font color="#E5E5E5"> windows here</font>

169
00:08:11,429 --> 00:08:19,558
so we're doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Java home again this</font>

170
00:08:14,249 --> 00:08:25,009
guy and the path<font color="#E5E5E5"> and then in this</font>

171
00:08:19,559 --> 00:08:27,119
instance<font color="#E5E5E5"> oh yeah I'm also using this</font>

172
00:08:25,009 --> 00:08:31,169
environment variable called Java<font color="#E5E5E5"> tool</font>

173
00:08:27,119 --> 00:08:32,610
options<font color="#E5E5E5"> and I use parallel if you see</font>

174
00:08:31,169 --> 00:08:36,299
<font color="#E5E5E5">because it's a little easier later</font><font color="#CCCCCC"> too</font>

175
00:08:32,610 --> 00:08:41,269
to not look at<font color="#CCCCCC"> g1 output it's easier to</font>

176
00:08:36,299 --> 00:08:46,859
look at parallel output and and we do a

177
00:08:41,269 --> 00:08:47,850
512<font color="#E5E5E5"> Meg</font><font color="#CCCCCC"> heap and maximum</font><font color="#E5E5E5"> and start and</font>

178
00:08:46,860 --> 00:08:54,480
there you go

179
00:08:47,850 --> 00:08:58,679
and the same<font color="#E5E5E5"> over here wait</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> let me go</font>

180
00:08:54,480 --> 00:09:00,179
back so usually I start<font color="#E5E5E5"> up this</font>

181
00:08:58,679 --> 00:09:01,860
container and<font color="#E5E5E5"> it takes a while and then</font>

182
00:09:00,179 --> 00:09:03,899
I talk<font color="#CCCCCC"> about myself so the only thing</font>

183
00:09:01,860 --> 00:09:05,279
I'm saying here is<font color="#E5E5E5"> because Charlie</font>

184
00:09:03,899 --> 00:09:07,559
called me out

185
00:09:05,279 --> 00:09:08,680
I'm the lava one organizer so if you

186
00:09:07,559 --> 00:09:12,279
guys want<font color="#CCCCCC"> to come</font>

187
00:09:08,680 --> 00:09:18,420
a white next January you<font color="#E5E5E5"> know so the</font>

188
00:09:12,279 --> 00:09:18,420
rest I skip<font color="#CCCCCC"> so back to the demo in</font>

189
00:09:23,930 --> 00:09:30,319
what you can do in<font color="#CCCCCC"> 89 is you list all</font>

190
00:09:28,880 --> 00:09:32,330
the modules it's like I don't know<font color="#CCCCCC"> like</font>

191
00:09:30,320 --> 00:09:37,360
75 modules or something like this<font color="#E5E5E5"> and</font>

192
00:09:32,330 --> 00:09:42,890
then as we've seen before<font color="#CCCCCC"> the äôt</font><font color="#E5E5E5"> chip</font>

193
00:09:37,360 --> 00:09:47,560
<font color="#CCCCCC">depends on on on</font><font color="#E5E5E5"> JVM TI</font><font color="#CCCCCC"> + +</font><font color="#E5E5E5"> & Grau</font>

194
00:09:42,890 --> 00:09:51,290
basically and then you can say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> Java</font>

195
00:09:47,560 --> 00:09:53,239
<font color="#CCCCCC">was got describe describe module</font><font color="#E5E5E5"> right</font>

196
00:09:51,290 --> 00:09:58,520
<font color="#E5E5E5">so we want to describe the</font><font color="#CCCCCC"> jdk äôt</font>

197
00:09:53,240 --> 00:10:00,500
module and just no that's<font color="#CCCCCC"> not right</font><font color="#E5E5E5"> just</font>

198
00:09:58,520 --> 00:10:03,560
<font color="#E5E5E5">correct here we go</font>

199
00:10:00,500 --> 00:10:06,589
so this is the<font color="#CCCCCC"> che DKA okie module and</font>

200
00:10:03,560 --> 00:10:09,199
it requires<font color="#CCCCCC"> jdk dot internal Dom</font><font color="#E5E5E5"> be m</font>

201
00:10:06,589 --> 00:10:12,100
dot<font color="#E5E5E5"> CI that's JVM CI and it also</font>

202
00:10:09,200 --> 00:10:14,510
<font color="#E5E5E5">requires this guy here and that scroll</font>

203
00:10:12,100 --> 00:10:17,270
this module contains the cross source

204
00:10:14,510 --> 00:10:18,770
code so if you have these two or<font color="#E5E5E5"> yeah</font>

205
00:10:17,270 --> 00:10:20,329
these<font color="#E5E5E5"> two you don't need a it to you</font>

206
00:10:18,770 --> 00:10:21,980
<font color="#E5E5E5">really but if you have these modules in</font>

207
00:10:20,330 --> 00:10:28,310
<font color="#E5E5E5">your chain ek9 then you're good to</font><font color="#CCCCCC"> go</font>

208
00:10:21,980 --> 00:10:30,380
<font color="#CCCCCC">okay that's all you need so get a</font><font color="#E5E5E5"> tvk</font>

209
00:10:28,310 --> 00:10:32,329
with JVM CI and the<font color="#E5E5E5"> OT yes check</font><font color="#CCCCCC"> Merck</font>

210
00:10:30,380 --> 00:10:35,450
we just verified that<font color="#E5E5E5"> we have that and</font>

211
00:10:32,330 --> 00:10:38,870
<font color="#E5E5E5">then the only thing you really</font><font color="#CCCCCC"> have to</font>

212
00:10:35,450 --> 00:10:43,070
do is to turn<font color="#E5E5E5"> it</font><font color="#CCCCCC"> on that's all</font><font color="#E5E5E5"> so how do</font>

213
00:10:38,870 --> 00:10:51,640
I use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> go back to our</font><font color="#E5E5E5"> chaps</font>

214
00:10:43,070 --> 00:10:53,990
here<font color="#E5E5E5"> and then if we go to chap 243 here</font>

215
00:10:51,640 --> 00:10:56,689
you can see when you scroll<font color="#CCCCCC"> down a</font>

216
00:10:53,990 --> 00:11:00,110
little<font color="#E5E5E5"> bit oh look this</font><font color="#CCCCCC"> is how you turn</font>

217
00:10:56,690 --> 00:11:02,540
it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> so all you</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> do is take this</font>

218
00:11:00,110 --> 00:11:05,420
so so since these are experimental

219
00:11:02,540 --> 00:11:08,000
<font color="#E5E5E5">options you have to unlock them and then</font>

220
00:11:05,420 --> 00:11:09,949
you say oh I wanna enable JVM CI which

221
00:11:08,000 --> 00:11:12,380
not automatically<font color="#E5E5E5"> turns on the compiler</font>

222
00:11:09,950 --> 00:11:13,760
<font color="#E5E5E5">it just enables the Java interface and</font>

223
00:11:12,380 --> 00:11:15,860
you could then use something like

224
00:11:13,760 --> 00:11:18,980
truffle to schedule compilations but

225
00:11:15,860 --> 00:11:22,399
what we really want<font color="#E5E5E5"> is to replace C 2</font>

226
00:11:18,980 --> 00:11:25,630
with a JVM CI compiler<font color="#E5E5E5"> in in our case</font>

227
00:11:22,399 --> 00:11:29,750
<font color="#CCCCCC">that</font><font color="#E5E5E5"> scroll okay so we take that and we</font>

228
00:11:25,630 --> 00:11:33,100
stick it into our Java tools options

229
00:11:29,750 --> 00:11:36,470
<font color="#E5E5E5">like I have it somewhere here already</font>

230
00:11:33,100 --> 00:11:37,540
<font color="#CCCCCC">right</font><font color="#E5E5E5"> we just changed</font><font color="#CCCCCC"> that to 512 here</font>

231
00:11:36,470 --> 00:11:41,990
real quick

232
00:11:37,540 --> 00:11:45,529
and as you can see unlock enable use<font color="#CCCCCC"> GPM</font>

233
00:11:41,990 --> 00:11:48,319
<font color="#CCCCCC">second okay</font><font color="#E5E5E5"> so if we do something</font><font color="#CCCCCC"> like</font>

234
00:11:45,529 --> 00:11:50,449
<font color="#E5E5E5">this</font><font color="#CCCCCC"> then we see oh yeah</font><font color="#E5E5E5"> the options are</font>

235
00:11:48,319 --> 00:11:51,920
being picked up but there's no real

236
00:11:50,449 --> 00:11:57,139
difference<font color="#E5E5E5"> right nothing's really</font>

237
00:11:51,920 --> 00:12:02,540
happening<font color="#CCCCCC"> okay then then we could go</font>

238
00:11:57,139 --> 00:12:07,179
<font color="#E5E5E5">back yes there is</font><font color="#CCCCCC"> so we have now JVM TI</font>

239
00:12:02,540 --> 00:12:14,059
enabled and then you can do<font color="#CCCCCC"> print X</font>

240
00:12:07,179 --> 00:12:15,290
<font color="#E5E5E5">final version and we grab for JVM</font><font color="#CCCCCC"> CI</font>

241
00:12:14,059 --> 00:12:17,118
<font color="#E5E5E5">okay here we go</font>

242
00:12:15,290 --> 00:12:20,149
these all the JVM CI options that we

243
00:12:17,119 --> 00:12:21,470
have so for<font color="#E5E5E5"> example yeah we enable it</font>

244
00:12:20,149 --> 00:12:24,379
and<font color="#E5E5E5"> that's true</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> one I'm looking</font><font color="#CCCCCC"> for</font>

245
00:12:21,470 --> 00:12:30,369
<font color="#CCCCCC">is to</font><font color="#E5E5E5"> champion CI print properties so</font>

246
00:12:24,379 --> 00:12:33,860
this guy here we go<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> a long</font><font color="#E5E5E5"> list I</font>

247
00:12:30,369 --> 00:12:36,019
mean a little<font color="#E5E5E5"> wider here that's a really</font>

248
00:12:33,860 --> 00:12:39,079
<font color="#E5E5E5">long list so there are a few</font><font color="#CCCCCC"> chavin CI</font>

249
00:12:36,019 --> 00:12:41,600
properties<font color="#E5E5E5"> so since JV m CI is written</font>

250
00:12:39,079 --> 00:12:43,729
in<font color="#CCCCCC"> java mostly and Gravas written in</font>

251
00:12:41,600 --> 00:12:46,069
<font color="#E5E5E5">java the</font><font color="#CCCCCC"> command-line</font><font color="#E5E5E5"> options are being</font>

252
00:12:43,730 --> 00:12:48,589
passed as java properties still -

253
00:12:46,069 --> 00:12:50,240
capital<font color="#CCCCCC"> b and</font><font color="#E5E5E5"> then you know whatever</font><font color="#CCCCCC"> so</font>

254
00:12:48,589 --> 00:12:51,829
there<font color="#E5E5E5"> are a few</font><font color="#CCCCCC"> chopped</font><font color="#E5E5E5"> achievement er</font>

255
00:12:50,240 --> 00:12:54,740
properties and then there are<font color="#E5E5E5"> a bunch of</font>

256
00:12:51,829 --> 00:12:57,170
<font color="#CCCCCC">Grob right so the one we are looking</font><font color="#E5E5E5"> for</font>

257
00:12:54,740 --> 00:13:01,639
is this one<font color="#E5E5E5"> here which</font><font color="#CCCCCC"> tells</font><font color="#E5E5E5"> us a little</font>

258
00:12:57,170 --> 00:13:04,670
bit about when<font color="#CCCCCC"> kvam CI starts up</font><font color="#E5E5E5"> okay so</font>

259
00:13:01,639 --> 00:13:06,139
we do this<font color="#E5E5E5"> and we say capital</font><font color="#CCCCCC"> d timer we</font>

260
00:13:04,670 --> 00:13:09,339
have to say true because if<font color="#E5E5E5"> we turn it</font>

261
00:13:06,139 --> 00:13:11,360
<font color="#E5E5E5">on so we do a</font><font color="#CCCCCC"> dash version</font><font color="#E5E5E5"> and we see</font>

262
00:13:09,339 --> 00:13:15,040
<font color="#E5E5E5">nothing's really happening so what the</font>

263
00:13:11,360 --> 00:13:18,139
hell is<font color="#E5E5E5"> going on</font><font color="#CCCCCC"> so the way it</font><font color="#E5E5E5"> works is</font>

264
00:13:15,040 --> 00:13:22,610
we are<font color="#E5E5E5"> running tiered right and if we do</font>

265
00:13:18,139 --> 00:13:27,079
a print<font color="#E5E5E5"> compilation here let me do it</font>

266
00:13:22,610 --> 00:13:29,449
again<font color="#E5E5E5"> you see this column here is the</font>

267
00:13:27,079 --> 00:13:33,670
level<font color="#CCCCCC"> of compilation the tier level and</font>

268
00:13:29,449 --> 00:13:35,899
and<font color="#E5E5E5"> tier 4 would be</font><font color="#CCCCCC"> c2</font><font color="#E5E5E5"> or Gras</font><font color="#CCCCCC"> and</font>

269
00:13:33,670 --> 00:13:38,059
everything we compiled so far because

270
00:13:35,899 --> 00:13:41,029
the<font color="#E5E5E5"> dash version doesn't do a lot we're</font>

271
00:13:38,059 --> 00:13:43,399
not actually<font color="#E5E5E5"> doing a level</font><font color="#CCCCCC"> 4 compilation</font>

272
00:13:41,029 --> 00:13:45,620
so JVM<font color="#E5E5E5"> CI will never be initialized</font>

273
00:13:43,399 --> 00:13:49,899
because it's lazy you lazily<font color="#E5E5E5"> initialize</font>

274
00:13:45,620 --> 00:13:49,899
so we have to do a<font color="#E5E5E5"> little bit more</font>

275
00:13:50,250 --> 00:13:54,780
we can do<font color="#CCCCCC"> we can run the couple for</font>

276
00:13:52,200 --> 00:13:56,040
example<font color="#E5E5E5"> into it</font><font color="#CCCCCC"> at their shell</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can</font>

277
00:13:54,780 --> 00:13:57,750
see<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> something's being in</font><font color="#CCCCCC"> their</font>

278
00:13:56,040 --> 00:13:59,959
shell initialized and it's called

279
00:13:57,750 --> 00:14:03,210
<font color="#CCCCCC">hotspot</font><font color="#E5E5E5"> gbmt</font><font color="#CCCCCC"> our runtime that's a class</font>

280
00:13:59,960 --> 00:14:04,800
<font color="#E5E5E5">but it seems like that's only it and</font>

281
00:14:03,210 --> 00:14:07,410
it's not really finishing it<font color="#E5E5E5"> and the</font>

282
00:14:04,800 --> 00:14:10,229
reason is the initialization of JVM<font color="#CCCCCC"> SIA</font>

283
00:14:07,410 --> 00:14:12,900
<font color="#E5E5E5">and</font><font color="#CCCCCC"> growl would take too long so the</font>

284
00:14:10,230 --> 00:14:15,930
<font color="#E5E5E5">program</font><font color="#CCCCCC"> actually exits before all the</font>

285
00:14:12,900 --> 00:14:19,020
initialization<font color="#E5E5E5"> is now so we have</font><font color="#CCCCCC"> to run</font>

286
00:14:15,930 --> 00:14:21,750
a little<font color="#E5E5E5"> bit more so we do a small run</font>

287
00:14:19,020 --> 00:14:22,380
of<font color="#E5E5E5"> Aurora and</font><font color="#CCCCCC"> in Z oh yeah</font><font color="#E5E5E5"> that looks</font>

288
00:14:21,750 --> 00:14:26,640
<font color="#CCCCCC">much better</font>

289
00:14:22,380 --> 00:14:29,160
<font color="#E5E5E5">so we initialize GBMC</font><font color="#CCCCCC"> I there's a</font>

290
00:14:26,640 --> 00:14:30,870
there's an implementation<font color="#E5E5E5"> of GBMC I</font><font color="#CCCCCC"> run</font>

291
00:14:29,160 --> 00:14:32,850
time called<font color="#E5E5E5"> hotspot cheating if they run</font>

292
00:14:30,870 --> 00:14:35,940
time right that could be technically<font color="#E5E5E5"> a</font>

293
00:14:32,850 --> 00:14:38,790
chain<font color="#E5E5E5"> nine GBMC I run time just throwing</font>

294
00:14:35,940 --> 00:14:41,100
it out<font color="#E5E5E5"> there and then we initialize</font>

295
00:14:38,790 --> 00:14:42,780
something<font color="#E5E5E5"> called a hotspot</font><font color="#CCCCCC"> bra run time</font>

296
00:14:41,100 --> 00:14:44,640
<font color="#E5E5E5">and that's that's really</font><font color="#CCCCCC"> the compiler</font>

297
00:14:42,780 --> 00:14:46,620
<font color="#E5E5E5">you see we initialize all these</font>

298
00:14:44,640 --> 00:14:48,750
<font color="#E5E5E5">providers and then we initialize we</font>

299
00:14:46,620 --> 00:14:49,950
create the back end<font color="#E5E5E5"> for</font><font color="#CCCCCC"> our CPU</font><font color="#E5E5E5"> and so</font>

300
00:14:48,750 --> 00:14:52,380
on and so on and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> we run</font><font color="#CCCCCC"> the</font>

301
00:14:49,950 --> 00:14:56,970
benchmark<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so now we are really</font>

302
00:14:52,380 --> 00:15:01,050
<font color="#E5E5E5">using it good let's go back to the</font>

303
00:14:56,970 --> 00:15:03,480
slides<font color="#E5E5E5"> and I have ten minutes</font><font color="#CCCCCC"> okay</font>

304
00:15:01,050 --> 00:15:06,630
usually a demo takes five so maybe I can

305
00:15:03,480 --> 00:15:11,310
<font color="#CCCCCC">do two more</font><font color="#E5E5E5"> bootstrapping</font>

306
00:15:06,630 --> 00:15:13,470
<font color="#E5E5E5">is you you have to remember it's written</font>

307
00:15:11,310 --> 00:15:14,880
in Java<font color="#E5E5E5"> right so God is just another</font>

308
00:15:13,470 --> 00:15:18,120
java application that's running in your

309
00:15:14,880 --> 00:15:20,430
<font color="#CCCCCC">TVM so if you want to</font><font color="#E5E5E5"> run it it will get</font>

310
00:15:18,120 --> 00:15:24,030
compiled<font color="#E5E5E5"> as any other Java code you have</font>

311
00:15:20,430 --> 00:15:26,010
<font color="#E5E5E5">running in your VM</font><font color="#CCCCCC"> okay so it loads</font><font color="#E5E5E5"> Java</font>

312
00:15:24,030 --> 00:15:29,189
classes because it's written in Java<font color="#CCCCCC"> it</font>

313
00:15:26,010 --> 00:15:31,620
has Java methods obviously and these at

314
00:15:29,190 --> 00:15:33,030
some<font color="#E5E5E5"> point when your compiler when</font>

315
00:15:31,620 --> 00:15:35,100
<font color="#CCCCCC">growth starts to compiling your</font>

316
00:15:33,030 --> 00:15:36,870
application these methods get<font color="#CCCCCC"> hot as</font>

317
00:15:35,100 --> 00:15:40,320
well and they<font color="#CCCCCC"> need to be compiled that's</font>

318
00:15:36,870 --> 00:15:47,130
called the bootstrap<font color="#CCCCCC"> okay so let</font><font color="#E5E5E5"> me do a</font>

319
00:15:40,320 --> 00:15:50,850
quick bootstrap demo you<font color="#E5E5E5"> can turn this</font>

320
00:15:47,130 --> 00:15:55,410
on<font color="#E5E5E5"> explicitly and you'd say oh let's</font>

321
00:15:50,850 --> 00:15:57,600
<font color="#E5E5E5">drip my JVM CI</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this cloud instance</font>

322
00:15:55,410 --> 00:15:59,670
by the way has I think<font color="#CCCCCC"> four cores</font><font color="#E5E5E5"> so</font>

323
00:15:57,600 --> 00:16:01,470
eight threads something like this<font color="#CCCCCC"> and it</font>

324
00:15:59,670 --> 00:16:03,599
uses a bootstrap it uses all the threads

325
00:16:01,470 --> 00:16:05,160
<font color="#E5E5E5">it can get in bootstrap C so what the</font>

326
00:16:03,600 --> 00:16:08,160
what a<font color="#CCCCCC"> bootstrap really does it takes</font>

327
00:16:05,160 --> 00:16:10,199
all the<font color="#CCCCCC"> Chava</font><font color="#E5E5E5"> java.lang object methods</font>

328
00:16:08,160 --> 00:16:12,509
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> super simple</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and</font>

329
00:16:10,199 --> 00:16:14,099
schedules them for compilation and then

330
00:16:12,509 --> 00:16:16,380
because<font color="#CCCCCC"> you're compiling</font><font color="#E5E5E5"> these small</font>

331
00:16:14,100 --> 00:16:17,519
methods<font color="#E5E5E5"> the whole compiler gets warm and</font>

332
00:16:16,380 --> 00:16:20,850
compiles itself that's what the

333
00:16:17,519 --> 00:16:23,220
bootstrap does so it takes 10 seconds<font color="#CCCCCC"> to</font>

334
00:16:20,850 --> 00:16:24,810
compile<font color="#E5E5E5"> 2500 methods which is quite a</font>

335
00:16:23,220 --> 00:16:26,910
bit right so that's<font color="#E5E5E5"> something where</font>

336
00:16:24,810 --> 00:16:28,380
people<font color="#E5E5E5"> are</font><font color="#CCCCCC"> razing</font><font color="#E5E5E5"> well you know I don't</font>

337
00:16:26,910 --> 00:16:31,350
want to wait<font color="#E5E5E5"> 10 seconds every time I</font>

338
00:16:28,380 --> 00:16:32,750
start<font color="#E5E5E5"> something but</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have to</font>

339
00:16:31,350 --> 00:16:36,990
explicitly bootstrap it

340
00:16:32,750 --> 00:16:41,819
you can also bootstrap it basically

341
00:16:36,990 --> 00:16:45,899
automatically<font color="#E5E5E5"> while you go</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so when</font>

342
00:16:41,819 --> 00:16:52,349
you for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> let's do a print</font>

343
00:16:45,899 --> 00:16:56,339
compilation here<font color="#E5E5E5"> oops a print copulation</font>

344
00:16:52,350 --> 00:17:01,440
<font color="#E5E5E5">off yeah let's run that same benchmark</font>

345
00:16:56,339 --> 00:17:05,339
<font color="#E5E5E5">again why not</font><font color="#CCCCCC"> and we crap for orc</font><font color="#E5E5E5"> for</font>

346
00:17:01,440 --> 00:17:07,740
all<font color="#CCCCCC"> VM there we go so here we see that</font>

347
00:17:05,339 --> 00:17:09,389
we didn't do an explicit bootstrap this

348
00:17:07,740 --> 00:17:11,010
is just being implicitly done while we

349
00:17:09,390 --> 00:17:12,600
go along<font color="#E5E5E5"> right and you see how it's</font>

350
00:17:11,010 --> 00:17:14,730
<font color="#E5E5E5">being compiled and the benchmarks done</font>

351
00:17:12,599 --> 00:17:16,708
and some methods<font color="#CCCCCC"> are</font><font color="#E5E5E5"> still being</font>

352
00:17:14,730 --> 00:17:18,870
compiled<font color="#E5E5E5"> but what's important here</font><font color="#CCCCCC"> is</font>

353
00:17:16,709 --> 00:17:22,439
<font color="#CCCCCC">you can see the</font><font color="#E5E5E5"> compilation this level</font>

354
00:17:18,869 --> 00:17:25,619
is<font color="#CCCCCC"> always 1 and there</font><font color="#E5E5E5"> is a flag in</font><font color="#CCCCCC"> growl</font>

355
00:17:22,439 --> 00:17:27,919
it's called<font color="#CCCCCC"> wait I may not what it's</font>

356
00:17:25,619 --> 00:17:27,918
called

357
00:17:29,600 --> 00:17:38,668
JVM<font color="#E5E5E5"> see</font><font color="#CCCCCC"> I I want this guy properties</font>

358
00:17:33,150 --> 00:17:40,470
right and we grabbed for c1<font color="#E5E5E5"> only</font><font color="#CCCCCC"> ok here</font>

359
00:17:38,669 --> 00:17:42,600
we<font color="#E5E5E5"> go so there's a property called</font>

360
00:17:40,470 --> 00:17:45,840
compile growl with c1 only and<font color="#E5E5E5"> that's by</font>

361
00:17:42,600 --> 00:17:50,189
default true and the<font color="#E5E5E5"> reason this is</font><font color="#CCCCCC"> set</font>

362
00:17:45,840 --> 00:17:52,799
<font color="#E5E5E5">up that way is c1 throughput is much</font>

363
00:17:50,190 --> 00:17:55,169
much<font color="#CCCCCC"> faster than</font><font color="#E5E5E5"> any that let's say c2</font>

364
00:17:52,799 --> 00:17:57,418
or<font color="#CCCCCC"> grott</font><font color="#E5E5E5"> itself</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so we went growl</font>

365
00:17:55,169 --> 00:17:59,460
the<font color="#CCCCCC"> growl itself to be compiled as</font>

366
00:17:57,419 --> 00:18:02,299
quickly as<font color="#CCCCCC"> possible and</font><font color="#E5E5E5"> not take as much</font>

367
00:17:59,460 --> 00:18:04,169
CPU away from our<font color="#CCCCCC"> from our application</font>

368
00:18:02,299 --> 00:18:04,679
<font color="#E5E5E5">compilations</font><font color="#CCCCCC"> or even the application</font>

369
00:18:04,169 --> 00:18:06,750
itself

370
00:18:04,679 --> 00:18:10,290
so we just compiled with c1 and that's

371
00:18:06,750 --> 00:18:17,070
<font color="#E5E5E5">usually fine yes</font>

372
00:18:10,290 --> 00:18:20,129
<font color="#E5E5E5">I can and if I have 50 minutes I will</font>

373
00:18:17,070 --> 00:18:23,639
show<font color="#CCCCCC"> you how to do it</font><font color="#E5E5E5"> but apparently</font><font color="#CCCCCC"> we</font>

374
00:18:20,130 --> 00:18:26,840
don't so yes you can next year<font color="#E5E5E5"> the other</font>

375
00:18:23,640 --> 00:18:30,030
<font color="#E5E5E5">half of the talk will be next year</font><font color="#CCCCCC"> yeah</font>

376
00:18:26,840 --> 00:18:32,129
so this<font color="#E5E5E5"> is this is</font><font color="#CCCCCC"> what a boot strip is</font>

377
00:18:30,030 --> 00:18:36,420
and how<font color="#CCCCCC"> bootstrap working we could we</font>

378
00:18:32,130 --> 00:18:39,770
<font color="#E5E5E5">could also turn off you know if we if</font><font color="#CCCCCC"> we</font>

379
00:18:36,420 --> 00:18:44,880
go here<font color="#CCCCCC"> and say okay - capital B and</font>

380
00:18:39,770 --> 00:18:46,320
this guy and then we say false<font color="#E5E5E5"> they will</font>

381
00:18:44,880 --> 00:18:47,790
<font color="#E5E5E5">see oh they are a bunch of</font><font color="#CCCCCC"> one</font>

382
00:18:46,320 --> 00:18:50,879
<font color="#E5E5E5">compilations in there and then three and</font>

383
00:18:47,790 --> 00:18:53,430
<font color="#E5E5E5">so at the end we'll get to level four</font>

384
00:18:50,880 --> 00:18:53,940
compilations like here<font color="#E5E5E5"> so if you turn it</font>

385
00:18:53,430 --> 00:18:56,160
off

386
00:18:53,940 --> 00:18:59,700
you go through the whole tiered system

387
00:18:56,160 --> 00:19:03,510
and<font color="#CCCCCC"> grog will compile itself takes much</font>

388
00:18:59,700 --> 00:19:07,200
longer<font color="#E5E5E5"> but I have six minutes</font><font color="#CCCCCC"> left I can</font>

389
00:19:03,510 --> 00:19:09,240
yeah well I'll show it to<font color="#E5E5E5"> you why not</font><font color="#CCCCCC"> so</font>

390
00:19:07,200 --> 00:19:13,950
we<font color="#CCCCCC"> do the bootstrap</font><font color="#E5E5E5"> and we say okay we</font>

391
00:19:09,240 --> 00:19:15,780
do false here<font color="#CCCCCC"> oh wait no no no I'm not</font>

392
00:19:13,950 --> 00:19:19,380
<font color="#E5E5E5">doing this</font><font color="#CCCCCC"> I have to show you something</font>

393
00:19:15,780 --> 00:19:23,129
<font color="#CCCCCC">else this is important and I'm still</font>

394
00:19:19,380 --> 00:19:26,820
debating if I should file a bug for<font color="#CCCCCC"> this</font>

395
00:19:23,130 --> 00:19:29,960
or<font color="#E5E5E5"> not because when you do a bootstrap</font>

396
00:19:26,820 --> 00:19:33,300
an explicit bootstrap<font color="#E5E5E5"> it's actually</font>

397
00:19:29,960 --> 00:19:35,790
ignoring<font color="#E5E5E5"> the</font><font color="#CCCCCC"> compiled</font><font color="#E5E5E5"> growl with c1 only</font>

398
00:19:33,300 --> 00:19:37,770
flag<font color="#E5E5E5"> so it's compiling it with itself</font>

399
00:19:35,790 --> 00:19:40,530
<font color="#E5E5E5">every time</font><font color="#CCCCCC"> you do</font><font color="#E5E5E5"> an you</font><font color="#CCCCCC"> do an explicit</font>

400
00:19:37,770 --> 00:19:42,450
bootstrap so that's I<font color="#CCCCCC"> think that's</font><font color="#E5E5E5"> very</font>

401
00:19:40,530 --> 00:19:44,310
important<font color="#E5E5E5"> and I don't know if it should</font>

402
00:19:42,450 --> 00:19:46,770
do it actually<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think it should honor</font>

403
00:19:44,310 --> 00:19:48,030
the<font color="#CCCCCC"> flag and if you tell it</font><font color="#E5E5E5"> hey only</font>

404
00:19:46,770 --> 00:19:49,200
<font color="#CCCCCC">compile</font><font color="#E5E5E5"> this you won't just compile with</font>

405
00:19:48,030 --> 00:19:54,660
<font color="#CCCCCC">c1</font>

406
00:19:49,200 --> 00:19:57,960
I should mention<font color="#E5E5E5"> sometimes an explicit</font>

407
00:19:54,660 --> 00:20:00,660
bootstrap might help<font color="#E5E5E5"> even if it if it's</font>

408
00:19:57,960 --> 00:20:04,050
upfront time that you're just wasting

409
00:20:00,660 --> 00:20:06,390
and waiting on but<font color="#E5E5E5"> see</font><font color="#CCCCCC"> one's not</font>

410
00:20:04,050 --> 00:20:08,850
optimizing as well as a c2 or<font color="#E5E5E5"> Brawl does</font>

411
00:20:06,390 --> 00:20:10,230
right so if c1 doesn't have<font color="#CCCCCC"> as capable</font>

412
00:20:08,850 --> 00:20:13,500
now sit for example so all the

413
00:20:10,230 --> 00:20:15,480
allocations<font color="#CCCCCC"> that will be done in Brawl</font>

414
00:20:13,500 --> 00:20:17,520
the compiler will<font color="#E5E5E5"> then go to the Java</font>

415
00:20:15,480 --> 00:20:19,440
heap nothing will be escaped<font color="#E5E5E5"> analyzed or</font>

416
00:20:17,520 --> 00:20:22,230
<font color="#E5E5E5">scalar</font><font color="#CCCCCC"> iced or anything</font><font color="#E5E5E5"> so if you're</font>

417
00:20:19,440 --> 00:20:23,850
expecting that later in<font color="#E5E5E5"> your application</font>

418
00:20:22,230 --> 00:20:24,990
run you were still you still come

419
00:20:23,850 --> 00:20:27,840
piling a lot and you want<font color="#CCCCCC"> these</font>

420
00:20:24,990 --> 00:20:30,990
compilations<font color="#E5E5E5"> to be quick</font><font color="#CCCCCC"> a bootstrap or</font>

421
00:20:27,840 --> 00:20:35,428
turning off the<font color="#E5E5E5"> c1 only flag might be</font>

422
00:20:30,990 --> 00:20:37,440
better<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so going</font><font color="#E5E5E5"> back to the slides</font>

423
00:20:35,429 --> 00:20:39,120
<font color="#CCCCCC">when I asked</font><font color="#E5E5E5"> the bootstrap demo what</font>

424
00:20:37,440 --> 00:20:41,220
they were learned well we<font color="#E5E5E5"> compiled about</font>

425
00:20:39,120 --> 00:20:43,260
the bootstrap composite about<font color="#CCCCCC"> 2500</font>

426
00:20:41,220 --> 00:20:46,110
methods I didn't do the non<font color="#E5E5E5"> teared one</font>

427
00:20:43,260 --> 00:20:48,150
but it compiles even more<font color="#E5E5E5"> because then</font>

428
00:20:46,110 --> 00:20:51,000
more of<font color="#CCCCCC"> corral gets hot and it just</font>

429
00:20:48,150 --> 00:20:52,530
compels more of itself<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> it</font>

430
00:20:51,000 --> 00:20:56,909
either<font color="#E5E5E5"> upfront or</font><font color="#CCCCCC"> on-demand</font><font color="#E5E5E5"> during</font>

431
00:20:52,530 --> 00:20:59,340
<font color="#E5E5E5">runtime</font><font color="#CCCCCC"> I would suggest to you to not</font>

432
00:20:56,909 --> 00:21:02,400
touch the bootstrap<font color="#CCCCCC"> flexib</font><font color="#E5E5E5"> just let it</font>

433
00:20:59,340 --> 00:21:03,809
run<font color="#E5E5E5"> if I could do the production demo</font>

434
00:21:02,400 --> 00:21:06,870
that<font color="#E5E5E5"> I have you you would see that it</font>

435
00:21:03,809 --> 00:21:07,799
<font color="#E5E5E5">really doesn't</font><font color="#CCCCCC"> matter and then by</font>

436
00:21:06,870 --> 00:21:10,979
<font color="#CCCCCC">default we compiling</font>

437
00:21:07,799 --> 00:21:14,460
only<font color="#CCCCCC"> with t1</font><font color="#E5E5E5"> and bootstrap they explicit</font>

438
00:21:10,980 --> 00:21:19,169
one<font color="#CCCCCC"> does it</font><font color="#E5E5E5"> a slightly different so Java</font>

439
00:21:14,460 --> 00:21:22,559
heap usage<font color="#CCCCCC"> crawl is exactly it's written</font>

440
00:21:19,169 --> 00:21:26,960
in Java so if<font color="#CCCCCC"> graph compiles a method it</font>

441
00:21:22,559 --> 00:21:26,960
uses Java heap memory to do that

442
00:21:27,919 --> 00:21:35,490
in depending on the the<font color="#CCCCCC"> C one only</font><font color="#E5E5E5"> flag</font>

443
00:21:33,299 --> 00:21:37,320
that you're using<font color="#E5E5E5"> if you if you set that</font>

444
00:21:35,490 --> 00:21:39,600
to false all the<font color="#E5E5E5"> groud methods itself</font>

445
00:21:37,320 --> 00:21:42,240
will use Java heap memory<font color="#E5E5E5"> that that's</font>

446
00:21:39,600 --> 00:21:43,830
very<font color="#E5E5E5"> important because usually I'm we're</font>

447
00:21:42,240 --> 00:21:47,460
<font color="#CCCCCC">Twitter we do the same</font><font color="#E5E5E5"> right you tune</font>

448
00:21:43,830 --> 00:21:49,710
your heap to exactly like how much you

449
00:21:47,460 --> 00:21:51,600
need maybe a megabyte<font color="#E5E5E5"> of free memory but</font>

450
00:21:49,710 --> 00:21:54,360
then<font color="#E5E5E5"> suddenly a compilation can kick in</font>

451
00:21:51,600 --> 00:21:58,168
a big one<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> take up 100 or</font>

452
00:21:54,360 --> 00:22:03,418
200 megabyte of memory<font color="#E5E5E5"> so let's do a</font>

453
00:21:58,169 --> 00:22:04,890
quick three-minute Java heap demo<font color="#E5E5E5"> so</font>

454
00:22:03,419 --> 00:22:09,960
<font color="#CCCCCC">we're actually</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> over here</font>

455
00:22:04,890 --> 00:22:12,620
as<font color="#E5E5E5"> well what I want to do is yes no it's</font>

456
00:22:09,960 --> 00:22:16,470
still<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so we locked you see and</font>

457
00:22:12,620 --> 00:22:20,039
we run I think we were on<font color="#CCCCCC"> that</font><font color="#E5E5E5"> one again</font>

458
00:22:16,470 --> 00:22:22,370
we do that<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and then we see I'm using</font>

459
00:22:20,039 --> 00:22:25,289
this benchmark<font color="#E5E5E5"> because it's very</font>

460
00:22:22,370 --> 00:22:27,178
computationally intense and it's not

461
00:22:25,289 --> 00:22:29,610
really<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> allocation and she</font>

462
00:22:27,179 --> 00:22:31,380
sees<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> so it runs like</font><font color="#CCCCCC"> 10 seconds</font>

463
00:22:29,610 --> 00:22:33,449
<font color="#E5E5E5">right it and there is no GC happening</font>

464
00:22:31,380 --> 00:22:37,040
during the benchmark run it's just<font color="#E5E5E5"> the</font>

465
00:22:33,450 --> 00:22:40,040
this the da capo

466
00:22:37,040 --> 00:22:42,560
<font color="#E5E5E5">hardness does these</font><font color="#CCCCCC"> GCC's</font><font color="#E5E5E5"> very</font>

467
00:22:40,040 --> 00:22:49,490
explicitly<font color="#CCCCCC"> so if we do the same over</font>

468
00:22:42,560 --> 00:22:52,220
<font color="#E5E5E5">here we'll see that as a little bit more</font>

469
00:22:49,490 --> 00:22:54,410
going<font color="#E5E5E5"> on right and that's exactly what</font>

470
00:22:52,220 --> 00:22:56,900
I'm<font color="#E5E5E5"> talking about so if we are compiling</font>

471
00:22:54,410 --> 00:22:58,520
the Aurora benchmark itself<font color="#E5E5E5"> and while we</font>

472
00:22:56,900 --> 00:23:01,040
are compiling it<font color="#E5E5E5"> Grodd is using Java</font>

473
00:22:58,520 --> 00:23:04,760
heat memory for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so you have to be</font>

474
00:23:01,040 --> 00:23:06,320
aware of<font color="#E5E5E5"> this the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> two things</font><font color="#CCCCCC"> oh yeah</font>

475
00:23:04,760 --> 00:23:07,840
one thing I haven't<font color="#E5E5E5"> shown you</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> I want</font>

476
00:23:06,320 --> 00:23:13,460
to<font color="#E5E5E5"> show you that</font><font color="#CCCCCC"> too I still have</font><font color="#E5E5E5"> time</font>

477
00:23:07,840 --> 00:23:16,639
so there's something called<font color="#E5E5E5"> CI time it's</font>

478
00:23:13,460 --> 00:23:19,610
a really badly named option because what

479
00:23:16,640 --> 00:23:21,290
what did what that means is the compiler

480
00:23:19,610 --> 00:23:24,379
<font color="#E5E5E5">interface time that's not actually true</font>

481
00:23:21,290 --> 00:23:26,750
what it<font color="#E5E5E5"> really measures is the</font><font color="#CCCCCC"> compiled</font>

482
00:23:24,380 --> 00:23:28,520
broker time so how much time does it

483
00:23:26,750 --> 00:23:30,950
take to compile methods and how many

484
00:23:28,520 --> 00:23:37,160
methods does it compile<font color="#E5E5E5"> so let's do</font><font color="#CCCCCC"> that</font>

485
00:23:30,950 --> 00:23:40,760
<font color="#E5E5E5">over here - CI time and as we can</font><font color="#CCCCCC"> see</font>

486
00:23:37,160 --> 00:23:43,850
so we<font color="#CCCCCC"> compile about a thousand methods</font>

487
00:23:40,760 --> 00:23:45,920
with c1 and about<font color="#E5E5E5"> 300 with with C -</font>

488
00:23:43,850 --> 00:23:48,110
don't don't<font color="#E5E5E5"> pay too much attention at</font>

489
00:23:45,920 --> 00:23:50,060
the at the time and the<font color="#E5E5E5"> especially the</font>

490
00:23:48,110 --> 00:23:53,719
<font color="#CCCCCC">bytes down here when we look at the JVM</font>

491
00:23:50,060 --> 00:23:56,060
<font color="#E5E5E5">CI numbers because these contain this</font>

492
00:23:53,720 --> 00:23:58,550
number contains<font color="#E5E5E5"> inline bytes while the</font>

493
00:23:56,060 --> 00:24:02,060
JVM<font color="#CCCCCC"> CI</font><font color="#E5E5E5"> one doesn't and it's just the way</font>

494
00:23:58,550 --> 00:24:05,480
because it's<font color="#E5E5E5"> C++ code and it's hard</font><font color="#CCCCCC"> to</font>

495
00:24:02,060 --> 00:24:07,190
get that value<font color="#E5E5E5"> back into the VM so just</font>

496
00:24:05,480 --> 00:24:09,590
believe<font color="#CCCCCC"> me it's it's it's</font><font color="#E5E5E5"> really not</font>

497
00:24:07,190 --> 00:24:10,730
that important so we compiled about a

498
00:24:09,590 --> 00:24:15,409
thousand<font color="#E5E5E5"> here</font>

499
00:24:10,730 --> 00:24:18,260
and here we compiled<font color="#CCCCCC"> 6,000</font><font color="#E5E5E5"> okay and</font>

500
00:24:15,410 --> 00:24:21,980
that's all the ground stuff right<font color="#E5E5E5"> you</font>

501
00:24:18,260 --> 00:24:23,900
remember<font color="#CCCCCC"> the the implicit bootstrap is</font>

502
00:24:21,980 --> 00:24:26,660
compiling just with<font color="#CCCCCC"> c1 so we're</font>

503
00:24:23,900 --> 00:24:28,280
compiling roughly 5,000<font color="#CCCCCC"> additional</font>

504
00:24:26,660 --> 00:24:30,890
methods they're not all<font color="#CCCCCC"> ground methods</font>

505
00:24:28,280 --> 00:24:33,050
because there are also core library

506
00:24:30,890 --> 00:24:34,610
methods involved because<font color="#CCCCCC"> grodd</font><font color="#E5E5E5"> is</font>

507
00:24:33,050 --> 00:24:36,770
written in Java it uses a bunch more<font color="#CCCCCC"> of</font>

508
00:24:34,610 --> 00:24:38,510
the core of<font color="#E5E5E5"> the core</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> so core</font>

509
00:24:36,770 --> 00:24:43,810
library method methods get compiled as

510
00:24:38,510 --> 00:24:46,910
well and we compile<font color="#E5E5E5"> 400 with JVM CI</font>

511
00:24:43,810 --> 00:24:48,770
which I'm not exactly sure why we do

512
00:24:46,910 --> 00:24:50,080
that it's a hundred<font color="#E5E5E5"> more</font><font color="#CCCCCC"> and I also</font>

513
00:24:48,770 --> 00:24:51,549
think it's we

514
00:24:50,080 --> 00:24:53,408
have to look at the compilation output

515
00:24:51,549 --> 00:24:55,720
but I think it's also our core library

516
00:24:53,409 --> 00:24:57,850
methods because the<font color="#CCCCCC"> growl ones are only</font>

517
00:24:55,720 --> 00:25:00,100
compiled with<font color="#E5E5E5"> c1 but if something</font>

518
00:24:57,850 --> 00:25:01,689
because of<font color="#E5E5E5"> Gras gets hot in the core</font>

519
00:25:00,100 --> 00:25:04,000
library it will still get compiled with

520
00:25:01,690 --> 00:25:07,830
<font color="#CCCCCC">Tier four okay</font><font color="#E5E5E5"> does that</font><font color="#CCCCCC"> make sense I</font>

521
00:25:04,000 --> 00:25:07,830
hope<font color="#E5E5E5"> it does and I'm out of time</font>

522
00:25:13,640 --> 00:25:15,350
[Applause]

523
00:25:14,120 --> 00:25:18,449
[Music]

524
00:25:15,350 --> 00:25:18,449
[Applause]

525
00:25:20,159 --> 00:25:25,000
that's that's that's the last thing I'm

526
00:25:22,659 --> 00:25:27,610
saying so Java uses<font color="#CCCCCC"> chorale uses</font><font color="#E5E5E5"> Java</font>

527
00:25:25,000 --> 00:25:30,009
heap memory<font color="#E5E5E5"> that will change at some</font>

528
00:25:27,610 --> 00:25:33,100
point but at today we don't<font color="#E5E5E5"> have heap</font>

529
00:25:30,009 --> 00:25:35,440
isolation<font color="#E5E5E5"> and keep in</font><font color="#CCCCCC"> mind something</font>

530
00:25:33,100 --> 00:25:38,918
<font color="#CCCCCC">that Christine also</font><font color="#E5E5E5"> said it's important</font>

531
00:25:35,440 --> 00:25:41,529
how much memory<font color="#E5E5E5"> you achieve JVM uses</font>

532
00:25:38,919 --> 00:25:43,629
because<font color="#CCCCCC"> situ also uses that hundred or</font>

533
00:25:41,529 --> 00:25:45,190
<font color="#E5E5E5">200 megabytes to compile a method it's</font>

534
00:25:43,629 --> 00:25:45,850
just not as visible because<font color="#E5E5E5"> it's not on</font>

535
00:25:45,190 --> 00:25:48,600
the Java<font color="#CCCCCC"> key</font>

536
00:25:45,850 --> 00:25:55,530
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right thank you</font>

537
00:25:48,600 --> 00:25:55,530
[Applause]

