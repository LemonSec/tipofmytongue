1
00:00:06,780 --> 00:00:13,719
welcome<font color="#E5E5E5"> everybody and I'm very happy</font>

2
00:00:11,020 --> 00:00:15,700
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you made it here</font><font color="#CCCCCC"> especially</font>

3
00:00:13,719 --> 00:00:19,419
considering that<font color="#E5E5E5"> it's 9:30 in</font><font color="#CCCCCC"> the</font>

4
00:00:15,700 --> 00:00:20,980
morning on a<font color="#CCCCCC"> Sunday and</font><font color="#E5E5E5"> maybe I feel</font><font color="#CCCCCC"> of</font>

5
00:00:19,420 --> 00:00:23,170
<font color="#E5E5E5">you have been drinking yesterday so I</font>

6
00:00:20,980 --> 00:00:28,210
appreciate it<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the people that are</font>

7
00:00:23,170 --> 00:00:31,179
<font color="#E5E5E5">on the livestream</font><font color="#CCCCCC"> kudos to</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> I hope I</font>

8
00:00:28,210 --> 00:00:35,170
don't disappoint<font color="#E5E5E5"> what I want to talk to</font>

9
00:00:31,179 --> 00:00:38,620
you about is<font color="#E5E5E5"> a dramatic rust and it's a</font>

10
00:00:35,170 --> 00:00:41,860
huge topic<font color="#CCCCCC"> I want to show you a little</font>

11
00:00:38,620 --> 00:00:45,820
<font color="#E5E5E5">bit on what I learned in my journey</font>

12
00:00:41,860 --> 00:00:51,670
using rust<font color="#E5E5E5"> in a last a couple of years</font>

13
00:00:45,820 --> 00:00:53,100
<font color="#CCCCCC">and how my code evolved over time but</font>

14
00:00:51,670 --> 00:00:57,250
<font color="#E5E5E5">first Who am I</font>

15
00:00:53,100 --> 00:01:01,629
<font color="#E5E5E5">i'm mateus I live in Dusseldorf</font>

16
00:00:57,250 --> 00:01:03,670
I'm a<font color="#CCCCCC"> backing engineer at Chicago I do a</font>

17
00:01:01,629 --> 00:01:07,480
lot with<font color="#E5E5E5"> website performance monitoring</font>

18
00:01:03,670 --> 00:01:09,520
metrics<font color="#E5E5E5"> talk to me</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it I'll do like</font>

19
00:01:07,480 --> 00:01:12,310
programming languages a lot<font color="#E5E5E5"> so I'm kind</font>

20
00:01:09,520 --> 00:01:15,130
<font color="#E5E5E5">of a language nerd and I also like hot</font>

21
00:01:12,310 --> 00:01:17,640
<font color="#CCCCCC">chocolate you can</font><font color="#E5E5E5"> find me on various</font>

22
00:01:15,130 --> 00:01:21,908
<font color="#E5E5E5">places on the internet so on</font><font color="#CCCCCC"> Twitter</font><font color="#E5E5E5"> and</font>

23
00:01:17,640 --> 00:01:25,659
<font color="#E5E5E5">I also have a website and now you know</font>

24
00:01:21,909 --> 00:01:29,500
my my your expectations are somewhere

25
00:01:25,659 --> 00:01:32,350
here<font color="#E5E5E5"> for this talk but</font><font color="#CCCCCC"> rust is a big</font>

26
00:01:29,500 --> 00:01:36,220
language<font color="#E5E5E5"> and it's getting bigger every</font>

27
00:01:32,350 --> 00:01:38,829
<font color="#CCCCCC">day so I cannot possibly cover</font>

28
00:01:36,220 --> 00:01:44,460
everything<font color="#E5E5E5"> in 20 minutes that's insane</font>

29
00:01:38,829 --> 00:01:44,460
so lower your<font color="#E5E5E5"> expectations a</font><font color="#CCCCCC"> little bit</font>

30
00:01:44,579 --> 00:01:47,500
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be something more</font>

31
00:01:46,960 --> 00:01:51,460
practical

32
00:01:47,500 --> 00:01:53,649
<font color="#E5E5E5">something more hands-on</font><font color="#CCCCCC"> you might be</font>

33
00:01:51,460 --> 00:01:57,520
saying<font color="#E5E5E5"> okay right why should</font><font color="#CCCCCC"> I even</font><font color="#E5E5E5"> care</font>

34
00:01:53,649 --> 00:02:02,610
why<font color="#CCCCCC"> should</font><font color="#E5E5E5"> I watch this talk well when I</font>

35
00:01:57,520 --> 00:02:06,610
started<font color="#CCCCCC"> programming I was</font><font color="#E5E5E5"> I was</font>

36
00:02:02,610 --> 00:02:09,699
attracted by languages that were simple

37
00:02:06,610 --> 00:02:12,880
beautiful elegant that<font color="#E5E5E5"> had a concise</font>

38
00:02:09,699 --> 00:02:15,459
syntax<font color="#E5E5E5"> and I had a favorite language of</font>

39
00:02:12,880 --> 00:02:17,769
course<font color="#E5E5E5"> and by now</font><font color="#CCCCCC"> you might have guessed</font>

40
00:02:15,460 --> 00:02:18,930
which language that is of course it's

41
00:02:17,770 --> 00:02:22,230
Python

42
00:02:18,930 --> 00:02:27,090
and I did a lot of<font color="#E5E5E5"> Python in the past</font>

43
00:02:22,230 --> 00:02:32,069
and I<font color="#E5E5E5"> appreciated what</font><font color="#CCCCCC"> they call</font><font color="#E5E5E5"> the sin</font>

44
00:02:27,090 --> 00:02:33,390
of Python<font color="#E5E5E5"> which is those rules here are</font>

45
00:02:32,069 --> 00:02:36,149
the rules

46
00:02:33,390 --> 00:02:38,129
I hope you all<font color="#E5E5E5"> read them all they are</font>

47
00:02:36,150 --> 00:02:40,109
<font color="#CCCCCC">very important there will be a test</font>

48
00:02:38,129 --> 00:02:42,569
<font color="#CCCCCC">after the talk</font><font color="#E5E5E5"> now</font>

49
00:02:40,109 --> 00:02:45,629
those rules they are more or less the

50
00:02:42,569 --> 00:02:49,828
the the gist of what<font color="#CCCCCC"> it</font><font color="#E5E5E5"> means to write</font>

51
00:02:45,629 --> 00:02:54,030
good well-formed Python code pythonic

52
00:02:49,829 --> 00:02:56,489
code<font color="#E5E5E5"> it's even a word</font><font color="#CCCCCC"> you know we're not</font>

53
00:02:54,030 --> 00:02:58,170
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> about Python anymore but</font>

54
00:02:56,489 --> 00:03:03,030
we want to talk<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit about rust</font>

55
00:02:58,170 --> 00:03:05,099
<font color="#E5E5E5">what is automatic rust and for that you</font>

56
00:03:03,030 --> 00:03:06,359
<font color="#E5E5E5">need to know what is automatic</font><font color="#CCCCCC"> I hope</font>

57
00:03:05,099 --> 00:03:08,040
you've seen the previous<font color="#CCCCCC"> start from</font>

58
00:03:06,359 --> 00:03:11,670
<font color="#CCCCCC">Antonin which is super awesome</font><font color="#E5E5E5"> you</font>

59
00:03:08,040 --> 00:03:14,569
should<font color="#CCCCCC"> check it out if</font><font color="#E5E5E5"> not so I will</font>

60
00:03:11,670 --> 00:03:17,099
focus on the idea Matic part here and

61
00:03:14,569 --> 00:03:20,220
there is a definition<font color="#E5E5E5"> which I quite</font><font color="#CCCCCC"> like</font>

62
00:03:17,099 --> 00:03:22,048
which<font color="#E5E5E5"> is the most concise convenient and</font>

63
00:03:20,220 --> 00:03:23,699
common way of<font color="#E5E5E5"> accomplishing a task in a</font>

64
00:03:22,049 --> 00:03:25,410
programming<font color="#E5E5E5"> language that's from the</font>

65
00:03:23,699 --> 00:03:27,239
main three that's<font color="#E5E5E5"> from not from me all</font>

66
00:03:25,410 --> 00:03:30,060
of those things underlined are<font color="#CCCCCC"> links</font><font color="#E5E5E5"> so</font>

67
00:03:27,239 --> 00:03:33,150
you<font color="#E5E5E5"> can check them out</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's</font>

68
00:03:30,060 --> 00:03:36,840
quite awesome<font color="#CCCCCC"> this</font><font color="#E5E5E5"> description because</font>

69
00:03:33,150 --> 00:03:39,060
yeah it's concise<font color="#E5E5E5"> convenient and common</font>

70
00:03:36,840 --> 00:03:40,949
so<font color="#CCCCCC"> that makes it automatic and</font><font color="#E5E5E5"> not in</font>

71
00:03:39,060 --> 00:03:42,750
any programming language<font color="#CCCCCC"> but in a</font>

72
00:03:40,949 --> 00:03:44,639
<font color="#E5E5E5">programming language you're writing it</font>

73
00:03:42,750 --> 00:03:46,620
should feel natural in the language

74
00:03:44,639 --> 00:03:49,650
you're writing so if you're a Java

75
00:03:46,620 --> 00:03:51,449
<font color="#CCCCCC">developer</font><font color="#E5E5E5"> this might be idea Matic Java</font>

76
00:03:49,650 --> 00:03:56,609
<font color="#CCCCCC">I'm just kidding</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> course I'm</font><font color="#E5E5E5"> just</font>

77
00:03:51,449 --> 00:03:58,620
kidding<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> non idea magic code you</font>

78
00:03:56,609 --> 00:04:01,889
can see here<font color="#E5E5E5"> that this code will work</font>

79
00:03:58,620 --> 00:04:04,229
<font color="#E5E5E5">it's checking for a boolean value but in</font>

80
00:04:01,889 --> 00:04:05,970
a<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of awkward way if you like those</font>

81
00:04:04,229 --> 00:04:07,949
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of things</font><font color="#E5E5E5"> there's also</font><font color="#CCCCCC"> leak down to</font>

82
00:04:05,970 --> 00:04:13,260
the down at the bottom<font color="#CCCCCC"> for more of those</font>

83
00:04:07,949 --> 00:04:15,900
and but everybody<font color="#CCCCCC"> can agree that this is</font>

84
00:04:13,260 --> 00:04:17,969
<font color="#E5E5E5">not really a geometric code right most</font>

85
00:04:15,900 --> 00:04:21,239
people will say<font color="#E5E5E5"> yeah that</font><font color="#CCCCCC"> doesn't feel</font>

86
00:04:17,970 --> 00:04:24,570
<font color="#E5E5E5">right</font><font color="#CCCCCC"> but what is</font><font color="#E5E5E5"> really good code what</font>

87
00:04:21,238 --> 00:04:29,520
is solid ergonomic natural code<font color="#CCCCCC"> you can</font>

88
00:04:24,570 --> 00:04:31,830
focus<font color="#E5E5E5"> on many things but if most people</font>

89
00:04:29,520 --> 00:04:32,820
<font color="#CCCCCC">would say yeah you could focus</font><font color="#E5E5E5"> around</font>

90
00:04:31,830 --> 00:04:36,349
those areas

91
00:04:32,820 --> 00:04:39,540
syntax semantics and design patterns<font color="#CCCCCC"> and</font>

92
00:04:36,350 --> 00:04:41,730
<font color="#CCCCCC">since this is a</font><font color="#E5E5E5"> small talk</font><font color="#CCCCCC"> I'm not going</font>

93
00:04:39,540 --> 00:04:44,990
<font color="#E5E5E5">to talk about syntax</font><font color="#CCCCCC"> or design patterns</font>

94
00:04:41,730 --> 00:04:48,900
<font color="#E5E5E5">I'm talking about semantics for syntax</font>

95
00:04:44,990 --> 00:04:51,570
<font color="#CCCCCC">just use a standard any standard can be</font>

96
00:04:48,900 --> 00:04:55,140
rust<font color="#E5E5E5"> form it actually use rust</font><font color="#CCCCCC"> format</font>

97
00:04:51,570 --> 00:04:57,210
it's quite nice<font color="#CCCCCC"> for design patterns</font>

98
00:04:55,140 --> 00:05:00,270
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> a project from one</font><font color="#CCCCCC"> of the core</font>

99
00:04:57,210 --> 00:05:03,150
<font color="#E5E5E5">members</font><font color="#CCCCCC"> Nick or Cameron rust unofficial</font>

100
00:05:00,270 --> 00:05:05,760
patterns<font color="#CCCCCC"> do checked it out</font><font color="#E5E5E5"> but for</font>

101
00:05:03,150 --> 00:05:08,849
semantics<font color="#CCCCCC"> I did not know where to</font><font color="#E5E5E5"> start</font>

102
00:05:05,760 --> 00:05:11,130
and I was looking<font color="#CCCCCC"> for a lot of resources</font>

103
00:05:08,850 --> 00:05:15,540
<font color="#E5E5E5">and I couldn't find him when I started</font>

104
00:05:11,130 --> 00:05:22,460
<font color="#E5E5E5">there was literally none so I had an</font>

105
00:05:15,540 --> 00:05:27,750
idea what what if<font color="#E5E5E5"> I started collecting a</font>

106
00:05:22,460 --> 00:05:31,530
list<font color="#E5E5E5"> of things where intermediate rusty</font>

107
00:05:27,750 --> 00:05:34,710
developers could go and read<font color="#CCCCCC"> about more</font>

108
00:05:31,530 --> 00:05:38,880
<font color="#CCCCCC">sophisticated code so there are a</font><font color="#E5E5E5"> few</font>

109
00:05:34,710 --> 00:05:41,219
links<font color="#E5E5E5"> from projects and talks actually</font><font color="#CCCCCC"> a</font>

110
00:05:38,880 --> 00:05:44,370
lot of<font color="#CCCCCC"> people that contributed</font><font color="#E5E5E5"> are here</font>

111
00:05:41,220 --> 00:05:46,890
so yeah ask them<font color="#E5E5E5"> if they know something</font>

112
00:05:44,370 --> 00:05:49,860
<font color="#CCCCCC">about it please</font><font color="#E5E5E5"> contribute to that I</font>

113
00:05:46,890 --> 00:05:51,870
guess this will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> a first</font><font color="#CCCCCC"> step towards</font>

114
00:05:49,860 --> 00:05:53,490
<font color="#E5E5E5">something that is a guideline not a</font><font color="#CCCCCC"> sign</font>

115
00:05:51,870 --> 00:05:55,620
of Python<font color="#CCCCCC"> because we are not</font><font color="#E5E5E5"> Python we</font>

116
00:05:53,490 --> 00:05:59,580
don't want to be Python we want to be

117
00:05:55,620 --> 00:06:03,870
something like rust but a start of a

118
00:05:59,580 --> 00:06:06,690
conversation on how<font color="#CCCCCC"> to write</font><font color="#E5E5E5"> idea</font>

119
00:06:03,870 --> 00:06:08,760
<font color="#CCCCCC">Metagross code so if you</font><font color="#E5E5E5"> find something</font>

120
00:06:06,690 --> 00:06:09,530
on<font color="#E5E5E5"> the web</font><font color="#CCCCCC"> and you say this</font><font color="#E5E5E5"> is missing</font>

121
00:06:08,760 --> 00:06:12,180
on the list

122
00:06:09,530 --> 00:06:14,130
shoot me<font color="#CCCCCC"> poor request</font><font color="#E5E5E5"> I'm gonna</font>

123
00:06:12,180 --> 00:06:16,770
<font color="#CCCCCC">transferred it eventually to some</font>

124
00:06:14,130 --> 00:06:20,130
official<font color="#CCCCCC"> space so</font><font color="#E5E5E5"> you are not locked in</font>

125
00:06:16,770 --> 00:06:25,109
or<font color="#E5E5E5"> something I would happily accept your</font>

126
00:06:20,130 --> 00:06:28,020
recommendations for that that is all

127
00:06:25,110 --> 00:06:31,230
<font color="#E5E5E5">very nice and stuff</font><font color="#CCCCCC"> but it's also very</font>

128
00:06:28,020 --> 00:06:34,349
theoretical<font color="#E5E5E5"> so why not look at a very</font>

129
00:06:31,230 --> 00:06:38,280
<font color="#CCCCCC">practical example and for that</font><font color="#E5E5E5"> I thought</font>

130
00:06:34,350 --> 00:06:40,380
we build a little tool<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> library</font>

131
00:06:38,280 --> 00:06:43,380
and the case study<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be</font>

132
00:06:40,380 --> 00:06:45,780
handling<font color="#E5E5E5"> money in rust</font><font color="#CCCCCC"> so we think</font><font color="#E5E5E5"> about</font>

133
00:06:43,380 --> 00:06:46,719
the<font color="#E5E5E5"> data object how does a data</font><font color="#CCCCCC"> object</font>

134
00:06:45,780 --> 00:06:49,809
look like and how does the

135
00:06:46,720 --> 00:06:53,170
<font color="#CCCCCC">Pilar help us guiding</font><font color="#E5E5E5"> us along towards</font>

136
00:06:49,810 --> 00:06:56,380
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that is more convenient</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font>

137
00:06:53,170 --> 00:06:59,500
and feels<font color="#E5E5E5"> very</font><font color="#CCCCCC"> natural so the task is</font>

138
00:06:56,380 --> 00:07:03,100
parse money<font color="#E5E5E5"> what can</font><font color="#CCCCCC"> go wrong</font><font color="#E5E5E5"> let's</font>

139
00:06:59,500 --> 00:07:06,010
parse some money<font color="#CCCCCC"> so twenty dollars forty</font>

140
00:07:03,100 --> 00:07:09,880
<font color="#CCCCCC">two</font><font color="#E5E5E5"> cents or 140 euros this is our task</font>

141
00:07:06,010 --> 00:07:13,630
for the<font color="#CCCCCC"> next couple</font><font color="#E5E5E5"> minutes and as a</font>

142
00:07:09,880 --> 00:07:16,120
beginning rust programmer you might

143
00:07:13,630 --> 00:07:18,730
start<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a function like</font><font color="#E5E5E5"> this you take</font>

144
00:07:16,120 --> 00:07:23,110
an<font color="#E5E5E5"> input which is</font><font color="#CCCCCC"> aster</font><font color="#E5E5E5"> which is a</font>

145
00:07:18,730 --> 00:07:26,380
borrowed string<font color="#E5E5E5"> which lives on a stack</font>

146
00:07:23,110 --> 00:07:27,790
and<font color="#CCCCCC"> you do something with it and this</font>

147
00:07:26,380 --> 00:07:29,409
<font color="#E5E5E5">something might</font><font color="#CCCCCC"> go a little</font><font color="#E5E5E5"> bit like</font>

148
00:07:27,790 --> 00:07:32,320
<font color="#E5E5E5">this first you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> decide what you</font>

149
00:07:29,410 --> 00:07:34,690
want to<font color="#E5E5E5"> return so you could say yeah</font><font color="#CCCCCC"> I</font>

150
00:07:32,320 --> 00:07:38,469
<font color="#E5E5E5">don't know</font><font color="#CCCCCC"> in my previous language</font><font color="#E5E5E5"> I use</font>

151
00:07:34,690 --> 00:07:41,830
a tuple for that I say my monetary value

152
00:07:38,470 --> 00:07:45,130
is an i-32 so an integer and the

153
00:07:41,830 --> 00:07:47,440
<font color="#E5E5E5">currency is a string so I take the input</font>

154
00:07:45,130 --> 00:07:50,890
I split it<font color="#E5E5E5"> on the whitespace and I</font>

155
00:07:47,440 --> 00:07:53,560
collected into a vector<font color="#E5E5E5"> so this part</font>

156
00:07:50,890 --> 00:07:55,780
thing in the end<font color="#E5E5E5"> has two components if</font>

157
00:07:53,560 --> 00:07:58,180
everything was right<font color="#E5E5E5"> one is the monetary</font>

158
00:07:55,780 --> 00:08:00,700
<font color="#CCCCCC">value or the amount and</font><font color="#E5E5E5"> the other one is</font>

159
00:07:58,180 --> 00:08:04,510
the currency now we check if we<font color="#CCCCCC"> have an</font>

160
00:08:00,700 --> 00:08:07,830
amount<font color="#E5E5E5"> we just parse the first element</font>

161
00:08:04,510 --> 00:08:10,419
in<font color="#E5E5E5"> our vector and if we have an error</font>

162
00:08:07,830 --> 00:08:14,109
where we return some magic number as we

163
00:08:10,419 --> 00:08:18,609
do in C or<font color="#E5E5E5"> any many other languages</font><font color="#CCCCCC"> and</font>

164
00:08:14,110 --> 00:08:21,940
we say we<font color="#CCCCCC"> have this invalid currency and</font>

165
00:08:18,610 --> 00:08:24,820
if not then everything was<font color="#CCCCCC"> alright and</font>

166
00:08:21,940 --> 00:08:28,240
we<font color="#CCCCCC"> just take the second element from our</font>

167
00:08:24,820 --> 00:08:30,790
vector which<font color="#E5E5E5"> contains the currency we</font>

168
00:08:28,240 --> 00:08:38,469
<font color="#CCCCCC">pass it to into a string</font><font color="#E5E5E5"> and we return</font>

169
00:08:30,790 --> 00:08:43,240
it as a tuple yeah can work not<font color="#E5E5E5"> so</font>

170
00:08:38,469 --> 00:08:44,770
<font color="#E5E5E5">beautiful why well let's look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> a</font>

171
00:08:43,240 --> 00:08:49,180
little<font color="#E5E5E5"> bit about what I'm</font><font color="#CCCCCC"> doing you</font><font color="#E5E5E5"> I</font>

172
00:08:44,770 --> 00:08:51,640
have this explicit<font color="#CCCCCC"> error check so I'm</font>

173
00:08:49,180 --> 00:08:54,040
checking<font color="#E5E5E5"> I have a condition</font>

174
00:08:51,640 --> 00:08:56,949
so I'm branching I need to have more

175
00:08:54,040 --> 00:08:59,380
mental overhead to remember that<font color="#CCCCCC"> there</font>

176
00:08:56,950 --> 00:09:00,279
can be<font color="#E5E5E5"> something wrong and also I have</font>

177
00:08:59,380 --> 00:09:03,910
this

178
00:09:00,279 --> 00:09:06,790
number<font color="#CCCCCC"> -1 which you need</font><font color="#E5E5E5"> to remember is</font>

179
00:09:03,910 --> 00:09:09,819
<font color="#CCCCCC">not</font><font color="#E5E5E5"> a correct value and</font><font color="#CCCCCC"> -1 is a totally</font>

180
00:09:06,790 --> 00:09:13,209
correct<font color="#E5E5E5"> value</font><font color="#CCCCCC"> for a currency for for a</font>

181
00:09:09,819 --> 00:09:14,860
monetary<font color="#CCCCCC"> value</font><font color="#E5E5E5"> and invalid yeah somebody</font>

182
00:09:13,209 --> 00:09:19,540
invents a currency called invalid<font color="#E5E5E5"> well</font>

183
00:09:14,860 --> 00:09:21,189
<font color="#E5E5E5">bad luck</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> but nevertheless most</font>

184
00:09:19,540 --> 00:09:23,800
people in a<font color="#CCCCCC"> community might agree</font><font color="#E5E5E5"> that</font>

185
00:09:21,189 --> 00:09:27,189
<font color="#CCCCCC">this is not the way you write solid</font><font color="#E5E5E5"> Ross</font>

186
00:09:23,800 --> 00:09:29,920
code so the first thing you<font color="#E5E5E5"> can do in a</font>

187
00:09:27,189 --> 00:09:33,339
prototype<font color="#CCCCCC"> is to replace</font><font color="#E5E5E5"> this error</font>

188
00:09:29,920 --> 00:09:36,279
checking with unrep<font color="#CCCCCC"> a lot of people will</font>

189
00:09:33,339 --> 00:09:39,399
say unrep is evil<font color="#CCCCCC"> I don't think so</font>

190
00:09:36,279 --> 00:09:41,529
<font color="#CCCCCC">unwrapped is very can be very idea Matic</font>

191
00:09:39,399 --> 00:09:43,720
<font color="#E5E5E5">especially if you're writing a prototype</font>

192
00:09:41,529 --> 00:09:46,209
and<font color="#E5E5E5"> if you want to do get something done</font>

193
00:09:43,720 --> 00:09:49,540
real<font color="#CCCCCC"> quick then</font><font color="#E5E5E5"> unwrap can help you</font>

194
00:09:46,209 --> 00:09:56,199
because later<font color="#E5E5E5"> on actually</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> unwrap</font>

195
00:09:49,540 --> 00:09:58,748
<font color="#E5E5E5">unwrap will just try and fail and there</font>

196
00:09:56,199 --> 00:10:00,670
will be a panic<font color="#CCCCCC"> if there was a failure</font>

197
00:09:58,749 --> 00:10:03,069
so you might say wow this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> dangerous</font>

198
00:10:00,670 --> 00:10:04,959
and<font color="#E5E5E5"> it is but also it helps</font><font color="#CCCCCC"> you get</font>

199
00:10:03,069 --> 00:10:08,259
going<font color="#E5E5E5"> you don't need to think about the</font>

200
00:10:04,959 --> 00:10:11,109
error handling part in the beginning<font color="#E5E5E5"> so</font>

201
00:10:08,259 --> 00:10:15,389
that's not<font color="#CCCCCC"> bad</font><font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> a pattern</font><font color="#E5E5E5"> that</font>

202
00:10:11,110 --> 00:10:18,790
<font color="#E5E5E5">a lot of people use and you will see why</font>

203
00:10:15,389 --> 00:10:21,970
so if we take this library<font color="#CCCCCC"> actually this</font>

204
00:10:18,790 --> 00:10:27,660
function<font color="#E5E5E5"> parses our thing we can use it</font>

205
00:10:21,970 --> 00:10:32,670
to parse our money and we're done<font color="#E5E5E5"> right</font>

206
00:10:27,660 --> 00:10:40,600
well what if somebody tries to parse

207
00:10:32,670 --> 00:10:43,089
some<font color="#E5E5E5"> sub euro amount well bad</font><font color="#CCCCCC"> luck you</font>

208
00:10:40,600 --> 00:10:46,149
get<font color="#E5E5E5"> a compile error</font><font color="#CCCCCC"> actually a runtime</font>

209
00:10:43,089 --> 00:10:50,050
error<font color="#E5E5E5"> with a panic even though rust is</font>

210
00:10:46,149 --> 00:10:53,730
safe<font color="#E5E5E5"> it cannot save you from not</font>

211
00:10:50,050 --> 00:10:58,029
<font color="#E5E5E5">declaring what you want so our intent</font>

212
00:10:53,730 --> 00:10:59,649
our intent<font color="#E5E5E5"> we must define actually this</font>

213
00:10:58,029 --> 00:11:02,980
is my<font color="#E5E5E5"> colleague scat</font><font color="#CCCCCC"> I think it's very</font>

214
00:10:59,649 --> 00:11:05,170
<font color="#E5E5E5">ugly but that's just a side note</font><font color="#CCCCCC"> it</font>

215
00:11:02,980 --> 00:11:08,529
<font color="#E5E5E5">should be a</font><font color="#CCCCCC"> meme somewhere</font><font color="#E5E5E5"> so we get an</font>

216
00:11:05,170 --> 00:11:11,170
error saying<font color="#CCCCCC"> called result unread on</font>

217
00:11:08,529 --> 00:11:13,800
error and then we have this weird parse

218
00:11:11,170 --> 00:11:18,699
in error<font color="#E5E5E5"> invalid digit and</font><font color="#CCCCCC"> so on</font>

219
00:11:13,800 --> 00:11:21,640
<font color="#E5E5E5">what happened well turns out we panic on</font>

220
00:11:18,700 --> 00:11:24,550
this<font color="#E5E5E5"> unrep here</font><font color="#CCCCCC"> I told you well it's</font>

221
00:11:21,640 --> 00:11:26,740
it's<font color="#E5E5E5"> totally fine</font><font color="#CCCCCC"> to use that</font><font color="#E5E5E5"> and the</font>

222
00:11:24,550 --> 00:11:29,650
reason why is<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> later when</font>

223
00:11:26,740 --> 00:11:31,750
you<font color="#E5E5E5"> have something running</font><font color="#CCCCCC"> search</font><font color="#E5E5E5"> for</font>

224
00:11:29,650 --> 00:11:34,030
<font color="#CCCCCC">unrep in your code</font><font color="#E5E5E5"> and just replace it</font>

225
00:11:31,750 --> 00:11:37,330
<font color="#E5E5E5">with something nicer and have error</font>

226
00:11:34,030 --> 00:11:39,220
handling<font color="#CCCCCC"> out</font><font color="#E5E5E5"> of the box</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> have the</font>

227
00:11:37,330 --> 00:11:42,880
best<font color="#E5E5E5"> of both worlds</font><font color="#CCCCCC"> rapid prototyping</font>

228
00:11:39,220 --> 00:11:44,830
and safety when<font color="#CCCCCC"> you need it so one</font>

229
00:11:42,880 --> 00:11:48,189
<font color="#E5E5E5">common pattern to use is you replace</font>

230
00:11:44,830 --> 00:11:50,080
<font color="#CCCCCC">that unwrap with something we call the</font>

231
00:11:48,190 --> 00:11:52,620
<font color="#CCCCCC">question</font><font color="#E5E5E5"> mark operator or</font><font color="#CCCCCC"> the carrier</font>

232
00:11:50,080 --> 00:11:55,690
<font color="#E5E5E5">operator that's in line number</font><font color="#CCCCCC"> three</font>

233
00:11:52,620 --> 00:11:57,040
<font color="#E5E5E5">behind the pars we just replaced</font><font color="#CCCCCC"> unwrap</font>

234
00:11:55,690 --> 00:11:59,620
with question<font color="#E5E5E5"> one let</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> go back</font><font color="#CCCCCC"> one</font>

235
00:11:57,040 --> 00:12:02,319
second<font color="#E5E5E5"> you see unwrapped becomes a</font>

236
00:11:59,620 --> 00:12:05,260
question<font color="#CCCCCC"> mark</font><font color="#E5E5E5"> and then we return a</font>

237
00:12:02,320 --> 00:12:08,350
result<font color="#E5E5E5"> so in the end and line number</font>

238
00:12:05,260 --> 00:12:11,950
five you see<font color="#E5E5E5"> okay that</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> correct</font>

239
00:12:08,350 --> 00:12:14,530
result so when everything<font color="#E5E5E5"> went right</font><font color="#CCCCCC"> the</font>

240
00:12:11,950 --> 00:12:16,630
happy path and if there's an error or so

241
00:12:14,530 --> 00:12:18,280
then for example<font color="#E5E5E5"> in line number three</font>

242
00:12:16,630 --> 00:12:20,920
the question mark means there can be an

243
00:12:18,280 --> 00:12:23,260
error<font color="#E5E5E5"> so in this case we just</font><font color="#CCCCCC"> returned</font>

244
00:12:20,920 --> 00:12:25,180
<font color="#E5E5E5">in parts</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> error you can see in line</font>

245
00:12:23,260 --> 00:12:28,420
number<font color="#CCCCCC"> one at the</font><font color="#E5E5E5"> end there's the parts</font>

246
00:12:25,180 --> 00:12:30,910
<font color="#E5E5E5">in error now so we just pass on the</font>

247
00:12:28,420 --> 00:12:33,160
arrow<font color="#CCCCCC"> through the caller</font><font color="#E5E5E5"> and we don't</font>

248
00:12:30,910 --> 00:12:35,650
deal with error handling<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> it's</font>

249
00:12:33,160 --> 00:12:38,469
it's also a better concept<font color="#E5E5E5"> and</font>

250
00:12:35,650 --> 00:12:40,930
exceptions for us because<font color="#E5E5E5"> these are zero</font>

251
00:12:38,470 --> 00:12:44,650
cost you don't have a runtime<font color="#E5E5E5"> overhead</font>

252
00:12:40,930 --> 00:12:46,839
with that<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> have it's</font><font color="#E5E5E5"> very concise</font>

253
00:12:44,650 --> 00:12:49,300
and the way you want<font color="#E5E5E5"> to write your code</font>

254
00:12:46,840 --> 00:12:52,230
and in the way of error conditions that

255
00:12:49,300 --> 00:12:54,939
<font color="#E5E5E5">can happen so all of that is covered now</font>

256
00:12:52,230 --> 00:12:56,700
and<font color="#CCCCCC"> by</font><font color="#E5E5E5"> covered I</font><font color="#CCCCCC"> mean if you take</font><font color="#E5E5E5"> the</font>

257
00:12:54,940 --> 00:13:00,670
same example from<font color="#E5E5E5"> before</font>

258
00:12:56,700 --> 00:13:03,010
at least we don't panic anymore so but

259
00:13:00,670 --> 00:13:06,040
we get something<font color="#E5E5E5"> which is looking a bit</font>

260
00:13:03,010 --> 00:13:09,819
foreign<font color="#CCCCCC"> or a bit alien you get an error</font>

261
00:13:06,040 --> 00:13:11,980
parsing error of kind invalid digit so

262
00:13:09,820 --> 00:13:14,740
parse int error is in fact an enum and

263
00:13:11,980 --> 00:13:18,040
enum has actually<font color="#E5E5E5"> percent error has a</font>

264
00:13:14,740 --> 00:13:22,510
kind field<font color="#E5E5E5"> and kind can be many</font>

265
00:13:18,040 --> 00:13:23,890
<font color="#CCCCCC">different types of</font><font color="#E5E5E5"> error kind and for a</font>

266
00:13:22,510 --> 00:13:27,370
<font color="#CCCCCC">Rustaveli but that totally makes sense</font>

267
00:13:23,890 --> 00:13:30,699
<font color="#E5E5E5">but maybe not</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a non rusty</font>

268
00:13:27,370 --> 00:13:34,450
or somebody using your library<font color="#E5E5E5"> em but</font>

269
00:13:30,700 --> 00:13:40,450
<font color="#CCCCCC">first we're trying to pause a float here</font>

270
00:13:34,450 --> 00:13:42,640
right and we get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> parse int error so we</font>

271
00:13:40,450 --> 00:13:46,450
use the wrong type for the parsing<font color="#CCCCCC"> if we</font>

272
00:13:42,640 --> 00:13:46,839
want to<font color="#E5E5E5"> pause</font><font color="#CCCCCC"> the float maybe use</font><font color="#E5E5E5"> the</font>

273
00:13:46,450 --> 00:13:49,089
float

274
00:13:46,839 --> 00:13:51,760
they're my people people here in the

275
00:13:49,089 --> 00:13:54,279
audience<font color="#E5E5E5"> which have a little experience</font>

276
00:13:51,760 --> 00:13:55,650
<font color="#E5E5E5">on how to handle money float is not a</font>

277
00:13:54,279 --> 00:13:58,870
good<font color="#E5E5E5"> idea</font>

278
00:13:55,650 --> 00:14:03,550
don't use float in production code<font color="#E5E5E5"> this</font>

279
00:13:58,870 --> 00:14:06,010
<font color="#E5E5E5">is not about proper business logic this</font>

280
00:14:03,550 --> 00:14:09,279
<font color="#E5E5E5">is about rust so that's why in this talk</font>

281
00:14:06,010 --> 00:14:10,930
<font color="#E5E5E5">is fine but for production use please</font>

282
00:14:09,279 --> 00:14:12,790
check out the link at<font color="#E5E5E5"> the bottom which</font>

283
00:14:10,930 --> 00:14:15,550
you<font color="#E5E5E5"> totally cannot read</font><font color="#CCCCCC"> any more like I</font>

284
00:14:12,790 --> 00:14:17,260
see<font color="#CCCCCC"> faces</font><font color="#E5E5E5"> stretching up but there is a</font>

285
00:14:15,550 --> 00:14:18,930
link at the<font color="#CCCCCC"> bottom saying caution</font><font color="#E5E5E5"> please</font>

286
00:14:17,260 --> 00:14:23,260
don't use<font color="#CCCCCC"> float for real-world money</font>

287
00:14:18,930 --> 00:14:24,849
<font color="#CCCCCC">objects</font><font color="#E5E5E5"> in this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to improve</font>

288
00:14:23,260 --> 00:14:26,980
<font color="#E5E5E5">the error handling here so think about</font>

289
00:14:24,850 --> 00:14:28,630
the<font color="#E5E5E5"> rust part but if you're a business</font>

290
00:14:26,980 --> 00:14:32,440
<font color="#CCCCCC">person it's totally fine</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you don't</font>

291
00:14:28,630 --> 00:14:38,439
accept<font color="#E5E5E5"> that solution and let's go back</font>

292
00:14:32,440 --> 00:14:41,920
<font color="#E5E5E5">again we have that float 32 and we</font>

293
00:14:38,440 --> 00:14:45,339
return the<font color="#E5E5E5"> price float error now so with</font>

294
00:14:41,920 --> 00:14:47,260
that when<font color="#CCCCCC"> we parse that thing yeah</font><font color="#E5E5E5"> we</font>

295
00:14:45,339 --> 00:14:51,010
<font color="#CCCCCC">actually get the first real result which</font>

296
00:14:47,260 --> 00:14:56,620
is our tuple of float and then a

297
00:14:51,010 --> 00:15:00,250
currency what<font color="#E5E5E5"> about this one okay</font>

298
00:14:56,620 --> 00:15:03,250
<font color="#E5E5E5">we are</font><font color="#CCCCCC"> missing a currency</font><font color="#E5E5E5"> that's an</font>

299
00:15:00,250 --> 00:15:06,640
error<font color="#E5E5E5"> variant because we can hardly know</font>

300
00:15:03,250 --> 00:15:09,130
what currency<font color="#CCCCCC"> that is we</font><font color="#E5E5E5"> don't and what</font>

301
00:15:06,640 --> 00:15:14,490
happens if<font color="#E5E5E5"> we run the code what we</font><font color="#CCCCCC"> burn</font>

302
00:15:09,130 --> 00:15:19,650
because we<font color="#CCCCCC"> died</font><font color="#E5E5E5"> at runtime again because</font>

303
00:15:14,490 --> 00:15:24,580
it says<font color="#E5E5E5"> Lane is one</font><font color="#CCCCCC"> but index is one and</font>

304
00:15:19,650 --> 00:15:27,630
why actually<font color="#E5E5E5"> look let me show</font><font color="#CCCCCC"> the cat</font>

305
00:15:24,580 --> 00:15:33,120
again<font color="#E5E5E5"> just for good measure yeah</font><font color="#CCCCCC"> I</font>

306
00:15:27,630 --> 00:15:36,670
<font color="#E5E5E5">forget that I had it in the slides this</font>

307
00:15:33,120 --> 00:15:38,709
we<font color="#CCCCCC"> parse</font><font color="#E5E5E5"> the first element we try to get</font>

308
00:15:36,670 --> 00:15:39,400
the<font color="#E5E5E5"> first element from our vector which</font>

309
00:15:38,709 --> 00:15:40,660
<font color="#CCCCCC">is undefined</font>

310
00:15:39,400 --> 00:15:45,220
<font color="#E5E5E5">hmm</font>

311
00:15:40,660 --> 00:15:48,569
we should handle<font color="#CCCCCC"> that we can handle it</font>

312
00:15:45,220 --> 00:15:52,959
explicitly<font color="#E5E5E5"> and say if the length of our</font>

313
00:15:48,569 --> 00:15:55,389
<font color="#E5E5E5">vector is not</font><font color="#CCCCCC"> 2 then we</font><font color="#E5E5E5"> don't have an</font>

314
00:15:52,959 --> 00:15:57,849
amount<font color="#E5E5E5"> and the currency so then we need</font>

315
00:15:55,389 --> 00:15:59,740
to return an error<font color="#E5E5E5"> you can see that I</font>

316
00:15:57,850 --> 00:16:02,949
<font color="#E5E5E5">don't write return anymore because</font>

317
00:15:59,740 --> 00:16:05,230
return is implicit everything in<font color="#CCCCCC"> Russ is</font>

318
00:16:02,949 --> 00:16:07,660
an expression<font color="#CCCCCC"> and the last</font><font color="#E5E5E5"> statement</font>

319
00:16:05,230 --> 00:16:09,220
will be<font color="#E5E5E5"> returned or actually the the</font>

320
00:16:07,660 --> 00:16:11,230
result of the expression will be

321
00:16:09,220 --> 00:16:13,480
returned<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the caller in this case in</font>

322
00:16:11,230 --> 00:16:18,060
line number<font color="#E5E5E5"> 4</font><font color="#CCCCCC"> debts are returned and in</font>

323
00:16:13,480 --> 00:16:22,300
line<font color="#E5E5E5"> number 7</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> also returned so</font>

324
00:16:18,060 --> 00:16:27,189
you can see that we do this explicit

325
00:16:22,300 --> 00:16:31,139
check for two elements and<font color="#E5E5E5"> also you can</font>

326
00:16:27,190 --> 00:16:33,699
see<font color="#E5E5E5"> that we have a new type here</font><font color="#CCCCCC"> a</font>

327
00:16:31,139 --> 00:16:37,209
custom error which we call the money

328
00:16:33,699 --> 00:16:41,319
<font color="#E5E5E5">error and in this case the variant of</font>

329
00:16:37,209 --> 00:16:43,810
<font color="#CCCCCC">that is a parse error</font><font color="#E5E5E5"> you define it like</font>

330
00:16:41,319 --> 00:16:45,939
<font color="#E5E5E5">this you have</font><font color="#CCCCCC"> a money</font><font color="#E5E5E5"> error which is can</font>

331
00:16:43,810 --> 00:16:49,930
<font color="#E5E5E5">be any type in interests</font><font color="#CCCCCC"> know like an</font>

332
00:16:45,939 --> 00:16:53,439
enum<font color="#CCCCCC"> an enum with one where variant</font>

333
00:16:49,930 --> 00:16:56,319
which is<font color="#CCCCCC"> powers</font><font color="#E5E5E5"> error</font><font color="#CCCCCC"> you need to</font>

334
00:16:53,439 --> 00:16:58,389
implement<font color="#E5E5E5"> error for this type what you</font>

335
00:16:56,319 --> 00:17:01,920
get<font color="#E5E5E5"> from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is when you try to print</font>

336
00:16:58,389 --> 00:17:04,809
<font color="#E5E5E5">it this is what will be printed</font><font color="#CCCCCC"> so</font>

337
00:17:01,920 --> 00:17:07,209
<font color="#CCCCCC">that's just a trait that we implement</font>

338
00:17:04,809 --> 00:17:08,709
error is a trait<font color="#E5E5E5"> and description is a</font>

339
00:17:07,209 --> 00:17:10,209
method that<font color="#E5E5E5"> we need to implement which</font>

340
00:17:08,709 --> 00:17:12,280
belongs to the trade and<font color="#E5E5E5"> it's also the</font>

341
00:17:10,209 --> 00:17:15,069
only<font color="#E5E5E5"> method in the trade and when we</font>

342
00:17:12,280 --> 00:17:16,809
implement this yeah more or<font color="#E5E5E5"> less we</font><font color="#CCCCCC"> have</font>

343
00:17:15,069 --> 00:17:19,510
<font color="#CCCCCC">an arrow type</font><font color="#E5E5E5"> at the top you can</font><font color="#CCCCCC"> see</font>

344
00:17:16,809 --> 00:17:22,809
debug derive debug there is some<font color="#E5E5E5"> kind of</font>

345
00:17:19,510 --> 00:17:24,970
standard way to<font color="#E5E5E5"> have something</font><font color="#CCCCCC"> some</font>

346
00:17:22,809 --> 00:17:27,789
output when you<font color="#E5E5E5"> try to print it because</font>

347
00:17:24,970 --> 00:17:29,350
there<font color="#E5E5E5"> is no real yeah yeah it's actually</font>

348
00:17:27,789 --> 00:17:33,460
actually<font color="#E5E5E5"> you can provide a default</font>

349
00:17:29,350 --> 00:17:35,740
output for that<font color="#E5E5E5"> and this is a hand with</font>

350
00:17:33,460 --> 00:17:37,960
the derive<font color="#E5E5E5"> and for our description this</font>

351
00:17:35,740 --> 00:17:38,799
is<font color="#E5E5E5"> handled when we try to print</font>

352
00:17:37,960 --> 00:17:43,000
something that the user should

353
00:17:38,799 --> 00:17:47,620
understand also<font color="#E5E5E5"> we need to</font><font color="#CCCCCC"> implement a</font>

354
00:17:43,000 --> 00:17:50,200
display<font color="#E5E5E5"> trade and that's a lot of</font>

355
00:17:47,620 --> 00:17:53,580
<font color="#E5E5E5">boilerplate you might say you have this</font>

356
00:17:50,200 --> 00:17:56,679
display trade you have<font color="#E5E5E5"> the arrow trade</font>

357
00:17:53,580 --> 00:17:59,649
you even have another<font color="#E5E5E5"> thing for</font>

358
00:17:56,679 --> 00:18:01,780
converting from our parsefloat<font color="#CCCCCC"> error to</font>

359
00:17:59,650 --> 00:18:03,580
our internal money<font color="#E5E5E5"> error so we wrap</font>

360
00:18:01,780 --> 00:18:05,799
<font color="#CCCCCC">around the internal</font><font color="#E5E5E5"> standard library</font>

361
00:18:03,580 --> 00:18:10,809
parsefloat<font color="#CCCCCC"> error</font><font color="#E5E5E5"> and we get something</font>

362
00:18:05,799 --> 00:18:13,090
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is our money error this</font><font color="#E5E5E5"> is a lot of</font>

363
00:18:10,809 --> 00:18:15,010
code<font color="#E5E5E5"> especially for a beginner so</font>

364
00:18:13,090 --> 00:18:17,080
there's a<font color="#E5E5E5"> library to make that easier</font>

365
00:18:15,010 --> 00:18:18,910
which is called<font color="#E5E5E5"> failure and the same</font>

366
00:18:17,080 --> 00:18:21,490
code<font color="#CCCCCC"> that you see</font><font color="#E5E5E5"> here can also be</font>

367
00:18:18,910 --> 00:18:23,140
<font color="#E5E5E5">expressed like this even there's even</font>

368
00:18:21,490 --> 00:18:24,640
<font color="#CCCCCC">more in</font><font color="#E5E5E5"> that slide actually</font><font color="#CCCCCC"> we have two</font>

369
00:18:23,140 --> 00:18:26,200
error types here we have parts amount

370
00:18:24,640 --> 00:18:30,039
error<font color="#E5E5E5"> and we have</font><font color="#CCCCCC"> parse formatting error</font>

371
00:18:26,200 --> 00:18:31,570
parse amount for<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> pausing the amount</font>

372
00:18:30,039 --> 00:18:33,100
<font color="#E5E5E5">of course and parse formatting if we</font>

373
00:18:31,570 --> 00:18:36,789
don't have two elements<font color="#CCCCCC"> so we can</font>

374
00:18:33,100 --> 00:18:39,158
separate<font color="#E5E5E5"> arrow types here and yeah we</font>

375
00:18:36,789 --> 00:18:41,770
keep the implementation for parsefloat

376
00:18:39,159 --> 00:18:45,940
<font color="#E5E5E5">arrow down there to do the implicit</font>

377
00:18:41,770 --> 00:18:48,039
conversion automatically with that you

378
00:18:45,940 --> 00:18:49,780
get beautiful<font color="#CCCCCC"> error messages</font><font color="#E5E5E5"> so you say</font>

379
00:18:48,039 --> 00:18:51,580
<font color="#E5E5E5">if you're trying to</font><font color="#CCCCCC"> parse something</font>

380
00:18:49,780 --> 00:18:53,500
<font color="#E5E5E5">without currency you get expecting</font>

381
00:18:51,580 --> 00:18:57,520
amount and currency<font color="#E5E5E5"> if you price</font>

382
00:18:53,500 --> 00:18:59,140
<font color="#E5E5E5">something which is not a digits</font><font color="#CCCCCC"> in the</font>

383
00:18:57,520 --> 00:19:04,110
beginning you get<font color="#CCCCCC"> forest</font><font color="#E5E5E5"> filled error</font>

384
00:18:59,140 --> 00:19:06,760
kind<font color="#E5E5E5"> invalid</font><font color="#CCCCCC"> all of our own types and</font>

385
00:19:04,110 --> 00:19:09,939
the usual suspects for the<font color="#E5E5E5"> normal case</font>

386
00:19:06,760 --> 00:19:13,360
but<font color="#E5E5E5"> still we check</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> lengthier</font>

387
00:19:09,940 --> 00:19:16,559
<font color="#E5E5E5">explicitly and yeah it's kind of yeah</font>

388
00:19:13,360 --> 00:19:20,049
<font color="#CCCCCC">there</font><font color="#E5E5E5"> might be a better way and there is</font>

389
00:19:16,559 --> 00:19:22,168
using<font color="#CCCCCC"> sliced patterns we've sliced</font>

390
00:19:20,049 --> 00:19:25,450
patterns you can say I take this slice

391
00:19:22,169 --> 00:19:27,669
in line number<font color="#CCCCCC"> 4 I take the vector</font><font color="#E5E5E5"> and I</font>

392
00:19:25,450 --> 00:19:29,289
take all of<font color="#E5E5E5"> it so that's what we have</font>

393
00:19:27,669 --> 00:19:31,690
two dots<font color="#E5E5E5"> here we take the whole thing</font>

394
00:19:29,289 --> 00:19:33,940
<font color="#E5E5E5">and we compare it</font><font color="#CCCCCC"> to different outcomes</font>

395
00:19:31,690 --> 00:19:37,650
so match means<font color="#E5E5E5"> compare it to different</font>

396
00:19:33,940 --> 00:19:40,419
<font color="#CCCCCC">versions to different outcomes of the</font>

397
00:19:37,650 --> 00:19:42,309
computation and<font color="#CCCCCC"> we compare if we get an</font>

398
00:19:40,419 --> 00:19:44,860
amount<font color="#E5E5E5"> in the currency if so we return</font>

399
00:19:42,309 --> 00:19:47,230
it<font color="#E5E5E5"> and if not then</font><font color="#CCCCCC"> yeah we throw an</font>

400
00:19:44,860 --> 00:19:49,780
error but<font color="#E5E5E5"> this is just in nightly right</font>

401
00:19:47,230 --> 00:19:53,080
now<font color="#E5E5E5"> but this will</font><font color="#CCCCCC"> help you later to make</font>

402
00:19:49,780 --> 00:19:55,990
<font color="#E5E5E5">your code even more readable so now we</font>

403
00:19:53,080 --> 00:20:01,299
use<font color="#CCCCCC"> our own</font><font color="#E5E5E5"> money type</font><font color="#CCCCCC"> also instead</font><font color="#E5E5E5"> of</font>

404
00:19:55,990 --> 00:20:03,760
<font color="#CCCCCC">returning a tuple</font><font color="#E5E5E5"> and there's also the</font>

405
00:20:01,299 --> 00:20:05,889
way<font color="#E5E5E5"> to implement it is you you use a</font>

406
00:20:03,760 --> 00:20:07,200
<font color="#CCCCCC">struct money you have two fields</font><font color="#E5E5E5"> amount</font>

407
00:20:05,890 --> 00:20:09,029
and currency

408
00:20:07,200 --> 00:20:11,929
and this input money block down there

409
00:20:09,029 --> 00:20:14,190
this is where<font color="#E5E5E5"> you write your methods and</font>

410
00:20:11,929 --> 00:20:18,179
<font color="#E5E5E5">yeah we just have a new function</font><font color="#CCCCCC"> which</font>

411
00:20:14,190 --> 00:20:20,610
returns a new<font color="#CCCCCC"> object of</font><font color="#E5E5E5"> money</font><font color="#CCCCCC"> and for</font>

412
00:20:18,179 --> 00:20:26,870
<font color="#E5E5E5">the currency we also use a currency enum</font>

413
00:20:20,610 --> 00:20:29,580
<font color="#CCCCCC">and we have dollar and euro as types and</font>

414
00:20:26,870 --> 00:20:33,750
we can also implement<font color="#E5E5E5"> from string which</font>

415
00:20:29,580 --> 00:20:35,340
is<font color="#E5E5E5"> another</font><font color="#CCCCCC"> trait for the</font><font color="#E5E5E5"> currency and we</font>

416
00:20:33,750 --> 00:20:37,919
only need to<font color="#CCCCCC"> implement one method which</font>

417
00:20:35,340 --> 00:20:40,470
is called from string and in there we do

418
00:20:37,919 --> 00:20:45,090
the<font color="#E5E5E5"> matching of the</font><font color="#CCCCCC"> string input</font><font color="#E5E5E5"> so</font>

419
00:20:40,470 --> 00:20:47,880
dollar or a euro and<font color="#E5E5E5"> the anti output of</font>

420
00:20:45,090 --> 00:20:51,570
this function<font color="#CCCCCC"> so</font><font color="#E5E5E5"> when we call Paris</font><font color="#CCCCCC"> on a</font>

421
00:20:47,880 --> 00:20:54,990
string which is<font color="#E5E5E5"> euro or dollar then this</font>

422
00:20:51,570 --> 00:20:58,590
will return a an<font color="#E5E5E5"> object of type currency</font>

423
00:20:54,990 --> 00:21:03,269
of this enum<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the same can be done</font>

424
00:20:58,590 --> 00:21:05,850
for<font color="#CCCCCC"> our money type we also implement</font>

425
00:21:03,269 --> 00:21:08,010
<font color="#E5E5E5">from string on that money type you can</font>

426
00:21:05,850 --> 00:21:09,750
see that i<font color="#E5E5E5"> just copied</font><font color="#CCCCCC"> over the function</font>

427
00:21:08,010 --> 00:21:12,510
that<font color="#E5E5E5"> we had before</font><font color="#CCCCCC"> in the very beginning</font>

428
00:21:09,750 --> 00:21:16,440
<font color="#CCCCCC">we had our parsing function i just</font>

429
00:21:12,510 --> 00:21:20,639
copied it<font color="#CCCCCC"> over from line five to line</font><font color="#E5E5E5"> 13</font>

430
00:21:16,440 --> 00:21:26,220
i guess or<font color="#CCCCCC"> order</font><font color="#E5E5E5"> 12 just took that block</font>

431
00:21:20,639 --> 00:21:30,000
<font color="#CCCCCC">and now if i have a string which is</font><font color="#E5E5E5"> a</font>

432
00:21:26,220 --> 00:21:34,649
real<font color="#E5E5E5"> monetary amount and i I call</font><font color="#CCCCCC"> parse</font>

433
00:21:30,000 --> 00:21:38,010
on it then I can return<font color="#E5E5E5"> automatically an</font>

434
00:21:34,649 --> 00:21:40,768
element<font color="#E5E5E5"> of type money an object of type</font>

435
00:21:38,010 --> 00:21:44,940
<font color="#E5E5E5">money that is super helpful because</font><font color="#CCCCCC"> then</font>

436
00:21:40,769 --> 00:21:47,519
we can do things like this<font color="#CCCCCC"> you just</font><font color="#E5E5E5"> call</font>

437
00:21:44,940 --> 00:21:50,580
it on<font color="#CCCCCC"> the string and you see that : :</font>

438
00:21:47,519 --> 00:21:52,830
turbo fish<font color="#E5E5E5"> : : angle bracket is</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> a</font>

439
00:21:50,580 --> 00:21:56,100
<font color="#CCCCCC">Kluber fish</font><font color="#E5E5E5"> and inside</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> defined the</font>

440
00:21:52,830 --> 00:21:57,720
type that I want and with<font color="#E5E5E5"> this yeah I</font>

441
00:21:56,100 --> 00:22:02,309
get something<font color="#E5E5E5"> that which is very fluent</font>

442
00:21:57,720 --> 00:22:04,830
to read I say<font color="#E5E5E5"> 100 euro dot parse : :</font>

443
00:22:02,309 --> 00:22:10,200
<font color="#E5E5E5">angle bracket money : angle bracket and</font>

444
00:22:04,830 --> 00:22:12,779
that's it<font color="#E5E5E5"> and so we took our initial</font>

445
00:22:10,200 --> 00:22:15,149
code<font color="#E5E5E5"> we modified it based on the</font>

446
00:22:12,779 --> 00:22:17,879
compilers input and then we<font color="#E5E5E5"> reach</font>

447
00:22:15,149 --> 00:22:20,689
something<font color="#CCCCCC"> which is both readable</font>

448
00:22:17,879 --> 00:22:22,969
maintainable<font color="#E5E5E5"> and safe</font>

449
00:22:20,690 --> 00:22:29,509
without doing<font color="#CCCCCC"> much</font><font color="#E5E5E5"> so this is what I</font>

450
00:22:22,970 --> 00:22:34,220
learned<font color="#E5E5E5"> as a process in those last</font><font color="#CCCCCC"> years</font>

451
00:22:29,509 --> 00:22:36,619
using<font color="#CCCCCC"> rust start with something iterate</font>

452
00:22:34,220 --> 00:22:37,999
and the compiler will help you a lot<font color="#E5E5E5"> so</font>

453
00:22:36,619 --> 00:22:42,049
if<font color="#E5E5E5"> you're interested</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> kind of</font>

454
00:22:37,999 --> 00:22:44,479
stuff check out my<font color="#E5E5E5"> website and also ping</font>

455
00:22:42,049 --> 00:22:46,609
me on Twitter and<font color="#E5E5E5"> please</font><font color="#CCCCCC"> contribute to</font>

456
00:22:44,479 --> 00:22:49,489
<font color="#E5E5E5">that list maybe we can make it</font><font color="#CCCCCC"> bigger</font>

457
00:22:46,609 --> 00:22:51,470
<font color="#E5E5E5">and if you want somebody that</font><font color="#CCCCCC"> canon</font>

458
00:22:49,489 --> 00:22:54,440
guide you along then use the<font color="#CCCCCC"> Clippy</font>

459
00:22:51,470 --> 00:22:56,570
crate which has a lot more links to<font color="#CCCCCC"> help</font>

460
00:22:54,440 --> 00:22:57,870
you<font color="#E5E5E5"> write more</font><font color="#CCCCCC"> add your magic code thank</font>

461
00:22:56,570 --> 00:23:05,320
you

462
00:22:57,870 --> 00:23:05,320
[Applause]

463
00:23:19,009 --> 00:23:24,200
the question was since you cannot use

464
00:23:22,369 --> 00:23:26,059
the slice match with because it<font color="#E5E5E5"> is a</font>

465
00:23:24,200 --> 00:23:28,789
<font color="#CCCCCC">nightly what would you use in stay</font><font color="#E5E5E5"> with</font>

466
00:23:26,059 --> 00:23:30,470
us well in<font color="#CCCCCC"> stable rust you can use what</font>

467
00:23:28,789 --> 00:23:33,169
I showed<font color="#CCCCCC"> you in the</font><font color="#E5E5E5"> previous slide which</font>

468
00:23:30,470 --> 00:23:36,649
<font color="#CCCCCC">is just the explicit</font><font color="#E5E5E5"> matching on the</font>

469
00:23:33,169 --> 00:23:38,799
type<font color="#E5E5E5"> what would also be nice in the</font>

470
00:23:36,649 --> 00:23:41,719
future will be collecting into a tuple

471
00:23:38,799 --> 00:23:43,099
<font color="#E5E5E5">because we collected into a</font><font color="#CCCCCC"> vector and</font>

472
00:23:41,720 --> 00:23:47,090
then we<font color="#E5E5E5"> check the elements of the vector</font>

473
00:23:43,099 --> 00:23:48,769
<font color="#E5E5E5">but this is not possible right now</font><font color="#CCCCCC"> there</font>

474
00:23:47,090 --> 00:23:51,349
will be a lot of<font color="#E5E5E5"> those paper</font><font color="#CCCCCC"> cuts will</font>

475
00:23:48,769 --> 00:23:53,659
go away<font color="#E5E5E5"> in the next year</font><font color="#CCCCCC"> or two because</font>

476
00:23:51,349 --> 00:23:56,178
<font color="#E5E5E5">there's an ergonomics initiative and</font>

477
00:23:53,659 --> 00:23:58,849
<font color="#E5E5E5">that means that all</font><font color="#CCCCCC"> of those things they</font>

478
00:23:56,179 --> 00:24:02,539
are right on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> verge</font><font color="#CCCCCC"> so you can expect</font>

479
00:23:58,849 --> 00:24:05,330
this to become<font color="#CCCCCC"> stable very soon I guess</font>

480
00:24:02,539 --> 00:24:08,029
within<font color="#E5E5E5"> this year and then you will see</font>

481
00:24:05,330 --> 00:24:11,658
the the rest of<font color="#CCCCCC"> next year probably will</font>

482
00:24:08,029 --> 00:24:15,019
have even<font color="#CCCCCC"> more patterns</font><font color="#E5E5E5"> and this is like</font>

483
00:24:11,659 --> 00:24:17,210
a<font color="#E5E5E5"> growing ecosystem and growing stack so</font>

484
00:24:15,019 --> 00:24:19,009
probably this list of<font color="#CCCCCC"> idea Matic things</font>

485
00:24:17,210 --> 00:24:21,590
<font color="#E5E5E5">this will be longer and longer and</font>

486
00:24:19,009 --> 00:24:23,749
longer<font color="#CCCCCC"> and the things that I</font><font color="#E5E5E5"> told you</font>

487
00:24:21,590 --> 00:24:26,928
today<font color="#CCCCCC"> might</font><font color="#E5E5E5"> not be the things that you</font>

488
00:24:23,749 --> 00:24:29,330
want to<font color="#E5E5E5"> use in 10 years but same with</font>

489
00:24:26,929 --> 00:24:31,940
other languages<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> some paper</font>

490
00:24:29,330 --> 00:24:34,178
cuts I I admit but we will get<font color="#E5E5E5"> there</font><font color="#CCCCCC"> in</font>

491
00:24:31,940 --> 00:24:34,179
the<font color="#CCCCCC"> end</font>

492
00:24:35,340 --> 00:24:41,699
[Applause]

