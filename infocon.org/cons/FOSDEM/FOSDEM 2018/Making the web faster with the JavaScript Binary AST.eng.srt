1
00:02:51,659 --> 00:03:05,769
hello so it's great because earlier we

2
00:03:02,049 --> 00:03:08,109
<font color="#CCCCCC">had presentations on performance</font><font color="#E5E5E5"> then we</font>

3
00:03:05,769 --> 00:03:09,849
had a<font color="#E5E5E5"> presentation of the future and I'm</font>

4
00:03:08,109 --> 00:03:12,730
going to talk to you a little<font color="#E5E5E5"> bit about</font>

5
00:03:09,849 --> 00:03:17,409
the future<font color="#CCCCCC"> of performance admire the</font>

6
00:03:12,730 --> 00:03:20,018
transition so this presentation is<font color="#CCCCCC"> about</font>

7
00:03:17,409 --> 00:03:22,060
<font color="#E5E5E5">the JavaScript binary AST</font><font color="#CCCCCC"> I'm going to</font>

8
00:03:20,019 --> 00:03:24,849
give<font color="#E5E5E5"> details about what</font><font color="#CCCCCC"> that means</font><font color="#E5E5E5"> but</font>

9
00:03:22,060 --> 00:03:26,799
<font color="#E5E5E5">what is it it's a proposal for the</font>

10
00:03:24,849 --> 00:03:28,000
future<font color="#CCCCCC"> of JavaScript it's a new</font>

11
00:03:26,799 --> 00:03:30,430
<font color="#E5E5E5">technology that we</font><font color="#CCCCCC"> are currently</font>

12
00:03:28,000 --> 00:03:33,430
developing at Mozilla and Bloomberg and

13
00:03:30,430 --> 00:03:39,840
Facebook<font color="#CCCCCC"> to speed</font><font color="#E5E5E5"> up the loading of</font><font color="#CCCCCC"> web</font>

14
00:03:33,430 --> 00:03:43,569
<font color="#CCCCCC">pages</font><font color="#E5E5E5"> in the not so distant future</font><font color="#CCCCCC"> so</font>

15
00:03:39,840 --> 00:03:45,459
it's great the web is fast<font color="#E5E5E5"> we keep</font>

16
00:03:43,569 --> 00:03:47,738
improving<font color="#E5E5E5"> the</font><font color="#CCCCCC"> web we keep making</font><font color="#E5E5E5"> it</font>

17
00:03:45,459 --> 00:03:51,549
faster but of course there is no<font color="#E5E5E5"> such</font>

18
00:03:47,739 --> 00:03:54,340
thing as fast enough we have pretty<font color="#E5E5E5"> fast</font>

19
00:03:51,549 --> 00:03:56,680
JavaScript<font color="#CCCCCC"> engines these days</font><font color="#E5E5E5"> javascript</font>

20
00:03:54,340 --> 00:04:00,010
is<font color="#E5E5E5"> fast enough to run</font><font color="#CCCCCC"> video</font><font color="#E5E5E5"> games which</font>

21
00:03:56,680 --> 00:04:03,150
is a few<font color="#E5E5E5"> years ago who would have said</font>

22
00:04:00,010 --> 00:04:06,280
that<font color="#CCCCCC"> it would be</font><font color="#E5E5E5"> possible however</font>

23
00:04:03,150 --> 00:04:10,269
sometimes the performance of<font color="#E5E5E5"> JavaScript</font>

24
00:04:06,280 --> 00:04:13,720
<font color="#CCCCCC">is not sufficient for</font><font color="#E5E5E5"> several reasons</font>

25
00:04:10,269 --> 00:04:16,630
but<font color="#E5E5E5"> one of them</font><font color="#CCCCCC"> is look at how much data</font>

26
00:04:13,720 --> 00:04:18,970
you're loading when you are opening

27
00:04:16,630 --> 00:04:22,360
Google<font color="#E5E5E5"> sheets or Google Docs or Yahoo or</font>

28
00:04:18,970 --> 00:04:26,289
<font color="#E5E5E5">LinkedIn or Facebook all of</font><font color="#CCCCCC"> them just</font>

29
00:04:22,360 --> 00:04:29,020
before<font color="#E5E5E5"> they can do anything useful load</font>

30
00:04:26,289 --> 00:04:32,289
<font color="#E5E5E5">at least</font><font color="#CCCCCC"> 3 megabytes</font><font color="#E5E5E5"> of compressed</font>

31
00:04:29,020 --> 00:04:33,120
<font color="#E5E5E5">JavaScript code so much more if you</font>

32
00:04:32,289 --> 00:04:35,979
decompress it

33
00:04:33,120 --> 00:04:39,699
we have noticed several<font color="#CCCCCC"> of them that</font>

34
00:04:35,979 --> 00:04:42,520
load something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> seven megabytes and</font>

35
00:04:39,699 --> 00:04:45,190
the<font color="#CCCCCC"> decompressed size can go</font><font color="#E5E5E5"> to up to</font><font color="#CCCCCC"> 40</font>

36
00:04:42,520 --> 00:04:47,289
<font color="#CCCCCC">megabytes imagine loading</font><font color="#E5E5E5"> 40 megabytes</font>

37
00:04:45,190 --> 00:04:49,690
of code in your<font color="#E5E5E5"> browser</font><font color="#CCCCCC"> whenever you</font>

38
00:04:47,289 --> 00:04:51,599
<font color="#E5E5E5">start your application</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't do this</font>

39
00:04:49,690 --> 00:04:53,660
with<font color="#CCCCCC"> your</font><font color="#E5E5E5"> desktop applications</font>

40
00:04:51,600 --> 00:04:57,930
<font color="#E5E5E5">applications and to make things worse</font>

41
00:04:53,660 --> 00:05:00,240
<font color="#E5E5E5">these websites are dated very often it's</font>

42
00:04:57,930 --> 00:05:03,360
usually not<font color="#E5E5E5"> the scale of every five</font>

43
00:05:00,240 --> 00:05:05,250
minutes<font color="#E5E5E5"> but</font><font color="#CCCCCC"> sometimes it</font><font color="#E5E5E5"> happens so</font>

44
00:05:03,360 --> 00:05:07,050
imagine<font color="#CCCCCC"> that is going to wreak havoc on</font>

45
00:05:05,250 --> 00:05:10,140
the old<font color="#E5E5E5"> whole infrastructure of</font><font color="#CCCCCC"> your</font>

46
00:05:07,050 --> 00:05:12,780
browser<font color="#CCCCCC"> your caching all of that</font><font color="#E5E5E5"> you</font>

47
00:05:10,140 --> 00:05:16,770
just need to<font color="#E5E5E5"> find a way to cope</font><font color="#CCCCCC"> with</font>

48
00:05:12,780 --> 00:05:19,169
this level<font color="#CCCCCC"> of JavaScript because one of</font>

49
00:05:16,770 --> 00:05:23,909
<font color="#CCCCCC">the consequences</font><font color="#E5E5E5"> is it's very slow to</font>

50
00:05:19,170 --> 00:05:27,150
start<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> recall what from Western</font>

51
00:05:23,910 --> 00:05:29,220
saying earlier was it<font color="#E5E5E5"> 100 milliseconds</font>

52
00:05:27,150 --> 00:05:32,429
200 milliseconds<font color="#E5E5E5"> that people start</font>

53
00:05:29,220 --> 00:05:35,250
thinking<font color="#E5E5E5"> it's broken 500</font>

54
00:05:32,430 --> 00:05:37,710
okay so<font color="#CCCCCC"> just parsing</font><font color="#E5E5E5"> the JavaScript for</font>

55
00:05:35,250 --> 00:05:40,260
<font color="#E5E5E5">Facebook is already at least 500</font>

56
00:05:37,710 --> 00:05:43,109
milliseconds<font color="#CCCCCC"> on both Chrome and Firefox</font>

57
00:05:40,260 --> 00:05:45,539
that's parsing<font color="#CCCCCC"> that's once you have</font>

58
00:05:43,110 --> 00:05:47,340
<font color="#CCCCCC">received</font><font color="#E5E5E5"> the JavaScript once you have</font>

59
00:05:45,540 --> 00:05:51,210
received<font color="#E5E5E5"> the HTML once you have received</font>

60
00:05:47,340 --> 00:05:54,210
<font color="#E5E5E5">the images the CSS you start</font><font color="#CCCCCC"> parsing the</font>

61
00:05:51,210 --> 00:05:55,830
JavaScript at some point<font color="#E5E5E5"> and after</font><font color="#CCCCCC"> you</font>

62
00:05:54,210 --> 00:05:57,539
<font color="#E5E5E5">finish</font><font color="#CCCCCC"> parsing the JavaScript you have a</font>

63
00:05:55,830 --> 00:06:01,109
few more steps which I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to detail</font>

64
00:05:57,540 --> 00:06:03,810
soon<font color="#E5E5E5"> and only then can you start having</font>

65
00:06:01,110 --> 00:06:06,660
an interactive page so that's<font color="#CCCCCC"> where</font><font color="#E5E5E5"> the</font>

66
00:06:03,810 --> 00:06:08,340
chat<font color="#E5E5E5"> of Facebook so this means that for</font>

67
00:06:06,660 --> 00:06:12,030
the first<font color="#CCCCCC"> few seconds actually of</font>

68
00:06:08,340 --> 00:06:13,409
facebook chat you cannot do<font color="#E5E5E5"> anything so</font>

69
00:06:12,030 --> 00:06:15,869
what's<font color="#CCCCCC"> Facebook doing against</font><font color="#E5E5E5"> this</font>

70
00:06:13,410 --> 00:06:17,490
they're<font color="#E5E5E5"> doing what we</font><font color="#CCCCCC"> are doing they are</font>

71
00:06:15,870 --> 00:06:19,290
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to optimize stuff</font><font color="#E5E5E5"> and they're</font>

72
00:06:17,490 --> 00:06:22,590
trying<font color="#CCCCCC"> to use tricks</font><font color="#E5E5E5"> to make it look</font>

73
00:06:19,290 --> 00:06:25,770
faster which means<font color="#E5E5E5"> unfortunately these</font>

74
00:06:22,590 --> 00:06:28,440
<font color="#E5E5E5">tricks once you have too</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> of them</font>

75
00:06:25,770 --> 00:06:31,260
it actually makes things<font color="#E5E5E5"> go slower just</font>

76
00:06:28,440 --> 00:06:33,330
to make them<font color="#CCCCCC"> look faster and the problem</font>

77
00:06:31,260 --> 00:06:36,390
is<font color="#E5E5E5"> that things are only getting</font><font color="#CCCCCC"> worse</font>

78
00:06:33,330 --> 00:06:38,580
from<font color="#E5E5E5"> here a few</font><font color="#CCCCCC"> years ago when you were</font>

79
00:06:36,390 --> 00:06:40,530
<font color="#E5E5E5">writing</font><font color="#CCCCCC"> javascript code for web</font>

80
00:06:38,580 --> 00:06:42,599
application you were<font color="#E5E5E5"> hand rolling ingly</font>

81
00:06:40,530 --> 00:06:46,109
and you had a few<font color="#E5E5E5"> hundred worst case</font><font color="#CCCCCC"> of</font>

82
00:06:42,600 --> 00:06:50,130
2009<font color="#E5E5E5"> s of code nowadays you're using</font>

83
00:06:46,110 --> 00:06:51,300
webpack to pack how many frameworks<font color="#CCCCCC"> how</font>

84
00:06:50,130 --> 00:06:54,690
many modules

85
00:06:51,300 --> 00:06:56,710
<font color="#CCCCCC">40 modules 70 modules i mean insane</font>

86
00:06:54,690 --> 00:06:58,330
amounts of data

87
00:06:56,710 --> 00:07:00,099
and there is no<font color="#E5E5E5"> reason to stop that</font>

88
00:06:58,330 --> 00:07:01,390
<font color="#E5E5E5">because modules are good frameworks</font><font color="#CCCCCC"> or</font>

89
00:07:00,100 --> 00:07:05,770
good or it is when they were providing

90
00:07:01,390 --> 00:07:07,240
<font color="#E5E5E5">something useful yes use them but the</font>

91
00:07:05,770 --> 00:07:09,359
browser needs<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to cope</font><font color="#CCCCCC"> with</font>

92
00:07:07,240 --> 00:07:09,360
that

93
00:07:10,380 --> 00:07:15,790
unfortunately bring<font color="#E5E5E5"> this a</font><font color="#CCCCCC"> little bit</font>

94
00:07:13,240 --> 00:07:17,080
more and we have<font color="#E5E5E5"> exactly the problem</font>

95
00:07:15,790 --> 00:07:24,070
<font color="#CCCCCC">that</font><font color="#E5E5E5"> was described earlier</font>

96
00:07:17,080 --> 00:07:27,130
it looks<font color="#CCCCCC"> broken so I'm saying that</font>

97
00:07:24,070 --> 00:07:28,950
<font color="#E5E5E5">loading</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> is becoming too slow</font>

98
00:07:27,130 --> 00:07:32,980
<font color="#CCCCCC">because of the amount</font><font color="#E5E5E5"> of JavaScript</font>

99
00:07:28,950 --> 00:07:36,789
<font color="#CCCCCC">let's take a look at why loading</font>

100
00:07:32,980 --> 00:07:39,100
<font color="#E5E5E5">javascript is too slow loading</font>

101
00:07:36,790 --> 00:07:41,080
<font color="#E5E5E5">javascript is basically the same thing</font>

102
00:07:39,100 --> 00:07:42,670
as loading other programming languages

103
00:07:41,080 --> 00:07:45,909
<font color="#CCCCCC">it's a bit</font><font color="#E5E5E5"> different because</font><font color="#CCCCCC"> your</font>

104
00:07:42,670 --> 00:07:48,430
loading<font color="#CCCCCC"> is from your</font><font color="#E5E5E5"> browser but still</font>

105
00:07:45,910 --> 00:07:50,620
generally<font color="#E5E5E5"> the same outline you grab the</font>

106
00:07:48,430 --> 00:07:53,350
source code<font color="#CCCCCC"> you decompress it because</font>

107
00:07:50,620 --> 00:07:54,700
you typically<font color="#E5E5E5"> receive compressed you</font>

108
00:07:53,350 --> 00:07:57,190
<font color="#E5E5E5">typically</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> then manipulate</font>

109
00:07:54,700 --> 00:07:58,780
encodings<font color="#CCCCCC"> then you</font><font color="#E5E5E5"> tokenize I'll come</font>

110
00:07:57,190 --> 00:08:00,460
back<font color="#E5E5E5"> to that in the new parse it and you</font>

111
00:07:58,780 --> 00:08:03,640
generate<font color="#CCCCCC"> bytecode then</font><font color="#E5E5E5"> you finally</font><font color="#CCCCCC"> start</font>

112
00:08:00,460 --> 00:08:07,330
<font color="#CCCCCC">executing</font><font color="#E5E5E5"> all these steps are typically</font>

113
00:08:03,640 --> 00:08:11,950
<font color="#E5E5E5">relatively simple in</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> in a</font>

114
00:08:07,330 --> 00:08:15,130
programming<font color="#CCCCCC"> language</font><font color="#E5E5E5"> would that that it</font>

115
00:08:11,950 --> 00:08:18,880
were so<font color="#CCCCCC"> simple for JavaScript because</font>

116
00:08:15,130 --> 00:08:20,980
javascript is<font color="#CCCCCC"> actually pretty</font>

117
00:08:18,880 --> 00:08:24,520
complicated language

118
00:08:20,980 --> 00:08:27,220
so let's start<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the beginning</font><font color="#E5E5E5"> you</font>

119
00:08:24,520 --> 00:08:29,169
are opening a<font color="#E5E5E5"> web page let's assume</font>

120
00:08:27,220 --> 00:08:30,460
<font color="#E5E5E5">you're over already loaded</font><font color="#CCCCCC"> the HTML and</font>

121
00:08:29,170 --> 00:08:32,530
<font color="#E5E5E5">I think that's going to load your</font>

122
00:08:30,460 --> 00:08:34,840
<font color="#CCCCCC">JavaScript okay</font>

123
00:08:32,530 --> 00:08:37,299
<font color="#CCCCCC">know you can download the source code</font>

124
00:08:34,840 --> 00:08:41,260
<font color="#E5E5E5">your JavaScript source code you can</font>

125
00:08:37,299 --> 00:08:44,410
decompress<font color="#CCCCCC"> it this is the web so any</font>

126
00:08:41,260 --> 00:08:46,450
encoding is accepted except you're not

127
00:08:44,410 --> 00:08:48,160
<font color="#E5E5E5">going to write an interpreter for every</font>

128
00:08:46,450 --> 00:08:50,410
<font color="#E5E5E5">single encoding so you typically</font><font color="#CCCCCC"> need to</font>

129
00:08:48,160 --> 00:08:52,420
<font color="#E5E5E5">come third your encoding to something</font>

130
00:08:50,410 --> 00:08:55,360
<font color="#CCCCCC">that your JavaScript virtual machine can</font>

131
00:08:52,420 --> 00:08:57,189
understand that's really<font color="#CCCCCC"> going to take</font>

132
00:08:55,360 --> 00:08:59,310
some time and<font color="#E5E5E5"> allocate some memory for</font>

133
00:08:57,190 --> 00:09:02,800
<font color="#CCCCCC">people who are performance</font><font color="#E5E5E5"> sensitive</font>

134
00:08:59,310 --> 00:09:04,300
then you<font color="#E5E5E5"> tokenize</font><font color="#CCCCCC"> I don't know how many</font>

135
00:09:02,800 --> 00:09:07,060
of<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are familiar with tokenization</font>

136
00:09:04,300 --> 00:09:08,740
<font color="#E5E5E5">but tokenization</font><font color="#CCCCCC"> is one of the first</font>

137
00:09:07,060 --> 00:09:10,510
<font color="#E5E5E5">steps you do when you're trying</font><font color="#CCCCCC"> to</font>

138
00:09:08,740 --> 00:09:13,330
interpret<font color="#CCCCCC"> or compile</font><font color="#E5E5E5"> a programming</font>

139
00:09:10,510 --> 00:09:15,970
language<font color="#E5E5E5"> you take your source code above</font>

140
00:09:13,330 --> 00:09:19,600
above and you<font color="#E5E5E5"> convert it to a series of</font>

141
00:09:15,970 --> 00:09:23,140
tokens<font color="#E5E5E5"> so this source code is function</font>

142
00:09:19,600 --> 00:09:25,990
through something so the function here

143
00:09:23,140 --> 00:09:27,819
is translated to this token<font color="#E5E5E5"> foo is</font>

144
00:09:25,990 --> 00:09:29,650
translated to<font color="#E5E5E5"> token that says it's an</font>

145
00:09:27,820 --> 00:09:31,810
identifier then we have a left

146
00:09:29,650 --> 00:09:36,490
parenthesis we have<font color="#CCCCCC"> another identifier</font>

147
00:09:31,810 --> 00:09:38,949
<font color="#E5E5E5">right parenthesis etc that's how every</font>

148
00:09:36,490 --> 00:09:44,650
single interpreter or compiler<font color="#E5E5E5"> on earth</font>

149
00:09:38,950 --> 00:09:46,870
works<font color="#E5E5E5"> problem is that not all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

150
00:09:44,650 --> 00:09:49,510
<font color="#E5E5E5">interpreters or compilers are doing</font>

151
00:09:46,870 --> 00:09:52,360
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> because javascript is not</font>

152
00:09:49,510 --> 00:09:55,900
<font color="#E5E5E5">such a simple programming language for</font>

153
00:09:52,360 --> 00:10:00,730
<font color="#CCCCCC">instance if I see four</font>

154
00:09:55,900 --> 00:10:06,699
what is<font color="#E5E5E5"> for in JavaScript it's typically</font>

155
00:10:00,730 --> 00:10:08,440
<font color="#E5E5E5">a keyword except sometimes it's not you</font>

156
00:10:06,700 --> 00:10:13,630
cannot have a variable<font color="#E5E5E5"> called for but</font>

157
00:10:08,440 --> 00:10:17,500
you<font color="#E5E5E5"> can have a field</font><font color="#CCCCCC"> for so it doesn't</font>

158
00:10:13,630 --> 00:10:20,260
know what<font color="#CCCCCC"> two</font><font color="#E5E5E5"> can be used</font><font color="#CCCCCC"> here if it</font>

159
00:10:17,500 --> 00:10:21,040
meets<font color="#CCCCCC"> encounters are / the /</font><font color="#E5E5E5"> is a</font>

160
00:10:20,260 --> 00:10:24,790
<font color="#E5E5E5">nightmare</font>

161
00:10:21,040 --> 00:10:27,279
what's the<font color="#E5E5E5"> / is it a division is it the</font>

162
00:10:24,790 --> 00:10:29,920
start of a single line comment<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> is</font>

163
00:10:27,279 --> 00:10:31,800
it a start of a multi-line comment or is

164
00:10:29,920 --> 00:10:34,660
it<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ragged</font>

165
00:10:31,800 --> 00:10:36,069
good luck knowing that the tokenizer has

166
00:10:34,660 --> 00:10:43,900
no way of<font color="#E5E5E5"> knowing</font><font color="#CCCCCC"> that</font>

167
00:10:36,070 --> 00:10:45,970
<font color="#E5E5E5">oh nice one</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use treat if it works</font><font color="#CCCCCC"> any</font>

168
00:10:43,900 --> 00:10:49,930
other string<font color="#E5E5E5"> it would be a stranger</font>

169
00:10:45,970 --> 00:10:52,570
except it's you<font color="#E5E5E5"> street so it's actually</font>

170
00:10:49,930 --> 00:10:54,910
not<font color="#E5E5E5"> exactly a string it's a directive</font>

171
00:10:52,570 --> 00:11:00,250
and a directive is going to<font color="#E5E5E5"> change how</font>

172
00:10:54,910 --> 00:11:03,010
the parser works and there are more

173
00:11:00,250 --> 00:11:05,890
complicated<font color="#E5E5E5"> things such as strings</font>

174
00:11:03,010 --> 00:11:09,700
themselves<font color="#E5E5E5"> are pretty hard to parse or</font>

175
00:11:05,890 --> 00:11:12,100
<font color="#E5E5E5">to tokenize because because we want to</font>

176
00:11:09,700 --> 00:11:14,980
<font color="#E5E5E5">be able to deal intelligently with every</font>

177
00:11:12,100 --> 00:11:17,050
single<font color="#E5E5E5"> language on earth and not all</font>

178
00:11:14,980 --> 00:11:19,990
<font color="#E5E5E5">languages use the same bytes</font><font color="#CCCCCC"> to</font>

179
00:11:17,050 --> 00:11:22,300
represent the strings<font color="#E5E5E5"> and if we want to</font>

180
00:11:19,990 --> 00:11:24,580
save<font color="#E5E5E5"> memory we want to be smart about</font>

181
00:11:22,300 --> 00:11:26,790
this but being smart<font color="#E5E5E5"> about it means that</font>

182
00:11:24,580 --> 00:11:29,890
we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> analyze every single string</font>

183
00:11:26,790 --> 00:11:31,449
every time we<font color="#E5E5E5"> encounter a string this</font>

184
00:11:29,890 --> 00:11:34,420
<font color="#E5E5E5">includes every time</font><font color="#CCCCCC"> we encounter an</font>

185
00:11:31,450 --> 00:11:39,550
identifier which means

186
00:11:34,420 --> 00:11:41,439
<font color="#CCCCCC">so so the answer to</font><font color="#E5E5E5"> all of these</font>

187
00:11:39,550 --> 00:11:44,469
questions<font color="#E5E5E5"> is it depends</font>

188
00:11:41,440 --> 00:11:47,970
in other words<font color="#E5E5E5"> yeah the organization is</font>

189
00:11:44,470 --> 00:11:47,970
hard<font color="#CCCCCC"> you're going to see that guy again</font>

190
00:11:49,590 --> 00:11:57,370
the next<font color="#E5E5E5"> step once you have tokenized is</font>

191
00:11:53,380 --> 00:12:00,340
to parse so that was what we have

192
00:11:57,370 --> 00:12:01,990
produced in the previous step<font color="#CCCCCC"> we have</font>

193
00:12:00,340 --> 00:12:04,090
something<font color="#CCCCCC"> that say it's a function and</font>

194
00:12:01,990 --> 00:12:08,860
then<font color="#E5E5E5"> there is an identifier so</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> name</font>

195
00:12:04,090 --> 00:12:10,480
foo and more stuff and then you want<font color="#CCCCCC"> to</font>

196
00:12:08,860 --> 00:12:13,990
produce<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> basically looks</font>

197
00:12:10,480 --> 00:12:15,700
like<font color="#E5E5E5"> that this is what the interpreter</font>

198
00:12:13,990 --> 00:12:18,970
or the compiler is<font color="#CCCCCC"> going to have in</font>

199
00:12:15,700 --> 00:12:22,300
memory to do<font color="#E5E5E5"> anything to do security</font>

200
00:12:18,970 --> 00:12:24,700
<font color="#CCCCCC">what safety checks security checks</font><font color="#E5E5E5"> to</font>

201
00:12:22,300 --> 00:12:28,030
generate<font color="#E5E5E5"> bytecode to optimize your code</font>

202
00:12:24,700 --> 00:12:33,190
<font color="#CCCCCC">to reject the code</font><font color="#E5E5E5"> because features are</font>

203
00:12:28,030 --> 00:12:34,900
not<font color="#E5E5E5"> available etc so from this it's</font>

204
00:12:33,190 --> 00:12:36,460
going to<font color="#E5E5E5"> deduce that this is working</font>

205
00:12:34,900 --> 00:12:40,120
clearing a function it's not

206
00:12:36,460 --> 00:12:42,940
<font color="#CCCCCC">asynchronous it's not a generator</font><font color="#E5E5E5"> well</font>

207
00:12:40,120 --> 00:12:46,060
let's not talk<font color="#E5E5E5"> about scope it has a name</font>

208
00:12:42,940 --> 00:12:49,690
called foo it has arguments<font color="#CCCCCC"> so while a</font>

209
00:12:46,060 --> 00:12:51,489
single<font color="#E5E5E5"> argument called X and</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> the</font>

210
00:12:49,690 --> 00:12:54,850
body<font color="#CCCCCC"> I don't have enough</font><font color="#E5E5E5"> space to put</font>

211
00:12:51,490 --> 00:12:57,760
<font color="#E5E5E5">the body on that side nor on other sites</font>

212
00:12:54,850 --> 00:13:01,950
<font color="#CCCCCC">be reassured you will not have to read</font>

213
00:12:57,760 --> 00:13:01,950
this data<font color="#E5E5E5"> structure to</font><font color="#CCCCCC"> offer</font>

214
00:13:03,760 --> 00:13:12,520
is it easy<font color="#CCCCCC"> I can assure</font><font color="#E5E5E5"> you I'm pretty</font>

215
00:13:09,220 --> 00:13:14,770
<font color="#E5E5E5">sure you already guessed the</font><font color="#CCCCCC"> answer</font><font color="#E5E5E5"> you</font>

216
00:13:12,520 --> 00:13:18,160
know it's not going<font color="#E5E5E5"> to be easy</font><font color="#CCCCCC"> so let's</font>

217
00:13:14,770 --> 00:13:21,340
look at this<font color="#E5E5E5"> simple example can anyone</font>

218
00:13:18,160 --> 00:13:23,380
tell me<font color="#E5E5E5"> what's the return of this</font>

219
00:13:21,340 --> 00:13:26,220
function is going<font color="#CCCCCC"> to be if I put true</font>

220
00:13:23,380 --> 00:13:26,220
for this<font color="#CCCCCC"> argument</font>

221
00:13:29,160 --> 00:13:37,319
so<font color="#E5E5E5"> I put</font><font color="#CCCCCC"> x</font><font color="#E5E5E5"> equals 20 and i return i</font>

222
00:13:32,040 --> 00:13:45,420
return<font color="#E5E5E5"> x plus 10</font><font color="#CCCCCC"> and the answer is of</font>

223
00:13:37,320 --> 00:13:47,010
<font color="#CCCCCC">course it depends k is 1</font><font color="#E5E5E5"> the one that</font>

224
00:13:45,420 --> 00:13:48,540
you probably<font color="#E5E5E5"> assumed you have when you</font>

225
00:13:47,010 --> 00:13:51,420
looked at<font color="#E5E5E5"> the source code</font><font color="#CCCCCC"> because i had</font>

226
00:13:48,540 --> 00:13:55,709
hidden the annoying part yeah

227
00:13:51,420 --> 00:13:57,410
that's 20<font color="#E5E5E5"> yeah 10 plus 10 equals 20 so</font>

228
00:13:55,710 --> 00:13:59,820
<font color="#E5E5E5">far so good</font>

229
00:13:57,410 --> 00:14:02,880
second case I've added something

230
00:13:59,820 --> 00:14:05,010
<font color="#CCCCCC">instantly in my comments here I really</font>

231
00:14:02,880 --> 00:14:08,220
cleared<font color="#E5E5E5"> verbal</font><font color="#CCCCCC"> x after having returned</font>

232
00:14:05,010 --> 00:14:12,140
it but who cares<font color="#CCCCCC"> and</font><font color="#E5E5E5"> suddenly this</font>

233
00:14:08,220 --> 00:14:12,140
function<font color="#E5E5E5"> returns oh that's not a number</font>

234
00:14:16,600 --> 00:14:23,800
yes exactly<font color="#CCCCCC"> because of the hoisting</font><font color="#E5E5E5"> so</font>

235
00:14:20,910 --> 00:14:26,430
we can detail all<font color="#E5E5E5"> the reasons through</font>

236
00:14:23,800 --> 00:14:29,310
which this happens<font color="#E5E5E5"> but the summary is</font>

237
00:14:26,430 --> 00:14:32,140
parsing is not that easy

238
00:14:29,310 --> 00:14:34,839
so handing variables<font color="#E5E5E5"> is one of the many</font>

239
00:14:32,140 --> 00:14:38,199
<font color="#CCCCCC">reasons for which parsing is not easy</font>

240
00:14:34,840 --> 00:14:42,040
<font color="#E5E5E5">and parsing is slowed</font><font color="#CCCCCC"> down a lot by this</font>

241
00:14:38,200 --> 00:14:45,130
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of things if</font><font color="#E5E5E5"> you are having fun</font>

242
00:14:42,040 --> 00:14:46,959
<font color="#E5E5E5">with this and in this in JavaScript</font>

243
00:14:45,130 --> 00:14:49,180
<font color="#CCCCCC">don't worry if the</font><font color="#E5E5E5"> compiler or</font><font color="#CCCCCC"> the</font>

244
00:14:46,960 --> 00:14:50,590
<font color="#E5E5E5">interpreter is also having lots of fun</font>

245
00:14:49,180 --> 00:14:57,010
trying<font color="#CCCCCC"> to understand what the heck is</font>

246
00:14:50,590 --> 00:14:58,230
<font color="#CCCCCC">that this ever AVO</font><font color="#E5E5E5"> is even more evil if</font>

247
00:14:57,010 --> 00:15:02,200
you know how<font color="#E5E5E5"> it works</font>

248
00:14:58,230 --> 00:15:04,210
so fun fact there are actually four

249
00:15:02,200 --> 00:15:06,190
different different definitions of evil

250
00:15:04,210 --> 00:15:09,880
in the specifications of the JavaScript

251
00:15:06,190 --> 00:15:12,310
language depending on the context<font color="#E5E5E5"> and</font>

252
00:15:09,880 --> 00:15:14,820
some of them change the meaning of

253
00:15:12,310 --> 00:15:14,819
variables

254
00:15:16,530 --> 00:15:24,430
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> same thing with will if you have</font>

255
00:15:21,010 --> 00:15:29,680
you strict the syntax rules<font color="#E5E5E5"> are not the</font>

256
00:15:24,430 --> 00:15:33,280
<font color="#E5E5E5">same ones and just to make things</font><font color="#CCCCCC"> a</font>

257
00:15:29,680 --> 00:15:36,250
little bit slower by specification<font color="#E5E5E5"> it's</font>

258
00:15:33,280 --> 00:15:39,430
not permitted<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the parser to skip</font>

259
00:15:36,250 --> 00:15:39,880
<font color="#E5E5E5">anything because if there is a syntax</font>

260
00:15:39,430 --> 00:15:43,260
error

261
00:15:39,880 --> 00:15:46,210
you need to know about it immediately

262
00:15:43,260 --> 00:15:49,230
<font color="#E5E5E5">we're talking</font><font color="#CCCCCC"> about performance</font><font color="#E5E5E5"> skipping</font>

263
00:15:46,210 --> 00:15:52,020
things would have<font color="#CCCCCC"> been pretty</font><font color="#E5E5E5"> cool</font><font color="#CCCCCC"> I</font>

264
00:15:49,230 --> 00:15:54,820
would have

265
00:15:52,020 --> 00:15:56,529
okay once you have<font color="#CCCCCC"> your nice data</font>

266
00:15:54,820 --> 00:15:59,230
structure which is called<font color="#E5E5E5"> a neg</font><font color="#CCCCCC"> est</font>

267
00:15:56,529 --> 00:16:00,670
<font color="#E5E5E5">we'll come back to that</font><font color="#CCCCCC"> well you still</font>

268
00:15:59,230 --> 00:16:02,560
have a few steps before you can execute

269
00:16:00,670 --> 00:16:04,930
<font color="#CCCCCC">you need to clear</font><font color="#E5E5E5"> from some say safety</font>

270
00:16:02,560 --> 00:16:07,119
checks<font color="#CCCCCC"> then you</font><font color="#E5E5E5"> generate your byte code</font>

271
00:16:04,930 --> 00:16:10,239
every single<font color="#CCCCCC"> browser has a byte code</font>

272
00:16:07,120 --> 00:16:13,779
format and then the byte code is

273
00:16:10,240 --> 00:16:15,910
something<font color="#CCCCCC"> that you can execute yes okay</font>

274
00:16:13,779 --> 00:16:19,270
<font color="#CCCCCC">we have spent</font><font color="#E5E5E5"> those 500 or 900</font>

275
00:16:15,910 --> 00:16:20,829
milliseconds<font color="#E5E5E5"> so those were that was all</font>

276
00:16:19,270 --> 00:16:24,839
that<font color="#E5E5E5"> was happening the reason during</font>

277
00:16:20,830 --> 00:16:24,839
those 500 or 900 milliseconds

278
00:16:26,160 --> 00:16:31,899
<font color="#E5E5E5">we like to</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> this faster so we</font><font color="#CCCCCC"> have</font>

279
00:16:29,560 --> 00:16:34,540
all these<font color="#E5E5E5"> steps it would be nice if we</font>

280
00:16:31,899 --> 00:16:37,930
<font color="#E5E5E5">could really move or paralyze or make</font>

281
00:16:34,540 --> 00:16:42,459
faster some of them let's see how we can

282
00:16:37,930 --> 00:16:44,589
do that people<font color="#CCCCCC"> have tried things</font><font color="#E5E5E5"> now I</font>

283
00:16:42,459 --> 00:16:47,619
didn't put the obvious thing people<font color="#E5E5E5"> have</font>

284
00:16:44,589 --> 00:16:50,070
tried to<font color="#CCCCCC"> optimize the browser</font><font color="#E5E5E5"> yes we've</font>

285
00:16:47,620 --> 00:16:52,930
been<font color="#E5E5E5"> doing this for the past 20 years we</font>

286
00:16:50,070 --> 00:16:54,430
<font color="#CCCCCC">have done a</font><font color="#E5E5E5"> pretty good job</font><font color="#CCCCCC"> I mean we as</font>

287
00:16:52,930 --> 00:16:57,910
a hopper community have done a pretty

288
00:16:54,430 --> 00:17:02,199
<font color="#E5E5E5">good job but</font><font color="#CCCCCC"> again sometimes it's not</font>

289
00:16:57,910 --> 00:17:06,069
sufficient<font color="#CCCCCC"> so what can we do to make</font>

290
00:17:02,200 --> 00:17:08,410
<font color="#E5E5E5">things faster we can make lazy parsers</font>

291
00:17:06,069 --> 00:17:10,530
<font color="#E5E5E5">so parsers that are going to try and be</font>

292
00:17:08,410 --> 00:17:13,439
smart enough to sometimes skip things

293
00:17:10,530 --> 00:17:18,520
every<font color="#CCCCCC"> single browser</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> does that</font>

294
00:17:13,439 --> 00:17:21,699
<font color="#CCCCCC">in practice</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> practice it actually is</font>

295
00:17:18,520 --> 00:17:23,889
not<font color="#CCCCCC"> that useful</font><font color="#E5E5E5"> plus it actually</font>

296
00:17:21,699 --> 00:17:26,470
<font color="#CCCCCC">decreases the total performance</font><font color="#E5E5E5"> so it</font>

297
00:17:23,890 --> 00:17:29,230
makes starting a little<font color="#CCCCCC"> bit faster</font><font color="#E5E5E5"> and</font>

298
00:17:26,470 --> 00:17:33,910
<font color="#CCCCCC">then it makes the</font><font color="#E5E5E5"> total execution a bit</font>

299
00:17:29,230 --> 00:17:36,040
slower we have<font color="#E5E5E5"> recently learned appended</font>

300
00:17:33,910 --> 00:17:37,840
in<font color="#CCCCCC"> Firefox and I think Rob has then did</font>

301
00:17:36,040 --> 00:17:39,399
something<font color="#E5E5E5"> similar recently something</font>

302
00:17:37,840 --> 00:17:41,860
<font color="#E5E5E5">called byte code caching which is</font>

303
00:17:39,400 --> 00:17:44,410
<font color="#E5E5E5">extremely great the second time you load</font>

304
00:17:41,860 --> 00:17:47,409
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> you skip most of the</font>

305
00:17:44,410 --> 00:17:50,290
steps I mentioned above that's insanely

306
00:17:47,410 --> 00:17:52,809
cool<font color="#E5E5E5"> there are two cases in which it</font>

307
00:17:50,290 --> 00:17:54,520
<font color="#E5E5E5">doesn't work the first case is</font><font color="#CCCCCC"> the first</font>

308
00:17:52,809 --> 00:17:56,620
<font color="#E5E5E5">time you connect to a</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> because</font>

309
00:17:54,520 --> 00:17:58,900
<font color="#CCCCCC">you haven't loaded that Jay is yet</font><font color="#E5E5E5"> the</font>

310
00:17:56,620 --> 00:18:00,610
second thing is five<font color="#CCCCCC"> minutes later when</font>

311
00:17:58,900 --> 00:18:01,720
Facebook<font color="#E5E5E5"> has updated their JavaScript</font>

312
00:18:00,610 --> 00:18:02,740
<font color="#CCCCCC">code</font>

313
00:18:01,720 --> 00:18:07,870
and you need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> restart the whole</font>

314
00:18:02,740 --> 00:18:11,830
process so great technology we're trying

315
00:18:07,870 --> 00:18:15,340
to optimize the other cases people<font color="#E5E5E5"> on</font>

316
00:18:11,830 --> 00:18:16,780
the development on the<font color="#E5E5E5"> Jas dev team the</font>

317
00:18:15,340 --> 00:18:19,120
<font color="#CCCCCC">jf</font><font color="#E5E5E5"> sorry</font>

318
00:18:16,780 --> 00:18:23,350
side have tried to<font color="#CCCCCC"> optimize things of</font>

319
00:18:19,120 --> 00:18:26,590
course<font color="#E5E5E5"> typically with the use of</font>

320
00:18:23,350 --> 00:18:30,699
minimizer's that try<font color="#E5E5E5"> to make the source</font>

321
00:18:26,590 --> 00:18:34,840
code shorter<font color="#E5E5E5"> or with lady</font><font color="#CCCCCC"> lazy module</font>

322
00:18:30,700 --> 00:18:38,020
loaders<font color="#E5E5E5"> so the first one minimizer's are</font>

323
00:18:34,840 --> 00:18:40,709
pretty<font color="#E5E5E5"> good at reducing the total</font><font color="#CCCCCC"> size</font>

324
00:18:38,020 --> 00:18:43,240
of the file<font color="#E5E5E5"> that is being sent and</font>

325
00:18:40,710 --> 00:18:52,270
typically they may actually make parsing

326
00:18:43,240 --> 00:18:54,820
slower in our experience<font color="#E5E5E5"> so so useful in</font>

327
00:18:52,270 --> 00:18:57,720
some cases<font color="#CCCCCC"> not a solution</font><font color="#E5E5E5"> unfortunately</font>

328
00:18:54,820 --> 00:19:01,060
<font color="#E5E5E5">plus they also make the code unreadable</font>

329
00:18:57,720 --> 00:19:04,060
lazy loaders require refactoring your

330
00:19:01,060 --> 00:19:05,530
code<font color="#CCCCCC"> sometimes they work and generally</font>

331
00:19:04,060 --> 00:19:10,030
they actually make<font color="#E5E5E5"> your performance</font>

332
00:19:05,530 --> 00:19:12,760
<font color="#CCCCCC">force also plus</font><font color="#E5E5E5"> once you reach an large</font>

333
00:19:10,030 --> 00:19:14,440
enough amount of<font color="#CCCCCC"> JavaScript code</font><font color="#E5E5E5"> lazy</font>

334
00:19:12,760 --> 00:19:16,450
loaders are going to be<font color="#E5E5E5"> insanely</font>

335
00:19:14,440 --> 00:19:18,760
complicated to introduce if you have not

336
00:19:16,450 --> 00:19:20,880
<font color="#CCCCCC">built</font><font color="#E5E5E5"> your code from this from start for</font>

337
00:19:18,760 --> 00:19:20,879
that

338
00:19:21,500 --> 00:19:26,870
people have also tried<font color="#CCCCCC"> to improve</font>

339
00:19:23,510 --> 00:19:29,000
browsers<font color="#E5E5E5"> by providing new technologies</font>

340
00:19:26,870 --> 00:19:30,739
in the browser that<font color="#E5E5E5"> you that developers</font>

341
00:19:29,000 --> 00:19:34,990
can use<font color="#E5E5E5"> to make faster stuff</font>

342
00:19:30,740 --> 00:19:38,300
so recently<font color="#E5E5E5"> wasn't which is great and</font>

343
00:19:34,990 --> 00:19:40,460
works for<font color="#E5E5E5"> several use case many use</font>

344
00:19:38,300 --> 00:19:42,440
<font color="#CCCCCC">cases but not</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of them because you</font>

345
00:19:40,460 --> 00:19:48,040
need<font color="#E5E5E5"> to be to basically write your code</font>

346
00:19:42,440 --> 00:19:50,990
in C++<font color="#CCCCCC"> all rest</font><font color="#E5E5E5"> if you're lucky</font><font color="#CCCCCC"> and</font>

347
00:19:48,040 --> 00:19:54,290
there are<font color="#E5E5E5"> ideas to use the service</font>

348
00:19:50,990 --> 00:19:56,240
workers to<font color="#E5E5E5"> improve the loading time of</font>

349
00:19:54,290 --> 00:19:58,550
your applications<font color="#CCCCCC"> throw the enemy of</font>

350
00:19:56,240 --> 00:20:00,380
<font color="#CCCCCC">your JavaScript of course you're going</font>

351
00:19:58,550 --> 00:20:02,240
<font color="#E5E5E5">to spend your time if you're trying to</font>

352
00:20:00,380 --> 00:20:03,680
use this for a<font color="#E5E5E5"> website that's uploaded</font>

353
00:20:02,240 --> 00:20:05,990
if they did every five minutes<font color="#CCCCCC"> you're</font>

354
00:20:03,680 --> 00:20:08,090
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to spend your</font><font color="#E5E5E5"> time downloading</font>

355
00:20:05,990 --> 00:20:09,530
updates<font color="#E5E5E5"> and compiling your updates and</font>

356
00:20:08,090 --> 00:20:11,929
preparing<font color="#E5E5E5"> your updates for execution</font>

357
00:20:09,530 --> 00:20:15,860
which is going<font color="#E5E5E5"> to be pretty much as</font><font color="#CCCCCC"> good</font>

358
00:20:11,930 --> 00:20:19,880
for the<font color="#E5E5E5"> planet as Bitcoin not the best</font>

359
00:20:15,860 --> 00:20:22,100
solution<font color="#CCCCCC"> oh and people</font><font color="#E5E5E5"> are of course</font>

360
00:20:19,880 --> 00:20:23,630
doing native apps<font color="#E5E5E5"> because sometimes if</font>

361
00:20:22,100 --> 00:20:27,189
you<font color="#E5E5E5"> want to make things start faster</font>

362
00:20:23,630 --> 00:20:30,290
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> the native app is the solution</font>

363
00:20:27,190 --> 00:20:32,960
our objective here is<font color="#E5E5E5"> to provide</font>

364
00:20:30,290 --> 00:20:35,360
something<font color="#E5E5E5"> that doesn't need you to</font>

365
00:20:32,960 --> 00:20:39,620
<font color="#E5E5E5">refactor doesn't need you to use a</font>

366
00:20:35,360 --> 00:20:42,139
<font color="#E5E5E5">native app</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> just so it's called the</font>

367
00:20:39,620 --> 00:20:44,120
<font color="#CCCCCC">JavaScript binary</font>

368
00:20:42,140 --> 00:20:47,450
it's a proposal<font color="#E5E5E5"> for the JavaScript</font>

369
00:20:44,120 --> 00:20:49,969
language<font color="#E5E5E5"> basically what it's a new file</font>

370
00:20:47,450 --> 00:20:51,679
format<font color="#CCCCCC"> oh yes we've been working on</font><font color="#E5E5E5"> this</font>

371
00:20:49,970 --> 00:20:56,660
<font color="#CCCCCC">Soviets</font><font color="#E5E5E5"> Mozilla Bloomberg and Facebook</font>

372
00:20:51,679 --> 00:20:59,090
<font color="#E5E5E5">so it's a new file format instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> dot</font>

373
00:20:56,660 --> 00:21:02,450
J's files you're<font color="#CCCCCC"> going to send B dot B</font>

374
00:20:59,090 --> 00:21:06,409
<font color="#E5E5E5">J's files which are much faster to ports</font>

375
00:21:02,450 --> 00:21:08,929
which are pretty<font color="#E5E5E5"> much equivalent</font><font color="#CCCCCC"> they're</font>

376
00:21:06,410 --> 00:21:11,270
<font color="#E5E5E5">not a defied it's not a bytecode it's</font>

377
00:21:08,929 --> 00:21:14,030
not a new version of web assembly it's

378
00:21:11,270 --> 00:21:15,980
not a competition<font color="#CCCCCC"> of women assembly it's</font>

379
00:21:14,030 --> 00:21:21,559
your usual JavaScript<font color="#E5E5E5"> just in a</font>

380
00:21:15,980 --> 00:21:23,299
<font color="#E5E5E5">different format so if you recall told</font>

381
00:21:21,559 --> 00:21:26,090
you you would not have<font color="#CCCCCC"> to read it many</font>

382
00:21:23,299 --> 00:21:29,059
times<font color="#E5E5E5"> but that's I didn't never said</font>

383
00:21:26,090 --> 00:21:32,090
that you would never<font color="#E5E5E5"> read it again</font><font color="#CCCCCC"> so</font>

384
00:21:29,059 --> 00:21:35,049
this is our function declaration so this

385
00:21:32,090 --> 00:21:39,020
data structure is what we call<font color="#CCCCCC"> an AST an</font>

386
00:21:35,049 --> 00:21:41,179
abstract syntax tree<font color="#E5E5E5"> so it's a tree it</font>

387
00:21:39,020 --> 00:21:43,220
represents<font color="#CCCCCC"> the syntax and it's kind of</font>

388
00:21:41,179 --> 00:21:47,000
<font color="#E5E5E5">abstract</font>

389
00:21:43,220 --> 00:21:50,810
we can store<font color="#E5E5E5"> it efficiently we can store</font>

390
00:21:47,000 --> 00:21:53,980
it just as this sequence<font color="#CCCCCC"> of members plus</font>

391
00:21:50,810 --> 00:21:56,179
the definition of the string above<font color="#CCCCCC"> I</font>

392
00:21:53,980 --> 00:21:59,200
skipped a<font color="#CCCCCC"> few things</font><font color="#E5E5E5"> plus we can</font>

393
00:21:56,180 --> 00:21:59,200
compress<font color="#CCCCCC"> it afterwards</font>

394
00:21:59,370 --> 00:22:04,979
the whole point of that were there are

395
00:22:01,140 --> 00:22:07,080
several<font color="#E5E5E5"> points remember</font><font color="#CCCCCC"> the long lists</font>

396
00:22:04,980 --> 00:22:11,040
we had earlier<font color="#CCCCCC"> when we</font><font color="#E5E5E5"> can make it</font>

397
00:22:07,080 --> 00:22:13,110
shorter still need to download the<font color="#CCCCCC"> led</font>

398
00:22:11,040 --> 00:22:17,280
<font color="#CCCCCC">we can tokenize parse and check things</font>

399
00:22:13,110 --> 00:22:19,919
in a<font color="#E5E5E5"> much more efficient way if we have</font>

400
00:22:17,280 --> 00:22:23,730
a good binary format<font color="#E5E5E5"> we can actually</font>

401
00:22:19,920 --> 00:22:26,070
<font color="#E5E5E5">skip things and with a few changes to</font>

402
00:22:23,730 --> 00:22:27,810
<font color="#E5E5E5">the specification but if you have the</font>

403
00:22:26,070 --> 00:22:30,600
right specification<font color="#E5E5E5"> we can skip things</font>

404
00:22:27,810 --> 00:22:32,250
and only<font color="#E5E5E5"> read what we need</font><font color="#CCCCCC"> only tokenize</font>

405
00:22:30,600 --> 00:22:34,919
what we need<font color="#CCCCCC"> only parse what we need</font>

406
00:22:32,250 --> 00:22:39,300
<font color="#CCCCCC">only</font><font color="#E5E5E5"> check what we need then we generate</font>

407
00:22:34,920 --> 00:22:41,250
<font color="#E5E5E5">the</font><font color="#CCCCCC"> PI's</font><font color="#E5E5E5"> code and we execute many things</font>

408
00:22:39,300 --> 00:22:45,090
<font color="#E5E5E5">are faster hopefully the file is smaller</font>

409
00:22:41,250 --> 00:22:47,400
we haven't reached that stage yet we can

410
00:22:45,090 --> 00:22:49,620
start all the operations much faster we

411
00:22:47,400 --> 00:22:53,280
don't need to perform<font color="#E5E5E5"> as many operations</font>

412
00:22:49,620 --> 00:22:55,379
before<font color="#E5E5E5"> we start tokenization</font><font color="#CCCCCC"> which you</font>

413
00:22:53,280 --> 00:22:58,470
know<font color="#E5E5E5"> had to guess whether</font><font color="#CCCCCC"> 4 was a</font>

414
00:22:55,380 --> 00:23:00,590
keyword or an identifier<font color="#CCCCCC"> or name</font><font color="#E5E5E5"> it</font>

415
00:22:58,470 --> 00:23:02,580
becomes<font color="#E5E5E5"> absolutely</font><font color="#CCCCCC"> trivial and the</font>

416
00:23:00,590 --> 00:23:04,830
<font color="#CCCCCC">format is what we call the proof</font>

417
00:23:02,580 --> 00:23:07,770
carrying format which basically means

418
00:23:04,830 --> 00:23:11,220
that checking<font color="#E5E5E5"> that things are basically</font>

419
00:23:07,770 --> 00:23:15,240
safe<font color="#CCCCCC"> or is much much much faster</font><font color="#E5E5E5"> than it</font>

420
00:23:11,220 --> 00:23:18,120
used to<font color="#E5E5E5"> be again we only parse and check</font>

421
00:23:15,240 --> 00:23:19,860
and<font color="#CCCCCC"> organize the code we execute which</font>

422
00:23:18,120 --> 00:23:22,469
makes it much faster<font color="#E5E5E5"> for</font><font color="#CCCCCC"> startups and</font><font color="#E5E5E5"> we</font>

423
00:23:19,860 --> 00:23:25,320
<font color="#CCCCCC">do this without loss of</font><font color="#E5E5E5"> performance by</font>

424
00:23:22,470 --> 00:23:28,020
<font color="#CCCCCC">opposition to what happened before we</font>

425
00:23:25,320 --> 00:23:31,159
also need to parse all<font color="#E5E5E5"> names</font><font color="#CCCCCC"> or strings</font>

426
00:23:28,020 --> 00:23:33,480
or<font color="#E5E5E5"> live variables</font><font color="#CCCCCC"> etc only</font><font color="#E5E5E5"> once</font><font color="#CCCCCC"> and</font>

427
00:23:31,160 --> 00:23:36,180
we're pretty<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that we can open</font>

428
00:23:33,480 --> 00:23:39,990
<font color="#CCCCCC">paralyze this</font><font color="#E5E5E5"> much better for modern</font>

429
00:23:36,180 --> 00:23:43,450
architectures<font color="#E5E5E5"> so I believe we have a</font>

430
00:23:39,990 --> 00:23:48,630
<font color="#E5E5E5">little bit</font><font color="#CCCCCC"> of time for a demo</font>

431
00:23:43,450 --> 00:23:48,630
thank you so let's

432
00:23:49,860 --> 00:24:02,850
I've taken the source code<font color="#CCCCCC"> of jQuery so</font>

433
00:23:59,299 --> 00:24:06,240
this is jQuery you don't care you<font color="#CCCCCC"> don't</font>

434
00:24:02,850 --> 00:24:09,178
<font color="#E5E5E5">need to read it it's just click where we</font>

435
00:24:06,240 --> 00:24:12,210
compress<font color="#CCCCCC"> it above I don't know if you</font>

436
00:24:09,179 --> 00:24:16,799
can read the size but we divided the

437
00:24:12,210 --> 00:24:19,500
size by adult<font color="#E5E5E5"> about six models we can</font><font color="#CCCCCC"> do</font>

438
00:24:16,799 --> 00:24:24,440
better<font color="#E5E5E5"> but that's what we have for</font><font color="#CCCCCC"> the</font>

439
00:24:19,500 --> 00:24:26,700
moment<font color="#E5E5E5"> then we can decompress it back</font>

440
00:24:24,440 --> 00:24:29,639
which is actually a bit slower<font color="#E5E5E5"> than it</font>

441
00:24:26,700 --> 00:24:33,059
should<font color="#E5E5E5"> be but</font><font color="#CCCCCC"> there will</font><font color="#E5E5E5"> not optimize</font>

442
00:24:29,639 --> 00:24:35,100
that<font color="#E5E5E5"> part yet and this is the result</font>

443
00:24:33,059 --> 00:24:39,960
which should be more readable<font color="#CCCCCC"> in my</font>

444
00:24:35,100 --> 00:24:43,230
editor so things<font color="#E5E5E5"> to remember is okay we</font>

445
00:24:39,960 --> 00:24:47,760
have lost comments and that's<font color="#E5E5E5"> basically</font>

446
00:24:43,230 --> 00:24:50,159
<font color="#E5E5E5">the only thing</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> lost and so</font>

447
00:24:47,760 --> 00:24:53,840
variable names<font color="#E5E5E5"> are here layout is a bit</font>

448
00:24:50,159 --> 00:24:53,840
<font color="#E5E5E5">different but it's still understandable</font>

449
00:24:54,950 --> 00:25:00,720
<font color="#CCCCCC">so we have a</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can reverse</font>

450
00:24:57,899 --> 00:25:03,149
so it's a<font color="#E5E5E5"> compression format and</font><font color="#CCCCCC"> that</font>

451
00:25:00,720 --> 00:25:08,630
process<font color="#CCCCCC"> the that version when the</font><font color="#E5E5E5"> binary</font>

452
00:25:03,149 --> 00:25:08,629
version is much much<font color="#E5E5E5"> faster to load</font>

453
00:25:09,820 --> 00:25:15,429
last year<font color="#E5E5E5"> we wrote a full proof of</font>

454
00:25:12,730 --> 00:25:17,770
concept<font color="#E5E5E5"> what full - security we had not</font>

455
00:25:15,430 --> 00:25:19,420
<font color="#E5E5E5">implemented security for that test it</font>

456
00:25:17,770 --> 00:25:21,190
was just a<font color="#E5E5E5"> proof of concept just running</font>

457
00:25:19,420 --> 00:25:22,890
on my<font color="#CCCCCC"> computer I didn't hear about</font>

458
00:25:21,190 --> 00:25:26,530
<font color="#E5E5E5">security because</font><font color="#CCCCCC"> I was the only one</font>

459
00:25:22,890 --> 00:25:28,750
using<font color="#E5E5E5"> that format anyway I'm not going</font>

460
00:25:26,530 --> 00:25:31,450
<font color="#E5E5E5">to give hard numbers on the</font><font color="#CCCCCC"> speed-up but</font>

461
00:25:28,750 --> 00:25:35,920
it<font color="#CCCCCC"> ok we had insane speed ups with that</font>

462
00:25:31,450 --> 00:25:40,560
version<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> file format was really</font>

463
00:25:35,920 --> 00:25:44,250
much smaller than minimized<font color="#E5E5E5"> plus GZ plus</font>

464
00:25:40,560 --> 00:25:47,710
so we<font color="#E5E5E5"> put</font><font color="#CCCCCC"> that into</font><font color="#E5E5E5"> the standard</font>

465
00:25:44,250 --> 00:25:50,560
<font color="#E5E5E5">standardization track and right now we</font>

466
00:25:47,710 --> 00:25:53,620
<font color="#E5E5E5">are currently are writing a third</font>

467
00:25:50,560 --> 00:25:55,629
prototype which has the security<font color="#CCCCCC"> the</font>

468
00:25:53,620 --> 00:25:58,179
security<font color="#E5E5E5"> again it easier and faster to</font>

469
00:25:55,630 --> 00:26:00,670
check with<font color="#E5E5E5"> JavaScript the source code of</font>

470
00:25:58,180 --> 00:26:04,060
this<font color="#E5E5E5"> parser is easier</font><font color="#CCCCCC"> to check than the</font>

471
00:26:00,670 --> 00:26:06,850
source than<font color="#CCCCCC"> the existing parser that</font><font color="#E5E5E5"> is</font>

472
00:26:04,060 --> 00:26:09,250
part of<font color="#E5E5E5"> Firefox or any competitor so</font>

473
00:26:06,850 --> 00:26:11,230
it's<font color="#CCCCCC"> actually harder to make security</font>

474
00:26:09,250 --> 00:26:15,310
<font color="#E5E5E5">errors in the parser it's never</font>

475
00:26:11,230 --> 00:26:19,000
impossible but<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> order okay we're not</font>

476
00:26:15,310 --> 00:26:22,440
finished<font color="#E5E5E5"> yet</font><font color="#CCCCCC"> but anyway it's on</font><font color="#E5E5E5"> the</font>

477
00:26:19,000 --> 00:26:27,790
<font color="#E5E5E5">process to be finished and standardized</font>

478
00:26:22,440 --> 00:26:30,700
our hope is that<font color="#E5E5E5"> we'll be</font><font color="#CCCCCC"> able to ship a</font>

479
00:26:27,790 --> 00:26:33,070
version for obscene gestures<font color="#E5E5E5"> during</font><font color="#CCCCCC"> this</font>

480
00:26:30,700 --> 00:26:36,210
summer<font color="#E5E5E5"> and try it</font><font color="#CCCCCC"> with the number of</font>

481
00:26:33,070 --> 00:26:36,210
<font color="#E5E5E5">large vendors</font>

482
00:26:36,250 --> 00:26:41,879
if you want to help and thank<font color="#E5E5E5"> you for</font>

483
00:26:39,789 --> 00:26:41,879
<font color="#E5E5E5">listening</font>

484
00:26:48,970 --> 00:26:59,790
[Applause]

485
00:26:50,880 --> 00:26:59,790
yes yes yes

486
00:27:04,970 --> 00:27:11,880
so the question is I<font color="#E5E5E5"> mentioned that</font>

487
00:27:09,090 --> 00:27:13,980
during<font color="#E5E5E5"> parsing we can skip the</font><font color="#CCCCCC"> parts</font>

488
00:27:11,880 --> 00:27:15,510
that were not using yet<font color="#E5E5E5"> and the question</font>

489
00:27:13,980 --> 00:27:17,700
is do we need to parse<font color="#E5E5E5"> them later</font><font color="#CCCCCC"> yeah</font>

490
00:27:15,510 --> 00:27:19,860
of<font color="#CCCCCC"> course the answer is</font><font color="#E5E5E5"> yes reports</font><font color="#CCCCCC"> them</font>

491
00:27:17,700 --> 00:27:22,560
later but<font color="#E5E5E5"> we only need to report the</font>

492
00:27:19,860 --> 00:27:25,169
part that<font color="#CCCCCC"> we're using we can</font><font color="#E5E5E5"> parse one</font>

493
00:27:22,560 --> 00:27:27,270
function at a time we<font color="#E5E5E5"> can say hey let's</font>

494
00:27:25,170 --> 00:27:29,670
<font color="#E5E5E5">start at this offset until that</font><font color="#CCCCCC"> offset</font>

495
00:27:27,270 --> 00:27:31,560
<font color="#E5E5E5">and just parse that part which</font><font color="#CCCCCC"> is</font>

496
00:27:29,670 --> 00:27:34,040
something that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> possible with text</font>

497
00:27:31,560 --> 00:27:34,040
JavaScript

498
00:27:46,730 --> 00:27:54,650
you can try to scream<font color="#E5E5E5"> if you want in</font>

499
00:27:49,850 --> 00:27:57,730
case somebody hears<font color="#CCCCCC"> okay does anyone</font>

500
00:27:54,650 --> 00:27:57,730
<font color="#E5E5E5">have a question who's closer</font>

501
00:27:58,490 --> 00:28:01,490
yes

502
00:28:01,520 --> 00:28:05,910
apparently I went a<font color="#CCCCCC"> bit over time' so if</font>

503
00:28:04,350 --> 00:28:10,020
you have<font color="#E5E5E5"> questions do not hesitate to</font>

504
00:28:05,910 --> 00:28:12,110
<font color="#E5E5E5">have them afterwards thank you for</font>

505
00:28:10,020 --> 00:28:12,110
listening

506
00:30:04,230 --> 00:30:06,290
<font color="#E5E5E5">you</font>

