1
00:00:05,310 --> 00:00:12,040
hello everyone<font color="#CCCCCC"> so</font><font color="#E5E5E5"> our next</font><font color="#CCCCCC"> speaker</font>

2
00:00:08,650 --> 00:00:14,049
<font color="#CCCCCC">Stefan ben'll and he will be talking</font>

3
00:00:12,040 --> 00:00:19,390
<font color="#E5E5E5">about lifting your speed limits with</font>

4
00:00:14,049 --> 00:00:21,990
<font color="#CCCCCC">seitan so hi</font><font color="#E5E5E5"> can you</font><font color="#CCCCCC"> hear me well thanks</font>

5
00:00:19,390 --> 00:00:21,990
<font color="#CCCCCC">ok right ok</font>

6
00:00:22,140 --> 00:00:30,369
<font color="#E5E5E5">so welcome to</font><font color="#CCCCCC"> my talk this</font><font color="#E5E5E5"> is probably</font>

7
00:00:28,060 --> 00:00:32,680
the biggest fall of ever<font color="#E5E5E5"> talking so I'm</font>

8
00:00:30,369 --> 00:00:38,289
really<font color="#E5E5E5"> happy to be here it wasn't the</font>

9
00:00:32,680 --> 00:00:41,920
first time<font color="#CCCCCC"> it was to me so I my name</font><font color="#E5E5E5"> is</font>

10
00:00:38,289 --> 00:00:47,409
<font color="#E5E5E5">Jeff and</font><font color="#CCCCCC"> Dena I regularly</font><font color="#E5E5E5"> give talk to</font>

11
00:00:41,920 --> 00:00:49,409
Python conferences is<font color="#E5E5E5"> my it's my first</font>

12
00:00:47,409 --> 00:00:57,059
<font color="#CCCCCC">non-title</font><font color="#E5E5E5"> conference in quite a while</font>

13
00:00:49,409 --> 00:00:59,440
<font color="#E5E5E5">engineers and</font><font color="#CCCCCC"> um so the talk will be on</font>

14
00:00:57,059 --> 00:01:05,679
<font color="#E5E5E5">Titan on the second compiler so</font>

15
00:00:59,440 --> 00:01:08,110
<font color="#CCCCCC">patinated topic I'll have a quick quick</font>

16
00:01:05,680 --> 00:01:13,299
poll first<font color="#E5E5E5"> how many</font><font color="#CCCCCC"> of you are</font><font color="#E5E5E5"> regular</font>

17
00:01:08,110 --> 00:01:16,240
Python also<font color="#E5E5E5"> regular</font><font color="#CCCCCC"> patent users ok</font>

18
00:01:13,299 --> 00:01:20,649
pretty<font color="#E5E5E5"> much the majority how many of you</font>

19
00:01:16,240 --> 00:01:26,199
have<font color="#CCCCCC"> used</font><font color="#E5E5E5"> siphon before or some of you</font>

20
00:01:20,649 --> 00:01:28,570
<font color="#CCCCCC">okay I mean our in the</font><font color="#E5E5E5"> Big Data of</font>

21
00:01:26,200 --> 00:01:33,460
scientific computing<font color="#E5E5E5"> this kind of</font><font color="#CCCCCC"> area</font>

22
00:01:28,570 --> 00:01:38,350
<font color="#CCCCCC">so</font><font color="#E5E5E5"> doing data processing in some way</font><font color="#CCCCCC"> ok</font>

23
00:01:33,460 --> 00:01:41,288
cool that's about less than<font color="#E5E5E5"> half of you</font>

24
00:01:38,350 --> 00:01:45,490
okay<font color="#E5E5E5"> cool</font>

25
00:01:41,289 --> 00:01:51,100
<font color="#E5E5E5">so I'll get start with my talk first of</font>

26
00:01:45,490 --> 00:01:55,658
all bit more background on myself<font color="#CCCCCC"> so I'm</font>

27
00:01:51,100 --> 00:01:59,469
<font color="#E5E5E5">a core developer of</font><font color="#CCCCCC"> siphon have been</font>

28
00:01:55,659 --> 00:02:03,280
that since<font color="#E5E5E5"> the</font><font color="#CCCCCC"> early</font><font color="#E5E5E5"> beginning so we</font>

29
00:01:59,469 --> 00:02:05,259
started the project in 2007<font color="#CCCCCC"> actually as</font>

30
00:02:03,280 --> 00:02:08,530
a fork<font color="#E5E5E5"> of a different project at the</font>

31
00:02:05,259 --> 00:02:11,880
<font color="#E5E5E5">time which no longer</font><font color="#CCCCCC"> really exists so</font>

32
00:02:08,530 --> 00:02:11,880
this is kind of<font color="#CCCCCC"> a</font><font color="#E5E5E5"> thing you want</font>

33
00:02:14,330 --> 00:02:19,440
so it was it's<font color="#E5E5E5"> it's more than</font><font color="#CCCCCC"> 10 years</font>

34
00:02:17,489 --> 00:02:23,640
<font color="#E5E5E5">already so we had a ten pence</font>

35
00:02:19,440 --> 00:02:28,620
anniversary last year<font color="#CCCCCC"> quite a while for</font>

36
00:02:23,640 --> 00:02:36,179
for working<font color="#E5E5E5"> on source</font><font color="#CCCCCC"> project</font><font color="#E5E5E5"> but very</font>

37
00:02:28,620 --> 00:02:40,080
well<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> living trainings and consulting</font>

38
00:02:36,180 --> 00:02:41,519
<font color="#CCCCCC">-</font><font color="#E5E5E5"> so if you have any interest in its you</font>

39
00:02:40,080 --> 00:02:45,450
<font color="#E5E5E5">know better than you currently do or</font>

40
00:02:41,519 --> 00:02:47,540
starting using it<font color="#E5E5E5"> please contact me</font><font color="#CCCCCC"> um I</font>

41
00:02:45,450 --> 00:02:50,280
can help<font color="#E5E5E5"> you with</font><font color="#CCCCCC"> that</font>

42
00:02:47,540 --> 00:02:52,350
but most of<font color="#E5E5E5"> the time during the week I'm</font>

43
00:02:50,280 --> 00:02:57,660
actually working for<font color="#E5E5E5"> a company called</font>

44
00:02:52,350 --> 00:02:59,840
<font color="#E5E5E5">trust you and this is what we do so</font><font color="#CCCCCC"> what</font>

45
00:02:57,660 --> 00:03:02,760
you can say you're looking for<font color="#CCCCCC"> a hotel</font>

46
00:02:59,840 --> 00:03:04,290
in Google and it's going<font color="#E5E5E5"> to give you a</font>

47
00:03:02,760 --> 00:03:08,429
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> hotel</font>

48
00:03:04,290 --> 00:03:10,798
<font color="#E5E5E5">including a retching okay so you get</font>

49
00:03:08,430 --> 00:03:12,569
something<font color="#E5E5E5"> like oh this is a four-star</font>

50
00:03:10,799 --> 00:03:16,019
hotel<font color="#CCCCCC"> three point nine</font><font color="#E5E5E5"> out of five</font>

51
00:03:12,569 --> 00:03:18,268
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that and if you click</font>

52
00:03:16,019 --> 00:03:20,730
<font color="#CCCCCC">around a bit and what</font><font color="#E5E5E5"> they show that</font>

53
00:03:18,269 --> 00:03:24,600
eventually<font color="#CCCCCC"> tell you that this rating is</font>

54
00:03:20,730 --> 00:03:28,440
I should<font color="#CCCCCC"> coming</font><font color="#E5E5E5"> from us so what we do is</font>

55
00:03:24,600 --> 00:03:30,690
we collect<font color="#E5E5E5"> hotel reviews</font><font color="#CCCCCC"> so actual</font>

56
00:03:28,440 --> 00:03:35,910
written<font color="#E5E5E5"> text from throughout</font><font color="#CCCCCC"> the</font>

57
00:03:30,690 --> 00:03:39,209
<font color="#CCCCCC">internet various places that from</font><font color="#E5E5E5"> from</font>

58
00:03:35,910 --> 00:03:46,459
<font color="#CCCCCC">booking photos so reservation sites but</font>

59
00:03:39,209 --> 00:03:50,459
also sites that collect reviews like

60
00:03:46,459 --> 00:03:54,060
<font color="#E5E5E5">hold a check or our TripAdvisor for</font>

61
00:03:50,459 --> 00:03:56,280
example<font color="#E5E5E5"> so we get those collect them and</font>

62
00:03:54,060 --> 00:04:00,209
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the huge amount of</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> processing</font>

63
00:03:56,280 --> 00:04:03,269
<font color="#E5E5E5">on them that really a global scale so we</font>

64
00:04:00,209 --> 00:04:05,040
collect them<font color="#E5E5E5"> globally</font><font color="#CCCCCC"> analyze the data</font>

65
00:04:03,269 --> 00:04:06,989
analyze<font color="#E5E5E5"> the actual text that</font><font color="#CCCCCC"> people</font>

66
00:04:05,040 --> 00:04:10,769
write so we do an<font color="#E5E5E5"> Okie in</font><font color="#CCCCCC"> a language</font>

67
00:04:06,989 --> 00:04:14,100
processing<font color="#CCCCCC"> and then the statistics on</font>

68
00:04:10,769 --> 00:04:15,690
that<font color="#E5E5E5"> and so Google's only one of our</font>

69
00:04:14,100 --> 00:04:17,120
client what we actually do is we sell

70
00:04:15,690 --> 00:04:20,070
these statistics<font color="#CCCCCC"> and this information</font>

71
00:04:17,120 --> 00:04:22,320
<font color="#E5E5E5">back to the hotels and then we can tell</font>

72
00:04:20,070 --> 00:04:23,820
them stuff like you know<font color="#E5E5E5"> in</font><font color="#CCCCCC"> comparison</font>

73
00:04:22,320 --> 00:04:26,340
to the hotel next<font color="#E5E5E5"> door</font>

74
00:04:23,820 --> 00:04:28,770
you could<font color="#E5E5E5"> improve your ratings by</font><font color="#CCCCCC"> 10%</font><font color="#E5E5E5"> if</font>

75
00:04:26,340 --> 00:04:32,549
you keep your rooms cleaner or you know

76
00:04:28,770 --> 00:04:36,080
stuff<font color="#CCCCCC"> like that or if you renovate your</font>

77
00:04:32,550 --> 00:04:38,910
<font color="#CCCCCC">pool for example</font><font color="#E5E5E5"> so that's what we do</font>

78
00:04:36,080 --> 00:04:41,280
and<font color="#E5E5E5"> that's how we do it so this is how</font>

79
00:04:38,910 --> 00:04:44,100
we show all this data to<font color="#CCCCCC"> health and</font><font color="#E5E5E5"> how</font>

80
00:04:41,280 --> 00:04:47,369
they can<font color="#E5E5E5"> use this</font><font color="#CCCCCC"> data to improve</font><font color="#E5E5E5"> their</font>

81
00:04:44,100 --> 00:04:50,370
<font color="#E5E5E5">home performance that</font><font color="#CCCCCC"> gets feedback in a</font>

82
00:04:47,370 --> 00:04:53,100
unified<font color="#CCCCCC"> and well-established way and</font>

83
00:04:50,370 --> 00:04:54,870
down there<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see this is really</font>

84
00:04:53,100 --> 00:04:57,540
<font color="#E5E5E5">big data so we get something like 3</font>

85
00:04:54,870 --> 00:04:59,670
<font color="#E5E5E5">million new revenues every</font><font color="#CCCCCC"> week and we</font>

86
00:04:57,540 --> 00:05:01,380
<font color="#CCCCCC">have a huge bunch of readers that we're</font>

87
00:04:59,670 --> 00:05:03,690
sitting<font color="#CCCCCC"> on that we can do data</font>

88
00:05:01,380 --> 00:05:07,350
processing on<font color="#E5E5E5"> so why do I</font><font color="#CCCCCC"> tell you all</font>

89
00:05:03,690 --> 00:05:11,969
this<font color="#E5E5E5"> what we do always this</font><font color="#CCCCCC"> on Titan</font>

90
00:05:07,350 --> 00:05:13,770
<font color="#E5E5E5">right so why do we use Python</font><font color="#CCCCCC"> really</font>

91
00:05:11,970 --> 00:05:16,260
<font color="#E5E5E5">works</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> us it's great from program</font>

92
00:05:13,770 --> 00:05:18,810
language really<font color="#E5E5E5"> it's very versatile it's</font>

93
00:05:16,260 --> 00:05:21,120
very very pragmatic language<font color="#E5E5E5"> it's</font>

94
00:05:18,810 --> 00:05:23,850
concise<font color="#E5E5E5"> readable so it's very</font><font color="#CCCCCC"> nice</font><font color="#E5E5E5"> and</font>

95
00:05:21,120 --> 00:05:25,560
has<font color="#CCCCCC"> a great community which is very</font>

96
00:05:23,850 --> 00:05:27,960
diverse<font color="#E5E5E5"> it's it's friendly is very</font>

97
00:05:25,560 --> 00:05:30,510
helpful things tend to be well

98
00:05:27,960 --> 00:05:31,859
documented<font color="#E5E5E5"> and if they're not there's a</font>

99
00:05:30,510 --> 00:05:34,409
huge bunch of stuff on Stack Overflow

100
00:05:31,860 --> 00:05:39,900
for<font color="#E5E5E5"> example where you can look stuff up</font>

101
00:05:34,410 --> 00:05:42,450
<font color="#CCCCCC">waiting</font><font color="#E5E5E5"> ask questions and</font><font color="#CCCCCC"> button that it</font>

102
00:05:39,900 --> 00:05:43,799
has an<font color="#E5E5E5"> excellent set</font><font color="#CCCCCC"> of libraries</font><font color="#E5E5E5"> and</font>

103
00:05:42,450 --> 00:05:45,590
tools that<font color="#E5E5E5"> you can use for data</font>

104
00:05:43,800 --> 00:05:48,630
<font color="#CCCCCC">processing so it's really a great</font>

105
00:05:45,590 --> 00:05:51,840
<font color="#E5E5E5">environment and ecosystem that we can</font>

106
00:05:48,630 --> 00:05:55,530
build on<font color="#E5E5E5"> it has has a great ecosystem</font>

107
00:05:51,840 --> 00:05:59,340
for big data<font color="#E5E5E5"> processing</font><font color="#CCCCCC"> NLP for building</font>

108
00:05:55,530 --> 00:06:01,859
web services<font color="#E5E5E5"> for automation for all the</font>

109
00:05:59,340 --> 00:06:04,950
data flow processing that we do for

110
00:06:01,860 --> 00:06:10,020
testing<font color="#CCCCCC"> for all that and many</font><font color="#E5E5E5"> of these</font>

111
00:06:04,950 --> 00:06:11,880
tools are<font color="#CCCCCC"> very well integrated which is</font>

112
00:06:10,020 --> 00:06:13,409
<font color="#CCCCCC">also cool so it's really not dies but</font>

113
00:06:11,880 --> 00:06:18,120
<font color="#E5E5E5">you have one great tool and another one</font>

114
00:06:13,410 --> 00:06:20,580
<font color="#CCCCCC">the year it's a</font><font color="#E5E5E5"> great ecosystem that we</font>

115
00:06:18,120 --> 00:06:23,250
can work on<font color="#E5E5E5"> and</font><font color="#CCCCCC"> one it's not the case</font>

116
00:06:20,580 --> 00:06:24,810
because<font color="#CCCCCC"> all data processing is really</font>

117
00:06:23,250 --> 00:06:28,290
based on vampires so this data structure

118
00:06:24,810 --> 00:06:29,700
<font color="#CCCCCC">that</font><font color="#E5E5E5"> all these tools</font><font color="#CCCCCC"> can build on likes</font>

119
00:06:28,290 --> 00:06:31,870
I hire excited learn

120
00:06:29,700 --> 00:06:33,729
<font color="#CCCCCC">pandas for data and</font><font color="#E5E5E5"> all of this</font>

121
00:06:31,870 --> 00:06:40,090
and all<font color="#E5E5E5"> of these tools are well</font>

122
00:06:33,730 --> 00:06:41,830
integrated<font color="#CCCCCC"> via the</font><font color="#E5E5E5"> data layer and it's</font>

123
00:06:40,090 --> 00:06:45,880
not only<font color="#CCCCCC"> the data layer that integrates</font>

124
00:06:41,830 --> 00:06:48,719
them<font color="#CCCCCC"> and now we come to Satan because</font>

125
00:06:45,880 --> 00:06:55,150
Satan is a great way to integrate<font color="#E5E5E5"> coat</font>

126
00:06:48,720 --> 00:06:57,030
okay so the<font color="#CCCCCC"> the data ecosystem works</font>

127
00:06:55,150 --> 00:07:00,780
that well because many<font color="#E5E5E5"> of those tools</font>

128
00:06:57,030 --> 00:07:02,979
use<font color="#CCCCCC"> numpy as the data layer</font><font color="#E5E5E5"> and</font>

129
00:07:00,780 --> 00:07:07,570
surprisingly large number<font color="#E5E5E5"> of these tools</font>

130
00:07:02,979 --> 00:07:13,419
<font color="#CCCCCC">that we use integrate external libraries</font>

131
00:07:07,570 --> 00:07:16,060
integrate native code<font color="#E5E5E5"> via syphon why</font>

132
00:07:13,419 --> 00:07:18,430
<font color="#CCCCCC">it's - well</font><font color="#E5E5E5"> it's actually the fastest</font>

133
00:07:16,060 --> 00:07:19,870
way<font color="#CCCCCC"> to integrate no difficult um</font>

134
00:07:18,430 --> 00:07:22,660
understand here I give the<font color="#CCCCCC"> torque so I</font>

135
00:07:19,870 --> 00:07:25,570
can say<font color="#E5E5E5"> that its</font><font color="#CCCCCC"> production proven it's</font>

136
00:07:22,660 --> 00:07:28,900
actually<font color="#E5E5E5"> widely used and it's really all</font>

137
00:07:25,570 --> 00:07:31,810
about getting<font color="#CCCCCC"> stuff done ok it's a</font>

138
00:07:28,900 --> 00:07:34,650
pragmatic programming language<font color="#CCCCCC"> it helps</font>

139
00:07:31,810 --> 00:07:36,690
you<font color="#CCCCCC"> keep your</font><font color="#E5E5E5"> focus on functionality</font>

140
00:07:34,650 --> 00:07:41,229
<font color="#CCCCCC">rather</font><font color="#E5E5E5"> than having to care about</font>

141
00:07:36,690 --> 00:07:44,050
<font color="#E5E5E5">boilerplate everywhere and it allows you</font>

142
00:07:41,229 --> 00:07:46,510
to<font color="#E5E5E5"> move freely between</font><font color="#CCCCCC"> Python and C or</font>

143
00:07:44,050 --> 00:07:48,580
C++ which is which is<font color="#E5E5E5"> something that</font>

144
00:07:46,510 --> 00:07:52,150
<font color="#E5E5E5">makes it even</font><font color="#CCCCCC"> unique programming</font>

145
00:07:48,580 --> 00:07:54,370
language at<font color="#CCCCCC"> that level you can write</font>

146
00:07:52,150 --> 00:07:58,210
code in<font color="#E5E5E5"> it that is as per funny as you</font>

147
00:07:54,370 --> 00:08:01,060
want and as native as you need it<font color="#E5E5E5"> and</font>

148
00:07:58,210 --> 00:08:02,010
<font color="#E5E5E5">you'll see examples for that</font><font color="#CCCCCC"> in a couple</font>

149
00:08:01,060 --> 00:08:05,200
minutes

150
00:08:02,010 --> 00:08:06,849
basically we write the<font color="#E5E5E5"> C code that you</font>

151
00:08:05,200 --> 00:08:13,630
don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to write we write C so</font><font color="#CCCCCC"> you</font>

152
00:08:06,849 --> 00:08:16,889
don't have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> if demo</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> knows the</font>

153
00:08:13,630 --> 00:08:19,570
<font color="#CCCCCC">Jupiter</font><font color="#E5E5E5"> notebook or</font><font color="#CCCCCC"> iPad notebook</font>

154
00:08:16,889 --> 00:08:22,440
actually<font color="#E5E5E5"> not so many you should be using</font>

155
00:08:19,570 --> 00:08:25,180
it is it's great it's a wonderful tool

156
00:08:22,440 --> 00:08:27,280
what gives you is a<font color="#E5E5E5"> little web server</font>

157
00:08:25,180 --> 00:08:29,770
<font color="#CCCCCC">that you run and then use your</font><font color="#E5E5E5"> web</font>

158
00:08:27,280 --> 00:08:31,469
interface<font color="#CCCCCC"> so it runs</font><font color="#E5E5E5"> in your browser</font><font color="#CCCCCC"> and</font>

159
00:08:29,770 --> 00:08:36,338
<font color="#E5E5E5">allows you to program in your browser</font>

160
00:08:31,469 --> 00:08:37,240
<font color="#CCCCCC">run codes</font><font color="#E5E5E5"> and do stuff like data</font>

161
00:08:36,339 --> 00:08:39,969
<font color="#E5E5E5">analysis</font>

162
00:08:37,240 --> 00:08:42,779
very interactive way so you get<font color="#CCCCCC"> the</font>

163
00:08:39,969 --> 00:08:45,399
<font color="#CCCCCC">title line you get feedback</font><font color="#E5E5E5"> and you can</font>

164
00:08:42,779 --> 00:08:47,410
visualize data through it so it has

165
00:08:45,399 --> 00:08:49,959
direct output for graphs for example

166
00:08:47,410 --> 00:08:53,500
<font color="#E5E5E5">lots of tools supported they are tools</font>

167
00:08:49,959 --> 00:08:58,029
that<font color="#E5E5E5"> do interactive and provide an</font>

168
00:08:53,500 --> 00:09:00,100
interactive<font color="#CCCCCC"> way to to visualize data</font><font color="#E5E5E5"> and</font>

169
00:08:58,029 --> 00:09:02,320
<font color="#E5E5E5">to move stuff around and try stuff out</font>

170
00:09:00,100 --> 00:09:05,589
and that so it's really<font color="#CCCCCC"> great to</font><font color="#E5E5E5"> also</font>

171
00:09:02,320 --> 00:09:08,800
remember<font color="#E5E5E5"> that name Jupiter notebook so</font>

172
00:09:05,589 --> 00:09:10,709
what I'm doing<font color="#CCCCCC"> here is I'm using it for</font>

173
00:09:08,800 --> 00:09:13,329
my presentation<font color="#CCCCCC"> there's a petrol</font>

174
00:09:10,709 --> 00:09:15,550
<font color="#E5E5E5">presentation tools also for it so I</font>

175
00:09:13,330 --> 00:09:17,470
<font color="#E5E5E5">totally something like swipe here and</font>

176
00:09:15,550 --> 00:09:21,490
<font color="#E5E5E5">then do stuff but actually prefer that</font>

177
00:09:17,470 --> 00:09:24,550
<font color="#E5E5E5">way so in order to make the Jupiter</font>

178
00:09:21,490 --> 00:09:28,180
notebook<font color="#E5E5E5"> run with</font><font color="#CCCCCC"> syphon all you have</font><font color="#E5E5E5"> to</font>

179
00:09:24,550 --> 00:09:32,260
do is load X siphon<font color="#E5E5E5"> then import siphon</font>

180
00:09:28,180 --> 00:09:36,010
and just<font color="#E5E5E5"> knows</font><font color="#CCCCCC"> what tightness and a</font>

181
00:09:32,260 --> 00:09:37,420
certain<font color="#E5E5E5"> sport in it and then just to</font>

182
00:09:36,010 --> 00:09:43,779
give<font color="#E5E5E5"> you an idea</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the environment</font>

183
00:09:37,420 --> 00:09:47,260
I'm working in<font color="#E5E5E5"> here</font><font color="#CCCCCC"> you can you know</font>

184
00:09:43,779 --> 00:09:51,310
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> court developer is talking to</font>

185
00:09:47,260 --> 00:09:55,510
you when<font color="#E5E5E5"> they are using some pre-release</font>

186
00:09:51,310 --> 00:09:57,969
alpha version in a live demo<font color="#E5E5E5"> okay so</font>

187
00:09:55,510 --> 00:10:03,610
let's see how<font color="#E5E5E5"> that</font><font color="#CCCCCC"> goes for</font><font color="#E5E5E5"> me I'm using</font>

188
00:09:57,970 --> 00:10:05,980
<font color="#E5E5E5">an umpire using siphon patterns</font><font color="#CCCCCC"> 306</font><font color="#E5E5E5"> kind</font>

189
00:10:03,610 --> 00:10:10,660
of a reason<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> C version more</font>

190
00:10:05,980 --> 00:10:13,540
or less<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> played here quick intro to</font>

191
00:10:10,660 --> 00:10:15,160
<font color="#CCCCCC">siphon this</font><font color="#E5E5E5"> is normal typing code so</font>

192
00:10:13,540 --> 00:10:17,380
what<font color="#CCCCCC"> I do is I take a type of math</font>

193
00:10:15,160 --> 00:10:19,420
module and port the sine function from

194
00:10:17,380 --> 00:10:23,470
it and I call it and I get<font color="#E5E5E5"> the outputs</font>

195
00:10:19,420 --> 00:10:26,920
<font color="#CCCCCC">of</font><font color="#E5E5E5"> it okay so that's final five</font><font color="#CCCCCC"> and now</font>

196
00:10:23,470 --> 00:10:30,550
all I have<font color="#E5E5E5"> to do in</font><font color="#CCCCCC"> order to</font><font color="#E5E5E5"> use siphon</font>

197
00:10:26,920 --> 00:10:33,939
with that is I tell<font color="#E5E5E5"> the Jupiter notebook</font>

198
00:10:30,550 --> 00:10:35,589
this is a siphon compiled cell so<font color="#E5E5E5"> this</font>

199
00:10:33,940 --> 00:10:37,810
is no<font color="#E5E5E5"> longer interpreted by Peyton</font>

200
00:10:35,589 --> 00:10:40,000
please make<font color="#CCCCCC"> it run incitement for me and</font>

201
00:10:37,810 --> 00:10:42,189
then what it does<font color="#E5E5E5"> is it compiles it for</font>

202
00:10:40,000 --> 00:10:46,529
me in the<font color="#E5E5E5"> background imports the module</font>

203
00:10:42,190 --> 00:10:46,529
and runs it okay

204
00:10:47,390 --> 00:10:56,670
so this is not compiled code<font color="#E5E5E5"> to compile</font>

205
00:10:50,100 --> 00:11:01,790
module and since<font color="#E5E5E5"> so what Satan does it</font>

206
00:10:56,670 --> 00:11:05,870
for me is it compiles the<font color="#E5E5E5"> - code to see</font>

207
00:11:01,790 --> 00:11:10,260
also<font color="#CCCCCC"> suppose if you</font><font color="#E5E5E5"> want but general see</font>

208
00:11:05,870 --> 00:11:12,149
so into native code<font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> it what the</font>

209
00:11:10,260 --> 00:11:14,069
the<font color="#E5E5E5"> Jupiter notebook does here is it</font>

210
00:11:12,149 --> 00:11:16,500
runs<font color="#E5E5E5"> siphoned to generate the C file for</font>

211
00:11:14,070 --> 00:11:20,040
me and then starts the<font color="#E5E5E5"> C compiler in the</font>

212
00:11:16,500 --> 00:11:22,200
back to generate a native extension

213
00:11:20,040 --> 00:11:26,240
module<font color="#E5E5E5"> a shared module that then gets</font>

214
00:11:22,200 --> 00:11:29,940
imported<font color="#E5E5E5"> by -</font><font color="#CCCCCC"> ok ok so</font><font color="#E5E5E5"> far that's the</font>

215
00:11:26,240 --> 00:11:32,630
general build process now since this is

216
00:11:29,940 --> 00:11:35,570
translated<font color="#CCCCCC"> into</font><font color="#E5E5E5"> see what I can do now is</font>

217
00:11:32,630 --> 00:11:39,000
<font color="#E5E5E5">instead of using the Python math module</font>

218
00:11:35,570 --> 00:11:41,700
which you<font color="#CCCCCC"> know requires me to do a</font>

219
00:11:39,000 --> 00:11:43,410
<font color="#E5E5E5">Python call and</font><font color="#CCCCCC"> have some sort of</font><font color="#E5E5E5"> check</font>

220
00:11:41,700 --> 00:11:48,329
<font color="#E5E5E5">in here and there and some special</font>

221
00:11:43,410 --> 00:11:50,790
casing and were then I would require<font color="#E5E5E5"> a</font>

222
00:11:48,329 --> 00:11:57,800
generally require to you know say<font color="#CCCCCC"> sign</font>

223
00:11:50,790 --> 00:12:03,029
<font color="#E5E5E5">of five</font><font color="#CCCCCC"> I can use the Lipsy math support</font>

224
00:11:57,800 --> 00:12:05,790
and this<font color="#E5E5E5"> is how I do it</font><font color="#CCCCCC"> I say C import</font>

225
00:12:03,029 --> 00:12:08,880
so that's a static import in<font color="#E5E5E5"> seitan</font>

226
00:12:05,790 --> 00:12:11,329
<font color="#CCCCCC">seaport</font><font color="#E5E5E5"> lips in math and then I take my</font>

227
00:12:08,880 --> 00:12:14,520
<font color="#E5E5E5">sine function from it and here just</font>

228
00:12:11,329 --> 00:12:16,739
assign it to a<font color="#CCCCCC"> private variable</font><font color="#E5E5E5"> and what</font>

229
00:12:14,520 --> 00:12:18,120
that does is you<font color="#CCCCCC"> know it all the reps</font>

230
00:12:16,740 --> 00:12:20,160
<font color="#CCCCCC">work for me so I get a Python function</font>

231
00:12:18,120 --> 00:12:23,190
which now internally calls the sine

232
00:12:20,160 --> 00:12:25,949
function and<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> use that from Python</font>

233
00:12:23,190 --> 00:12:29,579
and then it says that's the same value

234
00:12:25,950 --> 00:12:33,120
goes<font color="#CCCCCC"> before this</font><font color="#E5E5E5"> is sine of five okay so</font>

235
00:12:29,579 --> 00:12:35,550
what did I do here I made<font color="#CCCCCC"> seitan</font><font color="#E5E5E5"> auto</font>

236
00:12:33,120 --> 00:12:40,910
breath a<font color="#CCCCCC"> C function for me</font><font color="#E5E5E5"> to make a</font>

237
00:12:35,550 --> 00:12:40,910
caliber<font color="#E5E5E5"> from Peyton okay</font>

238
00:12:45,039 --> 00:12:49,399
that's a bit boring<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> sign</font>

239
00:12:48,199 --> 00:12:52,218
function<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> know there's</font>

240
00:12:49,399 --> 00:12:55,399
pattern support for<font color="#E5E5E5"> its gets more a bit</font>

241
00:12:52,219 --> 00:12:57,289
<font color="#E5E5E5">more interesting as soon as I do not</font>

242
00:12:55,399 --> 00:13:01,969
<font color="#E5E5E5">only call some</font><font color="#CCCCCC"> C function but there</font><font color="#E5E5E5"> is</font>

243
00:12:57,289 --> 00:13:03,289
stuff on<font color="#E5E5E5"> the along the way so I want to</font>

244
00:13:01,969 --> 00:13:05,809
<font color="#E5E5E5">have an interface I want to have a</font>

245
00:13:03,289 --> 00:13:09,819
<font color="#E5E5E5">function in Python that I can use and it</font>

246
00:13:05,809 --> 00:13:15,409
in turn<font color="#E5E5E5"> will use the sine function but</font>

247
00:13:09,819 --> 00:13:18,529
you<font color="#CCCCCC"> know I could say sine of</font><font color="#E5E5E5"> Phi but</font>

248
00:13:15,409 --> 00:13:20,239
maybe I want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have sine of x squared</font>

249
00:13:18,529 --> 00:13:24,579
<font color="#CCCCCC">or something so that's</font><font color="#E5E5E5"> a bit more</font>

250
00:13:20,239 --> 00:13:27,949
<font color="#CCCCCC">computation involved</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> and in order to</font>

251
00:13:24,579 --> 00:13:31,039
<font color="#E5E5E5">drop this from typing computation so I</font>

252
00:13:27,949 --> 00:13:34,098
could say sine of x squared<font color="#CCCCCC"> okay fine in</font>

253
00:13:31,039 --> 00:13:36,529
Python sure<font color="#CCCCCC"> I can do the same in C</font>

254
00:13:34,099 --> 00:13:39,589
<font color="#E5E5E5">that's actually faster</font><font color="#CCCCCC"> to evaluate in C</font>

255
00:13:36,529 --> 00:13:40,759
because there's just you know<font color="#CCCCCC"> processes</font>

256
00:13:39,589 --> 00:13:44,419
sees what it does it's not<font color="#E5E5E5"> long</font>

257
00:13:40,759 --> 00:13:46,699
interpreted that's native<font color="#E5E5E5"> code bunny so</font>

258
00:13:44,419 --> 00:13:49,848
what I can<font color="#E5E5E5"> do here is I write my own</font>

259
00:13:46,699 --> 00:13:51,829
<font color="#E5E5E5">little</font><font color="#CCCCCC"> Python function so this is now a</font>

260
00:13:49,849 --> 00:13:55,639
bit<font color="#E5E5E5"> of extended syntax that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have an</font>

261
00:13:51,829 --> 00:13:58,638
incitement<font color="#CCCCCC"> I can say</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> X the argument</font>

262
00:13:55,639 --> 00:14:01,489
that up house in is in fact<font color="#E5E5E5"> C double so</font>

263
00:13:58,639 --> 00:14:04,099
I'm typing<font color="#CCCCCC"> my input argument yeah my</font>

264
00:14:01,489 --> 00:14:06,349
variables and then I call the sine

265
00:14:04,099 --> 00:14:09,019
function<font color="#E5E5E5"> in there and that's essentially</font>

266
00:14:06,349 --> 00:14:11,449
the same<font color="#CCCCCC"> thing as here so here it above</font>

267
00:14:09,019 --> 00:14:14,119
I did<font color="#E5E5E5"> Auto wrapping and down there and</font>

268
00:14:11,449 --> 00:14:16,189
spelling out the function okay<font color="#CCCCCC"> so yeah</font>

269
00:14:14,119 --> 00:14:20,089
I'm writing Python function the<font color="#CCCCCC"> colds</font>

270
00:14:16,189 --> 00:14:23,389
<font color="#CCCCCC">see internally and still go</font><font color="#E5E5E5"> to the same</font>

271
00:14:20,089 --> 00:14:27,259
<font color="#E5E5E5">result and now</font><font color="#CCCCCC"> when I</font><font color="#E5E5E5"> if I want</font><font color="#CCCCCC"> to do</font>

272
00:14:23,389 --> 00:14:33,399
<font color="#E5E5E5">sine of x squared then I just spell</font><font color="#CCCCCC"> that</font>

273
00:14:27,259 --> 00:14:37,429
out<font color="#E5E5E5"> and just</font><font color="#CCCCCC"> to see the</font><font color="#E5E5E5"> difference</font><font color="#CCCCCC"> I</font>

274
00:14:33,399 --> 00:14:40,399
will actually<font color="#E5E5E5"> ask</font><font color="#CCCCCC"> syphon to tell me what</font>

275
00:14:37,429 --> 00:14:44,809
<font color="#E5E5E5">kind of</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> code generated for me so for</font>

276
00:14:40,399 --> 00:14:47,929
the<font color="#CCCCCC"> function I just wrote when I don't</font>

277
00:14:44,809 --> 00:14:51,228
just say<font color="#E5E5E5"> % site then so the site and</font>

278
00:14:47,929 --> 00:14:53,230
<font color="#CCCCCC">cell when I say site</font><font color="#E5E5E5"> - a for annotation</font>

279
00:14:51,229 --> 00:14:55,840
<font color="#E5E5E5">then it spits out an H of</font>

280
00:14:53,230 --> 00:14:57,850
snippet for me<font color="#E5E5E5"> which the interpreter</font><font color="#CCCCCC"> no</font>

281
00:14:55,840 --> 00:15:00,250
<font color="#CCCCCC">Perkin display for me here which</font>

282
00:14:57,850 --> 00:15:02,530
contains<font color="#E5E5E5"> my source code</font><font color="#CCCCCC"> and tells me</font><font color="#E5E5E5"> how</font>

283
00:15:00,250 --> 00:15:06,610
cyclin interpreted that source code<font color="#E5E5E5"> for</font>

284
00:15:02,530 --> 00:15:09,040
me<font color="#E5E5E5"> how the compiler sort and you see</font>

285
00:15:06,610 --> 00:15:11,440
there are a couple of shades of yellow

286
00:15:09,040 --> 00:15:14,199
in there and<font color="#E5E5E5"> these shades of yellow tell</font>

287
00:15:11,440 --> 00:15:15,100
me how much patent interaction there is

288
00:15:14,200 --> 00:15:17,290
going<font color="#CCCCCC"> on</font>

289
00:15:15,100 --> 00:15:20,440
so whenever objects are being<font color="#E5E5E5"> treated in</font>

290
00:15:17,290 --> 00:15:23,890
some way<font color="#CCCCCC"> the more object operation there</font>

291
00:15:20,440 --> 00:15:27,330
are the more that the darker the yellow

292
00:15:23,890 --> 00:15:30,640
<font color="#E5E5E5">gets okay so there</font><font color="#CCCCCC"> is obviously a lot of</font>

293
00:15:27,330 --> 00:15:33,100
patent interaction this is the C code

294
00:15:30,640 --> 00:15:35,020
here<font color="#CCCCCC"> we generated going on in the</font>

295
00:15:33,100 --> 00:15:38,080
signature<font color="#CCCCCC"> because the signature</font><font color="#E5E5E5"> actually</font>

296
00:15:35,020 --> 00:15:40,569
has to convert some<font color="#E5E5E5"> type an input</font>

297
00:15:38,080 --> 00:15:42,520
argument<font color="#CCCCCC"> that comes</font><font color="#E5E5E5"> in some object into</font>

298
00:15:40,570 --> 00:15:45,250
<font color="#E5E5E5">the C double very clear so it has to</font>

299
00:15:42,520 --> 00:15:48,699
take some object<font color="#CCCCCC"> and pack it into the C</font>

300
00:15:45,250 --> 00:15:50,500
double I do that conversion<font color="#CCCCCC"> do some some</font>

301
00:15:48,700 --> 00:15:52,540
general argument handling in the way

302
00:15:50,500 --> 00:15:54,880
that the patent semantics work so this

303
00:15:52,540 --> 00:15:57,160
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the place where the</font><font color="#E5E5E5"> PI can call</font>

304
00:15:54,880 --> 00:15:59,590
semantics is mapped to a<font color="#CCCCCC"> sit call</font>

305
00:15:57,160 --> 00:16:02,709
semantics<font color="#E5E5E5"> okay there's a lot of object</font>

306
00:15:59,590 --> 00:16:04,540
and operation<font color="#E5E5E5"> going on here and then the</font>

307
00:16:02,710 --> 00:16:06,670
next line<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just line the cosine</font>

308
00:16:04,540 --> 00:16:10,120
function<font color="#E5E5E5"> you can see that here it just</font>

309
00:16:06,670 --> 00:16:13,360
says sine of X in the C code okay so

310
00:16:10,120 --> 00:16:16,030
those<font color="#E5E5E5"> really plain</font><font color="#CCCCCC"> C operation and since</font>

311
00:16:13,360 --> 00:16:18,460
this is a<font color="#E5E5E5"> Python function the return</font>

312
00:16:16,030 --> 00:16:24,400
argument then<font color="#E5E5E5"> also has to be</font><font color="#CCCCCC"> an object</font>

313
00:16:18,460 --> 00:16:27,850
again<font color="#E5E5E5"> so this function does object to</font>

314
00:16:24,400 --> 00:16:30,880
see conversion on the<font color="#CCCCCC"> way in and c2</font>

315
00:16:27,850 --> 00:16:33,070
object conversion on<font color="#E5E5E5"> the way out and you</font>

316
00:16:30,880 --> 00:16:37,390
can see that here so the the result of

317
00:16:33,070 --> 00:16:40,320
sine of X<font color="#CCCCCC"> is converted</font><font color="#E5E5E5"> using a</font><font color="#CCCCCC"> capi</font>

318
00:16:37,390 --> 00:16:43,800
function of of<font color="#E5E5E5"> Python into a Python</font>

319
00:16:40,320 --> 00:16:43,800
<font color="#E5E5E5">float object</font>

320
00:16:49,340 --> 00:16:54,020
<font color="#E5E5E5">that's pretty much all there is</font><font color="#CCCCCC"> to it</font>

321
00:16:51,840 --> 00:16:57,810
<font color="#E5E5E5">no when I want to</font><font color="#CCCCCC"> do sent</font><font color="#E5E5E5"> x squared</font>

322
00:16:54,020 --> 00:17:01,079
<font color="#E5E5E5">here's a funny way of doing it and</font>

323
00:16:57,810 --> 00:17:04,139
squaring X and then<font color="#CCCCCC"> a cosine of x</font>

324
00:17:01,080 --> 00:17:09,660
<font color="#E5E5E5">squared and again when I look at the</font>

325
00:17:04,140 --> 00:17:12,540
result here side means<font color="#E5E5E5"> a gives me down</font>

326
00:17:09,660 --> 00:17:14,910
here there's a QC operations<font color="#CCCCCC"> or no</font>

327
00:17:12,540 --> 00:17:19,079
object operation is<font color="#E5E5E5"> going on here</font><font color="#CCCCCC"> X</font>

328
00:17:14,910 --> 00:17:21,959
times X square<font color="#E5E5E5"> and then sine of the</font>

329
00:17:19,079 --> 00:17:24,050
square and convert it into<font color="#E5E5E5"> a object</font>

330
00:17:21,959 --> 00:17:25,920
again and seitan does all these<font color="#CCCCCC"> things</font>

331
00:17:24,050 --> 00:17:27,240
automatically for<font color="#CCCCCC"> me so you</font><font color="#E5E5E5"> don't</font>

332
00:17:25,920 --> 00:17:31,440
actually see<font color="#E5E5E5"> them in the code is</font><font color="#CCCCCC"> just</font>

333
00:17:27,240 --> 00:17:35,190
the type system of siphon which mixes

334
00:17:31,440 --> 00:17:37,020
Python and C<font color="#E5E5E5"> and that allows it</font><font color="#CCCCCC"> to see</font>

335
00:17:35,190 --> 00:17:39,240
where object conversions are going on

336
00:17:37,020 --> 00:17:41,430
where native code can be generated<font color="#CCCCCC"> from</font>

337
00:17:39,240 --> 00:17:42,810
your code and where Python operations

338
00:17:41,430 --> 00:17:46,620
are needed and<font color="#E5E5E5"> seitan does all this</font>

339
00:17:42,810 --> 00:17:48,360
internally<font color="#E5E5E5"> so by default</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> you</font>

340
00:17:46,620 --> 00:17:50,370
can<font color="#CCCCCC"> drop a pin code in there</font><font color="#E5E5E5"> that</font>

341
00:17:48,360 --> 00:17:52,860
compiles<font color="#CCCCCC"> in to see but it's</font><font color="#E5E5E5"> Python has</font>

342
00:17:50,370 --> 00:17:55,169
<font color="#E5E5E5">piping semantics and whenever I say I</font>

343
00:17:52,860 --> 00:17:57,810
know better<font color="#CCCCCC"> you don't need a lavatory</font>

344
00:17:55,170 --> 00:18:02,270
object here<font color="#E5E5E5"> you can use a seat in the C</font>

345
00:17:57,810 --> 00:18:05,550
double some some native native<font color="#E5E5E5"> data type</font>

346
00:18:02,270 --> 00:18:07,320
<font color="#E5E5E5">and the compiler can say okay you live</font>

347
00:18:05,550 --> 00:18:09,659
in Python semantics you get<font color="#CCCCCC"> in to see</font>

348
00:18:07,320 --> 00:18:11,220
semantics here which are faster but<font color="#CCCCCC"> you</font>

349
00:18:09,660 --> 00:18:12,930
know but different and it automatically

350
00:18:11,220 --> 00:18:15,510
does<font color="#E5E5E5"> it for me so generates different</font>

351
00:18:12,930 --> 00:18:19,890
<font color="#E5E5E5">code when I say what the data structure</font>

352
00:18:15,510 --> 00:18:24,950
<font color="#CCCCCC">or</font><font color="#E5E5E5"> the data type is</font><font color="#CCCCCC"> different okay any</font>

353
00:18:19,890 --> 00:18:24,950
questions<font color="#CCCCCC"> on that high level</font><font color="#E5E5E5"> something</font>

354
00:18:27,419 --> 00:18:31,960
<font color="#E5E5E5">okay so this is generally how</font><font color="#CCCCCC"> the</font>

355
00:18:29,440 --> 00:18:37,090
language works<font color="#E5E5E5"> um it makes it spite of</font>

356
00:18:31,960 --> 00:18:38,379
the thief<font color="#E5E5E5"> and you just call on sizing</font>

357
00:18:37,090 --> 00:18:40,418
code<font color="#E5E5E5"> just looks like that that you</font>

358
00:18:38,379 --> 00:18:43,748
<font color="#E5E5E5">always jump somewhere between</font><font color="#CCCCCC"> patent</font>

359
00:18:40,419 --> 00:18:47,950
operations and<font color="#E5E5E5"> see operations or C++</font>

360
00:18:43,749 --> 00:18:52,179
operations back<font color="#E5E5E5"> and forth and it just</font>

361
00:18:47,950 --> 00:18:54,309
changed<font color="#CCCCCC"> I changed chains nicely this</font><font color="#E5E5E5"> is</font>

362
00:18:52,179 --> 00:18:56,590
how you<font color="#E5E5E5"> would do memory handling and see</font>

363
00:18:54,309 --> 00:19:01,570
how many<font color="#CCCCCC"> of you actually</font><font color="#E5E5E5"> have a some</font>

364
00:18:56,590 --> 00:19:03,129
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> see knowledge why the number</font>

365
00:19:01,570 --> 00:19:06,939
that's<font color="#CCCCCC"> true sure maybe</font>

366
00:19:03,129 --> 00:19:08,860
<font color="#E5E5E5">okay what's under the</font><font color="#CCCCCC"> pattern I think</font>

367
00:19:06,940 --> 00:19:10,360
that the<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> background was a bit</font>

368
00:19:08,860 --> 00:19:10,748
bigger<font color="#E5E5E5"> even but that's not a big</font>

369
00:19:10,360 --> 00:19:13,059
<font color="#E5E5E5">difference</font>

370
00:19:10,749 --> 00:19:18,850
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> so this is the right talk</font>

371
00:19:13,059 --> 00:19:22,090
<font color="#E5E5E5">for you so see memory handling</font><font color="#CCCCCC"> melon</font>

372
00:19:18,850 --> 00:19:24,668
free you<font color="#E5E5E5"> probably know those and you can</font>

373
00:19:22,090 --> 00:19:27,610
<font color="#E5E5E5">just use them in the same</font><font color="#CCCCCC"> way science</font>

374
00:19:24,669 --> 00:19:31,119
the<font color="#E5E5E5"> sighting code to analog</font><font color="#CCCCCC"> if the</font>

375
00:19:27,610 --> 00:19:32,979
malloc failed then here the race memory

376
00:19:31,119 --> 00:19:34,779
error isn't<font color="#CCCCCC"> that great</font><font color="#E5E5E5"> I mean this is</font>

377
00:19:32,980 --> 00:19:37,240
the total fish code like<font color="#CCCCCC"> you do</font>

378
00:19:34,779 --> 00:19:39,519
<font color="#CCCCCC">mallalieu free and the right and will</font>

379
00:19:37,240 --> 00:19:44,110
you see<font color="#E5E5E5"> waste memory error wonderful</font>

380
00:19:39,519 --> 00:19:48,190
<font color="#E5E5E5">right I love</font><font color="#CCCCCC"> that and works that's how</font>

381
00:19:44,110 --> 00:19:50,049
you do memory error handling in<font color="#CCCCCC"> insight</font>

382
00:19:48,190 --> 00:19:52,299
<font color="#CCCCCC">on right the same way as you do in the</font>

383
00:19:50,049 --> 00:19:54,309
pattern<font color="#E5E5E5"> so it's much nicer than and see</font>

384
00:19:52,299 --> 00:19:56,110
where you'd<font color="#CCCCCC"> have to say what do I do now</font>

385
00:19:54,309 --> 00:19:58,570
whatever<font color="#CCCCCC"> fitting up you could try</font>

386
00:19:56,110 --> 00:20:02,678
finally<font color="#E5E5E5"> right so I finally catch an</font>

387
00:19:58,570 --> 00:20:06,639
error<font color="#CCCCCC"> handle the exception somehow it</font>

388
00:20:02,679 --> 00:20:08,409
just as safe as Python<font color="#E5E5E5"> okay it's in the</font>

389
00:20:06,639 --> 00:20:13,658
<font color="#E5E5E5">end</font><font color="#CCCCCC"> and you call free and then here</font><font color="#E5E5E5"> I do</font>

390
00:20:08,409 --> 00:20:15,549
a bit<font color="#E5E5E5"> of memory processing you see that</font>

391
00:20:13,659 --> 00:20:17,529
I'm<font color="#E5E5E5"> using a pointer and you slice</font>

392
00:20:15,549 --> 00:20:19,809
<font color="#CCCCCC">another pointer so slice assignment here</font>

393
00:20:17,529 --> 00:20:22,860
so this is normal Python syntax just

394
00:20:19,809 --> 00:20:29,889
<font color="#E5E5E5">with</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> data types</font>

395
00:20:22,860 --> 00:20:33,699
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> that's sighs</font><font color="#E5E5E5"> okay is that small</font>

396
00:20:29,889 --> 00:20:35,860
just<font color="#E5E5E5"> woof anyone okay</font>

397
00:20:33,700 --> 00:20:38,039
this there's a bit of<font color="#E5E5E5"> more code coming</font>

398
00:20:35,860 --> 00:20:38,039
now

399
00:20:38,070 --> 00:20:46,649
so using<font color="#E5E5E5"> third-party libraries this is</font>

400
00:20:43,110 --> 00:20:50,639
how many of<font color="#E5E5E5"> you know Lua other problem</font>

401
00:20:46,650 --> 00:20:53,370
the language<font color="#E5E5E5"> yeah quite</font><font color="#CCCCCC"> a number so</font>

402
00:20:50,640 --> 00:20:55,860
<font color="#CCCCCC">Louie</font><font color="#E5E5E5"> is also by</font><font color="#CCCCCC"> default an interpreted</font>

403
00:20:53,370 --> 00:20:58,169
language<font color="#E5E5E5"> there's a runtime for it that's</font>

404
00:20:55,860 --> 00:21:01,709
<font color="#E5E5E5">also JIT compiler digit which I</font>

405
00:20:58,170 --> 00:21:04,230
mentioned<font color="#E5E5E5"> using here and now what I'm</font>

406
00:21:01,710 --> 00:21:09,570
doing<font color="#E5E5E5"> is I'm writing the Lua interpreter</font>

407
00:21:04,230 --> 00:21:12,930
<font color="#E5E5E5">that takes a string of code</font><font color="#CCCCCC"> puts it into</font>

408
00:21:09,570 --> 00:21:14,760
<font color="#E5E5E5">Google executed there and then returns</font>

409
00:21:12,930 --> 00:21:17,100
<font color="#E5E5E5">the result of the</font><font color="#CCCCCC"> process it back into</font>

410
00:21:14,760 --> 00:21:19,290
Python<font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> I've implemented that</font><font color="#CCCCCC"> in</font>

411
00:21:17,100 --> 00:21:21,810
second<font color="#E5E5E5"> so the first thing you have to do</font>

412
00:21:19,290 --> 00:21:25,649
<font color="#CCCCCC">and you've seen this scene port math</font>

413
00:21:21,810 --> 00:21:27,960
<font color="#CCCCCC">lipstick math before it that's</font><font color="#E5E5E5"> the</font>

414
00:21:25,650 --> 00:21:31,440
simple way<font color="#CCCCCC"> because</font><font color="#E5E5E5"> seitan comes with</font>

415
00:21:27,960 --> 00:21:33,480
print declarations for<font color="#E5E5E5"> ellipse</font><font color="#CCCCCC"> C so most</font>

416
00:21:31,440 --> 00:21:35,970
of what you<font color="#E5E5E5"> would use in literacy can</font>

417
00:21:33,480 --> 00:21:38,700
<font color="#CCCCCC">just simply be imported from sizing code</font>

418
00:21:35,970 --> 00:21:41,250
for external<font color="#E5E5E5"> libraries</font><font color="#CCCCCC"> sidon does not</font>

419
00:21:38,700 --> 00:21:43,500
ship<font color="#E5E5E5"> declarations and you need to copy</font>

420
00:21:41,250 --> 00:21:46,980
<font color="#E5E5E5">them together from the header files so</font>

421
00:21:43,500 --> 00:21:50,490
what I<font color="#E5E5E5"> did</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> took the stuff that</font>

422
00:21:46,980 --> 00:21:53,640
I needed<font color="#E5E5E5"> from the lua header file make</font>

423
00:21:50,490 --> 00:21:58,260
create a new interpreter clean it up

424
00:21:53,640 --> 00:22:01,140
load some some code into<font color="#CCCCCC"> it and lewis a</font>

425
00:21:58,260 --> 00:22:03,150
<font color="#E5E5E5">stack machine so I'm doing some stack</font>

426
00:22:01,140 --> 00:22:07,350
operations to get data in doubt into a

427
00:22:03,150 --> 00:22:08,730
<font color="#E5E5E5">flu and call a function and so that's</font>

428
00:22:07,350 --> 00:22:10,679
<font color="#E5E5E5">basically the functionality</font><font color="#CCCCCC"> that I need</font>

429
00:22:08,730 --> 00:22:13,760
copied those<font color="#E5E5E5"> from the header file into</font>

430
00:22:10,680 --> 00:22:18,240
the declarations to make<font color="#CCCCCC"> syphon aware of</font>

431
00:22:13,760 --> 00:22:21,180
from the the C API<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm working with</font>

432
00:22:18,240 --> 00:22:23,160
<font color="#E5E5E5">so now</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> site understands they see</font>

433
00:22:21,180 --> 00:22:26,550
API<font color="#E5E5E5"> and notice what functions I can use</font>

434
00:22:23,160 --> 00:22:30,450
what data goes in and<font color="#CCCCCC"> out and I cannot</font>

435
00:22:26,550 --> 00:22:33,419
just call them so what I do is I write a

436
00:22:30,450 --> 00:22:36,780
Python function run<font color="#E5E5E5"> Lua and which</font>

437
00:22:33,420 --> 00:22:39,810
receives the<font color="#E5E5E5"> code</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing I have to</font>

438
00:22:36,780 --> 00:22:42,000
<font color="#E5E5E5">do</font><font color="#CCCCCC"> doesn't have do any code support so I</font>

439
00:22:39,810 --> 00:22:46,110
<font color="#CCCCCC">converts the code into utf-8 if</font>

440
00:22:42,000 --> 00:22:48,559
necessary then I created you do a<font color="#E5E5E5"> run</font>

441
00:22:46,110 --> 00:22:50,360
<font color="#E5E5E5">time if that</font><font color="#CCCCCC"> fails</font><font color="#E5E5E5"> I can go to</font>

442
00:22:48,559 --> 00:22:52,700
<font color="#CCCCCC">mutation</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> probably reason for that</font>

443
00:22:50,360 --> 00:22:57,379
is<font color="#E5E5E5"> not enough memory</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> erase memory</font>

444
00:22:52,700 --> 00:22:59,899
error of that<font color="#CCCCCC"> fields and then once the</font>

445
00:22:57,379 --> 00:23:01,519
<font color="#CCCCCC">run time is created I wrap all the</font>

446
00:22:59,899 --> 00:23:02,928
wrists in a try finally<font color="#E5E5E5"> statement</font>

447
00:23:01,519 --> 00:23:04,460
<font color="#E5E5E5">because I know in the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> I have</font><font color="#CCCCCC"> to</font>

448
00:23:02,929 --> 00:23:07,159
<font color="#CCCCCC">closer we do a run time to free</font>

449
00:23:04,460 --> 00:23:10,190
resources<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> the resource management</font>

450
00:23:07,159 --> 00:23:12,909
<font color="#E5E5E5">using try finally here um and the first</font>

451
00:23:10,190 --> 00:23:16,639
<font color="#CCCCCC">thing I do is I take the lure code</font>

452
00:23:12,909 --> 00:23:18,980
<font color="#CCCCCC">loaded into the Lua runtime</font><font color="#E5E5E5"> if that</font>

453
00:23:16,639 --> 00:23:24,008
fails<font color="#CCCCCC"> probably a syntax</font><font color="#E5E5E5"> error so</font><font color="#CCCCCC"> I raise</font>

454
00:23:18,980 --> 00:23:26,779
<font color="#CCCCCC">a syntax error what I get back is then</font>

455
00:23:24,009 --> 00:23:29,659
kind<font color="#E5E5E5"> of a code object</font><font color="#CCCCCC"> something I can</font>

456
00:23:26,779 --> 00:23:32,720
call<font color="#E5E5E5"> so next thing is I execute the code</font>

457
00:23:29,659 --> 00:23:34,879
in Lua<font color="#E5E5E5"> if that fails I raise the runtime</font>

458
00:23:32,720 --> 00:23:36,499
error<font color="#E5E5E5"> probably some you know something</font>

459
00:23:34,879 --> 00:23:41,860
went wrong some some input wrong or

460
00:23:36,499 --> 00:23:44,210
<font color="#E5E5E5">something and then just</font><font color="#CCCCCC"> for simplicity</font>

461
00:23:41,860 --> 00:23:48,709
<font color="#CCCCCC">what I'm expecting back here from that</font>

462
00:23:44,210 --> 00:23:54,019
code is some number<font color="#E5E5E5"> output and I convert</font>

463
00:23:48,710 --> 00:23:56,210
that<font color="#E5E5E5"> number into a</font><font color="#CCCCCC"> Python</font><font color="#E5E5E5"> object here</font>

464
00:23:54,019 --> 00:23:58,399
explicitly<font color="#E5E5E5"> because I have to extract the</font>

465
00:23:56,210 --> 00:24:02,629
number from the Lua runtime especially

466
00:23:58,399 --> 00:24:05,268
float<font color="#CCCCCC"> a double in C double</font><font color="#E5E5E5"> what I get</font>

467
00:24:02,629 --> 00:24:07,998
back and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> seitan</font><font color="#E5E5E5"> converts that C</font>

468
00:24:05,269 --> 00:24:11,029
double enterprise object again<font color="#E5E5E5"> okay so</font>

469
00:24:07,999 --> 00:24:14,869
<font color="#CCCCCC">that's what happens</font><font color="#E5E5E5"> here in the end some</font>

470
00:24:11,029 --> 00:24:17,299
<font color="#CCCCCC">clean up clear the the stack close to</font>

471
00:24:14,869 --> 00:24:20,928
<font color="#E5E5E5">run</font><font color="#CCCCCC"> time that's it so that's</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> I need</font>

472
00:24:17,299 --> 00:24:22,789
to<font color="#CCCCCC"> execute code anyway</font><font color="#E5E5E5"> okay said it's a</font>

473
00:24:20,929 --> 00:24:27,730
Python function<font color="#E5E5E5"> so I can call it from</font>

474
00:24:22,789 --> 00:24:31,340
Python now I'm gonna execute this then

475
00:24:27,730 --> 00:24:34,009
it gets compiled and actually uses<font color="#E5E5E5"> blue</font>

476
00:24:31,340 --> 00:24:35,928
edge it in this<font color="#E5E5E5"> case which I'm</font>

477
00:24:34,009 --> 00:24:38,539
configuring<font color="#E5E5E5"> years and I'm telling</font><font color="#CCCCCC"> the</font>

478
00:24:35,929 --> 00:24:40,669
<font color="#E5E5E5">built please look for</font><font color="#CCCCCC"> the were in</font><font color="#E5E5E5"> this</font>

479
00:24:38,539 --> 00:24:42,440
<font color="#E5E5E5">directory use this library</font><font color="#CCCCCC"> to link</font>

480
00:24:40,669 --> 00:24:47,059
against and that's<font color="#E5E5E5"> all I need to do to</font>

481
00:24:42,440 --> 00:24:53,419
link in blue and<font color="#E5E5E5"> talk to the okay so</font>

482
00:24:47,059 --> 00:24:56,600
here's some<font color="#CCCCCC"> lower code</font><font color="#E5E5E5"> where yeah</font>

483
00:24:53,419 --> 00:25:00,169
<font color="#CCCCCC">Lu implementation Fibonacci</font>

484
00:24:56,600 --> 00:25:02,139
so I'm executing<font color="#E5E5E5"> that code here Falacci</font>

485
00:25:00,169 --> 00:25:06,130
of<font color="#CCCCCC"> 1055</font>

486
00:25:02,140 --> 00:25:10,690
<font color="#E5E5E5">believe</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> then I can see how fast</font>

487
00:25:06,130 --> 00:25:13,780
that runs and it takes so Fibonacci 24

488
00:25:10,690 --> 00:25:17,830
<font color="#E5E5E5">takes about two milliseconds to execute</font>

489
00:25:13,780 --> 00:25:20,230
in the<font color="#E5E5E5"> widget okay so this is all the</font>

490
00:25:17,830 --> 00:25:22,510
<font color="#E5E5E5">code I needed to write incite them</font><font color="#CCCCCC"> to</font>

491
00:25:20,230 --> 00:25:26,799
talk to<font color="#CCCCCC"> an external seed library to use</font>

492
00:25:22,510 --> 00:25:31,950
a<font color="#CCCCCC"> separate</font><font color="#E5E5E5"> runtime and as you can</font><font color="#CCCCCC"> see I</font>

493
00:25:26,799 --> 00:25:35,320
mixed<font color="#E5E5E5"> piping code with seek Holtz</font>

494
00:25:31,950 --> 00:25:36,880
completely freely<font color="#E5E5E5"> right so I'm saying</font>

495
00:25:35,320 --> 00:25:38,168
you know raise an error<font color="#CCCCCC"> raise an</font>

496
00:25:36,880 --> 00:25:41,070
exception of<font color="#E5E5E5"> Python exception of</font>

497
00:25:38,169 --> 00:25:45,910
something<font color="#E5E5E5"> failed call this function</font>

498
00:25:41,070 --> 00:25:47,320
passed on<font color="#E5E5E5"> typing data into it and seitan</font>

499
00:25:45,910 --> 00:25:49,270
does all the<font color="#E5E5E5"> rest for</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> because seitan</font>

500
00:25:47,320 --> 00:25:51,610
understands you know this expects a

501
00:25:49,270 --> 00:25:53,650
character<font color="#E5E5E5"> pointer in the</font><font color="#CCCCCC"> seed and I'm</font>

502
00:25:51,610 --> 00:25:54,969
getting a strange and<font color="#CCCCCC"> okay I couldn't</font>

503
00:25:53,650 --> 00:25:57,760
convert<font color="#E5E5E5"> that right I can unpack the</font>

504
00:25:54,970 --> 00:26:00,010
string<font color="#CCCCCC"> path</font><font color="#E5E5E5"> data and that's something</font>

505
00:25:57,760 --> 00:26:02,320
that Titan cares about<font color="#CCCCCC"> I that I don't</font>

506
00:26:00,010 --> 00:26:05,320
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> care about when I when I write</font>

507
00:26:02,320 --> 00:26:12,220
my<font color="#E5E5E5"> code really nice</font><font color="#CCCCCC"> okay how</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> time's</font>

508
00:26:05,320 --> 00:26:17,020
left<font color="#E5E5E5"> 25</font><font color="#CCCCCC"> okay cool so here's a is a real</font>

509
00:26:12,220 --> 00:26:19,620
world<font color="#E5E5E5"> example</font><font color="#CCCCCC"> of writing</font><font color="#E5E5E5"> some some data</font>

510
00:26:17,020 --> 00:26:22,629
processing code inside<font color="#CCCCCC"> then</font><font color="#E5E5E5"> okay</font>

511
00:26:19,620 --> 00:26:25,149
everyone<font color="#E5E5E5"> like Texas right so this is an</font>

512
00:26:22,630 --> 00:26:27,520
example<font color="#CCCCCC"> of everyone understand but I</font>

513
00:26:25,150 --> 00:26:30,130
<font color="#CCCCCC">think here is actually stole this</font>

514
00:26:27,520 --> 00:26:33,639
example<font color="#E5E5E5"> from some Australian guy killed</font>

515
00:26:30,130 --> 00:26:36,700
<font color="#CCCCCC">hitting who gave and</font><font color="#E5E5E5"> taught</font><font color="#CCCCCC"> citing</font>

516
00:26:33,640 --> 00:26:40,870
toward<font color="#E5E5E5"> interesting enough and the pike</font>

517
00:26:36,700 --> 00:26:42,820
on Australia<font color="#E5E5E5"> two years ago we really</font>

518
00:26:40,870 --> 00:26:45,340
nice talk<font color="#E5E5E5"> and so here's the</font><font color="#CCCCCC"> example you</font>

519
00:26:42,820 --> 00:26:48,668
gave<font color="#E5E5E5"> I really like that because</font><font color="#CCCCCC"> it shows</font>

520
00:26:45,340 --> 00:26:53,459
<font color="#CCCCCC">a</font><font color="#E5E5E5"> couple</font><font color="#CCCCCC"> of interesting properties so I</font>

521
00:26:48,669 --> 00:26:57,669
looked up<font color="#CCCCCC"> the average</font><font color="#E5E5E5"> income in Germany</font>

522
00:26:53,460 --> 00:27:00,400
which is<font color="#E5E5E5"> where I come from and this</font><font color="#CCCCCC"> is</font>

523
00:26:57,669 --> 00:27:03,160
the smallest<font color="#CCCCCC"> it's and I looked up the</font>

524
00:27:00,400 --> 00:27:06,010
number of<font color="#E5E5E5"> earners</font><font color="#CCCCCC"> that we have which is</font>

525
00:27:03,160 --> 00:27:09,710
<font color="#E5E5E5">45 44 million</font><font color="#CCCCCC"> right</font>

526
00:27:06,010 --> 00:27:12,980
so the average<font color="#E5E5E5"> income for those</font>

527
00:27:09,710 --> 00:27:17,810
over the year is<font color="#CCCCCC"> 44,000</font><font color="#E5E5E5"> more less that</font>

528
00:27:12,980 --> 00:27:19,220
was in 2016<font color="#CCCCCC"> now the question is what's</font>

529
00:27:17,810 --> 00:27:21,560
the<font color="#CCCCCC"> average tax rate</font><font color="#E5E5E5"> bit of a lot of</font>

530
00:27:19,220 --> 00:27:25,370
<font color="#CCCCCC">pays what how much</font><font color="#E5E5E5"> how many Texas they</font>

531
00:27:21,560 --> 00:27:29,149
<font color="#CCCCCC">would pay and</font><font color="#E5E5E5"> I actually try to</font><font color="#CCCCCC"> back</font>

532
00:27:25,370 --> 00:27:33,350
these numbers by real data somehow<font color="#E5E5E5"> I</font>

533
00:27:29,150 --> 00:27:36,620
didn't find any well I didn't search for

534
00:27:33,350 --> 00:27:39,040
deeply<font color="#E5E5E5"> but I guess it's</font><font color="#CCCCCC"> just for for</font>

535
00:27:36,620 --> 00:27:41,629
privacy reasons that they don't publish

536
00:27:39,040 --> 00:27:44,750
accurate data on this<font color="#E5E5E5"> but that's the the</font>

537
00:27:41,630 --> 00:27:47,150
<font color="#E5E5E5">average numbers that they give and so to</font>

538
00:27:44,750 --> 00:27:51,740
get<font color="#E5E5E5"> actual data to</font><font color="#CCCCCC"> calculate</font><font color="#E5E5E5"> the tax</font>

539
00:27:47,150 --> 00:27:56,990
<font color="#E5E5E5">rate I'll just make up some alternative</font>

540
00:27:51,740 --> 00:27:57,710
katia and so just<font color="#E5E5E5"> to show you what they</font>

541
00:27:56,990 --> 00:28:00,980
<font color="#CCCCCC">are</font><font color="#E5E5E5"> using</font>

542
00:27:57,710 --> 00:28:03,800
I'm<font color="#E5E5E5"> plotting a graph of the income</font>

543
00:28:00,980 --> 00:28:07,220
distribution<font color="#E5E5E5"> which in this case is</font><font color="#CCCCCC"> just</font>

544
00:28:03,800 --> 00:28:09,770
a log<font color="#CCCCCC"> normal distribution</font><font color="#E5E5E5"> okay it's more</font>

545
00:28:07,220 --> 00:28:12,200
<font color="#E5E5E5">or less what</font><font color="#CCCCCC"> you would</font><font color="#E5E5E5"> expect from</font><font color="#CCCCCC"> the</font>

546
00:28:09,770 --> 00:28:13,700
income distribution<font color="#E5E5E5"> it's not entirely</font>

547
00:28:12,200 --> 00:28:17,210
incorrect and you can see the minimum

548
00:28:13,700 --> 00:28:19,850
<font color="#E5E5E5">and the maximum here which I also not</font>

549
00:28:17,210 --> 00:28:21,920
completely unrealistic and I just chose

550
00:28:19,850 --> 00:28:24,620
the the<font color="#E5E5E5"> values here</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> set up for the</font>

551
00:28:21,920 --> 00:28:30,260
log normal<font color="#CCCCCC"> distribution</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that the</font>

552
00:28:24,620 --> 00:28:32,570
average<font color="#CCCCCC"> is also more discrete okay</font><font color="#E5E5E5"> so</font>

553
00:28:30,260 --> 00:28:35,300
that's my<font color="#CCCCCC"> day time</font><font color="#E5E5E5"> and let's calculate</font>

554
00:28:32,570 --> 00:28:37,460
everyone text everyone<font color="#E5E5E5"> sexes and when</font>

555
00:28:35,300 --> 00:28:41,950
you look<font color="#CCCCCC"> up the</font><font color="#E5E5E5"> income tax for Germany</font>

556
00:28:37,460 --> 00:28:45,290
<font color="#CCCCCC">in Wikipedia</font><font color="#E5E5E5"> what gives you is an Excel</font>

557
00:28:41,950 --> 00:28:48,140
implementation right and that<font color="#E5E5E5"> wonderful</font>

558
00:28:45,290 --> 00:28:50,690
<font color="#E5E5E5">and this is how it looks like it's</font><font color="#CCCCCC"> just</font>

559
00:28:48,140 --> 00:28:52,940
it's even a<font color="#CCCCCC"> German so it's a German</font><font color="#E5E5E5"> XO</font>

560
00:28:50,690 --> 00:28:56,980
<font color="#E5E5E5">right it's not</font><font color="#CCCCCC"> if this</font><font color="#E5E5E5"> than that</font>

561
00:28:52,940 --> 00:28:59,600
it's like<font color="#CCCCCC"> vinne and like formulas and</font>

562
00:28:56,980 --> 00:29:01,250
glorious<font color="#E5E5E5"> I love it it's a German income</font>

563
00:28:59,600 --> 00:29:02,510
tax<font color="#E5E5E5"> so it's okay if</font><font color="#CCCCCC"> it's a German</font><font color="#E5E5E5"> right</font>

564
00:29:01,250 --> 00:29:04,580
um

565
00:29:02,510 --> 00:29:06,440
you<font color="#CCCCCC"> probably wouldn't care about the</font>

566
00:29:04,580 --> 00:29:09,199
exact details but<font color="#E5E5E5"> this is the formula</font>

567
00:29:06,440 --> 00:29:12,440
<font color="#E5E5E5">how we can click that or income</font><font color="#CCCCCC"> tax this</font>

568
00:29:09,200 --> 00:29:14,450
<font color="#E5E5E5">is what does is if the income is greater</font>

569
00:29:12,440 --> 00:29:17,090
than this then<font color="#CCCCCC"> this is the formula for</font>

570
00:29:14,450 --> 00:29:19,120
it<font color="#E5E5E5"> and if it's so there that</font><font color="#CCCCCC"> certain</font>

571
00:29:17,090 --> 00:29:22,100
certain boundaries and<font color="#CCCCCC"> with</font>

572
00:29:19,120 --> 00:29:24,379
there's<font color="#E5E5E5"> a gradual increase</font><font color="#CCCCCC"> in you</font>

573
00:29:22,100 --> 00:29:26,270
<font color="#E5E5E5">contacts</font><font color="#CCCCCC"> something like that</font><font color="#E5E5E5"> so I'm</font>

574
00:29:24,380 --> 00:29:31,540
spelled out<font color="#CCCCCC"> in Python</font><font color="#E5E5E5"> I think this is</font>

575
00:29:26,270 --> 00:29:31,540
much<font color="#E5E5E5"> more readable this is what it is</font>

576
00:29:31,660 --> 00:29:39,950
so same formula exact same thing<font color="#E5E5E5"> just in</font>

577
00:29:36,590 --> 00:29:42,709
Python<font color="#E5E5E5"> and then to take</font><font color="#CCCCCC"> that average</font>

578
00:29:39,950 --> 00:29:44,060
income<font color="#CCCCCC"> I take the sum of all incomes by</font>

579
00:29:42,710 --> 00:29:46,120
<font color="#E5E5E5">a divided by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> length of incomes</font>

580
00:29:44,060 --> 00:29:51,560
<font color="#E5E5E5">obviously and the average tax rate</font>

581
00:29:46,120 --> 00:29:53,780
calculated as the sum of taxes of<font color="#E5E5E5"> the</font>

582
00:29:51,560 --> 00:30:00,440
incomes<font color="#E5E5E5"> divided by the</font><font color="#CCCCCC"> Sun of incomes</font>

583
00:29:53,780 --> 00:30:03,710
<font color="#E5E5E5">okay when I run this</font><font color="#CCCCCC"> there's the check</font>

584
00:30:00,440 --> 00:30:08,390
the average tax of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> you know average</font>

585
00:30:03,710 --> 00:30:11,330
income and so just execute some cells

586
00:30:08,390 --> 00:30:12,800
here<font color="#CCCCCC"> and then you can see</font><font color="#E5E5E5"> that the</font>

587
00:30:11,330 --> 00:30:15,830
<font color="#E5E5E5">average tax rate is</font><font color="#CCCCCC"> actually something</font>

588
00:30:12,800 --> 00:30:19,129
<font color="#CCCCCC">like</font><font color="#E5E5E5"> 24 percent on my data</font><font color="#CCCCCC"> so don't take</font>

589
00:30:15,830 --> 00:30:22,330
this as you<font color="#E5E5E5"> know actual real-world</font>

590
00:30:19,130 --> 00:30:29,300
something it's just<font color="#E5E5E5"> you know paid data</font>

591
00:30:22,330 --> 00:30:34,939
anyway okay so so we<font color="#E5E5E5"> expect in 24</font>

592
00:30:29,300 --> 00:30:38,600
<font color="#E5E5E5">percent and when I execute the whole</font>

593
00:30:34,940 --> 00:30:42,160
thing in Python<font color="#E5E5E5"> it takes about</font><font color="#CCCCCC"> 3 seconds</font>

594
00:30:38,600 --> 00:30:43,909
<font color="#E5E5E5">to calculate this for the data set off</font>

595
00:30:42,160 --> 00:30:47,000
<font color="#E5E5E5">how many</font><font color="#CCCCCC"> do I have</font>

596
00:30:43,910 --> 00:30:50,060
I<font color="#E5E5E5"> shouldn't take the 44 million I took</font>

597
00:30:47,000 --> 00:30:51,560
something like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> twentieth of that</font><font color="#CCCCCC"> okay</font>

598
00:30:50,060 --> 00:30:56,540
<font color="#E5E5E5">just to make</font><font color="#CCCCCC"> it you know keep a</font>

599
00:30:51,560 --> 00:30:57,889
<font color="#CCCCCC">calculator go during</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> tour okay</font><font color="#E5E5E5"> so</font>

600
00:30:56,540 --> 00:30:59,840
for that<font color="#E5E5E5"> number it takes about three</font>

601
00:30:57,890 --> 00:31:04,250
seconds to calculate the average tax

602
00:30:59,840 --> 00:31:07,939
rate<font color="#CCCCCC"> like the brute force way in</font><font color="#E5E5E5"> Python</font>

603
00:31:04,250 --> 00:31:13,550
<font color="#CCCCCC">okay now it reminds me that when you do</font>

604
00:31:07,940 --> 00:31:15,350
up there<font color="#E5E5E5"> when you do</font><font color="#CCCCCC"> measurements on a</font>

605
00:31:13,550 --> 00:31:17,930
laptop<font color="#E5E5E5"> don't remember switching of</font>

606
00:31:15,350 --> 00:31:19,760
energy<font color="#E5E5E5"> management because it messes up</font>

607
00:31:17,930 --> 00:31:23,260
<font color="#E5E5E5">your numbers but this is about what you</font>

608
00:31:19,760 --> 00:31:28,280
would expect<font color="#CCCCCC"> its it runs long enough to</font>

609
00:31:23,260 --> 00:31:30,980
scale up to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> view so so this I'll</font>

610
00:31:28,280 --> 00:31:33,950
<font color="#E5E5E5">remember this as the</font><font color="#CCCCCC"> baseline</font>

611
00:31:30,980 --> 00:31:36,950
and then to make<font color="#E5E5E5"> things comparable</font><font color="#CCCCCC"> I</font>

612
00:31:33,950 --> 00:31:39,350
have a little<font color="#E5E5E5"> function here the tells me</font>

613
00:31:36,950 --> 00:31:41,510
okay<font color="#CCCCCC"> factor</font><font color="#E5E5E5"> one is Python and then</font><font color="#CCCCCC"> I</font>

614
00:31:39,350 --> 00:31:46,159
could have different<font color="#E5E5E5"> implementations are</font>

615
00:31:41,510 --> 00:31:49,640
go along optimizing this and have

616
00:31:46,160 --> 00:31:53,450
factors to see how the how this compares

617
00:31:49,640 --> 00:31:56,740
to<font color="#E5E5E5"> the basement okay</font><font color="#CCCCCC"> you see so that's</font><font color="#E5E5E5"> a</font>

618
00:31:53,450 --> 00:31:59,419
way to implement<font color="#E5E5E5"> this in</font><font color="#CCCCCC"> lump ID</font>

619
00:31:56,740 --> 00:32:04,910
how<font color="#E5E5E5"> many of you think you understand</font>

620
00:31:59,419 --> 00:32:08,120
this code huh<font color="#CCCCCC"> get a bit more over time</font>

621
00:32:04,910 --> 00:32:12,200
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> somewhere don't think it's more</font>

622
00:32:08,120 --> 00:32:15,500
than a dozen<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it's actually kind</font><font color="#CCCCCC"> of</font>

623
00:32:12,200 --> 00:32:17,809
straightforward<font color="#CCCCCC"> note hi code it's not</font>

624
00:32:15,500 --> 00:32:20,450
that<font color="#E5E5E5"> simple because the problem isn't</font>

625
00:32:17,809 --> 00:32:23,540
<font color="#CCCCCC">that well adapted to an</font><font color="#E5E5E5"> umpire so</font>

626
00:32:20,450 --> 00:32:26,179
basically what I do here<font color="#CCCCCC"> is I have a</font><font color="#E5E5E5"> one</font>

627
00:32:23,540 --> 00:32:31,960
numpy array with<font color="#CCCCCC"> all the incomes in</font>

628
00:32:26,179 --> 00:32:36,130
<font color="#CCCCCC">there a one dimensional</font><font color="#E5E5E5"> array</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm</font>

629
00:32:31,960 --> 00:32:40,580
masking out the numbers in them<font color="#E5E5E5"> that</font>

630
00:32:36,130 --> 00:32:43,130
fits my<font color="#E5E5E5"> current calculation interval so</font>

631
00:32:40,580 --> 00:32:46,220
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> fifty four thousand</font>

632
00:32:43,130 --> 00:32:49,010
euros and<font color="#CCCCCC"> 256 thousand euros then apply</font>

633
00:32:46,220 --> 00:32:53,540
that<font color="#E5E5E5"> formula to them and</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> for all</font>

634
00:32:49,010 --> 00:32:57,080
<font color="#CCCCCC">four sections</font><font color="#E5E5E5"> and then so basically I'm</font>

635
00:32:53,540 --> 00:32:59,450
spelling<font color="#E5E5E5"> out the the same formula we had</font>

636
00:32:57,080 --> 00:33:03,290
there just<font color="#CCCCCC"> four</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> parts of the</font>

637
00:32:59,450 --> 00:33:07,370
array then selected raised by the income

638
00:33:03,290 --> 00:33:12,049
range<font color="#E5E5E5"> and then doing the calculation and</font>

639
00:33:07,370 --> 00:33:13,610
this<font color="#E5E5E5"> is it's quite wasteful and numpy</font>

640
00:33:12,049 --> 00:33:16,100
because you know it has<font color="#E5E5E5"> to generate</font>

641
00:33:13,610 --> 00:33:18,770
intermediate arrays and select stuff<font color="#E5E5E5"> and</font>

642
00:33:16,100 --> 00:33:21,080
mask out stuff and it's a bit

643
00:33:18,770 --> 00:33:24,139
<font color="#CCCCCC">inefficient but</font><font color="#E5E5E5"> it's still</font><font color="#CCCCCC"> pretty fast</font>

644
00:33:21,080 --> 00:33:27,100
<font color="#CCCCCC">and when I do this</font><font color="#E5E5E5"> and numpy I get the</font>

645
00:33:24,140 --> 00:33:31,040
same 24 percent that we expected and

646
00:33:27,100 --> 00:33:34,370
time it says it's<font color="#E5E5E5"> only taken</font><font color="#CCCCCC"> about 60</font>

647
00:33:31,040 --> 00:33:37,879
milliseconds<font color="#CCCCCC"> so there's</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> faster on</font>

648
00:33:34,370 --> 00:33:40,050
that what we had so far<font color="#CCCCCC"> how much faster</font>

649
00:33:37,880 --> 00:33:42,500
<font color="#E5E5E5">is it</font>

650
00:33:40,050 --> 00:33:46,830
[Music]

651
00:33:42,500 --> 00:33:49,230
point line<font color="#E5E5E5"> so it's already 50 times</font>

652
00:33:46,830 --> 00:33:49,830
faster<font color="#E5E5E5"> than the Python version that's</font>

653
00:33:49,230 --> 00:33:51,899
<font color="#E5E5E5">not mine</font>

654
00:33:49,830 --> 00:33:54,720
<font color="#E5E5E5">okay number</font><font color="#CCCCCC"> has a second way of doing</font>

655
00:33:51,899 --> 00:33:56,580
<font color="#CCCCCC">this you can take the actual Python</font>

656
00:33:54,720 --> 00:33:58,620
implementation very hard and you<font color="#E5E5E5"> can</font>

657
00:33:56,580 --> 00:34:01,580
pass it<font color="#E5E5E5"> into numpy and to apply it</font>

658
00:33:58,620 --> 00:34:05,250
efficiently to all values<font color="#CCCCCC"> in an array</font>

659
00:34:01,580 --> 00:34:07,678
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> au</font><font color="#E5E5E5"> funk so you convert the</font>

660
00:34:05,250 --> 00:34:09,629
<font color="#CCCCCC">Python function</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> au funk a universal</font>

661
00:34:07,679 --> 00:34:11,159
function which<font color="#E5E5E5"> means that you can apply</font>

662
00:34:09,629 --> 00:34:17,029
it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the array and</font><font color="#CCCCCC"> it runs</font><font color="#E5E5E5"> on every</font>

663
00:34:11,159 --> 00:34:21,030
<font color="#E5E5E5">element</font><font color="#CCCCCC"> basically so I'm gonna do that</font>

664
00:34:17,030 --> 00:34:23,399
<font color="#E5E5E5">and</font><font color="#CCCCCC"> run-time it again it's actually</font><font color="#E5E5E5"> way</font>

665
00:34:21,030 --> 00:34:26,760
slower than the<font color="#CCCCCC"> previous implementation</font>

666
00:34:23,399 --> 00:34:30,239
so this all<font color="#E5E5E5"> the slicing and in lamp is</font>

667
00:34:26,760 --> 00:34:31,589
<font color="#E5E5E5">much faster than running a Python</font>

668
00:34:30,239 --> 00:34:34,739
function but it's<font color="#E5E5E5"> still faster than the</font>

669
00:34:31,589 --> 00:34:36,869
type implementation<font color="#E5E5E5"> so here I can see</font>

670
00:34:34,739 --> 00:34:41,790
it's four<font color="#E5E5E5"> times faster than</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Python</font>

671
00:34:36,869 --> 00:34:43,970
version<font color="#E5E5E5"> right</font><font color="#CCCCCC"> where's the numpy</font><font color="#E5E5E5"> slicing</font>

672
00:34:41,790 --> 00:34:47,099
version is<font color="#E5E5E5"> still way faster than the</font>

673
00:34:43,969 --> 00:34:50,580
presentation<font color="#CCCCCC"> okay now</font><font color="#E5E5E5"> let's get through</font>

674
00:34:47,099 --> 00:34:52,440
second<font color="#E5E5E5"> insight</font><font color="#CCCCCC"> on I can do the same</font>

675
00:34:50,580 --> 00:34:55,080
thing I can<font color="#CCCCCC"> just take this</font><font color="#E5E5E5"> Python</font>

676
00:34:52,440 --> 00:34:57,720
implementation that I had and drop it

677
00:34:55,080 --> 00:35:03,960
into a Titan<font color="#E5E5E5"> compile</font><font color="#CCCCCC"> it</font>

678
00:34:57,720 --> 00:35:05,368
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> done and when I run this the</font>

679
00:35:03,960 --> 00:35:08,010
actually comes out<font color="#E5E5E5"> a bit faster than</font>

680
00:35:05,369 --> 00:35:15,320
<font color="#CCCCCC">what we had before</font><font color="#E5E5E5"> from the path</font>

681
00:35:08,010 --> 00:35:15,320
interpreted version so somewhat slow

682
00:35:24,150 --> 00:35:32,190
<font color="#CCCCCC">mm-hmm</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> 251 okay</font>

683
00:35:27,870 --> 00:35:34,980
51 so that is about well<font color="#E5E5E5"> about 70%</font>

684
00:35:32,190 --> 00:35:36,120
faster than the Python version not too

685
00:35:34,980 --> 00:35:38,130
bad

686
00:35:36,120 --> 00:35:40,170
given<font color="#E5E5E5"> that we didn't actually do</font>

687
00:35:38,130 --> 00:35:44,070
anything I<font color="#E5E5E5"> mean all we did was take the</font>

688
00:35:40,170 --> 00:35:47,460
<font color="#E5E5E5">code add this line up here</font><font color="#CCCCCC"> and then it's</font>

689
00:35:44,070 --> 00:35:50,990
<font color="#CCCCCC">20% faster or 70% faster</font><font color="#E5E5E5"> that's kind of</font>

690
00:35:47,460 --> 00:35:54,810
okay<font color="#CCCCCC"> for how much is it</font><font color="#E5E5E5"> eight characters</font>

691
00:35:50,990 --> 00:35:57,060
<font color="#E5E5E5">okay I can live with that</font><font color="#CCCCCC"> but there ways</font>

692
00:35:54,810 --> 00:35:59,340
<font color="#CCCCCC">to make it</font><font color="#E5E5E5"> way faster</font><font color="#CCCCCC"> and that is by</font>

693
00:35:57,060 --> 00:36:02,310
exploiting what the language<font color="#E5E5E5"> provides</font>

694
00:35:59,340 --> 00:36:04,980
for you<font color="#CCCCCC"> what it does give you is</font><font color="#E5E5E5"> you</font>

695
00:36:02,310 --> 00:36:08,220
know your code gets compiled to<font color="#E5E5E5"> see so</font>

696
00:36:04,980 --> 00:36:10,230
you<font color="#CCCCCC"> can use C datatypes in your code and</font>

697
00:36:08,220 --> 00:36:11,879
<font color="#CCCCCC">that makes it way faster because</font>

698
00:36:10,230 --> 00:36:15,360
especially<font color="#E5E5E5"> in this kind of of</font>

699
00:36:11,880 --> 00:36:16,860
calculation can be<font color="#CCCCCC"> done entirely in C it</font>

700
00:36:15,360 --> 00:36:20,010
<font color="#E5E5E5">can be left to the CPU rather than</font>

701
00:36:16,860 --> 00:36:23,010
interpreter that makes it<font color="#E5E5E5"> much faster so</font>

702
00:36:20,010 --> 00:36:25,680
the first thing we can<font color="#E5E5E5"> do is we can take</font>

703
00:36:23,010 --> 00:36:28,410
this<font color="#CCCCCC"> function up here the</font><font color="#E5E5E5"> text</font>

704
00:36:25,680 --> 00:36:29,910
calculation function<font color="#E5E5E5"> and we can</font><font color="#CCCCCC"> say okay</font>

705
00:36:28,410 --> 00:36:32,100
whatever<font color="#E5E5E5"> comes in certainly</font>

706
00:36:29,910 --> 00:36:32,609
representable by<font color="#CCCCCC"> c double so that's a</font>

707
00:36:32,100 --> 00:36:37,740
safe bet

708
00:36:32,610 --> 00:36:40,050
and what it<font color="#E5E5E5"> gets</font><font color="#CCCCCC"> so then the income</font>

709
00:36:37,740 --> 00:36:42,299
<font color="#E5E5E5">variable here will be C double the whole</font>

710
00:36:40,050 --> 00:36:45,090
calculation<font color="#E5E5E5"> can actually be done in C</font>

711
00:36:42,300 --> 00:36:48,480
and let's<font color="#E5E5E5"> leave it at that for now and</font>

712
00:36:45,090 --> 00:36:50,840
I'll ask<font color="#E5E5E5"> Satan to tell me what things</font>

713
00:36:48,480 --> 00:36:53,480
about it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> what you</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> here is</font>

714
00:36:50,840 --> 00:36:56,640
this line actually<font color="#E5E5E5"> became plain C and</font>

715
00:36:53,480 --> 00:36:59,880
this sort of so the calculation in<font color="#E5E5E5"> this</font>

716
00:36:56,640 --> 00:37:03,480
line is done in C<font color="#CCCCCC"> now just by adding the</font>

717
00:36:59,880 --> 00:37:06,330
the typing for<font color="#CCCCCC"> the argument right</font><font color="#E5E5E5"> that's</font>

718
00:37:03,480 --> 00:37:09,510
all I did but the return value is<font color="#CCCCCC"> still</font>

719
00:37:06,330 --> 00:37:13,710
patentable<font color="#CCCCCC"> I can change that</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> make</font>

720
00:37:09,510 --> 00:37:15,330
the return value<font color="#E5E5E5"> also see double</font><font color="#CCCCCC"> and for</font>

721
00:37:13,710 --> 00:37:17,310
that I<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to change the signature a</font>

722
00:37:15,330 --> 00:37:19,710
tiny bit I<font color="#E5E5E5"> have to tell seitan this is</font>

723
00:37:17,310 --> 00:37:22,980
no longer playing<font color="#E5E5E5"> Python function but</font>

724
00:37:19,710 --> 00:37:28,590
it's actually a<font color="#CCCCCC"> C function now by change</font>

725
00:37:22,980 --> 00:37:31,110
<font color="#E5E5E5">of</font><font color="#CCCCCC"> definition and now this will compile</font>

726
00:37:28,590 --> 00:37:34,530
the<font color="#E5E5E5"> function into a static C function so</font>

727
00:37:31,110 --> 00:37:36,430
really<font color="#E5E5E5"> low level and that allows me</font><font color="#CCCCCC"> to</font>

728
00:37:34,530 --> 00:37:38,859
specify the return type

729
00:37:36,430 --> 00:37:42,640
so now it's a<font color="#E5E5E5"> function that takes a</font><font color="#CCCCCC"> C</font>

730
00:37:38,859 --> 00:37:45,250
double in<font color="#E5E5E5"> C double out and all the</font>

731
00:37:42,640 --> 00:37:48,308
calling<font color="#E5E5E5"> will use C calling convention</font>

732
00:37:45,250 --> 00:37:50,349
and then exit plane<font color="#E5E5E5"> C function and down</font>

733
00:37:48,309 --> 00:37:52,960
here where I call that function you<font color="#E5E5E5"> can</font>

734
00:37:50,349 --> 00:38:01,359
also see it that well if you scroll a

735
00:37:52,960 --> 00:38:06,010
bit<font color="#E5E5E5"> somewhere down here you'll see when</font>

736
00:38:01,359 --> 00:38:08,500
you find it see you<font color="#E5E5E5"> really don't want to</font>

737
00:38:06,010 --> 00:38:12,849
write<font color="#E5E5E5"> this code C code yourself</font><font color="#CCCCCC"> right</font>

738
00:38:08,500 --> 00:38:16,470
you want<font color="#E5E5E5"> a generator for that it's down</font>

739
00:38:12,849 --> 00:38:19,119
here<font color="#E5E5E5"> yeah yeah</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is calling the the</font>

740
00:38:16,470 --> 00:38:23,169
calculation function now okay so it's a

741
00:38:19,119 --> 00:38:25,079
<font color="#CCCCCC">C function</font><font color="#E5E5E5"> okay lots of code going on</font>

742
00:38:23,170 --> 00:38:30,279
here

743
00:38:25,079 --> 00:38:34,000
okay<font color="#CCCCCC"> still same</font><font color="#E5E5E5"> result</font><font color="#CCCCCC"> 24 cents</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

744
00:38:30,279 --> 00:38:35,920
can make that run even faster<font color="#E5E5E5"> because</font><font color="#CCCCCC"> oh</font>

745
00:38:34,000 --> 00:38:40,750
sorry I'll<font color="#CCCCCC"> just show you how</font><font color="#E5E5E5"> fast it is</font>

746
00:38:35,920 --> 00:38:46,180
now run once and we're down<font color="#E5E5E5"> to 199</font>

747
00:38:40,750 --> 00:38:48,339
milliseconds and that's already about<font color="#CCCCCC"> 12</font>

748
00:38:46,180 --> 00:38:51,520
<font color="#E5E5E5">and a half times</font><font color="#CCCCCC"> faster than the plain</font>

749
00:38:48,339 --> 00:38:53,890
<font color="#CCCCCC">compiled Python version</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> even</font>

750
00:38:51,520 --> 00:38:55,509
compile<font color="#E5E5E5"> this already 12 times</font><font color="#CCCCCC"> faster and</font>

751
00:38:53,890 --> 00:38:58,900
compared<font color="#E5E5E5"> to the Python</font><font color="#CCCCCC"> version is 15</font>

752
00:38:55,510 --> 00:39:02,079
times<font color="#CCCCCC"> faster</font><font color="#E5E5E5"> but I can get even more get</font>

753
00:38:58,900 --> 00:39:06,819
more even<font color="#CCCCCC"> more out of it by and that</font><font color="#E5E5E5"> is</font>

754
00:39:02,079 --> 00:39:09,490
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> Serge just</font><font color="#E5E5E5"> presented in</font>

755
00:39:06,819 --> 00:39:11,500
the<font color="#E5E5E5"> pipe run toward inside thing uh so</font><font color="#CCCCCC"> I</font>

756
00:39:09,490 --> 00:39:17,529
have to UM spell this<font color="#E5E5E5"> is untagged loop</font>

757
00:39:11,500 --> 00:39:21,250
now right<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> method siphon now has</font>

758
00:39:17,529 --> 00:39:24,279
<font color="#CCCCCC">pattern</font><font color="#E5E5E5"> support which</font><font color="#CCCCCC"> is one word my by</font>

759
00:39:21,250 --> 00:39:28,809
the<font color="#CCCCCC"> person</font><font color="#E5E5E5"> project the contribute by</font>

760
00:39:24,279 --> 00:39:30,570
them and that<font color="#CCCCCC"> allows you to also</font><font color="#E5E5E5"> take</font>

761
00:39:28,809 --> 00:39:35,530
numpy code now and

762
00:39:30,570 --> 00:39:38,610
<font color="#E5E5E5">so compiled numpy code from size and now</font>

763
00:39:35,530 --> 00:39:41,080
by<font color="#CCCCCC"> using the height run as a</font><font color="#E5E5E5"> back-end</font>

764
00:39:38,610 --> 00:39:43,890
<font color="#E5E5E5">sample okay</font>

765
00:39:41,080 --> 00:39:45,310
still what<font color="#E5E5E5"> I'm doing here now is I will</font>

766
00:39:43,890 --> 00:39:49,470
<font color="#E5E5E5">unroll the loop</font>

767
00:39:45,310 --> 00:39:58,920
I'll turn the kind of nice<font color="#E5E5E5"> pattern loop</font>

768
00:39:49,470 --> 00:39:58,919
into a CH loop by saying for I in range

769
00:39:59,760 --> 00:40:14,800
<font color="#E5E5E5">when incomes and then calculate the</font>

770
00:40:11,260 --> 00:40:20,080
total that's<font color="#E5E5E5"> zero</font>

771
00:40:14,800 --> 00:40:30,000
and the tax<font color="#E5E5E5"> starts with zero and the</font>

772
00:40:20,080 --> 00:40:33,670
incomes is actually I can<font color="#E5E5E5"> just change</font>

773
00:40:30,000 --> 00:40:34,360
regulate this<font color="#E5E5E5"> keep it a bit more</font>

774
00:40:33,670 --> 00:40:42,970
personage

775
00:40:34,360 --> 00:40:46,990
so for<font color="#E5E5E5"> incoming incomes sorry total plus</font>

776
00:40:42,970 --> 00:40:51,490
equals income<font color="#E5E5E5"> and then the tax that's up</font>

777
00:40:46,990 --> 00:41:00,430
<font color="#CCCCCC">by calling the calculate function tax</font>

778
00:40:51,490 --> 00:41:06,629
sign of the income<font color="#E5E5E5"> and then return tax</font>

779
00:41:00,430 --> 00:41:06,629
by total<font color="#CCCCCC"> I think that's it</font>

780
00:41:07,530 --> 00:41:17,190
<font color="#E5E5E5">okay run that looks better now</font><font color="#CCCCCC"> what's</font>

781
00:41:13,080 --> 00:41:19,759
wrong<font color="#E5E5E5"> here okay so was not adding up</font>

782
00:41:17,190 --> 00:41:20,970
properly so<font color="#CCCCCC"> I make sure</font><font color="#E5E5E5"> those are</font>

783
00:41:19,760 --> 00:41:29,250
<font color="#E5E5E5">understood</font>

784
00:41:20,970 --> 00:41:32,279
so I declare my variables now<font color="#CCCCCC"> this is</font>

785
00:41:29,250 --> 00:41:34,860
how you<font color="#E5E5E5"> declare variables in seitan</font><font color="#CCCCCC"> the</font>

786
00:41:32,280 --> 00:41:37,590
nice<font color="#CCCCCC"> thing about it is that typing is</font>

787
00:41:34,860 --> 00:41:39,720
optional<font color="#E5E5E5"> so as you seen before</font>

788
00:41:37,590 --> 00:41:40,980
everything was<font color="#CCCCCC"> uh nakir</font><font color="#E5E5E5"> and everything</font>

789
00:41:39,720 --> 00:41:43,980
was considered a Python object<font color="#E5E5E5"> by</font>

790
00:41:40,980 --> 00:41:47,220
default and now when<font color="#CCCCCC"> I</font><font color="#E5E5E5"> yeah my variables</font>

791
00:41:43,980 --> 00:41:48,750
<font color="#CCCCCC">a local host anthem but it'll not do it</font>

792
00:41:47,220 --> 00:41:51,450
proper operation

793
00:41:48,750 --> 00:41:53,420
oh I'm not<font color="#CCCCCC"> exciting come yes</font><font color="#E5E5E5"> that's the</font>

794
00:41:51,450 --> 00:41:56,689
problem

795
00:41:53,420 --> 00:41:58,770
so<font color="#E5E5E5"> double-income</font>

796
00:41:56,690 --> 00:42:00,420
then I can actually<font color="#E5E5E5"> leave</font><font color="#CCCCCC"> that other</font>

797
00:41:58,770 --> 00:42:02,610
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> so I don't</font><font color="#CCCCCC"> have to clear</font>

798
00:42:00,420 --> 00:42:03,290
everything just gets annoying<font color="#E5E5E5"> after a</font>

799
00:42:02,610 --> 00:42:08,750
while

800
00:42:03,290 --> 00:42:11,430
<font color="#E5E5E5">yes much better yeah</font><font color="#CCCCCC"> and this is still</font>

801
00:42:08,750 --> 00:42:13,530
so you know you can see<font color="#E5E5E5"> that these lines</font>

802
00:42:11,430 --> 00:42:15,660
<font color="#E5E5E5">here those so the</font><font color="#CCCCCC"> the calculation is</font>

803
00:42:13,530 --> 00:42:17,840
actually done in C now<font color="#E5E5E5"> so native C code</font>

804
00:42:15,660 --> 00:42:21,899
no longer<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> interactions in there</font>

805
00:42:17,840 --> 00:42:25,610
<font color="#CCCCCC">and return the value</font><font color="#E5E5E5"> then does the</font>

806
00:42:21,900 --> 00:42:28,380
<font color="#CCCCCC">conversion of</font><font color="#E5E5E5"> that into a Python object</font>

807
00:42:25,610 --> 00:42:30,570
<font color="#E5E5E5">still gives the same results good didn't</font>

808
00:42:28,380 --> 00:42:32,850
break anything<font color="#E5E5E5"> how fast</font>

809
00:42:30,570 --> 00:42:36,330
no well<font color="#E5E5E5"> twenty nine milliseconds which</font>

810
00:42:32,850 --> 00:42:38,190
is<font color="#E5E5E5"> way faster than 200 so that gives us</font>

811
00:42:36,330 --> 00:42:41,250
<font color="#CCCCCC">a factor of 100</font>

812
00:42:38,190 --> 00:42:43,620
<font color="#E5E5E5">compared to</font><font color="#CCCCCC"> Python now and 60s oh sorry</font>

813
00:42:41,250 --> 00:42:48,080
86<font color="#E5E5E5"> compared to the initial we compiled</font>

814
00:42:43,620 --> 00:42:48,080
<font color="#E5E5E5">site inversion okay that's much faster</font>

815
00:42:48,260 --> 00:42:56,220
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I can do a bit more Titan has dart</font>

816
00:42:52,350 --> 00:43:01,350
support<font color="#E5E5E5"> for non point or for memory</font>

817
00:42:56,220 --> 00:43:04,649
buffers<font color="#CCCCCC"> so far I kept the data</font><font color="#E5E5E5"> in a</font>

818
00:43:01,350 --> 00:43:06,210
Python<font color="#E5E5E5"> list but I can also keep it in an</font>

819
00:43:04,650 --> 00:43:09,600
entire<font color="#E5E5E5"> array which</font><font color="#CCCCCC"> is much more memory</font>

820
00:43:06,210 --> 00:43:10,950
efficient so title list has -<font color="#E5E5E5"> objects in</font>

821
00:43:09,600 --> 00:43:14,040
<font color="#CCCCCC">there so there's some object overhead</font>

822
00:43:10,950 --> 00:43:18,029
involved<font color="#CCCCCC"> an umpire</font><font color="#E5E5E5"> array is</font><font color="#CCCCCC"> basically</font>

823
00:43:14,040 --> 00:43:20,070
flat<font color="#E5E5E5"> memory space of</font><font color="#CCCCCC"> C data type</font>

824
00:43:18,030 --> 00:43:22,170
and when I take<font color="#CCCCCC"> a</font><font color="#E5E5E5"> numpy array of</font><font color="#CCCCCC"> C</font>

825
00:43:20,070 --> 00:43:26,160
<font color="#CCCCCC">doubles</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it just FLETC doubles all</font>

826
00:43:22,170 --> 00:43:28,500
the way which are very<font color="#CCCCCC"> faster process so</font>

827
00:43:26,160 --> 00:43:36,930
when I switch<font color="#CCCCCC"> from a</font><font color="#E5E5E5"> pattern list to</font>

828
00:43:28,500 --> 00:43:40,740
numpy array as as data structure now all

829
00:43:36,930 --> 00:43:44,490
I have<font color="#CCCCCC"> to do in my</font><font color="#E5E5E5"> sizing code is I have</font>

830
00:43:40,740 --> 00:43:47,430
to tell<font color="#CCCCCC"> Satan what the the numpy array</font>

831
00:43:44,490 --> 00:43:52,109
looks like but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> basic what memory</font>

832
00:43:47,430 --> 00:43:53,609
layout is<font color="#CCCCCC"> and I do that by saying you</font>

833
00:43:52,110 --> 00:43:55,290
know<font color="#CCCCCC"> you can unpack this numpy array</font>

834
00:43:53,610 --> 00:43:58,710
which comes in you can<font color="#E5E5E5"> take it and</font>

835
00:43:55,290 --> 00:44:01,560
interpret<font color="#E5E5E5"> it as a</font><font color="#CCCCCC"> one dimensional</font><font color="#E5E5E5"> array</font>

836
00:43:58,710 --> 00:44:08,220
<font color="#CCCCCC">of</font><font color="#E5E5E5"> C doubles okay and the way I spell</font>

837
00:44:01,560 --> 00:44:11,549
this is like this so the<font color="#E5E5E5"> incomes array</font>

838
00:44:08,220 --> 00:44:14,490
will then be<font color="#E5E5E5"> attacked by Python into a</font>

839
00:44:11,550 --> 00:44:16,800
one dimensional so on your bike over

840
00:44:14,490 --> 00:44:20,160
here<font color="#E5E5E5"> for those who understand I'm PI</font>

841
00:44:16,800 --> 00:44:21,750
this will be kind of obvious<font color="#CCCCCC"> if it was</font>

842
00:44:20,160 --> 00:44:24,290
<font color="#CCCCCC">two-dimensional I would say this three</font>

843
00:44:21,750 --> 00:44:29,130
<font color="#CCCCCC">dimensional</font><font color="#E5E5E5"> like this so it just goes</font>

844
00:44:24,290 --> 00:44:30,900
then so this is one dimensional and<font color="#E5E5E5"> I'm</font>

845
00:44:29,130 --> 00:44:36,660
saying<font color="#E5E5E5"> the data type in that array is</font>

846
00:44:30,900 --> 00:44:39,210
<font color="#E5E5E5">suitable straightforward okay</font><font color="#CCCCCC"> I can</font>

847
00:44:36,660 --> 00:44:45,240
compile that<font color="#E5E5E5"> that's all fine ignore</font>

848
00:44:39,210 --> 00:44:47,580
<font color="#CCCCCC">these warnings</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a demo and then</font>

849
00:44:45,240 --> 00:44:49,890
<font color="#E5E5E5">instead of passing the list into it I'm</font>

850
00:44:47,580 --> 00:44:53,790
<font color="#E5E5E5">taking numpy array now as inputs still</font>

851
00:44:49,890 --> 00:44:58,549
get the same result<font color="#E5E5E5"> and tying it on it</font>

852
00:44:53,790 --> 00:45:02,690
says it<font color="#CCCCCC"> says</font><font color="#E5E5E5"> 362 milliseconds which</font><font color="#CCCCCC"> is</font>

853
00:44:58,550 --> 00:45:06,410
surprising<font color="#CCCCCC"> because that is somewhat slow</font>

854
00:45:02,690 --> 00:45:06,410
let me check<font color="#CCCCCC"> why that is</font>

855
00:45:14,620 --> 00:45:17,770
[Music]

856
00:45:20,220 --> 00:45:40,419
come on<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> Oh sighs - a</font><font color="#E5E5E5"> broken somehow</font>

857
00:45:30,069 --> 00:45:44,619
<font color="#CCCCCC">oh yeah that should be</font><font color="#E5E5E5"> fine</font><font color="#CCCCCC"> ish</font><font color="#E5E5E5"> yes I</font>

858
00:45:40,420 --> 00:45:52,270
copied<font color="#E5E5E5"> it from from above um okay from</font>

859
00:45:44,619 --> 00:45:57,339
<font color="#E5E5E5">the stipulation</font><font color="#CCCCCC"> sighs well I think</font><font color="#E5E5E5"> the</font>

860
00:45:52,270 --> 00:46:00,759
the<font color="#E5E5E5"> data size might be bigger now did I</font>

861
00:45:57,339 --> 00:46:03,779
cut it<font color="#CCCCCC"> down stop</font><font color="#E5E5E5"> that just one</font><font color="#CCCCCC"> time it</font>

862
00:46:00,760 --> 00:46:07,740
again<font color="#CCCCCC"> just be</font><font color="#E5E5E5"> sure do you never know</font>

863
00:46:03,780 --> 00:46:07,740
yeah that's that's tall

864
00:46:12,510 --> 00:46:15,849
[Music]

865
00:46:17,990 --> 00:46:21,169
[Music]

866
00:46:22,810 --> 00:46:26,980
data size the same

867
00:46:30,440 --> 00:46:33,579
[Music]

868
00:46:42,850 --> 00:46:54,370
<font color="#CCCCCC">ah</font><font color="#E5E5E5"> okay yeah sorry</font><font color="#CCCCCC"> what it does here</font><font color="#E5E5E5"> and</font>

869
00:46:51,880 --> 00:46:57,520
that's<font color="#E5E5E5"> what segments a shows me at does</font>

870
00:46:54,370 --> 00:46:59,319
the iteration in patent space which is a

871
00:46:57,520 --> 00:47:03,910
stupid thing<font color="#CCCCCC"> to do because iterating</font>

872
00:46:59,320 --> 00:47:09,550
over<font color="#E5E5E5"> the thing in</font><font color="#CCCCCC"> NC space issue much</font>

873
00:47:03,910 --> 00:47:10,359
faster so what I have to do now<font color="#CCCCCC"> is make</font>

874
00:47:09,550 --> 00:47:18,820
the loop

875
00:47:10,360 --> 00:47:24,360
<font color="#E5E5E5">sheesh by doing this that's a really</font>

876
00:47:18,820 --> 00:47:29,260
plain<font color="#CCCCCC"> sealed now and then x equals</font>

877
00:47:24,360 --> 00:47:33,660
<font color="#CCCCCC">income of I that should be faster if it</font>

878
00:47:29,260 --> 00:47:40,510
compiles<font color="#CCCCCC"> I shouldn't</font><font color="#E5E5E5"> comes okay fix it</font>

879
00:47:33,660 --> 00:47:44,049
so<font color="#CCCCCC"> yeah it's</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> thing now</font><font color="#E5E5E5"> it</font>

880
00:47:40,510 --> 00:47:46,660
<font color="#E5E5E5">should</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> faster back here</font><font color="#CCCCCC"> and</font>

881
00:47:44,050 --> 00:47:52,150
what I did was I changed the the loop

882
00:47:46,660 --> 00:47:54,790
here<font color="#CCCCCC"> to so initially it was</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> over</font>

883
00:47:52,150 --> 00:47:57,310
the globe<font color="#E5E5E5"> using Python iteration so it</font>

884
00:47:54,790 --> 00:48:01,060
was<font color="#E5E5E5"> actually taken the C double in the</font>

885
00:47:57,310 --> 00:48:03,970
numpy array<font color="#CCCCCC"> taken a creating a Python</font>

886
00:48:01,060 --> 00:48:06,490
<font color="#CCCCCC">object from it passing that through</font><font color="#E5E5E5"> the</font>

887
00:48:03,970 --> 00:48:08,140
generator into<font color="#E5E5E5"> a sizer and patent</font>

888
00:48:06,490 --> 00:48:09,970
<font color="#CCCCCC">unpacked it into a C double again and</font>

889
00:48:08,140 --> 00:48:11,770
<font color="#CCCCCC">the</font><font color="#E5E5E5"> computation with it so it was</font>

890
00:48:09,970 --> 00:48:15,069
actually creating a Python<font color="#CCCCCC"> object on</font>

891
00:48:11,770 --> 00:48:19,000
each<font color="#E5E5E5"> iteration</font><font color="#CCCCCC"> like a new one</font><font color="#E5E5E5"> and some</font>

892
00:48:15,070 --> 00:48:23,890
by cutting the the loop into some<font color="#CCCCCC"> some</font>

893
00:48:19,000 --> 00:48:27,060
CH operation<font color="#CCCCCC"> damage makes it way faster</font>

894
00:48:23,890 --> 00:48:31,000
<font color="#E5E5E5">so we're down to</font><font color="#CCCCCC"> 11 milliseconds now</font>

895
00:48:27,060 --> 00:48:34,330
<font color="#E5E5E5">okay and we are at a factor of 262 we</font>

896
00:48:31,000 --> 00:48:34,660
now<font color="#E5E5E5"> compared to</font><font color="#CCCCCC"> the initial python</font>

897
00:48:34,330 --> 00:48:37,299
version

898
00:48:34,660 --> 00:48:39,790
okay so I'll stop here<font color="#CCCCCC"> just get back to</font>

899
00:48:37,300 --> 00:48:41,800
this again hello<font color="#E5E5E5"> ideas for future</font>

900
00:48:39,790 --> 00:48:43,390
features as I said we have<font color="#CCCCCC"> Python</font>

901
00:48:41,800 --> 00:48:44,800
<font color="#E5E5E5">integration now and I would like</font><font color="#CCCCCC"> to</font>

902
00:48:43,390 --> 00:48:50,859
extend that<font color="#E5E5E5"> so it would really be nice</font>

903
00:48:44,800 --> 00:48:52,810
to be able to you know<font color="#CCCCCC"> have a so we</font><font color="#E5E5E5"> have</font>

904
00:48:50,860 --> 00:48:54,910
a more efficient way now to

905
00:48:52,810 --> 00:48:57,070
deal with<font color="#CCCCCC"> numpy operations and</font><font color="#E5E5E5"> title</font>

906
00:48:54,910 --> 00:49:00,210
code and I think<font color="#E5E5E5"> people should start</font>

907
00:48:57,070 --> 00:49:04,360
using that<font color="#CCCCCC"> they also cut off</font><font color="#E5E5E5"> C++</font>

908
00:49:00,210 --> 00:49:06,400
<font color="#E5E5E5">integration ideas that we have</font><font color="#CCCCCC"> for</font>

909
00:49:04,360 --> 00:49:08,230
example<font color="#E5E5E5"> instead of having</font><font color="#CCCCCC"> a list</font>

910
00:49:06,400 --> 00:49:10,810
<font color="#E5E5E5">comprehension in a Python</font><font color="#CCCCCC"> list</font><font color="#E5E5E5"> you could</font>

911
00:49:08,230 --> 00:49:13,660
<font color="#E5E5E5">do the same</font><font color="#CCCCCC"> with a C++ vector this would</font>

912
00:49:10,810 --> 00:49:17,380
be how it looks like<font color="#CCCCCC"> it's probably</font><font color="#E5E5E5"> easy</font>

913
00:49:13,660 --> 00:49:21,009
to<font color="#E5E5E5"> implement and that</font><font color="#CCCCCC"> would be cool a</font>

914
00:49:17,380 --> 00:49:23,590
new<font color="#E5E5E5"> feature so if</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> country</font><font color="#CCCCCC"> roots</font><font color="#E5E5E5"> come</font>

915
00:49:21,010 --> 00:49:27,370
to talk to<font color="#CCCCCC"> me</font><font color="#E5E5E5"> on the conference</font>

916
00:49:23,590 --> 00:49:29,590
somewhere<font color="#E5E5E5"> or contact me via</font><font color="#CCCCCC"> email and</font>

917
00:49:27,370 --> 00:49:33,009
certainly something that<font color="#E5E5E5"> people would</font>

918
00:49:29,590 --> 00:49:36,130
benefit from<font color="#CCCCCC"> okay that's it I brought</font>

919
00:49:33,010 --> 00:49:37,060
stickers so grab some on the way out

920
00:49:36,130 --> 00:49:39,050
[Applause]

921
00:49:37,060 --> 00:49:47,139
[Music]

922
00:49:39,050 --> 00:49:47,139
[Applause]

