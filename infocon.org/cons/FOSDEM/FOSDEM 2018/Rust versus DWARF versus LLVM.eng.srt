1
00:00:06,610 --> 00:00:14,120
<font color="#E5E5E5">all right everyone hear me I'm told I'm</font>

2
00:00:12,020 --> 00:00:18,320
I'm supposed to start so can<font color="#E5E5E5"> everyone</font>

3
00:00:14,120 --> 00:00:21,580
hear all<font color="#CCCCCC"> right</font><font color="#E5E5E5"> what all right okay hi</font><font color="#CCCCCC"> my</font>

4
00:00:18,320 --> 00:00:23,690
name<font color="#CCCCCC"> is Tom Romy I work at Mozilla I</font>

5
00:00:21,580 --> 00:00:27,889
recently started<font color="#E5E5E5"> a</font><font color="#CCCCCC"> project to improve</font>

6
00:00:23,690 --> 00:00:29,390
<font color="#CCCCCC">the debugging story for rust</font><font color="#E5E5E5"> and so I'm</font>

7
00:00:27,890 --> 00:00:32,000
here<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about that a little bit</font>

8
00:00:29,390 --> 00:00:35,120
today<font color="#CCCCCC"> and</font><font color="#E5E5E5"> first of all before I started</font>

9
00:00:32,000 --> 00:00:36,920
wanting<font color="#E5E5E5"> to thank Mozilla for you know</font>

10
00:00:35,120 --> 00:00:39,769
<font color="#E5E5E5">letting me come to this conference I</font>

11
00:00:36,920 --> 00:00:42,110
don't know it's<font color="#E5E5E5"> pretty nice</font><font color="#CCCCCC"> let's see so</font>

12
00:00:39,770 --> 00:00:44,540
first I like<font color="#E5E5E5"> to give an overview we're</font>

13
00:00:42,110 --> 00:00:46,519
gonna talk a little bit about rust<font color="#E5E5E5"> not a</font>

14
00:00:44,540 --> 00:00:47,780
whole lot<font color="#CCCCCC"> but a little</font><font color="#E5E5E5"> bit we're going</font>

15
00:00:46,520 --> 00:00:53,600
<font color="#E5E5E5">to talk about some of the</font><font color="#CCCCCC"> concrete</font>

16
00:00:47,780 --> 00:00:56,809
problems with like expressing expressing

17
00:00:53,600 --> 00:00:58,489
rusts constructs in debug info<font color="#CCCCCC"> you can</font>

18
00:00:56,809 --> 00:01:01,250
tell you a little<font color="#E5E5E5"> story about like a</font>

19
00:00:58,489 --> 00:01:04,819
recent problem<font color="#E5E5E5"> I've worked on and then</font>

20
00:01:01,250 --> 00:01:07,100
I'm gonna<font color="#E5E5E5"> talk about well it says here</font>

21
00:01:04,819 --> 00:01:08,600
recommendations<font color="#E5E5E5"> about what we</font><font color="#CCCCCC"> should do</font>

22
00:01:07,100 --> 00:01:15,289
but<font color="#CCCCCC"> really</font><font color="#E5E5E5"> what it is is complaining</font>

23
00:01:08,600 --> 00:01:19,460
about other people's work<font color="#E5E5E5"> so rust who</font>

24
00:01:15,290 --> 00:01:22,310
who<font color="#CCCCCC"> knows rust all</font><font color="#E5E5E5"> right</font>

25
00:01:19,460 --> 00:01:24,639
yes rust is a system<font color="#CCCCCC"> language from</font>

26
00:01:22,310 --> 00:01:27,170
Mozilla with an emphasis on safety<font color="#CCCCCC"> I</font>

27
00:01:24,640 --> 00:01:30,020
<font color="#E5E5E5">personally feel like it's what the</font>

28
00:01:27,170 --> 00:01:31,940
programming world needs<font color="#E5E5E5"> but this</font>

29
00:01:30,020 --> 00:01:34,699
emphasis<font color="#E5E5E5"> on safety doesn't matter at all</font>

30
00:01:31,940 --> 00:01:37,939
<font color="#E5E5E5">to debuggers it's not important like</font>

31
00:01:34,700 --> 00:01:40,880
from the debugger view what what does

32
00:01:37,939 --> 00:01:46,130
matter to debuggers well what<font color="#E5E5E5"> matters is</font>

33
00:01:40,880 --> 00:01:48,530
the type system<font color="#CCCCCC"> the ABI things like</font>

34
00:01:46,130 --> 00:01:50,929
macros you<font color="#CCCCCC"> know ways that the source</font>

35
00:01:48,530 --> 00:01:52,040
<font color="#E5E5E5">gets transformed</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the developers</font>

36
00:01:50,930 --> 00:01:56,150
want<font color="#CCCCCC"> to understand while they're</font>

37
00:01:52,040 --> 00:01:59,630
debugging<font color="#E5E5E5"> and all of these have like</font>

38
00:01:56,150 --> 00:02:02,960
problems<font color="#E5E5E5"> when you get to like dwarf and</font>

39
00:01:59,630 --> 00:02:04,399
teaching debuggers how to debug rust now

40
00:02:02,960 --> 00:02:06,229
<font color="#E5E5E5">I wanted to talk a little bit about like</font>

41
00:02:04,400 --> 00:02:07,939
similarities there's a lot of constructs

42
00:02:06,229 --> 00:02:09,439
in rust that come from<font color="#E5E5E5"> other programming</font>

43
00:02:07,939 --> 00:02:11,599
languages the<font color="#CCCCCC"> rust world I think</font>

44
00:02:09,439 --> 00:02:15,230
<font color="#E5E5E5">sometimes says that nothing in rust is</font>

45
00:02:11,599 --> 00:02:16,970
revolutionary<font color="#E5E5E5"> it's all you know it's the</font>

46
00:02:15,230 --> 00:02:18,590
<font color="#CCCCCC">combination that's revolutionary</font><font color="#E5E5E5"> they</font>

47
00:02:16,970 --> 00:02:20,900
take ideas<font color="#CCCCCC"> from other things</font><font color="#E5E5E5"> and it has</font>

48
00:02:18,590 --> 00:02:23,510
<font color="#CCCCCC">a lot of influences so for many things</font>

49
00:02:20,900 --> 00:02:25,910
<font color="#E5E5E5">in</font><font color="#CCCCCC"> dwarf</font><font color="#E5E5E5"> that's very easy you know like</font>

50
00:02:23,510 --> 00:02:27,829
you see an integer or<font color="#CCCCCC"> fez good</font>

51
00:02:25,910 --> 00:02:29,720
representation of integers but it turns

52
00:02:27,830 --> 00:02:33,050
out<font color="#E5E5E5"> that there's things that russ has</font>

53
00:02:29,720 --> 00:02:34,070
that<font color="#E5E5E5"> dwarf doesn't really understand so</font>

54
00:02:33,050 --> 00:02:37,400
first we're going<font color="#E5E5E5"> to start with the type</font>

55
00:02:34,070 --> 00:02:40,340
system<font color="#E5E5E5"> so the type system in rust it has</font>

56
00:02:37,400 --> 00:02:42,490
like a full complement of scalar types

57
00:02:40,340 --> 00:02:46,150
you know integers and floats and stuff

58
00:02:42,490 --> 00:02:48,470
it has an algebraic type system<font color="#E5E5E5"> so</font>

59
00:02:46,150 --> 00:02:50,360
that's<font color="#CCCCCC"> a fancy</font><font color="#E5E5E5"> word for saying</font><font color="#CCCCCC"> there</font>

60
00:02:48,470 --> 00:02:52,880
<font color="#CCCCCC">strux and there's unions except unions</font>

61
00:02:50,360 --> 00:02:55,760
are like safe not unsafe

62
00:02:52,880 --> 00:02:57,620
it has pointers and references it has

63
00:02:55,760 --> 00:03:01,970
this<font color="#CCCCCC"> thing called slices</font><font color="#E5E5E5"> which are</font>

64
00:02:57,620 --> 00:03:03,530
basically a view<font color="#E5E5E5"> into an array like like</font>

65
00:03:01,970 --> 00:03:06,830
a<font color="#CCCCCC"> C++ or a view or something</font>

66
00:03:03,530 --> 00:03:09,620
<font color="#E5E5E5">it has traits which are sort of like a</font>

67
00:03:06,830 --> 00:03:11,870
Java interface<font color="#CCCCCC"> a little bit it has trait</font>

68
00:03:09,620 --> 00:03:14,420
objects which<font color="#E5E5E5"> are also sort of like a</font>

69
00:03:11,870 --> 00:03:16,430
job at interface a little<font color="#E5E5E5"> bit it's you</font>

70
00:03:14,420 --> 00:03:18,829
know<font color="#E5E5E5"> and then one thing that you should</font>

71
00:03:16,430 --> 00:03:21,560
know about rust is rust<font color="#E5E5E5"> it has this</font>

72
00:03:18,830 --> 00:03:23,470
emphasis<font color="#E5E5E5"> on safety but it has an unsafe</font>

73
00:03:21,560 --> 00:03:25,580
mode<font color="#E5E5E5"> because it's a</font><font color="#CCCCCC"> system language</font>

74
00:03:23,470 --> 00:03:28,550
<font color="#E5E5E5">sometimes you need to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to do</font>

75
00:03:25,580 --> 00:03:30,709
things<font color="#E5E5E5"> that you wouldn't like that are</font>

76
00:03:28,550 --> 00:03:32,840
unsafe<font color="#CCCCCC"> right you need</font><font color="#E5E5E5"> to drop all of the</font>

77
00:03:30,709 --> 00:03:36,140
hood<font color="#CCCCCC"> and do some crazy stuff to</font>

78
00:03:32,840 --> 00:03:38,260
implement the language or in<font color="#CCCCCC"> Russ case</font>

79
00:03:36,140 --> 00:03:43,160
implement some sorts of data structures

80
00:03:38,260 --> 00:03:45,649
unsafe is basically<font color="#E5E5E5"> C and you know</font>

81
00:03:43,160 --> 00:03:47,359
<font color="#E5E5E5">conceptually it doesn't look like</font><font color="#CCCCCC"> C but</font>

82
00:03:45,650 --> 00:03:51,709
it's basically the<font color="#CCCCCC"> same sorts of rules</font>

83
00:03:47,360 --> 00:03:54,560
<font color="#CCCCCC">as C and so rusts</font><font color="#E5E5E5"> type system includes</font>

84
00:03:51,709 --> 00:03:57,880
sort of a superset of<font color="#E5E5E5"> all the things</font>

85
00:03:54,560 --> 00:04:01,730
that<font color="#E5E5E5"> you would find</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> C type system</font>

86
00:03:57,880 --> 00:04:03,680
so let's talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about some of</font>

87
00:04:01,730 --> 00:04:06,590
<font color="#CCCCCC">the things in rust</font><font color="#E5E5E5"> that make it a little</font>

88
00:04:03,680 --> 00:04:08,920
tricky<font color="#E5E5E5"> for door here's one rust has</font>

89
00:04:06,590 --> 00:04:13,010
<font color="#E5E5E5">three kinds of structure types</font>

90
00:04:08,920 --> 00:04:15,290
<font color="#CCCCCC">it has structures and a structure</font><font color="#E5E5E5"> it</font>

91
00:04:13,010 --> 00:04:18,019
says name and then like you<font color="#E5E5E5"> know there's</font>

92
00:04:15,290 --> 00:04:20,779
it uses curly braces and<font color="#E5E5E5"> every member</font><font color="#CCCCCC"> of</font>

93
00:04:18,019 --> 00:04:24,110
the structure has a name and a type just

94
00:04:20,779 --> 00:04:27,989
<font color="#E5E5E5">like C</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> whatever well Russ also has</font>

95
00:04:24,110 --> 00:04:32,849
tuples who says tuple<font color="#E5E5E5"> who says tuple</font>

96
00:04:27,990 --> 00:04:39,479
<font color="#CCCCCC">no I'm a tuple person but you know I</font>

97
00:04:32,849 --> 00:04:44,340
don't<font color="#CCCCCC"> judge so a tuple is basically</font><font color="#E5E5E5"> it's</font>

98
00:04:39,479 --> 00:04:48,750
it's<font color="#E5E5E5"> a it's a heterogeneous type</font><font color="#CCCCCC"> where</font>

99
00:04:44,340 --> 00:04:51,929
like a structure<font color="#E5E5E5"> right where the fields</font>

100
00:04:48,750 --> 00:04:54,389
don't<font color="#E5E5E5"> have names</font><font color="#CCCCCC"> they're just referred</font>

101
00:04:51,930 --> 00:04:56,340
<font color="#CCCCCC">to as</font><font color="#E5E5E5"> integers so like with the</font>

102
00:04:54,389 --> 00:04:58,710
structure<font color="#CCCCCC"> you</font><font color="#E5E5E5"> would write you know but</font>

103
00:04:56,340 --> 00:05:01,310
you<font color="#E5E5E5"> know blah blah blah dot name and</font>

104
00:04:58,710 --> 00:05:03,810
then a tuple you would write<font color="#CCCCCC"> ba ba ba</font><font color="#E5E5E5"> 0</font>

105
00:05:01,310 --> 00:05:05,130
<font color="#CCCCCC">now what's convenient about</font><font color="#E5E5E5"> them is</font>

106
00:05:03,810 --> 00:05:06,960
they're<font color="#CCCCCC"> anonymous you don't have to</font>

107
00:05:05,130 --> 00:05:08,699
<font color="#E5E5E5">declare them so you can just write them</font>

108
00:05:06,960 --> 00:05:10,859
in<font color="#E5E5E5"> your code at different places and</font>

109
00:05:08,699 --> 00:05:14,509
that's very handy<font color="#CCCCCC"> and rust like if you</font>

110
00:05:10,860 --> 00:05:17,699
do pattern<font color="#E5E5E5"> matching</font><font color="#CCCCCC"> and stuff you know</font>

111
00:05:14,509 --> 00:05:19,770
<font color="#CCCCCC">it reduces</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> amount of like you know</font>

112
00:05:17,699 --> 00:05:21,960
typing you have to do well there's also

113
00:05:19,770 --> 00:05:23,940
tuple struts<font color="#E5E5E5"> because maybe you want your</font>

114
00:05:21,960 --> 00:05:28,169
tuple to have a name<font color="#E5E5E5"> and not be</font>

115
00:05:23,940 --> 00:05:30,270
anonymous and so yeah anyway<font color="#E5E5E5"> what this</font>

116
00:05:28,169 --> 00:05:34,049
means though<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like in Dwarf</font><font color="#CCCCCC"> there's</font>

117
00:05:30,270 --> 00:05:36,150
only one kind<font color="#E5E5E5"> of structure</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> DW</font>

118
00:05:34,050 --> 00:05:38,599
<font color="#E5E5E5">tag struct well technically there's also</font>

119
00:05:36,150 --> 00:05:41,008
class but<font color="#E5E5E5"> rust doesn't have classes so</font>

120
00:05:38,599 --> 00:05:43,020
and you want to be able<font color="#E5E5E5"> to differentiate</font>

121
00:05:41,009 --> 00:05:44,729
<font color="#E5E5E5">these in the debugger</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I think you</font>

122
00:05:43,020 --> 00:05:48,630
know like here the solutions obvious

123
00:05:44,729 --> 00:05:51,419
let's add some new tags right<font color="#CCCCCC"> currently</font>

124
00:05:48,630 --> 00:05:53,460
like in gdb what we do is we try to

125
00:05:51,419 --> 00:05:55,349
guess which<font color="#CCCCCC"> one it is by looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

126
00:05:53,460 --> 00:06:01,229
<font color="#CCCCCC">names of fields but that</font><font color="#E5E5E5"> sort of thing</font>

127
00:05:55,349 --> 00:06:03,870
falls down if if you have a structure<font color="#E5E5E5"> or</font>

128
00:06:01,229 --> 00:06:07,169
<font color="#E5E5E5">a tuple with no members there are no</font>

129
00:06:03,870 --> 00:06:10,020
fields<font color="#E5E5E5"> to examine but still might matter</font>

130
00:06:07,169 --> 00:06:14,219
which one it<font color="#CCCCCC"> actually is the other thing</font>

131
00:06:10,020 --> 00:06:16,109
that<font color="#CCCCCC"> can happen with rust is the rust</font>

132
00:06:14,219 --> 00:06:18,690
compiler<font color="#CCCCCC"> actually does some structure</font>

133
00:06:16,110 --> 00:06:20,190
optimizations<font color="#E5E5E5"> it rearranges the fields</font>

134
00:06:18,690 --> 00:06:23,069
of a structure to pack<font color="#E5E5E5"> this structure</font>

135
00:06:20,190 --> 00:06:25,380
more efficiently<font color="#CCCCCC"> I forget</font><font color="#E5E5E5"> if it goes</font>

136
00:06:23,069 --> 00:06:28,020
into sending or descending<font color="#E5E5E5"> order of size</font>

137
00:06:25,380 --> 00:06:30,750
but you know now<font color="#CCCCCC"> that turns out to be</font>

138
00:06:28,020 --> 00:06:32,460
easy<font color="#E5E5E5"> to represent in</font><font color="#CCCCCC"> Dwarf it just comes</font>

139
00:06:30,750 --> 00:06:34,680
out looking a little strange where you

140
00:06:32,460 --> 00:06:36,510
have<font color="#E5E5E5"> the all</font><font color="#CCCCCC"> the members in one</font><font color="#E5E5E5"> order</font>

141
00:06:34,680 --> 00:06:37,860
<font color="#E5E5E5">and then the offsets all are all over</font>

142
00:06:36,510 --> 00:06:40,710
the<font color="#E5E5E5"> place you know</font>

143
00:06:37,860 --> 00:06:42,720
okay so but<font color="#E5E5E5"> I want you to remember this</font>

144
00:06:40,710 --> 00:06:48,530
like here new tags<font color="#CCCCCC"> we'll come</font><font color="#E5E5E5"> back later</font>

145
00:06:42,720 --> 00:06:53,760
<font color="#CCCCCC">to what is involved in adding a new tag</font>

146
00:06:48,530 --> 00:06:55,859
now rust has<font color="#E5E5E5"> enums</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> enum and rust is</font>

147
00:06:53,760 --> 00:06:58,140
actually two<font color="#E5E5E5"> things there are</font><font color="#CCCCCC"> c style</font><font color="#E5E5E5"> in</font>

148
00:06:55,860 --> 00:07:00,720
ohms<font color="#E5E5E5"> which is basically more</font><font color="#CCCCCC"> or less a</font>

149
00:06:58,140 --> 00:07:04,050
<font color="#E5E5E5">list of constants but there's also in</font>

150
00:07:00,720 --> 00:07:07,010
ohms where each you<font color="#CCCCCC"> know variant can</font>

151
00:07:04,050 --> 00:07:10,140
carry some data<font color="#E5E5E5"> and those are basically</font>

152
00:07:07,010 --> 00:07:12,480
<font color="#E5E5E5">discriminated unions unlike C where you</font>

153
00:07:10,140 --> 00:07:15,000
can<font color="#E5E5E5"> construct a</font><font color="#CCCCCC"> Union and look at</font>

154
00:07:12,480 --> 00:07:17,130
<font color="#CCCCCC">different views of it and change you</font>

155
00:07:15,000 --> 00:07:20,390
know like get yourself<font color="#E5E5E5"> into</font><font color="#CCCCCC"> trouble</font><font color="#E5E5E5"> in</font>

156
00:07:17,130 --> 00:07:23,400
rust<font color="#E5E5E5"> that's impossible</font>

157
00:07:20,390 --> 00:07:25,800
you can only refer to<font color="#E5E5E5"> the variant that</font>

158
00:07:23,400 --> 00:07:27,359
<font color="#E5E5E5">is you know the correct variant at any</font>

159
00:07:25,800 --> 00:07:32,600
given moment<font color="#CCCCCC"> whichever one it actually</font>

160
00:07:27,360 --> 00:07:35,280
<font color="#CCCCCC">holds so now rust does some</font>

161
00:07:32,600 --> 00:07:38,730
optimizations with unions as well<font color="#E5E5E5"> with</font>

162
00:07:35,280 --> 00:07:41,280
enums like furnace<font color="#E5E5E5"> and sissy no no and</font>

163
00:07:38,730 --> 00:07:43,860
then yes holds a string well<font color="#E5E5E5"> no doesn't</font>

164
00:07:41,280 --> 00:07:44,640
carry any data<font color="#E5E5E5"> right and it's a it's</font>

165
00:07:43,860 --> 00:07:47,400
just a<font color="#E5E5E5"> comp</font>

166
00:07:44,640 --> 00:07:49,080
you know it's<font color="#E5E5E5"> a it's a I forget what the</font>

167
00:07:47,400 --> 00:07:51,599
word<font color="#E5E5E5"> for that is and yes</font>

168
00:07:49,080 --> 00:07:53,700
carries a string with it well this<font color="#E5E5E5"> in</font>

169
00:07:51,600 --> 00:07:56,910
ohm actually takes the same<font color="#CCCCCC"> amount of</font>

170
00:07:53,700 --> 00:08:00,210
space<font color="#CCCCCC"> as a string</font><font color="#E5E5E5"> takes because the</font><font color="#CCCCCC"> RUS</font>

171
00:07:56,910 --> 00:08:04,560
compiler realizes well this thing can

172
00:08:00,210 --> 00:08:06,659
never be<font color="#CCCCCC"> 0 so we'll</font><font color="#E5E5E5"> have like one word</font>

173
00:08:04,560 --> 00:08:09,270
and if this you know there's a slot

174
00:08:06,660 --> 00:08:12,330
somewhere in the in the payload<font color="#E5E5E5"> and</font><font color="#CCCCCC"> if</font>

175
00:08:09,270 --> 00:08:16,169
<font color="#E5E5E5">that's a lot of 0 it means no and if</font>

176
00:08:12,330 --> 00:08:21,650
<font color="#CCCCCC">that slots a non 0 it means</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font>

177
00:08:16,170 --> 00:08:24,570
is the string and historically in rust

178
00:08:21,650 --> 00:08:27,929
the rust compiler emitted this<font color="#E5E5E5"> in like</font>

179
00:08:24,570 --> 00:08:30,080
this<font color="#E5E5E5"> crazy way which is also sort of</font>

180
00:08:27,930 --> 00:08:33,479
horrifyingly traditional where it would

181
00:08:30,080 --> 00:08:36,030
emit a yeah I know he made a union with

182
00:08:33,479 --> 00:08:38,850
a special a special<font color="#E5E5E5"> field name that the</font>

183
00:08:36,030 --> 00:08:41,280
debugger has<font color="#E5E5E5"> to decode but late last</font>

184
00:08:38,850 --> 00:08:43,440
<font color="#CCCCCC">year they landed more optimizations like</font>

185
00:08:41,280 --> 00:08:46,050
this the<font color="#CCCCCC"> russ compiler can optimize your</font>

186
00:08:43,440 --> 00:08:48,630
<font color="#CCCCCC">in ohms you know more cases</font><font color="#E5E5E5"> it can</font>

187
00:08:46,050 --> 00:08:51,130
<font color="#CCCCCC">handle different</font><font color="#E5E5E5"> kinds and</font>

188
00:08:48,630 --> 00:08:53,139
that old approach just<font color="#E5E5E5"> completely broke</font>

189
00:08:51,130 --> 00:08:56,740
<font color="#CCCCCC">so if something better has to be done</font>

190
00:08:53,139 --> 00:08:58,870
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that in a second then there's</font>

191
00:08:56,740 --> 00:09:03,160
also univariant<font color="#E5E5E5"> genomes you can have an</font>

192
00:08:58,870 --> 00:09:06,279
<font color="#E5E5E5">enum with just a single you know variant</font>

193
00:09:03,160 --> 00:09:09,250
in it why you<font color="#E5E5E5"> want to do that</font><font color="#CCCCCC"> I don't</font>

194
00:09:06,279 --> 00:09:12,790
know sometimes there's times but<font color="#CCCCCC"> unit</font>

195
00:09:09,250 --> 00:09:15,370
<font color="#E5E5E5">variant in ohms</font><font color="#CCCCCC"> like these enums</font><font color="#E5E5E5"> this</font>

196
00:09:12,790 --> 00:09:17,500
one the tag is kind<font color="#E5E5E5"> of hidden away right</font>

197
00:09:15,370 --> 00:09:19,750
it's tucked inside of this<font color="#CCCCCC"> now if you</font>

198
00:09:17,500 --> 00:09:22,149
have an enum with a lot<font color="#E5E5E5"> of variants each</font>

199
00:09:19,750 --> 00:09:24,639
of which has a<font color="#E5E5E5"> payload there's a tag</font>

200
00:09:22,149 --> 00:09:27,459
like at the beginning<font color="#CCCCCC"> or somewhere</font><font color="#E5E5E5"> you</font>

201
00:09:24,639 --> 00:09:29,920
<font color="#CCCCCC">know that describes</font><font color="#E5E5E5"> it's basically an</font>

202
00:09:27,459 --> 00:09:33,430
integer saying which branch is valid and

203
00:09:29,920 --> 00:09:37,779
univariant<font color="#E5E5E5"> enums don't have a tag at all</font>

204
00:09:33,430 --> 00:09:39,609
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> just a structure you know</font><font color="#E5E5E5"> now so</font>

205
00:09:37,779 --> 00:09:44,199
it turns out<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what has a way to</font>

206
00:09:39,610 --> 00:09:45,850
represent a represent tagged<font color="#E5E5E5"> or you know</font>

207
00:09:44,199 --> 00:09:48,160
discriminated unions this this thing

208
00:09:45,850 --> 00:09:51,490
called DW tag variant and there's a

209
00:09:48,160 --> 00:09:52,930
thing<font color="#CCCCCC"> called DW tag bearing apart I'm</font>

210
00:09:51,490 --> 00:09:54,519
<font color="#E5E5E5">gonna tell you a story</font><font color="#CCCCCC"> about that later</font>

211
00:09:52,930 --> 00:09:58,449
that's<font color="#E5E5E5"> the story I said I'm gonna tell</font>

212
00:09:54,519 --> 00:10:01,540
you<font color="#E5E5E5"> it's like I don't know anyway so</font>

213
00:09:58,449 --> 00:10:03,250
this<font color="#E5E5E5"> is one</font><font color="#CCCCCC"> of these things where okay</font>

214
00:10:01,540 --> 00:10:05,380
so while you're working<font color="#E5E5E5"> on this you know</font>

215
00:10:03,250 --> 00:10:06,939
<font color="#E5E5E5">you're working</font><font color="#CCCCCC"> on improving debugging</font>

216
00:10:05,380 --> 00:10:08,949
you find<font color="#E5E5E5"> something and dwarf and you're</font>

217
00:10:06,939 --> 00:10:13,870
like<font color="#CCCCCC"> hurray I don't have to add a new</font>

218
00:10:08,949 --> 00:10:15,359
<font color="#E5E5E5">tag</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this you know it's worse all</font>

219
00:10:13,870 --> 00:10:18,279
<font color="#E5E5E5">right we'll get there in a little bit</font>

220
00:10:15,360 --> 00:10:20,920
<font color="#E5E5E5">we're still covering the type system so</font>

221
00:10:18,279 --> 00:10:24,550
a trait<font color="#E5E5E5"> like I said earlier trade is</font>

222
00:10:20,920 --> 00:10:27,519
like an interface<font color="#CCCCCC"> a trade has a bunch of</font>

223
00:10:24,550 --> 00:10:30,279
<font color="#E5E5E5">a trait is a description a description</font>

224
00:10:27,519 --> 00:10:32,620
<font color="#E5E5E5">that has a bunch of</font><font color="#CCCCCC"> methods</font><font color="#E5E5E5"> it's it's</font>

225
00:10:30,279 --> 00:10:35,500
abstract<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know so for instance</font>

226
00:10:32,620 --> 00:10:38,829
there's a trait<font color="#E5E5E5"> which is used to</font>

227
00:10:35,500 --> 00:10:41,709
<font color="#CCCCCC">implement</font><font color="#E5E5E5"> operator overloading called</font>

228
00:10:38,829 --> 00:10:43,569
and I forget<font color="#E5E5E5"> what it's called but</font>

229
00:10:41,709 --> 00:10:46,029
<font color="#E5E5E5">basically it has one</font><font color="#CCCCCC"> method which</font><font color="#E5E5E5"> is how</font>

230
00:10:43,569 --> 00:10:48,880
<font color="#E5E5E5">to add two things and you can implement</font>

231
00:10:46,029 --> 00:10:53,079
a trait for any type so<font color="#E5E5E5"> for instance all</font>

232
00:10:48,880 --> 00:10:56,709
of<font color="#E5E5E5"> the scalar types implement this add</font>

233
00:10:53,079 --> 00:10:58,569
trade and they have this you<font color="#E5E5E5"> know they</font>

234
00:10:56,709 --> 00:11:00,609
have a concrete implementation of this

235
00:10:58,569 --> 00:11:01,290
function<font color="#E5E5E5"> and so you can add like two</font>

236
00:11:00,610 --> 00:11:03,270
integers

237
00:11:01,290 --> 00:11:05,939
<font color="#E5E5E5">all right well you could define a point</font>

238
00:11:03,270 --> 00:11:10,020
type and implement implement<font color="#E5E5E5"> the adding</font>

239
00:11:05,940 --> 00:11:12,030
trait for<font color="#E5E5E5"> your point type and then you</font>

240
00:11:10,020 --> 00:11:13,530
define that function<font color="#CCCCCC"> when you implement</font>

241
00:11:12,030 --> 00:11:18,360
the<font color="#CCCCCC"> trade you define that function</font><font color="#E5E5E5"> and</font>

242
00:11:13,530 --> 00:11:20,130
now you can add points<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so</font><font color="#CCCCCC"> drop</font>

243
00:11:18,360 --> 00:11:23,760
<font color="#E5E5E5">has something</font><font color="#CCCCCC"> for this we're</font><font color="#E5E5E5"> gonna get</font>

244
00:11:20,130 --> 00:11:26,939
to<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's also something</font><font color="#CCCCCC"> called a</font>

245
00:11:23,760 --> 00:11:33,270
trait object<font color="#CCCCCC"> now</font><font color="#E5E5E5"> the way to think about</font>

246
00:11:26,940 --> 00:11:35,070
a trait object is<font color="#CCCCCC"> its</font><font color="#E5E5E5"> its trait like if</font>

247
00:11:33,270 --> 00:11:36,540
you have a concrete<font color="#E5E5E5"> type that implements</font>

248
00:11:35,070 --> 00:11:38,550
some traits you can<font color="#E5E5E5"> add those things</font>

249
00:11:36,540 --> 00:11:40,469
together<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right but that's just</font>

250
00:11:38,550 --> 00:11:42,240
you're<font color="#CCCCCC"> just working</font><font color="#E5E5E5"> with members of</font><font color="#CCCCCC"> that</font>

251
00:11:40,470 --> 00:11:45,750
type<font color="#E5E5E5"> but suppose you want something</font>

252
00:11:42,240 --> 00:11:49,140
abstract<font color="#E5E5E5"> that can work on anything that</font>

253
00:11:45,750 --> 00:11:51,600
implements the add trade well one way to

254
00:11:49,140 --> 00:11:53,819
do it<font color="#E5E5E5"> is you can there's a thing called</font>

255
00:11:51,600 --> 00:11:57,930
a trait object<font color="#E5E5E5"> and what a trait object</font>

256
00:11:53,820 --> 00:12:00,810
is is it's a<font color="#CCCCCC"> it's a pointer that has two</font>

257
00:11:57,930 --> 00:12:03,329
<font color="#E5E5E5">slots</font><font color="#CCCCCC"> one slot points to the payload</font>

258
00:12:00,810 --> 00:12:05,729
<font color="#CCCCCC">right some piece of</font><font color="#E5E5E5"> data your integer</font>

259
00:12:03,330 --> 00:12:09,630
your point and the other<font color="#E5E5E5"> slot is a</font>

260
00:12:05,730 --> 00:12:12,360
virtual table<font color="#CCCCCC"> and the virtual table is</font>

261
00:12:09,630 --> 00:12:15,390
it's kind of<font color="#E5E5E5"> like C++ where you know you</font>

262
00:12:12,360 --> 00:12:17,160
have one slot in the table<font color="#E5E5E5"> for each</font>

263
00:12:15,390 --> 00:12:18,780
<font color="#CCCCCC">method implemented</font><font color="#E5E5E5"> by the trait and</font><font color="#CCCCCC"> so</font>

264
00:12:17,160 --> 00:12:21,510
you can write<font color="#E5E5E5"> these</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> take</font>

265
00:12:18,780 --> 00:12:28,890
any sort<font color="#E5E5E5"> of object and know how to</font>

266
00:12:21,510 --> 00:12:30,900
operate<font color="#E5E5E5"> on it as a pointer to</font><font color="#CCCCCC"> a virtual</font>

267
00:12:28,890 --> 00:12:33,030
<font color="#CCCCCC">table yeah it's a fat pointer with is</font>

268
00:12:30,900 --> 00:12:35,760
it's actually<font color="#E5E5E5"> just two pointers one to a</font>

269
00:12:33,030 --> 00:12:38,189
virtual<font color="#CCCCCC"> table and one to</font><font color="#E5E5E5"> the payload</font><font color="#CCCCCC"> all</font>

270
00:12:35,760 --> 00:12:39,960
right now<font color="#CCCCCC"> suppose you're</font><font color="#E5E5E5"> in the debugger</font>

271
00:12:38,190 --> 00:12:42,060
and<font color="#E5E5E5"> you try to print a trait object this</font>

272
00:12:39,960 --> 00:12:45,630
<font color="#CCCCCC">is a bug I'd fixed last year</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> try</font>

273
00:12:42,060 --> 00:12:48,599
to<font color="#E5E5E5"> print a trait object</font><font color="#CCCCCC"> there you get a</font>

274
00:12:45,630 --> 00:12:51,210
gobbledygook<font color="#CCCCCC"> there's nothing there in</font>

275
00:12:48,600 --> 00:12:54,360
fact previously all that rust would tell

276
00:12:51,210 --> 00:12:58,650
you is that<font color="#E5E5E5"> it's like 16 bytes of I</font>

277
00:12:54,360 --> 00:13:02,010
don't<font color="#CCCCCC"> know what</font><font color="#E5E5E5"> you know so what we did</font>

278
00:12:58,650 --> 00:13:04,350
is we like added code to describe the<font color="#E5E5E5"> V</font>

279
00:13:02,010 --> 00:13:07,200
table and dwarf<font color="#E5E5E5"> which by the way this is</font>

280
00:13:04,350 --> 00:13:12,150
<font color="#CCCCCC">something that C++ doesn't do what</font><font color="#E5E5E5"> C++</font>

281
00:13:07,200 --> 00:13:15,030
does is it just defers to the ABI here

282
00:13:12,150 --> 00:13:18,720
<font color="#E5E5E5">so like in C++ virtual tables</font>

283
00:13:15,030 --> 00:13:22,589
<font color="#E5E5E5">in the dwarf at all and the debugger</font>

284
00:13:18,720 --> 00:13:26,850
does<font color="#E5E5E5"> unbelievably terrible things to try</font>

285
00:13:22,590 --> 00:13:29,250
to<font color="#E5E5E5"> find out what's going</font><font color="#CCCCCC"> on our solution</font>

286
00:13:26,850 --> 00:13:31,920
<font color="#E5E5E5">was a little different</font><font color="#CCCCCC"> we we actually</font>

287
00:13:29,250 --> 00:13:34,500
<font color="#E5E5E5">just</font><font color="#CCCCCC"> omit something</font><font color="#E5E5E5"> that describes like</font>

288
00:13:31,920 --> 00:13:36,300
what these trade objects look like<font color="#E5E5E5"> we</font>

289
00:13:34,500 --> 00:13:38,280
<font color="#CCCCCC">omit something</font><font color="#E5E5E5"> that describes the</font>

290
00:13:36,300 --> 00:13:40,920
virtual table at least a little<font color="#E5E5E5"> bit like</font>

291
00:13:38,280 --> 00:13:45,329
and what we did is we<font color="#CCCCCC"> made a dwarf</font>

292
00:13:40,920 --> 00:13:48,390
extension where we have the<font color="#CCCCCC"> v-- table</font>

293
00:13:45,330 --> 00:13:51,750
has<font color="#E5E5E5"> this thing we add an containing type</font>

294
00:13:48,390 --> 00:13:53,730
attribute so that this<font color="#CCCCCC"> V table</font><font color="#E5E5E5"> points to</font>

295
00:13:51,750 --> 00:13:56,940
the concrete<font color="#E5E5E5"> type for which it was</font>

296
00:13:53,730 --> 00:13:59,430
implemented and what<font color="#E5E5E5"> that means is when</font>

297
00:13:56,940 --> 00:14:00,150
<font color="#CCCCCC">you get</font><font color="#E5E5E5"> a trade object in</font><font color="#CCCCCC"> GB and</font><font color="#E5E5E5"> you go</font>

298
00:13:59,430 --> 00:14:03,660
to print<font color="#E5E5E5"> it</font>

299
00:14:00,150 --> 00:14:07,740
<font color="#CCCCCC">gdb</font><font color="#E5E5E5"> knows how to it knows it's a trade</font>

300
00:14:03,660 --> 00:14:09,810
object through hackery<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> another</font>

301
00:14:07,740 --> 00:14:12,120
<font color="#E5E5E5">area where we should add a new tag but</font>

302
00:14:09,810 --> 00:14:14,280
it<font color="#CCCCCC"> knows it's a trade object</font><font color="#E5E5E5"> it extracts</font>

303
00:14:12,120 --> 00:14:15,870
<font color="#E5E5E5">the virtual table it looks it finds the</font>

304
00:14:14,280 --> 00:14:19,230
virtual table<font color="#E5E5E5"> somewhere in the debug</font>

305
00:14:15,870 --> 00:14:21,330
info and then it has this concrete

306
00:14:19,230 --> 00:14:24,900
virtual table that has a link<font color="#CCCCCC"> to the</font>

307
00:14:21,330 --> 00:14:27,810
containing<font color="#E5E5E5"> type and so now gdb knows all</font>

308
00:14:24,900 --> 00:14:30,150
this other slot in the trade object

309
00:14:27,810 --> 00:14:33,780
points to that type<font color="#E5E5E5"> and so you can say</font>

310
00:14:30,150 --> 00:14:37,140
print you know<font color="#E5E5E5"> my trade object and get</font>

311
00:14:33,780 --> 00:14:41,910
the<font color="#E5E5E5"> correct answer that all makes sense</font>

312
00:14:37,140 --> 00:14:43,470
<font color="#CCCCCC">kind of yeah let's see the</font><font color="#E5E5E5"> correct</font>

313
00:14:41,910 --> 00:14:45,660
answer it's whatever the payload is

314
00:14:43,470 --> 00:14:48,120
right<font color="#CCCCCC"> a trade object points to some</font>

315
00:14:45,660 --> 00:14:50,550
other object<font color="#CCCCCC"> a trade object is like a</font>

316
00:14:48,120 --> 00:14:58,170
fat pointer<font color="#CCCCCC"> I don't like that term but</font>

317
00:14:50,550 --> 00:15:00,000
<font color="#E5E5E5">that's what they call it you know you</font>

318
00:14:58,170 --> 00:15:02,459
wouldn't<font color="#E5E5E5"> well you wouldn't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> you know</font>

319
00:15:00,000 --> 00:15:04,710
at<font color="#E5E5E5"> run time it's like it's</font><font color="#CCCCCC"> like in C++</font>

320
00:15:02,460 --> 00:15:09,320
you you get a pointer to<font color="#E5E5E5"> some base class</font>

321
00:15:04,710 --> 00:15:12,750
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right what does it actually point to</font>

322
00:15:09,320 --> 00:15:16,650
at runtime right<font color="#E5E5E5"> you don't you know how</font>

323
00:15:12,750 --> 00:15:18,180
do you<font color="#E5E5E5"> find out now I think C++ should</font>

324
00:15:16,650 --> 00:15:21,900
adopt<font color="#E5E5E5"> something like this but it's not</font>

325
00:15:18,180 --> 00:15:23,640
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Dwarf at all so you know there's just</font>

326
00:15:21,900 --> 00:15:24,959
I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know of any compiler that does</font>

327
00:15:23,640 --> 00:15:27,180
it

328
00:15:24,960 --> 00:15:31,530
gdb uses hacks<font color="#E5E5E5"> yeah I'm not gonna do</font>

329
00:15:27,180 --> 00:15:34,280
that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right so</font><font color="#E5E5E5"> those are kind of</font><font color="#CCCCCC"> some</font>

330
00:15:31,530 --> 00:15:37,620
of<font color="#E5E5E5"> the corners</font><font color="#CCCCCC"> of the type system that</font>

331
00:15:34,280 --> 00:15:40,439
are troublesome<font color="#E5E5E5"> and remember like all</font>

332
00:15:37,620 --> 00:15:42,240
<font color="#E5E5E5">these</font><font color="#CCCCCC"> things like this is you know</font><font color="#E5E5E5"> this</font>

333
00:15:40,440 --> 00:15:43,650
<font color="#CCCCCC">is this</font><font color="#E5E5E5"> little extension</font><font color="#CCCCCC"> it turns out</font>

334
00:15:42,240 --> 00:15:45,990
there's actually another extension<font color="#E5E5E5"> that</font>

335
00:15:43,650 --> 00:15:48,540
uses containing type to mean something

336
00:15:45,990 --> 00:15:52,380
<font color="#CCCCCC">else that's</font><font color="#E5E5E5"> been in GCC for 20 years or</font>

337
00:15:48,540 --> 00:15:54,569
whatever<font color="#E5E5E5"> which is how I got</font><font color="#CCCCCC"> LLVM to</font>

338
00:15:52,380 --> 00:15:56,070
accept<font color="#E5E5E5"> this extension because there's</font>

339
00:15:54,570 --> 00:15:57,660
already<font color="#CCCCCC"> comments saying this is an</font>

340
00:15:56,070 --> 00:16:02,940
extension<font color="#E5E5E5"> and I just added one more</font>

341
00:15:57,660 --> 00:16:05,160
saying now it's a double extension<font color="#CCCCCC"> but</font>

342
00:16:02,940 --> 00:16:07,560
that is<font color="#E5E5E5"> that of the extent of the</font>

343
00:16:05,160 --> 00:16:14,100
<font color="#E5E5E5">documentation of this you know comment</font>

344
00:16:07,560 --> 00:16:14,729
<font color="#CCCCCC">10 LLVM yeah we'll</font><font color="#E5E5E5"> get to some of</font><font color="#CCCCCC"> that</font>

345
00:16:14,100 --> 00:16:16,880
in a minute

346
00:16:14,730 --> 00:16:23,420
<font color="#E5E5E5">all right so rust has this other thing</font>

347
00:16:16,880 --> 00:16:26,700
rust has hygienic<font color="#E5E5E5"> macro system they use</font>

348
00:16:23,420 --> 00:16:29,250
exclamation<font color="#E5E5E5"> points to tell you it's a</font>

349
00:16:26,700 --> 00:16:30,960
macro<font color="#E5E5E5"> so like if</font><font color="#CCCCCC"> you read some kinds of</font>

350
00:16:29,250 --> 00:16:35,370
<font color="#CCCCCC">rust code it just</font><font color="#E5E5E5"> looks like a lot of</font>

351
00:16:30,960 --> 00:16:39,720
<font color="#CCCCCC">shouting you know yeah as an aside I</font>

352
00:16:35,370 --> 00:16:41,130
<font color="#CCCCCC">feel like programming</font><font color="#E5E5E5"> languages of the</font>

353
00:16:39,720 --> 00:16:45,570
future<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be written in uppercase</font>

354
00:16:41,130 --> 00:16:48,270
and and<font color="#E5E5E5"> just kind of back</font><font color="#CCCCCC"> to the Fortran</font>

355
00:16:45,570 --> 00:16:51,980
days and then I think all<font color="#CCCCCC"> keywords</font>

356
00:16:48,270 --> 00:16:55,500
should<font color="#E5E5E5"> be emojis from now on but people</font>

357
00:16:51,980 --> 00:16:57,150
I keep trying to propose that and no one

358
00:16:55,500 --> 00:17:03,600
in<font color="#E5E5E5"> the rest world takes me seriously</font>

359
00:16:57,150 --> 00:17:05,190
so so hygienic<font color="#E5E5E5"> macros unlike C macros</font>

360
00:17:03,600 --> 00:17:08,579
<font color="#CCCCCC">they're not like just textual</font>

361
00:17:05,190 --> 00:17:11,160
substitution<font color="#E5E5E5"> they can do sort of a</font>

362
00:17:08,579 --> 00:17:15,240
pattern<font color="#E5E5E5"> matching on their arguments and</font>

363
00:17:11,160 --> 00:17:18,330
so they're not they<font color="#E5E5E5"> can be more</font>

364
00:17:15,240 --> 00:17:20,040
<font color="#CCCCCC">complicated</font><font color="#E5E5E5"> so you can kind of think of</font>

365
00:17:18,329 --> 00:17:23,449
them<font color="#E5E5E5"> as there's two different kinds like</font>

366
00:17:20,040 --> 00:17:27,839
<font color="#E5E5E5">there's some like printing print line or</font>

367
00:17:23,450 --> 00:17:29,430
debug or there's a few like<font color="#CCCCCC"> that they</font>

368
00:17:27,839 --> 00:17:31,860
look<font color="#CCCCCC"> just like function calls and</font><font color="#E5E5E5"> they</font>

369
00:17:29,430 --> 00:17:33,960
act like function calls<font color="#E5E5E5"> so when you're</font>

370
00:17:31,860 --> 00:17:35,189
stepping in the<font color="#E5E5E5"> knee bugger you sort of</font>

371
00:17:33,960 --> 00:17:39,450
want them

372
00:17:35,190 --> 00:17:41,820
to step<font color="#CCCCCC"> on or through them or over</font><font color="#E5E5E5"> them</font>

373
00:17:39,450 --> 00:17:44,280
<font color="#CCCCCC">like you do with function calls</font><font color="#E5E5E5"> but</font>

374
00:17:41,820 --> 00:17:47,700
<font color="#E5E5E5">there's other ones like you can write</font>

375
00:17:44,280 --> 00:17:53,010
complicated<font color="#CCCCCC"> matchers</font><font color="#E5E5E5"> that take a block</font>

376
00:17:47,700 --> 00:17:54,900
<font color="#CCCCCC">of code as</font><font color="#E5E5E5"> the argument as it were and</font><font color="#CCCCCC"> D</font>

377
00:17:53,010 --> 00:17:57,300
structure it and<font color="#E5E5E5"> stuff things in there</font>

378
00:17:54,900 --> 00:18:00,390
and stuff<font color="#E5E5E5"> like that and the question is</font>

379
00:17:57,300 --> 00:18:01,590
like when you see a macro<font color="#E5E5E5"> when you're</font>

380
00:18:00,390 --> 00:18:05,190
stepping<font color="#E5E5E5"> through code and you hit a</font>

381
00:18:01,590 --> 00:18:06,419
macro<font color="#E5E5E5"> what should</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> do you know where</font>

382
00:18:05,190 --> 00:18:09,120
<font color="#CCCCCC">should it go</font>

383
00:18:06,420 --> 00:18:11,160
or what should next do well next is

384
00:18:09,120 --> 00:18:13,370
usually easier but what what<font color="#E5E5E5"> should step</font>

385
00:18:11,160 --> 00:18:15,780
do you know should its depth

386
00:18:13,370 --> 00:18:18,330
<font color="#E5E5E5">should it step into the</font><font color="#CCCCCC"> implementation</font>

387
00:18:15,780 --> 00:18:20,760
<font color="#CCCCCC">you know like print line might be a</font>

388
00:18:18,330 --> 00:18:22,860
significant<font color="#E5E5E5"> chunk of code in some</font>

389
00:18:20,760 --> 00:18:26,370
library<font color="#CCCCCC"> over there</font><font color="#E5E5E5"> do you want to step</font>

390
00:18:22,860 --> 00:18:29,370
<font color="#E5E5E5">into that or for this match or do you</font>

391
00:18:26,370 --> 00:18:31,620
want to magically step over or<font color="#E5E5E5"> whatever</font>

392
00:18:29,370 --> 00:18:35,189
or like<font color="#CCCCCC"> prologue it might introduce and</font>

393
00:18:31,620 --> 00:18:36,689
go<font color="#E5E5E5"> into</font><font color="#CCCCCC"> your code or</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> I don't know if</font>

394
00:18:35,190 --> 00:18:41,030
<font color="#CCCCCC">there's a really good</font><font color="#E5E5E5"> answer for this</font>

395
00:18:36,690 --> 00:18:42,960
there's a proposal to like let macros

396
00:18:41,030 --> 00:18:46,649
<font color="#E5E5E5">pick one or the other</font>

397
00:18:42,960 --> 00:18:47,700
<font color="#CCCCCC">sorta you know</font><font color="#E5E5E5"> but and then see she</font>

398
00:18:46,650 --> 00:18:49,380
actually has this problem

399
00:18:47,700 --> 00:18:52,140
it just doesn't admit that it has this

400
00:18:49,380 --> 00:18:54,870
<font color="#E5E5E5">problem if you've ever looked at GCC</font>

401
00:18:52,140 --> 00:18:57,030
<font color="#E5E5E5">nowadays it's not so common</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> back in</font>

402
00:18:54,870 --> 00:18:59,070
the day GCC used to have some functions

403
00:18:57,030 --> 00:19:03,360
<font color="#E5E5E5">or like some macros that would expand</font><font color="#CCCCCC"> to</font>

404
00:18:59,070 --> 00:19:07,860
like<font color="#E5E5E5"> 200 lines of C code so</font><font color="#CCCCCC"> you'd you</font>

405
00:19:03,360 --> 00:19:10,500
know that's a case where<font color="#CCCCCC"> maybe what you</font>

406
00:19:07,860 --> 00:19:12,510
wanted in<font color="#E5E5E5"> GCC was to step and see the</font>

407
00:19:10,500 --> 00:19:15,470
body<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that macro</font><font color="#E5E5E5"> and step through the</font>

408
00:19:12,510 --> 00:19:18,810
macro<font color="#E5E5E5"> you know but then you</font><font color="#CCCCCC"> have like</font>

409
00:19:15,470 --> 00:19:21,840
problems right the macro has<font color="#CCCCCC"> arguments</font>

410
00:19:18,810 --> 00:19:23,940
<font color="#E5E5E5">how do you see those so anyway this is</font>

411
00:19:21,840 --> 00:19:26,790
<font color="#CCCCCC">just</font><font color="#E5E5E5"> an unknown area dwarf has no</font>

412
00:19:23,940 --> 00:19:30,600
solution for<font color="#E5E5E5"> this you know we're we're</font>

413
00:19:26,790 --> 00:19:35,909
probably gonna do<font color="#CCCCCC"> something</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> around</font>

414
00:19:30,600 --> 00:19:37,830
and you know revisit it in a couple

415
00:19:35,910 --> 00:19:39,750
<font color="#CCCCCC">years and see if it worked</font><font color="#E5E5E5"> or something</font>

416
00:19:37,830 --> 00:19:42,600
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that I don't know if you have an</font>

417
00:19:39,750 --> 00:19:45,870
<font color="#E5E5E5">idea you know I</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> often think like Lisp</font>

418
00:19:42,600 --> 00:19:47,169
I think you can stuff like a debug form

419
00:19:45,870 --> 00:19:48,879
in<font color="#CCCCCC"> your function</font><font color="#E5E5E5"> and</font>

420
00:19:47,170 --> 00:19:50,200
the debugger could know<font color="#CCCCCC"> about that maybe</font>

421
00:19:48,880 --> 00:19:54,760
<font color="#CCCCCC">I think we need</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> like that</font>

422
00:19:50,200 --> 00:19:58,559
you know yeah I don't<font color="#E5E5E5"> know all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font>

423
00:19:54,760 --> 00:20:00,760
now I'm gonna tell you<font color="#CCCCCC"> a story about</font>

424
00:19:58,559 --> 00:20:06,250
variants<font color="#CCCCCC"> feel</font><font color="#E5E5E5"> like I'm burning</font><font color="#CCCCCC"> through</font>

425
00:20:00,760 --> 00:20:12,010
this talk like really<font color="#E5E5E5"> fast so remember</font>

426
00:20:06,250 --> 00:20:14,650
in ohms<font color="#E5E5E5"> and how you know rust used to</font>

427
00:20:12,010 --> 00:20:17,920
admit special field names that sort of

428
00:20:14,650 --> 00:20:19,720
describe the<font color="#CCCCCC"> layout of the of one of</font>

429
00:20:17,920 --> 00:20:23,080
these compressed genomes and optimized

430
00:20:19,720 --> 00:20:24,940
you know well that's<font color="#E5E5E5"> not any good</font>

431
00:20:23,080 --> 00:20:27,189
especially<font color="#CCCCCC"> as more optimizations are</font>

432
00:20:24,940 --> 00:20:30,070
done it can't<font color="#CCCCCC"> it just</font><font color="#E5E5E5"> doesn't make sense</font>

433
00:20:27,190 --> 00:20:33,160
<font color="#E5E5E5">to do that like if you know that</font><font color="#CCCCCC"> this</font>

434
00:20:30,070 --> 00:20:34,960
<font color="#CCCCCC">compression</font><font color="#E5E5E5"> this this naming scheme</font>

435
00:20:33,160 --> 00:20:38,080
relied on you know you'd have<font color="#E5E5E5"> this weird</font>

436
00:20:34,960 --> 00:20:40,059
<font color="#CCCCCC">field name</font><font color="#E5E5E5"> that told you what slot to</font>

437
00:20:38,080 --> 00:20:43,659
look in to find the discriminant<font color="#E5E5E5"> and</font>

438
00:20:40,059 --> 00:20:46,210
then a special name which was<font color="#E5E5E5"> the name</font>

439
00:20:43,660 --> 00:20:48,040
<font color="#CCCCCC">of</font><font color="#E5E5E5"> whatever field</font><font color="#CCCCCC"> god</font><font color="#E5E5E5"> you know just</font>

440
00:20:46,210 --> 00:20:50,770
<font color="#E5E5E5">dropped that doesn't exist anymore like</font>

441
00:20:48,040 --> 00:20:53,129
the no field and that the no variant<font color="#E5E5E5"> in</font>

442
00:20:50,770 --> 00:20:56,168
that that example

443
00:20:53,130 --> 00:20:59,890
<font color="#CCCCCC">nowaday that can sometimes drop more</font>

444
00:20:56,169 --> 00:21:02,679
<font color="#CCCCCC">than one data list variant and so</font>

445
00:20:59,890 --> 00:21:05,590
schemes like<font color="#E5E5E5"> that just start to get</font>

446
00:21:02,679 --> 00:21:08,290
uglier and uglier<font color="#E5E5E5"> so I thought what's</font>

447
00:21:05,590 --> 00:21:10,059
you know let's fix<font color="#CCCCCC"> that you know</font><font color="#E5E5E5"> I've</font>

448
00:21:08,290 --> 00:21:12,250
been<font color="#E5E5E5"> actually focused on something else</font>

449
00:21:10,059 --> 00:21:14,410
<font color="#E5E5E5">and I haven't been working on like just</font>

450
00:21:12,250 --> 00:21:16,059
<font color="#E5E5E5">sort of some of these playing bugs so</font>

451
00:21:14,410 --> 00:21:18,220
much<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna talk about that more</font>

452
00:21:16,059 --> 00:21:20,230
<font color="#E5E5E5">tomorrow at a different talk but I</font>

453
00:21:18,220 --> 00:21:23,919
thought this one's really<font color="#E5E5E5"> timely you</font>

454
00:21:20,230 --> 00:21:25,030
know and how hard can it be<font color="#E5E5E5"> so I found</font>

455
00:21:23,919 --> 00:21:29,200
out there's this thing

456
00:21:25,030 --> 00:21:31,840
DW tag variant and it's it looks<font color="#E5E5E5"> perfect</font>

457
00:21:29,200 --> 00:21:35,500
it's like<font color="#E5E5E5"> it was introduced into dwarf</font>

458
00:21:31,840 --> 00:21:37,389
<font color="#E5E5E5">or Pascal according to dwarf and it</font>

459
00:21:35,500 --> 00:21:39,730
represents the<font color="#E5E5E5"> variant part of a</font><font color="#CCCCCC"> record</font>

460
00:21:37,390 --> 00:21:42,280
<font color="#E5E5E5">now it's a little funny it can only</font>

461
00:21:39,730 --> 00:21:45,400
appear in<font color="#E5E5E5"> the member in a structure so</font>

462
00:21:42,280 --> 00:21:48,899
for rust we'll have to<font color="#CCCCCC"> knit like a dummy</font>

463
00:21:45,400 --> 00:21:51,460
<font color="#CCCCCC">wrapper structure that's empty</font><font color="#E5E5E5"> because</font>

464
00:21:48,900 --> 00:21:53,140
you know there is no<font color="#E5E5E5"> wrapper it's just</font>

465
00:21:51,460 --> 00:21:56,020
that you know<font color="#E5E5E5"> and then it'll have a</font>

466
00:21:53,140 --> 00:21:58,590
variant part that will you<font color="#CCCCCC"> know the</font>

467
00:21:56,020 --> 00:22:00,720
variant can point to

468
00:21:58,590 --> 00:22:03,629
the discriminator<font color="#E5E5E5"> and then it can</font><font color="#CCCCCC"> have a</font>

469
00:22:00,720 --> 00:22:05,280
sequence of variant parts and it can

470
00:22:03,630 --> 00:22:08,550
have a default<font color="#E5E5E5"> variant part which would</font>

471
00:22:05,280 --> 00:22:12,629
fit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> yes/no example perfectly right</font>

472
00:22:08,550 --> 00:22:16,409
<font color="#CCCCCC">no would be</font><font color="#E5E5E5"> a variant part with no</font>

473
00:22:12,630 --> 00:22:19,830
payload no members and a discriminant of

474
00:22:16,410 --> 00:22:22,220
<font color="#E5E5E5">zero and then yes would have like this</font>

475
00:22:19,830 --> 00:22:27,030
string in it<font color="#E5E5E5"> and it would</font><font color="#CCCCCC"> be the default</font>

476
00:22:22,220 --> 00:22:31,890
perfect right<font color="#CCCCCC"> so step</font><font color="#E5E5E5"> one was add this</font>

477
00:22:27,030 --> 00:22:35,040
<font color="#CCCCCC">tail</font><font color="#E5E5E5"> ovm so I did that and I did</font><font color="#CCCCCC"> it in</font>

478
00:22:31,890 --> 00:22:43,380
what I thought<font color="#E5E5E5"> was the</font><font color="#CCCCCC"> obvious way so I</font>

479
00:22:35,040 --> 00:22:46,409
wrote<font color="#E5E5E5"> this patch and I you know I added</font>

480
00:22:43,380 --> 00:22:48,750
it to<font color="#CCCCCC"> LLVM and I added support for that</font>

481
00:22:46,410 --> 00:22:52,920
to the<font color="#CCCCCC"> RUS compiler and then</font><font color="#E5E5E5"> I found out</font>

482
00:22:48,750 --> 00:22:55,770
well gdb doesn't<font color="#E5E5E5"> actually read variant</font>

483
00:22:52,920 --> 00:22:57,480
parts<font color="#E5E5E5"> it just ignores</font><font color="#CCCCCC"> that field</font>

484
00:22:55,770 --> 00:23:01,350
entirely so if it's in there it's just

485
00:22:57,480 --> 00:23:06,750
<font color="#E5E5E5">completely skipped in fact</font><font color="#CCCCCC"> ll DB also</font>

486
00:23:01,350 --> 00:23:08,129
doesn't read variant parts<font color="#E5E5E5"> nothing reads</font>

487
00:23:06,750 --> 00:23:10,770
variant parts and then I thought well

488
00:23:08,130 --> 00:23:14,220
does anything<font color="#E5E5E5"> actually like make variant</font>

489
00:23:10,770 --> 00:23:15,330
parts so I went<font color="#CCCCCC"> to look to see what</font>

490
00:23:14,220 --> 00:23:18,450
makes<font color="#E5E5E5"> for any parts I thought well maybe</font>

491
00:23:15,330 --> 00:23:20,399
<font color="#E5E5E5">there's a Pascal compiler I I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know</font>

492
00:23:18,450 --> 00:23:25,260
you can you can<font color="#E5E5E5"> barely even find a</font>

493
00:23:20,400 --> 00:23:27,660
<font color="#E5E5E5">Pascal compiler anymore and I looked</font>

494
00:23:25,260 --> 00:23:30,780
<font color="#E5E5E5">through GCC GCC generates</font><font color="#CCCCCC"> variant</font><font color="#E5E5E5"> parts</font>

495
00:23:27,660 --> 00:23:32,550
I'm like yes<font color="#CCCCCC"> you know it</font><font color="#E5E5E5"> does something</font>

496
00:23:30,780 --> 00:23:35,010
<font color="#E5E5E5">I can see what they</font><font color="#CCCCCC"> look like</font>

497
00:23:32,550 --> 00:23:37,590
well except it doesn't<font color="#CCCCCC"> really what it</font>

498
00:23:35,010 --> 00:23:41,010
<font color="#E5E5E5">does is they're in there for</font><font color="#CCCCCC"> ADA</font>

499
00:23:37,590 --> 00:23:44,240
who knows<font color="#CCCCCC"> ADA oh man</font>

500
00:23:41,010 --> 00:23:48,780
<font color="#E5E5E5">where were you guys like two months ago</font>

501
00:23:44,240 --> 00:23:50,370
<font color="#E5E5E5">know what I did was what I did was I</font>

502
00:23:48,780 --> 00:23:53,070
wrote<font color="#CCCCCC"> to someone I know who works at a</font>

503
00:23:50,370 --> 00:23:55,169
decor to say how do<font color="#E5E5E5"> I even make this</font>

504
00:23:53,070 --> 00:23:57,840
work and he said<font color="#CCCCCC"> well you know because</font>

505
00:23:55,170 --> 00:24:00,440
the ADA compiler doesn't generally use

506
00:23:57,840 --> 00:24:04,439
dwarf for all of its constructs which is

507
00:24:00,440 --> 00:24:06,660
who even knew<font color="#CCCCCC"> that remember that thing</font>

508
00:24:04,440 --> 00:24:09,810
<font color="#E5E5E5">about like crazy field names the ADA</font>

509
00:24:06,660 --> 00:24:10,570
compiler like<font color="#E5E5E5"> weaponized that like</font>

510
00:24:09,810 --> 00:24:16,570
that's

511
00:24:10,570 --> 00:24:19,779
it does<font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> he told</font><font color="#E5E5E5"> me he gave me</font><font color="#CCCCCC"> an</font>

512
00:24:16,570 --> 00:24:22,269
<font color="#E5E5E5">ADA program to show me how it works so I</font>

513
00:24:19,779 --> 00:24:24,730
run this I run the<font color="#E5E5E5"> ADA compiler on it</font>

514
00:24:22,269 --> 00:24:26,169
and I<font color="#E5E5E5"> get this nice</font><font color="#CCCCCC"> Dorf output and I'm</font>

515
00:24:24,730 --> 00:24:28,899
looking at<font color="#E5E5E5"> it I'm like</font><font color="#CCCCCC"> this is perfect</font>

516
00:24:26,169 --> 00:24:32,139
<font color="#CCCCCC">because</font><font color="#E5E5E5"> it's exactly what I</font><font color="#CCCCCC"> wrote for</font>

517
00:24:28,899 --> 00:24:36,428
<font color="#CCCCCC">LLVM</font><font color="#E5E5E5"> it works</font><font color="#CCCCCC"> the same way so I'm</font><font color="#E5E5E5"> very</font>

518
00:24:32,139 --> 00:24:38,860
<font color="#E5E5E5">happy</font><font color="#CCCCCC"> and I wrote like some code in gdb</font>

519
00:24:36,429 --> 00:24:40,389
<font color="#E5E5E5">to make it work because you know when I</font>

520
00:24:38,860 --> 00:24:43,840
do this I<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to test it end to end</font>

521
00:24:40,389 --> 00:24:44,860
before I start<font color="#E5E5E5"> sending stuff right so I</font>

522
00:24:43,840 --> 00:24:47,769
make it<font color="#E5E5E5"> all work</font>

523
00:24:44,860 --> 00:24:49,959
I send my<font color="#CCCCCC"> LOV M patch and the very first</font>

524
00:24:47,769 --> 00:24:52,990
<font color="#CCCCCC">review is</font><font color="#E5E5E5"> well you know this looks</font>

525
00:24:49,960 --> 00:24:56,200
<font color="#E5E5E5">pretty good except um the dwarf standard</font>

526
00:24:52,990 --> 00:24:58,450
says<font color="#E5E5E5"> this all works a different way like</font>

527
00:24:56,200 --> 00:25:00,039
you're<font color="#E5E5E5"> completely wrong</font><font color="#CCCCCC"> and I went and</font>

528
00:24:58,450 --> 00:25:04,509
reread<font color="#E5E5E5"> the dwarf standard and that's</font>

529
00:25:00,039 --> 00:25:06,158
<font color="#E5E5E5">exactly what happened I thought well you</font>

530
00:25:04,509 --> 00:25:07,629
know<font color="#E5E5E5"> you have this variant part and</font>

531
00:25:06,159 --> 00:25:09,610
somewhere in the variant is a

532
00:25:07,629 --> 00:25:12,219
discriminant<font color="#E5E5E5"> a discriminator right at</font>

533
00:25:09,610 --> 00:25:15,340
some field<font color="#E5E5E5"> that has some bits in it that</font>

534
00:25:12,220 --> 00:25:19,470
tells<font color="#E5E5E5"> you which other fields are active</font>

535
00:25:15,340 --> 00:25:22,090
well I thought well surely<font color="#CCCCCC"> that goes in</font>

536
00:25:19,470 --> 00:25:24,879
that's a fixed<font color="#CCCCCC"> part it goes in the</font>

537
00:25:22,090 --> 00:25:27,879
record<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> it goes outside</font><font color="#E5E5E5"> and then</font>

538
00:25:24,879 --> 00:25:30,879
that is the variant points to it well<font color="#E5E5E5"> no</font>

539
00:25:27,879 --> 00:25:32,590
in<font color="#CCCCCC"> dwarf the discriminator is part of</font>

540
00:25:30,879 --> 00:25:34,600
<font color="#E5E5E5">the</font><font color="#CCCCCC"> variance somehow which to me like</font>

541
00:25:32,590 --> 00:25:37,000
didn't make any logical sense<font color="#E5E5E5"> but I</font>

542
00:25:34,600 --> 00:25:40,120
don't care<font color="#E5E5E5"> but it turns out that you</font>

543
00:25:37,000 --> 00:25:42,399
know this is as part<font color="#E5E5E5"> of dwarf where no</font>

544
00:25:40,120 --> 00:25:47,289
debugger reads it and all the known

545
00:25:42,399 --> 00:25:49,600
implementations do the wrong thing<font color="#E5E5E5"> and I</font>

546
00:25:47,289 --> 00:25:51,580
started<font color="#CCCCCC"> searching for it</font><font color="#E5E5E5"> and I found a</font>

547
00:25:49,600 --> 00:25:54,908
<font color="#E5E5E5">discussion on the dwarf standard list</font>

548
00:25:51,580 --> 00:25:57,699
<font color="#E5E5E5">from like 2005 which arrived at the same</font>

549
00:25:54,909 --> 00:26:01,210
conclusion<font color="#E5E5E5"> that we should do it the</font>

550
00:25:57,700 --> 00:26:06,000
wrong way<font color="#CCCCCC"> so yeah yeah oops</font>

551
00:26:01,210 --> 00:26:06,000
you know so

552
00:26:06,100 --> 00:26:14,469
I'm sorry<font color="#E5E5E5"> fix the standard yeah well you</font>

553
00:26:10,450 --> 00:26:19,000
know<font color="#E5E5E5"> that's um yeah well we'll get there</font>

554
00:26:14,470 --> 00:26:20,320
in<font color="#CCCCCC"> a second I agree and I mean this one</font>

555
00:26:19,000 --> 00:26:22,690
actually<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> care you know</font><font color="#CCCCCC"> what</font>

556
00:26:20,320 --> 00:26:25,270
wherever it is it's fine<font color="#E5E5E5"> because this is</font>

557
00:26:22,690 --> 00:26:27,850
one of<font color="#CCCCCC"> these things where it's like rust</font>

558
00:26:25,270 --> 00:26:31,120
works the way it works<font color="#CCCCCC"> the expression of</font>

559
00:26:27,850 --> 00:26:34,659
it in<font color="#CCCCCC"> Dwarf isn't super important you</font>

560
00:26:31,120 --> 00:26:39,219
<font color="#CCCCCC">know like is that member here or is</font><font color="#E5E5E5"> it</font>

561
00:26:34,660 --> 00:26:41,530
here<font color="#CCCCCC"> the</font><font color="#E5E5E5"> debugger is gonna cope either</font>

562
00:26:39,220 --> 00:26:42,580
way you know<font color="#E5E5E5"> because the debuggers have</font>

563
00:26:41,530 --> 00:26:47,470
to know a certain<font color="#E5E5E5"> amount about the</font>

564
00:26:42,580 --> 00:26:49,840
<font color="#E5E5E5">language they're reading anyway but what</font>

565
00:26:47,470 --> 00:26:51,640
happened was I you know I got a<font color="#E5E5E5"> review</font>

566
00:26:49,840 --> 00:26:54,280
from<font color="#CCCCCC"> LLVM pointing this out and</font><font color="#E5E5E5"> I'm like</font>

567
00:26:51,640 --> 00:26:57,280
well you know you're<font color="#CCCCCC"> completely</font><font color="#E5E5E5"> right</font>

568
00:26:54,280 --> 00:27:00,100
it's depressing<font color="#E5E5E5"> it's not the first</font>

569
00:26:57,280 --> 00:27:02,168
mistake I've made<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> Andreas's</font>

570
00:27:00,100 --> 00:27:10,719
<font color="#E5E5E5">talk was basically a list of like bugs I</font>

571
00:27:02,169 --> 00:27:12,100
wrote so<font color="#E5E5E5"> no it's totally true but so I</font>

572
00:27:10,720 --> 00:27:13,510
thought well<font color="#E5E5E5"> you know maybe the</font><font color="#CCCCCC"> AIDA</font>

573
00:27:12,100 --> 00:27:17,320
guys know<font color="#E5E5E5"> something I don't</font>

574
00:27:13,510 --> 00:27:19,629
so you know I send email to my<font color="#CCCCCC"> aide a</font>

575
00:27:17,320 --> 00:27:22,059
friend who sends it to someone the guy

576
00:27:19,630 --> 00:27:25,090
who actually wrote<font color="#CCCCCC"> that code in GCC</font><font color="#E5E5E5"> and</font>

577
00:27:22,059 --> 00:27:27,220
I filed<font color="#E5E5E5"> a bug and GCC to track it and</font>

578
00:27:25,090 --> 00:27:29,830
then he comments on<font color="#E5E5E5"> the bug and he he</font>

579
00:27:27,220 --> 00:27:31,299
agreed let's<font color="#E5E5E5"> try to fix the standard or</font>

580
00:27:29,830 --> 00:27:33,250
at least get<font color="#CCCCCC"> some clarification because</font>

581
00:27:31,299 --> 00:27:37,030
<font color="#E5E5E5">it doesn't quite make</font><font color="#CCCCCC"> sense to</font><font color="#E5E5E5"> us you</font>

582
00:27:33,250 --> 00:27:40,059
know so he files a dwarf bug<font color="#E5E5E5"> and you</font>

583
00:27:37,030 --> 00:27:44,639
<font color="#CCCCCC">know</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> weeks later it shows up on</font>

584
00:27:40,059 --> 00:27:46,990
<font color="#E5E5E5">the dwarf web page you know say what</font>

585
00:27:44,640 --> 00:27:51,340
<font color="#E5E5E5">yeah that's that's fast</font>

586
00:27:46,990 --> 00:27:55,390
exactly so and this kind of all this you

587
00:27:51,340 --> 00:27:57,189
know<font color="#E5E5E5"> leads me into the next thing I want</font>

588
00:27:55,390 --> 00:28:00,460
<font color="#CCCCCC">to talk about which is</font><font color="#E5E5E5"> coordination you</font>

589
00:27:57,190 --> 00:28:04,750
know like this<font color="#E5E5E5"> process is terrible</font><font color="#CCCCCC"> like</font>

590
00:28:00,460 --> 00:28:07,600
it shouldn't<font color="#E5E5E5"> rely on me sending email to</font>

591
00:28:04,750 --> 00:28:11,490
<font color="#CCCCCC">someone and having</font><font color="#E5E5E5"> like three side</font>

592
00:28:07,600 --> 00:28:13,959
discussions<font color="#CCCCCC"> while</font><font color="#E5E5E5"> we agree how</font><font color="#CCCCCC"> to</font>

593
00:28:11,490 --> 00:28:15,970
<font color="#CCCCCC">compilers and</font><font color="#E5E5E5"> to debuggers should be</font>

594
00:28:13,960 --> 00:28:17,950
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> interoperate right</font>

595
00:28:15,970 --> 00:28:21,600
that's what dwarf is for

596
00:28:17,950 --> 00:28:26,170
however in<font color="#CCCCCC"> that discussion you know</font>

597
00:28:21,600 --> 00:28:28,060
everyone involved said hey maybe someone

598
00:28:26,170 --> 00:28:32,290
else<font color="#E5E5E5"> should bring this up on</font><font color="#CCCCCC"> the dwarf</font>

599
00:28:28,060 --> 00:28:35,169
<font color="#CCCCCC">discus list yeah yeah</font><font color="#E5E5E5"> well why did they</font>

600
00:28:32,290 --> 00:28:38,320
<font color="#E5E5E5">say that you know I mean the</font><font color="#CCCCCC"> reason is</font>

601
00:28:35,170 --> 00:28:40,390
the reason<font color="#CCCCCC"> is if you send a</font><font color="#E5E5E5"> message</font><font color="#CCCCCC"> to</font>

602
00:28:38,320 --> 00:28:41,980
<font color="#E5E5E5">dwarf</font><font color="#CCCCCC"> discus usually what you get is a</font>

603
00:28:40,390 --> 00:28:43,810
message saying well you should file a

604
00:28:41,980 --> 00:28:51,750
bug<font color="#E5E5E5"> and please don't discuss it here</font>

605
00:28:43,810 --> 00:28:54,790
it's like<font color="#E5E5E5"> dwarf please don't discuss and</font>

606
00:28:51,750 --> 00:28:58,840
but then you file a bug and it's you

607
00:28:54,790 --> 00:29:02,620
<font color="#E5E5E5">know like that bug it was weeks before</font>

608
00:28:58,840 --> 00:29:04,510
it's even<font color="#CCCCCC"> visible and you know filing a</font>

609
00:29:02,620 --> 00:29:07,750
bug<font color="#E5E5E5"> like that is what you're saying is</font>

610
00:29:04,510 --> 00:29:10,480
I've I<font color="#E5E5E5"> think I found a problem with my</font>

611
00:29:07,750 --> 00:29:12,820
with this<font color="#E5E5E5"> project I'm working on</font><font color="#CCCCCC"> you</font>

612
00:29:10,480 --> 00:29:15,430
know like<font color="#E5E5E5"> I'm deep into writing this</font>

613
00:29:12,820 --> 00:29:18,730
patch<font color="#CCCCCC"> and I'm trying</font><font color="#E5E5E5"> to fix the debug</font>

614
00:29:15,430 --> 00:29:22,540
information<font color="#E5E5E5"> for my compiler and I would</font>

615
00:29:18,730 --> 00:29:24,310
like to<font color="#E5E5E5"> now completely not participate</font>

616
00:29:22,540 --> 00:29:27,129
in the<font color="#CCCCCC"> resolution of this and please get</font>

617
00:29:24,310 --> 00:29:29,440
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> me in a few months so</font><font color="#CCCCCC"> that I can</font>

618
00:29:27,130 --> 00:29:32,470
continue<font color="#E5E5E5"> on like that's</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's how</font>

619
00:29:29,440 --> 00:29:34,660
the<font color="#CCCCCC"> process actually works that is not a</font>

620
00:29:32,470 --> 00:29:38,080
good way<font color="#E5E5E5"> for it to work and it can work</font>

621
00:29:34,660 --> 00:29:42,160
<font color="#E5E5E5">better</font><font color="#CCCCCC"> you know so what</font><font color="#E5E5E5"> I would like</font><font color="#CCCCCC"> to</font>

622
00:29:38,080 --> 00:29:44,050
propose<font color="#E5E5E5"> you know is since dwarf is the</font>

623
00:29:42,160 --> 00:29:47,590
logical clearinghouse<font color="#CCCCCC"> for these kinds of</font>

624
00:29:44,050 --> 00:29:53,290
<font color="#E5E5E5">things we</font><font color="#CCCCCC"> should like resurrect dwarf</font>

625
00:29:47,590 --> 00:29:55,080
discuss like not<font color="#E5E5E5"> not let things get</font>

626
00:29:53,290 --> 00:29:59,139
pushed<font color="#E5E5E5"> into the bug tracker right away</font>

627
00:29:55,080 --> 00:30:02,199
and ideally you know<font color="#E5E5E5"> I what I would like</font>

628
00:29:59,140 --> 00:30:07,600
<font color="#E5E5E5">to see is dwarf development be more open</font>

629
00:30:02,200 --> 00:30:09,520
<font color="#CCCCCC">like</font><font color="#E5E5E5"> you know plenty of projects are on</font>

630
00:30:07,600 --> 00:30:14,439
github<font color="#CCCCCC"> I know some people</font><font color="#E5E5E5"> don't like</font>

631
00:30:09,520 --> 00:30:16,960
github<font color="#E5E5E5"> but there's other options but you</font>

632
00:30:14,440 --> 00:30:19,570
know if you file a bug<font color="#CCCCCC"> there's no reason</font>

633
00:30:16,960 --> 00:30:22,750
for<font color="#E5E5E5"> it</font><font color="#CCCCCC"> not to show up right away</font><font color="#E5E5E5"> for it</font>

634
00:30:19,570 --> 00:30:25,090
<font color="#E5E5E5">to be easy</font><font color="#CCCCCC"> to comment on to track you</font>

635
00:30:22,750 --> 00:30:27,280
know<font color="#E5E5E5"> dwarf could accept pull requests</font>

636
00:30:25,090 --> 00:30:29,949
why not you know it's not like<font color="#CCCCCC"> that's</font>

637
00:30:27,280 --> 00:30:33,490
gonna poison<font color="#E5E5E5"> it somehow yeah</font>

638
00:30:29,950 --> 00:30:36,760
so but<font color="#CCCCCC"> what</font><font color="#E5E5E5"> doesn't want to work that</font>

639
00:30:33,490 --> 00:30:38,980
way<font color="#E5E5E5"> but it should</font><font color="#CCCCCC"> work that</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> who is</font>

640
00:30:36,760 --> 00:30:42,850
work who is<font color="#E5E5E5"> dwarf what I'm talking about</font>

641
00:30:38,980 --> 00:30:45,430
is<font color="#CCCCCC"> like right here you know like</font><font color="#E5E5E5"> in this</font>

642
00:30:42,850 --> 00:30:52,449
particular<font color="#E5E5E5"> variant problem right it's</font>

643
00:30:45,430 --> 00:30:55,390
like people<font color="#E5E5E5"> who work on you know the</font>

644
00:30:52,450 --> 00:30:58,150
flagship<font color="#E5E5E5"> free software compilers and</font>

645
00:30:55,390 --> 00:31:00,640
debuggers<font color="#E5E5E5"> and we have to coordinate by</font>

646
00:30:58,150 --> 00:31:03,850
privately sending email and commenting

647
00:31:00,640 --> 00:31:05,860
on some GCC bug or writing a<font color="#E5E5E5"> comment in</font>

648
00:31:03,850 --> 00:31:08,620
the LLVM source<font color="#E5E5E5"> that's not a good way to</font>

649
00:31:05,860 --> 00:31:22,629
<font color="#E5E5E5">work what may not</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> work that way</font>

650
00:31:08,620 --> 00:31:25,510
quiet this is<font color="#CCCCCC"> okay we have</font><font color="#E5E5E5"> something</font>

651
00:31:22,630 --> 00:31:32,560
different<font color="#CCCCCC"> we add something to the</font><font color="#E5E5E5"> new</font>

652
00:31:25,510 --> 00:31:36,820
<font color="#CCCCCC">interface</font><font color="#E5E5E5"> we work it out</font><font color="#CCCCCC"> exchanger you</font>

653
00:31:32,560 --> 00:31:39,520
see we<font color="#E5E5E5"> documented</font><font color="#CCCCCC"> yeah and once</font>

654
00:31:36,820 --> 00:31:44,260
everything works<font color="#CCCCCC"> send it up to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bar</font>

655
00:31:39,520 --> 00:31:46,150
<font color="#E5E5E5">come</font><font color="#CCCCCC"> ATM yeah well</font><font color="#E5E5E5"> what let me lit so</font>

656
00:31:44,260 --> 00:31:47,800
this last one constant assignment

657
00:31:46,150 --> 00:31:50,380
<font color="#E5E5E5">remember way back</font><font color="#CCCCCC"> I was talking about</font>

658
00:31:47,800 --> 00:31:52,960
like<font color="#E5E5E5"> tuples and tuple struts and how I'd</font>

659
00:31:50,380 --> 00:31:55,660
like you know some<font color="#E5E5E5"> kind of new tag like</font>

660
00:31:52,960 --> 00:31:59,740
DW tag tuple type or<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> that</font>

661
00:31:55,660 --> 00:32:03,550
well<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know and</font><font color="#CCCCCC"> NORC mentioned this in</font>

662
00:31:59,740 --> 00:32:06,040
the<font color="#E5E5E5"> last talk dwarf has a vendor space I</font>

663
00:32:03,550 --> 00:32:08,409
could<font color="#CCCCCC"> add a vendor tag right but what</font>

664
00:32:06,040 --> 00:32:11,350
<font color="#E5E5E5">that means</font><font color="#CCCCCC"> is I had a vendor tag to</font><font color="#E5E5E5"> LLVM</font>

665
00:32:08,410 --> 00:32:15,490
and I add it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> RUS compiler and I</font>

666
00:32:11,350 --> 00:32:18,490
add<font color="#E5E5E5"> it to gdb and I add it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> ll</font><font color="#CCCCCC"> DB then</font>

667
00:32:15,490 --> 00:32:20,860
<font color="#E5E5E5">we ship all that stuff right and then</font>

668
00:32:18,490 --> 00:32:22,630
there's executables out in the wild and

669
00:32:20,860 --> 00:32:25,840
different versions<font color="#CCCCCC"> of the rest compiler</font>

670
00:32:22,630 --> 00:32:28,270
for years<font color="#E5E5E5"> then in a few years like three</font>

671
00:32:25,840 --> 00:32:32,590
years<font color="#CCCCCC"> from</font><font color="#E5E5E5"> now the next version of dwarf</font>

672
00:32:28,270 --> 00:32:37,060
comes out and it blesses DW tag tuple

673
00:32:32,590 --> 00:32:39,490
type so now I go<font color="#CCCCCC"> back and I add support</font>

674
00:32:37,060 --> 00:32:41,200
<font color="#CCCCCC">for both tags</font><font color="#E5E5E5"> you know like the</font>

675
00:32:39,490 --> 00:32:43,330
compilers can<font color="#E5E5E5"> just flip the switch</font>

676
00:32:41,200 --> 00:32:45,250
<font color="#CCCCCC">although sometimes compilers don't like</font>

677
00:32:43,330 --> 00:32:47,530
to flip the<font color="#E5E5E5"> switch</font><font color="#CCCCCC"> they're like gosh I</font>

678
00:32:45,250 --> 00:32:50,830
don't<font color="#CCCCCC"> really want a debugger upgrade for</font>

679
00:32:47,530 --> 00:32:52,990
this tiny<font color="#CCCCCC"> thing can you add it now</font><font color="#E5E5E5"> with</font>

680
00:32:50,830 --> 00:32:55,090
a flag and then in a year<font color="#CCCCCC"> you're allowed</font>

681
00:32:52,990 --> 00:32:57,040
to flip the<font color="#E5E5E5"> switch</font><font color="#CCCCCC"> you know and then the</font>

682
00:32:55,090 --> 00:32:59,500
debuggers have to read both versions for

683
00:32:57,040 --> 00:33:02,920
all<font color="#E5E5E5"> time and what that means is you take</font>

684
00:32:59,500 --> 00:33:05,590
something very<font color="#E5E5E5"> simple because do that DW</font>

685
00:33:02,920 --> 00:33:07,300
<font color="#E5E5E5">tag tuple type you some of the things</font>

686
00:33:05,590 --> 00:33:09,639
<font color="#E5E5E5">that go into door for complicated and</font>

687
00:33:07,300 --> 00:33:12,460
it's good to have<font color="#E5E5E5"> a proof of concept in</font>

688
00:33:09,640 --> 00:33:13,870
an RFC<font color="#CCCCCC"> and all that stuff but</font><font color="#E5E5E5"> some of</font>

689
00:33:12,460 --> 00:33:18,060
them<font color="#E5E5E5"> this is we're talking about a</font>

690
00:33:13,870 --> 00:33:21,070
constant which is like necessary and

691
00:33:18,060 --> 00:33:22,690
simple and we're<font color="#E5E5E5"> talking about doubling</font>

692
00:33:21,070 --> 00:33:25,330
<font color="#E5E5E5">the</font><font color="#CCCCCC"> amount of work</font><font color="#E5E5E5"> and spreading it over</font>

693
00:33:22,690 --> 00:33:28,690
<font color="#E5E5E5">the course of a few years instead</font><font color="#CCCCCC"> of</font>

694
00:33:25,330 --> 00:33:32,530
<font color="#CCCCCC">saying</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> you can have the</font>

695
00:33:28,690 --> 00:33:34,750
constant 173 today that's what we're

696
00:33:32,530 --> 00:33:39,700
talking about<font color="#CCCCCC"> so I think it's absurd</font><font color="#E5E5E5"> you</font>

697
00:33:34,750 --> 00:33:41,320
know<font color="#E5E5E5"> yeah so anyway this is what I this</font>

698
00:33:39,700 --> 00:33:44,590
is what I want to<font color="#CCCCCC"> see</font><font color="#E5E5E5"> I don't actually</font>

699
00:33:41,320 --> 00:33:47,169
know<font color="#E5E5E5"> how to get here</font><font color="#CCCCCC"> you know like I'm</font>

700
00:33:44,590 --> 00:33:50,590
not<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the dwarf committee I could be if</font>

701
00:33:47,170 --> 00:33:54,820
<font color="#CCCCCC">that was that possible is it possible I</font>

702
00:33:50,590 --> 00:33:59,320
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> and if it could lead to a</font>

703
00:33:54,820 --> 00:34:00,970
better<font color="#E5E5E5"> outcome</font><font color="#CCCCCC"> you know like</font><font color="#E5E5E5"> I don't</font>

704
00:33:59,320 --> 00:34:02,980
want<font color="#E5E5E5"> to be on a committee or you know</font>

705
00:34:00,970 --> 00:34:04,660
like I don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> about you</font><font color="#E5E5E5"> but I don't</font>

706
00:34:02,980 --> 00:34:06,490
<font color="#E5E5E5">think it's good to join a committee just</font>

707
00:34:04,660 --> 00:34:10,240
to be on<font color="#CCCCCC"> the inside track to get things</font>

708
00:34:06,490 --> 00:34:17,130
done<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> that's part of the</font><font color="#CCCCCC"> problem</font>

709
00:34:10,239 --> 00:34:17,129
right<font color="#CCCCCC"> so yeah anyway</font>

710
00:34:25,250 --> 00:34:31,100
<font color="#E5E5E5">but I learned that it</font><font color="#CCCCCC"> doesn't work that</font>

711
00:34:28,860 --> 00:34:31,100
<font color="#CCCCCC">way</font>

712
00:34:33,620 --> 00:34:40,529
<font color="#E5E5E5">you know yeah I mean</font><font color="#CCCCCC"> you know I accept</font>

713
00:34:38,219 --> 00:34:43,589
it<font color="#CCCCCC"> it is how it that is actually how it</font>

714
00:34:40,530 --> 00:34:46,920
is right<font color="#E5E5E5"> but I don't think it's how it</font>

715
00:34:43,590 --> 00:35:10,350
should continue<font color="#CCCCCC"> to be or you</font><font color="#E5E5E5"> know yeah</font>

716
00:34:46,920 --> 00:35:13,770
so we<font color="#CCCCCC"> could pork we</font><font color="#E5E5E5"> can we</font><font color="#CCCCCC"> can get some</font>

717
00:35:10,350 --> 00:35:17,540
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> how can I turn that positively get</font>

718
00:35:13,770 --> 00:35:17,540
some incentive<font color="#E5E5E5"> to do so</font>

719
00:35:17,750 --> 00:35:24,000
compilers debuggers communities get

720
00:35:21,960 --> 00:35:29,090
together yeah rather than<font color="#E5E5E5"> having their</font>

721
00:35:24,000 --> 00:35:33,030
owner<font color="#CCCCCC"> vendor space right under space</font>

722
00:35:29,090 --> 00:35:35,630
<font color="#E5E5E5">like you</font><font color="#CCCCCC"> know that's that's an</font>

723
00:35:33,030 --> 00:35:35,630
interesting idea

724
00:35:37,080 --> 00:35:40,270
[Music]

725
00:35:45,980 --> 00:35:54,960
yeah<font color="#E5E5E5"> that still has this people kid</font>

726
00:35:52,560 --> 00:35:56,700
problem<font color="#CCCCCC"> you know and it's</font><font color="#E5E5E5"> not like</font><font color="#CCCCCC"> these</font>

727
00:35:54,960 --> 00:35:58,920
patches are huge or something<font color="#CCCCCC"> you know I</font>

728
00:35:56,700 --> 00:36:01,919
don't want<font color="#E5E5E5"> to oversell it but it's time</font>

729
00:35:58,920 --> 00:36:07,440
<font color="#E5E5E5">you know I mean we all went through this</font>

730
00:36:01,920 --> 00:36:10,490
vendor yeah right you know yeah exactly

731
00:36:07,440 --> 00:36:20,980
if they<font color="#E5E5E5"> don't want to change</font>

732
00:36:10,490 --> 00:36:24,290
<font color="#CCCCCC">hey Brad yeah yeah</font><font color="#E5E5E5"> you know anyway so I</font>

733
00:36:20,980 --> 00:36:27,170
am planning<font color="#E5E5E5"> to add some extensions for</font>

734
00:36:24,290 --> 00:36:29,509
rust and I would like to document<font color="#CCCCCC"> like</font>

735
00:36:27,170 --> 00:36:34,160
this<font color="#CCCCCC"> vtable</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> you know I think it's</font>

736
00:36:29,510 --> 00:36:36,590
<font color="#E5E5E5">something C++ should do as well</font><font color="#CCCCCC"> but you</font>

737
00:36:34,160 --> 00:36:43,118
know and I mean<font color="#CCCCCC"> I will file the bugs or</font>

738
00:36:36,590 --> 00:36:46,070
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> I just wish it was less like</font>

739
00:36:43,119 --> 00:36:48,520
you know that it was more<font color="#CCCCCC"> streamlined</font>

740
00:36:46,070 --> 00:36:52,630
that<font color="#CCCCCC"> I could</font><font color="#E5E5E5"> get DW</font><font color="#CCCCCC"> tagged</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> poll</font>

741
00:36:48,520 --> 00:36:57,950
tomorrow instead<font color="#CCCCCC"> of in 2020 you know</font>

742
00:36:52,630 --> 00:37:10,790
yeah so<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> any other</font><font color="#CCCCCC"> questions I</font>

743
00:36:57,950 --> 00:37:15,520
come like pretty<font color="#E5E5E5"> much out of time right</font>

744
00:37:10,790 --> 00:37:15,520
<font color="#CCCCCC">you don't know they can be anything</font>

745
00:37:21,200 --> 00:37:28,839
I read his paper but I haven't<font color="#E5E5E5"> seen like</font>

746
00:37:24,350 --> 00:37:28,839
his door proposal or anything like that

747
00:37:29,320 --> 00:37:36,740
if you see because<font color="#CCCCCC"> I I</font><font color="#E5E5E5"> think it's it</font>

748
00:37:33,859 --> 00:37:38,690
depends<font color="#E5E5E5"> on if you see macros</font><font color="#CCCCCC"> or</font>

749
00:37:36,740 --> 00:37:44,959
<font color="#E5E5E5">functions which gets optimized</font>

750
00:37:38,690 --> 00:37:47,260
<font color="#E5E5E5">differently or statements</font><font color="#CCCCCC"> well there can</font>

751
00:37:44,960 --> 00:37:55,609
be<font color="#E5E5E5"> either one depending on the macro</font>

752
00:37:47,260 --> 00:37:56,460
yeah<font color="#CCCCCC"> yeah okay</font>

753
00:37:55,609 --> 00:37:59,339
see you

754
00:37:56,460 --> 00:38:07,710
they make sense<font color="#CCCCCC"> as macro from to</font><font color="#E5E5E5"> your</font>

755
00:37:59,339 --> 00:38:11,040
hair like templates we can instantiate

756
00:38:07,710 --> 00:38:13,890
<font color="#E5E5E5">either function so for other stuff right</font>

757
00:38:11,040 --> 00:38:21,420
<font color="#CCCCCC">I mean in the</font><font color="#E5E5E5"> case of poverty matching</font>

758
00:38:13,890 --> 00:38:25,069
<font color="#E5E5E5">stuff to me it looks like when you</font><font color="#CCCCCC"> yeah</font>

759
00:38:21,420 --> 00:38:25,070
<font color="#CCCCCC">I mean alright</font>

760
00:38:26,029 --> 00:38:31,920
all right well thank<font color="#CCCCCC"> you all right thank</font>

761
00:38:30,379 --> 00:38:40,288
<font color="#CCCCCC">you very much</font>

762
00:38:31,920 --> 00:38:40,289
[Applause]

