1
00:00:07,889 --> 00:00:12,610
yes'm

2
00:00:09,250 --> 00:00:15,100
hello<font color="#CCCCCC"> I will join the session about</font><font color="#E5E5E5"> the</font>

3
00:00:12,610 --> 00:00:22,329
<font color="#E5E5E5">tracers so we have moved from a stage</font><font color="#CCCCCC"> of</font>

4
00:00:15,100 --> 00:00:24,490
<font color="#CCCCCC">trace to the</font><font color="#E5E5E5"> trace now yeah how do you</font>

5
00:00:22,329 --> 00:00:26,650
know what the<font color="#E5E5E5"> trace is have you seen it</font>

6
00:00:24,490 --> 00:00:28,829
or has<font color="#E5E5E5"> anyone here some experience with</font>

7
00:00:26,650 --> 00:00:31,829
the trash from<font color="#CCCCCC"> non Linux</font><font color="#E5E5E5"> environment</font>

8
00:00:28,829 --> 00:00:31,829
cool

9
00:00:32,039 --> 00:00:38,789
so briefly introduce the<font color="#CCCCCC"> DTrace itself</font>

10
00:00:34,800 --> 00:00:42,809
<font color="#E5E5E5">because it was</font><font color="#CCCCCC"> first released in 2005</font><font color="#E5E5E5"> it</font>

11
00:00:38,789 --> 00:00:46,589
was<font color="#E5E5E5"> designed for San Suarez at the time</font>

12
00:00:42,809 --> 00:00:50,010
and it was<font color="#CCCCCC"> the</font><font color="#E5E5E5"> answer for performance</font>

13
00:00:46,589 --> 00:00:52,440
<font color="#E5E5E5">and observability</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> system so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

14
00:00:50,010 --> 00:00:57,750
support the customers of of some<font color="#CCCCCC"> servers</font>

15
00:00:52,440 --> 00:01:00,570
<font color="#E5E5E5">and so on today is 2019 and the trace</font>

16
00:00:57,750 --> 00:01:03,600
has been ported<font color="#CCCCCC"> to various operating</font>

17
00:01:00,570 --> 00:01:04,289
systems<font color="#E5E5E5"> so it is now</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> on iPod micro</font>

18
00:01:03,600 --> 00:01:06,600
<font color="#CCCCCC">at 6:00</font>

19
00:01:04,289 --> 00:01:10,940
<font color="#E5E5E5">of course</font><font color="#CCCCCC"> Joanne</font><font color="#E5E5E5"> because it is a fork of</font>

20
00:01:06,600 --> 00:01:14,009
<font color="#E5E5E5">Suarez basically FreeBSD adopted</font><font color="#CCCCCC"> DTrace</font>

21
00:01:10,940 --> 00:01:16,380
we are working the Oracle Linux<font color="#E5E5E5"> it's</font>

22
00:01:14,009 --> 00:01:18,270
working progress<font color="#E5E5E5"> but it's</font><font color="#CCCCCC"> port to Linux</font>

23
00:01:16,380 --> 00:01:24,020
in general<font color="#E5E5E5"> I have also seen some</font>

24
00:01:18,270 --> 00:01:27,780
<font color="#CCCCCC">attempts to develop DTrace for</font><font color="#E5E5E5"> Windows</font>

25
00:01:24,020 --> 00:01:28,399
so yeah so why we need another<font color="#CCCCCC"> linux</font>

26
00:01:27,780 --> 00:01:31,530
<font color="#CCCCCC">racer</font>

27
00:01:28,399 --> 00:01:35,369
well<font color="#E5E5E5"> the idea behind</font><font color="#CCCCCC"> DTrace is it's not</font>

28
00:01:31,530 --> 00:01:38,280
a<font color="#E5E5E5"> linux only tracer so our goal is to</font>

29
00:01:35,369 --> 00:01:39,989
<font color="#E5E5E5">basically add a Linux operating system</font>

30
00:01:38,280 --> 00:01:42,390
to<font color="#E5E5E5"> the family of</font><font color="#CCCCCC"> dtrace supported</font>

31
00:01:39,989 --> 00:01:45,810
operating systems<font color="#E5E5E5"> not just</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> another</font>

32
00:01:42,390 --> 00:01:48,750
just<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> only tracer one strength of</font>

33
00:01:45,810 --> 00:01:51,929
the trace it can trace kernel it can

34
00:01:48,750 --> 00:01:53,729
trace user space tracing happens

35
00:01:51,929 --> 00:01:56,780
<font color="#E5E5E5">directly inside</font><font color="#CCCCCC"> the kernel at the</font><font color="#E5E5E5"> block</font>

36
00:01:53,729 --> 00:01:59,640
time we will talk about this later<font color="#CCCCCC"> and</font>

37
00:01:56,780 --> 00:02:01,739
the traces<font color="#E5E5E5"> its own scripting language is</font>

38
00:01:59,640 --> 00:02:03,810
this called the D it is a basically

39
00:02:01,739 --> 00:02:05,519
superset of C programming language<font color="#CCCCCC"> so</font>

40
00:02:03,810 --> 00:02:08,310
it's very<font color="#E5E5E5"> simple</font>

41
00:02:05,519 --> 00:02:11,340
<font color="#E5E5E5">and it's quite powerful</font><font color="#CCCCCC"> I will show it</font>

42
00:02:08,310 --> 00:02:14,190
on the<font color="#E5E5E5"> examples I have yeah</font><font color="#CCCCCC"> and because</font>

43
00:02:11,340 --> 00:02:16,019
it<font color="#E5E5E5"> was in 2005 we have been using it</font>

44
00:02:14,190 --> 00:02:18,930
that<font color="#E5E5E5"> Sun and all records for about the</font>

45
00:02:16,019 --> 00:02:22,500
decade<font color="#E5E5E5"> to troubleshoot production</font>

46
00:02:18,930 --> 00:02:23,640
machines of our customers and<font color="#E5E5E5"> also</font>

47
00:02:22,500 --> 00:02:25,530
another benefit is<font color="#E5E5E5"> there are a lot of</font>

48
00:02:23,640 --> 00:02:27,750
books<font color="#E5E5E5"> and documents about it is already</font>

49
00:02:25,530 --> 00:02:31,920
so it<font color="#E5E5E5"> is not a new technology</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> new</font>

50
00:02:27,750 --> 00:02:33,659
for Linux so I think one of the key

51
00:02:31,920 --> 00:02:36,149
differentiators is with<font color="#CCCCCC"> dtrace you have</font>

52
00:02:33,659 --> 00:02:37,679
everything<font color="#CCCCCC"> but you need so there is no</font>

53
00:02:36,150 --> 00:02:40,139
<font color="#E5E5E5">need to install external</font><font color="#CCCCCC"> tool chain</font>

54
00:02:37,680 --> 00:02:42,989
compilers<font color="#E5E5E5"> there is no need it does not</font>

55
00:02:40,139 --> 00:02:45,680
produce a kernel modules<font color="#CCCCCC"> unit load so it</font>

56
00:02:42,989 --> 00:02:47,659
is designed to be<font color="#E5E5E5"> used</font><font color="#CCCCCC"> in animal</font>

57
00:02:45,680 --> 00:02:49,129
for example you need<font color="#E5E5E5"> to sign the kernel</font>

58
00:02:47,659 --> 00:02:53,840
modules which are trusted so you cannot

59
00:02:49,129 --> 00:02:55,909
<font color="#CCCCCC">just load something</font><font color="#E5E5E5"> in the kernel</font><font color="#CCCCCC"> yet so</font>

60
00:02:53,840 --> 00:02:58,549
basically<font color="#E5E5E5"> that's it so I'll briefly</font>

61
00:02:55,909 --> 00:03:01,159
<font color="#E5E5E5">describe some basics of how details</font><font color="#CCCCCC"> work</font>

62
00:02:58,549 --> 00:03:04,219
so from your user perspective<font color="#E5E5E5"> the</font>

63
00:03:01,159 --> 00:03:06,138
<font color="#E5E5E5">workload workflow is similar to EBP F</font>

64
00:03:04,219 --> 00:03:07,969
and BCC kind of tools

65
00:03:06,139 --> 00:03:10,459
well that's because<font color="#E5E5E5"> this is the</font>

66
00:03:07,969 --> 00:03:12,319
predecessor<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those tools</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> write</font>

67
00:03:10,459 --> 00:03:15,530
some<font color="#E5E5E5"> tracing script in the D language</font>

68
00:03:12,319 --> 00:03:18,798
<font color="#E5E5E5">the script gets compiled into a</font><font color="#CCCCCC"> bytecode</font>

69
00:03:15,530 --> 00:03:20,840
<font color="#E5E5E5">which uses</font><font color="#CCCCCC"> DTrace instruction format so</font>

70
00:03:18,799 --> 00:03:24,889
we have internal<font color="#E5E5E5"> machine that interprets</font>

71
00:03:20,840 --> 00:03:27,859
this bytecode before we start

72
00:03:24,889 --> 00:03:29,750
interpreting<font color="#E5E5E5"> anything we verify</font><font color="#CCCCCC"> that the</font>

73
00:03:27,859 --> 00:03:31,730
<font color="#CCCCCC">bytecode is safe because the test was</font>

74
00:03:29,750 --> 00:03:34,639
meant to be run<font color="#CCCCCC"> on</font><font color="#E5E5E5"> production machines</font>

75
00:03:31,730 --> 00:03:36,828
so part<font color="#CCCCCC"> of the protection</font><font color="#E5E5E5"> is the</font>

76
00:03:34,639 --> 00:03:38,719
restriction on the language side so you

77
00:03:36,829 --> 00:03:40,909
cannot use<font color="#E5E5E5"> loops for example</font><font color="#CCCCCC"> to not</font>

78
00:03:38,719 --> 00:03:44,329
<font color="#E5E5E5">create something which will stop CPU for</font>

79
00:03:40,909 --> 00:03:46,608
too<font color="#E5E5E5"> long time and also we verified that</font>

80
00:03:44,329 --> 00:03:48,230
<font color="#CCCCCC">the produce</font><font color="#E5E5E5"> bytecode because someone</font>

81
00:03:46,609 --> 00:03:51,620
<font color="#CCCCCC">else can send something down the kernel</font>

82
00:03:48,230 --> 00:03:53,599
is safe to use<font color="#E5E5E5"> if everything is fine we</font>

83
00:03:51,620 --> 00:03:54,979
<font color="#E5E5E5">basically enable the probes and start</font>

84
00:03:53,599 --> 00:03:57,440
processing<font color="#CCCCCC"> the actions recording the</font>

85
00:03:54,979 --> 00:03:59,629
data to the<font color="#E5E5E5"> tracing buffers and our user</font>

86
00:03:57,440 --> 00:04:02,030
<font color="#E5E5E5">space components perfectly extracts the</font>

87
00:03:59,629 --> 00:04:04,489
data from kernel and father put system

88
00:04:02,030 --> 00:04:05,709
as it's similar<font color="#E5E5E5"> to other traces you have</font>

89
00:04:04,489 --> 00:04:08,479
seen already

90
00:04:05,709 --> 00:04:10,459
so the key<font color="#E5E5E5"> components of the defect</font>

91
00:04:08,479 --> 00:04:12,799
architecture is a<font color="#CCCCCC"> probe</font>

92
00:04:10,459 --> 00:04:15,530
do not make it a decay probe or you

93
00:04:12,799 --> 00:04:18,199
probe<font color="#E5E5E5"> a probe in the trace environment</font>

94
00:04:15,530 --> 00:04:20,060
is<font color="#E5E5E5"> just an event it's identified by</font>

95
00:04:18,199 --> 00:04:21,859
<font color="#E5E5E5">unique</font><font color="#CCCCCC"> to pole which consists from</font>

96
00:04:20,060 --> 00:04:24,470
<font color="#CCCCCC">provide the name module</font><font color="#E5E5E5"> name function</font>

97
00:04:21,858 --> 00:04:27,590
and name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the probe</font><font color="#CCCCCC"> we will get to</font>

98
00:04:24,470 --> 00:04:29,800
this later<font color="#E5E5E5"> so it is quite abstract then</font>

99
00:04:27,590 --> 00:04:32,210
there is<font color="#CCCCCC"> something</font><font color="#E5E5E5"> called provider</font><font color="#CCCCCC"> a</font>

100
00:04:29,800 --> 00:04:36,349
provider is responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> creating</font>

101
00:04:32,210 --> 00:04:38,930
probes<font color="#E5E5E5"> in your system so it knows the</font>

102
00:04:36,349 --> 00:04:40,580
internal logic<font color="#E5E5E5"> the implementation of</font><font color="#CCCCCC"> how</font>

103
00:04:38,930 --> 00:04:42,400
probe should<font color="#E5E5E5"> be fired what does it mean</font>

104
00:04:40,580 --> 00:04:45,500
because our probe does not necessarily

105
00:04:42,400 --> 00:04:48,289
must be tied to instruction stream or

106
00:04:45,500 --> 00:04:50,270
<font color="#CCCCCC">something</font><font color="#E5E5E5"> like this a consumer is the</font>

107
00:04:48,289 --> 00:04:51,949
<font color="#CCCCCC">other part of the architecture that</font>

108
00:04:50,270 --> 00:04:55,310
extracts the<font color="#E5E5E5"> data and process them in</font>

109
00:04:51,949 --> 00:04:57,200
user<font color="#E5E5E5"> space and since down your script</font>

110
00:04:55,310 --> 00:04:59,029
<font color="#E5E5E5">and then there is a framework the</font>

111
00:04:57,200 --> 00:04:59,990
framework is the core component that

112
00:04:59,029 --> 00:05:03,350
<font color="#CCCCCC">basically</font>

113
00:04:59,990 --> 00:05:05,960
everything together<font color="#CCCCCC"> so framework is</font>

114
00:05:03,350 --> 00:05:08,479
responsible for<font color="#E5E5E5"> managing</font><font color="#CCCCCC"> the probes</font><font color="#E5E5E5"> if</font>

115
00:05:05,960 --> 00:05:10,099
you have a multiple<font color="#E5E5E5"> consumers it is</font>

116
00:05:08,479 --> 00:05:12,139
basically subscribing the consumers to

117
00:05:10,100 --> 00:05:18,169
<font color="#CCCCCC">the</font><font color="#E5E5E5"> probes and sense the data through</font>

118
00:05:12,139 --> 00:05:19,940
and yeah that's it<font color="#CCCCCC"> so</font><font color="#E5E5E5"> to give you idea</font>

119
00:05:18,169 --> 00:05:21,979
what the provider is for example<font color="#CCCCCC"> you</font>

120
00:05:19,940 --> 00:05:23,930
<font color="#CCCCCC">have a dtrace provider</font><font color="#E5E5E5"> which is just the</font>

121
00:05:21,979 --> 00:05:26,030
framework<font color="#E5E5E5"> itself there are some three</font>

122
00:05:23,930 --> 00:05:28,400
simple probes<font color="#CCCCCC"> I will show you</font><font color="#E5E5E5"> later how</font>

123
00:05:26,030 --> 00:05:29,840
they are we<font color="#E5E5E5"> have a profile provider</font>

124
00:05:28,400 --> 00:05:31,729
which<font color="#CCCCCC"> is able to</font><font color="#E5E5E5"> create</font><font color="#CCCCCC"> a probe that</font>

125
00:05:29,840 --> 00:05:35,388
fire sporadically on<font color="#E5E5E5"> one</font><font color="#CCCCCC"> or multiple</font>

126
00:05:31,729 --> 00:05:37,669
<font color="#CCCCCC">CPUs we have a SDP providers code</font>

127
00:05:35,389 --> 00:05:40,130
statically defined tracing so you know

128
00:05:37,669 --> 00:05:41,750
it probably<font color="#CCCCCC"> as a equity stress</font><font color="#E5E5E5"> point in</font>

129
00:05:40,130 --> 00:05:43,310
<font color="#E5E5E5">Linux kernel or if you you as a</font>

130
00:05:41,750 --> 00:05:46,070
developer statically<font color="#E5E5E5"> introduced some</font>

131
00:05:43,310 --> 00:05:48,770
point of interest to the code function

132
00:05:46,070 --> 00:05:51,169
<font color="#CCCCCC">bandit racing is similar to pay probes</font>

133
00:05:48,770 --> 00:05:53,299
<font color="#E5E5E5">it basically scans the kernel kernel</font>

134
00:05:51,169 --> 00:05:56,409
modules for possible<font color="#CCCCCC"> instrumental</font>

135
00:05:53,300 --> 00:06:00,560
symbols so to build the probes<font color="#E5E5E5"> out of it</font>

136
00:05:56,410 --> 00:06:02,599
faster provider is now being in the<font color="#E5E5E5"> work</font>

137
00:06:00,560 --> 00:06:05,000
so it allows you<font color="#E5E5E5"> to do the same thing in</font>

138
00:06:02,599 --> 00:06:06,919
the user<font color="#CCCCCC"> space at the moment we support</font>

139
00:06:05,000 --> 00:06:10,250
<font color="#E5E5E5">static instrumentation of user space</font>

140
00:06:06,919 --> 00:06:14,840
binaries but we don't<font color="#E5E5E5"> have an equivalent</font>

141
00:06:10,250 --> 00:06:16,580
<font color="#E5E5E5">of</font><font color="#CCCCCC"> FBT on</font><font color="#E5E5E5"> Linux yet yeah and everything</font>

142
00:06:14,840 --> 00:06:18,888
is<font color="#E5E5E5"> about Cisco so we also have a</font><font color="#CCCCCC"> Cisco</font>

143
00:06:16,580 --> 00:06:20,840
<font color="#E5E5E5">provider that allows you to</font><font color="#CCCCCC"> observe</font><font color="#E5E5E5"> an</font>

144
00:06:18,889 --> 00:06:27,600
instrument Cisco's in the operating

145
00:06:20,840 --> 00:06:28,960
system<font color="#CCCCCC"> so how does it look</font><font color="#E5E5E5"> like from</font>

146
00:06:27,600 --> 00:06:33,650
[Music]

147
00:06:28,960 --> 00:06:35,930
binary or deployment<font color="#CCCCCC"> you need to have a</font>

148
00:06:33,650 --> 00:06:37,909
<font color="#E5E5E5">kernel which is a d3 support because</font><font color="#CCCCCC"> we</font>

149
00:06:35,930 --> 00:06:40,039
need some architecture specific stuff

150
00:06:37,909 --> 00:06:42,919
<font color="#CCCCCC">directly in the kernel and you need a</font>

151
00:06:40,039 --> 00:06:45,110
set<font color="#CCCCCC"> of modules</font><font color="#E5E5E5"> one module is called the</font>

152
00:06:42,919 --> 00:06:47,599
trace is the<font color="#CCCCCC"> framework itself and then</font>

153
00:06:45,110 --> 00:06:49,780
<font color="#CCCCCC">usually a provider is another separate</font>

154
00:06:47,599 --> 00:06:52,820
kernel module which can<font color="#E5E5E5"> be loaded and</font>

155
00:06:49,780 --> 00:06:56,869
and it had some features of<font color="#E5E5E5"> the probes</font>

156
00:06:52,820 --> 00:07:00,639
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the system then</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> Lib</font><font color="#CCCCCC"> DTrace</font>

157
00:06:56,870 --> 00:07:04,430
which<font color="#E5E5E5"> is the core of the user space and</font>

158
00:07:00,639 --> 00:07:07,909
is responsible<font color="#CCCCCC"> for compiling your</font>

159
00:07:04,430 --> 00:07:10,219
<font color="#E5E5E5">scripts and talking to the kernel part</font>

160
00:07:07,909 --> 00:07:13,550
running the<font color="#CCCCCC"> staff extracting the buffers</font>

161
00:07:10,219 --> 00:07:15,710
parsing the records<font color="#E5E5E5"> handling them</font>

162
00:07:13,550 --> 00:07:18,740
then there<font color="#E5E5E5"> is a lip</font><font color="#CCCCCC"> block</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a</font>

163
00:07:15,710 --> 00:07:22,760
basically<font color="#E5E5E5"> broke FS wrapper because it's</font>

164
00:07:18,740 --> 00:07:25,100
supporting player<font color="#E5E5E5"> for</font><font color="#CCCCCC"> de tres so</font><font color="#E5E5E5"> it's</font>

165
00:07:22,760 --> 00:07:27,980
some simplified interface on top<font color="#CCCCCC"> over</font>

166
00:07:25,100 --> 00:07:31,610
<font color="#E5E5E5">proc FS so it can be ported to other</font>

167
00:07:27,980 --> 00:07:35,000
platforms and then<font color="#E5E5E5"> we have a compact</font>

168
00:07:31,610 --> 00:07:38,570
type format<font color="#E5E5E5"> help library I will get back</font>

169
00:07:35,000 --> 00:07:41,360
<font color="#E5E5E5">to this later</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> last thing is</font>

170
00:07:38,570 --> 00:07:43,280
the command<font color="#E5E5E5"> itself you use it is the</font>

171
00:07:41,360 --> 00:07:46,460
<font color="#E5E5E5">consumer but most of the logic happens</font>

172
00:07:43,280 --> 00:07:48,169
in the<font color="#CCCCCC"> Lib DTrace so thanks to</font><font color="#E5E5E5"> this</font>

173
00:07:46,460 --> 00:07:50,120
architecture you<font color="#E5E5E5"> technically can remove</font>

174
00:07:48,170 --> 00:07:52,820
the<font color="#CCCCCC"> D trace command</font><font color="#E5E5E5"> and write your own</font>

175
00:07:50,120 --> 00:07:55,340
command using direct the library<font color="#E5E5E5"> API to</font>

176
00:07:52,820 --> 00:07:59,510
create<font color="#E5E5E5"> your own place</font><font color="#CCCCCC"> or integrate these</font>

177
00:07:55,340 --> 00:08:02,929
<font color="#CCCCCC">rays to your application on unsliced</font><font color="#E5E5E5"> we</font>

178
00:07:59,510 --> 00:08:06,260
used to have a<font color="#CCCCCC"> Java wrapper</font><font color="#E5E5E5"> so you could</font>

179
00:08:02,930 --> 00:08:09,260
<font color="#E5E5E5">basically use the library from Java but</font>

180
00:08:06,260 --> 00:08:10,820
I<font color="#E5E5E5"> think you</font><font color="#CCCCCC"> should be able to get the</font>

181
00:08:09,260 --> 00:08:13,370
trace integrated to other<font color="#CCCCCC"> language</font><font color="#E5E5E5"> like</font>

182
00:08:10,820 --> 00:08:15,260
<font color="#CCCCCC">Python go basically</font><font color="#E5E5E5"> whatever that can</font>

183
00:08:13,370 --> 00:08:17,300
bind<font color="#E5E5E5"> the C language from from your</font>

184
00:08:15,260 --> 00:08:22,550
<font color="#E5E5E5">language not it's not</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> I've tried to</font>

185
00:08:17,300 --> 00:08:25,760
go and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not so easy so yeah finally</font>

186
00:08:22,550 --> 00:08:28,430
<font color="#E5E5E5">we have some project page which is open</font>

187
00:08:25,760 --> 00:08:32,150
<font color="#CCCCCC">source so if you want to</font><font color="#E5E5E5"> see the sources</font>

188
00:08:28,430 --> 00:08:35,480
<font color="#E5E5E5">or state</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the project we try to keep</font>

189
00:08:32,150 --> 00:08:39,679
<font color="#CCCCCC">it updated</font><font color="#E5E5E5"> it's not always the like this</font>

190
00:08:35,480 --> 00:08:44,480
<font color="#CCCCCC">guy</font><font color="#E5E5E5"> taste yeah this is well at least</font>

191
00:08:39,679 --> 00:08:47,030
<font color="#E5E5E5">right at least for now so now let's move</font>

192
00:08:44,480 --> 00:08:49,610
<font color="#CCCCCC">to more</font><font color="#E5E5E5"> interesting part and it's</font>

193
00:08:47,030 --> 00:08:52,880
actually how how you can use the details

194
00:08:49,610 --> 00:08:55,040
how it looks like<font color="#E5E5E5"> so even</font><font color="#CCCCCC"> though that's</font>

195
00:08:52,880 --> 00:08:57,920
<font color="#E5E5E5">not so much time to talk</font><font color="#CCCCCC"> about</font>

196
00:08:55,040 --> 00:08:59,660
<font color="#E5E5E5">architecture in details</font><font color="#CCCCCC"> I try to</font><font color="#E5E5E5"> prepare</font>

197
00:08:57,920 --> 00:09:03,890
some set of<font color="#CCCCCC"> examples so we can see how</font>

198
00:08:59,660 --> 00:09:07,100
how you can use it<font color="#CCCCCC"> in real life</font><font color="#E5E5E5"> or so</font>

199
00:09:03,890 --> 00:09:10,939
the first<font color="#E5E5E5"> thing you need to know is how</font>

200
00:09:07,100 --> 00:09:14,210
the language<font color="#E5E5E5"> looks like so it was</font>

201
00:09:10,940 --> 00:09:17,210
<font color="#E5E5E5">designed to be simple</font><font color="#CCCCCC"> so if you know</font><font color="#E5E5E5"> or</font>

202
00:09:14,210 --> 00:09:21,080
you<font color="#CCCCCC"> basically provide a list of probes</font>

203
00:09:17,210 --> 00:09:22,550
identified by the tuples it can be more

204
00:09:21,080 --> 00:09:24,170
<font color="#CCCCCC">than one Pro because you can share</font>

205
00:09:22,550 --> 00:09:27,050
action blocks with multiple profiling

206
00:09:24,170 --> 00:09:29,829
it's up to you then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a</font>

207
00:09:27,050 --> 00:09:32,510
<font color="#E5E5E5">per decade</font><font color="#CCCCCC"> a predicate is optional</font><font color="#E5E5E5"> and</font>

208
00:09:29,830 --> 00:09:35,270
allows you to<font color="#CCCCCC"> write the expression and</font>

209
00:09:32,510 --> 00:09:36,800
if the expression evaluates to<font color="#CCCCCC"> true the</font>

210
00:09:35,270 --> 00:09:38,810
action block is executed in the car<font color="#E5E5E5"> now</font>

211
00:09:36,800 --> 00:09:41,870
expression is false we just skip it away

212
00:09:38,810 --> 00:09:44,530
so<font color="#CCCCCC"> it's to allow you</font><font color="#E5E5E5"> to quickly filter</font>

213
00:09:41,870 --> 00:09:47,500
out the stuff<font color="#CCCCCC"> just directly</font><font color="#E5E5E5"> when we are</font>

214
00:09:44,530 --> 00:09:50,750
<font color="#E5E5E5">the probe firing point</font>

215
00:09:47,500 --> 00:09:52,640
yeah the<font color="#E5E5E5"> trace actions you will see some</font>

216
00:09:50,750 --> 00:09:54,320
of<font color="#E5E5E5"> them but</font><font color="#CCCCCC"> basically you can work with</font>

217
00:09:52,640 --> 00:09:57,439
<font color="#E5E5E5">variables you can call something which</font>

218
00:09:54,320 --> 00:09:59,690
looks like<font color="#E5E5E5"> C functions and that's it</font>

219
00:09:57,440 --> 00:10:03,800
your script<font color="#E5E5E5"> is executed from top to</font>

220
00:09:59,690 --> 00:10:06,020
bottom<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> have multiple action</font>

221
00:10:03,800 --> 00:10:09,160
blocks for<font color="#E5E5E5"> the same probe it will be</font>

222
00:10:06,020 --> 00:10:09,160
<font color="#E5E5E5">executed from top to bottom</font>

223
00:10:13,160 --> 00:10:19,219
so yeah now to explain<font color="#CCCCCC"> the things you</font>

224
00:10:17,240 --> 00:10:22,750
can use<font color="#CCCCCC"> ooh we have</font><font color="#E5E5E5"> something we call a</font>

225
00:10:19,220 --> 00:10:27,290
<font color="#E5E5E5">subroutine you can think of it as</font>

226
00:10:22,750 --> 00:10:29,210
function returning<font color="#E5E5E5"> a value so subroutine</font>

227
00:10:27,290 --> 00:10:31,010
is used if you for example<font color="#CCCCCC"> need to</font>

228
00:10:29,210 --> 00:10:32,390
convert data<font color="#E5E5E5"> or copy something from user</font>

229
00:10:31,010 --> 00:10:34,550
<font color="#CCCCCC">space to Connors place</font><font color="#E5E5E5"> or other way</font>

230
00:10:32,390 --> 00:10:36,290
around<font color="#E5E5E5"> and it can for example write</font><font color="#CCCCCC"> a</font>

231
00:10:34,550 --> 00:10:40,969
new pointer<font color="#CCCCCC"> Bar</font><font color="#E5E5E5"> is the destination in</font>

232
00:10:36,290 --> 00:10:42,199
the kernel kernel space<font color="#CCCCCC"> only trace and</font>

233
00:10:40,970 --> 00:10:44,960
usually<font color="#E5E5E5"> can be used in pretty case</font>

234
00:10:42,200 --> 00:10:48,160
because it is a<font color="#E5E5E5"> returning value the so</font>

235
00:10:44,960 --> 00:10:51,110
you can use<font color="#E5E5E5"> it to do some some decision</font>

236
00:10:48,160 --> 00:10:52,760
the action is only in the action block

237
00:10:51,110 --> 00:10:54,800
it is a statement<font color="#E5E5E5"> so it doesn't have a</font>

238
00:10:52,760 --> 00:10:58,450
<font color="#E5E5E5">return value and allows you to</font><font color="#CCCCCC"> record</font>

239
00:10:54,800 --> 00:11:01,849
<font color="#E5E5E5">something into the buffers or or</font>

240
00:10:58,450 --> 00:11:06,590
basically perform some effect on<font color="#E5E5E5"> the</font>

241
00:11:01,850 --> 00:11:10,550
<font color="#CCCCCC">system so the actions can be</font><font color="#E5E5E5"> executed in</font>

242
00:11:06,590 --> 00:11:12,200
<font color="#CCCCCC">two places straight</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> prop context</font>

243
00:11:10,550 --> 00:11:15,050
where<font color="#E5E5E5"> we basically disable scheduling</font>

244
00:11:12,200 --> 00:11:17,980
interrupts so it will happen<font color="#E5E5E5"> on spot or</font>

245
00:11:15,050 --> 00:11:20,359
later in<font color="#E5E5E5"> user</font><font color="#CCCCCC"> space in that in that</font>

246
00:11:17,980 --> 00:11:22,520
<font color="#E5E5E5">moment basically the action is not</font>

247
00:11:20,360 --> 00:11:25,040
anything<font color="#E5E5E5"> with the prop firing but for</font>

248
00:11:22,520 --> 00:11:26,960
some actions it does not make<font color="#CCCCCC"> sense</font><font color="#E5E5E5"> to</font>

249
00:11:25,040 --> 00:11:29,750
<font color="#E5E5E5">do them in the kernel just to save CPU</font>

250
00:11:26,960 --> 00:11:33,530
cycles<font color="#E5E5E5"> and also some of</font><font color="#CCCCCC"> the actions we</font>

251
00:11:29,750 --> 00:11:35,000
support can<font color="#CCCCCC"> be destructive</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

252
00:11:33,530 --> 00:11:36,709
operating<font color="#CCCCCC"> system we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> cooking because</font>

253
00:11:35,000 --> 00:11:40,540
<font color="#E5E5E5">we have an action like panic for example</font>

254
00:11:36,710 --> 00:11:43,160
if you<font color="#CCCCCC"> intentionally kill the host</font><font color="#E5E5E5"> so a</font>

255
00:11:40,540 --> 00:11:47,000
destructive action requires usage of

256
00:11:43,160 --> 00:11:49,459
explicit argument<font color="#CCCCCC"> the idea is we try to</font>

257
00:11:47,000 --> 00:11:51,740
be as<font color="#E5E5E5"> much safe so you avoid killing</font>

258
00:11:49,460 --> 00:11:54,410
your system<font color="#E5E5E5"> by some random accident but</font>

259
00:11:51,740 --> 00:11:55,760
<font color="#E5E5E5">we want you to explicitly say you know</font>

260
00:11:54,410 --> 00:12:00,829
what you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> before you kill the</font>

261
00:11:55,760 --> 00:12:02,390
system and<font color="#CCCCCC"> no it doesn't</font><font color="#E5E5E5"> tell</font><font color="#CCCCCC"> me it has</font>

262
00:12:00,830 --> 00:12:03,830
<font color="#CCCCCC">to kill the system but their actions</font><font color="#E5E5E5"> for</font>

263
00:12:02,390 --> 00:12:05,449
<font color="#CCCCCC">example you can introduce delays at</font>

264
00:12:03,830 --> 00:12:07,430
random places in<font color="#CCCCCC"> kernel so we can mess</font>

265
00:12:05,450 --> 00:12:09,740
up<font color="#CCCCCC"> the scheduling interrupts whatever so</font>

266
00:12:07,430 --> 00:12:13,510
there are some<font color="#E5E5E5"> hard limits which can all</font>

267
00:12:09,740 --> 00:12:17,300
the actions are blocked from you to use

268
00:12:13,510 --> 00:12:22,010
so now<font color="#CCCCCC"> basically we get through the</font>

269
00:12:17,300 --> 00:12:25,010
language description<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can see well</font>

270
00:12:22,010 --> 00:12:26,000
if you try any new language<font color="#E5E5E5"> the goal is</font>

271
00:12:25,010 --> 00:12:26,689
<font color="#CCCCCC">to write a hello world</font>

272
00:12:26,000 --> 00:12:30,140
so this

273
00:12:26,690 --> 00:12:32,450
<font color="#CCCCCC">hello world</font><font color="#E5E5E5"> in de três so I'm using a</font>

274
00:12:30,140 --> 00:12:34,340
<font color="#CCCCCC">DTrace provider</font><font color="#E5E5E5"> so you can see the full</font>

275
00:12:32,450 --> 00:12:35,990
description<font color="#E5E5E5"> of the probes is provider is</font>

276
00:12:34,340 --> 00:12:37,250
<font color="#CCCCCC">DTrace it doesn't have a</font><font color="#E5E5E5"> module it</font>

277
00:12:35,990 --> 00:12:39,410
doesn't have a function is<font color="#CCCCCC"> just</font>

278
00:12:37,250 --> 00:12:41,090
<font color="#E5E5E5">beginning and</font><font color="#CCCCCC"> error Pro</font><font color="#E5E5E5"> they are kind of</font>

279
00:12:39,410 --> 00:12:44,360
special<font color="#CCCCCC"> because the begin probe fires</font>

280
00:12:41,090 --> 00:12:46,220
always first<font color="#CCCCCC"> and it's always</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> but</font>

281
00:12:44,360 --> 00:12:49,190
before<font color="#E5E5E5"> we</font><font color="#CCCCCC"> terminates racing's so you can</font>

282
00:12:46,220 --> 00:12:51,770
do some<font color="#CCCCCC"> innate cleanup and</font><font color="#E5E5E5"> error probe</font>

283
00:12:49,190 --> 00:12:53,930
<font color="#E5E5E5">fires only</font><font color="#CCCCCC"> when an action block you</font>

284
00:12:51,770 --> 00:12:56,480
execute<font color="#E5E5E5"> cause this summer for</font><font color="#CCCCCC"> example if</font>

285
00:12:53,930 --> 00:12:58,819
you touch<font color="#E5E5E5"> memory and would cause a page</font>

286
00:12:56,480 --> 00:13:00,980
fault<font color="#E5E5E5"> or something</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> details</font>

287
00:12:58,820 --> 00:13:03,650
will<font color="#E5E5E5"> silently ignore it and replace</font><font color="#CCCCCC"> it</font>

288
00:13:00,980 --> 00:13:05,630
like loading volume<font color="#CCCCCC"> zero but it will</font>

289
00:13:03,650 --> 00:13:07,610
fire the arrow probe for you<font color="#E5E5E5"> so you can</font>

290
00:13:05,630 --> 00:13:09,439
introduce your<font color="#E5E5E5"> own</font><font color="#CCCCCC"> hand link if you</font>

291
00:13:07,610 --> 00:13:11,480
don't you will see something<font color="#CCCCCC"> like there</font>

292
00:13:09,440 --> 00:13:14,770
was an action at<font color="#CCCCCC"> all on action number</font>

293
00:13:11,480 --> 00:13:18,320
<font color="#E5E5E5">they've instruction number</font><font color="#CCCCCC"> and and so on</font>

294
00:13:14,770 --> 00:13:21,470
<font color="#E5E5E5">so yeah you can</font><font color="#CCCCCC"> see the example we use</font>

295
00:13:18,320 --> 00:13:23,810
<font color="#E5E5E5">just the begin program it is not fully</font>

296
00:13:21,470 --> 00:13:27,110
qualified<font color="#CCCCCC"> because you don't</font><font color="#E5E5E5"> have to if</font>

297
00:13:23,810 --> 00:13:28,430
the<font color="#E5E5E5"> test is able to identify uniquely</font>

298
00:13:27,110 --> 00:13:30,590
what you have to<font color="#E5E5E5"> get there is no</font><font color="#CCCCCC"> other</font>

299
00:13:28,430 --> 00:13:33,319
begin probe in any provider so<font color="#E5E5E5"> you can</font>

300
00:13:30,590 --> 00:13:35,540
just write<font color="#E5E5E5"> a</font><font color="#CCCCCC"> beginner and it has adjust</font>

301
00:13:33,320 --> 00:13:38,060
<font color="#CCCCCC">to actions</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> one print something</font>

302
00:13:35,540 --> 00:13:41,780
<font color="#E5E5E5">the second one terminates the tracing</font>

303
00:13:38,060 --> 00:13:45,050
<font color="#CCCCCC">with the return value so when I was</font>

304
00:13:41,780 --> 00:13:47,600
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about some actions happening</font><font color="#E5E5E5"> in</font>

305
00:13:45,050 --> 00:13:49,370
<font color="#CCCCCC">the user space</font><font color="#E5E5E5"> the printer is a good</font>

306
00:13:47,600 --> 00:13:51,410
example<font color="#CCCCCC"> because</font><font color="#E5E5E5"> the printer takes a</font>

307
00:13:49,370 --> 00:13:53,830
formatting string and optional set of

308
00:13:51,410 --> 00:13:56,750
arguments like you know from<font color="#E5E5E5"> language</font>

309
00:13:53,830 --> 00:13:58,130
but if we would try<font color="#CCCCCC"> to assemble</font><font color="#E5E5E5"> the</font>

310
00:13:56,750 --> 00:14:00,380
final<font color="#E5E5E5"> string in</font><font color="#CCCCCC"> kernel we would just</font>

311
00:13:58,130 --> 00:14:02,480
<font color="#E5E5E5">wait CPU cycles so what we do we store</font>

312
00:14:00,380 --> 00:14:04,240
only the arguments in kernel and thence

313
00:14:02,480 --> 00:14:07,250
pass it through to the<font color="#E5E5E5"> user space and</font>

314
00:14:04,240 --> 00:14:09,350
then we are in user space we do the file

315
00:14:07,250 --> 00:14:11,839
string formatting and the print<font color="#E5E5E5"> so it</font>

316
00:14:09,350 --> 00:14:15,070
just balances the performance between

317
00:14:11,839 --> 00:14:15,070
kernel and<font color="#E5E5E5"> the user space</font>

318
00:14:17,470 --> 00:14:22,630
so one great<font color="#E5E5E5"> feature about</font><font color="#CCCCCC"> DTrace is</font>

319
00:14:20,320 --> 00:14:25,180
that the<font color="#CCCCCC"> framework knows about every</font>

320
00:14:22,630 --> 00:14:29,350
available probe to you<font color="#E5E5E5"> and you can list</font>

321
00:14:25,180 --> 00:14:31,930
it<font color="#E5E5E5"> so you can think</font><font color="#CCCCCC"> about that MBT is</font>

322
00:14:29,350 --> 00:14:34,510
similar to<font color="#CCCCCC"> k probes it has a we support</font>

323
00:14:31,930 --> 00:14:37,120
only<font color="#CCCCCC"> Ethel</font><font color="#E5E5E5"> and 20</font><font color="#CCCCCC"> points at or</font><font color="#E5E5E5"> right</font>

324
00:14:34,510 --> 00:14:38,950
<font color="#CCCCCC">tool and entry points to</font><font color="#E5E5E5"> a function we</font>

325
00:14:37,120 --> 00:14:41,470
don't support arbitrary<font color="#E5E5E5"> instrumentation</font>

326
00:14:38,950 --> 00:14:44,340
but technically<font color="#CCCCCC"> we can add for example K</font>

327
00:14:41,470 --> 00:14:47,050
<font color="#CCCCCC">Pro provider</font><font color="#E5E5E5"> and use K probes underneath</font>

328
00:14:44,340 --> 00:14:48,760
but the great thing<font color="#CCCCCC"> is you can</font><font color="#E5E5E5"> list the</font>

329
00:14:47,050 --> 00:14:50,949
<font color="#E5E5E5">probes so when you come</font><font color="#CCCCCC"> to some random</font>

330
00:14:48,760 --> 00:14:52,780
<font color="#E5E5E5">system you know nothing about it</font><font color="#CCCCCC"> you can</font>

331
00:14:50,950 --> 00:14:54,610
at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> as a first step of debugging</font>

332
00:14:52,780 --> 00:14:56,640
<font color="#E5E5E5">take a look what's available for</font><font color="#CCCCCC"> you to</font>

333
00:14:54,610 --> 00:14:56,640
use

334
00:14:56,820 --> 00:15:02,950
<font color="#CCCCCC">what is missing</font>

335
00:14:58,710 --> 00:15:04,990
so you can do more<font color="#E5E5E5"> you can you don't</font>

336
00:15:02,950 --> 00:15:07,330
have to list all<font color="#CCCCCC"> the probes</font><font color="#E5E5E5"> you can just</font>

337
00:15:04,990 --> 00:15:09,100
<font color="#E5E5E5">provide some partial specifications so</font>

338
00:15:07,330 --> 00:15:11,050
you can lose just a subset of probes

339
00:15:09,100 --> 00:15:13,960
that matches what you<font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to look</font>

340
00:15:11,050 --> 00:15:16,150
for<font color="#CCCCCC"> and you can loop more</font><font color="#E5E5E5"> detail</font>

341
00:15:13,960 --> 00:15:19,620
description<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a probe</font><font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see</font>

342
00:15:16,150 --> 00:15:19,620
it's<font color="#CCCCCC"> just some</font><font color="#E5E5E5"> kind of identification</font>

343
00:15:21,840 --> 00:15:30,010
<font color="#CCCCCC">yeah and somebody is propionate but in</font>

344
00:15:26,950 --> 00:15:31,180
addition<font color="#CCCCCC"> because it is</font><font color="#E5E5E5"> usually a lot</font><font color="#CCCCCC"> of</font>

345
00:15:30,010 --> 00:15:33,760
about stability and<font color="#E5E5E5"> backward</font>

346
00:15:31,180 --> 00:15:36,550
compatibility<font color="#CCCCCC"> you have some stability</font>

347
00:15:33,760 --> 00:15:38,439
attributes for every probe this is

348
00:15:36,550 --> 00:15:41,199
<font color="#E5E5E5">interesting if you want to implement a</font>

349
00:15:38,440 --> 00:15:42,910
script<font color="#E5E5E5"> and don't want that script got</font>

350
00:15:41,200 --> 00:15:45,310
broken like next day when<font color="#E5E5E5"> we change the</font>

351
00:15:42,910 --> 00:15:49,510
kernel we basically give you some

352
00:15:45,310 --> 00:15:51,819
description<font color="#E5E5E5"> how stable the probe itself</font>

353
00:15:49,510 --> 00:15:54,130
<font color="#E5E5E5">is so whether it will exist tomorrow or</font>

354
00:15:51,820 --> 00:15:56,020
not you can see private private<font color="#E5E5E5"> identify</font>

355
00:15:54,130 --> 00:15:59,380
names means this<font color="#E5E5E5"> whole private we can</font>

356
00:15:56,020 --> 00:16:02,100
change it<font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> but for</font>

357
00:15:59,380 --> 00:16:05,080
<font color="#CCCCCC">argument's you can see it is evolving</font>

358
00:16:02,100 --> 00:16:06,970
which gives you<font color="#CCCCCC"> some</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is some</font>

359
00:16:05,080 --> 00:16:10,120
document about this what<font color="#CCCCCC"> are possible</font>

360
00:16:06,970 --> 00:16:11,710
<font color="#E5E5E5">kinds of of types but basically it shows</font>

361
00:16:10,120 --> 00:16:13,990
you act we<font color="#CCCCCC"> will change it probably in</font>

362
00:16:11,710 --> 00:16:15,970
future<font color="#E5E5E5"> but not</font><font color="#CCCCCC"> today or on daily basis</font>

363
00:16:13,990 --> 00:16:18,130
<font color="#CCCCCC">so you can base those on top of it</font>

364
00:16:15,970 --> 00:16:20,920
<font color="#E5E5E5">and the last interesting thing is that</font>

365
00:16:18,130 --> 00:16:23,350
<font color="#CCCCCC">for some probes we can say you what is</font>

366
00:16:20,920 --> 00:16:27,430
the type of argument<font color="#E5E5E5"> appropriate so you</font>

367
00:16:23,350 --> 00:16:28,800
know<font color="#CCCCCC"> what</font><font color="#E5E5E5"> structural type you can access</font>

368
00:16:27,430 --> 00:16:36,359
<font color="#E5E5E5">from</font>

369
00:16:28,800 --> 00:16:37,829
from the<font color="#CCCCCC"> descript so the one</font><font color="#E5E5E5"> of the most</font>

370
00:16:36,360 --> 00:16:40,560
powerful<font color="#E5E5E5"> things</font><font color="#CCCCCC"> in details are</font>

371
00:16:37,830 --> 00:16:44,339
aggregations aggregations happen

372
00:16:40,560 --> 00:16:45,779
<font color="#CCCCCC">directly in the</font><font color="#E5E5E5"> kernel so and they are</font>

373
00:16:44,339 --> 00:16:48,779
<font color="#CCCCCC">represented in</font><font color="#E5E5E5"> the D language as a</font>

374
00:16:45,779 --> 00:16:51,120
special<font color="#E5E5E5"> variable which can use a</font>

375
00:16:48,779 --> 00:16:52,980
<font color="#E5E5E5">multiple keys</font><font color="#CCCCCC"> a key can be</font><font color="#E5E5E5"> anything it</font>

376
00:16:51,120 --> 00:16:55,470
can be<font color="#E5E5E5"> stacked</font><font color="#CCCCCC"> it can be</font><font color="#E5E5E5"> string it</font><font color="#CCCCCC"> can</font>

377
00:16:52,980 --> 00:16:57,810
be number basically<font color="#CCCCCC"> whatever we can make</font>

378
00:16:55,470 --> 00:16:59,820
a hash out<font color="#E5E5E5"> of it and then there is</font>

379
00:16:57,810 --> 00:17:01,890
aggregating function there is<font color="#E5E5E5"> just</font>

380
00:16:59,820 --> 00:17:04,079
<font color="#E5E5E5">limited set of such functions</font><font color="#CCCCCC"> it can be</font>

381
00:17:01,890 --> 00:17:08,540
from simple counting or<font color="#E5E5E5"> to something</font>

382
00:17:04,079 --> 00:17:08,540
<font color="#CCCCCC">more complex</font><font color="#E5E5E5"> which I will show later</font>

383
00:17:08,990 --> 00:17:16,740
<font color="#E5E5E5">what it does it means whenever we record</font>

384
00:17:12,959 --> 00:17:19,020
this kind<font color="#E5E5E5"> of keys we have</font><font color="#CCCCCC"> a sort of hash</font>

385
00:17:16,740 --> 00:17:20,939
table in<font color="#CCCCCC"> Carnell</font><font color="#E5E5E5"> and we apply the</font>

386
00:17:19,020 --> 00:17:23,849
aggregating function on<font color="#E5E5E5"> top of it for</font>

387
00:17:20,939 --> 00:17:26,970
every CPU and then we merge aggregations

388
00:17:23,849 --> 00:17:29,520
together<font color="#E5E5E5"> so it is quite effective</font><font color="#CCCCCC"> if you</font>

389
00:17:26,970 --> 00:17:30,780
need to see some counts because<font color="#E5E5E5"> it</font>

390
00:17:29,520 --> 00:17:33,179
happens straight it<font color="#E5E5E5"> doesn't need</font>

391
00:17:30,780 --> 00:17:36,210
post-processing<font color="#CCCCCC"> you don't have to send a</font>

392
00:17:33,179 --> 00:17:39,240
huge stream of data<font color="#E5E5E5"> up for some further</font>

393
00:17:36,210 --> 00:17:42,740
<font color="#E5E5E5">post-processing later you can do some</font>

394
00:17:39,240 --> 00:17:42,740
kind of<font color="#E5E5E5"> things with this directly</font>

395
00:17:45,710 --> 00:17:52,760
so in<font color="#E5E5E5"> addition to aggregating variables</font>

396
00:17:49,820 --> 00:17:54,710
of course<font color="#E5E5E5"> we have some some built-in</font>

397
00:17:52,760 --> 00:17:58,040
variables which are<font color="#CCCCCC"> accessible for</font><font color="#E5E5E5"> you</font>

398
00:17:54,710 --> 00:18:00,560
in the D language itself<font color="#E5E5E5"> it's probably</font>

399
00:17:58,040 --> 00:18:02,030
<font color="#E5E5E5">better to see documentation but just to</font>

400
00:18:00,560 --> 00:18:05,120
give<font color="#E5E5E5"> you an</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> what it</font><font color="#CCCCCC"> is there is a</font>

401
00:18:02,030 --> 00:18:08,690
current<font color="#E5E5E5"> threat variable which always</font>

402
00:18:05,120 --> 00:18:10,669
holds a pointer<font color="#E5E5E5"> to the running threat or</font>

403
00:18:08,690 --> 00:18:13,760
<font color="#CCCCCC">task on a</font><font color="#E5E5E5"> CPU at the moment when the</font>

404
00:18:10,670 --> 00:18:16,280
profiles<font color="#E5E5E5"> current</font><font color="#CCCCCC"> vs inflow is equivalent</font>

405
00:18:13,760 --> 00:18:17,960
but for<font color="#CCCCCC"> our</font><font color="#E5E5E5"> process we have a time</font><font color="#CCCCCC"> stamp</font>

406
00:18:16,280 --> 00:18:20,960
which<font color="#E5E5E5"> is something like clock monotonic</font>

407
00:18:17,960 --> 00:18:23,150
kind of time so you can sort the events

408
00:18:20,960 --> 00:18:25,580
based on time we have a vole timestamp

409
00:18:23,150 --> 00:18:29,150
which is<font color="#CCCCCC"> real-world clock right time</font>

410
00:18:25,580 --> 00:18:31,550
based on yeah on the system time and

411
00:18:29,150 --> 00:18:34,040
each probe<font color="#E5E5E5"> can have some some arguments</font>

412
00:18:31,550 --> 00:18:37,610
like<font color="#CCCCCC"> R 0 arc</font><font color="#E5E5E5"> 9 everything is exposed</font><font color="#CCCCCC"> to</font>

413
00:18:34,040 --> 00:18:40,490
variables<font color="#E5E5E5"> this kind of variables is not</font>

414
00:18:37,610 --> 00:18:41,360
<font color="#CCCCCC">typed if you if I go to few slides back</font>

415
00:18:40,490 --> 00:18:47,420
you will see<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is slight difference</font>

416
00:18:41,360 --> 00:18:49,909
when I listed the probe<font color="#E5E5E5"> this is a RI so</font>

417
00:18:47,420 --> 00:18:53,360
if we know the types<font color="#CCCCCC"> we expose</font><font color="#E5E5E5"> you a</font>

418
00:18:49,910 --> 00:18:56,570
variable which is an RI and argument

419
00:18:53,360 --> 00:18:58,040
index<font color="#E5E5E5"> the argument number is indexed to</font>

420
00:18:56,570 --> 00:19:00,230
<font color="#E5E5E5">this arise so you can access it directly</font>

421
00:18:58,040 --> 00:19:03,290
as a typed argument if we don't have<font color="#CCCCCC"> it</font>

422
00:19:00,230 --> 00:19:07,150
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> assembled in variables which</font>

423
00:19:03,290 --> 00:19:07,149
should be like 64-bit integers that's it

424
00:19:10,530 --> 00:19:17,610
yes so now<font color="#CCCCCC"> we enhanced</font><font color="#E5E5E5"> our D language</font>

425
00:19:14,610 --> 00:19:22,500
skills so<font color="#CCCCCC"> we can look for</font><font color="#E5E5E5"> more advanced</font>

426
00:19:17,610 --> 00:19:24,659
<font color="#CCCCCC">example so in DTrace</font><font color="#E5E5E5"> you not</font><font color="#CCCCCC"> necessarily</font>

427
00:19:22,500 --> 00:19:27,390
<font color="#E5E5E5">need to write a long script so I based</font>

428
00:19:24,660 --> 00:19:31,140
this on examples of<font color="#CCCCCC"> so-called one-liner</font>

429
00:19:27,390 --> 00:19:31,890
<font color="#E5E5E5">so whatever you see here</font><font color="#CCCCCC"> just imagine</font>

430
00:19:31,140 --> 00:19:34,500
that<font color="#E5E5E5"> there is a</font>

431
00:19:31,890 --> 00:19:38,580
<font color="#CCCCCC">dtrace - and this is</font><font color="#E5E5E5"> add it as a string</font>

432
00:19:34,500 --> 00:19:40,170
argument so<font color="#CCCCCC"> it is just</font><font color="#E5E5E5"> a one-liner yeah</font>

433
00:19:38,580 --> 00:19:44,399
and you are<font color="#E5E5E5"> missing some part that</font><font color="#CCCCCC"> I</font>

434
00:19:40,170 --> 00:19:47,430
will I will explain it so basically what

435
00:19:44,400 --> 00:19:51,210
it does<font color="#CCCCCC"> we use a profile</font><font color="#E5E5E5"> provide profile</font>

436
00:19:47,430 --> 00:19:55,830
<font color="#CCCCCC">Pro which should fire all each 9 9 7</font>

437
00:19:51,210 --> 00:19:59,280
Hertz<font color="#E5E5E5"> on every CPU</font><font color="#CCCCCC"> it's it's important</font>

438
00:19:55,830 --> 00:20:00,840
to not to use your<font color="#CCCCCC"> number</font><font color="#E5E5E5"> to not fight</font>

439
00:19:59,280 --> 00:20:02,940
with the scheduler because typically<font color="#E5E5E5"> 10</font>

440
00:20:00,840 --> 00:20:06,449
milliseconds is some time of scheduling

441
00:20:02,940 --> 00:20:07,440
so that's why the number looks weird<font color="#E5E5E5"> the</font>

442
00:20:06,450 --> 00:20:09,330
<font color="#CCCCCC">probe</font><font color="#E5E5E5"> if you look at in the</font>

443
00:20:07,440 --> 00:20:11,790
<font color="#E5E5E5">documentation has</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> two arguments which</font>

444
00:20:09,330 --> 00:20:13,980
<font color="#E5E5E5">are program counters where argument 0 is</font>

445
00:20:11,790 --> 00:20:17,310
<font color="#CCCCCC">kernel program counter argument</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is</font>

446
00:20:13,980 --> 00:20:19,620
user space program counter so whenever

447
00:20:17,310 --> 00:20:21,659
time of fires<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> both</font><font color="#E5E5E5"> of each</font>

448
00:20:19,620 --> 00:20:23,629
<font color="#E5E5E5">variable is</font><font color="#CCCCCC"> nonzero whether you are in</font>

449
00:20:21,660 --> 00:20:26,700
user space<font color="#E5E5E5"> or kernel space context and</font>

450
00:20:23,630 --> 00:20:29,040
then I have abrogating variable the

451
00:20:26,700 --> 00:20:30,660
variable is anonymous<font color="#CCCCCC"> so it's just and</font>

452
00:20:29,040 --> 00:20:32,070
the name is missing we just means

453
00:20:30,660 --> 00:20:33,960
details who print it at the end<font color="#E5E5E5"> because</font>

454
00:20:32,070 --> 00:20:36,540
<font color="#E5E5E5">it</font><font color="#CCCCCC"> is very simple script so I don't need</font>

455
00:20:33,960 --> 00:20:40,200
<font color="#E5E5E5">to use some variable name and I'm using</font>

456
00:20:36,540 --> 00:20:43,350
<font color="#E5E5E5">two keys one</font><font color="#CCCCCC"> key is the process ID and</font>

457
00:20:40,200 --> 00:20:46,860
<font color="#CCCCCC">secondly</font><font color="#E5E5E5"> the key is the executable</font><font color="#CCCCCC"> name</font>

458
00:20:43,350 --> 00:20:47,669
<font color="#E5E5E5">and what the</font><font color="#CCCCCC"> party missing is it equals</font>

459
00:20:46,860 --> 00:20:49,800
<font color="#E5E5E5">to count</font>

460
00:20:47,670 --> 00:20:51,570
so the aggregating function just bumps

461
00:20:49,800 --> 00:20:54,600
counter each time we see the same

462
00:20:51,570 --> 00:20:57,450
p-value pair so if you run<font color="#CCCCCC"> D trace this</font>

463
00:20:54,600 --> 00:21:01,010
time you will see it at<font color="#CCCCCC"> form</font><font color="#E5E5E5"> one probe</font>

464
00:20:57,450 --> 00:21:05,220
and the output will<font color="#CCCCCC"> be this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the pate</font>

465
00:21:01,010 --> 00:21:09,000
this<font color="#CCCCCC"> is the exact name again somewhere</font>

466
00:21:05,220 --> 00:21:12,390
here are the numbers so it is sorted

467
00:21:09,000 --> 00:21:15,960
from<font color="#CCCCCC"> smaller to higher so I have a 51</font>

468
00:21:12,390 --> 00:21:17,580
for the<font color="#CCCCCC"> top process so what basically we</font>

469
00:21:15,960 --> 00:21:18,570
did in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> example we created</font><font color="#E5E5E5"> a user</font>

470
00:21:17,580 --> 00:21:20,669
<font color="#CCCCCC">space profiler</font>

471
00:21:18,570 --> 00:21:23,189
just with one line<font color="#CCCCCC"> that monitors every</font>

472
00:21:20,670 --> 00:21:24,029
CPU and accounts for<font color="#E5E5E5"> every program</font>

473
00:21:23,190 --> 00:21:26,460
counter in<font color="#E5E5E5"> user</font>

474
00:21:24,029 --> 00:21:30,419
space<font color="#E5E5E5"> so we know the top because it was</font>

475
00:21:26,460 --> 00:21:36,809
my VM<font color="#E5E5E5"> back you know face was running</font>

476
00:21:30,419 --> 00:21:41,399
<font color="#E5E5E5">just the top and nothing else so if we</font>

477
00:21:36,809 --> 00:21:44,428
just<font color="#E5E5E5"> swap the arc</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> r0 we change it</font>

478
00:21:41,399 --> 00:21:46,258
to Colonel profile because<font color="#E5E5E5"> r0 is you</font>

479
00:21:44,429 --> 00:21:48,570
know if there is<font color="#E5E5E5"> no test it's basically</font>

480
00:21:46,259 --> 00:21:52,619
test for if<font color="#E5E5E5"> R is</font><font color="#CCCCCC"> zero or not of the</font>

481
00:21:48,570 --> 00:21:54,389
argument<font color="#E5E5E5"> so now we are testing but the</font>

482
00:21:52,619 --> 00:21:57,330
<font color="#E5E5E5">caramel pointer is set to something and</font>

483
00:21:54,389 --> 00:21:59,158
<font color="#E5E5E5">if it is we aggregate and remember I was</font>

484
00:21:57,330 --> 00:22:02,099
<font color="#E5E5E5">talking about the subroutine so the funk</font>

485
00:21:59,159 --> 00:22:05,249
is a subroutine<font color="#E5E5E5"> which takes a pointer</font>

486
00:22:02,099 --> 00:22:09,089
and give you<font color="#E5E5E5"> Gazoo back a string name of</font>

487
00:22:05,249 --> 00:22:11,729
a symbol so again if you run the<font color="#CCCCCC"> dtrace</font>

488
00:22:09,089 --> 00:22:13,408
<font color="#E5E5E5">you will see that this the output</font><font color="#CCCCCC"> is</font>

489
00:22:11,729 --> 00:22:19,349
exactly<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> it gives you the symbol</font>

490
00:22:13,409 --> 00:22:22,289
names and yeah the counts<font color="#E5E5E5"> so the most</font>

491
00:22:19,349 --> 00:22:25,649
<font color="#E5E5E5">often called function in</font><font color="#CCCCCC"> linux kernel</font>

492
00:22:22,289 --> 00:22:29,119
was native<font color="#E5E5E5"> Safehold because most of the</font>

493
00:22:25,649 --> 00:22:29,119
virtual CPUs were either

494
00:22:32,740 --> 00:22:40,149
yeah one last<font color="#E5E5E5"> thing is that a profile</font>

495
00:22:35,889 --> 00:22:42,758
provider<font color="#E5E5E5"> it's kind of dynamic so there</font>

496
00:22:40,149 --> 00:22:46,840
is no such probe like<font color="#CCCCCC"> nine seven Hertz</font>

497
00:22:42,759 --> 00:22:49,809
<font color="#CCCCCC">so if you ask a provider</font><font color="#E5E5E5"> to provide you</font>

498
00:22:46,840 --> 00:22:52,209
some probe<font color="#E5E5E5"> the profile one will</font><font color="#CCCCCC"> sync</font>

499
00:22:49,809 --> 00:22:54,668
synthetically created<font color="#E5E5E5"> when you request</font>

500
00:22:52,210 --> 00:22:56,350
it<font color="#E5E5E5"> and if the probe exit gets reused</font>

501
00:22:54,669 --> 00:23:00,220
<font color="#E5E5E5">because the framework</font><font color="#CCCCCC"> they duplicate is</font>

502
00:22:56,350 --> 00:23:01,959
the existing stuff so this is<font color="#E5E5E5"> just one</font>

503
00:23:00,220 --> 00:23:04,840
interesting so not everything must<font color="#E5E5E5"> be</font>

504
00:23:01,960 --> 00:23:10,990
present<font color="#E5E5E5"> from loading to provide a module</font>

505
00:23:04,840 --> 00:23:14,019
it can come up<font color="#CCCCCC"> to life dynamically yeah</font>

506
00:23:10,990 --> 00:23:16,419
so now<font color="#E5E5E5"> let's talk a bit</font><font color="#CCCCCC"> about the</font>

507
00:23:14,019 --> 00:23:17,950
variables itself over the<font color="#E5E5E5"> language so we</font>

508
00:23:16,419 --> 00:23:19,720
have a three scopes<font color="#E5E5E5"> of variables there</font>

509
00:23:17,950 --> 00:23:21,730
is a global<font color="#CCCCCC"> scope</font><font color="#E5E5E5"> which is kind of</font>

510
00:23:19,720 --> 00:23:24,220
obvious<font color="#CCCCCC"> but you have to</font><font color="#E5E5E5"> realize that</font>

511
00:23:21,730 --> 00:23:27,490
every block action book for any probe

512
00:23:24,220 --> 00:23:29,470
<font color="#E5E5E5">can</font><font color="#CCCCCC"> fire multiple</font><font color="#E5E5E5"> times at the</font><font color="#CCCCCC"> same time</font>

513
00:23:27,490 --> 00:23:31,720
<font color="#E5E5E5">because you have a more than one CPU</font>

514
00:23:29,470 --> 00:23:33,519
there is no synchronization<font color="#E5E5E5"> because</font>

515
00:23:31,720 --> 00:23:35,200
synchronization means<font color="#CCCCCC"> matrix for locks</font>

516
00:23:33,519 --> 00:23:38,379
<font color="#E5E5E5">and we are in kernel holding interrupts</font>

517
00:23:35,200 --> 00:23:41,169
and<font color="#CCCCCC"> schedulers so global variables are</font>

518
00:23:38,379 --> 00:23:42,939
problems of race conditions then we<font color="#E5E5E5"> have</font>

519
00:23:41,169 --> 00:23:46,330
a self scope which means a variable is

520
00:23:42,940 --> 00:23:48,279
bound to a kernel thread<font color="#E5E5E5"> so whenever you</font>

521
00:23:46,330 --> 00:23:50,470
write<font color="#CCCCCC"> something you</font><font color="#E5E5E5"> can in completely</font>

522
00:23:48,279 --> 00:23:52,179
different Pro extract the<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> back</font>

523
00:23:50,470 --> 00:23:57,369
because it's bound<font color="#E5E5E5"> to the kernel thread</font>

524
00:23:52,179 --> 00:23:58,690
and this variable<font color="#E5E5E5"> is per probe which is</font>

525
00:23:57,369 --> 00:24:00,668
interesting<font color="#E5E5E5"> for you if you have a</font>

526
00:23:58,690 --> 00:24:03,399
multiple<font color="#E5E5E5"> action box for the same probe</font>

527
00:24:00,669 --> 00:24:05,740
<font color="#CCCCCC">you can fill in something</font><font color="#E5E5E5"> local for at</font>

528
00:24:03,399 --> 00:24:07,748
the first call and then use<font color="#E5E5E5"> it</font>

529
00:24:05,740 --> 00:24:11,740
subsequent later to shorten<font color="#E5E5E5"> down the</font>

530
00:24:07,749 --> 00:24:13,480
processing time yeah<font color="#CCCCCC"> global stuff is</font>

531
00:24:11,740 --> 00:24:15,490
<font color="#E5E5E5">like a compiler so if it is statically</font>

532
00:24:13,480 --> 00:24:17,259
allocated we have a memory for<font color="#E5E5E5"> it if</font>

533
00:24:15,490 --> 00:24:18,789
it's dynamically<font color="#E5E5E5"> it's basically</font>

534
00:24:17,259 --> 00:24:22,119
<font color="#E5E5E5">allocated by</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> first store and</font>

535
00:24:18,789 --> 00:24:23,740
whenever you<font color="#E5E5E5"> are set a value</font><font color="#CCCCCC"> of dynamic</font>

536
00:24:22,119 --> 00:24:28,600
variable to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> it will get garbage</font>

537
00:24:23,740 --> 00:24:31,029
collected<font color="#E5E5E5"> and freed if you run</font><font color="#CCCCCC"> out of or</font>

538
00:24:28,600 --> 00:24:32,498
memory leak the dynamic variables you

539
00:24:31,029 --> 00:24:34,509
<font color="#E5E5E5">will see something else like I</font><font color="#CCCCCC"> don't</font>

540
00:24:32,499 --> 00:24:37,570
<font color="#E5E5E5">have a more dynamic variable drop and so</font>

541
00:24:34,509 --> 00:24:39,460
on we<font color="#E5E5E5"> have a support for our eyes but I</font>

542
00:24:37,570 --> 00:24:41,259
<font color="#E5E5E5">even index by integer is always</font>

543
00:24:39,460 --> 00:24:44,580
associated because<font color="#E5E5E5"> it's based on this</font>

544
00:24:41,259 --> 00:24:48,580
<font color="#CCCCCC">dynamic variable stuff</font>

545
00:24:44,580 --> 00:24:51,370
so to get<font color="#E5E5E5"> quickly to the types D is a</font>

546
00:24:48,580 --> 00:24:53,889
superset of C we are not using dwarf

547
00:24:51,370 --> 00:24:55,899
because<font color="#CCCCCC"> debauch info is not always</font>

548
00:24:53,890 --> 00:24:57,970
installed on production<font color="#E5E5E5"> machine it can</font>

549
00:24:55,900 --> 00:25:01,420
<font color="#E5E5E5">be big</font><font color="#CCCCCC"> and dietra is historically is</font>

550
00:24:57,970 --> 00:25:04,270
based on<font color="#E5E5E5"> CTF CTS are smaller because at</font>

551
00:25:01,420 --> 00:25:07,150
carnival time<font color="#E5E5E5"> we duplicate the dwarf to</font>

552
00:25:04,270 --> 00:25:10,629
<font color="#E5E5E5">create a small description of CTF and we</font>

553
00:25:07,150 --> 00:25:12,790
either put them in a<font color="#CCCCCC"> kernel module or or</font>

554
00:25:10,630 --> 00:25:17,470
have<font color="#E5E5E5"> an archive next to the kernel which</font>

555
00:25:12,790 --> 00:25:19,750
is shipped<font color="#E5E5E5"> in rpm so we have a this way</font>

556
00:25:17,470 --> 00:25:21,220
type information<font color="#E5E5E5"> what is some subset</font>

557
00:25:19,750 --> 00:25:24,940
reasonable for<font color="#E5E5E5"> data is always available</font>

558
00:25:21,220 --> 00:25:27,460
on<font color="#E5E5E5"> production machine so if</font><font color="#CCCCCC"> I come</font><font color="#E5E5E5"> back</font>

559
00:25:24,940 --> 00:25:30,040
<font color="#E5E5E5">to the profile provider and just again</font>

560
00:25:27,460 --> 00:25:32,170
change the<font color="#CCCCCC"> aggregation you can see I'm</font>

561
00:25:30,040 --> 00:25:34,690
using<font color="#CCCCCC"> the</font><font color="#E5E5E5"> button variable which is</font>

562
00:25:32,170 --> 00:25:37,420
current<font color="#E5E5E5"> thread which has a</font><font color="#CCCCCC"> die because</font>

563
00:25:34,690 --> 00:25:39,700
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have a type</font><font color="#E5E5E5"> system and I can</font><font color="#CCCCCC"> very</font>

564
00:25:37,420 --> 00:25:42,070
<font color="#E5E5E5">friends it which means now I'm basically</font>

565
00:25:39,700 --> 00:25:46,120
<font color="#E5E5E5">picking an internal member of the task</font>

566
00:25:42,070 --> 00:25:48,850
starts from<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> kernel and aggregating</font>

567
00:25:46,120 --> 00:25:51,580
by name so it<font color="#E5E5E5"> is profiler that shows you</font>

568
00:25:48,850 --> 00:25:57,040
<font color="#E5E5E5">the names of threads that</font><font color="#CCCCCC"> have been seen</font>

569
00:25:51,580 --> 00:25:59,710
<font color="#E5E5E5">on CPU yeah given the time constraint</font>

570
00:25:57,040 --> 00:26:02,230
<font color="#CCCCCC">details are so many options</font><font color="#E5E5E5"> like I bet</font>

571
00:25:59,710 --> 00:26:04,630
we probably<font color="#E5E5E5"> run out</font><font color="#CCCCCC"> of the alphabet</font><font color="#E5E5E5"> the</font>

572
00:26:02,230 --> 00:26:06,040
lower case and the upper case but

573
00:26:04,630 --> 00:26:08,110
<font color="#E5E5E5">there's no problem we have a minus X</font>

574
00:26:06,040 --> 00:26:12,070
should<font color="#E5E5E5"> I</font><font color="#CCCCCC"> compiler you can provide the</font>

575
00:26:08,110 --> 00:26:13,810
key equals<font color="#E5E5E5"> value you can change a lot</font><font color="#CCCCCC"> of</font>

576
00:26:12,070 --> 00:26:15,580
<font color="#CCCCCC">things in interesting one is the buffer</font>

577
00:26:13,810 --> 00:26:17,230
switching policy by default we have<font color="#E5E5E5"> two</font>

578
00:26:15,580 --> 00:26:19,689
buffers one is being recorded when it's

579
00:26:17,230 --> 00:26:21,250
<font color="#E5E5E5">been extracted ring policy basically</font>

580
00:26:19,690 --> 00:26:23,980
overrides the buffer again again again

581
00:26:21,250 --> 00:26:26,080
<font color="#E5E5E5">and for example</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can extract it from</font>

582
00:26:23,980 --> 00:26:29,110
crazy<font color="#E5E5E5"> dam so you can let the</font><font color="#CCCCCC"> machine die</font>

583
00:26:26,080 --> 00:26:31,389
<font color="#E5E5E5">load it up and look what was the few</font>

584
00:26:29,110 --> 00:26:33,459
<font color="#E5E5E5">things before the disaster but only</font>

585
00:26:31,390 --> 00:26:36,060
looks<font color="#E5E5E5"> it would need to</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> the crash</font>

586
00:26:33,460 --> 00:26:38,590
or other tools<font color="#E5E5E5"> so it's not not on</font><font color="#CCCCCC"> linux</font>

587
00:26:36,060 --> 00:26:41,649
<font color="#E5E5E5">lazy</font><font color="#CCCCCC"> attache is basically the problem</font>

588
00:26:38,590 --> 00:26:43,929
with<font color="#CCCCCC"> astrays conditions like in a probe</font>

589
00:26:41,650 --> 00:26:46,420
doesn't exist you get an error<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> do</font>

590
00:26:43,930 --> 00:26:48,040
the lazy<font color="#E5E5E5"> attach option it means we will</font>

591
00:26:46,420 --> 00:26:51,340
compile the<font color="#E5E5E5"> script and run it anyway and</font>

592
00:26:48,040 --> 00:26:54,100
run the probe appears in the system we

593
00:26:51,340 --> 00:26:56,428
enable it and<font color="#E5E5E5"> start processing</font><font color="#CCCCCC"> your</font>

594
00:26:54,100 --> 00:26:56,428
stuff

595
00:26:56,980 --> 00:27:03,669
yeah so speculative tracing sometimes

596
00:27:00,990 --> 00:27:05,889
sometimes you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to record for example</font>

597
00:27:03,669 --> 00:27:07,960
function arguments<font color="#E5E5E5"> and decide to keep</font>

598
00:27:05,889 --> 00:27:10,779
<font color="#E5E5E5">the results</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> when it returns</font><font color="#CCCCCC"> Error</font>

599
00:27:07,960 --> 00:27:14,440
<font color="#E5E5E5">error which which is quite hard for a</font>

600
00:27:10,779 --> 00:27:17,409
<font color="#E5E5E5">tracer to solve it so in</font><font color="#CCCCCC"> DTrace the</font>

601
00:27:14,440 --> 00:27:19,450
<font color="#CCCCCC">speculation tracing allows you to speck</font>

602
00:27:17,409 --> 00:27:21,580
<font color="#CCCCCC">water based or something si to different</font>

603
00:27:19,450 --> 00:27:22,929
set of buffers and<font color="#E5E5E5"> later decide whether</font>

604
00:27:21,580 --> 00:27:25,360
you commit or discard the value

605
00:27:22,929 --> 00:27:28,840
depending on for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the return</font>

606
00:27:25,360 --> 00:27:30,729
value can commit if it is an error<font color="#E5E5E5"> then</font>

607
00:27:28,840 --> 00:27:32,740
we<font color="#E5E5E5"> will copy your temporary buffers</font><font color="#CCCCCC"> to</font>

608
00:27:30,730 --> 00:27:35,760
do<font color="#E5E5E5"> mine one and it will appear to the</font>

609
00:27:32,740 --> 00:27:35,760
trace in<font color="#E5E5E5"> userspace</font>

610
00:27:36,210 --> 00:27:43,260
yes so given them quickly<font color="#E5E5E5"> work on</font><font color="#CCCCCC"> D</font>

611
00:27:41,500 --> 00:27:45,490
trace is not only<font color="#CCCCCC"> above the tracer</font>

612
00:27:43,260 --> 00:27:48,070
because<font color="#E5E5E5"> they are well</font><font color="#CCCCCC"> known statically</font>

613
00:27:45,490 --> 00:27:49,750
defined<font color="#E5E5E5"> probes across many operating</font>

614
00:27:48,070 --> 00:27:52,090
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> so for example you can see this</font>

615
00:27:49,750 --> 00:27:55,510
is a probe which<font color="#CCCCCC"> is a lock stock</font>

616
00:27:52,090 --> 00:27:58,269
provider for<font color="#CCCCCC"> linux kernel for every</font>

617
00:27:55,510 --> 00:28:00,610
adaptive mutex<font color="#E5E5E5"> acquire so what it does</font>

618
00:27:58,269 --> 00:28:03,279
this one<font color="#CCCCCC"> liner it collects all stacks</font>

619
00:28:00,610 --> 00:28:06,699
<font color="#E5E5E5">counts them so this is the stack which</font>

620
00:28:03,279 --> 00:28:09,039
was the hottest who was successfully

621
00:28:06,700 --> 00:28:11,620
acquired new tags<font color="#CCCCCC"> during the time I was</font>

622
00:28:09,039 --> 00:28:13,389
<font color="#CCCCCC">running this</font><font color="#E5E5E5"> one-liner the best thing is</font>

623
00:28:11,620 --> 00:28:16,059
it works on Mac OS and<font color="#E5E5E5"> Soares</font><font color="#CCCCCC"> too</font>

624
00:28:13,389 --> 00:28:19,479
because we add the<font color="#CCCCCC"> SCT</font><font color="#E5E5E5"> providers in the</font>

625
00:28:16,059 --> 00:28:21,129
same way so that's<font color="#CCCCCC"> the point</font><font color="#E5E5E5"> that's</font>

626
00:28:19,480 --> 00:28:25,809
another part of<font color="#E5E5E5"> our work is to</font><font color="#CCCCCC"> create it</font>

627
00:28:21,130 --> 00:28:29,580
is to create it to<font color="#E5E5E5"> really up Linux to</font>

628
00:28:25,809 --> 00:28:33,129
the other family of operating systems

629
00:28:29,580 --> 00:28:36,960
here is another<font color="#E5E5E5"> equivalent but this time</font>

630
00:28:33,130 --> 00:28:41,649
we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> TCP providers so for every</font>

631
00:28:36,960 --> 00:28:44,169
receive<font color="#CCCCCC"> TCP receive event internals</font>

632
00:28:41,649 --> 00:28:45,939
we aggregate now<font color="#E5E5E5"> you can see there is a</font>

633
00:28:44,169 --> 00:28:48,460
pipe argument<font color="#E5E5E5"> I don't have the details</font>

634
00:28:45,940 --> 00:28:51,940
<font color="#E5E5E5">here but it allows you to get a source</font>

635
00:28:48,460 --> 00:28:54,940
IP address<font color="#E5E5E5"> and you can see we use a</font>

636
00:28:51,940 --> 00:28:59,010
different aggregating function now it is

637
00:28:54,940 --> 00:29:00,190
quantized<font color="#E5E5E5"> which</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> creates an</font>

638
00:28:59,010 --> 00:29:03,340
exponentially

639
00:29:00,190 --> 00:29:06,220
<font color="#E5E5E5">of power of two sized buckets</font>

640
00:29:03,340 --> 00:29:08,919
and uses its argument<font color="#E5E5E5"> and increments</font>

641
00:29:06,220 --> 00:29:12,460
count in each bucket<font color="#CCCCCC"> it fits</font><font color="#E5E5E5"> so you can</font>

642
00:29:08,920 --> 00:29:15,610
see I was at the time<font color="#E5E5E5"> just</font><font color="#CCCCCC"> anti-parallel</font>

643
00:29:12,460 --> 00:29:17,460
<font color="#CCCCCC">ssh to my machine</font><font color="#E5E5E5"> so this was some</font>

644
00:29:15,610 --> 00:29:20,229
slight traffic<font color="#E5E5E5"> and you can see I have a</font>

645
00:29:17,460 --> 00:29:24,160
<font color="#CCCCCC">1/1</font><font color="#E5E5E5"> pocket between</font><font color="#CCCCCC"> one kilobyte and</font><font color="#E5E5E5"> two</font>

646
00:29:20,230 --> 00:29:26,890
<font color="#E5E5E5">kilobytes but most of them were</font><font color="#CCCCCC"> like 32</font>

647
00:29:24,160 --> 00:29:30,190
to 64<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you don't have an exact size</font>

648
00:29:26,890 --> 00:29:33,700
<font color="#E5E5E5">but you see some histogram or</font>

649
00:29:30,190 --> 00:29:35,890
or how or<font color="#CCCCCC"> distribution of the values</font>

650
00:29:33,700 --> 00:29:38,800
<font color="#E5E5E5">it's very useful for various i/o stuff</font>

651
00:29:35,890 --> 00:29:41,710
and<font color="#E5E5E5"> also this is printed for each</font>

652
00:29:38,800 --> 00:29:43,030
<font color="#E5E5E5">address in the aggregation so if I would</font>

653
00:29:41,710 --> 00:29:44,890
have<font color="#E5E5E5"> a multiple power connection you</font>

654
00:29:43,030 --> 00:29:49,899
would<font color="#E5E5E5"> see different source IPS with the</font>

655
00:29:44,890 --> 00:29:52,750
different histogram inside it so now<font color="#E5E5E5"> a</font>

656
00:29:49,900 --> 00:29:54,820
<font color="#E5E5E5">different example typically from from</font>

657
00:29:52,750 --> 00:29:56,350
the support case like someone wakes you

658
00:29:54,820 --> 00:29:58,870
up and<font color="#CCCCCC"> just say hey something's going on</font>

659
00:29:56,350 --> 00:30:00,159
with my machine<font color="#E5E5E5"> tell me what it is good</font>

660
00:29:58,870 --> 00:30:03,070
you<font color="#CCCCCC"> don't know the Machine you don't</font>

661
00:30:00,160 --> 00:30:04,780
think about<font color="#E5E5E5"> the environment</font><font color="#CCCCCC"> so what</font>

662
00:30:03,070 --> 00:30:08,139
details is very good at is to narrowing

663
00:30:04,780 --> 00:30:11,379
<font color="#E5E5E5">your viewing field so you know where to</font>

664
00:30:08,140 --> 00:30:13,210
focus<font color="#E5E5E5"> so again still I'm using one line</font>

665
00:30:11,380 --> 00:30:16,810
as I haven't<font color="#CCCCCC"> brought any single</font><font color="#E5E5E5"> complex</font>

666
00:30:13,210 --> 00:30:19,270
script well yeah this<font color="#E5E5E5"> is a bit risky but</font>

667
00:30:16,810 --> 00:30:24,190
basically<font color="#E5E5E5"> this script instruments every</font>

668
00:30:19,270 --> 00:30:26,139
<font color="#E5E5E5">kernel function entry point</font><font color="#CCCCCC"> and I use</font>

669
00:30:24,190 --> 00:30:28,090
the built-in variable<font color="#E5E5E5"> as I said the</font>

670
00:30:26,140 --> 00:30:29,890
probe is at Apple<font color="#E5E5E5"> so we have a built-in</font>

671
00:30:28,090 --> 00:30:31,780
<font color="#CCCCCC">variable which can</font><font color="#E5E5E5"> you access which</font>

672
00:30:29,890 --> 00:30:33,550
allows you access to<font color="#E5E5E5"> the part of the top</font>

673
00:30:31,780 --> 00:30:35,200
of the probe definition which<font color="#E5E5E5"> is quite</font>

674
00:30:33,550 --> 00:30:38,680
effective<font color="#CCCCCC"> because each time the probe</font>

675
00:30:35,200 --> 00:30:41,800
<font color="#CCCCCC">wires you</font><font color="#E5E5E5"> know what is</font><font color="#CCCCCC"> their name and we</font>

676
00:30:38,680 --> 00:30:44,620
aggregated<font color="#E5E5E5"> by the module where the probe</font>

677
00:30:41,800 --> 00:30:49,050
presides<font color="#E5E5E5"> so I just run it for a while</font>

678
00:30:44,620 --> 00:30:52,719
terminate and boom surprisingly<font color="#CCCCCC"> VM</font><font color="#E5E5E5"> Linux</font>

679
00:30:49,050 --> 00:30:55,510
is yeah well biggest candidate you<font color="#E5E5E5"> can't</font>

680
00:30:52,720 --> 00:30:59,080
see but<font color="#E5E5E5"> it's like seven hundred thousand</font>

681
00:30:55,510 --> 00:31:01,840
times<font color="#CCCCCC"> been hit something from VM UNIX so</font>

682
00:30:59,080 --> 00:31:05,320
the next step is<font color="#E5E5E5"> okay so what the kernel</font>

683
00:31:01,840 --> 00:31:07,780
is doing and we<font color="#CCCCCC"> just restrict the FBT</font>

684
00:31:05,320 --> 00:31:11,860
probes to<font color="#E5E5E5"> the kernel itself and start</font>

685
00:31:07,780 --> 00:31:13,149
aggregating<font color="#E5E5E5"> by the G function yeah you</font>

686
00:31:11,860 --> 00:31:16,029
can use<font color="#CCCCCC"> wildcards so you can use</font>

687
00:31:13,150 --> 00:31:17,889
something like<font color="#E5E5E5"> VM Linux</font>

688
00:31:16,029 --> 00:31:19,989
<font color="#CCCCCC">Oster</font><font color="#E5E5E5"> days or if you leave it empty</font>

689
00:31:17,889 --> 00:31:22,359
details so much everything it's<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a</font>

690
00:31:19,989 --> 00:31:25,059
<font color="#CCCCCC">wild card</font><font color="#E5E5E5"> so it this matches every</font><font color="#CCCCCC"> entry</font>

691
00:31:22,359 --> 00:31:26,830
symbol from the<font color="#E5E5E5"> kernel itself and we</font>

692
00:31:25,059 --> 00:31:28,899
aggregate by<font color="#CCCCCC"> ad function which is</font>

693
00:31:26,830 --> 00:31:33,968
exactly the<font color="#E5E5E5"> missing point in the probe</font>

694
00:31:28,899 --> 00:31:36,939
description<font color="#E5E5E5"> so what you get you find out</font>

695
00:31:33,969 --> 00:31:38,190
<font color="#CCCCCC">that this is the</font><font color="#E5E5E5"> hottest function caught</font>

696
00:31:36,940 --> 00:31:42,039
in the kernel

697
00:31:38,190 --> 00:31:43,599
yeah well this is this<font color="#E5E5E5"> is something I</font>

698
00:31:42,039 --> 00:31:46,570
have changed recently because I<font color="#E5E5E5"> moved</font>

699
00:31:43,599 --> 00:31:48,939
from interrupt handling<font color="#E5E5E5"> to look</font><font color="#CCCCCC"> for</font>

700
00:31:46,570 --> 00:31:50,649
algorithm and<font color="#CCCCCC"> resolve this this will be</font>

701
00:31:48,940 --> 00:31:51,909
<font color="#E5E5E5">always the hottest because we look we</font>

702
00:31:50,649 --> 00:31:54,488
are<font color="#CCCCCC"> looking in</font><font color="#E5E5E5"> the kernel itself the</font>

703
00:31:51,909 --> 00:31:55,960
machine was<font color="#CCCCCC"> idle so let's take a look</font>

704
00:31:54,489 --> 00:31:58,539
for the stinking part because someone

705
00:31:55,960 --> 00:32:01,529
was<font color="#E5E5E5"> calling</font><font color="#CCCCCC"> stinkums are like 12,000</font>

706
00:31:58,539 --> 00:32:04,450
times so your next<font color="#CCCCCC"> question is usually</font>

707
00:32:01,529 --> 00:32:07,450
why<font color="#E5E5E5"> why are we calling sinkhole</font><font color="#CCCCCC"> parts so</font>

708
00:32:04,450 --> 00:32:08,019
often<font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see we again</font>

709
00:32:07,450 --> 00:32:09,999
narrowing down

710
00:32:08,019 --> 00:32:12,609
<font color="#CCCCCC">FBT description and start aggregating</font>

711
00:32:09,999 --> 00:32:14,649
based on stacks so this is just the

712
00:32:12,609 --> 00:32:17,559
hottest stack which was<font color="#CCCCCC"> auto</font><font color="#E5E5E5"> top with</font>

713
00:32:14,649 --> 00:32:19,839
the<font color="#E5E5E5"> highest</font><font color="#CCCCCC"> number and you can see we</font>

714
00:32:17,559 --> 00:32:21,339
are<font color="#CCCCCC"> doing some security context</font><font color="#E5E5E5"> to sit</font>

715
00:32:19,839 --> 00:32:24,700
compulsion which is probably<font color="#E5E5E5"> based on</font>

716
00:32:21,339 --> 00:32:26,678
<font color="#CCCCCC">sync compare</font><font color="#E5E5E5"> but most importantly if you</font>

717
00:32:24,700 --> 00:32:30,159
<font color="#E5E5E5">go bottom to the stack it calls from</font>

718
00:32:26,679 --> 00:32:35,049
open<font color="#E5E5E5"> Cisco so it is a result of a user</font>

719
00:32:30,159 --> 00:32:37,029
<font color="#E5E5E5">space activity so at this point you need</font>

720
00:32:35,049 --> 00:32:38,859
to<font color="#E5E5E5"> know who the hell in the user</font><font color="#CCCCCC"> space</font>

721
00:32:37,029 --> 00:32:42,639
is doing so much this cost<font color="#E5E5E5"> so I switch</font>

722
00:32:38,859 --> 00:32:44,799
<font color="#E5E5E5">your provider use the open probe open</font>

723
00:32:42,639 --> 00:32:47,349
<font color="#CCCCCC">Cisco probe and aggregate based on</font>

724
00:32:44,799 --> 00:32:50,799
<font color="#E5E5E5">process ID and exact name Wow</font>

725
00:32:47,349 --> 00:32:53,889
it's the trace and it is done<font color="#E5E5E5"> hundred</font>

726
00:32:50,799 --> 00:32:55,950
twenty eight times<font color="#E5E5E5"> interesting so what</font>

727
00:32:53,889 --> 00:32:59,199
next

728
00:32:55,950 --> 00:33:02,440
keep the<font color="#E5E5E5"> Cisco but we're a stick it to</font>

729
00:32:59,200 --> 00:33:05,440
the<font color="#E5E5E5"> D trace itself and aggregate based</font>

730
00:33:02,440 --> 00:33:07,629
on the first argument<font color="#E5E5E5"> of the open Cisco</font>

731
00:33:05,440 --> 00:33:09,909
<font color="#E5E5E5">because the argument lives in user space</font>

732
00:33:07,629 --> 00:33:12,699
we need to use<font color="#CCCCCC"> copper in string to get</font>

733
00:33:09,909 --> 00:33:16,210
it to the kernels<font color="#CCCCCC"> so details can work on</font>

734
00:33:12,700 --> 00:33:18,279
it so this<font color="#CCCCCC"> is one way</font><font color="#E5E5E5"> you can do all</font>

735
00:33:16,210 --> 00:33:21,249
because we have<font color="#CCCCCC"> narrowed the field down</font>

736
00:33:18,279 --> 00:33:22,899
<font color="#E5E5E5">you can pick your tool because probably</font>

737
00:33:21,249 --> 00:33:25,389
maybe you know<font color="#E5E5E5"> better than I have got to</font>

738
00:33:22,899 --> 00:33:26,830
how to debug<font color="#E5E5E5"> the stuff and you will see</font>

739
00:33:25,389 --> 00:33:29,949
<font color="#E5E5E5">most of</font><font color="#CCCCCC"> the time it was opening</font>

740
00:33:26,830 --> 00:33:32,379
something<font color="#E5E5E5"> like this because in the DTH</font>

741
00:33:29,950 --> 00:33:34,659
a call which does be online and<font color="#CCCCCC"> checks</font>

742
00:33:32,380 --> 00:33:36,880
for<font color="#E5E5E5"> how many available CPUs to have on a</font>

743
00:33:34,659 --> 00:33:39,330
system and that's<font color="#E5E5E5"> ever implemented by</font>

744
00:33:36,880 --> 00:33:42,789
iterating over this kind of path

745
00:33:39,330 --> 00:33:48,070
<font color="#E5E5E5">checking</font><font color="#CCCCCC"> for some reason 128 CPUs on my</font>

746
00:33:42,789 --> 00:33:51,610
H CPU sized<font color="#E5E5E5"> VM if there would be a user</font>

747
00:33:48,070 --> 00:33:53,799
<font color="#E5E5E5">space implemented we could follow with</font>

748
00:33:51,610 --> 00:33:55,570
<font color="#CCCCCC">the user space stacks directly from this</font>

749
00:33:53,799 --> 00:33:59,470
example<font color="#E5E5E5"> details and just switch</font><font color="#CCCCCC"> towards</font>

750
00:33:55,570 --> 00:34:02,168
the user space tracing so<font color="#CCCCCC"> weekly we are</font>

751
00:33:59,470 --> 00:34:06,340
running out of<font color="#CCCCCC"> time so now</font><font color="#E5E5E5"> this could be</font>

752
00:34:02,169 --> 00:34:10,450
small complex<font color="#E5E5E5"> but average Cisco at</font>

753
00:34:06,340 --> 00:34:13,179
<font color="#E5E5E5">threated</font><font color="#CCCCCC"> us we set</font><font color="#E5E5E5"> a separate variable</font><font color="#CCCCCC"> t</font>

754
00:34:10,449 --> 00:34:15,730
<font color="#CCCCCC">2</font><font color="#E5E5E5"> 1 1 we return from the open Cisco we</font>

755
00:34:13,179 --> 00:34:18,490
set it<font color="#CCCCCC"> to 0 then we trace every kernel</font>

756
00:34:15,730 --> 00:34:21,190
function for every thread that has this

757
00:34:18,489 --> 00:34:22,750
value set even though it doesn't<font color="#E5E5E5"> have an</font>

758
00:34:21,190 --> 00:34:25,270
action<font color="#E5E5E5"> so basically we have</font><font color="#CCCCCC"> bucketed</font>

759
00:34:22,750 --> 00:34:30,520
some execution between open and and<font color="#CCCCCC"> /</font>

760
00:34:25,270 --> 00:34:32,168
<font color="#CCCCCC">Cisco</font><font color="#E5E5E5"> and if we use -</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> for details it</font>

761
00:34:30,520 --> 00:34:35,109
will change the printing<font color="#E5E5E5"> star to show</font>

762
00:34:32,168 --> 00:34:38,230
you how you entered and<font color="#E5E5E5"> return from the</font>

763
00:34:35,109 --> 00:34:40,509
probes so you can see on CPU 3 we start

764
00:34:38,230 --> 00:34:41,800
with Cisco open we<font color="#CCCCCC"> entered</font><font color="#E5E5E5"> Cisco open</font>

765
00:34:40,510 --> 00:34:43,929
<font color="#E5E5E5">this is basically</font><font color="#CCCCCC"> everything that</font><font color="#E5E5E5"> has</font>

766
00:34:41,800 --> 00:34:47,109
<font color="#E5E5E5">been called</font><font color="#CCCCCC"> the collide code flow</font><font color="#E5E5E5"> in</font>

767
00:34:43,929 --> 00:34:50,679
<font color="#CCCCCC">between this is another nice feature if</font>

768
00:34:47,109 --> 00:34:53,759
you<font color="#CCCCCC"> want to see some part of God for</font>

769
00:34:50,679 --> 00:34:53,760
execution in a car now

770
00:34:54,300 --> 00:34:59,280
yeah<font color="#E5E5E5"> the last thing</font><font color="#CCCCCC"> is completely</font>

771
00:34:56,280 --> 00:35:00,600
<font color="#CCCCCC">different like let's</font><font color="#E5E5E5"> say you have some</font>

772
00:34:59,280 --> 00:35:05,640
telematics this time you want to<font color="#E5E5E5"> see</font>

773
00:35:00,600 --> 00:35:08,339
<font color="#E5E5E5">fancy graphs and so on so how much reads</font>

774
00:35:05,640 --> 00:35:11,549
and<font color="#E5E5E5"> writes</font><font color="#CCCCCC"> GCC and</font><font color="#E5E5E5"> LD does during</font>

775
00:35:08,340 --> 00:35:12,870
<font color="#CCCCCC">Colonel compilation this is</font><font color="#E5E5E5"> kind of</font>

776
00:35:11,550 --> 00:35:16,830
limitation in<font color="#CCCCCC"> the language with this</font>

777
00:35:12,870 --> 00:35:18,270
hack it is not a nice stuff<font color="#CCCCCC"> but you have</font>

778
00:35:16,830 --> 00:35:21,230
to add<font color="#E5E5E5"> everything four times for the</font>

779
00:35:18,270 --> 00:35:25,230
<font color="#E5E5E5">retried and different process but</font>

780
00:35:21,230 --> 00:35:28,680
<font color="#E5E5E5">important thing is each</font><font color="#CCCCCC"> one second we</font>

781
00:35:25,230 --> 00:35:31,920
create<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like dtrace dog GCC</font><font color="#E5E5E5"> dog</font>

782
00:35:28,680 --> 00:35:35,160
bride<font color="#E5E5E5"> and use the amount of</font><font color="#CCCCCC"> rights we</font>

783
00:35:31,920 --> 00:35:36,930
<font color="#E5E5E5">have accumulated then I add a timestamp</font>

784
00:35:35,160 --> 00:35:38,490
<font color="#E5E5E5">at the end of it and just</font><font color="#CCCCCC"> click</font><font color="#E5E5E5"> the</font>

785
00:35:36,930 --> 00:35:41,790
<font color="#E5E5E5">aggregation</font><font color="#CCCCCC"> so current starts</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> zero</font>

786
00:35:38,490 --> 00:35:44,240
<font color="#CCCCCC">so we now have one second based numbers</font>

787
00:35:41,790 --> 00:35:47,340
<font color="#E5E5E5">getting</font><font color="#CCCCCC"> out of</font><font color="#E5E5E5"> this and because</font><font color="#CCCCCC"> this is</font>

788
00:35:44,240 --> 00:35:50,310
accidentally format of the<font color="#CCCCCC"> graphic</font>

789
00:35:47,340 --> 00:35:52,890
database there<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> carbone parser which</font>

790
00:35:50,310 --> 00:35:56,130
understands exactly<font color="#CCCCCC"> this so I</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> run</font>

791
00:35:52,890 --> 00:35:58,859
<font color="#CCCCCC">the DTrace with my ad hoc created matrix</font>

792
00:35:56,130 --> 00:36:00,270
<font color="#E5E5E5">pass it we applied</font><font color="#CCCCCC"> to net cut and send</font>

793
00:35:58,860 --> 00:36:02,600
it somewhere to database and from

794
00:36:00,270 --> 00:36:05,570
somewhere else<font color="#CCCCCC"> you will start seeing</font>

795
00:36:02,600 --> 00:36:07,890
<font color="#CCCCCC">peers</font><font color="#E5E5E5"> when I started building the kernel</font>

796
00:36:05,570 --> 00:36:10,290
yeah and here is where the link time

797
00:36:07,890 --> 00:36:12,180
happened and because<font color="#CCCCCC"> kinda has like 300</font>

798
00:36:10,290 --> 00:36:15,600
megabytes and<font color="#E5E5E5"> there are two in our case</font>

799
00:36:12,180 --> 00:36:17,970
three rounds<font color="#E5E5E5"> of linking it's like here</font>

800
00:36:15,600 --> 00:36:20,509
but<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see I can't show</font><font color="#E5E5E5"> you on the</font>

801
00:36:17,970 --> 00:36:20,509
computer

802
00:36:21,390 --> 00:36:27,170
yeah<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> just wake on</font><font color="#E5E5E5"> but questions</font>

803
00:36:27,300 --> 00:36:36,550
[Applause]

804
00:36:36,800 --> 00:36:39,949
[Music]

805
00:36:41,990 --> 00:36:48,149
<font color="#CCCCCC">because they</font><font color="#E5E5E5"> are tied to the user space</font>

806
00:36:44,630 --> 00:36:53,040
well if there is<font color="#CCCCCC"> a us DT then</font><font color="#E5E5E5"> then the</font>

807
00:36:48,150 --> 00:36:54,840
yes<font color="#E5E5E5"> but I think</font><font color="#CCCCCC"> on Suns Java there's an</font>

808
00:36:53,040 --> 00:36:58,320
option which forces the<font color="#E5E5E5"> G to generate</font>

809
00:36:54,840 --> 00:37:02,190
the<font color="#CCCCCC"> s DD instrumented code</font><font color="#E5E5E5"> I'm not so</font>

810
00:36:58,320 --> 00:37:04,530
sure<font color="#E5E5E5"> about the open JDK well I I</font><font color="#CCCCCC"> think</font>

811
00:37:02,190 --> 00:37:06,000
<font color="#E5E5E5">curve and BCC</font><font color="#CCCCCC"> and other tools do</font>

812
00:37:04,530 --> 00:37:08,060
something about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so I but there will</font>

813
00:37:06,000 --> 00:37:08,060
be

814
00:37:19,040 --> 00:37:22,950
you<font color="#E5E5E5"> there's an option</font><font color="#CCCCCC"> for the dtrace</font>

815
00:37:21,420 --> 00:37:24,960
command which will dump<font color="#E5E5E5"> you this</font>

816
00:37:22,950 --> 00:37:32,640
assembly in<font color="#E5E5E5"> the diff language which you</font>

817
00:37:24,960 --> 00:37:35,190
<font color="#CCCCCC">can loop the only thing you can operate</font>

818
00:37:32,640 --> 00:37:37,650
with<font color="#CCCCCC"> it is DJ itself and it's</font><font color="#E5E5E5"> always a</font>

819
00:37:35,190 --> 00:37:49,770
<font color="#E5E5E5">plane so usually we need to</font><font color="#CCCCCC"> bridge it</font>

820
00:37:37,650 --> 00:37:52,020
<font color="#E5E5E5">from sources be quite patient well</font>

821
00:37:49,770 --> 00:37:54,060
basically we do similar<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that kpop</font>

822
00:37:52,020 --> 00:37:55,740
do so if<font color="#E5E5E5"> you access something invalid we</font>

823
00:37:54,060 --> 00:37:57,690
have a<font color="#E5E5E5"> hoop in general production for</font>

824
00:37:55,740 --> 00:37:59,910
page fault handler<font color="#E5E5E5"> there's a kernel</font>

825
00:37:57,690 --> 00:38:04,550
layer of the details and the<font color="#CCCCCC"> action now</font>

826
00:37:59,910 --> 00:38:06,899
I'm<font color="#E5E5E5"> working on</font><font color="#CCCCCC"> nm</font><font color="#E5E5E5"> eyes on x86 and</font>

827
00:38:04,550 --> 00:38:09,840
because it just<font color="#E5E5E5"> ends</font><font color="#CCCCCC"> up with random</font>

828
00:38:06,900 --> 00:38:14,970
corruption or registers and you need to

829
00:38:09,840 --> 00:38:17,370
find something clever no details like

830
00:38:14,970 --> 00:38:19,649
<font color="#CCCCCC">connect doesn't have a straight</font><font color="#E5E5E5"> is there</font>

831
00:38:17,370 --> 00:38:25,740
a need<font color="#CCCCCC"> for a TD tree script that can use</font>

832
00:38:19,650 --> 00:38:27,560
to do<font color="#E5E5E5"> some</font><font color="#CCCCCC"> Ewing or Mac well on Mac I</font>

833
00:38:25,740 --> 00:38:30,299
<font color="#CCCCCC">think</font>

834
00:38:27,560 --> 00:38:32,370
Regt script<font color="#E5E5E5"> I think on Mac the answer is</font>

835
00:38:30,300 --> 00:38:34,320
the expo because<font color="#CCCCCC"> expertise using a lot</font>

836
00:38:32,370 --> 00:38:36,569
<font color="#CCCCCC">details</font><font color="#E5E5E5"> for the iPhone development and</font>

837
00:38:34,320 --> 00:38:38,130
<font color="#CCCCCC">most measurements of</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> application so</font>

838
00:38:36,570 --> 00:38:40,950
I don't<font color="#E5E5E5"> think</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> library of</font>

839
00:38:38,130 --> 00:38:45,180
<font color="#CCCCCC">Spitler I just wonder if</font><font color="#E5E5E5"> there's some</font>

840
00:38:40,950 --> 00:38:51,439
simple<font color="#E5E5E5"> script that it just broke</font><font color="#CCCCCC"> assist</font>

841
00:38:45,180 --> 00:38:55,350
[Music]

842
00:38:51,440 --> 00:38:57,860
<font color="#CCCCCC">and you need this to you - Cisco</font>

843
00:38:55,350 --> 00:39:03,529
provider<font color="#CCCCCC"> yeah Mabel everything</font>

844
00:38:57,860 --> 00:39:03,530
winter-like<font color="#CCCCCC"> about these different sense</font>

845
00:39:05,630 --> 00:39:09,660
so you can use the printer because hand

846
00:39:07,920 --> 00:39:13,440
should<font color="#E5E5E5"> you see I have to write that no</font>

847
00:39:09,660 --> 00:39:15,420
one<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> it's like four</font><font color="#E5E5E5"> lines of</font>

848
00:39:13,440 --> 00:39:16,950
code<font color="#E5E5E5"> probably doesn't doesn't</font><font color="#CCCCCC"> make okay</font>

849
00:39:15,420 --> 00:39:18,330
people<font color="#CCCCCC"> just write it just for either</font>

850
00:39:16,950 --> 00:39:21,200
<font color="#E5E5E5">okay I thought it would be something</font>

851
00:39:18,330 --> 00:39:23,009
<font color="#E5E5E5">simple then there used to be sonically</font>

852
00:39:21,200 --> 00:39:25,879
there<font color="#E5E5E5"> was used to be something called</font>

853
00:39:23,010 --> 00:39:25,880
<font color="#CCCCCC">dtrace toolkit</font>

854
00:39:34,300 --> 00:39:40,249
it's not<font color="#CCCCCC"> something</font>

855
00:39:37,249 --> 00:39:40,249
okay

