1
00:00:06,670 --> 00:00:29,659
look up okay<font color="#CCCCCC"> welcome</font>

2
00:00:24,520 --> 00:00:34,489
well let's start<font color="#E5E5E5"> with me who I</font><font color="#CCCCCC"> am</font>

3
00:00:29,660 --> 00:00:38,960
<font color="#E5E5E5">I contribute to quite a bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

4
00:00:34,489 --> 00:00:45,199
open<font color="#E5E5E5"> source project gentle vidalin liebe</font>

5
00:00:38,960 --> 00:00:47,719
V<font color="#CCCCCC"> Roth directly VPX</font><font color="#E5E5E5"> x264 so my</font>

6
00:00:45,200 --> 00:00:50,300
experience is mostly on<font color="#E5E5E5"> everything that</font>

7
00:00:47,719 --> 00:00:53,750
<font color="#E5E5E5">goes from fixing random software that</font>

8
00:00:50,300 --> 00:00:55,610
<font color="#E5E5E5">can stop broken because of gentle since</font>

9
00:00:53,750 --> 00:00:58,489
we build everything from source<font color="#CCCCCC"> if the</font>

10
00:00:55,610 --> 00:01:01,579
source break with that compiler we have

11
00:00:58,489 --> 00:01:05,410
to fix it<font color="#CCCCCC"> I have a quite an experience</font>

12
00:01:01,579 --> 00:01:11,210
with multimedia<font color="#E5E5E5"> brought on fixing bugs</font>

13
00:01:05,410 --> 00:01:14,090
getting<font color="#E5E5E5"> stuff built designing api's</font><font color="#CCCCCC"> I</font>

14
00:01:11,210 --> 00:01:18,439
started to get my hands<font color="#E5E5E5"> dirty directly</font>

15
00:01:14,090 --> 00:01:23,990
with the<font color="#CCCCCC"> Russ compiler</font><font color="#E5E5E5"> and today I'm</font>

16
00:01:18,439 --> 00:01:27,408
going to talk to you about multimedia

17
00:01:23,990 --> 00:01:30,789
<font color="#CCCCCC">and</font><font color="#E5E5E5"> Russ as in writing</font><font color="#CCCCCC"> a multimedia</font>

18
00:01:27,409 --> 00:01:30,790
framework<font color="#CCCCCC"> impure rust</font>

19
00:01:35,350 --> 00:01:45,320
why to do that<font color="#CCCCCC"> I guess</font><font color="#E5E5E5"> you all know</font>

20
00:01:40,340 --> 00:01:49,160
already that Russ is<font color="#E5E5E5"> touted as a quite</font>

21
00:01:45,320 --> 00:01:51,770
safe language<font color="#E5E5E5"> that is still for system</font>

22
00:01:49,160 --> 00:01:55,850
programming<font color="#E5E5E5"> and it's supposed to be</font>

23
00:01:51,770 --> 00:01:58,310
quite fast<font color="#E5E5E5"> and quite</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> for writing</font>

24
00:01:55,850 --> 00:02:01,820
threaded code Multimedia's fee loved it

25
00:01:58,310 --> 00:02:04,100
<font color="#CCCCCC">and I say give you some guarantees that</font>

26
00:02:01,820 --> 00:02:07,399
<font color="#CCCCCC">what</font><font color="#E5E5E5"> you're writing is</font><font color="#CCCCCC"> not going to</font>

27
00:02:04,100 --> 00:02:13,160
explode just<font color="#E5E5E5"> because you happen to feed</font>

28
00:02:07,400 --> 00:02:16,700
it to the wrong pointer<font color="#CCCCCC"> what idea why</font>

29
00:02:13,160 --> 00:02:20,690
<font color="#E5E5E5">not</font><font color="#CCCCCC"> going the other way</font><font color="#E5E5E5"> so replacing</font>

30
00:02:16,700 --> 00:02:25,369
<font color="#E5E5E5">just some piece</font><font color="#CCCCCC"> of an existing framework</font>

31
00:02:20,690 --> 00:02:28,730
with<font color="#E5E5E5"> Russ well Russ is also good to</font>

32
00:02:25,370 --> 00:02:32,450
<font color="#CCCCCC">writing better api's because the way</font>

33
00:02:28,730 --> 00:02:37,730
<font color="#E5E5E5">brass works</font><font color="#CCCCCC"> make you easier to describe</font>

34
00:02:32,450 --> 00:02:41,480
concept so why not start writing a good

35
00:02:37,730 --> 00:02:44,420
API<font color="#CCCCCC"> write</font><font color="#E5E5E5"> possibly good code and</font>

36
00:02:41,480 --> 00:02:46,070
leverage the whole<font color="#CCCCCC"> language and actually</font>

37
00:02:44,420 --> 00:02:48,500
<font color="#CCCCCC">try that</font>

38
00:02:46,070 --> 00:02:51,350
what is<font color="#E5E5E5"> the currently touted about rust</font>

39
00:02:48,500 --> 00:02:54,680
<font color="#E5E5E5">is actual real and working for</font>

40
00:02:51,350 --> 00:02:58,519
multimedia so the main idea<font color="#CCCCCC"> is that I</font>

41
00:02:54,680 --> 00:02:59,320
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make a framework that is easy to</font>

42
00:02:58,519 --> 00:03:03,190
<font color="#CCCCCC">use</font>

43
00:02:59,320 --> 00:03:09,320
possibly fast<font color="#E5E5E5"> and</font><font color="#CCCCCC"> transporting so</font>

44
00:03:03,190 --> 00:03:11,329
<font color="#E5E5E5">possibly less</font><font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> less CVEs less bad</font>

45
00:03:09,320 --> 00:03:17,540
situation because<font color="#E5E5E5"> you you play your</font>

46
00:03:11,330 --> 00:03:20,540
movie and<font color="#E5E5E5"> something that happens is it</font>

47
00:03:17,540 --> 00:03:23,030
<font color="#E5E5E5">use do we have other frameworks that are</font>

48
00:03:20,540 --> 00:03:27,260
<font color="#E5E5E5">easy to use we have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> problem with</font>

49
00:03:23,030 --> 00:03:29,780
multimedia<font color="#E5E5E5"> multimedia is lots of easy to</font>

50
00:03:27,260 --> 00:03:31,880
grasp concept with many many many

51
00:03:29,780 --> 00:03:34,519
different queries and details<font color="#E5E5E5"> that you</font>

52
00:03:31,880 --> 00:03:36,980
have to work around so usually the

53
00:03:34,519 --> 00:03:39,950
framework if it's easy is quite

54
00:03:36,980 --> 00:03:42,010
opinionated<font color="#E5E5E5"> makes decision for you and</font>

55
00:03:39,950 --> 00:03:44,780
you cannot undo them easily

56
00:03:42,010 --> 00:03:47,239
<font color="#E5E5E5">on the other hand if the framework lets</font>

57
00:03:44,780 --> 00:03:51,220
you do everything that<font color="#CCCCCC"> you could want</font>

58
00:03:47,240 --> 00:03:54,980
<font color="#CCCCCC">then you have to face the complexity and</font>

59
00:03:51,220 --> 00:03:58,910
the<font color="#CCCCCC"> ideas since Russ</font>

60
00:03:54,980 --> 00:04:03,709
give us the this concept of zero<font color="#E5E5E5"> cost</font>

61
00:03:58,910 --> 00:04:06,820
<font color="#CCCCCC">abstraction I can layer</font><font color="#E5E5E5"> my extraction so</font>

62
00:04:03,710 --> 00:04:11,360
I can match your need<font color="#E5E5E5"> regarding</font>

63
00:04:06,820 --> 00:04:13,510
simplicity and well power to do whatever

64
00:04:11,360 --> 00:04:17,570
you want

65
00:04:13,510 --> 00:04:20,959
<font color="#E5E5E5">first</font><font color="#CCCCCC"> sebastian already said that</font><font color="#E5E5E5"> you</font>

66
00:04:17,570 --> 00:04:24,710
<font color="#CCCCCC">can write</font><font color="#E5E5E5"> a dramatic rust that result in</font>

67
00:04:20,959 --> 00:04:27,350
code<font color="#E5E5E5"> that executes fast enough or free</font>

68
00:04:24,710 --> 00:04:33,590
<font color="#E5E5E5">in my experience even faster than</font><font color="#CCCCCC"> you</font>

69
00:04:27,350 --> 00:04:35,350
<font color="#CCCCCC">would expect trustworthy I guess</font>

70
00:04:33,590 --> 00:04:37,219
everybody here<font color="#E5E5E5"> ready here and</font>

71
00:04:35,350 --> 00:04:39,620
<font color="#CCCCCC">experienced the fact that</font><font color="#E5E5E5"> the compiler</font>

72
00:04:37,220 --> 00:04:41,240
prevents you to<font color="#CCCCCC"> make lots and lots of</font>

73
00:04:39,620 --> 00:04:47,660
mistakes that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> quite common if you're</font>

74
00:04:41,240 --> 00:04:51,860
writing C or even<font color="#E5E5E5"> Java what would be</font>

75
00:04:47,660 --> 00:04:57,560
good<font color="#E5E5E5"> but it is an experiment</font><font color="#CCCCCC"> so far as</font>

76
00:04:51,860 --> 00:05:01,130
<font color="#E5E5E5">in</font><font color="#CCCCCC"> I can tell you that so far</font><font color="#E5E5E5"> Russ is</font>

77
00:04:57,560 --> 00:05:04,010
great but it's not<font color="#E5E5E5"> perfect</font><font color="#CCCCCC"> and during</font>

78
00:05:01,130 --> 00:05:05,960
this presentation I<font color="#CCCCCC"> will show you</font><font color="#E5E5E5"> orally</font>

79
00:05:04,010 --> 00:05:08,659
<font color="#E5E5E5">I will tell you what I would like to</font>

80
00:05:05,960 --> 00:05:11,080
have in during this year that is

81
00:05:08,660 --> 00:05:14,060
currently not<font color="#E5E5E5"> available</font>

82
00:05:11,080 --> 00:05:16,760
also since I don't<font color="#E5E5E5"> like to rainbow it</font>

83
00:05:14,060 --> 00:05:19,040
completely the wheel I'm leveraging

84
00:05:16,760 --> 00:05:22,550
<font color="#E5E5E5">other libraries that is part of the</font>

85
00:05:19,040 --> 00:05:24,950
<font color="#CCCCCC">rustico system I mean the in the case</font>

86
00:05:22,550 --> 00:05:28,550
multimedia needs can<font color="#CCCCCC"> be different from</font>

87
00:05:24,950 --> 00:05:31,760
the<font color="#CCCCCC"> needs of other software so even</font>

88
00:05:28,550 --> 00:05:33,670
regarding libraries we have<font color="#E5E5E5"> some</font>

89
00:05:31,760 --> 00:05:35,990
interaction<font color="#E5E5E5"> some patches getting written</font>

90
00:05:33,670 --> 00:05:38,890
sometimes I have to adapt to what

91
00:05:35,990 --> 00:05:43,220
deliberate<font color="#CCCCCC"> there</font><font color="#E5E5E5"> every wants to do</font>

92
00:05:38,890 --> 00:05:45,860
<font color="#E5E5E5">currently in this version we</font><font color="#CCCCCC"> are using a</font>

93
00:05:43,220 --> 00:05:48,610
bit<font color="#E5E5E5"> of</font><font color="#CCCCCC"> nom</font><font color="#E5E5E5"> that I guess you know part</font>

94
00:05:45,860 --> 00:05:52,040
well who doesn't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> gnome</font>

95
00:05:48,610 --> 00:05:54,500
<font color="#E5E5E5">ok enough people probably</font><font color="#CCCCCC"> you don't know</font>

96
00:05:52,040 --> 00:05:58,160
that there is the khaki cookie cutter

97
00:05:54,500 --> 00:06:01,009
<font color="#E5E5E5">that is from the same person</font><font color="#CCCCCC"> that wrote</font>

98
00:05:58,160 --> 00:06:03,680
gnome and does<font color="#E5E5E5"> exactly the opposite</font>

99
00:06:01,009 --> 00:06:11,589
of chewing<font color="#CCCCCC"> bytes and give you structure</font>

100
00:06:03,680 --> 00:06:11,589
<font color="#E5E5E5">to structures and gives you bytes so</font>

101
00:06:12,729 --> 00:06:23,960
what I did<font color="#E5E5E5"> so far</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea for the</font>

102
00:06:19,369 --> 00:06:29,240
toolkit of<font color="#E5E5E5"> framework is that I'd like to</font>

103
00:06:23,960 --> 00:06:31,520
have<font color="#E5E5E5"> it modular so I want that all the</font>

104
00:06:29,240 --> 00:06:35,719
code that<font color="#E5E5E5"> is written for</font><font color="#CCCCCC"> Razavi can be</font>

105
00:06:31,520 --> 00:06:38,779
<font color="#E5E5E5">reduced as much</font><font color="#CCCCCC"> as possible I said</font>

106
00:06:35,719 --> 00:06:41,569
already<font color="#CCCCCC"> I'm trying</font><font color="#E5E5E5"> to use a layered</font>

107
00:06:38,779 --> 00:06:44,870
approach<font color="#E5E5E5"> so if you don't care about</font>

108
00:06:41,569 --> 00:06:47,629
details<font color="#E5E5E5"> you can write your player in few</font>

109
00:06:44,870 --> 00:06:50,990
lines of<font color="#E5E5E5"> code if you do care</font><font color="#CCCCCC"> about</font>

110
00:06:47,629 --> 00:06:56,240
details<font color="#E5E5E5"> you can dig down as deep as</font>

111
00:06:50,990 --> 00:07:00,199
possible<font color="#E5E5E5"> with within reason</font><font color="#CCCCCC"> how I'm</font>

112
00:06:56,240 --> 00:07:03,259
doing that<font color="#CCCCCC"> modular russ as the concept</font>

113
00:07:00,199 --> 00:07:06,740
of<font color="#E5E5E5"> great that works quite well to do</font>

114
00:07:03,259 --> 00:07:09,709
<font color="#E5E5E5">that every</font><font color="#CCCCCC"> single component every single</font>

115
00:07:06,740 --> 00:07:14,779
codec every single format lives in a

116
00:07:09,709 --> 00:07:17,269
standalone<font color="#E5E5E5"> crate then if you want to not</font>

117
00:07:14,779 --> 00:07:22,490
care about<font color="#E5E5E5"> details we have crates that</font>

118
00:07:17,269 --> 00:07:26,300
<font color="#E5E5E5">just</font><font color="#CCCCCC"> reacts port</font><font color="#E5E5E5"> collection of different</font>

119
00:07:22,490 --> 00:07:30,319
formats collection a different codec<font color="#E5E5E5"> if</font>

120
00:07:26,300 --> 00:07:33,680
you want<font color="#E5E5E5"> capabilities instead of</font>

121
00:07:30,319 --> 00:07:38,059
<font color="#E5E5E5">directly using the the codec you can use</font>

122
00:07:33,680 --> 00:07:41,389
a context that<font color="#E5E5E5"> sort of embeds the codec</font>

123
00:07:38,059 --> 00:07:45,319
and gives you some layer of<font color="#CCCCCC"> a structure</font>

124
00:07:41,389 --> 00:07:47,569
<font color="#E5E5E5">to simplify your</font><font color="#CCCCCC"> life</font><font color="#E5E5E5"> for the format you</font>

125
00:07:45,319 --> 00:07:49,969
would you<font color="#E5E5E5"> can feed the format just with</font>

126
00:07:47,569 --> 00:07:51,680
bytes<font color="#E5E5E5"> but</font><font color="#CCCCCC"> usually</font><font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> use a</font>

127
00:07:49,969 --> 00:07:55,129
Europe<font color="#E5E5E5"> you have a contest that take</font>

128
00:07:51,680 --> 00:07:58,939
under your object take your the format

129
00:07:55,129 --> 00:08:01,459
<font color="#CCCCCC">that is supposed to</font><font color="#E5E5E5"> be able to parse it</font>

130
00:07:58,939 --> 00:08:07,279
and then from there you could<font color="#CCCCCC"> just get</font>

131
00:08:01,459 --> 00:08:11,180
packets out<font color="#CCCCCC"> of it with reusable say I</font>

132
00:08:07,279 --> 00:08:13,279
want<font color="#E5E5E5"> to make sure that people like who</font>

133
00:08:11,180 --> 00:08:14,390
is implementing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> streamer do not have</font>

134
00:08:13,279 --> 00:08:18,290
to undo

135
00:08:14,390 --> 00:08:21,710
I choose my choices<font color="#E5E5E5"> about what what</font>

136
00:08:18,290 --> 00:08:25,580
should be done so they<font color="#E5E5E5"> can just wiring</font>

137
00:08:21,710 --> 00:08:31,250
directly in the specific called<font color="#CCCCCC"> akan</font>

138
00:08:25,580 --> 00:08:34,159
<font color="#CCCCCC">format that should be helpful what we</font>

139
00:08:31,250 --> 00:08:38,110
have so far<font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> is that we</font><font color="#E5E5E5"> have</font>

140
00:08:34,159 --> 00:08:43,130
some essential crate<font color="#E5E5E5"> that give us the</font>

141
00:08:38,110 --> 00:08:45,350
basic data types that<font color="#CCCCCC"> are used</font><font color="#E5E5E5"> for</font>

142
00:08:43,130 --> 00:08:48,530
multimedia<font color="#CCCCCC"> so I want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> represent a role</font>

143
00:08:45,350 --> 00:08:52,580
frame<font color="#E5E5E5"> a row frame can contain video</font>

144
00:08:48,530 --> 00:08:56,990
pixel or audio samples and if we are

145
00:08:52,580 --> 00:09:00,110
<font color="#E5E5E5">talking about</font><font color="#CCCCCC"> encoded data we have</font>

146
00:08:56,990 --> 00:09:03,200
packets and that's the basics that's<font color="#E5E5E5"> the</font>

147
00:09:00,110 --> 00:09:07,030
only part that currently everything else

148
00:09:03,200 --> 00:09:11,540
in<font color="#E5E5E5"> rostov</font><font color="#CCCCCC"> II depends on when you are</font>

149
00:09:07,030 --> 00:09:14,709
writing codecs usually want to<font color="#E5E5E5"> read bit</font>

150
00:09:11,540 --> 00:09:20,209
by bit having to deal with codebook

151
00:09:14,710 --> 00:09:23,210
variable length codes and so on<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

152
00:09:20,210 --> 00:09:25,760
another sort of based mostly used<font color="#E5E5E5"> just</font>

153
00:09:23,210 --> 00:09:29,000
<font color="#CCCCCC">for the codecs that he is a bit stream</font>

154
00:09:25,760 --> 00:09:30,680
reader and<font color="#CCCCCC"> writer then we got the core</font>

155
00:09:29,000 --> 00:09:34,520
functionality<font color="#E5E5E5"> so far</font>

156
00:09:30,680 --> 00:09:44,209
<font color="#CCCCCC">Russell II provides you I mean</font><font color="#E5E5E5"> to the</font>

157
00:09:34,520 --> 00:09:47,180
MOOCs<font color="#E5E5E5"> MOOCs decode and encode I say if</font>

158
00:09:44,210 --> 00:09:51,620
you<font color="#E5E5E5"> don't care about details we have</font><font color="#CCCCCC"> an</font>

159
00:09:47,180 --> 00:09:57,560
upper layer we<font color="#CCCCCC"> have a player crate that</font>

160
00:09:51,620 --> 00:09:58,460
<font color="#E5E5E5">just give you the base component just to</font>

161
00:09:57,560 --> 00:10:04,089
have<font color="#E5E5E5"> the playback</font>

162
00:09:58,460 --> 00:10:08,210
I give it an<font color="#CCCCCC"> Reed object I get back</font><font color="#E5E5E5"> my</font>

163
00:10:04,090 --> 00:10:10,970
<font color="#E5E5E5">frames that I can just fit to a CL and I</font>

164
00:10:08,210 --> 00:10:16,640
have my player encoder<font color="#E5E5E5"> same idea</font>

165
00:10:10,970 --> 00:10:19,810
I got frames and I'm getting encoded

166
00:10:16,640 --> 00:10:24,010
data<font color="#CCCCCC"> meta craze</font><font color="#E5E5E5"> the concept of just</font>

167
00:10:19,810 --> 00:10:27,439
making<font color="#CCCCCC"> a sample so you don't</font><font color="#E5E5E5"> have to</font>

168
00:10:24,010 --> 00:10:32,870
think<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to have the</font>

169
00:10:27,440 --> 00:10:35,330
<font color="#CCCCCC">pug Matroska morbus</font><font color="#E5E5E5"> you have just a</font>

170
00:10:32,870 --> 00:10:38,630
<font color="#E5E5E5">jumble</font><font color="#CCCCCC"> you don't care you have</font>

171
00:10:35,330 --> 00:10:41,860
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> we also have some test</font>

172
00:10:38,630 --> 00:10:44,930
programs<font color="#E5E5E5"> and transcoding tool and a</font>

173
00:10:41,860 --> 00:10:49,150
player<font color="#E5E5E5"> tool that is pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> used to</font>

174
00:10:44,930 --> 00:10:49,150
validate<font color="#E5E5E5"> everything that is up there</font>

175
00:10:52,060 --> 00:11:00,920
where<font color="#E5E5E5"> are we so far so far what is done</font>

176
00:10:56,990 --> 00:11:04,340
for<font color="#CCCCCC"> the possibly first release is the</font>

177
00:11:00,920 --> 00:11:06,709
API just<font color="#E5E5E5"> to do that so I say encoding</font>

178
00:11:04,340 --> 00:11:09,680
decoding<font color="#E5E5E5"> maxing the maxing we have</font>

179
00:11:06,710 --> 00:11:12,040
already some codecs we have<font color="#CCCCCC"> non native</font>

180
00:11:09,680 --> 00:11:15,770
<font color="#CCCCCC">cause the codecs that are just</font><font color="#E5E5E5"> wrapping</font>

181
00:11:12,040 --> 00:11:20,390
<font color="#CCCCCC">known libraries from C to R</font><font color="#E5E5E5"> us is quite</font>

182
00:11:15,770 --> 00:11:24,170
easy<font color="#CCCCCC"> I'm working</font><font color="#E5E5E5"> on native codecs so</font>

183
00:11:20,390 --> 00:11:29,060
completely pure rust so I'm experiencing

184
00:11:24,170 --> 00:11:31,699
<font color="#E5E5E5">face fear first how is</font><font color="#CCCCCC"> it going</font><font color="#E5E5E5"> that</font>

185
00:11:29,060 --> 00:11:34,880
kind of level of<font color="#E5E5E5"> detail using just rust</font>

186
00:11:31,700 --> 00:11:38,480
as<font color="#CCCCCC"> a format we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> Matroska</font><font color="#E5E5E5"> and the</font>

187
00:11:34,880 --> 00:11:43,100
programs available<font color="#E5E5E5"> are just those two in</font>

188
00:11:38,480 --> 00:11:46,040
the<font color="#E5E5E5"> future we will have</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> surface</font>

189
00:11:43,100 --> 00:11:49,970
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> do more</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> this</font>

190
00:11:46,040 --> 00:11:54,410
toolkit<font color="#E5E5E5"> we will have more native code we</font>

191
00:11:49,970 --> 00:11:58,790
probably expose more reference<font color="#CCCCCC"> codecs</font>

192
00:11:54,410 --> 00:12:01,189
<font color="#E5E5E5">and we will have more formats for</font><font color="#CCCCCC"> the</font>

193
00:11:58,790 --> 00:12:03,640
next next version we were still even

194
00:12:01,190 --> 00:12:06,970
discussing<font color="#CCCCCC"> about hardware acceleration</font>

195
00:12:03,640 --> 00:12:11,930
<font color="#E5E5E5">so this is more or less the</font><font color="#CCCCCC"> roadmap</font><font color="#E5E5E5"> and</font>

196
00:12:06,970 --> 00:12:16,190
is mostly<font color="#E5E5E5"> related on my time and how</font>

197
00:12:11,930 --> 00:12:17,930
<font color="#CCCCCC">mature</font><font color="#E5E5E5"> rust is for this purpose what do</font>

198
00:12:16,190 --> 00:12:20,600
I mean

199
00:12:17,930 --> 00:12:22,780
rust currently in my experience is a

200
00:12:20,600 --> 00:12:26,180
great language to<font color="#E5E5E5"> write this kind of</font>

201
00:12:22,780 --> 00:12:30,770
software<font color="#E5E5E5"> because the compiler really</font>

202
00:12:26,180 --> 00:12:33,739
helps you you don't have that many

203
00:12:30,770 --> 00:12:37,210
<font color="#E5E5E5">problems in getting performance even if</font>

204
00:12:33,740 --> 00:12:40,880
<font color="#E5E5E5">you're writing</font><font color="#CCCCCC"> high level automatic code</font>

205
00:12:37,210 --> 00:12:43,880
<font color="#CCCCCC">it's quite</font><font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to write</font>

206
00:12:40,880 --> 00:12:45,649
bindings to see so you don't have even

207
00:12:43,880 --> 00:12:50,089
problem in getting<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> you</font>

208
00:12:45,649 --> 00:12:53,199
<font color="#E5E5E5">can compare what</font><font color="#CCCCCC"> is missing and what</font><font color="#E5E5E5"> we</font>

209
00:12:50,089 --> 00:12:56,600
<font color="#E5E5E5">would like to have simply Cindy is</font>

210
00:12:53,199 --> 00:12:59,060
pretty much a need when<font color="#E5E5E5"> you're writing</font>

211
00:12:56,600 --> 00:13:02,509
multimedia because<font color="#E5E5E5"> you need code that is</font>

212
00:12:59,060 --> 00:13:04,910
really fast it's coming<font color="#E5E5E5"> soon</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> coming</font>

213
00:13:02,509 --> 00:13:07,639
point soon and we have<font color="#CCCCCC"> all ready</font><font color="#E5E5E5"> to</font>

214
00:13:04,910 --> 00:13:09,829
inter interesting ways in<font color="#CCCCCC"> nightly to use</font>

215
00:13:07,639 --> 00:13:13,569
<font color="#E5E5E5">it we</font><font color="#CCCCCC"> have faster that is a crate that</font>

216
00:13:09,829 --> 00:13:17,420
<font color="#E5E5E5">let you use</font><font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> it I traitors and</font>

217
00:13:13,569 --> 00:13:20,389
<font color="#E5E5E5">it generates</font><font color="#CCCCCC"> seemed out of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> quite</font><font color="#E5E5E5"> good</font>

218
00:13:17,420 --> 00:13:22,339
<font color="#E5E5E5">because you've write it once and you</font>

219
00:13:20,389 --> 00:13:28,339
sort of<font color="#E5E5E5"> for free something that is</font>

220
00:13:22,339 --> 00:13:32,569
faster<font color="#CCCCCC"> STDs Cindy this part will be part</font>

221
00:13:28,339 --> 00:13:35,509
of STD and<font color="#CCCCCC"> will get you all the power of</font>

222
00:13:32,569 --> 00:13:40,759
<font color="#CCCCCC">the intrinsic that you currently have</font>

223
00:13:35,509 --> 00:13:45,259
<font color="#E5E5E5">like from</font><font color="#CCCCCC"> Syria</font><font color="#E5E5E5"> and GCC another need is</font>

224
00:13:40,759 --> 00:13:46,939
a location<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> aligned to something</font>

225
00:13:45,259 --> 00:13:50,149
large<font color="#E5E5E5"> why</font>

226
00:13:46,939 --> 00:13:53,269
Cindy<font color="#E5E5E5"> works much better or works at all</font>

227
00:13:50,149 --> 00:13:56,029
<font color="#E5E5E5">with a lion buffers and harder</font>

228
00:13:53,269 --> 00:13:59,360
<font color="#CCCCCC">separation</font><font color="#E5E5E5"> just need the buffer</font><font color="#CCCCCC"> aligned</font>

229
00:13:56,029 --> 00:14:04,370
to their<font color="#CCCCCC"> specific</font><font color="#E5E5E5"> needs that could be a</font>

230
00:13:59,360 --> 00:14:07,399
large as a page<font color="#CCCCCC"> something else</font><font color="#E5E5E5"> that</font>

231
00:14:04,370 --> 00:14:09,319
would<font color="#CCCCCC"> be nice to have it's not that</font>

232
00:14:07,399 --> 00:14:11,870
compulsory but it's<font color="#E5E5E5"> really nice to have</font>

233
00:14:09,319 --> 00:14:15,800
and it's coming soon<font color="#CCCCCC"> Constitution</font><font color="#E5E5E5"> Eric's</font>

234
00:14:11,870 --> 00:14:18,589
<font color="#E5E5E5">currently</font><font color="#CCCCCC"> right you can be you can</font><font color="#E5E5E5"> write</font>

235
00:14:15,800 --> 00:14:21,019
generic<font color="#E5E5E5"> code in rust but cannot be</font>

236
00:14:18,589 --> 00:14:22,730
generic over a constant and<font color="#E5E5E5"> in</font>

237
00:14:21,019 --> 00:14:25,189
<font color="#E5E5E5">multimedia you have many situation which</font>

238
00:14:22,730 --> 00:14:27,110
<font color="#CCCCCC">you have some small details that are</font>

239
00:14:25,189 --> 00:14:30,170
just constants and embedded this

240
00:14:27,110 --> 00:14:34,339
information in types is cumbersome and<font color="#CCCCCC"> I</font>

241
00:14:30,170 --> 00:14:38,209
believe<font color="#E5E5E5"> in line assembly some people</font>

242
00:14:34,339 --> 00:14:43,130
like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> some people</font><font color="#E5E5E5"> doesn't is coming</font>

243
00:14:38,209 --> 00:14:45,529
soon<font color="#E5E5E5"> is sort of interesting since we</font>

244
00:14:43,130 --> 00:14:47,870
<font color="#CCCCCC">added from start but it's not really</font>

245
00:14:45,529 --> 00:14:49,250
stable<font color="#E5E5E5"> and since the</font><font color="#CCCCCC"> language wants to</font>

246
00:14:47,870 --> 00:14:52,790
be as stable as possible

247
00:14:49,250 --> 00:14:54,420
you cannot leverage the LLVM syntax that

248
00:14:52,790 --> 00:14:58,139
<font color="#CCCCCC">is completely</font><font color="#E5E5E5"> in flux</font>

249
00:14:54,420 --> 00:15:00,149
and you cannot even<font color="#E5E5E5"> leverage the syntax</font>

250
00:14:58,139 --> 00:15:04,709
that<font color="#E5E5E5"> is currently shared between GCC and</font>

251
00:15:00,149 --> 00:15:06,779
Silang<font color="#E5E5E5"> because again you don't have any</font>

252
00:15:04,709 --> 00:15:10,529
kind of warranties beside the fact<font color="#E5E5E5"> that</font>

253
00:15:06,779 --> 00:15:13,199
if the<font color="#CCCCCC"> salon</font><font color="#E5E5E5"> / GCC</font><font color="#CCCCCC"> changed the syntax</font>

254
00:15:10,529 --> 00:15:15,060
<font color="#CCCCCC">you will have lots of angry users that</font>

255
00:15:13,199 --> 00:15:17,399
have perfectly working code that stuff

256
00:15:15,060 --> 00:15:20,670
working<font color="#E5E5E5"> but it's not exactly a great</font>

257
00:15:17,399 --> 00:15:23,430
warranty<font color="#E5E5E5"> so what is going on is</font><font color="#CCCCCC"> that we</font>

258
00:15:20,670 --> 00:15:26,729
have a new RFC<font color="#E5E5E5"> a new syntax being</font>

259
00:15:23,430 --> 00:15:30,779
discussed<font color="#E5E5E5"> and possibly we will that get</font>

260
00:15:26,730 --> 00:15:33,630
that<font color="#E5E5E5"> within this year and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

261
00:15:30,779 --> 00:15:37,670
good<font color="#E5E5E5"> part</font><font color="#CCCCCC"> the bad part is that for</font>

262
00:15:33,630 --> 00:15:41,490
multimedia<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would like to have</font>

263
00:15:37,670 --> 00:15:44,760
<font color="#CCCCCC">look-up tables</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> generate a</font>

264
00:15:41,490 --> 00:15:48,029
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> them and rust doesn't really work</font>

265
00:15:44,760 --> 00:15:52,680
<font color="#E5E5E5">for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of purpose</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> brace in</font>

266
00:15:48,029 --> 00:15:54,779
<font color="#CCCCCC">brass are</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> but they are not good as</font>

267
00:15:52,680 --> 00:15:57,779
vector<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> second-class</font>

268
00:15:54,779 --> 00:16:04,410
citizen so you cannot<font color="#E5E5E5"> collect</font><font color="#CCCCCC"> res lies</font>

269
00:15:57,779 --> 00:16:08,850
<font color="#CCCCCC">you cannot do a number of</font><font color="#E5E5E5"> automatic use</font>

270
00:16:04,410 --> 00:16:12,180
a number of a dramatic feature on a race

271
00:16:08,850 --> 00:16:17,730
is<font color="#E5E5E5"> going to change</font><font color="#CCCCCC"> mainly because of the</font>

272
00:16:12,180 --> 00:16:21,959
<font color="#E5E5E5">cons generic but</font><font color="#CCCCCC"> nobody's really working</font>

273
00:16:17,730 --> 00:16:24,269
<font color="#E5E5E5">on the part and this</font><font color="#CCCCCC"> is pretty much the</font>

274
00:16:21,959 --> 00:16:27,500
remaining bit that we would need for

275
00:16:24,269 --> 00:16:30,690
<font color="#CCCCCC">having a perfect language</font><font color="#E5E5E5"> for multimedia</font>

276
00:16:27,500 --> 00:16:37,279
that's said we have five minutes left

277
00:16:30,690 --> 00:16:42,240
<font color="#E5E5E5">and if you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> question please I</font>

278
00:16:37,279 --> 00:16:47,089
thought oh I thought<font color="#CCCCCC"> that the question</font>

279
00:16:42,240 --> 00:16:47,089
<font color="#E5E5E5">were part of the five days okay</font>

280
00:16:48,959 --> 00:16:55,510
it is open source<font color="#E5E5E5"> here we have a github</font>

281
00:16:52,690 --> 00:16:58,390
organization<font color="#CCCCCC"> everybody is</font><font color="#E5E5E5"> welcome to</font>

282
00:16:55,510 --> 00:17:01,480
contribute code<font color="#CCCCCC"> I</font><font color="#E5E5E5"> already have somebody</font>

283
00:16:58,390 --> 00:17:05,050
<font color="#CCCCCC">that can be offered</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Vorbis decoder so</font>

284
00:17:01,480 --> 00:17:07,540
now<font color="#E5E5E5"> beside what we have we also have a</font>

285
00:17:05,050 --> 00:17:10,869
<font color="#CCCCCC">Vorbis decoder that's was sort of a</font>

286
00:17:07,540 --> 00:17:13,149
<font color="#CCCCCC">surprise and what's</font><font color="#E5E5E5"> quite neat so</font><font color="#CCCCCC"> I got</font>

287
00:17:10,869 --> 00:17:18,300
a validation<font color="#E5E5E5"> from a different person</font>

288
00:17:13,150 --> 00:17:22,449
that<font color="#E5E5E5"> the API works for the purpose say</font>

289
00:17:18,300 --> 00:17:24,550
<font color="#E5E5E5">usual rules you can fork the what you</font>

290
00:17:22,449 --> 00:17:27,490
like to contribute<font color="#E5E5E5"> and issue a pull</font>

291
00:17:24,550 --> 00:17:51,129
<font color="#E5E5E5">request and I will be quite delighted</font>

292
00:17:27,490 --> 00:17:53,919
for<font color="#E5E5E5"> to have more contribution</font><font color="#CCCCCC"> okay the</font>

293
00:17:51,130 --> 00:17:55,780
question is when<font color="#CCCCCC"> you write</font><font color="#E5E5E5"> Cindy you</font>

294
00:17:53,919 --> 00:17:57,640
<font color="#E5E5E5">write Cindy usually for a specific</font>

295
00:17:55,780 --> 00:18:01,090
architecture and<font color="#E5E5E5"> you repeat the exercise</font>

296
00:17:57,640 --> 00:18:04,870
for every architecture<font color="#E5E5E5"> what Russ provide</font>

297
00:18:01,090 --> 00:18:07,059
that help us<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> regard say</font>

298
00:18:04,870 --> 00:18:09,520
<font color="#E5E5E5">currently there is a crate that is</font>

299
00:18:07,059 --> 00:18:14,139
called faster that is leveraging the

300
00:18:09,520 --> 00:18:17,800
fact<font color="#CCCCCC"> that the brass compiler itself can</font>

301
00:18:14,140 --> 00:18:21,190
be made aware of<font color="#CCCCCC"> cindy types and you can</font>

302
00:18:17,800 --> 00:18:24,840
write automatic code<font color="#E5E5E5"> so you can write</font><font color="#CCCCCC"> a</font>

303
00:18:21,190 --> 00:18:29,050
<font color="#CCCCCC">traitor's instead of doing loops and</font>

304
00:18:24,840 --> 00:18:33,399
automatically up to a point<font color="#E5E5E5"> and the</font>

305
00:18:29,050 --> 00:18:36,520
faster crate<font color="#E5E5E5"> tries to abstract more let</font>

306
00:18:33,400 --> 00:18:39,059
you do some simply that is<font color="#E5E5E5"> generic</font>

307
00:18:36,520 --> 00:18:41,620
enough so<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to work on x86</font>

308
00:18:39,059 --> 00:18:45,639
<font color="#E5E5E5">doesn't matter which is your specific</font>

309
00:18:41,620 --> 00:18:55,959
target and arm possibly<font color="#CCCCCC"> soon PowerPC but</font>

310
00:18:45,640 --> 00:18:58,090
not yet<font color="#CCCCCC"> Russ is as portable as LLVM</font>

311
00:18:55,960 --> 00:19:00,460
provides that means that you can write

312
00:18:58,090 --> 00:19:09,070
<font color="#CCCCCC">Russ code and</font><font color="#E5E5E5"> is going to work</font>

313
00:19:00,460 --> 00:19:13,870
pretty much on our<font color="#CCCCCC"> maps x86</font><font color="#E5E5E5"> PowerPC risk</font>

314
00:19:09,070 --> 00:19:25,540
<font color="#CCCCCC">5 other some other</font><font color="#E5E5E5"> platform that</font><font color="#CCCCCC"> are</font>

315
00:19:13,870 --> 00:19:30,520
<font color="#E5E5E5">little stranger yes the output is not</font><font color="#CCCCCC"> a</font>

316
00:19:25,540 --> 00:19:34,870
concern<font color="#CCCCCC"> your question is what about</font><font color="#E5E5E5"> the</font>

317
00:19:30,520 --> 00:19:38,379
output<font color="#CCCCCC"> well the output</font><font color="#E5E5E5"> is not exactly a</font>

318
00:19:34,870 --> 00:19:40,929
concern for the toolkit usually what you

319
00:19:38,380 --> 00:19:46,300
have as output nowadays is some kind of

320
00:19:40,930 --> 00:19:51,340
OpenGL<font color="#E5E5E5"> Vulcan</font><font color="#CCCCCC"> open CV</font><font color="#E5E5E5"> surface that you</font>

321
00:19:46,300 --> 00:19:53,919
feel somehow<font color="#E5E5E5"> but usually that part is a</font>

322
00:19:51,340 --> 00:19:59,129
different problem<font color="#CCCCCC"> that is more related</font>

323
00:19:53,920 --> 00:20:02,500
to the<font color="#CCCCCC"> GPU and graphics programming that</font>

324
00:19:59,130 --> 00:20:04,210
multimedia<font color="#E5E5E5"> once you got your buffer you</font>

325
00:20:02,500 --> 00:20:07,030
want to convert<font color="#E5E5E5"> it to something</font><font color="#CCCCCC"> that you</font>

326
00:20:04,210 --> 00:20:10,360
can put on the<font color="#E5E5E5"> screen and usually that</font>

327
00:20:07,030 --> 00:20:15,790
means<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> just move to a different</font>

328
00:20:10,360 --> 00:20:18,399
<font color="#CCCCCC">field OpenCL OpenGL Vulcan and then</font>

329
00:20:15,790 --> 00:20:21,520
that's another<font color="#E5E5E5"> ratio for the audience is</font>

330
00:20:18,400 --> 00:20:26,160
the same<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> many many</font><font color="#E5E5E5"> different</font>

331
00:20:21,520 --> 00:20:26,160
<font color="#CCCCCC">API</font><font color="#E5E5E5"> to just directly output</font>

332
00:20:35,050 --> 00:20:41,510
yes<font color="#CCCCCC"> usually what you</font><font color="#E5E5E5"> do right</font><font color="#CCCCCC"> now is</font>

333
00:20:38,150 --> 00:20:44,360
<font color="#E5E5E5">trying to if possible have</font><font color="#CCCCCC"> the hardware</font>

334
00:20:41,510 --> 00:20:46,360
<font color="#E5E5E5">do most of the</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> means that</font><font color="#E5E5E5"> your</font>

335
00:20:44,360 --> 00:20:50,510
multimedia framework is supposed<font color="#E5E5E5"> to be</font>

336
00:20:46,360 --> 00:20:53,840
good<font color="#CCCCCC"> with the format then once you get</font>

337
00:20:50,510 --> 00:20:56,600
the data<font color="#E5E5E5"> usually you</font><font color="#CCCCCC"> end up formatting</font>

338
00:20:53,840 --> 00:21:01,570
it so it can<font color="#E5E5E5"> be fit</font><font color="#CCCCCC"> to the hardware</font>

339
00:20:56,600 --> 00:21:05,449
pipeline<font color="#E5E5E5"> you know probably</font><font color="#CCCCCC"> nvidia AMD</font>

340
00:21:01,570 --> 00:21:09,800
<font color="#CCCCCC">inter they all provide a open</font><font color="#E5E5E5"> source</font>

341
00:21:05,450 --> 00:21:14,990
friendly<font color="#CCCCCC"> sdk to leverage</font><font color="#E5E5E5"> that so that</font>

342
00:21:09,800 --> 00:21:18,139
part is part of the<font color="#E5E5E5"> roadmap 0.3</font><font color="#CCCCCC"> is going</font>

343
00:21:14,990 --> 00:21:20,050
to get there<font color="#CCCCCC"> but first i wanted to prove</font>

344
00:21:18,140 --> 00:21:23,930
that<font color="#E5E5E5"> you can root user us to write</font>

345
00:21:20,050 --> 00:21:25,669
software decoders the hardware<font color="#E5E5E5"> serration</font>

346
00:21:23,930 --> 00:21:28,130
is part<font color="#E5E5E5"> of the equation and will be</font>

347
00:21:25,670 --> 00:21:30,680
implemented<font color="#E5E5E5"> and obviously Russ is going</font>

348
00:21:28,130 --> 00:21:32,450
to help you because then you don't<font color="#E5E5E5"> have</font>

349
00:21:30,680 --> 00:21:36,230
many problem in dealing with the

350
00:21:32,450 --> 00:21:38,450
hardware buffers this is<font color="#E5E5E5"> that's usually</font>

351
00:21:36,230 --> 00:21:40,250
<font color="#CCCCCC">an issue since</font><font color="#E5E5E5"> they are</font><font color="#CCCCCC"> door buffer</font><font color="#E5E5E5"> has</font>

352
00:21:38,450 --> 00:21:43,850
to be properly reference counted and

353
00:21:40,250 --> 00:21:49,490
sometimes your API and SDK API<font color="#E5E5E5"> and</font>

354
00:21:43,850 --> 00:22:04,580
reality could not perfectly<font color="#E5E5E5"> match other</font>

355
00:21:49,490 --> 00:22:05,150
question<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> the question</font><font color="#CCCCCC"> is if you want</font>

356
00:22:04,580 --> 00:22:08,290
to contribute

357
00:22:05,150 --> 00:22:14,890
do you have an easy task to get your

358
00:22:08,290 --> 00:22:18,920
well fit wet<font color="#E5E5E5"> yes we have few right now</font>

359
00:22:14,890 --> 00:22:22,730
<font color="#E5E5E5">the code base is quite lean so we don't</font>

360
00:22:18,920 --> 00:22:26,090
have<font color="#E5E5E5"> many real issue or many tasks but</font>

361
00:22:22,730 --> 00:22:27,800
we have a<font color="#E5E5E5"> couple some are sort of easy</font>

362
00:22:26,090 --> 00:22:31,730
if you have<font color="#E5E5E5"> experience in writing</font>

363
00:22:27,800 --> 00:22:32,419
bindings since that's one<font color="#E5E5E5"> of the easiest</font>

364
00:22:31,730 --> 00:22:35,390
<font color="#CCCCCC">part</font>

365
00:22:32,420 --> 00:22:38,120
you've write binding to a<font color="#CCCCCC"> C library that</font>

366
00:22:35,390 --> 00:22:41,240
is a reference<font color="#CCCCCC"> implementation and you</font>

367
00:22:38,120 --> 00:22:44,870
prepare the wrapper so you can expose<font color="#CCCCCC"> it</font>

368
00:22:41,240 --> 00:23:01,010
from<font color="#E5E5E5"> recipie this is the kind of easy</font>

369
00:22:44,870 --> 00:23:04,059
tasks that<font color="#E5E5E5"> currently we have currently</font>

370
00:23:01,010 --> 00:23:07,820
we don't have<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> your question is</font>

371
00:23:04,059 --> 00:23:10,639
how<font color="#CCCCCC"> much of it is on</font><font color="#E5E5E5"> safe crust and a</font>

372
00:23:07,820 --> 00:23:13,908
mouth chef it<font color="#CCCCCC"> is say frost</font><font color="#E5E5E5"> currently is</font>

373
00:23:10,640 --> 00:23:20,270
almost<font color="#E5E5E5"> everything say</font><font color="#CCCCCC"> Frost beside when</font>

374
00:23:13,909 --> 00:23:22,880
you try to read bits because<font color="#E5E5E5"> then you</font>

375
00:23:20,270 --> 00:23:25,429
have<font color="#E5E5E5"> some data type and you want to</font>

376
00:23:22,880 --> 00:23:29,770
convert<font color="#E5E5E5"> it so to another data types and</font>

377
00:23:25,429 --> 00:23:29,770
that operation<font color="#CCCCCC"> is inherently unsafe</font>

378
00:23:33,620 --> 00:23:41,820
[Applause]

