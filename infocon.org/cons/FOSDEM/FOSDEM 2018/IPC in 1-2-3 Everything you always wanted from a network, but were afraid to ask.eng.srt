1
00:00:05,890 --> 00:00:14,599
<font color="#CCCCCC">sandir I hope I pronounced that right</font>

2
00:00:08,440 --> 00:00:26,960
<font color="#CCCCCC">are going to talk about</font><font color="#E5E5E5"> IPC so a round</font>

3
00:00:14,599 --> 00:00:29,420
of applause<font color="#CCCCCC"> for IPC in</font><font color="#E5E5E5"> one two three yes</font>

4
00:00:26,960 --> 00:00:32,029
<font color="#E5E5E5">so thank you for the introduction so</font>

5
00:00:29,420 --> 00:00:34,940
sorry for<font color="#CCCCCC"> this the</font><font color="#E5E5E5"> short delay there was</font>

6
00:00:32,029 --> 00:00:36,440
some problem with the<font color="#CCCCCC"> connection so</font>

7
00:00:34,940 --> 00:00:40,040
welcome<font color="#E5E5E5"> to our talk</font>

8
00:00:36,440 --> 00:00:42,830
IPC in<font color="#E5E5E5"> one two three I'm Dimitri</font><font color="#CCCCCC"> this is</font>

9
00:00:40,040 --> 00:00:44,900
sunder and so we are<font color="#E5E5E5"> students</font>

10
00:00:42,830 --> 00:00:47,690
<font color="#CCCCCC">researchers from Ghent University in</font>

11
00:00:44,900 --> 00:00:50,809
Belgium<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> very far</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> from</font>

12
00:00:47,690 --> 00:00:53,629
Brussels<font color="#CCCCCC"> and we work on topic our topic</font>

13
00:00:50,809 --> 00:00:56,629
<font color="#E5E5E5">is</font><font color="#CCCCCC"> next-generation Internet</font><font color="#E5E5E5"> and if you</font>

14
00:00:53,629 --> 00:00:58,280
saw the the<font color="#E5E5E5"> presentation this morning</font><font color="#CCCCCC"> we</font>

15
00:00:56,629 --> 00:01:00,349
work on European projects European

16
00:00:58,280 --> 00:01:02,299
funded projects like<font color="#CCCCCC"> a rata pristine art</font>

17
00:01:00,350 --> 00:01:04,849
fire there they are<font color="#E5E5E5"> projects in the</font>

18
00:01:02,299 --> 00:01:07,189
topic of future<font color="#CCCCCC"> internet and we do</font>

19
00:01:04,849 --> 00:01:09,050
<font color="#E5E5E5">research on test batch which are funded</font>

20
00:01:07,189 --> 00:01:12,440
<font color="#CCCCCC">by</font><font color="#E5E5E5"> the European Commission and by the</font>

21
00:01:09,050 --> 00:01:14,060
<font color="#E5E5E5">u.s. fire actually</font><font color="#CCCCCC"> the the person that</font>

22
00:01:12,440 --> 00:01:15,860
gave the<font color="#E5E5E5"> presentation this</font><font color="#CCCCCC"> morning is</font>

23
00:01:14,060 --> 00:01:18,350
very<font color="#CCCCCC"> involved in</font><font color="#E5E5E5"> this fire project and</font>

24
00:01:15,860 --> 00:01:19,760
the NGI is the successor of fire and we

25
00:01:18,350 --> 00:01:21,770
also use<font color="#E5E5E5"> geni which is the global</font>

26
00:01:19,760 --> 00:01:23,960
<font color="#E5E5E5">environment for</font><font color="#CCCCCC"> networked innovation in</font>

27
00:01:21,770 --> 00:01:25,640
the<font color="#E5E5E5"> US and they are very large test beds</font>

28
00:01:23,960 --> 00:01:27,589
that provide<font color="#CCCCCC"> us with a lot of servers</font>

29
00:01:25,640 --> 00:01:32,480
and<font color="#CCCCCC"> interconnections so we can do a</font>

30
00:01:27,590 --> 00:01:34,460
<font color="#CCCCCC">large-scale</font><font color="#E5E5E5"> experimentation</font><font color="#CCCCCC"> so why do</font><font color="#E5E5E5"> we</font>

31
00:01:32,480 --> 00:01:35,780
<font color="#E5E5E5">need a</font><font color="#CCCCCC"> next-generation internets well if</font>

32
00:01:34,460 --> 00:01:37,009
you have<font color="#E5E5E5"> been following</font><font color="#CCCCCC"> the news there's</font>

33
00:01:35,780 --> 00:01:39,230
a lot of things that can<font color="#E5E5E5"> go</font><font color="#CCCCCC"> wrong</font>

34
00:01:37,010 --> 00:01:41,930
<font color="#CCCCCC">there's attacks on the</font><font color="#E5E5E5"> infrastructure</font>

35
00:01:39,230 --> 00:01:44,840
like on servers where you do DDoS

36
00:01:41,930 --> 00:01:47,630
attacks scalability problems where<font color="#E5E5E5"> your</font>

37
00:01:44,840 --> 00:01:49,430
<font color="#CCCCCC">BGP routers are overflowing with</font><font color="#E5E5E5"> entries</font>

38
00:01:47,630 --> 00:01:52,220
and there is also attacks on the

39
00:01:49,430 --> 00:01:53,720
physical infrastructure from<font color="#E5E5E5"> sharks</font>

40
00:01:52,220 --> 00:01:55,460
<font color="#E5E5E5">apparently they are attracted to</font>

41
00:01:53,720 --> 00:01:57,740
undersea cables by the<font color="#CCCCCC"> magnetic fields</font>

42
00:01:55,460 --> 00:02:00,740
<font color="#E5E5E5">and they disrupt the connections and</font>

43
00:01:57,740 --> 00:02:03,110
<font color="#E5E5E5">also the Russians are developing ships</font>

44
00:02:00,740 --> 00:02:05,000
that could in theory break undersea

45
00:02:03,110 --> 00:02:07,789
cables so there's disruptions<font color="#E5E5E5"> of the</font>

46
00:02:05,000 --> 00:02:11,150
infrastructure<font color="#CCCCCC"> also</font><font color="#E5E5E5"> internet security</font>

47
00:02:07,790 --> 00:02:13,670
there's a lot of hacks going on<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> and</font>

48
00:02:11,150 --> 00:02:15,680
<font color="#CCCCCC">heart bleeds</font><font color="#E5E5E5"> very important and also</font>

49
00:02:13,670 --> 00:02:16,589
there<font color="#E5E5E5"> are problems with</font><font color="#CCCCCC"> security we all</font>

50
00:02:15,680 --> 00:02:21,000
know the Snowden

51
00:02:16,590 --> 00:02:22,470
and your data<font color="#E5E5E5"> is actually worth a lot</font><font color="#CCCCCC"> to</font>

52
00:02:21,000 --> 00:02:23,880
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> companies and it's not only the</font>

53
00:02:22,470 --> 00:02:25,440
<font color="#E5E5E5">government</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> after your data but</font>

54
00:02:23,880 --> 00:02:30,120
<font color="#E5E5E5">also a lot</font><font color="#CCCCCC"> of private companies they</font>

55
00:02:25,440 --> 00:02:32,550
<font color="#E5E5E5">data mined everything so our methodology</font>

56
00:02:30,120 --> 00:02:34,500
is<font color="#E5E5E5"> that we basically well</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> do</font>

57
00:02:32,550 --> 00:02:36,480
experimental<font color="#E5E5E5"> research and it's quite</font>

58
00:02:34,500 --> 00:02:38,430
<font color="#E5E5E5">hard to do</font><font color="#CCCCCC"> experimental research</font><font color="#E5E5E5"> on the</font>

59
00:02:36,480 --> 00:02:41,040
Internet of the<font color="#CCCCCC"> future because</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not</font>

60
00:02:38,430 --> 00:02:43,290
here<font color="#CCCCCC"> yet so we develop it ourselves</font><font color="#E5E5E5"> so</font>

61
00:02:41,040 --> 00:02:46,170
we develop a<font color="#E5E5E5"> lot of tools and software</font>

62
00:02:43,290 --> 00:02:48,810
and we then deploy it on our test beds

63
00:02:46,170 --> 00:02:50,880
and then we write research papers about

64
00:02:48,810 --> 00:02:55,500
<font color="#E5E5E5">him so what we're going to talk</font><font color="#CCCCCC"> about</font>

65
00:02:50,880 --> 00:02:57,480
<font color="#E5E5E5">today is about the stuff the prototypes</font>

66
00:02:55,500 --> 00:02:59,280
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have been developing and we are</font>

67
00:02:57,480 --> 00:03:01,440
<font color="#CCCCCC">looking at the problems flight</font>

68
00:02:59,280 --> 00:03:03,080
reliability and privacy on<font color="#CCCCCC"> the earth</font>

69
00:03:01,440 --> 00:03:06,239
<font color="#CCCCCC">that from an architectural perspective</font>

70
00:03:03,080 --> 00:03:11,480
<font color="#E5E5E5">so what you've all been taught in school</font>

71
00:03:06,239 --> 00:03:11,480
<font color="#E5E5E5">is like the seven layer OSI model and</font>

72
00:03:11,599 --> 00:03:16,619
<font color="#E5E5E5">they try to build networks</font><font color="#CCCCCC"> from the</font>

73
00:03:14,700 --> 00:03:18,390
perspective<font color="#CCCCCC"> that every layer has it has</font>

74
00:03:16,620 --> 00:03:20,760
a different function they try to split

75
00:03:18,390 --> 00:03:23,010
layers by function but when you look at

76
00:03:20,760 --> 00:03:23,850
how<font color="#CCCCCC"> it's implemented that's not always</font>

77
00:03:23,010 --> 00:03:25,709
<font color="#CCCCCC">the case</font>

78
00:03:23,850 --> 00:03:27,540
so encryption is in the presentation

79
00:03:25,709 --> 00:03:29,820
layer by OSI but<font color="#CCCCCC"> it's implement in</font><font color="#E5E5E5"> the</font>

80
00:03:27,540 --> 00:03:32,040
transport layer with TLS<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> usually</font>

81
00:03:29,820 --> 00:03:34,108
also<font color="#E5E5E5"> in your application</font><font color="#CCCCCC"> and there's a</font>

82
00:03:32,040 --> 00:03:36,000
lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Technology crossover even in the</font>

83
00:03:34,109 --> 00:03:37,560
lower<font color="#CCCCCC"> layers so recent developments for</font>

84
00:03:36,000 --> 00:03:39,780
Ethernet they are actually implementing

85
00:03:37,560 --> 00:03:42,269
routing which is typically layer<font color="#CCCCCC"> 3 into</font>

86
00:03:39,780 --> 00:03:44,850
layer 2 networks<font color="#E5E5E5"> so there are also</font>

87
00:03:42,269 --> 00:03:45,299
technologies like MPLS at layer 2 and<font color="#E5E5E5"> a</font>

88
00:03:44,850 --> 00:03:47,430
half

89
00:03:45,299 --> 00:03:49,590
VPNs<font color="#CCCCCC"> which don't</font><font color="#E5E5E5"> really fit</font><font color="#CCCCCC"> the model</font>

90
00:03:47,430 --> 00:03:54,180
<font color="#CCCCCC">tunnel IP tunnels</font><font color="#E5E5E5"> don't really fit the</font>

91
00:03:49,590 --> 00:03:56,190
model so a couple<font color="#CCCCCC"> of years ago there's a</font>

92
00:03:54,180 --> 00:03:58,739
guy<font color="#CCCCCC"> that wrote a book John</font><font color="#E5E5E5"> Day and he</font>

93
00:03:56,190 --> 00:04:00,930
proposed an alternative architecture for

94
00:03:58,739 --> 00:04:03,810
<font color="#E5E5E5">large-scale networks and it's recursive</font>

95
00:04:00,930 --> 00:04:06,030
<font color="#E5E5E5">so every layer is exactly the same so we</font>

96
00:04:03,810 --> 00:04:07,560
<font color="#CCCCCC">don't say every function</font><font color="#E5E5E5"> is in a</font>

97
00:04:06,030 --> 00:04:09,750
different player but all layers have all

98
00:04:07,560 --> 00:04:11,100
the functions possibly you<font color="#CCCCCC"> don't have to</font>

99
00:04:09,750 --> 00:04:14,700
implement them if you<font color="#E5E5E5"> don't need them</font>

100
00:04:11,100 --> 00:04:16,649
and the the<font color="#E5E5E5"> only way that that the</font>

101
00:04:14,700 --> 00:04:18,599
layers are different is by scope so you

102
00:04:16,649 --> 00:04:20,700
have a big network<font color="#E5E5E5"> over a small network</font>

103
00:04:18,600 --> 00:04:23,910
and if you need<font color="#E5E5E5"> a</font><font color="#CCCCCC"> near PPN</font><font color="#E5E5E5"> you just run</font>

104
00:04:20,700 --> 00:04:25,860
<font color="#CCCCCC">it on top for</font><font color="#E5E5E5"> that to</font><font color="#CCCCCC"> work you</font><font color="#E5E5E5"> need an</font>

105
00:04:23,910 --> 00:04:27,840
identical<font color="#E5E5E5"> API between</font><font color="#CCCCCC"> the layers</font><font color="#E5E5E5"> so you</font>

106
00:04:25,860 --> 00:04:29,880
cannot stack them and currently<font color="#E5E5E5"> that's</font>

107
00:04:27,840 --> 00:04:30,450
not the case<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the sockets API</font>

108
00:04:29,880 --> 00:04:32,550
you can

109
00:04:30,450 --> 00:04:36,659
access every<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> clear like you want</font>

110
00:04:32,550 --> 00:04:40,680
so if you<font color="#CCCCCC"> want to run</font><font color="#E5E5E5"> TCP transport you</font>

111
00:04:36,660 --> 00:04:42,510
would run an Internet<font color="#E5E5E5"> address family and</font>

112
00:04:40,680 --> 00:04:44,790
say I want a streaming socket or if you

113
00:04:42,510 --> 00:04:47,520
want UDP you would use a Datagram socket

114
00:04:44,790 --> 00:04:50,730
<font color="#E5E5E5">but the API is a little bit different</font>

115
00:04:47,520 --> 00:04:52,289
for every layer that you want<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> so</font>

116
00:04:50,730 --> 00:04:55,230
what we have<font color="#E5E5E5"> been</font><font color="#CCCCCC"> developing is a</font>

117
00:04:52,290 --> 00:04:57,030
prototype called<font color="#CCCCCC"> ro burrows and it's on</font>

118
00:04:55,230 --> 00:05:00,030
this Ouroboros it's a decentralized

119
00:04:57,030 --> 00:05:03,239
<font color="#E5E5E5">packet switch network that is based on</font>

120
00:05:00,030 --> 00:05:05,549
IPC<font color="#E5E5E5"> so so the the</font><font color="#CCCCCC"> API is based on IPC</font>

121
00:05:03,240 --> 00:05:08,940
its redesigned from the ground up<font color="#E5E5E5"> it</font>

122
00:05:05,550 --> 00:05:11,790
follows this recursive model<font color="#CCCCCC"> it blurs</font>

123
00:05:08,940 --> 00:05:14,400
<font color="#CCCCCC">the difference between IPC between local</font>

124
00:05:11,790 --> 00:05:16,080
networks between<font color="#E5E5E5"> world area networks to</font>

125
00:05:14,400 --> 00:05:16,650
the<font color="#E5E5E5"> application developer it all looks</font>

126
00:05:16,080 --> 00:05:21,390
<font color="#CCCCCC">the same</font>

127
00:05:16,650 --> 00:05:23,219
it looks like IPC<font color="#E5E5E5"> it gives you we hope a</font>

128
00:05:21,390 --> 00:05:25,830
<font color="#E5E5E5">better service than you are used to from</font>

129
00:05:23,220 --> 00:05:27,990
<font color="#E5E5E5">TCP and UDP because we have different</font>

130
00:05:25,830 --> 00:05:30,030
<font color="#CCCCCC">ways</font><font color="#E5E5E5"> of implementing this functionality</font>

131
00:05:27,990 --> 00:05:33,090
<font color="#E5E5E5">it's increased privacy security</font>

132
00:05:30,030 --> 00:05:35,159
anonymity<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> a very simple API is</font>

133
00:05:33,090 --> 00:05:36,750
it<font color="#CCCCCC"> simply the simplest</font><font color="#E5E5E5"> API I don't know</font>

134
00:05:35,160 --> 00:05:39,090
and that's where we're going<font color="#CCCCCC"> to start so</font>

135
00:05:36,750 --> 00:05:41,490
we're going<font color="#E5E5E5"> to look at the or a boss API</font>

136
00:05:39,090 --> 00:05:43,710
<font color="#CCCCCC">so we have your</font><font color="#E5E5E5"> computer you have to</font>

137
00:05:41,490 --> 00:05:46,080
<font color="#E5E5E5">process sitting there and what happens</font>

138
00:05:43,710 --> 00:05:50,849
your kernel is giving it to process<font color="#E5E5E5"> IDs</font>

139
00:05:46,080 --> 00:05:54,270
so<font color="#CCCCCC"> we have this layer</font><font color="#E5E5E5"> we will gradually</font>

140
00:05:50,850 --> 00:05:55,980
<font color="#E5E5E5">tell what's in there so</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> the</font>

141
00:05:54,270 --> 00:05:59,049
layering

142
00:05:55,980 --> 00:05:59,049
[Music]

143
00:06:05,740 --> 00:06:11,030
so the recursive<font color="#E5E5E5"> model always works over</font>

144
00:06:08,630 --> 00:06:12,650
a layer<font color="#E5E5E5"> and we'll now it's very</font>

145
00:06:11,030 --> 00:06:14,299
<font color="#E5E5E5">abstracting that we'll get to what a</font>

146
00:06:12,650 --> 00:06:17,120
layer actually<font color="#E5E5E5"> does and what it consists</font>

147
00:06:14,300 --> 00:06:19,550
of so you have<font color="#CCCCCC"> a client and a server in</font>

148
00:06:17,120 --> 00:06:21,979
your local<font color="#E5E5E5"> PC so it's just one machine</font>

149
00:06:19,550 --> 00:06:25,340
<font color="#E5E5E5">and it gets a PID from the kernel and</font>

150
00:06:21,979 --> 00:06:27,080
you we allocate something<font color="#E5E5E5"> that's called</font>

151
00:06:25,340 --> 00:06:28,849
<font color="#E5E5E5">the flow and it's an abstract construct</font>

152
00:06:27,080 --> 00:06:31,400
it's a pipe it's a bi-directional pipe

153
00:06:28,850 --> 00:06:33,860
<font color="#E5E5E5">where you</font><font color="#CCCCCC"> writes packets on one end and</font>

154
00:06:31,400 --> 00:06:35,539
<font color="#E5E5E5">you have a reasonable probability</font><font color="#CCCCCC"> that</font>

155
00:06:33,860 --> 00:06:38,000
<font color="#E5E5E5">you can read them from the other other</font>

156
00:06:35,540 --> 00:06:39,889
end<font color="#E5E5E5"> so that's a flow of abstract</font>

157
00:06:38,000 --> 00:06:43,100
construct and the function of<font color="#E5E5E5"> the layer</font>

158
00:06:39,889 --> 00:06:45,770
<font color="#E5E5E5">is to provide you</font><font color="#CCCCCC"> with the flow so the</font>

159
00:06:43,100 --> 00:06:47,210
first<font color="#E5E5E5"> goal is flow except you have a</font>

160
00:06:45,770 --> 00:06:49,669
server application<font color="#CCCCCC"> Elkville</font>

161
00:06:47,210 --> 00:06:52,310
<font color="#CCCCCC">except flows it returns you something</font>

162
00:06:49,669 --> 00:06:54,020
that we call a flow descriptor<font color="#E5E5E5"> and any</font>

163
00:06:52,310 --> 00:06:57,620
resemblance with<font color="#CCCCCC"> the file descriptor is</font>

164
00:06:54,020 --> 00:07:00,289
purely coincidental<font color="#CCCCCC"> so on this client</font>

165
00:06:57,620 --> 00:07:02,600
side<font color="#CCCCCC"> you have the call flow allocate</font>

166
00:07:00,289 --> 00:07:05,690
which will start a flow towards the

167
00:07:02,600 --> 00:07:08,180
server<font color="#E5E5E5"> you could do that based on the</font>

168
00:07:05,690 --> 00:07:09,710
PID but that's a little<font color="#E5E5E5"> bit difficult I</font>

169
00:07:08,180 --> 00:07:12,260
mean that would<font color="#CCCCCC"> be every time you start</font>

170
00:07:09,710 --> 00:07:15,919
<font color="#E5E5E5">a server it gets a new fee ID so we have</font>

171
00:07:12,260 --> 00:07:18,979
a second function that we implement and

172
00:07:15,919 --> 00:07:20,930
it's called binding so we just assign<font color="#E5E5E5"> a</font>

173
00:07:18,979 --> 00:07:24,500
<font color="#CCCCCC">certain name and whatever</font><font color="#E5E5E5"> name space to</font>

174
00:07:20,930 --> 00:07:26,510
that to<font color="#E5E5E5"> that process you register it in</font>

175
00:07:24,500 --> 00:07:28,430
the layer<font color="#CCCCCC"> as a function which will</font><font color="#E5E5E5"> come</font>

176
00:07:26,510 --> 00:07:31,250
<font color="#E5E5E5">back later and you can</font><font color="#CCCCCC"> allocate to the</font>

177
00:07:28,430 --> 00:07:33,410
name<font color="#E5E5E5"> that's roughly the full API after</font>

178
00:07:31,250 --> 00:07:35,570
you allocate it so<font color="#E5E5E5"> it's IPC in</font><font color="#CCCCCC"> one two</font>

179
00:07:33,410 --> 00:07:37,160
<font color="#CCCCCC">three these are three functions binding</font>

180
00:07:35,570 --> 00:07:41,060
names<font color="#E5E5E5"> registering the name in the layer</font>

181
00:07:37,160 --> 00:07:42,820
and allocating a flow<font color="#E5E5E5"> after that you can</font>

182
00:07:41,060 --> 00:07:45,139
read<font color="#E5E5E5"> and write from the buffer the</font>

183
00:07:42,820 --> 00:07:46,659
signature<font color="#CCCCCC"> of those course is exactly</font><font color="#E5E5E5"> the</font>

184
00:07:45,139 --> 00:07:49,370
same as read<font color="#CCCCCC"> and write</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> your</font>

185
00:07:46,660 --> 00:07:51,620
favorite system<font color="#CCCCCC"> course and when you're</font>

186
00:07:49,370 --> 00:07:55,550
done with<font color="#E5E5E5"> with communication you'll be</font>

187
00:07:51,620 --> 00:07:57,080
allocated flow so your kernel currently

188
00:07:55,550 --> 00:08:01,550
<font color="#E5E5E5">doesn't know this course so we had to</font>

189
00:07:57,080 --> 00:08:03,289
<font color="#CCCCCC">implement them in our for</font><font color="#E5E5E5"> system and we</font>

190
00:08:01,550 --> 00:08:04,970
chose<font color="#E5E5E5"> to do it in user</font><font color="#CCCCCC"> space so we have</font>

191
00:08:03,289 --> 00:08:06,289
a user space system we've implemented

192
00:08:04,970 --> 00:08:08,900
this in<font color="#E5E5E5"> c89</font>

193
00:08:06,289 --> 00:08:11,330
just to make it<font color="#E5E5E5"> as portable as we could</font>

194
00:08:08,900 --> 00:08:15,500
and keep very low dependencies<font color="#E5E5E5"> and it's</font>

195
00:08:11,330 --> 00:08:17,859
based on POSIX<font color="#E5E5E5"> 2001-2008 mostly for the</font>

196
00:08:15,500 --> 00:08:19,810
training<font color="#E5E5E5"> we use a lot of be threads</font>

197
00:08:17,860 --> 00:08:21,819
mutexes robust<font color="#CCCCCC"> mutexes if</font><font color="#E5E5E5"> they're</font>

198
00:08:19,810 --> 00:08:24,610
<font color="#CCCCCC">available</font><font color="#E5E5E5"> in the system</font>

199
00:08:21,819 --> 00:08:26,590
it runs on new<font color="#CCCCCC"> linux on freebsd on OSX</font>

200
00:08:24,610 --> 00:08:28,689
<font color="#CCCCCC">sierra</font><font color="#E5E5E5"> and if you have the Lindo the</font>

201
00:08:26,590 --> 00:08:31,060
<font color="#E5E5E5">linux subsystem</font><font color="#CCCCCC"> for windows it works</font>

202
00:08:28,689 --> 00:08:33,399
perfectly fine<font color="#E5E5E5"> there there are some work</font>

203
00:08:31,060 --> 00:08:35,049
to<font color="#E5E5E5"> get it to</font><font color="#CCCCCC"> run on the new hurt and on</font>

204
00:08:33,399 --> 00:08:36,940
<font color="#CCCCCC">androids Android doesn't completely</font>

205
00:08:35,049 --> 00:08:38,740
implement POSIX so there's there's more

206
00:08:36,940 --> 00:08:41,860
work<font color="#CCCCCC"> and we haven't</font><font color="#E5E5E5"> done that</font><font color="#CCCCCC"> capsule so</font>

207
00:08:38,740 --> 00:08:44,560
the<font color="#E5E5E5"> prototype doesn't work there</font><font color="#CCCCCC"> so the</font>

208
00:08:41,860 --> 00:08:46,930
core part of the system<font color="#E5E5E5"> is a demon we</font>

209
00:08:44,560 --> 00:08:49,779
call it the IPC<font color="#CCCCCC"> resource manager daemon</font>

210
00:08:46,930 --> 00:08:52,300
<font color="#E5E5E5">and do so you can start this by</font><font color="#CCCCCC"> just</font>

211
00:08:49,779 --> 00:08:54,670
<font color="#CCCCCC">running the binary or you can start</font><font color="#E5E5E5"> it</font>

212
00:08:52,300 --> 00:08:57,420
<font color="#CCCCCC">enable it using</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> D so</font><font color="#E5E5E5"> that it</font>

213
00:08:54,670 --> 00:09:01,990
<font color="#CCCCCC">actually runs</font><font color="#E5E5E5"> as a daemon in your system</font>

214
00:08:57,420 --> 00:09:04,000
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a complete source code example</font>

215
00:09:01,990 --> 00:09:07,750
it's C so if you know C that helps if

216
00:09:04,000 --> 00:09:09,940
you don't know C<font color="#E5E5E5"> it's reasonably simple</font>

217
00:09:07,750 --> 00:09:12,370
<font color="#E5E5E5">it's an self-explanatory</font><font color="#CCCCCC"> so you have a</font>

218
00:09:09,940 --> 00:09:15,490
the full source code<font color="#E5E5E5"> of a server and</font>

219
00:09:12,370 --> 00:09:17,529
clients in C so the API<font color="#E5E5E5"> is extremely</font>

220
00:09:15,490 --> 00:09:20,050
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the server which will</font>

221
00:09:17,529 --> 00:09:22,060
accept the flow<font color="#E5E5E5"> a client which allocates</font>

222
00:09:20,050 --> 00:09:24,699
the flow to a certain name<font color="#CCCCCC"> we hard-coded</font>

223
00:09:22,060 --> 00:09:26,739
that to be echo<font color="#E5E5E5"> the client sends</font><font color="#CCCCCC"> a one</font>

224
00:09:24,699 --> 00:09:28,779
message to<font color="#CCCCCC"> the server the server sends</font>

225
00:09:26,740 --> 00:09:30,399
it back<font color="#E5E5E5"> and they do</font><font color="#CCCCCC"> locate the flow so</font>

226
00:09:28,779 --> 00:09:32,920
this is the<font color="#CCCCCC"> output if you render the</font>

227
00:09:30,399 --> 00:09:34,990
echo up it will start the server<font color="#E5E5E5"> say I</font>

228
00:09:32,920 --> 00:09:37,599
got a new flow and the client allocates

229
00:09:34,990 --> 00:09:42,269
its client says hi<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> with very</font>

230
00:09:37,600 --> 00:09:44,860
simple<font color="#E5E5E5"> API and it's the same API always</font>

231
00:09:42,269 --> 00:09:47,260
so what are the functions of<font color="#E5E5E5"> a layer</font>

232
00:09:44,860 --> 00:09:48,940
because that layer has<font color="#CCCCCC"> to provide all</font>

233
00:09:47,260 --> 00:09:51,069
the<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> need to for</font>

234
00:09:48,940 --> 00:09:53,649
<font color="#E5E5E5">do</font><font color="#CCCCCC"> it for two processes to communicate</font>

235
00:09:51,070 --> 00:09:55,540
with<font color="#E5E5E5"> each other so first of all the bind</font>

236
00:09:53,649 --> 00:09:57,279
<font color="#E5E5E5">operation is not</font><font color="#CCCCCC"> a part</font><font color="#E5E5E5"> of the layer the</font>

237
00:09:55,540 --> 00:09:58,779
bind<font color="#E5E5E5"> operation where you bind that</font>

238
00:09:57,279 --> 00:10:01,149
process to<font color="#E5E5E5"> your name is something that's</font>

239
00:09:58,779 --> 00:10:03,100
local<font color="#CCCCCC"> to your system because process IDs</font>

240
00:10:01,149 --> 00:10:05,800
you don't need to send out anywhere over

241
00:10:03,100 --> 00:10:08,370
any network so that's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> local call in</font>

242
00:10:05,800 --> 00:10:11,410
the system<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> only two things that</font>

243
00:10:08,370 --> 00:10:16,240
that the layer has<font color="#CCCCCC"> to produce or to</font>

244
00:10:11,410 --> 00:10:17,620
<font color="#CCCCCC">perform</font><font color="#E5E5E5"> is to register names and to</font>

245
00:10:16,240 --> 00:10:19,300
perform<font color="#E5E5E5"> the floor location so these</font>

246
00:10:17,620 --> 00:10:20,649
functions<font color="#CCCCCC"> are keep track</font><font color="#E5E5E5"> and figure out</font>

247
00:10:19,300 --> 00:10:22,839
where there are n points<font color="#E5E5E5"> of</font>

248
00:10:20,649 --> 00:10:26,050
communication so that's the directory

249
00:10:22,839 --> 00:10:28,060
<font color="#E5E5E5">service at your map locations of certain</font>

250
00:10:26,050 --> 00:10:29,740
names in the network it will figure<font color="#E5E5E5"> out</font>

251
00:10:28,060 --> 00:10:31,510
<font color="#CCCCCC">how to</font><font color="#E5E5E5"> get packets from</font><font color="#CCCCCC"> one point to</font>

252
00:10:29,740 --> 00:10:33,310
another<font color="#CCCCCC"> so it has to</font><font color="#E5E5E5"> implement</font>

253
00:10:31,510 --> 00:10:35,110
rotting functionality<font color="#E5E5E5"> it has to</font>

254
00:10:33,310 --> 00:10:36,910
effectively forward those packets<font color="#CCCCCC"> to it</font>

255
00:10:35,110 --> 00:10:39,220
implements<font color="#CCCCCC"> forwarding functionality</font><font color="#E5E5E5"> and</font>

256
00:10:36,910 --> 00:10:42,040
it has to allocate and release the

257
00:10:39,220 --> 00:10:45,010
resources<font color="#E5E5E5"> and that's our flow allocation</font>

258
00:10:42,040 --> 00:10:46,510
<font color="#E5E5E5">so this is not an exhaustive list</font><font color="#CCCCCC"> so</font>

259
00:10:45,010 --> 00:10:48,069
actually there are functions<font color="#E5E5E5"> a layer</font>

260
00:10:46,510 --> 00:10:50,950
<font color="#CCCCCC">like congestion control but we're not</font>

261
00:10:48,070 --> 00:10:56,440
going<font color="#CCCCCC"> to discuss</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> today we don't</font>

262
00:10:50,950 --> 00:11:01,020
<font color="#CCCCCC">have</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> so let's look at</font><font color="#E5E5E5"> local IPC</font>

263
00:10:56,440 --> 00:11:04,090
over<font color="#E5E5E5"> the Ouroboros sub subsystem so</font>

264
00:11:01,020 --> 00:11:05,890
<font color="#E5E5E5">usually if you have a tcp/ip stack loop</font>

265
00:11:04,090 --> 00:11:07,600
like local IPC you use<font color="#E5E5E5"> it or loop</font>

266
00:11:05,890 --> 00:11:08,920
<font color="#CCCCCC">loopback</font><font color="#E5E5E5"> interface</font><font color="#CCCCCC"> it goes through the</font>

267
00:11:07,600 --> 00:11:13,350
<font color="#CCCCCC">entire stack so your application</font>

268
00:11:08,920 --> 00:11:15,550
delivers it to TCP to your<font color="#CCCCCC"> Ethernet</font>

269
00:11:13,350 --> 00:11:18,250
usually virtualized<font color="#CCCCCC"> it goes to the</font>

270
00:11:15,550 --> 00:11:19,420
kernel gets back<font color="#E5E5E5"> so in our system we can</font>

271
00:11:18,250 --> 00:11:21,190
do<font color="#E5E5E5"> it as well but of course it's</font>

272
00:11:19,420 --> 00:11:22,449
recursive<font color="#E5E5E5"> there is no really need for</font>

273
00:11:21,190 --> 00:11:25,270
all these<font color="#E5E5E5"> layers so</font><font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> it</font>

274
00:11:22,450 --> 00:11:28,720
<font color="#E5E5E5">directly over a loopback layer so we'll</font>

275
00:11:25,270 --> 00:11:31,420
show you the<font color="#E5E5E5"> actual commands to empty to</font>

276
00:11:28,720 --> 00:11:35,050
perform this on on your system so<font color="#CCCCCC"> you</font>

277
00:11:31,420 --> 00:11:36,610
start uroboros subsystem then you start

278
00:11:35,050 --> 00:11:40,150
the server<font color="#E5E5E5"> and the first thing</font><font color="#CCCCCC"> that it</font>

279
00:11:36,610 --> 00:11:43,240
will<font color="#E5E5E5"> do is indicate to the subsystem</font>

280
00:11:40,150 --> 00:11:46,150
that<font color="#E5E5E5"> there is an robots capable server</font>

281
00:11:43,240 --> 00:11:47,770
<font color="#E5E5E5">running this happens all behind behind</font>

282
00:11:46,150 --> 00:11:52,870
<font color="#E5E5E5">the scenes so you don't have to</font>

283
00:11:47,770 --> 00:11:54,400
implement<font color="#E5E5E5"> its implemented using using</font>

284
00:11:52,870 --> 00:11:57,040
the linker so it's simple method before

285
00:11:54,400 --> 00:11:59,890
<font color="#E5E5E5">you you even call</font><font color="#CCCCCC"> main so it just says</font>

286
00:11:57,040 --> 00:12:03,640
<font color="#CCCCCC">to that system I am here I'm in robots</font>

287
00:11:59,890 --> 00:12:06,220
process<font color="#E5E5E5"> the next thing</font><font color="#CCCCCC"> that you do is</font>

288
00:12:03,640 --> 00:12:11,439
<font color="#E5E5E5">that we do is bind that name that</font>

289
00:12:06,220 --> 00:12:14,590
process 6417 to the name server<font color="#E5E5E5"> so</font><font color="#CCCCCC"> your</font>

290
00:12:11,440 --> 00:12:20,100
<font color="#CCCCCC">abort system knows that</font><font color="#E5E5E5"> 6417 listens to</font>

291
00:12:14,590 --> 00:12:22,570
the name server<font color="#E5E5E5"> then we create</font><font color="#CCCCCC"> the layer</font>

292
00:12:20,100 --> 00:12:25,060
<font color="#CCCCCC">it's one command if the bootstrap</font>

293
00:12:22,570 --> 00:12:26,890
<font color="#E5E5E5">command for the layer itself</font><font color="#CCCCCC"> or all the</font>

294
00:12:25,060 --> 00:12:31,569
functionality for<font color="#E5E5E5"> moving packets between</font>

295
00:12:26,890 --> 00:12:34,660
<font color="#E5E5E5">the client and</font><font color="#CCCCCC"> the server then we</font>

296
00:12:31,570 --> 00:12:36,760
register<font color="#E5E5E5"> the server into that layer we</font>

297
00:12:34,660 --> 00:12:40,990
we don't register<font color="#E5E5E5"> the name server</font>

298
00:12:36,760 --> 00:12:43,060
directly for we<font color="#CCCCCC"> just hash it</font><font color="#E5E5E5"> so so the</font>

299
00:12:40,990 --> 00:12:44,249
you<font color="#E5E5E5"> can choose a shell gorilla as you</font>

300
00:12:43,060 --> 00:12:48,279
like

301
00:12:44,249 --> 00:12:49,929
we just hash it<font color="#E5E5E5"> for it's more secure in</font>

302
00:12:48,279 --> 00:12:53,739
the implementation<font color="#CCCCCC"> because people cannot</font>

303
00:12:49,929 --> 00:12:56,319
start feeding very large<font color="#E5E5E5"> strings</font><font color="#CCCCCC"> and</font>

304
00:12:53,739 --> 00:12:57,819
it's more secure<font color="#E5E5E5"> as well because if you</font>

305
00:12:56,319 --> 00:13:00,009
have to send<font color="#E5E5E5"> this over the network it's</font>

306
00:12:57,819 --> 00:13:01,809
less legible and<font color="#E5E5E5"> people</font><font color="#CCCCCC"> aren't able to</font>

307
00:13:00,009 --> 00:13:04,149
figure<font color="#E5E5E5"> out what happens and then the</font>

308
00:13:01,809 --> 00:13:06,699
third<font color="#E5E5E5"> step you start</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> decline</font>

309
00:13:04,149 --> 00:13:08,649
it's a ping client<font color="#E5E5E5"> it will send a number</font>

310
00:13:06,699 --> 00:13:10,868
<font color="#E5E5E5">of messages to the server when you're</font>

311
00:13:08,649 --> 00:13:12,939
done you kill the clients<font color="#E5E5E5"> flow gets the</font>

312
00:13:10,869 --> 00:13:15,610
<font color="#E5E5E5">allocated and we're done so</font><font color="#CCCCCC"> that's how</font>

313
00:13:12,939 --> 00:13:18,089
local IP<font color="#E5E5E5"> see over the sub system</font><font color="#CCCCCC"> works</font>

314
00:13:15,610 --> 00:13:21,100
<font color="#E5E5E5">and it's always in three steps</font><font color="#CCCCCC"> binding</font>

315
00:13:18,089 --> 00:13:23,110
registering<font color="#E5E5E5"> and allocating and that's</font>

316
00:13:21,100 --> 00:13:25,360
all that's<font color="#E5E5E5"> to it so there is very little</font>

317
00:13:23,110 --> 00:13:28,569
configuration you don't have to worry

318
00:13:25,360 --> 00:13:31,509
<font color="#E5E5E5">about</font><font color="#CCCCCC"> ports or addresses that's</font><font color="#E5E5E5"> all</font>

319
00:13:28,569 --> 00:13:34,329
completely hidden<font color="#CCCCCC"> from you</font><font color="#E5E5E5"> so let's look</font>

320
00:13:31,509 --> 00:13:35,499
at<font color="#CCCCCC"> our Boris</font><font color="#E5E5E5"> over layer X so we're not</font>

321
00:13:34,329 --> 00:13:40,988
<font color="#E5E5E5">on one system anymore</font>

322
00:13:35,499 --> 00:13:44,619
we're on two systems so<font color="#E5E5E5"> to write over</font>

323
00:13:40,989 --> 00:13:50,589
layer X we have<font color="#E5E5E5"> to wrap that layer X</font>

324
00:13:44,619 --> 00:13:52,839
with our API<font color="#E5E5E5"> so the first thing we start</font>

325
00:13:50,589 --> 00:13:56,949
your<font color="#E5E5E5"> abort system subsystem and recreate</font>

326
00:13:52,839 --> 00:14:02,769
in this case<font color="#E5E5E5"> a layer instantiation on</font>

327
00:13:56,949 --> 00:14:05,498
that machine<font color="#E5E5E5"> which is it's attached to</font>

328
00:14:02,769 --> 00:14:07,209
<font color="#CCCCCC">your</font><font color="#E5E5E5"> internet device so the only</font>

329
00:14:05,499 --> 00:14:09,490
<font color="#CCCCCC">configuration that</font><font color="#E5E5E5"> we give</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> system</font>

330
00:14:07,209 --> 00:14:11,829
is by one thing something<font color="#CCCCCC"> that connects</font>

331
00:14:09,490 --> 00:14:15,160
<font color="#CCCCCC">two</font><font color="#E5E5E5"> Ethernet</font><font color="#CCCCCC"> I give the layer a name</font>

332
00:14:11,829 --> 00:14:18,819
Ethernet and I say it's connected to<font color="#CCCCCC"> my</font>

333
00:14:15,160 --> 00:14:21,368
wireless interface after<font color="#CCCCCC"> we do that I</font>

334
00:14:18,819 --> 00:14:23,949
register a name in<font color="#CCCCCC"> that layer so from</font>

335
00:14:21,369 --> 00:14:25,569
now my ethernet layer locally it's

336
00:14:23,949 --> 00:14:28,599
something like<font color="#E5E5E5"> ARP but not not</font>

337
00:14:25,569 --> 00:14:31,329
completely<font color="#E5E5E5"> we implemented ourselves but</font>

338
00:14:28,600 --> 00:14:34,559
so<font color="#CCCCCC"> it registers that hash and</font><font color="#E5E5E5"> it says on</font>

339
00:14:31,329 --> 00:14:38,758
this machine<font color="#CCCCCC"> if I get a request for a</font>

340
00:14:34,559 --> 00:14:43,959
for communication with IO q3<font color="#CCCCCC"> or Spain at</font>

341
00:14:38,759 --> 00:14:48,579
<font color="#E5E5E5">short I will accept it so instead</font><font color="#CCCCCC"> of</font>

342
00:14:43,959 --> 00:14:50,919
only<font color="#CCCCCC"> having our own applications IO</font>

343
00:14:48,579 --> 00:14:52,868
quake is actually an<font color="#CCCCCC"> open-source project</font>

344
00:14:50,919 --> 00:14:57,100
<font color="#E5E5E5">it's developed from the quake 3 arena</font>

345
00:14:52,869 --> 00:15:00,010
engine that was a GPL released<font color="#E5E5E5"> years ago</font>

346
00:14:57,100 --> 00:15:02,830
and we rode<font color="#CCCCCC"> the patch for</font><font color="#E5E5E5"> it so that you</font>

347
00:15:00,010 --> 00:15:07,300
can run the<font color="#CCCCCC"> game over our stack</font><font color="#E5E5E5"> instead</font>

348
00:15:02,830 --> 00:15:09,130
of over Ethernet or tcp/ip<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> I</font>

349
00:15:07,300 --> 00:15:13,510
bind<font color="#E5E5E5"> the program which is this is the</font>

350
00:15:09,130 --> 00:15:15,700
<font color="#CCCCCC">binary</font><font color="#E5E5E5"> for the dedicated server and so</font>

351
00:15:13,510 --> 00:15:17,410
the previous<font color="#E5E5E5"> time we bounced the process</font>

352
00:15:15,700 --> 00:15:19,450
but<font color="#E5E5E5"> actually that's also you have every</font>

353
00:15:17,410 --> 00:15:22,180
<font color="#E5E5E5">time you have to look for the process ID</font>

354
00:15:19,450 --> 00:15:24,910
so we<font color="#E5E5E5"> just say whenever</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> this kind</font>

355
00:15:22,180 --> 00:15:28,599
of binary<font color="#E5E5E5"> is started just have it listen</font>

356
00:15:24,910 --> 00:15:30,550
<font color="#E5E5E5">to</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> q3 names so we</font><font color="#CCCCCC"> start a server and</font>

357
00:15:28,600 --> 00:15:32,710
<font color="#E5E5E5">it's done so that's the</font><font color="#CCCCCC"> setup of the</font>

358
00:15:30,550 --> 00:15:34,449
server side<font color="#E5E5E5"> there is absolutely no</font>

359
00:15:32,710 --> 00:15:37,050
configuration involved instead<font color="#E5E5E5"> of saying</font>

360
00:15:34,450 --> 00:15:39,760
it has to<font color="#CCCCCC"> be on that</font><font color="#E5E5E5"> wireless interface</font>

361
00:15:37,050 --> 00:15:43,000
for<font color="#E5E5E5"> the clients we start to the client</font>

362
00:15:39,760 --> 00:15:45,580
<font color="#E5E5E5">it's the Ouroboros subsystem then we say</font>

363
00:15:43,000 --> 00:15:47,740
again to<font color="#E5E5E5"> the clients we connect it to</font>

364
00:15:45,580 --> 00:15:50,620
the wireless interface<font color="#E5E5E5"> and all that</font>

365
00:15:47,740 --> 00:15:53,200
client does is started the start

366
00:15:50,620 --> 00:15:56,290
actually<font color="#E5E5E5"> the game client and it says</font>

367
00:15:53,200 --> 00:16:00,100
connect so we modify the game client<font color="#E5E5E5"> so</font>

368
00:15:56,290 --> 00:16:04,060
that<font color="#E5E5E5"> it takes our</font><font color="#CCCCCC"> commands so we say</font>

369
00:16:00,100 --> 00:16:05,710
<font color="#E5E5E5">connected over Ouroboros to the</font><font color="#CCCCCC"> IO q3</font>

370
00:16:04,060 --> 00:16:07,780
server and it does it and<font color="#CCCCCC"> you're in the</font>

371
00:16:05,710 --> 00:16:10,990
game so again it's only three commands

372
00:16:07,780 --> 00:16:12,670
that you have to give you register the

373
00:16:10,990 --> 00:16:14,380
name you bind the process to the name

374
00:16:12,670 --> 00:16:21,030
and from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other side you</font><font color="#E5E5E5"> allocate a</font>

375
00:16:14,380 --> 00:16:21,030
name pretty simple so for a liability

376
00:16:22,020 --> 00:16:27,370
<font color="#E5E5E5">Ethernet is not very reliable so you can</font>

377
00:16:26,020 --> 00:16:29,470
have packet loss you can have jitter

378
00:16:27,370 --> 00:16:32,320
which<font color="#E5E5E5"> is normally implemented by TCP IP</font>

379
00:16:29,470 --> 00:16:35,440
and TCP IP is usually in a different

380
00:16:32,320 --> 00:16:38,220
layer in Ouroboros this is not the case

381
00:16:35,440 --> 00:16:41,050
<font color="#CCCCCC">so it's it's in the library and every</font>

382
00:16:38,220 --> 00:16:44,590
every program<font color="#CCCCCC"> that links</font><font color="#E5E5E5"> against our</font>

383
00:16:41,050 --> 00:16:46,329
library performs its own connection

384
00:16:44,590 --> 00:16:48,130
<font color="#CCCCCC">management</font><font color="#E5E5E5"> it performs its own</font>

385
00:16:46,330 --> 00:16:50,920
<font color="#CCCCCC">encryption and it's so check something</font>

386
00:16:48,130 --> 00:16:52,510
<font color="#E5E5E5">so when you</font><font color="#CCCCCC"> have the process</font>

387
00:16:50,920 --> 00:16:55,150
communicating to ensure and something

388
00:16:52,510 --> 00:16:57,280
happens to one<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> processes</font><font color="#CCCCCC"> you</font>

389
00:16:55,150 --> 00:16:59,949
can<font color="#E5E5E5"> recover from a lot of crashes so</font>

390
00:16:57,280 --> 00:17:03,610
only if your actual program crashes<font color="#E5E5E5"> you</font>

391
00:16:59,950 --> 00:17:05,380
have you lose your your connection<font color="#CCCCCC"> it</font>

392
00:17:03,610 --> 00:17:07,900
does fragmentation encryption<font color="#CCCCCC"> attacks</font>

393
00:17:05,380 --> 00:17:10,689
check something<font color="#CCCCCC"> so we talked about</font>

394
00:17:07,900 --> 00:17:13,000
robots<font color="#E5E5E5"> over layer X so we implemented it</font>

395
00:17:10,689 --> 00:17:15,759
over Ethernet<font color="#E5E5E5"> but we actually have a</font>

396
00:17:13,000 --> 00:17:18,819
proof<font color="#E5E5E5"> of</font><font color="#CCCCCC"> concept</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> runs it directly</font>

397
00:17:15,759 --> 00:17:20,740
over<font color="#E5E5E5"> an FPGA</font><font color="#CCCCCC"> so it's not over layer two</font>

398
00:17:18,819 --> 00:17:22,839
<font color="#E5E5E5">it's actually over ethernet layer</font><font color="#CCCCCC"> 1 the</font>

399
00:17:20,740 --> 00:17:25,480
physical so we're<font color="#E5E5E5"> not</font><font color="#CCCCCC"> using MAC</font>

400
00:17:22,839 --> 00:17:27,099
addresses<font color="#E5E5E5"> or the the Mac interface it's</font>

401
00:17:25,480 --> 00:17:31,809
a point-to-point connection<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the net</font>

402
00:17:27,099 --> 00:17:34,600
FPGA implementation we<font color="#CCCCCC"> have it</font><font color="#E5E5E5"> over</font>

403
00:17:31,809 --> 00:17:38,259
<font color="#E5E5E5">layer 2 so that's the ethernet that I</font>

404
00:17:34,600 --> 00:17:40,559
talked about and this works over on<font color="#CCCCCC"> OS X</font>

405
00:17:38,259 --> 00:17:43,960
<font color="#CCCCCC">it works</font><font color="#E5E5E5"> over the</font><font color="#CCCCCC"> Berkeley packet filter</font>

406
00:17:40,559 --> 00:17:45,639
on<font color="#E5E5E5"> FreeBSD it runs over the Berkeley</font>

407
00:17:43,960 --> 00:17:47,830
packet filter or net map if you<font color="#E5E5E5"> have</font>

408
00:17:45,639 --> 00:17:49,240
that installed and on<font color="#E5E5E5"> Linux it uses raw</font>

409
00:17:47,830 --> 00:17:52,750
sockets so the<font color="#CCCCCC"> only thing that really</font>

410
00:17:49,240 --> 00:17:55,299
does is it<font color="#CCCCCC"> takes</font><font color="#E5E5E5"> your takes your packets</font>

411
00:17:52,750 --> 00:17:57,039
and flushes<font color="#CCCCCC"> it out of the</font><font color="#E5E5E5"> of the the</font>

412
00:17:55,299 --> 00:17:59,440
<font color="#E5E5E5">network towards correct destination the</font>

413
00:17:57,039 --> 00:18:02,408
actual<font color="#E5E5E5"> configuration is</font><font color="#CCCCCC"> happened</font><font color="#E5E5E5"> already</font>

414
00:17:59,440 --> 00:18:06,070
<font color="#E5E5E5">happened before</font><font color="#CCCCCC"> and for</font><font color="#E5E5E5"> layer</font><font color="#CCCCCC"> 3 for we</font>

415
00:18:02,409 --> 00:18:07,570
<font color="#E5E5E5">implemented it directly over UDP so for</font>

416
00:18:06,070 --> 00:18:10,658
all the<font color="#CCCCCC"> functions are the layer has to</font>

417
00:18:07,570 --> 00:18:12,279
<font color="#E5E5E5">provide this flow allocation routing</font>

418
00:18:10,659 --> 00:18:14,440
forwarding and directory are implemented

419
00:18:12,279 --> 00:18:16,899
<font color="#E5E5E5">in</font><font color="#CCCCCC"> different ways so for the the raptor</font>

420
00:18:14,440 --> 00:18:19,299
net fpga<font color="#E5E5E5"> it's all done by us because</font>

421
00:18:16,899 --> 00:18:21,370
<font color="#CCCCCC">it's it's the over layer</font><font color="#E5E5E5"> one for the</font>

422
00:18:19,299 --> 00:18:24,070
internet LLC it depends on<font color="#E5E5E5"> how your</font>

423
00:18:21,370 --> 00:18:25,629
<font color="#CCCCCC">ethernet is configured</font><font color="#E5E5E5"> but it uses</font>

424
00:18:24,070 --> 00:18:27,460
<font color="#CCCCCC">ethernet for the directory</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> uses</font>

425
00:18:25,629 --> 00:18:30,759
<font color="#CCCCCC">Ouroboros we have it</font><font color="#E5E5E5"> implemented it</font>

426
00:18:27,460 --> 00:18:33,659
<font color="#CCCCCC">ourselves</font><font color="#E5E5E5"> but we could</font><font color="#CCCCCC"> use our because</font>

427
00:18:30,759 --> 00:18:37,240
the ARP specification<font color="#E5E5E5"> it allows you to</font>

428
00:18:33,659 --> 00:18:40,899
resolve<font color="#E5E5E5"> any layer 3 address to a layer 2</font>

429
00:18:37,240 --> 00:18:43,029
address but actually if it's not IP<font color="#E5E5E5"> most</font>

430
00:18:40,899 --> 00:18:44,918
<font color="#E5E5E5">switches will just drop it for security</font>

431
00:18:43,029 --> 00:18:46,480
reasons they will check someone is doing

432
00:18:44,919 --> 00:18:48,549
<font color="#E5E5E5">something very very weird on this</font>

433
00:18:46,480 --> 00:18:49,840
network<font color="#CCCCCC"> we're not going to allow that so</font>

434
00:18:48,549 --> 00:18:51,940
that's why we're<font color="#E5E5E5"> not using the arc</font>

435
00:18:49,840 --> 00:18:55,689
<font color="#E5E5E5">because it was dropping our packets</font><font color="#CCCCCC"> and</font>

436
00:18:51,940 --> 00:18:59,500
then for UDP<font color="#CCCCCC"> the</font><font color="#E5E5E5"> routing is done usually</font>

437
00:18:55,690 --> 00:19:03,039
use<font color="#CCCCCC"> Jose OSPF or ISS forwarding IP</font><font color="#E5E5E5"> and</font>

438
00:18:59,500 --> 00:19:04,990
we use we<font color="#E5E5E5"> have implemented</font><font color="#CCCCCC"> a dynamic DNS</font>

439
00:19:03,039 --> 00:19:08,799
<font color="#CCCCCC">which is implementing our directory</font>

440
00:19:04,990 --> 00:19:10,120
<font color="#E5E5E5">service so now we have two systems</font><font color="#CCCCCC"> and</font>

441
00:19:08,799 --> 00:19:15,450
somewhere<font color="#E5E5E5"> is going to show you a</font>

442
00:19:10,120 --> 00:19:15,449
Ouroboros over Ouroboros yeah

443
00:19:36,670 --> 00:19:53,560
okay<font color="#E5E5E5"> can you hear this that better lit</font>

444
00:19:49,750 --> 00:19:56,590
yeah<font color="#E5E5E5"> okay so our Abarth over</font><font color="#CCCCCC"> ara Boris</font>

445
00:19:53,560 --> 00:19:58,659
because<font color="#CCCCCC"> the recursive architecture</font><font color="#E5E5E5"> so</font>

446
00:19:56,590 --> 00:20:02,949
it's our<font color="#CCCCCC"> words over our verse over our</font>

447
00:19:58,660 --> 00:20:05,050
<font color="#E5E5E5">verse of our</font><font color="#CCCCCC"> Wars</font><font color="#E5E5E5"> over our Wars so in</font>

448
00:20:02,950 --> 00:20:06,910
the previous example that<font color="#CCCCCC"> Dmitri</font>

449
00:20:05,050 --> 00:20:09,580
explains<font color="#E5E5E5"> we are communicating</font><font color="#CCCCCC"> between</font>

450
00:20:06,910 --> 00:20:11,380
two systems<font color="#E5E5E5"> so two applications that are</font>

451
00:20:09,580 --> 00:20:13,030
communicating<font color="#E5E5E5"> just</font><font color="#CCCCCC"> over the</font><font color="#E5E5E5"> Ethernet</font>

452
00:20:11,380 --> 00:20:16,600
there so allocating flow over<font color="#E5E5E5"> this</font>

453
00:20:13,030 --> 00:20:18,970
Ethernet there<font color="#E5E5E5"> of course we don't want</font>

454
00:20:16,600 --> 00:20:20,709
<font color="#E5E5E5">to stop there because we want</font><font color="#CCCCCC"> to extend</font>

455
00:20:18,970 --> 00:20:25,150
<font color="#E5E5E5">the scope</font><font color="#CCCCCC"> over which we can communicate</font>

456
00:20:20,710 --> 00:20:28,930
<font color="#E5E5E5">so we wrote a special application called</font>

457
00:20:25,150 --> 00:20:30,820
<font color="#E5E5E5">a normal I PC process which also</font><font color="#CCCCCC"> just</font>

458
00:20:28,930 --> 00:20:33,550
<font color="#E5E5E5">uses the same</font><font color="#CCCCCC"> API as</font><font color="#E5E5E5"> a regular</font>

459
00:20:30,820 --> 00:20:36,070
application<font color="#E5E5E5"> and one of the main</font>

460
00:20:33,550 --> 00:20:38,620
functions<font color="#E5E5E5"> of this IP CP is to forward</font>

461
00:20:36,070 --> 00:20:41,409
packets that it receives<font color="#E5E5E5"> so that we can</font>

462
00:20:38,620 --> 00:20:45,879
extend the scope<font color="#CCCCCC"> to an internet level in</font>

463
00:20:41,410 --> 00:20:48,220
the end so together these normal IPC

464
00:20:45,880 --> 00:20:52,870
<font color="#CCCCCC">piece they work together</font><font color="#E5E5E5"> in a normal</font>

465
00:20:48,220 --> 00:20:57,280
layer provides IPC for applications so

466
00:20:52,870 --> 00:21:00,100
you<font color="#CCCCCC"> can see it's that it's basically the</font>

467
00:20:57,280 --> 00:21:01,240
<font color="#E5E5E5">same as</font><font color="#CCCCCC"> the applications of just over</font>

468
00:21:00,100 --> 00:21:03,699
the ethernet layer but now it's over

469
00:21:01,240 --> 00:21:07,810
<font color="#CCCCCC">normally ersity applications they don't</font>

470
00:21:03,700 --> 00:21:10,900
care what they are<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> using and I</font>

471
00:21:07,810 --> 00:21:12,280
depicted<font color="#E5E5E5"> the path here that's if the</font>

472
00:21:10,900 --> 00:21:14,170
left application we talked to the right

473
00:21:12,280 --> 00:21:16,180
application this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the path to</font><font color="#E5E5E5"> the</font>

474
00:21:14,170 --> 00:21:17,860
<font color="#E5E5E5">network that it would follow so it goes</font>

475
00:21:16,180 --> 00:21:20,140
<font color="#CCCCCC">through the normal layer which uses the</font>

476
00:21:17,860 --> 00:21:22,600
services of the<font color="#CCCCCC"> ethernet layer to go to</font>

477
00:21:20,140 --> 00:21:24,640
the<font color="#E5E5E5"> next IP CP in normal layer which</font>

478
00:21:22,600 --> 00:21:27,129
then<font color="#E5E5E5"> uses the services of the ethernet</font>

479
00:21:24,640 --> 00:21:30,730
layer<font color="#E5E5E5"> to reach the final</font><font color="#CCCCCC"> IP c-- p there</font>

480
00:21:27,130 --> 00:21:33,640
until<font color="#E5E5E5"> it</font><font color="#CCCCCC"> arrives</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the application well</font>

481
00:21:30,730 --> 00:21:37,090
<font color="#CCCCCC">I've drawn and</font><font color="#E5E5E5"> it's it like this</font>

482
00:21:33,640 --> 00:21:39,010
but it's important to<font color="#E5E5E5"> realize</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

483
00:21:37,090 --> 00:21:41,350
normal layer is using<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the mechanism</font>

484
00:21:39,010 --> 00:21:43,480
<font color="#CCCCCC">of flows in the in the ethernet layer</font>

485
00:21:41,350 --> 00:21:46,139
and that no kind of information is

486
00:21:43,480 --> 00:21:50,650
exchanged between<font color="#CCCCCC"> the different layers</font>

487
00:21:46,140 --> 00:21:52,780
<font color="#CCCCCC">so let's try a bit more difficult</font>

488
00:21:50,650 --> 00:21:54,730
so we can<font color="#E5E5E5"> keep on adding layers to</font>

489
00:21:52,780 --> 00:21:57,340
extend the scope<font color="#CCCCCC"> so in this example</font><font color="#E5E5E5"> we</font>

490
00:21:54,730 --> 00:21:59,470
have<font color="#E5E5E5"> three applications one on system</font>

491
00:21:57,340 --> 00:22:02,350
one one system tree one on sister<font color="#CCCCCC"> four</font>

492
00:21:59,470 --> 00:22:05,260
and I've added some layers and let's say

493
00:22:02,350 --> 00:22:07,179
the leftmost<font color="#E5E5E5"> application was taught</font><font color="#CCCCCC"> to</font>

494
00:22:05,260 --> 00:22:09,390
the rightmost<font color="#E5E5E5"> application then the</font><font color="#CCCCCC"> path</font>

495
00:22:07,180 --> 00:22:13,510
<font color="#CCCCCC">strewed</font><font color="#E5E5E5"> network would be the following</font>

496
00:22:09,390 --> 00:22:16,960
<font color="#E5E5E5">it's also interesting to note</font><font color="#CCCCCC"> that the</font>

497
00:22:13,510 --> 00:22:19,510
middle application cannot talk<font color="#E5E5E5"> to the</font>

498
00:22:16,960 --> 00:22:22,360
left<font color="#E5E5E5"> application it would need another</font>

499
00:22:19,510 --> 00:22:24,550
IP CP in the<font color="#E5E5E5"> topmost normal layer in</font>

500
00:22:22,360 --> 00:22:26,379
<font color="#E5E5E5">order to be able</font><font color="#CCCCCC"> to communicate</font><font color="#E5E5E5"> it would</font>

501
00:22:24,550 --> 00:22:28,149
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to communicate with the</font>

502
00:22:26,380 --> 00:22:31,540
rightmost application by just using<font color="#CCCCCC"> the</font>

503
00:22:28,150 --> 00:22:36,640
<font color="#E5E5E5">services provided</font><font color="#CCCCCC"> by the second layer so</font>

504
00:22:31,540 --> 00:22:38,560
the first normal layer in its system so

505
00:22:36,640 --> 00:22:41,860
<font color="#E5E5E5">within each normal air we have a</font>

506
00:22:38,560 --> 00:22:44,230
collection<font color="#CCCCCC"> of IPC peas that cooperate</font>

507
00:22:41,860 --> 00:22:45,909
with each other to<font color="#CCCCCC"> form</font><font color="#E5E5E5"> the layer and</font>

508
00:22:44,230 --> 00:22:47,500
they are all equal<font color="#CCCCCC"> it's completely</font>

509
00:22:45,910 --> 00:22:50,620
decentralized the architecture so

510
00:22:47,500 --> 00:22:55,960
there's no central components which also

511
00:22:50,620 --> 00:22:58,080
makes it more<font color="#CCCCCC"> secure and scalable</font><font color="#E5E5E5"> so the</font>

512
00:22:55,960 --> 00:23:01,000
main<font color="#CCCCCC"> objective of such normal air I</font>

513
00:22:58,080 --> 00:23:04,689
already explained that<font color="#E5E5E5"> this is shown as</font>

514
00:23:01,000 --> 00:23:06,940
a<font color="#CCCCCC"> top-level view of a layer so the idea</font>

515
00:23:04,690 --> 00:23:09,430
is that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> IPC pecan forwards its</font>

516
00:23:06,940 --> 00:23:11,380
packets to<font color="#CCCCCC"> the destination so let's say</font>

517
00:23:09,430 --> 00:23:16,990
the blue dots represents the endpoints

518
00:23:11,380 --> 00:23:20,010
<font color="#E5E5E5">of flow and so the idea is that the</font>

519
00:23:16,990 --> 00:23:24,010
packet gets<font color="#E5E5E5"> forwarded to the destination</font>

520
00:23:20,010 --> 00:23:26,590
so let's think back to how this happens

521
00:23:24,010 --> 00:23:29,560
in tcp/ip<font color="#E5E5E5"> so for TCP IP you would need</font>

522
00:23:26,590 --> 00:23:32,470
to deploy a lot of services such as<font color="#E5E5E5"> the</font>

523
00:23:29,560 --> 00:23:35,860
<font color="#CCCCCC">HTTP server for distributing addresses</font>

524
00:23:32,470 --> 00:23:38,770
from<font color="#E5E5E5"> central authority DNS it's also not</font>

525
00:23:35,860 --> 00:23:40,870
completely decentralized<font color="#E5E5E5"> you would need</font>

526
00:23:38,770 --> 00:23:42,430
the different routing protocols<font color="#CCCCCC"> and</font>

527
00:23:40,870 --> 00:23:45,580
they're all different<font color="#E5E5E5"> pieces of</font><font color="#CCCCCC"> software</font>

528
00:23:42,430 --> 00:23:48,220
you need firewall stuff like that<font color="#E5E5E5"> so in</font>

529
00:23:45,580 --> 00:23:51,149
our system<font color="#E5E5E5"> this is no longer needed</font><font color="#CCCCCC"> the</font>

530
00:23:48,220 --> 00:23:53,320
<font color="#E5E5E5">only thing you need is the IP CP that</font>

531
00:23:51,150 --> 00:23:56,770
collaborates with the<font color="#E5E5E5"> other IPC piece in</font>

532
00:23:53,320 --> 00:24:02,590
the layer to obtain well to provide IPC

533
00:23:56,770 --> 00:24:03,610
to its applications so then how do we

534
00:24:02,590 --> 00:24:05,709
<font color="#CCCCCC">construct</font><font color="#E5E5E5"> such</font>

535
00:24:03,610 --> 00:24:08,260
<font color="#E5E5E5">lair well let's go through</font><font color="#CCCCCC"> it step by</font>

536
00:24:05,710 --> 00:24:10,870
<font color="#CCCCCC">step</font><font color="#E5E5E5"> so of course the first IP CP that</font>

537
00:24:08,260 --> 00:24:13,660
she creates it needs to be<font color="#E5E5E5"> bootstraps so</font>

538
00:24:10,870 --> 00:24:15,820
in the example we have two<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> that</font>

539
00:24:13,660 --> 00:24:17,110
are connected to each<font color="#E5E5E5"> other via ethernet</font>

540
00:24:15,820 --> 00:24:21,070
<font color="#CCCCCC">so we have the</font><font color="#E5E5E5"> ethernet layer from</font>

541
00:24:17,110 --> 00:24:22,800
<font color="#E5E5E5">before again which here we call and on</font>

542
00:24:21,070 --> 00:24:25,210
top<font color="#E5E5E5"> we want to create a</font><font color="#CCCCCC"> normal layer</font>

543
00:24:22,800 --> 00:24:28,030
which is<font color="#CCCCCC"> called and so there</font><font color="#E5E5E5"> I've</font>

544
00:24:25,210 --> 00:24:34,390
created the first IP CP<font color="#E5E5E5"> so how does this</font>

545
00:24:28,030 --> 00:24:37,240
yeah<font color="#E5E5E5"> so when you bootstrap an IP CP we</font>

546
00:24:34,390 --> 00:24:39,940
use again the handy to<font color="#CCCCCC"> IRM that we</font>

547
00:24:37,240 --> 00:24:42,190
developed<font color="#E5E5E5"> so if you type</font><font color="#CCCCCC"> I RM</font><font color="#E5E5E5"> IP CP</font>

548
00:24:39,940 --> 00:24:44,590
bootstrap it will just outputs<font color="#E5E5E5"> the</font>

549
00:24:42,190 --> 00:24:48,270
different things that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can configure</font>

550
00:24:44,590 --> 00:24:51,370
<font color="#E5E5E5">since it is the first IP CP in the layer</font>

551
00:24:48,270 --> 00:24:55,360
<font color="#E5E5E5">we need to configure it as we please so</font>

552
00:24:51,370 --> 00:24:59,020
for now we well it's not super extensive

553
00:24:55,360 --> 00:25:01,179
<font color="#CCCCCC">are listed</font><font color="#E5E5E5"> but for</font><font color="#CCCCCC"> instance you can</font>

554
00:24:59,020 --> 00:25:03,700
<font color="#E5E5E5">select routing policies that you want we</font>

555
00:25:01,180 --> 00:25:05,560
implemented a link state routing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> LU</font>

556
00:25:03,700 --> 00:25:07,270
<font color="#CCCCCC">pre alternate route which</font><font color="#E5E5E5"> is a bit more</font>

557
00:25:05,560 --> 00:25:10,000
resilient<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> instance the default</font>

558
00:25:07,270 --> 00:25:14,050
is a link state algorithm and so you can

559
00:25:10,000 --> 00:25:16,210
configure it as you please so depending

560
00:25:14,050 --> 00:25:18,070
on<font color="#E5E5E5"> the operating on the environment</font><font color="#CCCCCC"> that</font>

561
00:25:16,210 --> 00:25:19,270
it is<font color="#E5E5E5"> operating in and the scope that it</font>

562
00:25:18,070 --> 00:25:21,700
should have for instance<font color="#E5E5E5"> the address</font>

563
00:25:19,270 --> 00:25:26,100
size<font color="#E5E5E5"> if it's a very large</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> you</font>

564
00:25:21,700 --> 00:25:30,700
<font color="#E5E5E5">want to pick a much bigger address size</font>

565
00:25:26,100 --> 00:25:33,610
so now<font color="#E5E5E5"> let's actually create one so</font>

566
00:25:30,700 --> 00:25:37,390
<font color="#E5E5E5">again we start the IPC the IPC resource</font>

567
00:25:33,610 --> 00:25:39,610
manager demon so the<font color="#CCCCCC"> IR</font><font color="#E5E5E5"> MD and then we</font>

568
00:25:37,390 --> 00:25:43,150
simply execute a command which<font color="#CCCCCC"> is</font>

569
00:25:39,610 --> 00:25:45,310
similar<font color="#CCCCCC"> to the one for creating</font><font color="#E5E5E5"> an</font>

570
00:25:43,150 --> 00:25:48,370
<font color="#CCCCCC">Ethernet there but instead of</font><font color="#E5E5E5"> Ethernet</font>

571
00:25:45,310 --> 00:25:53,679
of sorry yes first<font color="#CCCCCC"> we create again the</font>

572
00:25:48,370 --> 00:25:55,929
ethernet IP because we want<font color="#CCCCCC"> to use the</font>

573
00:25:53,680 --> 00:25:58,720
<font color="#CCCCCC">internet layer for constructing the</font>

574
00:25:55,930 --> 00:25:59,920
layer so we<font color="#E5E5E5"> just create the Ethernet IP</font>

575
00:25:58,720 --> 00:26:02,710
CP<font color="#E5E5E5"> eth0</font>

576
00:25:59,920 --> 00:26:05,410
as demonstrated a couple of times by<font color="#CCCCCC"> now</font>

577
00:26:02,710 --> 00:26:09,700
so as we<font color="#E5E5E5"> can see it has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> created in</font>

578
00:26:05,410 --> 00:26:12,370
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> then next we instantiate the</font>

579
00:26:09,700 --> 00:26:15,460
actual normal<font color="#CCCCCC"> IPC P</font><font color="#E5E5E5"> and here</font><font color="#CCCCCC"> we just</font>

580
00:26:12,370 --> 00:26:17,809
<font color="#E5E5E5">selected it with default options</font>

581
00:26:15,460 --> 00:26:21,679
and as you can<font color="#CCCCCC"> see we created into the</font>

582
00:26:17,809 --> 00:26:24,260
<font color="#E5E5E5">lair and we</font><font color="#CCCCCC"> gave the name and</font><font color="#E5E5E5"> one and we</font>

583
00:26:21,679 --> 00:26:26,150
also specified all turbines<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font>

584
00:26:24,260 --> 00:26:27,740
course we also need to bind<font color="#E5E5E5"> the name so</font>

585
00:26:26,150 --> 00:26:30,740
that<font color="#CCCCCC"> it is reachable</font><font color="#E5E5E5"> it needs to be</font>

586
00:26:27,740 --> 00:26:32,780
<font color="#E5E5E5">bounced and registered just as any other</font>

587
00:26:30,740 --> 00:26:37,070
application but if you specify<font color="#E5E5E5"> all</font>

588
00:26:32,780 --> 00:26:39,290
turbines<font color="#CCCCCC"> it will bind to its unique name</font>

589
00:26:37,070 --> 00:26:41,510
in this case and one but it also binds

590
00:26:39,290 --> 00:26:45,639
to the layer name<font color="#E5E5E5"> and so that if you</font>

591
00:26:41,510 --> 00:26:48,800
want to communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the layer that</font>

592
00:26:45,640 --> 00:26:51,760
<font color="#E5E5E5">you can completely communicate with any</font>

593
00:26:48,800 --> 00:26:55,550
IP CP<font color="#E5E5E5"> that is a member of the layer</font>

594
00:26:51,760 --> 00:26:57,500
so finally we register<font color="#E5E5E5"> these two names</font>

595
00:26:55,550 --> 00:27:03,678
into the ethernet layer so that<font color="#E5E5E5"> is</font>

596
00:26:57,500 --> 00:27:06,620
<font color="#E5E5E5">reachable so unrolling into a layer this</font>

597
00:27:03,679 --> 00:27:08,720
is a the<font color="#E5E5E5"> next step to</font><font color="#CCCCCC"> extend</font><font color="#E5E5E5"> the layer</font>

598
00:27:06,620 --> 00:27:11,780
so we<font color="#E5E5E5"> now have the</font><font color="#CCCCCC"> bootstraps I PCP</font><font color="#E5E5E5"> but</font>

599
00:27:08,720 --> 00:27:14,300
<font color="#CCCCCC">of course we</font><font color="#E5E5E5"> want to add</font><font color="#CCCCCC"> more IPC piece</font>

600
00:27:11,780 --> 00:27:16,790
into<font color="#E5E5E5"> the layer so what this is is</font><font color="#CCCCCC"> that</font>

601
00:27:14,300 --> 00:27:19,540
the<font color="#CCCCCC"> new IP CP that</font><font color="#E5E5E5"> is not yet configured</font>

602
00:27:16,790 --> 00:27:23,840
communicates with a member of<font color="#CCCCCC"> the layer</font>

603
00:27:19,540 --> 00:27:26,720
<font color="#E5E5E5">to authenticate with its obtain the</font>

604
00:27:23,840 --> 00:27:29,449
configuration and obtain an address in

605
00:27:26,720 --> 00:27:32,030
the layer so in the<font color="#E5E5E5"> end we would end up</font>

606
00:27:29,450 --> 00:27:33,650
with<font color="#CCCCCC"> this</font><font color="#E5E5E5"> very simple system of one</font>

607
00:27:32,030 --> 00:27:38,090
<font color="#E5E5E5">normal layer on top of</font><font color="#CCCCCC"> the ethernet</font>

608
00:27:33,650 --> 00:27:40,400
<font color="#CCCCCC">layer</font><font color="#E5E5E5"> so continue on with the example on</font>

609
00:27:38,090 --> 00:27:43,220
<font color="#E5E5E5">the left side we see</font><font color="#CCCCCC"> again system one</font>

610
00:27:40,400 --> 00:27:45,080
which we just<font color="#E5E5E5"> configured</font><font color="#CCCCCC"> so we have the</font>

611
00:27:43,220 --> 00:27:47,390
ethernet layer<font color="#CCCCCC"> right</font><font color="#E5E5E5"> on top the normal I</font>

612
00:27:45,080 --> 00:27:50,090
PCP<font color="#CCCCCC"> and</font><font color="#E5E5E5"> on the right side we just</font>

613
00:27:47,390 --> 00:27:53,600
<font color="#E5E5E5">created an Ethernet IP CP so that we can</font>

614
00:27:50,090 --> 00:27:56,600
have communication on top<font color="#E5E5E5"> so finally you</font>

615
00:27:53,600 --> 00:27:59,480
execute<font color="#CCCCCC"> IRM IP speed and</font><font color="#E5E5E5"> roll which</font>

616
00:27:56,600 --> 00:28:01,399
<font color="#CCCCCC">enrolls</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> new member with the existing</font>

617
00:27:59,480 --> 00:28:03,650
<font color="#CCCCCC">number and as you can see it's a very</font>

618
00:28:01,400 --> 00:28:06,559
<font color="#CCCCCC">simple operation so they just</font><font color="#E5E5E5"> exchange</font>

619
00:28:03,650 --> 00:28:08,480
<font color="#E5E5E5">the configuration of the it obtains</font><font color="#CCCCCC"> an</font>

620
00:28:06,559 --> 00:28:11,600
<font color="#CCCCCC">address as well as you</font><font color="#E5E5E5"> can see there and</font>

621
00:28:08,480 --> 00:28:16,429
in the<font color="#E5E5E5"> end it is</font><font color="#CCCCCC"> a member a new member</font>

622
00:28:11,600 --> 00:28:18,230
of the<font color="#CCCCCC"> layer then finally</font><font color="#E5E5E5"> you may also</font>

623
00:28:16,429 --> 00:28:20,600
register these names into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ethernet</font>

624
00:28:18,230 --> 00:28:24,550
layer so that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> available if yet</font>

625
00:28:20,600 --> 00:28:27,309
another IP CP member would like to join

626
00:28:24,550 --> 00:28:28,840
so once it<font color="#CCCCCC"> is a member the</font>

627
00:28:27,309 --> 00:28:30,759
<font color="#CCCCCC">next thing that</font><font color="#E5E5E5"> you want to do is set up</font>

628
00:28:28,840 --> 00:28:33,490
data transfer connections because

629
00:28:30,759 --> 00:28:36,970
becoming a member<font color="#CCCCCC"> it's just that so that</font>

630
00:28:33,490 --> 00:28:38,889
you know how it is configured<font color="#CCCCCC"> but you</font>

631
00:28:36,970 --> 00:28:41,830
also want to set<font color="#CCCCCC"> up some actual</font>

632
00:28:38,889 --> 00:28:44,350
connections<font color="#E5E5E5"> to forward data on so let's</font>

633
00:28:41,830 --> 00:28:48,070
<font color="#E5E5E5">assume</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have this data transfer</font>

634
00:28:44,350 --> 00:28:50,519
connectivity graph in the<font color="#E5E5E5"> layer then you</font>

635
00:28:48,070 --> 00:28:53,200
can see that every<font color="#CCCCCC"> IP CP</font><font color="#E5E5E5"> has an address</font>

636
00:28:50,519 --> 00:28:57,249
again we have the endpoints of<font color="#E5E5E5"> the flow</font>

637
00:28:53,200 --> 00:29:00,970
<font color="#E5E5E5">and we want to get from the left</font><font color="#CCCCCC"> eye PCP</font>

638
00:28:57,249 --> 00:29:03,220
to the top right eye PCP<font color="#E5E5E5"> so we just send</font>

639
00:29:00,970 --> 00:29:06,909
packets in the<font color="#E5E5E5"> layer and as you can see</font>

640
00:29:03,220 --> 00:29:12,340
<font color="#E5E5E5">the this is actually the full header so</font>

641
00:29:06,909 --> 00:29:13,899
it's a lot<font color="#CCCCCC"> shorter than IP and PCP</font><font color="#E5E5E5"> we</font>

642
00:29:12,340 --> 00:29:16,480
don't send source<font color="#E5E5E5"> addresses</font><font color="#CCCCCC"> so it's a</font>

643
00:29:13,899 --> 00:29:18,219
lot<font color="#E5E5E5"> more secure and anonymous</font><font color="#CCCCCC"> the only</font>

644
00:29:16,480 --> 00:29:19,419
thing that is needed<font color="#E5E5E5"> is sending the</font>

645
00:29:18,220 --> 00:29:23,529
destination<font color="#CCCCCC"> address</font><font color="#E5E5E5"> so that you know</font>

646
00:29:19,419 --> 00:29:25,360
where<font color="#CCCCCC"> it is going but you actually</font>

647
00:29:23,529 --> 00:29:27,700
synchronize all the state on<font color="#CCCCCC"> floor</font>

648
00:29:25,360 --> 00:29:30,610
locations so when you allocate flow we

649
00:29:27,700 --> 00:29:33,129
exchange information<font color="#CCCCCC"> and then you</font>

650
00:29:30,610 --> 00:29:36,129
generate<font color="#CCCCCC"> an endpoint identifier that's</font>

651
00:29:33,129 --> 00:29:38,199
you also have<font color="#CCCCCC"> to send</font><font color="#E5E5E5"> in your packet and</font>

652
00:29:36,129 --> 00:29:40,658
a time<font color="#E5E5E5"> to live value so in case you</font><font color="#CCCCCC"> have</font>

653
00:29:38,200 --> 00:29:42,700
routing problems that the packet doesn't

654
00:29:40,659 --> 00:29:45,159
loop<font color="#E5E5E5"> forever so it's a very simple</font>

655
00:29:42,700 --> 00:29:50,340
header<font color="#E5E5E5"> that's maybe six bytes</font><font color="#CCCCCC"> I think</font>

656
00:29:45,159 --> 00:29:50,340
and that's even for a quite big<font color="#CCCCCC"> network</font>

657
00:29:51,419 --> 00:29:56,529
so how do you set<font color="#CCCCCC"> up data to transfer</font>

658
00:29:54,789 --> 00:30:02,080
connections<font color="#E5E5E5"> again with a very simple</font>

659
00:29:56,529 --> 00:30:03,970
iron command<font color="#E5E5E5"> so you connect n1 to n2 for</font>

660
00:30:02,080 --> 00:30:06,970
the data transfer<font color="#E5E5E5"> components and when</font>

661
00:30:03,970 --> 00:30:09,879
you do<font color="#CCCCCC"> that as</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see it worked</font><font color="#E5E5E5"> and</font>

662
00:30:06,970 --> 00:30:11,649
it also because the normal of<font color="#CCCCCC"> course</font>

663
00:30:09,879 --> 00:30:14,439
also has a directory<font color="#E5E5E5"> has Dimitri</font>

664
00:30:11,649 --> 00:30:16,869
explained<font color="#E5E5E5"> which is actually the HD in</font>

665
00:30:14,440 --> 00:30:18,669
our case and when you set up<font color="#CCCCCC"> the first</font>

666
00:30:16,869 --> 00:30:22,299
data transfer connection it also enrolls

667
00:30:18,669 --> 00:30:25,539
into the directory<font color="#E5E5E5"> and then apart from</font>

668
00:30:22,299 --> 00:30:28,029
<font color="#E5E5E5">the data transfer Network</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can also</font>

669
00:30:25,539 --> 00:30:32,100
set up a separate<font color="#CCCCCC"> management's</font><font color="#E5E5E5"> network</font>

670
00:30:28,029 --> 00:30:35,049
<font color="#E5E5E5">within the layer to send to disseminate</font>

671
00:30:32,100 --> 00:30:37,570
routing information for<font color="#E5E5E5"> instance as we</font>

672
00:30:35,049 --> 00:30:39,700
use<font color="#CCCCCC"> link state routing</font><font color="#E5E5E5"> that you can this</font>

673
00:30:37,570 --> 00:30:43,210
it's<font color="#E5E5E5"> information</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the different</font>

674
00:30:39,700 --> 00:30:45,210
<font color="#CCCCCC">links</font><font color="#E5E5E5"> in a network and it's just yeah as</font>

675
00:30:43,210 --> 00:30:49,660
you can<font color="#CCCCCC"> see it's a tree</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can just</font>

676
00:30:45,210 --> 00:30:51,730
set<font color="#E5E5E5"> the packets down the tree so the</font>

677
00:30:49,660 --> 00:30:54,640
<font color="#E5E5E5">command is</font><font color="#CCCCCC"> very similar to the data</font>

678
00:30:51,730 --> 00:30:56,080
transfer<font color="#E5E5E5"> connection one so you just</font>

679
00:30:54,640 --> 00:30:58,720
connect and<font color="#E5E5E5"> two two and one</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it</font>

680
00:30:56,080 --> 00:31:00,189
<font color="#CCCCCC">doesn't matter because</font><font color="#E5E5E5"> there are all</font><font color="#CCCCCC"> IP</font>

681
00:30:58,720 --> 00:31:02,820
<font color="#CCCCCC">CPS are equal so it doesn't matter</font><font color="#E5E5E5"> if</font>

682
00:31:00,190 --> 00:31:05,550
you do<font color="#E5E5E5"> it from n</font><font color="#CCCCCC"> 2 2 & 1</font><font color="#E5E5E5"> or R 1 2</font><font color="#CCCCCC"> & 2</font>

683
00:31:02,820 --> 00:31:08,110
<font color="#E5E5E5">and here we connect the management</font>

684
00:31:05,550 --> 00:31:10,960
component and as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see from</font><font color="#E5E5E5"> the</font>

685
00:31:08,110 --> 00:31:13,260
output<font color="#E5E5E5"> that's both added each other as a</font>

686
00:31:10,960 --> 00:31:17,020
new<font color="#E5E5E5"> neighbor in the management</font><font color="#CCCCCC"> Network</font>

687
00:31:13,260 --> 00:31:20,290
so to summarize<font color="#CCCCCC"> here of for our verse</font>

688
00:31:17,020 --> 00:31:22,300
<font color="#E5E5E5">over</font><font color="#CCCCCC"> arrow Boris so these are the</font>

689
00:31:20,290 --> 00:31:25,659
different functions<font color="#E5E5E5"> of the layer</font><font color="#CCCCCC"> for</font>

690
00:31:22,300 --> 00:31:27,490
<font color="#E5E5E5">raptor the internet and UDP rare</font><font color="#CCCCCC"> Dmitry</font>

691
00:31:25,660 --> 00:31:30,130
<font color="#CCCCCC">explained that one</font><font color="#E5E5E5"> and so in the case</font><font color="#CCCCCC"> of</font>

692
00:31:27,490 --> 00:31:32,320
a normal<font color="#E5E5E5"> layer of course we implement</font>

693
00:31:30,130 --> 00:31:34,780
this all<font color="#CCCCCC"> ourselves but the</font><font color="#E5E5E5"> global</font>

694
00:31:32,320 --> 00:31:36,820
<font color="#E5E5E5">location is completely our boards the</font>

695
00:31:34,780 --> 00:31:39,250
routing is based on is is because<font color="#E5E5E5"> you</font>

696
00:31:36,820 --> 00:31:40,659
also don't send addresses in ISS<font color="#CCCCCC"> you</font>

697
00:31:39,250 --> 00:31:43,330
just run it<font color="#CCCCCC"> directly over your sub</font>

698
00:31:40,660 --> 00:31:46,360
<font color="#CCCCCC">Network technology the forwarding is</font>

699
00:31:43,330 --> 00:31:48,780
also a reverse and the directory<font color="#E5E5E5"> is the</font>

700
00:31:46,360 --> 00:31:52,120
<font color="#E5E5E5">HT will condemn you have to be</font>

701
00:31:48,780 --> 00:31:55,360
completely correct there and it does

702
00:31:52,120 --> 00:31:57,610
have an enrollment<font color="#CCCCCC"> face and the</font><font color="#E5E5E5"> legacy</font>

703
00:31:55,360 --> 00:31:59,679
technologies<font color="#E5E5E5"> well almost</font><font color="#CCCCCC"> none of</font><font color="#E5E5E5"> them</font>

704
00:31:57,610 --> 00:32:01,740
have an enrollment face<font color="#E5E5E5"> Wi-Fi has for</font>

705
00:31:59,680 --> 00:32:04,390
<font color="#CCCCCC">instance that</font><font color="#E5E5E5"> you have to enter your</font>

706
00:32:01,740 --> 00:32:06,190
your password to connect to the Wi-Fi

707
00:32:04,390 --> 00:32:12,220
network that's<font color="#CCCCCC"> for of enrollment as well</font>

708
00:32:06,190 --> 00:32:15,480
as joining<font color="#CCCCCC"> network so the reliability</font><font color="#E5E5E5"> as</font>

709
00:32:12,220 --> 00:32:19,000
we said it's between applications<font color="#E5E5E5"> so in</font>

710
00:32:15,480 --> 00:32:21,310
since<font color="#E5E5E5"> it's recursive architecture the</font>

711
00:32:19,000 --> 00:32:22,720
IPC<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> they're all all just</font>

712
00:32:21,310 --> 00:32:24,760
applications as<font color="#E5E5E5"> well so it's one layer</font>

713
00:32:22,720 --> 00:32:26,560
that<font color="#CCCCCC"> is repeated but the function of</font>

714
00:32:24,760 --> 00:32:30,190
reliability and<font color="#E5E5E5"> flow control</font>

715
00:32:26,560 --> 00:32:32,110
<font color="#E5E5E5">checksumming it can also be repeated it</font>

716
00:32:30,190 --> 00:32:33,430
doesn't have to be repeated<font color="#E5E5E5"> but you can</font>

717
00:32:32,110 --> 00:32:35,260
repeat<font color="#E5E5E5"> it where it makes sense for</font>

718
00:32:33,430 --> 00:32:36,940
instance<font color="#E5E5E5"> over</font><font color="#CCCCCC"> Ethernet you probably</font>

719
00:32:35,260 --> 00:32:39,040
<font color="#E5E5E5">don't want to do retransmission between</font>

720
00:32:36,940 --> 00:32:41,080
those two IPC<font color="#E5E5E5"> piece but if you have if</font>

721
00:32:39,040 --> 00:32:43,389
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have a Wi-Fi layer you can</font><font color="#E5E5E5"> get a lot</font>

722
00:32:41,080 --> 00:32:46,870
<font color="#E5E5E5">of packet drops so it's probably</font>

723
00:32:43,390 --> 00:32:49,880
interesting to do retransmission control

724
00:32:46,870 --> 00:32:51,229
there<font color="#E5E5E5"> and then in the top layer for the</font>

725
00:32:49,880 --> 00:32:52,400
well the application<font color="#CCCCCC"> is a client</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

726
00:32:51,230 --> 00:32:54,080
server<font color="#E5E5E5"> if they want a reliable</font>

727
00:32:52,400 --> 00:32:58,640
<font color="#CCCCCC">connection</font><font color="#E5E5E5"> they should also do</font>

728
00:32:54,080 --> 00:33:00,889
retransmission so we presented to the

729
00:32:58,640 --> 00:33:04,070
synchronous API<font color="#CCCCCC"> but of</font><font color="#E5E5E5"> course if you</font>

730
00:33:00,890 --> 00:33:05,990
have a lot of flows that you<font color="#E5E5E5"> create you</font>

731
00:33:04,070 --> 00:33:08,120
don't want to start<font color="#CCCCCC"> at read for every</font>

732
00:33:05,990 --> 00:33:11,780
flow that you create<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we also provide</font>

733
00:33:08,120 --> 00:33:14,530
an asynchronous API which is<font color="#E5E5E5"> base</font>

734
00:33:11,780 --> 00:33:18,110
<font color="#E5E5E5">actually on KQ and Linux</font><font color="#CCCCCC"> EF eople</font>

735
00:33:14,530 --> 00:33:20,629
FreeBSD has KQ there are more performant

736
00:33:18,110 --> 00:33:22,699
versions of the Select<font color="#CCCCCC"> Cisco</font><font color="#E5E5E5"> but when</font>

737
00:33:20,630 --> 00:33:27,080
you read the<font color="#CCCCCC"> research papers the</font><font color="#E5E5E5"> KQ one</font>

738
00:33:22,700 --> 00:33:29,210
seems<font color="#CCCCCC"> to do a bit more well seems to be</font>

739
00:33:27,080 --> 00:33:31,070
<font color="#E5E5E5">a better implementation so it's very</font>

740
00:33:29,210 --> 00:33:33,950
<font color="#E5E5E5">simple so you just if you create a</font><font color="#CCCCCC"> new</font>

741
00:33:31,070 --> 00:33:36,289
flow<font color="#E5E5E5"> then you just add the flow</font>

742
00:33:33,950 --> 00:33:39,049
descriptor to<font color="#E5E5E5"> the set and then</font><font color="#CCCCCC"> you can</font>

743
00:33:36,289 --> 00:33:41,419
just wait until one<font color="#CCCCCC"> of the flow</font>

744
00:33:39,049 --> 00:33:43,820
descriptors becomes ready and then you

745
00:33:41,419 --> 00:34:04,490
<font color="#CCCCCC">can read the packets that are stored in</font>

746
00:33:43,820 --> 00:34:08,480
the<font color="#E5E5E5"> FQ so I'll briefly summarize what we</font>

747
00:34:04,490 --> 00:34:10,489
explained so we<font color="#CCCCCC"> explained a little bit</font>

748
00:34:08,480 --> 00:34:13,668
<font color="#CCCCCC">about Roberto</font><font color="#E5E5E5"> so it's our research</font>

749
00:34:10,489 --> 00:34:17,359
<font color="#CCCCCC">prototype based</font><font color="#E5E5E5"> on this recursive</font>

750
00:34:13,668 --> 00:34:19,940
<font color="#CCCCCC">internet model it provides you a very</font>

751
00:34:17,359 --> 00:34:22,549
same single abstraction for ways to

752
00:34:19,940 --> 00:34:24,530
<font color="#E5E5E5">communicate</font><font color="#CCCCCC"> between two</font><font color="#E5E5E5"> programs that</font>

753
00:34:22,550 --> 00:34:27,260
<font color="#E5E5E5">are running on two machines it</font>

754
00:34:24,530 --> 00:34:29,020
completely extracts the the<font color="#E5E5E5"> network so</font>

755
00:34:27,260 --> 00:34:31,340
this simplifies<font color="#E5E5E5"> how you write</font>

756
00:34:29,020 --> 00:34:33,440
distributed applications you saw some

757
00:34:31,340 --> 00:34:36,889
source<font color="#CCCCCC"> code of course it goes we don't</font>

758
00:34:33,440 --> 00:34:38,929
have a lot of time here so<font color="#CCCCCC"> maybe a bit a</font>

759
00:34:36,889 --> 00:34:40,639
lot of<font color="#E5E5E5"> information to to process in a</font>

760
00:34:38,929 --> 00:34:43,060
short time but the idea is<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> have</font>

761
00:34:40,639 --> 00:34:46,460
a very<font color="#E5E5E5"> simple API and we have a very</font>

762
00:34:43,060 --> 00:34:50,270
<font color="#E5E5E5">simple command line so in all the</font>

763
00:34:46,460 --> 00:34:55,820
configurations<font color="#CCCCCC"> it's it's almost</font><font color="#E5E5E5"> a zero</font>

764
00:34:50,270 --> 00:34:59,000
configuration networking figuring

765
00:34:55,820 --> 00:35:01,400
servers it's a very secure<font color="#E5E5E5"> and</font>

766
00:34:59,000 --> 00:35:04,549
trustworthy network design and<font color="#CCCCCC"> it hides</font>

767
00:35:01,400 --> 00:35:07,549
<font color="#E5E5E5">all the complexity so if you look at</font>

768
00:35:04,549 --> 00:35:09,440
<font color="#CCCCCC">a very abstract way we're</font><font color="#E5E5E5"> looking at it</font>

769
00:35:07,549 --> 00:35:11,150
you have<font color="#E5E5E5"> a client and a server</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> always</font>

770
00:35:09,440 --> 00:35:12,799
<font color="#E5E5E5">sent</font><font color="#CCCCCC"> encrypted data between a client and</font>

771
00:35:11,150 --> 00:35:14,869
a server<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course if you</font><font color="#E5E5E5"> don't want to</font>

772
00:35:12,799 --> 00:35:18,019
you don't<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> encrypt it but you can</font>

773
00:35:14,869 --> 00:35:21,190
<font color="#CCCCCC">always do that</font><font color="#E5E5E5"> everything</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> send</font>

774
00:35:18,019 --> 00:35:24,379
to<font color="#E5E5E5"> the network like destinations are</font>

775
00:35:21,190 --> 00:35:26,900
registered as hashes so<font color="#CCCCCC"> this is a</font>

776
00:35:24,380 --> 00:35:29,029
function like DNS but there is no there

777
00:35:26,900 --> 00:35:30,890
is no encrypted way<font color="#E5E5E5"> for DNS so</font>

778
00:35:29,029 --> 00:35:32,660
everything<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you look up on the</font>

779
00:35:30,890 --> 00:35:35,058
<font color="#CCCCCC">internet it goes to a</font><font color="#E5E5E5"> DNS</font><font color="#CCCCCC"> server and</font>

780
00:35:32,660 --> 00:35:37,430
<font color="#E5E5E5">it's always unencrypted</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> your your</font>

781
00:35:35,059 --> 00:35:39,680
network operator<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you're surfing for</font>

782
00:35:37,430 --> 00:35:42,680
<font color="#E5E5E5">Google that's encrypted but then you go</font>

783
00:35:39,680 --> 00:35:46,640
to the<font color="#CCCCCC"> website</font><font color="#E5E5E5"> the DNS lookup for the IP</font>

784
00:35:42,680 --> 00:35:48,979
address is<font color="#E5E5E5"> always unencrypted</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> the</font>

785
00:35:46,640 --> 00:35:51,379
normal layer<font color="#E5E5E5"> it doesn't contain source</font>

786
00:35:48,979 --> 00:35:53,868
<font color="#CCCCCC">addresses so for</font><font color="#E5E5E5"> somebody to try</font><font color="#CCCCCC"> to</font>

787
00:35:51,380 --> 00:35:55,729
<font color="#E5E5E5">analyze traffic and figure out where</font>

788
00:35:53,869 --> 00:35:57,710
traffic<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going it's a</font><font color="#E5E5E5"> lot harder than</font>

789
00:35:55,729 --> 00:36:00,680
current<font color="#CCCCCC"> it</font><font color="#E5E5E5"> works it's completely</font>

790
00:35:57,710 --> 00:36:07,999
decentralized there is no single point

791
00:36:00,680 --> 00:36:10,999
<font color="#CCCCCC">in the network that is yeah central</font>

792
00:36:07,999 --> 00:36:12,529
entity<font color="#E5E5E5"> so the the way</font><font color="#CCCCCC"> that we do DNS is</font>

793
00:36:10,999 --> 00:36:14,359
that's it's a DHT that's running

794
00:36:12,529 --> 00:36:16,099
<font color="#CCCCCC">everywhere in the network and the layers</font>

795
00:36:14,359 --> 00:36:18,288
are completely self-contained so there

796
00:36:16,099 --> 00:36:20,950
is no<font color="#E5E5E5"> information sharing</font><font color="#CCCCCC"> between</font>

797
00:36:18,289 --> 00:36:23,989
different layers<font color="#E5E5E5"> in the in the network</font>

798
00:36:20,950 --> 00:36:27,828
<font color="#E5E5E5">so before you start recompiling your</font>

799
00:36:23,989 --> 00:36:29,359
kernel without<font color="#E5E5E5"> a tcp/ip stack</font><font color="#CCCCCC"> there's a</font>

800
00:36:27,829 --> 00:36:32,869
lot<font color="#E5E5E5"> of things to be</font><font color="#CCCCCC"> done so</font><font color="#E5E5E5"> this is a</font>

801
00:36:29,359 --> 00:36:34,308
research<font color="#E5E5E5"> prototype</font><font color="#CCCCCC"> we still have a lot</font>

802
00:36:32,869 --> 00:36:35,690
to<font color="#CCCCCC"> do like distributed to address</font>

803
00:36:34,309 --> 00:36:39,559
assignment currently we just give a

804
00:36:35,690 --> 00:36:41,509
random address in 64 bytes<font color="#CCCCCC"> we need to</font>

805
00:36:39,559 --> 00:36:44,210
look at<font color="#E5E5E5"> efficient layer designs how to</font>

806
00:36:41,509 --> 00:36:46,029
do an efficient congestion control the

807
00:36:44,210 --> 00:36:49,789
implementation we need some bug fixing

808
00:36:46,029 --> 00:36:53,029
optimization we haven't implemented the

809
00:36:49,789 --> 00:36:56,390
encryption<font color="#E5E5E5"> so we plan to do that using</font>

810
00:36:53,029 --> 00:36:59,299
<font color="#E5E5E5">the</font><font color="#CCCCCC"> new crypto library or live</font><font color="#E5E5E5"> or open</font>

811
00:36:56,390 --> 00:37:01,430
<font color="#E5E5E5">SSL</font><font color="#CCCCCC"> and we have to deploy it wider so</font>

812
00:36:59,299 --> 00:37:03,950
we're looking for other<font color="#E5E5E5"> people to start</font>

813
00:37:01,430 --> 00:37:06,049
trying our stuff and that we can build

814
00:37:03,950 --> 00:37:08,269
<font color="#E5E5E5">it at larger and larger scale so because</font>

815
00:37:06,049 --> 00:37:10,519
<font color="#E5E5E5">even the test beds that we are using we</font>

816
00:37:08,269 --> 00:37:12,439
can<font color="#E5E5E5"> go up to hundreds of nodes</font><font color="#CCCCCC"> but we</font>

817
00:37:10,519 --> 00:37:14,808
can't go to thousands or millions which

818
00:37:12,440 --> 00:37:18,340
is eventually<font color="#E5E5E5"> where we would like</font><font color="#CCCCCC"> to go</font>

819
00:37:14,809 --> 00:37:20,410
<font color="#E5E5E5">also</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> API is of course</font>

820
00:37:18,340 --> 00:37:23,050
<font color="#CCCCCC">it's proprietary</font><font color="#E5E5E5"> so you don't your</font>

821
00:37:20,410 --> 00:37:25,810
software isn't<font color="#E5E5E5"> written for the API so</font>

822
00:37:23,050 --> 00:37:28,480
it's a very<font color="#CCCCCC"> simple one so what we</font><font color="#E5E5E5"> would</font>

823
00:37:25,810 --> 00:37:30,549
<font color="#E5E5E5">like</font><font color="#CCCCCC"> to do is have a socket simulator</font><font color="#E5E5E5"> so</font>

824
00:37:28,480 --> 00:37:34,000
that we preloads our library against

825
00:37:30,550 --> 00:37:36,070
<font color="#E5E5E5">before you load the blue</font><font color="#CCCCCC"> sea library</font><font color="#E5E5E5"> and</font>

826
00:37:34,000 --> 00:37:38,380
then we can trap your socket calls<font color="#E5E5E5"> and</font>

827
00:37:36,070 --> 00:37:41,100
run the<font color="#E5E5E5"> software over so if you what of</font>

828
00:37:38,380 --> 00:37:44,530
course<font color="#E5E5E5"> run it over Ouroboros</font>

829
00:37:41,100 --> 00:37:47,259
so we are on three nodes<font color="#CCCCCC"> the channel is</font>

830
00:37:44,530 --> 00:37:49,540
Ouroboros<font color="#E5E5E5"> we have a mailing list and</font>

831
00:37:47,260 --> 00:37:51,310
there's the website<font color="#CCCCCC"> so</font><font color="#E5E5E5"> please have a</font>

832
00:37:49,540 --> 00:37:53,290
look<font color="#E5E5E5"> at it if you think it's</font><font color="#CCCCCC"> interesting</font>

833
00:37:51,310 --> 00:37:55,570
what we've been doing in<font color="#E5E5E5"> these last two</font>

834
00:37:53,290 --> 00:37:57,730
years<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> have to acknowledge that</font>

835
00:37:55,570 --> 00:37:59,650
it's partly funded by<font color="#E5E5E5"> the Flemish</font>

836
00:37:57,730 --> 00:38:01,330
government<font color="#CCCCCC"> so if you're not</font><font color="#E5E5E5"> from</font>

837
00:37:59,650 --> 00:38:03,820
Flanders<font color="#E5E5E5"> this development has</font><font color="#CCCCCC"> not been</font>

838
00:38:01,330 --> 00:38:05,650
wasting<font color="#CCCCCC"> your tax money we would like our</font>

839
00:38:03,820 --> 00:38:08,020
<font color="#E5E5E5">colleagues</font><font color="#CCCCCC"> that have already seen the</font>

840
00:38:05,650 --> 00:38:10,750
presentation<font color="#CCCCCC"> and gave us feedback</font>

841
00:38:08,020 --> 00:38:13,600
<font color="#CCCCCC">because the previous one was</font><font color="#E5E5E5"> probably</font>

842
00:38:10,750 --> 00:38:16,030
<font color="#E5E5E5">incomprehensible</font><font color="#CCCCCC"> even more than this one</font>

843
00:38:13,600 --> 00:38:18,069
<font color="#E5E5E5">so we would like</font><font color="#CCCCCC"> to thank our European</font>

844
00:38:16,030 --> 00:38:19,630
and US<font color="#E5E5E5"> us project partners that were</font>

845
00:38:18,070 --> 00:38:21,340
<font color="#E5E5E5">involved in the project</font><font color="#CCCCCC"> that we were in</font>

846
00:38:19,630 --> 00:38:24,520
in the research so<font color="#E5E5E5"> for all these</font>

847
00:38:21,340 --> 00:38:26,440
discussions<font color="#CCCCCC"> our current</font><font color="#E5E5E5"> and past master</font>

848
00:38:24,520 --> 00:38:29,410
TC students who have<font color="#E5E5E5"> been involved in</font>

849
00:38:26,440 --> 00:38:32,380
<font color="#E5E5E5">testing the</font><font color="#CCCCCC"> software and deploying</font><font color="#E5E5E5"> it</font>

850
00:38:29,410 --> 00:38:33,970
and extending it<font color="#E5E5E5"> and our supervisors</font><font color="#CCCCCC"> for</font>

851
00:38:32,380 --> 00:38:37,090
<font color="#E5E5E5">the opportunity that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> work on</font>

852
00:38:33,970 --> 00:38:43,230
<font color="#E5E5E5">this ambitious project</font><font color="#CCCCCC"> so that's all</font>

853
00:38:37,090 --> 00:38:47,050
thank you thank you

854
00:38:43,230 --> 00:38:49,570
now we have five minutes<font color="#E5E5E5"> a bit more we</font>

855
00:38:47,050 --> 00:38:56,940
<font color="#E5E5E5">have eight</font><font color="#CCCCCC"> minutes left</font><font color="#E5E5E5"> for questions</font><font color="#CCCCCC"> do</font>

856
00:38:49,570 --> 00:38:56,940
<font color="#E5E5E5">I see any just</font>

857
00:38:59,310 --> 00:39:06,250
you say that the<font color="#CCCCCC"> Strasse address isn't</font>

858
00:39:02,920 --> 00:39:11,680
<font color="#CCCCCC">included in</font><font color="#E5E5E5"> the packets but then how do</font>

859
00:39:06,250 --> 00:39:13,960
you do to a communication for those who

860
00:39:11,680 --> 00:39:17,890
are leaving<font color="#E5E5E5"> please try to so widely</font>

861
00:39:13,960 --> 00:39:19,869
<font color="#CCCCCC">thank you so if I got</font><font color="#E5E5E5"> your question</font>

862
00:39:17,890 --> 00:39:22,359
correctly<font color="#E5E5E5"> is that we don't</font><font color="#CCCCCC"> sent the</font>

863
00:39:19,869 --> 00:39:25,660
source address in the packet yeah<font color="#E5E5E5"> so</font>

864
00:39:22,359 --> 00:39:28,029
when you allocate<font color="#CCCCCC"> the flow that's the</font>

865
00:39:25,660 --> 00:39:30,670
first thing<font color="#E5E5E5"> you do so</font><font color="#CCCCCC"> you retrieve</font><font color="#E5E5E5"> the</font>

866
00:39:28,030 --> 00:39:32,470
<font color="#CCCCCC">name that you want</font><font color="#E5E5E5"> to allocate flew to</font>

867
00:39:30,670 --> 00:39:34,780
from the directory you<font color="#E5E5E5"> get the address</font>

868
00:39:32,470 --> 00:39:36,759
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you form a flow allocation request</font>

869
00:39:34,780 --> 00:39:40,030
so this is a packet<font color="#CCCCCC"> that does contain</font><font color="#E5E5E5"> a</font>

870
00:39:36,760 --> 00:39:42,339
<font color="#E5E5E5">source address so that's it is sent to</font>

871
00:39:40,030 --> 00:39:46,420
the<font color="#E5E5E5"> endpoints which then communicates</font>

872
00:39:42,339 --> 00:39:48,819
with the RMD and can see if the flow can

873
00:39:46,420 --> 00:39:50,589
get allocated<font color="#E5E5E5"> or not and then a flow</font>

874
00:39:48,819 --> 00:39:52,509
allocation response is sent<font color="#E5E5E5"> back to the</font>

875
00:39:50,589 --> 00:39:56,200
other side and<font color="#CCCCCC"> just with these two</font>

876
00:39:52,510 --> 00:39:58,060
<font color="#E5E5E5">messages they know each other's address</font>

877
00:39:56,200 --> 00:40:04,660
and the endpoint<font color="#E5E5E5"> identifier</font><font color="#CCCCCC"> that it</font>

878
00:39:58,060 --> 00:40:07,060
generated so<font color="#E5E5E5"> to relate</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> something that</font>

879
00:40:04,660 --> 00:40:09,520
<font color="#E5E5E5">you</font><font color="#CCCCCC"> probably know if</font><font color="#E5E5E5"> you know TCP you</font>

880
00:40:07,060 --> 00:40:12,578
start with a three-way handshake<font color="#CCCCCC"> when</font>

881
00:40:09,520 --> 00:40:14,589
you send a syn<font color="#E5E5E5"> ox ox</font><font color="#CCCCCC"> an ACK but actually</font>

882
00:40:12,579 --> 00:40:16,240
<font color="#CCCCCC">you could do the same in TCP where you</font>

883
00:40:14,589 --> 00:40:18,460
would<font color="#CCCCCC"> add the</font><font color="#E5E5E5"> three-way</font><font color="#CCCCCC"> handshake you</font>

884
00:40:16,240 --> 00:40:19,959
already negotiate the ports<font color="#E5E5E5"> and the</font>

885
00:40:18,460 --> 00:40:21,160
source address you store it at the

886
00:40:19,960 --> 00:40:23,109
endpoints<font color="#E5E5E5"> and then you never have to</font>

887
00:40:21,160 --> 00:40:25,598
send it again<font color="#E5E5E5"> so it's a similar</font>

888
00:40:23,109 --> 00:40:30,310
operation<font color="#CCCCCC"> but it doesn't happen in the</font>

889
00:40:25,599 --> 00:40:32,160
current networks thanks for the

890
00:40:30,310 --> 00:40:34,810
presentation<font color="#CCCCCC"> I'm wondering how the</font>

891
00:40:32,160 --> 00:40:37,540
assignment<font color="#E5E5E5"> of names on a global scale</font>

892
00:40:34,810 --> 00:40:44,410
<font color="#E5E5E5">would work like for example how would we</font>

893
00:40:37,540 --> 00:40:46,900
register<font color="#E5E5E5"> fosston</font><font color="#CCCCCC"> dot org so the question</font>

894
00:40:44,410 --> 00:40:49,509
was<font color="#E5E5E5"> on registering names on a global</font>

895
00:40:46,900 --> 00:40:52,150
scale<font color="#E5E5E5"> so if you want to try to register</font>

896
00:40:49,510 --> 00:40:54,880
<font color="#E5E5E5">for them well so this is</font><font color="#CCCCCC"> something that</font>

897
00:40:52,150 --> 00:40:57,579
we<font color="#E5E5E5"> don't have yet but you would</font><font color="#CCCCCC"> actually</font>

898
00:40:54,880 --> 00:40:59,500
<font color="#E5E5E5">need a naming service that map's the</font>

899
00:40:57,579 --> 00:41:02,079
name to the layers that<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> available</font>

900
00:40:59,500 --> 00:41:05,339
in so indeed a global namespace for

901
00:41:02,079 --> 00:41:08,020
<font color="#CCCCCC">names</font><font color="#E5E5E5"> would be required</font>

902
00:41:05,339 --> 00:41:10,119
probably<font color="#CCCCCC"> well probably</font><font color="#E5E5E5"> in the end</font><font color="#CCCCCC"> to you</font>

903
00:41:08,020 --> 00:41:11,110
you might<font color="#CCCCCC"> have</font><font color="#E5E5E5"> sort of a public internet</font>

904
00:41:10,119 --> 00:41:13,960
layer

905
00:41:11,110 --> 00:41:16,750
<font color="#CCCCCC">- which</font><font color="#E5E5E5"> yeah just as we have right now</font>

906
00:41:13,960 --> 00:41:30,340
that<font color="#E5E5E5"> you can just then</font><font color="#CCCCCC"> allocated flow to</font>

907
00:41:16,750 --> 00:41:33,700
the name<font color="#CCCCCC"> Falls them given your answer</font><font color="#E5E5E5"> to</font>

908
00:41:30,340 --> 00:41:35,290
the first question<font color="#CCCCCC"> what made</font><font color="#E5E5E5"> you choose</font>

909
00:41:33,700 --> 00:41:39,220
<font color="#CCCCCC">Packer flow routing versus packet</font>

910
00:41:35,290 --> 00:41:40,810
routing for streams sorry given your

911
00:41:39,220 --> 00:41:42,220
answer<font color="#CCCCCC"> to the first</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> it seems</font>

912
00:41:40,810 --> 00:41:44,670
<font color="#CCCCCC">that you chose flow routing instead of</font>

913
00:41:42,220 --> 00:41:47,200
packet reading<font color="#E5E5E5"> like you establish a flow</font>

914
00:41:44,670 --> 00:41:50,800
<font color="#E5E5E5">know the definition of flow is different</font>

915
00:41:47,200 --> 00:41:54,009
<font color="#E5E5E5">than in for</font><font color="#CCCCCC"> instance MPLS</font><font color="#E5E5E5"> so to repeat</font>

916
00:41:50,800 --> 00:41:56,080
<font color="#E5E5E5">the question</font><font color="#CCCCCC"> the question was why we</font>

917
00:41:54,010 --> 00:42:00,610
selected<font color="#E5E5E5"> flow routing instead of packet</font>

918
00:41:56,080 --> 00:42:01,960
routing so but this<font color="#CCCCCC"> is yeah we are so</font>

919
00:42:00,610 --> 00:42:04,630
the<font color="#CCCCCC"> the answer</font><font color="#E5E5E5"> is that we are doing</font>

920
00:42:01,960 --> 00:42:06,730
<font color="#E5E5E5">packet routing so the flow</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> the</font>

921
00:42:04,630 --> 00:42:09,310
synchronization<font color="#E5E5E5"> of states in the layer</font>

922
00:42:06,730 --> 00:42:11,140
so that you have the<font color="#E5E5E5"> endpoints but from</font>

923
00:42:09,310 --> 00:42:13,480
<font color="#E5E5E5">that point on you're basically doing</font>

924
00:42:11,140 --> 00:42:18,430
<font color="#CCCCCC">packages which is not working</font><font color="#E5E5E5"> within</font>

925
00:42:13,480 --> 00:42:25,570
each layer<font color="#E5E5E5"> okay any other questions</font><font color="#CCCCCC"> any</font>

926
00:42:18,430 --> 00:42:30,930
further<font color="#E5E5E5"> ones okay so thank you very much</font>

927
00:42:25,570 --> 00:42:30,930
for the talk<font color="#CCCCCC"> Louis</font><font color="#E5E5E5"> for our speakers</font>

928
00:42:33,750 --> 00:42:40,020
for those of you who are leaving<font color="#E5E5E5"> please</font>

929
00:42:36,750 --> 00:42:42,180
look if<font color="#E5E5E5"> there is any trash bottles or</font>

930
00:42:40,020 --> 00:42:44,490
anything<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> can take with you</font><font color="#CCCCCC"> and</font>

931
00:42:42,180 --> 00:42:47,310
transport outside<font color="#E5E5E5"> that makes everything</font>

932
00:42:44,490 --> 00:42:50,810
a bit happier and easier<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the rest of</font>

933
00:42:47,310 --> 00:42:50,810
<font color="#E5E5E5">us thank you</font>

