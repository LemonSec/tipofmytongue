1
00:00:05,729 --> 00:00:15,100
hello everyone<font color="#CCCCCC"> first</font><font color="#E5E5E5"> of all thank you</font>

2
00:00:10,420 --> 00:00:18,490
<font color="#CCCCCC">for waking up on a very cold</font><font color="#E5E5E5"> and early</font>

3
00:00:15,100 --> 00:00:20,050
Sunday<font color="#CCCCCC"> morning thanks for for</font><font color="#E5E5E5"> coming</font>

4
00:00:18,490 --> 00:00:24,339
<font color="#E5E5E5">here</font><font color="#CCCCCC"> I appreciate it</font>

5
00:00:20,050 --> 00:00:27,039
my name is<font color="#CCCCCC"> Thiago da Silva I'm going to</font>

6
00:00:24,340 --> 00:00:31,330
be<font color="#E5E5E5"> talking about an object storage</font>

7
00:00:27,039 --> 00:00:34,770
system called OpenStack<font color="#CCCCCC"> Swift I work for</font>

8
00:00:31,330 --> 00:00:37,839
Red Hat<font color="#CCCCCC"> I'm a</font><font color="#E5E5E5"> swift core reviewer</font>

9
00:00:34,770 --> 00:00:42,510
<font color="#CCCCCC">meaning a group of people that review</font>

10
00:00:37,839 --> 00:00:45,030
<font color="#E5E5E5">and maintain code and in merge code and</font>

11
00:00:42,510 --> 00:00:51,489
I've been<font color="#E5E5E5"> working on Swift for about</font>

12
00:00:45,030 --> 00:00:55,179
<font color="#E5E5E5">four years or</font><font color="#CCCCCC"> so since 2004 I thought</font>

13
00:00:51,489 --> 00:00:58,449
I'd start<font color="#E5E5E5"> with a brief introduction into</font>

14
00:00:55,179 --> 00:01:03,089
<font color="#E5E5E5">object storage in general like what</font>

15
00:00:58,449 --> 00:01:05,740
drove the<font color="#E5E5E5"> need for for object storage</font>

16
00:01:03,089 --> 00:01:08,289
<font color="#E5E5E5">talk about some of the use cases and in</font>

17
00:01:05,740 --> 00:01:12,009
what<font color="#E5E5E5"> requirements those use</font><font color="#CCCCCC"> cases lead</font>

18
00:01:08,290 --> 00:01:14,200
to<font color="#E5E5E5"> and then dive</font><font color="#CCCCCC"> into Swift look at the</font>

19
00:01:12,009 --> 00:01:16,420
functionality do some overview talk

20
00:01:14,200 --> 00:01:17,799
about the<font color="#E5E5E5"> architecture and they just</font>

21
00:01:16,420 --> 00:01:24,909
answer<font color="#CCCCCC"> some questions so it's</font><font color="#E5E5E5"> going to</font>

22
00:01:17,799 --> 00:01:28,000
be pretty<font color="#E5E5E5"> intro and brief so we've all</font>

23
00:01:24,909 --> 00:01:31,560
heard a lot<font color="#E5E5E5"> about the explosive growth</font>

24
00:01:28,000 --> 00:01:34,119
of data that he's just<font color="#E5E5E5"> being generated</font>

25
00:01:31,560 --> 00:01:38,469
there's been a ton<font color="#E5E5E5"> of statistics about</font>

26
00:01:34,119 --> 00:01:41,890
<font color="#E5E5E5">you know the exponential amount of data</font>

27
00:01:38,469 --> 00:01:44,609
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is being</font><font color="#CCCCCC"> generated</font><font color="#E5E5E5"> and what's</font>

28
00:01:41,890 --> 00:01:47,350
interesting about that is<font color="#CCCCCC"> that growth</font>

29
00:01:44,609 --> 00:01:49,570
data<font color="#E5E5E5"> is being</font><font color="#CCCCCC"> generated a lot but the</font>

30
00:01:47,350 --> 00:01:51,689
rate of that<font color="#E5E5E5"> generation is also growing</font>

31
00:01:49,570 --> 00:01:54,339
so it's really an exponential<font color="#CCCCCC"> growth and</font>

32
00:01:51,689 --> 00:01:57,699
the second<font color="#E5E5E5"> point that's interesting is</font>

33
00:01:54,340 --> 00:02:00,880
that<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> driving that generation of</font>

34
00:01:57,700 --> 00:02:04,380
data growth is mobile applications and

35
00:02:00,880 --> 00:02:04,380
<font color="#CCCCCC">web applications</font>

36
00:02:06,180 --> 00:02:10,770
when you talk about<font color="#E5E5E5"> data growth you need</font>

37
00:02:08,190 --> 00:02:13,020
to also<font color="#E5E5E5"> talk about what types of data is</font>

38
00:02:10,770 --> 00:02:16,740
<font color="#E5E5E5">being created and I try to break that</font>

39
00:02:13,020 --> 00:02:20,730
down<font color="#E5E5E5"> between two</font><font color="#CCCCCC"> types</font><font color="#E5E5E5"> of theater</font><font color="#CCCCCC"> what I</font>

40
00:02:16,740 --> 00:02:22,980
called structured data<font color="#E5E5E5"> and that is data</font>

41
00:02:20,730 --> 00:02:26,070
that is organized in<font color="#E5E5E5"> in a relational</font>

42
00:02:22,980 --> 00:02:29,310
form<font color="#CCCCCC"> think of you know really</font><font color="#E5E5E5"> databases</font>

43
00:02:26,070 --> 00:02:34,470
<font color="#CCCCCC">right it's it's</font><font color="#E5E5E5"> data that</font><font color="#CCCCCC"> is easy to</font>

44
00:02:29,310 --> 00:02:38,430
<font color="#E5E5E5">analyze easy to query</font><font color="#CCCCCC"> typically you know</font>

45
00:02:34,470 --> 00:02:41,700
<font color="#E5E5E5">in a column and rows</font><font color="#CCCCCC"> and in a very</font>

46
00:02:38,430 --> 00:02:45,720
tablet form very easy<font color="#E5E5E5"> to consume and</font>

47
00:02:41,700 --> 00:02:48,030
analyze and we have also what it's

48
00:02:45,720 --> 00:02:52,740
called<font color="#E5E5E5"> unstructured data so that's data</font>

49
00:02:48,030 --> 00:02:57,270
<font color="#CCCCCC">without any structure or any order or</font>

50
00:02:52,740 --> 00:02:58,830
schema your typical example of that is

51
00:02:57,270 --> 00:03:03,150
all the<font color="#E5E5E5"> media</font><font color="#CCCCCC"> files</font><font color="#E5E5E5"> that are out there</font>

52
00:02:58,830 --> 00:03:08,880
<font color="#E5E5E5">being shared across the web document</font>

53
00:03:03,150 --> 00:03:13,040
files<font color="#CCCCCC"> research files</font><font color="#E5E5E5"> think of you know</font>

54
00:03:08,880 --> 00:03:18,049
from x-rays to you know<font color="#E5E5E5"> even down to</font>

55
00:03:13,040 --> 00:03:21,060
<font color="#E5E5E5">JSON files being shared across the</font><font color="#CCCCCC"> web</font>

56
00:03:18,050 --> 00:03:24,209
what it's interesting about unstructured

57
00:03:21,060 --> 00:03:26,190
data is that he makes up about<font color="#E5E5E5"> 90% of</font>

58
00:03:24,209 --> 00:03:30,120
the<font color="#E5E5E5"> generator that</font><font color="#CCCCCC"> it data that is being</font>

59
00:03:26,190 --> 00:03:34,620
<font color="#CCCCCC">generated today when you talk about</font>

60
00:03:30,120 --> 00:03:38,250
<font color="#E5E5E5">types of data</font><font color="#CCCCCC"> you also have</font><font color="#E5E5E5"> different</font>

61
00:03:34,620 --> 00:03:42,900
<font color="#E5E5E5">types</font><font color="#CCCCCC"> of storage systems for</font><font color="#E5E5E5"> storing</font>

62
00:03:38,250 --> 00:03:45,140
different types of data<font color="#E5E5E5"> we all know very</font>

63
00:03:42,900 --> 00:03:48,470
<font color="#E5E5E5">well block and file storage</font>

64
00:03:45,140 --> 00:03:52,470
<font color="#E5E5E5">walk data that is you know</font><font color="#CCCCCC"> divided</font><font color="#E5E5E5"> into</font>

65
00:03:48,470 --> 00:03:55,489
chunks of blocks we<font color="#E5E5E5"> know how</font><font color="#CCCCCC"> its access</font>

66
00:03:52,470 --> 00:04:01,739
it's<font color="#E5E5E5"> really well understood file systems</font>

67
00:03:55,489 --> 00:04:04,620
again<font color="#CCCCCC"> they're well understood and you</font>

68
00:04:01,739 --> 00:04:08,160
have object storage<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> just a</font>

69
00:04:04,620 --> 00:04:12,180
logical logical architecture<font color="#CCCCCC"> that is</font>

70
00:04:08,160 --> 00:04:15,209
used<font color="#E5E5E5"> to manage data as objects or blobs</font>

71
00:04:12,180 --> 00:04:17,850
of data<font color="#E5E5E5"> what's interesting about object</font>

72
00:04:15,209 --> 00:04:19,280
storage is that<font color="#E5E5E5"> now when you talk about</font>

73
00:04:17,850 --> 00:04:21,920
<font color="#E5E5E5">an object</font>

74
00:04:19,279 --> 00:04:26,179
<font color="#E5E5E5">that object contains the data and the</font>

75
00:04:21,920 --> 00:04:29,810
metadata for about<font color="#E5E5E5"> that data</font><font color="#CCCCCC"> and it's</font>

76
00:04:26,180 --> 00:04:31,940
usually contains a unique<font color="#E5E5E5"> ID</font><font color="#CCCCCC"> how you</font>

77
00:04:29,810 --> 00:04:35,780
<font color="#E5E5E5">access that data is through a unique ID</font>

78
00:04:31,940 --> 00:04:37,790
<font color="#CCCCCC">so it has a</font><font color="#E5E5E5"> very flat address structure</font>

79
00:04:35,780 --> 00:04:40,669
for example compared to<font color="#CCCCCC"> two file storage</font>

80
00:04:37,790 --> 00:04:44,510
where you have directories<font color="#E5E5E5"> and you have</font>

81
00:04:40,669 --> 00:04:48,080
files<font color="#E5E5E5"> object storage typically is just a</font>

82
00:04:44,510 --> 00:04:50,480
very flat<font color="#E5E5E5"> maybe you have buckets or</font>

83
00:04:48,080 --> 00:04:53,330
containers to put<font color="#CCCCCC"> your objects into and</font>

84
00:04:50,480 --> 00:04:57,470
that's<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> it the way you exit</font>

85
00:04:53,330 --> 00:04:59,450
is through its unique ID<font color="#E5E5E5"> and in the the</font>

86
00:04:57,470 --> 00:05:03,070
<font color="#E5E5E5">other point that it's interesting about</font>

87
00:04:59,450 --> 00:05:05,960
<font color="#E5E5E5">object storage is that differently from</font>

88
00:05:03,070 --> 00:05:07,669
block and file is how you access<font color="#E5E5E5"> it</font>

89
00:05:05,960 --> 00:05:08,349
typically<font color="#E5E5E5"> you access it the</font><font color="#CCCCCC"> object as a</font>

90
00:05:07,669 --> 00:05:10,880
whole

91
00:05:08,350 --> 00:05:12,530
so you either<font color="#CCCCCC"> riding a whole blob of</font>

92
00:05:10,880 --> 00:05:15,260
data or you<font color="#E5E5E5"> getting a whole block</font><font color="#CCCCCC"> of</font>

93
00:05:12,530 --> 00:05:16,909
data again<font color="#E5E5E5"> compare for example to file</font>

94
00:05:15,260 --> 00:05:20,150
where<font color="#CCCCCC"> you might be able</font><font color="#E5E5E5"> to you know open</font>

95
00:05:16,910 --> 00:05:22,490
<font color="#CCCCCC">and append and</font><font color="#E5E5E5"> write in parts of it</font><font color="#CCCCCC"> and</font>

96
00:05:20,150 --> 00:05:24,679
really<font color="#CCCCCC"> just parts of it typically with</font>

97
00:05:22,490 --> 00:05:28,640
an<font color="#CCCCCC"> object storage you put and you get</font>

98
00:05:24,680 --> 00:05:30,050
the whole thing<font color="#E5E5E5"> the whole blob of</font><font color="#CCCCCC"> T the</font>

99
00:05:28,640 --> 00:05:32,330
other<font color="#E5E5E5"> distinction that</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to make</font>

100
00:05:30,050 --> 00:05:37,510
here<font color="#CCCCCC"> that I think it's very interesting</font>

101
00:05:32,330 --> 00:05:40,159
<font color="#E5E5E5">is that with block and file you have</font>

102
00:05:37,510 --> 00:05:42,169
<font color="#E5E5E5">local exes</font><font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> think of you</font><font color="#CCCCCC"> know</font>

103
00:05:40,160 --> 00:05:44,990
<font color="#CCCCCC">your</font><font color="#E5E5E5"> say to</font><font color="#CCCCCC"> drive your local hard drive</font>

104
00:05:42,169 --> 00:05:46,490
<font color="#E5E5E5">and you're accessing it locally through</font>

105
00:05:44,990 --> 00:05:47,870
for example<font color="#CCCCCC"> your file system you have</font>

106
00:05:46,490 --> 00:05:50,539
<font color="#CCCCCC">exit fast file system that</font><font color="#E5E5E5"> are you</font>

107
00:05:47,870 --> 00:05:52,940
<font color="#E5E5E5">accessing locally or you have remote</font>

108
00:05:50,539 --> 00:05:53,599
connections to like your Samba share and

109
00:05:52,940 --> 00:05:57,650
why not

110
00:05:53,600 --> 00:05:59,960
but with object storage the what's

111
00:05:57,650 --> 00:06:03,320
distinct about<font color="#E5E5E5"> it is it's always remote</font>

112
00:05:59,960 --> 00:06:06,229
right<font color="#E5E5E5"> typically you don't access a an</font>

113
00:06:03,320 --> 00:06:08,680
<font color="#E5E5E5">object storage through a local</font>

114
00:06:06,229 --> 00:06:08,680
connection

115
00:06:11,850 --> 00:06:20,640
so what are the use cases<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font>

116
00:06:14,140 --> 00:06:23,110
driving the need for object storage the

117
00:06:20,640 --> 00:06:24,400
first and<font color="#E5E5E5"> foremost the the typical ones</font>

118
00:06:23,110 --> 00:06:26,470
<font color="#CCCCCC">that you see are they private</font><font color="#E5E5E5"> clouds</font>

119
00:06:24,400 --> 00:06:30,729
right so the object storage<font color="#E5E5E5"> market was</font>

120
00:06:26,470 --> 00:06:33,310
<font color="#CCCCCC">pretty much</font><font color="#E5E5E5"> created by Amazon s3</font><font color="#CCCCCC"> but</font>

121
00:06:30,730 --> 00:06:35,350
today there's many public<font color="#E5E5E5"> and</font><font color="#CCCCCC"> private</font>

122
00:06:33,310 --> 00:06:38,140
clouds out there<font color="#CCCCCC"> that are running</font>

123
00:06:35,350 --> 00:06:41,110
OpenStack Swift<font color="#CCCCCC"> I try to list just some</font>

124
00:06:38,140 --> 00:06:42,820
example of<font color="#E5E5E5"> them</font><font color="#CCCCCC"> this are all companies</font>

125
00:06:41,110 --> 00:06:46,210
you know OVH is<font color="#E5E5E5"> based here</font><font color="#CCCCCC"> in Europe</font>

126
00:06:42,820 --> 00:06:48,280
<font color="#CCCCCC">they've spoken at many OpenStack</font>

127
00:06:46,210 --> 00:06:51,219
conferences talking<font color="#E5E5E5"> about a very large</font>

128
00:06:48,280 --> 00:06:53,799
cluster they have running OpenStack

129
00:06:51,220 --> 00:06:55,750
Swift and in storing a lot<font color="#E5E5E5"> of data</font>

130
00:06:53,800 --> 00:06:58,870
what's interesting about this use<font color="#CCCCCC"> case</font>

131
00:06:55,750 --> 00:07:01,450
is that typically if you<font color="#E5E5E5"> are maintaining</font>

132
00:06:58,870 --> 00:07:02,830
<font color="#E5E5E5">that private cloud you don't know what</font>

133
00:07:01,450 --> 00:07:04,900
<font color="#E5E5E5">kind of workload you're dealing with</font>

134
00:07:02,830 --> 00:07:09,400
<font color="#E5E5E5">right you're just providing a service</font>

135
00:07:04,900 --> 00:07:12,729
and your users<font color="#E5E5E5"> can be very varied in you</font>

136
00:07:09,400 --> 00:07:17,830
<font color="#E5E5E5">don't know but there are other use cases</font>

137
00:07:12,730 --> 00:07:19,620
<font color="#CCCCCC">too</font><font color="#E5E5E5"> - you have what I called web and</font>

138
00:07:17,830 --> 00:07:22,090
mobile applications for<font color="#CCCCCC"> example</font>

139
00:07:19,620 --> 00:07:26,020
<font color="#E5E5E5">Wikipedia is an example</font><font color="#CCCCCC"> that we always</font>

140
00:07:22,090 --> 00:07:28,840
talk about<font color="#E5E5E5"> where all the media content</font>

141
00:07:26,020 --> 00:07:31,270
in<font color="#E5E5E5"> Wikipedia is actually stored on a</font>

142
00:07:28,840 --> 00:07:33,130
swift cluster which is<font color="#CCCCCC"> interesting to</font>

143
00:07:31,270 --> 00:07:36,580
think about<font color="#E5E5E5"> that is that I don't</font><font color="#CCCCCC"> think</font>

144
00:07:33,130 --> 00:07:38,560
the size of that<font color="#E5E5E5"> cluster is too big but</font>

145
00:07:36,580 --> 00:07:43,120
the number<font color="#CCCCCC"> of users</font><font color="#E5E5E5"> is just tremendous</font>

146
00:07:38,560 --> 00:07:46,140
right<font color="#CCCCCC"> turkcell</font><font color="#E5E5E5"> is a Red Hat customer to</font>

147
00:07:43,120 --> 00:07:50,740
public reference that we<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about they</font>

148
00:07:46,140 --> 00:07:53,890
<font color="#CCCCCC">are a telecom company in Turkey</font><font color="#E5E5E5"> and</font>

149
00:07:50,740 --> 00:07:55,590
they've talked extensively<font color="#E5E5E5"> about some</font>

150
00:07:53,890 --> 00:07:58,120
mobile applications that<font color="#E5E5E5"> they've built</font>

151
00:07:55,590 --> 00:08:02,229
something similar<font color="#E5E5E5"> to like what what's</font>

152
00:07:58,120 --> 00:08:04,060
app that allows their users to<font color="#E5E5E5"> send</font>

153
00:08:02,230 --> 00:08:06,670
messages and<font color="#E5E5E5"> share photos and share</font>

154
00:08:04,060 --> 00:08:11,920
videos and they also<font color="#CCCCCC"> built a pretty</font>

155
00:08:06,670 --> 00:08:14,380
<font color="#CCCCCC">massive</font><font color="#E5E5E5"> Swift cluster in supporting</font>

156
00:08:11,920 --> 00:08:16,300
again millions<font color="#E5E5E5"> of users not only</font><font color="#CCCCCC"> a very</font>

157
00:08:14,380 --> 00:08:17,860
large cluster in capacity<font color="#E5E5E5"> but also</font>

158
00:08:16,300 --> 00:08:20,040
<font color="#E5E5E5">supporting millions and millions of</font>

159
00:08:17,860 --> 00:08:20,040
users

160
00:08:21,639 --> 00:08:26,860
another use case is data archival<font color="#E5E5E5"> and</font>

161
00:08:24,539 --> 00:08:29,349
what I<font color="#E5E5E5"> mean by data archive</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> here it</font>

162
00:08:26,860 --> 00:08:32,110
can be<font color="#E5E5E5"> either or</font><font color="#CCCCCC"> I like to call active</font>

163
00:08:29,349 --> 00:08:35,679
or passive data archival or cold storage

164
00:08:32,110 --> 00:08:39,459
think about it you<font color="#E5E5E5"> know video companies</font>

165
00:08:35,679 --> 00:08:43,989
that are producing or filling<font color="#CCCCCC"> on site</font>

166
00:08:39,458 --> 00:08:49,290
and need to upload their footage<font color="#E5E5E5"> so that</font>

167
00:08:43,990 --> 00:08:52,029
<font color="#CCCCCC">it can be whatever they do processed</font>

168
00:08:49,290 --> 00:08:54,130
<font color="#E5E5E5">production in</font><font color="#CCCCCC"> their production sites so</font>

169
00:08:52,029 --> 00:08:57,820
digital<font color="#E5E5E5"> film tree for example</font><font color="#CCCCCC"> is a</font>

170
00:08:54,130 --> 00:08:59,769
company<font color="#CCCCCC"> that talked while back about</font><font color="#E5E5E5"> how</font>

171
00:08:57,820 --> 00:09:01,480
they were<font color="#CCCCCC"> filming</font><font color="#E5E5E5"> on site and in</font>

172
00:08:59,769 --> 00:09:03,310
Vancouver<font color="#CCCCCC"> for example and there have</font>

173
00:09:01,480 --> 00:09:05,529
their offices<font color="#E5E5E5"> in Los</font><font color="#CCCCCC"> Angeles and</font><font color="#E5E5E5"> they're</font>

174
00:09:03,310 --> 00:09:08,649
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use a swift cluster to upload</font>

175
00:09:05,529 --> 00:09:11,439
their<font color="#CCCCCC"> data to cloud and download that</font>

176
00:09:08,649 --> 00:09:14,170
data<font color="#E5E5E5"> from there our Los</font><font color="#CCCCCC"> Angeles offices</font>

177
00:09:11,440 --> 00:09:17,940
and and<font color="#E5E5E5"> speed up how that production of</font>

178
00:09:14,170 --> 00:09:22,290
the video happened next cloud also<font color="#CCCCCC"> is</font>

179
00:09:17,940 --> 00:09:24,790
been talking here<font color="#CCCCCC"> this weekend</font><font color="#E5E5E5"> they</font>

180
00:09:22,290 --> 00:09:27,839
offer an application similar<font color="#E5E5E5"> to Dropbox</font>

181
00:09:24,790 --> 00:09:31,599
<font color="#CCCCCC">where you can just share files across</font>

182
00:09:27,839 --> 00:09:33,790
<font color="#E5E5E5">many devices or with other</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> so</font>

183
00:09:31,600 --> 00:09:37,149
again all this<font color="#CCCCCC"> different applications</font>

184
00:09:33,790 --> 00:09:39,219
allows you to put data on a swift

185
00:09:37,149 --> 00:09:41,350
cluster you can put it into<font color="#E5E5E5"> cold storage</font>

186
00:09:39,220 --> 00:09:47,860
<font color="#E5E5E5">and you're just</font><font color="#CCCCCC"> backup or you can</font>

187
00:09:41,350 --> 00:09:50,440
actively<font color="#CCCCCC"> being sharing content</font><font color="#E5E5E5"> so based</font>

188
00:09:47,860 --> 00:09:55,000
<font color="#E5E5E5">on this use cases what kinds</font><font color="#CCCCCC"> of</font>

189
00:09:50,440 --> 00:09:58,660
requirements<font color="#CCCCCC"> does that entail what</font><font color="#E5E5E5"> can</font>

190
00:09:55,000 --> 00:10:02,260
we learn<font color="#CCCCCC"> from this use cases the first</font>

191
00:09:58,660 --> 00:10:05,620
one is that<font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> provide</font>

192
00:10:02,260 --> 00:10:09,420
durability<font color="#E5E5E5"> so from our end user</font>

193
00:10:05,620 --> 00:10:12,190
<font color="#E5E5E5">perspective who is uploading that data</font>

194
00:10:09,420 --> 00:10:14,760
again going back<font color="#CCCCCC"> to that distinction</font>

195
00:10:12,190 --> 00:10:17,500
<font color="#CCCCCC">that I made between block and file with</font>

196
00:10:14,760 --> 00:10:19,510
<font color="#CCCCCC">object storage you're really abstracting</font>

197
00:10:17,500 --> 00:10:22,300
<font color="#E5E5E5">the</font><font color="#CCCCCC"> data from where the</font><font color="#E5E5E5"> data is being</font>

198
00:10:19,510 --> 00:10:25,810
stored<font color="#CCCCCC"> I don't want to know I I don't</font>

199
00:10:22,300 --> 00:10:27,459
<font color="#CCCCCC">care how that data</font><font color="#E5E5E5"> is being stored but I</font>

200
00:10:25,810 --> 00:10:28,779
need<font color="#CCCCCC"> the guarantee that it's durable</font>

201
00:10:27,459 --> 00:10:32,800
<font color="#E5E5E5">right</font>

202
00:10:28,779 --> 00:10:34,400
<font color="#E5E5E5">it needs to - I can't I can't</font><font color="#CCCCCC"> afford to</font>

203
00:10:32,800 --> 00:10:36,170
<font color="#E5E5E5">lose this data right</font>

204
00:10:34,400 --> 00:10:39,140
so the<font color="#E5E5E5"> object storage system needs to</font>

205
00:10:36,170 --> 00:10:39,770
<font color="#E5E5E5">take care</font><font color="#CCCCCC"> of that from a user's</font>

206
00:10:39,140 --> 00:10:41,720
<font color="#E5E5E5">perspective</font>

207
00:10:39,770 --> 00:10:43,819
<font color="#E5E5E5">I don't know how where the</font><font color="#CCCCCC"> data's being</font>

208
00:10:41,720 --> 00:10:48,250
<font color="#E5E5E5">stored</font><font color="#CCCCCC"> what kind of Drive how it's being</font>

209
00:10:43,820 --> 00:10:52,880
updated<font color="#CCCCCC"> how refreshed that system is</font>

210
00:10:48,250 --> 00:10:54,650
what kind of backup it does or if it's

211
00:10:52,880 --> 00:10:57,380
<font color="#E5E5E5">using flash or hard drive I don't</font><font color="#CCCCCC"> know</font>

212
00:10:54,650 --> 00:11:01,100
<font color="#E5E5E5">I'm just</font><font color="#CCCCCC"> putting my data on a cloud and</font>

213
00:10:57,380 --> 00:11:03,800
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> to be durable it also needs to be</font>

214
00:11:01,100 --> 00:11:09,260
<font color="#CCCCCC">available meaning I need to be able to</font>

215
00:11:03,800 --> 00:11:14,270
access this data 24/7 if I have to<font color="#E5E5E5"> it</font>

216
00:11:09,260 --> 00:11:16,760
cannot<font color="#E5E5E5"> be unavailable that's a huge</font>

217
00:11:14,270 --> 00:11:22,699
difference for example<font color="#E5E5E5"> again from</font><font color="#CCCCCC"> a lot</font>

218
00:11:16,760 --> 00:11:24,680
of times<font color="#CCCCCC"> even looking the SLA for</font><font color="#E5E5E5"> EBS on</font>

219
00:11:22,700 --> 00:11:26,779
Amazon or<font color="#CCCCCC"> what</font><font color="#E5E5E5"> have you in terms of</font>

220
00:11:24,680 --> 00:11:29,319
block storage<font color="#E5E5E5"> on public clouds it's</font>

221
00:11:26,779 --> 00:11:32,560
actually they provide very<font color="#E5E5E5"> low SLA like</font>

222
00:11:29,320 --> 00:11:34,790
99.9<font color="#CCCCCC"> compared</font><font color="#E5E5E5"> to object storage that has</font>

223
00:11:32,560 --> 00:11:39,939
many nines right it's always<font color="#CCCCCC"> available</font>

224
00:11:34,790 --> 00:11:44,540
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> always being able to connect</font>

225
00:11:39,940 --> 00:11:47,089
<font color="#E5E5E5">accessibility is</font><font color="#CCCCCC"> really how</font><font color="#E5E5E5"> easy it is</font>

226
00:11:44,540 --> 00:11:51,589
to use your<font color="#CCCCCC"> API and in how accessible it</font>

227
00:11:47,089 --> 00:11:53,000
<font color="#E5E5E5">is that's another thing that drove Danny</font>

228
00:11:51,589 --> 00:11:56,480
or another<font color="#E5E5E5"> requirement that drove the</font>

229
00:11:53,000 --> 00:11:58,550
need<font color="#E5E5E5"> for object storage in terms of all</font>

230
00:11:56,480 --> 00:12:01,580
your web apps and<font color="#E5E5E5"> your mobile apps and</font>

231
00:11:58,550 --> 00:12:04,099
how<font color="#CCCCCC"> they're accessing your data</font><font color="#E5E5E5"> they</font>

232
00:12:01,580 --> 00:12:06,830
need to<font color="#CCCCCC"> provide a very simple to use</font><font color="#E5E5E5"> API</font>

233
00:12:04,100 --> 00:12:08,779
to<font color="#E5E5E5"> access that data and of course</font>

234
00:12:06,830 --> 00:12:10,220
scalability you<font color="#E5E5E5"> know buddy starts with</font>

235
00:12:08,779 --> 00:12:12,589
100 petabytes of data<font color="#E5E5E5"> on you know you</font>

236
00:12:10,220 --> 00:12:16,940
start small<font color="#E5E5E5"> and you need to be able to</font>

237
00:12:12,589 --> 00:12:18,560
<font color="#CCCCCC">grow</font><font color="#E5E5E5"> you need to be able to have that</font>

238
00:12:16,940 --> 00:12:24,290
flexibility for your<font color="#CCCCCC"> stored system to</font>

239
00:12:18,560 --> 00:12:27,199
grow as you grow you<font color="#E5E5E5"> need to be able</font><font color="#CCCCCC"> to</font>

240
00:12:24,290 --> 00:12:29,270
grow<font color="#E5E5E5"> extensively but you also need</font><font color="#CCCCCC"> to</font>

241
00:12:27,200 --> 00:12:33,020
<font color="#E5E5E5">keep it all at low cost companies</font><font color="#CCCCCC"> are</font>

242
00:12:29,270 --> 00:12:40,250
trying<font color="#E5E5E5"> to get away from the storage</font>

243
00:12:33,020 --> 00:12:42,050
arrays of old time and they need systems

244
00:12:40,250 --> 00:12:44,079
and that's why we have this room that's

245
00:12:42,050 --> 00:12:46,359
why we have<font color="#E5E5E5"> SDS that's why we talk about</font>

246
00:12:44,079 --> 00:12:49,630
software-defined storage

247
00:12:46,360 --> 00:12:56,740
<font color="#E5E5E5">it needs to be able</font><font color="#CCCCCC"> to be running</font><font color="#E5E5E5"> on</font>

248
00:12:49,630 --> 00:12:59,110
<font color="#CCCCCC">low-cost hardware so based on this use</font>

249
00:12:56,740 --> 00:13:01,899
cases and requirements<font color="#E5E5E5"> let's dive into</font>

250
00:12:59,110 --> 00:13:06,190
OpenStack<font color="#CCCCCC"> Swift</font><font color="#E5E5E5"> and just talk a little</font>

251
00:13:01,899 --> 00:13:10,320
bit about that so Swift is a highly

252
00:13:06,190 --> 00:13:14,709
distributed<font color="#CCCCCC"> event were consistent</font>

253
00:13:10,320 --> 00:13:17,680
durable object storage system<font color="#E5E5E5"> it allows</font>

254
00:13:14,709 --> 00:13:22,209
you<font color="#E5E5E5"> to store your</font><font color="#CCCCCC"> data safely</font><font color="#E5E5E5"> and in</font>

255
00:13:17,680 --> 00:13:24,969
chip<font color="#CCCCCC"> Li talking a little</font><font color="#E5E5E5"> bit of all</font><font color="#CCCCCC"> T</font>

256
00:13:22,209 --> 00:13:28,329
the OpenStack Swift community it's an

257
00:13:24,970 --> 00:13:30,579
<font color="#CCCCCC">open-source project he was one of the</font>

258
00:13:28,329 --> 00:13:36,399
founding projects of OpenStack

259
00:13:30,579 --> 00:13:41,589
<font color="#E5E5E5">it was produced by or founded by</font>

260
00:13:36,399 --> 00:13:43,540
Rackspace<font color="#E5E5E5"> and what drove Rackspace is</font>

261
00:13:41,589 --> 00:13:45,490
that<font color="#E5E5E5"> you know they were a public cloud</font>

262
00:13:43,540 --> 00:13:48,209
they had<font color="#CCCCCC"> the need for an object storage</font>

263
00:13:45,490 --> 00:13:51,730
system so they they implemented<font color="#E5E5E5"> Swift</font>

264
00:13:48,209 --> 00:13:55,268
and then donated<font color="#E5E5E5"> that to open</font><font color="#CCCCCC"> stacks who</font>

265
00:13:51,730 --> 00:13:57,430
found OpenStack what that means though

266
00:13:55,269 --> 00:14:00,250
is that<font color="#E5E5E5"> Swift has been</font><font color="#CCCCCC"> introduction</font>

267
00:13:57,430 --> 00:14:03,609
running a public cloud for about eight

268
00:14:00,250 --> 00:14:07,510
years<font color="#CCCCCC"> it's very stable the API is</font><font color="#E5E5E5"> very</font>

269
00:14:03,610 --> 00:14:10,029
stable this<font color="#E5E5E5"> system is</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> stable and it</font>

270
00:14:07,510 --> 00:14:15,220
has a very<font color="#CCCCCC"> active community we have over</font>

271
00:14:10,029 --> 00:14:17,470
700<font color="#E5E5E5"> total contributors we have about 20</font>

272
00:14:15,220 --> 00:14:20,470
or so<font color="#E5E5E5"> active contributors in a monthly</font>

273
00:14:17,470 --> 00:14:22,920
basis<font color="#E5E5E5"> and one of the things you know</font>

274
00:14:20,470 --> 00:14:26,680
I've<font color="#CCCCCC"> been like</font><font color="#E5E5E5"> I said I've been working</font>

275
00:14:22,920 --> 00:14:27,490
in Swift for about<font color="#CCCCCC"> four years</font><font color="#E5E5E5"> and one of</font>

276
00:14:26,680 --> 00:14:29,709
the things that I always<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to</font>

277
00:14:27,490 --> 00:14:32,740
highlight<font color="#E5E5E5"> about the community is its</font>

278
00:14:29,709 --> 00:14:35,290
<font color="#E5E5E5">focus on automated testing there's a</font>

279
00:14:32,740 --> 00:14:37,449
really huge<font color="#E5E5E5"> focus on CI and then making</font>

280
00:14:35,290 --> 00:14:42,010
<font color="#CCCCCC">sure that the code that</font><font color="#E5E5E5"> we write gets</font>

281
00:14:37,449 --> 00:14:45,430
<font color="#E5E5E5">properly tested so we have really a huge</font>

282
00:14:42,010 --> 00:14:48,310
<font color="#CCCCCC">focus on how we we test every single</font>

283
00:14:45,430 --> 00:14:51,609
code that we put in there<font color="#E5E5E5"> as an example</font>

284
00:14:48,310 --> 00:14:53,949
<font color="#E5E5E5">we I always kind of thought was</font>

285
00:14:51,610 --> 00:14:59,260
<font color="#CCCCCC">interesting how we merge a recent</font>

286
00:14:53,949 --> 00:15:01,030
feature<font color="#E5E5E5"> symlinks and</font><font color="#CCCCCC"> I looked at the the</font>

287
00:14:59,260 --> 00:15:02,890
the piece of middleware that<font color="#E5E5E5"> we're</font>

288
00:15:01,030 --> 00:15:04,060
actually providing<font color="#E5E5E5"> the functionality it</font>

289
00:15:02,890 --> 00:15:06,160
was about<font color="#E5E5E5"> like three hundred lines of</font>

290
00:15:04,060 --> 00:15:07,569
<font color="#E5E5E5">code and look at the test and it's well</font>

291
00:15:06,160 --> 00:15:11,410
<font color="#CCCCCC">two</font><font color="#E5E5E5"> thousand lines of test</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> like</font>

292
00:15:07,570 --> 00:15:13,690
how you know big difference in<font color="#E5E5E5"> but it it</font>

293
00:15:11,410 --> 00:15:15,520
I think it speaks to to the focus<font color="#CCCCCC"> of the</font>

294
00:15:13,690 --> 00:15:17,320
community in terms<font color="#CCCCCC"> of making</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that</font>

295
00:15:15,520 --> 00:15:21,130
<font color="#E5E5E5">you're writing good code it doesn't</font><font color="#CCCCCC"> mean</font>

296
00:15:17,320 --> 00:15:23,110
we don't<font color="#E5E5E5"> have bugs or</font><font color="#CCCCCC"> anything but we we</font>

297
00:15:21,130 --> 00:15:25,660
<font color="#CCCCCC">focus a lot on that and and it's a very</font>

298
00:15:23,110 --> 00:15:32,020
friendly community<font color="#E5E5E5"> it's been</font><font color="#CCCCCC"> a lot of</font>

299
00:15:25,660 --> 00:15:34,810
fun to work on those<font color="#E5E5E5"> folks quick</font>

300
00:15:32,020 --> 00:15:37,780
overview<font color="#E5E5E5"> so you access Swift through a</font>

301
00:15:34,810 --> 00:15:41,819
restful api<font color="#CCCCCC"> it's all through HTTP verbs</font>

302
00:15:37,780 --> 00:15:46,120
<font color="#E5E5E5">so</font><font color="#CCCCCC"> your get your</font><font color="#E5E5E5"> put</font><font color="#CCCCCC"> your delete post</font>

303
00:15:41,820 --> 00:15:48,790
<font color="#E5E5E5">the object key the way you</font><font color="#CCCCCC"> access a</font>

304
00:15:46,120 --> 00:15:50,380
given<font color="#E5E5E5"> object is through our</font><font color="#CCCCCC"> URL</font><font color="#E5E5E5"> so</font>

305
00:15:48,790 --> 00:15:53,439
differently<font color="#CCCCCC"> from other object stored</font>

306
00:15:50,380 --> 00:15:55,330
systems where<font color="#CCCCCC"> you typically put your</font>

307
00:15:53,440 --> 00:15:59,590
data<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this system gives you</font><font color="#E5E5E5"> back a</font>

308
00:15:55,330 --> 00:16:01,630
unique key<font color="#E5E5E5"> the user itself is who</font>

309
00:15:59,590 --> 00:16:09,940
defines what<font color="#E5E5E5"> that key for that object is</font>

310
00:16:01,630 --> 00:16:11,890
so the key is just<font color="#CCCCCC"> a URL you have</font><font color="#E5E5E5"> the</font>

311
00:16:09,940 --> 00:16:15,340
like I talked about the flat address

312
00:16:11,890 --> 00:16:17,470
space before<font color="#E5E5E5"> a you can group objects a</font>

313
00:16:15,340 --> 00:16:21,070
collection<font color="#E5E5E5"> of objects into buckets or</font>

314
00:16:17,470 --> 00:16:24,670
containers and you can group containers

315
00:16:21,070 --> 00:16:27,310
inside a account and think of a count

316
00:16:24,670 --> 00:16:29,680
more like a bank<font color="#E5E5E5"> account where you put</font>

317
00:16:27,310 --> 00:16:31,420
<font color="#CCCCCC">stuff in as opposed to like a user it's</font>

318
00:16:29,680 --> 00:16:34,140
not really an account is<font color="#E5E5E5"> not really a</font>

319
00:16:31,420 --> 00:16:37,839
<font color="#CCCCCC">user's more like just a group of</font>

320
00:16:34,140 --> 00:16:41,230
<font color="#CCCCCC">containers</font><font color="#E5E5E5"> so it's just a way</font><font color="#CCCCCC"> to</font>

321
00:16:37,840 --> 00:16:47,140
organize your cluster across multiple

322
00:16:41,230 --> 00:16:50,920
accounts I mentioned<font color="#E5E5E5"> already before it's</font>

323
00:16:47,140 --> 00:16:54,790
a highly<font color="#E5E5E5"> durable and distributed storage</font>

324
00:16:50,920 --> 00:16:58,510
system<font color="#E5E5E5"> you able</font><font color="#CCCCCC"> to low balance your your</font>

325
00:16:54,790 --> 00:17:01,300
cluster and you replicate<font color="#E5E5E5"> the data many</font>

326
00:16:58,510 --> 00:17:03,760
times to maintain data durability<font color="#E5E5E5"> or you</font>

327
00:17:01,300 --> 00:17:05,200
use erasure coding but the point is<font color="#E5E5E5"> that</font>

328
00:17:03,760 --> 00:17:08,290
<font color="#E5E5E5">there's no single point of</font><font color="#CCCCCC"> failure</font><font color="#E5E5E5"> your</font>

329
00:17:05,200 --> 00:17:11,920
system can be depending<font color="#E5E5E5"> on how you</font>

330
00:17:08,290 --> 00:17:13,049
deploy<font color="#E5E5E5"> you know you can deploy in such a</font>

331
00:17:11,920 --> 00:17:17,009
way<font color="#CCCCCC"> that you don't</font><font color="#E5E5E5"> have</font>

332
00:17:13,049 --> 00:17:18,989
<font color="#CCCCCC">singapura fears</font><font color="#E5E5E5"> a interesting</font>

333
00:17:17,009 --> 00:17:23,189
distinction<font color="#E5E5E5"> about</font><font color="#CCCCCC"> Swift is</font><font color="#E5E5E5"> that it's in</font>

334
00:17:18,989 --> 00:17:25,919
a<font color="#E5E5E5"> virtual consistent system so it's</font>

335
00:17:23,189 --> 00:17:28,499
designed<font color="#E5E5E5"> for high availability and</font>

336
00:17:25,919 --> 00:17:34,470
partition tolerance<font color="#E5E5E5"> sacrificing a</font><font color="#CCCCCC"> little</font>

337
00:17:28,499 --> 00:17:35,789
bit of consistency<font color="#E5E5E5"> the myth that I like</font>

338
00:17:34,470 --> 00:17:37,830
to dispel<font color="#E5E5E5"> about eventual consistency</font>

339
00:17:35,789 --> 00:17:39,749
that<font color="#E5E5E5"> it that's the the number one thing</font>

340
00:17:37,830 --> 00:17:42,389
that<font color="#E5E5E5"> I hear a lot is</font><font color="#CCCCCC"> that a lot of</font>

341
00:17:39,749 --> 00:17:45,210
people equate eventual consistency<font color="#E5E5E5"> to</font>

342
00:17:42,389 --> 00:17:47,369
eventual replication<font color="#E5E5E5"> and that's not true</font>

343
00:17:45,210 --> 00:17:49,950
so eventual consistency<font color="#E5E5E5"> does not mean</font>

344
00:17:47,369 --> 00:17:52,320
eventual replication<font color="#E5E5E5"> it does not mean</font>

345
00:17:49,950 --> 00:17:55,590
that<font color="#E5E5E5"> Swift</font><font color="#CCCCCC"> when you put data</font><font color="#E5E5E5"> into Swift</font>

346
00:17:52,320 --> 00:17:57,019
<font color="#E5E5E5">you store just one</font><font color="#CCCCCC"> replica and Swift</font>

347
00:17:55,590 --> 00:17:59,668
will eventually replicate your data

348
00:17:57,019 --> 00:18:02,249
<font color="#E5E5E5">because if that was the case then you'd</font>

349
00:17:59,669 --> 00:18:03,779
have a window of<font color="#CCCCCC"> time there that you</font>

350
00:18:02,249 --> 00:18:05,279
might<font color="#E5E5E5"> lose your data because you might</font>

351
00:18:03,779 --> 00:18:06,960
<font color="#E5E5E5">have just one copy and that disk might</font>

352
00:18:05,279 --> 00:18:09,659
fail that's not the case

353
00:18:06,960 --> 00:18:14,129
<font color="#CCCCCC">Stuart</font><font color="#E5E5E5"> Swift will always store</font><font color="#CCCCCC"> your data</font>

354
00:18:09,659 --> 00:18:17,820
<font color="#CCCCCC">directly with multiple replicas</font><font color="#E5E5E5"> so that</font>

355
00:18:14,129 --> 00:18:22,619
when<font color="#CCCCCC"> a system goes down</font><font color="#E5E5E5"> or something</font>

356
00:18:17,820 --> 00:18:26,039
your data will not<font color="#E5E5E5"> be lost shameless</font>

357
00:18:22,619 --> 00:18:28,350
<font color="#CCCCCC">plug there's going to be another talk</font>

358
00:18:26,039 --> 00:18:31,559
later today<font color="#E5E5E5"> where it's actually going to</font>

359
00:18:28,350 --> 00:18:33,299
dive a little bit<font color="#E5E5E5"> more into how</font>

360
00:18:31,559 --> 00:18:36,269
<font color="#CCCCCC">adventurous</font><font color="#E5E5E5"> consistency can actually</font>

361
00:18:33,299 --> 00:18:38,730
play a really<font color="#E5E5E5"> nice role into the Swift</font>

362
00:18:36,269 --> 00:18:41,059
<font color="#E5E5E5">architecture and that's when we talk</font>

363
00:18:38,730 --> 00:18:43,679
about<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example global</font><font color="#E5E5E5"> replication so</font>

364
00:18:41,059 --> 00:18:46,408
when you have multiple<font color="#CCCCCC"> data centers</font><font color="#E5E5E5"> and</font>

365
00:18:43,679 --> 00:18:51,029
you need to to<font color="#E5E5E5"> have a cluster down you</font>

366
00:18:46,409 --> 00:18:53,129
know goes<font color="#E5E5E5"> across or expands across</font>

367
00:18:51,029 --> 00:18:56,190
multiple data centers<font color="#CCCCCC"> or across</font><font color="#E5E5E5"> the</font>

368
00:18:53,129 --> 00:18:59,449
globe that's where object adventure

369
00:18:56,190 --> 00:18:59,450
consistency<font color="#E5E5E5"> really shines</font>

370
00:19:01,360 --> 00:19:09,490
so<font color="#CCCCCC"> if has a</font><font color="#E5E5E5"> very rich API exposing a lot</font>

371
00:19:06,010 --> 00:19:12,250
of<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> I list some of them</font>

372
00:19:09,490 --> 00:19:15,010
there<font color="#E5E5E5"> I'd like to highlight</font><font color="#CCCCCC"> just a</font>

373
00:19:12,250 --> 00:19:19,090
<font color="#CCCCCC">couple</font><font color="#E5E5E5"> of them object versioning is when</font>

374
00:19:15,010 --> 00:19:21,280
you're able<font color="#CCCCCC"> to store</font><font color="#E5E5E5"> or if you have a</font>

375
00:19:19,090 --> 00:19:23,199
workload<font color="#CCCCCC"> that overwrites</font><font color="#E5E5E5"> objects</font><font color="#CCCCCC"> you're</font>

376
00:19:21,280 --> 00:19:25,990
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to maintain odd copies of that</font>

377
00:19:23,200 --> 00:19:28,900
<font color="#CCCCCC">object an object expiration is when</font>

378
00:19:25,990 --> 00:19:31,000
you're able<font color="#CCCCCC"> to store an object</font><font color="#E5E5E5"> and set</font>

379
00:19:28,900 --> 00:19:32,860
an expiration time on it and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will be</font>

380
00:19:31,000 --> 00:19:35,440
automatically deleted<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> so the</font>

381
00:19:32,860 --> 00:19:41,740
system takes care<font color="#CCCCCC"> of that automatic</font>

382
00:19:35,440 --> 00:19:46,030
deletion<font color="#E5E5E5"> SLO is talking about or is a</font>

383
00:19:41,740 --> 00:19:51,370
feature that<font color="#E5E5E5"> provides large object</font>

384
00:19:46,030 --> 00:19:54,250
support so similar to<font color="#E5E5E5"> other object</font>

385
00:19:51,370 --> 00:19:57,489
<font color="#E5E5E5">storage systems Swift applies a</font>

386
00:19:54,250 --> 00:19:59,710
artificial<font color="#E5E5E5"> limitation on how big your</font>

387
00:19:57,490 --> 00:20:01,960
object can be and<font color="#E5E5E5"> that limit is</font>

388
00:19:59,710 --> 00:20:03,670
typically<font color="#CCCCCC"> 5 gigabytes</font><font color="#E5E5E5"> and that's really</font>

389
00:20:01,960 --> 00:20:06,340
artificial<font color="#E5E5E5"> is just so that you don't</font>

390
00:20:03,670 --> 00:20:09,250
have<font color="#E5E5E5"> people trying to upload using HTTP</font>

391
00:20:06,340 --> 00:20:11,709
<font color="#E5E5E5">you know a terabyte object it wouldn't</font>

392
00:20:09,250 --> 00:20:14,050
be a good<font color="#CCCCCC"> idea to do that</font><font color="#E5E5E5"> so we put the</font>

393
00:20:11,710 --> 00:20:16,330
artificial limitation<font color="#E5E5E5"> of saying</font><font color="#CCCCCC"> 5</font>

394
00:20:14,050 --> 00:20:19,090
gigabytes is the maximum size but using

395
00:20:16,330 --> 00:20:21,460
a feature<font color="#E5E5E5"> like SLO or static large</font>

396
00:20:19,090 --> 00:20:24,070
objects you can segment your<font color="#E5E5E5"> one</font>

397
00:20:21,460 --> 00:20:26,530
terabyte object into smaller<font color="#CCCCCC"> chunks</font>

398
00:20:24,070 --> 00:20:28,270
<font color="#E5E5E5">upload them separately and then provide</font>

399
00:20:26,530 --> 00:20:31,690
a manifest file<font color="#E5E5E5"> and Swift will</font>

400
00:20:28,270 --> 00:20:35,220
concatenate<font color="#E5E5E5"> your objects for temporary</font>

401
00:20:31,690 --> 00:20:38,740
<font color="#E5E5E5">or all your temporary URL is another</font>

402
00:20:35,220 --> 00:20:42,310
feature where for example<font color="#E5E5E5"> you upload an</font>

403
00:20:38,740 --> 00:20:45,040
object<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> want to provide temporary</font>

404
00:20:42,310 --> 00:20:46,560
access<font color="#E5E5E5"> to somebody else and you don't</font>

405
00:20:45,040 --> 00:20:50,680
want<font color="#E5E5E5"> to provide them your authentication</font>

406
00:20:46,560 --> 00:20:52,899
<font color="#E5E5E5">secrets you can produce a signed</font>

407
00:20:50,680 --> 00:20:55,030
<font color="#E5E5E5">temporary URL that you can hand it to</font>

408
00:20:52,900 --> 00:20:58,950
them<font color="#E5E5E5"> they can use to get that data and</font>

409
00:20:55,030 --> 00:21:01,690
that URL will expire<font color="#E5E5E5"> after some time</font>

410
00:20:58,950 --> 00:21:04,270
<font color="#CCCCCC">Swift also provides support for</font>

411
00:21:01,690 --> 00:21:05,890
different<font color="#E5E5E5"> types of authentication</font>

412
00:21:04,270 --> 00:21:09,330
systems<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> temporary is one of</font>

413
00:21:05,890 --> 00:21:11,620
them<font color="#E5E5E5"> Keystone and OpenStack form post</font>

414
00:21:09,330 --> 00:21:13,750
<font color="#E5E5E5">there's also going to be</font><font color="#CCCCCC"> another talk by</font>

415
00:21:11,620 --> 00:21:14,689
<font color="#CCCCCC">christian</font><font color="#E5E5E5"> today talking</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font>

416
00:21:13,750 --> 00:21:16,970
<font color="#CCCCCC">about</font>

417
00:21:14,690 --> 00:21:18,410
how to develop your<font color="#CCCCCC"> own apps and you</font>

418
00:21:16,970 --> 00:21:24,290
cover a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> more about</font>

419
00:21:18,410 --> 00:21:28,460
authentication<font color="#E5E5E5"> stock a little</font><font color="#CCCCCC"> bit of a</font>

420
00:21:24,290 --> 00:21:31,070
<font color="#E5E5E5">swift architecture so if has a very</font>

421
00:21:28,460 --> 00:21:33,790
modular architecture that<font color="#E5E5E5"> allows for the</font>

422
00:21:31,070 --> 00:21:38,080
<font color="#E5E5E5">flexibility when you're scaling it out</font>

423
00:21:33,790 --> 00:21:45,950
<font color="#CCCCCC">cover here</font><font color="#E5E5E5"> four main components</font><font color="#CCCCCC"> the</font>

424
00:21:38,080 --> 00:21:48,949
<font color="#CCCCCC">proxy</font><font color="#E5E5E5"> is your main gateway to to the</font>

425
00:21:45,950 --> 00:21:50,540
cluster<font color="#E5E5E5"> so that's how users will send</font>

426
00:21:48,950 --> 00:21:53,090
our requests and the requests are

427
00:21:50,540 --> 00:21:57,440
received at<font color="#CCCCCC"> the proxy</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the proxy will</font>

428
00:21:53,090 --> 00:22:00,560
then proxy out those requests to the

429
00:21:57,440 --> 00:22:02,410
distorts<font color="#E5E5E5"> the</font><font color="#CCCCCC"> back-end storage</font><font color="#E5E5E5"> system the</font>

430
00:22:00,560 --> 00:22:05,030
<font color="#CCCCCC">back-end storage system is</font><font color="#E5E5E5"> made up</font><font color="#CCCCCC"> of</font>

431
00:22:02,410 --> 00:22:07,940
the account server<font color="#E5E5E5"> the container server</font>

432
00:22:05,030 --> 00:22:10,639
<font color="#E5E5E5">and the object server the account server</font>

433
00:22:07,940 --> 00:22:14,390
and the container server<font color="#E5E5E5"> the account is</font>

434
00:22:10,640 --> 00:22:15,770
really<font color="#E5E5E5"> holding just a list of all the</font>

435
00:22:14,390 --> 00:22:18,260
containers<font color="#CCCCCC"> for that given</font><font color="#E5E5E5"> account and</font>

436
00:22:15,770 --> 00:22:20,360
the container<font color="#E5E5E5"> you're just holding a list</font>

437
00:22:18,260 --> 00:22:24,980
of all the objects for that object<font color="#E5E5E5"> for</font>

438
00:22:20,360 --> 00:22:26,149
<font color="#CCCCCC">that container</font><font color="#E5E5E5"> the in some metadata the</font>

439
00:22:24,980 --> 00:22:28,960
account and container server<font color="#E5E5E5"> are</font>

440
00:22:26,150 --> 00:22:33,110
typically data is typically<font color="#CCCCCC"> stored on a</font>

441
00:22:28,960 --> 00:22:35,240
database on disk<font color="#E5E5E5"> and it's replicated</font>

442
00:22:33,110 --> 00:22:37,129
properly and all that<font color="#E5E5E5"> and the object</font>

443
00:22:35,240 --> 00:22:39,050
<font color="#E5E5E5">server itself really becomes kind</font><font color="#CCCCCC"> of the</font>

444
00:22:37,130 --> 00:22:43,100
most important part<font color="#E5E5E5"> here where that's</font>

445
00:22:39,050 --> 00:22:46,879
the<font color="#E5E5E5"> service that is storing your</font><font color="#CCCCCC"> data on</font>

446
00:22:43,100 --> 00:22:48,320
disk<font color="#E5E5E5"> what's interesting about this</font>

447
00:22:46,880 --> 00:22:51,140
modular architecture is that<font color="#CCCCCC"> you could</font>

448
00:22:48,320 --> 00:22:54,590
have those four services running<font color="#E5E5E5"> in in</font>

449
00:22:51,140 --> 00:22:56,150
one machine<font color="#CCCCCC"> or you can have them run in</font>

450
00:22:54,590 --> 00:22:56,830
separate machines<font color="#E5E5E5"> independently of each</font>

451
00:22:56,150 --> 00:23:02,000
other

452
00:22:56,830 --> 00:23:04,899
<font color="#E5E5E5">they are just web servers running or</font>

453
00:23:02,000 --> 00:23:07,610
implementing the the<font color="#E5E5E5"> Whiskey interface</font>

454
00:23:04,900 --> 00:23:08,870
and the communication between them<font color="#E5E5E5"> so</font>

455
00:23:07,610 --> 00:23:10,459
not only<font color="#E5E5E5"> the communication between the</font>

456
00:23:08,870 --> 00:23:14,979
<font color="#E5E5E5">user and the proxy but the communication</font>

457
00:23:10,460 --> 00:23:14,980
<font color="#E5E5E5">between them is also through HTTP</font>

458
00:23:17,210 --> 00:23:22,410
<font color="#E5E5E5">just giving a</font><font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> more of the</font>

459
00:23:19,590 --> 00:23:25,918
<font color="#E5E5E5">flow of the data here</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> imagine</font><font color="#CCCCCC"> for</font>

460
00:23:22,410 --> 00:23:27,809
example that<font color="#E5E5E5"> a user is putting an object</font>

461
00:23:25,919 --> 00:23:30,120
<font color="#CCCCCC">is writing an object it sends that</font>

462
00:23:27,809 --> 00:23:32,850
request to<font color="#E5E5E5"> the proxy</font><font color="#CCCCCC"> and what happens is</font>

463
00:23:30,120 --> 00:23:35,340
that<font color="#E5E5E5"> the proxy will then replicate that</font>

464
00:23:32,850 --> 00:23:38,070
<font color="#CCCCCC">data</font><font color="#E5E5E5"> so we'll write three copies of that</font>

465
00:23:35,340 --> 00:23:39,959
data<font color="#CCCCCC"> to</font><font color="#E5E5E5"> in a</font><font color="#CCCCCC"> load</font><font color="#E5E5E5"> balance and distribute</font>

466
00:23:38,070 --> 00:23:44,309
it across the cluster<font color="#E5E5E5"> in such a way that</font>

467
00:23:39,960 --> 00:23:46,890
you<font color="#E5E5E5"> the algorithm</font><font color="#CCCCCC"> make sure that you're</font>

468
00:23:44,309 --> 00:23:49,830
<font color="#E5E5E5">writing the data across</font><font color="#CCCCCC"> different</font>

469
00:23:46,890 --> 00:23:52,290
failure domains<font color="#E5E5E5"> so either the failure</font>

470
00:23:49,830 --> 00:23:54,600
domain can<font color="#CCCCCC"> be you know a rack a node</font><font color="#E5E5E5"> or</font>

471
00:23:52,290 --> 00:23:55,918
even a whole data<font color="#E5E5E5"> center so if you have</font>

472
00:23:54,600 --> 00:23:57,959
<font color="#E5E5E5">multiple data</font><font color="#CCCCCC"> centers you would make</font>

473
00:23:55,919 --> 00:23:59,429
sure<font color="#CCCCCC"> they</font><font color="#E5E5E5"> distribute</font><font color="#CCCCCC"> to your data you</font>

474
00:23:57,960 --> 00:24:01,530
know across<font color="#CCCCCC"> two different data centers</font>

475
00:23:59,429 --> 00:24:03,450
<font color="#CCCCCC">or if you have</font><font color="#E5E5E5"> multiple racks in a data</font>

476
00:24:01,530 --> 00:24:08,520
center<font color="#E5E5E5"> you put in different data set</font>

477
00:24:03,450 --> 00:24:11,250
<font color="#E5E5E5">racks the other distinction that I like</font>

478
00:24:08,520 --> 00:24:13,559
about this slide<font color="#E5E5E5"> is that you can also</font>

479
00:24:11,250 --> 00:24:15,690
break up your cluster between<font color="#CCCCCC"> what we</font>

480
00:24:13,559 --> 00:24:18,120
<font color="#CCCCCC">call</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> exosphere and the</font><font color="#E5E5E5"> stores here</font>

481
00:24:15,690 --> 00:24:20,040
and it allows you to<font color="#CCCCCC"> scale them</font>

482
00:24:18,120 --> 00:24:22,260
separately from each other so the excess

483
00:24:20,040 --> 00:24:24,418
tier is going to be their proxy and<font color="#E5E5E5"> it's</font>

484
00:24:22,260 --> 00:24:26,790
gonna be<font color="#E5E5E5"> very CPU intensive so if you</font>

485
00:24:24,419 --> 00:24:28,500
need<font color="#E5E5E5"> to scale out bandwidth you know you</font>

486
00:24:26,790 --> 00:24:31,350
might just<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to add more</font><font color="#CCCCCC"> and more</font>

487
00:24:28,500 --> 00:24:33,780
proxies<font color="#CCCCCC"> but if you need</font><font color="#E5E5E5"> to grow capacity</font>

488
00:24:31,350 --> 00:24:35,399
<font color="#E5E5E5">you might be able to just to grow your</font>

489
00:24:33,780 --> 00:24:37,678
your storage tier and add more

490
00:24:35,400 --> 00:24:40,320
discipline and<font color="#E5E5E5"> more storage capacity</font><font color="#CCCCCC"> as</font>

491
00:24:37,679 --> 00:24:42,480
opposed to having<font color="#E5E5E5"> to add more proxy so</font>

492
00:24:40,320 --> 00:24:47,580
that's that's a really<font color="#E5E5E5"> neat thing</font><font color="#CCCCCC"> about</font>

493
00:24:42,480 --> 00:24:49,650
this architecture but you can't talk

494
00:24:47,580 --> 00:24:55,049
<font color="#CCCCCC">about Swift architecture without talking</font>

495
00:24:49,650 --> 00:25:00,030
about<font color="#CCCCCC"> the ring the ring is really about</font>

496
00:24:55,049 --> 00:25:02,610
how Swift<font color="#E5E5E5"> is able to determine where</font><font color="#CCCCCC"> the</font>

497
00:25:00,030 --> 00:25:10,610
data is<font color="#CCCCCC"> stored</font><font color="#E5E5E5"> so it's the ring is</font><font color="#CCCCCC"> just</font>

498
00:25:02,610 --> 00:25:15,030
a binary file<font color="#E5E5E5"> that is using a a hashing</font>

499
00:25:10,610 --> 00:25:17,520
<font color="#E5E5E5">ring to the term be able to</font><font color="#CCCCCC"> determine</font>

500
00:25:15,030 --> 00:25:21,178
where the<font color="#E5E5E5"> data or where an</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> is</font>

501
00:25:17,520 --> 00:25:23,340
stored<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your cluster</font><font color="#E5E5E5"> so that's</font>

502
00:25:21,179 --> 00:25:24,780
<font color="#CCCCCC">something that you produce the ring when</font>

503
00:25:23,340 --> 00:25:27,480
<font color="#CCCCCC">your as an operator when</font><font color="#E5E5E5"> you're</font>

504
00:25:24,780 --> 00:25:31,240
deploying<font color="#CCCCCC"> your</font><font color="#E5E5E5"> cluster and the way it's</font>

505
00:25:27,480 --> 00:25:34,630
<font color="#E5E5E5">used is when a object</font>

506
00:25:31,240 --> 00:25:37,570
comes in or account or container<font color="#E5E5E5"> contain</font>

507
00:25:34,630 --> 00:25:41,440
<font color="#CCCCCC">a request comes in the proxy is</font><font color="#E5E5E5"> going to</font>

508
00:25:37,570 --> 00:25:44,428
look up is going<font color="#E5E5E5"> to hash the name of the</font>

509
00:25:41,440 --> 00:25:48,850
<font color="#E5E5E5">the object that unique ID</font><font color="#CCCCCC"> date</font><font color="#E5E5E5"> URL and</font>

510
00:25:44,429 --> 00:25:54,160
from that hash<font color="#E5E5E5"> it can look up where in</font>

511
00:25:48,850 --> 00:25:57,370
your cluster<font color="#E5E5E5"> the data would</font><font color="#CCCCCC"> be stored so</font>

512
00:25:54,160 --> 00:26:00,370
the location is<font color="#E5E5E5"> deterministic by using</font>

513
00:25:57,370 --> 00:26:01,780
the ring and<font color="#E5E5E5"> that guarantees</font><font color="#CCCCCC"> that no</font>

514
00:26:00,370 --> 00:26:05,979
<font color="#CCCCCC">single point of failure</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> you're</font>

515
00:26:01,780 --> 00:26:07,690
just every node in<font color="#CCCCCC"> your cluster</font><font color="#E5E5E5"> is going</font>

516
00:26:05,980 --> 00:26:13,660
to have that ring and<font color="#CCCCCC"> you can look up</font>

517
00:26:07,690 --> 00:26:15,580
<font color="#E5E5E5">that</font><font color="#CCCCCC"> information there another</font>

518
00:26:13,660 --> 00:26:17,559
<font color="#E5E5E5">interesting point about the</font><font color="#CCCCCC"> swift</font>

519
00:26:15,580 --> 00:26:20,939
architecture is what we call storage

520
00:26:17,559 --> 00:26:25,178
policies<font color="#E5E5E5"> so we have the support to store</font>

521
00:26:20,940 --> 00:26:27,490
data across<font color="#E5E5E5"> different data storage</font><font color="#CCCCCC"> rules</font>

522
00:26:25,179 --> 00:26:29,200
or a replica as we say<font color="#E5E5E5"> so I talked a lot</font>

523
00:26:27,490 --> 00:26:31,750
about you know<font color="#CCCCCC"> three replicas to</font><font color="#E5E5E5"> give an</font>

524
00:26:29,200 --> 00:26:34,570
example<font color="#E5E5E5"> but you could define you</font><font color="#CCCCCC"> know</font>

525
00:26:31,750 --> 00:26:36,640
<font color="#E5E5E5">really pulls off data kind of break up</font>

526
00:26:34,570 --> 00:26:38,139
your cluster into<font color="#E5E5E5"> pools of data and you</font>

527
00:26:36,640 --> 00:26:40,750
might have data that<font color="#CCCCCC"> needs to be</font><font color="#E5E5E5"> stored</font>

528
00:26:38,140 --> 00:26:43,330
<font color="#CCCCCC">in with</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> abruptly</font><font color="#E5E5E5"> cos or or two</font>

529
00:26:40,750 --> 00:26:45,250
replicas<font color="#E5E5E5"> or a rigid coding you can also</font>

530
00:26:43,330 --> 00:26:50,649
use this to say let's say you know I

531
00:26:45,250 --> 00:26:52,900
have<font color="#E5E5E5"> a very for legal reasons or</font>

532
00:26:50,650 --> 00:26:54,670
whatever<font color="#E5E5E5"> this data needs to stay in</font>

533
00:26:52,900 --> 00:26:55,870
Europe<font color="#E5E5E5"> you cannot go to the US for</font>

534
00:26:54,670 --> 00:26:58,420
example<font color="#E5E5E5"> you cannot be</font><font color="#CCCCCC"> replicated to</font><font color="#E5E5E5"> the</font>

535
00:26:55,870 --> 00:27:00,309
<font color="#CCCCCC">US</font><font color="#E5E5E5"> you could also define a pool that</font><font color="#CCCCCC"> you</font>

536
00:26:58,420 --> 00:27:02,620
know maintains that data just<font color="#CCCCCC"> in your</font>

537
00:27:00,309 --> 00:27:05,379
cluster<font color="#E5E5E5"> or your data center that is in</font>

538
00:27:02,620 --> 00:27:08,409
Europe<font color="#CCCCCC"> so you using storage policies you</font>

539
00:27:05,380 --> 00:27:11,770
<font color="#E5E5E5">can do that and that's an operator</font>

540
00:27:08,410 --> 00:27:13,960
defined<font color="#E5E5E5"> role that the operator would</font>

541
00:27:11,770 --> 00:27:17,020
define from a user's perspective the<font color="#CCCCCC"> way</font>

542
00:27:13,960 --> 00:27:19,390
you would use storage policies is when

543
00:27:17,020 --> 00:27:21,400
you're<font color="#CCCCCC"> creating a container you define</font>

544
00:27:19,390 --> 00:27:23,800
what storage policy<font color="#E5E5E5"> that container is</font>

545
00:27:21,400 --> 00:27:25,030
<font color="#CCCCCC">going to have and then every object that</font>

546
00:27:23,800 --> 00:27:26,500
<font color="#E5E5E5">you're going to</font><font color="#CCCCCC"> put inside that</font>

547
00:27:25,030 --> 00:27:29,370
container is<font color="#CCCCCC"> going to use that storage</font>

548
00:27:26,500 --> 00:27:31,840
policy so<font color="#E5E5E5"> you could have you know</font>

549
00:27:29,370 --> 00:27:33,909
<font color="#E5E5E5">contain</font><font color="#CCCCCC"> a policy of flashdrives for</font>

550
00:27:31,840 --> 00:27:36,070
example very high performance or you

551
00:27:33,910 --> 00:27:38,820
know what<font color="#E5E5E5"> have you that can be defined</font>

552
00:27:36,070 --> 00:27:38,820
by the operator

553
00:27:39,970 --> 00:27:45,970
I mentioned the four main components<font color="#CCCCCC"> of</font>

554
00:27:43,419 --> 00:27:47,799
Swift<font color="#E5E5E5"> but there's also what</font><font color="#CCCCCC"> we like to</font>

555
00:27:45,970 --> 00:27:51,159
<font color="#E5E5E5">call</font><font color="#CCCCCC"> the consistency</font><font color="#E5E5E5"> engine that's</font>

556
00:27:47,799 --> 00:27:53,408
really background<font color="#E5E5E5"> demons that are</font>

557
00:27:51,159 --> 00:27:55,690
<font color="#E5E5E5">running in the object</font><font color="#CCCCCC"> storage system</font>

558
00:27:53,409 --> 00:27:57,490
<font color="#CCCCCC">themselves and just maintaining</font><font color="#E5E5E5"> that</font>

559
00:27:55,690 --> 00:27:59,350
eventual consistency it's it's making

560
00:27:57,490 --> 00:28:03,250
sure<font color="#CCCCCC"> that data</font><font color="#E5E5E5"> healing is happening</font>

561
00:27:59,350 --> 00:28:05,110
properly<font color="#CCCCCC"> bit right detection the updates</font>

562
00:28:03,250 --> 00:28:06,879
<font color="#E5E5E5">when you put an object</font><font color="#CCCCCC"> make sure that</font>

563
00:28:05,110 --> 00:28:09,908
the container database or<font color="#E5E5E5"> the account</font>

564
00:28:06,879 --> 00:28:12,459
database<font color="#E5E5E5"> is getting updated expiring the</font>

565
00:28:09,909 --> 00:28:14,919
objects so I meant<font color="#E5E5E5"> I gave</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> example</font>

566
00:28:12,460 --> 00:28:18,220
there with my<font color="#CCCCCC"> little diagram</font><font color="#E5E5E5"> when the</font>

567
00:28:14,919 --> 00:28:19,960
proxy is trying to write<font color="#CCCCCC"> to those three</font>

568
00:28:18,220 --> 00:28:23,409
replicas and and it's not able<font color="#CCCCCC"> to write</font>

569
00:28:19,960 --> 00:28:25,980
one<font color="#E5E5E5"> of them it will actually write to</font>

570
00:28:23,409 --> 00:28:28,179
another place<font color="#E5E5E5"> to guarantee that</font>

571
00:28:25,980 --> 00:28:29,980
<font color="#E5E5E5">durability of so</font><font color="#CCCCCC"> it always will try to</font>

572
00:28:28,179 --> 00:28:31,269
<font color="#E5E5E5">write through replicas even though it</font>

573
00:28:29,980 --> 00:28:34,509
wasn't able to write<font color="#E5E5E5"> to its primary</font>

574
00:28:31,269 --> 00:28:38,049
location and eventually it<font color="#CCCCCC"> will heal and</font>

575
00:28:34,509 --> 00:28:41,879
move that data<font color="#E5E5E5"> back into place so that's</font>

576
00:28:38,049 --> 00:28:41,879
all<font color="#CCCCCC"> done by that consistency</font><font color="#E5E5E5"> engine</font>

577
00:28:42,000 --> 00:28:46,450
that's it<font color="#E5E5E5"> maybe at this point</font><font color="#CCCCCC"> you're</font>

578
00:28:44,409 --> 00:28:52,090
<font color="#CCCCCC">thinking yes with this cool</font><font color="#E5E5E5"> right I'd</font>

579
00:28:46,450 --> 00:28:55,360
like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> contribute we have a lot</font><font color="#CCCCCC"> of work</font>

580
00:28:52,090 --> 00:28:58,928
ahead of us<font color="#CCCCCC"> the work</font><font color="#E5E5E5"> continues right now</font>

581
00:28:55,360 --> 00:29:02,799
we're focusing a lot on the<font color="#CCCCCC"> scalability</font>

582
00:28:58,929 --> 00:29:08,019
<font color="#CCCCCC">of</font><font color="#E5E5E5"> Swift so container</font><font color="#CCCCCC"> charting</font><font color="#E5E5E5"> is an</font>

583
00:29:02,799 --> 00:29:09,100
issue<font color="#E5E5E5"> that we have where there are users</font>

584
00:29:08,019 --> 00:29:10,960
out<font color="#CCCCCC"> there that are</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to put</font>

585
00:29:09,100 --> 00:29:13,389
<font color="#E5E5E5">billions of objects inside the same</font>

586
00:29:10,960 --> 00:29:15,909
container<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> you get very</font><font color="#E5E5E5"> what we</font>

587
00:29:13,389 --> 00:29:18,279
<font color="#E5E5E5">call deep containers and you need to be</font>

588
00:29:15,909 --> 00:29:22,450
able to shard that container<font color="#E5E5E5"> lots of</font>

589
00:29:18,279 --> 00:29:26,470
small files<font color="#E5E5E5"> again pretty you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> 16</font>

590
00:29:22,450 --> 00:29:29,110
byte files<font color="#E5E5E5"> or objects inside the</font><font color="#CCCCCC"> d-des</font>

591
00:29:26,470 --> 00:29:31,269
cluster can become a problem data

592
00:29:29,110 --> 00:29:33,519
tearing just<font color="#CCCCCC"> being able to move when I</font>

593
00:29:31,269 --> 00:29:36,549
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about policies being</font><font color="#E5E5E5"> able to move</font>

594
00:29:33,519 --> 00:29:38,470
from a tree<font color="#CCCCCC"> replicas</font><font color="#E5E5E5"> policy</font><font color="#CCCCCC"> move your</font>

595
00:29:36,549 --> 00:29:40,899
data automatically from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> tree policy</font>

596
00:29:38,470 --> 00:29:43,860
<font color="#CCCCCC">tree represent policy to erasure coded</font>

597
00:29:40,899 --> 00:29:47,289
policy for example<font color="#E5E5E5"> that's another</font>

598
00:29:43,860 --> 00:29:49,869
feature<font color="#E5E5E5"> that we're</font><font color="#CCCCCC"> working</font><font color="#E5E5E5"> on we also</font>

599
00:29:47,289 --> 00:29:52,990
have a<font color="#E5E5E5"> project</font><font color="#CCCCCC"> called hummingbird that</font>

600
00:29:49,869 --> 00:29:53,860
is implementing or reporting part of the

601
00:29:52,990 --> 00:29:56,169
system<font color="#CCCCCC"> to</font>

602
00:29:53,860 --> 00:29:58,029
<font color="#CCCCCC">goaling</font><font color="#E5E5E5"> and that's for performance</font>

603
00:29:56,169 --> 00:30:03,809
reasons<font color="#E5E5E5"> now so there's there's</font><font color="#CCCCCC"> really a</font>

604
00:29:58,029 --> 00:30:08,110
ton<font color="#E5E5E5"> of work to</font><font color="#CCCCCC"> do there and that's it</font>

605
00:30:03,809 --> 00:30:10,570
<font color="#CCCCCC">you can check with us if you want to or</font>

606
00:30:08,110 --> 00:30:13,979
you<font color="#CCCCCC"> can contribute you</font><font color="#E5E5E5"> can find the code</font>

607
00:30:10,570 --> 00:30:16,178
on github<font color="#CCCCCC"> or you can</font><font color="#E5E5E5"> find us on freenode</font>

608
00:30:13,980 --> 00:30:30,010
<font color="#CCCCCC">if you have questions if you</font><font color="#E5E5E5"> want to</font>

609
00:30:16,179 --> 00:30:44,590
talk<font color="#CCCCCC"> about and that's it any</font><font color="#E5E5E5"> any</font>

610
00:30:30,010 --> 00:30:47,320
questions yes what is<font color="#E5E5E5"> it the priority</font>

611
00:30:44,590 --> 00:30:51,519
the priority<font color="#CCCCCC"> so what is the priority of</font>

612
00:30:47,320 --> 00:30:53,700
the project hummingbird<font color="#CCCCCC"> so again just to</font>

613
00:30:51,519 --> 00:30:57,070
restate the purpose the purpose is to

614
00:30:53,700 --> 00:31:00,100
rewrite<font color="#E5E5E5"> parts of it in golang and the</font>

615
00:30:57,070 --> 00:31:03,789
priority<font color="#CCCCCC"> I would say is very high</font>

616
00:31:00,100 --> 00:31:06,279
because it again it<font color="#E5E5E5"> effects the</font>

617
00:31:03,789 --> 00:31:08,169
scalability of<font color="#E5E5E5"> the system but right now</font>

618
00:31:06,279 --> 00:31:11,320
we're kind<font color="#CCCCCC"> of prioritizing deep</font>

619
00:31:08,169 --> 00:31:12,760
containers<font color="#CCCCCC"> a little bit higher</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> that</font>

620
00:31:11,320 --> 00:31:15,570
<font color="#E5E5E5">so so it's something that we're working</font>

621
00:31:12,760 --> 00:31:18,429
<font color="#E5E5E5">on we had actually patches out there</font>

622
00:31:15,570 --> 00:31:22,539
that builds the foundation work for

623
00:31:18,429 --> 00:31:23,860
being able<font color="#E5E5E5"> to port the and we're really</font>

624
00:31:22,539 --> 00:31:26,320
<font color="#E5E5E5">just talking about the object</font><font color="#CCCCCC"> server</font>

625
00:31:23,860 --> 00:31:28,719
that we're going to port<font color="#E5E5E5"> and maybe some</font>

626
00:31:26,320 --> 00:31:32,110
of the the data<font color="#E5E5E5"> consistency background</font>

627
00:31:28,720 --> 00:31:34,210
demons so it's it's it's it's important

628
00:31:32,110 --> 00:31:35,649
it's<font color="#E5E5E5"> very important to us but there's</font>

629
00:31:34,210 --> 00:31:37,990
<font color="#E5E5E5">more important work like the deep</font>

630
00:31:35,649 --> 00:31:40,658
containers that<font color="#E5E5E5"> we need to tackle first</font>

631
00:31:37,990 --> 00:31:45,029
<font color="#E5E5E5">but it's it's it's ongoing parallel work</font>

632
00:31:40,659 --> 00:31:48,269
that is already<font color="#E5E5E5"> ongoing</font><font color="#CCCCCC"> I thought I saw</font>

633
00:31:45,029 --> 00:31:48,269
<font color="#E5E5E5">here and there</font>

634
00:32:01,650 --> 00:32:08,290
<font color="#CCCCCC">I don't think so this the</font><font color="#E5E5E5"> Swift have a</font>

635
00:32:05,620 --> 00:32:13,659
separate<font color="#CCCCCC"> schedule from the</font><font color="#E5E5E5"> OpenStack</font>

636
00:32:08,290 --> 00:32:16,780
<font color="#E5E5E5">cadence we I guess</font><font color="#CCCCCC"> you can say that we</font>

637
00:32:13,660 --> 00:32:20,740
do so so actually a<font color="#E5E5E5"> lot of OpenStack</font>

638
00:32:16,780 --> 00:32:23,730
projects are following<font color="#E5E5E5"> sort of their own</font>

639
00:32:20,740 --> 00:32:28,470
cadence where they able<font color="#E5E5E5"> to just release</font>

640
00:32:23,730 --> 00:32:31,270
their you know<font color="#E5E5E5"> their own component and</font>

641
00:32:28,470 --> 00:32:33,670
when there<font color="#CCCCCC"> is an</font><font color="#E5E5E5"> openstack release it</font>

642
00:32:31,270 --> 00:32:36,340
kind of gets bundled together<font color="#E5E5E5"> and and we</font>

643
00:32:33,670 --> 00:32:37,510
just<font color="#CCCCCC"> tag a specific release that</font><font color="#E5E5E5"> we did</font>

644
00:32:36,340 --> 00:32:39,429
you know<font color="#E5E5E5"> the less release and we say</font>

645
00:32:37,510 --> 00:32:43,660
<font color="#CCCCCC">okay this is</font><font color="#E5E5E5"> going to be the Queen's</font>

646
00:32:39,430 --> 00:32:45,580
release for for OpenStack I'm going to

647
00:32:43,660 --> 00:32:48,510
<font color="#E5E5E5">mention</font><font color="#CCCCCC"> you actually bring up a nice</font>

648
00:32:45,580 --> 00:32:52,750
issue which is you know open<font color="#CCCCCC"> ah Swift</font><font color="#E5E5E5"> it</font>

649
00:32:48,510 --> 00:32:54,910
typically actually<font color="#E5E5E5"> gets called out in a</font>

650
00:32:52,750 --> 00:32:57,700
nice way nowadays<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> actually</font>

651
00:32:54,910 --> 00:32:58,810
able to<font color="#E5E5E5"> run OpenStack Swift outside of</font>

652
00:32:57,700 --> 00:33:02,500
OpenStack you don't need a whole

653
00:32:58,810 --> 00:33:05,919
OpenStack cluster<font color="#E5E5E5"> to run Swift</font><font color="#CCCCCC"> so if it</font>

654
00:33:02,500 --> 00:33:08,920
is its own sword system that you can run

655
00:33:05,920 --> 00:33:11,140
without any actually Swift component<font color="#E5E5E5"> our</font>

656
00:33:08,920 --> 00:33:12,790
OpenStack component you you know if you

657
00:33:11,140 --> 00:33:14,560
have your own<font color="#E5E5E5"> altar gate authentication</font>

658
00:33:12,790 --> 00:33:17,860
system you<font color="#E5E5E5"> don't even need Keystone you</font>

659
00:33:14,560 --> 00:33:19,389
can just spun up a swift cluster and it

660
00:33:17,860 --> 00:33:20,139
doesn't<font color="#E5E5E5"> have does not depend on</font>

661
00:33:19,390 --> 00:33:24,540
OpenStack

662
00:33:20,140 --> 00:33:24,540
are there other OpenStack components

663
00:33:36,960 --> 00:33:47,110
without so I'm going<font color="#E5E5E5"> to repeat</font>

664
00:33:45,970 --> 00:33:48,940
make sure that<font color="#CCCCCC"> I understood</font><font color="#E5E5E5"> your</font>

665
00:33:47,110 --> 00:33:51,070
<font color="#E5E5E5">question so if you have a three</font><font color="#CCCCCC"> replicas</font>

666
00:33:48,940 --> 00:33:54,370
system or policy and you want to reduce

667
00:33:51,070 --> 00:33:56,200
<font color="#E5E5E5">that policy to</font><font color="#CCCCCC"> two replicas for it to</font>

668
00:33:54,370 --> 00:34:02,699
lower the<font color="#E5E5E5"> costs yes you can</font><font color="#CCCCCC"> without</font>

669
00:33:56,200 --> 00:34:02,700
downtime<font color="#E5E5E5"> without downtime yes</font>

670
00:34:04,650 --> 00:34:13,749
all right cool thank you

671
00:34:07,980 --> 00:34:13,748
[Applause]

