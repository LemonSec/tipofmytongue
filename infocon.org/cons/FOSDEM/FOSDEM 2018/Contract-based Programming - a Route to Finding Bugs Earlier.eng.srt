1
00:00:04,590 --> 00:00:23,460
<font color="#CCCCCC">a</font><font color="#E5E5E5"> phenom</font>

2
00:00:20,419 --> 00:00:31,579
how to use contracts to<font color="#CCCCCC"> Ranger</font><font color="#E5E5E5"> programs</font>

3
00:00:23,460 --> 00:00:31,579
<font color="#E5E5E5">you say yes and</font><font color="#CCCCCC"> let's</font>

4
00:00:32,090 --> 00:00:38,730
<font color="#CCCCCC">contract-based</font><font color="#E5E5E5"> programming you can</font>

5
00:00:34,620 --> 00:00:42,300
<font color="#E5E5E5">discuss a lot exactly what it</font><font color="#CCCCCC"> is one</font>

6
00:00:38,730 --> 00:00:45,449
view is<font color="#E5E5E5"> very it's about static analyzers</font>

7
00:00:42,300 --> 00:00:47,669
and statically proving that your program

8
00:00:45,450 --> 00:00:50,070
<font color="#E5E5E5">is never going to fail we have a talk</font>

9
00:00:47,670 --> 00:00:53,670
<font color="#E5E5E5">after this one about spark and how to do</font>

10
00:00:50,070 --> 00:00:56,340
that<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the basis of</font><font color="#CCCCCC"> ADA I take the</font>

11
00:00:53,670 --> 00:00:58,830
slightly<font color="#E5E5E5"> lighter</font><font color="#CCCCCC"> approach that it's</font>

12
00:00:56,340 --> 00:01:01,350
<font color="#E5E5E5">basically like doing preventive</font>

13
00:00:58,830 --> 00:01:03,930
debugging insert lots of the assertions

14
00:01:01,350 --> 00:01:07,320
everywhere<font color="#CCCCCC"> and have them checked by</font><font color="#E5E5E5"> the</font>

15
00:01:03,930 --> 00:01:09,330
compiler<font color="#CCCCCC"> to ensure that</font><font color="#E5E5E5"> your program</font>

16
00:01:07,320 --> 00:01:12,960
state is<font color="#E5E5E5"> actually always what you</font><font color="#CCCCCC"> expect</font>

17
00:01:09,330 --> 00:01:14,700
it to<font color="#CCCCCC"> be well know we all know at least</font>

18
00:01:12,960 --> 00:01:17,220
<font color="#E5E5E5">those of you have tried but writing</font>

19
00:01:14,700 --> 00:01:18,600
assertions<font color="#E5E5E5"> especially if you have to</font>

20
00:01:17,220 --> 00:01:24,750
click put<font color="#E5E5E5"> them anywhere everywhere</font>

21
00:01:18,600 --> 00:01:28,830
sensibly<font color="#E5E5E5"> it's a lot of work but here</font><font color="#CCCCCC"> ADA</font>

22
00:01:24,750 --> 00:01:34,789
<font color="#E5E5E5">actually helps us quite a lot and has</font>

23
00:01:28,830 --> 00:01:38,130
many features<font color="#E5E5E5"> for inserting assertions</font>

24
00:01:34,790 --> 00:01:42,480
<font color="#E5E5E5">so you can ride them ones and actually</font>

25
00:01:38,130 --> 00:01:46,590
have<font color="#E5E5E5"> them in the code many places we</font>

26
00:01:42,480 --> 00:01:50,700
start with the type<font color="#E5E5E5"> system that an</font>

27
00:01:46,590 --> 00:01:53,160
integer is not just some machine integer

28
00:01:50,700 --> 00:02:00,420
it's actually an integer with a specific

29
00:01:53,160 --> 00:02:03,600
<font color="#E5E5E5">range</font><font color="#CCCCCC"> that's a very simple assertion if</font>

30
00:02:00,420 --> 00:02:06,570
you ask an 8a programmer but it is an

31
00:02:03,600 --> 00:02:08,519
assertion still and it's something<font color="#E5E5E5"> you</font>

32
00:02:06,570 --> 00:02:11,579
don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to write it every</font><font color="#E5E5E5"> play every</font>

33
00:02:08,519 --> 00:02:13,530
<font color="#CCCCCC">time you change your variable when</font>

34
00:02:11,580 --> 00:02:15,629
you're programming<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in ada because the</font>

35
00:02:13,530 --> 00:02:18,989
compiler puts the checks in whenever

36
00:02:15,629 --> 00:02:22,190
<font color="#E5E5E5">there's a risk that</font><font color="#CCCCCC"> you might break the</font>

37
00:02:18,989 --> 00:02:25,980
contract<font color="#CCCCCC"> the check may actually be</font>

38
00:02:22,190 --> 00:02:30,090
something as simple<font color="#E5E5E5"> as a interrupts</font>

39
00:02:25,980 --> 00:02:33,420
<font color="#E5E5E5">handled by the CPU</font><font color="#CCCCCC"> or it may may be</font><font color="#E5E5E5"> a an</font>

40
00:02:30,090 --> 00:02:35,010
explicit comparison but you don't have

41
00:02:33,420 --> 00:02:38,489
to worry<font color="#E5E5E5"> about that as a program and you</font>

42
00:02:35,010 --> 00:02:41,250
<font color="#CCCCCC">just say what is the range</font>

43
00:02:38,490 --> 00:02:45,730
and another important<font color="#CCCCCC"> thing about</font>

44
00:02:41,250 --> 00:02:49,650
<font color="#E5E5E5">assertions is that it's a well it's it's</font>

45
00:02:45,730 --> 00:02:53,590
comments<font color="#CCCCCC"> just much much much</font><font color="#E5E5E5"> better</font>

46
00:02:49,650 --> 00:02:55,660
because assertions they are understood

47
00:02:53,590 --> 00:02:58,200
<font color="#CCCCCC">by the compiler</font><font color="#E5E5E5"> so it's something</font><font color="#CCCCCC"> about</font>

48
00:02:55,660 --> 00:03:02,230
the<font color="#CCCCCC"> program</font><font color="#E5E5E5"> state how the program works</font>

49
00:02:58,200 --> 00:03:05,290
<font color="#E5E5E5">but both the read of the source code and</font>

50
00:03:02,230 --> 00:03:08,470
<font color="#CCCCCC">the compiled</font><font color="#E5E5E5"> understands so that you get</font>

51
00:03:05,290 --> 00:03:11,109
<font color="#E5E5E5">much more</font><font color="#CCCCCC"> use out of</font><font color="#E5E5E5"> it I would like to</font>

52
00:03:08,470 --> 00:03:14,830
<font color="#CCCCCC">say that the</font><font color="#E5E5E5"> ideal software has zero</font>

53
00:03:11,110 --> 00:03:19,200
comments<font color="#E5E5E5"> I'm not that good a programmer</font>

54
00:03:14,830 --> 00:03:22,510
myself<font color="#E5E5E5"> that I can quite get there but I</font>

55
00:03:19,200 --> 00:03:25,299
<font color="#CCCCCC">figured</font><font color="#E5E5E5"> that out</font><font color="#CCCCCC"> some years</font><font color="#E5E5E5"> ago when the</font>

56
00:03:22,510 --> 00:03:28,090
software<font color="#E5E5E5"> engineering</font><font color="#CCCCCC"> Institute announced</font>

57
00:03:25,300 --> 00:03:32,170
<font color="#E5E5E5">a model of quality of software where I</font>

58
00:03:28,090 --> 00:03:36,250
could we engineer from<font color="#E5E5E5"> the model but the</font>

59
00:03:32,170 --> 00:03:38,859
best quality software<font color="#E5E5E5"> that had 27.3%</font>

60
00:03:36,250 --> 00:03:42,370
<font color="#CCCCCC">a</font><font color="#E5E5E5"> million comments and that couldn't</font>

61
00:03:38,860 --> 00:03:44,829
possibly<font color="#E5E5E5"> be true if you asked me so no</font>

62
00:03:42,370 --> 00:03:47,680
<font color="#CCCCCC">several comments is the best quality</font>

63
00:03:44,829 --> 00:03:49,360
<font color="#E5E5E5">software of</font><font color="#CCCCCC"> course in reality</font><font color="#E5E5E5"> we're not</font>

64
00:03:47,680 --> 00:03:54,100
<font color="#E5E5E5">that good programmers so we have to put</font>

65
00:03:49,360 --> 00:03:58,269
some in but no use<font color="#CCCCCC"> assertions instead of</font>

66
00:03:54,100 --> 00:03:59,739
comments whenever you<font color="#E5E5E5"> can do it then the</font>

67
00:03:58,269 --> 00:04:02,049
<font color="#E5E5E5">compiler understands what you're doing</font>

68
00:03:59,739 --> 00:04:06,070
as well

69
00:04:02,049 --> 00:04:13,060
another thing about assertions<font color="#E5E5E5"> there's a</font>

70
00:04:06,070 --> 00:04:15,548
tendency<font color="#CCCCCC"> even in</font><font color="#E5E5E5"> critical projects but</font>

71
00:04:13,060 --> 00:04:18,010
assertions is something you have one

72
00:04:15,549 --> 00:04:20,680
time enabled only<font color="#E5E5E5"> during testing but not</font>

73
00:04:18,010 --> 00:04:23,219
when you<font color="#CCCCCC"> actually deploy</font><font color="#E5E5E5"> your system in</font>

74
00:04:20,680 --> 00:04:23,220
production

75
00:04:24,660 --> 00:04:31,440
but don't when your system is<font color="#E5E5E5"> in</font>

76
00:04:28,800 --> 00:04:34,320
<font color="#CCCCCC">production you really want it to be in a</font>

77
00:04:31,440 --> 00:04:39,480
sensible<font color="#E5E5E5"> state if it's not in a sensible</font>

78
00:04:34,320 --> 00:04:43,349
state<font color="#E5E5E5"> it's doing random stuff</font><font color="#CCCCCC"> and then</font>

79
00:04:39,480 --> 00:04:46,590
you better<font color="#E5E5E5"> shut it down quickly</font><font color="#CCCCCC"> my</font>

80
00:04:43,350 --> 00:04:49,380
<font color="#E5E5E5">previous software development project I</font>

81
00:04:46,590 --> 00:04:52,619
was working on<font color="#E5E5E5"> warehouse control and</font>

82
00:04:49,380 --> 00:04:57,990
management<font color="#E5E5E5"> and if you have a</font><font color="#CCCCCC"> 27 meter</font>

83
00:04:52,620 --> 00:04:59,820
tall crane<font color="#CCCCCC"> just</font><font color="#E5E5E5"> running amok</font><font color="#CCCCCC"> you don't</font>

84
00:04:57,990 --> 00:05:01,920
want that you want<font color="#E5E5E5"> it to stop</font>

85
00:04:59,820 --> 00:05:05,430
safely if it's not in the state that<font color="#E5E5E5"> you</font>

86
00:05:01,920 --> 00:05:07,290
expect it to<font color="#CCCCCC"> be in so no don't disable</font>

87
00:05:05,430 --> 00:05:10,170
assertions but<font color="#E5E5E5"> just</font><font color="#CCCCCC"> because you put in</font>

88
00:05:07,290 --> 00:05:13,290
code<font color="#CCCCCC"> in production if you're something</font>

89
00:05:10,170 --> 00:05:15,000
you have a critical<font color="#CCCCCC"> timing and</font><font color="#E5E5E5"> you have</font>

90
00:05:13,290 --> 00:05:17,670
to remove it because<font color="#E5E5E5"> otherwise you</font><font color="#CCCCCC"> can't</font>

91
00:05:15,000 --> 00:05:21,390
means your<font color="#E5E5E5"> time and constraints then</font>

92
00:05:17,670 --> 00:05:23,490
prove that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> assertion is</font><font color="#E5E5E5"> true</font><font color="#CCCCCC"> don't</font>

93
00:05:21,390 --> 00:05:26,520
<font color="#E5E5E5">just disable it prove</font><font color="#CCCCCC"> that it's true and</font>

94
00:05:23,490 --> 00:05:28,170
if you can<font color="#E5E5E5"> prove it's true then you</font>

95
00:05:26,520 --> 00:05:30,390
<font color="#E5E5E5">don't have</font><font color="#CCCCCC"> to check</font><font color="#E5E5E5"> it at</font><font color="#CCCCCC"> run time</font><font color="#E5E5E5"> and</font>

96
00:05:28,170 --> 00:05:36,240
then it's<font color="#CCCCCC"> okay to disable that assertion</font>

97
00:05:30,390 --> 00:05:38,550
but<font color="#E5E5E5"> only that one and that's where one</font>

98
00:05:36,240 --> 00:05:41,250
option at<font color="#CCCCCC"> least is</font><font color="#E5E5E5"> to use spark</font><font color="#CCCCCC"> you can</font>

99
00:05:38,550 --> 00:05:44,870
also do the proofs manually but the safe

100
00:05:41,250 --> 00:05:44,870
<font color="#E5E5E5">thing is to have a tool at</font><font color="#CCCCCC"> our is it</font>

101
00:05:45,400 --> 00:05:56,020
<font color="#E5E5E5">okay the typical we view of programming</font>

102
00:05:52,120 --> 00:05:58,690
contracts<font color="#E5E5E5"> that is that they about pre</font>

103
00:05:56,020 --> 00:06:01,510
and post<font color="#CCCCCC"> conditions on sub programs here</font>

104
00:05:58,690 --> 00:06:06,479
<font color="#E5E5E5">it's a procedure it could be a function</font>

105
00:06:01,510 --> 00:06:09,250
as well<font color="#E5E5E5"> could even be a entries and</font>

106
00:06:06,479 --> 00:06:12,250
protected objects so<font color="#E5E5E5"> you have some</font>

107
00:06:09,250 --> 00:06:15,250
conditions<font color="#E5E5E5"> on the parameters when you</font>

108
00:06:12,250 --> 00:06:17,710
<font color="#E5E5E5">enter the sub program and some promises</font>

109
00:06:15,250 --> 00:06:22,830
about<font color="#E5E5E5"> the parameters when</font><font color="#CCCCCC"> you leave the</font>

110
00:06:17,710 --> 00:06:27,330
sub program it's<font color="#E5E5E5"> very good and important</font>

111
00:06:22,830 --> 00:06:32,099
but in my<font color="#CCCCCC"> view</font><font color="#E5E5E5"> it's not really the core</font>

112
00:06:27,330 --> 00:06:37,659
<font color="#CCCCCC">of contract based programming</font><font color="#E5E5E5"> because</font>

113
00:06:32,100 --> 00:06:41,020
well yeah we can do<font color="#CCCCCC"> it anyway just like</font>

114
00:06:37,660 --> 00:06:43,389
this this is the same code<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just moved</font>

115
00:06:41,020 --> 00:06:47,710
assertions inside the body instead<font color="#CCCCCC"> of</font>

116
00:06:43,389 --> 00:06:50,919
having it in<font color="#E5E5E5"> the specification so well</font>

117
00:06:47,710 --> 00:06:54,099
<font color="#E5E5E5">okay we do get some benefits from</font><font color="#CCCCCC"> having</font>

118
00:06:50,919 --> 00:06:56,260
them in<font color="#CCCCCC"> a specification</font><font color="#E5E5E5"> we make them</font>

119
00:06:54,099 --> 00:06:58,210
visible<font color="#E5E5E5"> to the users of our sub program</font>

120
00:06:56,260 --> 00:07:00,580
<font color="#E5E5E5">we don't want our users of our libraries</font>

121
00:06:58,210 --> 00:07:03,820
to read the insights<font color="#E5E5E5"> they just need to</font>

122
00:07:00,580 --> 00:07:08,500
read the specifications<font color="#CCCCCC"> okay that's what</font>

123
00:07:03,820 --> 00:07:12,159
<font color="#E5E5E5">it does and then okay I use that one and</font>

124
00:07:08,500 --> 00:07:14,680
then we want<font color="#CCCCCC"> to write how our programs</font>

125
00:07:12,160 --> 00:07:16,389
should be<font color="#E5E5E5"> behave or sub programs should</font>

126
00:07:14,680 --> 00:07:18,550
<font color="#E5E5E5">behave when we write the specification</font>

127
00:07:16,389 --> 00:07:22,060
<font color="#E5E5E5">of them we don't want to write that</font>

128
00:07:18,550 --> 00:07:23,860
later<font color="#E5E5E5"> so if we put it in the in the</font>

129
00:07:22,060 --> 00:07:26,050
specification it's easy to remember

130
00:07:23,860 --> 00:07:28,419
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> either there and you don't put it</font>

131
00:07:26,050 --> 00:07:31,979
in<font color="#CCCCCC"> a node remember to put it</font><font color="#E5E5E5"> in the body</font>

132
00:07:28,419 --> 00:07:35,680
<font color="#E5E5E5">when you write</font><font color="#CCCCCC"> that later</font><font color="#E5E5E5"> on and then</font>

133
00:07:31,979 --> 00:07:37,599
for some static<font color="#CCCCCC"> analyzers tools putting</font>

134
00:07:35,680 --> 00:07:40,690
them in the specification makes it clear

135
00:07:37,599 --> 00:07:42,219
<font color="#E5E5E5">that it's part but those contracts are</font>

136
00:07:40,690 --> 00:07:44,590
part of<font color="#E5E5E5"> the interface with the</font>

137
00:07:42,220 --> 00:07:47,530
surroundings which means that you<font color="#E5E5E5"> have a</font>

138
00:07:44,590 --> 00:07:51,460
clearly<font color="#CCCCCC"> defined boundary so for the</font>

139
00:07:47,530 --> 00:07:53,169
tools especially<font color="#E5E5E5"> it's it's</font><font color="#CCCCCC"> very good but</font>

140
00:07:51,460 --> 00:07:56,590
in reality you could do it all with

141
00:07:53,169 --> 00:08:01,690
<font color="#CCCCCC">old-fashioned assertions and</font>

142
00:07:56,590 --> 00:08:03,440
well it's not much more riding<font color="#E5E5E5"> like this</font>

143
00:08:01,690 --> 00:08:06,920
<font color="#CCCCCC">and like this</font>

144
00:08:03,440 --> 00:08:09,950
<font color="#E5E5E5">so you don't save so much work as a</font>

145
00:08:06,920 --> 00:08:13,580
human<font color="#CCCCCC"> has a developer you make life</font>

146
00:08:09,950 --> 00:08:16,610
<font color="#E5E5E5">easier</font><font color="#CCCCCC"> for your users which is</font><font color="#E5E5E5"> always</font>

147
00:08:13,580 --> 00:08:24,109
good<font color="#E5E5E5"> and healthy you'll end up being</font>

148
00:08:16,610 --> 00:08:28,750
your<font color="#E5E5E5"> own use at some point so but if you</font>

149
00:08:24,110 --> 00:08:31,580
<font color="#CCCCCC">are not hand put contracts on your</font><font color="#E5E5E5"> types</font>

150
00:08:28,750 --> 00:08:34,880
then you just put<font color="#E5E5E5"> the contract in ones</font>

151
00:08:31,580 --> 00:08:36,909
<font color="#E5E5E5">where you declare the type and then</font>

152
00:08:34,880 --> 00:08:40,610
whenever you use an object<font color="#E5E5E5"> at that time</font>

153
00:08:36,909 --> 00:08:43,069
<font color="#E5E5E5">and you modify it</font><font color="#CCCCCC"> then you have an</font>

154
00:08:40,610 --> 00:08:46,340
assertion that the compiler<font color="#E5E5E5"> will either</font>

155
00:08:43,070 --> 00:08:50,060
prove to itself that<font color="#E5E5E5"> well it's true or</font>

156
00:08:46,340 --> 00:08:52,130
check it for<font color="#E5E5E5"> you so there</font><font color="#CCCCCC"> you've righted</font>

157
00:08:50,060 --> 00:08:54,680
ones and you<font color="#CCCCCC"> have it hundreds</font><font color="#E5E5E5"> of places</font>

158
00:08:52,130 --> 00:08:59,689
in your code<font color="#CCCCCC"> so that's what I call</font>

159
00:08:54,680 --> 00:09:02,719
scaling of your work<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> get the big</font>

160
00:08:59,690 --> 00:09:04,610
benefits when you put your contracts<font color="#E5E5E5"> on</font>

161
00:09:02,720 --> 00:09:06,260
your types and you get some smaller

162
00:09:04,610 --> 00:09:11,060
benefits when you put<font color="#CCCCCC"> them on</font><font color="#E5E5E5"> your sub</font>

163
00:09:06,260 --> 00:09:14,500
programs<font color="#CCCCCC"> there of</font><font color="#E5E5E5"> course all these</font>

164
00:09:11,060 --> 00:09:18,619
<font color="#E5E5E5">issues about compile-time and run-time</font>

165
00:09:14,500 --> 00:09:24,650
<font color="#CCCCCC">and runtime checking yeah good ADA</font>

166
00:09:18,620 --> 00:09:26,210
compilers they prove that most they'll

167
00:09:24,650 --> 00:09:29,150
typically prove all these assertions

168
00:09:26,210 --> 00:09:33,250
about<font color="#CCCCCC"> the types at compile time</font><font color="#E5E5E5"> and then</font>

169
00:09:29,150 --> 00:09:33,250
not<font color="#E5E5E5"> actually put in a runtime check</font>

170
00:09:33,790 --> 00:09:39,079
unless<font color="#E5E5E5"> they can't prove them and if they</font>

171
00:09:37,340 --> 00:09:40,400
can't prove them maybe it's because you

172
00:09:39,080 --> 00:09:42,290
have an error but you<font color="#E5E5E5"> don't look at that</font>

173
00:09:40,400 --> 00:09:47,150
because<font color="#CCCCCC"> that's it you find that</font>

174
00:09:42,290 --> 00:09:51,189
interesting here the very simplest kind

175
00:09:47,150 --> 00:09:54,170
<font color="#E5E5E5">of</font><font color="#CCCCCC"> type</font><font color="#E5E5E5"> contracting ADA that's a range</font>

176
00:09:51,190 --> 00:09:57,230
<font color="#CCCCCC">so here these two declarations are</font>

177
00:09:54,170 --> 00:10:00,979
actually from<font color="#CCCCCC"> the standard library we</font>

178
00:09:57,230 --> 00:10:03,620
have<font color="#E5E5E5"> natural numbers and positive</font>

179
00:10:00,980 --> 00:10:06,070
numbers while except they have they have

180
00:10:03,620 --> 00:10:06,070
an upper<font color="#E5E5E5"> limit</font>

181
00:10:07,649 --> 00:10:15,639
we can also declare ranges of our

182
00:10:13,180 --> 00:10:18,910
numerical types than integers here it

183
00:10:15,639 --> 00:10:22,439
didn't<font color="#E5E5E5"> a done it on the floating point</font>

184
00:10:18,910 --> 00:10:27,639
type<font color="#E5E5E5"> you can do it on fixed point times</font>

185
00:10:22,439 --> 00:10:36,759
you can do it on in operations yeah<font color="#E5E5E5"> it</font>

186
00:10:27,639 --> 00:10:40,060
<font color="#E5E5E5">looks like this is in Mauritius for a</font>

187
00:10:36,759 --> 00:10:44,649
while for a small soccer engineering

188
00:10:40,060 --> 00:10:48,128
company there<font color="#E5E5E5"> so some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> my notes</font><font color="#CCCCCC"> they</font>

189
00:10:44,649 --> 00:10:49,470
have from the southern hemisphere<font color="#CCCCCC"> now</font>

190
00:10:48,129 --> 00:10:56,560
<font color="#E5E5E5">also slides from the northern hemisphere</font>

191
00:10:49,470 --> 00:11:00,629
<font color="#CCCCCC">so so this</font><font color="#E5E5E5"> is yeah I'm I'm having fun</font>

192
00:10:56,560 --> 00:11:00,628
with<font color="#CCCCCC"> the seasons occasionally</font>

193
00:11:03,590 --> 00:11:10,550
oh<font color="#E5E5E5"> wait</font><font color="#CCCCCC"> the next step</font><font color="#E5E5E5"> step up from</font>

194
00:11:09,190 --> 00:11:16,820
ranges

195
00:11:10,550 --> 00:11:18,859
that's called a static predicate and<font color="#E5E5E5"> in</font>

196
00:11:16,820 --> 00:11:21,890
Mauritius they<font color="#E5E5E5"> say</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> summer from</font>

197
00:11:18,860 --> 00:11:25,339
November to April<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> wrap</font>

198
00:11:21,890 --> 00:11:27,439
around on enumeration types<font color="#E5E5E5"> so I have to</font>

199
00:11:25,339 --> 00:11:30,080
say that<font color="#CCCCCC"> okay that means it's from</font>

200
00:11:27,440 --> 00:11:32,140
November to December or from January to

201
00:11:30,080 --> 00:11:32,140
April

202
00:11:39,080 --> 00:11:45,110
yeah<font color="#E5E5E5"> we'll just go on and from that we</font>

203
00:11:43,070 --> 00:11:47,690
have we go from static<font color="#E5E5E5"> predicate to</font>

204
00:11:45,110 --> 00:11:51,380
dynamic predicates<font color="#E5E5E5"> with dynamic</font>

205
00:11:47,690 --> 00:11:53,420
predicates<font color="#E5E5E5"> any logical expression any</font>

206
00:11:51,380 --> 00:11:56,689
boolean<font color="#E5E5E5"> expression can prove be put in</font>

207
00:11:53,420 --> 00:11:58,990
as a condition here<font color="#E5E5E5"> I have a sub site</font>

208
00:11:56,690 --> 00:12:02,269
you can<font color="#E5E5E5"> only put Prime's into this</font>

209
00:11:58,990 --> 00:12:05,529
variables of this type<font color="#E5E5E5"> you might</font>

210
00:12:02,269 --> 00:12:10,540
complain about computational<font color="#E5E5E5"> efficiency</font>

211
00:12:05,529 --> 00:12:17,329
but the logic<font color="#E5E5E5"> is sound</font>

212
00:12:10,540 --> 00:12:20,420
another<font color="#E5E5E5"> example</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> sometimes</font><font color="#CCCCCC"> that's</font>

213
00:12:17,329 --> 00:12:23,839
only<font color="#E5E5E5"> four times which I in the past but</font>

214
00:12:20,420 --> 00:12:29,120
<font color="#E5E5E5">that's okay</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> ever-growing set this</font>

215
00:12:23,839 --> 00:12:31,910
<font color="#E5E5E5">one is naughty</font><font color="#CCCCCC"> the last hour you should</font>

216
00:12:29,120 --> 00:12:34,610
never have variables which I actually

217
00:12:31,910 --> 00:12:37,010
<font color="#E5E5E5">have this time because the value may be</font>

218
00:12:34,610 --> 00:12:38,860
<font color="#CCCCCC">valid now but in an hour it's not</font><font color="#E5E5E5"> valid</font>

219
00:12:37,010 --> 00:12:43,399
anymore

220
00:12:38,860 --> 00:12:51,760
so this is more of an<font color="#CCCCCC"> example that I</font>

221
00:12:43,399 --> 00:12:56,209
<font color="#E5E5E5">came up</font><font color="#CCCCCC"> with to show the possibilities</font>

222
00:12:51,760 --> 00:12:58,910
you<font color="#CCCCCC"> can also see that these look like</font>

223
00:12:56,209 --> 00:13:02,420
I'm declaring ranges but actually the

224
00:12:58,910 --> 00:13:04,969
problem<font color="#E5E5E5"> is that this type here</font><font color="#CCCCCC"> is not a</font>

225
00:13:02,420 --> 00:13:08,360
numerical type on enumeration time so I

226
00:13:04,970 --> 00:13:11,950
can't use the range construct directly

227
00:13:08,360 --> 00:13:16,480
so I have to fake<font color="#CCCCCC"> it in this way here</font>

228
00:13:11,950 --> 00:13:16,480
<font color="#E5E5E5">well using Clark doesn't help of course</font>

229
00:13:17,650 --> 00:13:27,220
and then<font color="#CCCCCC"> equivalents to</font><font color="#E5E5E5"> dynamic</font>

230
00:13:22,029 --> 00:13:29,800
predicates we have the concept of<font color="#CCCCCC"> typing</font>

231
00:13:27,220 --> 00:13:31,750
<font color="#CCCCCC">variants</font><font color="#E5E5E5"> they are just like dynamic</font>

232
00:13:29,800 --> 00:13:36,160
<font color="#E5E5E5">predicates except that they</font><font color="#CCCCCC"> are for</font>

233
00:13:31,750 --> 00:13:38,110
private<font color="#CCCCCC"> types and there are a</font><font color="#E5E5E5"> few</font>

234
00:13:36,160 --> 00:13:40,329
<font color="#E5E5E5">special cases about exactly where the</font>

235
00:13:38,110 --> 00:13:42,600
compiler checks for them but<font color="#CCCCCC"> basically</font>

236
00:13:40,330 --> 00:13:46,240
well if you have its height where the

237
00:13:42,600 --> 00:13:48,040
<font color="#E5E5E5">it's the public view is just</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font>

238
00:13:46,240 --> 00:13:51,310
<font color="#E5E5E5">are some data inside you don't need to</font>

239
00:13:48,040 --> 00:13:54,370
care about<font color="#CCCCCC"> what it</font><font color="#E5E5E5"> is then you can't put</font>

240
00:13:51,310 --> 00:13:56,529
much<font color="#CCCCCC"> of a constraint</font><font color="#E5E5E5"> on the outside</font><font color="#CCCCCC"> that</font>

241
00:13:54,370 --> 00:13:58,870
<font color="#E5E5E5">make sense so if you need a constraint</font>

242
00:13:56,529 --> 00:14:02,020
<font color="#E5E5E5">that relates to the internal data</font>

243
00:13:58,870 --> 00:14:04,120
<font color="#E5E5E5">structure then you have to put it</font><font color="#CCCCCC"> in the</font>

244
00:14:02,020 --> 00:14:08,620
private<font color="#E5E5E5"> side and then it's called</font><font color="#CCCCCC"> a time</font>

245
00:14:04,120 --> 00:14:13,600
<font color="#E5E5E5">invariance here I say</font><font color="#CCCCCC"> ok it's</font>

246
00:14:08,620 --> 00:14:16,830
<font color="#E5E5E5">coordinates but they have to be inside</font>

247
00:14:13,600 --> 00:14:16,830
<font color="#E5E5E5">the unit disk</font>

248
00:14:16,880 --> 00:14:22,610
[Music]

249
00:14:19,610 --> 00:14:26,450
and this is something<font color="#E5E5E5"> I'm adapted from</font>

250
00:14:22,610 --> 00:14:28,670
the<font color="#E5E5E5"> a tour 2012</font><font color="#CCCCCC"> rationale which is</font><font color="#E5E5E5"> the</font>

251
00:14:26,450 --> 00:14:39,890
explanation<font color="#CCCCCC"> about the language and the</font>

252
00:14:28,670 --> 00:14:43,490
changes to<font color="#E5E5E5"> it</font><font color="#CCCCCC"> one thing</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> before</font>

253
00:14:39,890 --> 00:14:48,800
<font color="#E5E5E5">we go to this one here</font><font color="#CCCCCC"> is we have</font><font color="#E5E5E5"> the</font>

254
00:14:43,490 --> 00:14:52,600
the ordering of this complexity<font color="#E5E5E5"> of how</font>

255
00:14:48,800 --> 00:14:55,990
we specify the contracts on our types

256
00:14:52,600 --> 00:14:58,790
<font color="#E5E5E5">and I'd say always try to use</font><font color="#CCCCCC"> a simple</font>

257
00:14:55,990 --> 00:15:01,220
way to<font color="#E5E5E5"> describe the contracts as</font>

258
00:14:58,790 --> 00:15:04,540
possible that gives you<font color="#E5E5E5"> more</font>

259
00:15:01,220 --> 00:15:04,540
possibilities of how to use it

260
00:15:04,810 --> 00:15:12,380
<font color="#E5E5E5">and that's didn't skip the slide</font>

261
00:15:08,740 --> 00:15:15,170
apparently I did yeah<font color="#E5E5E5"> okay never but</font>

262
00:15:12,380 --> 00:15:18,320
then now that<font color="#E5E5E5"> we've talked about in</font>

263
00:15:15,170 --> 00:15:23,540
general<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the concepts of the</font>

264
00:15:18,320 --> 00:15:27,580
contracts<font color="#CCCCCC"> and how you've seen</font><font color="#E5E5E5"> how you</font>

265
00:15:23,540 --> 00:15:30,860
can<font color="#CCCCCC"> buy them they now go to actually</font>

266
00:15:27,580 --> 00:15:33,380
guidelines if you shoot down sit<font color="#E5E5E5"> down</font>

267
00:15:30,860 --> 00:15:35,980
and start to put<font color="#E5E5E5"> in contracts doing a</font>

268
00:15:33,380 --> 00:15:35,980
<font color="#E5E5E5">data style</font>

269
00:15:36,590 --> 00:15:43,100
<font color="#CCCCCC">I had some</font><font color="#E5E5E5"> experience myself when I</font>

270
00:15:39,050 --> 00:15:48,620
started<font color="#E5E5E5"> using data 2012 parts of</font>

271
00:15:43,100 --> 00:15:51,110
<font color="#E5E5E5">conflict based programming that I didn't</font>

272
00:15:48,620 --> 00:15:53,240
make<font color="#E5E5E5"> it consistently so these are some</font>

273
00:15:51,110 --> 00:15:56,230
guidelines<font color="#CCCCCC"> to try to use these</font>

274
00:15:53,240 --> 00:15:58,910
techniques in a consistent manager many

275
00:15:56,230 --> 00:16:03,710
consistent manner<font color="#E5E5E5"> first part is assembly</font>

276
00:15:58,910 --> 00:16:05,480
that first work on<font color="#E5E5E5"> your types make sure</font>

277
00:16:03,710 --> 00:16:08,510
<font color="#E5E5E5">that you have</font><font color="#CCCCCC"> specified your types in a</font>

278
00:16:05,480 --> 00:16:12,200
good way<font color="#CCCCCC"> I think that's always sensible</font>

279
00:16:08,510 --> 00:16:14,780
but it becomes<font color="#E5E5E5"> even more sensible when</font>

280
00:16:12,200 --> 00:16:17,060
you try<font color="#E5E5E5"> to put good contracts and in</font>

281
00:16:14,780 --> 00:16:20,209
your software then<font color="#E5E5E5"> you start</font><font color="#CCCCCC"> specifying</font>

282
00:16:17,060 --> 00:16:22,060
your sub programs and again there<font color="#E5E5E5"> you</font>

283
00:16:20,210 --> 00:16:24,650
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to put good contracts on them I</font>

284
00:16:22,060 --> 00:16:26,719
didn't spend<font color="#E5E5E5"> so much time yet talking</font>

285
00:16:24,650 --> 00:16:31,600
<font color="#CCCCCC">about the contracts and</font><font color="#E5E5E5"> some programs</font>

286
00:16:26,720 --> 00:16:34,430
and<font color="#E5E5E5"> come to it and then finally we have</font>

287
00:16:31,600 --> 00:16:37,340
we use packages in<font color="#CCCCCC"> a DAT all you can say</font>

288
00:16:34,430 --> 00:16:38,630
libraries it doesn't matter so much but

289
00:16:37,340 --> 00:16:40,400
<font color="#E5E5E5">the</font><font color="#CCCCCC"> point is</font><font color="#E5E5E5"> that when you have a</font>

290
00:16:38,630 --> 00:16:43,430
<font color="#CCCCCC">collection of</font><font color="#E5E5E5"> some programs which are</font>

291
00:16:40,400 --> 00:16:45,620
supposed to work<font color="#E5E5E5"> together then it's</font>

292
00:16:43,430 --> 00:16:47,989
sensible that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> contract of the</font>

293
00:16:45,620 --> 00:16:49,880
<font color="#E5E5E5">different sub programs actually match</font><font color="#CCCCCC"> up</font>

294
00:16:47,990 --> 00:16:51,950
so<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> some use case where you</font>

295
00:16:49,880 --> 00:16:54,980
call this function<font color="#E5E5E5"> first then this and</font>

296
00:16:51,950 --> 00:16:57,350
then<font color="#E5E5E5"> this and that</font><font color="#CCCCCC"> should work</font><font color="#E5E5E5"> then the</font>

297
00:16:54,980 --> 00:16:59,360
contracts<font color="#E5E5E5"> should also match so</font><font color="#CCCCCC"> that they</font>

298
00:16:57,350 --> 00:17:01,460
actually<font color="#CCCCCC"> say that</font><font color="#E5E5E5"> what comes out of</font><font color="#CCCCCC"> this</font>

299
00:16:59,360 --> 00:17:06,500
is valid for continuing to<font color="#E5E5E5"> call this one</font>

300
00:17:01,460 --> 00:17:08,950
next and<font color="#E5E5E5"> calling this one next so we'll</font>

301
00:17:06,500 --> 00:17:08,950
go through<font color="#E5E5E5"> that</font>

302
00:17:09,579 --> 00:17:18,589
well<font color="#CCCCCC"> type declarations as detailed as</font>

303
00:17:13,280 --> 00:17:22,520
possible<font color="#CCCCCC"> first</font><font color="#E5E5E5"> choice in</font><font color="#CCCCCC"> Ada is do you</font>

304
00:17:18,589 --> 00:17:24,859
<font color="#CCCCCC">actually declare a new type or</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> claire</font>

305
00:17:22,520 --> 00:17:27,829
<font color="#E5E5E5">a</font><font color="#CCCCCC"> sub type that is</font><font color="#E5E5E5"> a subset of an</font>

306
00:17:24,859 --> 00:17:30,429
existing type the difference in<font color="#CCCCCC"> ADA is</font>

307
00:17:27,829 --> 00:17:32,980
that sub types

308
00:17:30,430 --> 00:17:35,710
<font color="#E5E5E5">they can be copied between each other</font>

309
00:17:32,980 --> 00:17:40,210
<font color="#E5E5E5">and between</font><font color="#CCCCCC"> two the objects of the</font>

310
00:17:35,710 --> 00:17:43,530
parent time<font color="#CCCCCC"> without</font><font color="#E5E5E5"> any explicit</font>

311
00:17:40,210 --> 00:17:46,240
conversions<font color="#E5E5E5"> but if you have a new type</font>

312
00:17:43,530 --> 00:17:48,820
you<font color="#CCCCCC"> have two different</font><font color="#E5E5E5"> types not just</font>

313
00:17:46,240 --> 00:17:52,240
<font color="#CCCCCC">different sometimes</font><font color="#E5E5E5"> then you have to do</font>

314
00:17:48,820 --> 00:17:54,040
conversions<font color="#E5E5E5"> explicitly either you can</font>

315
00:17:52,240 --> 00:17:56,710
just in some cases you can<font color="#CCCCCC"> just convert</font>

316
00:17:54,040 --> 00:17:59,139
<font color="#E5E5E5">using the name of the target type in</font>

317
00:17:56,710 --> 00:18:02,350
other cases you<font color="#E5E5E5"> have to actually write</font><font color="#CCCCCC"> a</font>

318
00:17:59,140 --> 00:18:07,270
function<font color="#E5E5E5"> to do the mapping for you yeah</font>

319
00:18:02,350 --> 00:18:10,510
so that's the<font color="#E5E5E5"> first consideration and</font>

320
00:18:07,270 --> 00:18:13,440
it's not always<font color="#E5E5E5"> obvious sometimes you</font>

321
00:18:10,510 --> 00:18:17,770
try one thing and then later<font color="#E5E5E5"> forgot oh</font>

322
00:18:13,440 --> 00:18:20,830
we do something else<font color="#E5E5E5"> yeah one experience</font>

323
00:18:17,770 --> 00:18:24,070
I have there<font color="#E5E5E5"> is about half a year ago</font>

324
00:18:20,830 --> 00:18:29,860
<font color="#CCCCCC">working for a customer they</font><font color="#E5E5E5"> they had</font>

325
00:18:24,070 --> 00:18:34,500
used<font color="#E5E5E5"> subtypes</font><font color="#CCCCCC"> for of strings for</font>

326
00:18:29,860 --> 00:18:37,000
handling that<font color="#CCCCCC"> rest codes in a warehouse</font>

327
00:18:34,500 --> 00:18:38,980
<font color="#E5E5E5">that's all good</font><font color="#CCCCCC"> and fine and they were</font>

328
00:18:37,000 --> 00:18:41,650
conversion functions to convert<font color="#E5E5E5"> between</font>

329
00:18:38,980 --> 00:18:43,840
the different<font color="#E5E5E5"> kinds of</font><font color="#CCCCCC"> addresses one</font>

330
00:18:41,650 --> 00:18:46,210
kind of cranes use one format<font color="#E5E5E5"> another</font>

331
00:18:43,840 --> 00:18:49,030
kind of cranes used another format and

332
00:18:46,210 --> 00:18:54,240
the warehouse<font color="#E5E5E5"> management software used a</font>

333
00:18:49,030 --> 00:18:57,190
third format but then we<font color="#E5E5E5"> found out that</font>

334
00:18:54,240 --> 00:18:59,260
two of<font color="#E5E5E5"> these address formats have the</font>

335
00:18:57,190 --> 00:19:01,480
same<font color="#CCCCCC"> lengths</font><font color="#E5E5E5"> and there's some program I</font>

336
00:18:59,260 --> 00:19:04,810
had accidentally converted from<font color="#CCCCCC"> one</font>

337
00:19:01,480 --> 00:19:09,490
format to<font color="#E5E5E5"> another and then from one</font>

338
00:19:04,810 --> 00:19:11,470
format to another but then<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> we</font>

339
00:19:09,490 --> 00:19:12,970
<font color="#E5E5E5">switch to instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> having subtypes</font>

340
00:19:11,470 --> 00:19:18,010
just having some sense you<font color="#E5E5E5"> could copy</font>

341
00:19:12,970 --> 00:19:19,990
freely to<font color="#CCCCCC"> actually use new types so it</font>

342
00:19:18,010 --> 00:19:22,090
was still strings<font color="#E5E5E5"> everything but it</font><font color="#CCCCCC"> was</font>

343
00:19:19,990 --> 00:19:24,520
separate types<font color="#E5E5E5"> and then the compiler</font>

344
00:19:22,090 --> 00:19:26,800
said hey there you're cheating there you

345
00:19:24,520 --> 00:19:28,570
can't do that and you<font color="#CCCCCC"> can't do that and</font>

346
00:19:26,800 --> 00:19:32,350
<font color="#E5E5E5">can't do that and then we found five</font>

347
00:19:28,570 --> 00:19:34,600
places<font color="#E5E5E5"> in the code where somebody had</font>

348
00:19:32,350 --> 00:19:37,409
<font color="#CCCCCC">actually messed up and we're pushing</font>

349
00:19:34,600 --> 00:19:42,189
incorrect addresses around<font color="#E5E5E5"> in the system</font>

350
00:19:37,410 --> 00:19:43,440
<font color="#E5E5E5">so</font><font color="#CCCCCC"> subtypes</font><font color="#E5E5E5"> just using soft types can</font><font color="#CCCCCC"> be</font>

351
00:19:42,190 --> 00:19:45,840
dangerous

352
00:19:43,440 --> 00:19:46,920
especially if they have significantly

353
00:19:45,840 --> 00:19:49,919
different meaning

354
00:19:46,920 --> 00:19:53,340
<font color="#E5E5E5">and strings are the dangerous most</font>

355
00:19:49,920 --> 00:19:56,040
dangerous types of all I think integers

356
00:19:53,340 --> 00:19:58,159
<font color="#E5E5E5">are not that</font><font color="#CCCCCC"> dangerous</font><font color="#E5E5E5"> but strings they</font>

357
00:19:56,040 --> 00:20:03,389
can really<font color="#E5E5E5"> have different meanings</font><font color="#CCCCCC"> and</font>

358
00:19:58,160 --> 00:20:06,800
<font color="#E5E5E5">so yeah I'm scared</font><font color="#CCCCCC"> whenever people</font><font color="#E5E5E5"> use</font>

359
00:20:03,390 --> 00:20:13,110
strings<font color="#CCCCCC"> even when I do it</font><font color="#E5E5E5"> myself</font>

360
00:20:06,800 --> 00:20:16,370
<font color="#CCCCCC">but then</font><font color="#E5E5E5"> next step is to put if it's</font>

361
00:20:13,110 --> 00:20:20,219
appropriate<font color="#E5E5E5"> put constraints on the range</font>

362
00:20:16,370 --> 00:20:23,250
that's only<font color="#E5E5E5"> makes sense for</font><font color="#CCCCCC"> numerical</font>

363
00:20:20,220 --> 00:20:26,010
types and<font color="#CCCCCC"> immigrations</font><font color="#E5E5E5"> and then we start</font>

364
00:20:23,250 --> 00:20:29,730
<font color="#CCCCCC">looking into whatever extra constraints</font>

365
00:20:26,010 --> 00:20:32,060
might be necessary<font color="#E5E5E5"> crimes</font><font color="#CCCCCC"> or we can</font>

366
00:20:29,730 --> 00:20:35,850
start out saying<font color="#E5E5E5"> okay it seems it is</font>

367
00:20:32,060 --> 00:20:37,830
<font color="#CCCCCC">they're very</font><font color="#E5E5E5"> larger than one</font><font color="#CCCCCC"> and then</font>

368
00:20:35,850 --> 00:20:39,560
beyond that we<font color="#E5E5E5"> can't do it with the</font>

369
00:20:37,830 --> 00:20:43,850
ranges the rest we have<font color="#E5E5E5"> to use</font>

370
00:20:39,560 --> 00:20:43,850
predicates<font color="#E5E5E5"> for the extra constraints</font>

371
00:20:45,690 --> 00:20:53,170
yeah here we have a crimes<font color="#E5E5E5"> the integers</font>

372
00:20:50,940 --> 00:20:55,120
they're larger than one most

373
00:20:53,170 --> 00:20:59,190
specifically to go from<font color="#CCCCCC"> two and then we</font>

374
00:20:55,120 --> 00:21:02,199
can't<font color="#E5E5E5"> handle Aria when integer</font><font color="#CCCCCC"> lost</font><font color="#E5E5E5"> and</font>

375
00:20:59,190 --> 00:21:07,210
no other factors<font color="#E5E5E5"> when wanted then</font><font color="#CCCCCC"> prime</font>

376
00:21:02,200 --> 00:21:09,280
itself<font color="#E5E5E5"> those of us who are already</font><font color="#CCCCCC"> ate a</font>

377
00:21:07,210 --> 00:21:14,070
<font color="#E5E5E5">programmers pride ourselves that eight</font>

378
00:21:09,280 --> 00:21:17,230
is readable<font color="#CCCCCC"> but I would like</font><font color="#E5E5E5"> to see</font>

379
00:21:14,070 --> 00:21:20,790
<font color="#CCCCCC">fallen</font><font color="#E5E5E5"> on ADA programmers is this</font>

380
00:21:17,230 --> 00:21:20,790
correct does this look correct

381
00:21:27,049 --> 00:21:34,889
yeah so it's for all ends<font color="#CCCCCC"> in the range</font>

382
00:21:32,190 --> 00:21:38,820
from 2 up to a prime the value we're

383
00:21:34,890 --> 00:21:46,080
looking<font color="#CCCCCC"> at minus</font><font color="#E5E5E5"> 1 then</font><font color="#CCCCCC"> prime modulus n</font>

384
00:21:38,820 --> 00:21:49,289
has to<font color="#E5E5E5"> be different from 0 so yeah I</font>

385
00:21:46,080 --> 00:21:50,309
<font color="#E5E5E5">like the notation here for these these</font>

386
00:21:49,289 --> 00:21:57,600
expressions

387
00:21:50,309 --> 00:22:02,850
it's then I talked<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that you have</font>

388
00:21:57,600 --> 00:22:06,780
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> simple types of contracts as</font>

389
00:22:02,850 --> 00:22:10,260
possible<font color="#E5E5E5"> yeah one of the</font><font color="#CCCCCC"> reasons for</font>

390
00:22:06,780 --> 00:22:12,090
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the complexity of</font><font color="#CCCCCC"> contract</font>

391
00:22:10,260 --> 00:22:16,970
<font color="#CCCCCC">the contract puts limits and how you can</font>

392
00:22:12,090 --> 00:22:16,970
use<font color="#CCCCCC"> it if you want to</font><font color="#E5E5E5"> declare an array</font>

393
00:22:17,510 --> 00:22:24,330
<font color="#E5E5E5">it has to be</font><font color="#CCCCCC"> discrete in this</font><font color="#E5E5E5"> texting</font>

394
00:22:21,780 --> 00:22:29,520
<font color="#E5E5E5">type well</font><font color="#CCCCCC"> the continuous indexing would</font>

395
00:22:24,330 --> 00:22:32,100
be a bit of a mess we<font color="#E5E5E5"> want array and you</font>

396
00:22:29,520 --> 00:22:35,789
can only<font color="#E5E5E5"> have constraints in the form of</font>

397
00:22:32,100 --> 00:22:40,439
<font color="#E5E5E5">a range so here again we</font><font color="#CCCCCC"> see from the</font>

398
00:22:35,789 --> 00:22:42,120
standard library subtype positive and

399
00:22:40,440 --> 00:22:45,510
then actually also<font color="#E5E5E5"> from the standard</font>

400
00:22:42,120 --> 00:22:47,219
library<font color="#CCCCCC"> the basic string type in the</font>

401
00:22:45,510 --> 00:22:52,169
standard library<font color="#E5E5E5"> is an array of</font>

402
00:22:47,220 --> 00:22:56,429
<font color="#E5E5E5">characters positive indexing but</font>

403
00:22:52,169 --> 00:23:00,570
unspecified<font color="#CCCCCC"> a specific range</font><font color="#E5E5E5"> so you can</font>

404
00:22:56,429 --> 00:23:03,710
pose declare strings specific string

405
00:23:00,570 --> 00:23:09,408
index from<font color="#CCCCCC"> 2 to 4 or 1</font><font color="#E5E5E5"> going from 1 to</font>

406
00:23:03,710 --> 00:23:09,409
10,000 based and<font color="#E5E5E5"> this type</font>

407
00:23:09,720 --> 00:23:16,289
yeah but the<font color="#E5E5E5"> important part</font><font color="#CCCCCC"> here is that</font>

408
00:23:13,080 --> 00:23:18,240
if<font color="#E5E5E5"> we</font><font color="#CCCCCC"> put this constrained in as a</font>

409
00:23:16,289 --> 00:23:20,190
static predicate or dynamic predicate

410
00:23:18,240 --> 00:23:23,940
<font color="#E5E5E5">then we would not</font><font color="#CCCCCC"> be allowed to use</font>

411
00:23:20,190 --> 00:23:26,909
<font color="#E5E5E5">positive here because the contract was</font>

412
00:23:23,940 --> 00:23:28,740
too complex<font color="#E5E5E5"> the problem is that if you</font>

413
00:23:26,909 --> 00:23:32,009
have a static predicate or dynamic

414
00:23:28,740 --> 00:23:35,009
predicate<font color="#CCCCCC"> you could have a discontinuous</font>

415
00:23:32,009 --> 00:23:37,590
set of values<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and telling the</font>

416
00:23:35,009 --> 00:23:42,059
compiler<font color="#E5E5E5"> to handle an array with holes</font>

417
00:23:37,590 --> 00:23:44,428
in the indexing it was decided<font color="#CCCCCC"> that was</font>

418
00:23:42,059 --> 00:23:54,649
to make too much travel for compiler

419
00:23:44,429 --> 00:23:58,940
writers then<font color="#E5E5E5"> I know</font><font color="#CCCCCC"> boundary is</font><font color="#E5E5E5"> between</font>

420
00:23:54,649 --> 00:24:05,039
static predicates<font color="#E5E5E5"> and dynamic predicates</font>

421
00:23:58,940 --> 00:24:08,399
case statements in<font color="#CCCCCC"> Ada</font><font color="#E5E5E5"> there you have to</font>

422
00:24:05,039 --> 00:24:11,460
ensure<font color="#CCCCCC"> that you cover</font><font color="#E5E5E5"> exactly all the</font>

423
00:24:08,399 --> 00:24:16,529
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> values of</font><font color="#E5E5E5"> the argument</font><font color="#CCCCCC"> nothing</font>

424
00:24:11,460 --> 00:24:18,120
more and nothing less<font color="#E5E5E5"> and we study types</font>

425
00:24:16,529 --> 00:24:21,750
declared with ranges<font color="#E5E5E5"> or static</font>

426
00:24:18,120 --> 00:24:23,908
predicates that's<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so here</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> we've</font>

427
00:24:21,750 --> 00:24:28,049
got up<font color="#CCCCCC"> then up to the northern</font>

428
00:24:23,909 --> 00:24:30,840
hemisphere<font color="#CCCCCC"> so spring is marched to me</font>

429
00:24:28,049 --> 00:24:36,830
<font color="#CCCCCC">and window is December January and</font>

430
00:24:30,840 --> 00:24:36,830
February you can feel it outside

431
00:24:37,890 --> 00:24:45,360
then we can<font color="#E5E5E5"> have a case statement like</font>

432
00:24:39,990 --> 00:24:48,780
this<font color="#E5E5E5"> here where we have the base type</font>

433
00:24:45,360 --> 00:24:51,360
<font color="#E5E5E5">month so we have input here</font><font color="#CCCCCC"> is of type</font>

434
00:24:48,780 --> 00:24:54,990
month<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> have a case</font><font color="#E5E5E5"> statement with</font>

435
00:24:51,360 --> 00:24:56,820
commas each<font color="#E5E5E5"> season so printing out</font>

436
00:24:54,990 --> 00:25:00,420
different messages<font color="#E5E5E5"> depending</font><font color="#CCCCCC"> on the</font>

437
00:24:56,820 --> 00:25:07,500
season<font color="#CCCCCC"> and here you can see we cover</font>

438
00:25:00,420 --> 00:25:09,990
<font color="#CCCCCC">exactly follow the possible seasons if</font>

439
00:25:07,500 --> 00:25:12,600
there was some overlap<font color="#E5E5E5"> if I put in an</font>

440
00:25:09,990 --> 00:25:16,860
overlap<font color="#CCCCCC"> between some of</font><font color="#E5E5E5"> the seasons</font>

441
00:25:12,600 --> 00:25:20,219
<font color="#CCCCCC">saying that well</font><font color="#E5E5E5"> wind sometimes</font>

442
00:25:16,860 --> 00:25:38,389
continues into March<font color="#E5E5E5"> then the compiler</font>

443
00:25:20,220 --> 00:25:38,390
would complain<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it is it</font><font color="#CCCCCC"> but then</font>

444
00:25:42,960 --> 00:25:46,009
[Music]

445
00:26:07,460 --> 00:26:11,820
first<font color="#E5E5E5"> of all they would disagree with</font>

446
00:26:09,900 --> 00:26:19,280
<font color="#E5E5E5">you in my ratios they say they</font><font color="#CCCCCC"> only have</font>

447
00:26:11,820 --> 00:26:21,600
summer<font color="#E5E5E5"> and winter that would be</font>

448
00:26:19,280 --> 00:26:25,230
difficult<font color="#E5E5E5"> I would wouldn't do it like</font>

449
00:26:21,600 --> 00:26:29,340
<font color="#CCCCCC">this at least</font><font color="#E5E5E5"> I would I'm not sure</font>

450
00:26:25,230 --> 00:26:31,080
exactly how I would do<font color="#CCCCCC"> it but</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font>

451
00:26:29,340 --> 00:26:34,649
<font color="#E5E5E5">think I would do it</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a type system</font>

452
00:26:31,080 --> 00:26:37,830
just<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> I would say this you</font>

453
00:26:34,650 --> 00:26:41,880
could<font color="#E5E5E5"> also say this is try examples in a</font>

454
00:26:37,830 --> 00:26:44,699
way in reality<font color="#E5E5E5"> I'm more used to this</font>

455
00:26:41,880 --> 00:26:47,410
being different kinds<font color="#E5E5E5"> of communication</font>

456
00:26:44,700 --> 00:26:50,710
protocols and<font color="#CCCCCC"> things like that but it's</font>

457
00:26:47,410 --> 00:26:52,450
seasons<font color="#E5E5E5"> are nice example that we all of</font>

458
00:26:50,710 --> 00:27:02,580
us understand except that we disagree

459
00:26:52,450 --> 00:27:02,580
<font color="#E5E5E5">about the details to know where was I</font>

460
00:27:06,900 --> 00:27:14,370
so that was it yes<font color="#E5E5E5"> no I have a I have a</font>

461
00:27:12,330 --> 00:27:16,770
whole talk just about case coverage

462
00:27:14,370 --> 00:27:19,739
<font color="#E5E5E5">which is online as a video you</font><font color="#CCCCCC"> can see</font>

463
00:27:16,770 --> 00:27:21,780
and also<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have</font>

464
00:27:19,740 --> 00:27:23,310
<font color="#E5E5E5">to type write down all the examples they</font>

465
00:27:21,780 --> 00:27:27,030
are underlined<font color="#CCCCCC"> they're links in the</font>

466
00:27:23,310 --> 00:27:32,100
slides links on the<font color="#CCCCCC"> FOSDEM</font><font color="#E5E5E5"> website so</font>

467
00:27:27,030 --> 00:27:36,170
you can<font color="#CCCCCC"> download them later on okay then</font>

468
00:27:32,100 --> 00:27:38,840
now we say<font color="#E5E5E5"> we've got our types in order</font>

469
00:27:36,170 --> 00:27:47,100
<font color="#CCCCCC">we've got the details sort of in</font><font color="#E5E5E5"> order</font>

470
00:27:38,840 --> 00:27:52,320
then<font color="#E5E5E5"> sub programs functions procedures</font>

471
00:27:47,100 --> 00:27:58,469
entries<font color="#E5E5E5"> whatever we call them operations</font>

472
00:27:52,320 --> 00:28:01,649
methods first of all okay which

473
00:27:58,470 --> 00:28:05,130
arguments do<font color="#E5E5E5"> they have formal parameters</font>

474
00:28:01,650 --> 00:28:07,680
we say<font color="#E5E5E5"> later and then what is the</font>

475
00:28:05,130 --> 00:28:10,020
<font color="#E5E5E5">direction of the formal parameters is</font>

476
00:28:07,680 --> 00:28:12,360
the<font color="#E5E5E5"> data going into the operation data</font>

477
00:28:10,020 --> 00:28:18,560
coming out<font color="#CCCCCC"> of the operation my</font><font color="#E5E5E5"> actual</font>

478
00:28:12,360 --> 00:28:22,320
data going<font color="#CCCCCC"> both ways and</font><font color="#E5E5E5"> then we select</font>

479
00:28:18,560 --> 00:28:25,260
subtypes<font color="#CCCCCC"> for each</font><font color="#E5E5E5"> types of subtypes for</font>

480
00:28:22,320 --> 00:28:28,590
each argument and then finally we<font color="#E5E5E5"> can</font>

481
00:28:25,260 --> 00:28:31,379
put<font color="#CCCCCC"> in specialized pre and post</font>

482
00:28:28,590 --> 00:28:35,520
conditions<font color="#CCCCCC"> to describe relations between</font>

483
00:28:31,380 --> 00:28:39,740
the arguments and any constraint we

484
00:28:35,520 --> 00:28:39,740
can't be done<font color="#CCCCCC"> just with the type system</font>

485
00:28:40,039 --> 00:28:51,408
<font color="#E5E5E5">a nice classical example</font><font color="#CCCCCC"> sub program</font>

486
00:28:45,859 --> 00:28:53,299
here for<font color="#E5E5E5"> incrementing a counter here</font>

487
00:28:51,409 --> 00:28:55,609
I've actually gotten ahead of<font color="#E5E5E5"> myself I</font>

488
00:28:53,299 --> 00:28:58,908
first decided well there are integers of

489
00:28:55,609 --> 00:29:04,449
some kind<font color="#E5E5E5"> the counter comes in has</font>

490
00:28:58,909 --> 00:29:06,979
changed<font color="#CCCCCC"> comes out again a step comes in</font>

491
00:29:04,450 --> 00:29:08,509
<font color="#CCCCCC">did consider</font><font color="#E5E5E5"> if I should put a default</font>

492
00:29:06,979 --> 00:29:10,639
value on it<font color="#E5E5E5"> and either you can</font><font color="#CCCCCC"> actually</font>

493
00:29:08,509 --> 00:29:13,820
put in a default<font color="#CCCCCC"> value declared here</font><font color="#E5E5E5"> and</font>

494
00:29:10,639 --> 00:29:15,949
then if you call the sub program<font color="#E5E5E5"> only</font>

495
00:29:13,820 --> 00:29:18,080
with the one parameter<font color="#E5E5E5"> then the second</font>

496
00:29:15,950 --> 00:29:24,979
one is<font color="#CCCCCC"> just passing it as a default</font>

497
00:29:18,080 --> 00:29:27,228
<font color="#CCCCCC">value in our mind</font><font color="#E5E5E5"> okay but no we</font><font color="#CCCCCC"> don't</font>

498
00:29:24,979 --> 00:29:30,249
want our pounders to be negative so we

499
00:29:27,229 --> 00:29:33,979
use<font color="#E5E5E5"> natural instead of integer and</font>

500
00:29:30,249 --> 00:29:35,659
having a seronegative step well you

501
00:29:33,979 --> 00:29:37,340
could just<font color="#E5E5E5"> argue for negative but</font>

502
00:29:35,659 --> 00:29:41,359
serious<font color="#E5E5E5"> things don't make sense</font><font color="#CCCCCC"> I</font>

503
00:29:37,340 --> 00:29:45,699
decided to go for<font color="#E5E5E5"> only positive steps so</font>

504
00:29:41,359 --> 00:29:45,699
that's putting in the<font color="#E5E5E5"> subtypes</font>

505
00:29:45,970 --> 00:29:52,170
do we then<font color="#E5E5E5"> have any additional</font>

506
00:29:48,250 --> 00:29:52,170
constraints well

507
00:29:52,530 --> 00:29:57,879
counter should be less than the very

508
00:29:55,690 --> 00:29:59,310
<font color="#E5E5E5">last possible value because otherwise I</font>

509
00:29:57,880 --> 00:30:05,920
can't<font color="#CCCCCC"> implement it</font>

510
00:29:59,310 --> 00:30:07,750
so this is one precondition and then

511
00:30:05,920 --> 00:30:11,710
actually another precondition could be

512
00:30:07,750 --> 00:30:13,420
that the step should be match<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font>

513
00:30:11,710 --> 00:30:15,700
<font color="#CCCCCC">smaller than equal to the difference</font>

514
00:30:13,420 --> 00:30:19,840
<font color="#CCCCCC">between</font><font color="#E5E5E5"> the last possible value and the</font>

515
00:30:15,700 --> 00:30:23,530
<font color="#E5E5E5">current value</font><font color="#CCCCCC"> of counter so one more and</font>

516
00:30:19,840 --> 00:30:25,179
then<font color="#E5E5E5"> one weight on the counter must be</font>

517
00:30:23,530 --> 00:30:28,240
larger than zero<font color="#CCCCCC"> because we've</font>

518
00:30:25,180 --> 00:30:32,650
incremented it and it started being<font color="#CCCCCC"> zero</font>

519
00:30:28,240 --> 00:30:34,540
or more<font color="#E5E5E5"> so this is an example yeah you</font>

520
00:30:32,650 --> 00:30:37,360
could also put in a<font color="#E5E5E5"> post condition</font><font color="#CCCCCC"> that</font>

521
00:30:34,540 --> 00:30:41,950
basically finishes<font color="#CCCCCC"> writing the sub</font>

522
00:30:37,360 --> 00:30:46,179
program that counter in the post

523
00:30:41,950 --> 00:30:48,370
condition is counter old plus step and

524
00:30:46,180 --> 00:30:51,010
then<font color="#CCCCCC"> then you're done writing your sub</font>

525
00:30:48,370 --> 00:30:56,020
program well you still have to<font color="#E5E5E5"> implement</font>

526
00:30:51,010 --> 00:30:58,390
it but it's getting very boring but

527
00:30:56,020 --> 00:31:03,910
basically for very<font color="#E5E5E5"> simple sub programs</font>

528
00:30:58,390 --> 00:31:06,160
of<font color="#CCCCCC"> n functions you can</font><font color="#E5E5E5"> you can put the</font>

529
00:31:03,910 --> 00:31:09,010
whole<font color="#E5E5E5"> expression of what it does in the</font>

530
00:31:06,160 --> 00:31:11,200
contract and when you can do<font color="#E5E5E5"> that it's</font>

531
00:31:09,010 --> 00:31:14,040
<font color="#CCCCCC">also sort</font><font color="#E5E5E5"> of demonstrates that it's a</font>

532
00:31:11,200 --> 00:31:14,040
toy<font color="#CCCCCC"> example</font>

533
00:31:17,550 --> 00:31:25,230
okay<font color="#E5E5E5"> but having</font><font color="#CCCCCC"> done that we may</font><font color="#E5E5E5"> still</font>

534
00:31:22,980 --> 00:31:29,730
want<font color="#CCCCCC"> to refine</font><font color="#E5E5E5"> need to refine the</font>

535
00:31:25,230 --> 00:31:33,780
specification<font color="#CCCCCC"> some questions I</font><font color="#E5E5E5"> usually</font>

536
00:31:29,730 --> 00:31:37,290
say your<font color="#CCCCCC"> tasks do you have some sub</font>

537
00:31:33,780 --> 00:31:38,879
programs with special requirements some

538
00:31:37,290 --> 00:31:45,030
requirements<font color="#CCCCCC"> that should be met before</font>

539
00:31:38,880 --> 00:31:46,530
you call them<font color="#CCCCCC"> a classical one</font><font color="#E5E5E5"> is that</font>

540
00:31:45,030 --> 00:31:48,780
you have a<font color="#E5E5E5"> library where you need to</font>

541
00:31:46,530 --> 00:31:53,580
call some initialization sub program

542
00:31:48,780 --> 00:31:55,020
before<font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> use it</font><font color="#CCCCCC"> do you</font>

543
00:31:53,580 --> 00:31:57,360
have a sub program that should<font color="#E5E5E5"> only be</font>

544
00:31:55,020 --> 00:32:02,700
called once<font color="#E5E5E5"> like the initialization</font>

545
00:31:57,360 --> 00:32:04,949
function for<font color="#E5E5E5"> set library or can the sub</font>

546
00:32:02,700 --> 00:32:09,330
program<font color="#E5E5E5"> only be called when</font><font color="#CCCCCC"> the system</font>

547
00:32:04,950 --> 00:32:11,280
in some other<font color="#CCCCCC"> ways a</font><font color="#E5E5E5"> special</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> well</font>

548
00:32:09,330 --> 00:32:14,510
in a way<font color="#E5E5E5"> they're variants of the</font><font color="#CCCCCC"> same</font>

549
00:32:11,280 --> 00:32:14,510
question but still

550
00:32:19,840 --> 00:32:26,530
I took my<font color="#CCCCCC"> sub program</font><font color="#E5E5E5"> sub program from</font>

551
00:32:23,650 --> 00:32:28,740
<font color="#E5E5E5">the standard library</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> standard</font>

552
00:32:26,530 --> 00:32:31,899
library we don't have this part but

553
00:32:28,740 --> 00:32:36,880
<font color="#E5E5E5">writing to a file</font><font color="#CCCCCC"> I think it's very good</font>

554
00:32:31,900 --> 00:32:39,520
<font color="#CCCCCC">if it so if it's writable through the</font>

555
00:32:36,880 --> 00:32:44,230
mode is either you<font color="#E5E5E5"> write</font><font color="#CCCCCC"> right to it or</font>

556
00:32:39,520 --> 00:32:47,410
<font color="#CCCCCC">penser it so that's one example</font><font color="#E5E5E5"> but</font>

557
00:32:44,230 --> 00:32:49,720
something you<font color="#E5E5E5"> would add besides you</font>

558
00:32:47,410 --> 00:32:54,160
could of course<font color="#E5E5E5"> discuss if the real</font>

559
00:32:49,720 --> 00:32:58,360
solution here wasn't<font color="#CCCCCC"> to make this a sub</font>

560
00:32:54,160 --> 00:33:01,870
type<font color="#E5E5E5"> a file type and then just say all</font>

561
00:32:58,360 --> 00:33:04,990
the write operations have this writable

562
00:33:01,870 --> 00:33:07,629
file subtype

563
00:33:04,990 --> 00:33:09,190
as argument and<font color="#E5E5E5"> then we suddenly figure</font>

564
00:33:07,630 --> 00:33:11,620
out that well maybe we shouldn't declare

565
00:33:09,190 --> 00:33:16,890
<font color="#E5E5E5">new subtype here put that in in the</font>

566
00:33:11,620 --> 00:33:20,020
stats<font color="#E5E5E5"> or we just use this precondition</font>

567
00:33:16,890 --> 00:33:23,440
another one this is<font color="#E5E5E5"> from the example</font>

568
00:33:20,020 --> 00:33:27,190
<font color="#CCCCCC">we're a library you have</font><font color="#E5E5E5"> to initialize</font>

569
00:33:23,440 --> 00:33:34,840
but<font color="#CCCCCC"> only</font><font color="#E5E5E5"> it's only sensible to do it if</font>

570
00:33:27,190 --> 00:33:36,940
the library<font color="#E5E5E5"> is not initialized yet well</font>

571
00:33:34,840 --> 00:33:41,678
and then now you just get a bit of

572
00:33:36,940 --> 00:33:46,150
opinion<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not sure how sensible it</font>

573
00:33:41,679 --> 00:33:48,970
actually is<font color="#E5E5E5"> but the ideal</font><font color="#CCCCCC"> pre-post</font>

574
00:33:46,150 --> 00:33:51,700
conditions in my view<font color="#CCCCCC"> should be</font>

575
00:33:48,970 --> 00:33:55,440
<font color="#E5E5E5">something as simple as name of one of</font>

576
00:33:51,700 --> 00:33:59,290
<font color="#CCCCCC">the formal parameters is in some subtype</font>

577
00:33:55,440 --> 00:34:00,910
<font color="#CCCCCC">I have examples away</font><font color="#E5E5E5"> even in these</font>

578
00:33:59,290 --> 00:34:06,540
slides where it's not enough not

579
00:34:00,910 --> 00:34:06,540
<font color="#E5E5E5">possible but I would like to be there</font>

580
00:34:08,820 --> 00:34:16,679
so that was a bit about<font color="#E5E5E5"> putting</font>

581
00:34:10,830 --> 00:34:19,350
contracts on the<font color="#E5E5E5"> sub programs yeah then</font>

582
00:34:16,679 --> 00:34:21,810
<font color="#E5E5E5">another step that is when you have a</font>

583
00:34:19,350 --> 00:34:25,860
whole library<font color="#CCCCCC"> a collection of</font><font color="#E5E5E5"> sub</font>

584
00:34:21,810 --> 00:34:30,719
programs<font color="#E5E5E5"> it might be the standard</font>

585
00:34:25,860 --> 00:34:34,020
library<font color="#CCCCCC"> io some module</font><font color="#E5E5E5"> textio</font><font color="#CCCCCC"> sub</font>

586
00:34:30,719 --> 00:34:35,879
molecule<font color="#E5E5E5"> yeah and we want to be able to</font>

587
00:34:34,020 --> 00:34:39,600
<font color="#E5E5E5">use the whole library in a sensible</font><font color="#CCCCCC"> way</font>

588
00:34:35,880 --> 00:34:42,110
and the contracts should<font color="#CCCCCC"> be match up</font>

589
00:34:39,600 --> 00:34:46,380
between the different sub programs there

590
00:34:42,110 --> 00:34:50,810
and<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to write down some guidelines</font>

591
00:34:46,380 --> 00:34:54,480
<font color="#E5E5E5">for that part as well basically we want</font>

592
00:34:50,810 --> 00:34:57,450
the post condition of one call to match

593
00:34:54,480 --> 00:35:00,300
the preconditions of<font color="#E5E5E5"> the following call</font>

594
00:34:57,450 --> 00:35:02,430
so we look at<font color="#E5E5E5"> our</font><font color="#CCCCCC"> you first of all</font><font color="#E5E5E5"> we</font>

595
00:35:00,300 --> 00:35:05,280
look at which use<font color="#CCCCCC"> cases do we</font><font color="#E5E5E5"> have for</font>

596
00:35:02,430 --> 00:35:08,370
this library which sequences of<font color="#E5E5E5"> function</font>

597
00:35:05,280 --> 00:35:14,640
calls<font color="#E5E5E5"> do we find possible or did we</font>

598
00:35:08,370 --> 00:35:17,009
<font color="#E5E5E5">intense with this library and then we</font>

599
00:35:14,640 --> 00:35:21,779
take one<font color="#CCCCCC"> of these use cases and go</font>

600
00:35:17,010 --> 00:35:26,250
through the calls and then first step<font color="#E5E5E5"> we</font>

601
00:35:21,780 --> 00:35:28,850
verify that<font color="#E5E5E5"> the documented stay state of</font>

602
00:35:26,250 --> 00:35:31,530
the program<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> get there</font>

603
00:35:28,850 --> 00:35:34,319
matches<font color="#E5E5E5"> the</font><font color="#CCCCCC"> constrains and</font><font color="#E5E5E5"> the</font>

604
00:35:31,530 --> 00:35:37,380
preconditions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the first sub program</font>

605
00:35:34,320 --> 00:35:41,310
there<font color="#CCCCCC"> that we can call</font><font color="#E5E5E5"> and if there's a</font>

606
00:35:37,380 --> 00:35:44,910
mismatch<font color="#E5E5E5"> we go back and fix it and then</font>

607
00:35:41,310 --> 00:35:46,950
we document<font color="#CCCCCC"> okay what is the state</font><font color="#E5E5E5"> when</font>

608
00:35:44,910 --> 00:35:49,080
<font color="#CCCCCC">we leave this sub program so we can</font>

609
00:35:46,950 --> 00:35:53,799
<font color="#E5E5E5">continue onwards to</font><font color="#CCCCCC"> the next one in the</font>

610
00:35:49,080 --> 00:35:57,270
use case and see if they match<font color="#CCCCCC"> on</font>

611
00:35:53,800 --> 00:35:57,270
so let's try<font color="#E5E5E5"> it</font>

612
00:35:59,520 --> 00:36:06,940
we look at a<font color="#E5E5E5"> subset of the ADA standard</font>

613
00:36:03,280 --> 00:36:09,600
package<font color="#E5E5E5"> a textile it has a procedure for</font>

614
00:36:06,940 --> 00:36:14,530
opening a file<font color="#E5E5E5"> one for closing a file</font>

615
00:36:09,600 --> 00:36:18,279
<font color="#CCCCCC">foot line for writing a line of text out</font>

616
00:36:14,530 --> 00:36:22,090
to<font color="#CCCCCC"> a file</font><font color="#E5E5E5"> here I've added some pre and</font>

617
00:36:18,280 --> 00:36:23,980
post conditions<font color="#CCCCCC"> already yeah</font><font color="#E5E5E5"> this one</font>

618
00:36:22,090 --> 00:36:27,400
was<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> as for put and then</font>

619
00:36:23,980 --> 00:36:30,720
additionally<font color="#E5E5E5"> I say that the the line</font>

620
00:36:27,400 --> 00:36:34,050
number of the file is incremented by<font color="#E5E5E5"> one</font>

621
00:36:30,720 --> 00:36:34,049
<font color="#E5E5E5">after the call</font>

622
00:36:37,170 --> 00:36:43,799
so I refer to<font color="#E5E5E5"> the old</font><font color="#CCCCCC"> blind number of</font>

623
00:36:41,010 --> 00:36:45,450
the file and compare that<font color="#CCCCCC"> through the</font>

624
00:36:43,799 --> 00:36:49,500
<font color="#E5E5E5">current line number of the file and say</font>

625
00:36:45,450 --> 00:36:52,308
<font color="#E5E5E5">it's to be added one here anyway we just</font>

626
00:36:49,500 --> 00:36:56,549
<font color="#CCCCCC">still get a very small part of</font><font color="#E5E5E5"> it here</font>

627
00:36:52,309 --> 00:37:02,400
and a plausible use case<font color="#E5E5E5"> open the file</font>

628
00:36:56,549 --> 00:37:05,160
<font color="#E5E5E5">put a line close the file</font><font color="#CCCCCC"> since open</font>

629
00:37:02,400 --> 00:37:08,910
<font color="#E5E5E5">didn't have any preconditions it's very</font>

630
00:37:05,160 --> 00:37:10,529
easy<font color="#E5E5E5"> everything's</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> we could say that</font>

631
00:37:08,910 --> 00:37:12,509
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> I've forgotten</font><font color="#CCCCCC"> something and</font>

632
00:37:10,529 --> 00:37:15,510
should have<font color="#E5E5E5"> written that I can't open</font>

633
00:37:12,510 --> 00:37:18,029
<font color="#CCCCCC">the file that's already oh but who knows</font>

634
00:37:15,510 --> 00:37:21,210
<font color="#E5E5E5">we may also say that if the file is open</font>

635
00:37:18,029 --> 00:37:25,339
we<font color="#CCCCCC"> just</font><font color="#E5E5E5"> close it first</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> but so</font>

636
00:37:21,210 --> 00:37:30,920
there's no mismatch and then afterwards

637
00:37:25,339 --> 00:37:30,920
the target was an out parameter

638
00:37:32,310 --> 00:37:37,620
so we know<font color="#CCCCCC"> Obon has modified</font><font color="#E5E5E5"> target in</font>

639
00:37:35,580 --> 00:37:42,060
some way or may have<font color="#CCCCCC"> modifying target in</font>

640
00:37:37,620 --> 00:37:44,850
some way<font color="#E5E5E5"> so we don't know anything about</font>

641
00:37:42,060 --> 00:37:48,420
target except that it has a valid value

642
00:37:44,850 --> 00:37:53,339
<font color="#E5E5E5">of file size whatever is valid for that</font>

643
00:37:48,420 --> 00:37:59,870
type so then we go on to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next one to</font>

644
00:37:53,340 --> 00:38:04,650
put line<font color="#CCCCCC"> here we have a problem because</font>

645
00:37:59,870 --> 00:38:09,509
<font color="#CCCCCC">hood line requires</font><font color="#E5E5E5"> our file</font><font color="#CCCCCC"> to be open</font>

646
00:38:04,650 --> 00:38:13,080
and bright<font color="#CCCCCC"> able</font><font color="#E5E5E5"> okay so we have to go</font>

647
00:38:09,510 --> 00:38:18,210
back and modify open if we<font color="#CCCCCC"> believe that</font>

648
00:38:13,080 --> 00:38:20,819
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> correct</font><font color="#CCCCCC"> to say okay when we leave</font>

649
00:38:18,210 --> 00:38:25,740
<font color="#CCCCCC">o</font><font color="#E5E5E5"> we promise that the file actually is</font>

650
00:38:20,820 --> 00:38:29,090
open and the mode of<font color="#E5E5E5"> the file is the</font>

651
00:38:25,740 --> 00:38:34,040
mode<font color="#E5E5E5"> that was passed in</font>

652
00:38:29,090 --> 00:38:36,970
then since we<font color="#CCCCCC"> go back open</font><font color="#E5E5E5"> it will out</font>

653
00:38:34,040 --> 00:38:42,500
file and out file is one of the valid

654
00:38:36,970 --> 00:38:45,589
<font color="#CCCCCC">states for put line then now we'll</font>

655
00:38:42,500 --> 00:38:47,750
actually<font color="#E5E5E5"> after having called open our</font>

656
00:38:45,590 --> 00:38:51,530
data will be in a proper<font color="#CCCCCC"> State for</font>

657
00:38:47,750 --> 00:38:55,010
calling<font color="#E5E5E5"> put line so we we we have</font>

658
00:38:51,530 --> 00:38:58,010
<font color="#E5E5E5">corrected now to match our our use case</font>

659
00:38:55,010 --> 00:39:01,150
if it didn't match either<font color="#CCCCCC"> there's</font>

660
00:38:58,010 --> 00:39:03,140
something wrong<font color="#E5E5E5"> with our use case</font><font color="#CCCCCC"> or</font>

661
00:39:01,150 --> 00:39:06,950
there's<font color="#E5E5E5"> something wrong with our</font>

662
00:39:03,140 --> 00:39:10,970
contracts and also if we make the

663
00:39:06,950 --> 00:39:14,419
<font color="#E5E5E5">contracts nice like this the compiler</font>

664
00:39:10,970 --> 00:39:17,450
can say<font color="#CCCCCC"> ok he calls this</font><font color="#E5E5E5"> one and then</font>

665
00:39:14,420 --> 00:39:19,310
the post condition for this one matches

666
00:39:17,450 --> 00:39:21,410
<font color="#CCCCCC">the precondition for this one so I</font><font color="#E5E5E5"> don't</font>

667
00:39:19,310 --> 00:39:24,500
<font color="#E5E5E5">need to check and entering the second</font>

668
00:39:21,410 --> 00:39:28,339
one<font color="#E5E5E5"> because we already knew check that</font>

669
00:39:24,500 --> 00:39:32,150
<font color="#E5E5E5">once so we we save more checks</font><font color="#CCCCCC"> if we</font>

670
00:39:28,340 --> 00:39:43,810
have well<font color="#E5E5E5"> matched pre and post</font>

671
00:39:32,150 --> 00:39:47,980
<font color="#CCCCCC">conditions</font><font color="#E5E5E5"> so more efficient code we</font>

672
00:39:43,810 --> 00:39:57,740
there<font color="#E5E5E5"> are certain</font><font color="#CCCCCC"> issues especially</font>

673
00:39:47,980 --> 00:40:00,710
<font color="#E5E5E5">taking something as tough as</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> so we we</font>

674
00:39:57,740 --> 00:40:06,459
in reality yes we should check if there

675
00:40:00,710 --> 00:40:09,080
was space<font color="#E5E5E5"> and the device and things also</font>

676
00:40:06,460 --> 00:40:12,050
<font color="#E5E5E5">we're not at all looking into the issues</font>

677
00:40:09,080 --> 00:40:16,040
related to can we<font color="#CCCCCC"> actually open a file</font>

678
00:40:12,050 --> 00:40:21,020
with this name it's this is this is not

679
00:40:16,040 --> 00:40:23,120
perfect<font color="#CCCCCC"> no I think</font><font color="#E5E5E5"> it's a bit more than</font>

680
00:40:21,020 --> 00:40:27,259
just<font color="#E5E5E5"> a toy example because it's actually</font>

681
00:40:23,120 --> 00:40:31,839
<font color="#E5E5E5">a library yeah we use or you might use</font>

682
00:40:27,260 --> 00:40:31,840
if you're programming<font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> but</font>

683
00:40:33,490 --> 00:40:39,990
now we can change<font color="#E5E5E5"> between the time</font><font color="#CCCCCC"> you</font>

684
00:40:37,300 --> 00:40:45,580
test it and the time<font color="#CCCCCC"> you need</font>

685
00:40:39,990 --> 00:40:46,868
so it's so it's it's one of the<font color="#E5E5E5"> cases</font>

686
00:40:45,580 --> 00:40:48,869
<font color="#E5E5E5">where you just have to accept that you</font>

687
00:40:46,869 --> 00:40:51,869
get an<font color="#CCCCCC"> exception there anyway</font>

688
00:40:48,869 --> 00:40:51,869
exactly

689
00:40:53,760 --> 00:41:04,420
but we continued<font color="#E5E5E5"> and closed it has no</font>

690
00:40:58,990 --> 00:41:14,890
preconditions so in in theory well<font color="#E5E5E5"> no</font>

691
00:41:04,420 --> 00:41:18,700
problem but we implicit<font color="#E5E5E5"> mismatch</font><font color="#CCCCCC"> that we</font>

692
00:41:14,890 --> 00:41:20,410
know we come<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> target open so maybe</font>

693
00:41:18,700 --> 00:41:23,500
we<font color="#CCCCCC"> should put in a precondition and</font>

694
00:41:20,410 --> 00:41:26,440
<font color="#CCCCCC">close</font><font color="#E5E5E5"> saying that you can only chose an</font>

695
00:41:23,500 --> 00:41:29,470
open file<font color="#CCCCCC"> or</font><font color="#E5E5E5"> maybe not that's sort of</font>

696
00:41:26,440 --> 00:41:37,450
more decision about how does the library

697
00:41:29,470 --> 00:41:39,040
<font color="#E5E5E5">work because a stricter constraint going</font>

698
00:41:37,450 --> 00:41:43,060
to a less strict one that's not a

699
00:41:39,040 --> 00:41:49,860
problem<font color="#E5E5E5"> so there it's it's a matter</font><font color="#CCCCCC"> of</font>

700
00:41:43,060 --> 00:41:53,560
design issues but afterwards we know

701
00:41:49,860 --> 00:41:55,480
that target<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been changed and can</font>

702
00:41:53,560 --> 00:41:57,100
have any valid<font color="#E5E5E5"> file</font><font color="#CCCCCC"> sign where we might</font>

703
00:41:55,480 --> 00:41:59,980
<font color="#CCCCCC">want to document that it's actually</font>

704
00:41:57,100 --> 00:42:03,370
closed but in general you can see this

705
00:41:59,980 --> 00:42:06,640
is just<font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> partial and it's a</font>

706
00:42:03,370 --> 00:42:08,920
good exercise to<font color="#E5E5E5"> to look into yeah</font>

707
00:42:06,640 --> 00:42:10,509
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> I think the a-artie are they</font>

708
00:42:08,920 --> 00:42:13,830
working and putting contracts on<font color="#E5E5E5"> some</font>

709
00:42:10,510 --> 00:42:13,830
<font color="#E5E5E5">what parts of the standard</font><font color="#CCCCCC"> library</font>

710
00:42:17,489 --> 00:42:31,989
so it's a soft<font color="#CCCCCC"> we should add more</font>

711
00:42:22,210 --> 00:42:33,819
contracts<font color="#E5E5E5"> okay no problem so I'll give</font>

712
00:42:31,989 --> 00:42:38,289
you<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shot very short version</font><font color="#E5E5E5"> of my</font>

713
00:42:33,819 --> 00:42:44,079
talk don't disable<font color="#E5E5E5"> unproven assertions</font>

714
00:42:38,289 --> 00:42:47,440
<font color="#E5E5E5">and using the type system</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> possible to</font>

715
00:42:44,079 --> 00:42:49,269
write assertions centrally and have the

716
00:42:47,440 --> 00:42:52,660
compiler insert them everywhere they

717
00:42:49,269 --> 00:42:56,439
<font color="#CCCCCC">need to be so it's a way of writing</font>

718
00:42:52,660 --> 00:43:00,489
assertions which scales very<font color="#E5E5E5"> well little</font>

719
00:42:56,440 --> 00:43:04,380
work lots of effects<font color="#E5E5E5"> then don't use more</font>

720
00:43:00,489 --> 00:43:06,609
<font color="#E5E5E5">advanced contracts</font><font color="#CCCCCC"> when you need to and</font>

721
00:43:04,380 --> 00:43:09,759
the last<font color="#CCCCCC"> one we've been</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font>

722
00:43:06,609 --> 00:43:12,069
<font color="#E5E5E5">use use cases for your packages to check</font>

723
00:43:09,759 --> 00:43:14,400
if your contracts are complete and

724
00:43:12,069 --> 00:43:14,400
<font color="#CCCCCC">consistent</font>

725
00:43:16,790 --> 00:43:19,420
and

726
00:43:21,570 --> 00:43:28,360
<font color="#CCCCCC">link to the examples</font><font color="#E5E5E5"> there's also the</font>

727
00:43:26,080 --> 00:43:33,549
link is<font color="#E5E5E5"> also with the</font><font color="#CCCCCC"> slights</font><font color="#E5E5E5"> in the</font>

728
00:43:28,360 --> 00:43:47,530
custom<font color="#E5E5E5"> website yes</font>

729
00:43:33,550 --> 00:43:51,040
any questions well<font color="#E5E5E5"> yeah I could name my</font>

730
00:43:47,530 --> 00:43:53,590
<font color="#CCCCCC">subtype I yes</font><font color="#E5E5E5"> I wouldn't do</font><font color="#CCCCCC"> it because</font>

731
00:43:51,040 --> 00:43:59,950
I'm me

732
00:43:53,590 --> 00:44:04,930
actually the last<font color="#E5E5E5"> place I worked we put</font>

733
00:43:59,950 --> 00:44:08,140
in a rule that<font color="#E5E5E5"> all our identifiers had</font>

734
00:44:04,930 --> 00:44:10,180
to be proper<font color="#E5E5E5"> American English American</font>

735
00:44:08,140 --> 00:44:12,520
English I didn't like it but the ADA

736
00:44:10,180 --> 00:44:15,100
standard has<font color="#E5E5E5"> identify as an American</font>

737
00:44:12,520 --> 00:44:20,680
<font color="#E5E5E5">English so mixing British and American</font>

738
00:44:15,100 --> 00:44:23,589
<font color="#CCCCCC">English is a mess</font><font color="#E5E5E5"> so no you could call</font>

739
00:44:20,680 --> 00:44:36,520
the subtypes<font color="#CCCCCC"> I J and K</font><font color="#E5E5E5"> but you wouldn't</font>

740
00:44:23,590 --> 00:44:39,190
do it<font color="#E5E5E5"> no you choose it's it's a balance</font>

741
00:44:36,520 --> 00:44:43,110
there but yeah you get definitely you

742
00:44:39,190 --> 00:44:47,370
get longer<font color="#CCCCCC"> type names than int and float</font>

743
00:44:43,110 --> 00:44:51,700
<font color="#CCCCCC">and</font><font color="#E5E5E5"> but nowadays you have</font><font color="#CCCCCC"> wide</font><font color="#E5E5E5"> screen</font>

744
00:44:47,370 --> 00:44:55,240
laptops and so<font color="#E5E5E5"> the</font><font color="#CCCCCC"> eighty character</font>

745
00:44:51,700 --> 00:44:57,160
limit and source<font color="#E5E5E5"> code enforced it on my</font>

746
00:44:55,240 --> 00:45:00,850
own<font color="#E5E5E5"> code until two years ago but now</font>

747
00:44:57,160 --> 00:45:06,790
I've<font color="#CCCCCC"> decided now the hell</font>

748
00:45:00,850 --> 00:45:06,790
<font color="#CCCCCC">kanessa suffice in the package</font><font color="#E5E5E5"> psychic</font>

749
00:45:10,230 --> 00:45:44,020
yes yeah<font color="#CCCCCC"> well</font><font color="#E5E5E5"> yes the first time you</font>

750
00:45:25,560 --> 00:45:49,270
original name nobody<font color="#E5E5E5"> know but sometimes</font>

751
00:45:44,020 --> 00:45:51,430
<font color="#CCCCCC">you may end up hitting your display</font><font color="#E5E5E5"> and</font>

752
00:45:49,270 --> 00:46:14,500
then you have to think a bit more<font color="#E5E5E5"> about</font>

753
00:45:51,430 --> 00:46:18,730
your<font color="#CCCCCC"> naming yes yes sorry</font><font color="#E5E5E5"> the question</font>

754
00:46:14,500 --> 00:46:21,450
is is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> possible to</font><font color="#E5E5E5"> write a contract a</font>

755
00:46:18,730 --> 00:46:26,860
predicate check that never finishes and

756
00:46:21,450 --> 00:46:31,029
easily I<font color="#E5E5E5"> can do that</font><font color="#CCCCCC"> and I can't</font>

757
00:46:26,860 --> 00:46:33,510
remember<font color="#E5E5E5"> if</font><font color="#CCCCCC"> I've done it yet</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> but</font>

758
00:46:31,030 --> 00:46:38,290
I've<font color="#E5E5E5"> heard of people accidentally</font>

759
00:46:33,510 --> 00:46:42,790
putting<font color="#E5E5E5"> in some recursive calls in the</font>

760
00:46:38,290 --> 00:46:45,880
contracts so they<font color="#E5E5E5"> checked something the</font>

761
00:46:42,790 --> 00:46:48,580
<font color="#E5E5E5">the</font><font color="#CCCCCC"> connect matt has resolved the</font>

762
00:46:45,880 --> 00:46:52,000
<font color="#E5E5E5">problem with the recursion now so the</font>

763
00:46:48,580 --> 00:46:55,090
the standard and the GCC<font color="#E5E5E5"> ADA compiler</font>

764
00:46:52,000 --> 00:46:57,370
<font color="#CCCCCC">has solved it</font><font color="#E5E5E5"> but I think</font><font color="#CCCCCC"> I've heard</font>

765
00:46:55,090 --> 00:47:04,590
somebody that I accidentally<font color="#E5E5E5"> stepped on</font>

766
00:46:57,370 --> 00:47:04,589
<font color="#CCCCCC">that one with recursive contracts so</font>

767
00:47:07,050 --> 00:47:15,610
<font color="#CCCCCC">they know</font><font color="#E5E5E5"> the compiler is</font><font color="#CCCCCC"> not required</font>

768
00:47:12,430 --> 00:47:19,569
to<font color="#CCCCCC"> check any of</font><font color="#E5E5E5"> this compile time</font>

769
00:47:15,610 --> 00:47:22,000
Nats<font color="#E5E5E5"> checks static static predicates</font><font color="#CCCCCC"> you</font>

770
00:47:19,570 --> 00:47:23,640
<font color="#CCCCCC">can add checks at compile time</font><font color="#E5E5E5"> well it</font>

771
00:47:22,000 --> 00:47:27,880
can do it<font color="#E5E5E5"> anyway for</font>

772
00:47:23,640 --> 00:47:29,680
<font color="#E5E5E5">case</font><font color="#CCCCCC"> statements so whenever</font><font color="#E5E5E5"> it can you</font>

773
00:47:27,880 --> 00:47:31,780
<font color="#E5E5E5">can see that you're</font><font color="#CCCCCC"> doing something</font><font color="#E5E5E5"> that</font>

774
00:47:29,680 --> 00:47:34,029
<font color="#E5E5E5">will raise a constrained error</font><font color="#CCCCCC"> at</font>

775
00:47:31,780 --> 00:47:36,820
runtime<font color="#CCCCCC"> you get a warning it's not</font>

776
00:47:34,030 --> 00:47:38,410
allowed<font color="#E5E5E5"> to fail the</font><font color="#CCCCCC"> compilation because</font>

777
00:47:36,820 --> 00:47:39,580
<font color="#E5E5E5">that would be</font><font color="#CCCCCC"> breaking</font><font color="#E5E5E5"> the standard but</font>

778
00:47:38,410 --> 00:47:46,319
you<font color="#CCCCCC"> get a warning you'll get a</font>

779
00:47:39,580 --> 00:47:49,240
<font color="#CCCCCC">constrained error at</font><font color="#E5E5E5"> runtime here yes</font>

780
00:47:46,320 --> 00:47:56,820
the static predicates are simple set

781
00:47:49,240 --> 00:47:56,819
operations so yeah

782
00:47:57,370 --> 00:48:22,970
yes yes yes<font color="#CCCCCC"> well the</font><font color="#E5E5E5"> question is about</font>

783
00:48:19,670 --> 00:48:27,430
the static predicates and<font color="#CCCCCC"> that they are</font>

784
00:48:22,970 --> 00:48:30,290
static<font color="#E5E5E5"> and implicitly</font><font color="#CCCCCC"> compiled time</font><font color="#E5E5E5"> and</font>

785
00:48:27,430 --> 00:48:32,000
our<font color="#CCCCCC"> certian contract based programming</font>

786
00:48:30,290 --> 00:48:37,490
<font color="#CCCCCC">also</font><font color="#E5E5E5"> about is which all about runtime</font>

787
00:48:32,000 --> 00:48:40,310
checks<font color="#E5E5E5"> but they're still the static</font><font color="#CCCCCC"> the</font>

788
00:48:37,490 --> 00:48:42,589
static Ness of static predicates<font color="#E5E5E5"> is in</font>

789
00:48:40,310 --> 00:48:45,110
the expression of<font color="#E5E5E5"> the static predicate</font>

790
00:48:42,590 --> 00:48:49,400
<font color="#CCCCCC">you may still have</font><font color="#E5E5E5"> that the static</font>

791
00:48:45,110 --> 00:48:52,280
predicate is a subset<font color="#CCCCCC"> of another type so</font>

792
00:48:49,400 --> 00:48:54,920
when you do a runtime conversion it may

793
00:48:52,280 --> 00:48:57,190
or may not<font color="#E5E5E5"> be valid so like if you make</font>

794
00:48:54,920 --> 00:48:57,190
a

795
00:49:00,800 --> 00:49:10,980
yeah<font color="#E5E5E5"> no but we could take</font><font color="#CCCCCC"> one of the</font>

796
00:49:04,859 --> 00:49:14,970
examples with the<font color="#CCCCCC"> seasons here if we</font>

797
00:49:10,980 --> 00:49:20,730
have some month one object of time month

798
00:49:14,970 --> 00:49:24,029
<font color="#E5E5E5">another of type window then converting</font>

799
00:49:20,730 --> 00:49:27,720
from<font color="#E5E5E5"> ones to winter we have we have to</font>

800
00:49:24,030 --> 00:49:30,089
do a runtime check if it's valid even<font color="#E5E5E5"> if</font>

801
00:49:27,720 --> 00:49:32,368
<font color="#E5E5E5">this</font><font color="#CCCCCC"> expression is static is a compile</font>

802
00:49:30,089 --> 00:49:34,799
time expression<font color="#E5E5E5"> we still have to do the</font>

803
00:49:32,369 --> 00:49:38,310
check at<font color="#CCCCCC"> runtime when we convert from</font>

804
00:49:34,800 --> 00:49:41,640
<font color="#CCCCCC">another time so in that sense yes</font>

805
00:49:38,310 --> 00:49:44,250
<font color="#CCCCCC">there's you still have runtime</font><font color="#E5E5E5"> checks</font>

806
00:49:41,640 --> 00:49:46,529
<font color="#E5E5E5">just like with ranges if you do an</font>

807
00:49:44,250 --> 00:49:49,200
<font color="#CCCCCC">addition of two integers you may exceed</font>

808
00:49:46,530 --> 00:49:51,839
<font color="#CCCCCC">the range of the time that</font><font color="#E5E5E5"> you're</font>

809
00:49:49,200 --> 00:49:53,490
putting<font color="#E5E5E5"> them in so they're still</font><font color="#CCCCCC"> runtime</font>

810
00:49:51,839 --> 00:49:57,180
<font color="#CCCCCC">checks</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if the expressions are</font>

811
00:49:53,490 --> 00:49:59,240
static<font color="#CCCCCC"> does that</font><font color="#E5E5E5"> does that</font><font color="#CCCCCC"> answer your</font>

812
00:49:57,180 --> 00:49:59,240
question

