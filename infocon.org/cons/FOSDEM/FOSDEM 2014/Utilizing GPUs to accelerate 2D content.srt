1
00:00:00,000 --> 00:00:10,530
<font color="#CCCCCC">ok so now it's time to listen to best</font>

2
00:00:04,500 --> 00:00:14,309
<font color="#CCCCCC">Shelton okay thank you</font>

3
00:00:10,530 --> 00:00:17,490
so bus is<font color="#CCCCCC"> Angela in the</font><font color="#E5E5E5"> modulus graphics</font>

4
00:00:14,309 --> 00:00:19,890
team<font color="#CCCCCC"> it's him who has implemented a</font>

5
00:00:17,490 --> 00:00:23,788
large portion of the<font color="#CCCCCC"> cut</font><font color="#E5E5E5"> needed for</font>

6
00:00:19,890 --> 00:00:25,500
windows in<font color="#CCCCCC"> GFX this is</font><font color="#E5E5E5"> also very much</font>

7
00:00:23,789 --> 00:00:29,250
involved in the<font color="#CCCCCC"> Muslim</font><font color="#E5E5E5"> community</font>

8
00:00:25,500 --> 00:00:32,640
<font color="#E5E5E5">creating a real</font><font color="#CCCCCC"> not speaking community</font>

9
00:00:29,250 --> 00:00:35,399
to bring together<font color="#CCCCCC"> Dutch</font><font color="#E5E5E5"> like him and</font>

10
00:00:32,640 --> 00:00:43,559
<font color="#E5E5E5">dutch-speaking</font><font color="#CCCCCC"> Belgian</font><font color="#E5E5E5"> so please welcome</font>

11
00:00:35,399 --> 00:00:47,039
bus<font color="#E5E5E5"> that was a lot more than</font><font color="#CCCCCC"> i planned</font>

12
00:00:43,559 --> 00:00:49,620
<font color="#E5E5E5">credit for but sure right i'm here to</font>

13
00:00:47,039 --> 00:00:51,870
talk with you about utilizing<font color="#CCCCCC"> gpus to</font>

14
00:00:49,620 --> 00:00:53,550
accelerate 2d content which is mainly

15
00:00:51,870 --> 00:00:56,760
what I've been focusing on during my

16
00:00:53,550 --> 00:00:58,440
career<font color="#CCCCCC"> and mozilla as was said</font><font color="#E5E5E5"> I work</font>

17
00:00:56,760 --> 00:01:01,468
for the graphics team<font color="#E5E5E5"> for</font><font color="#CCCCCC"> mozilla I</font>

18
00:00:58,440 --> 00:01:03,690
mainly work on<font color="#CCCCCC"> windows and acceleration</font>

19
00:01:01,469 --> 00:01:04,920
on<font color="#CCCCCC"> Windows but I've also done for</font>

20
00:01:03,690 --> 00:01:07,408
example the initial<font color="#CCCCCC"> opengl</font>

21
00:01:04,920 --> 00:01:11,010
implementations and things like that so

22
00:01:07,409 --> 00:01:12,990
<font color="#CCCCCC">I have a little</font><font color="#E5E5E5"> disclaimer here the the</font>

23
00:01:11,010 --> 00:01:14,729
market and the technology in this area

24
00:01:12,990 --> 00:01:16,199
moves very fast<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to make a</font>

25
00:01:14,729 --> 00:01:18,539
couple of statements if any of those

26
00:01:16,200 --> 00:01:22,860
turn out to be outdated<font color="#CCCCCC"> I'm sorry</font>

27
00:01:18,540 --> 00:01:24,659
right<font color="#E5E5E5"> so what am</font><font color="#CCCCCC"> I going</font><font color="#E5E5E5"> to talk about</font>

28
00:01:22,860 --> 00:01:27,000
<font color="#E5E5E5">i'm going to talk about why we want to</font>

29
00:01:24,659 --> 00:01:29,610
use<font color="#CCCCCC"> gpus i'm going to talk about the</font>

30
00:01:27,000 --> 00:01:32,310
strengths and weaknesses of them<font color="#CCCCCC"> the</font>

31
00:01:29,610 --> 00:01:34,049
challenges for 2d rendering<font color="#CCCCCC"> what the GPU</font>

32
00:01:32,310 --> 00:01:35,970
pipeline looks like the available

33
00:01:34,049 --> 00:01:38,820
approaches we can take<font color="#E5E5E5"> when doing 2d</font>

34
00:01:35,970 --> 00:01:40,619
rendering with<font color="#CCCCCC"> gpus or GPU assisted</font><font color="#E5E5E5"> 2d</font>

35
00:01:38,820 --> 00:01:41,970
rendering and existing implementations

36
00:01:40,619 --> 00:01:43,860
that are out there

37
00:01:41,970 --> 00:01:48,600
does everybody here know what<font color="#E5E5E5"> a GPU is</font>

38
00:01:43,860 --> 00:01:51,270
good<font color="#CCCCCC"> good</font><font color="#E5E5E5"> because that that would have</font>

39
00:01:48,600 --> 00:01:53,399
<font color="#E5E5E5">been a problem right</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so why do we</font>

40
00:01:51,270 --> 00:01:55,259
want to use<font color="#CCCCCC"> gpus well first of all these</font>

41
00:01:53,399 --> 00:01:56,640
days<font color="#CCCCCC"> they're present in almost every</font>

42
00:01:55,259 --> 00:01:58,229
machine where we need to make a

43
00:01:56,640 --> 00:02:00,450
distinction between discrete and

44
00:01:58,229 --> 00:02:02,429
integrated<font color="#CCCCCC"> gpus integrated gpus you will</font>

45
00:02:00,450 --> 00:02:04,770
find on your machine<font color="#E5E5E5"> chipsets or for</font>

46
00:02:02,430 --> 00:02:07,680
example in the<font color="#E5E5E5"> new</font><font color="#CCCCCC"> since</font><font color="#E5E5E5"> sandy bridge on</font>

47
00:02:04,770 --> 00:02:10,258
the<font color="#CCCCCC"> die along with your cpu and discrete</font>

48
00:02:07,680 --> 00:02:11,940
<font color="#E5E5E5">GPUs are separate chips which are either</font>

49
00:02:10,258 --> 00:02:13,559
either soldered on your laptop

50
00:02:11,940 --> 00:02:15,359
motherboard or

51
00:02:13,560 --> 00:02:16,920
you can find<font color="#CCCCCC"> you know the nice bulky</font>

52
00:02:15,360 --> 00:02:19,230
cards that you put into your desktop

53
00:02:16,920 --> 00:02:20,640
machine because you like gaming<font color="#E5E5E5"> now why</font>

54
00:02:19,230 --> 00:02:22,649
do we want to use them<font color="#E5E5E5"> well they are</font>

55
00:02:20,640 --> 00:02:24,208
called graphics processing unit so it

56
00:02:22,650 --> 00:02:27,239
seems to be sort of an obvious choice

57
00:02:24,209 --> 00:02:29,310
for the job<font color="#E5E5E5"> and what they basically do</font>

58
00:02:27,239 --> 00:02:32,160
is they give us much better flops

59
00:02:29,310 --> 00:02:33,569
<font color="#E5E5E5">floating-point operations per watt and</font>

60
00:02:32,160 --> 00:02:34,620
much better for<font color="#CCCCCC"> a dollar</font>

61
00:02:33,569 --> 00:02:37,560
<font color="#E5E5E5">I probably</font><font color="#CCCCCC"> should have</font><font color="#E5E5E5"> made that into</font>

62
00:02:34,620 --> 00:02:41,400
euros<font color="#E5E5E5"> too</font><font color="#CCCCCC"> bad million</font><font color="#E5E5E5"> so if we look at</font>

63
00:02:37,560 --> 00:02:42,720
this market the the first<font color="#E5E5E5"> 3d accelerated</font>

64
00:02:41,400 --> 00:02:45,569
cars that were introduced<font color="#CCCCCC"> were</font>

65
00:02:42,720 --> 00:02:48,299
introduced in<font color="#E5E5E5"> nineteen around 1997 and</font>

66
00:02:45,569 --> 00:02:52,530
later a very famous<font color="#CCCCCC"> ones it was the</font>

67
00:02:48,299 --> 00:02:55,019
<font color="#CCCCCC">Voodoo</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the futu produced about 500</font>

68
00:02:52,530 --> 00:02:57,630
mega flops a second at a thermal design

69
00:02:55,019 --> 00:03:00,120
power of about<font color="#CCCCCC"> ten wants</font><font color="#E5E5E5"> it costs</font><font color="#CCCCCC"> about</font>

70
00:02:57,630 --> 00:03:01,950
<font color="#CCCCCC">three hundred dollars</font><font color="#E5E5E5"> and it was a</font>

71
00:03:00,120 --> 00:03:03,810
purely gaming<font color="#E5E5E5"> device there was</font>

72
00:03:01,950 --> 00:03:05,880
absolutely no other use it was really

73
00:03:03,810 --> 00:03:08,099
hard to use for anything else

74
00:03:05,880 --> 00:03:12,390
now<font color="#CCCCCC"> this means that per watt you</font><font color="#E5E5E5"> got</font>

75
00:03:08,099 --> 00:03:16,230
<font color="#E5E5E5">about 50 mega flops per second and</font><font color="#CCCCCC"> for</font>

76
00:03:12,390 --> 00:03:18,328
<font color="#E5E5E5">dollar</font><font color="#CCCCCC"> you got about 1.6</font><font color="#E5E5E5"> mega flops</font><font color="#CCCCCC"> a</font>

77
00:03:16,230 --> 00:03:20,190
second that's<font color="#E5E5E5"> not very great common</font><font color="#CCCCCC"> jeep</font>

78
00:03:18,329 --> 00:03:23,070
<font color="#E5E5E5">is</font><font color="#CCCCCC"> CPU and those times was a pentium</font><font color="#E5E5E5"> to</font>

79
00:03:20,190 --> 00:03:25,950
<font color="#E5E5E5">it produced about 230-3 mega flops if we</font>

80
00:03:23,070 --> 00:03:27,930
take a specific variant of<font color="#E5E5E5"> also the</font>

81
00:03:25,950 --> 00:03:29,850
midsection of the market<font color="#CCCCCC"> had a</font><font color="#E5E5E5"> terminal</font>

82
00:03:27,930 --> 00:03:32,850
design<font color="#CCCCCC"> power of about seventeen</font><font color="#E5E5E5"> wats</font>

83
00:03:29,850 --> 00:03:34,829
<font color="#CCCCCC">they cost at five hundred dollars</font><font color="#E5E5E5"> and</font>

84
00:03:32,850 --> 00:03:37,530
you can see that the<font color="#E5E5E5"> numbers there are</font>

85
00:03:34,829 --> 00:03:39,359
you know<font color="#CCCCCC"> less</font><font color="#E5E5E5"> gigaflops per watt</font>

86
00:03:37,530 --> 00:03:40,920
<font color="#E5E5E5">let's get</font><font color="#CCCCCC"> applause for dollars</font><font color="#E5E5E5"> but the</font>

87
00:03:39,359 --> 00:03:43,049
differences<font color="#CCCCCC"> aren't as stunning as they</font>

88
00:03:40,920 --> 00:03:46,619
are these days nowadays you get a<font color="#CCCCCC"> radeon</font>

89
00:03:43,049 --> 00:03:47,760
<font color="#E5E5E5">6750 which is a</font><font color="#CCCCCC"> discrete ati GPU from</font>

90
00:03:46,620 --> 00:03:51,690
about the mid segment of the market

91
00:03:47,760 --> 00:03:53,910
<font color="#CCCCCC">about a</font><font color="#E5E5E5"> year or two back that produces a</font>

92
00:03:51,690 --> 00:03:55,380
teraflop which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> thousand gigaflops</font>

93
00:03:53,910 --> 00:03:56,940
<font color="#CCCCCC">a second</font>

94
00:03:55,380 --> 00:03:58,410
it has a thermal design power of a

95
00:03:56,940 --> 00:04:00,450
hundred<font color="#E5E5E5"> and fifty watts</font><font color="#CCCCCC"> know we've</font>

96
00:03:58,410 --> 00:04:02,310
become a lot more power hungry<font color="#E5E5E5"> need to</font>

97
00:04:00,450 --> 00:04:04,078
work on that really<font color="#CCCCCC"> it costs only a</font>

98
00:04:02,310 --> 00:04:05,310
hundred<font color="#CCCCCC"> dollars which is a world of</font>

99
00:04:04,079 --> 00:04:06,810
difference like that's a price that's

100
00:04:05,310 --> 00:04:09,420
affordable in your average machine

101
00:04:06,810 --> 00:04:12,000
produces<font color="#CCCCCC"> therefore 6.7 gigaflops</font><font color="#E5E5E5"> the</font>

102
00:04:09,420 --> 00:04:13,350
<font color="#E5E5E5">second per watt and</font><font color="#CCCCCC"> 10 gigaflops per</font>

103
00:04:12,000 --> 00:04:15,329
second per dollar

104
00:04:13,350 --> 00:04:17,488
now if you compare that to a common<font color="#CCCCCC"> cpu</font>

105
00:04:15,329 --> 00:04:21,780
<font color="#E5E5E5">in these days which is the</font><font color="#CCCCCC"> ivy bridge</font>

106
00:04:17,488 --> 00:04:25,260
<font color="#E5E5E5">I 5345 75 s that produces a tenth of</font>

107
00:04:21,779 --> 00:04:27,239
that at a higher price at double the

108
00:04:25,260 --> 00:04:29,310
price<font color="#E5E5E5"> but lower power</font>

109
00:04:27,240 --> 00:04:31,380
<font color="#CCCCCC">I'm like in the olden</font><font color="#E5E5E5"> days anyway so you</font>

110
00:04:29,310 --> 00:04:35,099
can see now that we have over four times

111
00:04:31,380 --> 00:04:38,099
as many gigaflops and<font color="#CCCCCC"> wat a per</font><font color="#E5E5E5"> watt on</font>

112
00:04:35,099 --> 00:04:41,190
the on the<font color="#CCCCCC"> radeon</font><font color="#E5E5E5"> and we have over</font><font color="#CCCCCC"> 20</font>

113
00:04:38,099 --> 00:04:43,199
times as many gigaflops a dollar<font color="#E5E5E5"> right</font>

114
00:04:41,190 --> 00:04:45,569
so everybody likes<font color="#CCCCCC"> cheap</font>

115
00:04:43,199 --> 00:04:46,889
well that's basically the<font color="#E5E5E5"> white</font><font color="#CCCCCC"> now we</font>

116
00:04:45,569 --> 00:04:49,380
have<font color="#E5E5E5"> to figure out how to do it well</font>

117
00:04:46,889 --> 00:04:52,830
<font color="#CCCCCC">whether</font><font color="#E5E5E5"> the GPU strengths and weaknesses</font>

118
00:04:49,380 --> 00:04:55,590
<font color="#E5E5E5">most modern GPUs</font><font color="#CCCCCC"> our triangle rasterizer</font>

119
00:04:52,830 --> 00:04:57,508
<font color="#E5E5E5">that means that when you have a game the</font>

120
00:04:55,590 --> 00:04:59,789
game<font color="#E5E5E5"> will have models they consist of</font>

121
00:04:57,509 --> 00:05:01,620
triangles<font color="#E5E5E5"> and your GPU will help</font>

122
00:04:59,789 --> 00:05:02,400
<font color="#E5E5E5">rejecting those triangles</font><font color="#CCCCCC"> onto your</font>

123
00:05:01,620 --> 00:05:04,020
screen

124
00:05:02,400 --> 00:05:05,549
essentially they have a bunch of

125
00:05:04,020 --> 00:05:07,380
<font color="#CCCCCC">fixed-function hardware to help with</font>

126
00:05:05,550 --> 00:05:09,389
that<font color="#CCCCCC"> fixed function hardware is</font>

127
00:05:07,380 --> 00:05:11,310
basically you know a<font color="#E5E5E5"> chip that is</font>

128
00:05:09,389 --> 00:05:13,409
designed to do<font color="#CCCCCC"> a</font><font color="#E5E5E5"> specific thing so it's</font>

129
00:05:11,310 --> 00:05:15,870
very good at that<font color="#CCCCCC"> for things like</font>

130
00:05:13,409 --> 00:05:17,759
blending<font color="#E5E5E5"> which is basically what you</font>

131
00:05:15,870 --> 00:05:19,860
know<font color="#E5E5E5"> blending a transparent</font><font color="#CCCCCC"> pixels</font><font color="#E5E5E5"> or</font>

132
00:05:17,759 --> 00:05:21,840
something else<font color="#E5E5E5"> texture sampling which is</font>

133
00:05:19,860 --> 00:05:23,460
interpolated<font color="#E5E5E5"> when you're reading from an</font>

134
00:05:21,840 --> 00:05:25,679
image you know when you want to<font color="#E5E5E5"> size it</font>

135
00:05:23,460 --> 00:05:27,120
<font color="#E5E5E5">upside down etc and triangle</font>

136
00:05:25,680 --> 00:05:28,380
rasterization<font color="#CCCCCC"> because</font><font color="#E5E5E5"> that's their</font>

137
00:05:27,120 --> 00:05:30,150
business<font color="#E5E5E5"> right</font>

138
00:05:28,380 --> 00:05:32,310
aside from this they also have

139
00:05:30,150 --> 00:05:34,289
programmable shaders<font color="#E5E5E5"> courts now on</font>

140
00:05:32,310 --> 00:05:37,289
modern GPUs these are just general

141
00:05:34,289 --> 00:05:39,389
<font color="#E5E5E5">floating-point computation units and</font>

142
00:05:37,289 --> 00:05:41,280
they are used<font color="#E5E5E5"> in several steps vertex</font>

143
00:05:39,389 --> 00:05:43,139
shaders pixel shaders geometry shaders

144
00:05:41,280 --> 00:05:44,789
<font color="#CCCCCC">hall shaders</font><font color="#E5E5E5"> domain shaders those are</font>

145
00:05:43,139 --> 00:05:46,740
the<font color="#E5E5E5"> the common ones that you see</font><font color="#CCCCCC"> a</font>

146
00:05:44,789 --> 00:05:48,659
modern graphics<font color="#CCCCCC"> api's</font><font color="#E5E5E5"> the pixel shader</font>

147
00:05:46,740 --> 00:05:52,560
for<font color="#CCCCCC"> OpenGL people we call the fragment</font>

148
00:05:48,659 --> 00:05:54,690
shader<font color="#E5E5E5"> now these shader cores we can</font>

149
00:05:52,560 --> 00:05:58,020
really let them do anything as long as

150
00:05:54,690 --> 00:06:00,990
<font color="#E5E5E5">it's basically</font><font color="#CCCCCC"> for component math so</font>

151
00:05:58,020 --> 00:06:03,000
these are the<font color="#CCCCCC"> strength right there</font>

152
00:06:00,990 --> 00:06:04,319
<font color="#E5E5E5">really good at drawing triangles</font><font color="#CCCCCC"> when</font>

153
00:06:03,000 --> 00:06:05,940
you have discrete GPU they have an

154
00:06:04,319 --> 00:06:08,789
immense memory bandwidth much bigger

155
00:06:05,940 --> 00:06:10,770
than your<font color="#E5E5E5"> CPU does</font><font color="#CCCCCC"> they are</font><font color="#E5E5E5"> very good at</font>

156
00:06:08,789 --> 00:06:12,599
parallel computation because these

157
00:06:10,770 --> 00:06:14,520
course by themselves are not that great

158
00:06:12,599 --> 00:06:16,680
but<font color="#E5E5E5"> you've got a thousand of them all</font>

159
00:06:14,520 --> 00:06:18,690
running in parallel<font color="#E5E5E5"> every cycle</font><font color="#CCCCCC"> every</font>

160
00:06:16,680 --> 00:06:21,960
<font color="#CCCCCC">one knows thousand course for example</font>

161
00:06:18,690 --> 00:06:24,330
<font color="#E5E5E5">can do a bunch of computations and</font><font color="#CCCCCC"> there</font>

162
00:06:21,960 --> 00:06:25,318
<font color="#E5E5E5">as</font><font color="#CCCCCC"> I said very good at</font><font color="#E5E5E5"> four component</font>

163
00:06:24,330 --> 00:06:26,880
vector operations

164
00:06:25,319 --> 00:06:28,469
now why would they be very good<font color="#CCCCCC"> at four</font>

165
00:06:26,880 --> 00:06:30,300
component vector operations

166
00:06:28,469 --> 00:06:32,219
well it turns out everything they work

167
00:06:30,300 --> 00:06:34,080
with<font color="#E5E5E5"> is more component vectors</font>

168
00:06:32,219 --> 00:06:35,849
now<font color="#E5E5E5"> that is pretty obvious when we're</font>

169
00:06:34,080 --> 00:06:37,260
talking pixel manipulation if you think

170
00:06:35,849 --> 00:06:37,780
<font color="#CCCCCC">of the red</font><font color="#E5E5E5"> channel the green channel the</font>

171
00:06:37,260 --> 00:06:39,370
<font color="#E5E5E5">blue chair</font>

172
00:06:37,780 --> 00:06:42,219
and the<font color="#CCCCCC"> alpha channel</font><font color="#E5E5E5"> which is the</font>

173
00:06:39,370 --> 00:06:45,340
transparency<font color="#CCCCCC"> you can see how i</font><font color="#E5E5E5"> noted</font>

174
00:06:42,220 --> 00:06:47,889
down a simple blending formula<font color="#CCCCCC"> 44</font><font color="#E5E5E5"> using</font>

175
00:06:45,340 --> 00:06:49,719
the<font color="#CCCCCC"> port</font><font color="#E5E5E5"> reported of operator</font><font color="#CCCCCC"> over for</font>

176
00:06:47,889 --> 00:06:51,310
blending and<font color="#CCCCCC"> destination source</font><font color="#E5E5E5"> pics on</font>

177
00:06:49,720 --> 00:06:54,040
to a destination

178
00:06:51,310 --> 00:06:56,830
<font color="#CCCCCC">I'm that's all for component vector math</font>

179
00:06:54,040 --> 00:06:59,919
right<font color="#E5E5E5"> but next to that we also have</font>

180
00:06:56,830 --> 00:07:02,289
vectors themselves so points in 3d space

181
00:06:59,919 --> 00:07:04,180
triangles<font color="#CCCCCC"> now one might say well we have</font>

182
00:07:02,290 --> 00:07:05,050
<font color="#CCCCCC">x YC</font><font color="#E5E5E5"> right so we only have three</font>

183
00:07:04,180 --> 00:07:07,000
components

184
00:07:05,050 --> 00:07:08,950
what's the what's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> why would be four</font>

185
00:07:07,000 --> 00:07:10,840
components well turns out we add a

186
00:07:08,950 --> 00:07:13,240
little<font color="#CCCCCC"> one to these factors</font><font color="#E5E5E5"> and that</font>

187
00:07:10,840 --> 00:07:14,950
<font color="#E5E5E5">means that when we can make a bigger</font><font color="#CCCCCC"> we</font>

188
00:07:13,240 --> 00:07:17,290
can make a bigger transformation matrix

189
00:07:14,950 --> 00:07:19,570
and we can have an affine transform

190
00:07:17,290 --> 00:07:22,419
which actually<font color="#E5E5E5"> the last column also has</font>

191
00:07:19,570 --> 00:07:25,240
a translation<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can not only rotate</font>

192
00:07:22,419 --> 00:07:26,440
vectors about<font color="#E5E5E5"> we can also move them on</font>

193
00:07:25,240 --> 00:07:29,530
the plane because<font color="#E5E5E5"> we're actually talking</font>

194
00:07:26,440 --> 00:07:31,510
points and not vectors<font color="#E5E5E5"> so this do you</font>

195
00:07:29,530 --> 00:07:33,549
know this<font color="#E5E5E5"> this matrix manipulation</font><font color="#CCCCCC"> years</font>

196
00:07:31,510 --> 00:07:37,120
<font color="#E5E5E5">a multiplication you're seeing here is</font>

197
00:07:33,550 --> 00:07:39,850
basically<font color="#CCCCCC"> for dot products right of</font><font color="#E5E5E5"> a 24</font>

198
00:07:37,120 --> 00:07:41,620
component vectors<font color="#E5E5E5"> so this is basically</font>

199
00:07:39,850 --> 00:07:44,530
all that they're doing and that's why

200
00:07:41,620 --> 00:07:46,090
they're really really good at it<font color="#CCCCCC"> so we</font>

201
00:07:44,530 --> 00:07:48,309
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to exploit that does</font><font color="#E5E5E5"> have a bunch</font>

202
00:07:46,090 --> 00:07:51,039
of weaknesses<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are very poor</font>

203
00:07:48,310 --> 00:07:53,260
branching performance like<font color="#E5E5E5"> until very</font>

204
00:07:51,040 --> 00:07:55,390
recently<font color="#E5E5E5"> you can write a shader and you</font>

205
00:07:53,260 --> 00:07:57,580
can have an if statement<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> oh</font>

206
00:07:55,390 --> 00:07:59,650
but<font color="#CCCCCC"> I always</font><font color="#E5E5E5"> hit this really simple path</font>

207
00:07:57,580 --> 00:08:01,270
in my if statement<font color="#E5E5E5"> problem is is</font><font color="#CCCCCC"> going</font>

208
00:07:59,650 --> 00:08:02,859
<font color="#CCCCCC">to run all the other paths as well</font>

209
00:08:01,270 --> 00:08:04,630
because<font color="#E5E5E5"> there's no branch prediction you</font>

210
00:08:02,860 --> 00:08:06,789
won't<font color="#E5E5E5"> you know so it's good just going</font>

211
00:08:04,630 --> 00:08:08,650
<font color="#E5E5E5">to</font><font color="#CCCCCC"> mask</font><font color="#E5E5E5"> the result at the end but it is</font>

212
00:08:06,789 --> 00:08:11,289
going to run<font color="#E5E5E5"> your</font><font color="#CCCCCC"> code so</font><font color="#E5E5E5"> your shader is</font>

213
00:08:08,650 --> 00:08:13,870
expensive as the very worst case that<font color="#E5E5E5"> it</font>

214
00:08:11,289 --> 00:08:15,849
can<font color="#CCCCCC"> write that's a problem that's a big</font>

215
00:08:13,870 --> 00:08:17,650
problem for a lot of things<font color="#E5E5E5"> they also</font>

216
00:08:15,850 --> 00:08:19,810
have<font color="#E5E5E5"> don't have great</font><font color="#CCCCCC"> cereal performance</font>

217
00:08:17,650 --> 00:08:20,830
as<font color="#CCCCCC"> I said individually these things</font>

218
00:08:19,810 --> 00:08:22,210
aren't that great

219
00:08:20,830 --> 00:08:24,640
there's just a thousand of them<font color="#CCCCCC"> that's</font>

220
00:08:22,210 --> 00:08:25,479
<font color="#CCCCCC">what a</font><font color="#E5E5E5"> great right another problem they</font>

221
00:08:24,640 --> 00:08:27,849
don't have<font color="#E5E5E5"> pre-emptive multitasking</font>

222
00:08:25,479 --> 00:08:31,539
<font color="#E5E5E5">which basically means once they go</font>

223
00:08:27,850 --> 00:08:33,159
<font color="#E5E5E5">they're going right and you know there's</font>

224
00:08:31,539 --> 00:08:34,689
no way to stop them except give a big

225
00:08:33,159 --> 00:08:36,610
reset command<font color="#E5E5E5"> to the whole thing and</font>

226
00:08:34,690 --> 00:08:38,650
then you have to set up everything again

227
00:08:36,610 --> 00:08:40,810
<font color="#CCCCCC">you know it's</font><font color="#E5E5E5"> not like you so you can</font>

228
00:08:38,650 --> 00:08:43,539
switch<font color="#E5E5E5"> context like we do want to</font><font color="#CCCCCC"> cpu</font>

229
00:08:40,809 --> 00:08:45,550
<font color="#E5E5E5">right there's people are working on that</font>

230
00:08:43,539 --> 00:08:46,990
it will happen in the future at the

231
00:08:45,550 --> 00:08:49,270
moment it's not there<font color="#E5E5E5"> though</font>

232
00:08:46,990 --> 00:08:51,220
so once you make a job that's too hard

233
00:08:49,270 --> 00:08:53,050
you're absolutely<font color="#CCCCCC"> we</font><font color="#E5E5E5"> really screwed</font>

234
00:08:51,220 --> 00:08:54,910
<font color="#E5E5E5">because the screen is gonna lock up</font>

235
00:08:53,050 --> 00:08:56,740
because<font color="#E5E5E5"> you can do nothing else</font><font color="#CCCCCC"> right so</font>

236
00:08:54,910 --> 00:09:00,250
it<font color="#CCCCCC"> can draw the person's UI or anything</font>

237
00:08:56,740 --> 00:09:02,290
like that<font color="#CCCCCC"> that's a disaster right then</font>

238
00:09:00,250 --> 00:09:04,300
the statement emulation is expensive

239
00:09:02,290 --> 00:09:06,730
we have to set all the<font color="#E5E5E5"> we basically have</font>

240
00:09:04,300 --> 00:09:08,680
to set the<font color="#CCCCCC"> program of these</font><font color="#E5E5E5"> cores right</font>

241
00:09:06,730 --> 00:09:10,600
<font color="#CCCCCC">and you have</font><font color="#E5E5E5"> to prepare everything for</font>

242
00:09:08,680 --> 00:09:12,609
this task that you're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> set out to</font>

243
00:09:10,600 --> 00:09:15,220
do and<font color="#E5E5E5"> then you're</font><font color="#CCCCCC"> going to fire it off</font>

244
00:09:12,610 --> 00:09:17,740
<font color="#E5E5E5">and</font><font color="#CCCCCC"> when you fire it off it goes into</font>

245
00:09:15,220 --> 00:09:19,870
the GPU pipeline now the<font color="#E5E5E5"> GPU pipeline is</font>

246
00:09:17,740 --> 00:09:21,910
going<font color="#E5E5E5"> to work but you've just it's a</font>

247
00:09:19,870 --> 00:09:24,370
fire-and-forget mechanism basically<font color="#CCCCCC"> so</font>

248
00:09:21,910 --> 00:09:26,740
if<font color="#CCCCCC"> i</font><font color="#E5E5E5"> want the result back from that</font><font color="#CCCCCC"> I'm</font>

249
00:09:24,370 --> 00:09:28,180
gonna<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> as if</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> right</font>

250
00:09:26,740 --> 00:09:30,430
<font color="#E5E5E5">I'm going to say</font><font color="#CCCCCC"> ok now i'm just gonna</font>

251
00:09:28,180 --> 00:09:32,079
<font color="#CCCCCC">have to wait</font><font color="#E5E5E5"> till the</font><font color="#CCCCCC"> GPUs done and i'll</font>

252
00:09:30,430 --> 00:09:34,719
have<font color="#E5E5E5"> to stall in order to get data back</font>

253
00:09:32,079 --> 00:09:36,790
out of it<font color="#CCCCCC"> so reading back from these</font>

254
00:09:34,720 --> 00:09:38,500
devices is very expensive as well

255
00:09:36,790 --> 00:09:41,170
basically we need to make sure that

256
00:09:38,500 --> 00:09:43,990
everything we do<font color="#CCCCCC"> goes to the</font><font color="#E5E5E5"> screen not</font>

257
00:09:41,170 --> 00:09:47,079
<font color="#E5E5E5">back to us we we</font><font color="#CCCCCC"> can get it back or we</font>

258
00:09:43,990 --> 00:09:49,329
<font color="#CCCCCC">can</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's it's infeasible right so</font>

259
00:09:47,079 --> 00:09:52,269
that produces a number of challenges

260
00:09:49,329 --> 00:09:54,430
when using gpus for 2d rendering<font color="#CCCCCC"> well</font>

261
00:09:52,269 --> 00:09:56,139
something<font color="#CCCCCC"> i haven't mentioned yet but i</font>

262
00:09:54,430 --> 00:09:58,388
will later on a little bit<font color="#E5E5E5"> is that</font>

263
00:09:56,139 --> 00:10:00,550
<font color="#CCCCCC">high-quality</font><font color="#E5E5E5"> anti-aliasing for us in 2d</font>

264
00:09:58,389 --> 00:10:02,500
graphics<font color="#E5E5E5"> is really really important</font><font color="#CCCCCC"> in</font>

265
00:10:00,550 --> 00:10:03,969
video games which are very dynamic<font color="#CCCCCC"> and</font>

266
00:10:02,500 --> 00:10:05,949
<font color="#E5E5E5">you really have static</font><font color="#CCCCCC"> constant rate</font>

267
00:10:03,970 --> 00:10:07,449
you're<font color="#E5E5E5"> moving around things like that if</font>

268
00:10:05,949 --> 00:10:09,160
<font color="#CCCCCC">you're ngle things a little</font><font color="#E5E5E5"> bit lower</font>

269
00:10:07,449 --> 00:10:10,449
quality you know it's still pretty good

270
00:10:09,160 --> 00:10:12,969
<font color="#E5E5E5">lot of people play games without</font>

271
00:10:10,449 --> 00:10:14,170
<font color="#E5E5E5">anti-aliasing at all for 2d graphics</font>

272
00:10:12,970 --> 00:10:15,670
that's not an option at all

273
00:10:14,170 --> 00:10:16,870
everybody noticed those<font color="#CCCCCC"> jaggies when</font>

274
00:10:15,670 --> 00:10:19,300
they're just standing still in your

275
00:10:16,870 --> 00:10:21,129
screen and it's going<font color="#E5E5E5"> to be disaster</font><font color="#CCCCCC"> so</font>

276
00:10:19,300 --> 00:10:23,500
we need to find ways to do<font color="#CCCCCC"> high quality</font>

277
00:10:21,129 --> 00:10:26,439
<font color="#E5E5E5">anti-aliasing either with the GPU which</font>

278
00:10:23,500 --> 00:10:28,959
really only high-end<font color="#CCCCCC"> GPUs</font><font color="#E5E5E5"> are able to do</font>

279
00:10:26,439 --> 00:10:31,990
well or we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to do it with</font>

280
00:10:28,959 --> 00:10:32,979
the<font color="#CCCCCC"> cpu ah in</font><font color="#E5E5E5"> different ways that we'll</font>

281
00:10:31,990 --> 00:10:35,050
talk about in a minute

282
00:10:32,980 --> 00:10:36,819
now the other<font color="#CCCCCC"> thing they're bad are at</font>

283
00:10:35,050 --> 00:10:39,519
<font color="#CCCCCC">our frequent interactive sheep scene</font>

284
00:10:36,819 --> 00:10:41,769
<font color="#E5E5E5">changes when</font><font color="#CCCCCC"> I go</font><font color="#E5E5E5"> into a room in a game</font>

285
00:10:39,519 --> 00:10:43,809
when i switch areas etc people<font color="#E5E5E5"> are</font>

286
00:10:41,769 --> 00:10:46,269
perfectly used to a loading screen and

287
00:10:43,809 --> 00:10:48,040
that's<font color="#CCCCCC"> okay right and you gotta upload</font>

288
00:10:46,269 --> 00:10:49,449
<font color="#E5E5E5">all the new dated you know the new</font>

289
00:10:48,040 --> 00:10:50,860
texture of the wall<font color="#E5E5E5"> there's the</font>

290
00:10:49,449 --> 00:10:52,269
structure of the room the structure of

291
00:10:50,860 --> 00:10:55,120
the characters that you find all those

292
00:10:52,269 --> 00:10:56,680
things<font color="#CCCCCC"> and</font><font color="#E5E5E5"> but you can take your loading</font>

293
00:10:55,120 --> 00:10:59,259
screen you can do<font color="#E5E5E5"> some you know you can</font>

294
00:10:56,680 --> 00:11:00,729
take your time<font color="#CCCCCC"> if i switch tabs and you</font>

295
00:10:59,259 --> 00:11:02,470
know everything changes the texture

296
00:11:00,730 --> 00:11:04,180
changes the<font color="#E5E5E5"> images changes the</font><font color="#CCCCCC"> shapes</font>

297
00:11:02,470 --> 00:11:05,529
change<font color="#CCCCCC"> people</font>

298
00:11:04,180 --> 00:11:07,000
<font color="#CCCCCC">going to be very happy if they see a</font>

299
00:11:05,529 --> 00:11:10,000
loading screen<font color="#E5E5E5"> every time this</font><font color="#CCCCCC"> witcha</font>

300
00:11:07,000 --> 00:11:12,580
tab right<font color="#CCCCCC"> so so this model isn't that</font>

301
00:11:10,000 --> 00:11:15,700
great<font color="#E5E5E5"> for</font><font color="#CCCCCC"> for desktop applications</font><font color="#E5E5E5"> it's</font>

302
00:11:12,580 --> 00:11:17,260
a problem you have to solve<font color="#CCCCCC"> now</font><font color="#E5E5E5"> another</font>

303
00:11:15,700 --> 00:11:19,720
<font color="#CCCCCC">problem is that these things are made to</font>

304
00:11:17,260 --> 00:11:21,850
draw triangles that the way we describe

305
00:11:19,720 --> 00:11:24,820
<font color="#CCCCCC">shapes in 2d graphics which is usually</font>

306
00:11:21,850 --> 00:11:26,920
through lines and<font color="#CCCCCC"> bezier curves that's</font>

307
00:11:24,820 --> 00:11:28,660
not<font color="#E5E5E5"> triangle so you know we have to find</font>

308
00:11:26,920 --> 00:11:29,380
a way to get this triangle drawing thing

309
00:11:28,660 --> 00:11:32,199
to work

310
00:11:29,380 --> 00:11:34,450
<font color="#E5E5E5">also these things are used to having a</font>

311
00:11:32,200 --> 00:11:36,880
model<font color="#E5E5E5"> your position things in space and</font>

312
00:11:34,450 --> 00:11:38,830
you send it out to render in 2d drawing

313
00:11:36,880 --> 00:11:40,540
most<font color="#CCCCCC"> api's</font><font color="#E5E5E5"> at the moment still work as</font>

314
00:11:38,830 --> 00:11:43,240
an imperative<font color="#E5E5E5"> drawing command stream</font>

315
00:11:40,540 --> 00:11:44,740
which doesn't match very well it's hard

316
00:11:43,240 --> 00:11:46,149
to match them and you want to match

317
00:11:44,740 --> 00:11:47,860
because<font color="#CCCCCC"> as I</font><font color="#E5E5E5"> said state changes are</font>

318
00:11:46,149 --> 00:11:50,500
expensive so we need to do as much you

319
00:11:47,860 --> 00:11:51,430
can<font color="#E5E5E5"> in a single</font><font color="#CCCCCC"> drakul this is a hard</font>

320
00:11:50,500 --> 00:11:53,980
problem as well

321
00:11:51,430 --> 00:11:55,599
finally there's<font color="#E5E5E5"> text</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> I'm</font>

322
00:11:53,980 --> 00:11:57,610
<font color="#E5E5E5">already running late with my</font>

323
00:11:55,600 --> 00:11:59,500
presentation<font color="#CCCCCC"> I wasn't</font><font color="#E5E5E5"> going to talk</font>

324
00:11:57,610 --> 00:12:01,630
about that<font color="#E5E5E5"> if it's never gonna make it</font>

325
00:11:59,500 --> 00:12:03,010
in but it's a very complex problem<font color="#CCCCCC"> you</font>

326
00:12:01,630 --> 00:12:05,170
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> learn more about it than happy</font>

327
00:12:03,010 --> 00:12:09,160
to talk about to<font color="#E5E5E5"> you about it afterwards</font>

328
00:12:05,170 --> 00:12:11,229
<font color="#E5E5E5">right so I</font><font color="#CCCCCC"> promise to summarize the GPU</font>

329
00:12:09,160 --> 00:12:12,760
pipeline<font color="#CCCCCC"> I'm taking the</font><font color="#E5E5E5"> two most basic</font>

330
00:12:11,230 --> 00:12:14,860
shader types<font color="#CCCCCC"> of vertex shaders in</font><font color="#E5E5E5"> the</font>

331
00:12:12,760 --> 00:12:16,089
pixel fragment shaders here<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> taken</font>

332
00:12:14,860 --> 00:12:17,740
out all the other ones because that

333
00:12:16,089 --> 00:12:19,839
would complicate things needlessly

334
00:12:17,740 --> 00:12:21,400
<font color="#E5E5E5">basically the first stage in the GPU</font>

335
00:12:19,839 --> 00:12:23,709
<font color="#E5E5E5">pipeline is the input assembler</font><font color="#CCCCCC"> it's</font>

336
00:12:21,400 --> 00:12:25,240
where all the<font color="#CCCCCC"> vertexes go in the index</font>

337
00:12:23,709 --> 00:12:26,979
buffers<font color="#E5E5E5"> going</font><font color="#CCCCCC"> the instance buffer goes</font>

338
00:12:25,240 --> 00:12:29,080
and you basically<font color="#CCCCCC"> get</font><font color="#E5E5E5"> the GPU all the</font>

339
00:12:26,980 --> 00:12:31,360
data it needs to<font color="#CCCCCC"> draw your scene</font><font color="#E5E5E5"> right</font>

340
00:12:29,080 --> 00:12:33,760
<font color="#E5E5E5">then you get the vertex shader that's a</font>

341
00:12:31,360 --> 00:12:36,400
stage in which to GPU<font color="#CCCCCC"> Willman it will do</font>

342
00:12:33,760 --> 00:12:39,459
these for these GPU course<font color="#CCCCCC"> we'll go to</font>

343
00:12:36,400 --> 00:12:42,670
work on your shaders<font color="#E5E5E5"> on your vertex</font><font color="#CCCCCC"> vs</font>

344
00:12:39,459 --> 00:12:44,650
<font color="#E5E5E5">now these vertices will then be for</font>

345
00:12:42,670 --> 00:12:47,319
example<font color="#CCCCCC"> transform</font><font color="#E5E5E5"> you know moved around</font>

346
00:12:44,650 --> 00:12:50,140
etc etc<font color="#E5E5E5"> and after that they will reach</font>

347
00:12:47,320 --> 00:12:51,970
the rasterizer<font color="#E5E5E5"> now the rasterizer gets</font>

348
00:12:50,140 --> 00:12:54,130
these<font color="#E5E5E5"> well after their</font><font color="#CCCCCC"> turn into</font>

349
00:12:51,970 --> 00:12:56,110
triangles<font color="#CCCCCC"> the rasterizer will try to</font>

350
00:12:54,130 --> 00:12:57,910
rasterize these triangles<font color="#CCCCCC"> but for each</font>

351
00:12:56,110 --> 00:12:59,560
pixel<font color="#E5E5E5"> it will do a couple of</font><font color="#CCCCCC"> deaths will</font>

352
00:12:57,910 --> 00:13:01,209
do a depth buffer<font color="#E5E5E5"> test</font><font color="#CCCCCC"> it will do a</font>

353
00:12:59,560 --> 00:13:03,579
stencil buffer<font color="#E5E5E5"> test if you want it will</font>

354
00:13:01,209 --> 00:13:05,020
do the<font color="#E5E5E5"> scissor test</font><font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to test</font>

355
00:13:03,579 --> 00:13:07,270
which are really cheap<font color="#CCCCCC"> this</font><font color="#E5E5E5"> point you're</font>

356
00:13:05,020 --> 00:13:09,850
not paying a price for pixel<font color="#E5E5E5"> now if it</font>

357
00:13:07,270 --> 00:13:11,589
passes all those<font color="#CCCCCC"> tests then the pixel</font>

358
00:13:09,850 --> 00:13:13,630
gets<font color="#E5E5E5"> filled</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> start paying for that</font>

359
00:13:11,589 --> 00:13:15,610
pixel that pixel<font color="#CCCCCC"> will go into</font><font color="#E5E5E5"> the pixel</font>

360
00:13:13,630 --> 00:13:17,779
shader<font color="#E5E5E5"> the pixel shader has an</font>

361
00:13:15,610 --> 00:13:19,850
opportunity to manipulate

362
00:13:17,779 --> 00:13:22,249
wait to take the interpolated<font color="#E5E5E5"> data from</font>

363
00:13:19,850 --> 00:13:25,129
those<font color="#CCCCCC"> verses from those triangles and to</font>

364
00:13:22,249 --> 00:13:28,579
change them into the desired output

365
00:13:25,129 --> 00:13:30,560
pixel<font color="#CCCCCC"> so it won't put one or more pixels</font>

366
00:13:28,579 --> 00:13:32,449
which have a color<font color="#E5E5E5"> and you know</font><font color="#CCCCCC"> the</font>

367
00:13:30,560 --> 00:13:34,160
transparency and things like that which

368
00:13:32,449 --> 00:13:36,800
will go to the output merger and the

369
00:13:34,160 --> 00:13:38,779
output merger<font color="#E5E5E5"> actually has readwrite</font>

370
00:13:36,800 --> 00:13:41,240
access to your destination<font color="#CCCCCC"> directly and</font>

371
00:13:38,779 --> 00:13:43,490
it will merge your pixel on to the final

372
00:13:41,240 --> 00:13:45,649
destination surface which will bring it

373
00:13:43,490 --> 00:13:49,730
on<font color="#E5E5E5"> your</font><font color="#CCCCCC"> onto a procedural texture are</font>

374
00:13:45,649 --> 00:13:51,470
<font color="#E5E5E5">brought to your screen right so that's</font>

375
00:13:49,730 --> 00:13:52,850
what the pipeline looks like<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I'm</font>

376
00:13:51,470 --> 00:13:55,040
<font color="#E5E5E5">going to talk about the different ways</font>

377
00:13:52,850 --> 00:13:57,499
that we can use the pipeline to do 2d

378
00:13:55,040 --> 00:13:59,360
drawing<font color="#E5E5E5"> there's a couple of basic</font>

379
00:13:57,499 --> 00:14:02,629
approaches and and these are really the

380
00:13:59,360 --> 00:14:04,730
fundamentals of what you can do or what

381
00:14:02,629 --> 00:14:06,620
we what we commonly is done

382
00:14:04,730 --> 00:14:09,470
the first one is convert your 2d shape

383
00:14:06,620 --> 00:14:11,420
<font color="#E5E5E5">two triangles right</font><font color="#CCCCCC"> i can make a curb</font><font color="#E5E5E5"> if</font>

384
00:14:09,470 --> 00:14:13,189
<font color="#CCCCCC">I make the</font><font color="#E5E5E5"> triangle small enough</font><font color="#CCCCCC"> i can</font>

385
00:14:11,420 --> 00:14:15,410
describe<font color="#E5E5E5"> the curve in triangles right</font>

386
00:14:13,189 --> 00:14:17,180
<font color="#CCCCCC">have to be tiny triangles to get</font><font color="#E5E5E5"> quote</font>

387
00:14:15,410 --> 00:14:20,209
good<font color="#CCCCCC"> fully but it can be done and it's a</font>

388
00:14:17,180 --> 00:14:22,219
process called<font color="#E5E5E5"> tessellation now there's</font>

389
00:14:20,209 --> 00:14:23,989
also rasterizing on the<font color="#E5E5E5"> cpu and then</font>

390
00:14:22,220 --> 00:14:25,730
just doing your composition on the<font color="#E5E5E5"> GPU</font>

391
00:14:23,990 --> 00:14:27,110
basically making use of that great<font color="#E5E5E5"> for</font>

392
00:14:25,730 --> 00:14:29,329
component vector math to do<font color="#E5E5E5"> your</font>

393
00:14:27,110 --> 00:14:31,370
sampling and<font color="#CCCCCC"> you're blending</font><font color="#E5E5E5"> then</font>

394
00:14:29,329 --> 00:14:32,750
there's<font color="#CCCCCC"> 2d coverage</font><font color="#E5E5E5"> computation shaders</font>

395
00:14:31,370 --> 00:14:34,639
<font color="#E5E5E5">which is basically using your shader</font>

396
00:14:32,750 --> 00:14:37,490
<font color="#CCCCCC">course to do geometrical calculations</font>

397
00:14:34,639 --> 00:14:38,899
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about that and then there's direct</font>

398
00:14:37,490 --> 00:14:40,910
<font color="#E5E5E5">hardware implementations which is</font>

399
00:14:38,899 --> 00:14:42,740
basically something like open<font color="#E5E5E5"> Fiji or</font>

400
00:14:40,910 --> 00:14:44,959
videos<font color="#E5E5E5"> path rendering extension in</font>

401
00:14:42,740 --> 00:14:47,240
<font color="#CCCCCC">OpenGL</font><font color="#E5E5E5"> which basically allow you to give</font>

402
00:14:44,959 --> 00:14:49,008
your<font color="#CCCCCC"> to the geometries</font><font color="#E5E5E5"> to something that</font>

403
00:14:47,240 --> 00:14:52,639
is magically implemented<font color="#CCCCCC"> by the hardware</font>

404
00:14:49,009 --> 00:14:56,059
<font color="#CCCCCC">first tessellation I have some examples</font>

405
00:14:52,639 --> 00:14:58,189
here of how the figures are<font color="#E5E5E5"> tessellated</font>

406
00:14:56,059 --> 00:15:00,050
<font color="#E5E5E5">now the top figure which consists of</font>

407
00:14:58,189 --> 00:15:01,969
only lines<font color="#CCCCCC"> you could probably already</font>

408
00:15:00,050 --> 00:15:03,829
see kind of how<font color="#E5E5E5"> I could change that into</font>

409
00:15:01,970 --> 00:15:06,889
triangles<font color="#E5E5E5"> and as you can see can be</font>

410
00:15:03,829 --> 00:15:09,589
<font color="#E5E5E5">trivially it can be trivially made into</font>

411
00:15:06,889 --> 00:15:12,920
being<font color="#E5E5E5"> into having these four triangles</font>

412
00:15:09,589 --> 00:15:14,329
over here<font color="#E5E5E5"> now the other shape his</font><font color="#CCCCCC"> occur</font>

413
00:15:12,920 --> 00:15:16,279
<font color="#CCCCCC">from one side and then lines</font><font color="#E5E5E5"> on the</font>

414
00:15:14,329 --> 00:15:17,929
other<font color="#CCCCCC"> which means that you can take the</font>

415
00:15:16,279 --> 00:15:19,939
inside and you can make that into a

416
00:15:17,929 --> 00:15:21,230
triangle pretty good right

417
00:15:19,939 --> 00:15:23,509
but then you have the<font color="#CCCCCC"> outsides and</font>

418
00:15:21,230 --> 00:15:25,220
you're<font color="#E5E5E5"> gonna need</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually to</font>

419
00:15:23,509 --> 00:15:26,839
actually do the curve itself<font color="#E5E5E5"> and you</font>

420
00:15:25,220 --> 00:15:29,449
need lots of triangles there

421
00:15:26,839 --> 00:15:30,769
this is a very much an inflated one you

422
00:15:29,449 --> 00:15:31,550
know if you actually<font color="#E5E5E5"> wanted to</font><font color="#CCCCCC"> drop this</font>

423
00:15:30,769 --> 00:15:32,959
<font color="#E5E5E5">size the amount</font>

424
00:15:31,550 --> 00:15:34,099
<font color="#E5E5E5">finals would be much much bigger but</font>

425
00:15:32,959 --> 00:15:35,660
obviously you wouldn't be able to see

426
00:15:34,100 --> 00:15:37,700
him<font color="#CCCCCC"> so there wouldn't be much of a point</font>

427
00:15:35,660 --> 00:15:40,550
<font color="#CCCCCC">shown in the slide</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then if you get</font>

428
00:15:37,700 --> 00:15:42,649
<font color="#E5E5E5">two curves</font><font color="#CCCCCC"> it needs</font><font color="#E5E5E5"> more complex shape</font>

429
00:15:40,550 --> 00:15:44,540
you can see that the triangles get more

430
00:15:42,649 --> 00:15:46,279
and more complicated and you get loads

431
00:15:44,540 --> 00:15:48,860
and loads and loads of them to get

432
00:15:46,279 --> 00:15:50,029
sufficient quality right<font color="#E5E5E5"> so it has a</font>

433
00:15:48,860 --> 00:15:51,829
couple of<font color="#E5E5E5"> pros</font>

434
00:15:50,029 --> 00:15:54,140
first of all<font color="#E5E5E5"> there's no</font><font color="#CCCCCC"> overfill within</font>

435
00:15:51,829 --> 00:15:56,719
<font color="#CCCCCC">a shape which basically means</font><font color="#E5E5E5"> you know</font>

436
00:15:54,140 --> 00:15:58,910
<font color="#E5E5E5">your triangles are covering the pixels</font>

437
00:15:56,720 --> 00:16:00,200
that you actually want to fill<font color="#E5E5E5"> your not</font>

438
00:15:58,910 --> 00:16:01,850
running your pixel shaders for any

439
00:16:00,200 --> 00:16:04,010
pixels that you're not actually going to

440
00:16:01,850 --> 00:16:05,630
<font color="#CCCCCC">fill in the end</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> you're using the</font>

441
00:16:04,010 --> 00:16:07,130
<font color="#E5E5E5">GPU is intended it was made to render</font>

442
00:16:05,630 --> 00:16:09,410
<font color="#CCCCCC">rasterize triangles when you have these</font>

443
00:16:07,130 --> 00:16:11,930
triangles<font color="#E5E5E5"> you know you're doing what it</font>

444
00:16:09,410 --> 00:16:13,699
wants you<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> the shaders that</font><font color="#E5E5E5"> you're</font>

445
00:16:11,930 --> 00:16:15,229
using a very simple<font color="#CCCCCC"> they can simply</font>

446
00:16:13,700 --> 00:16:17,269
sample for a<font color="#CCCCCC"> textured they can sample</font>

447
00:16:15,230 --> 00:16:19,940
the gradient they<font color="#E5E5E5"> can</font><font color="#CCCCCC"> put a color you</font>

448
00:16:17,269 --> 00:16:21,829
name it<font color="#CCCCCC"> it's very easy you can do</font>

449
00:16:19,940 --> 00:16:24,230
anti-aliasing<font color="#CCCCCC"> using multisample</font>

450
00:16:21,829 --> 00:16:26,029
anti-aliasing<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and</font>

451
00:16:24,230 --> 00:16:28,250
<font color="#E5E5E5">multisample and aliasing is the standard</font>

452
00:16:26,029 --> 00:16:29,779
method that most games use as<font color="#CCCCCC"> I said</font>

453
00:16:28,250 --> 00:16:33,110
<font color="#E5E5E5">works a lot better on high-end hardware</font>

454
00:16:29,779 --> 00:16:35,209
<font color="#CCCCCC">than on it</font><font color="#E5E5E5"> under low and harder now the</font>

455
00:16:33,110 --> 00:16:38,300
downsides are the tessellation is hard

456
00:16:35,209 --> 00:16:40,910
and it's generally the very best

457
00:16:38,300 --> 00:16:42,290
algorithms are<font color="#E5E5E5"> our big</font><font color="#CCCCCC"> o n log n plus K</font>

458
00:16:40,910 --> 00:16:44,719
<font color="#E5E5E5">where</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> the amount of self</font>

459
00:16:42,290 --> 00:16:46,730
intersections that something has an<font color="#E5E5E5"> end</font>

460
00:16:44,720 --> 00:16:51,320
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the amount</font><font color="#CCCCCC"> of line seconds</font><font color="#E5E5E5"> that your</font>

461
00:16:46,730 --> 00:16:54,020
<font color="#E5E5E5">shape</font><font color="#CCCCCC"> subdivided into this is all cpu</font>

462
00:16:51,320 --> 00:16:55,730
work<font color="#CCCCCC"> so</font><font color="#E5E5E5"> really although you're losing</font>

463
00:16:54,020 --> 00:16:57,470
much<font color="#CCCCCC"> the cpu work in the blending and</font>

464
00:16:55,730 --> 00:16:59,630
the rasterizing in the drawing<font color="#CCCCCC"> you're</font>

465
00:16:57,470 --> 00:17:01,100
adding a bunch of<font color="#CCCCCC"> cpu work in generating</font>

466
00:16:59,630 --> 00:17:02,540
your shape which means if your shape is

467
00:17:01,100 --> 00:17:05,000
very complex you might actually be

468
00:17:02,540 --> 00:17:06,199
spending more<font color="#CCCCCC"> cpu work</font><font color="#E5E5E5"> doing this then</font>

469
00:17:05,000 --> 00:17:07,849
you would have been the first place if

470
00:17:06,199 --> 00:17:10,400
you would have just you know<font color="#CCCCCC"> done the</font>

471
00:17:07,849 --> 00:17:12,079
rasterization on the<font color="#E5E5E5"> cpu also</font>

472
00:17:10,400 --> 00:17:13,880
<font color="#CCCCCC">anti-aliasing if you want really high</font>

473
00:17:12,079 --> 00:17:16,520
<font color="#CCCCCC">quality or your</font><font color="#E5E5E5"> hardware doesn't support</font>

474
00:17:13,880 --> 00:17:17,630
mms a<font color="#CCCCCC"> while</font><font color="#E5E5E5"> is a really hard problem you</font>

475
00:17:16,520 --> 00:17:19,490
have to make all these tiny little

476
00:17:17,630 --> 00:17:21,470
triangles for each pixel and you get a

477
00:17:19,490 --> 00:17:23,000
resolution<font color="#E5E5E5"> dependent mesh so you no</font>

478
00:17:21,470 --> 00:17:24,829
longer have a nice triangle of your

479
00:17:23,000 --> 00:17:26,630
shape<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have all these</font><font color="#CCCCCC"> silly</font><font color="#E5E5E5"> little</font>

480
00:17:24,829 --> 00:17:28,339
triangles that are just there is little

481
00:17:26,630 --> 00:17:30,710
tricks to make pixels look like<font color="#E5E5E5"> they're</font>

482
00:17:28,339 --> 00:17:32,330
antialiased<font color="#E5E5E5"> pop properly for some things</font>

483
00:17:30,710 --> 00:17:35,600
you can do<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the interpolators do</font>

484
00:17:32,330 --> 00:17:39,800
nice things but up in the end it's a

485
00:17:35,600 --> 00:17:41,899
very hard problem<font color="#E5E5E5"> now the next method</font>

486
00:17:39,800 --> 00:17:44,210
<font color="#CCCCCC">I'm going to</font><font color="#E5E5E5"> describe</font><font color="#CCCCCC"> as rasterizing on</font>

487
00:17:41,900 --> 00:17:46,730
the<font color="#E5E5E5"> cpu</font><font color="#CCCCCC"> this is pretty pretty</font>

488
00:17:44,210 --> 00:17:49,940
simple right you basically draw a white

489
00:17:46,730 --> 00:17:52,220
<font color="#E5E5E5">your shape in white into your stencil</font>

490
00:17:49,940 --> 00:17:55,010
buffer<font color="#CCCCCC"> right so your sensor</font><font color="#E5E5E5"> but for now</font>

491
00:17:52,220 --> 00:17:56,750
<font color="#E5E5E5">has ones for the pixels which followed</font>

492
00:17:55,010 --> 00:17:58,970
within your complex shape and zeros for

493
00:17:56,750 --> 00:18:01,220
the pixels<font color="#E5E5E5"> that don't then you upload</font>

494
00:17:58,970 --> 00:18:03,649
<font color="#E5E5E5">you know that master</font><font color="#CCCCCC"> your central buffer</font>

495
00:18:01,220 --> 00:18:06,080
if you haven't been able to render into

496
00:18:03,649 --> 00:18:08,299
it<font color="#CCCCCC"> to it directly and then you draw a</font>

497
00:18:06,080 --> 00:18:10,070
triangle<font color="#CCCCCC"> that</font><font color="#E5E5E5"> basically you know rapture</font>

498
00:18:08,299 --> 00:18:13,520
entire stencil buffer<font color="#E5E5E5"> your entire</font>

499
00:18:10,070 --> 00:18:15,678
stencil buffer and you let that you let

500
00:18:13,520 --> 00:18:18,080
that basically<font color="#CCCCCC"> let</font><font color="#E5E5E5"> the GPU do the</font><font color="#CCCCCC"> tests</font>

501
00:18:15,679 --> 00:18:20,570
on the<font color="#CCCCCC"> central buffer and then it fills</font>

502
00:18:18,080 --> 00:18:21,678
the pixels that you<font color="#E5E5E5"> want filled now the</font>

503
00:18:20,570 --> 00:18:23,178
good<font color="#E5E5E5"> thing about this approach is that</font>

504
00:18:21,679 --> 00:18:25,520
<font color="#E5E5E5">when you're using the stencil buffer</font>

505
00:18:23,179 --> 00:18:27,620
<font color="#CCCCCC">there is no</font><font color="#E5E5E5"> overfill because the</font>

506
00:18:25,520 --> 00:18:29,870
rasterizer<font color="#E5E5E5"> will very cheaply throw out</font>

507
00:18:27,620 --> 00:18:31,129
all the pixels that failed<font color="#CCCCCC"> the stencil</font>

508
00:18:29,870 --> 00:18:35,418
buffer<font color="#E5E5E5"> test</font>

509
00:18:31,130 --> 00:18:37,340
<font color="#CCCCCC">um</font><font color="#E5E5E5"> we can use conventional 2d is to draw</font>

510
00:18:35,419 --> 00:18:39,409
that<font color="#E5E5E5"> sense of buffer and you can use</font>

511
00:18:37,340 --> 00:18:43,580
fairly simple shaders<font color="#CCCCCC"> once you're done</font>

512
00:18:39,409 --> 00:18:44,929
<font color="#CCCCCC">now if you are doing a with you</font><font color="#E5E5E5"> if</font>

513
00:18:43,580 --> 00:18:46,939
you're using<font color="#CCCCCC"> sense of our first you can</font>

514
00:18:44,929 --> 00:18:48,679
do good<font color="#CCCCCC"> anti-aliasing with msaa if</font>

515
00:18:46,940 --> 00:18:50,929
you're using textures<font color="#E5E5E5"> where you</font>

516
00:18:48,679 --> 00:18:53,570
basically have the full range of 256

517
00:18:50,929 --> 00:18:56,419
levels of transparency<font color="#CCCCCC"> you can do good</font>

518
00:18:53,570 --> 00:18:58,908
<font color="#CCCCCC">AAA</font><font color="#E5E5E5"> with your 2d rendering</font><font color="#CCCCCC"> API and you</font>

519
00:18:56,419 --> 00:19:00,590
get really high quality<font color="#E5E5E5"> right</font><font color="#CCCCCC"> that the</font>

520
00:18:58,909 --> 00:19:01,940
concert that there's no<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> benefit</font>

521
00:19:00,590 --> 00:19:02,959
for generating your mask still a lot of

522
00:19:01,940 --> 00:19:04,460
<font color="#CCCCCC">cpu work there</font>

523
00:19:02,960 --> 00:19:05,750
the bandwidth<font color="#E5E5E5"> requirement is high</font>

524
00:19:04,460 --> 00:19:08,450
<font color="#E5E5E5">because you're uploading all these large</font>

525
00:19:05,750 --> 00:19:10,399
surfaces of your of your stencil buffers

526
00:19:08,450 --> 00:19:11,990
<font color="#CCCCCC">there's potential</font><font color="#E5E5E5"> overfill when you're</font>

527
00:19:10,399 --> 00:19:13,250
using textures<font color="#E5E5E5"> because then the pixels</font>

528
00:19:11,990 --> 00:19:14,960
<font color="#CCCCCC">won't</font><font color="#E5E5E5"> get thrown out the stencil buffer</font>

529
00:19:13,250 --> 00:19:16,640
<font color="#E5E5E5">but you'll need</font><font color="#CCCCCC"> to pixel shader to</font>

530
00:19:14,960 --> 00:19:18,620
figure out whether they have an output

531
00:19:16,640 --> 00:19:20,210
value and there's a high state change

532
00:19:18,620 --> 00:19:21,739
requirement<font color="#E5E5E5"> it's really hard to match if</font>

533
00:19:20,210 --> 00:19:25,940
you're using this approach<font color="#E5E5E5"> practically</font>

534
00:19:21,740 --> 00:19:28,130
impossible<font color="#CCCCCC"> now the</font><font color="#E5E5E5"> next one is</font><font color="#CCCCCC"> 2d kit 2d</font>

535
00:19:25,940 --> 00:19:30,080
coverage<font color="#CCCCCC"> competition shaders</font><font color="#E5E5E5"> this</font>

536
00:19:28,130 --> 00:19:32,270
approach was really made<font color="#CCCCCC"> well known by a</font>

537
00:19:30,080 --> 00:19:34,460
<font color="#E5E5E5">paper by microsoft research from</font><font color="#CCCCCC"> Charles</font>

538
00:19:32,270 --> 00:19:35,750
<font color="#CCCCCC">loop and James blend</font><font color="#E5E5E5"> for those of you</font>

539
00:19:34,460 --> 00:19:38,419
who are<font color="#CCCCCC"> graphics geeks</font><font color="#E5E5E5"> will probably</font>

540
00:19:35,750 --> 00:19:40,549
know who that are so it was called

541
00:19:38,419 --> 00:19:42,950
resolution independent<font color="#E5E5E5"> curve rendering</font>

542
00:19:40,549 --> 00:19:44,600
using programmable graphics hardware and

543
00:19:42,950 --> 00:19:47,179
what they do is they look at all these

544
00:19:44,600 --> 00:19:49,039
curves that we have here and then they

545
00:19:47,179 --> 00:19:52,190
make these triangles these<font color="#E5E5E5"> quarter</font>

546
00:19:49,039 --> 00:19:54,830
laterals<font color="#E5E5E5"> here that basically</font><font color="#CCCCCC"> wrap the</font>

547
00:19:52,190 --> 00:19:57,140
curve and then in the process<font color="#E5E5E5"> each pixel</font>

548
00:19:54,830 --> 00:19:59,600
that falls within quadrilateral

549
00:19:57,140 --> 00:20:02,510
and calculate on which side of the curve

550
00:19:59,600 --> 00:20:03,230
that will fall<font color="#CCCCCC"> per pixel so it paralyzes</font>

551
00:20:02,510 --> 00:20:04,879
really well

552
00:20:03,230 --> 00:20:06,380
the inside is<font color="#E5E5E5"> then filled with a simple</font>

553
00:20:04,880 --> 00:20:08,240
come with the simple bunch of triangles

554
00:20:06,380 --> 00:20:10,100
as simple as you can get them<font color="#CCCCCC"> and the</font>

555
00:20:08,240 --> 00:20:12,260
outside has very few triangles and it

556
00:20:10,100 --> 00:20:13,760
feels really nicely you get the shape

557
00:20:12,260 --> 00:20:17,210
over here<font color="#E5E5E5"> and there's been a lot of</font>

558
00:20:13,760 --> 00:20:20,090
interest in this approach<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a bunch of</font>

559
00:20:17,210 --> 00:20:21,950
<font color="#E5E5E5">pros the</font><font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> work is really minimal the</font>

560
00:20:20,090 --> 00:20:24,230
implementation is fairly simple<font color="#E5E5E5"> it</font>

561
00:20:21,950 --> 00:20:27,320
doesn't allow it doesn't require complex

562
00:20:24,230 --> 00:20:27,920
<font color="#E5E5E5">tessellation algorithms or anything like</font>

563
00:20:27,320 --> 00:20:29,419
that

564
00:20:27,920 --> 00:20:30,950
it paralyzes really well because<font color="#E5E5E5"> we're</font>

565
00:20:29,420 --> 00:20:32,870
doing all these pixels<font color="#E5E5E5"> you know we're</font>

566
00:20:30,950 --> 00:20:35,000
<font color="#CCCCCC">competing with other covered or not and</font>

567
00:20:32,870 --> 00:20:36,620
<font color="#E5E5E5">in in parallel for every pixel</font><font color="#CCCCCC"> the</font>

568
00:20:35,000 --> 00:20:38,180
bandwidth requirements are very small we

569
00:20:36,620 --> 00:20:40,219
only need two triangles for an entire

570
00:20:38,180 --> 00:20:42,590
curve<font color="#CCCCCC"> for tessellating a curve we need</font>

571
00:20:40,220 --> 00:20:44,600
<font color="#E5E5E5">to hundreds sometimes thousands and you</font>

572
00:20:42,590 --> 00:20:46,280
get really<font color="#E5E5E5"> high quality aliasing</font><font color="#CCCCCC"> because</font>

573
00:20:44,600 --> 00:20:49,219
you can simply calculate how far the

574
00:20:46,280 --> 00:20:50,629
pixel shader is from the curve in order

575
00:20:49,220 --> 00:20:52,220
to calculate what the coverage of the

576
00:20:50,630 --> 00:20:55,130
curve over that pixel shader would be

577
00:20:52,220 --> 00:20:57,020
over that pixel would be the cons are

578
00:20:55,130 --> 00:20:58,790
the shaders are complex and<font color="#E5E5E5"> you're</font>

579
00:20:57,020 --> 00:21:00,379
running<font color="#E5E5E5"> them on a lot of pixels that you</font>

580
00:20:58,790 --> 00:21:01,580
are not actually<font color="#CCCCCC"> feeling if you want to</font>

581
00:21:00,380 --> 00:21:03,230
reduce that<font color="#CCCCCC"> overfilling you're</font><font color="#E5E5E5"> gonna</font>

582
00:21:01,580 --> 00:21:06,050
have to<font color="#E5E5E5"> subdivide your curves to make</font>

583
00:21:03,230 --> 00:21:09,320
your to make your triangles<font color="#CCCCCC"> your</font>

584
00:21:06,050 --> 00:21:11,870
quadrilaterals have less overlap or have

585
00:21:09,320 --> 00:21:13,820
less overlap with the non<font color="#E5E5E5"> field area and</font>

586
00:21:11,870 --> 00:21:15,739
intersections are a little hard to do

587
00:21:13,820 --> 00:21:18,950
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> just have to take that from me</font>

588
00:21:15,740 --> 00:21:21,350
then finally there's direct<font color="#E5E5E5"> hardware</font>

589
00:21:18,950 --> 00:21:23,900
implementations<font color="#E5E5E5"> the exact algorithms</font><font color="#CCCCCC"> are</font>

590
00:21:21,350 --> 00:21:25,520
implementation dependent<font color="#CCCCCC"> the</font><font color="#E5E5E5"> advantages</font>

591
00:21:23,900 --> 00:21:27,050
are that they are optimized for the

592
00:21:25,520 --> 00:21:28,790
available hardware they implemented by

593
00:21:27,050 --> 00:21:31,010
the hardware vendors for their<font color="#E5E5E5"> hardware</font>

594
00:21:28,790 --> 00:21:32,389
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> basically magic</font><font color="#CCCCCC"> you know you</font>

595
00:21:31,010 --> 00:21:33,350
<font color="#E5E5E5">just give them your</font><font color="#CCCCCC"> 2d stuff and they</font>

596
00:21:32,390 --> 00:21:35,300
make it<font color="#E5E5E5"> happen</font>

597
00:21:33,350 --> 00:21:36,620
the<font color="#CCCCCC"> downsides</font><font color="#E5E5E5"> they require underlying</font>

598
00:21:35,300 --> 00:21:38,870
hardware support usually not widely

599
00:21:36,620 --> 00:21:41,000
supported and they're usually not that

600
00:21:38,870 --> 00:21:42,350
well tested because you know<font color="#E5E5E5"> only a</font>

601
00:21:41,000 --> 00:21:46,580
couple of devices have them and<font color="#CCCCCC"> nobody's</font>

602
00:21:42,350 --> 00:21:48,889
<font color="#E5E5E5">using them</font><font color="#CCCCCC"> is not great so the existing</font>

603
00:21:46,580 --> 00:21:51,350
implementations which is the last part

604
00:21:48,890 --> 00:21:52,820
of what<font color="#CCCCCC"> i'll talk about we have the most</font>

605
00:21:51,350 --> 00:21:54,679
<font color="#E5E5E5">widely used which is directly from</font>

606
00:21:52,820 --> 00:21:57,439
<font color="#CCCCCC">Microsoft which is basically they're</font>

607
00:21:54,680 --> 00:21:59,600
drawing<font color="#CCCCCC"> API in all recent windows</font>

608
00:21:57,440 --> 00:22:02,000
versions<font color="#CCCCCC"> its</font><font color="#E5E5E5"> windows only</font><font color="#CCCCCC"> absolutely</font>

609
00:21:59,600 --> 00:22:04,010
proprietary obviously it is essentially

610
00:22:02,000 --> 00:22:07,460
a<font color="#E5E5E5"> user-mode library that wraps direct3d</font>

611
00:22:04,010 --> 00:22:09,650
<font color="#E5E5E5">it is purely</font><font color="#CCCCCC"> technical</font><font color="#E5E5E5"> almost purely</font>

612
00:22:07,460 --> 00:22:10,490
<font color="#E5E5E5">tessellation based it is well tested my</font>

613
00:22:09,650 --> 00:22:12,770
leaves<font color="#CCCCCC"> its</font>

614
00:22:10,490 --> 00:22:16,580
<font color="#CCCCCC">used by Firefox 127</font><font color="#E5E5E5"> upwards</font><font color="#CCCCCC"> it's used by</font>

615
00:22:12,770 --> 00:22:18,440
is a<font color="#CCCCCC"> nine upwards and it's used by steam</font>

616
00:22:16,580 --> 00:22:20,720
and lots of other software that is

617
00:22:18,440 --> 00:22:23,150
commonly used<font color="#E5E5E5"> then from google</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

618
00:22:20,720 --> 00:22:24,920
<font color="#CCCCCC">skiing</font><font color="#E5E5E5"> ski GL</font><font color="#CCCCCC"> be specifically which is</font>

619
00:22:23,150 --> 00:22:27,110
the<font color="#CCCCCC"> skier version that</font><font color="#E5E5E5"> renders using</font>

620
00:22:24,920 --> 00:22:29,840
<font color="#CCCCCC">OpenGL it's open source its</font>

621
00:22:27,110 --> 00:22:32,959
<font color="#E5E5E5">cross-platform</font><font color="#CCCCCC"> as I said it's</font>

622
00:22:29,840 --> 00:22:34,939
implemented<font color="#CCCCCC"> an opengl</font><font color="#E5E5E5"> it uses a hybrid</font>

623
00:22:32,960 --> 00:22:37,790
approach so it can draw either using

624
00:22:34,940 --> 00:22:41,870
coverage computation or<font color="#E5E5E5"> tessellation or</font>

625
00:22:37,790 --> 00:22:44,480
it can do actually upload<font color="#CCCCCC"> cpu masks</font><font color="#E5E5E5"> so</font>

626
00:22:41,870 --> 00:22:48,559
it uses all the different things sort of

627
00:22:44,480 --> 00:22:49,940
<font color="#E5E5E5">now currently</font><font color="#CCCCCC"> I don't know where chrome</font>

628
00:22:48,559 --> 00:22:52,399
<font color="#CCCCCC">is exactly using it right now but</font>

629
00:22:49,940 --> 00:22:54,110
they're not using it<font color="#E5E5E5"> everywhere yet but</font>

630
00:22:52,400 --> 00:22:58,100
they're working on it and we are also

631
00:22:54,110 --> 00:23:02,209
using it for canvas on mobile devices

632
00:22:58,100 --> 00:23:04,699
now then<font color="#E5E5E5"> there's from</font><font color="#CCCCCC"> Apple their</font><font color="#E5E5E5"> sports</font>

633
00:23:02,210 --> 00:23:09,200
<font color="#E5E5E5">GL which is their core graphics GL</font><font color="#CCCCCC"> back</font>

634
00:23:04,700 --> 00:23:11,240
<font color="#CCCCCC">end its OSX</font><font color="#E5E5E5"> only it's used by safari</font><font color="#CCCCCC"> in</font>

635
00:23:09,200 --> 00:23:13,220
modern versions<font color="#E5E5E5"> and as far as we know</font>

636
00:23:11,240 --> 00:23:15,710
it's a little<font color="#E5E5E5"> harder to dissect it uses</font>

637
00:23:13,220 --> 00:23:18,020
a hybrid approach<font color="#CCCCCC"> because it's not a</font>

638
00:23:15,710 --> 00:23:19,670
completely<font color="#CCCCCC"> user mode thing</font><font color="#E5E5E5"> we can't go</font>

639
00:23:18,020 --> 00:23:22,460
in and and see what it does

640
00:23:19,670 --> 00:23:23,990
sadly<font color="#E5E5E5"> then this car</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> do you mean you</font>

641
00:23:22,460 --> 00:23:28,760
maintained<font color="#E5E5E5"> open-source cross-platform</font>

642
00:23:23,990 --> 00:23:31,400
<font color="#E5E5E5">also use a hybrid approach</font><font color="#CCCCCC"> i don't know</font>

643
00:23:28,760 --> 00:23:33,710
<font color="#E5E5E5">if anybody actually using</font><font color="#CCCCCC"> an impact</font><font color="#E5E5E5"> as</font>

644
00:23:31,400 --> 00:23:34,910
far as i know<font color="#E5E5E5"> it's full of bugs</font><font color="#CCCCCC"> and if</font>

645
00:23:33,710 --> 00:23:36,590
it ever<font color="#E5E5E5"> goes somewhere that</font><font color="#CCCCCC"> would be</font>

646
00:23:34,910 --> 00:23:39,679
wonderful<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> point it doesn't look</font>

647
00:23:36,590 --> 00:23:42,169
like it<font color="#E5E5E5"> has</font><font color="#CCCCCC"> heard that it will</font><font color="#E5E5E5"> and then</font>

648
00:23:39,679 --> 00:23:43,220
there's<font color="#CCCCCC"> two hard direct</font><font color="#E5E5E5"> hardware</font>

649
00:23:42,170 --> 00:23:45,320
implementations<font color="#CCCCCC"> i'd like to mention</font>

650
00:23:43,220 --> 00:23:46,610
<font color="#CCCCCC">first of</font><font color="#E5E5E5"> all there's an env path</font>

651
00:23:45,320 --> 00:23:49,280
rendering extension which is an

652
00:23:46,610 --> 00:23:51,590
extension by<font color="#CCCCCC"> Nvidia</font><font color="#E5E5E5"> it requires</font><font color="#CCCCCC"> an</font>

653
00:23:49,280 --> 00:23:53,690
<font color="#CCCCCC">nvidia GPU</font><font color="#E5E5E5"> recent one with recent</font>

654
00:23:51,590 --> 00:23:56,330
drivers<font color="#E5E5E5"> is completely implemented in</font>

655
00:23:53,690 --> 00:23:59,600
hardware<font color="#E5E5E5"> it outputs it's it's basically</font>

656
00:23:56,330 --> 00:24:01,820
an<font color="#CCCCCC"> opengl extension to rasterize a 2d</font>

657
00:23:59,600 --> 00:24:04,939
<font color="#CCCCCC">mask to your central buffer and then you</font>

658
00:24:01,820 --> 00:24:07,850
just draw the outline outline triangle

659
00:24:04,940 --> 00:24:09,530
<font color="#E5E5E5">it's fairly new not widely used not</font>

660
00:24:07,850 --> 00:24:11,330
<font color="#CCCCCC">writing tested we've worked with nvidia</font>

661
00:24:09,530 --> 00:24:13,129
engineers with it<font color="#E5E5E5"> it shows some</font>

662
00:24:11,330 --> 00:24:14,870
potential<font color="#E5E5E5"> also has a couple of issues</font>

663
00:24:13,130 --> 00:24:16,160
<font color="#CCCCCC">we'll see where that goes</font>

664
00:24:14,870 --> 00:24:18,889
and then<font color="#E5E5E5"> there's basically what is a</font>

665
00:24:16,160 --> 00:24:22,040
specification<font color="#E5E5E5"> open VG</font><font color="#CCCCCC"> it's basically</font>

666
00:24:18,890 --> 00:24:24,169
<font color="#CCCCCC">open vector graphics like opengl it's by</font>

667
00:24:22,040 --> 00:24:26,299
<font color="#CCCCCC">the Cronus</font><font color="#E5E5E5"> group just like</font><font color="#CCCCCC"> opengl</font>

668
00:24:24,169 --> 00:24:28,489
and it describes an<font color="#E5E5E5"> API that can be used</font>

669
00:24:26,299 --> 00:24:30,499
for a vector<font color="#E5E5E5"> graphics</font><font color="#CCCCCC"> turning I don't</font>

670
00:24:28,489 --> 00:24:33,049
know of any<font color="#CCCCCC"> widely used implementations</font>

671
00:24:30,499 --> 00:24:34,489
<font color="#CCCCCC">particularly</font><font color="#E5E5E5"> mobile vendors are looking</font>

672
00:24:33,049 --> 00:24:37,668
into this at the moment to<font color="#CCCCCC"> save our</font>

673
00:24:34,489 --> 00:24:39,649
mobile devices most information and a

674
00:24:37,669 --> 00:24:43,940
half on that is in this magical

675
00:24:39,649 --> 00:24:46,158
proprietary<font color="#CCCCCC"> nd8 mobile world</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> can</font>

676
00:24:43,940 --> 00:24:48,440
say a lot<font color="#E5E5E5"> about it but it is not yet</font>

677
00:24:46,159 --> 00:24:51,559
widely used to the best of our knowledge

678
00:24:48,440 --> 00:24:55,489
<font color="#CCCCCC">alright that was</font><font color="#E5E5E5"> everything I</font><font color="#CCCCCC"> have to</font>

679
00:24:51,559 --> 00:24:58,309
say<font color="#CCCCCC"> I hope</font><font color="#E5E5E5"> it was not too technical and</font>

680
00:24:55,489 --> 00:25:00,289
not<font color="#CCCCCC"> too specific</font><font color="#E5E5E5"> to the graphics</font><font color="#CCCCCC"> Keeks</font>

681
00:24:58,309 --> 00:25:02,450
if you have any<font color="#E5E5E5"> questions we got a</font>

682
00:25:00,289 --> 00:25:04,639
couple of minutes for that you're all

683
00:25:02,450 --> 00:25:05,509
<font color="#E5E5E5">asked</font><font color="#CCCCCC"> to if you have a question wait</font>

684
00:25:04,639 --> 00:25:08,029
<font color="#E5E5E5">till they come to you with the</font>

685
00:25:05,509 --> 00:25:09,440
microphone because otherwise it won't

686
00:25:08,029 --> 00:25:17,270
get into the recording and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> the</font>

687
00:25:09,440 --> 00:25:21,650
recording will be less useful

688
00:25:17,270 --> 00:25:26,930
<font color="#CCCCCC">of those libraries you mentioned in the</font>

689
00:25:21,650 --> 00:25:30,920
end<font color="#E5E5E5"> which ones are</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> targets</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> to use</font>

690
00:25:26,930 --> 00:25:33,560
for<font color="#CCCCCC"> firefox in Nanda</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> addressing the</font>

691
00:25:30,920 --> 00:25:37,310
<font color="#E5E5E5">in the media into the future currently</font>

692
00:25:33,560 --> 00:25:39,320
<font color="#E5E5E5">ski</font><font color="#CCCCCC"> a gel and</font><font color="#E5E5E5"> directed</font><font color="#CCCCCC"> II and we are</font>

693
00:25:37,310 --> 00:25:41,120
looking into<font color="#CCCCCC"> NV path</font><font color="#E5E5E5"> rendering together</font>

694
00:25:39,320 --> 00:25:43,010
with<font color="#CCCCCC"> nvidia engineers but for now that's</font>

695
00:25:41,120 --> 00:25:47,689
not<font color="#CCCCCC"> going</font><font color="#E5E5E5"> there</font>

696
00:25:43,010 --> 00:25:54,050
<font color="#E5E5E5">yep</font>

697
00:25:47,690 --> 00:25:59,930
excellent<font color="#CCCCCC"> like</font><font color="#E5E5E5"> thank you</font>

698
00:25:54,050 --> 00:26:13,779
<font color="#CCCCCC">you want to download them or look at</font>

699
00:25:59,930 --> 00:26:27,510
them or anything like that

700
00:26:13,779 --> 00:26:51,070
<font color="#E5E5E5">hello welcome</font>

701
00:26:27,510 --> 00:26:55,450
<font color="#CCCCCC">ok</font>

702
00:26:51,070 --> 00:26:58,330
<font color="#E5E5E5">so please we are there</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of people</font>

703
00:26:55,450 --> 00:27:09,929
who wants to enter the room<font color="#E5E5E5"> so if you</font>

704
00:26:58,330 --> 00:27:53,919
can go to the middle

705
00:27:09,929 --> 00:28:04,870
<font color="#CCCCCC">ok</font>

706
00:27:53,920 --> 00:28:11,460
<font color="#CCCCCC">ok</font>

707
00:28:04,870 --> 00:28:17,789
<font color="#CCCCCC">advice</font>

708
00:28:11,460 --> 00:28:32,630
<font color="#CCCCCC">where</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> where</font>

709
00:28:17,789 --> 00:28:38,180
<font color="#CCCCCC">ok</font>

710
00:28:32,630 --> 00:28:54,110
<font color="#CCCCCC">significant a cookie</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> further said</font>

711
00:28:38,180 --> 00:28:56,000
second microphone<font color="#E5E5E5"> for like the</font><font color="#CCCCCC"> Notre</font>

712
00:28:54,110 --> 00:29:02,540
right side if you once<font color="#CCCCCC"> were usually</font>

713
00:28:56,000 --> 00:29:06,429
<font color="#E5E5E5">because if you</font><font color="#CCCCCC"> help for the moment</font>

714
00:29:02,540 --> 00:29:14,970
<font color="#CCCCCC">ok</font>

715
00:29:06,429 --> 00:29:14,970
<font color="#CCCCCC">so now let's listen to</font><font color="#E5E5E5"> james</font><font color="#CCCCCC"> drama</font>

