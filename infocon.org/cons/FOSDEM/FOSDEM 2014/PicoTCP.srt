1
00:00:06,020 --> 00:00:07,430
OK hello everyone

2
00:00:07,430 --> 00:00:11,700
I'm mixing the saw and I'm presenting to
you the pic a TCP stack

3
00:00:11,700 --> 00:00:16,698
which one to present here as the the
okay

4
00:00:16,699 --> 00:00:20,199
as the reference TCPIP state for the
Internet of Things

5
00:00:20,199 --> 00:00:27,199
going to try to fix that first

6
00:00:33,780 --> 00:00:40,010
should be better

7
00:00:40,010 --> 00:00:43,969
a rights would be to go so first let me
do some

8
00:00:43,969 --> 00:00:47,149
shameless publicity for the company I'm
working for

9
00:00:47,149 --> 00:00:51,320
it's called Dolce we r leaving embedded
technology company

10
00:00:51,320 --> 00:00:55,379
we're located in Leuven gent and what
we're doing is we're providing

11
00:00:55,379 --> 00:00:56,820
consultancy training

12
00:00:56,820 --> 00:01:01,659
we're doing projects together with our
customers and doing ice or services

13
00:01:01,659 --> 00:01:07,570
'em will want to do is insured across
our clients in Co creation with us

14
00:01:07,570 --> 00:01:10,720
can launch know that this and better
quality broad

15
00:01:10,720 --> 00:01:14,500
the products in a shorter time to market
but

16
00:01:14,500 --> 00:01:17,880
another important point is that we
believe 'em

17
00:01:17,880 --> 00:01:21,810
that connected devices are going to
improve the quality of our lives in

18
00:01:21,810 --> 00:01:25,049
in of it this way so it does the white
wi-fi

19
00:01:25,049 --> 00:01:28,130
made this and big a TCP

20
00:01:28,130 --> 00:01:32,289
it's a fully-featured and highly
portable TCP IP stack

21
00:01:32,289 --> 00:01:35,909
and it's designed really for full the
small footprints

22
00:01:35,909 --> 00:01:39,030
embedded system so we're targeting the
lower and

23
00:01:39,030 --> 00:01:42,649
microcontrollers here an up until the

24
00:01:42,649 --> 00:01:45,909
until bigger targets so um

25
00:01:45,909 --> 00:01:49,570
why should we be to reference the CPAP
stay for the Internet of Things

26
00:01:49,570 --> 00:01:53,089
that is because we have four areas which
we focused on

27
00:01:53,090 --> 00:01:56,429
during the development of because TCP
and that is

28
00:01:56,429 --> 00:01:59,979
modularity portability performance

29
00:01:59,979 --> 00:02:03,539
and quality and don't tell you about all
these four

30
00:02:03,539 --> 00:02:09,310
the focus areas little more in detail
the first southern

31
00:02:09,310 --> 00:02:12,500
important for this conference i think is
that we the

32
00:02:12,500 --> 00:02:15,840
are the source software is free as in
free speech am

33
00:02:15,840 --> 00:02:18,859
so we have a dual licensing policy in
place

34
00:02:18,859 --> 00:02:22,260
firstly really released pick a TCP stack

35
00:02:22,260 --> 00:02:25,690
under the nude GPL version to you

36
00:02:25,690 --> 00:02:29,420
but then for the cursed customers who
are not

37
00:02:29,420 --> 00:02:33,328
really the very happy with this kind of
licensing we also have a

38
00:02:33,329 --> 00:02:38,170
appropriate the relicensing possible
because we are a full copyright owner

39
00:02:38,170 --> 00:02:44,369
of because this BS it it is fee to only

40
00:02:44,370 --> 00:02:47,850
and the question was is that fee to only

41
00:02:47,850 --> 00:02:52,290
or v2 and leader nowhere sticking to
gplv2

42
00:02:52,290 --> 00:02:55,679
so

43
00:02:55,680 --> 00:02:59,510
what does this take a look like and is
the first point modularity

44
00:02:59,510 --> 00:03:03,659
we've built up the steak from the
beginning as that very modular stag

45
00:03:03,659 --> 00:03:04,190
because

46
00:03:04,190 --> 00:03:08,530
and that's important for small embedded
targets there's one big bubble in the

47
00:03:08,530 --> 00:03:08,989
middle

48
00:03:08,989 --> 00:03:12,640
which is the grape he could speak or
that one of course

49
00:03:12,640 --> 00:03:16,109
the is mandatory but all the order the
modules

50
00:03:16,110 --> 00:03:20,840
nodules around it are optional and you
can choose whether you want to compile

51
00:03:20,840 --> 00:03:21,840
them in or not

52
00:03:21,840 --> 00:03:25,400
an of course this some dependencies
between them

53
00:03:25,400 --> 00:03:28,549
known but that's logical I think

54
00:03:28,549 --> 00:03:31,680
and then just to give you an idea of a
whole

55
00:03:31,680 --> 00:03:34,790
big status the in terms of flash memory

56
00:03:34,790 --> 00:03:38,069
and we try to compile the complete
stacked with

57
00:03:38,069 --> 00:03:41,839
the foreign arm targets which is the
embed borton

58
00:03:41,840 --> 00:03:46,060
in this case in we compiled all the
options in and then we get

59
00:03:46,060 --> 00:03:49,750
the somewhere around 68 kilobytes for

60
00:03:49,750 --> 00:03:53,329
for older models you can see here we
think that's pretty small

61
00:03:53,329 --> 00:03:57,900
then let's see the how we can build is
up

62
00:03:57,900 --> 00:04:01,920
in a modular way so we removed
everything except the CP

63
00:04:01,920 --> 00:04:06,109
you TB and then we want to use only the
ipv4 because we're also

64
00:04:06,110 --> 00:04:09,810
implementing ipv6 and both can be used
at the same time

65
00:04:09,810 --> 00:04:12,870
in we

66
00:04:12,870 --> 00:04:16,180
when we built this for host mode
goldfish we we are somewhere around

67
00:04:16,180 --> 00:04:17,829
thirty kilobytes a flash

68
00:04:17,829 --> 00:04:21,909
so how does it work

69
00:04:21,909 --> 00:04:25,280
you select the bubbles the modules 'em
and

70
00:04:25,280 --> 00:04:28,890
you can do this 'em just with a simple
may command

71
00:04:28,890 --> 00:04:32,800
to seal the all the available modules
just have a look inside or make file

72
00:04:32,800 --> 00:04:38,310
I made that the the the come on the used
here for deterred kilobyte version of

73
00:04:38,310 --> 00:04:39,229
the stake which I

74
00:04:39,229 --> 00:04:43,800
have just show you 'em I F explicitly
mentioned all the modules a few if you

75
00:04:43,800 --> 00:04:44,390
don't many

76
00:04:44,390 --> 00:04:47,919
mention any of them you will just get
all the modules an

77
00:04:47,919 --> 00:04:51,620
and then for for the small lips eyes
have also stripped

78
00:04:51,620 --> 00:04:56,210
the module here to see what will the
finally take in your

79
00:04:56,210 --> 00:04:59,820
in Europe flash but you shouldn't do
that if you still want to link the

80
00:04:59,820 --> 00:05:02,690
library

81
00:05:02,690 --> 00:05:06,300
next points portability in we with all
the

82
00:05:06,300 --> 00:05:10,760
portability since the beginning so we're
really CPU architecture independent

83
00:05:10,760 --> 00:05:14,719
'em we run on 8-bit scores on 16- and
32-bit

84
00:05:14,719 --> 00:05:18,930
64-bit the little or big endian

85
00:05:18,930 --> 00:05:22,760
we've also thought of the small systems
which have no

86
00:05:22,760 --> 00:05:27,159
operating system it also bare metal
small operating systems our schedules

87
00:05:27,159 --> 00:05:29,050
things like free articles

88
00:05:29,050 --> 00:05:33,589
turn real operating systems or more
complete operating system up until

89
00:05:33,589 --> 00:05:39,080
and real time operating systems right
now at this moment we have about

90
00:05:39,080 --> 00:05:42,820
10 or more different platforms which we
already support

91
00:05:42,820 --> 00:05:46,580
and we believe that it's very easy to
port the TCP to in New

92
00:05:46,580 --> 00:05:51,500
to Newport and I will show you this in a
minute how it's done

93
00:05:51,500 --> 00:05:55,649
and new operating system should also be
easy to support because we

94
00:05:55,649 --> 00:05:59,219
wrote their own the operating system
abstraction layer so you

95
00:05:59,219 --> 00:06:02,380
the you should just implement this layer
and all the rest

96
00:06:02,380 --> 00:06:05,899
stays the same

97
00:06:05,899 --> 00:06:09,050
to show you fueled architecture sweet we
support

98
00:06:09,050 --> 00:06:12,260
a 64-bit is not mentioned because we
only test this

99
00:06:12,260 --> 00:06:16,669
on pose X Klein so on a basically a
Linux machine

100
00:06:16,669 --> 00:06:19,750
a.m. because we don't have any 64-bit

101
00:06:19,750 --> 00:06:23,050
embed it targets a at our place but then
entered

102
00:06:23,050 --> 00:06:26,289
32-bit this really low the farm for
Ryan's and

103
00:06:26,289 --> 00:06:30,240
I think almost every month there's a new
one being introduced its really easy to

104
00:06:30,240 --> 00:06:31,089
port

105
00:06:31,089 --> 00:06:35,399
so we have a few LPC chips cortex and 0
and three and four

106
00:06:35,399 --> 00:06:38,399
love stm32 for Ryan's also

107
00:06:38,399 --> 00:06:42,209
on the 16 bits the site we have the

108
00:06:42,209 --> 00:06:46,250
the MSP low low-power a microcontroller
from TI

109
00:06:46,250 --> 00:06:49,279
also depict 24 af- which

110
00:06:49,279 --> 00:06:52,830
which I will demo here later on and this
is a

111
00:06:52,830 --> 00:06:56,839
a target trip which really 'em really
small resources

112
00:06:56,839 --> 00:07:00,399
it has only 16 kilobytes of RAM and
we're running a

113
00:07:00,399 --> 00:07:04,899
competes taken sides that and then we
have even have one 8-bit target so

114
00:07:04,899 --> 00:07:05,800
that's a

115
00:07:05,800 --> 00:07:11,930
eighty may go 128 switches doing
painless TCP IP communication

116
00:07:11,930 --> 00:07:16,070
more portability even so the
communication ships

117
00:07:16,070 --> 00:07:19,140
we we support this set of of

118
00:07:19,140 --> 00:07:22,750
the communication channels we have wifi
chips running we have

119
00:07:22,750 --> 00:07:26,080
internet bf USB CDC

120
00:07:26,080 --> 00:07:30,979
drivers and and then a bunch a bunch of
virtual drivers which really use a lot

121
00:07:30,979 --> 00:07:34,229
during development or testing 'em on

122
00:07:34,229 --> 00:07:37,269
on the NEX for example so we just don't
up drivers'

123
00:07:37,269 --> 00:07:44,269
3d and the be kept which will white
shark is also using

124
00:07:44,680 --> 00:07:48,209
then the different operating systems
which we can run on

125
00:07:48,209 --> 00:07:52,659
at this moment we we use a lot of bare
metal targets

126
00:07:52,659 --> 00:07:55,890
as soldiers certain there's no operating
system

127
00:07:55,890 --> 00:08:00,110
running so all the calls are
non-blocking then free articles as a as

128
00:08:00,110 --> 00:08:01,930
an operating system which is popping up

129
00:08:01,930 --> 00:08:05,180
lot on on the small devices of course
you have the

130
00:08:05,180 --> 00:08:08,820
embed art source which is a cm sis art
dolls

131
00:08:08,820 --> 00:08:13,390
compliance order CMC's for Ryan shoots
should work been less this well

132
00:08:13,390 --> 00:08:17,729
and and then we do a lot of testing on
the nixon and and other POS X targets as

133
00:08:17,729 --> 00:08:19,550
well

134
00:08:19,550 --> 00:08:23,719
so what those are was attraction there
do exactly we have a distraction from

135
00:08:23,719 --> 00:08:27,000
the new taxes in the signals which are
use for synchronization between the

136
00:08:27,000 --> 00:08:27,830
threats

137
00:08:27,830 --> 00:08:31,169
then the treads themselves into
processes are abstracted

138
00:08:31,169 --> 00:08:38,110
and we have a be is the blocking socket
interface

139
00:08:38,110 --> 00:08:41,930
no let's talk about the performance this
test has been run on their

140
00:08:41,929 --> 00:08:45,410
on the M bhatt LPC the 16

141
00:08:45,410 --> 00:08:48,439
7 1768 I think the

142
00:08:48,440 --> 00:08:51,610
that started running at 100 megahertz

143
00:08:51,610 --> 00:08:56,300
we get reports the for transmission over
boats then they get bits and

144
00:08:56,300 --> 00:09:01,439
downstream but 20 megabits which is not
bad for a number to target I think

145
00:09:01,440 --> 00:09:05,339
the then the CPU time here is is stated
in

146
00:09:05,339 --> 00:09:08,760
in among the for microseconds per loop
because our stake

147
00:09:08,760 --> 00:09:12,170
has a stake take and you can really
choose yourself

148
00:09:12,170 --> 00:09:15,250
a how many no mistake the X or the

149
00:09:15,250 --> 00:09:18,829
the the period if one take so

150
00:09:18,829 --> 00:09:23,989
United States we wi-fi only 45
microseconds and then at the max-min

151
00:09:23,990 --> 00:09:26,959
tribute which was here that then they
get this or 20 megabits

152
00:09:26,959 --> 00:09:30,079
if something like your 800 microseconds

153
00:09:30,079 --> 00:09:33,269
per ticket then the Rams something

154
00:09:33,269 --> 00:09:36,430
and we're proud of also the dynamic
memory

155
00:09:36,430 --> 00:09:39,859
the during this test was make some 8
kilobytes

156
00:09:39,860 --> 00:09:43,319
the of memory and on average around four
kilobytes

157
00:09:43,319 --> 00:09:47,029
the static memory year is the biggest
one its sixteen kilobytes and

158
00:09:47,029 --> 00:09:50,470
that's actually just because we're all
the casing a a lot of

159
00:09:50,470 --> 00:09:54,240
the both first statically a allocating
love for for for the

160
00:09:54,240 --> 00:09:58,720
for a driver so that we can both for
more incoming packets once you could

161
00:09:58,720 --> 00:10:01,899
also reduce that but then your trip with
goes down

162
00:10:01,899 --> 00:10:05,300
the little bit so it's a trade off you
should make but you can get these

163
00:10:05,300 --> 00:10:05,849
figures

164
00:10:05,850 --> 00:10:10,540
even though we're and the stage it to
kilobytes and on this

165
00:10:10,540 --> 00:10:15,849
pick targets we even below want to apply
to stack

166
00:10:15,850 --> 00:10:19,310
qualities something we're constantly
focusing on so and the way we develop

167
00:10:19,310 --> 00:10:20,508
the stack is in

168
00:10:20,509 --> 00:10:23,529
and agile way turn using Scrum

169
00:10:23,529 --> 00:10:26,689
and a we we do

170
00:10:26,689 --> 00:10:30,000
test driven development so we make the
test beforehand and then we implement

171
00:10:30,000 --> 00:10:32,389
the code we should make the steady
stream

172
00:10:32,389 --> 00:10:37,040
we're also having continues in
integration and automated testing so

173
00:10:37,040 --> 00:10:40,579
whenever something breaks we get a big
threats tree in the and everyone should

174
00:10:40,579 --> 00:10:42,290
jump on the problem to get this

175
00:10:42,290 --> 00:10:46,480
up and running as quickly as possible at
the rights can see a kind of

176
00:10:46,480 --> 00:10:51,300
to label but then for good quality a.m.
this is a tool using its gold deal with

177
00:10:51,300 --> 00:10:53,219
dicks and gives you an idea

178
00:10:53,220 --> 00:10:56,730
the if you're writing decent go to or
not

179
00:10:56,730 --> 00:11:01,259
the first time rerun the stool I think
we were something somewhere around the

180
00:11:01,259 --> 00:11:04,730
and so this gives you a constant
reminder of for

181
00:11:04,730 --> 00:11:09,209
right good go to turn documented don't
make it too complex

182
00:11:09,209 --> 00:11:12,739
the write unit tests a and things like
that so

183
00:11:12,740 --> 00:11:16,220
were planning on getting in even higher

184
00:11:16,220 --> 00:11:19,819
hopefully so at the bottom you see it

185
00:11:19,819 --> 00:11:24,430
a big list RFC stan is this the not
intended to be readable but just to show

186
00:11:24,430 --> 00:11:25,719
you how many Stanners

187
00:11:25,720 --> 00:11:29,620
we comply to and we tend to take the
stand is pretty literal so

188
00:11:29,620 --> 00:11:34,300
we don't make any loose implementations
of these

189
00:11:34,300 --> 00:11:39,109
like some other states do we are also
community-driven so

190
00:11:39,110 --> 00:11:42,560
we don't get up Lisa visitors there
you're free to

191
00:11:42,560 --> 00:11:46,498
to file any any book you can find as as
I said before

192
00:11:46,499 --> 00:11:51,139
we're gplv2 licensed so use our stake
for kit

193
00:11:51,139 --> 00:11:57,240
do whatever you want with it as long as
you stick to the GPL

194
00:11:57,240 --> 00:12:00,310
were also on the on although which did

195
00:12:00,310 --> 00:12:03,540
which does analysis of open source
projects an

196
00:12:03,540 --> 00:12:06,920
an there they're saying about the TCP
that we

197
00:12:06,920 --> 00:12:10,769
the have a young but this established
code base with stars

198
00:12:10,769 --> 00:12:14,339
and first time and get up first commit
worse around

199
00:12:14,339 --> 00:12:17,949
October 2012 and no

200
00:12:17,949 --> 00:12:22,050
we have a large development team with
stable a year ago year-over-year commits

201
00:12:22,050 --> 00:12:25,079
so which rip constantly working on this
thing and we're trying to

202
00:12:25,079 --> 00:12:28,819
to make it then there every day

203
00:12:28,819 --> 00:12:32,389
so no known mora more

204
00:12:32,389 --> 00:12:36,970
concrete or more in interesting is how
to port this actually do a new platform

205
00:12:36,970 --> 00:12:41,569
the thats easy you need just three
things that's memory management

206
00:12:41,569 --> 00:12:44,790
which often is in the big problem so you
just the

207
00:12:44,790 --> 00:12:47,879
grab them I look in the free functions
from the UC library

208
00:12:47,879 --> 00:12:51,540
the you need a few times functions just
to actually

209
00:12:51,540 --> 00:12:55,589
and then a driver for your heart rate to
get the bank is really on your physical

210
00:12:55,589 --> 00:13:00,170
physical interface so how do with dude
is Memory Match Mills

211
00:13:00,170 --> 00:13:04,189
else's already set that you can use them
all again the free functions from your C

212
00:13:04,189 --> 00:13:04,849
library

213
00:13:04,850 --> 00:13:08,649
a if they are decent enough if they're
is that available

214
00:13:08,649 --> 00:13:12,999
if you're using an operating system then
you could to use the memory allocation

215
00:13:12,999 --> 00:13:16,420
from the operating system an n

216
00:13:16,420 --> 00:13:20,370
were also right now implementing our own
memory manager because we believe that

217
00:13:20,370 --> 00:13:21,050
we can

218
00:13:21,050 --> 00:13:24,719
to allocate and and free memory the more
efficient

219
00:13:24,720 --> 00:13:27,860
then mose mo C libraries do

220
00:13:27,860 --> 00:13:31,089
also earn coping with fragmentation

221
00:13:31,089 --> 00:13:34,939
when transmitting small packets and and
things like that so does

222
00:13:34,939 --> 00:13:39,209
that's a new development that's on its
way I think it almost made its way

223
00:13:39,209 --> 00:13:44,529
in intruder the stable stabler

224
00:13:44,529 --> 00:13:48,170
there is not back to full boutrous great
so

225
00:13:48,170 --> 00:13:51,449
and next thing you need is timing
functions in

226
00:13:51,449 --> 00:13:55,399
the way we set this up is the DiMera
interrupt which will

227
00:13:55,399 --> 00:13:59,410
every millisecond increment and 64-bit
in

228
00:13:59,410 --> 00:14:02,589
integer as soon as we get a big enough
time base

229
00:14:02,589 --> 00:14:06,389
and then you need two functions because
I'm a mess and pick a time which will

230
00:14:06,389 --> 00:14:07,259
return the

231
00:14:07,259 --> 00:14:11,889
elapsed time in milliseconds or in
seconds

232
00:14:11,889 --> 00:14:15,459
so how do we do this at this is another
example from

233
00:14:15,459 --> 00:14:18,930
'em from them but a implementation I
think again

234
00:14:18,930 --> 00:14:22,819
so and because I'll ok is actually the

235
00:14:22,819 --> 00:14:26,779
wrapper around the mall expansion which
will you so you can see that simply

236
00:14:26,779 --> 00:14:30,939
the use the mall it from the sea la
reina requirements for picket ECP is

237
00:14:30,939 --> 00:14:31,980
that you really

238
00:14:31,980 --> 00:14:37,430
a.m. 0 all the memory explicitly so if
you see live readers and do it or

239
00:14:37,430 --> 00:14:40,878
you could have to look good available
for example

240
00:14:40,879 --> 00:14:45,199
next thing is that the cool time Ms
we're doing a trickier with the

241
00:14:45,199 --> 00:14:48,569
32 bit integer which is being
incremented because it's a little bit

242
00:14:48,569 --> 00:14:49,459
faster

243
00:14:49,459 --> 00:14:53,628
and then we're detecting when it
overflows and that the good times just

244
00:14:53,629 --> 00:14:55,670
returning the same value divided by

245
00:14:55,670 --> 00:14:59,248
1000 and the last statement your is
optional

246
00:14:59,249 --> 00:15:04,240
'em you could use that as the the
looking for action would just wait until

247
00:15:04,240 --> 00:15:07,629
another millisecond has elapsed

248
00:15:07,629 --> 00:15:10,720
but it's not mandatory

249
00:15:10,720 --> 00:15:15,490
Noah we get down to the device driver
this API we tend to make it very generic

250
00:15:15,490 --> 00:15:15,939
and

251
00:15:15,939 --> 00:15:19,699
very simple also so it is only a few
things needed that's the

252
00:15:19,699 --> 00:15:24,479
and the good that creates which will
return as trucks to pick a device

253
00:15:24,480 --> 00:15:27,730
and then you have its opposite at the
bottom which is which is

254
00:15:27,730 --> 00:15:31,319
he could have destroyed which will do
all the cleanup and then you have

255
00:15:31,319 --> 00:15:35,128
ascend function in the pool function so
you wanna transmitted packets

256
00:15:35,129 --> 00:15:38,699
or you want to see if there's new data
available or not

257
00:15:38,699 --> 00:15:42,699
on your physical interface

258
00:15:42,699 --> 00:15:46,410
so did the header is really simple
there's only two functions

259
00:15:46,410 --> 00:15:49,819
ex post which which are to 'em

260
00:15:49,819 --> 00:15:53,550
the and that created them but destroy in
this case

261
00:15:53,550 --> 00:15:57,550
and all the rest this its and their
needs which can see here so this is the

262
00:15:57,550 --> 00:15:59,160
create function

263
00:15:59,160 --> 00:16:03,809
which will allocates some memory at the
at the top for the device driver then we

264
00:16:03,809 --> 00:16:05,269
will set the mac address

265
00:16:05,269 --> 00:16:08,949
because this isn't Internet device okay

266
00:16:08,949 --> 00:16:12,670
the we limit the device and then sets
said the

267
00:16:12,670 --> 00:16:16,439
a few function pointers which will the
which will do the actual work these are

268
00:16:16,439 --> 00:16:17,209
called banks

269
00:16:17,209 --> 00:16:20,239
which are put into a struct a

270
00:16:20,240 --> 00:16:23,660
actually with with work what we've done
here in with what is a way that's

271
00:16:23,660 --> 00:16:28,129
easy to get started on you platforms as
you make wrappers around existing driver

272
00:16:28,129 --> 00:16:29,480
or implementation

273
00:16:29,480 --> 00:16:32,709
and in in the end that system we had the

274
00:16:32,709 --> 00:16:35,790
internet reads available so this is
actually just

275
00:16:35,790 --> 00:16:39,618
a wrap-around dysfunction and then you
can get started with a one-page

276
00:16:39,619 --> 00:16:44,189
functional even whole fish function and
the he could CCP driver s

277
00:16:44,189 --> 00:16:48,368
is working the sensations just the same
story we're

278
00:16:48,369 --> 00:16:53,889
using the internet right internet sent
API from the ambit

279
00:16:53,889 --> 00:17:00,369
so let's get down to a demo what we've
done here is we've taken in

280
00:17:00,369 --> 00:17:06,130
is a small the MIDI keyboards it
actually it's mandatory for

281
00:17:06,130 --> 00:17:09,350
for who we are I think but it it wasn't
a great success sick

282
00:17:09,349 --> 00:17:13,339
so you can find really cheap on ebay
great thing it is they have a

283
00:17:13,339 --> 00:17:17,899
amid reports which we will use this
message boards the need for the course

284
00:17:17,900 --> 00:17:20,949
really simple so just need a level
translator and then

285
00:17:20,949 --> 00:17:24,260
with the UART you can read 02 bias which
are on

286
00:17:24,260 --> 00:17:27,990
on the media channel and what we're
doing is

287
00:17:27,990 --> 00:17:32,260
you can see this here is som we take the
keyboard

288
00:17:32,260 --> 00:17:35,679
which transmit we translate as soon as
serial the

289
00:17:35,679 --> 00:17:39,910
serial stream the microchip big
controller will read this out

290
00:17:39,910 --> 00:17:44,390
you speak a TCP to put this on no WiFi
channel

291
00:17:44,390 --> 00:17:48,470
the the the wifi over the wifi we are
actually

292
00:17:48,470 --> 00:17:51,810
transmitting a TCP stream with on top 0
MQ

293
00:17:51,810 --> 00:17:55,990
which is a a great message message
queuing protocol which makes it really

294
00:17:55,990 --> 00:17:56,810
easy to

295
00:17:56,810 --> 00:18:01,919
the and descendent but publish message
is actually so

296
00:18:01,920 --> 00:18:05,200
the the keyboard here is a publisher and
my

297
00:18:05,200 --> 00:18:09,950
laptop will subscribe to dis the to his
publisher and get every message that

298
00:18:09,950 --> 00:18:10,260
it's

299
00:18:10,260 --> 00:18:13,530
that makes available so these messages
will be the

300
00:18:13,530 --> 00:18:17,220
meeting notes which are played on the
keyboard that I can receive in with the

301
00:18:17,220 --> 00:18:20,840
with a tiny bite and stripped on my
laptop

302
00:18:20,840 --> 00:18:25,020
and then a with these fights again into
a virtual MIDI device

303
00:18:25,020 --> 00:18:28,790
and this virtual MIDI device can then be
hooked up to any synthesizer on my

304
00:18:28,790 --> 00:18:30,920
laptop

305
00:18:30,920 --> 00:18:34,290
so I can show you didn't the didn't

306
00:18:34,290 --> 00:18:38,180
python script which will reads tease

307
00:18:38,180 --> 00:18:45,180
and the binary packages

308
00:18:45,750 --> 00:18:50,960
so down that's about it I think in just
a few more lines at the bottom

309
00:18:50,960 --> 00:18:56,470
the most of them are our print functions
just just to see what's going on so on

310
00:18:56,470 --> 00:18:59,960
this is just to show how easy it is to
do you do the CPAP

311
00:18:59,960 --> 00:19:06,960
communication by using 0 MQ

312
00:19:12,310 --> 00:19:16,120
yet I will just power off the device
meanwhile

313
00:19:16,120 --> 00:19:19,129
and let it connects 32 WiFi network in

314
00:19:19,130 --> 00:19:22,760
I don't know if there's anybody you can
actually play the piano because I can't

315
00:19:22,760 --> 00:19:23,970
so that we can then

316
00:19:23,970 --> 00:19:28,630
so it's it's again duties demo so anyone
who wants to

317
00:19:28,630 --> 00:19:32,180
play a few notes yet get

318
00:19:32,180 --> 00:19:39,180
them along

319
00:19:40,080 --> 00:19:43,419
yeah except that the year the board is

320
00:19:43,420 --> 00:19:46,700
is issue is people are indeed an

321
00:19:46,700 --> 00:19:49,900
its so the boards connected I will not
connect the

322
00:19:49,900 --> 00:19:53,190
the by the script and you can see that's
immediately receiving

323
00:19:53,190 --> 00:19:56,790
and me the messages and no

324
00:19:56,790 --> 00:19:59,990
I you have this virtual MIDI device
should connected

325
00:19:59,990 --> 00:20:05,960
to to synthesizer and now you should be
able to play the piano

326
00:20:05,960 --> 00:20:12,960
maybe

327
00:20:14,529 --> 00:20:17,820
in Goa up

328
00:20:17,820 --> 00:20:20,809
yes

329
00:20:20,809 --> 00:20:27,809
K

330
00:20:28,000 --> 00:20:31,649
at sea

331
00:20:31,649 --> 00:20:38,649
no make the connection again okay go
ahead

332
00:20:44,760 --> 00:20:51,760
great song

333
00:20:53,049 --> 00:20:53,600
thanks

334
00:20:53,600 --> 00:20:57,120
so don't know if theres so any time left
for

335
00:20:57,120 --> 00:21:03,820
two minutes to questions yes so this is
a great pleasure I'm very impressed

336
00:21:03,820 --> 00:21:08,299
tonight like to use it but my projects
gplv3 so I Conway viewed on that waiting

337
00:21:08,299 --> 00:21:09,070
as a good idea

338
00:21:09,070 --> 00:21:14,570
that's a good question we

339
00:21:14,570 --> 00:21:17,879
the we think it the the trees a little

340
00:21:17,880 --> 00:21:21,980
the tourist restrictive for the purpose
yeah it's

341
00:21:21,980 --> 00:21:28,370
yet through I dunno maybe I can then

342
00:21:28,370 --> 00:21:34,309
goal to help with an expert on this
matter I

343
00:21:34,309 --> 00:21:37,928
I wouldn't reply with another question
actually so what was the need %uh

344
00:21:37,929 --> 00:21:41,140
exactly what the GPL 3 300 yet the two

345
00:21:41,140 --> 00:21:48,140
which is what which was working pretty
well I think we can take this helpline

346
00:21:48,390 --> 00:21:52,220
okay so we're going to we're going to
cut this discussion the budget the

347
00:21:52,220 --> 00:21:53,260
licensing I think

348
00:21:53,260 --> 00:21:59,309
it if you it if you simply say GPL two
or later and then nothing the promise of

349
00:21:59,309 --> 00:22:00,750
but we can discuss this later

350
00:22:00,750 --> 00:22:05,370
thank you very much for the demo if
anybody wants to carry on thing you can

351
00:22:05,370 --> 00:22:06,649
do we have an open

352
00:22:06,649 --> 00:22:10,850
slots after the next speech but we're
gonna stick to our timing here

353
00:22:10,850 --> 00:22:16,029
thanks very much for this amazing piece
of work awesome

354
00:22:16,029 --> 00:22:20,770
we have a five minute break

355
00:22:20,770 --> 00:22:23,850
and then we have our last formal

356
00:22:23,850 --> 00:22:24,789
talk for today

