1
00:00:04,640 --> 00:00:07,590
hello everyone

2
00:00:07,590 --> 00:00:10,540
I'm back got are I'm here to talk about
or SME

3
00:00:10,540 --> 00:00:15,980
thank you I it's a new operating system
for the cloud

4
00:00:15,980 --> 00:00:21,360
are this talk is actually divided in two
parts I'm first talk about or speak or

5
00:00:21,360 --> 00:00:25,509
on where we're at right now and then not
talk will join the state's

6
00:00:25,509 --> 00:00:29,509
to talk about the configuration and
management I'm a little bit about the

7
00:00:29,509 --> 00:00:30,109
future

8
00:00:30,109 --> 00:00:33,750
I'm the komentar always me so if you
some patches

9
00:00:33,750 --> 00:00:38,370
I'm probably the 12 margin for a few
words about call you

10
00:00:38,370 --> 00:00:42,718
are it was founded in December 2012 by

11
00:00:42,719 --> 00:00:46,449
are far it's okay to mark the kings of
KVM us

12
00:00:46,449 --> 00:00:51,649
the register are proclaimed referring to
fourteen people in seven different

13
00:00:51,649 --> 00:00:52,500
countries

14
00:00:52,500 --> 00:00:57,410
all the code is open source available on
github for everybody everyone news

15
00:00:57,410 --> 00:01:00,440
and we actually joined Linux Foundation
are

16
00:01:00,440 --> 00:01:04,870
last december our mission

17
00:01:04,870 --> 00:01:08,550
is to build the best operating system to
power virtual machines

18
00:01:08,550 --> 00:01:12,890
in the clone are soap that means the

19
00:01:12,890 --> 00:01:16,740
that we are expecting to run on top of a
hypervisor I'm not writing all persons

20
00:01:16,740 --> 00:01:18,660
operating system run on governmental

21
00:01:18,660 --> 00:01:24,880
so what is always me are

22
00:01:24,880 --> 00:01:28,670
it's a cloud over operating system Horry
like to call it a lot different system

23
00:01:28,670 --> 00:01:31,840
written from scratch no we did not for
clinics

24
00:01:31,840 --> 00:01:35,470
are or any other operating system
objectivity

25
00:01:35,470 --> 00:01:38,750
role are really all their

26
00:01:38,750 --> 00:01:42,050
bootloader stuff on everything from
scratch we did

27
00:01:42,050 --> 00:01:46,210
data networking stack from BSD like
everyone else class

28
00:01:46,210 --> 00:01:50,059
and we also important CFS are we r

29
00:01:50,060 --> 00:01:53,460
action modifying the network in stock
quite heavily to support network

30
00:01:53,460 --> 00:01:54,949
channels with some will go into

31
00:01:54,950 --> 00:01:59,690
albeit a bit later are the FS we
obviously didn't change and we're hoping

32
00:01:59,690 --> 00:02:01,250
to switch to open CFS

33
00:02:01,250 --> 00:02:06,070
at some point on your arm you see plus
plus 11 extensively which is always

34
00:02:06,070 --> 00:02:10,530
bit of a shock for people coming from
Linux kernel group

35
00:02:10,530 --> 00:02:14,840
so why did we decide to write a
completely new operating system not use

36
00:02:14,840 --> 00:02:16,200
one of the existing ones

37
00:02:16,200 --> 00:02:20,920
if you look at the pickle if you look at
the typical clouds stock

38
00:02:20,920 --> 00:02:24,409
are you seen like to see quite poorly
here

39
00:02:24,409 --> 00:02:29,328
but to Houston duplication between
different layers so the hypervisor

40
00:02:29,329 --> 00:02:32,590
operating system like limits for example
JVM

41
00:02:32,590 --> 00:02:35,790
altri provide protection and obstruction
for some boxing

42
00:02:35,790 --> 00:02:39,849
on it wasn't worse so

43
00:02:39,849 --> 00:02:43,810
an action I think this is one of the big
reasons why people looking into

44
00:02:43,810 --> 00:02:46,140
container based virtualizing solutions
because

45
00:02:46,140 --> 00:02:49,208
obviously this causes some so 1mon

46
00:02:49,209 --> 00:02:52,849
overheard and it's actually not that
useful for the guys up there trying to

47
00:02:52,849 --> 00:02:54,209
just what they're up with let

48
00:02:54,209 --> 00:03:00,150
application on the cloud so always be
uses a slightly different approach

49
00:03:00,150 --> 00:03:03,569
to traditional operating systems are

50
00:03:03,569 --> 00:03:08,518
it'll library also why this I'm is not a
new idea it was pioneered in the

51
00:03:08,519 --> 00:03:12,680
nineties reports the Colonels but
they're actually has become a viable

52
00:03:12,680 --> 00:03:13,879
solution now

53
00:03:13,879 --> 00:03:17,768
arson because when you're running on top
of the hyper one so you don't need that

54
00:03:17,769 --> 00:03:18,989
many device drivers

55
00:03:18,989 --> 00:03:23,159
so what it means is a single application
provincial machine

56
00:03:23,159 --> 00:03:27,150
there's no criminal users per separation
like job so basically everything is

57
00:03:27,150 --> 00:03:28,359
running in room 0

58
00:03:28,359 --> 00:03:32,090
know for obviously but because we're
running

59
00:03:32,090 --> 00:03:36,189
directly on top of the hypervisor you
can access things like mm you

60
00:03:36,189 --> 00:03:41,108
via all own API we do support posits
APIs for compatibility

61
00:03:41,109 --> 00:03:46,779
we turn to go into more meet them so
effectively

62
00:03:46,779 --> 00:03:51,209
me what we've done Israel collapse for
cloud a specific case

63
00:03:51,209 --> 00:03:55,170
JVM and operating system into one layer
so we have one player left

64
00:03:55,170 --> 00:03:58,339
features

65
00:03:58,340 --> 00:04:02,109
so what can you expect from running your
application or or what can you expect

66
00:04:02,109 --> 00:04:04,489
from horse me when you're running your
application

67
00:04:04,489 --> 00:04:07,999
reaction support all them sort of

68
00:04:07,999 --> 00:04:12,219
operating system services you would
expect from a modern operating system so

69
00:04:12,219 --> 00:04:14,329
we have a schedule with schedules trades

70
00:04:14,329 --> 00:04:19,180
not process because there's only one
process obviously memory management or

71
00:04:19,180 --> 00:04:23,160
specifically demand paging and memory
mapping it turns out that memory mapping

72
00:04:23,160 --> 00:04:24,840
is really important for certain

73
00:04:24,840 --> 00:04:28,880
conserved a VM applications like a
Sandra which is really popular know

74
00:04:28,880 --> 00:04:32,080
what's your database which just
basically bypasses the JVM

75
00:04:32,080 --> 00:04:36,349
and relies on operating system memory
maps to proper for performance

76
00:04:36,350 --> 00:04:41,900
we obviously support network in and we
have a pool file system so with books

77
00:04:41,900 --> 00:04:46,450
ZFS and basically it means that you have
a full-fledged

78
00:04:46,450 --> 00:04:50,330
production quality file system in the
operating system

79
00:04:50,330 --> 00:04:55,719
NPR's we actually support to a Linux
system course although

80
00:04:55,720 --> 00:04:59,400
system calls don't exist in our
traditional sense that is normal calls

81
00:04:59,400 --> 00:05:03,710
what we go to great lengths to actual
effectively Linux and this is for

82
00:05:03,710 --> 00:05:07,760
compatibility reasons because we're on
on modified open to anything

83
00:05:07,760 --> 00:05:11,210
we want %um for example to say move

84
00:05:11,210 --> 00:05:14,880
advertise for criminals and we actually
have a specific links version was

85
00:05:14,880 --> 00:05:18,150
I don't remember anymore but this
basically means that the application

86
00:05:18,150 --> 00:05:22,169
doesn't exit actually even know that
it's running on top of all this week

87
00:05:22,170 --> 00:05:26,950
aren't that poor image has of all
well-known of all but it's it's actually

88
00:05:26,950 --> 00:05:29,140
quite complete lips implementation

89
00:05:29,140 --> 00:05:33,210
its based on something called Muslim
which we talk but we have extended his

90
00:05:33,210 --> 00:05:34,289
point the

91
00:05:34,290 --> 00:05:38,150
a lot there are some always be specific
APIs we're not

92
00:05:38,150 --> 00:05:42,630
trying to build our own API's are just
because but

93
00:05:42,630 --> 00:05:46,170
for things like mm you which there are
no posts April been on

94
00:05:46,170 --> 00:05:51,110
NPR's we've how come up with some of our
own

95
00:05:51,110 --> 00:05:55,500
architectures are always miss appear
64-bit architecture operating system

96
00:05:55,500 --> 00:05:58,950
obviously being read them just

97
00:05:58,950 --> 00:06:03,469
1 year ago are we currently run on six
the

98
00:06:03,470 --> 00:06:07,140
64-bit x86 on top of KVM

99
00:06:07,140 --> 00:06:11,680
are on I was about to say it's an SBM
about someone at the example told me

100
00:06:11,680 --> 00:06:12,500
that it's actually

101
00:06:12,500 --> 00:06:15,890
send PVH p.m. I haha

102
00:06:15,890 --> 00:06:21,190
but in any case are that runs on Amazon
ec2 and that at actually the public love

103
00:06:21,190 --> 00:06:23,310
stuff is really driving our efforts at
this

104
00:06:23,310 --> 00:06:27,570
point we have some simply based off but
it's really incomplete

105
00:06:27,570 --> 00:06:31,840
Anderson I in the audience that probably
you can talk to if you want to help all

106
00:06:31,840 --> 00:06:36,070
weird doing work to support me in
Roberto books it's mostly just device

107
00:06:36,070 --> 00:06:37,610
driver stuff actually

108
00:06:37,610 --> 00:06:42,060
are and are planning a 64-bit arms
boards

109
00:06:42,060 --> 00:06:45,610
are I think actually some people are
already looking into it

110
00:06:45,610 --> 00:06:49,480
and we would love to support other
market this is as well

111
00:06:49,480 --> 00:06:54,500
a but its pat is welcome at this point

112
00:06:54,500 --> 00:06:57,860
little bit about the status arm like I
said we're on a

113
00:06:57,860 --> 00:07:01,200
on modified open to decay on have tested
most of the

114
00:07:01,200 --> 00:07:06,680
mom sort of major JVM languages so Java
Jeremy Scala

115
00:07:06,680 --> 00:07:10,780
groovy closure I band The JavaScript
implementation in

116
00:07:10,780 --> 00:07:15,109
are open JDK 7 I think it's they're
probably change to

117
00:07:15,110 --> 00:07:20,000
are new implementation in a in case I
forgot your favorite language so please

118
00:07:20,000 --> 00:07:22,190
test it and let us know if

119
00:07:22,190 --> 00:07:26,990
you find any problems we will fix them
are two major JDM applications that

120
00:07:26,990 --> 00:07:27,880
we're using

121
00:07:27,880 --> 00:07:32,200
are for testing and performance tuning
all the time

122
00:07:32,200 --> 00:07:35,300
is Catherine Tom Rath and they're
actually quite different from work load

123
00:07:35,300 --> 00:07:36,590
perspective

124
00:07:36,590 --> 00:07:39,679
like to mention up on personal be
working with us on the final quite

125
00:07:39,680 --> 00:07:40,080
upbeat

126
00:07:40,080 --> 00:07:43,099
on its actually seems to be mostly arm

127
00:07:43,100 --> 00:07:46,830
operating system memory management
related stuff that needs to be done to

128
00:07:46,830 --> 00:07:52,300
actually get it working well bomb got
obviously more on the network inside

129
00:07:52,300 --> 00:07:58,280
arm yeah I will although our quotas has
a really strong JVM focus the core or

130
00:07:58,280 --> 00:08:00,799
see there's nothing to him specific
about it

131
00:08:00,800 --> 00:08:04,350
and i truly are someone already ported
emerald beach is so many more

132
00:08:04,350 --> 00:08:07,420
Ruby implementation on top of our own

133
00:08:07,420 --> 00:08:11,720
me I'm I would personally love to see
some important old R

134
00:08:11,720 --> 00:08:15,700
dorsey because no two schools then balls
we would be cool as well right

135
00:08:15,700 --> 00:08:19,920
are we support native applications of
course you don't get the kind of %ah

136
00:08:19,920 --> 00:08:21,210
sandboxing

137
00:08:21,210 --> 00:08:24,669
a issue get general-purpose operating
system

138
00:08:24,670 --> 00:08:28,770
systems but that we were quite hard to
get members the work

139
00:08:28,770 --> 00:08:33,039
really really well on top of all this
week them someone is using its a proxy

140
00:08:33,039 --> 00:08:38,610
Bob I think might be even using it in
production

141
00:08:38,610 --> 00:08:41,688
I was planning to do a demo but
apparently arm

142
00:08:41,688 --> 00:08:46,180
my laptop resolution isn't good so but
you can't just go on

143
00:08:46,180 --> 00:08:49,209
download all to yourself I'm to see the
top military

144
00:08:49,209 --> 00:08:54,949
sup second both times with KVM weeks and
will be worse than that

145
00:08:54,949 --> 00:08:58,128
arm yeah I was a planning to show you

146
00:08:58,129 --> 00:09:02,019
Hall weekly reports to mostly about I'm
going to skip the porno

147
00:09:02,019 --> 00:09:05,370
if you're interested I can show it to
you from my lap

148
00:09:05,370 --> 00:09:08,470
a few words about performance

149
00:09:08,470 --> 00:09:12,749
arm I didn't include any numbers here
because day to ensure the time but if

150
00:09:12,749 --> 00:09:15,379
you're interested up to send me an email
and I'll

151
00:09:15,379 --> 00:09:18,490
share the results to you were actually
are

152
00:09:18,490 --> 00:09:22,290
running performance tests all the time
palm

153
00:09:22,290 --> 00:09:26,230
because before was obviously is a major
concern for us

154
00:09:26,230 --> 00:09:30,249
are redo outperform Linux in some

155
00:09:30,249 --> 00:09:34,310
quite interesting benchmarks specter
sober when I say Linux I mean

156
00:09:34,310 --> 00:09:38,739
a out-of-box Federer running are in a
virtual machine

157
00:09:38,740 --> 00:09:43,300
we haven't tonight at all obviously
people can tune it more but this is

158
00:09:43,300 --> 00:09:46,660
soap for all suites are one of the key
point is that you

159
00:09:46,660 --> 00:09:50,019
all tutus itself under Italian the
flocks experience

160
00:09:50,019 --> 00:09:54,189
and performance needs to be there so is
be in some sense maybe a little bit on

161
00:09:54,189 --> 00:09:56,560
fair but that's right but that's what
people are running in

162
00:09:56,560 --> 00:10:01,128
production suspect a VM and that's
really interesting because it's mostly

163
00:10:01,129 --> 00:10:04,480
about a VM performance but we're seeing
something like a

164
00:10:04,480 --> 00:10:09,420
the to 3 percent improvement across all
the different are

165
00:10:09,420 --> 00:10:12,719
benchmark it's it's basically a
collection of different benchmarks

166
00:10:12,720 --> 00:10:16,740
well I'm impressed D its I think it's

167
00:10:16,740 --> 00:10:22,040
even 50 percent faster it for the single
sip your customer actually doing work to

168
00:10:22,040 --> 00:10:25,370
really implement parts of Memphis do you
to really show

169
00:10:25,370 --> 00:10:29,819
are what you can do with those for you
when you completely abandoned

170
00:10:29,819 --> 00:10:34,279
arms or 4610 and net for we have really
about I

171
00:10:34,279 --> 00:10:38,899
really good networking result some talk
a little bit more about them

172
00:10:38,899 --> 00:10:42,160
when I talk about metals we're awfully a

173
00:10:42,160 --> 00:10:46,689
in the same pop art with Linux or
approximately don't get me Cassandra

174
00:10:46,689 --> 00:10:50,599
yeah like I said a less than one second
wat time

175
00:10:50,600 --> 00:10:53,829
in in the queue in case this actually
means also the QM

176
00:10:53,829 --> 00:10:58,589
I think it takes 1.1 seconds to bring up
the whole emerald stuff

177
00:10:58,589 --> 00:11:01,980
and yet the that the final thing was
this taken from operative is a slight

178
00:11:01,980 --> 00:11:02,689
somewhat

179
00:11:02,689 --> 00:11:06,459
this is what you would expect because
there's no overhead we are four times

180
00:11:06,459 --> 00:11:08,410
faster than Linux in context switching

181
00:11:08,410 --> 00:11:12,100
obviously little bit about him it's nice

182
00:11:12,100 --> 00:11:16,329
so the minimal are always mean im its
roots includes the kernel services and

183
00:11:16,329 --> 00:11:18,199
leaves the seventy megabytes

184
00:11:18,199 --> 00:11:21,569
and that actually includes the CFS and
its basically

185
00:11:21,569 --> 00:11:24,819
also see if its image so it includes
also the CFS

186
00:11:24,819 --> 00:11:30,199
by system it on a dose of in ruby in
which is twenty nine megabytes

187
00:11:30,199 --> 00:11:34,160
and was really hoping to show you a nice
idea falter opens editor numbers but

188
00:11:34,160 --> 00:11:35,420
they're really horrible

189
00:11:35,420 --> 00:11:38,639
are part of it is the top interrogate
selfless

190
00:11:38,639 --> 00:11:42,970
quite be and we have some sort of an
issue with the CFS in that looked just

191
00:11:42,970 --> 00:11:46,009
generating a lot of people on used a
time to default on its

192
00:11:46,009 --> 00:11:49,410
but anyway we're working on on fixing
this and it shouldn't be

193
00:11:49,410 --> 00:11:56,199
more than 127 megabytes plus the seventy
enough minimal

194
00:11:56,199 --> 00:11:59,959
so how are we different well hallways or
three

195
00:11:59,959 --> 00:12:03,729
or or what kind of things can we do with
all you know that we

196
00:12:03,730 --> 00:12:07,050
abundant a lot of the design assumption
seemed

197
00:12:07,050 --> 00:12:10,599
traditional general-purpose operating
systems

198
00:12:10,600 --> 00:12:14,369
so networking tunnels arm actually

199
00:12:14,369 --> 00:12:18,730
people tell me that this %uh something
similar in BSD called met my or

200
00:12:18,730 --> 00:12:19,610
something like that

201
00:12:19,610 --> 00:12:23,089
but in any case armed with this was
proposed by one take up some the father

202
00:12:23,089 --> 00:12:24,730
of TCP

203
00:12:24,730 --> 00:12:29,600
in 2006 for Linux and I'm not sure what
happened but idk never got more than he

204
00:12:29,600 --> 00:12:31,089
was able to show

205
00:12:31,089 --> 00:12:34,670
really nice are overhead productions

206
00:12:34,670 --> 00:12:38,860
you know if I'm even with just his
proof-of-concept are

207
00:12:38,860 --> 00:12:43,800
implementation so 25 percent for one CPU
case in 20 percent

208
00:12:43,800 --> 00:12:47,559
for the to sleep UK's no

209
00:12:47,559 --> 00:12:50,709
and basically the whole idea there is
that the

210
00:12:50,709 --> 00:12:54,719
at that you want to redesign

211
00:12:54,720 --> 00:12:58,089
the networking stack to avoid locking
I'm curing

212
00:12:58,089 --> 00:13:01,160
on and accessing a lot of memory

213
00:13:01,160 --> 00:13:04,279
you know anyway so we have our no work
in progress

214
00:13:04,279 --> 00:13:07,540
network channels implementation and also
we we haven't Merced yet

215
00:13:07,540 --> 00:13:12,009
but the passes are on our mailing list
and one key point in the net

216
00:13:12,009 --> 00:13:15,930
channel staff was through actually more
protocol processing to use a space

217
00:13:15,930 --> 00:13:20,849
so we will or obviously having moved
uses both the kernel space were able to

218
00:13:20,850 --> 00:13:21,920
do that so

219
00:13:21,920 --> 00:13:25,660
the net to know is this directly
connected to application

220
00:13:25,660 --> 00:13:29,009
and it's really a interesting to see
that we're seeing already

221
00:13:29,009 --> 00:13:32,019
30 percent throughput im improvement in

222
00:13:32,019 --> 00:13:37,230
I think this is arm net per piece AP
tests

223
00:13:37,230 --> 00:13:41,139
are jumping from 36 gigabits

224
00:13:41,139 --> 00:13:46,540
to 47 and the setup here is that Linux
is running with the host generated load

225
00:13:46,540 --> 00:13:47,748
and always be in the guest

226
00:13:47,749 --> 00:13:51,009
receiving the packets

227
00:13:51,009 --> 00:13:54,589
on something quite differently that
darts a BM stuff

228
00:13:54,589 --> 00:13:59,779
arm damian bowling bowling is a really
typical arm

229
00:13:59,779 --> 00:14:03,059
technique using virtual machines and
we've tried we're extending it to the

230
00:14:03,059 --> 00:14:04,189
JVM

231
00:14:04,189 --> 00:14:09,209
so the idea is that the we can how to
tune the GC heap and give all the memory

232
00:14:09,209 --> 00:14:12,349
although be a memory to the JVM so you
don't need to

233
00:14:12,350 --> 00:14:16,829
a limit the amount of JVM memory to
maybe it's that something like eighty

234
00:14:16,829 --> 00:14:19,149
percent of the VM size or

235
00:14:19,149 --> 00:14:23,889
whatever are and then we were able to
steal memory from the JVM

236
00:14:23,889 --> 00:14:28,249
when the operating system in congress
member repressor admitted

237
00:14:28,249 --> 00:14:31,339
this is running on top of on what if I
JVM

238
00:14:31,339 --> 00:14:34,470
and I it's actually quite fascinating

239
00:14:34,470 --> 00:14:39,119
because that generator no garbage
collector move stuff around

240
00:14:39,119 --> 00:14:42,269
so as we take us we steal our memory
from

241
00:14:42,269 --> 00:14:46,329
the JVM the memory of this stole can be
moved somewhere else

242
00:14:46,329 --> 00:14:50,019
there's actually are really nice a
presentation Michael over cost on

243
00:14:50,019 --> 00:14:50,769
YouTube

244
00:14:50,769 --> 00:14:54,100
if you're interested in the details

245
00:14:54,100 --> 00:14:57,790
then the final thing arm I wanted to
mention about this

246
00:14:57,790 --> 00:15:02,199
Peters we're able to do seems we have
access to the MM you

247
00:15:02,199 --> 00:15:06,019
are one thing we're trying to optimize
saw is to modify

248
00:15:06,019 --> 00:15:09,999
the JVM are to replace urges a card
tables

249
00:15:09,999 --> 00:15:14,059
with memory mapping tricks arm

250
00:15:14,059 --> 00:15:19,179
geez a card table so basically a arm
data structural keeping track of

251
00:15:19,179 --> 00:15:22,779
references from all generations the
young generation but in any case I

252
00:15:22,779 --> 00:15:26,470
this is something that we're working on
now we haven't published anything on it

253
00:15:26,470 --> 00:15:27,220
yet

254
00:15:27,220 --> 00:15:30,779
are it's not really a new idea either us
or

255
00:15:30,779 --> 00:15:34,160
with their paws list DC are c4

256
00:15:34,160 --> 00:15:37,879
a do really similar tricks to reduced
power

257
00:15:37,879 --> 00:15:42,589
postpone see the post on but they
require were some olive tree Linux boxes

258
00:15:42,589 --> 00:15:45,059
and I think they actually tried to
submit those

259
00:15:45,059 --> 00:15:49,449
for Linux but mister basically doing
this really crazy a.m. amused offer it's

260
00:15:49,449 --> 00:15:52,160
really hard to get it in

261
00:15:52,160 --> 00:15:55,719
yeah the what part the Arms Act will
continue about the

262
00:15:55,720 --> 00:15:58,910
configuration management

263
00:15:58,910 --> 00:16:04,949
who I am Zach or task for anyone to
comply or else it's

264
00:16:04,949 --> 00:16:08,109
is so what I wanna show next is the

265
00:16:08,110 --> 00:16:12,209
I like a pic oh it's only show thing
that works to some extent what i'm

266
00:16:12,209 --> 00:16:14,628
showing here in the next five minutes is
a

267
00:16:14,629 --> 00:16:18,829
more of a plan in that we have and we
are trying to look at the

268
00:16:18,829 --> 00:16:23,878
want to make a cloud OS in this case
always be different in AM

269
00:16:23,879 --> 00:16:28,279
traditionally or a general-purpose OS
for my administration

270
00:16:28,279 --> 00:16:31,369
perspective so if you look at any

271
00:16:31,369 --> 00:16:34,610
and operating system like a Linux

272
00:16:34,610 --> 00:16:38,910
it's very anti to a command line
interface to the CL I

273
00:16:38,910 --> 00:16:43,129
I would say that other operating system
are focusing on cooley even not on sale

274
00:16:43,129 --> 00:16:44,050
I but the end

275
00:16:44,050 --> 00:16:49,069
let's put that aside slie is basically
for you means it's made for human

276
00:16:49,069 --> 00:16:51,639
interaction use you can interact with it

277
00:16:51,639 --> 00:16:55,220
and it's fine when you have a
stand-alone system when you have

278
00:16:55,220 --> 00:16:58,720
a one hundred to a thousand server on
the cloud that you want to

279
00:16:58,720 --> 00:17:01,569
administrative costs and I will not do

280
00:17:01,569 --> 00:17:06,579
in so what we're doing with all ways to
the world goal oriented toward the

281
00:17:06,579 --> 00:17:11,029
API in in toward mass number of server

282
00:17:11,029 --> 00:17:15,699
%um other aspect of a Roth in there was
a trying to

283
00:17:15,699 --> 00:17:19,130
in hand dailies configuration for
example

284
00:17:19,130 --> 00:17:22,899
and basically take out everything which
require yurman interruption

285
00:17:22,898 --> 00:17:26,779
if you look for example it to it
consideration of the name

286
00:17:26,779 --> 00:17:31,019
operating system you have in many cases
multiple fire in multiple

287
00:17:31,019 --> 00:17:35,299
area of this east of the five system
some time each of them with different

288
00:17:35,299 --> 00:17:38,200
text format for the configuration

289
00:17:38,200 --> 00:17:43,149
and you need to grow in manually update
a lot of them to do anything useful in

290
00:17:43,149 --> 00:17:45,168
configuration change

291
00:17:45,169 --> 00:17:49,730
as you know there are a lot of nice tool
which help you solve this problem

292
00:17:49,730 --> 00:17:54,309
name chef pop et cetera help you do a
lot of this stuff but this tool will

293
00:17:54,309 --> 00:17:56,200
call very hard actually

294
00:17:56,200 --> 00:18:01,529
to try to convert name the human factor
of it and make it automatic because

295
00:18:01,529 --> 00:18:04,980
they will parse the response that the
machine give them back and try to

296
00:18:04,980 --> 00:18:07,179
extract information from there

297
00:18:07,179 --> 00:18:11,190
and it's pretty challenging what you are
trying to do in or civvies take this

298
00:18:11,190 --> 00:18:15,600
redundancy away and take the complexity
way by doing everything automatic

299
00:18:15,600 --> 00:18:16,139
through

300
00:18:16,140 --> 00:18:20,419
or in through API here so we choose to
have

301
00:18:20,419 --> 00:18:24,019
name REST API to in

302
00:18:24,019 --> 00:18:27,640
basically doing everything in our system
and I will touch on that a little bit

303
00:18:27,640 --> 00:18:28,730
later

304
00:18:28,730 --> 00:18:33,100
and if we look at what exactly into
rocked with the cloud the west and by

305
00:18:33,100 --> 00:18:36,010
the way I guess this diagram can apply
to any

306
00:18:36,010 --> 00:18:39,590
operating system which given the cloud
specifically to mister v-

307
00:18:39,590 --> 00:18:43,959
over a bunch of services it into rocked
a with the operating system and with the

308
00:18:43,960 --> 00:18:45,610
application running on it

309
00:18:45,610 --> 00:18:48,850
see you have configuration you have
package you know we touch on on those

310
00:18:48,850 --> 00:18:50,168
two in a second

311
00:18:50,169 --> 00:18:54,539
you have me to rein in trace and log in
which collect information from from the

312
00:18:54,539 --> 00:18:55,940
cloud instances

313
00:18:55,940 --> 00:18:59,500
in new and what they call operation
maybe not the best name

314
00:18:59,500 --> 00:19:03,529
in New basically API which allow you to
do stuff on this system reboot the

315
00:19:03,529 --> 00:19:04,789
system

316
00:19:04,789 --> 00:19:11,789
a change configuration install software
it whatever you need to do in the system

317
00:19:15,179 --> 00:19:18,700
okay I hope I hope you can see the
screen captures so as a mission which

318
00:19:18,700 --> 00:19:23,720
shows a to do everything or to automate
everything in OC with API and we chose

319
00:19:23,720 --> 00:19:26,190
REST API for it

320
00:19:26,190 --> 00:19:29,340
im every a operation that will be

321
00:19:29,340 --> 00:19:33,240
you can do in the system will be exposed
eventually through API it's not there

322
00:19:33,240 --> 00:19:33,690
yet

323
00:19:33,690 --> 00:19:36,970
right now you can you still need to do a
lot of stuff manually or through the sea

324
00:19:36,970 --> 00:19:37,500
ally

325
00:19:37,500 --> 00:19:41,330
but hopefully very soon in a welcome
people that want to help us to do that

326
00:19:41,330 --> 00:19:43,279
day to join the project

327
00:19:43,279 --> 00:19:46,890
we'll have everything over API we choose
to define

328
00:19:46,890 --> 00:19:53,159
the REST API with the TuneCore Swauger
everyone here is familiar with it

329
00:19:53,159 --> 00:19:57,860
if you so I meets not elected a record
as always the but I I recommend to check

330
00:19:57,860 --> 00:19:58,519
it out /p

331
00:19:58,519 --> 00:20:02,510
it's really cool to the turnout a
defined REST API at

332
00:20:02,510 --> 00:20:06,799
in a side effect it's give you a quick
we which into rock with these

333
00:20:06,799 --> 00:20:10,490
with this a REST API you can see some
culture here

334
00:20:10,490 --> 00:20:13,710
or you can go to the swagger issue not a
father example

335
00:20:13,710 --> 00:20:17,110
im so ever for that day you want to do
with those

336
00:20:17,110 --> 00:20:21,149
you can do with REST API the slugger API
just a layer on top of it

337
00:20:21,149 --> 00:20:26,289
you don't necessarily need to use it and
one tricky thing in performing operation

338
00:20:26,289 --> 00:20:27,260
on name

339
00:20:27,260 --> 00:20:30,408
operating system that not everything is
sick or Nick

340
00:20:30,409 --> 00:20:34,880
so if you want to do slut something like
probe into me this CPU are probing the

341
00:20:34,880 --> 00:20:37,029
disk or something like that yes you can
have

342
00:20:37,029 --> 00:20:41,440
a request get a response back but if
you're doing something like run a test

343
00:20:41,440 --> 00:20:44,360
or or or doing something which take more
than a trivial

344
00:20:44,360 --> 00:20:48,010
I guess a few nanoseconds Oriel
millisecond

345
00:20:48,010 --> 00:20:51,350
you can't responsibility with the answer

346
00:20:51,350 --> 00:20:55,590
so we treated it like it's arson Cornick
and vote will do we respond

347
00:20:55,590 --> 00:20:58,149
systematically which in HDB response but

348
00:20:58,149 --> 00:21:01,678
that the result will it dump into a log
file a new claim

349
00:21:01,679 --> 00:21:05,730
collect the result from a log file will
also planning to use and it's not there

350
00:21:05,730 --> 00:21:07,110
yet plan to use and

351
00:21:07,110 --> 00:21:11,490
synchronization talkin reference number
which will allow you to continue in

352
00:21:11,490 --> 00:21:13,779
follow the specific a request

353
00:21:13,779 --> 00:21:17,500
as it executes

354
00:21:17,500 --> 00:21:20,750
who sorry configuration services

355
00:21:20,750 --> 00:21:25,789
so name I don't go on a go over
everything in essence of times that we

356
00:21:25,789 --> 00:21:27,529
don't have much of

357
00:21:27,529 --> 00:21:31,559
it but basically worry ahead in
configuration as API

358
00:21:31,559 --> 00:21:35,080
all the configuration change will be
done through the API the to mention

359
00:21:35,080 --> 00:21:35,820
earlier

360
00:21:35,820 --> 00:21:40,439
in a with API afk of course come out
indication come to Racine will come

361
00:21:40,440 --> 00:21:42,279
transaction et cetera

362
00:21:42,279 --> 00:21:45,659
you will not be able to do any
configuration change directly on the

363
00:21:45,659 --> 00:21:47,630
file or anything like that

364
00:21:47,630 --> 00:21:50,909
yes orphan is control anything built for
automation

365
00:21:50,909 --> 00:21:57,909
in at least I found it much easier to
maintain

366
00:21:58,059 --> 00:22:02,850
packaging services name for some of your
it might look familiar

367
00:22:02,850 --> 00:22:06,678
let me complete this slide it and you
can tell me what its remind you

368
00:22:06,679 --> 00:22:11,639
so to help people get in 2007 to let
people use in OCGA we are planning a

369
00:22:11,639 --> 00:22:16,110
trip public repository of all was the
image is ready to use

370
00:22:16,110 --> 00:22:19,779
you basically have to wait to use if you
want to install your own software in 20

371
00:22:19,779 --> 00:22:22,710
so you have two ways to do that one ways
to build

372
00:22:22,710 --> 00:22:25,919
it to at your model into the build
system

373
00:22:25,919 --> 00:22:29,820
in if you look at their guiterrez
instructional of how you can do that

374
00:22:29,820 --> 00:22:34,439
the other way of doing that in just copy
the Java fire or

375
00:22:34,440 --> 00:22:38,620
or the be no refund and deployed into
the system itself

376
00:22:38,620 --> 00:22:42,549
it to make it even easier what you up
into a visa a public or private or a few

377
00:22:42,549 --> 00:22:44,340
images which you can pool

378
00:22:44,340 --> 00:22:48,279
and Ron immediately or you can modify
and uploaded again

379
00:22:48,279 --> 00:22:51,299
it to this public repository inning

380
00:22:51,299 --> 00:22:57,200
what what does it remind you similar to

381
00:22:57,200 --> 00:23:00,490
any and all I want to this okay

382
00:23:00,490 --> 00:23:04,519
don't recollect thank you so yeah it's
very much inspired by the way talker

383
00:23:04,519 --> 00:23:06,480
handle images

384
00:23:06,480 --> 00:23:11,760
in him so we took the good thing out of
it

385
00:23:11,760 --> 00:23:16,330
and this %uh some corporation that that
support in a lil support their this kind

386
00:23:16,330 --> 00:23:17,379
of mechanism

387
00:23:17,380 --> 00:23:21,019
by the way we if we have time with touch
on on container later

388
00:23:21,019 --> 00:23:23,750
enough in the time shown here is
specific to contain know what we

389
00:23:23,750 --> 00:23:27,190
actually inspired by 20 carries easy
management of the images that

390
00:23:27,190 --> 00:23:32,220
that their use in there which is great

391
00:23:32,220 --> 00:23:35,630
low contrast is really something that we
are only starting with so you don't see

392
00:23:35,630 --> 00:23:38,429
an actual implementation rather released
a fortune

393
00:23:38,429 --> 00:23:41,519
but definitely everything that is stored
in the cloud

394
00:23:41,519 --> 00:23:45,100
it doesn't make sense to put her in and
push all the logs locally

395
00:23:45,100 --> 00:23:51,250
it will be collected by central service
and handle their

396
00:23:51,250 --> 00:23:55,139
a little bit on our road map so right
now I think

397
00:23:55,139 --> 00:24:00,580
we are about you in this graph so it's
mostly shown what we did the air but we

398
00:24:00,580 --> 00:24:03,990
would think that we are planning to do
really in the next few weeks even though

399
00:24:03,990 --> 00:24:05,779
the next few month

400
00:24:05,779 --> 00:24:09,809
is so we are 11 upcoming release which
would be an eye for release

401
00:24:09,809 --> 00:24:12,990
which will include a lot of name the

402
00:24:12,990 --> 00:24:18,080
01 got to each of these future because
it's quite technical but the name

403
00:24:18,080 --> 00:24:22,689
inform hypervisor perspective we are
playing to support Google compute engine

404
00:24:22,690 --> 00:24:27,330
if you wear in VirtualBox very soon and
for the rest of them just joined the

405
00:24:27,330 --> 00:24:27,908
mail

406
00:24:27,909 --> 00:24:34,909
list and see everything the weeks going
on there

407
00:24:36,799 --> 00:24:41,350
so this configuration pic 2 container
now

408
00:24:41,350 --> 00:24:44,959
yes want one final thing I wanted to
talk about since I think we have

409
00:24:44,960 --> 00:24:48,179
the time eyes containers are I'm

410
00:24:48,179 --> 00:24:52,230
a lot of times when number I mention
owes me people to stand him

411
00:24:52,230 --> 00:24:55,690
we already have container so what what's
what's the point

412
00:24:55,690 --> 00:24:59,130
are and to be honest darken the nurses
are

413
00:24:59,130 --> 00:25:03,070
well especially da curve is or some it's
really has done

414
00:25:03,070 --> 00:25:06,809
a lot to make their containers thought
he was a more I'll

415
00:25:06,809 --> 00:25:10,730
be having been also involved in Linux
kernel development

416
00:25:10,730 --> 00:25:13,730
I can tell you that the the control
group

417
00:25:13,730 --> 00:25:17,409
underneath on aren't the ass also must
doctor

418
00:25:17,409 --> 00:25:21,100
but with content is what you get is
really passport and basically zero more

419
00:25:21,100 --> 00:25:22,500
time are

420
00:25:22,500 --> 00:25:27,450
first provisioning I'm raw performance

421
00:25:27,450 --> 00:25:31,600
under the hood it's technically a quite
different from what we're doing it or

422
00:25:31,600 --> 00:25:33,590
special containers freely

423
00:25:33,590 --> 00:25:36,620
reject the idea of a hypervisor arm

424
00:25:36,620 --> 00:25:40,600
and they're built on share colonel
interests can also be a problem when

425
00:25:40,600 --> 00:25:42,168
iraq reading the kernel or

426
00:25:42,169 --> 00:25:46,220
when you doing hardware maintenance the
so you basically don't have any of their

427
00:25:46,220 --> 00:25:50,500
virtualisation goodies like live
migration

428
00:25:50,500 --> 00:25:56,100
desk a lot of complexity in the kernel
sometimes I'm surprised it even works

429
00:25:56,100 --> 00:25:59,639
I and it uses a copy on pride uses base

430
00:25:59,639 --> 00:26:03,299
which is really great for saving humid
space but it still

431
00:26:03,299 --> 00:26:06,720
you're basically tied to the arm

432
00:26:06,720 --> 00:26:10,970
normal Linux use a space

433
00:26:10,970 --> 00:26:14,139
so well what I've done two things that
always me

434
00:26:14,139 --> 00:26:18,240
in all say we're trying to sort of
combined best of both worlds

435
00:26:18,240 --> 00:26:22,350
we are also able to provide Facebook
times and fast provisioning

436
00:26:22,350 --> 00:26:25,620
and raw performance because we're
cutting down layers

437
00:26:25,620 --> 00:26:29,229
but on top of that you get all the
virtualisation

438
00:26:29,230 --> 00:26:32,320
stack are features that gonna

439
00:26:32,320 --> 00:26:36,389
you would expect I and like I mentioned
earlier

440
00:26:36,389 --> 00:26:40,779
you basically have hardware access our
specifically mm you access which is

441
00:26:40,779 --> 00:26:41,830
interesting for

442
00:26:41,830 --> 00:26:44,860
'em certain applications

443
00:26:44,860 --> 00:26:50,000
and for this as well that's a great blog
post by non other than dollar-cost up

444
00:26:50,000 --> 00:26:53,870
quite hard it's actually an audience
today I'll well yeah

445
00:26:53,870 --> 00:27:00,870
that's it

446
00:27:04,980 --> 00:27:08,690
do we have time for questions if we have
questions

447
00:27:08,690 --> 00:27:15,690
five minutes them

448
00:27:29,929 --> 00:27:33,409
so the question is that are we planning
to support the are we planning to our

449
00:27:33,409 --> 00:27:35,669
staff to support moral runtimes

450
00:27:35,669 --> 00:27:39,960
so we do support the open city that's
our focus but we do run on their

451
00:27:39,960 --> 00:27:43,130
emerald be are wrong time are

452
00:27:43,130 --> 00:27:47,630
and we are adding basically it so it's
basically about that in this %uh POSIX

453
00:27:47,630 --> 00:27:52,440
API's but are required by the wrong time
and yes we almost have been quoted as

454
00:27:52,440 --> 00:27:55,830
one probably working on different the
wrong times in the near future

455
00:27:55,830 --> 00:28:00,379
but if anyone is interested in
portraying absent but since I'm not we

456
00:28:00,380 --> 00:28:01,510
can probably won't help

457
00:28:01,510 --> 00:28:06,120
and what we are doing is we are adding
46 API some different APIs are

458
00:28:06,120 --> 00:28:10,379
just to make it compatible so I guess
the answer is yes

459
00:28:10,380 --> 00:28:14,159
that

460
00:28:14,159 --> 00:28:21,159
mom up

461
00:28:33,260 --> 00:28:35,980
I'm

462
00:28:35,980 --> 00:28:39,260
soul source that they are we obviously
cannot

463
00:28:39,260 --> 00:28:43,620
I guarantee that because we have don't
have four so if your application us for

464
00:28:43,620 --> 00:28:47,040
then it won't be then you need to do
something that big Asian Toronto on top

465
00:28:47,040 --> 00:28:47,750
of both be

466
00:28:47,750 --> 00:28:51,130
about the sport reading 10 it's a if

467
00:28:51,130 --> 00:28:54,370
really from application point of view it
looks like you're running a single

468
00:28:54,370 --> 00:29:01,370
process Linux or single process on Linux

469
00:29:06,770 --> 00:29:07,230
yes

470
00:29:07,230 --> 00:29:12,160
the the numbers are run on top of KVM
that's up for us it's mostly a

471
00:29:12,160 --> 00:29:13,440
convenience thing because

472
00:29:13,440 --> 00:29:17,060
obviously everybody's laptop has Kb Mr

473
00:29:17,060 --> 00:29:20,379
install on it are and for.net

474
00:29:20,380 --> 00:29:25,380
channels I think obviated KBM first and
has an actual even donned xn part yet so

475
00:29:25,380 --> 00:29:26,560
we don't have our

476
00:29:26,560 --> 00:29:33,560
those numbers

477
00:29:35,830 --> 00:29:42,830
'em arm so the question was if we only
have 11 process how do we do it runs on

478
00:29:45,340 --> 00:29:46,179
debugging

479
00:29:46,180 --> 00:29:49,860
I actually gdb this really well
connected to

480
00:29:49,860 --> 00:29:53,379
are integrated with the QM so it's
actually are

481
00:29:53,380 --> 00:29:56,880
being Linux kernel developers actually
easier to debug

482
00:29:56,880 --> 00:30:00,140
the whole thing on European time
tournaments won:

483
00:30:00,140 --> 00:30:03,370
so it's basically 'em

484
00:30:03,370 --> 00:30:06,469
yet water obviously you have things like
a memory corruption

485
00:30:06,470 --> 00:30:10,730
possible memory corruption in the kernel
data sucks of course wide application

486
00:30:10,730 --> 00:30:11,640
that so obviously

487
00:30:11,640 --> 00:30:15,820
can happen but the it's up for us it
hasn't really the number

488
00:30:15,820 --> 00:30:19,230
any issue or because you can always take
like an open city K

489
00:30:19,230 --> 00:30:22,350
run it in Linux are with water on
whatever

490
00:30:22,350 --> 00:30:25,659
and once you're satisfied that that's
sort of working problem with the new

491
00:30:25,660 --> 00:30:26,180
stadium

492
00:30:26,180 --> 00:30:31,680
endorsement any more questions

493
00:30:31,680 --> 00:30:36,490
I guess not

494
00:30:36,490 --> 00:30:43,490
thank you on

495
00:38:41,020 --> 00:38:41,310
me

496
00:38:41,310 --> 00:38:44,549
up when you guys hear me yeah

497
00:38:44,550 --> 00:38:51,329
looks like

498
00:38:51,329 --> 00:38:52,999
hi everyone it's I am somebody

