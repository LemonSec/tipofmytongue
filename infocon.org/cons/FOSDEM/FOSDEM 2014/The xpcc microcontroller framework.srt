1
00:01:05,820 --> 00:01:12,630
<font color="#E5E5E5">so</font><font color="#CCCCCC"> hi my name is Nicholas and</font><font color="#E5E5E5"> this is</font>

2
00:01:10,260 --> 00:01:15,840
<font color="#E5E5E5">kevin and we're here to do this talk for</font>

3
00:01:12,630 --> 00:01:18,060
you<font color="#E5E5E5"> so just to make sure we're all the</font>

4
00:01:15,840 --> 00:01:21,840
right page<font color="#CCCCCC"> random embedded development</font>

5
00:01:18,060 --> 00:01:23,790
<font color="#CCCCCC">different and we are here from the</font>

6
00:01:21,840 --> 00:01:26,100
robotics<font color="#CCCCCC"> Association and the beautiful</font>

7
00:01:23,790 --> 00:01:28,170
city of often<font color="#E5E5E5"> which is very rainy</font>

8
00:01:26,100 --> 00:01:32,460
sometimes<font color="#E5E5E5"> and we're here to do this talk</font>

9
00:01:28,170 --> 00:01:35,580
about this logo and my<font color="#E5E5E5"> handle and get</font>

10
00:01:32,460 --> 00:01:38,580
<font color="#CCCCCC">service</font><font color="#E5E5E5"> so Kenya</font><font color="#CCCCCC"> and this is akeem so</font>

11
00:01:35,580 --> 00:01:41,520
let's first talk a little<font color="#E5E5E5"> little bit</font>

12
00:01:38,580 --> 00:01:43,440
about my life<font color="#CCCCCC"> so generally i'm an</font>

13
00:01:41,520 --> 00:01:45,149
embedded<font color="#E5E5E5"> developer</font><font color="#CCCCCC"> I i</font><font color="#E5E5E5"> developed</font>

14
00:01:43,440 --> 00:01:47,460
software on<font color="#CCCCCC"> microcontrollers so it's</font>

15
00:01:45,149 --> 00:01:50,220
extremely<font color="#CCCCCC"> level and this</font><font color="#E5E5E5"> is essentially</font>

16
00:01:47,460 --> 00:01:52,619
my story so<font color="#CCCCCC"> I find a new microcontroller</font>

17
00:01:50,220 --> 00:01:54,810
it's awesome and<font color="#CCCCCC"> I think i can i'm ready</font>

18
00:01:52,619 --> 00:01:57,360
to take the next step<font color="#CCCCCC"> so I go through</font>

19
00:01:54,810 --> 00:01:59,820
<font color="#E5E5E5">all this documentation and then finally</font>

20
00:01:57,360 --> 00:02:01,619
I get to write some code and then this

21
00:01:59,820 --> 00:02:04,169
new<font color="#CCCCCC"> micro controller comes</font><font color="#E5E5E5"> along with</font>

22
00:02:01,619 --> 00:02:05,460
new features and the same thing happens

23
00:02:04,170 --> 00:02:08,220
again<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have to crawl through all this</font>

24
00:02:05,460 --> 00:02:10,799
documentation and then<font color="#CCCCCC"> I write some code</font>

25
00:02:08,220 --> 00:02:13,650
and essentially what<font color="#CCCCCC"> I've done is I've</font>

26
00:02:10,799 --> 00:02:15,959
<font color="#CCCCCC">expressed</font><font color="#E5E5E5"> the same task</font><font color="#CCCCCC"> in different</font>

27
00:02:13,650 --> 00:02:17,760
code<font color="#E5E5E5"> and this is obviously</font><font color="#CCCCCC"> a bit stupid</font>

28
00:02:15,959 --> 00:02:20,400
<font color="#E5E5E5">because as a computer scientist you're</font>

29
00:02:17,760 --> 00:02:23,790
like to not work at all

30
00:02:20,400 --> 00:02:26,610
preferably<font color="#E5E5E5"> and so the motivation here is</font>

31
00:02:23,790 --> 00:02:29,100
<font color="#CCCCCC">two-part</font><font color="#E5E5E5"> preferably right identical code</font>

32
00:02:26,610 --> 00:02:30,570
for multiple microcontrollers and if

33
00:02:29,100 --> 00:02:32,310
you've read through a lot of

34
00:02:30,570 --> 00:02:33,840
microcontroller documentation you find

35
00:02:32,310 --> 00:02:35,640
out that there are a lot of similarities

36
00:02:33,840 --> 00:02:37,799
between microcontrollers and<font color="#E5E5E5"> we</font>

37
00:02:35,640 --> 00:02:41,040
essentially compiled all of this into a

38
00:02:37,799 --> 00:02:44,400
nice library and added some goodies like

39
00:02:41,040 --> 00:02:46,078
<font color="#E5E5E5">object-oriented features and you know</font>

40
00:02:44,400 --> 00:02:48,420
it's written in<font color="#CCCCCC"> c++ and you can write</font>

41
00:02:46,079 --> 00:02:50,790
<font color="#E5E5E5">almost identical code on multiple</font>

42
00:02:48,420 --> 00:02:54,179
targets<font color="#E5E5E5"> so</font>

43
00:02:50,790 --> 00:02:56,700
<font color="#E5E5E5">let's talk about the structure</font><font color="#CCCCCC"> were</font>

44
00:02:54,180 --> 00:02:58,530
first<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not going to go and</font>

45
00:02:56,700 --> 00:02:59,219
tell you the<font color="#CCCCCC"> API because that's really</font>

46
00:02:58,530 --> 00:03:00,870
boring

47
00:02:59,219 --> 00:03:03,090
instead<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to talk a little bit</font>

48
00:03:00,870 --> 00:03:04,769
about concepts and<font color="#CCCCCC"> explained in someone</font>

49
00:03:03,090 --> 00:03:06,840
line code examples how we actually

50
00:03:04,769 --> 00:03:08,159
implemented that<font color="#CCCCCC"> and first of all we're</font>

51
00:03:06,840 --> 00:03:11,790
going to talk about concepts and the

52
00:03:08,159 --> 00:03:13,620
interfaces of<font color="#CCCCCC"> X pc then we're going to</font>

53
00:03:11,790 --> 00:03:16,078
talk about how we use these interfaces

54
00:03:13,620 --> 00:03:18,450
to<font color="#CCCCCC"> write drivers for external hardware</font>

55
00:03:16,079 --> 00:03:20,400
<font color="#CCCCCC">this is low</font><font color="#E5E5E5"> level so it's not</font>

56
00:03:18,450 --> 00:03:22,230
<font color="#E5E5E5">don't confuse this with linux kernel</font>

57
00:03:20,400 --> 00:03:24,269
we're actually talking about<font color="#CCCCCC"> low level</font>

58
00:03:22,230 --> 00:03:25,980
stuff here and then<font color="#E5E5E5"> Kevin is going to</font>

59
00:03:24,269 --> 00:03:27,480
take over to talk a little bit about the

60
00:03:25,980 --> 00:03:30,090
magic behind all of this

61
00:03:27,480 --> 00:03:34,349
our build system and about the current

62
00:03:30,090 --> 00:03:37,470
state and<font color="#E5E5E5"> the future work so there's</font><font color="#CCCCCC"> a</font>

63
00:03:34,349 --> 00:03:39,659
lot in XP see that we're not going to

64
00:03:37,470 --> 00:03:42,389
talk about<font color="#CCCCCC"> i</font><font color="#E5E5E5"> personally think of it in</font>

65
00:03:39,659 --> 00:03:44,548
three parts<font color="#E5E5E5"> so we have very generic</font>

66
00:03:42,389 --> 00:03:46,739
<font color="#E5E5E5">coach that can run on pretty much any</font>

67
00:03:44,549 --> 00:03:49,919
platform without any change to the code

68
00:03:46,739 --> 00:03:54,810
such as<font color="#CCCCCC"> route-finding algorithms matrix</font>

69
00:03:49,919 --> 00:03:56,669
multiplications workflow stuff and then

70
00:03:54,810 --> 00:03:59,519
<font color="#CCCCCC">protocols as well communication</font>

71
00:03:56,669 --> 00:04:01,440
protocols and then we have things where

72
00:03:59,519 --> 00:04:04,139
you need to kind of know what<font color="#CCCCCC"> in to</font>

73
00:04:01,440 --> 00:04:08,159
connect to what other pin<font color="#E5E5E5"> so it's more</font>

74
00:04:04,139 --> 00:04:09,599
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> near and obviously our</font><font color="#CCCCCC"> powerful</font>

75
00:04:08,159 --> 00:04:11,250
<font color="#E5E5E5">interfaces which</font><font color="#CCCCCC"> we are going to</font><font color="#E5E5E5"> talk</font>

76
00:04:09,599 --> 00:04:13,709
<font color="#E5E5E5">about and then there's the hardcore</font>

77
00:04:11,250 --> 00:04:16,949
<font color="#E5E5E5">low-level axis where you actually have</font>

78
00:04:13,709 --> 00:04:19,649
to look<font color="#E5E5E5"> at the data sheet and access</font><font color="#CCCCCC"> red</font>

79
00:04:16,949 --> 00:04:23,130
registers and we're going to talk about

80
00:04:19,649 --> 00:04:26,010
these three lower layers in<font color="#E5E5E5"> particular</font>

81
00:04:23,130 --> 00:04:28,320
the<font color="#E5E5E5"> independent peripheral interfaces so</font>

82
00:04:26,010 --> 00:04:31,229
let's talk a little about about how a

83
00:04:28,320 --> 00:04:33,180
<font color="#E5E5E5">microcontroller looks like that's how it</font>

84
00:04:31,229 --> 00:04:35,460
looks like it's a black box with lots

85
00:04:33,180 --> 00:04:39,030
and lots of pins<font color="#E5E5E5"> and for some reason</font>

86
00:04:35,460 --> 00:04:41,039
these pins must be there so<font color="#E5E5E5"> i could</font>

87
00:04:39,030 --> 00:04:43,080
assume<font color="#CCCCCC"> that they're used for some sense</font>

88
00:04:41,039 --> 00:04:43,979
of intelligent input output and yes

89
00:04:43,080 --> 00:04:47,490
that's true

90
00:04:43,979 --> 00:04:49,080
so in general<font color="#E5E5E5"> you can say that every</font>

91
00:04:47,490 --> 00:04:52,409
<font color="#CCCCCC">micro controller has at least this</font>

92
00:04:49,080 --> 00:04:54,900
functionality you have some form of

93
00:04:52,409 --> 00:04:57,240
input you can read it it will return a 1

94
00:04:54,900 --> 00:04:59,190
or 0<font color="#E5E5E5"> depending on how you configure it</font>

95
00:04:57,240 --> 00:05:01,529
<font color="#E5E5E5">whether</font><font color="#CCCCCC"> it's high</font><font color="#E5E5E5"> level or lower level</font>

96
00:04:59,190 --> 00:05:02,050
<font color="#E5E5E5">and you can do the same by setting</font><font color="#CCCCCC"> an</font>

97
00:05:01,529 --> 00:05:04,870
output

98
00:05:02,050 --> 00:05:07,930
<font color="#E5E5E5">and this should actually be satisfied by</font>

99
00:05:04,870 --> 00:05:09,940
every target out there<font color="#E5E5E5"> and this is the</font>

100
00:05:07,930 --> 00:05:12,669
first example of such an interface which

101
00:05:09,940 --> 00:05:15,490
you can do on every<font color="#CCCCCC"> microcontroller so</font>

102
00:05:12,669 --> 00:05:18,008
<font color="#E5E5E5">the traditional way of implementing this</font>

103
00:05:15,490 --> 00:05:49,830
is using a function call where you do

104
00:05:18,009 --> 00:05:53,190
all this functionality

105
00:05:49,830 --> 00:05:55,020
<font color="#CCCCCC">serial module in your microcontroller</font>

106
00:05:53,190 --> 00:05:56,730
you need to connect up to the outside

107
00:05:55,020 --> 00:05:59,340
world<font color="#E5E5E5"> and you can do that in the pin</font>

108
00:05:56,730 --> 00:06:03,450
class<font color="#E5E5E5"> so we have this nice</font><font color="#CCCCCC"> connect</font>

109
00:05:59,340 --> 00:06:06,150
method which we get free<font color="#CCCCCC"> type checking</font>

110
00:06:03,450 --> 00:06:09,030
<font color="#E5E5E5">at compile time so you know it works</font>

111
00:06:06,150 --> 00:06:11,340
<font color="#E5E5E5">even before you apply it to your code of</font>

112
00:06:09,030 --> 00:06:13,080
course you never know if it if it works

113
00:06:11,340 --> 00:06:16,679
because you're not a good<font color="#CCCCCC"> programmer</font><font color="#E5E5E5"> in</font>

114
00:06:13,080 --> 00:06:18,840
<font color="#E5E5E5">general but the cool bonuses you know</font>

115
00:06:16,680 --> 00:06:20,160
what you did<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it's there in your</font>

116
00:06:18,840 --> 00:06:21,929
code you don't need to write a comment

117
00:06:20,160 --> 00:06:25,830
it is<font color="#E5E5E5"> there in your code it works</font>

118
00:06:21,930 --> 00:06:27,780
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> no other way so this is this</font>

119
00:06:25,830 --> 00:06:30,090
<font color="#E5E5E5">gpio interface is available on all these</font>

120
00:06:27,780 --> 00:06:33,570
targets<font color="#E5E5E5"> the</font><font color="#CCCCCC"> expensive see framework</font>

121
00:06:30,090 --> 00:06:36,270
works on the<font color="#CCCCCC"> atty tiny 1890 mega xmega</font>

122
00:06:33,570 --> 00:06:37,890
blah blah<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> on 8-bit</font>

123
00:06:36,270 --> 00:06:40,620
microcontrollers and<font color="#E5E5E5"> on 32-bit</font>

124
00:06:37,890 --> 00:06:44,430
microcontrollers<font color="#E5E5E5"> which is actually quite</font>

125
00:06:40,620 --> 00:06:47,280
neat<font color="#E5E5E5"> and if you apply the same logic of</font>

126
00:06:44,430 --> 00:06:49,110
finding the most common interface is the

127
00:06:47,280 --> 00:06:51,479
most common code for all these

128
00:06:49,110 --> 00:06:53,490
interfaces you can see that there are a

129
00:06:51,480 --> 00:06:55,890
lot of interfaces which all these<font color="#E5E5E5"> micro</font>

130
00:06:53,490 --> 00:06:58,500
<font color="#E5E5E5">controller support so i squared</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> the</font>

131
00:06:55,890 --> 00:07:01,110
serial interface obviously you have<font color="#CCCCCC"> spi</font>

132
00:06:58,500 --> 00:07:03,240
and something that we use to communicate

133
00:07:01,110 --> 00:07:06,900
inside<font color="#E5E5E5"> our robots to control area</font>

134
00:07:03,240 --> 00:07:12,000
network which<font color="#E5E5E5"> is also used in cars and</font>

135
00:07:06,900 --> 00:07:13,049
let's talk a bit about our relationship

136
00:07:12,000 --> 00:07:15,210
here for a second

137
00:07:13,050 --> 00:07:16,950
so I'm a computer scientist well I

138
00:07:15,210 --> 00:07:19,049
<font color="#E5E5E5">studied computer science and he</font><font color="#CCCCCC"> studied</font>

139
00:07:16,950 --> 00:07:20,729
<font color="#CCCCCC">Electrical Engineering and</font><font color="#E5E5E5"> I come back</font><font color="#CCCCCC"> I</font>

140
00:07:19,050 --> 00:07:22,350
come from<font color="#CCCCCC"> and human-computer</font><font color="#E5E5E5"> interaction</font>

141
00:07:20,730 --> 00:07:24,420
background and<font color="#CCCCCC"> i'm always bickering</font>

142
00:07:22,350 --> 00:07:26,910
about usability and he's always about

143
00:07:24,420 --> 00:07:29,490
going on about efficiency and that's

144
00:07:26,910 --> 00:07:32,670
essentially what we end up with<font color="#CCCCCC"> so i</font>

145
00:07:29,490 --> 00:07:34,260
want to tell the system what I want and

146
00:07:32,670 --> 00:07:35,820
I don't want to look up the<font color="#CCCCCC"> data sheet</font>

147
00:07:34,260 --> 00:07:38,340
and find out exactly how to do it

148
00:07:35,820 --> 00:07:40,500
because<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> lazy and</font><font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to</font>

149
00:07:38,340 --> 00:07:43,200
explain to you what<font color="#CCCCCC"> i mean</font><font color="#E5E5E5"> by this</font>

150
00:07:40,500 --> 00:07:46,290
this<font color="#E5E5E5"> don't do this just please for god</font>

151
00:07:43,200 --> 00:07:48,840
sakes don't do this<font color="#E5E5E5"> ever</font><font color="#CCCCCC"> like I have no</font>

152
00:07:46,290 --> 00:07:50,760
clue<font color="#E5E5E5"> of the brightest in fact you</font><font color="#CCCCCC"> forced</font>

153
00:07:48,840 --> 00:07:53,039
me<font color="#CCCCCC"> to do this to go through all of these</font>

154
00:07:50,760 --> 00:07:54,390
documents<font color="#CCCCCC"> find out what the system clock</font>

155
00:07:53,040 --> 00:07:56,190
<font color="#CCCCCC">right is that matchup is currently</font>

156
00:07:54,390 --> 00:07:58,950
running find out how the algorithm works

157
00:07:56,190 --> 00:08:00,060
and i still have no guarantee that this

158
00:07:58,950 --> 00:08:02,820
actually works

159
00:08:00,060 --> 00:08:04,860
so this is<font color="#E5E5E5"> a bad idea</font>

160
00:08:02,820 --> 00:08:07,740
<font color="#E5E5E5">in general the solution to</font><font color="#CCCCCC"> the</font>

161
00:08:04,860 --> 00:08:11,040
<font color="#CCCCCC">resistance to compile it is to to</font>

162
00:08:07,740 --> 00:08:14,160
calculate the settings at<font color="#E5E5E5"> runtime and</font>

163
00:08:11,040 --> 00:08:16,530
that's<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> but you have no way of</font>

164
00:08:14,160 --> 00:08:18,390
knowing whether the value that actually

165
00:08:16,530 --> 00:08:20,669
<font color="#CCCCCC">worth else in this is</font><font color="#E5E5E5"> actually the value</font>

166
00:08:18,390 --> 00:08:23,550
that you put in there<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example in</font>

167
00:08:20,670 --> 00:08:26,190
this example<font color="#E5E5E5"> it's not the</font><font color="#CCCCCC"> bottom</font><font color="#E5E5E5"> right</font>

168
00:08:23,550 --> 00:08:31,140
that's in your code it also waste time

169
00:08:26,190 --> 00:08:33,870
you know because<font color="#E5E5E5"> and</font><font color="#CCCCCC"> spacey so</font><font color="#E5E5E5"> instead</font>

170
00:08:31,140 --> 00:08:35,640
what we do in<font color="#E5E5E5"> XP see</font><font color="#CCCCCC"> we move the</font>

171
00:08:33,870 --> 00:08:37,620
calculation to compile time using

172
00:08:35,640 --> 00:08:40,199
template<font color="#E5E5E5"> magic and constant expression</font>

173
00:08:37,620 --> 00:08:45,720
functions and that still doesn't exactly

174
00:08:40,200 --> 00:08:47,400
solve the issue of of the of knowing

175
00:08:45,720 --> 00:08:50,820
whether that value actually is the value

176
00:08:47,400 --> 00:08:52,590
that you get out<font color="#E5E5E5"> but at least</font><font color="#CCCCCC"> it's</font>

177
00:08:50,820 --> 00:08:54,360
efficient because the only thing that is

178
00:08:52,590 --> 00:08:56,760
stored in your program<font color="#E5E5E5"> court or the</font>

179
00:08:54,360 --> 00:09:00,930
actual register values that you<font color="#E5E5E5"> can copy</font>

180
00:08:56,760 --> 00:09:03,480
into the register at<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> it does</font>

181
00:09:00,930 --> 00:09:05,339
some basic checking<font color="#E5E5E5"> like whether it's</font>

182
00:09:03,480 --> 00:09:07,860
even possible<font color="#CCCCCC"> if you have a very low</font>

183
00:09:05,340 --> 00:09:09,960
<font color="#CCCCCC">baud rate</font><font color="#E5E5E5"> the prescaler might have been</font>

184
00:09:07,860 --> 00:09:11,940
under<font color="#E5E5E5"> run</font><font color="#CCCCCC"> or a very high baud rate it</font>

185
00:09:09,960 --> 00:09:14,340
<font color="#E5E5E5">might be an</font><font color="#CCCCCC"> over under around</font><font color="#E5E5E5"> depending</font>

186
00:09:11,940 --> 00:09:16,680
<font color="#CCCCCC">and you</font><font color="#E5E5E5"> don't need to open</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> data sheet</font>

187
00:09:14,340 --> 00:09:19,890
<font color="#E5E5E5">because the intelligence is actually in</font>

188
00:09:16,680 --> 00:09:21,810
the function call and it's as I said it

189
00:09:19,890 --> 00:09:24,540
doesn't solve<font color="#E5E5E5"> exactly the issue of</font>

190
00:09:21,810 --> 00:09:26,430
knowing whether this is the value<font color="#E5E5E5"> that's</font>

191
00:09:24,540 --> 00:09:27,959
<font color="#E5E5E5">why we added a tolerance so you can</font>

192
00:09:26,430 --> 00:09:30,780
discuss back to the to what<font color="#CCCCCC"> i said you</font>

193
00:09:27,960 --> 00:09:33,750
can<font color="#E5E5E5"> be clear</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> the spot rate and I</font>

194
00:09:30,780 --> 00:09:37,020
want this exact tolerance and if this is

195
00:09:33,750 --> 00:09:39,570
not achievable and the compiler will

196
00:09:37,020 --> 00:09:42,150
throw you a warning<font color="#CCCCCC"> one error</font><font color="#E5E5E5"> actually</font>

197
00:09:39,570 --> 00:09:45,780
<font color="#E5E5E5">an error and you can see that then the</font>

198
00:09:42,150 --> 00:09:47,699
compiler calculates the nearest possible

199
00:09:45,780 --> 00:09:50,069
<font color="#E5E5E5">bar trade using the current</font>

200
00:09:47,700 --> 00:09:52,590
configuration of the clock tree of the

201
00:09:50,070 --> 00:09:56,100
<font color="#CCCCCC">the preschoolers</font><font color="#E5E5E5"> and it will give you</font><font color="#CCCCCC"> to</font>

202
00:09:52,590 --> 00:09:58,230
<font color="#CCCCCC">you</font><font color="#E5E5E5"> it's not as beautiful unfortunately</font>

203
00:09:56,100 --> 00:10:01,140
because in general template errors and

204
00:09:58,230 --> 00:10:02,130
C++ compilers are not beautiful<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font>

205
00:10:01,140 --> 00:10:06,090
<font color="#E5E5E5">it's better than nothing</font>

206
00:10:02,130 --> 00:10:08,700
that's what we get<font color="#E5E5E5"> and so that's that</font>

207
00:10:06,090 --> 00:10:11,160
was an example of how we think about

208
00:10:08,700 --> 00:10:13,230
these interfaces and now you might be

209
00:10:11,160 --> 00:10:15,160
asking yourself why do we use these

210
00:10:13,230 --> 00:10:17,800
interfaces in any case

211
00:10:15,160 --> 00:10:20,290
and obviously as<font color="#CCCCCC"> I said microcontrollers</font>

212
00:10:17,800 --> 00:10:22,209
have a lot of pins and you generally

213
00:10:20,290 --> 00:10:23,949
want to connect something to these<font color="#CCCCCC"> pins</font>

214
00:10:22,209 --> 00:10:28,508
and in this case it's an inertial

215
00:10:23,949 --> 00:10:30,310
measurement unit and the question is can

216
00:10:28,509 --> 00:10:32,500
i write this driver to be

217
00:10:30,310 --> 00:10:36,008
<font color="#CCCCCC">platform-independent</font><font color="#E5E5E5"> who here thinks yes</font>

218
00:10:32,500 --> 00:10:40,540
raise your hand<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> two level</font>

219
00:10:36,009 --> 00:10:42,100
people<font color="#CCCCCC"> so yes you can</font><font color="#E5E5E5"> because you you</font>

220
00:10:40,540 --> 00:10:44,589
must<font color="#E5E5E5"> think in protocols</font>

221
00:10:42,100 --> 00:10:48,430
this is the this is a defined protocol

222
00:10:44,589 --> 00:10:50,439
it's a distinct<font color="#E5E5E5"> chip and you can write a</font>

223
00:10:48,430 --> 00:10:52,449
<font color="#CCCCCC">platform-independent</font><font color="#E5E5E5"> driver because we</font>

224
00:10:50,439 --> 00:10:56,740
already have these interfaces they speak

225
00:10:52,449 --> 00:10:58,508
these protocols and<font color="#E5E5E5"> you can build your</font>

226
00:10:56,740 --> 00:11:00,250
hardware drivers on top of each other

227
00:10:58,509 --> 00:11:03,160
and that's exactly what we've done in<font color="#E5E5E5"> XP</font>

228
00:11:00,250 --> 00:11:06,310
see this is essentially what we've done

229
00:11:03,160 --> 00:11:08,920
so you have your<font color="#E5E5E5"> storm</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> three</font>

230
00:11:06,310 --> 00:11:10,989
devices on your<font color="#E5E5E5"> ice creams</font><font color="#CCCCCC"> c-bus and</font>

231
00:11:08,920 --> 00:11:13,599
they only talk through this interface

232
00:11:10,990 --> 00:11:15,250
and the driver doesn't care whether on

233
00:11:13,600 --> 00:11:16,930
what platform it is because the

234
00:11:15,250 --> 00:11:17,470
interface is always satisfied the same

235
00:11:16,930 --> 00:11:19,329
way

236
00:11:17,470 --> 00:11:21,370
in fact<font color="#E5E5E5"> you can even write a</font><font color="#CCCCCC"> softer</font>

237
00:11:19,329 --> 00:11:23,290
<font color="#E5E5E5">emulator which then uses the</font><font color="#CCCCCC"> gpio</font>

238
00:11:21,370 --> 00:11:26,829
classes to be truly<font color="#CCCCCC"> platform-independent</font>

239
00:11:23,290 --> 00:11:28,360
<font color="#E5E5E5">so that's what we've done also</font><font color="#CCCCCC"> we don't</font>

240
00:11:26,829 --> 00:11:31,329
<font color="#E5E5E5">have time to talk about this but there's</font>

241
00:11:28,360 --> 00:11:33,339
a<font color="#CCCCCC"> detective aren't bonus</font><font color="#E5E5E5"> the entire</font><font color="#CCCCCC"> API</font>

242
00:11:31,329 --> 00:11:35,500
is one<font color="#E5E5E5"> of the entire but at least 4i</font>

243
00:11:33,339 --> 00:11:38,050
squared<font color="#E5E5E5"> C is</font><font color="#CCCCCC"> non-blocking</font><font color="#E5E5E5"> on callback</font>

244
00:11:35,500 --> 00:11:42,069
based<font color="#E5E5E5"> so it's really fun to write these</font>

245
00:11:38,050 --> 00:11:45,370
drivers<font color="#E5E5E5"> and now Kevin</font><font color="#CCCCCC"> will talk a</font><font color="#E5E5E5"> little</font>

246
00:11:42,069 --> 00:11:49,479
bit about the build system is smarter

247
00:11:45,370 --> 00:11:51,790
than<font color="#E5E5E5"> I am but</font><font color="#CCCCCC"> ok so let me go on and</font>

248
00:11:49,480 --> 00:11:54,279
just take it from where<font color="#E5E5E5"> Nicholas left</font>

249
00:11:51,790 --> 00:11:57,339
you and well beyond<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> go a little</font>

250
00:11:54,279 --> 00:11:59,079
bit back to the black box again and as

251
00:11:57,339 --> 00:12:02,170
an electrical engineer<font color="#CCCCCC"> i make some</font>

252
00:11:59,079 --> 00:12:04,750
observations<font color="#CCCCCC"> i can see that</font><font color="#E5E5E5"> they're all</font>

253
00:12:02,170 --> 00:12:07,120
those pins and those pins don't change

254
00:12:04,750 --> 00:12:09,459
once the<font color="#E5E5E5"> chips but used so that's what</font><font color="#CCCCCC"> I</font>

255
00:12:07,120 --> 00:12:12,040
<font color="#CCCCCC">cause static nothing</font><font color="#E5E5E5"> changes during</font>

256
00:12:09,459 --> 00:12:13,869
<font color="#E5E5E5">runtime or in your product and also if</font>

257
00:12:12,040 --> 00:12:16,029
<font color="#E5E5E5">you go little bit under the surface here</font>

258
00:12:13,870 --> 00:12:17,420
you see<font color="#CCCCCC"> the</font><font color="#E5E5E5"> support diagram of nesting</font>

259
00:12:16,029 --> 00:12:18,560
<font color="#CCCCCC">324</font>

260
00:12:17,420 --> 00:12:20,900
and you can see<font color="#E5E5E5"> they're all those</font>

261
00:12:18,560 --> 00:12:22,369
different<font color="#E5E5E5"> interfaces</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> all those</font>

262
00:12:20,900 --> 00:12:24,500
<font color="#E5E5E5">different</font><font color="#CCCCCC"> performers</font><font color="#E5E5E5"> connected to a bus</font>

263
00:12:22,370 --> 00:12:27,320
and they don't change you don't get

264
00:12:24,500 --> 00:12:29,810
<font color="#CCCCCC">added interfaces or they don't know they</font>

265
00:12:27,320 --> 00:12:33,020
don't leave the<font color="#CCCCCC"> chip</font><font color="#E5E5E5"> during runtime</font><font color="#CCCCCC"> so</font>

266
00:12:29,810 --> 00:12:36,589
what<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> getting at is that we want to</font>

267
00:12:33,020 --> 00:12:39,050
model this in software and what comes to

268
00:12:36,590 --> 00:12:41,030
mind when<font color="#CCCCCC"> were</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> c++ using</font><font color="#E5E5E5"> study</font>

269
00:12:39,050 --> 00:12:45,890
classes so<font color="#E5E5E5"> classes that only have</font>

270
00:12:41,030 --> 00:12:49,040
<font color="#E5E5E5">setting methods that only that only</font><font color="#CCCCCC"> have</font>

271
00:12:45,890 --> 00:12:51,890
<font color="#E5E5E5">static members and what this guess is</font>

272
00:12:49,040 --> 00:12:55,310
that what we're getting at with this is

273
00:12:51,890 --> 00:12:57,080
that you have all those<font color="#E5E5E5"> peripherals and</font>

274
00:12:55,310 --> 00:12:59,359
we want to generate<font color="#CCCCCC"> a cross from</font><font color="#E5E5E5"> every</font>

275
00:12:57,080 --> 00:13:01,340
<font color="#E5E5E5">one of those</font><font color="#CCCCCC"> so now you say well this is</font>

276
00:12:59,360 --> 00:13:03,200
a lot of things to do<font color="#CCCCCC"> why Cannot just</font>

277
00:13:01,340 --> 00:13:06,050
not just have like one your class and

278
00:13:03,200 --> 00:13:08,840
then<font color="#E5E5E5"> give it the index and say like you</font>

279
00:13:06,050 --> 00:13:10,459
create a new<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> what</font>

280
00:13:08,840 --> 00:13:12,050
this is a little bit<font color="#CCCCCC"> error prone because</font>

281
00:13:10,460 --> 00:13:13,790
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> imagine</font><font color="#CCCCCC"> you're running on my</font>

282
00:13:12,050 --> 00:13:15,349
controller so there's no way to report

283
00:13:13,790 --> 00:13:16,819
<font color="#CCCCCC">errors</font><font color="#E5E5E5"> on your regular system you can</font>

284
00:13:15,350 --> 00:13:17,960
just don't like doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> certain your</font>

285
00:13:16,820 --> 00:13:19,760
program crashes and<font color="#E5E5E5"> there's an</font><font color="#CCCCCC"> error</font>

286
00:13:17,960 --> 00:13:21,740
message<font color="#E5E5E5"> or whatever</font><font color="#CCCCCC"> on my control you</font>

287
00:13:19,760 --> 00:13:23,030
have no no good way of telling the user

288
00:13:21,740 --> 00:13:25,460
<font color="#E5E5E5">whether something wrong</font>

289
00:13:23,030 --> 00:13:27,920
so if the user creates<font color="#E5E5E5"> you are with</font><font color="#CCCCCC"> a</font>

290
00:13:25,460 --> 00:13:29,930
<font color="#E5E5E5">wrong idea</font><font color="#CCCCCC"> it will just not work and the</font>

291
00:13:27,920 --> 00:13:31,969
<font color="#CCCCCC">US</font><font color="#E5E5E5"> doesn't know why</font><font color="#CCCCCC"> if we have a class</font>

292
00:13:29,930 --> 00:13:34,640
<font color="#CCCCCC">wherever you</font><font color="#E5E5E5"> are you can only use the</font>

293
00:13:31,970 --> 00:13:35,690
classes that are provided<font color="#E5E5E5"> and also it's</font>

294
00:13:34,640 --> 00:13:37,040
a little<font color="#E5E5E5"> bit more efficient to</font><font color="#CCCCCC"> use</font>

295
00:13:35,690 --> 00:13:39,050
<font color="#CCCCCC">static</font><font color="#E5E5E5"> classes because you will never</font>

296
00:13:37,040 --> 00:13:43,339
have to calculate any<font color="#CCCCCC"> autumn</font><font color="#E5E5E5"> offsets in</font>

297
00:13:39,050 --> 00:13:45,290
memory<font color="#E5E5E5"> so now we know that we want asset</font>

298
00:13:43,340 --> 00:13:48,140
class for every prefer<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the there are</font>

299
00:13:45,290 --> 00:13:50,390
certain problems<font color="#CCCCCC"> one is that we need to</font>

300
00:13:48,140 --> 00:13:52,189
know for each device that we support for

301
00:13:50,390 --> 00:13:55,010
every my controller has different

302
00:13:52,190 --> 00:13:56,930
peripherals<font color="#CCCCCC"> so we need to know what</font>

303
00:13:55,010 --> 00:13:59,210
<font color="#CCCCCC">peripherals</font><font color="#E5E5E5"> are supported</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our device</font>

304
00:13:56,930 --> 00:14:01,699
<font color="#E5E5E5">and that's what we're that's why we came</font>

305
00:13:59,210 --> 00:14:03,620
up with the<font color="#CCCCCC"> xml device files what you</font>

306
00:14:01,700 --> 00:14:06,290
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see here is that we got the file for</font>

307
00:14:03,620 --> 00:14:08,750
an stm32 have photos<font color="#E5E5E5"> 7 it is different</font>

308
00:14:06,290 --> 00:14:09,650
variations and it can't realize what

309
00:14:08,750 --> 00:14:11,360
kind of memory

310
00:14:09,650 --> 00:14:12,800
the device has and what kind of

311
00:14:11,360 --> 00:14:15,290
<font color="#CCCCCC">referrals that use we're actually</font>

312
00:14:12,800 --> 00:14:18,469
creating those<font color="#CCCCCC"> xml files through a</font>

313
00:14:15,290 --> 00:14:20,180
process<font color="#E5E5E5"> of for a script that we wrote</font>

314
00:14:18,470 --> 00:14:22,640
from the manufacturer information so

315
00:14:20,180 --> 00:14:24,229
that's pretty easy to get that<font color="#E5E5E5"> and you</font>

316
00:14:22,640 --> 00:14:26,600
can also<font color="#E5E5E5"> just by hand if</font><font color="#CCCCCC"> there are some</font>

317
00:14:24,230 --> 00:14:28,640
problems<font color="#CCCCCC"> of it and then she received</font>

318
00:14:26,600 --> 00:14:33,050
that we have the peripheral<font color="#CCCCCC"> is it has</font>

319
00:14:28,640 --> 00:14:34,580
<font color="#CCCCCC">uart</font><font color="#E5E5E5"> and that tells the build system to</font>

320
00:14:33,050 --> 00:14:36,770
search for<font color="#CCCCCC"> you our driver and the u.s.</font>

321
00:14:34,580 --> 00:14:39,500
driver has an additional<font color="#CCCCCC"> xml file that</font>

322
00:14:36,770 --> 00:14:42,829
tells you<font color="#CCCCCC"> the talents abilities and what</font>

323
00:14:39,500 --> 00:14:45,500
kind of files it needs<font color="#E5E5E5"> so now we got one</font>

324
00:14:42,830 --> 00:14:47,840
another problem<font color="#CCCCCC"> we're all developers</font>

325
00:14:45,500 --> 00:14:50,300
<font color="#E5E5E5">were all lazy and we don't want to ride</font>

326
00:14:47,840 --> 00:14:52,910
<font color="#E5E5E5">duplicate code</font><font color="#CCCCCC"> like I</font><font color="#E5E5E5"> said we would like</font>

327
00:14:50,300 --> 00:14:54,979
to have like one basic template and use

328
00:14:52,910 --> 00:14:56,810
that<font color="#E5E5E5"> to regenerate</font><font color="#CCCCCC"> all the your classes</font>

329
00:14:54,980 --> 00:14:58,850
for example<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> what we do</font>

330
00:14:56,810 --> 00:15:00,859
<font color="#E5E5E5">we got all those in</font><font color="#CCCCCC"> France</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> are our</font>

331
00:14:58,850 --> 00:15:03,440
template files and<font color="#CCCCCC"> be generate all the</font>

332
00:15:00,860 --> 00:15:05,480
<font color="#CCCCCC">you are</font><font color="#E5E5E5"> yours that we need and to do</font>

333
00:15:03,440 --> 00:15:07,040
this<font color="#CCCCCC"> we're using the ginger to template</font>

334
00:15:05,480 --> 00:15:09,770
<font color="#CCCCCC">engine</font><font color="#E5E5E5"> which comes from that development</font>

335
00:15:07,040 --> 00:15:12,380
but it fits our<font color="#CCCCCC"> the</font><font color="#E5E5E5"> thing that we need</font>

336
00:15:09,770 --> 00:15:13,699
<font color="#E5E5E5">quite a quite neatly and also one</font><font color="#CCCCCC"> cool</font>

337
00:15:12,380 --> 00:15:15,380
thing<font color="#E5E5E5"> that we can do is we can check</font>

338
00:15:13,700 --> 00:15:18,320
what kind of target we're building<font color="#E5E5E5"> this</font>

339
00:15:15,380 --> 00:15:19,760
driver<font color="#E5E5E5"> for so for example if one</font>

340
00:15:18,320 --> 00:15:21,470
<font color="#E5E5E5">manufacturer</font><font color="#CCCCCC"> and only</font><font color="#E5E5E5"> uses the same</font>

341
00:15:19,760 --> 00:15:24,530
<font color="#E5E5E5">peripherals for every control that he</font>

342
00:15:21,470 --> 00:15:26,600
<font color="#CCCCCC">puts out</font><font color="#E5E5E5"> but they change certain</font><font color="#CCCCCC"> subtle</font>

343
00:15:24,530 --> 00:15:28,850
<font color="#CCCCCC">things like for example they renamed the</font>

344
00:15:26,600 --> 00:15:30,800
data register to transmit data<font color="#CCCCCC"> restore</font>

345
00:15:28,850 --> 00:15:32,270
<font color="#CCCCCC">the editor transfer data register for</font>

346
00:15:30,800 --> 00:15:34,520
the<font color="#CCCCCC"> f0 and their three which actually</font>

347
00:15:32,270 --> 00:15:36,260
the newer ones<font color="#E5E5E5"> and so here we can do</font>

348
00:15:34,520 --> 00:15:37,490
checking and see which kind of

349
00:15:36,260 --> 00:15:39,260
<font color="#CCCCCC">registered we need so we don't need to</font>

350
00:15:37,490 --> 00:15:41,510
write a whole new driver for them but we

351
00:15:39,260 --> 00:15:45,230
can just do some basic checking in in

352
00:15:41,510 --> 00:15:48,200
the template and so<font color="#E5E5E5"> our</font><font color="#CCCCCC"> build system</font><font color="#E5E5E5"> is</font>

353
00:15:45,230 --> 00:15:50,960
based on<font color="#E5E5E5"> scans which is</font><font color="#CCCCCC"> also some runs</font>

354
00:15:48,200 --> 00:15:53,120
with with<font color="#CCCCCC"> python so it's easy to extend</font>

355
00:15:50,960 --> 00:15:54,830
we have a lot of custom<font color="#CCCCCC"> piping scripts</font>

356
00:15:53,120 --> 00:15:58,220
that<font color="#CCCCCC"> then do all of this that the</font><font color="#E5E5E5"> to</font>

357
00:15:54,830 --> 00:15:59,900
<font color="#CCCCCC">look at</font><font color="#E5E5E5"> for you that generator drivers</font>

358
00:15:58,220 --> 00:16:01,580
for you and it-it-it even<font color="#E5E5E5"> tracks</font>

359
00:15:59,900 --> 00:16:05,689
dependency so if you change the template

360
00:16:01,580 --> 00:16:06,830
file and you sponsor<font color="#CCCCCC"> us construct your</font>

361
00:16:05,690 --> 00:16:08,390
program again

362
00:16:06,830 --> 00:16:10,880
yeah you don't we make it with that<font color="#CCCCCC"> is</font>

363
00:16:08,390 --> 00:16:13,220
<font color="#E5E5E5">constructed or whatever and so when you</font>

364
00:16:10,880 --> 00:16:14,600
do that it<font color="#E5E5E5"> didn't realize it</font>

365
00:16:13,220 --> 00:16:16,370
<font color="#E5E5E5">that is all the</font><font color="#CCCCCC"> template that has</font>

366
00:16:14,600 --> 00:16:18,379
<font color="#E5E5E5">changed</font><font color="#CCCCCC"> so i need to regenerate all</font>

367
00:16:16,370 --> 00:16:21,860
those header and<font color="#CCCCCC"> c++ sighs and</font><font color="#E5E5E5"> compile</font>

368
00:16:18,379 --> 00:16:25,160
<font color="#E5E5E5">them again so that was quite neatly and</font>

369
00:16:21,860 --> 00:16:27,230
so<font color="#CCCCCC"> where we want to like for a long-term</font>

370
00:16:25,160 --> 00:16:30,050
<font color="#CCCCCC">we want to like reach</font><font color="#E5E5E5"> little bit further</font>

371
00:16:27,230 --> 00:16:32,509
and generate the whole<font color="#CCCCCC"> x pci very hot</font>

372
00:16:30,050 --> 00:16:34,758
right<font color="#E5E5E5"> now we're just generating the</font>

373
00:16:32,509 --> 00:16:36,560
peripheral drivers<font color="#E5E5E5"> but we want to like</font>

374
00:16:34,759 --> 00:16:38,629
make it possible to have<font color="#CCCCCC"> library</font>

375
00:16:36,560 --> 00:16:39,859
description then select all the drivers

376
00:16:38,629 --> 00:16:41,389
that you want<font color="#E5E5E5"> you have seen their like</font>

377
00:16:39,860 --> 00:16:43,129
all those different layers that we

378
00:16:41,389 --> 00:16:44,180
<font color="#CCCCCC">covered with our</font><font color="#E5E5E5"> library and you might</font>

379
00:16:43,129 --> 00:16:45,949
not want to have all of this in your

380
00:16:44,180 --> 00:16:48,079
library and then you can get a custom

381
00:16:45,949 --> 00:16:49,670
library<font color="#E5E5E5"> and that also fits embedded</font>

382
00:16:48,079 --> 00:16:51,589
development quite neatly<font color="#CCCCCC"> trimmed with</font>

383
00:16:49,670 --> 00:16:54,229
<font color="#CCCCCC">the my</font><font color="#E5E5E5"> controllers but what you want to</font>

384
00:16:51,589 --> 00:16:55,639
have is for some<font color="#E5E5E5"> companies state they</font>

385
00:16:54,230 --> 00:16:57,230
have their custom build system so you

386
00:16:55,639 --> 00:16:58,790
want to use<font color="#CCCCCC"> spc</font><font color="#E5E5E5"> with their custom build</font>

387
00:16:57,230 --> 00:17:00,500
system<font color="#E5E5E5"> since we're doing all</font><font color="#CCCCCC"> those</font>

388
00:16:58,790 --> 00:17:02,750
<font color="#E5E5E5">templates</font><font color="#CCCCCC"> tough with all</font><font color="#E5E5E5"> those thousands</font>

389
00:17:00,500 --> 00:17:05,000
of<font color="#E5E5E5"> line of piping</font><font color="#CCCCCC"> we cannot take and</font>

390
00:17:02,750 --> 00:17:07,309
just<font color="#E5E5E5"> use our library but if you do this</font>

391
00:17:05,000 --> 00:17:09,289
<font color="#E5E5E5">they generate the library ones and then</font>

392
00:17:07,309 --> 00:17:12,859
they can use it with<font color="#E5E5E5"> their custom build</font>

393
00:17:09,289 --> 00:17:14,929
system<font color="#E5E5E5"> and also you can just put</font><font color="#CCCCCC"> it in</font><font color="#E5E5E5"> a</font>

394
00:17:12,859 --> 00:17:17,149
zip file<font color="#E5E5E5"> check it</font><font color="#CCCCCC"> in internally and I</font>

395
00:17:14,929 --> 00:17:18,679
think that<font color="#E5E5E5"> fits the way better</font>

396
00:17:17,150 --> 00:17:21,949
development<font color="#E5E5E5"> of these for my</font><font color="#CCCCCC"> control so</font>

397
00:17:18,679 --> 00:17:24,770
<font color="#CCCCCC">it works a little</font><font color="#E5E5E5"> bit more nicely</font><font color="#CCCCCC"> but in</font>

398
00:17:21,949 --> 00:17:25,850
the<font color="#E5E5E5"> meantime there's some more like your</font>

399
00:17:24,770 --> 00:17:28,069
term goals

400
00:17:25,849 --> 00:17:30,469
it would be great<font color="#CCCCCC"> if anyone</font><font color="#E5E5E5"> of you ever</font>

401
00:17:28,069 --> 00:17:32,418
like once<font color="#E5E5E5"> have a look at x pci maybe use</font>

402
00:17:30,470 --> 00:17:34,159
<font color="#E5E5E5">it</font><font color="#CCCCCC"> in your project</font><font color="#E5E5E5"> a good way to get</font>

403
00:17:32,419 --> 00:17:37,669
started is to get one of those<font color="#E5E5E5"> are</font>

404
00:17:34,159 --> 00:17:39,080
stm32f4 or<font color="#E5E5E5"> three discovery boards</font><font color="#CCCCCC"> there</font>

405
00:17:37,669 --> 00:17:41,690
<font color="#CCCCCC">anything you can get</font><font color="#E5E5E5"> a pretty cheap from</font>

406
00:17:39,080 --> 00:17:44,178
from st and we have good support for

407
00:17:41,690 --> 00:17:46,520
them<font color="#E5E5E5"> you can just check out XP</font><font color="#CCCCCC"> see going</font>

408
00:17:44,179 --> 00:17:47,809
<font color="#E5E5E5">two examples go</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> follow</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> named</font>

409
00:17:46,520 --> 00:17:50,090
<font color="#E5E5E5">after</font><font color="#CCCCCC"> you're bored and then you</font><font color="#E5E5E5"> have all</font>

410
00:17:47,809 --> 00:17:52,220
<font color="#E5E5E5">the examples that you can just use and</font>

411
00:17:50,090 --> 00:17:55,010
you can just use<font color="#E5E5E5"> sconce program and just</font>

412
00:17:52,220 --> 00:17:57,200
<font color="#CCCCCC">will put the</font><font color="#E5E5E5"> code onto your board also</font>

413
00:17:55,010 --> 00:17:59,690
if we need to improve our documentation

414
00:17:57,200 --> 00:18:01,700
and if ever anyone you ever have a look

415
00:17:59,690 --> 00:18:03,590
at our library and says well okay<font color="#CCCCCC"> thats</font>

416
00:18:01,700 --> 00:18:05,299
<font color="#CCCCCC">need</font><font color="#E5E5E5"> but it took me a long time to find</font>

417
00:18:03,590 --> 00:18:06,889
out if you want to write a blog post

418
00:18:05,299 --> 00:18:09,168
about<font color="#E5E5E5"> it or whatever we can always</font>

419
00:18:06,890 --> 00:18:11,630
include that in our documentation<font color="#CCCCCC"> also</font>

420
00:18:09,169 --> 00:18:13,220
if<font color="#CCCCCC"> you're getting started with 4x pc and</font>

421
00:18:11,630 --> 00:18:15,309
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> want to do</font><font color="#E5E5E5"> anything to do is maybe</font>

422
00:18:13,220 --> 00:18:17,679
write an<font color="#CCCCCC"> icy driver</font><font color="#E5E5E5"> and</font>

423
00:18:15,309 --> 00:18:19,450
<font color="#E5E5E5">maybe do a pull request or</font><font color="#CCCCCC"> find our</font>

424
00:18:17,679 --> 00:18:21,159
mailing list and say hey<font color="#CCCCCC"> I think this is</font>

425
00:18:19,450 --> 00:18:22,659
<font color="#CCCCCC">the driver can you integrate that and</font>

426
00:18:21,159 --> 00:18:25,749
we're always happy to do that

427
00:18:22,659 --> 00:18:27,580
also if you want to add<font color="#CCCCCC"> ya if you have</font>

428
00:18:25,749 --> 00:18:29,799
one of the<font color="#CCCCCC"> sem controllers for example</font>

429
00:18:27,580 --> 00:18:32,080
you want to add an advanced feature<font color="#CCCCCC"> just</font>

430
00:18:29,799 --> 00:18:34,240
<font color="#CCCCCC">go ahead and have a look at the other</font>

431
00:18:32,080 --> 00:18:35,139
peripheral drivers and<font color="#E5E5E5"> try to add one</font>

432
00:18:34,240 --> 00:18:36,610
yourself

433
00:18:35,139 --> 00:18:38,559
you can also just<font color="#CCCCCC"> asked questions on the</font>

434
00:18:36,610 --> 00:18:40,928
mailing list of<font color="#E5E5E5"> that's a problem</font><font color="#CCCCCC"> with</font>

435
00:18:38,559 --> 00:18:43,149
their problems<font color="#CCCCCC"> and also expresses</font><font color="#E5E5E5"> you</font>

436
00:18:40,929 --> 00:18:45,340
can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> pointed to a new platforms</font><font color="#E5E5E5"> almost</font>

437
00:18:43,149 --> 00:18:47,830
like<font color="#E5E5E5"> almost any platform that has a GCC</font>

438
00:18:45,340 --> 00:18:52,059
compiler<font color="#CCCCCC"> you can get it running</font><font color="#E5E5E5"> pretty</font>

439
00:18:47,830 --> 00:18:53,470
easy or a<font color="#CCCCCC"> c++ compiler for example</font><font color="#E5E5E5"> there</font>

440
00:18:52,059 --> 00:18:55,149
<font color="#CCCCCC">are some support for the key 20 if</font>

441
00:18:53,470 --> 00:18:57,909
anyone<font color="#E5E5E5"> was working with that we have a</font>

442
00:18:55,149 --> 00:19:00,158
<font color="#CCCCCC">branch</font><font color="#E5E5E5"> it's called</font><font color="#CCCCCC"> macaque it's not in a</font>

443
00:18:57,909 --> 00:19:03,070
good<font color="#E5E5E5"> state but</font><font color="#CCCCCC"> there's a little</font><font color="#E5E5E5"> bit of</font>

444
00:19:00,159 --> 00:19:05,350
support for the k20<font color="#E5E5E5"> and also support for</font>

445
00:19:03,070 --> 00:19:08,830
<font color="#CCCCCC">LPC</font><font color="#E5E5E5"> is there's a little bit but there's</font>

446
00:19:05,350 --> 00:19:11,049
not much for the<font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> arm devices and</font>

447
00:19:08,830 --> 00:19:13,059
<font color="#E5E5E5">for msp430 should all be possible so if</font>

448
00:19:11,049 --> 00:19:15,190
anyone is interested but says well I

449
00:19:13,059 --> 00:19:18,158
don't like the<font color="#CCCCCC"> the st devices or</font>

450
00:19:15,190 --> 00:19:20,470
whatever<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> that hard to port and</font>

451
00:19:18,159 --> 00:19:23,320
we will be happy to support you

452
00:19:20,470 --> 00:19:25,929
yeah so that's what we support<font color="#E5E5E5"> now we</font>

453
00:19:23,320 --> 00:19:28,570
support<font color="#CCCCCC"> the next and Mexico</font><font color="#E5E5E5"> success</font>

454
00:19:25,929 --> 00:19:30,610
<font color="#CCCCCC">house OS if you want to try you can also</font>

455
00:19:28,570 --> 00:19:32,230
try to run this on<font color="#CCCCCC"> Windows but i don't</font>

456
00:19:30,610 --> 00:19:36,309
think anyone<font color="#CCCCCC"> who</font><font color="#E5E5E5"> cares really</font>

457
00:19:32,230 --> 00:19:37,990
and<font color="#E5E5E5"> you the port with ya stm32</font><font color="#CCCCCC"> has got</font>

458
00:19:36,309 --> 00:19:40,779
reports work best

459
00:19:37,990 --> 00:19:42,340
the LPC<font color="#E5E5E5"> we</font><font color="#CCCCCC"> def</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> 41 LPC board</font><font color="#E5E5E5"> you</font>

460
00:19:40,779 --> 00:19:44,230
can just check<font color="#E5E5E5"> out our examples and see</font>

461
00:19:42,340 --> 00:19:46,149
what kind of<font color="#CCCCCC"> bored</font><font color="#E5E5E5"> to be named there was</font>

462
00:19:44,230 --> 00:19:49,570
<font color="#E5E5E5">a PC boards were pretty well and we</font>

463
00:19:46,149 --> 00:19:51,248
don't have any odd we know but the stuff

464
00:19:49,570 --> 00:19:53,860
works<font color="#CCCCCC"> and AVR so should be pretty easy</font>

465
00:19:51,249 --> 00:19:55,659
to run<font color="#E5E5E5"> around</font><font color="#CCCCCC"> with the board</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> yeah</font>

466
00:19:53,860 --> 00:19:59,289
you can<font color="#E5E5E5"> check out</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> check us</font><font color="#CCCCCC"> at our</font>

467
00:19:55,659 --> 00:20:00,820
library<font color="#E5E5E5"> on get up or just write an email</font>

468
00:19:59,289 --> 00:20:05,259
to our development<font color="#E5E5E5"> list</font><font color="#CCCCCC"> we're always</font>

469
00:20:00,820 --> 00:20:08,889
<font color="#E5E5E5">happy to answer any questions</font>

470
00:20:05,259 --> 00:20:11,799
<font color="#CCCCCC">yeah right if anyone here has</font><font color="#E5E5E5"> questions</font>

471
00:20:08,889 --> 00:20:13,299
<font color="#CCCCCC">ya out there you the</font><font color="#E5E5E5"> one the right</font><font color="#CCCCCC"> yeah</font>

472
00:20:11,799 --> 00:20:20,049
<font color="#E5E5E5">you're the one</font><font color="#CCCCCC"> who's</font>

473
00:20:13,299 --> 00:20:22,509
<font color="#CCCCCC">now know that manifest</font><font color="#E5E5E5"> some of the</font>

474
00:20:20,049 --> 00:20:25,869
<font color="#CCCCCC">manufacturers release xml</font><font color="#E5E5E5"> file so you</font>

475
00:20:22,509 --> 00:20:30,639
want<font color="#E5E5E5"> to say</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so it's better to me</font>

476
00:20:25,869 --> 00:20:32,499
so the<font color="#E5E5E5"> the ideal actually the idea was</font>

477
00:20:30,639 --> 00:20:34,029
to write these<font color="#CCCCCC"> divide these devices</font>

478
00:20:32,499 --> 00:20:36,909
<font color="#CCCCCC">files by hand</font><font color="#E5E5E5"> and that's why they're</font>

479
00:20:34,029 --> 00:20:39,399
very simple<font color="#E5E5E5"> but if you have 200 devices</font>

480
00:20:36,909 --> 00:20:44,139
this gets kind of tiring<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> found some</font>

481
00:20:39,399 --> 00:20:46,600
obscure files on the internet that

482
00:20:44,139 --> 00:20:48,189
describe these things<font color="#E5E5E5"> in memory mapping</font>

483
00:20:46,600 --> 00:20:50,049
and stuff and then<font color="#CCCCCC"> i just</font><font color="#E5E5E5"> wrote a python</font>

484
00:20:48,190 --> 00:20:53,379
script that gets all this information

485
00:20:50,049 --> 00:20:55,629
out<font color="#E5E5E5"> compresses it a little and then you</font>

486
00:20:53,379 --> 00:20:57,309
can have these<font color="#E5E5E5"> compressed nice device</font>

487
00:20:55,629 --> 00:21:00,399
<font color="#CCCCCC">was not compressed in the sense of</font>

488
00:20:57,309 --> 00:21:02,259
compression but if<font color="#E5E5E5"> aggregates the</font>

489
00:21:00,399 --> 00:21:11,830
information and puts it displays<font color="#CCCCCC"> that</font>

490
00:21:02,259 --> 00:21:13,809
nicely<font color="#E5E5E5"> so that's that's nice because you</font>

491
00:21:11,830 --> 00:21:15,580
don't have to know because we give you

492
00:21:13,809 --> 00:21:19,299
the device<font color="#E5E5E5"> files so there's no licensing</font>

493
00:21:15,580 --> 00:21:21,639
problem and yeah<font color="#E5E5E5"> I mean we generated</font>

494
00:21:19,299 --> 00:21:24,369
<font color="#CCCCCC">them you can if you have we're</font><font color="#E5E5E5"> still</font>

495
00:21:21,639 --> 00:21:26,619
<font color="#E5E5E5">using the</font><font color="#CCCCCC"> official</font><font color="#E5E5E5"> using the head header</font>

496
00:21:24,369 --> 00:21:28,869
files from the<font color="#E5E5E5"> medication with the with</font>

497
00:21:26,619 --> 00:21:30,908
the register layout

498
00:21:28,869 --> 00:21:32,619
yes so if<font color="#E5E5E5"> they're if there's something</font>

499
00:21:30,909 --> 00:21:34,119
in the header<font color="#E5E5E5"> file</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> doesn't make if</font>

500
00:21:32,619 --> 00:21:36,100
in the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> the fight that we</font><font color="#E5E5E5"> use our</font>

501
00:21:34,119 --> 00:21:38,529
<font color="#E5E5E5">source if that</font><font color="#CCCCCC"> doesn't exist just</font>

502
00:21:36,100 --> 00:21:42,730
<font color="#CCCCCC">compiled</font><font color="#E5E5E5"> so we will just notice</font>

503
00:21:38,529 --> 00:21:47,710
yes<font color="#CCCCCC"> your</font><font color="#E5E5E5"> place</font>

504
00:21:42,730 --> 00:21:59,919
<font color="#CCCCCC">to class 3 class to class</font>

505
00:21:47,710 --> 00:22:05,020
<font color="#CCCCCC">vsd vsd</font><font color="#E5E5E5"> license using</font><font color="#CCCCCC"> spc yes</font><font color="#E5E5E5"> yes yes</font>

506
00:21:59,919 --> 00:22:08,710
<font color="#E5E5E5">that is anticipated that question and</font>

507
00:22:05,020 --> 00:22:11,049
<font color="#CCCCCC">I'm gonna ask you</font><font color="#E5E5E5"> can iron so what do we</font>

508
00:22:08,710 --> 00:22:13,570
got to compare different ways of doing

509
00:22:11,049 --> 00:22:15,250
stuff for example what<font color="#CCCCCC"> I do when I got</font>

510
00:22:13,570 --> 00:22:18,010
started<font color="#CCCCCC"> with a new driver i just wrote</font>

511
00:22:15,250 --> 00:22:19,600
an<font color="#CCCCCC"> MDMA driver for the sem and</font><font color="#E5E5E5"> I what I</font>

512
00:22:18,010 --> 00:22:22,330
<font color="#E5E5E5">did first as</font><font color="#CCCCCC"> i wrote everything to</font>

513
00:22:19,600 --> 00:22:23,770
register so that<font color="#E5E5E5"> that's like the small</font>

514
00:22:22,330 --> 00:22:25,330
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> graduate in code size and</font>

515
00:22:23,770 --> 00:22:27,340
stuff<font color="#E5E5E5"> because it all pre-calculated just</font>

516
00:22:25,330 --> 00:22:29,500
<font color="#CCCCCC">write</font><font color="#E5E5E5"> one value to it and what</font><font color="#CCCCCC"> I did</font>

517
00:22:27,340 --> 00:22:31,209
then is<font color="#CCCCCC"> I added like three methods to</font>

518
00:22:29,500 --> 00:22:33,130
configure the DNA because if<font color="#CCCCCC"> I would be</font>

519
00:22:31,210 --> 00:22:35,320
useful to have a good<font color="#CCCCCC"> dynamic configured</font>

520
00:22:33,130 --> 00:22:38,230
<font color="#CCCCCC">and connect two</font><font color="#E5E5E5"> stores connector</font><font color="#CCCCCC"> sync</font><font color="#E5E5E5"> so</font>

521
00:22:35,320 --> 00:22:41,230
<font color="#CCCCCC">what it does then it like every method</font>

522
00:22:38,230 --> 00:22:42,970
is on his<font color="#E5E5E5"> own so what it has to do that</font>

523
00:22:41,230 --> 00:22:44,830
one configuration register<font color="#CCCCCC"> so every</font>

524
00:22:42,970 --> 00:22:47,650
other<font color="#E5E5E5"> neglected to</font><font color="#CCCCCC"> cause</font><font color="#E5E5E5"> after first</font>

525
00:22:44,830 --> 00:22:49,720
configuration<font color="#CCCCCC"> you gotta you gotta read</font>

526
00:22:47,650 --> 00:22:51,309
back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> configuration</font><font color="#CCCCCC"> register</font><font color="#E5E5E5"> then just</font>

527
00:22:49,720 --> 00:22:52,960
change the value<font color="#CCCCCC"> in london</font><font color="#E5E5E5"> by the back</font>

528
00:22:51,309 --> 00:22:57,370
<font color="#E5E5E5">so there's a little bit of overhead</font><font color="#CCCCCC"> and</font>

529
00:22:52,960 --> 00:22:59,799
<font color="#CCCCCC">code</font><font color="#E5E5E5"> size for example</font><font color="#CCCCCC"> i headed 65 bites</font>

530
00:22:57,370 --> 00:23:01,989
that<font color="#E5E5E5"> what</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> did</font><font color="#CCCCCC"> buy what you have is</font>

531
00:22:59,799 --> 00:23:03,940
especially the critical surface what the

532
00:23:01,990 --> 00:23:05,980
things that are called a lot of<font color="#E5E5E5"> times</font>

533
00:23:03,940 --> 00:23:08,410
for example<font color="#CCCCCC"> gpio</font><font color="#E5E5E5"> said</font><font color="#CCCCCC"> implant notes to</font>

534
00:23:05,980 --> 00:23:11,950
grow a set and reset<font color="#E5E5E5"> and that actually</font>

535
00:23:08,410 --> 00:23:13,660
<font color="#E5E5E5">just</font><font color="#CCCCCC"> compile</font><font color="#E5E5E5"> the way it's a</font><font color="#CCCCCC"> we put a lot</font>

536
00:23:11,950 --> 00:23:15,340
of stuff<font color="#E5E5E5"> and</font><font color="#CCCCCC"> header files which doesn't</font>

537
00:23:13,660 --> 00:23:16,840
<font color="#E5E5E5">necessarily benefit compile time but</font>

538
00:23:15,340 --> 00:23:20,320
it's not that much so it doesn't really

539
00:23:16,840 --> 00:23:21,939
matter<font color="#E5E5E5"> and so what you get for example</font>

540
00:23:20,320 --> 00:23:25,809
<font color="#CCCCCC">an AVR you just get a simple assembly</font>

541
00:23:21,940 --> 00:23:27,940
<font color="#E5E5E5">command that just sets your</font><font color="#CCCCCC"> attire</font><font color="#E5E5E5"> so</font>

542
00:23:25,809 --> 00:23:29,950
<font color="#E5E5E5">it's it's it's it's a little bit of</font>

543
00:23:27,940 --> 00:23:32,710
overhead compared to writing letters on

544
00:23:29,950 --> 00:23:35,140
yourself<font color="#E5E5E5"> which is kind of ridiculous</font>

545
00:23:32,710 --> 00:23:37,450
<font color="#E5E5E5">photos</font><font color="#CCCCCC"> pic devices</font><font color="#E5E5E5"> but if you compare</font>

546
00:23:35,140 --> 00:23:40,270
for example to a<font color="#CCCCCC"> c++ library that</font>

547
00:23:37,450 --> 00:23:42,250
doesn't use<font color="#CCCCCC"> linkedin</font><font color="#E5E5E5"> optimization</font><font color="#CCCCCC"> our</font>

548
00:23:40,270 --> 00:23:43,990
stuff<font color="#E5E5E5"> is mostly but not most of the</font>

549
00:23:42,250 --> 00:23:46,780
<font color="#E5E5E5">times better because we use a lot of</font>

550
00:23:43,990 --> 00:23:47,660
static stuff like templates and we<font color="#E5E5E5"> we</font>

551
00:23:46,780 --> 00:23:52,730
<font color="#E5E5E5">try to</font>

552
00:23:47,660 --> 00:23:56,030
<font color="#CCCCCC">use</font><font color="#E5E5E5"> are always like</font><font color="#CCCCCC"> in our code that</font>

553
00:23:52,730 --> 00:23:59,060
<font color="#E5E5E5">something for normal people to translate</font>

554
00:23:56,030 --> 00:24:01,610
<font color="#CCCCCC">that essentially we we use static stuff</font>

555
00:23:59,060 --> 00:24:05,120
<font color="#E5E5E5">so there are we try and think about</font>

556
00:24:01,610 --> 00:24:07,100
function calls<font color="#CCCCCC"> so as I as he said most</font>

557
00:24:05,120 --> 00:24:09,439
of the<font color="#E5E5E5"> code</font><font color="#CCCCCC"> isnt header files and we do</font>

558
00:24:07,100 --> 00:24:12,110
aggressively<font color="#CCCCCC"> in line manually</font><font color="#E5E5E5"> so for</font>

559
00:24:09,440 --> 00:24:14,270
example if you only set a bit<font color="#E5E5E5"> of a</font>

560
00:24:12,110 --> 00:24:16,429
register the entire function is in line

561
00:24:14,270 --> 00:24:19,760
because<font color="#CCCCCC"> there you can</font><font color="#E5E5E5"> do a function call</font>

562
00:24:16,430 --> 00:24:21,320
in<font color="#E5E5E5"> less than it doesn't work so we we</font>

563
00:24:19,760 --> 00:24:24,860
have to manually<font color="#E5E5E5"> optimize this</font>

564
00:24:21,320 --> 00:24:28,280
sufficiently<font color="#E5E5E5"> so we do use certain</font>

565
00:24:24,860 --> 00:24:30,590
features<font color="#E5E5E5"> and</font><font color="#CCCCCC"> c++ steps are an overhead</font>

566
00:24:28,280 --> 00:24:33,889
for example virtual function calls which

567
00:24:30,590 --> 00:24:36,620
are<font color="#CCCCCC"> too i think to the</font><font color="#E5E5E5"> references on an</font>

568
00:24:33,890 --> 00:24:38,840
arm<font color="#E5E5E5"> core but on a</font><font color="#CCCCCC"> navy</font><font color="#E5E5E5"> are there more</font>

569
00:24:36,620 --> 00:24:42,080
calls because the<font color="#E5E5E5"> bus smaller than the</font>

570
00:24:38,840 --> 00:24:44,840
addressing<font color="#E5E5E5"> so there are certain things</font>

571
00:24:42,080 --> 00:24:48,080
that you need to know in order but it's

572
00:24:44,840 --> 00:24:50,929
still it's still a compromise between

573
00:24:48,080 --> 00:24:52,879
software engineering and efficiency but

574
00:24:50,930 --> 00:24:55,190
compared to traditional<font color="#E5E5E5"> c programming it</font>

575
00:24:52,880 --> 00:24:58,640
is actually quite efficient<font color="#E5E5E5"> so we don't</font>

576
00:24:55,190 --> 00:25:00,350
do like<font color="#CCCCCC"> over we don't do new we don't</font>

577
00:24:58,640 --> 00:25:03,020
allocate memory just because we need a

578
00:25:00,350 --> 00:25:06,080
new class it is there<font color="#CCCCCC"> that's I think</font><font color="#E5E5E5"> the</font>

579
00:25:03,020 --> 00:25:08,900
<font color="#E5E5E5">most important stuff</font><font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> to</font>

580
00:25:06,080 --> 00:25:09,590
<font color="#E5E5E5">have finished right</font><font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> for</font>

581
00:25:08,900 --> 00:25:14,860
listening

582
00:25:09,590 --> 00:25:14,860
yes

