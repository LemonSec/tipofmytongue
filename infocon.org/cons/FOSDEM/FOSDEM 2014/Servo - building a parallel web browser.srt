1
00:00:01,090 --> 00:00:04,230
a huge project and you're very lucky
because there is

2
00:00:04,230 --> 00:00:08,160
a very nice guy to present you that's
project some

3
00:00:08,160 --> 00:00:11,940
so just let uses a matzah and you know
who is working on a lot

4
00:00:11,940 --> 00:00:16,219
really a lot how different scenes
including private browsing

5
00:00:16,219 --> 00:00:20,859
sell more and contribute to engagement
he is also Mozilla

6
00:00:20,859 --> 00:00:25,150
Medupi of our Geolocation kooky and
private browsing called

7
00:00:25,150 --> 00:00:28,259
and is the creator oberg oh you

8
00:00:28,260 --> 00:00:31,279
a tool that helps you to do your
Facebook page

9
00:00:31,279 --> 00:00:35,850
this is really an incredible tool so you
more than invited to

10
00:00:35,850 --> 00:00:40,239
to try it hand josh is also and I can
attest if I

11
00:00:40,239 --> 00:00:46,160
on excelentes musician he is sinking for
a group lays kettle drum jumping and

12
00:00:46,160 --> 00:00:50,538
also geetar when he isn't busy doing
anything else

13
00:00:50,539 --> 00:00:57,539
so please welcome Josh cool

14
00:00:59,199 --> 00:01:03,000
thank you and thank you for coming so I
can tell you about

15
00:01:03,000 --> 00:01:06,590
servo and what we're doing that and what
it is and why it is

16
00:01:06,590 --> 00:01:10,549
an answer all your questions hopefully
and also a tell you how you can get

17
00:01:10,549 --> 00:01:11,170
involved

18
00:01:11,170 --> 00:01:14,909
so first what is servo

19
00:01:14,909 --> 00:01:18,479
the servo is a brand new browser engine

20
00:01:18,479 --> 00:01:22,048
and so a browser engine is something
like Blink or WebKit or gecko

21
00:01:22,049 --> 00:01:25,500
I'm so it's have the whole browser is
just a bit then renders the website

22
00:01:25,500 --> 00:01:26,590
execute the script

23
00:01:26,590 --> 00:01:29,890
and in particular servo is written

24
00:01:29,890 --> 00:01:33,780
in a new programming language that
Mozilla is created from scratch contrast

25
00:01:33,780 --> 00:01:37,229
and we've been working on that for
several years now and is nearing

26
00:01:37,229 --> 00:01:40,960
version 1.0 so servo

27
00:01:40,960 --> 00:01:44,329
is the new engine which is designed to
exploit

28
00:01:44,329 --> 00:01:49,220
a modern hardware I'm and ambien is
designed to really focus on performance

29
00:01:49,220 --> 00:01:50,270
and safety

30
00:01:50,270 --> 00:01:53,820
and I'll explain more about those
particular later

31
00:01:53,820 --> 00:01:57,100
I'm at also we're trying to make it so
it's really easy to embed

32
00:01:57,100 --> 00:02:00,460
we're going to build it behind the web
can bedding API so that theoretically

33
00:02:00,460 --> 00:02:03,710
you can just take any current browser
that you don't like it as well about

34
00:02:03,710 --> 00:02:05,509
several under the covers no just work

35
00:02:05,509 --> 00:02:09,810
um as for what it will be in the future

36
00:02:09,810 --> 00:02:13,780
is still hard to say because technically
it's really a research project and as

37
00:02:13,780 --> 00:02:17,209
being worked on by the muscle a research
team a but

38
00:02:17,209 --> 00:02:22,370
we suspect that in good a target for it
would be some kind of meh well product

39
00:02:22,370 --> 00:02:23,010
in the future

40
00:02:23,010 --> 00:02:26,239
so

41
00:02:26,239 --> 00:02:29,349
when when I tell people about servo and
how we're trying this new engine from

42
00:02:29,349 --> 00:02:29,940
scratch

43
00:02:29,940 --> 00:02:32,950
they often look at me like I'm a little
bit crazy because

44
00:02:32,950 --> 00:02:36,268
billion brothers hard it turns out I'm

45
00:02:36,269 --> 00:02:40,620
but there are two reasons for this:
basically all the brothers that are used

46
00:02:40,620 --> 00:02:41,510
to using

47
00:02:41,510 --> 00:02:44,790
were designed before for the year two
thousand

48
00:02:44,790 --> 00:02:48,650
and hardware that time was very
different usually only had one core

49
00:02:48,650 --> 00:02:52,220
I'm clutch major very different you have
much less memory available to you

50
00:02:52,220 --> 00:02:56,230
and so things like a multi-threaded
programming

51
00:02:56,230 --> 00:03:00,369
weren't built in from the start and the
bands are bolted on after the fact

52
00:03:00,370 --> 00:03:03,640
so the problem with existing engines is
that

53
00:03:03,640 --> 00:03:07,760
their giant and their various
architectural decisions which

54
00:03:07,760 --> 00:03:11,409
are built into them which is very
difficult to modify turns out

55
00:03:11,409 --> 00:03:14,319
a man it's really hard to run
experiments to find out whether it be

56
00:03:14,319 --> 00:03:15,560
worth committing

57
00:03:15,560 --> 00:03:19,360
to doing like big rewrites to take
revenge on modern hardware

58
00:03:19,360 --> 00:03:23,010
because that's a huge investment for
something that may not actually work

59
00:03:23,010 --> 00:03:26,450
I'm and so the third point

60
00:03:26,450 --> 00:03:30,200
i wanna talk about is that security and
performance are hard and so you might

61
00:03:30,200 --> 00:03:31,099
let me say will

62
00:03:31,099 --> 00:03:34,440
if it's hard why are you starting from
scratch again

63
00:03:34,440 --> 00:03:38,560
but we know they're hard I me know this
because

64
00:03:38,560 --> 00:03:42,540
there are exploits in every single
browser engine

65
00:03:42,540 --> 00:03:45,909
every single year and that doesn't
change and

66
00:03:45,909 --> 00:03:49,599
performance there's a there's a constant
race to get a little bit faster than the

67
00:03:49,599 --> 00:03:50,349
other engines

68
00:03:50,349 --> 00:03:53,569
I'm but often you're working against

69
00:03:53,569 --> 00:03:56,720
the architectural constraints that are
imposed on you by the existing code

70
00:03:56,720 --> 00:04:00,819
so we think that we can do better on
both security and performance

71
00:04:00,819 --> 00:04:04,238
if we built from the ground up with the
understanding of the problems

72
00:04:04,239 --> 00:04:08,489
that we have from years experience so
here's our basic

73
00:04:08,489 --> 00:04:12,530
modern browser architecture if you go to
page you hit the network

74
00:04:12,530 --> 00:04:16,410
and then that feeds into the HTML parser
which parses

75
00:04:16,410 --> 00:04:20,880
it into a DOM tree which then guess
computed into geometry and that just

76
00:04:20,880 --> 00:04:21,269
means

77
00:04:21,269 --> 00:04:24,720
you take the elements the page and you
lay them out according to where they

78
00:04:24,720 --> 00:04:25,729
should be

79
00:04:25,729 --> 00:04:29,520
and you take to resolve that and you
feed that into a renderer

80
00:04:29,520 --> 00:04:33,150
so you can paint it on the screen and
once that happens then you wanna start

81
00:04:33,150 --> 00:04:34,630
executing JavaScript

82
00:04:34,630 --> 00:04:37,759
and a jab step can and cannot modify the
page content taken

83
00:04:37,759 --> 00:04:41,300
append elements to it Andrea as I they
need to review the geometry

84
00:04:41,300 --> 00:04:44,600
and so there's little loop here that
just keeps going back and forth

85
00:04:44,600 --> 00:04:48,470
now modern engines will often be able to

86
00:04:48,470 --> 00:04:52,130
do things like I'm do the actual
painting the screen in parallel

87
00:04:52,130 --> 00:04:55,800
and so then you just have a loop between
computing and executing

88
00:04:55,800 --> 00:04:58,820
but even still there's a lotta love

89
00:04:58,820 --> 00:05:04,580
cereal and sequential operations here
which we believe we can do better

90
00:05:04,580 --> 00:05:07,650
now you have engines like Blink which

91
00:05:07,650 --> 00:05:11,000
do things like have a different process
per tab and so that's one way of

92
00:05:11,000 --> 00:05:12,280
explaining her LysM

93
00:05:12,280 --> 00:05:15,299
because that way tabs can operate
independently

94
00:05:15,300 --> 00:05:21,380
but even still its you're still use of
cereal and execution within each tab

95
00:05:21,380 --> 00:05:24,860
and again this is somewhere where we
believe the servo can improve on the sea

96
00:05:24,860 --> 00:05:26,430
the art

97
00:05:26,430 --> 00:05:29,660
so here's the server architecture
basically a

98
00:05:29,660 --> 00:05:33,710
if you have a tab or you you go to page
and we create something called a

99
00:05:33,710 --> 00:05:34,620
consolation

100
00:05:34,620 --> 00:05:37,919
and that's just a box that's just like
something that allows

101
00:05:37,919 --> 00:05:42,530
servo to talk to you something we help I
plans and a pipeline this case

102
00:05:42,530 --> 00:05:45,698
is is like that several execution they
saw before

103
00:05:45,699 --> 00:05:49,300
so a pipeline encapsulates a script ask

104
00:05:49,300 --> 00:05:52,889
delay a task and render a task and I
think task because

105
00:05:52,889 --> 00:05:56,020
rest is a programming language that is
built around

106
00:05:56,020 --> 00:05:59,039
um an abstraction that is like threads

107
00:05:59,039 --> 00:06:02,830
call tasks but it's sort of like green
threads that means anything to you

108
00:06:02,830 --> 00:06:07,448
its threads that Kenny make a little bit
better use your processor sometimes

109
00:06:07,449 --> 00:06:11,050
so in Reston task is isolated

110
00:06:11,050 --> 00:06:15,050
so there's no shared memory between them
a man is on message-passing

111
00:06:15,050 --> 00:06:18,479
and so in this case these boxes mean

112
00:06:18,479 --> 00:06:22,039
that the render world will be operating
in parallel

113
00:06:22,039 --> 00:06:24,979
with the script ask and script task will
be operating in parallel with the layout

114
00:06:24,979 --> 00:06:25,818
ask

115
00:06:25,819 --> 00:06:29,560
and so these are all isolated from each
other and they all get to

116
00:06:29,560 --> 00:06:34,530
run at their own speeds so if you have a
single page was just has been to content

117
00:06:34,530 --> 00:06:35,309
on it

118
00:06:35,310 --> 00:06:38,530
you get a pipeline and all these things
can can happen in parallel that's a

119
00:06:38,530 --> 00:06:39,679
little better salish

120
00:06:39,680 --> 00:06:43,430
several is Asian because obviously you
need to have something laid out before

121
00:06:43,430 --> 00:06:44,410
you can render it

122
00:06:44,410 --> 00:06:47,660
but after that then if you do something
like

123
00:06:47,660 --> 00:06:52,000
resize the window then the layer can
happen independently UHV

124
00:06:52,000 --> 00:06:57,300
painting your existing content as you
get a much smoother experience that way

125
00:06:57,300 --> 00:07:00,330
now certain a little bit different
because

126
00:07:00,330 --> 00:07:04,190
we can also break this down into iframes
on page

127
00:07:04,190 --> 00:07:07,210
and so in in a an engine light blink

128
00:07:07,210 --> 00:07:11,250
will have an iframe and the contents of
the iframe will have to be computed

129
00:07:11,250 --> 00:07:15,300
before the rest the page can be computed
whereas in several

130
00:07:15,300 --> 00:07:20,349
this to happen in peril sometimes so
they have a page in sorrow in iframe

131
00:07:20,349 --> 00:07:24,199
we have a separate isolated render for
that iframe

132
00:07:24,199 --> 00:07:28,030
which will do its own painting into the
place on the page for the iframe exists

133
00:07:28,030 --> 00:07:31,530
and I'll have your own separated
isolated layout ask what should be

134
00:07:31,530 --> 00:07:34,318
computing the geometry for the iframe
contents

135
00:07:34,319 --> 00:07:38,319
I'm and then the the overarching page
containing iframe

136
00:07:38,319 --> 00:07:41,949
well then just get the results of that
and be able to relate everything around

137
00:07:41,949 --> 00:07:45,289
the box without having to wait on it now

138
00:07:45,289 --> 00:07:49,289
it's missing a script ask here because
there's a special case for iPad games

139
00:07:49,289 --> 00:07:52,378
if you have an iframe which shares in
origin with the

140
00:07:52,379 --> 00:07:55,129
enclosing page that means you're
actually able to interact with each

141
00:07:55,129 --> 00:07:55,960
other

142
00:07:55,960 --> 00:08:00,520
and so it's not safe to have they're
both they're a piece the script running

143
00:08:00,520 --> 00:08:03,770
simultaneously because then you get race
conditions

144
00:08:03,770 --> 00:08:06,969
so in this case may be running and only
one

145
00:08:06,970 --> 00:08:10,259
iframe would be running script at a time
but everything else is happening in

146
00:08:10,259 --> 00:08:11,849
parallel

147
00:08:11,849 --> 00:08:15,590
now the other architectural vanished a
servo is that if you have a cross origin

148
00:08:15,590 --> 00:08:16,210
iframe

149
00:08:16,210 --> 00:08:20,210
for example an advertisement where are
you seeing those

150
00:08:20,210 --> 00:08:25,250
we can we can take advantage of the fact
that those are not allowed to interact

151
00:08:25,250 --> 00:08:25,979
with

152
00:08:25,979 --> 00:08:30,210
been closing pages done so that means
they can have a transcript ask

153
00:08:30,210 --> 00:08:33,289
so suddenly you have and a and

154
00:08:33,289 --> 00:08:36,630
at iframe which mites be

155
00:08:36,630 --> 00:08:41,260
doing something really bad and maybe
using more CPU then you prefer

156
00:08:41,260 --> 00:08:44,689
and so in something I Firefox or blink
now be a problem because they'll be

157
00:08:44,690 --> 00:08:46,290
interfering with the execution

158
00:08:46,290 --> 00:08:49,449
up the closing page buser know that
doesn't have to happen

159
00:08:49,450 --> 00:08:54,160
and in addition if something goes wrong
in service code and we failed assertion

160
00:08:54,160 --> 00:08:57,319
what we can do in this case with
isolation as we gonna tear down that

161
00:08:57,320 --> 00:08:57,959
iframe

162
00:08:57,959 --> 00:09:01,079
and display little unhappy face and the
rest the page

163
00:09:01,080 --> 00:09:05,130
can continue operating normally this is
something no other browser engine can do

164
00:09:05,130 --> 00:09:08,200
at the moment

165
00:09:08,200 --> 00:09:11,660
and in addition we get course Carlos I'm
just like any other browser

166
00:09:11,660 --> 00:09:15,760
because all this can be replicated in it
so nicely in fashion for each tab

167
00:09:15,760 --> 00:09:20,089
so it was pretty excited so thorough is
also

168
00:09:20,089 --> 00:09:23,350
experimenting with other really
interesting research problems

169
00:09:23,350 --> 00:09:27,560
I am in particular para layout is
something that we think we can get big

170
00:09:27,560 --> 00:09:28,829
wins

171
00:09:28,830 --> 00:09:32,420
so regular layout in any modern browser
engine

172
00:09:32,420 --> 00:09:36,019
perceives sequentially so far to the top

173
00:09:36,019 --> 00:09:39,140
and you need to go to Egypt child
element

174
00:09:39,140 --> 00:09:42,170
and you'll need to lay down the page to
figure out where they exist

175
00:09:42,170 --> 00:09:45,920
because other things at the same level
little choir

176
00:09:45,920 --> 00:09:50,399
that knowledge in order to lay out
themselves and so there's

177
00:09:50,399 --> 00:09:54,200
optimizations that browsers do where
they'll

178
00:09:54,200 --> 00:09:57,670
reach all over the DOM tree and try to
find were other things are and see

179
00:09:57,670 --> 00:09:59,319
whether they actually do care

180
00:09:59,320 --> 00:10:02,589
whether those those elements have been
laid out

181
00:10:02,589 --> 00:10:06,600
um and if not then they can they can do
optimizations to skip part to the layout

182
00:10:06,600 --> 00:10:11,529
and this is how we achieve performance
optimizations in modern browser engines

183
00:10:11,529 --> 00:10:15,230
now with several we think we can do
better

184
00:10:15,230 --> 00:10:19,320
we can do is we can break down and four
certain classes

185
00:10:19,320 --> 00:10:23,180
a web pages we can say we don't actually
need to care

186
00:10:23,180 --> 00:10:27,189
about the other parts of the page we
know that we can lay out certain parts

187
00:10:27,190 --> 00:10:28,130
the tree

188
00:10:28,130 --> 00:10:31,589
independently and so those can be farmed
out to other processors

189
00:10:31,589 --> 00:10:35,570
and other isolate tasks and and in
particular

190
00:10:35,570 --> 00:10:39,660
we'll even after do some trees we can
just split out individual children

191
00:10:39,660 --> 00:10:43,199
um and and use techniques like work
stealing to make sure that

192
00:10:43,200 --> 00:10:47,220
all other processors are always fully
engaged in laying out a page

193
00:10:47,220 --> 00:10:51,350
I'm without without having to resort to
sequential operations

194
00:10:51,350 --> 00:10:54,690
or I have problems based on like really
1

195
00:10:54,690 --> 00:10:58,500
but if the left re was really deep in
the right tree wasn't on

196
00:10:58,500 --> 00:11:02,540
with works the Living Dead up more
processor usage

197
00:11:02,540 --> 00:11:05,550
and so this parallel layout

198
00:11:05,550 --> 00:11:10,410
some people look at it and say well most
the time layout is only a really small

199
00:11:10,410 --> 00:11:11,800
fraction

200
00:11:11,800 --> 00:11:14,910
above overall time well when rendering a
page

201
00:11:14,910 --> 00:11:18,709
and so parallel will make a big deal but
that's not sure on mobile I'll

202
00:11:18,709 --> 00:11:21,719
below Belle were often a lot for
resource-constrained

203
00:11:21,720 --> 00:11:25,290
and there's much fewer processors and so

204
00:11:25,290 --> 00:11:29,319
layout often takes maybe ten times as
long as I'm desktop machine

205
00:11:29,320 --> 00:11:33,070
and so paralleled in this case can make
a very big advantage

206
00:11:33,070 --> 00:11:36,930
a man we can also get power benefits
because one processor

207
00:11:36,930 --> 00:11:40,029
working at full capacity will take

208
00:11:40,029 --> 00:11:43,910
all will consume a lot more power then
several processors working at must

209
00:11:43,910 --> 00:11:44,670
produce a fit

210
00:11:44,670 --> 00:11:48,110
efficiency but offering the same amount
I'm

211
00:11:48,110 --> 00:11:51,230
and so we think that we can get much
better battery life improvements have a

212
00:11:51,230 --> 00:11:52,820
brother like servo that has these

213
00:11:52,820 --> 00:11:57,959
improvements and so

214
00:11:57,959 --> 00:12:01,138
there was a discussion on the black male
less recently about whether they can

215
00:12:01,139 --> 00:12:03,139
implement parallel out and link

216
00:12:03,139 --> 00:12:06,490
and after a bunch discussion they
decided that would be

217
00:12:06,490 --> 00:12:10,040
far too big a change I'm and they didn't
want invest the resources for something

218
00:12:10,040 --> 00:12:10,839
that

219
00:12:10,839 --> 00:12:14,250
didn't necessarily promised doing yield

220
00:12:14,250 --> 00:12:17,610
people in games and so

221
00:12:17,610 --> 00:12:21,360
was nice and servo is that we can
actually guarantee or

222
00:12:21,360 --> 00:12:24,980
so we put in the effort to Temple her
layout and that's exciting

223
00:12:24,980 --> 00:12:28,630
we turn it on last week and we're now
seeing performance improvements

224
00:12:28,630 --> 00:12:32,389
I'm were doing better than WebKit on on
some micro benchmarks

225
00:12:32,389 --> 00:12:36,579
so that's pretty cool I'm were for
validating the ideas we had

226
00:12:36,579 --> 00:12:39,750
but are the problem and I said is that

227
00:12:39,750 --> 00:12:43,260
with modern browser engines that are not
doing karla layout

228
00:12:43,260 --> 00:12:46,339
often they're reaching all over the
country and that breaks the

229
00:12:46,339 --> 00:12:49,980
guarantees the parallelism needs which
requires

230
00:12:49,980 --> 00:12:53,360
sir Nick forms isolation and knowledge
that you don't

231
00:12:53,360 --> 00:12:56,829
you will never be modifying like certain
parents and things like that

232
00:12:56,829 --> 00:13:01,050
and so with with them brother and
principles class

233
00:13:01,050 --> 00:13:04,609
often that can be challenging to

234
00:13:04,610 --> 00:13:07,370
to rework the engine to make those
guarantees and to keep those guarantees

235
00:13:07,370 --> 00:13:08,560
over time

236
00:13:08,560 --> 00:13:11,699
but we found in rest with that we can
actually enforce these guarantees from

237
00:13:11,700 --> 00:13:14,720
the start and using a type system so
will be compile error

238
00:13:14,720 --> 00:13:20,040
if we ever try to write code which would
break his guarantees for powell et

239
00:13:20,040 --> 00:13:23,209
so another interesting problem we're
working on is concurrent script and

240
00:13:23,209 --> 00:13:24,099
layout

241
00:13:24,100 --> 00:13:27,149
so I said before on their side loop
where you're running script

242
00:13:27,149 --> 00:13:30,269
and then modifies the page name to
compute layout then if you run a script

243
00:13:30,269 --> 00:13:31,070
and there's this

244
00:13:31,070 --> 00:13:34,290
this look that happens but often

245
00:13:34,290 --> 00:13:38,349
that isn't necessary to be synchronous
like that

246
00:13:38,350 --> 00:13:41,980
often web developers are learning that
synchronous layout is a bad thing

247
00:13:41,980 --> 00:13:45,490
a second us layout is when you you make
a change to lay out

248
00:13:45,490 --> 00:13:49,290
by setting like the left property of
some element based on

249
00:13:49,290 --> 00:13:53,060
the a base on the computed value of
overlay a property of any

250
00:13:53,060 --> 00:13:57,459
another element so this case we be
getting and be bound inclined wrecked

251
00:13:57,459 --> 00:14:00,800
up some other element on the page and
that forces a

252
00:14:00,800 --> 00:14:04,529
related to occur because we need to get
to the precise position of that element

253
00:14:04,529 --> 00:14:07,180
before we can continue executing script

254
00:14:07,180 --> 00:14:10,579
so that breaks are are tempted
concurrency

255
00:14:10,579 --> 00:14:14,739
and there's less this all over the web
but let developers are also starting to

256
00:14:14,740 --> 00:14:17,380
learn that this is bad and this hurts
their performance

257
00:14:17,380 --> 00:14:20,990
so their frameworks which are starting
to work around this and so

258
00:14:20,990 --> 00:14:24,870
we believe that if we can look for those
cases where

259
00:14:24,870 --> 00:14:29,019
catch up where synchronous layout is not
necessary then we can start running

260
00:14:29,019 --> 00:14:33,720
a script at the same time as layout and
get very big wins that way

261
00:14:33,720 --> 00:14:36,920
I'm in the technical details that are
basically that

262
00:14:36,920 --> 00:14:40,639
instead of directly modifying the DOM
that the same time that the layout ask

263
00:14:40,639 --> 00:14:41,690
to be reading

264
00:14:41,690 --> 00:14:44,889
we were just but the script only be
mutating

265
00:14:44,889 --> 00:14:48,010
like certain copies a bit when necessary
which would then be

266
00:14:48,010 --> 00:14:52,180
would replace the original values when
slaves finished

267
00:14:52,180 --> 00:14:55,790
so the third really interesting area
that we're looking at I'm

268
00:14:55,790 --> 00:14:59,510
is different performance which where the
previous ones so I think that security

269
00:14:59,510 --> 00:15:01,069
is really big

270
00:15:01,070 --> 00:15:04,639
everyone uses a browser and therefore
browser exploits

271
00:15:04,639 --> 00:15:08,800
are really good targets for security
vulnerabilities

272
00:15:08,800 --> 00:15:11,910
on governments love them

273
00:15:11,910 --> 00:15:16,120
Security Agency love them these are
things where if you can discover a

274
00:15:16,120 --> 00:15:20,040
vulnerability that no one else has made
public at you have a weapon that no one

275
00:15:20,040 --> 00:15:22,010
else has

276
00:15:22,010 --> 00:15:25,790
so are feeling is that

277
00:15:25,790 --> 00:15:29,569
Ellison gecko a lot of the security
problems

278
00:15:29,570 --> 00:15:33,910
coming from C plus plus is unsafe memory
model as a lot of those are use after

279
00:15:33,910 --> 00:15:34,839
free evers

280
00:15:34,839 --> 00:15:39,440
and iterator invalidation problems where
you're gonna rating over some collection

281
00:15:39,440 --> 00:15:44,160
but then you like modify the collection
some way

282
00:15:44,160 --> 00:15:47,410
that causes the players inside it become
invalid and suddenly iterators are

283
00:15:47,410 --> 00:15:48,860
unsafe

284
00:15:48,860 --> 00:15:52,170
so rest gotta trust me that

285
00:15:52,170 --> 00:15:55,560
rest basically eliminated glasses
wearers

286
00:15:55,560 --> 00:15:58,800
we have ways of tracking what is a valid
reference to something

287
00:15:58,800 --> 00:16:02,529
and we'll certainly be a compile error
if you try to use the pointer which

288
00:16:02,529 --> 00:16:03,060
would

289
00:16:03,060 --> 00:16:07,219
or which could be unsafe I'm even learn
more about that occurs if you read the

290
00:16:07,220 --> 00:16:07,800
letter the

291
00:16:07,800 --> 00:16:11,359
rest manual it's pretty exciting stuff
so

292
00:16:11,360 --> 00:16:15,600
by eliminating whole class is a Paris
that's exciting

293
00:16:15,600 --> 00:16:19,100
in addition we have to ask isolation
which is a share

294
00:16:19,100 --> 00:16:23,870
a share nothing so you don't have data
races

295
00:16:23,870 --> 00:16:28,509
and then it's really really simple to
turn rest into a process isolation model

296
00:16:28,509 --> 00:16:29,850
for using tasks

297
00:16:29,850 --> 00:16:33,709
without having to actually modify the
code the browser itself

298
00:16:33,709 --> 00:16:36,800
and that gives us a whole different
class a protection

299
00:16:36,800 --> 00:16:39,910
and then rethinking well why not go even
further why not take

300
00:16:39,910 --> 00:16:43,250
and safe C code which we need for
certain performance reasons

301
00:16:43,250 --> 00:16:46,800
and just run that inside of like a
sandbox national process

302
00:16:46,800 --> 00:16:49,810
their get like multiple layers
protection several can be the safest

303
00:16:49,810 --> 00:16:53,380
brother ever

304
00:16:53,380 --> 00:16:57,800
so is really cool stuff happening as a
server is being developed by

305
00:16:57,800 --> 00:17:01,849
a very small team muzzle research
engineers about 5 us

306
00:17:01,850 --> 00:17:05,569
there are a number I love Mozilla
community volunteers

307
00:17:05,569 --> 00:17:09,449
who are doing really cool things plus
there are

308
00:17:09,449 --> 00:17:13,299
eighty move research engineers a Samsung
who are working on this as well

309
00:17:13,299 --> 00:17:16,609
so it's a very small team we're getting
a lot done and we're getting really good

310
00:17:16,609 --> 00:17:17,399
results

311
00:17:17,400 --> 00:17:20,589
and we love more people to help us out
it's a great way to learn a new and

312
00:17:20,589 --> 00:17:21,730
exciting language

313
00:17:21,730 --> 00:17:26,199
and a great way to really push at the
cutting edge the web

314
00:17:26,199 --> 00:17:29,280
so their way to help you can learn how
to write dress code and then

315
00:17:29,280 --> 00:17:32,399
contribute to serve a by reading rest
because

316
00:17:32,400 --> 00:17:35,580
everything in servo almost everything
but the dominant the

317
00:17:35,580 --> 00:17:40,379
the layout on the rendering all this is
written in dress code

318
00:17:40,380 --> 00:17:44,990
and so there's there's a link there to v
servo issue tracker on github

319
00:17:44,990 --> 00:17:50,160
which we have that we have a tag called
easy which is a great way to get started

320
00:17:50,160 --> 00:17:54,590
if you learn a whole new language you
can rate JavaScript and CSS code

321
00:17:54,590 --> 00:17:57,830
because we have a test suite Andrew a
slowly growing and we're working to

322
00:17:57,830 --> 00:17:58,530
integrate

323
00:17:58,530 --> 00:18:02,200
a the existing w3c test suite so

324
00:18:02,200 --> 00:18:04,910
it's also something they can
interoperate with other browsers you can

325
00:18:04,910 --> 00:18:05,320
get

326
00:18:05,320 --> 00:18:08,720
nice multiple project a

327
00:18:08,720 --> 00:18:12,710
helping gonna sit there so you can also
just

328
00:18:12,710 --> 00:18:16,720
download the service source code and
build it and you can try things

329
00:18:16,720 --> 00:18:20,350
and see what breaks and then file bugs
that's really useful to us

330
00:18:20,350 --> 00:18:23,678
we don't have any binders yet but
that'll be coming in in the coming

331
00:18:23,679 --> 00:18:24,530
quarter probably

332
00:18:24,530 --> 00:18:27,789
I finally if you just want to keep
abreast of what's happening

333
00:18:27,789 --> 00:18:31,049
a you can you can look at the mailing
list a

334
00:18:31,049 --> 00:18:35,570
it's as much a lot adept a servo look
for the Mozilla Mozilla mailing lists

335
00:18:35,570 --> 00:18:38,799
its on that list if you want to

336
00:18:38,799 --> 00:18:45,049
what is No

337
00:18:45,049 --> 00:18:48,950
okay if you wanted something is really
helpful this'll basically require

338
00:18:48,950 --> 00:18:52,950
a reading dress code then we're slowly
working towards fixing

339
00:18:52,950 --> 00:18:56,370
a the problems remaining for the assets
you an SA-three

340
00:18:56,370 --> 00:19:00,500
Tesla 0 surf Ste Center tests

341
00:19:00,500 --> 00:19:04,120
and we're working to integrate the w3c
is test harness JS

342
00:19:04,120 --> 00:19:07,590
a harness so there are sir features a
for

343
00:19:07,590 --> 00:19:11,559
servo which are missing which we need
for those just want to implement a favor

344
00:19:11,559 --> 00:19:12,399
dime API

345
00:19:12,400 --> 00:19:16,179
and learn Russian process that's great s
actually quite a fairly easy process

346
00:19:16,179 --> 00:19:17,320
these days

347
00:19:17,320 --> 00:19:20,639
I'm gonna into missing CSS features a
layered things we can work with you on

348
00:19:20,640 --> 00:19:21,850
that too

349
00:19:21,850 --> 00:19:27,459
um and this might be the wrong venue for
it but if you really like Windows

350
00:19:27,460 --> 00:19:31,620
it doesn't run right now it doesn't
build we'd love to help with that

351
00:19:31,620 --> 00:19:35,360
eventually like this one the things
we're going to have to do eventually

352
00:19:35,360 --> 00:19:39,539
so thats thorough I'm happy to answer
any questions about it you can find a

353
00:19:39,539 --> 00:19:40,000
slide

354
00:19:40,000 --> 00:19:43,350
the links I'm at the link their ICS
readable

355
00:19:43,350 --> 00:19:47,289
yeah and get treated me email me and
I've got

356
00:19:47,289 --> 00:19:50,910
some rustic urs up a friend here if you
want to show off your love the language

357
00:19:50,910 --> 00:19:57,910
happened and those out so I'm yeah come
talk to me

358
00:20:05,610 --> 00:20:07,919
yes Jeremy ahead get a microphone

359
00:20:07,920 --> 00:20:13,680
run run run to questions

360
00:20:13,680 --> 00:20:17,450
firstly you said you were gonna build it
behind the WebKit API for embedding

361
00:20:17,450 --> 00:20:20,690
and is the WebKit abie a bit

362
00:20:20,690 --> 00:20:24,630
is is not causing you problems that is
to say is the API's suitable this kinda

363
00:20:24,630 --> 00:20:26,170
thing or the things you wish was
different

364
00:20:26,170 --> 00:20:30,940
and secondly arm do you yet have a

365
00:20:30,940 --> 00:20:36,059
kinda time-line for when someone might
be able to use bus to browse the web

366
00:20:36,059 --> 00:20:39,210
and not go online must be using rust
because lots of things broke

367
00:20:39,210 --> 00:20:43,200
I I am for the first what was the first
question again

368
00:20:43,200 --> 00:20:47,000
right ok API I'm we have too much work
into it

369
00:20:47,000 --> 00:20:50,240
is when those things were thinking oh
for like an intern project or maybe

370
00:20:50,240 --> 00:20:50,770
summer

371
00:20:50,770 --> 00:20:54,320
code perhaps thinking about it um

372
00:20:54,320 --> 00:20:58,220
it doesn't seem like it's insurmountable
this point

373
00:20:58,220 --> 00:21:01,710
for the second question which escape me

374
00:21:01,710 --> 00:21:06,760
alright time-line on so we're hoping by
the end of the year

375
00:21:06,760 --> 00:21:12,890
to have servo be is over relatively
usable and dog food in kind of way

376
00:21:12,890 --> 00:21:16,950
which is an ambitious so the more people
help us the more likely

377
00:21:16,950 --> 00:21:21,320
that'll be the case I'm for an actual

378
00:21:21,320 --> 00:21:25,450
like product kind of thing maybe

379
00:21:25,450 --> 00:21:29,670
two years minimum might be something I'm
to keep in mind

380
00:21:29,670 --> 00:21:34,580
any speed up by taking big chances
ghetto in wrapping up in NaCl and

381
00:21:34,580 --> 00:21:38,320
you note for stuff that isn't colony
with RTC your you think

382
00:21:38,320 --> 00:21:41,419
stuff like that right certain parts &
Echo

383
00:21:41,420 --> 00:21:45,590
yes and we're already doing that for
example using spider monkey from Geico

384
00:21:45,590 --> 00:21:49,030
a totally but it's important as well
some the graphics code

385
00:21:49,030 --> 00:21:53,950
but there's large part to Gecko which
are really tied up in the whole gecko X

386
00:21:53,950 --> 00:21:54,690
become

387
00:21:54,690 --> 00:21:58,120
alexei fiasco but um

388
00:21:58,120 --> 00:22:03,969
its hard to integrate with dress that
way another question

389
00:22:03,970 --> 00:22:10,970
yes Deb are

390
00:22:11,220 --> 00:22:15,500
when you stopped about bill are lee et
al up analyzing Lake

391
00:22:15,500 --> 00:22:18,650
really entertaining the Alps differently
I did not any

392
00:22:18,650 --> 00:22:22,070
putting any criteria due to bed them
other are Lake

393
00:22:22,070 --> 00:22:26,710
sometimes is required Lake I would like
to know if there is any adverse effect

394
00:22:26,710 --> 00:22:27,560
on deck bar

395
00:22:27,560 --> 00:22:31,330
because sometimes 1b been and other

396
00:22:31,330 --> 00:22:34,620
known wrecked up there's

397
00:22:34,620 --> 00:22:37,949
it's hard to say cuz we haven't done too
much experimenting with it

398
00:22:37,950 --> 00:22:42,050
but re I believe that we have code which

399
00:22:42,050 --> 00:22:45,820
can might look into page and say okay
this will require sequentially out this

400
00:22:45,820 --> 00:22:50,290
this can benefit from Carol stuff a mini
one race in tools which will be able to

401
00:22:50,290 --> 00:22:53,360
you'll be able to like runs are on a
page and and see like

402
00:22:53,360 --> 00:22:57,320
the servo factor to select this page to
speed up by this amount

403
00:22:57,320 --> 00:23:00,700
because our service para los up to be
really nice being at that happening

404
00:23:00,700 --> 00:23:07,700
made somebody else

405
00:23:13,649 --> 00:23:16,649
one out this perform on on a

406
00:23:16,649 --> 00:23:19,789
architecture that has on the one CPU
moody

407
00:23:19,789 --> 00:23:22,908
with there'll be some some

408
00:23:22,909 --> 00:23:27,090
performance issue because when the
borrower

409
00:23:27,090 --> 00:23:30,189
Perlane run in Berlin at all that is

410
00:23:30,190 --> 00:23:35,370
a good question I I'm not one of these
are porous developers

411
00:23:35,370 --> 00:23:38,549
with a really good understanding the
runtime that enables these things

412
00:23:38,549 --> 00:23:43,149
I believe that they take this into
consideration when developing it

413
00:23:43,149 --> 00:23:50,149
but I don't have any solid answer a
given

414
00:23:51,490 --> 00:23:54,429
good so 120 being dead

415
00:23:54,429 --> 00:23:58,410
iPhone pretty cool right now in Firefox
for example

416
00:23:58,410 --> 00:24:01,890
is state we can render the user
interface

417
00:24:01,890 --> 00:24:05,290
basically the same render a as

418
00:24:05,290 --> 00:24:09,320
week we render a pages a of Cory's

419
00:24:09,320 --> 00:24:13,750
we probably but will never want to
support sue linen serval bad

420
00:24:13,750 --> 00:24:17,530
do you see some chance of getting
something like their

421
00:24:17,530 --> 00:24:22,080
its answer was well there we can render
user interface across platforms

422
00:24:22,080 --> 00:24:27,649
with service well I was actually play
with a thought experiment this morning

423
00:24:27,650 --> 00:24:30,950
about like embedding sir within servo to

424
00:24:30,950 --> 00:24:34,760
make the browser interface I'm I think

425
00:24:34,760 --> 00:24:38,480
like with the impending API it like it
should be a possibility to something

426
00:24:38,480 --> 00:24:39,059
like that

427
00:24:39,059 --> 00:24:42,280
but its I we're we're not focusing on
the like

428
00:24:42,280 --> 00:24:45,760
browser part we're focusing on the
engine allowing

429
00:24:45,760 --> 00:24:49,330
someone else to work on the you know

430
00:24:49,330 --> 00:24:54,549
fatty bits the last one

431
00:24:54,549 --> 00:24:57,950
real est 1

432
00:24:57,950 --> 00:25:02,730
the question was

433
00:25:02,730 --> 00:25:07,020
are we planning to create in your
JavaScript engine I'm everyone always

434
00:25:07,020 --> 00:25:07,918
talks about it

435
00:25:07,919 --> 00:25:11,320
as something that'd be really cool to do
and that's after team keeps going like

436
00:25:11,320 --> 00:25:17,559
why not I'm but not really feasible at
this point with

437
00:25:17,559 --> 00:25:20,940
how few people that we have working on
it really focusing on like the

438
00:25:20,940 --> 00:25:25,160
essential things and and after the
engine is pretty keeper performance

439
00:25:25,160 --> 00:25:28,740
so we're trying to build on the things
which are really good right now

440
00:25:28,740 --> 00:25:35,740
I mean could be fun project thank you so
much

441
00:25:36,490 --> 00:25:37,070
thank you

