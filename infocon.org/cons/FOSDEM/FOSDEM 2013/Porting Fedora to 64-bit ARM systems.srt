1
00:00:00,010 --> 00:00:05,490
right thank you like this so i'm good
afternoon

2
00:00:05,490 --> 00:00:09,429
I thank you for attending funds dement
thank you very much for coming to my to

3
00:00:09,429 --> 00:00:09,800
look

4
00:00:09,800 --> 00:00:14,719
on my name is such on masters and today
I'm gonna talk about porting

5
00:00:14,719 --> 00:00:18,369
the door it's you on new architectures
on

6
00:00:18,369 --> 00:00:23,050
please raise your hand if you have heard
of the door okay

7
00:00:23,050 --> 00:00:26,939
physician and if you have not heard of
it or this is good

8
00:00:26,939 --> 00:00:31,039
this is good on so we re- we are a very
popular the Nexus tribution

9
00:00:31,039 --> 00:00:34,219
and we enjoyed being cutting-edge um

10
00:00:34,219 --> 00:00:38,559
and kinda fun having having features for
its there's a two of our

11
00:00:38,559 --> 00:00:41,820
I'm for fundamental principles on

12
00:00:41,820 --> 00:00:45,680
summit talk about putting Fedora to new
architectures any particular

13
00:00:45,680 --> 00:00:50,300
on two different com architectures I
mean explain kind of a little bit about

14
00:00:50,300 --> 00:00:51,699
what that means

15
00:00:51,699 --> 00:00:55,059
as well I'm gonna talk about porting to
you

16
00:00:55,059 --> 00:00:58,788
the newer 32-bit ambition 7 architecture

17
00:00:58,789 --> 00:01:02,320
by way of leading into you the work we
are doing

18
00:01:02,320 --> 00:01:05,390
porting for no right to you the 64-bit

19
00:01:05,390 --> 00:01:10,150
on vision 8 architecture also known as
on AR 64

20
00:01:10,150 --> 00:01:13,470
or on 64 and in fact they have a whole
slide

21
00:01:13,470 --> 00:01:17,210
that will tell you all the different
names that you could use for exactly the

22
00:01:17,210 --> 00:01:17,919
same thing

23
00:01:17,920 --> 00:01:21,950
com site a.m. thats Picture Me

24
00:01:21,950 --> 00:01:25,200
I have to have won a base on this is

25
00:01:25,200 --> 00:01:28,780
not me on at last year's Red Hat summit

26
00:01:28,780 --> 00:01:33,280
in Boston pedal power ring on server

27
00:01:33,280 --> 00:01:36,310
so that book CC up back there

28
00:01:36,310 --> 00:01:40,750
is being powered are through this
bicycle through a series of

29
00:01:40,750 --> 00:01:44,579
inverters and all kinds of craziness and
lookie would be proud

30
00:01:44,579 --> 00:01:48,419
of the setup on the point I was trying
to make their

31
00:01:48,420 --> 00:01:52,909
here's I'm on technology interests me in
particular

32
00:01:52,909 --> 00:01:56,030
and my employer on because of

33
00:01:56,030 --> 00:01:59,729
on phone number number different aspects
but in the

34
00:01:59,729 --> 00:02:03,340
emerging server space I'm

35
00:02:03,340 --> 00:02:07,229
there's a real growth and hyper scale
computing

36
00:02:07,229 --> 00:02:10,520
on low-energy computing rx or any

37
00:02:10,520 --> 00:02:13,930
energy-efficient computing on many other
features where

38
00:02:13,930 --> 00:02:18,580
on just happens to fit in really well so
we c om is an emerging technology

39
00:02:18,580 --> 00:02:22,920
we do seem very interesting technology
comments 0 we're beginning to invest in

40
00:02:22,920 --> 00:02:23,839
development

41
00:02:23,840 --> 00:02:26,860
um and many of us who work at Red Hat
are

42
00:02:26,860 --> 00:02:29,920
involves in the the door on project

43
00:02:29,920 --> 00:02:34,708
now I'll explain what the door on means
later on and who's involved it's not

44
00:02:34,709 --> 00:02:35,790
solely a red-hot

45
00:02:35,790 --> 00:02:39,220
activity by any means on but some

46
00:02:39,220 --> 00:02:42,830
here in this Sun appear unable to run a
full server by I just

47
00:02:42,830 --> 00:02:47,250
having a bicycle attached to a generator
I'm so there really is something to this

48
00:02:47,250 --> 00:02:50,500
when I wanna talk about today

49
00:02:50,500 --> 00:02:53,720
what kinda took a little bit about
modern computer architecture

50
00:02:53,720 --> 00:02:56,720
I promise not to be too boring on

51
00:02:56,720 --> 00:03:01,230
took a little bit about what happens
when you have a new architecture in

52
00:03:01,230 --> 00:03:03,518
terms of the hardware and software

53
00:03:03,519 --> 00:03:07,640
development behind that that I'd like to
introduce you to you

54
00:03:07,640 --> 00:03:10,670
the the door on project om

55
00:03:10,670 --> 00:03:14,299
in I'm gonna talk through the different
stages that we go through

56
00:03:14,300 --> 00:03:18,480
on to get the door up and running on a
new architecture

57
00:03:18,480 --> 00:03:21,629
so on vision 7 which we've already done

58
00:03:21,629 --> 00:03:24,750
and Aon 64 which we are

59
00:03:24,750 --> 00:03:28,239
well into at this point I will explain
kinda

60
00:03:28,239 --> 00:03:31,989
where we are and then I'd like to finish
up with a live demo of

61
00:03:31,989 --> 00:03:35,040
no running on a 64-bit ARM

62
00:03:35,040 --> 00:03:40,609
simulator on and I'll talk a little bit
more about the complexities

63
00:03:40,610 --> 00:03:44,239
are doing the work without having super
fast hardware

64
00:03:44,239 --> 00:03:48,849
when you start doing them as well as
questions going early sometime at the

65
00:03:48,849 --> 00:03:50,119
end for questions

66
00:03:50,120 --> 00:03:53,260
I'm also going to have a couple points
during the talk

67
00:03:53,260 --> 00:03:56,319
where you know you can you can ask
questions I think that's going to work

68
00:03:56,319 --> 00:03:57,060
better

69
00:03:57,060 --> 00:04:00,650
in this format so please wait until I on
ask

70
00:04:00,650 --> 00:04:04,430
for questions say are

71
00:04:04,430 --> 00:04:08,480
64 carried a pirate boy so we'll just go
with that

72
00:04:08,480 --> 00:04:15,480
um in addition to some the technical
stuff but I'll talk about

73
00:04:15,670 --> 00:04:18,709
as far as rationalization of the
architecture

74
00:04:18,709 --> 00:04:22,729
on one thing I'm also did with AI 64

75
00:04:22,729 --> 00:04:26,380
was rationalize the naming I'm so om is
a trademark

76
00:04:26,380 --> 00:04:29,440
on and that means that sometimes you're
18

77
00:04:29,440 --> 00:04:32,800
use on everywhere it tends to devalue

78
00:04:32,800 --> 00:04:36,330
your name if you do that on so

79
00:04:36,330 --> 00:04:41,090
when you hear things like on vision 5 on
vision 6 on vision seven on vision 8

80
00:04:41,090 --> 00:04:45,799
these architects revisions these are
visions of the core architecture

81
00:04:45,800 --> 00:04:48,870
on you'll also hear terms light

82
00:04:48,870 --> 00:04:52,330
on om from

83
00:04:52,330 --> 00:04:55,870
I'm another some historical terms to now

84
00:04:55,870 --> 00:05:00,570
I replaced by a thirty to twenty thirty
these are actual instruction sets these

85
00:05:00,570 --> 00:05:02,199
are binary instructions

86
00:05:02,199 --> 00:05:05,580
that the machine will run on

87
00:05:05,580 --> 00:05:08,690
when it on one of these architecture
visions

88
00:05:08,690 --> 00:05:13,180
in the 64-bit case various I machine
code known as

89
00:05:13,180 --> 00:05:17,600
our instruction set known as a 64 so you
get this case where

90
00:05:17,600 --> 00:05:21,350
your machine is an AR 64 machine running
on vision 8

91
00:05:21,350 --> 00:05:24,699
the architecture executing a 64
instructions

92
00:05:24,699 --> 00:05:29,139
a little completed I'm so memorize the
slide because they will be taxed on the

93
00:05:29,139 --> 00:05:30,350
way out

94
00:05:30,350 --> 00:05:34,370
asking you all three different
intricacies here

95
00:05:34,370 --> 00:05:37,090
on I guess the thing that I want you
take away from this is that there are

96
00:05:37,090 --> 00:05:39,039
too many different names involved

97
00:05:39,039 --> 00:05:42,289
on we're using a on 64 inferred or a

98
00:05:42,289 --> 00:05:46,330
om largely because that's the name on
was using

99
00:05:46,330 --> 00:05:50,190
on the colonel community the next came a
community

100
00:05:50,190 --> 00:05:54,990
took a look at bats on and said now
we're gonna go with I'm sixty-four

101
00:05:54,990 --> 00:05:59,319
so you also get you sick on 64 on baar
64

102
00:05:59,319 --> 00:06:03,470
all these different things fundamentally
it's all one in the same it's all a

103
00:06:03,470 --> 00:06:05,330
64-bit architecture

104
00:06:05,330 --> 00:06:10,840
not from from mom

105
00:06:10,840 --> 00:06:16,330
so like most modern architectures

106
00:06:16,330 --> 00:06:19,669
this new 64-bit architecture I'm

107
00:06:19,669 --> 00:06:23,840
you know its risk-based rate risk is
kind of what everyone does these days

108
00:06:23,840 --> 00:06:26,869
I'm the inspections at 32 bits wide
thats

109
00:06:26,870 --> 00:06:30,370
pretty common 64-bit architecture but
every instruction

110
00:06:30,370 --> 00:06:33,690
actually 32 bits wide on

111
00:06:33,690 --> 00:06:36,860
they modified how late in code

112
00:06:36,860 --> 00:06:39,900
the instructions at the binary level on

113
00:06:39,900 --> 00:06:43,650
so that there's more room for something
mediates a little bit more flexible be

114
00:06:43,650 --> 00:06:44,179
them

115
00:06:44,180 --> 00:06:47,250
the previous on architecture revisions
for

116
00:06:47,250 --> 00:06:52,130
I'm in accessing constants in handling
memory of such that a big air

117
00:06:52,130 --> 00:06:55,280
complex you have your instructions to
I'm

118
00:06:55,280 --> 00:06:58,888
22 to load from global pools and all
that stuff

119
00:06:58,889 --> 00:07:03,770
I'm it's a load store architecture like
most modern risk architectures

120
00:07:03,770 --> 00:07:06,948
that means that you don't directly
operate a memory

121
00:07:06,949 --> 00:07:11,030
on you load use in operation restore it
back

122
00:07:11,030 --> 00:07:14,500
on unlike the 32-bit ARM architecture

123
00:07:14,500 --> 00:07:18,880
you know there's a lot more general
purpose registers their 31

124
00:07:18,880 --> 00:07:22,000
I'm in the new architecture on and then
you've got

125
00:07:22,000 --> 00:07:27,090
some there there have specific purposes
I'm so

126
00:07:27,090 --> 00:07:31,000
unlike injured in their traditional
cases on you don't have to write access

127
00:07:31,000 --> 00:07:31,699
to

128
00:07:31,699 --> 00:07:35,940
do funky things with the program counter
or manipulate the stack pointer directly

129
00:07:35,940 --> 00:07:40,620
all of these things instead the kind of
inferred through other instructions

130
00:07:40,620 --> 00:07:43,770
I'm you do have a couple if interesting
things in the

131
00:07:43,770 --> 00:07:47,599
on register space you have I'm

132
00:07:47,599 --> 00:07:51,069
two different I if I P zero and I P .001

133
00:07:51,069 --> 00:07:54,830
I would you can use to do on I

134
00:07:54,830 --> 00:07:59,340
interim he is both these races together
to do I get confirmation to load from a

135
00:07:59,340 --> 00:08:02,969
a procedure linkage table or something
like this: whereas you previously have

136
00:08:02,970 --> 00:08:03,919
only one

137
00:08:03,919 --> 00:08:07,389
ought to do that so you can you can
kinda BGC 87 strife

138
00:08:07,389 --> 00:08:12,860
a.m. instructions to load like a
procedure called address or something

139
00:08:12,860 --> 00:08:16,970
and hearsay there's a large flat memory
model

140
00:08:16,970 --> 00:08:20,009
so it's not kinda like x86 you don't
have

141
00:08:20,009 --> 00:08:23,610
you know we ate segmentation a different
different memory models it's a

142
00:08:23,610 --> 00:08:27,120
pretty pretty simple case um and in the
case if

143
00:08:27,120 --> 00:08:30,250
the 64-bit architecture on they also

144
00:08:30,250 --> 00:08:34,159
you know are increasingly supporting
things like unaligned accesses

145
00:08:34,159 --> 00:08:37,289
sewing 230 that case om systems have

146
00:08:37,289 --> 00:08:41,468
grown the ability to handle you know
non-aligned memory access the last few

147
00:08:41,469 --> 00:08:42,039
years

148
00:08:42,039 --> 00:08:46,459
still expensive at the hardware level
it's better if you on

149
00:08:46,459 --> 00:08:50,560
make your code in such a way to call in
such a way that memory accesses are

150
00:08:50,560 --> 00:08:51,390
aligned

151
00:08:51,390 --> 00:08:54,410
she said natural alignments son

152
00:08:54,410 --> 00:08:57,699
you know what you're accessing a word or
an integer or character address or

153
00:08:57,700 --> 00:08:58,750
something

154
00:08:58,750 --> 00:09:01,830
but some in the case if the 64-bit
architecture

155
00:09:01,830 --> 00:09:05,149
you know you can you can make that
access and it will handle it at the

156
00:09:05,149 --> 00:09:07,190
hardware level for you

157
00:09:07,190 --> 00:09:11,810
on is also various system control an
architectural hinting

158
00:09:11,810 --> 00:09:15,369
which is a legal thing that most new
architectures d

159
00:09:15,370 --> 00:09:19,060
so you can kinda say you know I'm going
to some code now

160
00:09:19,060 --> 00:09:23,869
but it's not really a procedure call so
if you are trying to optimize with some

161
00:09:23,870 --> 00:09:25,529
kind of branch predictor

162
00:09:25,529 --> 00:09:28,689
inside the CPU you know that actually
I'm not

163
00:09:28,690 --> 00:09:32,910
replied come back from that or I am
planning to come back from that this is

164
00:09:32,910 --> 00:09:33,959
a function call

165
00:09:33,959 --> 00:09:37,310
and so you get some hints you can
actually use instructions

166
00:09:37,310 --> 00:09:40,489
little cunt hymns to the underlying
architecture what it is that you are

167
00:09:40,490 --> 00:09:41,100
doing

168
00:09:41,100 --> 00:09:45,450
so that it can perform various
optimizations for you

169
00:09:45,450 --> 00:09:48,920
I'm other things the specific to

170
00:09:48,920 --> 00:09:52,790
on vision a to not just so that modern
computer architectures

171
00:09:52,790 --> 00:09:56,069
on Goodman who is one of the cooler

172
00:09:56,070 --> 00:09:59,450
on Linux kernel developers

173
00:09:59,450 --> 00:10:03,329
able to me on community is on here

174
00:10:03,329 --> 00:10:05,779
now is it possible that he might have
been in this room that would have been

175
00:10:05,779 --> 00:10:06,680
funny

176
00:10:06,680 --> 00:10:11,729
I'm he called on vision 8 REI 64 very
boring architecture

177
00:10:11,730 --> 00:10:15,149
on in a nice way right so there's very
little wear

178
00:10:15,149 --> 00:10:20,370
that's kinda surprising you get this new
a 64 instruction set

179
00:10:20,370 --> 00:10:23,690
joins the traditional on instruction set
which is now called

180
00:10:23,690 --> 00:10:28,690
832 and traditional fun which not guilty
32

181
00:10:28,690 --> 00:10:31,910
on it is a new inspection Sat so you do
have

182
00:10:31,910 --> 00:10:35,160
somethings that you have to learn I'm
you have to read through some

183
00:10:35,160 --> 00:10:36,640
documentation

184
00:10:36,640 --> 00:10:39,949
on to use it be assembly language

185
00:10:39,950 --> 00:10:43,300
that they implement follows the sauna
conventional

186
00:10:43,300 --> 00:10:46,670
unified assembly language that on came
up with a few years ago

187
00:10:46,670 --> 00:10:50,000
so it looks like regular on assembly
code

188
00:10:50,000 --> 00:10:53,890
even though in fact I'm you know it it
it's doing some things behind the scenes

189
00:10:53,890 --> 00:10:55,630
the instructions are different

190
00:10:55,630 --> 00:10:59,089
but December language looks very similar

191
00:10:59,089 --> 00:11:02,990
and be removed Co processes for me from
the

192
00:11:02,990 --> 00:11:06,390
architecture so im the traditional case

193
00:11:06,390 --> 00:11:09,589
on systems you have these kinder

194
00:11:09,589 --> 00:11:12,730
special coprocessors built into the CPU

195
00:11:12,730 --> 00:11:15,709
things like the memory management unit
it wasn't a core part of the

196
00:11:15,709 --> 00:11:16,790
architecture

197
00:11:16,790 --> 00:11:20,399
was a special co-processor that lived
somewhere off to one side

198
00:11:20,399 --> 00:11:24,380
at least notionally and he would proceed
and program it

199
00:11:24,380 --> 00:11:27,870
am never really worked very well the
idea was that people could make their

200
00:11:27,870 --> 00:11:29,450
own coprocessors

201
00:11:29,450 --> 00:11:33,250
if they implemented an ARM CPU they
could put some funky

202
00:11:33,250 --> 00:11:37,680
extra feature their but he tried to
shove things into an existing CB units

203
00:11:37,680 --> 00:11:41,660
in jimmy is and very well so they've
removed that from the architecture

204
00:11:41,660 --> 00:11:42,969
instead they have

205
00:11:42,970 --> 00:11:47,589
just general instructions for things
like memory management control

206
00:11:47,589 --> 00:11:51,360
on cache invalidation all these things
they just regular instructions

207
00:11:51,360 --> 00:11:55,240
Mb in the new architecture I'm

208
00:11:55,240 --> 00:11:59,260
they did do away with a lot of free soda
we'd register banking

209
00:11:59,260 --> 00:12:02,769
as a youth actually touched 32-bit ARM
assembly

210
00:12:02,769 --> 00:12:05,839
I don't know what I mean they're I'm
instead they have a

211
00:12:05,839 --> 00:12:09,420
air pretty clean pretty clean flat
layout

212
00:12:09,420 --> 00:12:13,740
on they have basic section levels they
introduce into the

213
00:12:13,740 --> 00:12:16,980
64-bit architecture so every

214
00:12:16,980 --> 00:12:20,360
signal almost every 64-bit ARM CPU

215
00:12:20,360 --> 00:12:23,899
will boot into what is called EL three

216
00:12:23,899 --> 00:12:27,649
which is a secure state it's a it's a
special

217
00:12:27,649 --> 00:12:31,200
motive execution where you can put your
on

218
00:12:31,200 --> 00:12:34,500
you know trusted bootloader validation
code or

219
00:12:34,500 --> 00:12:38,110
if you are bank um making software for
smartphones

220
00:12:38,110 --> 00:12:41,690
is you know these chicks one just being
server still be in all kinds a different

221
00:12:41,690 --> 00:12:42,709
use cases

222
00:12:42,709 --> 00:12:46,310
if you're making like some kind of
payment processing code couple kinda

223
00:12:46,310 --> 00:12:47,540
stuff in dl3

224
00:12:47,540 --> 00:12:51,019
its magical and coming in from the LS on

225
00:12:51,019 --> 00:12:54,430
that will happen there is that will
transition down

226
00:12:54,430 --> 00:12:57,519
various levels down two EL two for a
hypervisor

227
00:12:57,519 --> 00:13:01,170
EL one for regular colonel and he l0
which is where

228
00:13:01,170 --> 00:13:04,959
regular use a space runs on the system's

229
00:13:04,959 --> 00:13:08,329
on you don't have predicated execution

230
00:13:08,329 --> 00:13:13,560
so in traditional mom your hands various
bits the beginning at each instruction

231
00:13:13,560 --> 00:13:17,079
it said I might execute this instruction
I might not

232
00:13:17,079 --> 00:13:21,019
on you don't have back in the 64-bit
architecture you have just regular

233
00:13:21,019 --> 00:13:23,100
conditional instructions

234
00:13:23,100 --> 00:13:26,139
on and you don't have to we ate kinda

235
00:13:26,139 --> 00:13:30,899
exposure a pipeline you don't have
addresses that might be off by 48

236
00:13:30,899 --> 00:13:34,769
up because it exposing the pipeline
design

237
00:13:34,769 --> 00:13:38,220
in-state you just use the and direct um

238
00:13:38,220 --> 00:13:42,490
PC addresses am

239
00:13:42,490 --> 00:13:45,160
yet and the clean up some other things
you can read through the on

240
00:13:45,160 --> 00:13:48,639
documentation to see what they changed

241
00:13:48,639 --> 00:13:53,910
so will be speaking when you when you're
working on a new architecture

242
00:13:53,910 --> 00:13:58,100
am you have to kinda different

243
00:13:58,100 --> 00:14:01,110
things get to worry about one is the
harbour development

244
00:14:01,110 --> 00:14:04,730
and the other one is the software Co
development

245
00:14:04,730 --> 00:14:08,720
I'm cuz you're kinda doing both the same
time what you don't do

246
00:14:08,720 --> 00:14:12,949
in the case of of modern architecture

247
00:14:12,949 --> 00:14:16,949
is kinda do all the hardware and then
say okay now will give you all the

248
00:14:16,949 --> 00:14:17,920
software

249
00:14:17,920 --> 00:14:21,969
doesn't work because what you wanna do
is you wanna get as much tougher as you

250
00:14:21,970 --> 00:14:24,060
can. up and running very early on

251
00:14:24,060 --> 00:14:27,949
testings and see okay well how well does
this actually worked and

252
00:14:27,949 --> 00:14:31,719
maybe I should make this change maybe I
should change you know whatever plan to

253
00:14:31,720 --> 00:14:32,699
be oct-dec sure

254
00:14:32,699 --> 00:14:36,719
before I walked down for evermore and
attends these days

255
00:14:36,720 --> 00:14:40,449
not just with on but with things like
open risk is one awesome these other

256
00:14:40,449 --> 00:14:43,479
on architectures potentially more
evolutionary

257
00:14:43,480 --> 00:14:46,660
you stop with some good ideas try some
things out

258
00:14:46,660 --> 00:14:50,380
gets a code running you see how will
that performs and you iterate on that a

259
00:14:50,380 --> 00:14:51,380
little bit more

260
00:14:51,380 --> 00:14:54,550
then you did twenty years ago

261
00:14:54,550 --> 00:14:59,019
am so it's iterative process paid for
modeling usually open source code

262
00:14:59,019 --> 00:15:04,470
because there's a large body of code you
can compile and you can test things out

263
00:15:04,470 --> 00:15:09,620
first H of most Harbor Development is he
will write some kinda emulator

264
00:15:09,620 --> 00:15:13,899
great some kinda suffer model describes
how the system is gonna work so you can

265
00:15:13,899 --> 00:15:14,760
start

266
00:15:14,760 --> 00:15:18,350
trying out some ideas on open risk

267
00:15:18,350 --> 00:15:22,839
was an octet trying to play with on it
has its own scene later called

268
00:15:22,839 --> 00:15:26,680
I'm I want a 1-cm you guys interested

269
00:15:26,680 --> 00:15:30,469
purely open source computer
architectures take a look at open risk

270
00:15:30,470 --> 00:15:31,529
it's kinda fun

271
00:15:31,529 --> 00:15:35,860
am the case it a lot 64 there are three
different

272
00:15:35,860 --> 00:15:39,220
I model suffer models available so far
bears

273
00:15:39,220 --> 00:15:42,860
a model from om called the fast models
that you can get under

274
00:15:42,860 --> 00:15:45,910
on sudden license as foundation model

275
00:15:45,910 --> 00:15:50,630
which I'm gonna show you later which is
a free download seekers go download

276
00:15:50,630 --> 00:15:54,480
um its it's kind of like when you are

277
00:15:54,480 --> 00:15:57,589
let's not really but his isn't is a
rough analogy

278
00:15:57,589 --> 00:16:00,600
you know if you're if you're running
like a your VMware virtual machine and

279
00:16:00,600 --> 00:16:02,790
you don't wanna change anything just
gonna run it

280
00:16:02,790 --> 00:16:05,829
that's that's kinda beer your foundation
model you can

281
00:16:05,829 --> 00:16:10,250
you can run that a on 64 environment but
you're not changing the layout of the

282
00:16:10,250 --> 00:16:11,360
hardware are making

283
00:16:11,360 --> 00:16:15,100
tweaks to it which you could be with the
fast models

284
00:16:15,100 --> 00:16:18,149
is also as if this week on

285
00:16:18,149 --> 00:16:21,589
a simulator available from Cavium
they're one of the

286
00:16:21,589 --> 00:16:25,000
first on hardware manufactures of

287
00:16:25,000 --> 00:16:30,079
on VHS I make just announced they have
an SDK that I've been playing with

288
00:16:30,079 --> 00:16:33,209
I'm I think I was quoted this week
saying that you know it was

289
00:16:33,209 --> 00:16:36,849
it was faster than the foundation model
in some testing we did

290
00:16:36,850 --> 00:16:40,720
so there will be more on and some of
them are freely available

291
00:16:40,720 --> 00:16:44,649
some of them are available under various
licenses

292
00:16:44,649 --> 00:16:48,709
so once he got kinda a software emulator

293
00:16:48,709 --> 00:16:53,069
I'm the next thing that you do kinda 1
teams gonna go often they gonna start

294
00:16:53,070 --> 00:16:54,949
working on hardware designs

295
00:16:54,949 --> 00:16:59,370
so they're using RTL the using hardware
description languages to start actually

296
00:16:59,370 --> 00:17:00,560
implementing

297
00:17:00,560 --> 00:17:04,059
um both synthesized Milan on synthesized
logic

298
00:17:04,059 --> 00:17:07,619
on that's kinda electrical engineering
term you can

299
00:17:07,619 --> 00:17:11,599
you can ignore and but you're starting
at that point to have a team going often

300
00:17:11,599 --> 00:17:12,859
actually implementing

301
00:17:12,859 --> 00:17:15,899
am the optics decisions you've made

302
00:17:15,900 --> 00:17:20,490
into hardware and what they're doing is
twofold they're both

303
00:17:20,490 --> 00:17:24,709
implementing just the core CPU the core
architecture you know coming at two

304
00:17:24,709 --> 00:17:25,980
numbers can I

305
00:17:25,980 --> 00:17:29,679
can I am can i jump to address is can I
make procedure calls

306
00:17:29,679 --> 00:17:33,190
and then they're also looking at the
broader system components the server on

307
00:17:33,190 --> 00:17:33,650
ship

308
00:17:33,650 --> 00:17:37,490
system on chip components um and you
know integrating

309
00:17:37,490 --> 00:17:41,039
this this core CPU into on

310
00:17:41,039 --> 00:17:44,340
an overall design that's going clue I O
devices and

311
00:17:44,340 --> 00:17:47,750
you know network interfaces and all
these other things you have the modern

312
00:17:47,750 --> 00:17:50,340
systems

313
00:17:50,340 --> 00:17:54,629
am once they have summer be early
hardware design

314
00:17:54,630 --> 00:17:59,059
they have the equivalent of you know
what we would use and software to you

315
00:17:59,059 --> 00:18:02,110
model that they can actually run that
hardware am

316
00:18:02,110 --> 00:18:07,389
as a model and you know it kinda behaves
like a real hardware

317
00:18:07,390 --> 00:18:10,850
spending on how you do it you're either
going for

318
00:18:10,850 --> 00:18:15,820
very accurate very slow or less accurate
still very slow

319
00:18:15,820 --> 00:18:18,870
um but these hundred guys a morning
sedan

320
00:18:18,870 --> 00:18:23,049
does my design work I'm and then you can
get to a point

321
00:18:23,049 --> 00:18:26,860
where once you've got a rough design you
can take an FPGA

322
00:18:26,860 --> 00:18:30,260
field programmable gate array and you
can take this design

323
00:18:30,260 --> 00:18:33,809
you can kinda run it on a very expensive
chips

324
00:18:33,809 --> 00:18:37,850
um back can com you know run that a few
megahertz maybe

325
00:18:37,850 --> 00:18:41,189
I'm I have a chip I have a system in the
lap

326
00:18:41,190 --> 00:18:44,880
you know that's a that saddam the eighth
inning on 64 system

327
00:18:44,880 --> 00:18:48,490
on an FPGA it only runs it

328
00:18:48,490 --> 00:18:52,130
10 megahertz let's say on when a good
day

329
00:18:52,130 --> 00:18:56,120
on but but it's the fastest hard whether
anybody has

330
00:18:56,120 --> 00:19:00,000
sitting around at this point so what we
can do with that

331
00:19:00,000 --> 00:19:03,720
is we can we can use a combination of

332
00:19:03,720 --> 00:19:07,260
software models to you know just run
code

333
00:19:07,260 --> 00:19:10,460
and from a software point of view we
don't care as long as

334
00:19:10,460 --> 00:19:14,289
look as long as it behaves the same we
don't care on real hardware or software

335
00:19:14,289 --> 00:19:15,160
model

336
00:19:15,160 --> 00:19:18,690
which is trying to build a Linux
distribution but we might also want to

337
00:19:18,690 --> 00:19:19,970
test a lil bit more than that

338
00:19:19,970 --> 00:19:23,720
what would it be like an actual hardware
so having access to an FPGA

339
00:19:23,720 --> 00:19:27,539
let's just get a little bit more close
to what it would be like on real

340
00:19:27,539 --> 00:19:28,160
hardware

341
00:19:28,160 --> 00:19:32,299
am later on in the process you get
actual

342
00:19:32,299 --> 00:19:36,410
test chips made you get actual tape out
which is when you say okay I have a

343
00:19:36,410 --> 00:19:37,049
design

344
00:19:37,049 --> 00:19:40,129
I'm gonna go make some silicon chips now
and

345
00:19:40,130 --> 00:19:44,010
you know some guys there you know kind
of working toward that goal

346
00:19:44,010 --> 00:19:47,330
let's say and you know we hope to have
some silicon

347
00:19:47,330 --> 00:19:52,480
in the coming months in the coming year
that we can play around with

348
00:19:52,480 --> 00:19:57,559
said stage is a software development
this is kinda happening

349
00:19:57,559 --> 00:20:01,860
roughly in tandem with the early stages
Harbor Development take the initial

350
00:20:01,860 --> 00:20:03,080
suffer model

351
00:20:03,080 --> 00:20:06,178
on which she can execute code and you
can

352
00:20:06,179 --> 00:20:10,030
on you know it at that point you don't
even have a an assembler you can't

353
00:20:10,030 --> 00:20:13,389
compiled code for it but you have a
model

354
00:20:13,390 --> 00:20:16,409
I'm you have to have a couple of pieces
that's really proceed

355
00:20:16,409 --> 00:20:19,429
you have to have on a base or

356
00:20:19,429 --> 00:20:22,539
core system maybe I you have to define

357
00:20:22,539 --> 00:20:27,320
you know how they might different pieces
work together when I compile some code

358
00:20:27,320 --> 00:20:30,470
how do I link that what does the result
looked liked

359
00:20:30,470 --> 00:20:34,520
on how do I make two functions together
how does one function call another

360
00:20:34,520 --> 00:20:38,309
how can I precompiled software library
and expected to work with another

361
00:20:38,309 --> 00:20:39,620
software library

362
00:20:39,620 --> 00:20:43,389
those are all defined in procedure
calling standard documents

363
00:20:43,390 --> 00:20:48,580
every architecture house in the cases on
they have what they call the apcs

364
00:20:48,580 --> 00:20:51,918
switch I'm I mention later

365
00:20:51,919 --> 00:20:55,510
on at this point you're also than
working on the initial toolchain

366
00:20:55,510 --> 00:20:59,039
so you have to get an assembler you have
to get a compiler get together

367
00:20:59,039 --> 00:21:02,379
symbols and Cody after TCC to start
compiling C++ code

368
00:21:02,380 --> 00:21:07,030
I'm all these good things on you to stop
by reading some simple task programs

369
00:21:07,030 --> 00:21:11,678
just to prove correctness just output um
in a text

370
00:21:11,679 --> 00:21:15,100
depending on what how you're proceeding

371
00:21:15,100 --> 00:21:19,320
I'm some other architectures with and
work with you boot or something or try

372
00:21:19,320 --> 00:21:20,950
to get a bootloader up and running

373
00:21:20,950 --> 00:21:26,289
play around with um and at this point
you can't stop thinking about the kernel

374
00:21:26,289 --> 00:21:26,750
poor

375
00:21:26,750 --> 00:21:30,270
so what you're trying to do their is

376
00:21:30,270 --> 00:21:33,549
get something that can talk to a

377
00:21:33,549 --> 00:21:38,220
talk to you on put something on a serial
consulate you see the system booting

378
00:21:38,220 --> 00:21:41,690
you're not really targeting in all
different hardware devices

379
00:21:41,690 --> 00:21:45,179
you more targeting tanite compile some
code that works against this

380
00:21:45,179 --> 00:21:46,010
architecture

381
00:21:46,010 --> 00:21:49,129
tonight boot um tonight boo

382
00:21:49,130 --> 00:21:52,230
the what we call the ass engine Eric the
very basic

383
00:21:52,230 --> 00:21:55,510
Linux kernel poured on that down

384
00:21:55,510 --> 00:21:59,440
and then you know we start in very
software distribution

385
00:21:59,440 --> 00:22:03,260
world in the l'espace we still not
working

386
00:22:03,260 --> 00:22:06,929
on on userspace

387
00:22:06,929 --> 00:22:11,169
but say at let's just get broader use a
space so you'll stop with some very

388
00:22:11,169 --> 00:22:13,309
simple pieces busybox

389
00:22:13,309 --> 00:22:16,950
I'm open embedded all these have been
done in then

390
00:22:16,950 --> 00:22:20,260
you know later on you're working on full
distributions said

391
00:22:20,260 --> 00:22:23,280
the Tories won't really into its
bootstraps right now

392
00:22:23,280 --> 00:22:26,389
other distributions are working on their
bootstrap

393
00:22:26,390 --> 00:22:29,539
I don't get me in there fairly heavily
into various I'm

394
00:22:29,539 --> 00:22:33,179
been to you are into their distribution
bootstrap and so on right so it's not

395
00:22:33,179 --> 00:22:34,150
just the door

396
00:22:34,150 --> 00:22:37,909
I'm although this is all about the door
so I'm gonna ignore the rest at them

397
00:22:37,909 --> 00:22:43,100
for the rest this torch on and once he
got the basic distribution up and

398
00:22:43,100 --> 00:22:43,699
running

399
00:22:43,700 --> 00:22:47,220
you then bootstrapping the high-level
software components I'm gonna talk

400
00:22:47,220 --> 00:22:47,880
through

401
00:22:47,880 --> 00:22:52,860
the different stages that we use their I
am as well

402
00:22:52,860 --> 00:22:56,830
com you know I think I've I've talked a
lot about the different models we have

403
00:22:56,830 --> 00:22:57,760
on

404
00:22:57,760 --> 00:23:01,960
you there the fast models the foundation
model champion have a model

405
00:23:01,960 --> 00:23:05,390
on there's a QEMU ports that on

406
00:23:05,390 --> 00:23:10,140
is beginning within one hour us so we
had to have a QM report

407
00:23:10,140 --> 00:23:14,890
our that can target a system model I
eventually

408
00:23:14,890 --> 00:23:18,070
you know we first gonna run on uses base
code

409
00:23:18,070 --> 00:23:21,168
but eventually want to have a full
system model I'm

410
00:23:21,169 --> 00:23:24,409
the architecture as well again when
you're running super models

411
00:23:24,409 --> 00:23:27,630
you know you're running on a different
architecture you not exactly running

412
00:23:27,630 --> 00:23:31,539
figured speeds right but you are burning
maybe hundreds megahertz may be enough

413
00:23:31,539 --> 00:23:34,908
to be something useful

414
00:23:34,909 --> 00:23:39,010
at the convention that be and thus
there's very standards behind

415
00:23:39,010 --> 00:23:42,179
you know how you build the software I in
addition to

416
00:23:42,179 --> 00:23:45,419
OMS documentation on the for
instructions at

417
00:23:45,419 --> 00:23:49,860
has also supporting documentation says
how to compile programs how they linked

418
00:23:49,860 --> 00:23:50,639
together

419
00:23:50,640 --> 00:23:56,090
what the register passing conventions
are what be um

420
00:23:56,090 --> 00:23:59,178
million stack alignment needs to be

421
00:23:59,179 --> 00:24:03,720
in order for things to work on things
like that

422
00:24:03,720 --> 00:24:07,490
they define some other pieces in on be a
tiger quite nice is a dedicated platform

423
00:24:07,490 --> 00:24:09,590
register we can use to store

424
00:24:09,590 --> 00:24:13,870
point is we might want to have easy
access to things like to relax in

425
00:24:13,870 --> 00:24:17,229
things like that um and the basic

426
00:24:17,230 --> 00:24:23,400
abie is going to cover on you know your
core system languages c/c++ plus plus

427
00:24:23,400 --> 00:24:27,510
there's a talk coming up after this one
um where I'm staring at one guy right

428
00:24:27,510 --> 00:24:28,140
now but

429
00:24:28,140 --> 00:24:32,700
there's 22 guides I'm for Mitt how they
gonna talk about to Andrew Andrew

430
00:24:32,700 --> 00:24:35,990
I can talk about um porting Java

431
00:24:35,990 --> 00:24:40,919
to new architecture so let them kinda
cover those pieces

432
00:24:40,919 --> 00:24:43,950
I'm is bad joke here on

433
00:24:43,950 --> 00:24:48,740
or very we had ninety joke I'm
interlinking mean something else but

434
00:24:48,740 --> 00:24:51,970
the point is we actually are not
interested Tom

435
00:24:51,970 --> 00:24:58,970
in trudeau rent in compiling code that
can link 6432 their

436
00:24:59,140 --> 00:25:03,010
arm together and that's not actually
technically possible either

437
00:25:03,010 --> 00:25:06,570
so that's great we don't really want the
32 bit story

438
00:25:06,570 --> 00:25:12,158
when it comes to this new architecture

439
00:25:12,159 --> 00:25:15,890
on so you know following the upstream
development and Mexican on the time and

440
00:25:15,890 --> 00:25:17,299
skip threesome with us

441
00:25:17,299 --> 00:25:20,400
and you know that the first piece a
little change you get ported you get

442
00:25:20,400 --> 00:25:21,630
your some reported

443
00:25:21,630 --> 00:25:25,120
on you need to get be on health

444
00:25:25,120 --> 00:25:28,590
filehandle elf object support added

445
00:25:28,590 --> 00:25:33,470
so you on the eight years on page 64
uses L 64

446
00:25:33,470 --> 00:25:36,610
it has to new locations that defines so
that

447
00:25:36,610 --> 00:25:40,580
when you want to relocate precompiled
code you can go through and you can fix

448
00:25:40,580 --> 00:25:42,520
that up with the correct address is

449
00:25:42,520 --> 00:25:47,029
at runtime to get the link reported see
can actually be together

450
00:25:47,029 --> 00:25:50,570
him and then there's some dependencies
and

451
00:25:50,570 --> 00:25:55,178
later on against the kernel anti-nazi
things like TLS support

452
00:25:55,179 --> 00:26:00,279
and treading am GCC has various
different internal

453
00:26:00,279 --> 00:26:03,630
back ends different immediate languages
that users

454
00:26:03,630 --> 00:26:07,289
and it turns out doing at sea our C plus
plus port is kinda

455
00:26:07,289 --> 00:26:11,840
you know it's the good starting point if
you wanna I have other back in languages

456
00:26:11,840 --> 00:26:15,428
then um other other other language
support

457
00:26:15,429 --> 00:26:19,640
the next target different intermediate
I'm representations within GCC

458
00:26:19,640 --> 00:26:23,820
met some that work is still ongoing

459
00:26:23,820 --> 00:26:27,090
the initial kernel port was posted along
with the toolchain

460
00:26:27,090 --> 00:26:31,320
on last year kinda started in the summer
and then went on into the fall in

461
00:26:31,320 --> 00:26:33,120
various pieces abyss and now

462
00:26:33,120 --> 00:26:37,459
getting into upstream projects I'm in
the case the kernel

463
00:26:37,460 --> 00:26:40,950
to 64-bit clean die

464
00:26:40,950 --> 00:26:45,330
modern colonel port time teaching what
on big man has created the a centenary

465
00:26:45,330 --> 00:26:45,740
tree

466
00:26:45,740 --> 00:26:49,110
which is like a reference this is how
all channel port should be done

467
00:26:49,110 --> 00:26:52,510
and the gold area years every time
someone does one

468
00:26:52,510 --> 00:26:56,779
it has to at least big as good as the
last one and then they'll find new rules

469
00:26:56,779 --> 00:26:59,909
a new restrictions in new things should
be done the next time

470
00:26:59,909 --> 00:27:03,200
more things going at it more
requirements get added butts and I

471
00:27:03,200 --> 00:27:06,210
caplin maraniss and will be economic
done a good job

472
00:27:06,210 --> 00:27:09,960
taking their initial work reworking it
against a San generic

473
00:27:09,960 --> 00:27:14,500
having a very very do it a comprehensive
at Port

474
00:27:14,500 --> 00:27:18,870
conquer base supports booting either Lt
which is a hypervisor level

475
00:27:18,870 --> 00:27:22,100
so you can later on have support a VM or
ours and

476
00:27:22,100 --> 00:27:25,600
on and then it can drop down into EL one
which is the

477
00:27:25,600 --> 00:27:28,860
state which we run the kernel usually

478
00:27:28,860 --> 00:27:33,270
it doesn't support the full 48-bit um
physical address space yet

479
00:27:33,270 --> 00:27:38,789
on effect in on VAT could in theory go
up to 256 bits if we ever got there

480
00:27:38,789 --> 00:27:42,740
on but you know this point nobody has a
system that has that much physical

481
00:27:42,740 --> 00:27:44,820
memory so it's kind of academic

482
00:27:44,820 --> 00:27:48,529
trying to support it in the same way
that on x86

483
00:27:48,529 --> 00:27:51,700
we've changed we change the on

484
00:27:51,700 --> 00:27:56,250
page table late May I we've changed how
we do memory on x86 in the past

485
00:27:56,250 --> 00:27:59,890
masses into a bigger we said okay are we
gonna change that we won't get a little

486
00:27:59,890 --> 00:28:00,480
bit

487
00:28:00,480 --> 00:28:04,950
handley increase in physical address
space the same kind of thing will happen

488
00:28:04,950 --> 00:28:07,990
when it comes to 64-bit ARM

489
00:28:07,990 --> 00:28:12,100
we are still playing around with a few
decisions there rampage table sizes

490
00:28:12,100 --> 00:28:15,719
so on in the case if I'm v8

491
00:28:15,720 --> 00:28:19,200
we have at least 4k and 64k pages
possible

492
00:28:19,200 --> 00:28:22,200
I'm 32-bit systems useful contagious

493
00:28:22,200 --> 00:28:26,149
generally so what this means is if we
don't

494
00:28:26,149 --> 00:28:30,600
care about 32-bit compatibility which
we're advocating not T

495
00:28:30,600 --> 00:28:33,899
we can go to a 64k pagesize as the
granule size

496
00:28:33,899 --> 00:28:37,928
and get various benefits from that so
we're currently running threesome

497
00:28:37,929 --> 00:28:41,220
some thoughts around what we want to do
there but that's likely to be where we

498
00:28:41,220 --> 00:28:43,390
go

499
00:28:43,390 --> 00:28:46,419
on an initial court didn't support
things like lazy

500
00:28:46,419 --> 00:28:49,610
SP you a floating-point Saver store
summer these

501
00:28:49,610 --> 00:28:54,850
optimizations that he added later
networks going on now

502
00:28:54,850 --> 00:28:58,870
and it also did not provide on SEC
target platform so

503
00:28:58,870 --> 00:29:03,189
it didn't it wasn't trying to provide a
generic bass

504
00:29:03,190 --> 00:29:07,210
on which everybody could support many
different shipping SSE's

505
00:29:07,210 --> 00:29:10,740
there weren't any shipping SEC's at that
point any shipping chips with other

506
00:29:10,740 --> 00:29:12,529
devices on them

507
00:29:12,529 --> 00:29:16,669
I'm that works going ongoing now so that
some of these guys that a building

508
00:29:16,669 --> 00:29:20,059
I'm the first 64-bit ARM chips up

509
00:29:20,059 --> 00:29:24,789
have a target that they can they can
work with on the goal here really is

510
00:29:24,789 --> 00:29:28,158
when it comes to 64 bit on systems

511
00:29:28,159 --> 00:29:31,690
will have one binary colonel will be in
a boot and then

512
00:29:31,690 --> 00:29:35,559
as we do on x86 would be to figure out
at runtime

513
00:29:35,559 --> 00:29:38,960
will be to numerate the devices will be
able to make the right decisions

514
00:29:38,960 --> 00:29:45,960
and I'm the system without having to
have 10 different kernels

515
00:29:46,090 --> 00:29:50,020
K so

516
00:29:50,020 --> 00:29:53,879
the userspace pieces which is the main
it or peace I guess

517
00:29:53,880 --> 00:29:57,350
am if you go to the wiki address the
bottom there you can look

518
00:29:57,350 --> 00:30:00,620
later at your feature in the slides will
be available on

519
00:30:00,620 --> 00:30:04,918
through through the past him organizes
all make them available later on

520
00:30:04,919 --> 00:30:09,409
on we posted an initial stage 1

521
00:30:09,409 --> 00:30:13,039
at that URL you can go there and you can
read through kinda how to use it how to

522
00:30:13,039 --> 00:30:14,460
download it

523
00:30:14,460 --> 00:30:18,700
on I might walk through now kinda you
know the different stages we go

524
00:30:18,700 --> 00:30:21,760
what stage one means what stage 5 means

525
00:30:21,760 --> 00:30:26,080
and the different processes that we're
going through

526
00:30:26,080 --> 00:30:29,820
so as I mentioned earlier the door on

527
00:30:29,820 --> 00:30:33,279
is kind of an all-encompassing term its

528
00:30:33,279 --> 00:30:37,909
a comp a collaboration really between
redhead engineers and members of the

529
00:30:37,909 --> 00:30:41,289
Dora an open-source minutes communities
on

530
00:30:41,289 --> 00:30:45,470
and today we support a number different
32-bit ARM devices

531
00:30:45,470 --> 00:30:49,179
so you can go download NH for an SD card

532
00:30:49,179 --> 00:30:53,580
you can run DD progress the cod indeedy
something onto it put it into your

533
00:30:53,580 --> 00:30:57,070
I'm you know on laptops the crime but
running Fedora here

534
00:30:57,070 --> 00:31:02,200
on and then boot it and we support
things like the pandaboard trim slice

535
00:31:02,200 --> 00:31:03,309
Raspberry Pi

536
00:31:03,309 --> 00:31:08,149
on Raspberry Pi as a remix which is a II
technical term

537
00:31:08,149 --> 00:31:11,239
it's not officially supported target
because there's no upstream

538
00:31:11,240 --> 00:31:16,210
Linux kernel I'm but we support many
different 32-bit targets including

539
00:31:16,210 --> 00:31:20,799
several of the 32-bit servers so the
cows ate a high bank server

540
00:31:20,799 --> 00:31:23,990
and there's also a remix and the targets

541
00:31:23,990 --> 00:31:28,200
the Montvale and bebu which somebody
else talking about later on

542
00:31:28,200 --> 00:31:32,360
so became more about porting to ma bell
I'm

543
00:31:32,360 --> 00:31:37,178
architectures later on we are targeting
64-bit server support

544
00:31:37,179 --> 00:31:40,399
later this year in a more comprehensive
way

545
00:31:40,399 --> 00:31:45,559
and various I'm stages along the way
over the coming months

546
00:31:45,559 --> 00:31:48,870
current status ambition five which is
the older

547
00:31:48,870 --> 00:31:52,168
I'm architecture we r phasing that out

548
00:31:52,169 --> 00:31:56,140
so you were 18 which is Justin release
now

549
00:31:56,140 --> 00:32:00,059
I'm that will be the last version of the
door that supports

550
00:32:00,059 --> 00:32:03,240
anything less than an armed version 7
officially

551
00:32:03,240 --> 00:32:07,740
I'm you on vision 7 devices are
available for forty dollars

552
00:32:07,740 --> 00:32:11,080
on the Internet I'm depressed reply
unfortunately

553
00:32:11,080 --> 00:32:15,510
is an ambition six devices very popular
and so a separate group is going to

554
00:32:15,510 --> 00:32:16,950
maintain a port

555
00:32:16,950 --> 00:32:21,510
to one version 6 um for lease as long as
the pie is really popular

556
00:32:21,510 --> 00:32:25,450
but if you're not buying a pie on for
about the same money our little bit more

557
00:32:25,450 --> 00:32:27,059
you can buy and own version 7

558
00:32:27,059 --> 00:32:31,070
computer that that we've gone on today

559
00:32:31,070 --> 00:32:34,889
in that case we we've done what we call
the hard float builder for door

560
00:32:34,890 --> 00:32:38,510
so I made some changes invasion seven on

561
00:32:38,510 --> 00:32:43,169
principally we cannot assume the
presence of a floating point unit on

562
00:32:43,169 --> 00:32:46,460
who so on given that we can do that now

563
00:32:46,460 --> 00:32:51,399
we can on we switched to a newer version
if their API standard

564
00:32:51,399 --> 00:32:55,010
omelet had some on performance

565
00:32:55,010 --> 00:32:59,940
improvements and as part about returned
intentionally broke compatibility

566
00:32:59,940 --> 00:33:04,080
so for a while we kept what we call the
some floats on vision 5 build a life

567
00:33:04,080 --> 00:33:07,399
and now we're gonna kill that off
because every deed is only a few people

568
00:33:07,399 --> 00:33:09,059
using that to danger Doric

569
00:33:09,059 --> 00:33:12,110
and that's not enough to keep it alive

570
00:33:12,110 --> 00:33:16,649
on vision is where the fun is intensive
bootstrap in making bets available

571
00:33:16,649 --> 00:33:21,039
on and we will have a final release
after eighteen four on devices

572
00:33:21,039 --> 00:33:25,010
next week that's our that's our plan
download the real you can download the

573
00:33:25,010 --> 00:33:26,110
beta today

574
00:33:26,110 --> 00:33:29,139
believe release candidate images we're
just at the point if

575
00:33:29,140 --> 00:33:32,330
copying them over in making the
announcement but you'll you'll find an

576
00:33:32,330 --> 00:33:33,980
announcement for Fedora 18

577
00:33:33,980 --> 00:33:38,090
within the coming days I've got some
pictures here various

578
00:33:38,090 --> 00:33:41,309
on devices that the door sports

579
00:33:41,309 --> 00:33:44,460
you can look at them in the slights am

580
00:33:44,460 --> 00:33:48,970
so when we try to get the door up and
running

581
00:33:48,970 --> 00:33:54,120
on aim on a new architecture like the
64-bit ARM architecture

582
00:33:54,120 --> 00:33:57,350
that we're we're concerned about
building may simply

583
00:33:57,350 --> 00:34:01,120
so if you're is a native bill
distribution means we we use

584
00:34:01,120 --> 00:34:04,340
the hardware for the architects are
concerned to build

585
00:34:04,340 --> 00:34:08,339
for that architecture such economic
problem there

586
00:34:08,339 --> 00:34:12,099
because there isn't any hardware that
we've run for your own today to build

587
00:34:12,099 --> 00:34:13,099
the door

588
00:34:13,099 --> 00:34:16,889
I own 64-bit on systems so

589
00:34:16,889 --> 00:34:20,429
thing we have to do is a bit scrappy
which is to get the world built

590
00:34:20,429 --> 00:34:24,889
from the ground up not once we have
things bill

591
00:34:24,889 --> 00:34:28,730
which and explain a bit more about in a
moment once we have that built

592
00:34:28,730 --> 00:34:32,859
we use a system called Koji which is
like other distributions in its Susan

593
00:34:32,859 --> 00:34:34,098
have OB ass and

594
00:34:34,099 --> 00:34:37,560
on Debian have their build the San and
various other pieces

595
00:34:37,560 --> 00:34:41,020
I'm at happen to you economical I don't
even

596
00:34:41,020 --> 00:34:45,210
understand sorry I don't keep up with
exactly happens he gets bill

597
00:34:45,210 --> 00:34:48,929
but everybody has kinda the build system
we have one called Koji

598
00:34:48,929 --> 00:34:52,089
web driving you can go and look at a
software package see when it was last

599
00:34:52,089 --> 00:34:52,790
built

600
00:34:52,790 --> 00:34:56,949
instigated build all these good things
and it's 100 percent reproducible

601
00:34:56,949 --> 00:35:00,460
because every time we do a build
regenerate buildroot

602
00:35:00,460 --> 00:35:04,400
using a tool called mark containing
known versions every

603
00:35:04,400 --> 00:35:07,460
piece of software that was needed to
build that

604
00:35:07,460 --> 00:35:10,750
up we have to make the bits available
that we're gonna use

605
00:35:10,750 --> 00:35:14,220
and Mark which is where the big step
comes in

606
00:35:14,220 --> 00:35:18,029
so there are five stages we came up with
to do but scrap

607
00:35:18,030 --> 00:35:21,690
and what happened was injured or 15
which is

608
00:35:21,690 --> 00:35:25,200
now couple years ago on we did this

609
00:35:25,200 --> 00:35:29,078
bootstrap from version 7 and we did this
bootstrap because

610
00:35:29,079 --> 00:35:33,140
you know i kind if me that the eight was
coming

611
00:35:33,140 --> 00:35:36,509
and not many people did but we we knew
it was coming

612
00:35:36,510 --> 00:35:39,720
and we wanted to just kind of figure out
how we gonna do this

613
00:35:39,720 --> 00:35:42,959
we treated on vision 7 as a brand new
architecture

614
00:35:42,960 --> 00:35:46,359
knowing that we have to do this for the
64-bit am

615
00:35:46,359 --> 00:35:51,560
release on so we go through the spider
in stages the first one is kinda cross

616
00:35:51,560 --> 00:35:52,339
compile

617
00:35:52,339 --> 00:35:56,520
a minimal set up its I'm using an x86

618
00:35:56,520 --> 00:36:01,070
64 machine just a regular PC desktop on
to build the tools

619
00:36:01,070 --> 00:36:05,720
the targets that will run on a 64-bit on
machine

620
00:36:05,720 --> 00:36:10,029
what's he done that we take those but
the into will be some for models

621
00:36:10,030 --> 00:36:14,020
but that the 64-bit ARM system on and we
have just enough built

622
00:36:14,020 --> 00:36:18,490
to kinda run that environment and then
use those tools to rebuild themselves

623
00:36:18,490 --> 00:36:22,040
so they built natively and then to you
I'm built

624
00:36:22,040 --> 00:36:25,390
the next on level if pieces stage 3

625
00:36:25,390 --> 00:36:29,578
which it gets to a point using our
standard packaging tools a standard rpm

626
00:36:29,579 --> 00:36:34,690
rpm build on these things that nor
packages will know very well

627
00:36:34,690 --> 00:36:38,730
after that we then rebuild everything
we've got so far

628
00:36:38,730 --> 00:36:42,300
as of the ants on and want to come back

629
00:36:42,300 --> 00:36:46,310
we take those ans on we generates

630
00:36:46,310 --> 00:36:49,970
we we build more more dependencies so
that we can run

631
00:36:49,970 --> 00:36:53,169
a amok environment and then um

632
00:36:53,170 --> 00:36:57,060
the final stage is to get to a point we
can write Koji which is outstanding bill

633
00:36:57,060 --> 00:36:57,869
system

634
00:36:57,869 --> 00:37:02,670
so it's a fairly contrived an involved
process

635
00:37:02,670 --> 00:37:07,570
um weaker took the stage 1&2 for the
64-bit architecture

636
00:37:07,570 --> 00:37:10,839
on largely because some for models are
not incredibly fast

637
00:37:10,839 --> 00:37:14,960
and there are still a few patches and
bugs have to get worked out

638
00:37:14,960 --> 00:37:18,780
you can go to I'm our wiki you can
actually download

639
00:37:18,780 --> 00:37:22,000
the bootstrap scripts that we use them
to get repo

640
00:37:22,000 --> 00:37:25,040
on and you can download the root
filesystem that we're working on

641
00:37:25,040 --> 00:37:28,790
which I kinda came up with this idea
here game version 7

642
00:37:28,790 --> 00:37:32,250
why don't we treat the entire filesystem
from bootstrap as I get Rica

643
00:37:32,250 --> 00:37:36,099
is get is a file system so we have an 8
gigabytes

644
00:37:36,099 --> 00:37:40,230
get repository on beacon clone

645
00:37:40,230 --> 00:37:44,099
on just to prove I'm not making that up

646
00:37:44,099 --> 00:37:47,680
I know where running low on time said to
be very clear

647
00:37:47,680 --> 00:37:50,879
I'm

648
00:37:50,880 --> 00:37:54,160
BAE trade FX

649
00:37:54,160 --> 00:37:57,990
so that's the that's the file system as
it stands today

650
00:37:57,990 --> 00:38:01,990
and I can literally run get login site
my file system and I can see

651
00:38:01,990 --> 00:38:05,229
not what package got bill who changed it
how was committed

652
00:38:05,230 --> 00:38:08,480
it's a horrible horrible hatch I came up
with this in

653
00:38:08,480 --> 00:38:13,430
version 7 in Division 7 bootstrap and
then you can NFS share this:

654
00:38:13,430 --> 00:38:16,790
across your network and you get from
people building different parts the

655
00:38:16,790 --> 00:38:18,180
filesystem look at your own

656
00:38:18,180 --> 00:38:22,348
nothing to go along with this and then
you get people sending you get pulled a

657
00:38:22,349 --> 00:38:22,960
class

658
00:38:22,960 --> 00:38:26,030
here's a new party a filesystem sending
US get its its kinda

659
00:38:26,030 --> 00:38:29,390
it's kinda weird but it works sent you
know

660
00:38:29,390 --> 00:38:32,879
white why not why not use it again

661
00:38:32,880 --> 00:38:36,270
I'm yeah so I'm you can

662
00:38:36,270 --> 00:38:40,150
you can go to our wiki I'm you know if
you want to find a wiki

663
00:38:40,150 --> 00:38:43,540
a you'll find the slides because I'll
make them available but be you can type

664
00:38:43,540 --> 00:38:45,910
in Fedora mom into Google and you'll
find

665
00:38:45,910 --> 00:38:49,430
these these links I'm you can actually
see a list I believe a double

666
00:38:49,430 --> 00:38:54,279
get reposing you can follow along and
it's really kinda fun

667
00:38:54,280 --> 00:38:57,280
I'll skip through some other stages here
but stage 1

668
00:38:57,280 --> 00:39:00,740
on you know what Cross building the
world's main thing we have to do is page

669
00:39:00,740 --> 00:39:01,790
1 is figure out

670
00:39:01,790 --> 00:39:06,130
what is it we're targeting what are the
things that we are turning on and off

671
00:39:06,130 --> 00:39:10,089
so here is the kinda foundation seven
I'm said

672
00:39:10,089 --> 00:39:13,750
choices we made any brackets be on
vision 8 ones

673
00:39:13,750 --> 00:39:17,839
and launched you can see with on the
64-bit architecture

674
00:39:17,839 --> 00:39:20,920
week we'd really don't set very much we
say

675
00:39:20,920 --> 00:39:25,250
well we're not talking a specific Oct at
specific CPU

676
00:39:25,250 --> 00:39:29,520
on we r targeting AR 64

677
00:39:29,520 --> 00:39:32,880
we are targeting having an FP you that's
about it

678
00:39:32,880 --> 00:39:37,010
I'm so we we set some these things we
decide that the triplet the name we're

679
00:39:37,010 --> 00:39:38,520
going to use for this Oct actor

680
00:39:38,520 --> 00:39:41,680
so we had ambition 7 HL hard float

681
00:39:41,680 --> 00:39:45,490
little endian I'm Red Hat Linux can you
a Pinoy babi

682
00:39:45,490 --> 00:39:51,390
Paul 30 that and 64-bit we call it a on
64-bit happening skinny

683
00:39:51,390 --> 00:39:54,839
its that's what we did am

684
00:39:54,839 --> 00:39:57,970
these the kind of things you building in
stage 1

685
00:39:57,970 --> 00:40:01,689
is which we have built on the sea I'm
states to

686
00:40:01,690 --> 00:40:05,599
they go straight to get repo see
contract history for more

687
00:40:05,599 --> 00:40:09,480
build additional dependencies on we can
then

688
00:40:09,480 --> 00:40:12,650
meant those other and a fast or as a

689
00:40:12,650 --> 00:40:16,210
on frosting image which I make sure you

690
00:40:16,210 --> 00:40:21,420
in a few moments I'm and we can get rpm
working which is where we are right now

691
00:40:21,420 --> 00:40:25,260
am so here's a kind of example output of

692
00:40:25,260 --> 00:40:28,609
where there work in progress what the
directory

693
00:40:28,609 --> 00:40:32,420
structure looks like to stand at the
door system with a few extra directories

694
00:40:32,420 --> 00:40:33,780
in there

695
00:40:33,780 --> 00:40:37,170
which can be booted on we don't have

696
00:40:37,170 --> 00:40:40,829
in a team in yet on I want rant about
system D

697
00:40:40,829 --> 00:40:45,280
although people know I love to do that
on it unfortunately kweisi tycoon stack

698
00:40:45,280 --> 00:40:46,490
to be built

699
00:40:46,490 --> 00:40:50,399
before you can build it so we're not
booting but not today we're building

700
00:40:50,400 --> 00:40:53,579
on using busy box and a few other hacks
on

701
00:40:53,579 --> 00:40:56,700
just to get something that boots but the
rest the pieces

702
00:40:56,700 --> 00:41:00,520
are standard on PM's so when you see
this blue not gonna see a standard for

703
00:41:00,520 --> 00:41:01,180
Norbu

704
00:41:01,180 --> 00:41:05,450
process we have had everything bill yet
and system these gonna be much later

705
00:41:05,450 --> 00:41:10,470
but we'll get there am so states 3 which
is being worked on right now

706
00:41:10,470 --> 00:41:14,328
we rebuild everything we have so far
some PM's oMG we still considering

707
00:41:14,329 --> 00:41:15,200
things cult

708
00:41:15,200 --> 00:41:18,368
we turn off documentation week we say
well

709
00:41:18,369 --> 00:41:23,000
that's nice but that's going to require
with him 300 the pact is built to house

710
00:41:23,000 --> 00:41:26,530
an attacker whatever it is we need to
due to

711
00:41:26,530 --> 00:41:30,880
process documentation some metal to
metal so we still turning things off and

712
00:41:30,880 --> 00:41:35,270
effectively in half um the saw the pics
cap dependencies I quite like and

713
00:41:35,270 --> 00:41:37,500
there's a few things I like other
districts have done

714
00:41:37,500 --> 00:41:42,000
that I want us to learn from and so the
take back into how we package

715
00:41:42,000 --> 00:41:45,780
so we can always bootstrap the world
think he did a great job in getting with

716
00:41:45,780 --> 00:41:46,660
that

717
00:41:46,660 --> 00:41:50,720
on I was think we can we can inspire
others to do horrible

718
00:41:50,720 --> 00:41:54,810
get based tax to track your filesystem

719
00:41:54,810 --> 00:41:57,910
on we will continue with this process
and state streets and we will be using

720
00:41:57,910 --> 00:41:59,770
the sum for models to

721
00:41:59,770 --> 00:42:02,950
build our PM's down and get a full set
of a

722
00:42:02,950 --> 00:42:06,910
minimal RPM's out a fat sufficient to
generate these mock

723
00:42:06,910 --> 00:42:10,859
roots we can use to build I'm higher
stages

724
00:42:10,859 --> 00:42:14,900
sh4 we're gonna have mock we're gonna
have all the standard features

725
00:42:14,900 --> 00:42:18,250
and when we did this for the 32-bit
architecture it was really cool because

726
00:42:18,250 --> 00:42:23,079
we sold all the really weird on this
tool chain piece isn't working because

727
00:42:23,079 --> 00:42:24,390
block

728
00:42:24,390 --> 00:42:28,040
we sold all back and well most that

729
00:42:28,040 --> 00:42:32,089
and done we made available Houston image
to

730
00:42:32,089 --> 00:42:36,069
just everybody in the community and we
said okay you don't have to be a

731
00:42:36,069 --> 00:42:39,630
doctor checks but you could download
this image if you have a system

732
00:42:39,630 --> 00:42:43,450
you can run this very minimal not Koji
but very minimal

733
00:42:43,450 --> 00:42:47,149
said a script we wrote its gonna
download a package bill on your system

734
00:42:47,150 --> 00:42:50,250
and push it back up and so we kinda
farmed out

735
00:42:50,250 --> 00:42:53,859
the bootstrap and that's roughly we're
gonna get tea with 64-bit

736
00:42:53,859 --> 00:42:56,859
if we get hardware in time we might be
something else

737
00:42:56,859 --> 00:43:01,109
if we don't if you have a model in one
help us then actually you'll be able to

738
00:43:01,109 --> 00:43:05,150
use your system to on donate some
compute cycles to the process

739
00:43:05,150 --> 00:43:08,560
and then you know we look at using
Amazon ec2 another

740
00:43:08,560 --> 00:43:13,680
other ways of getting a lot of fact that
simulated time

741
00:43:13,680 --> 00:43:17,770
I'm want to get on the stage 4 we have
this kind of giant said about p.m.

742
00:43:17,770 --> 00:43:21,880
whole thing's been built more or less
and the whole

743
00:43:21,880 --> 00:43:25,849
basic install has been built on but it's
still not

744
00:43:25,849 --> 00:43:28,910
official is still not be built using a
standard build system

745
00:43:28,910 --> 00:43:33,640
so they built it one more time on in the
case is a on 64 will probably go two

746
00:43:33,640 --> 00:43:34,549
more times

747
00:43:34,550 --> 00:43:37,390
because we want to make sure that
everything's been built correctly wants

748
00:43:37,390 --> 00:43:39,690
and then used against good have
incorrectly

749
00:43:39,690 --> 00:43:43,310
second time so regis love compute cycles

750
00:43:43,310 --> 00:43:47,060
and we'll is a lonesome on

751
00:43:47,060 --> 00:43:50,200
so it's all about correctness and be in
the day we will

752
00:43:50,200 --> 00:43:54,930
release these bits and everybody will be
happy forever more

753
00:43:54,930 --> 00:43:59,149
om so I got some slides here the kinda
summarize you know what we're doing

754
00:43:59,150 --> 00:44:02,890
on you know we've done stage 1 we don't
stage 2

755
00:44:02,890 --> 00:44:06,118
we validated states to on an FPGA booted

756
00:44:06,119 --> 00:44:09,250
actually works on real hardware on

757
00:44:09,250 --> 00:44:12,770
and we are currently in stage 3 and
should have backed completed

758
00:44:12,770 --> 00:44:16,180
on in the coming months

759
00:44:16,180 --> 00:44:21,040
I'm yeah and at that point we're gonna
stop asking people to

760
00:44:21,040 --> 00:44:24,180
to really in a broad miss out it it's
down to something where

761
00:44:24,180 --> 00:44:27,339
a small set of people could could really
make a lot of progress

762
00:44:27,339 --> 00:44:30,839
and its gonna is going to expand out

763
00:44:30,839 --> 00:44:34,440
I'm gonna skip to kinda boring at times
get two questions

764
00:44:34,440 --> 00:44:38,089
someone a couple minutes here to met
people spend five minutes ask me any

765
00:44:38,089 --> 00:44:39,849
questions you have about to

766
00:44:39,849 --> 00:44:42,740
you know what we're doing and how you
get involved so on if you have a

767
00:44:42,740 --> 00:44:43,540
question

768
00:44:43,540 --> 00:44:48,990
maybe %um the microphone coming around

769
00:44:48,990 --> 00:44:52,470
I like cheese here's my

770
00:44:52,470 --> 00:44:56,578
sec gonna some yeah

771
00:44:56,579 --> 00:45:03,529
time for a couple questions

772
00:45:03,529 --> 00:45:05,939
with the sport transparent these pages
yes they will

773
00:45:05,939 --> 00:45:09,618
on day one I'm not not right now but
there will be

774
00:45:09,619 --> 00:45:14,779
got work is going on in fact there's a
hands up if you've not heard when are

775
00:45:14,779 --> 00:45:18,359
good K so Linaro is

776
00:45:18,359 --> 00:45:21,848
a on nonprofit spun off by om

777
00:45:21,849 --> 00:45:25,380
that is all about advancing upstream
progress

778
00:45:25,380 --> 00:45:28,699
and support in the links community open
source community

779
00:45:28,699 --> 00:45:32,529
from systems so it's kind like a
non-profit Engineering Center that does

780
00:45:32,529 --> 00:45:36,339
all kinds schoolwork from systems on we
found the day

781
00:45:36,339 --> 00:45:40,078
group in their cool in our enterprise
group it's very 64-bit

782
00:45:40,079 --> 00:45:44,660
heavy on and finally I got better at
doing are as well so we're now

783
00:45:44,660 --> 00:45:48,839
member Monaro on and we're all working
together in that context the Seoul

784
00:45:48,839 --> 00:45:50,859
summit these heavy lifting probs like

785
00:45:50,859 --> 00:45:55,598
here that may be done by other folks but
that's the kind of problem where

786
00:45:55,599 --> 00:46:00,279
you know we would leverage that resource
to solve the problem a question

787
00:46:00,279 --> 00:46:03,559
yeah

788
00:46:03,559 --> 00:46:10,559
what about cyclic build dependencies
outside initial to check

789
00:46:12,799 --> 00:46:17,009
so we've been a little lucky in that we
can sort of turned things

790
00:46:17,009 --> 00:46:20,359
of a weakening we can pack around
certain things

791
00:46:20,359 --> 00:46:25,529
overtime every the next is true is
becoming more more more more complex

792
00:46:25,529 --> 00:46:29,609
you know we look in the 32-bit time
frame you there was some things like

793
00:46:29,609 --> 00:46:30,909
Python dependencies

794
00:46:30,909 --> 00:46:34,219
while maybe you can run that price in
code on

795
00:46:34,219 --> 00:46:37,609
you know Idaho Idaho system that's
x86-64

796
00:46:37,609 --> 00:46:40,909
on if it's just being the output from
running some place in code or something

797
00:46:40,909 --> 00:46:42,229
perhaps you can use

798
00:46:42,229 --> 00:46:45,269
but I think we've been lucky so far I
think they'd be

799
00:46:45,269 --> 00:46:48,308
is necessary to have an aggressive sorta

800
00:46:48,309 --> 00:46:51,919
reboots kept the world mentality it is
necessary to have a rule that distro

801
00:46:51,919 --> 00:46:53,868
must always be boots capital

802
00:46:53,869 --> 00:46:57,069
and that's something I actually plan to
raise with vesco which is absolute

803
00:46:57,069 --> 00:46:58,319
engineering steering group

804
00:46:58,319 --> 00:47:01,979
to say you know we have to make that
mandatory because

805
00:47:01,979 --> 00:47:05,269
it's nice that as far as I'm concerned
I'm a non fanboy

806
00:47:05,269 --> 00:47:08,669
and it's the last architecture i care
about. but I'm sure other people care

807
00:47:08,669 --> 00:47:10,348
about other architectures in the future

808
00:47:10,349 --> 00:47:14,019
on in general it's a good thing to make
sure you can be bootstrapped will

809
00:47:14,019 --> 00:47:19,968
if you need to wiki thanks

810
00:47:19,969 --> 00:47:23,839
we should probably will be there and
talk about our problems together

