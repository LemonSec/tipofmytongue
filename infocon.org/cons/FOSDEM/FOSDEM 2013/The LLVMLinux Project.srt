1
00:00:01,000 --> 00:00:03,510
hello everyone and thanks for

2
00:00:03,510 --> 00:00:08,300
adjoining the stock so I am I want to
present

3
00:00:08,300 --> 00:00:11,320
the LBM Linux project and

4
00:00:11,320 --> 00:00:14,990
we where at the last plumpers and

5
00:00:14,990 --> 00:00:19,380
X to the far for them arm we can present
the t-shirt

6
00:00:19,380 --> 00:00:23,288
yeah because I the feedback was really
nice but

7
00:00:23,289 --> 00:00:26,460
you have no t-shirts here it is I'm

8
00:00:26,460 --> 00:00:30,099
tho what what's this project about

9
00:00:30,099 --> 00:00:35,460
arm first of all

10
00:00:35,460 --> 00:00:39,649
well why do we want to compile the
kernel with clan

11
00:00:39,649 --> 00:00:43,160
yeah we have to CC we have a compiler
why

12
00:00:43,160 --> 00:00:48,890
well one reason

13
00:00:48,890 --> 00:00:52,230
I is

14
00:00:52,230 --> 00:00:55,730
we get a few more dr king of sticks out
of line

15
00:00:55,730 --> 00:00:59,218
yeah I am in the first line

16
00:00:59,219 --> 00:01:03,289
you see the output from GCC in this case
for two

17
00:01:03,289 --> 00:01:06,840
and I the second line that's

18
00:01:06,840 --> 00:01:10,229
the same a rock for clang and you get
more

19
00:01:10,229 --> 00:01:13,810
informative output I am

20
00:01:13,810 --> 00:01:18,020
with clang thats also the reason why for
example

21
00:01:18,020 --> 00:01:22,189
Google they built they are computer code
base

22
00:01:22,189 --> 00:01:27,330
side by side with gcc in Klang they use
gcc in production

23
00:01:27,330 --> 00:01:31,130
but they built with clang for the
diagnostics am

24
00:01:31,130 --> 00:01:34,350
so that's one example why

25
00:01:34,350 --> 00:01:37,520
that could be interesting for the
Connell well

26
00:01:37,520 --> 00:01:41,170
behalf in all of such warnings

27
00:01:41,170 --> 00:01:46,460
a rose and so on arm so that can be
quite noisy and we have to find out okay

28
00:01:46,460 --> 00:01:48,079
what's the useful knowledge

29
00:01:48,079 --> 00:01:51,669
not but still we get a lot of
information out of this and a

30
00:01:51,670 --> 00:01:56,119
I more informative hints on

31
00:01:56,119 --> 00:01:59,829
what what might be wrong at this

32
00:01:59,829 --> 00:02:06,829
arm place also

33
00:02:07,420 --> 00:02:11,110
we get more informative hints on

34
00:02:11,110 --> 00:02:14,239
what to do what to fix cell

35
00:02:14,239 --> 00:02:17,459
arm even you see year those

36
00:02:17,459 --> 00:02:20,569
nice carrot pointers so

37
00:02:20,569 --> 00:02:24,420
clang knows how more detail not just

38
00:02:24,420 --> 00:02:28,500
something wrong and the statement so it
went wrong

39
00:02:28,500 --> 00:02:31,760
at this position so that's I am

40
00:02:31,760 --> 00:02:38,760
one of the strength of clack

41
00:02:41,670 --> 00:02:45,399
come present for the macros in GCC you
just get an error well

42
00:02:45,400 --> 00:02:48,770
we have are in this macro we half

43
00:02:48,770 --> 00:02:53,130
arm in a row or invented operates

44
00:02:53,130 --> 00:02:56,140
in Klang we

45
00:02:56,140 --> 00:03:00,100
get the macro expanded so you get to
know

46
00:03:00,100 --> 00:03:04,420
where in the maybe daisy chain macros

47
00:03:04,420 --> 00:03:08,260
the a bad condition happened yes 0

48
00:03:08,260 --> 00:03:11,840
it's not then up to you to dig through

49
00:03:11,840 --> 00:03:17,620
may be multiple macros and fine the the
at the spot where the bakkie is

50
00:03:17,620 --> 00:03:24,620
you get morty tied output here

51
00:03:27,040 --> 00:03:30,230
another thing which is a interesting

52
00:03:30,230 --> 00:03:33,390
here is that plan allows are

53
00:03:33,390 --> 00:03:36,899
more things like we have the study
analyze

54
00:03:36,900 --> 00:03:40,459
arm where we can create

55
00:03:40,459 --> 00:03:43,630
una analysis of our coat

56
00:03:43,630 --> 00:03:47,370
know and weekend also get I am

57
00:03:47,370 --> 00:03:50,930
detailed information on

58
00:03:50,930 --> 00:03:54,510
what goes wrong for example in this

59
00:03:54,510 --> 00:04:00,000
branch here arm

60
00:04:00,000 --> 00:04:03,440
we r currently working on

61
00:04:03,440 --> 00:04:06,870
adding this analyzer with the checker

62
00:04:06,870 --> 00:04:12,680
to a our compilation to a Linux kernel
it's still in the early stage

63
00:04:12,680 --> 00:04:18,548
arm and of course the kernel is a huge
code base but we are working on this

64
00:04:18,548 --> 00:04:22,570
and I'll we are curious to see what we
will find

65
00:04:22,570 --> 00:04:29,570
here about what can be improve so

66
00:04:30,880 --> 00:04:35,530
what health LBM is also part

67
00:04:35,530 --> 00:04:38,609
of a few more projects for example it's

68
00:04:38,610 --> 00:04:42,169
an integral part of renderscript in
android

69
00:04:42,169 --> 00:04:45,320
are it's powered of

70
00:04:45,320 --> 00:04:49,080
the galleon 3d

71
00:04:49,080 --> 00:04:52,320
engine in multiple

72
00:04:52,320 --> 00:04:58,000
ways aunt arm base for example also
fulfilled of TV in

73
00:04:58,000 --> 00:05:01,310
with clang arm

74
00:05:01,310 --> 00:05:05,050
tomorrow stillbirths will have his talk

75
00:05:05,050 --> 00:05:09,250
and he will arm top about this in more
detail

76
00:05:09,250 --> 00:05:12,430
so that's away a clan is already in use

77
00:05:12,430 --> 00:05:16,160
that's also freebies deport and and also

78
00:05:16,160 --> 00:05:20,440
mimics threes using it so that's quite
interesting

79
00:05:20,440 --> 00:05:25,530
so now back to

80
00:05:25,530 --> 00:05:29,609
the Linux kernel back to our elderly and
Linux project

81
00:05:29,610 --> 00:05:35,090
so

82
00:05:35,090 --> 00:05:38,210
well of course our goal is to build the
Linux kernel

83
00:05:38,210 --> 00:05:41,620
with clang arm

84
00:05:41,620 --> 00:05:46,270
4 as much architect risk we can reach

85
00:05:46,270 --> 00:05:50,200
clang ease actually inherently

86
00:05:50,200 --> 00:05:54,409
cross compile arm clanging

87
00:05:54,409 --> 00:05:58,110
uses a kind of into media director
representation

88
00:05:58,110 --> 00:06:01,570
so are you parse the you parse

89
00:06:01,570 --> 00:06:05,990
your your kohut get it into an
intermediate present representation

90
00:06:05,990 --> 00:06:09,789
can do all sorts of optimization on that
into me to rip

91
00:06:09,789 --> 00:06:13,419
approved representation and finally

92
00:06:13,419 --> 00:06:16,700
you'd dump it into a the

93
00:06:16,700 --> 00:06:20,060
architecture specific cooked so
apparently

94
00:06:20,060 --> 00:06:25,030
clang is a sort of a cross compile
already arm

95
00:06:25,030 --> 00:06:28,900
soul targeting multiple architectures is
actually quite

96
00:06:28,900 --> 00:06:34,270
easy so what we want to do with we want
to enable

97
00:06:34,270 --> 00:06:39,020
billing the carnal with feeling arm
currently we you reached at on

98
00:06:39,020 --> 00:06:42,200
arm x86 arm

99
00:06:42,200 --> 00:06:45,260
we are looking into mix but that don't

100
00:06:45,260 --> 00:06:48,370
doesn't have a lot of attraction right
now now

101
00:06:48,370 --> 00:06:52,500
um the goal of the project is also

102
00:06:52,500 --> 00:06:58,110
to find anything that's kind blocker so
we have a few spots we are kind of

103
00:06:58,110 --> 00:07:01,900
the kernel tends to use really

104
00:07:01,900 --> 00:07:06,320
GCC specific and see lange maybe

105
00:07:06,320 --> 00:07:09,320
because of it architecture cannot do
that as

106
00:07:09,320 --> 00:07:12,729
those though there now few things where
we have to find

107
00:07:12,729 --> 00:07:16,700
what's what's what's the blocker your
and actually where do with all of it

108
00:07:16,700 --> 00:07:20,300
yeah be a dick colonel albeit a ceiling

109
00:07:20,300 --> 00:07:25,260
arm we r

110
00:07:25,260 --> 00:07:28,440
we are no 4 of the kernel

111
00:07:28,440 --> 00:07:31,830
or clack yeah we are kind of are

112
00:07:31,830 --> 00:07:35,150
extricating patches for both projects
and we are

113
00:07:35,150 --> 00:07:38,179
contributing them back to the upstream

114
00:07:38,180 --> 00:07:41,550
to clang and to the Linux kernel
currently four

115
00:07:41,550 --> 00:07:46,010
clang and LVM our patch said is quite
small it's I'm

116
00:07:46,010 --> 00:07:49,750
it's like 5 for each and IBM and Kang

117
00:07:49,750 --> 00:07:53,169
so that's kind of up to 10 for the
Connell

118
00:07:53,169 --> 00:07:56,339
our patch to is quite bigger arm

119
00:07:56,339 --> 00:08:00,229
because behalf especially on x86 a few
spots

120
00:08:00,229 --> 00:08:03,839
where arm we have two

121
00:08:03,839 --> 00:08:07,560
kind of jump through few hoops hoops 22

122
00:08:07,560 --> 00:08:10,560
gauge working

123
00:08:10,560 --> 00:08:14,810
arm and we want to kind of

124
00:08:14,810 --> 00:08:18,409
get those patches into shape where we
can move

125
00:08:18,409 --> 00:08:23,880
them into mainline

126
00:08:23,880 --> 00:08:27,789
soul arm you can find information

127
00:08:27,789 --> 00:08:32,149
about the project here lol BMW and
foundation or dork

128
00:08:32,149 --> 00:08:35,599
I am we have are

129
00:08:35,599 --> 00:08:38,620
and they are a project status

130
00:08:38,620 --> 00:08:41,799
page we have the roadmap there and

131
00:08:41,799 --> 00:08:45,079
I you can find also our

132
00:08:45,080 --> 00:08:48,399
links to the bill for there we have a
built for running

133
00:08:48,399 --> 00:08:52,339
which continuously built against

134
00:08:52,339 --> 00:08:55,600
Carmel clang a LBM

135
00:08:55,600 --> 00:09:00,190
upstream a of course with our patch that
on top

136
00:09:00,190 --> 00:09:05,110
so we are actively

137
00:09:05,110 --> 00:09:08,310
tracking the development hats a week

138
00:09:08,310 --> 00:09:12,779
can't we can enable the the work on up
streaming

139
00:09:12,779 --> 00:09:15,810
the patches arm

140
00:09:15,810 --> 00:09:20,439
architect who supported I will arm going
to more the tides

141
00:09:20,440 --> 00:09:27,190
in the next flights

142
00:09:27,190 --> 00:09:30,560
saw website you can reach us on IRC

143
00:09:30,560 --> 00:09:35,760
so we are on the channel ellerbee and
Linux on always TC

144
00:09:35,760 --> 00:09:38,880
are you can reach me here I'm on my nick

145
00:09:38,880 --> 00:09:43,020
the a-9 P F there so just drop by the
channel

146
00:09:43,020 --> 00:09:46,110
if you have any questions arm

147
00:09:46,110 --> 00:09:49,779
or if you need support to if you want to
try it out

148
00:09:49,779 --> 00:09:53,750
the F a mailing list LBM Linux so you
can skip

149
00:09:53,750 --> 00:09:58,250
post and scoop subscribe to that list

150
00:09:58,250 --> 00:10:01,740
if that was too far as to note it down
take a

151
00:10:01,740 --> 00:10:05,020
a quick shot on the QR code

152
00:10:05,020 --> 00:10:12,020
Ivan presented on their s lasts like two

153
00:10:14,200 --> 00:10:18,420
alright now show me the code

154
00:10:18,420 --> 00:10:21,610
just go to G the Linux Foundation not
o'rourke slash

155
00:10:21,610 --> 00:10:26,130
LBM next object so what do you get

156
00:10:26,130 --> 00:10:29,149
so its it's no clone of the kernel it's
not a clone of

157
00:10:29,149 --> 00:10:32,390
LBM and Clank what you get there East

158
00:10:32,390 --> 00:10:36,720
arm arm a kind of

159
00:10:36,720 --> 00:10:41,360
make framework yeah set of make files

160
00:10:41,360 --> 00:10:44,390
it will download the caramel download
nvm

161
00:10:44,390 --> 00:10:47,569
download see lange apply all patches

162
00:10:47,570 --> 00:10:51,230
and then build it so in the end you get
compiled

163
00:10:51,230 --> 00:10:54,250
colonel acquire new comp I'd with

164
00:10:54,250 --> 00:10:58,510
clang out are

165
00:10:58,510 --> 00:11:01,580
we still we r working on

166
00:11:01,580 --> 00:11:04,680
support for for Kb also we want

167
00:11:04,680 --> 00:11:08,550
to make all those nifty years changes

168
00:11:08,550 --> 00:11:11,649
and all those nitty-gritty workarounds

169
00:11:11,649 --> 00:11:14,910
arm we 122

170
00:11:14,910 --> 00:11:18,310
make them available in the Commons cable
system so

171
00:11:18,310 --> 00:11:22,489
actually be can kind of throw away our
'em

172
00:11:22,490 --> 00:11:27,130
our scripts soon or later arm

173
00:11:27,130 --> 00:11:32,000
so that's hosted their arm

174
00:11:32,000 --> 00:11:35,560
we also do testing

175
00:11:35,560 --> 00:11:39,939
in this framework so for example for the
arm targets

176
00:11:39,940 --> 00:11:43,370
we have a QM a system arm target

177
00:11:43,370 --> 00:11:47,190
where you just can kind of go to the a

178
00:11:47,190 --> 00:11:51,230
go to the top folder heat make and it
will build everything

179
00:11:51,230 --> 00:11:54,490
and even booted root fs and tested yeah
so

180
00:11:54,490 --> 00:11:58,410
complete weekend do the complete cycle

181
00:11:58,410 --> 00:12:01,699
until it runs so that's what we actually
use

182
00:12:01,699 --> 00:12:05,479
what's our tour four our work in kind of

183
00:12:05,480 --> 00:12:09,310
getting the patch is working getting
everything

184
00:12:09,310 --> 00:12:13,459
working and kinda for tracking upstream

185
00:12:13,459 --> 00:12:16,829
and for pushing our

186
00:12:16,829 --> 00:12:22,180
changes upstream

187
00:12:22,180 --> 00:12:25,290
just an example on how to use it so

188
00:12:25,290 --> 00:12:29,980
are you just check out the JIT you could
go to

189
00:12:29,980 --> 00:12:33,139
targets the Express and

190
00:12:33,139 --> 00:12:36,629
the simple case would just do you have
make yeah

191
00:12:36,629 --> 00:12:41,069
I this will do everything for you

192
00:12:41,069 --> 00:12:44,519
and it will it will even it allows you
even to boot are

193
00:12:44,519 --> 00:12:48,230
Buddha test system with p.m. ooo and

194
00:12:48,230 --> 00:12:55,129
verified towards arm

195
00:12:55,129 --> 00:12:59,110
they are few targets we have the
versatile express

196
00:12:59,110 --> 00:13:04,350
but also I Beth a target for the MSM
boards

197
00:13:04,350 --> 00:13:07,899
I'm I 586 x86-64

198
00:13:07,899 --> 00:13:11,560
Raspberry Pi I think we will merge

199
00:13:11,560 --> 00:13:15,628
a.m. be bored target in the next days

200
00:13:15,629 --> 00:13:19,410
if it not merged yet are but that's
pretty rough

201
00:13:19,410 --> 00:13:23,920
but arm well it's quite easy to set up
your own

202
00:13:23,920 --> 00:13:27,500
target yes just copy that some template
make a few

203
00:13:27,500 --> 00:13:31,319
adoptions and whom you have your own
target so it's

204
00:13:31,319 --> 00:13:34,748
quite easy to arm

205
00:13:34,749 --> 00:13:40,019
create your own words create your own
adoptions

206
00:13:40,019 --> 00:13:44,300
arm x86 currently we are

207
00:13:44,300 --> 00:13:48,889
the only working target here is colonel
3.3

208
00:13:48,889 --> 00:13:52,769
I'm because behalf currently huge
problems

209
00:13:52,769 --> 00:13:56,420
on on Main Line arm

210
00:13:56,420 --> 00:13:59,449
that's because we had some rewrites in
the in the

211
00:13:59,449 --> 00:14:04,550
remote coat and thats steelmaking
troubles right now

212
00:14:04,550 --> 00:14:10,769
are but we are working on that

213
00:14:10,769 --> 00:14:15,980
okay so ob what what do we have to do

214
00:14:15,980 --> 00:14:20,220
place is a big problem for us we are
debugging segment

215
00:14:20,220 --> 00:14:24,339
differences so if you compile with gcc
and if you compile with clang

216
00:14:24,339 --> 00:14:28,529
the output has different a style of
linking

217
00:14:28,529 --> 00:14:33,439
I so that's what we are debugging moving
x86 to mainline

218
00:14:33,439 --> 00:14:37,639
arm not our current before

219
00:14:37,639 --> 00:14:42,220
so if you have any more questions

220
00:14:42,220 --> 00:14:45,220
drop by on IRC

221
00:14:45,220 --> 00:14:49,850
check it out and build it

222
00:14:49,850 --> 00:14:53,100
some we always happy if you'd just

223
00:14:53,100 --> 00:14:57,499
ask AIF is blah problem or what's going
on

224
00:14:57,499 --> 00:15:00,709
ask us on IRC we are there alright

