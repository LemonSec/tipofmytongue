1
00:00:00,000 --> 00:00:05,759
<font color="#CCCCCC">I welcome thank you for coming</font>

2
00:00:03,480 --> 00:00:08,010
my name is best<font color="#CCCCCC"> Vandenberg and I want to</font>

3
00:00:05,759 --> 00:00:12,780
<font color="#E5E5E5">talk about a new language</font><font color="#CCCCCC"> i'm working on</font>

4
00:00:08,010 --> 00:00:16,740
it's called<font color="#CCCCCC"> c2 it's a variant of C</font><font color="#E5E5E5"> so</font>

5
00:00:12,780 --> 00:00:19,140
<font color="#CCCCCC">Nancy got</font><font color="#E5E5E5"> to the purpose of this talk is</font>

6
00:00:16,740 --> 00:00:21,659
to inform other developers<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> new</font>

7
00:00:19,140 --> 00:00:22,800
language and maybe get some feedback or

8
00:00:21,660 --> 00:00:24,420
ideas

9
00:00:22,800 --> 00:00:29,670
hopefully even patches that<font color="#E5E5E5"> will be best</font>

10
00:00:24,420 --> 00:00:34,050
but we'll see so this project started in

11
00:00:29,670 --> 00:00:38,340
<font color="#CCCCCC">June last</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> I program a lot of c and</font>

12
00:00:34,050 --> 00:00:40,589
<font color="#CCCCCC">i was wondering well I</font><font color="#E5E5E5"> like it a lot but</font>

13
00:00:38,340 --> 00:00:41,550
it has some things that I'm not so happy

14
00:00:40,590 --> 00:00:46,079
about

15
00:00:41,550 --> 00:00:49,919
so probably there are a lot of people

16
00:00:46,079 --> 00:00:54,629
here<font color="#CCCCCC"> programme ce and maybe like it as</font>

17
00:00:49,920 --> 00:00:56,100
<font color="#E5E5E5">well as me so</font><font color="#CCCCCC"> I thought a lot of open</font>

18
00:00:54,629 --> 00:00:58,739
source is made and<font color="#E5E5E5"> see but it</font>

19
00:00:56,100 --> 00:00:59,520
<font color="#E5E5E5">development</font><font color="#CCCCCC"> this is not so fast as</font><font color="#E5E5E5"> I</font>

20
00:00:58,739 --> 00:01:04,018
<font color="#E5E5E5">would like</font>

21
00:00:59,520 --> 00:01:06,240
so maybe we can improve that somehow<font color="#E5E5E5"> so</font>

22
00:01:04,019 --> 00:01:09,420
the<font color="#E5E5E5"> question is how going make it better</font>

23
00:01:06,240 --> 00:01:16,649
and more productive to program in<font color="#E5E5E5"> c and</font>

24
00:01:09,420 --> 00:01:19,020
more fun so let's see let's look at the

25
00:01:16,650 --> 00:01:22,650
points<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> analyze that the</font><font color="#CCCCCC"> c</font><font color="#E5E5E5"> language</font>

26
00:01:19,020 --> 00:01:25,289
and<font color="#CCCCCC"> Nazi to just the old see</font><font color="#E5E5E5"> all the</font>

27
00:01:22,650 --> 00:01:28,650
code base is huge<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> lots of open</font>

28
00:01:25,290 --> 00:01:30,090
<font color="#CCCCCC">sourcing</font><font color="#E5E5E5"> thought millions of lines and</font><font color="#CCCCCC"> I</font>

29
00:01:28,650 --> 00:01:31,259
don't<font color="#CCCCCC"> know how many</font><font color="#E5E5E5"> to see developers</font>

30
00:01:30,090 --> 00:01:34,770
who are in the world

31
00:01:31,259 --> 00:01:38,220
maybe also million<font color="#E5E5E5"> it is good to runtime</font>

32
00:01:34,770 --> 00:01:39,960
<font color="#E5E5E5">performance and for me the most</font>

33
00:01:38,220 --> 00:01:42,869
important the<font color="#CCCCCC"> obstruction domain is very</font>

34
00:01:39,960 --> 00:01:44,610
nice<font color="#E5E5E5"> it's very good at what it does and</font>

35
00:01:42,869 --> 00:01:46,829
there are lots of other languages that

36
00:01:44,610 --> 00:01:49,979
to do other things that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> generating</font>

37
00:01:46,829 --> 00:01:52,258
websites<font color="#E5E5E5"> or applications or widgets but</font>

38
00:01:49,979 --> 00:01:57,329
for some things<font color="#CCCCCC"> see</font><font color="#E5E5E5"> is still unbeaten</font>

39
00:01:52,259 --> 00:01:59,159
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Colonel's drivers low-level</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> i</font>

40
00:01:57,329 --> 00:02:04,169
really wanted<font color="#E5E5E5"> to keep that</font>

41
00:01:59,159 --> 00:02:08,220
<font color="#CCCCCC">there were also</font><font color="#E5E5E5"> some things that I felt</font>

42
00:02:04,170 --> 00:02:09,269
were not so good<font color="#CCCCCC"> it c is probably older</font>

43
00:02:08,220 --> 00:02:12,540
than me even

44
00:02:09,269 --> 00:02:16,769
<font color="#E5E5E5">and every day I learn new things about</font>

45
00:02:12,540 --> 00:02:20,010
<font color="#CCCCCC">CY program for 15</font><font color="#E5E5E5"> years already</font><font color="#CCCCCC"> at last</font>

46
00:02:16,769 --> 00:02:22,200
week<font color="#E5E5E5"> I found out this this is possible</font>

47
00:02:20,010 --> 00:02:23,730
you can just sweep buffering and<font color="#E5E5E5"> the</font>

48
00:02:22,200 --> 00:02:25,440
index<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> matter</font>

49
00:02:23,730 --> 00:02:26,970
<font color="#E5E5E5">it surprised me</font><font color="#CCCCCC"> have i've</font><font color="#E5E5E5"> been</font>

50
00:02:25,440 --> 00:02:31,349
<font color="#E5E5E5">programmed this language for 15 years</font>

51
00:02:26,970 --> 00:02:32,700
<font color="#E5E5E5">and the next one</font><font color="#CCCCCC"> that's it</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> some</font>

52
00:02:31,349 --> 00:02:35,879
<font color="#E5E5E5">type definition</font>

53
00:02:32,700 --> 00:02:40,500
yeah you probably need a<font color="#CCCCCC"> Nobel Prize</font><font color="#E5E5E5"> to</font>

54
00:02:35,879 --> 00:02:41,819
read this one other thing that<font color="#E5E5E5"> bullet</font>

55
00:02:40,500 --> 00:02:45,000
<font color="#CCCCCC">means that you always need a lot of</font>

56
00:02:41,819 --> 00:02:47,369
tools to just run<font color="#CCCCCC"> building c program</font><font color="#E5E5E5"> at</font>

57
00:02:45,000 --> 00:02:49,980
normalcy project has multiple<font color="#E5E5E5"> see files</font>

58
00:02:47,370 --> 00:02:53,430
so you need something like a make file

59
00:02:49,980 --> 00:02:55,200
to build it<font color="#CCCCCC"> not just the compiler and</font>

60
00:02:53,430 --> 00:03:00,750
the<font color="#E5E5E5"> preprocessor in the</font><font color="#CCCCCC"> compilers</font>

61
00:02:55,200 --> 00:03:04,738
heavily<font color="#E5E5E5"> used as or abused</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> that the</font>

62
00:03:00,750 --> 00:03:07,440
thing that<font color="#CCCCCC"> i found most</font><font color="#E5E5E5"> bothersome</font><font color="#CCCCCC"> is</font>

63
00:03:04,739 --> 00:03:09,989
that<font color="#CCCCCC"> they had to type a lot</font><font color="#E5E5E5"> its forward</font>

64
00:03:07,440 --> 00:03:12,630
<font color="#E5E5E5">declarations and</font><font color="#CCCCCC"> header file</font><font color="#E5E5E5"> languages</font>

65
00:03:09,989 --> 00:03:15,120
like<font color="#E5E5E5"> Java don't have that so why come to</font>

66
00:03:12,630 --> 00:03:15,690
make<font color="#CCCCCC"> c compiler that</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> understands</font>

67
00:03:15,120 --> 00:03:18,930
that

68
00:03:15,690 --> 00:03:25,739
so those were the main points<font color="#CCCCCC"> i'm trying</font>

69
00:03:18,930 --> 00:03:28,680
to reach with<font color="#CCCCCC"> c2fo</font><font color="#E5E5E5"> in this presentation</font>

70
00:03:25,739 --> 00:03:32,130
I will show you some core aspects of<font color="#E5E5E5"> c2</font>

71
00:03:28,680 --> 00:03:36,010
with that mandatory hello world of

72
00:03:32,130 --> 00:03:43,239
course and three concepts

73
00:03:36,010 --> 00:03:45,459
<font color="#CCCCCC">oh this is</font><font color="#E5E5E5"> a hello world and see to it</font>

74
00:03:43,239 --> 00:03:49,299
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> almost the same as a normal hello</font>

75
00:03:45,459 --> 00:03:52,840
world and see<font color="#E5E5E5"> now for differences</font><font color="#CCCCCC"> i'll</font>

76
00:03:49,299 --> 00:03:55,659
briefly go over them<font color="#E5E5E5"> every file</font><font color="#CCCCCC"> in situ</font>

77
00:03:52,840 --> 00:03:58,989
starts with this declaration package

78
00:03:55,659 --> 00:04:01,000
<font color="#E5E5E5">every file belongs to a package and a</font>

79
00:03:58,989 --> 00:04:02,349
package<font color="#CCCCCC"> consists of multiple files if</font>

80
00:04:01,000 --> 00:04:03,159
<font color="#E5E5E5">they just have the same package</font>

81
00:04:02,349 --> 00:04:07,030
statement

82
00:04:03,159 --> 00:04:10,179
the second one is we don't have include

83
00:04:07,030 --> 00:04:17,380
<font color="#CCCCCC">they're allowed but they're not used</font>

84
00:04:10,180 --> 00:04:19,930
instead with the<font color="#CCCCCC"> you statement that does</font>

85
00:04:17,380 --> 00:04:23,440
the same thing but it doesn't copy<font color="#E5E5E5"> paste</font>

86
00:04:19,930 --> 00:04:26,740
the entire<font color="#CCCCCC"> st do th into your file so</font>

87
00:04:23,440 --> 00:04:29,740
when the<font color="#CCCCCC"> c2 compiler compiles it reads</font>

88
00:04:26,740 --> 00:04:34,270
like eight lines it doesn't<font color="#CCCCCC"> rate 800</font>

89
00:04:29,740 --> 00:04:37,810
<font color="#E5E5E5">lines if third thing is the function</font>

90
00:04:34,270 --> 00:04:40,840
<font color="#CCCCCC">keyword I find that very nice to prefix</font>

91
00:04:37,810 --> 00:04:43,060
all the functions with funk all the

92
00:04:40,840 --> 00:04:46,929
types are also prefix it with<font color="#E5E5E5"> keyword</font>

93
00:04:43,060 --> 00:04:49,330
type<font color="#E5E5E5"> the last thing is that is it change</font>

94
00:04:46,930 --> 00:04:52,300
<font color="#E5E5E5">the type system that types are always</font>

95
00:04:49,330 --> 00:04:53,770
continuous<font color="#CCCCCC"> so antsy you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> one part</font>

96
00:04:52,300 --> 00:04:57,340
here and the other parts behind the

97
00:04:53,770 --> 00:05:03,529
variable name<font color="#E5E5E5"> so in situ</font><font color="#CCCCCC"> it's always a</font>

98
00:04:57,340 --> 00:05:05,929
continuous string

99
00:05:03,529 --> 00:05:08,209
<font color="#CCCCCC">then the first concept it's the</font>

100
00:05:05,929 --> 00:05:11,268
<font color="#E5E5E5">multi-part there are three things here</font>

101
00:05:08,209 --> 00:05:14,539
<font color="#CCCCCC">it's a function main</font><font color="#E5E5E5"> it's a function</font>

102
00:05:11,269 --> 00:05:18,019
number that number and<font color="#CCCCCC"> a type this</font><font color="#E5E5E5"> is it</font>

103
00:05:14,539 --> 00:05:19,519
typedef<font color="#E5E5E5"> the order of these three doesn't</font>

104
00:05:18,019 --> 00:05:23,689
matter you can do them in any order to

105
00:05:19,519 --> 00:05:25,429
compile just figure it out<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> see</font>

106
00:05:23,689 --> 00:05:25,999
the type is used here and<font color="#CCCCCC"> is defined</font>

107
00:05:25,429 --> 00:05:27,768
here

108
00:05:25,999 --> 00:05:29,689
<font color="#E5E5E5">this function is defined here and used</font>

109
00:05:27,769 --> 00:05:33,499
<font color="#CCCCCC">here</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't matter</font>

110
00:05:29,689 --> 00:05:36,229
so you don't need for declarations and

111
00:05:33,499 --> 00:05:40,549
they're all<font color="#E5E5E5"> there even forbidden</font><font color="#CCCCCC"> so just</font>

112
00:05:36,229 --> 00:05:41,869
compile<font color="#CCCCCC"> compile</font><font color="#E5E5E5"> errors the second</font>

113
00:05:40,549 --> 00:05:45,438
concept you need when you don't have

114
00:05:41,869 --> 00:05:49,369
<font color="#E5E5E5">includes is</font><font color="#CCCCCC"> the packages</font><font color="#E5E5E5"> we saw them</font>

115
00:05:45,439 --> 00:05:52,189
briefly<font color="#E5E5E5"> so this is a file that uses the</font>

116
00:05:49,369 --> 00:05:55,279
package<font color="#CCCCCC"> utils and these two files are</font>

117
00:05:52,189 --> 00:05:57,559
inside the package details and<font color="#E5E5E5"> they is</font>

118
00:05:55,279 --> 00:05:59,058
<font color="#E5E5E5">also new keywords they want to find the</font>

119
00:05:57,559 --> 00:06:01,699
type buffer and the other one is a

120
00:05:59,059 --> 00:06:03,949
function here for this

121
00:06:01,699 --> 00:06:05,869
the calling<font color="#CCCCCC"> site it doesn't know where</font>

122
00:06:03,949 --> 00:06:08,929
they are it just knows they're in some

123
00:06:05,869 --> 00:06:10,729
<font color="#CCCCCC">pakka to tools if you move</font><font color="#E5E5E5"> these files</font>

124
00:06:08,929 --> 00:06:16,188
around<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> matter</font>

125
00:06:10,729 --> 00:06:17,748
so you can just use this one<font color="#E5E5E5"> the type or</font>

126
00:06:16,189 --> 00:06:19,999
you can use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the lock function you</font>

127
00:06:17,749 --> 00:06:23,899
can use the prefix like to c plus plus

128
00:06:19,999 --> 00:06:27,379
<font color="#CCCCCC">names escape name</font><font color="#E5E5E5"> spacer operator</font>

129
00:06:23,899 --> 00:06:35,389
you can also leave<font color="#CCCCCC"> leave it out if you</font>

130
00:06:27,379 --> 00:06:37,909
don't want to type<font color="#E5E5E5"> too much as long as</font>

131
00:06:35,389 --> 00:06:40,099
<font color="#E5E5E5">there's no conflict</font><font color="#CCCCCC"> there might be other</font>

132
00:06:37,909 --> 00:06:42,379
packages<font color="#E5E5E5"> use here</font><font color="#CCCCCC"> but also</font><font color="#E5E5E5"> have a lot of</font>

133
00:06:40,099 --> 00:06:50,099
times then it's<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> if there are</font>

134
00:06:42,379 --> 00:06:57,180
conflicts you have to use this

135
00:06:50,100 --> 00:06:59,700
<font color="#CCCCCC">the third concept is the recipe</font><font color="#E5E5E5"> when you</font>

136
00:06:57,180 --> 00:07:01,350
don't have<font color="#CCCCCC"> include statements</font><font color="#E5E5E5"> where you</font>

137
00:06:59,700 --> 00:07:06,330
specify the file but have<font color="#CCCCCC"> a used</font>

138
00:07:01,350 --> 00:07:08,370
<font color="#CCCCCC">statement</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> the compiler</font><font color="#CCCCCC"> need to</font>

139
00:07:06,330 --> 00:07:10,260
search space so it needs<font color="#CCCCCC"> to know where</font>

140
00:07:08,370 --> 00:07:13,170
the<font color="#E5E5E5"> components know where to find these</font>

141
00:07:10,260 --> 00:07:16,080
files and where to look for them<font color="#E5E5E5"> so for</font>

142
00:07:13,170 --> 00:07:20,010
every<font color="#CCCCCC"> see to project the compiler</font>

143
00:07:16,080 --> 00:07:21,539
compiles<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and target executable it</font>

144
00:07:20,010 --> 00:07:24,270
doesn't compile the separate files

145
00:07:21,540 --> 00:07:26,520
individually<font color="#E5E5E5"> so normally make you just</font>

146
00:07:24,270 --> 00:07:29,909
<font color="#CCCCCC">call DC for</font><font color="#E5E5E5"> this file and</font><font color="#CCCCCC"> GC for that</font>

147
00:07:26,520 --> 00:07:31,409
file with all long string of defines

148
00:07:29,910 --> 00:07:38,670
behind it<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not the case anymore</font>

149
00:07:31,410 --> 00:07:41,790
<font color="#E5E5E5">you just run the</font><font color="#CCCCCC"> c2 compiler and it it</font>

150
00:07:38,670 --> 00:07:45,810
will look up the recipe file and it

151
00:07:41,790 --> 00:07:48,240
looks like this and<font color="#CCCCCC"> we'll start running</font>

152
00:07:45,810 --> 00:07:51,900
these things<font color="#E5E5E5"> and the funny thing I found</font>

153
00:07:48,240 --> 00:07:54,900
is<font color="#E5E5E5"> that this looks like a</font><font color="#CCCCCC"> sea make file</font>

154
00:07:51,900 --> 00:07:58,229
if<font color="#E5E5E5"> you familiar with that only it's</font>

155
00:07:54,900 --> 00:08:00,060
inside the compiler<font color="#E5E5E5"> so here we have an</font>

156
00:07:58,230 --> 00:08:03,420
executable<font color="#CCCCCC"> it's called example one</font>

157
00:08:00,060 --> 00:08:06,480
there's two files and you can build it

158
00:08:03,420 --> 00:08:09,030
<font color="#E5E5E5">second one</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> library it has some</font>

159
00:08:06,480 --> 00:08:12,270
defines<font color="#E5E5E5"> so this is like minus the</font>

160
00:08:09,030 --> 00:08:15,030
<font color="#E5E5E5">capital</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> for people</font><font color="#CCCCCC"> who know</font><font color="#E5E5E5"> that and</font>

161
00:08:12,270 --> 00:08:20,099
<font color="#E5E5E5">they're used when compiling these files</font>

162
00:08:15,030 --> 00:08:23,909
<font color="#CCCCCC">there's also an</font><font color="#E5E5E5"> export function or</font><font color="#CCCCCC"> entry</font>

163
00:08:20,100 --> 00:08:26,310
that dictates to the compiler which

164
00:08:23,910 --> 00:08:28,980
symbols of these files to export outside

165
00:08:26,310 --> 00:08:32,280
so<font color="#CCCCCC"> their physical</font><font color="#E5E5E5"> you can use them if</font>

166
00:08:28,980 --> 00:08:35,520
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> linking to this library so</font>

167
00:08:32,280 --> 00:08:38,699
instead of just using the language<font color="#E5E5E5"> do</font>

168
00:08:35,520 --> 00:08:41,370
one thing and then using<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a linker</font>

169
00:08:38,700 --> 00:08:43,169
script to modify symbols which quite

170
00:08:41,370 --> 00:08:48,300
hard<font color="#E5E5E5"> you can just do it</font>

171
00:08:43,169 --> 00:08:52,140
specify that in the language and that's

172
00:08:48,300 --> 00:08:55,890
the basic thing about<font color="#CCCCCC"> c2 it's more</font>

173
00:08:52,140 --> 00:08:57,689
holistic<font color="#CCCCCC"> ansi c</font><font color="#E5E5E5"> just have one thing you</font>

174
00:08:55,890 --> 00:09:01,020
just<font color="#CCCCCC"> compare one file into a daughter</font>

175
00:08:57,690 --> 00:09:03,779
<font color="#E5E5E5">profile</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> see two tries to do</font>

176
00:09:01,020 --> 00:09:07,680
more than that just does the whole flow

177
00:09:03,779 --> 00:09:09,509
<font color="#E5E5E5">and</font><font color="#CCCCCC"> I have a</font><font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> to-do list is</font>

178
00:09:07,680 --> 00:09:12,420
quite long<font color="#E5E5E5"> especially with tooling</font>

179
00:09:09,509 --> 00:09:17,670
because<font color="#CCCCCC"> i want to integrate those inside</font>

180
00:09:12,420 --> 00:09:20,399
<font color="#CCCCCC">situ</font><font color="#E5E5E5"> like a style sort of stuff goes</font>

181
00:09:17,670 --> 00:09:31,170
into the<font color="#CCCCCC"> compiler well</font><font color="#E5E5E5"> compiler to set</font>

182
00:09:20,399 --> 00:09:35,279
the current state<font color="#CCCCCC"> c2 is if you look at</font>

183
00:09:31,170 --> 00:09:39,180
the file here<font color="#CCCCCC"> the body</font><font color="#E5E5E5"> of the length of</font>

184
00:09:35,279 --> 00:09:43,410
the method is almost the same as<font color="#E5E5E5"> it is</font>

185
00:09:39,180 --> 00:09:47,790
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> the same as</font><font color="#CCCCCC"> C so it's still quite a</font>

186
00:09:43,410 --> 00:09:50,370
complex language<font color="#CCCCCC"> two-part</font><font color="#E5E5E5"> and like I</font>

187
00:09:47,790 --> 00:09:52,769
knew the<font color="#CCCCCC"> llvm project and</font><font color="#E5E5E5"> si</font><font color="#CCCCCC"> Lang</font>

188
00:09:50,370 --> 00:09:54,809
<font color="#E5E5E5">compiler waited so</font><font color="#CCCCCC"> I thought well this</font>

189
00:09:52,769 --> 00:09:56,519
is almost similar<font color="#CCCCCC"> I just hack in the</font>

190
00:09:54,809 --> 00:09:59,100
package<font color="#E5E5E5"> keywords and the</font><font color="#CCCCCC"> you statement</font>

191
00:09:56,519 --> 00:10:02,160
and<font color="#E5E5E5"> that's easy and you reuse that the</font>

192
00:09:59,100 --> 00:10:07,379
other stuff<font color="#E5E5E5"> that proved to be quite the</font>

193
00:10:02,160 --> 00:10:10,230
difficult because when<font color="#CCCCCC"> clang Parsons</font>

194
00:10:07,379 --> 00:10:11,699
this it tries to<font color="#CCCCCC"> them</font><font color="#E5E5E5"> it already knows</font>

195
00:10:10,230 --> 00:10:15,240
that there is a<font color="#E5E5E5"> prince</font><font color="#CCCCCC"> of statement</font>

196
00:10:11,699 --> 00:10:17,639
because it's in here while<font color="#CCCCCC"> c2</font><font color="#E5E5E5"> just</font>

197
00:10:15,240 --> 00:10:23,040
<font color="#CCCCCC">parses it</font><font color="#E5E5E5"> and then analyzes afterwards</font>

198
00:10:17,639 --> 00:10:26,519
<font color="#E5E5E5">so the whole code base of now that the</font>

199
00:10:23,040 --> 00:10:28,889
<font color="#E5E5E5">analyzing and the</font><font color="#CCCCCC"> the syntax tree a good</font>

200
00:10:26,519 --> 00:10:34,620
<font color="#E5E5E5">base for us</font><font color="#CCCCCC"> to clank</font><font color="#E5E5E5"> was unusable</font>

201
00:10:28,889 --> 00:10:37,379
so where we are using<font color="#CCCCCC"> llvm to generate</font>

202
00:10:34,620 --> 00:10:39,269
<font color="#E5E5E5">well</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> generate</font><font color="#CCCCCC"> I our code olivium I</font>

203
00:10:37,379 --> 00:10:43,589
<font color="#CCCCCC">our</font><font color="#E5E5E5"> code so that we can use the</font><font color="#CCCCCC"> back and</font>

204
00:10:39,269 --> 00:10:46,470
<font color="#CCCCCC">two generated the assembly stuff we did</font>

205
00:10:43,589 --> 00:10:49,949
<font color="#E5E5E5">you some</font><font color="#CCCCCC"> clan components especially the</font>

206
00:10:46,470 --> 00:10:53,309
<font color="#CCCCCC">Greek processor</font><font color="#E5E5E5"> we modified it slightly</font>

207
00:10:49,949 --> 00:10:55,199
<font color="#CCCCCC">we're also using the diagnostic engine</font>

208
00:10:53,309 --> 00:10:56,879
which is really nice but the whole

209
00:10:55,199 --> 00:10:58,949
middle part of the<font color="#E5E5E5"> analyzer the</font>

210
00:10:56,879 --> 00:11:01,230
departure<font color="#E5E5E5"> of the semantic analyzer we</font>

211
00:10:58,949 --> 00:11:06,029
stripped it out and replace them with

212
00:11:01,230 --> 00:11:08,670
our own version<font color="#E5E5E5"> so currently</font><font color="#CCCCCC"> crossing</font>

213
00:11:06,029 --> 00:11:11,490
<font color="#E5E5E5">into the</font><font color="#CCCCCC"> ASD</font><font color="#E5E5E5"> the abstract syntax tree is</font>

214
00:11:08,670 --> 00:11:13,170
quite far<font color="#E5E5E5"> so we we understand what the</font>

215
00:11:11,490 --> 00:11:15,269
language wants to do we<font color="#CCCCCC"> at it is</font>

216
00:11:13,170 --> 00:11:17,300
<font color="#E5E5E5">function call and this is a return</font>

217
00:11:15,269 --> 00:11:20,720
statement and<font color="#E5E5E5"> and so on</font>

218
00:11:17,300 --> 00:11:22,010
<font color="#CCCCCC">the analysis part is just starting so it</font>

219
00:11:20,720 --> 00:11:25,190
will work as long as you don't make any

220
00:11:22,010 --> 00:11:27,380
mistakes<font color="#CCCCCC"> but if you do it's</font><font color="#E5E5E5"> we don't</font>

221
00:11:25,190 --> 00:11:28,610
analyze it we just generate<font color="#E5E5E5"> a faulty</font>

222
00:11:27,380 --> 00:11:32,360
code

223
00:11:28,610 --> 00:11:34,790
another thing is<font color="#CCCCCC"> that because they are</font>

224
00:11:32,360 --> 00:11:37,790
<font color="#E5E5E5">such a huge</font><font color="#CCCCCC"> codebase I</font><font color="#E5E5E5"> wanted to be able</font>

225
00:11:34,790 --> 00:11:40,430
to generate<font color="#CCCCCC"> seek out</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> c to fall so</font>

226
00:11:37,790 --> 00:11:41,630
that's also in<font color="#CCCCCC"> it's quite far</font><font color="#E5E5E5"> because we</font>

227
00:11:40,430 --> 00:11:44,359
don't need to<font color="#CCCCCC"> analyze we can just</font>

228
00:11:41,630 --> 00:11:46,040
convert it and<font color="#CCCCCC"> not to c compiler</font><font color="#E5E5E5"> arm</font>

229
00:11:44,360 --> 00:11:50,600
<font color="#E5E5E5">sorted out</font>

230
00:11:46,040 --> 00:11:52,370
that's no problem and the<font color="#CCCCCC"> IR code</font>

231
00:11:50,600 --> 00:11:54,829
<font color="#E5E5E5">generation is just started to the</font><font color="#CCCCCC"> hello</font>

232
00:11:52,370 --> 00:11:57,829
<font color="#CCCCCC">world</font><font color="#E5E5E5"> will work and it will compile</font><font color="#CCCCCC"> but</font>

233
00:11:54,829 --> 00:12:00,949
that's about it<font color="#E5E5E5"> so it's it's quite a lot</font>

234
00:11:57,829 --> 00:12:08,390
of work to mix all the symbols because

235
00:12:00,950 --> 00:12:11,750
<font color="#E5E5E5">you look at this one when we have this</font>

236
00:12:08,390 --> 00:12:14,750
type so first we wash all the files and

237
00:12:11,750 --> 00:12:17,209
then<font color="#E5E5E5"> so sad because the</font><font color="#CCCCCC"> c2 compiler</font>

238
00:12:14,750 --> 00:12:19,040
always<font color="#CCCCCC"> compile the</font><font color="#E5E5E5"> whole project so it</font>

239
00:12:17,209 --> 00:12:24,709
<font color="#CCCCCC">parses all</font><font color="#E5E5E5"> the files and then</font><font color="#CCCCCC"> starts</font>

240
00:12:19,040 --> 00:12:26,959
analyzing<font color="#E5E5E5"> all the files so it knows have</font>

241
00:12:24,709 --> 00:12:28,910
some function<font color="#E5E5E5"> here it knows when it's</font>

242
00:12:26,959 --> 00:12:31,010
<font color="#CCCCCC">parsing this one is just no today I have</font>

243
00:12:28,910 --> 00:12:33,110
a statement here it appears to be

244
00:12:31,010 --> 00:12:35,270
something here that's probably<font color="#E5E5E5"> a type</font>

245
00:12:33,110 --> 00:12:37,459
something<font color="#E5E5E5"> here that's probably a name</font>

246
00:12:35,270 --> 00:12:41,480
let's go on<font color="#E5E5E5"> and then when analyzing it</font>

247
00:12:37,459 --> 00:12:43,640
will look at the global symbol table and

248
00:12:41,480 --> 00:12:46,610
say buffer that<font color="#CCCCCC"> you'll be a type</font>

249
00:12:43,640 --> 00:12:49,939
yeah<font color="#CCCCCC"> I</font><font color="#E5E5E5"> got one and</font><font color="#CCCCCC"> it's public</font><font color="#E5E5E5"> so that's</font>

250
00:12:46,610 --> 00:12:50,510
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it will go on</font><font color="#E5E5E5"> and on until it's</font>

251
00:12:49,940 --> 00:12:55,760
done

252
00:12:50,510 --> 00:12:59,029
if<font color="#E5E5E5"> it's if a symbol like a type or a</font>

253
00:12:55,760 --> 00:13:02,029
function or variable is not as<font color="#CCCCCC"> doesn't</font>

254
00:12:59,029 --> 00:13:03,829
have to<font color="#CCCCCC"> publicly</font><font color="#E5E5E5"> word its scope is</font>

255
00:13:02,029 --> 00:13:06,410
within the<font color="#E5E5E5"> package show this file could</font>

256
00:13:03,829 --> 00:13:08,420
use<font color="#E5E5E5"> if</font><font color="#CCCCCC"> there's no public</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> it could</font>

257
00:13:06,410 --> 00:13:09,890
<font color="#E5E5E5">be used from within this utils file</font>

258
00:13:08,420 --> 00:13:16,699
because it's in the same package with

259
00:13:09,890 --> 00:13:18,800
otherwise it can be<font color="#CCCCCC"> for optimization</font><font color="#E5E5E5"> we</font>

260
00:13:16,699 --> 00:13:21,620
use the same<font color="#E5E5E5"> optimization and</font><font color="#CCCCCC"> sees</font><font color="#E5E5E5"> the</font>

261
00:13:18,800 --> 00:13:24,260
static keyword so it would be as if this

262
00:13:21,620 --> 00:13:27,680
is in one single<font color="#E5E5E5"> see file and all the</font>

263
00:13:24,260 --> 00:13:29,630
<font color="#CCCCCC">non public functions are for your fixed</font>

264
00:13:27,680 --> 00:13:30,660
<font color="#E5E5E5">with static</font><font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> they have a really</font>

265
00:13:29,630 --> 00:13:33,750
local scope and

266
00:13:30,660 --> 00:13:36,269
<font color="#E5E5E5">the compiler knows hey this is only used</font>

267
00:13:33,750 --> 00:13:40,440
in here so<font color="#CCCCCC"> i can compile it</font><font color="#E5E5E5"> or optimize</font>

268
00:13:36,269 --> 00:13:43,829
it or<font color="#CCCCCC"> inline it</font>

269
00:13:40,440 --> 00:13:51,779
how<font color="#E5E5E5"> am i doing on time</font><font color="#CCCCCC"> four minutes</font><font color="#E5E5E5"> 4</font>

270
00:13:43,829 --> 00:13:57,810
minutes left<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so another thing is</font>

271
00:13:51,779 --> 00:14:00,000
because we have this independence

272
00:13:57,810 --> 00:14:03,029
between the order<font color="#E5E5E5"> we can just create a</font>

273
00:14:00,000 --> 00:14:07,019
<font color="#E5E5E5">reflector tool that that's on the agenda</font>

274
00:14:03,029 --> 00:14:09,149
<font color="#E5E5E5">that's to analyze this will get like</font>

275
00:14:07,019 --> 00:14:11,579
three entries and you can just drag them

276
00:14:09,149 --> 00:14:14,639
<font color="#CCCCCC">through</font><font color="#E5E5E5"> to reorder them and you can even</font>

277
00:14:11,579 --> 00:14:16,709
drag them to another file say<font color="#CCCCCC"> hey</font><font color="#E5E5E5"> I want</font>

278
00:14:14,639 --> 00:14:20,370
<font color="#E5E5E5">this one</font><font color="#CCCCCC"> I want to merge this with this</font>

279
00:14:16,709 --> 00:14:22,079
one<font color="#E5E5E5"> that's done and as you can see this</font>

280
00:14:20,370 --> 00:14:25,920
<font color="#E5E5E5">code it doesn't have to be modified</font>

281
00:14:22,079 --> 00:14:28,979
that way you can<font color="#CCCCCC"> just do that</font><font color="#E5E5E5"> you can</font>

282
00:14:25,920 --> 00:14:31,259
also call<font color="#CCCCCC"> sort function</font><font color="#E5E5E5"> there so</font><font color="#CCCCCC"> i want</font>

283
00:14:28,980 --> 00:14:34,019
to<font color="#E5E5E5"> sort them by type or by public or</font>

284
00:14:31,259 --> 00:14:39,660
non-public and<font color="#CCCCCC"> just</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> your order</font>

285
00:14:34,019 --> 00:14:43,470
that's done<font color="#CCCCCC"> have to recompile the tricky</font>

286
00:14:39,660 --> 00:14:45,089
thing<font color="#E5E5E5"> currently is that</font><font color="#CCCCCC"> i put the scope</font>

287
00:14:43,470 --> 00:14:46,949
<font color="#CCCCCC">at</font><font color="#E5E5E5"> a thousand files when</font><font color="#CCCCCC"> I compile</font><font color="#E5E5E5"> a</font>

288
00:14:45,089 --> 00:14:48,899
<font color="#E5E5E5">kernel</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> see a thousand</font><font color="#CCCCCC"> audio file so</font>

289
00:14:46,949 --> 00:14:52,859
that's about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> largest thing i can get</font>

290
00:14:48,899 --> 00:14:55,079
<font color="#CCCCCC">so I have to our thousands of files at</font>

291
00:14:52,860 --> 00:14:57,120
the same time so that requires a

292
00:14:55,079 --> 00:14:59,279
thousand<font color="#CCCCCC"> parses a thousand analyzes a</font>

293
00:14:57,120 --> 00:15:00,240
thousand<font color="#CCCCCC"> preprocessor</font><font color="#E5E5E5"> so that's quite a</font>

294
00:14:59,279 --> 00:15:02,310
lot of memory

295
00:15:00,240 --> 00:15:06,120
well that's not really an issue here but

296
00:15:02,310 --> 00:15:09,959
it might be on<font color="#CCCCCC"> some</font><font color="#E5E5E5"> if you have really</font>

297
00:15:06,120 --> 00:15:12,149
huge<font color="#CCCCCC"> go so we have to look at saving the</font>

298
00:15:09,959 --> 00:15:15,239
intermediate<font color="#E5E5E5"> results into into some</font>

299
00:15:12,149 --> 00:15:18,959
<font color="#CCCCCC">cache file and then continuing that's</font>

300
00:15:15,240 --> 00:15:22,259
currently also work in progress but for

301
00:15:18,959 --> 00:15:30,560
now we uses a single threat to just

302
00:15:22,259 --> 00:15:33,170
<font color="#CCCCCC">parts</font><font color="#E5E5E5"> all the files and save them</font>

303
00:15:30,560 --> 00:15:36,050
<font color="#E5E5E5">so we have a website</font><font color="#CCCCCC"> there's not much on</font>

304
00:15:33,170 --> 00:15:38,750
it except bigger<font color="#E5E5E5"> document with a lot of</font>

305
00:15:36,050 --> 00:15:40,790
explanations about the language and we

306
00:15:38,750 --> 00:15:44,690
have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> getup</font><font color="#E5E5E5"> account there are two</font>

307
00:15:40,790 --> 00:15:49,730
<font color="#E5E5E5">repositories one is c2 compiler</font><font color="#CCCCCC"> the</font>

308
00:15:44,690 --> 00:15:51,350
other ones modified<font color="#E5E5E5"> clang</font><font color="#CCCCCC"> archive so</font>

309
00:15:49,730 --> 00:16:01,400
thank you for coming and if you have any

310
00:15:51,350 --> 00:16:03,380
questions<font color="#CCCCCC"> that you and</font><font color="#E5E5E5"> yes two questions</font>

311
00:16:01,400 --> 00:16:05,240
<font color="#E5E5E5">how would you handle</font><font color="#CCCCCC"> scooping</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> Akron</font>

312
00:16:03,380 --> 00:16:08,810
constants and<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> take it was an</font>

313
00:16:05,240 --> 00:16:11,210
example<font color="#E5E5E5"> when it comes to</font><font color="#CCCCCC"> modules</font><font color="#E5E5E5"> and the</font>

314
00:16:08,810 --> 00:16:13,969
second one is<font color="#E5E5E5"> sure pretty horrifying</font>

315
00:16:11,210 --> 00:16:16,520
<font color="#E5E5E5">signature in</font><font color="#CCCCCC"> C could</font><font color="#E5E5E5"> you show what it</font>

316
00:16:13,970 --> 00:16:18,560
would<font color="#CCCCCC"> become in situ can</font><font color="#E5E5E5"> repeat the</font>

317
00:16:16,520 --> 00:16:20,630
first question<font color="#CCCCCC"> sharp</font><font color="#E5E5E5"> so how would you</font>

318
00:16:18,560 --> 00:16:25,459
handle<font color="#E5E5E5"> scoping</font><font color="#CCCCCC"> your macros and Constance</font>

319
00:16:20,630 --> 00:16:29,630
<font color="#CCCCCC">production constant</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> macros opinion</font>

320
00:16:25,460 --> 00:16:32,089
yes<font color="#E5E5E5"> that's that's because normally the</font>

321
00:16:29,630 --> 00:16:36,020
<font color="#E5E5E5">preprocessor abuse to just inline code</font>

322
00:16:32,089 --> 00:16:38,570
there and so<font color="#CCCCCC"> micro work so there</font><font color="#E5E5E5"> are</font>

323
00:16:36,020 --> 00:16:41,449
three types of<font color="#CCCCCC"> markers was</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a</font>

324
00:16:38,570 --> 00:16:43,520
feature<font color="#CCCCCC"> I want to with</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> opengl or</font>

325
00:16:41,450 --> 00:16:46,670
without you check those with<font color="#CCCCCC"> if death</font>

326
00:16:43,520 --> 00:16:49,490
<font color="#E5E5E5">the those are currently in in the file</font>

327
00:16:46,670 --> 00:16:51,949
here<font color="#E5E5E5"> constantly</font><font color="#CCCCCC"> can replace with</font><font color="#E5E5E5"> the</font>

328
00:16:49,490 --> 00:16:56,510
constant<font color="#E5E5E5"> that will work better work like</font>

329
00:16:51,950 --> 00:16:59,150
<font color="#CCCCCC">c++ instead of</font><font color="#E5E5E5"> see the third one is a</font>

330
00:16:56,510 --> 00:17:01,580
<font color="#CCCCCC">micro like the max max maybe it's more</font>

331
00:16:59,150 --> 00:17:04,310
<font color="#E5E5E5">like a replacement those can only be</font>

332
00:17:01,580 --> 00:17:06,829
done with include statements<font color="#E5E5E5"> so what you</font>

333
00:17:04,310 --> 00:17:08,750
have to do you can include the file as

334
00:17:06,829 --> 00:17:12,109
well but your own you can only<font color="#E5E5E5"> included</font>

335
00:17:08,750 --> 00:17:14,329
with<font color="#E5E5E5"> certain information so if you have</font>

336
00:17:12,109 --> 00:17:16,849
a following there are some<font color="#E5E5E5"> for</font>

337
00:17:14,329 --> 00:17:20,060
<font color="#CCCCCC">declaration will not work because you</font>

338
00:17:16,849 --> 00:17:24,079
<font color="#E5E5E5">only can specify the micro in there</font><font color="#CCCCCC"> and</font>

339
00:17:20,060 --> 00:17:26,389
you and for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> signature</font><font color="#E5E5E5"> the signature</font>

340
00:17:24,079 --> 00:17:29,270
of what you<font color="#E5E5E5"> had a</font><font color="#CCCCCC"> qualifying signature</font>

341
00:17:26,390 --> 00:17:32,330
<font color="#CCCCCC">in sea</font><font color="#E5E5E5"> of the function for example</font><font color="#CCCCCC"> guess</font>

342
00:17:29,270 --> 00:17:33,650
<font color="#CCCCCC">would be really different Institute</font>

343
00:17:32,330 --> 00:17:36,350
<font color="#E5E5E5">because I mean the reason it looks</font>

344
00:17:33,650 --> 00:17:39,920
horrible that it's pretty complex

345
00:17:36,350 --> 00:17:43,370
<font color="#CCCCCC">yeah I</font><font color="#E5E5E5"> don't think it will change a lot</font>

346
00:17:39,920 --> 00:17:43,860
<font color="#E5E5E5">except for the types they are the types</font>

347
00:17:43,370 --> 00:17:46,469
<font color="#E5E5E5">are</font>

348
00:17:43,860 --> 00:17:48,149
easier you cannot define a<font color="#CCCCCC"> I don't</font>

349
00:17:46,470 --> 00:17:49,860
really have an example<font color="#CCCCCC"> here</font><font color="#E5E5E5"> you can</font>

350
00:17:48,150 --> 00:17:55,679
replace<font color="#CCCCCC"> this</font><font color="#E5E5E5"> with structuring and the</font>

351
00:17:49,860 --> 00:17:57,030
<font color="#E5E5E5">final structure as possible you can but</font>

352
00:17:55,679 --> 00:18:00,000
you have to do it in several steps<font color="#E5E5E5"> you</font>

353
00:17:57,030 --> 00:18:06,290
first<font color="#E5E5E5"> day</font><font color="#CCCCCC"> i define the type function and</font>

354
00:18:00,000 --> 00:18:06,290
<font color="#CCCCCC">it's this</font><font color="#E5E5E5"> and then appointed to that</font>

