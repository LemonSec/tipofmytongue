1
00:00:06,080 --> 00:00:09,040
welcome to the microphone and

2
00:00:07,520 --> 00:00:09,360
component-based operating system death

3
00:00:09,040 --> 00:00:12,000
row

4
00:00:09,360 --> 00:00:12,799
this is the i'm not sure how many

5
00:00:12,000 --> 00:00:15,120
iterations but

6
00:00:12,799 --> 00:00:16,720
i think we've done that a lot and i'm

7
00:00:15,120 --> 00:00:19,759
very happy to see that it's still

8
00:00:16,720 --> 00:00:23,198
growing and so many people come thanks

9
00:00:19,760 --> 00:00:25,920
our first speaker is garnet heiser

10
00:00:23,199 --> 00:00:27,439
you know him he's the head of the acl 4

11
00:00:25,920 --> 00:00:30,880
project for many years now

12
00:00:27,439 --> 00:00:33,280
and he's going to give a project update

13
00:00:30,880 --> 00:00:34,399
thank you nice to see a few familiar

14
00:00:33,280 --> 00:00:36,000
faces

15
00:00:34,399 --> 00:00:37,520
this is the third time i'm speaking at

16
00:00:36,000 --> 00:00:39,280
foursafe but the first time i'm actually

17
00:00:37,520 --> 00:00:42,800
physically here so that's really

18
00:00:39,280 --> 00:00:45,840
a nice change okay

19
00:00:42,800 --> 00:00:48,480
i like to give a bit of an update on

20
00:00:45,840 --> 00:00:49,920
where seo four is and a lot of

21
00:00:48,480 --> 00:00:51,919
interesting things has have have

22
00:00:49,920 --> 00:00:56,239
happened over the last year

23
00:00:51,920 --> 00:00:59,600
so just um who is familiar with seo four

24
00:00:56,239 --> 00:01:01,599
who is not okay um

25
00:00:59,600 --> 00:01:03,280
so the next few slides are not

26
00:01:01,600 --> 00:01:04,640
completely wasted but i'll go through

27
00:01:03,280 --> 00:01:08,000
them quickly so

28
00:01:04,640 --> 00:01:09,760
um seo four is a system that is

29
00:01:08,000 --> 00:01:11,760
designed from the beginning for highest

30
00:01:09,760 --> 00:01:13,119
assurance um with the strength of

31
00:01:11,760 --> 00:01:15,040
mathematical proof

32
00:01:13,119 --> 00:01:16,159
so it is it was the first operating

33
00:01:15,040 --> 00:01:18,320
system with a

34
00:01:16,159 --> 00:01:19,200
proof of implementation correctness and

35
00:01:18,320 --> 00:01:21,520
then following

36
00:01:19,200 --> 00:01:23,040
um proof of that it enforces security

37
00:01:21,520 --> 00:01:25,840
properties

38
00:01:23,040 --> 00:01:27,200
it's the first and in at least as far as

39
00:01:25,840 --> 00:01:30,000
the open literature goes

40
00:01:27,200 --> 00:01:31,840
only protected mode os with a complete

41
00:01:30,000 --> 00:01:33,520
and sound worst case execution time

42
00:01:31,840 --> 00:01:34,720
analysis which is what you need for hard

43
00:01:33,520 --> 00:01:38,000
real time

44
00:01:34,720 --> 00:01:38,560
um it's got what i claim is the world's

45
00:01:38,000 --> 00:01:42,320
most

46
00:01:38,560 --> 00:01:45,520
advanced mixed criticality features for

47
00:01:42,320 --> 00:01:47,439
combining critical real times

48
00:01:45,520 --> 00:01:48,720
functionality with untrusted code on the

49
00:01:47,439 --> 00:01:51,520
same platform

50
00:01:48,720 --> 00:01:53,360
and besides all that it's the fastest

51
00:01:51,520 --> 00:01:55,039
general purpose microkernel

52
00:01:53,360 --> 00:01:56,240
it's been designed for real world use

53
00:01:55,040 --> 00:01:57,759
from the beginning and of course it's

54
00:01:56,240 --> 00:01:59,520
open source because otherwise i would

55
00:01:57,759 --> 00:02:02,960
not be here

56
00:01:59,520 --> 00:02:04,000
and quick run down what the verification

57
00:02:02,960 --> 00:02:06,479
story means

58
00:02:04,000 --> 00:02:08,239
so we have a kernel that's implemented

59
00:02:06,479 --> 00:02:09,359
in c it's of the order of ten thousand

60
00:02:08,239 --> 00:02:12,080
lines of code

61
00:02:09,360 --> 00:02:12,560
and we have a mathematical a model of

62
00:02:12,080 --> 00:02:14,879
the

63
00:02:12,560 --> 00:02:17,599
kernel's functionality in a mathematical

64
00:02:14,879 --> 00:02:21,280
logic called higher order logic hall

65
00:02:17,599 --> 00:02:23,839
and we have a formal mathematical

66
00:02:21,280 --> 00:02:24,400
machine checked proof that under the

67
00:02:23,840 --> 00:02:27,520
assumptio

68
00:02:24,400 --> 00:02:29,840
under the semantics of the c language

69
00:02:27,520 --> 00:02:30,959
all the behaviors possible by that code

70
00:02:29,840 --> 00:02:32,959
base are

71
00:02:30,959 --> 00:02:34,080
captured by the specifications so the

72
00:02:32,959 --> 00:02:35,440
kernel is it's

73
00:02:34,080 --> 00:02:37,280
it's impossible for the kernel to

74
00:02:35,440 --> 00:02:40,000
operate out of so that's a very

75
00:02:37,280 --> 00:02:43,120
strong sense of being bug free

76
00:02:40,000 --> 00:02:44,640
and further there is a proof chain that

77
00:02:43,120 --> 00:02:46,239
proves that the binary is a correct

78
00:02:44,640 --> 00:02:48,160
translation of the c

79
00:02:46,239 --> 00:02:49,920
so that means the compilers out of the

80
00:02:48,160 --> 00:02:51,760
trusted computing base as well as our

81
00:02:49,920 --> 00:02:53,200
assumptions on c semantics which is

82
00:02:51,760 --> 00:02:54,799
important because c doesn't have a

83
00:02:53,200 --> 00:02:58,238
well-defined semantics

84
00:02:54,800 --> 00:03:00,400
and then there is proofs that the

85
00:02:58,239 --> 00:03:01,280
abstract model of the kernel is able to

86
00:03:00,400 --> 00:03:03,519
enforce

87
00:03:01,280 --> 00:03:06,159
the classical isolation properties the

88
00:03:03,519 --> 00:03:06,720
cia properties confidentiality integrity

89
00:03:06,159 --> 00:03:10,399
and

90
00:03:06,720 --> 00:03:12,319
availability and together this means

91
00:03:10,400 --> 00:03:13,519
this is the only operating system where

92
00:03:12,319 --> 00:03:15,599
you can actually say

93
00:03:13,519 --> 00:03:17,120
with a clean conscience that it is

94
00:03:15,599 --> 00:03:19,280
secure in a sense it

95
00:03:17,120 --> 00:03:20,560
it can guarantee security of systems

96
00:03:19,280 --> 00:03:22,480
filled on top

97
00:03:20,560 --> 00:03:24,239
there's a and then we have the worst

98
00:03:22,480 --> 00:03:26,480
case execution time analysis

99
00:03:24,239 --> 00:03:28,799
and there's a few limitations still um

100
00:03:26,480 --> 00:03:29,920
so for truth in advertising there's

101
00:03:28,799 --> 00:03:31,840
we're still

102
00:03:29,920 --> 00:03:34,879
working on verifying kernel

103
00:03:31,840 --> 00:03:36,640
initialization there's a few

104
00:03:34,879 --> 00:03:38,000
particularly the mmu that's bit

105
00:03:36,640 --> 00:03:40,640
abstracted

106
00:03:38,000 --> 00:03:41,200
but there's a phd thesis just completed

107
00:03:40,640 --> 00:03:44,238
that

108
00:03:41,200 --> 00:03:45,359
does that properly and at the moment

109
00:03:44,239 --> 00:03:49,920
there's no

110
00:03:45,360 --> 00:03:52,159
proofs about any timing timing channels

111
00:03:49,920 --> 00:03:53,920
that's enough to use it in real world

112
00:03:52,159 --> 00:03:55,840
systems so this is

113
00:03:53,920 --> 00:03:57,439
what we did in adapter project couple

114
00:03:55,840 --> 00:04:00,000
years ago where

115
00:03:57,439 --> 00:04:00,799
we had military vehicles you should

116
00:04:00,000 --> 00:04:03,760
think they are

117
00:04:00,799 --> 00:04:04,560
secure turns out this boeing this is a

118
00:04:03,760 --> 00:04:07,040
autonomous

119
00:04:04,560 --> 00:04:08,720
helicopter built by boeing the red team

120
00:04:07,040 --> 00:04:09,280
took about two weeks to completely own

121
00:04:08,720 --> 00:04:12,560
it

122
00:04:09,280 --> 00:04:15,519
um we transferred that onto

123
00:04:12,560 --> 00:04:17,358
we put seo4 underneath basically and in

124
00:04:15,519 --> 00:04:17,840
the end it was um the red team couldn't

125
00:04:17,358 --> 00:04:19,680
break in

126
00:04:17,839 --> 00:04:21,358
similar with these autonomous army

127
00:04:19,680 --> 00:04:23,680
trucks and there's other

128
00:04:21,358 --> 00:04:28,320
um systems that are actually in in

129
00:04:23,680 --> 00:04:30,479
defense use already like this um secure

130
00:04:28,320 --> 00:04:34,400
crypto stick that's approved for

131
00:04:30,479 --> 00:04:37,599
um for defense use up to secret

132
00:04:34,400 --> 00:04:40,719
this was actually the first time

133
00:04:37,600 --> 00:04:42,960
software enforced isolation was by a

134
00:04:40,720 --> 00:04:44,639
military certification authority

135
00:04:42,960 --> 00:04:47,840
considered to be equi

136
00:04:44,639 --> 00:04:50,320
equivalent to hardware heart air gapping

137
00:04:47,840 --> 00:04:52,080
so they this was a major step in

138
00:04:50,320 --> 00:04:55,360
development for

139
00:04:52,080 --> 00:04:55,758
high assurance systems so what's going

140
00:04:55,360 --> 00:04:58,479
on

141
00:04:55,759 --> 00:05:00,400
at the moment the hottest thing in town

142
00:04:58,479 --> 00:05:03,199
is risk five

143
00:05:00,400 --> 00:05:04,159
um and of course risk five being an open

144
00:05:03,199 --> 00:05:07,120
architecture

145
00:05:04,160 --> 00:05:08,720
is sort of a really good match for a an

146
00:05:07,120 --> 00:05:10,720
open source

147
00:05:08,720 --> 00:05:12,720
kernel and of course there was a whole

148
00:05:10,720 --> 00:05:13,919
death room yesterday on risk five as i

149
00:05:12,720 --> 00:05:16,880
know this uh people i

150
00:05:13,919 --> 00:05:19,280
assume are familiar with it and it has a

151
00:05:16,880 --> 00:05:22,400
number of other advantages for us

152
00:05:19,280 --> 00:05:24,559
and this is why at the moment we are

153
00:05:22,400 --> 00:05:26,560
investing a lot or actually a company

154
00:05:24,560 --> 00:05:28,000
called hansol cyber is investing a lot

155
00:05:26,560 --> 00:05:30,960
on getting seo for

156
00:05:28,000 --> 00:05:32,240
verified for risk five so i'm i need to

157
00:05:30,960 --> 00:05:34,880
disclose i've got

158
00:05:32,240 --> 00:05:35,440
an interest in that company based in

159
00:05:34,880 --> 00:05:37,759
munich

160
00:05:35,440 --> 00:05:39,520
and what they're building is a secure

161
00:05:37,759 --> 00:05:41,520
hardware software stack

162
00:05:39,520 --> 00:05:43,680
basically on open technology so there is

163
00:05:41,520 --> 00:05:46,240
uh they're producing their own

164
00:05:43,680 --> 00:05:48,639
processor chip this is based on the open

165
00:05:46,240 --> 00:05:49,680
source ariane risc-5 core from eth

166
00:05:48,639 --> 00:05:54,639
zurich

167
00:05:49,680 --> 00:05:57,680
and um combine that with a supply chain

168
00:05:54,639 --> 00:06:01,039
supply chain security story

169
00:05:57,680 --> 00:06:02,560
basically um logic encrypting encryption

170
00:06:01,039 --> 00:06:04,560
of the logic circuit so

171
00:06:02,560 --> 00:06:07,919
they cannot be tampered with in the

172
00:06:04,560 --> 00:06:10,319
production process so this is against

173
00:06:07,919 --> 00:06:11,599
an untrusted fab inserting a trojan into

174
00:06:10,319 --> 00:06:14,080
the hardware

175
00:06:11,600 --> 00:06:16,720
and this is then combined with an

176
00:06:14,080 --> 00:06:19,198
operating system based on seo4

177
00:06:16,720 --> 00:06:21,039
and so in order to achieve this they

178
00:06:19,199 --> 00:06:24,319
needed a verified

179
00:06:21,039 --> 00:06:26,479
kernel on seo for us on risk five

180
00:06:24,319 --> 00:06:28,000
and so they're funding our risk five

181
00:06:26,479 --> 00:06:31,199
development

182
00:06:28,000 --> 00:06:33,199
which is pretty cool for us and then

183
00:06:31,199 --> 00:06:35,360
their aims are basically anything where

184
00:06:33,199 --> 00:06:37,280
security or safety is critical so

185
00:06:35,360 --> 00:06:39,360
defense obviously but also critical

186
00:06:37,280 --> 00:06:42,799
infrastructure automotive

187
00:06:39,360 --> 00:06:44,240
avionics etc and there's sort of leads

188
00:06:42,800 --> 00:06:46,800
in all these spaces

189
00:06:44,240 --> 00:06:49,520
so this is the actual first product will

190
00:06:46,800 --> 00:06:52,240
be ready next quarter probably

191
00:06:49,520 --> 00:06:53,198
and then it will be the deployments will

192
00:06:52,240 --> 00:06:56,479
start in real world

193
00:06:53,199 --> 00:06:59,599
critical systems so this is awesome

194
00:06:56,479 --> 00:07:01,199
um the risk five there's two parts of

195
00:06:59,599 --> 00:07:02,000
the story there's actually the port of

196
00:07:01,199 --> 00:07:04,000
the kernel to the risk

197
00:07:02,000 --> 00:07:05,120
five architecture and then the whole

198
00:07:04,000 --> 00:07:06,400
verification

199
00:07:05,120 --> 00:07:08,479
and the first one is relatively

200
00:07:06,400 --> 00:07:09,520
straightforward we've done that a couple

201
00:07:08,479 --> 00:07:12,240
years ago

202
00:07:09,520 --> 00:07:13,198
and just to give you an ex an idea of

203
00:07:12,240 --> 00:07:16,160
how it works

204
00:07:13,199 --> 00:07:17,280
these are the performance figures for

205
00:07:16,160 --> 00:07:20,240
seo 4 on

206
00:07:17,280 --> 00:07:21,119
x86 on arm standard x86 and arm

207
00:07:20,240 --> 00:07:25,120
platforms

208
00:07:21,120 --> 00:07:28,319
32 and 64 bit mode and

209
00:07:25,120 --> 00:07:30,800
you can see it's of the order of

210
00:07:28,319 --> 00:07:33,199
6 700 cycles this is the cost for a

211
00:07:30,800 --> 00:07:34,960
round-trip ipc operation which is the

212
00:07:33,199 --> 00:07:36,880
the fundamental operation you perform in

213
00:07:34,960 --> 00:07:38,560
the microkernel based system so

214
00:07:36,880 --> 00:07:40,639
the operation you need for invoking any

215
00:07:38,560 --> 00:07:43,520
service and

216
00:07:40,639 --> 00:07:45,440
this is cheating a bit in favor of x86

217
00:07:43,520 --> 00:07:47,840
because we disabled the

218
00:07:45,440 --> 00:07:49,840
jump too far disable the meltdown work

219
00:07:47,840 --> 00:07:51,758
around of course intel shipping broken

220
00:07:49,840 --> 00:07:54,000
broken hardware and you need to go to

221
00:07:51,759 --> 00:07:56,000
extra links in order to

222
00:07:54,000 --> 00:07:57,280
work around the security implications so

223
00:07:56,000 --> 00:07:59,840
if you actually

224
00:07:57,280 --> 00:08:01,599
enable the meltdown defense then the

225
00:07:59,840 --> 00:08:03,919
performance gets much worse but this is

226
00:08:01,599 --> 00:08:06,719
sort of the baseline which is

227
00:08:03,919 --> 00:08:07,840
fairly comparable to arm and then how

228
00:08:06,720 --> 00:08:10,960
does

229
00:08:07,840 --> 00:08:13,520
risk 5 look like jumping too far

230
00:08:10,960 --> 00:08:15,120
um you can see if you just compare the

231
00:08:13,520 --> 00:08:16,960
intra address phase

232
00:08:15,120 --> 00:08:18,960
performance figures which are generally

233
00:08:16,960 --> 00:08:21,840
useless anyone who published indirect

234
00:08:18,960 --> 00:08:22,799
respace ipc i think i just love because

235
00:08:21,840 --> 00:08:25,280
it's meaningless

236
00:08:22,800 --> 00:08:26,639
you don't need that normally but i i put

237
00:08:25,280 --> 00:08:28,638
it up as a baseline

238
00:08:26,639 --> 00:08:31,440
you can see that we are pretty much on

239
00:08:28,639 --> 00:08:34,000
par with arms slightly faster

240
00:08:31,440 --> 00:08:35,279
the thing that really counts is an ipc

241
00:08:34,000 --> 00:08:38,240
across address spaces

242
00:08:35,279 --> 00:08:38,838
or cross protection domains um there we

243
00:08:38,240 --> 00:08:41,200
are

244
00:08:38,839 --> 00:08:42,719
significantly slower at the moment but

245
00:08:41,200 --> 00:08:46,160
this is because

246
00:08:42,719 --> 00:08:47,040
we used one of the first actual risk 5

247
00:08:46,160 --> 00:08:50,399
hardware

248
00:08:47,040 --> 00:08:51,439
and this is the high five unleashed from

249
00:08:50,399 --> 00:08:53,440
sci-5

250
00:08:51,440 --> 00:08:55,200
and it doesn't support hardware as

251
00:08:53,440 --> 00:08:57,040
attacks on the tlb and therefore you

252
00:08:55,200 --> 00:08:58,240
need to flush the tob on every contact

253
00:08:57,040 --> 00:08:59,680
switch and this is why you get the

254
00:08:58,240 --> 00:09:03,760
degraded performance

255
00:08:59,680 --> 00:09:06,560
with a risc-5 processor that had

256
00:09:03,760 --> 00:09:07,439
acid support you should see exactly the

257
00:09:06,560 --> 00:09:09,920
same

258
00:09:07,440 --> 00:09:12,000
latency as intra address space as you

259
00:09:09,920 --> 00:09:12,880
see it on arm so it's the basically the

260
00:09:12,000 --> 00:09:15,360
same model

261
00:09:12,880 --> 00:09:16,800
so this is why the 690 is sort of the

262
00:09:15,360 --> 00:09:19,680
real relevant number the

263
00:09:16,800 --> 00:09:20,959
other is basically hardware inhibited if

264
00:09:19,680 --> 00:09:22,719
you like

265
00:09:20,959 --> 00:09:24,479
by the way if you have any question ask

266
00:09:22,720 --> 00:09:26,000
any time

267
00:09:24,480 --> 00:09:28,320
just interrupt me right it's behind or

268
00:09:26,000 --> 00:09:32,720
whatever

269
00:09:28,320 --> 00:09:35,040
okay so this is nice

270
00:09:32,720 --> 00:09:37,519
obviously the risk 5 spec is in

271
00:09:35,040 --> 00:09:39,839
development the

272
00:09:37,519 --> 00:09:41,600
the base privilege spec has just been

273
00:09:39,839 --> 00:09:43,600
ratified a few months ago

274
00:09:41,600 --> 00:09:45,600
but a lot of the other things you need

275
00:09:43,600 --> 00:09:47,519
are still in development

276
00:09:45,600 --> 00:09:48,800
in particular hypervisor support so

277
00:09:47,519 --> 00:09:51,839
support for

278
00:09:48,800 --> 00:09:52,880
hypervisor mode is basically is still in

279
00:09:51,839 --> 00:09:55,839
draft stay

280
00:09:52,880 --> 00:09:57,680
state it just got upgraded to draft

281
00:09:55,839 --> 00:10:00,720
version 0.5

282
00:09:57,680 --> 00:10:03,199
about a month ago or so and we have

283
00:10:00,720 --> 00:10:04,000
implementation for hypervisor mode in

284
00:10:03,200 --> 00:10:06,959
there but it's

285
00:10:04,000 --> 00:10:08,959
because it's um still the spec is still

286
00:10:06,959 --> 00:10:09,920
in flux we have it in a branch rather

287
00:10:08,959 --> 00:10:11,599
than in mainline

288
00:10:09,920 --> 00:10:14,000
but we're basically tracking the branch

289
00:10:11,600 --> 00:10:14,800
up rather we're tracking whatever qe

290
00:10:14,000 --> 00:10:16,800
mode supports

291
00:10:14,800 --> 00:10:19,359
and qe moon is fairly good in tracking

292
00:10:16,800 --> 00:10:23,359
the the draft

293
00:10:19,360 --> 00:10:26,240
okay so but it actually works on on this

294
00:10:23,360 --> 00:10:27,519
version in qemu we can run linux on top

295
00:10:26,240 --> 00:10:29,120
so it

296
00:10:27,519 --> 00:10:31,120
and the support is pretty

297
00:10:29,120 --> 00:10:32,720
straightforward and

298
00:10:31,120 --> 00:10:34,240
now the other side of course is the

299
00:10:32,720 --> 00:10:38,240
verification side

300
00:10:34,240 --> 00:10:41,680
um how are we doing there i

301
00:10:38,240 --> 00:10:43,279
this is um the present status

302
00:10:41,680 --> 00:10:44,640
is that we are not quite there yet i was

303
00:10:43,279 --> 00:10:46,959
really hoping i would be able to

304
00:10:44,640 --> 00:10:48,880
announce that we are done

305
00:10:46,959 --> 00:10:51,359
and we sort of planned to be done by the

306
00:10:48,880 --> 00:10:53,279
end of last year but things

307
00:10:51,360 --> 00:10:55,440
resources got shifted to other things

308
00:10:53,279 --> 00:10:58,240
and so it's slowed down a bit

309
00:10:55,440 --> 00:10:59,200
so we're not quite done yet at the

310
00:10:58,240 --> 00:11:02,880
moment the

311
00:10:59,200 --> 00:11:05,920
functional correctness proof is the

312
00:11:02,880 --> 00:11:07,519
first quarter this quarter and we're

313
00:11:05,920 --> 00:11:10,240
really hoping for

314
00:11:07,519 --> 00:11:11,440
next month no actually end of this month

315
00:11:10,240 --> 00:11:12,560
next month would be the end of the

316
00:11:11,440 --> 00:11:14,160
quarter

317
00:11:12,560 --> 00:11:15,760
and so this is the functional

318
00:11:14,160 --> 00:11:18,560
correctness the proof that the c

319
00:11:15,760 --> 00:11:21,760
implementation and satisfies the spec

320
00:11:18,560 --> 00:11:24,160
and in parallel we're working on um

321
00:11:21,760 --> 00:11:25,120
adapting the translation validation tool

322
00:11:24,160 --> 00:11:27,600
chain to

323
00:11:25,120 --> 00:11:28,160
risk five is actually two things it's

324
00:11:27,600 --> 00:11:31,440
only

325
00:11:28,160 --> 00:11:34,000
so far been used for 32-bit arm so

326
00:11:31,440 --> 00:11:34,720
it needs to be adapted to a 64-bit

327
00:11:34,000 --> 00:11:37,839
binaries

328
00:11:34,720 --> 00:11:39,680
and the risk-five instruction set and

329
00:11:37,839 --> 00:11:42,320
it's not quite trivial because it uses

330
00:11:39,680 --> 00:11:45,279
smt solvers and for them

331
00:11:42,320 --> 00:11:46,320
32 and 64 bit makes a big difference but

332
00:11:45,279 --> 00:11:50,240
this is in progress

333
00:11:46,320 --> 00:11:52,240
and it's supposed to finish

334
00:11:50,240 --> 00:11:54,079
next quarter and the target date is

335
00:11:52,240 --> 00:11:56,560
really end of april

336
00:11:54,079 --> 00:11:58,319
and then we have a verified kernel on

337
00:11:56,560 --> 00:12:00,959
risk five

338
00:11:58,320 --> 00:12:02,800
um we're also working but that's a

339
00:12:00,959 --> 00:12:04,479
background activity because so far no

340
00:12:02,800 --> 00:12:07,279
one's put money on the table for it

341
00:12:04,480 --> 00:12:08,240
is the um worst case execution time

342
00:12:07,279 --> 00:12:11,439
bounce on

343
00:12:08,240 --> 00:12:13,040
of the binary there's

344
00:12:11,440 --> 00:12:14,480
actually a lot of overlap between that

345
00:12:13,040 --> 00:12:16,399
tool chain and the translation

346
00:12:14,480 --> 00:12:19,440
validation so it will benefit the one

347
00:12:16,399 --> 00:12:19,440
will benefit from the other

348
00:12:19,519 --> 00:12:24,079
so yep we're getting pretty close which

349
00:12:22,720 --> 00:12:27,360
is exciting

350
00:12:24,079 --> 00:12:28,800
and what did we learn from working with

351
00:12:27,360 --> 00:12:32,560
risk five

352
00:12:28,800 --> 00:12:34,479
um turns out it's actually

353
00:12:32,560 --> 00:12:36,719
all pretty straightforward it's a simple

354
00:12:34,480 --> 00:12:39,920
clean architecture

355
00:12:36,720 --> 00:12:43,519
we didn't run into any real issues uh

356
00:12:39,920 --> 00:12:45,279
there was uh some instances where a few

357
00:12:43,519 --> 00:12:46,639
things were a bit more complicated and

358
00:12:45,279 --> 00:12:49,120
are mostly because there's

359
00:12:46,639 --> 00:12:50,320
less semantics in the page tables and

360
00:12:49,120 --> 00:12:52,800
page tables tend to be

361
00:12:50,320 --> 00:12:54,160
big part of the verification story but

362
00:12:52,800 --> 00:12:56,399
basically

363
00:12:54,160 --> 00:12:58,160
i think the first port was running in

364
00:12:56,399 --> 00:13:00,720
two weeks or so and

365
00:12:58,160 --> 00:13:02,800
the the verification store is always an

366
00:13:00,720 --> 00:13:06,000
order of magnitude or too bigger but

367
00:13:02,800 --> 00:13:07,680
it's ongoing and

368
00:13:06,000 --> 00:13:10,639
definitely yes the cleanness of the

369
00:13:07,680 --> 00:13:14,079
architecture really helps verification

370
00:13:10,639 --> 00:13:15,680
the hypervisor extensions at least in

371
00:13:14,079 --> 00:13:16,479
the drafts back as they are and they're

372
00:13:15,680 --> 00:13:18,800
not going to change

373
00:13:16,480 --> 00:13:19,680
massively are even simpler it's really

374
00:13:18,800 --> 00:13:22,800
just a few

375
00:13:19,680 --> 00:13:26,479
small features and the student did that

376
00:13:22,800 --> 00:13:28,399
more or less over the weekend um

377
00:13:26,480 --> 00:13:30,240
there's this m mode i'm not sure how

378
00:13:28,399 --> 00:13:32,000
familiar you are with um

379
00:13:30,240 --> 00:13:33,360
risk five so risk five has three

380
00:13:32,000 --> 00:13:36,000
execution modes

381
00:13:33,360 --> 00:13:38,800
user and supervisor of course and

382
00:13:36,000 --> 00:13:41,680
underneath is m mode which is really

383
00:13:38,800 --> 00:13:41,920
meant for firmware so this is basically

384
00:13:41,680 --> 00:13:45,279
in

385
00:13:41,920 --> 00:13:47,599
intel you have the four rings

386
00:13:45,279 --> 00:13:48,720
really only two three and zero which is

387
00:13:47,600 --> 00:13:51,680
using kernel

388
00:13:48,720 --> 00:13:54,399
and then underneath you have another

389
00:13:51,680 --> 00:13:56,638
three four five six seven whatever rings

390
00:13:54,399 --> 00:13:58,240
that contain privilege code that can do

391
00:13:56,639 --> 00:14:00,399
anything underneath you and have you

392
00:13:58,240 --> 00:14:02,880
you have no clue what it does and it's

393
00:14:00,399 --> 00:14:04,720
all very scary in

394
00:14:02,880 --> 00:14:06,320
risk five this is very clean there's

395
00:14:04,720 --> 00:14:08,800
just one other

396
00:14:06,320 --> 00:14:10,399
more privileged level this is this m

397
00:14:08,800 --> 00:14:12,800
mode for machine mode

398
00:14:10,399 --> 00:14:14,079
and that does everything that's not done

399
00:14:12,800 --> 00:14:17,359
by the hardware

400
00:14:14,079 --> 00:14:19,839
and the typical way to use that one is

401
00:14:17,360 --> 00:14:20,880
um there's really two purposes the one

402
00:14:19,839 --> 00:14:22,959
is

403
00:14:20,880 --> 00:14:24,880
initializing the hardware and the other

404
00:14:22,959 --> 00:14:29,119
is instruction emulation because

405
00:14:24,880 --> 00:14:32,959
um risk five has a few a fair number

406
00:14:29,120 --> 00:14:34,560
of um apis let's say that may or may not

407
00:14:32,959 --> 00:14:37,040
be implemented in hardware so

408
00:14:34,560 --> 00:14:37,680
the the architecture promises they are

409
00:14:37,040 --> 00:14:39,920
there but

410
00:14:37,680 --> 00:14:41,359
um they may not be supported in hardware

411
00:14:39,920 --> 00:14:43,279
in which case they get emulated in

412
00:14:41,360 --> 00:14:46,560
firmware so that's part of the

413
00:14:43,279 --> 00:14:49,519
m mode code from our point of view

414
00:14:46,560 --> 00:14:51,279
we obviously it's security critical so

415
00:14:49,519 --> 00:14:53,040
eventually it will have to be verified

416
00:14:51,279 --> 00:14:55,040
at the moment we're not working on that

417
00:14:53,040 --> 00:14:57,199
but for our point of view is we keep it

418
00:14:55,040 --> 00:14:59,360
as simple as possible we just use it as

419
00:14:57,199 --> 00:15:02,399
part of the initialization code

420
00:14:59,360 --> 00:15:05,440
that basically configures some hardware

421
00:15:02,399 --> 00:15:07,440
and delegates everything it can up to

422
00:15:05,440 --> 00:15:09,360
supervisor mode and then seo forcing

423
00:15:07,440 --> 00:15:11,199
control this is one of the really nice

424
00:15:09,360 --> 00:15:13,519
things about risc-5

425
00:15:11,199 --> 00:15:15,680
it has a lot of privileged features that

426
00:15:13,519 --> 00:15:18,160
by default are restricted to m mode

427
00:15:15,680 --> 00:15:19,040
but they can all be delegated upwards

428
00:15:18,160 --> 00:15:21,360
and um

429
00:15:19,040 --> 00:15:22,240
typically to s mode but sometimes even

430
00:15:21,360 --> 00:15:24,800
to a u mode

431
00:15:22,240 --> 00:15:26,480
including support for user level drivers

432
00:15:24,800 --> 00:15:28,079
and all that stuff it's it's really done

433
00:15:26,480 --> 00:15:29,680
very neatly and cleanly

434
00:15:28,079 --> 00:15:31,120
and then with that the hypervisor

435
00:15:29,680 --> 00:15:33,920
support adds

436
00:15:31,120 --> 00:15:35,199
sort of a it's a bit intel like an

437
00:15:33,920 --> 00:15:37,519
orthogonal thing

438
00:15:35,199 --> 00:15:39,120
which they tend to call hs mode for

439
00:15:37,519 --> 00:15:41,199
hypervisor s mode

440
00:15:39,120 --> 00:15:43,360
so this is where the hypervisor then

441
00:15:41,199 --> 00:15:46,160
runs it looks pretty much like

442
00:15:43,360 --> 00:15:47,279
s mode except it has access to some in

443
00:15:46,160 --> 00:15:50,480
additional state

444
00:15:47,279 --> 00:15:51,040
in order to do world switches and when

445
00:15:50,480 --> 00:15:54,240
we

446
00:15:51,040 --> 00:15:55,439
run seo4 as a hypervisor it runs in hs

447
00:15:54,240 --> 00:15:58,320
mode

448
00:15:55,440 --> 00:16:00,160
just the kernel which all it knows about

449
00:15:58,320 --> 00:16:01,600
hypervisor support is there's certain

450
00:16:00,160 --> 00:16:04,639
exceptions and it

451
00:16:01,600 --> 00:16:05,360
forwards them upwards to vu mode so this

452
00:16:04,639 --> 00:16:08,079
is the model

453
00:16:05,360 --> 00:16:09,120
nova pioneered years ago and we've been

454
00:16:08,079 --> 00:16:11,758
using it in

455
00:16:09,120 --> 00:16:12,639
seo for for all of our architectures so

456
00:16:11,759 --> 00:16:15,600
the actual

457
00:16:12,639 --> 00:16:17,360
virtual machine monitor runs in vu mode

458
00:16:15,600 --> 00:16:22,399
and then the restaurants in

459
00:16:17,360 --> 00:16:25,199
the normal mode um

460
00:16:22,399 --> 00:16:27,839
there's some issues that because the isa

461
00:16:25,199 --> 00:16:30,800
is quite extensible that this could lead

462
00:16:27,839 --> 00:16:32,079
diversity can be good and can be bad and

463
00:16:30,800 --> 00:16:33,920
if it leads to

464
00:16:32,079 --> 00:16:35,599
fragmentation then it's obviously bad

465
00:16:33,920 --> 00:16:37,599
and there's some concern there

466
00:16:35,600 --> 00:16:40,560
the risk five foundation is pretty aware

467
00:16:37,600 --> 00:16:42,959
of that and so they they try to avoid

468
00:16:40,560 --> 00:16:44,399
fragmentation by making it clear what

469
00:16:42,959 --> 00:16:45,599
you should and shouldn't be doing we'll

470
00:16:44,399 --> 00:16:48,560
see how that works out there's no

471
00:16:45,600 --> 00:16:48,560
guarantee it will work

472
00:16:48,639 --> 00:16:52,720
and it has now a blessed formal

473
00:16:51,040 --> 00:16:56,399
specification

474
00:16:52,720 --> 00:16:57,360
so there is a formal model of the risc 5

475
00:16:56,399 --> 00:17:00,320
instruction set

476
00:16:57,360 --> 00:17:01,360
architecture and this will be the

477
00:17:00,320 --> 00:17:03,440
reference model

478
00:17:01,360 --> 00:17:05,439
so far the reference model has been an

479
00:17:03,440 --> 00:17:08,160
informal model

480
00:17:05,439 --> 00:17:10,079
and so in the future everything will be

481
00:17:08,160 --> 00:17:12,559
developed as well as tested

482
00:17:10,079 --> 00:17:13,359
and verified ideally against this formal

483
00:17:12,559 --> 00:17:16,959
spec

484
00:17:13,359 --> 00:17:17,280
and the form of spec it's the the sales

485
00:17:16,959 --> 00:17:20,480
spec

486
00:17:17,280 --> 00:17:22,959
from peter sewell at cambridge

487
00:17:20,480 --> 00:17:24,880
is actually very readable like even

488
00:17:22,959 --> 00:17:28,559
idiots like me can read it

489
00:17:24,880 --> 00:17:31,440
and um which is the developers actually

490
00:17:28,559 --> 00:17:33,600
find that very useful i mean our our

491
00:17:31,440 --> 00:17:34,400
core os developers they're not formal

492
00:17:33,600 --> 00:17:36,799
methods people

493
00:17:34,400 --> 00:17:38,640
we work very closely together but most

494
00:17:36,799 --> 00:17:39,280
people only understand one side or the

495
00:17:38,640 --> 00:17:41,520
other

496
00:17:39,280 --> 00:17:42,559
and they find it useful to actually look

497
00:17:41,520 --> 00:17:44,480
at the formal spec

498
00:17:42,559 --> 00:17:46,000
because it's much more precise than the

499
00:17:44,480 --> 00:17:48,320
normal english

500
00:17:46,000 --> 00:17:50,240
version and it's it's readable enough to

501
00:17:48,320 --> 00:17:52,399
be useful for general kernel developers

502
00:17:50,240 --> 00:17:54,400
so it's really good

503
00:17:52,400 --> 00:17:56,799
and of course there are people working

504
00:17:54,400 --> 00:17:59,200
on verifying risk five

505
00:17:56,799 --> 00:18:00,960
core implementation against that spec

506
00:17:59,200 --> 00:18:02,480
and that would be really will be really

507
00:18:00,960 --> 00:18:03,919
awesome when we can

508
00:18:02,480 --> 00:18:05,760
get something that actually hangs

509
00:18:03,919 --> 00:18:06,880
together the hardware and the software

510
00:18:05,760 --> 00:18:10,240
verification

511
00:18:06,880 --> 00:18:12,960
by this formal spec

512
00:18:10,240 --> 00:18:12,960
any questions

513
00:18:13,600 --> 00:18:20,559
good um next thing i want to talk about

514
00:18:17,440 --> 00:18:21,600
is mixed criticality just a bit of an

515
00:18:20,559 --> 00:18:23,120
update this was

516
00:18:21,600 --> 00:18:25,120
i actually talked about this last year

517
00:18:23,120 --> 00:18:26,719
at fosdem

518
00:18:25,120 --> 00:18:28,959
some of you may have been there some of

519
00:18:26,720 --> 00:18:31,039
you may even remember some of it

520
00:18:28,960 --> 00:18:32,640
i don't make any assumptions so i but

521
00:18:31,039 --> 00:18:34,000
i'll just give a quick repetition of

522
00:18:32,640 --> 00:18:36,720
what it's about

523
00:18:34,000 --> 00:18:38,080
because it's also in verification so the

524
00:18:36,720 --> 00:18:39,919
idea is we have

525
00:18:38,080 --> 00:18:42,000
mixed criticality systems where in the

526
00:18:39,919 --> 00:18:44,400
same process you have highly critical

527
00:18:42,000 --> 00:18:45,760
stuff as well as untrusted stuff so this

528
00:18:44,400 --> 00:18:48,559
is a very

529
00:18:45,760 --> 00:18:49,360
simplified model of an autonomous

530
00:18:48,559 --> 00:18:51,840
vehicle

531
00:18:49,360 --> 00:18:53,039
you have a control loop which controls

532
00:18:51,840 --> 00:18:56,000
the vehicle

533
00:18:53,039 --> 00:18:56,960
and therefore is highly critical it has

534
00:18:56,000 --> 00:18:59,760
it is a hard

535
00:18:56,960 --> 00:19:02,720
real-time system that needs to be to

536
00:18:59,760 --> 00:19:05,120
deliver a response by a hard deadline

537
00:19:02,720 --> 00:19:06,240
um but it runs at a very low rate so

538
00:19:05,120 --> 00:19:09,199
typically

539
00:19:06,240 --> 00:19:11,919
order of 10 to 100 hertz and then it

540
00:19:09,200 --> 00:19:13,840
runs for a millisecond or so

541
00:19:11,919 --> 00:19:15,679
and then you have untrusted stuff that

542
00:19:13,840 --> 00:19:17,520
runs on the same

543
00:19:15,679 --> 00:19:19,200
hardware but it's more time critical

544
00:19:17,520 --> 00:19:21,360
think of an ethernet driver

545
00:19:19,200 --> 00:19:23,520
an ethernet driver needs to be able to

546
00:19:21,360 --> 00:19:26,959
serve packets at microsecond

547
00:19:23,520 --> 00:19:28,639
rates and in order if you

548
00:19:26,960 --> 00:19:30,320
just gave this one the higher priority

549
00:19:28,640 --> 00:19:31,919
it would look out to ethernet driver for

550
00:19:30,320 --> 00:19:33,120
milliseconds and then you would lose

551
00:19:31,919 --> 00:19:34,640
packets etc

552
00:19:33,120 --> 00:19:36,959
where of course you know that you've got

553
00:19:34,640 --> 00:19:39,440
enough headspace on your processor so

554
00:19:36,960 --> 00:19:43,120
this would be a stupid design

555
00:19:39,440 --> 00:19:45,120
so instead we give the untrusted driver

556
00:19:43,120 --> 00:19:46,479
a higher priority so it can preempt the

557
00:19:45,120 --> 00:19:48,719
control loop

558
00:19:46,480 --> 00:19:50,799
but have support that ensures that we

559
00:19:48,720 --> 00:19:51,360
can guarantee enough time to the control

560
00:19:50,799 --> 00:19:53,600
loop

561
00:19:51,360 --> 00:19:54,479
and we do this by having a notion of

562
00:19:53,600 --> 00:19:57,280
budgets that

563
00:19:54,480 --> 00:19:59,520
allows us to constrain the driver to

564
00:19:57,280 --> 00:20:01,840
just a short period of operation

565
00:19:59,520 --> 00:20:04,158
and allows us to reason about the

566
00:20:01,840 --> 00:20:07,120
timeliness of the whole thing

567
00:20:04,159 --> 00:20:08,640
so this is the basic idea there's some

568
00:20:07,120 --> 00:20:10,320
challenges behind it

569
00:20:08,640 --> 00:20:13,120
for example you need to be able to share

570
00:20:10,320 --> 00:20:16,158
the typical way thing happens you have a

571
00:20:13,120 --> 00:20:17,840
vehicle control you have some navigation

572
00:20:16,159 --> 00:20:20,480
software that

573
00:20:17,840 --> 00:20:21,760
talks to maybe a ui or if it's a car

574
00:20:20,480 --> 00:20:24,480
with a driver or

575
00:20:21,760 --> 00:20:26,480
a base station if it's a totally

576
00:20:24,480 --> 00:20:27,600
autonomous vehicle with some remote

577
00:20:26,480 --> 00:20:30,240
control

578
00:20:27,600 --> 00:20:31,840
and so the navigation will update

579
00:20:30,240 --> 00:20:34,640
waypoint data which the

580
00:20:31,840 --> 00:20:36,720
vehicle control uses for navigation and

581
00:20:34,640 --> 00:20:38,559
so they need to share this data set

582
00:20:36,720 --> 00:20:39,919
and obviously there's some atomicity

583
00:20:38,559 --> 00:20:42,639
requirements

584
00:20:39,919 --> 00:20:44,799
um where the the vehicle control must

585
00:20:42,640 --> 00:20:46,880
only see consistent data it doesn't

586
00:20:44,799 --> 00:20:48,320
it's not required that it always sees

587
00:20:46,880 --> 00:20:50,400
the absolute latest version

588
00:20:48,320 --> 00:20:51,678
if it sees the update a millisecond

589
00:20:50,400 --> 00:20:54,240
later who cares

590
00:20:51,679 --> 00:20:56,320
but it needs to see consistent data so

591
00:20:54,240 --> 00:21:00,240
there's some locking requirement

592
00:20:56,320 --> 00:21:04,559
and the way this is typically done

593
00:21:00,240 --> 00:21:04,559
is by a so-called resource server so you

594
00:21:04,960 --> 00:21:09,840
encapsulate this shared data into a

595
00:21:07,760 --> 00:21:11,840
server it runs as a protected process

596
00:21:09,840 --> 00:21:13,600
and that gets invoked by both the highly

597
00:21:11,840 --> 00:21:16,158
critical and the low critical

598
00:21:13,600 --> 00:21:17,439
and now you need to make sure that the

599
00:21:16,159 --> 00:21:20,240
less critical thing

600
00:21:17,440 --> 00:21:22,080
which is not trusted cannot stop the

601
00:21:20,240 --> 00:21:23,440
timely operation of the critical thing

602
00:21:22,080 --> 00:21:25,918
and this is sort of the challenge

603
00:21:23,440 --> 00:21:27,200
and so you need to be able to have this

604
00:21:25,919 --> 00:21:30,240
servers that are shared

605
00:21:27,200 --> 00:21:32,080
across criticalities and

606
00:21:30,240 --> 00:21:33,840
the nice thing if you do this then if

607
00:21:32,080 --> 00:21:35,280
you give the server the ceiling priority

608
00:21:33,840 --> 00:21:36,879
it implements the

609
00:21:35,280 --> 00:21:38,639
immediate priority ceiling protocol

610
00:21:36,880 --> 00:21:41,840
which is a very efficient

611
00:21:38,640 --> 00:21:44,799
nice behaved protocol for

612
00:21:41,840 --> 00:21:46,480
real-time locking the question is okay

613
00:21:44,799 --> 00:21:49,280
who pays for the server time because

614
00:21:46,480 --> 00:21:51,039
if the server executes on behalf of one

615
00:21:49,280 --> 00:21:54,080
of the client

616
00:21:51,039 --> 00:21:55,120
then well norm in the standard setup it

617
00:21:54,080 --> 00:21:57,360
would

618
00:21:55,120 --> 00:21:58,559
consume its own time at its own priority

619
00:21:57,360 --> 00:22:00,320
and this

620
00:21:58,559 --> 00:22:01,840
for example this lowly this untrusted

621
00:22:00,320 --> 00:22:03,918
thing could just does the

622
00:22:01,840 --> 00:22:06,080
trusted thing by keeping invoking the

623
00:22:03,919 --> 00:22:08,080
server with expensive operations and we

624
00:22:06,080 --> 00:22:10,960
need to avoid that

625
00:22:08,080 --> 00:22:12,080
and so the solution and i'm i won't go

626
00:22:10,960 --> 00:22:14,799
through all the implications

627
00:22:12,080 --> 00:22:16,158
but the basic solution is we have this

628
00:22:14,799 --> 00:22:18,000
original model which consists of

629
00:22:16,159 --> 00:22:19,440
priority and a time slice as the

630
00:22:18,000 --> 00:22:22,240
shadowing parameters

631
00:22:19,440 --> 00:22:24,240
and we replace this time slice by a

632
00:22:22,240 --> 00:22:26,080
generalized notion of a time slice which

633
00:22:24,240 --> 00:22:29,200
is a scheduling context

634
00:22:26,080 --> 00:22:30,720
so the the threat now has a capability

635
00:22:29,200 --> 00:22:32,240
to a new kernel object called the

636
00:22:30,720 --> 00:22:34,080
scheduling context

637
00:22:32,240 --> 00:22:35,919
and the scheduling context contains a

638
00:22:34,080 --> 00:22:37,760
number of things but the critical ones

639
00:22:35,919 --> 00:22:40,640
are a budget and a period

640
00:22:37,760 --> 00:22:41,440
and the guarantee is that over any

641
00:22:40,640 --> 00:22:44,080
window

642
00:22:41,440 --> 00:22:45,120
that is less than or equal the size of

643
00:22:44,080 --> 00:22:48,000
the period

644
00:22:45,120 --> 00:22:49,439
it cannot consume more than the budget

645
00:22:48,000 --> 00:22:52,640
so this is a very

646
00:22:49,440 --> 00:22:53,200
hard bandwidth limitation thing and this

647
00:22:52,640 --> 00:22:54,960
is

648
00:22:53,200 --> 00:22:56,720
the basic mechanism it's a pretty

649
00:22:54,960 --> 00:22:58,559
straightforward mechanism it's actually

650
00:22:56,720 --> 00:23:00,720
very tricky to implement and

651
00:22:58,559 --> 00:23:02,080
immensely difficult to verify as we find

652
00:23:00,720 --> 00:23:04,400
out um

653
00:23:02,080 --> 00:23:05,760
but this is the the the basic mechanism

654
00:23:04,400 --> 00:23:08,000
that allows us about

655
00:23:05,760 --> 00:23:11,120
risk to reason about timeliness in these

656
00:23:08,000 --> 00:23:12,880
mixed criticality systems

657
00:23:11,120 --> 00:23:14,639
so we can have different shadowing

658
00:23:12,880 --> 00:23:15,440
contacts i give different bandwidths so

659
00:23:14,640 --> 00:23:17,520
this one

660
00:23:15,440 --> 00:23:18,480
has a period of three and a budget of

661
00:23:17,520 --> 00:23:20,799
two so it can

662
00:23:18,480 --> 00:23:22,080
consume up to two thirds of cpu time and

663
00:23:20,799 --> 00:23:24,400
this one has a

664
00:23:22,080 --> 00:23:28,000
period of a thousand and a budget of 250

665
00:23:24,400 --> 00:23:29,919
so this could be representative of our

666
00:23:28,000 --> 00:23:31,360
control loop and this could be the

667
00:23:29,919 --> 00:23:34,720
ethernet driver

668
00:23:31,360 --> 00:23:36,399
and we can show that well together they

669
00:23:34,720 --> 00:23:40,000
use less than 150

670
00:23:36,400 --> 00:23:41,360
they cannot use more than 150 than 100

671
00:23:40,000 --> 00:23:43,279
of cpu bandwidth

672
00:23:41,360 --> 00:23:45,039
and actually it's a bit lower for

673
00:23:43,279 --> 00:23:47,120
various reasons

674
00:23:45,039 --> 00:23:49,520
but basically this allows us to

675
00:23:47,120 --> 00:23:52,559
guarantee that this one will always

676
00:23:49,520 --> 00:23:54,080
meet its deadlines even if this one is

677
00:23:52,559 --> 00:23:58,399
running at higher priority

678
00:23:54,080 --> 00:23:58,399
so it's a very cool thing and

679
00:23:58,640 --> 00:24:03,039
that let's say this this is the design

680
00:24:01,039 --> 00:24:03,760
for enabling this mixed criticality

681
00:24:03,039 --> 00:24:06,480
system

682
00:24:03,760 --> 00:24:08,640
and so this is also now being verified

683
00:24:06,480 --> 00:24:11,279
so we had we finished the model

684
00:24:08,640 --> 00:24:13,120
about almost two years ago and since

685
00:24:11,279 --> 00:24:15,760
then we've been working on verification

686
00:24:13,120 --> 00:24:17,360
and turns out this is a really hard

687
00:24:15,760 --> 00:24:20,559
thing because it

688
00:24:17,360 --> 00:24:24,080
increases kernel complexity a fair bit

689
00:24:20,559 --> 00:24:25,039
in the past we any kernel operation had

690
00:24:24,080 --> 00:24:28,080
only to deal with

691
00:24:25,039 --> 00:24:28,799
up to two kernel objects at the time and

692
00:24:28,080 --> 00:24:30,480
this one

693
00:24:28,799 --> 00:24:32,400
with this model we have to deal with up

694
00:24:30,480 --> 00:24:35,520
to five kernel objects at a time and

695
00:24:32,400 --> 00:24:39,279
that's really blown out verification and

696
00:24:35,520 --> 00:24:39,279
also the the effort on

697
00:24:39,520 --> 00:24:44,480
verifying this thing so the state of the

698
00:24:42,640 --> 00:24:46,640
play is we have

699
00:24:44,480 --> 00:24:48,080
the main line kernel which on arm b7 is

700
00:24:46,640 --> 00:24:50,799
completely verified

701
00:24:48,080 --> 00:24:52,480
we have the risk five version of the

702
00:24:50,799 --> 00:24:54,320
main line kernel which i just talked

703
00:24:52,480 --> 00:24:58,080
about before so that's

704
00:24:54,320 --> 00:25:01,279
close finish close to being finished and

705
00:24:58,080 --> 00:25:02,799
then we have the mixed criticality

706
00:25:01,279 --> 00:25:03,760
kernel which at the moment we're

707
00:25:02,799 --> 00:25:06,960
verifying on

708
00:25:03,760 --> 00:25:09,120
arm and i

709
00:25:06,960 --> 00:25:11,120
originally we were hoping to have this

710
00:25:09,120 --> 00:25:12,799
finish by about now but it's turns

711
00:25:11,120 --> 00:25:14,719
as i said it turned out to be way more

712
00:25:12,799 --> 00:25:17,200
complicated so it will be

713
00:25:14,720 --> 00:25:18,799
take us most of this year to finish that

714
00:25:17,200 --> 00:25:20,640
one

715
00:25:18,799 --> 00:25:22,080
and then we'll have the mixed

716
00:25:20,640 --> 00:25:25,039
criticality kernel

717
00:25:22,080 --> 00:25:26,158
branch verified on arm and then we will

718
00:25:25,039 --> 00:25:29,120
merge that together

719
00:25:26,159 --> 00:25:30,960
and this merges con we expect that to be

720
00:25:29,120 --> 00:25:32,080
fairly straightforward probably take us

721
00:25:30,960 --> 00:25:34,640
a few weeks

722
00:25:32,080 --> 00:25:36,240
because the features in the mixed

723
00:25:34,640 --> 00:25:38,159
criticality kernel are mostly

724
00:25:36,240 --> 00:25:40,880
architecture independent so

725
00:25:38,159 --> 00:25:41,360
merging this arm verification with the

726
00:25:40,880 --> 00:25:43,120
risk

727
00:25:41,360 --> 00:25:45,039
of mcs with the risk five main line

728
00:25:43,120 --> 00:25:46,639
verification we expect to be

729
00:25:45,039 --> 00:25:48,240
straightforward and also be finished

730
00:25:46,640 --> 00:25:51,840
this year

731
00:25:48,240 --> 00:25:52,720
and then we will bless this one as the

732
00:25:51,840 --> 00:25:55,439
main line

733
00:25:52,720 --> 00:25:56,559
the old tongue thing will become legacy

734
00:25:55,440 --> 00:25:58,880
and the

735
00:25:56,559 --> 00:26:00,000
mcs features will be the the properly

736
00:25:58,880 --> 00:26:02,400
supported kernel

737
00:26:00,000 --> 00:26:03,679
which is fine because it's a forward

738
00:26:02,400 --> 00:26:07,120
compatible change

739
00:26:03,679 --> 00:26:10,640
the mcs kernel can fully emulate the

740
00:26:07,120 --> 00:26:14,239
functionality of the old kernel

741
00:26:10,640 --> 00:26:16,240
cool any questions yeah

742
00:26:14,240 --> 00:26:18,159
would you have word of caution for the

743
00:26:16,240 --> 00:26:20,960
developers of the control loop

744
00:26:18,159 --> 00:26:21,520
in your mixed critical degree session

745
00:26:20,960 --> 00:26:24,799
though

746
00:26:21,520 --> 00:26:27,840
well now uh

747
00:26:24,799 --> 00:26:31,039
taking two sensor values for example may

748
00:26:27,840 --> 00:26:33,279
spawn 100 yeah there's there's sound

749
00:26:31,039 --> 00:26:35,039
so the question is um be careful when

750
00:26:33,279 --> 00:26:35,520
you do these mixed criticality systems

751
00:26:35,039 --> 00:26:37,520
yes

752
00:26:35,520 --> 00:26:38,639
there's actually sound shadowing theory

753
00:26:37,520 --> 00:26:41,440
behind it it's

754
00:26:38,640 --> 00:26:42,880
it's a well explored space um and people

755
00:26:41,440 --> 00:26:45,200
are still writing papers

756
00:26:42,880 --> 00:26:46,880
about it but most of them are fairly

757
00:26:45,200 --> 00:26:49,360
useful but the basic scheduling

758
00:26:46,880 --> 00:26:52,159
theory has been established a while ago

759
00:26:49,360 --> 00:26:56,799
and it's fairly straightforward

760
00:26:52,159 --> 00:26:57,840
yes what is the limit of scalability for

761
00:26:56,799 --> 00:27:00,240
such a

762
00:26:57,840 --> 00:27:02,559
time capsule because if you have this

763
00:27:00,240 --> 00:27:05,440
splitting of the time probably with it

764
00:27:02,559 --> 00:27:06,799
doesn't divide you will lose everything

765
00:27:05,440 --> 00:27:08,880
so okay

766
00:27:06,799 --> 00:27:10,320
how does that scale if you have a lot of

767
00:27:08,880 --> 00:27:12,320
activities well

768
00:27:10,320 --> 00:27:14,639
as part of and again this is well

769
00:27:12,320 --> 00:27:16,960
established real time scheduling theory

770
00:27:14,640 --> 00:27:19,120
as as part of your schedule ability

771
00:27:16,960 --> 00:27:20,000
analysis you need to analyze the worst

772
00:27:19,120 --> 00:27:22,639
case

773
00:27:20,000 --> 00:27:23,840
preemptions number of preemptions and

774
00:27:22,640 --> 00:27:26,080
you need to

775
00:27:23,840 --> 00:27:28,240
factor in the cost of these preemptions

776
00:27:26,080 --> 00:27:28,720
which in seo four is possible because we

777
00:27:28,240 --> 00:27:30,240
actually

778
00:27:28,720 --> 00:27:32,240
have a worst case execution time

779
00:27:30,240 --> 00:27:33,520
analysis we know how long a preemption

780
00:27:32,240 --> 00:27:34,880
can worst case take

781
00:27:33,520 --> 00:27:37,679
there's no other system around that

782
00:27:34,880 --> 00:27:37,679
where you can do that

783
00:27:38,000 --> 00:27:42,000
okay yep so with the time caps are they

784
00:27:41,120 --> 00:27:45,918
associated

785
00:27:42,000 --> 00:27:45,919
one to one for each process

786
00:27:46,559 --> 00:27:50,399
a okay now you cannot have more than one

787
00:27:49,279 --> 00:27:52,640
time capability

788
00:27:50,399 --> 00:27:53,918
a process can have at most one time

789
00:27:52,640 --> 00:27:56,320
capability

790
00:27:53,919 --> 00:27:58,080
um otherwise it's not if it doesn't have

791
00:27:56,320 --> 00:28:00,879
one it is not runnable

792
00:27:58,080 --> 00:28:02,960
but one of the nice features it can run

793
00:28:00,880 --> 00:28:04,480
on a borrowed time cap so if you invoke

794
00:28:02,960 --> 00:28:05,600
a server we can have a notion of a

795
00:28:04,480 --> 00:28:07,600
passive server

796
00:28:05,600 --> 00:28:09,760
that doesn't have a shared link context

797
00:28:07,600 --> 00:28:13,120
and is as such not runnable

798
00:28:09,760 --> 00:28:14,879
but if you invoke it you pass your

799
00:28:13,120 --> 00:28:16,239
shade link context onto the server and

800
00:28:14,880 --> 00:28:18,240
then the server

801
00:28:16,240 --> 00:28:20,640
runs on us and this is how the charging

802
00:28:18,240 --> 00:28:22,799
of server time against the client

803
00:28:20,640 --> 00:28:26,240
happens so the client basically needs to

804
00:28:22,799 --> 00:28:26,240
provide the time to the server

805
00:28:27,200 --> 00:28:31,039
i'm happy to talk about in more detail

806
00:28:29,120 --> 00:28:34,158
about that i didn't want to go into this

807
00:28:31,039 --> 00:28:38,640
much detail here in the talk my

808
00:28:34,159 --> 00:28:41,120
last main topic is community

809
00:28:38,640 --> 00:28:42,640
i assume there's a lot of interest here

810
00:28:41,120 --> 00:28:43,039
and there's two aspects of that the one

811
00:28:42,640 --> 00:28:45,520
is

812
00:28:43,039 --> 00:28:47,440
how did we engage in the some other

813
00:28:45,520 --> 00:28:49,760
community which in this case was risk

814
00:28:47,440 --> 00:28:53,039
five this is an open source community

815
00:28:49,760 --> 00:28:54,879
it's an open spec community really um

816
00:28:53,039 --> 00:28:56,559
but it's a it's an open development

817
00:28:54,880 --> 00:28:58,480
process right in risk five

818
00:28:56,559 --> 00:29:00,879
there is the respire foundation which

819
00:28:58,480 --> 00:29:04,880
owns the thing and it has

820
00:29:00,880 --> 00:29:07,039
um what's called standing committees

821
00:29:04,880 --> 00:29:08,320
it used to have one for security now it

822
00:29:07,039 --> 00:29:10,960
has one for

823
00:29:08,320 --> 00:29:12,639
uh the isa specification and

824
00:29:10,960 --> 00:29:15,760
understanding committees are

825
00:29:12,640 --> 00:29:18,320
task groups which work on particular

826
00:29:15,760 --> 00:29:19,200
aspects of the spec and so the the

827
00:29:18,320 --> 00:29:21,439
preflight

828
00:29:19,200 --> 00:29:22,399
spec used to be a task group it just

829
00:29:21,440 --> 00:29:23,919
split into

830
00:29:22,399 --> 00:29:26,239
multiple task group and became a

831
00:29:23,919 --> 00:29:28,480
standing committee and so there's

832
00:29:26,240 --> 00:29:29,840
um people who work on say cash

833
00:29:28,480 --> 00:29:32,720
management operations

834
00:29:29,840 --> 00:29:34,320
and the i um mmu specification and all

835
00:29:32,720 --> 00:29:38,720
that sort of things

836
00:29:34,320 --> 00:29:40,879
and so um we engage with them

837
00:29:38,720 --> 00:29:42,240
for doing the risk 5 port we didn't have

838
00:29:40,880 --> 00:29:45,760
to engage very much

839
00:29:42,240 --> 00:29:47,679
um but if i have time i

840
00:29:45,760 --> 00:29:49,440
talk i'll talk about what we do about

841
00:29:47,679 --> 00:29:52,720
timing channels and there

842
00:29:49,440 --> 00:29:54,720
we did have to engage a fair bit and

843
00:29:52,720 --> 00:29:57,279
it was a very good experience so people

844
00:29:54,720 --> 00:29:59,279
are basically open they listen they

845
00:29:57,279 --> 00:30:00,720
are open to suggestions and of course

846
00:29:59,279 --> 00:30:02,480
most of them get knocked on their head

847
00:30:00,720 --> 00:30:05,039
because they don't fit the philosophy

848
00:30:02,480 --> 00:30:06,080
that's normal we do the same because you

849
00:30:05,039 --> 00:30:08,399
really need to

850
00:30:06,080 --> 00:30:11,199
make sure that everything is properly

851
00:30:08,399 --> 00:30:13,279
aligned with an overall vision etc to

852
00:30:11,200 --> 00:30:14,559
keep it clean but they are they're

853
00:30:13,279 --> 00:30:16,799
definitely very open

854
00:30:14,559 --> 00:30:18,158
um particularly the stan the security

855
00:30:16,799 --> 00:30:19,360
standing committee they pulled me in

856
00:30:18,159 --> 00:30:22,159
originally about

857
00:30:19,360 --> 00:30:23,120
nine months ago no over a year ago a

858
00:30:22,159 --> 00:30:25,360
year and a half ago

859
00:30:23,120 --> 00:30:27,199
for because of the the work we are doing

860
00:30:25,360 --> 00:30:30,000
on timing channels

861
00:30:27,200 --> 00:30:30,720
and they were very keen to have risk

862
00:30:30,000 --> 00:30:32,640
five being

863
00:30:30,720 --> 00:30:34,640
recognized as the world's most secure

864
00:30:32,640 --> 00:30:37,520
process architecture

865
00:30:34,640 --> 00:30:39,120
and um so i i found the engagement

866
00:30:37,520 --> 00:30:39,760
they're very positive and they they're

867
00:30:39,120 --> 00:30:41,360
really

868
00:30:39,760 --> 00:30:43,440
i'm getting what i need to make it

869
00:30:41,360 --> 00:30:46,080
secure basically and then the

870
00:30:43,440 --> 00:30:46,640
um proof spec our engagement there was

871
00:30:46,080 --> 00:30:48,639
mostly

872
00:30:46,640 --> 00:30:50,320
providing feedback on the hypervisor

873
00:30:48,640 --> 00:30:54,320
spec and

874
00:30:50,320 --> 00:30:55,840
we we did a five-page paper discussing

875
00:30:54,320 --> 00:30:57,519
our experience with the spec and

876
00:30:55,840 --> 00:30:59,439
circulated around and said these are the

877
00:30:57,519 --> 00:31:02,320
problems where we think there should be

878
00:30:59,440 --> 00:31:03,039
something better support etc and the

879
00:31:02,320 --> 00:31:06,158
reaction

880
00:31:03,039 --> 00:31:09,120
was very positive and um

881
00:31:06,159 --> 00:31:10,159
they someone made a that the person who

882
00:31:09,120 --> 00:31:13,678
is in charge of this

883
00:31:10,159 --> 00:31:16,320
um spec group made a suggestion on

884
00:31:13,679 --> 00:31:17,120
a very elegant way to fix it and so this

885
00:31:16,320 --> 00:31:19,519
is likely to

886
00:31:17,120 --> 00:31:20,158
appear in the stick so that was a pretty

887
00:31:19,519 --> 00:31:24,080
good

888
00:31:20,159 --> 00:31:27,039
experience the what i needed for

889
00:31:24,080 --> 00:31:28,879
making this the processor or the system

890
00:31:27,039 --> 00:31:31,840
secure against timing channels that was

891
00:31:28,880 --> 00:31:33,600
a bit of a harder push

892
00:31:31,840 --> 00:31:35,519
the hardware people that this is a real

893
00:31:33,600 --> 00:31:38,158
problem and you need to solve it etc

894
00:31:35,519 --> 00:31:39,760
and there was a lot of support from the

895
00:31:38,159 --> 00:31:41,440
security standing committee and now

896
00:31:39,760 --> 00:31:42,720
we're in the process of someone actually

897
00:31:41,440 --> 00:31:46,080
speccing out

898
00:31:42,720 --> 00:31:47,039
the operations which i need to provide

899
00:31:46,080 --> 00:31:50,720
real security

900
00:31:47,039 --> 00:31:54,000
so that that's all cool um

901
00:31:50,720 --> 00:31:55,200
it's it has all the good and the bad

902
00:31:54,000 --> 00:31:57,679
sides of an open

903
00:31:55,200 --> 00:31:58,320
source community right it's sort of yes

904
00:31:57,679 --> 00:32:00,399
they they

905
00:31:58,320 --> 00:32:02,158
are very cooperative very open but also

906
00:32:00,399 --> 00:32:04,158
things work slowly

907
00:32:02,159 --> 00:32:05,679
if you have one expert just designing

908
00:32:04,159 --> 00:32:06,720
everything that's much faster but of

909
00:32:05,679 --> 00:32:08,559
course there's a risk of them

910
00:32:06,720 --> 00:32:11,120
overlooking something

911
00:32:08,559 --> 00:32:12,639
and so this is why it will be at least a

912
00:32:11,120 --> 00:32:14,879
year until we have a finalized

913
00:32:12,640 --> 00:32:18,000
hypervisor spec for example

914
00:32:14,880 --> 00:32:21,039
but it's moving in the right direction

915
00:32:18,000 --> 00:32:22,240
so the other thing is our community the

916
00:32:21,039 --> 00:32:24,080
seo4 community

917
00:32:22,240 --> 00:32:25,600
and you may have heard if you're on the

918
00:32:24,080 --> 00:32:28,158
mailing list that

919
00:32:25,600 --> 00:32:30,480
we're setting up an seo 4 foundation

920
00:32:28,159 --> 00:32:33,360
under the linux foundation

921
00:32:30,480 --> 00:32:34,399
and there's a number of drivers for that

922
00:32:33,360 --> 00:32:38,240
the

923
00:32:34,399 --> 00:32:41,279
one is that people are sort of worried

924
00:32:38,240 --> 00:32:43,679
this company is beating basically the

925
00:32:41,279 --> 00:32:46,399
company on seo four they're building

926
00:32:43,679 --> 00:32:48,320
seo for if you use it is really at the

927
00:32:46,399 --> 00:32:50,399
end of most guts of your system

928
00:32:48,320 --> 00:32:52,080
everything depends on it and if seo four

929
00:32:50,399 --> 00:32:54,959
fails then you have a problem

930
00:32:52,080 --> 00:32:55,279
a very serious problem and so companies

931
00:32:54,960 --> 00:32:57,840
are

932
00:32:55,279 --> 00:32:58,960
basically investing heavily in seo four

933
00:32:57,840 --> 00:33:02,000
based technologies

934
00:32:58,960 --> 00:33:02,960
investing dozens of tens of millions in

935
00:33:02,000 --> 00:33:05,279
systems that are

936
00:33:02,960 --> 00:33:06,720
intimately tied to seo for and they want

937
00:33:05,279 --> 00:33:09,039
to see some stability and they're

938
00:33:06,720 --> 00:33:12,480
nervous that

939
00:33:09,039 --> 00:33:14,158
we are in an open uh in an public sector

940
00:33:12,480 --> 00:33:15,840
research lab so that's better

941
00:33:14,159 --> 00:33:18,399
a bit more reliable than being in a

942
00:33:15,840 --> 00:33:20,000
startup but still right we depend on

943
00:33:18,399 --> 00:33:21,840
decisions they're made at high

944
00:33:20,000 --> 00:33:23,440
management level and in theory it's

945
00:33:21,840 --> 00:33:24,158
unlikely to happen in the foreseeable

946
00:33:23,440 --> 00:33:26,159
future

947
00:33:24,159 --> 00:33:28,080
but in theory they could pull the pluck

948
00:33:26,159 --> 00:33:29,919
and then what happens with seo four

949
00:33:28,080 --> 00:33:32,080
if the trustworthy systems group which

950
00:33:29,919 --> 00:33:32,960
is behind seo four goes away seo four

951
00:33:32,080 --> 00:33:35,439
will be dead and

952
00:33:32,960 --> 00:33:36,000
that that's of course a real danger and

953
00:33:35,440 --> 00:33:37,840
so

954
00:33:36,000 --> 00:33:39,840
this is one of the reasons for the

955
00:33:37,840 --> 00:33:42,480
foundation to address this

956
00:33:39,840 --> 00:33:43,600
this will be able to give us stability

957
00:33:42,480 --> 00:33:46,960
there will be

958
00:33:43,600 --> 00:33:48,080
um companies involved in funding the

959
00:33:46,960 --> 00:33:50,559
whole thing

960
00:33:48,080 --> 00:33:52,559
if the worst case happens we could just

961
00:33:50,559 --> 00:33:54,240
set up somewhere else and keep on

962
00:33:52,559 --> 00:33:56,158
getting the support from the foundation

963
00:33:54,240 --> 00:33:57,679
to keep on working so

964
00:33:56,159 --> 00:33:59,519
it's a reinsurance for those who

965
00:33:57,679 --> 00:34:01,919
investing on seo4

966
00:33:59,519 --> 00:34:02,799
but it's also very important to grow the

967
00:34:01,919 --> 00:34:06,159
ecosystem

968
00:34:02,799 --> 00:34:07,600
and we open source seo for about five

969
00:34:06,159 --> 00:34:10,079
and a half years ago

970
00:34:07,600 --> 00:34:11,918
and there's an ecosystem of developers

971
00:34:10,079 --> 00:34:13,919
around it but it hasn't grown anywhere

972
00:34:11,918 --> 00:34:16,960
near as fast as i hoped for

973
00:34:13,918 --> 00:34:19,679
and having this open source foundation i

974
00:34:16,960 --> 00:34:21,839
we hope will really help develop this

975
00:34:19,679 --> 00:34:25,839
ecosystem faster

976
00:34:21,839 --> 00:34:28,960
and so enable

977
00:34:25,839 --> 00:34:32,159
more participation etc and then

978
00:34:28,960 --> 00:34:34,399
we have we have a kernel we know what

979
00:34:32,159 --> 00:34:36,720
the kernel does and what it should be

980
00:34:34,399 --> 00:34:38,319
but then in order to deploy it in a real

981
00:34:36,719 --> 00:34:40,000
world system you need much more of that

982
00:34:38,320 --> 00:34:42,320
you need the actual system

983
00:34:40,000 --> 00:34:43,199
and at the moment that's extremely

984
00:34:42,320 --> 00:34:45,919
rudimentary

985
00:34:43,199 --> 00:34:47,118
and it will definitely benefit from

986
00:34:45,918 --> 00:34:50,399
developer input

987
00:34:47,119 --> 00:34:52,000
in specifying higher layers of this

988
00:34:50,399 --> 00:34:54,638
ecosystem and implementing and

989
00:34:52,000 --> 00:34:57,200
maintaining etc

990
00:34:54,639 --> 00:34:58,560
so that that's the third motivation the

991
00:34:57,200 --> 00:35:01,359
fourth was to protect

992
00:34:58,560 --> 00:35:03,040
the brand and this is a critical one

993
00:35:01,359 --> 00:35:05,598
because seo4

994
00:35:03,040 --> 00:35:06,320
its value is the verification its value

995
00:35:05,599 --> 00:35:09,280
stands and

996
00:35:06,320 --> 00:35:10,960
false with the verification and the one

997
00:35:09,280 --> 00:35:14,720
scenario that really worries us

998
00:35:10,960 --> 00:35:16,560
is someone takes the kernel hacks it

999
00:35:14,720 --> 00:35:18,399
deploys it somewhere claims this

1000
00:35:16,560 --> 00:35:19,839
contains verified seo4

1001
00:35:18,400 --> 00:35:22,079
and because they hacked the kernel they

1002
00:35:19,839 --> 00:35:23,920
introduced the bug and our experience is

1003
00:35:22,079 --> 00:35:24,560
anything that's not proven correct is

1004
00:35:23,920 --> 00:35:27,280
buggy

1005
00:35:24,560 --> 00:35:29,040
so we know people have hacked the kernel

1006
00:35:27,280 --> 00:35:30,640
and because of that we have to assume

1007
00:35:29,040 --> 00:35:32,160
that they have a buggy kernel and they

1008
00:35:30,640 --> 00:35:33,759
deployed it and said it contains

1009
00:35:32,160 --> 00:35:35,200
verified aco4

1010
00:35:33,760 --> 00:35:37,040
and that is really scary because if

1011
00:35:35,200 --> 00:35:38,560
someone hacks that one we know they

1012
00:35:37,040 --> 00:35:40,720
didn't hack our kernel

1013
00:35:38,560 --> 00:35:43,440
but it the reputational damage could be

1014
00:35:40,720 --> 00:35:45,040
massive and so

1015
00:35:43,440 --> 00:35:47,359
we see the foundations of wave bull

1016
00:35:45,040 --> 00:35:50,880
walking that

1017
00:35:47,359 --> 00:35:52,640
and um the other really and all these

1018
00:35:50,880 --> 00:35:55,839
are sort of equally important

1019
00:35:52,640 --> 00:35:57,598
we have a few verification items which

1020
00:35:55,839 --> 00:35:58,078
are too big for anyone everyone wants

1021
00:35:57,599 --> 00:35:59,920
them

1022
00:35:58,079 --> 00:36:01,119
but they are really big ticket items one

1023
00:35:59,920 --> 00:36:04,400
is

1024
00:36:01,119 --> 00:36:07,040
arm 64-bit rb8 and the other

1025
00:36:04,400 --> 00:36:09,119
is the multi-core version we have a high

1026
00:36:07,040 --> 00:36:11,920
performance multi-core implementation

1027
00:36:09,119 --> 00:36:12,640
but it's not verified and everyone wants

1028
00:36:11,920 --> 00:36:15,119
that one

1029
00:36:12,640 --> 00:36:16,640
but the cost of doing that is too high

1030
00:36:15,119 --> 00:36:19,520
for everyone who wants it

1031
00:36:16,640 --> 00:36:21,520
and the foundation will give us an the

1032
00:36:19,520 --> 00:36:23,599
opportunity to get people together and

1033
00:36:21,520 --> 00:36:26,079
pool the expense for everyone's benefit

1034
00:36:23,599 --> 00:36:27,280
and hopefully make that happen so i'm

1035
00:36:26,079 --> 00:36:30,000
confident that

1036
00:36:27,280 --> 00:36:31,440
within a year or so a line will be able

1037
00:36:30,000 --> 00:36:32,640
to line up through the foundation

1038
00:36:31,440 --> 00:36:34,480
funding for one of

1039
00:36:32,640 --> 00:36:36,640
or hopefully both of these big ticket

1040
00:36:34,480 --> 00:36:38,720
items

1041
00:36:36,640 --> 00:36:40,480
so what how does the foundation work

1042
00:36:38,720 --> 00:36:42,399
it's a standard setup on the of the

1043
00:36:40,480 --> 00:36:44,400
linux foundation so

1044
00:36:42,400 --> 00:36:46,720
the under the linux foundation is the

1045
00:36:44,400 --> 00:36:48,560
seo 4 foundation it has a board

1046
00:36:46,720 --> 00:36:50,560
and it has the directed fund where the

1047
00:36:48,560 --> 00:36:52,078
member contributions go to whether it's

1048
00:36:50,560 --> 00:36:53,279
the membership fees or extra

1049
00:36:52,079 --> 00:36:55,280
contributions

1050
00:36:53,280 --> 00:36:57,359
and the board is mostly responsible for

1051
00:36:55,280 --> 00:36:58,880
deciding where this money is spent

1052
00:36:57,359 --> 00:37:00,799
and there's a fund charter which is the

1053
00:36:58,880 --> 00:37:04,079
legal document that says what the

1054
00:37:00,800 --> 00:37:04,800
what the constraints are and then there

1055
00:37:04,079 --> 00:37:06,800
is the actual

1056
00:37:04,800 --> 00:37:09,680
open source community so this is the seo

1057
00:37:06,800 --> 00:37:12,079
4 project which is under the

1058
00:37:09,680 --> 00:37:12,799
linux foundation projects llc so that

1059
00:37:12,079 --> 00:37:15,760
that's a

1060
00:37:12,800 --> 00:37:16,720
company a non-profit organization and

1061
00:37:15,760 --> 00:37:20,160
the scl4

1062
00:37:16,720 --> 00:37:20,879
llc will be a virtual company under the

1063
00:37:20,160 --> 00:37:23,680
linux

1064
00:37:20,880 --> 00:37:24,560
one and it owns all the artifacts so it

1065
00:37:23,680 --> 00:37:27,919
owns the

1066
00:37:24,560 --> 00:37:31,200
seo for trademark the github the the

1067
00:37:27,920 --> 00:37:33,040
domain name etc and it has a

1068
00:37:31,200 --> 00:37:34,640
technical charter that defines what it's

1069
00:37:33,040 --> 00:37:36,160
supposed to do and then there's a

1070
00:37:34,640 --> 00:37:38,000
technical project and

1071
00:37:36,160 --> 00:37:39,359
all the contributors are members of that

1072
00:37:38,000 --> 00:37:42,800
one

1073
00:37:39,359 --> 00:37:46,400
and the governance is okay you have

1074
00:37:42,800 --> 00:37:48,240
there's members and oops

1075
00:37:46,400 --> 00:37:49,839
and it's a tiered membership so there's

1076
00:37:48,240 --> 00:37:52,959
premium members and then there's

1077
00:37:49,839 --> 00:37:55,359
regular members which the fees depend on

1078
00:37:52,960 --> 00:37:56,320
the the size of the company very similar

1079
00:37:55,359 --> 00:37:57,920
as linux

1080
00:37:56,320 --> 00:37:59,920
we made it cheaper at the low end and

1081
00:37:57,920 --> 00:38:02,000
more expensive at the high end

1082
00:37:59,920 --> 00:38:03,920
and then there's also associate members

1083
00:38:02,000 --> 00:38:05,359
any non-profit organization or

1084
00:38:03,920 --> 00:38:08,400
individuals can join us

1085
00:38:05,359 --> 00:38:11,839
as associate members and they pay no fee

1086
00:38:08,400 --> 00:38:12,960
and then there's the technical steering

1087
00:38:11,839 --> 00:38:15,200
committee

1088
00:38:12,960 --> 00:38:17,200
which is made up of the committees and

1089
00:38:15,200 --> 00:38:19,040
some technical leaders

1090
00:38:17,200 --> 00:38:20,240
we have this notion of technical leaders

1091
00:38:19,040 --> 00:38:22,160
because as people

1092
00:38:20,240 --> 00:38:24,319
me for example who never commit any code

1093
00:38:22,160 --> 00:38:26,720
to seo4

1094
00:38:24,320 --> 00:38:27,760
i may commit to documents but not not to

1095
00:38:26,720 --> 00:38:29,520
the real guts

1096
00:38:27,760 --> 00:38:31,520
i'll leave that to the people who

1097
00:38:29,520 --> 00:38:33,040
actually understand all the details i

1098
00:38:31,520 --> 00:38:35,280
understand the design other people

1099
00:38:33,040 --> 00:38:38,880
understand the implementation way better

1100
00:38:35,280 --> 00:38:40,880
and so people like that that the

1101
00:38:38,880 --> 00:38:43,280
technical heads should be also a part of

1102
00:38:40,880 --> 00:38:45,440
this technical steering committee

1103
00:38:43,280 --> 00:38:46,720
and then there is the board and it gets

1104
00:38:45,440 --> 00:38:50,320
elected by

1105
00:38:46,720 --> 00:38:52,319
members so we will have three seats on

1106
00:38:50,320 --> 00:38:54,880
the board for the time being this is a

1107
00:38:52,320 --> 00:38:56,000
initially arrangement for five years

1108
00:38:54,880 --> 00:38:58,000
premium members

1109
00:38:56,000 --> 00:38:59,920
get the right to board seat and the rest

1110
00:38:58,000 --> 00:39:01,760
of them the regular members together

1111
00:38:59,920 --> 00:39:04,079
elect a board member

1112
00:39:01,760 --> 00:39:05,920
and the head of the technical steering

1113
00:39:04,079 --> 00:39:09,440
committee will also be in the board

1114
00:39:05,920 --> 00:39:11,359
and remember the board sole role is to

1115
00:39:09,440 --> 00:39:15,440
determine where the money goes how to

1116
00:39:11,359 --> 00:39:17,598
invest the the membership fees basically

1117
00:39:15,440 --> 00:39:19,440
and this is the initial board so the

1118
00:39:17,599 --> 00:39:19,839
three leaders from trustworthy systems

1119
00:39:19,440 --> 00:39:22,160
will

1120
00:39:19,839 --> 00:39:23,119
be on there john launchbury was a great

1121
00:39:22,160 --> 00:39:27,359
supporter of

1122
00:39:23,119 --> 00:39:31,200
scl4 he was um director in darpa

1123
00:39:27,359 --> 00:39:32,640
and may did a lot for getting visibility

1124
00:39:31,200 --> 00:39:34,560
in the defense space

1125
00:39:32,640 --> 00:39:36,400
he's now back in his company galwa who

1126
00:39:34,560 --> 00:39:38,960
does all sorts of work

1127
00:39:36,400 --> 00:39:39,520
um sasha cagewise he's from hansal cyber

1128
00:39:38,960 --> 00:39:41,760
the company

1129
00:39:39,520 --> 00:39:43,119
which as i said is funding the risk five

1130
00:39:41,760 --> 00:39:46,079
verification

1131
00:39:43,119 --> 00:39:48,960
he's a cto there and then daniel potts

1132
00:39:46,079 --> 00:39:51,040
from ghost locomotion goes as a

1133
00:39:48,960 --> 00:39:52,800
autonomous driving company they are

1134
00:39:51,040 --> 00:39:57,119
betting heavily on seo four

1135
00:39:52,800 --> 00:39:58,640
and so they make up the initial board

1136
00:39:57,119 --> 00:40:02,160
and how does the community is the

1137
00:39:58,640 --> 00:40:02,160
community supposed to work

1138
00:40:02,480 --> 00:40:06,880
so there's different levels of artifacts

1139
00:40:05,440 --> 00:40:10,319
first of course there's the kernel

1140
00:40:06,880 --> 00:40:13,520
which contains of code and proofs and

1141
00:40:10,319 --> 00:40:16,000
for the time being we we

1142
00:40:13,520 --> 00:40:18,160
will need to be in charge of evolving

1143
00:40:16,000 --> 00:40:19,520
the kernel because any change the kernel

1144
00:40:18,160 --> 00:40:21,920
you need to understand what

1145
00:40:19,520 --> 00:40:23,440
effect it has on the verification and

1146
00:40:21,920 --> 00:40:24,079
how it can be verified and it needs to

1147
00:40:23,440 --> 00:40:27,440
be verified

1148
00:40:24,079 --> 00:40:30,960
etc and ensuring that it's all in the

1149
00:40:27,440 --> 00:40:32,240
speeds the philosophy but of course we

1150
00:40:30,960 --> 00:40:33,839
hope to get

1151
00:40:32,240 --> 00:40:36,640
contributions from the community

1152
00:40:33,839 --> 00:40:38,560
certainly in form of platform ports

1153
00:40:36,640 --> 00:40:40,078
and just last week there was a

1154
00:40:38,560 --> 00:40:41,520
discussion on the mailing list on

1155
00:40:40,079 --> 00:40:43,920
someone suggesting

1156
00:40:41,520 --> 00:40:45,599
additional kernel features and after

1157
00:40:43,920 --> 00:40:47,119
some discussion we came up with a much

1158
00:40:45,599 --> 00:40:50,240
simpler version of that

1159
00:40:47,119 --> 00:40:50,880
and that may get into the kernel so this

1160
00:40:50,240 --> 00:40:53,439
is a

1161
00:40:50,880 --> 00:40:54,160
another form of community contribution

1162
00:40:53,440 --> 00:40:56,160
and then

1163
00:40:54,160 --> 00:40:57,520
there is what i call core user lens so

1164
00:40:56,160 --> 00:41:00,000
this is what you absolutely need to

1165
00:40:57,520 --> 00:41:02,160
build anything sensible on seo4

1166
00:41:00,000 --> 00:41:04,079
and at the moment this is all dependent

1167
00:41:02,160 --> 00:41:06,560
on us and that's a bad thing

1168
00:41:04,079 --> 00:41:08,560
and obviously we need to provide at

1169
00:41:06,560 --> 00:41:11,279
least initial versions of that

1170
00:41:08,560 --> 00:41:13,279
but then we really hope the community to

1171
00:41:11,280 --> 00:41:14,800
contribute and even adopt some of these

1172
00:41:13,280 --> 00:41:18,079
pieces

1173
00:41:14,800 --> 00:41:19,680
and then and of course the core newsline

1174
00:41:18,079 --> 00:41:20,720
this is all stuff which in linux will be

1175
00:41:19,680 --> 00:41:22,160
part of the kernel

1176
00:41:20,720 --> 00:41:24,319
and then there's the what i call other

1177
00:41:22,160 --> 00:41:26,000
user land which is in linux would also

1178
00:41:24,319 --> 00:41:27,119
partially be in the kernel partially be

1179
00:41:26,000 --> 00:41:29,280
user level

1180
00:41:27,119 --> 00:41:30,480
and there we want to sort of step back

1181
00:41:29,280 --> 00:41:32,319
as much as possible

1182
00:41:30,480 --> 00:41:34,000
probably provide samples to give people

1183
00:41:32,319 --> 00:41:35,359
an idea of what the right way is to

1184
00:41:34,000 --> 00:41:37,599
structure something

1185
00:41:35,359 --> 00:41:40,078
architect something but we really want

1186
00:41:37,599 --> 00:41:43,119
this all to be owned by the community

1187
00:41:40,079 --> 00:41:44,000
and the over time we would hope the

1188
00:41:43,119 --> 00:41:47,520
community

1189
00:41:44,000 --> 00:41:47,520
engaged in to get deeper and deeper

1190
00:41:47,760 --> 00:41:54,000
so status of this is we have just

1191
00:41:51,359 --> 00:41:55,598
last week got the final sign off from

1192
00:41:54,000 --> 00:41:58,720
everyone involved on the

1193
00:41:55,599 --> 00:42:00,640
legal documents so they are now final um

1194
00:41:58,720 --> 00:42:03,040
they should probably go up on our web

1195
00:42:00,640 --> 00:42:06,480
interim website tomorrow

1196
00:42:03,040 --> 00:42:07,200
and whether the trademark is ready for

1197
00:42:06,480 --> 00:42:09,680
transfer

1198
00:42:07,200 --> 00:42:11,680
we have an initial board we have an

1199
00:42:09,680 --> 00:42:14,160
initial website

1200
00:42:11,680 --> 00:42:16,078
that contains these documents and pretty

1201
00:42:14,160 --> 00:42:18,640
much what i said here

1202
00:42:16,079 --> 00:42:20,640
and literally i think we're probably

1203
00:42:18,640 --> 00:42:23,200
days away from being able to

1204
00:42:20,640 --> 00:42:24,078
actually sign up members if you're

1205
00:42:23,200 --> 00:42:26,319
interested

1206
00:42:24,079 --> 00:42:27,520
follow the mailing list or just send

1207
00:42:26,319 --> 00:42:30,720
mail to the foundation

1208
00:42:27,520 --> 00:42:33,759
and this is the initial um

1209
00:42:30,720 --> 00:42:35,439
website for the foundation which

1210
00:42:33,760 --> 00:42:36,960
gives basically contains a version of

1211
00:42:35,440 --> 00:42:39,200
what i said here

1212
00:42:36,960 --> 00:42:40,640
and i'm getting towards the end of my

1213
00:42:39,200 --> 00:42:41,279
time slot so i won't be able to talk

1214
00:42:40,640 --> 00:42:44,640
about the

1215
00:42:41,280 --> 00:42:45,920
time protection principle timing channel

1216
00:42:44,640 --> 00:42:49,598
defense work so i'll

1217
00:42:45,920 --> 00:42:49,599
leave that for next year then i guess

1218
00:42:50,400 --> 00:42:52,880
questions

1219
00:42:54,480 --> 00:42:58,640
could you talk a little bit about

1220
00:42:56,160 --> 00:42:59,920
tooling you imagine the problem of other

1221
00:42:58,640 --> 00:43:02,400
people taking your kernel

1222
00:42:59,920 --> 00:43:03,280
and then hacking away and uh selling it

1223
00:43:02,400 --> 00:43:06,800
as um

1224
00:43:03,280 --> 00:43:09,359
as sel4 so we will have to face the

1225
00:43:06,800 --> 00:43:10,560
form of a canonical compilation

1226
00:43:09,359 --> 00:43:13,119
eventually so

1227
00:43:10,560 --> 00:43:14,319
um building an image a binary image that

1228
00:43:13,119 --> 00:43:18,000
can be compared

1229
00:43:14,319 --> 00:43:18,000
against another compilation process

1230
00:43:18,319 --> 00:43:23,279
yeah so okay the question is um

1231
00:43:21,920 --> 00:43:24,880
what do we have in tooling and how

1232
00:43:23,280 --> 00:43:26,640
dependent way on it in terms of the

1233
00:43:24,880 --> 00:43:28,720
verification story

1234
00:43:26,640 --> 00:43:30,640
that's not actually a big deal i mean

1235
00:43:28,720 --> 00:43:31,759
there's a standard setup it comes with a

1236
00:43:30,640 --> 00:43:34,160
build process

1237
00:43:31,760 --> 00:43:36,640
um you just built with the right flags

1238
00:43:34,160 --> 00:43:39,040
and it does everything using gcc

1239
00:43:36,640 --> 00:43:40,799
it's a bit fiddly with the gcc version

1240
00:43:39,040 --> 00:43:42,960
because

1241
00:43:40,800 --> 00:43:44,480
the kernel depends very strongly on some

1242
00:43:42,960 --> 00:43:46,640
micro optimizations

1243
00:43:44,480 --> 00:43:47,520
and some gz features and they may break

1244
00:43:46,640 --> 00:43:50,560
etc

1245
00:43:47,520 --> 00:43:51,520
but basically um that's not really the

1246
00:43:50,560 --> 00:43:54,400
issue and

1247
00:43:51,520 --> 00:43:55,200
in the end you when you have a binary it

1248
00:43:54,400 --> 00:43:57,119
is impre

1249
00:43:55,200 --> 00:43:59,200
you need a bit of experience with these

1250
00:43:57,119 --> 00:44:01,119
formal methods tools but um it is

1251
00:43:59,200 --> 00:44:01,759
possible in principle to actually run

1252
00:44:01,119 --> 00:44:04,960
the

1253
00:44:01,760 --> 00:44:08,079
binary the translation checker against

1254
00:44:04,960 --> 00:44:10,000
that and against the formalized

1255
00:44:08,079 --> 00:44:11,839
c code that falls out of the theorem

1256
00:44:10,000 --> 00:44:14,079
prover etc and check the tool chain

1257
00:44:11,839 --> 00:44:17,920
yourself once you build a binary

1258
00:44:14,079 --> 00:44:20,079
um i want to sign a binary

1259
00:44:17,920 --> 00:44:21,599
i want to send it to you and you should

1260
00:44:20,079 --> 00:44:24,960
have the same result

1261
00:44:21,599 --> 00:44:27,440
yeah okay um yeah you don't

1262
00:44:24,960 --> 00:44:29,359
need me to sign a binary you can if you

1263
00:44:27,440 --> 00:44:32,400
want me as the authority that

1264
00:44:29,359 --> 00:44:35,598
you trust then yes we can do that

1265
00:44:32,400 --> 00:44:37,280
and at the moment this would be no

1266
00:44:35,599 --> 00:44:38,640
we don't actually have binary downloads

1267
00:44:37,280 --> 00:44:40,160
but yeah we can

1268
00:44:38,640 --> 00:44:41,680
this is probably something we want

1269
00:44:40,160 --> 00:44:43,359
eventually um

1270
00:44:41,680 --> 00:44:45,118
and of course it wasn't wouldn't be me

1271
00:44:43,359 --> 00:44:46,400
it would be the foundation who does that

1272
00:44:45,119 --> 00:44:50,319
and so this is probably

1273
00:44:46,400 --> 00:44:53,119
a part of the job of the foundation yet

1274
00:44:50,319 --> 00:44:53,119
other questions

1275
00:44:56,480 --> 00:45:00,640
yeah how do you deal with platforms

1276
00:44:59,119 --> 00:45:02,400
where

1277
00:45:00,640 --> 00:45:04,640
certain devices have to be configured

1278
00:45:02,400 --> 00:45:05,119
the right way to have platform security

1279
00:45:04,640 --> 00:45:08,240
like

1280
00:45:05,119 --> 00:45:11,520
dma capable of stuff yeah um so

1281
00:45:08,240 --> 00:45:13,520
as the system mmu or iomu at the moment

1282
00:45:11,520 --> 00:45:15,040
is not part of the verification story

1283
00:45:13,520 --> 00:45:16,560
and that's of course a big hole i should

1284
00:45:15,040 --> 00:45:17,920
actually have that in my yellow box i

1285
00:45:16,560 --> 00:45:21,200
forget about that

1286
00:45:17,920 --> 00:45:24,480
it's it's in the other privileged stuff

1287
00:45:21,200 --> 00:45:25,439
um yeah this is something we're working

1288
00:45:24,480 --> 00:45:28,079
on

1289
00:45:25,440 --> 00:45:29,839
um but that's not completed yet but it's

1290
00:45:28,079 --> 00:45:31,920
it's clear for a complete story if you

1291
00:45:29,839 --> 00:45:34,560
have any dma capable

1292
00:45:31,920 --> 00:45:36,960
bus mastering device on your system then

1293
00:45:34,560 --> 00:45:38,319
you need the i o mmu to make sure it

1294
00:45:36,960 --> 00:45:39,680
doesn't do anything it shouldn't be

1295
00:45:38,319 --> 00:45:43,759
doing

1296
00:45:39,680 --> 00:45:43,759
otherwise all guarantees go out of the

1297
00:45:44,839 --> 00:45:47,839
window

1298
00:45:48,400 --> 00:45:52,720
from the very beginning you you show

1299
00:45:50,319 --> 00:45:54,880
that uh on x86 you will have

1300
00:45:52,720 --> 00:45:57,680
something around one thousand a round

1301
00:45:54,880 --> 00:46:00,800
trip i'm i'm just curious why it's so

1302
00:45:57,680 --> 00:46:03,118
high because typically even

1303
00:46:00,800 --> 00:46:04,079
just through the to the kernel it could

1304
00:46:03,119 --> 00:46:06,560
be around

1305
00:46:04,079 --> 00:46:08,240
three four hundreds in one direction so

1306
00:46:06,560 --> 00:46:09,900
three four hundred cycles

1307
00:46:08,240 --> 00:46:11,598
not on x86

1308
00:46:09,900 --> 00:46:14,079
[Laughter]

1309
00:46:11,599 --> 00:46:16,319
so the question was about the the ipc

1310
00:46:14,079 --> 00:46:18,640
latency on x86 now this is the best you

1311
00:46:16,319 --> 00:46:18,640
can get

1312
00:46:21,040 --> 00:46:24,079
it's a bit contradictory

1313
00:46:25,839 --> 00:46:29,359
i've never seen anything fast and we

1314
00:46:27,359 --> 00:46:32,078
analyzed it to death we know we are at

1315
00:46:29,359 --> 00:46:32,078
the hardware limit

1316
00:46:40,839 --> 00:46:43,839
yep

1317
00:46:46,240 --> 00:46:50,560
okay so that's a really good question to

1318
00:46:47,920 --> 00:46:52,400
give you an idea um

1319
00:46:50,560 --> 00:46:53,839
for the ten thousand lines of c the

1320
00:46:52,400 --> 00:46:55,920
initial proof was two hundred thousand

1321
00:46:53,839 --> 00:46:57,759
lines of proof script skipped

1322
00:46:55,920 --> 00:47:00,400
the total proof base has now grown to

1323
00:46:57,760 --> 00:47:02,160
over a million lines

1324
00:47:00,400 --> 00:47:04,640
of course once you've done a proof then

1325
00:47:02,160 --> 00:47:05,040
you can at any time run it through the

1326
00:47:04,640 --> 00:47:06,720
proof

1327
00:47:05,040 --> 00:47:08,880
again and it will just say yes or no

1328
00:47:06,720 --> 00:47:10,959
which is nice for if you maintain

1329
00:47:08,880 --> 00:47:11,920
if you do say micro optimizations on the

1330
00:47:10,960 --> 00:47:13,680
code

1331
00:47:11,920 --> 00:47:15,440
sometimes you get improved performance

1332
00:47:13,680 --> 00:47:17,839
by just moving things around so the

1333
00:47:15,440 --> 00:47:19,760
compiler can infer

1334
00:47:17,839 --> 00:47:21,200
invariants that are not obvious from the

1335
00:47:19,760 --> 00:47:23,040
code otherwise

1336
00:47:21,200 --> 00:47:24,960
and some in sometimes if they are

1337
00:47:23,040 --> 00:47:26,319
semantic neutral the proof may still go

1338
00:47:24,960 --> 00:47:28,640
through

1339
00:47:26,319 --> 00:47:29,440
in other cases it will fail but at least

1340
00:47:28,640 --> 00:47:31,359
it

1341
00:47:29,440 --> 00:47:33,200
points you exactly to the point where

1342
00:47:31,359 --> 00:47:33,520
something fails and then you know either

1343
00:47:33,200 --> 00:47:36,480
you

1344
00:47:33,520 --> 00:47:36,800
introduce the bug or you violate it or

1345
00:47:36,480 --> 00:47:39,520
some

1346
00:47:36,800 --> 00:47:41,200
invariant is no longer it's still it may

1347
00:47:39,520 --> 00:47:42,960
still be valid but it's no longer

1348
00:47:41,200 --> 00:47:45,359
the proof doesn't cannot prove it

1349
00:47:42,960 --> 00:47:47,920
anymore and then you have to reproof

1350
00:47:45,359 --> 00:47:49,759
and so there's some of this work and

1351
00:47:47,920 --> 00:47:51,839
typically

1352
00:47:49,760 --> 00:47:53,119
it's probably somewhere between a factor

1353
00:47:51,839 --> 00:47:55,839
of five or ten

1354
00:47:53,119 --> 00:47:57,440
more verification efforts than

1355
00:47:55,839 --> 00:48:00,640
implementation effort

1356
00:47:57,440 --> 00:48:02,079
with the mcs kernel the ratio

1357
00:48:00,640 --> 00:48:04,160
turned out to be much bigger we

1358
00:48:02,079 --> 00:48:05,359
completely underestimated the effort

1359
00:48:04,160 --> 00:48:08,078
required there

1360
00:48:05,359 --> 00:48:09,279
and this was because of the complexity i

1361
00:48:08,079 --> 00:48:11,040
mentioned earlier that

1362
00:48:09,280 --> 00:48:12,800
operations involve so many kernel

1363
00:48:11,040 --> 00:48:16,000
objects and you have to prove

1364
00:48:12,800 --> 00:48:19,599
so many more invariants

1365
00:48:16,000 --> 00:48:21,680
that the the complexity really massively

1366
00:48:19,599 --> 00:48:23,520
increased we had one example before

1367
00:48:21,680 --> 00:48:24,160
where we introduced a new kernel object

1368
00:48:23,520 --> 00:48:26,559
where

1369
00:48:24,160 --> 00:48:27,920
experience was similar that there was

1370
00:48:26,559 --> 00:48:29,599
much more

1371
00:48:27,920 --> 00:48:31,520
effort to reprove we took that into

1372
00:48:29,599 --> 00:48:33,599
account and still it was worse because

1373
00:48:31,520 --> 00:48:36,319
we underestimated

1374
00:48:33,599 --> 00:48:37,359
how the interactions actually worked in

1375
00:48:36,319 --> 00:48:39,040
terms of

1376
00:48:37,359 --> 00:48:40,558
more straightforward things for example

1377
00:48:39,040 --> 00:48:42,160
platform ports we are very good in

1378
00:48:40,559 --> 00:48:45,520
estimating the cost

1379
00:48:42,160 --> 00:48:46,720
our estimate for the risk 5 verification

1380
00:48:45,520 --> 00:48:48,000
for example turned out to be

1381
00:48:46,720 --> 00:48:50,319
conservative we probably

1382
00:48:48,000 --> 00:48:52,160
make a profit on what they've given us

1383
00:48:50,319 --> 00:48:56,079
but we make a huge loss

1384
00:48:52,160 --> 00:48:56,078
on the mcs verifications

1385
00:48:57,359 --> 00:49:00,720
it's it's a bit of a black art but it's

1386
00:48:59,359 --> 00:49:03,359
actually encouraging that at least some

1387
00:49:00,720 --> 00:49:04,879
of the space we can recently predict

1388
00:49:03,359 --> 00:49:17,839
proof engineering is basically where

1389
00:49:04,880 --> 00:49:17,839
software engineering was 50 years ago

1390
00:49:19,520 --> 00:49:23,440
repeat after me kernel should not be

1391
00:49:22,000 --> 00:49:25,760
written in anything but c

1392
00:49:23,440 --> 00:49:25,760
period

1393
00:49:26,550 --> 00:49:30,720
[Applause]

1394
00:49:28,240 --> 00:49:32,240
and as a simple reason if you want the

1395
00:49:30,720 --> 00:49:33,439
high performance kernel you need to know

1396
00:49:32,240 --> 00:49:36,319
what the code is doing

1397
00:49:33,440 --> 00:49:38,480
you need assemblers to lower level c is

1398
00:49:36,319 --> 00:49:40,800
basically the kernel assembler

1399
00:49:38,480 --> 00:49:42,240
if you read some c you know what code

1400
00:49:40,800 --> 00:49:44,400
it's going to be

1401
00:49:42,240 --> 00:49:46,319
fallout with a high level language

1402
00:49:44,400 --> 00:49:49,920
there's too much stuff hidden

1403
00:49:46,319 --> 00:49:53,599
um and you get inefficiencies you get

1404
00:49:49,920 --> 00:49:55,760
you get surprises you um the compiler

1405
00:49:53,599 --> 00:49:56,480
may do stiff stuff you never imagined

1406
00:49:55,760 --> 00:49:58,160
etc

1407
00:49:56,480 --> 00:50:00,240
and then leave alone managed language

1408
00:49:58,160 --> 00:50:01,359
you never want anything like that near

1409
00:50:00,240 --> 00:50:03,680
the kernel

1410
00:50:01,359 --> 00:50:06,880
but anything higher up c should under no

1411
00:50:03,680 --> 00:50:08,558
circumstances be used

1412
00:50:06,880 --> 00:50:10,480
it's actually i think it's professional

1413
00:50:08,559 --> 00:50:14,800
misconduct to develop higher level

1414
00:50:10,480 --> 00:50:26,559
software in c it shouldn't be done

1415
00:50:14,800 --> 00:50:28,640
thank you very much

1416
00:50:26,559 --> 00:50:28,640
you

