1
00:00:06,640 --> 00:00:09,120
all right

2
00:00:07,200 --> 00:00:10,559
next one we've got christian branagh

3
00:00:09,120 --> 00:00:14,480
who's going to be talking to us about

4
00:00:10,559 --> 00:00:14,479
supervising and emulating system goals

5
00:00:14,799 --> 00:00:20,800
hey everyone i'm christian i'm

6
00:00:18,320 --> 00:00:22,960
one of the lexi maintainers mostly work

7
00:00:20,800 --> 00:00:26,160
on the kernel though

8
00:00:22,960 --> 00:00:27,840
and the is it green maybe it's not high

9
00:00:26,160 --> 00:00:31,679
up enough keep it different

10
00:00:27,840 --> 00:00:33,200
keep it differently okay is this better

11
00:00:31,679 --> 00:00:34,800
is it better if i still keep my head

12
00:00:33,200 --> 00:00:37,360
this way okay

13
00:00:34,800 --> 00:00:39,120
um right i'm going to talk to you about

14
00:00:37,360 --> 00:00:42,079
supervising and emulating

15
00:00:39,120 --> 00:00:43,199
syscalls and how we make use of this

16
00:00:42,079 --> 00:00:45,840
inside of

17
00:00:43,200 --> 00:00:45,840
lexi

18
00:00:46,879 --> 00:00:51,199
so just a brief introduction i'm not

19
00:00:48,960 --> 00:00:53,199
going to explain what syscalls are but

20
00:00:51,199 --> 00:00:54,800
think of it like sort of a way that

21
00:00:53,199 --> 00:00:56,000
allows user space to communicate with

22
00:00:54,800 --> 00:00:58,320
the kernel make a request

23
00:00:56,000 --> 00:01:00,160
for example open a file for me write

24
00:00:58,320 --> 00:01:02,480
something somewhere and so on so like a

25
00:01:00,160 --> 00:01:06,000
fancy request handler

26
00:01:02,480 --> 00:01:08,640
simplified and

27
00:01:06,000 --> 00:01:11,119
so obviously in a lot of scenarios you

28
00:01:08,640 --> 00:01:14,159
kind of have use cases where you

29
00:01:11,119 --> 00:01:16,159
where you run an app and per se there is

30
00:01:14,159 --> 00:01:18,000
nothing restricting this app from making

31
00:01:16,159 --> 00:01:19,360
any kind of syscall at once i mean

32
00:01:18,000 --> 00:01:21,119
ignore the permission checking that the

33
00:01:19,360 --> 00:01:23,520
kernel performs but in general

34
00:01:21,119 --> 00:01:24,479
the app can just if it knows the syscall

35
00:01:23,520 --> 00:01:26,080
number and how to do

36
00:01:24,479 --> 00:01:27,840
sys calls it can just ask the kernel

37
00:01:26,080 --> 00:01:29,600
perform something for me

38
00:01:27,840 --> 00:01:31,360
and for a lot of apps you might want to

39
00:01:29,600 --> 00:01:33,039
restrict them in the way

40
00:01:31,360 --> 00:01:34,560
they can request something from the

41
00:01:33,040 --> 00:01:35,759
column you want to for example just

42
00:01:34,560 --> 00:01:37,680
allow them

43
00:01:35,759 --> 00:01:39,600
a certain set of syscalls not all of

44
00:01:37,680 --> 00:01:42,320
them

45
00:01:39,600 --> 00:01:44,079
you might want to restrict how it can

46
00:01:42,320 --> 00:01:45,600
call a specific syscall with what

47
00:01:44,079 --> 00:01:47,839
arguments and so on

48
00:01:45,600 --> 00:01:50,000
and this is sort of where most operating

49
00:01:47,840 --> 00:01:53,040
systems have kind of a similar concept

50
00:01:50,000 --> 00:01:54,159
but on linux this the

51
00:01:53,040 --> 00:01:56,079
the part of the kernel that is

52
00:01:54,159 --> 00:01:57,840
responsible for allowing you to do such

53
00:01:56,079 --> 00:02:01,279
sandboxing

54
00:01:57,840 --> 00:02:02,159
is setcomp so it allows you to intercept

55
00:02:01,280 --> 00:02:04,320
system calls

56
00:02:02,159 --> 00:02:05,840
and then denies or allows them usually

57
00:02:04,320 --> 00:02:08,560
for example

58
00:02:05,840 --> 00:02:09,119
a container runtime that runs privilege

59
00:02:08,560 --> 00:02:11,440
at least

60
00:02:09,119 --> 00:02:13,360
would block a syscall that is called

61
00:02:11,440 --> 00:02:15,840
open by handle add because

62
00:02:13,360 --> 00:02:18,239
with symlink trickery you can open any

63
00:02:15,840 --> 00:02:21,040
file on the host system

64
00:02:18,239 --> 00:02:21,680
that you want and so what usually is

65
00:02:21,040 --> 00:02:24,560
done

66
00:02:21,680 --> 00:02:26,080
it returns enosis so second profile is

67
00:02:24,560 --> 00:02:28,400
loaded for that application

68
00:02:26,080 --> 00:02:29,280
and then if the application makes the

69
00:02:28,400 --> 00:02:31,440
syscall

70
00:02:29,280 --> 00:02:32,879
open by handle add return enosis or

71
00:02:31,440 --> 00:02:34,560
eperm or whatever to tell the

72
00:02:32,879 --> 00:02:36,160
application you cannot use the syscall

73
00:02:34,560 --> 00:02:37,680
this is off limits

74
00:02:36,160 --> 00:02:39,120
and so you can see where this is going

75
00:02:37,680 --> 00:02:40,800
right you can have blacklists and

76
00:02:39,120 --> 00:02:42,959
whitelists and so on and most container

77
00:02:40,800 --> 00:02:47,440
runtimes make use of this

78
00:02:42,959 --> 00:02:49,360
in some form or other but one of the

79
00:02:47,440 --> 00:02:50,959
so one of the limiting things is that

80
00:02:49,360 --> 00:02:54,160
the kernel actually never

81
00:02:50,959 --> 00:02:57,040
blocks so the policy to some extent

82
00:02:54,160 --> 00:02:59,599
is not fully dynamic right so you can't

83
00:02:57,040 --> 00:03:01,519
really do something

84
00:02:59,599 --> 00:03:03,599
if an application performs this this

85
00:03:01,519 --> 00:03:06,640
call

86
00:03:03,599 --> 00:03:09,599
stop it and wait for me for example to

87
00:03:06,640 --> 00:03:11,359
tell you what what you're supposed to do

88
00:03:09,599 --> 00:03:13,440
that's not possible with second well it

89
00:03:11,360 --> 00:03:14,959
was not possible with second

90
00:03:13,440 --> 00:03:17,280
but that would open up a lot of

91
00:03:14,959 --> 00:03:19,040
interesting interesting possibilities

92
00:03:17,280 --> 00:03:21,360
and would extend how you can send box

93
00:03:19,040 --> 00:03:24,079
application uh in a much more

94
00:03:21,360 --> 00:03:24,640
fine-grained way um and there's an

95
00:03:24,080 --> 00:03:26,319
interesting

96
00:03:24,640 --> 00:03:27,518
um interesting fact that you should keep

97
00:03:26,319 --> 00:03:29,599
in mind for the later part of the

98
00:03:27,519 --> 00:03:31,280
presentation that is second never

99
00:03:29,599 --> 00:03:32,959
runs before the syscall number is looked

100
00:03:31,280 --> 00:03:34,560
up in the syscall table so what the

101
00:03:32,959 --> 00:03:37,120
kernel is usually does right

102
00:03:34,560 --> 00:03:37,680
you request a syscall and you pass down

103
00:03:37,120 --> 00:03:39,680
a number

104
00:03:37,680 --> 00:03:41,200
in a specific register dependent on the

105
00:03:39,680 --> 00:03:43,440
architecture and the colonel then

106
00:03:41,200 --> 00:03:45,518
takes this number and is like i'm

107
00:03:43,440 --> 00:03:47,280
looking up in the syscall table

108
00:03:45,519 --> 00:03:49,040
the corresponding syscall and then call

109
00:03:47,280 --> 00:03:50,480
it but if obviously if this this call

110
00:03:49,040 --> 00:03:51,760
number doesn't exist in the syscall

111
00:03:50,480 --> 00:03:54,079
table right then the kernel will tell

112
00:03:51,760 --> 00:03:57,280
you this this call doesn't exist

113
00:03:54,080 --> 00:03:57,280
second runs before that

114
00:03:57,680 --> 00:04:00,720
if you know where i'm going with this

115
00:03:59,280 --> 00:04:02,400
but if not i'm explaining in a little

116
00:04:00,720 --> 00:04:07,599
bit

117
00:04:02,400 --> 00:04:07,599
um so right so a second never blocks

118
00:04:07,680 --> 00:04:12,319
what could you do if it actually were

119
00:04:09,680 --> 00:04:14,080
you to enable if it actually would block

120
00:04:12,319 --> 00:04:16,000
well there will be a lot of interesting

121
00:04:14,080 --> 00:04:19,199
use cases like um

122
00:04:16,000 --> 00:04:21,120
what we wanted to do is to load a

123
00:04:19,199 --> 00:04:23,440
profile that specifies

124
00:04:21,120 --> 00:04:24,160
if the application performs the make not

125
00:04:23,440 --> 00:04:28,240
syscall

126
00:04:24,160 --> 00:04:28,960
right um then i want the kernel to not

127
00:04:28,240 --> 00:04:31,759
deny

128
00:04:28,960 --> 00:04:33,039
or allow it i want the kernel to wait

129
00:04:31,759 --> 00:04:36,080
for me to tell it

130
00:04:33,040 --> 00:04:38,160
what what it's supposed to return to use

131
00:04:36,080 --> 00:04:39,919
a space

132
00:04:38,160 --> 00:04:41,440
so the kernel blocks and waits for a

133
00:04:39,919 --> 00:04:44,080
response

134
00:04:41,440 --> 00:04:45,600
from the corresponding process to tell

135
00:04:44,080 --> 00:04:47,599
it what to do

136
00:04:45,600 --> 00:04:48,880
and this is exactly what the second

137
00:04:47,600 --> 00:04:50,720
notifier

138
00:04:48,880 --> 00:04:52,000
is doing it's been something that's been

139
00:04:50,720 --> 00:04:53,840
toyed around with

140
00:04:52,000 --> 00:04:57,040
in various forms and the guy who

141
00:04:53,840 --> 00:05:00,000
implemented this is actually here

142
00:04:57,040 --> 00:05:01,680
tycho who did the original kernel work

143
00:05:00,000 --> 00:05:05,280
for this

144
00:05:01,680 --> 00:05:07,840
um yeah so

145
00:05:05,280 --> 00:05:09,919
one of the factors is that second asks

146
00:05:07,840 --> 00:05:11,679
user space for the return value and anno

147
00:05:09,919 --> 00:05:13,919
but the execution does never

148
00:05:11,680 --> 00:05:15,199
continue usually doesn't continue in the

149
00:05:13,919 --> 00:05:18,240
kernel so

150
00:05:15,199 --> 00:05:20,639
um if the

151
00:05:18,240 --> 00:05:22,400
if this if the application performs a

152
00:05:20,639 --> 00:05:23,680
syscall for example they make not cisco

153
00:05:22,400 --> 00:05:27,440
and it blocks

154
00:05:23,680 --> 00:05:30,880
the only thing that we can do right now

155
00:05:27,440 --> 00:05:31,919
is that we emulate the syscall in user

156
00:05:30,880 --> 00:05:34,159
space

157
00:05:31,919 --> 00:05:34,159
right

158
00:05:37,039 --> 00:05:41,360
i'm going to give a demo about this in a

159
00:05:38,639 --> 00:05:43,680
little bit um

160
00:05:41,360 --> 00:05:44,960
so what this allows you to do is

161
00:05:43,680 --> 00:05:46,800
basically

162
00:05:44,960 --> 00:05:48,799
fake any well fake any kind of syscall

163
00:05:46,800 --> 00:05:51,759
may be wrong but um

164
00:05:48,800 --> 00:05:52,000
you can very much expand what you can do

165
00:05:51,759 --> 00:05:53,919
with

166
00:05:52,000 --> 00:05:55,520
containers right now so containers come

167
00:05:53,919 --> 00:05:56,960
we we touched upon this in the first

168
00:05:55,520 --> 00:05:58,400
talk i think where somebody asked what

169
00:05:56,960 --> 00:06:00,318
are the limitations that you usually

170
00:05:58,400 --> 00:06:02,159
experience with unprivileged

171
00:06:00,319 --> 00:06:03,600
containers which are the containers that

172
00:06:02,160 --> 00:06:05,039
you should use because they're actually

173
00:06:03,600 --> 00:06:06,880
safe

174
00:06:05,039 --> 00:06:08,880
or way safer than than privileged

175
00:06:06,880 --> 00:06:10,159
containers well you can do a lot of

176
00:06:08,880 --> 00:06:12,000
things right if you want to

177
00:06:10,160 --> 00:06:13,440
mount any kind of block device inside of

178
00:06:12,000 --> 00:06:14,800
a container the kernel will not allow

179
00:06:13,440 --> 00:06:16,400
you to do this

180
00:06:14,800 --> 00:06:17,840
because usually file systems in the

181
00:06:16,400 --> 00:06:19,520
kernel are not able to protect

182
00:06:17,840 --> 00:06:20,318
themselves against malicious images so

183
00:06:19,520 --> 00:06:22,880
if you allow

184
00:06:20,319 --> 00:06:24,479
an unprivileged user to mount any kind

185
00:06:22,880 --> 00:06:26,159
of image that has been given stick in a

186
00:06:24,479 --> 00:06:28,719
usb stick mounted and so on you could

187
00:06:26,160 --> 00:06:30,400
crash the kernel easily

188
00:06:28,720 --> 00:06:32,160
in user name spaces you're also not

189
00:06:30,400 --> 00:06:34,239
allowed to do any kind of make not

190
00:06:32,160 --> 00:06:36,000
syscalls right

191
00:06:34,240 --> 00:06:37,520
if you could you could create i don't

192
00:06:36,000 --> 00:06:39,199
know def km def

193
00:06:37,520 --> 00:06:40,960
mem whatever it is and then write into

194
00:06:39,199 --> 00:06:42,880
random kernel memory as an unprivileged

195
00:06:40,960 --> 00:06:44,880
user that would also be pretty bad

196
00:06:42,880 --> 00:06:46,880
so there's quite a bunch of limitations

197
00:06:44,880 --> 00:06:49,520
and this obviously means that

198
00:06:46,880 --> 00:06:51,039
most user space tools have not been

199
00:06:49,520 --> 00:06:51,440
written with containers and especially

200
00:06:51,039 --> 00:06:54,080
not

201
00:06:51,440 --> 00:06:55,520
written been with the username space or

202
00:06:54,080 --> 00:06:57,280
on privileged containers

203
00:06:55,520 --> 00:06:59,039
in mind and it's kind of a catch-up game

204
00:06:57,280 --> 00:07:00,719
where user space is slowly

205
00:06:59,039 --> 00:07:02,960
accepting containers to be a common

206
00:07:00,720 --> 00:07:05,520
thing and usually tools that get written

207
00:07:02,960 --> 00:07:08,080
nowadays will

208
00:07:05,520 --> 00:07:08,880
will take care to function in user name

209
00:07:08,080 --> 00:07:10,479
spaces but

210
00:07:08,880 --> 00:07:12,159
a lot of old tools i don't know fake

211
00:07:10,479 --> 00:07:13,919
root or whatever they will usually try

212
00:07:12,160 --> 00:07:15,199
to create device nodes and so on and

213
00:07:13,919 --> 00:07:16,318
then they're running in a container and

214
00:07:15,199 --> 00:07:17,759
there's no there is no

215
00:07:16,319 --> 00:07:19,440
good reason why they shouldn't be

216
00:07:17,759 --> 00:07:22,479
allowed to run in a container

217
00:07:19,440 --> 00:07:23,039
but they will fail um but we also don't

218
00:07:22,479 --> 00:07:24,800
want to

219
00:07:23,039 --> 00:07:26,240
you know the obvious solution if we're

220
00:07:24,800 --> 00:07:26,720
thinking about the make note case that

221
00:07:26,240 --> 00:07:28,720
you

222
00:07:26,720 --> 00:07:30,160
could throw in my face is why not have a

223
00:07:28,720 --> 00:07:32,080
white list of devices

224
00:07:30,160 --> 00:07:33,280
inside of the kernel that we deem safe

225
00:07:32,080 --> 00:07:35,359
and if

226
00:07:33,280 --> 00:07:36,479
you know that's kind of messy then you

227
00:07:35,360 --> 00:07:37,680
get in the kind of game

228
00:07:36,479 --> 00:07:40,080
kind of a catch-up game where you have

229
00:07:37,680 --> 00:07:42,560
to wait on the kernel version

230
00:07:40,080 --> 00:07:44,159
and that gets you the right device note

231
00:07:42,560 --> 00:07:47,039
and whether it's safe or not

232
00:07:44,160 --> 00:07:48,160
and oftentimes especially for the

233
00:07:47,039 --> 00:07:49,360
container case right you have a

234
00:07:48,160 --> 00:07:50,879
container manager and you have the

235
00:07:49,360 --> 00:07:51,599
container and the container manager is

236
00:07:50,879 --> 00:07:53,039
sort of your

237
00:07:51,599 --> 00:07:55,039
your main authority apart from the

238
00:07:53,039 --> 00:07:57,680
kernel the kernel denies things that are

239
00:07:55,039 --> 00:07:58,159
globally unsafe and your container

240
00:07:57,680 --> 00:08:00,639
manager

241
00:07:58,160 --> 00:08:01,680
will usually be able to judge whether or

242
00:08:00,639 --> 00:08:03,520
not a specific

243
00:08:01,680 --> 00:08:05,280
operation is allowed for that container

244
00:08:03,520 --> 00:08:07,680
so it will usually have an idea of the

245
00:08:05,280 --> 00:08:09,198
workload well not necessarily but

246
00:08:07,680 --> 00:08:10,960
for a lot of containers it will know

247
00:08:09,199 --> 00:08:12,879
what's the workload can i trust this

248
00:08:10,960 --> 00:08:13,440
process inside of the container do i

249
00:08:12,879 --> 00:08:16,639
think

250
00:08:13,440 --> 00:08:18,879
a specific syscall is safe and so on

251
00:08:16,639 --> 00:08:21,120
and there was no way there was

252
00:08:18,879 --> 00:08:23,599
previously no nice way

253
00:08:21,120 --> 00:08:25,520
to actually delegate this power to the

254
00:08:23,599 --> 00:08:27,039
container manager itself

255
00:08:25,520 --> 00:08:28,878
and this is where the second notifier

256
00:08:27,039 --> 00:08:33,120
really becomes powerful

257
00:08:28,879 --> 00:08:36,320
so you load a second profile and

258
00:08:33,120 --> 00:08:37,120
make note syscall doesn't work but now

259
00:08:36,320 --> 00:08:39,360
you have this

260
00:08:37,120 --> 00:08:41,200
second profile that stops the process

261
00:08:39,360 --> 00:08:43,440
when it performs the make not syscall

262
00:08:41,200 --> 00:08:45,279
right right before it's before it's even

263
00:08:43,440 --> 00:08:46,480
looked up in the kernel in the syscall

264
00:08:45,279 --> 00:08:48,800
table

265
00:08:46,480 --> 00:08:49,920
and then it sends you a message on on a

266
00:08:48,800 --> 00:08:52,800
file descriptor

267
00:08:49,920 --> 00:08:54,240
um and the user space process that is

268
00:08:52,800 --> 00:08:56,399
supervising the container can then

269
00:08:54,240 --> 00:08:59,279
inspect the arguments and so on of the

270
00:08:56,399 --> 00:08:59,920
of the of the syscall for the container

271
00:08:59,279 --> 00:09:02,720
and then

272
00:08:59,920 --> 00:09:04,399
make by based on that make an informed

273
00:09:02,720 --> 00:09:05,440
decision say for example it's safe he

274
00:09:04,399 --> 00:09:06,800
just wants to

275
00:09:05,440 --> 00:09:08,160
create the console inside of the

276
00:09:06,800 --> 00:09:09,279
container and not something really

277
00:09:08,160 --> 00:09:12,319
malicious

278
00:09:09,279 --> 00:09:14,000
um that's the that's the general idea

279
00:09:12,320 --> 00:09:16,560
and then deny it

280
00:09:14,000 --> 00:09:17,440
or allow it as you see the concrete

281
00:09:16,560 --> 00:09:19,199
implementation is

282
00:09:17,440 --> 00:09:20,880
you load a sec a task the container

283
00:09:19,200 --> 00:09:23,839
loads the second profile

284
00:09:20,880 --> 00:09:24,720
and then it gets an fd for this profile

285
00:09:23,839 --> 00:09:27,279
and this fd

286
00:09:24,720 --> 00:09:28,640
is the so-called notifier fd this it can

287
00:09:27,279 --> 00:09:30,800
then hand off to

288
00:09:28,640 --> 00:09:33,360
the container manager likes the docker

289
00:09:30,800 --> 00:09:35,519
apartment whatever or con one

290
00:09:33,360 --> 00:09:36,959
and then it can be registered in an epo

291
00:09:35,519 --> 00:09:38,640
loop in an event loop or

292
00:09:36,959 --> 00:09:40,160
in whatever form and then you can wait

293
00:09:38,640 --> 00:09:42,160
for events on it and every time a

294
00:09:40,160 --> 00:09:43,040
syscall that is registered in the filter

295
00:09:42,160 --> 00:09:45,760
for the container

296
00:09:43,040 --> 00:09:47,680
is made the supervising manager will get

297
00:09:45,760 --> 00:09:48,480
an event on the notifier fd can then

298
00:09:47,680 --> 00:09:50,399
receive

299
00:09:48,480 --> 00:09:52,399
the syscall arguments what syscall is

300
00:09:50,399 --> 00:09:54,480
made and has been made and so on inspect

301
00:09:52,399 --> 00:09:57,600
it inspect the arguments

302
00:09:54,480 --> 00:09:59,839
and then do whatever it wants and at the

303
00:09:57,600 --> 00:10:02,640
end tell the colonel

304
00:09:59,839 --> 00:10:04,800
tell the process the syscall succeeded

305
00:10:02,640 --> 00:10:09,279
or tell the process the syscall

306
00:10:04,800 --> 00:10:12,959
failed excellent um

307
00:10:09,279 --> 00:10:16,720
so maybe i do the demo first and then we

308
00:10:12,959 --> 00:10:18,160
this is the gist of it but we've

309
00:10:16,720 --> 00:10:21,279
expanded this quite a bit

310
00:10:18,160 --> 00:10:23,519
over the last times this is too small

311
00:10:21,279 --> 00:10:23,519
right

312
00:10:24,640 --> 00:10:33,120
better okay i have

313
00:10:29,279 --> 00:10:37,760
what do i do with this

314
00:10:33,120 --> 00:10:37,760
so i have a container running here

315
00:10:38,320 --> 00:10:44,839
not running apparently but

316
00:10:41,440 --> 00:10:46,160
so i can start a container let's go with

317
00:10:44,839 --> 00:10:50,079
df1

318
00:10:46,160 --> 00:10:52,560
and clear and as we are

319
00:10:50,079 --> 00:10:54,560
the lxd project we run full system

320
00:10:52,560 --> 00:10:58,239
containers as you can see

321
00:10:54,560 --> 00:11:00,719
and we are in a second we are in an

322
00:10:58,240 --> 00:11:04,079
unprivileged container

323
00:11:00,720 --> 00:11:07,440
oop uid map

324
00:11:04,079 --> 00:11:10,880
and for the really suspicious

325
00:11:07,440 --> 00:11:11,760
gid map so uh what we can't do obviously

326
00:11:10,880 --> 00:11:16,079
is stuff like this

327
00:11:11,760 --> 00:11:16,079
uh wait let me see no yeah

328
00:11:16,480 --> 00:11:24,000
whatever make not bbbc that is

329
00:11:19,839 --> 00:11:26,000
basically uh make me a device note

330
00:11:24,000 --> 00:11:27,279
called bbb i know the arguments are

331
00:11:26,000 --> 00:11:30,640
really terrible

332
00:11:27,279 --> 00:11:34,720
c is character device uh and five

333
00:11:30,640 --> 00:11:35,760
is console five one is console in any

334
00:11:34,720 --> 00:11:37,519
case

335
00:11:35,760 --> 00:11:38,959
but the kernel will not allow you to do

336
00:11:37,519 --> 00:11:39,839
this at all like this is this is off

337
00:11:38,959 --> 00:11:42,079
limits um

338
00:11:39,839 --> 00:11:43,519
because you could create any device node

339
00:11:42,079 --> 00:11:45,040
otherwise and there is no static device

340
00:11:43,519 --> 00:11:47,200
list in the kernel and so on as i said

341
00:11:45,040 --> 00:11:47,199
so

342
00:11:47,760 --> 00:11:56,240
now usb stick

343
00:11:52,079 --> 00:11:58,000
x4 file system uh so i'm not

344
00:11:56,240 --> 00:11:59,680
that's for a later part of the demo so

345
00:11:58,000 --> 00:12:03,600
don't get suspicious

346
00:11:59,680 --> 00:12:08,160
so um now

347
00:12:03,600 --> 00:12:12,560
we can let's see config

348
00:12:08,160 --> 00:12:16,480
set f1 security

349
00:12:12,560 --> 00:12:20,638
that's syscalls dot intercept dot

350
00:12:16,480 --> 00:12:22,959
make not true

351
00:12:20,639 --> 00:12:26,959
and now because currently second

352
00:12:22,959 --> 00:12:26,959
profiles can't be reloaded dynamically

353
00:12:28,399 --> 00:12:31,360
restart f1

354
00:12:32,639 --> 00:12:39,200
go inside let's try the same exercise

355
00:12:36,839 --> 00:12:42,480
again

356
00:12:39,200 --> 00:12:45,760
no um

357
00:12:42,480 --> 00:12:47,519
so uh you can see we don't we don't fool

358
00:12:45,760 --> 00:12:50,639
you there is no

359
00:12:47,519 --> 00:12:54,000
mountain oops well

360
00:12:50,639 --> 00:12:57,680
this is an actual device node

361
00:12:54,000 --> 00:12:57,680
and it's the cops that

362
00:12:59,839 --> 00:13:02,959
yeah it's the character special device

363
00:13:02,320 --> 00:13:04,720
node

364
00:13:02,959 --> 00:13:05,920
and so what we did obviously is we

365
00:13:04,720 --> 00:13:07,440
haven't changed the kernel i haven't

366
00:13:05,920 --> 00:13:09,040
rebooted the kernel and so on what we

367
00:13:07,440 --> 00:13:10,959
did is we used the second notifier the

368
00:13:09,040 --> 00:13:12,800
second notifier sent a message to

369
00:13:10,959 --> 00:13:14,319
uh to the legacy demo and said this

370
00:13:12,800 --> 00:13:16,240
container wants to make a make note

371
00:13:14,320 --> 00:13:18,160
syscall and then the lexi demon was like

372
00:13:16,240 --> 00:13:19,839
okay let me look at the arguments and

373
00:13:18,160 --> 00:13:21,439
then we have a white list in lexi that

374
00:13:19,839 --> 00:13:22,000
states for example dev console yeah

375
00:13:21,440 --> 00:13:25,279
whatever

376
00:13:22,000 --> 00:13:27,279
totally fine um and performs

377
00:13:25,279 --> 00:13:28,720
the make note action for you emulates it

378
00:13:27,279 --> 00:13:31,760
in user space so to speak

379
00:13:28,720 --> 00:13:32,320
um if i were to change this to block

380
00:13:31,760 --> 00:13:35,680
device

381
00:13:32,320 --> 00:13:38,399
it hopefully fails well yeah obviously

382
00:13:35,680 --> 00:13:38,399
it fails i mean

383
00:13:44,880 --> 00:13:48,399
oh this is i know why it is why this

384
00:13:46,959 --> 00:13:50,319
still works because i

385
00:13:48,399 --> 00:13:52,959
modified the demo to allow me any device

386
00:13:50,320 --> 00:13:52,959
node but good

387
00:13:56,480 --> 00:14:00,720
because i wanted to show cool stuff

388
00:14:01,519 --> 00:14:07,120
the same uh so you can obviously

389
00:14:04,560 --> 00:14:08,800
this is a very well it's an interesting

390
00:14:07,120 --> 00:14:11,519
use case because it allows you to

391
00:14:08,800 --> 00:14:13,040
to run tools like um fake root and so on

392
00:14:11,519 --> 00:14:15,120
but it's not the most interesting use

393
00:14:13,040 --> 00:14:16,959
case the more interesting use case is

394
00:14:15,120 --> 00:14:18,240
uh currently we're very limited in the

395
00:14:16,959 --> 00:14:19,839
way that so

396
00:14:18,240 --> 00:14:22,079
if you request from us from the lexi

397
00:14:19,839 --> 00:14:24,240
demon that we mount something for you so

398
00:14:22,079 --> 00:14:26,319
the user on the host types something in

399
00:14:24,240 --> 00:14:28,079
and states i want this mount to appear

400
00:14:26,320 --> 00:14:29,600
in the container then we can already do

401
00:14:28,079 --> 00:14:31,120
that like we can inject mounts no

402
00:14:29,600 --> 00:14:32,720
problem whatsoever but

403
00:14:31,120 --> 00:14:34,320
often when you have a tool running

404
00:14:32,720 --> 00:14:36,160
inside of the container right we

405
00:14:34,320 --> 00:14:37,440
currently had no way to intercept this

406
00:14:36,160 --> 00:14:39,600
syscall we had no

407
00:14:37,440 --> 00:14:40,880
way no way of knowing that it actually

408
00:14:39,600 --> 00:14:42,560
wanted to mount something that we

409
00:14:40,880 --> 00:14:44,320
consider to be safe

410
00:14:42,560 --> 00:14:45,920
so what you can do is you can also

411
00:14:44,320 --> 00:14:48,720
intercept the five minutes

412
00:14:45,920 --> 00:14:49,360
you can also intercept um the mount

413
00:14:48,720 --> 00:14:51,519
syscall

414
00:14:49,360 --> 00:14:53,600
and then make it possible to have

415
00:14:51,519 --> 00:14:54,079
various stuff mounted in your container

416
00:14:53,600 --> 00:14:58,959
so

417
00:14:54,079 --> 00:15:03,599
let's start with

418
00:14:58,959 --> 00:15:06,800
that's mount right and then

419
00:15:03,600 --> 00:15:08,399
allowed and we state that it's fine to

420
00:15:06,800 --> 00:15:13,839
mount

421
00:15:08,399 --> 00:15:13,839
let's say x4

422
00:15:15,600 --> 00:15:18,720
and that's one

423
00:15:20,639 --> 00:15:23,680
and whoops

424
00:15:24,800 --> 00:15:28,880
i should have a device node in there

425
00:15:26,399 --> 00:15:28,880
hopefully

426
00:15:29,519 --> 00:15:34,320
yep so i have a file system i should

427
00:15:31,920 --> 00:15:34,319
probably

428
00:15:35,680 --> 00:15:41,120
so let me briefly remove this and the

429
00:15:38,800 --> 00:15:42,399
reason is that i

430
00:15:41,120 --> 00:15:46,000
want to show you that it actually

431
00:15:42,399 --> 00:15:46,000
doesn't work by default

432
00:15:47,920 --> 00:15:52,319
shall i have one clear and so if you do

433
00:15:50,720 --> 00:15:54,079
mount slash dev sdb

434
00:15:52,320 --> 00:15:56,079
which is an xd4 file system and try to

435
00:15:54,079 --> 00:15:57,680
mount it the kernel will tell you no

436
00:15:56,079 --> 00:15:59,199
this is off limits because it could be a

437
00:15:57,680 --> 00:16:00,959
malicious image you're trying to crash

438
00:15:59,199 --> 00:16:05,199
me whatever like

439
00:16:00,959 --> 00:16:05,199
um but if we

440
00:16:06,839 --> 00:16:25,279
and the distill out and do a restart

441
00:16:22,320 --> 00:16:25,279
now i do the mount

442
00:16:26,240 --> 00:16:34,160
ah there it is so

443
00:16:31,120 --> 00:16:36,240
because we have uh in our policy allowed

444
00:16:34,160 --> 00:16:37,680
x4 mounts the legacy daemon will now

445
00:16:36,240 --> 00:16:39,199
intercept these syscalls and then

446
00:16:37,680 --> 00:16:40,959
and if you call mount from inside of the

447
00:16:39,199 --> 00:16:41,839
container it will mount the x4 file

448
00:16:40,959 --> 00:16:43,920
system for you

449
00:16:41,839 --> 00:16:46,000
the problem obviously with this is that

450
00:16:43,920 --> 00:16:48,959
um

451
00:16:46,000 --> 00:16:51,040
it's only safe if you do it uh if you do

452
00:16:48,959 --> 00:16:53,439
it via fuse so instead of

453
00:16:51,040 --> 00:16:54,079
enabling the file system we also allow

454
00:16:53,440 --> 00:16:56,160
you

455
00:16:54,079 --> 00:16:57,279
to set an option where you can rewrite

456
00:16:56,160 --> 00:16:59,279
it to fuse so

457
00:16:57,279 --> 00:17:00,880
any mount any x4 mount inside of the

458
00:16:59,279 --> 00:17:01,839
container will be done by a fuse which

459
00:17:00,880 --> 00:17:03,519
is safe

460
00:17:01,839 --> 00:17:04,959
that's a safe user space implementation

461
00:17:03,519 --> 00:17:05,679
of this it's the only way you can safely

462
00:17:04,959 --> 00:17:07,439
do this but

463
00:17:05,679 --> 00:17:08,799
if you know your workload and you know

464
00:17:07,439 --> 00:17:10,559
in this unprivileged container is

465
00:17:08,799 --> 00:17:12,959
running something that

466
00:17:10,559 --> 00:17:15,439
can only have ever access to specific

467
00:17:12,959 --> 00:17:17,360
types of device nodes

468
00:17:15,439 --> 00:17:20,480
then it's probably also fine if you set

469
00:17:17,359 --> 00:17:22,958
the allowed property the cool thing is

470
00:17:20,480 --> 00:17:24,319
or one of the limitations that we've

471
00:17:22,959 --> 00:17:26,559
recently gotten rid of with just

472
00:17:24,319 --> 00:17:27,599
got released a patch that i've merged

473
00:17:26,559 --> 00:17:31,360
for 5.5

474
00:17:27,599 --> 00:17:33,280
is we now also allow you to continue

475
00:17:31,360 --> 00:17:35,280
this calls because what i said is

476
00:17:33,280 --> 00:17:36,559
the kernel never continues this calls

477
00:17:35,280 --> 00:17:38,240
from user space

478
00:17:36,559 --> 00:17:39,840
actually this is now possible when you

479
00:17:38,240 --> 00:17:41,919
set a specific when you tell the kernel

480
00:17:39,840 --> 00:17:43,918
to do so but be aware this cannot be

481
00:17:41,919 --> 00:17:45,280
used to implement a security policy at

482
00:17:43,919 --> 00:17:47,919
all

483
00:17:45,280 --> 00:17:48,559
it is only possible uh it is only

484
00:17:47,919 --> 00:17:52,240
possible

485
00:17:48,559 --> 00:17:55,600
if you are sure um that

486
00:17:52,240 --> 00:17:57,679
if you continue and an attacker so

487
00:17:55,600 --> 00:17:59,280
imagine the following scenario so a

488
00:17:57,679 --> 00:18:00,000
container performs a cisco it gets

489
00:17:59,280 --> 00:18:02,639
stopped

490
00:18:00,000 --> 00:18:03,200
and you now inspect the arguments and

491
00:18:02,640 --> 00:18:04,640
then

492
00:18:03,200 --> 00:18:06,080
after this based on the arguments that

493
00:18:04,640 --> 00:18:08,000
you copied out you make a decision and

494
00:18:06,080 --> 00:18:10,399
you say continue this syscall

495
00:18:08,000 --> 00:18:12,160
an attacker with equal privilege could

496
00:18:10,400 --> 00:18:12,960
rewrite the syscall arguments in the

497
00:18:12,160 --> 00:18:14,640
meantime

498
00:18:12,960 --> 00:18:16,640
so you need to be sure that if that

499
00:18:14,640 --> 00:18:19,280
happens the kernel will still

500
00:18:16,640 --> 00:18:20,559
be sufficiently uh sufficiently

501
00:18:19,280 --> 00:18:23,600
protecting you

502
00:18:20,559 --> 00:18:25,200
um yeah i actually have more but

503
00:18:23,600 --> 00:18:26,719
i think we're out of time oh if you try

504
00:18:25,200 --> 00:18:28,640
to just do the demo very quickly

505
00:18:26,720 --> 00:18:30,080
well people ask questions or whatever

506
00:18:28,640 --> 00:18:31,600
but like you still have about a minute

507
00:18:30,080 --> 00:18:33,360
i don't have your expertise in doing

508
00:18:31,600 --> 00:18:35,600
demos very quickly

509
00:18:33,360 --> 00:18:36,479
um but i also want to take a chance to

510
00:18:35,600 --> 00:18:38,719
take uh

511
00:18:36,480 --> 00:18:40,400
questions uh we do have the actual

512
00:18:38,720 --> 00:18:42,320
instructions for that on the

513
00:18:40,400 --> 00:18:43,600
release post for xd319 so if you want to

514
00:18:42,320 --> 00:18:45,520
try it for yourself we do have the

515
00:18:43,600 --> 00:18:47,360
explanation for to do that the demo was

516
00:18:45,520 --> 00:18:48,400
gonna do there's more features coming uh

517
00:18:47,360 --> 00:18:50,639
sargon

518
00:18:48,400 --> 00:18:53,360
someone from from netflix has worked on

519
00:18:50,640 --> 00:18:55,120
a new syscall that i've merged for 5.6

520
00:18:53,360 --> 00:18:56,959
um that also allows you to retrieve file

521
00:18:55,120 --> 00:18:58,399
descriptors which means that will also

522
00:18:56,960 --> 00:19:01,520
allow you to at some point

523
00:18:58,400 --> 00:19:03,520
bridge sockets so you can intercept get

524
00:19:01,520 --> 00:19:04,639
an fd from the task that you intercepted

525
00:19:03,520 --> 00:19:06,320
and then connected

526
00:19:04,640 --> 00:19:08,160
uh connected to a different port or

527
00:19:06,320 --> 00:19:10,080
different ip address whatever you want

528
00:19:08,160 --> 00:19:12,480
so that's pretty cool we can take one

529
00:19:10,080 --> 00:19:12,480
question

530
00:19:15,760 --> 00:19:18,960
um if the attacker with equal privilege

531
00:19:18,480 --> 00:19:21,200
could

532
00:19:18,960 --> 00:19:23,200
change the parameters why not to make

533
00:19:21,200 --> 00:19:25,280
another option to allow

534
00:19:23,200 --> 00:19:27,520
the application to be blocked while the

535
00:19:25,280 --> 00:19:30,320
security check has been done

536
00:19:27,520 --> 00:19:32,480
because this way you could actually use

537
00:19:30,320 --> 00:19:34,559
this as a security mechanism

538
00:19:32,480 --> 00:19:35,679
i think i have really bad ears so i

539
00:19:34,559 --> 00:19:39,360
didn't understand it

540
00:19:35,679 --> 00:19:40,720
you mentioned that you cannot use this

541
00:19:39,360 --> 00:19:42,479
as a security mechanism

542
00:19:40,720 --> 00:19:43,919
because the attacker can change the

543
00:19:42,480 --> 00:19:45,840
parameters while

544
00:19:43,919 --> 00:19:48,160
there's a check or in a race condition

545
00:19:45,840 --> 00:19:50,000
so why not make an extra option

546
00:19:48,160 --> 00:19:51,360
for the application to be blocked while

547
00:19:50,000 --> 00:19:53,280
the check has been done

548
00:19:51,360 --> 00:19:55,678
and this way this could be a security

549
00:19:53,280 --> 00:19:58,720
mechanism mechanism

550
00:19:55,679 --> 00:20:01,760
yeah which you want

551
00:19:58,720 --> 00:20:02,320
it does it simply simply so the thread

552
00:20:01,760 --> 00:20:07,840
itself

553
00:20:02,320 --> 00:20:07,840
is frozen when you're hitting that

554
00:20:08,080 --> 00:20:15,039
but also the issue that um sec comp

555
00:20:11,840 --> 00:20:16,879
um at the time of cyclope is running um

556
00:20:15,039 --> 00:20:18,320
the kernel has not copied any of the

557
00:20:16,880 --> 00:20:21,120
memory so

558
00:20:18,320 --> 00:20:22,799
as soon as you get out of sec comp and

559
00:20:21,120 --> 00:20:23,760
into the actual handler in a kernel that

560
00:20:22,799 --> 00:20:26,879
logic there

561
00:20:23,760 --> 00:20:28,720
will read again from user space so you

562
00:20:26,880 --> 00:20:29,679
can use it to do a quick check and deny

563
00:20:28,720 --> 00:20:32,000
but you cannot

564
00:20:29,679 --> 00:20:33,440
really do any more because otherwise the

565
00:20:32,000 --> 00:20:34,720
value might still change underneath you

566
00:20:33,440 --> 00:20:36,240
and that's just because of where the

567
00:20:34,720 --> 00:20:38,640
comp is in a stack

568
00:20:36,240 --> 00:20:39,760
so that comes back to my point about

569
00:20:38,640 --> 00:20:41,200
running before

570
00:20:39,760 --> 00:20:43,120
uh running before it's looked up in the

571
00:20:41,200 --> 00:20:44,880
syscall table so the cisc

572
00:20:43,120 --> 00:20:47,120
obviously the cisco memory has not been

573
00:20:44,880 --> 00:20:48,799
performed actual memory copying happens

574
00:20:47,120 --> 00:20:50,959
in the actual syscall it's well it

575
00:20:48,799 --> 00:20:53,679
mostly in the actual syscall itself

576
00:20:50,960 --> 00:20:54,640
um the cool thing is that um which i

577
00:20:53,679 --> 00:20:58,000
haven't demoed

578
00:20:54,640 --> 00:20:59,840
uh i have a demo for this um is that you

579
00:20:58,000 --> 00:21:01,840
can invent syscalls with this

580
00:20:59,840 --> 00:21:03,760
because it runs that's why i pointed out

581
00:21:01,840 --> 00:21:05,678
it runs before the system call number is

582
00:21:03,760 --> 00:21:09,200
looked up in the system call table so

583
00:21:05,679 --> 00:21:12,240
technically you could for example say um

584
00:21:09,200 --> 00:21:14,880
some random number that is now then

585
00:21:12,240 --> 00:21:17,039
that i invented as a new syscall is a

586
00:21:14,880 --> 00:21:18,559
way to communicate to lexi to perform a

587
00:21:17,039 --> 00:21:20,400
certain kind of operation

588
00:21:18,559 --> 00:21:21,678
for you and that this call doesn't even

589
00:21:20,400 --> 00:21:22,960
need to exist on the kernel so

590
00:21:21,679 --> 00:21:23,360
technically even if you're an older

591
00:21:22,960 --> 00:21:25,360
kernel

592
00:21:23,360 --> 00:21:26,799
we could for example say oh it doesn't

593
00:21:25,360 --> 00:21:28,399
have this this call let's emulate it in

594
00:21:26,799 --> 00:21:29,679
user space yeah you can emulate missing

595
00:21:28,400 --> 00:21:31,360
cisco with it you can

596
00:21:29,679 --> 00:21:33,200
prototype and use this goals with it you

597
00:21:31,360 --> 00:21:35,740
can do a lot of really weird stuff

598
00:21:33,200 --> 00:21:42,840
okay i'm well off time thank you very

599
00:21:35,740 --> 00:21:45,840
[Applause]

600
00:21:42,840 --> 00:21:45,840
much

601
00:21:48,559 --> 00:21:50,639
you

