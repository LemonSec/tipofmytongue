1
00:00:05,200 --> 00:00:09,519
hi everybody

2
00:00:06,080 --> 00:00:12,719
my name is ewan slater my talk today

3
00:00:09,519 --> 00:00:13,360
is as you like it and it's about how you

4
00:00:12,719 --> 00:00:15,759
can have

5
00:00:13,360 --> 00:00:17,600
serverless but with a bit more freedom

6
00:00:15,759 --> 00:00:18,880
like for example having serverless on

7
00:00:17,600 --> 00:00:21,119
your laptop

8
00:00:18,880 --> 00:00:22,320
um i work for oracle but what i'm

9
00:00:21,119 --> 00:00:24,800
talking about here

10
00:00:22,320 --> 00:00:25,359
isn't really my day job i'm going to

11
00:00:24,800 --> 00:00:27,920
talk about

12
00:00:25,359 --> 00:00:30,240
fn project which is an open source

13
00:00:27,920 --> 00:00:31,679
project the oracle sponsor that i

14
00:00:30,240 --> 00:00:34,320
contribute to

15
00:00:31,679 --> 00:00:36,559
and try not to let my boss know how much

16
00:00:34,320 --> 00:00:39,760
time i spend on it

17
00:00:36,559 --> 00:00:41,519
um so serverless is anybody here using

18
00:00:39,760 --> 00:00:45,839
serverless at the moment

19
00:00:41,520 --> 00:00:45,840
what are you using

20
00:00:46,320 --> 00:00:49,840
no but which platform

21
00:00:50,480 --> 00:00:57,599
okay yeah serverless

22
00:00:55,440 --> 00:00:59,280
the cncf definition of serverless and

23
00:00:57,600 --> 00:01:01,680
i've put some of the words in bold

24
00:00:59,280 --> 00:01:03,440
is it refers to the concept of building

25
00:01:01,680 --> 00:01:06,240
and running applications

26
00:01:03,440 --> 00:01:07,360
that do not require server management so

27
00:01:06,240 --> 00:01:08,880
that's not like a traditional

28
00:01:07,360 --> 00:01:09,840
application we're not going to kick it

29
00:01:08,880 --> 00:01:13,199
off and then

30
00:01:09,840 --> 00:01:15,439
worry about how it runs after that

31
00:01:13,200 --> 00:01:16,400
and it also describes a finer grain

32
00:01:15,439 --> 00:01:18,000
deployment

33
00:01:16,400 --> 00:01:20,240
model where applications are bundled

34
00:01:18,000 --> 00:01:23,040
together as one or more functions

35
00:01:20,240 --> 00:01:25,119
and then they're uploaded to a platform

36
00:01:23,040 --> 00:01:27,360
and then they're executed and they're

37
00:01:25,119 --> 00:01:28,479
scaled and billed in response to the

38
00:01:27,360 --> 00:01:31,439
exact demand

39
00:01:28,479 --> 00:01:32,799
needed at the moment so not only do we

40
00:01:31,439 --> 00:01:34,559
not want to know about them

41
00:01:32,799 --> 00:01:35,920
when they're running but we actually

42
00:01:34,560 --> 00:01:38,400
just want them to die when they've

43
00:01:35,920 --> 00:01:40,400
finished

44
00:01:38,400 --> 00:01:42,000
this is actually my favorite working

45
00:01:40,400 --> 00:01:44,799
definition

46
00:01:42,000 --> 00:01:46,159
and what this says to me is it's like

47
00:01:44,799 --> 00:01:49,280
you want the nice

48
00:01:46,159 --> 00:01:51,119
thing but you don't want all the crap

49
00:01:49,280 --> 00:01:51,439
that goes with it and the unpleasantness

50
00:01:51,119 --> 00:01:54,640
of

51
00:01:51,439 --> 00:01:56,798
for example killing a cow or

52
00:01:54,640 --> 00:01:59,040
building a whole load of that you know

53
00:01:56,799 --> 00:02:00,799
so it's really about abstraction you've

54
00:01:59,040 --> 00:02:02,320
still got servers you've still got

55
00:02:00,799 --> 00:02:04,240
network you've still got all of the

56
00:02:02,320 --> 00:02:06,240
infrastructure and the operations

57
00:02:04,240 --> 00:02:08,560
associated with it

58
00:02:06,240 --> 00:02:10,079
and what you want is the capability that

59
00:02:08,560 --> 00:02:12,000
that delivers

60
00:02:10,080 --> 00:02:13,920
but you don't want to have to look after

61
00:02:12,000 --> 00:02:17,599
it yourself

62
00:02:13,920 --> 00:02:20,640
and that enables us to focus in

63
00:02:17,599 --> 00:02:22,560
on delivering the functionality that the

64
00:02:20,640 --> 00:02:24,160
business one

65
00:02:22,560 --> 00:02:26,239
and we're going to deliver that

66
00:02:24,160 --> 00:02:29,840
functionality

67
00:02:26,239 --> 00:02:33,360
using functions or functions

68
00:02:29,840 --> 00:02:35,519
as a service so

69
00:02:33,360 --> 00:02:37,200
if we're in the faz world what we're

70
00:02:35,519 --> 00:02:40,720
doing is we're writing

71
00:02:37,200 --> 00:02:42,640
small functions if they get big

72
00:02:40,720 --> 00:02:44,319
then you should reappraise whether you

73
00:02:42,640 --> 00:02:45,839
need more functions or

74
00:02:44,319 --> 00:02:47,599
whether you should be doing that they

75
00:02:45,840 --> 00:02:50,480
should do one thing

76
00:02:47,599 --> 00:02:52,319
preferably well and they should be easy

77
00:02:50,480 --> 00:02:53,280
to understand so that should make them

78
00:02:52,319 --> 00:02:56,720
easy to write

79
00:02:53,280 --> 00:02:58,319
easy to get right and easy to fix

80
00:02:56,720 --> 00:03:00,560
and then we're going to run them on top

81
00:02:58,319 --> 00:03:04,879
of our serverless platform

82
00:03:00,560 --> 00:03:07,360
which is abstracted infrastructure

83
00:03:04,879 --> 00:03:10,159
and one of the upsides of the developer

84
00:03:07,360 --> 00:03:11,760
is it avoids this kind of situation

85
00:03:10,159 --> 00:03:13,440
you know the business has asked you to

86
00:03:11,760 --> 00:03:15,280
go and build something and you know

87
00:03:13,440 --> 00:03:16,959
there's a whole load of setup work that

88
00:03:15,280 --> 00:03:19,280
needs to be done beforehand like

89
00:03:16,959 --> 00:03:20,319
installing a database or an ldap server

90
00:03:19,280 --> 00:03:22,000
or whatever

91
00:03:20,319 --> 00:03:23,760
and then the boss comes along and thinks

92
00:03:22,000 --> 00:03:25,599
you've just been sitting around wasting

93
00:03:23,760 --> 00:03:26,239
time for three days because he can't see

94
00:03:25,599 --> 00:03:29,599
anything

95
00:03:26,239 --> 00:03:32,000
on a screen to play with

96
00:03:29,599 --> 00:03:34,238
another advantage is in terms of

97
00:03:32,000 --> 00:03:37,200
resource utilization

98
00:03:34,239 --> 00:03:38,720
because our functions are only going to

99
00:03:37,200 --> 00:03:41,839
run for a short period of time

100
00:03:38,720 --> 00:03:42,159
and then go away we should be able to

101
00:03:41,840 --> 00:03:44,720
get

102
00:03:42,159 --> 00:03:46,319
better utilization of our infrastructure

103
00:03:44,720 --> 00:03:49,760
we're not going to have stuff

104
00:03:46,319 --> 00:03:52,159
running when it's idle and

105
00:03:49,760 --> 00:03:53,840
about a year ago university of berkeley

106
00:03:52,159 --> 00:03:56,239
did a report on serverless

107
00:03:53,840 --> 00:03:58,720
and they said customers benefit from

108
00:03:56,239 --> 00:04:00,640
increased programming productivity

109
00:03:58,720 --> 00:04:02,159
and in many scenarios we see cost

110
00:04:00,640 --> 00:04:05,119
savings as well

111
00:04:02,159 --> 00:04:05,120
so this is lovely

112
00:04:05,360 --> 00:04:12,720
sorry there are no silver bullets

113
00:04:09,519 --> 00:04:15,040
there are only double edged swords and

114
00:04:12,720 --> 00:04:16,720
for the record i am not telling you to

115
00:04:15,040 --> 00:04:18,478
go and write

116
00:04:16,720 --> 00:04:20,239
you know write everything from now on as

117
00:04:18,478 --> 00:04:21,758
serverless and go and rewrite everything

118
00:04:20,238 --> 00:04:25,198
you have as serverless

119
00:04:21,759 --> 00:04:26,240
i didn't say that um so amongst the

120
00:04:25,199 --> 00:04:30,960
downsides

121
00:04:26,240 --> 00:04:33,440
um it's shiny it's a new thing

122
00:04:30,960 --> 00:04:34,560
people go hmm i would like to play with

123
00:04:33,440 --> 00:04:36,880
this new thing

124
00:04:34,560 --> 00:04:38,560
and this leads to what i would call cv

125
00:04:36,880 --> 00:04:40,960
plus plus programming

126
00:04:38,560 --> 00:04:41,840
i want this for my next job so let me go

127
00:04:40,960 --> 00:04:43,680
and write this

128
00:04:41,840 --> 00:04:46,320
other thing that doesn't need serverless

129
00:04:43,680 --> 00:04:49,040
in a serverless way

130
00:04:46,320 --> 00:04:49,680
the other problem that we tend to come

131
00:04:49,040 --> 00:04:54,000
across

132
00:04:49,680 --> 00:04:55,600
is one of lock-in because you can't just

133
00:04:54,000 --> 00:04:58,000
take a serverless function that's

134
00:04:55,600 --> 00:05:01,199
written for one serverless platform and

135
00:04:58,000 --> 00:05:03,520
go and run it on another one

136
00:05:01,199 --> 00:05:04,960
yeah that's kind of tied to the

137
00:05:03,520 --> 00:05:07,919
serverless platform

138
00:05:04,960 --> 00:05:08,880
and then and this is a big one for me

139
00:05:07,919 --> 00:05:11,840
personally

140
00:05:08,880 --> 00:05:14,479
you might find that the platform is tied

141
00:05:11,840 --> 00:05:16,400
to a specific cloud vendor

142
00:05:14,479 --> 00:05:18,080
which means that if you decide you don't

143
00:05:16,400 --> 00:05:18,880
want to be with that cloud vendor

144
00:05:18,080 --> 00:05:20,800
anymore

145
00:05:18,880 --> 00:05:22,639
or you might find that you're writing

146
00:05:20,800 --> 00:05:25,360
for customers who want to

147
00:05:22,639 --> 00:05:27,280
be on different clouds you've got a bit

148
00:05:25,360 --> 00:05:30,320
of a problem so

149
00:05:27,280 --> 00:05:32,239
it can be a cage it's a very nice cage

150
00:05:30,320 --> 00:05:33,919
but i would make sure that you know

151
00:05:32,240 --> 00:05:35,680
you've got enough room in there before

152
00:05:33,919 --> 00:05:37,440
you get in behind yourself and close the

153
00:05:35,680 --> 00:05:40,160
door

154
00:05:37,440 --> 00:05:42,000
and i've been involved with serverless

155
00:05:40,160 --> 00:05:45,120
now for

156
00:05:42,000 --> 00:05:47,120
two two and a half years and

157
00:05:45,120 --> 00:05:49,039
in that time i've come across people

158
00:05:47,120 --> 00:05:51,199
who've been concerned about all of these

159
00:05:49,039 --> 00:05:52,639
different freedoms so portability that

160
00:05:51,199 --> 00:05:55,240
ability to move between

161
00:05:52,639 --> 00:05:56,560
you know clouds and on-premises

162
00:05:55,240 --> 00:05:58,560
decentralization

163
00:05:56,560 --> 00:06:00,720
people who say specifically i want to

164
00:05:58,560 --> 00:06:02,720
run across multiple clouds in case one

165
00:06:00,720 --> 00:06:05,280
has a problem

166
00:06:02,720 --> 00:06:07,199
um packaging yeah they might choose to

167
00:06:05,280 --> 00:06:09,119
say i want to package

168
00:06:07,199 --> 00:06:11,919
my cloud functions in the same way that

169
00:06:09,120 --> 00:06:14,720
i package my micro services

170
00:06:11,919 --> 00:06:16,159
local testing the ability to actually

171
00:06:14,720 --> 00:06:19,280
test your stuff

172
00:06:16,160 --> 00:06:21,360
locally and see what's going on

173
00:06:19,280 --> 00:06:23,119
and one that led me in which was

174
00:06:21,360 --> 00:06:25,759
language

175
00:06:23,120 --> 00:06:28,000
because my favorite language is ruby and

176
00:06:25,759 --> 00:06:29,680
two and a half years ago if you went to

177
00:06:28,000 --> 00:06:31,440
you know write serverless functions you

178
00:06:29,680 --> 00:06:34,479
wanted to write them in ruby

179
00:06:31,440 --> 00:06:36,960
um there was very little

180
00:06:34,479 --> 00:06:37,680
out there that would let you do it so i

181
00:06:36,960 --> 00:06:40,479
started

182
00:06:37,680 --> 00:06:42,479
looking around for something and i came

183
00:06:40,479 --> 00:06:43,280
across the fn project which was one of

184
00:06:42,479 --> 00:06:46,880
the few that

185
00:06:43,280 --> 00:06:49,119
treated ruby as a first-class citizen

186
00:06:46,880 --> 00:06:50,159
so you can get fm project at fm

187
00:06:49,120 --> 00:06:51,440
project.io

188
00:06:50,160 --> 00:06:53,840
and that will give you a link across to

189
00:06:51,440 --> 00:06:56,880
github and a whole bunch of guides

190
00:06:53,840 --> 00:06:59,198
it's a serverless platform it is

191
00:06:56,880 --> 00:07:02,000
container based

192
00:06:59,199 --> 00:07:04,080
it's open source apache 2.0 it's part of

193
00:07:02,000 --> 00:07:07,919
the cncf landscape and has a

194
00:07:04,080 --> 00:07:07,919
representation with cncf

195
00:07:08,160 --> 00:07:14,160
and what we do is we model functions

196
00:07:11,599 --> 00:07:15,520
as containers so you take the function

197
00:07:14,160 --> 00:07:17,759
and its dependency

198
00:07:15,520 --> 00:07:18,799
and you create a self-contained docker

199
00:07:17,759 --> 00:07:21,680
image

200
00:07:18,800 --> 00:07:22,479
and then when it's invoked you're going

201
00:07:21,680 --> 00:07:25,199
to get that

202
00:07:22,479 --> 00:07:26,800
container stood up and it will run and

203
00:07:25,199 --> 00:07:29,919
then it will go away

204
00:07:26,800 --> 00:07:31,759
that's ephemeral it's also a good reason

205
00:07:29,919 --> 00:07:33,520
to write make your function stateless

206
00:07:31,759 --> 00:07:35,360
because if you write something inside

207
00:07:33,520 --> 00:07:38,960
the container on your next invocation

208
00:07:35,360 --> 00:07:38,960
you shouldn't expect to find it there

209
00:07:39,039 --> 00:07:42,400
and the good news is it'll run on any

210
00:07:41,680 --> 00:07:43,840
cloud

211
00:07:42,400 --> 00:07:46,400
as long as that cloud will let you run

212
00:07:43,840 --> 00:07:49,198
docker it will run on premises

213
00:07:46,400 --> 00:07:50,080
or you can run it on your laptop in fact

214
00:07:49,199 --> 00:07:53,440
anywhere

215
00:07:50,080 --> 00:07:56,878
that you have installed docker

216
00:07:53,440 --> 00:07:58,719
so if you go to the site and you

217
00:07:56,879 --> 00:08:00,080
look at the guides you'll get an install

218
00:07:58,720 --> 00:08:02,800
guide and there'll be a curl

219
00:08:00,080 --> 00:08:04,479
script you can run if you're on linux

220
00:08:02,800 --> 00:08:06,319
and then you can go and

221
00:08:04,479 --> 00:08:08,159
after that's all finished you run fn

222
00:08:06,319 --> 00:08:09,919
start minus d

223
00:08:08,160 --> 00:08:11,039
it'll tell you don't use that for

224
00:08:09,919 --> 00:08:12,400
production because you're supposed to

225
00:08:11,039 --> 00:08:14,240
use a helm chart

226
00:08:12,400 --> 00:08:15,599
if you because production it should be

227
00:08:14,240 --> 00:08:17,680
on kubernetes

228
00:08:15,599 --> 00:08:21,039
um if you run version you should get

229
00:08:17,680 --> 00:08:23,360
back as client version a server version

230
00:08:21,039 --> 00:08:26,000
if you're on windows i know some people

231
00:08:23,360 --> 00:08:29,840
who run this on windows subsystem

232
00:08:26,000 --> 00:08:31,280
for linux um i've not tried that myself

233
00:08:29,840 --> 00:08:33,519
you can run it on windows on a

234
00:08:31,280 --> 00:08:35,439
virtualbox vm

235
00:08:33,519 --> 00:08:37,679
mac world is even easier you just go

236
00:08:35,440 --> 00:08:39,519
brew install fn

237
00:08:37,679 --> 00:08:41,199
and again you come down you do fn

238
00:08:39,519 --> 00:08:44,000
version you should get the two

239
00:08:41,200 --> 00:08:44,000
and do the start

240
00:08:44,240 --> 00:08:48,560
ah that's right so now we've got it

241
00:08:46,000 --> 00:08:49,279
installed um we want to create our first

242
00:08:48,560 --> 00:08:52,479
function

243
00:08:49,279 --> 00:08:54,959
so you do fn init

244
00:08:52,480 --> 00:08:55,760
minus minus runtime if you're me you go

245
00:08:54,959 --> 00:08:58,399
ruby

246
00:08:55,760 --> 00:09:00,240
and then you give it a function name and

247
00:08:58,399 --> 00:09:00,800
it creates a function in the directory

248
00:09:00,240 --> 00:09:03,440
with the

249
00:09:00,800 --> 00:09:05,279
name that you gave it and so you get a

250
00:09:03,440 --> 00:09:07,360
boilerplate function

251
00:09:05,279 --> 00:09:09,360
and because it's cloud native there's a

252
00:09:07,360 --> 00:09:11,200
yaml file created for you as well

253
00:09:09,360 --> 00:09:13,680
because it can't be cloud native unless

254
00:09:11,200 --> 00:09:17,600
there's some yaml

255
00:09:13,680 --> 00:09:19,279
so we have a look at our function we've

256
00:09:17,600 --> 00:09:21,440
got require fdk

257
00:09:19,279 --> 00:09:23,120
which is function development kit and

258
00:09:21,440 --> 00:09:25,760
then we have a boilerplate

259
00:09:23,120 --> 00:09:27,040
hello world function will be generated

260
00:09:25,760 --> 00:09:29,439
for you

261
00:09:27,040 --> 00:09:31,519
so def my function context is like

262
00:09:29,440 --> 00:09:33,200
metadata around the call

263
00:09:31,519 --> 00:09:35,200
and the inputs are actually the input

264
00:09:33,200 --> 00:09:37,040
you've been given

265
00:09:35,200 --> 00:09:38,560
and then that's passed to the handle

266
00:09:37,040 --> 00:09:40,160
method of the fdk

267
00:09:38,560 --> 00:09:41,599
you point it at the function and it'll

268
00:09:40,160 --> 00:09:43,920
go and run and the func

269
00:09:41,600 --> 00:09:46,160
yaml just carries some data about the

270
00:09:43,920 --> 00:09:47,839
file in particular the entry point we

271
00:09:46,160 --> 00:09:51,519
say when the container comes up it's

272
00:09:47,839 --> 00:09:55,120
going to run ruby funk rb

273
00:09:51,519 --> 00:09:55,680
so what we've created is our function

274
00:09:55,120 --> 00:09:58,000
code

275
00:09:55,680 --> 00:09:59,120
inside a function container usually

276
00:09:58,000 --> 00:10:02,480
sitting on top

277
00:09:59,120 --> 00:10:04,880
of the fdk and the

278
00:10:02,480 --> 00:10:06,800
fdks they just basically make it a lot

279
00:10:04,880 --> 00:10:09,120
easier for you to write functions

280
00:10:06,800 --> 00:10:10,800
you include the gem or the library or

281
00:10:09,120 --> 00:10:12,320
the package whatever your language calls

282
00:10:10,800 --> 00:10:13,760
that kind of thing

283
00:10:12,320 --> 00:10:16,320
write the function to the functioned

284
00:10:13,760 --> 00:10:17,360
interface and the fdk provides input

285
00:10:16,320 --> 00:10:19,920
data to the function

286
00:10:17,360 --> 00:10:21,760
and writes the output and the errors and

287
00:10:19,920 --> 00:10:25,040
we have these fdks

288
00:10:21,760 --> 00:10:25,040
available out the box

289
00:10:25,519 --> 00:10:33,200
right come on quickly

290
00:10:29,360 --> 00:10:36,880
damn thing

291
00:10:33,200 --> 00:10:38,560
right ruby fdk hmm what happens if you

292
00:10:36,880 --> 00:10:41,360
make helpful suggestions on an open

293
00:10:38,560 --> 00:10:41,359
source project

294
00:10:41,839 --> 00:10:46,320
there yeah and then the person who the

295
00:10:44,160 --> 00:10:50,000
person who started it left so i

296
00:10:46,320 --> 00:10:52,480
kind of am the ruby fdk maintainer um

297
00:10:50,000 --> 00:10:53,600
so what happens all the fdks work pretty

298
00:10:52,480 --> 00:10:56,399
much the same way

299
00:10:53,600 --> 00:10:56,959
the container comes up the fdk opens a

300
00:10:56,399 --> 00:10:59,360
socket

301
00:10:56,959 --> 00:11:01,680
the fn service connects to the socket

302
00:10:59,360 --> 00:11:04,320
and then we get past the input

303
00:11:01,680 --> 00:11:06,479
it's passed as http over the sockets

304
00:11:04,320 --> 00:11:08,399
which we call http stream

305
00:11:06,480 --> 00:11:09,680
we execute the function giving it the

306
00:11:08,399 --> 00:11:12,640
input and the context

307
00:11:09,680 --> 00:11:13,839
right back on http stream errors are

308
00:11:12,640 --> 00:11:17,040
written to standard error

309
00:11:13,839 --> 00:11:18,720
which then goes to syslog you're not

310
00:11:17,040 --> 00:11:20,959
playing are you

311
00:11:18,720 --> 00:11:22,480
if you don't have an fdk it's not

312
00:11:20,959 --> 00:11:23,439
actually a problem because it's docker

313
00:11:22,480 --> 00:11:25,760
based

314
00:11:23,440 --> 00:11:27,519
if you run fn in it in a directory with

315
00:11:25,760 --> 00:11:28,399
a docker file in it it will assume you

316
00:11:27,519 --> 00:11:30,640
want to build

317
00:11:28,399 --> 00:11:32,000
a function out of that docker file so

318
00:11:30,640 --> 00:11:32,800
you can either bring your own docker

319
00:11:32,000 --> 00:11:35,120
file

320
00:11:32,800 --> 00:11:37,199
or you can template so bring your own

321
00:11:35,120 --> 00:11:41,200
image

322
00:11:37,200 --> 00:11:41,680
and we also have a facility called hot

323
00:11:41,200 --> 00:11:43,120
wrap

324
00:11:41,680 --> 00:11:45,599
which is if you've got a command line

325
00:11:43,120 --> 00:11:47,440
program and you want to just turn that

326
00:11:45,600 --> 00:11:47,920
into a function without doing too much

327
00:11:47,440 --> 00:11:49,760
work

328
00:11:47,920 --> 00:11:51,519
you include the hot rack binary in the

329
00:11:49,760 --> 00:11:52,160
docker file and make that the entry

330
00:11:51,519 --> 00:11:54,240
point

331
00:11:52,160 --> 00:11:55,279
and tell it to go and run that and it

332
00:11:54,240 --> 00:11:58,160
will take the

333
00:11:55,279 --> 00:12:00,079
input feed it into standard input of the

334
00:11:58,160 --> 00:12:01,680
command line program and take the output

335
00:12:00,079 --> 00:12:05,040
back on standard out and then

336
00:12:01,680 --> 00:12:07,680
ship it back out again um

337
00:12:05,040 --> 00:12:09,599
so now we've created our function we

338
00:12:07,680 --> 00:12:11,519
need to deploy it so we create an

339
00:12:09,600 --> 00:12:13,680
application

340
00:12:11,519 --> 00:12:15,600
and then we do the deploy telling it

341
00:12:13,680 --> 00:12:17,040
which app it's going to go to

342
00:12:15,600 --> 00:12:19,120
and then what you'll see is it will do a

343
00:12:17,040 --> 00:12:20,959
multi-stage build and push it to your

344
00:12:19,120 --> 00:12:24,320
docker registry it could be yours in

345
00:12:20,959 --> 00:12:27,119
this case it's docker hub

346
00:12:24,320 --> 00:12:28,639
and then your functions created you

347
00:12:27,120 --> 00:12:30,320
might decide that you don't actually

348
00:12:28,639 --> 00:12:30,639
want to push it to a registry so if

349
00:12:30,320 --> 00:12:32,240
you're

350
00:12:30,639 --> 00:12:33,600
sitting on a train or something like

351
00:12:32,240 --> 00:12:34,639
that you don't really want to be pushing

352
00:12:33,600 --> 00:12:36,720
to docker hub

353
00:12:34,639 --> 00:12:38,320
in which case you say deploy minus minus

354
00:12:36,720 --> 00:12:39,360
local it but does the build of the

355
00:12:38,320 --> 00:12:41,040
container

356
00:12:39,360 --> 00:12:43,360
but doesn't actually push it anywhere

357
00:12:41,040 --> 00:12:43,360
else

358
00:12:43,600 --> 00:12:46,800
and then you want to invoke it so from

359
00:12:45,680 --> 00:12:51,040
the command line

360
00:12:46,800 --> 00:12:52,800
fn invoke fosdem hello hello world

361
00:12:51,040 --> 00:12:54,399
now obviously you're not going to be

362
00:12:52,800 --> 00:12:55,920
invoking it from the command line most

363
00:12:54,399 --> 00:12:56,639
the time so you can do an inspect of

364
00:12:55,920 --> 00:12:58,800
your function

365
00:12:56,639 --> 00:13:00,880
and you get that beautifully memorable

366
00:12:58,800 --> 00:13:02,639
url or come out which is the one that

367
00:13:00,880 --> 00:13:04,560
it's using internally

368
00:13:02,639 --> 00:13:06,320
you also see things like there's an idle

369
00:13:04,560 --> 00:13:09,279
timeout on the function which i'll talk

370
00:13:06,320 --> 00:13:09,279
more about in a sec

371
00:13:09,360 --> 00:13:14,160
and you can do a curl to that url

372
00:13:12,480 --> 00:13:16,480
but it's easier if you can create a more

373
00:13:14,160 --> 00:13:17,040
meaningful url so we have a thing called

374
00:13:16,480 --> 00:13:20,160
create

375
00:13:17,040 --> 00:13:20,800
trigger the only type is http at the

376
00:13:20,160 --> 00:13:23,120
moment

377
00:13:20,800 --> 00:13:24,719
and you can give it hello url and then

378
00:13:23,120 --> 00:13:26,959
you wind up with

379
00:13:24,720 --> 00:13:27,760
a more meaningful trigger end point

380
00:13:26,959 --> 00:13:30,800
which you can hit

381
00:13:27,760 --> 00:13:33,760
and get the same result back

382
00:13:30,800 --> 00:13:35,920
you can also have that created for you

383
00:13:33,760 --> 00:13:39,760
automatically when you do the

384
00:13:35,920 --> 00:13:42,319
init so you say -3 see i'm not biased

385
00:13:39,760 --> 00:13:44,079
i'm including node in this minus trigger

386
00:13:42,320 --> 00:13:46,560
and it will tell it to create there

387
00:13:44,079 --> 00:13:48,399
or you can even just include it in the

388
00:13:46,560 --> 00:13:51,760
func.yaml file for the function

389
00:13:48,399 --> 00:13:55,600
and it will create it for you on deploy

390
00:13:51,760 --> 00:13:56,800
so we've got our function container

391
00:13:55,600 --> 00:13:57,120
we've got our function code we've got

392
00:13:56,800 --> 00:14:00,000
our

393
00:13:57,120 --> 00:14:02,000
fdk that is running in docker it's

394
00:14:00,000 --> 00:14:04,160
actually running in docker in docker so

395
00:14:02,000 --> 00:14:05,279
the fn server itself runs docker

396
00:14:04,160 --> 00:14:08,240
internally

397
00:14:05,279 --> 00:14:09,439
and then within that we run the function

398
00:14:08,240 --> 00:14:11,839
containers

399
00:14:09,440 --> 00:14:13,680
a couple of reasons for that in the

400
00:14:11,839 --> 00:14:16,320
early days it made things a lot more

401
00:14:13,680 --> 00:14:19,199
stable because if something blew up it

402
00:14:16,320 --> 00:14:20,480
we contained the problem um these days

403
00:14:19,199 --> 00:14:23,120
the main reason for that

404
00:14:20,480 --> 00:14:23,600
is that it gives us much more control

405
00:14:23,120 --> 00:14:25,920
over

406
00:14:23,600 --> 00:14:26,800
much less sensitivity to the external

407
00:14:25,920 --> 00:14:28,839
docker version

408
00:14:26,800 --> 00:14:31,040
because we control the internal docker

409
00:14:28,839 --> 00:14:33,680
version

410
00:14:31,040 --> 00:14:35,279
and the actual architecture full

411
00:14:33,680 --> 00:14:38,399
architecture for deployment

412
00:14:35,279 --> 00:14:40,320
um we'd have kubernetes um

413
00:14:38,399 --> 00:14:42,720
on my laptop i just have only ever run

414
00:14:40,320 --> 00:14:45,120
docker docker fn server

415
00:14:42,720 --> 00:14:47,199
function we've got a container registry

416
00:14:45,120 --> 00:14:48,160
a metadata store which holds things like

417
00:14:47,199 --> 00:14:50,719
the end points

418
00:14:48,160 --> 00:14:53,199
and a syslog service for errors okay i'm

419
00:14:50,720 --> 00:14:55,199
going to need to go quicker

420
00:14:53,199 --> 00:14:56,240
when an invocation comes in the request

421
00:14:55,199 --> 00:14:58,079
comes in the fn

422
00:14:56,240 --> 00:14:59,440
server will go and look at the metadata

423
00:14:58,079 --> 00:15:02,800
store say what function

424
00:14:59,440 --> 00:15:04,560
maps to that url have i already got an

425
00:15:02,800 --> 00:15:06,800
instance of that function running

426
00:15:04,560 --> 00:15:08,560
if i haven't well if i have i just give

427
00:15:06,800 --> 00:15:10,880
the work to it if i haven't

428
00:15:08,560 --> 00:15:13,199
then i stand it up if necessary pulling

429
00:15:10,880 --> 00:15:14,880
from the container registry

430
00:15:13,199 --> 00:15:16,639
send the output back to the user

431
00:15:14,880 --> 00:15:19,760
anything that's gone wrong gets written

432
00:15:16,639 --> 00:15:19,760
to the syslog service

433
00:15:20,160 --> 00:15:26,560
so if you raise an exception

434
00:15:24,000 --> 00:15:28,000
then that is going to wind up in the

435
00:15:26,560 --> 00:15:30,239
syslog

436
00:15:28,000 --> 00:15:32,240
um that's a joke don't worry there is

437
00:15:30,240 --> 00:15:34,000
actually a book this is actually a book

438
00:15:32,240 --> 00:15:35,680
prisoner in a toothpaste factory

439
00:15:34,000 --> 00:15:37,440
assuming that you're not a prisoner in a

440
00:15:35,680 --> 00:15:39,199
toothpaste factory but you do want to

441
00:15:37,440 --> 00:15:40,639
get messages to the outside world you

442
00:15:39,199 --> 00:15:42,560
can just write to standard error and

443
00:15:40,639 --> 00:15:44,160
hope that the police are reading the log

444
00:15:42,560 --> 00:15:45,279
and will come and rescue you because

445
00:15:44,160 --> 00:15:47,120
you're being held prisoner in a

446
00:15:45,279 --> 00:15:50,160
toothpaste factory

447
00:15:47,120 --> 00:15:51,839
um i said about the idle timeout well

448
00:15:50,160 --> 00:15:53,600
you were useless anyway

449
00:15:51,839 --> 00:15:55,839
i said about the idle timeout the

450
00:15:53,600 --> 00:15:57,920
functions run at least once

451
00:15:55,839 --> 00:15:59,680
and then it waits for that idle timeout

452
00:15:57,920 --> 00:16:01,680
before terminating

453
00:15:59,680 --> 00:16:03,199
just so if we get a lot of invocations

454
00:16:01,680 --> 00:16:05,439
on the same function you're not having

455
00:16:03,199 --> 00:16:06,479
to pay for the startup cost every single

456
00:16:05,440 --> 00:16:08,720
time

457
00:16:06,480 --> 00:16:12,079
you can configure that up or down your

458
00:16:08,720 --> 00:16:14,160
fdk needs to handle multiple invocations

459
00:16:12,079 --> 00:16:15,519
um or if you're not using one and

460
00:16:14,160 --> 00:16:16,000
writing your own you need to remember

461
00:16:15,519 --> 00:16:17,279
that

462
00:16:16,000 --> 00:16:19,040
and it's another good reason to make

463
00:16:17,279 --> 00:16:20,560
your function stateless because you

464
00:16:19,040 --> 00:16:21,439
don't want dirt hanging around from a

465
00:16:20,560 --> 00:16:24,638
previous

466
00:16:21,440 --> 00:16:27,440
use orchestration

467
00:16:24,639 --> 00:16:28,639
and the functions are quite small so

468
00:16:27,440 --> 00:16:30,160
they're not going to do a great deal

469
00:16:28,639 --> 00:16:32,320
individually so we need a way to

470
00:16:30,160 --> 00:16:34,880
orchestrate them

471
00:16:32,320 --> 00:16:36,639
in fn we have something called flow it's

472
00:16:34,880 --> 00:16:39,439
promises based orchestration

473
00:16:36,639 --> 00:16:40,639
unfortunately for those who like xml and

474
00:16:39,440 --> 00:16:43,360
yaml and things like that

475
00:16:40,639 --> 00:16:45,839
it's not a new dialect of that it's a

476
00:16:43,360 --> 00:16:47,279
nor you know it's java or python

477
00:16:45,839 --> 00:16:49,519
and you use that to compose your

478
00:16:47,279 --> 00:16:52,720
functions together it can be synchronous

479
00:16:49,519 --> 00:16:55,519
asynchronous in series in parallel

480
00:16:52,720 --> 00:16:57,120
and it's written in your code as a

481
00:16:55,519 --> 00:16:58,800
function and you deploy it within the

482
00:16:57,120 --> 00:17:01,199
app as a function

483
00:16:58,800 --> 00:17:03,199
only your good sense stops you putting

484
00:17:01,199 --> 00:17:04,079
business logic into the function

485
00:17:03,199 --> 00:17:06,159
remember

486
00:17:04,079 --> 00:17:07,760
the flow is supposed to be a conductor

487
00:17:06,160 --> 00:17:09,439
not an instrumentalist if you start

488
00:17:07,760 --> 00:17:11,359
getting it to do both at once things

489
00:17:09,439 --> 00:17:14,400
will go wrong

490
00:17:11,359 --> 00:17:18,159
um right i think i've got just time

491
00:17:14,400 --> 00:17:18,160
possibly for some shakespeare

492
00:17:19,599 --> 00:17:24,958
there is always time for shakespeare so

493
00:17:22,559 --> 00:17:24,959
fn

494
00:17:25,199 --> 00:17:27,760
comedy

495
00:17:28,319 --> 00:17:33,840
well let's hope so

496
00:17:34,799 --> 00:17:41,918
so what i have is um this on bit bucket

497
00:17:38,880 --> 00:17:43,200
um i've taken uh shakespeare's comedy as

498
00:17:41,919 --> 00:17:45,919
you like it i've come up with all the

499
00:17:43,200 --> 00:17:46,559
different functions that are required

500
00:17:45,919 --> 00:17:48,810
for the

501
00:17:46,559 --> 00:17:51,889
uh play to be performed

502
00:17:48,810 --> 00:17:51,889
[Music]

503
00:17:52,080 --> 00:17:55,280
well got the right result where that was

504
00:17:54,799 --> 00:18:01,840
it that's

505
00:17:55,280 --> 00:18:01,840
it um so if you look at a flow

506
00:18:12,400 --> 00:18:15,760
come on that yep

507
00:18:16,080 --> 00:18:21,280
so what we see in here is there's the

508
00:18:19,520 --> 00:18:23,039
this is this is the action of the play

509
00:18:21,280 --> 00:18:24,799
various characters are added

510
00:18:23,039 --> 00:18:26,240
and then we invoke different things they

511
00:18:24,799 --> 00:18:27,600
get disguised

512
00:18:26,240 --> 00:18:30,000
and at the end of the day they should

513
00:18:27,600 --> 00:18:33,120
all preferably

514
00:18:30,000 --> 00:18:35,120
have a happy ending and get married and

515
00:18:33,120 --> 00:18:37,039
one two three four yes we've had four

516
00:18:35,120 --> 00:18:39,678
weddings and no funerals

517
00:18:37,039 --> 00:18:39,679
so um

518
00:18:40,960 --> 00:18:44,640
with apologies to shakespeare yes so

519
00:18:43,120 --> 00:18:46,559
serverless it's abstracted

520
00:18:44,640 --> 00:18:48,320
infrastructure on top of which we run

521
00:18:46,559 --> 00:18:50,559
ephemeral functions for

522
00:18:48,320 --> 00:18:52,320
higher productivity and lower costs but

523
00:18:50,559 --> 00:18:54,399
you should be aware of lock-in

524
00:18:52,320 --> 00:18:57,200
and you have an option you don't have to

525
00:18:54,400 --> 00:18:59,760
just go with aws or azure or google

526
00:18:57,200 --> 00:19:01,679
and be locked into the cloud as well as

527
00:18:59,760 --> 00:19:04,160
the platform

528
00:19:01,679 --> 00:19:04,720
fm project is an open source serverless

529
00:19:04,160 --> 00:19:06,720
platform

530
00:19:04,720 --> 00:19:08,720
it's container based you can write

531
00:19:06,720 --> 00:19:09,039
functions in any language you can run it

532
00:19:08,720 --> 00:19:11,679
in

533
00:19:09,039 --> 00:19:14,160
any cloud or on premises or on your

534
00:19:11,679 --> 00:19:14,160
laptop

535
00:19:14,240 --> 00:19:17,440
questions i guess i've got a minute or

536
00:19:16,480 --> 00:19:19,280
two

537
00:19:17,440 --> 00:19:21,039
otherwise grab me afterwards i'm really

538
00:19:19,280 --> 00:19:25,840
easy to convince to talk with beer or

539
00:19:21,039 --> 00:19:25,840
tweet me at you and slater

540
00:19:31,200 --> 00:19:38,400
we are we were looking at crds

541
00:19:36,080 --> 00:19:39,918
i would have to go and check because

542
00:19:38,400 --> 00:19:42,240
actually most of the time

543
00:19:39,919 --> 00:19:43,760
as i said i don't run com i don't run it

544
00:19:42,240 --> 00:19:46,559
on kubernetes i just

545
00:19:43,760 --> 00:19:46,559
run it on docker

546
00:19:46,799 --> 00:19:49,760
anymore for any more

547
00:19:56,000 --> 00:20:00,720
uh the question was how do you connect

548
00:19:58,320 --> 00:20:03,120
such a function to the database

549
00:20:00,720 --> 00:20:03,919
and what well there's a couple of ways

550
00:20:03,120 --> 00:20:06,399
i've seen do

551
00:20:03,919 --> 00:20:07,520
this done uh one i approve of and one i

552
00:20:06,400 --> 00:20:11,200
don't and

553
00:20:07,520 --> 00:20:11,200
you shut up um

554
00:20:11,440 --> 00:20:16,320
it is so i have seen people do things

555
00:20:15,039 --> 00:20:19,600
like wrap a jdbc

556
00:20:16,320 --> 00:20:20,559
driver and credentials into a function

557
00:20:19,600 --> 00:20:23,039
container

558
00:20:20,559 --> 00:20:24,158
and then use that and i just look at

559
00:20:23,039 --> 00:20:26,080
that and think that's

560
00:20:24,159 --> 00:20:27,919
horrible um i don't think the

561
00:20:26,080 --> 00:20:30,559
credentials should be in there

562
00:20:27,919 --> 00:20:32,559
and you're opening you know a jdbc

563
00:20:30,559 --> 00:20:34,399
connection that was designed to be a lot

564
00:20:32,559 --> 00:20:38,080
you know a long-lived thing

565
00:20:34,400 --> 00:20:41,600
um me i would go for a

566
00:20:38,080 --> 00:20:44,320
a rest api of the database if it has one

567
00:20:41,600 --> 00:20:45,199
if not then i would have you know some

568
00:20:44,320 --> 00:20:47,439
either

569
00:20:45,200 --> 00:20:49,120
be sticking stuff into an event service

570
00:20:47,440 --> 00:20:51,520
or a queue which was then going to be

571
00:20:49,120 --> 00:20:53,439
read and polled by the database or just

572
00:20:51,520 --> 00:20:55,360
actually probably if it's me something

573
00:20:53,440 --> 00:20:57,120
with a little bit of ruby and sinatra

574
00:20:55,360 --> 00:20:57,520
that stood in front of the database and

575
00:20:57,120 --> 00:20:59,439
you

576
00:20:57,520 --> 00:21:01,120
send something to it and then it sorts

577
00:20:59,440 --> 00:21:03,840
out writing to the tables and things

578
00:21:01,120 --> 00:21:03,840
appropriately

579
00:21:09,400 --> 00:21:16,109
[Applause]

580
00:21:19,840 --> 00:21:21,918
you

