1
00:00:08,160 --> 00:00:14,080
okay hello

2
00:00:09,200 --> 00:00:17,119
uh my name is alexander maoshov

3
00:00:14,080 --> 00:00:20,080
yeah and

4
00:00:17,119 --> 00:00:20,880
in this talk i'm going to present some

5
00:00:20,080 --> 00:00:23,519
key features

6
00:00:20,880 --> 00:00:24,799
of the kernel for newcomers and

7
00:00:23,519 --> 00:00:26,400
highlight some

8
00:00:24,800 --> 00:00:28,160
new features which have been added

9
00:00:26,400 --> 00:00:30,320
recently for more experienced users

10
00:00:28,160 --> 00:00:32,558
the first question is does somebody here

11
00:00:30,320 --> 00:00:36,880
about opec skate technology

12
00:00:32,558 --> 00:00:40,000
raise your hands up almost one one third

13
00:00:36,880 --> 00:00:40,960
one half okay what is open cascade

14
00:00:40,000 --> 00:00:44,320
technology

15
00:00:40,960 --> 00:00:44,879
uh opec skate technology is a geometric

16
00:00:44,320 --> 00:00:47,680
modeling

17
00:00:44,879 --> 00:00:48,480
library it provides a set of high-level

18
00:00:47,680 --> 00:00:51,440
topological

19
00:00:48,480 --> 00:00:52,800
operators and low-level geometric

20
00:00:51,440 --> 00:00:54,480
algorithms

21
00:00:52,800 --> 00:00:57,199
it uses well-known boundary

22
00:00:54,480 --> 00:01:00,160
representation approach

23
00:00:57,199 --> 00:01:02,320
to store underlying data boundary

24
00:01:00,160 --> 00:01:04,399
representation means that

25
00:01:02,320 --> 00:01:06,320
a three-dimensional model is uh

26
00:01:04,400 --> 00:01:09,920
constructed by set of faces

27
00:01:06,320 --> 00:01:10,798
they bound a model faces are bounded by

28
00:01:09,920 --> 00:01:14,479
edges

29
00:01:10,799 --> 00:01:16,880
edges are bounded by vertices

30
00:01:14,479 --> 00:01:18,640
some development facts the most

31
00:01:16,880 --> 00:01:20,320
important thing here is a permissive

32
00:01:18,640 --> 00:01:24,159
lgpl license

33
00:01:20,320 --> 00:01:26,158
and this is why i'm here of course

34
00:01:24,159 --> 00:01:27,200
moreover there is a special exception

35
00:01:26,159 --> 00:01:30,560
which is taken from

36
00:01:27,200 --> 00:01:33,439
lgpl 3.0 allowing to deal with

37
00:01:30,560 --> 00:01:34,720
object code incorporating material from

38
00:01:33,439 --> 00:01:37,600
header files

39
00:01:34,720 --> 00:01:39,280
some code in templates and headers et

40
00:01:37,600 --> 00:01:43,039
cetera

41
00:01:39,280 --> 00:01:43,600
skate technology is a written in c plus

42
00:01:43,040 --> 00:01:47,360
plus and

43
00:01:43,600 --> 00:01:50,399
available on all major platforms

44
00:01:47,360 --> 00:01:52,840
the actual master branch has nearly 2.5

45
00:01:50,399 --> 00:01:54,399
million lines of code it's quite huge

46
00:01:52,840 --> 00:01:58,479
framework some

47
00:01:54,399 --> 00:02:00,399
technical details foundation classes

48
00:01:58,479 --> 00:02:02,240
are responsible for low level

49
00:02:00,399 --> 00:02:05,439
functionality like

50
00:02:02,240 --> 00:02:08,079
smart pointers collector collections

51
00:02:05,439 --> 00:02:09,359
maybe in some numerical methods modeling

52
00:02:08,080 --> 00:02:12,080
data

53
00:02:09,360 --> 00:02:12,959
defines the set of representable objects

54
00:02:12,080 --> 00:02:17,200
in general

55
00:02:12,959 --> 00:02:19,599
uh we follow the step standard iso 10303

56
00:02:17,200 --> 00:02:20,399
so almost everything that you have in

57
00:02:19,599 --> 00:02:23,519
step from

58
00:02:20,400 --> 00:02:24,319
a modeling point of view you can model

59
00:02:23,520 --> 00:02:26,720
this stuff

60
00:02:24,319 --> 00:02:29,200
using our modeling data directly or

61
00:02:26,720 --> 00:02:31,280
using some conversion techniques

62
00:02:29,200 --> 00:02:32,319
modeling algorithms data exchange and

63
00:02:31,280 --> 00:02:34,720
visualization

64
00:02:32,319 --> 00:02:36,000
will be discussed a bit later

65
00:02:34,720 --> 00:02:38,879
application framework is

66
00:02:36,000 --> 00:02:40,400
a set of tools and methods for rapid

67
00:02:38,879 --> 00:02:42,319
application development it allows to

68
00:02:40,400 --> 00:02:44,080
build your own data model

69
00:02:42,319 --> 00:02:46,079
using undo redo and transaction

70
00:02:44,080 --> 00:02:47,040
mechanism it's some kind of hierarchical

71
00:02:46,080 --> 00:02:50,319
database

72
00:02:47,040 --> 00:02:53,440
of course all this stuff uses our

73
00:02:50,319 --> 00:02:56,720
classes our structure so

74
00:02:53,440 --> 00:02:56,720
this is our way to build

75
00:02:57,120 --> 00:03:01,120
built applications test harness

76
00:03:00,239 --> 00:03:03,840
application

77
00:03:01,120 --> 00:03:06,400
it's a tcl based console application

78
00:03:03,840 --> 00:03:08,319
which reveals oct functionality

79
00:03:06,400 --> 00:03:09,760
almost everything that we have on a

80
00:03:08,319 --> 00:03:14,799
simple smart level

81
00:03:09,760 --> 00:03:14,799
uh is reflected somehow on the tcl level

82
00:03:14,879 --> 00:03:18,319
this application supports a plugin

83
00:03:16,560 --> 00:03:21,760
mechanism so you can

84
00:03:18,319 --> 00:03:22,958
write your own commands to extend its

85
00:03:21,760 --> 00:03:26,239
functionality

86
00:03:22,959 --> 00:03:29,280
we usually use it to test to debug

87
00:03:26,239 --> 00:03:33,599
to analyze to prototype

88
00:03:29,280 --> 00:03:37,280
it's some kind of

89
00:03:33,599 --> 00:03:37,280
how to say testing tool for us

90
00:03:39,840 --> 00:03:44,840
geometric modeling well the set of

91
00:03:43,280 --> 00:03:47,840
geometric algorithms

92
00:03:44,840 --> 00:03:51,440
includes intersection

93
00:03:47,840 --> 00:03:54,640
projection approximation

94
00:03:51,440 --> 00:03:58,560
intersection interpolation algorithms

95
00:03:54,640 --> 00:03:58,559
for instance interpolation algorithm

96
00:03:58,640 --> 00:04:04,000
can accept uh tangents

97
00:04:01,840 --> 00:04:04,879
or parameterization to deal with the

98
00:04:04,000 --> 00:04:07,120
curves form

99
00:04:04,879 --> 00:04:09,200
you know that there are infinite number

100
00:04:07,120 --> 00:04:10,400
of ways to pass a curve for the given

101
00:04:09,200 --> 00:04:12,159
set of points

102
00:04:10,400 --> 00:04:14,879
there should be a criterion to define

103
00:04:12,159 --> 00:04:17,199
one curve from this set

104
00:04:14,879 --> 00:04:18,560
another example of geometric algorithm

105
00:04:17,199 --> 00:04:21,759
is presented on the slide

106
00:04:18,560 --> 00:04:22,400
here you can see the projection of a

107
00:04:21,759 --> 00:04:26,400
curve

108
00:04:22,400 --> 00:04:29,440
to the surface using direction

109
00:04:26,400 --> 00:04:31,520
i have prepared this example using draw

110
00:04:29,440 --> 00:04:33,759
tcl based application so let's take a

111
00:04:31,520 --> 00:04:33,758
look

112
00:04:40,840 --> 00:04:43,840
sorry

113
00:04:44,639 --> 00:04:51,600
yeah here it is bit

114
00:04:48,160 --> 00:04:56,080
bigger yeah here we have a block

115
00:04:51,600 --> 00:04:58,000
constructing our inputs

116
00:04:56,080 --> 00:04:59,359
after that we have to convert genetic

117
00:04:58,000 --> 00:05:00,880
objects to their topological

118
00:04:59,360 --> 00:05:01,600
counterparts according to their common

119
00:05:00,880 --> 00:05:04,800
definition

120
00:05:01,600 --> 00:05:08,240
which projects uh curve on the surface

121
00:05:04,800 --> 00:05:09,600
we convert them here here we perform the

122
00:05:08,240 --> 00:05:11,919
projection

123
00:05:09,600 --> 00:05:13,520
what to project where to project

124
00:05:11,919 --> 00:05:17,039
projection direction

125
00:05:13,520 --> 00:05:19,599
here it is and the

126
00:05:17,039 --> 00:05:21,120
variable name to store the result after

127
00:05:19,600 --> 00:05:24,560
that we can display

128
00:05:21,120 --> 00:05:28,000
uh inputs and output

129
00:05:24,560 --> 00:05:30,880
on the screen here you can see our

130
00:05:28,000 --> 00:05:31,919
standard console which is called draw

131
00:05:30,880 --> 00:05:38,880
and here we can

132
00:05:31,919 --> 00:05:53,520
launch this script

133
00:05:38,880 --> 00:05:56,240
and here is the result

134
00:05:53,520 --> 00:05:58,240
uh high-level topological algorithms the

135
00:05:56,240 --> 00:06:01,759
set of topological algorithms

136
00:05:58,240 --> 00:06:06,479
includes boolean algorithm fillet

137
00:06:01,759 --> 00:06:08,960
offset skinning thickening chamfering

138
00:06:06,479 --> 00:06:10,800
maybe something else once again there is

139
00:06:08,960 --> 00:06:15,680
a special demo demonstrating

140
00:06:10,800 --> 00:06:15,680
this functionality so let's take a look

141
00:06:19,039 --> 00:06:24,719
this time we are going to load model

142
00:06:22,319 --> 00:06:27,039
from the hard disk drive

143
00:06:24,720 --> 00:06:28,160
and other argument will be constructed

144
00:06:27,039 --> 00:06:31,919
manually

145
00:06:28,160 --> 00:06:34,960
it will be just a truncated cylinder

146
00:06:31,919 --> 00:06:38,719
after that we will perform

147
00:06:34,960 --> 00:06:42,239
common operation building display

148
00:06:38,720 --> 00:06:43,360
inputs clear scene and display the

149
00:06:42,240 --> 00:06:49,840
result

150
00:06:43,360 --> 00:06:49,840
so okay

151
00:06:55,680 --> 00:06:58,080
cura

152
00:07:00,160 --> 00:07:05,440
our inputs cylinder and well-known nc101

153
00:07:03,680 --> 00:07:10,720
model

154
00:07:05,440 --> 00:07:10,719
and let's see their result

155
00:07:15,039 --> 00:07:18,960
here it is it's a result of common

156
00:07:25,360 --> 00:07:31,039
well visualization is

157
00:07:28,400 --> 00:07:33,919
widow for successful modeling we live in

158
00:07:31,039 --> 00:07:35,759
a three-dimensional world or at least we

159
00:07:33,919 --> 00:07:37,680
feel it three-dimensional visual

160
00:07:35,759 --> 00:07:39,039
feedback gives understanding of what is

161
00:07:37,680 --> 00:07:42,400
going on with your path

162
00:07:39,039 --> 00:07:45,680
assemblies it is helpful to debug

163
00:07:42,400 --> 00:07:49,280
problems of brap data our visualization

164
00:07:45,680 --> 00:07:51,199
engine is capable of displaying

165
00:07:49,280 --> 00:07:54,479
three-dimensional models dimensions

166
00:07:51,199 --> 00:07:56,560
relations and other kinds of engineering

167
00:07:54,479 --> 00:07:58,800
data it uses state-of-the-art

168
00:07:56,560 --> 00:08:00,720
accelerating techniques like

169
00:07:58,800 --> 00:08:01,840
bounding volume hierarchy to achieve

170
00:08:00,720 --> 00:08:06,000
high interactivity

171
00:08:01,840 --> 00:08:10,638
and frame rate on huge models

172
00:08:06,000 --> 00:08:13,199
you know that there are two major

173
00:08:10,639 --> 00:08:14,879
pairings in visualization rasterization

174
00:08:13,199 --> 00:08:17,840
and ray tracing the open cascade

175
00:08:14,879 --> 00:08:21,039
technology supports both of them

176
00:08:17,840 --> 00:08:24,080
uh usually retracing is used to produce

177
00:08:21,039 --> 00:08:24,560
photorealistic images in our previous

178
00:08:24,080 --> 00:08:27,039
demo

179
00:08:24,560 --> 00:08:29,759
we have seen a rasterization pipeline

180
00:08:27,039 --> 00:08:34,240
now it's time to

181
00:08:29,759 --> 00:08:34,240
to get some understanding about rate

182
00:08:38,839 --> 00:08:45,120
racing

183
00:08:41,760 --> 00:08:48,240
our next script once again load model

184
00:08:45,120 --> 00:08:51,600
prepare scene here we want to

185
00:08:48,240 --> 00:08:52,720
set a background color we want to enable

186
00:08:51,600 --> 00:08:55,200
lights

187
00:08:52,720 --> 00:08:56,399
to see reflections and shadows we want

188
00:08:55,200 --> 00:08:58,320
to set a material

189
00:08:56,399 --> 00:08:59,600
to see reflections and shadows and here

190
00:08:58,320 --> 00:09:03,040
we want to enable

191
00:08:59,600 --> 00:09:09,839
retracing mode and enable

192
00:09:03,040 --> 00:09:09,839
shadows or selections and anti-aliasing

193
00:09:15,360 --> 00:09:19,920
here it is you can see shadows

194
00:09:20,839 --> 00:09:25,920
reflections

195
00:09:22,880 --> 00:09:27,839
and this script is quite small

196
00:09:25,920 --> 00:09:29,120
for instance you can add textures

197
00:09:27,839 --> 00:09:32,880
materials

198
00:09:29,120 --> 00:09:37,839
etc so to make it really photorealistic

199
00:09:32,880 --> 00:09:37,839
it's just a small demo

200
00:09:42,640 --> 00:09:45,360
date exchange

201
00:09:47,360 --> 00:09:55,440
well data exchange is crucial

202
00:09:50,880 --> 00:09:58,720
to supporting a third-party software

203
00:09:55,440 --> 00:10:00,880
uh ask yourself how many cut software do

204
00:09:58,720 --> 00:10:04,480
you use every day personally i keep open

205
00:10:00,880 --> 00:10:06,720
three or four pro programs

206
00:10:04,480 --> 00:10:08,640
in my opinion it's almost impossible to

207
00:10:06,720 --> 00:10:10,720
imagine a software that does the entire

208
00:10:08,640 --> 00:10:14,079
job so we have to

209
00:10:10,720 --> 00:10:18,720
uh data exchange with our softwares

210
00:10:14,079 --> 00:10:18,719
our step and i just translators

211
00:10:18,800 --> 00:10:22,479
are able to deal not only with

212
00:10:22,640 --> 00:10:25,839
with paths and assemblies but they can

213
00:10:25,040 --> 00:10:32,399
deal with

214
00:10:25,839 --> 00:10:35,360
metadata such as colors layers names

215
00:10:32,399 --> 00:10:37,920
popular mesh formats like stl are also

216
00:10:35,360 --> 00:10:37,920
supported

217
00:10:41,839 --> 00:10:47,200
other representation schemes like

218
00:10:43,600 --> 00:10:49,920
drawings voxels point clouds wireframe

219
00:10:47,200 --> 00:10:50,640
can be constructed from internal direct

220
00:10:49,920 --> 00:10:52,719
structure

221
00:10:50,640 --> 00:10:54,959
but there are no built-in translator for

222
00:10:52,720 --> 00:10:54,959
them

223
00:10:57,200 --> 00:11:00,720
once again there is a dedicated demo

224
00:10:58,959 --> 00:11:03,920
demonstrating how we can

225
00:11:00,720 --> 00:11:06,000
create a model colorize faces and

226
00:11:03,920 --> 00:11:15,199
save it on a disk and check it in some

227
00:11:06,000 --> 00:11:17,120
other software

228
00:11:15,200 --> 00:11:18,240
this time we are not going to use a

229
00:11:17,120 --> 00:11:19,839
predefined script

230
00:11:18,240 --> 00:11:21,680
the opencascade technology has some

231
00:11:19,839 --> 00:11:24,240
built-in samples

232
00:11:21,680 --> 00:11:26,000
this time we are going to use built-in

233
00:11:24,240 --> 00:11:29,279
sample

234
00:11:26,000 --> 00:11:34,000
just type run sample

235
00:11:29,279 --> 00:11:34,000
here we have a pencil model

236
00:11:34,880 --> 00:11:42,800
it contains two solids we'll see it

237
00:11:39,279 --> 00:11:46,640
and after that we can write a step file

238
00:11:42,800 --> 00:11:46,640
what to store where to store

239
00:11:48,959 --> 00:11:57,839
and we can open it in other software for

240
00:11:51,600 --> 00:11:57,839
instance in free card

241
00:12:10,320 --> 00:12:13,600
that's it yeah well i know that fricat

242
00:12:13,040 --> 00:12:16,639
uses

243
00:12:13,600 --> 00:12:19,680
our step translator but

244
00:12:16,639 --> 00:12:25,839
there is no good free

245
00:12:19,680 --> 00:12:25,839
step reader unfortunately

246
00:12:30,480 --> 00:12:34,720
well there are some nice features uh

247
00:12:32,959 --> 00:12:37,119
which have been added in a recent

248
00:12:34,720 --> 00:12:39,279
uh late in the latest releases and i

249
00:12:37,120 --> 00:12:43,440
would like to attract your attention

250
00:12:39,279 --> 00:12:45,920
to them 7.0

251
00:12:43,440 --> 00:12:47,040
we migrated from our own build system to

252
00:12:45,920 --> 00:12:49,760
the well-known

253
00:12:47,040 --> 00:12:50,319
cmake build system i have to be polite

254
00:12:49,760 --> 00:12:52,000
here

255
00:12:50,320 --> 00:12:53,920
but when i enter to the company several

256
00:12:52,000 --> 00:12:55,440
years ago and i faced with our build

257
00:12:53,920 --> 00:12:58,000
system

258
00:12:55,440 --> 00:12:59,600
well i could say it was unfriendly to

259
00:12:58,000 --> 00:13:03,200
newcomers

260
00:12:59,600 --> 00:13:05,200
i have to be polite but cmake offers

261
00:13:03,200 --> 00:13:08,000
the unified pipeline which is fruitful

262
00:13:05,200 --> 00:13:11,279
for developers and the community

263
00:13:08,000 --> 00:13:14,720
our step translator was extended by

264
00:13:11,279 --> 00:13:16,079
application protocol 242

265
00:13:14,720 --> 00:13:17,920
which deals with the product and

266
00:13:16,079 --> 00:13:20,800
manufacturing information so you can

267
00:13:17,920 --> 00:13:23,680
write and read this kind of data

268
00:13:20,800 --> 00:13:23,680
7.1

269
00:13:24,079 --> 00:13:28,079
the opencascade technology usually use

270
00:13:26,720 --> 00:13:31,120
bounding boxes to

271
00:13:28,079 --> 00:13:33,519
perform fast intersection checks

272
00:13:31,120 --> 00:13:35,600
sometimes especially in case b splines

273
00:13:33,519 --> 00:13:36,560
these axis align bounding boxes they are

274
00:13:35,600 --> 00:13:39,920
much bigger than

275
00:13:36,560 --> 00:13:42,880
nominal geometry and there's a problem

276
00:13:39,920 --> 00:13:45,279
for instance when we when we can uh

277
00:13:42,880 --> 00:13:49,199
compute bounding box once and cache it

278
00:13:45,279 --> 00:13:52,160
it's much uh more interesting to

279
00:13:49,199 --> 00:13:52,479
build optimal bounding box then build

280
00:13:52,160 --> 00:13:55,600
air

281
00:13:52,480 --> 00:13:55,600
ordinary bounding box

282
00:13:56,320 --> 00:14:00,000
unfortunately we sacrificed performance

283
00:13:59,440 --> 00:14:03,519
for that

284
00:14:00,000 --> 00:14:07,440
of course calculation of optimal bubble

285
00:14:03,519 --> 00:14:07,440
box requires more efforts

286
00:14:07,519 --> 00:14:11,279
uh is manipulator class suits for

287
00:14:10,399 --> 00:14:13,440
interactive

288
00:14:11,279 --> 00:14:15,360
transformation of objects on the scene

289
00:14:13,440 --> 00:14:16,079
once again there is a dedicated demo for

290
00:14:15,360 --> 00:14:18,800
that

291
00:14:16,079 --> 00:14:18,800
let's take a look

292
00:14:19,760 --> 00:14:26,319
once again we load model we display it

293
00:14:24,079 --> 00:14:27,839
and we create a manipulator and attach

294
00:14:26,320 --> 00:14:31,839
it to the model

295
00:14:27,839 --> 00:14:31,839
that's all

296
00:14:40,240 --> 00:14:47,440
so we can move along free

297
00:14:43,600 --> 00:14:51,279
global access xy that

298
00:14:47,440 --> 00:14:54,800
we can rotate we can

299
00:14:51,279 --> 00:14:54,800
care we can scale

300
00:14:57,680 --> 00:15:00,079
that's it

301
00:15:06,880 --> 00:15:13,439
7.2 the compiled header support

302
00:15:10,160 --> 00:15:15,600
significantly compilation speed on my

303
00:15:13,440 --> 00:15:17,199
desktop it reduces compilation from 15

304
00:15:15,600 --> 00:15:18,160
minutes to 10 minutes i think it is

305
00:15:17,199 --> 00:15:20,560
worth to enable

306
00:15:18,160 --> 00:15:21,519
it when you don't want to modify oct

307
00:15:20,560 --> 00:15:26,800
sources

308
00:15:21,519 --> 00:15:29,279
it's fruitful for community i think uh

309
00:15:26,800 --> 00:15:30,719
partition operator is a special kind of

310
00:15:29,279 --> 00:15:34,480
boo of the boolean algorithm

311
00:15:30,720 --> 00:15:36,800
which adds all splits

312
00:15:34,480 --> 00:15:38,560
of the first argument to the result but

313
00:15:36,800 --> 00:15:40,959
it doesn't include anything from the

314
00:15:38,560 --> 00:15:42,800
second argument to the result

315
00:15:40,959 --> 00:15:44,959
it's hard to explain it so let's take a

316
00:15:42,800 --> 00:15:44,959
look

317
00:15:47,839 --> 00:15:51,600
here once again the same model and we

318
00:15:50,480 --> 00:15:55,839
want to slice it

319
00:15:51,600 --> 00:15:55,839
using set of parallel faces

320
00:15:56,240 --> 00:16:02,959
after that the block related to

321
00:15:59,920 --> 00:16:05,599
partition operator construction

322
00:16:02,959 --> 00:16:09,839
displaying inputs and result so let's

323
00:16:05,600 --> 00:16:09,839
take a look

324
00:16:22,639 --> 00:16:37,839
ah sorry i need to launch the stuff

325
00:16:26,880 --> 00:16:37,839
once again

326
00:16:41,690 --> 00:16:48,880
[Music]

327
00:16:44,639 --> 00:16:48,880
yeah i need to clear my previous stuff

328
00:16:49,660 --> 00:16:52,780
[Music]

329
00:16:53,279 --> 00:16:56,079
yeah that's it

330
00:16:58,079 --> 00:17:01,920
so actually initially we have uh one

331
00:17:01,199 --> 00:17:04,559
solid

332
00:17:01,920 --> 00:17:05,760
and we want to slice it into several

333
00:17:04,559 --> 00:17:09,039
pieces

334
00:17:05,760 --> 00:17:09,039
by this set of faces

335
00:17:10,480 --> 00:17:15,760
we clear we display result

336
00:17:17,280 --> 00:17:24,959
here you can see some lines

337
00:17:21,520 --> 00:17:26,160
on the screen they mean that we have

338
00:17:24,959 --> 00:17:29,039
several

339
00:17:26,160 --> 00:17:30,320
solids in underlying models and we can

340
00:17:29,039 --> 00:17:34,080
check it

341
00:17:30,320 --> 00:17:34,799
nbs number of shapes so initially we

342
00:17:34,080 --> 00:17:38,799
have

343
00:17:34,799 --> 00:17:38,799
one solid in the result

344
00:17:39,919 --> 00:17:47,840
we have nine solids

345
00:17:52,280 --> 00:17:57,918
7.3

346
00:17:54,799 --> 00:17:59,679
special algorithm for features removal

347
00:17:57,919 --> 00:18:02,720
for feature remove was added

348
00:17:59,679 --> 00:18:07,760
this algorithm can remove features like

349
00:18:02,720 --> 00:18:11,200
gaps health protrusions fillets chamfers

350
00:18:07,760 --> 00:18:12,640
also this release introduces oriented

351
00:18:11,200 --> 00:18:15,760
bounding box

352
00:18:12,640 --> 00:18:18,480
the id is the same as a

353
00:18:15,760 --> 00:18:19,039
optimal bounding box and once again i

354
00:18:18,480 --> 00:18:23,440
have

355
00:18:19,039 --> 00:18:23,440
i have a demo for their functionality

356
00:18:25,039 --> 00:18:29,840
clear scene

357
00:18:31,679 --> 00:18:34,960
here we have a model it is access

358
00:18:34,080 --> 00:18:37,600
aligned

359
00:18:34,960 --> 00:18:39,200
so we want to rotate it along that axis

360
00:18:37,600 --> 00:18:41,760
to 45 degrees

361
00:18:39,200 --> 00:18:42,880
to make it uh to make axis align

362
00:18:41,760 --> 00:18:46,240
bounding box bigger

363
00:18:42,880 --> 00:18:48,880
and after that we can construct uh

364
00:18:46,240 --> 00:18:50,480
axis align bounding box and oriented

365
00:18:48,880 --> 00:18:54,840
bounding box

366
00:18:50,480 --> 00:18:57,840
and after that we can display inputs and

367
00:18:54,840 --> 00:18:57,840
outputs

368
00:19:02,880 --> 00:19:06,640
yeah so you can see that the bigger one

369
00:19:06,320 --> 00:19:10,879
is

370
00:19:06,640 --> 00:19:13,679
axis aligned and yellow one is

371
00:19:10,880 --> 00:19:15,760
oriented one it's not absolutely optimal

372
00:19:13,679 --> 00:19:16,000
because it uses triangulation to build

373
00:19:15,760 --> 00:19:20,559
it

374
00:19:16,000 --> 00:19:23,360
so it depends on triangulation quality

375
00:19:20,559 --> 00:19:25,840
but it's much better in this case

376
00:19:23,360 --> 00:19:25,840
nevertheless

377
00:19:29,679 --> 00:19:37,360
and our latest our actual release

378
00:19:33,360 --> 00:19:40,719
7.4 we added two new mesh formats

379
00:19:37,360 --> 00:19:42,639
jltf and opt well actually the

380
00:19:40,720 --> 00:19:43,840
opencascade technology supports four

381
00:19:42,640 --> 00:19:47,600
mesh formats

382
00:19:43,840 --> 00:19:50,000
stl vr ml gltf and opt

383
00:19:47,600 --> 00:19:51,760
well this set is not big but it reduces

384
00:19:50,000 --> 00:19:54,320
the number of third-party companies of

385
00:19:51,760 --> 00:19:56,000
india software you know this annoying

386
00:19:54,320 --> 00:19:59,360
set of third-party companies in their

387
00:19:56,000 --> 00:20:02,880
software it can be extremely huge

388
00:19:59,360 --> 00:20:05,678
and we have finished meshing overhaul

389
00:20:02,880 --> 00:20:08,159
now our meshing algorithm i mean bdf

390
00:20:05,679 --> 00:20:11,120
merchant criminal mesh class

391
00:20:08,159 --> 00:20:13,520
produces much more reliable and robust

392
00:20:11,120 --> 00:20:13,520
result

393
00:20:14,159 --> 00:20:18,400
they there you can see some useful links

394
00:20:17,600 --> 00:20:21,840
on the slide

395
00:20:18,400 --> 00:20:25,120
they contain instructions on how to

396
00:20:21,840 --> 00:20:27,760
compile download and run

397
00:20:25,120 --> 00:20:29,360
the software there is a dedicated form

398
00:20:27,760 --> 00:20:31,200
to ask questions as well

399
00:20:29,360 --> 00:20:32,559
if it is what you are interested in if

400
00:20:31,200 --> 00:20:35,840
it is what you are looking for

401
00:20:32,559 --> 00:20:37,680
then give it a try well

402
00:20:35,840 --> 00:20:45,509
it's questions

403
00:20:37,680 --> 00:20:45,509
[Applause]

404
00:20:47,280 --> 00:20:51,360
do you know time you have a record of

405
00:20:48,960 --> 00:20:54,240
how it compares to the commercial solid

406
00:20:51,360 --> 00:20:56,000
kernels like parasite so that if i've if

407
00:20:54,240 --> 00:20:56,480
i've got something depending on parasite

408
00:20:56,000 --> 00:20:57,919
and you

409
00:20:56,480 --> 00:21:00,840
tell me what the differences are i can

410
00:20:57,919 --> 00:21:03,840
tell whether the differences matter

411
00:21:00,840 --> 00:21:05,678
enough uh what is the difference between

412
00:21:03,840 --> 00:21:07,918
commercial kernels and the free kernel

413
00:21:05,679 --> 00:21:07,919
yeah

414
00:21:09,360 --> 00:21:15,199
unfortunately we don't have an access

415
00:21:11,520 --> 00:21:18,559
for that for other kernels

416
00:21:15,200 --> 00:21:22,559
the only thing we can say here that

417
00:21:18,559 --> 00:21:24,480
our step at iges translators they

418
00:21:22,559 --> 00:21:26,480
i can say that they better they should

419
00:21:24,480 --> 00:21:27,360
be better because we are interested in

420
00:21:26,480 --> 00:21:29,440
uh

421
00:21:27,360 --> 00:21:30,799
step and i just formats because this is

422
00:21:29,440 --> 00:21:33,039
our way to

423
00:21:30,799 --> 00:21:34,480
communicate with other other software

424
00:21:33,039 --> 00:21:36,158
parasolid aces

425
00:21:34,480 --> 00:21:38,159
and other kernels they have their

426
00:21:36,159 --> 00:21:38,559
internal formats and they do not won't

427
00:21:38,159 --> 00:21:45,840
go

428
00:21:38,559 --> 00:21:45,840
outside of them

429
00:21:56,799 --> 00:22:03,280
or if you plan to do that how do we use

430
00:22:00,240 --> 00:22:03,280
open cascade on the web

431
00:22:03,600 --> 00:22:13,039
yes we have some experiments

432
00:22:07,280 --> 00:22:14,559
in that area and usual way is to add

433
00:22:13,039 --> 00:22:15,600
some buildings to the c plus plus

434
00:22:14,559 --> 00:22:18,559
libraries using

435
00:22:15,600 --> 00:22:20,320
javascript languages and call just c

436
00:22:18,559 --> 00:22:23,918
plus plus code

437
00:22:20,320 --> 00:22:24,480
i assume that i want to like visualize a

438
00:22:23,919 --> 00:22:28,080
solid

439
00:22:24,480 --> 00:22:29,840
in the web you can go to our website

440
00:22:28,080 --> 00:22:32,720
to the company i mean companies website

441
00:22:29,840 --> 00:22:35,360
you can see some uh model on the web

442
00:22:32,720 --> 00:22:36,240
so somebody has finished this job but

443
00:22:35,360 --> 00:22:40,000
it's not was

444
00:22:36,240 --> 00:22:41,760
my task

445
00:22:40,000 --> 00:22:43,520
so technically it's possible we have

446
00:22:41,760 --> 00:22:45,840
this experience but how it is done i

447
00:22:43,520 --> 00:22:45,840
don't know

448
00:22:46,080 --> 00:22:50,399
yeah because somebody has finished this

449
00:22:48,640 --> 00:22:50,960
job you can go to our website you can

450
00:22:50,400 --> 00:22:52,559
see that

451
00:22:50,960 --> 00:22:55,679
three dimensional model is displayed on

452
00:22:52,559 --> 00:22:57,360
the screen

453
00:22:55,679 --> 00:22:58,799
can you explain the difference between

454
00:22:57,360 --> 00:23:01,360
open cascade

455
00:22:58,799 --> 00:23:03,120
community yeah what's the difference

456
00:23:01,360 --> 00:23:04,879
between open cascade and open cascade

457
00:23:03,120 --> 00:23:07,120
community edition

458
00:23:04,880 --> 00:23:10,000
open open cascade community edition is a

459
00:23:07,120 --> 00:23:13,199
fork of open cascade

460
00:23:10,000 --> 00:23:16,320
several people started it around

461
00:23:13,200 --> 00:23:19,120
2010 and

462
00:23:16,320 --> 00:23:19,120
they were not

463
00:23:19,600 --> 00:23:26,240
satisfied with our development progress

464
00:23:22,880 --> 00:23:27,360
since this time we came more open to the

465
00:23:26,240 --> 00:23:30,080
community so

466
00:23:27,360 --> 00:23:33,158
open cascade community edition still

467
00:23:30,080 --> 00:23:35,360
uses opencascade

468
00:23:33,159 --> 00:23:38,559
6.9.1 but our

469
00:23:35,360 --> 00:23:42,320
actual version is 7.4 so almost

470
00:23:38,559 --> 00:23:45,760
all users switch to their open cascade

471
00:23:42,320 --> 00:23:45,760
official release let it be

472
00:23:46,320 --> 00:23:52,720
yeah lgpl

473
00:23:50,000 --> 00:23:55,679
you tell us a little bit about what the

474
00:23:52,720 --> 00:23:59,760
next big thing will be

475
00:23:55,679 --> 00:24:02,240
robustness performance anything else

476
00:23:59,760 --> 00:24:03,200
the question is rad mark for the future

477
00:24:02,240 --> 00:24:06,640
yeah

478
00:24:03,200 --> 00:24:08,960
well here we are going to improve our

479
00:24:06,640 --> 00:24:11,440
visualization engine significantly

480
00:24:08,960 --> 00:24:12,640
actually we have finished physically

481
00:24:11,440 --> 00:24:16,320
based rendering

482
00:24:12,640 --> 00:24:19,440
and materials right design

483
00:24:16,320 --> 00:24:20,879
from algorithm modeling point of view

484
00:24:19,440 --> 00:24:26,080
there is no

485
00:24:20,880 --> 00:24:26,080
such a fixed uh roadmap for that stuff

486
00:24:27,840 --> 00:24:33,439
um is the open cascade

487
00:24:31,440 --> 00:24:34,559
stuff mainly driven by the company

488
00:24:33,440 --> 00:24:38,159
itself or also

489
00:24:34,559 --> 00:24:40,960
external contributors uh do we have

490
00:24:38,159 --> 00:24:41,679
external contributors here yeah uh yes

491
00:24:40,960 --> 00:24:45,600
we have

492
00:24:41,679 --> 00:24:46,720
uh formerly we have nearly 100 but

493
00:24:45,600 --> 00:24:50,879
active

494
00:24:46,720 --> 00:24:50,880
with something between 10 and 20.

495
00:24:54,400 --> 00:24:57,600
the ray tracing are you tracing the

496
00:24:56,799 --> 00:25:01,520
triangles

497
00:24:57,600 --> 00:25:04,158
are you tracing the b-ref patches

498
00:25:01,520 --> 00:25:05,679
question about retracing what do we

499
00:25:04,159 --> 00:25:08,880
display on the screen yeah

500
00:25:05,679 --> 00:25:12,559
good question in visualization

501
00:25:08,880 --> 00:25:14,000
in this stuff we just we retrace that

502
00:25:12,559 --> 00:25:29,200
triangle so you have to build

503
00:25:14,000 --> 00:25:33,200
a mesh before usage

504
00:25:29,200 --> 00:25:36,240
yeah i know this problem yeah

505
00:25:33,200 --> 00:25:39,600
the question is do we have a

506
00:25:36,240 --> 00:25:44,880
mirror on some public website

507
00:25:39,600 --> 00:25:44,879
actually no but we are working on this

508
00:25:44,960 --> 00:25:48,400
we are going to use github yeah my

509
00:25:47,360 --> 00:25:50,399
colleagues say that

510
00:25:48,400 --> 00:25:52,799
we are going to publish a mirror on the

511
00:25:50,400 --> 00:25:52,799
github

512
00:25:55,679 --> 00:25:59,919
so i had a question of the the process

513
00:25:58,640 --> 00:26:02,880
of a new developer

514
00:25:59,919 --> 00:26:04,400
coming in to be able to contribute um is

515
00:26:02,880 --> 00:26:07,760
that documented

516
00:26:04,400 --> 00:26:08,559
um somewhere if someone is watching this

517
00:26:07,760 --> 00:26:10,559
talk

518
00:26:08,559 --> 00:26:11,678
where would they where would they look

519
00:26:10,559 --> 00:26:15,039
to find out

520
00:26:11,679 --> 00:26:16,640
how to get involved in your project uh

521
00:26:15,039 --> 00:26:18,320
the question is how to involve to the

522
00:26:16,640 --> 00:26:21,360
project yeah yeah

523
00:26:18,320 --> 00:26:25,200
here you can see the first link

524
00:26:21,360 --> 00:26:29,279
it has information about how to

525
00:26:25,200 --> 00:26:32,400
be involved does everyone still have to

526
00:26:29,279 --> 00:26:33,440
fax something to france uh unfortunately

527
00:26:32,400 --> 00:26:35,760
yes

528
00:26:33,440 --> 00:26:37,679
some lego reasons okay but we are

529
00:26:35,760 --> 00:26:38,559
working on this process and trying to

530
00:26:37,679 --> 00:26:40,159
optimize it

531
00:26:38,559 --> 00:26:42,960
okay all right are you working on a

532
00:26:40,159 --> 00:26:45,120
contributor license agreement

533
00:26:42,960 --> 00:26:46,320
um that's what you're okay yeah we are

534
00:26:45,120 --> 00:26:48,479
working on this stuff

535
00:26:46,320 --> 00:26:50,480
but actually you have to sign it yeah

536
00:26:48,480 --> 00:26:52,720
okay unfortunately it is

537
00:26:50,480 --> 00:26:53,840
currently as it is but we're trying to

538
00:26:52,720 --> 00:26:57,200
simplify the work

539
00:26:53,840 --> 00:27:07,840
okay uh there's

540
00:26:57,200 --> 00:27:07,840
time for maybe one more question yeah

541
00:27:11,760 --> 00:27:18,640
uh the question is can we replace our

542
00:27:15,120 --> 00:27:21,840
old api by modern c plus plus a yeah

543
00:27:18,640 --> 00:27:22,799
the answer is no because all cad vendors

544
00:27:21,840 --> 00:27:27,439
support

545
00:27:22,799 --> 00:27:31,039
non-c plus 11 compilers

546
00:27:27,440 --> 00:27:33,039
so we cannot switch we can uh and we

547
00:27:31,039 --> 00:27:34,080
wrap them by some macro for instance

548
00:27:33,039 --> 00:27:37,600
standard override

549
00:27:34,080 --> 00:27:40,639
just a macro for c plus override

550
00:27:37,600 --> 00:27:42,959
but in general we cannot drop all this

551
00:27:40,640 --> 00:27:42,960
stuff

552
00:27:45,039 --> 00:27:49,840
okay thank you

553
00:27:53,039 --> 00:27:55,120
you

