1
00:00:05,040 --> 00:00:07,439
so

2
00:00:05,520 --> 00:00:10,639
now we've got the next talk on git issue

3
00:00:07,440 --> 00:00:13,599
from diameter spineless

4
00:00:10,639 --> 00:00:14,719
thank you hi good morning why are we

5
00:00:13,599 --> 00:00:17,520
here

6
00:00:14,719 --> 00:00:18,000
why would we want to run git issue i'll

7
00:00:17,520 --> 00:00:20,080
give you

8
00:00:18,000 --> 00:00:21,198
six reasons why it issues the best

9
00:00:20,080 --> 00:00:24,159
things since

10
00:00:21,199 --> 00:00:25,119
slash spread first of all it's an issue

11
00:00:24,160 --> 00:00:27,199
management

12
00:00:25,119 --> 00:00:28,960
system so a back tracker that doesn't

13
00:00:27,199 --> 00:00:30,080
need any sophisticated infrastructure

14
00:00:28,960 --> 00:00:32,399
any system running behind

15
00:00:30,080 --> 00:00:34,399
it you don't need a database a server

16
00:00:32,399 --> 00:00:36,800
that needs to be specially configured

17
00:00:34,399 --> 00:00:37,440
anything like that it's very easy to

18
00:00:36,800 --> 00:00:39,440
install

19
00:00:37,440 --> 00:00:40,800
as i will show you just clone the

20
00:00:39,440 --> 00:00:43,680
repository and

21
00:00:40,800 --> 00:00:44,559
you run make install and there you have

22
00:00:43,680 --> 00:00:47,039
it

23
00:00:44,559 --> 00:00:48,800
it's decentralized so anybody anywhere

24
00:00:47,039 --> 00:00:50,480
in the planet can create

25
00:00:48,800 --> 00:00:53,120
an issue you can comment on it can

26
00:00:50,480 --> 00:00:56,718
change its status at the milestone and

27
00:00:53,120 --> 00:00:58,640
assign it to somebody and things get

28
00:00:56,719 --> 00:00:59,920
merged together in the central

29
00:00:58,640 --> 00:01:02,480
repository

30
00:00:59,920 --> 00:01:03,920
how does this happen of course it uses

31
00:01:02,480 --> 00:01:06,880
it as its a

32
00:01:03,920 --> 00:01:08,479
back end and as an advantage because

33
00:01:06,880 --> 00:01:10,080
it's decentralized is that you can use

34
00:01:08,479 --> 00:01:12,720
it anywhere even if you don't have

35
00:01:10,080 --> 00:01:14,560
internet connectivity so on the plane i

36
00:01:12,720 --> 00:01:15,439
had somebody complaining a few days ago

37
00:01:14,560 --> 00:01:17,600
that the

38
00:01:15,439 --> 00:01:18,479
train that were on didn't have wi-fi you

39
00:01:17,600 --> 00:01:21,280
can still get

40
00:01:18,479 --> 00:01:22,000
use a git issue and then you push the

41
00:01:21,280 --> 00:01:23,520
changes

42
00:01:22,000 --> 00:01:26,240
or you pull the changes that have been

43
00:01:23,520 --> 00:01:27,360
made it's also transparent so the files

44
00:01:26,240 --> 00:01:30,000
that it uses

45
00:01:27,360 --> 00:01:31,680
the structure is documented and it's

46
00:01:30,000 --> 00:01:32,720
available so you can use your favorite

47
00:01:31,680 --> 00:01:35,360
tools you can grab

48
00:01:32,720 --> 00:01:37,119
through issues you can find and select

49
00:01:35,360 --> 00:01:38,960
them you can apply filters to it

50
00:01:37,119 --> 00:01:40,720
you can even use your editor if you are

51
00:01:38,960 --> 00:01:42,240
brave enough to change things

52
00:01:40,720 --> 00:01:44,320
on the fly in the repository that's

53
00:01:42,240 --> 00:01:48,000
absolutely allowed and then you can push

54
00:01:44,320 --> 00:01:50,398
the issues back in as you

55
00:01:48,000 --> 00:01:52,640
will appreciate it uses a git as a back

56
00:01:50,399 --> 00:01:55,439
end so all the goodies we have with kit

57
00:01:52,640 --> 00:01:57,680
still work here the credentials that you

58
00:01:55,439 --> 00:02:00,320
have the server that you are using

59
00:01:57,680 --> 00:02:02,079
the commands that you know the many

60
00:02:00,320 --> 00:02:02,798
years you invested to learn its arcane

61
00:02:02,079 --> 00:02:06,240
interface

62
00:02:02,799 --> 00:02:07,920
everything is there to be used also it

63
00:02:06,240 --> 00:02:09,440
uses the unix command line tools

64
00:02:07,920 --> 00:02:11,200
philosophy if you don't

65
00:02:09,440 --> 00:02:12,720
not sure why this is good there is a

66
00:02:11,200 --> 00:02:15,040
mooc that i'll be starting

67
00:02:12,720 --> 00:02:17,040
on in march go there in order to find

68
00:02:15,040 --> 00:02:18,560
out but the truth is that you can use

69
00:02:17,040 --> 00:02:21,760
all the tools that you know

70
00:02:18,560 --> 00:02:23,280
on top of the files that it has

71
00:02:21,760 --> 00:02:25,359
as in addition as part of the google

72
00:02:23,280 --> 00:02:27,280
summer of code last year

73
00:02:25,360 --> 00:02:29,120
viran roses did amazing work and

74
00:02:27,280 --> 00:02:32,000
integrated into git issue

75
00:02:29,120 --> 00:02:33,680
the ability to pull issues from github

76
00:02:32,000 --> 00:02:35,920
and gitlab and also put

77
00:02:33,680 --> 00:02:37,920
push issues back there to the issue

78
00:02:35,920 --> 00:02:39,760
database of these two systems

79
00:02:37,920 --> 00:02:41,839
so you can also use git issue in order

80
00:02:39,760 --> 00:02:42,560
to transfer issues from one system to

81
00:02:41,840 --> 00:02:44,319
the other

82
00:02:42,560 --> 00:02:46,480
or ensure that your issues are in a

83
00:02:44,319 --> 00:02:49,518
transparent format that you can use

84
00:02:46,480 --> 00:02:51,679
and control on your own

85
00:02:49,519 --> 00:02:54,080
let me give you a brief demo of how it

86
00:02:51,680 --> 00:02:54,080
works

87
00:02:56,319 --> 00:03:00,879
so to install it you just clone the

88
00:03:02,840 --> 00:03:07,840
repository

89
00:03:04,640 --> 00:03:09,518
and then you run install or as a

90
00:03:07,840 --> 00:03:10,959
root user in order to copy the files to

91
00:03:09,519 --> 00:03:14,239
system directories or if you don't

92
00:03:10,959 --> 00:03:15,519
have root access you set the prefix to

93
00:03:14,239 --> 00:03:18,000
your home directory

94
00:03:15,519 --> 00:03:19,840
in order to install them in your home

95
00:03:18,000 --> 00:03:22,239
directory

96
00:03:19,840 --> 00:03:23,519
with git issue in it you create a new

97
00:03:22,239 --> 00:03:24,959
repository

98
00:03:23,519 --> 00:03:27,120
let's create a new issue you can do it

99
00:03:24,959 --> 00:03:28,560
in the command line but by specifying

100
00:03:27,120 --> 00:03:31,200
the subject line

101
00:03:28,560 --> 00:03:33,040
or you can use git issue new and network

102
00:03:31,200 --> 00:03:35,440
will pop up

103
00:03:33,040 --> 00:03:36,319
now you see you have two issues here i

104
00:03:35,440 --> 00:03:38,239
can use

105
00:03:36,319 --> 00:03:41,518
git issue comment to add a comment on

106
00:03:38,239 --> 00:03:44,400
the specific issue again with my editor

107
00:03:41,519 --> 00:03:46,080
or i can tag it with a specific tag and

108
00:03:44,400 --> 00:03:46,799
it tells me that it has tagged it i can

109
00:03:46,080 --> 00:03:49,920
tag

110
00:03:46,799 --> 00:03:49,920
another tag here

111
00:03:50,959 --> 00:03:55,680
if i now remove a tag i can use the

112
00:03:53,760 --> 00:03:58,879
minus r option

113
00:03:55,680 --> 00:04:00,799
i can assign it to somebody using again

114
00:03:58,879 --> 00:04:04,720
the issue

115
00:04:00,799 --> 00:04:04,720
code as a to identify it

116
00:04:05,599 --> 00:04:10,319
add another watcher here here i list the

117
00:04:08,720 --> 00:04:13,760
specific

118
00:04:10,319 --> 00:04:17,039
issue and now here is the

119
00:04:13,760 --> 00:04:20,159
magic i can add a remote origin

120
00:04:17,040 --> 00:04:23,840
to this issue database

121
00:04:20,160 --> 00:04:26,840
and now i can use a

122
00:04:23,840 --> 00:04:28,400
push in order to move my changes all

123
00:04:26,840 --> 00:04:30,479
upstream

124
00:04:28,400 --> 00:04:31,919
assume now somebody else is using git

125
00:04:30,479 --> 00:04:34,960
issue they can clone

126
00:04:31,919 --> 00:04:34,960
this repository

127
00:04:37,919 --> 00:04:40,960
and then if they list the issues the

128
00:04:40,160 --> 00:04:43,680
issues are back

129
00:04:40,960 --> 00:04:46,159
at the host that they were using they

130
00:04:43,680 --> 00:04:48,080
can create another issue there

131
00:04:46,160 --> 00:04:50,639
and create i'm specifying the subject

132
00:04:48,080 --> 00:04:52,320
line here

133
00:04:50,639 --> 00:04:54,000
and push the changes back up to that

134
00:04:52,320 --> 00:04:57,040
repository that is shared between

135
00:04:54,000 --> 00:04:58,000
these two people there's a show command

136
00:04:57,040 --> 00:05:01,360
in order to see

137
00:04:58,000 --> 00:05:01,360
what an issue contains

138
00:05:04,240 --> 00:05:11,840
or a specific issue here longer one

139
00:05:11,919 --> 00:05:16,000
i can again pull issues from a remote

140
00:05:17,039 --> 00:05:21,680
at least and i will see a new issue

141
00:05:18,960 --> 00:05:24,000
appearing here in the other host

142
00:05:21,680 --> 00:05:24,960
now let's write another example i will

143
00:05:24,000 --> 00:05:28,800
now get

144
00:05:24,960 --> 00:05:30,960
issues from github issues

145
00:05:28,800 --> 00:05:32,160
so i initialize a new issue tracker with

146
00:05:30,960 --> 00:05:33,840
git issue in it

147
00:05:32,160 --> 00:05:35,199
and now specify that i want to import

148
00:05:33,840 --> 00:05:38,560
issues from github

149
00:05:35,199 --> 00:05:40,800
using this url and it imports existing

150
00:05:38,560 --> 00:05:44,080
github issues so issues that github

151
00:05:40,800 --> 00:05:45,360
is tracking i can see them here i can

152
00:05:44,080 --> 00:05:48,080
see a specific

153
00:05:45,360 --> 00:05:49,759
issue who's been assigned tags and so on

154
00:05:48,080 --> 00:05:53,120
all the things that the

155
00:05:49,759 --> 00:05:55,520
github issues support

156
00:05:53,120 --> 00:05:57,600
i can change things again so at the

157
00:05:55,520 --> 00:06:01,039
milestone for example

158
00:05:57,600 --> 00:06:02,960
or change the due date for gitlab there

159
00:06:01,039 --> 00:06:03,840
are some things that gitlab supports and

160
00:06:02,960 --> 00:06:06,960
some things that

161
00:06:03,840 --> 00:06:10,560
github supports we have the superset

162
00:06:06,960 --> 00:06:12,400
of the tool i can close an issue and

163
00:06:10,560 --> 00:06:15,600
then i can export the issues back

164
00:06:12,400 --> 00:06:16,960
into gita github issues or gitlab i will

165
00:06:15,600 --> 00:06:18,800
need to have the credentials

166
00:06:16,960 --> 00:06:21,599
especially if i want to pull more than a

167
00:06:18,800 --> 00:06:24,400
few issues

168
00:06:21,600 --> 00:06:26,880
so this is how the system appears in

169
00:06:24,400 --> 00:06:26,880
practice

170
00:06:27,280 --> 00:06:29,599
thank you

171
00:06:30,880 --> 00:06:37,199
you also get some goodies so sub command

172
00:06:33,759 --> 00:06:39,120
autocompletion or sha autocompletion

173
00:06:37,199 --> 00:06:40,479
more goodies you can use the git

174
00:06:39,120 --> 00:06:43,120
commands that

175
00:06:40,479 --> 00:06:44,560
you love and know so for example rebase

176
00:06:43,120 --> 00:06:46,960
in order to directly change

177
00:06:44,560 --> 00:06:47,759
things every change you made is recorded

178
00:06:46,960 --> 00:06:49,599
as a git

179
00:06:47,759 --> 00:06:51,599
commit you can dump an issue in json

180
00:06:49,599 --> 00:06:53,199
format to process it in another way

181
00:06:51,599 --> 00:06:54,960
and there's a log of the issues that are

182
00:06:53,199 --> 00:06:57,599
there for

183
00:06:54,960 --> 00:06:58,719
help there is of course a list of all

184
00:06:57,599 --> 00:07:00,719
the commands available

185
00:06:58,720 --> 00:07:02,880
automatically generated from the source

186
00:07:00,720 --> 00:07:04,800
code so that it's always complete

187
00:07:02,880 --> 00:07:06,560
and something i consider important we

188
00:07:04,800 --> 00:07:07,360
should all try in our projects a nine

189
00:07:06,560 --> 00:07:11,199
page manual

190
00:07:07,360 --> 00:07:13,840
proper unix manual page how does it work

191
00:07:11,199 --> 00:07:15,199
internally i will finish with that so

192
00:07:13,840 --> 00:07:18,638
internally what you

193
00:07:15,199 --> 00:07:19,840
see is a dot issues directory and inside

194
00:07:18,639 --> 00:07:21,440
it there are templates for the

195
00:07:19,840 --> 00:07:22,479
description and comment you can modify

196
00:07:21,440 --> 00:07:24,800
it and commit them and

197
00:07:22,479 --> 00:07:26,080
all your colleagues will share them and

198
00:07:24,800 --> 00:07:28,319
use their own

199
00:07:26,080 --> 00:07:30,000
an issues directory and for every issue

200
00:07:28,319 --> 00:07:32,080
you have the sha hash

201
00:07:30,000 --> 00:07:33,599
which is created through the hash of the

202
00:07:32,080 --> 00:07:36,240
git commit that creates

203
00:07:33,599 --> 00:07:38,639
the issue so you know it's almost

204
00:07:36,240 --> 00:07:40,080
impossible to have a duplication here

205
00:07:38,639 --> 00:07:42,240
and for every issue you have the

206
00:07:40,080 --> 00:07:43,120
description the tags the milestone the

207
00:07:42,240 --> 00:07:44,800
comments

208
00:07:43,120 --> 00:07:46,240
and other things that are associated

209
00:07:44,800 --> 00:07:47,919
with that issue

210
00:07:46,240 --> 00:07:49,440
comments is a director and again each

211
00:07:47,919 --> 00:07:52,318
comment is associated

212
00:07:49,440 --> 00:07:53,199
with the sha hash of the git commit that

213
00:07:52,319 --> 00:07:56,240
created

214
00:07:53,199 --> 00:07:58,400
that issue the configuration folder

215
00:07:56,240 --> 00:07:59,759
and details about the imports so that

216
00:07:58,400 --> 00:08:01,840
you can stay in sync

217
00:07:59,759 --> 00:08:02,879
and push and pull the things that are

218
00:08:01,840 --> 00:08:06,080
exactly needed

219
00:08:02,879 --> 00:08:08,160
from github or gitlab

220
00:08:06,080 --> 00:08:09,599
we will hopefully be running google

221
00:08:08,160 --> 00:08:11,440
summer of code again

222
00:08:09,599 --> 00:08:13,120
next year so if you have any cool ideas

223
00:08:11,440 --> 00:08:15,039
you want to add

224
00:08:13,120 --> 00:08:17,280
or if you want to work on perhaps a

225
00:08:15,039 --> 00:08:19,280
graphical user interface if you feel to

226
00:08:17,280 --> 00:08:21,599
don't feel sure about always using the

227
00:08:19,280 --> 00:08:22,159
command line feel free to look for it up

228
00:08:21,599 --> 00:08:25,440
and

229
00:08:22,160 --> 00:08:28,879
apply this brings me to the end of this

230
00:08:25,440 --> 00:08:28,879
presentation thank you very much

231
00:08:34,000 --> 00:08:41,839
okay so we've got a well for questions

232
00:08:53,839 --> 00:08:57,519
is there any git parts git specific part

233
00:08:56,880 --> 00:09:00,160
in it

234
00:08:57,519 --> 00:09:00,959
it's written in a shell as a shell

235
00:09:00,160 --> 00:09:03,680
script

236
00:09:00,959 --> 00:09:05,599
full of git commands so you have to go

237
00:09:03,680 --> 00:09:06,880
and replace every git command

238
00:09:05,600 --> 00:09:08,399
with the corresponding other version

239
00:09:06,880 --> 00:09:10,720
control is understand the question is if

240
00:09:08,399 --> 00:09:14,240
there are git specific parts in it right

241
00:09:10,720 --> 00:09:16,240
yes so it's a heavily git dependent

242
00:09:14,240 --> 00:09:18,320
you would have to add an abstraction

243
00:09:16,240 --> 00:09:19,040
layer to interface between different

244
00:09:18,320 --> 00:09:21,200
systems

245
00:09:19,040 --> 00:09:22,240
but there are text files and they get

246
00:09:21,200 --> 00:09:25,360
specific

247
00:09:22,240 --> 00:09:28,080
things that are done are push

248
00:09:25,360 --> 00:09:29,519
pull commit so there are few the rest

249
00:09:28,080 --> 00:09:31,680
are things that are

250
00:09:29,519 --> 00:09:33,279
available in every system you think you

251
00:09:31,680 --> 00:09:36,560
commit files in the

252
00:09:33,279 --> 00:09:40,000
structure that i showed

253
00:09:36,560 --> 00:09:40,959
yes most interesting is integration of

254
00:09:40,000 --> 00:09:42,800
github

255
00:09:40,959 --> 00:09:44,640
and what happens if there is a conflict

256
00:09:42,800 --> 00:09:45,279
let's say i'm trying to export somebody

257
00:09:44,640 --> 00:09:46,880
modify

258
00:09:45,279 --> 00:09:48,480
that description over the i modify

259
00:09:46,880 --> 00:09:51,920
description what happens

260
00:09:48,480 --> 00:09:54,480
okay what happens with the conflicts in

261
00:09:51,920 --> 00:09:56,319
general the idea is that the the same

262
00:09:54,480 --> 00:09:58,560
thing that happens with the

263
00:09:56,320 --> 00:09:59,600
with the when you pull data from a

264
00:09:58,560 --> 00:10:01,279
repository

265
00:09:59,600 --> 00:10:04,480
you get a conflict and you have to

266
00:10:01,279 --> 00:10:06,959
resolve it now if you go up streams

267
00:10:04,480 --> 00:10:07,600
and you push things up things might get

268
00:10:06,959 --> 00:10:09,920
uh

269
00:10:07,600 --> 00:10:10,720
modified with the true source of truth

270
00:10:09,920 --> 00:10:14,079
that you have

271
00:10:10,720 --> 00:10:14,640
because a github doesn't have a way to

272
00:10:14,079 --> 00:10:17,040
do this

273
00:10:14,640 --> 00:10:18,160
atomically so a proper process would be

274
00:10:17,040 --> 00:10:21,279
to pull things

275
00:10:18,160 --> 00:10:23,040
from to import the issues again resolve

276
00:10:21,279 --> 00:10:23,519
any conflicts you can do that commit

277
00:10:23,040 --> 00:10:25,279
them

278
00:10:23,519 --> 00:10:28,640
and then push and hopefully nobody has

279
00:10:25,279 --> 00:10:28,640
done that in that small window

280
00:10:31,200 --> 00:10:35,519
point of yes is integration with github

281
00:10:34,160 --> 00:10:39,120
so when you list issues

282
00:10:35,519 --> 00:10:42,000
we are thinking into in github numbers

283
00:10:39,120 --> 00:10:43,279
right number of issues is there a way to

284
00:10:42,000 --> 00:10:47,120
kind of aliase

285
00:10:43,279 --> 00:10:47,120
instead of putting checks on who

286
00:10:49,279 --> 00:10:52,800
right the question is whether we can

287
00:10:51,360 --> 00:10:55,040
have the numbers of

288
00:10:52,800 --> 00:10:56,000
github issues i think this is something

289
00:10:55,040 --> 00:10:57,760
that can be

290
00:10:56,000 --> 00:10:59,040
easily done should be three lines of

291
00:10:57,760 --> 00:11:02,480
code it's a very good

292
00:10:59,040 --> 00:11:06,640
idea if you put it up in an issue

293
00:11:02,480 --> 00:11:06,640
i hack it in the afternoon

294
00:11:06,959 --> 00:11:10,640
i think you have the two questions

295
00:11:12,959 --> 00:11:18,319
do the right data

296
00:11:16,079 --> 00:11:20,359
so that whenever someone changes

297
00:11:18,320 --> 00:11:25,279
something on

298
00:11:20,360 --> 00:11:28,959
uh whenever you push something

299
00:11:25,279 --> 00:11:32,160
something outside is

300
00:11:28,959 --> 00:11:33,920
how could we automate the github

301
00:11:32,160 --> 00:11:35,519
process so that when things change on

302
00:11:33,920 --> 00:11:38,000
github automatically

303
00:11:35,519 --> 00:11:39,040
mirrored here i would build on top on it

304
00:11:38,000 --> 00:11:41,920
on top of it so

305
00:11:39,040 --> 00:11:43,680
at some end point that would under

306
00:11:41,920 --> 00:11:45,839
listen for those events and then invoke

307
00:11:43,680 --> 00:11:47,439
a command it's not there but i don't

308
00:11:45,839 --> 00:11:50,959
think it should be difficult to

309
00:11:47,440 --> 00:11:50,959
do yes

310
00:11:51,760 --> 00:11:56,399
have i looked with that technically no

311
00:11:53,680 --> 00:11:58,638
not yet

312
00:11:56,399 --> 00:11:58,639
yes

313
00:12:00,560 --> 00:12:06,160
hi i wanted to ask if you will

314
00:12:03,600 --> 00:12:07,040
try to push it upstream i mean to get

315
00:12:06,160 --> 00:12:10,800
source

316
00:12:07,040 --> 00:12:13,040
directly like be part of kit

317
00:12:10,800 --> 00:12:14,719
so the question is if i have tried to

318
00:12:13,040 --> 00:12:17,839
push it upstream be part

319
00:12:14,720 --> 00:12:18,639
of gt5 commune of guitar guitar yeah i

320
00:12:17,839 --> 00:12:21,040
mean get

321
00:12:18,639 --> 00:12:22,160
like be part of the git not just

322
00:12:21,040 --> 00:12:24,880
additional

323
00:12:22,160 --> 00:12:26,160
thing but just part of the okay the

324
00:12:24,880 --> 00:12:26,880
question is if i've tried to push it

325
00:12:26,160 --> 00:12:29,439
upstream to

326
00:12:26,880 --> 00:12:31,439
git no i haven't because the plugin

327
00:12:29,440 --> 00:12:34,240
interface of git is beautiful

328
00:12:31,440 --> 00:12:34,880
uh maybe i should it's an interesting

329
00:12:34,240 --> 00:12:39,519
idea

330
00:12:34,880 --> 00:12:41,680
yeah so please try to push it upstream

331
00:12:39,519 --> 00:12:43,040
okay thank you for the suggestion if

332
00:12:41,680 --> 00:12:45,599
anyone wants to share

333
00:12:43,040 --> 00:12:47,920
experience of how to do that please talk

334
00:12:45,600 --> 00:12:47,920
to me

335
00:12:49,200 --> 00:12:54,320
uh hi how does it compare to bugs

336
00:12:52,079 --> 00:12:56,880
everywhere

337
00:12:54,320 --> 00:12:58,000
how's it does it compare to bugs

338
00:12:56,880 --> 00:13:00,399
everywhere

339
00:12:58,000 --> 00:13:01,279
i have a list of at the end of the

340
00:13:00,399 --> 00:13:02,959
readme file

341
00:13:01,279 --> 00:13:04,320
i've released this bugs everywhere is

342
00:13:02,959 --> 00:13:07,040
another system that works

343
00:13:04,320 --> 00:13:08,240
in the same way there have found another

344
00:13:07,040 --> 00:13:10,160
five systems

345
00:13:08,240 --> 00:13:11,440
around the same idea at the end of the

346
00:13:10,160 --> 00:13:12,639
readme file i have

347
00:13:11,440 --> 00:13:15,120
short one liners that have the

348
00:13:12,639 --> 00:13:16,800
comparisons i don't remember exactly for

349
00:13:15,120 --> 00:13:20,480
each system how it compares

350
00:13:16,800 --> 00:13:23,839
off the top of my head

351
00:13:20,480 --> 00:13:24,480
yes uh is there a way to trigger closing

352
00:13:23,839 --> 00:13:27,920
the issue

353
00:13:24,480 --> 00:13:30,160
by commit message is there a way to

354
00:13:27,920 --> 00:13:32,399
close an issue by a commit message i

355
00:13:30,160 --> 00:13:35,120
would add a commit hook again

356
00:13:32,399 --> 00:13:36,320
in git issue to issue another git

357
00:13:35,120 --> 00:13:38,399
command

358
00:13:36,320 --> 00:13:39,600
that would close the issue so it's a

359
00:13:38,399 --> 00:13:40,880
hook plus

360
00:13:39,600 --> 00:13:42,720
issuing the two commands that would

361
00:13:40,880 --> 00:13:44,000
close the issue when it grabs for the

362
00:13:42,720 --> 00:13:46,240
issue number

363
00:13:44,000 --> 00:13:47,600
so you don't have pre-crafted hook to

364
00:13:46,240 --> 00:13:49,120
put it it's not pre-credited now it

365
00:13:47,600 --> 00:13:52,880
means that we'll have to have to

366
00:13:49,120 --> 00:13:55,120
create a plug-in mechanism for git issue

367
00:13:52,880 --> 00:13:57,040
but it's an interesting idea and very

368
00:13:55,120 --> 00:13:57,519
i'm very encouraged with all these ideas

369
00:13:57,040 --> 00:13:59,279
and

370
00:13:57,519 --> 00:14:01,279
things that can be built on top of it

371
00:13:59,279 --> 00:14:04,480
that's the beauty of unix tools

372
00:14:01,279 --> 00:14:04,480
and the unix philosophy

373
00:14:05,680 --> 00:14:08,479
any other questions

374
00:14:09,839 --> 00:14:13,519
thank you very much thank you very much

375
00:14:14,839 --> 00:14:17,839
again

376
00:14:24,639 --> 00:14:26,720
you

