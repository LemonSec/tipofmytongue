1
00:00:12,960 --> 00:00:16,080
okay for the next talk

2
00:00:14,240 --> 00:00:17,600
please welcome federico who's going to

3
00:00:16,079 --> 00:00:20,080
tell us about

4
00:00:17,600 --> 00:00:21,439
which one is this uh clouds it's a

5
00:00:20,080 --> 00:00:22,169
ripped packer for pause breasts thank

6
00:00:21,439 --> 00:00:27,039
you very much

7
00:00:22,170 --> 00:00:29,840
[Applause]

8
00:00:27,039 --> 00:00:30,480
hello everybody can you hear me all nice

9
00:00:29,840 --> 00:00:32,880
okay

10
00:00:30,480 --> 00:00:34,160
thank you my name is federico i'm

11
00:00:32,880 --> 00:00:36,800
italian

12
00:00:34,160 --> 00:00:38,078
i lived in the uk for a while and now

13
00:00:36,800 --> 00:00:41,199
back to italy so

14
00:00:38,079 --> 00:00:44,160
very happy to be here here

15
00:00:41,200 --> 00:00:45,120
i will present this tool i've written

16
00:00:44,160 --> 00:00:48,800
over

17
00:00:45,120 --> 00:00:52,078
probably six weeks and

18
00:00:48,800 --> 00:00:54,640
but before things let's start with me

19
00:00:52,079 --> 00:00:55,840
this is my cat he's much better cuter

20
00:00:54,640 --> 00:00:59,359
i'm ugly so

21
00:00:55,840 --> 00:00:59,920
it's much better to show him my twitter

22
00:00:59,359 --> 00:01:03,600
is for

23
00:00:59,920 --> 00:01:06,400
dr scarf i'm huge fan of doctor who and

24
00:01:03,600 --> 00:01:08,159
i was born in 1972 i look younger but

25
00:01:06,400 --> 00:01:12,240
i'm a time lord right

26
00:01:08,159 --> 00:01:15,200
so passionate about i.t since 1982

27
00:01:12,240 --> 00:01:16,720
uh joined the oracle secret society in

28
00:01:15,200 --> 00:01:21,200
2004

29
00:01:16,720 --> 00:01:23,920
uh fell in love with postgres in 2006

30
00:01:21,200 --> 00:01:24,560
and i have a positive status on my left

31
00:01:23,920 --> 00:01:27,759
shoulder

32
00:01:24,560 --> 00:01:30,240
along with uh this guy is just joined

33
00:01:27,759 --> 00:01:31,600
recently so i'm very committed to the

34
00:01:30,240 --> 00:01:33,839
project

35
00:01:31,600 --> 00:01:35,280
i'm also involved into the uh the

36
00:01:33,840 --> 00:01:38,000
postgres community

37
00:01:35,280 --> 00:01:39,360
uh before starting little disclaimer i'm

38
00:01:38,000 --> 00:01:44,240
not a developer

39
00:01:39,360 --> 00:01:46,880
not really pythonic i'm a dba so

40
00:01:44,240 --> 00:01:48,479
i ate it i made it by everybody which is

41
00:01:46,880 --> 00:01:51,759
the role of the dba

42
00:01:48,479 --> 00:01:53,119
and i ate everybody so to put things in

43
00:01:51,759 --> 00:01:56,320
the right perspective

44
00:01:53,119 --> 00:02:00,479
i use tabs so

45
00:01:56,320 --> 00:02:03,520
please let the aid flow through you

46
00:02:00,479 --> 00:02:04,159
so let's start with the with the stuff

47
00:02:03,520 --> 00:02:06,960
with the

48
00:02:04,159 --> 00:02:08,640
strong stuff how many postgres user in

49
00:02:06,960 --> 00:02:12,079
there in the room

50
00:02:08,639 --> 00:02:13,760
whoa i love you i love you all despite i

51
00:02:12,080 --> 00:02:16,560
am a dba

52
00:02:13,760 --> 00:02:19,519
postgresql is the most advanced open

53
00:02:16,560 --> 00:02:21,680
source database is a great product

54
00:02:19,520 --> 00:02:24,480
gaining momentum i'm very impressed by

55
00:02:21,680 --> 00:02:26,560
that and i'm very happy with that

56
00:02:24,480 --> 00:02:28,160
available as a database of service on

57
00:02:26,560 --> 00:02:31,280
cloud providers so we have

58
00:02:28,160 --> 00:02:34,840
rds heroku other stuff

59
00:02:31,280 --> 00:02:36,560
which limit the action you can do on on

60
00:02:34,840 --> 00:02:39,120
postgresql and

61
00:02:36,560 --> 00:02:40,080
unfortunately avi's under back too too

62
00:02:39,120 --> 00:02:43,280
is not

63
00:02:40,080 --> 00:02:46,319
uh good as uh in some in some

64
00:02:43,280 --> 00:02:48,000
areas he needs improvement or it's just

65
00:02:46,319 --> 00:02:51,679
architectural stuff so

66
00:02:48,000 --> 00:02:54,879
we need to live with that so what the

67
00:02:51,680 --> 00:02:59,680
point i want to stress today is the mvcc

68
00:02:54,879 --> 00:02:59,679
how many of you knows what is the mvcc

69
00:03:00,159 --> 00:03:05,200
thank you so multiversion concurrency

70
00:03:03,760 --> 00:03:08,159
control is the way postgres

71
00:03:05,200 --> 00:03:08,799
makes things consistent in read and out

72
00:03:08,159 --> 00:03:11,840
you can

73
00:03:08,800 --> 00:03:12,400
manage stuff in read and write with very

74
00:03:11,840 --> 00:03:16,319
very

75
00:03:12,400 --> 00:03:18,159
minimal lock the implementation is very

76
00:03:16,319 --> 00:03:18,958
efficient it's very different from other

77
00:03:18,159 --> 00:03:21,200
databases

78
00:03:18,959 --> 00:03:22,879
postgres it doesn't have the rollback

79
00:03:21,200 --> 00:03:25,359
segment for example

80
00:03:22,879 --> 00:03:26,239
and the snapshots are managed on the

81
00:03:25,360 --> 00:03:28,720
data page

82
00:03:26,239 --> 00:03:30,799
is amazing you get everything you need

83
00:03:28,720 --> 00:03:32,080
for reading consistently directly on the

84
00:03:30,799 --> 00:03:35,120
data page

85
00:03:32,080 --> 00:03:37,280
the data page is the problem

86
00:03:35,120 --> 00:03:38,159
at the same time because the transaction

87
00:03:37,280 --> 00:03:41,440
id

88
00:03:38,159 --> 00:03:41,920
is stored inside the row in two system

89
00:03:41,440 --> 00:03:44,159
fields

90
00:03:41,920 --> 00:03:44,958
is a transaction id is just for bytes

91
00:03:44,159 --> 00:03:47,920
integer

92
00:03:44,959 --> 00:03:48,480
so he starts from one wraps uh reaches

93
00:03:47,920 --> 00:03:50,559
four b

94
00:03:48,480 --> 00:03:52,399
two four billions then it wraps again

95
00:03:50,560 --> 00:03:55,200
there's a mechanism to avoid

96
00:03:52,400 --> 00:03:56,400
the wraparound failure is a is a topic

97
00:03:55,200 --> 00:03:58,720
for a different talk

98
00:03:56,400 --> 00:04:00,400
but two system fields are used for track

99
00:03:58,720 --> 00:04:03,280
the visibility of the

100
00:04:00,400 --> 00:04:04,319
row or tuple as is called in postgres

101
00:04:03,280 --> 00:04:07,680
the z1 field

102
00:04:04,319 --> 00:04:09,200
is the x-men x-min is called also the

103
00:04:07,680 --> 00:04:13,120
insert

104
00:04:09,200 --> 00:04:14,879
transaction id when the tuple is created

105
00:04:13,120 --> 00:04:16,720
the transaction id which created the

106
00:04:14,879 --> 00:04:19,599
table is stored inside this field

107
00:04:16,720 --> 00:04:20,000
and then there's another one x max which

108
00:04:19,600 --> 00:04:22,560
is

109
00:04:20,000 --> 00:04:24,400
set when the tuple is deleted so pause

110
00:04:22,560 --> 00:04:24,960
gracie it doesn't remove immediately the

111
00:04:24,400 --> 00:04:27,120
rows

112
00:04:24,960 --> 00:04:29,680
from the physical layer it leaves in

113
00:04:27,120 --> 00:04:32,320
place and this information

114
00:04:29,680 --> 00:04:33,440
is used for tracking the raw visibility

115
00:04:32,320 --> 00:04:36,719
but there's no

116
00:04:33,440 --> 00:04:38,880
field for tracking the updates this is a

117
00:04:36,720 --> 00:04:40,800
quite a mystery nobody knows about this

118
00:04:38,880 --> 00:04:43,600
thing but in postgres there's

119
00:04:40,800 --> 00:04:44,240
no such thing like an update an update

120
00:04:43,600 --> 00:04:46,960
is made

121
00:04:44,240 --> 00:04:47,919
using an insert delete inside the same

122
00:04:46,960 --> 00:04:50,159
transaction

123
00:04:47,919 --> 00:04:52,159
the old row version is deleted the new

124
00:04:50,160 --> 00:04:56,160
row version is inserted so

125
00:04:52,160 --> 00:04:57,040
you get two rows one becomes dead and so

126
00:04:56,160 --> 00:05:00,720
becomes

127
00:04:57,040 --> 00:05:02,880
uh wasted space but is still needed for

128
00:05:00,720 --> 00:05:06,639
running transactions and needs to see

129
00:05:02,880 --> 00:05:08,400
these rows but these old raw versions

130
00:05:06,639 --> 00:05:10,639
are removed by vacuum

131
00:05:08,400 --> 00:05:11,919
when vacuum kicks in manually or

132
00:05:10,639 --> 00:05:15,039
automatically

133
00:05:11,919 --> 00:05:18,719
and when the rows are updated

134
00:05:15,039 --> 00:05:21,520
they might change the data page is not

135
00:05:18,720 --> 00:05:23,520
automatic that row stays inside the same

136
00:05:21,520 --> 00:05:24,240
data page the data page is the data

137
00:05:23,520 --> 00:05:27,680
block

138
00:05:24,240 --> 00:05:29,919
the physical block and when this happens

139
00:05:27,680 --> 00:05:33,840
when the row changes the data page

140
00:05:29,919 --> 00:05:36,960
the indices need to be updated as well

141
00:05:33,840 --> 00:05:40,239
and these may result in bloat

142
00:05:36,960 --> 00:05:43,198
the indices bloat massively

143
00:05:40,240 --> 00:05:44,400
just because the tables are updated too

144
00:05:43,199 --> 00:05:47,039
much

145
00:05:44,400 --> 00:05:48,560
so how to reduce the risk of bloat

146
00:05:47,039 --> 00:05:51,199
database design

147
00:05:48,560 --> 00:05:52,240
data model should avoid tables with

148
00:05:51,199 --> 00:05:55,440
large rows

149
00:05:52,240 --> 00:05:56,000
it should be splitted the third normal

150
00:05:55,440 --> 00:05:59,039
form

151
00:05:56,000 --> 00:06:00,000
is very helpful in that thing most of

152
00:05:59,039 --> 00:06:03,360
the

153
00:06:00,000 --> 00:06:04,400
grouping the most updated fields in

154
00:06:03,360 --> 00:06:06,720
separate tables

155
00:06:04,400 --> 00:06:08,638
is a massive strategy to avoid bloat

156
00:06:06,720 --> 00:06:11,440
because if you have one row of

157
00:06:08,639 --> 00:06:14,479
200 bytes and you update just a boolean

158
00:06:11,440 --> 00:06:17,039
flag you generate another 200 bytes

159
00:06:14,479 --> 00:06:18,400
whether you change the boolean or change

160
00:06:17,039 --> 00:06:21,840
a different

161
00:06:18,400 --> 00:06:23,198
different field those fields should be

162
00:06:21,840 --> 00:06:27,359
used for looking up

163
00:06:23,199 --> 00:06:30,479
to the rest of the data remove the

164
00:06:27,360 --> 00:06:32,240
unused indices there's a way to query

165
00:06:30,479 --> 00:06:35,520
postgres for knowing that thing

166
00:06:32,240 --> 00:06:35,840
or doing routine maintenance vacuum very

167
00:06:35,520 --> 00:06:39,198
low

168
00:06:35,840 --> 00:06:42,318
impact less effective indices

169
00:06:39,199 --> 00:06:44,639
or index high impact eye effective

170
00:06:42,319 --> 00:06:46,319
you can re-index stuff but until

171
00:06:44,639 --> 00:06:48,880
postgres 11

172
00:06:46,319 --> 00:06:51,840
is a blocking procedure so locks your

173
00:06:48,880 --> 00:06:55,759
table in read-only mode and sometimes

174
00:06:51,840 --> 00:06:59,119
can prevent also the uh the reads uh

175
00:06:55,759 --> 00:06:59,680
it depends how the index is used dealing

176
00:06:59,120 --> 00:07:02,400
with

177
00:06:59,680 --> 00:07:05,280
with an existing bloat i found databases

178
00:07:02,400 --> 00:07:08,479
in very very bad conditions indices

179
00:07:05,280 --> 00:07:11,679
hundreds of gigabytes for storing just

180
00:07:08,479 --> 00:07:12,159
two three gigabytes of data so how do

181
00:07:11,680 --> 00:07:15,360
you

182
00:07:12,160 --> 00:07:17,680
uh deal the first thing built in

183
00:07:15,360 --> 00:07:19,680
in postgres is vacuum full but this is a

184
00:07:17,680 --> 00:07:22,080
massively blocking procedure

185
00:07:19,680 --> 00:07:24,400
you get the table locked in exclusive

186
00:07:22,080 --> 00:07:27,440
mode until the vacuum is complete

187
00:07:24,400 --> 00:07:30,239
and on a cloud-hosted database with

188
00:07:27,440 --> 00:07:30,880
hundreds of gigabytes of table it can

189
00:07:30,240 --> 00:07:34,560
take

190
00:07:30,880 --> 00:07:37,280
days because the iops are limited

191
00:07:34,560 --> 00:07:38,080
uh is not exact it's not really feasible

192
00:07:37,280 --> 00:07:41,440
this thing

193
00:07:38,080 --> 00:07:44,800
pg repack is a historically

194
00:07:41,440 --> 00:07:49,199
the way for repacking tables

195
00:07:44,800 --> 00:07:51,199
without locking is a is a very good tool

196
00:07:49,199 --> 00:07:53,280
but the problem is you need to install

197
00:07:51,199 --> 00:07:54,720
the extension and on cloud database you

198
00:07:53,280 --> 00:07:58,080
can do that

199
00:07:54,720 --> 00:08:01,680
so in june

200
00:07:58,080 --> 00:08:02,400
i had this customer so they had exactly

201
00:08:01,680 --> 00:08:05,440
this problem

202
00:08:02,400 --> 00:08:08,560
cloud database with the uh

203
00:08:05,440 --> 00:08:12,319
impossibility to install pg repack so i

204
00:08:08,560 --> 00:08:15,440
i came out with this crazy idea and

205
00:08:12,319 --> 00:08:18,560
i i believe me it was incredibly crazy

206
00:08:15,440 --> 00:08:19,199
considering all i had to develop so they

207
00:08:18,560 --> 00:08:22,720
said

208
00:08:19,199 --> 00:08:26,479
oh let's go for it and that

209
00:08:22,720 --> 00:08:29,360
is the red cloud re-packing in cloud

210
00:08:26,479 --> 00:08:30,000
this is the the reason of the name uh he

211
00:08:29,360 --> 00:08:32,640
uses

212
00:08:30,000 --> 00:08:33,760
a similar strategy like pg repack pg

213
00:08:32,640 --> 00:08:36,958
repack

214
00:08:33,760 --> 00:08:39,039
creates a new table uh regenerates the

215
00:08:36,958 --> 00:08:40,880
data replace the data against this table

216
00:08:39,039 --> 00:08:44,880
and then swaps physically the

217
00:08:40,880 --> 00:08:46,880
the data at system catalog level

218
00:08:44,880 --> 00:08:49,439
rep cloud it doesn't use this strategy

219
00:08:46,880 --> 00:08:51,360
so is a logical procedure

220
00:08:49,440 --> 00:08:52,560
it requires minimal access on the

221
00:08:51,360 --> 00:08:56,080
database

222
00:08:52,560 --> 00:08:59,359
and he for example on heroku

223
00:08:56,080 --> 00:08:59,920
rds i think rds recently added pg repack

224
00:08:59,360 --> 00:09:02,640
to the

225
00:08:59,920 --> 00:09:04,479
to the list of extensions so probably uh

226
00:09:02,640 --> 00:09:06,160
it would be a better idea to use pg

227
00:09:04,480 --> 00:09:08,399
repack if available but

228
00:09:06,160 --> 00:09:10,480
on all the others that do not allow

229
00:09:08,399 --> 00:09:13,519
these sort of extensions

230
00:09:10,480 --> 00:09:14,160
rep cloud can help to uh reduce the

231
00:09:13,519 --> 00:09:17,760
bloat

232
00:09:14,160 --> 00:09:20,880
of the uh of the tables so

233
00:09:17,760 --> 00:09:24,000
how this thing works create a new table

234
00:09:20,880 --> 00:09:26,080
like the original one empty

235
00:09:24,000 --> 00:09:28,320
creates a log table with the same data

236
00:09:26,080 --> 00:09:30,320
type of the original table postgresoft

237
00:09:28,320 --> 00:09:32,480
is a fantastic thing called composite

238
00:09:30,320 --> 00:09:35,120
data types which describes

239
00:09:32,480 --> 00:09:37,760
also the tables and then a trigger

240
00:09:35,120 --> 00:09:39,920
stores the load changes that

241
00:09:37,760 --> 00:09:41,040
that happening onto the original table

242
00:09:39,920 --> 00:09:44,000
into this

243
00:09:41,040 --> 00:09:45,920
this this log table then the data is

244
00:09:44,000 --> 00:09:47,440
copied with just a select insert into

245
00:09:45,920 --> 00:09:50,880
the new table

246
00:09:47,440 --> 00:09:54,080
the log changes are replayed against the

247
00:09:50,880 --> 00:09:54,959
new table and then attempts to swap the

248
00:09:54,080 --> 00:09:58,320
table so

249
00:09:54,959 --> 00:09:59,760
renames the old the old one renames the

250
00:09:58,320 --> 00:10:03,040
new one to the old one

251
00:09:59,760 --> 00:10:05,120
and leave along and prosper not exactly

252
00:10:03,040 --> 00:10:06,719
because the swap is absolutely not

253
00:10:05,120 --> 00:10:10,399
revealed

254
00:10:06,720 --> 00:10:12,560
because the postgres dependency system

255
00:10:10,399 --> 00:10:13,920
is something you will see if you try to

256
00:10:12,560 --> 00:10:16,640
drop a

257
00:10:13,920 --> 00:10:18,880
table when there is a view attached to

258
00:10:16,640 --> 00:10:20,560
the table and you get oh i cannot drop

259
00:10:18,880 --> 00:10:24,079
it you have to use cascade

260
00:10:20,560 --> 00:10:27,760
don't use cascade it's very dangerous

261
00:10:24,079 --> 00:10:30,399
so even when you rename

262
00:10:27,760 --> 00:10:32,800
your table all the dependent object

263
00:10:30,399 --> 00:10:36,000
follow that table so you have to

264
00:10:32,800 --> 00:10:37,839
rebuild exactly the same objects onto

265
00:10:36,000 --> 00:10:39,839
the new table and then

266
00:10:37,839 --> 00:10:41,440
you can drop safely the old table

267
00:10:39,839 --> 00:10:44,640
otherwise you will lose

268
00:10:41,440 --> 00:10:48,320
information so

269
00:10:44,640 --> 00:10:51,519
what they has to be recreated sequences

270
00:10:48,320 --> 00:10:54,240
of course otherwise uh any uh

271
00:10:51,519 --> 00:10:55,440
insert with the default value using that

272
00:10:54,240 --> 00:10:58,480
sequence

273
00:10:55,440 --> 00:11:01,519
it will fail views

274
00:10:58,480 --> 00:11:04,959
materialized views and foreign keys

275
00:11:01,519 --> 00:11:06,320
but the problem is any other object that

276
00:11:04,959 --> 00:11:09,839
is related with these

277
00:11:06,320 --> 00:11:12,560
objects needs to be rebuilt as well so

278
00:11:09,839 --> 00:11:13,760
the entire chain of dependencies has to

279
00:11:12,560 --> 00:11:16,160
be rebuilt

280
00:11:13,760 --> 00:11:18,000
backward and then everything has to be

281
00:11:16,160 --> 00:11:20,959
dropped and recreated in the correct

282
00:11:18,000 --> 00:11:24,079
order otherwise it will fail

283
00:11:20,959 --> 00:11:25,518
and also we have another problem the

284
00:11:24,079 --> 00:11:28,719
deadlock

285
00:11:25,519 --> 00:11:30,800
the deadlock is when one transaction is

286
00:11:28,720 --> 00:11:32,640
waiting for the lock on another

287
00:11:30,800 --> 00:11:34,560
transaction which is waiting for the

288
00:11:32,640 --> 00:11:36,480
lock on the previous transaction there's

289
00:11:34,560 --> 00:11:40,640
no way to exit this chain

290
00:11:36,480 --> 00:11:43,920
so posgres kills one transaction

291
00:11:40,640 --> 00:11:47,120
randomly and freeze the

292
00:11:43,920 --> 00:11:47,760
the deadlock uh when it happens and this

293
00:11:47,120 --> 00:11:50,639
happens

294
00:11:47,760 --> 00:11:51,279
in particular when you have a chain of

295
00:11:50,639 --> 00:11:53,519
uh

296
00:11:51,279 --> 00:11:55,680
foreign keys so this table is referring

297
00:11:53,519 --> 00:11:57,040
to this one this one is going back this

298
00:11:55,680 --> 00:12:00,399
one is going back there

299
00:11:57,040 --> 00:12:03,120
so if you try to rebuild and or drop

300
00:12:00,399 --> 00:12:04,800
these foreign keys meanwhile they are in

301
00:12:03,120 --> 00:12:07,200
use so they are being

302
00:12:04,800 --> 00:12:09,040
checked and validated against the data

303
00:12:07,200 --> 00:12:11,440
changes you will get a deadlock

304
00:12:09,040 --> 00:12:12,560
there's no uh possibility this is this

305
00:12:11,440 --> 00:12:14,639
is a schema

306
00:12:12,560 --> 00:12:16,000
very simple this is the pg bench schema

307
00:12:14,639 --> 00:12:18,240
with foreign keys

308
00:12:16,000 --> 00:12:19,680
it's very useful for testing this sort

309
00:12:18,240 --> 00:12:21,360
of things and the first thing i learned

310
00:12:19,680 --> 00:12:24,638
when i tried to run the swap

311
00:12:21,360 --> 00:12:27,600
it was oh deadlock so

312
00:12:24,639 --> 00:12:29,760
how did i approach this thing i decided

313
00:12:27,600 --> 00:12:32,959
to

314
00:12:29,760 --> 00:12:33,360
add the choice on this tool so the user

315
00:12:32,959 --> 00:12:36,160
can

316
00:12:33,360 --> 00:12:36,839
can decide which which strategy to use

317
00:12:36,160 --> 00:12:40,000
uh

318
00:12:36,839 --> 00:12:42,079
basically uh red cloud does nothing

319
00:12:40,000 --> 00:12:44,000
when he he starts when detects the

320
00:12:42,079 --> 00:12:46,000
deadlock so he waits for the the

321
00:12:44,000 --> 00:12:49,440
database but it is possible to

322
00:12:46,000 --> 00:12:51,920
to say to tell rep cloud to

323
00:12:49,440 --> 00:12:52,880
uh kill or cancel the offending query

324
00:12:51,920 --> 00:12:55,360
the other query

325
00:12:52,880 --> 00:12:56,880
so the system automatically checks if

326
00:12:55,360 --> 00:12:59,279
there is a deadlock

327
00:12:56,880 --> 00:13:01,279
potential that block happening and the

328
00:12:59,279 --> 00:13:02,079
block one of the block had queried not

329
00:13:01,279 --> 00:13:04,480
the one that

330
00:13:02,079 --> 00:13:05,359
is running the swap is canceled or

331
00:13:04,480 --> 00:13:07,839
killed

332
00:13:05,360 --> 00:13:08,800
but sometimes it's not a good strategy

333
00:13:07,839 --> 00:13:12,560
for this thing

334
00:13:08,800 --> 00:13:16,079
so uh is also possible to run

335
00:13:12,560 --> 00:13:17,119
just a prepared swap so everything is

336
00:13:16,079 --> 00:13:19,599
made

337
00:13:17,120 --> 00:13:21,680
until the end before the swap so the

338
00:13:19,600 --> 00:13:24,560
table is created the logs are

339
00:13:21,680 --> 00:13:24,959
uh are populated by the trigger there is

340
00:13:24,560 --> 00:13:28,399
the

341
00:13:24,959 --> 00:13:29,439
replay functions running to replay and

342
00:13:28,399 --> 00:13:31,600
catch up with the

343
00:13:29,440 --> 00:13:33,120
existing table so it's possible to stop

344
00:13:31,600 --> 00:13:36,000
the application

345
00:13:33,120 --> 00:13:37,279
and say okay now we can swap without the

346
00:13:36,000 --> 00:13:40,320
risk of deadlock so

347
00:13:37,279 --> 00:13:41,519
few seconds of downtime for swapping the

348
00:13:40,320 --> 00:13:44,320
relations

349
00:13:41,519 --> 00:13:45,199
uh i think is something he can be

350
00:13:44,320 --> 00:13:49,440
afforded

351
00:13:45,199 --> 00:13:53,040
rather a long-running vacuum full

352
00:13:49,440 --> 00:13:55,040
also it can change the fill factor for

353
00:13:53,040 --> 00:13:55,519
the table fill factory is a very useful

354
00:13:55,040 --> 00:13:58,079
thing

355
00:13:55,519 --> 00:14:00,079
so you can set the parameters this is a

356
00:13:58,079 --> 00:14:01,040
something still i'm working on it that

357
00:14:00,079 --> 00:14:04,000
moment they can

358
00:14:01,040 --> 00:14:04,959
set the fill factor but my idea it will

359
00:14:04,000 --> 00:14:07,360
add the

360
00:14:04,959 --> 00:14:08,239
change table space change index table

361
00:14:07,360 --> 00:14:10,079
space

362
00:14:08,240 --> 00:14:12,240
everything is configurable at this level

363
00:14:10,079 --> 00:14:14,160
so it's possible to create the new table

364
00:14:12,240 --> 00:14:14,800
with a different fill factor so the new

365
00:14:14,160 --> 00:14:18,079
table

366
00:14:14,800 --> 00:14:18,560
will be less impacted by bloating

367
00:14:18,079 --> 00:14:21,120
because

368
00:14:18,560 --> 00:14:22,000
there will be more space inside the data

369
00:14:21,120 --> 00:14:24,240
pages

370
00:14:22,000 --> 00:14:25,360
for the updates this is one of the

371
00:14:24,240 --> 00:14:28,560
strategies

372
00:14:25,360 --> 00:14:30,079
for designing tables that might be

373
00:14:28,560 --> 00:14:32,560
affected by the bloat

374
00:14:30,079 --> 00:14:34,160
he can clean up the json b and json

375
00:14:32,560 --> 00:14:37,439
fields from the null keys

376
00:14:34,160 --> 00:14:39,199
so he makes the json fields more compact

377
00:14:37,440 --> 00:14:41,120
and also it's possible to remove the

378
00:14:39,199 --> 00:14:43,519
keys but just from the json fields

379
00:14:41,120 --> 00:14:45,360
json b fields because the function that

380
00:14:43,519 --> 00:14:49,519
runs this operation is present

381
00:14:45,360 --> 00:14:52,720
only for that data type mori will come

382
00:14:49,519 --> 00:14:55,680
and this is the uh the tool

383
00:14:52,720 --> 00:14:57,279
in in short i would like to recognize

384
00:14:55,680 --> 00:14:58,160
give some recognition this is the

385
00:14:57,279 --> 00:15:01,199
company that

386
00:14:58,160 --> 00:15:03,439
gave me the uh believe it in me

387
00:15:01,199 --> 00:15:05,760
and gave me the permission to release

388
00:15:03,440 --> 00:15:08,160
this thing as an open source project

389
00:15:05,760 --> 00:15:10,959
it wasn't supposed to be that but i

390
00:15:08,160 --> 00:15:14,000
think he might help a lot of people

391
00:15:10,959 --> 00:15:15,839
the depends the resolution is derived

392
00:15:14,000 --> 00:15:18,160
from the pg admin team

393
00:15:15,839 --> 00:15:19,440
i used their queries they adapted to my

394
00:15:18,160 --> 00:15:22,480
need they were

395
00:15:19,440 --> 00:15:24,800
amazing they saved a lot of time for

396
00:15:22,480 --> 00:15:26,000
building up the crazy the dependency

397
00:15:24,800 --> 00:15:28,560
system in postgres is

398
00:15:26,000 --> 00:15:29,279
is insane so you have to get through a

399
00:15:28,560 --> 00:15:32,479
lot of

400
00:15:29,279 --> 00:15:34,720
outer join for getting everything uh

401
00:15:32,480 --> 00:15:36,880
and also the replay strategy is inspired

402
00:15:34,720 --> 00:15:38,880
by the pg republic code so waiting for

403
00:15:36,880 --> 00:15:41,680
the transactions before

404
00:15:38,880 --> 00:15:43,920
starting effectively the copy is

405
00:15:41,680 --> 00:15:46,079
something inside the serialize

406
00:15:43,920 --> 00:15:48,000
the transaction isolation level is

407
00:15:46,079 --> 00:15:50,079
something that

408
00:15:48,000 --> 00:15:53,600
helped me a lot to understand how to

409
00:15:50,079 --> 00:15:57,279
approach this problem

410
00:15:53,600 --> 00:15:59,440
this is the github project is uh

411
00:15:57,279 --> 00:16:00,399
on uh this is my github there's also

412
00:15:59,440 --> 00:16:02,880
other projects

413
00:16:00,399 --> 00:16:05,040
the other important project on this on

414
00:16:02,880 --> 00:16:07,839
this github page is pg chameleon

415
00:16:05,040 --> 00:16:08,639
a replication tool for from my sequel to

416
00:16:07,839 --> 00:16:11,680
postgres

417
00:16:08,639 --> 00:16:13,759
uh this is pg chameleon is very usable

418
00:16:11,680 --> 00:16:15,279
uh and it's something i i want to pick

419
00:16:13,759 --> 00:16:17,680
up i've been

420
00:16:15,279 --> 00:16:18,480
distracted in the last year but it is

421
00:16:17,680 --> 00:16:22,000
something

422
00:16:18,480 --> 00:16:24,320
i want to improve and also this

423
00:16:22,000 --> 00:16:25,040
thing the is available on pipeline so

424
00:16:24,320 --> 00:16:27,680
you can just

425
00:16:25,040 --> 00:16:28,480
uh is an alpha release at moment but we

426
00:16:27,680 --> 00:16:31,040
tested on

427
00:16:28,480 --> 00:16:32,240
production it worked incredibly well for

428
00:16:31,040 --> 00:16:35,360
repacking a

429
00:16:32,240 --> 00:16:37,040
300 gigabyte table it took about four

430
00:16:35,360 --> 00:16:39,920
days

431
00:16:37,040 --> 00:16:40,560
which were supposed to be downtime and

432
00:16:39,920 --> 00:16:42,800
it wasn't

433
00:16:40,560 --> 00:16:44,800
so the customer was very very happy

434
00:16:42,800 --> 00:16:47,920
about that

435
00:16:44,800 --> 00:16:50,639
and the the license terms

436
00:16:47,920 --> 00:16:51,599
are the postgres license uh i like this

437
00:16:50,639 --> 00:16:54,880
license i think

438
00:16:51,600 --> 00:16:56,639
pg chameleon started as a bsd license

439
00:16:54,880 --> 00:16:59,360
uh it will move on the postgres it makes

440
00:16:56,639 --> 00:17:02,720
more sense is a postgres related project

441
00:16:59,360 --> 00:17:05,199
and if you want to break it and report

442
00:17:02,720 --> 00:17:05,760
or you want to help me to build up this

443
00:17:05,199 --> 00:17:08,559
thing

444
00:17:05,760 --> 00:17:09,439
i think i will build i will write the uh

445
00:17:08,559 --> 00:17:11,119
collaboration

446
00:17:09,439 --> 00:17:12,480
guidelines very very soon for this

447
00:17:11,119 --> 00:17:14,799
project uh

448
00:17:12,480 --> 00:17:16,640
i will be very very happy to to get any

449
00:17:14,799 --> 00:17:20,400
help about that thing

450
00:17:16,640 --> 00:17:23,600
uh those are my contacts uh this is my

451
00:17:20,400 --> 00:17:26,959
blog pgdba.org where i write

452
00:17:23,599 --> 00:17:30,240
stuff about postgres twitter already so

453
00:17:26,959 --> 00:17:34,240
said github and my linkedin page

454
00:17:30,240 --> 00:17:37,280
work on uh the creative commons

455
00:17:34,240 --> 00:17:38,559
and if you want to hear about horror

456
00:17:37,280 --> 00:17:40,720
stories tomorrow

457
00:17:38,559 --> 00:17:42,559
uh i will speak at the postgres dev room

458
00:17:40,720 --> 00:17:45,679
about rtfm

459
00:17:42,559 --> 00:17:46,720
anybody knows what rtfm means sure you

460
00:17:45,679 --> 00:17:49,840
do

461
00:17:46,720 --> 00:17:52,480
so i will tell about interesting

462
00:17:49,840 --> 00:17:53,520
uh and funny things is the the last talk

463
00:17:52,480 --> 00:17:56,640
of the day so i

464
00:17:53,520 --> 00:17:57,440
i have to be entertaining and that's all

465
00:17:56,640 --> 00:17:59,919
folks

466
00:17:57,440 --> 00:18:01,920
and there are any question thank you for

467
00:17:59,919 --> 00:18:08,279
listening

468
00:18:01,920 --> 00:18:08,279
[Applause]

469
00:18:11,679 --> 00:18:15,360
it's not directly related to the rip

470
00:18:13,360 --> 00:18:15,918
clouds but do you consider partitioning

471
00:18:15,360 --> 00:18:19,360
as the

472
00:18:15,919 --> 00:18:23,039
solution against blood well

473
00:18:19,360 --> 00:18:25,360
partition is not designed for a solution

474
00:18:23,039 --> 00:18:26,799
for the bloat is for having more

475
00:18:25,360 --> 00:18:28,399
efficient storage when you have a

476
00:18:26,799 --> 00:18:31,600
monolithic table

477
00:18:28,400 --> 00:18:34,240
so solution for the bloat is

478
00:18:31,600 --> 00:18:36,159
looking at the storage parameters so

479
00:18:34,240 --> 00:18:39,679
fill factor

480
00:18:36,160 --> 00:18:43,440
trying to avoid unnecessary updates

481
00:18:39,679 --> 00:18:46,720
and one thing you have to look into the

482
00:18:43,440 --> 00:18:50,000
uh pg start all tables

483
00:18:46,720 --> 00:18:52,640
uh there is the uh the field called uh

484
00:18:50,000 --> 00:18:54,559
two odd uh counter or something like

485
00:18:52,640 --> 00:18:55,360
that i don't remember my shared buffer

486
00:18:54,559 --> 00:18:57,200
is limited

487
00:18:55,360 --> 00:18:58,479
but there's something with the hot

488
00:18:57,200 --> 00:19:00,640
inside if

489
00:18:58,480 --> 00:19:02,320
this counter increases it means the

490
00:19:00,640 --> 00:19:04,320
tuple when is updated

491
00:19:02,320 --> 00:19:06,159
it stays inside the same pages so it's a

492
00:19:04,320 --> 00:19:06,720
very good thing so if you have a lot of

493
00:19:06,160 --> 00:19:09,120
updates

494
00:19:06,720 --> 00:19:10,320
and a very a similar numbers on the

495
00:19:09,120 --> 00:19:13,600
other field

496
00:19:10,320 --> 00:19:13,600
you are doing very very right

497
00:19:14,640 --> 00:19:17,600
any other questions

498
00:19:19,280 --> 00:19:25,840
cool that's alright thank you

499
00:19:29,120 --> 00:19:31,199
you

