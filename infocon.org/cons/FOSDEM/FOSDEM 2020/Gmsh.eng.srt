1
00:00:05,050 --> 00:00:10,510
[Applause]

2
00:00:14,160 --> 00:00:18,000
it's my yellow period

3
00:00:15,679 --> 00:00:19,600
you know you have all the painters have

4
00:00:18,000 --> 00:00:20,960
different periods you have the blue one

5
00:00:19,600 --> 00:00:23,760
this is the yellow one

6
00:00:20,960 --> 00:00:25,760
and so you'll get a yellow talk okay so

7
00:00:23,760 --> 00:00:27,760
thanks for inviting me

8
00:00:25,760 --> 00:00:30,160
um so i'm christophe gozan i'm a

9
00:00:27,760 --> 00:00:33,280
professor at the university of liege

10
00:00:30,160 --> 00:00:35,760
liege is like an hour from here i'm

11
00:00:33,280 --> 00:00:37,680
a leader team of about 15 20 people over

12
00:00:35,760 --> 00:00:39,440
there and we do applied math

13
00:00:37,680 --> 00:00:42,640
scientific computing and engineering

14
00:00:39,440 --> 00:00:43,120
physics and basically we write codes to

15
00:00:42,640 --> 00:00:46,320
solve

16
00:00:43,120 --> 00:00:47,038
pdes and we also do the stuff that goes

17
00:00:46,320 --> 00:00:48,960
around that

18
00:00:47,039 --> 00:00:50,800
which is about mesh generation so we use

19
00:00:48,960 --> 00:00:51,760
finite elements and so we need final

20
00:00:50,800 --> 00:00:54,559
element meshes

21
00:00:51,760 --> 00:00:56,718
for various applications and we like

22
00:00:54,559 --> 00:00:58,399
open source so we release quite a few

23
00:00:56,719 --> 00:01:00,800
open source software tools and so the

24
00:00:58,399 --> 00:01:03,199
one i'm going to talk to you about today

25
00:01:00,800 --> 00:01:04,640
is gmash so what is gmash have you used

26
00:01:03,199 --> 00:01:07,520
gmash before

27
00:01:04,640 --> 00:01:09,920
some of you oh yeah not as nice as open

28
00:01:07,520 --> 00:01:12,080
cascade but okay still

29
00:01:09,920 --> 00:01:13,840
still pretty good all right so gmash is

30
00:01:12,080 --> 00:01:15,039
an open source 3d mesh generator so

31
00:01:13,840 --> 00:01:16,720
there are quite a few commercial

32
00:01:15,040 --> 00:01:20,240
offerings in that space

33
00:01:16,720 --> 00:01:22,320
gmash is open source um it's probably

34
00:01:20,240 --> 00:01:23,759
nowadays the most commonly used open

35
00:01:22,320 --> 00:01:25,839
source mesh generation for

36
00:01:23,759 --> 00:01:27,680
meteorologist for final elements just

37
00:01:25,840 --> 00:01:30,000
because it includes let's say the whole

38
00:01:27,680 --> 00:01:30,960
pipeline so you can build geometry you

39
00:01:30,000 --> 00:01:32,960
can mesh

40
00:01:30,960 --> 00:01:35,039
you can export you can visualize some

41
00:01:32,960 --> 00:01:36,960
results and you can also interface some

42
00:01:35,040 --> 00:01:40,079
some solvers directly

43
00:01:36,960 --> 00:01:43,520
so what is it uh

44
00:01:40,079 --> 00:01:45,360
if we look at uh the size of it so it's

45
00:01:43,520 --> 00:01:47,360
not a small project it's not a large

46
00:01:45,360 --> 00:01:50,720
project it's a bit in the middle

47
00:01:47,360 --> 00:01:53,520
so it's half a million of um c plus plus

48
00:01:50,720 --> 00:01:55,200
lines of code uh it still developed a

49
00:01:53,520 --> 00:01:56,719
kernel by two people only

50
00:01:55,200 --> 00:01:59,520
so jean-francois romer from the

51
00:01:56,719 --> 00:02:00,640
university of nerve and myself

52
00:01:59,520 --> 00:02:02,560
and then we have quite a few

53
00:02:00,640 --> 00:02:03,040
contributions in external modules that

54
00:02:02,560 --> 00:02:05,920
we call

55
00:02:03,040 --> 00:02:07,439
contributors or contributions and so

56
00:02:05,920 --> 00:02:08,080
over there we have like a hundred let's

57
00:02:07,439 --> 00:02:10,239
say

58
00:02:08,080 --> 00:02:11,680
significant contributors that have

59
00:02:10,239 --> 00:02:14,319
pushed something

60
00:02:11,680 --> 00:02:14,959
of reasonable size in the in the repo

61
00:02:14,319 --> 00:02:17,119
there are people

62
00:02:14,959 --> 00:02:18,239
mailing lists it's about to give you an

63
00:02:17,120 --> 00:02:21,040
idea 10

64
00:02:18,239 --> 00:02:23,120
000 downloads per month academically

65
00:02:21,040 --> 00:02:23,599
it's a quite successful project so it's

66
00:02:23,120 --> 00:02:26,720
got

67
00:02:23,599 --> 00:02:28,000
quite a lot of citations and so it has

68
00:02:26,720 --> 00:02:29,840
become as i said before

69
00:02:28,000 --> 00:02:31,280
one of the go-to let's say open source

70
00:02:29,840 --> 00:02:33,120
solutions when you need to do a finite

71
00:02:31,280 --> 00:02:34,959
element mesh

72
00:02:33,120 --> 00:02:36,400
there are 20 years of development if you

73
00:02:34,959 --> 00:02:39,360
want to have a look at what

74
00:02:36,400 --> 00:02:39,920
gives what this looks like this is a

75
00:02:39,360 --> 00:02:42,959
gorgeous

76
00:02:39,920 --> 00:02:45,518
animation with the yellow

77
00:02:42,959 --> 00:02:46,239
tint in the screen it's it's not super

78
00:02:45,519 --> 00:02:48,400
nice

79
00:02:46,239 --> 00:02:51,120
but what you will see and it's quite

80
00:02:48,400 --> 00:02:53,599
short so i sped it up over 20 years

81
00:02:51,120 --> 00:02:55,120
to last for just about a minute and so

82
00:02:53,599 --> 00:02:56,799
what you will see and what i want to

83
00:02:55,120 --> 00:02:58,800
show you is that you have like

84
00:02:56,800 --> 00:03:01,280
three main bits of the ripple that will

85
00:02:58,800 --> 00:03:03,680
appear you have like the kernel

86
00:03:01,280 --> 00:03:05,360
that gets worked on a lot mostly by two

87
00:03:03,680 --> 00:03:07,120
people and then you have two

88
00:03:05,360 --> 00:03:09,920
external things so you have the

89
00:03:07,120 --> 00:03:12,400
contributions and then you have the

90
00:03:09,920 --> 00:03:13,679
the benchmarks or the validation cases

91
00:03:12,400 --> 00:03:14,640
and you'll see that those actually are

92
00:03:13,680 --> 00:03:16,879
pretty cold

93
00:03:14,640 --> 00:03:18,879
so we try to keep them let's say steady

94
00:03:16,879 --> 00:03:20,799
over the years so that we can manage

95
00:03:18,879 --> 00:03:22,640
to generate let's say correct meshes

96
00:03:20,800 --> 00:03:23,760
over even very old data sets

97
00:03:22,640 --> 00:03:26,079
and this is what you see there on the

98
00:03:23,760 --> 00:03:29,599
screen i don't think my mouse works

99
00:03:26,080 --> 00:03:31,280
so this is the kernel here uh this is

100
00:03:29,599 --> 00:03:33,599
the contributions you see that

101
00:03:31,280 --> 00:03:35,519
is actually larger than the kernel and

102
00:03:33,599 --> 00:03:36,959
then you have these let's say test cases

103
00:03:35,519 --> 00:03:39,120
there that should stay

104
00:03:36,959 --> 00:03:40,720
let's say valid over the long run and so

105
00:03:39,120 --> 00:03:41,440
these are the three main bits in the

106
00:03:40,720 --> 00:03:44,480
repo

107
00:03:41,440 --> 00:03:46,400
that you will see so this is a bit of

108
00:03:44,480 --> 00:03:48,560
history so it's an all project it was

109
00:03:46,400 --> 00:03:50,799
started more than 20 years ago

110
00:03:48,560 --> 00:03:52,480
and you see there are several let's say

111
00:03:50,799 --> 00:03:54,480
major milestones

112
00:03:52,480 --> 00:03:56,798
at the beginning it wasn't open source

113
00:03:54,480 --> 00:03:57,200
uh it was just a toy project that i did

114
00:03:56,799 --> 00:03:59,840
with

115
00:03:57,200 --> 00:04:00,319
jean-francois and then what we went

116
00:03:59,840 --> 00:04:03,360
through

117
00:04:00,319 --> 00:04:03,760
is typical stages of development so open

118
00:04:03,360 --> 00:04:07,840
source

119
00:04:03,760 --> 00:04:09,840
in 2006 uh 2003 sorry under new gpl

120
00:04:07,840 --> 00:04:11,360
and then you see all the major features

121
00:04:09,840 --> 00:04:13,439
that were added

122
00:04:11,360 --> 00:04:15,760
over the years and you also see an

123
00:04:13,439 --> 00:04:18,959
acceleration actually of major releases

124
00:04:15,760 --> 00:04:21,120
you see that version three came well

125
00:04:18,959 --> 00:04:22,960
more than ten years after version two

126
00:04:21,120 --> 00:04:24,240
but version four came just one year

127
00:04:22,960 --> 00:04:25,919
after version three

128
00:04:24,240 --> 00:04:27,600
and so development has been accelerating

129
00:04:25,919 --> 00:04:29,840
because we've been investing

130
00:04:27,600 --> 00:04:30,960
a lot more uh time actually in

131
00:04:29,840 --> 00:04:34,320
developing g mesh

132
00:04:30,960 --> 00:04:37,198
recently choices that we made

133
00:04:34,320 --> 00:04:38,080
so it's simple c plus plus uh it's still

134
00:04:37,199 --> 00:04:40,800
actually

135
00:04:38,080 --> 00:04:42,159
c plus plus 98 compatible version five

136
00:04:40,800 --> 00:04:43,759
will drop that

137
00:04:42,160 --> 00:04:45,759
why do we do that because we have quite

138
00:04:43,759 --> 00:04:46,800
a few embedders that actually use a

139
00:04:45,759 --> 00:04:49,840
gmash library

140
00:04:46,800 --> 00:04:51,199
inside codes that run on all computers

141
00:04:49,840 --> 00:04:52,239
all supercomputers that are in

142
00:04:51,199 --> 00:04:53,919
commercial products

143
00:04:52,240 --> 00:04:56,320
and so we still maintain backward

144
00:04:53,919 --> 00:04:56,880
compatibility uh quite a bit it has a

145
00:04:56,320 --> 00:04:59,840
gui

146
00:04:56,880 --> 00:05:01,520
it's opengl for graphics highly portable

147
00:04:59,840 --> 00:05:03,440
and for those of you who use it you know

148
00:05:01,520 --> 00:05:04,719
that to install a binary is quite easy

149
00:05:03,440 --> 00:05:05,600
even if you don't go through a

150
00:05:04,720 --> 00:05:09,280
distribution

151
00:05:05,600 --> 00:05:11,199
you just get the binary and it works

152
00:05:09,280 --> 00:05:13,359
we use quite a few third-party libraries

153
00:05:11,199 --> 00:05:16,000
we use cmake

154
00:05:13,360 --> 00:05:18,320
and then in the beginning it was a hobby

155
00:05:16,000 --> 00:05:20,320
my own research was about pde solvers

156
00:05:18,320 --> 00:05:22,159
and so mesh generation was a hobby and

157
00:05:20,320 --> 00:05:26,320
nowadays it's become half of my

158
00:05:22,160 --> 00:05:28,880
let's say the time i spent in research

159
00:05:26,320 --> 00:05:31,120
what about community actually we are not

160
00:05:28,880 --> 00:05:32,800
on github or gitlab we use our own git

161
00:05:31,120 --> 00:05:34,160
lab and why do we do that because we're

162
00:05:32,800 --> 00:05:35,600
public and private parts

163
00:05:34,160 --> 00:05:38,280
and so we want to be able to manage the

164
00:05:35,600 --> 00:05:39,440
whole thing so it's hosted on

165
00:05:38,280 --> 00:05:41,198
gitlab.onelab.info

166
00:05:39,440 --> 00:05:43,840
and you have all the usual shebango

167
00:05:41,199 --> 00:05:46,960
features with mailing lists and stuff

168
00:05:43,840 --> 00:05:48,960
licensing is gpl v2 or later

169
00:05:46,960 --> 00:05:51,359
and we have exceptions so that actually

170
00:05:48,960 --> 00:05:52,799
people who want to combine gms with

171
00:05:51,360 --> 00:05:56,160
non-gpl software can

172
00:05:52,800 --> 00:05:58,000
can do this easily what are the concepts

173
00:05:56,160 --> 00:05:59,520
i'll go very briefly on that so i have

174
00:05:58,000 --> 00:06:01,280
like two slides for each of the modules

175
00:05:59,520 --> 00:06:04,960
in gmash you have four main modules

176
00:06:01,280 --> 00:06:06,719
geometry mesh solver and post-processing

177
00:06:04,960 --> 00:06:09,120
and you can use gmash at three levels

178
00:06:06,720 --> 00:06:11,199
either graphically through a gui

179
00:06:09,120 --> 00:06:12,160
it's a simple gui but it's extremely

180
00:06:11,199 --> 00:06:14,319
useful for

181
00:06:12,160 --> 00:06:15,919
the academic part of gmash so i use this

182
00:06:14,319 --> 00:06:16,880
for teaching and quite a few groups use

183
00:06:15,919 --> 00:06:18,719
this for teaching

184
00:06:16,880 --> 00:06:20,880
all over the world you can use a

185
00:06:18,720 --> 00:06:22,720
dedicated geo language

186
00:06:20,880 --> 00:06:24,000
this is the language that was created

187
00:06:22,720 --> 00:06:26,400
before python

188
00:06:24,000 --> 00:06:27,680
was there and so we needed to have our

189
00:06:26,400 --> 00:06:29,280
own little language

190
00:06:27,680 --> 00:06:31,520
and then you can use it the modern way

191
00:06:29,280 --> 00:06:34,239
to use gmashi through the api

192
00:06:31,520 --> 00:06:34,880
and so this api is either c plus plus c

193
00:06:34,240 --> 00:06:38,160
python

194
00:06:34,880 --> 00:06:39,360
and or julia there is one main

195
00:06:38,160 --> 00:06:41,680
characteristic that

196
00:06:39,360 --> 00:06:43,199
undergoes let's say that underpins

197
00:06:41,680 --> 00:06:46,160
everything that's done in gmash

198
00:06:43,199 --> 00:06:47,120
is that it is cad agnostic meaning that

199
00:06:46,160 --> 00:06:49,680
all the algorithms

200
00:06:47,120 --> 00:06:50,479
are written in a generic way so that you

201
00:06:49,680 --> 00:06:52,960
can attack

202
00:06:50,479 --> 00:06:54,639
natively geometrical representations

203
00:06:52,960 --> 00:06:56,080
that are very different

204
00:06:54,639 --> 00:06:58,160
one of the geometrical representations

205
00:06:56,080 --> 00:07:01,198
that we attack is open cascade

206
00:06:58,160 --> 00:07:03,840
but we never translate so basically

207
00:07:01,199 --> 00:07:05,520
we use the kernel for each geometrical

208
00:07:03,840 --> 00:07:07,679
representation directly

209
00:07:05,520 --> 00:07:10,080
to do all the operations either

210
00:07:07,680 --> 00:07:14,840
geometrical operations or meshing

211
00:07:10,080 --> 00:07:17,359
and so that means that basically you can

212
00:07:14,840 --> 00:07:21,039
mesh without losing

213
00:07:17,360 --> 00:07:22,960
any accuracy in the original model

214
00:07:21,039 --> 00:07:24,960
models that are like this so this is a

215
00:07:22,960 --> 00:07:27,120
typical cad model this is landing gear

216
00:07:24,960 --> 00:07:29,359
for an airbus

217
00:07:27,120 --> 00:07:31,280
you can mesh stuff in our own let's say

218
00:07:29,360 --> 00:07:33,120
native let's say geometric description

219
00:07:31,280 --> 00:07:37,039
format so these are multi-scale

220
00:07:33,120 --> 00:07:39,440
geophysics models or you can mesh

221
00:07:37,039 --> 00:07:40,479
discrete data so data that would come

222
00:07:39,440 --> 00:07:42,840
from imaging

223
00:07:40,479 --> 00:07:45,039
processes for example in medical image

224
00:07:42,840 --> 00:07:46,719
processors

225
00:07:45,039 --> 00:07:48,878
what do we do then as i said we

226
00:07:46,720 --> 00:07:52,479
basically use the native kernel for each

227
00:07:48,879 --> 00:07:53,919
representation to do all the operations

228
00:07:52,479 --> 00:07:55,520
then you have a mesh module of course so

229
00:07:53,919 --> 00:07:57,039
that's the second module and what does

230
00:07:55,520 --> 00:07:59,198
the mesh model do well it produces

231
00:07:57,039 --> 00:08:00,878
meshes this is the core of gmash

232
00:07:59,199 --> 00:08:03,599
and we have a whole bunch of algorithms

233
00:08:00,879 --> 00:08:06,080
from from 1d to 3d

234
00:08:03,599 --> 00:08:08,319
many things you can imagine interfaces

235
00:08:06,080 --> 00:08:10,560
interfaces also to

236
00:08:08,319 --> 00:08:12,720
external mesh generators and then the

237
00:08:10,560 --> 00:08:14,479
data structures are designed in such a

238
00:08:12,720 --> 00:08:15,680
way that we generate efficiently when we

239
00:08:14,479 --> 00:08:17,359
modify efficiently

240
00:08:15,680 --> 00:08:20,400
conformal finite element meshes for

241
00:08:17,360 --> 00:08:22,240
those of you who know what this is

242
00:08:20,400 --> 00:08:23,758
typically what you need to know is that

243
00:08:22,240 --> 00:08:25,759
if you want to mesh something like the

244
00:08:23,759 --> 00:08:27,599
simple piece on the left

245
00:08:25,759 --> 00:08:29,280
actually what this is an open cascade

246
00:08:27,599 --> 00:08:30,800
geometry this is what open cascade

247
00:08:29,280 --> 00:08:33,039
actually has internally for the

248
00:08:30,800 --> 00:08:35,200
parametric representation of the surface

249
00:08:33,039 --> 00:08:36,880
and so you see that it's mathematically

250
00:08:35,200 --> 00:08:38,560
speaking horrible

251
00:08:36,880 --> 00:08:41,200
you have a singularity over here right

252
00:08:38,559 --> 00:08:44,399
this edge there degenerates to a point

253
00:08:41,200 --> 00:08:46,240
and so this is periodic and so

254
00:08:44,399 --> 00:08:47,360
to generate a mesh for this a mesh that

255
00:08:46,240 --> 00:08:48,800
looks like this you actually need to

256
00:08:47,360 --> 00:08:50,160
generate this

257
00:08:48,800 --> 00:08:52,319
okay and so this is how it works

258
00:08:50,160 --> 00:08:53,360
internally so everything is basically an

259
00:08:52,320 --> 00:08:54,800
isotropic

260
00:08:53,360 --> 00:08:56,880
highly stretched with various

261
00:08:54,800 --> 00:08:58,399
constraints

262
00:08:56,880 --> 00:09:00,240
there is a solver module that doesn't

263
00:08:58,399 --> 00:09:03,120
contain any solver so basically it's

264
00:09:00,240 --> 00:09:04,560
just an interface to solvers

265
00:09:03,120 --> 00:09:06,399
and then you have a post-processing

266
00:09:04,560 --> 00:09:08,959
module that we still use

267
00:09:06,399 --> 00:09:10,399
compared to view because we can do high

268
00:09:08,959 --> 00:09:12,239
order visualization

269
00:09:10,399 --> 00:09:13,760
that part you will introduce they have

270
00:09:12,240 --> 00:09:17,040
some things but it's not there

271
00:09:13,760 --> 00:09:17,360
yet what about recent stuff so i'll show

272
00:09:17,040 --> 00:09:20,800
you

273
00:09:17,360 --> 00:09:21,760
four let's say recent things that we've

274
00:09:20,800 --> 00:09:25,439
been doing

275
00:09:21,760 --> 00:09:27,200
first one is a nice interface to csg so

276
00:09:25,440 --> 00:09:29,920
to construct a solid geometry

277
00:09:27,200 --> 00:09:31,519
it's again cat kernel agnostic so you

278
00:09:29,920 --> 00:09:33,120
can change the cat kernel you do the

279
00:09:31,519 --> 00:09:34,839
operations and you get the result

280
00:09:33,120 --> 00:09:37,200
whatever the cat kernel that you have

281
00:09:34,839 --> 00:09:38,880
underneath an api

282
00:09:37,200 --> 00:09:40,800
i'll show you some numbers about

283
00:09:38,880 --> 00:09:42,880
parallel meshing and then something

284
00:09:40,800 --> 00:09:46,800
quite neat that we introduced recently

285
00:09:42,880 --> 00:09:48,560
is the meshing of stls so csg

286
00:09:46,800 --> 00:09:51,199
you've seen the open cascade talk so you

287
00:09:48,560 --> 00:09:53,839
know how it works basically in the geo

288
00:09:51,200 --> 00:09:57,040
format it looks like that so you have

289
00:09:53,839 --> 00:09:58,560
basic commands and you have your boolean

290
00:09:57,040 --> 00:10:00,319
operators over there

291
00:09:58,560 --> 00:10:03,279
the main thing in gmash is that line

292
00:10:00,320 --> 00:10:04,880
over there so set factory open cascade

293
00:10:03,279 --> 00:10:06,800
this will allow you to have a fully open

294
00:10:04,880 --> 00:10:08,720
source solution because you use the open

295
00:10:06,800 --> 00:10:11,279
source open cascade cad kernel

296
00:10:08,720 --> 00:10:13,120
but you can change that to set factory

297
00:10:11,279 --> 00:10:14,880
competitor over pen cascade so that you

298
00:10:13,120 --> 00:10:16,560
do the same thing

299
00:10:14,880 --> 00:10:18,880
and this gives you let's say an id of

300
00:10:16,560 --> 00:10:22,000
the gmash gui

301
00:10:18,880 --> 00:10:24,399
what is the api it's actually our third

302
00:10:22,000 --> 00:10:25,920
attempt at doing an api

303
00:10:24,399 --> 00:10:26,959
what are the constraints we wanted to do

304
00:10:25,920 --> 00:10:29,439
everything that we could do in the

305
00:10:26,959 --> 00:10:31,760
simple script files

306
00:10:29,440 --> 00:10:32,800
and of course much more we wanted to be

307
00:10:31,760 --> 00:10:35,600
robust we

308
00:10:32,800 --> 00:10:36,800
didn't want bad input to crash so we

309
00:10:35,600 --> 00:10:38,079
didn't want to have any access to

310
00:10:36,800 --> 00:10:40,319
pointers

311
00:10:38,079 --> 00:10:42,000
we wanted to be efficient but still to

312
00:10:40,320 --> 00:10:43,760
do simple things simply you should

313
00:10:42,000 --> 00:10:44,240
remember i'm a professor so i teach with

314
00:10:43,760 --> 00:10:46,800
this

315
00:10:44,240 --> 00:10:48,560
i still want a sphere of cube to be

316
00:10:46,800 --> 00:10:50,800
describable quite easily and

317
00:10:48,560 --> 00:10:52,319
straightforwardly and we want to be able

318
00:10:50,800 --> 00:10:54,800
to maintain this over the long run

319
00:10:52,320 --> 00:10:56,000
and when i say we it's two persons and

320
00:10:54,800 --> 00:10:58,319
so we want to be

321
00:10:56,000 --> 00:11:00,240
on top of this what did we do pretty

322
00:10:58,320 --> 00:11:02,560
much we did fortran

323
00:11:00,240 --> 00:11:03,600
so it's super simple the idea is that

324
00:11:02,560 --> 00:11:06,560
the api is fully

325
00:11:03,600 --> 00:11:08,000
purely functional and it only uses basic

326
00:11:06,560 --> 00:11:10,319
types from the target language

327
00:11:08,000 --> 00:11:11,440
so integers double strings and arrays

328
00:11:10,320 --> 00:11:13,920
those things

329
00:11:11,440 --> 00:11:15,200
and it's fully documented in a document

330
00:11:13,920 --> 00:11:16,959
documented that it's generated

331
00:11:15,200 --> 00:11:18,399
automatically

332
00:11:16,959 --> 00:11:20,880
and so it would look like that so if you

333
00:11:18,399 --> 00:11:21,680
use python this is what how i use gmash

334
00:11:20,880 --> 00:11:23,519
nowadays

335
00:11:21,680 --> 00:11:24,800
and so basically we have a single gmash

336
00:11:23,519 --> 00:11:26,959
module

337
00:11:24,800 --> 00:11:28,160
we can distribute this there is an sdk

338
00:11:26,959 --> 00:11:30,079
actually on the web

339
00:11:28,160 --> 00:11:32,959
because we basically attack directly to

340
00:11:30,079 --> 00:11:36,560
c symbols so there is no recompilation

341
00:11:32,959 --> 00:11:38,640
no swig no nonsense it's pure

342
00:11:36,560 --> 00:11:40,079
let's say simple things you can do of

343
00:11:38,640 --> 00:11:43,439
course the same in c plus plus you would

344
00:11:40,079 --> 00:11:44,880
do the same in julia et cetera et cetera

345
00:11:43,440 --> 00:11:46,800
and in addition to that once you have an

346
00:11:44,880 --> 00:11:48,720
api well you can start building your

347
00:11:46,800 --> 00:11:51,680
code using gmash and this is what we do

348
00:11:48,720 --> 00:11:53,839
now so our pde solvers basically embed

349
00:11:51,680 --> 00:11:55,519
the gmesh library so that we get

350
00:11:53,839 --> 00:11:59,040
efficiently meshes

351
00:11:55,519 --> 00:12:00,720
topologies interpolation integration

352
00:11:59,040 --> 00:12:03,360
basis functions so all the stuff that

353
00:12:00,720 --> 00:12:04,800
you need basically to write pdes

354
00:12:03,360 --> 00:12:07,600
have a look at the website you have

355
00:12:04,800 --> 00:12:09,279
examples for all of this

356
00:12:07,600 --> 00:12:11,839
let me give you some numbers so there's

357
00:12:09,279 --> 00:12:15,120
been a huge push for the last two years

358
00:12:11,839 --> 00:12:17,120
to get gmesh parallel and so nowadays

359
00:12:15,120 --> 00:12:18,639
if you download the gmh binary it's

360
00:12:17,120 --> 00:12:20,560
still sequential because we have trouble

361
00:12:18,639 --> 00:12:21,920
distributing the binary

362
00:12:20,560 --> 00:12:24,079
linked with openmp because the

363
00:12:21,920 --> 00:12:26,079
parallelism in gmash is based on openmp

364
00:12:24,079 --> 00:12:28,319
but if you recompile gmash or if you use

365
00:12:26,079 --> 00:12:31,120
gmash through fedora for example

366
00:12:28,320 --> 00:12:32,399
you will get the parallel version these

367
00:12:31,120 --> 00:12:33,760
are some numbers

368
00:12:32,399 --> 00:12:35,519
these are the kind of stuff you can do

369
00:12:33,760 --> 00:12:38,000
now with gmesh

370
00:12:35,519 --> 00:12:39,839
so basically look at these two columns

371
00:12:38,000 --> 00:12:42,480
here for a non-trivial

372
00:12:39,839 --> 00:12:44,000
tire geometry you generate pretty much

373
00:12:42,480 --> 00:12:47,680
100 million sets

374
00:12:44,000 --> 00:12:50,839
in how much is that 360 seconds

375
00:12:47,680 --> 00:12:53,839
on one thread and so this is done on the

376
00:12:50,839 --> 00:12:53,839
laptop

377
00:12:53,920 --> 00:12:57,120
you can go to very large models so

378
00:12:55,760 --> 00:12:58,959
basically gmesh now

379
00:12:57,120 --> 00:13:00,399
is able to generate several hundred

380
00:12:58,959 --> 00:13:02,560
million tetrahedra

381
00:13:00,399 --> 00:13:03,920
in reasonable amount of time so scaling

382
00:13:02,560 --> 00:13:05,839
you'll see is not perfect

383
00:13:03,920 --> 00:13:08,079
but it allows you to basically generate

384
00:13:05,839 --> 00:13:11,519
extremely large meshes

385
00:13:08,079 --> 00:13:14,560
last thing what time is it

386
00:13:11,519 --> 00:13:15,839
we can remesh meshes

387
00:13:14,560 --> 00:13:17,760
and so this is how it works so if you

388
00:13:15,839 --> 00:13:18,880
have an stl actually we compute all the

389
00:13:17,760 --> 00:13:21,040
mathematics

390
00:13:18,880 --> 00:13:22,959
and the reprotometerization to use the

391
00:13:21,040 --> 00:13:25,120
algorithms that we had before

392
00:13:22,959 --> 00:13:26,160
on these discrete geometries and so

393
00:13:25,120 --> 00:13:28,320
typically

394
00:13:26,160 --> 00:13:30,399
you get an image from medical imaging

395
00:13:28,320 --> 00:13:30,800
devices where you can basically remesh

396
00:13:30,399 --> 00:13:33,040
them

397
00:13:30,800 --> 00:13:34,560
directly same thing for this you see

398
00:13:33,040 --> 00:13:35,599
that you can do apply the same algorithm

399
00:13:34,560 --> 00:13:37,199
as before

400
00:13:35,600 --> 00:13:39,279
and these are extremely large cases you

401
00:13:37,200 --> 00:13:41,040
can do these kind of let's say

402
00:13:39,279 --> 00:13:42,720
x-ray tomography images you can remesh

403
00:13:41,040 --> 00:13:45,199
them right away

404
00:13:42,720 --> 00:13:46,959
all right so i've shown you an overview

405
00:13:45,199 --> 00:13:48,319
some recent developments

406
00:13:46,959 --> 00:13:50,719
and actually there are many interesting

407
00:13:48,320 --> 00:13:53,680
things you can just read them over there

408
00:13:50,720 --> 00:13:54,959
high order stuff and then a must have

409
00:13:53,680 --> 00:14:03,839
boundary layers

410
00:13:54,959 --> 00:14:03,839
all right thanks a lot

411
00:14:04,079 --> 00:14:08,399
so you said you were gonna start having

412
00:14:06,880 --> 00:14:11,680
yourself a higher baseline c

413
00:14:08,399 --> 00:14:16,000
plus version yes so

414
00:14:11,680 --> 00:14:18,479
gmash5 will move to c plus plus 11.

415
00:14:16,000 --> 00:14:20,160
oh sorry yeah you heard it yeah okay

416
00:14:18,480 --> 00:14:20,880
yeah oh sorry yeah you have to repeat

417
00:14:20,160 --> 00:14:23,519
for the microphone

418
00:14:20,880 --> 00:14:23,519
yeah yeah okay

419
00:14:25,920 --> 00:14:30,880
yes so the yeah sorry comparison of

420
00:14:29,440 --> 00:14:33,680
speed right with net gain

421
00:14:30,880 --> 00:14:35,040
gain so quality equality yes indeed so

422
00:14:33,680 --> 00:14:36,079
there are several aspects to that it's a

423
00:14:35,040 --> 00:14:38,800
very long answer

424
00:14:36,079 --> 00:14:39,839
so ted gen for example only does 3d so

425
00:14:38,800 --> 00:14:42,880
gmash does 1d

426
00:14:39,839 --> 00:14:44,959
2d 3d the speed of the

427
00:14:42,880 --> 00:14:47,360
new version of the gmesh algorithm is

428
00:14:44,959 --> 00:14:47,359
actually

429
00:14:47,519 --> 00:14:51,760
it's parallel yeah suffice it to say

430
00:14:50,160 --> 00:14:53,279
same thing for netgun

431
00:14:51,760 --> 00:14:55,839
quality wise it all depends on the

432
00:14:53,279 --> 00:14:56,800
optimizer because once you generate a

433
00:14:55,839 --> 00:14:59,120
mesh it's not enough you need to

434
00:14:56,800 --> 00:15:00,639
optimize the mesh and so the optimizer

435
00:14:59,120 --> 00:15:02,800
actually we have our own

436
00:15:00,639 --> 00:15:04,560
there is a second one now and we also

437
00:15:02,800 --> 00:15:12,000
interfaced the one from netgun

438
00:15:04,560 --> 00:15:14,959
just you know to cover all bases

439
00:15:12,000 --> 00:15:16,079
for uh providing functions for example

440
00:15:14,959 --> 00:15:19,920
sizing functions

441
00:15:16,079 --> 00:15:20,880
yes over the api will that be possible

442
00:15:19,920 --> 00:15:24,319
using

443
00:15:20,880 --> 00:15:24,320
native functions

444
00:15:25,279 --> 00:15:29,759
okay so will it be possible to provide

445
00:15:27,519 --> 00:15:31,600
sizes function sizing functions directly

446
00:15:29,759 --> 00:15:35,040
in the native language of the api

447
00:15:31,600 --> 00:15:38,079
not currently so basically you are

448
00:15:35,040 --> 00:15:39,439
constrained by let's say the the size

449
00:15:38,079 --> 00:15:41,040
field that we provide

450
00:15:39,440 --> 00:15:44,480
and so you cannot directly give a

451
00:15:41,040 --> 00:15:44,480
function in the native language

452
00:15:52,959 --> 00:15:56,719
it's my last item over there though so

453
00:15:54,959 --> 00:15:57,920
how how is the work going on for

454
00:15:56,720 --> 00:16:00,560
boundary layers

455
00:15:57,920 --> 00:16:02,560
so basically the 2d case is not too bad

456
00:16:00,560 --> 00:16:05,040
but is in the process of being rewritten

457
00:16:02,560 --> 00:16:08,079
and the 3d stuff there is a phd thesis

458
00:16:05,040 --> 00:16:09,920
actually in the works and so in about a

459
00:16:08,079 --> 00:16:11,758
year we should see the first mergers in

460
00:16:09,920 --> 00:16:13,839
gmash for that

461
00:16:11,759 --> 00:16:15,279
yeah it's a it's a tough problem because

462
00:16:13,839 --> 00:16:23,759
we don't want to do it the same way that

463
00:16:15,279 --> 00:16:25,519
other people do it

464
00:16:23,759 --> 00:16:27,279
yeah so it's uh sorry boundary layers

465
00:16:25,519 --> 00:16:28,639
does it include other physics

466
00:16:27,279 --> 00:16:30,240
yeah the boundary layer is independent

467
00:16:28,639 --> 00:16:31,440
of physics so the idea is that you want

468
00:16:30,240 --> 00:16:33,920
to generate a mesh

469
00:16:31,440 --> 00:16:34,959
with specific constraints and let's say

470
00:16:33,920 --> 00:16:38,240
a structured

471
00:16:34,959 --> 00:16:41,439
let's say kind of uh topology

472
00:16:38,240 --> 00:16:44,240
close to a boundary but

473
00:16:41,440 --> 00:16:46,160
i think oh yeah that's that's so what

474
00:16:44,240 --> 00:16:46,480
about the parameterization of the layers

475
00:16:46,160 --> 00:16:48,639
yeah

476
00:16:46,480 --> 00:16:50,560
that's trivial so the the complicated

477
00:16:48,639 --> 00:16:51,440
part is actually to getting this to be

478
00:16:50,560 --> 00:16:53,279
robust

479
00:16:51,440 --> 00:16:54,880
on complex geometries with re-entrant

480
00:16:53,279 --> 00:16:56,639
corners small features and so on

481
00:16:54,880 --> 00:17:00,320
but the sizing once you know how to do

482
00:16:56,639 --> 00:17:00,320
this it's uh the sizing is just the

483
00:17:02,839 --> 00:17:05,839
details

484
00:17:07,919 --> 00:17:12,959
so do i collide with my university

485
00:17:10,160 --> 00:17:12,959
patent office

486
00:17:13,030 --> 00:17:17,280
[Laughter]

487
00:17:15,359 --> 00:17:19,599
if i was in the us i would i would take

488
00:17:17,280 --> 00:17:21,918
the fifth right so i'm here in belgium

489
00:17:19,599 --> 00:17:23,280
actually no so it was a struggle at the

490
00:17:21,919 --> 00:17:25,679
beginning to actually

491
00:17:23,280 --> 00:17:26,799
make them accept that this was an open

492
00:17:25,679 --> 00:17:29,760
source project

493
00:17:26,799 --> 00:17:31,039
now gmash is actually a special project

494
00:17:29,760 --> 00:17:32,960
because since it was done

495
00:17:31,039 --> 00:17:34,799
in our free time and then both john

496
00:17:32,960 --> 00:17:35,919
fraser and myself we moved away from our

497
00:17:34,799 --> 00:17:37,280
universities

498
00:17:35,919 --> 00:17:39,919
actually we managed actually the

499
00:17:37,280 --> 00:17:41,760
copyright to stay with jefferson myself

500
00:17:39,919 --> 00:17:43,120
and so that's the reason why you have

501
00:17:41,760 --> 00:17:44,879
the kernel

502
00:17:43,120 --> 00:17:46,559
and then all the contributions so all

503
00:17:44,880 --> 00:17:48,640
the code that is contributed in the

504
00:17:46,559 --> 00:17:49,760
framework for example of eu projects or

505
00:17:48,640 --> 00:17:52,320
whatever projects

506
00:17:49,760 --> 00:17:53,440
this goes into contrib and not into the

507
00:17:52,320 --> 00:18:01,840
into the kernel

508
00:17:53,440 --> 00:18:01,840
okay thank you so much

509
00:18:02,080 --> 00:18:04,159
you

