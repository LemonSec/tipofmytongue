1
00:00:05,200 --> 00:00:09,679
hello everyone

2
00:00:06,399 --> 00:00:12,960
it's nice to see all of you here

3
00:00:09,679 --> 00:00:16,160
uh some of you were on the previous talk

4
00:00:12,960 --> 00:00:19,439
and those of you who were then

5
00:00:16,160 --> 00:00:21,520
will probably better understand what

6
00:00:19,439 --> 00:00:23,759
i will say my name is lukas i work at

7
00:00:21,520 --> 00:00:25,759
samsung currently institute poland

8
00:00:23,760 --> 00:00:27,519
today i would like to share with you an

9
00:00:25,760 --> 00:00:31,920
idea we've got

10
00:00:27,519 --> 00:00:34,320
in my team we decided to replace

11
00:00:31,920 --> 00:00:36,320
a bootloader on one of our development

12
00:00:34,320 --> 00:00:37,200
platforms with linux kernel and the

13
00:00:36,320 --> 00:00:42,000
handful of

14
00:00:37,200 --> 00:00:45,280
user lamp tools this by no means is

15
00:00:42,000 --> 00:00:45,920
something new we did it because others

16
00:00:45,280 --> 00:00:49,280
did it

17
00:00:45,920 --> 00:00:52,239
before us and here on fosdem i

18
00:00:49,280 --> 00:00:53,120
i have already seen at least two talks

19
00:00:52,239 --> 00:00:56,559
about

20
00:00:53,120 --> 00:00:58,640
it so but we've got our approach which i

21
00:00:56,559 --> 00:01:00,559
would like to share with you

22
00:00:58,640 --> 00:01:02,640
we think there are several good reasons

23
00:01:00,559 --> 00:01:05,759
to do that one of them us

24
00:01:02,640 --> 00:01:08,240
being a little bit lazy as probably some

25
00:01:05,760 --> 00:01:11,920
of you here too

26
00:01:08,240 --> 00:01:13,280
and liking others to help us do our job

27
00:01:11,920 --> 00:01:15,840
we want to avoid

28
00:01:13,280 --> 00:01:16,880
double effort that is required to

29
00:01:15,840 --> 00:01:20,560
develop

30
00:01:16,880 --> 00:01:23,679
the to bring up a new platform

31
00:01:20,560 --> 00:01:27,040
because code

32
00:01:23,680 --> 00:01:27,680
for both linux kernel and the bootloader

33
00:01:27,040 --> 00:01:29,600
needs to

34
00:01:27,680 --> 00:01:31,040
be developed to get a functional

35
00:01:29,600 --> 00:01:33,600
platform

36
00:01:31,040 --> 00:01:34,320
uh and there is we think there is no

37
00:01:33,600 --> 00:01:37,679
need to

38
00:01:34,320 --> 00:01:41,039
to do to create code for both

39
00:01:37,680 --> 00:01:44,079
uh and linux and bootloader uh

40
00:01:41,040 --> 00:01:45,439
because the talk is rather short i and i

41
00:01:44,079 --> 00:01:48,559
really don't want to miss

42
00:01:45,439 --> 00:01:49,758
the ending i will do my best to tell you

43
00:01:48,560 --> 00:01:55,360
everything i've got

44
00:01:49,759 --> 00:01:59,040
and then i will answer your questions

45
00:01:55,360 --> 00:02:01,439
this presentation has got two two parts

46
00:01:59,040 --> 00:02:02,399
unlike what's on the screen the first

47
00:02:01,439 --> 00:02:04,398
describes

48
00:02:02,399 --> 00:02:07,119
more or less the current state of

49
00:02:04,399 --> 00:02:10,160
publicly available bootloaders on

50
00:02:07,119 --> 00:02:14,879
armed cortex a cpus

51
00:02:10,160 --> 00:02:18,160
angelo said a lot more about that

52
00:02:14,879 --> 00:02:19,280
the second is about our work how we

53
00:02:18,160 --> 00:02:22,640
think

54
00:02:19,280 --> 00:02:25,920
it is possible to improve the situation

55
00:02:22,640 --> 00:02:28,879
for those who are unfamiliar with

56
00:02:25,920 --> 00:02:30,160
the topic on arm there is no standard

57
00:02:28,879 --> 00:02:33,599
firmware

58
00:02:30,160 --> 00:02:37,359
like bios or uefi on x86

59
00:02:33,599 --> 00:02:39,839
that is why it is a bootloader's job

60
00:02:37,360 --> 00:02:42,480
to configure most important hardware

61
00:02:39,840 --> 00:02:42,480
components

62
00:02:43,440 --> 00:02:47,519
let me ask how many of you have touched

63
00:02:46,080 --> 00:02:50,800
a bootloader code

64
00:02:47,519 --> 00:02:56,000
or an architecture-dependent linux code

65
00:02:50,800 --> 00:02:59,200
that runs before start kernel function

66
00:02:56,000 --> 00:03:02,480
okay we are on the same page

67
00:02:59,200 --> 00:03:05,359
that's nice uh in this maybe some of you

68
00:03:02,480 --> 00:03:07,359
are more clever than i am

69
00:03:05,360 --> 00:03:09,360
in this presentation i will assume the

70
00:03:07,360 --> 00:03:12,400
booting process comprises the

71
00:03:09,360 --> 00:03:15,599
following stages

72
00:03:12,400 --> 00:03:19,599
the firmware is a piece of

73
00:03:15,599 --> 00:03:22,399
this is what others called the rbl

74
00:03:19,599 --> 00:03:24,959
angel called rbo this is a piece of

75
00:03:22,400 --> 00:03:28,080
immutable code that comes

76
00:03:24,959 --> 00:03:29,200
with a cpu it cannot be changed by any

77
00:03:28,080 --> 00:03:32,879
means

78
00:03:29,200 --> 00:03:36,000
then there is a bootloader

79
00:03:32,879 --> 00:03:39,200
aka spl divided into

80
00:03:36,000 --> 00:03:39,760
several stages and then the of course

81
00:03:39,200 --> 00:03:42,958
there is

82
00:03:39,760 --> 00:03:45,599
an os the code that

83
00:03:42,959 --> 00:03:46,319
implements the application the device

84
00:03:45,599 --> 00:03:49,839
was

85
00:03:46,319 --> 00:03:53,359
designed for like desktop environment or

86
00:03:49,840 --> 00:03:53,360
multimedia system or

87
00:03:53,920 --> 00:03:56,879
choose yours

88
00:03:57,599 --> 00:04:01,439
an additional task bootloader sometimes

89
00:04:00,000 --> 00:04:06,720
perform is an os

90
00:04:01,439 --> 00:04:09,680
update especially when the os is broken

91
00:04:06,720 --> 00:04:11,359
this means a bootloader should be very

92
00:04:09,680 --> 00:04:14,159
robust

93
00:04:11,360 --> 00:04:16,320
as it may be the only way to unbreak a

94
00:04:14,159 --> 00:04:18,000
device

95
00:04:16,320 --> 00:04:20,880
we concluded that the available

96
00:04:18,000 --> 00:04:23,919
bootloaders for arm have so significant

97
00:04:20,880 --> 00:04:24,560
drawbacks and we need to improve upon

98
00:04:23,919 --> 00:04:27,280
that

99
00:04:24,560 --> 00:04:28,800
the following the experience of the

100
00:04:27,280 --> 00:04:34,000
linux boot project

101
00:04:28,800 --> 00:04:34,000
we decided to use linux as a bootloader

102
00:04:37,120 --> 00:04:41,520
these are the three most common

103
00:04:39,600 --> 00:04:44,080
bootloaders i could find

104
00:04:41,520 --> 00:04:46,240
for arm each of them support different

105
00:04:44,080 --> 00:04:48,400
architectures too

106
00:04:46,240 --> 00:04:51,280
there is a lot more proprietary

107
00:04:48,400 --> 00:04:54,719
commercial custom ones

108
00:04:51,280 --> 00:04:55,359
until now in our work we have used ubud

109
00:04:54,720 --> 00:04:58,400
on most

110
00:04:55,360 --> 00:04:59,440
development platforms and some custom

111
00:04:58,400 --> 00:05:02,159
boot loaders on

112
00:04:59,440 --> 00:05:02,160
on products

113
00:05:02,800 --> 00:05:06,880
every new platform needs a bootloader to

114
00:05:05,680 --> 00:05:10,160
be ported to it

115
00:05:06,880 --> 00:05:13,520
you know you build a pcb you smash

116
00:05:10,160 --> 00:05:15,039
an soc onto it to to boot it you you

117
00:05:13,520 --> 00:05:18,400
need a bootloader

118
00:05:15,039 --> 00:05:22,000
uh just to repeat i mean

119
00:05:18,400 --> 00:05:26,560
all the code from that is loaded

120
00:05:22,000 --> 00:05:29,600
from rom and that runs until

121
00:05:26,560 --> 00:05:32,960
linux kicks in so that's what i

122
00:05:29,600 --> 00:05:36,080
consider a bootloader

123
00:05:32,960 --> 00:05:39,758
porting bootloader to a new platform

124
00:05:36,080 --> 00:05:42,560
requires writing platform setup code

125
00:05:39,759 --> 00:05:44,479
which will configure plot which will

126
00:05:42,560 --> 00:05:47,520
configure the platform to be usable

127
00:05:44,479 --> 00:05:52,639
it turns on dram some clocks some

128
00:05:47,520 --> 00:05:55,969
some voltage sets some voltages on board

129
00:05:52,639 --> 00:05:57,199
some basic peripherals like console

130
00:05:55,970 --> 00:06:01,440
[Applause]

131
00:05:57,199 --> 00:06:04,000
then there is a general purpose code

132
00:06:01,440 --> 00:06:05,120
which deals with loading os kernel from

133
00:06:04,000 --> 00:06:08,160
a storage

134
00:06:05,120 --> 00:06:11,120
or from a network and starting it

135
00:06:08,160 --> 00:06:13,199
in addition in traditional bootloaders

136
00:06:11,120 --> 00:06:16,400
the range of options

137
00:06:13,199 --> 00:06:21,360
here in this area is somewhat

138
00:06:16,400 --> 00:06:23,840
limited for on the other hand for linux

139
00:06:21,360 --> 00:06:27,440
there are tons of device drivers

140
00:06:23,840 --> 00:06:30,960
dozens of file systems and

141
00:06:27,440 --> 00:06:34,400
more than one network stack too

142
00:06:30,960 --> 00:06:36,400
and thanks to k exec linux can act as a

143
00:06:34,400 --> 00:06:38,638
bootloader

144
00:06:36,400 --> 00:06:40,159
and start completely new kernel load it

145
00:06:38,639 --> 00:06:43,280
from

146
00:06:40,160 --> 00:06:48,240
wherever you want and and

147
00:06:43,280 --> 00:06:51,840
start it as a new system

148
00:06:48,240 --> 00:06:55,360
this is odroid xu4 it is based on

149
00:06:51,840 --> 00:06:58,960
exynos 5422 soc

150
00:06:55,360 --> 00:07:01,680
and it has been a reference platform for

151
00:06:58,960 --> 00:07:02,080
tizen os for the past couple of years

152
00:07:01,680 --> 00:07:04,720
and

153
00:07:02,080 --> 00:07:05,919
almost everyone in our office has one in

154
00:07:04,720 --> 00:07:09,120
their drawer

155
00:07:05,919 --> 00:07:12,400
that's why that's why we chose it for

156
00:07:09,120 --> 00:07:14,319
for this proof of concept

157
00:07:12,400 --> 00:07:16,000
it's well supported in the mainline

158
00:07:14,319 --> 00:07:19,759
linux and we knew

159
00:07:16,000 --> 00:07:20,400
that if it doesn't boot then it is our

160
00:07:19,759 --> 00:07:23,759
fault we're

161
00:07:20,400 --> 00:07:28,080
we're doing something wrong uh it wasn't

162
00:07:23,759 --> 00:07:32,160
entirely true but that's not the point

163
00:07:28,080 --> 00:07:32,960
now we fixed like probably two bugs

164
00:07:32,160 --> 00:07:37,039
somewhere in

165
00:07:32,960 --> 00:07:40,318
the compressor uh code that nobody

166
00:07:37,039 --> 00:07:43,280
looks into it works and we did something

167
00:07:40,319 --> 00:07:45,840
different and it appeared the effects

168
00:07:43,280 --> 00:07:45,840
was needed

169
00:07:45,919 --> 00:07:49,840
there have been a number of similar

170
00:07:48,479 --> 00:07:54,800
attempts to push linux

171
00:07:49,840 --> 00:07:58,159
as close to to hardware as possible

172
00:07:54,800 --> 00:08:01,199
mostly on x x86 platforms

173
00:07:58,160 --> 00:08:04,879
and as i uh as i learned today

174
00:08:01,199 --> 00:08:08,080
on risk five too we work with

175
00:08:04,879 --> 00:08:10,319
arm platform and thus our approach is

176
00:08:08,080 --> 00:08:12,878
slightly different

177
00:08:10,319 --> 00:08:14,000
please do keep in mind also that this

178
00:08:12,879 --> 00:08:17,680
was

179
00:08:14,000 --> 00:08:18,800
kind of a side project uh and we focused

180
00:08:17,680 --> 00:08:22,240
on getting the most

181
00:08:18,800 --> 00:08:24,720
important functionality available and

182
00:08:22,240 --> 00:08:27,840
we're not bothered by any convenience

183
00:08:24,720 --> 00:08:27,840
feature too much

184
00:08:28,240 --> 00:08:33,440
okay the boot on odroid looks as follows

185
00:08:31,759 --> 00:08:36,880
there are three blobs

186
00:08:33,440 --> 00:08:40,880
provided by the vendor which is

187
00:08:36,880 --> 00:08:43,760
hard kernel and they are

188
00:08:40,880 --> 00:08:46,080
flashed with a special with a with

189
00:08:43,760 --> 00:08:49,120
appropriate script they are flashed onto

190
00:08:46,080 --> 00:08:53,680
sd or emmc card

191
00:08:49,120 --> 00:08:56,800
uh so so the board can boot

192
00:08:53,680 --> 00:09:00,640
bl 1 does the very basic platform set

193
00:08:56,800 --> 00:09:04,000
up which is turning on dram

194
00:09:00,640 --> 00:09:08,160
and reads vl2 bl2

195
00:09:04,000 --> 00:09:11,920
loads trust zone and

196
00:09:08,160 --> 00:09:16,079
an unsigned uh u-boot image

197
00:09:11,920 --> 00:09:19,199
uh trust zone blob appears to be doing

198
00:09:16,080 --> 00:09:23,120
nothing because there are a lot of

199
00:09:19,200 --> 00:09:26,399
null bytes so we don't have source code

200
00:09:23,120 --> 00:09:29,680
source code for it it doesn't do

201
00:09:26,399 --> 00:09:33,120
anything i think uh no

202
00:09:29,680 --> 00:09:34,959
it it it doesn't behave wrong we don't

203
00:09:33,120 --> 00:09:39,920
have any problems with it

204
00:09:34,959 --> 00:09:43,920
let's stay with that all three blobs

205
00:09:39,920 --> 00:09:47,519
these three blobs need to be signed

206
00:09:43,920 --> 00:09:50,160
a heart kernel signs trust zone

207
00:09:47,519 --> 00:09:52,160
handler and bl2 upon request on their

208
00:09:50,160 --> 00:09:55,199
forum

209
00:09:52,160 --> 00:09:57,439
but this is a little bit cumbersome to

210
00:09:55,200 --> 00:10:01,120
to change them so we decided

211
00:09:57,440 --> 00:10:03,920
uh we will replace uh you would

212
00:10:01,120 --> 00:10:06,640
just you but no we we didn't replace any

213
00:10:03,920 --> 00:10:06,640
any of these

214
00:10:06,880 --> 00:10:14,320
there is however as you might see

215
00:10:10,720 --> 00:10:17,680
uh there is the name of the last

216
00:10:14,320 --> 00:10:20,640
the last note the bl2 uh suggests the

217
00:10:17,680 --> 00:10:22,719
largest hurdle we faced that is one

218
00:10:20,640 --> 00:10:25,839
megabyte limit on the

219
00:10:22,720 --> 00:10:29,760
uh on the u-boot image

220
00:10:25,839 --> 00:10:32,560
we had to uh we had to

221
00:10:29,760 --> 00:10:34,000
fit within that limit after a quick

222
00:10:32,560 --> 00:10:37,359
recap we found

223
00:10:34,000 --> 00:10:40,640
these four tasks were essential to

224
00:10:37,360 --> 00:10:43,920
boot the book the board with

225
00:10:40,640 --> 00:10:46,880
uh with linux kernel as a bootloader

226
00:10:43,920 --> 00:10:48,240
platform setup as i said this was rather

227
00:10:46,880 --> 00:10:51,040
quick

228
00:10:48,240 --> 00:10:51,600
the bl1 and bl2 code does all of the

229
00:10:51,040 --> 00:10:54,880
setup

230
00:10:51,600 --> 00:10:55,839
except for console we did console with a

231
00:10:54,880 --> 00:10:59,839
small

232
00:10:55,839 --> 00:11:03,600
i don't know 50 60 bytes

233
00:10:59,839 --> 00:11:07,200
that's that's easy one megabyte is very

234
00:11:03,600 --> 00:11:10,240
very little for a kernel device tree

235
00:11:07,200 --> 00:11:13,440
and the reason of reasonable

236
00:11:10,240 --> 00:11:16,480
whatever that means user land after

237
00:11:13,440 --> 00:11:19,760
disabling mo almost everything in

238
00:11:16,480 --> 00:11:24,480
kernel what we could uh our z

239
00:11:19,760 --> 00:11:27,760
image uh took like 950 kilobytes so

240
00:11:24,480 --> 00:11:31,519
we we were left with uh

241
00:11:27,760 --> 00:11:36,079
50 or 60 kilobytes for for the

242
00:11:31,519 --> 00:11:36,079
userland part uh

243
00:11:36,480 --> 00:11:43,600
for the record uh without

244
00:11:39,519 --> 00:11:46,480
struck such uh such strict limit

245
00:11:43,600 --> 00:11:47,120
we would build a separate bootloading

246
00:11:46,480 --> 00:11:50,079
kernel

247
00:11:47,120 --> 00:11:51,760
anyway with different configuration than

248
00:11:50,079 --> 00:11:55,439
than the one we used for

249
00:11:51,760 --> 00:11:58,720
for the os so two kernels

250
00:11:55,440 --> 00:12:02,079
is are always we think required

251
00:11:58,720 --> 00:12:06,800
maybe not so maybe the first one could

252
00:12:02,079 --> 00:12:06,800
not could be not that much limited

253
00:12:08,839 --> 00:12:13,760
uh

254
00:12:10,399 --> 00:12:18,160
uh linux

255
00:12:13,760 --> 00:12:20,959
uh luckily uh luckily k exec worked

256
00:12:18,160 --> 00:12:21,519
uh however we had recently some other

257
00:12:20,959 --> 00:12:24,959
boards

258
00:12:21,519 --> 00:12:28,639
which had some problems with with

259
00:12:24,959 --> 00:12:31,839
k exec it appears to be the problem with

260
00:12:28,639 --> 00:12:34,880
drivers of some devices that don't

261
00:12:31,839 --> 00:12:38,560
shut down devices properly and

262
00:12:34,880 --> 00:12:41,920
when a new kernel starts drivers try to

263
00:12:38,560 --> 00:12:45,040
probe devices uh the devices are

264
00:12:41,920 --> 00:12:45,839
in states that cannot be handled at the

265
00:12:45,040 --> 00:12:48,959
probing

266
00:12:45,839 --> 00:12:53,839
stage by by the drivers so this

267
00:12:48,959 --> 00:12:53,839
this will need investigation

268
00:12:55,040 --> 00:13:02,480
although we weren't much into

269
00:12:58,399 --> 00:13:02,480
providing user land tools

270
00:13:03,200 --> 00:13:06,800
just a few bits to to load the kernel

271
00:13:05,519 --> 00:13:10,160
started

272
00:13:06,800 --> 00:13:13,279
we found the u-root uh used in

273
00:13:10,160 --> 00:13:14,160
linux boot for example to be a very nice

274
00:13:13,279 --> 00:13:17,200
piece of

275
00:13:14,160 --> 00:13:19,439
software for that much better than in

276
00:13:17,200 --> 00:13:22,639
our opinion much better than other

277
00:13:19,440 --> 00:13:26,160
such toolboxes

278
00:13:22,639 --> 00:13:29,760
alas it doesn't support k exec

279
00:13:26,160 --> 00:13:34,639
on arm we had to use k exact tools and

280
00:13:29,760 --> 00:13:37,760
but that's just a minor problem

281
00:13:34,639 --> 00:13:40,639
uh thanks to tmpfs uh

282
00:13:37,760 --> 00:13:41,600
which unlike all style ram disk is able

283
00:13:40,639 --> 00:13:44,720
to expand

284
00:13:41,600 --> 00:13:45,600
uh in ram as new data is saved we could

285
00:13:44,720 --> 00:13:48,639
split our

286
00:13:45,600 --> 00:13:49,680
init ram fs archive into two the first

287
00:13:48,639 --> 00:13:52,720
stage

288
00:13:49,680 --> 00:13:56,000
uh comprises only a tiny in it we call

289
00:13:52,720 --> 00:13:58,000
half in its half stage in it which

290
00:13:56,000 --> 00:14:01,360
mounts fat partition unpacks

291
00:13:58,000 --> 00:14:04,399
stage two archive or stage one full

292
00:14:01,360 --> 00:14:06,800
archive execute slash init that

293
00:14:04,399 --> 00:14:08,079
is expected to be in the archive and

294
00:14:06,800 --> 00:14:11,359
replaces

295
00:14:08,079 --> 00:14:13,920
hse need there is no limit for

296
00:14:11,360 --> 00:14:14,839
the stage 2 archive except of course the

297
00:14:13,920 --> 00:14:18,160
size of

298
00:14:14,839 --> 00:14:22,320
ram size and speed of

299
00:14:18,160 --> 00:14:22,319
storage and such things

300
00:14:23,199 --> 00:14:29,839
europe short for universal route

301
00:14:27,600 --> 00:14:31,360
is a really nice piece of software i'd

302
00:14:29,839 --> 00:14:34,959
like to recommend you if you

303
00:14:31,360 --> 00:14:37,199
build boot loading environments

304
00:14:34,959 --> 00:14:39,040
it is a set of basic tools there is a

305
00:14:37,199 --> 00:14:42,479
shell a text editor

306
00:14:39,040 --> 00:14:45,839
ls cut and you know

307
00:14:42,480 --> 00:14:49,199
stuff that you find in all the boxes

308
00:14:45,839 --> 00:14:52,880
out there but unlike

309
00:14:49,199 --> 00:14:56,079
other boxes it is written in go

310
00:14:52,880 --> 00:14:59,519
it can be deployed in two modes source

311
00:14:56,079 --> 00:15:00,560
and busy box mode the former is neat

312
00:14:59,519 --> 00:15:03,760
because

313
00:15:00,560 --> 00:15:06,638
uh the only uh binary

314
00:15:03,760 --> 00:15:06,639
that is

315
00:15:06,959 --> 00:15:13,359
on on the in the ram fs is a

316
00:15:10,399 --> 00:15:14,079
is go compiler and every tool that you

317
00:15:13,360 --> 00:15:17,839
use

318
00:15:14,079 --> 00:15:19,199
is compiled on demand unfortunately it

319
00:15:17,839 --> 00:15:22,800
requires

320
00:15:19,199 --> 00:15:26,079
much more space and rather

321
00:15:22,800 --> 00:15:28,560
strong cpu on arm it was too slow to to

322
00:15:26,079 --> 00:15:31,279
build the commands

323
00:15:28,560 --> 00:15:32,479
the busy box mode is a single binary

324
00:15:31,279 --> 00:15:37,839
with multiple

325
00:15:32,480 --> 00:15:37,839
sim links calling multiple functions

326
00:15:38,480 --> 00:15:43,600
at the moment uh what we've got we can

327
00:15:41,120 --> 00:15:46,800
configure the kernel to build a

328
00:15:43,600 --> 00:15:50,160
an image for a selected

329
00:15:46,800 --> 00:15:53,439
board in our case it is xu4 uh

330
00:15:50,160 --> 00:15:56,719
to put without u-boot and start another

331
00:15:53,440 --> 00:15:56,720
fully fledged kernel

332
00:15:57,600 --> 00:16:03,839
although xu 4 cannot act

333
00:16:00,800 --> 00:16:06,479
as a usb device uh

334
00:16:03,839 --> 00:16:07,680
to use linux on other our boards we need

335
00:16:06,480 --> 00:16:11,680
to develop

336
00:16:07,680 --> 00:16:15,519
function fs based tool to receive files

337
00:16:11,680 --> 00:16:16,560
to to to receive and download to to the

338
00:16:15,519 --> 00:16:19,759
flash

339
00:16:16,560 --> 00:16:24,800
we also need to make k exec

340
00:16:19,759 --> 00:16:24,800
tool in new root work on arm

341
00:16:26,320 --> 00:16:32,480
why you may ask from our perspective

342
00:16:30,240 --> 00:16:33,519
there are following advantages

343
00:16:32,480 --> 00:16:36,320
advantages

344
00:16:33,519 --> 00:16:38,160
to this approach less effort during

345
00:16:36,320 --> 00:16:42,079
platform bring up

346
00:16:38,160 --> 00:16:44,319
because we avoid code duplication this

347
00:16:42,079 --> 00:16:45,279
extends also to maintenance you don't

348
00:16:44,320 --> 00:16:48,839
end up with

349
00:16:45,279 --> 00:16:52,160
i don't know for example uh

350
00:16:48,839 --> 00:16:54,480
pmic driver into

351
00:16:52,160 --> 00:16:56,319
repositories in linux kernel where you

352
00:16:54,480 --> 00:16:58,480
need it for power management

353
00:16:56,320 --> 00:17:05,839
and input loader where you needed to to

354
00:16:58,480 --> 00:17:08,400
bring up the platform

355
00:17:05,839 --> 00:17:08,399
linux

356
00:17:09,280 --> 00:17:13,359
more flexibility linux both the kernel

357
00:17:12,000 --> 00:17:16,799
and the user land

358
00:17:13,359 --> 00:17:20,000
is much more capable and flexible than

359
00:17:16,799 --> 00:17:23,359
than bootloaders available

360
00:17:20,000 --> 00:17:27,039
two areas we we consider crucial are

361
00:17:23,359 --> 00:17:30,159
network support and security

362
00:17:27,039 --> 00:17:31,520
although it is possible to boot over a

363
00:17:30,160 --> 00:17:35,360
network today

364
00:17:31,520 --> 00:17:37,520
only tftp is available for file transfer

365
00:17:35,360 --> 00:17:39,039
which is perfectly fine from a client

366
00:17:37,520 --> 00:17:42,320
perspective

367
00:17:39,039 --> 00:17:44,160
however without an authentication it is

368
00:17:42,320 --> 00:17:48,159
not a protocol i would deploy

369
00:17:44,160 --> 00:17:51,919
outside any local network support for

370
00:17:48,160 --> 00:17:55,919
crypto libraries is very new and

371
00:17:51,919 --> 00:17:55,919
quite limited as far as i can tell

372
00:17:56,799 --> 00:18:03,520
and finally from our experience

373
00:18:00,799 --> 00:18:04,320
the general purpose code like file

374
00:18:03,520 --> 00:18:08,320
systems

375
00:18:04,320 --> 00:18:10,720
like network stock uh like

376
00:18:08,320 --> 00:18:11,520
i don't know usb stock not not the

377
00:18:10,720 --> 00:18:14,320
driver for

378
00:18:11,520 --> 00:18:14,830
for the for the hardware but the rest of

379
00:18:14,320 --> 00:18:16,159
the stock

380
00:18:14,830 --> 00:18:19,840
[Music]

381
00:18:16,160 --> 00:18:23,280
is somewhat is somewhat in better shape

382
00:18:19,840 --> 00:18:27,039
in in the linux kernel and is

383
00:18:23,280 --> 00:18:31,520
maintained more regularly

384
00:18:27,039 --> 00:18:31,520
that is our experience

385
00:18:32,640 --> 00:18:39,520
in summary the the key features of

386
00:18:36,240 --> 00:18:42,400
our approach of what we did

387
00:18:39,520 --> 00:18:44,639
we are definitely arm-centric because

388
00:18:42,400 --> 00:18:48,240
that's the platform we work with

389
00:18:44,640 --> 00:18:50,400
uh we assume however it that it applies

390
00:18:48,240 --> 00:18:54,400
directly to other platforms which

391
00:18:50,400 --> 00:18:58,080
don't employ standards-based firmware

392
00:18:54,400 --> 00:19:00,240
like bios or you like bios or uefi

393
00:18:58,080 --> 00:19:02,879
our motivation to personally push linux

394
00:19:00,240 --> 00:19:06,240
as close to the hardware as possible

395
00:19:02,880 --> 00:19:08,160
is a little different than on x86

396
00:19:06,240 --> 00:19:10,080
we are not concerned uh we're not

397
00:19:08,160 --> 00:19:14,320
concerned much about

398
00:19:10,080 --> 00:19:18,879
security like management engine on

399
00:19:14,320 --> 00:19:21,280
86 that affect platforms user

400
00:19:18,880 --> 00:19:22,799
but rather we want to help vendors

401
00:19:21,280 --> 00:19:27,039
ourselves included

402
00:19:22,799 --> 00:19:30,559
to minimize the effort uh

403
00:19:27,039 --> 00:19:31,520
to prepare to to bring up the platform

404
00:19:30,559 --> 00:19:33,600
to avoid the

405
00:19:31,520 --> 00:19:35,760
the unnecessary effort to prepare two

406
00:19:33,600 --> 00:19:39,439
versions of device drivers

407
00:19:35,760 --> 00:19:42,240
and keep file systems up to date and so

408
00:19:39,440 --> 00:19:42,240
on and so on

409
00:19:42,320 --> 00:19:49,678
our goal is to find a place and means

410
00:19:45,760 --> 00:19:53,520
in the linux kernel source tree to keep

411
00:19:49,679 --> 00:19:56,400
platform board dependent code which can

412
00:19:53,520 --> 00:19:57,918
which can do platform setup before the

413
00:19:56,400 --> 00:20:01,679
kernel starts

414
00:19:57,919 --> 00:20:01,679
and can be

415
00:20:03,919 --> 00:20:08,559
and can be built together with the

416
00:20:05,840 --> 00:20:12,000
kernel to form a single binary

417
00:20:08,559 --> 00:20:13,678
that the the firmware the the rom

418
00:20:12,000 --> 00:20:17,600
bootloader can

419
00:20:13,679 --> 00:20:19,760
uh can load alternatively signed spl

420
00:20:17,600 --> 00:20:20,639
although this might look like we try to

421
00:20:19,760 --> 00:20:23,919
resurrect

422
00:20:20,640 --> 00:20:27,440
port files we don't the platform

423
00:20:23,919 --> 00:20:27,440
specific code that we need

424
00:20:27,740 --> 00:20:32,480
[Music]

425
00:20:29,200 --> 00:20:34,480
is com is not the same as us

426
00:20:32,480 --> 00:20:35,760
the the board files that were used

427
00:20:34,480 --> 00:20:38,880
before

428
00:20:35,760 --> 00:20:40,480
device to became popular the code needs

429
00:20:38,880 --> 00:20:43,600
to

430
00:20:40,480 --> 00:20:44,400
bring up only several components which

431
00:20:43,600 --> 00:20:48,158
are not

432
00:20:44,400 --> 00:20:52,159
access which are not controlled later on

433
00:20:48,159 --> 00:20:55,200
with with this in place

434
00:20:52,159 --> 00:20:58,159
uh porting linux would require

435
00:20:55,200 --> 00:20:58,720
less effort less amount of work and you

436
00:20:58,159 --> 00:21:03,840
get

437
00:20:58,720 --> 00:21:03,840
really really powerful good environment

438
00:21:05,200 --> 00:21:08,640
these are the guys that helped me a lot

439
00:21:07,039 --> 00:21:12,080
by either

440
00:21:08,640 --> 00:21:14,159
providing knowledge or

441
00:21:12,080 --> 00:21:15,120
allowing me to work on this as a side

442
00:21:14,159 --> 00:21:18,480
project

443
00:21:15,120 --> 00:21:21,918
and special thanks go to

444
00:21:18,480 --> 00:21:23,600
uh mateos who wrote the the the small

445
00:21:21,919 --> 00:21:27,200
init the hs in it

446
00:21:23,600 --> 00:21:30,240
and squeezed it really hard to to to fit

447
00:21:27,200 --> 00:21:33,440
uh in the limit

448
00:21:30,240 --> 00:21:45,840
okay i managed somehow

449
00:21:33,440 --> 00:21:45,840
are there any questions

450
00:21:49,679 --> 00:21:59,840
any questions

451
00:22:01,280 --> 00:22:05,120
i guess it's more oh it's loud i guess

452
00:22:03,360 --> 00:22:08,000
it's more common than a question

453
00:22:05,120 --> 00:22:09,520
but i guess the question comes along uh

454
00:22:08,000 --> 00:22:10,320
first off i think it's an amazing idea

455
00:22:09,520 --> 00:22:12,240
to

456
00:22:10,320 --> 00:22:13,600
use linux as your driver toolkit because

457
00:22:12,240 --> 00:22:14,559
then you only write your drivers once

458
00:22:13,600 --> 00:22:17,280
right

459
00:22:14,559 --> 00:22:18,799
um doing those in ubud and in linux at

460
00:22:17,280 --> 00:22:19,120
the same time is a terrible idea either

461
00:22:18,799 --> 00:22:22,158
way

462
00:22:19,120 --> 00:22:23,918
um simply because we you always get this

463
00:22:22,159 --> 00:22:25,840
typical fork effect where you

464
00:22:23,919 --> 00:22:27,039
have diverging drivers for like sooner

465
00:22:25,840 --> 00:22:29,889
or later

466
00:22:27,039 --> 00:22:31,440
the big issue i see is

467
00:22:29,890 --> 00:22:36,159
[Music]

468
00:22:31,440 --> 00:22:38,240
your how do i put this

469
00:22:36,159 --> 00:22:40,000
the platform unit code is something that

470
00:22:38,240 --> 00:22:43,120
the arm world was really proud of to

471
00:22:40,000 --> 00:22:44,400
finally get rid of i don't see us

472
00:22:43,120 --> 00:22:46,879
reinventing that and

473
00:22:44,400 --> 00:22:48,720
reintroducing it in a 64-bit arm world

474
00:22:46,880 --> 00:22:50,320
it just is not going to happen

475
00:22:48,720 --> 00:22:52,960
um we need to find a different way to

476
00:22:50,320 --> 00:22:56,080
get this tiny platform unit code

477
00:22:52,960 --> 00:22:58,080
in between your basically your bl2

478
00:22:56,080 --> 00:22:58,879
in the the actual linux kernel and this

479
00:22:58,080 --> 00:23:00,559
is where i really would like to

480
00:22:58,880 --> 00:23:02,240
brainstorm with you on cool ideas we can

481
00:23:00,559 --> 00:23:03,918
do i think we have a couple of things on

482
00:23:02,240 --> 00:23:07,440
the plate of what is possible

483
00:23:03,919 --> 00:23:09,679
um to create a tiny shim that

484
00:23:07,440 --> 00:23:11,280
runs before linux so that you don't have

485
00:23:09,679 --> 00:23:13,360
to put blacktop code into

486
00:23:11,280 --> 00:23:15,520
into the the linux corner itself and the

487
00:23:13,360 --> 00:23:18,080
tree itself

488
00:23:15,520 --> 00:23:19,760
i'm very sorry but the there was

489
00:23:18,080 --> 00:23:23,039
something i i

490
00:23:19,760 --> 00:23:25,280
could you come and will you

491
00:23:23,039 --> 00:23:26,799
quickly repeat me the question without

492
00:23:25,280 --> 00:23:27,918
the mic about the mic

493
00:23:26,799 --> 00:23:30,000
um the platform in the code you're

494
00:23:27,919 --> 00:23:31,679
putting into another kernel right

495
00:23:30,000 --> 00:23:34,000
before the linux kernel so is it

496
00:23:31,679 --> 00:23:37,360
actually separate standalone code

497
00:23:34,000 --> 00:23:39,919
it's a single file but it's in linux uh

498
00:23:37,360 --> 00:23:41,520
in the source tree yes i think we need

499
00:23:39,919 --> 00:23:44,720
to work on

500
00:23:41,520 --> 00:23:45,600
untangling this uh okay the question the

501
00:23:44,720 --> 00:23:49,120
question was

502
00:23:45,600 --> 00:23:50,158
uh is the shim we you we prepend to

503
00:23:49,120 --> 00:23:52,559
linux kernel

504
00:23:50,159 --> 00:23:54,320
inside the canon tree yes we want to be

505
00:23:52,559 --> 00:23:57,520
it inside the kernel tree

506
00:23:54,320 --> 00:23:58,320
and i haven't mentioned that i have

507
00:23:57,520 --> 00:24:01,679
posted

508
00:23:58,320 --> 00:24:04,879
patches rfc patches to to the lists

509
00:24:01,679 --> 00:24:05,200
and they are available for commenting so

510
00:24:04,880 --> 00:24:06,960
it's

511
00:24:05,200 --> 00:24:08,400
it's not like we want to push something

512
00:24:06,960 --> 00:24:10,960
we want to discuss it

513
00:24:08,400 --> 00:24:12,240
because linux kernel the sorcery can

514
00:24:10,960 --> 00:24:14,880
become a single

515
00:24:12,240 --> 00:24:15,360
single stop shop for for vendors for

516
00:24:14,880 --> 00:24:19,840
people

517
00:24:15,360 --> 00:24:19,840
to boot you know code that boots

518
00:24:20,400 --> 00:24:25,279
that's we we're definitely open for

519
00:24:22,880 --> 00:24:25,279
discussion

520
00:24:25,330 --> 00:24:30,000
[Music]

521
00:24:26,880 --> 00:24:33,520
not with their mouth so please

522
00:24:30,000 --> 00:24:36,240
if you are going out of the room please

523
00:24:33,520 --> 00:24:38,400
keep somehow silent to let the speaker

524
00:24:36,240 --> 00:24:40,880
finish the talk

525
00:24:38,400 --> 00:24:40,880
thank you

526
00:24:41,440 --> 00:24:47,440
okay it's up here sorry i finished i

527
00:24:44,440 --> 00:24:47,440
think

528
00:24:48,640 --> 00:25:01,840
so i thank you too

529
00:25:01,919 --> 00:25:04,000
you

