1
00:00:06,560 --> 00:00:09,679
okay next up we've got royal fifa camp

2
00:00:08,400 --> 00:00:13,040
is going to be talking about qatar

3
00:00:09,679 --> 00:00:13,040
containers on opensuse

4
00:00:13,679 --> 00:00:17,279
yeah hello and welcome nice to see so

5
00:00:16,239 --> 00:00:20,320
many folks here

6
00:00:17,279 --> 00:00:22,240
uh my name is ralph haferkamp i am

7
00:00:20,320 --> 00:00:24,160
working at zusa i recently joined the

8
00:00:22,240 --> 00:00:27,278
containers core team there and

9
00:00:24,160 --> 00:00:28,320
i've brought with me dario faggioli he's

10
00:00:27,279 --> 00:00:30,400
working on the

11
00:00:28,320 --> 00:00:32,960
virtualization team at souza and

12
00:00:30,400 --> 00:00:35,280
together we are talking about

13
00:00:32,960 --> 00:00:36,800
qatar containers and what we are doing

14
00:00:35,280 --> 00:00:40,399
at suzu with them or

15
00:00:36,800 --> 00:00:43,360
how we integrated them into opensuse um

16
00:00:40,399 --> 00:00:44,000
but first we are going to give like a

17
00:00:43,360 --> 00:00:45,920
short overview

18
00:00:44,000 --> 00:00:47,120
about what cutter container actually is

19
00:00:45,920 --> 00:00:49,360
and how it works

20
00:00:47,120 --> 00:00:51,519
so if you go to the like cutter

21
00:00:49,360 --> 00:00:53,440
containers website you will see

22
00:00:51,520 --> 00:00:55,760
a phrase like this it's a container

23
00:00:53,440 --> 00:00:56,879
runtime that provides stronger isolation

24
00:00:55,760 --> 00:00:59,599
by using

25
00:00:56,879 --> 00:01:00,239
hardware virtualization technologies and

26
00:00:59,600 --> 00:01:01,920
then

27
00:01:00,239 --> 00:01:04,959
the sentence goes on and on with with

28
00:01:01,920 --> 00:01:08,320
some more words but this one is the

29
00:01:04,959 --> 00:01:10,320
most important one and well to show you

30
00:01:08,320 --> 00:01:11,919
what that means

31
00:01:10,320 --> 00:01:13,919
let's first take a look at how

32
00:01:11,920 --> 00:01:17,600
containers normally work

33
00:01:13,920 --> 00:01:20,720
so um in the normal case you have

34
00:01:17,600 --> 00:01:24,000
yeah your host with the linux kernel

35
00:01:20,720 --> 00:01:27,039
and every container basically is just

36
00:01:24,000 --> 00:01:28,960
a single process which is isolated from

37
00:01:27,040 --> 00:01:32,479
the host system by utilizing

38
00:01:28,960 --> 00:01:35,600
things like c groups second uh

39
00:01:32,479 --> 00:01:38,000
ammo or e linux namespaces

40
00:01:35,600 --> 00:01:39,839
and things like that but still they're

41
00:01:38,000 --> 00:01:41,520
all sharing the same kernel they are all

42
00:01:39,840 --> 00:01:44,399
running on the same host and

43
00:01:41,520 --> 00:01:46,479
so there is well it's not as well

44
00:01:44,399 --> 00:01:50,399
separated as it could be

45
00:01:46,479 --> 00:01:53,360
in the cutter containers case cutter

46
00:01:50,399 --> 00:01:54,880
adds another level of layer of security

47
00:01:53,360 --> 00:01:58,560
around that

48
00:01:54,880 --> 00:02:01,039
by including all or by running all these

49
00:01:58,560 --> 00:02:02,159
containers inside a small virtual

50
00:02:01,040 --> 00:02:04,560
machine

51
00:02:02,159 --> 00:02:05,680
so every container is a really tiny

52
00:02:04,560 --> 00:02:08,399
virtual machine

53
00:02:05,680 --> 00:02:10,479
with a separate kernel inside that

54
00:02:08,399 --> 00:02:13,120
virtual machine also the containers are

55
00:02:10,479 --> 00:02:16,000
utilizing the standard

56
00:02:13,120 --> 00:02:17,360
security security mechanisms that that

57
00:02:16,000 --> 00:02:20,480
containers usually use

58
00:02:17,360 --> 00:02:23,040
like name spaces and so on but as

59
00:02:20,480 --> 00:02:24,640
the additional layer you have the uh

60
00:02:23,040 --> 00:02:27,280
hardware virtualization

61
00:02:24,640 --> 00:02:28,720
which is like isolating the uh the

62
00:02:27,280 --> 00:02:32,400
system even more

63
00:02:28,720 --> 00:02:34,319
from the uh host system and um

64
00:02:32,400 --> 00:02:36,239
yeah dario will have some details about

65
00:02:34,319 --> 00:02:37,200
what additional security that actually

66
00:02:36,239 --> 00:02:40,480
provides

67
00:02:37,200 --> 00:02:43,679
yes so uh very quickly uh

68
00:02:40,480 --> 00:02:45,599
as large said as have said uh

69
00:02:43,680 --> 00:02:47,280
catacon containers uses virtualization

70
00:02:45,599 --> 00:02:48,480
adds virtualization to the picture of

71
00:02:47,280 --> 00:02:50,959
containers so why

72
00:02:48,480 --> 00:02:52,480
uh using why doing that why adding

73
00:02:50,959 --> 00:02:53,440
virtualization why not just the

74
00:02:52,480 --> 00:02:56,640
containers be

75
00:02:53,440 --> 00:02:58,400
well containers uh yeah well if we

76
00:02:56,640 --> 00:02:59,760
if we think of a scenario where we have

77
00:02:58,400 --> 00:03:01,840
uh potentially uh

78
00:02:59,760 --> 00:03:03,679
untrusted code running inside your

79
00:03:01,840 --> 00:03:06,959
containers then

80
00:03:03,680 --> 00:03:10,400
one reason would be attack surface

81
00:03:06,959 --> 00:03:12,159
meaning that in a standard container

82
00:03:10,400 --> 00:03:13,599
in a standard container setup then the

83
00:03:12,159 --> 00:03:16,079
attack surface from

84
00:03:13,599 --> 00:03:17,359
inside the container to the host if your

85
00:03:16,080 --> 00:03:19,280
malicious code running the container

86
00:03:17,360 --> 00:03:21,760
wants to attack the host

87
00:03:19,280 --> 00:03:23,440
the attack surface is the one of is the

88
00:03:21,760 --> 00:03:24,480
interface the cisco interface of the

89
00:03:23,440 --> 00:03:26,879
shared kernel

90
00:03:24,480 --> 00:03:28,159
with all its variants which is huge of

91
00:03:26,879 --> 00:03:28,798
course you can restrict it but it's

92
00:03:28,159 --> 00:03:31,440
still

93
00:03:28,799 --> 00:03:32,560
a shared kernel between among all the

94
00:03:31,440 --> 00:03:34,079
containers

95
00:03:32,560 --> 00:03:35,760
uh while on the other end if you have

96
00:03:34,080 --> 00:03:37,280
virtualization then the attack surface

97
00:03:35,760 --> 00:03:39,200
is the one of the hypervisor and even if

98
00:03:37,280 --> 00:03:41,840
you had if you if you add to that

99
00:03:39,200 --> 00:03:43,440
the device model basically so all the

100
00:03:41,840 --> 00:03:44,480
abstractions that you need to create

101
00:03:43,440 --> 00:03:47,840
virtual devices then

102
00:03:44,480 --> 00:03:50,720
there is still smaller

103
00:03:47,840 --> 00:03:52,480
then another point defense in depth

104
00:03:50,720 --> 00:03:55,040
meaning that uh

105
00:03:52,480 --> 00:03:57,518
to actually escape with virtualization

106
00:03:55,040 --> 00:03:59,200
in the picture to actually escape

107
00:03:57,519 --> 00:04:01,200
something running inside a cata

108
00:03:59,200 --> 00:04:02,319
container want to escape and do harm at

109
00:04:01,200 --> 00:04:05,200
the host level

110
00:04:02,319 --> 00:04:05,599
it needs to escape two layers containers

111
00:04:05,200 --> 00:04:09,040
and

112
00:04:05,599 --> 00:04:10,079
virtualization and so as a matter of

113
00:04:09,040 --> 00:04:12,239
fact what you get is

114
00:04:10,080 --> 00:04:13,680
improved isolation as ralph has already

115
00:04:12,239 --> 00:04:16,160
said meaning that

116
00:04:13,680 --> 00:04:18,478
for example even if someone manages to

117
00:04:16,160 --> 00:04:20,639
escape from

118
00:04:18,478 --> 00:04:22,400
from from a container for example and

119
00:04:20,639 --> 00:04:23,919
manages for example to exploit one of

120
00:04:22,400 --> 00:04:26,159
vulnerability to crash

121
00:04:23,919 --> 00:04:27,680
the host if you are running standard in

122
00:04:26,160 --> 00:04:29,280
a standard container setup then

123
00:04:27,680 --> 00:04:31,280
it can actually crash the host and cause

124
00:04:29,280 --> 00:04:32,719
denial of service for uh all the other

125
00:04:31,280 --> 00:04:34,559
containers running there

126
00:04:32,720 --> 00:04:35,919
while uh on the other hand with

127
00:04:34,560 --> 00:04:38,000
virtualization and so

128
00:04:35,919 --> 00:04:40,320
in kata container setup it can only

129
00:04:38,000 --> 00:04:42,560
crash it's the virtualization then

130
00:04:40,320 --> 00:04:43,520
sorry virtual machine where it's running

131
00:04:42,560 --> 00:04:47,120
inside

132
00:04:43,520 --> 00:04:48,960
and of course this all comes at a price

133
00:04:47,120 --> 00:04:51,759
in terms of overhead mostly cpu and

134
00:04:48,960 --> 00:04:51,758
memory overhead

135
00:04:51,840 --> 00:04:56,719
and of course we want for this to be

136
00:04:54,880 --> 00:04:59,199
as small as possible even at the price

137
00:04:56,720 --> 00:05:00,800
of having reduced functionality with

138
00:04:59,199 --> 00:05:02,720
respect to as compared to

139
00:05:00,800 --> 00:05:04,400
traditional virtualization because we

140
00:05:02,720 --> 00:05:06,240
don't need for example all the features

141
00:05:04,400 --> 00:05:07,440
and we want in fact a small and fast

142
00:05:06,240 --> 00:05:10,720
kernel

143
00:05:07,440 --> 00:05:12,880
inside our own little vms

144
00:05:10,720 --> 00:05:14,479
and we also want a small and fast uh

145
00:05:12,880 --> 00:05:17,919
virtual machine monitor

146
00:05:14,479 --> 00:05:18,639
and to do that you basically configure

147
00:05:17,919 --> 00:05:20,560
the headline

148
00:05:18,639 --> 00:05:22,560
so that it's tiny and little and it only

149
00:05:20,560 --> 00:05:25,600
includes all the features that you need

150
00:05:22,560 --> 00:05:27,840
and as far as machine monitors goes you

151
00:05:25,600 --> 00:05:29,759
can use qmu which is the most

152
00:05:27,840 --> 00:05:31,359
uh common choice in traditional

153
00:05:29,759 --> 00:05:32,479
virtualization but you can also use

154
00:05:31,360 --> 00:05:34,560
others which have

155
00:05:32,479 --> 00:05:36,479
different properties and in opensuse

156
00:05:34,560 --> 00:05:37,759
right now as you will see later in our

157
00:05:36,479 --> 00:05:40,719
demo

158
00:05:37,759 --> 00:05:42,080
we are using a smaller current than the

159
00:05:40,720 --> 00:05:43,600
the one we provided by default it's

160
00:05:42,080 --> 00:05:44,960
called kv-small is a flavor it's a

161
00:05:43,600 --> 00:05:46,560
flavor of our kernel

162
00:05:44,960 --> 00:05:47,680
although this should be regarded as a

163
00:05:46,560 --> 00:05:49,680
temporary solution and we are

164
00:05:47,680 --> 00:05:52,400
investigating what would be the best

165
00:05:49,680 --> 00:05:53,919
long-term approach and solution and for

166
00:05:52,400 --> 00:05:56,159
a visual machine monitor

167
00:05:53,919 --> 00:05:57,120
right now you would get if you use

168
00:05:56,160 --> 00:05:59,440
custom containers

169
00:05:57,120 --> 00:06:01,919
user you will get them running and using

170
00:05:59,440 --> 00:06:05,600
just plain standard qmu but

171
00:06:01,919 --> 00:06:07,758
again here we are investigating

172
00:06:05,600 --> 00:06:08,800
better approaches including firecracker

173
00:06:07,759 --> 00:06:11,199
and including

174
00:06:08,800 --> 00:06:11,840
using qmu with micro vm which is

175
00:06:11,199 --> 00:06:14,800
something

176
00:06:11,840 --> 00:06:17,198
being actively developed these days and

177
00:06:14,800 --> 00:06:17,199
i'm done

178
00:06:18,560 --> 00:06:21,919
yeah another feature of cutter

179
00:06:20,319 --> 00:06:22,720
containers is that it's actually

180
00:06:21,919 --> 00:06:26,799
implementing

181
00:06:22,720 --> 00:06:28,639
uh the the oci specifications so

182
00:06:26,800 --> 00:06:30,720
the the advantage of that is that you

183
00:06:28,639 --> 00:06:33,600
can just replace

184
00:06:30,720 --> 00:06:34,800
your current runtime in most cases run c

185
00:06:33,600 --> 00:06:37,440
i guess

186
00:06:34,800 --> 00:06:38,080
with cutter containers and all the tools

187
00:06:37,440 --> 00:06:41,919
that use

188
00:06:38,080 --> 00:06:44,639
run c will seamlessly

189
00:06:41,919 --> 00:06:45,120
continue to work with cutter containers

190
00:06:44,639 --> 00:06:47,840
but now

191
00:06:45,120 --> 00:06:49,039
leveraging the enhanced security so you

192
00:06:47,840 --> 00:06:51,440
could just like

193
00:06:49,039 --> 00:06:52,880
yeah use portman or kubernetes with cryo

194
00:06:51,440 --> 00:06:56,080
or even docker

195
00:06:52,880 --> 00:06:56,639
um and run uh cutter containers using

196
00:06:56,080 --> 00:07:00,159
that

197
00:06:56,639 --> 00:07:01,440
um without any well with just very small

198
00:07:00,160 --> 00:07:05,680
changes

199
00:07:01,440 --> 00:07:06,800
in how you use it um

200
00:07:05,680 --> 00:07:09,680
important to mention what cutter

201
00:07:06,800 --> 00:07:12,240
containers is not as well it's not like

202
00:07:09,680 --> 00:07:13,360
a tool to run your normal virtual

203
00:07:12,240 --> 00:07:15,440
machine workloads

204
00:07:13,360 --> 00:07:16,479
inside kubernetes or something it's

205
00:07:15,440 --> 00:07:19,360
really about

206
00:07:16,479 --> 00:07:19,359
running containers

207
00:07:20,400 --> 00:07:25,440
this is a small overview about the

208
00:07:23,199 --> 00:07:28,479
internals of cutter containers

209
00:07:25,440 --> 00:07:31,120
basically yeah what's outside the box

210
00:07:28,479 --> 00:07:34,240
here could also be

211
00:07:31,120 --> 00:07:34,240
pot man for example

212
00:07:34,400 --> 00:07:41,120
and podman would call conmen which would

213
00:07:38,240 --> 00:07:41,759
which calls qatar run time in the same

214
00:07:41,120 --> 00:07:44,879
manner

215
00:07:41,759 --> 00:07:45,759
as it would call run c cutter runtime

216
00:07:44,879 --> 00:07:48,560
then will

217
00:07:45,759 --> 00:07:49,680
create the sandbox the virtual machine

218
00:07:48,560 --> 00:07:53,199
basically calling

219
00:07:49,680 --> 00:07:56,639
qamo and talking to it by its management

220
00:07:53,199 --> 00:07:58,400
socket and

221
00:07:56,639 --> 00:08:00,879
there that will launch the virtual

222
00:07:58,400 --> 00:08:01,280
machine that virtual machine image will

223
00:08:00,879 --> 00:08:04,319
will

224
00:08:01,280 --> 00:08:07,679
um as the single process start

225
00:08:04,319 --> 00:08:11,120
the cutter agent and um

226
00:08:07,680 --> 00:08:14,560
that is then being used uh or talked to

227
00:08:11,120 --> 00:08:15,520
within in a grpc on a v-stock interface

228
00:08:14,560 --> 00:08:18,160
or on the virtual

229
00:08:15,520 --> 00:08:20,719
uh virtio serial interface that depends

230
00:08:18,160 --> 00:08:23,440
a little on the configuration

231
00:08:20,720 --> 00:08:24,240
to launch the containers inside the

232
00:08:23,440 --> 00:08:26,639
sandbox

233
00:08:24,240 --> 00:08:27,520
and also the standard in and standard

234
00:08:26,639 --> 00:08:30,800
out and

235
00:08:27,520 --> 00:08:34,478
these things are going via that vsoc

236
00:08:30,800 --> 00:08:37,680
thing i think that should be enough for

237
00:08:34,479 --> 00:08:41,680
for how the architecture looks like this

238
00:08:37,679 --> 00:08:44,959
is basically summarizing it

239
00:08:41,679 --> 00:08:46,640
some yeah some words about how

240
00:08:44,959 --> 00:08:48,399
how storage is implemented in cutter

241
00:08:46,640 --> 00:08:50,399
containers like if you

242
00:08:48,399 --> 00:08:51,839
the container root file system and

243
00:08:50,399 --> 00:08:52,800
volumes that you attach to your

244
00:08:51,839 --> 00:08:56,080
container

245
00:08:52,800 --> 00:08:57,839
they are currently shared or

246
00:08:56,080 --> 00:09:00,240
injected into the container using the

247
00:08:57,839 --> 00:09:04,399
nine pfs file system

248
00:09:00,240 --> 00:09:07,760
and i don't know if you ever use 9pfs

249
00:09:04,399 --> 00:09:08,080
it well has some performance issues it's

250
00:09:07,760 --> 00:09:11,680
pretty

251
00:09:08,080 --> 00:09:14,959
slow and there's work underway to

252
00:09:11,680 --> 00:09:18,800
to replace that with

253
00:09:14,959 --> 00:09:20,640
the verti ofs which is i think recently

254
00:09:18,800 --> 00:09:23,680
landed into the kernel in

255
00:09:20,640 --> 00:09:26,800
5.4 or 5.3 i'm not entirely sure

256
00:09:23,680 --> 00:09:27,279
and also with a via ofs support is going

257
00:09:26,800 --> 00:09:30,560
to be

258
00:09:27,279 --> 00:09:31,439
part of the next qemo release and that

259
00:09:30,560 --> 00:09:37,680
will give

260
00:09:31,440 --> 00:09:39,839
much better performance than 9pfs

261
00:09:37,680 --> 00:09:41,040
um yeah some words about how you could

262
00:09:39,839 --> 00:09:44,320
use it if you

263
00:09:41,040 --> 00:09:46,319
use opensuse um

264
00:09:44,320 --> 00:09:48,000
if you're on tumbleweed it's just easy

265
00:09:46,320 --> 00:09:49,600
you can just install it it's available

266
00:09:48,000 --> 00:09:52,720
in the standard repositories

267
00:09:49,600 --> 00:09:54,399
just call the install uh cutter

268
00:09:52,720 --> 00:09:56,240
containers and it will be there

269
00:09:54,399 --> 00:09:58,560
for for other distributions we are

270
00:09:56,240 --> 00:10:01,360
providing it via the devil cubic

271
00:09:58,560 --> 00:10:02,000
project and the build service and it's

272
00:10:01,360 --> 00:10:04,880
there for

273
00:10:02,000 --> 00:10:06,320
for leap various releases and also for

274
00:10:04,880 --> 00:10:08,480
celeste

275
00:10:06,320 --> 00:10:09,839
if you want to play around with that

276
00:10:08,480 --> 00:10:13,200
there are two packages actually

277
00:10:09,839 --> 00:10:16,240
there's the cutter containers package

278
00:10:13,200 --> 00:10:17,920
which contains the runtime and then

279
00:10:16,240 --> 00:10:18,959
there's the other package which contains

280
00:10:17,920 --> 00:10:21,920
the

281
00:10:18,959 --> 00:10:25,119
specific kernel and init rd for for

282
00:10:21,920 --> 00:10:25,120
running the virtual machine

283
00:10:26,560 --> 00:10:32,959
so now for some short demo

284
00:10:30,160 --> 00:10:33,600
first thing i'm going to show is how to

285
00:10:32,959 --> 00:10:37,599
use it with

286
00:10:33,600 --> 00:10:39,519
with potman and

287
00:10:37,600 --> 00:10:42,480
as i didn't sacrifice enough chicken for

288
00:10:39,519 --> 00:10:47,839
the demo god i'm just playing a video

289
00:10:42,480 --> 00:10:47,839
uh this one

290
00:10:50,640 --> 00:10:54,800
i hope that's big enough for everyone to

291
00:10:52,320 --> 00:10:57,120
see yeah just to prove

292
00:10:54,800 --> 00:10:57,920
this this is a tumbleweed system which

293
00:10:57,120 --> 00:11:00,000
has the

294
00:10:57,920 --> 00:11:02,319
cutter containers packages installed

295
00:11:00,000 --> 00:11:04,480
it's basically the latest packages

296
00:11:02,320 --> 00:11:06,320
there's one small configuration change

297
00:11:04,480 --> 00:11:07,360
that needs to be made if you want to run

298
00:11:06,320 --> 00:11:10,320
cutter containers

299
00:11:07,360 --> 00:11:11,680
rootless on your with your normal user

300
00:11:10,320 --> 00:11:13,120
instead of root you

301
00:11:11,680 --> 00:11:15,839
and you would need in the local

302
00:11:13,120 --> 00:11:18,640
configuration to adapt the

303
00:11:15,839 --> 00:11:19,839
temp temp directory to to your user's

304
00:11:18,640 --> 00:11:22,880
run path

305
00:11:19,839 --> 00:11:27,760
and additionally

306
00:11:22,880 --> 00:11:31,200
there's the need to enable the runtime

307
00:11:27,760 --> 00:11:32,079
of qatar to be a supported runtime for

308
00:11:31,200 --> 00:11:35,680
for potmen

309
00:11:32,079 --> 00:11:38,719
there's this section run times in the

310
00:11:35,680 --> 00:11:41,199
pot.conf which lists all the available

311
00:11:38,720 --> 00:11:44,320
run times and the standard one is run c

312
00:11:41,200 --> 00:11:47,519
um this qatar runtime

313
00:11:44,320 --> 00:11:48,399
thing needs to be added so that portman

314
00:11:47,519 --> 00:11:50,959
can find the

315
00:11:48,399 --> 00:11:53,680
runtime if you if the setting is left

316
00:11:50,959 --> 00:11:56,239
empty it will look into the standard

317
00:11:53,680 --> 00:11:56,959
passes a path like user bin for for the

318
00:11:56,240 --> 00:11:59,760
binary

319
00:11:56,959 --> 00:12:01,279
otherwise you could also specify a

320
00:11:59,760 --> 00:12:04,240
concrete path where

321
00:12:01,279 --> 00:12:04,240
it shouldn't be looking

322
00:12:05,760 --> 00:12:12,560
um yeah and then basically

323
00:12:08,959 --> 00:12:16,079
for this for this demo actually i

324
00:12:12,560 --> 00:12:19,439
prepared a small next cloud image

325
00:12:16,079 --> 00:12:21,199
and configured it so i will just launch

326
00:12:19,440 --> 00:12:22,560
launch it now which is already

327
00:12:21,200 --> 00:12:25,760
configured and

328
00:12:22,560 --> 00:12:28,638
and you can now see that

329
00:12:25,760 --> 00:12:28,959
if you run a command in that container

330
00:12:28,639 --> 00:12:30,800
so

331
00:12:28,959 --> 00:12:32,800
so the container is launched and and now

332
00:12:30,800 --> 00:12:35,519
i run a the unit name

333
00:12:32,800 --> 00:12:37,199
dash a command there and you see that

334
00:12:35,519 --> 00:12:39,920
it's running the

335
00:12:37,200 --> 00:12:40,959
kvm small kernel which is different from

336
00:12:39,920 --> 00:12:44,560
the host kernel

337
00:12:40,959 --> 00:12:47,040
just as a proof that it's actually uh

338
00:12:44,560 --> 00:12:48,638
using um yeah well a different code

339
00:12:47,040 --> 00:12:50,880
virtualization

340
00:12:48,639 --> 00:12:53,760
yeah and here you see the well the

341
00:12:50,880 --> 00:12:56,720
application in action

342
00:12:53,760 --> 00:12:57,200
i guess yeah most of you have seen this

343
00:12:56,720 --> 00:12:59,839
uh

344
00:12:57,200 --> 00:13:00,720
just to take a look at how it looks from

345
00:12:59,839 --> 00:13:03,680
the uh

346
00:13:00,720 --> 00:13:04,880
from the processes just looking for the

347
00:13:03,680 --> 00:13:08,319
conron process

348
00:13:04,880 --> 00:13:11,120
seeing what it launches and uh

349
00:13:08,320 --> 00:13:11,839
taking a look at is its child processes

350
00:13:11,120 --> 00:13:15,600
to

351
00:13:11,839 --> 00:13:17,440
to see uh yeah the

352
00:13:15,600 --> 00:13:19,120
whole architecture in action so you see

353
00:13:17,440 --> 00:13:21,920
that con mon has

354
00:13:19,120 --> 00:13:23,600
is talking to katashim which is like

355
00:13:21,920 --> 00:13:27,040
talking to you to the agent

356
00:13:23,600 --> 00:13:27,920
inside the uh inside the virtual machine

357
00:13:27,040 --> 00:13:30,000
and and

358
00:13:27,920 --> 00:13:32,240
collecting standard in and standard out

359
00:13:30,000 --> 00:13:34,720
and then processing the signals

360
00:13:32,240 --> 00:13:38,639
of the container and there you see the

361
00:13:34,720 --> 00:13:38,639
virtual machine running inside qmo

362
00:13:38,720 --> 00:13:44,639
um that's basically it for the

363
00:13:42,079 --> 00:13:48,638
hotmail demo not sure we have enough

364
00:13:44,639 --> 00:13:50,639
time for

365
00:13:48,639 --> 00:13:53,040
okay yeah then let's try the other one

366
00:13:50,639 --> 00:13:56,639
i've also

367
00:13:53,040 --> 00:13:59,920
prepared something to show

368
00:13:56,639 --> 00:14:03,040
how to run it in um

369
00:13:59,920 --> 00:14:07,120
in kubernetes basically this

370
00:14:03,040 --> 00:14:09,599
humanities cluster i'm using is uh

371
00:14:07,120 --> 00:14:10,320
is based on cubic so it's just a simple

372
00:14:09,600 --> 00:14:13,760
one with just

373
00:14:10,320 --> 00:14:13,760
single masks and three workers

374
00:14:15,040 --> 00:14:19,599
all nodes needs need to have the uh

375
00:14:17,920 --> 00:14:21,680
packages installed of course

376
00:14:19,600 --> 00:14:23,600
uh there's a small configuration change

377
00:14:21,680 --> 00:14:26,079
that needs to be made to the

378
00:14:23,600 --> 00:14:27,440
cryo configuration similar to what we

379
00:14:26,079 --> 00:14:31,920
did we've done for the

380
00:14:27,440 --> 00:14:34,079
uh the podconf you need to enable

381
00:14:31,920 --> 00:14:35,199
the runtime it looks slightly different

382
00:14:34,079 --> 00:14:36,800
here but

383
00:14:35,199 --> 00:14:38,639
it's essentially the same you just

384
00:14:36,800 --> 00:14:40,880
define that you

385
00:14:38,639 --> 00:14:42,880
have an additional runtime in this case

386
00:14:40,880 --> 00:14:46,160
the runtime will be called qatar runtime

387
00:14:42,880 --> 00:14:48,959
and will also look for that

388
00:14:46,160 --> 00:14:48,959
for that binary

389
00:14:52,720 --> 00:14:57,120
then you need to restart cryo and also

390
00:14:55,519 --> 00:15:00,240
the cubelet service

391
00:14:57,120 --> 00:15:02,880
to pick up the changes

392
00:15:00,240 --> 00:15:04,720
and you need to do all that on all nodes

393
00:15:02,880 --> 00:15:05,360
of the cluster of course because you

394
00:15:04,720 --> 00:15:07,040
don't know

395
00:15:05,360 --> 00:15:09,600
where where your workload is going to be

396
00:15:07,040 --> 00:15:12,639
scheduled

397
00:15:09,600 --> 00:15:13,600
and then in this case i you need to

398
00:15:12,639 --> 00:15:15,600
define a

399
00:15:13,600 --> 00:15:17,839
a new runtime class for your cluster

400
00:15:15,600 --> 00:15:21,839
runtime class this is a feature that

401
00:15:17,839 --> 00:15:23,519
got introduced in some okay not too old

402
00:15:21,839 --> 00:15:25,680
version of kubernetes where you can

403
00:15:23,519 --> 00:15:26,000
define alternative runtimes so that you

404
00:15:25,680 --> 00:15:29,040
can

405
00:15:26,000 --> 00:15:30,800
switch your workload to like you use a

406
00:15:29,040 --> 00:15:33,519
different runtime you can have like

407
00:15:30,800 --> 00:15:34,479
one container or one port using the

408
00:15:33,519 --> 00:15:37,199
standard

409
00:15:34,480 --> 00:15:37,759
run c runtime and another one using

410
00:15:37,199 --> 00:15:39,359
cutter

411
00:15:37,759 --> 00:15:42,160
in parallel on the same machine for

412
00:15:39,360 --> 00:15:46,000
example and to do that you need to have

413
00:15:42,160 --> 00:15:46,000
this this runtime class defined

414
00:15:46,160 --> 00:15:52,240
um and upload it to the cluster and

415
00:15:49,440 --> 00:15:54,320
skip a bit here just to yeah now there's

416
00:15:52,240 --> 00:15:56,880
a runtime class called qatar

417
00:15:54,320 --> 00:15:57,920
and basically if you want to run an

418
00:15:56,880 --> 00:16:00,880
application

419
00:15:57,920 --> 00:16:01,920
this one is a sample application from

420
00:16:00,880 --> 00:16:04,959
the

421
00:16:01,920 --> 00:16:06,959
kubernetes repository which is just a

422
00:16:04,959 --> 00:16:08,560
very simple thing it launches three

423
00:16:06,959 --> 00:16:11,680
radius nodes

424
00:16:08,560 --> 00:16:14,160
and a simple php application which

425
00:16:11,680 --> 00:16:15,239
acts like a guest book and in this case

426
00:16:14,160 --> 00:16:16,480
i run the

427
00:16:15,240 --> 00:16:19,839
[Music]

428
00:16:16,480 --> 00:16:22,480
the red on the bare metal nodes or

429
00:16:19,839 --> 00:16:25,279
using the standard run c runtime and for

430
00:16:22,480 --> 00:16:28,720
the front end application the php thing

431
00:16:25,279 --> 00:16:30,639
i decided to put it into the runtime

432
00:16:28,720 --> 00:16:32,880
class cutter you can see it here

433
00:16:30,639 --> 00:16:33,839
that's all you need to change in the in

434
00:16:32,880 --> 00:16:36,160
the yaml file

435
00:16:33,839 --> 00:16:39,199
to have it run using cutter instead of

436
00:16:36,160 --> 00:16:39,199
this done at one time

437
00:16:41,360 --> 00:16:48,639
so basically this application just needs

438
00:16:44,959 --> 00:16:48,638
to be loaded into the cluster and then

439
00:16:48,959 --> 00:16:52,239
it needs to yeah need to wait until it's

440
00:16:51,040 --> 00:16:55,920
running

441
00:16:52,240 --> 00:16:58,000
and skip over this and basically

442
00:16:55,920 --> 00:17:01,199
yeah well this is also proving that the

443
00:16:58,000 --> 00:17:05,280
application is actually running

444
00:17:01,199 --> 00:17:08,079
and here i execute the same command as

445
00:17:05,280 --> 00:17:09,918
earlier for portman inside the inside

446
00:17:08,079 --> 00:17:11,760
the the container and you can see that

447
00:17:09,919 --> 00:17:14,400
it's also running in a different kernel

448
00:17:11,760 --> 00:17:14,400
than the host

449
00:17:15,039 --> 00:17:24,079
i think that's basically it

450
00:17:19,280 --> 00:17:32,720
are there questions

451
00:17:24,079 --> 00:17:34,000
oh yeah quite a few uh what about

452
00:17:32,720 --> 00:17:36,320
startup time

453
00:17:34,000 --> 00:17:37,679
sorry what about startup time it's of

454
00:17:36,320 --> 00:17:40,720
course a little longer

455
00:17:37,679 --> 00:17:42,400
um but the project is

456
00:17:40,720 --> 00:17:44,000
trying to optimize for that and that's

457
00:17:42,400 --> 00:17:46,720
why they reduced the

458
00:17:44,000 --> 00:17:47,120
init rd to the absolute minimum like you

459
00:17:46,720 --> 00:17:49,600
need

460
00:17:47,120 --> 00:17:51,360
uh well the init id basically just

461
00:17:49,600 --> 00:17:55,439
contains the cutter agent

462
00:17:51,360 --> 00:17:58,320
and it boots um in our case it's like

463
00:17:55,440 --> 00:18:00,480
uh i'd say two two and a half seconds

464
00:17:58,320 --> 00:18:04,480
for booting up the virtual machine

465
00:18:00,480 --> 00:18:07,039
but it can be made even faster

466
00:18:04,480 --> 00:18:09,520
that's what we were thinking about using

467
00:18:07,039 --> 00:18:12,480
smaller and tailored kernel and also

468
00:18:09,520 --> 00:18:14,240
uh special purpose virtual machine

469
00:18:12,480 --> 00:18:16,960
monitors right now what you get

470
00:18:14,240 --> 00:18:18,720
is yes a smaller kernel but a pretty

471
00:18:16,960 --> 00:18:21,280
standard qmu as a machine monitor

472
00:18:18,720 --> 00:18:22,880
why we would want to use either a

473
00:18:21,280 --> 00:18:25,360
different machine model than qm

474
00:18:22,880 --> 00:18:26,559
or as i said qm with configured in such

475
00:18:25,360 --> 00:18:29,600
in a special way

476
00:18:26,559 --> 00:18:31,039
which would reduce a lot the

477
00:18:29,600 --> 00:18:32,719
startup time for example and go to the

478
00:18:31,039 --> 00:18:34,559
memory footprint and this is something

479
00:18:32,720 --> 00:18:36,000
which is not currently there yet if you

480
00:18:34,559 --> 00:18:37,360
install the open source packages but we

481
00:18:36,000 --> 00:18:40,799
will it will

482
00:18:37,360 --> 00:18:43,039
and it's ready so

483
00:18:40,799 --> 00:18:43,918
um hi there um i was about to ask the

484
00:18:43,039 --> 00:18:45,440
same question

485
00:18:43,919 --> 00:18:47,039
and the follow-up was like have you

486
00:18:45,440 --> 00:18:49,200
tried some sort of uh

487
00:18:47,039 --> 00:18:51,280
vm reuse for a different container or

488
00:18:49,200 --> 00:18:52,480
you always is kata always starting from

489
00:18:51,280 --> 00:18:54,639
scratch

490
00:18:52,480 --> 00:18:56,000
um currently it's always starting from

491
00:18:54,640 --> 00:18:58,799
scratch so there was

492
00:18:56,000 --> 00:18:59,280
i think there was once an idea to just

493
00:18:58,799 --> 00:19:02,559
start

494
00:18:59,280 --> 00:19:04,960
the virtual machines from a snapshot so

495
00:19:02,559 --> 00:19:06,639
like like taking a running machine

496
00:19:04,960 --> 00:19:09,039
taking your snapshot and cloning that

497
00:19:06,640 --> 00:19:12,400
and then starting it up again

498
00:19:09,039 --> 00:19:15,120
i don't know if that's uh still an

499
00:19:12,400 --> 00:19:15,520
idea or if how that really worked out

500
00:19:15,120 --> 00:19:18,479
but

501
00:19:15,520 --> 00:19:20,000
uh yes things like that can be done but

502
00:19:18,480 --> 00:19:22,799
there is no currently no

503
00:19:20,000 --> 00:19:24,559
um like for example pre-start or

504
00:19:22,799 --> 00:19:25,679
something like keeping a couple of

505
00:19:24,559 --> 00:19:27,918
virtual machines running in the

506
00:19:25,679 --> 00:19:29,679
background or something that's not there

507
00:19:27,919 --> 00:19:31,039
i i think i'm not sure but i think there

508
00:19:29,679 --> 00:19:33,120
are things still like

509
00:19:31,039 --> 00:19:34,559
uh doing uh things in parallel so like

510
00:19:33,120 --> 00:19:38,320
preparing the storage

511
00:19:34,559 --> 00:19:40,160
while the virtual machine is

512
00:19:38,320 --> 00:19:42,399
yeah it's it's for example it's booting

513
00:19:40,160 --> 00:19:45,760
up a very small uh

514
00:19:42,400 --> 00:19:47,840
machine and later on adding memory to it

515
00:19:45,760 --> 00:19:49,679
by hot plugging and

516
00:19:47,840 --> 00:19:51,280
hot plugging the network device when the

517
00:19:49,679 --> 00:19:53,919
kernel is already booting and then

518
00:19:51,280 --> 00:20:07,840
things like that okay we're out of time

519
00:19:53,919 --> 00:20:07,840
thank you very much

