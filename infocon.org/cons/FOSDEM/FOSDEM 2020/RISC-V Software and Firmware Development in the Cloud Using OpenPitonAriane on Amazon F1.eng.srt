1
00:00:07,040 --> 00:00:10,160
all right so

2
00:00:07,839 --> 00:00:11,840
hi everyone i'm jonathan balkin here

3
00:00:10,160 --> 00:00:13,840
from princeton university and

4
00:00:11,840 --> 00:00:16,240
i'm representing my research group which

5
00:00:13,840 --> 00:00:18,000
is led by professor david wentzlaff

6
00:00:16,239 --> 00:00:20,720
and i'm going to be talking about our

7
00:00:18,000 --> 00:00:22,560
openp tomcats ariane platform and how we

8
00:00:20,720 --> 00:00:24,799
run that on amazon f1 and make it

9
00:00:22,560 --> 00:00:26,479
available for you to use for software or

10
00:00:24,800 --> 00:00:28,840
firmware development in the cloud

11
00:00:26,480 --> 00:00:30,080
without needing risk five development

12
00:00:28,840 --> 00:00:32,640
boards

13
00:00:30,080 --> 00:00:33,519
so this work is part of the decades

14
00:00:32,640 --> 00:00:35,760
project

15
00:00:33,520 --> 00:00:37,200
which is funded under darpa's software

16
00:00:35,760 --> 00:00:38,640
defined hardware program

17
00:00:37,200 --> 00:00:41,040
and the goal the program in general is

18
00:00:38,640 --> 00:00:42,320
building runtime reconfigurable hardware

19
00:00:41,040 --> 00:00:45,360
to accelerate data intensive

20
00:00:42,320 --> 00:00:47,280
applications and so we have a big focus

21
00:00:45,360 --> 00:00:48,640
in decades where we're trying to build a

22
00:00:47,280 --> 00:00:51,680
full stack system

23
00:00:48,640 --> 00:00:53,199
which boots uh boots linux has a large

24
00:00:51,680 --> 00:00:55,440
number of accelerators

25
00:00:53,199 --> 00:00:56,960
and has what we call intelligent storage

26
00:00:55,440 --> 00:01:00,000
tiles to make more efficient

27
00:00:56,960 --> 00:01:01,280
data movement in the system and this is

28
00:01:00,000 --> 00:01:02,879
a collaboration between

29
00:01:01,280 --> 00:01:04,159
uh our group professor once was group of

30
00:01:02,879 --> 00:01:04,959
princeton professor martin aussie's

31
00:01:04,159 --> 00:01:06,479
group at princeton

32
00:01:04,959 --> 00:01:08,479
and professor luke carlone who you heard

33
00:01:06,479 --> 00:01:10,000
from earlier at columbia

34
00:01:08,479 --> 00:01:12,000
and the big thing here is that we make

35
00:01:10,000 --> 00:01:13,760
all of our tools open sourcing available

36
00:01:12,000 --> 00:01:16,000
under permissive licenses like vsd and

37
00:01:13,760 --> 00:01:19,439
apache

38
00:01:16,000 --> 00:01:21,600
so open piton plus ariane

39
00:01:19,439 --> 00:01:22,880
is a collaboration between ourselves at

40
00:01:21,600 --> 00:01:25,280
princeton and

41
00:01:22,880 --> 00:01:26,080
the pulp team at eth zurich and

42
00:01:25,280 --> 00:01:28,880
essentially

43
00:01:26,080 --> 00:01:30,240
we want to build a permissively licensed

44
00:01:28,880 --> 00:01:30,960
linux capable many core research

45
00:01:30,240 --> 00:01:34,320
platform

46
00:01:30,960 --> 00:01:35,759
which uses the risk 5 isa and so at eth

47
00:01:34,320 --> 00:01:37,279
they developed the arian core and we saw

48
00:01:35,759 --> 00:01:38,880
them at risk 5 workshop gave a

49
00:01:37,280 --> 00:01:40,400
presentation and at the end they said

50
00:01:38,880 --> 00:01:42,000
oh we want to do multi-core but we're

51
00:01:40,400 --> 00:01:43,600
not sure how to do it and

52
00:01:42,000 --> 00:01:45,520
we had an open source platform called

53
00:01:43,600 --> 00:01:46,960
open piton and so we got in touch with

54
00:01:45,520 --> 00:01:50,158
them and we said hey we could make

55
00:01:46,960 --> 00:01:52,158
a really cool mini core risk 5 platform

56
00:01:50,159 --> 00:01:53,840
and so we start that collaboration and

57
00:01:52,159 --> 00:01:55,520
because these were both mature and

58
00:01:53,840 --> 00:01:57,200
extensible designs we were able to

59
00:01:55,520 --> 00:01:58,880
bring the core and the mini core

60
00:01:57,200 --> 00:02:01,040
platform together within about

61
00:01:58,880 --> 00:02:02,719
six months we were booting smp linux and

62
00:02:01,040 --> 00:02:05,759
it was the first open source smp-1

63
00:02:02,719 --> 00:02:08,160
exporting risk 5 mini core

64
00:02:05,759 --> 00:02:09,598
so ariane itself you may have heard of

65
00:02:08,160 --> 00:02:11,120
already it's being used in a large

66
00:02:09,598 --> 00:02:13,200
number of

67
00:02:11,120 --> 00:02:14,720
projects at the moment is an application

68
00:02:13,200 --> 00:02:15,679
class processor it's written in system

69
00:02:14,720 --> 00:02:18,160
verilog

70
00:02:15,680 --> 00:02:19,599
in my opinion the rtl is very elegant

71
00:02:18,160 --> 00:02:21,520
and easy to read

72
00:02:19,599 --> 00:02:23,280
and it was designed to be linux capable

73
00:02:21,520 --> 00:02:24,640
it's designed uh specifically to build

74
00:02:23,280 --> 00:02:25,280
linux but it can put other unices as

75
00:02:24,640 --> 00:02:26,879
well

76
00:02:25,280 --> 00:02:28,319
um and it's got all that you need to do

77
00:02:26,879 --> 00:02:30,000
that so it's got the l1 caches you need

78
00:02:28,319 --> 00:02:31,040
it's got the privilege modes tlbs and so

79
00:02:30,000 --> 00:02:32,879
on

80
00:02:31,040 --> 00:02:34,879
and it really is designed for

81
00:02:32,879 --> 00:02:35,440
extensibility we had a google summer of

82
00:02:34,879 --> 00:02:37,200
code

83
00:02:35,440 --> 00:02:38,879
project this past summer and our student

84
00:02:37,200 --> 00:02:41,200
within three months was able to

85
00:02:38,879 --> 00:02:42,720
build a new branch predictor and extend

86
00:02:41,200 --> 00:02:44,000
the core to be

87
00:02:42,720 --> 00:02:47,040
dual issue core instead of a single

88
00:02:44,000 --> 00:02:49,120
issue core and that was you know a

89
00:02:47,040 --> 00:02:51,359
newly graduated undergraduate student

90
00:02:49,120 --> 00:02:54,239
who was able to do that

91
00:02:51,360 --> 00:02:55,840
from our side the openpton platform is

92
00:02:54,239 --> 00:02:56,800
an open source mini core research

93
00:02:55,840 --> 00:02:59,840
platform

94
00:02:56,800 --> 00:03:00,800
we've been developing this for about six

95
00:02:59,840 --> 00:03:02,879
years at this point

96
00:03:00,800 --> 00:03:04,319
um it's been contributed to open source

97
00:03:02,879 --> 00:03:07,599
hardware community for

98
00:03:04,319 --> 00:03:09,359
about five and it's written in verilog

99
00:03:07,599 --> 00:03:11,119
rtl everything we write is in burlog

100
00:03:09,360 --> 00:03:13,120
and uh everything we write comes under

101
00:03:11,120 --> 00:03:14,720
the bsd license

102
00:03:13,120 --> 00:03:16,640
the idea here is building an extreme

103
00:03:14,720 --> 00:03:17,760
scale mini core which is still less

104
00:03:16,640 --> 00:03:19,359
capable and so

105
00:03:17,760 --> 00:03:21,280
we have a cash coherence system that we

106
00:03:19,360 --> 00:03:22,159
call p mesh which can scale up to half a

107
00:03:21,280 --> 00:03:24,000
billion cores

108
00:03:22,159 --> 00:03:25,359
and we provide a lot of configurability

109
00:03:24,000 --> 00:03:28,080
options so that you can choose

110
00:03:25,360 --> 00:03:29,760
uh to enable disable certain features or

111
00:03:28,080 --> 00:03:31,519
change the size of structures

112
00:03:29,760 --> 00:03:33,040
in order to test a research idea in

113
00:03:31,519 --> 00:03:34,560
multiple design points and figure out

114
00:03:33,040 --> 00:03:37,440
where the optimal point is

115
00:03:34,560 --> 00:03:38,879
for your design our rtl's been around

116
00:03:37,440 --> 00:03:39,359
for quite a long time and as a result we

117
00:03:38,879 --> 00:03:40,879
support

118
00:03:39,360 --> 00:03:42,879
a variety of different tools both in

119
00:03:40,879 --> 00:03:44,319
simulation and for a kind of back end

120
00:03:42,879 --> 00:03:45,920
and census and so on

121
00:03:44,319 --> 00:03:48,000
and i have an asterisk here for riviera

122
00:03:45,920 --> 00:03:49,760
support this week we got pr from the

123
00:03:48,000 --> 00:03:51,200
developers of the riviera simulator

124
00:03:49,760 --> 00:03:53,200
and they had just implemented all the

125
00:03:51,200 --> 00:03:54,319
support and submitted it as a pr to us

126
00:03:53,200 --> 00:03:56,798
and so that's now upstream

127
00:03:54,319 --> 00:03:58,319
um in open piton um another important

128
00:03:56,799 --> 00:03:58,879
part here is it's all been verified for

129
00:03:58,319 --> 00:03:59,839
asic

130
00:03:58,879 --> 00:04:02,000
and we've done a very thorough

131
00:03:59,840 --> 00:04:03,200
characterization and released all that

132
00:04:02,000 --> 00:04:05,200
characterization data

133
00:04:03,200 --> 00:04:07,280
open source at openpton.org so you can

134
00:04:05,200 --> 00:04:09,599
go and see real data from real chip that

135
00:04:07,280 --> 00:04:12,640
we tipped out 25 core many core

136
00:04:09,599 --> 00:04:14,000
and you know use that for furthering

137
00:04:12,640 --> 00:04:16,639
your research

138
00:04:14,000 --> 00:04:18,320
um but also just uh you know in terms of

139
00:04:16,639 --> 00:04:19,840
philosophy we want to make as much open

140
00:04:18,320 --> 00:04:21,599
as we possibly can

141
00:04:19,839 --> 00:04:23,440
um and the chips that we have are back

142
00:04:21,600 --> 00:04:25,759
in the lab and the debian linux which is

143
00:04:23,440 --> 00:04:27,840
pretty great as well

144
00:04:25,759 --> 00:04:29,199
so uh open piece and placarian is a

145
00:04:27,840 --> 00:04:31,679
tiled many core and so

146
00:04:29,199 --> 00:04:33,520
um you can see a single title here and

147
00:04:31,680 --> 00:04:36,160
on the left we have the arian core

148
00:04:33,520 --> 00:04:37,039
nsl1 caches and on the right we have the

149
00:04:36,160 --> 00:04:39,680
p mesh cache

150
00:04:37,040 --> 00:04:40,400
system from open piton and we have our

151
00:04:39,680 --> 00:04:42,400
private

152
00:04:40,400 --> 00:04:44,638
second level of cache which is the l1.5

153
00:04:42,400 --> 00:04:46,880
we've got our l2 cache which is our llc

154
00:04:44,639 --> 00:04:48,639
and that's distributed and shared across

155
00:04:46,880 --> 00:04:51,680
all of the tiles in the system

156
00:04:48,639 --> 00:04:53,280
and so there's a shard in each tile and

157
00:04:51,680 --> 00:04:56,240
then we have our three knock routers

158
00:04:53,280 --> 00:04:56,719
which implement the pmesh cache protocol

159
00:04:56,240 --> 00:04:59,280
and

160
00:04:56,720 --> 00:05:00,800
so we started out with the spark isa and

161
00:04:59,280 --> 00:05:02,400
when we wanted to move to risk five by

162
00:05:00,800 --> 00:05:04,720
integrating ariane

163
00:05:02,400 --> 00:05:06,719
we had to make changes on both sides and

164
00:05:04,720 --> 00:05:07,919
so on the ariane side they implemented a

165
00:05:06,720 --> 00:05:09,600
new cache subsystem

166
00:05:07,919 --> 00:05:10,960
that's specifically tailored to our

167
00:05:09,600 --> 00:05:14,160
cache interface

168
00:05:10,960 --> 00:05:16,400
and then we on our side developed

169
00:05:14,160 --> 00:05:18,000
not only that cache interface to make it

170
00:05:16,400 --> 00:05:19,758
better improved to work with ariane

171
00:05:18,000 --> 00:05:20,880
but we had to add the risk five atomics

172
00:05:19,759 --> 00:05:22,080
and so those are all supported in a

173
00:05:20,880 --> 00:05:23,680
scalable way in our cache coherent

174
00:05:22,080 --> 00:05:24,880
system

175
00:05:23,680 --> 00:05:26,960
and then once you've got your whole mini

176
00:05:24,880 --> 00:05:28,080
core building up your chip we also have

177
00:05:26,960 --> 00:05:29,520
the chipset which is on the right hand

178
00:05:28,080 --> 00:05:31,280
side here and that's where all the

179
00:05:29,520 --> 00:05:32,320
peripherals live it's for accelerators

180
00:05:31,280 --> 00:05:34,960
live at the moment

181
00:05:32,320 --> 00:05:36,159
and it has things like the boot rom and

182
00:05:34,960 --> 00:05:37,840
which is generated

183
00:05:36,160 --> 00:05:39,520
when you compile your design and that

184
00:05:37,840 --> 00:05:40,638
includes the device tree so that you can

185
00:05:39,520 --> 00:05:42,320
go ahead and run linux

186
00:05:40,639 --> 00:05:45,360
and run the same linux image across a

187
00:05:42,320 --> 00:05:48,000
variety of different open piton designs

188
00:05:45,360 --> 00:05:48,800
we provide the risk five debug spec

189
00:05:48,000 --> 00:05:50,639
compliant

190
00:05:48,800 --> 00:05:53,199
debug unit and so you can actually use

191
00:05:50,639 --> 00:05:54,560
gdb plug into the jtag of your fpga

192
00:05:53,199 --> 00:05:56,319
and then use gdb to step through your

193
00:05:54,560 --> 00:05:57,440
linux boot which is pretty cool i was

194
00:05:56,319 --> 00:05:58,479
really impressed that this was

195
00:05:57,440 --> 00:06:00,880
actually possible i didn't think that

196
00:05:58,479 --> 00:06:02,080
was possible before we did it um

197
00:06:00,880 --> 00:06:03,280
and then we have all the kind of

198
00:06:02,080 --> 00:06:04,800
interrupt controllers and so on that you

199
00:06:03,280 --> 00:06:06,159
need

200
00:06:04,800 --> 00:06:07,759
in terms of configurability we have a

201
00:06:06,160 --> 00:06:08,479
variety of parameters that you can

202
00:06:07,759 --> 00:06:11,680
configure

203
00:06:08,479 --> 00:06:13,680
plus more than you just see here and

204
00:06:11,680 --> 00:06:15,199
again this is really about giving a

205
00:06:13,680 --> 00:06:15,680
variety of design points people can

206
00:06:15,199 --> 00:06:17,120
design

207
00:06:15,680 --> 00:06:18,639
the chips that they want to design and

208
00:06:17,120 --> 00:06:19,199
come up with what the correct optimal

209
00:06:18,639 --> 00:06:21,280
point is

210
00:06:19,199 --> 00:06:22,319
for what they're trying to do and you

211
00:06:21,280 --> 00:06:24,960
can also see the bottom here we have a

212
00:06:22,319 --> 00:06:28,000
variety of loading methods including the

213
00:06:24,960 --> 00:06:30,560
jtech that i just mentioned in terms of

214
00:06:28,000 --> 00:06:32,319
fpga prototyping we support a variety of

215
00:06:30,560 --> 00:06:34,000
xilinx fpgas at the moment

216
00:06:32,319 --> 00:06:35,039
and you know these vary in price and the

217
00:06:34,000 --> 00:06:36,080
number of cores you can get the speed

218
00:06:35,039 --> 00:06:37,120
you can run out and so on

219
00:06:36,080 --> 00:06:39,758
um but the one that we're going to be

220
00:06:37,120 --> 00:06:41,199
talking about is amazon f1 and

221
00:06:39,759 --> 00:06:42,800
the great thing about f1 is that you can

222
00:06:41,199 --> 00:06:43,280
rent it by the hour and so you don't

223
00:06:42,800 --> 00:06:45,280
need

224
00:06:43,280 --> 00:06:47,599
any infrastructure uh on your local

225
00:06:45,280 --> 00:06:48,559
machine and you know it costs i don't

226
00:06:47,600 --> 00:06:50,000
know what it is in euros it's about a

227
00:06:48,560 --> 00:06:52,319
dollar sixty an hour

228
00:06:50,000 --> 00:06:53,680
um and you can get up to about 15 cores

229
00:06:52,319 --> 00:06:55,199
here so this is a lot more than you

230
00:06:53,680 --> 00:06:57,919
could get on kind of any

231
00:06:55,199 --> 00:06:58,560
uh available board that boosts linux

232
00:06:57,919 --> 00:07:00,960
today

233
00:06:58,560 --> 00:07:02,560
and so if you want to do kind of check

234
00:07:00,960 --> 00:07:03,440
out how scalable your application is for

235
00:07:02,560 --> 00:07:04,800
risk five on

236
00:07:03,440 --> 00:07:06,800
a real multiplayer system you can do

237
00:07:04,800 --> 00:07:09,360
this and get good scaling

238
00:07:06,800 --> 00:07:10,160
um so the reason that we did this is

239
00:07:09,360 --> 00:07:11,520
that we

240
00:07:10,160 --> 00:07:14,000
really care about making open pizza

241
00:07:11,520 --> 00:07:16,318
available freely in open source and so

242
00:07:14,000 --> 00:07:18,000
we want people who don't have fpgas to

243
00:07:16,319 --> 00:07:18,880
be able to uh use the platform and that

244
00:07:18,000 --> 00:07:20,479
means you know

245
00:07:18,880 --> 00:07:22,159
hey you don't have the thing in front of

246
00:07:20,479 --> 00:07:23,280
you in the desk uh you

247
00:07:22,160 --> 00:07:25,520
don't have to go and spend the money to

248
00:07:23,280 --> 00:07:27,758
buy one you don't need to buy xilinx

249
00:07:25,520 --> 00:07:28,560
vivado licenses that sort of thing um

250
00:07:27,759 --> 00:07:29,680
and we wanted

251
00:07:28,560 --> 00:07:31,120
to make it available so you don't need

252
00:07:29,680 --> 00:07:31,919
to recompile the hardware too so you can

253
00:07:31,120 --> 00:07:34,400
do this or

254
00:07:31,919 --> 00:07:35,758
software firmware development and so f1

255
00:07:34,400 --> 00:07:37,840
gives us this kind of

256
00:07:35,759 --> 00:07:39,360
cloud rental this is a great step

257
00:07:37,840 --> 00:07:40,400
forward in that direction

258
00:07:39,360 --> 00:07:42,160
and you can do things like rebuild in

259
00:07:40,400 --> 00:07:42,638
the cloud so when you're renting your

260
00:07:42,160 --> 00:07:44,560
your

261
00:07:42,639 --> 00:07:46,319
fpga system from them you don't need to

262
00:07:44,560 --> 00:07:48,000
buy a separate xylinx license it's all

263
00:07:46,319 --> 00:07:50,000
available for you on the system

264
00:07:48,000 --> 00:07:51,360
um and so if you're kind of bursting in

265
00:07:50,000 --> 00:07:52,400
terms of you want to do a bunch of fpgas

266
00:07:51,360 --> 00:07:53,840
at once maybe you don't have the

267
00:07:52,400 --> 00:07:55,840
hardware for that you can use this

268
00:07:53,840 --> 00:07:57,119
or if you just want something that's

269
00:07:55,840 --> 00:07:58,560
much lower cost than spending eight

270
00:07:57,120 --> 00:07:59,840
thousand dollars on an ultra scale plus

271
00:07:58,560 --> 00:08:01,440
fpga that you're getting here

272
00:07:59,840 --> 00:08:03,119
then you can run this for about a buck

273
00:08:01,440 --> 00:08:04,240
60 an hour um

274
00:08:03,120 --> 00:08:06,400
another great thing here is that there's

275
00:08:04,240 --> 00:08:08,080
a repository of bit files um for the

276
00:08:06,400 --> 00:08:10,560
fpgas that are available

277
00:08:08,080 --> 00:08:12,800
and so uh we make available what they

278
00:08:10,560 --> 00:08:14,319
call them agf eyes we make available any

279
00:08:12,800 --> 00:08:16,639
gfi for a nine core

280
00:08:14,319 --> 00:08:18,319
uh open piton plus rn system and this is

281
00:08:16,639 --> 00:08:20,319
really get great as an alternative

282
00:08:18,319 --> 00:08:22,160
real hardware system so if you want to

283
00:08:20,319 --> 00:08:24,560
do your software development you want to

284
00:08:22,160 --> 00:08:26,560
test things out you can do that using

285
00:08:24,560 --> 00:08:28,000
this without having to touch vivado

286
00:08:26,560 --> 00:08:28,720
without having to go and look at rtl you

287
00:08:28,000 --> 00:08:31,919
can just go on

288
00:08:28,720 --> 00:08:31,919
grab that image and get going

289
00:08:32,399 --> 00:08:35,519
now if you do want to build your own

290
00:08:34,958 --> 00:08:37,199
then

291
00:08:35,519 --> 00:08:38,399
we have we try to make everything as

292
00:08:37,200 --> 00:08:38,880
push button as possible and so you can

293
00:08:38,399 --> 00:08:41,360
run

294
00:08:38,880 --> 00:08:42,399
a single command and get back a bit file

295
00:08:41,360 --> 00:08:44,880
on the other end and then

296
00:08:42,399 --> 00:08:46,080
use that to program the fpga and f1 or

297
00:08:44,880 --> 00:08:47,680
for other fpgas

298
00:08:46,080 --> 00:08:49,760
and in this case you know it takes a few

299
00:08:47,680 --> 00:08:53,199
hours to generate this

300
00:08:49,760 --> 00:08:54,959
the fpga is really big it's awesome

301
00:08:53,200 --> 00:08:56,640
but it means it takes a while to do kind

302
00:08:54,959 --> 00:08:58,800
of a census place and root for it

303
00:08:56,640 --> 00:09:00,399
um and you'll note here it produces uh

304
00:08:58,800 --> 00:09:03,040
xylene's design checkpoint

305
00:09:00,399 --> 00:09:04,640
that then gets fed into some other

306
00:09:03,040 --> 00:09:06,319
system on amazon and a queue and you

307
00:09:04,640 --> 00:09:09,279
kind of wait in the plus process

308
00:09:06,320 --> 00:09:09,920
to produce the final hdfi image um you

309
00:09:09,279 --> 00:09:12,880
can run

310
00:09:09,920 --> 00:09:14,000
one core about 125 megahertz here um

311
00:09:12,880 --> 00:09:17,600
this is you know

312
00:09:14,000 --> 00:09:20,160
uh reasonably uh in line with

313
00:09:17,600 --> 00:09:20,640
what the real hardware would be um you

314
00:09:20,160 --> 00:09:22,640
know

315
00:09:20,640 --> 00:09:24,000
maybe like 10x off or something like

316
00:09:22,640 --> 00:09:24,800
that so for computer archetypes that's

317
00:09:24,000 --> 00:09:25,760
like really close

318
00:09:24,800 --> 00:09:27,279
um we're used to talking about

319
00:09:25,760 --> 00:09:28,800
simulation where you're running that you

320
00:09:27,279 --> 00:09:31,360
know 1000x slower or whatever

321
00:09:28,800 --> 00:09:33,040
um and you know you can get up to 12 or

322
00:09:31,360 --> 00:09:35,519
15 cores uh on this

323
00:09:33,040 --> 00:09:36,880
board so if you want to go ahead with

324
00:09:35,519 --> 00:09:37,279
census you can go and check our github

325
00:09:36,880 --> 00:09:40,240
and

326
00:09:37,279 --> 00:09:40,640
and give that shot um the design itself

327
00:09:40,240 --> 00:09:42,959
here

328
00:09:40,640 --> 00:09:44,560
um you can see kind of what ends up on

329
00:09:42,959 --> 00:09:46,560
the amazon fpga in the end

330
00:09:44,560 --> 00:09:48,000
and on the left hand side we've got the

331
00:09:46,560 --> 00:09:49,518
open piton side of things so this is the

332
00:09:48,000 --> 00:09:51,680
stuff that we contribute so

333
00:09:49,519 --> 00:09:53,760
our system is the chip and the chipset

334
00:09:51,680 --> 00:09:55,680
all the peripherals all the cores

335
00:09:53,760 --> 00:09:57,360
caches and so on um and then that

336
00:09:55,680 --> 00:10:00,800
connects to we have this ur

337
00:09:57,360 --> 00:10:02,480
up here um and so the ur

338
00:10:00,800 --> 00:10:04,000
gives you a serial terminal and we have

339
00:10:02,480 --> 00:10:06,480
a driver in linux which will pull

340
00:10:04,000 --> 00:10:07,760
on that and give you a serial terminal

341
00:10:06,480 --> 00:10:10,399
you can connect to

342
00:10:07,760 --> 00:10:11,760
um in the middle we have leds switches

343
00:10:10,399 --> 00:10:13,200
clocks reset et cetera these are all

344
00:10:11,760 --> 00:10:14,800
virtual which is an interesting thing so

345
00:10:13,200 --> 00:10:16,160
normally we just have an fpga board in

346
00:10:14,800 --> 00:10:17,199
the desk and you can flick the switches

347
00:10:16,160 --> 00:10:18,000
you look at the leds you're trying to

348
00:10:17,200 --> 00:10:20,720
figure out what's going on

349
00:10:18,000 --> 00:10:22,079
but it's all virtual in f1 so on your

350
00:10:20,720 --> 00:10:23,360
terminal you can open up

351
00:10:22,079 --> 00:10:25,920
you can run a command and it'll show you

352
00:10:23,360 --> 00:10:27,920
like a virtual led like flickering

353
00:10:25,920 --> 00:10:29,120
um just kind of going from zero to one

354
00:10:27,920 --> 00:10:31,199
um and

355
00:10:29,120 --> 00:10:32,640
then we've also got our aws crossbar

356
00:10:31,200 --> 00:10:35,519
here which connects to the axi

357
00:10:32,640 --> 00:10:36,000
interface um for memory and for dma and

358
00:10:35,519 --> 00:10:38,240
so

359
00:10:36,000 --> 00:10:40,320
that's where the main memory is that's

360
00:10:38,240 --> 00:10:41,440
also where we put our kind of virtual sd

361
00:10:40,320 --> 00:10:43,040
card

362
00:10:41,440 --> 00:10:44,640
comparable to the real sd card we have

363
00:10:43,040 --> 00:10:47,599
in our other fpga designs

364
00:10:44,640 --> 00:10:50,720
and you can really quickly dma onto that

365
00:10:47,600 --> 00:10:53,279
to start with your os

366
00:10:50,720 --> 00:10:54,320
so in terms of booting the os um the

367
00:10:53,279 --> 00:10:55,760
first step of this

368
00:10:54,320 --> 00:10:57,200
is that we have what we call a zero

369
00:10:55,760 --> 00:10:58,399
stage bit loader and this is really

370
00:10:57,200 --> 00:10:59,760
straightforward

371
00:10:58,399 --> 00:11:01,279
it's executing from the boot rom so it

372
00:10:59,760 --> 00:11:02,640
was compiled in when you built your

373
00:11:01,279 --> 00:11:04,240
design or when we built the design that

374
00:11:02,640 --> 00:11:06,000
you use on f1

375
00:11:04,240 --> 00:11:08,240
and the thing it does here is kind of

376
00:11:06,000 --> 00:11:08,800
parse the gpt partition table in the sd

377
00:11:08,240 --> 00:11:10,320
card

378
00:11:08,800 --> 00:11:13,040
grab that first partition and dump that

379
00:11:10,320 --> 00:11:14,560
into memory and so then that can contain

380
00:11:13,040 --> 00:11:16,240
whichever bit order you want to run or

381
00:11:14,560 --> 00:11:18,239
which other whichever other

382
00:11:16,240 --> 00:11:19,519
kind of uh operating system or low-level

383
00:11:18,240 --> 00:11:21,680
firmware you want to run

384
00:11:19,519 --> 00:11:23,519
and so uh in our case we're using bbl at

385
00:11:21,680 --> 00:11:25,279
the moment and that

386
00:11:23,519 --> 00:11:28,079
that does some standard things like set

387
00:11:25,279 --> 00:11:29,600
the trap table start smp

388
00:11:28,079 --> 00:11:31,439
and get things ready for linux so

389
00:11:29,600 --> 00:11:35,760
parsing device tree and so on

390
00:11:31,440 --> 00:11:38,640
um then in our case we're producing

391
00:11:35,760 --> 00:11:39,439
bbl blobs that have linux and build root

392
00:11:38,640 --> 00:11:40,959
environment

393
00:11:39,440 --> 00:11:43,120
built in and so that starts between

394
00:11:40,959 --> 00:11:44,479
linux um it

395
00:11:43,120 --> 00:11:46,320
does all the driver loading from the

396
00:11:44,480 --> 00:11:46,720
device tree that's there and specified

397
00:11:46,320 --> 00:11:48,320
so

398
00:11:46,720 --> 00:11:50,000
if you add a new peripheral you add that

399
00:11:48,320 --> 00:11:51,360
to the device tree then linux will be

400
00:11:50,000 --> 00:11:53,360
able to pull that automatically

401
00:11:51,360 --> 00:11:55,040
if you go between boards linux will know

402
00:11:53,360 --> 00:11:56,399
whether or not to load the driver for a

403
00:11:55,040 --> 00:11:57,599
particular device depending on whether

404
00:11:56,399 --> 00:11:59,680
it's there

405
00:11:57,600 --> 00:12:01,120
and then we finally get into our busy

406
00:11:59,680 --> 00:12:03,120
box environment

407
00:12:01,120 --> 00:12:04,880
and so to get running um you can do the

408
00:12:03,120 --> 00:12:06,800
whole thing with basically four commands

409
00:12:04,880 --> 00:12:08,480
so you can load the image this is the

410
00:12:06,800 --> 00:12:11,599
gfi that we have available

411
00:12:08,480 --> 00:12:12,480
um start up the uart and get your serial

412
00:12:11,600 --> 00:12:14,800
connection

413
00:12:12,480 --> 00:12:16,240
uh and then dma whatever your operating

414
00:12:14,800 --> 00:12:17,760
system blob is whatever you want to be

415
00:12:16,240 --> 00:12:19,839
on the on the virtual sd card

416
00:12:17,760 --> 00:12:21,600
um you can dma that on and then just

417
00:12:19,839 --> 00:12:23,120
reset the fpga and it'll be going

418
00:12:21,600 --> 00:12:25,839
so i'll show you a quick video here to

419
00:12:23,120 --> 00:12:29,440
give you an idea of what that looks like

420
00:12:25,839 --> 00:12:30,720
um and thanks to my groupmate gregory

421
00:12:29,440 --> 00:12:32,399
for doing this so you can see here first

422
00:12:30,720 --> 00:12:35,200
we load the image onto the fpga

423
00:12:32,399 --> 00:12:37,040
only takes an instant uh we dma the

424
00:12:35,200 --> 00:12:40,160
operating system here i'll note that

425
00:12:37,040 --> 00:12:40,639
that oh just yeah okay oh no the dma

426
00:12:40,160 --> 00:12:42,480
only took

427
00:12:40,639 --> 00:12:44,240
like two seconds to copy two gigabytes

428
00:12:42,480 --> 00:12:45,040
it's really great i was just restarted

429
00:12:44,240 --> 00:12:48,959
for some reason

430
00:12:45,040 --> 00:12:51,199
um and then you will open up your uart

431
00:12:48,959 --> 00:12:52,479
and then reset the fpga we just have a

432
00:12:51,200 --> 00:12:54,560
simple reset command that

433
00:12:52,480 --> 00:12:55,680
flicks the virtual uh sorry clicks the

434
00:12:54,560 --> 00:12:57,518
virtual button

435
00:12:55,680 --> 00:12:58,638
um and then we can open up our serial

436
00:12:57,519 --> 00:13:00,399
terminal and by the time that we

437
00:12:58,639 --> 00:13:02,160
actually get the serial terminal opened

438
00:13:00,399 --> 00:13:04,480
you'll see in a second we've already run

439
00:13:02,160 --> 00:13:06,800
through the bootloaders and linux is

440
00:13:04,480 --> 00:13:08,160
starting to boot um and then we'll skip

441
00:13:06,800 --> 00:13:10,560
through the linux boot here

442
00:13:08,160 --> 00:13:12,399
um toward the end you can see standard

443
00:13:10,560 --> 00:13:14,000
linux boot standard driver bring up we

444
00:13:12,399 --> 00:13:15,200
have a specific driver for rsd or

445
00:13:14,000 --> 00:13:18,480
virtual sd

446
00:13:15,200 --> 00:13:21,760
and all this is really

447
00:13:18,480 --> 00:13:23,760
broadly unmodified and once you log in

448
00:13:21,760 --> 00:13:25,680
you can run you know cat proc cpu info

449
00:13:23,760 --> 00:13:26,480
and you can see that with the agfi that

450
00:13:25,680 --> 00:13:29,599
we uploaded

451
00:13:26,480 --> 00:13:30,480
you get nine uh linux capable ariane

452
00:13:29,600 --> 00:13:31,680
cores

453
00:13:30,480 --> 00:13:34,160
and so from there you can put other

454
00:13:31,680 --> 00:13:36,800
things in your builder environment

455
00:13:34,160 --> 00:13:37,839
so the sdk that we use um you can check

456
00:13:36,800 --> 00:13:39,040
out that repo and use it really

457
00:13:37,839 --> 00:13:40,880
straightforwardly you just

458
00:13:39,040 --> 00:13:42,319
either provide your own cross compiler

459
00:13:40,880 --> 00:13:43,199
or it will build a cross compiler for

460
00:13:42,320 --> 00:13:44,880
you

461
00:13:43,199 --> 00:13:46,959
and then just run make call and it will

462
00:13:44,880 --> 00:13:48,720
generate everything you need

463
00:13:46,959 --> 00:13:50,880
and so the components of that are

464
00:13:48,720 --> 00:13:52,880
there's the cross compiler tool chain

465
00:13:50,880 --> 00:13:53,920
um we have the modified version of bbl

466
00:13:52,880 --> 00:13:56,160
that we use

467
00:13:53,920 --> 00:13:57,439
uh we have a builder environment and

468
00:13:56,160 --> 00:13:59,279
builder is really great it's been used a

469
00:13:57,440 --> 00:14:02,000
lot in the cloud especially to provide

470
00:13:59,279 --> 00:14:03,920
small linux images and our friends at

471
00:14:02,000 --> 00:14:05,680
lowrisk have actually got the point of

472
00:14:03,920 --> 00:14:07,680
having a full graphical environment

473
00:14:05,680 --> 00:14:09,279
running on ariane using build root

474
00:14:07,680 --> 00:14:11,760
um so you can have kind of mouse

475
00:14:09,279 --> 00:14:14,000
keyboard vga

476
00:14:11,760 --> 00:14:14,800
and it's all through buildru even before

477
00:14:14,000 --> 00:14:17,760
you have to go to

478
00:14:14,800 --> 00:14:18,639
go to the point of having a distro um we

479
00:14:17,760 --> 00:14:21,360
also provide

480
00:14:18,639 --> 00:14:22,880
a rfs overlay so if you want to just

481
00:14:21,360 --> 00:14:24,160
bring along a binary that you built to

482
00:14:22,880 --> 00:14:25,360
run your application so

483
00:14:24,160 --> 00:14:27,519
you want to test scalability something

484
00:14:25,360 --> 00:14:28,160
like that um you're not running a full

485
00:14:27,519 --> 00:14:30,320
distro

486
00:14:28,160 --> 00:14:31,279
you can just copy this into root fs and

487
00:14:30,320 --> 00:14:32,880
it will show up

488
00:14:31,279 --> 00:14:35,279
inside that file system that you were

489
00:14:32,880 --> 00:14:38,240
running on on the f1 fpga

490
00:14:35,279 --> 00:14:39,519
and so that's extremely useful too in

491
00:14:38,240 --> 00:14:41,199
terms of customization

492
00:14:39,519 --> 00:14:42,800
if you have new drivers you want to add

493
00:14:41,199 --> 00:14:44,079
if you want to change the config maybe

494
00:14:42,800 --> 00:14:45,040
you want to you know change the schedule

495
00:14:44,079 --> 00:14:45,839
or you want to add more debug

496
00:14:45,040 --> 00:14:47,199
information

497
00:14:45,839 --> 00:14:49,600
and you can do all that through build

498
00:14:47,199 --> 00:14:52,079
root in a really straightforward way

499
00:14:49,600 --> 00:14:52,720
um and then you can kind of save that in

500
00:14:52,079 --> 00:14:54,399
and have your

501
00:14:52,720 --> 00:14:56,720
your own configuration you can even

502
00:14:54,399 --> 00:14:58,880
replace um through the configs

503
00:14:56,720 --> 00:15:00,000
down here you can replace uh which linux

504
00:14:58,880 --> 00:15:01,199
kernel you're grabbing whether you want

505
00:15:00,000 --> 00:15:02,160
to grab an upstream one instead of the

506
00:15:01,199 --> 00:15:04,240
one that we have or you want to make

507
00:15:02,160 --> 00:15:05,839
your own patches and so on

508
00:15:04,240 --> 00:15:07,920
and then on the right in terms of build

509
00:15:05,839 --> 00:15:10,399
root and busy box there's a really large

510
00:15:07,920 --> 00:15:11,760
number of packages um that are available

511
00:15:10,399 --> 00:15:13,199
as i mentioned you can have like a

512
00:15:11,760 --> 00:15:14,000
basically a full gui environment but

513
00:15:13,199 --> 00:15:14,959
there's all sorts of things like

514
00:15:14,000 --> 00:15:16,480
databases and

515
00:15:14,959 --> 00:15:18,079
stuff like that out there and that you

516
00:15:16,480 --> 00:15:20,079
can put in build root

517
00:15:18,079 --> 00:15:21,279
and so you can choose whatever

518
00:15:20,079 --> 00:15:23,040
applications you want

519
00:15:21,279 --> 00:15:25,760
test that those work on risk five uh

520
00:15:23,040 --> 00:15:27,279
using openp1 plus

521
00:15:25,760 --> 00:15:28,959
and this is like a really convenient

522
00:15:27,279 --> 00:15:30,480
environment um

523
00:15:28,959 --> 00:15:32,239
now i'll talk a little bit about the

524
00:15:30,480 --> 00:15:35,199
things that we're still looking to do so

525
00:15:32,240 --> 00:15:36,079
um we are looking for assistance in

526
00:15:35,199 --> 00:15:38,719
making this a more

527
00:15:36,079 --> 00:15:41,199
usable and better platform we're in the

528
00:15:38,720 --> 00:15:43,519
process of moving from bbl to open sbi

529
00:15:41,199 --> 00:15:45,120
uh for firmware um i've got that to the

530
00:15:43,519 --> 00:15:46,480
point of like entering an infinite loop

531
00:15:45,120 --> 00:15:49,519
somewhere that i need to debug

532
00:15:46,480 --> 00:15:52,079
uh but we're we're in the process um

533
00:15:49,519 --> 00:15:53,279
and so uh opensbi is kind of becoming

534
00:15:52,079 --> 00:15:55,359
the standard there

535
00:15:53,279 --> 00:15:56,720
we're interested in other boot loaders

536
00:15:55,360 --> 00:15:57,920
um for real bit loading

537
00:15:56,720 --> 00:15:59,600
um as i mentioned we have this

538
00:15:57,920 --> 00:16:00,560
environment where you've got the first

539
00:15:59,600 --> 00:16:03,519
partition on the

540
00:16:00,560 --> 00:16:04,160
card and it kind of copies stuff over

541
00:16:03,519 --> 00:16:07,199
into

542
00:16:04,160 --> 00:16:08,480
dram to get running we would like to

543
00:16:07,199 --> 00:16:10,399
actually use a real bootloader and have

544
00:16:08,480 --> 00:16:12,320
real drivers in the order to pull things

545
00:16:10,399 --> 00:16:16,240
off the sd card in a more elegant way

546
00:16:12,320 --> 00:16:18,000
um we are in the process of doing distro

547
00:16:16,240 --> 00:16:18,720
bring up so we have a debian chart

548
00:16:18,000 --> 00:16:20,480
environment

549
00:16:18,720 --> 00:16:22,000
um in f1 so you can just kind of go in

550
00:16:20,480 --> 00:16:23,519
and see it through into debian

551
00:16:22,000 --> 00:16:24,720
and then you can run kind of whichever

552
00:16:23,519 --> 00:16:25,120
applications you want to run that will

553
00:16:24,720 --> 00:16:27,680
work

554
00:16:25,120 --> 00:16:29,040
without systemd boot um and so we've

555
00:16:27,680 --> 00:16:30,319
tested all sorts of applications there

556
00:16:29,040 --> 00:16:31,360
we can natively compile we can do all

557
00:16:30,320 --> 00:16:32,959
sorts of other stuff

558
00:16:31,360 --> 00:16:34,079
um but the bed that we're missing is

559
00:16:32,959 --> 00:16:35,199
getting the whole way through regular

560
00:16:34,079 --> 00:16:38,479
system v boot

561
00:16:35,199 --> 00:16:39,758
um and you know uh then

562
00:16:38,480 --> 00:16:41,680
you can actually have the fuel derby

563
00:16:39,759 --> 00:16:43,279
environment um we're also interested in

564
00:16:41,680 --> 00:16:44,880
other distros uh we know that people got

565
00:16:43,279 --> 00:16:46,240
fedora and other things running so

566
00:16:44,880 --> 00:16:47,839
um if you work in another distro we

567
00:16:46,240 --> 00:16:48,639
would love to see that uh running on the

568
00:16:47,839 --> 00:16:50,399
platform and

569
00:16:48,639 --> 00:16:53,199
you know you can go on and run these

570
00:16:50,399 --> 00:16:55,199
fpgas and give that try yourselves

571
00:16:53,199 --> 00:16:56,639
um and then the other thing is testing

572
00:16:55,199 --> 00:16:57,120
parallel software scalability you know

573
00:16:56,639 --> 00:16:58,720
you've got

574
00:16:57,120 --> 00:16:59,920
a bunch of cores available here you can

575
00:16:58,720 --> 00:17:01,440
go on and see and start to make

576
00:16:59,920 --> 00:17:01,839
optimizations and understand you know if

577
00:17:01,440 --> 00:17:03,360
you have

578
00:17:01,839 --> 00:17:04,880
this kind of cache coherent many cores

579
00:17:03,360 --> 00:17:07,439
between linux um

580
00:17:04,880 --> 00:17:08,559
what uh optimizations can you make and

581
00:17:07,439 --> 00:17:10,079
so on

582
00:17:08,559 --> 00:17:11,039
and so we're interested from our

583
00:17:10,079 --> 00:17:12,079
perspective but we also know there's a

584
00:17:11,039 --> 00:17:13,520
lot of applications out there

585
00:17:12,079 --> 00:17:15,198
that you might have that you want to see

586
00:17:13,520 --> 00:17:18,400
running on risk five and understand kind

587
00:17:15,199 --> 00:17:20,319
of what the benefits of risk five are um

588
00:17:18,400 --> 00:17:22,000
and so with that i'm going to finish off

589
00:17:20,319 --> 00:17:22,240
we have a variety of sponsors ourselves

590
00:17:22,000 --> 00:17:25,199
and

591
00:17:22,240 --> 00:17:26,319
and eth to thank but most recently we

592
00:17:25,199 --> 00:17:27,919
received

593
00:17:26,319 --> 00:17:30,320
some funding from amazon it turns out if

594
00:17:27,919 --> 00:17:31,600
you're doing research on

595
00:17:30,320 --> 00:17:33,360
these sorts of open source platforms

596
00:17:31,600 --> 00:17:36,639
amazon's very willing to help fund

597
00:17:33,360 --> 00:17:38,399
uh your exploration on f1 so

598
00:17:36,640 --> 00:17:40,400
um you can kind of put in requests and

599
00:17:38,400 --> 00:17:42,559
and get funds from them that way

600
00:17:40,400 --> 00:17:43,919
um and so i'd like to open up for any

601
00:17:42,559 --> 00:17:44,559
questions um you can check out our

602
00:17:43,919 --> 00:17:46,799
websites

603
00:17:44,559 --> 00:17:48,320
uh platform.org and openpton.org if you

604
00:17:46,799 --> 00:17:50,639
want to find more

605
00:17:48,320 --> 00:17:52,480
we have a google group we are on github

606
00:17:50,640 --> 00:18:00,190
we will accept issues and so on

607
00:17:52,480 --> 00:18:05,089
so you only have about 18 seconds

608
00:18:00,190 --> 00:18:05,089
[Applause]

609
00:18:07,679 --> 00:18:09,760
you

