1
00:00:09,200 --> 00:00:14,919
good morning everyone

2
00:00:11,120 --> 00:00:18,560
okay so now it's a real thing

3
00:00:14,920 --> 00:00:20,800
so first of all uh hi

4
00:00:18,560 --> 00:00:22,560
uh welcome to the python dev room at

5
00:00:20,800 --> 00:00:24,800
custom 2020.

6
00:00:22,560 --> 00:00:26,640
um let me introduce you peter who's

7
00:00:24,800 --> 00:00:30,400
gonna tell us more about

8
00:00:26,640 --> 00:00:35,200
the possibilities to interface pseudo

9
00:00:30,400 --> 00:00:35,199
with python hi

10
00:00:40,239 --> 00:00:49,199
thanks can you hear me okay

11
00:00:45,039 --> 00:00:50,800
no okay uh

12
00:00:49,200 --> 00:00:52,559
so first of all let me give you a quick

13
00:00:50,800 --> 00:00:55,839
overview what i will be uh talking

14
00:00:52,559 --> 00:00:58,480
about today uh i try to define sudo

15
00:00:55,840 --> 00:01:00,079
uh even if most of you know it most

16
00:00:58,480 --> 00:01:03,358
likely

17
00:01:00,079 --> 00:01:05,519
then i will talk about a bit about a few

18
00:01:03,359 --> 00:01:09,600
lesser known features of sudo

19
00:01:05,519 --> 00:01:12,400
and then i will change to our main topic

20
00:01:09,600 --> 00:01:15,600
extending sudo in python which

21
00:01:12,400 --> 00:01:19,040
is a brave new feature of

22
00:01:15,600 --> 00:01:20,798
sudo so what is sudo

23
00:01:19,040 --> 00:01:22,240
for many years i didn't know much about

24
00:01:20,799 --> 00:01:24,960
sudo just like

25
00:01:22,240 --> 00:01:27,839
i i knew just for everyone else that i

26
00:01:24,960 --> 00:01:31,039
can use it for administrative problem

27
00:01:27,840 --> 00:01:33,920
comments then

28
00:01:31,040 --> 00:01:37,360
last year i learned that todd miller

29
00:01:33,920 --> 00:01:38,960
maintainer of sudo is my colleague

30
00:01:37,360 --> 00:01:41,520
we became a colleague through an

31
00:01:38,960 --> 00:01:43,759
exposition and then i became interested

32
00:01:41,520 --> 00:01:45,759
in suru what it is what it does and that

33
00:01:43,759 --> 00:01:47,040
i learned quite a lot about it and then

34
00:01:45,759 --> 00:01:50,479
i started to ask

35
00:01:47,040 --> 00:01:52,840
uh people uh what a different events

36
00:01:50,479 --> 00:01:56,240
what they know about

37
00:01:52,840 --> 00:01:59,920
sudo uh and it turned out that

38
00:01:56,240 --> 00:02:02,399
uh many people see see this uh

39
00:01:59,920 --> 00:02:02,960
little tool as a way to complicate life

40
00:02:02,399 --> 00:02:04,960
as

41
00:02:02,960 --> 00:02:06,479
if that is a root user then why are you

42
00:02:04,960 --> 00:02:11,038
something different or

43
00:02:06,479 --> 00:02:13,040
why not use the su command or whatever

44
00:02:11,038 --> 00:02:14,559
but even seasoned administrators told me

45
00:02:13,040 --> 00:02:16,400
that well it's a prefix for

46
00:02:14,560 --> 00:02:19,760
administrative commands

47
00:02:16,400 --> 00:02:23,200
which is technically correct but

48
00:02:19,760 --> 00:02:26,000
it's a lot more

49
00:02:23,200 --> 00:02:26,799
according to the pseudo website suru

50
00:02:26,000 --> 00:02:29,280
allows the system

51
00:02:26,800 --> 00:02:31,760
administrator to delegate authority by

52
00:02:29,280 --> 00:02:34,400
giving certain users the ability to run

53
00:02:31,760 --> 00:02:36,640
some comments as rule for another user

54
00:02:34,400 --> 00:02:39,440
by providing an audit trail of

55
00:02:36,640 --> 00:02:40,480
the comments and their arguments so as

56
00:02:39,440 --> 00:02:42,319
you can see

57
00:02:40,480 --> 00:02:44,879
even from this description it's a lot

58
00:02:42,319 --> 00:02:47,119
more but we will learn quickly that

59
00:02:44,879 --> 00:02:48,560
uh yes there are a lot more

60
00:02:47,120 --> 00:02:51,840
possibilities

61
00:02:48,560 --> 00:02:54,959
well with the help of suru

62
00:02:51,840 --> 00:02:56,640
you can even make some sandwiches at

63
00:02:54,959 --> 00:03:00,959
least according to

64
00:02:56,640 --> 00:03:00,958
xkcd so

65
00:03:01,200 --> 00:03:04,958
let's jump into some lesser known

66
00:03:04,080 --> 00:03:08,159
features

67
00:03:04,959 --> 00:03:10,400
for example you can store the digest of

68
00:03:08,159 --> 00:03:13,760
applications in the sewers file

69
00:03:10,400 --> 00:03:15,280
and this way you can prevent modified

70
00:03:13,760 --> 00:03:18,720
binaries from

71
00:03:15,280 --> 00:03:19,840
running while this database is quite

72
00:03:18,720 --> 00:03:22,000
difficult to maintain

73
00:03:19,840 --> 00:03:25,840
on the other hand it can give you an

74
00:03:22,000 --> 00:03:25,840
additional layer of protection

75
00:03:26,000 --> 00:03:31,519
another possibility is session recording

76
00:03:30,000 --> 00:03:33,519
you can record everything what is

77
00:03:31,519 --> 00:03:36,640
happening on a

78
00:03:33,519 --> 00:03:38,000
terminal and play back like video so

79
00:03:36,640 --> 00:03:40,399
even if

80
00:03:38,000 --> 00:03:42,400
you need to get give shell access to

81
00:03:40,400 --> 00:03:45,599
your users you can follow

82
00:03:42,400 --> 00:03:46,000
what they are doing recordings are

83
00:03:45,599 --> 00:03:48,560
difficult

84
00:03:46,000 --> 00:03:49,440
to modify as they are not clear text on

85
00:03:48,560 --> 00:03:52,480
the other hand

86
00:03:49,440 --> 00:03:53,120
as they are saved locally it's quite

87
00:03:52,480 --> 00:03:57,200
easy to

88
00:03:53,120 --> 00:03:59,920
uh delay it but stay tuned

89
00:03:57,200 --> 00:04:01,280
uh here i was supposed to give a quick

90
00:03:59,920 --> 00:04:03,200
demo

91
00:04:01,280 --> 00:04:05,280
but as i'm not presenting from my own

92
00:04:03,200 --> 00:04:08,079
laptop due to technical differences

93
00:04:05,280 --> 00:04:08,959
the difficulties i have to skip it but

94
00:04:08,080 --> 00:04:12,000
practically

95
00:04:08,959 --> 00:04:15,519
i wanted to show that i'm typing a few

96
00:04:12,000 --> 00:04:17,120
comments in a sudo session and

97
00:04:15,519 --> 00:04:18,560
then i can play it back and view

98
00:04:17,120 --> 00:04:21,440
everything as

99
00:04:18,560 --> 00:04:21,440
as it was happening

100
00:04:22,079 --> 00:04:28,479
version 1.8 of sudo intro

101
00:04:25,440 --> 00:04:29,440
introduced a plugin-based architecture

102
00:04:28,479 --> 00:04:31,919
which means that

103
00:04:29,440 --> 00:04:33,520
even basic features of sudo are now

104
00:04:31,919 --> 00:04:37,680
implemented as plugins

105
00:04:33,520 --> 00:04:41,359
and you can replace or extend

106
00:04:37,680 --> 00:04:42,000
functionality of sudo using plugins

107
00:04:41,360 --> 00:04:43,680
there are both

108
00:04:42,000 --> 00:04:46,240
open source and commercial plugins

109
00:04:43,680 --> 00:04:46,240
available

110
00:04:46,960 --> 00:04:51,280
and important but often overlooked

111
00:04:49,919 --> 00:04:54,400
feature of

112
00:04:51,280 --> 00:04:57,359
suru is logging and alerting

113
00:04:54,400 --> 00:04:58,080
sudo itself supports only email-based

114
00:04:57,360 --> 00:05:01,919
alerts so

115
00:04:58,080 --> 00:05:04,560
you can uh configure uh

116
00:05:01,919 --> 00:05:06,080
on whatever uh you want to receive an

117
00:05:04,560 --> 00:05:09,199
email area

118
00:05:06,080 --> 00:05:13,840
all events uh

119
00:05:09,199 --> 00:05:13,840
are also recorded to syslog

120
00:05:14,000 --> 00:05:17,440
make sure that your log messages are

121
00:05:16,160 --> 00:05:20,960
centralized otherwise

122
00:05:17,440 --> 00:05:23,759
uh your locks are easy to delete it if

123
00:05:20,960 --> 00:05:24,320
your users have too much brights like

124
00:05:23,759 --> 00:05:29,360
they can

125
00:05:24,320 --> 00:05:29,360
open a shell if you use sister genji

126
00:05:29,520 --> 00:05:35,359
then cdlocks are automatically parsed

127
00:05:32,080 --> 00:05:38,960
and you can easily send alerts to

128
00:05:35,360 --> 00:05:40,560
slack splunk any of the cloud services

129
00:05:38,960 --> 00:05:42,719
wherever you want

130
00:05:40,560 --> 00:05:44,720
if you are lucky you never have to use

131
00:05:42,720 --> 00:05:48,160
sudo debug logs

132
00:05:44,720 --> 00:05:50,800
these can be used to

133
00:05:48,160 --> 00:05:53,840
debug the rules pseudo rules or to

134
00:05:50,800 --> 00:05:53,840
report problems

135
00:05:54,000 --> 00:06:02,800
here you can see a screenshot from slack

136
00:05:58,000 --> 00:06:07,840
with only comments executed by me

137
00:06:02,800 --> 00:06:07,840
listed here so uh

138
00:06:08,240 --> 00:06:11,680
until now we talked about sudo 1.8

139
00:06:10,479 --> 00:06:15,039
features but

140
00:06:11,680 --> 00:06:17,280
uh sudo 1.9 is

141
00:06:15,039 --> 00:06:18,080
right around the corner a beta release

142
00:06:17,280 --> 00:06:21,198
is already

143
00:06:18,080 --> 00:06:26,000
on the sudo website and it brings

144
00:06:21,199 --> 00:06:29,120
many new features to us first of all

145
00:06:26,000 --> 00:06:31,840
there will be a recording service so

146
00:06:29,120 --> 00:06:33,039
you can collect session recording

147
00:06:31,840 --> 00:06:35,679
centrally

148
00:06:33,039 --> 00:06:37,440
an audit plugin is coming approval

149
00:06:35,680 --> 00:06:40,319
framework

150
00:06:37,440 --> 00:06:40,319
plugin and

151
00:06:40,560 --> 00:06:50,160
our and the main feature is

152
00:06:44,720 --> 00:06:53,440
support for python based plugins

153
00:06:50,160 --> 00:06:55,440
that's alone is worth for a completely

154
00:06:53,440 --> 00:06:58,000
new version

155
00:06:55,440 --> 00:07:00,000
so what is the recording service uh you

156
00:06:58,000 --> 00:07:03,360
can collect session recordings

157
00:07:00,000 --> 00:07:07,199
uh send a cemetery and

158
00:07:03,360 --> 00:07:07,199
that way uh us

159
00:07:08,000 --> 00:07:15,440
as you run a pseudo session

160
00:07:11,599 --> 00:07:16,960
your session is streamed in real time to

161
00:07:15,440 --> 00:07:20,290
another location

162
00:07:16,960 --> 00:07:22,799
and on an encrypted channel

163
00:07:20,290 --> 00:07:24,880
[Music]

164
00:07:22,800 --> 00:07:26,319
central session collection is not just

165
00:07:24,880 --> 00:07:28,639
convenient but also

166
00:07:26,319 --> 00:07:29,520
means availability even if the sending

167
00:07:28,639 --> 00:07:33,039
machine is down

168
00:07:29,520 --> 00:07:36,080
you can reach your sessions and

169
00:07:33,039 --> 00:07:39,360
it's also security as no one can tamper

170
00:07:36,080 --> 00:07:39,359
them on the local machines

171
00:07:41,199 --> 00:07:46,240
the audit plugin is doesn't introduce

172
00:07:44,800 --> 00:07:50,400
anything user visible

173
00:07:46,240 --> 00:07:53,599
on the other hand it gives api access to

174
00:07:50,400 --> 00:07:54,638
any kind of pseudo-locks which is

175
00:07:53,599 --> 00:07:59,120
especially

176
00:07:54,639 --> 00:08:02,879
useful from when the python

177
00:07:59,120 --> 00:08:05,680
api will be available for it as uh

178
00:08:02,879 --> 00:08:07,360
using the audit plugin you will be able

179
00:08:05,680 --> 00:08:10,879
to

180
00:08:07,360 --> 00:08:13,440
send logs and alerts from sudo directly

181
00:08:10,879 --> 00:08:14,879
without using thought that third-party

182
00:08:13,440 --> 00:08:20,479
applications

183
00:08:14,879 --> 00:08:20,479
like cisco genji as i mentioned earlier

184
00:08:21,360 --> 00:08:28,720
the approval framework makes possible

185
00:08:25,360 --> 00:08:30,960
to approve sessions so

186
00:08:28,720 --> 00:08:30,960
if

187
00:08:32,320 --> 00:08:37,360
so it's not just checking permissions in

188
00:08:35,679 --> 00:08:40,000
the suitor's file

189
00:08:37,360 --> 00:08:41,519
but also another user needs to approve

190
00:08:40,000 --> 00:08:42,958
what you are doing

191
00:08:41,519 --> 00:08:45,760
in a session right now it's possible

192
00:08:42,958 --> 00:08:49,839
only through third-party plugins

193
00:08:45,760 --> 00:08:53,279
and as they are developed in rust

194
00:08:49,839 --> 00:08:53,279
it's not so easy to

195
00:08:53,440 --> 00:08:59,760
package or uh distribute

196
00:08:56,640 --> 00:09:01,760
uh once uh the approval plugin framework

197
00:08:59,760 --> 00:09:04,240
is ready it's still under development

198
00:09:01,760 --> 00:09:05,839
you will be able to uh use it from

199
00:09:04,240 --> 00:09:08,640
python as well

200
00:09:05,839 --> 00:09:09,440
and uh for example this way you can

201
00:09:08,640 --> 00:09:12,880
connect

202
00:09:09,440 --> 00:09:18,160
sudo to ticketing systems and check

203
00:09:12,880 --> 00:09:18,160
if a given sysadmin is on duty and

204
00:09:19,760 --> 00:09:25,920
or there is an open ticket

205
00:09:22,800 --> 00:09:30,319
and uh only allow

206
00:09:25,920 --> 00:09:33,439
the session when uh it's there

207
00:09:30,320 --> 00:09:36,399
and uh python support is

208
00:09:33,440 --> 00:09:39,519
coming as i mentioned which means that

209
00:09:36,399 --> 00:09:39,519
you can easily extend

210
00:09:39,600 --> 00:09:45,279
pseudo using python it's using the same

211
00:09:42,720 --> 00:09:47,519
api as the sea based plugins

212
00:09:45,279 --> 00:09:51,600
on the other hand you don't need any

213
00:09:47,519 --> 00:09:55,519
specialized development environment

214
00:09:51,600 --> 00:09:58,080
and instead of packaging you can simply

215
00:09:55,519 --> 00:09:58,080
distribute

216
00:09:58,880 --> 00:10:02,959
python code using your config management

217
00:10:01,360 --> 00:10:06,320
system

218
00:10:02,959 --> 00:10:07,040
the api is the same as the series plugin

219
00:10:06,320 --> 00:10:10,880
so

220
00:10:07,040 --> 00:10:14,399
there's a link here for the uh for

221
00:10:10,880 --> 00:10:16,480
that plugin documentation and uh

222
00:10:14,399 --> 00:10:19,519
the python plugin itself also has its

223
00:10:16,480 --> 00:10:22,480
own docks

224
00:10:19,519 --> 00:10:25,360
but those are mainly referring to python

225
00:10:22,480 --> 00:10:25,360
specific parts

226
00:10:27,040 --> 00:10:30,719
the first plugin i want to mention is

227
00:10:30,079 --> 00:10:34,079
the

228
00:10:30,720 --> 00:10:37,600
policy plugin api the policy

229
00:10:34,079 --> 00:10:41,359
plugin within sudo decides uh

230
00:10:37,600 --> 00:10:42,640
who can do what normally it's in the

231
00:10:41,360 --> 00:10:46,480
studios file but

232
00:10:42,640 --> 00:10:49,920
if you do use a plugin like

233
00:10:46,480 --> 00:10:53,360
in one done in python then

234
00:10:49,920 --> 00:10:56,560
you replace it completely so

235
00:10:53,360 --> 00:11:00,000
you need to enable the

236
00:10:56,560 --> 00:11:04,719
policy plugins in sudo.com

237
00:11:00,000 --> 00:11:07,600
i have a python example which

238
00:11:04,720 --> 00:11:10,240
allows you to run the command id and

239
00:11:07,600 --> 00:11:13,120
nothing else

240
00:11:10,240 --> 00:11:13,120
here is the code

241
00:11:13,760 --> 00:11:18,240
as you can see it start uh by importing

242
00:11:17,519 --> 00:11:21,279
the

243
00:11:18,240 --> 00:11:23,680
pseudo module uh

244
00:11:21,279 --> 00:11:24,880
the pseudo module itself is not

245
00:11:23,680 --> 00:11:28,000
something you can find

246
00:11:24,880 --> 00:11:31,200
uh on your disk but

247
00:11:28,000 --> 00:11:35,839
it's provided by the

248
00:11:31,200 --> 00:11:35,839
python the pseudo python plugin

249
00:11:36,240 --> 00:11:43,760
and you need to define a class

250
00:11:39,760 --> 00:11:47,040
for your python code

251
00:11:43,760 --> 00:11:50,560
you can name it whatever you want but

252
00:11:47,040 --> 00:11:53,680
you need to base it on the sudo python

253
00:11:50,560 --> 00:11:57,359
class in case of the

254
00:11:53,680 --> 00:12:01,199
policy api you need to have

255
00:11:57,360 --> 00:12:05,040
a method called check policy

256
00:12:01,200 --> 00:12:08,839
which receives a few arguments from

257
00:12:05,040 --> 00:12:11,199
sudo artway

258
00:12:08,839 --> 00:12:11,200
contains uh

259
00:12:11,519 --> 00:12:18,720
data related to the commands what

260
00:12:15,519 --> 00:12:21,839
the user wants to execute and ends at

261
00:12:18,720 --> 00:12:21,839
the environment

262
00:12:22,959 --> 00:12:27,279
provided by the user the first argument

263
00:12:26,399 --> 00:12:31,600
within

264
00:12:27,279 --> 00:12:35,040
rp is the command name we check this one

265
00:12:31,600 --> 00:12:37,360
and if if it's different from id

266
00:12:35,040 --> 00:12:38,959
then we print an error message on screen

267
00:12:37,360 --> 00:12:39,680
that you are not allowed to run this

268
00:12:38,959 --> 00:12:42,880
comment

269
00:12:39,680 --> 00:12:46,079
and the pseudo session is rejected

270
00:12:42,880 --> 00:12:49,439
if it's not the case then we go on

271
00:12:46,079 --> 00:12:52,719
and create a variable containing the

272
00:12:49,440 --> 00:12:56,000
minimum information necessary to

273
00:12:52,720 --> 00:12:58,880
execute a command it's the command name

274
00:12:56,000 --> 00:13:00,720
user id and group id and finally we

275
00:12:58,880 --> 00:13:04,079
return it to sudo that

276
00:13:00,720 --> 00:13:07,440
we accept this command and

277
00:13:04,079 --> 00:13:12,560
the data to execute

278
00:13:07,440 --> 00:13:14,560
this application so this is how it looks

279
00:13:12,560 --> 00:13:15,760
on screen and i'm happy that i

280
00:13:14,560 --> 00:13:19,839
screenshotted everything

281
00:13:15,760 --> 00:13:24,160
and not just prepared to demo

282
00:13:19,839 --> 00:13:24,160
it live as now i can show you

283
00:13:25,360 --> 00:13:30,480
first i try to run the ls command but

284
00:13:28,959 --> 00:13:34,160
it's rejected

285
00:13:30,480 --> 00:13:37,440
and when i run id then it

286
00:13:34,160 --> 00:13:40,000
runs with root privileges just as it

287
00:13:37,440 --> 00:13:40,000
accepted

288
00:13:41,279 --> 00:13:47,439
the next api is io locks

289
00:13:44,480 --> 00:13:49,279
this is related to session recording as

290
00:13:47,440 --> 00:13:52,399
it means that you you get

291
00:13:49,279 --> 00:13:57,199
access to all input and output

292
00:13:52,399 --> 00:13:57,199
of your sudo command

293
00:13:58,000 --> 00:14:02,639
at the moment only one python

294
00:13:59,440 --> 00:14:06,720
implementation of io locks is allowed

295
00:14:02,639 --> 00:14:09,600
but it will be changed

296
00:14:06,720 --> 00:14:11,199
soon there are quite a few possibilities

297
00:14:09,600 --> 00:14:14,880
what you can do

298
00:14:11,199 --> 00:14:18,479
using the ios api for example

299
00:14:14,880 --> 00:14:19,120
brake the session if a given text

300
00:14:18,480 --> 00:14:22,320
appears

301
00:14:19,120 --> 00:14:23,680
on screen or when someone types rm minus

302
00:14:22,320 --> 00:14:26,880
eff

303
00:14:23,680 --> 00:14:28,959
uh on the command line or you can even

304
00:14:26,880 --> 00:14:32,000
use it to

305
00:14:28,959 --> 00:14:35,040
ask for a reason why someone is

306
00:14:32,000 --> 00:14:35,040
starting a session

307
00:14:35,839 --> 00:14:42,800
the first example here is checking

308
00:14:39,360 --> 00:14:46,480
the output on the screen we import

309
00:14:42,800 --> 00:14:51,760
the pseudo module create a class

310
00:14:46,480 --> 00:14:51,760
and the lock tty out

311
00:14:52,560 --> 00:14:59,760
method receives each anytime

312
00:14:56,000 --> 00:15:02,240
a new text appears on screen it receives

313
00:14:59,760 --> 00:15:03,600
in in a buffer and you can check the

314
00:15:02,240 --> 00:15:07,120
content of this

315
00:15:03,600 --> 00:15:12,079
buffer from python and in my case

316
00:15:07,120 --> 00:15:14,880
if my secret appears on screen then

317
00:15:12,079 --> 00:15:15,680
we print that don't look at my secret

318
00:15:14,880 --> 00:15:20,399
and

319
00:15:15,680 --> 00:15:20,399
reject the session

320
00:15:23,040 --> 00:15:30,880
you can see here how it works we

321
00:15:27,360 --> 00:15:32,160
start a session uh we change to the root

322
00:15:30,880 --> 00:15:35,120
directory

323
00:15:32,160 --> 00:15:36,880
list it we find a nice looking

324
00:15:35,120 --> 00:15:38,240
interesting looking directory called do

325
00:15:36,880 --> 00:15:41,439
not enter

326
00:15:38,240 --> 00:15:41,920
but still we enter it but when we list

327
00:15:41,440 --> 00:15:44,240
it

328
00:15:41,920 --> 00:15:45,839
it has a file called my secret but it's

329
00:15:44,240 --> 00:15:48,959
not printed on screen

330
00:15:45,839 --> 00:15:49,519
as uh before it it would be printed we

331
00:15:48,959 --> 00:15:52,880
check it

332
00:15:49,519 --> 00:15:53,440
uh from our python code uh see that it's

333
00:15:52,880 --> 00:15:57,120
there

334
00:15:53,440 --> 00:15:57,120
and break the session

335
00:15:58,650 --> 00:16:04,000
[Music]

336
00:16:01,279 --> 00:16:06,720
the next example is a bit more

337
00:16:04,000 --> 00:16:06,720
complicated

338
00:16:07,519 --> 00:16:14,560
when you type anything using

339
00:16:11,519 --> 00:16:18,639
sudo the

340
00:16:14,560 --> 00:16:22,560
typed characters printed on the screen

341
00:16:18,639 --> 00:16:25,920
one by one

342
00:16:22,560 --> 00:16:28,880
so uh we need to collect these uh

343
00:16:25,920 --> 00:16:29,360
in uh together and check the collected

344
00:16:28,880 --> 00:16:32,880
uh

345
00:16:29,360 --> 00:16:35,759
letters uh if uh what we are looking for

346
00:16:32,880 --> 00:16:36,959
is included uh in that in in this case

347
00:16:35,759 --> 00:16:40,399
we are checking if

348
00:16:36,959 --> 00:16:43,439
r minus f uh is uh

349
00:16:40,399 --> 00:16:46,959
included uh in this collected

350
00:16:43,440 --> 00:16:51,839
letters and if it is then we break the

351
00:16:46,959 --> 00:16:51,839
session before the command is executed

352
00:16:54,240 --> 00:17:02,320
this is how it looks like

353
00:16:58,160 --> 00:17:04,959
we start a studio session

354
00:17:02,320 --> 00:17:06,160
listed directory and then start entering

355
00:17:04,959 --> 00:17:09,600
i r minus f

356
00:17:06,160 --> 00:17:13,120
r but before we are reaching

357
00:17:09,599 --> 00:17:15,839
before r is printed uh

358
00:17:13,119 --> 00:17:17,119
uh the python code shown previously

359
00:17:15,839 --> 00:17:19,119
already

360
00:17:17,119 --> 00:17:20,159
finds that oops something that is

361
00:17:19,119 --> 00:17:23,280
happening

362
00:17:20,160 --> 00:17:26,799
and it it prints the warning message

363
00:17:23,280 --> 00:17:26,799
and stops the session

364
00:17:28,799 --> 00:17:35,120
here is the third example it's asking

365
00:17:32,000 --> 00:17:37,919
for a reason why

366
00:17:35,120 --> 00:17:39,918
the studio session is started actually

367
00:17:37,919 --> 00:17:42,160
for two reasons

368
00:17:39,919 --> 00:17:43,039
one is a public reason and there is a

369
00:17:42,160 --> 00:17:46,320
second the

370
00:17:43,039 --> 00:17:47,600
secret reason the difference is that for

371
00:17:46,320 --> 00:17:50,639
the first one

372
00:17:47,600 --> 00:17:53,439
uh the

373
00:17:50,640 --> 00:17:54,640
what the user is typing is shown on the

374
00:17:53,440 --> 00:17:58,080
screen

375
00:17:54,640 --> 00:17:59,760
for the second one uh only stars are

376
00:17:58,080 --> 00:18:01,199
shown on the screen like when you enter

377
00:17:59,760 --> 00:18:05,679
the password

378
00:18:01,200 --> 00:18:08,320
so when someone is behind you with a gun

379
00:18:05,679 --> 00:18:10,320
you you can type something nice in the

380
00:18:08,320 --> 00:18:13,120
public reason

381
00:18:10,320 --> 00:18:16,080
and write in the private reason that i'm

382
00:18:13,120 --> 00:18:16,080
threatened by a gun

383
00:18:16,160 --> 00:18:20,080
and obviously it's everything is saved

384
00:18:18,799 --> 00:18:22,799
into a file

385
00:18:20,080 --> 00:18:23,360
so later on you can show your boss that

386
00:18:22,799 --> 00:18:26,559
well

387
00:18:23,360 --> 00:18:31,120
even if it was not a nice nice thing to

388
00:18:26,559 --> 00:18:31,120
do but i was threatened to do it

389
00:18:32,390 --> 00:18:42,480
[Music]

390
00:18:35,039 --> 00:18:45,679
and here is how it looks on the screen

391
00:18:42,480 --> 00:18:46,960
first my public reason is stated there

392
00:18:45,679 --> 00:18:50,160
and enter there

393
00:18:46,960 --> 00:18:53,520
and you cannot see on the screen what i

394
00:18:50,160 --> 00:18:53,520
typed for secret reason

395
00:18:55,679 --> 00:19:00,640
the last api i want to talk about is the

396
00:18:58,559 --> 00:19:04,240
group api

397
00:19:00,640 --> 00:19:04,240
which allows you to

398
00:19:05,520 --> 00:19:11,200
do non-unix group group lookups for

399
00:19:10,000 --> 00:19:15,200
example

400
00:19:11,200 --> 00:19:19,039
for example if you can check here

401
00:19:15,200 --> 00:19:22,480
you can use here external databases or

402
00:19:19,039 --> 00:19:26,000
check if an admin is on duty

403
00:19:22,480 --> 00:19:28,160
in my sample course i used something a

404
00:19:26,000 --> 00:19:31,440
lot more simpler

405
00:19:28,160 --> 00:19:38,799
and it obviously could be done uh

406
00:19:31,440 --> 00:19:42,480
much more easier using the sudoers

407
00:19:38,799 --> 00:19:45,039
but that uh here i load uh

408
00:19:42,480 --> 00:19:46,640
and actually this one is uh loaded from

409
00:19:45,039 --> 00:19:50,000
the uh pseudoers file

410
00:19:46,640 --> 00:19:53,840
and not from sudo.com as you can have

411
00:19:50,000 --> 00:19:53,840
multiple of these

412
00:19:54,160 --> 00:20:02,320
here we load the python plugin

413
00:19:57,679 --> 00:20:06,000
with group by and the given class name

414
00:20:02,320 --> 00:20:08,230
and if the given user

415
00:20:06,000 --> 00:20:10,240
is in the uh

416
00:20:08,230 --> 00:20:13,600
[Music]

417
00:20:10,240 --> 00:20:17,760
group uh then one can use then

418
00:20:13,600 --> 00:20:21,600
he doesn't have to use a password but

419
00:20:17,760 --> 00:20:25,520
session is approved immediately

420
00:20:21,600 --> 00:20:28,959
here is the code if we import sudo

421
00:20:25,520 --> 00:20:31,679
create class

422
00:20:28,960 --> 00:20:32,720
it receives some data from sudo and we

423
00:20:31,679 --> 00:20:36,240
have

424
00:20:32,720 --> 00:20:36,640
some hard-coded groups here and my group

425
00:20:36,240 --> 00:20:40,880
here

426
00:20:36,640 --> 00:20:40,880
includes my username so

427
00:20:41,520 --> 00:20:45,760
here we check if the username is

428
00:20:43,600 --> 00:20:49,520
included in this group

429
00:20:45,760 --> 00:20:52,720
and send back

430
00:20:49,520 --> 00:20:54,879
accept this is how

431
00:20:52,720 --> 00:20:56,159
i used it in my demos so that's why i

432
00:20:54,880 --> 00:21:00,559
didn't have to

433
00:20:56,159 --> 00:21:00,559
type a password in my example

434
00:21:00,840 --> 00:21:06,320
screenshots

435
00:21:03,039 --> 00:21:07,600
so as we could see uh sudo is not just a

436
00:21:06,320 --> 00:21:10,559
prefix but a lot more

437
00:21:07,600 --> 00:21:11,840
fine-tuned permissions session recording

438
00:21:10,559 --> 00:21:16,559
uh

439
00:21:11,840 --> 00:21:20,320
plug a plug-in api and 1.9 which already

440
00:21:16,559 --> 00:21:24,559
available for testing will include

441
00:21:20,320 --> 00:21:24,559
python plugin which you can already test

442
00:21:25,280 --> 00:21:31,440
center session recording and

443
00:21:29,440 --> 00:21:34,799
the login and logging api and the

444
00:21:31,440 --> 00:21:34,799
provider api

445
00:21:35,679 --> 00:21:39,679
and do we have any questions we have

446
00:21:38,159 --> 00:21:45,840
probably two minutes left

447
00:21:39,679 --> 00:21:45,840
four questions three

448
00:21:55,840 --> 00:21:59,840
who is there

449
00:22:01,280 --> 00:22:06,960
uh thanks for the talk um if you

450
00:22:04,480 --> 00:22:08,960
if you uh do a lot of processing in your

451
00:22:06,960 --> 00:22:12,720
python plugin is that going to make the

452
00:22:08,960 --> 00:22:15,679
session seem laggy or

453
00:22:12,720 --> 00:22:15,679
badly performing

454
00:22:15,840 --> 00:22:22,480
uh i so the question was

455
00:22:19,360 --> 00:22:25,918
uh if it's using

456
00:22:22,480 --> 00:22:28,320
too much resources yeah your

457
00:22:25,919 --> 00:22:30,640
plugin does a lot of processing uh is

458
00:22:28,320 --> 00:22:33,840
your pseudo session gonna seem laggy

459
00:22:30,640 --> 00:22:34,960
i did personally i didn't feel i didn't

460
00:22:33,840 --> 00:22:38,080
do measurements

461
00:22:34,960 --> 00:22:41,440
but i uh just

462
00:22:38,080 --> 00:22:43,760
tested it uh i didn't feel

463
00:22:41,440 --> 00:22:44,880
that it was measurable i didn't feel

464
00:22:43,760 --> 00:22:48,000
that it was slower

465
00:22:44,880 --> 00:22:50,880
but i didn't do extensive testing

466
00:22:48,000 --> 00:22:51,760
just a few commands obviously if you

467
00:22:50,880 --> 00:22:54,000
have lots of

468
00:22:51,760 --> 00:22:54,879
directory listings whatever appearing on

469
00:22:54,000 --> 00:22:59,280
screen then

470
00:22:54,880 --> 00:23:02,640
it might slow a bit down but

471
00:22:59,280 --> 00:23:05,280
i didn't feel anything when i tried it

472
00:23:02,640 --> 00:23:05,280
great thanks

473
00:23:05,840 --> 00:23:09,840
okay we have time for one more question

474
00:23:18,240 --> 00:23:25,520
so when you match up the commands

475
00:23:22,720 --> 00:23:27,039
oh how are the how are you sure that

476
00:23:25,520 --> 00:23:29,440
nobody will

477
00:23:27,039 --> 00:23:30,240
inject some examples which break out

478
00:23:29,440 --> 00:23:32,559
obviously

479
00:23:30,240 --> 00:23:34,159
this is a very simple example i have

480
00:23:32,559 --> 00:23:38,240
shown you here

481
00:23:34,159 --> 00:23:40,960
if you uh uh change the

482
00:23:38,240 --> 00:23:41,919
order of the parameters it will already

483
00:23:40,960 --> 00:23:45,120
not match

484
00:23:41,919 --> 00:23:48,000
so it it was a dumb example but

485
00:23:45,120 --> 00:23:48,000
it it works

486
00:23:48,480 --> 00:23:53,360
if you want to use it in real world

487
00:23:51,600 --> 00:23:57,039
situations then you need

488
00:23:53,360 --> 00:23:59,120
to have more complex matches but

489
00:23:57,039 --> 00:24:00,960
that that's not an example of hitting a

490
00:23:59,120 --> 00:24:05,520
screen

491
00:24:00,960 --> 00:24:16,000
okay thanks

492
00:24:05,520 --> 00:24:16,000
thank you thank you

