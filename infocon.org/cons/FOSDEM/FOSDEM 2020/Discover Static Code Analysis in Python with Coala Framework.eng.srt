1
00:00:05,040 --> 00:00:09,280
let me introduce you to

2
00:00:06,000 --> 00:00:17,920
lionel who's gonna tell us more about

3
00:00:09,280 --> 00:00:17,920
the koala framework thank you

4
00:00:18,960 --> 00:00:26,000
so hello everyone my name is

5
00:00:22,080 --> 00:00:29,679
lionel i work as a devops engineer

6
00:00:26,000 --> 00:00:32,640
at evo azure sncf

7
00:00:29,679 --> 00:00:34,640
eva jsncf is the digital factory which

8
00:00:32,640 --> 00:00:39,680
addresses

9
00:00:34,640 --> 00:00:39,680
the sncf group digital challenges

10
00:00:39,840 --> 00:00:48,000
we are almost um 15

11
00:00:44,800 --> 00:00:48,718
hundred of employees working in three

12
00:00:48,000 --> 00:00:52,719
sites

13
00:00:48,719 --> 00:00:56,239
lille nant and lille

14
00:00:52,719 --> 00:00:56,239
i work in lille

15
00:00:57,039 --> 00:01:03,520
we address two main

16
00:01:00,559 --> 00:01:04,559
challenges this digital distribution

17
00:01:03,520 --> 00:01:06,960
through

18
00:01:04,559 --> 00:01:08,399
uh we essentially and right europe

19
00:01:06,960 --> 00:01:11,439
internationally

20
00:01:08,400 --> 00:01:14,560
and travel information via the

21
00:01:11,439 --> 00:01:19,360
mobile app that system sncf

22
00:01:14,560 --> 00:01:21,759
we are delivering to them iit services

23
00:01:19,360 --> 00:01:22,720
today we are going to talk about

24
00:01:21,759 --> 00:01:27,200
statistical

25
00:01:22,720 --> 00:01:30,320
analysis we will start first by

26
00:01:27,200 --> 00:01:33,439
make a do some overview a quick

27
00:01:30,320 --> 00:01:35,919
definition of static code analysis

28
00:01:33,439 --> 00:01:36,960
so we will fork we will follow up with

29
00:01:35,920 --> 00:01:40,799
the

30
00:01:36,960 --> 00:01:44,559
the koala framework koala bears

31
00:01:40,799 --> 00:01:46,000
how is it used to do static analysis in

32
00:01:44,560 --> 00:01:49,840
python

33
00:01:46,000 --> 00:01:52,240
and we will see

34
00:01:49,840 --> 00:01:53,360
uh what are coming next into the into

35
00:01:52,240 --> 00:01:56,560
the framework

36
00:01:53,360 --> 00:02:00,640
to ease the use

37
00:01:56,560 --> 00:02:02,960
of python to do statistical analysis

38
00:02:00,640 --> 00:02:05,840
and we finish through the q a if you

39
00:02:02,960 --> 00:02:05,839
have question of course

40
00:02:06,000 --> 00:02:10,800
static code analysis we can define it as

41
00:02:09,440 --> 00:02:14,000
a method to extract

42
00:02:10,800 --> 00:02:17,840
facts detect and

43
00:02:14,000 --> 00:02:22,000
also fixed defects in source code

44
00:02:17,840 --> 00:02:25,360
without executing it

45
00:02:22,000 --> 00:02:29,200
are mainly used to do code quality

46
00:02:25,360 --> 00:02:31,360
code reviews also compliance

47
00:02:29,200 --> 00:02:32,640
when you have to do compliance tests to

48
00:02:31,360 --> 00:02:36,640
in

49
00:02:32,640 --> 00:02:39,839
for security or you or you just want to

50
00:02:36,640 --> 00:02:40,640
ensure that your core style into the

51
00:02:39,840 --> 00:02:44,080
team

52
00:02:40,640 --> 00:02:47,518
are well respected and

53
00:02:44,080 --> 00:02:48,160
of course to detect flaws and try to fix

54
00:02:47,519 --> 00:02:51,440
them

55
00:02:48,160 --> 00:02:56,239
before going to before running

56
00:02:51,440 --> 00:02:59,040
it the koala framework

57
00:02:56,239 --> 00:03:01,200
we have a lot of tools today to do such

58
00:02:59,040 --> 00:03:05,280
a good analysis as you see

59
00:03:01,200 --> 00:03:08,560
there is a bunch of tools and

60
00:03:05,280 --> 00:03:10,319
the the the more you have

61
00:03:08,560 --> 00:03:12,560
tools the more you have a way to

62
00:03:10,319 --> 00:03:16,640
configure those tools

63
00:03:12,560 --> 00:03:20,239
and it's pretty hard so

64
00:03:16,640 --> 00:03:21,279
let's categorize uh those tools into

65
00:03:20,239 --> 00:03:24,400
analyzers

66
00:03:21,280 --> 00:03:27,519
as you so as you see up there

67
00:03:24,400 --> 00:03:31,360
and you have also uh

68
00:03:27,519 --> 00:03:34,159
the way we use those tools via editors

69
00:03:31,360 --> 00:03:35,120
tools and services and also the way you

70
00:03:34,159 --> 00:03:38,159
consume

71
00:03:35,120 --> 00:03:41,440
the results produced by those tools

72
00:03:38,159 --> 00:03:45,200
like exporting your results into json or

73
00:03:41,440 --> 00:03:47,599
an html report as you see it's

74
00:03:45,200 --> 00:03:48,798
pretty complicated to deal with all

75
00:03:47,599 --> 00:03:51,920
those

76
00:03:48,799 --> 00:03:54,159
tools and the way we use them

77
00:03:51,920 --> 00:03:54,159
so

78
00:03:55,920 --> 00:04:03,280
how can we know what if

79
00:03:59,680 --> 00:04:08,159
you can have one only tools

80
00:04:03,280 --> 00:04:08,159
to manage all this mess

81
00:04:10,159 --> 00:04:19,918
that's why koala has been built koala is

82
00:04:15,200 --> 00:04:19,918
not pretty much it's just

83
00:04:20,079 --> 00:04:27,680
an api which is language agnostic

84
00:04:24,240 --> 00:04:30,000
that means you can you use koala in

85
00:04:27,680 --> 00:04:33,440
python but you can analyze code from

86
00:04:30,000 --> 00:04:33,440
any languages

87
00:04:33,759 --> 00:04:40,240
the support it supports

88
00:04:36,800 --> 00:04:43,680
more than 60 languages

89
00:04:40,240 --> 00:04:46,960
for now programming languages

90
00:04:43,680 --> 00:04:51,440
let's have a closer look that's the

91
00:04:46,960 --> 00:04:54,479
typical constitution of a static analyze

92
00:04:51,440 --> 00:04:58,320
this tool we command we start

93
00:04:54,479 --> 00:05:01,360
by using the code as data

94
00:04:58,320 --> 00:05:04,880
and you have some model extraction to

95
00:05:01,360 --> 00:05:07,840
just get data from the code

96
00:05:04,880 --> 00:05:09,199
you can you then produce an intermediate

97
00:05:07,840 --> 00:05:11,580
representation

98
00:05:09,199 --> 00:05:14,790
we could be we can be

99
00:05:11,580 --> 00:05:14,789
[Music]

100
00:05:16,000 --> 00:05:23,600
you have ast you also

101
00:05:19,600 --> 00:05:26,720
get data structures you could also have

102
00:05:23,600 --> 00:05:30,880
call graphs and also

103
00:05:26,720 --> 00:05:34,639
control flow graph if we zoom out into

104
00:05:30,880 --> 00:05:37,440
the main goal of koala

105
00:05:34,639 --> 00:05:39,360
as i so as i said you have data

106
00:05:37,440 --> 00:05:42,400
structures

107
00:05:39,360 --> 00:05:45,440
for analyzes we have rules that

108
00:05:42,400 --> 00:05:48,479
also call routines

109
00:05:45,440 --> 00:05:49,039
in koala they call it bears is the way

110
00:05:48,479 --> 00:05:52,560
you

111
00:05:49,039 --> 00:05:54,960
implement your algorithm to do static

112
00:05:52,560 --> 00:05:57,280
code analysis

113
00:05:54,960 --> 00:06:00,080
and after that the produced result we

114
00:05:57,280 --> 00:06:03,440
could be in two forms

115
00:06:00,080 --> 00:06:06,560
outputs and actions output

116
00:06:03,440 --> 00:06:10,880
is like detecting the way you detect

117
00:06:06,560 --> 00:06:13,840
flows and and errors

118
00:06:10,880 --> 00:06:15,120
you could have also as an output the

119
00:06:13,840 --> 00:06:18,159
fixed recommendation

120
00:06:15,120 --> 00:06:22,319
do how we can fix our code

121
00:06:18,160 --> 00:06:26,000
and you have you can you get as a result

122
00:06:22,319 --> 00:06:29,360
also compliance reports

123
00:06:26,000 --> 00:06:29,840
for flows and code styles as i said

124
00:06:29,360 --> 00:06:32,479
before

125
00:06:29,840 --> 00:06:33,119
you also have actions there is a lot of

126
00:06:32,479 --> 00:06:36,240
actions

127
00:06:33,120 --> 00:06:39,520
there are some action could be

128
00:06:36,240 --> 00:06:44,560
apply a patch or actually fixing

129
00:06:39,520 --> 00:06:44,560
the the flaws or the defects

130
00:06:45,840 --> 00:06:49,198
let's see how to pick setup you could

131
00:06:48,800 --> 00:06:52,160
use

132
00:06:49,199 --> 00:06:53,360
pip to install koala bears with install

133
00:06:52,160 --> 00:06:56,800
everything you need

134
00:06:53,360 --> 00:06:57,599
to start working with koala or you could

135
00:06:56,800 --> 00:07:00,639
also use

136
00:06:57,599 --> 00:07:03,039
docker which i think is the recommended

137
00:07:00,639 --> 00:07:06,400
way because you have it doesn't have to

138
00:07:03,039 --> 00:07:09,120
deal with pip packages

139
00:07:06,400 --> 00:07:10,638
you just use the container which which

140
00:07:09,120 --> 00:07:14,560
is package up with all

141
00:07:10,639 --> 00:07:17,759
the things you need you have

142
00:07:14,560 --> 00:07:18,800
another way which is online you have a

143
00:07:17,759 --> 00:07:22,800
better

144
00:07:18,800 --> 00:07:26,880
uh beta webpage online where you can

145
00:07:22,800 --> 00:07:32,560
just put the the repository

146
00:07:26,880 --> 00:07:32,560
of your code and start working on it

147
00:07:33,520 --> 00:07:40,479
let's see um how to use koala

148
00:07:37,440 --> 00:07:44,080
let's see some code first

149
00:07:40,479 --> 00:07:46,800
you clone the project and as you see

150
00:07:44,080 --> 00:07:47,840
you have a beers directory and the src

151
00:07:46,800 --> 00:07:51,199
directory

152
00:07:47,840 --> 00:07:53,039
in this project is mainly you have

153
00:07:51,199 --> 00:07:57,280
mainly two languages we have c

154
00:07:53,039 --> 00:08:01,039
and python and the way you

155
00:07:57,280 --> 00:08:03,840
approach the the the use of koala

156
00:08:01,039 --> 00:08:05,919
is by saying okay i have a project with

157
00:08:03,840 --> 00:08:09,119
two languages

158
00:08:05,919 --> 00:08:12,878
let's list the uh available

159
00:08:09,120 --> 00:08:15,680
bills available rules that i could use

160
00:08:12,879 --> 00:08:19,520
to analyze my code

161
00:08:15,680 --> 00:08:22,400
so you run this and you see a bunch of

162
00:08:19,520 --> 00:08:22,400
bears available

163
00:08:23,680 --> 00:08:27,360
for the next for the next slides i will

164
00:08:26,800 --> 00:08:30,560
just

165
00:08:27,360 --> 00:08:33,680
aliases koala to make

166
00:08:30,560 --> 00:08:36,399
the the slide more short so

167
00:08:33,679 --> 00:08:37,519
you just run koala and it means wrong

168
00:08:36,399 --> 00:08:41,839
running koala

169
00:08:37,519 --> 00:08:41,839
behind docker

170
00:08:42,399 --> 00:08:47,600
so i want to analyze my code written in

171
00:08:45,680 --> 00:08:50,000
python

172
00:08:47,600 --> 00:08:51,600
i will list the beers available for

173
00:08:50,000 --> 00:08:56,080
python

174
00:08:51,600 --> 00:08:58,720
yeah i choosed the pepe beer

175
00:08:56,080 --> 00:08:58,720
for example

176
00:09:00,320 --> 00:09:05,920
i don't know much about it so i get some

177
00:09:03,120 --> 00:09:09,279
documentation how to use it

178
00:09:05,920 --> 00:09:12,240
and i see also we have optional settings

179
00:09:09,279 --> 00:09:13,040
how to set the the configuration for the

180
00:09:12,240 --> 00:09:15,440
wheels

181
00:09:13,040 --> 00:09:16,480
and what the bs can do the beers can

182
00:09:15,440 --> 00:09:23,839
detect

183
00:09:16,480 --> 00:09:23,839
formatting and can fix formatting

184
00:09:24,320 --> 00:09:31,360
so you run your your your beers

185
00:09:28,000 --> 00:09:35,680
young koala and specifying the beers

186
00:09:31,360 --> 00:09:40,640
pep 8 on your python files

187
00:09:35,680 --> 00:09:40,640
first you will get a gif output

188
00:09:41,120 --> 00:09:47,839
it says how your code is not compliant

189
00:09:45,120 --> 00:09:47,839
to the pep 8

190
00:09:48,839 --> 00:09:53,279
rows

191
00:09:51,279 --> 00:09:56,399
and after that you have action as i said

192
00:09:53,279 --> 00:09:56,399
before you can

193
00:09:56,800 --> 00:10:02,719
either do nothing or open the files

194
00:10:00,240 --> 00:10:03,279
apply the patch which means make the

195
00:10:02,720 --> 00:10:07,360
code

196
00:10:03,279 --> 00:10:10,480
compliant and also ignore

197
00:10:07,360 --> 00:10:13,440
the command and you have

198
00:10:10,480 --> 00:10:14,640
you can also pass apply patches under

199
00:10:13,440 --> 00:10:19,600
the command line

200
00:10:14,640 --> 00:10:23,519
to do the apply patch action

201
00:10:19,600 --> 00:10:25,680
directly you also have

202
00:10:23,519 --> 00:10:27,440
another option to specify which action

203
00:10:25,680 --> 00:10:29,760
you need to

204
00:10:27,440 --> 00:10:29,760
to do

205
00:10:30,800 --> 00:10:35,359
as you have noticed you also the tools

206
00:10:34,000 --> 00:10:38,720
recommended you

207
00:10:35,360 --> 00:10:39,920
or suggest you to use save to save your

208
00:10:38,720 --> 00:10:44,079
configuration

209
00:10:39,920 --> 00:10:44,079
that's mainly

210
00:10:45,279 --> 00:10:50,720
brought us to to the configuration file

211
00:10:48,560 --> 00:10:53,199
as i said you have a lot of tools and

212
00:10:50,720 --> 00:10:56,399
you have a lot of configuration

213
00:10:53,200 --> 00:10:57,040
files to to tell which how the tools

214
00:10:56,399 --> 00:10:59,760
should

215
00:10:57,040 --> 00:11:00,160
analyze your code in cola you also have

216
00:10:59,760 --> 00:11:05,200
one

217
00:11:00,160 --> 00:11:08,640
file to deal with all builds

218
00:11:05,200 --> 00:11:09,279
when you run with save it produce a file

219
00:11:08,640 --> 00:11:13,120
called

220
00:11:09,279 --> 00:11:16,000
a core file it looks like this

221
00:11:13,120 --> 00:11:17,279
you have sections it's an init file you

222
00:11:16,000 --> 00:11:21,040
have sections

223
00:11:17,279 --> 00:11:24,560
and you have uh two

224
00:11:21,040 --> 00:11:26,800
at least two mandatory uh settings

225
00:11:24,560 --> 00:11:28,719
which is specifying the bills the rules

226
00:11:26,800 --> 00:11:32,640
you need to apply on the code

227
00:11:28,720 --> 00:11:36,800
and the file you need to be applying on

228
00:11:32,640 --> 00:11:37,760
you can also enter your settings in the

229
00:11:36,800 --> 00:11:40,880
at the command line

230
00:11:37,760 --> 00:11:43,839
as i as you see

231
00:11:40,880 --> 00:11:43,839
in the int

232
00:11:44,800 --> 00:11:53,760
in the configuration 5 you have a way to

233
00:11:48,880 --> 00:11:56,959
organize your your bills

234
00:11:53,760 --> 00:11:58,560
this to to avoid repeating yourself in

235
00:11:56,959 --> 00:12:01,920
the configuration

236
00:11:58,560 --> 00:12:05,279
so you have inheritance

237
00:12:01,920 --> 00:12:08,479
you just have to prefix

238
00:12:05,279 --> 00:12:10,320
the section with a base settings base

239
00:12:08,480 --> 00:12:13,680
section name

240
00:12:10,320 --> 00:12:15,519
and as you see section 1 and 2 extend

241
00:12:13,680 --> 00:12:20,479
from the configuration

242
00:12:15,519 --> 00:12:23,360
set at the base section

243
00:12:20,480 --> 00:12:23,760
you also have append operators which you

244
00:12:23,360 --> 00:12:27,519
can

245
00:12:23,760 --> 00:12:27,519
like this append files

246
00:12:27,740 --> 00:12:31,120
[Music]

247
00:12:29,040 --> 00:12:32,319
from section to session as you see at

248
00:12:31,120 --> 00:12:35,680
the base i all

249
00:12:32,320 --> 00:12:36,880
i am also i'm only analyzing python

250
00:12:35,680 --> 00:12:39,680
files

251
00:12:36,880 --> 00:12:40,079
and at section one i want to analyze not

252
00:12:39,680 --> 00:12:44,719
only

253
00:12:40,079 --> 00:12:44,719
python files but also c files

254
00:12:48,959 --> 00:12:56,560
that's an example i have all

255
00:12:52,000 --> 00:12:56,560
this specified aux section and

256
00:12:56,800 --> 00:13:03,279
at the example section i want to check

257
00:13:00,079 --> 00:13:07,839
also if the space are

258
00:13:03,279 --> 00:13:07,839
consistent in my code

259
00:13:09,279 --> 00:13:17,279
okay let's see how bs works and how to

260
00:13:14,399 --> 00:13:17,680
what are bills really and how to create

261
00:13:17,279 --> 00:13:22,560
your

262
00:13:17,680 --> 00:13:27,120
own bills as i said beers are

263
00:13:22,560 --> 00:13:32,000
only rules but beers are the base

264
00:13:27,120 --> 00:13:34,800
construct when you need to write a rule

265
00:13:32,000 --> 00:13:37,040
you have to implement the run function

266
00:13:34,800 --> 00:13:40,160
and the run function

267
00:13:37,040 --> 00:13:43,439
is the one which is executed

268
00:13:40,160 --> 00:13:43,439
to run your algorithm

269
00:13:43,839 --> 00:13:47,360
from the bills you have two classes

270
00:13:46,240 --> 00:13:50,480
local beers

271
00:13:47,360 --> 00:13:54,880
and global bills actually your code

272
00:13:50,480 --> 00:13:54,880
should extend from those two ones

273
00:13:55,760 --> 00:14:02,319
and you also can have user inputs at the

274
00:13:58,880 --> 00:14:05,920
axe which is provided by the framework

275
00:14:02,320 --> 00:14:08,320
local beers runs on every file of your

276
00:14:05,920 --> 00:14:08,319
project

277
00:14:09,360 --> 00:14:13,519
and the run function had

278
00:14:14,240 --> 00:14:20,560
provide the file name

279
00:14:17,440 --> 00:14:25,120
and the the file content

280
00:14:20,560 --> 00:14:25,119
for you to run your algorithm

281
00:14:27,440 --> 00:14:34,720
also use input and settings

282
00:14:31,600 --> 00:14:34,720
and global beers

283
00:14:35,440 --> 00:14:40,639
to run analysis on the wall project

284
00:14:38,959 --> 00:14:42,239
as you see in the run function you don't

285
00:14:40,639 --> 00:14:45,360
have the file but

286
00:14:42,240 --> 00:14:48,480
you can do some internal things

287
00:14:45,360 --> 00:14:51,680
to do whatever you want whatever you

288
00:14:48,480 --> 00:14:51,680
want with your files

289
00:14:55,839 --> 00:15:00,720
let's see an example i have a hello

290
00:14:58,399 --> 00:15:04,160
world beer

291
00:15:00,720 --> 00:15:07,360
and now i just print some logging

292
00:15:04,160 --> 00:15:10,839
things so i extend from the local b

293
00:15:07,360 --> 00:15:12,000
that means i want to run it on every

294
00:15:10,839 --> 00:15:15,120
file

295
00:15:12,000 --> 00:15:19,680
and just output a user input

296
00:15:15,120 --> 00:15:19,680
which will which is provided by the user

297
00:15:24,079 --> 00:15:27,439
and at the end the rule is that you have

298
00:15:26,560 --> 00:15:30,479
to yield

299
00:15:27,440 --> 00:15:34,079
the result why because

300
00:15:30,480 --> 00:15:36,320
when you mixed bs

301
00:15:34,079 --> 00:15:38,479
you could get the result from any bills

302
00:15:36,320 --> 00:15:39,440
in your bills if you have dependent

303
00:15:38,480 --> 00:15:41,839
beers

304
00:15:39,440 --> 00:15:42,959
you can get the result provide the

305
00:15:41,839 --> 00:15:45,279
result

306
00:15:42,959 --> 00:15:46,239
getting from the inner bills you will

307
00:15:45,279 --> 00:15:50,480
use

308
00:15:46,240 --> 00:15:50,480
you have used in your in your bill

309
00:15:52,000 --> 00:15:59,199
i run it and that's the output

310
00:15:55,680 --> 00:16:02,560
it suggests me to enter my user

311
00:15:59,199 --> 00:16:06,240
user input and i put line

312
00:16:02,560 --> 00:16:06,880
my name and it suggests me as you saw

313
00:16:06,240 --> 00:16:10,399
before

314
00:16:06,880 --> 00:16:10,399
action to do on this

315
00:16:13,040 --> 00:16:17,279
so beers in bills to write a bills you

316
00:16:16,560 --> 00:16:20,839
have

317
00:16:17,279 --> 00:16:22,000
three main categories you have native

318
00:16:20,839 --> 00:16:24,959
beers

319
00:16:22,000 --> 00:16:27,040
linters to do linting and you have

320
00:16:24,959 --> 00:16:30,239
external beers

321
00:16:27,040 --> 00:16:31,759
what is what are native beers native

322
00:16:30,240 --> 00:16:34,560
beers

323
00:16:31,759 --> 00:16:37,680
the beers that extend for local beers

324
00:16:34,560 --> 00:16:40,479
and global beers

325
00:16:37,680 --> 00:16:40,479
simply like this

326
00:16:40,800 --> 00:16:44,399
if you want an example that's a native

327
00:16:43,120 --> 00:16:47,440
beer

328
00:16:44,399 --> 00:16:50,720
as i as you you saw the hello world bees

329
00:16:47,440 --> 00:16:53,759
was the native beer then

330
00:16:50,720 --> 00:16:56,959
i just implement the run function and

331
00:16:53,759 --> 00:16:56,959
yield some results

332
00:16:57,199 --> 00:17:04,959
and the global bills side aside

333
00:17:02,560 --> 00:17:07,198
also do do the analysis on the work

334
00:17:04,959 --> 00:17:10,400
project

335
00:17:07,199 --> 00:17:14,319
linter abuse lintel bills

336
00:17:10,400 --> 00:17:19,760
use your own tools and wrap your tools

337
00:17:14,319 --> 00:17:23,199
just imagine um you have a linter

338
00:17:19,760 --> 00:17:26,879
like gslint and you want to use

339
00:17:23,199 --> 00:17:30,160
koala to wrap it that's

340
00:17:26,880 --> 00:17:33,440
why you use a linter a lintel beer

341
00:17:30,160 --> 00:17:36,720
you specify the executable and

342
00:17:33,440 --> 00:17:39,840
you have to say if this bears is

343
00:17:36,720 --> 00:17:41,919
a global or not

344
00:17:39,840 --> 00:17:43,840
if it's global it means your tools

345
00:17:41,919 --> 00:17:47,600
analyze the whole project

346
00:17:43,840 --> 00:17:53,600
and if not it means just the tools

347
00:17:47,600 --> 00:17:53,600
analyze the file each file of a file

348
00:17:54,320 --> 00:17:58,240
the particularity there is that the

349
00:17:57,120 --> 00:18:01,120
linter

350
00:17:58,240 --> 00:18:01,679
the interview has to implement the

351
00:18:01,120 --> 00:18:05,120
create

352
00:18:01,679 --> 00:18:09,520
arguments that's how you pass arguments

353
00:18:05,120 --> 00:18:12,399
to your your executable

354
00:18:09,520 --> 00:18:12,400
we'll see an example

355
00:18:12,799 --> 00:18:20,000
and you have uh also the way

356
00:18:16,480 --> 00:18:21,039
to provide a configuration if you have a

357
00:18:20,000 --> 00:18:24,799
tool that

358
00:18:21,039 --> 00:18:28,000
a highly configurable file

359
00:18:24,799 --> 00:18:31,039
you can just do everything in the

360
00:18:28,000 --> 00:18:31,520
generate config produce digestion you

361
00:18:31,039 --> 00:18:35,360
need

362
00:18:31,520 --> 00:18:38,160
to to execute your tools and it will be

363
00:18:35,360 --> 00:18:40,399
injected in the create argument after

364
00:18:38,160 --> 00:18:40,400
that

365
00:18:40,640 --> 00:18:43,840
let's see an example to

366
00:18:44,480 --> 00:18:51,600
to to to see how it works

367
00:18:48,000 --> 00:18:54,880
i have pylint that i need to wrap

368
00:18:51,600 --> 00:18:58,959
so i create

369
00:18:54,880 --> 00:19:02,480
the create argument function

370
00:18:58,960 --> 00:19:06,080
that's where i return a list a

371
00:19:02,480 --> 00:19:09,200
tuple the tuple contains

372
00:19:06,080 --> 00:19:13,520
every options pilot

373
00:19:09,200 --> 00:19:16,960
need to analyze my code

374
00:19:13,520 --> 00:19:20,400
that's simply how it works and from the

375
00:19:16,960 --> 00:19:24,480
output specified there you specify

376
00:19:20,400 --> 00:19:29,679
how are you how you want to

377
00:19:24,480 --> 00:19:29,679
to analyze it and interpret the result

378
00:19:30,720 --> 00:19:37,360
external bills is wrapping

379
00:19:33,760 --> 00:19:41,120
also your beers your your tool

380
00:19:37,360 --> 00:19:41,120
but written in any language

381
00:19:41,280 --> 00:19:49,039
you it will provide quota will provide

382
00:19:45,039 --> 00:19:52,240
you some data in json

383
00:19:49,039 --> 00:19:54,799
and you have as a rule

384
00:19:52,240 --> 00:19:56,160
you have to produce this result with

385
00:19:54,799 --> 00:20:00,960
will be

386
00:19:56,160 --> 00:20:00,960
analyzed or used by koala

387
00:20:02,080 --> 00:20:10,158
as an example i create a beer

388
00:20:06,880 --> 00:20:13,360
i wrap my tool which using node i create

389
00:20:10,159 --> 00:20:16,799
my script in node.js

390
00:20:13,360 --> 00:20:20,479
and after that with my add result

391
00:20:16,799 --> 00:20:24,480
i produce the json wanted for my

392
00:20:20,480 --> 00:20:24,480
tools to be considered as a beer

393
00:20:25,360 --> 00:20:34,399
like this i should use console

394
00:20:28,480 --> 00:20:37,280
log to show to to output it at a json

395
00:20:34,400 --> 00:20:37,919
going further the the new thing that

396
00:20:37,280 --> 00:20:41,440
will come up

397
00:20:37,919 --> 00:20:45,520
is they are creating

398
00:20:41,440 --> 00:20:47,039
a way to provide to us the ast of any

399
00:20:45,520 --> 00:20:49,440
language

400
00:20:47,039 --> 00:20:50,480
a new api using the aspect of granted

401
00:20:49,440 --> 00:20:54,159
programming

402
00:20:50,480 --> 00:20:55,360
with aspect and taste and a new package

403
00:20:54,159 --> 00:20:58,960
manager

404
00:20:55,360 --> 00:21:01,039
to just specify

405
00:20:58,960 --> 00:21:02,000
your requirements in your beers and it

406
00:21:01,039 --> 00:21:05,440
will go

407
00:21:02,000 --> 00:21:06,320
fetch your npm package or your pip

408
00:21:05,440 --> 00:21:08,720
package

409
00:21:06,320 --> 00:21:09,600
inside your beers to be sure that when

410
00:21:08,720 --> 00:21:11,840
your build run

411
00:21:09,600 --> 00:21:14,240
you have everything you need to analyze

412
00:21:11,840 --> 00:21:14,240
your code

413
00:21:14,799 --> 00:21:25,680
thank you

414
00:21:16,320 --> 00:21:25,679
[Applause]

415
00:21:29,360 --> 00:21:33,840
yeah we still have time for a few

416
00:21:31,440 --> 00:21:33,840
questions

417
00:21:38,240 --> 00:21:45,840
this gentleman here

418
00:21:56,400 --> 00:22:02,799
are you able to do some kind of a

419
00:21:59,520 --> 00:22:07,360
semantic static analysis to deduce

420
00:22:02,799 --> 00:22:07,360
some properties of your program or so on

421
00:22:07,760 --> 00:22:13,840
the question was can i

422
00:22:13,919 --> 00:22:20,159
oh the question was can i do some

423
00:22:17,039 --> 00:22:23,039
semantic analysis i will answer that

424
00:22:20,159 --> 00:22:27,679
yes you have just the run function so

425
00:22:23,039 --> 00:22:31,200
you can do whatever you want

426
00:22:27,679 --> 00:22:31,200
in the examples

427
00:22:33,559 --> 00:22:40,240
of the intermediate

428
00:22:36,320 --> 00:22:41,520
representation oh the the intermediate

429
00:22:40,240 --> 00:22:44,000
with the representation

430
00:22:41,520 --> 00:22:44,960
in that case was just a python data

431
00:22:44,000 --> 00:22:47,919
structure

432
00:22:44,960 --> 00:22:48,559
the coral app for the local base coal

433
00:22:47,919 --> 00:22:51,280
produce

434
00:22:48,559 --> 00:22:52,480
gives you the file content and the file

435
00:22:51,280 --> 00:22:55,840
name

436
00:22:52,480 --> 00:22:56,240
and you can work with this and if you

437
00:22:55,840 --> 00:22:58,480
have

438
00:22:56,240 --> 00:23:00,080
the the file content you can do whatever

439
00:22:58,480 --> 00:23:03,280
you want with the your tools

440
00:23:00,080 --> 00:23:06,320
that you semantic analysis on this

441
00:23:03,280 --> 00:23:09,678
that's how it works and the this

442
00:23:06,320 --> 00:23:12,960
just so that that was a little com

443
00:23:09,679 --> 00:23:16,000
complicated and you can you cannot

444
00:23:12,960 --> 00:23:19,679
do much with this

445
00:23:16,000 --> 00:23:22,559
simple construct that's why i said

446
00:23:19,679 --> 00:23:23,520
they are working on bringing some real

447
00:23:22,559 --> 00:23:28,158
tools

448
00:23:23,520 --> 00:23:28,158
to to give you more abilities

449
00:23:29,840 --> 00:23:39,199
yes oh wait

450
00:23:36,240 --> 00:23:39,200
any additional question

451
00:23:48,000 --> 00:23:52,000
you mentioned it's a language agnostic

452
00:23:50,320 --> 00:23:54,399
can you can you do it can you use it for

453
00:23:52,000 --> 00:23:57,200
python 27 as well

454
00:23:54,400 --> 00:23:57,200
can you speak hello

455
00:23:59,120 --> 00:24:07,439
oh wait

456
00:24:04,400 --> 00:24:10,720
yes as well

457
00:24:07,440 --> 00:24:14,480
python ii uh i think i

458
00:24:10,720 --> 00:24:16,799
said that it was available for python 3

459
00:24:14,480 --> 00:24:16,799
i think

460
00:24:17,039 --> 00:24:19,840
yes

461
00:24:22,240 --> 00:24:33,840
it's it supports 60 languages oh

462
00:24:26,320 --> 00:24:33,840
it supports 60 languages

463
00:24:36,159 --> 00:24:38,400
yes

464
00:24:42,080 --> 00:24:47,840
oh it's hard right

465
00:24:54,610 --> 00:24:57,840
[Music]

466
00:24:58,960 --> 00:25:02,240
complete asp

467
00:25:03,120 --> 00:25:07,279
it depends on the compiler options how

468
00:25:04,720 --> 00:25:10,960
does that work yes

469
00:25:07,279 --> 00:25:14,159
the question was koala supports

470
00:25:10,960 --> 00:25:18,880
60 languages and

471
00:25:14,159 --> 00:25:21,440
you can use python to analyze c code

472
00:25:18,880 --> 00:25:22,960
and how it works yes that's my question

473
00:25:21,440 --> 00:25:23,840
because it depends on the compiler

474
00:25:22,960 --> 00:25:29,279
options

475
00:25:23,840 --> 00:25:32,639
flags yes you can use the

476
00:25:29,279 --> 00:25:36,559
the linter the lint beer

477
00:25:32,640 --> 00:25:40,480
and provide your compiler the

478
00:25:36,559 --> 00:25:43,520
compiler option via the beers

479
00:25:40,480 --> 00:25:46,880
you have to see it as a as a rapper

480
00:25:43,520 --> 00:25:50,158
okay that's that's that's um how i

481
00:25:46,880 --> 00:25:52,559
why i think is very um

482
00:25:50,159 --> 00:25:53,600
powerful because you can have just one

483
00:25:52,559 --> 00:25:56,799
tool

484
00:25:53,600 --> 00:26:00,399
and do whatever you want with

485
00:25:56,799 --> 00:26:00,799
what exists what is what is out there to

486
00:26:00,400 --> 00:26:03,440
do

487
00:26:00,799 --> 00:26:03,440
analyzes

488
00:26:06,960 --> 00:26:25,039
any questions

489
00:26:11,600 --> 00:26:25,039
okay thank you thank you very much

