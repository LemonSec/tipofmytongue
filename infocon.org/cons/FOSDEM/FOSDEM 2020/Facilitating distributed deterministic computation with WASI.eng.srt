1
00:00:05,680 --> 00:00:08,719
i want to welcome jakub we have debated

2
00:00:07,839 --> 00:00:10,160
his name already

3
00:00:08,720 --> 00:00:11,920
i'm just going to hold this this is

4
00:00:10,160 --> 00:00:17,920
impossible to pin

5
00:00:11,920 --> 00:00:21,520
i think you can just uh wear it yeah

6
00:00:17,920 --> 00:00:25,279
hello is it okay can you hear him well

7
00:00:21,520 --> 00:00:28,480
yeah it's okay okay

8
00:00:25,279 --> 00:00:30,960
great so welcome and yeah nice to see

9
00:00:28,480 --> 00:00:31,760
and learn more about vassi so um hey

10
00:00:30,960 --> 00:00:33,920
guys

11
00:00:31,760 --> 00:00:35,520
i'm gonna talk to you today briefly

12
00:00:33,920 --> 00:00:38,640
about wazi

13
00:00:35,520 --> 00:00:39,840
but before we get on uh let me i guess

14
00:00:38,640 --> 00:00:41,600
introduce myself

15
00:00:39,840 --> 00:00:42,960
this is actually my first time at fosdem

16
00:00:41,600 --> 00:00:47,440
and first time presenting

17
00:00:42,960 --> 00:00:50,559
uh so far it's great so my name is jacob

18
00:00:47,440 --> 00:00:53,599
konica i'm an rnd researcher at

19
00:00:50,559 --> 00:00:54,879
golem factory um for all the links and

20
00:00:53,600 --> 00:00:58,239
stuff you want to see more

21
00:00:54,879 --> 00:01:00,559
you can find this on the fosdem events

22
00:00:58,239 --> 00:01:01,760
web page for the talk i try to put

23
00:01:00,559 --> 00:01:02,399
everything there if you have any more

24
00:01:01,760 --> 00:01:04,879
questions

25
00:01:02,399 --> 00:01:05,680
about stuff just feel free to ask me

26
00:01:04,879 --> 00:01:07,600
probably after

27
00:01:05,680 --> 00:01:09,040
so that we can get through this and then

28
00:01:07,600 --> 00:01:09,919
i want to show you some live coding as

29
00:01:09,040 --> 00:01:12,000
well

30
00:01:09,920 --> 00:01:13,680
hopefully we have time for that so um

31
00:01:12,000 --> 00:01:16,640
i'm a regular contributor to

32
00:01:13,680 --> 00:01:17,520
wasantam and wazi um and one of the

33
00:01:16,640 --> 00:01:20,720
authors of

34
00:01:17,520 --> 00:01:24,240
was the common library that's used

35
00:01:20,720 --> 00:01:25,520
in both wasm time and lucid was iran

36
00:01:24,240 --> 00:01:27,839
times

37
00:01:25,520 --> 00:01:29,280
and i'm going to get to that later on as

38
00:01:27,840 --> 00:01:31,759
well i'm also a member of the

39
00:01:29,280 --> 00:01:33,360
webassembly community group

40
00:01:31,759 --> 00:01:35,600
and you can actually if you have any

41
00:01:33,360 --> 00:01:38,320
questions just feel free to reach me on

42
00:01:35,600 --> 00:01:40,000
any other handles private emails are

43
00:01:38,320 --> 00:01:43,839
fine as well i don't mind

44
00:01:40,000 --> 00:01:45,759
right so what is wazi um very briefly

45
00:01:43,840 --> 00:01:47,040
was he stands for web assembly system

46
00:01:45,759 --> 00:01:51,360
interface

47
00:01:47,040 --> 00:01:53,360
it's a pretty new thing i think

48
00:01:51,360 --> 00:01:56,479
officially was announced last year

49
00:01:53,360 --> 00:01:59,840
around march april time

50
00:01:56,479 --> 00:02:01,520
currently it's being standardized by

51
00:01:59,840 --> 00:02:04,320
a community group called bytecode

52
00:02:01,520 --> 00:02:06,158
alliance now by bytecode alliance was

53
00:02:04,320 --> 00:02:09,199
formed in november 2019

54
00:02:06,159 --> 00:02:12,879
by four founding members of the mozilla

55
00:02:09,199 --> 00:02:15,839
fastly red hat on intel

56
00:02:12,879 --> 00:02:19,120
um all of those companies have actually

57
00:02:15,840 --> 00:02:21,040
something to do with web assembly and

58
00:02:19,120 --> 00:02:22,239
computation outside of the browser using

59
00:02:21,040 --> 00:02:24,319
wasm um

60
00:02:22,239 --> 00:02:25,920
so why was he because we already have a

61
00:02:24,319 --> 00:02:27,519
scripting target we have the unknown

62
00:02:25,920 --> 00:02:30,879
unknown target for wasm

63
00:02:27,520 --> 00:02:33,120
so wazi is trying to take wasm

64
00:02:30,879 --> 00:02:34,720
outside of the browser unlike encrypted

65
00:02:33,120 --> 00:02:37,360
and actually do it

66
00:02:34,720 --> 00:02:39,200
with security in mind first so it's the

67
00:02:37,360 --> 00:02:41,519
security is based

68
00:02:39,200 --> 00:02:43,119
on capability-based security model kind

69
00:02:41,519 --> 00:02:46,239
of like cloud abbey

70
00:02:43,120 --> 00:02:47,680
um capsicum or whatnot um so basically i

71
00:02:46,239 --> 00:02:49,280
just just just will

72
00:02:47,680 --> 00:02:51,040
give you the save and portable access to

73
00:02:49,280 --> 00:02:53,120
the host resources

74
00:02:51,040 --> 00:02:54,480
if you want to learn more uh you know

75
00:02:53,120 --> 00:02:56,080
have a look at the official website

76
00:02:54,480 --> 00:02:57,840
which is blizzard.dev

77
00:02:56,080 --> 00:02:59,760
um so how does it work it's actually

78
00:02:57,840 --> 00:03:01,760
pretty simple you take your c c plus

79
00:02:59,760 --> 00:03:05,120
plus rust binary library

80
00:03:01,760 --> 00:03:08,079
mainly you cross compile that to wasn't

81
00:03:05,120 --> 00:03:09,280
using one 2032 as you target you get

82
00:03:08,080 --> 00:03:12,720
your was module with

83
00:03:09,280 --> 00:03:15,120
some exports defined on imports that

84
00:03:12,720 --> 00:03:15,840
the embedder or the runtime should

85
00:03:15,120 --> 00:03:17,280
provide

86
00:03:15,840 --> 00:03:18,879
you put that in the box which is the

87
00:03:17,280 --> 00:03:21,440
sandbox it could be

88
00:03:18,879 --> 00:03:23,518
awesome time or lucette now the tricky

89
00:03:21,440 --> 00:03:25,920
here the tricky bit here is that

90
00:03:23,519 --> 00:03:27,360
um if you don't give it any capabilities

91
00:03:25,920 --> 00:03:29,280
you can't really do anything except for

92
00:03:27,360 --> 00:03:31,760
for example read from student

93
00:03:29,280 --> 00:03:32,560
or right just two dollars to there um if

94
00:03:31,760 --> 00:03:34,560
you want to do

95
00:03:32,560 --> 00:03:35,920
something fancy with your wasm app you

96
00:03:34,560 --> 00:03:37,120
have to give it capability so for

97
00:03:35,920 --> 00:03:40,238
instance you could

98
00:03:37,120 --> 00:03:42,720
allow it access to the um workspace

99
00:03:40,239 --> 00:03:43,840
there under slash right you could give

100
00:03:42,720 --> 00:03:45,760
it access to the

101
00:03:43,840 --> 00:03:47,519
host entropy but all of this requires a

102
00:03:45,760 --> 00:03:49,920
capability because by default you don't

103
00:03:47,519 --> 00:03:51,440
get access to anything

104
00:03:49,920 --> 00:03:52,640
so for instance in this case we're going

105
00:03:51,440 --> 00:03:53,760
to give it access to workspace and

106
00:03:52,640 --> 00:03:54,559
entropy but we're not going to give it

107
00:03:53,760 --> 00:03:58,798
access to

108
00:03:54,560 --> 00:04:00,080
slash dev or clocks or in general time

109
00:03:58,799 --> 00:04:02,319
this way actually you know it's actually

110
00:04:00,080 --> 00:04:02,959
easier to give capabilities than take

111
00:04:02,319 --> 00:04:04,000
them away

112
00:04:02,959 --> 00:04:06,480
because you can always forget about

113
00:04:04,000 --> 00:04:09,280
something and things just happen um

114
00:04:06,480 --> 00:04:10,159
so to put it into into more context for

115
00:04:09,280 --> 00:04:13,040
instance

116
00:04:10,159 --> 00:04:13,599
oh by the way i'm using rust i hope um

117
00:04:13,040 --> 00:04:15,359
you know

118
00:04:13,599 --> 00:04:17,120
i'm not really a good c developer i

119
00:04:15,360 --> 00:04:18,959
email the user ask so sorry for this if

120
00:04:17,120 --> 00:04:22,160
you guys are not interested at all

121
00:04:18,959 --> 00:04:24,960
um so we can actually create a file in

122
00:04:22,160 --> 00:04:25,759
workspace directory we can access the

123
00:04:24,960 --> 00:04:28,880
entropy

124
00:04:25,759 --> 00:04:30,240
with run thread and rng but we cannot

125
00:04:28,880 --> 00:04:31,759
for example open devno

126
00:04:30,240 --> 00:04:33,680
because we don't have access to that by

127
00:04:31,759 --> 00:04:36,160
the capability so that's a logo

128
00:04:33,680 --> 00:04:37,360
and we also cannot call system time now

129
00:04:36,160 --> 00:04:40,160
because we're also lacking this

130
00:04:37,360 --> 00:04:40,880
so this is cool you can actually um run

131
00:04:40,160 --> 00:04:42,720
apps

132
00:04:40,880 --> 00:04:44,639
that you don't really trust because you

133
00:04:42,720 --> 00:04:46,080
can enforce some degree of security

134
00:04:44,639 --> 00:04:48,800
using capabilities

135
00:04:46,080 --> 00:04:50,400
okay so now what is the setting um the

136
00:04:48,800 --> 00:04:52,400
setting is fairly specific

137
00:04:50,400 --> 00:04:54,719
so i work for gollum factory um golem

138
00:04:52,400 --> 00:04:56,638
factory is trying to create uh

139
00:04:54,720 --> 00:04:58,639
it's a blockchain startup it's trying to

140
00:04:56,639 --> 00:05:00,000
create like a decentralized market for

141
00:04:58,639 --> 00:05:02,080
company where you can

142
00:05:00,000 --> 00:05:04,080
buy and and actually sell computation

143
00:05:02,080 --> 00:05:05,039
power you basically if you have a

144
00:05:04,080 --> 00:05:06,719
problem

145
00:05:05,039 --> 00:05:08,880
you call yourself a requester you want

146
00:05:06,720 --> 00:05:11,680
to basically do like a mapreduce

147
00:05:08,880 --> 00:05:12,800
kind of nap for the moment you write

148
00:05:11,680 --> 00:05:14,720
your task

149
00:05:12,800 --> 00:05:16,160
you then specify how it's meant to be

150
00:05:14,720 --> 00:05:18,880
divided into chunks

151
00:05:16,160 --> 00:05:20,479
and then as a provider so a person who's

152
00:05:18,880 --> 00:05:23,120
actually renting the computation power

153
00:05:20,479 --> 00:05:25,199
is going to compute that for you

154
00:05:23,120 --> 00:05:26,720
each part of the snap task uh the trick

155
00:05:25,199 --> 00:05:28,960
here is

156
00:05:26,720 --> 00:05:30,240
that obviously it's untrusted it's not

157
00:05:28,960 --> 00:05:32,400
like amazon

158
00:05:30,240 --> 00:05:33,520
aws or google cloud you don't really

159
00:05:32,400 --> 00:05:34,400
trust the note because you have no idea

160
00:05:33,520 --> 00:05:36,080
what they are

161
00:05:34,400 --> 00:05:38,000
so things can go wrong right they might

162
00:05:36,080 --> 00:05:39,280
have an incentive to lie to you or

163
00:05:38,000 --> 00:05:42,560
whatever

164
00:05:39,280 --> 00:05:43,440
so that's why was menwazi come come in

165
00:05:42,560 --> 00:05:44,720
handy

166
00:05:43,440 --> 00:05:47,520
because they give us some degree of

167
00:05:44,720 --> 00:05:49,039
security in the sense that you know

168
00:05:47,520 --> 00:05:50,479
even if you're a manager's requester and

169
00:05:49,039 --> 00:05:51,840
you're gonna do want to do something

170
00:05:50,479 --> 00:05:53,280
crazy

171
00:05:51,840 --> 00:05:55,119
you can actually with one's you can

172
00:05:53,280 --> 00:05:58,000
restrict what they're going to do

173
00:05:55,120 --> 00:05:58,880
so in golem you can actually one of the

174
00:05:58,000 --> 00:06:01,440
use cases that

175
00:05:58,880 --> 00:06:03,280
you can write your own was maps and then

176
00:06:01,440 --> 00:06:07,280
send them to the golem network

177
00:06:03,280 --> 00:06:08,799
now how it works currently um we compile

178
00:06:07,280 --> 00:06:10,559
you're allowed to compile your app to

179
00:06:08,800 --> 00:06:11,120
unscripted or you have to if you want to

180
00:06:10,560 --> 00:06:15,280
run it

181
00:06:11,120 --> 00:06:16,800
on golem um that is because when we

182
00:06:15,280 --> 00:06:18,559
started looking into this

183
00:06:16,800 --> 00:06:21,280
was it wasn't even announced yet that

184
00:06:18,560 --> 00:06:24,880
was end of

185
00:06:21,280 --> 00:06:25,758
2018 i think so i think wasmer started

186
00:06:24,880 --> 00:06:28,000
doing some stuff

187
00:06:25,759 --> 00:06:29,680
in the sense that they were trying to um

188
00:06:28,000 --> 00:06:30,240
take inscription and do something useful

189
00:06:29,680 --> 00:06:32,720
with it

190
00:06:30,240 --> 00:06:34,479
and we basically you know we were caught

191
00:06:32,720 --> 00:06:36,080
in this this wee bubble

192
00:06:34,479 --> 00:06:38,560
so we use some scripture to do our

193
00:06:36,080 --> 00:06:40,800
bidding um our sandbox is spider-monkey

194
00:06:38,560 --> 00:06:42,800
based so we took spider-monkey js engine

195
00:06:40,800 --> 00:06:44,720
and embedded that

196
00:06:42,800 --> 00:06:46,400
and essentially speaking you basically

197
00:06:44,720 --> 00:06:48,479
have to pre-load all the

198
00:06:46,400 --> 00:06:49,840
resources you want into memory and

199
00:06:48,479 --> 00:06:51,520
everything is in the host memory so

200
00:06:49,840 --> 00:06:52,799
that's also not ideal plus you have to

201
00:06:51,520 --> 00:06:54,639
deal with javascript

202
00:06:52,800 --> 00:06:56,319
so that's why when when wazio was

203
00:06:54,639 --> 00:06:58,319
announced was perfect because

204
00:06:56,319 --> 00:07:00,400
you know you don't have to deal with js

205
00:06:58,319 --> 00:07:04,080
and you don't you have a better way of

206
00:07:00,400 --> 00:07:04,080
tracking what capabilities you give

207
00:07:04,400 --> 00:07:09,359
so the other thing that's actually quite

208
00:07:07,520 --> 00:07:12,318
tricky and this is really tricky is

209
00:07:09,360 --> 00:07:14,560
if you send if you if you as a requester

210
00:07:12,319 --> 00:07:16,800
want to get something computed

211
00:07:14,560 --> 00:07:18,240
and the node is not trusted how the heck

212
00:07:16,800 --> 00:07:20,000
do you tell whether what they returned

213
00:07:18,240 --> 00:07:23,919
is valid or not

214
00:07:20,000 --> 00:07:25,680
right there is no trust so to speak so

215
00:07:23,919 --> 00:07:27,359
one of the ways of handling this

216
00:07:25,680 --> 00:07:28,960
automatically so that the user doesn't

217
00:07:27,360 --> 00:07:30,720
have to worry about this stuff

218
00:07:28,960 --> 00:07:32,400
is duplicating the work so we call this

219
00:07:30,720 --> 00:07:33,759
verification by redundancy and you can

220
00:07:32,400 --> 00:07:36,638
duplicate one task

221
00:07:33,759 --> 00:07:38,000
or subtasks a subtask into two send it

222
00:07:36,639 --> 00:07:39,360
to two different nodes and then compare

223
00:07:38,000 --> 00:07:40,160
the results but in order to compare the

224
00:07:39,360 --> 00:07:41,680
results

225
00:07:40,160 --> 00:07:43,280
you need determinism because otherwise

226
00:07:41,680 --> 00:07:44,800
you know if you want to do it bye bye

227
00:07:43,280 --> 00:07:46,719
bye which is the simplest way if you

228
00:07:44,800 --> 00:07:48,800
don't have determinism then good luck

229
00:07:46,720 --> 00:07:50,080
it's actually for every single use case

230
00:07:48,800 --> 00:07:51,440
or app you would have to come up with

231
00:07:50,080 --> 00:07:52,639
your own way of verifying which is just

232
00:07:51,440 --> 00:07:54,800
annoying

233
00:07:52,639 --> 00:07:56,960
um so this is where determinism

234
00:07:54,800 --> 00:08:00,960
requirement comes from

235
00:07:56,960 --> 00:08:02,479
and i know it's also useful for um um

236
00:08:00,960 --> 00:08:04,479
blockchain guys actually do the lower

237
00:08:02,479 --> 00:08:05,359
level stuff like smart contracts

238
00:08:04,479 --> 00:08:08,878
obviously there you

239
00:08:05,360 --> 00:08:10,960
you need determinism on all levels um

240
00:08:08,879 --> 00:08:12,000
right so is wisely deterministic

241
00:08:10,960 --> 00:08:14,159
unfortunately

242
00:08:12,000 --> 00:08:16,319
it's not uh there is actually many

243
00:08:14,160 --> 00:08:17,039
avenues which give you non-determinism

244
00:08:16,319 --> 00:08:20,800
and

245
00:08:17,039 --> 00:08:23,440
so wasm itself has certain things that

246
00:08:20,800 --> 00:08:26,240
might make it non-deterministic and with

247
00:08:23,440 --> 00:08:27,759
wazi we add even more things

248
00:08:26,240 --> 00:08:29,440
so one of the obvious ones is obviously

249
00:08:27,759 --> 00:08:31,199
access to random device

250
00:08:29,440 --> 00:08:32,559
and this is done with the cisco random

251
00:08:31,199 --> 00:08:34,320
get which

252
00:08:32,559 --> 00:08:36,319
under the hood should call something

253
00:08:34,320 --> 00:08:37,440
like get random to actually access the

254
00:08:36,320 --> 00:08:41,440
host

255
00:08:37,440 --> 00:08:43,519
entropy um so the good news is that with

256
00:08:41,440 --> 00:08:46,160
the upcoming snapshot

257
00:08:43,519 --> 00:08:47,040
which is in the works now in wazi this

258
00:08:46,160 --> 00:08:50,399
will get

259
00:08:47,040 --> 00:08:52,000
get it its own module like wasm module

260
00:08:50,399 --> 00:08:53,360
and will require a capability to be

261
00:08:52,000 --> 00:08:54,080
enabled so by default it's going to be

262
00:08:53,360 --> 00:08:56,160
disabled

263
00:08:54,080 --> 00:08:57,279
so this is good so one less thing to

264
00:08:56,160 --> 00:08:59,680
worry about

265
00:08:57,279 --> 00:09:00,720
the other one is system clocks same

266
00:08:59,680 --> 00:09:02,800
story as with

267
00:09:00,720 --> 00:09:04,640
random get currently is enabled by

268
00:09:02,800 --> 00:09:06,479
default which

269
00:09:04,640 --> 00:09:08,560
is essentially a spec bug but you know

270
00:09:06,480 --> 00:09:11,279
we were just specking that out

271
00:09:08,560 --> 00:09:12,079
um but in the future it's going to get

272
00:09:11,279 --> 00:09:14,240
its own

273
00:09:12,080 --> 00:09:15,120
module and will require capability so

274
00:09:14,240 --> 00:09:17,519
that's another thing

275
00:09:15,120 --> 00:09:18,640
now more subtle ones and those are the

276
00:09:17,519 --> 00:09:22,399
interesting ones

277
00:09:18,640 --> 00:09:25,920
are for example um the contents of

278
00:09:22,399 --> 00:09:27,680
file stat so this has almost

279
00:09:25,920 --> 00:09:29,439
direct mapping to what's happening on

280
00:09:27,680 --> 00:09:31,920
the host and

281
00:09:29,440 --> 00:09:32,560
uh file style file style returns things

282
00:09:31,920 --> 00:09:36,000
like the

283
00:09:32,560 --> 00:09:38,479
inode the file type and the worst thing

284
00:09:36,000 --> 00:09:39,519
is it's got access modification and

285
00:09:38,480 --> 00:09:43,440
control times

286
00:09:39,519 --> 00:09:44,959
and this is tricky it's not that easy

287
00:09:43,440 --> 00:09:47,680
you know you you wouldn't want if you

288
00:09:44,959 --> 00:09:49,279
want to keep it in

289
00:09:47,680 --> 00:09:50,719
wazi so that you can use it in your

290
00:09:49,279 --> 00:09:52,160
deterministic program you have to do

291
00:09:50,720 --> 00:09:54,240
some crazy stuff here like

292
00:09:52,160 --> 00:09:55,920
i don't know filtering out parts of the

293
00:09:54,240 --> 00:09:57,920
struct

294
00:09:55,920 --> 00:10:00,160
um i don't think sticking anything

295
00:09:57,920 --> 00:10:01,760
emulated inside or like random numbers

296
00:10:00,160 --> 00:10:03,600
or rather numbers like zero something is

297
00:10:01,760 --> 00:10:04,399
going to work so this will require some

298
00:10:03,600 --> 00:10:05,680
more time

299
00:10:04,399 --> 00:10:07,200
the easiest thing would be to just

300
00:10:05,680 --> 00:10:08,959
disable it somehow and we're going to

301
00:10:07,200 --> 00:10:12,320
get to that in a minute

302
00:10:08,959 --> 00:10:14,079
um this one is one of my favorites so

303
00:10:12,320 --> 00:10:15,680
something as useful as listing contents

304
00:10:14,079 --> 00:10:18,160
of a directory can give you

305
00:10:15,680 --> 00:10:20,399
a notion of non-determinism because

306
00:10:18,160 --> 00:10:22,719
guess what order of entries depending on

307
00:10:20,399 --> 00:10:25,519
the host powers of the file system used

308
00:10:22,720 --> 00:10:26,640
and so nobody make nobody makes any

309
00:10:25,519 --> 00:10:28,079
guarantees how are you going to get the

310
00:10:26,640 --> 00:10:29,600
results back

311
00:10:28,079 --> 00:10:31,279
so this is also tricky but it's also

312
00:10:29,600 --> 00:10:32,880
useful right because it's

313
00:10:31,279 --> 00:10:34,560
better if i give you just hey this is

314
00:10:32,880 --> 00:10:36,399
the directory just list the entries

315
00:10:34,560 --> 00:10:37,920
yourself rather than me explicitly

316
00:10:36,399 --> 00:10:41,200
passing everything to you

317
00:10:37,920 --> 00:10:42,079
that's no idea and actually the list is

318
00:10:41,200 --> 00:10:44,000
quite long

319
00:10:42,079 --> 00:10:46,000
i was surprised because i started with a

320
00:10:44,000 --> 00:10:47,920
couple and then

321
00:10:46,000 --> 00:10:50,959
people joined in and it turns out there

322
00:10:47,920 --> 00:10:52,719
is a lot of things that can go wrong

323
00:10:50,959 --> 00:10:54,800
so and i encourage invite you to

324
00:10:52,720 --> 00:10:57,279
actually join the discussion have a look

325
00:10:54,800 --> 00:10:58,880
um it's pretty good so the link is there

326
00:10:57,279 --> 00:11:01,360
is under webassembly ones the issues

327
00:10:58,880 --> 00:11:04,640
190.

328
00:11:01,360 --> 00:11:09,279
right so can we can we actually make

329
00:11:04,640 --> 00:11:13,120
wazi deterministic as it is now

330
00:11:09,279 --> 00:11:17,040
um so that was the question

331
00:11:13,120 --> 00:11:19,440
the answer is it's pretty much

332
00:11:17,040 --> 00:11:21,040
it's it's missing a couple of things but

333
00:11:19,440 --> 00:11:22,079
we can still deal with that in a hacky

334
00:11:21,040 --> 00:11:24,719
way but still

335
00:11:22,079 --> 00:11:26,000
so the model that i want to present

336
00:11:24,720 --> 00:11:28,160
today

337
00:11:26,000 --> 00:11:30,000
is very straightforward it's kind of

338
00:11:28,160 --> 00:11:31,199
like um you can think of it as delegated

339
00:11:30,000 --> 00:11:33,600
functions i guess

340
00:11:31,200 --> 00:11:35,600
it's basically um you export the

341
00:11:33,600 --> 00:11:37,839
function let's call it compute

342
00:11:35,600 --> 00:11:39,360
that takes in two was the file

343
00:11:37,839 --> 00:11:41,440
descriptors now i'm going to get into

344
00:11:39,360 --> 00:11:42,640
what the file descriptors and writes are

345
00:11:41,440 --> 00:11:45,440
in a minute

346
00:11:42,640 --> 00:11:46,000
and basically what we require here is

347
00:11:45,440 --> 00:11:47,680
that the

348
00:11:46,000 --> 00:11:50,160
input file descriptor only allows you to

349
00:11:47,680 --> 00:11:53,040
read from it so you can only read bytes

350
00:11:50,160 --> 00:11:53,920
and out you can only write bytes to it

351
00:11:53,040 --> 00:11:54,639
okay and that's it

352
00:11:53,920 --> 00:11:56,399
and because of the capability

353
00:11:54,639 --> 00:11:57,760
capability-based model we can actually

354
00:11:56,399 --> 00:12:01,040
enforce that

355
00:11:57,760 --> 00:12:04,160
um with with ease nowadays

356
00:12:01,040 --> 00:12:06,880
in in wazi okay so now what is the was

357
00:12:04,160 --> 00:12:08,959
the file descriptor it's

358
00:12:06,880 --> 00:12:11,920
it's an index into a table where we

359
00:12:08,959 --> 00:12:14,959
store capabilities or actually entries

360
00:12:11,920 --> 00:12:17,199
to the host resources so the simplest

361
00:12:14,959 --> 00:12:19,119
one is zero which

362
00:12:17,200 --> 00:12:20,720
it doesn't have to but normally points

363
00:12:19,120 --> 00:12:22,959
to standard input

364
00:12:20,720 --> 00:12:24,639
one to standard output to the standard

365
00:12:22,959 --> 00:12:26,079
error and then the rest is actually what

366
00:12:24,639 --> 00:12:28,240
you pre-open

367
00:12:26,079 --> 00:12:29,120
um so in what you call this pre-opening

368
00:12:28,240 --> 00:12:31,680
so for instance

369
00:12:29,120 --> 00:12:32,959
um under wasi file descriptor 11 you're

370
00:12:31,680 --> 00:12:35,439
going to store an entry

371
00:12:32,959 --> 00:12:36,638
which has quite a few fields but the

372
00:12:35,440 --> 00:12:39,600
most important

373
00:12:36,639 --> 00:12:39,839
ones are the actual always handle which

374
00:12:39,600 --> 00:12:42,160
is

375
00:12:39,839 --> 00:12:43,200
the um host specific handle to the

376
00:12:42,160 --> 00:12:46,319
resource

377
00:12:43,200 --> 00:12:48,480
on linux that would be a file descriptor

378
00:12:46,320 --> 00:12:49,680
on windows that would be a windows file

379
00:12:48,480 --> 00:12:51,680
handle for instance

380
00:12:49,680 --> 00:12:53,519
so it can be anything it can even be a

381
00:12:51,680 --> 00:12:56,560
socket and whatnot

382
00:12:53,519 --> 00:12:58,959
and you also have base rights

383
00:12:56,560 --> 00:13:00,719
and inheriting rates now base rights

384
00:12:58,959 --> 00:13:03,359
describe what you can actually do

385
00:13:00,720 --> 00:13:06,000
with the set file descriptor whether you

386
00:13:03,360 --> 00:13:07,200
can read from it you can write to it if

387
00:13:06,000 --> 00:13:10,399
you can

388
00:13:07,200 --> 00:13:12,000
ask for the file start etc etc

389
00:13:10,399 --> 00:13:13,760
on inheriting writes are a bit more

390
00:13:12,000 --> 00:13:16,000
tricky they are used

391
00:13:13,760 --> 00:13:17,439
they will be the base rights of any file

392
00:13:16,000 --> 00:13:18,639
descriptor that's being derived from

393
00:13:17,440 --> 00:13:21,040
this one

394
00:13:18,639 --> 00:13:22,160
so this is mainly useful in um if you do

395
00:13:21,040 --> 00:13:25,519
things like path open

396
00:13:22,160 --> 00:13:27,519
so if you um given a file descriptor to

397
00:13:25,519 --> 00:13:29,360
a directory you want to open

398
00:13:27,519 --> 00:13:30,959
a file under that directory right so

399
00:13:29,360 --> 00:13:33,920
this is going to get inheriting

400
00:13:30,959 --> 00:13:35,199
rights so in our case actually it's it's

401
00:13:33,920 --> 00:13:37,680
not really important but

402
00:13:35,200 --> 00:13:38,480
it's it's good to remember um right and

403
00:13:37,680 --> 00:13:41,519
then the

404
00:13:38,480 --> 00:13:42,399
wazi uh file descriptor right so as i

405
00:13:41,519 --> 00:13:44,800
said

406
00:13:42,399 --> 00:13:46,720
and this is a powerful concept so if if

407
00:13:44,800 --> 00:13:49,920
the file descriptor has got fd read

408
00:13:46,720 --> 00:13:50,880
you can only do two operations i think

409
00:13:49,920 --> 00:13:54,000
actually three

410
00:13:50,880 --> 00:13:56,560
you can also set rights anyway

411
00:13:54,000 --> 00:13:58,399
so you can do mainly fd read right but

412
00:13:56,560 --> 00:13:59,599
you cannot do for example fdp read which

413
00:13:58,399 --> 00:14:00,639
is with the offset because you don't

414
00:13:59,600 --> 00:14:02,560
have seek

415
00:14:00,639 --> 00:14:04,639
or tell which is pretty useful and you

416
00:14:02,560 --> 00:14:05,680
can do fdfts.get but this is this this

417
00:14:04,639 --> 00:14:07,600
is harmless because

418
00:14:05,680 --> 00:14:09,120
all it does it returns the information

419
00:14:07,600 --> 00:14:10,720
about what right it's got

420
00:14:09,120 --> 00:14:12,000
what what the file type is so that's

421
00:14:10,720 --> 00:14:14,079
perfect right and you can actually do it

422
00:14:12,000 --> 00:14:15,360
nowadays it's it's not no magic you can

423
00:14:14,079 --> 00:14:17,680
actually enforce that

424
00:14:15,360 --> 00:14:18,639
and the same with write you can invoke

425
00:14:17,680 --> 00:14:21,040
fdright

426
00:14:18,639 --> 00:14:22,560
to write bytes to a file descriptor and

427
00:14:21,040 --> 00:14:24,240
i want to emphasize the fact that

428
00:14:22,560 --> 00:14:25,599
file descriptor can be anything it's an

429
00:14:24,240 --> 00:14:27,199
abstract concept

430
00:14:25,600 --> 00:14:29,040
so you can point to any resource on the

431
00:14:27,199 --> 00:14:31,279
host and

432
00:14:29,040 --> 00:14:32,560
again fd.get right but nothing else and

433
00:14:31,279 --> 00:14:35,199
this is cool because this

434
00:14:32,560 --> 00:14:36,479
already weeds out all of the cisco's

435
00:14:35,199 --> 00:14:39,839
that use file descriptors

436
00:14:36,480 --> 00:14:42,639
and pass however as i said

437
00:14:39,839 --> 00:14:43,279
um so have we just achieved determinism

438
00:14:42,639 --> 00:14:47,120
almost

439
00:14:43,279 --> 00:14:48,880
because there's still this and nowadays

440
00:14:47,120 --> 00:14:50,959
unfortunately this is implicit so you

441
00:14:48,880 --> 00:14:54,000
get access to all of those

442
00:14:50,959 --> 00:14:55,518
um call it ambient security ambient

443
00:14:54,000 --> 00:14:57,360
authority or whatever right

444
00:14:55,519 --> 00:14:59,199
so you can actually call that and there

445
00:14:57,360 --> 00:15:02,560
is no way of um

446
00:14:59,199 --> 00:15:06,399
in a nice elegant way of enforcing

447
00:15:02,560 --> 00:15:08,638
the um at runtime not to do this

448
00:15:06,399 --> 00:15:10,480
there are hacks together to get around

449
00:15:08,639 --> 00:15:13,040
this and i'm going to show in a minute

450
00:15:10,480 --> 00:15:15,680
but um the good news is that this will

451
00:15:13,040 --> 00:15:19,040
get sorted with the upcoming snapshot

452
00:15:15,680 --> 00:15:21,680
when it stabilizes so

453
00:15:19,040 --> 00:15:22,160
um do you guys have any questions until

454
00:15:21,680 --> 00:15:27,839
now

455
00:15:22,160 --> 00:15:27,839
yeah hi martin by the way

456
00:15:33,759 --> 00:15:41,839
second if binary

457
00:15:44,720 --> 00:15:54,079
okay i'm not sure yet

458
00:15:50,720 --> 00:15:56,639
about checking those

459
00:15:54,079 --> 00:15:57,279
if you are importing the symbols sure

460
00:15:56,639 --> 00:15:59,279
sure but

461
00:15:57,279 --> 00:16:01,600
okay but there is no automatic mechanism

462
00:15:59,279 --> 00:16:01,600
actually

463
00:16:01,759 --> 00:16:05,360
all right so um i think what martin is

464
00:16:04,399 --> 00:16:08,079
asking is

465
00:16:05,360 --> 00:16:08,720
why can we not just check when importing

466
00:16:08,079 --> 00:16:12,160
the module

467
00:16:08,720 --> 00:16:13,360
if it's um importing if we're importing

468
00:16:12,160 --> 00:16:14,880
the function random get right

469
00:16:13,360 --> 00:16:16,480
yeah yeah exactly and this is my hack

470
00:16:14,880 --> 00:16:18,800
but um it's a hack right

471
00:16:16,480 --> 00:16:20,480
so no no that's a good question um but

472
00:16:18,800 --> 00:16:21,359
the nice way an elegant way is actually

473
00:16:20,480 --> 00:16:22,399
if you can do that

474
00:16:21,360 --> 00:16:24,720
you know when you have the runtime

475
00:16:22,399 --> 00:16:26,800
spinning you just say like

476
00:16:24,720 --> 00:16:28,560
then you will say import this or include

477
00:16:26,800 --> 00:16:29,839
this module but nowadays you can do this

478
00:16:28,560 --> 00:16:31,920
and that's the elegant way but that's an

479
00:16:29,839 --> 00:16:34,959
excellent question yes so

480
00:16:31,920 --> 00:16:37,839
um any more questions on this or can we

481
00:16:34,959 --> 00:16:37,839
move on to the examples

482
00:16:39,120 --> 00:16:42,560
are we good on time by the way yes we're

483
00:16:41,360 --> 00:16:46,480
good cool

484
00:16:42,560 --> 00:16:46,959
so um when i was trying to figure this

485
00:16:46,480 --> 00:16:50,000
out

486
00:16:46,959 --> 00:16:51,439
i prepared like a short set of examples

487
00:16:50,000 --> 00:16:52,800
some of them very simple one of them

488
00:16:51,440 --> 00:16:54,480
actually a bit more complicated to see

489
00:16:52,800 --> 00:16:55,359
like a proof concept to see whether this

490
00:16:54,480 --> 00:16:56,560
would actually work

491
00:16:55,360 --> 00:16:58,800
and this is exactly what martin was

492
00:16:56,560 --> 00:17:01,040
suggesting i added that as well so

493
00:16:58,800 --> 00:17:02,319
um you can find them on my github under

494
00:17:01,040 --> 00:17:03,920
coupon wazi compute

495
00:17:02,320 --> 00:17:05,520
and there is the description how to

496
00:17:03,920 --> 00:17:08,319
compile it using rust

497
00:17:05,520 --> 00:17:09,280
current rust and etc etc um there are

498
00:17:08,319 --> 00:17:11,520
three examples

499
00:17:09,280 --> 00:17:12,959
the first one is hello compute it's that

500
00:17:11,520 --> 00:17:15,599
easy you read from

501
00:17:12,959 --> 00:17:16,720
an input file descriptor the upper case

502
00:17:15,599 --> 00:17:18,799
and then write out

503
00:17:16,720 --> 00:17:20,640
just to test that it actually works the

504
00:17:18,799 --> 00:17:24,400
second one is to verify that

505
00:17:20,640 --> 00:17:26,319
indeed the two fds have the right rights

506
00:17:24,400 --> 00:17:28,240
and the third one the a little bit more

507
00:17:26,319 --> 00:17:29,678
tricky is actually taking something some

508
00:17:28,240 --> 00:17:32,080
existing library in this case

509
00:17:29,679 --> 00:17:33,039
uh flight text to speed library or

510
00:17:32,080 --> 00:17:35,199
engine

511
00:17:33,039 --> 00:17:36,080
um so what i did i pre-compiled that

512
00:17:35,200 --> 00:17:39,520
from c

513
00:17:36,080 --> 00:17:41,199
to um to as the object and i included

514
00:17:39,520 --> 00:17:42,480
them for convenience in the repo and

515
00:17:41,200 --> 00:17:43,919
then you can actually statically link

516
00:17:42,480 --> 00:17:45,360
that into your

517
00:17:43,919 --> 00:17:47,520
into this example and it's going to

518
00:17:45,360 --> 00:17:51,360
create like a compute function that does

519
00:17:47,520 --> 00:17:52,240
flight not using a binary as such but

520
00:17:51,360 --> 00:17:53,199
actually it's going to create this

521
00:17:52,240 --> 00:17:55,039
deterministic

522
00:17:53,200 --> 00:17:57,039
function compute that that allows you to

523
00:17:55,039 --> 00:17:59,039
read in the text input

524
00:17:57,039 --> 00:18:02,000
and then write it as a wav file and it

525
00:17:59,039 --> 00:18:03,919
works i'm not sure

526
00:18:02,000 --> 00:18:05,600
i can maybe i'll be able to demonstrate

527
00:18:03,919 --> 00:18:08,240
this but anyway so um

528
00:18:05,600 --> 00:18:08,799
feel free to to have fun with this break

529
00:18:08,240 --> 00:18:12,799
it

530
00:18:08,799 --> 00:18:14,400
um play with it right um so

531
00:18:12,799 --> 00:18:16,799
since we've got some time and it's

532
00:18:14,400 --> 00:18:18,320
perfect um

533
00:18:16,799 --> 00:18:20,000
we can actu i can actually show you some

534
00:18:18,320 --> 00:18:22,799
some of this stuff

535
00:18:20,000 --> 00:18:24,480
um now i got rid of most of the the

536
00:18:22,799 --> 00:18:25,840
things so that we can actually do it

537
00:18:24,480 --> 00:18:28,320
live here can you actually see this or

538
00:18:25,840 --> 00:18:30,000
is it too small it's okay or should i

539
00:18:28,320 --> 00:18:33,439
make it bigger

540
00:18:30,000 --> 00:18:33,440
okay bigger

541
00:18:36,000 --> 00:18:45,360
is it better yeah cool right so um

542
00:18:42,960 --> 00:18:46,320
uh yes this is a bit tricky and there

543
00:18:45,360 --> 00:18:49,760
was some discussion

544
00:18:46,320 --> 00:18:52,559
about this on the quasi discord lately

545
00:18:49,760 --> 00:18:54,400
um wazi still implicitly assumes that

546
00:18:52,559 --> 00:18:56,720
you're gonna define your main

547
00:18:54,400 --> 00:18:58,720
so that the main entry point to us is

548
00:18:56,720 --> 00:19:00,640
underscore start

549
00:18:58,720 --> 00:19:02,000
that is true and because yz is mainly

550
00:19:00,640 --> 00:19:04,160
based upon on on

551
00:19:02,000 --> 00:19:05,360
on the concept of libreopen and file

552
00:19:04,160 --> 00:19:06,559
system and you know that you actually

553
00:19:05,360 --> 00:19:07,280
pre-open the directory and then you

554
00:19:06,559 --> 00:19:10,879
insert some

555
00:19:07,280 --> 00:19:12,639
stuff into it um if you do it my way

556
00:19:10,880 --> 00:19:15,120
this stuff is not going to work because

557
00:19:12,640 --> 00:19:16,720
um essentially using lip c here

558
00:19:15,120 --> 00:19:18,639
doesn't make any sense you basically

559
00:19:16,720 --> 00:19:20,080
call the ciscos directly so it's like

560
00:19:18,640 --> 00:19:21,919
kind of like lower level

561
00:19:20,080 --> 00:19:23,840
um and all we do here we actually export

562
00:19:21,919 --> 00:19:25,280
compute and that's it so that's why in

563
00:19:23,840 --> 00:19:26,639
rust you need to know mangle because

564
00:19:25,280 --> 00:19:28,639
we can't afford mangling right we

565
00:19:26,640 --> 00:19:31,440
actually need to be able to read it

566
00:19:28,640 --> 00:19:32,240
uh without mangling the name pub extern

567
00:19:31,440 --> 00:19:35,440
c

568
00:19:32,240 --> 00:19:36,720
and then we have um in as the input was

569
00:19:35,440 --> 00:19:38,640
the file descriptor and out as the

570
00:19:36,720 --> 00:19:40,720
output was the file descriptor

571
00:19:38,640 --> 00:19:43,360
um and right and what martin martin was

572
00:19:40,720 --> 00:19:45,760
saying and so i modified wasn't i'm

573
00:19:43,360 --> 00:19:46,799
just a little bit so that i'm actually

574
00:19:45,760 --> 00:19:49,919
blacklisting

575
00:19:46,799 --> 00:19:50,799
um random gets and all the fiscals that

576
00:19:49,919 --> 00:19:52,880
can cause

577
00:19:50,799 --> 00:19:54,160
non-determinism so they're not there and

578
00:19:52,880 --> 00:19:56,480
if if you try if

579
00:19:54,160 --> 00:19:57,280
you do it at home or after this and you

580
00:19:56,480 --> 00:19:59,520
want

581
00:19:57,280 --> 00:20:01,200
just check it try to invoke it and it

582
00:19:59,520 --> 00:20:01,760
should panic basically it should trap

583
00:20:01,200 --> 00:20:06,240
because

584
00:20:01,760 --> 00:20:08,080
the import is not there um

585
00:20:06,240 --> 00:20:09,520
and the next thing is there's also a

586
00:20:08,080 --> 00:20:10,799
manual for this how well you're going to

587
00:20:09,520 --> 00:20:13,200
see how we're going to run it

588
00:20:10,799 --> 00:20:15,679
basically you specif added like two

589
00:20:13,200 --> 00:20:19,039
flags to russian time that allow you to

590
00:20:15,679 --> 00:20:20,080
open um basically assign a resource to a

591
00:20:19,039 --> 00:20:22,240
descriptor directly

592
00:20:20,080 --> 00:20:23,918
so you don't because currently the way

593
00:20:22,240 --> 00:20:24,799
it works is that you can pre-open

594
00:20:23,919 --> 00:20:26,400
directories

595
00:20:24,799 --> 00:20:28,960
but what i did i tweaked it a little bit

596
00:20:26,400 --> 00:20:30,400
like they can pre-open files

597
00:20:28,960 --> 00:20:32,080
and actually reduce the rights to either

598
00:20:30,400 --> 00:20:34,080
read or write and that's it okay

599
00:20:32,080 --> 00:20:35,520
so that this this this actually works

600
00:20:34,080 --> 00:20:37,918
right so um

601
00:20:35,520 --> 00:20:38,879
so that as i said the hello was meant to

602
00:20:37,919 --> 00:20:41,919
basically open

603
00:20:38,880 --> 00:20:44,960
in read from it uppercase and then right

604
00:20:41,919 --> 00:20:46,960
out um so very quickly uh we're going to

605
00:20:44,960 --> 00:20:51,280
create some temporary buffer here

606
00:20:46,960 --> 00:20:52,159
um let's say a thousand obviously you do

607
00:20:51,280 --> 00:20:54,720
it in a different

608
00:20:52,159 --> 00:20:55,440
more like safer way but we don't care

609
00:20:54,720 --> 00:20:58,559
about this

610
00:20:55,440 --> 00:21:02,799
here now um the thing you need

611
00:20:58,559 --> 00:21:05,840
to actually read from fd read

612
00:21:02,799 --> 00:21:10,480
is an array of iov extracts

613
00:21:05,840 --> 00:21:12,639
in in in wazi so

614
00:21:10,480 --> 00:21:13,760
this is iovec and then it requires a

615
00:21:12,640 --> 00:21:16,960
pointer to the buffer

616
00:21:13,760 --> 00:21:18,480
in which case

617
00:21:16,960 --> 00:21:20,720
that's going to be buff and then we're

618
00:21:18,480 --> 00:21:24,159
going to take

619
00:21:20,720 --> 00:21:30,799
pointer out of sorry out of this

620
00:21:24,159 --> 00:21:33,840
and then also the length

621
00:21:30,799 --> 00:21:35,840
okay so now basically um

622
00:21:33,840 --> 00:21:37,600
we basically pack the buffer into a was

623
00:21:35,840 --> 00:21:38,399
extract that we can then pass into fd

624
00:21:37,600 --> 00:21:40,799
read and we

625
00:21:38,400 --> 00:21:42,840
in the contents into it so then what we

626
00:21:40,799 --> 00:21:46,559
do

627
00:21:42,840 --> 00:21:50,480
um we call and this is unsafe

628
00:21:46,559 --> 00:21:52,080
for obvious reasons um we call the fd

629
00:21:50,480 --> 00:21:54,159
read cisco

630
00:21:52,080 --> 00:21:55,360
which basically takes the input file

631
00:21:54,159 --> 00:21:58,080
descriptor in this case

632
00:21:55,360 --> 00:21:59,600
are in actually if you call it without

633
00:21:58,080 --> 00:22:00,799
it's going to trip immediately because

634
00:21:59,600 --> 00:22:02,559
we don't have the fd

635
00:22:00,799 --> 00:22:04,000
right or the input file descriptor which

636
00:22:02,559 --> 00:22:05,678
is exactly what we want we would we just

637
00:22:04,000 --> 00:22:08,960
want like a one-way

638
00:22:05,679 --> 00:22:11,120
stream right and there we

639
00:22:08,960 --> 00:22:13,120
create the array of i of x in this case

640
00:22:11,120 --> 00:22:15,760
it's only one

641
00:22:13,120 --> 00:22:18,399
and that's it so this is going to read

642
00:22:15,760 --> 00:22:20,240
the contents of whatever we point at

643
00:22:18,400 --> 00:22:21,520
with input as the file descriptor into

644
00:22:20,240 --> 00:22:25,520
the buffer

645
00:22:21,520 --> 00:22:28,639
then what we do let us

646
00:22:25,520 --> 00:22:32,320
actually do the upper case

647
00:22:28,640 --> 00:22:35,360
um so this is from utf-8

648
00:22:32,320 --> 00:22:37,120
oh and i should probably have that

649
00:22:35,360 --> 00:22:38,559
yeah you should probably do like the

650
00:22:37,120 --> 00:22:40,320
proper error handling here but i'm not

651
00:22:38,559 --> 00:22:43,520
going to even bother with this

652
00:22:40,320 --> 00:22:43,520
so from utf-8

653
00:22:43,760 --> 00:22:47,919
and that is going to be the slice we

654
00:22:45,600 --> 00:22:53,120
just read into

655
00:22:47,919 --> 00:22:54,960
oops above and then however much we read

656
00:22:53,120 --> 00:22:56,479
and then unwrap and then we can do two

657
00:22:54,960 --> 00:22:59,039
uppercase

658
00:22:56,480 --> 00:23:01,200
okay so that should be to uppercase then

659
00:22:59,039 --> 00:23:04,000
unfortunately we need to create

660
00:23:01,200 --> 00:23:06,840
uh a ci of extract which is used for

661
00:23:04,000 --> 00:23:08,720
actually writing out

662
00:23:06,840 --> 00:23:11,280
nyzi

663
00:23:08,720 --> 00:23:12,159
it's it's pretty much exactly the same

664
00:23:11,280 --> 00:23:13,840
as the iovac

665
00:23:12,159 --> 00:23:17,679
in this except for the fact that the

666
00:23:13,840 --> 00:23:21,678
pointer is is const it's not mutable

667
00:23:17,679 --> 00:23:24,320
um oh and it's not this isn't actually

668
00:23:21,679 --> 00:23:24,320
two string

669
00:23:26,320 --> 00:23:32,000
and we just call

670
00:23:32,159 --> 00:23:40,240
this cisco which is um

671
00:23:37,360 --> 00:23:40,240
let's see i work

672
00:23:43,520 --> 00:23:47,120
and that's it um so that's the first

673
00:23:46,159 --> 00:23:49,840
example basically

674
00:23:47,120 --> 00:23:50,719
reason uppercases it and writes out any

675
00:23:49,840 --> 00:23:53,678
questions

676
00:23:50,720 --> 00:23:53,679
on this yeah

677
00:23:59,440 --> 00:24:03,360
no but again if we were doing like a

678
00:24:01,760 --> 00:24:05,600
library out of this then yeah that

679
00:24:03,360 --> 00:24:07,279
actually would even make sense to to

680
00:24:05,600 --> 00:24:07,678
create something like lipsy that would

681
00:24:07,279 --> 00:24:10,960
be

682
00:24:07,679 --> 00:24:12,320
up above the the raw ciscos like i don't

683
00:24:10,960 --> 00:24:13,600
know stream end stream out

684
00:24:12,320 --> 00:24:14,960
thing but you know i didn't have time to

685
00:24:13,600 --> 00:24:16,480
actually do this so yeah that would be a

686
00:24:14,960 --> 00:24:18,159
great idea to actually have a from or

687
00:24:16,480 --> 00:24:21,039
try from or whatever right

688
00:24:18,159 --> 00:24:21,520
so having this let's try and compile

689
00:24:21,039 --> 00:24:25,120
this

690
00:24:21,520 --> 00:24:26,559
um oh i highly recommend cargo azito

691
00:24:25,120 --> 00:24:27,840
that was written by alex stratton it's

692
00:24:26,559 --> 00:24:29,200
great

693
00:24:27,840 --> 00:24:30,720
actually saves you a lot of hassle with

694
00:24:29,200 --> 00:24:32,400
passing in targets and stuff you can

695
00:24:30,720 --> 00:24:35,679
even do testing

696
00:24:32,400 --> 00:24:37,600
so i'm going to actually use um

697
00:24:35,679 --> 00:24:38,960
nightly because i know that nightly is

698
00:24:37,600 --> 00:24:39,840
up to date with the current snapshot for

699
00:24:38,960 --> 00:24:41,600
wazing rust

700
00:24:39,840 --> 00:24:43,760
i'm not sure whether stable co-op yet or

701
00:24:41,600 --> 00:24:46,799
not but you can have a look

702
00:24:43,760 --> 00:24:47,440
so this is going to build it oh it's

703
00:24:46,799 --> 00:24:50,720
going to be all

704
00:24:47,440 --> 00:24:54,080
yeah okay let's go into

705
00:24:50,720 --> 00:24:57,840
hello compute right so

706
00:24:54,080 --> 00:24:58,960
it built it in target we have the hello

707
00:24:57,840 --> 00:25:03,520
compute wasm

708
00:24:58,960 --> 00:25:07,200
right so now about the invocation um

709
00:25:03,520 --> 00:25:08,799
so i'm gonna do this with tracing on so

710
00:25:07,200 --> 00:25:12,240
you can actually have a look what this

711
00:25:08,799 --> 00:25:14,400
the uh execute what the call

712
00:25:12,240 --> 00:25:15,360
sequence is for the ciscos as well so

713
00:25:14,400 --> 00:25:17,679
this should be this is

714
00:25:15,360 --> 00:25:19,120
useful for tracking what's going on

715
00:25:17,679 --> 00:25:20,480
sometimes not enough sometimes you have

716
00:25:19,120 --> 00:25:22,399
to add some debugging because

717
00:25:20,480 --> 00:25:24,400
there's too much stuff going on but for

718
00:25:22,400 --> 00:25:27,679
this for starters this is pretty good

719
00:25:24,400 --> 00:25:30,559
um so the flags i added

720
00:25:27,679 --> 00:25:31,679
are pre-open read which is going to take

721
00:25:30,559 --> 00:25:33,039
some input file in

722
00:25:31,679 --> 00:25:35,200
which i haven't created yet so this

723
00:25:33,039 --> 00:25:36,720
should actually shout at me

724
00:25:35,200 --> 00:25:38,320
and this is going to use that as the

725
00:25:36,720 --> 00:25:39,919
stream button and then pre-out

726
00:25:38,320 --> 00:25:42,080
pre-open write which is basically going

727
00:25:39,919 --> 00:25:45,279
to save it to a file out and that's it

728
00:25:42,080 --> 00:25:47,360
and i'm going to use the experimental

729
00:25:45,279 --> 00:25:50,240
argument invoke for wasn't time which

730
00:25:47,360 --> 00:25:53,600
basically allows you to

731
00:25:50,240 --> 00:25:54,559
instead of running start of the wazi

732
00:25:53,600 --> 00:25:56,000
module

733
00:25:54,559 --> 00:25:57,600
it allows you to basically run any

734
00:25:56,000 --> 00:25:59,039
export

735
00:25:57,600 --> 00:26:00,719
okay and that's it there is there's

736
00:25:59,039 --> 00:26:01,279
absolutely nothing there oh and because

737
00:26:00,720 --> 00:26:04,960
our

738
00:26:01,279 --> 00:26:04,960
function requires um

739
00:26:05,120 --> 00:26:08,239
input file descriptors we're going to

740
00:26:06,799 --> 00:26:11,279
pass them

741
00:26:08,240 --> 00:26:12,240
as the last arguments so okay that's

742
00:26:11,279 --> 00:26:17,120
pretty good

743
00:26:12,240 --> 00:26:21,760
so we indeed haven't passed in the um

744
00:26:17,120 --> 00:26:24,479
anything okay so we have we have this

745
00:26:21,760 --> 00:26:25,520
and when we run it there is a lot of

746
00:26:24,480 --> 00:26:28,799
stuff happening here

747
00:26:25,520 --> 00:26:31,360
the first bits are not really that

748
00:26:28,799 --> 00:26:32,720
important um for us now is basically

749
00:26:31,360 --> 00:26:33,439
telling you that it's inserting certain

750
00:26:32,720 --> 00:26:35,120
pre-opens

751
00:26:33,440 --> 00:26:36,960
into the wazi context which is basically

752
00:26:35,120 --> 00:26:40,239
the stable that we're talking about

753
00:26:36,960 --> 00:26:42,400
one of them is fd11

754
00:26:40,240 --> 00:26:45,039
and fd12 should be somewhere here but i

755
00:26:42,400 --> 00:26:47,679
can see maybe it's ld10

756
00:26:45,039 --> 00:26:48,080
anyway so there we have fd read and it

757
00:26:47,679 --> 00:26:51,520
read

758
00:26:48,080 --> 00:26:53,360
20 20 bytes should be about right

759
00:26:51,520 --> 00:26:55,039
and then it should write out the same

760
00:26:53,360 --> 00:26:56,799
amount okay

761
00:26:55,039 --> 00:26:58,400
even though the buffer was a thousand so

762
00:26:56,799 --> 00:27:01,360
we can test that

763
00:26:58,400 --> 00:27:01,760
and yeah there you go so this works um

764
00:27:01,360 --> 00:27:04,639
if

765
00:27:01,760 --> 00:27:05,440
we tried so we can this is kind of cool

766
00:27:04,640 --> 00:27:08,480
because you can

767
00:27:05,440 --> 00:27:11,120
you can play with it now and if you try

768
00:27:08,480 --> 00:27:11,120
to call

769
00:27:11,840 --> 00:27:17,279
something crazy right like actually

770
00:27:14,320 --> 00:27:17,279
random get

771
00:27:17,760 --> 00:27:21,840
uh it's mutable right here

772
00:27:22,559 --> 00:27:25,039
and

773
00:27:25,840 --> 00:27:30,158
yep wrap

774
00:27:33,200 --> 00:27:40,640
okay cool um so this should not work

775
00:27:37,760 --> 00:27:40,640
let's have a look

776
00:27:42,960 --> 00:27:46,720
right yeah so i guess this is what

777
00:27:45,919 --> 00:27:48,640
martin was

778
00:27:46,720 --> 00:27:51,360
was suggesting here basically the input

779
00:27:48,640 --> 00:27:53,039
random guide is not found in the module

780
00:27:51,360 --> 00:27:54,639
so you can actually do that now it's but

781
00:27:53,039 --> 00:27:56,879
it's not it's not clean right

782
00:27:54,640 --> 00:27:58,480
you'd have to maintain your own runtime

783
00:27:56,880 --> 00:28:00,000
and i'd like to avoid this i'd like

784
00:27:58,480 --> 00:28:01,520
everything to be

785
00:28:00,000 --> 00:28:03,440
like according to the spec that'd be

786
00:28:01,520 --> 00:28:05,520
amazing right um

787
00:28:03,440 --> 00:28:07,760
so the next thing i wanted to show very

788
00:28:05,520 --> 00:28:09,360
briefly is actually

789
00:28:07,760 --> 00:28:11,520
um i'm not going to write that out

790
00:28:09,360 --> 00:28:12,240
myself so that's the test that you can

791
00:28:11,520 --> 00:28:14,000
find

792
00:28:12,240 --> 00:28:15,279
the the test example that i can find

793
00:28:14,000 --> 00:28:18,240
actually in the repo

794
00:28:15,279 --> 00:28:21,039
um essentially it doesn't do anything

795
00:28:18,240 --> 00:28:23,360
complicated it basically calls fdmv.get

796
00:28:21,039 --> 00:28:24,559
on the file descriptor and then we can

797
00:28:23,360 --> 00:28:26,879
actually compare

798
00:28:24,559 --> 00:28:28,879
the the right space so we're expecting

799
00:28:26,880 --> 00:28:30,720
the editing to be zero

800
00:28:28,880 --> 00:28:32,159
for the input file descriptor we want

801
00:28:30,720 --> 00:28:34,399
the wazi writes

802
00:28:32,159 --> 00:28:35,440
um to be read only so this is what he

803
00:28:34,399 --> 00:28:38,639
writes that we read

804
00:28:35,440 --> 00:28:45,840
and for out to be right at the right so

805
00:28:38,640 --> 00:28:45,840
if we run this

806
00:28:50,000 --> 00:28:53,360
yeah it's fine right everything was

807
00:28:51,600 --> 00:28:55,840
success you can see it here

808
00:28:53,360 --> 00:28:56,879
and here and then output is zero so that

809
00:28:55,840 --> 00:28:58,639
means no errors

810
00:28:56,880 --> 00:29:00,559
so the the rights are there and they're

811
00:28:58,640 --> 00:29:04,000
properly constrained

812
00:29:00,559 --> 00:29:06,320
so for the for the most complicated

813
00:29:04,000 --> 00:29:09,360
example

814
00:29:06,320 --> 00:29:09,760
um there is a slightly bit more code

815
00:29:09,360 --> 00:29:11,918
here

816
00:29:09,760 --> 00:29:14,158
so this is actually taking the sea

817
00:29:11,919 --> 00:29:16,159
library and um

818
00:29:14,159 --> 00:29:17,600
adds rust droppers on top of it and

819
00:29:16,159 --> 00:29:20,320
actually you can do the flight i'm

820
00:29:17,600 --> 00:29:22,719
wondering i wonder if i can

821
00:29:20,320 --> 00:29:23,678
show you that actually works um so i'm

822
00:29:22,720 --> 00:29:24,720
not

823
00:29:23,679 --> 00:29:26,559
going to bother actually going through

824
00:29:24,720 --> 00:29:27,679
this code because there's quite a lot of

825
00:29:26,559 --> 00:29:29,918
it's very very

826
00:29:27,679 --> 00:29:30,880
um flight specific just trying to you

827
00:29:29,919 --> 00:29:32,640
know hook in the

828
00:29:30,880 --> 00:29:34,159
c library and rust and basically just

829
00:29:32,640 --> 00:29:35,760
invoke it that's it there's

830
00:29:34,159 --> 00:29:38,399
ops is no magic there it still follows

831
00:29:35,760 --> 00:29:40,000
the same architecture that you read in

832
00:29:38,399 --> 00:29:42,158
you do some processing and then you

833
00:29:40,000 --> 00:29:47,120
write out um

834
00:29:42,159 --> 00:29:47,120
so i wonder if i can show you guys

835
00:29:50,399 --> 00:29:54,799
all right so now out should be a wav

836
00:29:52,559 --> 00:29:57,200
file and it is

837
00:29:54,799 --> 00:29:59,918
i'm actually going to move that to

838
00:29:57,200 --> 00:29:59,919
should be easier

839
00:30:00,240 --> 00:30:09,840
right then i have right

840
00:30:08,320 --> 00:30:12,080
forgive me for this and we'll see if it

841
00:30:09,840 --> 00:30:12,080
works

842
00:30:15,200 --> 00:30:19,360
hello how are you right so it actually

843
00:30:17,760 --> 00:30:20,879
works right so you can actually do

844
00:30:19,360 --> 00:30:22,639
sorry you can actually do some more

845
00:30:20,880 --> 00:30:24,640
complicated stuff with this as well

846
00:30:22,640 --> 00:30:26,000
obviously this is just an experimental

847
00:30:24,640 --> 00:30:29,120
thing so

848
00:30:26,000 --> 00:30:29,919
it's meant to break um but i guess it's

849
00:30:29,120 --> 00:30:32,559
a good start

850
00:30:29,919 --> 00:30:37,840
and we can build from there so going

851
00:30:32,559 --> 00:30:37,840
back to this

852
00:30:39,679 --> 00:30:45,120
right so um any questions

853
00:30:43,679 --> 00:30:47,520
because i think like five minutes left

854
00:30:45,120 --> 00:30:47,520
or something

855
00:30:52,159 --> 00:31:05,679
thank you very much thank you

