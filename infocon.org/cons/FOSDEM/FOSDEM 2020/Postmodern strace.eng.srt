1
00:00:05,120 --> 00:00:09,440
hello everybody

2
00:00:07,040 --> 00:00:12,160
uh thank you for coming my name is

3
00:00:09,440 --> 00:00:15,120
dimitri levin

4
00:00:12,160 --> 00:00:16,400
i am the chief software architect at

5
00:00:15,120 --> 00:00:19,359
result where we do

6
00:00:16,400 --> 00:00:19,759
genuinely gnoll linux separating system

7
00:00:19,359 --> 00:00:22,560
but

8
00:00:19,760 --> 00:00:23,519
i'm also the maintainer of stress for

9
00:00:22,560 --> 00:00:26,960
the last

10
00:00:23,519 --> 00:00:29,919
slightly more than last 10 years so

11
00:00:26,960 --> 00:00:30,960
today i'll be talking about postmodern

12
00:00:29,920 --> 00:00:34,160
estres

13
00:00:30,960 --> 00:00:37,200
are what is postmodernist race

14
00:00:34,160 --> 00:00:37,919
i used to talk about modernist race last

15
00:00:37,200 --> 00:00:42,000
year

16
00:00:37,920 --> 00:00:45,039
so i understood that i can

17
00:00:42,000 --> 00:00:46,879
name it modern stress

18
00:00:45,039 --> 00:00:48,239
any longer if i'm talking about

19
00:00:46,879 --> 00:00:51,199
variation features

20
00:00:48,239 --> 00:00:53,360
so where where traditional stress ends

21
00:00:51,199 --> 00:00:56,079
and modern stress begins

22
00:00:53,360 --> 00:00:56,719
and when modern stress ends well more

23
00:00:56,079 --> 00:00:58,879
stress

24
00:00:56,719 --> 00:01:00,239
modernist never ends so when it turns

25
00:00:58,879 --> 00:01:03,760
into postmodern

26
00:01:00,239 --> 00:01:06,399
uh well it's kind of

27
00:01:03,760 --> 00:01:07,119
subjective so well my definition is very

28
00:01:06,400 --> 00:01:10,960
simple

29
00:01:07,119 --> 00:01:12,560
that the stress that was before i

30
00:01:10,960 --> 00:01:15,439
started maintaining it

31
00:01:12,560 --> 00:01:16,320
it's traditional and all the rest is

32
00:01:15,439 --> 00:01:19,679
modern

33
00:01:16,320 --> 00:01:22,798
and yeah so here it goes

34
00:01:19,680 --> 00:01:25,280
and uh well postmodern is

35
00:01:22,799 --> 00:01:27,119
all new features since the last talk at

36
00:01:25,280 --> 00:01:30,560
first them

37
00:01:27,119 --> 00:01:33,680
so i'll be covering mostly what have

38
00:01:30,560 --> 00:01:35,600
changed for the last two years

39
00:01:33,680 --> 00:01:37,360
but i'll remind you briefly about

40
00:01:35,600 --> 00:01:41,039
additional features

41
00:01:37,360 --> 00:01:44,640
just to to refresh

42
00:01:41,040 --> 00:01:47,520
these switches in your memory so

43
00:01:44,640 --> 00:01:48,320
stress is a mostly linux system called

44
00:01:47,520 --> 00:01:51,280
tracer

45
00:01:48,320 --> 00:01:52,880
it also can not just trace but trumpet

46
00:01:51,280 --> 00:01:56,240
the system calls since

47
00:01:52,880 --> 00:01:59,759
like several years ago

48
00:01:56,240 --> 00:02:01,520
but it has a lot of options to control

49
00:01:59,759 --> 00:02:04,079
its behavior in different ways

50
00:02:01,520 --> 00:02:06,079
like whether it prints instruction

51
00:02:04,079 --> 00:02:06,719
pointers whether it prints timestamps or

52
00:02:06,079 --> 00:02:09,758
not

53
00:02:06,719 --> 00:02:12,480
how it prints strings what

54
00:02:09,758 --> 00:02:13,359
system calls are printed and which way

55
00:02:12,480 --> 00:02:16,720
they are printed

56
00:02:13,360 --> 00:02:19,840
what's abbreviated and what's not

57
00:02:16,720 --> 00:02:21,520
there are also options to control what

58
00:02:19,840 --> 00:02:25,280
signals are printed

59
00:02:21,520 --> 00:02:28,879
it can also dump the data

60
00:02:25,280 --> 00:02:32,560
that goes through descriptors

61
00:02:28,879 --> 00:02:34,799
it can print its output in different

62
00:02:32,560 --> 00:02:36,239
ways so you can for example redirect it

63
00:02:34,800 --> 00:02:39,360
into a pipe

64
00:02:36,239 --> 00:02:41,519
or collect a

65
00:02:39,360 --> 00:02:43,120
collect output for each process

66
00:02:41,519 --> 00:02:46,879
separately

67
00:02:43,120 --> 00:02:50,239
uh yeah a lot of features that control

68
00:02:46,879 --> 00:02:52,720
or what ciscos would be printed

69
00:02:50,239 --> 00:02:54,080
it can also print statistics on system

70
00:02:52,720 --> 00:02:55,760
calling vacations

71
00:02:54,080 --> 00:02:57,840
it can attach to already existing

72
00:02:55,760 --> 00:03:01,040
processes it can follow forks

73
00:02:57,840 --> 00:03:01,840
and it can don't follow works depending

74
00:03:01,040 --> 00:03:05,120
on whether you

75
00:03:01,840 --> 00:03:05,920
specify the option well that was

76
00:03:05,120 --> 00:03:08,239
traditional

77
00:03:05,920 --> 00:03:10,238
there were also quite a few options

78
00:03:08,239 --> 00:03:13,519
added for the last 10 years

79
00:03:10,239 --> 00:03:17,440
like you can print a lot of details

80
00:03:13,519 --> 00:03:20,560
about uh about descriptors like

81
00:03:17,440 --> 00:03:21,040
what paths are associated with them or

82
00:03:20,560 --> 00:03:23,680
what

83
00:03:21,040 --> 00:03:24,400
socket information is behind circuits

84
00:03:23,680 --> 00:03:27,519
when these

85
00:03:24,400 --> 00:03:33,120
descriptors are circuits we can bring

86
00:03:27,519 --> 00:03:36,959
a stack of user function calls

87
00:03:33,120 --> 00:03:40,239
yeah you can filter filter system calls

88
00:03:36,959 --> 00:03:43,440
by path names we've finally

89
00:03:40,239 --> 00:03:45,840
got support for regular expressions

90
00:03:43,440 --> 00:03:46,799
for filtering system calls so you can

91
00:03:45,840 --> 00:03:48,959
specify

92
00:03:46,799 --> 00:03:50,640
which ciscos are printed using regular

93
00:03:48,959 --> 00:03:54,000
expressions and so on

94
00:03:50,640 --> 00:03:55,119
yeah more ways to control how statistics

95
00:03:54,000 --> 00:03:58,239
is printed

96
00:03:55,120 --> 00:03:58,799
uh what is being how it's traced so you

97
00:03:58,239 --> 00:04:01,439
can

98
00:03:58,799 --> 00:04:03,840
for example attach too many processes

99
00:04:01,439 --> 00:04:07,760
you can run this trace as a detachable

100
00:04:03,840 --> 00:04:11,040
process and so on and so on well

101
00:04:07,760 --> 00:04:14,720
and there's also this big feature which

102
00:04:11,040 --> 00:04:17,199
change it is trace i mean

103
00:04:14,720 --> 00:04:18,478
change not just this trace but the way

104
00:04:17,199 --> 00:04:20,320
how people look at it

105
00:04:18,478 --> 00:04:22,400
it's a system called tampering so you

106
00:04:20,320 --> 00:04:25,680
cannot just trace system calls but

107
00:04:22,400 --> 00:04:26,560
also inject uh various things like

108
00:04:25,680 --> 00:04:29,919
starting with

109
00:04:26,560 --> 00:04:30,800
return code also you can inject signals

110
00:04:29,919 --> 00:04:35,120
and delays

111
00:04:30,800 --> 00:04:37,600
but this all was more or less covered

112
00:04:35,120 --> 00:04:38,960
in the previous talk so in the last two

113
00:04:37,600 --> 00:04:42,479
years we got

114
00:04:38,960 --> 00:04:45,599
pictures gates is calling for support

115
00:04:42,479 --> 00:04:48,719
he it went both into the kernel and in

116
00:04:45,600 --> 00:04:51,680
into stress we got system called

117
00:04:48,720 --> 00:04:56,479
returned status filtering

118
00:04:51,680 --> 00:04:59,520
we have com comp assisted

119
00:04:56,479 --> 00:05:00,080
cisco filters nowadays there are also a

120
00:04:59,520 --> 00:05:02,639
lot of

121
00:05:00,080 --> 00:05:03,758
new system calls in the kernel that are

122
00:05:02,639 --> 00:05:06,320
supported

123
00:05:03,759 --> 00:05:07,600
and we have more and more elaborated

124
00:05:06,320 --> 00:05:12,159
system called parsers

125
00:05:07,600 --> 00:05:15,199
we also finally have long options

126
00:05:12,160 --> 00:05:19,280
yeah we had no choice

127
00:05:15,199 --> 00:05:22,479
we will soon see why and finally

128
00:05:19,280 --> 00:05:25,520
a bit more than a year ago we changed

129
00:05:22,479 --> 00:05:27,919
our busy style lenses to a copyleft

130
00:05:25,520 --> 00:05:27,919
license

131
00:05:28,240 --> 00:05:35,600
so let's start with the first feature uh

132
00:05:32,000 --> 00:05:38,919
well the story itself started very

133
00:05:35,600 --> 00:05:43,240
very long like i think it was

134
00:05:38,919 --> 00:05:46,000
2001 then this new architecture

135
00:05:43,240 --> 00:05:49,360
x8664 appeared

136
00:05:46,000 --> 00:05:53,120
so the way it was uh added

137
00:05:49,360 --> 00:05:57,120
in linux kernel obviously was to

138
00:05:53,120 --> 00:05:59,039
to support both 64 and 32-bit

139
00:05:57,120 --> 00:06:00,560
processes for obvious reasons because it

140
00:05:59,039 --> 00:06:02,960
was the main

141
00:06:00,560 --> 00:06:05,039
like feature this architecture compared

142
00:06:02,960 --> 00:06:08,239
to its competitor

143
00:06:05,039 --> 00:06:11,039
that it could run legacy code and

144
00:06:08,240 --> 00:06:11,360
in early years of this there are a lot

145
00:06:11,039 --> 00:06:13,599
of

146
00:06:11,360 --> 00:06:15,039
legacy code and very little native

147
00:06:13,600 --> 00:06:17,919
64-bit code

148
00:06:15,039 --> 00:06:19,440
but the way it wasn't implemented in the

149
00:06:17,919 --> 00:06:22,479
kernel

150
00:06:19,440 --> 00:06:25,360
it allowed not just to mix instructions

151
00:06:22,479 --> 00:06:25,919
but also mix system call invocations so

152
00:06:25,360 --> 00:06:29,280
you could

153
00:06:25,919 --> 00:06:33,359
actually invoke from a native code both

154
00:06:29,280 --> 00:06:36,559
native 64 bit system calls but also

155
00:06:33,360 --> 00:06:38,400
legacy 32-bit scores and it was very

156
00:06:36,560 --> 00:06:40,319
poorly documented if at all

157
00:06:38,400 --> 00:06:41,840
and it was very surprising to many

158
00:06:40,319 --> 00:06:44,960
people

159
00:06:41,840 --> 00:06:46,318
and it wasn't really exposed in the

160
00:06:44,960 --> 00:06:50,080
kernel api

161
00:06:46,319 --> 00:06:50,720
so yeah what user space jason debuggers

162
00:06:50,080 --> 00:06:52,159
could do

163
00:06:50,720 --> 00:06:54,080
they could fetch the system called

164
00:06:52,160 --> 00:06:58,080
number uh they

165
00:06:54,080 --> 00:06:59,919
could like fetch this sys

166
00:06:58,080 --> 00:07:02,000
register that describes the business of

167
00:06:59,919 --> 00:07:05,520
process and then

168
00:07:02,000 --> 00:07:08,960
they would just guess do the wild guess

169
00:07:05,520 --> 00:07:11,520
and say well if the process is 64 bit

170
00:07:08,960 --> 00:07:15,039
then probably the cisco is also

171
00:07:11,520 --> 00:07:18,400
64 bit right it's mostly the case

172
00:07:15,039 --> 00:07:21,919
and if it's a 32-bit process then

173
00:07:18,400 --> 00:07:24,880
cisco is definitely like fit to beat

174
00:07:21,919 --> 00:07:25,599
and all the logic dependent on this wild

175
00:07:24,880 --> 00:07:28,319
guess

176
00:07:25,599 --> 00:07:29,520
and it's it mostly works because in most

177
00:07:28,319 --> 00:07:31,599
cases it's

178
00:07:29,520 --> 00:07:34,000
it's exactly what what happens but

179
00:07:31,599 --> 00:07:37,840
sometimes it's not the case

180
00:07:34,000 --> 00:07:43,440
and back in 2008 there was a bug report

181
00:07:37,840 --> 00:07:46,638
against strays in debenberger

182
00:07:43,440 --> 00:07:47,360
there is a very simple example that

183
00:07:46,639 --> 00:07:50,160
looks

184
00:07:47,360 --> 00:07:51,120
uh you can see are very similar to it

185
00:07:50,160 --> 00:07:53,840
it's somewhat

186
00:07:51,120 --> 00:07:55,120
simplified compared to the one reported

187
00:07:53,840 --> 00:07:57,599
in that dark report

188
00:07:55,120 --> 00:07:59,360
so the program does a very simple thing

189
00:07:57,599 --> 00:08:02,400
it just prints a line of

190
00:07:59,360 --> 00:08:06,080
output so

191
00:08:02,400 --> 00:08:09,198
and then it invokes a 32-bit system call

192
00:08:06,080 --> 00:08:11,840
and then it prints another

193
00:08:09,199 --> 00:08:13,919
line of output but these 32 bits is

194
00:08:11,840 --> 00:08:16,080
called is actually a fork

195
00:08:13,919 --> 00:08:17,520
so what happens is that there are two

196
00:08:16,080 --> 00:08:20,960
processes

197
00:08:17,520 --> 00:08:23,680
the and each of them prints the line so

198
00:08:20,960 --> 00:08:24,239
if you compile uh lincoln run this

199
00:08:23,680 --> 00:08:28,160
program

200
00:08:24,240 --> 00:08:32,320
you'll see an output similar to this

201
00:08:28,160 --> 00:08:33,680
well maybe p numbers will change but all

202
00:08:32,320 --> 00:08:37,360
the rest will be

203
00:08:33,679 --> 00:08:39,679
just very simple

204
00:08:37,360 --> 00:08:40,800
but if you run this very simple program

205
00:08:39,679 --> 00:08:43,679
under stress

206
00:08:40,799 --> 00:08:44,479
you will see something very strange so

207
00:08:43,679 --> 00:08:47,680
you will see

208
00:08:44,480 --> 00:08:51,200
this line is being printed

209
00:08:47,680 --> 00:08:54,560
and then suddenly process attaches

210
00:08:51,200 --> 00:08:58,320
and then you see this ridiculous open

211
00:08:54,560 --> 00:09:01,359
system call with very very odd

212
00:08:58,320 --> 00:09:04,000
very impossible i would say our

213
00:09:01,360 --> 00:09:04,000
arguments

214
00:09:06,839 --> 00:09:12,880
but

215
00:09:08,399 --> 00:09:12,880
all you can say about this is what

216
00:09:16,000 --> 00:09:19,920
and all the rest looks very usual and

217
00:09:18,800 --> 00:09:22,079
regular

218
00:09:19,920 --> 00:09:23,279
making the whole picture completely

219
00:09:22,080 --> 00:09:27,120
ridiculous

220
00:09:23,279 --> 00:09:30,240
like this ridiculous open among all

221
00:09:27,120 --> 00:09:33,760
nice expected system calls so

222
00:09:30,240 --> 00:09:34,800
yeah if you run this program several

223
00:09:33,760 --> 00:09:39,120
times

224
00:09:34,800 --> 00:09:42,000
you will see that all these old

225
00:09:39,120 --> 00:09:42,560
open flags are different you will never

226
00:09:42,000 --> 00:09:44,640
see

227
00:09:42,560 --> 00:09:46,880
the same combination or probably never

228
00:09:44,640 --> 00:09:50,560
see the same combination flux

229
00:09:46,880 --> 00:09:53,600
because nowadays thanks to colonel

230
00:09:50,560 --> 00:09:56,319
address syndemization uh all these

231
00:09:53,600 --> 00:09:56,800
registers contain garbage that changes

232
00:09:56,320 --> 00:10:00,160
and

233
00:09:56,800 --> 00:10:02,640
this reminds me of a of a

234
00:10:00,160 --> 00:10:03,839
toy i had a in my childhood a

235
00:10:02,640 --> 00:10:06,800
kaleidoscope

236
00:10:03,839 --> 00:10:07,680
you turn it slightly and you see a

237
00:10:06,800 --> 00:10:09,680
different

238
00:10:07,680 --> 00:10:11,519
different nice picture so you can use

239
00:10:09,680 --> 00:10:15,839
this simple program

240
00:10:11,519 --> 00:10:15,839
uh as a kaleidoscope if you like

241
00:10:16,720 --> 00:10:24,000
yeah so this problem was

242
00:10:20,240 --> 00:10:28,399
i approached it several times but until

243
00:10:24,000 --> 00:10:32,240
until 2018 there was no progress

244
00:10:28,399 --> 00:10:36,800
and finally well thanks to

245
00:10:32,240 --> 00:10:36,800
two people who contributed this

246
00:10:37,600 --> 00:10:44,640
api in the kernel and

247
00:10:41,440 --> 00:10:47,040
two yeah there are two authors and 20

248
00:10:44,640 --> 00:10:51,120
more people who reviewed this

249
00:10:47,040 --> 00:10:54,160
and i could buy silent bias it took us

250
00:10:51,120 --> 00:10:55,120
uh almost nine months to get this into

251
00:10:54,160 --> 00:10:57,760
the kennel

252
00:10:55,120 --> 00:10:58,959
and like don't remember how many

253
00:10:57,760 --> 00:11:00,480
iterations

254
00:10:58,959 --> 00:11:02,079
but it was two digit number of

255
00:11:00,480 --> 00:11:04,800
iterations so

256
00:11:02,079 --> 00:11:05,519
finally we have it in the in the kernel

257
00:11:04,800 --> 00:11:07,760
and

258
00:11:05,519 --> 00:11:08,880
for all architectures that support

259
00:11:07,760 --> 00:11:11,360
jstrokes

260
00:11:08,880 --> 00:11:12,880
which are like all supported

261
00:11:11,360 --> 00:11:15,360
architectures

262
00:11:12,880 --> 00:11:17,760
or almost all i would say and some that

263
00:11:15,360 --> 00:11:21,040
are not supported but get it for free

264
00:11:17,760 --> 00:11:22,160
we we have this and yeah the api looks

265
00:11:21,040 --> 00:11:23,599
this way

266
00:11:22,160 --> 00:11:25,519
there is a structure you can request

267
00:11:23,600 --> 00:11:28,560
from the kernel it contains

268
00:11:25,519 --> 00:11:31,040
this crucial architecture field

269
00:11:28,560 --> 00:11:32,000
and in other ways it looks similar to

270
00:11:31,040 --> 00:11:35,199
comp data

271
00:11:32,000 --> 00:11:38,640
so you can obtain in one go

272
00:11:35,200 --> 00:11:40,800
both the architecture

273
00:11:38,640 --> 00:11:43,279
this is called number cisco arguments

274
00:11:40,800 --> 00:11:47,120
also instruction point or step pointer

275
00:11:43,279 --> 00:11:50,560
and this is this makes uh

276
00:11:47,120 --> 00:11:53,040
traces that use this api

277
00:11:50,560 --> 00:11:54,319
reliable in this respect in respect to

278
00:11:53,040 --> 00:11:57,199
the original problem

279
00:11:54,320 --> 00:11:59,200
so the same program now looks uh if the

280
00:11:57,200 --> 00:11:59,519
if linux is fresh enough and this trace

281
00:11:59,200 --> 00:12:03,040
is

282
00:11:59,519 --> 00:12:05,920
fresh enough you see this is like

283
00:12:03,040 --> 00:12:06,719
as expected so process attaches you see

284
00:12:05,920 --> 00:12:09,279
a proper for

285
00:12:06,720 --> 00:12:10,320
call and not this ridiculous open and

286
00:12:09,279 --> 00:12:14,079
all looks

287
00:12:10,320 --> 00:12:16,959
good so i think other traces

288
00:12:14,079 --> 00:12:18,160
and debuggers that have something to do

289
00:12:16,959 --> 00:12:21,119
with system calls

290
00:12:18,160 --> 00:12:22,240
should switch to this api by the way it

291
00:12:21,120 --> 00:12:26,160
also allows

292
00:12:22,240 --> 00:12:27,360
uh to to find out what kind of picture

293
00:12:26,160 --> 00:12:31,040
stop is

294
00:12:27,360 --> 00:12:33,839
uh the the current stop otherwise

295
00:12:31,040 --> 00:12:34,160
or up to this time kernel provided no

296
00:12:33,839 --> 00:12:37,600
way

297
00:12:34,160 --> 00:12:40,800
to find out uh so

298
00:12:37,600 --> 00:12:43,279
they used to think that they

299
00:12:40,800 --> 00:12:44,000
alternate so first your entrance is

300
00:12:43,279 --> 00:12:46,720
called and

301
00:12:44,000 --> 00:12:47,440
exits is called but it's not always the

302
00:12:46,720 --> 00:12:51,360
case

303
00:12:47,440 --> 00:12:54,560
so you actually can use this nice api

304
00:12:51,360 --> 00:12:57,040
to find out and

305
00:12:54,560 --> 00:12:58,239
the what is the actually the picture

306
00:12:57,040 --> 00:13:00,800
stop you're

307
00:12:58,240 --> 00:13:00,800
dealing with

308
00:13:03,440 --> 00:13:08,079
okay so it was a very like major feature

309
00:13:06,639 --> 00:13:11,600
first race

310
00:13:08,079 --> 00:13:13,760
uh and yeah as i said some

311
00:13:11,600 --> 00:13:16,959
other other choices are welcome to use

312
00:13:13,760 --> 00:13:16,959
this of course

313
00:13:17,920 --> 00:13:25,040
let's speak about

314
00:13:21,839 --> 00:13:27,279
system called filtering there is a new

315
00:13:25,040 --> 00:13:30,319
option to filter system calls by

316
00:13:27,279 --> 00:13:34,079
written status it

317
00:13:30,320 --> 00:13:36,079
had a very like unusual history

318
00:13:34,079 --> 00:13:38,719
first race so it was actually introduced

319
00:13:36,079 --> 00:13:41,519
like in 2002

320
00:13:38,720 --> 00:13:42,320
but it was broken from the beginning and

321
00:13:41,519 --> 00:13:44,959
it

322
00:13:42,320 --> 00:13:47,199
was never announced you couldn't find it

323
00:13:44,959 --> 00:13:47,518
exists unless you accidentally type it

324
00:13:47,199 --> 00:13:51,120
in

325
00:13:47,519 --> 00:13:54,240
or look into the source code because it

326
00:13:51,120 --> 00:13:56,880
it was broken so it what it did uh

327
00:13:54,240 --> 00:13:57,839
it printed the beginning of system call

328
00:13:56,880 --> 00:14:00,880
and when it

329
00:13:57,839 --> 00:14:05,040
failed it just didn't print the ending

330
00:14:00,880 --> 00:14:08,560
it wasn't useful but now you can filter

331
00:14:05,040 --> 00:14:11,599
system calls by return status so you can

332
00:14:08,560 --> 00:14:14,638
print only those system calls that

333
00:14:11,600 --> 00:14:15,120
are succeeded or those that are failed

334
00:14:14,639 --> 00:14:16,959
so

335
00:14:15,120 --> 00:14:18,800
in this very simple example you can see

336
00:14:16,959 --> 00:14:21,839
the difference well if you

337
00:14:18,800 --> 00:14:25,519
run a very simple program like cat

338
00:14:21,839 --> 00:14:26,800
uh with a yeah with a modified ld

339
00:14:25,519 --> 00:14:29,600
library path

340
00:14:26,800 --> 00:14:30,880
it it makes a dynamic linker to look

341
00:14:29,600 --> 00:14:33,440
into different

342
00:14:30,880 --> 00:14:35,680
in different places i wonder whether

343
00:14:33,440 --> 00:14:37,920
whether you expect dynamic link to look

344
00:14:35,680 --> 00:14:42,079
into so many different places

345
00:14:37,920 --> 00:14:42,079
but well you can see the difference

346
00:14:42,160 --> 00:14:46,639
uh uh as a very useful side effect of

347
00:14:45,920 --> 00:14:49,360
this

348
00:14:46,639 --> 00:14:50,079
uh option you can have an aggregation

349
00:14:49,360 --> 00:14:53,279
for free

350
00:14:50,079 --> 00:14:54,000
so for example if you trace several

351
00:14:53,279 --> 00:14:58,720
processes

352
00:14:54,000 --> 00:15:00,000
that are running asynchronously and then

353
00:14:58,720 --> 00:15:02,639
you will see a lot of this

354
00:15:00,000 --> 00:15:03,519
unfinished and resume stuff and

355
00:15:02,639 --> 00:15:05,600
sometimes

356
00:15:03,519 --> 00:15:07,600
it's not very convenient we used to

357
00:15:05,600 --> 00:15:11,199
implement

358
00:15:07,600 --> 00:15:14,480
special aggregators to collect this data

359
00:15:11,199 --> 00:15:17,760
so it would look like this but now

360
00:15:14,480 --> 00:15:22,079
thanks you can use this uh

361
00:15:17,760 --> 00:15:25,600
option also to aggregate the only

362
00:15:22,079 --> 00:15:28,959
the only need i would say is that it

363
00:15:25,600 --> 00:15:32,160
might change the order of

364
00:15:28,959 --> 00:15:35,599
invocations so in this example

365
00:15:32,160 --> 00:15:36,719
it looks like if nano slipsy skulls were

366
00:15:35,600 --> 00:15:39,519
invoked

367
00:15:36,720 --> 00:15:40,160
sequentially which is definitely not the

368
00:15:39,519 --> 00:15:42,959
case

369
00:15:40,160 --> 00:15:44,560
they were invoked simultaneously but

370
00:15:42,959 --> 00:15:47,758
because they were printed

371
00:15:44,560 --> 00:15:50,000
at the moment they finished

372
00:15:47,759 --> 00:15:51,600
uh this system calls it looks not the

373
00:15:50,000 --> 00:15:54,000
way

374
00:15:51,600 --> 00:15:55,360
you are used to but then you when you're

375
00:15:54,000 --> 00:15:59,360
aggregating

376
00:15:55,360 --> 00:16:04,320
it doesn't really matter

377
00:15:59,360 --> 00:16:04,320
in which order they are

378
00:16:06,839 --> 00:16:09,839
printed

379
00:16:10,240 --> 00:16:16,639
so the yeah there is also

380
00:16:13,519 --> 00:16:20,160
the another option

381
00:16:16,639 --> 00:16:22,720
uh that um

382
00:16:20,160 --> 00:16:23,439
where is the funniest order connected

383
00:16:22,720 --> 00:16:27,440
with it

384
00:16:23,440 --> 00:16:30,320
so when i try to come up with a

385
00:16:27,440 --> 00:16:31,920
with something useful as an example i

386
00:16:30,320 --> 00:16:34,800
started

387
00:16:31,920 --> 00:16:37,839
um i started invoking all programs i had

388
00:16:34,800 --> 00:16:41,519
in my small

389
00:16:37,839 --> 00:16:41,839
small route and i found i found out a

390
00:16:41,519 --> 00:16:45,680
few

391
00:16:41,839 --> 00:16:48,000
programs that were not printing

392
00:16:45,680 --> 00:16:49,680
uh not printing their arguments

393
00:16:48,000 --> 00:16:50,000
correctly then they couldn't find them i

394
00:16:49,680 --> 00:16:52,000
just

395
00:16:50,000 --> 00:16:54,000
invoked programs with a non-existing

396
00:16:52,000 --> 00:16:54,720
file yeah and i found two of these

397
00:16:54,000 --> 00:16:57,920
programs

398
00:16:54,720 --> 00:16:58,880
in infusions and i fixed them but you

399
00:16:57,920 --> 00:17:01,519
can

400
00:16:58,880 --> 00:17:02,240
get an idea when this could be useful

401
00:17:01,519 --> 00:17:05,679
for example

402
00:17:02,240 --> 00:17:06,959
when program doesn't print what's going

403
00:17:05,679 --> 00:17:10,160
on you can

404
00:17:06,959 --> 00:17:10,160
like chase and have a look

405
00:17:10,720 --> 00:17:14,959
when you are filtering this when you are

406
00:17:13,520 --> 00:17:17,599
filtering system calls

407
00:17:14,959 --> 00:17:19,120
you probably don't want to if you don't

408
00:17:17,599 --> 00:17:22,480
want to print all the rest

409
00:17:19,119 --> 00:17:24,479
you'll probably want to make the

410
00:17:22,480 --> 00:17:25,839
both system calls you're not printing

411
00:17:24,480 --> 00:17:28,559
execute faster

412
00:17:25,839 --> 00:17:30,960
and now we have a very nice feature

413
00:17:28,559 --> 00:17:35,039
which we planned for several years

414
00:17:30,960 --> 00:17:38,880
but couldn't get until well we had two

415
00:17:35,039 --> 00:17:44,400
just so google summer course students

416
00:17:38,880 --> 00:17:49,360
in the year before last the student

417
00:17:44,400 --> 00:17:51,520
made a prototype and yeah and last year

418
00:17:49,360 --> 00:17:53,199
we had a student who is going to talk

419
00:17:51,520 --> 00:17:55,918
about this feature

420
00:17:53,200 --> 00:17:56,640
very soon i hope so he will describe how

421
00:17:55,919 --> 00:17:59,360
it works

422
00:17:56,640 --> 00:18:00,240
but from user perspective it looks like

423
00:17:59,360 --> 00:18:04,959
space is

424
00:18:00,240 --> 00:18:07,440
no longer no longer

425
00:18:04,960 --> 00:18:08,880
delays everything by two orders of

426
00:18:07,440 --> 00:18:10,320
magnitude

427
00:18:08,880 --> 00:18:12,240
on those system calls that are not

428
00:18:10,320 --> 00:18:15,600
traced so in this

429
00:18:12,240 --> 00:18:18,240
yeah it's a famous example because uh

430
00:18:15,600 --> 00:18:19,120
the this is exact this is a modification

431
00:18:18,240 --> 00:18:22,400
for example

432
00:18:19,120 --> 00:18:25,439
a bpf people uh use to

433
00:18:22,400 --> 00:18:29,600
to describe how how slow

434
00:18:25,440 --> 00:18:31,730
stress is and now we use the bpf stuff

435
00:18:29,600 --> 00:18:34,240
to show how fast the stress is

436
00:18:31,730 --> 00:18:37,679
[Laughter]

437
00:18:34,240 --> 00:18:38,480
so you can see that second bf itself

438
00:18:37,679 --> 00:18:41,840
slows down

439
00:18:38,480 --> 00:18:43,200
things about 10 percent which is nothing

440
00:18:41,840 --> 00:18:48,000
compared to what

441
00:18:43,200 --> 00:18:51,200
uh all these picture stops do with

442
00:18:48,000 --> 00:18:53,600
the speed of running programs

443
00:18:51,200 --> 00:18:54,320
uh yeah you can see this is a long

444
00:18:53,600 --> 00:18:57,039
option

445
00:18:54,320 --> 00:18:57,439
and it was actually the first option

446
00:18:57,039 --> 00:19:00,559
that

447
00:18:57,440 --> 00:19:03,360
we couldn't find a good uh short analog

448
00:19:00,559 --> 00:19:04,240
so we had quite a few not as many as ls

449
00:19:03,360 --> 00:19:06,719
program has

450
00:19:04,240 --> 00:19:07,919
but quite a few options and some of them

451
00:19:06,720 --> 00:19:11,360
are not obvious

452
00:19:07,919 --> 00:19:14,320
and we had a i think what is dash n

453
00:19:11,360 --> 00:19:15,760
is in our prototype but we could

454
00:19:14,320 --> 00:19:18,480
couldn't find an explanation what

455
00:19:15,760 --> 00:19:18,879
y should be called dash n so we decided

456
00:19:18,480 --> 00:19:21,600
that

457
00:19:18,880 --> 00:19:22,480
it's time to introduce long options and

458
00:19:21,600 --> 00:19:26,480
now we are

459
00:19:22,480 --> 00:19:29,520
started adding irises for

460
00:19:26,480 --> 00:19:33,919
not so obvious names are

461
00:19:29,520 --> 00:19:36,559
yeah so second people was the first one

462
00:19:33,919 --> 00:19:38,480
another option which should probably

463
00:19:36,559 --> 00:19:41,600
have a

464
00:19:38,480 --> 00:19:44,640
a long option analog and

465
00:19:41,600 --> 00:19:47,280
is the option that has named

466
00:19:44,640 --> 00:19:48,000
k i don't know why it's called hk it

467
00:19:47,280 --> 00:19:51,678
prints a

468
00:19:48,000 --> 00:19:55,200
stacks stack of user user calls

469
00:19:51,679 --> 00:19:57,840
at the time of system convocation

470
00:19:55,200 --> 00:20:00,080
yeah it's very useful thing because you

471
00:19:57,840 --> 00:20:02,639
can see the logic that

472
00:20:00,080 --> 00:20:03,760
behind the program if you don't know

473
00:20:02,640 --> 00:20:05,840
what's going on

474
00:20:03,760 --> 00:20:07,039
you can just apply this it will produce

475
00:20:05,840 --> 00:20:10,720
a lot of output

476
00:20:07,039 --> 00:20:11,280
but it makes makes a straight somewhat

477
00:20:10,720 --> 00:20:13,840
kind of

478
00:20:11,280 --> 00:20:15,678
debugger more than a tracer so in this

479
00:20:13,840 --> 00:20:19,520
example you can see

480
00:20:15,679 --> 00:20:22,320
why why for example cat closes

481
00:20:19,520 --> 00:20:24,000
is the doubt from names of these

482
00:20:22,320 --> 00:20:27,039
functions you can see

483
00:20:24,000 --> 00:20:30,720
that it does some kind of

484
00:20:27,039 --> 00:20:32,720
it exit handling

485
00:20:30,720 --> 00:20:34,400
and it closes down to ensure that

486
00:20:32,720 --> 00:20:35,120
everything is written otherwise it

487
00:20:34,400 --> 00:20:38,400
should return

488
00:20:35,120 --> 00:20:42,320
non-zero exit code yeah another option

489
00:20:38,400 --> 00:20:45,360
uh you can attach you can use this trace

490
00:20:42,320 --> 00:20:48,240
as a detached process so

491
00:20:45,360 --> 00:20:49,600
because this trace affects traces in

492
00:20:48,240 --> 00:20:52,960
different ways

493
00:20:49,600 --> 00:20:55,918
ah it's not always desirable for example

494
00:20:52,960 --> 00:20:56,480
if these processes interact with their

495
00:20:55,919 --> 00:20:58,480
parents

496
00:20:56,480 --> 00:20:59,679
and they know they want to know their

497
00:20:58,480 --> 00:21:03,360
bid numbers

498
00:20:59,679 --> 00:21:06,559
so you can run a stress or

499
00:21:03,360 --> 00:21:09,520
this way and be more transparent

500
00:21:06,559 --> 00:21:10,559
yeah there is also a relatively new

501
00:21:09,520 --> 00:21:13,679
option

502
00:21:10,559 --> 00:21:16,960
that that

503
00:21:13,679 --> 00:21:18,960
says how all these symbolic constants

504
00:21:16,960 --> 00:21:22,480
should be printed

505
00:21:18,960 --> 00:21:24,960
uh so you can print as usual

506
00:21:22,480 --> 00:21:27,200
uh like translate these numbers into

507
00:21:24,960 --> 00:21:30,320
symbolic names so you can print both

508
00:21:27,200 --> 00:21:31,440
symbolic numbers and and draw numbers or

509
00:21:30,320 --> 00:21:34,960
just raw numbers

510
00:21:31,440 --> 00:21:35,760
it has like various useful implications

511
00:21:34,960 --> 00:21:39,120
you can

512
00:21:35,760 --> 00:21:39,760
uh you can debug programs that you

513
00:21:39,120 --> 00:21:42,959
suspect

514
00:21:39,760 --> 00:21:46,158
you pass arguments uh

515
00:21:42,960 --> 00:21:47,760
to system calls in a wrong way which is

516
00:21:46,159 --> 00:21:48,720
not very surprising because on different

517
00:21:47,760 --> 00:21:52,240
architectures

518
00:21:48,720 --> 00:21:52,240
there are different system called

519
00:21:52,720 --> 00:21:58,000
different apis or the different number

520
00:21:55,840 --> 00:21:59,840
and order of passing system system

521
00:21:58,000 --> 00:22:03,200
called arguments

522
00:21:59,840 --> 00:22:08,080
and this also can be used i think it's

523
00:22:03,200 --> 00:22:10,159
used in cisco project so yeah we added

524
00:22:08,080 --> 00:22:11,760
support for all new system calls that

525
00:22:10,159 --> 00:22:14,880
were added into the linux kernel

526
00:22:11,760 --> 00:22:15,919
and nowadays they started adding system

527
00:22:14,880 --> 00:22:19,600
calls again

528
00:22:15,919 --> 00:22:20,480
so yeah like bunch of few bunch of new

529
00:22:19,600 --> 00:22:24,158
system calls

530
00:22:20,480 --> 00:22:26,000
that work with mount points but well

531
00:22:24,159 --> 00:22:27,360
i can't describe them all there are too

532
00:22:26,000 --> 00:22:30,559
many you should

533
00:22:27,360 --> 00:22:32,240
ever look into man pages probably but we

534
00:22:30,559 --> 00:22:35,200
have support for them

535
00:22:32,240 --> 00:22:36,799
uh we also have a lot of very

536
00:22:35,200 --> 00:22:41,840
sophisticated

537
00:22:36,799 --> 00:22:44,639
sophisticated uh system called parses

538
00:22:41,840 --> 00:22:45,280
and i'll show you an example which looks

539
00:22:44,640 --> 00:22:48,720
them

540
00:22:45,280 --> 00:22:49,200
very monstrous but you will get the idea

541
00:22:48,720 --> 00:22:52,400
how

542
00:22:49,200 --> 00:22:54,960
sophisticated system passes could be

543
00:22:52,400 --> 00:22:55,840
so we support decoding of net networking

544
00:22:54,960 --> 00:22:58,799
protocol

545
00:22:55,840 --> 00:23:00,320
and you can see this output this is the

546
00:22:58,799 --> 00:23:03,120
output of a very simple

547
00:23:00,320 --> 00:23:06,158
routing table and here you can see

548
00:23:03,120 --> 00:23:06,158
what's going behind

549
00:23:06,840 --> 00:23:12,399
yep

550
00:23:09,600 --> 00:23:13,678
so you you see this knitting protocol is

551
00:23:12,400 --> 00:23:17,120
very structured

552
00:23:13,679 --> 00:23:18,400
it has some structures substructures sub

553
00:23:17,120 --> 00:23:21,280
sub structures

554
00:23:18,400 --> 00:23:22,480
and everything is printed color coloring

555
00:23:21,280 --> 00:23:25,440
is mine all the rest

556
00:23:22,480 --> 00:23:25,440
is made by stress

557
00:23:26,000 --> 00:23:32,640
yeah and the last but not least is that

558
00:23:29,760 --> 00:23:33,600
in december of 2018 we changed the

559
00:23:32,640 --> 00:23:36,799
license

560
00:23:33,600 --> 00:23:39,280
so stress used to be released since the

561
00:23:36,799 --> 00:23:40,720
very beginning under berkeley style

562
00:23:39,280 --> 00:23:45,120
license

563
00:23:40,720 --> 00:23:48,320
uh so he it was a uh

564
00:23:45,120 --> 00:23:51,199
yeah by a request of paul

565
00:23:48,320 --> 00:23:52,480
kreinburg i don't know this man it was

566
00:23:51,200 --> 00:23:56,159
too early

567
00:23:52,480 --> 00:23:58,960
so when we added support for

568
00:23:56,159 --> 00:24:00,799
petraeus gets his calling for api it was

569
00:23:58,960 --> 00:24:04,480
kind of crucial point

570
00:24:00,799 --> 00:24:05,520
uh most contributors to space didn't

571
00:24:04,480 --> 00:24:08,000
want

572
00:24:05,520 --> 00:24:09,600
to contribute on the permissive license

573
00:24:08,000 --> 00:24:12,799
any longer so we decided

574
00:24:09,600 --> 00:24:16,480
we will drive a change to a copyleft

575
00:24:12,799 --> 00:24:19,918
so test suit is released under new gpa

576
00:24:16,480 --> 00:24:23,039
v2 plus and all the rest is

577
00:24:19,919 --> 00:24:24,080
is the license that allow us to release

578
00:24:23,039 --> 00:24:26,158
this

579
00:24:24,080 --> 00:24:27,199
as a library someday in the future if we

580
00:24:26,159 --> 00:24:30,960
manage to

581
00:24:27,200 --> 00:24:30,960
make a library out of space

582
00:24:35,679 --> 00:24:42,799
so this is more or less what i wanted

583
00:24:39,919 --> 00:24:44,240
to talk about and if you have some

584
00:24:42,799 --> 00:24:47,760
questions

585
00:24:44,240 --> 00:24:49,200
or ideas or something related to this

586
00:24:47,760 --> 00:24:52,000
choice to discuss

587
00:24:49,200 --> 00:24:52,000
we have some time

588
00:24:53,679 --> 00:25:02,240
yeah should i repeat the question

589
00:24:56,880 --> 00:25:02,240
oh so please be because i

590
00:25:04,480 --> 00:25:15,840
uh should i pick

591
00:25:07,679 --> 00:25:15,840
yeah from the back to the front yeah

592
00:25:31,360 --> 00:25:36,158
so the question was uh why

593
00:25:34,400 --> 00:25:37,760
this combat system system called

594
00:25:36,159 --> 00:25:40,799
filtering is not by default

595
00:25:37,760 --> 00:25:41,760
and why you you have to type this very

596
00:25:40,799 --> 00:25:44,480
long option

597
00:25:41,760 --> 00:25:46,240
to use this feature first of all you can

598
00:25:44,480 --> 00:25:49,760
abbreviate long options

599
00:25:46,240 --> 00:25:52,000
so uh you don't have to type that much

600
00:25:49,760 --> 00:25:52,879
i think i think two letters usually

601
00:25:52,000 --> 00:25:56,000
enough

602
00:25:52,880 --> 00:26:00,240
if not and type three letters and some

603
00:25:56,000 --> 00:26:02,240
some shells allow expansions of

604
00:26:00,240 --> 00:26:03,440
program arguments so i don't think this

605
00:26:02,240 --> 00:26:07,200
is a problem

606
00:26:03,440 --> 00:26:10,159
but well there is a there are two

607
00:26:07,200 --> 00:26:11,200
important points about this way of

608
00:26:10,159 --> 00:26:14,880
filtering

609
00:26:11,200 --> 00:26:16,960
is first it it generates and attaches a

610
00:26:14,880 --> 00:26:19,200
bpf program

611
00:26:16,960 --> 00:26:20,640
i'm not going to dive into details but

612
00:26:19,200 --> 00:26:24,240
it makes this program

613
00:26:20,640 --> 00:26:24,880
and you can attach it but you can't get

614
00:26:24,240 --> 00:26:27,440
rid of it

615
00:26:24,880 --> 00:26:28,240
unless you're privileged so this implies

616
00:26:27,440 --> 00:26:30,960
that you

617
00:26:28,240 --> 00:26:32,000
have to follow forks you have to follow

618
00:26:30,960 --> 00:26:34,320
all purchases that

619
00:26:32,000 --> 00:26:35,679
are forked by the process you are

620
00:26:34,320 --> 00:26:38,799
chasing

621
00:26:35,679 --> 00:26:41,919
and this kind of change behavior and

622
00:26:38,799 --> 00:26:43,520
one of important points of stress

623
00:26:41,919 --> 00:26:44,960
is that this trace is backwards

624
00:26:43,520 --> 00:26:46,960
compatible

625
00:26:44,960 --> 00:26:48,880
so we can't enable follow forks by

626
00:26:46,960 --> 00:26:50,000
default because people are not used to

627
00:26:48,880 --> 00:26:53,120
this

628
00:26:50,000 --> 00:26:55,039
uh yeah and if you specify this option

629
00:26:53,120 --> 00:26:58,000
and do not specify follow forks

630
00:26:55,039 --> 00:26:59,200
it says that i am enabling follow folks

631
00:26:58,000 --> 00:27:02,400
hey

632
00:26:59,200 --> 00:27:04,799
so this is one point another point

633
00:27:02,400 --> 00:27:06,159
is that unless you are privileged and

634
00:27:04,799 --> 00:27:08,480
stress is used

635
00:27:06,159 --> 00:27:10,320
as a previous program you can't attach a

636
00:27:08,480 --> 00:27:14,960
bpf program to another process

637
00:27:10,320 --> 00:27:18,000
so you can attach attach to a process

638
00:27:14,960 --> 00:27:20,320
using pcs or p3s attach but you can't

639
00:27:18,000 --> 00:27:23,679
attach a bpf program to another process

640
00:27:20,320 --> 00:27:26,000
you all can only attach our

641
00:27:23,679 --> 00:27:29,360
program to yourself so uh one of the

642
00:27:26,000 --> 00:27:31,039
important features of stress is to

643
00:27:29,360 --> 00:27:33,760
trace already existing ports wouldn't

644
00:27:31,039 --> 00:27:35,200
work with this unless you're privileged

645
00:27:33,760 --> 00:27:37,200
but if you're privileged you can use a

646
00:27:35,200 --> 00:27:39,679
lot of kernel chasing nowadays

647
00:27:37,200 --> 00:27:41,600
it's not really a big deal although they

648
00:27:39,679 --> 00:27:44,559
don't have so elaborate

649
00:27:41,600 --> 00:27:46,559
choices yeah yeah please another

650
00:27:44,559 --> 00:27:49,039
question

651
00:27:46,559 --> 00:27:50,480
yes so you mentioned that on the last

652
00:27:49,039 --> 00:27:53,600
slide that the color was your

653
00:27:50,480 --> 00:27:56,080
your own uh would you consider adding

654
00:27:53,600 --> 00:27:59,600
color output to s-res

655
00:27:56,080 --> 00:28:02,480
so the question was that on this slide

656
00:27:59,600 --> 00:28:03,120
the color was my own and would i

657
00:28:02,480 --> 00:28:06,640
consider

658
00:28:03,120 --> 00:28:09,279
coloring by strays it's kind of

659
00:28:06,640 --> 00:28:10,799
this is a difficult question because we

660
00:28:09,279 --> 00:28:13,120
had actually a plan

661
00:28:10,799 --> 00:28:14,158
to generate a structured output from a

662
00:28:13,120 --> 00:28:15,918
stress

663
00:28:14,159 --> 00:28:18,159
and if you generate for example some

664
00:28:15,919 --> 00:28:21,120
json output you would apply

665
00:28:18,159 --> 00:28:23,279
already existing software to do all this

666
00:28:21,120 --> 00:28:25,678
fancy stuff like coloring

667
00:28:23,279 --> 00:28:26,960
so we decided we will make structured

668
00:28:25,679 --> 00:28:30,240
output first

669
00:28:26,960 --> 00:28:31,679
and then other people will do whatever

670
00:28:30,240 --> 00:28:34,880
coloring they like

671
00:28:31,679 --> 00:28:36,480
but as you can see there is no

672
00:28:34,880 --> 00:28:40,080
structured output yet

673
00:28:36,480 --> 00:28:40,080
and i have to do all the coloring

674
00:28:41,360 --> 00:28:43,840
yes please

675
00:28:47,760 --> 00:28:52,720
me i think i can

676
00:28:50,880 --> 00:28:59,840
so the question was whether i can pretty

677
00:28:52,720 --> 00:28:59,840
print this i think this is pretty enough

678
00:29:09,760 --> 00:29:15,120
whether i can bring this in blocks so

679
00:29:12,080 --> 00:29:15,120
it'll be easy to read

680
00:29:16,159 --> 00:29:20,240
yeah it's getting closer and closer to

681
00:29:18,159 --> 00:29:23,520
our idea of structured output

682
00:29:20,240 --> 00:29:27,840
so yeah you can see why we decided to go

683
00:29:23,520 --> 00:29:27,840
the simple way but it was not so simple

684
00:29:28,960 --> 00:29:41,840
is it over ok

685
00:29:32,080 --> 00:29:41,840
thank you for coming

686
00:29:45,840 --> 00:29:47,918
you

