1
00:00:05,359 --> 00:00:09,679
i'm toby

2
00:00:07,120 --> 00:00:11,280
and i'm uh engineer at the government

3
00:00:09,679 --> 00:00:13,280
digital service and i work on government

4
00:00:11,280 --> 00:00:15,360
uk platform as a service

5
00:00:13,280 --> 00:00:17,038
and this talk is how the uk government

6
00:00:15,360 --> 00:00:17,680
deploy a platform as a service using

7
00:00:17,039 --> 00:00:20,800
concourse

8
00:00:17,680 --> 00:00:23,359
an open source continuous thing doer who

9
00:00:20,800 --> 00:00:26,160
here has heard of concourse

10
00:00:23,359 --> 00:00:28,640
who here has used concourse who here

11
00:00:26,160 --> 00:00:31,119
uses concourse in production

12
00:00:28,640 --> 00:00:32,719
like a few people that's nice um so this

13
00:00:31,119 --> 00:00:33,200
has like some technical details in the

14
00:00:32,719 --> 00:00:35,920
talk

15
00:00:33,200 --> 00:00:37,280
um but it's also a talk about the team

16
00:00:35,920 --> 00:00:38,640
and how we use it and how we think that

17
00:00:37,280 --> 00:00:39,440
it makes our software development

18
00:00:38,640 --> 00:00:42,559
process better

19
00:00:39,440 --> 00:00:42,879
and how it makes our users experience of

20
00:00:42,559 --> 00:00:46,879
our

21
00:00:42,879 --> 00:00:47,920
service better so this talk is split

22
00:00:46,879 --> 00:00:49,760
into four parts

23
00:00:47,920 --> 00:00:51,440
i'm going to give you an overview of

24
00:00:49,760 --> 00:00:51,920
like the platform as a service that we

25
00:00:51,440 --> 00:00:53,360
run

26
00:00:51,920 --> 00:00:55,440
i'm then going to give you an overview

27
00:00:53,360 --> 00:00:57,120
of concourse the tool

28
00:00:55,440 --> 00:00:59,280
then we're going to go through a simple

29
00:00:57,120 --> 00:01:01,680
concourse pipeline how to write one

30
00:00:59,280 --> 00:01:03,520
how to make it better and then we're

31
00:01:01,680 --> 00:01:05,519
going to go through

32
00:01:03,520 --> 00:01:07,040
like the goblet uk pass concourse

33
00:01:05,519 --> 00:01:08,479
pipeline that we use to deploy our

34
00:01:07,040 --> 00:01:09,439
platform as a service

35
00:01:08,479 --> 00:01:10,798
and then we're going to talk about some

36
00:01:09,439 --> 00:01:12,240
of the patterns in that pipeline and how

37
00:01:10,799 --> 00:01:14,479
they might be applicable to your

38
00:01:12,240 --> 00:01:17,199
software development process

39
00:01:14,479 --> 00:01:18,640
so what is gov uk powers we first have

40
00:01:17,200 --> 00:01:20,799
to answer these questions

41
00:01:18,640 --> 00:01:22,560
what is platform as a service what are

42
00:01:20,799 --> 00:01:23,439
some challenges with digital services

43
00:01:22,560 --> 00:01:26,479
and government

44
00:01:23,439 --> 00:01:29,919
and how we make things better so

45
00:01:26,479 --> 00:01:32,000
who uses a pas or knows what paz is

46
00:01:29,920 --> 00:01:34,240
a few people who's used the government

47
00:01:32,000 --> 00:01:36,240
service online in like the last week or

48
00:01:34,240 --> 00:01:39,600
last month

49
00:01:36,240 --> 00:01:41,679
who's had to fill out like a paper form

50
00:01:39,600 --> 00:01:43,439
a government service before probably all

51
00:01:41,680 --> 00:01:44,560
of us let's try and make some of that

52
00:01:43,439 --> 00:01:46,798
more online

53
00:01:44,560 --> 00:01:48,560
so we should take these services and we

54
00:01:46,799 --> 00:01:52,240
should make them online

55
00:01:48,560 --> 00:01:54,079
well a paz is a step towards that

56
00:01:52,240 --> 00:01:55,520
it's not specifically for government but

57
00:01:54,079 --> 00:01:57,520
it's more just about

58
00:01:55,520 --> 00:01:58,798
you know developers should be able to

59
00:01:57,520 --> 00:02:00,000
build things

60
00:01:58,799 --> 00:02:01,759
they should be able to build and run

61
00:02:00,000 --> 00:02:03,520
their apps without having specialist

62
00:02:01,759 --> 00:02:05,439
expertise or having to maintain

63
00:02:03,520 --> 00:02:06,560
like cloud infrastructure to run all of

64
00:02:05,439 --> 00:02:09,199
that stuff because

65
00:02:06,560 --> 00:02:09,920
like getting a devops engineer is quite

66
00:02:09,199 --> 00:02:12,480
expensive

67
00:02:09,919 --> 00:02:12,958
and like isn't a very efficient use of

68
00:02:12,480 --> 00:02:15,040
like

69
00:02:12,959 --> 00:02:16,879
government's money if their abstractions

70
00:02:15,040 --> 00:02:20,079
exist

71
00:02:16,879 --> 00:02:21,760
um so we have this haiku at work

72
00:02:20,080 --> 00:02:23,360
or in the cloud foundry community here's

73
00:02:21,760 --> 00:02:24,799
my source code run it for me in the

74
00:02:23,360 --> 00:02:26,319
cloud i do not care how

75
00:02:24,800 --> 00:02:28,080
that's the experience that we want our

76
00:02:26,319 --> 00:02:28,640
users to have like they just give us

77
00:02:28,080 --> 00:02:31,040
some code

78
00:02:28,640 --> 00:02:32,079
it just works it's broken it's because

79
00:02:31,040 --> 00:02:34,560
the code's broken not because the

80
00:02:32,080 --> 00:02:37,200
platform's broken

81
00:02:34,560 --> 00:02:39,120
and we want our users like to be able to

82
00:02:37,200 --> 00:02:40,480
deploy to production safer and faster

83
00:02:39,120 --> 00:02:42,480
we don't want them to go through a lot

84
00:02:40,480 --> 00:02:45,119
of waste in their development process

85
00:02:42,480 --> 00:02:46,720
because they don't have access to an

86
00:02:45,120 --> 00:02:48,720
environment that's like production

87
00:02:46,720 --> 00:02:50,480
we want them to you know be able to do

88
00:02:48,720 --> 00:02:50,879
live prototyping share their code with

89
00:02:50,480 --> 00:02:54,000
our

90
00:02:50,879 --> 00:02:55,120
other co-workers all that good stuff

91
00:02:54,000 --> 00:02:57,440
and we want them to also be able to

92
00:02:55,120 --> 00:03:00,080
explain uh explore

93
00:02:57,440 --> 00:03:01,280
like oh we've got this service that runs

94
00:03:00,080 --> 00:03:02,720
in like production with

95
00:03:01,280 --> 00:03:04,560
five different micro services but we

96
00:03:02,720 --> 00:03:05,920
think that we should pull this service

97
00:03:04,560 --> 00:03:06,959
into its own like two separate

98
00:03:05,920 --> 00:03:09,119
microservices

99
00:03:06,959 --> 00:03:10,480
and if you've got like a gate kept

100
00:03:09,120 --> 00:03:11,200
infrastructure that's different to how

101
00:03:10,480 --> 00:03:13,679
you develop

102
00:03:11,200 --> 00:03:14,720
then like you then turn to like

103
00:03:13,680 --> 00:03:18,480
architecture and design

104
00:03:14,720 --> 00:03:19,920
and kind of what you want is exploration

105
00:03:18,480 --> 00:03:21,119
um so here are some examples of

106
00:03:19,920 --> 00:03:22,319
platforms as a service we've got some

107
00:03:21,120 --> 00:03:23,840
open source ones and we've got some

108
00:03:22,319 --> 00:03:25,920
proprietary ones

109
00:03:23,840 --> 00:03:27,599
um so governor ek powers uses cloud

110
00:03:25,920 --> 00:03:28,238
foundry but there are many different

111
00:03:27,599 --> 00:03:31,200
ways of

112
00:03:28,239 --> 00:03:32,480
building a platform as a service and

113
00:03:31,200 --> 00:03:35,040
this is our website

114
00:03:32,480 --> 00:03:36,079
um we are uk-based web hosting for

115
00:03:35,040 --> 00:03:38,798
government services

116
00:03:36,080 --> 00:03:40,560
there are many other government passes

117
00:03:38,799 --> 00:03:41,519
there's one in the u.s cloud.gov there's

118
00:03:40,560 --> 00:03:43,040
one in australia

119
00:03:41,519 --> 00:03:44,640
and i'm sure there's a bunch all across

120
00:03:43,040 --> 00:03:46,560
europe i

121
00:03:44,640 --> 00:03:48,238
had a brief look at sweden's and it

122
00:03:46,560 --> 00:03:50,760
looks pretty pretty legit

123
00:03:48,239 --> 00:03:52,239
um you can check us out on

124
00:03:50,760 --> 00:03:54,480
www.cloud.service.gov uk

125
00:03:52,239 --> 00:03:55,599
all the links are in the talk page on

126
00:03:54,480 --> 00:03:57,760
fosdem

127
00:03:55,599 --> 00:03:58,959
so now let's answer answer this question

128
00:03:57,760 --> 00:04:02,399
right like

129
00:03:58,959 --> 00:04:03,840
why do government need a pass like

130
00:04:02,400 --> 00:04:06,239
what are the unique challenges that we

131
00:04:03,840 --> 00:04:07,760
have that maybe like a typical

132
00:04:06,239 --> 00:04:09,280
private sector organization might not

133
00:04:07,760 --> 00:04:12,840
have like

134
00:04:09,280 --> 00:04:15,840
why is why is this even a question

135
00:04:12,840 --> 00:04:15,840
um

136
00:04:18,320 --> 00:04:21,279
like this is our value proposition

137
00:04:20,079 --> 00:04:22,720
government should be doing things that

138
00:04:21,279 --> 00:04:23,679
matter to you citizens and they

139
00:04:22,720 --> 00:04:25,280
shouldn't be like

140
00:04:23,680 --> 00:04:28,000
you know moving stuff around on paper

141
00:04:25,280 --> 00:04:29,599
and like playing with bills

142
00:04:28,000 --> 00:04:31,680
we want to create the concept of a

143
00:04:29,600 --> 00:04:32,800
service team do digital transformation

144
00:04:31,680 --> 00:04:34,960
and say like

145
00:04:32,800 --> 00:04:36,240
oh you want to renew your passport you

146
00:04:34,960 --> 00:04:37,758
don't know you

147
00:04:36,240 --> 00:04:39,360
shouldn't have to know that you have to

148
00:04:37,759 --> 00:04:40,800
go to the passport office

149
00:04:39,360 --> 00:04:42,720
with a bunch of forms you should just be

150
00:04:40,800 --> 00:04:44,240
able to open up your phone take a photo

151
00:04:42,720 --> 00:04:45,120
of yourself on your phone get in your

152
00:04:44,240 --> 00:04:46,880
passport

153
00:04:45,120 --> 00:04:48,560
that is like a dream that you can live

154
00:04:46,880 --> 00:04:51,360
right now um

155
00:04:48,560 --> 00:04:52,800
and also like the way that government

156
00:04:51,360 --> 00:04:54,479
services are funded

157
00:04:52,800 --> 00:04:56,160
is slightly different like you sometimes

158
00:04:54,479 --> 00:04:59,680
get a project rather than a product

159
00:04:56,160 --> 00:05:01,440
which means you build some software then

160
00:04:59,680 --> 00:05:03,440
it works now people aren't going to look

161
00:05:01,440 --> 00:05:05,840
at it anymore and

162
00:05:03,440 --> 00:05:07,520
being able to make teams be able to

163
00:05:05,840 --> 00:05:08,960
maintain software for low cost because

164
00:05:07,520 --> 00:05:09,840
everything is consistent

165
00:05:08,960 --> 00:05:11,520
because you've got a slightly

166
00:05:09,840 --> 00:05:13,840
opinionated platform is is really

167
00:05:11,520 --> 00:05:16,320
valuable

168
00:05:13,840 --> 00:05:17,119
also like it's the government like we've

169
00:05:16,320 --> 00:05:20,159
got

170
00:05:17,120 --> 00:05:23,759
constraints on our team how our

171
00:05:20,160 --> 00:05:26,639
like how our users use our platform

172
00:05:23,759 --> 00:05:28,080
so like our users are in different

173
00:05:26,639 --> 00:05:29,840
government to service

174
00:05:28,080 --> 00:05:31,280
different government departments with

175
00:05:29,840 --> 00:05:32,799
different priorities and we're like

176
00:05:31,280 --> 00:05:35,840
please could you update your software

177
00:05:32,800 --> 00:05:37,360
that's hard um we've also got a lot of

178
00:05:35,840 --> 00:05:38,560
workloads running on the powers right

179
00:05:37,360 --> 00:05:40,000
we've got

180
00:05:38,560 --> 00:05:41,680
people doing all sorts of interesting

181
00:05:40,000 --> 00:05:42,160
things from like data feed aggregation

182
00:05:41,680 --> 00:05:44,800
to

183
00:05:42,160 --> 00:05:46,160
hosting a like web app that you can use

184
00:05:44,800 --> 00:05:48,240
to report a pothole

185
00:05:46,160 --> 00:05:49,520
right like trying to make assumptions

186
00:05:48,240 --> 00:05:50,800
about what people are running are quite

187
00:05:49,520 --> 00:05:54,240
difficult

188
00:05:50,800 --> 00:05:56,240
and like we have a small team of about

189
00:05:54,240 --> 00:05:58,000
nine engineers and a couple of other

190
00:05:56,240 --> 00:05:59,360
folks on the team but we've got to run

191
00:05:58,000 --> 00:06:02,400
like a thousand apps

192
00:05:59,360 --> 00:06:04,479
um so we've got to like

193
00:06:02,400 --> 00:06:05,919
trust each other but also develop

194
00:06:04,479 --> 00:06:06,800
practices within our software

195
00:06:05,919 --> 00:06:10,080
development process

196
00:06:06,800 --> 00:06:11,280
that allow us to like act with autonomy

197
00:06:10,080 --> 00:06:14,479
and not have meetings and

198
00:06:11,280 --> 00:06:16,159
you know just collaborate asynchronously

199
00:06:14,479 --> 00:06:17,758
and we're only able to like build and

200
00:06:16,160 --> 00:06:19,120
run this platform because we have the

201
00:06:17,759 --> 00:06:21,680
open source community of

202
00:06:19,120 --> 00:06:24,000
like cloud foundry and concourse and

203
00:06:21,680 --> 00:06:26,880
like that's super super super valuable

204
00:06:24,000 --> 00:06:27,919
um so yes open source is good you

205
00:06:26,880 --> 00:06:30,960
probably all believe that

206
00:06:27,919 --> 00:06:32,400
you're here um so

207
00:06:30,960 --> 00:06:34,080
this is the service that we deliver to

208
00:06:32,400 --> 00:06:36,880
our users there's an api

209
00:06:34,080 --> 00:06:37,599
there's a cli you can run cf push on

210
00:06:36,880 --> 00:06:40,240
your laptop

211
00:06:37,600 --> 00:06:42,160
your application will get hosted you'll

212
00:06:40,240 --> 00:06:44,479
be able to visit it you'll be able to

213
00:06:42,160 --> 00:06:45,280
serve traffic your users will be able to

214
00:06:44,479 --> 00:06:47,440
use it

215
00:06:45,280 --> 00:06:49,119
we provide service brokers so you can

216
00:06:47,440 --> 00:06:50,000
say i want a database and that will be

217
00:06:49,120 --> 00:06:51,599
managed by

218
00:06:50,000 --> 00:06:53,120
software as a service you don't have to

219
00:06:51,599 --> 00:06:54,639
worry about managing backing up your

220
00:06:53,120 --> 00:06:56,880
database that's all done

221
00:06:54,639 --> 00:06:58,880
and we also have to deal with billing

222
00:06:56,880 --> 00:07:00,479
and say this is how much this department

223
00:06:58,880 --> 00:07:01,599
owes this department because they have

224
00:07:00,479 --> 00:07:04,639
spent this much

225
00:07:01,599 --> 00:07:06,080
on cloud infrastructure and like

226
00:07:04,639 --> 00:07:08,319
you know which developers are working on

227
00:07:06,080 --> 00:07:09,919
which programs and which

228
00:07:08,319 --> 00:07:12,160
services and things like that and then

229
00:07:09,919 --> 00:07:14,080
providing the ability for

230
00:07:12,160 --> 00:07:15,360
our users who are building services to

231
00:07:14,080 --> 00:07:18,240
be able to see like oh

232
00:07:15,360 --> 00:07:19,919
how is my app running in production and

233
00:07:18,240 --> 00:07:21,599
these are the tools we used to do it

234
00:07:19,919 --> 00:07:24,560
we've got concours in the middle we've

235
00:07:21,599 --> 00:07:26,560
got bosch terraform kefir prometheus

236
00:07:24,560 --> 00:07:28,080
and i'm going to briefly talk about what

237
00:07:26,560 --> 00:07:29,360
they're what they're all used for

238
00:07:28,080 --> 00:07:31,680
so then when we come to go through the

239
00:07:29,360 --> 00:07:33,520
pipeline we can see how they're used and

240
00:07:31,680 --> 00:07:36,160
how they're really valuable

241
00:07:33,520 --> 00:07:36,960
and so who here's used terraform before

242
00:07:36,160 --> 00:07:39,520
it's like

243
00:07:36,960 --> 00:07:41,039
pretty ubiquitous infrastructure is code

244
00:07:39,520 --> 00:07:42,240
you declare some resources somewhere

245
00:07:41,039 --> 00:07:45,280
like i want this

246
00:07:42,240 --> 00:07:47,039
network i want this vpc these subnets

247
00:07:45,280 --> 00:07:48,638
it will apply them you make some changes

248
00:07:47,039 --> 00:07:52,800
it works out the differences

249
00:07:48,639 --> 00:07:56,160
it's really versatile who is used bosch

250
00:07:52,800 --> 00:07:58,400
fewer people bosh um is kind of one of

251
00:07:56,160 --> 00:08:00,000
those tools that came a bit before

252
00:07:58,400 --> 00:08:00,400
kubernetes it feels a little bit dated

253
00:08:00,000 --> 00:08:02,639
now

254
00:08:00,400 --> 00:08:03,919
but it's you know really how we deliver

255
00:08:02,639 --> 00:08:07,199
all of this software

256
00:08:03,919 --> 00:08:09,840
um like

257
00:08:07,199 --> 00:08:11,440
it's a vm lifecycle manager and also a

258
00:08:09,840 --> 00:08:13,198
release engineering toolchain

259
00:08:11,440 --> 00:08:15,440
which is like a huge mouthful but it's

260
00:08:13,199 --> 00:08:16,080
how we package and deploy all of our

261
00:08:15,440 --> 00:08:17,919
software

262
00:08:16,080 --> 00:08:20,960
and it has like an apply process like

263
00:08:17,919 --> 00:08:24,080
terraform and works in like a ident way

264
00:08:20,960 --> 00:08:26,159
so that you can say i want 100 vms

265
00:08:24,080 --> 00:08:27,840
and they should have this offer on them

266
00:08:26,160 --> 00:08:28,960
and then when one of those vms goes away

267
00:08:27,840 --> 00:08:31,520
bosch is like

268
00:08:28,960 --> 00:08:32,718
that should exist i want that back now

269
00:08:31,520 --> 00:08:35,919
it comes back

270
00:08:32,719 --> 00:08:38,000
um i didn't put it on the slide

271
00:08:35,919 --> 00:08:39,760
because it's a bit mean but bosch has a

272
00:08:38,000 --> 00:08:41,599
very very steep learning curve

273
00:08:39,760 --> 00:08:42,880
and people have produced a wide variety

274
00:08:41,599 --> 00:08:44,320
of comics

275
00:08:42,880 --> 00:08:46,320
detailing how steep bosch's learning

276
00:08:44,320 --> 00:08:47,440
curve is and it's got a very very

277
00:08:46,320 --> 00:08:49,200
specific use case

278
00:08:47,440 --> 00:08:50,720
but it is absolutely fantastic of what

279
00:08:49,200 --> 00:08:53,839
it does

280
00:08:50,720 --> 00:08:57,279
and we use prometheus and we use kafana

281
00:08:53,839 --> 00:08:58,399
um visualizing and dashboarding and like

282
00:08:57,279 --> 00:08:59,360
collecting metrics about

283
00:08:58,399 --> 00:09:01,440
various different components in the

284
00:08:59,360 --> 00:09:04,399
system and this might not seem relevant

285
00:09:01,440 --> 00:09:05,839
maybe but it will be a bit more relevant

286
00:09:04,399 --> 00:09:07,680
later on in the talk

287
00:09:05,839 --> 00:09:09,120
and they're really really useful tools

288
00:09:07,680 --> 00:09:13,760
so if you haven't used them i

289
00:09:09,120 --> 00:09:15,600
encourage you to check them out so

290
00:09:13,760 --> 00:09:17,439
now we get to the bit which is actually

291
00:09:15,600 --> 00:09:19,279
about concourse um

292
00:09:17,440 --> 00:09:20,480
the thing about concourse is like you

293
00:09:19,279 --> 00:09:22,880
try and compare it to

294
00:09:20,480 --> 00:09:24,880
other things like it doesn't it's been

295
00:09:22,880 --> 00:09:27,279
used as a citd tool

296
00:09:24,880 --> 00:09:28,959
and it's really good at it but it's just

297
00:09:27,279 --> 00:09:31,040
a thing which does things

298
00:09:28,959 --> 00:09:32,399
like that's what it is and sometimes it

299
00:09:31,040 --> 00:09:33,279
will do them continuously this is a

300
00:09:32,399 --> 00:09:34,320
quote from

301
00:09:33,279 --> 00:09:38,160
one of the people who work on the

302
00:09:34,320 --> 00:09:39,680
concourse team check out concordci.org

303
00:09:38,160 --> 00:09:41,920
and it's a continuous thing do it it

304
00:09:39,680 --> 00:09:44,640
does things um

305
00:09:41,920 --> 00:09:46,079
but really it's about automation and

306
00:09:44,640 --> 00:09:48,399
extensibility and like

307
00:09:46,080 --> 00:09:49,760
we're trying to work out the process

308
00:09:48,399 --> 00:09:50,399
that you and i want to follow when we're

309
00:09:49,760 --> 00:09:53,439
building an

310
00:09:50,399 --> 00:09:54,880
engineering software and we want to make

311
00:09:53,440 --> 00:09:55,360
that streamlined we want to automate

312
00:09:54,880 --> 00:09:57,439
that

313
00:09:55,360 --> 00:09:59,040
and sometimes you and i will use the

314
00:09:57,440 --> 00:10:00,959
same stuff and we can

315
00:09:59,040 --> 00:10:02,800
share the same resources and code and

316
00:10:00,959 --> 00:10:04,079
all that and sometimes our process is a

317
00:10:02,800 --> 00:10:05,599
bit weird

318
00:10:04,079 --> 00:10:06,959
and so i shouldn't have to come along to

319
00:10:05,600 --> 00:10:07,839
your software and be like please support

320
00:10:06,959 --> 00:10:09,439
my use case

321
00:10:07,839 --> 00:10:11,040
i should be able to use the bits that

322
00:10:09,440 --> 00:10:12,240
are common and not use the bits that

323
00:10:11,040 --> 00:10:15,680
aren't

324
00:10:12,240 --> 00:10:17,120
and that's you know one of the design

325
00:10:15,680 --> 00:10:18,560
goals that make it really versatile for

326
00:10:17,120 --> 00:10:21,760
our use case

327
00:10:18,560 --> 00:10:23,199
and there are four concepts um

328
00:10:21,760 --> 00:10:24,319
that we kind of have to go through so we

329
00:10:23,200 --> 00:10:26,959
can understand how our concourse

330
00:10:24,320 --> 00:10:29,760
pipeline is going to work

331
00:10:26,959 --> 00:10:31,119
and some of them will make sense and

332
00:10:29,760 --> 00:10:33,040
some of them won't make sense because

333
00:10:31,120 --> 00:10:34,560
you're used to thinking about them

334
00:10:33,040 --> 00:10:36,240
as the word and not how they're using

335
00:10:34,560 --> 00:10:37,279
concourse and so we'll have to unpick a

336
00:10:36,240 --> 00:10:39,440
little bit of that

337
00:10:37,279 --> 00:10:41,760
so you've got pipelines and pipelines

338
00:10:39,440 --> 00:10:43,279
collect everything

339
00:10:41,760 --> 00:10:45,120
they collect all the other things like

340
00:10:43,279 --> 00:10:48,959
resources jobs and tasks

341
00:10:45,120 --> 00:10:51,040
um and they can represent like a unit of

342
00:10:48,959 --> 00:10:52,719
work like we've got a delivery pipeline

343
00:10:51,040 --> 00:10:54,240
we take some stuff and we get some stuff

344
00:10:52,720 --> 00:10:55,360
and in the middle there's some doing of

345
00:10:54,240 --> 00:10:58,160
things

346
00:10:55,360 --> 00:10:59,600
we've got resources and we've got jobs

347
00:10:58,160 --> 00:11:01,199
resources are like

348
00:10:59,600 --> 00:11:03,120
concourse wants you to put your state

349
00:11:01,200 --> 00:11:04,399
somewhere else and they want you to

350
00:11:03,120 --> 00:11:06,320
reason about your state

351
00:11:04,399 --> 00:11:07,440
and what do we mean by state we mean

352
00:11:06,320 --> 00:11:09,680
like code

353
00:11:07,440 --> 00:11:10,640
we mean release artifacts right we don't

354
00:11:09,680 --> 00:11:12,880
want them to be on

355
00:11:10,640 --> 00:11:14,560
our concourse server or on our build

356
00:11:12,880 --> 00:11:16,160
server we want you

357
00:11:14,560 --> 00:11:17,760
the pipeline user to have your code

358
00:11:16,160 --> 00:11:20,319
somewhere like object storage

359
00:11:17,760 --> 00:11:21,600
concourse won't will not let you say

360
00:11:20,320 --> 00:11:23,279
this lives on this vm

361
00:11:21,600 --> 00:11:24,800
you have to say it's going to live

362
00:11:23,279 --> 00:11:26,560
somewhere else

363
00:11:24,800 --> 00:11:28,560
that's how we can get like this safe

364
00:11:26,560 --> 00:11:30,560
distributed system

365
00:11:28,560 --> 00:11:32,399
jobs on the other hand are stateless

366
00:11:30,560 --> 00:11:34,719
they interact with resources

367
00:11:32,399 --> 00:11:36,320
they say i'm going to take your state

368
00:11:34,720 --> 00:11:38,800
and i'm going to move it around

369
00:11:36,320 --> 00:11:40,160
so like i'm going to do things to

370
00:11:38,800 --> 00:11:42,959
transform that state

371
00:11:40,160 --> 00:11:45,199
but i could run on any one of the like

372
00:11:42,959 --> 00:11:48,239
machines in this concourse cluster

373
00:11:45,200 --> 00:11:49,920
and then a job is well that's a job is

374
00:11:48,240 --> 00:11:52,399
composed of tasks which actually do the

375
00:11:49,920 --> 00:11:55,360
things to the resources

376
00:11:52,399 --> 00:11:56,399
let's kind of go a little bit more into

377
00:11:55,360 --> 00:11:58,720
technical detail

378
00:11:56,399 --> 00:11:59,680
right usually when you think of a cicd

379
00:11:58,720 --> 00:12:02,079
pipeline you think

380
00:11:59,680 --> 00:12:03,760
when this is triggered then this

381
00:12:02,079 --> 00:12:05,279
pipeline is going to run

382
00:12:03,760 --> 00:12:07,680
that's not how concourse thinks

383
00:12:05,279 --> 00:12:10,320
concourse is like a pipeline is a direct

384
00:12:07,680 --> 00:12:11,120
acyclic graph which means i've got a

385
00:12:10,320 --> 00:12:14,480
bunch of nodes

386
00:12:11,120 --> 00:12:16,240
and edges between them you don't just

387
00:12:14,480 --> 00:12:16,639
read a concourse pipeline like left to

388
00:12:16,240 --> 00:12:19,839
right

389
00:12:16,639 --> 00:12:21,600
kind of because smaller parts of the

390
00:12:19,839 --> 00:12:23,360
pipeline can trigger

391
00:12:21,600 --> 00:12:25,519
whenever they want right we're more

392
00:12:23,360 --> 00:12:27,839
talking about a flow

393
00:12:25,519 --> 00:12:29,279
and a pipeline is written in yaml and

394
00:12:27,839 --> 00:12:33,360
you apply it using a ci tool

395
00:12:29,279 --> 00:12:35,680
cli tool and concourse kind of like

396
00:12:33,360 --> 00:12:37,120
thinks about the pipeline when you're

397
00:12:35,680 --> 00:12:38,079
thinking about the web ui when you want

398
00:12:37,120 --> 00:12:39,839
to look at something

399
00:12:38,079 --> 00:12:41,199
it automatically generates a web ui so

400
00:12:39,839 --> 00:12:42,240
you can see what your pipeline looks

401
00:12:41,200 --> 00:12:45,360
like

402
00:12:42,240 --> 00:12:47,600
um jobs

403
00:12:45,360 --> 00:12:50,399
are kind of how you're going to organize

404
00:12:47,600 --> 00:12:51,600
your resources and tasks together

405
00:12:50,399 --> 00:12:53,760
and they're composed of a series of

406
00:12:51,600 --> 00:12:56,800
steps that have

407
00:12:53,760 --> 00:13:00,240
useful abstractions for how you

408
00:12:56,800 --> 00:13:02,160
like build your processes so you can say

409
00:13:00,240 --> 00:13:03,600
let's do these things in parallel okay

410
00:13:02,160 --> 00:13:05,040
now we've done those things in parallel

411
00:13:03,600 --> 00:13:07,040
do these series of steps

412
00:13:05,040 --> 00:13:10,240
oh i've got a step here that isn't

413
00:13:07,040 --> 00:13:10,240
critical so we can skip it

414
00:13:11,040 --> 00:13:15,360
and a task is like an interaction with a

415
00:13:14,399 --> 00:13:18,880
resource

416
00:13:15,360 --> 00:13:19,200
or it's doing a thing that's what step

417
00:13:18,880 --> 00:13:21,600
is

418
00:13:19,200 --> 00:13:23,839
a task is actually doing a thing so it's

419
00:13:21,600 --> 00:13:27,200
like i'll run this script or i'll

420
00:13:23,839 --> 00:13:29,760
like pull down like

421
00:13:27,200 --> 00:13:31,360
well just run your code basically it's

422
00:13:29,760 --> 00:13:32,959
executed in ephemeral environment and

423
00:13:31,360 --> 00:13:35,040
you have to specify the image

424
00:13:32,959 --> 00:13:36,000
concourse will manage the oci images

425
00:13:35,040 --> 00:13:38,240
that you specify so

426
00:13:36,000 --> 00:13:40,560
i want this to run within the context of

427
00:13:38,240 --> 00:13:43,440
ruby 2.6 and it will do that

428
00:13:40,560 --> 00:13:45,359
so you can't and this is really useful

429
00:13:43,440 --> 00:13:47,360
for operators because if i provide

430
00:13:45,360 --> 00:13:49,120
concourse as a service to like 200

431
00:13:47,360 --> 00:13:50,160
people in the org i don't want to manage

432
00:13:49,120 --> 00:13:52,639
change requests

433
00:13:50,160 --> 00:13:53,439
saying like hi can i have an agent with

434
00:13:52,639 --> 00:13:55,519
like

435
00:13:53,440 --> 00:13:56,880
ruby 2.6 on it and another agent with

436
00:13:55,519 --> 00:13:59,920
ruby 2.4 on it

437
00:13:56,880 --> 00:14:03,600
and you'll see patterns when people use

438
00:13:59,920 --> 00:14:05,839
like when the

439
00:14:03,600 --> 00:14:08,079
workloads of your ci system are not

440
00:14:05,839 --> 00:14:11,279
abstract are not abstracted into like

441
00:14:08,079 --> 00:14:12,719
how the user thinks about like using the

442
00:14:11,279 --> 00:14:15,360
service they'll say like

443
00:14:12,720 --> 00:14:17,040
i need you another team to like install

444
00:14:15,360 --> 00:14:19,920
this software for me and

445
00:14:17,040 --> 00:14:19,920
we don't want any of that

446
00:14:20,240 --> 00:14:26,880
the flow control within a job

447
00:14:23,600 --> 00:14:29,360
um is

448
00:14:26,880 --> 00:14:30,399
like this is what a step is let's say we

449
00:14:29,360 --> 00:14:32,639
want to run

450
00:14:30,399 --> 00:14:34,880
i want to download all this stuff in

451
00:14:32,639 --> 00:14:37,680
parallel and then once that's done

452
00:14:34,880 --> 00:14:38,560
do this in series and then i maybe want

453
00:14:37,680 --> 00:14:40,239
to

454
00:14:38,560 --> 00:14:42,079
execute this code but if the code

455
00:14:40,240 --> 00:14:43,839
execution fails it doesn't matter

456
00:14:42,079 --> 00:14:45,920
you can get concourse to update other

457
00:14:43,839 --> 00:14:48,320
concourse pipelines dynamically

458
00:14:45,920 --> 00:14:50,160
um which means you can like get a

459
00:14:48,320 --> 00:14:51,839
pipeline to coordinate other pipelines

460
00:14:50,160 --> 00:14:54,000
which is really neat

461
00:14:51,839 --> 00:14:56,160
and then on the right we've got resource

462
00:14:54,000 --> 00:14:57,279
interactions so we've externalized our

463
00:14:56,160 --> 00:14:59,279
state

464
00:14:57,279 --> 00:15:00,320
how like what are the operations

465
00:14:59,279 --> 00:15:02,480
associated with

466
00:15:00,320 --> 00:15:03,920
talking about our state so in the

467
00:15:02,480 --> 00:15:04,720
background concourse will check for

468
00:15:03,920 --> 00:15:06,959
resources

469
00:15:04,720 --> 00:15:08,240
as they're updated as they change and

470
00:15:06,959 --> 00:15:11,439
that can then

471
00:15:08,240 --> 00:15:12,240
lead other bits of code to execute

472
00:15:11,440 --> 00:15:14,000
somewhere else

473
00:15:12,240 --> 00:15:15,279
and we'll this will make sense when we

474
00:15:14,000 --> 00:15:16,959
go through an example

475
00:15:15,279 --> 00:15:19,760
and then getting resources like giving

476
00:15:16,959 --> 00:15:21,599
you that state putting resources is like

477
00:15:19,760 --> 00:15:24,399
the stuff that we just did locally needs

478
00:15:21,600 --> 00:15:24,399
to live over there

479
00:15:24,720 --> 00:15:28,240
so some examples of what a task is going

480
00:15:26,880 --> 00:15:29,040
to do it's going to be like i've got

481
00:15:28,240 --> 00:15:31,680
this code

482
00:15:29,040 --> 00:15:34,240
in this environment i want to build that

483
00:15:31,680 --> 00:15:36,239
into a container image

484
00:15:34,240 --> 00:15:38,639
or i've got this code i want to generate

485
00:15:36,240 --> 00:15:41,120
a release artifact like a binary

486
00:15:38,639 --> 00:15:41,920
or i've got some code i want to run some

487
00:15:41,120 --> 00:15:45,600
tasks on it

488
00:15:41,920 --> 00:15:47,839
or the difference between this commit

489
00:15:45,600 --> 00:15:49,360
and or this the master branch and the

490
00:15:47,839 --> 00:15:51,120
release that we're about to cut

491
00:15:49,360 --> 00:15:52,560
are these commits let's generate some

492
00:15:51,120 --> 00:15:54,000
automated release notes

493
00:15:52,560 --> 00:15:55,839
so that we can send out a release and it

494
00:15:54,000 --> 00:15:56,720
all makes sense and like you and i don't

495
00:15:55,839 --> 00:15:59,519
have to

496
00:15:56,720 --> 00:16:00,160
like sit in the release email and be

497
00:15:59,519 --> 00:16:02,160
like we've

498
00:16:00,160 --> 00:16:03,759
generated these release notes by looking

499
00:16:02,160 --> 00:16:06,639
at the commits because

500
00:16:03,759 --> 00:16:08,079
why um and then we've got some resource

501
00:16:06,639 --> 00:16:08,959
types right like we've got some state in

502
00:16:08,079 --> 00:16:11,359
the world

503
00:16:08,959 --> 00:16:13,119
but what is that state like that state

504
00:16:11,360 --> 00:16:14,079
could be an image repository for a

505
00:16:13,120 --> 00:16:16,720
container image

506
00:16:14,079 --> 00:16:18,000
could be your code in git it could be a

507
00:16:16,720 --> 00:16:20,240
file in object storage

508
00:16:18,000 --> 00:16:21,040
it could be a semantic version that you

509
00:16:20,240 --> 00:16:23,440
have

510
00:16:21,040 --> 00:16:24,959
in object storage and you want to like

511
00:16:23,440 --> 00:16:27,279
manage the semantic version

512
00:16:24,959 --> 00:16:28,638
so when the semantic version changes

513
00:16:27,279 --> 00:16:31,680
execute this pipeline

514
00:16:28,639 --> 00:16:32,800
or when this git repo comes in we'll

515
00:16:31,680 --> 00:16:36,000
build the code

516
00:16:32,800 --> 00:16:38,399
test it push the release artifact

517
00:16:36,000 --> 00:16:39,759
then bump the somatic version and then

518
00:16:38,399 --> 00:16:42,959
other pipelines will trigger off

519
00:16:39,759 --> 00:16:45,839
that um a distributed lock on

520
00:16:42,959 --> 00:16:46,319
lock or a pool come back to this later

521
00:16:45,839 --> 00:16:49,519
um

522
00:16:46,320 --> 00:16:52,560
but then also like what is state

523
00:16:49,519 --> 00:16:55,759
you could have a terraform deployment

524
00:16:52,560 --> 00:16:56,959
as a state file as a bit of state in the

525
00:16:55,759 --> 00:16:58,560
external world

526
00:16:56,959 --> 00:17:00,719
concourse will check when that changes

527
00:16:58,560 --> 00:17:03,199
and that will trigger a new pipeline

528
00:17:00,720 --> 00:17:04,000
um or a cloud foundry app for it like

529
00:17:03,199 --> 00:17:06,319
i've got my code

530
00:17:04,000 --> 00:17:07,919
i'll push it to cloud foundry when my

531
00:17:06,319 --> 00:17:09,839
app changes in cloud foundry execute

532
00:17:07,919 --> 00:17:13,199
this pipeline

533
00:17:09,839 --> 00:17:16,480
so this is an example of

534
00:17:13,199 --> 00:17:19,039
what a concourse pipeline looks like

535
00:17:16,480 --> 00:17:20,880
we're getting in some code on the left

536
00:17:19,039 --> 00:17:22,559
we're going to run some tests on it

537
00:17:20,880 --> 00:17:23,919
if the tests pass then we're going to

538
00:17:22,559 --> 00:17:24,879
deploy it and

539
00:17:23,919 --> 00:17:27,439
along the way we're going to do some

540
00:17:24,880 --> 00:17:28,799
bookkeeping we've got a

541
00:17:27,439 --> 00:17:30,640
multi-environment

542
00:17:28,799 --> 00:17:33,360
continuous deployment right all the way

543
00:17:30,640 --> 00:17:35,280
on the left we've got

544
00:17:33,360 --> 00:17:36,719
it's kind of hard to see this is why in

545
00:17:35,280 --> 00:17:39,840
the concourse ui you can like

546
00:17:36,720 --> 00:17:41,840
zoom in and see what's going on

547
00:17:39,840 --> 00:17:44,240
um we've got a build step and then we've

548
00:17:41,840 --> 00:17:46,000
got three identical environment release

549
00:17:44,240 --> 00:17:48,960
steps where we're saying

550
00:17:46,000 --> 00:17:49,440
here we go deploy it's preview runs for

551
00:17:48,960 --> 00:17:51,520
tests

552
00:17:49,440 --> 00:17:53,520
cool all right deploy it to staging run

553
00:17:51,520 --> 00:17:55,918
some tests cool

554
00:17:53,520 --> 00:17:57,918
move on um we've got a branching

555
00:17:55,919 --> 00:17:59,200
pipeline so

556
00:17:57,919 --> 00:18:00,400
this is where we can start to see the

557
00:17:59,200 --> 00:18:02,080
difference between triggering and

558
00:18:00,400 --> 00:18:05,600
non-triggering resources we've got

559
00:18:02,080 --> 00:18:07,120
my code repo which has some code in it

560
00:18:05,600 --> 00:18:08,879
and we've got some lines going into

561
00:18:07,120 --> 00:18:12,719
these jobs over here

562
00:18:08,880 --> 00:18:16,080
like tests would go 1.1 tests would go

563
00:18:12,720 --> 00:18:17,600
go 11 go 12 go 13. um and we're going to

564
00:18:16,080 --> 00:18:19,120
pull in the container image for those

565
00:18:17,600 --> 00:18:21,439
things so we don't have to like do a

566
00:18:19,120 --> 00:18:22,959
build step every single time

567
00:18:21,440 --> 00:18:24,559
but when the images change there's a

568
00:18:22,960 --> 00:18:27,600
dashed line between go

569
00:18:24,559 --> 00:18:28,399
1.11 but there's a solid line between my

570
00:18:27,600 --> 00:18:30,480
code repo

571
00:18:28,400 --> 00:18:32,080
so the build is only going to trigger

572
00:18:30,480 --> 00:18:34,160
when the code repo changes that's what

573
00:18:32,080 --> 00:18:36,080
that means

574
00:18:34,160 --> 00:18:38,320
and you can autonomy a manual release

575
00:18:36,080 --> 00:18:38,960
process and i'm using the word autonomy

576
00:18:38,320 --> 00:18:41,360
from this

577
00:18:38,960 --> 00:18:42,000
really lovely book um toyota production

578
00:18:41,360 --> 00:18:44,799
system

579
00:18:42,000 --> 00:18:47,039
which is talking about like how workers

580
00:18:44,799 --> 00:18:49,760
inside a pipeline can like

581
00:18:47,039 --> 00:18:50,320
engage with machines in like a human

582
00:18:49,760 --> 00:18:52,240
process

583
00:18:50,320 --> 00:18:54,000
right like we're making decisions about

584
00:18:52,240 --> 00:18:56,480
how we're going to release software

585
00:18:54,000 --> 00:18:58,640
or manage a software release process or

586
00:18:56,480 --> 00:19:00,320
some other software production process

587
00:18:58,640 --> 00:19:02,000
but we don't have to make it fully

588
00:19:00,320 --> 00:19:04,320
automated so

589
00:19:02,000 --> 00:19:05,840
we've got this command line tool at work

590
00:19:04,320 --> 00:19:07,439
that we distribute to everyone in our

591
00:19:05,840 --> 00:19:10,000
organization

592
00:19:07,440 --> 00:19:11,280
um but we only want to generate a

593
00:19:10,000 --> 00:19:12,480
release when it's going to

594
00:19:11,280 --> 00:19:14,000
actually like make a material

595
00:19:12,480 --> 00:19:14,400
improvement to someone's life like a bug

596
00:19:14,000 --> 00:19:16,720
fix

597
00:19:14,400 --> 00:19:18,080
if it's just us doing development right

598
00:19:16,720 --> 00:19:19,280
we don't want to cut that release every

599
00:19:18,080 --> 00:19:22,720
single time

600
00:19:19,280 --> 00:19:25,200
so this is quite an interesting

601
00:19:22,720 --> 00:19:26,960
pipeline wherein when this semantic

602
00:19:25,200 --> 00:19:28,720
version changes

603
00:19:26,960 --> 00:19:30,160
we're going to do this build step and

604
00:19:28,720 --> 00:19:33,280
it's going to generate

605
00:19:30,160 --> 00:19:35,760
a draft release in github

606
00:19:33,280 --> 00:19:37,120
but this will only kick off once we've

607
00:19:35,760 --> 00:19:38,720
triggered one of these two things which

608
00:19:37,120 --> 00:19:39,840
will either bump the cinematic version

609
00:19:38,720 --> 00:19:42,960
by a minor version

610
00:19:39,840 --> 00:19:44,799
or by a major version which means i can

611
00:19:42,960 --> 00:19:46,080
you know talk to one of my colleagues

612
00:19:44,799 --> 00:19:46,799
like oh do we want to release a new

613
00:19:46,080 --> 00:19:50,080
version of this

614
00:19:46,799 --> 00:19:51,679
yes or no all right we'll go and bump

615
00:19:50,080 --> 00:19:53,360
the version in concourse and it will go

616
00:19:51,679 --> 00:19:55,679
and do its thing

617
00:19:53,360 --> 00:19:57,360
i think a lot of the time in in these

618
00:19:55,679 --> 00:19:58,480
sorts of

619
00:19:57,360 --> 00:19:59,918
like when you're collaborating on a

620
00:19:58,480 --> 00:20:01,360
project sometimes it falls upon the

621
00:19:59,919 --> 00:20:03,200
burden of the maintainer to like

622
00:20:01,360 --> 00:20:04,959
manage a release process run a script

623
00:20:03,200 --> 00:20:06,960
and all that stuff and it can either be

624
00:20:04,960 --> 00:20:10,000
like extremely draining for that person

625
00:20:06,960 --> 00:20:11,200
or it can be um like a blocker to

626
00:20:10,000 --> 00:20:12,559
delivery

627
00:20:11,200 --> 00:20:14,320
and when you're able to like express

628
00:20:12,559 --> 00:20:16,080
that in a pipeline like

629
00:20:14,320 --> 00:20:18,000
express your process in a pipeline

630
00:20:16,080 --> 00:20:22,480
instead of just

631
00:20:18,000 --> 00:20:25,280
going through one single person then

632
00:20:22,480 --> 00:20:27,200
that's beneficial so let's we're all

633
00:20:25,280 --> 00:20:30,158
yaml engineers it's 20 20.

634
00:20:27,200 --> 00:20:31,360
uh let's let's do some yaml now so we're

635
00:20:30,159 --> 00:20:33,679
going to continuously

636
00:20:31,360 --> 00:20:35,360
deploy some terraform when terraforming

637
00:20:33,679 --> 00:20:37,600
kit repo changes we want it to be

638
00:20:35,360 --> 00:20:38,879
continuously deployed

639
00:20:37,600 --> 00:20:41,918
and that pipeline is going to look like

640
00:20:38,880 --> 00:20:42,960
this when my code repo changes it's

641
00:20:41,919 --> 00:20:45,600
automatically going to trigger

642
00:20:42,960 --> 00:20:48,400
this deployment code job and then that's

643
00:20:45,600 --> 00:20:50,959
going to update my terraform deployment

644
00:20:48,400 --> 00:20:52,080
so when building a chronicles pipeline

645
00:20:50,960 --> 00:20:54,320
you kind of want to think about

646
00:20:52,080 --> 00:20:56,000
human names like what does this mean to

647
00:20:54,320 --> 00:20:57,840
me

648
00:20:56,000 --> 00:20:59,919
and then what is it doing right

649
00:20:57,840 --> 00:21:02,959
resources what is this

650
00:20:59,919 --> 00:21:04,640
jobs what is it doing

651
00:21:02,960 --> 00:21:05,760
so we've got our code and we've got my

652
00:21:04,640 --> 00:21:06,960
terraform deployment and i'm going to

653
00:21:05,760 --> 00:21:08,799
deploy the code

654
00:21:06,960 --> 00:21:10,080
so this is how we would configure a git

655
00:21:08,799 --> 00:21:13,360
resource we're saying

656
00:21:10,080 --> 00:21:14,480
it's a git resource um and it comes from

657
00:21:13,360 --> 00:21:17,439
the develop branch

658
00:21:14,480 --> 00:21:18,159
and this is its uri this is my terraform

659
00:21:17,440 --> 00:21:20,480
deployment

660
00:21:18,159 --> 00:21:22,159
it's a terraform resource and then

661
00:21:20,480 --> 00:21:23,600
there's some configuration for that but

662
00:21:22,159 --> 00:21:24,320
it's like state bucket and things like

663
00:21:23,600 --> 00:21:28,000
that

664
00:21:24,320 --> 00:21:29,678
um and then we're gonna this is our job

665
00:21:28,000 --> 00:21:31,440
we only want to run one terraform

666
00:21:29,679 --> 00:21:34,880
deployment at a time which is why it is

667
00:21:31,440 --> 00:21:36,080
serial and the plan is get my code

668
00:21:34,880 --> 00:21:37,760
when my code changes we're going to

669
00:21:36,080 --> 00:21:38,799
trigger this pipeline and then we're

670
00:21:37,760 --> 00:21:39,600
going to put it to the terraform

671
00:21:38,799 --> 00:21:42,639
resource

672
00:21:39,600 --> 00:21:44,639
and that's it so

673
00:21:42,640 --> 00:21:46,320
that's our pipeline this pipeline will

674
00:21:44,640 --> 00:21:48,000
deploy terraform changes whenever the

675
00:21:46,320 --> 00:21:51,360
developed branch changes

676
00:21:48,000 --> 00:21:54,240
um and this is a configuration for

677
00:21:51,360 --> 00:21:56,000
um so we're saying the state file lives

678
00:21:54,240 --> 00:21:57,840
in this bucket

679
00:21:56,000 --> 00:21:59,360
and here are access keys and concourse

680
00:21:57,840 --> 00:22:01,039
will manage credentials

681
00:21:59,360 --> 00:22:02,799
or it will delegate the management of

682
00:22:01,039 --> 00:22:06,320
credentials to credential providers

683
00:22:02,799 --> 00:22:09,520
so uh amazon simple systems manager

684
00:22:06,320 --> 00:22:10,720
um kubernetes vol etc so

685
00:22:09,520 --> 00:22:12,240
when these credentials are needed

686
00:22:10,720 --> 00:22:13,679
they'll be pulled from the credentials

687
00:22:12,240 --> 00:22:17,039
provider and used

688
00:22:13,679 --> 00:22:18,240
which is quite neat and then once we've

689
00:22:17,039 --> 00:22:21,280
done our pipeline

690
00:22:18,240 --> 00:22:22,640
we will then apply it set it it's going

691
00:22:21,280 --> 00:22:26,879
to run

692
00:22:22,640 --> 00:22:28,400
yay cool go us oh no um

693
00:22:26,880 --> 00:22:30,960
a common pattern within organizations

694
00:22:28,400 --> 00:22:33,679
once you adopt continuous deployment is

695
00:22:30,960 --> 00:22:34,400
people don't look at pipelines because

696
00:22:33,679 --> 00:22:36,720
they expect

697
00:22:34,400 --> 00:22:38,400
i've merged it in git it will now work

698
00:22:36,720 --> 00:22:40,960
and sometimes it doesn't work

699
00:22:38,400 --> 00:22:42,640
so let's add like a slack notification

700
00:22:40,960 --> 00:22:45,360
if the build fails

701
00:22:42,640 --> 00:22:47,520
so we're going to say our slack channel

702
00:22:45,360 --> 00:22:51,360
is a resource that we can update

703
00:22:47,520 --> 00:22:53,760
it's a slack resource and then

704
00:22:51,360 --> 00:22:55,520
when our put step fails as in the

705
00:22:53,760 --> 00:22:56,400
terraform deployment fails we want to

706
00:22:55,520 --> 00:23:00,000
say

707
00:22:56,400 --> 00:23:01,600
in the develop channel um airplane says

708
00:23:00,000 --> 00:23:03,520
build name failed check it out

709
00:23:01,600 --> 00:23:04,959
and then whatever message you want to

710
00:23:03,520 --> 00:23:06,879
send and then various different bits of

711
00:23:04,960 --> 00:23:09,120
context to passes environment variables

712
00:23:06,880 --> 00:23:10,640
so you can get a contextual notification

713
00:23:09,120 --> 00:23:12,639
and that means it looks like this

714
00:23:10,640 --> 00:23:14,000
which means if our terraform deployment

715
00:23:12,640 --> 00:23:16,080
fails then we can apply failure

716
00:23:14,000 --> 00:23:17,120
notifications

717
00:23:16,080 --> 00:23:18,559
so if you want to build your own

718
00:23:17,120 --> 00:23:20,080
resource or you want to extend concourse

719
00:23:18,559 --> 00:23:21,520
in a way that like a resource doesn't

720
00:23:20,080 --> 00:23:23,918
exist for you

721
00:23:21,520 --> 00:23:25,280
you have to write got no no you you

722
00:23:23,919 --> 00:23:27,039
don't have to write any java

723
00:23:25,280 --> 00:23:29,200
concourse is a go project but the way

724
00:23:27,039 --> 00:23:31,520
that you extend it is by saying

725
00:23:29,200 --> 00:23:32,559
build a docker image or any other

726
00:23:31,520 --> 00:23:34,000
compatible image

727
00:23:32,559 --> 00:23:35,840
and you have to implement three

728
00:23:34,000 --> 00:23:39,039
different executables

729
00:23:35,840 --> 00:23:39,360
check in and out conquest will execute

730
00:23:39,039 --> 00:23:41,679
check

731
00:23:39,360 --> 00:23:44,000
periodically with some credentials if

732
00:23:41,679 --> 00:23:45,520
you need any credentials

733
00:23:44,000 --> 00:23:48,400
and then you're going to emit a list of

734
00:23:45,520 --> 00:23:50,720
resources a list of versions

735
00:23:48,400 --> 00:23:52,320
in is when you're pulling in stuff like

736
00:23:50,720 --> 00:23:54,720
you're populating

737
00:23:52,320 --> 00:23:56,000
the local state and out is when someone

738
00:23:54,720 --> 00:23:58,400
puts it's like here's

739
00:23:56,000 --> 00:23:59,039
here's some stuff put it in wherever the

740
00:23:58,400 --> 00:24:02,400
state is

741
00:23:59,039 --> 00:24:04,000
living here's another haiku

742
00:24:02,400 --> 00:24:06,480
let's talk about covert uk powers and

743
00:24:04,000 --> 00:24:09,200
how we use concourse

744
00:24:06,480 --> 00:24:10,240
uh when we're releasing powers we care

745
00:24:09,200 --> 00:24:12,559
about our users

746
00:24:10,240 --> 00:24:15,279
and so we want to say things like i want

747
00:24:12,559 --> 00:24:17,678
my applications running my platform to

748
00:24:15,279 --> 00:24:19,919
be four nines available and i want my

749
00:24:17,679 --> 00:24:22,400
api to be three nines available

750
00:24:19,919 --> 00:24:23,520
uh and we want to encode this in our

751
00:24:22,400 --> 00:24:26,400
pipeline so that

752
00:24:23,520 --> 00:24:26,720
like no one can release code uh without

753
00:24:26,400 --> 00:24:30,240
like

754
00:24:26,720 --> 00:24:33,440
meeting these objectives

755
00:24:30,240 --> 00:24:37,279
and this is what our pipeline looks like

756
00:24:33,440 --> 00:24:39,440
oh no um it's a bit scary uh because

757
00:24:37,279 --> 00:24:40,400
you've just joined the team and there's

758
00:24:39,440 --> 00:24:42,240
a lot of stuff going on

759
00:24:40,400 --> 00:24:44,080
but it's fine we're going to go through

760
00:24:42,240 --> 00:24:46,000
it um

761
00:24:44,080 --> 00:24:47,520
so the first thing that we want to do in

762
00:24:46,000 --> 00:24:49,200
certain steps in the pipeline is we want

763
00:24:47,520 --> 00:24:50,799
to lock and unlock and we want to say

764
00:24:49,200 --> 00:24:52,960
nothing else is going to change this

765
00:24:50,799 --> 00:24:54,799
while we're doing these steps

766
00:24:52,960 --> 00:24:56,159
locking is an explicit thing because

767
00:24:54,799 --> 00:24:57,120
like you don't want to lock things

768
00:24:56,159 --> 00:24:58,240
unnecessarily

769
00:24:57,120 --> 00:24:59,600
because then you're just slowing down

770
00:24:58,240 --> 00:25:01,039
your development process unless you

771
00:24:59,600 --> 00:25:02,158
absolutely need to

772
00:25:01,039 --> 00:25:04,080
we're then going to generate some

773
00:25:02,159 --> 00:25:05,440
configuration like some secrets or we're

774
00:25:04,080 --> 00:25:07,360
going to generate some certificates that

775
00:25:05,440 --> 00:25:10,640
are going to be used later

776
00:25:07,360 --> 00:25:12,559
in the platform rather than in concourse

777
00:25:10,640 --> 00:25:14,559
we're then going to wait while we're

778
00:25:12,559 --> 00:25:15,279
starting our availability tests which

779
00:25:14,559 --> 00:25:16,639
live

780
00:25:15,279 --> 00:25:19,760
at the end of the arrow those two little

781
00:25:16,640 --> 00:25:21,279
boxes we're then going to run terraform

782
00:25:19,760 --> 00:25:23,279
once terraform has finished deploying

783
00:25:21,279 --> 00:25:24,880
we've got our network we've got our vpc

784
00:25:23,279 --> 00:25:28,080
we can start to do things we can sort

785
00:25:24,880 --> 00:25:30,880
the deploy vms and software

786
00:25:28,080 --> 00:25:32,799
we're then going to deploy cloud foundry

787
00:25:30,880 --> 00:25:35,360
uh using bosch

788
00:25:32,799 --> 00:25:37,039
once cloud foundry is deployed um we're

789
00:25:35,360 --> 00:25:38,000
going to deploy some other things using

790
00:25:37,039 --> 00:25:39,679
bosch and we're going to deploy some

791
00:25:38,000 --> 00:25:40,640
service brokers and configure some users

792
00:25:39,679 --> 00:25:42,000
just

793
00:25:40,640 --> 00:25:44,000
general little bits of things that

794
00:25:42,000 --> 00:25:46,640
conquest will manage for us um

795
00:25:44,000 --> 00:25:47,440
like things that like usually you would

796
00:25:46,640 --> 00:25:50,320
have it as

797
00:25:47,440 --> 00:25:51,120
script then we've got a whole boatload

798
00:25:50,320 --> 00:25:53,360
of tests

799
00:25:51,120 --> 00:25:54,399
and we've got some other apps here that

800
00:25:53,360 --> 00:25:56,000
are deployed

801
00:25:54,400 --> 00:25:57,760
the interesting thing about these apps

802
00:25:56,000 --> 00:25:59,360
which is um

803
00:25:57,760 --> 00:26:01,120
these apps aren't affected by the

804
00:25:59,360 --> 00:26:02,719
locking process which means

805
00:26:01,120 --> 00:26:04,239
like if we're just deploying some other

806
00:26:02,720 --> 00:26:05,600
miscellaneous microservices

807
00:26:04,240 --> 00:26:07,440
they're kind of fast passed to

808
00:26:05,600 --> 00:26:10,080
production each of these

809
00:26:07,440 --> 00:26:11,600
um jobs contains forgetting of the

810
00:26:10,080 --> 00:26:13,120
resource the triggering

811
00:26:11,600 --> 00:26:14,799
the deployment and then running the

812
00:26:13,120 --> 00:26:16,639
tests

813
00:26:14,799 --> 00:26:18,320
um then we're going to do certificate

814
00:26:16,640 --> 00:26:21,520
rotation um

815
00:26:18,320 --> 00:26:22,480
so in a platform we've got maybe 200 cas

816
00:26:21,520 --> 00:26:24,639
to rotate

817
00:26:22,480 --> 00:26:26,559
every component has a ca and every

818
00:26:24,640 --> 00:26:29,679
everything else has to understand

819
00:26:26,559 --> 00:26:31,520
like and trust different components cas

820
00:26:29,679 --> 00:26:32,880
so every time we run the deployment

821
00:26:31,520 --> 00:26:33,600
pipeline which will run multiple times

822
00:26:32,880 --> 00:26:34,960
per day

823
00:26:33,600 --> 00:26:36,799
we'll check which parts of the

824
00:26:34,960 --> 00:26:39,200
certificates need to be rotated

825
00:26:36,799 --> 00:26:40,720
and then we'll do a few steps in the

826
00:26:39,200 --> 00:26:42,080
certificate rotation process so next

827
00:26:40,720 --> 00:26:43,520
time things are deployed

828
00:26:42,080 --> 00:26:45,520
everyone's certificates trust everything

829
00:26:43,520 --> 00:26:47,120
else um and so

830
00:26:45,520 --> 00:26:49,039
no human being has to reason about

831
00:26:47,120 --> 00:26:49,600
certificate rotation and this is one of

832
00:26:49,039 --> 00:26:51,039
the

833
00:26:49,600 --> 00:26:53,199
really useful things that we get from

834
00:26:51,039 --> 00:26:55,919
bosch and cred hub

835
00:26:53,200 --> 00:26:58,000
then we git tag our release to say this

836
00:26:55,919 --> 00:27:00,320
is a good release

837
00:26:58,000 --> 00:27:01,360
um and then we're done now let's do it

838
00:27:00,320 --> 00:27:04,320
again

839
00:27:01,360 --> 00:27:05,039
and because that was we've deployed one

840
00:27:04,320 --> 00:27:06,639
environment

841
00:27:05,039 --> 00:27:09,679
we've got a few we've got a couple of

842
00:27:06,640 --> 00:27:11,120
production environments and so

843
00:27:09,679 --> 00:27:13,600
we're going to do this we're going to

844
00:27:11,120 --> 00:27:15,360
say when staging finishes then

845
00:27:13,600 --> 00:27:18,000
we've got our git tags down here that

846
00:27:15,360 --> 00:27:21,360
say i've got a new thing to release

847
00:27:18,000 --> 00:27:23,700
so let's release it um and then the

848
00:27:21,360 --> 00:27:24,879
production pipelines will run um

849
00:27:23,700 --> 00:27:27,520
[Music]

850
00:27:24,880 --> 00:27:28,960
but in production uh and normal

851
00:27:27,520 --> 00:27:29,760
deployments are fully automated right

852
00:27:28,960 --> 00:27:30,960
like

853
00:27:29,760 --> 00:27:32,559
every time you merge it will get

854
00:27:30,960 --> 00:27:34,000
deployed sometimes this deployment

855
00:27:32,559 --> 00:27:36,158
pipeline will take four hours because

856
00:27:34,000 --> 00:27:37,440
you've rotated every single vm in the

857
00:27:36,159 --> 00:27:39,200
cluster and sometimes

858
00:27:37,440 --> 00:27:40,880
a deployment will take minutes just

859
00:27:39,200 --> 00:27:43,279
waiting for our tests to run

860
00:27:40,880 --> 00:27:45,120
uh and deployments like there's no

861
00:27:43,279 --> 00:27:46,399
overhead of having a deployment right

862
00:27:45,120 --> 00:27:47,199
you're in the cit endeavour and you're

863
00:27:46,399 --> 00:27:49,199
probably

864
00:27:47,200 --> 00:27:50,240
invested in some sort of delivery

865
00:27:49,200 --> 00:27:52,480
process

866
00:27:50,240 --> 00:27:54,240
so that makes sense and deployments will

867
00:27:52,480 --> 00:27:56,799
fail safely we've got the locks

868
00:27:54,240 --> 00:27:57,840
we've got some tests if our deployment

869
00:27:56,799 --> 00:28:01,440
pipeline says

870
00:27:57,840 --> 00:28:04,399
no during staging we didn't

871
00:28:01,440 --> 00:28:05,919
meet our availability expectations then

872
00:28:04,399 --> 00:28:07,120
a human being can either say

873
00:28:05,919 --> 00:28:09,039
i'm going to override that process

874
00:28:07,120 --> 00:28:10,000
because this is a critical security fix

875
00:28:09,039 --> 00:28:12,320
that i'm fine

876
00:28:10,000 --> 00:28:14,080
taking less availability or we'll say

877
00:28:12,320 --> 00:28:15,520
all right let's reset staging to what

878
00:28:14,080 --> 00:28:18,559
production is like

879
00:28:15,520 --> 00:28:20,240
dig into the root cause nice and bosch

880
00:28:18,559 --> 00:28:23,760
does a lot of work here

881
00:28:20,240 --> 00:28:25,120
um the ui is anger optimized right like

882
00:28:23,760 --> 00:28:27,039
concourse generates this for you

883
00:28:25,120 --> 00:28:28,719
it's like look this is why your pipeline

884
00:28:27,039 --> 00:28:31,200
is red like it's

885
00:28:28,720 --> 00:28:32,159
red here dig in and then you click

886
00:28:31,200 --> 00:28:33,440
through these and you'll get all the

887
00:28:32,159 --> 00:28:35,279
contextual logs

888
00:28:33,440 --> 00:28:36,640
it's visually obvious like i'll get

889
00:28:35,279 --> 00:28:37,919
working up at three in the morning maybe

890
00:28:36,640 --> 00:28:41,200
and be like what's broken

891
00:28:37,919 --> 00:28:42,559
oh this has failed um and now we can

892
00:28:41,200 --> 00:28:43,279
talk a little bit how we integrate with

893
00:28:42,559 --> 00:28:47,039
the grafana

894
00:28:43,279 --> 00:28:49,520
so when we start and end our pipeline we

895
00:28:47,039 --> 00:28:51,440
put an overlay over our grafana

896
00:28:49,520 --> 00:28:54,158
dashboards so we can see

897
00:28:51,440 --> 00:28:56,240
what was our like http 500 rate while we

898
00:28:54,159 --> 00:28:57,520
were doing this deployment

899
00:28:56,240 --> 00:28:59,760
and this is really useful contextual

900
00:28:57,520 --> 00:29:00,240
information for like what has changed

901
00:28:59,760 --> 00:29:02,158
right i'm

902
00:29:00,240 --> 00:29:04,720
in my monitoring i've got i've seen the

903
00:29:02,159 --> 00:29:06,960
alert what has changed it's like well

904
00:29:04,720 --> 00:29:08,720
deployment happened and then we

905
00:29:06,960 --> 00:29:09,360
instrument each individual pipeline

906
00:29:08,720 --> 00:29:12,559
we're like

907
00:29:09,360 --> 00:29:13,918
when are like uh each individual job to

908
00:29:12,559 --> 00:29:16,080
say what it's doing

909
00:29:13,919 --> 00:29:17,520
so if we see like an elevated 500 rate

910
00:29:16,080 --> 00:29:18,320
for a small part of the pipeline we can

911
00:29:17,520 --> 00:29:20,158
be like oh

912
00:29:18,320 --> 00:29:21,360
that's when we are rotating this

913
00:29:20,159 --> 00:29:23,440
certificate or that's when we are

914
00:29:21,360 --> 00:29:26,639
redeploying this thing

915
00:29:23,440 --> 00:29:28,960
which is really useful so

916
00:29:26,640 --> 00:29:30,320
this is our code it's running production

917
00:29:28,960 --> 00:29:30,640
we've been running it production for

918
00:29:30,320 --> 00:29:35,279
like

919
00:29:30,640 --> 00:29:38,320
five years some of it can you reuse this

920
00:29:35,279 --> 00:29:40,960
yes you can um

921
00:29:38,320 --> 00:29:42,320
so there's a microsite uh called

922
00:29:40,960 --> 00:29:43,760
resource types

923
00:29:42,320 --> 00:29:45,200
uh which is available on the conference

924
00:29:43,760 --> 00:29:45,919
website where we share all of the

925
00:29:45,200 --> 00:29:47,679
resources

926
00:29:45,919 --> 00:29:50,000
that uh resource types that people have

927
00:29:47,679 --> 00:29:51,840
set up so we get resources there

928
00:29:50,000 --> 00:29:53,520
the terraform resources there there's

929
00:29:51,840 --> 00:29:55,279
some like kubernetes resources that you

930
00:29:53,520 --> 00:29:59,360
can go and have a look at

931
00:29:55,279 --> 00:30:00,000
um so sometimes you'll be like oh i want

932
00:29:59,360 --> 00:30:01,678
to

933
00:30:00,000 --> 00:30:03,279
automate this process has someone made a

934
00:30:01,679 --> 00:30:04,720
resource for it and they will have and

935
00:30:03,279 --> 00:30:07,120
then you just use that

936
00:30:04,720 --> 00:30:08,399
um and contribute back be good open

937
00:30:07,120 --> 00:30:11,678
source people

938
00:30:08,399 --> 00:30:12,719
fix other people's bugs um

939
00:30:11,679 --> 00:30:13,840
so now we can talk about some of the

940
00:30:12,720 --> 00:30:15,440
patterns that we've gone through in this

941
00:30:13,840 --> 00:30:17,600
pipeline um

942
00:30:15,440 --> 00:30:18,880
locks pools counters some tests some

943
00:30:17,600 --> 00:30:21,360
metrics and annotations

944
00:30:18,880 --> 00:30:23,200
and sort of like as open source

945
00:30:21,360 --> 00:30:24,639
maintainers how do we automate

946
00:30:23,200 --> 00:30:26,559
release processes how do we automate

947
00:30:24,640 --> 00:30:27,919
communication so like i'm not sitting in

948
00:30:26,559 --> 00:30:30,799
my email for two hours when i could be

949
00:30:27,919 --> 00:30:32,720
writing some code or like a design doc

950
00:30:30,799 --> 00:30:34,799
so pools and locks right this is the bit

951
00:30:32,720 --> 00:30:37,200
where we're locking the pipeline

952
00:30:34,799 --> 00:30:38,799
um a pool is implemented as a as a git

953
00:30:37,200 --> 00:30:42,000
resource and it

954
00:30:38,799 --> 00:30:45,200
um as like a git repo

955
00:30:42,000 --> 00:30:47,120
and uh it controls like who controls

956
00:30:45,200 --> 00:30:49,520
what resources so you could say

957
00:30:47,120 --> 00:30:51,279
only one pipeline is allowed to reason

958
00:30:49,520 --> 00:30:52,240
about staging at any given time or only

959
00:30:51,279 --> 00:30:54,320
one pipe

960
00:30:52,240 --> 00:30:55,520
there are only five environments that we

961
00:30:54,320 --> 00:30:58,879
can have so we're

962
00:30:55,520 --> 00:31:00,960
only gonna deploy five things

963
00:30:58,880 --> 00:31:04,159
and if you're waiting for a lock you

964
00:31:00,960 --> 00:31:06,559
have to wait for someone else um

965
00:31:04,159 --> 00:31:07,840
and then you can automate like or you

966
00:31:06,559 --> 00:31:09,760
can provide some

967
00:31:07,840 --> 00:31:11,120
controls or some like dials for

968
00:31:09,760 --> 00:31:13,279
operators to use

969
00:31:11,120 --> 00:31:14,959
like you don't want to be like typing

970
00:31:13,279 --> 00:31:15,600
error prone commands into your terminal

971
00:31:14,960 --> 00:31:17,919
to

972
00:31:15,600 --> 00:31:20,158
unblock a release pipeline make that

973
00:31:17,919 --> 00:31:23,120
automated make that all set up

974
00:31:20,159 --> 00:31:24,640
um and we use this in our release

975
00:31:23,120 --> 00:31:26,239
pipelines all the time so we've got this

976
00:31:24,640 --> 00:31:30,000
lock or we've got this thing over here

977
00:31:26,240 --> 00:31:32,399
here's your like in a documentation or

978
00:31:30,000 --> 00:31:34,240
or a run book you'll be like if this

979
00:31:32,399 --> 00:31:36,000
happens run this job if this happens run

980
00:31:34,240 --> 00:31:39,360
this job but for the most part

981
00:31:36,000 --> 00:31:41,440
make it automated availability tests so

982
00:31:39,360 --> 00:31:43,918
we implement these as a task we use this

983
00:31:41,440 --> 00:31:47,360
wonderful library called vegeta to do

984
00:31:43,919 --> 00:31:50,799
um like vegeta attack or

985
00:31:47,360 --> 00:31:52,639
to do some low testing to work out like

986
00:31:50,799 --> 00:31:53,840
are we getting an acceptable rate of

987
00:31:52,640 --> 00:31:56,559
errors or

988
00:31:53,840 --> 00:31:57,360
is our error rate too high um and we've

989
00:31:56,559 --> 00:31:59,200
got some

990
00:31:57,360 --> 00:32:01,120
a little bit of go that uses this as a

991
00:31:59,200 --> 00:32:02,480
library to implement that

992
00:32:01,120 --> 00:32:04,799
and this is a really really useful

993
00:32:02,480 --> 00:32:06,320
pattern for like sitting down be like

994
00:32:04,799 --> 00:32:08,080
what do i want my users what

995
00:32:06,320 --> 00:32:10,559
expectations do my users have

996
00:32:08,080 --> 00:32:12,080
of my service and how can i make sure

997
00:32:10,559 --> 00:32:12,960
that they're going to get that level of

998
00:32:12,080 --> 00:32:14,399
service

999
00:32:12,960 --> 00:32:15,760
and then putting that in your pipeline

1000
00:32:14,399 --> 00:32:17,600
instead of being like oh i hope it's

1001
00:32:15,760 --> 00:32:19,600
going to work

1002
00:32:17,600 --> 00:32:20,879
annotations so this is a resource that

1003
00:32:19,600 --> 00:32:24,000
we wrote

1004
00:32:20,880 --> 00:32:25,600
um it's the grafana annotation resource

1005
00:32:24,000 --> 00:32:27,440
you put to it and it'll put a line on

1006
00:32:25,600 --> 00:32:30,158
your grafton dashboard

1007
00:32:27,440 --> 00:32:31,600
and then if you put to it again it will

1008
00:32:30,159 --> 00:32:35,039
draw a window

1009
00:32:31,600 --> 00:32:36,559
over your grafana chart so this is the

1010
00:32:35,039 --> 00:32:38,960
example from earlier where this

1011
00:32:36,559 --> 00:32:40,480
is our deployment overview and it's

1012
00:32:38,960 --> 00:32:43,760
drawn a line over a

1013
00:32:40,480 --> 00:32:47,120
two hour deploy

1014
00:32:43,760 --> 00:32:50,320
um metrics so concourse exposes metrics

1015
00:32:47,120 --> 00:32:52,399
or sends metrics to your um metrics

1016
00:32:50,320 --> 00:32:53,760
aggregator of choice

1017
00:32:52,399 --> 00:32:55,039
a lot of times you'll have like a smoke

1018
00:32:53,760 --> 00:32:56,000
test in someone's production

1019
00:32:55,039 --> 00:32:57,440
infrastructure you have a smoke

1020
00:32:56,000 --> 00:32:59,519
test that will run every five minutes to

1021
00:32:57,440 --> 00:33:01,519
check that the service isn't down

1022
00:32:59,519 --> 00:33:03,679
and then if it fails it'll get woken up

1023
00:33:01,519 --> 00:33:05,039
and then at one point in time that smoke

1024
00:33:03,679 --> 00:33:07,360
test will become flaky and then someone

1025
00:33:05,039 --> 00:33:11,679
will wrap that in a for loop

1026
00:33:07,360 --> 00:33:13,600
and then no please don't do that instead

1027
00:33:11,679 --> 00:33:15,840
we have all of the metrics all of the

1028
00:33:13,600 --> 00:33:17,840
jobs exposed as prometheus metrics

1029
00:33:15,840 --> 00:33:19,120
so we can reason about a pipeline as a

1030
00:33:17,840 --> 00:33:22,879
time series

1031
00:33:19,120 --> 00:33:26,158
and we can say when we when the rate

1032
00:33:22,880 --> 00:33:29,120
when in a 30 minute period our

1033
00:33:26,159 --> 00:33:29,919
smoke tests haven't succeeded then

1034
00:33:29,120 --> 00:33:31,678
something's wrong

1035
00:33:29,919 --> 00:33:33,440
and then alert manager will call us or

1036
00:33:31,679 --> 00:33:36,320
something like that um

1037
00:33:33,440 --> 00:33:37,760
look at concourse.cid.org metrics for

1038
00:33:36,320 --> 00:33:38,480
like all of the supported metrics

1039
00:33:37,760 --> 00:33:40,559
aggregators

1040
00:33:38,480 --> 00:33:42,559
we use prometheus is really neat for

1041
00:33:40,559 --> 00:33:44,879
this the other really useful thing about

1042
00:33:42,559 --> 00:33:46,879
having your all of your builds uh or all

1043
00:33:44,880 --> 00:33:49,360
of your pipeline runs as metrics

1044
00:33:46,880 --> 00:33:50,720
is you can do things like how long does

1045
00:33:49,360 --> 00:33:53,360
this pipeline take to run

1046
00:33:50,720 --> 00:33:54,799
for like ever but you can slice and dice

1047
00:33:53,360 --> 00:33:57,199
that with like well

1048
00:33:54,799 --> 00:33:58,639
you know which tests are flaky and there

1049
00:33:57,200 --> 00:34:01,300
are plugins to do that

1050
00:33:58,640 --> 00:34:02,799
for other tools right but um

1051
00:34:01,300 --> 00:34:04,399
[Music]

1052
00:34:02,799 --> 00:34:06,720
for concourse it makes sense to think

1053
00:34:04,399 --> 00:34:08,480
about as time series like this for us

1054
00:34:06,720 --> 00:34:10,000
release management so this is another

1055
00:34:08,480 --> 00:34:10,879
example shown earlier like how do we

1056
00:34:10,000 --> 00:34:14,159
collaborate

1057
00:34:10,879 --> 00:34:16,879
how do we take what we like

1058
00:34:14,159 --> 00:34:18,399
our workflow and translate that into a

1059
00:34:16,879 --> 00:34:21,520
workflow that we can use

1060
00:34:18,399 --> 00:34:22,078
um through a concourse pipeline and this

1061
00:34:21,520 --> 00:34:26,000
uses

1062
00:34:22,079 --> 00:34:28,079
two resources the semver resource which

1063
00:34:26,000 --> 00:34:29,440
had like knows about a semantic version

1064
00:34:28,079 --> 00:34:31,599
so you can put to it

1065
00:34:29,440 --> 00:34:34,800
with a patch or put to it with a minor

1066
00:34:31,599 --> 00:34:36,480
or a major and it will work out how to

1067
00:34:34,800 --> 00:34:37,359
represent that in file form so you can

1068
00:34:36,480 --> 00:34:40,079
then

1069
00:34:37,359 --> 00:34:41,520
um say oh well i want this to trigger

1070
00:34:40,079 --> 00:34:42,720
when there's a major release i want to

1071
00:34:41,520 --> 00:34:44,320
trigger this when there's a minor

1072
00:34:42,719 --> 00:34:45,759
release

1073
00:34:44,320 --> 00:34:48,159
and we use github release resource

1074
00:34:45,760 --> 00:34:48,639
because we host our release artifacts on

1075
00:34:48,159 --> 00:34:50,879
github

1076
00:34:48,639 --> 00:34:52,240
for this cli tool in particular and what

1077
00:34:50,879 --> 00:34:53,839
this will do is it will look at all the

1078
00:34:52,239 --> 00:34:56,319
commits since the last release

1079
00:34:53,839 --> 00:34:57,520
and generate release notes for us um and

1080
00:34:56,320 --> 00:34:59,280
then all we have to do

1081
00:34:57,520 --> 00:35:00,960
is go into github maybe write some

1082
00:34:59,280 --> 00:35:03,040
thanks to our contributors

1083
00:35:00,960 --> 00:35:05,200
and then click publish instead of

1084
00:35:03,040 --> 00:35:08,079
publishers draft

1085
00:35:05,200 --> 00:35:10,560
communications um like don't rely on

1086
00:35:08,079 --> 00:35:12,880
watching your pipelines

1087
00:35:10,560 --> 00:35:14,320
yeah you want it to be automated you

1088
00:35:12,880 --> 00:35:16,640
want everything to

1089
00:35:14,320 --> 00:35:18,240
tell you when it's wrong like we

1090
00:35:16,640 --> 00:35:20,000
shouldn't come in and be like oh that

1091
00:35:18,240 --> 00:35:21,359
like i have to look at a dashboard

1092
00:35:20,000 --> 00:35:22,000
because it's red like none of that

1093
00:35:21,359 --> 00:35:24,560
please

1094
00:35:22,000 --> 00:35:26,400
there's a page resource that will call

1095
00:35:24,560 --> 00:35:28,640
you if a job fails

1096
00:35:26,400 --> 00:35:30,000
you can get it to do slack and hip chat

1097
00:35:28,640 --> 00:35:31,598
there's an email resource and i think

1098
00:35:30,000 --> 00:35:34,160
there's an irc resource so you can get

1099
00:35:31,599 --> 00:35:36,880
concourse to post into irc

1100
00:35:34,160 --> 00:35:38,319
um that's concourse concourse is an open

1101
00:35:36,880 --> 00:35:39,839
source continuous thing doer

1102
00:35:38,320 --> 00:35:41,839
there's a really really wonderful quick

1103
00:35:39,839 --> 00:35:43,200
start on concourse ci.org that will set

1104
00:35:41,839 --> 00:35:44,799
up a concourse for you running locally

1105
00:35:43,200 --> 00:35:46,560
so you can play around with it

1106
00:35:44,800 --> 00:35:48,800
and there's a really really vibrant um

1107
00:35:46,560 --> 00:35:51,920
open source community around concourse

1108
00:35:48,800 --> 00:35:52,480
so i encourage you to check out that was

1109
00:35:51,920 --> 00:35:56,079
my talk

1110
00:35:52,480 --> 00:35:56,079
any questions i think we've got three

1111
00:35:56,839 --> 00:35:59,839
minutes

1112
00:36:02,630 --> 00:36:07,249
[Applause]

1113
00:36:11,359 --> 00:36:18,960
can you as a result from some testing

1114
00:36:14,720 --> 00:36:22,480
update that we run

1115
00:36:18,960 --> 00:36:23,359
um so the question was as the result of

1116
00:36:22,480 --> 00:36:25,200
something can you update the

1117
00:36:23,359 --> 00:36:28,240
configuration so

1118
00:36:25,200 --> 00:36:31,279
if it changes so depending on what that

1119
00:36:28,240 --> 00:36:33,200
result is will

1120
00:36:31,280 --> 00:36:34,720
depend on how you go about doing that

1121
00:36:33,200 --> 00:36:36,799
process you could say

1122
00:36:34,720 --> 00:36:38,480
when this changes i'll reconfigure the

1123
00:36:36,800 --> 00:36:40,760
pipeline that's a perfectly

1124
00:36:38,480 --> 00:36:42,079
reasonable thing to do in concourse um

1125
00:36:40,760 --> 00:36:43,520
[Music]

1126
00:36:42,079 --> 00:36:45,119
i think it depends a lot more on the

1127
00:36:43,520 --> 00:36:45,839
specifics of what change you're trying

1128
00:36:45,119 --> 00:36:48,079
to achieve

1129
00:36:45,839 --> 00:36:50,160
um for me to fully answer that question

1130
00:36:48,079 --> 00:36:53,440
um but you can send me an email if

1131
00:36:50,160 --> 00:36:53,440
you want to get into the specifics

1132
00:37:02,480 --> 00:37:05,599
or anything like that so is this a

1133
00:37:04,480 --> 00:37:09,359
question about governor uk

1134
00:37:05,599 --> 00:37:12,640
has or a question about concourse

1135
00:37:09,359 --> 00:37:14,240
yeah so this uh the question was does

1136
00:37:12,640 --> 00:37:16,560
governor ek pass care about

1137
00:37:14,240 --> 00:37:17,598
if it's like what the code artifact is

1138
00:37:16,560 --> 00:37:20,160
um and

1139
00:37:17,599 --> 00:37:20,640
cloud foundry not just rpas but cloud

1140
00:37:20,160 --> 00:37:23,920
foundry

1141
00:37:20,640 --> 00:37:26,000
specifically is able to deploy docker or

1142
00:37:23,920 --> 00:37:28,000
just code and it has a build service

1143
00:37:26,000 --> 00:37:29,760
using a project called bill packs to

1144
00:37:28,000 --> 00:37:30,240
build your code for you into an ocr

1145
00:37:29,760 --> 00:37:31,680
image

1146
00:37:30,240 --> 00:37:35,200
so your developers don't need to know

1147
00:37:31,680 --> 00:37:38,078
about docker or something like that

1148
00:37:35,200 --> 00:37:38,078
any other questions

1149
00:37:40,240 --> 00:37:44,640
for unit testing the platform or in a

1150
00:37:42,880 --> 00:37:49,520
pipeline

1151
00:37:44,640 --> 00:37:53,598
uh yes so um if we go back to this

1152
00:37:49,520 --> 00:37:56,000
example here all the way back

1153
00:37:53,599 --> 00:37:57,839
so in this deploy let's find the

1154
00:37:56,000 --> 00:37:59,920
skeleton here so

1155
00:37:57,839 --> 00:38:01,040
in my terraform deployment if i want to

1156
00:37:59,920 --> 00:38:02,800
run a unit test

1157
00:38:01,040 --> 00:38:04,720
in this job section down here i've got

1158
00:38:02,800 --> 00:38:07,599
my code if i said

1159
00:38:04,720 --> 00:38:09,200
task run unit tests and then i would say

1160
00:38:07,599 --> 00:38:10,400
i want to run this unit test in the

1161
00:38:09,200 --> 00:38:13,759
context of

1162
00:38:10,400 --> 00:38:16,880
ruby i want to execute bundle exec rspec

1163
00:38:13,760 --> 00:38:19,200
and so we

1164
00:38:16,880 --> 00:38:20,960
use it for running tests on our pr's

1165
00:38:19,200 --> 00:38:22,319
like sometimes you'd want to say when

1166
00:38:20,960 --> 00:38:24,320
this pull request changes

1167
00:38:22,320 --> 00:38:26,800
clone the code run the unit tests

1168
00:38:24,320 --> 00:38:28,640
sometimes you don't want to do that

1169
00:38:26,800 --> 00:38:30,560
there are other solutions for doing like

1170
00:38:28,640 --> 00:38:31,920
ci within the context of a pull request

1171
00:38:30,560 --> 00:38:33,599
and things like that but you can use

1172
00:38:31,920 --> 00:38:37,200
concourse for running unit tests

1173
00:38:33,599 --> 00:38:39,599
i think it it depends on um

1174
00:38:37,200 --> 00:38:40,480
like what kind of dependencies you need

1175
00:38:39,599 --> 00:38:41,920
in your tests

1176
00:38:40,480 --> 00:38:43,839
like do you need a postcode database and

1177
00:38:41,920 --> 00:38:44,560
my sequel you can do that with concourse

1178
00:38:43,839 --> 00:38:47,440
but it's

1179
00:38:44,560 --> 00:38:50,000
a little more work than it would be in

1180
00:38:47,440 --> 00:38:50,000
other tools

1181
00:38:51,599 --> 00:39:03,200
i think we're out time one more question

1182
00:39:00,720 --> 00:39:04,399
yeah so if anyone if anyone has any

1183
00:39:03,200 --> 00:39:05,359
questions i think it's probably best to

1184
00:39:04,400 --> 00:39:09,520
send me uh

1185
00:39:05,359 --> 00:39:11,119
an email uh you can send me an email at

1186
00:39:09,520 --> 00:39:13,359
um just go to my website my email

1187
00:39:11,119 --> 00:39:14,640
address is there i know that was quite a

1188
00:39:13,359 --> 00:39:17,200
lot of content

1189
00:39:14,640 --> 00:39:17,920
and the slides are on fosdem.org on the

1190
00:39:17,200 --> 00:39:19,118
talk

1191
00:39:17,920 --> 00:39:29,839
and if you have any further questions

1192
00:39:19,119 --> 00:39:29,839
send me an email thanks very much

1193
00:39:32,480 --> 00:39:34,560
you

