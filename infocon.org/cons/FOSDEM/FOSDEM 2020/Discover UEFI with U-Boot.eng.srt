1
00:00:09,120 --> 00:00:13,919
good afternoon

2
00:00:10,240 --> 00:00:19,039
welcome to my talk about the uav

3
00:00:13,920 --> 00:00:19,039
subsystem in ubud my name is heinrich

4
00:00:22,160 --> 00:00:25,439
my name is heinrich shukhard and i'm

5
00:00:24,800 --> 00:00:27,840
working

6
00:00:25,439 --> 00:00:28,640
in my paid life as a software consultant

7
00:00:27,840 --> 00:00:33,040
as erp

8
00:00:28,640 --> 00:00:36,440
and in the supply chain area but

9
00:00:33,040 --> 00:00:39,680
i've been contributing to u-boat since

10
00:00:36,440 --> 00:00:42,320
2017 and i've been since

11
00:00:39,680 --> 00:00:42,719
beginning of last year's maintainer of

12
00:00:42,320 --> 00:00:46,559
the

13
00:00:42,719 --> 00:00:49,680
uav subsystem in u-boat and now you may

14
00:00:46,559 --> 00:00:51,280
wonder why i got there and this is what

15
00:00:49,680 --> 00:00:52,719
i will start my talk with and then i

16
00:00:51,280 --> 00:00:54,800
want to dive with you

17
00:00:52,719 --> 00:00:55,920
into the internals of uav so that you

18
00:00:54,800 --> 00:00:58,160
understand how

19
00:00:55,920 --> 00:01:00,239
your if you really helped me to solve my

20
00:00:58,160 --> 00:01:05,679
problems in booting

21
00:01:00,239 --> 00:01:09,200
from the network so let's start it

22
00:01:05,680 --> 00:01:11,360
so why do i want to boot from network

23
00:01:09,200 --> 00:01:13,920
so i had a few little boards of the

24
00:01:11,360 --> 00:01:16,159
raspberry size not raspberry itself

25
00:01:13,920 --> 00:01:18,000
and the fastest connector on these

26
00:01:16,159 --> 00:01:19,759
boards was really the ethernet port

27
00:01:18,000 --> 00:01:21,439
they didn't have zarta they didn't have

28
00:01:19,759 --> 00:01:25,040
pcie

29
00:01:21,439 --> 00:01:30,000
and of course you could plug in a usb 2

30
00:01:25,040 --> 00:01:30,000
converted to a zata drive but

31
00:01:30,079 --> 00:01:34,639
a zata drive still cost me more than the

32
00:01:32,400 --> 00:01:35,360
board itself and so i thought network

33
00:01:34,640 --> 00:01:39,680
booting

34
00:01:35,360 --> 00:01:43,759
would be the natural choice to carry on

35
00:01:39,680 --> 00:01:47,520
and network booting exists in ubud

36
00:01:43,759 --> 00:01:50,799
so you can set up a booty or dhcp server

37
00:01:47,520 --> 00:01:52,399
that will provide the address of

38
00:01:50,799 --> 00:01:54,640
a script then the script can be

39
00:01:52,399 --> 00:01:57,759
downloaded via tftp and then you can

40
00:01:54,640 --> 00:01:59,759
boot from an nfs server

41
00:01:57,759 --> 00:02:01,200
but unfortunately as you would only

42
00:01:59,759 --> 00:02:02,880
support udp

43
00:02:01,200 --> 00:02:04,799
this server has to be set up that is

44
00:02:02,880 --> 00:02:06,960
running by udp

45
00:02:04,799 --> 00:02:08,239
there is no authentication at all and i

46
00:02:06,960 --> 00:02:12,400
thought oh

47
00:02:08,239 --> 00:02:14,080
gosh that's not what i want and then i

48
00:02:12,400 --> 00:02:15,920
knew of course what we were using in our

49
00:02:14,080 --> 00:02:18,879
company and typically

50
00:02:15,920 --> 00:02:20,000
in a server environment you are running

51
00:02:18,879 --> 00:02:23,599
iscsi

52
00:02:20,000 --> 00:02:27,520
or or you're running using

53
00:02:23,599 --> 00:02:31,440
fiber channel or whatever so iscsi

54
00:02:27,520 --> 00:02:32,319
is not like a number serving singular

55
00:02:31,440 --> 00:02:35,440
files

56
00:02:32,319 --> 00:02:38,640
but it's really providing a block device

57
00:02:35,440 --> 00:02:40,480
so it's like just a virtual hard disk

58
00:02:38,640 --> 00:02:42,958
that you have that you can put your

59
00:02:40,480 --> 00:02:44,720
own partition table on and then create

60
00:02:42,959 --> 00:02:46,480
your partitions and then you will have

61
00:02:44,720 --> 00:02:48,080
your boot partition and your home

62
00:02:46,480 --> 00:02:51,760
partition and your

63
00:02:48,080 --> 00:02:54,959
root partition and it

64
00:02:51,760 --> 00:02:56,720
offers really authentication so

65
00:02:54,959 --> 00:02:58,319
the server and the client can mutually

66
00:02:56,720 --> 00:03:01,840
authenticate each other

67
00:02:58,319 --> 00:03:02,799
it's uh the chat protocol that's being

68
00:03:01,840 --> 00:03:05,519
used so it

69
00:03:02,800 --> 00:03:06,800
there's some common secrets those uh two

70
00:03:05,519 --> 00:03:09,280
parties have

71
00:03:06,800 --> 00:03:10,159
to use some challenge so that's it's

72
00:03:09,280 --> 00:03:12,640
always

73
00:03:10,159 --> 00:03:13,519
the same being transferred so yes you

74
00:03:12,640 --> 00:03:16,799
cannot have

75
00:03:13,519 --> 00:03:18,879
replay attacks and if you need more

76
00:03:16,800 --> 00:03:22,159
security you could separate of course

77
00:03:18,879 --> 00:03:24,560
um your storage array network

78
00:03:22,159 --> 00:03:27,120
from the rest of the network via vlan or

79
00:03:24,560 --> 00:03:30,000
use ipsec for encryption

80
00:03:27,120 --> 00:03:32,400
so this is what i wanted to do with my

81
00:03:30,000 --> 00:03:34,560
board which was running ubud

82
00:03:32,400 --> 00:03:35,680
and ubud is one of the most common

83
00:03:34,560 --> 00:03:38,720
firmwares for those

84
00:03:35,680 --> 00:03:41,519
little boards for booting

85
00:03:38,720 --> 00:03:43,840
so i looked at the specifications

86
00:03:41,519 --> 00:03:44,720
started implementing a bit in iskasi and

87
00:03:43,840 --> 00:03:48,000
saw

88
00:03:44,720 --> 00:03:48,640
it's tedious and hasn't anybody done it

89
00:03:48,000 --> 00:03:51,040
before

90
00:03:48,640 --> 00:03:53,439
why should i do it myself and that's

91
00:03:51,040 --> 00:03:55,760
when i came upon a software

92
00:03:53,439 --> 00:03:57,359
called pixi where the main developer is

93
00:03:55,760 --> 00:04:01,280
michael brown

94
00:03:57,360 --> 00:04:03,760
and it's just like a swiss army knife

95
00:04:01,280 --> 00:04:05,200
it has implements lots of different

96
00:04:03,760 --> 00:04:07,518
protocols

97
00:04:05,200 --> 00:04:08,879
the origin of it was it was just a

98
00:04:07,519 --> 00:04:11,360
replacement rom

99
00:04:08,879 --> 00:04:12,399
for your network card for doing pixie

100
00:04:11,360 --> 00:04:14,480
booting

101
00:04:12,400 --> 00:04:16,399
but now it can support booting from

102
00:04:14,480 --> 00:04:19,199
https server

103
00:04:16,399 --> 00:04:21,120
from iscsi that's what i'm interested in

104
00:04:19,199 --> 00:04:24,400
can boot via

105
00:04:21,120 --> 00:04:25,360
fiber air channel over ethernet or art

106
00:04:24,400 --> 00:04:28,080
over ethernet

107
00:04:25,360 --> 00:04:29,840
it has its own scripting language and it

108
00:04:28,080 --> 00:04:32,719
can be built as a new av

109
00:04:29,840 --> 00:04:33,280
payload and that's when i thought okay

110
00:04:32,720 --> 00:04:35,600
on my

111
00:04:33,280 --> 00:04:36,960
workstation at home i'm use having uav

112
00:04:35,600 --> 00:04:40,240
booting my x

113
00:04:36,960 --> 00:04:44,000
it is a six computer

114
00:04:40,240 --> 00:04:47,120
so does this also exist for you boot

115
00:04:44,000 --> 00:04:49,360
yeah and in 2016 alexander graf

116
00:04:47,120 --> 00:04:50,800
at that time working for susan now it's

117
00:04:49,360 --> 00:04:54,240
at amazon

118
00:04:50,800 --> 00:04:56,960
he was really starting to implement

119
00:04:54,240 --> 00:04:57,919
the uav standard inside as you would so

120
00:04:56,960 --> 00:05:00,638
the driving

121
00:04:57,919 --> 00:05:03,039
side for his company zuza at that time

122
00:05:00,639 --> 00:05:05,199
was that they wanted to boot

123
00:05:03,039 --> 00:05:06,880
all devices the same base they said if

124
00:05:05,199 --> 00:05:09,280
we boot a server by grub

125
00:05:06,880 --> 00:05:11,759
and then grab loads linux kernel we want

126
00:05:09,280 --> 00:05:14,400
to do the same on the raspberry 2.

127
00:05:11,759 --> 00:05:16,880
and that was why zuzer was interested

128
00:05:14,400 --> 00:05:18,638
into getting uav into u-boot which was

129
00:05:16,880 --> 00:05:20,880
running on those small bars

130
00:05:18,639 --> 00:05:22,400
and i said oh that looks it's complete

131
00:05:20,880 --> 00:05:25,440
so if i pick c

132
00:05:22,400 --> 00:05:29,039
i can compile it as an uefi

133
00:05:25,440 --> 00:05:32,880
binary run it with ubud and great

134
00:05:29,039 --> 00:05:33,840
that's what happened i just got a return

135
00:05:32,880 --> 00:05:36,159
code

136
00:05:33,840 --> 00:05:37,440
a bit cryptic but if you convert it to a

137
00:05:36,160 --> 00:05:39,919
hexadecimal and

138
00:05:37,440 --> 00:05:40,639
look it up okay you see it's error code

139
00:05:39,919 --> 00:05:44,000
nine

140
00:05:40,639 --> 00:05:46,240
out of resources because there was only

141
00:05:44,000 --> 00:05:47,039
one event possible that was really the

142
00:05:46,240 --> 00:05:50,000
reason

143
00:05:47,039 --> 00:05:50,719
i said okay maybe now everything is

144
00:05:50,000 --> 00:05:54,080
there let's

145
00:05:50,720 --> 00:05:56,080
try compiling a hello world just writing

146
00:05:54,080 --> 00:05:58,000
hello world on the console and then do a

147
00:05:56,080 --> 00:06:01,758
return statement

148
00:05:58,000 --> 00:06:05,199
and it crashed again because

149
00:06:01,759 --> 00:06:06,000
alexander assumed that every executable

150
00:06:05,199 --> 00:06:09,199
would exit

151
00:06:06,000 --> 00:06:11,440
via the exit api call

152
00:06:09,199 --> 00:06:13,199
and that's when i really thought okay

153
00:06:11,440 --> 00:06:15,759
that seems to be

154
00:06:13,199 --> 00:06:16,319
really something that has been started

155
00:06:15,759 --> 00:06:19,360
but

156
00:06:16,319 --> 00:06:22,400
needs some support and that's when i

157
00:06:19,360 --> 00:06:24,720
got into this so in uh

158
00:06:22,400 --> 00:06:25,919
i started uh sending in the first

159
00:06:24,720 --> 00:06:29,360
patches uh

160
00:06:25,919 --> 00:06:32,639
mid of 2017 when there was

161
00:06:29,360 --> 00:06:34,000
really it could barely would grab and

162
00:06:32,639 --> 00:06:35,759
the high dropped you could really boot

163
00:06:34,000 --> 00:06:38,960
into linux it was working but

164
00:06:35,759 --> 00:06:43,280
nothing else and

165
00:06:38,960 --> 00:06:46,318
in 2018 with the may edition of u-boot

166
00:06:43,280 --> 00:06:50,880
i could finally really run a pixie

167
00:06:46,319 --> 00:06:54,240
and boot from my iscsi server

168
00:06:50,880 --> 00:06:56,719
and of course the voyage was not

169
00:06:54,240 --> 00:06:58,240
finished there so it was still not

170
00:06:56,720 --> 00:07:01,360
really conformant with all

171
00:06:58,240 --> 00:07:02,560
the details of the av spec and finally

172
00:07:01,360 --> 00:07:04,319
last year we got it

173
00:07:02,560 --> 00:07:06,000
to a point that we could run the wavy

174
00:07:04,319 --> 00:07:08,319
shells that is

175
00:07:06,000 --> 00:07:09,440
a shell like the dos shell really

176
00:07:08,319 --> 00:07:11,440
primitive

177
00:07:09,440 --> 00:07:14,319
but you can run different binaries you

178
00:07:11,440 --> 00:07:18,479
can set variables you can

179
00:07:14,319 --> 00:07:20,800
have a small editor even in there and

180
00:07:18,479 --> 00:07:21,758
this is the basis that you need to run

181
00:07:20,800 --> 00:07:24,479
the self

182
00:07:21,759 --> 00:07:27,440
certification test that life and art had

183
00:07:24,479 --> 00:07:27,440
been talking about

184
00:07:28,000 --> 00:07:31,919
and so i have written about sixty

185
00:07:31,039 --> 00:07:34,560
percent of

186
00:07:31,919 --> 00:07:36,000
the ap code but they were in total forty

187
00:07:34,560 --> 00:07:39,680
contributors

188
00:07:36,000 --> 00:07:43,039
contributing uh to this um

189
00:07:39,680 --> 00:07:44,960
to get it running and now you

190
00:07:43,039 --> 00:07:46,080
may ask yourself where is really wavy is

191
00:07:44,960 --> 00:07:49,440
sitting because when

192
00:07:46,080 --> 00:07:50,159
some people talk about uav in the x 86

193
00:07:49,440 --> 00:07:52,160
world

194
00:07:50,160 --> 00:07:53,440
they're just talking about if it as if

195
00:07:52,160 --> 00:07:56,720
it were the whole bias if

196
00:07:53,440 --> 00:07:59,840
the whole firmware is uav no uav is

197
00:07:56,720 --> 00:08:02,000
simply standard it's defining an api

198
00:07:59,840 --> 00:08:03,359
the question is where is it used so what

199
00:08:02,000 --> 00:08:06,560
i've put here on the board

200
00:08:03,360 --> 00:08:08,639
is just the boot process this arm

201
00:08:06,560 --> 00:08:12,800
trusted firmware as it's running on

202
00:08:08,639 --> 00:08:16,720
64-bit arm cpus so where does it start

203
00:08:12,800 --> 00:08:19,199
really uh the cpu

204
00:08:16,720 --> 00:08:20,479
has a little rom with which it loads the

205
00:08:19,199 --> 00:08:22,639
first part

206
00:08:20,479 --> 00:08:25,919
of the untrusted firmware which then

207
00:08:22,639 --> 00:08:27,199
boots the vl2 trusted boot firmware

208
00:08:25,919 --> 00:08:29,919
which then runs

209
00:08:27,199 --> 00:08:32,000
through the next part loading bl 31

210
00:08:29,919 --> 00:08:34,718
which is the

211
00:08:32,000 --> 00:08:35,919
exception level three runtime in this

212
00:08:34,719 --> 00:08:39,919
runtime you find

213
00:08:35,919 --> 00:08:40,880
things like the power state coordination

214
00:08:39,919 --> 00:08:42,718
interface

215
00:08:40,880 --> 00:08:45,360
which is responsible for resetting a

216
00:08:42,719 --> 00:08:47,519
board so they provide already an api

217
00:08:45,360 --> 00:08:49,200
which then can be called by u-boot for

218
00:08:47,519 --> 00:08:52,480
resetting a board

219
00:08:49,200 --> 00:08:55,519
it can but not always does also boot

220
00:08:52,480 --> 00:08:57,200
switch in the secure world an extra

221
00:08:55,519 --> 00:09:01,040
operating system

222
00:08:57,200 --> 00:09:03,279
um where you can run for instance opti

223
00:09:01,040 --> 00:09:04,800
this will come in handy if you really

224
00:09:03,279 --> 00:09:06,959
want to have secure boot because we

225
00:09:04,800 --> 00:09:09,599
could use it for storing variables

226
00:09:06,959 --> 00:09:11,279
that is something that leon linao is

227
00:09:09,600 --> 00:09:15,200
currently thinking about

228
00:09:11,279 --> 00:09:18,560
and yes of course the bl-31 also loads

229
00:09:15,200 --> 00:09:19,760
vlc33 which in our case is u-boot

230
00:09:18,560 --> 00:09:22,479
but there are of course other

231
00:09:19,760 --> 00:09:26,080
implementations like tiana called

232
00:09:22,480 --> 00:09:29,440
edk2 like we heard in the last call

233
00:09:26,080 --> 00:09:32,800
and now you would or edk2 they are

234
00:09:29,440 --> 00:09:36,240
offering this api which is defined in

235
00:09:32,800 --> 00:09:40,000
the ue spec on 2500 pages

236
00:09:36,240 --> 00:09:42,240
and now this spec defines

237
00:09:40,000 --> 00:09:43,760
different api calls we will look into

238
00:09:42,240 --> 00:09:46,959
and this can be used

239
00:09:43,760 --> 00:09:50,240
by graph or by ipxc

240
00:09:46,959 --> 00:09:52,800
to communicate with new boot or edk2

241
00:09:50,240 --> 00:09:53,600
and they can also be used in the linux

242
00:09:52,800 --> 00:09:57,359
stop

243
00:09:53,600 --> 00:09:57,360
for the same sort of communication

244
00:09:57,839 --> 00:10:04,880
so when we now start a uav

245
00:10:01,519 --> 00:10:07,040
binary what is the first thing that it

246
00:10:04,880 --> 00:10:10,000
sees it simply gets a pointer

247
00:10:07,040 --> 00:10:12,000
it gets a pointer to the system table

248
00:10:10,000 --> 00:10:14,800
and the system table contains

249
00:10:12,000 --> 00:10:15,120
different services that are available

250
00:10:14,800 --> 00:10:17,279
and

251
00:10:15,120 --> 00:10:19,279
by this services it can also discover

252
00:10:17,279 --> 00:10:22,640
some protocols which offer

253
00:10:19,279 --> 00:10:25,040
additional apis and you have

254
00:10:22,640 --> 00:10:26,800
two major parts in the system table the

255
00:10:25,040 --> 00:10:29,599
one thing is boot services

256
00:10:26,800 --> 00:10:31,519
this is what is available until really

257
00:10:29,600 --> 00:10:32,640
the operating system is running and when

258
00:10:31,519 --> 00:10:34,880
it's running

259
00:10:32,640 --> 00:10:36,480
only the runtime services are left over

260
00:10:34,880 --> 00:10:38,399
for instance

261
00:10:36,480 --> 00:10:39,600
those services that are necessary for

262
00:10:38,399 --> 00:10:44,000
rebooting

263
00:10:39,600 --> 00:10:44,000
or setting boot variables

264
00:10:44,160 --> 00:10:48,719
and they're also configuration tables

265
00:10:46,880 --> 00:10:50,959
pass we heard art that he said

266
00:10:48,720 --> 00:10:53,120
okay currently we are passing the device

267
00:10:50,959 --> 00:10:54,399
tree can't we get rid of passing the

268
00:10:53,120 --> 00:10:56,800
device tree

269
00:10:54,399 --> 00:10:57,600
in here as a configuration table the

270
00:10:56,800 --> 00:11:01,519
servers use

271
00:10:57,600 --> 00:11:03,360
instead xp and also we have an sm bias

272
00:11:01,519 --> 00:11:04,880
table passed and if you look at the

273
00:11:03,360 --> 00:11:08,480
protocols

274
00:11:04,880 --> 00:11:11,439
um they are really providing things like

275
00:11:08,480 --> 00:11:15,440
network access they are providing

276
00:11:11,440 --> 00:11:17,440
access to block devices so

277
00:11:15,440 --> 00:11:18,720
if you now look into what are the atoms

278
00:11:17,440 --> 00:11:22,079
really of ua

279
00:11:18,720 --> 00:11:23,839
the the two

280
00:11:22,079 --> 00:11:25,279
object types there are there one thing

281
00:11:23,839 --> 00:11:27,920
is handles this is

282
00:11:25,279 --> 00:11:30,079
just a pointer on which protocols are

283
00:11:27,920 --> 00:11:32,240
installed and there are events

284
00:11:30,079 --> 00:11:35,680
that are triggered by time and then

285
00:11:32,240 --> 00:11:38,160
called back into the binary

286
00:11:35,680 --> 00:11:40,880
or they can't be triggered by a call of

287
00:11:38,160 --> 00:11:42,800
one of the services

288
00:11:40,880 --> 00:11:43,920
if you think about what is the lifetime

289
00:11:42,800 --> 00:11:46,160
of such an object

290
00:11:43,920 --> 00:11:48,240
of such an handle it's created when the

291
00:11:46,160 --> 00:11:50,079
first protocol is installed and it's

292
00:11:48,240 --> 00:11:52,800
deleted when the last protocol

293
00:11:50,079 --> 00:11:52,800
is removed

294
00:11:53,760 --> 00:11:57,079
when we look into drivers what will be

295
00:11:56,480 --> 00:12:00,000
coming

296
00:11:57,079 --> 00:12:02,638
interesting in a second

297
00:12:00,000 --> 00:12:05,440
is a driver is simply a handle which has

298
00:12:02,639 --> 00:12:08,240
a specific protocol installed on it

299
00:12:05,440 --> 00:12:10,240
so it's a piece of software that when

300
00:12:08,240 --> 00:12:12,320
it's installed the handle is created the

301
00:12:10,240 --> 00:12:13,839
av driver binding protocol is installed

302
00:12:12,320 --> 00:12:15,760
and here you see what

303
00:12:13,839 --> 00:12:17,920
really protocol means the protocol is

304
00:12:15,760 --> 00:12:20,399
just a structure a pointer to a

305
00:12:17,920 --> 00:12:22,880
structure

306
00:12:20,399 --> 00:12:25,040
and it's a grid which identifies this

307
00:12:22,880 --> 00:12:26,720
protocol and

308
00:12:25,040 --> 00:12:28,800
in the protocol interface for instance

309
00:12:26,720 --> 00:12:31,680
of the ap driver binding protocol you

310
00:12:28,800 --> 00:12:34,160
find there are three functions in it

311
00:12:31,680 --> 00:12:35,439
supported start stop and there are three

312
00:12:34,160 --> 00:12:38,800
data fields

313
00:12:35,440 --> 00:12:40,639
which version the handle of the image

314
00:12:38,800 --> 00:12:44,639
that was loaded to get the driver

315
00:12:40,639 --> 00:12:46,720
running and the driver binding handle

316
00:12:44,639 --> 00:12:48,240
and on the other side of course there

317
00:12:46,720 --> 00:12:50,399
are the devices

318
00:12:48,240 --> 00:12:52,000
also in the specification sometimes

319
00:12:50,399 --> 00:12:54,000
called controller

320
00:12:52,000 --> 00:12:56,000
and this is a handle which has an ap

321
00:12:54,000 --> 00:12:59,519
device pass protocol

322
00:12:56,000 --> 00:13:00,240
and which you could use just to get an

323
00:12:59,519 --> 00:13:02,639
overview of

324
00:13:00,240 --> 00:13:04,800
what devices really exist i've just

325
00:13:02,639 --> 00:13:06,639
printed out what i had on my laptop

326
00:13:04,800 --> 00:13:08,719
where you for instance see okay there's

327
00:13:06,639 --> 00:13:10,959
a pci route on the pcr route there's

328
00:13:08,720 --> 00:13:10,959
some

329
00:13:11,920 --> 00:13:16,160
nvme drive and on the nvme drives there

330
00:13:15,279 --> 00:13:18,720
is a

331
00:13:16,160 --> 00:13:20,959
partition existing and the same thing

332
00:13:18,720 --> 00:13:23,440
also for the on the zarta side

333
00:13:20,959 --> 00:13:25,040
these were examples just of such devices

334
00:13:23,440 --> 00:13:28,079
that exist there

335
00:13:25,040 --> 00:13:31,199
and now how are

336
00:13:28,079 --> 00:13:32,160
drivers and devices attached to each

337
00:13:31,200 --> 00:13:33,839
other

338
00:13:32,160 --> 00:13:36,079
in the boot services there's a call

339
00:13:33,839 --> 00:13:39,519
called connect controller

340
00:13:36,079 --> 00:13:42,479
and this one calls the supported

341
00:13:39,519 --> 00:13:42,480
function of the

342
00:13:45,120 --> 00:13:52,720
protocol finds out

343
00:13:48,959 --> 00:13:52,719
let's say there's a match then

344
00:13:52,959 --> 00:13:59,119
the start message is called of the

345
00:13:56,240 --> 00:13:59,440
by a driver binding protocol and then

346
00:13:59,120 --> 00:14:02,160
the

347
00:13:59,440 --> 00:14:02,639
driver is really started and it installs

348
00:14:02,160 --> 00:14:05,279
its

349
00:14:02,639 --> 00:14:06,800
own protocols on the controller for

350
00:14:05,279 --> 00:14:09,120
instance if you have a hard drive and

351
00:14:06,800 --> 00:14:11,519
the hard drive asks okay

352
00:14:09,120 --> 00:14:14,000
uh who can serve me then maybe the

353
00:14:11,519 --> 00:14:17,120
controller will install

354
00:14:14,000 --> 00:14:17,760
a fat file system on it and it also may

355
00:14:17,120 --> 00:14:19,760
con

356
00:14:17,760 --> 00:14:21,839
create child controls or extra handles

357
00:14:19,760 --> 00:14:24,319
it may break

358
00:14:21,839 --> 00:14:27,199
and if you now look into how this puts

359
00:14:24,320 --> 00:14:29,040
is put into the picture with ipixi

360
00:14:27,199 --> 00:14:30,399
on the right side i simply have some

361
00:14:29,040 --> 00:14:33,519
parts of u-boot

362
00:14:30,399 --> 00:14:35,839
so new woods is a network driver on the

363
00:14:33,519 --> 00:14:36,639
for the network driver inside you would

364
00:14:35,839 --> 00:14:39,839
there's a

365
00:14:36,639 --> 00:14:43,199
simple network protocol exposed

366
00:14:39,839 --> 00:14:47,040
and there's also some driver existing

367
00:14:43,199 --> 00:14:49,120
at block device which exposes

368
00:14:47,040 --> 00:14:50,560
the driver binding protocol for block

369
00:14:49,120 --> 00:14:54,000
devices

370
00:14:50,560 --> 00:14:57,760
and now when x ipx is loaded and running

371
00:14:54,000 --> 00:15:00,079
then ipxi installs a tcp ip driver

372
00:14:57,760 --> 00:15:01,760
this is necessary because yuboot doesn't

373
00:15:00,079 --> 00:15:04,319
only knows udp

374
00:15:01,760 --> 00:15:06,480
it installs a nice scuzzy driver and

375
00:15:04,320 --> 00:15:09,760
uses this iscsi driver to connect

376
00:15:06,480 --> 00:15:12,320
to the server and

377
00:15:09,760 --> 00:15:14,560
uh installs on the drive that is

378
00:15:12,320 --> 00:15:17,040
connected to a block i o protocol

379
00:15:14,560 --> 00:15:19,680
and then calls connect controller and

380
00:15:17,040 --> 00:15:22,560
this connect controller

381
00:15:19,680 --> 00:15:24,479
then reaches out to the block device

382
00:15:22,560 --> 00:15:26,719
driver and u-boot

383
00:15:24,480 --> 00:15:27,760
which then uses the fat driver that

384
00:15:26,720 --> 00:15:30,480
exists and

385
00:15:27,760 --> 00:15:32,399
and the logic for identifying partitions

386
00:15:30,480 --> 00:15:34,399
to expose a simple

387
00:15:32,399 --> 00:15:36,320
file protocol and this simple pro file

388
00:15:34,399 --> 00:15:39,519
protocol then can be used

389
00:15:36,320 --> 00:15:42,160
by a pixie to actually load grab or

390
00:15:39,519 --> 00:15:42,880
directly load to linux and essentially

391
00:15:42,160 --> 00:15:45,279
grub

392
00:15:42,880 --> 00:15:46,240
then will do just the same thing grub

393
00:15:45,279 --> 00:15:48,000
will

394
00:15:46,240 --> 00:15:50,000
when it tries to load something it will

395
00:15:48,000 --> 00:15:50,639
cause a simple file protocol which in

396
00:15:50,000 --> 00:15:53,120
turn

397
00:15:50,639 --> 00:15:54,560
only calls the fat driver the fat driver

398
00:15:53,120 --> 00:15:56,240
of course the iv block driver which

399
00:15:54,560 --> 00:15:58,239
knows okay i'm connected to that

400
00:15:56,240 --> 00:16:00,720
candle with the block i o protocol which

401
00:15:58,240 --> 00:16:04,880
links back to the stasi driver

402
00:16:00,720 --> 00:16:07,199
the scarcity driver by the tcp ip driver

403
00:16:04,880 --> 00:16:08,320
calls a simple network protocol driver

404
00:16:07,199 --> 00:16:11,839
and then loads

405
00:16:08,320 --> 00:16:16,000
the different blocks

406
00:16:11,839 --> 00:16:20,320
of linux and of the initial ram

407
00:16:16,000 --> 00:16:24,000
image this is how these all

408
00:16:20,320 --> 00:16:27,759
go together i have here

409
00:16:24,000 --> 00:16:31,600
um the short movies

410
00:16:27,759 --> 00:16:31,600
oops let me get it

411
00:16:32,800 --> 00:16:38,479
so that's that's actually starting to

412
00:16:36,079 --> 00:16:40,880
boot so here i

413
00:16:38,480 --> 00:16:42,399
can first of all uber tries to find its

414
00:16:40,880 --> 00:16:46,720
own devices like

415
00:16:42,399 --> 00:16:48,160
usb devices it finds its sd card

416
00:16:46,720 --> 00:16:51,120
and then the script is running which

417
00:16:48,160 --> 00:16:55,040
simply loads iscsi

418
00:16:51,120 --> 00:16:58,880
and known as size by ipxe oops ip

419
00:16:55,040 --> 00:17:03,199
pixy loads grub and then grub

420
00:16:58,880 --> 00:17:06,480
just continues as we know it to load

421
00:17:03,199 --> 00:17:06,480
the linux kernel

422
00:17:12,000 --> 00:17:16,319
so um yeah for me the takeaway really

423
00:17:15,679 --> 00:17:20,079
was

424
00:17:16,319 --> 00:17:23,438
yeah by providing a common api we

425
00:17:20,079 --> 00:17:26,399
really can run standard software there

426
00:17:23,439 --> 00:17:27,360
on ubud which before that we could only

427
00:17:26,400 --> 00:17:29,919
run maybe

428
00:17:27,359 --> 00:17:30,959
on the pc that had no way if he bios or

429
00:17:29,919 --> 00:17:34,000
which

430
00:17:30,960 --> 00:17:36,320
was running piano core or whatever

431
00:17:34,000 --> 00:17:39,919
and now suddenly we can run things like

432
00:17:36,320 --> 00:17:39,918
grub right at pixie

433
00:17:41,280 --> 00:17:46,160
so when they think about okay what was

434
00:17:45,039 --> 00:17:48,720
problematic in

435
00:17:46,160 --> 00:17:50,960
doing all this the one thing really that

436
00:17:48,720 --> 00:17:51,360
was nasty about ubud is that it's

437
00:17:50,960 --> 00:17:54,640
running

438
00:17:51,360 --> 00:17:57,760
single threaded it has no

439
00:17:54,640 --> 00:17:59,200
network interrupts and so especially for

440
00:17:57,760 --> 00:18:01,520
implementing events

441
00:17:59,200 --> 00:18:02,480
in lots of different places one really

442
00:18:01,520 --> 00:18:04,400
had

443
00:18:02,480 --> 00:18:06,240
to call back into some routines that

444
00:18:04,400 --> 00:18:08,799
would handle event cues and

445
00:18:06,240 --> 00:18:10,559
no okay he was waiting for an event and

446
00:18:08,799 --> 00:18:14,320
call those functions so that was

447
00:18:10,559 --> 00:18:17,600
one part of the nastiness in it

448
00:18:14,320 --> 00:18:21,039
another thing is u-boot

449
00:18:17,600 --> 00:18:21,280
is more than 10 years old and of course

450
00:18:21,039 --> 00:18:24,400
it

451
00:18:21,280 --> 00:18:26,399
comes with its own history and the

452
00:18:24,400 --> 00:18:29,360
model how drivers are implementing you

453
00:18:26,400 --> 00:18:31,760
would is currently changing

454
00:18:29,360 --> 00:18:32,879
it's trying uh to get more modular

455
00:18:31,760 --> 00:18:35,919
there's a

456
00:18:32,880 --> 00:18:38,080
new model called based on device trees

457
00:18:35,919 --> 00:18:40,160
installed inside u-boot but it's not

458
00:18:38,080 --> 00:18:42,639
used everywhere

459
00:18:40,160 --> 00:18:44,960
and this really stops us from getting a

460
00:18:42,640 --> 00:18:48,400
very tight integration between the you

461
00:18:44,960 --> 00:18:50,640
you iffy code inside you boot

462
00:18:48,400 --> 00:18:53,039
with the drivers it really sits more on

463
00:18:50,640 --> 00:18:55,120
top of it than being really well

464
00:18:53,039 --> 00:18:56,080
integrated and that's something we will

465
00:18:55,120 --> 00:18:58,080
have to work on

466
00:18:56,080 --> 00:19:01,039
once we get the driver model really

467
00:18:58,080 --> 00:19:02,799
firmly established

468
00:19:01,039 --> 00:19:04,080
yeah when we look into what are the

469
00:19:02,799 --> 00:19:09,600
development targets

470
00:19:04,080 --> 00:19:09,600
for uav inside u-boot

471
00:19:09,679 --> 00:19:14,320
it's not the idea to implement all those

472
00:19:11,960 --> 00:19:18,240
2500 pages and then come up with a

473
00:19:14,320 --> 00:19:20,399
binary which is several megabytes long

474
00:19:18,240 --> 00:19:22,640
the target of you would has always been

475
00:19:20,400 --> 00:19:26,480
should boot on a very small board

476
00:19:22,640 --> 00:19:27,520
and this is why we will only implement a

477
00:19:26,480 --> 00:19:31,520
subset of

478
00:19:27,520 --> 00:19:35,039
uav there has been an effort

479
00:19:31,520 --> 00:19:38,559
led by arm to define a restricted

480
00:19:35,039 --> 00:19:41,440
subset which is called the embedded base

481
00:19:38,559 --> 00:19:43,840
uh boot requirement specification which

482
00:19:41,440 --> 00:19:45,919
is available on github

483
00:19:43,840 --> 00:19:47,360
which requires that you have okay the

484
00:19:45,919 --> 00:19:49,600
boot service in place you have the

485
00:19:47,360 --> 00:19:51,199
runtime service in place

486
00:19:49,600 --> 00:19:53,199
and there's one chapter which defines

487
00:19:51,200 --> 00:19:53,919
some other required elements that you

488
00:19:53,200 --> 00:19:56,240
should have

489
00:19:53,919 --> 00:19:57,600
and we really want to stay small so i

490
00:19:56,240 --> 00:19:59,360
often get complaints

491
00:19:57,600 --> 00:20:01,600
the wavy part is already growing too

492
00:19:59,360 --> 00:20:07,520
much currently it's something like

493
00:20:01,600 --> 00:20:09,520
70 kilobytes in the firmware and

494
00:20:07,520 --> 00:20:11,840
nobody will be happy if it gets much

495
00:20:09,520 --> 00:20:11,840
bigger

496
00:20:13,520 --> 00:20:17,360
so what have you achieved last year

497
00:20:18,080 --> 00:20:21,678
now we have all those all boot servers

498
00:20:20,320 --> 00:20:24,720
in place we have

499
00:20:21,679 --> 00:20:27,120
had as i said we were able to run the

500
00:20:24,720 --> 00:20:30,480
uav shell which allowed us to do

501
00:20:27,120 --> 00:20:33,520
self-confident information tests and

502
00:20:30,480 --> 00:20:37,039
this is conformity testing using the

503
00:20:33,520 --> 00:20:38,879
we were able to fix a lot of

504
00:20:37,039 --> 00:20:41,440
differences to the specification

505
00:20:38,880 --> 00:20:41,440
especially

506
00:20:42,799 --> 00:20:46,720
conformance issue where we're not

507
00:20:44,159 --> 00:20:47,679
checking incorrect variables being

508
00:20:46,720 --> 00:20:50,720
passed

509
00:20:47,679 --> 00:20:51,360
and yeah we can run the av shell on arm

510
00:20:50,720 --> 00:20:55,840
on

511
00:20:51,360 --> 00:20:58,158
x 86 we can run the sct

512
00:20:55,840 --> 00:20:59,280
and now let's finish off with what is

513
00:20:58,159 --> 00:21:03,600
work in progress

514
00:20:59,280 --> 00:21:06,559
we have just a bird by christian

515
00:21:03,600 --> 00:21:10,320
cultia so that we can have a verified

516
00:21:06,559 --> 00:21:12,190
boot which is based on fit images

517
00:21:10,320 --> 00:21:13,918
there's linaro with

518
00:21:12,190 --> 00:21:16,799
[Music]

519
00:21:13,919 --> 00:21:17,520
takahiro akashi working on with secure

520
00:21:16,799 --> 00:21:22,080
boot

521
00:21:17,520 --> 00:21:25,280
um what we already have merged is um

522
00:21:22,080 --> 00:21:25,280
support for hardware

523
00:21:25,440 --> 00:21:31,360
the number generators and um so i'm

524
00:21:30,159 --> 00:21:35,520
confident

525
00:21:31,360 --> 00:21:37,760
that we are improving a bit by bit

526
00:21:35,520 --> 00:21:45,840
thanks a lot for your attention and it's

527
00:21:37,760 --> 00:21:45,840
up to your question

528
00:21:46,880 --> 00:21:53,919
questions yes please so

529
00:21:50,240 --> 00:21:56,480
an ipc binary is usually not that small

530
00:21:53,919 --> 00:21:58,559
so do you store that somewhere on the

531
00:21:56,480 --> 00:22:03,440
system itself or do you load that over

532
00:21:58,559 --> 00:22:06,720
tftp no i and the question was where's

533
00:22:03,440 --> 00:22:08,640
ipxc located i personally always loaded

534
00:22:06,720 --> 00:22:10,159
from the av partition so i have an av

535
00:22:08,640 --> 00:22:12,080
partition

536
00:22:10,159 --> 00:22:14,400
we have this on and i have the device

537
00:22:12,080 --> 00:22:15,678
trion essentially i have the firmware

538
00:22:14,400 --> 00:22:20,720
the device tree

539
00:22:15,679 --> 00:22:20,720
and ipxc on my sd card

540
00:22:20,880 --> 00:22:27,679
yes and everything else grab

541
00:22:23,919 --> 00:22:31,039
the kernel and the ram disk is

542
00:22:27,679 --> 00:22:32,880
then loaded via iscsi yes please

543
00:22:31,039 --> 00:22:34,720
if you say you want to stay small how do

544
00:22:32,880 --> 00:22:37,919
you decide which part of the

545
00:22:34,720 --> 00:22:39,600
unity specifications

546
00:22:37,919 --> 00:22:41,600
yeah it's essentially what is in the

547
00:22:39,600 --> 00:22:43,280
evbr what we want to have so the

548
00:22:41,600 --> 00:22:45,439
question was

549
00:22:43,280 --> 00:22:49,280
um which parts will we implement and

550
00:22:45,440 --> 00:22:49,280
that's that's why i mentioned the evbr

551
00:22:49,600 --> 00:22:54,639
and we we have implemented some extra

552
00:22:52,960 --> 00:22:55,440
things that were necessary to run the

553
00:22:54,640 --> 00:22:59,200
shell

554
00:22:55,440 --> 00:23:01,120
and to run the conformity test

555
00:22:59,200 --> 00:23:04,240
because they require some protocols that

556
00:23:01,120 --> 00:23:04,239
are not in the ebbr

557
00:23:06,640 --> 00:23:10,720
yes please so if i understand this

558
00:23:08,400 --> 00:23:12,720
correctly once you have the system table

559
00:23:10,720 --> 00:23:14,400
and some of those protocols that you

560
00:23:12,720 --> 00:23:17,360
need you can now

561
00:23:14,400 --> 00:23:18,080
load ufi drivers once you do this cfi

562
00:23:17,360 --> 00:23:19,678
subsystem

563
00:23:18,080 --> 00:23:22,960
and use those drivers to drive some

564
00:23:19,679 --> 00:23:22,960
devices if you don't have a youtube

565
00:23:23,600 --> 00:23:29,600
the question was can we really run

566
00:23:26,799 --> 00:23:30,639
extra drivers we have everything in

567
00:23:29,600 --> 00:23:32,480
place but i have not

568
00:23:30,640 --> 00:23:34,320
seen any implementation really using

569
00:23:32,480 --> 00:23:37,600
this so currently

570
00:23:34,320 --> 00:23:40,879
for in you would there are drivers

571
00:23:37,600 --> 00:23:44,320
for all sorts of storage devices and for

572
00:23:40,880 --> 00:23:46,799
a network and for usb and

573
00:23:44,320 --> 00:23:48,879
at least the network and the storage

574
00:23:46,799 --> 00:23:51,679
devices we're exposing

575
00:23:48,880 --> 00:23:54,080
via uav protocols without any extra

576
00:23:51,679 --> 00:23:56,000
driver having to be installed

577
00:23:54,080 --> 00:23:57,600
but if you say there's some sort of

578
00:23:56,000 --> 00:24:01,760
special device which you want to

579
00:23:57,600 --> 00:24:03,439
expose then you could load a driver

580
00:24:01,760 --> 00:24:05,039
that you have written yourself yes this

581
00:24:03,440 --> 00:24:07,840
is in place

582
00:24:05,039 --> 00:24:09,679
yes please it's uh parts of the if you

583
00:24:07,840 --> 00:24:11,039
want to support more than the ebb

584
00:24:09,679 --> 00:24:13,120
for example i don't know if it's not

585
00:24:11,039 --> 00:24:14,400
good windows it's possible to also

586
00:24:13,120 --> 00:24:16,879
configure out parts

587
00:24:14,400 --> 00:24:19,120
of the uefi spec that you know don't

588
00:24:16,880 --> 00:24:19,120
need

589
00:24:22,799 --> 00:24:27,760
yeah the question was how configurable

590
00:24:25,679 --> 00:24:30,480
is the uav subsystem

591
00:24:27,760 --> 00:24:32,240
there are parts or if you look into the

592
00:24:30,480 --> 00:24:34,320
configuration of ubud it's like

593
00:24:32,240 --> 00:24:35,520
configuring a linux kernel we are using

594
00:24:34,320 --> 00:24:38,240
just the same

595
00:24:35,520 --> 00:24:39,279
key config system and some parts are

596
00:24:38,240 --> 00:24:40,799
optional that you can

597
00:24:39,279 --> 00:24:42,960
leave out or you can completely

598
00:24:40,799 --> 00:24:44,639
eliminate the uav subsystem

599
00:24:42,960 --> 00:24:47,440
if the board is really too small so

600
00:24:44,640 --> 00:24:50,400
there are some boards that only have

601
00:24:47,440 --> 00:24:50,880
place for 300 kilobytes of firmware and

602
00:24:50,400 --> 00:24:55,600
there

603
00:24:50,880 --> 00:25:00,000
you cannot have the av subsystem

604
00:24:55,600 --> 00:25:00,399
but if you have 600 or 700 kilobytes it

605
00:25:00,000 --> 00:25:03,039
will

606
00:25:00,400 --> 00:25:03,039
well fit in

607
00:25:07,440 --> 00:25:10,640
yeah then thanks a lot for your

608
00:25:12,840 --> 00:25:15,840
attention

609
00:25:17,520 --> 00:25:19,600
you

