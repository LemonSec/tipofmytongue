1
00:00:05,520 --> 00:00:08,719
hi

2
00:00:05,839 --> 00:00:09,679
um i am karthik swaminathan also from

3
00:00:08,720 --> 00:00:11,759
ibm research

4
00:00:09,679 --> 00:00:13,679
and be presenting some of the work we

5
00:00:11,759 --> 00:00:14,559
have done on developing this early stage

6
00:00:13,679 --> 00:00:16,960
reliability

7
00:00:14,559 --> 00:00:20,240
and security estimation tool uh forest

8
00:00:16,960 --> 00:00:20,240
fire processors called razer

9
00:00:20,480 --> 00:00:24,960
as i don't need to elaborate on this

10
00:00:23,119 --> 00:00:26,240
reliability aware design operation is

11
00:00:24,960 --> 00:00:28,240
essential for

12
00:00:26,240 --> 00:00:30,320
pretty much every domain ranging from

13
00:00:28,240 --> 00:00:31,840
servers hyper-scale systems down to

14
00:00:30,320 --> 00:00:33,520
embedded systems

15
00:00:31,840 --> 00:00:36,719
autonomous driving systems in particular

16
00:00:33,520 --> 00:00:36,719
mobile phones and so on

17
00:00:38,960 --> 00:00:42,960
so if you have processors see at either

18
00:00:41,440 --> 00:00:44,239
end of the spectrum say for

19
00:00:42,960 --> 00:00:46,160
high performance or server class

20
00:00:44,239 --> 00:00:48,879
machines like ibm power 9

21
00:00:46,160 --> 00:00:50,319
or of course like a wrist 5 rocket core

22
00:00:48,879 --> 00:00:51,919
in this oh sorry actually the arian core

23
00:00:50,320 --> 00:00:53,199
in this case

24
00:00:51,920 --> 00:00:56,320
say which could be fitted into something

25
00:00:53,199 --> 00:00:58,239
like an autonomous driving system

26
00:00:56,320 --> 00:00:59,680
they are obviously vulnerable to several

27
00:00:58,239 --> 00:01:03,199
sources of errors

28
00:00:59,680 --> 00:01:04,720
one of the main issues is uh radiation

29
00:01:03,199 --> 00:01:07,759
induced soft errors

30
00:01:04,720 --> 00:01:09,200
uh particularly those the

31
00:01:07,760 --> 00:01:11,760
cores deployed in the field are

32
00:01:09,200 --> 00:01:13,680
vulnerable uh to alpha alpha particles

33
00:01:11,760 --> 00:01:15,920
beta gamma rays and so on

34
00:01:13,680 --> 00:01:17,840
and this can cause random bit flips and

35
00:01:15,920 --> 00:01:20,240
uh consequent errors

36
00:01:17,840 --> 00:01:21,680
in addition there can also be targeted

37
00:01:20,240 --> 00:01:22,640
errors due to something like rowhammer

38
00:01:21,680 --> 00:01:26,400
attacks

39
00:01:22,640 --> 00:01:28,560
uh where bits particularly memory can be

40
00:01:26,400 --> 00:01:30,960
targeted bits can be flipped and this

41
00:01:28,560 --> 00:01:33,920
can cause major security violations

42
00:01:30,960 --> 00:01:35,600
so we need a methodology to incorporate

43
00:01:33,920 --> 00:01:36,240
protection and mitigation against these

44
00:01:35,600 --> 00:01:38,839
kinds

45
00:01:36,240 --> 00:01:40,560
of errors right from an early stage of

46
00:01:38,840 --> 00:01:42,159
design and

47
00:01:40,560 --> 00:01:43,759
that's what we propose to do in the

48
00:01:42,159 --> 00:01:45,840
eraser tool

49
00:01:43,759 --> 00:01:47,520
which is an open source framework for

50
00:01:45,840 --> 00:01:50,079
this kind of reliability and security

51
00:01:47,520 --> 00:01:50,079
evaluation

52
00:01:53,119 --> 00:01:57,200
as the larger context uh even the the

53
00:01:55,840 --> 00:01:59,520
proceeding to talks from luka and

54
00:01:57,200 --> 00:02:02,240
schuyler were in the raja ambit of the

55
00:01:59,520 --> 00:02:04,000
dsoc program responsible darpa and uh

56
00:02:02,240 --> 00:02:05,600
which looks an entire stack of building

57
00:02:04,000 --> 00:02:07,840
heterogeneous socs

58
00:02:05,600 --> 00:02:09,840
and in this talk we particularly focus

59
00:02:07,840 --> 00:02:10,720
on the security and reliability of a

60
00:02:09,840 --> 00:02:12,480
design

61
00:02:10,720 --> 00:02:13,760
in this case for cpus but can be easily

62
00:02:12,480 --> 00:02:17,760
extended to a whole bunch

63
00:02:13,760 --> 00:02:17,760
of hardware units as shown here

64
00:02:19,040 --> 00:02:22,799
and just an overview some of the terms

65
00:02:21,120 --> 00:02:24,080
of course like fertile that skyler has

66
00:02:22,800 --> 00:02:25,840
already gone through and

67
00:02:24,080 --> 00:02:27,360
uh i would like to focus on a couple of

68
00:02:25,840 --> 00:02:30,720
metrics here uh one

69
00:02:27,360 --> 00:02:32,239
is ras which is the the way

70
00:02:30,720 --> 00:02:34,720
processors are usually qualified in

71
00:02:32,239 --> 00:02:37,440
terms of the resilience and reliability

72
00:02:34,720 --> 00:02:37,840
uh and the other one is residency which

73
00:02:37,440 --> 00:02:39,920
is

74
00:02:37,840 --> 00:02:40,959
the the amount of time in which a

75
00:02:39,920 --> 00:02:42,879
latches state

76
00:02:40,959 --> 00:02:44,560
remains unchanged so this is a key

77
00:02:42,879 --> 00:02:46,239
metric which we'll be considering for

78
00:02:44,560 --> 00:02:47,519
our reliability evaluation and we

79
00:02:46,239 --> 00:02:48,879
evaluate it as the total number of

80
00:02:47,519 --> 00:02:50,879
execution cycles

81
00:02:48,879 --> 00:02:52,239
uh by the number of data switches in

82
00:02:50,879 --> 00:02:54,640
this case

83
00:02:52,239 --> 00:02:56,319
finally we also have failures in time

84
00:02:54,640 --> 00:02:57,359
which is the failures in a billion hours

85
00:02:56,319 --> 00:02:59,200
of operation

86
00:02:57,360 --> 00:03:01,120
and that's a standard industry standard

87
00:02:59,200 --> 00:03:05,839
metric for for determining the process

88
00:03:01,120 --> 00:03:05,840
of vulnerability

89
00:03:09,120 --> 00:03:13,200
so there are it's possible to carry out

90
00:03:11,840 --> 00:03:14,720
this kind of evaluation at various

91
00:03:13,200 --> 00:03:16,879
stages of process design right from an

92
00:03:14,720 --> 00:03:19,040
analytical stage down to

93
00:03:16,879 --> 00:03:20,399
the building a cycle accurate simulator

94
00:03:19,040 --> 00:03:22,879
uh and the rtl

95
00:03:20,400 --> 00:03:25,280
uh simulation uh fpga based emulation

96
00:03:22,879 --> 00:03:27,760
and finally the process of fabrication

97
00:03:25,280 --> 00:03:30,159
uh however you can notice that at the

98
00:03:27,760 --> 00:03:32,560
first two stages there's not enough

99
00:03:30,159 --> 00:03:34,399
safety sorry not enough information on

100
00:03:32,560 --> 00:03:35,760
the physical design

101
00:03:34,400 --> 00:03:37,360
and in particular in terms of the

102
00:03:35,760 --> 00:03:38,720
latches their size and their

103
00:03:37,360 --> 00:03:41,280
vulnerabilities

104
00:03:38,720 --> 00:03:42,000
and the last two stages it's probably

105
00:03:41,280 --> 00:03:44,720
too late

106
00:03:42,000 --> 00:03:45,920
uh to affect any changes it can be

107
00:03:44,720 --> 00:03:46,720
argued that you can't have some

108
00:03:45,920 --> 00:03:49,280
significant

109
00:03:46,720 --> 00:03:51,440
design input even at the fpga state but

110
00:03:49,280 --> 00:03:52,879
we focus in this case on the rtl level

111
00:03:51,440 --> 00:03:54,400
uh simulation stage

112
00:03:52,879 --> 00:03:56,640
and we can actually look at some of the

113
00:03:54,400 --> 00:03:59,200
latches and carry out these simulations

114
00:03:56,640 --> 00:04:01,359
uh and around this methodology to

115
00:03:59,200 --> 00:04:04,079
evaluate the vulnerability of latches

116
00:04:01,360 --> 00:04:05,840
and have proactively make design changes

117
00:04:04,080 --> 00:04:08,000
to mitigate them

118
00:04:05,840 --> 00:04:09,439
so because of this we have the eraser

119
00:04:08,000 --> 00:04:10,560
tool which can evaluate the ras

120
00:04:09,439 --> 00:04:14,000
readiness

121
00:04:10,560 --> 00:04:15,920
of of a processor and the effect even

122
00:04:14,000 --> 00:04:17,199
the effectiveness of existing product

123
00:04:15,920 --> 00:04:19,599
protection techniques and whether we

124
00:04:17,199 --> 00:04:21,519
need even more protection techniques

125
00:04:19,600 --> 00:04:23,600
so this does provides a comprehensive

126
00:04:21,519 --> 00:04:26,840
framework for such a vulnerability

127
00:04:23,600 --> 00:04:29,840
estimation even at such a pre-silicon

128
00:04:26,840 --> 00:04:29,840
stage

129
00:04:30,800 --> 00:04:34,320
so this is an overview of some of the

130
00:04:32,400 --> 00:04:36,560
components used in eraser

131
00:04:34,320 --> 00:04:37,919
one of the components used is microprobe

132
00:04:36,560 --> 00:04:41,360
this was a tool developed

133
00:04:37,919 --> 00:04:43,919
primarily for ibm systems looked at

134
00:04:41,360 --> 00:04:45,440
uh power and z systems in particular and

135
00:04:43,919 --> 00:04:47,359
it was an automated

136
00:04:45,440 --> 00:04:49,520
micro architecture ever test generation

137
00:04:47,360 --> 00:04:52,240
test case generation methodology

138
00:04:49,520 --> 00:04:53,840
and it has been used heavily in in in

139
00:04:52,240 --> 00:04:57,280
various stages of design in

140
00:04:53,840 --> 00:04:58,799
in these ibm systems the scr minor tool

141
00:04:57,280 --> 00:04:59,679
which i developed in collaboration with

142
00:04:58,800 --> 00:05:02,080
colleagues

143
00:04:59,680 --> 00:05:04,160
was an automated generation of these

144
00:05:02,080 --> 00:05:06,880
kinds of scr stress marks

145
00:05:04,160 --> 00:05:07,680
for uh particularly for the power tool

146
00:05:06,880 --> 00:05:09,840
and these

147
00:05:07,680 --> 00:05:12,160
were based on utilization or clock

148
00:05:09,840 --> 00:05:14,638
switching based metrics

149
00:05:12,160 --> 00:05:16,479
and we ported this to risk 5 which is

150
00:05:14,639 --> 00:05:19,199
which is the kind of

151
00:05:16,479 --> 00:05:19,680
overview of what we present in this talk

152
00:05:19,199 --> 00:05:21,600
and

153
00:05:19,680 --> 00:05:23,120
the acr miner tool looks as it mentioned

154
00:05:21,600 --> 00:05:24,880
looks at the switching files

155
00:05:23,120 --> 00:05:26,240
and generates latch level uh switching

156
00:05:24,880 --> 00:05:28,159
statistics

157
00:05:26,240 --> 00:05:30,320
and finally there's a fault injection

158
00:05:28,160 --> 00:05:32,479
tool which uh that was developed by

159
00:05:30,320 --> 00:05:34,320
skyler here and it looks at statistical

160
00:05:32,479 --> 00:05:36,800
and targeted fault injection

161
00:05:34,320 --> 00:05:38,240
into latches within a s5 core and this

162
00:05:36,800 --> 00:05:39,440
leverages some of the fertile passes

163
00:05:38,240 --> 00:05:41,840
that he had talked about

164
00:05:39,440 --> 00:05:45,280
and it's it's it's got a wide range of

165
00:05:41,840 --> 00:05:45,280
applicability even in the space

166
00:05:47,440 --> 00:05:50,960
so uh as an overview of the entire

167
00:05:49,199 --> 00:05:52,639
eraser 2 flow we

168
00:05:50,960 --> 00:05:54,080
take a single we generate single

169
00:05:52,639 --> 00:05:56,720
instruction test cases for

170
00:05:54,080 --> 00:05:58,800
all the instructions in the risk 5 isa

171
00:05:56,720 --> 00:05:59,440
uh this is run through a risk 5 base

172
00:05:58,800 --> 00:06:01,280
coal model

173
00:05:59,440 --> 00:06:02,639
in this case we adopt the rocket core

174
00:06:01,280 --> 00:06:03,758
but this can be easily extended to

175
00:06:02,639 --> 00:06:05,120
multiple other cores

176
00:06:03,759 --> 00:06:08,960
since it's just dependent on the

177
00:06:05,120 --> 00:06:11,919
particular isa uh we generate vcd files

178
00:06:08,960 --> 00:06:15,198
from uh from rtl level simulations in

179
00:06:11,919 --> 00:06:17,840
this case using the rocket chip emulator

180
00:06:15,199 --> 00:06:19,360
generate macro level or rtl module level

181
00:06:17,840 --> 00:06:21,440
switching information

182
00:06:19,360 --> 00:06:22,560
and use that to get residency

183
00:06:21,440 --> 00:06:25,039
information

184
00:06:22,560 --> 00:06:26,639
which is used to generate a stress mark

185
00:06:25,039 --> 00:06:29,039
these stress marks are then

186
00:06:26,639 --> 00:06:30,639
you run through a similar flow of

187
00:06:29,039 --> 00:06:32,719
emulation macro level

188
00:06:30,639 --> 00:06:34,720
switching information at to generate a

189
00:06:32,720 --> 00:06:37,120
set of vulnerable latches

190
00:06:34,720 --> 00:06:38,240
and finally you have a targeted fault

191
00:06:37,120 --> 00:06:39,840
injection methodology

192
00:06:38,240 --> 00:06:42,160
on this vulnerable latches using the

193
00:06:39,840 --> 00:06:44,080
sheaf tool this will finally give us a

194
00:06:42,160 --> 00:06:45,199
final set of latches that we can deem to

195
00:06:44,080 --> 00:06:46,639
be vulnerable and

196
00:06:45,199 --> 00:06:48,319
determine what kind of protection that

197
00:06:46,639 --> 00:06:52,400
needs to be adopted

198
00:06:48,319 --> 00:06:52,400
for for these particular components

199
00:06:56,880 --> 00:07:01,919
so uh from the previous slide uh so some

200
00:06:59,759 --> 00:07:04,160
of the key features of eraser

201
00:07:01,919 --> 00:07:05,758
we support the analysis of latches by

202
00:07:04,160 --> 00:07:07,680
means of rtl simulation

203
00:07:05,759 --> 00:07:10,319
we have switching residency analysis

204
00:07:07,680 --> 00:07:12,319
aggregated at each at the rtl module or

205
00:07:10,319 --> 00:07:15,039
macro level

206
00:07:12,319 --> 00:07:17,360
we use these to generate stress marks to

207
00:07:15,039 --> 00:07:20,240
evaluate the worst case vulnerability

208
00:07:17,360 --> 00:07:21,120
uh particularly to mac to minimize the

209
00:07:20,240 --> 00:07:24,400
the durating

210
00:07:21,120 --> 00:07:26,639
of latches in case of an error

211
00:07:24,400 --> 00:07:27,919
in in case of a soft error strike or a

212
00:07:26,639 --> 00:07:29,759
radiation strike

213
00:07:27,919 --> 00:07:32,000
uh we then have obviously the validation

214
00:07:29,759 --> 00:07:33,759
platform platform that i mentioned

215
00:07:32,000 --> 00:07:35,360
and finally we had as i mentioned we

216
00:07:33,759 --> 00:07:35,919
demonstrate on the rocket core and we

217
00:07:35,360 --> 00:07:37,360
are we can

218
00:07:35,919 --> 00:07:40,000
run the process of extending to other

219
00:07:37,360 --> 00:07:40,000
cores as well

220
00:07:42,479 --> 00:07:45,840
so as an overview of the exact

221
00:07:44,960 --> 00:07:48,000
methodology for

222
00:07:45,840 --> 00:07:49,359
generation of the stress marks the basic

223
00:07:48,000 --> 00:07:52,160
idea for

224
00:07:49,360 --> 00:07:53,360
a softer stress mark would be one that

225
00:07:52,160 --> 00:07:56,160
minimizes

226
00:07:53,360 --> 00:07:56,639
the the rating or maximizes the exposure

227
00:07:56,160 --> 00:07:59,520
of

228
00:07:56,639 --> 00:08:00,160
a big flip error and this would happen

229
00:07:59,520 --> 00:08:03,520
when

230
00:08:00,160 --> 00:08:07,520
a maximum number of macros

231
00:08:03,520 --> 00:08:08,639
are vulnerable predominantly through the

232
00:08:07,520 --> 00:08:10,400
to the execution

233
00:08:08,639 --> 00:08:12,240
so for example if you have a bunch of

234
00:08:10,400 --> 00:08:14,159
macros that have high degrees of

235
00:08:12,240 --> 00:08:17,199
residency across their latches

236
00:08:14,160 --> 00:08:19,120
as opposed to a few macros uh with the

237
00:08:17,199 --> 00:08:21,039
the residency concentrated only in a few

238
00:08:19,120 --> 00:08:22,319
latches a few macros the former would be

239
00:08:21,039 --> 00:08:24,719
much more vulnerable

240
00:08:22,319 --> 00:08:26,560
so we have two metrics the the mac the

241
00:08:24,720 --> 00:08:28,080
latch residency and the macro what we

242
00:08:26,560 --> 00:08:30,560
term is macro coverage

243
00:08:28,080 --> 00:08:32,079
uh which we need to maximize we use a

244
00:08:30,560 --> 00:08:32,799
kind of greedy algorithm by which we

245
00:08:32,080 --> 00:08:34,719
select

246
00:08:32,799 --> 00:08:37,120
uh each macro depending on the residency

247
00:08:34,719 --> 00:08:39,680
as i will show here

248
00:08:37,120 --> 00:08:40,399
so we have assumed that we have uh on

249
00:08:39,679 --> 00:08:42,319
the y

250
00:08:40,399 --> 00:08:44,000
on the vertical axis we have uh the

251
00:08:42,320 --> 00:08:45,680
macros and we have the

252
00:08:44,000 --> 00:08:47,360
f for and every instruction and the

253
00:08:45,680 --> 00:08:48,479
resistance the residency is

254
00:08:47,360 --> 00:08:51,519
corresponding to each

255
00:08:48,480 --> 00:08:54,240
of of these instructions so for if

256
00:08:51,519 --> 00:08:56,080
for example r11 would be the residency

257
00:08:54,240 --> 00:08:58,080
of macro one when instruction one is run

258
00:08:56,080 --> 00:09:00,240
r12 is residency of macro one when

259
00:08:58,080 --> 00:09:03,360
instruction two is run and so on

260
00:09:00,240 --> 00:09:06,640
and here uh we want to focus

261
00:09:03,360 --> 00:09:08,480
on the most vulnerable macros so we use

262
00:09:06,640 --> 00:09:10,160
a parameter called row which is the

263
00:09:08,480 --> 00:09:12,399
residency threshold

264
00:09:10,160 --> 00:09:13,839
we we can vary row depending it's

265
00:09:12,399 --> 00:09:15,519
depending on how

266
00:09:13,839 --> 00:09:17,200
it's a user parameter and this this can

267
00:09:15,519 --> 00:09:19,040
be fine-tuned to maximize

268
00:09:17,200 --> 00:09:20,240
the effectiveness of the generated

269
00:09:19,040 --> 00:09:22,399
stress mark

270
00:09:20,240 --> 00:09:24,000
and it's it's a user defined parameter

271
00:09:22,399 --> 00:09:25,680
between zero and one and we only

272
00:09:24,000 --> 00:09:29,200
consider the residencies

273
00:09:25,680 --> 00:09:31,199
of those macros that are above the

274
00:09:29,200 --> 00:09:33,120
the roth percentile in terms of the

275
00:09:31,200 --> 00:09:34,240
maximum residency so for example if the

276
00:09:33,120 --> 00:09:37,360
residency of

277
00:09:34,240 --> 00:09:39,760
macro2 is less than say row percent

278
00:09:37,360 --> 00:09:42,399
of the maximum residency seen across all

279
00:09:39,760 --> 00:09:44,399
instruction we will just set it to zero

280
00:09:42,399 --> 00:09:45,600
and based on this we determine a joint

281
00:09:44,399 --> 00:09:47,839
scr metric

282
00:09:45,600 --> 00:09:50,240
in terms of the macro coverage the

283
00:09:47,839 --> 00:09:51,279
residency and the cpi instruction uh in

284
00:09:50,240 --> 00:09:52,640
this case just for the

285
00:09:51,279 --> 00:09:55,040
purpose of initial evaluation we

286
00:09:52,640 --> 00:09:57,120
considered single cpi instructions

287
00:09:55,040 --> 00:09:58,880
uh because uh it obviously depends on

288
00:09:57,120 --> 00:10:01,760
the clock frequency

289
00:09:58,880 --> 00:10:04,399
so uh so as a joint scr metric we just

290
00:10:01,760 --> 00:10:07,920
consider the product of the macro

291
00:10:04,399 --> 00:10:11,040
coverage m and the residency r

292
00:10:07,920 --> 00:10:12,479
and this looks at the entire isa looks

293
00:10:11,040 --> 00:10:13,040
at the entire processor but we can

294
00:10:12,480 --> 00:10:15,120
actually

295
00:10:13,040 --> 00:10:16,719
adapt it to a subset just of a few

296
00:10:15,120 --> 00:10:18,320
instructions or a few macros

297
00:10:16,720 --> 00:10:20,320
to focus on the targeted errors that i

298
00:10:18,320 --> 00:10:21,040
spoke about so if you want to look at a

299
00:10:20,320 --> 00:10:22,480
particular

300
00:10:21,040 --> 00:10:26,800
set of vulnerable bits or vulnerable

301
00:10:22,480 --> 00:10:26,800
latches or macros we can do that as well

302
00:10:28,640 --> 00:10:32,399
so as we go on selecting macros one by

303
00:10:31,680 --> 00:10:34,880
one

304
00:10:32,399 --> 00:10:35,680
we will we will kind of knock out those

305
00:10:34,880 --> 00:10:37,760
particular

306
00:10:35,680 --> 00:10:39,359
macros from the from that instruction

307
00:10:37,760 --> 00:10:40,319
and this will continue we continue

308
00:10:39,360 --> 00:10:42,800
successively

309
00:10:40,320 --> 00:10:43,519
to select instructions until all macros

310
00:10:42,800 --> 00:10:45,120
are covered

311
00:10:43,519 --> 00:10:46,959
and the sequence that is generated in

312
00:10:45,120 --> 00:10:48,320
this manner is our skeleton sequence

313
00:10:46,959 --> 00:10:49,040
which can be used to generate the test

314
00:10:48,320 --> 00:10:51,279
case

315
00:10:49,040 --> 00:10:53,439
the test case is is basically an

316
00:10:51,279 --> 00:10:55,040
infinite loop running these sequences

317
00:10:53,440 --> 00:11:01,360
of sequence of instructions one after

318
00:10:55,040 --> 00:11:04,880
the other

319
00:11:01,360 --> 00:11:07,440
so we have some sample results so we we

320
00:11:04,880 --> 00:11:08,399
evaluate on three metrics the residency

321
00:11:07,440 --> 00:11:09,920
the coverage

322
00:11:08,399 --> 00:11:12,079
and the giant uh metric which is the

323
00:11:09,920 --> 00:11:13,920
product of the two uh

324
00:11:12,079 --> 00:11:16,640
the evaluated workloads we look at the

325
00:11:13,920 --> 00:11:19,279
entire isa around 140 instructions

326
00:11:16,640 --> 00:11:20,720
of the single instruction test cases uh

327
00:11:19,279 --> 00:11:22,079
and these we use as the baselines we

328
00:11:20,720 --> 00:11:24,640
consider the average

329
00:11:22,079 --> 00:11:26,239
uh metrics and the the peak metrics of

330
00:11:24,640 --> 00:11:28,240
all the instructions

331
00:11:26,240 --> 00:11:29,600
uh there are also ways to generate

332
00:11:28,240 --> 00:11:31,440
workload proxies

333
00:11:29,600 --> 00:11:33,200
of entire workloads like spec which

334
00:11:31,440 --> 00:11:35,120
which is an ongoing work

335
00:11:33,200 --> 00:11:36,720
and finally we also have the stress mark

336
00:11:35,120 --> 00:11:39,040
that we determined and we

337
00:11:36,720 --> 00:11:40,399
try to uh we calculate the metrics for

338
00:11:39,040 --> 00:11:42,480
this as you can see

339
00:11:40,399 --> 00:11:43,680
the the stress mark is clearly worse

340
00:11:42,480 --> 00:11:45,360
than uh

341
00:11:43,680 --> 00:11:46,959
the the maximum of the instructions in

342
00:11:45,360 --> 00:11:49,680
all these three metrics

343
00:11:46,959 --> 00:11:50,880
uh this is a single data point which is

344
00:11:49,680 --> 00:11:53,680
around 99

345
00:11:50,880 --> 00:11:55,120
row we can as we vary the the residency

346
00:11:53,680 --> 00:11:56,239
threshold we can get different values

347
00:11:55,120 --> 00:11:58,240
and get get even

348
00:11:56,240 --> 00:12:00,800
higher values of these metrics for the

349
00:11:58,240 --> 00:12:00,800
stress mark

350
00:12:03,040 --> 00:12:07,279
so this as you mentioned is initial work

351
00:12:05,440 --> 00:12:08,480
it's available at public and we

352
00:12:07,279 --> 00:12:10,160
encourage people

353
00:12:08,480 --> 00:12:12,800
to contribute different cases different

354
00:12:10,160 --> 00:12:14,399
scenarios different algorithms to them

355
00:12:12,800 --> 00:12:15,920
there are ways we we would like to

356
00:12:14,399 --> 00:12:17,920
extend it to be on scr

357
00:12:15,920 --> 00:12:19,839
beyond soft errors to voltage noise

358
00:12:17,920 --> 00:12:21,839
thermal aging induced errors

359
00:12:19,839 --> 00:12:23,760
look at further kinds of architectural

360
00:12:21,839 --> 00:12:26,560
enhancements look at

361
00:12:23,760 --> 00:12:28,560
encore parameters uh look at

362
00:12:26,560 --> 00:12:30,560
interconnects the memory controller

363
00:12:28,560 --> 00:12:31,760
and other other considerations other

364
00:12:30,560 --> 00:12:33,760
components as well

365
00:12:31,760 --> 00:12:35,120
we also would like to adapt uh

366
00:12:33,760 --> 00:12:36,319
application level derating

367
00:12:35,120 --> 00:12:38,560
considerations

368
00:12:36,320 --> 00:12:40,079
into the fault injection this is purely

369
00:12:38,560 --> 00:12:41,279
latch and micro architectural level

370
00:12:40,079 --> 00:12:42,800
analysis at the moment

371
00:12:41,279 --> 00:12:44,240
but there is obviously a lot of work at

372
00:12:42,800 --> 00:12:44,880
the architecture and application level

373
00:12:44,240 --> 00:12:47,839
which we would

374
00:12:44,880 --> 00:12:48,320
try to incorporate as well and finally

375
00:12:47,839 --> 00:12:50,079
uh

376
00:12:48,320 --> 00:12:51,839
the the sheath the fault injection

377
00:12:50,079 --> 00:12:54,160
methodology is a pretty basic in which

378
00:12:51,839 --> 00:12:55,360
we run single tests on latches

379
00:12:54,160 --> 00:12:57,120
we would like to develop an

380
00:12:55,360 --> 00:12:58,560
infrastructure for large scale fault

381
00:12:57,120 --> 00:13:00,160
injection simulation experiments

382
00:12:58,560 --> 00:13:02,079
to have a statistically significant

383
00:13:00,160 --> 00:13:07,279
number of results so that's another

384
00:13:02,079 --> 00:13:10,079
part which which is which is ongoing

385
00:13:07,279 --> 00:13:10,959
so to summarize uh we have uh this early

386
00:13:10,079 --> 00:13:13,680
stage modeling

387
00:13:10,959 --> 00:13:15,599
uh tool of vulnerability called eraser

388
00:13:13,680 --> 00:13:16,880
which we use for characterizing per

389
00:13:15,600 --> 00:13:19,839
processor vulnerability at the latch

390
00:13:16,880 --> 00:13:21,360
level we use it to generate and evaluate

391
00:13:19,839 --> 00:13:22,160
stress marks that maximize the latch

392
00:13:21,360 --> 00:13:23,440
residency

393
00:13:22,160 --> 00:13:26,079
and determine the most vulnerable

394
00:13:23,440 --> 00:13:27,920
latches uh we also uh

395
00:13:26,079 --> 00:13:30,239
it comprises of this fault injection

396
00:13:27,920 --> 00:13:32,319
based validation tool chain

397
00:13:30,240 --> 00:13:34,240
uh i have a brief so these are some of

398
00:13:32,320 --> 00:13:35,600
the linx key links um this is all

399
00:13:34,240 --> 00:13:37,120
available on github

400
00:13:35,600 --> 00:13:39,519
it's all supported by the apache 2

401
00:13:37,120 --> 00:13:41,600
license and it's it's free for use

402
00:13:39,519 --> 00:13:42,560
uh many of the tools which are which are

403
00:13:41,600 --> 00:13:43,760
developed uh

404
00:13:42,560 --> 00:13:45,518
and we have the other tools like

405
00:13:43,760 --> 00:13:46,240
microproceed and of course the rocket

406
00:13:45,519 --> 00:13:50,399
chip which is our

407
00:13:46,240 --> 00:13:52,560
evaluation core are also uh can can be

408
00:13:50,399 --> 00:13:54,720
i use can be accessed through through

409
00:13:52,560 --> 00:13:57,760
this uh guitar module

410
00:13:54,720 --> 00:14:00,839
um i have a brief demo for this um

411
00:13:57,760 --> 00:14:03,839
hopefully the sound doesn't give up on

412
00:14:00,839 --> 00:14:03,839
me

413
00:14:19,360 --> 00:14:24,160
is okay i

414
00:14:22,800 --> 00:14:26,000
don't think the sound is working but

415
00:14:24,160 --> 00:14:28,480
that's okay um so

416
00:14:26,000 --> 00:14:29,120
um all it shows is the way to set up the

417
00:14:28,480 --> 00:14:44,639
workload

418
00:14:29,120 --> 00:14:47,120
is run a test test example test case

419
00:14:44,639 --> 00:14:47,120
oh god

420
00:14:57,120 --> 00:15:03,040
unfortunately doesn't it seems to cause

421
00:14:59,440 --> 00:15:03,040
my laptop to hang for some reason

422
00:15:06,079 --> 00:15:09,839
how am i doing on time you see five

423
00:15:07,760 --> 00:15:12,959
minutes okay they might as well give it

424
00:15:09,839 --> 00:15:15,279
a shot than five minutes

425
00:15:12,959 --> 00:15:15,279
okay

426
00:15:24,839 --> 00:15:27,839
jeez

427
00:15:38,880 --> 00:15:43,199
yeah i think it doesn't seem to

428
00:15:43,519 --> 00:15:57,659
like this

429
00:15:54,570 --> 00:15:57,659
[Music]

430
00:16:02,639 --> 00:16:09,839
yeah yeah sorry about this

431
00:16:11,040 --> 00:16:15,439
oh okay okay maybe i can just run

432
00:16:14,959 --> 00:16:18,560
through this

433
00:16:15,440 --> 00:16:20,079
um so it's so the first task would be to

434
00:16:18,560 --> 00:16:20,880
generate the single instruction test

435
00:16:20,079 --> 00:16:22,479
cases

436
00:16:20,880 --> 00:16:24,720
so these are all the instructions in the

437
00:16:22,480 --> 00:16:28,320
risk 5 isa

438
00:16:24,720 --> 00:16:29,839
so this we generate these test cases and

439
00:16:28,320 --> 00:16:33,680
compile them

440
00:16:29,839 --> 00:16:37,040
it's stuck again yeah this shows the

441
00:16:33,680 --> 00:16:39,680
entire workload being compiled

442
00:16:37,040 --> 00:16:42,160
we then run these through the the

443
00:16:39,680 --> 00:16:45,279
rocketship emulator generate

444
00:16:42,160 --> 00:16:48,160
vcd files which we then parse uh

445
00:16:45,279 --> 00:16:49,040
passes to and generator latch activities

446
00:16:48,160 --> 00:16:51,519
and these

447
00:16:49,040 --> 00:16:52,480
latch activities are then used to

448
00:16:51,519 --> 00:16:54,480
aggregate

449
00:16:52,480 --> 00:16:56,320
are aggregated too far to to get macro

450
00:16:54,480 --> 00:16:57,199
level statistics and to get this kind of

451
00:16:56,320 --> 00:16:58,880
a 2d

452
00:16:57,199 --> 00:17:01,920
macro versus instruction residency

453
00:16:58,880 --> 00:17:01,920
profile that had shown

454
00:17:02,839 --> 00:17:05,839
um

455
00:17:16,480 --> 00:17:19,839
yes sorry about this

456
00:17:35,679 --> 00:17:40,400
ah yeah and then finally we use these

457
00:17:38,480 --> 00:17:41,200
macro statistics uh to generate the

458
00:17:40,400 --> 00:17:43,440
stress marks

459
00:17:41,200 --> 00:17:44,480
uh so these are exactly these are the

460
00:17:43,440 --> 00:17:46,160
examples of

461
00:17:44,480 --> 00:17:47,919
the the macro and instructional

462
00:17:46,160 --> 00:17:48,480
statistics so each for each macro we

463
00:17:47,919 --> 00:17:51,039
have

464
00:17:48,480 --> 00:17:52,559
the instru the residency value across

465
00:17:51,039 --> 00:17:54,640
the entire isa so these are

466
00:17:52,559 --> 00:17:56,320
for instruction one two and so on for

467
00:17:54,640 --> 00:17:58,640
for every single instruction

468
00:17:56,320 --> 00:18:00,080
and as few of them are zero because they

469
00:17:58,640 --> 00:18:00,640
have been thresholded out as i mentioned

470
00:18:00,080 --> 00:18:02,879
because

471
00:18:00,640 --> 00:18:04,240
the the way we are depending on the

472
00:18:02,880 --> 00:18:07,760
value of rho

473
00:18:04,240 --> 00:18:15,840
and finally we use this to generate

474
00:18:07,760 --> 00:18:15,840
the stress marks

475
00:18:23,200 --> 00:18:26,640
yeah so uh so according the algorithm

476
00:18:26,000 --> 00:18:28,240
that had

477
00:18:26,640 --> 00:18:29,840
described earlier these were the

478
00:18:28,240 --> 00:18:34,400
instructions that were output

479
00:18:29,840 --> 00:18:36,720
so sc sc.v v0 fcvt and so on

480
00:18:34,400 --> 00:18:38,400
and these we use this as the basic

481
00:18:36,720 --> 00:18:39,840
skeleton to generate our test cases

482
00:18:38,400 --> 00:18:42,400
which is running an infinite loop

483
00:18:39,840 --> 00:18:43,360
and these are then again evaluated uh

484
00:18:42,400 --> 00:18:45,280
run through it and

485
00:18:43,360 --> 00:18:46,639
and the list of most vulnerable latches

486
00:18:45,280 --> 00:18:47,760
are obtained from this from this

487
00:18:46,640 --> 00:18:49,440
evaluation

488
00:18:47,760 --> 00:18:50,960
uh we then would carry out a fault

489
00:18:49,440 --> 00:18:51,360
injection methodology as i described

490
00:18:50,960 --> 00:18:52,400
with this

491
00:18:51,360 --> 00:18:54,399
of course i'd include the fault

492
00:18:52,400 --> 00:18:55,840
injection because we we would like to do

493
00:18:54,400 --> 00:18:59,200
it for a more larger scale

494
00:18:55,840 --> 00:19:00,879
environment so yeah so sorry about the

495
00:18:59,200 --> 00:19:03,120
the demo but yeah this is a basic

496
00:19:00,880 --> 00:19:04,960
overview of the way the tool works

497
00:19:03,120 --> 00:19:11,840
uh we would encourage you to contribute

498
00:19:04,960 --> 00:19:11,840
to it and be happy to take any questions

499
00:19:18,480 --> 00:19:25,840
any questions yep any questions

500
00:19:38,880 --> 00:19:40,960
you

