1
00:00:06,960 --> 00:00:11,759
all right

2
00:00:08,240 --> 00:00:12,960
hi everyone i'm uh first of all sorry

3
00:00:11,759 --> 00:00:15,280
about the delay

4
00:00:12,960 --> 00:00:16,320
uh sorry to the first time organizers

5
00:00:15,280 --> 00:00:18,000
for making

6
00:00:16,320 --> 00:00:20,160
them look bad it's all my fault so you

7
00:00:18,000 --> 00:00:20,160
know

8
00:00:20,880 --> 00:00:24,240
i'm also happy that i have a pretty

9
00:00:22,800 --> 00:00:25,920
short talk right now because i think

10
00:00:24,240 --> 00:00:27,680
we'll still manage on time

11
00:00:25,920 --> 00:00:29,439
and if not we'll run a little bit over

12
00:00:27,680 --> 00:00:32,558
maybe with questions if

13
00:00:29,439 --> 00:00:35,200
people have any so yeah i'm i'm

14
00:00:32,558 --> 00:00:36,320
my name is eric i work at collabora and

15
00:00:35,200 --> 00:00:38,960
i'm going to talk

16
00:00:36,320 --> 00:00:42,000
to you about what's happened in the last

17
00:00:38,960 --> 00:00:45,280
year of the zinc project

18
00:00:42,000 --> 00:00:49,600
so yeah let's i'll just start

19
00:00:45,280 --> 00:00:52,879
so one year ago uh i was here at uh

20
00:00:49,600 --> 00:00:54,079
fosdem and i presented about zinc and

21
00:00:52,879 --> 00:00:56,239
for those who don't know the zinc

22
00:00:54,079 --> 00:00:57,440
project it's an opengl implementation on

23
00:00:56,239 --> 00:01:03,038
top of vulcan

24
00:00:57,440 --> 00:01:03,039
using mesa 3d and the gallium interface

25
00:01:03,199 --> 00:01:08,479
what we had was running opengl 3.0 or at

26
00:01:06,159 --> 00:01:10,400
least exposed that

27
00:01:08,479 --> 00:01:12,080
turns out that there's some more test

28
00:01:10,400 --> 00:01:16,479
running and stuff we were kind of

29
00:01:12,080 --> 00:01:20,400
far off on a bunch of the details uh

30
00:01:16,479 --> 00:01:21,360
so yeah we were failing a whole lot of

31
00:01:20,400 --> 00:01:23,520
piglet tests and

32
00:01:21,360 --> 00:01:24,960
i don't have the numbers but it was it

33
00:01:23,520 --> 00:01:27,439
wasn't great but it was kind of you know

34
00:01:24,960 --> 00:01:30,798
working for some applications

35
00:01:27,439 --> 00:01:35,119
uh yeah so

36
00:01:30,799 --> 00:01:38,640
uh this fall uh

37
00:01:35,119 --> 00:01:42,159
zinc got upstreamed in meza and and

38
00:01:38,640 --> 00:01:44,880
became a part of mesa 19.3

39
00:01:42,159 --> 00:01:45,280
so it's no longer living in a branch

40
00:01:44,880 --> 00:01:48,399
it's

41
00:01:45,280 --> 00:01:50,079
uh it's now shipping it's not compiling

42
00:01:48,399 --> 00:01:52,079
by default but

43
00:01:50,079 --> 00:01:53,439
you can enable it the same way as you

44
00:01:52,079 --> 00:01:56,479
enable any

45
00:01:53,439 --> 00:01:57,758
gallium drivers and we've started

46
00:01:56,479 --> 00:02:00,719
getting some

47
00:01:57,759 --> 00:02:02,479
contributions from other people so now i

48
00:02:00,719 --> 00:02:03,839
think five people have contributed to

49
00:02:02,479 --> 00:02:06,079
zinc

50
00:02:03,840 --> 00:02:07,280
i think last year there was two so this

51
00:02:06,079 --> 00:02:10,720
is

52
00:02:07,280 --> 00:02:12,080
interesting uh and yeah and now

53
00:02:10,720 --> 00:02:14,480
everything happens upstream and

54
00:02:12,080 --> 00:02:15,520
in the upstream issue tracker and stuff

55
00:02:14,480 --> 00:02:18,640
like that so

56
00:02:15,520 --> 00:02:21,280
no point in filing issues in my in my

57
00:02:18,640 --> 00:02:24,160
fork any longer

58
00:02:21,280 --> 00:02:25,360
we've sadly had to revert away from the

59
00:02:24,160 --> 00:02:27,680
opengl 3.0

60
00:02:25,360 --> 00:02:28,640
stuff so we're now only exposing opengl

61
00:02:27,680 --> 00:02:31,680
2.1

62
00:02:28,640 --> 00:02:34,640
uh there's two major features missing

63
00:02:31,680 --> 00:02:37,040
uh that were in the last prototype that

64
00:02:34,640 --> 00:02:40,238
needs some re-engineering

65
00:02:37,040 --> 00:02:42,429
um yeah so since

66
00:02:40,239 --> 00:02:43,680
last year we've added some i think

67
00:02:42,430 --> 00:02:46,160
[Music]

68
00:02:43,680 --> 00:02:48,239
pretty like some features that are quite

69
00:02:46,160 --> 00:02:49,680
nice we now properly support control

70
00:02:48,239 --> 00:02:51,680
flow and

71
00:02:49,680 --> 00:02:54,160
in the shaders so you can do all of your

72
00:02:51,680 --> 00:02:57,280
ifs and switches and

73
00:02:54,160 --> 00:03:00,720
loops and stuff like that

74
00:02:57,280 --> 00:03:02,080
we properly forward uh point sizes if

75
00:03:00,720 --> 00:03:04,159
if they're not written from the vertex

76
00:03:02,080 --> 00:03:08,239
shader we yeah

77
00:03:04,159 --> 00:03:08,239
do alpha testing and

78
00:03:15,760 --> 00:03:19,518
transfer transform feedback and

79
00:03:17,680 --> 00:03:22,000
conditional rendering support

80
00:03:19,519 --> 00:03:24,000
because we yeah we engineered some of

81
00:03:22,000 --> 00:03:27,599
the way things are

82
00:03:24,000 --> 00:03:30,480
emitted and some yeah how curious way

83
00:03:27,599 --> 00:03:33,599
worked because yeah the old thing kind

84
00:03:30,480 --> 00:03:36,879
of failed in a lot of cases

85
00:03:33,599 --> 00:03:40,319
uh yeah so i'm

86
00:03:36,879 --> 00:03:41,280
currently doing a quite more structured

87
00:03:40,319 --> 00:03:44,480
testing

88
00:03:41,280 --> 00:03:45,840
than before so this

89
00:03:44,480 --> 00:03:47,518
these numbers are actually a little bit

90
00:03:45,840 --> 00:03:49,920
out of date they were up to date

91
00:03:47,519 --> 00:03:50,799
three days ago but now i've improved

92
00:03:49,920 --> 00:03:54,079
some stuff

93
00:03:50,799 --> 00:03:56,239
but yeah so we have about three

94
00:03:54,080 --> 00:03:58,480
three thousand something tests passing

95
00:03:56,239 --> 00:03:58,480
uh

96
00:03:58,799 --> 00:04:04,319
i think we're down to almost half of the

97
00:04:02,239 --> 00:04:07,599
failures now

98
00:04:04,319 --> 00:04:10,720
uh yeah and uh even less crashes

99
00:04:07,599 --> 00:04:14,640
so that's yeah probably closer to 80

100
00:04:10,720 --> 00:04:17,680
pass rate right now um

101
00:04:14,640 --> 00:04:20,320
and uh most of the failures

102
00:04:17,680 --> 00:04:21,120
right now or at least the big bulk of

103
00:04:20,320 --> 00:04:24,159
them

104
00:04:21,120 --> 00:04:25,440
has to do with unsupported edge flags uh

105
00:04:24,160 --> 00:04:27,680
which we need to do something more

106
00:04:25,440 --> 00:04:31,120
clever about uh

107
00:04:27,680 --> 00:04:34,560
right now we just fail

108
00:04:31,120 --> 00:04:36,000
throw an error and give up uh

109
00:04:34,560 --> 00:04:37,680
yeah and also some stuff due to

110
00:04:36,000 --> 00:04:40,080
unsupported line stipple

111
00:04:37,680 --> 00:04:41,360
line stipple we have an easy way forward

112
00:04:40,080 --> 00:04:44,240
with because

113
00:04:41,360 --> 00:04:46,240
there's uh there's uh an extension for

114
00:04:44,240 --> 00:04:48,400
better lines in vulcan

115
00:04:46,240 --> 00:04:49,680
now that it's exposed by i think both

116
00:04:48,400 --> 00:04:52,719
the amv and rad v

117
00:04:49,680 --> 00:04:54,160
drivers that uh allow allow us to

118
00:04:52,720 --> 00:04:56,560
forward line stippling

119
00:04:54,160 --> 00:04:59,680
last time like i tried implement i have

120
00:04:56,560 --> 00:05:01,919
some experimental patches for it

121
00:04:59,680 --> 00:05:03,440
they there seems to be some differences

122
00:05:01,919 --> 00:05:06,320
in how how this works

123
00:05:03,440 --> 00:05:08,000
uh in in vulcan and opengl so it didn't

124
00:05:06,320 --> 00:05:11,199
really pass a whole lot of tests

125
00:05:08,000 --> 00:05:14,000
it started stippling but there's some

126
00:05:11,199 --> 00:05:14,000
more stuff to it

127
00:05:14,960 --> 00:05:19,280
yeah performance is something i keep

128
00:05:17,360 --> 00:05:22,880
getting asked about

129
00:05:19,280 --> 00:05:26,080
i keep trying to avoid the

130
00:05:22,880 --> 00:05:29,440
question a bit um

131
00:05:26,080 --> 00:05:30,479
it's not great uh and it's all but it's

132
00:05:29,440 --> 00:05:32,320
also not

133
00:05:30,479 --> 00:05:33,919
really the main focus of the project i'm

134
00:05:32,320 --> 00:05:35,199
not saying that we don't care about

135
00:05:33,919 --> 00:05:38,560
performance

136
00:05:35,199 --> 00:05:40,960
but this uh zinc is kind of like trying

137
00:05:38,560 --> 00:05:43,120
i'm trying to prepare us for a future

138
00:05:40,960 --> 00:05:46,239
where we don't need opengl anymore

139
00:05:43,120 --> 00:05:47,600
so uh hopefully machines will like

140
00:05:46,240 --> 00:05:50,400
i don't think this is gonna be super

141
00:05:47,600 --> 00:05:51,840
relevant for the next five years and uh

142
00:05:50,400 --> 00:05:53,599
and then machines will be a little bit

143
00:05:51,840 --> 00:05:56,000
faster and and uh

144
00:05:53,600 --> 00:05:56,960
opengl like more high-end stuff will be

145
00:05:56,000 --> 00:06:00,000
ported and

146
00:05:56,960 --> 00:06:00,479
i think we will uh not care that much

147
00:06:00,000 --> 00:06:03,440
but

148
00:06:00,479 --> 00:06:06,240
uh but of course uh it's nice to get the

149
00:06:03,440 --> 00:06:06,240
performance we can

150
00:06:06,639 --> 00:06:09,919
yeah so not much has changed there i

151
00:06:08,639 --> 00:06:12,240
don't really do any

152
00:06:09,919 --> 00:06:14,880
systematic numbers here but for onyx did

153
00:06:12,240 --> 00:06:17,280
a benchmarking

154
00:06:14,880 --> 00:06:18,080
of bradley or zinc on top of radley

155
00:06:17,280 --> 00:06:21,359
versus

156
00:06:18,080 --> 00:06:22,960
iridium si and i'm kind of surprised by

157
00:06:21,360 --> 00:06:26,319
the results some of the tests are

158
00:06:22,960 --> 00:06:29,280
almost on par i'm guessing those are

159
00:06:26,319 --> 00:06:30,800
cases where we're gpu bound and for some

160
00:06:29,280 --> 00:06:34,239
reason we happen to do

161
00:06:30,800 --> 00:06:36,639
things that are okay for the gpu

162
00:06:34,240 --> 00:06:37,520
but some are pretty far off and then

163
00:06:36,639 --> 00:06:41,840
we're talking about

164
00:06:37,520 --> 00:06:45,280
maybe 25 to 33

165
00:06:41,840 --> 00:06:46,719
ish of the performance so still usable

166
00:06:45,280 --> 00:06:48,960
but not

167
00:06:46,720 --> 00:06:50,639
not uh anything you want to game on for

168
00:06:48,960 --> 00:06:54,719
instance

169
00:06:50,639 --> 00:06:54,720
um so yeah and uh

170
00:06:54,800 --> 00:06:59,039
just from how zinc is engineered i think

171
00:06:56,800 --> 00:07:01,360
there's quite a lot that can be done for

172
00:06:59,039 --> 00:07:02,080
for performance we're doing a very

173
00:07:01,360 --> 00:07:04,160
simple

174
00:07:02,080 --> 00:07:06,719
kind of translation model where we're

175
00:07:04,160 --> 00:07:09,599
not trying to be terribly clever

176
00:07:06,720 --> 00:07:11,039
and uh yeah i think at some point we're

177
00:07:09,599 --> 00:07:14,000
probably gonna have to start

178
00:07:11,039 --> 00:07:14,000
being a bit more clever

179
00:07:14,400 --> 00:07:20,880
uh yeah so some about the stuff

180
00:07:17,759 --> 00:07:23,599
i'm working on um

181
00:07:20,880 --> 00:07:23,919
next on my kind of uh to-do list here is

182
00:07:23,599 --> 00:07:28,240
uh

183
00:07:23,919 --> 00:07:28,240
crossing of opengl 3.10 again

184
00:07:28,840 --> 00:07:32,400
um

185
00:07:30,400 --> 00:07:33,440
yeah and these slides are out of date

186
00:07:32,400 --> 00:07:35,359
because uh

187
00:07:33,440 --> 00:07:37,280
or this already because i added back

188
00:07:35,360 --> 00:07:39,120
instance rendering and texture buffer

189
00:07:37,280 --> 00:07:41,520
objects

190
00:07:39,120 --> 00:07:44,400
over the weekend or not over the weekend

191
00:07:41,520 --> 00:07:48,000
but the last couple of days

192
00:07:44,400 --> 00:07:48,000
uh yeah

193
00:07:48,160 --> 00:07:51,680
but yeah the conditional rendering and

194
00:07:49,759 --> 00:07:55,520
the transforms feedback stuff

195
00:07:51,680 --> 00:07:58,400
uh needs some more work

196
00:07:55,520 --> 00:08:00,159
i also want to start testing for opengl

197
00:07:58,400 --> 00:08:03,198
es 2.0

198
00:08:00,160 --> 00:08:06,240
i suspect that we're already there but

199
00:08:03,199 --> 00:08:07,599
in terms of features probably fail some

200
00:08:06,240 --> 00:08:10,319
tests and some

201
00:08:07,599 --> 00:08:12,560
bugs there but but i think we should

202
00:08:10,319 --> 00:08:16,080
have all of the stuff that's required

203
00:08:12,560 --> 00:08:20,160
but i haven't spent any time on it but

204
00:08:16,080 --> 00:08:21,039
i think after i've landed gl 3.0 i think

205
00:08:20,160 --> 00:08:24,720
this

206
00:08:21,039 --> 00:08:24,719
might be what i will look into next

207
00:08:24,960 --> 00:08:30,799
uh yeah and then it's the cool like

208
00:08:28,080 --> 00:08:32,159
this is moving kind of slowly currently

209
00:08:30,800 --> 00:08:36,080
because i'm working on zinc

210
00:08:32,159 --> 00:08:38,399
uh as a part-time r d project uh at work

211
00:08:36,080 --> 00:08:39,599
and i'm kind of uh super busy with some

212
00:08:38,399 --> 00:08:43,360
other

213
00:08:39,599 --> 00:08:46,720
paid client work at the time

214
00:08:43,360 --> 00:08:48,480
so i kind of don't have a great way out

215
00:08:46,720 --> 00:08:49,920
of that it's there's not gonna this is

216
00:08:48,480 --> 00:08:52,150
gonna be the case for

217
00:08:49,920 --> 00:08:53,439
for some months going forward

218
00:08:52,150 --> 00:08:56,000
[Music]

219
00:08:53,440 --> 00:08:57,279
but if you need zinc to move faster i

220
00:08:56,000 --> 00:08:58,560
think there's kind of two

221
00:08:57,279 --> 00:09:00,640
options you can either work on it

222
00:08:58,560 --> 00:09:02,800
yourself or you could hire collaborate

223
00:09:00,640 --> 00:09:05,199
to work on it for you

224
00:09:02,800 --> 00:09:06,000
uh yeah well i think we're at the point

225
00:09:05,200 --> 00:09:09,200
where

226
00:09:06,000 --> 00:09:11,440
i think to move this faster and and uh

227
00:09:09,200 --> 00:09:13,040
more robustly we need to find a find

228
00:09:11,440 --> 00:09:16,720
some paying customers or something to

229
00:09:13,040 --> 00:09:16,719
to spend some proper time on it

230
00:09:17,360 --> 00:09:24,000
all right that was my talk

231
00:09:20,640 --> 00:09:26,000
so i managed didn't i yeah oh one minute

232
00:09:24,000 --> 00:09:28,480
over

233
00:09:26,000 --> 00:09:28,480
yeah sure

234
00:09:29,120 --> 00:09:37,519
yeah one of the main criticisms

235
00:09:35,279 --> 00:09:39,200
so i'm curious what is your mid to long

236
00:09:37,519 --> 00:09:41,440
term goal like do you aim to

237
00:09:39,200 --> 00:09:44,640
support all versions of opengl or only

238
00:09:41,440 --> 00:09:44,640
like the modern ones

239
00:09:45,839 --> 00:09:49,519
yeah okay sorry uh so the question was

240
00:09:48,399 --> 00:09:52,560
if uh if

241
00:09:49,519 --> 00:09:54,320
i plan on supporting only uh old or new

242
00:09:52,560 --> 00:09:56,880
opengl versions or

243
00:09:54,320 --> 00:09:57,600
like what the long term plan for zinc is

244
00:09:56,880 --> 00:09:59,680
and

245
00:09:57,600 --> 00:10:01,440
uh the long term plan from my

246
00:09:59,680 --> 00:10:02,079
perspective this is gonna take a while

247
00:10:01,440 --> 00:10:05,120
but it's

248
00:10:02,079 --> 00:10:08,319
it is full opengl support all the way

249
00:10:05,120 --> 00:10:11,519
uh as much as we can i don't

250
00:10:08,320 --> 00:10:14,079
care too much about uh hypothetical

251
00:10:11,519 --> 00:10:16,839
vulcan drivers for instance so i'm i'm

252
00:10:14,079 --> 00:10:19,120
pretty happy to kind of use

253
00:10:16,839 --> 00:10:19,519
extensions uh where that gets me out of

254
00:10:19,120 --> 00:10:22,880
uh

255
00:10:19,519 --> 00:10:25,760
out of a problem um

256
00:10:22,880 --> 00:10:27,680
but uh but i don't see anything in the

257
00:10:25,760 --> 00:10:29,839
way for for instance if someone has a

258
00:10:27,680 --> 00:10:31,760
has a driver and they won't hire opengl

259
00:10:29,839 --> 00:10:32,880
person we might have to implement some

260
00:10:31,760 --> 00:10:36,240
lowering to

261
00:10:32,880 --> 00:10:39,279
some nasty stuff i for instance foresee

262
00:10:36,240 --> 00:10:39,279
quite a lot of uh

263
00:10:40,640 --> 00:10:44,839
fixed function stuff being lowered to

264
00:10:42,800 --> 00:10:47,519
geometry shader

265
00:10:44,839 --> 00:10:50,560
stuff in the future for

266
00:10:47,519 --> 00:10:52,959
for instance uh stuff like the edge

267
00:10:50,560 --> 00:10:56,719
flags

268
00:10:52,959 --> 00:10:58,479
so uh yeah uh long-term goal i think i

269
00:10:56,720 --> 00:11:00,240
i don't see a reason why not to go for

270
00:10:58,480 --> 00:11:03,519
the for full

271
00:11:00,240 --> 00:11:08,000
opengl 4.6 compatibility profile

272
00:11:03,519 --> 00:11:08,000
but it's going to take a while

273
00:11:09,839 --> 00:11:17,440
anyone else

274
00:11:14,079 --> 00:11:17,439
right um

275
00:11:18,480 --> 00:11:22,079
okay so two topics at the same time like

276
00:11:20,640 --> 00:11:23,839
you're talking about how much work it is

277
00:11:22,079 --> 00:11:24,640
and how like you would like to be hired

278
00:11:23,839 --> 00:11:29,120
to

279
00:11:24,640 --> 00:11:32,399
work or work on it and

280
00:11:29,120 --> 00:11:34,079
is this like linux only or is it usable

281
00:11:32,399 --> 00:11:35,680
on other platforms like one platform you

282
00:11:34,079 --> 00:11:38,959
can think of

283
00:11:35,680 --> 00:11:40,479
would be the mac where the ngos policy

284
00:11:38,959 --> 00:11:42,719
completely dropped and something like

285
00:11:40,480 --> 00:11:44,720
that could actually help

286
00:11:42,720 --> 00:11:47,200
developers even like copyright

287
00:11:44,720 --> 00:11:47,200
developers

288
00:11:48,160 --> 00:11:52,000
okay so the question was about platform

289
00:11:50,959 --> 00:11:54,638
support and

290
00:11:52,000 --> 00:11:57,839
uh if it's linux only or if it works on

291
00:11:54,639 --> 00:11:57,839
other platforms as well

292
00:11:58,240 --> 00:12:05,600
it works on linux and

293
00:12:01,440 --> 00:12:07,279
on mac os so i have not

294
00:12:05,600 --> 00:12:09,600
i don't have a mac i don't test on mac

295
00:12:07,279 --> 00:12:14,560
but we have users who use it

296
00:12:09,600 --> 00:12:17,920
on top of molten vk on top of metal

297
00:12:14,560 --> 00:12:21,040
to to run on mac so

298
00:12:17,920 --> 00:12:23,760
so there are people who do this

299
00:12:21,040 --> 00:12:25,199
and there's some yeah there's some

300
00:12:23,760 --> 00:12:30,399
interesting people trying

301
00:12:25,200 --> 00:12:31,760
this for some kind of big projects

302
00:12:30,399 --> 00:12:33,440
i don't think anyone is doing this in

303
00:12:31,760 --> 00:12:36,560
production but

304
00:12:33,440 --> 00:12:38,480
uh yeah i don't

305
00:12:36,560 --> 00:12:39,680
so right now the implementation is kind

306
00:12:38,480 --> 00:12:41,839
of tied to

307
00:12:39,680 --> 00:12:43,519
to mesa and the windows system

308
00:12:41,839 --> 00:12:46,560
implementations there

309
00:12:43,519 --> 00:12:47,680
and mesa doesn't to my knowledge have

310
00:12:46,560 --> 00:12:50,800
any

311
00:12:47,680 --> 00:12:55,439
windows wins this integration

312
00:12:50,800 --> 00:12:58,079
apart from the software rasterizer stuff

313
00:12:55,440 --> 00:12:59,200
zinc has the ability to hook in as a

314
00:12:58,079 --> 00:13:01,680
software rasterizer

315
00:12:59,200 --> 00:13:03,200
basically as a mem copy into into a

316
00:13:01,680 --> 00:13:04,638
frame buffer

317
00:13:03,200 --> 00:13:06,560
and i guess in theory that could be

318
00:13:04,639 --> 00:13:07,680
wired up

319
00:13:06,560 --> 00:13:09,839
but i think it's going to be pretty

320
00:13:07,680 --> 00:13:13,439
terrible for performance reasons so i

321
00:13:09,839 --> 00:13:20,880
i kind of i'm not planning on

322
00:13:13,440 --> 00:13:23,200
going down down that road

323
00:13:20,880 --> 00:13:24,560
um are there any features that you are

324
00:13:23,200 --> 00:13:27,360
missing from balkan

325
00:13:24,560 --> 00:13:29,760
which prevent you from getting the

326
00:13:27,360 --> 00:13:35,839
optimal performance

327
00:13:29,760 --> 00:13:35,839
right so the question is if there's any

328
00:13:50,560 --> 00:13:54,000
i don't see a reason why we can't add

329
00:13:52,720 --> 00:13:57,920
extensions

330
00:13:54,000 --> 00:13:58,880
especially not i'm primarily targeting

331
00:13:57,920 --> 00:14:00,079
the intel amv

332
00:13:58,880 --> 00:14:02,480
driver because that's the hardware i

333
00:14:00,079 --> 00:14:04,000
have and that

334
00:14:02,480 --> 00:14:05,920
driver happens to live in the same tree

335
00:14:04,000 --> 00:14:09,600
which is super convenient

336
00:14:05,920 --> 00:14:12,719
so um at some point i might

337
00:14:09,600 --> 00:14:14,320
look into that i'm more uh i'm more

338
00:14:12,720 --> 00:14:16,480
interested in this for

339
00:14:14,320 --> 00:14:18,079
compatibility than perf for features

340
00:14:16,480 --> 00:14:18,880
though because there's some things that

341
00:14:18,079 --> 00:14:20,399
are just

342
00:14:18,880 --> 00:14:22,399
a little bit too crazy to implement

343
00:14:20,399 --> 00:14:25,600
without um

344
00:14:22,399 --> 00:14:27,519
without any extensions

345
00:14:25,600 --> 00:14:30,240
but i think the answer is yes we could

346
00:14:27,519 --> 00:14:32,880
go down that road we're not actively

347
00:14:30,240 --> 00:14:34,800
pursuing it yet

348
00:14:32,880 --> 00:14:36,560
this could very well change for instance

349
00:14:34,800 --> 00:14:40,399
if we get a paying customer who

350
00:14:36,560 --> 00:14:42,160
does care about performance i think

351
00:14:40,399 --> 00:14:43,440
that's probably a likely outcome at some

352
00:14:42,160 --> 00:14:45,760
point that we get some

353
00:14:43,440 --> 00:14:48,079
benchmark results or goals that we need

354
00:14:45,760 --> 00:14:59,839
to reach

355
00:14:48,079 --> 00:14:59,839
all right how hot do you think

356
00:15:25,680 --> 00:15:28,000
things

357
00:15:34,880 --> 00:15:41,839
it could be useful for some

358
00:15:35,920 --> 00:15:41,839
compatibility stuff there

359
00:15:44,160 --> 00:15:47,279
you basically just opened up all the

360
00:15:46,480 --> 00:15:48,800
maps

361
00:15:47,279 --> 00:15:55,839
straight to a button called how many of

362
00:15:48,800 --> 00:15:55,839
them are like

363
00:15:59,600 --> 00:16:04,480
the api translates more or less directly

364
00:16:01,920 --> 00:16:06,479
to the vulkan api and

365
00:16:04,480 --> 00:16:08,480
i think to answer that question kind of

366
00:16:06,480 --> 00:16:08,880
truthfully will be kind of a long answer

367
00:16:08,480 --> 00:16:12,240
because

368
00:16:08,880 --> 00:16:12,560
uh it uh we're not implementing opengl

369
00:16:12,240 --> 00:16:14,959
we're

370
00:16:12,560 --> 00:16:16,880
implementing the gallium interface the

371
00:16:14,959 --> 00:16:21,758
gallium interface is much closer to

372
00:16:16,880 --> 00:16:23,600
something like the dark 3d 10. um

373
00:16:21,759 --> 00:16:25,040
we're we're taking a pretty naive

374
00:16:23,600 --> 00:16:27,600
approach where we're kind of like

375
00:16:25,040 --> 00:16:29,040
just pulling the handbrake whenever uh

376
00:16:27,600 --> 00:16:32,560
semantics break if we

377
00:16:29,040 --> 00:16:35,199
if we don't so uh right now we're going

378
00:16:32,560 --> 00:16:36,160
pretty directly i would say uh we're

379
00:16:35,199 --> 00:16:38,479
doing stuff like

380
00:16:36,160 --> 00:16:40,959
uh for instance uh vulcan has the

381
00:16:38,480 --> 00:16:42,720
concept of render passes

382
00:16:40,959 --> 00:16:44,160
and we're just starting and stopping

383
00:16:42,720 --> 00:16:46,079
them whenever we can't

384
00:16:44,160 --> 00:16:47,839
whenever commands aren't allowed inside

385
00:16:46,079 --> 00:16:48,479
a render pass so we're not trying to

386
00:16:47,839 --> 00:16:50,399
reorder

387
00:16:48,480 --> 00:16:52,480
uh things and track dependencies for

388
00:16:50,399 --> 00:16:54,880
instance

389
00:16:52,480 --> 00:16:57,279
that's is a horrible idea and that's

390
00:16:54,880 --> 00:17:00,480
definitely going to have to change but

391
00:16:57,279 --> 00:17:01,839
but for now it works much better than i

392
00:17:00,480 --> 00:17:03,199
fared

393
00:17:01,839 --> 00:17:06,000
i think one of the reasons for that is

394
00:17:03,199 --> 00:17:08,959
probably that i'm currently targeting

395
00:17:06,000 --> 00:17:09,760
desktop gpus largely and they don't

396
00:17:08,959 --> 00:17:12,480
really benefit

397
00:17:09,760 --> 00:17:15,760
for from render passes as much as

398
00:17:12,480 --> 00:17:15,760
tile-based renderers do

399
00:17:16,640 --> 00:17:19,839
so yeah

400
00:17:20,720 --> 00:17:26,079
shaders uh yeah so the question is how

401
00:17:23,760 --> 00:17:27,119
the i deal with shaders and uh this is

402
00:17:26,079 --> 00:17:29,200
uh

403
00:17:27,119 --> 00:17:30,639
uh this is i think is the one of the

404
00:17:29,200 --> 00:17:33,919
more interesting parts of zinc

405
00:17:30,640 --> 00:17:38,000
uh at least for me so we take

406
00:17:33,919 --> 00:17:40,160
we take shaders from mesa we get shaders

407
00:17:38,000 --> 00:17:43,679
okay i'm have to wrap up soon

408
00:17:40,160 --> 00:17:46,720
uh we get shaders from uh sglsl

409
00:17:43,679 --> 00:17:49,280
or arb vertex program they get converted

410
00:17:46,720 --> 00:17:51,679
into some ir and then into ner which is

411
00:17:49,280 --> 00:17:54,960
a

412
00:17:51,679 --> 00:17:56,000
general ir in mesa and now gets

413
00:17:54,960 --> 00:17:59,039
translated

414
00:17:56,000 --> 00:18:02,400
finally to spur v which gets handed

415
00:17:59,039 --> 00:18:05,200
over uh to the so basically

416
00:18:02,400 --> 00:18:06,240
what i wanted to ask is do you translate

417
00:18:05,200 --> 00:18:07,919
it to skirving

418
00:18:06,240 --> 00:18:09,679
and then the welcome driver translates

419
00:18:07,919 --> 00:18:14,640
it back to there again

420
00:18:09,679 --> 00:18:18,880
yes could that

421
00:18:14,640 --> 00:18:18,880
uh probably uh so

422
00:18:19,200 --> 00:18:23,520
so yeah the question is if if going from

423
00:18:21,760 --> 00:18:24,559
naruto's pervy and back again could be

424
00:18:23,520 --> 00:18:27,760
avoided

425
00:18:24,559 --> 00:18:30,080
um because the the driver

426
00:18:27,760 --> 00:18:31,600
the vulcan driver will if it's if it's a

427
00:18:30,080 --> 00:18:33,039
mess-based vulcan driver will translate

428
00:18:31,600 --> 00:18:34,240
back to ner

429
00:18:33,039 --> 00:18:37,039
so we're going to do a little bit of a

430
00:18:34,240 --> 00:18:37,840
dance there uh yes i think that could be

431
00:18:37,039 --> 00:18:40,799
avoided

432
00:18:37,840 --> 00:18:42,000
uh this i think is an interesting point

433
00:18:40,799 --> 00:18:45,600
to look into

434
00:18:42,000 --> 00:18:48,960
making an extension that being said

435
00:18:45,600 --> 00:18:53,120
ner isn't really made for uh

436
00:18:48,960 --> 00:18:53,120
for serializing in a in a

437
00:18:53,600 --> 00:18:59,918
there is there is a nurse serialization

438
00:18:56,640 --> 00:19:03,600
uh level but it needs to

439
00:18:59,919 --> 00:19:04,160
it needs to sterilize to the exact same

440
00:19:03,600 --> 00:19:07,600
version

441
00:19:04,160 --> 00:19:10,720
so you can't have uh because no

442
00:19:07,600 --> 00:19:12,559
no changes over time

443
00:19:10,720 --> 00:19:13,679
so you would have to either guarantee

444
00:19:12,559 --> 00:19:15,280
that the drivers are built from the

445
00:19:13,679 --> 00:19:19,280
exact same tree

446
00:19:15,280 --> 00:19:20,240
um i i think it would be possible to

447
00:19:19,280 --> 00:19:24,080
negotiate the

448
00:19:20,240 --> 00:19:27,280
like nara and the message version and

449
00:19:24,080 --> 00:19:28,960
try to avoid it in that case and yeah i

450
00:19:27,280 --> 00:19:32,399
think that would be interesting it would

451
00:19:28,960 --> 00:19:34,880
maybe save us some time i haven't seen

452
00:19:32,400 --> 00:19:35,520
any profiling data indicating that uh

453
00:19:34,880 --> 00:19:39,760
currently

454
00:19:35,520 --> 00:19:43,760
shady compilation is a problem but

455
00:19:39,760 --> 00:19:46,400
i'm guessing that might become a problem

456
00:19:43,760 --> 00:19:48,799
once we fix some of the other worst

457
00:19:46,400 --> 00:19:48,799
problems

458
00:19:49,600 --> 00:20:06,879
all right time is up so thank you all

459
00:19:51,840 --> 00:20:06,879
for all the questions

