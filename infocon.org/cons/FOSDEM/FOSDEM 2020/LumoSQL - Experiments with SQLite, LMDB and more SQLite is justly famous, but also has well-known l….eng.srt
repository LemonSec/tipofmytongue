1
00:00:05,279 --> 00:00:10,559
hi

2
00:00:06,960 --> 00:00:13,679
uh good evening our

3
00:00:10,559 --> 00:00:17,039
next speaker is dan shearer

4
00:00:13,679 --> 00:00:19,198
he is from scotland

5
00:00:17,039 --> 00:00:20,320
now he is going to introduce us to lumo

6
00:00:19,199 --> 00:00:24,640
sql

7
00:00:20,320 --> 00:00:30,080
it's a fork of popular database library

8
00:00:24,640 --> 00:00:33,360
sqlite let's welcome our speaker

9
00:00:30,080 --> 00:00:36,320
hello thank you

10
00:00:33,360 --> 00:00:37,280
so um yes i'm here talking about the

11
00:00:36,320 --> 00:00:40,879
loomer squirrel

12
00:00:37,280 --> 00:00:41,680
project a very new project it's not just

13
00:00:40,879 --> 00:00:43,919
me

14
00:00:41,680 --> 00:00:46,000
and yes i live in scotland keith maxwell

15
00:00:43,920 --> 00:00:48,800
who is not here tonight he lives in

16
00:00:46,000 --> 00:00:51,519
ireland and there's one or two other

17
00:00:48,800 --> 00:00:55,120
contributors here in this very room

18
00:00:51,520 --> 00:00:59,199
so thank you to all those contributors

19
00:00:55,120 --> 00:01:01,680
what i'm actually here for is the

20
00:00:59,199 --> 00:01:05,039
uni european union's next generation

21
00:01:01,680 --> 00:01:08,320
internet initiative which is very grand

22
00:01:05,040 --> 00:01:12,080
in fact what it says is reimagining and

23
00:01:08,320 --> 00:01:13,759
re-engineering the internet for the

24
00:01:12,080 --> 00:01:15,119
third millennium and beyond and i can't

25
00:01:13,760 --> 00:01:17,360
really help with that

26
00:01:15,119 --> 00:01:19,439
that's far too grand but what's a lot

27
00:01:17,360 --> 00:01:22,560
more interesting

28
00:01:19,439 --> 00:01:26,479
and a lot perhaps a lot more practical

29
00:01:22,560 --> 00:01:29,439
is that the eu's

30
00:01:26,479 --> 00:01:31,920
ngi initiative has gone and given

31
00:01:29,439 --> 00:01:34,320
funding to a variety of

32
00:01:31,920 --> 00:01:35,200
bodies around europe one of them being

33
00:01:34,320 --> 00:01:38,079
nlnet

34
00:01:35,200 --> 00:01:40,079
based in the netherlands and they put it

35
00:01:38,079 --> 00:01:43,439
this way that the internet is broken

36
00:01:40,079 --> 00:01:46,479
and we need to fix it in fact they say

37
00:01:43,439 --> 00:01:50,079
tell us how to fix the internet so

38
00:01:46,479 --> 00:01:53,439
with some friends we did and part of it

39
00:01:50,079 --> 00:01:54,960
is i think uh important part of it is

40
00:01:53,439 --> 00:01:58,320
about databases

41
00:01:54,960 --> 00:02:00,880
uh we decided to call it lumosql and so

42
00:01:58,320 --> 00:02:02,880
being in belgium of course we have milo

43
00:02:00,880 --> 00:02:04,479
one of the very few images on

44
00:02:02,880 --> 00:02:06,960
the internet that you are actually

45
00:02:04,479 --> 00:02:08,720
allowed to reuse

46
00:02:06,960 --> 00:02:10,478
mostly because it's in belgium but also

47
00:02:08,720 --> 00:02:13,840
because it hasn't changed in

48
00:02:10,479 --> 00:02:16,080
years which would be the nature of much

49
00:02:13,840 --> 00:02:19,520
of our broken internet today

50
00:02:16,080 --> 00:02:21,599
including databases um

51
00:02:19,520 --> 00:02:22,879
rows and columns and rdbms's being

52
00:02:21,599 --> 00:02:24,319
behind

53
00:02:22,879 --> 00:02:25,920
most things that are happening on the

54
00:02:24,319 --> 00:02:29,839
internet now

55
00:02:25,920 --> 00:02:32,958
even now with fancy new column stores

56
00:02:29,840 --> 00:02:35,440
and so what do we have in our famously

57
00:02:32,959 --> 00:02:37,440
broken internet please interrupt me if

58
00:02:35,440 --> 00:02:41,760
you think it's not broken

59
00:02:37,440 --> 00:02:45,040
um we have the main

60
00:02:41,760 --> 00:02:46,959
the main aspects are applications which

61
00:02:45,040 --> 00:02:48,640
are very centralized

62
00:02:46,959 --> 00:02:52,319
which don't cope very well with scaling

63
00:02:48,640 --> 00:02:52,319
which are very expensive to scale

64
00:02:52,720 --> 00:02:57,519
we have the networking as well as the

65
00:02:55,840 --> 00:03:00,560
apps which is

66
00:02:57,519 --> 00:03:01,680
centralized and therefore broken

67
00:03:00,560 --> 00:03:03,840
because as soon as we have

68
00:03:01,680 --> 00:03:04,319
centralization then we have security

69
00:03:03,840 --> 00:03:06,319
issues

70
00:03:04,319 --> 00:03:08,480
i'm assuming most people in the room

71
00:03:06,319 --> 00:03:10,319
would be familiar with that

72
00:03:08,480 --> 00:03:12,079
and then we have devices which are a

73
00:03:10,319 --> 00:03:15,040
very large part of the internet now the

74
00:03:12,080 --> 00:03:16,640
things in the internet of things

75
00:03:15,040 --> 00:03:18,239
and they clearly work because everybody

76
00:03:16,640 --> 00:03:20,799
loves them and they clearly

77
00:03:18,239 --> 00:03:21,440
don't work because they're insecure and

78
00:03:20,800 --> 00:03:24,959
they

79
00:03:21,440 --> 00:03:27,120
they break and they're unreliable and

80
00:03:24,959 --> 00:03:29,120
they there are various other things and

81
00:03:27,120 --> 00:03:32,400
so the internet needs

82
00:03:29,120 --> 00:03:36,000
fixed thank you in our let they decided

83
00:03:32,400 --> 00:03:36,000
to support lumosql

84
00:03:36,159 --> 00:03:40,079
and so is there something about

85
00:03:39,040 --> 00:03:41,760
databases

86
00:03:40,080 --> 00:03:43,920
as used on the internet that is

87
00:03:41,760 --> 00:03:46,798
particularly broken

88
00:03:43,920 --> 00:03:47,920
so what do we have in the most popular

89
00:03:46,799 --> 00:03:51,599
databases

90
00:03:47,920 --> 00:03:53,599
rdbms's we have the famous names the

91
00:03:51,599 --> 00:03:56,959
postgres the marietti b

92
00:03:53,599 --> 00:03:59,439
um closed source ones oracle and so on

93
00:03:56,959 --> 00:04:01,360
but probably the most deployed would be

94
00:03:59,439 --> 00:04:04,560
sqlite

95
00:04:01,360 --> 00:04:06,560
and managed not to have my phone on me

96
00:04:04,560 --> 00:04:07,280
but i could right here be waving my

97
00:04:06,560 --> 00:04:09,439
phone

98
00:04:07,280 --> 00:04:11,760
which has android on it and therefore

99
00:04:09,439 --> 00:04:13,200
has sql light on it several copies of it

100
00:04:11,760 --> 00:04:15,920
almost certainly

101
00:04:13,200 --> 00:04:16,959
ios the same thing anyone who uses

102
00:04:15,920 --> 00:04:19,680
mozilla

103
00:04:16,959 --> 00:04:20,880
is has got at least one copy of sql lite

104
00:04:19,680 --> 00:04:24,160
it's an embedded

105
00:04:20,880 --> 00:04:27,840
database that gives you a an

106
00:04:24,160 --> 00:04:30,639
sql type interface embedded meaning it

107
00:04:27,840 --> 00:04:33,758
doesn't do networking

108
00:04:30,639 --> 00:04:37,440
so what we're looking for in

109
00:04:33,759 --> 00:04:41,919
so i claim in next generation

110
00:04:37,440 --> 00:04:45,520
internet databases is these things

111
00:04:41,919 --> 00:04:47,359
and sqlite people love it

112
00:04:45,520 --> 00:04:48,799
good reason to love it it's been around

113
00:04:47,360 --> 00:04:51,919
for a long time

114
00:04:48,800 --> 00:04:55,199
91 if i remember rightly

115
00:04:51,919 --> 00:04:58,479
and it does what it says on the 10.

116
00:04:55,199 --> 00:04:59,280
it's small compared to many of the other

117
00:04:58,479 --> 00:05:03,199
databases

118
00:04:59,280 --> 00:05:05,758
it's moderately reliable except that

119
00:05:03,199 --> 00:05:07,039
any database developer who uses sqlite

120
00:05:05,759 --> 00:05:10,080
that i've ever met

121
00:05:07,039 --> 00:05:11,039
has many stories about corruption i've

122
00:05:10,080 --> 00:05:15,039
done

123
00:05:11,039 --> 00:05:18,159
various informal tests lots and lots of

124
00:05:15,039 --> 00:05:21,360
people report sequel like corruptions

125
00:05:18,160 --> 00:05:24,479
but the good outweighs the bad

126
00:05:21,360 --> 00:05:25,840
and privacy of course sqlite doesn't do

127
00:05:24,479 --> 00:05:29,680
encryption

128
00:05:25,840 --> 00:05:31,520
more on that later and and so

129
00:05:29,680 --> 00:05:33,759
it's not really a good fit for where we

130
00:05:31,520 --> 00:05:35,758
are at in the 21st century with very

131
00:05:33,759 --> 00:05:37,600
high performance devices

132
00:05:35,759 --> 00:05:38,880
uh they have a lot of concurrency on

133
00:05:37,600 --> 00:05:40,800
them

134
00:05:38,880 --> 00:05:42,960
where corruption is increasingly a

135
00:05:40,800 --> 00:05:45,280
problem

136
00:05:42,960 --> 00:05:47,198
some electric cars are basically android

137
00:05:45,280 --> 00:05:49,919
on wheels

138
00:05:47,199 --> 00:05:51,360
and where privacy is increasingly

139
00:05:49,919 --> 00:05:54,080
mandated

140
00:05:51,360 --> 00:05:56,080
i stand right here in the european union

141
00:05:54,080 --> 00:06:01,680
unlike when i go back home

142
00:05:56,080 --> 00:06:04,080
and so it was quite interesting in 2013

143
00:06:01,680 --> 00:06:06,960
a well-known developer called howard chu

144
00:06:04,080 --> 00:06:07,680
made a posting was noticed around the

145
00:06:06,960 --> 00:06:10,960
world

146
00:06:07,680 --> 00:06:14,400
where he said he had taken sql light and

147
00:06:10,960 --> 00:06:18,080
put a new key value store underneath

148
00:06:14,400 --> 00:06:21,840
so the key value store is

149
00:06:18,080 --> 00:06:25,440
the very simple database compared to

150
00:06:21,840 --> 00:06:29,280
sql where um

151
00:06:25,440 --> 00:06:31,039
you have a list of of items um

152
00:06:29,280 --> 00:06:33,280
one two three four five six seven and

153
00:06:31,039 --> 00:06:34,960
then values against that so number one

154
00:06:33,280 --> 00:06:37,919
might be table

155
00:06:34,960 --> 00:06:39,198
or chair and that's all it does and this

156
00:06:37,919 --> 00:06:40,960
is the

157
00:06:39,199 --> 00:06:42,720
key value store is at the bottom of just

158
00:06:40,960 --> 00:06:46,799
about every database

159
00:06:42,720 --> 00:06:47,759
what he said was i'm the author of lmdb

160
00:06:46,800 --> 00:06:50,000
one of the

161
00:06:47,759 --> 00:06:51,199
faster and more reliable key value

162
00:06:50,000 --> 00:06:53,680
stores around the place

163
00:06:51,199 --> 00:06:55,520
and i have replaced sqlite's key value

164
00:06:53,680 --> 00:06:58,400
store and so he posted some

165
00:06:55,520 --> 00:06:59,520
figures that that looked very impressive

166
00:06:58,400 --> 00:07:02,400
he's a very

167
00:06:59,520 --> 00:07:03,599
experienced database developer and so

168
00:07:02,400 --> 00:07:08,960
lots of people said

169
00:07:03,599 --> 00:07:11,360
oh wow and for a variety of reasons

170
00:07:08,960 --> 00:07:13,280
it stayed at oh wow and where is that

171
00:07:11,360 --> 00:07:17,280
thing

172
00:07:13,280 --> 00:07:21,280
until about a month and a half ago

173
00:07:17,280 --> 00:07:23,840
and so at that point and the lumosql

174
00:07:21,280 --> 00:07:25,280
project started and said let's do some

175
00:07:23,840 --> 00:07:29,198
code archaeology

176
00:07:25,280 --> 00:07:29,198
and so we had some components to that

177
00:07:29,520 --> 00:07:35,440
mr d richard hipps well known

178
00:07:32,560 --> 00:07:37,840
again since 1991 he released under the

179
00:07:35,440 --> 00:07:39,759
gpo the first versions of sqlite it's no

180
00:07:37,840 --> 00:07:42,719
longer under the gpl

181
00:07:39,759 --> 00:07:44,879
but that is its origins these are

182
00:07:42,720 --> 00:07:46,879
database developers with decades and

183
00:07:44,879 --> 00:07:48,560
decades of experience

184
00:07:46,879 --> 00:07:52,240
i don't know very much about databases

185
00:07:48,560 --> 00:07:55,360
at all but still someone had to do this

186
00:07:52,240 --> 00:07:59,360
uh howard very well known again

187
00:07:55,360 --> 00:08:02,000
developed lmdb and this is

188
00:07:59,360 --> 00:08:03,840
a key value store that is remarkably

189
00:08:02,000 --> 00:08:07,440
small and still behaves

190
00:08:03,840 --> 00:08:09,840
quite like a database in terms of its

191
00:08:07,440 --> 00:08:11,120
guarantees of consistency and

192
00:08:09,840 --> 00:08:14,400
concurrency and

193
00:08:11,120 --> 00:08:16,960
multiple threads accessing at once

194
00:08:14,400 --> 00:08:18,318
it's got quite a small footprint

195
00:08:16,960 --> 00:08:20,400
certainly smaller

196
00:08:18,319 --> 00:08:21,440
than the key value store under native

197
00:08:20,400 --> 00:08:25,359
sqlite

198
00:08:21,440 --> 00:08:26,560
even today so he mashed these together

199
00:08:25,360 --> 00:08:28,720
he called a thing called sequel

200
00:08:26,560 --> 00:08:30,080
lightning it was just a prototype he

201
00:08:28,720 --> 00:08:33,360
knew it was a prototype

202
00:08:30,080 --> 00:08:35,598
in fact even the name was already taken

203
00:08:33,360 --> 00:08:37,120
but that's great he he thought a thing

204
00:08:35,599 --> 00:08:41,039
needed done

205
00:08:37,120 --> 00:08:44,640
he had a go and all the world benefited

206
00:08:41,039 --> 00:08:47,600
just a bit later like two months ago

207
00:08:44,640 --> 00:08:48,959
uh and so keith and myself and one or

208
00:08:47,600 --> 00:08:52,160
two others

209
00:08:48,959 --> 00:08:52,880
um who may wish to identify themselves

210
00:08:52,160 --> 00:08:55,920
later on

211
00:08:52,880 --> 00:08:59,360
in this talk got together and created

212
00:08:55,920 --> 00:09:02,240
lumosql not a good idea

213
00:08:59,360 --> 00:09:03,360
to fix something that isn't broken and

214
00:09:02,240 --> 00:09:07,040
so

215
00:09:03,360 --> 00:09:09,279
in general we've uh we can imagine that

216
00:09:07,040 --> 00:09:10,880
in databases are broken on the internet

217
00:09:09,279 --> 00:09:14,320
because the internet's broken

218
00:09:10,880 --> 00:09:17,120
but there are specific things that

219
00:09:14,320 --> 00:09:19,120
sqlite doesn't address and that really

220
00:09:17,120 --> 00:09:23,600
matter to a lot of people

221
00:09:19,120 --> 00:09:26,080
given that there is perhaps

222
00:09:23,600 --> 00:09:28,560
depending how one counts uh two or three

223
00:09:26,080 --> 00:09:29,200
billion people using sqlite right now

224
00:09:28,560 --> 00:09:34,399
today

225
00:09:29,200 --> 00:09:34,399
around the world that is

226
00:09:35,200 --> 00:09:39,600
a matter of some import if it's not

227
00:09:37,680 --> 00:09:43,680
really delivering on what these people

228
00:09:39,600 --> 00:09:47,440
need and so you can go to sqlite.org

229
00:09:43,680 --> 00:09:48,399
and you can see what their supported use

230
00:09:47,440 --> 00:09:50,800
cases are

231
00:09:48,399 --> 00:09:52,000
and they make some exceptions they say

232
00:09:50,800 --> 00:09:54,880
very clearly

233
00:09:52,000 --> 00:09:57,760
we don't do high concurrency because you

234
00:09:54,880 --> 00:10:02,240
might get corruptions

235
00:09:57,760 --> 00:10:04,079
and it says very clearly that

236
00:10:02,240 --> 00:10:05,680
there are various other use cases that

237
00:10:04,079 --> 00:10:08,800
will result

238
00:10:05,680 --> 00:10:10,640
in corrupted databases most of which are

239
00:10:08,800 --> 00:10:12,479
quite common these days

240
00:10:10,640 --> 00:10:13,839
a mobile phone is a very powerful

241
00:10:12,480 --> 00:10:17,200
computer

242
00:10:13,839 --> 00:10:21,360
compared to not very long ago and yet

243
00:10:17,200 --> 00:10:21,360
light with its crashy corrupt ways

244
00:10:21,440 --> 00:10:25,360
doesn't quite say what i meant it to say

245
00:10:23,920 --> 00:10:28,399
but you understand

246
00:10:25,360 --> 00:10:30,640
uh is deployed at scale

247
00:10:28,399 --> 00:10:31,440
and so these are the things that are

248
00:10:30,640 --> 00:10:33,920
broken

249
00:10:31,440 --> 00:10:35,200
encryption is an issue because we're

250
00:10:33,920 --> 00:10:37,120
standing here in the european union

251
00:10:35,200 --> 00:10:37,920
which mandates that personal data shall

252
00:10:37,120 --> 00:10:41,440
be encrypted

253
00:10:37,920 --> 00:10:42,319
at some point soon we expect a new

254
00:10:41,440 --> 00:10:46,160
regulation

255
00:10:42,320 --> 00:10:48,480
to arrive called e-privacy

256
00:10:46,160 --> 00:10:50,719
and that will require end-to-end

257
00:10:48,480 --> 00:10:51,600
encryption including on the terminal

258
00:10:50,720 --> 00:10:55,120
device

259
00:10:51,600 --> 00:10:58,240
or mobile phone um sql lite

260
00:10:55,120 --> 00:11:00,320
doesn't support encryption in its open

261
00:10:58,240 --> 00:11:03,360
source form

262
00:11:00,320 --> 00:11:05,519
you go and pay the people at sqlite.org

263
00:11:03,360 --> 00:11:08,560
and they will give you a closed source

264
00:11:05,519 --> 00:11:10,160
encryption plugin and so

265
00:11:08,560 --> 00:11:13,040
there are other ways around that but

266
00:11:10,160 --> 00:11:17,120
still that's that's not ideal

267
00:11:13,040 --> 00:11:19,519
um sqlite is famous for having a really

268
00:11:17,120 --> 00:11:21,120
quite comprehensive test suite and that

269
00:11:19,519 --> 00:11:24,640
is true

270
00:11:21,120 --> 00:11:25,600
it tests the code it doesn't necessarily

271
00:11:24,640 --> 00:11:29,120
test

272
00:11:25,600 --> 00:11:31,519
um use cases that are

273
00:11:29,120 --> 00:11:33,279
relevant to the users and there's quite

274
00:11:31,519 --> 00:11:36,320
a difference there

275
00:11:33,279 --> 00:11:38,079
and so it'll do things like 25 000

276
00:11:36,320 --> 00:11:39,440
inserts and see how long that takes and

277
00:11:38,079 --> 00:11:43,120
that's great

278
00:11:39,440 --> 00:11:44,079
um but it won't necessarily do 25 000

279
00:11:43,120 --> 00:11:47,440
inserts

280
00:11:44,079 --> 00:11:50,959
from three different writers at once um

281
00:11:47,440 --> 00:11:53,440
and and so on and so there's a lot of

282
00:11:50,959 --> 00:11:54,800
work to be done to take the sequel light

283
00:11:53,440 --> 00:11:58,000
that we have today

284
00:11:54,800 --> 00:12:01,519
used at scale and loved and make it more

285
00:11:58,000 --> 00:12:04,320
relevant to the 21st century

286
00:12:01,519 --> 00:12:06,240
so we've had some fun and we've done

287
00:12:04,320 --> 00:12:07,920
some things and there is an absolutely

288
00:12:06,240 --> 00:12:11,839
really really cool announcement

289
00:12:07,920 --> 00:12:11,839
type thing to make

290
00:12:12,959 --> 00:12:16,239
we did some code archaeology it wasn't

291
00:12:14,880 --> 00:12:20,480
easy to find

292
00:12:16,240 --> 00:12:23,519
what the antecedents of of lumosql

293
00:12:20,480 --> 00:12:24,000
are that's that's the boring bit but it

294
00:12:23,519 --> 00:12:26,560
did take a

295
00:12:24,000 --> 00:12:28,800
lot of time and effort uh we've written

296
00:12:26,560 --> 00:12:29,920
a benchmarking tool so that we have some

297
00:12:28,800 --> 00:12:31,920
idea

298
00:12:29,920 --> 00:12:32,959
of whether we're actually improving

299
00:12:31,920 --> 00:12:35,839
things or not

300
00:12:32,959 --> 00:12:38,479
or how bad they were in the first place

301
00:12:35,839 --> 00:12:39,600
benchmarking is not as easy as it may

302
00:12:38,480 --> 00:12:41,120
seem

303
00:12:39,600 --> 00:12:44,399
as i have been learning working with

304
00:12:41,120 --> 00:12:44,399
keith who just loves it

305
00:12:44,480 --> 00:12:48,880
and we fix some bugs and we'll talk

306
00:12:47,279 --> 00:12:50,560
about that again in a minute but

307
00:12:48,880 --> 00:12:53,360
but there are a couple of blocking

308
00:12:50,560 --> 00:12:56,800
bloods that made it impossible to see

309
00:12:53,360 --> 00:12:58,959
actually how good the the idea of sql

310
00:12:56,800 --> 00:13:02,639
lightning was in the first place

311
00:12:58,959 --> 00:13:02,638
and we've got some features

312
00:13:03,120 --> 00:13:11,519
this is sqlite by and large

313
00:13:07,200 --> 00:13:14,000
um if it's on this side

314
00:13:11,519 --> 00:13:14,560
then people who are sqlite users here

315
00:13:14,000 --> 00:13:16,959
will be

316
00:13:14,560 --> 00:13:18,079
used to the sqlite three underscore

317
00:13:16,959 --> 00:13:22,000
prepare

318
00:13:18,079 --> 00:13:24,079
api call those are the bits

319
00:13:22,000 --> 00:13:25,360
that are serviced by that service

320
00:13:24,079 --> 00:13:28,719
prepare

321
00:13:25,360 --> 00:13:32,720
and then this is the sqlite

322
00:13:28,720 --> 00:13:36,079
underscore sqlite 3 underscore

323
00:13:32,720 --> 00:13:39,600
execute or um

324
00:13:36,079 --> 00:13:43,359
or step api calls

325
00:13:39,600 --> 00:13:45,279
and so b3.c

326
00:13:43,360 --> 00:13:46,720
implements the b tree under which we

327
00:13:45,279 --> 00:13:48,639
have a pager

328
00:13:46,720 --> 00:13:50,000
under which we have some operating

329
00:13:48,639 --> 00:13:54,399
system specifics

330
00:13:50,000 --> 00:13:57,680
but the pager is the thing that um

331
00:13:54,399 --> 00:14:00,079
the b tree says i need to store a page

332
00:13:57,680 --> 00:14:01,599
and the pager decides where it should go

333
00:14:00,079 --> 00:14:02,638
and whether it should be journaled that

334
00:14:01,600 --> 00:14:06,560
is the way

335
00:14:02,639 --> 00:14:06,560
that sqlite works at the moment

336
00:14:06,959 --> 00:14:11,839
very crucially the pager handles right

337
00:14:09,680 --> 00:14:15,040
ahead logs

338
00:14:11,839 --> 00:14:16,000
and so again those who are familiar with

339
00:14:15,040 --> 00:14:19,199
programming in sql

340
00:14:16,000 --> 00:14:19,920
lite uh those are the two bits we care

341
00:14:19,199 --> 00:14:22,959
about

342
00:14:19,920 --> 00:14:24,719
um these are the two bits the one bit

343
00:14:22,959 --> 00:14:26,479
sqlite three step

344
00:14:24,720 --> 00:14:27,680
is where you're going to see the

345
00:14:26,480 --> 00:14:31,839
differences in what we've done with

346
00:14:27,680 --> 00:14:31,839
lumosql so far

347
00:14:32,399 --> 00:14:37,120
i'm going to come back to some of the

348
00:14:34,079 --> 00:14:41,199
details of what's being done

349
00:14:37,120 --> 00:14:42,240
i just want to cover a very important

350
00:14:41,199 --> 00:14:46,479
thing

351
00:14:42,240 --> 00:14:49,519
right ahead logs so the pager

352
00:14:46,480 --> 00:14:52,560
gets to do the concurrency bit

353
00:14:49,519 --> 00:14:55,040
and the security bit uh

354
00:14:52,560 --> 00:14:56,239
sorry i should say the integrity bit for

355
00:14:55,040 --> 00:14:58,240
sql lite

356
00:14:56,240 --> 00:15:00,399
so the idea is that there is a

357
00:14:58,240 --> 00:15:02,000
transaction the transaction doesn't

358
00:15:00,399 --> 00:15:04,240
complete straight away because there's

359
00:15:02,000 --> 00:15:06,959
many things going on

360
00:15:04,240 --> 00:15:09,040
and so we write out the interim state to

361
00:15:06,959 --> 00:15:09,760
a little file called a write ahead log

362
00:15:09,040 --> 00:15:12,240
file

363
00:15:09,760 --> 00:15:14,880
if you're familiar with postgres you can

364
00:15:12,240 --> 00:15:19,240
see a whole lot of files called wal

365
00:15:14,880 --> 00:15:23,360
files in fact this is a tried and true

366
00:15:19,240 --> 00:15:26,880
1990s database technique

367
00:15:23,360 --> 00:15:30,399
and every single major database used on

368
00:15:26,880 --> 00:15:32,320
the internet today uses right ahead logs

369
00:15:30,399 --> 00:15:33,920
now there are two features of modern

370
00:15:32,320 --> 00:15:35,199
operating systems that mean that's

371
00:15:33,920 --> 00:15:38,639
probably not necessary

372
00:15:35,199 --> 00:15:40,639
anymore and actually not as good as we

373
00:15:38,639 --> 00:15:42,320
can do

374
00:15:40,639 --> 00:15:44,880
and those features are journaling file

375
00:15:42,320 --> 00:15:46,720
systems which if you look at it

376
00:15:44,880 --> 00:15:48,480
is like a special case of right ahead

377
00:15:46,720 --> 00:15:51,839
logs so

378
00:15:48,480 --> 00:15:54,160
if you're running this on say x4

379
00:15:51,839 --> 00:15:55,519
then sqlite does its right ahead logging

380
00:15:54,160 --> 00:15:57,040
or postgres or mariadb

381
00:15:55,519 --> 00:15:58,560
does all its right ahead logging and

382
00:15:57,040 --> 00:16:00,160
then underneath the file system just

383
00:15:58,560 --> 00:16:01,680
does the same thing all over again

384
00:16:00,160 --> 00:16:05,199
that doesn't sound very efficient does

385
00:16:01,680 --> 00:16:07,199
it and then the other thing

386
00:16:05,199 --> 00:16:08,880
is that we have a virtual memory system

387
00:16:07,199 --> 00:16:11,199
that's really very good

388
00:16:08,880 --> 00:16:12,320
a lot of time has been put into modern

389
00:16:11,199 --> 00:16:14,880
operating systems

390
00:16:12,320 --> 00:16:16,639
virtual memory systems especially linux

391
00:16:14,880 --> 00:16:17,040
but there are others we do acknowledge

392
00:16:16,639 --> 00:16:20,800
the

393
00:16:17,040 --> 00:16:20,800
the lesser people in the universe

394
00:16:20,839 --> 00:16:28,160
and this is where we get the idea

395
00:16:24,320 --> 00:16:32,560
of memory mapping an entire database

396
00:16:28,160 --> 00:16:34,719
or a

397
00:16:32,560 --> 00:16:36,079
level zero store zero level store i'm

398
00:16:34,720 --> 00:16:37,759
not sure what the technique is i've just

399
00:16:36,079 --> 00:16:40,479
forgotten

400
00:16:37,759 --> 00:16:42,480
where basically we allow the operating

401
00:16:40,480 --> 00:16:43,040
system to worry about all the details of

402
00:16:42,480 --> 00:16:46,079
whether a

403
00:16:43,040 --> 00:16:48,880
page is on disk or in memory

404
00:16:46,079 --> 00:16:49,279
and to keep it as safe as we possibly

405
00:16:48,880 --> 00:16:52,560
can

406
00:16:49,279 --> 00:16:52,560
there is a command called

407
00:16:52,959 --> 00:16:59,920
memflush no it's not

408
00:16:56,320 --> 00:17:03,040
um memsync thank you

409
00:16:59,920 --> 00:17:06,240
and memsync will

410
00:17:03,040 --> 00:17:09,438
as often as you wish to have safety

411
00:17:06,240 --> 00:17:11,839
uh keep the memph image

412
00:17:09,439 --> 00:17:13,679
up today on desk so with these two

413
00:17:11,839 --> 00:17:14,799
advances in operating systems that

414
00:17:13,679 --> 00:17:18,240
really are the core

415
00:17:14,799 --> 00:17:20,240
of what makes a robust operating system

416
00:17:18,240 --> 00:17:22,000
we don't really need right ahead logs

417
00:17:20,240 --> 00:17:23,599
anymore and but that's a lot of

418
00:17:22,000 --> 00:17:25,439
technical debt

419
00:17:23,599 --> 00:17:26,639
postgres has two and a half million

420
00:17:25,439 --> 00:17:29,919
lines of code i think

421
00:17:26,640 --> 00:17:33,200
murray db i think has more

422
00:17:29,919 --> 00:17:35,120
sql lite bless blessed only has 350 000

423
00:17:33,200 --> 00:17:36,080
lines of code and it's still doing right

424
00:17:35,120 --> 00:17:37,760
ahead logs

425
00:17:36,080 --> 00:17:40,000
wouldn't it be great if we could

426
00:17:37,760 --> 00:17:42,559
eliminate right ahead logs

427
00:17:40,000 --> 00:17:43,280
which we have and the way we've done

428
00:17:42,559 --> 00:17:46,320
that

429
00:17:43,280 --> 00:17:50,080
is by making sure that lmdb

430
00:17:46,320 --> 00:17:54,879
works underneath sqlite correctly

431
00:17:50,080 --> 00:17:58,000
which it now does as a very recent date

432
00:17:54,880 --> 00:17:59,039
lmdb doesn't use right ahead logs that's

433
00:17:58,000 --> 00:18:01,120
one of its

434
00:17:59,039 --> 00:18:03,919
very strong features the coolest thing

435
00:18:01,120 --> 00:18:06,320
is it maps everything

436
00:18:03,919 --> 00:18:07,360
it's as safe as it can possibly be using

437
00:18:06,320 --> 00:18:10,000
just one

438
00:18:07,360 --> 00:18:11,199
file it doesn't have to have consistency

439
00:18:10,000 --> 00:18:14,960
with some journal

440
00:18:11,200 --> 00:18:18,320
you have to replay after a crash

441
00:18:14,960 --> 00:18:19,600
this is amazing and so once we fixed a

442
00:18:18,320 --> 00:18:22,480
few bugs in

443
00:18:19,600 --> 00:18:23,840
in lumosql all of a sudden we got this

444
00:18:22,480 --> 00:18:26,840
benefit for free

445
00:18:23,840 --> 00:18:28,320
because lmdb is sitting at the b tree

446
00:18:26,840 --> 00:18:30,080
level

447
00:18:28,320 --> 00:18:32,559
completely replacing your pager and some

448
00:18:30,080 --> 00:18:36,879
of the operating system specific things

449
00:18:32,559 --> 00:18:39,600
and we now have the world's first

450
00:18:36,880 --> 00:18:41,520
database api i have to put it that way

451
00:18:39,600 --> 00:18:43,120
used at scale which does not have a

452
00:18:41,520 --> 00:18:44,400
right ahead log that's absolutely

453
00:18:43,120 --> 00:18:47,840
amazing

454
00:18:44,400 --> 00:18:49,520
i like it i'm quite enthusiastic about

455
00:18:47,840 --> 00:18:53,120
it

456
00:18:49,520 --> 00:18:55,918
so we have some other things

457
00:18:53,120 --> 00:18:56,239
with lumosql where we are what we've

458
00:18:55,919 --> 00:18:58,240
done

459
00:18:56,240 --> 00:19:00,240
what we'd like to do it's a really baby

460
00:18:58,240 --> 00:19:02,720
project that's the first thing i mean

461
00:19:00,240 --> 00:19:06,000
we're talking like two months old

462
00:19:02,720 --> 00:19:07,840
and el net has made this possible

463
00:19:06,000 --> 00:19:09,600
uh we're starting to get a good idea of

464
00:19:07,840 --> 00:19:11,840
where it's going next

465
00:19:09,600 --> 00:19:15,280
we need to talk to nlnet about about

466
00:19:11,840 --> 00:19:15,280
just where it goes and how fast

467
00:19:15,520 --> 00:19:19,840
there's some very very important and i

468
00:19:17,760 --> 00:19:22,080
think cool new features to come but just

469
00:19:19,840 --> 00:19:26,480
before we go on to that

470
00:19:22,080 --> 00:19:28,399
are there any comments from some of the

471
00:19:26,480 --> 00:19:29,760
expert database users and implementers

472
00:19:28,400 --> 00:19:32,400
in the audience of which i know there's

473
00:19:29,760 --> 00:19:32,400
at least four

474
00:19:32,880 --> 00:19:39,440
okay very very conscious

475
00:19:37,039 --> 00:19:41,039
that the amount of database expertise

476
00:19:39,440 --> 00:19:42,160
and all the millions of lines of code

477
00:19:41,039 --> 00:19:45,039
that i have referred to

478
00:19:42,160 --> 00:19:46,320
is is huge there are people who have

479
00:19:45,039 --> 00:19:47,760
been

480
00:19:46,320 --> 00:19:50,320
who spent their entire professional

481
00:19:47,760 --> 00:19:51,280
lives making a reliable row and column

482
00:19:50,320 --> 00:19:54,879
stores

483
00:19:51,280 --> 00:19:54,879
that the internet runs on today

484
00:19:55,039 --> 00:19:59,200
and i guess what do you say on the

485
00:19:56,880 --> 00:20:02,720
shoulders of giants we stand

486
00:19:59,200 --> 00:20:04,240
so one of the things the very important

487
00:20:02,720 --> 00:20:06,320
things that we are really required to

488
00:20:04,240 --> 00:20:10,320
have in our database these days is

489
00:20:06,320 --> 00:20:14,000
reliability and detecting

490
00:20:10,320 --> 00:20:18,639
whether what we wrote consistency

491
00:20:14,000 --> 00:20:18,640
so the acid things right atomicity

492
00:20:18,840 --> 00:20:25,280
consistency integrity

493
00:20:22,640 --> 00:20:27,600
these the the middle two are integrity

494
00:20:25,280 --> 00:20:29,120
and consistency

495
00:20:27,600 --> 00:20:32,080
what we have with all of the major

496
00:20:29,120 --> 00:20:34,959
databases and including sqlite

497
00:20:32,080 --> 00:20:35,840
is that external processes have been

498
00:20:34,960 --> 00:20:37,919
designed to go

499
00:20:35,840 --> 00:20:40,080
around and check as to whether what's on

500
00:20:37,919 --> 00:20:43,039
the database or what's on the desk

501
00:20:40,080 --> 00:20:45,520
looks consistent does it look like it

502
00:20:43,039 --> 00:20:47,440
hasn't been corrupted

503
00:20:45,520 --> 00:20:49,039
if you look at a running oracle database

504
00:20:47,440 --> 00:20:50,640
you can see there are these processors

505
00:20:49,039 --> 00:20:52,080
that are frantically going through the

506
00:20:50,640 --> 00:20:55,200
database

507
00:20:52,080 --> 00:20:56,320
and trying to to do its um integrity

508
00:20:55,200 --> 00:20:58,080
checking

509
00:20:56,320 --> 00:21:01,200
completely separate from whatever the

510
00:20:58,080 --> 00:21:03,120
applications might be trying to do

511
00:21:01,200 --> 00:21:05,200
that that's quite an interesting thought

512
00:21:03,120 --> 00:21:06,879
you've got concurrent access by

513
00:21:05,200 --> 00:21:08,159
an integrity checker looking over the

514
00:21:06,880 --> 00:21:09,679
shoulder of the thing that's supposed to

515
00:21:08,159 --> 00:21:12,080
be writing reliably

516
00:21:09,679 --> 00:21:14,559
so basically what that says is that we

517
00:21:12,080 --> 00:21:17,600
don't have any good way now

518
00:21:14,559 --> 00:21:21,120
of getting a mainstream column

519
00:21:17,600 --> 00:21:24,158
and row database and

520
00:21:21,120 --> 00:21:25,760
knowing pretty sure that what i just

521
00:21:24,159 --> 00:21:28,640
read from disc now

522
00:21:25,760 --> 00:21:31,039
is what was written last week and that

523
00:21:28,640 --> 00:21:32,240
doesn't seem like a big ask for the 21st

524
00:21:31,039 --> 00:21:35,440
century

525
00:21:32,240 --> 00:21:38,640
but it does seem to be a problem

526
00:21:35,440 --> 00:21:40,080
and so we have an idea um we know how

527
00:21:38,640 --> 00:21:41,440
we're going to implement this idea we

528
00:21:40,080 --> 00:21:44,480
hope it's going to work

529
00:21:41,440 --> 00:21:46,559
it sounds easy enough although we've

530
00:21:44,480 --> 00:21:47,520
already discovered some hairy use cases

531
00:21:46,559 --> 00:21:49,840
corner cases

532
00:21:47,520 --> 00:21:52,000
and the idea is this what if each row

533
00:21:49,840 --> 00:21:54,639
had a checksum

534
00:21:52,000 --> 00:21:55,200
how about that so every time we update a

535
00:21:54,640 --> 00:21:56,880
row

536
00:21:55,200 --> 00:22:00,559
we keep a little check sum on the far

537
00:21:56,880 --> 00:22:02,480
end and then when we read it in off disk

538
00:22:00,559 --> 00:22:04,320
we had a pretty good idea whether what

539
00:22:02,480 --> 00:22:07,360
we read just five minutes ago was what

540
00:22:04,320 --> 00:22:07,360
was written last week

541
00:22:07,679 --> 00:22:12,480
i haven't found any major database that

542
00:22:10,480 --> 00:22:15,120
does this i don't know why

543
00:22:12,480 --> 00:22:16,640
but if i'm required to have consistency

544
00:22:15,120 --> 00:22:19,520
it seems like a good way of doing it

545
00:22:16,640 --> 00:22:22,480
anyway that's what we're implementing

546
00:22:19,520 --> 00:22:25,120
i'll let you know if it works so that's

547
00:22:22,480 --> 00:22:25,120
quite exciting

548
00:22:25,360 --> 00:22:27,840
so

549
00:22:29,280 --> 00:22:33,918
what we have to do is make a first

550
00:22:32,000 --> 00:22:36,080
release

551
00:22:33,919 --> 00:22:37,840
we have to have a way of having multiple

552
00:22:36,080 --> 00:22:39,439
back ends

553
00:22:37,840 --> 00:22:42,080
and i'll be going back and talking about

554
00:22:39,440 --> 00:22:45,360
those multiple back ends in a minute

555
00:22:42,080 --> 00:22:48,639
and we are going to implement

556
00:22:45,360 --> 00:22:50,399
no right ahead logs um and be sure that

557
00:22:48,640 --> 00:22:52,240
that is right

558
00:22:50,400 --> 00:22:54,400
because you don't do this lightly and

559
00:22:52,240 --> 00:22:57,280
we're going to implement um

560
00:22:54,400 --> 00:23:00,720
per row check summing that's what's in

561
00:22:57,280 --> 00:23:00,720
the very short term roadmap

562
00:23:00,960 --> 00:23:06,240
the back ends back in muxer means

563
00:23:04,400 --> 00:23:08,320
we've got multiple back ends and we can

564
00:23:06,240 --> 00:23:09,679
use one or all of them at once

565
00:23:08,320 --> 00:23:11,360
now at the moment we used to have two

566
00:23:09,679 --> 00:23:12,799
back ends and we can't really switch

567
00:23:11,360 --> 00:23:15,520
between them we have the

568
00:23:12,799 --> 00:23:17,440
classic sql light back end uh with the

569
00:23:15,520 --> 00:23:19,600
b3 code which is

570
00:23:17,440 --> 00:23:20,480
well used and at least if it doesn't

571
00:23:19,600 --> 00:23:23,439
work sometimes

572
00:23:20,480 --> 00:23:25,200
we kind of know how it doesn't work we

573
00:23:23,440 --> 00:23:27,919
have the lmdb back end

574
00:23:25,200 --> 00:23:30,000
which has really only been passing all

575
00:23:27,919 --> 00:23:33,360
of the sqlite tests

576
00:23:30,000 --> 00:23:34,880
for um a very short time now so i'm not

577
00:23:33,360 --> 00:23:38,719
going to say that's production ready

578
00:23:34,880 --> 00:23:43,120
but already we have um

579
00:23:38,720 --> 00:23:44,799
pretty clear designs for other back ends

580
00:23:43,120 --> 00:23:46,479
so you can think of other key value

581
00:23:44,799 --> 00:23:48,240
stores

582
00:23:46,480 --> 00:23:50,000
there are reasons why you might want

583
00:23:48,240 --> 00:23:54,640
other ones in there

584
00:23:50,000 --> 00:23:58,159
going higher up the architecture diagram

585
00:23:54,640 --> 00:23:59,840
you can imagine that it's going to be an

586
00:23:58,159 --> 00:24:02,960
interesting place to put in some

587
00:23:59,840 --> 00:24:05,520
networking facilities

588
00:24:02,960 --> 00:24:07,039
that isn't within the next month or two

589
00:24:05,520 --> 00:24:09,120
the other things i've discussed

590
00:24:07,039 --> 00:24:11,440
are within the next month or two but

591
00:24:09,120 --> 00:24:14,479
these are the things we're trying to do

592
00:24:11,440 --> 00:24:16,799
one of the big big elephants

593
00:24:14,480 --> 00:24:20,240
non-postgres elephants in the room is

594
00:24:16,799 --> 00:24:22,158
how do you track upstream sqlite

595
00:24:20,240 --> 00:24:23,840
and we've got some ideas about that we

596
00:24:22,159 --> 00:24:24,960
haven't got a definitive answer about

597
00:24:23,840 --> 00:24:27,120
that but one thing we

598
00:24:24,960 --> 00:24:29,279
want to make absolutely clear is that

599
00:24:27,120 --> 00:24:32,080
right now we are not reinventing sql

600
00:24:29,279 --> 00:24:34,320
line there is a lot of code there

601
00:24:32,080 --> 00:24:36,639
if you look at the left hand side of

602
00:24:34,320 --> 00:24:38,799
that architecture diagram

603
00:24:36,640 --> 00:24:40,799
that i showed you earlier on there is a

604
00:24:38,799 --> 00:24:42,559
good deal in

605
00:24:40,799 --> 00:24:44,559
getting a statement parsing a statement

606
00:24:42,559 --> 00:24:47,760
preparing it for the virtual machine

607
00:24:44,559 --> 00:24:49,520
and so on and we don't in any way want

608
00:24:47,760 --> 00:24:51,600
to re-implement any of that and we want

609
00:24:49,520 --> 00:24:54,240
to have all their bug fixes

610
00:24:51,600 --> 00:24:56,639
we believe we can solve this problem by

611
00:24:54,240 --> 00:24:58,880
judicious use of good apis

612
00:24:56,640 --> 00:25:01,039
i'm pretty confident about that but in a

613
00:24:58,880 --> 00:25:03,120
nutshell that's new muscular that's

614
00:25:01,039 --> 00:25:06,919
where we're up to

615
00:25:03,120 --> 00:25:10,239
that's where we're going and next stop

616
00:25:06,919 --> 00:25:13,360
3.5 billion people's pockets

617
00:25:10,240 --> 00:25:15,679
there we are do we have any

618
00:25:13,360 --> 00:25:18,080
comments at this point i mean there's a

619
00:25:15,679 --> 00:25:20,240
lot more i've been

620
00:25:18,080 --> 00:25:22,559
skipping over the highlights we have a

621
00:25:20,240 --> 00:25:29,840
question

622
00:25:22,559 --> 00:25:29,840
so um

623
00:25:30,559 --> 00:25:37,520
i think that was absolutely a

624
00:25:34,320 --> 00:25:40,559
planted question what makes lmdb much

625
00:25:37,520 --> 00:25:43,918
better than any other key value stores

626
00:25:40,559 --> 00:25:45,440
okay i'll take that one so firstly

627
00:25:43,919 --> 00:25:46,960
as you've already talked about it's a

628
00:25:45,440 --> 00:25:49,760
single level store

629
00:25:46,960 --> 00:25:52,320
so it only has one file it maps

630
00:25:49,760 --> 00:25:54,640
everything in memory

631
00:25:52,320 --> 00:25:56,000
and if everything goes well as we would

632
00:25:54,640 --> 00:25:58,960
hope then there's a much

633
00:25:56,000 --> 00:26:01,200
lower risk of of corruption and loss of

634
00:25:58,960 --> 00:26:04,400
integrity

635
00:26:01,200 --> 00:26:06,400
it is also actually very efficient

636
00:26:04,400 --> 00:26:07,600
there's quite a few others there's level

637
00:26:06,400 --> 00:26:10,080
db

638
00:26:07,600 --> 00:26:11,520
and there are there are other design

639
00:26:10,080 --> 00:26:12,158
architectures out there that aren't

640
00:26:11,520 --> 00:26:15,440
based on b

641
00:26:12,159 --> 00:26:19,760
trees at all there's the lsm

642
00:26:15,440 --> 00:26:22,080
log structured merge back systems

643
00:26:19,760 --> 00:26:24,480
and there are quite a lot of other key

644
00:26:22,080 --> 00:26:28,240
value store libraries

645
00:26:24,480 --> 00:26:30,240
lmdb is extremely widely used

646
00:26:28,240 --> 00:26:32,640
and that is because it's almost a

647
00:26:30,240 --> 00:26:34,559
drop-in replacement for barclay db

648
00:26:32,640 --> 00:26:36,400
and barclay db can't really be used

649
00:26:34,559 --> 00:26:38,080
anymore because oracle changed the

650
00:26:36,400 --> 00:26:40,000
license on it

651
00:26:38,080 --> 00:26:41,600
the key word is sleepy cat if you care

652
00:26:40,000 --> 00:26:44,159
about the history there

653
00:26:41,600 --> 00:26:44,719
so lmdb is extremely well tested it's

654
00:26:44,159 --> 00:26:47,919
the bottom

655
00:26:44,720 --> 00:26:50,799
of openldap which is the project that

656
00:26:47,919 --> 00:26:51,600
out of which it came but now you'll find

657
00:26:50,799 --> 00:26:53,679
it under

658
00:26:51,600 --> 00:26:54,639
all kinds of other projects well-known

659
00:26:53,679 --> 00:26:58,159
ones include

660
00:26:54,640 --> 00:27:02,320
samba and bits of mozilla and

661
00:26:58,159 --> 00:27:06,880
so on and so forth lmdb therefore

662
00:27:02,320 --> 00:27:11,120
is very performant it is known to be

663
00:27:06,880 --> 00:27:14,559
quite reliable you can get corrupted

664
00:27:11,120 --> 00:27:17,439
databases out of lmdb but

665
00:27:14,559 --> 00:27:20,399
i am going to go out on a limb and say

666
00:27:17,440 --> 00:27:23,600
not nearly as often as sqlite

667
00:27:20,399 --> 00:27:24,479
and it has a very small footprint much

668
00:27:23,600 --> 00:27:26,879
smaller than

669
00:27:24,480 --> 00:27:27,600
many other b3 code bases including sql

670
00:27:26,880 --> 00:27:30,240
lights

671
00:27:27,600 --> 00:27:32,840
so the design goal for lmdb was to fit

672
00:27:30,240 --> 00:27:36,880
into l1 cache on a typical

673
00:27:32,840 --> 00:27:38,480
reasonable cpu and it manages that

674
00:27:36,880 --> 00:27:40,159
that's really cool because if you can

675
00:27:38,480 --> 00:27:43,520
keep the cash hot

676
00:27:40,159 --> 00:27:47,279
then your performance overall increases

677
00:27:43,520 --> 00:27:49,918
and that really matters on on

678
00:27:47,279 --> 00:27:50,559
funky modern architectures that's a

679
00:27:49,919 --> 00:27:55,840
start

680
00:27:50,559 --> 00:27:59,360
will that do so thank you luke

681
00:27:55,840 --> 00:27:59,678
um i've been doing working with howard

682
00:27:59,360 --> 00:28:02,879
on

683
00:27:59,679 --> 00:28:05,039
mdp i did i did the wikipedia page um

684
00:28:02,880 --> 00:28:06,880
the corruption occurs if you don't

685
00:28:05,039 --> 00:28:10,720
switch on f-sync

686
00:28:06,880 --> 00:28:12,320
the f-sync mode yeah corruptions with ln

687
00:28:10,720 --> 00:28:13,919
corruptions and all kinds of dreadful

688
00:28:12,320 --> 00:28:16,559
things happen with lmdb if you're

689
00:28:13,919 --> 00:28:19,440
unaware of its sharp edges

690
00:28:16,559 --> 00:28:20,799
so there was another question there yes

691
00:28:19,440 --> 00:28:24,720
are you aware of

692
00:28:20,799 --> 00:28:28,240
actor db which is actor db

693
00:28:24,720 --> 00:28:31,600
no i'm not okay that's actually did this

694
00:28:28,240 --> 00:28:34,880
combination of sqlite

695
00:28:31,600 --> 00:28:38,158
and lmdb underneath of it

696
00:28:34,880 --> 00:28:41,520
several years back and they

697
00:28:38,159 --> 00:28:44,480
they manage that or they call that

698
00:28:41,520 --> 00:28:45,520
a database node and then off top on top

699
00:28:44,480 --> 00:28:49,039
of that they have an

700
00:28:45,520 --> 00:28:50,799
airline layer and that manages a number

701
00:28:49,039 --> 00:28:52,320
of these kind of so does this still

702
00:28:50,799 --> 00:28:55,760
exist is it an active approach yes

703
00:28:52,320 --> 00:28:55,760
it's an active project

704
00:28:56,960 --> 00:29:02,240
marvelous i can't wait to meet the team

705
00:28:59,760 --> 00:29:04,399
i would i would uh have a look

706
00:29:02,240 --> 00:29:06,159
okay excellent what we've got is the

707
00:29:04,399 --> 00:29:07,439
beginnings and soon to be much better

708
00:29:06,159 --> 00:29:09,760
benchmarking tool but

709
00:29:07,440 --> 00:29:10,880
it's already of or a few years in

710
00:29:09,760 --> 00:29:13,120
operation

711
00:29:10,880 --> 00:29:14,480
marvelous yeah never heard of it

712
00:29:13,120 --> 00:29:18,799
actually

713
00:29:14,480 --> 00:29:22,960
good um thank you very much i'm gonna

714
00:29:18,799 --> 00:29:22,960
follow that up with enthusiasm

715
00:29:24,880 --> 00:29:27,840
no more questions

716
00:29:28,000 --> 00:29:33,120
well uh what's the would you do you

717
00:29:31,600 --> 00:29:34,639
happen to know the performance

718
00:29:33,120 --> 00:29:38,639
limitations of uh

719
00:29:34,640 --> 00:29:41,120
lmdb when when used um i don't and i'm

720
00:29:38,640 --> 00:29:43,200
skeptical that anybody actually does

721
00:29:41,120 --> 00:29:44,639
we have uh i don't want to take that one

722
00:29:43,200 --> 00:29:48,000
any further because i want to go

723
00:29:44,640 --> 00:29:48,480
on to some other questions uh first of

724
00:29:48,000 --> 00:29:50,080
all

725
00:29:48,480 --> 00:29:51,760
without naming any names is there anyone

726
00:29:50,080 --> 00:29:54,720
in the audience who would like to talk

727
00:29:51,760 --> 00:29:57,440
about um what we know so far about

728
00:29:54,720 --> 00:30:00,320
lumoscuel internals

729
00:29:57,440 --> 00:30:02,080
because we fix some bugs and it's quite

730
00:30:00,320 --> 00:30:03,279
interesting as to the nature of some of

731
00:30:02,080 --> 00:30:06,639
those bugs and what it might

732
00:30:03,279 --> 00:30:07,679
say about where we go to look further

733
00:30:06,640 --> 00:30:10,960
for

734
00:30:07,679 --> 00:30:10,960
and performance enhancements

735
00:30:12,799 --> 00:30:16,879
we can perhaps do that as a prepared

736
00:30:14,559 --> 00:30:20,000
talk then another time

737
00:30:16,880 --> 00:30:21,600
we certainly have um a a

738
00:30:20,000 --> 00:30:23,679
skilled bug fixer in the audience

739
00:30:21,600 --> 00:30:27,120
tonight so

740
00:30:23,679 --> 00:30:29,440
um what i'd like to

741
00:30:27,120 --> 00:30:32,158
just quickly run over some of the things

742
00:30:29,440 --> 00:30:36,000
that we've discovered

743
00:30:32,159 --> 00:30:37,039
so the howard's original port was a

744
00:30:36,000 --> 00:30:39,039
prototype only

745
00:30:37,039 --> 00:30:40,080
um this would be very interesting to

746
00:30:39,039 --> 00:30:44,158
compare to

747
00:30:40,080 --> 00:30:44,158
how ektor db

748
00:30:44,720 --> 00:30:51,840
oh as in the name hector

749
00:30:48,320 --> 00:30:51,840
okay so

750
00:30:53,679 --> 00:30:58,880
okay an erlang community thing okay so

751
00:30:57,200 --> 00:31:00,559
i'll be very interested to see how the

752
00:30:58,880 --> 00:31:04,640
different approaches compare

753
00:31:00,559 --> 00:31:06,559
um just replacing mdb.org sorry btree.c

754
00:31:04,640 --> 00:31:09,440
is a fairly limited and short-term

755
00:31:06,559 --> 00:31:11,760
approach that's our conclusion so far

756
00:31:09,440 --> 00:31:13,360
uh it's great we need to do this we need

757
00:31:11,760 --> 00:31:15,440
to have multiple

758
00:31:13,360 --> 00:31:16,799
key value stores down there but if

759
00:31:15,440 --> 00:31:19,919
you've got a

760
00:31:16,799 --> 00:31:22,720
general purpose and highly

761
00:31:19,919 --> 00:31:23,279
effective and widely used sql interface

762
00:31:22,720 --> 00:31:26,159
at the top

763
00:31:23,279 --> 00:31:27,679
end it seems a bit limiting just to have

764
00:31:26,159 --> 00:31:29,440
a key value store

765
00:31:27,679 --> 00:31:31,440
as the ultimate destination in the back

766
00:31:29,440 --> 00:31:34,240
end and that is something that we're

767
00:31:31,440 --> 00:31:35,919
very keen to introduce an api for so

768
00:31:34,240 --> 00:31:37,440
that we can not only switch between key

769
00:31:35,919 --> 00:31:39,760
value stores on disk

770
00:31:37,440 --> 00:31:40,640
but also between different network

771
00:31:39,760 --> 00:31:43,840
models and

772
00:31:40,640 --> 00:31:45,120
other ways of of of storing and

773
00:31:43,840 --> 00:31:49,120
retrieving data

774
00:31:45,120 --> 00:31:50,719
so where we fit in the api level in the

775
00:31:49,120 --> 00:31:55,678
architecture diagrams of this

776
00:31:50,720 --> 00:32:01,679
is is active consideration right now

777
00:31:55,679 --> 00:32:05,360
so is there anything further

778
00:32:01,679 --> 00:32:08,640
do we have sqlite users here

779
00:32:05,360 --> 00:32:12,639
yeah so

780
00:32:08,640 --> 00:32:12,640
is it doing exactly what you want

781
00:32:12,880 --> 00:32:17,440
not really why not what what's the

782
00:32:15,120 --> 00:32:17,439
problem

783
00:32:19,279 --> 00:32:22,880
sql light is too slow now here's an

784
00:32:21,919 --> 00:32:25,600
interesting thing

785
00:32:22,880 --> 00:32:26,559
a common use case for sqlite really

786
00:32:25,600 --> 00:32:30,000
common use case

787
00:32:26,559 --> 00:32:31,440
is in the build process for other

788
00:32:30,000 --> 00:32:35,039
projects

789
00:32:31,440 --> 00:32:36,640
that use a real network database

790
00:32:35,039 --> 00:32:38,399
and they put sql light in there because

791
00:32:36,640 --> 00:32:40,720
it's quicker and lighter to start up and

792
00:32:38,399 --> 00:32:43,678
faster

793
00:32:40,720 --> 00:32:45,120
i also think that sqlite is quite slow

794
00:32:43,679 --> 00:32:46,720
and this is

795
00:32:45,120 --> 00:32:48,719
the beginnings of what we can see with

796
00:32:46,720 --> 00:32:50,880
the the benchmarking we're doing it has

797
00:32:48,720 --> 00:32:53,519
particular hotspots

798
00:32:50,880 --> 00:32:55,760
um but it's really interesting that if

799
00:32:53,519 --> 00:32:58,000
you're finding sql lights slow

800
00:32:55,760 --> 00:33:00,240
that probably means depending on your

801
00:32:58,000 --> 00:33:03,760
use case you would find a real database

802
00:33:00,240 --> 00:33:06,640
unbearably slow so this isn't what we

803
00:33:03,760 --> 00:33:09,600
want in this century

804
00:33:06,640 --> 00:33:10,880
i i feel your pain and we're that is

805
00:33:09,600 --> 00:33:12,480
something that i'm

806
00:33:10,880 --> 00:33:14,080
trying to look at quite hard as to how

807
00:33:12,480 --> 00:33:15,279
can we make this thing faster from top

808
00:33:14,080 --> 00:33:17,840
to bottom

809
00:33:15,279 --> 00:33:19,440
there is even though there is only 350

810
00:33:17,840 --> 00:33:20,158
000 lines of code as compared to

811
00:33:19,440 --> 00:33:21,760
millions

812
00:33:20,159 --> 00:33:23,679
there is still quite a bit of technical

813
00:33:21,760 --> 00:33:26,399
debt in sql light

814
00:33:23,679 --> 00:33:28,080
so much so they tried to a few years ago

815
00:33:26,399 --> 00:33:31,360
make a sequel light 4

816
00:33:28,080 --> 00:33:32,799
which didn't work but they identified

817
00:33:31,360 --> 00:33:34,559
quite a lot of

818
00:33:32,799 --> 00:33:36,000
historical craft that they would like to

819
00:33:34,559 --> 00:33:38,480
do without in

820
00:33:36,000 --> 00:33:39,840
in a new version of sqlite and that

821
00:33:38,480 --> 00:33:43,200
remains true today

822
00:33:39,840 --> 00:33:44,959
and some of that is why it's slow so

823
00:33:43,200 --> 00:33:47,679
i look forward to finding out whether we

824
00:33:44,960 --> 00:33:50,240
can actually make this thing faster

825
00:33:47,679 --> 00:33:53,360
and i don't know the answer i i think

826
00:33:50,240 --> 00:33:56,960
it's very likely we can

827
00:33:53,360 --> 00:33:59,760
i certainly think that there is a lot of

828
00:33:56,960 --> 00:34:01,440
benefit to be had from talking to the

829
00:33:59,760 --> 00:34:02,879
really good experts who've been working

830
00:34:01,440 --> 00:34:04,159
on this code base for years and years

831
00:34:02,880 --> 00:34:05,679
and years

832
00:34:04,159 --> 00:34:08,000
and they know that there are some bits

833
00:34:05,679 --> 00:34:11,440
that haven't changed and why

834
00:34:08,000 --> 00:34:14,560
and maybe how it could change so

835
00:34:11,440 --> 00:34:18,240
any other good or bad things about

836
00:34:14,560 --> 00:34:18,239
sqlite in your current users

837
00:34:18,960 --> 00:34:26,240
so speed yes corruption we've discussed

838
00:34:23,599 --> 00:34:28,960
is there anything else that could be

839
00:34:26,239 --> 00:34:28,959
maybe better

840
00:34:30,480 --> 00:34:37,040
the api that's the one thing

841
00:34:34,320 --> 00:34:37,599
that mostly i don't want to see change

842
00:34:37,040 --> 00:34:39,440
um

843
00:34:37,599 --> 00:34:41,679
now noting i did say encryption but

844
00:34:39,440 --> 00:34:43,200
there is encryption already in the api

845
00:34:41,679 --> 00:34:45,119
so we wouldn't be introducing anything

846
00:34:43,199 --> 00:34:47,279
new there

847
00:34:45,119 --> 00:34:49,200
the point is it's at scale billions in

848
00:34:47,280 --> 00:34:50,879
its usage worldwide

849
00:34:49,199 --> 00:34:53,199
and that is the api that people are

850
00:34:50,879 --> 00:34:55,040
using so i'd be very reluctant to change

851
00:34:53,199 --> 00:34:56,960
that even a bit

852
00:34:55,040 --> 00:34:58,720
the only thing i have thought of is that

853
00:34:56,960 --> 00:35:00,880
there's older api

854
00:34:58,720 --> 00:35:02,319
interfaces associated with quite a lot

855
00:35:00,880 --> 00:35:05,599
of code

856
00:35:02,320 --> 00:35:07,760
that we could perhaps after great

857
00:35:05,599 --> 00:35:09,440
care and consultation dropped from the

858
00:35:07,760 --> 00:35:12,880
code base

859
00:35:09,440 --> 00:35:16,079
but sqlite three underscore apis i

860
00:35:12,880 --> 00:35:18,240
would feel very funny changing those

861
00:35:16,079 --> 00:35:31,839
in an incompatible fashion did you have

862
00:35:18,240 --> 00:35:31,839
something in particular you hate

863
00:35:32,000 --> 00:35:37,520
okay so but but sqlite has

864
00:35:35,040 --> 00:35:40,160
all kinds of apis for all kinds of all

865
00:35:37,520 --> 00:35:42,960
kinds of rappers all kinds of languages

866
00:35:40,160 --> 00:35:45,520
the main point of c of lumosql is to be

867
00:35:42,960 --> 00:35:47,119
able to seamlessly go wherever sqlite is

868
00:35:45,520 --> 00:35:50,560
today

869
00:35:47,119 --> 00:35:53,280
um and and hopefully with better effect

870
00:35:50,560 --> 00:35:54,560
or if not at least we'll produce

871
00:35:53,280 --> 00:35:56,400
benchmarking and

872
00:35:54,560 --> 00:35:57,599
and stability results that will be of

873
00:35:56,400 --> 00:36:01,680
use to the entire

874
00:35:57,599 --> 00:36:01,680
sqlite using community anything else

875
00:36:03,200 --> 00:36:07,439
did you add any uh unit tests or

876
00:36:05,760 --> 00:36:10,480
benchmarks for concurrent

877
00:36:07,440 --> 00:36:12,240
reason rights yet um we're

878
00:36:10,480 --> 00:36:14,480
at the moment we're really pleased that

879
00:36:12,240 --> 00:36:16,799
we've got the existing ones working

880
00:36:14,480 --> 00:36:19,359
uh and what we're doing has created a

881
00:36:16,800 --> 00:36:22,800
benchmarking tool that compares

882
00:36:19,359 --> 00:36:24,240
consecutive runs with each other

883
00:36:22,800 --> 00:36:26,079
which is not something that's equal

884
00:36:24,240 --> 00:36:29,200
light now now

885
00:36:26,079 --> 00:36:31,359
that's the thing there are three test

886
00:36:29,200 --> 00:36:34,879
environments for sqlite

887
00:36:31,359 --> 00:36:37,119
the oldest one is the tcl which is

888
00:36:34,880 --> 00:36:39,280
very extensive lots of code there and

889
00:36:37,119 --> 00:36:40,560
that's that does functionality testing

890
00:36:39,280 --> 00:36:44,320
and

891
00:36:40,560 --> 00:36:48,960
it really is got a lot of coverage the

892
00:36:44,320 --> 00:36:51,359
then there is the sequel light correct

893
00:36:48,960 --> 00:36:52,320
sql light 3 correctness no something

894
00:36:51,359 --> 00:36:54,400
like that i'm

895
00:36:52,320 --> 00:36:56,320
the the name of it has just gone to me

896
00:36:54,400 --> 00:36:59,599
at the moment but it is an sql

897
00:36:56,320 --> 00:37:01,280
correctness testing engine

898
00:36:59,599 --> 00:37:02,800
that can run against pretty much any

899
00:37:01,280 --> 00:37:04,800
database

900
00:37:02,800 --> 00:37:06,400
the only thing that cares about is if

901
00:37:04,800 --> 00:37:07,839
you put in a certain amount of data a

902
00:37:06,400 --> 00:37:10,240
certain kind of data do you get the

903
00:37:07,839 --> 00:37:13,599
right answer back

904
00:37:10,240 --> 00:37:14,959
but the third one is what we are told is

905
00:37:13,599 --> 00:37:17,839
a very excellent

906
00:37:14,960 --> 00:37:20,160
fast and even much more comprehensive

907
00:37:17,839 --> 00:37:20,160
test

908
00:37:20,560 --> 00:37:23,759
system for sqlite which you can get

909
00:37:23,040 --> 00:37:26,079
access to

910
00:37:23,760 --> 00:37:27,520
if you go to sqlite.org people and pay

911
00:37:26,079 --> 00:37:30,800
them money

912
00:37:27,520 --> 00:37:33,040
so that a lot of people do seem to be

913
00:37:30,800 --> 00:37:35,760
thinking that that that might be a bug

914
00:37:33,040 --> 00:37:38,480
um how it's addressed i don't know

915
00:37:35,760 --> 00:37:39,520
but that that is certainly a question

916
00:37:38,480 --> 00:37:42,160
that keeps

917
00:37:39,520 --> 00:37:42,160
popping up

918
00:37:43,200 --> 00:37:50,480
so there we are that is the introduction

919
00:37:46,640 --> 00:37:52,319
to lumosql which is a brand new project

920
00:37:50,480 --> 00:37:53,760
and we keep finding exciting new things

921
00:37:52,320 --> 00:37:56,000
every day we keep

922
00:37:53,760 --> 00:37:59,200
finding that benchmarking would appear

923
00:37:56,000 --> 00:38:01,839
to be the answer at the moment

924
00:37:59,200 --> 00:38:03,359
and we keep finding people who say oh i

925
00:38:01,839 --> 00:38:04,000
can imagine contributing and we're

926
00:38:03,359 --> 00:38:08,160
trying to make sure

927
00:38:04,000 --> 00:38:09,359
that they do there we are i don't have

928
00:38:08,160 --> 00:38:12,480
anything more to say

929
00:38:09,359 --> 00:38:14,319
except that we are in belgium right and

930
00:38:12,480 --> 00:38:16,560
i did say that needle hasn't changed for

931
00:38:14,320 --> 00:38:18,400
years and years and years

932
00:38:16,560 --> 00:38:20,320
i spent so much time with the marsupial

933
00:38:18,400 --> 00:38:22,640
army i just have to finish with them

934
00:38:20,320 --> 00:38:23,920
because they're we really do need new

935
00:38:22,640 --> 00:38:27,279
internet

936
00:38:23,920 --> 00:38:27,280
paradigms that'll do for me

937
00:38:27,440 --> 00:38:32,240
belgium what can you say so

938
00:38:30,480 --> 00:38:47,119
thank you ladies and gentlemen that's

939
00:38:32,240 --> 00:38:47,118
lumos qr

