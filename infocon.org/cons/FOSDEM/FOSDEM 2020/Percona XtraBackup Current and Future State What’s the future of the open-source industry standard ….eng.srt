1
00:00:05,040 --> 00:00:08,240
hello everyone

2
00:00:06,319 --> 00:00:09,599
my name is tyler douzean i'm going to

3
00:00:08,240 --> 00:00:10,320
talk to you today about percona extra

4
00:00:09,599 --> 00:00:12,320
backup

5
00:00:10,320 --> 00:00:14,000
so who am i i'm the product manager for

6
00:00:12,320 --> 00:00:14,960
mysql software and cloud software at

7
00:00:14,000 --> 00:00:17,039
percona

8
00:00:14,960 --> 00:00:18,640
i used to be an engineer before i went

9
00:00:17,039 --> 00:00:20,080
into management and i've been active in

10
00:00:18,640 --> 00:00:22,080
open source for a really long time

11
00:00:20,080 --> 00:00:23,759
doing volunteer stuff on the side and

12
00:00:22,080 --> 00:00:25,038
very happy to be able to work on it as a

13
00:00:23,760 --> 00:00:26,720
as a career now

14
00:00:25,039 --> 00:00:28,320
so what what is extra backup for those

15
00:00:26,720 --> 00:00:29,679
of you that don't know this is an

16
00:00:28,320 --> 00:00:32,800
enterprise grade

17
00:00:29,679 --> 00:00:34,399
backup tool hot backup tool for mysql

18
00:00:32,800 --> 00:00:36,399
it supports my rocks it's cloud

19
00:00:34,399 --> 00:00:37,920
integrated as of recently

20
00:00:36,399 --> 00:00:39,360
it's entirely free in open source

21
00:00:37,920 --> 00:00:40,640
software just like all the other

22
00:00:39,360 --> 00:00:43,680
software that rakona

23
00:00:40,640 --> 00:00:45,840
provides and it's made up of four

24
00:00:43,680 --> 00:00:46,960
binary utilities there's the main one

25
00:00:45,840 --> 00:00:48,960
which is called extra backup that

26
00:00:46,960 --> 00:00:51,840
actually performs backups and restores

27
00:00:48,960 --> 00:00:53,600
there's xb stream which basically is a

28
00:00:51,840 --> 00:00:54,079
utility to stream backups across a

29
00:00:53,600 --> 00:00:55,680
network

30
00:00:54,079 --> 00:00:57,199
it's used internally in some of our

31
00:00:55,680 --> 00:00:58,800
software for a process called sst

32
00:00:57,199 --> 00:01:02,079
snapshots transfers

33
00:00:58,800 --> 00:01:04,798
but it also includes some compression

34
00:01:02,079 --> 00:01:05,920
uh there's xpcrypt which is a xp stream

35
00:01:04,799 --> 00:01:08,479
compatible way to do

36
00:01:05,920 --> 00:01:11,040
encryption and there's xp cloud which is

37
00:01:08,479 --> 00:01:13,600
an xb stream compatible way to

38
00:01:11,040 --> 00:01:14,960
send your backups up to a cloud provider

39
00:01:13,600 --> 00:01:16,158
and we currently support

40
00:01:14,960 --> 00:01:18,000
anything that's compatible with the

41
00:01:16,159 --> 00:01:21,439
amazon s3 api

42
00:01:18,000 --> 00:01:21,439
as well as openstack swift

43
00:01:21,840 --> 00:01:24,799
and i want to kind of talk through the

44
00:01:23,520 --> 00:01:27,039
current state and then i'm going to go

45
00:01:24,799 --> 00:01:29,600
into some of the things we have planned

46
00:01:27,040 --> 00:01:30,159
so a big question a lot of folks have is

47
00:01:29,600 --> 00:01:31,600
like

48
00:01:30,159 --> 00:01:34,320
one of the things we recently did was

49
00:01:31,600 --> 00:01:35,520
released a version from mysql 8.0

50
00:01:34,320 --> 00:01:37,919
people asked why did we split the

51
00:01:35,520 --> 00:01:40,640
binaries um basically

52
00:01:37,920 --> 00:01:42,240
in mysql 8.0 there is an introduction of

53
00:01:40,640 --> 00:01:43,520
a new data dictionary format and a new

54
00:01:42,240 --> 00:01:46,320
redo log format

55
00:01:43,520 --> 00:01:48,158
which has a bunch of advantages however

56
00:01:46,320 --> 00:01:49,839
because of that there's no compatibility

57
00:01:48,159 --> 00:01:51,360
between the data dictionary that exists

58
00:01:49,840 --> 00:01:52,479
in 5.7 and the data dictionary that

59
00:01:51,360 --> 00:01:53,920
exists in 8-0

60
00:01:52,479 --> 00:01:56,079
so you can't have the same backup

61
00:01:53,920 --> 00:01:58,560
utility work on both

62
00:01:56,079 --> 00:02:00,320
um unless you put an extraordinary

63
00:01:58,560 --> 00:02:02,799
amount of effort into essentially

64
00:02:00,320 --> 00:02:05,039
shipping kind of an engine for both um

65
00:02:02,799 --> 00:02:06,479
which is

66
00:02:05,040 --> 00:02:08,720
which was outside the scope of what we

67
00:02:06,479 --> 00:02:11,280
could do with this project currently

68
00:02:08,720 --> 00:02:12,800
and so because of that actually oracle

69
00:02:11,280 --> 00:02:14,400
also upstream split their mysql

70
00:02:12,800 --> 00:02:15,599
enterprise backup utility for basically

71
00:02:14,400 --> 00:02:17,360
similar reasons

72
00:02:15,599 --> 00:02:19,599
but we're still actively developing both

73
00:02:17,360 --> 00:02:21,200
series so we have the 2.4 release series

74
00:02:19,599 --> 00:02:23,679
which is actively developed for the

75
00:02:21,200 --> 00:02:24,879
the 5x family of mysql and we have the

76
00:02:23,680 --> 00:02:28,720
8-0

77
00:02:24,879 --> 00:02:31,760
pxb which is developed for the 8-0

78
00:02:28,720 --> 00:02:32,800
series of mysql

79
00:02:31,760 --> 00:02:35,280
another thing that's a recent

80
00:02:32,800 --> 00:02:37,840
development is we added support for

81
00:02:35,280 --> 00:02:38,319
multiple engine consistent backups and

82
00:02:37,840 --> 00:02:40,239
so

83
00:02:38,319 --> 00:02:41,679
the the engine we added support for

84
00:02:40,239 --> 00:02:43,440
first is my rocks

85
00:02:41,680 --> 00:02:45,040
there's the ability to add other engines

86
00:02:43,440 --> 00:02:48,319
in the future but

87
00:02:45,040 --> 00:02:50,400
um one of the things that we we did this

88
00:02:48,319 --> 00:02:52,399
for was again because in 8-0 the new

89
00:02:50,400 --> 00:02:53,040
data dictionary format nato relies on

90
00:02:52,400 --> 00:02:54,400
nodb

91
00:02:53,040 --> 00:02:56,720
so your system tables are actually

92
00:02:54,400 --> 00:02:59,840
stored in an nodb table

93
00:02:56,720 --> 00:03:00,400
so even if you have a database where all

94
00:02:59,840 --> 00:03:02,879
of your

95
00:03:00,400 --> 00:03:04,319
your databases are based on my rocks

96
00:03:02,879 --> 00:03:05,760
you're in the situation where you still

97
00:03:04,319 --> 00:03:07,679
have to back up the system tables from

98
00:03:05,760 --> 00:03:09,359
nodb so you have to have a backup that's

99
00:03:07,680 --> 00:03:12,080
consistent to a point in time with

100
00:03:09,360 --> 00:03:13,280
both nodb and my rocks together and so

101
00:03:12,080 --> 00:03:15,440
to do this

102
00:03:13,280 --> 00:03:17,360
we added the capability to do check

103
00:03:15,440 --> 00:03:18,480
pointing into my rox which is based on

104
00:03:17,360 --> 00:03:20,800
the internal

105
00:03:18,480 --> 00:03:22,480
um basic there's an internal function in

106
00:03:20,800 --> 00:03:25,440
roxdb that essentially creates a

107
00:03:22,480 --> 00:03:28,319
snapshot of the on-disk sst files

108
00:03:25,440 --> 00:03:29,280
and we use that combined with some hooks

109
00:03:28,319 --> 00:03:31,760
we added in

110
00:03:29,280 --> 00:03:33,599
that essentially let you grab a specific

111
00:03:31,760 --> 00:03:36,720
point in time like lsn within the

112
00:03:33,599 --> 00:03:39,040
wall log for my rocks and at the

113
00:03:36,720 --> 00:03:40,879
exact same moment we grab the same

114
00:03:39,040 --> 00:03:44,239
consistent point in time in the

115
00:03:40,879 --> 00:03:46,000
in the mysql binary log for for nodb

116
00:03:44,239 --> 00:03:47,200
and so this allows us to have a single

117
00:03:46,000 --> 00:03:48,640
point in time where backups are

118
00:03:47,200 --> 00:03:49,280
consistent too when you finish your

119
00:03:48,640 --> 00:03:52,720
prepare

120
00:03:49,280 --> 00:03:54,480
um step in extra backup and uh

121
00:03:52,720 --> 00:03:56,319
it's works really good it's actually

122
00:03:54,480 --> 00:03:57,679
quite fast on my rocks because the the

123
00:03:56,319 --> 00:03:58,798
files on disk essentially just have to

124
00:03:57,680 --> 00:04:01,760
be copied similar

125
00:03:58,799 --> 00:04:03,200
similarly to how we work with nodb and

126
00:04:01,760 --> 00:04:03,679
then another thing we just recently

127
00:04:03,200 --> 00:04:05,359
added

128
00:04:03,680 --> 00:04:07,120
was support for streaming cloud object

129
00:04:05,360 --> 00:04:09,200
storage so as i mentioned

130
00:04:07,120 --> 00:04:10,799
earlier we have support and xp cloud for

131
00:04:09,200 --> 00:04:13,359
openstack swift and

132
00:04:10,799 --> 00:04:14,000
and s3 one of the really cool things

133
00:04:13,360 --> 00:04:16,160
about it

134
00:04:14,000 --> 00:04:17,279
is that you can actually do a backup to

135
00:04:16,160 --> 00:04:18,000
the cloud without having to write

136
00:04:17,279 --> 00:04:19,918
anything to

137
00:04:18,000 --> 00:04:21,040
to disk at all so when you execute the

138
00:04:19,918 --> 00:04:22,799
backup

139
00:04:21,040 --> 00:04:24,160
you can actually stream it with xp cloud

140
00:04:22,800 --> 00:04:26,000
directly into s3

141
00:04:24,160 --> 00:04:28,160
or anything that supports the s3 api

142
00:04:26,000 --> 00:04:31,120
like minion

143
00:04:28,160 --> 00:04:32,320
and it allows a allows you to really

144
00:04:31,120 --> 00:04:33,759
make use of this environment like

145
00:04:32,320 --> 00:04:34,880
kubernetes that's one of the reasons we

146
00:04:33,759 --> 00:04:36,720
added it is because

147
00:04:34,880 --> 00:04:38,000
we also have um an operator for

148
00:04:36,720 --> 00:04:39,040
kubernetes for running some of our

149
00:04:38,000 --> 00:04:40,800
database software

150
00:04:39,040 --> 00:04:42,639
and we needed a backup utility that was

151
00:04:40,800 --> 00:04:44,160
able to be run kind of in a native way

152
00:04:42,639 --> 00:04:48,080
in kubernetes that could do this

153
00:04:44,160 --> 00:04:49,919
and so that's why we did this um

154
00:04:48,080 --> 00:04:51,520
pretty cool feature and then i'm going

155
00:04:49,919 --> 00:04:52,960
to just go real quick

156
00:04:51,520 --> 00:04:54,840
over an overview of some of the things

157
00:04:52,960 --> 00:04:57,440
coming up on our roadmap

158
00:04:54,840 --> 00:04:58,239
so a big piece of this is we want to do

159
00:04:57,440 --> 00:05:00,719
a bunch of

160
00:04:58,240 --> 00:05:02,320
improvements for security uh one of the

161
00:05:00,720 --> 00:05:03,840
things that we've got as a strategy

162
00:05:02,320 --> 00:05:04,560
generally across all of our software for

163
00:05:03,840 --> 00:05:06,000
kona

164
00:05:04,560 --> 00:05:08,240
is we want to improve the security of

165
00:05:06,000 --> 00:05:10,560
our software or improve the way that

166
00:05:08,240 --> 00:05:11,840
people can use the software to secure

167
00:05:10,560 --> 00:05:13,680
themselves

168
00:05:11,840 --> 00:05:15,359
we see this as kind of being like a

169
00:05:13,680 --> 00:05:16,800
critical factor for enterprises to

170
00:05:15,360 --> 00:05:17,120
actually make use of open source as they

171
00:05:16,800 --> 00:05:18,479
need

172
00:05:17,120 --> 00:05:20,400
to have enterprise-grade security

173
00:05:18,479 --> 00:05:21,840
features so

174
00:05:20,400 --> 00:05:23,679
we actually have just finished this

175
00:05:21,840 --> 00:05:26,880
first item so

176
00:05:23,680 --> 00:05:28,639
for pxe-80 we're going to have support

177
00:05:26,880 --> 00:05:31,360
for data and rest encryption

178
00:05:28,639 --> 00:05:32,960
and in order to support that we have to

179
00:05:31,360 --> 00:05:33,919
have this concept called transition keys

180
00:05:32,960 --> 00:05:35,359
because every

181
00:05:33,919 --> 00:05:37,198
member of a cluster could actually have

182
00:05:35,360 --> 00:05:38,240
a different key on disk that it uses to

183
00:05:37,199 --> 00:05:40,240
encrypt itself

184
00:05:38,240 --> 00:05:41,919
but the the extra backup tool is

185
00:05:40,240 --> 00:05:43,199
actually used for the sst process so it

186
00:05:41,919 --> 00:05:44,560
still needs to be able to transfer data

187
00:05:43,199 --> 00:05:46,080
successfully so what we do is we

188
00:05:44,560 --> 00:05:49,039
actually do re-encryption

189
00:05:46,080 --> 00:05:50,159
in stream we call this transition keys

190
00:05:49,039 --> 00:05:51,759
we're working on doing tighter

191
00:05:50,160 --> 00:05:53,120
integration with hashicorp vault so that

192
00:05:51,759 --> 00:05:54,479
you can make use of it to have unique

193
00:05:53,120 --> 00:05:55,120
keys that are stored by vault to

194
00:05:54,479 --> 00:05:56,479
actually

195
00:05:55,120 --> 00:05:58,400
encrypt your backups before they go

196
00:05:56,479 --> 00:05:59,280
across the network you know obviously

197
00:05:58,400 --> 00:06:01,520
today

198
00:05:59,280 --> 00:06:03,119
if you put something in s3 you can

199
00:06:01,520 --> 00:06:05,520
configure your s3 bucket so it's

200
00:06:03,120 --> 00:06:07,280
encrypted and it's using https to send

201
00:06:05,520 --> 00:06:09,120
it so it's encrypted on the wire

202
00:06:07,280 --> 00:06:10,400
but you know you're relying on the cloud

203
00:06:09,120 --> 00:06:11,520
provider's encryption only you don't

204
00:06:10,400 --> 00:06:12,479
have a way to enforce your own

205
00:06:11,520 --> 00:06:14,479
encryption as well

206
00:06:12,479 --> 00:06:15,680
unless you write it into like a script

207
00:06:14,479 --> 00:06:18,000
extra

208
00:06:15,680 --> 00:06:19,440
this provides a path to do that we're

209
00:06:18,000 --> 00:06:20,000
also going to add support for our key

210
00:06:19,440 --> 00:06:22,000
rotation

211
00:06:20,000 --> 00:06:23,520
features when they become ga they're an

212
00:06:22,000 --> 00:06:25,120
experimental right now within pacona

213
00:06:23,520 --> 00:06:26,560
server

214
00:06:25,120 --> 00:06:28,240
we've got some performance improvements

215
00:06:26,560 --> 00:06:29,840
we've been working through so

216
00:06:28,240 --> 00:06:31,759
one thing is we've got a new flag that

217
00:06:29,840 --> 00:06:34,400
will help you to auto tune

218
00:06:31,759 --> 00:06:36,160
the use memory setting an extra backup

219
00:06:34,400 --> 00:06:37,679
which determines basically what the size

220
00:06:36,160 --> 00:06:40,000
of the buffer pool is

221
00:06:37,680 --> 00:06:40,960
when extra backup is running and this

222
00:06:40,000 --> 00:06:43,280
has this has

223
00:06:40,960 --> 00:06:44,318
a pretty significant impact on the speed

224
00:06:43,280 --> 00:06:46,000
of a backup

225
00:06:44,319 --> 00:06:47,520
and so we're going to basically analyze

226
00:06:46,000 --> 00:06:50,319
the redo log to understand

227
00:06:47,520 --> 00:06:52,799
how many pages are present and are

228
00:06:50,319 --> 00:06:54,160
needed in memory and set the size

229
00:06:52,800 --> 00:06:56,639
we're going to do adjustable chunk

230
00:06:54,160 --> 00:06:58,240
sizing in xb stream at some point and

231
00:06:56,639 --> 00:06:59,840
when we do that it'll be supported in xp

232
00:06:58,240 --> 00:07:02,880
cloud as well

233
00:06:59,840 --> 00:07:06,080
we're going to also do chunk level

234
00:07:02,880 --> 00:07:06,960
support for parallel today this is on a

235
00:07:06,080 --> 00:07:08,240
file level

236
00:07:06,960 --> 00:07:09,919
but we want to we want to do it at a

237
00:07:08,240 --> 00:07:12,240
chunk level so you can have single large

238
00:07:09,919 --> 00:07:14,240
databases and still get a speed up

239
00:07:12,240 --> 00:07:16,080
and we want to add x exponential back

240
00:07:14,240 --> 00:07:19,039
off into the xp cloud api

241
00:07:16,080 --> 00:07:21,280
wrappers because today retries can be

242
00:07:19,039 --> 00:07:22,800
kind of expensive so if the api becomes

243
00:07:21,280 --> 00:07:24,080
unavailable for your cloud provider for

244
00:07:22,800 --> 00:07:25,599
any reason whether it's a network issue

245
00:07:24,080 --> 00:07:28,960
or whatever

246
00:07:25,599 --> 00:07:30,159
it can be painful so and then

247
00:07:28,960 --> 00:07:31,758
we're going to do some additional

248
00:07:30,160 --> 00:07:33,360
integration so a lot of this is an xb

249
00:07:31,759 --> 00:07:34,880
cloud we want to add like native support

250
00:07:33,360 --> 00:07:36,319
for google cloud storage today you can

251
00:07:34,880 --> 00:07:38,400
use it through the s3 api

252
00:07:36,319 --> 00:07:39,599
integration but we'd like to be native

253
00:07:38,400 --> 00:07:41,039
to google cloud

254
00:07:39,599 --> 00:07:42,719
same thing we'd like to support azure

255
00:07:41,039 --> 00:07:44,080
blob

256
00:07:42,720 --> 00:07:46,160
we're going to add an incremental backup

257
00:07:44,080 --> 00:07:47,758
function for my rocks

258
00:07:46,160 --> 00:07:50,240
and then we would like to support doing

259
00:07:47,759 --> 00:07:51,039
restoration via tarball from xv cloud so

260
00:07:50,240 --> 00:07:53,199
right now

261
00:07:51,039 --> 00:07:54,400
you know extra backup expects to go to a

262
00:07:53,199 --> 00:07:56,319
place on disk

263
00:07:54,400 --> 00:07:57,520
and when you use xb cloud it expects

264
00:07:56,319 --> 00:07:59,039
that the bucket

265
00:07:57,520 --> 00:08:00,639
basically contains the contents of what

266
00:07:59,039 --> 00:08:02,159
would be in the place on disk

267
00:08:00,639 --> 00:08:04,319
we want to support powerballs to

268
00:08:02,160 --> 00:08:05,440
simplify some of this

269
00:08:04,319 --> 00:08:07,840
and then we're going to add support for

270
00:08:05,440 --> 00:08:09,199
im roles in s3 so there's the ability to

271
00:08:07,840 --> 00:08:12,479
kind of

272
00:08:09,199 --> 00:08:14,240
make use of those integrations and

273
00:08:12,479 --> 00:08:15,680
setup roles and things like that for for

274
00:08:14,240 --> 00:08:17,759
backup users

275
00:08:15,680 --> 00:08:18,879
and with that i went really quick

276
00:08:17,759 --> 00:08:20,560
because i wanted to give time for

277
00:08:18,879 --> 00:08:22,560
questions

278
00:08:20,560 --> 00:08:24,479
and here's my contact information so if

279
00:08:22,560 --> 00:08:27,680
you got questions i'm happy to address

280
00:08:24,479 --> 00:08:29,919
whatever your questions are

281
00:08:27,680 --> 00:08:29,919
yes

282
00:08:35,120 --> 00:08:40,159
ah that's a good question so um

283
00:08:38,640 --> 00:08:42,479
i i don't have a good answer for you

284
00:08:40,159 --> 00:08:44,880
that right now uh for that right now

285
00:08:42,479 --> 00:08:46,399
um typically we're we're doing all of

286
00:08:44,880 --> 00:08:47,680
our new feature development into the

287
00:08:46,399 --> 00:08:49,839
most recent

288
00:08:47,680 --> 00:08:51,680
branch uh some things we choose to back

289
00:08:49,839 --> 00:08:53,200
port um we have back ported some

290
00:08:51,680 --> 00:08:54,000
features like the xb cloud features are

291
00:08:53,200 --> 00:08:57,200
actually back ported

292
00:08:54,000 --> 00:08:59,120
into two four for instance um but

293
00:08:57,200 --> 00:09:00,320
uh i i don't have a decision point on

294
00:08:59,120 --> 00:09:04,240
that yet

295
00:09:00,320 --> 00:09:04,240
but it'll it'll go into edo first for

296
00:09:06,839 --> 00:09:09,839
sure

297
00:09:20,839 --> 00:09:23,839
um

298
00:09:26,080 --> 00:09:30,880
yeah i mean uh well basically we're

299
00:09:29,360 --> 00:09:31,600
going to have to add support for azure

300
00:09:30,880 --> 00:09:33,040
blob

301
00:09:31,600 --> 00:09:34,720
into the tool before you could probably

302
00:09:33,040 --> 00:09:36,560
do that there is a way

303
00:09:34,720 --> 00:09:38,240
azure actually has a instructions on

304
00:09:36,560 --> 00:09:40,160
their on their documentation on how to

305
00:09:38,240 --> 00:09:41,600
set min i o up in front of it as like a

306
00:09:40,160 --> 00:09:42,640
proxy so you can still use an s3

307
00:09:41,600 --> 00:09:45,600
compatible layer

308
00:09:42,640 --> 00:09:46,480
to talk to azure blob but as long as you

309
00:09:45,600 --> 00:09:48,560
have the ability to

310
00:09:46,480 --> 00:09:49,920
to just hit the public api and get a

311
00:09:48,560 --> 00:09:51,119
backup there's no reason why you

312
00:09:49,920 --> 00:09:53,680
couldn't execute

313
00:09:51,120 --> 00:09:55,600
xp cloud and say aws and grab a backup

314
00:09:53,680 --> 00:09:57,439
off of azure and restore it

315
00:09:55,600 --> 00:09:59,920
so yeah you could you could cross

316
00:09:57,440 --> 00:09:59,920
boundaries

317
00:10:05,120 --> 00:10:09,519
differential backups uh no not currently

318
00:10:13,839 --> 00:10:20,000
any other questions cool all right

319
00:10:16,880 --> 00:10:22,959
well i'm within my time so thank you all

320
00:10:20,000 --> 00:10:33,839
and come check us out check out some of

321
00:10:22,959 --> 00:10:33,839
our software

322
00:10:35,279 --> 00:10:37,360
you

