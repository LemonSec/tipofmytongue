1
00:00:05,120 --> 00:00:08,480
okay so

2
00:00:07,200 --> 00:00:11,280
thank you everybody thank you for

3
00:00:08,480 --> 00:00:14,639
representation so i'm going to talk

4
00:00:11,280 --> 00:00:19,119
first a bit about a liar

5
00:00:14,639 --> 00:00:22,640
that means ada library repository

6
00:00:19,119 --> 00:00:26,240
and the talk has three parts

7
00:00:22,640 --> 00:00:30,000
that's why we have we are three people

8
00:00:26,240 --> 00:00:33,040
i'll first talk a bit about

9
00:00:30,000 --> 00:00:34,079
general things about the project how it

10
00:00:33,040 --> 00:00:37,680
started

11
00:00:34,079 --> 00:00:38,719
where it's now and a bit of the

12
00:00:37,680 --> 00:00:41,040
internals

13
00:00:38,719 --> 00:00:42,320
and then comes the fun part which are

14
00:00:41,040 --> 00:00:44,800
two demos

15
00:00:42,320 --> 00:00:46,160
one about how to begin a project with a

16
00:00:44,800 --> 00:00:48,239
liar

17
00:00:46,160 --> 00:00:49,919
and another one on how to contribute

18
00:00:48,239 --> 00:00:53,680
your projects to ally

19
00:00:49,920 --> 00:00:56,719
so let's go

20
00:00:53,680 --> 00:01:00,879
yeah why in the first place

21
00:00:56,719 --> 00:01:04,080
this project exists well i think that

22
00:01:00,879 --> 00:01:05,438
nowadays every language every platform

23
00:01:04,080 --> 00:01:07,439
has a

24
00:01:05,438 --> 00:01:08,960
way of installing dependencies

25
00:01:07,439 --> 00:01:13,279
installing installing

26
00:01:08,960 --> 00:01:16,320
other projects and truth is that

27
00:01:13,280 --> 00:01:17,200
we have become used to be able to do

28
00:01:16,320 --> 00:01:21,360
this

29
00:01:17,200 --> 00:01:24,479
yes sorry

30
00:01:21,360 --> 00:01:27,920
and well this is true for for

31
00:01:24,479 --> 00:01:28,479
more for john languages but it's also

32
00:01:27,920 --> 00:01:31,840
true

33
00:01:28,479 --> 00:01:35,439
by for other well-established languages

34
00:01:31,840 --> 00:01:35,920
and platforms so a question that gets

35
00:01:35,439 --> 00:01:38,479
asked

36
00:01:35,920 --> 00:01:40,320
from time to time is how do you in ada

37
00:01:38,479 --> 00:01:43,439
find new projects to use or

38
00:01:40,320 --> 00:01:45,679
how to install dependencies and

39
00:01:43,439 --> 00:01:46,880
well we have to say there is no way in

40
00:01:45,680 --> 00:01:48,640
ada you have to

41
00:01:46,880 --> 00:01:52,320
fish the projects around and install

42
00:01:48,640 --> 00:01:52,320
them manually and then you can use them

43
00:01:52,640 --> 00:01:55,920
and the truth is that when i started

44
00:01:54,479 --> 00:01:58,719
this project there was

45
00:01:55,920 --> 00:01:59,759
to my knowledge no related projects for

46
00:01:58,719 --> 00:02:03,119
foreign

47
00:01:59,759 --> 00:02:05,520
besides the outstanding efforts for

48
00:02:03,119 --> 00:02:06,840
debian which has very good support for

49
00:02:05,520 --> 00:02:10,560
ada

50
00:02:06,840 --> 00:02:13,520
packages then there is a project from

51
00:02:10,560 --> 00:02:14,800
uh the bs the guy luis merino i think

52
00:02:13,520 --> 00:02:17,040
it's the name

53
00:02:14,800 --> 00:02:19,200
which is a kind of system package

54
00:02:17,040 --> 00:02:21,519
manager so it's not for ada

55
00:02:19,200 --> 00:02:22,560
but it has very good support for ada

56
00:02:21,520 --> 00:02:25,840
packages and then

57
00:02:22,560 --> 00:02:27,520
we have now liar which is really

58
00:02:25,840 --> 00:02:32,160
oriented to

59
00:02:27,520 --> 00:02:32,160
to support the the eight hour

60
00:02:32,319 --> 00:02:36,720
so another more for the list and then

61
00:02:34,879 --> 00:02:39,518
besides the the

62
00:02:36,720 --> 00:02:39,920
express expense expectancy of having

63
00:02:39,519 --> 00:02:43,280
this

64
00:02:39,920 --> 00:02:45,040
or the comfort of having this

65
00:02:43,280 --> 00:02:47,120
there are real advantages on using

66
00:02:45,040 --> 00:02:50,720
package managers

67
00:02:47,120 --> 00:02:52,640
for starters um it simplifies

68
00:02:50,720 --> 00:02:53,920
reducing code if you are aware that

69
00:02:52,640 --> 00:02:55,760
other libraries exist

70
00:02:53,920 --> 00:02:57,359
and you can install them quickly and

71
00:02:55,760 --> 00:03:01,040
easily

72
00:02:57,360 --> 00:03:03,120
and also if libraries are classified

73
00:03:01,040 --> 00:03:06,319
with proper descriptions and

74
00:03:03,120 --> 00:03:08,400
tags you are more likely to find

75
00:03:06,319 --> 00:03:11,119
something that you can reuse instead of

76
00:03:08,400 --> 00:03:14,879
rolling your own solution

77
00:03:11,120 --> 00:03:18,319
um a cross-platform library manager

78
00:03:14,879 --> 00:03:20,399
will help you in making your

79
00:03:18,319 --> 00:03:22,799
libraries available in a number of

80
00:03:20,400 --> 00:03:25,920
platforms not only in the

81
00:03:22,800 --> 00:03:29,599
on the platform you are working

82
00:03:25,920 --> 00:03:32,720
it can help in to providing reproducible

83
00:03:29,599 --> 00:03:34,238
builds if you say this project builds

84
00:03:32,720 --> 00:03:36,000
with those dependencies

85
00:03:34,239 --> 00:03:37,920
and if you build them you will get the

86
00:03:36,000 --> 00:03:39,840
same binary that i am

87
00:03:37,920 --> 00:03:41,518
providing for download you can verify

88
00:03:39,840 --> 00:03:43,040
that you are using the proper

89
00:03:41,519 --> 00:03:46,879
dependencies

90
00:03:43,040 --> 00:03:47,519
and finally in and the fast evolving

91
00:03:46,879 --> 00:03:50,798
world

92
00:03:47,519 --> 00:03:53,280
of of software it might help on

93
00:03:50,799 --> 00:03:56,000
updating your dependencies when new bugs

94
00:03:53,280 --> 00:03:58,480
are found vulnerabilities and so on you

95
00:03:56,000 --> 00:04:00,159
you just do an update and you get all

96
00:03:58,480 --> 00:04:02,640
the new versions of libraries

97
00:04:00,159 --> 00:04:03,840
if they are properly maintained and you

98
00:04:02,640 --> 00:04:07,119
get a fixed

99
00:04:03,840 --> 00:04:09,840
executive and

100
00:04:07,120 --> 00:04:10,640
well that's about the motivation but now

101
00:04:09,840 --> 00:04:14,959
moving

102
00:04:10,640 --> 00:04:14,958
in particular into one to our project

103
00:04:15,439 --> 00:04:19,120
i just checked for the for preparing

104
00:04:17,839 --> 00:04:22,560
this talk

105
00:04:19,120 --> 00:04:25,600
uh when this all started

106
00:04:22,560 --> 00:04:26,160
and the community has debated from time

107
00:04:25,600 --> 00:04:29,600
to time

108
00:04:26,160 --> 00:04:31,840
about this but it was now

109
00:04:29,600 --> 00:04:33,680
it's crazy but it's now four years ago

110
00:04:31,840 --> 00:04:36,239
that

111
00:04:33,680 --> 00:04:38,160
i opened the first repository to have

112
00:04:36,240 --> 00:04:38,639
discussions about this and we had some

113
00:04:38,160 --> 00:04:41,199
talks

114
00:04:38,639 --> 00:04:44,000
also in the news group them for two

115
00:04:41,199 --> 00:04:46,400
years nothing else happened

116
00:04:44,000 --> 00:04:48,000
and then is when i sent the first

117
00:04:46,400 --> 00:04:50,080
version to other europe which was

118
00:04:48,000 --> 00:04:54,560
rejected properly because it was

119
00:04:50,080 --> 00:04:54,560
really rough at that point in time

120
00:04:55,520 --> 00:04:59,520
the same year in 2018 i i did a research

121
00:04:58,800 --> 00:05:02,560
visit

122
00:04:59,520 --> 00:05:04,320
with adacore and for other matters

123
00:05:02,560 --> 00:05:05,600
that you saw this morning if you were

124
00:05:04,320 --> 00:05:07,520
here

125
00:05:05,600 --> 00:05:09,440
and that gave us the opportunity to talk

126
00:05:07,520 --> 00:05:13,120
about the

127
00:05:09,440 --> 00:05:15,520
the the ada community was asking for a

128
00:05:13,120 --> 00:05:17,840
project manager there was none the core

129
00:05:15,520 --> 00:05:21,198
was also interesting on having something

130
00:05:17,840 --> 00:05:24,799
for this so from from that

131
00:05:21,199 --> 00:05:26,000
we kept in touch and last year adacore

132
00:05:24,800 --> 00:05:28,800
also

133
00:05:26,000 --> 00:05:30,320
gave support to the project which

134
00:05:28,800 --> 00:05:32,960
allowed me to

135
00:05:30,320 --> 00:05:34,560
work more time on it and also people

136
00:05:32,960 --> 00:05:37,198
from idaho

137
00:05:34,560 --> 00:05:37,759
is also contributing now so yeah it's

138
00:05:37,199 --> 00:05:41,039
not

139
00:05:37,759 --> 00:05:44,639
a single single person effort anymore

140
00:05:41,039 --> 00:05:48,560
and just a couple of months ago

141
00:05:44,639 --> 00:05:50,160
um fabian i think it was you that you

142
00:05:48,560 --> 00:05:54,240
invited some people to

143
00:05:50,160 --> 00:05:54,240
start testing the project to find

144
00:05:55,280 --> 00:06:01,919
what's what's okay and what's missing

145
00:05:59,280 --> 00:06:02,719
and to have new points of view and so on

146
00:06:01,919 --> 00:06:04,479
and

147
00:06:02,720 --> 00:06:06,800
he also suggested that today is a good

148
00:06:04,479 --> 00:06:10,000
day to since we are

149
00:06:06,800 --> 00:06:11,120
in a developer environment to announce

150
00:06:10,000 --> 00:06:13,120
that

151
00:06:11,120 --> 00:06:15,039
we can start the public beta so all

152
00:06:13,120 --> 00:06:18,720
feedback is welcome

153
00:06:15,039 --> 00:06:22,880
in particular we are developing online

154
00:06:18,720 --> 00:06:24,639
linux so feedback from windows and mac

155
00:06:22,880 --> 00:06:28,880
os is

156
00:06:24,639 --> 00:06:31,199
more more needed and and so it is

157
00:06:28,880 --> 00:06:32,080
that's uh from the historical point of

158
00:06:31,199 --> 00:06:35,280
view

159
00:06:32,080 --> 00:06:37,520
but in terms of functionality

160
00:06:35,280 --> 00:06:39,198
my personal feeling is that right now is

161
00:06:37,520 --> 00:06:41,198
when the project is starting to come

162
00:06:39,199 --> 00:06:43,199
together in the sense that it's starting

163
00:06:41,199 --> 00:06:46,560
to be really useful

164
00:06:43,199 --> 00:06:49,599
as part of the of the closed beta

165
00:06:46,560 --> 00:06:50,160
we got many contributions of projects

166
00:06:49,599 --> 00:06:52,960
that

167
00:06:50,160 --> 00:06:53,759
of course people in data world know that

168
00:06:52,960 --> 00:06:56,960
are

169
00:06:53,759 --> 00:07:01,039
that exist but now they they are

170
00:06:56,960 --> 00:07:05,198
starting to be accessible through a liar

171
00:07:01,039 --> 00:07:08,479
and also um we have a better picture of

172
00:07:05,199 --> 00:07:11,919
what is missing versus what is done

173
00:07:08,479 --> 00:07:14,080
because uh up to this point um

174
00:07:11,919 --> 00:07:15,120
at some time sometimes i felt like a

175
00:07:14,080 --> 00:07:17,919
programmer

176
00:07:15,120 --> 00:07:18,800
doing a programming a game but not

177
00:07:17,919 --> 00:07:20,400
playing

178
00:07:18,800 --> 00:07:22,000
his own game because it's busy

179
00:07:20,400 --> 00:07:25,039
programming the game

180
00:07:22,000 --> 00:07:28,160
and so i'm doing the things in a liar

181
00:07:25,039 --> 00:07:29,759
and i always use the same features but

182
00:07:28,160 --> 00:07:31,520
i don't have the perspective of other

183
00:07:29,759 --> 00:07:33,919
people and this

184
00:07:31,520 --> 00:07:35,758
internal data and the collaboration with

185
00:07:33,919 --> 00:07:39,359
with adacore has given me

186
00:07:35,759 --> 00:07:42,560
a much better perspective on what's

187
00:07:39,360 --> 00:07:45,360
missing and what can be done so

188
00:07:42,560 --> 00:07:46,000
for the immediate future and well of

189
00:07:45,360 --> 00:07:47,599
course

190
00:07:46,000 --> 00:07:50,479
what can be done you are going to see

191
00:07:47,599 --> 00:07:53,199
firsthand from the demonstrations

192
00:07:50,479 --> 00:07:54,878
and and i will talk just a bit about

193
00:07:53,199 --> 00:07:58,000
some basic capabilities but

194
00:07:54,879 --> 00:08:01,120
um if everything goes to plan i expect

195
00:07:58,000 --> 00:08:02,879
that 2020 is going to be a very big year

196
00:08:01,120 --> 00:08:05,759
for the project because

197
00:08:02,879 --> 00:08:06,000
with this knowledge and and the momentum

198
00:08:05,759 --> 00:08:08,560
we

199
00:08:06,000 --> 00:08:10,560
have gained in this past year i think we

200
00:08:08,560 --> 00:08:13,680
are going to

201
00:08:10,560 --> 00:08:15,120
close the biggest holes in the in the

202
00:08:13,680 --> 00:08:18,400
project

203
00:08:15,120 --> 00:08:21,440
and so some things

204
00:08:18,400 --> 00:08:21,919
can be done but are very inconvenient to

205
00:08:21,440 --> 00:08:24,879
do

206
00:08:21,919 --> 00:08:27,359
right now like the publishing workflow

207
00:08:24,879 --> 00:08:30,479
it's a bit

208
00:08:27,360 --> 00:08:33,760
you can do it but it requires

209
00:08:30,479 --> 00:08:34,399
some knowledge and some well you will

210
00:08:33,760 --> 00:08:37,360
see

211
00:08:34,399 --> 00:08:38,880
and and there are features that we want

212
00:08:37,360 --> 00:08:41,440
to have that are not there like

213
00:08:38,880 --> 00:08:42,479
reproducible builds for example and as i

214
00:08:41,440 --> 00:08:45,200
said

215
00:08:42,479 --> 00:08:46,000
well if we want to also put out the

216
00:08:45,200 --> 00:08:50,480
first

217
00:08:46,000 --> 00:08:52,880
star stable release with binaries

218
00:08:50,480 --> 00:08:54,000
the project is already compiling in the

219
00:08:52,880 --> 00:08:55,439
three platforms

220
00:08:54,000 --> 00:08:58,000
it's going through continuous

221
00:08:55,440 --> 00:09:00,240
integration um

222
00:08:58,000 --> 00:09:01,440
but as i as i said we are using it

223
00:09:00,240 --> 00:09:03,760
mainly in linux

224
00:09:01,440 --> 00:09:04,640
so feedback from the other platforms

225
00:09:03,760 --> 00:09:07,839
will be

226
00:09:04,640 --> 00:09:08,560
very welcome and that's more or less how

227
00:09:07,839 --> 00:09:12,080
the project

228
00:09:08,560 --> 00:09:14,000
is right now um

229
00:09:12,080 --> 00:09:15,440
you are going to see two demos i have

230
00:09:14,000 --> 00:09:18,880
planned to do a

231
00:09:15,440 --> 00:09:20,800
little demonstration but the computer is

232
00:09:18,880 --> 00:09:23,200
offline i'm not going to do it but

233
00:09:20,800 --> 00:09:24,719
the gist of this demonstration was that

234
00:09:23,200 --> 00:09:27,760
even if you are not

235
00:09:24,720 --> 00:09:28,160
an ida developer or you don't want to

236
00:09:27,760 --> 00:09:31,680
use

237
00:09:28,160 --> 00:09:33,760
ada dependencies a liar may serve to

238
00:09:31,680 --> 00:09:37,599
test data software in a simple

239
00:09:33,760 --> 00:09:40,160
simple way by using the get a command

240
00:09:37,600 --> 00:09:41,360
you retrieve all the sources needed to

241
00:09:40,160 --> 00:09:43,279
build the project with all the

242
00:09:41,360 --> 00:09:45,519
dependencies and you can test it

243
00:09:43,279 --> 00:09:47,279
immediately so

244
00:09:45,519 --> 00:09:49,040
i mean that even if you are not

245
00:09:47,279 --> 00:09:51,839
interested into learning

246
00:09:49,040 --> 00:09:52,880
about a liar or digging into a

247
00:09:51,839 --> 00:09:54,959
development this

248
00:09:52,880 --> 00:09:56,560
is a tool this can be done already i

249
00:09:54,959 --> 00:09:57,839
mean

250
00:09:56,560 --> 00:10:00,800
and of course you can search the

251
00:09:57,839 --> 00:10:03,680
projects that are available

252
00:10:00,800 --> 00:10:04,319
we're moving a bit into how the project

253
00:10:03,680 --> 00:10:07,760
is

254
00:10:04,320 --> 00:10:10,240
is done i will talk

255
00:10:07,760 --> 00:10:10,800
about a few internal few internal things

256
00:10:10,240 --> 00:10:14,480
and

257
00:10:10,800 --> 00:10:16,560
and i will finish for starters the

258
00:10:14,480 --> 00:10:18,399
project is in github

259
00:10:16,560 --> 00:10:20,719
there are several repositories that you

260
00:10:18,399 --> 00:10:21,760
can find there all under the umbrella of

261
00:10:20,720 --> 00:10:25,040
the liar project

262
00:10:21,760 --> 00:10:26,319
project and they contain the community

263
00:10:25,040 --> 00:10:28,880
index

264
00:10:26,320 --> 00:10:32,880
the main executable and library and

265
00:10:28,880 --> 00:10:36,640
other supporting projects

266
00:10:32,880 --> 00:10:39,200
and here a note about terminology

267
00:10:36,640 --> 00:10:40,959
in the alar index repository we have the

268
00:10:39,200 --> 00:10:44,640
community index what those

269
00:10:40,959 --> 00:10:46,800
mean the community index is all

270
00:10:44,640 --> 00:10:48,319
composed of open source projects

271
00:10:46,800 --> 00:10:50,800
contributed projects

272
00:10:48,320 --> 00:10:51,519
a layer supports handling several

273
00:10:50,800 --> 00:10:53,439
indexes

274
00:10:51,519 --> 00:10:54,880
if for example you have private indexes

275
00:10:53,440 --> 00:10:56,320
with your private software that you

276
00:10:54,880 --> 00:10:58,800
don't want to publish

277
00:10:56,320 --> 00:11:00,160
or that is not ready for publication yet

278
00:10:58,800 --> 00:11:03,359
or things like that

279
00:11:00,160 --> 00:11:06,640
so this kind is the kind of the official

280
00:11:03,360 --> 00:11:09,360
index from the project then we have

281
00:11:06,640 --> 00:11:11,199
two ada projects that for now live in

282
00:11:09,360 --> 00:11:12,720
the same repository i guess at some

283
00:11:11,200 --> 00:11:13,200
point they will have to split but for

284
00:11:12,720 --> 00:11:15,360
now

285
00:11:13,200 --> 00:11:16,720
we have a library component that could

286
00:11:15,360 --> 00:11:20,000
be used

287
00:11:16,720 --> 00:11:22,240
maybe to create a nicer interface

288
00:11:20,000 --> 00:11:24,880
and then we have the command line tool

289
00:11:22,240 --> 00:11:26,959
that in the spirit of other tools like

290
00:11:24,880 --> 00:11:29,200
git and so on it's a three-letter

291
00:11:26,959 --> 00:11:32,160
command i find myself sometimes mixing

292
00:11:29,200 --> 00:11:36,560
the git analyzer commands already

293
00:11:32,160 --> 00:11:40,319
and well that's a notable terminology

294
00:11:36,560 --> 00:11:41,680
and what kind of package manager is a

295
00:11:40,320 --> 00:11:44,800
liar

296
00:11:41,680 --> 00:11:46,880
of the many possibilities well a liar's

297
00:11:44,800 --> 00:11:48,479
sandbox in the sense that it's it's not

298
00:11:46,880 --> 00:11:50,320
going to touch your system

299
00:11:48,480 --> 00:11:51,839
it will create a folder inside that

300
00:11:50,320 --> 00:11:55,040
folder you have everything you need for

301
00:11:51,839 --> 00:11:57,839
the current project you are working on

302
00:11:55,040 --> 00:11:59,040
is oriented towards the ada language we

303
00:11:57,839 --> 00:12:01,920
are doing it

304
00:11:59,040 --> 00:12:02,399
for the open source data compiler which

305
00:12:01,920 --> 00:12:05,439
is

306
00:12:02,399 --> 00:12:08,639
gnat and so it's not intended to

307
00:12:05,440 --> 00:12:11,040
to manage a platform

308
00:12:08,639 --> 00:12:13,440
or a system but only to give you

309
00:12:11,040 --> 00:12:16,560
development for ada

310
00:12:13,440 --> 00:12:20,000
it works with sources

311
00:12:16,560 --> 00:12:22,719
ada is highly portable so there is

312
00:12:20,000 --> 00:12:25,279
no pressure to distribute binaries

313
00:12:22,720 --> 00:12:26,880
everything is downloaded and compiled

314
00:12:25,279 --> 00:12:28,880
and finally it's a community effort in

315
00:12:26,880 --> 00:12:31,200
the sense that there is no

316
00:12:28,880 --> 00:12:32,160
it's not sanctioned by any official ada

317
00:12:31,200 --> 00:12:34,959
body

318
00:12:32,160 --> 00:12:37,199
in the sense that for example rust cargo

319
00:12:34,959 --> 00:12:38,638
is part of the tooling of the language

320
00:12:37,200 --> 00:12:43,680
officially

321
00:12:38,639 --> 00:12:47,200
so that's where a liar is located

322
00:12:43,680 --> 00:12:49,920
well a liar if you have worked with

323
00:12:47,200 --> 00:12:51,279
package managers it reduces the same

324
00:12:49,920 --> 00:12:55,519
ideas

325
00:12:51,279 --> 00:12:56,880
which is named releases with semantic

326
00:12:55,519 --> 00:13:00,560
versions

327
00:12:56,880 --> 00:13:03,839
and we reuse the term crate

328
00:13:00,560 --> 00:13:05,760
to really refer to uh

329
00:13:03,839 --> 00:13:07,519
several releases from the same project

330
00:13:05,760 --> 00:13:09,600
because the other

331
00:13:07,519 --> 00:13:11,120
possible names are taken in the aid

332
00:13:09,600 --> 00:13:13,839
award for very precise

333
00:13:11,120 --> 00:13:15,519
meanings this was a kind of maybe

334
00:13:13,839 --> 00:13:17,920
controversial decision but

335
00:13:15,519 --> 00:13:19,600
it has a very precise meaning that other

336
00:13:17,920 --> 00:13:23,519
developers know so that's

337
00:13:19,600 --> 00:13:25,680
how it is semantic versioning you

338
00:13:23,519 --> 00:13:27,760
i'm sure you know that is the way to

339
00:13:25,680 --> 00:13:29,040
ensure that you can update your packages

340
00:13:27,760 --> 00:13:30,720
without breaking

341
00:13:29,040 --> 00:13:32,480
the build if everything is properly

342
00:13:30,720 --> 00:13:36,079
packaged so i will not stop

343
00:13:32,480 --> 00:13:39,440
too much here and well here we see

344
00:13:36,079 --> 00:13:42,560
an example of how dependencies are

345
00:13:39,440 --> 00:13:44,959
realized once you retrieve a project

346
00:13:42,560 --> 00:13:46,319
we we can specify that we need two

347
00:13:44,959 --> 00:13:49,040
libraries

348
00:13:46,320 --> 00:13:51,120
and those libraries are solved uh

349
00:13:49,040 --> 00:13:52,000
recursively incorporating their own

350
00:13:51,120 --> 00:13:54,720
dependencies

351
00:13:52,000 --> 00:13:56,240
finally you reach a combination of

352
00:13:54,720 --> 00:13:58,959
dependencies that

353
00:13:56,240 --> 00:14:01,199
allow the build the solver in a layer is

354
00:13:58,959 --> 00:14:04,719
complete so if there is a solution it

355
00:14:01,199 --> 00:14:04,719
should find it and

356
00:14:04,880 --> 00:14:08,240
to conclude here's how it looks on disk

357
00:14:07,680 --> 00:14:10,638
when you

358
00:14:08,240 --> 00:14:11,360
work in a in a project you have your

359
00:14:10,639 --> 00:14:13,600
project

360
00:14:11,360 --> 00:14:14,880
with your files whatever you want and

361
00:14:13,600 --> 00:14:17,920
everything else is

362
00:14:14,880 --> 00:14:18,720
within an alarm folder which is intended

363
00:14:17,920 --> 00:14:20,959
to be put

364
00:14:18,720 --> 00:14:22,399
into the ignore list of your version

365
00:14:20,959 --> 00:14:24,399
control system so you

366
00:14:22,399 --> 00:14:25,600
don't need to know anything about data

367
00:14:24,399 --> 00:14:27,839
internals ally

368
00:14:25,600 --> 00:14:28,880
internals and in there you can find

369
00:14:27,839 --> 00:14:31,040
mainly

370
00:14:28,880 --> 00:14:32,959
the dependencies that are needed to

371
00:14:31,040 --> 00:14:35,920
build your project

372
00:14:32,959 --> 00:14:36,880
and this is the end of my introduction

373
00:14:35,920 --> 00:14:40,399
now i

374
00:14:36,880 --> 00:14:45,839
leave you with fabian

375
00:14:40,399 --> 00:14:45,839
and thank marie

376
00:14:46,079 --> 00:14:52,160
try to turn it off okay

377
00:14:49,199 --> 00:14:54,240
so do you yeah so pearmary will be

378
00:14:52,160 --> 00:14:59,839
typing for me

379
00:14:54,240 --> 00:15:03,680
uh we will be a little bit

380
00:14:59,839 --> 00:15:06,959
sorry let me try to fix that

381
00:15:03,680 --> 00:15:10,079
okay so the first demo is going to show

382
00:15:06,959 --> 00:15:12,160
how great package manager

383
00:15:10,079 --> 00:15:14,800
especially allier is to start

384
00:15:12,160 --> 00:15:17,680
prototyping projects in ada

385
00:15:14,800 --> 00:15:19,279
so there are many libraries available on

386
00:15:17,680 --> 00:15:20,160
the web for either but the fact that

387
00:15:19,279 --> 00:15:22,959
they are all

388
00:15:20,160 --> 00:15:24,480
in a layer makes them very easy to use

389
00:15:22,959 --> 00:15:28,399
and so very easy to create

390
00:15:24,480 --> 00:15:29,920
a new project quickly so the project

391
00:15:28,399 --> 00:15:31,839
that we are going to do

392
00:15:29,920 --> 00:15:33,040
is going to take going to read the

393
00:15:31,839 --> 00:15:36,240
configuration file

394
00:15:33,040 --> 00:15:39,120
in a domain format and generate a pdf

395
00:15:36,240 --> 00:15:40,000
with a square in it and the color of the

396
00:15:39,120 --> 00:15:43,839
square will depend

397
00:15:40,000 --> 00:15:45,519
on the configuration in the thermal file

398
00:15:43,839 --> 00:15:47,040
so first we're going to start by

399
00:15:45,519 --> 00:15:51,120
creating a project so

400
00:15:47,040 --> 00:15:53,040
primary will use the alar init command

401
00:15:51,120 --> 00:15:54,240
specifying bin because it's going to be

402
00:15:53,040 --> 00:15:57,360
an executable

403
00:15:54,240 --> 00:16:00,079
otherwise it would be lib so

404
00:15:57,360 --> 00:16:01,759
okay you can you can create that if you

405
00:16:00,079 --> 00:16:06,319
go

406
00:16:01,759 --> 00:16:06,320
ah yeah demo effect

407
00:16:07,120 --> 00:16:10,639
so you do have so yeah you do have to

408
00:16:09,120 --> 00:16:12,880
right now you have to

409
00:16:10,639 --> 00:16:14,880
compile a layer yourself because we

410
00:16:12,880 --> 00:16:16,240
don't have binary release yet

411
00:16:14,880 --> 00:16:18,880
and of course you have to add it in your

412
00:16:16,240 --> 00:16:19,600
path so the project is created now so if

413
00:16:18,880 --> 00:16:23,040
you go to the

414
00:16:19,600 --> 00:16:26,720
to the my project directory

415
00:16:23,040 --> 00:16:30,480
so allia is already creating some

416
00:16:26,720 --> 00:16:33,519
base files for us so we can already

417
00:16:30,480 --> 00:16:36,399
do a layer build to compile it

418
00:16:33,519 --> 00:16:37,680
that should that should work uh so now i

419
00:16:36,399 --> 00:16:40,000
want to so i want to

420
00:16:37,680 --> 00:16:40,719
have a terminal file as input so i'm

421
00:16:40,000 --> 00:16:42,639
going to search

422
00:16:40,720 --> 00:16:44,720
in a layer to find if there's something

423
00:16:42,639 --> 00:16:48,839
available so a layer

424
00:16:44,720 --> 00:16:51,759
list so here we we use a local index

425
00:16:48,839 --> 00:16:54,480
to not rely on the network for this demo

426
00:16:51,759 --> 00:16:56,959
so there's only what we need

427
00:16:54,480 --> 00:16:58,800
actually we're missing a few characters

428
00:16:56,959 --> 00:17:02,079
on the left but there's there's an

429
00:16:58,800 --> 00:17:05,599
adatomal project here so that's

430
00:17:02,079 --> 00:17:08,000
exactly what i need so

431
00:17:05,599 --> 00:17:10,079
pierre marie will head oh what's going

432
00:17:08,000 --> 00:17:10,079
on

433
00:17:12,799 --> 00:17:19,439
well i think it's gonna be okay uh so

434
00:17:16,240 --> 00:17:21,760
yes right perfect so now we

435
00:17:19,439 --> 00:17:22,959
want to use the adatomal parser so we

436
00:17:21,760 --> 00:17:25,039
are going to specify that

437
00:17:22,959 --> 00:17:27,600
it's a dependency of our project with

438
00:17:25,039 --> 00:17:31,200
the uh the width command so a layer with

439
00:17:27,599 --> 00:17:33,918
adatomer and so that's it

440
00:17:31,200 --> 00:17:35,280
uh so here everything is local but

441
00:17:33,919 --> 00:17:36,640
otherwise you would download

442
00:17:35,280 --> 00:17:39,039
the the sources from the from the

443
00:17:36,640 --> 00:17:39,760
network but here everything is local so

444
00:17:39,039 --> 00:17:43,520
now we can

445
00:17:39,760 --> 00:17:43,520
open the the project file

446
00:17:43,840 --> 00:17:49,520
and add the dependency in the project

447
00:17:46,799 --> 00:17:52,799
file so with

448
00:17:49,520 --> 00:17:55,918
a data tunnel that's it

449
00:17:52,799 --> 00:17:56,480
okay and now you can close and recompile

450
00:17:55,919 --> 00:17:58,840
and

451
00:17:56,480 --> 00:18:00,240
now we we can compile with the

452
00:17:58,840 --> 00:18:02,799
dependency

453
00:18:00,240 --> 00:18:04,640
so a layer will also compile the thermal

454
00:18:02,799 --> 00:18:06,799
library

455
00:18:04,640 --> 00:18:09,120
and so now we can start working in our

456
00:18:06,799 --> 00:18:12,400
source file

457
00:18:09,120 --> 00:18:14,639
and first we will with the the the

458
00:18:12,400 --> 00:18:17,280
add-on package

459
00:18:14,640 --> 00:18:18,960
uh maybe primarily you can start copy

460
00:18:17,280 --> 00:18:21,600
past from

461
00:18:18,960 --> 00:18:24,270
the from the thing we prepared that

462
00:18:21,600 --> 00:18:25,840
would be easier

463
00:18:24,270 --> 00:18:28,000
[Music]

464
00:18:25,840 --> 00:18:28,959
so yeah we're gonna weave the thermal

465
00:18:28,000 --> 00:18:31,760
file

466
00:18:28,960 --> 00:18:34,080
and also add a textile to have some text

467
00:18:31,760 --> 00:18:34,080
output

468
00:18:35,440 --> 00:18:42,480
okay we're going to create a result

469
00:18:40,080 --> 00:18:43,280
variable actually it's a constant uh

470
00:18:42,480 --> 00:18:45,840
that is

471
00:18:43,280 --> 00:18:46,480
this is the result of opening a thermal

472
00:18:45,840 --> 00:18:50,000
file

473
00:18:46,480 --> 00:18:50,960
so that's the adatomal api and then yeah

474
00:18:50,000 --> 00:18:53,360
the first

475
00:18:50,960 --> 00:18:54,320
the first if statement we're gonna check

476
00:18:53,360 --> 00:18:57,520
if we

477
00:18:54,320 --> 00:19:00,960
we could open or not the

478
00:18:57,520 --> 00:19:03,918
the thermal file so yeah

479
00:19:00,960 --> 00:19:05,280
okay so now we can go back to the to the

480
00:19:03,919 --> 00:19:08,720
command line and you can

481
00:19:05,280 --> 00:19:10,799
compile the the project okay everything

482
00:19:08,720 --> 00:19:14,240
work fine and if you do a layer

483
00:19:10,799 --> 00:19:15,840
run this will uh actually execute

484
00:19:14,240 --> 00:19:18,480
our program and of course we don't have

485
00:19:15,840 --> 00:19:21,840
any thermal config file so we see the

486
00:19:18,480 --> 00:19:22,840
the error receive here so now you can

487
00:19:21,840 --> 00:19:25,760
open

488
00:19:22,840 --> 00:19:26,480
config.tamul file create a config.tml

489
00:19:25,760 --> 00:19:29,200
file

490
00:19:26,480 --> 00:19:31,039
and we are going to put some parameters

491
00:19:29,200 --> 00:19:34,799
in it so we are going to set

492
00:19:31,039 --> 00:19:39,480
rgb values in floating point so

493
00:19:34,799 --> 00:19:42,639
for instance r just r equals

494
00:19:39,480 --> 00:19:46,160
0.5 and g

495
00:19:42,640 --> 00:19:48,799
equals 0 0 and

496
00:19:46,160 --> 00:19:50,320
b equals 0 0 for instance so that's our

497
00:19:48,799 --> 00:19:53,039
thermal configuration

498
00:19:50,320 --> 00:19:55,280
so you can close and if you run again

499
00:19:53,039 --> 00:19:58,799
this time we should be able to

500
00:19:55,280 --> 00:20:01,678
load the tunnel so now we have

501
00:19:58,799 --> 00:20:03,520
the ability to load a configuration very

502
00:20:01,679 --> 00:20:05,760
quickly and now we want to have the

503
00:20:03,520 --> 00:20:07,840
possibility to export to a pdf

504
00:20:05,760 --> 00:20:09,360
so we are going to look in the uh in the

505
00:20:07,840 --> 00:20:12,240
list of projects that we have

506
00:20:09,360 --> 00:20:14,080
in our year and we see that we that's

507
00:20:12,240 --> 00:20:16,960
very nice

508
00:20:14,080 --> 00:20:18,080
thank you got here we have a project to

509
00:20:16,960 --> 00:20:21,120
generate pdfs

510
00:20:18,080 --> 00:20:23,760
so same procedure a layer with

511
00:20:21,120 --> 00:20:23,760
apdf

512
00:20:24,159 --> 00:20:29,200
so now it's a dependency we can open yet

513
00:20:26,799 --> 00:20:32,340
again the the project file

514
00:20:29,200 --> 00:20:33,679
to add this in our project

515
00:20:32,340 --> 00:20:35,600
[Music]

516
00:20:33,679 --> 00:20:38,240
no i don't think the name is it's the

517
00:20:35,600 --> 00:20:42,799
same actually you have to look on the

518
00:20:38,240 --> 00:20:42,799
because uh pdf out i think

519
00:20:44,559 --> 00:20:49,360
all right yeah pdf aussie audit

520
00:20:49,760 --> 00:20:57,280
so you can remove a pdf okay

521
00:20:53,120 --> 00:20:58,559
nice now with the go back to the to the

522
00:20:57,280 --> 00:21:03,360
source file

523
00:20:58,559 --> 00:21:06,399
we can copy paste the value so here

524
00:21:03,360 --> 00:21:08,320
we are reading so from from the

525
00:21:06,400 --> 00:21:09,679
from the thermal result we are going to

526
00:21:08,320 --> 00:21:12,960
get the r

527
00:21:09,679 --> 00:21:16,159
g and b value and convert to pdf

528
00:21:12,960 --> 00:21:18,880
output real types

529
00:21:16,159 --> 00:21:20,320
so this is reading the the configuration

530
00:21:18,880 --> 00:21:23,600
from the

531
00:21:20,320 --> 00:21:26,879
from the thermal file yeah

532
00:21:23,600 --> 00:21:30,480
till the end and then we open

533
00:21:26,880 --> 00:21:33,440
uh yeah

534
00:21:30,480 --> 00:21:34,480
we create a pdf uh we set the color from

535
00:21:33,440 --> 00:21:37,039
the configuration

536
00:21:34,480 --> 00:21:38,080
and we draw a rectangle and we close the

537
00:21:37,039 --> 00:21:41,120
pdf

538
00:21:38,080 --> 00:21:43,439
so if you save and do

539
00:21:41,120 --> 00:21:45,280
a layer run actually because alairan

540
00:21:43,440 --> 00:21:48,400
will also try to build

541
00:21:45,280 --> 00:21:49,280
before and hopefully this is going to

542
00:21:48,400 --> 00:21:52,640
work and if you

543
00:21:49,280 --> 00:21:56,480
open the pdf we should have

544
00:21:52,640 --> 00:21:56,480
a somewhat red

545
00:21:56,840 --> 00:22:00,639
square uh

546
00:21:58,720 --> 00:22:02,159
so that's it for the demos just to show

547
00:22:00,640 --> 00:22:04,080
you how uh

548
00:22:02,159 --> 00:22:06,240
quickly we can prototype stuff with our

549
00:22:04,080 --> 00:22:08,080
ir that's otherwise it would

550
00:22:06,240 --> 00:22:10,240
would have been possible before but you

551
00:22:08,080 --> 00:22:11,600
would have to search on github and

552
00:22:10,240 --> 00:22:13,679
download things and you don't know how

553
00:22:11,600 --> 00:22:17,520
to install them etc etc

554
00:22:13,679 --> 00:22:21,120
with this it's extremely quick to do so

555
00:22:17,520 --> 00:22:23,760
so now to pr marie for

556
00:22:21,120 --> 00:22:25,520
now that you have benefited from the

557
00:22:23,760 --> 00:22:26,240
contribution of the community how you

558
00:22:25,520 --> 00:22:40,240
can

559
00:22:26,240 --> 00:22:43,200
now contribute back

560
00:22:40,240 --> 00:22:44,720
okay thank you fabian so yes we have

561
00:22:43,200 --> 00:22:47,679
this great project

562
00:22:44,720 --> 00:22:49,200
and now we want to make it available for

563
00:22:47,679 --> 00:22:52,559
the outer world

564
00:22:49,200 --> 00:22:55,200
so there are several steps to do it so

565
00:22:52,559 --> 00:22:56,480
i won't do it here because i'm offline

566
00:22:55,200 --> 00:22:58,640
but

567
00:22:56,480 --> 00:23:00,159
the step is to first clone the git

568
00:22:58,640 --> 00:23:03,440
repository that contains

569
00:23:00,159 --> 00:23:06,720
every catalogue of every

570
00:23:03,440 --> 00:23:09,840
ada project registered in a layer

571
00:23:06,720 --> 00:23:12,960
then you add this uh index you make

572
00:23:09,840 --> 00:23:14,799
uh or it should be should be a liar uh a

573
00:23:12,960 --> 00:23:18,400
lli here

574
00:23:14,799 --> 00:23:21,440
three-letter acronyms anyway uh

575
00:23:18,400 --> 00:23:22,880
you make a liar aware of this index that

576
00:23:21,440 --> 00:23:24,960
you have cloned

577
00:23:22,880 --> 00:23:26,640
and then you have to so write some

578
00:23:24,960 --> 00:23:27,919
configuration file to describe

579
00:23:26,640 --> 00:23:30,080
the project that you want to make

580
00:23:27,919 --> 00:23:33,360
available to uh the author world

581
00:23:30,080 --> 00:23:35,600
so this uh this file has

582
00:23:33,360 --> 00:23:38,320
is so it's a it's a thermal thermal

583
00:23:35,600 --> 00:23:41,039
filtermal is a

584
00:23:38,320 --> 00:23:41,520
it's uh it's a it's a syntax that looks

585
00:23:41,039 --> 00:23:44,400
like

586
00:23:41,520 --> 00:23:45,440
any files for those who who know it and

587
00:23:44,400 --> 00:23:48,640
it's very simple

588
00:23:45,440 --> 00:23:50,799
but most importantly so what's what data

589
00:23:48,640 --> 00:23:53,440
you have to put in the in the in the

590
00:23:50,799 --> 00:23:55,600
file it's described in a

591
00:23:53,440 --> 00:23:56,720
in a in a document that describes all

592
00:23:55,600 --> 00:24:00,320
your what you

593
00:23:56,720 --> 00:24:03,520
what you need to to put there and

594
00:24:00,320 --> 00:24:06,080
so yeah so

595
00:24:03,520 --> 00:24:07,918
we'll do this in a moment but just for

596
00:24:06,080 --> 00:24:09,918
the

597
00:24:07,919 --> 00:24:11,440
what we have to do so it's we want to

598
00:24:09,919 --> 00:24:12,880
put the name of

599
00:24:11,440 --> 00:24:14,720
the project that we want to contribute

600
00:24:12,880 --> 00:24:18,320
to uh to contribute

601
00:24:14,720 --> 00:24:18,880
uh some kind of text uh purpose text to

602
00:24:18,320 --> 00:24:20,879
uh to

603
00:24:18,880 --> 00:24:22,720
describe what the project is about we

604
00:24:20,880 --> 00:24:25,360
can put a website

605
00:24:22,720 --> 00:24:25,760
we can give a list of authors we have

606
00:24:25,360 --> 00:24:27,678
also

607
00:24:25,760 --> 00:24:29,039
a list of what we call maintainers so

608
00:24:27,679 --> 00:24:32,159
it's the people that

609
00:24:29,039 --> 00:24:34,640
so you when you write tamil file in in

610
00:24:32,159 --> 00:24:36,159
layers thermal files in a layer it's uh

611
00:24:34,640 --> 00:24:38,640
you are a maintainer you have

612
00:24:36,159 --> 00:24:40,240
you are the person not necessarily that

613
00:24:38,640 --> 00:24:41,840
wrote the project that but

614
00:24:40,240 --> 00:24:43,760
the person who makes this project

615
00:24:41,840 --> 00:24:46,080
available to uh to the other world you

616
00:24:43,760 --> 00:24:49,600
are the maintainer

617
00:24:46,080 --> 00:24:52,158
and yes and really specific so

618
00:24:49,600 --> 00:24:53,039
generally uh software evolves you don't

619
00:24:52,159 --> 00:24:55,679
want to

620
00:24:53,039 --> 00:24:56,400
so you when you publish a project it's

621
00:24:55,679 --> 00:24:58,320
the first

622
00:24:56,400 --> 00:25:00,080
version but you want sometimes to

623
00:24:58,320 --> 00:25:03,200
publish other versions

624
00:25:00,080 --> 00:25:05,199
updates and so in

625
00:25:03,200 --> 00:25:06,880
in the index you have one file that

626
00:25:05,200 --> 00:25:10,320
describes all the

627
00:25:06,880 --> 00:25:10,880
the various releases and so it's time to

628
00:25:10,320 --> 00:25:14,559
uh

629
00:25:10,880 --> 00:25:17,840
to do the demo okay so

630
00:25:14,559 --> 00:25:19,200
as i said i want i want to do the uh the

631
00:25:17,840 --> 00:25:22,000
regular clone because i don't have

632
00:25:19,200 --> 00:25:26,840
internet here but

633
00:25:22,000 --> 00:25:30,240
uh okay so we have this nice project

634
00:25:26,840 --> 00:25:34,480
and actually the index

635
00:25:30,240 --> 00:25:37,600
effect version of the index is here so

636
00:25:34,480 --> 00:25:41,760
what does the index looks like

637
00:25:37,600 --> 00:25:42,000
more like this so html file describes

638
00:25:41,760 --> 00:25:45,120
one

639
00:25:42,000 --> 00:25:47,360
project that is made available uh

640
00:25:45,120 --> 00:25:48,719
you have this this file that is a kind

641
00:25:47,360 --> 00:25:50,879
of manifest

642
00:25:48,720 --> 00:25:52,640
and here well this is not what you

643
00:25:50,880 --> 00:25:56,480
should have usually i mean

644
00:25:52,640 --> 00:25:58,080
this these two archives are the sources

645
00:25:56,480 --> 00:25:59,520
of the project we want to contribute

646
00:25:58,080 --> 00:26:01,600
you are not supposed to put them in the

647
00:25:59,520 --> 00:26:04,320
index in the index you put

648
00:26:01,600 --> 00:26:05,360
uh you say oh okay this uh this source

649
00:26:04,320 --> 00:26:08,320
package for

650
00:26:05,360 --> 00:26:10,320
so for the release one of my project is

651
00:26:08,320 --> 00:26:12,158
we'll download it on github on

652
00:26:10,320 --> 00:26:14,000
from somewhere else but here we put

653
00:26:12,159 --> 00:26:15,520
there here just because

654
00:26:14,000 --> 00:26:17,679
of the demo effect we don't want to rely

655
00:26:15,520 --> 00:26:19,200
on the internet on being able to reach

656
00:26:17,679 --> 00:26:21,840
the internet

657
00:26:19,200 --> 00:26:23,120
all right so i don't know the format the

658
00:26:21,840 --> 00:26:26,480
format by heart

659
00:26:23,120 --> 00:26:29,918
and i think nobody should bother

660
00:26:26,480 --> 00:26:32,559
actually learning it so i just take

661
00:26:29,919 --> 00:26:34,240
another something else as an example and

662
00:26:32,559 --> 00:26:37,440
write my own

663
00:26:34,240 --> 00:26:40,000
so yes first of all

664
00:26:37,440 --> 00:26:43,760
so my project is called my project so

665
00:26:40,000 --> 00:26:43,760
i'll create a directory to put

666
00:26:49,600 --> 00:26:53,520
all right so i'm creating this file to

667
00:26:52,799 --> 00:26:56,799
describe

668
00:26:53,520 --> 00:27:00,559
my project so first of all

669
00:26:56,799 --> 00:27:01,039
i have to put some general information

670
00:27:00,559 --> 00:27:07,840
about

671
00:27:01,039 --> 00:27:07,840
the project so i can put a description

672
00:27:10,960 --> 00:27:13,919
here we are so

673
00:27:14,240 --> 00:27:21,120
who wrote this library well it's fabio

674
00:27:18,000 --> 00:27:23,679
thank you you are the author on the

675
00:27:21,120 --> 00:27:25,678
other hand i am the maintainer so

676
00:27:23,679 --> 00:27:27,919
because i'm the one watching the thermal

677
00:27:25,679 --> 00:27:27,919
file

678
00:27:33,200 --> 00:27:41,600
and something important

679
00:27:36,559 --> 00:27:44,639
it's the logins because the um

680
00:27:41,600 --> 00:27:46,320
so this is my my login on github

681
00:27:44,640 --> 00:27:47,760
they're contributing to the community

682
00:27:46,320 --> 00:27:51,120
community index

683
00:27:47,760 --> 00:27:54,799
on github is special we are

684
00:27:51,120 --> 00:27:56,799
making approvals so that when you write

685
00:27:54,799 --> 00:27:58,240
when you contribute a project you are

686
00:27:56,799 --> 00:28:01,840
the only one

687
00:27:58,240 --> 00:28:04,720
able to modify it in the future

688
00:28:01,840 --> 00:28:06,799
so putting my login here make sure that

689
00:28:04,720 --> 00:28:08,880
future contributions to this file

690
00:28:06,799 --> 00:28:10,158
will be uh only i will be able to do

691
00:28:08,880 --> 00:28:13,200
them

692
00:28:10,159 --> 00:28:16,000
all right so now i give

693
00:28:13,200 --> 00:28:16,720
the list of project files that are part

694
00:28:16,000 --> 00:28:20,799
of this

695
00:28:16,720 --> 00:28:20,799
of my project so here it's simple

696
00:28:23,840 --> 00:28:30,240
all right license i don't think it's

697
00:28:28,240 --> 00:28:32,320
it's optional okay because we haven't

698
00:28:30,240 --> 00:28:35,840
chosen the license for your project so

699
00:28:32,320 --> 00:28:40,720
no no light sense all right

700
00:28:35,840 --> 00:28:43,520
and then so this is the first release

701
00:28:40,720 --> 00:28:44,520
of this magnificent project so this is

702
00:28:43,520 --> 00:28:49,679
release

703
00:28:44,520 --> 00:28:49,679
0.1 and oh

704
00:28:51,360 --> 00:28:58,639
so yes i need to create a source package

705
00:28:55,120 --> 00:29:01,039
so that a layer can pull the

706
00:28:58,640 --> 00:29:03,520
get the sources from somewhere so let's

707
00:29:01,039 --> 00:29:08,158
create a source package

708
00:29:03,520 --> 00:29:10,840
i'll be right back so my project is

709
00:29:08,159 --> 00:29:12,799
inside my project folder so let's do

710
00:29:10,840 --> 00:29:15,120
this

711
00:29:12,799 --> 00:29:15,120
ah

712
00:29:20,480 --> 00:29:25,520
oh i should have written if you want to

713
00:29:23,200 --> 00:29:29,200
do things right

714
00:29:25,520 --> 00:29:29,200
okay so we have a source package

715
00:29:29,360 --> 00:29:33,439
actually i should have sorry about this

716
00:29:33,840 --> 00:29:37,520
i should have removed the a layer

717
00:29:36,799 --> 00:29:39,200
directory

718
00:29:37,520 --> 00:29:40,960
in it because it's not supposed to be

719
00:29:39,200 --> 00:29:42,399
part of the sources

720
00:29:40,960 --> 00:29:44,399
all right so i will create my source

721
00:29:42,399 --> 00:29:47,760
package

722
00:29:44,399 --> 00:29:49,918
and then moving it to the index

723
00:29:47,760 --> 00:29:52,000
again you should your this specific part

724
00:29:49,919 --> 00:29:55,039
you're not supposed to do it

725
00:29:52,000 --> 00:29:55,520
uh you just publish a source archive

726
00:29:55,039 --> 00:29:57,919
somewhere

727
00:29:55,520 --> 00:29:59,440
on the internet it's just fine but here

728
00:29:57,919 --> 00:30:02,320
we don't have internet

729
00:29:59,440 --> 00:30:05,039
with github it's really easy to push an

730
00:30:02,320 --> 00:30:09,039
archive on the repositories

731
00:30:05,039 --> 00:30:11,520
all right i don't want to have to make

732
00:30:09,039 --> 00:30:11,520
typos

733
00:30:11,840 --> 00:30:16,240
alright so back to my description

734
00:30:19,200 --> 00:30:24,159
so so it's a local file

735
00:30:27,520 --> 00:30:36,080
there i am all right so now

736
00:30:31,679 --> 00:30:39,520
my my software is

737
00:30:36,080 --> 00:30:39,840
registered in in the index let's try to

738
00:30:39,520 --> 00:30:42,960
uh

739
00:30:39,840 --> 00:30:42,959
to actually use it

740
00:30:45,120 --> 00:30:50,879
and oh the maintenance should be an

741
00:30:48,720 --> 00:30:53,039
email okay

742
00:30:50,880 --> 00:30:55,520
so there's a lot of checks on what needs

743
00:30:53,039 --> 00:30:59,039
to be on the required field etc so don't

744
00:30:55,520 --> 00:31:02,158
worry too much we will check before we

745
00:30:59,039 --> 00:31:04,559
add your your thermal file in the index

746
00:31:02,159 --> 00:31:06,080
and yes something important so i gave

747
00:31:04,559 --> 00:31:08,639
the uh a source archive

748
00:31:06,080 --> 00:31:10,559
but a layer wants to he wants you to put

749
00:31:08,640 --> 00:31:14,720
some uh

750
00:31:10,559 --> 00:31:16,158
checksum integrity so that

751
00:31:14,720 --> 00:31:18,880
[Music]

752
00:31:16,159 --> 00:31:20,480
so that when it downloads the source it

753
00:31:18,880 --> 00:31:21,120
needs to be sure that it's actually the

754
00:31:20,480 --> 00:31:23,600
source

755
00:31:21,120 --> 00:31:24,399
the exact source that was intended when

756
00:31:23,600 --> 00:31:27,039
the uh

757
00:31:24,399 --> 00:31:28,320
when the project was registered it's a

758
00:31:27,039 --> 00:31:31,760
security check

759
00:31:28,320 --> 00:31:31,760
so we have to compute

760
00:31:32,840 --> 00:31:40,399
512 some so let's do this

761
00:31:37,360 --> 00:31:40,399
format source archive

762
00:31:43,279 --> 00:31:50,240
where is it

763
00:31:46,960 --> 00:32:01,840
okay so this is the checksum

764
00:31:50,240 --> 00:32:01,840
it's very secure

765
00:32:03,039 --> 00:32:09,760
okay so now i've added

766
00:32:06,240 --> 00:32:09,760
the sun so

767
00:32:11,519 --> 00:32:16,559
it's great allow layer i know it's not

768
00:32:14,159 --> 00:32:16,559
this one

769
00:32:16,640 --> 00:32:23,600
yeah this one so

770
00:32:20,159 --> 00:32:26,159
i have the sources and uh and some

771
00:32:23,600 --> 00:32:29,840
some sources now i should be able to

772
00:32:26,159 --> 00:32:32,799
build it

773
00:32:29,840 --> 00:32:33,678
but no no i forgot an important step

774
00:32:32,799 --> 00:32:35,360
which is

775
00:32:33,679 --> 00:32:36,960
telling a lawyer that might put my

776
00:32:35,360 --> 00:32:39,678
project depends on

777
00:32:36,960 --> 00:32:41,600
other projects so it's it's important so

778
00:32:39,679 --> 00:32:44,399
that a layer actually when it gets

779
00:32:41,600 --> 00:32:44,719
my project it also downloads a data

780
00:32:44,399 --> 00:32:47,918
model

781
00:32:44,720 --> 00:32:50,960
the idatamo project and the apdf1

782
00:32:47,919 --> 00:32:54,799
so actually

783
00:32:50,960 --> 00:32:58,399
it was wrong so let's fix it

784
00:32:54,799 --> 00:33:01,039
let's fix this here so how do we declare

785
00:32:58,399 --> 00:33:05,518
dependencies well it's simple we say

786
00:33:01,039 --> 00:33:09,039
something like this without typos

787
00:33:05,519 --> 00:33:11,039
and we say okay so the the release 0.1

788
00:33:09,039 --> 00:33:14,559
of my project depends on

789
00:33:11,039 --> 00:33:17,919
so it's a data model

790
00:33:14,559 --> 00:33:20,559
and we depend on so here we

791
00:33:17,919 --> 00:33:21,200
depend on version one and this is the

792
00:33:20,559 --> 00:33:24,399
kind of

793
00:33:21,200 --> 00:33:26,880
special syntax to give constraints about

794
00:33:24,399 --> 00:33:28,000
because generally you can depend on

795
00:33:26,880 --> 00:33:31,039
version

796
00:33:28,000 --> 00:33:33,039
version 1.0 of a project but this

797
00:33:31,039 --> 00:33:35,679
is also supposed to work with version

798
00:33:33,039 --> 00:33:36,799
1.1 etc you don't want to list every

799
00:33:35,679 --> 00:33:40,240
release possible

800
00:33:36,799 --> 00:33:43,120
so there is a special dsl to express

801
00:33:40,240 --> 00:33:44,559
the dependencies i won't cover it here

802
00:33:43,120 --> 00:33:47,678
and so a pdf

803
00:33:44,559 --> 00:33:48,559
if i remember correctly it's 5.0.0 i'm

804
00:33:47,679 --> 00:33:54,000
not sure

805
00:33:48,559 --> 00:33:54,000
let's try oh but wait i can ask a lawyer

806
00:33:55,279 --> 00:33:59,039
no so i meant yeah show

807
00:34:00,159 --> 00:34:04,320
a pdf it's version currently

808
00:34:05,600 --> 00:34:13,359
okay i can read it here but yeah five

809
00:34:09,119 --> 00:34:15,919
oh yes great so it's five not uh great

810
00:34:13,359 --> 00:34:17,520
okay so this is my new index now let's

811
00:34:15,918 --> 00:34:20,960
try again

812
00:34:17,520 --> 00:34:23,359
to get the project and build it

813
00:34:20,960 --> 00:34:26,159
so i can use i don't remember if it's

814
00:34:23,359 --> 00:34:30,159
build or compile

815
00:34:26,159 --> 00:34:34,879
okay thanks and what's wrong

816
00:34:30,159 --> 00:34:38,560
could not resolve it

817
00:34:34,879 --> 00:34:39,839
ah i it's no it's not supposed that

818
00:34:38,560 --> 00:34:42,639
there is no

819
00:34:39,839 --> 00:34:43,359
i ah yes right a diatomal is not it's

820
00:34:42,639 --> 00:34:49,839
not version

821
00:34:43,359 --> 00:34:49,839
zero uh it's not 1.00 sorry about this

822
00:34:52,320 --> 00:34:57,200
yeah so it's uh now the difference

823
00:34:55,359 --> 00:34:58,799
now the dependencies have been currently

824
00:34:57,200 --> 00:35:03,839
set up alar is

825
00:34:58,800 --> 00:35:03,839
able to properly set up the project

826
00:35:05,200 --> 00:35:14,720
and now yes

827
00:35:10,320 --> 00:35:14,720
it worked we have our output the pdf

828
00:35:14,800 --> 00:35:19,200
okay so small and simple there are

829
00:35:17,280 --> 00:35:21,839
several gotchas and we are

830
00:35:19,200 --> 00:35:23,359
running out details but uh this is a

831
00:35:21,839 --> 00:35:25,200
quick that was a quick demo of how to

832
00:35:23,359 --> 00:35:32,160
contribute a project to the

833
00:35:25,200 --> 00:35:32,160
outer world you want to yeah yes

834
00:35:32,960 --> 00:35:36,000
thank you

835
00:35:37,839 --> 00:35:41,520
so as you can see the process is a bit

836
00:35:39,520 --> 00:35:42,000
uh tedious to to contribute and that's

837
00:35:41,520 --> 00:35:43,680
why

838
00:35:42,000 --> 00:35:45,760
as errol said that's one of the things

839
00:35:43,680 --> 00:35:48,640
we want to improve in 2020

840
00:35:45,760 --> 00:35:50,000
make it make this process easier and

841
00:35:48,640 --> 00:35:53,440
quicker

842
00:35:50,000 --> 00:35:54,320
uh so to end the presentation i'm going

843
00:35:53,440 --> 00:35:57,520
to show you

844
00:35:54,320 --> 00:35:59,040
the the prototype or

845
00:35:57,520 --> 00:36:01,280
more or less proof of concept website

846
00:35:59,040 --> 00:36:05,599
that we have on so it's at

847
00:36:01,280 --> 00:36:07,200
a layer.ada.dev so this is the main page

848
00:36:05,599 --> 00:36:09,520
it's actually a copy of the readme from

849
00:36:07,200 --> 00:36:11,680
the repository so you have instructions

850
00:36:09,520 --> 00:36:14,320
to get started how to compile a layer

851
00:36:11,680 --> 00:36:15,919
and how to start using it

852
00:36:14,320 --> 00:36:18,079
then you have two main pages you have

853
00:36:15,920 --> 00:36:19,520
the crates which is the list of crates

854
00:36:18,079 --> 00:36:22,720
available in the system and you

855
00:36:19,520 --> 00:36:24,400
also have a search

856
00:36:22,720 --> 00:36:26,799
so if you if we look at the crate so

857
00:36:24,400 --> 00:36:29,200
here you have all the

858
00:36:26,800 --> 00:36:31,440
the the the projects that are actually

859
00:36:29,200 --> 00:36:33,200
in a layer available today

860
00:36:31,440 --> 00:36:36,160
uh so we have the list here and then we

861
00:36:33,200 --> 00:36:38,560
are going to open one of them

862
00:36:36,160 --> 00:36:39,279
and so you have at the top you have some

863
00:36:38,560 --> 00:36:40,960
the

864
00:36:39,280 --> 00:36:43,359
actually the information that you saw

865
00:36:40,960 --> 00:36:44,320
pierre marie enter in the tamil file you

866
00:36:43,359 --> 00:36:47,200
can find it

867
00:36:44,320 --> 00:36:48,160
uh here so we have the name we have the

868
00:36:47,200 --> 00:36:51,279
short description

869
00:36:48,160 --> 00:36:53,359
website etc and then you can also

870
00:36:51,280 --> 00:36:55,520
put a long description with a markdown

871
00:36:53,359 --> 00:36:57,839
format to provide information to your

872
00:36:55,520 --> 00:36:59,680
users etc

873
00:36:57,839 --> 00:37:01,119
so this one has no dependency but the

874
00:36:59,680 --> 00:37:03,520
dependencies are also

875
00:37:01,119 --> 00:37:05,599
also listed here and you can click to

876
00:37:03,520 --> 00:37:08,079
navigate the dependency

877
00:37:05,599 --> 00:37:09,599
you can also have tags uh to be able to

878
00:37:08,079 --> 00:37:12,560
search for other projects

879
00:37:09,599 --> 00:37:13,760
related to this one and so that's going

880
00:37:12,560 --> 00:37:15,599
to be the last one

881
00:37:13,760 --> 00:37:17,520
actually it's it's when you click on a

882
00:37:15,599 --> 00:37:20,240
tag it's like searching in the the

883
00:37:17,520 --> 00:37:22,800
search box and you can see you can

884
00:37:20,240 --> 00:37:25,200
see the for instance here i typed game

885
00:37:22,800 --> 00:37:29,119
and i see all the game related

886
00:37:25,200 --> 00:37:32,879
crates available and so when you

887
00:37:29,119 --> 00:37:34,880
contribute a crate to the index it will

888
00:37:32,880 --> 00:37:36,000
automatically everyday regenerate the

889
00:37:34,880 --> 00:37:39,440
website to have your

890
00:37:36,000 --> 00:37:41,359
your crate available uh and so i think

891
00:37:39,440 --> 00:37:43,599
that's it for our presentation

892
00:37:41,359 --> 00:37:44,640
uh we are really excited about alar

893
00:37:43,599 --> 00:37:46,640
because

894
00:37:44,640 --> 00:37:47,680
we think it's a game changer for the

895
00:37:46,640 --> 00:37:50,319
hidden ecosystem

896
00:37:47,680 --> 00:37:52,078
and hopefully will make it a lot easier

897
00:37:50,320 --> 00:37:54,880
for people to collaborate

898
00:37:52,079 --> 00:37:55,920
with ada and so as alejandro said now we

899
00:37:54,880 --> 00:37:59,040
are

900
00:37:55,920 --> 00:38:00,720
in an open beta period so we expect a

901
00:37:59,040 --> 00:38:03,440
lot of feedback from

902
00:38:00,720 --> 00:38:04,399
from you all and of course new projects

903
00:38:03,440 --> 00:38:07,920
to put in the

904
00:38:04,400 --> 00:38:08,640
in the index thank you maybe i should

905
00:38:07,920 --> 00:38:11,760
add

906
00:38:08,640 --> 00:38:14,720
yes if you know if you want to uh

907
00:38:11,760 --> 00:38:15,119
sorry so if you want to uh to check it

908
00:38:14,720 --> 00:38:18,480
out

909
00:38:15,119 --> 00:38:21,760
go to the uh to the alligator projects

910
00:38:18,480 --> 00:38:23,119
from the aliyah project uh projects on

911
00:38:21,760 --> 00:38:25,440
github

912
00:38:23,119 --> 00:38:27,200
and so if you if you have issues you can

913
00:38:25,440 --> 00:38:31,359
open issues directly on github

914
00:38:27,200 --> 00:38:32,319
and uh yeah that's the that's the right

915
00:38:31,359 --> 00:38:34,400
way to give feedback

916
00:38:32,320 --> 00:38:35,520
is to go to this repository and open

917
00:38:34,400 --> 00:38:36,880
issues and

918
00:38:35,520 --> 00:38:39,680
i even pull requests if you want to

919
00:38:36,880 --> 00:38:43,920
contribute that's uh that would be great

920
00:38:39,680 --> 00:38:47,839
uh yeah thank you jeremiah

921
00:38:43,920 --> 00:38:47,839
thank you

922
00:38:48,560 --> 00:39:01,839
do we have time for questions

923
00:38:51,680 --> 00:39:01,839
yes so i starting here

924
00:39:04,800 --> 00:39:08,640
right so the question is are we using

925
00:39:06,320 --> 00:39:13,119
the default gpr file that come with

926
00:39:08,640 --> 00:39:16,799
each project so yes that's right

927
00:39:13,119 --> 00:39:20,400
we we try to not uh

928
00:39:16,800 --> 00:39:22,960
have specific requirements

929
00:39:20,400 --> 00:39:24,160
for a layer in each project so in theory

930
00:39:22,960 --> 00:39:27,280
if you are already

931
00:39:24,160 --> 00:39:31,440
using gpr build to compile your project

932
00:39:27,280 --> 00:39:34,880
it should work in a layer as well

933
00:39:31,440 --> 00:39:37,359
my actual question to this is

934
00:39:34,880 --> 00:39:39,280
this is an option for you to make some

935
00:39:37,359 --> 00:39:42,560
restrictions on what can be in there

936
00:39:39,280 --> 00:39:44,560
the problem with gpr it is near to

937
00:39:42,560 --> 00:39:46,799
impossible to overwrite some values that

938
00:39:44,560 --> 00:39:48,640
are defined inside the gpr file

939
00:39:46,800 --> 00:39:50,560
so for example if the developer says

940
00:39:48,640 --> 00:39:52,000
this is a dynamic library it will always

941
00:39:50,560 --> 00:39:53,680
be the dynamic library

942
00:39:52,000 --> 00:39:56,960
in some context for example you need

943
00:39:53,680 --> 00:39:56,960
aesthetic library so

944
00:39:59,119 --> 00:40:02,560
okay so the question is about

945
00:40:00,800 --> 00:40:04,480
configuration of the

946
00:40:02,560 --> 00:40:06,799
gpr build project for instance you can

947
00:40:04,480 --> 00:40:09,680
have variables to say that you want a

948
00:40:06,800 --> 00:40:11,760
static library or a dynamic library

949
00:40:09,680 --> 00:40:13,520
the answer is that you have some ways to

950
00:40:11,760 --> 00:40:15,760
declare those

951
00:40:13,520 --> 00:40:17,599
those variables in the thermal files

952
00:40:15,760 --> 00:40:19,680
actually so you specify

953
00:40:17,599 --> 00:40:23,520
in in the an inner layer you specify

954
00:40:19,680 --> 00:40:26,240
that this project has different options

955
00:40:23,520 --> 00:40:26,560
and so they are visible from the from

956
00:40:26,240 --> 00:40:29,919
the

957
00:40:26,560 --> 00:40:29,920
allier point of view

958
00:40:31,119 --> 00:40:36,880
you can also you want to talk about this

959
00:40:34,880 --> 00:40:38,319
uh yes so yeah actually and that's the

960
00:40:36,880 --> 00:40:40,400
way so in india

961
00:40:38,319 --> 00:40:42,400
in your ally ortomal file you actually

962
00:40:40,400 --> 00:40:45,520
declare what are the variables from your

963
00:40:42,400 --> 00:40:47,040
project file uh and then with alara

964
00:40:45,520 --> 00:40:49,280
build you can specify them like you

965
00:40:47,040 --> 00:40:53,839
would do with uh jpr bill

966
00:40:49,280 --> 00:40:53,839
so it's yeah

967
00:40:54,160 --> 00:40:57,598
the problem is that if you need a

968
00:40:55,680 --> 00:40:59,200
specific dependency and the dependency

969
00:40:57,599 --> 00:41:01,200
doesn't define what you need to build

970
00:40:59,200 --> 00:41:02,480
the dependency with your project

971
00:41:01,200 --> 00:41:04,839
for example if you're targeting a

972
00:41:02,480 --> 00:41:08,240
specific platform

973
00:41:04,839 --> 00:41:09,759
so okay so i'm not sure

974
00:41:08,240 --> 00:41:12,000
where you're going so you just said if

975
00:41:09,760 --> 00:41:13,200
you if your dependency doesn't specify

976
00:41:12,000 --> 00:41:20,400
what you need

977
00:41:13,200 --> 00:41:22,799
right there's a problem

978
00:41:20,400 --> 00:41:24,400
independently independent executable

979
00:41:22,800 --> 00:41:26,079
okay and the library didn't define

980
00:41:24,400 --> 00:41:28,160
anything that we could tell the compiler

981
00:41:26,079 --> 00:41:30,640
okay compile this library

982
00:41:28,160 --> 00:41:32,000
okay so so i think i think the answer is

983
00:41:30,640 --> 00:41:33,839
um

984
00:41:32,000 --> 00:41:37,119
i don't know but maybe we can talk after

985
00:41:33,839 --> 00:41:40,160
because it's a bit complex

986
00:41:37,119 --> 00:41:42,400
so there's also there's also going to be

987
00:41:40,160 --> 00:41:45,359
in my opinion

988
00:41:42,400 --> 00:41:46,880
a discussion between people contributing

989
00:41:45,359 --> 00:41:49,759
libraries and people

990
00:41:46,880 --> 00:41:51,359
using them so if you find a library in a

991
00:41:49,760 --> 00:41:53,359
layer that doesn't have what you

992
00:41:51,359 --> 00:41:54,720
need you should contact the maintainer

993
00:41:53,359 --> 00:41:56,160
and say hey maybe you should have this

994
00:41:54,720 --> 00:41:57,118
and for the next three days et cetera et

995
00:41:56,160 --> 00:42:01,279
cetera

996
00:41:57,119 --> 00:42:03,599
but uh it's it's it's so far we are

997
00:42:01,280 --> 00:42:05,359
let's say it's uh we're not looking that

998
00:42:03,599 --> 00:42:08,319
much uh into the details on

999
00:42:05,359 --> 00:42:09,359
of how things are built uh and and so on

1000
00:42:08,319 --> 00:42:11,599
and so forth

1001
00:42:09,359 --> 00:42:12,480
and also here we are relying on gpr

1002
00:42:11,599 --> 00:42:14,640
build so if there's

1003
00:42:12,480 --> 00:42:16,560
uh limitation with gprb's we have to

1004
00:42:14,640 --> 00:42:20,799
deal with them

1005
00:42:16,560 --> 00:42:20,799
honest yes

1006
00:42:22,319 --> 00:42:25,520
is there a plan to integrate the

1007
00:42:24,160 --> 00:42:27,598
modifications and

1008
00:42:25,520 --> 00:42:30,240
like work with the gpr file even further

1009
00:42:27,599 --> 00:42:32,640
because when you do a liar with

1010
00:42:30,240 --> 00:42:34,078
why does it is there a reason why it

1011
00:42:32,640 --> 00:42:37,279
doesn't add the width

1012
00:42:34,079 --> 00:42:38,400
to the gpr file and the other way around

1013
00:42:37,280 --> 00:42:39,920
if you

1014
00:42:38,400 --> 00:42:41,599
if you create a new project and you

1015
00:42:39,920 --> 00:42:44,400
already have a gpr file to

1016
00:42:41,599 --> 00:42:46,240
determine the dependencies at this point

1017
00:42:44,400 --> 00:42:48,240
the reason is that i don't like tools

1018
00:42:46,240 --> 00:42:51,520
that modify my files

1019
00:42:48,240 --> 00:42:52,560
so when i did this files data layer

1020
00:42:51,520 --> 00:42:55,920
generates are

1021
00:42:52,560 --> 00:42:58,400
as complete as possible but my files my

1022
00:42:55,920 --> 00:43:01,440
project file is not modified

1023
00:42:58,400 --> 00:43:05,040
we discussed sometimes about this we

1024
00:43:01,440 --> 00:43:07,119
might perhaps add some switch that you

1025
00:43:05,040 --> 00:43:09,759
tell alright okay go ahead and modify my

1026
00:43:07,119 --> 00:43:11,920
project file i'm okay with that

1027
00:43:09,760 --> 00:43:14,319
for example but that's the actual reason

1028
00:43:11,920 --> 00:43:14,319
right now

1029
00:43:21,920 --> 00:43:27,440
yeah yeah this happens this happens

1030
00:43:25,119 --> 00:43:28,640
so yeah the the one something specific

1031
00:43:27,440 --> 00:43:31,520
as well is that sometimes

1032
00:43:28,640 --> 00:43:33,040
from one uh a layer crate you will have

1033
00:43:31,520 --> 00:43:34,960
several

1034
00:43:33,040 --> 00:43:37,279
gpr files and you don't necessarily want

1035
00:43:34,960 --> 00:43:40,720
to use all of them

1036
00:43:37,280 --> 00:43:41,359
so it's not it's not a we are living in

1037
00:43:40,720 --> 00:43:43,200
a

1038
00:43:41,359 --> 00:43:44,400
in an ecosystem where there are already

1039
00:43:43,200 --> 00:43:47,520
projects out there and

1040
00:43:44,400 --> 00:43:47,920
uh they do not necessarily fit perfectly

1041
00:43:47,520 --> 00:43:51,359
the

1042
00:43:47,920 --> 00:43:52,319
the alar scheme so there are there are

1043
00:43:51,359 --> 00:43:53,839
things that are

1044
00:43:52,319 --> 00:43:56,160
you know a bit different from the the

1045
00:43:53,839 --> 00:43:58,240
basic case that we show here which is a

1046
00:43:56,160 --> 00:43:59,200
one uh one project with the one project

1047
00:43:58,240 --> 00:44:01,359
file and uh

1048
00:43:59,200 --> 00:44:01,359
and

1049
00:44:07,119 --> 00:44:11,040
a if the uh files were listed in the in

1050
00:44:10,160 --> 00:44:13,920
the crate

1051
00:44:11,040 --> 00:44:14,480
like what i can do with from that crate

1052
00:44:13,920 --> 00:44:16,560
and

1053
00:44:14,480 --> 00:44:18,400
then maybe like okay if you do alive or

1054
00:44:16,560 --> 00:44:20,078
with it could tell you like

1055
00:44:18,400 --> 00:44:22,960
if you want to start using the package

1056
00:44:20,079 --> 00:44:22,960
please add with

1057
00:44:32,000 --> 00:44:38,480
yeah that's a good suggestion

1058
00:44:36,400 --> 00:44:40,240
yeah the question was that when you do

1059
00:44:38,480 --> 00:44:43,280
the alarm with

1060
00:44:40,240 --> 00:44:45,040
it gets added to the dependencies but

1061
00:44:43,280 --> 00:44:47,520
the project file is not modified so it

1062
00:44:45,040 --> 00:44:49,359
won't build out of the box

1063
00:44:47,520 --> 00:44:52,240
so you have to manually add it to the

1064
00:44:49,359 --> 00:44:55,200
gpl to your own project file

1065
00:44:52,240 --> 00:44:56,640
and yes the suggestion is to inform the

1066
00:44:55,200 --> 00:44:59,200
user that the

1067
00:44:56,640 --> 00:44:59,680
dependency dependency that you just

1068
00:44:59,200 --> 00:45:02,240
added

1069
00:44:59,680 --> 00:45:05,839
has all those project files available

1070
00:45:02,240 --> 00:45:05,839
for use

1071
00:45:06,720 --> 00:45:10,560
no sorry there was a second question

1072
00:45:08,800 --> 00:45:13,599
that was uh

1073
00:45:10,560 --> 00:45:16,480
tell me if i'm wrong uh couldn't a liar

1074
00:45:13,599 --> 00:45:17,520
read an existing project file and guess

1075
00:45:16,480 --> 00:45:22,079
what packages

1076
00:45:17,520 --> 00:45:24,880
are should be added as dependencies so

1077
00:45:22,079 --> 00:45:26,079
it could but it um you don't have the

1078
00:45:24,880 --> 00:45:29,440
version information

1079
00:45:26,079 --> 00:45:31,920
in the gpr file so for instance if

1080
00:45:29,440 --> 00:45:32,640
your project file depends on the adatama

1081
00:45:31,920 --> 00:45:35,200
library

1082
00:45:32,640 --> 00:45:36,720
which version should allow you we could

1083
00:45:35,200 --> 00:45:38,399
add the heuristics and so on but it's

1084
00:45:36,720 --> 00:45:41,279
getting much more complex

1085
00:45:38,400 --> 00:45:41,280
than the other

1086
00:45:42,079 --> 00:45:48,480
so it's it would sound nice as a feature

1087
00:45:45,359 --> 00:45:51,359
and useful but it's not clear how how it

1088
00:45:48,480 --> 00:45:51,359
should work exactly

1089
00:45:53,440 --> 00:45:57,280
right right the hints could be

1090
00:45:56,079 --> 00:45:59,599
definitely useful

1091
00:45:57,280 --> 00:46:01,520
and actually what you said about the you

1092
00:45:59,599 --> 00:46:02,960
know telling the users they are this and

1093
00:46:01,520 --> 00:46:04,560
that

1094
00:46:02,960 --> 00:46:06,400
project file available actually we do

1095
00:46:04,560 --> 00:46:09,520
have the list of project files

1096
00:46:06,400 --> 00:46:11,200
in the terminal it's available so that's

1097
00:46:09,520 --> 00:46:12,960
i think yeah that's something that's

1098
00:46:11,200 --> 00:46:14,640
definitely doable

1099
00:46:12,960 --> 00:46:16,000
so i invite you actually to open an

1100
00:46:14,640 --> 00:46:18,799
issue and

1101
00:46:16,000 --> 00:46:18,800
share your feedback

1102
00:46:20,800 --> 00:46:29,839
yeah if you want to implement it that's

1103
00:46:22,880 --> 00:46:29,839
fine as well

1104
00:46:34,880 --> 00:46:39,680
and there was the mentioning that the

1105
00:46:37,839 --> 00:46:43,040
maintainer say email login

1106
00:46:39,680 --> 00:46:45,200
and it can't be changed

1107
00:46:43,040 --> 00:46:46,240
so once you're declared to be the

1108
00:46:45,200 --> 00:46:48,879
mainstay you know

1109
00:46:46,240 --> 00:46:49,919
and when you just kind of lose interest

1110
00:46:48,880 --> 00:46:53,440
what happens

1111
00:46:49,920 --> 00:46:55,760
so the question is about somehow

1112
00:46:53,440 --> 00:46:56,480
somebody else can take over yeah i get

1113
00:46:55,760 --> 00:46:58,160
it

1114
00:46:56,480 --> 00:47:00,160
so the question is about the uh

1115
00:46:58,160 --> 00:47:00,720
maintainers and maintainers logins in

1116
00:47:00,160 --> 00:47:04,480
the

1117
00:47:00,720 --> 00:47:07,040
in the thermal file um so

1118
00:47:04,480 --> 00:47:08,160
we said that it's to make sure that you

1119
00:47:07,040 --> 00:47:10,400
are the owner of the

1120
00:47:08,160 --> 00:47:12,319
the thermal file and that you're the

1121
00:47:10,400 --> 00:47:14,240
only one who can change it

1122
00:47:12,319 --> 00:47:15,599
actually what's happened so we have we

1123
00:47:14,240 --> 00:47:18,720
have a maintainer field with

1124
00:47:15,599 --> 00:47:20,400
emails uh because we want uh

1125
00:47:18,720 --> 00:47:21,919
to be able to contact you at some point

1126
00:47:20,400 --> 00:47:24,800
we also have maintainers

1127
00:47:21,920 --> 00:47:27,119
logins with github logins and that's

1128
00:47:24,800 --> 00:47:29,599
actually for automated checks

1129
00:47:27,119 --> 00:47:31,680
so when you contribute to the layer

1130
00:47:29,599 --> 00:47:32,160
index you do a pull request and there's

1131
00:47:31,680 --> 00:47:35,520
a check

1132
00:47:32,160 --> 00:47:38,960
that you are allowed to modify this

1133
00:47:35,520 --> 00:47:40,800
this file but actually

1134
00:47:38,960 --> 00:47:42,800
if you want to transfer the the

1135
00:47:40,800 --> 00:47:45,440
ownership you can modify the file to

1136
00:47:42,800 --> 00:47:47,680
remove your name and put someone else

1137
00:47:45,440 --> 00:47:48,720
login and that's how you would transfer

1138
00:47:47,680 --> 00:47:52,480
the

1139
00:47:48,720 --> 00:47:54,160
the the ownership and uh

1140
00:47:52,480 --> 00:47:56,319
so far we'll see in the future but so

1141
00:47:54,160 --> 00:47:58,399
far everything is uh moderated so we

1142
00:47:56,319 --> 00:48:01,200
have a we have a manual review so

1143
00:47:58,400 --> 00:48:03,599
even if someone disappears we can decide

1144
00:48:01,200 --> 00:48:06,879
to transfer the ownership at some point

1145
00:48:03,599 --> 00:48:08,079
uh nothing is really a set in stone for

1146
00:48:06,880 --> 00:48:11,760
the maintainers we can

1147
00:48:08,079 --> 00:48:11,760
we can work around things like that

1148
00:48:18,640 --> 00:48:23,759
okay so the question is do we plan to

1149
00:48:20,720 --> 00:48:26,558
package ada drivers library which is a

1150
00:48:23,760 --> 00:48:27,520
project for embedded development uh in

1151
00:48:26,559 --> 00:48:30,559
ada

1152
00:48:27,520 --> 00:48:34,960
uh the answer is yes but the

1153
00:48:30,559 --> 00:48:37,119
the real question is how because uh

1154
00:48:34,960 --> 00:48:38,319
i actually i actually started there's

1155
00:48:37,119 --> 00:48:41,599
already uh

1156
00:48:38,319 --> 00:48:42,160
embedded uh crates uh available drivers

1157
00:48:41,599 --> 00:48:45,680
for the

1158
00:48:42,160 --> 00:48:47,200
7051 microcontroller uh the problem

1159
00:48:45,680 --> 00:48:49,040
right now is that the architecture of

1160
00:48:47,200 --> 00:48:51,279
the ada divers library project

1161
00:48:49,040 --> 00:48:53,520
does not fit very well with uh with a

1162
00:48:51,280 --> 00:48:56,559
layer because

1163
00:48:53,520 --> 00:48:58,160
it's not modular enough so we have to

1164
00:48:56,559 --> 00:49:00,720
find a good way to do it but

1165
00:48:58,160 --> 00:49:03,839
yes absolutely it will be in a layer at

1166
00:49:00,720 --> 00:49:03,839
some point

1167
00:49:06,480 --> 00:49:14,839
okay i think that's it thank you thank

1168
00:49:09,990 --> 00:49:17,839
[Applause]

1169
00:49:14,839 --> 00:49:17,839
you

1170
00:49:21,760 --> 00:49:23,839
you

