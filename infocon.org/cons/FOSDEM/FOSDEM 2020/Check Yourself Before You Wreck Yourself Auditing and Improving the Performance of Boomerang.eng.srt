1
00:00:05,120 --> 00:00:10,200
hello everybody first of all I'm honored

2
00:00:08,069 --> 00:00:13,260
here to kick off this web performance

3
00:00:10,200 --> 00:00:15,090
dev room here at FOSDEM definitely want

4
00:00:13,260 --> 00:00:16,650
to thanks the Wikimedia performance team

5
00:00:15,090 --> 00:00:18,810
for organizing this and for you all to

6
00:00:16,650 --> 00:00:21,269
be here today thanks for coming to

7
00:00:18,810 --> 00:00:24,119
listen to me and the others my name is

8
00:00:21,269 --> 00:00:26,698
Nick Jones MA I work at Akamai I work on

9
00:00:24,119 --> 00:00:27,960
our impulse product and specifically I

10
00:00:26,699 --> 00:00:30,210
work on an open source library called

11
00:00:27,960 --> 00:00:32,310
boomerang and today I'm going to talk

12
00:00:30,210 --> 00:00:35,970
about the performance audit that we gave

13
00:00:32,310 --> 00:00:37,890
on boomerang and what the findings that

14
00:00:35,970 --> 00:00:41,010
we found things will be improved and

15
00:00:37,890 --> 00:00:43,320
kind of how we've made it better so why

16
00:00:41,010 --> 00:00:45,420
are we here today so boomerang is an

17
00:00:43,320 --> 00:00:48,540
open source real user monitoring library

18
00:00:45,420 --> 00:00:49,800
and monitors performance when you visit

19
00:00:48,540 --> 00:00:50,730
a website at boomerang Azana

20
00:00:49,800 --> 00:00:53,400
it's going to capture all the

21
00:00:50,730 --> 00:00:56,089
performance data that we can how fast it

22
00:00:53,400 --> 00:00:58,710
took characteristics of the page itself

23
00:00:56,090 --> 00:01:00,030
we are Akamai are the primary

24
00:00:58,710 --> 00:01:01,770
contributors to boomerang here's a

25
00:01:00,030 --> 00:01:04,320
github repository if you care about it

26
00:01:01,770 --> 00:01:06,450
but it is an open source product you are

27
00:01:04,319 --> 00:01:07,860
welcome to use boomerang if you want if

28
00:01:06,450 --> 00:01:10,469
you have your own backends that you want

29
00:01:07,860 --> 00:01:11,880
to send the data to you can send it to

30
00:01:10,469 --> 00:01:14,399
there if you want to use our product

31
00:01:11,880 --> 00:01:16,490
impulse we will be the real-time

32
00:01:14,399 --> 00:01:18,960
dashboards for you to show all this data

33
00:01:16,490 --> 00:01:20,880
so we are a third party if you will we

34
00:01:18,960 --> 00:01:22,619
provide a script that other people can

35
00:01:20,880 --> 00:01:26,369
include on the website to capture this

36
00:01:22,619 --> 00:01:28,469
data in building a third party

37
00:01:26,369 --> 00:01:29,789
especially real user monitoring script

38
00:01:28,469 --> 00:01:31,859
we think it's very important to try to

39
00:01:29,789 --> 00:01:34,259
not affect the page too much to minimize

40
00:01:31,859 --> 00:01:35,759
your costs it'd be quite a shame if we

41
00:01:34,259 --> 00:01:37,020
were a performance monitoring product

42
00:01:35,759 --> 00:01:38,780
that also had an effect on the

43
00:01:37,020 --> 00:01:41,399
performance of the pages that we're on

44
00:01:38,780 --> 00:01:43,200
in fact our customers are people that

45
00:01:41,399 --> 00:01:45,569
pay for EM pulse have been increasingly

46
00:01:43,200 --> 00:01:47,039
sophisticated and making sure and asking

47
00:01:45,569 --> 00:01:51,179
us whether we have a cost when they're

48
00:01:47,039 --> 00:01:53,549
including us on the website so two years

49
00:01:51,179 --> 00:01:55,319
ago what we did was we decided to take a

50
00:01:53,549 --> 00:01:57,359
step back and look at from a holistic

51
00:01:55,319 --> 00:01:58,859
perspective what is the cost of

52
00:01:57,359 --> 00:02:02,609
including boomerang on your page what is

53
00:01:58,859 --> 00:02:04,499
the cost of including the script we

54
00:02:02,609 --> 00:02:06,270
wanted to not only understand it better

55
00:02:04,499 --> 00:02:07,259
for ourselves we wanted to look to see

56
00:02:06,270 --> 00:02:09,478
if there were places that we could

57
00:02:07,259 --> 00:02:11,400
improve and we wanted to be able to

58
00:02:09,479 --> 00:02:13,080
share this with our customers we think

59
00:02:11,400 --> 00:02:14,250
it's very important to be transparent I

60
00:02:13,080 --> 00:02:16,379
think it builds a lot of trust with our

61
00:02:14,250 --> 00:02:16,890
customers to show the good and the bad

62
00:02:16,379 --> 00:02:19,380
with what

63
00:02:16,890 --> 00:02:20,549
you have and to help the customer

64
00:02:19,380 --> 00:02:23,040
understand the benefit that you're

65
00:02:20,550 --> 00:02:25,910
bringing along with the the overhead

66
00:02:23,040 --> 00:02:28,470
that it takes so for the past two years

67
00:02:25,910 --> 00:02:29,819
we've been working on performance as one

68
00:02:28,470 --> 00:02:32,310
of the main features for the product

69
00:02:29,819 --> 00:02:35,369
we're really trying to improve Boomerang

70
00:02:32,310 --> 00:02:36,810
consistently over time and this is the

71
00:02:35,370 --> 00:02:38,670
kind of stuff that makes me passionate

72
00:02:36,810 --> 00:02:39,959
makes our team passionate we have a team

73
00:02:38,670 --> 00:02:41,280
of five developers a couple of them are

74
00:02:39,959 --> 00:02:43,980
here today

75
00:02:41,280 --> 00:02:46,530
we love performance right and so this is

76
00:02:43,980 --> 00:02:47,910
what I'm going to talk about today so

77
00:02:46,530 --> 00:02:50,040
why should you care well you know why

78
00:02:47,910 --> 00:02:51,239
are you here well for one sorry you're

79
00:02:50,040 --> 00:02:52,500
just stuck in the room with me so you

80
00:02:51,239 --> 00:02:54,900
got to stick with it we lock the doors

81
00:02:52,500 --> 00:02:56,880
you can't escape just kidding

82
00:02:54,900 --> 00:02:58,560
maybe you're like me maybe you develop a

83
00:02:56,880 --> 00:02:59,760
third-party library does anybody else

84
00:02:58,560 --> 00:03:02,430
actually develop library that other

85
00:02:59,760 --> 00:03:05,160
people use at all 20 reasons couple

86
00:03:02,430 --> 00:03:08,070
hands come a lot of people web

87
00:03:05,160 --> 00:03:09,510
developers etc use third-party libraries

88
00:03:08,070 --> 00:03:13,109
they use other scripts to help build

89
00:03:09,510 --> 00:03:14,959
their websites so maybe you've had this

90
00:03:13,110 --> 00:03:18,239
happen if you've been working at a web

91
00:03:14,959 --> 00:03:20,220
web site or a big company your boss

92
00:03:18,239 --> 00:03:21,900
comes by and says hey I really want you

93
00:03:20,220 --> 00:03:23,700
to include this one new library that we

94
00:03:21,900 --> 00:03:25,260
need for a website it's just this one

95
00:03:23,700 --> 00:03:27,030
simple line of code just a script tag

96
00:03:25,260 --> 00:03:30,540
please include it nothing can go wrong

97
00:03:27,030 --> 00:03:32,810
right it is very simple unfortunately

98
00:03:30,540 --> 00:03:35,459
that one little line means a lot

99
00:03:32,810 --> 00:03:37,079
including that script on your page means

100
00:03:35,459 --> 00:03:40,190
it could stop your page from loading

101
00:03:37,079 --> 00:03:42,329
entirely I could slow down your website

102
00:03:40,190 --> 00:03:45,180
it could create incompatibilities with

103
00:03:42,329 --> 00:03:46,350
other libraries on the page too it could

104
00:03:45,180 --> 00:03:48,630
change from underneath you if you're

105
00:03:46,350 --> 00:03:51,510
especially if you're loading it from CDN

106
00:03:48,630 --> 00:03:53,700
or from another place that those those

107
00:03:51,510 --> 00:03:55,620
JavaScript bytes could change without

108
00:03:53,700 --> 00:03:57,268
you even asking it to and at the end of

109
00:03:55,620 --> 00:03:58,890
the day it really has complete control

110
00:03:57,269 --> 00:04:00,660
over your web page it JavaScript is

111
00:03:58,890 --> 00:04:05,760
running in the web page it can do

112
00:04:00,660 --> 00:04:07,260
anything intentionally or not so I

113
00:04:05,760 --> 00:04:10,078
wanted to put this into some sort of

114
00:04:07,260 --> 00:04:12,570
context for us as I said we provide

115
00:04:10,079 --> 00:04:15,329
boomerang for our customers Akamai we're

116
00:04:12,570 --> 00:04:19,289
on over 14,000 of our customers websites

117
00:04:15,329 --> 00:04:21,710
we track and measure over a billion page

118
00:04:19,289 --> 00:04:24,090
loads a day which is quite a lot

119
00:04:21,709 --> 00:04:26,900
according to the open source statistics

120
00:04:24,090 --> 00:04:29,159
that I can find we're somewhere between

121
00:04:26,900 --> 00:04:30,448
75,000 and most a half a million

122
00:04:29,160 --> 00:04:32,699
websites depending on

123
00:04:30,449 --> 00:04:34,139
but data sources you're looking at so a

124
00:04:32,699 --> 00:04:35,219
lot of people are including the open

125
00:04:34,139 --> 00:04:40,110
source version of boomerang on their

126
00:04:35,219 --> 00:04:41,099
pages as well and if you take all the

127
00:04:40,110 --> 00:04:42,629
different combinations of all the

128
00:04:41,099 --> 00:04:43,889
different pages that boomerangs on all

129
00:04:42,629 --> 00:04:44,999
the different browsers that can load it

130
00:04:43,889 --> 00:04:46,349
all the different people that can load

131
00:04:44,999 --> 00:04:48,360
it and all the different geo locations

132
00:04:46,349 --> 00:04:50,610
that can load it all the different other

133
00:04:48,360 --> 00:04:52,020
scripts that could be on the page - its

134
00:04:50,610 --> 00:04:53,639
kind of scary there's a really really

135
00:04:52,020 --> 00:04:56,248
big matrix here of things that can go

136
00:04:53,639 --> 00:04:58,289
wrong you know you could have any

137
00:04:56,249 --> 00:04:59,849
compatibility with another script

138
00:04:58,289 --> 00:05:02,520
you could have edge cases for your

139
00:04:59,849 --> 00:05:03,810
performance etc so what I hope to do

140
00:05:02,520 --> 00:05:04,948
today is to share some of the things

141
00:05:03,810 --> 00:05:07,349
that we've learned when we've evaluated

142
00:05:04,949 --> 00:05:08,999
ourselves so that you might be able to

143
00:05:07,349 --> 00:05:12,240
do this as well for any library that

144
00:05:08,999 --> 00:05:13,949
you're taking a look out so how would

145
00:05:12,240 --> 00:05:15,060
you evaluate the cost of a third-party

146
00:05:13,949 --> 00:05:17,129
script

147
00:05:15,060 --> 00:05:18,719
how do people that want to include

148
00:05:17,129 --> 00:05:20,310
boomerang on their page what questions

149
00:05:18,719 --> 00:05:22,680
said that should they be asking about

150
00:05:20,310 --> 00:05:24,240
what is its cost and how can we as a

151
00:05:22,680 --> 00:05:26,430
provider of a third-party script

152
00:05:24,240 --> 00:05:29,699
convince our customers that the benefits

153
00:05:26,430 --> 00:05:30,930
outweigh those costs so every script has

154
00:05:29,699 --> 00:05:33,120
a lot of different aspects to it right

155
00:05:30,930 --> 00:05:33,270
one of those aspects would be how big is

156
00:05:33,120 --> 00:05:35,189
it

157
00:05:33,270 --> 00:05:38,698
what's the bite size so taking an

158
00:05:35,189 --> 00:05:41,909
example here moderniser j/s it's 97 or

159
00:05:38,699 --> 00:05:45,449
sorry 92 kilobytes on minified 32

160
00:05:41,909 --> 00:05:47,459
kilobytes gzipped is that good bad I

161
00:05:45,449 --> 00:05:49,620
don't know honestly it's just a number

162
00:05:47,459 --> 00:05:51,689
at the end of the day you probably want

163
00:05:49,620 --> 00:05:53,999
to minimize this as much as possible in

164
00:05:51,689 --> 00:05:55,050
size can be an important factor of a

165
00:05:53,999 --> 00:05:56,610
JavaScript library but it's definitely

166
00:05:55,050 --> 00:06:00,569
not the only thing that doesn't tell the

167
00:05:56,610 --> 00:06:02,430
whole picture resource weight is the

168
00:06:00,569 --> 00:06:03,629
concept of the total bite size of your

169
00:06:02,430 --> 00:06:04,979
page so this includes all your

170
00:06:03,629 --> 00:06:06,599
JavaScript all your images everything

171
00:06:04,979 --> 00:06:08,789
else that's required to build your

172
00:06:06,599 --> 00:06:10,620
website right and is very important

173
00:06:08,789 --> 00:06:12,240
every single byte matters when you're

174
00:06:10,620 --> 00:06:15,060
trying to improve the performance of

175
00:06:12,240 --> 00:06:17,009
your page and lowering the bite size of

176
00:06:15,060 --> 00:06:18,810
different libraries you know choosing

177
00:06:17,009 --> 00:06:20,099
thinner libraries and stuff like that

178
00:06:18,810 --> 00:06:22,409
can really help for your performance

179
00:06:20,099 --> 00:06:24,688
budget and while it's probably one of

180
00:06:22,409 --> 00:06:25,830
the easiest ways to judge a third party

181
00:06:24,689 --> 00:06:28,699
just as based on its size it's

182
00:06:25,830 --> 00:06:31,589
definitely only just one aspect of it so

183
00:06:28,699 --> 00:06:33,529
what we decided to do with our audit of

184
00:06:31,589 --> 00:06:36,599
our own code was kind of break up the

185
00:06:33,529 --> 00:06:39,240
life cycle of our script into five main

186
00:06:36,599 --> 00:06:40,800
phases so first you have your loader

187
00:06:39,240 --> 00:06:42,389
snippet or how the script gets on the

188
00:06:40,800 --> 00:06:44,040
page maybe you include this in your

189
00:06:42,389 --> 00:06:46,020
JavaScript bundle maybe you load

190
00:06:44,040 --> 00:06:47,430
the attack manager but the browser needs

191
00:06:46,020 --> 00:06:47,880
to know to load your script in the first

192
00:06:47,430 --> 00:06:49,620
place

193
00:06:47,880 --> 00:06:51,960
the second thing the browser goes and

194
00:06:49,620 --> 00:06:53,940
fetches the script itself and obviously

195
00:06:51,960 --> 00:06:56,099
the less bites you have the better here

196
00:06:53,940 --> 00:06:58,400
the browser then needs to parse it and

197
00:06:56,100 --> 00:07:00,720
compile it get it ready to be run

198
00:06:58,400 --> 00:07:02,070
finally it runs it for the first time so

199
00:07:00,720 --> 00:07:04,170
there's probably a lot of initialization

200
00:07:02,070 --> 00:07:06,659
that happens maybe registering global

201
00:07:04,170 --> 00:07:08,550
variables or event handlers and then

202
00:07:06,660 --> 00:07:09,660
runtime so the the reason that it's

203
00:07:08,550 --> 00:07:12,540
there in the first place

204
00:07:09,660 --> 00:07:15,060
why is this library on your website and

205
00:07:12,540 --> 00:07:19,350
all of these are important from this the

206
00:07:15,060 --> 00:07:21,690
entire lifecycle of the script so what

207
00:07:19,350 --> 00:07:24,690
we did for boomerang is we decided to

208
00:07:21,690 --> 00:07:26,460
jump into the developer tools profilers

209
00:07:24,690 --> 00:07:27,930
from chrome and other really kind of

210
00:07:26,460 --> 00:07:29,849
show you at a really high level what's

211
00:07:27,930 --> 00:07:31,590
going on and then give you details for

212
00:07:29,850 --> 00:07:32,670
all the specifics so this is what

213
00:07:31,590 --> 00:07:35,190
boomerang looks like if you're loading

214
00:07:32,670 --> 00:07:37,230
it on an empty page we start with the

215
00:07:35,190 --> 00:07:38,700
loader snippet which is the way that we

216
00:07:37,230 --> 00:07:41,400
get boomerang onto the page in the first

217
00:07:38,700 --> 00:07:43,409
place our customers Akamai load it from

218
00:07:41,400 --> 00:07:46,469
our CDN open source customers could

219
00:07:43,410 --> 00:07:49,130
bundle it into your your application

220
00:07:46,470 --> 00:07:51,240
bundle or however you want to load it

221
00:07:49,130 --> 00:07:54,000
then we download it boomerang gets

222
00:07:51,240 --> 00:07:56,400
downloaded the browser parses the

223
00:07:54,000 --> 00:07:58,350
JavaScript and executes we initialize we

224
00:07:56,400 --> 00:08:01,229
set up some global variables we register

225
00:07:58,350 --> 00:08:03,390
event handlers etc in our case for EM

226
00:08:01,230 --> 00:08:06,290
pulse we actually go fetch some more

227
00:08:03,390 --> 00:08:08,789
configuration data via a JSON request

228
00:08:06,290 --> 00:08:10,050
and then we initialize that and then

229
00:08:08,790 --> 00:08:11,370
finally the main reason that we're there

230
00:08:10,050 --> 00:08:13,050
is we're collecting all this performance

231
00:08:11,370 --> 00:08:15,030
information we're gathering data on how

232
00:08:13,050 --> 00:08:18,300
long it took and that's what we call the

233
00:08:15,030 --> 00:08:20,099
card onload event handler we package all

234
00:08:18,300 --> 00:08:21,270
that data up and we beacon it out we

235
00:08:20,100 --> 00:08:23,850
send it back to the mothership for

236
00:08:21,270 --> 00:08:28,430
processing so these are kind of the main

237
00:08:23,850 --> 00:08:30,990
five stages of our script loading so

238
00:08:28,430 --> 00:08:32,430
keeping those phases in mind let's take

239
00:08:30,990 --> 00:08:34,020
a look at how you might audit a new

240
00:08:32,429 --> 00:08:36,359
third party script or how we audited

241
00:08:34,020 --> 00:08:41,848
boomerang when looking at these at these

242
00:08:36,360 --> 00:08:44,310
different phases so the first question

243
00:08:41,849 --> 00:08:47,190
is how does a new script get on a

244
00:08:44,310 --> 00:08:48,930
website some libraries suggest a very

245
00:08:47,190 --> 00:08:51,330
simple script tag write a script async

246
00:08:48,930 --> 00:08:54,000
tag or something like that this tag

247
00:08:51,330 --> 00:08:56,610
itself has no intrinsic cost the browser

248
00:08:54,000 --> 00:08:57,840
just knows to go fetch that data other

249
00:08:56,610 --> 00:08:59,220
libraries like

250
00:08:57,840 --> 00:09:01,200
Google Analytics for example have a

251
00:08:59,220 --> 00:09:03,510
small snippet this usually is meant to

252
00:09:01,200 --> 00:09:04,860
load the script asynchronously you can

253
00:09:03,510 --> 00:09:07,080
see in very small font right there

254
00:09:04,860 --> 00:09:10,110
that's kind of Google Analytics loader

255
00:09:07,080 --> 00:09:12,870
snippet and this has a very minor cost a

256
00:09:10,110 --> 00:09:14,550
couple milliseconds usually to execute

257
00:09:12,870 --> 00:09:18,510
it and then to trigger that download of

258
00:09:14,550 --> 00:09:20,010
the JavaScript we have boomerang with to

259
00:09:18,510 --> 00:09:22,590
do things a little bit differently

260
00:09:20,010 --> 00:09:25,200
we actually have a more complex loader

261
00:09:22,590 --> 00:09:28,790
snippet that we give to our customers we

262
00:09:25,200 --> 00:09:31,260
don't use just a script async tag

263
00:09:28,790 --> 00:09:33,390
because well you can load JavaScript

264
00:09:31,260 --> 00:09:36,090
asynchronously the browser will still

265
00:09:33,390 --> 00:09:39,120
block on that content before it fires

266
00:09:36,090 --> 00:09:41,370
the onload event in other words if you

267
00:09:39,120 --> 00:09:42,930
have even asynchronous script tag that's

268
00:09:41,370 --> 00:09:44,820
loading your analytics if that that

269
00:09:42,930 --> 00:09:46,800
analytics package takes 10 seconds load

270
00:09:44,820 --> 00:09:48,570
the browser is still going to be in its

271
00:09:46,800 --> 00:09:50,130
loading state the loading indicator is

272
00:09:48,570 --> 00:09:52,620
still going to be there the onload event

273
00:09:50,130 --> 00:09:54,330
won't fire etc what we want to do as a

274
00:09:52,620 --> 00:09:56,130
performance monitoring script is make

275
00:09:54,330 --> 00:09:57,570
sure that we're not blocking onload

276
00:09:56,130 --> 00:10:00,240
we're not affecting the performance of

277
00:09:57,570 --> 00:10:03,180
the page that we're on so we have this

278
00:10:00,240 --> 00:10:04,980
40 lines of JavaScript essentially that

279
00:10:03,180 --> 00:10:06,839
tells the browser to load boomerang in

280
00:10:04,980 --> 00:10:10,020
an asynchronous and non blocking manner

281
00:10:06,840 --> 00:10:12,300
we use an iframe to do this or we used

282
00:10:10,020 --> 00:10:14,130
an iframe to do this it's a little more

283
00:10:12,300 --> 00:10:15,870
complex actually costs a little bit more

284
00:10:14,130 --> 00:10:17,939
than the previous ways I mentioned so in

285
00:10:15,870 --> 00:10:19,230
our case it could be up to 40

286
00:10:17,940 --> 00:10:21,090
milliseconds and a lot of this is

287
00:10:19,230 --> 00:10:23,190
because the iframe itself creating an

288
00:10:21,090 --> 00:10:25,340
iframe in a browser actually has a cost

289
00:10:23,190 --> 00:10:28,320
to it so it's a little more expensive

290
00:10:25,340 --> 00:10:30,300
and we actually wanted to focus on at

291
00:10:28,320 --> 00:10:32,220
this when we were doing our audit as one

292
00:10:30,300 --> 00:10:34,199
of the main things that we could try to

293
00:10:32,220 --> 00:10:36,360
see if we can improve on can we get down

294
00:10:34,200 --> 00:10:38,460
the cost while still maintaining the

295
00:10:36,360 --> 00:10:41,640
non-blocking nature of what we're giving

296
00:10:38,460 --> 00:10:42,870
to our customers and if you want any

297
00:10:41,640 --> 00:10:44,760
more details on exactly how we do

298
00:10:42,870 --> 00:10:46,590
everything that we do it is in the

299
00:10:44,760 --> 00:10:48,150
boomerang documentation on github you

300
00:10:46,590 --> 00:10:52,020
can read all about it we've explained it

301
00:10:48,150 --> 00:10:53,430
quite a bit more there ok so now the

302
00:10:52,020 --> 00:10:54,780
browser knows that you want to load your

303
00:10:53,430 --> 00:10:56,310
JavaScript right it's gonna go fetch it

304
00:10:54,780 --> 00:11:00,060
from the network this is when the

305
00:10:56,310 --> 00:11:01,319
download begins every byte that is

306
00:11:00,060 --> 00:11:03,209
downloaded affects the overall page

307
00:11:01,320 --> 00:11:05,610
weight you know every byte matters here

308
00:11:03,210 --> 00:11:06,780
depending on how the script is loaded it

309
00:11:05,610 --> 00:11:08,610
could affect other things on the page

310
00:11:06,780 --> 00:11:10,319
too if it's part of your main

311
00:11:08,610 --> 00:11:11,279
application bundle for example it will

312
00:11:10,320 --> 00:11:13,589
block all the stuff

313
00:11:11,279 --> 00:11:15,810
afterward I know that a lot of people

314
00:11:13,589 --> 00:11:16,949
are using more exotic ways of loading

315
00:11:15,810 --> 00:11:18,839
JavaScript these days like through

316
00:11:16,949 --> 00:11:20,219
modules and stuff but it's important to

317
00:11:18,839 --> 00:11:23,759
keep in mind that every everything that

318
00:11:20,220 --> 00:11:25,079
you are loading has a cost to it and

319
00:11:23,759 --> 00:11:26,550
it's also really important to know that

320
00:11:25,079 --> 00:11:29,339
a lot of libraries that you will load

321
00:11:26,550 --> 00:11:31,229
analytics libraries or other widgets

322
00:11:29,339 --> 00:11:32,879
social widgets etc they'll often load

323
00:11:31,230 --> 00:11:34,980
additional data after they after they

324
00:11:32,879 --> 00:11:38,069
load the JavaScript so they may load

325
00:11:34,980 --> 00:11:40,980
other CSS or images get JSON from from

326
00:11:38,069 --> 00:11:42,870
various places for example right in fact

327
00:11:40,980 --> 00:11:44,459
some of you may know this pretty cool

328
00:11:42,870 --> 00:11:46,860
tool from Simon Hearns called request

329
00:11:44,459 --> 00:11:48,149
map and it kind of lets you see all the

330
00:11:46,860 --> 00:11:49,230
different things that get fetched and

331
00:11:48,149 --> 00:11:51,660
what triggers other things to get

332
00:11:49,230 --> 00:11:53,279
fetched etc it's a good way of knowing

333
00:11:51,660 --> 00:11:56,399
kind of like the whole cost of a library

334
00:11:53,279 --> 00:11:59,279
when when you load it so it's on request

335
00:11:56,399 --> 00:12:00,509
mapped out but birth dot tools check it

336
00:11:59,279 --> 00:12:02,759
out you could also use just things like

337
00:12:00,509 --> 00:12:03,959
webpagetest or looking at your network

338
00:12:02,759 --> 00:12:08,220
tab to see all the other things that are

339
00:12:03,959 --> 00:12:10,349
downloaded so if we take a look at a

340
00:12:08,220 --> 00:12:12,749
couple sample popular JavaScript

341
00:12:10,350 --> 00:12:13,980
libraries we kind of kind of just picked

342
00:12:12,749 --> 00:12:16,769
a sample of ones that I knew of

343
00:12:13,980 --> 00:12:17,910
put them in order out size we can

344
00:12:16,769 --> 00:12:20,699
actually see that boomerang is kind of

345
00:12:17,910 --> 00:12:22,199
near the high end of cost here so simple

346
00:12:20,699 --> 00:12:25,079
things like underscore could just be a

347
00:12:22,199 --> 00:12:26,819
couple couple kilobytes big things like

348
00:12:25,079 --> 00:12:29,370
the d3 charting library is 70 kilobytes

349
00:12:26,819 --> 00:12:30,750
boomerang ends it ends up at around 47

350
00:12:29,370 --> 00:12:34,769
kilobytes so little less than 50

351
00:12:30,750 --> 00:12:35,759
kilobytes it's big honestly this is one

352
00:12:34,769 --> 00:12:39,089
of the things that we thought we could

353
00:12:35,759 --> 00:12:40,980
improve on we are doing a lot of things

354
00:12:39,089 --> 00:12:42,569
in the library but maybe there's ways

355
00:12:40,980 --> 00:12:48,180
for us to and have it not be such a big

356
00:12:42,569 --> 00:12:49,979
library also I did want to point out

357
00:12:48,180 --> 00:12:51,839
that the bill that I was talking about

358
00:12:49,980 --> 00:12:53,160
is the empal specific version of

359
00:12:51,839 --> 00:12:54,569
boomerang which is a pretty big build

360
00:12:53,160 --> 00:12:56,309
for all of our customers if you're using

361
00:12:54,569 --> 00:12:58,019
the open-source version of boomerang you

362
00:12:56,309 --> 00:12:59,399
can choose to build it smaller we have a

363
00:12:58,019 --> 00:13:01,709
plug-in architecture and you can choose

364
00:12:59,399 --> 00:13:03,209
which plugins to include or not so if

365
00:13:01,709 --> 00:13:04,589
you don't need single page app support

366
00:13:03,209 --> 00:13:06,660
in JavaScript air tracking that we

367
00:13:04,589 --> 00:13:11,579
include for EM pulse you could trim it

368
00:13:06,660 --> 00:13:12,929
down to about half the size even okay so

369
00:13:11,579 --> 00:13:14,219
now the browsers downloaded your

370
00:13:12,929 --> 00:13:15,870
JavaScript bytes what does that have to

371
00:13:14,220 --> 00:13:17,839
do actually has to parse and compile it

372
00:13:15,870 --> 00:13:21,000
I can do this before it runs any of it

373
00:13:17,839 --> 00:13:21,730
the main idea here is the more bytes it

374
00:13:21,000 --> 00:13:25,149
is the more

375
00:13:21,730 --> 00:13:26,559
to compile etc so again you want to

376
00:13:25,149 --> 00:13:29,739
minimize bite costs because this does

377
00:13:26,559 --> 00:13:31,209
have a cost for us for boomerang you

378
00:13:29,739 --> 00:13:33,480
know in a modern browser modern device

379
00:13:31,209 --> 00:13:36,128
it's ten milliseconds or so so not a lot

380
00:13:33,480 --> 00:13:38,980
but some of the bigger libraries like

381
00:13:36,129 --> 00:13:41,199
angular can be quite a bit more 2025

382
00:13:38,980 --> 00:13:43,720
milliseconds to to just get it ready

383
00:13:41,199 --> 00:13:45,309
before you before it even runs so again

384
00:13:43,720 --> 00:13:50,019
building a smaller library can really

385
00:13:45,309 --> 00:13:51,910
help with a lot of this okay second last

386
00:13:50,019 --> 00:13:53,439
phase is initialization so this is when

387
00:13:51,910 --> 00:13:56,199
the browser has everything ready and it

388
00:13:53,439 --> 00:13:57,519
hits run on the script every for every

389
00:13:56,199 --> 00:13:58,809
script this is different right this is

390
00:13:57,519 --> 00:14:00,819
what they're doing on the page they

391
00:13:58,809 --> 00:14:03,009
might be registering global variables or

392
00:14:00,819 --> 00:14:04,358
hooking into different events etc they

393
00:14:03,009 --> 00:14:06,579
might be fetching more resources maybe

394
00:14:04,359 --> 00:14:08,829
it's a social widget hopefully it's only

395
00:14:06,579 --> 00:14:10,660
doing what you're asking it to do in our

396
00:14:08,829 --> 00:14:12,579
case for boomerang again we register a

397
00:14:10,660 --> 00:14:13,868
couple variables and listen for the

398
00:14:12,579 --> 00:14:15,008
onload event and some other events

399
00:14:13,869 --> 00:14:17,619
depending on the features that are

400
00:14:15,009 --> 00:14:20,259
enabled we don't do a lot of work here

401
00:14:17,619 --> 00:14:23,529
only 10 milliseconds or so not too bad I

402
00:14:20,259 --> 00:14:25,209
would say we did find a couple ideas for

403
00:14:23,529 --> 00:14:27,100
improvements here we might defer some of

404
00:14:25,209 --> 00:14:28,779
the work that we're doing we might break

405
00:14:27,100 --> 00:14:32,619
up some of the work that we're doing but

406
00:14:28,779 --> 00:14:34,449
not not too bad overall and then finally

407
00:14:32,619 --> 00:14:36,819
the run time of the script itself so

408
00:14:34,449 --> 00:14:39,549
again depends on exactly on what you're

409
00:14:36,819 --> 00:14:41,709
using the script for if you if it's a

410
00:14:39,549 --> 00:14:43,299
utility script maybe you're calling into

411
00:14:41,709 --> 00:14:44,768
it quite a bit if it's a social widget

412
00:14:43,299 --> 00:14:47,259
maybe it's loading all the likes for

413
00:14:44,769 --> 00:14:49,119
something maybe you have a Bitcoin miner

414
00:14:47,259 --> 00:14:51,220
it's mining Bitcoin for whatever reason

415
00:14:49,119 --> 00:14:52,989
for us

416
00:14:51,220 --> 00:14:55,029
boomerang this is where boomerang does

417
00:14:52,989 --> 00:14:56,709
the majority of its work so after the

418
00:14:55,029 --> 00:14:58,449
page load is happened we look at all the

419
00:14:56,709 --> 00:15:00,160
performance data for that page we

420
00:14:58,449 --> 00:15:01,868
package it up we compress it we put it

421
00:15:00,160 --> 00:15:03,219
on the beacon and we send it out so

422
00:15:01,869 --> 00:15:04,539
we're capturing things like all the

423
00:15:03,220 --> 00:15:07,179
resources that were fetched on the page

424
00:15:04,539 --> 00:15:09,939
how long have agait what the DNS time

425
00:15:07,179 --> 00:15:11,529
was and a lot of other things like that

426
00:15:09,939 --> 00:15:14,649
if there were any JavaScript errors we

427
00:15:11,529 --> 00:15:16,480
package those up in symbols as well in a

428
00:15:14,649 --> 00:15:18,459
lot of cases and on most sites this

429
00:15:16,480 --> 00:15:22,689
wasn't taking too long say less than 50

430
00:15:18,459 --> 00:15:24,429
milliseconds but we did find in some

431
00:15:22,689 --> 00:15:26,469
some examples especially on lower-end

432
00:15:24,429 --> 00:15:28,358
devices and more complex web pages that

433
00:15:26,470 --> 00:15:30,159
we were taking 300 milliseconds or more

434
00:15:28,359 --> 00:15:31,629
and that's starting to get into the

435
00:15:30,159 --> 00:15:33,489
territory of people would notice that

436
00:15:31,629 --> 00:15:34,760
there's a visitor we noticed that that

437
00:15:33,489 --> 00:15:38,060
we would be affecting act

438
00:15:34,760 --> 00:15:39,439
the performance of the page so this is

439
00:15:38,060 --> 00:15:40,849
one of the areas that we flagged that we

440
00:15:39,440 --> 00:15:42,770
really wanted to get into and figure out

441
00:15:40,850 --> 00:15:47,140
if we can improve and I'll talk about

442
00:15:42,770 --> 00:15:47,140
some of the things that we found later

443
00:15:49,390 --> 00:15:53,630
so one thing I did want to point out

444
00:15:51,500 --> 00:15:55,580
really quick too is all of the bold

445
00:15:53,630 --> 00:15:58,250
faces up there are cut part of the

446
00:15:55,580 --> 00:16:00,530
critical path of the browser using your

447
00:15:58,250 --> 00:16:02,060
JavaScript all the things that there are

448
00:16:00,530 --> 00:16:05,060
generally done serially on the main

449
00:16:02,060 --> 00:16:07,280
thread depending on the browser but any

450
00:16:05,060 --> 00:16:09,410
any of these things that you're doing

451
00:16:07,280 --> 00:16:11,180
here are affecting the rest of the site

452
00:16:09,410 --> 00:16:12,860
being built and if the user is trying to

453
00:16:11,180 --> 00:16:14,719
interact with the page or potentially in

454
00:16:12,860 --> 00:16:17,930
are affecting their interactions so

455
00:16:14,720 --> 00:16:19,400
you're delaying the user input etc so

456
00:16:17,930 --> 00:16:20,750
what you really want to do when you have

457
00:16:19,400 --> 00:16:22,250
a third-party library of script like

458
00:16:20,750 --> 00:16:24,740
this minimize the work that you're doing

459
00:16:22,250 --> 00:16:26,180
break it up if you if you know you need

460
00:16:24,740 --> 00:16:28,460
to do a really big calculation try to

461
00:16:26,180 --> 00:16:31,939
break it up into pieces this avoids

462
00:16:28,460 --> 00:16:33,140
things called long tasks which are tasks

463
00:16:31,940 --> 00:16:35,480
that are running on the main browser

464
00:16:33,140 --> 00:16:36,860
thread that would potentially block user

465
00:16:35,480 --> 00:16:38,390
input if they're trying to click or

466
00:16:36,860 --> 00:16:43,490
scroll it would make for a

467
00:16:38,390 --> 00:16:45,470
non-responsive user experience so after

468
00:16:43,490 --> 00:16:46,850
everything that I said these are kind of

469
00:16:45,470 --> 00:16:49,550
the numbers that we came up with at the

470
00:16:46,850 --> 00:16:51,080
end we did a lot of investigations and a

471
00:16:49,550 --> 00:16:53,390
lot of different sites we took a lot of

472
00:16:51,080 --> 00:16:56,270
profiles we wrote about it we published

473
00:16:53,390 --> 00:16:59,120
it in a blog post and these are kind of

474
00:16:56,270 --> 00:17:00,860
the TLDR costs of boomerang so the

475
00:16:59,120 --> 00:17:03,980
loader snippet you know generally only a

476
00:17:00,860 --> 00:17:06,770
few milliseconds on some browsers it can

477
00:17:03,980 --> 00:17:09,470
be up to 40 milliseconds downloading

478
00:17:06,770 --> 00:17:10,849
we're about 50 kilobytes or less parsing

479
00:17:09,470 --> 00:17:12,319
again it's related to the size of

480
00:17:10,849 --> 00:17:13,849
boomerang and this is kind of like the

481
00:17:12,319 --> 00:17:16,849
low end to high end devices when we were

482
00:17:13,849 --> 00:17:19,639
looking at it anywhere from 6 to 47

483
00:17:16,849 --> 00:17:22,579
milliseconds initialization again less

484
00:17:19,640 --> 00:17:23,870
than 15 milliseconds onload depending on

485
00:17:22,579 --> 00:17:25,010
the work on the page we can be doing a

486
00:17:23,869 --> 00:17:26,569
lot of work here we could be spending

487
00:17:25,010 --> 00:17:28,670
upwards of 300 milliseconds which is

488
00:17:26,569 --> 00:17:30,200
quite a bit and then we package all the

489
00:17:28,670 --> 00:17:31,490
data I didn't really talk about the

490
00:17:30,200 --> 00:17:34,100
beacon much but we have to send the data

491
00:17:31,490 --> 00:17:35,900
somewhere right this could be anywhere

492
00:17:34,100 --> 00:17:37,370
from 2 to 20 kilobytes or more depending

493
00:17:35,900 --> 00:17:39,980
on the complexity of the page itself

494
00:17:37,370 --> 00:17:41,389
that we're looking at so an important

495
00:17:39,980 --> 00:17:42,770
output of this too was we filed bugs

496
00:17:41,390 --> 00:17:44,570
everything that we found every little

497
00:17:42,770 --> 00:17:46,700
trace that we looked at idea big or

498
00:17:44,570 --> 00:17:47,779
small we filed bugs within our github

499
00:17:46,700 --> 00:17:49,099
repo we can

500
00:17:47,779 --> 00:17:51,019
we check them all out there it's ray on

501
00:17:49,099 --> 00:17:52,749
github and since then we've been trying

502
00:17:51,019 --> 00:17:54,859
to make steady progress and fixing these

503
00:17:52,749 --> 00:17:56,899
so I'll go over a sample of some of

504
00:17:54,859 --> 00:17:58,849
those in a little bit but one thing I

505
00:17:56,899 --> 00:18:00,289
did want to chat about really briefly is

506
00:17:58,849 --> 00:18:03,859
just the tooling some of the tools that

507
00:18:00,289 --> 00:18:05,749
we use to do some of this evaluation so

508
00:18:03,859 --> 00:18:07,549
we really heavily relied on browser

509
00:18:05,749 --> 00:18:08,809
developer tools all the default all the

510
00:18:07,549 --> 00:18:11,179
browsers today have really good

511
00:18:08,809 --> 00:18:12,379
developer tools we use profilers and all

512
00:18:11,179 --> 00:18:14,080
the different profilers because all

513
00:18:12,379 --> 00:18:16,668
browsers behave slightly differently I

514
00:18:14,080 --> 00:18:19,039
know that many of you maybe some of you

515
00:18:16,669 --> 00:18:21,469
are not super comfortable with things

516
00:18:19,039 --> 00:18:22,700
like profilers but they can really give

517
00:18:21,469 --> 00:18:24,259
you the insight that you would need to

518
00:18:22,700 --> 00:18:27,859
really look at a third party script into

519
00:18:24,259 --> 00:18:31,159
evaluator so profilers can can show

520
00:18:27,859 --> 00:18:32,629
opportunities my advice is if you're new

521
00:18:31,159 --> 00:18:34,429
to profilers if you want to look at it

522
00:18:32,629 --> 00:18:37,009
but just don't know where to start take

523
00:18:34,429 --> 00:18:38,359
your time look at the big picture try to

524
00:18:37,009 --> 00:18:40,789
load like a third party script on a

525
00:18:38,359 --> 00:18:42,379
blank page and see what it does and look

526
00:18:40,789 --> 00:18:44,089
for the extremes look for the longest

527
00:18:42,379 --> 00:18:46,158
amount of time of something being run or

528
00:18:44,089 --> 00:18:47,779
the largest call stack those can really

529
00:18:46,159 --> 00:18:50,739
point to different opportunities or

530
00:18:47,779 --> 00:18:52,999
places that are not performing the best

531
00:18:50,739 --> 00:18:55,960
there's a lot of other free open-source

532
00:18:52,999 --> 00:18:58,070
tools for evaluating different libraries

533
00:18:55,960 --> 00:18:59,899
lighthouse from chrome obviously is a

534
00:18:58,070 --> 00:19:02,629
fantastic resource request map that I

535
00:18:59,899 --> 00:19:05,029
talked about earlier webpage tests the

536
00:19:02,629 --> 00:19:06,289
list goes on and on I also have a tool

537
00:19:05,029 --> 00:19:08,089
that I've made called third-party IO

538
00:19:06,289 --> 00:19:09,589
that helps you audit third-party scripts

539
00:19:08,089 --> 00:19:14,570
and I'll show you more about that later

540
00:19:09,589 --> 00:19:16,009
so as I said you know we perform this

541
00:19:14,570 --> 00:19:20,389
audit but one of the main takeaways out

542
00:19:16,009 --> 00:19:21,679
of it was we wanted to improve right so

543
00:19:20,389 --> 00:19:24,168
along the way we filed a lot of

544
00:19:21,679 --> 00:19:26,210
different ideas for improvements I'm

545
00:19:24,169 --> 00:19:27,440
going to go over some of those I don't

546
00:19:26,210 --> 00:19:29,029
think they're going to be appropriate

547
00:19:27,440 --> 00:19:31,039
for everybody you may not care for some

548
00:19:29,029 --> 00:19:32,419
of these I think a lot of them are

549
00:19:31,039 --> 00:19:33,919
somewhat interesting and maybe it'll

550
00:19:32,419 --> 00:19:35,659
trigger a little bit of thoughts if

551
00:19:33,919 --> 00:19:37,429
you're working on a on a library or a

552
00:19:35,659 --> 00:19:38,570
script for some ideas of ways that you

553
00:19:37,429 --> 00:19:40,669
can improve yourselves but it's also

554
00:19:38,570 --> 00:19:43,549
just kind of good to understand some of

555
00:19:40,669 --> 00:19:44,749
the ways that you can improve so one of

556
00:19:43,549 --> 00:19:46,549
the things I talked about initially was

557
00:19:44,749 --> 00:19:48,409
our loader snippet again this the

558
00:19:46,549 --> 00:19:50,269
snippet that we give our customers helps

559
00:19:48,409 --> 00:19:51,950
make sure that boomerang is loaded in a

560
00:19:50,269 --> 00:19:54,169
non-blocking manner but it's expensive

561
00:19:51,950 --> 00:19:55,429
it takes a lot of time to run we

562
00:19:54,169 --> 00:19:56,659
actually looked at some of the features

563
00:19:55,429 --> 00:19:58,580
of modern browsers and we found

564
00:19:56,659 --> 00:19:59,800
something that allows us to rut to load

565
00:19:58,580 --> 00:20:02,740
boomerang in a non

566
00:19:59,800 --> 00:20:04,389
cocking manner that's much cheaper so if

567
00:20:02,740 --> 00:20:07,000
the browser supports a preload feature

568
00:20:04,390 --> 00:20:08,500
we actually can rely in pre load to load

569
00:20:07,000 --> 00:20:11,050
boomerang in a way that's a lot better

570
00:20:08,500 --> 00:20:12,430
in this case instead of 40 milliseconds

571
00:20:11,050 --> 00:20:14,110
only takes a millisecond it's basically

572
00:20:12,430 --> 00:20:16,570
a no op you can barely see in the

573
00:20:14,110 --> 00:20:17,860
profiler anymore so a lot of research

574
00:20:16,570 --> 00:20:20,230
was done into looking into this

575
00:20:17,860 --> 00:20:21,820
methodology while we tested it on a ton

576
00:20:20,230 --> 00:20:22,990
of websites we're still kind of

577
00:20:21,820 --> 00:20:24,970
deploying it out to some of our

578
00:20:22,990 --> 00:20:27,100
customers and stuff like that

579
00:20:24,970 --> 00:20:28,690
we've documented all this in in our

580
00:20:27,100 --> 00:20:30,909
boomerang documentation but it was a big

581
00:20:28,690 --> 00:20:32,980
win for us to be able to point to our

582
00:20:30,910 --> 00:20:34,660
new methodology that is still allowing

583
00:20:32,980 --> 00:20:39,340
you to load the script in a non-blocking

584
00:20:34,660 --> 00:20:40,960
way but be way cheaper the other big

585
00:20:39,340 --> 00:20:42,459
area that I pointed out was we were

586
00:20:40,960 --> 00:20:43,840
doing a lot of work during the onload

587
00:20:42,460 --> 00:20:45,670
event this is when we're capturing all

588
00:20:43,840 --> 00:20:46,990
the performance data on the page we're

589
00:20:45,670 --> 00:20:49,590
compressing it putting out the beacon

590
00:20:46,990 --> 00:20:51,310
and sending it back out to our back-end

591
00:20:49,590 --> 00:20:53,560
unfortunately this is also one of the

592
00:20:51,310 --> 00:20:54,909
most expensive things that we did so one

593
00:20:53,560 --> 00:20:56,290
of the things that we found is we

594
00:20:54,910 --> 00:20:57,790
actually captured all of the resources

595
00:20:56,290 --> 00:20:59,950
that were fetched on the page we look at

596
00:20:57,790 --> 00:21:02,530
all their timings we save all the URLs

597
00:20:59,950 --> 00:21:04,840
we compress them and then put them on

598
00:21:02,530 --> 00:21:06,280
the beacon this allows our customers and

599
00:21:04,840 --> 00:21:09,040
open-source users to look at the full

600
00:21:06,280 --> 00:21:12,790
waterfall for a page load for every

601
00:21:09,040 --> 00:21:14,200
single page that is measured we compress

602
00:21:12,790 --> 00:21:17,050
it down because it's Auto otherwise it's

603
00:21:14,200 --> 00:21:21,340
really big a lot of data but this was

604
00:21:17,050 --> 00:21:22,330
taking a long time to do so what we we

605
00:21:21,340 --> 00:21:24,939
looked up we took a look at the

606
00:21:22,330 --> 00:21:26,439
algorithm we tried to figure out ways

607
00:21:24,940 --> 00:21:29,140
that we can improve it and we actually

608
00:21:26,440 --> 00:21:31,000
decided that I found a way that we could

609
00:21:29,140 --> 00:21:34,440
decrease the efficiency of it slightly

610
00:21:31,000 --> 00:21:36,820
so it gets about maybe 2 percent larger

611
00:21:34,440 --> 00:21:38,740
payloads than before so a little bit

612
00:21:36,820 --> 00:21:42,340
less sufficient and depressing but it

613
00:21:38,740 --> 00:21:43,660
was four times faster to run so just

614
00:21:42,340 --> 00:21:47,080
this little tweak of the algorithm we

615
00:21:43,660 --> 00:21:49,120
thought that trade-off obviously of 4x

616
00:21:47,080 --> 00:21:52,030
speed-up is worth it for them for the

617
00:21:49,120 --> 00:21:53,590
minimal cost in the size of the bytes so

618
00:21:52,030 --> 00:21:54,790
and a lot of the sites the you know the

619
00:21:53,590 --> 00:21:56,020
sites that were taken 300 plus

620
00:21:54,790 --> 00:21:59,560
milliseconds are now under 100

621
00:21:56,020 --> 00:22:02,440
milliseconds 75 milliseconds etcetera so

622
00:21:59,560 --> 00:22:06,340
that was a big win for us another big

623
00:22:02,440 --> 00:22:08,020
area of thing a big thing that we want

624
00:22:06,340 --> 00:22:10,020
to focus on was just reducing the size

625
00:22:08,020 --> 00:22:12,240
of boomerang in general

626
00:22:10,020 --> 00:22:14,639
we actually had quite a few improvements

627
00:22:12,240 --> 00:22:16,080
in this area for one example we actually

628
00:22:14,640 --> 00:22:18,300
had an open source community member

629
00:22:16,080 --> 00:22:20,090
notice that we include a lot of debug

630
00:22:18,300 --> 00:22:21,810
messages even in our production builds

631
00:22:20,090 --> 00:22:24,149
these are things that we use in our

632
00:22:21,810 --> 00:22:25,889
debug builds to like understand what's

633
00:22:24,150 --> 00:22:27,240
going on better but the messages even

634
00:22:25,890 --> 00:22:29,040
though they would never be used were put

635
00:22:27,240 --> 00:22:30,870
into our production builds so we

636
00:22:29,040 --> 00:22:33,210
stripped all those out saved 6% of the

637
00:22:30,870 --> 00:22:35,580
bytes we did other things like change

638
00:22:33,210 --> 00:22:37,980
our mini fire from uglify to 2/3 it's

639
00:22:35,580 --> 00:22:40,710
saved a couple bites we weren't using

640
00:22:37,980 --> 00:22:43,710
bratli before we were just gzipping our

641
00:22:40,710 --> 00:22:46,260
content luckily the Akamai CDN knows how

642
00:22:43,710 --> 00:22:47,970
to do bratli so we enabled that so that

643
00:22:46,260 --> 00:22:50,850
was a really easy cheap one for us to do

644
00:22:47,970 --> 00:22:52,320
saved 11 percent of the bytes and then

645
00:22:50,850 --> 00:22:54,840
we did things like refactoring our

646
00:22:52,320 --> 00:22:57,240
plugins so we we have things like RS PA

647
00:22:54,840 --> 00:22:59,280
and our MDI md5 plugin we're able to

648
00:22:57,240 --> 00:23:00,630
shrink those down tremendously and save

649
00:22:59,280 --> 00:23:03,629
a few more bites there and I'll show you

650
00:23:00,630 --> 00:23:05,010
some of the details about that in a bit

651
00:23:03,630 --> 00:23:06,870
one other thing I didn't talk about too

652
00:23:05,010 --> 00:23:08,840
much I didn't talk about Adalia is for

653
00:23:06,870 --> 00:23:11,129
cookie so we set a first-party cookie

654
00:23:08,840 --> 00:23:14,129
and all of the pages that were on to

655
00:23:11,130 --> 00:23:15,570
help measure sessions so this is how

656
00:23:14,130 --> 00:23:18,180
many pages that person visited on your

657
00:23:15,570 --> 00:23:19,950
website for example our customers want

658
00:23:18,180 --> 00:23:21,930
the cookie to be as small as possible

659
00:23:19,950 --> 00:23:25,470
and in some cases we're over a kilobyte

660
00:23:21,930 --> 00:23:27,210
dig we found some ways to reduce the

661
00:23:25,470 --> 00:23:29,880
size of the cookie for example instead

662
00:23:27,210 --> 00:23:31,380
of storing the full URL of the page we

663
00:23:29,880 --> 00:23:33,420
hash it and destroy the hash because we

664
00:23:31,380 --> 00:23:36,300
do comparisons of URLs and in various

665
00:23:33,420 --> 00:23:38,760
places anyway at the end of the day we

666
00:23:36,300 --> 00:23:39,690
ended up making it 41% smaller which

667
00:23:38,760 --> 00:23:44,910
should a lot of our customers were happy

668
00:23:39,690 --> 00:23:46,260
about and then another thing that we

669
00:23:44,910 --> 00:23:48,810
found what profiling it was we are

670
00:23:46,260 --> 00:23:50,940
reading and writing the cookie a lot we

671
00:23:48,810 --> 00:23:53,429
were doing 21 reads of the cookie and a

672
00:23:50,940 --> 00:23:55,830
traditional on a regular page load we

673
00:23:53,430 --> 00:23:57,390
reduced that to two and we're doing

674
00:23:55,830 --> 00:23:58,830
eight writes and we reduced that down to

675
00:23:57,390 --> 00:24:02,220
four so we just said you know made it a

676
00:23:58,830 --> 00:24:04,110
lot more efficient and then the final

677
00:24:02,220 --> 00:24:06,630
big area approvement that we did was

678
00:24:04,110 --> 00:24:08,459
just simplifying our plugins one of this

679
00:24:06,630 --> 00:24:11,010
one of the things here was we actually

680
00:24:08,460 --> 00:24:13,830
were using md5 to do hashes of things

681
00:24:11,010 --> 00:24:16,770
like URLs one of our developers found a

682
00:24:13,830 --> 00:24:19,620
replacement for md5 that is about five

683
00:24:16,770 --> 00:24:21,820
percent of the size of md5 and three

684
00:24:19,620 --> 00:24:25,120
times faster and for our needs

685
00:24:21,820 --> 00:24:27,370
it provided just as good hashes as md5

686
00:24:25,120 --> 00:24:30,399
was so that's gave us a really big bite

687
00:24:27,370 --> 00:24:32,649
savings and speed up and then we did

688
00:24:30,400 --> 00:24:35,080
another kind of refactoring of our

689
00:24:32,650 --> 00:24:38,170
single page application plugin that just

690
00:24:35,080 --> 00:24:39,790
made it smaller as well so with all that

691
00:24:38,170 --> 00:24:42,190
we actually have some improvements from

692
00:24:39,790 --> 00:24:44,230
the numbers I showed up earlier so the

693
00:24:42,190 --> 00:24:47,320
loader snippet and modern browsers is

694
00:24:44,230 --> 00:24:49,150
generally only a millisecond or less I

695
00:24:47,320 --> 00:24:51,580
talked about a lot of different ways

696
00:24:49,150 --> 00:24:54,520
that we reduced the size of boomerang

697
00:24:51,580 --> 00:24:56,139
from all those changes if you can see

698
00:24:54,520 --> 00:24:58,720
the number here it's actually the same

699
00:24:56,140 --> 00:25:00,070
size right now we also worked on your

700
00:24:58,720 --> 00:25:01,300
features in the meantime and those new

701
00:25:00,070 --> 00:25:03,370
features ended up eating a lot of the

702
00:25:01,300 --> 00:25:04,419
bite savings that we did over the same

703
00:25:03,370 --> 00:25:06,550
period so it's definitely something

704
00:25:04,420 --> 00:25:08,290
you've got to keep an eye out for is the

705
00:25:06,550 --> 00:25:12,340
needs of performance versus the needs of

706
00:25:08,290 --> 00:25:14,080
new features etc can often take away all

707
00:25:12,340 --> 00:25:15,490
the improvements that you're making so

708
00:25:14,080 --> 00:25:17,110
it's still something that we're focusing

709
00:25:15,490 --> 00:25:19,750
on and we have other ideas for reducing

710
00:25:17,110 --> 00:25:20,860
the size of it but I guess another way

711
00:25:19,750 --> 00:25:22,210
to look at it is it would be a lot

712
00:25:20,860 --> 00:25:24,760
bigger now with all these new features

713
00:25:22,210 --> 00:25:26,950
had we not spent the time to also do

714
00:25:24,760 --> 00:25:28,570
other improvements and then the big

715
00:25:26,950 --> 00:25:31,870
other big section was the onload event

716
00:25:28,570 --> 00:25:33,159
we made it a lot faster there's still a

717
00:25:31,870 --> 00:25:34,959
lot of opportunities here if you take a

718
00:25:33,160 --> 00:25:36,970
look at this list these are things that

719
00:25:34,960 --> 00:25:39,430
we still want to make better we want to

720
00:25:36,970 --> 00:25:42,430
make faster if possible and we're hoping

721
00:25:39,430 --> 00:25:43,990
to focus in 2020 and Beyond and further

722
00:25:42,430 --> 00:25:46,360
reducing the size of boomerang for

723
00:25:43,990 --> 00:25:47,770
they're reducing the overhead making it

724
00:25:46,360 --> 00:25:50,350
more efficient making it much less

725
00:25:47,770 --> 00:25:52,030
likely to have an observer effect for

726
00:25:50,350 --> 00:25:53,730
any website they're on again we're

727
00:25:52,030 --> 00:25:59,050
tracking all these improvements in

728
00:25:53,730 --> 00:26:00,730
github and one thing that we kind of

729
00:25:59,050 --> 00:26:04,090
focus on for and I thought was a really

730
00:26:00,730 --> 00:26:06,700
good quote from Rico Mariani from

731
00:26:04,090 --> 00:26:08,679
Microsoft is it in a mature product with

732
00:26:06,700 --> 00:26:11,980
a healthy process you're much more

733
00:26:08,680 --> 00:26:15,340
likely to see a 50% gain come in the

734
00:26:11,980 --> 00:26:16,810
form of many 5% games compounding in

735
00:26:15,340 --> 00:26:18,610
other words you're not always gonna find

736
00:26:16,810 --> 00:26:19,600
the like really big low-hanging fruit

737
00:26:18,610 --> 00:26:22,449
that's just gonna make it 50 percent

738
00:26:19,600 --> 00:26:24,459
faster right it's going to take constant

739
00:26:22,450 --> 00:26:26,500
constant iteration finding little things

740
00:26:24,460 --> 00:26:27,700
doing little tweaks here and there and

741
00:26:26,500 --> 00:26:28,600
make improvements over time and

742
00:26:27,700 --> 00:26:31,020
continuing to make those improvements

743
00:26:28,600 --> 00:26:31,020
over time

744
00:26:31,730 --> 00:26:34,730
so another important thing to us is now

745
00:26:33,890 --> 00:26:36,170
that we've made all these improvements

746
00:26:34,730 --> 00:26:38,300
how can we make sure that we don't

747
00:26:36,170 --> 00:26:40,670
accidentally regress later right it's

748
00:26:38,300 --> 00:26:43,460
very easy to undo your hard work with a

749
00:26:40,670 --> 00:26:44,900
few couple mistakes one of the things

750
00:26:43,460 --> 00:26:46,490
that we worked on was what we call our

751
00:26:44,900 --> 00:26:48,830
boomerang performance lab which is just

752
00:26:46,490 --> 00:26:51,410
a suite of tests that we run in our CI

753
00:26:48,830 --> 00:26:53,210
environment it's a bunch of scenarios

754
00:26:51,410 --> 00:26:56,150
simple scenarios and metrics that we

755
00:26:53,210 --> 00:26:58,210
capture with a headless browser we do

756
00:26:56,150 --> 00:27:01,100
things like looking at the CPU time of

757
00:26:58,210 --> 00:27:04,760
the profiles for all the work that we're

758
00:27:01,100 --> 00:27:06,530
doing we have various counts and and

759
00:27:04,760 --> 00:27:08,540
durations that were measuring just using

760
00:27:06,530 --> 00:27:09,860
user timing marks and measures and we

761
00:27:08,540 --> 00:27:11,420
just look at simple things like the code

762
00:27:09,860 --> 00:27:16,250
size that we have and we can plot this

763
00:27:11,420 --> 00:27:18,010
over time another way of protecting the

764
00:27:16,250 --> 00:27:20,720
line is looking at real time telemetry

765
00:27:18,010 --> 00:27:23,030
so you could if if you are already

766
00:27:20,720 --> 00:27:24,800
sending data if from your library you

767
00:27:23,030 --> 00:27:26,379
could look at things like runtime stats

768
00:27:24,800 --> 00:27:29,270
for different events that you're doing

769
00:27:26,380 --> 00:27:31,880
whether you're triggering any long tasks

770
00:27:29,270 --> 00:27:34,520
for us for example we actually capture

771
00:27:31,880 --> 00:27:36,350
all of the errors that we throw within

772
00:27:34,520 --> 00:27:38,060
our own code we have a big trycatch

773
00:27:36,350 --> 00:27:39,500
around everything essentially that we

774
00:27:38,060 --> 00:27:41,450
package that onto the beacon and send

775
00:27:39,500 --> 00:27:43,160
them into our real-time dashboards so we

776
00:27:41,450 --> 00:27:44,810
can see in real time as new versions of

777
00:27:43,160 --> 00:27:46,370
boomerang come out as new customers come

778
00:27:44,810 --> 00:27:48,980
online as new browsers come out and

779
00:27:46,370 --> 00:27:51,739
break things what's happening with the

780
00:27:48,980 --> 00:27:52,760
health of our library in real time so

781
00:27:51,740 --> 00:27:54,050
these are all the different JavaScript

782
00:27:52,760 --> 00:27:57,860
error messages that we're seeing

783
00:27:54,050 --> 00:27:59,360
recently so if you have a if you have

784
00:27:57,860 --> 00:28:01,159
all this data it can really provide an

785
00:27:59,360 --> 00:28:03,620
answer into the provider look into the

786
00:28:01,160 --> 00:28:05,150
health of your system and finally there

787
00:28:03,620 --> 00:28:06,919
is a really cool new API out there

788
00:28:05,150 --> 00:28:09,410
called the JavaScript self profiling API

789
00:28:06,920 --> 00:28:11,330
you could use this for your website

790
00:28:09,410 --> 00:28:13,310
it's an origin trial right now but it

791
00:28:11,330 --> 00:28:15,350
lets you actually get sampled profile

792
00:28:13,310 --> 00:28:17,210
traces in the wild from a subset of your

793
00:28:15,350 --> 00:28:18,980
visitors and so if you have a way of

794
00:28:17,210 --> 00:28:21,400
looking at these sample profiles in

795
00:28:18,980 --> 00:28:24,110
aggregate you can kind of get a sense of

796
00:28:21,400 --> 00:28:26,480
how expensive your code is running in

797
00:28:24,110 --> 00:28:28,600
real time not just on your developer

798
00:28:26,480 --> 00:28:34,430
machine

799
00:28:28,600 --> 00:28:36,919
so that's what we did what can what can

800
00:28:34,430 --> 00:28:38,300
you do let's say again your boss comes

801
00:28:36,920 --> 00:28:41,720
to you and wants you to add a new script

802
00:28:38,300 --> 00:28:43,159
to your page what should you do well you

803
00:28:41,720 --> 00:28:44,300
can perform a lightweight performance on

804
00:28:43,160 --> 00:28:45,410
it you don't have to do all the stuff

805
00:28:44,300 --> 00:28:45,649
that we did you don't have to go into

806
00:28:45,410 --> 00:28:48,200
that

807
00:28:45,650 --> 00:28:49,910
depth of it but it can be useful just to

808
00:28:48,200 --> 00:28:50,870
see you exactly what that script is

809
00:28:49,910 --> 00:28:54,080
doing when you're putting it on your

810
00:28:50,870 --> 00:28:55,820
page put it in an empty page and take a

811
00:28:54,080 --> 00:28:59,179
profile trace see what it does see what

812
00:28:55,820 --> 00:29:02,689
it loads make sure that its benefits are

813
00:28:59,180 --> 00:29:04,760
outweighing its costs I think you should

814
00:29:02,690 --> 00:29:06,470
also try to ask the vendor have you

815
00:29:04,760 --> 00:29:09,170
performed for a performance audit have

816
00:29:06,470 --> 00:29:11,180
what how does your library perform I

817
00:29:09,170 --> 00:29:12,980
think it's good for us as a community to

818
00:29:11,180 --> 00:29:15,110
all share this information to be

819
00:29:12,980 --> 00:29:18,110
transparent I think it'll help everybody

820
00:29:15,110 --> 00:29:20,360
everybody here I'm a little opinionated

821
00:29:18,110 --> 00:29:23,120
on that but I think it'd be great if

822
00:29:20,360 --> 00:29:24,530
other people did this as well and then

823
00:29:23,120 --> 00:29:26,929
you know every library that you include

824
00:29:24,530 --> 00:29:28,490
on your page try to have an owner the

825
00:29:26,930 --> 00:29:30,800
internal champion that knows about that

826
00:29:28,490 --> 00:29:33,080
script why it's there what it's doing

827
00:29:30,800 --> 00:29:34,430
and when can you remove it if you have

828
00:29:33,080 --> 00:29:36,409
somebody that really knows this or if

829
00:29:34,430 --> 00:29:38,210
you've documented this somewhere it can

830
00:29:36,410 --> 00:29:39,920
really help with the overall life of

831
00:29:38,210 --> 00:29:43,330
like a web application for all the

832
00:29:39,920 --> 00:29:43,330
different apps that are being included

833
00:29:43,840 --> 00:29:47,449
besides just all the performance stuff

834
00:29:46,100 --> 00:29:48,649
that you could see in a profiler there's

835
00:29:47,450 --> 00:29:51,440
a lot of other things third-party

836
00:29:48,650 --> 00:29:53,690
scripts should be doing they're pretty

837
00:29:51,440 --> 00:29:56,210
much like a checklist of best practices

838
00:29:53,690 --> 00:29:58,670
right so try to load the script from a

839
00:29:56,210 --> 00:30:00,470
CDN or your own CDN make sure it's

840
00:29:58,670 --> 00:30:01,660
compressed make sure it's minified make

841
00:30:00,470 --> 00:30:04,340
sure it has the right caching headers

842
00:30:01,660 --> 00:30:06,800
make sure it's minimizing the amount of

843
00:30:04,340 --> 00:30:08,570
work that it's doing from CPU and from

844
00:30:06,800 --> 00:30:09,919
the network

845
00:30:08,570 --> 00:30:12,080
make sure it's minimally touching the

846
00:30:09,920 --> 00:30:13,640
Dom etc and then make sure it's not

847
00:30:12,080 --> 00:30:15,080
doing a bunch of things too so make sure

848
00:30:13,640 --> 00:30:16,430
it's not triggering JavaScript errors

849
00:30:15,080 --> 00:30:18,020
make sure it doesn't have the debugger

850
00:30:16,430 --> 00:30:20,300
keyword in it make sure it's not

851
00:30:18,020 --> 00:30:22,580
throwing alerts these are all things

852
00:30:20,300 --> 00:30:24,340
that scripts ideally should not be doing

853
00:30:22,580 --> 00:30:26,949
if you're including them on your page

854
00:30:24,340 --> 00:30:29,480
one of the tools that I made to help you

855
00:30:26,950 --> 00:30:32,150
know about this is called third-party

856
00:30:29,480 --> 00:30:34,850
i/o so if you take any JavaScript URL

857
00:30:32,150 --> 00:30:37,550
and paste it into the text box it runs

858
00:30:34,850 --> 00:30:38,840
that JavaScript in a headless browser it

859
00:30:37,550 --> 00:30:40,460
goes through that checklist that I just

860
00:30:38,840 --> 00:30:42,139
told you about and more and kind of

861
00:30:40,460 --> 00:30:45,080
gives you a list of best practices is

862
00:30:42,140 --> 00:30:46,280
this script loading too much how does it

863
00:30:45,080 --> 00:30:47,929
compare to all the other scripts that

864
00:30:46,280 --> 00:30:49,370
we've looked at for example so it's a

865
00:30:47,930 --> 00:30:54,830
free tool please use it let me know if

866
00:30:49,370 --> 00:30:55,850
you like it a bunch of links I'm sure

867
00:30:54,830 --> 00:30:57,439
we're going to share out these slides

868
00:30:55,850 --> 00:30:58,969
but it's just pretty much everything

869
00:30:57,440 --> 00:31:01,010
I've been talking about from the

870
00:30:58,970 --> 00:31:02,299
that we published we just recently

871
00:31:01,010 --> 00:31:04,820
published an update with a lot of the

872
00:31:02,299 --> 00:31:07,460
stuff I talked about today and the perf

873
00:31:04,820 --> 00:31:11,840
planet calendar and third party item as

874
00:31:07,460 --> 00:31:23,299
well thank you that's all I have for the

875
00:31:11,840 --> 00:31:24,649
slides do we have a few minutes for okay

876
00:31:23,299 --> 00:31:26,539
and we do have a few minutes for

877
00:31:24,650 --> 00:31:38,000
questions three or four minutes if

878
00:31:26,539 --> 00:31:40,250
anybody does so yeah so the question was

879
00:31:38,000 --> 00:31:41,990
we said we cut down the number of reads

880
00:31:40,250 --> 00:31:43,280
and writes to the cookie could you

881
00:31:41,990 --> 00:31:45,679
is there a performance implication to

882
00:31:43,280 --> 00:31:47,360
doing that we actually saw these cookies

883
00:31:45,679 --> 00:31:49,970
reason writes down the profiler quite a

884
00:31:47,360 --> 00:31:51,740
bit my guess is because often cookies

885
00:31:49,970 --> 00:31:53,750
actually get pushed to disk or to a more

886
00:31:51,740 --> 00:31:56,000
solid state storage you may see them pop

887
00:31:53,750 --> 00:31:58,039
up a little bit more dispose of that so

888
00:31:56,000 --> 00:32:00,320
after we did this optimization we often

889
00:31:58,039 --> 00:32:02,419
don't see cookies read writes showing up

890
00:32:00,320 --> 00:32:04,129
as much we did what we were doing was

891
00:32:02,419 --> 00:32:06,440
excessive you know 21 reads of the

892
00:32:04,130 --> 00:32:07,669
cookie doesn't seem necessary a lot of

893
00:32:06,440 --> 00:32:10,960
that was probably cached in memory but

894
00:32:07,669 --> 00:32:13,260
so we just figured we could do a better

895
00:32:10,960 --> 00:32:21,169
question

896
00:32:13,260 --> 00:32:28,139
[Music]

897
00:32:21,169 --> 00:32:29,759
yes the question was we're doing all

898
00:32:28,139 --> 00:32:31,559
this work on the main thread to compress

899
00:32:29,759 --> 00:32:32,880
the data into the beacon and stuff we

900
00:32:31,559 --> 00:32:35,370
have thought about that a little bit it

901
00:32:32,880 --> 00:32:36,960
would be quite a complex thing for us to

902
00:32:35,370 --> 00:32:39,719
get a web worker working on our all of

903
00:32:36,960 --> 00:32:41,759
our customers sites as well so we played

904
00:32:39,720 --> 00:32:43,019
with the idea but ultimately we decided

905
00:32:41,759 --> 00:32:46,230
just to do everything that we're doing

906
00:32:43,019 --> 00:32:56,700
on just in the library itself as opposed

907
00:32:46,230 --> 00:33:05,580
to a web worker yep can you see it first

908
00:32:56,700 --> 00:33:07,259
part of that again canvas yep so the

909
00:33:05,580 --> 00:33:08,850
question is they're using canvases a lot

910
00:33:07,259 --> 00:33:10,799
and what can you do to profile it behind

911
00:33:08,850 --> 00:33:13,408
the scenes I don't have a ton of

912
00:33:10,799 --> 00:33:15,629
experience in in canvas I would assume

913
00:33:13,409 --> 00:33:17,639
that the profiler would be able to tell

914
00:33:15,629 --> 00:33:19,139
you a lot about what it's doing I mean

915
00:33:17,639 --> 00:33:21,168
there's still all these interactions

916
00:33:19,139 --> 00:33:22,979
with the API is that you're taking etc

917
00:33:21,169 --> 00:33:24,750
profilers like Chrome OS will show you

918
00:33:22,980 --> 00:33:25,830
the frames when they're rendered etc so

919
00:33:24,750 --> 00:33:27,330
you can see all the work that took

920
00:33:25,830 --> 00:33:30,840
getting up to that frame and stuff like

921
00:33:27,330 --> 00:33:33,629
that but I would just say profiler

922
00:33:30,840 --> 00:33:35,129
itself if you're using a library to draw

923
00:33:33,629 --> 00:33:37,320
the canvas like using d3 or something

924
00:33:35,129 --> 00:33:38,820
like that you can certainly you know put

925
00:33:37,320 --> 00:33:40,080
it through its paces as well and the

926
00:33:38,820 --> 00:33:42,178
profiler you can make sure it's being

927
00:33:40,080 --> 00:33:43,559
loaded in all the right ways but those

928
00:33:42,179 --> 00:33:48,240
libraries are generally pretty optimized

929
00:33:43,559 --> 00:33:49,740
if they're doing drawing and stuff we

930
00:33:48,240 --> 00:33:52,529
still have another minute so one more

931
00:33:49,740 --> 00:33:53,610
question over there and I will take more

932
00:33:52,529 --> 00:33:56,330
questions afterward if anybody else

933
00:33:53,610 --> 00:33:56,330
wants it though please

934
00:34:01,790 --> 00:34:14,460
compared to what perhaps our century Oh

935
00:34:11,270 --> 00:34:17,639
javascript error reporting stuff century

936
00:34:14,460 --> 00:34:19,168
I oh yeah yeah so the question was how

937
00:34:17,639 --> 00:34:21,750
does a boomerang itself compared to

938
00:34:19,168 --> 00:34:24,330
something like sentry I haven't used it

939
00:34:21,750 --> 00:34:26,310
very much boomerang does capture

940
00:34:24,330 --> 00:34:28,819
JavaScript errors on the page and we do

941
00:34:26,310 --> 00:34:31,230
report those in our real-time dashboards

942
00:34:28,820 --> 00:34:33,120
providing a similar issue sir vez but

943
00:34:31,230 --> 00:34:35,820
I'm not sure all the comparison details

944
00:34:33,120 --> 00:34:38,750
between the two but yeah certainly worth

945
00:34:35,820 --> 00:34:38,750
checking out if you're interested

