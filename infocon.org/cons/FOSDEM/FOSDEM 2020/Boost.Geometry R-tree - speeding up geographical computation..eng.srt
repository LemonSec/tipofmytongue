1
00:00:05,040 --> 00:00:08,960
hello

2
00:00:05,920 --> 00:00:12,480
i'm adam and i work at

3
00:00:08,960 --> 00:00:17,279
oracle my sequel developing

4
00:00:12,480 --> 00:00:21,600
booth geometry um

5
00:00:17,279 --> 00:00:25,279
oh i cannot start now but

6
00:00:21,600 --> 00:00:25,279
this is basically my introduction sir

7
00:00:27,599 --> 00:00:35,760
um yeah so we are developing

8
00:00:30,880 --> 00:00:35,760
elbows geometry of developing algorithms

9
00:00:35,840 --> 00:00:41,840
and data structures which are then used

10
00:00:38,559 --> 00:00:41,839
by mysql to provide

11
00:00:42,239 --> 00:00:49,440
oh geometrical computation

12
00:00:46,239 --> 00:00:52,800
when you're calling um

13
00:00:49,440 --> 00:00:55,519
sql mm or sfa features

14
00:00:52,800 --> 00:00:56,480
like you know st intersection or

15
00:00:55,520 --> 00:00:59,520
something like that

16
00:00:56,480 --> 00:01:13,520
then internally mysql calls

17
00:00:59,520 --> 00:01:16,400
boot geometry functions

18
00:01:13,520 --> 00:01:18,000
um only the simple ones like boxes and

19
00:01:16,400 --> 00:01:21,600
points

20
00:01:18,000 --> 00:01:24,960
uh polygons are are 2d

21
00:01:21,600 --> 00:01:28,000
um the library allows

22
00:01:24,960 --> 00:01:31,119
it i mean the interface allows it to

23
00:01:28,000 --> 00:01:41,840
to be expanded this way but we're not

24
00:01:31,119 --> 00:01:41,840
there yet

25
00:01:52,159 --> 00:01:58,240
um okay so again uh hello i'm adam

26
00:01:55,920 --> 00:01:58,240
um

27
00:01:58,960 --> 00:02:02,158
welcome to the talk about boot geometry

28
00:02:00,640 --> 00:02:04,640
artery

29
00:02:02,159 --> 00:02:06,320
and for those of you who don't know most

30
00:02:04,640 --> 00:02:09,038
geometry is

31
00:02:06,320 --> 00:02:11,120
a class plus library part of both c

32
00:02:09,038 --> 00:02:14,799
libraries

33
00:02:11,120 --> 00:02:17,920
and we provide primitives algorithms

34
00:02:14,800 --> 00:02:21,840
and and spatial index

35
00:02:17,920 --> 00:02:25,359
for you to use in your c plus plus code

36
00:02:21,840 --> 00:02:28,480
library is used by mysql for gis

37
00:02:25,360 --> 00:02:32,959
features the r3 is

38
00:02:28,480 --> 00:02:32,959
a self-balanced tree

39
00:02:33,599 --> 00:02:36,879
which is used for spatial searching and

40
00:02:36,160 --> 00:02:42,640
k n k

41
00:02:36,879 --> 00:02:45,440
n searching and there are various

42
00:02:42,640 --> 00:02:48,879
balancing algorithms or various ways how

43
00:02:45,440 --> 00:02:51,359
how the artery can be created

44
00:02:48,879 --> 00:02:52,319
when you are putting elements one by one

45
00:02:51,360 --> 00:02:55,519
then

46
00:02:52,319 --> 00:02:58,319
three is balancing itself

47
00:02:55,519 --> 00:02:58,879
and there are also class of algorithms

48
00:02:58,319 --> 00:03:01,920
uh

49
00:02:58,879 --> 00:03:04,239
which are used to create the r3 from a

50
00:03:01,920 --> 00:03:06,319
number of elements at once and this is

51
00:03:04,239 --> 00:03:09,920
called packing or bulk

52
00:03:06,319 --> 00:03:09,920
bulk insertion algorithms

53
00:03:11,760 --> 00:03:18,959
and the the specific features of

54
00:03:15,360 --> 00:03:22,879
both geometry are

55
00:03:18,959 --> 00:03:25,920
listed on the slide so the class is in

56
00:03:22,879 --> 00:03:28,399
both geometry index namespace

57
00:03:25,920 --> 00:03:30,720
it allows you to store your own

58
00:03:28,400 --> 00:03:33,840
user-defined types

59
00:03:30,720 --> 00:03:34,560
by default it supports any type adapted

60
00:03:33,840 --> 00:03:38,000
to pos

61
00:03:34,560 --> 00:03:41,680
to two-point box or segment concept

62
00:03:38,000 --> 00:03:45,519
from boost geometry library and also

63
00:03:41,680 --> 00:03:47,120
supports pairs and tuples

64
00:03:45,519 --> 00:03:50,080
there are three balancing algorithms

65
00:03:47,120 --> 00:03:52,560
i'll show them later

66
00:03:50,080 --> 00:03:53,519
the nodes the size of a node is defined

67
00:03:52,560 --> 00:03:57,360
by the numbers

68
00:03:53,519 --> 00:04:00,560
of objects stored in a node

69
00:03:57,360 --> 00:04:02,400
as opposed to say

70
00:04:00,560 --> 00:04:04,400
database implementations of the artery

71
00:04:02,400 --> 00:04:08,000
where the size of a node is

72
00:04:04,400 --> 00:04:08,799
defined by the page size and it allows

73
00:04:08,000 --> 00:04:11,200
you to perform

74
00:04:08,799 --> 00:04:12,000
advanced queries i also show them later

75
00:04:11,200 --> 00:04:15,839
what that means

76
00:04:12,000 --> 00:04:15,840
and iterative queries

77
00:04:16,079 --> 00:04:23,440
and so here are the examples of

78
00:04:20,399 --> 00:04:26,638
internal structures of the of arteries

79
00:04:23,440 --> 00:04:27,600
created in different ways linear

80
00:04:26,639 --> 00:04:30,880
quadratic and

81
00:04:27,600 --> 00:04:33,440
airstar 3 versions are

82
00:04:30,880 --> 00:04:34,960
are the ones created using balancing

83
00:04:33,440 --> 00:04:39,199
algorithm

84
00:04:34,960 --> 00:04:39,198
and packing is is what is

85
00:04:39,280 --> 00:04:45,520
is the packing algorithm it's a

86
00:04:42,400 --> 00:04:46,560
version of str algorithm so sort type

87
00:04:45,520 --> 00:04:50,080
recursive

88
00:04:46,560 --> 00:04:52,639
variation um and as you can see

89
00:04:50,080 --> 00:04:54,840
the the structure the internal

90
00:04:52,639 --> 00:04:57,440
structures are different

91
00:04:54,840 --> 00:04:59,039
um

92
00:04:57,440 --> 00:05:01,199
some of them will be better for

93
00:04:59,040 --> 00:05:02,880
searching because

94
00:05:01,199 --> 00:05:05,440
some of them in some of them there is

95
00:05:02,880 --> 00:05:07,840
more overlap of the nodes

96
00:05:05,440 --> 00:05:11,840
um some of them have big nodes some of

97
00:05:07,840 --> 00:05:14,000
them have smaller nodes so and

98
00:05:11,840 --> 00:05:15,599
the the less overlap the less number of

99
00:05:14,000 --> 00:05:17,520
nodes and the

100
00:05:15,600 --> 00:05:18,960
smaller nodes are better for searching

101
00:05:17,520 --> 00:05:22,799
later

102
00:05:18,960 --> 00:05:26,159
but how you can expect

103
00:05:22,800 --> 00:05:26,880
it takes more time to create a better

104
00:05:26,160 --> 00:05:29,600
structure

105
00:05:26,880 --> 00:05:30,240
of the archery so these are the times in

106
00:05:29,600 --> 00:05:33,199
general

107
00:05:30,240 --> 00:05:35,600
the more time you spend on creation less

108
00:05:33,199 --> 00:05:37,919
time you'll spend on searching

109
00:05:35,600 --> 00:05:39,840
right so there's a trade-off and

110
00:05:37,919 --> 00:05:43,440
depending on your application

111
00:05:39,840 --> 00:05:46,638
you have to choose one or the other and

112
00:05:43,440 --> 00:05:47,840
packing is that recreated with packing

113
00:05:46,639 --> 00:05:50,400
algorithm is

114
00:05:47,840 --> 00:05:52,159
the best in all situations but on the

115
00:05:50,400 --> 00:05:53,039
other hand you have to know all of the

116
00:05:52,160 --> 00:05:56,720
elements

117
00:05:53,039 --> 00:06:00,000
in front of the creation

118
00:05:56,720 --> 00:06:01,600
uh and there is also one more decision

119
00:06:00,000 --> 00:06:02,720
you have to make before creating their

120
00:06:01,600 --> 00:06:06,240
tree which is the

121
00:06:02,720 --> 00:06:07,840
size of the node the size of the

122
00:06:06,240 --> 00:06:10,639
size of the nodes the number of elements

123
00:06:07,840 --> 00:06:10,638
stored in the node

124
00:06:12,800 --> 00:06:15,919
which will be influenced by your

125
00:06:14,560 --> 00:06:19,280
knowledge about the domain

126
00:06:15,919 --> 00:06:23,198
you're working with and specifically

127
00:06:19,280 --> 00:06:24,080
um about the the the kind of data you're

128
00:06:23,199 --> 00:06:27,199
working with

129
00:06:24,080 --> 00:06:29,198
so for non-overlapping uh

130
00:06:27,199 --> 00:06:30,319
elements the tree will behave

131
00:06:29,199 --> 00:06:32,840
differently

132
00:06:30,319 --> 00:06:34,080
like uh here is here are times of

133
00:06:32,840 --> 00:06:35,840
creation um

134
00:06:34,080 --> 00:06:38,960
[Music]

135
00:06:35,840 --> 00:06:42,318
and four

136
00:06:38,960 --> 00:06:44,960
number of elements stored in a node so

137
00:06:42,319 --> 00:06:45,680
here is nothing interesting actually

138
00:06:44,960 --> 00:06:48,880
just

139
00:06:45,680 --> 00:06:49,599
maybe just that the trees the creation

140
00:06:48,880 --> 00:06:51,759
of the tree is

141
00:06:49,599 --> 00:06:53,199
longer for all algorithms when there is

142
00:06:51,759 --> 00:06:56,319
overlap

143
00:06:53,199 --> 00:06:59,680
but if you see the searching

144
00:06:56,319 --> 00:07:00,400
then here we have something interesting

145
00:06:59,680 --> 00:07:04,400
it's

146
00:07:00,400 --> 00:07:07,679
it seems that for overlapping nodes

147
00:07:04,400 --> 00:07:11,039
uh for robotic elements if you have

148
00:07:07,680 --> 00:07:11,520
two small number of elements stored in a

149
00:07:11,039 --> 00:07:15,199
node

150
00:07:11,520 --> 00:07:17,919
then you increase the time of search

151
00:07:15,199 --> 00:07:19,280
so the the more overlap you have in your

152
00:07:17,919 --> 00:07:24,080
data

153
00:07:19,280 --> 00:07:24,080
the bigger the note should be basically

154
00:07:24,240 --> 00:07:27,599
uh later we we can talk about it after

155
00:07:26,880 --> 00:07:31,199
the talk

156
00:07:27,599 --> 00:07:33,759
why that is and by overlapping i mean

157
00:07:31,199 --> 00:07:34,479
like physically overlapping in 2d like

158
00:07:33,759 --> 00:07:36,880
for instance

159
00:07:34,479 --> 00:07:37,758
if you have big objects overlapping each

160
00:07:36,880 --> 00:07:41,120
other

161
00:07:37,759 --> 00:07:41,759
or you have objects in higher dimensions

162
00:07:41,120 --> 00:07:45,840
and there is

163
00:07:41,759 --> 00:07:45,840
more probability that they will overlap

164
00:07:46,879 --> 00:07:50,720
okay so now a few examples

165
00:07:52,160 --> 00:07:57,199
i am using the data from this website

166
00:07:57,440 --> 00:08:00,800
so here are the includes and some

167
00:08:00,000 --> 00:08:04,800
namespaces

168
00:08:00,800 --> 00:08:04,800
i'll be using in the code um

169
00:08:05,440 --> 00:08:13,440
the second one is only if you

170
00:08:09,520 --> 00:08:16,719
clone the repository from

171
00:08:13,440 --> 00:08:19,919
from github because it's it's a part of

172
00:08:16,720 --> 00:08:24,800
the code which we call extensions

173
00:08:19,919 --> 00:08:24,799
but it's only for loading a shapefile

174
00:08:24,840 --> 00:08:30,000
um yes and these are

175
00:08:27,599 --> 00:08:31,360
these are basic definitions of types

176
00:08:30,000 --> 00:08:34,399
i'll be using

177
00:08:31,360 --> 00:08:36,880
uh in boost geometry uh

178
00:08:34,399 --> 00:08:38,320
the default way of defining the the

179
00:08:36,880 --> 00:08:42,320
coordinate systems

180
00:08:38,320 --> 00:08:42,320
that are used in data are

181
00:08:42,399 --> 00:08:48,560
are part of points type so here's how

182
00:08:45,760 --> 00:08:48,560
you can create

183
00:08:48,720 --> 00:08:52,640
a type capable of storing cartesian

184
00:08:52,160 --> 00:08:55,199
points

185
00:08:52,640 --> 00:08:55,920
spherical points and geographic points

186
00:08:55,200 --> 00:09:00,560
i'll be using

187
00:08:55,920 --> 00:09:03,120
the geogra the last one in the examples

188
00:09:00,560 --> 00:09:03,760
there are other ways how you can affect

189
00:09:03,120 --> 00:09:07,360
the

190
00:09:03,760 --> 00:09:12,399
the algorithm algorithms and

191
00:09:07,360 --> 00:09:15,440
also like use different spheroids

192
00:09:12,399 --> 00:09:15,440
and things like that but

193
00:09:15,839 --> 00:09:20,320
for the time being let's assume that

194
00:09:18,720 --> 00:09:21,600
when i'm using geographic points it's

195
00:09:20,320 --> 00:09:24,640
wgs

196
00:09:21,600 --> 00:09:27,600
84 and i'm calculating stuff on the

197
00:09:24,640 --> 00:09:29,839
surface of ellipsoid

198
00:09:27,600 --> 00:09:32,720
so we are not doing any projections we

199
00:09:29,839 --> 00:09:35,360
are we are on the surface of ellipsoid

200
00:09:32,720 --> 00:09:36,560
which is good for a class of problems

201
00:09:35,360 --> 00:09:39,120
that are global

202
00:09:36,560 --> 00:09:41,279
where you cannot choose the best

203
00:09:39,120 --> 00:09:43,680
projection

204
00:09:41,279 --> 00:09:44,560
you just want to stay you could

205
00:09:43,680 --> 00:09:47,279
approximate the

206
00:09:44,560 --> 00:09:49,119
the globe with a sphere but here i'm

207
00:09:47,279 --> 00:09:52,560
showing the geographic

208
00:09:49,120 --> 00:09:53,680
um how to how to deal with geographic

209
00:09:52,560 --> 00:09:56,880
data

210
00:09:53,680 --> 00:09:59,920
um yeah so for this you'll need

211
00:09:56,880 --> 00:10:03,600
the uh for for loading the

212
00:09:59,920 --> 00:10:06,319
um the data i'm showing you'll need

213
00:10:03,600 --> 00:10:09,200
the extensions but you can do it however

214
00:10:06,320 --> 00:10:11,519
you like you can write your own

215
00:10:09,200 --> 00:10:14,000
shapefile importer or fill the data

216
00:10:11,519 --> 00:10:18,000
whatever you like

217
00:10:14,000 --> 00:10:22,320
and the first example will be um

218
00:10:18,000 --> 00:10:25,600
to find points which are near

219
00:10:22,320 --> 00:10:28,959
another set of points basically

220
00:10:25,600 --> 00:10:31,360
so this is the data from from this

221
00:10:28,959 --> 00:10:32,640
website one is populated places which

222
00:10:31,360 --> 00:10:34,880
are defined

223
00:10:32,640 --> 00:10:34,880
like

224
00:10:35,680 --> 00:10:42,800
a point representing

225
00:10:39,120 --> 00:10:45,040
a place where at least 1 000 people live

226
00:10:42,800 --> 00:10:46,880
or something like that and the green

227
00:10:45,040 --> 00:10:50,959
dots are airports

228
00:10:46,880 --> 00:10:53,519
so i'm searching um

229
00:10:50,959 --> 00:10:54,160
whether or not some airports are near

230
00:10:53,519 --> 00:10:57,600
the

231
00:10:54,160 --> 00:11:01,839
populated places like that and

232
00:10:57,600 --> 00:11:01,839
by small area i mean a box

233
00:11:02,800 --> 00:11:09,680
so here is a

234
00:11:06,160 --> 00:11:11,760
let's say naive example which has

235
00:11:09,680 --> 00:11:13,760
quadratic complexity and what i'm doing

236
00:11:11,760 --> 00:11:16,480
is i'm iterating over all the places

237
00:11:13,760 --> 00:11:17,040
then all of all the airports and i'm

238
00:11:16,480 --> 00:11:21,200
checking

239
00:11:17,040 --> 00:11:23,920
if an airport is covered by a box

240
00:11:21,200 --> 00:11:25,360
this small box i created and then i'm

241
00:11:23,920 --> 00:11:27,920
printing a result

242
00:11:25,360 --> 00:11:29,839
so i'll show the timings later for the

243
00:11:27,920 --> 00:11:32,160
other algorithm but

244
00:11:29,839 --> 00:11:33,680
as you may expect quadratic complexity

245
00:11:32,160 --> 00:11:38,640
we can do better

246
00:11:33,680 --> 00:11:41,680
so for this purpose we create uh r3 um

247
00:11:38,640 --> 00:11:42,480
storing points and this will be our star

248
00:11:41,680 --> 00:11:45,760
variant

249
00:11:42,480 --> 00:11:48,320
storing four elements per node

250
00:11:45,760 --> 00:11:49,680
uh and i'm calling insert for all of the

251
00:11:48,320 --> 00:11:52,880
airports

252
00:11:49,680 --> 00:11:54,319
um which forces the rt to use balancing

253
00:11:52,880 --> 00:11:57,600
algorithm

254
00:11:54,320 --> 00:12:00,639
instead of packing because i'm

255
00:11:57,600 --> 00:12:00,639
inserting one by one

256
00:12:00,959 --> 00:12:04,319
and then i'm iterating over all the

257
00:12:03,600 --> 00:12:08,320
places

258
00:12:04,320 --> 00:12:08,320
and performing a query

259
00:12:08,959 --> 00:12:12,560
passing covered by predicate to the

260
00:12:11,040 --> 00:12:16,880
query function

261
00:12:12,560 --> 00:12:18,719
of the artery and taking the result as

262
00:12:16,880 --> 00:12:21,760
in output iterator which in this case is

263
00:12:18,720 --> 00:12:21,760
back insert iterator

264
00:12:22,000 --> 00:12:29,760
but we can do better because we

265
00:12:25,040 --> 00:12:31,519
know the data up front and

266
00:12:29,760 --> 00:12:33,120
so i'm creating the same entry but using

267
00:12:31,519 --> 00:12:33,680
packing algorithm and for this purpose

268
00:12:33,120 --> 00:12:36,880
i'm

269
00:12:33,680 --> 00:12:37,199
passing the iterators to the range into

270
00:12:36,880 --> 00:12:40,079
the

271
00:12:37,200 --> 00:12:40,480
constructor of the artery so here we

272
00:12:40,079 --> 00:12:42,319
have the

273
00:12:40,480 --> 00:12:44,240
all the r3 created with packing

274
00:12:42,320 --> 00:12:45,690
algorithm which should be faster

275
00:12:44,240 --> 00:12:47,360
and then i'm using

276
00:12:45,690 --> 00:12:49,440
[Music]

277
00:12:47,360 --> 00:12:50,839
query iterators instead of query

278
00:12:49,440 --> 00:12:54,160
function

279
00:12:50,839 --> 00:12:56,880
which uh which it raises over

280
00:12:54,160 --> 00:12:57,439
lazily iterates over the the results so

281
00:12:56,880 --> 00:13:00,320
you can

282
00:12:57,440 --> 00:13:02,639
for instance stop it at some point if

283
00:13:00,320 --> 00:13:02,639
you like

284
00:13:03,120 --> 00:13:09,200
um and if you sorry if you prefer

285
00:13:06,880 --> 00:13:12,800
working with ranges instead of

286
00:13:09,200 --> 00:13:14,880
iterators then the r3

287
00:13:12,800 --> 00:13:16,399
also supports it so i'm just passing a

288
00:13:14,880 --> 00:13:17,920
range of elements

289
00:13:16,399 --> 00:13:20,079
which are then stored in directory using

290
00:13:17,920 --> 00:13:23,279
packing algorithm and then

291
00:13:20,079 --> 00:13:27,920
instead of standard for each i'm using

292
00:13:23,279 --> 00:13:27,920
four based range base for loop

293
00:13:28,639 --> 00:13:35,680
and for that i'm creating a range

294
00:13:31,680 --> 00:13:39,839
a query range using range adapter

295
00:13:35,680 --> 00:13:43,120
similar to boost range adapters so

296
00:13:39,839 --> 00:13:45,839
what's the the red now

297
00:13:43,120 --> 00:13:47,120
his uh his arrange representing a pair

298
00:13:45,839 --> 00:13:50,240
of iterators

299
00:13:47,120 --> 00:13:52,639
basically just as it was on the previous

300
00:13:50,240 --> 00:13:52,639
slide

301
00:13:53,040 --> 00:13:58,800
and here is my result so some pairs of

302
00:13:55,440 --> 00:13:58,800
points which are close to each other

303
00:13:59,700 --> 00:14:04,480
[Music]

304
00:14:01,440 --> 00:14:07,920
so the next example which will be

305
00:14:04,480 --> 00:14:11,600
more interesting maybe so now i'm

306
00:14:07,920 --> 00:14:15,279
a traveling salesman and i want to

307
00:14:11,600 --> 00:14:18,320
go through all of the airports on the

308
00:14:15,279 --> 00:14:19,880
as world as possible right so

309
00:14:18,320 --> 00:14:23,009
classic problem

310
00:14:19,880 --> 00:14:23,009
[Music]

311
00:14:23,600 --> 00:14:31,040
again oh sorry um so this is my

312
00:14:27,519 --> 00:14:35,040
initial preparation

313
00:14:31,040 --> 00:14:38,800
where i have reports i'll be storing

314
00:14:35,040 --> 00:14:38,800
the result in a line string

315
00:14:38,880 --> 00:14:42,880
containing geographic points and i also

316
00:14:42,079 --> 00:14:46,719
need

317
00:14:42,880 --> 00:14:46,720
structure helper structure for

318
00:14:47,120 --> 00:14:53,279
industrial flags whether or not i

319
00:14:49,839 --> 00:14:53,279
visited an airport or not

320
00:14:56,240 --> 00:15:02,000
here is a one of the possible solutions

321
00:14:59,839 --> 00:15:03,440
which is the classic one which is called

322
00:15:02,000 --> 00:15:05,680
greedy

323
00:15:03,440 --> 00:15:06,959
heuristic so basically i'm choosing the

324
00:15:05,680 --> 00:15:09,199
closest airport

325
00:15:06,959 --> 00:15:10,319
from a starting point and then from that

326
00:15:09,199 --> 00:15:12,240
i'm choosing the

327
00:15:10,320 --> 00:15:13,680
closest airport again and again and

328
00:15:12,240 --> 00:15:16,720
again again and again

329
00:15:13,680 --> 00:15:19,760
and i'm doing it it

330
00:15:16,720 --> 00:15:21,920
until i have all of the airports so yeah

331
00:15:19,760 --> 00:15:25,040
until i have all of the airports

332
00:15:21,920 --> 00:15:26,800
i'm traversing all of them

333
00:15:25,040 --> 00:15:28,880
checking all of the airports checking

334
00:15:26,800 --> 00:15:31,040
the ones which are not visited

335
00:15:28,880 --> 00:15:32,560
uh calculating the distance is picking

336
00:15:31,040 --> 00:15:34,399
the smallest one

337
00:15:32,560 --> 00:15:37,119
and then when i have the smallest one

338
00:15:34,399 --> 00:15:41,680
then i'm adding it to the

339
00:15:37,120 --> 00:15:45,600
to the solution

340
00:15:41,680 --> 00:15:49,199
but again the previous algorithm

341
00:15:45,600 --> 00:15:51,600
is has quadratic complexity so we can do

342
00:15:49,199 --> 00:15:51,599
better

343
00:15:52,079 --> 00:15:59,120
and here i'm using the artery for that

344
00:15:55,519 --> 00:16:02,240
i'm storing a pair of my point and

345
00:15:59,120 --> 00:16:04,720
an index i need an index to

346
00:16:02,240 --> 00:16:07,120
in order to access the flags with the

347
00:16:04,720 --> 00:16:07,120
flags

348
00:16:07,360 --> 00:16:10,720
some sort of upper this works by by

349
00:16:09,680 --> 00:16:14,560
default

350
00:16:10,720 --> 00:16:17,360
and i could create um

351
00:16:14,560 --> 00:16:18,319
a vector of pairs first but but i decide

352
00:16:17,360 --> 00:16:22,079
to

353
00:16:18,320 --> 00:16:25,199
do it on the fly using boost range

354
00:16:22,079 --> 00:16:28,719
adapters so here i'm creating

355
00:16:25,199 --> 00:16:31,519
a range representing uh

356
00:16:28,720 --> 00:16:33,360
first transforming or indexing airports

357
00:16:31,519 --> 00:16:36,240
with an index starting from zero

358
00:16:33,360 --> 00:16:38,079
and then transforming this range of

359
00:16:36,240 --> 00:16:40,480
indexed airports

360
00:16:38,079 --> 00:16:41,680
into range of pairs this is what you can

361
00:16:40,480 --> 00:16:45,519
do with boost

362
00:16:41,680 --> 00:16:48,239
range adapters and

363
00:16:45,519 --> 00:16:48,800
so i have all of the data needed in my

364
00:16:48,240 --> 00:16:52,240
r3

365
00:16:48,800 --> 00:16:55,279
and then i'm doing again the same

366
00:16:52,240 --> 00:16:58,480
until i have all of the

367
00:16:55,279 --> 00:17:00,079
all of the points um i'm performing

368
00:16:58,480 --> 00:17:03,199
query but this time i'm not

369
00:17:00,079 --> 00:17:05,839
traversing all of the all of the

370
00:17:03,199 --> 00:17:07,359
airports to search for uh

371
00:17:05,839 --> 00:17:09,760
for the closest point but using dirty

372
00:17:07,359 --> 00:17:10,879
for that and i'm passing the nearest

373
00:17:09,760 --> 00:17:16,400
predicate

374
00:17:10,880 --> 00:17:20,000
and i need so i need the nearest point

375
00:17:16,400 --> 00:17:24,079
one nearest point which also satisfies

376
00:17:20,000 --> 00:17:27,599
uh this condition

377
00:17:24,079 --> 00:17:30,000
that it is not visited right

378
00:17:27,599 --> 00:17:30,959
and then i have one in the results i'm

379
00:17:30,000 --> 00:17:33,280
passing

380
00:17:30,960 --> 00:17:36,000
as output iterator i'm simply passing

381
00:17:33,280 --> 00:17:36,000
the pointer

382
00:17:37,360 --> 00:17:41,120
and i'm putting the resulting in the

383
00:17:40,160 --> 00:17:44,840
root line string

384
00:17:41,120 --> 00:17:48,559
and setting the flag and that's it

385
00:17:44,840 --> 00:17:51,760
um and this is my result

386
00:17:48,559 --> 00:17:54,320
so so our

387
00:17:51,760 --> 00:17:55,360
traveling salesman went through all the

388
00:17:54,320 --> 00:17:57,280
airports

389
00:17:55,360 --> 00:17:58,399
at some point traversing the the

390
00:17:57,280 --> 00:18:01,760
anti-meridian

391
00:17:58,400 --> 00:18:06,799
so the daytime

392
00:18:01,760 --> 00:18:09,440
um a change line

393
00:18:06,799 --> 00:18:10,879
uh yeah so this this looks good and the

394
00:18:09,440 --> 00:18:14,799
whole

395
00:18:10,880 --> 00:18:17,679
route is like four hundred thousand

396
00:18:14,799 --> 00:18:20,799
kilometers long

397
00:18:17,679 --> 00:18:24,400
um and this is uh

398
00:18:20,799 --> 00:18:26,240
some benchmark of both

399
00:18:24,400 --> 00:18:28,290
algorithms the one with quadratic

400
00:18:26,240 --> 00:18:29,760
complexity is gray

401
00:18:28,290 --> 00:18:33,120
[Music]

402
00:18:29,760 --> 00:18:34,799
and as you can see the solution using r3

403
00:18:33,120 --> 00:18:38,000
is

404
00:18:34,799 --> 00:18:38,000
hiding better right

405
00:18:39,440 --> 00:18:47,760
and that's it from from me

406
00:18:42,960 --> 00:18:50,080
thank you and there are three minutes

407
00:18:47,760 --> 00:18:51,120
we have some time left yeah let's say

408
00:18:50,080 --> 00:18:54,159
about three minutes

409
00:18:51,120 --> 00:18:57,439
for questions any

410
00:18:54,160 --> 00:19:00,000
questions that you want to sort of

411
00:18:57,440 --> 00:19:00,000
throw at him

412
00:19:00,640 --> 00:19:08,240
hi are there any questions

413
00:19:04,880 --> 00:19:11,280
for you that you want to sort of ask

414
00:19:08,240 --> 00:19:14,640
the crowd what do you want from them

415
00:19:11,280 --> 00:19:18,480
how they can they help you um

416
00:19:14,640 --> 00:19:20,640
probably to check out the

417
00:19:18,480 --> 00:19:22,400
boost geometry try to do something

418
00:19:20,640 --> 00:19:24,880
interesting with it

419
00:19:22,400 --> 00:19:26,720
like if you have a problem uh to solve

420
00:19:24,880 --> 00:19:30,240
just consider

421
00:19:26,720 --> 00:19:31,679
uh trying both geometry and

422
00:19:30,240 --> 00:19:33,760
and then maybe share a feedback or

423
00:19:31,679 --> 00:19:35,039
something like that

424
00:19:33,760 --> 00:19:37,360
and there's one question or two

425
00:19:35,039 --> 00:19:53,840
questions

426
00:19:37,360 --> 00:19:53,840
could you speak up a little bit please

427
00:19:55,600 --> 00:19:59,360
so we're talking about this one okay

428
00:20:01,280 --> 00:20:03,520
okay

429
00:20:04,960 --> 00:20:12,559
um yes

430
00:20:08,559 --> 00:20:14,639
um so the

431
00:20:12,559 --> 00:20:16,158
the objects representing the internal

432
00:20:14,640 --> 00:20:19,520
nodes of the tree

433
00:20:16,159 --> 00:20:23,360
are in fact as you said boxes

434
00:20:19,520 --> 00:20:26,480
or rectangles however in leaf nodes

435
00:20:23,360 --> 00:20:29,439
so at the lowest level

436
00:20:26,480 --> 00:20:30,720
i can store various things and i've

437
00:20:29,440 --> 00:20:34,799
chosen to

438
00:20:30,720 --> 00:20:38,240
allow to store simple geometries like

439
00:20:34,799 --> 00:20:42,799
points boxes

440
00:20:38,240 --> 00:20:42,799
or segments so

441
00:20:43,280 --> 00:20:49,200
uh because otherwise you'll be forced to

442
00:20:46,880 --> 00:20:51,840
for instance represent a point as a box

443
00:20:49,200 --> 00:20:54,960
right and then you have a duplication of

444
00:20:51,840 --> 00:20:54,959
data basically

445
00:20:56,080 --> 00:21:02,559
so this is this is why

446
00:20:59,120 --> 00:21:06,239
it is possible in boost to

447
00:21:02,559 --> 00:21:08,080
just store points and the r3 is

448
00:21:06,240 --> 00:21:11,760
parameterized like

449
00:21:08,080 --> 00:21:15,280
it allows you to pass data type

450
00:21:11,760 --> 00:21:19,039
or variable type in compile time as a

451
00:21:15,280 --> 00:21:19,039
template argument

452
00:21:19,360 --> 00:21:21,678
sorry

453
00:21:25,360 --> 00:21:29,760
no no no it's only it's only a matter of

454
00:21:28,320 --> 00:21:34,000
storing

455
00:21:29,760 --> 00:21:38,640
data in in leaf nodes

456
00:21:34,000 --> 00:21:45,840
we can talk about it more after

457
00:21:38,640 --> 00:21:45,840
because unfortunately

