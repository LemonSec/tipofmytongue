1
00:00:05,279 --> 00:00:09,920
thanks for

2
00:00:05,920 --> 00:00:12,080
being there so uh what is finite element

3
00:00:09,920 --> 00:00:13,360
it's uh it's the thing when you have

4
00:00:12,080 --> 00:00:16,079
your cad

5
00:00:13,360 --> 00:00:17,840
file and you want to see the mechanical

6
00:00:16,079 --> 00:00:19,919
deflection of whatever

7
00:00:17,840 --> 00:00:21,198
cat thing you design or a motor you just

8
00:00:19,920 --> 00:00:22,880
designed you want to see the torque that

9
00:00:21,199 --> 00:00:25,279
is created by this motor

10
00:00:22,880 --> 00:00:26,799
or a pipe where you want to see the the

11
00:00:25,279 --> 00:00:29,039
water throughput in it you want to

12
00:00:26,800 --> 00:00:30,480
simulate this with finite elements

13
00:00:29,039 --> 00:00:32,239
and this is basically if you have access

14
00:00:30,480 --> 00:00:36,000
to a library you could just

15
00:00:32,238 --> 00:00:39,440
connect it to whatever cad software

16
00:00:36,000 --> 00:00:41,519
it would compute the well the physics

17
00:00:39,440 --> 00:00:43,519
and output data that you could again

18
00:00:41,520 --> 00:00:45,760
show in the cad environment

19
00:00:43,520 --> 00:00:47,440
and so it would solve physics problem

20
00:00:45,760 --> 00:00:51,599
and predict what's going to happen

21
00:00:47,440 --> 00:00:53,839
like motor torque for example

22
00:00:51,600 --> 00:00:55,840
and this is exactly what sparse lizard

23
00:00:53,840 --> 00:00:58,480
does

24
00:00:55,840 --> 00:01:00,000
so some history it's quite a young

25
00:00:58,480 --> 00:01:02,319
finite element library

26
00:01:00,000 --> 00:01:03,440
in terms of the usual finite elements

27
00:01:02,320 --> 00:01:06,799
library are like

28
00:01:03,440 --> 00:01:10,798
20 30 years old commercial software

29
00:01:06,799 --> 00:01:13,040
ansys is probably 40 or more years old

30
00:01:10,799 --> 00:01:15,200
and so they have a lot of history and

31
00:01:13,040 --> 00:01:17,600
it's it's good or bad depends

32
00:01:15,200 --> 00:01:18,640
but sparse lizard is quite young uh

33
00:01:17,600 --> 00:01:22,158
which doesn't make it

34
00:01:18,640 --> 00:01:24,320
not robust or not mature

35
00:01:22,159 --> 00:01:25,680
so it all started at university of liege

36
00:01:24,320 --> 00:01:27,679
not so far from here

37
00:01:25,680 --> 00:01:28,960
during my phd i wrote a matlab finite

38
00:01:27,680 --> 00:01:30,720
element code

39
00:01:28,960 --> 00:01:32,880
which had already a lot of all the

40
00:01:30,720 --> 00:01:34,720
features that sparse lizard now has

41
00:01:32,880 --> 00:01:36,560
and this was like you can see it as a

42
00:01:34,720 --> 00:01:39,200
draft and from this

43
00:01:36,560 --> 00:01:40,079
on 2017 i rewrote everything from

44
00:01:39,200 --> 00:01:42,479
scratch and c plus

45
00:01:40,079 --> 00:01:44,240
plus and so everything is really nicely

46
00:01:42,479 --> 00:01:44,880
integrated together it's not something

47
00:01:44,240 --> 00:01:46,720
that

48
00:01:44,880 --> 00:01:48,158
was doing just a few things and then it

49
00:01:46,720 --> 00:01:49,759
was patched and patched and hacked

50
00:01:48,159 --> 00:01:52,000
around to add things more and more

51
00:01:49,759 --> 00:01:54,079
over time it's really a lot of feature

52
00:01:52,000 --> 00:01:56,560
that are there from the very beginning

53
00:01:54,079 --> 00:01:57,119
and which make it actually quite nice

54
00:01:56,560 --> 00:02:00,560
and

55
00:01:57,119 --> 00:02:00,799
monolithic and uh where there is no need

56
00:02:00,560 --> 00:02:03,920
to

57
00:02:00,799 --> 00:02:04,960
to hack cone around and then from 2018

58
00:02:03,920 --> 00:02:06,960
to 2019

59
00:02:04,960 --> 00:02:08,318
i worked at imec in nano electronics

60
00:02:06,960 --> 00:02:10,079
research center

61
00:02:08,318 --> 00:02:12,958
some colleagues are here and i used it

62
00:02:10,080 --> 00:02:15,680
basically i used the software to design

63
00:02:12,959 --> 00:02:17,440
micro electronic connected systems quite

64
00:02:15,680 --> 00:02:18,720
a wide range of them and they were they

65
00:02:17,440 --> 00:02:22,879
were fabricated so

66
00:02:18,720 --> 00:02:24,640
there's actually some industrial

67
00:02:22,879 --> 00:02:26,399
background in the in the way it was

68
00:02:24,640 --> 00:02:29,359
written because it was written

69
00:02:26,400 --> 00:02:30,800
on the side of this work and then uh for

70
00:02:29,360 --> 00:02:33,040
the coming four years

71
00:02:30,800 --> 00:02:34,560
um there is a ground thanks to the

72
00:02:33,040 --> 00:02:36,879
academy of finland

73
00:02:34,560 --> 00:02:38,319
uh and thanks for academy of finland to

74
00:02:36,879 --> 00:02:40,480
bringing me here

75
00:02:38,319 --> 00:02:42,238
it will be developed for four years at

76
00:02:40,480 --> 00:02:44,879
tempura university

77
00:02:42,239 --> 00:02:47,040
with a slight different focus on

78
00:02:44,879 --> 00:02:50,160
particle accelerator magnet design

79
00:02:47,040 --> 00:02:52,640
in collaboration with cern so

80
00:02:50,160 --> 00:02:53,519
four years of basically full-time

81
00:02:52,640 --> 00:02:58,238
development

82
00:02:53,519 --> 00:02:59,920
uh already paid and guaranteed

83
00:02:58,239 --> 00:03:02,159
so there are lots of finite element

84
00:02:59,920 --> 00:03:04,399
softwares and

85
00:03:02,159 --> 00:03:06,000
you could think of why there would be

86
00:03:04,400 --> 00:03:08,159
another one to add

87
00:03:06,000 --> 00:03:10,319
well they to from my point of view there

88
00:03:08,159 --> 00:03:13,120
are lots of things that

89
00:03:10,319 --> 00:03:14,238
just are specific to every software and

90
00:03:13,120 --> 00:03:15,840
everything

91
00:03:14,239 --> 00:03:17,280
well i didn't find what i expected in

92
00:03:15,840 --> 00:03:19,519
finite element software

93
00:03:17,280 --> 00:03:21,120
because they're always missing something

94
00:03:19,519 --> 00:03:24,720
and they tend to be

95
00:03:21,120 --> 00:03:29,760
usually not easy to use now

96
00:03:24,720 --> 00:03:31,599
here we provide a very large set of

97
00:03:29,760 --> 00:03:32,959
proven capabilities of a lot of

98
00:03:31,599 --> 00:03:35,920
different physics

99
00:03:32,959 --> 00:03:37,360
which you can very easily combine

100
00:03:35,920 --> 00:03:39,119
because this is the purpose of it from

101
00:03:37,360 --> 00:03:42,480
the very beginning to work with

102
00:03:39,120 --> 00:03:44,720
highly multiphysic simulations um

103
00:03:42,480 --> 00:03:46,399
you can you have also a lot of extra

104
00:03:44,720 --> 00:03:47,519
finite elements things like mortar

105
00:03:46,400 --> 00:03:50,080
finite elements which

106
00:03:47,519 --> 00:03:50,560
works very nicely for electric motors

107
00:03:50,080 --> 00:03:52,000
and

108
00:03:50,560 --> 00:03:54,480
all that is very concise and

109
00:03:52,000 --> 00:03:56,799
user-friendly we'll see that even

110
00:03:54,480 --> 00:03:58,480
though that it's the c-plus plus library

111
00:03:56,799 --> 00:04:00,640
we'll see that again later

112
00:03:58,480 --> 00:04:02,399
and it's carefully validated and

113
00:04:00,640 --> 00:04:05,439
debugged i spent a lot of time on

114
00:04:02,400 --> 00:04:07,519
validating and so far

115
00:04:05,439 --> 00:04:10,879
as far as i know there is no bug that

116
00:04:07,519 --> 00:04:10,879
i'm aware of that is still there

117
00:04:13,360 --> 00:04:17,359
if you want to find some i will it

118
00:04:15,840 --> 00:04:20,399
doesn't mean there are no bugs but

119
00:04:17,358 --> 00:04:20,798
if i know of a bug i will remove it it's

120
00:04:20,399 --> 00:04:23,280
also

121
00:04:20,798 --> 00:04:24,320
clearly documented and um quite

122
00:04:23,280 --> 00:04:26,559
efficient

123
00:04:24,320 --> 00:04:27,520
you can run it on 32 cores and get a

124
00:04:26,560 --> 00:04:29,919
nice speed up

125
00:04:27,520 --> 00:04:31,280
and it's very rapidly expanding all the

126
00:04:29,919 --> 00:04:34,400
examples that i will show

127
00:04:31,280 --> 00:04:36,000
half of them have been added last year

128
00:04:34,400 --> 00:04:38,000
so let's first start about what it's

129
00:04:36,000 --> 00:04:39,199
able to do so this is half of the

130
00:04:38,000 --> 00:04:42,080
examples

131
00:04:39,199 --> 00:04:44,000
so you have fluids magnetic electricity

132
00:04:42,080 --> 00:04:46,800
mechanics rotating machines acoustics

133
00:04:44,000 --> 00:04:49,120
thermal simulation they all have a

134
00:04:46,800 --> 00:04:50,800
demonstrated example online

135
00:04:49,120 --> 00:04:52,400
and i'm not hiding anything you can just

136
00:04:50,800 --> 00:04:53,360
click on this button and you will see

137
00:04:52,400 --> 00:04:56,638
the example

138
00:04:53,360 --> 00:04:58,800
it will always fit in 10 20 or

139
00:04:56,639 --> 00:05:01,840
at most 50 lines of code which are

140
00:04:58,800 --> 00:05:06,080
actually extremely readable

141
00:05:01,840 --> 00:05:07,758
you can simulate well you see highly

142
00:05:06,080 --> 00:05:09,199
highly multiphysic things like the

143
00:05:07,759 --> 00:05:10,880
thermal acoustic simulation in a

144
00:05:09,199 --> 00:05:14,720
deformable cavity

145
00:05:10,880 --> 00:05:18,080
this includes pressure thermal

146
00:05:14,720 --> 00:05:19,600
pressure thermal mechanics and

147
00:05:18,080 --> 00:05:21,880
acoustics all that combined in one

148
00:05:19,600 --> 00:05:24,000
simulation or the fluid couple

149
00:05:21,880 --> 00:05:26,159
piezo-actuated mems this was actually

150
00:05:24,000 --> 00:05:29,280
fabricated at imec

151
00:05:26,160 --> 00:05:33,120
and this includes pressure piezo and

152
00:05:29,280 --> 00:05:35,039
mechanics all this combined very nicely

153
00:05:33,120 --> 00:05:37,120
so all these examples are validated and

154
00:05:35,039 --> 00:05:39,039
there are some more

155
00:05:37,120 --> 00:05:40,880
you have additional features like on the

156
00:05:39,039 --> 00:05:43,919
top left where you can work with

157
00:05:40,880 --> 00:05:46,639
non-matching meshes just very easily

158
00:05:43,919 --> 00:05:48,400
um and what you can simulate is of

159
00:05:46,639 --> 00:05:50,240
course transient simulations harmonic

160
00:05:48,400 --> 00:05:52,159
simulations eigen modes

161
00:05:50,240 --> 00:05:54,080
but also something specific to sparse

162
00:05:52,160 --> 00:05:58,400
lizard you can simulate

163
00:05:54,080 --> 00:05:59,919
a harmonic in in harmonic domain

164
00:05:58,400 --> 00:06:02,400
things that are non-linear which

165
00:05:59,919 --> 00:06:04,960
commercial softwares cannot do

166
00:06:02,400 --> 00:06:06,080
at all as far as i know so if you have a

167
00:06:04,960 --> 00:06:07,758
nonlinear problem

168
00:06:06,080 --> 00:06:09,120
you want to know how all the harmonics

169
00:06:07,759 --> 00:06:10,800
will appear this is

170
00:06:09,120 --> 00:06:12,319
very very straightforward in sparse

171
00:06:10,800 --> 00:06:15,440
lizard because it was very

172
00:06:12,319 --> 00:06:18,880
really at the core of the initial matlab

173
00:06:15,440 --> 00:06:20,479
film code that i started with

174
00:06:18,880 --> 00:06:22,719
there are lots of predefined physics as

175
00:06:20,479 --> 00:06:24,880
well for example on the bottom right

176
00:06:22,720 --> 00:06:26,080
advection diffusion uh is very well

177
00:06:24,880 --> 00:06:28,400
known that

178
00:06:26,080 --> 00:06:29,919
if you have uh advection-dominated

179
00:06:28,400 --> 00:06:31,359
advection diffusion problems you start

180
00:06:29,919 --> 00:06:33,039
having instabilities

181
00:06:31,360 --> 00:06:34,960
and for that there are five different

182
00:06:33,039 --> 00:06:36,080
schemes of stabilization that are

183
00:06:34,960 --> 00:06:37,758
predefined

184
00:06:36,080 --> 00:06:40,400
and checked that you can readily use in

185
00:06:37,759 --> 00:06:40,400
just one line

186
00:06:40,479 --> 00:06:46,318
now advanced things that are available

187
00:06:44,479 --> 00:06:48,240
so as i said there is native support of

188
00:06:46,319 --> 00:06:49,280
the so-called harmonic valence finite

189
00:06:48,240 --> 00:06:50,960
element

190
00:06:49,280 --> 00:06:52,479
which allows to do non-linear harmonic

191
00:06:50,960 --> 00:06:54,960
analysis

192
00:06:52,479 --> 00:06:56,719
there is also a fast 3d very general

193
00:06:54,960 --> 00:06:57,599
unstructured mesh to mesh interpolation

194
00:06:56,720 --> 00:07:00,479
algorithm

195
00:06:57,599 --> 00:07:01,360
it scales very nicely linearly to up to

196
00:07:00,479 --> 00:07:04,880
100 million

197
00:07:01,360 --> 00:07:06,319
of elements you have general 3d mortar

198
00:07:04,880 --> 00:07:09,440
finite elements

199
00:07:06,319 --> 00:07:11,360
so on the previous slides

200
00:07:09,440 --> 00:07:13,520
here you have an example of an electric

201
00:07:11,360 --> 00:07:16,639
motor and the rotor in state you

202
00:07:13,520 --> 00:07:18,318
really want to link them with mortar

203
00:07:16,639 --> 00:07:20,319
this is how it's done commercially

204
00:07:18,319 --> 00:07:22,080
because otherwise you don't have the

205
00:07:20,319 --> 00:07:23,759
freedom to choose

206
00:07:22,080 --> 00:07:25,680
the mesh at the interface you have some

207
00:07:23,759 --> 00:07:26,479
constraints here you're totally free to

208
00:07:25,680 --> 00:07:30,240
do it

209
00:07:26,479 --> 00:07:33,280
it works in 3d no limitation

210
00:07:30,240 --> 00:07:34,880
you have uh since well basically i

211
00:07:33,280 --> 00:07:36,318
started writing this a month ago and it

212
00:07:34,880 --> 00:07:38,800
will be available

213
00:07:36,319 --> 00:07:40,960
next week through p adaptivity so you

214
00:07:38,800 --> 00:07:44,000
can change the interpolation order

215
00:07:40,960 --> 00:07:45,758
on every element in the in the mesh

216
00:07:44,000 --> 00:07:47,120
which means only on the elements that

217
00:07:45,759 --> 00:07:49,680
actually require

218
00:07:47,120 --> 00:07:51,680
to have more computation done will you

219
00:07:49,680 --> 00:07:55,520
perform more computation so

220
00:07:51,680 --> 00:07:58,560
as an example i have a short video

221
00:07:55,520 --> 00:08:01,758
that's not gonna show

222
00:07:58,560 --> 00:08:04,960
there so you have the electric motor

223
00:08:01,759 --> 00:08:06,560
simulation and um so you have the

224
00:08:04,960 --> 00:08:07,840
induction field magnetic induction field

225
00:08:06,560 --> 00:08:09,759
on the left and then on the right you

226
00:08:07,840 --> 00:08:12,960
have the interpolation order

227
00:08:09,759 --> 00:08:15,120
that is the best to actually solve this

228
00:08:12,960 --> 00:08:16,638
as accurately as possible with as few

229
00:08:15,120 --> 00:08:18,639
degrees of freedom as possible

230
00:08:16,639 --> 00:08:20,319
and you see red the red is the the place

231
00:08:18,639 --> 00:08:21,599
where you have the highest interpolation

232
00:08:20,319 --> 00:08:24,080
order which is four here

233
00:08:21,599 --> 00:08:25,120
and this corresponds to the the flux

234
00:08:24,080 --> 00:08:27,359
concentrations

235
00:08:25,120 --> 00:08:28,800
which actually need to to be accurately

236
00:08:27,360 --> 00:08:31,039
solved for

237
00:08:28,800 --> 00:08:32,159
and so as you rotate the rotor it will

238
00:08:31,039 --> 00:08:34,640
automatically adapt

239
00:08:32,159 --> 00:08:36,240
this is just two lines of code to change

240
00:08:34,640 --> 00:08:37,279
there is really nothing difficult to

241
00:08:36,240 --> 00:08:39,599
that

242
00:08:37,279 --> 00:08:40,640
well probably in other softwares you

243
00:08:39,599 --> 00:08:42,479
might

244
00:08:40,640 --> 00:08:43,919
get in trouble if you actually want to

245
00:08:42,479 --> 00:08:46,640
use it

246
00:08:43,919 --> 00:08:49,199
now you also have extra things that you

247
00:08:46,640 --> 00:08:52,000
expect to have in finite element codes

248
00:08:49,200 --> 00:08:53,120
maybe a file format which in this case

249
00:08:52,000 --> 00:08:55,279
happens to be

250
00:08:53,120 --> 00:08:57,519
compared to vtk power view format if you

251
00:08:55,279 --> 00:08:59,760
run a fluid flow simulation in time

252
00:08:57,519 --> 00:09:00,640
you need to store 500 time steps you

253
00:08:59,760 --> 00:09:02,560
might need

254
00:09:00,640 --> 00:09:05,279
300 gigabytes of data here you will just

255
00:09:02,560 --> 00:09:05,680
need 30 gigabytes of data it's like 10

256
00:09:05,279 --> 00:09:09,040
times

257
00:09:05,680 --> 00:09:10,560
more compact than vtk for example and

258
00:09:09,040 --> 00:09:12,800
i don't believe it's possible to make it

259
00:09:10,560 --> 00:09:13,680
more compact because it just stores raw

260
00:09:12,800 --> 00:09:16,160
data

261
00:09:13,680 --> 00:09:18,000
and you can just easily reload it and

262
00:09:16,160 --> 00:09:19,920
that's the nice thing about it

263
00:09:18,000 --> 00:09:22,000
it's not just dumping data and loading

264
00:09:19,920 --> 00:09:24,399
again it you can easily reload

265
00:09:22,000 --> 00:09:26,800
it later even if you have no idea of how

266
00:09:24,399 --> 00:09:28,480
the simulation was done

267
00:09:26,800 --> 00:09:30,240
you have one liner probe so if you want

268
00:09:28,480 --> 00:09:31,440
to know the value and one specific

269
00:09:30,240 --> 00:09:32,320
position you have the interpolate

270
00:09:31,440 --> 00:09:34,320
function

271
00:09:32,320 --> 00:09:35,920
you have maxes averages integrals

272
00:09:34,320 --> 00:09:37,519
whatever this is very straightforward to

273
00:09:35,920 --> 00:09:38,479
use you have power view output format

274
00:09:37,519 --> 00:09:40,240
because

275
00:09:38,480 --> 00:09:43,040
power view to me is the best way to

276
00:09:40,240 --> 00:09:45,440
visualize simulation data

277
00:09:43,040 --> 00:09:47,839
um and then you have gmash and astron

278
00:09:45,440 --> 00:09:50,640
mesh input format and lots of more

279
00:09:47,839 --> 00:09:52,480
input formats via via petse that allows

280
00:09:50,640 --> 00:09:54,959
to load other

281
00:09:52,480 --> 00:09:57,200
other mesh forms and gmash as well which

282
00:09:54,959 --> 00:09:59,359
you probably know a lot

283
00:09:57,200 --> 00:10:00,959
you can also have curved meshes so quite

284
00:09:59,360 --> 00:10:04,000
a lot of extra features

285
00:10:00,959 --> 00:10:05,119
and it's very growing so probably you

286
00:10:04,000 --> 00:10:06,959
will see h

287
00:10:05,120 --> 00:10:08,959
some mesh refinements coming in the next

288
00:10:06,959 --> 00:10:10,640
month because this is currently what i

289
00:10:08,959 --> 00:10:14,000
need for the superconducting

290
00:10:10,640 --> 00:10:15,360
magnet simulations now it's concise and

291
00:10:14,000 --> 00:10:16,880
user friendly

292
00:10:15,360 --> 00:10:19,279
you don't need advanced knowledge of c

293
00:10:16,880 --> 00:10:20,480
plus plus it is t plus plus so you can

294
00:10:19,279 --> 00:10:21,920
easily link it

295
00:10:20,480 --> 00:10:23,440
but all the pointers and stuff are

296
00:10:21,920 --> 00:10:24,880
hidden you don't have to work with a

297
00:10:23,440 --> 00:10:27,680
memory

298
00:10:24,880 --> 00:10:29,200
um there's no hack it's highly readable

299
00:10:27,680 --> 00:10:30,800
so as an example

300
00:10:29,200 --> 00:10:32,560
you don't need to know the equations but

301
00:10:30,800 --> 00:10:33,839
if you want to run a 3d electrostatic

302
00:10:32,560 --> 00:10:35,359
simulation

303
00:10:33,839 --> 00:10:37,920
this is what you would need this is a

304
00:10:35,360 --> 00:10:41,519
working example nine lines of code

305
00:10:37,920 --> 00:10:41,519
two third of it which is just commands

306
00:10:41,839 --> 00:10:47,200
hard to beat i think it's

307
00:10:44,959 --> 00:10:48,800
object object-oriented programming um

308
00:10:47,200 --> 00:10:49,760
yeah just have a look at the examples

309
00:10:48,800 --> 00:10:52,240
online

310
00:10:49,760 --> 00:10:53,120
basically they might be just three times

311
00:10:52,240 --> 00:10:55,120
longer

312
00:10:53,120 --> 00:10:56,880
but with 20 lines of code you can run a

313
00:10:55,120 --> 00:10:58,720
full 3d fluid flow simulation for

314
00:10:56,880 --> 00:11:01,040
example

315
00:10:58,720 --> 00:11:02,560
now it's documented and not just like

316
00:11:01,040 --> 00:11:03,120
automatically documented it's really i

317
00:11:02,560 --> 00:11:05,359
spent

318
00:11:03,120 --> 00:11:06,480
a lot of time to document it so every

319
00:11:05,360 --> 00:11:09,760
function you you're

320
00:11:06,480 --> 00:11:11,200
supposed to use comes with a as detailed

321
00:11:09,760 --> 00:11:13,760
description as possible

322
00:11:11,200 --> 00:11:14,480
and also a working example like this one

323
00:11:13,760 --> 00:11:16,880
where you can just

324
00:11:14,480 --> 00:11:17,839
copy paste it and then work play around

325
00:11:16,880 --> 00:11:20,240
with the function

326
00:11:17,839 --> 00:11:23,120
to see what it actually does and what

327
00:11:20,240 --> 00:11:25,519
the specific things are about it

328
00:11:23,120 --> 00:11:27,120
this is valid for every function and

329
00:11:25,519 --> 00:11:29,760
whenever i add a function i add it

330
00:11:27,120 --> 00:11:31,920
immediately to the documentation

331
00:11:29,760 --> 00:11:33,680
and it's available on on github for free

332
00:11:31,920 --> 00:11:36,399
it's uh jbl

333
00:11:33,680 --> 00:11:38,079
open source of course and if there's

334
00:11:36,399 --> 00:11:41,040
anyone who develops a cad

335
00:11:38,079 --> 00:11:43,120
engine i would be definitely happy to

336
00:11:41,040 --> 00:11:45,360
have some interaction to include it

337
00:11:43,120 --> 00:11:45,360
thanks

338
00:11:50,880 --> 00:11:54,320
questions please

339
00:11:54,399 --> 00:12:01,920
can you also uh opt to do

340
00:11:58,560 --> 00:12:02,800
fem on uh 2d or 1d differential

341
00:12:01,920 --> 00:12:04,880
equations

342
00:12:02,800 --> 00:12:06,880
can you repeat the question uh can i do

343
00:12:04,880 --> 00:12:10,000
finite elements on 2d or 1d

344
00:12:06,880 --> 00:12:12,480
equations yeah so 3d to 2dx isometric 2d

345
00:12:10,000 --> 00:12:12,480
and 1d

346
00:12:22,839 --> 00:12:25,839
um

347
00:12:29,440 --> 00:12:33,279
oh you want to have like an average

348
00:12:31,279 --> 00:12:34,480
value for a thermal problem you want to

349
00:12:33,279 --> 00:12:37,360
know the average temperature or

350
00:12:34,480 --> 00:12:37,360
something

351
00:12:40,399 --> 00:12:44,240
so if you want to integrate the heat

352
00:12:41,760 --> 00:12:46,160
flow through a surface as one line

353
00:12:44,240 --> 00:12:47,680
so you have access to the normal you

354
00:12:46,160 --> 00:12:49,519
multiply by the heat flow

355
00:12:47,680 --> 00:12:51,760
you dot integrate you see on which

356
00:12:49,519 --> 00:12:52,639
region what integration order and you're

357
00:12:51,760 --> 00:12:55,839
done

358
00:12:52,639 --> 00:12:55,839
you have a double value out

359
00:13:02,480 --> 00:13:07,600
so topology i don't myself but i

360
00:13:05,680 --> 00:13:09,839
do i support topology optimization i

361
00:13:07,600 --> 00:13:13,200
don't myself but a former colleague

362
00:13:09,839 --> 00:13:14,639
uh managed to to do top mechanical

363
00:13:13,200 --> 00:13:16,079
topology optimizations there is an

364
00:13:14,639 --> 00:13:18,560
example online but

365
00:13:16,079 --> 00:13:20,000
no example button to click on because

366
00:13:18,560 --> 00:13:21,760
it's it's his software

367
00:13:20,000 --> 00:13:24,399
but yeah you definitely can because he

368
00:13:21,760 --> 00:13:26,800
did uh a 2d

369
00:13:24,399 --> 00:13:29,279
bridge topology optimization in

370
00:13:26,800 --> 00:13:29,279
mechanics

371
00:13:30,000 --> 00:13:34,560
yeah he did it so i can confirm it's

372
00:13:32,160 --> 00:13:34,560
possible

373
00:13:47,360 --> 00:13:53,360
what i heard uh am i limited to like

374
00:13:50,399 --> 00:13:55,120
conduction or and can i do other things

375
00:13:53,360 --> 00:13:58,240
of thermal analysis like

376
00:13:55,120 --> 00:14:02,079
other problems like convection radiation

377
00:13:58,240 --> 00:14:05,440
and uh heat um there's an example online

378
00:14:02,079 --> 00:14:05,760
for uh well conduction um you can also

379
00:14:05,440 --> 00:14:09,600
have

380
00:14:05,760 --> 00:14:11,920
there is also an example for um

381
00:14:09,600 --> 00:14:13,360
uh natural convection so that works as

382
00:14:11,920 --> 00:14:16,800
well quite easily especially now with

383
00:14:13,360 --> 00:14:19,360
the stabilization methods added

384
00:14:16,800 --> 00:14:20,079
and radiation i i haven't tried it so of

385
00:14:19,360 --> 00:14:22,959
course

386
00:14:20,079 --> 00:14:23,519
you can probably find out the equations

387
00:14:22,959 --> 00:14:25,279
that

388
00:14:23,519 --> 00:14:26,639
correspond to how much you lose but you

389
00:14:25,279 --> 00:14:28,480
cannot take into account the fact that

390
00:14:26,639 --> 00:14:30,800
you radiate on another face

391
00:14:28,480 --> 00:14:33,040
for the moment although maybe like

392
00:14:30,800 --> 00:14:35,359
particle tracing is being added

393
00:14:33,040 --> 00:14:36,719
maybe it can somehow do that but

394
00:14:35,360 --> 00:14:37,040
radiation would be the only thing that

395
00:14:36,720 --> 00:14:39,360
that's

396
00:14:37,040 --> 00:14:39,360
missing

397
00:14:42,560 --> 00:14:45,839
good yes

398
00:14:54,639 --> 00:14:59,120
for example

399
00:15:04,880 --> 00:15:09,680
so you're interested in including

400
00:15:08,320 --> 00:15:12,399
turbulence

401
00:15:09,680 --> 00:15:14,959
and in the simulation for the thermal

402
00:15:12,399 --> 00:15:14,959
convection

403
00:15:15,440 --> 00:15:18,720
general fluid so i actually that's funny

404
00:15:18,320 --> 00:15:21,360
because

405
00:15:18,720 --> 00:15:22,560
one one month ago i thought what am i

406
00:15:21,360 --> 00:15:24,800
gonna do next

407
00:15:22,560 --> 00:15:26,560
and i thought i'm gonna add a turbulence

408
00:15:24,800 --> 00:15:28,479
model for a fluid flow model with a

409
00:15:26,560 --> 00:15:30,719
spell art almarus

410
00:15:28,480 --> 00:15:32,399
and everything is ready to to add it uh

411
00:15:30,720 --> 00:15:34,399
it's just that i thought

412
00:15:32,399 --> 00:15:35,600
it's too specific i i don't want to

413
00:15:34,399 --> 00:15:37,440
write something that is

414
00:15:35,600 --> 00:15:39,440
just for compressive incompressible

415
00:15:37,440 --> 00:15:41,440
fluid in this specific case

416
00:15:39,440 --> 00:15:42,560
um i think for the moment the user will

417
00:15:41,440 --> 00:15:44,959
have to write it in

418
00:15:42,560 --> 00:15:45,680
himself but uh spell art elmorez at

419
00:15:44,959 --> 00:15:48,719
least

420
00:15:45,680 --> 00:15:49,040
is is easy to add and the only thing you

421
00:15:48,720 --> 00:15:50,560
need

422
00:15:49,040 --> 00:15:52,800
in this case is to know the distance to

423
00:15:50,560 --> 00:15:53,119
the wall and this if you need help for

424
00:15:52,800 --> 00:15:55,839
that

425
00:15:53,120 --> 00:15:55,839
i know what to do

426
00:16:05,519 --> 00:16:08,800
if you want to add a different set of

427
00:16:07,440 --> 00:16:12,000
shape functions

428
00:16:08,800 --> 00:16:14,639
yourself i

429
00:16:12,000 --> 00:16:15,759
think it's quite easy so you have like a

430
00:16:14,639 --> 00:16:17,440
folder with

431
00:16:15,759 --> 00:16:19,120
all the h curl shape functions all the

432
00:16:17,440 --> 00:16:20,160
h1 shape functions you could just create

433
00:16:19,120 --> 00:16:23,199
another one

434
00:16:20,160 --> 00:16:24,480
and it als it also this all is quite

435
00:16:23,199 --> 00:16:26,479
readable because it's called a

436
00:16:24,480 --> 00:16:28,480
polynomial function where you can

437
00:16:26,480 --> 00:16:30,240
just make products of polynomials which

438
00:16:28,480 --> 00:16:32,720
you first define

439
00:16:30,240 --> 00:16:33,519
and based on what is already there i

440
00:16:32,720 --> 00:16:37,839
think

441
00:16:33,519 --> 00:16:37,839
it's really doable for a user

442
00:16:46,240 --> 00:16:51,759
it's it's it's generated

443
00:16:50,240 --> 00:16:55,600
i didn't fully understand is my

444
00:16:51,759 --> 00:16:55,600
stiffness matrix explicitly or

445
00:16:57,199 --> 00:16:59,680
build up

446
00:17:02,000 --> 00:17:06,000
with the way it's built i call a

447
00:17:04,720 --> 00:17:09,360
function that

448
00:17:06,000 --> 00:17:11,679
that creates a a matte object which

449
00:17:09,359 --> 00:17:13,760
includes all the terms of the stiffness

450
00:17:11,679 --> 00:17:16,799
matrix and this is created

451
00:17:13,760 --> 00:17:18,000
in basically the core of sparse lizard a

452
00:17:16,799 --> 00:17:19,760
function that

453
00:17:18,000 --> 00:17:22,319
calls everything that needs to be called

454
00:17:19,760 --> 00:17:26,160
and just assembles very efficiently

455
00:17:22,319 --> 00:17:26,159
all the terms in the stiffness equation

456
00:17:30,840 --> 00:17:33,840
what

457
00:17:34,960 --> 00:17:41,600
yeah yeah you you can i tried with up to

458
00:17:38,960 --> 00:17:42,080
50 million degrees of freedom in 2d um

459
00:17:41,600 --> 00:17:43,918
and

460
00:17:42,080 --> 00:17:45,439
5 million degrees of freedom for fluid

461
00:17:43,919 --> 00:17:47,679
flowing in 3d

462
00:17:45,440 --> 00:17:48,960
of course on bigger machines but not

463
00:17:47,679 --> 00:17:51,919
like super computers but

464
00:17:48,960 --> 00:17:53,760
more 32 core machine with a 700

465
00:17:51,919 --> 00:17:55,520
gigabytes of ram

466
00:17:53,760 --> 00:17:57,679
and yeah definitely this uh this is

467
00:17:55,520 --> 00:18:00,720
doable the only limit for now

468
00:17:57,679 --> 00:18:02,720
is that i called pet to call

469
00:18:00,720 --> 00:18:04,320
mumps because mumps is efficient in

470
00:18:02,720 --> 00:18:07,200
solving algebraic problem

471
00:18:04,320 --> 00:18:10,080
and for now pepsi uh doesn't call the

472
00:18:07,200 --> 00:18:12,799
new version of moms and so it's limited

473
00:18:10,080 --> 00:18:14,559
to a number of non-zeros in the matrix

474
00:18:12,799 --> 00:18:17,679
that is less than about

475
00:18:14,559 --> 00:18:21,840
1 or 2 billion which limits

476
00:18:17,679 --> 00:18:21,840
2d problems to 50 million unknowns

477
00:18:27,039 --> 00:18:31,039
so what refund this uh is not in the

478
00:18:29,360 --> 00:18:31,360
documentation that it will be released

479
00:18:31,039 --> 00:18:34,400
on

480
00:18:31,360 --> 00:18:35,280
wednesday but it will be uh up to the

481
00:18:34,400 --> 00:18:37,600
user to choose

482
00:18:35,280 --> 00:18:39,360
so for example you can because that

483
00:18:37,600 --> 00:18:43,039
gives you the most flexible

484
00:18:39,360 --> 00:18:44,559
thing for example you'll be able to

485
00:18:43,039 --> 00:18:46,480
in the motor example you have a vector

486
00:18:44,559 --> 00:18:46,799
potential and then you could just see

487
00:18:46,480 --> 00:18:48,640
that

488
00:18:46,799 --> 00:18:50,720
you check on the norm of the gradient of

489
00:18:48,640 --> 00:18:52,799
the z component of the vector potential

490
00:18:50,720 --> 00:18:55,039
basically to see where things are

491
00:18:52,799 --> 00:18:56,559
sharper and where it's sharper you have

492
00:18:55,039 --> 00:18:58,240
like corners and stuff in there that's

493
00:18:56,559 --> 00:19:00,240
where you want to refine more

494
00:18:58,240 --> 00:19:02,000
so but it's up to you to choose with

495
00:19:00,240 --> 00:19:04,080
whatever expression because you can

496
00:19:02,000 --> 00:19:05,919
build any expression easily in sparse

497
00:19:04,080 --> 00:19:11,840
lizard to choose it

498
00:19:05,919 --> 00:19:11,840
all right thank you

499
00:19:18,000 --> 00:19:20,080
you

