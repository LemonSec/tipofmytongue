1
00:00:11,200 --> 00:00:16,960
it's wonderful to see all here

2
00:00:13,519 --> 00:00:22,640
it's a geospatial day room which means

3
00:00:16,960 --> 00:00:22,640
we use we like and we work with maps

4
00:00:22,800 --> 00:00:30,720
and we do that in multiple ways

5
00:00:26,320 --> 00:00:31,119
like yesterday i believe most of you had

6
00:00:30,720 --> 00:00:33,760
to

7
00:00:31,119 --> 00:00:34,239
find your restaurant for the evening or

8
00:00:33,760 --> 00:00:38,079
your

9
00:00:34,239 --> 00:00:41,839
hotel who did open their map app

10
00:00:38,079 --> 00:00:44,399
and type something into search field

11
00:00:41,840 --> 00:00:45,120
oh you see that's a lot more than i

12
00:00:44,399 --> 00:00:47,120
expected

13
00:00:45,120 --> 00:00:48,800
and that's the thing that we do often

14
00:00:47,120 --> 00:00:52,000
just typing things into

15
00:00:48,800 --> 00:00:52,879
application and the application gives

16
00:00:52,000 --> 00:00:56,399
you

17
00:00:52,879 --> 00:00:59,358
uh coordinates location where you go to

18
00:00:56,399 --> 00:00:59,840
that is called geocoding converting your

19
00:00:59,359 --> 00:01:03,440
phrase

20
00:00:59,840 --> 00:01:06,479
into a location on the map

21
00:01:03,440 --> 00:01:10,000
and that's one of the three pillars

22
00:01:06,479 --> 00:01:13,840
of applied cartography finding things

23
00:01:10,000 --> 00:01:13,840
plotting around displaying a map

24
00:01:14,000 --> 00:01:18,080
but when you take a geospatial

25
00:01:16,799 --> 00:01:21,280
specialist

26
00:01:18,080 --> 00:01:25,200
and make him or her work on

27
00:01:21,280 --> 00:01:29,360
geocoding i doubt

28
00:01:25,200 --> 00:01:31,680
they will like it because

29
00:01:29,360 --> 00:01:32,880
underneath all that geocoding is not

30
00:01:31,680 --> 00:01:36,479
exactly a mapping

31
00:01:32,880 --> 00:01:38,560
problem it's more of a language

32
00:01:36,479 --> 00:01:40,000
processing problem you take a phrase you

33
00:01:38,560 --> 00:01:42,960
split it by tokens

34
00:01:40,000 --> 00:01:43,520
you do a full text search return result

35
00:01:42,960 --> 00:01:46,798
it's

36
00:01:43,520 --> 00:01:50,158
not about maps at all

37
00:01:46,799 --> 00:01:53,840
but the reverse problem

38
00:01:50,159 --> 00:01:57,759
given location producing a

39
00:01:53,840 --> 00:02:00,320
understandable stream of address

40
00:01:57,759 --> 00:02:02,079
is much more interesting and challenging

41
00:02:00,320 --> 00:02:04,559
as i found out

42
00:02:02,079 --> 00:02:06,639
i was tasked with installing a reverse

43
00:02:04,560 --> 00:02:09,759
jack order at my last job

44
00:02:06,640 --> 00:02:12,000
in june that's a ride sharing operator

45
00:02:09,758 --> 00:02:15,200
in new york

46
00:02:12,000 --> 00:02:17,599
and instead of using one of the

47
00:02:15,200 --> 00:02:18,958
pre-built solutions like nominating i

48
00:02:17,599 --> 00:02:21,599
decided to try to

49
00:02:18,959 --> 00:02:23,040
write my own decoder because how hard

50
00:02:21,599 --> 00:02:26,079
can it be

51
00:02:23,040 --> 00:02:28,640
like uh how do you know

52
00:02:26,080 --> 00:02:29,760
you're in belgium right now uh given

53
00:02:28,640 --> 00:02:33,200
your location

54
00:02:29,760 --> 00:02:36,560
you can just take uh

55
00:02:33,200 --> 00:02:38,720
a set of country polygons and do a

56
00:02:36,560 --> 00:02:42,160
simple point in polygon search

57
00:02:38,720 --> 00:02:45,200
and you will get a result like belgium

58
00:02:42,160 --> 00:02:47,040
which you can produce to user

59
00:02:45,200 --> 00:02:48,879
pointing polygon is one of the basic

60
00:02:47,040 --> 00:02:51,280
operations in geospatial

61
00:02:48,879 --> 00:02:52,879
it's highly optimized there are very

62
00:02:51,280 --> 00:02:56,160
fast algorithms you can do that

63
00:02:52,879 --> 00:02:56,160
thousand times a second

64
00:02:56,400 --> 00:02:59,840
and you can find your country except in

65
00:02:59,200 --> 00:03:02,560
the real

66
00:02:59,840 --> 00:03:04,239
real world sometimes you can get two or

67
00:03:02,560 --> 00:03:06,159
three countries at once

68
00:03:04,239 --> 00:03:07,760
like on the river i think between

69
00:03:06,159 --> 00:03:09,200
luxembourg and germany that belongs to

70
00:03:07,760 --> 00:03:12,560
both countries

71
00:03:09,200 --> 00:03:16,238
or disputed territories like crimea

72
00:03:12,560 --> 00:03:19,040
or anything sometimes you can get

73
00:03:16,239 --> 00:03:19,760
no countries at all not only in oceans

74
00:03:19,040 --> 00:03:22,400
but

75
00:03:19,760 --> 00:03:23,280
also there are unclaimed territories

76
00:03:22,400 --> 00:03:25,519
like in africa

77
00:03:23,280 --> 00:03:30,000
and stuff you have to convey some

78
00:03:25,519 --> 00:03:30,000
somehow to a user who requested records

79
00:03:30,080 --> 00:03:37,920
the same for regions uh but when

80
00:03:34,080 --> 00:03:40,400
how do you get a city

81
00:03:37,920 --> 00:03:41,440
like uh how do you know you're in

82
00:03:40,400 --> 00:03:45,280
brussels

83
00:03:41,440 --> 00:03:46,400
for example again you can take a set of

84
00:03:45,280 --> 00:03:49,840
uh

85
00:03:46,400 --> 00:03:52,480
city boundary polygons and

86
00:03:49,840 --> 00:03:54,319
find out yeah you're in brussels but

87
00:03:52,480 --> 00:03:55,359
what if you're in smaller town or a

88
00:03:54,319 --> 00:03:58,560
village

89
00:03:55,360 --> 00:04:03,280
and there are no databases of

90
00:03:58,560 --> 00:04:05,360
village polygons all you get are points

91
00:04:03,280 --> 00:04:06,560
like how many people can fit in a single

92
00:04:05,360 --> 00:04:10,159
point

93
00:04:06,560 --> 00:04:11,760
thousands of them because many towns and

94
00:04:10,159 --> 00:04:14,480
even cities

95
00:04:11,760 --> 00:04:15,760
often reside in any databases like

96
00:04:14,480 --> 00:04:18,719
points

97
00:04:15,760 --> 00:04:20,238
so what you need is finding a nearest

98
00:04:18,720 --> 00:04:22,240
point

99
00:04:20,238 --> 00:04:23,919
and that is again a basic operation

100
00:04:22,240 --> 00:04:26,160
geospatial

101
00:04:23,919 --> 00:04:29,599
it's index set it's optimized you can do

102
00:04:26,160 --> 00:04:32,639
that a lot

103
00:04:29,600 --> 00:04:34,400
but cities are different they of

104
00:04:32,639 --> 00:04:37,759
different sizes

105
00:04:34,400 --> 00:04:38,239
uh sometimes variables point and polygon

106
00:04:37,759 --> 00:04:40,880
for

107
00:04:38,240 --> 00:04:41,600
a city like an open street map there are

108
00:04:40,880 --> 00:04:45,280
points for

109
00:04:41,600 --> 00:04:48,479
city regions neighborhoods

110
00:04:45,280 --> 00:04:51,840
and to know where you are you have to

111
00:04:48,479 --> 00:04:53,758
make a lot of queries

112
00:04:51,840 --> 00:04:55,280
pointing polygons for countries for

113
00:04:53,759 --> 00:04:58,880
regions nearest point for

114
00:04:55,280 --> 00:05:01,039
cities rank them choose what you need

115
00:04:58,880 --> 00:05:03,840
that sort of queries and these can take

116
00:05:01,039 --> 00:05:06,800
a long time you have to optimize it

117
00:05:03,840 --> 00:05:08,320
and one of the useful things are voronoi

118
00:05:06,800 --> 00:05:10,240
polygons

119
00:05:08,320 --> 00:05:11,360
basically for each point they build a

120
00:05:10,240 --> 00:05:14,000
polygon

121
00:05:11,360 --> 00:05:16,639
from inside which that point is the

122
00:05:14,000 --> 00:05:16,639
nearest one

123
00:05:17,039 --> 00:05:20,080
with that basically you convert your

124
00:05:19,199 --> 00:05:24,160
nearest point

125
00:05:20,080 --> 00:05:28,080
request to point in polygon request and

126
00:05:24,160 --> 00:05:28,080
doing a bit more uh

127
00:05:28,160 --> 00:05:32,560
bounding a bit more optimization

128
00:05:29,919 --> 00:05:34,560
pre-processing and

129
00:05:32,560 --> 00:05:36,160
you can get the entire administrative

130
00:05:34,560 --> 00:05:38,800
hierarchy

131
00:05:36,160 --> 00:05:39,840
from country to city neighborhood in

132
00:05:38,800 --> 00:05:42,639
just one query

133
00:05:39,840 --> 00:05:42,638
very fast one

134
00:05:44,639 --> 00:05:51,039
that's how do administrative queries

135
00:05:47,840 --> 00:05:51,599
but frankly the question which city i am

136
00:05:51,039 --> 00:05:54,719
in

137
00:05:51,600 --> 00:05:58,319
doesn't come up often no more often than

138
00:05:54,720 --> 00:06:00,880
what year it is it can

139
00:05:58,319 --> 00:06:01,919
come handy but uh not for most people i

140
00:06:00,880 --> 00:06:04,639
know in brussels

141
00:06:01,919 --> 00:06:06,000
what i'm interested in is more process

142
00:06:04,639 --> 00:06:08,080
precise location

143
00:06:06,000 --> 00:06:10,160
which means address which means house

144
00:06:08,080 --> 00:06:12,080
number and a street

145
00:06:10,160 --> 00:06:14,400
for most countries its house number and

146
00:06:12,080 --> 00:06:14,400
state

147
00:06:14,479 --> 00:06:17,280
how do you know that

148
00:06:18,400 --> 00:06:24,560
there are multiple open databases

149
00:06:22,240 --> 00:06:25,360
with address locations which means

150
00:06:24,560 --> 00:06:29,360
coordinate

151
00:06:25,360 --> 00:06:32,160
and address you can use

152
00:06:29,360 --> 00:06:33,840
them very simply you can find nearest

153
00:06:32,160 --> 00:06:38,000
points

154
00:06:33,840 --> 00:06:41,198
again and get your address like

155
00:06:38,000 --> 00:06:43,840
what is the dress for the red point

156
00:06:41,199 --> 00:06:43,840
you can shout

157
00:06:46,560 --> 00:06:50,800
no it's k7 okay

158
00:06:50,960 --> 00:06:54,799
this one um i'm really sorry

159
00:06:55,360 --> 00:07:03,280
okay yes given this database it's k7

160
00:07:00,400 --> 00:07:03,840
it's a pretty close answer except that

161
00:07:03,280 --> 00:07:07,119
in

162
00:07:03,840 --> 00:07:08,000
many countries addresses are given not

163
00:07:07,120 --> 00:07:10,479
to

164
00:07:08,000 --> 00:07:11,199
entrances like in brussels not to points

165
00:07:10,479 --> 00:07:14,159
but

166
00:07:11,199 --> 00:07:15,280
to buildings that's the case for united

167
00:07:14,160 --> 00:07:17,680
states for russia

168
00:07:15,280 --> 00:07:19,440
for belarus for quite a lot of countries

169
00:07:17,680 --> 00:07:22,639
actually

170
00:07:19,440 --> 00:07:24,319
and since buildings are not points these

171
00:07:22,639 --> 00:07:28,479
results can sometimes be

172
00:07:24,319 --> 00:07:28,479
not very specific not very precise

173
00:07:29,199 --> 00:07:33,840
but thankfully we use openstreetmap open

174
00:07:31,919 --> 00:07:35,599
sysmap has a lot of building polygons

175
00:07:33,840 --> 00:07:39,280
with addresses on them

176
00:07:35,599 --> 00:07:39,840
so the task of finding an address for a

177
00:07:39,280 --> 00:07:42,960
point

178
00:07:39,840 --> 00:07:45,679
for reverse geocoding in most cases is

179
00:07:42,960 --> 00:07:48,159
very simple you just

180
00:07:45,680 --> 00:07:48,879
find a nearest addressed object in the

181
00:07:48,160 --> 00:07:51,919
database

182
00:07:48,879 --> 00:07:54,319
and your set and that is

183
00:07:51,919 --> 00:07:55,758
how virtually every reverse geocoder in

184
00:07:54,319 --> 00:07:57,280
the world works

185
00:07:55,759 --> 00:07:59,199
including nominating they keep a

186
00:07:57,280 --> 00:08:01,039
database of addressed objects

187
00:07:59,199 --> 00:08:02,960
and they find the closest one an

188
00:08:01,039 --> 00:08:06,800
insurance address very fast

189
00:08:02,960 --> 00:08:10,960
very simple works in most cases

190
00:08:06,800 --> 00:08:10,960
except some corner cases

191
00:08:11,199 --> 00:08:16,160
which corner case like corner corner

192
00:08:13,680 --> 00:08:19,039
buildings

193
00:08:16,160 --> 00:08:19,759
uh they often have addresses they

194
00:08:19,039 --> 00:08:24,479
addressed

195
00:08:19,759 --> 00:08:28,720
by two streets or more streets there on

196
00:08:24,479 --> 00:08:28,719
how do you map that like

197
00:08:29,840 --> 00:08:36,240
because it's one object it can have two

198
00:08:33,039 --> 00:08:40,479
similar prop different properties

199
00:08:36,240 --> 00:08:44,640
well in openstreetmap

200
00:08:40,479 --> 00:08:48,640
anything goes so people just add

201
00:08:44,640 --> 00:08:52,640
two address points inside and

202
00:08:48,640 --> 00:08:55,600
are done with it so

203
00:08:52,640 --> 00:08:56,560
what is the address we expect to know

204
00:08:55,600 --> 00:09:04,080
about

205
00:08:56,560 --> 00:09:04,079
this formula red points

206
00:09:06,839 --> 00:09:14,160
so somebody answered k5

207
00:09:09,839 --> 00:09:14,160
why because it's located

208
00:09:14,959 --> 00:09:21,279
yes exactly you're on k street you

209
00:09:18,080 --> 00:09:23,120
if you give uh p6 address then

210
00:09:21,279 --> 00:09:24,399
your car or your friends will wait at

211
00:09:23,120 --> 00:09:27,519
the wrong side of the building

212
00:09:24,399 --> 00:09:31,200
so you need k5 but here

213
00:09:27,519 --> 00:09:34,640
if you employ nearest object look up

214
00:09:31,200 --> 00:09:38,880
you will get the wrong address why

215
00:09:34,640 --> 00:09:42,240
why is that yeah uh

216
00:09:38,880 --> 00:09:43,279
so it turns out that some points need

217
00:09:42,240 --> 00:09:45,120
special processing

218
00:09:43,279 --> 00:09:46,480
like when an address point is inside the

219
00:09:45,120 --> 00:09:48,080
building

220
00:09:46,480 --> 00:09:50,880
it's not actually a point it's a

221
00:09:48,080 --> 00:09:54,000
property of the building

222
00:09:50,880 --> 00:09:56,640
so it doesn't matter how far it is

223
00:09:54,000 --> 00:09:57,760
you just take distance of closest

224
00:09:56,640 --> 00:10:01,199
building and

225
00:09:57,760 --> 00:10:04,319
take address from a point and you can

226
00:10:01,200 --> 00:10:06,959
can imagine your imaginary query

227
00:10:04,320 --> 00:10:08,000
for looking up an address becomes much

228
00:10:06,959 --> 00:10:10,000
more complex

229
00:10:08,000 --> 00:10:11,279
because it's not a nearest object

230
00:10:10,000 --> 00:10:14,160
anymore it's not

231
00:10:11,279 --> 00:10:16,720
about pointing polygon it's a special

232
00:10:14,160 --> 00:10:19,199
processing in which you find

233
00:10:16,720 --> 00:10:20,160
closest building then find points inside

234
00:10:19,200 --> 00:10:23,040
it and

235
00:10:20,160 --> 00:10:25,040
find a proper address point and so on

236
00:10:23,040 --> 00:10:28,240
and in open sitemap it can be

237
00:10:25,040 --> 00:10:31,680
even worse like a building can have

238
00:10:28,240 --> 00:10:35,040
many addresses on different streets

239
00:10:31,680 --> 00:10:36,239
like up to four streets and you might

240
00:10:35,040 --> 00:10:39,519
need to find

241
00:10:36,240 --> 00:10:41,440
a proper location proper address

242
00:10:39,519 --> 00:10:44,240
description for any point

243
00:10:41,440 --> 00:10:45,279
including points inside the buildings

244
00:10:44,240 --> 00:10:47,200
what is the address for

245
00:10:45,279 --> 00:10:49,600
this point i don't know it can be

246
00:10:47,200 --> 00:10:49,600
anything

247
00:10:50,240 --> 00:10:53,600
but you have to produce a string that

248
00:10:52,880 --> 00:10:56,560
will be

249
00:10:53,600 --> 00:11:00,480
understandable that people will know how

250
00:10:56,560 --> 00:11:03,839
did you come with this string

251
00:11:00,480 --> 00:11:07,040
and in openstreetmap anything goes

252
00:11:03,839 --> 00:11:09,440
so the these were simple cases

253
00:11:07,040 --> 00:11:10,480
there are more interesting cases like

254
00:11:09,440 --> 00:11:13,040
for example

255
00:11:10,480 --> 00:11:14,800
a location inside the building that has

256
00:11:13,040 --> 00:11:16,800
an address itself

257
00:11:14,800 --> 00:11:18,079
that has addressed point with different

258
00:11:16,800 --> 00:11:20,160
address inside

259
00:11:18,079 --> 00:11:22,479
and there is also cafe with different

260
00:11:20,160 --> 00:11:24,959
address

261
00:11:22,480 --> 00:11:26,240
so this can be there for different

262
00:11:24,959 --> 00:11:29,359
reasons

263
00:11:26,240 --> 00:11:32,480
so is it here number

264
00:11:29,360 --> 00:11:33,839
14 or still 16 because this point is not

265
00:11:32,480 --> 00:11:37,120
too far

266
00:11:33,839 --> 00:11:41,040
and cafe most definitely

267
00:11:37,120 --> 00:11:44,720
is about just a single entrance and move

268
00:11:41,040 --> 00:11:48,560
away a bit and it's different address

269
00:11:44,720 --> 00:11:49,920
so in these cases you have to come up

270
00:11:48,560 --> 00:11:52,319
with

271
00:11:49,920 --> 00:11:52,959
ranking different objects how they

272
00:11:52,320 --> 00:11:57,440
influence

273
00:11:52,959 --> 00:12:00,079
the outcome correctly

274
00:11:57,440 --> 00:12:02,480
find distances on which address work and

275
00:12:00,079 --> 00:12:02,479
so on

276
00:12:03,600 --> 00:12:07,600
and again in openstreetmap you can find

277
00:12:06,720 --> 00:12:09,839
anything like

278
00:12:07,600 --> 00:12:10,639
address building inside an address

279
00:12:09,839 --> 00:12:13,519
building

280
00:12:10,639 --> 00:12:14,880
with different addresses this might be

281
00:12:13,519 --> 00:12:18,560
correct because

282
00:12:14,880 --> 00:12:22,000
it's one is underground we have to fight

283
00:12:18,560 --> 00:12:24,319
for this case and there are

284
00:12:22,000 --> 00:12:25,680
addresses can go and anything including

285
00:12:24,320 --> 00:12:27,920
territories

286
00:12:25,680 --> 00:12:28,800
so like imagine a school with a very big

287
00:12:27,920 --> 00:12:31,040
yard

288
00:12:28,800 --> 00:12:34,319
it's fenced and the whole the entire

289
00:12:31,040 --> 00:12:37,360
school has got an address

290
00:12:34,320 --> 00:12:39,920
and when you're standing

291
00:12:37,360 --> 00:12:40,480
at the point which address would you

292
00:12:39,920 --> 00:12:43,680
like to

293
00:12:40,480 --> 00:12:43,680
give to your friend to meet

294
00:12:44,320 --> 00:12:50,160
is it k5 like who knows where it is

295
00:12:47,360 --> 00:12:50,959
or k6 which is across the road it's

296
00:12:50,160 --> 00:12:56,240
further

297
00:12:50,959 --> 00:12:58,239
from from you but seems like not correct

298
00:12:56,240 --> 00:13:00,000
and you have to account for that in your

299
00:12:58,240 --> 00:13:03,279
hypothetical query

300
00:13:00,000 --> 00:13:05,440
for looking up an address like

301
00:13:03,279 --> 00:13:07,839
in this case we might pre-process the

302
00:13:05,440 --> 00:13:10,959
data to move address from a territory to

303
00:13:07,839 --> 00:13:10,959
the biggest building site

304
00:13:12,560 --> 00:13:16,160
openstack map data model provides

305
00:13:14,880 --> 00:13:20,560
multiple challenges

306
00:13:16,160 --> 00:13:23,439
some of which are quite hard even for me

307
00:13:20,560 --> 00:13:26,319
like a dress interpolation what is the

308
00:13:23,440 --> 00:13:28,720
address of that point

309
00:13:26,320 --> 00:13:28,720
anybody

310
00:13:30,399 --> 00:13:35,360
take a guess yeah okay for example k6

311
00:13:33,360 --> 00:13:37,519
it's plausible

312
00:13:35,360 --> 00:13:38,720
you just find nearest point on the

313
00:13:37,519 --> 00:13:41,920
interpolation line

314
00:13:38,720 --> 00:13:44,000
interpolation means there are

315
00:13:41,920 --> 00:13:46,560
multiple sequential numbers on that line

316
00:13:44,000 --> 00:13:49,839
from 2 to 16.

317
00:13:46,560 --> 00:13:52,319
so maybe k6

318
00:13:49,839 --> 00:13:54,399
but in the real world there might be no

319
00:13:52,320 --> 00:13:56,240
such building there might be k2 k10 and

320
00:13:54,399 --> 00:13:58,720
k16 and that's all

321
00:13:56,240 --> 00:13:59,440
so using just interpolation data you

322
00:13:58,720 --> 00:14:03,760
will give

323
00:13:59,440 --> 00:14:06,800
a user and non-existing address

324
00:14:03,760 --> 00:14:10,720
is it okay to give given that

325
00:14:06,800 --> 00:14:12,959
it's roughly uh

326
00:14:10,720 --> 00:14:14,000
precise but if they type that address

327
00:14:12,959 --> 00:14:16,880
into a different app

328
00:14:14,000 --> 00:14:19,120
they will find nothing and it just won't

329
00:14:16,880 --> 00:14:19,120
work

330
00:14:19,760 --> 00:14:24,480
so there are multiple things you have to

331
00:14:22,240 --> 00:14:28,079
consider what do reverse

332
00:14:24,480 --> 00:14:30,800
geocoding and it's all quite fun to do

333
00:14:28,079 --> 00:14:32,160
especially when testing and the point of

334
00:14:30,800 --> 00:14:34,000
this talk is

335
00:14:32,160 --> 00:14:36,079
all i've been talking about is real it

336
00:14:34,000 --> 00:14:40,000
happens in openstreetmap database

337
00:14:36,079 --> 00:14:43,599
and the geocoder uh that i've been

338
00:14:40,000 --> 00:14:46,959
writing accommodates for these cases

339
00:14:43,600 --> 00:14:51,440
like all these came through

340
00:14:46,959 --> 00:14:51,439
testing on the real open sysmap data

341
00:14:52,079 --> 00:14:57,680
the geocoder was published it was

342
00:14:55,600 --> 00:14:59,760
installed in production it could perform

343
00:14:57,680 --> 00:15:03,439
like 50 queries

344
00:14:59,760 --> 00:15:06,240
per second it performs better than

345
00:15:03,440 --> 00:15:07,040
nominating and other geocoders because

346
00:15:06,240 --> 00:15:10,079
it's not just

347
00:15:07,040 --> 00:15:10,639
nearly addressed object it knows about

348
00:15:10,079 --> 00:15:15,599
all these

349
00:15:10,639 --> 00:15:15,600
corner cases and it is open source

350
00:15:16,240 --> 00:15:19,279
it was written for juno company and

351
00:15:18,240 --> 00:15:24,800
junior company

352
00:15:19,279 --> 00:15:24,800
has ceased to be it's no more x company

353
00:15:25,440 --> 00:15:32,880
but i don't want it to be buried

354
00:15:29,680 --> 00:15:34,560
among github open source projects so i

355
00:15:32,880 --> 00:15:37,199
urge you to

356
00:15:34,560 --> 00:15:37,680
open this link and just take a look

357
00:15:37,199 --> 00:15:41,758
because

358
00:15:37,680 --> 00:15:44,560
it's uh several

359
00:15:41,759 --> 00:15:45,519
dozens of screens of scale code heavily

360
00:15:44,560 --> 00:15:49,040
commented

361
00:15:45,519 --> 00:15:51,360
with hundreds of unit integration tests

362
00:15:49,040 --> 00:15:53,599
it really seemed it's really simple to

363
00:15:51,360 --> 00:15:56,399
deploy it has docker container

364
00:15:53,600 --> 00:15:59,360
it has you know it works on a pretty

365
00:15:56,399 --> 00:16:03,199
plain or centripet gsql database

366
00:15:59,360 --> 00:16:04,399
and it's very fast i don't work on that

367
00:16:03,199 --> 00:16:07,120
anymore because

368
00:16:04,399 --> 00:16:08,320
i'm now in different company but i'll be

369
00:16:07,120 --> 00:16:10,560
happy to

370
00:16:08,320 --> 00:16:11,680
find some more corner cases to think

371
00:16:10,560 --> 00:16:13,680
about how to

372
00:16:11,680 --> 00:16:15,040
accommodate for them and maybe to

373
00:16:13,680 --> 00:16:23,839
improve this and see

374
00:16:15,040 --> 00:16:23,839
this geocoder used so thank you

375
00:16:32,320 --> 00:16:38,880
because my current company doesn't use

376
00:16:36,160 --> 00:16:41,040
open statement for jeopardy

377
00:16:38,880 --> 00:16:42,880
they it's much much bigger i work in

378
00:16:41,040 --> 00:16:48,000
lyft now

379
00:16:42,880 --> 00:16:48,000
and it has their own data with different

380
00:16:48,839 --> 00:16:51,839
constraints

381
00:16:56,480 --> 00:17:01,759
[Music]

382
00:16:58,720 --> 00:17:06,319
leaky abstractions

383
00:17:01,759 --> 00:17:08,799
in other words problem are you solving

384
00:17:06,319 --> 00:17:10,799
for taxi companies nationally by solving

385
00:17:08,799 --> 00:17:12,959
this problem if the taxi shows up close

386
00:17:10,799 --> 00:17:12,959
enough

387
00:17:13,760 --> 00:17:20,959
well i'm solving a problem of

388
00:17:17,520 --> 00:17:22,319
making an address easy to understand

389
00:17:20,959 --> 00:17:26,240
easy to pronounce

390
00:17:22,319 --> 00:17:28,799
because many taxi drivers do not use

391
00:17:26,240 --> 00:17:30,320
taxi app for navigation they switch to

392
00:17:28,799 --> 00:17:32,960
waze or google maps

393
00:17:30,320 --> 00:17:33,520
they type in the address and they go to

394
00:17:32,960 --> 00:17:37,280
the point

395
00:17:33,520 --> 00:17:41,440
so the address has to be correct

396
00:17:37,280 --> 00:17:41,440
so that they plot a correct route

397
00:17:41,600 --> 00:17:46,480
and basically that's it that you need a

398
00:17:44,799 --> 00:17:47,039
location that's easy to understand

399
00:17:46,480 --> 00:17:49,760
enough

400
00:17:47,039 --> 00:17:51,280
and services like what's rewards or plus

401
00:17:49,760 --> 00:17:54,320
code they don't solve this

402
00:17:51,280 --> 00:17:57,360
because few people have

403
00:17:54,320 --> 00:18:00,960
can process these codes

404
00:17:57,360 --> 00:18:00,959
okay next question can you

405
00:18:01,360 --> 00:18:05,600
of course it's the same same link if you

406
00:18:03,679 --> 00:18:08,000
use qr codes

407
00:18:05,600 --> 00:18:08,000
but yeah

408
00:18:09,200 --> 00:18:15,840
you have a question let's i think

409
00:18:12,480 --> 00:18:15,840
she asked

410
00:18:23,520 --> 00:18:27,520
to work in countries where there's not

411
00:18:25,120 --> 00:18:30,959
precise address like african countries

412
00:18:27,520 --> 00:18:34,799
such as some buildings or even arab

413
00:18:30,960 --> 00:18:36,480
war um what work in general being done

414
00:18:34,799 --> 00:18:37,440
and you know in africa to locate

415
00:18:36,480 --> 00:18:43,840
buildings

416
00:18:37,440 --> 00:18:43,840
but to avoid uh

417
00:18:46,720 --> 00:18:50,559
right so will it work in africa or other

418
00:18:49,760 --> 00:18:54,799
countries with

419
00:18:50,559 --> 00:18:54,799
low building and address coverage

420
00:18:55,120 --> 00:18:59,918
it will work no worse than any other

421
00:18:58,720 --> 00:19:03,360
decoder

422
00:18:59,919 --> 00:19:06,640
obviously but in countries

423
00:19:03,360 --> 00:19:09,280
with no established street name house

424
00:19:06,640 --> 00:19:09,280
number address

425
00:19:09,360 --> 00:19:14,879
it may show some weird results but but

426
00:19:13,120 --> 00:19:18,000
again it depends on

427
00:19:14,880 --> 00:19:20,720
addressing model in openstreetmap like

428
00:19:18,000 --> 00:19:22,880
in japan it probably won't work because

429
00:19:20,720 --> 00:19:25,760
the address is there is very different

430
00:19:22,880 --> 00:19:26,880
it was reason specifically for american

431
00:19:25,760 --> 00:19:29,919
addresses

432
00:19:26,880 --> 00:19:32,240
but many countries including

433
00:19:29,919 --> 00:19:33,600
eastern european countries share the

434
00:19:32,240 --> 00:19:36,720
schema so

435
00:19:33,600 --> 00:19:37,678
it will work but i am will would be

436
00:19:36,720 --> 00:19:40,799
pretty happy to

437
00:19:37,679 --> 00:19:41,280
see some test cases and current cases

438
00:19:40,799 --> 00:19:43,918
from

439
00:19:41,280 --> 00:19:45,559
other countries okay we have time for

440
00:19:43,919 --> 00:19:49,039
one last

441
00:19:45,559 --> 00:19:49,039
question in the past

442
00:19:50,840 --> 00:19:55,760
photos sort out where they're from

443
00:19:53,120 --> 00:19:58,080
but edge cases didn't work well would

444
00:19:55,760 --> 00:20:00,879
this still be better at it

445
00:19:58,080 --> 00:20:00,879
i guess so

446
00:20:02,799 --> 00:20:06,480
as long as you don't need a point of

447
00:20:05,280 --> 00:20:08,320
interest information

448
00:20:06,480 --> 00:20:10,000
like eurocap is having an address

449
00:20:08,320 --> 00:20:11,200
instead of you know empire state

450
00:20:10,000 --> 00:20:14,400
building

451
00:20:11,200 --> 00:20:18,159
or some name yeah

452
00:20:14,400 --> 00:20:21,200
so as long as you need a country city

453
00:20:18,159 --> 00:20:23,600
street and house number this should be

454
00:20:21,200 --> 00:20:23,600
better

455
00:20:23,919 --> 00:20:28,960
and it's faster because it just scale

456
00:20:27,039 --> 00:20:32,000
queries for postgresql

457
00:20:28,960 --> 00:20:35,600
and it has lower footprint i think

458
00:20:32,000 --> 00:20:36,960
it's twice uh database is uh

459
00:20:35,600 --> 00:20:39,360
two times smaller than nominating

460
00:20:36,960 --> 00:20:42,960
database so

461
00:20:39,360 --> 00:20:44,320
it should work okay that's the final

462
00:20:42,960 --> 00:20:46,480
question

463
00:20:44,320 --> 00:20:48,240
what does the name stand for and how do

464
00:20:46,480 --> 00:20:51,679
you pronounce

465
00:20:48,240 --> 00:20:54,159
it's jrg i don't know i i

466
00:20:51,679 --> 00:20:55,280
i wonder i will only pronounce it in

467
00:20:54,159 --> 00:20:58,080
russian

468
00:20:55,280 --> 00:20:59,360
but it's a crime of uh junior versus

469
00:20:58,080 --> 00:21:01,520
jacob

470
00:20:59,360 --> 00:21:02,639
we were fighting like three days on a

471
00:21:01,520 --> 00:21:05,440
name and

472
00:21:02,640 --> 00:21:15,520
decided to go with the simplest one okay

473
00:21:05,440 --> 00:21:15,520
that was it thank you very much

