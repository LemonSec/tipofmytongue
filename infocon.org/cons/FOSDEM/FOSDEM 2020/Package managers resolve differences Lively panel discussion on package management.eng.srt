1
00:00:15,040 --> 00:00:19,279
panel discussion

2
00:00:16,480 --> 00:00:20,720
um the moderator for the panel is

3
00:00:19,279 --> 00:00:23,600
william bartholomew

4
00:00:20,720 --> 00:00:25,279
he's working at github and now we have

5
00:00:23,600 --> 00:00:28,840
jeff mccaffer

6
00:00:25,279 --> 00:00:30,960
github again we have mirkobon

7
00:00:28,840 --> 00:00:32,320
from indocal and we have to meet the

8
00:00:30,960 --> 00:00:33,680
spineless from the athens university

9
00:00:32,320 --> 00:00:36,160
homes and business

10
00:00:33,680 --> 00:00:38,800
and william i will give you microphone

11
00:00:36,160 --> 00:00:42,398
you have the microphone

12
00:00:38,800 --> 00:00:44,319
okay thank you um so the purpose of this

13
00:00:42,399 --> 00:00:46,640
panel is really to just discuss

14
00:00:44,320 --> 00:00:48,160
some of the major issues affecting

15
00:00:46,640 --> 00:00:51,600
package managers

16
00:00:48,160 --> 00:00:53,360
um we'll have time to take

17
00:00:51,600 --> 00:00:55,680
questions from the audience as well and

18
00:00:53,360 --> 00:00:56,719
so everyone will get an opportunity well

19
00:00:55,680 --> 00:00:58,239
not everyone but

20
00:00:56,719 --> 00:00:59,840
a group of people will get an

21
00:00:58,239 --> 00:01:01,519
opportunity to ask our panelists some

22
00:00:59,840 --> 00:01:03,199
questions

23
00:01:01,520 --> 00:01:05,760
as we go along but i thought i would

24
00:01:03,199 --> 00:01:10,320
start off with everyone's favorite topic

25
00:01:05,760 --> 00:01:10,320
which is naming and versioning

26
00:01:10,479 --> 00:01:14,320
so major and minor versioning has been

27
00:01:13,280 --> 00:01:16,720
used

28
00:01:14,320 --> 00:01:18,000
for decades as a way of communicating

29
00:01:16,720 --> 00:01:20,960
breaking changes

30
00:01:18,000 --> 00:01:22,080
to consumers and this has been kind of

31
00:01:20,960 --> 00:01:24,640
codified

32
00:01:22,080 --> 00:01:27,360
through simva which has become de facto

33
00:01:24,640 --> 00:01:29,840
in a number of package managers

34
00:01:27,360 --> 00:01:30,400
there's an up there's an increasing

35
00:01:29,840 --> 00:01:33,280
belief

36
00:01:30,400 --> 00:01:34,320
that semver isn't meeting the needs of

37
00:01:33,280 --> 00:01:36,799
the community

38
00:01:34,320 --> 00:01:39,199
and that it's lowering people into a

39
00:01:36,799 --> 00:01:41,119
false sense of security

40
00:01:39,200 --> 00:01:43,280
and we'd be better off just doing

41
00:01:41,119 --> 00:01:46,640
chronological versioning

42
00:01:43,280 --> 00:01:49,759
and so who would like to

43
00:01:46,640 --> 00:01:49,759
have a comment on this

44
00:01:51,520 --> 00:01:54,720
so yeah um we did december for a long

45
00:01:53,680 --> 00:01:56,240
time i used to be in the eclipse

46
00:01:54,720 --> 00:01:56,560
community for quite a while and we had

47
00:01:56,240 --> 00:01:59,679
quite

48
00:01:56,560 --> 00:02:02,960
rigorous uh semantic versioning uh

49
00:01:59,680 --> 00:02:03,759
practices i'll say and you know we often

50
00:02:02,960 --> 00:02:05,919
failed

51
00:02:03,759 --> 00:02:07,920
it it's hard because one person's notion

52
00:02:05,920 --> 00:02:09,759
of an api we yet to be very very clear

53
00:02:07,920 --> 00:02:12,000
about what an api is

54
00:02:09,758 --> 00:02:13,200
but i'm in favor of of keeping and

55
00:02:12,000 --> 00:02:15,440
pushing down the path

56
00:02:13,200 --> 00:02:17,519
even in the in the face of some failures

57
00:02:15,440 --> 00:02:19,680
because it is an indication that api is

58
00:02:17,520 --> 00:02:22,400
a contract between you the producer

59
00:02:19,680 --> 00:02:22,720
and you know the others as the consumers

60
00:02:22,400 --> 00:02:24,800
and

61
00:02:22,720 --> 00:02:26,640
some level of communication as to my

62
00:02:24,800 --> 00:02:28,720
intent i'm intending

63
00:02:26,640 --> 00:02:30,559
that this not break the api i'm

64
00:02:28,720 --> 00:02:31,840
intending this be an incremental change

65
00:02:30,560 --> 00:02:34,080
etc

66
00:02:31,840 --> 00:02:35,040
communicates to you as the consumer i

67
00:02:34,080 --> 00:02:36,879
might be wrong

68
00:02:35,040 --> 00:02:38,720
in which case that's like a bug and you

69
00:02:36,879 --> 00:02:39,920
can report that bug and you know submit

70
00:02:38,720 --> 00:02:40,480
a pull request and all that sort of

71
00:02:39,920 --> 00:02:42,720
stuff

72
00:02:40,480 --> 00:02:44,640
uh but without that we're just kind of

73
00:02:42,720 --> 00:02:47,519
hey this is thursday's build

74
00:02:44,640 --> 00:02:47,839
take it maybe it's good who knows right

75
00:02:47,519 --> 00:02:51,040
so

76
00:02:47,840 --> 00:02:52,720
that's my thought so i can say i'm

77
00:02:51,040 --> 00:02:55,599
typically a technology

78
00:02:52,720 --> 00:02:56,319
technology optimist pathological

79
00:02:55,599 --> 00:02:58,399
optimist

80
00:02:56,319 --> 00:03:00,480
but when it comes to versioning systems

81
00:02:58,400 --> 00:03:02,560
um it appears to me that we're always

82
00:03:00,480 --> 00:03:04,799
trying to add semantic information to

83
00:03:02,560 --> 00:03:07,519
something that's completely arbitrary

84
00:03:04,800 --> 00:03:08,959
and therefore i'm actually in favor of

85
00:03:07,519 --> 00:03:10,800
something like chronological

86
00:03:08,959 --> 00:03:12,080
releases because you busy communicate

87
00:03:10,800 --> 00:03:15,200
what version you're looking at

88
00:03:12,080 --> 00:03:16,400
without adding the artificial semantic

89
00:03:15,200 --> 00:03:19,040
information and

90
00:03:16,400 --> 00:03:19,599
but in the end what works works so let's

91
00:03:19,040 --> 00:03:23,040
stay

92
00:03:19,599 --> 00:03:25,200
pragmatic i'm in favor it's a course

93
00:03:23,040 --> 00:03:26,079
mechanism we would perhaps want to have

94
00:03:25,200 --> 00:03:28,238
interfaith

95
00:03:26,080 --> 00:03:29,200
versioning at the level of specific api

96
00:03:28,239 --> 00:03:31,760
endpoints

97
00:03:29,200 --> 00:03:33,518
but it's something that is the other

98
00:03:31,760 --> 00:03:35,280
thing would be too complicated

99
00:03:33,519 --> 00:03:36,799
and it could be better complemented by

100
00:03:35,280 --> 00:03:38,799
having things like

101
00:03:36,799 --> 00:03:40,480
longer long long term support versions

102
00:03:38,799 --> 00:03:41,920
so that people know that they can

103
00:03:40,480 --> 00:03:43,760
pick up a specific version and have it

104
00:03:41,920 --> 00:03:46,399
supported for for a longer time

105
00:03:43,760 --> 00:03:48,959
and better communication of end-of-life

106
00:03:46,400 --> 00:03:48,959
policies

107
00:03:49,120 --> 00:03:53,360
i had a comment on that one thing that

108
00:03:51,360 --> 00:03:54,799
we did to help support that as producers

109
00:03:53,360 --> 00:03:55,920
having tools that tell you when your

110
00:03:54,799 --> 00:03:57,760
apis change

111
00:03:55,920 --> 00:03:59,679
like we have much better technology

112
00:03:57,760 --> 00:04:01,359
these days for analyzing your code

113
00:03:59,680 --> 00:04:03,920
and telling you when a change you're

114
00:04:01,360 --> 00:04:05,680
making now might affect your api so we

115
00:04:03,920 --> 00:04:07,280
implemented tools a long time ago

116
00:04:05,680 --> 00:04:09,040
that would say like literally as you

117
00:04:07,280 --> 00:04:09,680
typed and you entered a new you had an

118
00:04:09,040 --> 00:04:12,000
interface

119
00:04:09,680 --> 00:04:13,200
and you and you added a new an interface

120
00:04:12,000 --> 00:04:14,000
that was supposed to be implemented by

121
00:04:13,200 --> 00:04:16,238
consumers

122
00:04:14,000 --> 00:04:17,358
and you added a new function right that

123
00:04:16,238 --> 00:04:18,798
would tell you hey

124
00:04:17,358 --> 00:04:20,638
you're you're changing the api you're

125
00:04:18,798 --> 00:04:21,440
going to have to bump your your version

126
00:04:20,639 --> 00:04:23,600
number

127
00:04:21,440 --> 00:04:25,040
appropriately and that's stuff that we

128
00:04:23,600 --> 00:04:25,759
can do it seems to have fallen by the

129
00:04:25,040 --> 00:04:27,520
wayside

130
00:04:25,759 --> 00:04:30,479
at least i've not seen a lot of it but

131
00:04:27,520 --> 00:04:30,479
it's certainly there to help

132
00:04:30,720 --> 00:04:34,400
yeah i think the closest i've seen to

133
00:04:32,400 --> 00:04:34,960
that is there's a number of tools that

134
00:04:34,400 --> 00:04:38,159
will take

135
00:04:34,960 --> 00:04:40,000
commit messages that have additional

136
00:04:38,160 --> 00:04:41,759
metadata in them such as you know this

137
00:04:40,000 --> 00:04:43,040
is a breaking change where it's taking

138
00:04:41,759 --> 00:04:46,240
the developer's intent

139
00:04:43,040 --> 00:04:48,800
not quite as automated but again better

140
00:04:46,240 --> 00:04:48,800
than nothing

141
00:04:49,759 --> 00:04:53,840
so kind of moving to the naming side a

142
00:04:52,639 --> 00:04:56,240
little bit

143
00:04:53,840 --> 00:04:57,359
there's kind of two big problems in

144
00:04:56,240 --> 00:04:59,759
package naming

145
00:04:57,360 --> 00:05:00,800
well at least two the third is coming up

146
00:04:59,759 --> 00:05:04,000
with a name

147
00:05:00,800 --> 00:05:06,240
um but one of those is

148
00:05:04,000 --> 00:05:08,400
there's an increasing amount of typo

149
00:05:06,240 --> 00:05:10,880
squatting where

150
00:05:08,400 --> 00:05:11,679
people with malicious intents are

151
00:05:10,880 --> 00:05:14,639
creating

152
00:05:11,680 --> 00:05:16,000
purely malicious packages that have

153
00:05:14,639 --> 00:05:20,000
names close to

154
00:05:16,000 --> 00:05:23,280
the original and then a similar

155
00:05:20,000 --> 00:05:26,000
threat is because people will often

156
00:05:23,280 --> 00:05:28,799
consume packages from multiple feeds

157
00:05:26,000 --> 00:05:31,039
we have no guarantee that you know

158
00:05:28,800 --> 00:05:33,600
package food version one on

159
00:05:31,039 --> 00:05:35,840
your internal feed is the same as

160
00:05:33,600 --> 00:05:36,720
package food version one on a public

161
00:05:35,840 --> 00:05:38,799
feed

162
00:05:36,720 --> 00:05:40,160
and so there can be opportunities for

163
00:05:38,800 --> 00:05:44,400
people to hijack

164
00:05:40,160 --> 00:05:44,400
the package that you're intending to use

165
00:05:44,800 --> 00:05:49,120
what are your thoughts about how

166
00:05:45,840 --> 00:05:52,080
consumers and package managers

167
00:05:49,120 --> 00:05:53,290
can help protect against these cases and

168
00:05:52,080 --> 00:05:55,758
help

169
00:05:53,290 --> 00:05:58,800
[Music]

170
00:05:55,759 --> 00:05:58,800
protect the community

171
00:06:04,160 --> 00:06:07,280
i see a careful thing because this

172
00:06:05,680 --> 00:06:08,479
actually goes to back to something that

173
00:06:07,280 --> 00:06:12,000
i ran into myself

174
00:06:08,479 --> 00:06:14,400
and was accidentally um like

175
00:06:12,000 --> 00:06:15,759
accidentally swapping letters and names

176
00:06:14,400 --> 00:06:17,120
and referring to a different package and

177
00:06:15,759 --> 00:06:18,880
everything broke and it was so hard to

178
00:06:17,120 --> 00:06:21,520
find because you look at everything

179
00:06:18,880 --> 00:06:22,639
and it looks totally sensible and yeah

180
00:06:21,520 --> 00:06:24,719
and here we found it

181
00:06:22,639 --> 00:06:25,680
um i think this goes back to this idea

182
00:06:24,720 --> 00:06:28,560
of you're adding

183
00:06:25,680 --> 00:06:30,400
artificial information on top of what

184
00:06:28,560 --> 00:06:32,880
you're

185
00:06:30,400 --> 00:06:33,440
versioning in the code then you say in a

186
00:06:32,880 --> 00:06:35,520
sense

187
00:06:33,440 --> 00:06:36,880
every versioning of code that gives it

188
00:06:35,520 --> 00:06:40,000
an arbitrary name

189
00:06:36,880 --> 00:06:41,199
um adds a layer on top of the actual

190
00:06:40,000 --> 00:06:45,199
repository

191
00:06:41,199 --> 00:06:46,080
um and com depending on the languages

192
00:06:45,199 --> 00:06:48,639
you use

193
00:06:46,080 --> 00:06:51,120
um my favorite solution is actually to

194
00:06:48,639 --> 00:06:52,400
to refer to to sub-modules in this case

195
00:06:51,120 --> 00:06:54,080
and to actually have a

196
00:06:52,400 --> 00:06:55,919
sha-1 to point to the code that i'm

197
00:06:54,080 --> 00:06:58,560
using then you don't have that problem

198
00:06:55,919 --> 00:07:00,840
but that means by passing package

199
00:06:58,560 --> 00:07:03,840
measurements it's a

200
00:07:00,840 --> 00:07:03,840
conundrum

201
00:07:05,199 --> 00:07:09,120
one thing that can help here is basic

202
00:07:07,680 --> 00:07:11,120
hygiene principles so

203
00:07:09,120 --> 00:07:12,240
let's be conservative in what we consume

204
00:07:11,120 --> 00:07:15,599
and what feeds

205
00:07:12,240 --> 00:07:16,720
we accept if i go and invite 10 000

206
00:07:15,599 --> 00:07:19,440
people to my home

207
00:07:16,720 --> 00:07:20,160
something bad will happen uh if i'm more

208
00:07:19,440 --> 00:07:21,440
conservative

209
00:07:20,160 --> 00:07:23,759
in the modules that i use and the

210
00:07:21,440 --> 00:07:25,840
transitive dependencies that is

211
00:07:23,759 --> 00:07:27,280
going to be better regarding that

212
00:07:25,840 --> 00:07:30,719
accidental changes

213
00:07:27,280 --> 00:07:31,840
some basic uh signature of the packages

214
00:07:30,720 --> 00:07:34,160
which will

215
00:07:31,840 --> 00:07:36,000
be not will not work when the same

216
00:07:34,160 --> 00:07:37,520
package appears with different

217
00:07:36,000 --> 00:07:40,960
the same name appears in a different

218
00:07:37,520 --> 00:07:40,960
feed should be enough

219
00:07:42,560 --> 00:07:46,000
so one uh one interesting thing is that

220
00:07:44,800 --> 00:07:49,039
i think a lot of these things

221
00:07:46,000 --> 00:07:51,039
uh are endemic to ecosystems and so

222
00:07:49,039 --> 00:07:52,639
package management people like folks who

223
00:07:51,039 --> 00:07:53,360
actually create the package management

224
00:07:52,639 --> 00:07:55,599
systems

225
00:07:53,360 --> 00:07:57,520
bear a lot of responsibility for the

226
00:07:55,599 --> 00:07:59,280
things that happen in their communities

227
00:07:57,520 --> 00:08:00,560
and so i think a lot of the tooling the

228
00:07:59,280 --> 00:08:02,719
package managers

229
00:08:00,560 --> 00:08:04,240
should be written and with with these

230
00:08:02,720 --> 00:08:05,919
sorts of problems in mind

231
00:08:04,240 --> 00:08:07,599
and i'll just one example i won't i

232
00:08:05,919 --> 00:08:09,680
won't name which community this is but

233
00:08:07,599 --> 00:08:12,719
there exists there out there today

234
00:08:09,680 --> 00:08:15,639
a package management system where

235
00:08:12,720 --> 00:08:17,680
if you have multiple feeds enumerated it

236
00:08:15,639 --> 00:08:18,879
non-deterministically picks which feed

237
00:08:17,680 --> 00:08:20,319
it's going to pull the packet it

238
00:08:18,879 --> 00:08:22,400
basically sprays

239
00:08:20,319 --> 00:08:24,800
requests for the package versions and

240
00:08:22,400 --> 00:08:26,719
takes the first rancher back

241
00:08:24,800 --> 00:08:28,319
right now i mean we laugh there are

242
00:08:26,720 --> 00:08:30,879
reasons

243
00:08:28,319 --> 00:08:33,039
there are reasons for that but but it

244
00:08:30,879 --> 00:08:35,519
does lead to actual problems where

245
00:08:33,039 --> 00:08:36,799
like my feed has the package and i'm

246
00:08:35,519 --> 00:08:38,799
happily using it

247
00:08:36,799 --> 00:08:40,478
and then somebody magically creates a

248
00:08:38,799 --> 00:08:41,598
package with the same name it's not typo

249
00:08:40,479 --> 00:08:43,440
squatting they actually create a

250
00:08:41,599 --> 00:08:45,360
different package with the same name

251
00:08:43,440 --> 00:08:46,959
in a different repo and suddenly due to

252
00:08:45,360 --> 00:08:48,000
non-determinism you know a hiccup in the

253
00:08:46,959 --> 00:08:49,439
network or whatever

254
00:08:48,000 --> 00:08:51,200
i'm suddenly getting this other thing

255
00:08:49,440 --> 00:08:51,600
from from outside but only every fifth

256
00:08:51,200 --> 00:08:54,399
time

257
00:08:51,600 --> 00:08:57,440
but only every fifth time yeah exactly

258
00:08:54,399 --> 00:09:00,240
so i think that the package management

259
00:08:57,440 --> 00:09:00,959
uh infrastructure folks also need to be

260
00:09:00,240 --> 00:09:03,920
designing

261
00:09:00,959 --> 00:09:05,359
for these these sorts of situations i

262
00:09:03,920 --> 00:09:07,519
love the idea of like some level of

263
00:09:05,360 --> 00:09:08,720
signatures whether it's like just a hash

264
00:09:07,519 --> 00:09:10,800
that's keeping track of

265
00:09:08,720 --> 00:09:13,040
this version is this thing or actual

266
00:09:10,800 --> 00:09:15,199
signatures with like trust chains and

267
00:09:13,040 --> 00:09:17,519
and so forth i think can uh can do a lot

268
00:09:15,200 --> 00:09:17,519
to help

269
00:09:17,760 --> 00:09:22,959
yeah so building on that idea of trust

270
00:09:19,920 --> 00:09:26,640
chains one um

271
00:09:22,959 --> 00:09:28,880
solution or way of addressing this

272
00:09:26,640 --> 00:09:32,000
problem is kind of using

273
00:09:28,880 --> 00:09:33,839
things like package popularity and the

274
00:09:32,000 --> 00:09:35,279
the health of the package and that kind

275
00:09:33,839 --> 00:09:37,360
of metadata

276
00:09:35,279 --> 00:09:38,480
to give you a hint if you're going the

277
00:09:37,360 --> 00:09:41,680
wrong direction

278
00:09:38,480 --> 00:09:43,519
what do you think about that as a as a

279
00:09:41,680 --> 00:09:45,839
way of helping

280
00:09:43,519 --> 00:09:51,760
consumers decide or realize that they

281
00:09:45,839 --> 00:09:53,279
may have made a mistake

282
00:09:51,760 --> 00:09:55,040
i think it's a good idea the more data

283
00:09:53,279 --> 00:09:57,120
you have as a consumer

284
00:09:55,040 --> 00:09:59,439
and we can make more informed decisions

285
00:09:57,120 --> 00:10:01,680
uh being told when there's an anomaly

286
00:09:59,440 --> 00:10:03,360
like uh suddenly you're taking a

287
00:10:01,680 --> 00:10:04,719
dependency on a package that's not as

288
00:10:03,360 --> 00:10:06,000
popular as you thought as it was

289
00:10:04,720 --> 00:10:08,399
previously like you know

290
00:10:06,000 --> 00:10:10,160
you ran a resolution and all the all the

291
00:10:08,399 --> 00:10:11,440
popularity scores were above 50 i'm

292
00:10:10,160 --> 00:10:13,439
making arbitrary numbers

293
00:10:11,440 --> 00:10:15,120
and suddenly you ran it at resolution

294
00:10:13,440 --> 00:10:16,720
again and there's something that crops

295
00:10:15,120 --> 00:10:18,480
up that was like 20

296
00:10:16,720 --> 00:10:20,240
much lower on the scale that can be a

297
00:10:18,480 --> 00:10:21,200
thing and also as you're actually

298
00:10:20,240 --> 00:10:24,320
picking things

299
00:10:21,200 --> 00:10:26,399
picking packages that are um uh

300
00:10:24,320 --> 00:10:28,240
you know known to be more useful there's

301
00:10:26,399 --> 00:10:30,000
a danger in that in that it's like the

302
00:10:28,240 --> 00:10:31,760
herd mentality right where

303
00:10:30,000 --> 00:10:33,200
people only use things that are popular

304
00:10:31,760 --> 00:10:35,920
so anything that's new

305
00:10:33,200 --> 00:10:38,560
doesn't get any any daylight so that's a

306
00:10:35,920 --> 00:10:38,560
challenge but

307
00:10:40,720 --> 00:10:45,360
let me get a bit skeptical that needs to

308
00:10:43,279 --> 00:10:47,200
be done very carefully it's a good idea

309
00:10:45,360 --> 00:10:48,800
if you get too many messages people will

310
00:10:47,200 --> 00:10:50,880
just ignore them

311
00:10:48,800 --> 00:10:51,839
if you raise the buyer too high then

312
00:10:50,880 --> 00:10:53,439
maybe you

313
00:10:51,839 --> 00:10:55,279
will not get warned when something bad

314
00:10:53,440 --> 00:10:56,880
happens just needs to be done very

315
00:10:55,279 --> 00:10:58,880
carefully

316
00:10:56,880 --> 00:11:00,160
i think we also need to look at these

317
00:10:58,880 --> 00:11:02,079
scenarios

318
00:11:00,160 --> 00:11:04,079
where you would apply such a process

319
00:11:02,079 --> 00:11:05,920
right so when you choose a dependency

320
00:11:04,079 --> 00:11:06,959
for a certain

321
00:11:05,920 --> 00:11:09,199
piece of functionality that you would

322
00:11:06,959 --> 00:11:11,279
like to import into your project what i

323
00:11:09,200 --> 00:11:13,200
usually do is i do look at for example

324
00:11:11,279 --> 00:11:15,120
community health like number of

325
00:11:13,200 --> 00:11:18,240
contributors

326
00:11:15,120 --> 00:11:20,320
number of commits in the repository um

327
00:11:18,240 --> 00:11:22,959
ranking things like that but this is

328
00:11:20,320 --> 00:11:24,720
kind of a one-time choice you make

329
00:11:22,959 --> 00:11:26,239
at a later point in time when it's this

330
00:11:24,720 --> 00:11:29,360
is about managing

331
00:11:26,240 --> 00:11:31,680
dependencies in an ongoing process um

332
00:11:29,360 --> 00:11:33,519
looking at popularity it's not the kind

333
00:11:31,680 --> 00:11:33,839
of diligence i would expect there right

334
00:11:33,519 --> 00:11:36,720
because

335
00:11:33,839 --> 00:11:38,959
at this point nothing beats stilgins

336
00:11:36,720 --> 00:11:42,480
which means people with eyes on

337
00:11:38,959 --> 00:11:43,599
your configuration um and sorting this

338
00:11:42,480 --> 00:11:45,120
out but maybe we're mixing these

339
00:11:43,600 --> 00:11:45,680
perspectives of like choosing what you

340
00:11:45,120 --> 00:11:47,839
use

341
00:11:45,680 --> 00:11:50,959
and then later integrating it into like

342
00:11:47,839 --> 00:11:52,800
build processes etc

343
00:11:50,959 --> 00:11:54,319
just a quick thing to add you reminded

344
00:11:52,800 --> 00:11:56,479
me of something one of the most popular

345
00:11:54,320 --> 00:11:57,680
markdown processors on node

346
00:11:56,480 --> 00:12:00,079
uh for you like if you weren't looking

347
00:11:57,680 --> 00:12:01,680
at popularity uh you know it was stale

348
00:12:00,079 --> 00:12:03,040
it hadn't had any commits for like a

349
00:12:01,680 --> 00:12:04,399
year or something like that

350
00:12:03,040 --> 00:12:06,160
and so people would go and if you just

351
00:12:04,399 --> 00:12:06,800
followed popularity you'd go and use

352
00:12:06,160 --> 00:12:09,839
mark d

353
00:12:06,800 --> 00:12:11,279
i think it was and and they'd go and use

354
00:12:09,839 --> 00:12:13,040
that thing but it was like known to be

355
00:12:11,279 --> 00:12:14,800
stale known to have problems

356
00:12:13,040 --> 00:12:16,719
and finally somebody went and put a

357
00:12:14,800 --> 00:12:19,439
thing on the github page you know saying

358
00:12:16,720 --> 00:12:20,079
don't use this it's old and stale right

359
00:12:19,440 --> 00:12:21,680
and so

360
00:12:20,079 --> 00:12:24,239
you know just following the numbers

361
00:12:21,680 --> 00:12:25,760
doesn't answer the problem always

362
00:12:24,240 --> 00:12:27,839
yeah and specifically in that case

363
00:12:25,760 --> 00:12:29,360
someone had created a fork which you

364
00:12:27,839 --> 00:12:32,000
know obviously would have started off

365
00:12:29,360 --> 00:12:33,440
with low popularity which means

366
00:12:32,000 --> 00:12:35,040
you know people may not have been

367
00:12:33,440 --> 00:12:36,079
selecting it and that's why they were

368
00:12:35,040 --> 00:12:39,760
selecting the other

369
00:12:36,079 --> 00:12:42,959
to begin with um so kind of

370
00:12:39,760 --> 00:12:46,480
moving on to kind of how people express

371
00:12:42,959 --> 00:12:48,959
their dependencies um that

372
00:12:46,480 --> 00:12:51,920
they want to consume a number of package

373
00:12:48,959 --> 00:12:54,000
managers have a concept of lock files

374
00:12:51,920 --> 00:12:55,839
and they're intended as a way to allow

375
00:12:54,000 --> 00:12:59,120
you to pin which versions

376
00:12:55,839 --> 00:13:00,959
you're consuming often

377
00:12:59,120 --> 00:13:02,639
for both direct and indirect

378
00:13:00,959 --> 00:13:05,359
dependencies

379
00:13:02,639 --> 00:13:06,160
can these be fully trusted and are they

380
00:13:05,360 --> 00:13:08,399
a substitute

381
00:13:06,160 --> 00:13:11,760
for a software bill of materials or

382
00:13:08,399 --> 00:13:11,760
other form of inventory

383
00:13:16,959 --> 00:13:20,638
i guess they can be trusted if the tools

384
00:13:18,800 --> 00:13:22,079
are doing what they say they're doing

385
00:13:20,639 --> 00:13:23,760
there's interesting there's two kinds of

386
00:13:22,079 --> 00:13:25,439
lock files in in my view there's the

387
00:13:23,760 --> 00:13:27,839
input lock file that's essentially

388
00:13:25,440 --> 00:13:29,600
giving advice to the resolver and saying

389
00:13:27,839 --> 00:13:32,399
like hey if you need foo

390
00:13:29,600 --> 00:13:34,399
pick version 1.3.9 then there's the

391
00:13:32,399 --> 00:13:36,160
output lock files that are that this is

392
00:13:34,399 --> 00:13:38,480
what i did i'm the resolver and i

393
00:13:36,160 --> 00:13:41,040
actually picked foo version 1.3.9

394
00:13:38,480 --> 00:13:42,880
and it's actually in the configuration i

395
00:13:41,040 --> 00:13:45,040
think we sometimes mix those two and

396
00:13:42,880 --> 00:13:47,839
treat them as the same thing

397
00:13:45,040 --> 00:13:49,040
i'm much much more interested as a

398
00:13:47,839 --> 00:13:52,399
developer

399
00:13:49,040 --> 00:13:52,959
in the input one and as a compliance

400
00:13:52,399 --> 00:13:54,800
sort of

401
00:13:52,959 --> 00:13:56,000
person who's trying to manage large

402
00:13:54,800 --> 00:13:57,680
software systems

403
00:13:56,000 --> 00:13:58,720
i'm much more interested in the output

404
00:13:57,680 --> 00:14:00,239
one because i want to know what the

405
00:13:58,720 --> 00:14:02,240
resolver did

406
00:14:00,240 --> 00:14:03,600
not just what it you know what people

407
00:14:02,240 --> 00:14:06,959
thought it should do

408
00:14:03,600 --> 00:14:08,480
and the latter um is not well actually

409
00:14:06,959 --> 00:14:09,279
neither are universally available and

410
00:14:08,480 --> 00:14:12,800
i'd love to see them

411
00:14:09,279 --> 00:14:12,800
be available in all systems

412
00:14:13,360 --> 00:14:17,040
we asked can these systems be trusted of

413
00:14:15,360 --> 00:14:18,959
course not

414
00:14:17,040 --> 00:14:20,399
i mean no system can be trusted they

415
00:14:18,959 --> 00:14:22,638
serve a purpose

416
00:14:20,399 --> 00:14:23,839
and for the the outgoing definition they

417
00:14:22,639 --> 00:14:25,519
serve the purpose that

418
00:14:23,839 --> 00:14:27,360
whenever you build your software you

419
00:14:25,519 --> 00:14:28,399
deploy your application you're using a

420
00:14:27,360 --> 00:14:30,560
version that you know

421
00:14:28,399 --> 00:14:32,079
but actually puts another owners on you

422
00:14:30,560 --> 00:14:34,560
um because that means

423
00:14:32,079 --> 00:14:35,519
you're pinning the version and you will

424
00:14:34,560 --> 00:14:37,920
find that in many

425
00:14:35,519 --> 00:14:38,720
real-life projects the idea of saying

426
00:14:37,920 --> 00:14:41,599
version

427
00:14:38,720 --> 00:14:42,800
that or or newer is actually not popular

428
00:14:41,600 --> 00:14:43,600
with the people deploying the

429
00:14:42,800 --> 00:14:45,120
applications

430
00:14:43,600 --> 00:14:47,199
because they're pulling in bugs with

431
00:14:45,120 --> 00:14:49,519
every new build but that puts the owners

432
00:14:47,199 --> 00:14:52,240
back on the team managing the deployment

433
00:14:49,519 --> 00:14:54,560
um to make sure that they then stay up

434
00:14:52,240 --> 00:14:56,560
to date with updates so it's a

435
00:14:54,560 --> 00:14:58,959
you're kind of blocking the process of

436
00:14:56,560 --> 00:15:00,959
automatic updates for purpose

437
00:14:58,959 --> 00:15:02,959
and that puts work and responsibility on

438
00:15:00,959 --> 00:15:04,880
you to stay on it

439
00:15:02,959 --> 00:15:06,560
so i don't think the answer can be the

440
00:15:04,880 --> 00:15:09,600
question can be answered in this way

441
00:15:06,560 --> 00:15:10,719
and it in no way it replaces things like

442
00:15:09,600 --> 00:15:11,440
bills of material which have a

443
00:15:10,720 --> 00:15:14,560
questionable

444
00:15:11,440 --> 00:15:16,079
uh usefulness anyway um

445
00:15:14,560 --> 00:15:18,399
uh it just serves a different purpose

446
00:15:16,079 --> 00:15:21,439
it's apples and pears

447
00:15:18,399 --> 00:15:22,880
oh that's the german version apples

448
00:15:21,440 --> 00:15:24,720
pinning is risk especially when there

449
00:15:22,880 --> 00:15:27,199
are security updates so that's

450
00:15:24,720 --> 00:15:28,000
one problem and that's why i'm skeptical

451
00:15:27,199 --> 00:15:30,479
about them

452
00:15:28,000 --> 00:15:31,519
they have a very nice advantage in that

453
00:15:30,480 --> 00:15:34,639
the producer

454
00:15:31,519 --> 00:15:36,560
of this component can scan and see which

455
00:15:34,639 --> 00:15:38,079
versions are used and what breaking

456
00:15:36,560 --> 00:15:39,119
changes might be introduced and how many

457
00:15:38,079 --> 00:15:40,399
will be affected

458
00:15:39,120 --> 00:15:42,560
and this is something that might be

459
00:15:40,399 --> 00:15:45,759
useful

460
00:15:42,560 --> 00:15:47,199
here's a question i mean

461
00:15:45,759 --> 00:15:49,440
there's a whole bunch of opposing goals

462
00:15:47,199 --> 00:15:52,000
in resolving this right like

463
00:15:49,440 --> 00:15:55,120
you've heard security and features right

464
00:15:52,000 --> 00:15:55,120
and there's also performance

465
00:15:55,360 --> 00:16:00,480
there's more that you could do um in the

466
00:15:58,560 --> 00:16:02,319
resolution mechanism right like

467
00:16:00,480 --> 00:16:03,680
so so right now you've got i don't know

468
00:16:02,320 --> 00:16:04,399
i usually call it a manifest for the

469
00:16:03,680 --> 00:16:05,839
input

470
00:16:04,399 --> 00:16:07,920
and then a lock file for the output you

471
00:16:05,839 --> 00:16:10,079
could take a manifestation profile

472
00:16:07,920 --> 00:16:10,959
and you could try to produce a new lock

473
00:16:10,079 --> 00:16:13,599
file that's

474
00:16:10,959 --> 00:16:14,319
as close to you know the original that

475
00:16:13,600 --> 00:16:16,800
you can get

476
00:16:14,320 --> 00:16:18,240
for a new environment right like the

477
00:16:16,800 --> 00:16:19,519
solvers can do that

478
00:16:18,240 --> 00:16:21,920
it's not something that i think anyone's

479
00:16:19,519 --> 00:16:22,800
written but you know you could actually

480
00:16:21,920 --> 00:16:24,479
say

481
00:16:22,800 --> 00:16:27,279
these projects need critical security

482
00:16:24,480 --> 00:16:28,720
updates but don't update anything else

483
00:16:27,279 --> 00:16:30,320
because i know that that configuration

484
00:16:28,720 --> 00:16:31,519
works

485
00:16:30,320 --> 00:16:34,000
i think there's a lot more information

486
00:16:31,519 --> 00:16:36,000
you can put into that process to

487
00:16:34,000 --> 00:16:37,199
tell the solver why to prefer one

488
00:16:36,000 --> 00:16:38,560
version or another

489
00:16:37,199 --> 00:16:40,800
that doesn't get put into any of the

490
00:16:38,560 --> 00:16:42,000
tools today they're all pretty simple

491
00:16:40,800 --> 00:16:43,680
so that was kind of my point about the

492
00:16:42,000 --> 00:16:44,240
differentiation between the input lock

493
00:16:43,680 --> 00:16:45,359
file

494
00:16:44,240 --> 00:16:46,800
like i actually think there are three

495
00:16:45,360 --> 00:16:48,240
things there's the manifest what did the

496
00:16:46,800 --> 00:16:49,758
developer think that they wanted the

497
00:16:48,240 --> 00:16:51,040
developer of this component wanted

498
00:16:49,759 --> 00:16:52,959
then there's the consumer of the

499
00:16:51,040 --> 00:16:54,319
component that's taking this component

500
00:16:52,959 --> 00:16:55,518
and putting in their system

501
00:16:54,320 --> 00:16:57,759
and they're saying that's all cool you

502
00:16:55,519 --> 00:17:00,560
want foo version 1.3 or greater

503
00:16:57,759 --> 00:17:01,440
but i want 1.3.9 that's what you're

504
00:17:00,560 --> 00:17:03,279
going to use

505
00:17:01,440 --> 00:17:04,959
and then or or maybe you give it a more

506
00:17:03,279 --> 00:17:06,720
constrained range and then there's what

507
00:17:04,959 --> 00:17:08,160
the resolver actually did

508
00:17:06,720 --> 00:17:09,600
and that's an output up maybe wouldn't

509
00:17:08,160 --> 00:17:13,120
call that a lock file maybe it's more of

510
00:17:09,599 --> 00:17:13,119
a dump file or something like that

511
00:17:17,039 --> 00:17:20,480
that anyways recently wrote an article

512
00:17:20,079 --> 00:17:23,359
about

513
00:17:20,480 --> 00:17:25,120
lock files and how you can actually

514
00:17:23,359 --> 00:17:27,280
insert

515
00:17:25,119 --> 00:17:28,399
packages that the resolver didn't

516
00:17:27,280 --> 00:17:31,120
resolve to

517
00:17:28,400 --> 00:17:32,960
and then a lot of package managers or

518
00:17:31,120 --> 00:17:33,280
clients tend to just take whatever is in

519
00:17:32,960 --> 00:17:35,679
the

520
00:17:33,280 --> 00:17:37,760
file consume that i think actually they

521
00:17:35,679 --> 00:17:39,840
could do a resolution that figures out

522
00:17:37,760 --> 00:17:41,440
i would have never created a log file

523
00:17:39,840 --> 00:17:44,840
this way and if clients

524
00:17:41,440 --> 00:17:47,840
did do that at ci time you could

525
00:17:44,840 --> 00:17:47,840
actually

526
00:17:56,799 --> 00:18:00,240
so does anyone think that lock files are

527
00:17:58,720 --> 00:18:03,360
inherently bad

528
00:18:00,240 --> 00:18:07,120
and should not be used

529
00:18:03,360 --> 00:18:07,120
i'm guessing no based on anyone

530
00:18:07,679 --> 00:18:12,640
i think the question what else would you

531
00:18:10,640 --> 00:18:14,960
use

532
00:18:12,640 --> 00:18:17,440
we can't say it's bad but we have a

533
00:18:14,960 --> 00:18:17,440
better way

534
00:18:18,640 --> 00:18:21,760
there you go on breaking changes you

535
00:18:20,400 --> 00:18:25,120
change the name

536
00:18:21,760 --> 00:18:28,720
the name is there to give you a

537
00:18:25,120 --> 00:18:30,559
backwards compatible

538
00:18:28,720 --> 00:18:32,160
just moves the semantic information from

539
00:18:30,559 --> 00:18:34,080
the version number to the name

540
00:18:32,160 --> 00:18:35,919
i mean it's like it's identity where

541
00:18:34,080 --> 00:18:37,360
identity is name plus version and you

542
00:18:35,919 --> 00:18:38,799
just moves the version over into the

543
00:18:37,360 --> 00:18:42,959
name part

544
00:18:38,799 --> 00:18:42,960
yes that's true technically

545
00:18:47,550 --> 00:18:51,030
[Laughter]

546
00:18:53,120 --> 00:18:57,840
is that a feature or a bug

547
00:19:07,360 --> 00:19:11,360
so my perspective is primarily that of a

548
00:19:09,919 --> 00:19:14,320
software engineer and i

549
00:19:11,360 --> 00:19:15,520
only get into package management at the

550
00:19:14,320 --> 00:19:18,639
end of the work

551
00:19:15,520 --> 00:19:20,080
um i i use log files i pin my with the

552
00:19:18,640 --> 00:19:21,520
dependencies of um

553
00:19:20,080 --> 00:19:24,399
of my builds so that i know which

554
00:19:21,520 --> 00:19:27,200
version i use and i use a

555
00:19:24,400 --> 00:19:27,840
a commit to change the versions i use to

556
00:19:27,200 --> 00:19:30,960
trigger

557
00:19:27,840 --> 00:19:33,199
a build and see work before not works

558
00:19:30,960 --> 00:19:34,640
okay now we can use this version so

559
00:19:33,200 --> 00:19:36,880
that's a certain purpose that this

560
00:19:34,640 --> 00:19:38,400
serves for me and of course we can say

561
00:19:36,880 --> 00:19:40,000
that's inherently bad it

562
00:19:38,400 --> 00:19:41,440
you can say it's bad practice i don't

563
00:19:40,000 --> 00:19:42,320
know better practice for what i'm trying

564
00:19:41,440 --> 00:19:45,200
to do there

565
00:19:42,320 --> 00:19:45,918
um so i really like to put the question

566
00:19:45,200 --> 00:19:50,240
to the room

567
00:19:45,919 --> 00:19:50,240
um do we have a better way to do that

568
00:19:50,480 --> 00:19:58,240
there seems to be a widow so i guess

569
00:19:54,559 --> 00:19:59,039
people are looking at me um the the lock

570
00:19:58,240 --> 00:20:00,880
file right now

571
00:19:59,039 --> 00:20:02,320
is just it's a file that contains some

572
00:20:00,880 --> 00:20:03,919
versions right yeah

573
00:20:02,320 --> 00:20:05,678
it doesn't say why it contains those

574
00:20:03,919 --> 00:20:08,960
versions

575
00:20:05,679 --> 00:20:10,400
and and so like if you if you

576
00:20:08,960 --> 00:20:12,240
what's typically assumed is that that's

577
00:20:10,400 --> 00:20:13,760
what the developer tested with

578
00:20:12,240 --> 00:20:15,200
right like that's sort of your best case

579
00:20:13,760 --> 00:20:16,080
log file that's what the developer

580
00:20:15,200 --> 00:20:18,799
tested

581
00:20:16,080 --> 00:20:20,080
but you know in our world like we

582
00:20:18,799 --> 00:20:21,280
probably have several different log

583
00:20:20,080 --> 00:20:22,559
files for different projects because

584
00:20:21,280 --> 00:20:24,960
we're building on different machines

585
00:20:22,559 --> 00:20:26,320
sure right and so you know it even gets

586
00:20:24,960 --> 00:20:27,760
combinatorial at that level

587
00:20:26,320 --> 00:20:29,678
and so you know what what i would much

588
00:20:27,760 --> 00:20:32,080
rather have than a log file

589
00:20:29,679 --> 00:20:34,080
is like why is the developer special i

590
00:20:32,080 --> 00:20:36,080
would like to know that someone tested

591
00:20:34,080 --> 00:20:37,760
with these versions right like so i

592
00:20:36,080 --> 00:20:39,280
could have the lock file from all my

593
00:20:37,760 --> 00:20:40,000
users for all the versions that they got

594
00:20:39,280 --> 00:20:42,320
working

595
00:20:40,000 --> 00:20:44,240
i could have the lock file for all the

596
00:20:42,320 --> 00:20:44,720
deployers or distro managers or anyone

597
00:20:44,240 --> 00:20:47,520
who ever

598
00:20:44,720 --> 00:20:48,080
tested the package right and report that

599
00:20:47,520 --> 00:20:50,158
somewhere

600
00:20:48,080 --> 00:20:51,678
and then at least you have a better way

601
00:20:50,159 --> 00:20:52,960
of assessing you know

602
00:20:51,679 --> 00:20:55,200
confidence and whether the package is

603
00:20:52,960 --> 00:20:56,799
going to work for some criteria but

604
00:20:55,200 --> 00:20:58,640
i mean you probably need to go further

605
00:20:56,799 --> 00:21:00,400
than that and assign more meaning to it

606
00:20:58,640 --> 00:21:02,240
they ran the full test suite they smoke

607
00:21:00,400 --> 00:21:04,080
tested it it compiled like you know

608
00:21:02,240 --> 00:21:06,480
there are lots of different things that

609
00:21:04,080 --> 00:21:08,240
that particular configuration could mean

610
00:21:06,480 --> 00:21:09,919
and i think you know you need more

611
00:21:08,240 --> 00:21:11,760
meaning

612
00:21:09,919 --> 00:21:13,120
so a friend of that that something

613
00:21:11,760 --> 00:21:14,480
happens in in github there's this

614
00:21:13,120 --> 00:21:16,000
feature called the pandabot

615
00:21:14,480 --> 00:21:18,000
while it's now called automated security

616
00:21:16,000 --> 00:21:19,520
updates but what it does is that when it

617
00:21:18,000 --> 00:21:20,960
sees there's a vulnerability in one of

618
00:21:19,520 --> 00:21:23,200
your dependencies it tries to

619
00:21:20,960 --> 00:21:24,640
propose a pr that's going to update that

620
00:21:23,200 --> 00:21:27,200
and one of the things they do

621
00:21:24,640 --> 00:21:27,840
is look at all of the other things that

622
00:21:27,200 --> 00:21:29,360
uh

623
00:21:27,840 --> 00:21:30,959
all the other uses of that component

624
00:21:29,360 --> 00:21:32,879
that they're updating to

625
00:21:30,960 --> 00:21:34,559
and they run then the tests have run and

626
00:21:32,880 --> 00:21:35,840
see if the tests pass

627
00:21:34,559 --> 00:21:37,918
and they sort of try to develop a

628
00:21:35,840 --> 00:21:39,439
compatibility score now it's by no means

629
00:21:37,919 --> 00:21:40,640
perfect that's not but the the

630
00:21:39,440 --> 00:21:42,880
reason i bring it up is it's kind of

631
00:21:40,640 --> 00:21:45,679
down this path of crowd sourcing the

632
00:21:42,880 --> 00:21:47,200
the notion of things working together

633
00:21:45,679 --> 00:21:47,919
right we've got all these millions of

634
00:21:47,200 --> 00:21:49,919
people or

635
00:21:47,919 --> 00:21:52,000
depending on how big your ecosystem is

636
00:21:49,919 --> 00:21:54,159
lots of people using these packages

637
00:21:52,000 --> 00:21:55,679
we can actually tell whether or not by

638
00:21:54,159 --> 00:21:58,159
actual like experience

639
00:21:55,679 --> 00:22:01,440
whether or not version 1.3 is compatible

640
00:21:58,159 --> 00:22:01,440
with version 1.4

641
00:22:05,280 --> 00:22:10,720
as you know one more thing about the

642
00:22:08,000 --> 00:22:12,880
they're not human reviewable

643
00:22:10,720 --> 00:22:14,720
like any generated file humans are

644
00:22:12,880 --> 00:22:17,120
terrible at actually reviewing these

645
00:22:14,720 --> 00:22:18,480
um but you can tell git with like get

646
00:22:17,120 --> 00:22:20,639
attributes or something like that

647
00:22:18,480 --> 00:22:21,520
like here is a program that can do the

648
00:22:20,640 --> 00:22:24,559
dipping

649
00:22:21,520 --> 00:22:27,918
of this file and so if clients

650
00:22:24,559 --> 00:22:30,000
were able to actually do an improved

651
00:22:27,919 --> 00:22:31,360
human review of a lock file you could

652
00:22:30,000 --> 00:22:34,480
set up a system so that git

653
00:22:31,360 --> 00:22:36,240
actually does a diff in a human like

654
00:22:34,480 --> 00:22:37,360
removable way or maybe just give the

655
00:22:36,240 --> 00:22:41,840
plus a reminders like

656
00:22:37,360 --> 00:22:41,840
this is a correct block file

657
00:22:41,919 --> 00:22:45,600
one other thing is we can be more

658
00:22:43,679 --> 00:22:47,120
careful in breaking changes so we can

659
00:22:45,600 --> 00:22:48,158
consider breaking changes to be an

660
00:22:47,120 --> 00:22:50,799
unsocial

661
00:22:48,159 --> 00:22:52,080
activity and we see things like the

662
00:22:50,799 --> 00:22:55,280
unique system calls that

663
00:22:52,080 --> 00:22:56,240
have worked for decades with small

664
00:22:55,280 --> 00:22:57,840
changes and their

665
00:22:56,240 --> 00:22:59,440
names have been changed so have weight

666
00:22:57,840 --> 00:23:01,520
and weight two and weight three

667
00:22:59,440 --> 00:23:04,480
and wait four because their changes were

668
00:23:01,520 --> 00:23:09,840
needed but reid for example has stayed

669
00:23:04,480 --> 00:23:09,840
the same for 50 years

670
00:23:10,480 --> 00:23:14,640
i'd like to respond to the statement

671
00:23:12,480 --> 00:23:17,200
that log fight changes aren't human

672
00:23:14,640 --> 00:23:18,720
reviewable it really depends it's a

673
00:23:17,200 --> 00:23:22,000
matter of engineering practice i think

674
00:23:18,720 --> 00:23:24,400
more than tools so i usually

675
00:23:22,000 --> 00:23:26,080
ask that if there is a change to that

676
00:23:24,400 --> 00:23:28,080
it's it's a separate change

677
00:23:26,080 --> 00:23:29,918
like it's the configuration change is

678
00:23:28,080 --> 00:23:32,399
like one pr

679
00:23:29,919 --> 00:23:34,400
um which means the only change you have

680
00:23:32,400 --> 00:23:36,400
is in log5 which is either a plain text

681
00:23:34,400 --> 00:23:39,039
or json

682
00:23:36,400 --> 00:23:41,200
and i think you can review it it's work

683
00:23:39,039 --> 00:23:42,320
but i mean if you review a sizable pr

684
00:23:41,200 --> 00:23:44,799
it's also work

685
00:23:42,320 --> 00:23:46,799
so it can be done uh the question is

686
00:23:44,799 --> 00:23:51,120
really is it a right tool for the job

687
00:23:46,799 --> 00:23:52,720
and there the thing you said um

688
00:23:51,120 --> 00:23:54,158
i think one thing we do lump together is

689
00:23:52,720 --> 00:23:55,840
that we kind of think of it as like a

690
00:23:54,159 --> 00:23:57,120
one size fits all

691
00:23:55,840 --> 00:23:58,320
there's this one log file in there it

692
00:23:57,120 --> 00:23:59,360
says these are the dependencies

693
00:23:58,320 --> 00:24:01,520
basically

694
00:23:59,360 --> 00:24:02,959
um but if you take that code you deploy

695
00:24:01,520 --> 00:24:04,639
into different places

696
00:24:02,960 --> 00:24:06,159
then that's the wrong tool for the job

697
00:24:04,640 --> 00:24:07,440
because then you need configurations for

698
00:24:06,159 --> 00:24:08,799
the different deployments that you're

699
00:24:07,440 --> 00:24:11,279
making

700
00:24:08,799 --> 00:24:12,158
we usually use rendering repositories

701
00:24:11,279 --> 00:24:14,559
for that where

702
00:24:12,159 --> 00:24:15,840
the configuration is in the deployment

703
00:24:14,559 --> 00:24:17,039
and then you pull in the code that

704
00:24:15,840 --> 00:24:19,760
you're using for that

705
00:24:17,039 --> 00:24:21,279
and we don't use the setup the

706
00:24:19,760 --> 00:24:22,158
dependencies for the generic

707
00:24:21,279 --> 00:24:23,279
configuration

708
00:24:22,159 --> 00:24:27,440
but that's just basically it's a

709
00:24:23,279 --> 00:24:27,440
workaround for for different deployments

710
00:24:28,799 --> 00:24:32,320
so i want to go to the other end of the

711
00:24:30,480 --> 00:24:33,760
spectrum so

712
00:24:32,320 --> 00:24:36,000
lock files give us a lot of

713
00:24:33,760 --> 00:24:37,919
predictability and pin things in place

714
00:24:36,000 --> 00:24:41,279
but a number of package managers express

715
00:24:37,919 --> 00:24:46,960
their dependence or their manifest

716
00:24:41,279 --> 00:24:49,360
as executable code and

717
00:24:46,960 --> 00:24:51,039
and you know that that has the power of

718
00:24:49,360 --> 00:24:53,120
being able to be dynamic

719
00:24:51,039 --> 00:24:54,480
um but with that comes certain

720
00:24:53,120 --> 00:24:56,639
challenges

721
00:24:54,480 --> 00:24:59,440
um can you talk about these challenges

722
00:24:56,640 --> 00:25:02,060
and the problems they cause for

723
00:24:59,440 --> 00:25:05,440
consumers

724
00:25:02,060 --> 00:25:08,960
[Laughter]

725
00:25:05,440 --> 00:25:08,960
or is it just no don't do that

726
00:25:12,080 --> 00:25:15,439
so i mean okay it's cool you can do it

727
00:25:14,159 --> 00:25:18,240
not not everything you

728
00:25:15,440 --> 00:25:19,120
can do you should do um but that's fine

729
00:25:18,240 --> 00:25:20,799
if you're doing it

730
00:25:19,120 --> 00:25:23,120
at least if you do that in your

731
00:25:20,799 --> 00:25:25,279
ecosystem provide a mechanism for

732
00:25:23,120 --> 00:25:26,879
dumping the what the resolver did

733
00:25:25,279 --> 00:25:29,600
because the challenge with all these

734
00:25:26,880 --> 00:25:31,679
systems and this is a problem we have in

735
00:25:29,600 --> 00:25:33,360
in github with things like the pandabot

736
00:25:31,679 --> 00:25:34,960
is that if you've got running arbitrary

737
00:25:33,360 --> 00:25:36,479
code the only way you can

738
00:25:34,960 --> 00:25:38,320
understand what the resolver is going to

739
00:25:36,480 --> 00:25:40,159
do what dependencies you're going to get

740
00:25:38,320 --> 00:25:41,918
is by running the code but if it's

741
00:25:40,159 --> 00:25:43,679
arbitrary code well then it's not

742
00:25:41,919 --> 00:25:44,880
trusted so now i have to figure out how

743
00:25:43,679 --> 00:25:47,360
to run your code

744
00:25:44,880 --> 00:25:48,799
in a trusted or untrusted environment in

745
00:25:47,360 --> 00:25:50,799
a sandbox

746
00:25:48,799 --> 00:25:52,559
so i can even figure out what set of

747
00:25:50,799 --> 00:25:54,480
dependencies you're going to have

748
00:25:52,559 --> 00:25:58,080
now if you ended up at least at the very

749
00:25:54,480 --> 00:26:00,080
least with a a lock file or a dump file

750
00:25:58,080 --> 00:26:01,678
i would be able to understand more about

751
00:26:00,080 --> 00:26:02,960
what the system is doing and then be

752
00:26:01,679 --> 00:26:04,559
able to reason over it

753
00:26:02,960 --> 00:26:06,320
the reason why declarative stuff is

754
00:26:04,559 --> 00:26:07,918
useful and and powerful

755
00:26:06,320 --> 00:26:10,320
is because i it's declarative i can

756
00:26:07,919 --> 00:26:11,200
simply reason over the face value of

757
00:26:10,320 --> 00:26:12,879
what's there

758
00:26:11,200 --> 00:26:15,120
as opposed to having running uh running

759
00:26:12,880 --> 00:26:18,320
arbitrary code

760
00:26:15,120 --> 00:26:18,320
um that's all i have to say

761
00:26:19,520 --> 00:26:23,200
no i just want to say nobody nobody

762
00:26:22,480 --> 00:26:27,360
wants that

763
00:26:23,200 --> 00:26:29,600
um so for more than two decades now

764
00:26:27,360 --> 00:26:31,360
the idea of using a touring complete

765
00:26:29,600 --> 00:26:33,520
programming language to do configuration

766
00:26:31,360 --> 00:26:36,639
management comes up again and again

767
00:26:33,520 --> 00:26:39,440
and none of the systems that came up

768
00:26:36,640 --> 00:26:40,880
have reached dominance in the market i

769
00:26:39,440 --> 00:26:42,000
think there may be a reason for that and

770
00:26:40,880 --> 00:26:44,159
that is

771
00:26:42,000 --> 00:26:45,600
engineering is already complicated right

772
00:26:44,159 --> 00:26:47,600
software engineering

773
00:26:45,600 --> 00:26:49,600
and if you add another layer to it to

774
00:26:47,600 --> 00:26:51,439
make it like exponentially more

775
00:26:49,600 --> 00:26:52,959
complicated

776
00:26:51,440 --> 00:26:55,520
maybe that's just not the right way and

777
00:26:52,960 --> 00:26:58,240
i think the systems that are successful

778
00:26:55,520 --> 00:26:58,799
typically are almost simple to the

779
00:26:58,240 --> 00:27:01,120
extreme

780
00:26:58,799 --> 00:27:02,320
right to use a plain text file to tell

781
00:27:01,120 --> 00:27:04,799
you what the dependencies are maybe they

782
00:27:02,320 --> 00:27:07,200
use a little setup

783
00:27:04,799 --> 00:27:08,879
file to to install the package but it's

784
00:27:07,200 --> 00:27:10,400
like 10 lines and you can read it and if

785
00:27:08,880 --> 00:27:14,000
you know the technology

786
00:27:10,400 --> 00:27:16,000
um yeah so maybe simplicity is key and

787
00:27:14,000 --> 00:27:18,840
that's why this doesn't doesn't get

788
00:27:16,000 --> 00:27:21,840
adopted it's working but it doesn't get

789
00:27:18,840 --> 00:27:21,840
adopted

790
00:27:22,559 --> 00:27:25,720
so i want to move on and talk about the

791
00:27:24,399 --> 00:27:27,918
topic of

792
00:27:25,720 --> 00:27:28,720
reproducibility um from a couple of

793
00:27:27,919 --> 00:27:32,720
different

794
00:27:28,720 --> 00:27:35,039
aspects um so one is

795
00:27:32,720 --> 00:27:36,720
there there seems to be a mix uh and

796
00:27:35,039 --> 00:27:37,760
i'll actually um pose this question to

797
00:27:36,720 --> 00:27:40,559
the audience

798
00:27:37,760 --> 00:27:41,120
um how many people work in environments

799
00:27:40,559 --> 00:27:44,320
where you

800
00:27:41,120 --> 00:27:49,520
rebuild packages from source

801
00:27:44,320 --> 00:27:52,559
rather than consuming binary packages

802
00:27:49,520 --> 00:27:54,799
let's say roughly 50 which is so this

803
00:27:52,559 --> 00:27:57,279
same question was asked in the legal dev

804
00:27:54,799 --> 00:27:59,918
room earlier today and it was roughly 50

805
00:27:57,279 --> 00:27:59,919
there as well

806
00:28:00,880 --> 00:28:04,559
this poses a number of challenges

807
00:28:02,960 --> 00:28:05,279
there's some difficulties to it and it

808
00:28:04,559 --> 00:28:09,360
can cause

809
00:28:05,279 --> 00:28:11,679
problems um what do you think

810
00:28:09,360 --> 00:28:12,399
so firstly what's your opinion as to

811
00:28:11,679 --> 00:28:15,520
whether this

812
00:28:12,399 --> 00:28:17,279
is a best practice and

813
00:28:15,520 --> 00:28:20,559
if so what are some things that the

814
00:28:17,279 --> 00:28:23,520
industry can do to make this

815
00:28:20,559 --> 00:28:23,520
easier and better

816
00:28:24,320 --> 00:28:27,439
should certainly be an option of any

817
00:28:25,840 --> 00:28:29,840
packaging system to offer this

818
00:28:27,440 --> 00:28:31,360
ability we heard good reasons why this

819
00:28:29,840 --> 00:28:31,840
can help with the performance for

820
00:28:31,360 --> 00:28:35,360
example

821
00:28:31,840 --> 00:28:37,360
certainly for security for compliance

822
00:28:35,360 --> 00:28:38,479
and this is why i believe it should be

823
00:28:37,360 --> 00:28:40,240
available

824
00:28:38,480 --> 00:28:42,159
whether people prefer to use it or not

825
00:28:40,240 --> 00:28:42,840
that is something that should be left as

826
00:28:42,159 --> 00:28:45,840
an

827
00:28:42,840 --> 00:28:45,840
option

828
00:28:46,159 --> 00:28:49,919
we used to say don't take binaries from

829
00:28:48,000 --> 00:28:52,640
strangers right so

830
00:28:49,919 --> 00:28:54,159
um but the question is who is a stranger

831
00:28:52,640 --> 00:28:56,000
a lot of this is about trust

832
00:28:54,159 --> 00:28:57,840
we have a lot of discussions like this

833
00:28:56,000 --> 00:28:59,200
where we seem to think that technical

834
00:28:57,840 --> 00:29:01,840
solutions

835
00:28:59,200 --> 00:29:03,760
can replace trust imagine you have a

836
00:29:01,840 --> 00:29:06,158
completely trustworthy source

837
00:29:03,760 --> 00:29:07,840
say github is running a build service

838
00:29:06,159 --> 00:29:08,480
and it's completely transparent you can

839
00:29:07,840 --> 00:29:10,879
introspect

840
00:29:08,480 --> 00:29:12,320
everything and they're producing binary

841
00:29:10,880 --> 00:29:15,360
versions of packages and offering them

842
00:29:12,320 --> 00:29:17,918
in a repository and you can completely

843
00:29:15,360 --> 00:29:19,520
assess how they're doing this and we

844
00:29:17,919 --> 00:29:20,960
assume that it's completely trustworthy

845
00:29:19,520 --> 00:29:22,720
would it really be useful

846
00:29:20,960 --> 00:29:24,559
to to compile on your own all the time

847
00:29:22,720 --> 00:29:26,399
think of the trees right think of how

848
00:29:24,559 --> 00:29:27,360
much electricity we're wasting in time

849
00:29:26,399 --> 00:29:31,360
as well

850
00:29:27,360 --> 00:29:34,639
um yeah so guys yeah yeah

851
00:29:31,360 --> 00:29:35,600
what do i care about we're thinking

852
00:29:34,640 --> 00:29:37,360
about this thing

853
00:29:35,600 --> 00:29:39,279
yeah yeah what do i care about the

854
00:29:37,360 --> 00:29:42,639
megawatts we're using right um

855
00:29:39,279 --> 00:29:44,399
so in the end there's time for it so i

856
00:29:42,640 --> 00:29:45,600
come from a background of being a c plus

857
00:29:44,399 --> 00:29:48,000
plus developer of course we build

858
00:29:45,600 --> 00:29:51,199
everything from source code every time

859
00:29:48,000 --> 00:29:51,200
but really um

860
00:29:51,679 --> 00:29:56,720
but that's the question of trust and of

861
00:29:54,000 --> 00:29:58,960
good technology right so

862
00:29:56,720 --> 00:29:59,840
vc package solved a lot of the these

863
00:29:58,960 --> 00:30:02,880
issues for

864
00:29:59,840 --> 00:30:05,039
um for compliant languages where

865
00:30:02,880 --> 00:30:06,960
binary versions weren't used at all not

866
00:30:05,039 --> 00:30:08,000
accepted i don't trust binaries from

867
00:30:06,960 --> 00:30:09,919
strangers all of a sudden

868
00:30:08,000 --> 00:30:11,679
people said well this is good you can

869
00:30:09,919 --> 00:30:14,320
use it so

870
00:30:11,679 --> 00:30:16,320
i think it's a it's an aspect of getting

871
00:30:14,320 --> 00:30:18,240
into the more modern world and

872
00:30:16,320 --> 00:30:22,080
saving the environment and you disagree

873
00:30:18,240 --> 00:30:23,520
with me

874
00:30:22,080 --> 00:30:25,120
it's interesting it's long been observed

875
00:30:23,520 --> 00:30:26,480
that there are two two camps there's

876
00:30:25,120 --> 00:30:27,918
those who won't use it if they didn't

877
00:30:26,480 --> 00:30:29,039
build it and those who don't use it if

878
00:30:27,919 --> 00:30:31,120
they did build it

879
00:30:29,039 --> 00:30:32,399
right and and there's no right or wrong

880
00:30:31,120 --> 00:30:33,279
i mean the interesting thing about

881
00:30:32,399 --> 00:30:35,678
building yourself

882
00:30:33,279 --> 00:30:36,480
if you have a really rigorous like my

883
00:30:35,679 --> 00:30:38,399
ideal

884
00:30:36,480 --> 00:30:40,559
is that there's a really rigorous uh

885
00:30:38,399 --> 00:30:43,279
reproducible build system that can be

886
00:30:40,559 --> 00:30:43,600
strongly trusted so i can get it i can

887
00:30:43,279 --> 00:30:45,200
push

888
00:30:43,600 --> 00:30:47,039
build and it's real understood what

889
00:30:45,200 --> 00:30:48,559
build means it's not like some massive

890
00:30:47,039 --> 00:30:49,919
long command line argument that i can

891
00:30:48,559 --> 00:30:52,000
get wrong

892
00:30:49,919 --> 00:30:53,120
i can just run the build and it runs and

893
00:30:52,000 --> 00:30:55,120
there are no warnings

894
00:30:53,120 --> 00:30:56,479
there are no errors it just builds and

895
00:30:55,120 --> 00:31:00,639
says good

896
00:30:56,480 --> 00:31:03,519
it did nothing but if there are well

897
00:31:00,640 --> 00:31:05,039
but like imagine this imagine this

898
00:31:03,519 --> 00:31:07,600
you're a typical open source

899
00:31:05,039 --> 00:31:08,399
consumer developer person and you're

900
00:31:07,600 --> 00:31:11,039
using

901
00:31:08,399 --> 00:31:12,399
you know hundreds of components and

902
00:31:11,039 --> 00:31:14,320
you're trying to build them all

903
00:31:12,399 --> 00:31:16,158
and you you type make or whatever your

904
00:31:14,320 --> 00:31:18,320
build system is

905
00:31:16,159 --> 00:31:19,679
and all this spew of orange and red goes

906
00:31:18,320 --> 00:31:20,960
by on your terminal

907
00:31:19,679 --> 00:31:22,480
like are you going to trust what you

908
00:31:20,960 --> 00:31:24,159
just built are you going to ship that to

909
00:31:22,480 --> 00:31:26,720
your users or your customers

910
00:31:24,159 --> 00:31:28,480
no if it comes up all green i might

911
00:31:26,720 --> 00:31:30,480
start having warm fuzzies but if there's

912
00:31:28,480 --> 00:31:32,000
anything non-green on there

913
00:31:30,480 --> 00:31:34,240
i'm not shipping that i'm immediately

914
00:31:32,000 --> 00:31:35,919
now have to spend hours digging through

915
00:31:34,240 --> 00:31:38,080
other people's builds trying to figure

916
00:31:35,919 --> 00:31:39,679
out what's going on so that build system

917
00:31:38,080 --> 00:31:41,039
needs to be trustable like it's a

918
00:31:39,679 --> 00:31:43,200
two-way street here right i have to be

919
00:31:41,039 --> 00:31:45,760
able to trust the reproducibility of it

920
00:31:43,200 --> 00:31:47,360
i would love that that were true but you

921
00:31:45,760 --> 00:31:49,279
know we're we're not even at the point

922
00:31:47,360 --> 00:31:50,959
just accept the context here i mentioned

923
00:31:49,279 --> 00:31:54,320
this maybe in an earlier talk

924
00:31:50,960 --> 00:31:56,480
um 42 of

925
00:31:54,320 --> 00:31:58,480
the packages we did a little survey of

926
00:31:56,480 --> 00:32:02,320
about 200 000 packages

927
00:31:58,480 --> 00:32:04,480
uh 42 of them don't have any

928
00:32:02,320 --> 00:32:06,639
reasonable way of going from the binary

929
00:32:04,480 --> 00:32:09,519
version like foo version 1.3

930
00:32:06,640 --> 00:32:10,480
to the git commit so it means you can't

931
00:32:09,519 --> 00:32:12,320
identify you

932
00:32:10,480 --> 00:32:14,000
let alone build you can't even identify

933
00:32:12,320 --> 00:32:18,158
the source for 42

934
00:32:14,000 --> 00:32:20,640
percent of the packages sorry

935
00:32:18,159 --> 00:32:21,519
oh that was across a bunch of ecosystems

936
00:32:20,640 --> 00:32:22,960
yeah it's not

937
00:32:21,519 --> 00:32:24,240
it's not meant to be like the broad

938
00:32:22,960 --> 00:32:24,960
brush generalized but i'm finding like

939
00:32:24,240 --> 00:32:27,039
there are

940
00:32:24,960 --> 00:32:28,159
over 200 000 across a bunch of different

941
00:32:27,039 --> 00:32:29,919
ecosystems

942
00:32:28,159 --> 00:32:32,080
that's the kind of statistic that we you

943
00:32:29,919 --> 00:32:32,960
hit so whether it's thirty percent or

944
00:32:32,080 --> 00:32:36,480
seventy percent

945
00:32:32,960 --> 00:32:36,480
it doesn't matter it's not two percent

946
00:32:40,840 --> 00:32:43,840
right

947
00:32:53,279 --> 00:32:57,039
i don't disagree with the people who

948
00:32:54,720 --> 00:32:58,640
said that they prefer binary packaging

949
00:32:57,039 --> 00:33:00,960
it's just that the reason that we don't

950
00:32:58,640 --> 00:33:03,440
use virus packaging is it doesn't work

951
00:33:00,960 --> 00:33:05,279
for us right like if an entire bike

952
00:33:03,440 --> 00:33:07,279
stack itself is it's a built-in source

953
00:33:05,279 --> 00:33:08,960
package manager but we do binary caches

954
00:33:07,279 --> 00:33:10,000
right like mix or geeks or some of these

955
00:33:08,960 --> 00:33:12,399
other systems

956
00:33:10,000 --> 00:33:14,159
and we're trying right now to provide

957
00:33:12,399 --> 00:33:15,120
enough provenance with the binary to

958
00:33:14,159 --> 00:33:16,960
understand

959
00:33:15,120 --> 00:33:18,158
where we can use it right the reason

960
00:33:16,960 --> 00:33:20,480
that people don't distribute optimized

961
00:33:18,159 --> 00:33:22,559
binders because there isn't a good

962
00:33:20,480 --> 00:33:23,760
naming scheme for microarchitectures or

963
00:33:22,559 --> 00:33:26,879
things like this i'll

964
00:33:23,760 --> 00:33:28,960
come to my top tomorrow for that um but

965
00:33:26,880 --> 00:33:30,559
the if you know if you can provide a

966
00:33:28,960 --> 00:33:31,039
binary and provide sufficient provenance

967
00:33:30,559 --> 00:33:34,000
with it

968
00:33:31,039 --> 00:33:35,600
that you know it will satisfy the user

969
00:33:34,000 --> 00:33:36,480
then you can totally distribute binaries

970
00:33:35,600 --> 00:33:38,799
everywhere

971
00:33:36,480 --> 00:33:40,159
and if you can make them trustworthy

972
00:33:38,799 --> 00:33:41,440
right if you can sign them or whatever

973
00:33:40,159 --> 00:33:42,960
it is that you need to do

974
00:33:41,440 --> 00:33:45,360
to do that i don't i don't think it's a

975
00:33:42,960 --> 00:33:47,200
you know it's not a preference thing

976
00:33:45,360 --> 00:33:49,199
it's a it's a utility thing it's what

977
00:33:47,200 --> 00:33:50,880
it's which one do they trust more

978
00:33:49,200 --> 00:33:52,559
well and switch ones are possible too

979
00:33:50,880 --> 00:33:53,840
like in a more native code

980
00:33:52,559 --> 00:33:55,678
environment where you've got lots of

981
00:33:53,840 --> 00:33:57,120
compiler options that vary by

982
00:33:55,679 --> 00:33:58,399
architecture or whatever

983
00:33:57,120 --> 00:33:59,840
those two binaries are just not

984
00:33:58,399 --> 00:34:00,959
compatible i can't run them in the same

985
00:33:59,840 --> 00:34:02,480
place right so

986
00:34:00,960 --> 00:34:07,840
you giving me a binary doesn't help me

987
00:34:02,480 --> 00:34:07,840
at all right but in javascript

988
00:34:12,079 --> 00:34:16,639
so we've got five minutes left so i'd

989
00:34:15,280 --> 00:34:18,839
like to open it up to

990
00:34:16,639 --> 00:34:21,200
any questions that people have for the

991
00:34:18,839 --> 00:34:23,359
panelists

992
00:34:21,199 --> 00:34:24,799
okay on dependency management and

993
00:34:23,359 --> 00:34:27,759
package managers

994
00:34:24,800 --> 00:34:28,800
those does the final thing will be

995
00:34:27,760 --> 00:34:31,440
useful

996
00:34:28,800 --> 00:34:32,240
if uh binary repositories like npmjs or

997
00:34:31,440 --> 00:34:34,480
maybe simple

998
00:34:32,239 --> 00:34:35,439
universally implement the feature that

999
00:34:34,480 --> 00:34:38,320
allows

1000
00:34:35,440 --> 00:34:39,520
to basically report the package as being

1001
00:34:38,320 --> 00:34:42,560
non-normally maintained

1002
00:34:39,520 --> 00:34:45,280
so i have like usual reporting as being

1003
00:34:42,560 --> 00:34:49,839
this package do not use this from a

1004
00:34:45,280 --> 00:34:49,839
crowdsourcers perspective

1005
00:34:51,520 --> 00:34:55,440
i think this would be useful and so the

1006
00:34:54,000 --> 00:34:57,440
question is whether

1007
00:34:55,440 --> 00:34:59,440
central packages should have a feature

1008
00:34:57,440 --> 00:35:01,680
to demark some packet

1009
00:34:59,440 --> 00:35:03,440
some components as deprecated and in

1010
00:35:01,680 --> 00:35:05,040
fact i would go further and say i would

1011
00:35:03,440 --> 00:35:08,320
have a dead man switch

1012
00:35:05,040 --> 00:35:09,520
so if somebody is pinged whether he she

1013
00:35:08,320 --> 00:35:11,359
is still alive

1014
00:35:09,520 --> 00:35:12,960
to maintain the package and doesn't

1015
00:35:11,359 --> 00:35:17,839
respond couple of times

1016
00:35:12,960 --> 00:35:17,839
then this package is marked as risky

1017
00:35:20,880 --> 00:35:25,520
yeah this trust by default um i just

1018
00:35:24,079 --> 00:35:28,720
need to plug that there is actually

1019
00:35:25,520 --> 00:35:31,839
ongoing project um that called fasten

1020
00:35:28,720 --> 00:35:31,839
do you have materials

1021
00:35:32,400 --> 00:35:35,520
you have some survey questions on your

1022
00:35:34,000 --> 00:35:37,440
table um

1023
00:35:35,520 --> 00:35:39,759
and i think it's not just about thinking

1024
00:35:37,440 --> 00:35:42,160
of deprecation it's about metadata

1025
00:35:39,760 --> 00:35:43,599
coding associated with the packages

1026
00:35:42,160 --> 00:35:46,640
you're using so when you

1027
00:35:43,599 --> 00:35:47,359
when you pull in dependencies it is able

1028
00:35:46,640 --> 00:35:48,960
to tell you

1029
00:35:47,359 --> 00:35:51,680
that it was a binary breakage like an

1030
00:35:48,960 --> 00:35:53,920
api breakage or as a security advisory

1031
00:35:51,680 --> 00:35:56,000
and and deprecation warnings is

1032
00:35:53,920 --> 00:35:57,599
basically just one other use case there

1033
00:35:56,000 --> 00:35:59,200
and the idea is to also also include

1034
00:35:57,599 --> 00:36:00,720
compliance information in that

1035
00:35:59,200 --> 00:36:02,399
so that when you're building code as a

1036
00:36:00,720 --> 00:36:03,520
developer you get warnings if you pull

1037
00:36:02,400 --> 00:36:06,560
in something that has up

1038
00:36:03,520 --> 00:36:08,880
on outstanding cvs um etc

1039
00:36:06,560 --> 00:36:10,240
so i say this is totally useful we're

1040
00:36:08,880 --> 00:36:12,079
not the only people who think this way

1041
00:36:10,240 --> 00:36:16,000
because this got even funded by the eu

1042
00:36:12,079 --> 00:36:16,000
and part of that's being developed

1043
00:36:16,240 --> 00:36:19,680
so my little hobby horse here is to get

1044
00:36:18,320 --> 00:36:21,119
back to that connection between the

1045
00:36:19,680 --> 00:36:22,560
binary and the source

1046
00:36:21,119 --> 00:36:24,320
because if you get back to the repo

1047
00:36:22,560 --> 00:36:25,759
whether it's on github or wherever

1048
00:36:24,320 --> 00:36:27,839
right if you can go from the binary that

1049
00:36:25,760 --> 00:36:29,440
you're about to use to the community

1050
00:36:27,839 --> 00:36:31,119
that produced that binary

1051
00:36:29,440 --> 00:36:33,200
you can start understanding much more

1052
00:36:31,119 --> 00:36:35,359
about you know are there thousands of

1053
00:36:33,200 --> 00:36:37,040
open issues are there no developers

1054
00:36:35,359 --> 00:36:38,560
what's the when was the last commit

1055
00:36:37,040 --> 00:36:40,480
all those sorts of things that might

1056
00:36:38,560 --> 00:36:42,640
help you make an informed decision so

1057
00:36:40,480 --> 00:36:44,320
you know more information yes i'm a

1058
00:36:42,640 --> 00:36:47,040
little bit leery of the

1059
00:36:44,320 --> 00:36:49,119
social aspects of all the random

1060
00:36:47,040 --> 00:36:50,480
registries running a poll

1061
00:36:49,119 --> 00:36:52,560
saying like you know this is good or

1062
00:36:50,480 --> 00:36:54,560
this is bad that that

1063
00:36:52,560 --> 00:36:56,560
gives me pause but conceptually yeah i

1064
00:36:54,560 --> 00:36:58,960
think we need to have more information

1065
00:36:56,560 --> 00:37:02,320
from the crowd you know crowdsourced uh

1066
00:36:58,960 --> 00:37:02,320
to help people understand what's going

1067
00:37:06,839 --> 00:37:10,078
on

1068
00:37:09,119 --> 00:37:12,000
that people don't update the

1069
00:37:10,079 --> 00:37:13,119
dependencies that automatically gets

1070
00:37:12,000 --> 00:37:16,000
faded out of the

1071
00:37:13,119 --> 00:37:17,040
device level culturally yeah so like a

1072
00:37:16,000 --> 00:37:18,880
maintainer

1073
00:37:17,040 --> 00:37:21,040
you have a package that presents another

1074
00:37:18,880 --> 00:37:23,839
package the package on which you depend

1075
00:37:21,040 --> 00:37:25,040
is gets a new version as a maintainer

1076
00:37:23,839 --> 00:37:28,240
you should

1077
00:37:25,040 --> 00:37:29,680
sorry as a maintainer you should then

1078
00:37:28,240 --> 00:37:31,839
also update your own package if you

1079
00:37:29,680 --> 00:37:34,399
don't do it you don't respond so like

1080
00:37:31,839 --> 00:37:36,960
after i don't know anymore like two

1081
00:37:34,400 --> 00:37:36,960
months or so

1082
00:37:39,359 --> 00:37:42,799
so i understand how that works if the

1083
00:37:41,040 --> 00:37:44,400
package is depended on by like you know

1084
00:37:42,800 --> 00:37:46,880
you know do they automatically

1085
00:37:44,400 --> 00:37:47,920
are there it could be the community then

1086
00:37:46,880 --> 00:37:51,040
takes over to

1087
00:37:47,920 --> 00:37:52,880
make sure it still works

1088
00:37:51,040 --> 00:37:54,160
the other thing about cran though is

1089
00:37:52,880 --> 00:37:56,560
that like they

1090
00:37:54,160 --> 00:37:58,560
they archive versions of things so often

1091
00:37:56,560 --> 00:38:00,000
and they update so often that like

1092
00:37:58,560 --> 00:38:01,359
any checksums that you put in the

1093
00:38:00,000 --> 00:38:02,160
package manager are likely freaking

1094
00:38:01,359 --> 00:38:04,160
wrong

1095
00:38:02,160 --> 00:38:05,839
and so like there's no way for us to

1096
00:38:04,160 --> 00:38:07,200
securely fetch from them because they'd

1097
00:38:05,839 --> 00:38:08,240
like to archive the version that we

1098
00:38:07,200 --> 00:38:10,799
trust

1099
00:38:08,240 --> 00:38:11,919
and i don't think that's helpful there's

1100
00:38:10,800 --> 00:38:16,160
bigger issues

1101
00:38:11,920 --> 00:38:18,880
yes are you involved

1102
00:38:16,160 --> 00:38:18,879
if you know people

1103
00:38:24,240 --> 00:38:28,319
well we're officially at time um so

1104
00:38:26,800 --> 00:38:33,839
thank you everyone thank you

1105
00:38:28,320 --> 00:38:33,839
to our panelists

1106
00:38:38,510 --> 00:38:41,869
[Applause]

