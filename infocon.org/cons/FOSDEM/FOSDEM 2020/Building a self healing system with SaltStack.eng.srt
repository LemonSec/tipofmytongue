1
00:00:07,440 --> 00:00:10,800
all right

2
00:00:08,160 --> 00:00:11,440
um next up we have uh uh gareth who will

3
00:00:10,800 --> 00:00:13,360
talk about

4
00:00:11,440 --> 00:00:17,920
saltstack and building a self-healing

5
00:00:13,360 --> 00:00:17,919
system thank you

6
00:00:19,439 --> 00:00:23,840
wow you haven't even done anything you

7
00:00:21,119 --> 00:00:25,680
get applause that's really awesome

8
00:00:23,840 --> 00:00:27,359
my reputation precedes me can you guys

9
00:00:25,680 --> 00:00:30,720
hear me okay

10
00:00:27,359 --> 00:00:33,760
yes no yes thumbs up

11
00:00:30,720 --> 00:00:35,600
okay all right so yeah this is uh

12
00:00:33,760 --> 00:00:37,360
building a self-healing system with

13
00:00:35,600 --> 00:00:39,520
saltstack my name is garrett

14
00:00:37,360 --> 00:00:41,040
my twitter can be found on the right

15
00:00:39,520 --> 00:00:42,640
hand side of every slide so if anyone

16
00:00:41,040 --> 00:00:43,600
feels like tweeting at me or about me

17
00:00:42,640 --> 00:00:47,200
during the talk

18
00:00:43,600 --> 00:00:48,079
feel free i'm a senior software engineer

19
00:00:47,200 --> 00:00:50,239
at saltsec

20
00:00:48,079 --> 00:00:52,079
i'm fortunate to get to spend my days

21
00:00:50,239 --> 00:00:53,599
writing open source software

22
00:00:52,079 --> 00:00:55,760
if you have the opportunity i highly

23
00:00:53,600 --> 00:00:57,600
recommend it if anyone's interested in

24
00:00:55,760 --> 00:00:59,280
talking about salt in general

25
00:00:57,600 --> 00:01:02,320
just automation anything just find me

26
00:00:59,280 --> 00:01:04,960
outside after the talk or i'm around

27
00:01:02,320 --> 00:01:06,400
i'm also a former devops engineer so if

28
00:01:04,959 --> 00:01:07,919
anyone wants to have a group therapy

29
00:01:06,400 --> 00:01:10,799
session about being on call

30
00:01:07,920 --> 00:01:10,799
i'm happy to leave that

31
00:01:11,439 --> 00:01:15,600
um also we are hiring so if anyone's

32
00:01:14,000 --> 00:01:18,159
interested in working

33
00:01:15,600 --> 00:01:20,000
for saltsac we do offer remotes

34
00:01:18,159 --> 00:01:21,520
positions so you can stay in

35
00:01:20,000 --> 00:01:23,360
in lovely europe um you don't have to

36
00:01:21,520 --> 00:01:26,479
move to the us

37
00:01:23,360 --> 00:01:28,159
we'll just leave it at that

38
00:01:26,479 --> 00:01:30,720
um so yeah building a self-healing

39
00:01:28,159 --> 00:01:32,799
system with saltstack

40
00:01:30,720 --> 00:01:34,158
um so just some some basic saltstats

41
00:01:32,799 --> 00:01:36,240
terminology first of all how many people

42
00:01:34,159 --> 00:01:37,680
are using salsa today

43
00:01:36,240 --> 00:01:39,360
awesome how many people like to use

44
00:01:37,680 --> 00:01:42,240
saltstack

45
00:01:39,360 --> 00:01:42,240
should be everyone

46
00:01:44,240 --> 00:01:48,479
okay so saltstack is written in python

47
00:01:46,640 --> 00:01:50,159
um it is a it began as a remote

48
00:01:48,479 --> 00:01:52,159
execution system

49
00:01:50,159 --> 00:01:54,000
as a way to execute uh commands across

50
00:01:52,159 --> 00:01:56,159
many systems

51
00:01:54,000 --> 00:01:57,759
so it began similar in nature to tools

52
00:01:56,159 --> 00:02:00,719
like fabric and funk

53
00:01:57,759 --> 00:02:02,640
but it's not done over ssh it's using

54
00:02:00,719 --> 00:02:05,199
0mq as a messaging bus and it's

55
00:02:02,640 --> 00:02:06,799
encrypted and very fast

56
00:02:05,200 --> 00:02:09,440
because of the way it was designed

57
00:02:06,799 --> 00:02:11,360
adding configuration management was easy

58
00:02:09,440 --> 00:02:14,160
through a series of plugins we call them

59
00:02:11,360 --> 00:02:14,160
state modules

60
00:02:14,879 --> 00:02:18,399
it's also available to work with like

61
00:02:17,200 --> 00:02:21,440
assault api

62
00:02:18,400 --> 00:02:22,560
easily exposed for various purposes we

63
00:02:21,440 --> 00:02:25,520
have uh

64
00:02:22,560 --> 00:02:26,480
securing uh storing secure data is in

65
00:02:25,520 --> 00:02:29,280
pillar

66
00:02:26,480 --> 00:02:30,879
and reactors which are small salt salts

67
00:02:29,280 --> 00:02:33,360
small state modules

68
00:02:30,879 --> 00:02:34,079
that wait for specific events and react

69
00:02:33,360 --> 00:02:37,840
some manner

70
00:02:34,080 --> 00:02:37,840
which we'll look at a bit later

71
00:02:38,400 --> 00:02:42,160
okay so the salt minion um is a daemon

72
00:02:40,879 --> 00:02:44,160
that runs commands on

73
00:02:42,160 --> 00:02:46,000
on a server so any server that you have

74
00:02:44,160 --> 00:02:47,040
within like an infrastructure that's

75
00:02:46,000 --> 00:02:51,440
controlled by salt

76
00:02:47,040 --> 00:02:53,679
it will be running a salt minion

77
00:02:51,440 --> 00:02:55,280
there's assault master which is the the

78
00:02:53,680 --> 00:02:58,400
uh the server which sends out those

79
00:02:55,280 --> 00:02:58,400
commands to those minions

80
00:02:59,200 --> 00:03:02,319
so a typical salts that

81
00:03:02,480 --> 00:03:08,319
jet lag is a hell of a drug i swear

82
00:03:05,519 --> 00:03:09,200
a typical salt setup requires a single

83
00:03:08,319 --> 00:03:11,200
master

84
00:03:09,200 --> 00:03:12,319
and many minions and the minions

85
00:03:11,200 --> 00:03:15,839
communicate with the master

86
00:03:12,319 --> 00:03:15,839
the master communicates with the minions

87
00:03:16,080 --> 00:03:19,360
we can have a similar setup with

88
00:03:17,920 --> 00:03:22,159
multiple masters

89
00:03:19,360 --> 00:03:22,879
controlling many minions so minions will

90
00:03:22,159 --> 00:03:26,079
connect to

91
00:03:22,879 --> 00:03:28,959
uh masters at random specific masters um

92
00:03:26,080 --> 00:03:29,599
it's up to you we also have the option

93
00:03:28,959 --> 00:03:32,480
to run in

94
00:03:29,599 --> 00:03:34,238
what's called a masternose mode so not

95
00:03:32,480 --> 00:03:36,399
requiring a master you run all of your

96
00:03:34,239 --> 00:03:38,080
commands directly on the minions

97
00:03:36,400 --> 00:03:39,599
accomplishes the same thing there's

98
00:03:38,080 --> 00:03:40,640
certain pieces that you don't get access

99
00:03:39,599 --> 00:03:44,839
to

100
00:03:40,640 --> 00:03:46,480
which events reactors things like that

101
00:03:44,840 --> 00:03:48,560
um

102
00:03:46,480 --> 00:03:49,920
so salt is built on the salt event

103
00:03:48,560 --> 00:03:51,840
system

104
00:03:49,920 --> 00:03:53,839
it is the heart of salt stack and what

105
00:03:51,840 --> 00:03:56,400
distinguishes salt from similar products

106
00:03:53,840 --> 00:03:57,920
projects the salt master and the salt

107
00:03:56,400 --> 00:04:00,560
minion each have their own individual

108
00:03:57,920 --> 00:04:03,439
event systems

109
00:04:00,560 --> 00:04:05,120
so here is a slide that shows a kind of

110
00:04:03,439 --> 00:04:08,959
typical

111
00:04:05,120 --> 00:04:10,799
salt setup with all the pieces involved

112
00:04:08,959 --> 00:04:15,840
so we have our minions running on a

113
00:04:10,799 --> 00:04:18,400
variety of operating systems

114
00:04:15,840 --> 00:04:20,238
in this case windows linux aix as well

115
00:04:18,399 --> 00:04:23,359
as some network devices

116
00:04:20,238 --> 00:04:24,320
the lightning bolts represent the xero

117
00:04:23,360 --> 00:04:28,000
and q

118
00:04:24,320 --> 00:04:29,759
ssh we also support tornado

119
00:04:28,000 --> 00:04:31,360
the invent bus is the line with the the

120
00:04:29,759 --> 00:04:33,040
x through it and then we have the

121
00:04:31,360 --> 00:04:34,800
various other pieces which are typically

122
00:04:33,040 --> 00:04:35,680
found on the master so your runners your

123
00:04:34,800 --> 00:04:38,720
reactors

124
00:04:35,680 --> 00:04:38,720
and then your salt master

125
00:04:40,160 --> 00:04:44,000
so event types as i said solstack is

126
00:04:42,400 --> 00:04:46,239
based on on zero and queue

127
00:04:44,000 --> 00:04:49,600
and and events and we have a variety of

128
00:04:46,240 --> 00:04:51,600
events that saltsac usually usually uses

129
00:04:49,600 --> 00:04:53,280
so we have authentication events which

130
00:04:51,600 --> 00:04:54,840
are fired when the minion performs

131
00:04:53,280 --> 00:04:57,198
an authentication check within the

132
00:04:54,840 --> 00:04:58,880
master there's also start events so

133
00:04:57,199 --> 00:05:00,720
every time a minion starts

134
00:04:58,880 --> 00:05:03,199
it fires an event saying hey i've

135
00:05:00,720 --> 00:05:06,639
started onto the event bus

136
00:05:03,199 --> 00:05:09,759
so this all master key events are when

137
00:05:06,639 --> 00:05:11,600
accepting and rejecting minion keys

138
00:05:09,759 --> 00:05:13,440
these typically happen as a result of

139
00:05:11,600 --> 00:05:15,520
actions undertaken by the salt key

140
00:05:13,440 --> 00:05:17,120
command

141
00:05:15,520 --> 00:05:19,039
and then there's also job events a

142
00:05:17,120 --> 00:05:20,320
variety of events here such as when a

143
00:05:19,039 --> 00:05:22,479
job is sent out

144
00:05:20,320 --> 00:05:24,800
to the minions from the master when

145
00:05:22,479 --> 00:05:26,000
events when a minion returns data from a

146
00:05:24,800 --> 00:05:28,479
job to the master

147
00:05:26,000 --> 00:05:30,720
and each time a function inside a state

148
00:05:28,479 --> 00:05:33,039
run completes its execution

149
00:05:30,720 --> 00:05:36,639
this option is disabled by default and

150
00:05:33,039 --> 00:05:36,639
must be enabled by the state events

151
00:05:36,840 --> 00:05:39,359
option

152
00:05:38,000 --> 00:05:40,800
also have runner events so assault

153
00:05:39,360 --> 00:05:42,720
runners are commands that you would run

154
00:05:40,800 --> 00:05:45,360
on your salt master

155
00:05:42,720 --> 00:05:48,240
to orchestrate um against minions to run

156
00:05:45,360 --> 00:05:49,759
commands on the master

157
00:05:48,240 --> 00:05:51,440
and we'll look at one of those in a

158
00:05:49,759 --> 00:05:52,800
little bit so runner events are

159
00:05:51,440 --> 00:05:54,240
associated with assault runners

160
00:05:52,800 --> 00:05:55,520
including events for when a runner

161
00:05:54,240 --> 00:05:57,440
begins

162
00:05:55,520 --> 00:06:00,159
returns and whether the runner is part

163
00:05:57,440 --> 00:06:02,400
of the orchestration system

164
00:06:00,160 --> 00:06:03,600
and there are also presence events which

165
00:06:02,400 --> 00:06:04,960
indicate the presence of minions

166
00:06:03,600 --> 00:06:07,199
connected to the master

167
00:06:04,960 --> 00:06:08,960
and finally there's cloud events for the

168
00:06:07,199 --> 00:06:11,440
various cloud tools that we have

169
00:06:08,960 --> 00:06:11,440
available

170
00:06:12,400 --> 00:06:17,599
so we can listen for events using

171
00:06:15,280 --> 00:06:19,840
variety of salt tools

172
00:06:17,600 --> 00:06:21,440
so using the salt command using the salt

173
00:06:19,840 --> 00:06:23,520
cli

174
00:06:21,440 --> 00:06:26,160
excuse me we can use the salt runner

175
00:06:23,520 --> 00:06:27,680
command and then use the the state.event

176
00:06:26,160 --> 00:06:29,759
runner

177
00:06:27,680 --> 00:06:31,919
passing the pretty equals true command

178
00:06:29,759 --> 00:06:34,000
so this will show you all of the events

179
00:06:31,919 --> 00:06:35,520
that are running through the salt event

180
00:06:34,000 --> 00:06:36,880
bus

181
00:06:35,520 --> 00:06:38,880
and the pretty just makes it the pretty

182
00:06:36,880 --> 00:06:42,080
equals true makes it uh colorful and

183
00:06:38,880 --> 00:06:45,360
nice and uh and pretty

184
00:06:42,080 --> 00:06:48,560
we also get events using the salt api so

185
00:06:45,360 --> 00:06:50,240
running a curl against whatever url you

186
00:06:48,560 --> 00:06:51,520
have configured as on your salt master

187
00:06:50,240 --> 00:06:53,360
for the salt api

188
00:06:51,520 --> 00:06:55,120
passing in events and then the token

189
00:06:53,360 --> 00:06:58,319
that you've generated will give you

190
00:06:55,120 --> 00:06:58,319
a streaming list of events

191
00:06:58,479 --> 00:07:02,560
we can also do it directly from python

192
00:07:00,880 --> 00:07:04,960
so we can query the event bus

193
00:07:02,560 --> 00:07:05,919
using just some simple python code here

194
00:07:04,960 --> 00:07:09,120
so here we're

195
00:07:05,919 --> 00:07:11,198
inviting by importing some some assault

196
00:07:09,120 --> 00:07:12,720
specific python modules

197
00:07:11,199 --> 00:07:16,319
and then connecting to the event bus

198
00:07:12,720 --> 00:07:18,319
using some python code

199
00:07:16,319 --> 00:07:19,680
so here's a typical event that you would

200
00:07:18,319 --> 00:07:22,400
see on a

201
00:07:19,680 --> 00:07:23,520
uh on the salt event bus so in this case

202
00:07:22,400 --> 00:07:27,120
this is a

203
00:07:23,520 --> 00:07:30,159
uh an event a new event um

204
00:07:27,120 --> 00:07:32,400
that's been generated um so the tag

205
00:07:30,160 --> 00:07:34,160
indicates identifies the event that was

206
00:07:32,400 --> 00:07:36,799
fired and the data contains details

207
00:07:34,160 --> 00:07:36,800
about the event

208
00:07:37,919 --> 00:07:45,280
so in this case our tag is that long

209
00:07:42,319 --> 00:07:46,080
date based string and so we find that

210
00:07:45,280 --> 00:07:48,960
both in the

211
00:07:46,080 --> 00:07:51,280
in the tag up top as well as the the job

212
00:07:48,960 --> 00:07:51,280
id

213
00:07:52,879 --> 00:07:56,080
and we also see the minions that were

214
00:07:54,160 --> 00:07:57,520
targeted so in this case we targeted all

215
00:07:56,080 --> 00:07:59,039
minions that the salt master knew about

216
00:07:57,520 --> 00:08:01,520
using the asterisk

217
00:07:59,039 --> 00:08:04,960
it's a target type of glob and the only

218
00:08:01,520 --> 00:08:04,960
one that returned was minion 2.

219
00:08:08,720 --> 00:08:12,400
so here's another event in this case

220
00:08:10,720 --> 00:08:15,199
this is the return event so this is the

221
00:08:12,400 --> 00:08:17,679
the event that returned from minion two

222
00:08:15,199 --> 00:08:18,560
and we can see that um the command that

223
00:08:17,680 --> 00:08:21,280
was run

224
00:08:18,560 --> 00:08:23,120
was test.ping um and the return value

225
00:08:21,280 --> 00:08:26,400
was true

226
00:08:23,120 --> 00:08:30,000
very simple

227
00:08:26,400 --> 00:08:33,039
and if we notice that the uh

228
00:08:30,000 --> 00:08:36,159
the this also has the uh the gids um

229
00:08:33,039 --> 00:08:36,159
which should be the same

230
00:08:36,559 --> 00:08:41,359
and there's our minion two which is the

231
00:08:38,240 --> 00:08:43,760
minion that we targeted

232
00:08:41,360 --> 00:08:45,440
so here's an off event so this happens

233
00:08:43,760 --> 00:08:47,519
as i said when any

234
00:08:45,440 --> 00:08:49,360
anytime a minion authenticates against

235
00:08:47,519 --> 00:08:52,320
the salt master

236
00:08:49,360 --> 00:08:52,800
so we have a pending event here minion

237
00:08:52,320 --> 00:08:54,480
ii

238
00:08:52,800 --> 00:08:57,760
and it's sending its public key along to

239
00:08:54,480 --> 00:08:57,760
the master to be signed

240
00:08:58,480 --> 00:09:01,519
so we can also send events using the

241
00:09:00,160 --> 00:09:05,680
assault bus salt

242
00:09:01,519 --> 00:09:06,160
assault commands so using the salt call

243
00:09:05,680 --> 00:09:07,890
command

244
00:09:06,160 --> 00:09:09,760
and event.fire

245
00:09:07,890 --> 00:09:11,760
[Music]

246
00:09:09,760 --> 00:09:13,040
we can place an event on the salt event

247
00:09:11,760 --> 00:09:16,319
bus

248
00:09:13,040 --> 00:09:18,079
so we pass it some data inside a uh the

249
00:09:16,320 --> 00:09:19,760
single parentheses there it looks like a

250
00:09:18,080 --> 00:09:21,279
python dictionary and then we give it

251
00:09:19,760 --> 00:09:23,279
some sort of tag

252
00:09:21,279 --> 00:09:25,600
self that identifies this particular

253
00:09:23,279 --> 00:09:25,600
event

254
00:09:26,240 --> 00:09:29,839
we can also fire an event up to the

255
00:09:27,680 --> 00:09:34,719
master

256
00:09:29,839 --> 00:09:34,720
so here's a a kind of more

257
00:09:35,200 --> 00:09:39,440
involved example i'm using the same

258
00:09:37,040 --> 00:09:42,719
command event.send

259
00:09:39,440 --> 00:09:43,360
and we are uh giving it a tag of my code

260
00:09:42,720 --> 00:09:45,440
my tag

261
00:09:43,360 --> 00:09:47,600
success and then the data that we want

262
00:09:45,440 --> 00:09:50,480
to send is success is true and message

263
00:09:47,600 --> 00:09:53,279
it works

264
00:09:50,480 --> 00:09:55,120
and also sending them from python so in

265
00:09:53,279 --> 00:09:56,320
this case we defined a custom assault

266
00:09:55,120 --> 00:09:58,320
module

267
00:09:56,320 --> 00:09:59,360
just called with a function called do

268
00:09:58,320 --> 00:10:02,399
something

269
00:09:59,360 --> 00:10:07,279
that uses the event.send module

270
00:10:02,399 --> 00:10:10,800
from salt to send a custom

271
00:10:07,279 --> 00:10:10,800
event using the tag

272
00:10:11,279 --> 00:10:15,040
so this is great but now what what would

273
00:10:13,839 --> 00:10:16,959
we do with this

274
00:10:15,040 --> 00:10:18,959
sending events and receiving events

275
00:10:16,959 --> 00:10:22,000
using salt

276
00:10:18,959 --> 00:10:23,839
so we have the reactor system salt's

277
00:10:22,000 --> 00:10:26,160
reactor system gives off the ability to

278
00:10:23,839 --> 00:10:27,680
trigger actions in response to an event

279
00:10:26,160 --> 00:10:29,760
it's a similar interface to watching

280
00:10:27,680 --> 00:10:31,839
salts event bus for invent tags

281
00:10:29,760 --> 00:10:35,680
that match a given pattern and then

282
00:10:31,839 --> 00:10:35,680
running one or more commands in response

283
00:10:36,160 --> 00:10:40,079
excuse me the system binds sls files to

284
00:10:38,480 --> 00:10:42,240
event tags on the master

285
00:10:40,079 --> 00:10:43,920
these sls files then define your

286
00:10:42,240 --> 00:10:45,360
reactions

287
00:10:43,920 --> 00:10:47,040
this means that the reactor system has

288
00:10:45,360 --> 00:10:49,040
two parts first the

289
00:10:47,040 --> 00:10:50,480
reactor option needs to be set in the

290
00:10:49,040 --> 00:10:52,640
master configuration file

291
00:10:50,480 --> 00:10:53,920
the reactor option allows for event tags

292
00:10:52,640 --> 00:10:56,880
to be associated with sls

293
00:10:53,920 --> 00:10:57,519
reaction files second the reaction files

294
00:10:56,880 --> 00:11:00,320
use high

295
00:10:57,519 --> 00:11:03,760
data using the salt system state system

296
00:11:00,320 --> 00:11:05,600
to define reactions to be executed

297
00:11:03,760 --> 00:11:08,240
so just a couple of types of reactions

298
00:11:05,600 --> 00:11:08,240
that we can send

299
00:11:08,800 --> 00:11:12,399
so we have local reactions which are

300
00:11:10,560 --> 00:11:13,680
reactions that run a remote execution

301
00:11:12,399 --> 00:11:16,640
function

302
00:11:13,680 --> 00:11:18,160
based on remote execution based remote

303
00:11:16,640 --> 00:11:19,600
execution function on the targeted

304
00:11:18,160 --> 00:11:21,519
minion

305
00:11:19,600 --> 00:11:23,279
we also run the reactions which are

306
00:11:21,519 --> 00:11:25,519
reactions to execute a runner command

307
00:11:23,279 --> 00:11:26,880
which would be on the mount salt master

308
00:11:25,519 --> 00:11:28,640
and we have wheel commands which are

309
00:11:26,880 --> 00:11:30,000
reactions that execute wheel function on

310
00:11:28,640 --> 00:11:31,519
the master

311
00:11:30,000 --> 00:11:33,680
and then caller reactions there are

312
00:11:31,519 --> 00:11:37,279
reactions that run remote execution

313
00:11:33,680 --> 00:11:37,279
functions on a masterless minion

314
00:11:37,839 --> 00:11:42,399
so here's our typical example of a

315
00:11:40,720 --> 00:11:45,760
reactor configuration

316
00:11:42,399 --> 00:11:46,079
so it's uh all salt configurations are

317
00:11:45,760 --> 00:11:48,959
done

318
00:11:46,079 --> 00:11:50,719
in just basic gamma um so we have a

319
00:11:48,959 --> 00:11:53,119
reactor config

320
00:11:50,720 --> 00:11:54,720
defined here and we have some events so

321
00:11:53,120 --> 00:11:55,920
in this case we have assault minion

322
00:11:54,720 --> 00:11:58,079
slash star

323
00:11:55,920 --> 00:11:59,599
start event so this will match on any

324
00:11:58,079 --> 00:12:01,279
minion that starts up

325
00:11:59,600 --> 00:12:04,480
any time the minion starts up it'll go

326
00:12:01,279 --> 00:12:06,000
ahead and run these reactor files

327
00:12:04,480 --> 00:12:08,399
and it runs them sequentially so it'll

328
00:12:06,000 --> 00:12:10,880
run the salt.sls

329
00:12:08,399 --> 00:12:12,480
state file as well and then be monitored

330
00:12:10,880 --> 00:12:13,920
sls file

331
00:12:12,480 --> 00:12:16,399
we also have some cloud events so

332
00:12:13,920 --> 00:12:18,560
anytime this uh the salt event bus the

333
00:12:16,399 --> 00:12:22,320
master sees the salt cloud

334
00:12:18,560 --> 00:12:23,920
star destroyed event it will run the

335
00:12:22,320 --> 00:12:25,519
all of the commands all of the state

336
00:12:23,920 --> 00:12:29,680
files are in salt

337
00:12:25,519 --> 00:12:31,120
srv reactor destroy all the sls files

338
00:12:29,680 --> 00:12:38,000
and there's our custom tag there that we

339
00:12:31,120 --> 00:12:39,600
defined a couple slides ago

340
00:12:38,000 --> 00:12:41,040
and then here's a reactor file so in

341
00:12:39,600 --> 00:12:43,680
this case we are

342
00:12:41,040 --> 00:12:44,880
running the we want to do a state apply

343
00:12:43,680 --> 00:12:47,760
um

344
00:12:44,880 --> 00:12:49,120
which is a high state and we want to run

345
00:12:47,760 --> 00:12:52,319
it on the

346
00:12:49,120 --> 00:12:53,360
the the minion that was part of the

347
00:12:52,320 --> 00:12:55,279
event system

348
00:12:53,360 --> 00:12:58,079
or part of the event that was sent so

349
00:12:55,279 --> 00:12:58,079
that would be the id

350
00:12:59,760 --> 00:13:03,279
so reactor files are have limited access

351
00:13:02,720 --> 00:13:05,600
to

352
00:13:03,279 --> 00:13:07,680
minimal ginger contacts as well as

353
00:13:05,600 --> 00:13:10,240
grains and pillar are not available

354
00:13:07,680 --> 00:13:13,920
the salt object is available by calling

355
00:13:10,240 --> 00:13:13,920
remote execution and runner functions

356
00:13:14,880 --> 00:13:18,880
so we can do some basic monitoring using

357
00:13:16,720 --> 00:13:21,920
this

358
00:13:18,880 --> 00:13:23,920
so here we have a a reactor system that

359
00:13:21,920 --> 00:13:24,719
is looking for the event monitor slash

360
00:13:23,920 --> 00:13:27,599
restart

361
00:13:24,720 --> 00:13:28,160
service and when we see that we want to

362
00:13:27,600 --> 00:13:30,959
run

363
00:13:28,160 --> 00:13:32,839
the uh the reactor file restart

364
00:13:30,959 --> 00:13:35,599
underscore service in the reactor

365
00:13:32,839 --> 00:13:38,160
directory

366
00:13:35,600 --> 00:13:40,560
so if we fire an event on the master

367
00:13:38,160 --> 00:13:43,680
that says solve call event.send

368
00:13:40,560 --> 00:13:44,959
monitor restart service id is the the

369
00:13:43,680 --> 00:13:46,399
minion that we want to target in this

370
00:13:44,959 --> 00:13:49,439
case web server and the service is

371
00:13:46,399 --> 00:13:52,000
apache 2.

372
00:13:49,440 --> 00:13:53,279
within that state file that reactor file

373
00:13:52,000 --> 00:13:56,079
if we define

374
00:13:53,279 --> 00:13:57,040
start and then using some jinja data

375
00:13:56,079 --> 00:14:00,239
with the

376
00:13:57,040 --> 00:14:01,519
service name local.service.start and

377
00:14:00,240 --> 00:14:03,519
then the target

378
00:14:01,519 --> 00:14:07,360
this will cause the service on the

379
00:14:03,519 --> 00:14:07,360
targeted minion to go ahead and restart

380
00:14:13,680 --> 00:14:17,040
here's a slightly more involved example

381
00:14:16,720 --> 00:14:20,720
of

382
00:14:17,040 --> 00:14:23,519
the previous slide in this case we are

383
00:14:20,720 --> 00:14:24,560
telling it what uh we're passing some

384
00:14:23,519 --> 00:14:27,600
pillar data

385
00:14:24,560 --> 00:14:29,518
to give it the the actual

386
00:14:27,600 --> 00:14:30,880
information that we want the server name

387
00:14:29,519 --> 00:14:33,600
and the uh

388
00:14:30,880 --> 00:14:33,600
the service name

389
00:14:35,600 --> 00:14:39,519
and then within that state file we can

390
00:14:37,519 --> 00:14:42,880
reference those pillar data

391
00:14:39,519 --> 00:14:46,320
values and

392
00:14:42,880 --> 00:14:48,160
do a little more uh involved steps

393
00:14:46,320 --> 00:14:49,920
um as well as restarting the service but

394
00:14:48,160 --> 00:14:50,399
also sending a slack message just saying

395
00:14:49,920 --> 00:14:52,000
like

396
00:14:50,399 --> 00:14:55,279
whoever's on call like hey i went ahead

397
00:14:52,000 --> 00:14:55,279
and restarted this service for you

398
00:14:55,760 --> 00:14:59,199
so the next thing we want to look at is

399
00:14:58,160 --> 00:15:00,800
beacons

400
00:14:59,199 --> 00:15:02,880
so beacons let you use the salt event

401
00:15:00,800 --> 00:15:05,519
this salt event system to monitor

402
00:15:02,880 --> 00:15:07,120
non-salt sub processes the beacon system

403
00:15:05,519 --> 00:15:09,360
allows the minion to hook into the

404
00:15:07,120 --> 00:15:11,360
variety into a variety of system

405
00:15:09,360 --> 00:15:12,639
processes and continually monitor these

406
00:15:11,360 --> 00:15:14,320
processes

407
00:15:12,639 --> 00:15:16,480
when monitored activity occurs in the

408
00:15:14,320 --> 00:15:18,000
system process an event is sent on the

409
00:15:16,480 --> 00:15:20,399
assault event bus that can be used to

410
00:15:18,000 --> 00:15:23,440
trigger a reactor

411
00:15:20,399 --> 00:15:25,120
so the available beacons that we have

412
00:15:23,440 --> 00:15:28,079
so we have ones for monitoring file

413
00:15:25,120 --> 00:15:31,120
system changes as well as system load

414
00:15:28,079 --> 00:15:34,000
service status finance

415
00:15:31,120 --> 00:15:34,000
okay i'll go fast

416
00:15:34,240 --> 00:15:38,480
shell activity such as user login

417
00:15:36,000 --> 00:15:40,639
network disk usage

418
00:15:38,480 --> 00:15:42,320
and a new one that's available in our

419
00:15:40,639 --> 00:15:44,480
our upcoming neon release

420
00:15:42,320 --> 00:15:45,600
is one that can monitor uh certificates

421
00:15:44,480 --> 00:15:48,800
um so you can monitor

422
00:15:45,600 --> 00:15:49,199
like your ssl certificates and uh do

423
00:15:48,800 --> 00:15:52,240
like

424
00:15:49,199 --> 00:15:52,240
regeneration of those

425
00:15:52,399 --> 00:15:55,839
so here's an example of a basic beacon

426
00:15:55,199 --> 00:15:58,639
config

427
00:15:55,839 --> 00:15:59,680
um so here we're we're using um again

428
00:15:58,639 --> 00:16:02,320
basic yaml

429
00:15:59,680 --> 00:16:04,800
um beacons and we're we're monitoring a

430
00:16:02,320 --> 00:16:08,480
service in this case apache 2.

431
00:16:04,800 --> 00:16:10,800
we want to do only on changes so if

432
00:16:08,480 --> 00:16:12,079
uh it monitors and it sees it okay it's

433
00:16:10,800 --> 00:16:15,120
running and then it watch

434
00:16:12,079 --> 00:16:18,719
sees it stop it will only

435
00:16:15,120 --> 00:16:21,360
uh fire that event on that um

436
00:16:18,720 --> 00:16:22,880
on that case and only if the the pit the

437
00:16:21,360 --> 00:16:27,519
apache tube hit is still

438
00:16:22,880 --> 00:16:27,519
existing in the uh that directory

439
00:16:28,160 --> 00:16:31,759
so here's the event that we would see

440
00:16:32,800 --> 00:16:37,519
when that beacon fires so it looks very

441
00:16:35,600 --> 00:16:39,920
similar to the events that we saw before

442
00:16:37,519 --> 00:16:41,920
it's uh it has a tag in this case salt

443
00:16:39,920 --> 00:16:44,160
beacon minion service apache ii

444
00:16:41,920 --> 00:16:45,120
uh the id where the the event happened

445
00:16:44,160 --> 00:16:47,680
was minion

446
00:16:45,120 --> 00:16:49,360
uh the service name that triggered the

447
00:16:47,680 --> 00:16:53,439
event was apache two

448
00:16:49,360 --> 00:16:53,440
and apache 2 is running as false

449
00:16:53,519 --> 00:16:58,560
so then going back to our reactor we can

450
00:16:56,399 --> 00:17:01,680
have the reactor react to this event and

451
00:16:58,560 --> 00:17:03,758
go ahead and restart that service

452
00:17:01,680 --> 00:17:05,119
so building on the the previous example

453
00:17:03,759 --> 00:17:07,199
that we had

454
00:17:05,119 --> 00:17:08,958
with the reactor file we pulled the

455
00:17:07,199 --> 00:17:10,240
service name out of the data that we get

456
00:17:08,959 --> 00:17:13,600
from the event

457
00:17:10,240 --> 00:17:16,880
and then using some jinja we generate

458
00:17:13,599 --> 00:17:20,159
a a state run passing in the the data

459
00:17:16,880 --> 00:17:20,160
that we pulled from pillar

460
00:17:20,799 --> 00:17:24,959
and then run the uh the reactor file so

461
00:17:23,760 --> 00:17:27,199
very similar to before

462
00:17:24,959 --> 00:17:28,559
except this time we're pulling it out of

463
00:17:27,199 --> 00:17:29,919
pillar we're looking to see if the

464
00:17:28,559 --> 00:17:32,639
service was running or not

465
00:17:29,919 --> 00:17:35,919
and if it was then we restart it and

466
00:17:32,640 --> 00:17:35,919
then we send that slack message

467
00:17:36,960 --> 00:17:42,640
uh do we have time for questions one

468
00:17:39,760 --> 00:17:44,799
question two questions

469
00:17:42,640 --> 00:17:45,679
who's got the slide thingy okay i'm just

470
00:17:44,799 --> 00:17:47,840
gonna assume yes

471
00:17:45,679 --> 00:17:50,880
does anyone have any questions two

472
00:17:47,840 --> 00:18:01,840
minutes any questions

473
00:17:50,880 --> 00:18:01,840
way in the back

474
00:18:13,120 --> 00:18:16,320
to not oh so the question i think was

475
00:18:15,760 --> 00:18:19,679
like if

476
00:18:16,320 --> 00:18:21,600
if recent servers doesn't help

477
00:18:19,679 --> 00:18:23,360
if restarting the service from salt

478
00:18:21,600 --> 00:18:23,760
doesn't help it get back online how do

479
00:18:23,360 --> 00:18:27,039
you tell

480
00:18:23,760 --> 00:18:29,520
salt to to not

481
00:18:27,039 --> 00:18:30,640
not do it um so in that case what i

482
00:18:29,520 --> 00:18:34,879
would do

483
00:18:30,640 --> 00:18:34,880
um is

484
00:18:36,320 --> 00:18:39,200
i'd have to double check on this but i

485
00:18:37,760 --> 00:18:40,720
believe there's a there's a way to set a

486
00:18:39,200 --> 00:18:42,320
threshold of how many

487
00:18:40,720 --> 00:18:44,480
how many times or how many events it

488
00:18:42,320 --> 00:18:47,120
gets before it tries to restart

489
00:18:44,480 --> 00:18:48,480
or how many times it tries to restart so

490
00:18:47,120 --> 00:18:49,520
you could set that threshold and just

491
00:18:48,480 --> 00:18:52,400
say like

492
00:18:49,520 --> 00:18:52,720
if it's if it's not fixed within it's

493
00:18:52,400 --> 00:18:54,559
not

494
00:18:52,720 --> 00:18:56,000
back and running back in like three

495
00:18:54,559 --> 00:18:58,639
attempts then just quit

496
00:18:56,000 --> 00:18:58,640
and stop

497
00:19:00,559 --> 00:19:03,440
any other questions

498
00:19:04,080 --> 00:19:11,840
nope okay thank you

499
00:19:16,640 --> 00:19:18,720
you

