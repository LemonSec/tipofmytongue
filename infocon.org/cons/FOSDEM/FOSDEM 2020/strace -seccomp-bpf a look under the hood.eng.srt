1
00:00:05,040 --> 00:00:07,919
okay hi everyone

2
00:00:06,240 --> 00:00:09,280
i'm paul shinyu and today i'm going to

3
00:00:07,919 --> 00:00:12,320
talk about a new option of

4
00:00:09,280 --> 00:00:14,000
estress second bpf so if you've been

5
00:00:12,320 --> 00:00:15,120
staying in this room for the last two

6
00:00:14,000 --> 00:00:17,440
talks you've already

7
00:00:15,120 --> 00:00:19,119
heard about second vpf but in this talk

8
00:00:17,440 --> 00:00:20,000
i'm going to go into the details of how

9
00:00:19,119 --> 00:00:23,359
it works

10
00:00:20,000 --> 00:00:25,279
behind the hood under the hood

11
00:00:23,359 --> 00:00:26,880
so as an overview of this talk i'm going

12
00:00:25,279 --> 00:00:29,840
to first go into

13
00:00:26,880 --> 00:00:30,240
explaining how s trace uses b trace to

14
00:00:29,840 --> 00:00:33,280
stop

15
00:00:30,240 --> 00:00:34,239
at c schools then i'm going to explain

16
00:00:33,280 --> 00:00:36,880
oh it uses

17
00:00:34,239 --> 00:00:37,440
a second vpf to stop only at ciscos of

18
00:00:36,880 --> 00:00:39,920
interest

19
00:00:37,440 --> 00:00:41,599
so that's what the ocean is doing and

20
00:00:39,920 --> 00:00:42,960
finally we're going to see

21
00:00:41,600 --> 00:00:45,280
while we're talking about this we're

22
00:00:42,960 --> 00:00:46,719
going to see the two cbpf algorithms

23
00:00:45,280 --> 00:00:50,879
that are being used

24
00:00:46,719 --> 00:00:50,879
to decide on which ciscos to stop

25
00:00:51,120 --> 00:00:56,239
so let's try the default behavior so at

26
00:00:53,920 --> 00:00:57,840
the top of the side you've got the

27
00:00:56,239 --> 00:00:59,519
thread that you're trying to trace the

28
00:00:57,840 --> 00:01:02,480
tracey and estuaries

29
00:00:59,520 --> 00:01:03,440
so when you start tracing this uh tracy

30
00:01:02,480 --> 00:01:04,798
process

31
00:01:03,440 --> 00:01:07,119
um first it's going to do some

32
00:01:04,799 --> 00:01:09,680
initialization which is regard with

33
00:01:07,119 --> 00:01:11,760
ptrace and then when it's ready to start

34
00:01:09,680 --> 00:01:13,119
the tracy it's going to start it with a

35
00:01:11,760 --> 00:01:15,360
ptrace command known as

36
00:01:13,119 --> 00:01:16,320
petrois cisco so what this command is

37
00:01:15,360 --> 00:01:18,960
going to do is

38
00:01:16,320 --> 00:01:20,399
stop the tracey at each cisco entry and

39
00:01:18,960 --> 00:01:23,119
exit

40
00:01:20,400 --> 00:01:24,560
so for instance if my tracy starts it's

41
00:01:23,119 --> 00:01:25,680
going to do some processing in user

42
00:01:24,560 --> 00:01:27,520
space for instance

43
00:01:25,680 --> 00:01:30,240
and then when it gets into the kernel

44
00:01:27,520 --> 00:01:33,280
mode with a cisco it's going to

45
00:01:30,240 --> 00:01:35,520
p trace is going to stop the tracy stop

46
00:01:33,280 --> 00:01:37,920
it with a cisco entry stop event

47
00:01:35,520 --> 00:01:39,119
and then give control to s tracing user

48
00:01:37,920 --> 00:01:42,640
space

49
00:01:39,119 --> 00:01:44,479
so then once straight is done

50
00:01:42,640 --> 00:01:46,560
processing this cisco entry it's going

51
00:01:44,479 --> 00:01:47,840
to restart it again with bitrate cisco

52
00:01:46,560 --> 00:01:50,799
to stop at this cisco

53
00:01:47,840 --> 00:01:51,520
exit this time so it's going to keep

54
00:01:50,799 --> 00:01:53,360
doing this

55
00:01:51,520 --> 00:01:55,360
so every time you stop you have two

56
00:01:53,360 --> 00:01:57,600
contact switches to and from

57
00:01:55,360 --> 00:02:00,000
extras and user space and then of course

58
00:01:57,600 --> 00:02:03,039
two stops per cisco

59
00:02:00,000 --> 00:02:04,240
so what's the issue here so the the

60
00:02:03,040 --> 00:02:07,680
issue

61
00:02:04,240 --> 00:02:10,000
comes to light if you think about the

62
00:02:07,680 --> 00:02:10,800
trace qualifier so the trace qualifier

63
00:02:10,000 --> 00:02:12,800
is a way to

64
00:02:10,800 --> 00:02:14,319
select which ciscos you'd like to see so

65
00:02:12,800 --> 00:02:15,360
for instance if you only want to see the

66
00:02:14,319 --> 00:02:17,679
second cisco

67
00:02:15,360 --> 00:02:18,640
you're going to do dashi trace equal

68
00:02:17,680 --> 00:02:21,440
ciscom

69
00:02:18,640 --> 00:02:22,000
you can do the same with dashes icon and

70
00:02:21,440 --> 00:02:25,359
then you've got

71
00:02:22,000 --> 00:02:27,599
some other aliases for instance for

72
00:02:25,360 --> 00:02:28,560
all of the network related ciscos such

73
00:02:27,599 --> 00:02:31,920
as percentage

74
00:02:28,560 --> 00:02:34,319
network however when you're doing this

75
00:02:31,920 --> 00:02:36,559
it's still going to stop twice per cisco

76
00:02:34,319 --> 00:02:37,280
at all ciscos so even if you don't want

77
00:02:36,560 --> 00:02:39,040
to see the

78
00:02:37,280 --> 00:02:42,000
read cisco for instance it's still going

79
00:02:39,040 --> 00:02:44,239
to stop at all of the real css calls

80
00:02:42,000 --> 00:02:46,959
so as i said this involves two contact

81
00:02:44,239 --> 00:02:48,879
switches it's very very expensive

82
00:02:46,959 --> 00:02:51,599
so we have seen preview in previous

83
00:02:48,879 --> 00:02:53,920
talks some examples with dd so that's

84
00:02:51,599 --> 00:02:55,200
probably one of the worst cases but if

85
00:02:53,920 --> 00:02:56,480
you're trying to do for instance a

86
00:02:55,200 --> 00:02:58,799
compiler linux kernel

87
00:02:56,480 --> 00:02:59,760
on my old computer it took about 12

88
00:02:58,800 --> 00:03:01,280
minutes

89
00:02:59,760 --> 00:03:02,959
if i'm trying to do the same with s

90
00:03:01,280 --> 00:03:04,720
trace even if i'm trying to see only a

91
00:03:02,959 --> 00:03:05,599
single cisco so the connect one in this

92
00:03:04,720 --> 00:03:08,640
case

93
00:03:05,599 --> 00:03:10,480
it's going to take 24 minutes so double

94
00:03:08,640 --> 00:03:12,159
that

95
00:03:10,480 --> 00:03:13,920
so we need a way to tell the kernel at

96
00:03:12,159 --> 00:03:15,519
which these calls we want to stop

97
00:03:13,920 --> 00:03:17,359
and we need to do this in the kernel

98
00:03:15,519 --> 00:03:19,280
because obviously it's the kernel it's

99
00:03:17,360 --> 00:03:21,120
that is going to decide when to stop

100
00:03:19,280 --> 00:03:22,879
if we do this in user space it's too

101
00:03:21,120 --> 00:03:24,239
late we're already stopped

102
00:03:22,879 --> 00:03:26,720
so we need a way to do this in the

103
00:03:24,239 --> 00:03:27,920
kernel so from the name of the option

104
00:03:26,720 --> 00:03:30,640
you've probably guessed that we're going

105
00:03:27,920 --> 00:03:34,480
to use second bpf

106
00:03:30,640 --> 00:03:36,958
so second is a way to filter cisco's in

107
00:03:34,480 --> 00:03:39,440
the kernel it's meant for sandboxing

108
00:03:36,959 --> 00:03:41,040
one of the first users in particular of

109
00:03:39,440 --> 00:03:44,239
second bpf

110
00:03:41,040 --> 00:03:46,000
is the chrome sun box so second bpf

111
00:03:44,239 --> 00:03:47,440
allows you to choose which syscalls you

112
00:03:46,000 --> 00:03:49,120
want to filter so which is called you

113
00:03:47,440 --> 00:03:51,680
want to allow and what you want to do

114
00:03:49,120 --> 00:03:51,680
otherwise

115
00:03:52,159 --> 00:03:56,798
as a side note second bpf is the second

116
00:03:54,879 --> 00:03:57,439
is the second user of bpf in the linux

117
00:03:56,799 --> 00:03:59,360
kernel

118
00:03:57,439 --> 00:04:00,640
after the socket filters but before all

119
00:03:59,360 --> 00:04:03,599
of the other

120
00:04:00,640 --> 00:04:04,480
ebpf stuff you've probably heard about

121
00:04:03,599 --> 00:04:07,359
and it's

122
00:04:04,480 --> 00:04:09,518
cbpf in second bpf it's not ebpf so it's

123
00:04:07,360 --> 00:04:11,840
very much limited compared to what ebpf

124
00:04:09,519 --> 00:04:14,000
can do

125
00:04:11,840 --> 00:04:15,200
okay so one example if you want to allow

126
00:04:14,000 --> 00:04:18,000
process to

127
00:04:15,200 --> 00:04:19,519
do open and open at cisco's um but you

128
00:04:18,000 --> 00:04:20,160
want to kill it if it tries anything

129
00:04:19,519 --> 00:04:21,918
else

130
00:04:20,160 --> 00:04:24,320
you're going to load this small bpf

131
00:04:21,918 --> 00:04:27,039
program cppr program in the kernel

132
00:04:24,320 --> 00:04:28,400
so the third line is actually loading

133
00:04:27,040 --> 00:04:31,280
the cisco number

134
00:04:28,400 --> 00:04:33,679
so it's the nr field of second data then

135
00:04:31,280 --> 00:04:35,679
you're going to compare that with 257

136
00:04:33,680 --> 00:04:36,320
which is open at and then two which is

137
00:04:35,680 --> 00:04:39,040
open

138
00:04:36,320 --> 00:04:40,639
and that's only true on the x8664

139
00:04:39,040 --> 00:04:42,560
architecture

140
00:04:40,639 --> 00:04:44,240
once you've done that you're going to

141
00:04:42,560 --> 00:04:46,720
jump either to bad a good so

142
00:04:44,240 --> 00:04:48,400
bad would be we're killing this thread

143
00:04:46,720 --> 00:04:50,160
and good is simply we're

144
00:04:48,400 --> 00:04:52,479
allowing this cisco so we're just going

145
00:04:50,160 --> 00:04:54,320
to do the usual processing of the cisco

146
00:04:52,479 --> 00:04:56,000
in the car

147
00:04:54,320 --> 00:04:57,360
now if you want to do pretty much the

148
00:04:56,000 --> 00:04:58,960
same thing but this time you want to

149
00:04:57,360 --> 00:05:01,120
allow specific

150
00:04:58,960 --> 00:05:02,560
accesses you want to allow processes to

151
00:05:01,120 --> 00:05:04,080
open specific files

152
00:05:02,560 --> 00:05:05,680
you're going to need help from user

153
00:05:04,080 --> 00:05:07,758
space because you need to go and look

154
00:05:05,680 --> 00:05:09,520
into the file files for instance

155
00:05:07,759 --> 00:05:11,280
to take your decision so in order to do

156
00:05:09,520 --> 00:05:11,919
this you're going to change slightly the

157
00:05:11,280 --> 00:05:14,000
program

158
00:05:11,919 --> 00:05:16,080
this time instead of returning right or

159
00:05:14,000 --> 00:05:18,080
low to continue processing the cisco

160
00:05:16,080 --> 00:05:20,320
you're going to return red trace

161
00:05:18,080 --> 00:05:22,000
and in this case a second is going to

162
00:05:20,320 --> 00:05:24,479
according to p trace to stop

163
00:05:22,000 --> 00:05:25,919
your your tracy your process and it's

164
00:05:24,479 --> 00:05:28,479
going to give control to a

165
00:05:25,919 --> 00:05:28,960
p tracer in user space so in our case it

166
00:05:28,479 --> 00:05:32,639
might be

167
00:05:28,960 --> 00:05:36,080
stories okay so as trace

168
00:05:32,639 --> 00:05:36,560
second vpf so the the behavior changes a

169
00:05:36,080 --> 00:05:38,800
little

170
00:05:36,560 --> 00:05:40,720
uh so if we take the same scheme as

171
00:05:38,800 --> 00:05:41,360
before we're going to start in user

172
00:05:40,720 --> 00:05:43,759
space

173
00:05:41,360 --> 00:05:45,199
s trace is doing some initialization and

174
00:05:43,759 --> 00:05:46,639
when it's done it's going to start the

175
00:05:45,199 --> 00:05:49,680
tracey this time with

176
00:05:46,639 --> 00:05:51,120
the ptrace count command so what this is

177
00:05:49,680 --> 00:05:53,360
telling is simply that

178
00:05:51,120 --> 00:05:55,600
the tracy is supposed to behave as usual

179
00:05:53,360 --> 00:05:58,639
it's not going to stop at any ciscos

180
00:05:55,600 --> 00:06:02,400
it should just process the ciscos and do

181
00:05:58,639 --> 00:06:05,360
whatever it does so the traits he can do

182
00:06:02,400 --> 00:06:06,000
cisco's can do some processing into

183
00:06:05,360 --> 00:06:07,680
space it can

184
00:06:06,000 --> 00:06:09,520
do cisco's if we're not interested in

185
00:06:07,680 --> 00:06:10,800
the syscalls we're still going to have

186
00:06:09,520 --> 00:06:12,960
the bpf program

187
00:06:10,800 --> 00:06:14,960
that is going to run to determine if the

188
00:06:12,960 --> 00:06:16,479
cisco is of interest or not

189
00:06:14,960 --> 00:06:18,560
if it's not of interest it's simply

190
00:06:16,479 --> 00:06:21,039
going to load the cisco

191
00:06:18,560 --> 00:06:22,479
and let it go so we can do some

192
00:06:21,039 --> 00:06:24,240
processing like this

193
00:06:22,479 --> 00:06:25,599
but once we get in the kernel with the

194
00:06:24,240 --> 00:06:28,000
cisco of interest

195
00:06:25,600 --> 00:06:29,680
the cbpi program is going to return

196
00:06:28,000 --> 00:06:31,280
right red trace

197
00:06:29,680 --> 00:06:33,120
and in this case we're going to have a

198
00:06:31,280 --> 00:06:35,119
second stop so it's a different event

199
00:06:33,120 --> 00:06:37,919
from the previous stops we had

200
00:06:35,120 --> 00:06:38,639
um and this is going to give control to

201
00:06:37,919 --> 00:06:42,639
s-trace

202
00:06:38,639 --> 00:06:42,639
in user space with the contact switch

203
00:06:42,720 --> 00:06:46,000
once uh h-trace is done doing the

204
00:06:44,560 --> 00:06:48,160
processing for this cisco

205
00:06:46,000 --> 00:06:50,000
entry it's going to restart the process

206
00:06:48,160 --> 00:06:50,880
with ptrace cisco and the reason we

207
00:06:50,000 --> 00:06:53,759
can't use

208
00:06:50,880 --> 00:06:55,599
ptrace continue for this for to go to

209
00:06:53,759 --> 00:06:58,240
the exit of the cisco is simply because

210
00:06:55,599 --> 00:07:00,319
a second bpf does not run on cisco

211
00:06:58,240 --> 00:07:02,000
exits so second ppf is meant for

212
00:07:00,319 --> 00:07:04,400
sandboxing so you usually want

213
00:07:02,000 --> 00:07:05,919
to limit which cisco entries you can do

214
00:07:04,400 --> 00:07:08,400
and not which cisco exits

215
00:07:05,919 --> 00:07:08,400
you can do

216
00:07:09,360 --> 00:07:12,400
okay so it's going to keep doing this

217
00:07:11,759 --> 00:07:14,240
once we

218
00:07:12,400 --> 00:07:16,080
exit the cisco it's going to restart it

219
00:07:14,240 --> 00:07:17,520
with bitrate continue again because we

220
00:07:16,080 --> 00:07:20,159
know that we can stop with

221
00:07:17,520 --> 00:07:22,000
the second bpf program at the next entry

222
00:07:20,160 --> 00:07:24,800
to a cisco

223
00:07:22,000 --> 00:07:25,680
there's one caveat to this however in

224
00:07:24,800 --> 00:07:29,120
linux

225
00:07:25,680 --> 00:07:29,599
before linux 4.8 the second stop

226
00:07:29,120 --> 00:07:31,599
happened

227
00:07:29,599 --> 00:07:32,639
before the sixth cisco entry so what

228
00:07:31,599 --> 00:07:34,719
that means is that

229
00:07:32,639 --> 00:07:35,680
uh we have to we can do the same as

230
00:07:34,720 --> 00:07:38,080
before so we can

231
00:07:35,680 --> 00:07:38,800
restart it with pictures continue uh at

232
00:07:38,080 --> 00:07:41,039
first

233
00:07:38,800 --> 00:07:42,800
but then once once we reach the second

234
00:07:41,039 --> 00:07:45,120
stop we have to restart it with

235
00:07:42,800 --> 00:07:46,960
ptrace cisco to get to the entry and

236
00:07:45,120 --> 00:07:50,639
then again to get to the exit

237
00:07:46,960 --> 00:07:53,440
and because of that in linux before 4.8

238
00:07:50,639 --> 00:07:54,000
we have two stops per ciscos instead of

239
00:07:53,440 --> 00:07:59,520
one

240
00:07:54,000 --> 00:08:02,800
when the second vpf option is enabled

241
00:07:59,520 --> 00:08:04,799
okay so what about the cbpf programs

242
00:08:02,800 --> 00:08:06,240
because i talked about how we

243
00:08:04,800 --> 00:08:08,080
changed the way we stopped the process

244
00:08:06,240 --> 00:08:10,960
but i haven't talked about the

245
00:08:08,080 --> 00:08:12,960
cbpr program itself so one first naive

246
00:08:10,960 --> 00:08:13,440
way to do it would be to do a linear

247
00:08:12,960 --> 00:08:16,080
search

248
00:08:13,440 --> 00:08:17,280
to all of the different cisco numbers

249
00:08:16,080 --> 00:08:19,039
we're interested in

250
00:08:17,280 --> 00:08:21,440
so for instance here if i'm interested

251
00:08:19,039 --> 00:08:23,039
in read write open close start and f

252
00:08:21,440 --> 00:08:24,000
start i'm going to go over all of the

253
00:08:23,039 --> 00:08:27,599
different numbers

254
00:08:24,000 --> 00:08:29,440
and if if the cisco numbers or the

255
00:08:27,599 --> 00:08:31,440
nr field of second data matches one of

256
00:08:29,440 --> 00:08:34,479
these i'm going to jump to trace

257
00:08:31,440 --> 00:08:36,000
and return the uh return code that we

258
00:08:34,479 --> 00:08:39,120
need

259
00:08:36,000 --> 00:08:42,240
so is this optimal obviously not

260
00:08:39,120 --> 00:08:42,880
so this is o of n if we want to improve

261
00:08:42,240 --> 00:08:45,120
it a little

262
00:08:42,880 --> 00:08:46,640
there's one obvious optimization here we

263
00:08:45,120 --> 00:08:48,720
can simply

264
00:08:46,640 --> 00:08:50,080
optimize a contiguous set of cisco so

265
00:08:48,720 --> 00:08:52,080
for instance i was going

266
00:08:50,080 --> 00:08:54,959
from zero to five i could simply check

267
00:08:52,080 --> 00:08:57,440
that my cisco number is between 0 and 5

268
00:08:54,959 --> 00:08:59,279
and if that's the case i can just jump

269
00:08:57,440 --> 00:09:01,920
to the trace

270
00:08:59,279 --> 00:09:03,519
command so what we're trying to optimize

271
00:09:01,920 --> 00:09:04,319
here is the the size of the program

272
00:09:03,519 --> 00:09:08,080
because

273
00:09:04,320 --> 00:09:10,080
in cbpf instead of ebpf

274
00:09:08,080 --> 00:09:11,120
we're limited in how many instructions

275
00:09:10,080 --> 00:09:13,600
we can have in our

276
00:09:11,120 --> 00:09:14,399
bpf program so we're limited to i think

277
00:09:13,600 --> 00:09:16,880
4k

278
00:09:14,399 --> 00:09:17,680
instructions and therefore we have to

279
00:09:16,880 --> 00:09:19,279
limit

280
00:09:17,680 --> 00:09:20,959
we have to ensure that our programs are

281
00:09:19,279 --> 00:09:22,560
as small as possible because they're

282
00:09:20,959 --> 00:09:23,599
first going to be faster to execute in

283
00:09:22,560 --> 00:09:25,760
most cases but

284
00:09:23,600 --> 00:09:27,440
mostly because we want to ensure that we

285
00:09:25,760 --> 00:09:30,080
can load the bpf form

286
00:09:27,440 --> 00:09:30,080
in the kernel

287
00:09:30,880 --> 00:09:35,279
okay is that the best we can do in some

288
00:09:33,519 --> 00:09:37,360
cases it's still not the best we can do

289
00:09:35,279 --> 00:09:41,279
so what is the worst case of this

290
00:09:37,360 --> 00:09:44,720
if we have some user that is trying to

291
00:09:41,279 --> 00:09:46,480
trace all odd numbered ciscos

292
00:09:44,720 --> 00:09:48,320
we are not going to be able to use this

293
00:09:46,480 --> 00:09:50,080
optimization and we are going to have

294
00:09:48,320 --> 00:09:52,399
a lot of different instructions to

295
00:09:50,080 --> 00:09:54,800
compare the cisco numbers

296
00:09:52,399 --> 00:09:56,080
so what we can do instead is since in

297
00:09:54,800 --> 00:09:59,359
cbpf we have

298
00:09:56,080 --> 00:10:01,040
32-bit bitwise operations we can encode

299
00:09:59,360 --> 00:10:01,440
the cisco numbers that we're interested

300
00:10:01,040 --> 00:10:04,640
in

301
00:10:01,440 --> 00:10:05,600
into 32-bit bit arrays and then we're

302
00:10:04,640 --> 00:10:07,360
going to

303
00:10:05,600 --> 00:10:09,040
go over all of these bit arrays and

304
00:10:07,360 --> 00:10:10,000
compare our cisco number with the

305
00:10:09,040 --> 00:10:12,160
appropriate offset

306
00:10:10,000 --> 00:10:14,800
in the ability so basically here if i

307
00:10:12,160 --> 00:10:16,480
want to trace uh select on ioctl

308
00:10:14,800 --> 00:10:18,160
i'm going to set the the bit

309
00:10:16,480 --> 00:10:19,839
corresponding in the

310
00:10:18,160 --> 00:10:21,760
given bit array so this is the first bit

311
00:10:19,839 --> 00:10:24,200
error in this case because they're

312
00:10:21,760 --> 00:10:25,360
select on ioct i have small number

313
00:10:24,200 --> 00:10:26,880
[Music]

314
00:10:25,360 --> 00:10:28,800
and then we're going to go over all of

315
00:10:26,880 --> 00:10:31,839
the different bit errors

316
00:10:28,800 --> 00:10:32,399
with our bpf program and we're going to

317
00:10:31,839 --> 00:10:34,320
select

318
00:10:32,399 --> 00:10:35,920
the appropriate offset once we reach the

319
00:10:34,320 --> 00:10:37,920
appropriate bitter

320
00:10:35,920 --> 00:10:38,959
and we're going to check if it's to one

321
00:10:37,920 --> 00:10:41,040
or zero

322
00:10:38,959 --> 00:10:42,880
so the reason we can jump directly to

323
00:10:41,040 --> 00:10:45,120
the bit array that we're interested in

324
00:10:42,880 --> 00:10:46,640
is that in cbpf you do not have indirect

325
00:10:45,120 --> 00:10:48,640
jumps so you're

326
00:10:46,640 --> 00:10:50,800
you have to implement your switch case

327
00:10:48,640 --> 00:10:53,519
as an if else and going over all of the

328
00:10:50,800 --> 00:10:53,519
different cases

329
00:10:55,279 --> 00:10:58,320
okay so we compared the two different

330
00:10:56,880 --> 00:11:01,519
algorithms

331
00:10:58,320 --> 00:11:03,440
with different set of ciscos filtered

332
00:11:01,519 --> 00:11:04,959
so the first one is just none and p

333
00:11:03,440 --> 00:11:06,720
trace and

334
00:11:04,959 --> 00:11:08,800
not pictures basically everything except

335
00:11:06,720 --> 00:11:09,279
p trace and then we've got some cases

336
00:11:08,800 --> 00:11:11,920
with

337
00:11:09,279 --> 00:11:13,439
aliases that i mentioned earlier the

338
00:11:11,920 --> 00:11:14,719
last one is just a combination of

339
00:11:13,440 --> 00:11:17,440
different aliases

340
00:11:14,720 --> 00:11:19,600
to get a larger number of ciscos so what

341
00:11:17,440 --> 00:11:21,040
we can see is that in most cases

342
00:11:19,600 --> 00:11:22,880
the linear algorithm with the

343
00:11:21,040 --> 00:11:26,000
optimization i mentioned

344
00:11:22,880 --> 00:11:27,120
is much generates much smaller programs

345
00:11:26,000 --> 00:11:30,240
than the

346
00:11:27,120 --> 00:11:31,839
binary match in some cases however when

347
00:11:30,240 --> 00:11:32,959
we have a large number of cisco in

348
00:11:31,839 --> 00:11:34,880
particular

349
00:11:32,959 --> 00:11:36,079
the binary match is going to give a

350
00:11:34,880 --> 00:11:37,519
better result

351
00:11:36,079 --> 00:11:39,199
so the reason for this is that in the

352
00:11:37,519 --> 00:11:41,279
case of the binary match we have to do

353
00:11:39,200 --> 00:11:43,120
some pre-processing on the cisco number

354
00:11:41,279 --> 00:11:44,800
to get the appropriate offset and then

355
00:11:43,120 --> 00:11:45,600
the military we have to encode all the

356
00:11:44,800 --> 00:11:48,160
dimitaris

357
00:11:45,600 --> 00:11:48,959
so this is more of less consent size

358
00:11:48,160 --> 00:11:50,880
programs

359
00:11:48,959 --> 00:11:52,079
but there is still a lot of processing

360
00:11:50,880 --> 00:11:55,600
to do even if you

361
00:11:52,079 --> 00:11:58,880
have only a single cisco filter

362
00:11:55,600 --> 00:12:01,040
so what we did in asteroids uh is we uh

363
00:11:58,880 --> 00:12:02,399
generate both programs uh when we start

364
00:12:01,040 --> 00:12:03,839
a strategy and then we're going to

365
00:12:02,399 --> 00:12:05,440
decide based on

366
00:12:03,839 --> 00:12:07,040
which is the smallest we're going to

367
00:12:05,440 --> 00:12:08,839
load the smallest in the kernel

368
00:12:07,040 --> 00:12:11,120
in order to get the best of both

369
00:12:08,839 --> 00:12:16,160
approaches

370
00:12:11,120 --> 00:12:18,160
okay some limitations of this option

371
00:12:16,160 --> 00:12:19,600
so the first limitation which dimitri

372
00:12:18,160 --> 00:12:22,639
already mentioned is that

373
00:12:19,600 --> 00:12:25,120
a second bpf implies dash f so

374
00:12:22,639 --> 00:12:26,320
dash f or stress dash f means that

375
00:12:25,120 --> 00:12:27,839
you're going to trace all of the

376
00:12:26,320 --> 00:12:30,000
children of your

377
00:12:27,839 --> 00:12:30,880
trace process when they fork when they

378
00:12:30,000 --> 00:12:33,600
clone

379
00:12:30,880 --> 00:12:34,880
and so the the reason for that is that

380
00:12:33,600 --> 00:12:37,839
in the kernel

381
00:12:34,880 --> 00:12:39,200
the children inherit a second filter

382
00:12:37,839 --> 00:12:41,440
chain of program

383
00:12:39,200 --> 00:12:42,800
from their parents and the way they do

384
00:12:41,440 --> 00:12:44,000
this in the kernel is that they give

385
00:12:42,800 --> 00:12:45,760
simply a reference

386
00:12:44,000 --> 00:12:47,279
to the beginning of the chain to the

387
00:12:45,760 --> 00:12:49,519
children so each children

388
00:12:47,279 --> 00:12:52,720
in the kernel will have a reference to

389
00:12:49,519 --> 00:12:54,800
the second filter chain of the parent

390
00:12:52,720 --> 00:12:56,000
and however if we want so if we have a

391
00:12:54,800 --> 00:12:59,279
chain for instance of

392
00:12:56,000 --> 00:13:01,600
second filters one two three four but

393
00:12:59,279 --> 00:13:02,800
we only want to inherit one two and four

394
00:13:01,600 --> 00:13:06,000
because the third one

395
00:13:02,800 --> 00:13:06,800
is the s trace program the asteroids vpf

396
00:13:06,000 --> 00:13:08,800
program

397
00:13:06,800 --> 00:13:09,920
so we don't want to inherit it for

398
00:13:08,800 --> 00:13:11,279
children

399
00:13:09,920 --> 00:13:12,959
if we want to do this we'll have to

400
00:13:11,279 --> 00:13:15,360
reconstruct the chain to

401
00:13:12,959 --> 00:13:16,160
have one two and four so we want to skip

402
00:13:15,360 --> 00:13:18,320
the third one

403
00:13:16,160 --> 00:13:19,279
and we can't do this with references in

404
00:13:18,320 --> 00:13:21,360
the kernel so

405
00:13:19,279 --> 00:13:22,959
currently there's no good way to do this

406
00:13:21,360 --> 00:13:24,639
except if we make copies

407
00:13:22,959 --> 00:13:26,079
but then there's a lot of hover to

408
00:13:24,639 --> 00:13:28,800
copying the whole chain of

409
00:13:26,079 --> 00:13:28,800
second filters

410
00:13:29,519 --> 00:13:33,040
okay the second limitation of this

411
00:13:30,959 --> 00:13:35,279
option is dash p

412
00:13:33,040 --> 00:13:37,040
so if you want to trace an existing

413
00:13:35,279 --> 00:13:40,320
process you cannot use today

414
00:13:37,040 --> 00:13:42,000
the second bpf option the reason for

415
00:13:40,320 --> 00:13:43,120
that is very simple there's currently no

416
00:13:42,000 --> 00:13:45,440
way to attach

417
00:13:43,120 --> 00:13:46,160
a second bpf program to an already

418
00:13:45,440 --> 00:13:49,279
running

419
00:13:46,160 --> 00:13:50,160
process in the linux kernel um there is

420
00:13:49,279 --> 00:13:52,320
however

421
00:13:50,160 --> 00:13:54,639
uh a way to when you attach a program to

422
00:13:52,320 --> 00:13:56,480
a thread of a group of threads

423
00:13:54,639 --> 00:13:58,480
uh there is a way to synchronize the

424
00:13:56,480 --> 00:14:00,000
second vpf programs across all threads

425
00:13:58,480 --> 00:14:01,440
in the group so maybe there is some

426
00:14:00,000 --> 00:14:04,160
hackish way to do this but

427
00:14:01,440 --> 00:14:04,160
yeah not sure

428
00:14:04,560 --> 00:14:08,000
okay to conclude uh to sum up first uh

429
00:14:07,279 --> 00:14:10,959
the

430
00:14:08,000 --> 00:14:13,279
we've seen that s trace stops at all

431
00:14:10,959 --> 00:14:16,079
syscalls by default and that's very very

432
00:14:13,279 --> 00:14:17,600
expensive because of context switches in

433
00:14:16,079 --> 00:14:19,839
addition we've seen that

434
00:14:17,600 --> 00:14:21,519
the second bpf option when you're using

435
00:14:19,839 --> 00:14:23,760
filters on your c scores

436
00:14:21,519 --> 00:14:25,279
allows you to stop only at c scores of

437
00:14:23,760 --> 00:14:26,959
interest

438
00:14:25,279 --> 00:14:29,040
and we've seen the two different second

439
00:14:26,959 --> 00:14:31,920
bpf algorithms that we're using in s

440
00:14:29,040 --> 00:14:36,319
trace to do this to implement this match

441
00:14:31,920 --> 00:14:38,000
over cisco's there are however some

442
00:14:36,320 --> 00:14:39,920
things that could be improved in the

443
00:14:38,000 --> 00:14:42,160
current implementation that are

444
00:14:39,920 --> 00:14:44,240
pretty straightforward so the first one

445
00:14:42,160 --> 00:14:47,519
is on some architectures you've got

446
00:14:44,240 --> 00:14:49,120
uh system calls like socket call and ipc

447
00:14:47,519 --> 00:14:50,720
which allow you to do

448
00:14:49,120 --> 00:14:52,399
basically all the cisco so you would

449
00:14:50,720 --> 00:14:54,320
have the first argument of circuit call

450
00:14:52,399 --> 00:14:55,120
for instance would tell you which cisco

451
00:14:54,320 --> 00:14:57,360
to actually do

452
00:14:55,120 --> 00:14:58,800
for instance do a connect or maybe

453
00:14:57,360 --> 00:15:00,320
something like this

454
00:14:58,800 --> 00:15:02,560
currently this is not supported in the

455
00:15:00,320 --> 00:15:04,399
cbpf program because you would have to

456
00:15:02,560 --> 00:15:06,079
match on the first argument of the cs

457
00:15:04,399 --> 00:15:07,680
codes you would have to match under

458
00:15:06,079 --> 00:15:09,680
the number that is the first argument of

459
00:15:07,680 --> 00:15:12,160
circuit code for instance

460
00:15:09,680 --> 00:15:12,959
the second thing that could be done is

461
00:15:12,160 --> 00:15:16,480
the

462
00:15:12,959 --> 00:15:18,479
the the s trace dash c option which

463
00:15:16,480 --> 00:15:19,120
currently allows you to print a summary

464
00:15:18,480 --> 00:15:22,079
of

465
00:15:19,120 --> 00:15:24,000
statistics on your your ciscos this is a

466
00:15:22,079 --> 00:15:27,279
perfect use case for ebpf

467
00:15:24,000 --> 00:15:29,279
instead of cbpf because ebpf allows you

468
00:15:27,279 --> 00:15:30,639
to aggregate data in the kernel

469
00:15:29,279 --> 00:15:32,639
and therefore it could allow you to

470
00:15:30,639 --> 00:15:34,639
aggregate statistics for this option to

471
00:15:32,639 --> 00:15:36,000
only print to only send them to the s

472
00:15:34,639 --> 00:15:37,120
trace process at the end so instead of

473
00:15:36,000 --> 00:15:38,800
sending everything

474
00:15:37,120 --> 00:15:41,519
to the stress process and stopping all

475
00:15:38,800 --> 00:15:45,040
the time you could only send

476
00:15:41,519 --> 00:15:45,040
a summary of these statistics

477
00:15:45,680 --> 00:15:49,680
okay so i've been a bit fast so we have

478
00:15:48,079 --> 00:15:52,839
plenty of time for questions

479
00:15:49,680 --> 00:15:55,839
i hope you have some and thanks for

480
00:15:52,839 --> 00:15:55,839
listening

481
00:15:59,930 --> 00:16:03,069
[Music]

482
00:16:07,519 --> 00:16:11,360
yeah i did so i don't have the numbers

483
00:16:09,360 --> 00:16:12,480
so the question is did i run the second

484
00:16:11,360 --> 00:16:15,120
bpf benchmark

485
00:16:12,480 --> 00:16:16,720
with the did i rent sorry the linux

486
00:16:15,120 --> 00:16:18,320
compilation benchmark with the second

487
00:16:16,720 --> 00:16:21,759
bpf option

488
00:16:18,320 --> 00:16:25,040
i did i don't have the numbers here but

489
00:16:21,759 --> 00:16:25,040
might have them online

490
00:16:28,000 --> 00:16:34,800
okay so here if you can see

491
00:16:31,040 --> 00:16:35,360
the the one before last so the second

492
00:16:34,800 --> 00:16:38,560
one

493
00:16:35,360 --> 00:16:43,040
is the number with second vpf so it has

494
00:16:38,560 --> 00:16:43,040
a few seconds but yeah nothing much

495
00:16:44,079 --> 00:16:48,959
you talked about ebpf and cbpf is that a

496
00:16:46,959 --> 00:16:51,758
limitation of what second

497
00:16:48,959 --> 00:16:52,719
allows current sports in kernel yeah so

498
00:16:51,759 --> 00:16:55,759
the question is

499
00:16:52,720 --> 00:16:57,519
uh i've talked about cbpf and ebpf and

500
00:16:55,759 --> 00:16:59,279
whether that is the limitation of what

501
00:16:57,519 --> 00:17:01,839
second balance in the kernel

502
00:16:59,279 --> 00:17:03,360
so second only allows cbpf programs in

503
00:17:01,839 --> 00:17:04,799
the kernel there's been some discussion

504
00:17:03,360 --> 00:17:06,079
to allow ebpf

505
00:17:04,799 --> 00:17:08,240
on the mailing list but that's pretty

506
00:17:06,079 --> 00:17:09,039
much i don't think it's going to get

507
00:17:08,240 --> 00:17:11,120
there so the

508
00:17:09,039 --> 00:17:12,879
the answer was very clearly that this is

509
00:17:11,119 --> 00:17:14,799
not something they'd want

510
00:17:12,880 --> 00:17:17,039
the main reason for this i think is the

511
00:17:14,799 --> 00:17:19,918
unprivileged

512
00:17:17,039 --> 00:17:21,359
evpf programs that this would require

513
00:17:19,919 --> 00:17:26,400
and they don't want

514
00:17:21,359 --> 00:17:26,399
any more unprivileged ebp programs so

515
00:17:30,880 --> 00:17:34,720
okay yeah i actually have a question

516
00:17:33,600 --> 00:17:38,240
probably should be

517
00:17:34,720 --> 00:17:42,240
this change in the kernel to allow uh

518
00:17:38,240 --> 00:17:45,600
detaching dbf programs from

519
00:17:42,240 --> 00:17:48,320
from product processes so the question

520
00:17:45,600 --> 00:17:48,799
so the question is should we um try to

521
00:17:48,320 --> 00:17:50,480
uh

522
00:17:48,799 --> 00:17:52,160
upstream some work in the kernel to

523
00:17:50,480 --> 00:17:54,559
allow um

524
00:17:52,160 --> 00:17:55,360
to allow us to detach uh second bpf

525
00:17:54,559 --> 00:17:59,200
grams from

526
00:17:55,360 --> 00:18:03,439
processes um i guess we can always try

527
00:17:59,200 --> 00:18:03,440
the i don't know if there's any

528
00:18:04,080 --> 00:18:08,559
i'm afraid it will take about nine

529
00:18:05,760 --> 00:18:08,559
months as usual

530
00:18:09,520 --> 00:18:15,840
i think detention is

531
00:18:17,039 --> 00:18:20,400
yeah that's probably the main concern

532
00:18:18,480 --> 00:18:21,039
they're going to raise is the security

533
00:18:20,400 --> 00:18:22,960
aspect so

534
00:18:21,039 --> 00:18:24,080
what if but i don't see how that could

535
00:18:22,960 --> 00:18:26,080
be misused because

536
00:18:24,080 --> 00:18:27,600
if you're actually trying to detach a

537
00:18:26,080 --> 00:18:30,159
program from your process

538
00:18:27,600 --> 00:18:31,678
i mean you're asking for it so maybe you

539
00:18:30,160 --> 00:18:38,400
need privileges for the

540
00:18:31,679 --> 00:18:38,400
in order to do that but then

541
00:18:40,840 --> 00:18:44,959
um personally i don't think this is a

542
00:18:43,520 --> 00:18:46,720
security issue because

543
00:18:44,960 --> 00:18:48,400
when you're attaching a program you can

544
00:18:46,720 --> 00:18:52,160
explicitly say that

545
00:18:48,400 --> 00:18:54,840
this program should not be inherited

546
00:18:52,160 --> 00:18:56,000
and this way it wouldn't be any security

547
00:18:54,840 --> 00:18:58,320
issue

548
00:18:56,000 --> 00:19:00,240
it will require revoking the camera

549
00:18:58,320 --> 00:19:01,520
that's why i'm asking this question

550
00:19:00,240 --> 00:19:03,840
yeah but then we're going to we should

551
00:19:01,520 --> 00:19:06,879
try this this would allow to

552
00:19:03,840 --> 00:19:08,799
uh support complete with full force

553
00:19:06,880 --> 00:19:11,440
and without not just before work but

554
00:19:08,799 --> 00:19:13,120
also without full options

555
00:19:11,440 --> 00:19:14,720
there might be some issues with

556
00:19:13,120 --> 00:19:16,080
performance there because

557
00:19:14,720 --> 00:19:18,160
because of the way it's implemented in

558
00:19:16,080 --> 00:19:20,159
the kernel it's a reference current with

559
00:19:18,160 --> 00:19:21,919
so if we want to remove one from the

560
00:19:20,160 --> 00:19:25,840
chain it's going to be

561
00:19:21,919 --> 00:19:25,840
kind of difficult yeah

562
00:19:28,880 --> 00:19:31,840
any other questions

563
00:19:32,320 --> 00:19:35,600
so the next talk is about ebpf this time

564
00:19:34,799 --> 00:19:37,760
so

565
00:19:35,600 --> 00:19:38,879
if you want to listen to some ebpf you

566
00:19:37,760 --> 00:19:41,440
have to list to

567
00:19:38,880 --> 00:19:41,440
stay here

568
00:19:42,720 --> 00:19:53,679
okay thanks

