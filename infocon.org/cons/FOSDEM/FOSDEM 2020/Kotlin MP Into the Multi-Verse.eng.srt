1
00:00:06,000 --> 00:00:09,920
uh

2
00:00:06,480 --> 00:00:13,200
yep everyone again thank you for coming

3
00:00:09,920 --> 00:00:15,120
uh don't forget to yeah

4
00:00:13,200 --> 00:00:16,560
help your chair when you leave the room

5
00:00:15,120 --> 00:00:18,640
it's really nice you don't pass in front

6
00:00:16,560 --> 00:00:21,919
of the camera over there

7
00:00:18,640 --> 00:00:26,000
and we still have japanese licenses so

8
00:00:21,920 --> 00:00:29,840
uh open play requests uh then

9
00:00:26,000 --> 00:00:32,558
i'm happy to introduce nissan he's going

10
00:00:29,840 --> 00:00:33,520
to talk about cuddling mp into the

11
00:00:32,558 --> 00:00:35,680
multiverse

12
00:00:33,520 --> 00:00:38,079
so please give him a big round of

13
00:00:35,680 --> 00:00:38,079
applause

14
00:00:38,210 --> 00:00:43,200
[Applause]

15
00:00:41,200 --> 00:00:45,200
okay hello everyone you can all hear me

16
00:00:43,200 --> 00:00:47,440
right at the back also

17
00:00:45,200 --> 00:00:48,480
i hope okay great thank you all for

18
00:00:47,440 --> 00:00:50,879
coming to this talk

19
00:00:48,480 --> 00:00:52,160
uh so the idea about this talk uh

20
00:00:50,879 --> 00:00:55,360
basically came through because

21
00:00:52,160 --> 00:00:57,279
i was trying to uh like uh find out ways

22
00:00:55,360 --> 00:00:58,879
of working with cutlery multiplatform as

23
00:00:57,280 --> 00:01:00,079
like people have been talking about it

24
00:00:58,879 --> 00:01:01,440
and a lot of things are going around

25
00:01:00,079 --> 00:01:04,080
this

26
00:01:01,440 --> 00:01:06,080
so i eventually started like trying out

27
00:01:04,080 --> 00:01:08,400
how i can get this to work

28
00:01:06,080 --> 00:01:09,520
turns out it's not as easy as we think

29
00:01:08,400 --> 00:01:12,240
it is

30
00:01:09,520 --> 00:01:13,439
so that's how this stock came to be so

31
00:01:12,240 --> 00:01:16,080
what i'm going to be

32
00:01:13,439 --> 00:01:17,360
doing here is i'm going to try to uh at

33
00:01:16,080 --> 00:01:19,280
least convince you all to

34
00:01:17,360 --> 00:01:21,040
uh understand how kotlin multi-platform

35
00:01:19,280 --> 00:01:21,840
in general is is working and what it's

36
00:01:21,040 --> 00:01:24,320
doing

37
00:01:21,840 --> 00:01:25,680
um and then i'm also going to show you

38
00:01:24,320 --> 00:01:28,479
how you can actually

39
00:01:25,680 --> 00:01:29,360
get a working application for android

40
00:01:28,479 --> 00:01:31,280
and ios

41
00:01:29,360 --> 00:01:32,799
um because it's not as simple as you

42
00:01:31,280 --> 00:01:34,000
think like you just fire up an id and it

43
00:01:32,799 --> 00:01:36,000
works no it's not that

44
00:01:34,000 --> 00:01:37,680
that's what i will show you so let's

45
00:01:36,000 --> 00:01:40,799
start with that

46
00:01:37,680 --> 00:01:43,200
so i said kotlin mp

47
00:01:40,799 --> 00:01:43,840
what does that actually mean as you

48
00:01:43,200 --> 00:01:46,320
would have guessed

49
00:01:43,840 --> 00:01:48,000
it's basically kotlin multi-platform uh

50
00:01:46,320 --> 00:01:49,520
there's no formal definition for this

51
00:01:48,000 --> 00:01:51,840
like what exactly it is

52
00:01:49,520 --> 00:01:52,798
so i came up with my own from what i

53
00:01:51,840 --> 00:01:54,320
understood

54
00:01:52,799 --> 00:01:55,840
basically we are utilizing kotlin

55
00:01:54,320 --> 00:01:57,919
language to build for

56
00:01:55,840 --> 00:01:59,439
uh these multiple target platforms i'll

57
00:01:57,920 --> 00:02:02,000
get to what target platforms

58
00:01:59,439 --> 00:02:03,439
are in a few minutes uh which enables

59
00:02:02,000 --> 00:02:06,079
code sharing

60
00:02:03,439 --> 00:02:06,839
uh while being as flexible as you can be

61
00:02:06,079 --> 00:02:09,119
right

62
00:02:06,840 --> 00:02:10,479
so i'm going to break this down because

63
00:02:09,119 --> 00:02:12,000
like a full statement

64
00:02:10,479 --> 00:02:14,560
okay there's a lot of things being said

65
00:02:12,000 --> 00:02:16,640
here in general culminating platform

66
00:02:14,560 --> 00:02:18,959
is like an open source tool or or i

67
00:02:16,640 --> 00:02:21,440
should say plugin that's available

68
00:02:18,959 --> 00:02:22,640
uh it uses cotton as your common code

69
00:02:21,440 --> 00:02:24,800
here

70
00:02:22,640 --> 00:02:26,480
also is targeting multiple platforms the

71
00:02:24,800 --> 00:02:30,400
core sharing is specifically happening

72
00:02:26,480 --> 00:02:30,399
for data domain and presentation layer

73
00:02:30,959 --> 00:02:35,920
the the the the different thing about it

74
00:02:34,319 --> 00:02:38,160
is that it integrates with the existing

75
00:02:35,920 --> 00:02:39,040
native platforms so it leverages the

76
00:02:38,160 --> 00:02:41,359
native

77
00:02:39,040 --> 00:02:42,079
capabilities of the platform uh when it

78
00:02:41,360 --> 00:02:43,360
is required

79
00:02:42,080 --> 00:02:45,120
it's not that you are you are

80
00:02:43,360 --> 00:02:47,519
specifically uh

81
00:02:45,120 --> 00:02:49,360
forced to use them it's more a choice on

82
00:02:47,519 --> 00:02:50,879
you uh when you need to use them you

83
00:02:49,360 --> 00:02:53,920
will go ahead and use them

84
00:02:50,879 --> 00:02:56,720
uh it's optional as it's not opinionated

85
00:02:53,920 --> 00:02:58,720
uh ties into the same point as above it

86
00:02:56,720 --> 00:03:01,120
will not ask you to specifically use a

87
00:02:58,720 --> 00:03:03,920
certain pattern it will not ask you to

88
00:03:01,120 --> 00:03:05,200
do some sort of like trickery or like

89
00:03:03,920 --> 00:03:08,000
use a different language

90
00:03:05,200 --> 00:03:09,920
to work with so it's basically trying to

91
00:03:08,000 --> 00:03:12,879
help you as much as it can while giving

92
00:03:09,920 --> 00:03:12,879
you all the choices

93
00:03:13,360 --> 00:03:17,519
but the question here is why why are we

94
00:03:15,840 --> 00:03:20,400
even trying to do this

95
00:03:17,519 --> 00:03:22,080
um so from what i understand is that up

96
00:03:20,400 --> 00:03:24,080
till now there are been like

97
00:03:22,080 --> 00:03:25,760
all these different possibilities that

98
00:03:24,080 --> 00:03:27,840
we could use kotlin for you could use

99
00:03:25,760 --> 00:03:29,280
cotton for generating javascript code

100
00:03:27,840 --> 00:03:31,519
and then you could use kotlin for

101
00:03:29,280 --> 00:03:32,400
generating the jvm base code the byte

102
00:03:31,519 --> 00:03:34,319
code right

103
00:03:32,400 --> 00:03:35,680
and then kotlin native came into place

104
00:03:34,319 --> 00:03:38,560
and that allowed

105
00:03:35,680 --> 00:03:40,000
people or at least the kotlin tool chain

106
00:03:38,560 --> 00:03:42,879
to generate more

107
00:03:40,000 --> 00:03:44,239
target platform specific code so you can

108
00:03:42,879 --> 00:03:45,359
think of something that's more near to

109
00:03:44,239 --> 00:03:48,239
the machine

110
00:03:45,360 --> 00:03:49,680
level code here and the second point

111
00:03:48,239 --> 00:03:52,319
that's very important is that

112
00:03:49,680 --> 00:03:52,799
existing solutions are very opinionated

113
00:03:52,319 --> 00:03:55,200
um

114
00:03:52,799 --> 00:03:57,840
i'm i'm looking at a flutter react

115
00:03:55,200 --> 00:03:59,760
native and then you also have xamarin

116
00:03:57,840 --> 00:04:00,959
obviously people have tried cc plus plus

117
00:03:59,760 --> 00:04:02,720
in the past two

118
00:04:00,959 --> 00:04:04,799
all of these are very opinionated in the

119
00:04:02,720 --> 00:04:05,920
sense that they they force you to use a

120
00:04:04,799 --> 00:04:07,599
certain pattern

121
00:04:05,920 --> 00:04:09,439
uh flutter would basically ask you to

122
00:04:07,599 --> 00:04:09,760
use first of all a different language so

123
00:04:09,439 --> 00:04:11,680
you

124
00:04:09,760 --> 00:04:13,439
start from a different stack on a

125
00:04:11,680 --> 00:04:15,040
different language at the same time it

126
00:04:13,439 --> 00:04:16,320
tells you that you cannot use the

127
00:04:15,040 --> 00:04:17,759
platform widgets because

128
00:04:16,320 --> 00:04:20,399
it is going to be drawing all the

129
00:04:17,759 --> 00:04:22,479
widgets for you uh or on the screen

130
00:04:20,399 --> 00:04:24,638
right so those kind of like opinionated

131
00:04:22,479 --> 00:04:25,919
versions exist and that's why kotlin

132
00:04:24,639 --> 00:04:27,280
native is uh or or

133
00:04:25,919 --> 00:04:30,080
corporate multi-platform now is

134
00:04:27,280 --> 00:04:31,840
something that's more considered

135
00:04:30,080 --> 00:04:33,840
it's something like this like we have a

136
00:04:31,840 --> 00:04:35,440
situation uh where it's a dilemma of the

137
00:04:33,840 --> 00:04:37,119
mobile app development right now

138
00:04:35,440 --> 00:04:39,360
uh where if you want to develop a native

139
00:04:37,120 --> 00:04:40,720
app for each device and maintain several

140
00:04:39,360 --> 00:04:41,199
projects this is what it looks like on

141
00:04:40,720 --> 00:04:43,600
the

142
00:04:41,199 --> 00:04:44,479
on the right and then you use a unique

143
00:04:43,600 --> 00:04:47,199
framework like

144
00:04:44,479 --> 00:04:48,320
say phonegap and then app accelerator

145
00:04:47,199 --> 00:04:50,479
like in the past or

146
00:04:48,320 --> 00:04:52,400
you could use flutter or even react

147
00:04:50,479 --> 00:04:53,039
native you end up building something

148
00:04:52,400 --> 00:04:55,520
that

149
00:04:53,040 --> 00:04:56,720
is limited in functionality why am i

150
00:04:55,520 --> 00:04:58,080
saying that because there have been

151
00:04:56,720 --> 00:05:00,080
companies who have tried this in the

152
00:04:58,080 --> 00:05:02,400
production like for example you know

153
00:05:00,080 --> 00:05:04,159
uh airbnb tried react native and then

154
00:05:02,400 --> 00:05:04,719
they pushed back to going to native

155
00:05:04,160 --> 00:05:07,360
again

156
00:05:04,720 --> 00:05:09,440
dropbox tried cc plus us for their

157
00:05:07,360 --> 00:05:10,960
cross-share cross platform

158
00:05:09,440 --> 00:05:12,719
they uh capabilities in the application

159
00:05:10,960 --> 00:05:15,120
but they also went back to native

160
00:05:12,720 --> 00:05:16,320
uh because there's certain things that

161
00:05:15,120 --> 00:05:18,479
you cannot do

162
00:05:16,320 --> 00:05:21,120
when you're trying to share most of the

163
00:05:18,479 --> 00:05:23,120
code across platforms

164
00:05:21,120 --> 00:05:24,960
so let's dive into the multiverse of

165
00:05:23,120 --> 00:05:25,520
platforms here or target platforms

166
00:05:24,960 --> 00:05:28,719
that's the

167
00:05:25,520 --> 00:05:30,880
the technical word for it uh

168
00:05:28,720 --> 00:05:32,080
the way i understand target platform uh

169
00:05:30,880 --> 00:05:33,360
i think um

170
00:05:32,080 --> 00:05:35,520
this was explained in the last talk a

171
00:05:33,360 --> 00:05:38,000
little bit but uh the point here is that

172
00:05:35,520 --> 00:05:39,520
i understand it as compiled artifacts to

173
00:05:38,000 --> 00:05:41,600
be consumed by specific

174
00:05:39,520 --> 00:05:43,120
platform so say for example when we are

175
00:05:41,600 --> 00:05:44,960
considering kotlin jvm

176
00:05:43,120 --> 00:05:47,360
the artifact that will be consumed by

177
00:05:44,960 --> 00:05:47,919
the platform uh would be jar and aar

178
00:05:47,360 --> 00:05:50,240
files

179
00:05:47,919 --> 00:05:51,599
right uh this can be consumed by java by

180
00:05:50,240 --> 00:05:53,520
android by spring boot

181
00:05:51,600 --> 00:05:55,120
uh if you have kotlin js it's gonna be

182
00:05:53,520 --> 00:05:56,400
generating javascript code which you can

183
00:05:55,120 --> 00:05:58,720
bundle it up and

184
00:05:56,400 --> 00:06:00,239
push it with say javascript react or

185
00:05:58,720 --> 00:06:02,080
node

186
00:06:00,240 --> 00:06:04,240
and then there comes the kotlin native

187
00:06:02,080 --> 00:06:06,400
part which enabled more possibilities

188
00:06:04,240 --> 00:06:07,280
where you have ability to generate code

189
00:06:06,400 --> 00:06:12,080
that is native

190
00:06:07,280 --> 00:06:13,679
to the arm platform or so cpu in general

191
00:06:12,080 --> 00:06:17,198
that you can push it with the android

192
00:06:13,680 --> 00:06:19,039
ndk you have ios version the is x64 by

193
00:06:17,199 --> 00:06:22,080
the way is the emulator

194
00:06:19,039 --> 00:06:23,120
similar you have for tv os x 64 is again

195
00:06:22,080 --> 00:06:26,000
emulator version

196
00:06:23,120 --> 00:06:27,199
watch os x86 is again for emulator and

197
00:06:26,000 --> 00:06:29,680
the other versions are when you want to

198
00:06:27,199 --> 00:06:31,680
run them on the device

199
00:06:29,680 --> 00:06:33,360
and then you have more where you have

200
00:06:31,680 --> 00:06:36,639
the linux arm version

201
00:06:33,360 --> 00:06:39,280
the mips version for the same mac os x64

202
00:06:36,639 --> 00:06:39,840
mingw which is basically for windows and

203
00:06:39,280 --> 00:06:42,638
then

204
00:06:39,840 --> 00:06:43,198
the wasm 32 which is for web assembly

205
00:06:42,639 --> 00:06:45,520
that's

206
00:06:43,199 --> 00:06:47,360
what cartoon native is allowing you to

207
00:06:45,520 --> 00:06:50,000
target now because it's generating

208
00:06:47,360 --> 00:06:51,680
artifacts that can be consumed by

209
00:06:50,000 --> 00:06:53,360
by by code that's running on this

210
00:06:51,680 --> 00:06:56,560
platform

211
00:06:53,360 --> 00:06:57,919
so this brings me to the next part here

212
00:06:56,560 --> 00:06:59,120
because it's not just the target

213
00:06:57,919 --> 00:07:02,000
platform it's also about

214
00:06:59,120 --> 00:07:03,120
code sharing so when we say code sharing

215
00:07:02,000 --> 00:07:05,280
we are actually talking about

216
00:07:03,120 --> 00:07:07,120
more related to the the data layer in

217
00:07:05,280 --> 00:07:08,799
general right where you can put your

218
00:07:07,120 --> 00:07:10,479
networking code that that can be shared

219
00:07:08,800 --> 00:07:11,520
across multiple platforms you can put

220
00:07:10,479 --> 00:07:13,758
caching you can put

221
00:07:11,520 --> 00:07:14,880
repositories you can even put like

222
00:07:13,759 --> 00:07:17,440
something like a

223
00:07:14,880 --> 00:07:18,880
like a a presentation layer with which

224
00:07:17,440 --> 00:07:20,479
is common

225
00:07:18,880 --> 00:07:22,719
on android side you have view models and

226
00:07:20,479 --> 00:07:24,240
presentation presenters controllers

227
00:07:22,720 --> 00:07:26,479
and then there's the domain layer where

228
00:07:24,240 --> 00:07:30,639
you can put use cases entities and

229
00:07:26,479 --> 00:07:31,360
the interactors what is also important

230
00:07:30,639 --> 00:07:33,360
here is

231
00:07:31,360 --> 00:07:34,639
that we are not talking about the ui at

232
00:07:33,360 --> 00:07:36,000
all now why

233
00:07:34,639 --> 00:07:37,280
why we are not talking about the ui

234
00:07:36,000 --> 00:07:39,280
because content native in general

235
00:07:37,280 --> 00:07:41,440
doesn't even care about ui

236
00:07:39,280 --> 00:07:43,679
each of these platform that exists have

237
00:07:41,440 --> 00:07:45,919
their own way of representing ui

238
00:07:43,680 --> 00:07:47,039
ios has its own version android has its

239
00:07:45,919 --> 00:07:49,280
own version

240
00:07:47,039 --> 00:07:51,360
say example linux has its own version

241
00:07:49,280 --> 00:07:53,440
and they all do their job pretty well

242
00:07:51,360 --> 00:07:54,879
so what cultinative is basically saying

243
00:07:53,440 --> 00:07:55,680
is that we're going to build an artifact

244
00:07:54,879 --> 00:07:57,680
for you

245
00:07:55,680 --> 00:07:59,360
you plug that into your application

246
00:07:57,680 --> 00:08:01,680
build the ui on your own

247
00:07:59,360 --> 00:08:03,280
and then use this whole code right so

248
00:08:01,680 --> 00:08:04,960
this is the artifact that is being

249
00:08:03,280 --> 00:08:06,479
generated on all of these different

250
00:08:04,960 --> 00:08:09,520
platforms is what is shared

251
00:08:06,479 --> 00:08:10,800
but the ui is still native this is more

252
00:08:09,520 --> 00:08:12,560
or less on the side of

253
00:08:10,800 --> 00:08:14,319
just making sure that the ui gets

254
00:08:12,560 --> 00:08:16,240
updated pretty frequently

255
00:08:14,319 --> 00:08:18,160
right but your business logic anyway

256
00:08:16,240 --> 00:08:20,319
stays the same so you want to

257
00:08:18,160 --> 00:08:21,599
share your business logic mostly and not

258
00:08:20,319 --> 00:08:23,440
the ui ui can

259
00:08:21,599 --> 00:08:25,120
change whenever you want based on

260
00:08:23,440 --> 00:08:28,000
whatever technology you use

261
00:08:25,120 --> 00:08:29,520
even say for example on ios uh we were

262
00:08:28,000 --> 00:08:31,599
developing a lot of like

263
00:08:29,520 --> 00:08:33,919
ui with say view controllers and other

264
00:08:31,599 --> 00:08:35,598
stuff now you're using the swift ui

265
00:08:33,919 --> 00:08:37,519
same on android you could basically be

266
00:08:35,599 --> 00:08:38,800
using xml layouts now but now you have

267
00:08:37,519 --> 00:08:40,399
compost that's coming in

268
00:08:38,799 --> 00:08:42,079
now these technologies would change all

269
00:08:40,399 --> 00:08:44,000
the time but the the

270
00:08:42,080 --> 00:08:45,600
core idea of multi-platform here is that

271
00:08:44,000 --> 00:08:47,839
the business logic is getting shared

272
00:08:45,600 --> 00:08:47,839
across

273
00:08:47,920 --> 00:08:51,199
mind that i'm not saying this is

274
00:08:49,360 --> 00:08:51,839
cross-platform comes back to the same

275
00:08:51,200 --> 00:08:53,839
thing

276
00:08:51,839 --> 00:08:55,600
when we say cross-platform solutions we

277
00:08:53,839 --> 00:08:57,519
have basically solutions that are

278
00:08:55,600 --> 00:08:59,120
we they are asking you to write code in

279
00:08:57,519 --> 00:09:00,720
an opinionated manner right

280
00:08:59,120 --> 00:09:03,279
also they are doing some sort of like

281
00:09:00,720 --> 00:09:04,240
bridging to make things work for you

282
00:09:03,279 --> 00:09:06,160
magically right

283
00:09:04,240 --> 00:09:08,399
when you say it's a xamarin app i write

284
00:09:06,160 --> 00:09:10,560
code in c sharp and i write something

285
00:09:08,399 --> 00:09:11,920
up and say for example like an

286
00:09:10,560 --> 00:09:14,319
application in that and then i

287
00:09:11,920 --> 00:09:16,479
deploy it to say android ios and save

288
00:09:14,320 --> 00:09:17,839
some other platform maybe desktop

289
00:09:16,480 --> 00:09:19,519
in this case what they are doing is they

290
00:09:17,839 --> 00:09:22,560
are going to compile your code

291
00:09:19,519 --> 00:09:24,720
put it behind a bridging layer and then

292
00:09:22,560 --> 00:09:26,800
talk to the native side so there's still

293
00:09:24,720 --> 00:09:29,680
some sort of a dependency in between

294
00:09:26,800 --> 00:09:32,399
if this dependency is not updated you're

295
00:09:29,680 --> 00:09:36,000
already behind

296
00:09:32,399 --> 00:09:37,440
so what's the secret source here so from

297
00:09:36,000 --> 00:09:39,760
my understanding

298
00:09:37,440 --> 00:09:41,440
and this is what i i'm gonna uh maybe

299
00:09:39,760 --> 00:09:43,040
represent it uh

300
00:09:41,440 --> 00:09:45,279
and maybe you can think through with the

301
00:09:43,040 --> 00:09:46,959
with me uh as i explained this

302
00:09:45,279 --> 00:09:49,439
is that there's a there's a concept

303
00:09:46,959 --> 00:09:51,439
called expect an actual concept

304
00:09:49,440 --> 00:09:52,560
what i like to call as interfaces with

305
00:09:51,440 --> 00:09:54,800
super powers

306
00:09:52,560 --> 00:09:55,680
and more and i'm going to explain what

307
00:09:54,800 --> 00:09:58,719
that that

308
00:09:55,680 --> 00:10:00,479
turns out to be so this is a standard

309
00:09:58,720 --> 00:10:01,920
interface in kotlin right you have an

310
00:10:00,480 --> 00:10:02,800
interface that a function called

311
00:10:01,920 --> 00:10:05,920
platform

312
00:10:02,800 --> 00:10:07,439
name then i'm using android code right

313
00:10:05,920 --> 00:10:10,319
now you have a main activity

314
00:10:07,440 --> 00:10:11,600
uh where i'm um kind of i'm not

315
00:10:10,320 --> 00:10:12,800
extending the activity here for some

316
00:10:11,600 --> 00:10:14,880
reason but i should have

317
00:10:12,800 --> 00:10:17,439
anyways consider it's a standard class

318
00:10:14,880 --> 00:10:20,560
uh that is implementing the interface

319
00:10:17,440 --> 00:10:21,920
and it overrides the the function here

320
00:10:20,560 --> 00:10:24,160
platform name because i'm using the

321
00:10:21,920 --> 00:10:25,360
interface and then later on i use it

322
00:10:24,160 --> 00:10:27,760
inside the function called

323
00:10:25,360 --> 00:10:28,959
create application screen message i'm

324
00:10:27,760 --> 00:10:30,720
calling it hellofrom

325
00:10:28,959 --> 00:10:33,119
dollar and then the passing the function

326
00:10:30,720 --> 00:10:35,279
in there now notice here something

327
00:10:33,120 --> 00:10:36,959
the first section where the interface is

328
00:10:35,279 --> 00:10:38,560
declared

329
00:10:36,959 --> 00:10:40,800
or i should say defined actually or

330
00:10:38,560 --> 00:10:42,719
declared yeah that is the point where we

331
00:10:40,800 --> 00:10:44,079
are expecting this to be implemented

332
00:10:42,720 --> 00:10:45,920
this is how we read it

333
00:10:44,079 --> 00:10:48,319
right and then eventually when we

334
00:10:45,920 --> 00:10:50,319
override it is the actual implementation

335
00:10:48,320 --> 00:10:51,839
that's how interfaces work now i'm going

336
00:10:50,320 --> 00:10:54,240
to map this back to how

337
00:10:51,839 --> 00:10:56,079
kotlin uh multi-platform is going to be

338
00:10:54,240 --> 00:10:58,959
using this kind of a functionality

339
00:10:56,079 --> 00:11:00,000
so what you have is that on your save

340
00:10:58,959 --> 00:11:02,160
you have multiple modules

341
00:11:00,000 --> 00:11:04,399
right now in a cartoon platform project

342
00:11:02,160 --> 00:11:07,040
the common module here would basically

343
00:11:04,399 --> 00:11:08,640
say expect that's the keyword to use and

344
00:11:07,040 --> 00:11:10,560
then it will put it

345
00:11:08,640 --> 00:11:12,000
something similar to like how you use

346
00:11:10,560 --> 00:11:13,119
core routines you put suspend and then

347
00:11:12,000 --> 00:11:15,600
the function name right

348
00:11:13,120 --> 00:11:16,480
you're going to say expect the function

349
00:11:15,600 --> 00:11:18,399
name and then

350
00:11:16,480 --> 00:11:19,519
that's it then maybe you can use the

351
00:11:18,399 --> 00:11:21,120
same function call

352
00:11:19,519 --> 00:11:22,560
in the common code for create

353
00:11:21,120 --> 00:11:24,399
application screen message

354
00:11:22,560 --> 00:11:26,160
and then eventually in the platform

355
00:11:24,399 --> 00:11:26,560
specific code version you will go and

356
00:11:26,160 --> 00:11:28,880
say

357
00:11:26,560 --> 00:11:30,000
the actual implementation for this by

358
00:11:28,880 --> 00:11:32,640
using the keyword

359
00:11:30,000 --> 00:11:34,240
actual is this function and what what is

360
00:11:32,640 --> 00:11:35,600
the implementation you want to define

361
00:11:34,240 --> 00:11:37,519
so in this case we are defining the

362
00:11:35,600 --> 00:11:38,399
string as android for android platform

363
00:11:37,519 --> 00:11:43,839
module

364
00:11:38,399 --> 00:11:43,839
and ios for ios module

365
00:11:44,720 --> 00:11:48,160
but that's not it and i said and more

366
00:11:46,720 --> 00:11:50,399
with the super power version

367
00:11:48,160 --> 00:11:51,839
is because it's not just limited to how

368
00:11:50,399 --> 00:11:53,920
it will work with functions

369
00:11:51,839 --> 00:11:55,600
you can use the same kind of uh of a

370
00:11:53,920 --> 00:11:57,279
process when you're doing it with a

371
00:11:55,600 --> 00:11:59,200
class right so for example you have a

372
00:11:57,279 --> 00:12:00,800
class here greeting

373
00:11:59,200 --> 00:12:03,839
where you say i'm gonna expect this

374
00:12:00,800 --> 00:12:04,079
class uh to have a function called greet

375
00:12:03,839 --> 00:12:07,680
in

376
00:12:04,079 --> 00:12:08,319
it now the platform implementation for

377
00:12:07,680 --> 00:12:10,399
this will

378
00:12:08,320 --> 00:12:12,240
map into saying actual the class

379
00:12:10,399 --> 00:12:14,880
greeting and then notice i say

380
00:12:12,240 --> 00:12:16,639
actual constructor val name string why

381
00:12:14,880 --> 00:12:18,639
am i saying actual again

382
00:12:16,639 --> 00:12:20,320
because on the platform side this could

383
00:12:18,639 --> 00:12:20,720
have been say swift and it would have

384
00:12:20,320 --> 00:12:23,600
said

385
00:12:20,720 --> 00:12:24,079
let name string so this is also changing

386
00:12:23,600 --> 00:12:25,680
for me

387
00:12:24,079 --> 00:12:27,519
so that's why i have to say the actual

388
00:12:25,680 --> 00:12:28,719
implementation for the constructor

389
00:12:27,519 --> 00:12:30,800
is going to be something that's very

390
00:12:28,720 --> 00:12:32,720
specific to android in in this case

391
00:12:30,800 --> 00:12:35,120
using content so val name string

392
00:12:32,720 --> 00:12:36,880
and then eventually i provide the actual

393
00:12:35,120 --> 00:12:40,079
implementation of the function here

394
00:12:36,880 --> 00:12:40,639
called greet where i say println hello

395
00:12:40,079 --> 00:12:42,319
name

396
00:12:40,639 --> 00:12:43,839
and then you can obviously use it based

397
00:12:42,320 --> 00:12:45,360
on which platform you're using

398
00:12:43,839 --> 00:12:47,120
in this case we are considering android

399
00:12:45,360 --> 00:12:48,880
so we'll create the class we'll call the

400
00:12:47,120 --> 00:12:51,279
function on it which will print hello

401
00:12:48,880 --> 00:12:51,279
foster

402
00:12:51,360 --> 00:12:57,760
so that said let's jump into trying to

403
00:12:54,880 --> 00:12:58,480
or or i'm gonna i'm gonna go through the

404
00:12:57,760 --> 00:13:00,240
steps

405
00:12:58,480 --> 00:13:01,760
that you require to start building

406
00:13:00,240 --> 00:13:03,839
quality multi-platform code

407
00:13:01,760 --> 00:13:07,200
uh now that we know the idea of expect

408
00:13:03,839 --> 00:13:08,720
an actual but before we do that i want

409
00:13:07,200 --> 00:13:09,440
to mention something about sharing is

410
00:13:08,720 --> 00:13:11,920
clearing

411
00:13:09,440 --> 00:13:13,600
so if you go on the internet right now

412
00:13:11,920 --> 00:13:14,079
and you try out like google searching

413
00:13:13,600 --> 00:13:16,560
this

414
00:13:14,079 --> 00:13:17,359
how do you get a partner multi-platform

415
00:13:16,560 --> 00:13:19,518
project to work

416
00:13:17,360 --> 00:13:21,360
you find many ways one of the ways of

417
00:13:19,519 --> 00:13:23,600
doing this this code sharing is that you

418
00:13:21,360 --> 00:13:25,680
put all your code in just one repository

419
00:13:23,600 --> 00:13:28,639
right and then everyone just tries to

420
00:13:25,680 --> 00:13:30,800
work with that in that same repository

421
00:13:28,639 --> 00:13:32,480
that's okayish to work with but if you

422
00:13:30,800 --> 00:13:33,279
have many teams working across different

423
00:13:32,480 --> 00:13:34,639
time zones

424
00:13:33,279 --> 00:13:36,399
people are going to be committing code

425
00:13:34,639 --> 00:13:37,120
it's going to conflict and cause a lot

426
00:13:36,399 --> 00:13:39,920
of problems

427
00:13:37,120 --> 00:13:41,040
so that's not a good one the second one

428
00:13:39,920 --> 00:13:44,160
is that

429
00:13:41,040 --> 00:13:45,839
you put everything in its own repository

430
00:13:44,160 --> 00:13:47,439
in its own project

431
00:13:45,839 --> 00:13:50,000
while the shared code that is going to

432
00:13:47,440 --> 00:13:52,880
be shared across multiple projects

433
00:13:50,000 --> 00:13:54,480
is going to live its own project it's a

434
00:13:52,880 --> 00:13:56,560
bit hard to maintain because you have to

435
00:13:54,480 --> 00:13:58,079
keep in sync with the shared code and

436
00:13:56,560 --> 00:13:58,479
the other platforms that you are sharing

437
00:13:58,079 --> 00:14:01,359
this

438
00:13:58,480 --> 00:14:03,199
against so you have to keep them in sync

439
00:14:01,360 --> 00:14:05,760
this is what it kind of looks like

440
00:14:03,199 --> 00:14:06,639
so imagine this being a project in intel

441
00:14:05,760 --> 00:14:10,000
j

442
00:14:06,639 --> 00:14:13,040
where i am basically creating a

443
00:14:10,000 --> 00:14:15,360
sample app called kmp here uh it has

444
00:14:13,040 --> 00:14:16,639
app as a module that is the android app

445
00:14:15,360 --> 00:14:19,279
it has native

446
00:14:16,639 --> 00:14:20,480
kotlin ios slash kotlin ios as the ios

447
00:14:19,279 --> 00:14:23,439
app module here

448
00:14:20,480 --> 00:14:24,160
and then you have a shared code as a

449
00:14:23,440 --> 00:14:27,360
full

450
00:14:24,160 --> 00:14:28,319
folder here inside which lives something

451
00:14:27,360 --> 00:14:30,880
called

452
00:14:28,320 --> 00:14:31,600
android main which is your kotlin jvm

453
00:14:30,880 --> 00:14:33,760
code

454
00:14:31,600 --> 00:14:34,959
uh something that lives as common which

455
00:14:33,760 --> 00:14:37,439
is your shared code

456
00:14:34,959 --> 00:14:39,119
and then you have your ios main which is

457
00:14:37,440 --> 00:14:41,600
your kotlin native ios

458
00:14:39,120 --> 00:14:42,800
shared code here uh this is basically

459
00:14:41,600 --> 00:14:46,160
living outside

460
00:14:42,800 --> 00:14:47,519
in a shared code folder so this is

461
00:14:46,160 --> 00:14:49,199
something that you would do but it's

462
00:14:47,519 --> 00:14:50,959
really hard to maintain it

463
00:14:49,199 --> 00:14:52,240
at the same time because yes people

464
00:14:50,959 --> 00:14:53,760
would be doing a lot of things at the

465
00:14:52,240 --> 00:14:55,680
same time

466
00:14:53,760 --> 00:14:57,360
the third version of doing this is that

467
00:14:55,680 --> 00:14:59,599
you have one platform

468
00:14:57,360 --> 00:15:01,440
in sync with the common code while the

469
00:14:59,600 --> 00:15:05,120
other one lives on the other side

470
00:15:01,440 --> 00:15:06,959
right so it's it's better it's easier to

471
00:15:05,120 --> 00:15:08,720
test with it is better to change things

472
00:15:06,959 --> 00:15:10,560
and this is what it looks like you have

473
00:15:08,720 --> 00:15:12,320
something like this you have android app

474
00:15:10,560 --> 00:15:13,199
and the kotlin jvm version living side

475
00:15:12,320 --> 00:15:15,040
by side

476
00:15:13,199 --> 00:15:17,519
and then you have your shared code uh

477
00:15:15,040 --> 00:15:20,399
the content native ios code and the ios

478
00:15:17,519 --> 00:15:22,240
app as a different module right the

479
00:15:20,399 --> 00:15:24,000
shared code and content native ios code

480
00:15:22,240 --> 00:15:25,680
actually lives inside the app module as

481
00:15:24,000 --> 00:15:26,639
you can see it's called common main and

482
00:15:25,680 --> 00:15:28,319
ios mean

483
00:15:26,639 --> 00:15:29,680
uh this is just living inside the app

484
00:15:28,320 --> 00:15:31,680
module itself

485
00:15:29,680 --> 00:15:33,359
so we're gonna actually start doing this

486
00:15:31,680 --> 00:15:34,079
like from scratch like how you would do

487
00:15:33,360 --> 00:15:36,639
this

488
00:15:34,079 --> 00:15:37,758
um you would think that it's very easy

489
00:15:36,639 --> 00:15:39,680
to work with but

490
00:15:37,759 --> 00:15:41,040
sadly there's no specific id like

491
00:15:39,680 --> 00:15:43,359
android studio

492
00:15:41,040 --> 00:15:45,439
but you we use kind of like all three

493
00:15:43,360 --> 00:15:46,399
ids here we'll use intellij idea uh

494
00:15:45,440 --> 00:15:48,880
we'll use uh

495
00:15:46,399 --> 00:15:50,160
android studio and we'll use xcode all

496
00:15:48,880 --> 00:15:52,880
three of them together to get to

497
00:15:50,160 --> 00:15:53,439
get this project working and functional

498
00:15:52,880 --> 00:15:54,880
so

499
00:15:53,440 --> 00:15:56,240
you start with intellij idea this is the

500
00:15:54,880 --> 00:15:57,199
latest one i took the screenshot last

501
00:15:56,240 --> 00:15:59,360
night

502
00:15:57,199 --> 00:16:01,040
you create a new project you say i'm

503
00:15:59,360 --> 00:16:02,000
gonna put a mobile multi-platform

504
00:16:01,040 --> 00:16:03,759
project with

505
00:16:02,000 --> 00:16:06,079
android and ios code in it using gradle

506
00:16:03,759 --> 00:16:06,560
build tool uh define it a name give it

507
00:16:06,079 --> 00:16:08,638
something

508
00:16:06,560 --> 00:16:09,599
and then say finish at this point when

509
00:16:08,639 --> 00:16:11,440
you've hit finish

510
00:16:09,600 --> 00:16:13,600
your project would sync and you would

511
00:16:11,440 --> 00:16:16,160
ideally assume that it is functional

512
00:16:13,600 --> 00:16:18,160
uh turns out it's not because by default

513
00:16:16,160 --> 00:16:20,160
intellij idea does not put the

514
00:16:18,160 --> 00:16:21,519
sdk path for your android in the local

515
00:16:20,160 --> 00:16:23,920
dot properties file

516
00:16:21,519 --> 00:16:25,600
so that is a bit weird because they do

517
00:16:23,920 --> 00:16:27,519
that for android studio or maybe android

518
00:16:25,600 --> 00:16:29,680
studio team does that specifically

519
00:16:27,519 --> 00:16:31,519
uh i'm not quite sure uh but in that

520
00:16:29,680 --> 00:16:32,560
sense you will have to actually provide

521
00:16:31,519 --> 00:16:34,880
the path here

522
00:16:32,560 --> 00:16:37,040
so i change this path to something

523
00:16:34,880 --> 00:16:39,759
called users slash username

524
00:16:37,040 --> 00:16:40,160
and then i provide the android sdk path

525
00:16:39,759 --> 00:16:41,839
here

526
00:16:40,160 --> 00:16:43,839
when you do this your project is fully

527
00:16:41,839 --> 00:16:45,199
functional at this point what you do is

528
00:16:43,839 --> 00:16:48,000
that you need to

529
00:16:45,199 --> 00:16:49,680
also go into your project structure and

530
00:16:48,000 --> 00:16:52,160
set the default uh

531
00:16:49,680 --> 00:16:53,758
like the sdk for all the modules this is

532
00:16:52,160 --> 00:16:55,439
also something that i

533
00:16:53,759 --> 00:16:56,959
don't know why it doesn't work but

534
00:16:55,440 --> 00:16:59,440
ideally this should be

535
00:16:56,959 --> 00:17:01,199
supported from the ide itself they know

536
00:16:59,440 --> 00:17:01,759
there's other sdk but they don't choose

537
00:17:01,199 --> 00:17:05,119
the

538
00:17:01,759 --> 00:17:07,199
the default one is 1.8 java version

539
00:17:05,119 --> 00:17:08,958
so i want to also highlight here uh when

540
00:17:07,199 --> 00:17:10,000
you do this the wizard version you

541
00:17:08,959 --> 00:17:11,919
actually see something

542
00:17:10,000 --> 00:17:13,919
like a common code the kotlin native ios

543
00:17:11,919 --> 00:17:15,839
code the android uh and the

544
00:17:13,919 --> 00:17:17,600
carton jvm code and then there's the i

545
00:17:15,839 --> 00:17:20,639
specific code which is all split into

546
00:17:17,599 --> 00:17:20,639
different modules right now

547
00:17:21,199 --> 00:17:24,400
the function calls as you will define

548
00:17:23,199 --> 00:17:27,199
you will mention them

549
00:17:24,400 --> 00:17:28,960
as expect in the common code only in the

550
00:17:27,199 --> 00:17:30,400
content native is code you will provide

551
00:17:28,960 --> 00:17:32,480
the actual implementation

552
00:17:30,400 --> 00:17:35,840
in the android and kotlin jvm code you

553
00:17:32,480 --> 00:17:35,840
will provide the actual implementation

554
00:17:36,240 --> 00:17:40,640
the magic behind how all of this is

555
00:17:38,320 --> 00:17:42,720
tying together is is actually using this

556
00:17:40,640 --> 00:17:44,080
this plugin that you have you just need

557
00:17:42,720 --> 00:17:45,600
to it is defined in your apps

558
00:17:44,080 --> 00:17:47,039
build.gradle file

559
00:17:45,600 --> 00:17:48,959
once you define it you all have

560
00:17:47,039 --> 00:17:51,280
functionalities open like these you can

561
00:17:48,960 --> 00:17:53,919
define the platforms you can target to

562
00:17:51,280 --> 00:17:56,160
uh under the section kotlin you can say

563
00:17:53,919 --> 00:17:57,280
is x64 which right now is targeting the

564
00:17:56,160 --> 00:17:59,440
ios

565
00:17:57,280 --> 00:18:00,720
emulator i could just go ahead and do tv

566
00:17:59,440 --> 00:18:02,720
os x64

567
00:18:00,720 --> 00:18:03,760
and that would do the same thing but for

568
00:18:02,720 --> 00:18:05,760
the tv

569
00:18:03,760 --> 00:18:06,960
os operating system for the emulator

570
00:18:05,760 --> 00:18:08,240
version

571
00:18:06,960 --> 00:18:09,679
and then you define the source set

572
00:18:08,240 --> 00:18:11,039
basically defining your dependencies

573
00:18:09,679 --> 00:18:13,280
which you can totally do

574
00:18:11,039 --> 00:18:15,120
as you would do in a standard gradle

575
00:18:13,280 --> 00:18:17,200
project

576
00:18:15,120 --> 00:18:18,879
then because you now want to run your

577
00:18:17,200 --> 00:18:21,039
application you set up the project

578
00:18:18,880 --> 00:18:23,200
now you need to open up android studio

579
00:18:21,039 --> 00:18:24,640
and select the app module the one that

580
00:18:23,200 --> 00:18:27,440
has your command code too

581
00:18:24,640 --> 00:18:28,720
you will select that run this through

582
00:18:27,440 --> 00:18:30,640
you as you can see there are different

583
00:18:28,720 --> 00:18:32,640
modules you're synchronizing

584
00:18:30,640 --> 00:18:34,160
and then it will be able to execute the

585
00:18:32,640 --> 00:18:35,919
application super easily

586
00:18:34,160 --> 00:18:38,000
that's nice because now we are going to

587
00:18:35,919 --> 00:18:40,320
try doing this same with ios

588
00:18:38,000 --> 00:18:41,360
so with ioc again you go and then you

589
00:18:40,320 --> 00:18:43,439
select

590
00:18:41,360 --> 00:18:45,039
the folder that is called ios app this

591
00:18:43,440 --> 00:18:46,799
is outside your app module

592
00:18:45,039 --> 00:18:48,879
in your root project and this is the one

593
00:18:46,799 --> 00:18:50,480
you need to select when you do that

594
00:18:48,880 --> 00:18:52,160
you would assume everything would work

595
00:18:50,480 --> 00:18:55,039
but it does not again

596
00:18:52,160 --> 00:18:56,000
uh turns out that's because they use a

597
00:18:55,039 --> 00:18:58,640
relative path to

598
00:18:56,000 --> 00:19:00,080
reference something that doesn't exist

599
00:18:58,640 --> 00:19:00,640
which is also weird they should not do

600
00:19:00,080 --> 00:19:02,399
this

601
00:19:00,640 --> 00:19:04,000
uh it should come part of the wizard but

602
00:19:02,400 --> 00:19:05,520
it's not so you have this error this

603
00:19:04,000 --> 00:19:06,880
error literally says that you have

604
00:19:05,520 --> 00:19:08,799
something that's missing

605
00:19:06,880 --> 00:19:10,720
and that's a greater view file right

606
00:19:08,799 --> 00:19:12,799
that's not there so i need to put a

607
00:19:10,720 --> 00:19:14,080
grading wrapper in the root project

608
00:19:12,799 --> 00:19:16,000
and i'm going to do that by calling

609
00:19:14,080 --> 00:19:16,639
gradle wrapper and it will create that

610
00:19:16,000 --> 00:19:18,240
for me

611
00:19:16,640 --> 00:19:20,080
that basically allows me to go back to

612
00:19:18,240 --> 00:19:21,520
into xcode hit run

613
00:19:20,080 --> 00:19:23,600
and be able to run the app at the same

614
00:19:21,520 --> 00:19:24,000
time so now you have an app running on

615
00:19:23,600 --> 00:19:26,639
android

616
00:19:24,000 --> 00:19:27,840
and ios both um basically the whole

617
00:19:26,640 --> 00:19:29,679
project is functional

618
00:19:27,840 --> 00:19:31,360
you can go ahead and write code using

619
00:19:29,679 --> 00:19:32,080
android studio if you want or intellij

620
00:19:31,360 --> 00:19:34,320
idea

621
00:19:32,080 --> 00:19:36,639
uh you can just open up the content file

622
00:19:34,320 --> 00:19:38,799
provide the actual implementation

623
00:19:36,640 --> 00:19:41,039
or the more expected functions you would

624
00:19:38,799 --> 00:19:41,039
want

625
00:19:41,600 --> 00:19:44,959
so examples in the world i want to show

626
00:19:43,760 --> 00:19:46,400
this because there's

627
00:19:44,960 --> 00:19:48,000
a lot of questions going on do people

628
00:19:46,400 --> 00:19:50,160
use it in production or not like

629
00:19:48,000 --> 00:19:51,360
is this something uh that that we should

630
00:19:50,160 --> 00:19:52,799
not be tinkering with

631
00:19:51,360 --> 00:19:54,799
it turns out a lot of companies are

632
00:19:52,799 --> 00:19:57,360
doing that you can see a list of them

633
00:19:54,799 --> 00:19:58,960
all working with the links uh these all

634
00:19:57,360 --> 00:20:00,240
links to their blog post actually when

635
00:19:58,960 --> 00:20:01,039
you download these slides you can use

636
00:20:00,240 --> 00:20:04,240
them

637
00:20:01,039 --> 00:20:06,240
and read what they have been working on

638
00:20:04,240 --> 00:20:07,280
jetbrains has uh recently released

639
00:20:06,240 --> 00:20:09,840
spaces uh

640
00:20:07,280 --> 00:20:10,480
their whole this system here which

641
00:20:09,840 --> 00:20:12,240
allows to

642
00:20:10,480 --> 00:20:13,760
communicate with multiple teams so that

643
00:20:12,240 --> 00:20:15,600
is also working partly native

644
00:20:13,760 --> 00:20:17,200
scotland multiplatform and obviously

645
00:20:15,600 --> 00:20:18,840
touch lab is doing a lot of things in

646
00:20:17,200 --> 00:20:21,520
this area so you should totally follow

647
00:20:18,840 --> 00:20:23,360
them

648
00:20:21,520 --> 00:20:25,039
um they are cut in multi-platform

649
00:20:23,360 --> 00:20:25,760
libraries by the way you can get a list

650
00:20:25,039 --> 00:20:27,919
of these

651
00:20:25,760 --> 00:20:29,760
but here's the caveat here is that the

652
00:20:27,919 --> 00:20:31,760
ecosystem is still evolving

653
00:20:29,760 --> 00:20:33,919
uh the bigger problem is that not many

654
00:20:31,760 --> 00:20:35,039
libraries are available at your disposal

655
00:20:33,919 --> 00:20:36,480
and a lot of people those who are

656
00:20:35,039 --> 00:20:37,600
jumping into building these libraries

657
00:20:36,480 --> 00:20:40,080
are actually not targeting

658
00:20:37,600 --> 00:20:42,080
all the platforms for example you wanted

659
00:20:40,080 --> 00:20:42,480
to use a multi-platform library right

660
00:20:42,080 --> 00:20:45,918
now

661
00:20:42,480 --> 00:20:48,000
that targets say or kind of like does

662
00:20:45,919 --> 00:20:49,200
database saving and retrieval of data

663
00:20:48,000 --> 00:20:51,840
right

664
00:20:49,200 --> 00:20:53,360
but it does not target tv os but you

665
00:20:51,840 --> 00:20:55,520
wanted that functionality

666
00:20:53,360 --> 00:20:57,120
and be targeted to tvos well if the

667
00:20:55,520 --> 00:20:57,760
library doesn't support it it's useless

668
00:20:57,120 --> 00:20:59,600
for you

669
00:20:57,760 --> 00:21:01,200
right you can target for platform but

670
00:20:59,600 --> 00:21:03,280
not tv os in general

671
00:21:01,200 --> 00:21:04,720
so that's why not all libraries are

672
00:21:03,280 --> 00:21:08,158
actually targeting all the platform

673
00:21:04,720 --> 00:21:10,400
so that's a bit of a problem um

674
00:21:08,159 --> 00:21:11,200
that's most of the stuff there's a

675
00:21:10,400 --> 00:21:14,640
resource here

676
00:21:11,200 --> 00:21:16,880
this is like a like a i would say

677
00:21:14,640 --> 00:21:18,880
a uh the first thing is more a tutorial

678
00:21:16,880 --> 00:21:20,400
on the official kotlin lang site uh the

679
00:21:18,880 --> 00:21:20,880
second one is the example that i showed

680
00:21:20,400 --> 00:21:22,640
you

681
00:21:20,880 --> 00:21:25,120
uh what i do want to also show you is

682
00:21:22,640 --> 00:21:27,120
the thing that i was talking about

683
00:21:25,120 --> 00:21:28,479
this is how all the files look like and

684
00:21:27,120 --> 00:21:30,639
the implementation this is the same

685
00:21:28,480 --> 00:21:32,720
project as i was talking about

686
00:21:30,640 --> 00:21:34,799
there is a section where i actually call

687
00:21:32,720 --> 00:21:35,280
this function create application screen

688
00:21:34,799 --> 00:21:37,440
message

689
00:21:35,280 --> 00:21:39,760
which was running there and i provide

690
00:21:37,440 --> 00:21:41,679
the actual functionality here

691
00:21:39,760 --> 00:21:43,520
but some people might even say like what

692
00:21:41,679 --> 00:21:44,159
if i wanted to use swift ui that is also

693
00:21:43,520 --> 00:21:46,559
possible

694
00:21:44,159 --> 00:21:48,320
provided use it in a different way in

695
00:21:46,559 --> 00:21:49,840
this case you will see i'm including the

696
00:21:48,320 --> 00:21:50,639
shared code functionality the one that i

697
00:21:49,840 --> 00:21:53,280
was explaining

698
00:21:50,640 --> 00:21:54,720
way earlier than this and then i go

699
00:21:53,280 --> 00:21:56,480
ahead and i actually call the function

700
00:21:54,720 --> 00:21:58,400
here with the common kt file

701
00:21:56,480 --> 00:21:59,919
so you can also use with swift ui if you

702
00:21:58,400 --> 00:22:01,120
want if you have compose you can also

703
00:21:59,919 --> 00:22:02,880
use this work

704
00:22:01,120 --> 00:22:04,158
uh it should function without any

705
00:22:02,880 --> 00:22:05,600
problems uh

706
00:22:04,159 --> 00:22:07,760
i will put more examples in this

707
00:22:05,600 --> 00:22:10,240
repository so you can also obviously

708
00:22:07,760 --> 00:22:26,480
follow this along

709
00:22:10,240 --> 00:22:26,480
and that's it i guess thank you

