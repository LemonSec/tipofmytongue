1
00:00:05,759 --> 00:00:08,000
hi

2
00:00:06,080 --> 00:00:10,800
i'm julian apparently it's time to start

3
00:00:08,000 --> 00:00:14,400
now so um let's start

4
00:00:10,800 --> 00:00:16,880
um yeah so um this is me

5
00:00:14,400 --> 00:00:18,560
um i actually work for mozilla um i

6
00:00:16,880 --> 00:00:22,000
should perhaps point this out

7
00:00:18,560 --> 00:00:24,159
great great company to work for um

8
00:00:22,000 --> 00:00:25,519
so that they say for talks there's

9
00:00:24,160 --> 00:00:26,320
guidelines for talks and one thing you

10
00:00:25,519 --> 00:00:28,080
should never do

11
00:00:26,320 --> 00:00:30,080
at the start of a talk is apologize for

12
00:00:28,080 --> 00:00:31,038
how bad your slides are or how badly

13
00:00:30,080 --> 00:00:33,839
organized you are

14
00:00:31,039 --> 00:00:35,360
or how repetitious the slides are so

15
00:00:33,840 --> 00:00:37,920
anyway i apologize for

16
00:00:35,360 --> 00:00:39,840
um how repetitious my slides are

17
00:00:37,920 --> 00:00:42,399
especially the first few

18
00:00:39,840 --> 00:00:44,000
and i also apologize for your hardened

19
00:00:42,399 --> 00:00:46,800
compiler nuts in the room that

20
00:00:44,000 --> 00:00:48,480
i might say some stuff which you already

21
00:00:46,800 --> 00:00:52,800
know

22
00:00:48,480 --> 00:00:56,319
anyway um with no further ado let me

23
00:00:52,800 --> 00:00:58,319
proceed so this is about memcheck

24
00:00:56,320 --> 00:01:00,320
valverin's the most commonly used tool

25
00:00:58,320 --> 00:01:02,640
and it basically runs your program

26
00:01:00,320 --> 00:01:03,440
and as i'm sure you're mostly aware does

27
00:01:02,640 --> 00:01:06,560
two different

28
00:01:03,440 --> 00:01:07,600
sets of checks um one of which is it

29
00:01:06,560 --> 00:01:08,720
checks whether you're reading and

30
00:01:07,600 --> 00:01:10,880
writing

31
00:01:08,720 --> 00:01:12,080
memory in the correct or allowable

32
00:01:10,880 --> 00:01:15,759
places and that's

33
00:01:12,080 --> 00:01:17,520
pretty simple to figure out so

34
00:01:15,759 --> 00:01:19,200
i'm not talking about that the other

35
00:01:17,520 --> 00:01:21,439
thing it does is

36
00:01:19,200 --> 00:01:22,799
it checks whether you are doing branches

37
00:01:21,439 --> 00:01:24,880
and also

38
00:01:22,799 --> 00:01:26,799
making addresses and stuff like this

39
00:01:24,880 --> 00:01:28,479
based on undefined data

40
00:01:26,799 --> 00:01:30,400
because that's actually dangerous that

41
00:01:28,479 --> 00:01:33,039
may cause your program to crash or

42
00:01:30,400 --> 00:01:34,560
misbehave in general and that is a

43
00:01:33,040 --> 00:01:37,360
relatively

44
00:01:34,560 --> 00:01:40,159
a difficult problem by comparison so

45
00:01:37,360 --> 00:01:41,920
that's what i'm talking about today

46
00:01:40,159 --> 00:01:43,600
one of the things we tried to do with

47
00:01:41,920 --> 00:01:44,960
memcheck is always to have a very low

48
00:01:43,600 --> 00:01:48,320
false positive rate

49
00:01:44,960 --> 00:01:49,919
so when it says there is a problem here

50
00:01:48,320 --> 00:01:51,360
you're almost certain that there really

51
00:01:49,920 --> 00:01:52,880
is a problem here

52
00:01:51,360 --> 00:01:54,880
um and that i think that's important for

53
00:01:52,880 --> 00:01:58,560
developer productivity

54
00:01:54,880 --> 00:01:59,920
so um you know 2005 15 years ago

55
00:01:58,560 --> 00:02:02,479
everything was under control with the

56
00:01:59,920 --> 00:02:06,240
false positives no problem there

57
00:02:02,479 --> 00:02:07,439
ten years later we have these compilers

58
00:02:06,240 --> 00:02:09,840
clangs

59
00:02:07,439 --> 00:02:10,878
gcc and probably the intel compiler and

60
00:02:09,840 --> 00:02:13,360
everybody else being

61
00:02:10,878 --> 00:02:14,160
much more aggressive about optimizing

62
00:02:13,360 --> 00:02:16,720
and

63
00:02:14,160 --> 00:02:18,160
there was an increasing number of false

64
00:02:16,720 --> 00:02:21,680
positive

65
00:02:18,160 --> 00:02:24,560
undefined value checks being reported

66
00:02:21,680 --> 00:02:25,360
so we had to come up with a bunch of

67
00:02:24,560 --> 00:02:28,720
tricks

68
00:02:25,360 --> 00:02:28,720
or techniques to deal with these

69
00:02:28,959 --> 00:02:33,760
so as a summary of the rest of the talk

70
00:02:31,920 --> 00:02:36,640
i'll talk a little bit about some

71
00:02:33,760 --> 00:02:38,399
definedness tracking examples and like i

72
00:02:36,640 --> 00:02:38,879
say i apologize for repeating myself

73
00:02:38,400 --> 00:02:41,840
from the

74
00:02:38,879 --> 00:02:43,359
talk two years ago then i'll talk about

75
00:02:41,840 --> 00:02:44,720
the core problem today which is that

76
00:02:43,360 --> 00:02:47,680
compilers actually

77
00:02:44,720 --> 00:02:48,800
generate branches on undefined values in

78
00:02:47,680 --> 00:02:52,480
some

79
00:02:48,800 --> 00:02:55,040
some circumstances strange how it sounds

80
00:02:52,480 --> 00:02:57,518
and i'll show you what my my solution to

81
00:02:55,040 --> 00:02:57,519
this was

82
00:02:57,599 --> 00:03:03,040
so first some some basic stuff

83
00:03:01,360 --> 00:03:05,200
so memcheck is actually going to track

84
00:03:03,040 --> 00:03:06,560
the entire state of your process with a

85
00:03:05,200 --> 00:03:08,640
whole

86
00:03:06,560 --> 00:03:10,319
shadow state that means all the

87
00:03:08,640 --> 00:03:13,359
registers and all the memory

88
00:03:10,319 --> 00:03:16,238
each bit of state there has another

89
00:03:13,360 --> 00:03:17,440
bit of another bit which tracks the

90
00:03:16,239 --> 00:03:19,519
definedness of

91
00:03:17,440 --> 00:03:20,720
the corresponding bit in the real

92
00:03:19,519 --> 00:03:22,640
program

93
00:03:20,720 --> 00:03:24,799
and although it's not important we have

94
00:03:22,640 --> 00:03:25,839
one to mean undefined and zero to mean

95
00:03:24,799 --> 00:03:28,959
defined

96
00:03:25,840 --> 00:03:32,000
it actually generates faster faster

97
00:03:28,959 --> 00:03:34,640
instrumentation code

98
00:03:32,000 --> 00:03:37,120
when when the program does some basic

99
00:03:34,640 --> 00:03:40,079
operation like adds two numbers

100
00:03:37,120 --> 00:03:41,920
um memcheck does a kind of a shadow

101
00:03:40,080 --> 00:03:44,080
computation on the side

102
00:03:41,920 --> 00:03:45,200
which corresponds to it and i write it

103
00:03:44,080 --> 00:03:48,720
with these hashes

104
00:03:45,200 --> 00:03:49,119
or pound signs and so uh it's going to

105
00:03:48,720 --> 00:03:51,200
take

106
00:03:49,120 --> 00:03:53,439
you know the dividedness bits for x and

107
00:03:51,200 --> 00:03:55,760
they're defined in this bits of y

108
00:03:53,439 --> 00:03:57,120
and trying to compute what they define

109
00:03:55,760 --> 00:04:00,879
in this state for the

110
00:03:57,120 --> 00:04:05,360
resulting you know add added value

111
00:04:00,879 --> 00:04:05,760
is and mostly it just allows defined in

112
00:04:05,360 --> 00:04:07,439
this

113
00:04:05,760 --> 00:04:09,280
it just follows definingness through the

114
00:04:07,439 --> 00:04:12,239
program but

115
00:04:09,280 --> 00:04:14,000
and that only works until you get to

116
00:04:12,239 --> 00:04:15,680
some particular places where you really

117
00:04:14,000 --> 00:04:18,560
have to report an error if there's

118
00:04:15,680 --> 00:04:20,478
something undefined so

119
00:04:18,560 --> 00:04:21,680
those places are basically when you do a

120
00:04:20,478 --> 00:04:26,719
conditional branch

121
00:04:21,680 --> 00:04:26,720
that's the case that's important today

122
00:04:26,880 --> 00:04:30,880
it also checks for um undefined values

123
00:04:29,759 --> 00:04:32,800
in

124
00:04:30,880 --> 00:04:34,320
in addresses because that's obviously

125
00:04:32,800 --> 00:04:37,199
bad loading from on

126
00:04:34,320 --> 00:04:38,159
unknown addresses um and if you want to

127
00:04:37,199 --> 00:04:40,880
read more about

128
00:04:38,160 --> 00:04:43,280
the gory details there's this paper

129
00:04:40,880 --> 00:04:45,680
which you can

130
00:04:43,280 --> 00:04:48,799
basically explain to it's a bit old but

131
00:04:45,680 --> 00:04:52,400
you get the general idea from that

132
00:04:48,800 --> 00:04:53,199
so some simple example well very simple

133
00:04:52,400 --> 00:04:56,320
examples

134
00:04:53,199 --> 00:04:59,199
well how would we even do this

135
00:04:56,320 --> 00:05:00,320
so how would you how would you come up

136
00:04:59,199 --> 00:05:04,080
with the

137
00:05:00,320 --> 00:05:06,159
analysis which tracks undefined values

138
00:05:04,080 --> 00:05:08,240
so one thing we can say is that for

139
00:05:06,160 --> 00:05:10,720
every operation

140
00:05:08,240 --> 00:05:12,880
every arithmetic operation we know that

141
00:05:10,720 --> 00:05:13,280
we in principle you could implement it

142
00:05:12,880 --> 00:05:16,639
using

143
00:05:13,280 --> 00:05:18,320
and or not or it's actually you know

144
00:05:16,639 --> 00:05:20,080
nand and nor

145
00:05:18,320 --> 00:05:21,919
in real implementations but it doesn't

146
00:05:20,080 --> 00:05:25,120
doesn't matter

147
00:05:21,919 --> 00:05:27,198
and we know for

148
00:05:25,120 --> 00:05:29,360
all of these three fundamental

149
00:05:27,199 --> 00:05:30,560
operations exactly what the defined in

150
00:05:29,360 --> 00:05:32,880
this

151
00:05:30,560 --> 00:05:34,479
propagation is so here i really wish i

152
00:05:32,880 --> 00:05:37,280
was taller right

153
00:05:34,479 --> 00:05:37,599
so in particular for not we can see that

154
00:05:37,280 --> 00:05:39,758
we

155
00:05:37,600 --> 00:05:41,039
you take if you put an undefined bit

156
00:05:39,759 --> 00:05:43,440
then you're going to get a resulting

157
00:05:41,039 --> 00:05:46,960
undefined bit

158
00:05:43,440 --> 00:05:48,960
and for and well if you

159
00:05:46,960 --> 00:05:50,479
and one with an undefined bit you're

160
00:05:48,960 --> 00:05:52,000
going to get an undefined bit which is

161
00:05:50,479 --> 00:05:53,520
not surprising

162
00:05:52,000 --> 00:05:55,919
but the important thing to know about

163
00:05:53,520 --> 00:05:57,758
and is that if you and

164
00:05:55,919 --> 00:06:00,560
zero with an undefined bit then you get

165
00:05:57,759 --> 00:06:03,919
zero so it actually

166
00:06:00,560 --> 00:06:06,080
removes undefined industry in the system

167
00:06:03,919 --> 00:06:08,159
and intuitively we kind of know that

168
00:06:06,080 --> 00:06:11,280
because we spend all day long you know

169
00:06:08,160 --> 00:06:12,720
writing bit mask you know and

170
00:06:11,280 --> 00:06:14,000
you've pulled this value out of memory

171
00:06:12,720 --> 00:06:15,440
and and out the bits you don't want to

172
00:06:14,000 --> 00:06:18,240
see all the bits that are

173
00:06:15,440 --> 00:06:18,240
kind of undefined

174
00:06:18,639 --> 00:06:21,759
so we could actually in fact in

175
00:06:20,639 --> 00:06:26,000
principle

176
00:06:21,759 --> 00:06:28,000
derive the um exact defining this

177
00:06:26,000 --> 00:06:30,000
behavior for all sorts of operations

178
00:06:28,000 --> 00:06:31,199
like comparisons and subtractions and

179
00:06:30,000 --> 00:06:33,680
whatever

180
00:06:31,199 --> 00:06:36,560
from these three rules um i would say

181
00:06:33,680 --> 00:06:39,039
that exclusive or is a bit of a

182
00:06:36,560 --> 00:06:40,240
an exception but that's out of the

183
00:06:39,039 --> 00:06:42,000
picture

184
00:06:40,240 --> 00:06:43,919
uh being practiced as completely

185
00:06:42,000 --> 00:06:47,199
infeasible so um

186
00:06:43,919 --> 00:06:48,719
impeacably expensive so we're gonna do

187
00:06:47,199 --> 00:06:51,039
some cheap approximations which i'll

188
00:06:48,720 --> 00:06:52,880
show you in the next slide

189
00:06:51,039 --> 00:06:54,479
and the reason the cheap approximations

190
00:06:52,880 --> 00:06:57,199
work most of the time

191
00:06:54,479 --> 00:06:59,120
is because i think it's actually really

192
00:06:57,199 --> 00:07:00,560
hard for humans to reason about

193
00:06:59,120 --> 00:07:02,720
arithmetic operations

194
00:07:00,560 --> 00:07:03,599
on a mixture of defined and undefined

195
00:07:02,720 --> 00:07:07,520
bits

196
00:07:03,599 --> 00:07:11,759
so and that includes compiler writers

197
00:07:07,520 --> 00:07:12,560
so especially compiler writers over here

198
00:07:11,759 --> 00:07:15,520
maybe

199
00:07:12,560 --> 00:07:16,639
so that means that they don't actually

200
00:07:15,520 --> 00:07:18,639
happen very often

201
00:07:16,639 --> 00:07:21,599
or they happen only in very limited set

202
00:07:18,639 --> 00:07:21,599
of scenarios

203
00:07:22,479 --> 00:07:26,639
so here's a good example this is integer

204
00:07:24,160 --> 00:07:26,639
edition

205
00:07:26,720 --> 00:07:31,360
and i have this running example where

206
00:07:28,400 --> 00:07:35,198
i'm adding one zero undefined zero to

207
00:07:31,360 --> 00:07:38,000
zero zero zero one and there's three

208
00:07:35,199 --> 00:07:40,240
potential options we could take here the

209
00:07:38,000 --> 00:07:41,840
simplest is just to say if any

210
00:07:40,240 --> 00:07:43,440
input bit is undefined then the whole

211
00:07:41,840 --> 00:07:45,039
output is undefined

212
00:07:43,440 --> 00:07:46,639
so that's what the first first line

213
00:07:45,039 --> 00:07:49,360
shows you

214
00:07:46,639 --> 00:07:51,120
but this is actually completely useless

215
00:07:49,360 --> 00:07:53,840
in practice

216
00:07:51,120 --> 00:07:54,240
because what we will often do is pull

217
00:07:53,840 --> 00:07:56,960
out

218
00:07:54,240 --> 00:07:57,360
from memory so do a 64-bit load of which

219
00:07:56,960 --> 00:07:59,599
we

220
00:07:57,360 --> 00:08:01,440
actually only care about the lower 16

221
00:07:59,599 --> 00:08:04,639
bits and then add

222
00:08:01,440 --> 00:08:06,479
another 16 bit value onto the the 64 bit

223
00:08:04,639 --> 00:08:08,560
value we just pulled out

224
00:08:06,479 --> 00:08:10,840
and we just don't care about the top 48

225
00:08:08,560 --> 00:08:12,639
bits we only care about the lower 16

226
00:08:10,840 --> 00:08:14,479
bits

227
00:08:12,639 --> 00:08:16,160
so this is no good because in that kind

228
00:08:14,479 --> 00:08:17,599
of scenario

229
00:08:16,160 --> 00:08:21,039
it would say the whole thing is

230
00:08:17,599 --> 00:08:23,199
undefined but that's not true

231
00:08:21,039 --> 00:08:24,318
so then the next best step is to say

232
00:08:23,199 --> 00:08:26,319
well

233
00:08:24,319 --> 00:08:28,639
we know that undefined at this in

234
00:08:26,319 --> 00:08:31,120
addition only propagates leftwards

235
00:08:28,639 --> 00:08:32,159
up the word uh you know to more

236
00:08:31,120 --> 00:08:35,360
significant bits

237
00:08:32,159 --> 00:08:35,760
because addition only depends on the

238
00:08:35,360 --> 00:08:39,519
bits

239
00:08:35,760 --> 00:08:42,080
to the right of myself so to speak

240
00:08:39,519 --> 00:08:43,440
that makes sense so in this case we

241
00:08:42,080 --> 00:08:46,800
would

242
00:08:43,440 --> 00:08:47,760
say that these two bits produce this one

243
00:08:46,800 --> 00:08:50,959
that's fine

244
00:08:47,760 --> 00:08:54,640
and then we have a undefined value so

245
00:08:50,959 --> 00:08:57,279
from there upwards it's all undefined

246
00:08:54,640 --> 00:08:59,360
that sounds um reasonable but there's a

247
00:08:57,279 --> 00:09:01,839
problem which is that um

248
00:08:59,360 --> 00:09:03,120
clang and i think gcc probably are

249
00:09:01,839 --> 00:09:06,080
cleverer than that

250
00:09:03,120 --> 00:09:07,600
and they know that a single and a

251
00:09:06,080 --> 00:09:11,120
defined zero will stop

252
00:09:07,600 --> 00:09:12,000
leftward propagation and they actually

253
00:09:11,120 --> 00:09:15,680
sometimes

254
00:09:12,000 --> 00:09:19,040
rely on this so in this example

255
00:09:15,680 --> 00:09:20,560
we have a zero plus

256
00:09:19,040 --> 00:09:22,079
undefined is going to produce an

257
00:09:20,560 --> 00:09:24,719
undefined bit

258
00:09:22,080 --> 00:09:25,760
but there's no carry out of that to the

259
00:09:24,720 --> 00:09:28,959
next position up

260
00:09:25,760 --> 00:09:33,360
so these two bits remain

261
00:09:28,959 --> 00:09:36,560
defined in the output and

262
00:09:33,360 --> 00:09:37,519
memcheck will instrument additions

263
00:09:36,560 --> 00:09:40,640
accordingly

264
00:09:37,519 --> 00:09:42,320
and generate um you know x86 code to

265
00:09:40,640 --> 00:09:45,439
actually

266
00:09:42,320 --> 00:09:47,120
uh implement those that instrumentation

267
00:09:45,440 --> 00:09:48,480
so you have the cost of like roughly

268
00:09:47,120 --> 00:09:51,680
three five

269
00:09:48,480 --> 00:09:54,560
and ten instructions this in particular

270
00:09:51,680 --> 00:09:58,959
is kind of expensive to do so

271
00:09:54,560 --> 00:09:58,959
i try and avoid it where possible

272
00:10:00,480 --> 00:10:05,680
right so yes we're trying to um

273
00:10:04,480 --> 00:10:07,920
we're in the game of choosing

274
00:10:05,680 --> 00:10:09,199
approximations um from real world

275
00:10:07,920 --> 00:10:11,040
experience

276
00:10:09,200 --> 00:10:12,560
and i really really wish i was taller

277
00:10:11,040 --> 00:10:14,319
here

278
00:10:12,560 --> 00:10:15,760
for the uh for the case of adding and

279
00:10:14,320 --> 00:10:19,040
subtracting

280
00:10:15,760 --> 00:10:19,439
um in general you nowadays you have to

281
00:10:19,040 --> 00:10:23,439
do

282
00:10:19,440 --> 00:10:26,399
the most expensive analyses because

283
00:10:23,440 --> 00:10:26,800
sometimes clang will set a bit in a word

284
00:10:26,399 --> 00:10:30,320
by

285
00:10:26,800 --> 00:10:33,279
adding uh

286
00:10:30,320 --> 00:10:33,680
it adds just a word with only one bit

287
00:10:33,279 --> 00:10:36,000
set

288
00:10:33,680 --> 00:10:38,160
so it can use an lea instruction and

289
00:10:36,000 --> 00:10:39,760
save a register or some stuff like that

290
00:10:38,160 --> 00:10:41,839
i don't know

291
00:10:39,760 --> 00:10:43,760
um but the problem is that's actually

292
00:10:41,839 --> 00:10:45,360
really expensive and most edition

293
00:10:43,760 --> 00:10:47,040
doesn't need that

294
00:10:45,360 --> 00:10:49,440
most addition is actually for computing

295
00:10:47,040 --> 00:10:52,000
address for computing addresses

296
00:10:49,440 --> 00:10:53,680
so memtech will try and make some local

297
00:10:52,000 --> 00:10:56,079
analysis to see which

298
00:10:53,680 --> 00:10:58,839
editions are used only for computing

299
00:10:56,079 --> 00:11:00,239
addresses and do a cheaper

300
00:10:58,839 --> 00:11:03,120
instrumentation

301
00:11:00,240 --> 00:11:04,800
for and and all we've seen that um there

302
00:11:03,120 --> 00:11:05,440
are these important cases with ending

303
00:11:04,800 --> 00:11:07,439
with zero

304
00:11:05,440 --> 00:11:09,440
and oring with one produces a defined

305
00:11:07,440 --> 00:11:10,959
result and that's a really important we

306
00:11:09,440 --> 00:11:15,279
use that all the time for kind of shift

307
00:11:10,959 --> 00:11:19,119
to shift and mask style operations

308
00:11:15,279 --> 00:11:21,120
for integer equality again

309
00:11:19,120 --> 00:11:22,800
we have the situation now where

310
00:11:21,120 --> 00:11:25,200
compilers will

311
00:11:22,800 --> 00:11:26,079
routinely generate comparisons where

312
00:11:25,200 --> 00:11:30,079
part of the

313
00:11:26,079 --> 00:11:32,959
integer comparisons integer equality

314
00:11:30,079 --> 00:11:35,199
where part of the inputs are undefined

315
00:11:32,959 --> 00:11:38,239
and that's actually okay

316
00:11:35,200 --> 00:11:40,399
providing that you can find at some bit

317
00:11:38,240 --> 00:11:42,240
index in the two words

318
00:11:40,399 --> 00:11:44,880
two bits one of which is one and one of

319
00:11:42,240 --> 00:11:46,880
which is zero and they're both defined

320
00:11:44,880 --> 00:11:48,079
because that means that the whole

321
00:11:46,880 --> 00:11:51,200
comparison says

322
00:11:48,079 --> 00:11:53,439
no they're not the same

323
00:11:51,200 --> 00:11:56,240
it takes a bit of thinking about but

324
00:11:53,440 --> 00:11:59,360
it's true

325
00:11:56,240 --> 00:12:01,120
and so for example um gcc will sometimes

326
00:11:59,360 --> 00:12:03,279
do comparisons on

327
00:12:01,120 --> 00:12:05,120
um a structure with two elements which

328
00:12:03,279 --> 00:12:08,800
will fit in a single word

329
00:12:05,120 --> 00:12:10,560
by pulling both both out into a single

330
00:12:08,800 --> 00:12:14,479
register and then comparing

331
00:12:10,560 --> 00:12:16,239
even if one part is undefined and shifts

332
00:12:14,480 --> 00:12:18,079
are tracked exactly because shifts are

333
00:12:16,240 --> 00:12:21,839
really easy to track

334
00:12:18,079 --> 00:12:25,120
exactly everything else is approximated

335
00:12:21,839 --> 00:12:26,720
so basically we say that any

336
00:12:25,120 --> 00:12:29,440
input undefined values produce a

337
00:12:26,720 --> 00:12:33,360
completely output undefined output value

338
00:12:29,440 --> 00:12:33,839
and that's fine but you notice also

339
00:12:33,360 --> 00:12:37,200
there are

340
00:12:33,839 --> 00:12:38,639
many many examples many ways which it's

341
00:12:37,200 --> 00:12:41,600
inexact and could easily

342
00:12:38,639 --> 00:12:43,760
be confused so it doesn't know that

343
00:12:41,600 --> 00:12:46,880
multiplying an undefined value by zero

344
00:12:43,760 --> 00:12:51,439
produces a defined value but again

345
00:12:46,880 --> 00:12:52,800
nobody really uses that in practice and

346
00:12:51,440 --> 00:12:54,880
here's another example i just came

347
00:12:52,800 --> 00:12:58,079
across the other day this is

348
00:12:54,880 --> 00:12:58,880
quite subtle if we have some number x

349
00:12:58,079 --> 00:13:02,479
and we're doing an

350
00:12:58,880 --> 00:13:04,240
unsigned greater than or equal to

351
00:13:02,480 --> 00:13:06,639
of a bit pattern which ends in a

352
00:13:04,240 --> 00:13:10,480
sequence of zeros

353
00:13:06,639 --> 00:13:13,120
then it's only the bits that correspond

354
00:13:10,480 --> 00:13:15,680
bits in x that correspond to that part

355
00:13:13,120 --> 00:13:18,000
which actually define the result

356
00:13:15,680 --> 00:13:20,000
so the lower four bits of x can be

357
00:13:18,000 --> 00:13:22,720
undefined here

358
00:13:20,000 --> 00:13:25,600
here can be undefined and you still get

359
00:13:22,720 --> 00:13:25,600
the defined result

360
00:13:26,079 --> 00:13:29,120
so this is really subtle because if that

361
00:13:28,160 --> 00:13:31,199
was for example

362
00:13:29,120 --> 00:13:33,760
greater than rather than greater than or

363
00:13:31,200 --> 00:13:35,200
equal to then that's not true

364
00:13:33,760 --> 00:13:38,720
and probably if that was a sign

365
00:13:35,200 --> 00:13:41,839
comparison that is also not true

366
00:13:38,720 --> 00:13:46,079
so anyway it was all fine no problem

367
00:13:41,839 --> 00:13:48,240
until this happened

368
00:13:46,079 --> 00:13:49,599
and we started to see this i mean in

369
00:13:48,240 --> 00:13:51,279
various places but

370
00:13:49,600 --> 00:13:53,199
because of where i work i started to see

371
00:13:51,279 --> 00:13:56,639
this in the firefox um or the

372
00:13:53,199 --> 00:13:57,760
gecko source tree a lot about five years

373
00:13:56,639 --> 00:14:00,880
ago

374
00:13:57,760 --> 00:14:02,240
so here's a typical example we get we

375
00:14:00,880 --> 00:14:05,760
want to basically

376
00:14:02,240 --> 00:14:07,360
call compute something which is going to

377
00:14:05,760 --> 00:14:10,880
do some kind of operation

378
00:14:07,360 --> 00:14:11,440
and possibly write the result of the

379
00:14:10,880 --> 00:14:14,880
operation

380
00:14:11,440 --> 00:14:16,800
in the address that you've provided

381
00:14:14,880 --> 00:14:18,240
and it also is going to return some kind

382
00:14:16,800 --> 00:14:21,120
of flag indicating in

383
00:14:18,240 --> 00:14:21,920
success or failure this is very very

384
00:14:21,120 --> 00:14:25,120
common

385
00:14:21,920 --> 00:14:26,079
in gecko code where you say you know do

386
00:14:25,120 --> 00:14:28,320
this and if you get an

387
00:14:26,079 --> 00:14:31,839
error then if you don't have an error

388
00:14:28,320 --> 00:14:31,839
then do the next thing

389
00:14:33,600 --> 00:14:38,320
and we were seeing complaints on the you

390
00:14:36,079 --> 00:14:40,399
know the the tester

391
00:14:38,320 --> 00:14:41,839
anything why is this this is really

392
00:14:40,399 --> 00:14:42,800
strange because the code is actually

393
00:14:41,839 --> 00:14:44,399
correct

394
00:14:42,800 --> 00:14:46,000
and once you look at the disassembly

395
00:14:44,399 --> 00:14:47,680
it's clear that it's actually switched

396
00:14:46,000 --> 00:14:49,279
the order of the compare the compiler

397
00:14:47,680 --> 00:14:50,000
has switched the order of the comparison

398
00:14:49,279 --> 00:14:51,600
around

399
00:14:50,000 --> 00:14:53,760
so it's actually checking the result

400
00:14:51,600 --> 00:14:57,120
value before

401
00:14:53,760 --> 00:14:59,360
it's checking this is it okay actually

402
00:14:57,120 --> 00:15:02,000
okay value

403
00:14:59,360 --> 00:15:03,600
and you think well that's like that

404
00:15:02,000 --> 00:15:07,279
can't be right

405
00:15:03,600 --> 00:15:10,959
but actually it is right if

406
00:15:07,279 --> 00:15:12,399
this if this is actually kind of hard to

407
00:15:10,959 --> 00:15:15,599
get your head around but

408
00:15:12,399 --> 00:15:18,639
in general using the c lazy

409
00:15:15,600 --> 00:15:19,279
and semantics you can actually switch an

410
00:15:18,639 --> 00:15:22,959
a

411
00:15:19,279 --> 00:15:23,760
and b around like that if you can prove

412
00:15:22,959 --> 00:15:26,160
that

413
00:15:23,760 --> 00:15:28,639
this is always false whenever that's

414
00:15:26,160 --> 00:15:31,600
undefined

415
00:15:28,639 --> 00:15:33,759
so if that's undefined then you're

416
00:15:31,600 --> 00:15:36,800
guaranteed that this is always false

417
00:15:33,759 --> 00:15:38,880
so the whole thing is false

418
00:15:36,800 --> 00:15:40,160
and it's really scary and don't ask me

419
00:15:38,880 --> 00:15:42,079
why gcc and clang

420
00:15:40,160 --> 00:15:44,319
do this i just do this that's all i care

421
00:15:42,079 --> 00:15:44,319
about

422
00:15:44,399 --> 00:15:49,440
there's another actually um condition

423
00:15:47,519 --> 00:15:51,199
here which is also b must not have any

424
00:15:49,440 --> 00:15:53,440
side effects because you're executing it

425
00:15:51,199 --> 00:15:57,120
speculatively so it can't do any stalls

426
00:15:53,440 --> 00:15:57,680
or i guess things that would cause a

427
00:15:57,120 --> 00:16:02,320
visible

428
00:15:57,680 --> 00:16:02,319
change of behavior but again

429
00:16:03,759 --> 00:16:11,360
it seems to be correct unfortunately

430
00:16:09,040 --> 00:16:12,079
so so okay the both the program is

431
00:16:11,360 --> 00:16:14,320
correct

432
00:16:12,079 --> 00:16:15,758
and the compiler is correct i should

433
00:16:14,320 --> 00:16:17,519
maybe say the reason it can

434
00:16:15,759 --> 00:16:19,680
and do this i think is because it

435
00:16:17,519 --> 00:16:22,240
analyzes compute something i assume it's

436
00:16:19,680 --> 00:16:26,239
some kind of inter-procedural analysis

437
00:16:22,240 --> 00:16:26,240
which from which it knows that

438
00:16:26,399 --> 00:16:33,519
how does this go whenever result

439
00:16:29,920 --> 00:16:34,839
is not written to then the return value

440
00:16:33,519 --> 00:16:37,680
of the function is

441
00:16:34,839 --> 00:16:38,639
false i can't think of another way that

442
00:16:37,680 --> 00:16:39,920
that can be correct

443
00:16:38,639 --> 00:16:43,120
you see the other thing that can write

444
00:16:39,920 --> 00:16:46,160
your results is compute something

445
00:16:43,120 --> 00:16:48,000
yeah i mean i'm guessing and it kind of

446
00:16:46,160 --> 00:16:49,839
doesn't matter

447
00:16:48,000 --> 00:16:51,680
anyway so nevertheless the whole thing

448
00:16:49,839 --> 00:16:53,279
is correct so why is memcheck reporting

449
00:16:51,680 --> 00:16:54,319
errors well the answer to that is real

450
00:16:53,279 --> 00:16:56,720
simple

451
00:16:54,320 --> 00:16:57,759
and i apologize here to the compiler

452
00:16:56,720 --> 00:17:01,600
crew

453
00:16:57,759 --> 00:17:03,680
um basically the problem is that memphis

454
00:17:01,600 --> 00:17:05,360
unit of analysis is a basic block which

455
00:17:03,680 --> 00:17:07,438
is just a straight line

456
00:17:05,359 --> 00:17:09,599
piece of code which usually ends in a

457
00:17:07,439 --> 00:17:13,439
conditional branch

458
00:17:09,599 --> 00:17:15,039
and it that is the scope of the analysis

459
00:17:13,439 --> 00:17:16,959
and it assumes that every conditional

460
00:17:15,039 --> 00:17:20,079
branch is important

461
00:17:16,959 --> 00:17:21,760
which always used to be true up until

462
00:17:20,079 --> 00:17:25,520
this happened

463
00:17:21,760 --> 00:17:30,000
so this kind of structure here becomes

464
00:17:25,520 --> 00:17:32,639
essentially four basic blocks and

465
00:17:30,000 --> 00:17:34,320
in the transform case we're doing

466
00:17:32,640 --> 00:17:35,600
compute something doing a comparison

467
00:17:34,320 --> 00:17:38,080
here

468
00:17:35,600 --> 00:17:39,520
and so it says well this is undefined so

469
00:17:38,080 --> 00:17:41,360
i'm going to complain and then

470
00:17:39,520 --> 00:17:42,960
here's the sort of the fix up comparison

471
00:17:41,360 --> 00:17:45,520
which makes it harmless

472
00:17:42,960 --> 00:17:48,000
and you know you wind up here when you

473
00:17:45,520 --> 00:17:51,600
would have got there anyway

474
00:17:48,000 --> 00:17:54,880
so that's bad

475
00:17:51,600 --> 00:17:54,879
so i wasn't really sure what to do

476
00:17:55,200 --> 00:17:59,440
yeah the problem is essentially mem tech

477
00:17:58,160 --> 00:18:02,559
can't see over

478
00:17:59,440 --> 00:18:04,480
multiple basic blocks and that that

479
00:18:02,559 --> 00:18:06,480
assumption is deeply wired into the

480
00:18:04,480 --> 00:18:08,240
architecture of the all of valgrind

481
00:18:06,480 --> 00:18:10,080
that is essentially a basic block at a

482
00:18:08,240 --> 00:18:13,200
time jet

483
00:18:10,080 --> 00:18:14,480
and an instrumentation system

484
00:18:13,200 --> 00:18:16,720
so what was i going to do well i wasn't

485
00:18:14,480 --> 00:18:19,039
really sure there seemed to be some

486
00:18:16,720 --> 00:18:20,080
really complex thing you could do here

487
00:18:19,039 --> 00:18:22,400
where

488
00:18:20,080 --> 00:18:24,080
it's like yeah we can wait till we come

489
00:18:22,400 --> 00:18:26,080
back to the point where the

490
00:18:24,080 --> 00:18:28,799
flows come back together which is the

491
00:18:26,080 --> 00:18:30,960
immediate post dominator of the branch

492
00:18:28,799 --> 00:18:32,799
and then if the machine state is not

493
00:18:30,960 --> 00:18:34,320
changed in

494
00:18:32,799 --> 00:18:36,480
and it's like no way that's way too

495
00:18:34,320 --> 00:18:39,678
complex i can never make that work

496
00:18:36,480 --> 00:18:41,600
and even if i did it was going to be way

497
00:18:39,679 --> 00:18:44,000
too slow

498
00:18:41,600 --> 00:18:46,320
so it's like i don't have a solution to

499
00:18:44,000 --> 00:18:47,760
that and i did a talk here two years ago

500
00:18:46,320 --> 00:18:50,799
which basically said i don't have a

501
00:18:47,760 --> 00:18:50,799
solution to this problem

502
00:18:50,960 --> 00:18:55,520
so summer 2018 i was kind of depressed

503
00:18:54,160 --> 00:18:56,880
because i thought it was like

504
00:18:55,520 --> 00:18:59,360
well this is the end of the road for

505
00:18:56,880 --> 00:19:02,640
memcheck it's like memcheck defeated by

506
00:18:59,360 --> 00:19:05,760
optimizing compilers after 15 years of

507
00:19:02,640 --> 00:19:08,640
you know 15 years of valiantly

508
00:19:05,760 --> 00:19:11,039
struggling against optimizations

509
00:19:08,640 --> 00:19:12,960
and then it was winter and winter sucks

510
00:19:11,039 --> 00:19:16,160
i don't like winter march so i was

511
00:19:12,960 --> 00:19:18,000
still depressed and then this

512
00:19:16,160 --> 00:19:20,000
summer i think in my garden and i'm

513
00:19:18,000 --> 00:19:21,840
thinking that's funny

514
00:19:20,000 --> 00:19:23,360
i'm sure i already solved this problem

515
00:19:21,840 --> 00:19:27,678
once

516
00:19:23,360 --> 00:19:31,120
yeah this is actually the same

517
00:19:27,679 --> 00:19:32,240
deal as for and where and the zero and

518
00:19:31,120 --> 00:19:35,678
undefined produces

519
00:19:32,240 --> 00:19:36,720
your defined result the problem is that

520
00:19:35,679 --> 00:19:39,440
the and has been

521
00:19:36,720 --> 00:19:39,919
separated out over multiple basic blocks

522
00:19:39,440 --> 00:19:42,720
so

523
00:19:39,919 --> 00:19:44,880
um that value pure value flow

524
00:19:42,720 --> 00:19:48,559
instrumentation

525
00:19:44,880 --> 00:19:52,240
uh doesn't it doesn't kick in and

526
00:19:48,559 --> 00:19:54,960
won't remove the error so it's like

527
00:19:52,240 --> 00:19:58,480
all right what we need to do is recover

528
00:19:54,960 --> 00:19:58,480
or reconstruct the end

529
00:19:59,600 --> 00:20:02,879
and thought well how the hell am i going

530
00:20:00,960 --> 00:20:06,400
to do that

531
00:20:02,880 --> 00:20:09,520
so here's the plan right it's actually

532
00:20:06,400 --> 00:20:13,039
a real simple plan in principle

533
00:20:09,520 --> 00:20:14,559
if if we see a basic block which is

534
00:20:13,039 --> 00:20:18,080
essentially what you would get from

535
00:20:14,559 --> 00:20:18,080
compiling an and

536
00:20:18,720 --> 00:20:25,360
a a a two-armed condition like this

537
00:20:21,919 --> 00:20:28,640
right then we're gonna transform it into

538
00:20:25,360 --> 00:20:32,799
this which is has a single condition

539
00:20:28,640 --> 00:20:34,000
here so it requires doing more analysis

540
00:20:32,799 --> 00:20:37,280
in the front-end

541
00:20:34,000 --> 00:20:38,559
front-end pipeline of valve so

542
00:20:37,280 --> 00:20:40,399
in particular we need to see this

543
00:20:38,559 --> 00:20:42,720
structure where you have this you know

544
00:20:40,400 --> 00:20:46,000
first condition and the second condition

545
00:20:42,720 --> 00:20:48,159
and they both you know in both cases the

546
00:20:46,000 --> 00:20:50,799
false side leads to one place

547
00:20:48,159 --> 00:20:51,360
and the true side leads to another place

548
00:20:50,799 --> 00:20:54,480
that's

549
00:20:51,360 --> 00:20:56,879
idiomatic translation

550
00:20:54,480 --> 00:20:58,640
um and so we're going and then we

551
00:20:56,880 --> 00:20:59,520
basically going to merge these two big

552
00:20:58,640 --> 00:21:04,320
blocks

553
00:20:59,520 --> 00:21:06,158
giving that block but um

554
00:21:04,320 --> 00:21:07,520
so uh maybe i can point with this

555
00:21:06,159 --> 00:21:10,720
actually

556
00:21:07,520 --> 00:21:15,039
so hey what

557
00:21:10,720 --> 00:21:17,919
oh what a brilliant idea sorry

558
00:21:15,039 --> 00:21:18,960
yeah yeah good good no seriously i

559
00:21:17,919 --> 00:21:23,120
hadn't thought of that

560
00:21:18,960 --> 00:21:25,360
so uh we have uh now this combined c1

561
00:21:23,120 --> 00:21:26,639
and c2 which is a value and

562
00:21:25,360 --> 00:21:29,039
and we can just do our accurate

563
00:21:26,640 --> 00:21:30,640
instrumentation and it's fine

564
00:21:29,039 --> 00:21:32,158
but we do have to be a little bit

565
00:21:30,640 --> 00:21:35,600
careful because this

566
00:21:32,159 --> 00:21:38,960
b which is arbitrary computation

567
00:21:35,600 --> 00:21:42,000
we now have to make conditional

568
00:21:38,960 --> 00:21:45,200
uh so that b is not executed if

569
00:21:42,000 --> 00:21:46,640
c one was false right so that's the

570
00:21:45,200 --> 00:21:47,440
function that you keep having to fix

571
00:21:46,640 --> 00:21:51,120
mark

572
00:21:47,440 --> 00:21:52,799
this is is something is guardable or

573
00:21:51,120 --> 00:21:56,399
something that keeps failing

574
00:21:52,799 --> 00:21:59,440
right um so

575
00:21:56,400 --> 00:22:00,880
yeah so that was the plan

576
00:21:59,440 --> 00:22:03,520
so the question is how how am i going to

577
00:22:00,880 --> 00:22:03,520
implement this

578
00:22:03,840 --> 00:22:07,918
and in particular i didn't want to do

579
00:22:05,520 --> 00:22:09,679
this on a per architecture basis because

580
00:22:07,919 --> 00:22:12,159
we support five architectures

581
00:22:09,679 --> 00:22:13,840
or maybe six if you think that arm 32

582
00:22:12,159 --> 00:22:16,640
and 64 are basically different

583
00:22:13,840 --> 00:22:18,320
architectures and their branch

584
00:22:16,640 --> 00:22:20,320
instructions are all different

585
00:22:18,320 --> 00:22:21,760
and you know it would be complete pain

586
00:22:20,320 --> 00:22:24,480
in the ass to do that

587
00:22:21,760 --> 00:22:26,158
so my plan was to do the obvious thing

588
00:22:24,480 --> 00:22:28,159
and kind of lean on valgrind's

589
00:22:26,159 --> 00:22:30,080
intermediate representation

590
00:22:28,159 --> 00:22:32,159
infrastructure into which everything is

591
00:22:30,080 --> 00:22:34,240
translated into

592
00:22:32,159 --> 00:22:36,000
um so we're gonna you know have the

593
00:22:34,240 --> 00:22:36,799
translate these blocks into ir just like

594
00:22:36,000 --> 00:22:39,200
before

595
00:22:36,799 --> 00:22:40,000
but when you come to when you've done

596
00:22:39,200 --> 00:22:43,919
that

597
00:22:40,000 --> 00:22:45,280
then we will um pass that through the ir

598
00:22:43,919 --> 00:22:47,520
optimizer

599
00:22:45,280 --> 00:22:48,480
here which is also something we've done

600
00:22:47,520 --> 00:22:52,240
before which

601
00:22:48,480 --> 00:22:53,520
basically normalizes greatly reduces the

602
00:22:52,240 --> 00:22:55,520
amount of

603
00:22:53,520 --> 00:22:57,039
the difference in representation that

604
00:22:55,520 --> 00:23:00,080
there can be

605
00:22:57,039 --> 00:23:02,320
and then we'll do the traditional

606
00:23:00,080 --> 00:23:03,360
compiler idiom of patent match to see if

607
00:23:02,320 --> 00:23:06,158
we have a

608
00:23:03,360 --> 00:23:08,799
idiom that we want to transform and then

609
00:23:06,159 --> 00:23:10,559
do the transformation

610
00:23:08,799 --> 00:23:13,280
so it does that when it comes to the end

611
00:23:10,559 --> 00:23:15,039
of a basic block it simplifies it

612
00:23:13,280 --> 00:23:17,440
figures out what the two branch targets

613
00:23:15,039 --> 00:23:20,799
are and then starts analyzing both

614
00:23:17,440 --> 00:23:22,799
targets so you have sort of

615
00:23:20,799 --> 00:23:23,918
you go two levels down the tree to see

616
00:23:22,799 --> 00:23:28,080
if you can find

617
00:23:23,919 --> 00:23:29,600
um one of these and style idioms

618
00:23:28,080 --> 00:23:31,678
and i was a bit concerned about this

619
00:23:29,600 --> 00:23:34,840
because this

620
00:23:31,679 --> 00:23:37,360
you know the jit in valgrind is actually

621
00:23:34,840 --> 00:23:38,080
limiting limits performance especially

622
00:23:37,360 --> 00:23:40,799
when you start

623
00:23:38,080 --> 00:23:41,120
start a large program you might have to

624
00:23:40,799 --> 00:23:43,520
jit

625
00:23:41,120 --> 00:23:45,360
like a half a million basic blocks

626
00:23:43,520 --> 00:23:48,559
before anything actually happens like

627
00:23:45,360 --> 00:23:50,000
that's true for firefox for example this

628
00:23:48,559 --> 00:23:52,240
is going to slow down the jit well

629
00:23:50,000 --> 00:23:53,679
that's actually true but the

630
00:23:52,240 --> 00:23:55,760
thing that gets you out of that is it's

631
00:23:53,679 --> 00:23:58,960
not going to slow down the jit much

632
00:23:55,760 --> 00:24:01,120
because most of the reason

633
00:23:58,960 --> 00:24:04,000
most of the reason that the jit is slow

634
00:24:01,120 --> 00:24:07,279
is um to do with back end costs

635
00:24:04,000 --> 00:24:09,360
so for a start after the memcheck has

636
00:24:07,279 --> 00:24:10,320
inserted instrumentation into the ir is

637
00:24:09,360 --> 00:24:13,840
about

638
00:24:10,320 --> 00:24:14,559
several times larger and then the cost

639
00:24:13,840 --> 00:24:16,399
of that

640
00:24:14,559 --> 00:24:18,559
across from that is largely in register

641
00:24:16,400 --> 00:24:20,159
allocation downstream

642
00:24:18,559 --> 00:24:22,480
and this game is all in the front end

643
00:24:20,159 --> 00:24:25,600
where there's relatively small amount of

644
00:24:22,480 --> 00:24:28,400
um code to deal with so the front end

645
00:24:25,600 --> 00:24:30,959
costs dominate so in practice it seems

646
00:24:28,400 --> 00:24:33,679
to me okay

647
00:24:30,960 --> 00:24:35,200
i should point out as well i've only

648
00:24:33,679 --> 00:24:37,520
talked about and

649
00:24:35,200 --> 00:24:38,480
here but the same mechanism logically

650
00:24:37,520 --> 00:24:40,080
handles or

651
00:24:38,480 --> 00:24:41,600
because in fact you know an or

652
00:24:40,080 --> 00:24:43,279
expression is just going to be compiled

653
00:24:41,600 --> 00:24:46,320
into the same

654
00:24:43,279 --> 00:24:47,600
um style of tree as an ant expression

655
00:24:46,320 --> 00:24:48,799
it's just that

656
00:24:47,600 --> 00:24:51,279
you know the conditions are swapped

657
00:24:48,799 --> 00:24:55,360
around via de morgan's law

658
00:24:51,279 --> 00:24:55,360
so it naturally handles that

659
00:24:55,440 --> 00:24:59,840
um and that's pretty much the end of the

660
00:24:57,520 --> 00:25:02,799
story

661
00:24:59,840 --> 00:25:03,520
so memtec lives to ride another day

662
00:25:02,799 --> 00:25:05,918
which i

663
00:25:03,520 --> 00:25:07,679
kind of thought it wouldn't at one point

664
00:25:05,919 --> 00:25:11,200
um i've tested this on

665
00:25:07,679 --> 00:25:14,799
on firefox and you know with clang minus

666
00:25:11,200 --> 00:25:17,440
o2 and gcc minus o2 which is a pretty

667
00:25:14,799 --> 00:25:18,400
strident you know pretty strict hard

668
00:25:17,440 --> 00:25:19,840
test

669
00:25:18,400 --> 00:25:22,720
because it's really big and does all

670
00:25:19,840 --> 00:25:25,039
sorts of weird weird

671
00:25:22,720 --> 00:25:27,200
and we get zero false positives at least

672
00:25:25,039 --> 00:25:29,600
of this kind there are still

673
00:25:27,200 --> 00:25:31,200
false positives when you pass undefined

674
00:25:29,600 --> 00:25:31,600
memory to system calls but that's a

675
00:25:31,200 --> 00:25:35,279
different

676
00:25:31,600 --> 00:25:38,799
different problem and because it's all

677
00:25:35,279 --> 00:25:40,320
done at the ir level is basically

678
00:25:38,799 --> 00:25:42,080
naturally

679
00:25:40,320 --> 00:25:43,678
available for all architectures of

680
00:25:42,080 --> 00:25:46,080
valkyrie supports except

681
00:25:43,679 --> 00:25:47,840
unfortunately s390 is crashing so i need

682
00:25:46,080 --> 00:25:49,520
to talk to you about this

683
00:25:47,840 --> 00:25:52,000
uh for reasons i couldn't figure out and

684
00:25:49,520 --> 00:25:53,840
also mips is crashing

685
00:25:52,000 --> 00:25:55,279
so i've disabled it in the tree for now

686
00:25:53,840 --> 00:25:56,080
we can just turn it back on it's a

687
00:25:55,279 --> 00:25:59,200
little

688
00:25:56,080 --> 00:26:00,639
if death i don't know i don't think we

689
00:25:59,200 --> 00:26:01,600
have a missed maintainer in the room

690
00:26:00,640 --> 00:26:06,080
right

691
00:26:01,600 --> 00:26:09,520
no oh good it's in tree now

692
00:26:06,080 --> 00:26:12,480
seems to work and

693
00:26:09,520 --> 00:26:14,240
we have to ship it in 3 16 which will

694
00:26:12,480 --> 00:26:17,200
happen as soon as

695
00:26:14,240 --> 00:26:17,200
i get my act together

696
00:26:18,240 --> 00:26:25,840
i think that's all i wanted to say

697
00:26:27,260 --> 00:26:34,000
[Applause]

698
00:26:30,480 --> 00:26:34,000
so are there any questions

699
00:26:35,679 --> 00:26:38,880
okay no questions that's usually bad

700
00:26:37,760 --> 00:26:42,480
because it either means nobody

701
00:26:38,880 --> 00:26:42,480
understood you or nobody believed you

702
00:26:43,200 --> 00:26:49,039
so let me start from the back first yeah

703
00:26:47,039 --> 00:26:50,640
yeah so is there any other thing that is

704
00:26:49,039 --> 00:26:53,840
a huge false positive

705
00:26:50,640 --> 00:26:53,840
like next on the list

706
00:26:55,440 --> 00:26:59,600
the question thank you is the question

707
00:26:57,600 --> 00:27:01,360
is are there any other false positives

708
00:26:59,600 --> 00:27:02,959
that i need to deal with that are next

709
00:27:01,360 --> 00:27:06,719
on the list

710
00:27:02,960 --> 00:27:08,559
not really the only other serious bunch

711
00:27:06,720 --> 00:27:09,840
source of false positives now is the

712
00:27:08,559 --> 00:27:12,639
case where you

713
00:27:09,840 --> 00:27:13,439
programs take a structure and send it to

714
00:27:12,640 --> 00:27:15,760
like the right

715
00:27:13,440 --> 00:27:18,320
system call or you know send it on a

716
00:27:15,760 --> 00:27:20,960
network socket or whatever

717
00:27:18,320 --> 00:27:23,840
and that structure has some alignment

718
00:27:20,960 --> 00:27:26,159
padding holes which are uninitialized

719
00:27:23,840 --> 00:27:27,360
memcheck has no way to know what part of

720
00:27:26,159 --> 00:27:29,760
the structure

721
00:27:27,360 --> 00:27:30,879
should actually be defined and what is a

722
00:27:29,760 --> 00:27:32,000
padding hole so it just

723
00:27:30,880 --> 00:27:34,399
complains that you're sending

724
00:27:32,000 --> 00:27:35,760
uninitialized data out of the process

725
00:27:34,399 --> 00:27:38,158
and there's nothing that can be done

726
00:27:35,760 --> 00:27:42,000
about that

727
00:27:38,159 --> 00:27:42,480
so there just i wanted to say thank you

728
00:27:42,000 --> 00:27:44,559
because

729
00:27:42,480 --> 00:27:46,799
uh several weeks ago i came across

730
00:27:44,559 --> 00:27:48,240
exactly this false positive french i

731
00:27:46,799 --> 00:27:51,440
also wondered why it happened

732
00:27:48,240 --> 00:27:52,480
i don't know why yeah and yeah i have a

733
00:27:51,440 --> 00:27:56,000
question maybe

734
00:27:52,480 --> 00:27:59,039
it's not maybe you're not just right

735
00:27:56,000 --> 00:28:00,880
but did you look at sanitizers

736
00:27:59,039 --> 00:28:03,520
do they have a similar diagnostic and

737
00:28:00,880 --> 00:28:05,679
what they do about the same problem

738
00:28:03,520 --> 00:28:09,679
the question is did i look at other

739
00:28:05,679 --> 00:28:09,679
sanitizers like asan you mean and

740
00:28:10,399 --> 00:28:16,559
msan well i didn't look at msan and

741
00:28:14,240 --> 00:28:18,960
asan doesn't actually do define it as

742
00:28:16,559 --> 00:28:21,918
tracking anyway so

743
00:28:18,960 --> 00:28:23,200
it doesn't it wouldn't tell me anything

744
00:28:21,919 --> 00:28:24,880
i should also point out

745
00:28:23,200 --> 00:28:27,760
another reason why this is important at

746
00:28:24,880 --> 00:28:31,039
least in the mozilla context is because

747
00:28:27,760 --> 00:28:32,720
um in the c plus world you can often

748
00:28:31,039 --> 00:28:34,480
actually at least work around these

749
00:28:32,720 --> 00:28:36,960
kinds of problems by giving you know

750
00:28:34,480 --> 00:28:40,080
dummy initializations to variables

751
00:28:36,960 --> 00:28:40,640
but in rust um you you can't do that

752
00:28:40,080 --> 00:28:42,320
because

753
00:28:40,640 --> 00:28:44,080
um everything is sort of initialized

754
00:28:42,320 --> 00:28:44,480
anyway and there's no place where you

755
00:28:44,080 --> 00:28:47,360
can

756
00:28:44,480 --> 00:28:48,880
add extra initializations so we were

757
00:28:47,360 --> 00:28:50,158
seeing russ code which would show false

758
00:28:48,880 --> 00:28:52,720
positives and there's nothing you could

759
00:28:50,159 --> 00:28:52,720
do about that

760
00:28:53,919 --> 00:28:59,840
hi first congrats on fixing this problem

761
00:29:00,159 --> 00:29:04,480
and maybe see the question about do you

762
00:29:02,080 --> 00:29:04,480
envision

763
00:29:04,799 --> 00:29:08,000
that you may need in the future to like

764
00:29:07,600 --> 00:29:09,760
go

765
00:29:08,000 --> 00:29:12,480
up a level deeper in your analysis like

766
00:29:09,760 --> 00:29:15,200
you go one level deep uh

767
00:29:12,480 --> 00:29:15,760
and transform one another do you see the

768
00:29:15,200 --> 00:29:18,399
case that

769
00:29:15,760 --> 00:29:20,480
you could see like two levels and yeah

770
00:29:18,399 --> 00:29:23,199
keep fighting with the files

771
00:29:20,480 --> 00:29:25,600
so the question is um as i presented it

772
00:29:23,200 --> 00:29:27,600
this only deals with one level of and

773
00:29:25,600 --> 00:29:29,279
which basically means two level two

774
00:29:27,600 --> 00:29:33,600
going two levels deep in the tree

775
00:29:29,279 --> 00:29:35,440
do i envisage that it needs to go deeper

776
00:29:33,600 --> 00:29:37,840
um well the question is the answer is to

777
00:29:35,440 --> 00:29:40,159
that i already solved that because

778
00:29:37,840 --> 00:29:42,080
it's not exactly what i said what it

779
00:29:40,159 --> 00:29:44,240
does is it has a block

780
00:29:42,080 --> 00:29:45,600
and then if the block ends in the

781
00:29:44,240 --> 00:29:48,960
conditional branch then it

782
00:29:45,600 --> 00:29:50,719
chases the conditional branch and if

783
00:29:48,960 --> 00:29:52,640
if it finds the and idiom which it can

784
00:29:50,720 --> 00:29:55,039
fold it pushes that ir back to the end

785
00:29:52,640 --> 00:29:57,120
of the block and then re-analyzes it

786
00:29:55,039 --> 00:29:58,080
so in fact it can it would be able to

787
00:29:57,120 --> 00:30:01,520
deal with you know

788
00:29:58,080 --> 00:30:01,520
ands with three things

789
00:30:01,840 --> 00:30:06,279
chained together if you had to do that

790
00:30:04,640 --> 00:30:09,520
providing that the

791
00:30:06,279 --> 00:30:12,159
speculatively evaluated stuff now can

792
00:30:09,520 --> 00:30:14,799
actually be conditionalized

793
00:30:12,159 --> 00:30:15,840
so in practice it seems to work fairly

794
00:30:14,799 --> 00:30:19,279
well even at just

795
00:30:15,840 --> 00:30:22,399
two levels yeah

796
00:30:19,279 --> 00:30:24,399
there was a question at the back hi um

797
00:30:22,399 --> 00:30:26,239
you mentioned that you handle shifts

798
00:30:24,399 --> 00:30:27,120
completely do you handle shifts with

799
00:30:26,240 --> 00:30:30,159
undefined

800
00:30:27,120 --> 00:30:36,639
uh you know distance of shifting

801
00:30:30,159 --> 00:30:39,440
yeah um that that i think that is

802
00:30:36,640 --> 00:30:40,080
oh sorry yes yes the question is um i

803
00:30:39,440 --> 00:30:41,840
said i have

804
00:30:40,080 --> 00:30:44,080
uh handle shifts exactly does that

805
00:30:41,840 --> 00:30:46,480
include um when the shift amount is

806
00:30:44,080 --> 00:30:49,039
undefined

807
00:30:46,480 --> 00:30:50,080
uh yes it is the if the shift amount is

808
00:30:49,039 --> 00:30:51,679
undefined then there is

809
00:30:50,080 --> 00:30:53,360
the entire result of the shift is

810
00:30:51,679 --> 00:30:56,080
undefined

811
00:30:53,360 --> 00:30:58,559
so this is called pessimistic casting in

812
00:30:56,080 --> 00:30:58,559
the paper

813
00:31:00,480 --> 00:31:04,000
yeah you're right we could be more but i

814
00:31:02,720 --> 00:31:05,519
mean who's actually ever going to shift

815
00:31:04,000 --> 00:31:07,519
by an amount which is partially

816
00:31:05,519 --> 00:31:09,519
undefined and

817
00:31:07,519 --> 00:31:12,159
going to get expected a result that they

818
00:31:09,519 --> 00:31:12,159
can understand

819
00:31:14,000 --> 00:31:33,840
yeah any more questions

820
00:31:18,960 --> 00:31:33,840
last chance okay thank you very much

