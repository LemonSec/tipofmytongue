1
00:00:05,200 --> 00:00:07,759
okay

2
00:00:05,759 --> 00:00:08,800
our next talk is going to be about

3
00:00:07,759 --> 00:00:12,240
cooperative

4
00:00:08,800 --> 00:00:13,040
perception of future cars with canoe

5
00:00:12,240 --> 00:00:15,200
radio

6
00:00:13,040 --> 00:00:18,400
and augustus vega is going to tell us

7
00:00:15,200 --> 00:00:21,600
about this hey thank you

8
00:00:18,400 --> 00:00:23,840
so good afternoon everyone uh my name is

9
00:00:21,600 --> 00:00:24,960
austovega i'm a researcher at ibm tj

10
00:00:23,840 --> 00:00:28,320
watson in new york

11
00:00:24,960 --> 00:00:30,800
it's my first time at fosum i am finding

12
00:00:28,320 --> 00:00:31,279
this really exciting as far as i have

13
00:00:30,800 --> 00:00:34,399
seen

14
00:00:31,279 --> 00:00:35,440
the talks are quite technical so i don't

15
00:00:34,399 --> 00:00:37,280
know if

16
00:00:35,440 --> 00:00:38,559
i will be that technical so hopefully

17
00:00:37,280 --> 00:00:40,399
you will still find something of

18
00:00:38,559 --> 00:00:44,078
interest today

19
00:00:40,399 --> 00:00:47,520
this is about a cool project that we are

20
00:00:44,079 --> 00:00:49,520
uh doing in the context of in general uh

21
00:00:47,520 --> 00:00:50,800
connected to what dr better was

22
00:00:49,520 --> 00:00:52,719
referring to before

23
00:00:50,800 --> 00:00:54,078
heterogeneous chips the retaining

24
00:00:52,719 --> 00:00:55,680
heterogeneous architecture but i will

25
00:00:54,079 --> 00:00:56,879
talk about the application that in our

26
00:00:55,680 --> 00:00:59,280
case is driving

27
00:00:56,879 --> 00:01:01,120
that which is cooperative perception in

28
00:00:59,280 --> 00:01:03,120
connected autonomous cars using

29
00:01:01,120 --> 00:01:04,479
radio so very quickly thank you very

30
00:01:03,120 --> 00:01:06,320
much to all the people involved in this

31
00:01:04,479 --> 00:01:09,280
project my ibm colleagues as well as

32
00:01:06,320 --> 00:01:11,439
our university partners uh in particular

33
00:01:09,280 --> 00:01:14,240
students postdoc who are doing

34
00:01:11,439 --> 00:01:16,399
amazing work also thank you to dr tom

35
00:01:14,240 --> 00:01:18,640
rondo who is the prime manager of the

36
00:01:16,400 --> 00:01:20,799
darpa dissoc program under which we are

37
00:01:18,640 --> 00:01:24,479
doing this this work

38
00:01:20,799 --> 00:01:26,000
so uh the talk will be uh organizing in

39
00:01:24,479 --> 00:01:27,759
this way i will start

40
00:01:26,000 --> 00:01:29,920
very briefly describing this epochs

41
00:01:27,759 --> 00:01:31,840
project that we are at ibm leading with

42
00:01:29,920 --> 00:01:34,960
the university partners

43
00:01:31,840 --> 00:01:36,640
and a little bit about i mean this new

44
00:01:34,960 --> 00:01:39,039
era of heterogeneous

45
00:01:36,640 --> 00:01:39,840
chips right and then i will go from that

46
00:01:39,040 --> 00:01:42,560
broad

47
00:01:39,840 --> 00:01:43,200
let's say a concept to more specific

48
00:01:42,560 --> 00:01:45,680
into

49
00:01:43,200 --> 00:01:48,079
one piece of that project which is this

50
00:01:45,680 --> 00:01:50,640
epochs reference application or era

51
00:01:48,079 --> 00:01:51,679
which is about cooperative perception in

52
00:01:50,640 --> 00:01:53,119
in vehicles

53
00:01:51,680 --> 00:01:55,119
and then i will focus on something even

54
00:01:53,119 --> 00:01:56,759
more specific which is one element in

55
00:01:55,119 --> 00:01:59,920
that application which is the

56
00:01:56,759 --> 00:02:03,040
ao2.11p dsrc transceiver

57
00:01:59,920 --> 00:02:05,280
within era and some uh optimization and

58
00:02:03,040 --> 00:02:08,800
acceleration opportunities that we have

59
00:02:05,280 --> 00:02:11,920
either identify so far right so let's

60
00:02:08,800 --> 00:02:13,440
start uh saying that in 2018 darpa

61
00:02:11,920 --> 00:02:15,519
started this program

62
00:02:13,440 --> 00:02:16,480
called a domain specific system on a

63
00:02:15,520 --> 00:02:19,520
chip this sock

64
00:02:16,480 --> 00:02:21,519
right which uh ultimate goal is to

65
00:02:19,520 --> 00:02:22,879
develop a methodology that allows us to

66
00:02:21,520 --> 00:02:27,440
build heterogeneous

67
00:02:22,879 --> 00:02:29,920
chips very fast for an application

68
00:02:27,440 --> 00:02:31,359
domain of interest in this case when we

69
00:02:29,920 --> 00:02:33,440
say a domain is not

70
00:02:31,360 --> 00:02:35,599
just a single application it's more than

71
00:02:33,440 --> 00:02:36,079
that actually we talk about the super

72
00:02:35,599 --> 00:02:38,560
domain

73
00:02:36,080 --> 00:02:39,840
of embedded processor for autonomous

74
00:02:38,560 --> 00:02:42,560
connected cars in our

75
00:02:39,840 --> 00:02:43,680
specific epochs project uh more

76
00:02:42,560 --> 00:02:46,319
specifically

77
00:02:43,680 --> 00:02:48,640
we say that that application is for

78
00:02:46,319 --> 00:02:50,640
cooperative perception including

79
00:02:48,640 --> 00:02:52,640
elements that come from the domain of

80
00:02:50,640 --> 00:02:54,238
computer vision and as well as software

81
00:02:52,640 --> 00:02:56,238
defined radio this is why we talk about

82
00:02:54,239 --> 00:02:58,080
a domain and not one single application

83
00:02:56,239 --> 00:03:00,000
right

84
00:02:58,080 --> 00:03:02,239
so what is cooperative perception first

85
00:03:00,000 --> 00:03:03,760
of all this is not the term that we have

86
00:03:02,239 --> 00:03:06,080
invented right

87
00:03:03,760 --> 00:03:08,239
many car makers are talking about this

88
00:03:06,080 --> 00:03:10,000
today but the idea is simply i mean the

89
00:03:08,239 --> 00:03:11,040
way automaker have been evolving

90
00:03:10,000 --> 00:03:13,760
advancing

91
00:03:11,040 --> 00:03:15,040
cars connected autonomous cars so far is

92
00:03:13,760 --> 00:03:17,920
by making a car

93
00:03:15,040 --> 00:03:20,480
as intelligent and powerful as possible

94
00:03:17,920 --> 00:03:23,518
by putting more sophisticated sensors

95
00:03:20,480 --> 00:03:25,518
and more capable uh computation engines

96
00:03:23,519 --> 00:03:28,080
on board right we try to make the car

97
00:03:25,519 --> 00:03:29,360
let's say self-sufficient right but

98
00:03:28,080 --> 00:03:31,920
still there are some

99
00:03:29,360 --> 00:03:33,120
limitations uh to that approach for

100
00:03:31,920 --> 00:03:34,640
example i like this this

101
00:03:33,120 --> 00:03:36,319
simple example right there is a car

102
00:03:34,640 --> 00:03:39,359
trying to do object recognition

103
00:03:36,319 --> 00:03:40,798
and the car uh correctly detects two

104
00:03:39,360 --> 00:03:43,040
other cars in front of it

105
00:03:40,799 --> 00:03:44,159
but it's also detecting some bicycles

106
00:03:43,040 --> 00:03:46,480
and also a person

107
00:03:44,159 --> 00:03:48,798
but if you look carefully these are just

108
00:03:46,480 --> 00:03:50,399
uh the call which is stick to the back

109
00:03:48,799 --> 00:03:52,560
of the car in front of me right this is

110
00:03:50,400 --> 00:03:57,280
a mis classification problem

111
00:03:52,560 --> 00:03:59,920
pretty common in in vehicles today so um

112
00:03:57,280 --> 00:04:01,040
clearly if we keep doing a car very very

113
00:03:59,920 --> 00:04:03,040
powerful

114
00:04:01,040 --> 00:04:04,879
there are maybe still some of these

115
00:04:03,040 --> 00:04:06,400
problems that

116
00:04:04,879 --> 00:04:08,959
i mean we need to think a little bit

117
00:04:06,400 --> 00:04:12,000
harder how to how to fix

118
00:04:08,959 --> 00:04:13,519
so what we like to study or

119
00:04:12,000 --> 00:04:14,879
let's say to propose is this

120
00:04:13,519 --> 00:04:16,560
complementary approach of a

121
00:04:14,879 --> 00:04:17,199
multi-vehicle cooperative perception

122
00:04:16,560 --> 00:04:20,320
where

123
00:04:17,199 --> 00:04:20,959
cars can very closely interact with each

124
00:04:20,320 --> 00:04:23,840
other

125
00:04:20,959 --> 00:04:25,360
right in addition to doing its own stuff

126
00:04:23,840 --> 00:04:27,440
a car can interact with each other

127
00:04:25,360 --> 00:04:29,440
to resolve for example this kind of

128
00:04:27,440 --> 00:04:30,639
ambiguities in real time while they are

129
00:04:29,440 --> 00:04:34,160
driving

130
00:04:30,639 --> 00:04:35,280
an environment right specifically what

131
00:04:34,160 --> 00:04:38,160
we have in mind

132
00:04:35,280 --> 00:04:40,080
in as part of this project initially is

133
00:04:38,160 --> 00:04:41,680
relatively simple we want the car to

134
00:04:40,080 --> 00:04:43,919
create a representation

135
00:04:41,680 --> 00:04:45,600
of the war right in this context in the

136
00:04:43,919 --> 00:04:48,000
form of two-dimensional

137
00:04:45,600 --> 00:04:50,160
occupancy maps a car will create this 2d

138
00:04:48,000 --> 00:04:52,880
occupancy maps with information about

139
00:04:50,160 --> 00:04:54,080
the presence or absence of obstacles in

140
00:04:52,880 --> 00:04:56,400
the surroundings

141
00:04:54,080 --> 00:04:57,919
and these cars will exchange this map in

142
00:04:56,400 --> 00:05:00,239
real time right

143
00:04:57,919 --> 00:05:02,000
and we'll mo more interestingly we'll

144
00:05:00,240 --> 00:05:03,919
fuse all these maps together i mean a

145
00:05:02,000 --> 00:05:04,320
car will have its own representation of

146
00:05:03,919 --> 00:05:05,758
the

147
00:05:04,320 --> 00:05:07,759
surrounding and will receive other maps

148
00:05:05,759 --> 00:05:09,360
from other cars and we'll try to fuse

149
00:05:07,759 --> 00:05:12,560
all these maps together to have

150
00:05:09,360 --> 00:05:14,560
a more precise more accurate uh

151
00:05:12,560 --> 00:05:16,240
let's say vision of the world right so

152
00:05:14,560 --> 00:05:17,680
this is what we are doing right now in

153
00:05:16,240 --> 00:05:19,360
the current version of

154
00:05:17,680 --> 00:05:21,039
the open source application that i will

155
00:05:19,360 --> 00:05:23,360
introduce but in the longer term what we

156
00:05:21,039 --> 00:05:26,240
want to explore is something that we

157
00:05:23,360 --> 00:05:27,120
call uh adaptive storm intelligence it's

158
00:05:26,240 --> 00:05:30,240
more like a

159
00:05:27,120 --> 00:05:32,720
more more swarming more uh uh

160
00:05:30,240 --> 00:05:33,600
more complex than just exchanging plane

161
00:05:32,720 --> 00:05:35,600
raw data

162
00:05:33,600 --> 00:05:36,960
we want cars to eventually learn from

163
00:05:35,600 --> 00:05:40,000
each other right exchange

164
00:05:36,960 --> 00:05:42,960
knowledge right thing of that sort but

165
00:05:40,000 --> 00:05:43,520
in general what we believe is that the

166
00:05:42,960 --> 00:05:45,359
number of

167
00:05:43,520 --> 00:05:46,880
false predictions while the car is

168
00:05:45,360 --> 00:05:49,600
driving can be

169
00:05:46,880 --> 00:05:50,639
significantly lower by a pro by

170
00:05:49,600 --> 00:05:53,039
benefiting from this

171
00:05:50,639 --> 00:05:53,919
swarm-based competitive approaches

172
00:05:53,039 --> 00:05:56,479
compared to

173
00:05:53,919 --> 00:05:57,680
the car centric only approach that let's

174
00:05:56,479 --> 00:05:59,520
say car manufacturers

175
00:05:57,680 --> 00:06:01,440
are following today basically so this is

176
00:05:59,520 --> 00:06:04,000
the motivation of

177
00:06:01,440 --> 00:06:04,719
why we started building this application

178
00:06:04,000 --> 00:06:07,440
so let me

179
00:06:04,720 --> 00:06:08,720
very quickly say two words about the the

180
00:06:07,440 --> 00:06:11,759
epochs project

181
00:06:08,720 --> 00:06:13,520
uh which is our ibm led uh let's say

182
00:06:11,759 --> 00:06:14,240
solution for the design challenge

183
00:06:13,520 --> 00:06:17,520
presented by

184
00:06:14,240 --> 00:06:19,280
by darpa's dsoc program so as i said

185
00:06:17,520 --> 00:06:20,880
it's not just about application is about

186
00:06:19,280 --> 00:06:24,080
the methodology

187
00:06:20,880 --> 00:06:25,919
that will take an application a

188
00:06:24,080 --> 00:06:28,479
domain of interest in our case from the

189
00:06:25,919 --> 00:06:31,758
domain of connected autonomous vehicles

190
00:06:28,479 --> 00:06:34,318
and it involves

191
00:06:31,759 --> 00:06:35,039
let's say a series of steps to generate

192
00:06:34,319 --> 00:06:38,639
the

193
00:06:35,039 --> 00:06:41,039
underlying soc the telegenius soc that

194
00:06:38,639 --> 00:06:43,360
we need to execute that application

195
00:06:41,039 --> 00:06:45,440
while meeting some metrics performance

196
00:06:43,360 --> 00:06:46,080
throughput power efficiency of interest

197
00:06:45,440 --> 00:06:47,680
right

198
00:06:46,080 --> 00:06:49,919
so it's about the methodology and there

199
00:06:47,680 --> 00:06:52,560
are many steps involved

200
00:06:49,919 --> 00:06:55,599
um we are developing an advanced

201
00:06:52,560 --> 00:06:59,120
compiler as well as a scheduler

202
00:06:55,599 --> 00:07:00,840
we are also studying some mathematically

203
00:06:59,120 --> 00:07:03,759
grounded ontology

204
00:07:00,840 --> 00:07:06,159
generation mechanisms to

205
00:07:03,759 --> 00:07:08,080
more or less automatically identify what

206
00:07:06,160 --> 00:07:10,080
are the pieces of your application that

207
00:07:08,080 --> 00:07:10,560
are worth being accelerated in hardware

208
00:07:10,080 --> 00:07:12,560
right

209
00:07:10,560 --> 00:07:13,759
instead of doing that like brute force

210
00:07:12,560 --> 00:07:14,960
as we usually do

211
00:07:13,759 --> 00:07:16,560
we need something that is more

212
00:07:14,960 --> 00:07:18,719
mathematically grounded right so this is

213
00:07:16,560 --> 00:07:22,319
the ontology generation part

214
00:07:18,720 --> 00:07:25,360
then we have more hardware related steps

215
00:07:22,319 --> 00:07:27,520
for example the design of accelerators

216
00:07:25,360 --> 00:07:29,759
noc memory architecture for

217
00:07:27,520 --> 00:07:31,758
that specific for the hypothesis

218
00:07:29,759 --> 00:07:34,080
generated by ontology so the anthology

219
00:07:31,759 --> 00:07:35,520
tells well these are the kind of part of

220
00:07:34,080 --> 00:07:37,359
the software that you should accelerate

221
00:07:35,520 --> 00:07:39,599
so then we need to

222
00:07:37,360 --> 00:07:40,639
determine what accelerators we need how

223
00:07:39,599 --> 00:07:42,400
do we connect them

224
00:07:40,639 --> 00:07:44,720
and what kind of memory system we have

225
00:07:42,400 --> 00:07:46,479
to put then we implement

226
00:07:44,720 --> 00:07:48,560
initially implementation in our case is

227
00:07:46,479 --> 00:07:50,878
just fpga prototyping

228
00:07:48,560 --> 00:07:52,400
but we need to also tape out this chip

229
00:07:50,879 --> 00:07:54,000
at least a couple of times to generate

230
00:07:52,400 --> 00:07:56,239
the final soc

231
00:07:54,000 --> 00:07:58,080
so epochs is about the methodology but

232
00:07:56,240 --> 00:07:59,360
today i will just focus on the

233
00:07:58,080 --> 00:08:02,800
application right

234
00:07:59,360 --> 00:08:04,240
um also to give you a little bit of

235
00:08:02,800 --> 00:08:04,639
context this is something actually that

236
00:08:04,240 --> 00:08:06,160
the

237
00:08:04,639 --> 00:08:07,840
doctor better presented in his

238
00:08:06,160 --> 00:08:10,400
presentation before

239
00:08:07,840 --> 00:08:13,440
this is the full stack that is being

240
00:08:10,400 --> 00:08:15,599
addressed as part of the dsoc program

241
00:08:13,440 --> 00:08:16,960
this presentation is just about the

242
00:08:15,599 --> 00:08:18,960
application right

243
00:08:16,960 --> 00:08:20,638
later on today i will be presenting

244
00:08:18,960 --> 00:08:22,159
something about the scheduler also and i

245
00:08:20,639 --> 00:08:25,199
will be touching this other layer here

246
00:08:22,160 --> 00:08:25,199
the operating system

247
00:08:25,360 --> 00:08:29,520
so let's go into the interesting part

248
00:08:27,599 --> 00:08:32,640
the epochs reference application or

249
00:08:29,520 --> 00:08:36,399
era so erase an open source

250
00:08:32,640 --> 00:08:39,039
application available in github

251
00:08:36,399 --> 00:08:41,039
for that basically implements this idea

252
00:08:39,039 --> 00:08:42,399
of cooperative perception in connected

253
00:08:41,039 --> 00:08:44,240
autonomous cars

254
00:08:42,399 --> 00:08:46,240
and there are two important parts in the

255
00:08:44,240 --> 00:08:47,839
area one is the communication fabric

256
00:08:46,240 --> 00:08:49,839
and the other is the sensing fabric so

257
00:08:47,839 --> 00:08:51,440
communication fabric as you can imagine

258
00:08:49,839 --> 00:08:53,120
is all about communication in this case

259
00:08:51,440 --> 00:08:56,160
between vehicles vehicle to be

260
00:08:53,120 --> 00:08:59,320
to communication b2b using a

261
00:08:56,160 --> 00:09:00,560
dsrc new ray implementation of the

262
00:08:59,320 --> 00:09:03,680
ao2.11p

263
00:09:00,560 --> 00:09:04,319
protocol so that is the top box in this

264
00:09:03,680 --> 00:09:06,000
diagram

265
00:09:04,320 --> 00:09:08,000
and then we have the sensing fabric

266
00:09:06,000 --> 00:09:10,240
which is about collecting

267
00:09:08,000 --> 00:09:11,440
sensor data from the sensors in the car

268
00:09:10,240 --> 00:09:14,080
right

269
00:09:11,440 --> 00:09:15,519
and generating this uh representation of

270
00:09:14,080 --> 00:09:17,680
the surrounding which in the current

271
00:09:15,519 --> 00:09:20,640
version of era is a two dimensionally

272
00:09:17,680 --> 00:09:22,319
two-dimensional occupancy grid map right

273
00:09:20,640 --> 00:09:25,439
so then these two

274
00:09:22,320 --> 00:09:27,440
things uh work very closely because in

275
00:09:25,440 --> 00:09:30,160
this way we allow a car to generate

276
00:09:27,440 --> 00:09:31,440
its own map and receive other maps from

277
00:09:30,160 --> 00:09:33,199
other nearby cars

278
00:09:31,440 --> 00:09:34,959
and fuse all this map together in real

279
00:09:33,200 --> 00:09:37,279
time to have a better vision of the

280
00:09:34,959 --> 00:09:40,239
surrounding right so this is a

281
00:09:37,279 --> 00:09:41,439
idea in very general terms so era

282
00:09:40,240 --> 00:09:43,200
involves

283
00:09:41,440 --> 00:09:45,519
multi-modal sensing although today

284
00:09:43,200 --> 00:09:48,880
mostly is a camera

285
00:09:45,519 --> 00:09:51,600
sensors uh it involves a

286
00:09:48,880 --> 00:09:53,600
generation of local occupancy grid maps

287
00:09:51,600 --> 00:09:55,040
it involves dsrc based vehicle to

288
00:09:53,600 --> 00:10:00,160
vehicle communication

289
00:09:55,040 --> 00:10:00,160
and final real-time fusion of those maps

290
00:10:00,880 --> 00:10:06,000
so in the current version of era version

291
00:10:03,519 --> 00:10:08,959
2 available in it have

292
00:10:06,000 --> 00:10:10,560
we are using a simulator called gazebo i

293
00:10:08,959 --> 00:10:14,640
don't know how many of you are

294
00:10:10,560 --> 00:10:17,439
familiar or no gazebo raise your hands

295
00:10:14,640 --> 00:10:18,079
okay so gazebo is a pretty detailed

296
00:10:17,440 --> 00:10:20,959
physical

297
00:10:18,079 --> 00:10:22,479
simulator for robotics environments so

298
00:10:20,959 --> 00:10:23,599
this is what we are using in the current

299
00:10:22,480 --> 00:10:26,880
version to

300
00:10:23,600 --> 00:10:29,440
simulate an automotive scenario although

301
00:10:26,880 --> 00:10:31,839
our cars in this case are robots

302
00:10:29,440 --> 00:10:33,279
and our streets in this current version

303
00:10:31,839 --> 00:10:36,079
is just a simple

304
00:10:33,279 --> 00:10:36,880
3d war where this robot move around

305
00:10:36,079 --> 00:10:40,319
basically

306
00:10:36,880 --> 00:10:41,360
we will change this in a future version

307
00:10:40,320 --> 00:10:43,200
of era

308
00:10:41,360 --> 00:10:45,040
so we have a gazebo where we have this

309
00:10:43,200 --> 00:10:48,079
robot with these deep cameras

310
00:10:45,040 --> 00:10:50,560
attached collecting uh information

311
00:10:48,079 --> 00:10:53,439
from the from the war right so this is

312
00:10:50,560 --> 00:10:56,959
our war simulator

313
00:10:53,440 --> 00:10:59,600
then we have a blog called cosmap2d

314
00:10:56,959 --> 00:11:00,160
which is part of the robot operating

315
00:10:59,600 --> 00:11:03,200
system

316
00:11:00,160 --> 00:11:05,839
ros how many of you are aware of ross

317
00:11:03,200 --> 00:11:07,200
a little bit more okay we are getting

318
00:11:05,839 --> 00:11:09,279
close so ross is uh

319
00:11:07,200 --> 00:11:10,720
it's not a it's not an operating system

320
00:11:09,279 --> 00:11:14,000
by itself actually is

321
00:11:10,720 --> 00:11:16,560
just a robotics software infrastructure

322
00:11:14,000 --> 00:11:18,480
that provides many libraries for for to

323
00:11:16,560 --> 00:11:19,599
build very quickly robotics applications

324
00:11:18,480 --> 00:11:21,760
so we are using

325
00:11:19,600 --> 00:11:23,200
one of its available modules which is a

326
00:11:21,760 --> 00:11:26,560
code map 2d block

327
00:11:23,200 --> 00:11:28,640
which allows us to generate these

328
00:11:26,560 --> 00:11:30,560
two-dimensional occupancy maps

329
00:11:28,640 --> 00:11:33,120
from data collected from the camera in

330
00:11:30,560 --> 00:11:37,040
the robot so we generate in real time

331
00:11:33,120 --> 00:11:39,279
many times per second these 2d maps

332
00:11:37,040 --> 00:11:41,439
and then uh by the way i mean it's not

333
00:11:39,279 --> 00:11:42,560
just about the the 2d map it's not just

334
00:11:41,440 --> 00:11:44,800
about the

335
00:11:42,560 --> 00:11:45,599
presence or absence of blocks it's also

336
00:11:44,800 --> 00:11:48,399
about

337
00:11:45,600 --> 00:11:48,720
uh what those um obstacles are so we

338
00:11:48,399 --> 00:11:50,480
have

339
00:11:48,720 --> 00:11:51,839
we also do object recognition right we

340
00:11:50,480 --> 00:11:53,600
want to label also

341
00:11:51,839 --> 00:11:55,040
those blocks it's not just okay there is

342
00:11:53,600 --> 00:11:56,959
something there but we want to know that

343
00:11:55,040 --> 00:11:59,920
if there is another car or a pedestrian

344
00:11:56,959 --> 00:12:03,040
or a tree or whatever right

345
00:11:59,920 --> 00:12:06,000
then we take that and we pack it

346
00:12:03,040 --> 00:12:06,560
uh we serialize it and we inject it in

347
00:12:06,000 --> 00:12:09,120
our

348
00:12:06,560 --> 00:12:10,880
new radio transceiver which by the way

349
00:12:09,120 --> 00:12:11,279
is this is an open source implementation

350
00:12:10,880 --> 00:12:13,920
by

351
00:12:11,279 --> 00:12:14,480
bastian russell i think 99 of you know

352
00:12:13,920 --> 00:12:17,519
bastian

353
00:12:14,480 --> 00:12:19,279
very well uh so we took

354
00:12:17,519 --> 00:12:21,040
a bastion's implementation of the

355
00:12:19,279 --> 00:12:23,839
ao2.11p transceiver

356
00:12:21,040 --> 00:12:24,719
and we integrated that into era so we

357
00:12:23,839 --> 00:12:26,959
are this is why

358
00:12:24,720 --> 00:12:28,880
where we are using a new radio and this

359
00:12:26,959 --> 00:12:31,599
is interesting to mention that

360
00:12:28,880 --> 00:12:33,839
uh we have like two disparate wars

361
00:12:31,600 --> 00:12:37,360
coexisting here which is new radio

362
00:12:33,839 --> 00:12:38,079
and more uh ros gazebo right so we had

363
00:12:37,360 --> 00:12:40,399
to build

364
00:12:38,079 --> 00:12:41,519
like a rosen radio interface to allow

365
00:12:40,399 --> 00:12:44,160
this to

366
00:12:41,519 --> 00:12:45,360
work to to co-exist right so i think

367
00:12:44,160 --> 00:12:47,199
that that was something pretty

368
00:12:45,360 --> 00:12:49,360
interesting

369
00:12:47,200 --> 00:12:51,200
and finally we we will also receive

370
00:12:49,360 --> 00:12:52,639
other maps from other cars through the

371
00:12:51,200 --> 00:12:54,240
radio receiver

372
00:12:52,639 --> 00:12:56,240
so what we want to do is to unpack that

373
00:12:54,240 --> 00:12:58,079
map and to

374
00:12:56,240 --> 00:12:59,600
merge together to fuse together the

375
00:12:58,079 --> 00:13:02,079
locally generated one

376
00:12:59,600 --> 00:13:03,440
with the remotely received ones and

377
00:13:02,079 --> 00:13:05,040
provide

378
00:13:03,440 --> 00:13:06,320
the final version this happens several

379
00:13:05,040 --> 00:13:09,519
times per second by the way it's very

380
00:13:06,320 --> 00:13:09,519
cpu intensive right

381
00:13:10,160 --> 00:13:14,800
there are two ways to execute era today

382
00:13:12,720 --> 00:13:17,120
one is a two computer setup

383
00:13:14,800 --> 00:13:18,560
where you take era and you deploy it in

384
00:13:17,120 --> 00:13:20,079
two different computers

385
00:13:18,560 --> 00:13:21,760
and you have over-the-air communication

386
00:13:20,079 --> 00:13:22,638
between both of them for that you need

387
00:13:21,760 --> 00:13:26,319
of course usrp

388
00:13:22,639 --> 00:13:29,120
devices um so

389
00:13:26,320 --> 00:13:30,399
the other easy easiest easier way to

390
00:13:29,120 --> 00:13:33,440
execute the array

391
00:13:30,399 --> 00:13:36,480
is in a standalone mode where

392
00:13:33,440 --> 00:13:38,000
the two let's say instances of era of

393
00:13:36,480 --> 00:13:40,399
array run in the same

394
00:13:38,000 --> 00:13:42,240
physical computer so the communication

395
00:13:40,399 --> 00:13:45,199
between both of them

396
00:13:42,240 --> 00:13:45,760
will be using a regular network socket

397
00:13:45,199 --> 00:13:48,479
right but

398
00:13:45,760 --> 00:13:50,639
functionality wise this is the same as

399
00:13:48,480 --> 00:13:53,279
having over-the-air communication right

400
00:13:50,639 --> 00:13:55,760
so probably this is the easiest setup to

401
00:13:53,279 --> 00:13:55,760
start with

402
00:13:56,720 --> 00:14:03,279
so now let me go into a little bit some

403
00:14:01,519 --> 00:14:05,839
characterization that we conducted on

404
00:14:03,279 --> 00:14:08,000
the transceiver of era

405
00:14:05,839 --> 00:14:10,079
and some optimization opportunities that

406
00:14:08,000 --> 00:14:13,519
we have identified

407
00:14:10,079 --> 00:14:16,638
that may be of interest so um

408
00:14:13,519 --> 00:14:18,399
as i said before era has several

409
00:14:16,639 --> 00:14:19,519
components i will be focusing now on

410
00:14:18,399 --> 00:14:20,959
that

411
00:14:19,519 --> 00:14:23,040
box there the vehicle to vehicle

412
00:14:20,959 --> 00:14:25,599
communication part which is

413
00:14:23,040 --> 00:14:26,959
actually the ao2.11p new radio

414
00:14:25,600 --> 00:14:28,639
transceiver that we took from from

415
00:14:26,959 --> 00:14:32,000
bastian right

416
00:14:28,639 --> 00:14:32,959
so when you take a software that you

417
00:14:32,000 --> 00:14:35,839
don't know

418
00:14:32,959 --> 00:14:36,959
and you want to identify uh acceleration

419
00:14:35,839 --> 00:14:39,440
opportunities

420
00:14:36,959 --> 00:14:41,599
what is the first thing you usually do

421
00:14:39,440 --> 00:14:44,639
well you characterize application on

422
00:14:41,600 --> 00:14:45,519
in well-known systems so we took this

423
00:14:44,639 --> 00:14:48,720
transceiver

424
00:14:45,519 --> 00:14:50,959
we executed it on uh

425
00:14:48,720 --> 00:14:52,000
some sun machine right and we start

426
00:14:50,959 --> 00:14:54,399
measuring

427
00:14:52,000 --> 00:14:56,320
the amount of uh computational cycles

428
00:14:54,399 --> 00:14:59,120
taken by different parts of the

429
00:14:56,320 --> 00:15:00,560
in this case of this flow graph right uh

430
00:14:59,120 --> 00:15:04,160
so what we observe

431
00:15:00,560 --> 00:15:05,040
the very first hat performance analysis

432
00:15:04,160 --> 00:15:07,439
is that

433
00:15:05,040 --> 00:15:09,439
there are actually like two functions

434
00:15:07,440 --> 00:15:13,040
new radio functions that are

435
00:15:09,440 --> 00:15:16,720
uh consuming most of the cpu cycles

436
00:15:13,040 --> 00:15:19,120
these are the complex exponent

437
00:15:16,720 --> 00:15:19,920
floating point function which takes more

438
00:15:19,120 --> 00:15:21,600
than 30

439
00:15:19,920 --> 00:15:23,120
percent of the execution time in this

440
00:15:21,600 --> 00:15:25,040
current implementation

441
00:15:23,120 --> 00:15:27,199
and the other one is the computation of

442
00:15:25,040 --> 00:15:28,240
the viterbi butterfly which is a little

443
00:15:27,199 --> 00:15:30,319
bit more than 10

444
00:15:28,240 --> 00:15:31,440
of the overall execution time so we say

445
00:15:30,320 --> 00:15:33,920
okay

446
00:15:31,440 --> 00:15:35,199
we have two candidates to optimize let's

447
00:15:33,920 --> 00:15:37,120
start with these two

448
00:15:35,199 --> 00:15:38,959
and by the way what what are the parts

449
00:15:37,120 --> 00:15:41,279
in the in this flow graph that are

450
00:15:38,959 --> 00:15:45,119
making use of those two functions

451
00:15:41,279 --> 00:15:48,800
and we identify these four blocks

452
00:15:45,120 --> 00:15:50,480
which is packet decoding ofdm equalizer

453
00:15:48,800 --> 00:15:52,000
and synchronization long and short so

454
00:15:50,480 --> 00:15:53,279
these are the ones that are highlighted

455
00:15:52,000 --> 00:15:54,880
in red these are the blocks that are

456
00:15:53,279 --> 00:15:55,759
making use of these two functions most

457
00:15:54,880 --> 00:15:58,240
of the time

458
00:15:55,759 --> 00:15:59,920
and actually the four of them belongs to

459
00:15:58,240 --> 00:16:01,600
the receiver which means that well

460
00:15:59,920 --> 00:16:03,439
the receiver is more critical clearly

461
00:16:01,600 --> 00:16:05,040
it's more clicker than the transmitter

462
00:16:03,440 --> 00:16:06,880
right

463
00:16:05,040 --> 00:16:08,160
so okay we started with these two

464
00:16:06,880 --> 00:16:09,839
functions

465
00:16:08,160 --> 00:16:11,519
let's see how we can accelerate them and

466
00:16:09,839 --> 00:16:15,040
how much benefit we can get

467
00:16:11,519 --> 00:16:15,600
in return so the first thing we did is

468
00:16:15,040 --> 00:16:18,959
okay

469
00:16:15,600 --> 00:16:20,959
we define a cpu a base language in this

470
00:16:18,959 --> 00:16:23,439
case it's a general purpose cpu

471
00:16:20,959 --> 00:16:25,199
an arm cord a 53 processor very very

472
00:16:23,440 --> 00:16:27,120
basic stuff

473
00:16:25,199 --> 00:16:28,560
and we measure this is just for one of

474
00:16:27,120 --> 00:16:31,440
these two functions for the complex

475
00:16:28,560 --> 00:16:32,160
exponent function we measure on average

476
00:16:31,440 --> 00:16:34,639
how many

477
00:16:32,160 --> 00:16:36,959
cycles it takes to call that function

478
00:16:34,639 --> 00:16:37,759
and in this case was around 37 cpu

479
00:16:36,959 --> 00:16:40,000
cycles

480
00:16:37,759 --> 00:16:41,519
on average for the execution of this

481
00:16:40,000 --> 00:16:45,040
complex exponent

482
00:16:41,519 --> 00:16:45,680
function right okay so we move forward

483
00:16:45,040 --> 00:16:48,639
we say okay

484
00:16:45,680 --> 00:16:48,638
let's design our own

485
00:16:48,800 --> 00:16:52,800
preliminary accelerate acceleration and

486
00:16:50,880 --> 00:16:55,839
gene for this function

487
00:16:52,800 --> 00:16:57,359
and the way this function works is very

488
00:16:55,839 --> 00:16:58,959
simple actually i mean

489
00:16:57,360 --> 00:17:00,959
the computation of the complex exponent

490
00:16:58,959 --> 00:17:02,239
is the computation of a of an exponent

491
00:17:00,959 --> 00:17:04,958
multiplied by this

492
00:17:02,240 --> 00:17:06,959
cosine and sine elements there so we say

493
00:17:04,959 --> 00:17:10,880
okay let's let this let's design

494
00:17:06,959 --> 00:17:13,839
a dual uh path a pipeline where one

495
00:17:10,880 --> 00:17:15,039
part of the pipeline the bottom one will

496
00:17:13,839 --> 00:17:17,520
compute this piece

497
00:17:15,039 --> 00:17:19,280
the top one will compute the cosine and

498
00:17:17,520 --> 00:17:21,039
sine and add them together

499
00:17:19,280 --> 00:17:23,119
and at the end we will multiply to

500
00:17:21,039 --> 00:17:24,559
generate the final result so this was

501
00:17:23,119 --> 00:17:27,359
our

502
00:17:24,559 --> 00:17:27,678
very first version of our accelerator

503
00:17:27,359 --> 00:17:30,479
right

504
00:17:27,679 --> 00:17:32,400
very simple one at the beginning we had

505
00:17:30,480 --> 00:17:34,320
some issues that we had to to

506
00:17:32,400 --> 00:17:35,760
to deal with like for example i'm

507
00:17:34,320 --> 00:17:37,439
balancing between these two paths that

508
00:17:35,760 --> 00:17:40,000
we

509
00:17:37,440 --> 00:17:40,480
we managed to fix so we start measuring

510
00:17:40,000 --> 00:17:42,400
uh

511
00:17:40,480 --> 00:17:43,919
the the the execution time of this

512
00:17:42,400 --> 00:17:46,000
function using that accelerator

513
00:17:43,919 --> 00:17:47,280
as expected we've managed to go down

514
00:17:46,000 --> 00:17:50,720
from 37

515
00:17:47,280 --> 00:17:53,600
to around seven cpu cycles per call

516
00:17:50,720 --> 00:17:54,320
right which was a huge improvement of

517
00:17:53,600 --> 00:17:58,159
course

518
00:17:54,320 --> 00:18:01,120
since this accelerator is let's say

519
00:17:58,160 --> 00:18:01,600
outside of the cpu then we start having

520
00:18:01,120 --> 00:18:03,600
some

521
00:18:01,600 --> 00:18:05,918
memory copy overhead right we have to

522
00:18:03,600 --> 00:18:07,439
move input data from the cpu into the

523
00:18:05,919 --> 00:18:08,400
accelerator and then move back the

524
00:18:07,440 --> 00:18:12,000
result

525
00:18:08,400 --> 00:18:15,200
again into the cpu right so this is our

526
00:18:12,000 --> 00:18:17,440
let's say first version not very much

527
00:18:15,200 --> 00:18:22,000
optimized of the accelerator

528
00:18:17,440 --> 00:18:23,919
then we decided to try something also

529
00:18:22,000 --> 00:18:25,039
relatively straightforward say okay

530
00:18:23,919 --> 00:18:26,960
let's try to

531
00:18:25,039 --> 00:18:28,320
use a vectorized version of this

532
00:18:26,960 --> 00:18:30,480
function right

533
00:18:28,320 --> 00:18:32,240
and voila the vectorized version took

534
00:18:30,480 --> 00:18:33,039
even less cycles on the accelerator

535
00:18:32,240 --> 00:18:36,240
right

536
00:18:33,039 --> 00:18:38,160
so around five or six cycles so that was

537
00:18:36,240 --> 00:18:39,440
actually very interesting say okay we

538
00:18:38,160 --> 00:18:40,880
are not we don't have to move data

539
00:18:39,440 --> 00:18:43,200
because it's happening on the same

540
00:18:40,880 --> 00:18:45,440
cpu in the same core and still performs

541
00:18:43,200 --> 00:18:48,000
better than our

542
00:18:45,440 --> 00:18:49,520
accelerator right but our accelerator

543
00:18:48,000 --> 00:18:50,880
was not very well optimized at the very

544
00:18:49,520 --> 00:18:53,200
beginning so we started looking into

545
00:18:50,880 --> 00:18:56,080
some more aggressive optimizations and

546
00:18:53,200 --> 00:18:58,000
what we realized is that okay i mean in

547
00:18:56,080 --> 00:19:01,039
this case the accelerator was running at

548
00:18:58,000 --> 00:19:02,960
100 megahertz right so to be

549
00:19:01,039 --> 00:19:04,240
conservative say how much we can

550
00:19:02,960 --> 00:19:07,039
increase at the frequency

551
00:19:04,240 --> 00:19:08,880
well we can go up to 300 megahertz

552
00:19:07,039 --> 00:19:11,520
without violating timing and

553
00:19:08,880 --> 00:19:12,559
things of that sort which will provide

554
00:19:11,520 --> 00:19:15,679
us like three times

555
00:19:12,559 --> 00:19:18,480
speed up right plus we can have for the

556
00:19:15,679 --> 00:19:20,559
the the the cylinder styling board that

557
00:19:18,480 --> 00:19:23,280
we are using we can have up to four

558
00:19:20,559 --> 00:19:24,960
copies of this accelerator running in

559
00:19:23,280 --> 00:19:27,918
parallel so we have

560
00:19:24,960 --> 00:19:29,440
another four time speed up and the most

561
00:19:27,919 --> 00:19:30,000
important thing is that we believe we

562
00:19:29,440 --> 00:19:31,919
can

563
00:19:30,000 --> 00:19:34,480
eliminate the memory copy overhead

564
00:19:31,919 --> 00:19:38,960
because the memory copy overhead here

565
00:19:34,480 --> 00:19:42,000
is mostly due to the way virtual memory

566
00:19:38,960 --> 00:19:44,400
in new radio buffers is mapped to

567
00:19:42,000 --> 00:19:45,919
physical memory right so that mapping is

568
00:19:44,400 --> 00:19:49,039
changing only all the time in

569
00:19:45,919 --> 00:19:49,679
radio and therefore force us to keep

570
00:19:49,039 --> 00:19:52,080
copying

571
00:19:49,679 --> 00:19:54,000
data from one physical location to the

572
00:19:52,080 --> 00:19:54,639
new physical location where the buffer

573
00:19:54,000 --> 00:19:56,480
is mapped

574
00:19:54,640 --> 00:19:58,720
to now because the buffer is actually

575
00:19:56,480 --> 00:20:01,679
rotating right if we

576
00:19:58,720 --> 00:20:02,880
could go get into a new radio and fix

577
00:20:01,679 --> 00:20:05,919
that

578
00:20:02,880 --> 00:20:07,600
then we could eventually eliminate

579
00:20:05,919 --> 00:20:10,000
ideally eliminate that

580
00:20:07,600 --> 00:20:11,120
extra memory copy overhead and the

581
00:20:10,000 --> 00:20:14,080
result would be like

582
00:20:11,120 --> 00:20:15,678
each call of this function using this

583
00:20:14,080 --> 00:20:16,240
fully optimized version of accelerator

584
00:20:15,679 --> 00:20:19,280
is around

585
00:20:16,240 --> 00:20:20,480
one cycle per code right so significant

586
00:20:19,280 --> 00:20:22,639
performance performance improvement

587
00:20:20,480 --> 00:20:22,640
right

588
00:20:22,880 --> 00:20:27,919
let me very quickly because i am also uh

589
00:20:26,240 --> 00:20:29,679
arriving to the end of the time but let

590
00:20:27,919 --> 00:20:31,679
me also quickly tell you what what are

591
00:20:29,679 --> 00:20:34,000
our plans for era because

592
00:20:31,679 --> 00:20:35,520
we need help right and we think this is

593
00:20:34,000 --> 00:20:37,440
very exciting

594
00:20:35,520 --> 00:20:38,960
connected autonomous cars who doesn't

595
00:20:37,440 --> 00:20:40,480
want to work on connected autonomous

596
00:20:38,960 --> 00:20:44,080
cars right

597
00:20:40,480 --> 00:20:44,080
don't don't answer so

598
00:20:44,400 --> 00:20:48,320
the current version of erase version 2

599
00:20:46,559 --> 00:20:49,440
available in github as i said the one

600
00:20:48,320 --> 00:20:51,520
that supports this

601
00:20:49,440 --> 00:20:52,880
two computer setup we are going into

602
00:20:51,520 --> 00:20:54,639
version three of the array

603
00:20:52,880 --> 00:20:57,360
where we will replace gazebo with a more

604
00:20:54,640 --> 00:20:59,600
realistic automotive simulator

605
00:20:57,360 --> 00:21:00,959
emulator like for example car sim or or

606
00:20:59,600 --> 00:21:02,240
carla

607
00:21:00,960 --> 00:21:04,080
this is something we are trying to

608
00:21:02,240 --> 00:21:07,200
decide right

609
00:21:04,080 --> 00:21:10,000
but more importantly

610
00:21:07,200 --> 00:21:10,960
this part of this diagram here layer one

611
00:21:10,000 --> 00:21:13,440
and layer two

612
00:21:10,960 --> 00:21:15,679
is what we have today in terms of

613
00:21:13,440 --> 00:21:18,640
software platform for automotive

614
00:21:15,679 --> 00:21:19,039
we have very good world simulators car

615
00:21:18,640 --> 00:21:21,039
seam

616
00:21:19,039 --> 00:21:22,559
well gazebo can be used for automotive

617
00:21:21,039 --> 00:21:25,200
too karla and lg

618
00:21:22,559 --> 00:21:26,799
sbl are some examples we have very good

619
00:21:25,200 --> 00:21:28,400
automotive platform to implement

620
00:21:26,799 --> 00:21:30,559
perception plan and control

621
00:21:28,400 --> 00:21:31,919
in simulated environments or in real

622
00:21:30,559 --> 00:21:35,440
cars right

623
00:21:31,919 --> 00:21:37,840
but we don't have that piece there that

624
00:21:35,440 --> 00:21:39,360
enables vehicle to vehicle communication

625
00:21:37,840 --> 00:21:41,120
in this existing

626
00:21:39,360 --> 00:21:43,199
software ecosystem so this is what we

627
00:21:41,120 --> 00:21:46,320
want to provide with era version 3.

628
00:21:43,200 --> 00:21:47,520
we want to create the missing part here

629
00:21:46,320 --> 00:21:50,240
which can interact with

630
00:21:47,520 --> 00:21:50,879
layer two and layer one and if a user

631
00:21:50,240 --> 00:21:53,039
wants

632
00:21:50,880 --> 00:21:55,039
to have in a very easy manner support

633
00:21:53,039 --> 00:21:57,440
for vehicle to be a click communication

634
00:21:55,039 --> 00:21:59,360
regardless if he or he is using let's

635
00:21:57,440 --> 00:22:01,760
say carson plus apollo

636
00:21:59,360 --> 00:22:04,320
or carla plus outerwear right so this is

637
00:22:01,760 --> 00:22:05,200
what we have in mind for era version 3

638
00:22:04,320 --> 00:22:06,720
era

639
00:22:05,200 --> 00:22:08,480
will be only intended to enable

640
00:22:06,720 --> 00:22:10,880
competitive automotive

641
00:22:08,480 --> 00:22:11,760
with support for dsrc currently

642
00:22:10,880 --> 00:22:14,080
supported

643
00:22:11,760 --> 00:22:14,960
and eventually in the future 5g right so

644
00:22:14,080 --> 00:22:17,280
this is what

645
00:22:14,960 --> 00:22:19,440
will make era unique right and we need

646
00:22:17,280 --> 00:22:23,520
help for that

647
00:22:19,440 --> 00:22:27,200
so uh to wrap up i

648
00:22:23,520 --> 00:22:29,440
i think um we we we all agreed that the

649
00:22:27,200 --> 00:22:30,960
domain specific heterogeneous soc array

650
00:22:29,440 --> 00:22:33,039
is here based on some

651
00:22:30,960 --> 00:22:34,880
talk that we have already seen this is

652
00:22:33,039 --> 00:22:36,000
because we need to significantly improve

653
00:22:34,880 --> 00:22:38,559
performance throughput

654
00:22:36,000 --> 00:22:39,120
as well as power efficiency darpan

655
00:22:38,559 --> 00:22:41,280
understand

656
00:22:39,120 --> 00:22:42,879
understands that very well and this is

657
00:22:41,280 --> 00:22:45,600
why one of

658
00:22:42,880 --> 00:22:47,039
its programs this shock is about a

659
00:22:45,600 --> 00:22:48,879
terror geniuses of c

660
00:22:47,039 --> 00:22:50,720
so under this shock we are developing

661
00:22:48,880 --> 00:22:52,840
this open source application called

662
00:22:50,720 --> 00:22:54,000
era for multivehicle cooperative

663
00:22:52,840 --> 00:22:56,639
perception

664
00:22:54,000 --> 00:22:57,200
that includes as i said local sensing

665
00:22:56,640 --> 00:22:59,120
plus

666
00:22:57,200 --> 00:23:00,720
vehicle to vehicle communications in the

667
00:22:59,120 --> 00:23:02,719
same application

668
00:23:00,720 --> 00:23:04,640
in other words ros the robot operating

669
00:23:02,720 --> 00:23:07,760
system and new radio

670
00:23:04,640 --> 00:23:10,000
can coexist together uh if uh

671
00:23:07,760 --> 00:23:11,600
uh at least based on our experience

672
00:23:10,000 --> 00:23:14,320
right

673
00:23:11,600 --> 00:23:15,840
the src plays a critical role for

674
00:23:14,320 --> 00:23:17,280
vehicle-to-vehicle communication right

675
00:23:15,840 --> 00:23:19,520
if we want to

676
00:23:17,280 --> 00:23:20,320
have a war where cars can interact with

677
00:23:19,520 --> 00:23:23,760
each other

678
00:23:20,320 --> 00:23:25,439
and swarm between them to exchange not

679
00:23:23,760 --> 00:23:27,280
only

680
00:23:25,440 --> 00:23:28,960
raw data but also let's say knowledge

681
00:23:27,280 --> 00:23:32,320
experience then

682
00:23:28,960 --> 00:23:34,720
we have to focus on how those cars will

683
00:23:32,320 --> 00:23:36,799
communicate in real time right

684
00:23:34,720 --> 00:23:38,400
high throughput low latency right so we

685
00:23:36,799 --> 00:23:40,080
have to put the focus on how do we

686
00:23:38,400 --> 00:23:42,720
accelerate that

687
00:23:40,080 --> 00:23:44,960
and finally as i said we want to turn

688
00:23:42,720 --> 00:23:45,919
array into a benchmark for cooperative

689
00:23:44,960 --> 00:23:48,320
mobility

690
00:23:45,919 --> 00:23:50,080
that can be easily plugged into existing

691
00:23:48,320 --> 00:23:51,120
automotive platform so if you want to

692
00:23:50,080 --> 00:23:53,918
collaborate

693
00:23:51,120 --> 00:23:54,559
please reach out to us to me check out

694
00:23:53,919 --> 00:23:58,960
era

695
00:23:54,559 --> 00:24:05,840
in github too so that's it

696
00:23:58,960 --> 00:24:05,840
i don't know if there are questions

697
00:24:15,200 --> 00:24:19,039
implementation of your

698
00:24:30,159 --> 00:24:33,279
you have a

699
00:24:35,200 --> 00:24:39,919
so the question was first part was if we

700
00:24:37,600 --> 00:24:42,719
are considering autopilot

701
00:24:39,919 --> 00:24:45,279
uh when when we talk about era version 3

702
00:24:42,720 --> 00:24:47,600
i think the question is

703
00:24:45,279 --> 00:24:49,520
in this in this figure uh do you have a

704
00:24:47,600 --> 00:24:50,719
box that is autopilot too right in

705
00:24:49,520 --> 00:24:54,158
addition to apollo or

706
00:24:50,720 --> 00:24:54,799
outerwear right so um i mean the the way

707
00:24:54,159 --> 00:24:57,679
we want to

708
00:24:54,799 --> 00:24:58,080
to to build era version 3 is independent

709
00:24:57,679 --> 00:25:00,480
of

710
00:24:58,080 --> 00:25:02,559
anything else we want to actually define

711
00:25:00,480 --> 00:25:03,440
some apis that can work with eventually

712
00:25:02,559 --> 00:25:05,600
any

713
00:25:03,440 --> 00:25:07,520
uh other infrastructure let's say apollo

714
00:25:05,600 --> 00:25:09,918
auto wear autopilot or

715
00:25:07,520 --> 00:25:11,600
whatever right so uh it should be

716
00:25:09,919 --> 00:25:13,679
extensible in that in that regard

717
00:25:11,600 --> 00:25:15,918
so yeah i mean the answer is yes in the

718
00:25:13,679 --> 00:25:16,559
future we can also include autopilot in

719
00:25:15,919 --> 00:25:18,880
this uh

720
00:25:16,559 --> 00:25:20,639
in this diagram and the other part was

721
00:25:18,880 --> 00:25:22,080
about the the communication the protocol

722
00:25:20,640 --> 00:25:23,679
between between cars

723
00:25:22,080 --> 00:25:25,279
uh that is actually a very key question

724
00:25:23,679 --> 00:25:27,679
right and something that we are

725
00:25:25,279 --> 00:25:28,720
investigating as part of this project

726
00:25:27,679 --> 00:25:30,480
right how do

727
00:25:28,720 --> 00:25:32,640
cars communicate to each other for now

728
00:25:30,480 --> 00:25:34,480
it's just we take these maps

729
00:25:32,640 --> 00:25:36,880
we pack them we compress them we

730
00:25:34,480 --> 00:25:38,720
serialize them and we exchange them in

731
00:25:36,880 --> 00:25:40,960
very simple manner but we need to define

732
00:25:38,720 --> 00:25:45,200
a protocol and map link maybe

733
00:25:40,960 --> 00:25:47,120
maybe uh one one option um yeah so

734
00:25:45,200 --> 00:25:48,799
i've got one really quick question yeah

735
00:25:47,120 --> 00:25:50,000
how big are the buffers

736
00:25:48,799 --> 00:25:52,000
you're copying in and out of your

737
00:25:50,000 --> 00:25:55,600
accelerator

738
00:25:52,000 --> 00:25:57,520
uh you mean the buffers in between

739
00:25:55,600 --> 00:25:59,439
new radio blocks how big is the guinea

740
00:25:57,520 --> 00:26:01,360
radio buffer feeding and taking data

741
00:25:59,440 --> 00:26:04,159
from your accelerator

742
00:26:01,360 --> 00:26:05,120
uh i don't remember the number let me

743
00:26:04,159 --> 00:26:07,039
check it out

744
00:26:05,120 --> 00:26:10,158
yeah i'm curious yeah yeah yeah because

745
00:26:07,039 --> 00:26:12,480
that changed many many times already but

746
00:26:10,159 --> 00:26:13,279
yes yes yes yes yes let me check let me

747
00:26:12,480 --> 00:26:15,760
check that number

748
00:26:13,279 --> 00:26:17,600
so i think there is one more megapixel

749
00:26:15,760 --> 00:26:20,480
uh

750
00:26:17,600 --> 00:26:25,840
it is in the order of the kilobytes yes

751
00:26:20,480 --> 00:26:25,840
yes kilobytes yes

752
00:26:34,080 --> 00:26:38,000
yes security is key here actually

753
00:26:36,320 --> 00:26:39,600
something i didn't mention we are also

754
00:26:38,000 --> 00:26:41,200
moving from rose one to rose two

755
00:26:39,600 --> 00:26:43,039
because for us to provide some security

756
00:26:41,200 --> 00:26:47,360
features that we will leverage in here

757
00:26:43,039 --> 00:26:49,840
version three uh but uh we believe that

758
00:26:47,360 --> 00:26:50,639
in general swarming can help us to

759
00:26:49,840 --> 00:26:53,840
identify

760
00:26:50,640 --> 00:26:56,480
like some let's say adversarial cars

761
00:26:53,840 --> 00:26:58,320
in your in your swamp right for by for

762
00:26:56,480 --> 00:26:59,120
example running some real-time consensus

763
00:26:58,320 --> 00:27:01,520
mechanism

764
00:26:59,120 --> 00:27:02,879
in real time the cars can say well that

765
00:27:01,520 --> 00:27:04,720
guy here is

766
00:27:02,880 --> 00:27:06,640
he's been around all right so we should

767
00:27:04,720 --> 00:27:09,440
probably take him out from

768
00:27:06,640 --> 00:27:10,000
our swamp right now so but it's a very

769
00:27:09,440 --> 00:27:11,600
key part

770
00:27:10,000 --> 00:27:13,679
darpa is very interested in that ibm

771
00:27:11,600 --> 00:27:16,320
also so we are looking into that

772
00:27:13,679 --> 00:27:17,520
uh and we i don't have an answer but uh

773
00:27:16,320 --> 00:27:21,840
swarming may be

774
00:27:17,520 --> 00:27:21,840
probably one of the ways

