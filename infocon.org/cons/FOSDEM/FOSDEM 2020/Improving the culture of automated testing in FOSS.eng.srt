1
00:00:06,000 --> 00:00:11,599
so good morning everyone from me too

2
00:00:08,160 --> 00:00:13,599
um sorry so first of all it's great to

3
00:00:11,599 --> 00:00:16,079
see so many people here today

4
00:00:13,599 --> 00:00:18,560
and with all the foster parties going on

5
00:00:16,079 --> 00:00:21,439
that's kind of a surprise right because

6
00:00:18,560 --> 00:00:22,960
uh people don't tend to show up for the

7
00:00:21,439 --> 00:00:24,960
morning sessions after being

8
00:00:22,960 --> 00:00:26,480
drunk for example so thank you very much

9
00:00:24,960 --> 00:00:30,560
for coming here today

10
00:00:26,480 --> 00:00:34,480
but before we start who can tell me

11
00:00:30,560 --> 00:00:36,320
louder okay okay so before we start who

12
00:00:34,480 --> 00:00:40,000
can tell me what's in the picture here

13
00:00:36,320 --> 00:00:40,000
any guesses shout if you know

14
00:00:40,800 --> 00:00:45,120
right excellent that's the venerable

15
00:00:43,520 --> 00:00:47,440
electronic and numerical

16
00:00:45,120 --> 00:00:48,160
integrator and computer and that's a

17
00:00:47,440 --> 00:00:51,599
photo of

18
00:00:48,160 --> 00:00:54,480
photoviniac from late 40s

19
00:00:51,600 --> 00:00:56,079
early 50s in the us and i find this

20
00:00:54,480 --> 00:00:57,360
picture very very fascinating for

21
00:00:56,079 --> 00:00:59,280
various reasons

22
00:00:57,360 --> 00:01:00,480
the first is all the wires just they're

23
00:00:59,280 --> 00:01:02,800
just mesmerizing

24
00:01:00,480 --> 00:01:03,760
and i don't know if i should be ashamed

25
00:01:02,800 --> 00:01:06,640
or proud that my

26
00:01:03,760 --> 00:01:07,520
desk looks like this sometimes but you

27
00:01:06,640 --> 00:01:09,680
know

28
00:01:07,520 --> 00:01:11,439
but the most important thing here are

29
00:01:09,680 --> 00:01:12,799
the two programmers in particular the

30
00:01:11,439 --> 00:01:14,880
programmer on the right

31
00:01:12,799 --> 00:01:16,799
who is betty holberton and is the

32
00:01:14,880 --> 00:01:17,759
creator or rather the inventor of the

33
00:01:16,799 --> 00:01:20,000
breakpoint

34
00:01:17,759 --> 00:01:20,960
the breakpoint is this fundamental tool

35
00:01:20,000 --> 00:01:23,520
of debugging

36
00:01:20,960 --> 00:01:24,798
but also testing especially in those

37
00:01:23,520 --> 00:01:26,798
days because

38
00:01:24,799 --> 00:01:28,720
how did you do testing in those days

39
00:01:26,799 --> 00:01:31,040
well you could test like end to end

40
00:01:28,720 --> 00:01:31,920
and test the end result but if you

41
00:01:31,040 --> 00:01:33,840
wanted to

42
00:01:31,920 --> 00:01:35,600
test anything internal then you just had

43
00:01:33,840 --> 00:01:36,159
to stop the world and check the hardware

44
00:01:35,600 --> 00:01:39,119
state

45
00:01:36,159 --> 00:01:40,159
and that's where the break point it's

46
00:01:39,119 --> 00:01:42,479
very useful

47
00:01:40,159 --> 00:01:44,240
and we have come a long long way way

48
00:01:42,479 --> 00:01:46,799
since then we have

49
00:01:44,240 --> 00:01:48,960
better tools we have better processes

50
00:01:46,799 --> 00:01:50,399
right and but improved practices but at

51
00:01:48,960 --> 00:01:52,720
the same time

52
00:01:50,399 --> 00:01:54,240
it feels that we may be a bit stuck in

53
00:01:52,720 --> 00:01:56,798
this era also right

54
00:01:54,240 --> 00:01:59,119
we tend to forget to under utilize the

55
00:01:56,799 --> 00:02:01,439
tools and forget all the lessons

56
00:01:59,119 --> 00:02:03,920
and in this talk i'd like to explore

57
00:02:01,439 --> 00:02:07,119
this from a free software perspective

58
00:02:03,920 --> 00:02:07,680
where things i feel go wrong and how we

59
00:02:07,119 --> 00:02:11,440
can

60
00:02:07,680 --> 00:02:13,840
improve so

61
00:02:11,440 --> 00:02:16,319
this is a picture i took perhaps 10

62
00:02:13,840 --> 00:02:18,480
years ago from a tourist shop

63
00:02:16,319 --> 00:02:20,720
and that sign in the picture had caught

64
00:02:18,480 --> 00:02:22,238
my attention

65
00:02:20,720 --> 00:02:24,239
you know immediately even though i

66
00:02:22,239 --> 00:02:27,280
hadn't realized what was going on

67
00:02:24,239 --> 00:02:29,040
uh from the start right and take a

68
00:02:27,280 --> 00:02:31,599
minute to see if you can find out

69
00:02:29,040 --> 00:02:33,200
what's going on wrong here but this was

70
00:02:31,599 --> 00:02:35,119
my subconscious telling me you know

71
00:02:33,200 --> 00:02:35,839
ringing bells and alarm bells something

72
00:02:35,120 --> 00:02:38,640
is wrong with

73
00:02:35,840 --> 00:02:40,480
danger danger in the same way over the

74
00:02:38,640 --> 00:02:42,720
years i had internally

75
00:02:40,480 --> 00:02:45,518
developed this impression that not

76
00:02:42,720 --> 00:02:48,720
everything is rosy in the automated test

77
00:02:45,519 --> 00:02:51,840
testing world in you know concerning

78
00:02:48,720 --> 00:02:54,239
free and open source software it's it

79
00:02:51,840 --> 00:02:54,879
was mostly back then based on anecdotal

80
00:02:54,239 --> 00:02:57,920
evidence

81
00:02:54,879 --> 00:03:00,640
of a general feeling that

82
00:02:57,920 --> 00:03:02,399
you know i was seeing project bugs that

83
00:03:00,640 --> 00:03:04,958
were inconsistent with having

84
00:03:02,400 --> 00:03:06,480
comprehensive comprehensive automated

85
00:03:04,959 --> 00:03:08,480
testing

86
00:03:06,480 --> 00:03:10,238
and this kept bugging me for many years

87
00:03:08,480 --> 00:03:12,079
at some points i decided to explore but

88
00:03:10,239 --> 00:03:14,879
how do you explore this right

89
00:03:12,080 --> 00:03:15,680
how can you make just a large scale

90
00:03:14,879 --> 00:03:18,159
survey

91
00:03:15,680 --> 00:03:19,760
and make you know and have some kind of

92
00:03:18,159 --> 00:03:22,959
conclusion for

93
00:03:19,760 --> 00:03:26,560
foss in particular in in general right

94
00:03:22,959 --> 00:03:29,440
so the the canonical

95
00:03:26,560 --> 00:03:30,959
metric for test comprehensiveness is

96
00:03:29,440 --> 00:03:34,000
test coverage but this is

97
00:03:30,959 --> 00:03:38,480
quite hard to to extract

98
00:03:34,000 --> 00:03:41,680
from various code bases and

99
00:03:38,480 --> 00:03:44,399
for example you have different

100
00:03:41,680 --> 00:03:46,080
different languages different tools

101
00:03:44,400 --> 00:03:47,280
different build systems so i was

102
00:03:46,080 --> 00:03:49,519
thinking

103
00:03:47,280 --> 00:03:50,640
what else can we use and i consider two

104
00:03:49,519 --> 00:03:53,120
metrics in the end

105
00:03:50,640 --> 00:03:55,279
so the first is test commit percent and

106
00:03:53,120 --> 00:03:59,280
the other is test size percent

107
00:03:55,280 --> 00:04:02,879
so test commit percent is the percent

108
00:03:59,280 --> 00:04:05,280
the percentage of

109
00:04:02,879 --> 00:04:05,920
of commits in a code base which affect

110
00:04:05,280 --> 00:04:09,519
the test

111
00:04:05,920 --> 00:04:12,000
in some way and it makes intuitive

112
00:04:09,519 --> 00:04:12,720
intuitive sense that if this number is

113
00:04:12,000 --> 00:04:15,439
large

114
00:04:12,720 --> 00:04:16,959
then the tests are being taken care of

115
00:04:15,439 --> 00:04:18,880
that they are developed

116
00:04:16,959 --> 00:04:20,798
in sync with the code and thus they are

117
00:04:18,880 --> 00:04:23,199
probably more comprehensive

118
00:04:20,798 --> 00:04:25,599
and similarly for the test code size you

119
00:04:23,199 --> 00:04:26,720
know neither of this metrics is fail

120
00:04:25,600 --> 00:04:28,560
proof

121
00:04:26,720 --> 00:04:30,240
but i think they're good enough for at

122
00:04:28,560 --> 00:04:33,520
least large-scale surveys

123
00:04:30,240 --> 00:04:36,000
and then the other question is uh

124
00:04:33,520 --> 00:04:38,240
on which projects do you run this whole

125
00:04:36,000 --> 00:04:40,960
thing do you extract the metrics from

126
00:04:38,240 --> 00:04:42,240
and i decided to use the gnome and kd

127
00:04:40,960 --> 00:04:44,239
projects basically

128
00:04:42,240 --> 00:04:45,759
all the thousands of sub-projects that

129
00:04:44,240 --> 00:04:48,080
make up this

130
00:04:45,759 --> 00:04:49,120
these top-level projects and the reason

131
00:04:48,080 --> 00:04:51,199
is that

132
00:04:49,120 --> 00:04:54,479
they contain a wide variety of

133
00:04:51,199 --> 00:04:57,120
sub-projects that range from

134
00:04:54,479 --> 00:04:59,039
for example end user applications to

135
00:04:57,120 --> 00:05:01,120
core infrastructure libraries

136
00:04:59,040 --> 00:05:04,479
to graphics libraries command line tools

137
00:05:01,120 --> 00:05:06,560
so a bit of everything basically

138
00:05:04,479 --> 00:05:09,440
and yeah i run the some tools i

139
00:05:06,560 --> 00:05:11,919
developed to extract the metrics

140
00:05:09,440 --> 00:05:15,120
and who wants to hazard a guess what

141
00:05:11,919 --> 00:05:15,120
this was going to look like

142
00:05:15,280 --> 00:05:23,758
okay no no brave men here but

143
00:05:19,280 --> 00:05:26,159
this one is what i got so basically

144
00:05:23,759 --> 00:05:27,919
notice the virtual line at the zero

145
00:05:26,160 --> 00:05:31,120
point that means

146
00:05:27,919 --> 00:05:33,758
that about 50 percent of the projects

147
00:05:31,120 --> 00:05:34,639
don't have any testing at all and that's

148
00:05:33,759 --> 00:05:38,720
kind of sad

149
00:05:34,639 --> 00:05:43,280
right and then the other line at uh 80

150
00:05:38,720 --> 00:05:45,919
tells us that in 80 of the projects

151
00:05:43,280 --> 00:05:48,159
at most one in 10 commits affect the

152
00:05:45,919 --> 00:05:50,000
test so think about this for a minute

153
00:05:48,160 --> 00:05:52,800
for every nine changes that you make to

154
00:05:50,000 --> 00:05:54,560
the code base bug fixes or features

155
00:05:52,800 --> 00:05:55,919
you only have one commit that touches

156
00:05:54,560 --> 00:06:00,080
the test

157
00:05:55,919 --> 00:06:02,560
and that's a very big red flag i mean

158
00:06:00,080 --> 00:06:03,120
it's not the end of the world perhaps

159
00:06:02,560 --> 00:06:05,759
but

160
00:06:03,120 --> 00:06:07,039
you know something very fishy here and i

161
00:06:05,759 --> 00:06:09,759
got similar results for

162
00:06:07,039 --> 00:06:12,159
the test code size ratio for this

163
00:06:09,759 --> 00:06:12,160
project

164
00:06:12,960 --> 00:06:19,680
so i one thing i also did was

165
00:06:16,639 --> 00:06:22,080
got i got ratios for other projects that

166
00:06:19,680 --> 00:06:23,600
i knew that were you know better tested

167
00:06:22,080 --> 00:06:25,199
just to have

168
00:06:23,600 --> 00:06:28,000
something to compare to and you can see

169
00:06:25,199 --> 00:06:30,479
that the metrics are much better here

170
00:06:28,000 --> 00:06:34,880
and this is a good sign that our metrics

171
00:06:30,479 --> 00:06:38,800
are actually working correctly

172
00:06:34,880 --> 00:06:41,280
so okay so we have some indication that

173
00:06:38,800 --> 00:06:41,840
all not ever not everything is correct

174
00:06:41,280 --> 00:06:44,080
in the

175
00:06:41,840 --> 00:06:45,599
free software world concerning automated

176
00:06:44,080 --> 00:06:47,120
testing but

177
00:06:45,600 --> 00:06:49,280
why is this so that's the burning

178
00:06:47,120 --> 00:06:50,319
question right and there are various

179
00:06:49,280 --> 00:06:52,400
reasons

180
00:06:50,319 --> 00:06:54,720
there are some reasons that don't have

181
00:06:52,400 --> 00:06:58,080
that are not particular to free and open

182
00:06:54,720 --> 00:07:01,199
source software for example many people

183
00:06:58,080 --> 00:07:04,159
feel that codes yeah

184
00:07:01,199 --> 00:07:06,160
testing code is not worth their time or

185
00:07:04,160 --> 00:07:06,880
perhaps it's too expensive especially in

186
00:07:06,160 --> 00:07:09,360
the beginning

187
00:07:06,880 --> 00:07:10,960
and that doesn't really have to do with

188
00:07:09,360 --> 00:07:13,120
free software or property software or

189
00:07:10,960 --> 00:07:14,799
any other development model

190
00:07:13,120 --> 00:07:16,400
but i believe there are a few reasons

191
00:07:14,800 --> 00:07:18,319
that are particularly free open source

192
00:07:16,400 --> 00:07:20,239
software that are worth exploring

193
00:07:18,319 --> 00:07:23,199
and in order to do that i want to go

194
00:07:20,240 --> 00:07:26,479
back to the past back to 1968

195
00:07:23,199 --> 00:07:28,240
when this

196
00:07:26,479 --> 00:07:30,159
conference happened this is the soft

197
00:07:28,240 --> 00:07:35,039
first software engineering conference

198
00:07:30,160 --> 00:07:37,440
ever made and it was organized by nato

199
00:07:35,039 --> 00:07:38,159
so there are many of the big minds of

200
00:07:37,440 --> 00:07:40,240
the era

201
00:07:38,160 --> 00:07:41,520
gathered and discussed all the things

202
00:07:40,240 --> 00:07:43,280
that they thought

203
00:07:41,520 --> 00:07:45,919
you know need improvement in in the

204
00:07:43,280 --> 00:07:48,559
field and they came up

205
00:07:45,919 --> 00:07:51,039
sometimes with solutions but often with

206
00:07:48,560 --> 00:07:54,160
very witty and insightful quotes about

207
00:07:51,039 --> 00:07:55,520
about the state of things and if you

208
00:07:54,160 --> 00:07:57,680
haven't read the

209
00:07:55,520 --> 00:07:58,639
the proceedings i highly recommend that

210
00:07:57,680 --> 00:08:02,240
you do

211
00:07:58,639 --> 00:08:05,360
so here's one interesting quote from

212
00:08:02,240 --> 00:08:08,800
the proceedings there this is from alec

213
00:08:05,360 --> 00:08:12,720
gleamy he's often credited as being the

214
00:08:08,800 --> 00:08:15,199
first the creator of the first compiler

215
00:08:12,720 --> 00:08:17,199
and he said software manufacturers

216
00:08:15,199 --> 00:08:19,599
should desist from using customers are

217
00:08:17,199 --> 00:08:20,720
their means of testing systems and in

218
00:08:19,599 --> 00:08:23,120
the 50 years since

219
00:08:20,720 --> 00:08:25,039
this was written i'm not sure that we

220
00:08:23,120 --> 00:08:28,400
have learned the lesson properly

221
00:08:25,039 --> 00:08:29,199
and sadly i think that for free software

222
00:08:28,400 --> 00:08:31,198
it's it's

223
00:08:29,199 --> 00:08:32,800
a bit worse than you know the general

224
00:08:31,199 --> 00:08:36,320
industry standards

225
00:08:32,799 --> 00:08:37,919
so why is that you see in free software

226
00:08:36,320 --> 00:08:40,240
having a bug in the code

227
00:08:37,919 --> 00:08:41,279
is often not considered to be such a big

228
00:08:40,240 --> 00:08:42,959
deal right

229
00:08:41,279 --> 00:08:44,480
the software is provided as is and

230
00:08:42,958 --> 00:08:46,880
without any warranty

231
00:08:44,480 --> 00:08:48,000
and to be honest that's completely fair

232
00:08:46,880 --> 00:08:49,600
myself as a

233
00:08:48,000 --> 00:08:51,200
free software developer i wouldn't have

234
00:08:49,600 --> 00:08:54,560
it any other way

235
00:08:51,200 --> 00:08:57,760
but at the same time that means that

236
00:08:54,560 --> 00:08:59,599
there's this conception that fixing bugs

237
00:08:57,760 --> 00:09:02,880
that bugs are cheap and fix them

238
00:08:59,600 --> 00:09:05,279
is also cheap and in reality that's a

239
00:09:02,880 --> 00:09:08,720
somewhat pragmatic attitude to have

240
00:09:05,279 --> 00:09:10,800
because why spend resources

241
00:09:08,720 --> 00:09:13,120
precious resources trying hard to

242
00:09:10,800 --> 00:09:15,599
prevent bugs when fixing bugs

243
00:09:13,120 --> 00:09:16,880
it's is actually quite cheap from the

244
00:09:15,600 --> 00:09:18,959
developer perspective

245
00:09:16,880 --> 00:09:19,920
but here's the caveat this is a very

246
00:09:18,959 --> 00:09:23,040
developer

247
00:09:19,920 --> 00:09:26,640
centric uh idea and

248
00:09:23,040 --> 00:09:26,640
from the user perspective

249
00:09:27,040 --> 00:09:31,199
things may not be so simple for example

250
00:09:28,880 --> 00:09:32,000
if as a user you have lost data if as a

251
00:09:31,200 --> 00:09:34,000
user you have

252
00:09:32,000 --> 00:09:36,000
had your system compromised because of a

253
00:09:34,000 --> 00:09:38,320
security bug

254
00:09:36,000 --> 00:09:40,480
then you don't you certainly don't feel

255
00:09:38,320 --> 00:09:42,160
that bugs are cheap

256
00:09:40,480 --> 00:09:44,399
and yeah at this point you may say okay

257
00:09:42,160 --> 00:09:45,920
so are you saying that there's no

258
00:09:44,399 --> 00:09:47,680
that free software sucks in terms of

259
00:09:45,920 --> 00:09:51,360
quality no

260
00:09:47,680 --> 00:09:54,079
because there's another thing you know

261
00:09:51,360 --> 00:09:56,320
uh pulling the rope in the other

262
00:09:54,080 --> 00:09:59,360
direction and that's professional pride

263
00:09:56,320 --> 00:09:59,839
freeno personal software has a lot of

264
00:09:59,360 --> 00:10:02,640
that

265
00:09:59,839 --> 00:10:03,440
and the developers in the spotlight for

266
00:10:02,640 --> 00:10:05,360
the good and bad

267
00:10:03,440 --> 00:10:07,279
things right we have get blame we have

268
00:10:05,360 --> 00:10:09,040
get praise everyone knows what we're

269
00:10:07,279 --> 00:10:11,680
doing

270
00:10:09,040 --> 00:10:12,640
so it's just that many incentives in

271
00:10:11,680 --> 00:10:15,439
free software

272
00:10:12,640 --> 00:10:16,880
seem to point to a more reactive rather

273
00:10:15,440 --> 00:10:20,320
than proactive approach

274
00:10:16,880 --> 00:10:21,680
right so and this is something that

275
00:10:20,320 --> 00:10:24,000
we're going to see also in the next

276
00:10:21,680 --> 00:10:25,439
topic and moving to the next topic i

277
00:10:24,000 --> 00:10:28,480
want to go

278
00:10:25,440 --> 00:10:30,480
back to the future to 1999 when

279
00:10:28,480 --> 00:10:32,720
this book was published so this is the

280
00:10:30,480 --> 00:10:34,959
cathedral and the bazaar

281
00:10:32,720 --> 00:10:36,959
this book explores two different ways of

282
00:10:34,959 --> 00:10:38,399
developing free software the cathedral

283
00:10:36,959 --> 00:10:40,959
model and the bazaar model

284
00:10:38,399 --> 00:10:41,760
and it's this book in particular

285
00:10:40,959 --> 00:10:44,239
proposed

286
00:10:41,760 --> 00:10:46,160
supports the bazaar model and it

287
00:10:44,240 --> 00:10:49,040
contains a number of quotes

288
00:10:46,160 --> 00:10:50,800
or lessons as they are mentioned about

289
00:10:49,040 --> 00:10:53,760
how free software works

290
00:10:50,800 --> 00:10:55,359
or should work and here are two very

291
00:10:53,760 --> 00:10:57,519
interesting ones in the book

292
00:10:55,360 --> 00:10:59,920
every good work of software starts by

293
00:10:57,519 --> 00:11:00,640
scratching a developer's personal itch

294
00:10:59,920 --> 00:11:02,479
and the other

295
00:11:00,640 --> 00:11:04,560
released early release often and listen

296
00:11:02,480 --> 00:11:08,640
to your customers

297
00:11:04,560 --> 00:11:11,359
so for the first one

298
00:11:08,640 --> 00:11:12,480
you may first of all you may have doubts

299
00:11:11,360 --> 00:11:14,800
about

300
00:11:12,480 --> 00:11:15,920
the absolute terms in which it's raised

301
00:11:14,800 --> 00:11:18,479
but one thing that

302
00:11:15,920 --> 00:11:19,760
is true is that many software projects

303
00:11:18,480 --> 00:11:23,760
in the free software world

304
00:11:19,760 --> 00:11:26,000
start by scratching a developer itch

305
00:11:23,760 --> 00:11:28,240
and often they start small and without

306
00:11:26,000 --> 00:11:30,720
any plans for significant growth

307
00:11:28,240 --> 00:11:32,959
or adoption and at this point the

308
00:11:30,720 --> 00:11:35,440
incentives to have an automated test

309
00:11:32,959 --> 00:11:37,040
suite to spend time on this are limited

310
00:11:35,440 --> 00:11:40,240
at the same time

311
00:11:37,040 --> 00:11:43,599
even in cases where projects start with

312
00:11:40,240 --> 00:11:46,640
more lofty adoption goals

313
00:11:43,600 --> 00:11:49,200
then you know this is uh

314
00:11:46,640 --> 00:11:51,439
they may follow to to a great extent

315
00:11:49,200 --> 00:11:52,079
this mentality really release early and

316
00:11:51,440 --> 00:11:55,519
release

317
00:11:52,079 --> 00:11:58,000
often and this mentality has

318
00:11:55,519 --> 00:11:58,560
great benefits but if followed to an

319
00:11:58,000 --> 00:12:01,040
extreme

320
00:11:58,560 --> 00:12:02,959
and also followed very early in the

321
00:12:01,040 --> 00:12:06,639
project development

322
00:12:02,959 --> 00:12:09,119
leads to projects placing the focus too

323
00:12:06,639 --> 00:12:10,079
much on features too much on becoming as

324
00:12:09,120 --> 00:12:11,839
relevant to

325
00:12:10,079 --> 00:12:13,920
the public as possible as soon as

326
00:12:11,839 --> 00:12:16,240
possible and often

327
00:12:13,920 --> 00:12:18,000
uh the incentives again here you know

328
00:12:16,240 --> 00:12:20,800
from that perspective spending

329
00:12:18,000 --> 00:12:21,440
limited time and resources on writing

330
00:12:20,800 --> 00:12:24,479
tests

331
00:12:21,440 --> 00:12:26,560
you know may seem like a bad use of time

332
00:12:24,480 --> 00:12:29,040
but regardless of how a project starts

333
00:12:26,560 --> 00:12:31,599
typically if it starts to grow

334
00:12:29,040 --> 00:12:33,599
large then you know bugs start creeping

335
00:12:31,600 --> 00:12:34,399
up and at this point developers say okay

336
00:12:33,600 --> 00:12:36,839
so perhaps

337
00:12:34,399 --> 00:12:38,240
now it's time to have an automated test

338
00:12:36,839 --> 00:12:40,959
suite

339
00:12:38,240 --> 00:12:42,800
but you know it's too late by then in

340
00:12:40,959 --> 00:12:45,599
most cases that

341
00:12:42,800 --> 00:12:47,279
the the test like the code has become

342
00:12:45,600 --> 00:12:50,800
test and friendly

343
00:12:47,279 --> 00:12:51,439
it's difficult to to add tests at this

344
00:12:50,800 --> 00:12:53,680
point

345
00:12:51,440 --> 00:12:54,959
typically and most projects just just

346
00:12:53,680 --> 00:12:58,399
don't do that

347
00:12:54,959 --> 00:13:01,680
so again we see here this idea of tests

348
00:12:58,399 --> 00:13:04,240
as a forethought versus compared to

349
00:13:01,680 --> 00:13:07,839
test as an afterthought so like a

350
00:13:04,240 --> 00:13:07,839
reactive versus proactive approach

351
00:13:08,399 --> 00:13:13,920
so now that book contained

352
00:13:11,680 --> 00:13:15,040
another very interesting code the which

353
00:13:13,920 --> 00:13:17,599
is probably the

354
00:13:15,040 --> 00:13:19,760
most well known in the free software

355
00:13:17,600 --> 00:13:23,839
world given enough eyeballs all

356
00:13:19,760 --> 00:13:26,880
black old bugs are shallow and this is

357
00:13:23,839 --> 00:13:28,639
called linus's uh law in

358
00:13:26,880 --> 00:13:30,880
honor of linus and lin didn't say that

359
00:13:28,639 --> 00:13:34,079
it's just in the book there

360
00:13:30,880 --> 00:13:38,000
so and it refers to code reviews

361
00:13:34,079 --> 00:13:40,638
so let's see code reviews

362
00:13:38,000 --> 00:13:41,760
free software is very privileged because

363
00:13:40,639 --> 00:13:43,440
code reviews are

364
00:13:41,760 --> 00:13:45,199
in in the heart of their development

365
00:13:43,440 --> 00:13:47,440
model

366
00:13:45,199 --> 00:13:49,519
and that is because only limited people

367
00:13:47,440 --> 00:13:51,920
have access to the code base

368
00:13:49,519 --> 00:13:53,519
so every change every merge request pull

369
00:13:51,920 --> 00:13:57,199
request that needs to come in needs

370
00:13:53,519 --> 00:13:57,199
to be reviewed at some point

371
00:13:57,279 --> 00:14:00,639
right unfortunately some projects take

372
00:14:00,160 --> 00:14:03,120
again

373
00:14:00,639 --> 00:14:04,720
this to an extreme and the trust and

374
00:14:03,120 --> 00:14:07,120
code reviews is so great

375
00:14:04,720 --> 00:14:10,000
to that you know that other practices

376
00:14:07,120 --> 00:14:13,680
include automated testing are forsaken

377
00:14:10,000 --> 00:14:16,160
so don't get me wrong code reviews are

378
00:14:13,680 --> 00:14:18,638
one of the best ways to maintain

379
00:14:16,160 --> 00:14:19,199
quality in the code they help maintain a

380
00:14:18,639 --> 00:14:21,440
design

381
00:14:19,199 --> 00:14:22,639
the same design they ensure that all the

382
00:14:21,440 --> 00:14:25,279
changes

383
00:14:22,639 --> 00:14:25,839
align well with the architecture of the

384
00:14:25,279 --> 00:14:28,480
project

385
00:14:25,839 --> 00:14:29,680
and the overall goals of the project and

386
00:14:28,480 --> 00:14:32,079
they also help

387
00:14:29,680 --> 00:14:33,120
catch bugs but only some of them and

388
00:14:32,079 --> 00:14:36,719
some of the time

389
00:14:33,120 --> 00:14:39,600
and the problem here is with

390
00:14:36,720 --> 00:14:40,800
not the code review idea itself the idea

391
00:14:39,600 --> 00:14:42,959
of code reviewing

392
00:14:40,800 --> 00:14:44,560
but the fact that we are doing the code

393
00:14:42,959 --> 00:14:47,279
reading humans

394
00:14:44,560 --> 00:14:49,279
and humans we have inherent limitations

395
00:14:47,279 --> 00:14:51,439
right our brains are limited

396
00:14:49,279 --> 00:14:52,560
we are great at creative thought but we

397
00:14:51,440 --> 00:14:56,240
are also great at

398
00:14:52,560 --> 00:14:58,719
overlooking overlooking details and also

399
00:14:56,240 --> 00:15:00,800
when there are gaps in our understanding

400
00:14:58,720 --> 00:15:01,839
we are very happy to fill them with our

401
00:15:00,800 --> 00:15:04,880
own you know

402
00:15:01,839 --> 00:15:08,079
unicorns and rainbow based

403
00:15:04,880 --> 00:15:11,040
reality of things in addition as the

404
00:15:08,079 --> 00:15:11,040
code base grows

405
00:15:11,360 --> 00:15:14,480
all the interactions and the possible

406
00:15:13,199 --> 00:15:16,639
states grow uh

407
00:15:14,480 --> 00:15:18,079
sometimes exponentially and it's very

408
00:15:16,639 --> 00:15:20,160
difficult for us

409
00:15:18,079 --> 00:15:22,479
to keep all that state in our in our

410
00:15:20,160 --> 00:15:22,719
mind and and so follow the code paths

411
00:15:22,480 --> 00:15:25,040
and

412
00:15:22,720 --> 00:15:27,760
all the implications that one change

413
00:15:25,040 --> 00:15:31,599
make may have

414
00:15:27,760 --> 00:15:33,759
and so in theory

415
00:15:31,600 --> 00:15:35,920
this problem of human limitation is

416
00:15:33,759 --> 00:15:37,440
offset by the open nature of the code

417
00:15:35,920 --> 00:15:39,680
and the fact that we have

418
00:15:37,440 --> 00:15:41,680
enough eyeballs but what number is

419
00:15:39,680 --> 00:15:44,638
enough even

420
00:15:41,680 --> 00:15:46,239
the biggest uh free software project

421
00:15:44,639 --> 00:15:48,320
links kernel for example

422
00:15:46,240 --> 00:15:49,440
only have a limited amount of reviewer

423
00:15:48,320 --> 00:15:53,440
checking

424
00:15:49,440 --> 00:15:55,440
the the changes so it's good i mean

425
00:15:53,440 --> 00:15:56,959
more is better than one right but at the

426
00:15:55,440 --> 00:16:00,639
same time you know

427
00:15:56,959 --> 00:16:02,719
that enough is very indeterminate so

428
00:16:00,639 --> 00:16:04,720
sometimes it works sometimes it doesn't

429
00:16:02,720 --> 00:16:06,320
um

430
00:16:04,720 --> 00:16:08,160
and that means in the end for all the

431
00:16:06,320 --> 00:16:10,240
reason i mentioned

432
00:16:08,160 --> 00:16:12,079
that code reviews by themself as

433
00:16:10,240 --> 00:16:14,959
excellent as they are cannot stand

434
00:16:12,079 --> 00:16:17,199
as the only tool and we need to be

435
00:16:14,959 --> 00:16:19,040
careful not to place all our trust in

436
00:16:17,199 --> 00:16:22,639
code reviews

437
00:16:19,040 --> 00:16:25,759
and forsake other tools that we have

438
00:16:22,639 --> 00:16:27,839
so for the next topic i'd like to

439
00:16:25,759 --> 00:16:28,800
uh to explore a more fundamental

440
00:16:27,839 --> 00:16:31,440
question and that

441
00:16:28,800 --> 00:16:32,160
that is the question of learning how do

442
00:16:31,440 --> 00:16:35,040
people learn

443
00:16:32,160 --> 00:16:36,000
in general they basically and in

444
00:16:35,040 --> 00:16:40,639
particular how

445
00:16:36,000 --> 00:16:42,480
they learn that some software practices

446
00:16:40,639 --> 00:16:44,639
are beneficial to them so they can

447
00:16:42,480 --> 00:16:47,040
follow them so they learn by example

448
00:16:44,639 --> 00:16:48,079
they learn by mimicking what the best in

449
00:16:47,040 --> 00:16:50,319
the field

450
00:16:48,079 --> 00:16:53,120
are doing and they learn about this from

451
00:16:50,320 --> 00:16:55,360
books they learn about this from

452
00:16:53,120 --> 00:16:57,920
videos they learn about this if they are

453
00:16:55,360 --> 00:16:59,839
lucky enough they have a mentor

454
00:16:57,920 --> 00:17:01,279
and again free software is very

455
00:16:59,839 --> 00:17:03,680
privileged here

456
00:17:01,279 --> 00:17:05,919
because we have this huge library of

457
00:17:03,680 --> 00:17:07,760
alexandria of code right that we can we

458
00:17:05,919 --> 00:17:09,839
can go into this library and explore and

459
00:17:07,760 --> 00:17:13,280
this is indeed what many people do

460
00:17:09,839 --> 00:17:13,678
they they explore this library and try

461
00:17:13,280 --> 00:17:17,359
to

462
00:17:13,679 --> 00:17:19,760
imitate what their role models are doing

463
00:17:17,359 --> 00:17:20,719
and when they go and into this library

464
00:17:19,760 --> 00:17:23,199
what do they see

465
00:17:20,720 --> 00:17:24,000
so based on the graphs i showed you

466
00:17:23,199 --> 00:17:26,079
earlier then

467
00:17:24,000 --> 00:17:27,599
they see a big pile of nothing in terms

468
00:17:26,079 --> 00:17:29,678
of automated testing

469
00:17:27,599 --> 00:17:31,520
and on the other hand the other extreme

470
00:17:29,679 --> 00:17:34,799
they have this

471
00:17:31,520 --> 00:17:37,520
like monstrous code basis with huge

472
00:17:34,799 --> 00:17:38,160
tests huge test suites and arcane test

473
00:17:37,520 --> 00:17:42,160
suites

474
00:17:38,160 --> 00:17:44,880
so this is an example of a test

475
00:17:42,160 --> 00:17:46,320
that belongs in this category on purpose

476
00:17:44,880 --> 00:17:48,559
i made the small font

477
00:17:46,320 --> 00:17:49,760
the font very small because it didn't

478
00:17:48,559 --> 00:17:52,000
want to scar you for life

479
00:17:49,760 --> 00:17:53,200
so i'm not so please don't read it in

480
00:17:52,000 --> 00:17:56,080
detail

481
00:17:53,200 --> 00:17:58,320
right and this the whole thing this

482
00:17:56,080 --> 00:18:00,559
creates a negative network effect

483
00:17:58,320 --> 00:18:01,678
so why should you bother doing automated

484
00:18:00,559 --> 00:18:04,799
testing when your

485
00:18:01,679 --> 00:18:06,080
role model uh project doesn't or

486
00:18:04,799 --> 00:18:08,160
when you say something like that and i

487
00:18:06,080 --> 00:18:08,720
mean this is ugly so you don't want to

488
00:18:08,160 --> 00:18:11,760
do

489
00:18:08,720 --> 00:18:13,919
something exactly as that and we need to

490
00:18:11,760 --> 00:18:15,120
be very very careful with the examples

491
00:18:13,919 --> 00:18:17,120
and the culture

492
00:18:15,120 --> 00:18:18,879
we create and promote because it's

493
00:18:17,120 --> 00:18:21,120
really a slippery slope

494
00:18:18,880 --> 00:18:22,880
and things can get really out of hand

495
00:18:21,120 --> 00:18:24,799
i'm sure the 80s started with all the

496
00:18:22,880 --> 00:18:28,160
best intentions and then we got this

497
00:18:24,799 --> 00:18:29,440
right so this is not something that we

498
00:18:28,160 --> 00:18:31,520
want to

499
00:18:29,440 --> 00:18:32,960
to happen to free software and automated

500
00:18:31,520 --> 00:18:34,799
testing

501
00:18:32,960 --> 00:18:36,320
so it's very important that we should

502
00:18:34,799 --> 00:18:39,679
create

503
00:18:36,320 --> 00:18:40,480
uh more and better examples and as the

504
00:18:39,679 --> 00:18:43,760
saying goes

505
00:18:40,480 --> 00:18:47,840
uh be aware of advice but follow good

506
00:18:43,760 --> 00:18:49,760
examples so i'm now going to break that

507
00:18:47,840 --> 00:18:51,760
rule a bit and because i'm trying i'll

508
00:18:49,760 --> 00:18:55,679
try to give you some advice

509
00:18:51,760 --> 00:18:56,320
and starting with this embrace automated

510
00:18:55,679 --> 00:19:00,640
testing

511
00:18:56,320 --> 00:19:04,000
from day zero so

512
00:19:00,640 --> 00:19:05,840
as uh we talked about before and perhaps

513
00:19:04,000 --> 00:19:08,080
many of you have experienced as the

514
00:19:05,840 --> 00:19:12,000
larger project gets without testing the

515
00:19:08,080 --> 00:19:15,199
more difficult it is to add

516
00:19:12,000 --> 00:19:19,120
more difficult is to add testing

517
00:19:15,200 --> 00:19:22,160
after the fact and this is particular

518
00:19:19,120 --> 00:19:25,039
important for for free software because

519
00:19:22,160 --> 00:19:25,440
as i mentioned before the incentives are

520
00:19:25,039 --> 00:19:28,080
there

521
00:19:25,440 --> 00:19:28,480
for being reactive rather than proactive

522
00:19:28,080 --> 00:19:30,320
so

523
00:19:28,480 --> 00:19:31,760
having tests from day zero is an

524
00:19:30,320 --> 00:19:35,039
important step

525
00:19:31,760 --> 00:19:37,120
and but it's not enough to

526
00:19:35,039 --> 00:19:38,480
to just start with tests we need to

527
00:19:37,120 --> 00:19:41,120
maintain

528
00:19:38,480 --> 00:19:42,559
a good testing culture for the lifetime

529
00:19:41,120 --> 00:19:44,719
of the project

530
00:19:42,559 --> 00:19:46,399
and this is where the next piece of

531
00:19:44,720 --> 00:19:49,520
advice

532
00:19:46,400 --> 00:19:52,480
comes in so we need to set the bar

533
00:19:49,520 --> 00:19:54,240
high first for ourselves as for example

534
00:19:52,480 --> 00:19:56,080
maintainers of the projects

535
00:19:54,240 --> 00:19:58,240
and also set the bar high for

536
00:19:56,080 --> 00:20:01,280
contributors also

537
00:19:58,240 --> 00:20:02,640
and so yeah basically we need to lead by

538
00:20:01,280 --> 00:20:04,960
example

539
00:20:02,640 --> 00:20:06,960
it's often the case that contributors

540
00:20:04,960 --> 00:20:09,360
may need some help

541
00:20:06,960 --> 00:20:11,120
to get over that bar and we can do that

542
00:20:09,360 --> 00:20:12,080
a bit proactively for example we can

543
00:20:11,120 --> 00:20:14,799
have

544
00:20:12,080 --> 00:20:16,080
a very nice and clean test suite easy to

545
00:20:14,799 --> 00:20:19,120
understand

546
00:20:16,080 --> 00:20:23,120
so people can just jump in

547
00:20:19,120 --> 00:20:25,120
we can use frameworks that

548
00:20:23,120 --> 00:20:26,158
testing frameworks are well known so

549
00:20:25,120 --> 00:20:29,360
that the buyer

550
00:20:26,159 --> 00:20:30,880
barrier for entry is low for people and

551
00:20:29,360 --> 00:20:31,678
and sometimes you know someone will come

552
00:20:30,880 --> 00:20:34,720
to the project

553
00:20:31,679 --> 00:20:36,159
will have um interesting bug fix but

554
00:20:34,720 --> 00:20:37,200
they're not interested in writing a test

555
00:20:36,159 --> 00:20:39,679
you know they'll just throw it

556
00:20:37,200 --> 00:20:40,480
at you and it's up to us to try to

557
00:20:39,679 --> 00:20:43,360
encourage them

558
00:20:40,480 --> 00:20:46,559
but if that doesn't work we'll write the

559
00:20:43,360 --> 00:20:49,840
test ourselves and this is fine

560
00:20:46,559 --> 00:20:52,080
and finally

561
00:20:49,840 --> 00:20:52,879
the last point here be humble and you

562
00:20:52,080 --> 00:20:54,480
may wonder

563
00:20:52,880 --> 00:20:55,919
what does humility have to do with

564
00:20:54,480 --> 00:20:59,600
automated testing

565
00:20:55,919 --> 00:21:02,240
and i say basically everything because

566
00:20:59,600 --> 00:21:02,639
automated testing is an acknowledgment

567
00:21:02,240 --> 00:21:05,360
of

568
00:21:02,640 --> 00:21:07,520
our inherent limitations like in as i

569
00:21:05,360 --> 00:21:10,559
mentioned before in ourselves

570
00:21:07,520 --> 00:21:13,360
and the limitations to invariably create

571
00:21:10,559 --> 00:21:15,039
infallible complex systems it's

572
00:21:13,360 --> 00:21:17,039
basically humility in the face of

573
00:21:15,039 --> 00:21:19,120
overbearing complexity

574
00:21:17,039 --> 00:21:20,080
and we need to be humble in order to

575
00:21:19,120 --> 00:21:22,080
accept

576
00:21:20,080 --> 00:21:23,520
all the help we can get from tools like

577
00:21:22,080 --> 00:21:25,678
automated testing

578
00:21:23,520 --> 00:21:27,520
like code reviewing and you know

579
00:21:25,679 --> 00:21:31,440
whatever

580
00:21:27,520 --> 00:21:33,120
is works uh for people so

581
00:21:31,440 --> 00:21:35,600
an interesting note here when i started

582
00:21:33,120 --> 00:21:38,000
out programming many many years ago

583
00:21:35,600 --> 00:21:39,600
i had the impression that the more

584
00:21:38,000 --> 00:21:42,640
experience i got

585
00:21:39,600 --> 00:21:45,439
the more i got exposed to projects and

586
00:21:42,640 --> 00:21:47,520
people and teams the more confident i

587
00:21:45,440 --> 00:21:49,440
would become in just sitting down

588
00:21:47,520 --> 00:21:51,918
getting in the zone and streaming out

589
00:21:49,440 --> 00:21:53,679
super correct code right

590
00:21:51,919 --> 00:21:55,679
and that didn't happen actually the

591
00:21:53,679 --> 00:21:59,360
exact opposite happened

592
00:21:55,679 --> 00:22:01,280
the the more experience i got the

593
00:21:59,360 --> 00:22:02,399
the more i realized how fragile this

594
00:22:01,280 --> 00:22:05,678
whole process is

595
00:22:02,400 --> 00:22:08,880
how intricate the act of writing

596
00:22:05,679 --> 00:22:12,320
code is and how i needed to depend

597
00:22:08,880 --> 00:22:15,360
on other tools external tools to

598
00:22:12,320 --> 00:22:17,600
to help maintain the quality so

599
00:22:15,360 --> 00:22:19,280
closing i would like to mention one last

600
00:22:17,600 --> 00:22:21,678
thing

601
00:22:19,280 --> 00:22:23,520
free software is a culture of openness

602
00:22:21,679 --> 00:22:25,440
it's a culture of cooperation it's a

603
00:22:23,520 --> 00:22:28,879
culture of respect

604
00:22:25,440 --> 00:22:30,240
so we want to promote automated testing

605
00:22:28,880 --> 00:22:32,799
but we cannot demand it

606
00:22:30,240 --> 00:22:34,320
from others we can only encourage it but

607
00:22:32,799 --> 00:22:36,799
most importantly

608
00:22:34,320 --> 00:22:37,520
we need to lead by example we need to be

609
00:22:36,799 --> 00:22:55,650
the change

610
00:22:37,520 --> 00:22:58,789
that we want to see so thank you

611
00:22:55,650 --> 00:22:58,789
[Music]

612
00:23:06,840 --> 00:23:09,840
right

613
00:23:14,320 --> 00:23:20,879
it's harder to maintain is there any

614
00:23:19,720 --> 00:23:22,950
data

615
00:23:20,880 --> 00:23:26,029
like

616
00:23:22,950 --> 00:23:26,029
[Music]

617
00:23:33,919 --> 00:23:37,360
that arise or because of this amount of

618
00:23:36,320 --> 00:23:40,720
merge requests

619
00:23:37,360 --> 00:23:42,639
or something along those lines okay so

620
00:23:40,720 --> 00:23:44,640
the question is

621
00:23:42,640 --> 00:23:45,760
we have all this data that tells us tell

622
00:23:44,640 --> 00:23:47,919
us that

623
00:23:45,760 --> 00:23:50,400
projects don't have tests and does this

624
00:23:47,919 --> 00:23:52,000
correlate with

625
00:23:50,400 --> 00:23:53,520
projects actually being harder to

626
00:23:52,000 --> 00:23:56,720
maintain that's the question

627
00:23:53,520 --> 00:23:58,000
right so i don't have exact data for the

628
00:23:56,720 --> 00:24:01,440
maintenance

629
00:23:58,000 --> 00:24:03,919
side of things at least

630
00:24:01,440 --> 00:24:04,880
you know you know hard data for this but

631
00:24:03,919 --> 00:24:08,080
i do have personal

632
00:24:04,880 --> 00:24:09,840
experience uh in this and i yeah it's

633
00:24:08,080 --> 00:24:12,639
a valid question right we need to have

634
00:24:09,840 --> 00:24:15,199
data like uh we've got data for this

635
00:24:12,640 --> 00:24:16,880
is the correlation there but uh no i'm

636
00:24:15,200 --> 00:24:19,919
sorry i don't have a

637
00:24:16,880 --> 00:24:23,520
data like a number of bug reports or

638
00:24:19,919 --> 00:24:25,520
you know that be one of

639
00:24:23,520 --> 00:24:27,039
so supposing for a month that will test

640
00:24:25,520 --> 00:24:29,679
a written problem you know

641
00:24:27,039 --> 00:24:32,400
what would you consider to be a healthy

642
00:24:29,679 --> 00:24:32,400
percentage

643
00:24:39,950 --> 00:24:44,159
[Music]

644
00:24:41,600 --> 00:24:44,879
right so there's no good answer here

645
00:24:44,159 --> 00:24:48,640
because

646
00:24:44,880 --> 00:24:51,039
yeah sorry the question is uh what kind

647
00:24:48,640 --> 00:24:51,840
of percentages would be normal for you

648
00:24:51,039 --> 00:24:53,679
know healthy

649
00:24:51,840 --> 00:24:55,279
projects that have like a good amount of

650
00:24:53,679 --> 00:24:56,880
automated testing

651
00:24:55,279 --> 00:24:58,840
and there's no good answer here for

652
00:24:56,880 --> 00:25:00,960
example look at this graph here there

653
00:24:58,840 --> 00:25:02,720
are

654
00:25:00,960 --> 00:25:04,159
there's a variety of projects spanning

655
00:25:02,720 --> 00:25:06,159
you know all kinds of things from

656
00:25:04,159 --> 00:25:08,640
database to display servers to

657
00:25:06,159 --> 00:25:09,760
core libraries which are considered well

658
00:25:08,640 --> 00:25:13,600
tested

659
00:25:09,760 --> 00:25:14,000
and their ratios differ dramatically but

660
00:25:13,600 --> 00:25:15,840
they are

661
00:25:14,000 --> 00:25:17,679
all high i think we can perhaps set a

662
00:25:15,840 --> 00:25:20,559
minimum amount like we can say

663
00:25:17,679 --> 00:25:21,279
from this graph here that 20 at least

664
00:25:20,559 --> 00:25:24,000
should be

665
00:25:21,279 --> 00:25:24,720
something that would aim we should aim

666
00:25:24,000 --> 00:25:27,760
for

667
00:25:24,720 --> 00:25:28,960
for example notes um the mere project

668
00:25:27,760 --> 00:25:32,158
there

669
00:25:28,960 --> 00:25:34,720
you notice the very high test commit

670
00:25:32,159 --> 00:25:36,320
ratio and that is because i know that

671
00:25:34,720 --> 00:25:37,200
using it is using test driven

672
00:25:36,320 --> 00:25:42,720
development

673
00:25:37,200 --> 00:25:45,360
so that's an indication of that

674
00:25:42,720 --> 00:25:46,799
the exact numbers also depend on the

675
00:25:45,360 --> 00:25:49,918
commit practices right

676
00:25:46,799 --> 00:25:51,840
for example some people you know may

677
00:25:49,919 --> 00:25:53,840
squash the commits or it may have you

678
00:25:51,840 --> 00:25:56,720
know separate commits that you know are

679
00:25:53,840 --> 00:25:58,158
merged so there's not really a very good

680
00:25:56,720 --> 00:26:00,320
answer there

681
00:25:58,159 --> 00:26:01,200
it's just a feeling of being

682
00:26:00,320 --> 00:26:04,480
comprehensive

683
00:26:01,200 --> 00:26:05,120
and by comprehensive i mean having at

684
00:26:04,480 --> 00:26:07,760
least the

685
00:26:05,120 --> 00:26:08,559
core functionality covered because in my

686
00:26:07,760 --> 00:26:12,640
experience

687
00:26:08,559 --> 00:26:14,799
and something that actually um

688
00:26:12,640 --> 00:26:16,240
started this interest the interest for

689
00:26:14,799 --> 00:26:17,760
this topic for me was i was getting

690
00:26:16,240 --> 00:26:19,440
projects i updated them

691
00:26:17,760 --> 00:26:20,879
and then something very core broke and i

692
00:26:19,440 --> 00:26:22,640
was asking myself

693
00:26:20,880 --> 00:26:24,000
did no one test this and of course the

694
00:26:22,640 --> 00:26:26,559
answer was no right there was no

695
00:26:24,000 --> 00:26:26,559
testing there

696
00:26:30,320 --> 00:26:35,600
what's your take on testing the tests

697
00:26:34,000 --> 00:26:37,200
testing the test or the testing

698
00:26:35,600 --> 00:26:40,719
framework

699
00:26:37,200 --> 00:26:40,720
they tested themselves

700
00:26:43,520 --> 00:26:49,679
it depends like right so

701
00:26:47,039 --> 00:26:50,480
i normally don't do that to be honest

702
00:26:49,679 --> 00:26:52,720
it's

703
00:26:50,480 --> 00:26:54,640
unless i feel that the test may be too

704
00:26:52,720 --> 00:26:56,640
complex for example i may have

705
00:26:54,640 --> 00:26:58,799
for example test doubles that try to

706
00:26:56,640 --> 00:27:00,720
emulate some complex part of the system

707
00:26:58,799 --> 00:27:03,279
for example in one project i had

708
00:27:00,720 --> 00:27:04,960
a test doubled for d bus like for

709
00:27:03,279 --> 00:27:07,200
interactions with t bus

710
00:27:04,960 --> 00:27:08,960
so i needed i actually wrote tests for

711
00:27:07,200 --> 00:27:09,840
that right to ensure that my double was

712
00:27:08,960 --> 00:27:12,320
working correctly

713
00:27:09,840 --> 00:27:14,080
and then the test so probably only for

714
00:27:12,320 --> 00:27:15,200
the more complex parts of the test

715
00:27:14,080 --> 00:27:16,879
because then

716
00:27:15,200 --> 00:27:18,840
when do you stop right testing the tests

717
00:27:16,880 --> 00:27:21,840
and the testing you know you stop

718
00:27:18,840 --> 00:27:21,840
nowhere

719
00:27:22,480 --> 00:27:26,960
sorry test project test and test

720
00:27:37,200 --> 00:27:40,720
yeah if that makes sense for that

721
00:27:38,480 --> 00:27:42,240
project yes so yeah

722
00:27:40,720 --> 00:27:44,559
the one of the questions with the

723
00:27:42,240 --> 00:27:48,480
comment that the linux kernel

724
00:27:44,559 --> 00:27:50,720
has tests that test their tests

725
00:27:48,480 --> 00:27:54,240
so yeah that that's a great thing to do

726
00:27:50,720 --> 00:27:54,240
if it makes sense for your project

727
00:27:56,159 --> 00:27:59,679
um the projects without tests is there a

728
00:27:59,200 --> 00:28:03,279
way

729
00:27:59,679 --> 00:28:03,279
for them out of the misery

730
00:28:05,520 --> 00:28:09,120
so i guess it depends right yeah sorry

731
00:28:07,679 --> 00:28:11,840
the question is

732
00:28:09,120 --> 00:28:14,559
is there a way out of the misery of not

733
00:28:11,840 --> 00:28:14,559
being tested

734
00:28:14,840 --> 00:28:19,840
and

735
00:28:16,240 --> 00:28:21,919
so for there are some you know books and

736
00:28:19,840 --> 00:28:23,439
articles about dealing with legacy code

737
00:28:21,919 --> 00:28:25,360
and that perhaps should help there

738
00:28:23,440 --> 00:28:28,080
like you know you consider this project

739
00:28:25,360 --> 00:28:29,439
legacy in some way right not tested

740
00:28:28,080 --> 00:28:31,120
and you go through the process of

741
00:28:29,440 --> 00:28:32,720
figuring out what first of all what it

742
00:28:31,120 --> 00:28:33,360
should be doing write some tests for

743
00:28:32,720 --> 00:28:36,000
this

744
00:28:33,360 --> 00:28:37,600
and then you start refactoring it to be

745
00:28:36,000 --> 00:28:39,679
even more testable and go through this

746
00:28:37,600 --> 00:28:43,199
cycle

747
00:28:39,679 --> 00:28:45,279
uh but in most cases i would say no

748
00:28:43,200 --> 00:28:47,600
unfortunately you know i don't want to

749
00:28:45,279 --> 00:28:48,320
be not optimistic but i haven't seen

750
00:28:47,600 --> 00:28:50,240
that

751
00:28:48,320 --> 00:28:52,158
uh very often unless it's a very high

752
00:28:50,240 --> 00:28:55,200
profile project

753
00:28:52,159 --> 00:28:59,840
you know that someone is very interested

754
00:28:55,200 --> 00:28:59,840
in yeah

755
00:29:08,159 --> 00:29:12,480
yeah the thing is that for many people

756
00:29:11,120 --> 00:29:14,479
if it is too late

757
00:29:12,480 --> 00:29:16,159
then it's not worth it to go back and

758
00:29:14,480 --> 00:29:17,760
add it it's just a

759
00:29:16,159 --> 00:29:19,279
big pain if it complicates project you

760
00:29:17,760 --> 00:29:20,320
know you don't have all the internal

761
00:29:19,279 --> 00:29:22,559
interfaces to check

762
00:29:20,320 --> 00:29:23,918
things uh but of course it depends on

763
00:29:22,559 --> 00:29:26,720
the projects if you can do it that's

764
00:29:23,919 --> 00:29:26,720
great that's awesome

765
00:29:26,960 --> 00:29:35,520
thank you very much

