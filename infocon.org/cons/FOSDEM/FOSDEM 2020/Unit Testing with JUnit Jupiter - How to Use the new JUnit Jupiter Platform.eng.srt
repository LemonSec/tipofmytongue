1
00:00:05,440 --> 00:00:10,000
hello everyone my name is collands mobes

2
00:00:07,600 --> 00:00:12,160
um i'm trying to tell you something

3
00:00:10,000 --> 00:00:12,879
about genuine jupiter platform unit

4
00:00:12,160 --> 00:00:14,559
testing

5
00:00:12,880 --> 00:00:16,720
i'm doing very basic stuff based on the

6
00:00:14,559 --> 00:00:18,880
time because we are really limited

7
00:00:16,720 --> 00:00:20,080
uh well would like to make a real talk

8
00:00:18,880 --> 00:00:22,720
about that we could to

9
00:00:20,080 --> 00:00:23,119
to take two three four hours or more

10
00:00:22,720 --> 00:00:26,240
even

11
00:00:23,119 --> 00:00:27,599
even more um just about something about

12
00:00:26,240 --> 00:00:29,359
me i'm working as a german

13
00:00:27,599 --> 00:00:30,880
freelancer working with java and all

14
00:00:29,359 --> 00:00:34,000
that fancy or not

15
00:00:30,880 --> 00:00:36,399
so fancy stuff uh i'm always also

16
00:00:34,000 --> 00:00:38,399
a part of the apache maven pmc i'm

17
00:00:36,399 --> 00:00:40,879
apache software foundation member

18
00:00:38,399 --> 00:00:42,239
as you already heard by christian so we

19
00:00:40,879 --> 00:00:44,079
are working a little bit together on

20
00:00:42,239 --> 00:00:46,399
some some parts of that

21
00:00:44,079 --> 00:00:48,160
what i would like to do is show you some

22
00:00:46,399 --> 00:00:50,000
code i don't want to make

23
00:00:48,160 --> 00:00:52,640
much slides here i just wanted to show

24
00:00:50,000 --> 00:00:52,640
you some code

25
00:00:52,800 --> 00:00:56,160
start that way so i'm sitting down then

26
00:00:54,800 --> 00:00:57,519
that's the reason why i'm sitting in

27
00:00:56,160 --> 00:00:58,160
here in front of the keyboard the

28
00:00:57,520 --> 00:01:00,160
keyword

29
00:00:58,160 --> 00:01:01,599
keyboard that you could uh see what i'm

30
00:01:00,160 --> 00:01:05,119
trying to do and show

31
00:01:01,600 --> 00:01:07,760
your real code so where we begin

32
00:01:05,119 --> 00:01:08,320
is a very simple simple class uh don't

33
00:01:07,760 --> 00:01:10,320
blame me

34
00:01:08,320 --> 00:01:11,520
about the code quality or something like

35
00:01:10,320 --> 00:01:14,080
that that is simply

36
00:01:11,520 --> 00:01:16,080
just a class to show some identities or

37
00:01:14,080 --> 00:01:18,000
how to do some unit testing

38
00:01:16,080 --> 00:01:20,080
uh i think you can implement that better

39
00:01:18,000 --> 00:01:22,320
than i do but it's just a

40
00:01:20,080 --> 00:01:24,400
kind of a presentation for a code so we

41
00:01:22,320 --> 00:01:25,520
have a simple static members here very

42
00:01:24,400 --> 00:01:28,560
simple thing

43
00:01:25,520 --> 00:01:31,920
and we think about uh i think uh

44
00:01:28,560 --> 00:01:32,640
things like junit 4 to write our unit

45
00:01:31,920 --> 00:01:34,000
test

46
00:01:32,640 --> 00:01:36,400
and i would like to show you some

47
00:01:34,000 --> 00:01:38,720
differences between junit 4 for example

48
00:01:36,400 --> 00:01:40,079
and maybe of some information about test

49
00:01:38,720 --> 00:01:42,960
and g in comparison to

50
00:01:40,079 --> 00:01:44,479
uh juniper 5 platform for example so let

51
00:01:42,960 --> 00:01:46,640
us start with a very simple

52
00:01:44,479 --> 00:01:47,679
use case and write some unit tests here

53
00:01:46,640 --> 00:01:50,880
in a simple way

54
00:01:47,680 --> 00:01:52,399
based on junit 4. you see i have some

55
00:01:50,880 --> 00:01:54,960
examples here

56
00:01:52,399 --> 00:01:56,240
we will start with this one here very

57
00:01:54,960 --> 00:01:59,360
simple things

58
00:01:56,240 --> 00:02:01,360
uh we wrote a simple test class

59
00:01:59,360 --> 00:02:03,840
of course we have to make it public

60
00:02:01,360 --> 00:02:06,240
things like that we have to name some

61
00:02:03,840 --> 00:02:07,439
somehow the methods of course we need to

62
00:02:06,240 --> 00:02:10,000
write down the code

63
00:02:07,439 --> 00:02:10,720
what i'm using here into for assertion

64
00:02:10,000 --> 00:02:13,440
is not

65
00:02:10,720 --> 00:02:15,280
the basic which is provided by jn5

66
00:02:13,440 --> 00:02:18,800
platform i'm using here the ssj

67
00:02:15,280 --> 00:02:21,120
library but we'll come to these data the

68
00:02:18,800 --> 00:02:22,080
details are coming later a little bit uh

69
00:02:21,120 --> 00:02:24,000
then you see some

70
00:02:22,080 --> 00:02:26,319
test code here of course and just

71
00:02:24,000 --> 00:02:28,239
writing some some test methods here

72
00:02:26,319 --> 00:02:29,359
all of them are of course annotated with

73
00:02:28,239 --> 00:02:32,000
the test annotation

74
00:02:29,360 --> 00:02:33,760
like the usual case here is done in in

75
00:02:32,000 --> 00:02:36,560
junit 4.

76
00:02:33,760 --> 00:02:37,280
what you see is uh that we that i have

77
00:02:36,560 --> 00:02:39,440
implemented

78
00:02:37,280 --> 00:02:40,480
with this some intention that i have a

79
00:02:39,440 --> 00:02:42,640
method which is called

80
00:02:40,480 --> 00:02:44,959
require greater than zero where i have

81
00:02:42,640 --> 00:02:46,000
two implementations of one for integers

82
00:02:44,959 --> 00:02:48,000
one for longs

83
00:02:46,000 --> 00:02:50,879
okay you can do that different i know

84
00:02:48,000 --> 00:02:53,920
but that was intentional here somehow

85
00:02:50,879 --> 00:02:56,560
so you see the different things here and

86
00:02:53,920 --> 00:02:58,799
one thing i have to do here in june 4 is

87
00:02:56,560 --> 00:02:59,120
to name the methods indifferent and make

88
00:02:58,800 --> 00:03:01,360
them

89
00:02:59,120 --> 00:03:02,720
have a different name because otherwise

90
00:03:01,360 --> 00:03:05,120
they clash simply

91
00:03:02,720 --> 00:03:06,800
i really doing technically the same you

92
00:03:05,120 --> 00:03:09,840
can see that very easily

93
00:03:06,800 --> 00:03:12,480
um if i do that that way here

94
00:03:09,840 --> 00:03:13,840
then you see one up with a prefix end

95
00:03:12,480 --> 00:03:15,840
for for the integer part

96
00:03:13,840 --> 00:03:17,120
and one without for the long part of

97
00:03:15,840 --> 00:03:19,760
course so

98
00:03:17,120 --> 00:03:21,760
if you really do that in junit 4 uh it

99
00:03:19,760 --> 00:03:22,799
comes a little bit clumsy over the time

100
00:03:21,760 --> 00:03:25,440
if you write so

101
00:03:22,800 --> 00:03:25,840
somehow some some kind of that test uh

102
00:03:25,440 --> 00:03:28,560
that's

103
00:03:25,840 --> 00:03:29,120
a little bit weird why do you need that

104
00:03:28,560 --> 00:03:31,360
um

105
00:03:29,120 --> 00:03:32,879
you can of course rename the methods in

106
00:03:31,360 --> 00:03:34,799
another way or whatever

107
00:03:32,879 --> 00:03:36,399
but in the end doesn't help because

108
00:03:34,799 --> 00:03:38,159
you're naming the methods

109
00:03:36,400 --> 00:03:41,360
based on an intention that they are

110
00:03:38,159 --> 00:03:44,399
overloaded the parameters of course so

111
00:03:41,360 --> 00:03:45,280
might be not the best case here so let's

112
00:03:44,400 --> 00:03:47,680
go to

113
00:03:45,280 --> 00:03:48,560
how to use that or how can you write

114
00:03:47,680 --> 00:03:51,680
that in

115
00:03:48,560 --> 00:03:52,319
junit 5 platform for example i started

116
00:03:51,680 --> 00:03:55,200
here with a

117
00:03:52,319 --> 00:03:55,760
little bit parts here just make a before

118
00:03:55,200 --> 00:03:58,000
all and

119
00:03:55,760 --> 00:03:59,840
before i will come later to that just

120
00:03:58,000 --> 00:04:01,439
print out some informations it's not

121
00:03:59,840 --> 00:04:01,840
very useful at the moment of course i

122
00:04:01,439 --> 00:04:04,799
hope

123
00:04:01,840 --> 00:04:05,360
you will not blame me for that it's just

124
00:04:04,799 --> 00:04:08,319
to show

125
00:04:05,360 --> 00:04:09,439
what is possible here so the first part

126
00:04:08,319 --> 00:04:11,839
is to do that

127
00:04:09,439 --> 00:04:12,720
simple and translate to the junit 5

128
00:04:11,840 --> 00:04:14,239
platform

129
00:04:12,720 --> 00:04:15,760
and there are some capabilities which

130
00:04:14,239 --> 00:04:19,600
are also supported by

131
00:04:15,760 --> 00:04:20,079
junit 5 that are mark remarkable in this

132
00:04:19,600 --> 00:04:22,000
case

133
00:04:20,079 --> 00:04:23,120
what you see here is the difference that

134
00:04:22,000 --> 00:04:26,000
all the public

135
00:04:23,120 --> 00:04:26,800
modifiers had been removed it is only

136
00:04:26,000 --> 00:04:29,759
necessary

137
00:04:26,800 --> 00:04:30,880
to have a class in a package default or

138
00:04:29,759 --> 00:04:33,199
package private

139
00:04:30,880 --> 00:04:34,800
i don't know what you prefer in that

140
00:04:33,199 --> 00:04:36,800
case so i can remove

141
00:04:34,800 --> 00:04:37,919
the public from the class i can remove

142
00:04:36,800 --> 00:04:41,120
the public from the

143
00:04:37,919 --> 00:04:42,880
methods as well but in the end the only

144
00:04:41,120 --> 00:04:44,479
change here in the in the end is to

145
00:04:42,880 --> 00:04:46,800
remove that

146
00:04:44,479 --> 00:04:49,840
and add the annotation of the junit

147
00:04:46,800 --> 00:04:52,160
platform of course that works perfectly

148
00:04:49,840 --> 00:04:53,280
um but at the end here you are coming to

149
00:04:52,160 --> 00:04:54,960
the point as i said

150
00:04:53,280 --> 00:04:56,880
you have duplicated methods name and

151
00:04:54,960 --> 00:04:58,000
things like that that looks a little bit

152
00:04:56,880 --> 00:05:00,639
strange

153
00:04:58,000 --> 00:05:03,039
so there must be a solution for that to

154
00:05:00,639 --> 00:05:06,560
to do that in a better way of course

155
00:05:03,039 --> 00:05:08,400
and of course nicely the junior 5

156
00:05:06,560 --> 00:05:10,639
platform supports exactly that

157
00:05:08,400 --> 00:05:11,520
that you can do that and handle that in

158
00:05:10,639 --> 00:05:14,000
a correct way

159
00:05:11,520 --> 00:05:14,560
it's much more easier to handle and to

160
00:05:14,000 --> 00:05:17,840
better

161
00:05:14,560 --> 00:05:19,919
get better understanding tests let us

162
00:05:17,840 --> 00:05:23,119
take a look

163
00:05:19,919 --> 00:05:24,560
what you can do is introduce so-called

164
00:05:23,120 --> 00:05:27,039
nested classes

165
00:05:24,560 --> 00:05:28,479
that means you can make a separate class

166
00:05:27,039 --> 00:05:30,080
in your test class

167
00:05:28,479 --> 00:05:31,840
you have to mark it with the nested

168
00:05:30,080 --> 00:05:34,320
annotation and

169
00:05:31,840 --> 00:05:35,359
then you can name the class however you

170
00:05:34,320 --> 00:05:37,680
like

171
00:05:35,360 --> 00:05:38,960
and indirectly then you have a kind of

172
00:05:37,680 --> 00:05:42,160
categorization

173
00:05:38,960 --> 00:05:43,520
or a naming schema and drill down down

174
00:05:42,160 --> 00:05:45,600
for your classes

175
00:05:43,520 --> 00:05:47,440
and what you have and if you take a look

176
00:05:45,600 --> 00:05:49,600
on the on the structure of that

177
00:05:47,440 --> 00:05:50,719
then you see something like that then

178
00:05:49,600 --> 00:05:52,479
you have a real

179
00:05:50,720 --> 00:05:54,560
test class on the on the first level and

180
00:05:52,479 --> 00:05:56,240
the root level which is named here can

181
00:05:54,560 --> 00:05:58,000
precondition the class

182
00:05:56,240 --> 00:05:59,360
and on the second level you have

183
00:05:58,000 --> 00:06:02,240
required then zero

184
00:05:59,360 --> 00:06:03,199
long maybe i should think about my

185
00:06:02,240 --> 00:06:05,759
naming

186
00:06:03,199 --> 00:06:06,560
that could be better of course and

187
00:06:05,759 --> 00:06:09,600
another one

188
00:06:06,560 --> 00:06:11,680
require than zero for integers of course

189
00:06:09,600 --> 00:06:12,960
so you now you have solved the problem

190
00:06:11,680 --> 00:06:16,800
that you need to

191
00:06:12,960 --> 00:06:19,840
rename the method names i can exactly

192
00:06:16,800 --> 00:06:20,639
name them exactly the same and i have

193
00:06:19,840 --> 00:06:22,479
exactly

194
00:06:20,639 --> 00:06:25,840
a reference between the different

195
00:06:22,479 --> 00:06:28,318
classes for integers for longs and so on

196
00:06:25,840 --> 00:06:29,359
that's one of one of the nice things i

197
00:06:28,319 --> 00:06:31,600
can also

198
00:06:29,360 --> 00:06:33,840
run them of course in from your ide of

199
00:06:31,600 --> 00:06:34,560
course as usual that works for intellij

200
00:06:33,840 --> 00:06:36,799
that works for

201
00:06:34,560 --> 00:06:37,680
eclipse for netbeans and all that stuff

202
00:06:36,800 --> 00:06:39,919
as well

203
00:06:37,680 --> 00:06:41,440
so as you see you have a construction

204
00:06:39,919 --> 00:06:43,919
here create

205
00:06:41,440 --> 00:06:45,440
is created in a tree based on the things

206
00:06:43,919 --> 00:06:47,520
you are executing

207
00:06:45,440 --> 00:06:48,560
which is also possible that i say okay i

208
00:06:47,520 --> 00:06:50,479
wanted to run

209
00:06:48,560 --> 00:06:51,680
only the test for the ins or for the

210
00:06:50,479 --> 00:06:53,919
lungs they're just

211
00:06:51,680 --> 00:06:55,199
just doing that as an example here just

212
00:06:53,919 --> 00:06:57,758
running them here

213
00:06:55,199 --> 00:06:58,800
i can limit that of course you can run a

214
00:06:57,759 --> 00:07:01,120
single test of course

215
00:06:58,800 --> 00:07:03,199
that's not a problem but you see they

216
00:07:01,120 --> 00:07:05,280
have a categorization and a

217
00:07:03,199 --> 00:07:06,560
grouping of your tests which is very

218
00:07:05,280 --> 00:07:09,119
good to have such

219
00:07:06,560 --> 00:07:10,400
easy easy separations of different tests

220
00:07:09,120 --> 00:07:13,199
that makes this more

221
00:07:10,400 --> 00:07:13,198
more easier

222
00:07:14,080 --> 00:07:19,758
um let us take a look and

223
00:07:17,120 --> 00:07:21,280
one of the things is coming up as i said

224
00:07:19,759 --> 00:07:23,440
based on the naming

225
00:07:21,280 --> 00:07:25,359
what you have is that you name your

226
00:07:23,440 --> 00:07:27,520
classes in a good way

227
00:07:25,360 --> 00:07:29,680
what you can do is of course if i would

228
00:07:27,520 --> 00:07:33,280
like to

229
00:07:29,680 --> 00:07:35,520
let me take a look here and you say okay

230
00:07:33,280 --> 00:07:36,638
require then zero is not a very good

231
00:07:35,520 --> 00:07:38,479
descriptive name

232
00:07:36,639 --> 00:07:40,960
you can of course rename the classes

233
00:07:38,479 --> 00:07:43,120
with your ide it's not a problem

234
00:07:40,960 --> 00:07:44,000
then you come to the point uh you would

235
00:07:43,120 --> 00:07:47,759
like to make it more

236
00:07:44,000 --> 00:07:51,280
descriptive not a name in a class

237
00:07:47,759 --> 00:07:53,840
somehow described what you are trying to

238
00:07:51,280 --> 00:07:55,679
express in your tests and then there is

239
00:07:53,840 --> 00:07:57,758
a coming and interesting thing which has

240
00:07:55,680 --> 00:08:01,280
been introduced to junior 5

241
00:07:57,759 --> 00:08:05,120
platform is so called a so-called

242
00:08:01,280 --> 00:08:08,479
display name that means you can

243
00:08:05,120 --> 00:08:11,919
give a description for what is

244
00:08:08,479 --> 00:08:12,800
shown on the output so you can do that

245
00:08:11,919 --> 00:08:14,799
on the

246
00:08:12,800 --> 00:08:16,400
root class of course and give a

247
00:08:14,800 --> 00:08:19,280
different name what you like

248
00:08:16,400 --> 00:08:19,919
i just have used here very short things

249
00:08:19,280 --> 00:08:23,119
you can

250
00:08:19,919 --> 00:08:24,840
write of course um a poem if you like

251
00:08:23,120 --> 00:08:26,400
might be not that useful but it's

252
00:08:24,840 --> 00:08:28,799
possible

253
00:08:26,400 --> 00:08:30,799
and then you can do that also also on

254
00:08:28,800 --> 00:08:33,360
the different

255
00:08:30,800 --> 00:08:34,719
nested classes as well make a

256
00:08:33,360 --> 00:08:36,800
categorization

257
00:08:34,719 --> 00:08:38,719
and it's also possible to do that on the

258
00:08:36,799 --> 00:08:41,039
test method

259
00:08:38,719 --> 00:08:42,479
so what you will get then in the end is

260
00:08:41,039 --> 00:08:44,560
something like that

261
00:08:42,479 --> 00:08:45,680
you can get a complete different look on

262
00:08:44,560 --> 00:08:48,319
on the on your test

263
00:08:45,680 --> 00:08:50,399
structure here if you do that with a

264
00:08:48,320 --> 00:08:52,240
precondition and thinking a little bit

265
00:08:50,399 --> 00:08:54,160
about that then you can construct your

266
00:08:52,240 --> 00:08:55,360
very good sentences if you do that in

267
00:08:54,160 --> 00:08:57,439
the correct way

268
00:08:55,360 --> 00:08:59,040
just playing around with that then you

269
00:08:57,440 --> 00:09:01,040
can construct your real

270
00:08:59,040 --> 00:09:02,399
sentences and describe what you are

271
00:09:01,040 --> 00:09:04,319
doing here for example

272
00:09:02,399 --> 00:09:06,480
if you read that that works very good

273
00:09:04,320 --> 00:09:08,560
here that's not perfect of course

274
00:09:06,480 --> 00:09:09,600
just to show you the direction where you

275
00:09:08,560 --> 00:09:11,680
can go

276
00:09:09,600 --> 00:09:12,880
if you do that more and more often the

277
00:09:11,680 --> 00:09:14,800
more familiar that

278
00:09:12,880 --> 00:09:17,760
that becomes and it's more easier to

279
00:09:14,800 --> 00:09:20,000
understand what you're exactly doing

280
00:09:17,760 --> 00:09:20,880
um so you can read here precondition

281
00:09:20,000 --> 00:09:22,959
four interest

282
00:09:20,880 --> 00:09:24,000
integers require greater than zero

283
00:09:22,959 --> 00:09:26,479
should return

284
00:09:24,000 --> 00:09:28,959
the same object for example and then you

285
00:09:26,480 --> 00:09:32,000
can do something like that

286
00:09:28,959 --> 00:09:34,959
that's an easy way to make

287
00:09:32,000 --> 00:09:36,160
your tests create more a story sometimes

288
00:09:34,959 --> 00:09:38,079
you call that maybe

289
00:09:36,160 --> 00:09:40,000
behavior-driven development which you

290
00:09:38,080 --> 00:09:41,600
can do a little bit in that direction

291
00:09:40,000 --> 00:09:42,399
this is of course not a behavior-driven

292
00:09:41,600 --> 00:09:45,040
development

293
00:09:42,399 --> 00:09:47,040
framework but it can help to get get

294
00:09:45,040 --> 00:09:51,040
into this direction and make it more

295
00:09:47,040 --> 00:09:54,079
descriptive of course

296
00:09:51,040 --> 00:09:55,279
sometimes you have the problem if you

297
00:09:54,080 --> 00:09:57,519
want to have

298
00:09:55,279 --> 00:09:59,839
different names based on the class names

299
00:09:57,519 --> 00:10:02,800
or on the method names of course

300
00:09:59,839 --> 00:10:03,680
it is possible to define a display

301
00:10:02,800 --> 00:10:06,079
generator

302
00:10:03,680 --> 00:10:08,239
you can use the built-in ones or you can

303
00:10:06,079 --> 00:10:10,479
write completely your own

304
00:10:08,240 --> 00:10:12,640
then you can say if i separate the

305
00:10:10,480 --> 00:10:14,720
methods for example as i did here

306
00:10:12,640 --> 00:10:15,839
with and separate with an underscore

307
00:10:14,720 --> 00:10:18,399
something then

308
00:10:15,839 --> 00:10:19,839
these classes or results will be printed

309
00:10:18,399 --> 00:10:21,839
out without

310
00:10:19,839 --> 00:10:24,160
the underscores and i see more or less

311
00:10:21,839 --> 00:10:26,640
exactly that that

312
00:10:24,160 --> 00:10:27,279
sentence of this that's also possible

313
00:10:26,640 --> 00:10:29,760
there are some

314
00:10:27,279 --> 00:10:31,600
predefined you can implement it however

315
00:10:29,760 --> 00:10:34,640
you like

316
00:10:31,600 --> 00:10:35,519
uh what is also possible in some tests

317
00:10:34,640 --> 00:10:38,720
it is sometimes

318
00:10:35,519 --> 00:10:41,200
necessary to make a a a

319
00:10:38,720 --> 00:10:43,440
condition to run that test for example

320
00:10:41,200 --> 00:10:45,600
on different platforms for example

321
00:10:43,440 --> 00:10:48,399
i want don't want to run this test here

322
00:10:45,600 --> 00:10:50,560
on a mac os for example or on a linux or

323
00:10:48,399 --> 00:10:52,880
on a windows box or something like that

324
00:10:50,560 --> 00:10:55,439
that's very easy to express with

325
00:10:52,880 --> 00:10:56,560
juniper 5 platform then you can say i

326
00:10:55,440 --> 00:10:59,519
just wanted to

327
00:10:56,560 --> 00:11:00,479
disable this on mac os that means it

328
00:10:59,519 --> 00:11:03,040
will not run on

329
00:11:00,480 --> 00:11:03,760
on mac os but it will run on all other

330
00:11:03,040 --> 00:11:06,000
platforms

331
00:11:03,760 --> 00:11:06,959
it's very easy to express there are

332
00:11:06,000 --> 00:11:09,279
several others

333
00:11:06,959 --> 00:11:10,800
i just wanted to know if you mentioned

334
00:11:09,279 --> 00:11:14,320
them um

335
00:11:10,800 --> 00:11:15,359
i have done that on here you can disable

336
00:11:14,320 --> 00:11:18,800
on a particular

337
00:11:15,360 --> 00:11:20,959
jdk the start is jdk8 because junit

338
00:11:18,800 --> 00:11:23,279
platform itself starts with jdk

339
00:11:20,959 --> 00:11:24,399
so below it's not will not work of

340
00:11:23,279 --> 00:11:28,560
course

341
00:11:24,399 --> 00:11:31,040
what you can do also is to enable that

342
00:11:28,560 --> 00:11:33,518
exactly the opposite uh you can enable

343
00:11:31,040 --> 00:11:36,480
the tests

344
00:11:33,519 --> 00:11:38,320
like this so so i would like to run this

345
00:11:36,480 --> 00:11:41,360
test only on jdk8

346
00:11:38,320 --> 00:11:42,000
or just run them on linux what you can

347
00:11:41,360 --> 00:11:44,560
also very

348
00:11:42,000 --> 00:11:45,760
easily create is so a meta annotation

349
00:11:44,560 --> 00:11:47,439
that can be combined

350
00:11:45,760 --> 00:11:48,880
and make your tests more readable i can

351
00:11:47,440 --> 00:11:50,720
combine that for my own

352
00:11:48,880 --> 00:11:52,000
so i have created a very simple

353
00:11:50,720 --> 00:11:54,399
annotation here just for

354
00:11:52,000 --> 00:11:56,639
demonstration purposes would actually

355
00:11:54,399 --> 00:11:58,079
test on linux

356
00:11:56,639 --> 00:11:59,760
that's not nothing else than the

357
00:11:58,079 --> 00:12:02,079
combination of the test and

358
00:11:59,760 --> 00:12:03,839
enabled on operation system uh

359
00:12:02,079 --> 00:12:05,439
annotation that's very easy

360
00:12:03,839 --> 00:12:07,839
you can do much more complex things if

361
00:12:05,440 --> 00:12:11,360
you like but we're scratching here only

362
00:12:07,839 --> 00:12:13,519
the surface of course

363
00:12:11,360 --> 00:12:15,279
things like before and things like that

364
00:12:13,519 --> 00:12:18,079
as you seen in the junip 4

365
00:12:15,279 --> 00:12:19,200
part you can do that of course as well

366
00:12:18,079 --> 00:12:21,279
so it's not a problem

367
00:12:19,200 --> 00:12:22,480
to define them all they have been named

368
00:12:21,279 --> 00:12:24,800
a little bit different

369
00:12:22,480 --> 00:12:26,800
i think it's more clear now before all

370
00:12:24,800 --> 00:12:27,519
means really before all collect all

371
00:12:26,800 --> 00:12:30,000
tests

372
00:12:27,519 --> 00:12:31,200
before each means really before each

373
00:12:30,000 --> 00:12:33,920
test

374
00:12:31,200 --> 00:12:35,920
and after each and so on that you can do

375
00:12:33,920 --> 00:12:38,399
what you can combine of course is

376
00:12:35,920 --> 00:12:39,599
i have defined them here on the on the

377
00:12:38,399 --> 00:12:42,320
level of the

378
00:12:39,600 --> 00:12:44,240
surrounding class and now i can do that

379
00:12:42,320 --> 00:12:46,720
on the nested classes as well

380
00:12:44,240 --> 00:12:48,320
so i can combine that with disabled and

381
00:12:46,720 --> 00:12:51,360
think things like that

382
00:12:48,320 --> 00:12:54,639
so i can completely make it very easy to

383
00:12:51,360 --> 00:12:57,200
make different configurations

384
00:12:54,639 --> 00:12:57,680
uh what is also possible to make a an

385
00:12:57,200 --> 00:12:59,920
order

386
00:12:57,680 --> 00:13:01,839
execution by order there are some in

387
00:12:59,920 --> 00:13:02,959
june 4 where you can define by the

388
00:13:01,839 --> 00:13:05,519
method order

389
00:13:02,959 --> 00:13:06,560
alphabetic things like that in jn5

390
00:13:05,519 --> 00:13:09,040
platform you have the

391
00:13:06,560 --> 00:13:10,239
opportunity to define the order by an

392
00:13:09,040 --> 00:13:11,920
order annotation or

393
00:13:10,240 --> 00:13:14,000
alphabetical sorting and things like

394
00:13:11,920 --> 00:13:15,120
that then you can define the order by

395
00:13:14,000 --> 00:13:21,839
yourself

396
00:13:15,120 --> 00:13:21,839
and combine them of course

397
00:13:23,040 --> 00:13:26,560
yeah or you can define of course uh if

398
00:13:25,519 --> 00:13:28,560
you would like to have

399
00:13:26,560 --> 00:13:30,479
a random order all the time you can

400
00:13:28,560 --> 00:13:32,880
define that on your own if you like

401
00:13:30,480 --> 00:13:34,720
then this makes sure that everyone is

402
00:13:32,880 --> 00:13:38,480
running a different order of your test

403
00:13:34,720 --> 00:13:40,160
that keeps your state from that

404
00:13:38,480 --> 00:13:42,240
what is also possible to do some

405
00:13:40,160 --> 00:13:45,680
parameterized tests

406
00:13:42,240 --> 00:13:48,720
it's a little bit tricky or it's more

407
00:13:45,680 --> 00:13:51,839
different thing you can define a method

408
00:13:48,720 --> 00:13:53,760
your test method given an argument

409
00:13:51,839 --> 00:13:55,600
and define the so-called method sort is

410
00:13:53,760 --> 00:13:57,920
it's not defined it will automatically

411
00:13:55,600 --> 00:13:58,639
get the name you as the name of the test

412
00:13:57,920 --> 00:14:01,519
method

413
00:13:58,639 --> 00:14:03,519
you can define it explicitly give a

414
00:14:01,519 --> 00:14:04,720
stream of arguments which is put into

415
00:14:03,519 --> 00:14:07,440
the argument list

416
00:14:04,720 --> 00:14:08,480
and run them all that and it's easy to

417
00:14:07,440 --> 00:14:10,720
understand that

418
00:14:08,480 --> 00:14:12,320
because if you do that then you see all

419
00:14:10,720 --> 00:14:15,199
the solution of the

420
00:14:12,320 --> 00:14:16,480
arguments is also displayed you can run

421
00:14:15,199 --> 00:14:18,639
and

422
00:14:16,480 --> 00:14:19,600
it will jump to the right correct

423
00:14:18,639 --> 00:14:22,320
correct level

424
00:14:19,600 --> 00:14:24,399
you can run that simple single test with

425
00:14:22,320 --> 00:14:27,760
exactly that parameter set that's

426
00:14:24,399 --> 00:14:32,000
extremely helpful in particular

427
00:14:27,760 --> 00:14:35,760
um let us take a look into um

428
00:14:32,000 --> 00:14:38,800
paramedic rice test yes

429
00:14:35,760 --> 00:14:39,519
yeah i know it's very limited i know and

430
00:14:38,800 --> 00:14:42,399
then that

431
00:14:39,519 --> 00:14:42,800
very very small calculator test you can

432
00:14:42,399 --> 00:14:46,000
do

433
00:14:42,800 --> 00:14:48,079
things like csv sources you can define a

434
00:14:46,000 --> 00:14:49,680
parameterized test where you need to add

435
00:14:48,079 --> 00:14:51,040
a supplemental dependency which is

436
00:14:49,680 --> 00:14:54,000
called j unit jupiter

437
00:14:51,040 --> 00:14:54,880
pyramid param if i correctly remember

438
00:14:54,000 --> 00:14:56,880
then you can

439
00:14:54,880 --> 00:14:58,480
define the string which is used to

440
00:14:56,880 --> 00:15:01,040
format your output

441
00:14:58,480 --> 00:15:02,720
of how it looks like in the output for

442
00:15:01,040 --> 00:15:05,360
the display

443
00:15:02,720 --> 00:15:05,920
like this so you see what i've defined

444
00:15:05,360 --> 00:15:08,160
here

445
00:15:05,920 --> 00:15:12,560
if i would like to do that in a more

446
00:15:08,160 --> 00:15:13,360
different way like this then i can do

447
00:15:12,560 --> 00:15:15,439
that as well

448
00:15:13,360 --> 00:15:17,839
if you would like to rerun that then you

449
00:15:15,440 --> 00:15:20,000
see of course i can change that text

450
00:15:17,839 --> 00:15:20,880
you have some placeholders here which

451
00:15:20,000 --> 00:15:23,040
exactly

452
00:15:20,880 --> 00:15:25,279
represent the parameters of of your test

453
00:15:23,040 --> 00:15:28,639
and so on and then you can create that

454
00:15:25,279 --> 00:15:28,639
and make that very descriptive

455
00:15:29,839 --> 00:15:33,199
um what you can do which is very

456
00:15:32,480 --> 00:15:36,720
interesting

457
00:15:33,199 --> 00:15:39,120
is you can inter test interfaces

458
00:15:36,720 --> 00:15:41,279
an interface since java 8 can contain

459
00:15:39,120 --> 00:15:42,079
code a default method something like

460
00:15:41,279 --> 00:15:44,959
that

461
00:15:42,079 --> 00:15:45,839
and i've written a very useless function

462
00:15:44,959 --> 00:15:47,839
of course

463
00:15:45,839 --> 00:15:49,519
just the default method but you can test

464
00:15:47,839 --> 00:15:51,440
that very easily

465
00:15:49,519 --> 00:15:52,959
you can just say on the test just

466
00:15:51,440 --> 00:15:56,480
implement that interface

467
00:15:52,959 --> 00:15:58,560
and i can just run that test and

468
00:15:56,480 --> 00:16:00,320
call that method so you can call that

469
00:15:58,560 --> 00:16:03,199
very easily and you can draw

470
00:16:00,320 --> 00:16:04,079
call static methods or default methods

471
00:16:03,199 --> 00:16:06,719
on an interface

472
00:16:04,079 --> 00:16:06,719
it's very easy

473
00:16:07,680 --> 00:16:12,959
dynamic tests i will go only to the

474
00:16:10,399 --> 00:16:14,959
surface here because it's very complex

475
00:16:12,959 --> 00:16:16,880
usually you write your test implement

476
00:16:14,959 --> 00:16:18,319
that during the build time you describe

477
00:16:16,880 --> 00:16:21,199
what you are exacting going

478
00:16:18,320 --> 00:16:22,160
through the steps but with dynamic tests

479
00:16:21,199 --> 00:16:24,639
it's possibly

480
00:16:22,160 --> 00:16:26,079
to define what is really tested at

481
00:16:24,639 --> 00:16:28,160
runtime

482
00:16:26,079 --> 00:16:29,680
so you can think about that i have a

483
00:16:28,160 --> 00:16:31,759
large number of classes

484
00:16:29,680 --> 00:16:33,439
uh that have a marker interface i would

485
00:16:31,759 --> 00:16:34,079
like to write some special tests for

486
00:16:33,440 --> 00:16:36,959
example

487
00:16:34,079 --> 00:16:37,439
an equals method something as an example

488
00:16:36,959 --> 00:16:39,839
but i

489
00:16:37,440 --> 00:16:40,720
don't want to write 500 tests by hand or

490
00:16:39,839 --> 00:16:42,959
something okay

491
00:16:40,720 --> 00:16:43,759
parameterized would work but it's

492
00:16:42,959 --> 00:16:46,319
limited

493
00:16:43,759 --> 00:16:49,440
so you can make that dynamic and run and

494
00:16:46,320 --> 00:16:51,920
create the test dynamically

495
00:16:49,440 --> 00:16:55,839
completely that means it is possible to

496
00:16:51,920 --> 00:16:59,040
write not the right to test itself

497
00:16:55,839 --> 00:17:00,000
you can write what the test here is and

498
00:16:59,040 --> 00:17:02,560
that that will

499
00:17:00,000 --> 00:17:04,640
describe what the test does it is in the

500
00:17:02,560 --> 00:17:05,520
end not limited you can make a lambda

501
00:17:04,640 --> 00:17:08,160
function or

502
00:17:05,520 --> 00:17:09,039
completely call a method or whatever is

503
00:17:08,160 --> 00:17:12,160
possible

504
00:17:09,039 --> 00:17:12,720
so you can do to be honest really fancy

505
00:17:12,160 --> 00:17:14,640
stuff

506
00:17:12,720 --> 00:17:17,039
and it's very interesting to to have a

507
00:17:14,640 --> 00:17:20,240
power in that

508
00:17:17,039 --> 00:17:20,720
um what is also interesting to have uh

509
00:17:20,240 --> 00:17:23,520
called

510
00:17:20,720 --> 00:17:24,640
an extension everything in in in uh

511
00:17:23,520 --> 00:17:27,199
junit jupiter

512
00:17:24,640 --> 00:17:28,720
is based on extension more or less of

513
00:17:27,199 --> 00:17:29,360
their own they were using their door on

514
00:17:28,720 --> 00:17:32,720
their own

515
00:17:29,360 --> 00:17:34,559
uh the extendable of junit 4 test and g

516
00:17:32,720 --> 00:17:36,240
is very limited there are some

517
00:17:34,559 --> 00:17:38,639
some rules like that or something like

518
00:17:36,240 --> 00:17:40,960
that you can there's a limited to

519
00:17:38,640 --> 00:17:43,280
before and after or something like that

520
00:17:40,960 --> 00:17:43,840
but in junit 5 you have the opportunity

521
00:17:43,280 --> 00:17:46,000
to

522
00:17:43,840 --> 00:17:47,280
really do that in a very interesting

523
00:17:46,000 --> 00:17:50,480
stuff

524
00:17:47,280 --> 00:17:53,200
just skip some code here you have

525
00:17:50,480 --> 00:17:54,080
so many extension points that is

526
00:17:53,200 --> 00:17:56,960
possible to

527
00:17:54,080 --> 00:17:58,799
extend your make right extensions to

528
00:17:56,960 --> 00:18:01,760
support you

529
00:17:58,799 --> 00:18:02,160
and i have made a very very simple one

530
00:18:01,760 --> 00:18:05,919
here

531
00:18:02,160 --> 00:18:05,919
just a very simple one here

532
00:18:06,000 --> 00:18:09,840
um which is something like i would like

533
00:18:09,039 --> 00:18:12,480
to have

534
00:18:09,840 --> 00:18:14,320
a so-called a timing extension i simply

535
00:18:12,480 --> 00:18:16,640
stolen that from the documentation

536
00:18:14,320 --> 00:18:17,760
uh which is very simple example i would

537
00:18:16,640 --> 00:18:20,320
like to

538
00:18:17,760 --> 00:18:22,240
see how long my tests are running just a

539
00:18:20,320 --> 00:18:24,480
very simple thing

540
00:18:22,240 --> 00:18:25,440
you can do that with defining that here

541
00:18:24,480 --> 00:18:27,120
is extend with

542
00:18:25,440 --> 00:18:28,960
something like that then you implem

543
00:18:27,120 --> 00:18:31,600
implement that class

544
00:18:28,960 --> 00:18:32,160
uh that sorry that's of course not wrong

545
00:18:31,600 --> 00:18:34,159
right

546
00:18:32,160 --> 00:18:36,160
go into that and this this is a whole

547
00:18:34,160 --> 00:18:38,080
extension what you do is

548
00:18:36,160 --> 00:18:39,600
you have an interface what you're

549
00:18:38,080 --> 00:18:41,760
calling implement the

550
00:18:39,600 --> 00:18:43,439
extension point and you can do what you

551
00:18:41,760 --> 00:18:46,559
want there's internally

552
00:18:43,440 --> 00:18:48,640
a a hashmap which is supporting you to

553
00:18:46,559 --> 00:18:50,720
store parameters which it can be holding

554
00:18:48,640 --> 00:18:52,720
between different steps of your things

555
00:18:50,720 --> 00:18:55,919
and then you can implement such things

556
00:18:52,720 --> 00:18:56,559
that makes it very easy to implement

557
00:18:55,919 --> 00:18:59,679
things

558
00:18:56,559 --> 00:19:02,000
uh what you like to do and just

559
00:18:59,679 --> 00:19:02,720
see that here i just click on that then

560
00:19:02,000 --> 00:19:05,440
you see

561
00:19:02,720 --> 00:19:06,960
took 62 milliseconds or something you

562
00:19:05,440 --> 00:19:08,720
can imagine i have written

563
00:19:06,960 --> 00:19:10,320
things like with an end-to-end test and

564
00:19:08,720 --> 00:19:12,880
some something like that

565
00:19:10,320 --> 00:19:13,600
and that can be combined into your own

566
00:19:12,880 --> 00:19:16,640
uh

567
00:19:13,600 --> 00:19:18,719
annotation it's very easy to do that and

568
00:19:16,640 --> 00:19:20,799
then you can combine that and make

569
00:19:18,720 --> 00:19:21,760
your own annotation and write that and

570
00:19:20,799 --> 00:19:23,520
use that

571
00:19:21,760 --> 00:19:25,520
which combines these different things

572
00:19:23,520 --> 00:19:29,440
here and makes it much more easier

573
00:19:25,520 --> 00:19:33,360
and then you can simply replace your

574
00:19:29,440 --> 00:19:37,120
extend width here with timing

575
00:19:33,360 --> 00:19:37,600
yeah time i need to write it the correct

576
00:19:37,120 --> 00:19:40,320
way

577
00:19:37,600 --> 00:19:41,039
so i can do that and i have run that i

578
00:19:40,320 --> 00:19:42,960
can do that

579
00:19:41,039 --> 00:19:44,160
it's a very easy thing i written in the

580
00:19:42,960 --> 00:19:46,559
meantime several

581
00:19:44,160 --> 00:19:47,360
extension which it makes it very easy to

582
00:19:46,559 --> 00:19:50,320
do stuff

583
00:19:47,360 --> 00:19:53,280
which is with junit 4 testing g very

584
00:19:50,320 --> 00:19:56,399
complex and very hard to handle

585
00:19:53,280 --> 00:19:58,399
yeah i know exactly just wanted to show

586
00:19:56,400 --> 00:20:00,400
a simple example which is a little bit

587
00:19:58,400 --> 00:20:02,240
bigger i've written an extension for

588
00:20:00,400 --> 00:20:04,000
maven of course i'm working as a maven

589
00:20:02,240 --> 00:20:06,320
developer and i would like to make

590
00:20:04,000 --> 00:20:07,280
my experience about integration tests

591
00:20:06,320 --> 00:20:09,918
better

592
00:20:07,280 --> 00:20:10,399
and that was a hard part and i've

593
00:20:09,919 --> 00:20:13,039
written

594
00:20:10,400 --> 00:20:14,799
a junit jupiter extension to handle that

595
00:20:13,039 --> 00:20:18,000
and all the stuff which is in there

596
00:20:14,799 --> 00:20:19,039
and i can express the test and my ide

597
00:20:18,000 --> 00:20:21,840
and run them

598
00:20:19,039 --> 00:20:22,720
and run stuff behind in the behind i can

599
00:20:21,840 --> 00:20:24,480
start my maven

600
00:20:22,720 --> 00:20:26,000
and make a local cache and all that

601
00:20:24,480 --> 00:20:28,080
stuff is possible and

602
00:20:26,000 --> 00:20:29,280
that makes it possible to handle things

603
00:20:28,080 --> 00:20:31,439
like that or

604
00:20:29,280 --> 00:20:32,320
spring boot max does the same way there

605
00:20:31,440 --> 00:20:34,240
is an extension

606
00:20:32,320 --> 00:20:35,520
if you write spring boot test with junit

607
00:20:34,240 --> 00:20:37,200
jupiter it's not

608
00:20:35,520 --> 00:20:39,120
nothing else than an extension it's an

609
00:20:37,200 --> 00:20:40,640
extend with if you take a look into the

610
00:20:39,120 --> 00:20:43,918
annotation

611
00:20:40,640 --> 00:20:45,840
so based on the time that's it

612
00:20:43,919 --> 00:20:47,200
i have some links here we'll put it

613
00:20:45,840 --> 00:20:49,520
online i can

614
00:20:47,200 --> 00:20:50,720
give you only a rough overview of that

615
00:20:49,520 --> 00:20:52,639
the possibilities

616
00:20:50,720 --> 00:20:54,559
we are not limited to that i have just

617
00:20:52,640 --> 00:20:56,480
ignored many many many details because

618
00:20:54,559 --> 00:20:58,480
there are so many things

619
00:20:56,480 --> 00:21:00,640
i hope you have some some time to look

620
00:20:58,480 --> 00:21:02,799
at and i can strongly recommend

621
00:21:00,640 --> 00:21:04,559
to do that because it makes testing

622
00:21:02,799 --> 00:21:05,950
really easier

623
00:21:04,559 --> 00:21:10,960
thanks

624
00:21:05,950 --> 00:21:13,440
[Applause]

625
00:21:10,960 --> 00:21:17,840
if some questions maybe have a minute or

626
00:21:13,440 --> 00:21:17,840
two for some questions

627
00:21:19,600 --> 00:21:26,000
can you give it a title which is shown

628
00:21:23,200 --> 00:21:28,000
in the yes you can use the the the

629
00:21:26,000 --> 00:21:30,000
display name for example

630
00:21:28,000 --> 00:21:31,600
if you like uh and the the parameter

631
00:21:30,000 --> 00:21:32,159
test has also an annotation where you

632
00:21:31,600 --> 00:21:35,918
can

633
00:21:32,159 --> 00:21:35,919
just write a description here

634
00:21:36,640 --> 00:21:41,280
yeah exactly yeah exactly that's

635
00:21:38,720 --> 00:21:41,280
possible you know

636
00:21:41,360 --> 00:21:47,918
it's it's more remark um

637
00:21:45,200 --> 00:21:49,679
i use the parameterized things with

638
00:21:47,919 --> 00:21:51,760
london

639
00:21:49,679 --> 00:21:53,679
that's possible too yes yes but when you

640
00:21:51,760 --> 00:21:56,879
do a two string on the launder

641
00:21:53,679 --> 00:21:58,559
it's not nice

642
00:21:56,880 --> 00:22:01,200
then we have to give it back to you and

643
00:21:58,559 --> 00:22:01,200
make it nicer

644
00:22:02,240 --> 00:22:06,880
currently you have two forms of london

645
00:22:04,880 --> 00:22:07,840
you have the serialized london and for

646
00:22:06,880 --> 00:22:12,799
sale

647
00:22:07,840 --> 00:22:12,799
you have more information yeah

648
00:22:17,679 --> 00:22:22,720
okay is intellij smart enough to help

649
00:22:21,039 --> 00:22:24,720
you with

650
00:22:22,720 --> 00:22:26,320
the display names and your refactor

651
00:22:24,720 --> 00:22:29,120
names or functions

652
00:22:26,320 --> 00:22:31,120
uh no it does not no why would you use

653
00:22:29,120 --> 00:22:33,439
them

654
00:22:31,120 --> 00:22:35,280
i'm sorry so why would you use them

655
00:22:33,440 --> 00:22:36,320
you're stuck with remembering that you

656
00:22:35,280 --> 00:22:38,320
need to change these

657
00:22:36,320 --> 00:22:40,559
um because it describes more the

658
00:22:38,320 --> 00:22:42,559
intention of my test is that what you

659
00:22:40,559 --> 00:22:45,840
use

660
00:22:42,559 --> 00:22:48,000
the problem is you can't write spaces or

661
00:22:45,840 --> 00:22:49,039
something like that it's limited based

662
00:22:48,000 --> 00:22:51,120
on the naming

663
00:22:49,039 --> 00:22:52,480
naming schema of java of course and

664
00:22:51,120 --> 00:22:54,959
sometimes you would like to write

665
00:22:52,480 --> 00:22:56,080
more information or just write it write

666
00:22:54,960 --> 00:22:57,600
a sentence with a comma

667
00:22:56,080 --> 00:22:59,439
or something like that that's not

668
00:22:57,600 --> 00:23:01,678
possible in a method name

669
00:22:59,440 --> 00:23:02,960
and it helps a lot to describe of course

670
00:23:01,679 --> 00:23:04,799
we can just

671
00:23:02,960 --> 00:23:09,840
it's a matter of personal taste of

672
00:23:04,799 --> 00:23:09,840
course yes fine

673
00:23:14,720 --> 00:23:18,080
uh if you run that when the vintage

674
00:23:16,720 --> 00:23:20,400
engine they will

675
00:23:18,080 --> 00:23:22,799
run but they are running not with junit

676
00:23:20,400 --> 00:23:25,760
jupiter run real with junit 4

677
00:23:22,799 --> 00:23:26,559
under the hood so how do i do rules with

678
00:23:25,760 --> 00:23:29,039
the things you

679
00:23:26,559 --> 00:23:29,760
just went through or looking at the

680
00:23:29,039 --> 00:23:31,600
rules for

681
00:23:29,760 --> 00:23:32,960
class so i'm having setting up an

682
00:23:31,600 --> 00:23:36,080
environment and

683
00:23:32,960 --> 00:23:38,880
keeping it running through all the whole

684
00:23:36,080 --> 00:23:39,678
uh yeah you can use before things like

685
00:23:38,880 --> 00:23:41,760
that

686
00:23:39,679 --> 00:23:43,679
but that will close down the test after

687
00:23:41,760 --> 00:23:45,679
the class is done right

688
00:23:43,679 --> 00:23:48,240
yeah you have different befores all

689
00:23:45,679 --> 00:23:50,000
before each things like that

690
00:23:48,240 --> 00:23:52,640
yeah reference counting things like that

691
00:23:50,000 --> 00:23:55,600
and if you need to really do that

692
00:23:52,640 --> 00:23:56,960
i would take a look what exactly kind of

693
00:23:55,600 --> 00:23:58,559
rules you're using

694
00:23:56,960 --> 00:24:00,480
uh most of the time i've used with

695
00:23:58,559 --> 00:24:01,520
exception things like that that's not

696
00:24:00,480 --> 00:24:03,919
necessary anymore

697
00:24:01,520 --> 00:24:04,879
or test containers there is an extension

698
00:24:03,919 --> 00:24:06,480
as well as

699
00:24:04,880 --> 00:24:08,400
it's very easy to write your own

700
00:24:06,480 --> 00:24:10,159
extension if you really needed it

701
00:24:08,400 --> 00:24:12,000
the migration is very easy could it be

702
00:24:10,159 --> 00:24:13,200
that the question was targeted to the

703
00:24:12,000 --> 00:24:15,440
life cycle

704
00:24:13,200 --> 00:24:16,480
yeah ah okay there's an annotation for

705
00:24:15,440 --> 00:24:18,799
it you can

706
00:24:16,480 --> 00:24:18,799
swap

707
00:24:29,279 --> 00:24:32,720
running so i don't have set up costs for

708
00:24:31,600 --> 00:24:35,678
setting up them

709
00:24:32,720 --> 00:24:36,400
down with an external resource yeah that

710
00:24:35,679 --> 00:24:39,520
you can manage

711
00:24:36,400 --> 00:24:42,320
whatever in extension yeah yeah exactly

712
00:24:39,520 --> 00:24:42,320
there was another one

713
00:24:45,360 --> 00:24:49,279
uh i'm using makita most of the time and

714
00:24:47,760 --> 00:24:49,679
there is an extension as well you can

715
00:24:49,279 --> 00:24:51,840
use

716
00:24:49,679 --> 00:24:53,039
in relationship with junit 5 that

717
00:24:51,840 --> 00:24:54,559
supports mokitu

718
00:24:53,039 --> 00:24:56,400
for example in springboard or something

719
00:24:54,559 --> 00:24:58,840
like that yeah

720
00:24:56,400 --> 00:25:00,159
it's also an extension in june jupiter

721
00:24:58,840 --> 00:25:09,600
yeah

722
00:25:00,159 --> 00:25:09,600
other questions okay

