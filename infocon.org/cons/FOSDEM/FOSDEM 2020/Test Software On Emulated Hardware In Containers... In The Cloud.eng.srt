1
00:00:06,240 --> 00:00:11,920
why not

2
00:00:08,160 --> 00:00:13,519
um this is surprisingly crowded

3
00:00:11,920 --> 00:00:15,440
we were originally told that there might

4
00:00:13,519 --> 00:00:18,320
be like one two three people now of

5
00:00:15,440 --> 00:00:18,320
course a little bit more

6
00:00:18,560 --> 00:00:24,640
okay hey um this is sean parker

7
00:00:22,400 --> 00:00:26,799
and i'm paul schroeder and we're here

8
00:00:24,640 --> 00:00:29,679
and tell you something about

9
00:00:26,800 --> 00:00:30,960
testing software on emulated hardware in

10
00:00:29,679 --> 00:00:35,280
containers

11
00:00:30,960 --> 00:00:35,280
in the cloud and

12
00:00:35,760 --> 00:00:39,199
i hope you all like that we think it's

13
00:00:38,239 --> 00:00:42,320
quite fancy

14
00:00:39,200 --> 00:00:43,360
yeah um will you tell you something

15
00:00:42,320 --> 00:00:46,000
about the project

16
00:00:43,360 --> 00:00:47,760
why we're doing this it's high-level

17
00:00:46,000 --> 00:00:49,930
architecture

18
00:00:47,760 --> 00:00:51,280
it's high-level architecture

19
00:00:49,930 --> 00:00:53,840
[Music]

20
00:00:51,280 --> 00:00:54,559
the test permit where our stuff is

21
00:00:53,840 --> 00:00:57,199
located

22
00:00:54,559 --> 00:00:58,959
in the test pyramid about the target

23
00:00:57,199 --> 00:01:02,718
devices and the challenges

24
00:00:58,960 --> 00:01:06,000
related to them um a little demol

25
00:01:02,719 --> 00:01:10,159
and in the end q a and recap if that's

26
00:01:06,000 --> 00:01:13,280
if there's still time left for um

27
00:01:10,159 --> 00:01:14,240
so we're working for an international

28
00:01:13,280 --> 00:01:16,320
train company

29
00:01:14,240 --> 00:01:17,759
and it's not about cargo it's about

30
00:01:16,320 --> 00:01:21,039
travel information like

31
00:01:17,759 --> 00:01:22,159
the thing below and you might all have

32
00:01:21,040 --> 00:01:24,640
experienced

33
00:01:22,159 --> 00:01:26,080
the delays and so like five minutes

34
00:01:24,640 --> 00:01:27,360
delay on the display and

35
00:01:26,080 --> 00:01:29,280
five minutes later it's ten minutes

36
00:01:27,360 --> 00:01:30,320
delay and ten minutes later it's 15

37
00:01:29,280 --> 00:01:32,880
minutes delay

38
00:01:30,320 --> 00:01:36,158
and the reason for that is uh the

39
00:01:32,880 --> 00:01:39,360
federated decentralized system of

40
00:01:36,159 --> 00:01:42,079
servers serving

41
00:01:39,360 --> 00:01:43,920
all these displays and if a train did

42
00:01:42,079 --> 00:01:44,720
not arrive in the visible area of this

43
00:01:43,920 --> 00:01:47,280
server

44
00:01:44,720 --> 00:01:48,798
um the operator doesn't know when it

45
00:01:47,280 --> 00:01:51,680
will arrive

46
00:01:48,799 --> 00:01:53,119
and so it's just he's just starting to

47
00:01:51,680 --> 00:01:55,280
type five minutes and

48
00:01:53,119 --> 00:01:56,399
five minutes later if the train still

49
00:01:55,280 --> 00:01:59,810
not arrived he's

50
00:01:56,399 --> 00:02:02,960
increasing that so

51
00:01:59,810 --> 00:02:05,600
[Music]

52
00:02:02,960 --> 00:02:07,520
the goal of our project is to to to

53
00:02:05,600 --> 00:02:09,038
centralize that

54
00:02:07,520 --> 00:02:11,120
we have a partner project in another

55
00:02:09,038 --> 00:02:12,319
city which is doing this consolidation

56
00:02:11,120 --> 00:02:15,440
of information

57
00:02:12,319 --> 00:02:18,319
if you have conflicting sources and

58
00:02:15,440 --> 00:02:20,079
conflicting information

59
00:02:18,319 --> 00:02:22,319
which stories do we trust more and this

60
00:02:20,080 --> 00:02:25,920
is a tough problem on its own but it's

61
00:02:22,319 --> 00:02:27,440
thankfully not ours and we're more

62
00:02:25,920 --> 00:02:29,599
focused on device

63
00:02:27,440 --> 00:02:30,959
devices itself the management of them

64
00:02:29,599 --> 00:02:33,679
and the rendering for the different

65
00:02:30,959 --> 00:02:33,680
display types

66
00:02:33,840 --> 00:02:38,959
yeah and this is where i hand over to

67
00:02:35,280 --> 00:02:38,959
sean cool

68
00:02:39,760 --> 00:02:44,160
yeah so i mean paul already mentioned

69
00:02:42,239 --> 00:02:45,120
that like the old system was a federated

70
00:02:44,160 --> 00:02:48,799
system

71
00:02:45,120 --> 00:02:50,560
where depending on where the the the

72
00:02:48,800 --> 00:02:52,480
the information displays or perhaps

73
00:02:50,560 --> 00:02:54,400
where the trainers the information might

74
00:02:52,480 --> 00:02:56,879
not propagate properly like

75
00:02:54,400 --> 00:02:58,560
to the end station if you have a train

76
00:02:56,879 --> 00:03:00,879
starting i mean

77
00:02:58,560 --> 00:03:02,400
in i don't know it's like eight hours

78
00:03:00,879 --> 00:03:04,319
early like in a totally different part

79
00:03:02,400 --> 00:03:06,400
of the country

80
00:03:04,319 --> 00:03:08,159
the information displays are currently

81
00:03:06,400 --> 00:03:11,440
with our client perhaps not

82
00:03:08,159 --> 00:03:13,359
timely updated because um yeah the flow

83
00:03:11,440 --> 00:03:16,400
of information is just not giving

84
00:03:13,360 --> 00:03:18,480
that information so

85
00:03:16,400 --> 00:03:19,840
this now is basically a simplified

86
00:03:18,480 --> 00:03:22,399
abstract version of

87
00:03:19,840 --> 00:03:23,360
what we're doing so basically paul just

88
00:03:22,400 --> 00:03:25,200
mentioned the

89
00:03:23,360 --> 00:03:28,000
the system that is basically at our

90
00:03:25,200 --> 00:03:30,720
other project consolidating the data so

91
00:03:28,000 --> 00:03:31,200
um and they're planning basically delays

92
00:03:30,720 --> 00:03:33,920
and

93
00:03:31,200 --> 00:03:35,280
updating the information continuously so

94
00:03:33,920 --> 00:03:35,920
in the background we have something like

95
00:03:35,280 --> 00:03:37,360
a well

96
00:03:35,920 --> 00:03:39,518
a rabbitmq broker where you can

97
00:03:37,360 --> 00:03:41,760
basically subscribe

98
00:03:39,519 --> 00:03:43,120
to a certain train track and so forth

99
00:03:41,760 --> 00:03:45,040
and then you can basically get the

100
00:03:43,120 --> 00:03:46,239
information and you continuously update

101
00:03:45,040 --> 00:03:49,440
it

102
00:03:46,239 --> 00:03:53,120
sounds easy is actually quite complex

103
00:03:49,440 --> 00:03:53,760
and i mean it's improving from year to

104
00:03:53,120 --> 00:03:55,760
year but

105
00:03:53,760 --> 00:03:57,518
what we are then doing is i mean the

106
00:03:55,760 --> 00:03:59,599
other project is basically the external

107
00:03:57,519 --> 00:04:01,280
domain up there so this single source of

108
00:03:59,599 --> 00:04:02,399
through block of travel information

109
00:04:01,280 --> 00:04:03,599
that's basically where all the

110
00:04:02,400 --> 00:04:05,680
information goes in

111
00:04:03,599 --> 00:04:07,679
so train delays when the train start

112
00:04:05,680 --> 00:04:10,319
when the train arrived

113
00:04:07,680 --> 00:04:12,159
uh scheduling and all that kind of stuff

114
00:04:10,319 --> 00:04:13,760
and it's also basically interfacing in

115
00:04:12,159 --> 00:04:14,079
the background with information systems

116
00:04:13,760 --> 00:04:16,560
from

117
00:04:14,080 --> 00:04:17,919
other countries or other operators so

118
00:04:16,560 --> 00:04:20,238
that's where all the information

119
00:04:17,918 --> 00:04:21,519
goes in and our project is basically

120
00:04:20,238 --> 00:04:23,599
interfacing with that

121
00:04:21,519 --> 00:04:25,199
and you might see at train tracks

122
00:04:23,600 --> 00:04:27,199
different devices basically

123
00:04:25,199 --> 00:04:28,880
voice devices so basically if a voice

124
00:04:27,199 --> 00:04:31,120
announcement comes that's

125
00:04:28,880 --> 00:04:32,240
from one of those devices if you have

126
00:04:31,120 --> 00:04:34,639
those displays

127
00:04:32,240 --> 00:04:36,320
lcd of tft the old ones and the new ones

128
00:04:34,639 --> 00:04:39,360
that's one of those devices and they

129
00:04:36,320 --> 00:04:40,960
might still have a variety of sensors

130
00:04:39,360 --> 00:04:42,960
so you could think of our system a

131
00:04:40,960 --> 00:04:44,000
little bit like netflix for travel

132
00:04:42,960 --> 00:04:45,919
information so

133
00:04:44,000 --> 00:04:47,360
basically we have a big microservice

134
00:04:45,919 --> 00:04:49,359
architecture in the background

135
00:04:47,360 --> 00:04:51,440
and depending on demand i mean you can

136
00:04:49,360 --> 00:04:52,320
imagine during the night there is not

137
00:04:51,440 --> 00:04:54,560
that much

138
00:04:52,320 --> 00:04:56,639
going on i mean their cargo trains their

139
00:04:54,560 --> 00:04:58,880
night trains but

140
00:04:56,639 --> 00:05:00,479
really rather during the russia we have

141
00:04:58,880 --> 00:05:02,000
like most of them for

142
00:05:00,479 --> 00:05:03,520
information going through our systems so

143
00:05:02,000 --> 00:05:06,000
it's growing it's

144
00:05:03,520 --> 00:05:07,280
it's really pretty much like a sine wave

145
00:05:06,000 --> 00:05:11,280
over the day and

146
00:05:07,280 --> 00:05:14,159
um falling down in the night yeah indeed

147
00:05:11,280 --> 00:05:16,000
so um and what we are focusing on i mean

148
00:05:14,160 --> 00:05:17,280
this back-end block

149
00:05:16,000 --> 00:05:19,199
without getting too much in the

150
00:05:17,280 --> 00:05:20,880
nitty-gritty parts is already complex

151
00:05:19,199 --> 00:05:21,520
enough so that's the netflix bit and

152
00:05:20,880 --> 00:05:23,520
then

153
00:05:21,520 --> 00:05:24,880
still we have quite a lot of different

154
00:05:23,520 --> 00:05:28,479
devices we have to

155
00:05:24,880 --> 00:05:28,800
interface with so um those devices are

156
00:05:28,479 --> 00:05:31,840
quite

157
00:05:28,800 --> 00:05:32,479
quite often well paid by public money so

158
00:05:31,840 --> 00:05:34,320
you can just

159
00:05:32,479 --> 00:05:36,719
can't just replace them so you have to

160
00:05:34,320 --> 00:05:39,039
basically retrofit them with

161
00:05:36,720 --> 00:05:40,320
um yeah and your operating system that's

162
00:05:39,039 --> 00:05:43,440
what we're doing

163
00:05:40,320 --> 00:05:45,360
because um i mean

164
00:05:43,440 --> 00:05:48,160
the there was no clean standard

165
00:05:45,360 --> 00:05:50,560
basically in the past so uh for instance

166
00:05:48,160 --> 00:05:52,400
um we had a different a lot of different

167
00:05:50,560 --> 00:05:53,919
device types with different interfaces

168
00:05:52,400 --> 00:05:54,880
and that of course doesn't make it that

169
00:05:53,919 --> 00:05:56,719
easy to

170
00:05:54,880 --> 00:05:57,919
integrate with them so we're building a

171
00:05:56,720 --> 00:06:01,440
new operating system

172
00:05:57,919 --> 00:06:03,919
and hopefully it will work quite well in

173
00:06:01,440 --> 00:06:03,919
the future

174
00:06:05,600 --> 00:06:09,520
so and that's what this talker is about

175
00:06:08,160 --> 00:06:11,199
in its course so this

176
00:06:09,520 --> 00:06:13,039
little os box we're building the

177
00:06:11,199 --> 00:06:16,400
operating system based on build root

178
00:06:13,039 --> 00:06:20,639
who knows build roots quite a few good

179
00:06:16,400 --> 00:06:22,400
cool so it's basically a toolbox

180
00:06:20,639 --> 00:06:24,080
really an abstract way it's something

181
00:06:22,400 --> 00:06:25,039
you can use in order to build a linux

182
00:06:24,080 --> 00:06:28,240
operating system

183
00:06:25,039 --> 00:06:29,759
and customize it to your needs um

184
00:06:28,240 --> 00:06:31,360
yeah and we're doing that but that's of

185
00:06:29,759 --> 00:06:33,600
course quite difficult because

186
00:06:31,360 --> 00:06:36,160
testing hardware or testing software for

187
00:06:33,600 --> 00:06:38,880
hardware with different configurations

188
00:06:36,160 --> 00:06:41,759
it gets complex quite quickly due to

189
00:06:38,880 --> 00:06:41,759
combinatorics

190
00:06:46,840 --> 00:06:51,359
cool

191
00:06:48,000 --> 00:06:53,840
yeah so um who of you has seen a test

192
00:06:51,360 --> 00:06:55,520
permit so far

193
00:06:53,840 --> 00:06:57,119
so probably you have experience in the

194
00:06:55,520 --> 00:06:57,599
enterprise domain or somewhere else or

195
00:06:57,120 --> 00:06:59,280
you have

196
00:06:57,599 --> 00:07:01,360
made some nice powerpoint slides about

197
00:06:59,280 --> 00:07:02,799
that to convince your manager that

198
00:07:01,360 --> 00:07:05,199
it might be reasonable to write a few

199
00:07:02,800 --> 00:07:06,479
tests yes that's a good idea so

200
00:07:05,199 --> 00:07:08,319
integration test and unit test that

201
00:07:06,479 --> 00:07:09,680
usually happens with software and

202
00:07:08,319 --> 00:07:11,039
but at some point you you have to

203
00:07:09,680 --> 00:07:11,520
integrate it with the real world and

204
00:07:11,039 --> 00:07:15,280
that's

205
00:07:11,520 --> 00:07:17,520
usually where things blow up and

206
00:07:15,280 --> 00:07:18,400
and you actually want to find bugs and

207
00:07:17,520 --> 00:07:21,198
problems as

208
00:07:18,400 --> 00:07:21,919
early as possible because i mean in the

209
00:07:21,199 --> 00:07:23,280
beginning if

210
00:07:21,919 --> 00:07:25,359
if you have a unit test right it's like

211
00:07:23,280 --> 00:07:26,960
you find a bug it's just like you fix

212
00:07:25,360 --> 00:07:28,479
something and recompile and it's done

213
00:07:26,960 --> 00:07:31,198
and it's good and you're happy

214
00:07:28,479 --> 00:07:31,758
but if the client finds the bug it's

215
00:07:31,199 --> 00:07:33,840
like

216
00:07:31,759 --> 00:07:35,759
you're getting called operate ops is

217
00:07:33,840 --> 00:07:36,080
unhappy you have to roll out everything

218
00:07:35,759 --> 00:07:37,919
you

219
00:07:36,080 --> 00:07:39,520
might have to wait quite a long time in

220
00:07:37,919 --> 00:07:43,039
order to get your

221
00:07:39,520 --> 00:07:44,080
fix out and it's just not making me as a

222
00:07:43,039 --> 00:07:46,479
developer happy because

223
00:07:44,080 --> 00:07:47,359
basically my development flow's broken

224
00:07:46,479 --> 00:07:49,680
but

225
00:07:47,360 --> 00:07:51,039
yeah long story short you just want to

226
00:07:49,680 --> 00:07:53,360
find bugs as early as possible and

227
00:07:51,039 --> 00:07:55,919
that's what we're doing with

228
00:07:53,360 --> 00:07:57,520
with those operating systems which we

229
00:07:55,919 --> 00:07:58,000
put in containers in order to run them

230
00:07:57,520 --> 00:08:00,000
in the cloud

231
00:07:58,000 --> 00:08:01,919
because then we can do that at scale

232
00:08:00,000 --> 00:08:04,639
more automated in the ci

233
00:08:01,919 --> 00:08:05,599
instead of flashing it or automatically

234
00:08:04,639 --> 00:08:09,039
flashing it to

235
00:08:05,599 --> 00:08:10,639
a limited set of devices and testing it

236
00:08:09,039 --> 00:08:13,199
manually because there we are basically

237
00:08:10,639 --> 00:08:16,240
limited to what we have hardware wise

238
00:08:13,199 --> 00:08:18,479
and you have to be there physically

239
00:08:16,240 --> 00:08:18,479
cool

240
00:08:24,840 --> 00:08:31,758
um the stuff we want to present you

241
00:08:28,560 --> 00:08:34,559
uh fits in this column of the

242
00:08:31,759 --> 00:08:35,440
in this row of the of the test pyramid

243
00:08:34,559 --> 00:08:39,359
and

244
00:08:35,440 --> 00:08:41,519
um the target devices are pretty

245
00:08:39,360 --> 00:08:42,880
it's they are there's a huge number of

246
00:08:41,519 --> 00:08:46,720
them i guess 6

247
00:08:42,880 --> 00:08:49,839
000 at least a lot of different

248
00:08:46,720 --> 00:08:52,160
types most of them are

249
00:08:49,839 --> 00:08:54,959
the old ones like the lcds over there

250
00:08:52,160 --> 00:08:58,079
are pc 104s the form factor but

251
00:08:54,959 --> 00:09:02,479
they vary in cpu

252
00:08:58,080 --> 00:09:04,720
in in ram size in cpu types in

253
00:09:02,480 --> 00:09:06,240
the interfaces you have these lcds and

254
00:09:04,720 --> 00:09:09,519
the tfts

255
00:09:06,240 --> 00:09:12,480
which are like better tvs but

256
00:09:09,519 --> 00:09:13,680
um they are powerful quad cores with

257
00:09:12,480 --> 00:09:17,360
gigabytes of ram

258
00:09:13,680 --> 00:09:19,760
and um their outputs are different we

259
00:09:17,360 --> 00:09:22,240
have different boot mechanisms like

260
00:09:19,760 --> 00:09:23,120
some devices only support uefi but the

261
00:09:22,240 --> 00:09:26,880
older ones

262
00:09:23,120 --> 00:09:30,800
only support mbr and

263
00:09:26,880 --> 00:09:33,120
our goal is to have like one image to

264
00:09:30,800 --> 00:09:35,439
that runs on every single device this is

265
00:09:33,120 --> 00:09:37,839
not possible we have a variety

266
00:09:35,440 --> 00:09:39,360
but still we want to have it reduced and

267
00:09:37,839 --> 00:09:41,040
not extended

268
00:09:39,360 --> 00:09:44,800
to have the main to have it still

269
00:09:41,040 --> 00:09:44,800
maintainable and testable

270
00:09:45,360 --> 00:09:49,600
there is different this is just the

271
00:09:47,920 --> 00:09:52,800
devices itself there's different

272
00:09:49,600 --> 00:09:55,920
external peripherals like

273
00:09:52,800 --> 00:09:59,359
it's called tsukul zenzuan train stop

274
00:09:55,920 --> 00:10:01,680
sensors let's call it like this

275
00:09:59,360 --> 00:10:02,640
the displays are sometimes controlled

276
00:10:01,680 --> 00:10:06,199
via

277
00:10:02,640 --> 00:10:09,519
serial protocols uarts or

278
00:10:06,200 --> 00:10:15,519
rs-485 some

279
00:10:09,519 --> 00:10:17,680
some sensors are connected via isosc

280
00:10:15,519 --> 00:10:19,680
there is some sometimes there's special

281
00:10:17,680 --> 00:10:22,399
translational hardware which

282
00:10:19,680 --> 00:10:24,319
presents itself to the system as in as a

283
00:10:22,399 --> 00:10:26,399
graphic card graphics card

284
00:10:24,320 --> 00:10:28,399
and the whole thing gets translated into

285
00:10:26,399 --> 00:10:32,720
pixels down to the lcds

286
00:10:28,399 --> 00:10:35,600
so propriety proprietary

287
00:10:32,720 --> 00:10:37,200
old legacy stuff no source and there's

288
00:10:35,600 --> 00:10:38,240
sometimes a lot of reverse engineering

289
00:10:37,200 --> 00:10:42,320
involved

290
00:10:38,240 --> 00:10:47,839
and because some of the the

291
00:10:42,320 --> 00:10:47,839
suppliers of these devices are not um

292
00:10:56,240 --> 00:11:00,000
basically helping us i mean it's like

293
00:10:58,320 --> 00:11:01,680
yeah it's always

294
00:11:00,000 --> 00:11:03,279
a close source software so why should we

295
00:11:01,680 --> 00:11:05,199
help you because then

296
00:11:03,279 --> 00:11:07,360
in the future you might do everything

297
00:11:05,200 --> 00:11:09,120
yourself um

298
00:11:07,360 --> 00:11:10,560
maybe sometimes they even don't have the

299
00:11:09,120 --> 00:11:12,560
source themselves anymore

300
00:11:10,560 --> 00:11:15,680
so sometimes they go down in the

301
00:11:12,560 --> 00:11:18,719
basement and have a look in there

302
00:11:15,680 --> 00:11:21,920
in some sort of file folders and

303
00:11:18,720 --> 00:11:23,360
like real paper and stuff anyway

304
00:11:21,920 --> 00:11:25,680
it's quite interesting sometimes you

305
00:11:23,360 --> 00:11:27,200
basically log on to those old

306
00:11:25,680 --> 00:11:29,120
machines and you have a look at the

307
00:11:27,200 --> 00:11:30,560
history and people jumping from one

308
00:11:29,120 --> 00:11:33,440
machine to another in order to fix the

309
00:11:30,560 --> 00:11:33,439
bug because they don't know

310
00:11:33,519 --> 00:11:37,440
yeah but so that's something we really

311
00:11:36,399 --> 00:11:39,200
want to fix because

312
00:11:37,440 --> 00:11:40,560
that's something you can well you

313
00:11:39,200 --> 00:11:42,560
probably know yourself that's something

314
00:11:40,560 --> 00:11:44,079
that is not maintainable so we

315
00:11:42,560 --> 00:11:45,839
really want to push a standard

316
00:11:44,079 --> 00:11:49,120
standardized interfaces

317
00:11:45,839 --> 00:11:53,040
so it will be maintainable and

318
00:11:49,120 --> 00:11:54,560
um will make us as i'm a devops guy and

319
00:11:53,040 --> 00:11:56,480
he's more developer guy but that will

320
00:11:54,560 --> 00:11:58,719
make me personally really happy if that

321
00:11:56,480 --> 00:11:58,720
works

322
00:11:58,800 --> 00:12:02,000
yeah the standard workflow of the

323
00:12:00,560 --> 00:12:05,279
suppliers was

324
00:12:02,000 --> 00:12:07,040
have one debian image put their

325
00:12:05,279 --> 00:12:09,680
software stack on it put it in the

326
00:12:07,040 --> 00:12:10,079
device fiddle around till it works and

327
00:12:09,680 --> 00:12:12,638
then

328
00:12:10,079 --> 00:12:14,560
never touch it again and what we we're

329
00:12:12,639 --> 00:12:18,000
trying to do is like

330
00:12:14,560 --> 00:12:21,920
um automated updates in the field and

331
00:12:18,000 --> 00:12:23,920
on 6000 devices with uh thin

332
00:12:21,920 --> 00:12:25,599
thin network lines with sometimes only

333
00:12:23,920 --> 00:12:28,959
take 10 kb

334
00:12:25,600 --> 00:12:31,600
bandwidth you really don't want to

335
00:12:28,959 --> 00:12:33,680
push that often an image through it

336
00:12:31,600 --> 00:12:36,639
especially if it's like 200 300

337
00:12:33,680 --> 00:12:38,959
megabytes so we would like to test the

338
00:12:36,639 --> 00:12:40,800
stuff before we roll it out

339
00:12:38,959 --> 00:12:43,040
and make sure that it's working like we

340
00:12:40,800 --> 00:12:45,680
wanted to

341
00:12:43,040 --> 00:12:46,800
so but the problem now arises that we

342
00:12:45,680 --> 00:12:50,959
have like

343
00:12:46,800 --> 00:12:52,880
a huge hardware variety and how can we

344
00:12:50,959 --> 00:12:54,319
simulate that hardware in combination

345
00:12:52,880 --> 00:12:55,360
with the software you want we want to

346
00:12:54,320 --> 00:12:58,639
run it on and

347
00:12:55,360 --> 00:13:02,079
um we're trying to use qmo

348
00:12:58,639 --> 00:13:02,079
um the

349
00:13:02,240 --> 00:13:06,399
kuimo is pretty awesome because it can

350
00:13:04,320 --> 00:13:08,800
you can

351
00:13:06,399 --> 00:13:10,399
really find details specify how the

352
00:13:08,800 --> 00:13:11,199
hardware should behave you can select

353
00:13:10,399 --> 00:13:14,880
different

354
00:13:11,200 --> 00:13:18,639
cpus you can connect

355
00:13:14,880 --> 00:13:21,279
different serial devices in different

356
00:13:18,639 --> 00:13:22,639
options like is it connected by an iso

357
00:13:21,279 --> 00:13:26,000
bus or a usb

358
00:13:22,639 --> 00:13:27,760
and you can

359
00:13:26,000 --> 00:13:29,760
change the details of the dmi table

360
00:13:27,760 --> 00:13:33,200
which is like a specific

361
00:13:29,760 --> 00:13:36,319
part of memory on the hardware

362
00:13:33,200 --> 00:13:37,440
motherboard itself we heavily rely on

363
00:13:36,320 --> 00:13:38,959
that

364
00:13:37,440 --> 00:13:40,800
to identify the divide the different

365
00:13:38,959 --> 00:13:43,199
devices so in order

366
00:13:40,800 --> 00:13:45,199
that we know what services we have to

367
00:13:43,199 --> 00:13:49,120
start

368
00:13:45,199 --> 00:13:50,959
and which not so on a tft you need

369
00:13:49,120 --> 00:13:53,440
we use there an electron to display

370
00:13:50,959 --> 00:13:54,079
stuff and on an lcd we use like custom

371
00:13:53,440 --> 00:13:57,279
written

372
00:13:54,079 --> 00:13:59,920
um controller servers which is

373
00:13:57,279 --> 00:14:02,720
communicating with the lcd displays

374
00:13:59,920 --> 00:14:05,040
so yeah we choose creamer and it's open

375
00:14:02,720 --> 00:14:05,040
source

376
00:14:06,959 --> 00:14:11,760
so this is the container how it looks

377
00:14:09,519 --> 00:14:11,760
like

378
00:14:12,399 --> 00:14:17,440
it's not what we're using on the project

379
00:14:14,800 --> 00:14:20,560
but it basically reflects the

380
00:14:17,440 --> 00:14:22,000
state of the composition

381
00:14:20,560 --> 00:14:25,199
you have the auto container it's an

382
00:14:22,000 --> 00:14:27,760
alpine where scream is installed

383
00:14:25,199 --> 00:14:28,399
you have an inner kumo running which

384
00:14:27,760 --> 00:14:32,000
gets the

385
00:14:28,399 --> 00:14:35,040
disk image wire and volume mount

386
00:14:32,000 --> 00:14:38,240
and some ports are exposed

387
00:14:35,040 --> 00:14:39,680
for example the ssh to remotely control

388
00:14:38,240 --> 00:14:40,320
it in the future we would like to get

389
00:14:39,680 --> 00:14:43,359
rid of that

390
00:14:40,320 --> 00:14:46,320
and do everything by

391
00:14:43,360 --> 00:14:47,360
amqp commands but this is still far

392
00:14:46,320 --> 00:14:50,480
future

393
00:14:47,360 --> 00:14:52,079
um does everybody know what mqp is

394
00:14:50,480 --> 00:14:54,160
basically the protocol used by rabbit

395
00:14:52,079 --> 00:14:57,519
and hue which is our middleware up

396
00:14:54,160 --> 00:15:00,319
yeah um yeah yeah middleware basically

397
00:14:57,519 --> 00:15:00,320
message broker

398
00:15:01,040 --> 00:15:04,800
and um so the interesting stuff for

399
00:15:03,760 --> 00:15:08,399
kuimo is the

400
00:15:04,800 --> 00:15:11,040
dev ttys0 um

401
00:15:08,399 --> 00:15:11,519
which gets exposed on the socket 9000

402
00:15:11,040 --> 00:15:13,439
and

403
00:15:11,519 --> 00:15:15,440
can interact with external hardware in

404
00:15:13,440 --> 00:15:18,240
this case with a mocked hardware

405
00:15:15,440 --> 00:15:20,240
and the control port of the mocked

406
00:15:18,240 --> 00:15:24,000
hardware is also exposed

407
00:15:20,240 --> 00:15:25,360
we have a novnc which which lets us see

408
00:15:24,000 --> 00:15:29,120
how the boot process

409
00:15:25,360 --> 00:15:31,680
is but really the yellow stuff is only

410
00:15:29,120 --> 00:15:32,480
optional it's it's not really necessary

411
00:15:31,680 --> 00:15:36,560
for

412
00:15:32,480 --> 00:15:39,120
for testing the the the image itself

413
00:15:36,560 --> 00:15:40,560
yeah so it's quite nice so nova who

414
00:15:39,120 --> 00:15:43,920
knows no fancy it's

415
00:15:40,560 --> 00:15:47,199
uh it's basically a html uh pharmacy

416
00:15:43,920 --> 00:15:50,240
vnc uh applet basically so you can

417
00:15:47,199 --> 00:15:51,839
browse to port 6080

418
00:15:50,240 --> 00:15:54,720
and basically see what is going on on

419
00:15:51,839 --> 00:15:57,440
that machine and you don't need um

420
00:15:54,720 --> 00:15:58,160
a yeah one of those application

421
00:15:57,440 --> 00:16:00,079
installed so

422
00:15:58,160 --> 00:16:01,360
it's it's tightly coupled in there so

423
00:16:00,079 --> 00:16:02,239
what we we have been doing at our

424
00:16:01,360 --> 00:16:04,079
project

425
00:16:02,240 --> 00:16:05,759
we first did that actually with

426
00:16:04,079 --> 00:16:08,079
graphical uh applications

427
00:16:05,759 --> 00:16:08,800
with a no found c in a container so we

428
00:16:08,079 --> 00:16:10,880
were running

429
00:16:08,800 --> 00:16:12,639
up to 600 of those devices and you could

430
00:16:10,880 --> 00:16:14,480
just click a link with a

431
00:16:12,639 --> 00:16:16,639
unique identifier of the simulated

432
00:16:14,480 --> 00:16:17,920
device they could see what was going on

433
00:16:16,639 --> 00:16:19,839
on one of those devices

434
00:16:17,920 --> 00:16:22,000
so that's really helpful if you want to

435
00:16:19,839 --> 00:16:24,320
stress test your system with real

436
00:16:22,000 --> 00:16:26,079
devices especially the back end not the

437
00:16:24,320 --> 00:16:29,920
devices itself to generate

438
00:16:26,079 --> 00:16:32,959
load on the back end yeah

439
00:16:29,920 --> 00:16:34,639
cool okay what you're going to see is

440
00:16:32,959 --> 00:16:37,359
something like this setup

441
00:16:34,639 --> 00:16:39,440
it's not much different but the mocked

442
00:16:37,360 --> 00:16:44,240
uh you see like the mocking part is

443
00:16:39,440 --> 00:16:44,240
uh is deleted and the

444
00:16:44,399 --> 00:16:50,480
the ttys0 port is just like

445
00:16:48,560 --> 00:16:52,560
exposed by the docker container so we

446
00:16:50,480 --> 00:16:56,000
can interact directly so we

447
00:16:52,560 --> 00:16:56,000
kind of doing the manual mocking

448
00:16:56,399 --> 00:16:59,839
yeah so what we we're going to show you

449
00:16:58,160 --> 00:17:01,279
basically how that thing works

450
00:16:59,839 --> 00:17:03,360
we're going to do that unfortunately

451
00:17:01,279 --> 00:17:04,000
locally because we can't interface with

452
00:17:03,360 --> 00:17:08,079
our clients

453
00:17:04,000 --> 00:17:11,119
uh cid this system at this point

454
00:17:08,079 --> 00:17:14,319
um uh because we didn't get approval

455
00:17:11,119 --> 00:17:17,520
but that's fine um

456
00:17:14,319 --> 00:17:19,760
i mean we didn't get an answer so far

457
00:17:17,520 --> 00:17:21,359
so so that's why we're showing you it

458
00:17:19,760 --> 00:17:23,520
basically and then we're telling you how

459
00:17:21,359 --> 00:17:26,559
we are you doing that currently

460
00:17:23,520 --> 00:17:27,520
in uh yeah in the cicd context of our

461
00:17:26,559 --> 00:17:31,200
project

462
00:17:27,520 --> 00:17:31,200
and how we're deploying that

463
00:17:31,360 --> 00:17:38,000
okay demo time

464
00:17:35,760 --> 00:17:38,000
um

465
00:17:39,679 --> 00:17:47,840
i guess if i stop any speakers

466
00:17:48,080 --> 00:17:50,320
okay

467
00:17:57,360 --> 00:18:01,840
when those people

468
00:18:07,360 --> 00:18:19,120
yeah give me a second

469
00:18:15,039 --> 00:18:21,840
okay perfect

470
00:18:19,120 --> 00:18:23,600
um so there's the docker file which

471
00:18:21,840 --> 00:18:24,000
builds like the container you've seen so

472
00:18:23,600 --> 00:18:27,678
far

473
00:18:24,000 --> 00:18:30,799
um there's this uh qemo disk image

474
00:18:27,679 --> 00:18:33,760
i was trying something that's

475
00:18:30,799 --> 00:18:34,400
not so not so interesting we have a make

476
00:18:33,760 --> 00:18:37,360
file

477
00:18:34,400 --> 00:18:38,720
which should make it easy to do stuff

478
00:18:37,360 --> 00:18:42,080
right now

479
00:18:38,720 --> 00:18:46,400
but um

480
00:18:42,080 --> 00:18:49,760
we can make

481
00:18:46,400 --> 00:18:49,760
run clocker

482
00:18:54,799 --> 00:18:58,480
so we're still attached to the container

483
00:18:56,880 --> 00:19:01,039
which boots up right now

484
00:18:58,480 --> 00:19:03,440
so we have a little delay uh between the

485
00:19:01,039 --> 00:19:05,280
kuimo start and the no vnc start because

486
00:19:03,440 --> 00:19:08,720
if you start them right after each other

487
00:19:05,280 --> 00:19:09,678
uh sometimes no vnc says it can't

488
00:19:08,720 --> 00:19:14,710
connect to the

489
00:19:09,679 --> 00:19:17,769
bnc port of kuimo so detail is not so

490
00:19:14,710 --> 00:19:17,769
[Music]

491
00:19:22,840 --> 00:19:25,840
important

492
00:19:29,120 --> 00:19:34,479
um the next interesting thing

493
00:19:36,840 --> 00:19:39,840
is

494
00:19:42,160 --> 00:19:46,080
we can have a look at the booting

495
00:19:43,520 --> 00:19:46,080
container

496
00:19:49,200 --> 00:19:54,480
which looks like this so it's

497
00:19:52,480 --> 00:19:56,799
this is what you would see if you would

498
00:19:54,480 --> 00:19:59,039
start qmo manually

499
00:19:56,799 --> 00:20:01,840
and you could interact but i guess here

500
00:19:59,039 --> 00:20:01,840
it's disabled

501
00:20:04,840 --> 00:20:08,720
um

502
00:20:06,000 --> 00:20:09,120
we can now connect to the contain into

503
00:20:08,720 --> 00:20:21,760
the

504
00:20:09,120 --> 00:20:25,199
running session inside

505
00:20:21,760 --> 00:20:28,720
the the service running inside runs in a

506
00:20:25,200 --> 00:20:32,720
tmax so i can attach to the output again

507
00:20:28,720 --> 00:20:36,400
but on boot it starts as root so

508
00:20:32,720 --> 00:20:39,600
we have to sudo tmox we can ls first

509
00:20:36,400 --> 00:20:43,919
we see a session running we can attach

510
00:20:39,600 --> 00:20:43,918
to this to the session with this name

511
00:20:45,520 --> 00:20:48,879
so there we see that the http server

512
00:20:47,280 --> 00:20:52,080
started and the sensor handler

513
00:20:48,880 --> 00:20:57,120
started on the devty

514
00:20:52,080 --> 00:21:03,039
as zero with the given baud rate

515
00:20:57,120 --> 00:21:05,678
so now we can now we have a look at the

516
00:21:03,039 --> 00:21:07,760
at the service we want to test which is

517
00:21:05,679 --> 00:21:09,520
on local port 8000

518
00:21:07,760 --> 00:21:12,400
which looks like this so far it hasn't

519
00:21:09,520 --> 00:21:12,400
received anything

520
00:21:12,880 --> 00:21:17,840
i'll make this a little smaller that you

521
00:21:14,840 --> 00:21:17,840
see

522
00:21:18,960 --> 00:21:23,360
okay and then we can send some data

523
00:21:29,280 --> 00:21:37,520
we're not waiting for a response

524
00:21:32,720 --> 00:21:45,840
q0 connect to localhost

525
00:21:37,520 --> 00:21:45,840
and the exposed port and

526
00:21:46,050 --> 00:21:49,139
[Music]

527
00:21:54,880 --> 00:21:58,080
let's try this so you see the sensor

528
00:21:57,440 --> 00:22:01,120
received

529
00:21:58,080 --> 00:22:01,520
some raw bytes uh decoded them stripped

530
00:22:01,120 --> 00:22:05,520
them

531
00:22:01,520 --> 00:22:05,520
passed them to ins and if we

532
00:22:08,400 --> 00:22:10,640
so

533
00:22:11,600 --> 00:22:13,918
thanks

534
00:22:14,050 --> 00:22:19,360
[Applause]

535
00:22:17,120 --> 00:22:19,360
um

536
00:22:20,480 --> 00:22:24,880
if we plug something in which is like

537
00:22:22,559 --> 00:22:28,080
non-possible as an ins we see that

538
00:22:24,880 --> 00:22:30,320
an error happened and

539
00:22:28,080 --> 00:22:32,559
a test scenario would be put garbage in

540
00:22:30,320 --> 00:22:36,720
and see if it's got parsed by the

541
00:22:32,559 --> 00:22:40,720
by the program itself right

542
00:22:36,720 --> 00:22:42,400
so let's see it didn't change

543
00:22:40,720 --> 00:22:45,760
yeah so what we're for instance doing

544
00:22:42,400 --> 00:22:48,960
with uh yeah sensor data perhaps is we

545
00:22:45,760 --> 00:22:50,960
all our devices basically have a um

546
00:22:48,960 --> 00:22:53,039
exporter endpoint basically so

547
00:22:50,960 --> 00:22:54,480
prometheus is basically scraping metrics

548
00:22:53,039 --> 00:22:57,760
from that system

549
00:22:54,480 --> 00:22:59,520
and well it then basically

550
00:22:57,760 --> 00:23:01,679
and probably this digests all those

551
00:22:59,520 --> 00:23:02,559
metrics and we can do later on something

552
00:23:01,679 --> 00:23:04,080
with that

553
00:23:02,559 --> 00:23:06,080
quite interesting to see in the morning

554
00:23:04,080 --> 00:23:06,879
where the sun is going up or how bright

555
00:23:06,080 --> 00:23:09,439
it is or

556
00:23:06,880 --> 00:23:12,159
whatever but it's also for diagnostics

557
00:23:09,440 --> 00:23:12,159
quite interesting

558
00:23:13,220 --> 00:23:20,159
[Music]

559
00:23:16,159 --> 00:23:20,159
so i just go back a little

560
00:23:20,840 --> 00:23:23,840
um

561
00:23:33,200 --> 00:23:38,880
so we pushed some data in here it got

562
00:23:36,240 --> 00:23:39,520
processed by the by the custom the

563
00:23:38,880 --> 00:23:42,960
custom

564
00:23:39,520 --> 00:23:44,320
service and got exposed on the 888 port

565
00:23:42,960 --> 00:23:47,520
again

566
00:23:44,320 --> 00:23:51,678
so this is like a round trip

567
00:23:47,520 --> 00:23:55,200
through the through the software to test

568
00:23:51,679 --> 00:23:58,559
yeah so since it's dockerized you can

569
00:23:55,200 --> 00:23:58,559
put it on kubernetes and

570
00:23:59,039 --> 00:24:04,080
put it in the ci and run tests on it do

571
00:24:02,159 --> 00:24:08,159
it automatically

572
00:24:04,080 --> 00:24:10,799
yeah yeah so what we're doing um

573
00:24:08,159 --> 00:24:12,080
we have our project still held charts

574
00:24:10,799 --> 00:24:14,480
which is the configuration

575
00:24:12,080 --> 00:24:16,240
layer you basically tie around one of

576
00:24:14,480 --> 00:24:18,799
those docker containers

577
00:24:16,240 --> 00:24:20,720
and then you can basically mount the the

578
00:24:18,799 --> 00:24:23,360
newest build

579
00:24:20,720 --> 00:24:23,760
or os image you want to put in there

580
00:24:23,360 --> 00:24:25,760
then

581
00:24:23,760 --> 00:24:27,279
basically run it and your also through

582
00:24:25,760 --> 00:24:29,760
kubernetes can tag it put

583
00:24:27,279 --> 00:24:32,400
all the metadata into it and run it at

584
00:24:29,760 --> 00:24:35,600
scale that's actually quite uh

585
00:24:32,400 --> 00:24:37,039
yeah helpful for us at least because

586
00:24:35,600 --> 00:24:38,240
now we can basically show the client

587
00:24:37,039 --> 00:24:40,559
what we're doing and what kind of

588
00:24:38,240 --> 00:24:43,200
different configurations it's retestable

589
00:24:40,559 --> 00:24:44,559
um which is usually not the case with

590
00:24:43,200 --> 00:24:47,919
hardware if

591
00:24:44,559 --> 00:24:50,240
i mean probably a few of you have tried

592
00:24:47,919 --> 00:24:51,039
replicating things with hardware it's

593
00:24:50,240 --> 00:24:54,159
just

594
00:24:51,039 --> 00:24:54,158
it just takes a lot of time

595
00:24:56,080 --> 00:25:00,158
as you see it's not silver bullet

596
00:24:57,840 --> 00:25:03,840
because like this special hardware

597
00:25:00,159 --> 00:25:05,919
is really hard to mock um special

598
00:25:03,840 --> 00:25:07,120
graphic cards you can't really mock and

599
00:25:05,919 --> 00:25:09,600
create new

600
00:25:07,120 --> 00:25:10,879
and this is not feasible but the

601
00:25:09,600 --> 00:25:15,600
standard cases

602
00:25:10,880 --> 00:25:17,840
are doable and um

603
00:25:15,600 --> 00:25:20,158
it's not possible to have a sample of

604
00:25:17,840 --> 00:25:22,320
every hardware configuration in the lab

605
00:25:20,159 --> 00:25:23,760
first we would need like a warehouse to

606
00:25:22,320 --> 00:25:25,520
to store them all

607
00:25:23,760 --> 00:25:27,360
on the other hand you would have to plug

608
00:25:25,520 --> 00:25:29,520
in like the images

609
00:25:27,360 --> 00:25:30,479
or like deploy them via updates but

610
00:25:29,520 --> 00:25:33,679
still

611
00:25:30,480 --> 00:25:35,840
um so and

612
00:25:33,679 --> 00:25:37,039
you're not really controlling the input

613
00:25:35,840 --> 00:25:39,120
on the test you're just

614
00:25:37,039 --> 00:25:40,480
testing that it's doing something but

615
00:25:39,120 --> 00:25:42,239
you don't know if it's doing the right

616
00:25:40,480 --> 00:25:44,000
thing for example

617
00:25:42,240 --> 00:25:46,080
if you can't control the temperature

618
00:25:44,000 --> 00:25:50,320
temperature sensor

619
00:25:46,080 --> 00:25:51,360
right and so this approach makes it kind

620
00:25:50,320 --> 00:25:54,879
of possible

621
00:25:51,360 --> 00:25:57,520
to get rid of all these problems and

622
00:25:54,880 --> 00:26:00,159
not all of them for sure but get rid of

623
00:25:57,520 --> 00:26:03,120
some of these problems and

624
00:26:00,159 --> 00:26:05,200
make the workflow a little more a little

625
00:26:03,120 --> 00:26:09,439
more streamlined

626
00:26:05,200 --> 00:26:13,039
okay cool how was it basically

627
00:26:09,440 --> 00:26:14,640
so uh we're open for questions

628
00:26:13,039 --> 00:26:16,720
i guess we have plenty time for

629
00:26:14,640 --> 00:26:20,559
questions

630
00:26:16,720 --> 00:26:22,880
oh go for it do we have a microphone

631
00:26:20,559 --> 00:26:25,360
no we don't have mine i have to repeat

632
00:26:22,880 --> 00:26:25,360
the questions

633
00:26:25,440 --> 00:26:30,080
um so you mentioned that you guys have a

634
00:26:27,919 --> 00:26:31,279
lot of powerful legacy machines so these

635
00:26:30,080 --> 00:26:34,399
are quad-core

636
00:26:31,279 --> 00:26:36,480
machines no yeah go on

637
00:26:34,400 --> 00:26:38,240
uh this to me sounds like a button in

638
00:26:36,480 --> 00:26:40,880
the making did you guys ever run into

639
00:26:38,240 --> 00:26:41,440
any problems with that did you know of

640
00:26:40,880 --> 00:26:43,520
any

641
00:26:41,440 --> 00:26:46,000
of these missions that were hacked in

642
00:26:43,520 --> 00:26:46,000
the past

643
00:26:50,480 --> 00:26:56,799
and the question was if

644
00:26:53,679 --> 00:26:58,000
these old legacy systems were hacked if

645
00:26:56,799 --> 00:27:02,240
that's correct

646
00:26:58,000 --> 00:27:02,240
um yeah

647
00:27:04,840 --> 00:27:08,959
yes

648
00:27:06,240 --> 00:27:11,279
second question okay isn't it impossible

649
00:27:08,960 --> 00:27:13,120
to install custom os's on these machines

650
00:27:11,279 --> 00:27:15,039
most of these legacy systems typically

651
00:27:13,120 --> 00:27:16,080
don't allow you to do a lot of stuff

652
00:27:15,039 --> 00:27:18,720
with them

653
00:27:16,080 --> 00:27:19,600
so do you guys have like another part of

654
00:27:18,720 --> 00:27:22,320
hardware or

655
00:27:19,600 --> 00:27:24,639
installment stations that you can do

656
00:27:22,320 --> 00:27:28,158
anything with

657
00:27:24,640 --> 00:27:29,919
we actually have a lot of those devices

658
00:27:28,159 --> 00:27:32,399
shipped to our office so we have a quite

659
00:27:29,919 --> 00:27:35,360
big laboratory where we can test

660
00:27:32,399 --> 00:27:36,959
quite a certain range of models but uh

661
00:27:35,360 --> 00:27:40,080
office is quite stuff with it

662
00:27:36,960 --> 00:27:42,799
so i mean that's our bottleneck um

663
00:27:40,080 --> 00:27:44,399
we can test a few of those devices live

664
00:27:42,799 --> 00:27:46,240
at the stations but

665
00:27:44,399 --> 00:27:47,520
uh from a security stand point of view

666
00:27:46,240 --> 00:27:50,559
we try to limit

667
00:27:47,520 --> 00:27:54,320
the access to the network um

668
00:27:50,559 --> 00:27:57,520
yeah for once because of past happenings

669
00:27:54,320 --> 00:27:59,039
and um yeah security is also a reason

670
00:27:57,520 --> 00:28:00,559
why we're doing all of this so we can

671
00:27:59,039 --> 00:28:02,640
basically close down the operating

672
00:28:00,559 --> 00:28:05,760
systems and

673
00:28:02,640 --> 00:28:08,399
yeah um the workflow how the

674
00:28:05,760 --> 00:28:09,200
the suppliers uh deployed a new image

675
00:28:08,399 --> 00:28:11,520
was like

676
00:28:09,200 --> 00:28:13,520
a guy was going there opening the device

677
00:28:11,520 --> 00:28:15,440
putting a cf card in there

678
00:28:13,520 --> 00:28:16,799
with the new image and fiddling around

679
00:28:15,440 --> 00:28:19,840
and so

680
00:28:16,799 --> 00:28:19,840
if that was a question

681
00:28:22,320 --> 00:28:27,520
for like hardware you basically do it by

682
00:28:25,440 --> 00:28:31,200
experimenting with the lighting

683
00:28:27,520 --> 00:28:31,200
right and then just coding

684
00:28:33,440 --> 00:28:37,600
yes the mocks are getting developed by

685
00:28:36,399 --> 00:28:40,000
reverse engineering

686
00:28:37,600 --> 00:28:40,639
sometimes there's a spec but usually

687
00:28:40,000 --> 00:28:44,240
it's

688
00:28:40,640 --> 00:28:48,399
wide as a door and every vendor

689
00:28:44,240 --> 00:28:51,520
uh made its own solution to that

690
00:28:48,399 --> 00:28:53,760
okay you first

691
00:28:51,520 --> 00:28:54,960
have you consider linux kit as an option

692
00:28:53,760 --> 00:28:58,320
to

693
00:28:54,960 --> 00:29:01,600
build the operating system um

694
00:28:58,320 --> 00:29:04,639
there was a uh

695
00:29:01,600 --> 00:29:07,360
if we have considered linux kids

696
00:29:04,640 --> 00:29:08,480
i guess so the decisions i made before i

697
00:29:07,360 --> 00:29:11,279
came

698
00:29:08,480 --> 00:29:12,399
but we have good architects and i guess

699
00:29:11,279 --> 00:29:13,919
they did so

700
00:29:12,399 --> 00:29:16,000
but i can't tell you why they're why

701
00:29:13,919 --> 00:29:18,159
they picked build route i think

702
00:29:16,000 --> 00:29:19,279
because you can choose pretty specific

703
00:29:18,159 --> 00:29:22,960
what driver

704
00:29:19,279 --> 00:29:24,399
what core utility you want to have in

705
00:29:22,960 --> 00:29:27,279
there and if you really need it

706
00:29:24,399 --> 00:29:29,360
and i guess that was the reason for it

707
00:29:27,279 --> 00:29:31,360
so back in the time builder basically

708
00:29:29,360 --> 00:29:32,639
seemed like a good option so when we

709
00:29:31,360 --> 00:29:34,479
started well when the product was

710
00:29:32,640 --> 00:29:38,399
started was not quite sure what the

711
00:29:34,480 --> 00:29:40,240
variety of hardware is out there so with

712
00:29:38,399 --> 00:29:42,158
i mean of course you test against what

713
00:29:40,240 --> 00:29:43,840
you know or you you basically build your

714
00:29:42,159 --> 00:29:46,559
architecture against what you

715
00:29:43,840 --> 00:29:47,360
might expect and at that time we had a

716
00:29:46,559 --> 00:29:48,720
certain amount of

717
00:29:47,360 --> 00:29:50,799
knowledge and build was basically

718
00:29:48,720 --> 00:29:54,559
fitting for that um

719
00:29:50,799 --> 00:29:57,120
i mean it's a long-running project so

720
00:29:54,559 --> 00:30:00,559
we haven't started like yesterday so um

721
00:29:57,120 --> 00:30:00,559
yeah linux key is quite old

722
00:30:02,000 --> 00:30:08,399
i'll check it out yeah oh yeah um if you

723
00:30:05,360 --> 00:30:10,559
are interested just drop us a note and

724
00:30:08,399 --> 00:30:12,000
yeah we we have the code basically in a

725
00:30:10,559 --> 00:30:15,039
public repository so

726
00:30:12,000 --> 00:30:16,799
we probably gonna push it publish that

727
00:30:15,039 --> 00:30:20,799
is that possible

728
00:30:16,799 --> 00:30:20,799
cool yeah so you can have a look at it

729
00:30:20,840 --> 00:30:24,000
okay um

730
00:30:21,360 --> 00:30:24,959
so you talked about using helm to deploy

731
00:30:24,000 --> 00:30:27,200
things

732
00:30:24,960 --> 00:30:29,039
uh and you showed us the developer

733
00:30:27,200 --> 00:30:33,200
experience yeah pretty nice

734
00:30:29,039 --> 00:30:33,200
do you also have some ci

735
00:30:33,360 --> 00:30:37,120
so i should push things up are things

736
00:30:35,919 --> 00:30:39,520
tested or is it very

737
00:30:37,120 --> 00:30:40,559
changed at the development um it's

738
00:30:39,520 --> 00:30:42,158
complete it's like

739
00:30:40,559 --> 00:30:44,399
our project is completely built in the

740
00:30:42,159 --> 00:30:45,840
ci so we have a good level ci system and

741
00:30:44,399 --> 00:30:48,959
as soon as you push basically

742
00:30:45,840 --> 00:30:51,439
it's a through the hook basically then

743
00:30:48,960 --> 00:30:53,279
builds all the code and deploys it

744
00:30:51,440 --> 00:30:55,440
automatically

745
00:30:53,279 --> 00:30:57,200
if if that was here so it's again yeah

746
00:30:55,440 --> 00:31:00,399
so you were talking about exposing those

747
00:30:57,200 --> 00:31:05,840
balls and then just your git lab runner

748
00:31:00,399 --> 00:31:05,840
the thing that runs up

749
00:31:07,919 --> 00:31:11,039
so at the moment it actually just

750
00:31:09,760 --> 00:31:13,120
deploys it so

751
00:31:11,039 --> 00:31:14,640
uh the life cycle of the deployment is

752
00:31:13,120 --> 00:31:17,120
they're independent from

753
00:31:14,640 --> 00:31:18,159
the yeah let's say runtime of the of the

754
00:31:17,120 --> 00:31:21,518
ci

755
00:31:18,159 --> 00:31:24,799
um or deployment basically um

756
00:31:21,519 --> 00:31:26,799
and uh we haven't integrated that at

757
00:31:24,799 --> 00:31:27,360
this one so far because the requirement

758
00:31:26,799 --> 00:31:29,039
was

759
00:31:27,360 --> 00:31:30,559
uh we just want to see what is running

760
00:31:29,039 --> 00:31:32,000
on there and if it's crashing

761
00:31:30,559 --> 00:31:34,639
and that's something you can see over

762
00:31:32,000 --> 00:31:37,919
time time quite well in kubernetes

763
00:31:34,640 --> 00:31:40,720
through logs metrics and so forth

764
00:31:37,919 --> 00:31:41,600
um another thing like compiling build

765
00:31:40,720 --> 00:31:44,880
root

766
00:31:41,600 --> 00:31:47,279
is like a huge deal it takes really long

767
00:31:44,880 --> 00:31:50,799
even in the ci even with heavy machines

768
00:31:47,279 --> 00:31:53,279
so it's not like click we reduced it

769
00:31:50,799 --> 00:31:56,639
down to hot one and a half hours i guess

770
00:31:53,279 --> 00:31:59,360
like with the whole tool chain and but

771
00:31:56,640 --> 00:32:00,559
still it's you want to have it optimized

772
00:31:59,360 --> 00:32:03,840
you can't wait

773
00:32:00,559 --> 00:32:15,840
click a button and wait for

774
00:32:03,840 --> 00:32:15,840
for it to compile there

775
00:32:17,039 --> 00:32:20,799
um if we build separate images for the

776
00:32:18,960 --> 00:32:24,399
target hardware and the qemo

777
00:32:20,799 --> 00:32:26,399
um no we don't want to do that

778
00:32:24,399 --> 00:32:28,559
so we don't want to we want to test the

779
00:32:26,399 --> 00:32:32,080
real image which goes into the fields

780
00:32:28,559 --> 00:32:35,918
not a specific image for queen we are

781
00:32:32,080 --> 00:32:39,439
having some kind of variety for

782
00:32:35,919 --> 00:32:42,799
um some in-house monitoring but

783
00:32:39,440 --> 00:32:47,919
this is not going ever in the field

784
00:32:42,799 --> 00:32:49,918
uh down there yeah you are using details

785
00:32:47,919 --> 00:32:52,159
and you're building build rooms and you

786
00:32:49,919 --> 00:32:57,840
said you shrink the time

787
00:32:52,159 --> 00:32:57,840
are you using any caching mechanism

788
00:32:58,000 --> 00:33:01,840
um if we're using caching for the build

789
00:33:00,240 --> 00:33:04,240
rule part

790
00:33:01,840 --> 00:33:04,240
stages

791
00:33:07,039 --> 00:33:13,840
yes where caching the

792
00:33:10,799 --> 00:33:17,200
the the tool chain so

793
00:33:13,840 --> 00:33:17,678
usually build root builds the 2chan as

794
00:33:17,200 --> 00:33:21,919
well

795
00:33:17,679 --> 00:33:24,960
especially if it has a blank system and

796
00:33:21,919 --> 00:33:28,000
but what things would really speed up

797
00:33:24,960 --> 00:33:31,440
is the cc cache but

798
00:33:28,000 --> 00:33:33,840
we didn't get it working till now but

799
00:33:31,440 --> 00:33:35,679
this would be a really boost like i

800
00:33:33,840 --> 00:33:39,279
guess we could make it in half an hour

801
00:33:35,679 --> 00:33:41,919
if we do so

802
00:33:39,279 --> 00:33:41,919
someone else

803
00:33:42,559 --> 00:33:52,240
i guess then we're spot on perfect thank

804
00:33:45,279 --> 00:33:55,710
you very much for your time

805
00:33:52,240 --> 00:33:55,710
[Applause]

806
00:33:59,200 --> 00:34:01,279
you

