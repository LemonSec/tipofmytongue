1
00:00:12,799 --> 00:00:16,880
all right so http resource

2
00:00:14,920 --> 00:00:19,279
prioritization i'm gonna be honest

3
00:00:16,880 --> 00:00:20,880
actually quite a boring topic and so for

4
00:00:19,279 --> 00:00:22,480
today i decided that i'm gonna talk

5
00:00:20,880 --> 00:00:24,000
about something completely different

6
00:00:22,480 --> 00:00:26,160
something i think you and i will much

7
00:00:24,000 --> 00:00:28,560
more enjoy which is of course

8
00:00:26,160 --> 00:00:29,279
food i love this stuff i eat at least

9
00:00:28,560 --> 00:00:32,079
once a day

10
00:00:29,279 --> 00:00:33,760
typically with my family and over time

11
00:00:32,079 --> 00:00:35,360
i've noticed that we tend to eat food in

12
00:00:33,760 --> 00:00:37,680
slightly different ways

13
00:00:35,360 --> 00:00:39,440
for example if this is the meal what i

14
00:00:37,680 --> 00:00:41,120
like to do is to keep the best

15
00:00:39,440 --> 00:00:42,718
to last right i typically eat the

16
00:00:41,120 --> 00:00:43,280
broccoli first because i don't really

17
00:00:42,719 --> 00:00:44,879
like it

18
00:00:43,280 --> 00:00:47,200
and i like to finish strong with the

19
00:00:44,879 --> 00:00:48,239
fries my girlfriend she thinks that's a

20
00:00:47,200 --> 00:00:49,760
bit stupid

21
00:00:48,239 --> 00:00:52,399
she thinks by then the fries are all

22
00:00:49,760 --> 00:00:54,239
cold and soggy so she switches it around

23
00:00:52,399 --> 00:00:56,800
and you can see in my household we often

24
00:00:54,239 --> 00:00:59,440
have a lot of leftover broccoli

25
00:00:56,800 --> 00:01:01,120
now my sister she's much more strict she

26
00:00:59,440 --> 00:01:03,280
typically devours something in its

27
00:01:01,120 --> 00:01:04,158
entirety before moving on to her next

28
00:01:03,280 --> 00:01:05,760
victim

29
00:01:04,159 --> 00:01:07,439
it's easy to see why she decided to

30
00:01:05,760 --> 00:01:10,479
become a lawyer

31
00:01:07,439 --> 00:01:12,320
now finally my dad bless him

32
00:01:10,479 --> 00:01:13,840
his old age he simply doesn't care

33
00:01:12,320 --> 00:01:15,758
anymore he just goes around the plate

34
00:01:13,840 --> 00:01:17,360
picking it up as he goes

35
00:01:15,759 --> 00:01:19,040
now you know the old saying if you turn

36
00:01:17,360 --> 00:01:21,040
your hobby into a job

37
00:01:19,040 --> 00:01:22,560
you'll never have fun again and that's

38
00:01:21,040 --> 00:01:24,240
what i'd end up doing because

39
00:01:22,560 --> 00:01:25,759
the way i see it loading a web page

40
00:01:24,240 --> 00:01:27,600
actually looks a lot like

41
00:01:25,759 --> 00:01:29,920
eating a meal at least in the modern

42
00:01:27,600 --> 00:01:30,798
protocols in the old style hp1 you would

43
00:01:29,920 --> 00:01:33,360
open multiple

44
00:01:30,799 --> 00:01:34,880
parallel tcp connections which in my

45
00:01:33,360 --> 00:01:36,799
analogy would be the same as everyone

46
00:01:34,880 --> 00:01:37,520
having six mouths eating at the same

47
00:01:36,799 --> 00:01:40,479
time

48
00:01:37,520 --> 00:01:41,439
which is of course insanity luckily with

49
00:01:40,479 --> 00:01:44,640
http 2

50
00:01:41,439 --> 00:01:46,479
and tcp and the upcoming hp3 and quick

51
00:01:44,640 --> 00:01:49,119
we can move to a single underlying

52
00:01:46,479 --> 00:01:50,799
connection which is much more sane

53
00:01:49,119 --> 00:01:52,479
now this also means of course that we

54
00:01:50,799 --> 00:01:54,880
now have to start multiplexing our

55
00:01:52,479 --> 00:01:56,479
resources on this one connection

56
00:01:54,880 --> 00:01:58,079
sounds simple enough is actually quite

57
00:01:56,479 --> 00:01:59,920
complex in practice

58
00:01:58,079 --> 00:02:01,759
and i've designed i've found four

59
00:01:59,920 --> 00:02:03,360
problems with this in practice that i'll

60
00:02:01,759 --> 00:02:05,360
be talking about today

61
00:02:03,360 --> 00:02:07,280
and the first problem is which of the

62
00:02:05,360 --> 00:02:09,840
possible options is actually the best

63
00:02:07,280 --> 00:02:11,360
right because like with the food we have

64
00:02:09,840 --> 00:02:13,280
many different options here we can send

65
00:02:11,360 --> 00:02:15,040
everything back to back sequentially

66
00:02:13,280 --> 00:02:16,959
we can do some kind of a round robin

67
00:02:15,040 --> 00:02:18,799
scheme switching the bandwidth between

68
00:02:16,959 --> 00:02:19,680
resources we can even combine these

69
00:02:18,800 --> 00:02:21,120
things

70
00:02:19,680 --> 00:02:23,280
and for the food it didn't really matter

71
00:02:21,120 --> 00:02:24,959
it was most like personal preference

72
00:02:23,280 --> 00:02:26,959
but of course when loading a web page

73
00:02:24,959 --> 00:02:28,640
this order really matters

74
00:02:26,959 --> 00:02:30,319
in the terms of how the web page renders

75
00:02:28,640 --> 00:02:32,480
and in turn the user experience

76
00:02:30,319 --> 00:02:33,920
so which of these options is best for

77
00:02:32,480 --> 00:02:35,920
web performance

78
00:02:33,920 --> 00:02:37,200
let's try to deduce that by using a very

79
00:02:35,920 --> 00:02:38,958
simple example

80
00:02:37,200 --> 00:02:41,200
so in this webpage the two top ones are

81
00:02:38,959 --> 00:02:41,599
javascript and css we can say that they

82
00:02:41,200 --> 00:02:43,440
are

83
00:02:41,599 --> 00:02:45,359
render blocking this means that they

84
00:02:43,440 --> 00:02:47,280
have to be downloaded in full

85
00:02:45,360 --> 00:02:49,920
and executed before you can actually

86
00:02:47,280 --> 00:02:51,519
render the rest of the html page that

87
00:02:49,920 --> 00:02:52,079
means it makes sense that we fetch them

88
00:02:51,519 --> 00:02:54,800
at first

89
00:02:52,080 --> 00:02:56,000
sequentially back to back now the next

90
00:02:54,800 --> 00:02:58,400
two resources

91
00:02:56,000 --> 00:02:59,920
like you see are progressive jpegs what

92
00:02:58,400 --> 00:03:01,920
does that mean you typically have two

93
00:02:59,920 --> 00:03:04,079
ways of encoding a jpeg image

94
00:03:01,920 --> 00:03:05,760
the first one is typical it just loads

95
00:03:04,080 --> 00:03:07,440
from top to bottom

96
00:03:05,760 --> 00:03:09,359
the second one the progressive is

97
00:03:07,440 --> 00:03:11,120
actually much smarter and encodes

98
00:03:09,360 --> 00:03:12,640
the jpeg in different quality layers

99
00:03:11,120 --> 00:03:14,400
meaning that even if you have just a

100
00:03:12,640 --> 00:03:16,559
little bit of the jpeg available

101
00:03:14,400 --> 00:03:18,879
you can already render like kind of a

102
00:03:16,560 --> 00:03:20,400
low quality placeholder up front

103
00:03:18,879 --> 00:03:22,319
this means that if you know that you're

104
00:03:20,400 --> 00:03:23,040
going to have progressive jpegs it makes

105
00:03:22,319 --> 00:03:25,119
sense to

106
00:03:23,040 --> 00:03:26,640
round robin them on the stream because

107
00:03:25,120 --> 00:03:27,120
you can already start rendering all of

108
00:03:26,640 --> 00:03:29,359
them

109
00:03:27,120 --> 00:03:31,440
in some way or another on the other end

110
00:03:29,360 --> 00:03:32,959
if you don't have progressive jpegs you

111
00:03:31,440 --> 00:03:33,519
can make an argument that is better to

112
00:03:32,959 --> 00:03:35,599
load them

113
00:03:33,519 --> 00:03:36,799
sequentially right and you can say

114
00:03:35,599 --> 00:03:39,440
something very similar about

115
00:03:36,799 --> 00:03:41,280
html as well if these things are render

116
00:03:39,440 --> 00:03:42,720
blocking then why would i send the body

117
00:03:41,280 --> 00:03:45,120
down before the css

118
00:03:42,720 --> 00:03:46,080
because you can't render it anyway right

119
00:03:45,120 --> 00:03:47,920
a counter argument

120
00:03:46,080 --> 00:03:50,000
would be that even though the browser

121
00:03:47,920 --> 00:03:50,879
doesn't render it it already parses the

122
00:03:50,000 --> 00:03:53,200
html

123
00:03:50,879 --> 00:03:54,798
discovering new resources like the

124
00:03:53,200 --> 00:03:56,000
images which can then already be

125
00:03:54,799 --> 00:03:59,120
requested

126
00:03:56,000 --> 00:04:00,720
a counter counter argument is then that

127
00:03:59,120 --> 00:04:02,000
doesn't really matter because the images

128
00:04:00,720 --> 00:04:03,439
are blocked behind the css and

129
00:04:02,000 --> 00:04:05,200
javascript anyway

130
00:04:03,439 --> 00:04:07,200
and if your html ends up being quite

131
00:04:05,200 --> 00:04:08,159
large you will block everything behind

132
00:04:07,200 --> 00:04:10,560
it

133
00:04:08,159 --> 00:04:11,920
while rendering nothing to the screen so

134
00:04:10,560 --> 00:04:13,519
it's not immediately evident

135
00:04:11,920 --> 00:04:15,518
what the best approach here is and we

136
00:04:13,519 --> 00:04:16,478
can make it worse let's add a new

137
00:04:15,519 --> 00:04:18,320
resource

138
00:04:16,478 --> 00:04:20,079
an asynchronous javascript file on the

139
00:04:18,320 --> 00:04:21,839
bottom this means it's not render

140
00:04:20,079 --> 00:04:23,680
blocking but it should still be executed

141
00:04:21,839 --> 00:04:26,000
as soon as possible

142
00:04:23,680 --> 00:04:28,240
right as soon as possible javascript you

143
00:04:26,000 --> 00:04:30,639
might think okay high priority resource

144
00:04:28,240 --> 00:04:31,520
load this before the images you could

145
00:04:30,639 --> 00:04:33,600
also say

146
00:04:31,520 --> 00:04:35,120
i think the the developer put this on

147
00:04:33,600 --> 00:04:36,639
the bottom of the page for a reason

148
00:04:35,120 --> 00:04:39,199
it's not high priority i'm actually

149
00:04:36,639 --> 00:04:41,120
going to load it after the images

150
00:04:39,199 --> 00:04:42,720
and then the final cherry on top comes

151
00:04:41,120 --> 00:04:45,040
when we finally downloaded our first

152
00:04:42,720 --> 00:04:46,000
javascript file we executed and we find

153
00:04:45,040 --> 00:04:47,600
what does it do

154
00:04:46,000 --> 00:04:50,080
it actually requests a completely new

155
00:04:47,600 --> 00:04:52,479
resource that we didn't even know about

156
00:04:50,080 --> 00:04:55,120
a json file now if this is one of those

157
00:04:52,479 --> 00:04:56,080
fancy new react or view client-side

158
00:04:55,120 --> 00:04:58,160
rendered apps

159
00:04:56,080 --> 00:05:00,080
this json is probably going to contain

160
00:04:58,160 --> 00:05:00,800
the main content for your web page so

161
00:05:00,080 --> 00:05:03,120
it's going to be

162
00:05:00,800 --> 00:05:05,280
high priority on the other end if it's

163
00:05:03,120 --> 00:05:07,120
not this might just as well contain some

164
00:05:05,280 --> 00:05:09,280
random comments on your blog post

165
00:05:07,120 --> 00:05:10,639
that nobody's going to see anyway so you

166
00:05:09,280 --> 00:05:12,880
might actually leave them

167
00:05:10,639 --> 00:05:14,400
to the back right and i could keep on

168
00:05:12,880 --> 00:05:16,000
going but i think everyone by now

169
00:05:14,400 --> 00:05:17,679
understands the gist of this

170
00:05:16,000 --> 00:05:19,520
and that is a browser simply does not

171
00:05:17,680 --> 00:05:20,800
know it doesn't know how large the

172
00:05:19,520 --> 00:05:22,000
resource is going to be it's not it

173
00:05:20,800 --> 00:05:22,560
doesn't know what it's going to end up

174
00:05:22,000 --> 00:05:23,840
doing

175
00:05:22,560 --> 00:05:25,840
it doesn't know what kind of sub

176
00:05:23,840 --> 00:05:27,679
resources it's going to require

177
00:05:25,840 --> 00:05:29,599
right so the only thing the browser can

178
00:05:27,680 --> 00:05:32,240
do is yes

179
00:05:29,600 --> 00:05:34,400
from kind of course signals things like

180
00:05:32,240 --> 00:05:37,039
the type of file you have the position

181
00:05:34,400 --> 00:05:38,638
in the document and things like async

182
00:05:37,039 --> 00:05:41,039
defer preload which i'll also

183
00:05:38,639 --> 00:05:41,919
include later on so this actually

184
00:05:41,039 --> 00:05:43,360
happens is

185
00:05:41,919 --> 00:05:45,520
that the browser constructs what they

186
00:05:43,360 --> 00:05:47,280
call a heuristic a guess

187
00:05:45,520 --> 00:05:48,799
of what is going to be most important

188
00:05:47,280 --> 00:05:50,080
and we can see here

189
00:05:48,800 --> 00:05:52,240
there's a bit of difference but also

190
00:05:50,080 --> 00:05:54,240
some agreement most of the browsers

191
00:05:52,240 --> 00:05:57,120
think html is quite important

192
00:05:54,240 --> 00:05:58,880
so is javascript and css but there are

193
00:05:57,120 --> 00:06:00,319
some differences in opinion about how

194
00:05:58,880 --> 00:06:02,319
important fonts are

195
00:06:00,319 --> 00:06:04,800
and especially for the fetch example

196
00:06:02,319 --> 00:06:06,400
there's definitely some disagreements

197
00:06:04,800 --> 00:06:08,479
one very important one is the one on the

198
00:06:06,400 --> 00:06:10,239
edge on the edge there exactly

199
00:06:08,479 --> 00:06:11,919
that's the old edge browser not before

200
00:06:10,240 --> 00:06:13,840
they moved to chromium

201
00:06:11,919 --> 00:06:15,198
which actually failed to specify

202
00:06:13,840 --> 00:06:18,560
prioritization at all

203
00:06:15,199 --> 00:06:21,199
at least for http 2. right

204
00:06:18,560 --> 00:06:21,840
now that you notice can you try to

205
00:06:21,199 --> 00:06:23,600
predict

206
00:06:21,840 --> 00:06:25,919
which of these heuristics is actually

207
00:06:23,600 --> 00:06:29,039
going to work best for web pages

208
00:06:25,919 --> 00:06:30,880
right maybe you do let's try and see

209
00:06:29,039 --> 00:06:32,159
if you were correct by an example so

210
00:06:30,880 --> 00:06:33,840
here we're going to load the same web

211
00:06:32,160 --> 00:06:34,720
page on the different browsers let's see

212
00:06:33,840 --> 00:06:36,799
which one

213
00:06:34,720 --> 00:06:38,720
comes in first it's chrome then we have

214
00:06:36,800 --> 00:06:41,280
firefox close afterwards

215
00:06:38,720 --> 00:06:44,400
we get safari and now we can wait 10

216
00:06:41,280 --> 00:06:45,758
more seconds for edge to complete

217
00:06:44,400 --> 00:06:47,198
i'm going to play it again and i want

218
00:06:45,759 --> 00:06:48,080
you to focus on the differences

219
00:06:47,199 --> 00:06:50,560
especially between

220
00:06:48,080 --> 00:06:52,479
firefox and chrome and how they load

221
00:06:50,560 --> 00:06:53,919
fonts and images it's going to be very

222
00:06:52,479 --> 00:07:03,680
stark of a difference

223
00:06:53,919 --> 00:07:05,120
if you focus on fonts and images

224
00:07:03,680 --> 00:07:06,479
right so it's quite different and i

225
00:07:05,120 --> 00:07:07,840
don't know if you guys would have been

226
00:07:06,479 --> 00:07:09,039
able to predict this i would have had a

227
00:07:07,840 --> 00:07:10,799
tough time with this

228
00:07:09,039 --> 00:07:12,880
that's actually because i was kind of

229
00:07:10,800 --> 00:07:14,400
lying i was being a naughty boy

230
00:07:12,880 --> 00:07:16,000
because i actually only showed you one

231
00:07:14,400 --> 00:07:17,359
half of the equation

232
00:07:16,000 --> 00:07:18,639
because it's not just the heuristics of

233
00:07:17,360 --> 00:07:20,639
the browsers that are different it's

234
00:07:18,639 --> 00:07:21,680
also how they wish this to be enforced

235
00:07:20,639 --> 00:07:23,120
on the wire

236
00:07:21,680 --> 00:07:24,880
for example chrome really likes

237
00:07:23,120 --> 00:07:26,160
everything to be downloaded in fully

238
00:07:24,880 --> 00:07:28,080
sequential order

239
00:07:26,160 --> 00:07:30,560
that's different from for example safari

240
00:07:28,080 --> 00:07:32,479
which does a weighted round-robin scheme

241
00:07:30,560 --> 00:07:33,759
so html is more important to get more

242
00:07:32,479 --> 00:07:35,520
bandwidth but

243
00:07:33,759 --> 00:07:37,759
everything else gets at least a little

244
00:07:35,520 --> 00:07:38,639
bit of bandwidth until it's html's turn

245
00:07:37,759 --> 00:07:41,360
again

246
00:07:38,639 --> 00:07:42,479
firefox does a little bit more complex

247
00:07:41,360 --> 00:07:44,720
it tries to give

248
00:07:42,479 --> 00:07:46,159
more priority to the to the more

249
00:07:44,720 --> 00:07:47,199
important resources obviously so the

250
00:07:46,160 --> 00:07:49,360
images are

251
00:07:47,199 --> 00:07:50,879
left the two a bit later and now on the

252
00:07:49,360 --> 00:07:53,280
bottom we can see

253
00:07:50,879 --> 00:07:55,120
what happens for edge it didn't specify

254
00:07:53,280 --> 00:07:56,479
anything so it falls back to the default

255
00:07:55,120 --> 00:07:59,199
in http 2

256
00:07:56,479 --> 00:08:00,800
which is fully fair round robin behavior

257
00:07:59,199 --> 00:08:02,800
and we saw that that was clearly the

258
00:08:00,800 --> 00:08:05,280
worst of everything right

259
00:08:02,800 --> 00:08:06,240
but why was that well if you remember

260
00:08:05,280 --> 00:08:08,400
the

261
00:08:06,240 --> 00:08:10,000
orange and the green resources those

262
00:08:08,400 --> 00:08:11,039
were the javascript and css that were

263
00:08:10,000 --> 00:08:12,319
render blocking

264
00:08:11,039 --> 00:08:14,080
you can see that all the way at the end

265
00:08:12,319 --> 00:08:15,520
there we're still downloading those

266
00:08:14,080 --> 00:08:17,199
resources

267
00:08:15,520 --> 00:08:18,960
and if you remember like i said we have

268
00:08:17,199 --> 00:08:19,919
to download these in full to be able to

269
00:08:18,960 --> 00:08:21,680
execute them

270
00:08:19,919 --> 00:08:23,198
and get them usable and if you start

271
00:08:21,680 --> 00:08:24,879
round-robining between this kind of

272
00:08:23,199 --> 00:08:26,160
resource you're actually delaying when

273
00:08:24,879 --> 00:08:28,160
that moment happens

274
00:08:26,160 --> 00:08:30,080
it's actually much earlier if you send

275
00:08:28,160 --> 00:08:32,159
them sequentially

276
00:08:30,080 --> 00:08:34,718
this is of course very unnuanced modern

277
00:08:32,159 --> 00:08:36,159
browsers are much smarter than this

278
00:08:34,719 --> 00:08:37,680
they for example some of them have

279
00:08:36,159 --> 00:08:39,838
streaming script compilers which

280
00:08:37,679 --> 00:08:42,000
actually can already parse and compile

281
00:08:39,839 --> 00:08:43,440
javascript as it comes in so it's not as

282
00:08:42,000 --> 00:08:45,120
bad as you might think

283
00:08:43,440 --> 00:08:47,360
but you still need to wait for this

284
00:08:45,120 --> 00:08:48,399
final chunk to come in to be able to use

285
00:08:47,360 --> 00:08:49,920
it

286
00:08:48,399 --> 00:08:51,920
but then you might wonder why are we

287
00:08:49,920 --> 00:08:52,560
using round robin at all well there are

288
00:08:51,920 --> 00:08:55,120
some cases

289
00:08:52,560 --> 00:08:55,760
which is actually quite okay for example

290
00:08:55,120 --> 00:08:58,560
if you have

291
00:08:55,760 --> 00:09:00,000
resources of very big file differences

292
00:08:58,560 --> 00:09:01,839
in this case you have a very large

293
00:09:00,000 --> 00:09:03,600
resource that is holding up too much

294
00:09:01,839 --> 00:09:04,720
smaller resources in the sequential

295
00:09:03,600 --> 00:09:06,320
scheme

296
00:09:04,720 --> 00:09:08,000
instead if you would do this in a more

297
00:09:06,320 --> 00:09:10,000
of a

298
00:09:08,000 --> 00:09:11,040
way to drive drop-in like safari does

299
00:09:10,000 --> 00:09:12,800
you actually get

300
00:09:11,040 --> 00:09:14,640
those smaller resources downloaded quite

301
00:09:12,800 --> 00:09:16,399
a lot faster they can be used

302
00:09:14,640 --> 00:09:17,760
and it doesn't really delay the big

303
00:09:16,399 --> 00:09:21,120
resource all that much

304
00:09:17,760 --> 00:09:22,880
in the grand scheme of things right

305
00:09:21,120 --> 00:09:24,160
so the question was which of these

306
00:09:22,880 --> 00:09:26,080
browsers is best

307
00:09:24,160 --> 00:09:27,519
for most web pages we've now only looked

308
00:09:26,080 --> 00:09:28,880
at one example

309
00:09:27,519 --> 00:09:30,399
and from this you can see that maybe

310
00:09:28,880 --> 00:09:31,200
there are pages that are actually behave

311
00:09:30,399 --> 00:09:33,200
differently

312
00:09:31,200 --> 00:09:34,880
on different browsers so what we need to

313
00:09:33,200 --> 00:09:37,200
do to do good science

314
00:09:34,880 --> 00:09:38,480
let's look at many more different web

315
00:09:37,200 --> 00:09:40,240
pages of course

316
00:09:38,480 --> 00:09:42,160
now the problem is that i know of only

317
00:09:40,240 --> 00:09:43,839
about five or six studies that have

318
00:09:42,160 --> 00:09:46,240
actually done this at scale

319
00:09:43,839 --> 00:09:49,120
two of which have been my own so let's

320
00:09:46,240 --> 00:09:51,360
look at a couple of these examples

321
00:09:49,120 --> 00:09:53,120
in this graph each of the lines is a

322
00:09:51,360 --> 00:09:54,800
different prioritization mechanism a

323
00:09:53,120 --> 00:09:56,399
different browser if you will

324
00:09:54,800 --> 00:09:58,240
you see actually there's not that much

325
00:09:56,399 --> 00:10:00,240
difference between them the only one

326
00:09:58,240 --> 00:10:02,160
that's actually apart from the rest is

327
00:10:00,240 --> 00:10:03,519
indeed what i just do in the completely

328
00:10:02,160 --> 00:10:06,319
fair round robin

329
00:10:03,519 --> 00:10:08,160
and this was only on quite bad cellular

330
00:10:06,320 --> 00:10:10,399
networks if we do this on much

331
00:10:08,160 --> 00:10:11,680
faster cable networks for example the

332
00:10:10,399 --> 00:10:15,440
differences become

333
00:10:11,680 --> 00:10:17,279
even smaller now we did a second

334
00:10:15,440 --> 00:10:19,279
research looking at a bit more the

335
00:10:17,279 --> 00:10:21,040
theoretical side so taking out the

336
00:10:19,279 --> 00:10:22,560
specific network conditions a little bit

337
00:10:21,040 --> 00:10:24,880
seeing what would happen

338
00:10:22,560 --> 00:10:26,479
in an idealized situation and at least

339
00:10:24,880 --> 00:10:29,120
for our data set we can see that

340
00:10:26,480 --> 00:10:30,959
chrome is clearly the best but we can

341
00:10:29,120 --> 00:10:32,000
also see that safari in some cases will

342
00:10:30,959 --> 00:10:35,199
be better than

343
00:10:32,000 --> 00:10:36,000
firefox okay that's our data then we

344
00:10:35,200 --> 00:10:38,240
have the third

345
00:10:36,000 --> 00:10:40,000
research was from cloudflare so they're

346
00:10:38,240 --> 00:10:42,720
a big cdn and they've implemented their

347
00:10:40,000 --> 00:10:44,320
own prioritization scheme at the server

348
00:10:42,720 --> 00:10:46,160
they you could say that they kind of

349
00:10:44,320 --> 00:10:47,360
combined what chrome is doing for higher

350
00:10:46,160 --> 00:10:50,079
priority stuff

351
00:10:47,360 --> 00:10:51,440
and then kind of what firefox is doing

352
00:10:50,079 --> 00:10:52,800
for the other stuff

353
00:10:51,440 --> 00:10:54,320
and it's difficult to really draw

354
00:10:52,800 --> 00:10:56,719
conclusions from this because they don't

355
00:10:54,320 --> 00:10:58,320
really publish any papers or data sets

356
00:10:56,720 --> 00:10:59,839
but there's one very good quote on their

357
00:10:58,320 --> 00:11:01,200
blog posts on this and they say that

358
00:10:59,839 --> 00:11:03,360
this is about 50

359
00:11:01,200 --> 00:11:04,320
faster than what edge and safari is

360
00:11:03,360 --> 00:11:05,519
doing okay

361
00:11:04,320 --> 00:11:07,519
so that means that the sequential

362
00:11:05,519 --> 00:11:08,079
behavior should be better than ground

363
00:11:07,519 --> 00:11:10,640
robin

364
00:11:08,079 --> 00:11:11,279
in general so we start to see kind of a

365
00:11:10,640 --> 00:11:14,240
trend

366
00:11:11,279 --> 00:11:15,279
we all say chrome is quite good of

367
00:11:14,240 --> 00:11:18,800
course the next

368
00:11:15,279 --> 00:11:20,959
two studies completely contradict this

369
00:11:18,800 --> 00:11:22,240
so these are from google itself guys who

370
00:11:20,959 --> 00:11:24,479
make chrome right

371
00:11:22,240 --> 00:11:26,160
the first study says we compare this to

372
00:11:24,480 --> 00:11:28,560
a random scheduler like

373
00:11:26,160 --> 00:11:30,160
no logic at all and we only got faster

374
00:11:28,560 --> 00:11:33,199
results for about 31

375
00:11:30,160 --> 00:11:34,959
of the web pages then the second study

376
00:11:33,200 --> 00:11:36,720
quite recently they compared this also

377
00:11:34,959 --> 00:11:39,040
to the fair round drop-in scheme

378
00:11:36,720 --> 00:11:39,839
and while we found 50 or more

379
00:11:39,040 --> 00:11:43,680
differences

380
00:11:39,839 --> 00:11:45,360
they find only about 2.7 differences

381
00:11:43,680 --> 00:11:47,839
and it gets so much weirder because they

382
00:11:45,360 --> 00:11:49,120
also compare this to lifo which is lost

383
00:11:47,839 --> 00:11:51,360
in first out

384
00:11:49,120 --> 00:11:52,160
so the last requested resource gets sent

385
00:11:51,360 --> 00:11:54,560
to the browser

386
00:11:52,160 --> 00:11:56,079
first and they're still only getting a

387
00:11:54,560 --> 00:11:59,680
3.1 percent

388
00:11:56,079 --> 00:12:01,040
benefit right when i first saw these

389
00:11:59,680 --> 00:12:01,599
things i thought these guys have made a

390
00:12:01,040 --> 00:12:03,760
mistake

391
00:12:01,600 --> 00:12:04,800
this can be true they use bad websites

392
00:12:03,760 --> 00:12:06,560
they have bad br

393
00:12:04,800 --> 00:12:08,880
they have bad setups i don't know what

394
00:12:06,560 --> 00:12:09,680
right however i know some of these

395
00:12:08,880 --> 00:12:11,279
people

396
00:12:09,680 --> 00:12:13,920
they're very smart guys they really

397
00:12:11,279 --> 00:12:15,360
wouldn't make any basic errors like that

398
00:12:13,920 --> 00:12:16,959
so it's very difficult for me to just

399
00:12:15,360 --> 00:12:19,120
discard these things as

400
00:12:16,959 --> 00:12:20,319
nonsensical and just say my results were

401
00:12:19,120 --> 00:12:21,519
correct

402
00:12:20,320 --> 00:12:23,839
that means that if you would ask me

403
00:12:21,519 --> 00:12:28,240
today which of the browsers is

404
00:12:23,839 --> 00:12:30,079
best my answer would be i don't know

405
00:12:28,240 --> 00:12:32,000
and i don't think anybody knows i think

406
00:12:30,079 --> 00:12:34,319
many people have opinions

407
00:12:32,000 --> 00:12:36,000
but they don't really have proof on this

408
00:12:34,320 --> 00:12:38,720
right and i agree that's not a very

409
00:12:36,000 --> 00:12:40,320
satisfactory answer

410
00:12:38,720 --> 00:12:41,920
what i think is happening is that indeed

411
00:12:40,320 --> 00:12:43,279
most of these schemes are quite good for

412
00:12:41,920 --> 00:12:45,920
most web pages

413
00:12:43,279 --> 00:12:46,800
but we have a lot of huge outliers some

414
00:12:45,920 --> 00:12:49,040
pages are going to

415
00:12:46,800 --> 00:12:50,079
do really well on some of the web on

416
00:12:49,040 --> 00:12:51,599
some of the browsers

417
00:12:50,079 --> 00:12:53,199
but some are also going to do really

418
00:12:51,600 --> 00:12:55,040
really badly

419
00:12:53,200 --> 00:12:57,120
if the browser gets the heuristics wrong

420
00:12:55,040 --> 00:12:58,800
right so like most things in web

421
00:12:57,120 --> 00:13:00,480
performance it's going to depend on a

422
00:12:58,800 --> 00:13:02,959
very specific web page and you're going

423
00:13:00,480 --> 00:13:05,360
to have to tweak for your use case

424
00:13:02,959 --> 00:13:07,040
now how can you do this in practice the

425
00:13:05,360 --> 00:13:08,880
best thing to do is first verify that

426
00:13:07,040 --> 00:13:11,040
you actually have a problem

427
00:13:08,880 --> 00:13:12,800
you can use the web page test tool for

428
00:13:11,040 --> 00:13:13,519
this it will generate you this nice

429
00:13:12,800 --> 00:13:15,920
waterfall

430
00:13:13,519 --> 00:13:17,680
and since last year they started showing

431
00:13:15,920 --> 00:13:19,760
with the opaque bits there where exactly

432
00:13:17,680 --> 00:13:21,279
your hp2 data is coming in for that

433
00:13:19,760 --> 00:13:22,800
specific resource

434
00:13:21,279 --> 00:13:24,480
and then you can also collapse this

435
00:13:22,800 --> 00:13:26,079
waterfall into one

436
00:13:24,480 --> 00:13:27,600
connection view like i call it like

437
00:13:26,079 --> 00:13:28,800
beneath and that actually

438
00:13:27,600 --> 00:13:30,240
gives you a timeline like the

439
00:13:28,800 --> 00:13:31,120
visualizations that i've been using in

440
00:13:30,240 --> 00:13:32,959
this talk

441
00:13:31,120 --> 00:13:34,800
that really give you an overview of how

442
00:13:32,959 --> 00:13:36,560
things are coming in

443
00:13:34,800 --> 00:13:38,160
and if these don't match up with what

444
00:13:36,560 --> 00:13:39,199
you were expecting then maybe you have a

445
00:13:38,160 --> 00:13:40,880
problem

446
00:13:39,199 --> 00:13:42,639
there are some ways of dealing with that

447
00:13:40,880 --> 00:13:45,680
you can start switching things around

448
00:13:42,639 --> 00:13:46,399
ordering in your web page there are also

449
00:13:45,680 --> 00:13:48,160
some

450
00:13:46,399 --> 00:13:50,399
client-side features that you can use

451
00:13:48,160 --> 00:13:51,920
we've already seen async d4 is similar

452
00:13:50,399 --> 00:13:54,560
but also allows the

453
00:13:51,920 --> 00:13:56,560
javascript execution to be delayed but

454
00:13:54,560 --> 00:13:58,719
those are only for javascript

455
00:13:56,560 --> 00:14:02,959
you can then use the preload function

456
00:13:58,720 --> 00:14:05,120
which is as i explained before

457
00:14:02,959 --> 00:14:06,638
if a resource would request a

458
00:14:05,120 --> 00:14:08,560
sub-resource somewhere down the line you

459
00:14:06,639 --> 00:14:10,720
can actually say to the browser i know

460
00:14:08,560 --> 00:14:12,399
i'm going to need this in the future

461
00:14:10,720 --> 00:14:13,920
you can already start requesting this

462
00:14:12,399 --> 00:14:15,760
now you don't need to wait for example

463
00:14:13,920 --> 00:14:17,360
the fetch api call

464
00:14:15,760 --> 00:14:21,120
this also allows you to do nice things

465
00:14:17,360 --> 00:14:23,680
like loading css in a non-blocking way

466
00:14:21,120 --> 00:14:25,600
very cool has some problems there has

467
00:14:23,680 --> 00:14:27,439
been a long-standing bug in chrome

468
00:14:25,600 --> 00:14:28,880
where you can actually end up with a

469
00:14:27,440 --> 00:14:31,040
priority inversion

470
00:14:28,880 --> 00:14:33,040
where the pre-loaded resource gets sent

471
00:14:31,040 --> 00:14:36,000
first before the resource actually

472
00:14:33,040 --> 00:14:38,079
requesting the pre-loaded resource andy

473
00:14:36,000 --> 00:14:38,880
davies has a very interesting blog post

474
00:14:38,079 --> 00:14:40,560
on that

475
00:14:38,880 --> 00:14:42,880
the other problem is that this is

476
00:14:40,560 --> 00:14:44,719
currently not supported on firefox

477
00:14:42,880 --> 00:14:47,279
and it's quite unclear whether it will

478
00:14:44,720 --> 00:14:49,920
become available anytime soon

479
00:14:47,279 --> 00:14:51,040
the final feature the core feature i

480
00:14:49,920 --> 00:14:53,360
would say for this

481
00:14:51,040 --> 00:14:54,959
is what they are calling priority hints

482
00:14:53,360 --> 00:14:56,560
these will allow you to

483
00:14:54,959 --> 00:14:58,000
manipulate the heuristics on a per

484
00:14:56,560 --> 00:15:00,319
resource basis by

485
00:14:58,000 --> 00:15:01,600
saying something like importance high or

486
00:15:00,320 --> 00:15:03,120
importance low

487
00:15:01,600 --> 00:15:05,120
so the browser knows that it might have

488
00:15:03,120 --> 00:15:06,079
to tweak its guess for this specific

489
00:15:05,120 --> 00:15:07,760
resource

490
00:15:06,079 --> 00:15:10,719
you might also set this using the fetch

491
00:15:07,760 --> 00:15:11,519
api this is fantastic i'm very excited

492
00:15:10,720 --> 00:15:13,680
about this

493
00:15:11,519 --> 00:15:14,800
the problem is this is only implemented

494
00:15:13,680 --> 00:15:16,239
in chrome

495
00:15:14,800 --> 00:15:19,040
and i think this was implemented about

496
00:15:16,240 --> 00:15:20,880
three years ago they then tested it on

497
00:15:19,040 --> 00:15:23,120
several select web pages

498
00:15:20,880 --> 00:15:25,199
but they haven't yet enabled this by

499
00:15:23,120 --> 00:15:27,279
default this is still behind a flag

500
00:15:25,199 --> 00:15:29,199
and it's very difficult to know if this

501
00:15:27,279 --> 00:15:31,040
is actually going to be enabled soon

502
00:15:29,199 --> 00:15:32,959
and also if any of the other browsers

503
00:15:31,040 --> 00:15:34,880
are actually going to implement this

504
00:15:32,959 --> 00:15:36,800
but it's not looking like that at the

505
00:15:34,880 --> 00:15:39,199
moment

506
00:15:36,800 --> 00:15:40,319
so maybe you're helped with this i hope

507
00:15:39,199 --> 00:15:41,758
you are

508
00:15:40,320 --> 00:15:43,600
but if you're not there is still a big

509
00:15:41,759 --> 00:15:44,000
red pen and panic button that you can

510
00:15:43,600 --> 00:15:46,320
push

511
00:15:44,000 --> 00:15:48,240
to make everything better which is using

512
00:15:46,320 --> 00:15:50,079
server-side overrides

513
00:15:48,240 --> 00:15:52,000
okay because up until now we've been

514
00:15:50,079 --> 00:15:54,000
talking about what the browser wants

515
00:15:52,000 --> 00:15:55,759
this is what the browser wants to happen

516
00:15:54,000 --> 00:15:57,920
but it's of course the server that has

517
00:15:55,759 --> 00:15:59,920
to send the data to the browser

518
00:15:57,920 --> 00:16:01,759
so if the server thinks what you're

519
00:15:59,920 --> 00:16:03,360
telling me isn't right i know better

520
00:16:01,759 --> 00:16:04,880
than you it can of course just ignore

521
00:16:03,360 --> 00:16:07,040
what the browser is telling it

522
00:16:04,880 --> 00:16:09,040
and just stream the resources in the

523
00:16:07,040 --> 00:16:10,880
order it thinks is best

524
00:16:09,040 --> 00:16:12,800
sounds fantastic is actually very

525
00:16:10,880 --> 00:16:14,480
complex in practice

526
00:16:12,800 --> 00:16:17,279
and to understand that we actually have

527
00:16:14,480 --> 00:16:19,519
to move to our second problem of the day

528
00:16:17,279 --> 00:16:21,360
that is how do we actually communicate

529
00:16:19,519 --> 00:16:25,519
what the browser wants

530
00:16:21,360 --> 00:16:27,920
to our server right again sounds simple

531
00:16:25,519 --> 00:16:29,839
can get complex the easiest way of doing

532
00:16:27,920 --> 00:16:32,000
this the original way of doing this

533
00:16:29,839 --> 00:16:33,680
which was in the google speedy protocol

534
00:16:32,000 --> 00:16:35,680
which was the precursor to what

535
00:16:33,680 --> 00:16:37,599
eventually became http 2

536
00:16:35,680 --> 00:16:39,120
was very simple it's just that every

537
00:16:37,600 --> 00:16:41,440
resource gets one integer

538
00:16:39,120 --> 00:16:43,279
a priority level or a priority bucket

539
00:16:41,440 --> 00:16:44,800
and the server can just

540
00:16:43,279 --> 00:16:46,880
go down these buckets in order of

541
00:16:44,800 --> 00:16:49,040
priority serving the resources

542
00:16:46,880 --> 00:16:50,079
very simple to set up works quite well

543
00:16:49,040 --> 00:16:52,079
in practice

544
00:16:50,079 --> 00:16:54,160
but there are some problems it's for

545
00:16:52,079 --> 00:16:55,439
example impossible to indicate how you

546
00:16:54,160 --> 00:16:58,079
would like round robin

547
00:16:55,440 --> 00:16:59,759
to happen in this scheme if at all

548
00:16:58,079 --> 00:17:01,199
there's a second problem having to do

549
00:16:59,759 --> 00:17:02,959
with fairness

550
00:17:01,199 --> 00:17:05,280
now follow along with me because this is

551
00:17:02,959 --> 00:17:07,438
like eight years ago where they were

552
00:17:05,280 --> 00:17:08,399
very optimistic about everything using a

553
00:17:07,439 --> 00:17:10,959
single connection

554
00:17:08,400 --> 00:17:12,480
all the time so the use case was we will

555
00:17:10,959 --> 00:17:15,199
have different clients

556
00:17:12,480 --> 00:17:16,559
connecting to one cdn node and in the

557
00:17:15,199 --> 00:17:18,480
cdn node ends up

558
00:17:16,559 --> 00:17:21,280
connecting to the backend server with

559
00:17:18,480 --> 00:17:23,199
just one big persistent http 2

560
00:17:21,280 --> 00:17:24,559
connection and on this connection we're

561
00:17:23,199 --> 00:17:25,600
not just going to multiplex the

562
00:17:24,559 --> 00:17:27,359
resources

563
00:17:25,599 --> 00:17:29,199
for each client individually but across

564
00:17:27,359 --> 00:17:30,799
the clients everything is sharing one

565
00:17:29,200 --> 00:17:33,200
big connection

566
00:17:30,799 --> 00:17:34,080
if everybody plays nicely that works

567
00:17:33,200 --> 00:17:35,760
well

568
00:17:34,080 --> 00:17:37,760
but what happens if one of these clients

569
00:17:35,760 --> 00:17:39,039
decide to say hey

570
00:17:37,760 --> 00:17:41,120
everything that i'm requesting is

571
00:17:39,039 --> 00:17:42,720
actually highest priority

572
00:17:41,120 --> 00:17:44,559
if the origins as follows that you can

573
00:17:42,720 --> 00:17:46,400
get a very unfair situation

574
00:17:44,559 --> 00:17:49,039
which is great for the client

575
00:17:46,400 --> 00:17:50,559
misbehaving but quite bad for the rest

576
00:17:49,039 --> 00:17:52,240
and if you take this to the extreme why

577
00:17:50,559 --> 00:17:53,840
would other clients not also start

578
00:17:52,240 --> 00:17:55,520
saying this

579
00:17:53,840 --> 00:17:57,360
which is good you get fairness again but

580
00:17:55,520 --> 00:17:58,799
a completely useless prioritization

581
00:17:57,360 --> 00:18:00,320
mechanism

582
00:17:58,799 --> 00:18:02,160
you might be thinking this seems a bit

583
00:18:00,320 --> 00:18:03,600
of an esoteric issue it's not really

584
00:18:02,160 --> 00:18:05,120
important in practice

585
00:18:03,600 --> 00:18:07,678
but if you look at the history of all

586
00:18:05,120 --> 00:18:09,280
these things which i've included there

587
00:18:07,679 --> 00:18:11,039
you will actually feel that this is like

588
00:18:09,280 --> 00:18:12,879
one of the main issues

589
00:18:11,039 --> 00:18:15,120
why they moved from the very simple

590
00:18:12,880 --> 00:18:16,000
scheme to what eventually ended up in

591
00:18:15,120 --> 00:18:18,399
http 2

592
00:18:16,000 --> 00:18:19,440
which is quite a bit more complex

593
00:18:18,400 --> 00:18:20,880
because http 2

594
00:18:19,440 --> 00:18:23,200
actually says we're going to do

595
00:18:20,880 --> 00:18:24,799
everything in a dependency tree

596
00:18:23,200 --> 00:18:26,880
there's no longer just one integer no

597
00:18:24,799 --> 00:18:27,679
you have a specific place in a resource

598
00:18:26,880 --> 00:18:29,280
three

599
00:18:27,679 --> 00:18:30,720
and if you're alone at your level that

600
00:18:29,280 --> 00:18:32,000
means you get all the available

601
00:18:30,720 --> 00:18:33,360
bandwidth at that time

602
00:18:32,000 --> 00:18:35,520
that's the way you get sequential

603
00:18:33,360 --> 00:18:37,199
behavior but if you have a sibling

604
00:18:35,520 --> 00:18:38,799
two things at the same level then you

605
00:18:37,200 --> 00:18:40,240
end up round robin

606
00:18:38,799 --> 00:18:41,760
between them and you can actually

607
00:18:40,240 --> 00:18:43,520
specify a weight for each of the

608
00:18:41,760 --> 00:18:44,160
resources to get an unfair round

609
00:18:43,520 --> 00:18:47,120
dropping

610
00:18:44,160 --> 00:18:47,120
as you can see here

611
00:18:47,360 --> 00:18:51,039
this is good it's also quite easy to

612
00:18:49,360 --> 00:18:52,559
communicate to the server

613
00:18:51,039 --> 00:18:54,720
every time you make a request you just

614
00:18:52,559 --> 00:18:56,480
have to say hey this is the parent for

615
00:18:54,720 --> 00:18:58,080
this request maybe this is the weight

616
00:18:56,480 --> 00:19:00,240
and the server can kind of deduce what

617
00:18:58,080 --> 00:19:02,480
the browser wants from that

618
00:19:00,240 --> 00:19:03,679
it also very elegantly solves the whole

619
00:19:02,480 --> 00:19:05,840
fairness issue

620
00:19:03,679 --> 00:19:07,039
right the only thing the cdn has to do

621
00:19:05,840 --> 00:19:09,678
is simply put a new

622
00:19:07,039 --> 00:19:11,280
root note on top of everything give

623
00:19:09,679 --> 00:19:13,039
everything equal weight and we will have

624
00:19:11,280 --> 00:19:14,720
a fair bandwidth share without having to

625
00:19:13,039 --> 00:19:18,960
mess with the individual clients

626
00:19:14,720 --> 00:19:20,799
priorities this all seems very sensible

627
00:19:18,960 --> 00:19:22,000
right that's of course the reason it's

628
00:19:20,799 --> 00:19:25,520
also an http

629
00:19:22,000 --> 00:19:27,520
2 spec now did it actually pan out to

630
00:19:25,520 --> 00:19:30,960
work well in practice

631
00:19:27,520 --> 00:19:32,559
well no right as it turns out for

632
00:19:30,960 --> 00:19:34,480
example this

633
00:19:32,559 --> 00:19:36,399
i don't know if any cdn that actually

634
00:19:34,480 --> 00:19:38,480
ended up implementing this scheme

635
00:19:36,400 --> 00:19:39,840
none of the cdns are actually using this

636
00:19:38,480 --> 00:19:41,200
in practice even though it was one of

637
00:19:39,840 --> 00:19:42,559
the main reasons to switch to the

638
00:19:41,200 --> 00:19:44,320
dependency tree

639
00:19:42,559 --> 00:19:46,639
and it gets worse because not just the

640
00:19:44,320 --> 00:19:47,520
cdns if you look at what the browsers

641
00:19:46,640 --> 00:19:49,039
are doing

642
00:19:47,520 --> 00:19:51,520
they also don't really use all this

643
00:19:49,039 --> 00:19:53,200
flexibility chrome just builds a very

644
00:19:51,520 --> 00:19:55,360
long sequential list

645
00:19:53,200 --> 00:19:57,120
safari and edge just add everything as a

646
00:19:55,360 --> 00:19:59,199
sibling to the root the only difference

647
00:19:57,120 --> 00:20:02,080
there is what type of weights they

648
00:19:59,200 --> 00:20:04,720
imply the only one actually using this

649
00:20:02,080 --> 00:20:06,480
to its full extent is firefox

650
00:20:04,720 --> 00:20:08,640
but as we've seen it before they don't

651
00:20:06,480 --> 00:20:09,200
necessarily get better performance out

652
00:20:08,640 --> 00:20:12,159
of this

653
00:20:09,200 --> 00:20:14,000
on every design if you think this is bad

654
00:20:12,159 --> 00:20:15,039
let's look at the brow at the server

655
00:20:14,000 --> 00:20:17,120
side

656
00:20:15,039 --> 00:20:19,120
because even today there are servers

657
00:20:17,120 --> 00:20:21,678
that don't actually implement

658
00:20:19,120 --> 00:20:22,479
this mechanism of the ones that claim to

659
00:20:21,679 --> 00:20:24,080
do

660
00:20:22,480 --> 00:20:25,520
patrick meaning and andy davies have

661
00:20:24,080 --> 00:20:27,360
done some good tests

662
00:20:25,520 --> 00:20:29,440
they find that only a very small subset

663
00:20:27,360 --> 00:20:32,158
of them actually do this

664
00:20:29,440 --> 00:20:33,360
properly only very few actually listen

665
00:20:32,159 --> 00:20:34,720
to what the browser is saying and

666
00:20:33,360 --> 00:20:36,320
actually serve the resources in the

667
00:20:34,720 --> 00:20:38,080
correct order

668
00:20:36,320 --> 00:20:40,320
and the final nail on the coffin of this

669
00:20:38,080 --> 00:20:42,879
whole thing is that it's difficult to do

670
00:20:40,320 --> 00:20:44,639
server-side overrides as i said before

671
00:20:42,880 --> 00:20:46,640
because remember the use cases i have

672
00:20:44,640 --> 00:20:47,280
one for example image that i want to

673
00:20:46,640 --> 00:20:50,080
make higher

674
00:20:47,280 --> 00:20:51,120
lower priority how exactly am i going to

675
00:20:50,080 --> 00:20:53,039
do this

676
00:20:51,120 --> 00:20:54,879
it depends on the browser which tree

677
00:20:53,039 --> 00:20:55,760
manipulation that i will have to end up

678
00:20:54,880 --> 00:20:58,480
doing

679
00:20:55,760 --> 00:20:59,919
it's possible but i need to know details

680
00:20:58,480 --> 00:21:01,440
of how these browsers internally

681
00:20:59,919 --> 00:21:05,360
construct their trees

682
00:21:01,440 --> 00:21:07,440
and have to manipulate right

683
00:21:05,360 --> 00:21:08,399
this is actually what cloudflare does so

684
00:21:07,440 --> 00:21:09,919
cloudflare

685
00:21:08,400 --> 00:21:11,520
tries to guess which browser is

686
00:21:09,919 --> 00:21:12,559
connecting to it based on the priority

687
00:21:11,520 --> 00:21:14,320
tree it sees

688
00:21:12,559 --> 00:21:15,840
it then extracts the resources into

689
00:21:14,320 --> 00:21:18,000
their own scheme

690
00:21:15,840 --> 00:21:19,918
at least for non-edge browsers because

691
00:21:18,000 --> 00:21:21,280
they're it's not sending any priority

692
00:21:19,919 --> 00:21:23,600
information so it has to

693
00:21:21,280 --> 00:21:26,000
just use mime type to try and determine

694
00:21:23,600 --> 00:21:27,600
what is happening

695
00:21:26,000 --> 00:21:29,280
so i'm not saying it's not possible i'm

696
00:21:27,600 --> 00:21:30,559
saying you need a cloudflare level

697
00:21:29,280 --> 00:21:32,320
engineering team

698
00:21:30,559 --> 00:21:34,320
to manage this complexity right this is

699
00:21:32,320 --> 00:21:35,600
not something a normal developer can do

700
00:21:34,320 --> 00:21:38,559
it's normal that they have put this

701
00:21:35,600 --> 00:21:41,520
behind their commercial offering

702
00:21:38,559 --> 00:21:44,399
so i think we can conclude that this was

703
00:21:41,520 --> 00:21:46,879
a state of http2 prioritization

704
00:21:44,400 --> 00:21:47,520
around the time that we started on http

705
00:21:46,880 --> 00:21:50,000
3.

706
00:21:47,520 --> 00:21:51,600
so http 3 new version of the protocol

707
00:21:50,000 --> 00:21:53,679
runs on top of quick

708
00:21:51,600 --> 00:21:54,879
which is a new transport protocol next

709
00:21:53,679 --> 00:21:56,640
to tcp

710
00:21:54,880 --> 00:21:58,320
and because of quick it's very different

711
00:21:56,640 --> 00:21:58,880
we already had to change quite a lot of

712
00:21:58,320 --> 00:22:01,520
things

713
00:21:58,880 --> 00:22:02,159
to make hp3 and the discussion then was

714
00:22:01,520 --> 00:22:04,720
you know

715
00:22:02,159 --> 00:22:05,600
how about we also change the dependency

716
00:22:04,720 --> 00:22:08,240
tree setup

717
00:22:05,600 --> 00:22:09,760
why don't we use something simpler there

718
00:22:08,240 --> 00:22:10,640
was a huge amount of discussion about

719
00:22:09,760 --> 00:22:12,799
this

720
00:22:10,640 --> 00:22:13,679
literally months and months we ended up

721
00:22:12,799 --> 00:22:15,760
deciding yes

722
00:22:13,679 --> 00:22:17,440
we're going to remove the tree setup for

723
00:22:15,760 --> 00:22:18,879
hp3 and actually switch back to

724
00:22:17,440 --> 00:22:20,640
something simpler

725
00:22:18,880 --> 00:22:23,120
now this is only the current proposal

726
00:22:20,640 --> 00:22:24,640
this is not the final spec this is just

727
00:22:23,120 --> 00:22:26,799
the way we're thinking about it right

728
00:22:24,640 --> 00:22:28,080
now the idea is to go back to

729
00:22:26,799 --> 00:22:30,799
something that looks a lot like what

730
00:22:28,080 --> 00:22:32,240
speedy did but with some key adjustments

731
00:22:30,799 --> 00:22:33,520
the first thing is that you can see that

732
00:22:32,240 --> 00:22:35,600
there are a couple of these levels that

733
00:22:33,520 --> 00:22:37,360
are now reserved for the server

734
00:22:35,600 --> 00:22:38,639
this means that the pat it doesn't

735
00:22:37,360 --> 00:22:40,080
really matter what the browser ends up

736
00:22:38,640 --> 00:22:41,600
doing with this the server is always

737
00:22:40,080 --> 00:22:42,480
going to be able to do the server-side

738
00:22:41,600 --> 00:22:45,360
overrides

739
00:22:42,480 --> 00:22:46,799
that we couldn't really do in http 2.

740
00:22:45,360 --> 00:22:48,959
the second new feature is

741
00:22:46,799 --> 00:22:50,960
that each resource can now get an

742
00:22:48,960 --> 00:22:52,720
incremental flag

743
00:22:50,960 --> 00:22:54,480
indicating if it should be round-robin

744
00:22:52,720 --> 00:22:56,720
on the wire or not

745
00:22:54,480 --> 00:22:58,720
right this is the main part of the spec

746
00:22:56,720 --> 00:23:02,320
there's a second aspect of that

747
00:22:58,720 --> 00:23:05,120
is that we're proposing to communicate

748
00:23:02,320 --> 00:23:07,280
this using a normal http header

749
00:23:05,120 --> 00:23:09,280
in hp2 everything was communicated using

750
00:23:07,280 --> 00:23:11,039
hp2's binary framing layer

751
00:23:09,280 --> 00:23:12,799
so it really wasn't all that visible it

752
00:23:11,039 --> 00:23:14,640
was difficult to debug you didn't really

753
00:23:12,799 --> 00:23:16,400
see it in normal dev tools

754
00:23:14,640 --> 00:23:18,159
so the idea is here if we just use a

755
00:23:16,400 --> 00:23:20,240
normal header it's going to be much

756
00:23:18,159 --> 00:23:21,840
easier to view much easier to debug

757
00:23:20,240 --> 00:23:24,240
maybe we can even expose this to

758
00:23:21,840 --> 00:23:26,959
javascript and let users

759
00:23:24,240 --> 00:23:28,880
manipulate this themselves i personally

760
00:23:26,960 --> 00:23:31,200
think this is a very good idea i'm very

761
00:23:28,880 --> 00:23:34,320
excited about this

762
00:23:31,200 --> 00:23:36,880
but like i said there are many open

763
00:23:34,320 --> 00:23:38,799
questions for this concrete proposal

764
00:23:36,880 --> 00:23:40,320
for example let's say that we have six

765
00:23:38,799 --> 00:23:43,200
different resources

766
00:23:40,320 --> 00:23:43,678
all of the same priority level but one

767
00:23:43,200 --> 00:23:45,200
of them

768
00:23:43,679 --> 00:23:46,960
needs to be sent sequentially and the

769
00:23:45,200 --> 00:23:48,799
rest incrementally

770
00:23:46,960 --> 00:23:50,159
how do you actually as a server put this

771
00:23:48,799 --> 00:23:50,960
on the wire there are many different

772
00:23:50,159 --> 00:23:52,320
ways

773
00:23:50,960 --> 00:23:54,240
you could say i'm first going to send

774
00:23:52,320 --> 00:23:55,678
the first two and then i'm going to

775
00:23:54,240 --> 00:23:56,320
switch to the sequential one and then

776
00:23:55,679 --> 00:23:57,679
the rest

777
00:23:56,320 --> 00:23:59,600
you could say the sequential one is

778
00:23:57,679 --> 00:24:01,200
probably going to be more important

779
00:23:59,600 --> 00:24:01,760
right it's probably a blocking resource

780
00:24:01,200 --> 00:24:03,600
so

781
00:24:01,760 --> 00:24:04,960
send that one first you could say i'm

782
00:24:03,600 --> 00:24:06,240
going to send a little bit for all of

783
00:24:04,960 --> 00:24:07,679
the incremental ones

784
00:24:06,240 --> 00:24:09,200
so that they can start rendering or

785
00:24:07,679 --> 00:24:10,799
processing or whatever then the

786
00:24:09,200 --> 00:24:12,240
sequential and then the rest

787
00:24:10,799 --> 00:24:14,720
and you could keep going it's not really

788
00:24:12,240 --> 00:24:16,880
clear what the best solution is

789
00:24:14,720 --> 00:24:18,720
then you also no longer really are able

790
00:24:16,880 --> 00:24:19,679
to do what safari wants you to do with

791
00:24:18,720 --> 00:24:21,919
the

792
00:24:19,679 --> 00:24:23,679
weighted round robin the question is do

793
00:24:21,919 --> 00:24:24,960
we really still need this in a simpler

794
00:24:23,679 --> 00:24:26,400
scheme or not

795
00:24:24,960 --> 00:24:28,240
this is just one of the questions there

796
00:24:26,400 --> 00:24:29,600
are many more

797
00:24:28,240 --> 00:24:31,600
there are many people that don't like

798
00:24:29,600 --> 00:24:32,799
the idea of using a normal http header

799
00:24:31,600 --> 00:24:34,639
for this

800
00:24:32,799 --> 00:24:36,158
and even the ones that do are not keen

801
00:24:34,640 --> 00:24:38,159
on the idea of exposing this to the

802
00:24:36,159 --> 00:24:40,400
javascript fetch api

803
00:24:38,159 --> 00:24:42,000
without any special things there's also

804
00:24:40,400 --> 00:24:43,120
still a fairness issue to talk about

805
00:24:42,000 --> 00:24:45,600
right

806
00:24:43,120 --> 00:24:46,799
so this is not literally what is going

807
00:24:45,600 --> 00:24:49,199
to be in http 3

808
00:24:46,799 --> 00:24:50,879
but i do think it's going to be a small

809
00:24:49,200 --> 00:24:52,640
evolution of this proposal still

810
00:24:50,880 --> 00:24:54,000
something much simpler than we had in

811
00:24:52,640 --> 00:24:56,159
http 2

812
00:24:54,000 --> 00:24:58,000
easier to comprehend easier to implement

813
00:24:56,159 --> 00:25:00,240
hopefully less bugs

814
00:24:58,000 --> 00:25:01,360
which is great this means we're done

815
00:25:00,240 --> 00:25:04,559
right

816
00:25:01,360 --> 00:25:07,760
end of talk thank you however

817
00:25:04,559 --> 00:25:08,080
there's of course more right we've only

818
00:25:07,760 --> 00:25:10,879
been

819
00:25:08,080 --> 00:25:12,000
looking at the http layer for now but

820
00:25:10,880 --> 00:25:13,279
that's not the only thing that

821
00:25:12,000 --> 00:25:14,880
influences this

822
00:25:13,279 --> 00:25:18,080
of course because we are running on a

823
00:25:14,880 --> 00:25:18,080
transport layer as well

824
00:25:18,720 --> 00:25:21,919
for example there's a very nice issue

825
00:25:20,480 --> 00:25:24,159
here this uh

826
00:25:21,919 --> 00:25:25,919
was talked about by patrick meaning in

827
00:25:24,159 --> 00:25:28,480
about a two hour talk

828
00:25:25,919 --> 00:25:29,600
almost just on this issue but the thing

829
00:25:28,480 --> 00:25:31,840
is is if

830
00:25:29,600 --> 00:25:33,439
you have tcp buffers that are too large

831
00:25:31,840 --> 00:25:35,120
you can actually end up with a priority

832
00:25:33,440 --> 00:25:36,720
inversion situation again

833
00:25:35,120 --> 00:25:38,559
where you fill these buffers with low

834
00:25:36,720 --> 00:25:40,159
priority cash resources

835
00:25:38,559 --> 00:25:42,240
and then there is no more room for the

836
00:25:40,159 --> 00:25:44,400
high priority stuff that you get later

837
00:25:42,240 --> 00:25:45,520
and so things get delayed again this

838
00:25:44,400 --> 00:25:47,120
means that even if you have a

839
00:25:45,520 --> 00:25:49,760
well-behaving client

840
00:25:47,120 --> 00:25:50,959
and a well-implemented back-end server

841
00:25:49,760 --> 00:25:52,960
you can still have problems with

842
00:25:50,960 --> 00:25:55,279
prioritization

843
00:25:52,960 --> 00:25:56,880
there's another problem with tcp it's

844
00:25:55,279 --> 00:25:59,840
called head of line blocking

845
00:25:56,880 --> 00:26:00,799
this is because on http we know that we

846
00:25:59,840 --> 00:26:03,678
have different

847
00:26:00,799 --> 00:26:04,559
files on the same connection tcp does

848
00:26:03,679 --> 00:26:06,720
not tcp

849
00:26:04,559 --> 00:26:08,799
everything is a single opaque byte

850
00:26:06,720 --> 00:26:10,480
stream this means that if we have even a

851
00:26:08,799 --> 00:26:12,879
single packet loss in there

852
00:26:10,480 --> 00:26:14,400
tcp has to wait back up everything

853
00:26:12,880 --> 00:26:15,360
waiting for that single packet to be

854
00:26:14,400 --> 00:26:17,520
retransmitted

855
00:26:15,360 --> 00:26:18,959
until it can deliver packets three and

856
00:26:17,520 --> 00:26:20,799
four to the top layer

857
00:26:18,960 --> 00:26:22,080
even though they are for unrelated

858
00:26:20,799 --> 00:26:24,400
resources

859
00:26:22,080 --> 00:26:25,520
this is actually the core thing that

860
00:26:24,400 --> 00:26:28,640
separates quick

861
00:26:25,520 --> 00:26:30,320
from tcp because quick does know that

862
00:26:28,640 --> 00:26:31,120
there are different streams on the same

863
00:26:30,320 --> 00:26:32,799
connection

864
00:26:31,120 --> 00:26:34,320
it doesn't know it's an html or a

865
00:26:32,799 --> 00:26:36,320
javascript file it just knows these

866
00:26:34,320 --> 00:26:37,760
things are completely independent

867
00:26:36,320 --> 00:26:40,158
this means that if quick suffers a

868
00:26:37,760 --> 00:26:41,039
single packet loss it can actually just

869
00:26:40,159 --> 00:26:42,720
bubble up

870
00:26:41,039 --> 00:26:44,960
packets three and four to the browser

871
00:26:42,720 --> 00:26:47,360
only waiting for the one packet

872
00:26:44,960 --> 00:26:48,880
to be retransmitted this is why they

873
00:26:47,360 --> 00:26:51,760
sometimes say that quick

874
00:26:48,880 --> 00:26:52,000
removes tcp's head of line blocking and

875
00:26:51,760 --> 00:26:55,039
so

876
00:26:52,000 --> 00:26:56,880
it's better for performance right and

877
00:26:55,039 --> 00:26:58,240
i kind of agree but there's a lot of

878
00:26:56,880 --> 00:27:00,640
nuance there

879
00:26:58,240 --> 00:27:02,559
because if you look at this more closely

880
00:27:00,640 --> 00:27:04,159
this only happens if you are around

881
00:27:02,559 --> 00:27:05,600
robbing your resources

882
00:27:04,159 --> 00:27:07,360
right you need to have multiple things

883
00:27:05,600 --> 00:27:09,840
in flight at the same time

884
00:27:07,360 --> 00:27:11,678
if you're sending things sequentially

885
00:27:09,840 --> 00:27:13,520
this benefit goes away because of course

886
00:27:11,679 --> 00:27:15,279
you can't reorder things within the same

887
00:27:13,520 --> 00:27:16,799
file and you end up with a lot with

888
00:27:15,279 --> 00:27:19,200
something that looks a lot more like the

889
00:27:16,799 --> 00:27:22,480
normal tcp behavior

890
00:27:19,200 --> 00:27:24,080
right so this could be

891
00:27:22,480 --> 00:27:25,360
could work in practice could not the

892
00:27:24,080 --> 00:27:27,120
most interesting thing is we've been

893
00:27:25,360 --> 00:27:30,158
saying that the sequential behavior is

894
00:27:27,120 --> 00:27:32,080
probably better for webpage performance

895
00:27:30,159 --> 00:27:33,600
but on lc networks it might make more

896
00:27:32,080 --> 00:27:35,120
sense to switch to something at least a

897
00:27:33,600 --> 00:27:38,158
little bit round robiny

898
00:27:35,120 --> 00:27:39,760
to get around this behavior right

899
00:27:38,159 --> 00:27:41,840
so quick brings a whole lot of new

900
00:27:39,760 --> 00:27:44,559
different challenges that reflects up to

901
00:27:41,840 --> 00:27:46,799
what we want to happen in the http layer

902
00:27:44,559 --> 00:27:48,559
this is just one example there are many

903
00:27:46,799 --> 00:27:50,158
many many more

904
00:27:48,559 --> 00:27:52,879
chance has it i just finished a new

905
00:27:50,159 --> 00:27:54,320
paper on this please go and read it

906
00:27:52,880 --> 00:27:56,799
or come talk to me afterwards if you

907
00:27:54,320 --> 00:27:58,320
want to know more of these details

908
00:27:56,799 --> 00:28:00,960
because it's about time for me to start

909
00:27:58,320 --> 00:28:03,840
wrapping up with the fourth and probably

910
00:28:00,960 --> 00:28:03,840
most important problem

911
00:28:05,520 --> 00:28:08,559
and i say here there is no problem why

912
00:28:07,520 --> 00:28:11,840
am i saying that

913
00:28:08,559 --> 00:28:13,678
because maybe you've noticed

914
00:28:11,840 --> 00:28:15,600
but i've actually given you some very

915
00:28:13,679 --> 00:28:18,320
contradictory information

916
00:28:15,600 --> 00:28:20,320
on one end i've said you know edge is 50

917
00:28:18,320 --> 00:28:22,480
slower than what chrome is doing

918
00:28:20,320 --> 00:28:23,439
and all of the http server deployments

919
00:28:22,480 --> 00:28:25,360
are

920
00:28:23,440 --> 00:28:27,200
enormously broken they do prioritization

921
00:28:25,360 --> 00:28:27,840
completely wrong right we have a big

922
00:28:27,200 --> 00:28:29,840
problem

923
00:28:27,840 --> 00:28:31,039
on the other end you have the source

924
00:28:29,840 --> 00:28:32,959
from google saying

925
00:28:31,039 --> 00:28:34,640
it doesn't really matter it's only a

926
00:28:32,960 --> 00:28:36,799
three percent difference who cares

927
00:28:34,640 --> 00:28:38,399
right and you have other things that

928
00:28:36,799 --> 00:28:39,760
i've noticed over the years

929
00:28:38,399 --> 00:28:42,000
i haven't actually seen a lot of

930
00:28:39,760 --> 00:28:44,399
developers complaining about

931
00:28:42,000 --> 00:28:46,159
for example i've enabled http 2 and

932
00:28:44,399 --> 00:28:48,559
suddenly my webpage is

933
00:28:46,159 --> 00:28:49,840
so much slower on edge i haven't

934
00:28:48,559 --> 00:28:52,320
actually seen a lot of these

935
00:28:49,840 --> 00:28:54,240
posts right so it seems that people are

936
00:28:52,320 --> 00:28:55,200
not actually noticing these things a lot

937
00:28:54,240 --> 00:28:57,840
in practice

938
00:28:55,200 --> 00:28:58,960
and so this is completely opposite

939
00:28:57,840 --> 00:29:00,559
viewpoints

940
00:28:58,960 --> 00:29:02,720
and only one of them can actually be

941
00:29:00,559 --> 00:29:04,080
right and if it's the right one that is

942
00:29:02,720 --> 00:29:05,760
right that means that i've wasted two

943
00:29:04,080 --> 00:29:08,480
years of my life

944
00:29:05,760 --> 00:29:10,399
researching a non-issue but if the left

945
00:29:08,480 --> 00:29:11,520
one if i am right and if cloudflare is

946
00:29:10,399 --> 00:29:13,918
right

947
00:29:11,520 --> 00:29:15,600
this actually means that http 2 has been

948
00:29:13,919 --> 00:29:18,000
broken for a long time

949
00:29:15,600 --> 00:29:19,439
our websites are quite slow and nobody

950
00:29:18,000 --> 00:29:21,360
has noticed

951
00:29:19,440 --> 00:29:22,559
that's very difficult thing to sell to a

952
00:29:21,360 --> 00:29:26,399
room full of web developer

953
00:29:22,559 --> 00:29:28,240
web performance experts right so

954
00:29:26,399 --> 00:29:31,039
i've talked so long and hard about how

955
00:29:28,240 --> 00:29:32,799
to uh combine these two things and

956
00:29:31,039 --> 00:29:34,480
i'm still not there yet but i do have

957
00:29:32,799 --> 00:29:36,480
some conjectures some

958
00:29:34,480 --> 00:29:39,120
things that i think are happening

959
00:29:36,480 --> 00:29:40,720
personally i think performance matters

960
00:29:39,120 --> 00:29:44,080
well of course performance matters i

961
00:29:40,720 --> 00:29:44,080
think prioritization matters

962
00:29:44,559 --> 00:29:49,039
but for most web pages because not

963
00:29:47,679 --> 00:29:50,640
everything is still using the one

964
00:29:49,039 --> 00:29:52,960
connection there's a lot more

965
00:29:50,640 --> 00:29:55,039
other aspects coming into play here is

966
00:29:52,960 --> 00:29:56,640
that you won't really see it even if the

967
00:29:55,039 --> 00:29:58,960
prioritization goes wrong you'll

968
00:29:56,640 --> 00:30:01,200
primarily see it on very complex pages

969
00:29:58,960 --> 00:30:03,200
and if you test on slow networks and

970
00:30:01,200 --> 00:30:06,080
sadly a lot of us still are not really

971
00:30:03,200 --> 00:30:07,600
testing on slow networks let's be honest

972
00:30:06,080 --> 00:30:09,439
the second thing is that even if you

973
00:30:07,600 --> 00:30:10,639
have a problem at the network it's often

974
00:30:09,440 --> 00:30:12,159
not a bottleneck

975
00:30:10,640 --> 00:30:14,240
if you're shipping five megabytes of

976
00:30:12,159 --> 00:30:17,600
javascript to your mobile device

977
00:30:14,240 --> 00:30:19,039
it's probably going to be stopped at the

978
00:30:17,600 --> 00:30:20,639
main thread processing

979
00:30:19,039 --> 00:30:23,520
and you might not even have a problem at

980
00:30:20,640 --> 00:30:24,880
the network even if it's sub-optimal

981
00:30:23,520 --> 00:30:26,559
it could also be that if something

982
00:30:24,880 --> 00:30:28,000
breaks in this prioritization stuff it

983
00:30:26,559 --> 00:30:29,760
actually breaks very hard it's very

984
00:30:28,000 --> 00:30:30,240
obvious and people fix it quickly

985
00:30:29,760 --> 00:30:33,200
without

986
00:30:30,240 --> 00:30:34,880
thinking too much about it or and i

987
00:30:33,200 --> 00:30:36,960
think this might be

988
00:30:34,880 --> 00:30:37,919
more likely is that people have seen

989
00:30:36,960 --> 00:30:40,000
problems

990
00:30:37,919 --> 00:30:41,279
but they have been unable to match this

991
00:30:40,000 --> 00:30:42,640
with the core

992
00:30:41,279 --> 00:30:44,880
reason and that is the the

993
00:30:42,640 --> 00:30:46,399
prioritization mismatch that's happening

994
00:30:44,880 --> 00:30:48,559
because people don't really know enough

995
00:30:46,399 --> 00:30:49,760
about how the system works internally

996
00:30:48,559 --> 00:30:52,320
that's one of the reasons i wanted to do

997
00:30:49,760 --> 00:30:54,399
this talk to help get maybe a little bit

998
00:30:52,320 --> 00:30:55,600
more of insight into this topic out into

999
00:30:54,399 --> 00:30:58,158
the world

1000
00:30:55,600 --> 00:30:59,439
one of the main reasons i think is

1001
00:30:58,159 --> 00:31:01,360
because we have a very

1002
00:30:59,440 --> 00:31:03,840
unhealthy browser ecosystem at the

1003
00:31:01,360 --> 00:31:04,879
moment so many different people are just

1004
00:31:03,840 --> 00:31:06,959
using chrome

1005
00:31:04,880 --> 00:31:08,480
as we've seen chrome tends to do quite

1006
00:31:06,960 --> 00:31:10,000
well in our tests i believe it's

1007
00:31:08,480 --> 00:31:11,679
it's doing performance it's doing

1008
00:31:10,000 --> 00:31:12,559
prioritization the best of all the

1009
00:31:11,679 --> 00:31:14,080
browsers

1010
00:31:12,559 --> 00:31:15,519
so it might be that we're just not

1011
00:31:14,080 --> 00:31:17,279
noticing this because everybody is

1012
00:31:15,519 --> 00:31:20,720
focusing on chrome

1013
00:31:17,279 --> 00:31:22,399
right so we're not there yet and i think

1014
00:31:20,720 --> 00:31:22,960
that we still have some issues to

1015
00:31:22,399 --> 00:31:24,479
discover

1016
00:31:22,960 --> 00:31:26,880
with regards to prioritization what is

1017
00:31:24,480 --> 00:31:29,039
actually going wrong at scale

1018
00:31:26,880 --> 00:31:30,240
what i do think and i hope is that quick

1019
00:31:29,039 --> 00:31:32,000
will actually help us with this

1020
00:31:30,240 --> 00:31:33,760
i think quick will unearth some of these

1021
00:31:32,000 --> 00:31:34,559
problems and introduce some new issues

1022
00:31:33,760 --> 00:31:36,480
because it's

1023
00:31:34,559 --> 00:31:38,240
the way it works so that's going to help

1024
00:31:36,480 --> 00:31:40,399
us make some progress on this

1025
00:31:38,240 --> 00:31:42,240
i also think that what we're going to

1026
00:31:40,399 --> 00:31:43,600
end up with with for hp3

1027
00:31:42,240 --> 00:31:44,799
that isn't going to solve all our

1028
00:31:43,600 --> 00:31:46,399
problems there are still going to be

1029
00:31:44,799 --> 00:31:48,080
edge cases of course

1030
00:31:46,399 --> 00:31:50,080
but i hope it's going to be simple

1031
00:31:48,080 --> 00:31:51,760
enough that we can understand this

1032
00:31:50,080 --> 00:31:53,840
i also think that we'll able we'll be

1033
00:31:51,760 --> 00:31:56,640
able to backboard this into

1034
00:31:53,840 --> 00:31:58,320
http 2 so that we can solve some of the

1035
00:31:56,640 --> 00:32:00,000
existing issues there

1036
00:31:58,320 --> 00:32:01,918
and if that's true it's if it all

1037
00:32:00,000 --> 00:32:02,720
becomes much more easier to understand

1038
00:32:01,919 --> 00:32:04,960
and debug

1039
00:32:02,720 --> 00:32:07,279
that means that if i maybe get to come

1040
00:32:04,960 --> 00:32:09,440
back next year and do a new talk on this

1041
00:32:07,279 --> 00:32:11,519
i can summarize all of this in just 10

1042
00:32:09,440 --> 00:32:14,399
minutes because it's so simple

1043
00:32:11,519 --> 00:32:16,159
and i can spend the rest of my talk

1044
00:32:14,399 --> 00:32:17,199
talking about something that i actually

1045
00:32:16,159 --> 00:32:29,840
care about

1046
00:32:17,200 --> 00:32:29,840
which is belgian waffles thank you

1047
00:32:38,000 --> 00:32:41,120
i i think we have two minutes for

1048
00:32:40,000 --> 00:32:42,559
questions

1049
00:32:41,120 --> 00:32:44,879
five minutes okay five minutes for

1050
00:32:42,559 --> 00:32:44,879
questions

1051
00:32:46,640 --> 00:32:57,840
no questions oh guys

1052
00:32:51,039 --> 00:32:57,840
i don't see you shout out there

1053
00:33:01,950 --> 00:33:05,039
[Music]

1054
00:33:07,919 --> 00:33:11,600
yeah so so the question is what what are

1055
00:33:10,000 --> 00:33:13,200
the impacts what are the expected

1056
00:33:11,600 --> 00:33:16,399
changes you need to do for to move from

1057
00:33:13,200 --> 00:33:16,399
hp2 to hp3

1058
00:33:20,640 --> 00:33:24,080
yeah so the most differences here on the

1059
00:33:23,120 --> 00:33:25,279
quick layer

1060
00:33:24,080 --> 00:33:26,879
quick changes a lot so you're going to

1061
00:33:25,279 --> 00:33:28,640
have a lot of problems with your devops

1062
00:33:26,880 --> 00:33:30,559
setup and your firewalls and

1063
00:33:28,640 --> 00:33:32,559
opening up ports and that kind of stuff

1064
00:33:30,559 --> 00:33:33,760
but the http layer not much actually

1065
00:33:32,559 --> 00:33:35,840
really changes

1066
00:33:33,760 --> 00:33:37,120
except of course for the prioritization

1067
00:33:35,840 --> 00:33:38,799
stuff but

1068
00:33:37,120 --> 00:33:40,639
normally you as a developer shouldn't

1069
00:33:38,799 --> 00:33:42,080
have to care about that too much

1070
00:33:40,640 --> 00:33:44,240
it's still going to be the browsers that

1071
00:33:42,080 --> 00:33:44,960
translate the heuristics over the new

1072
00:33:44,240 --> 00:33:47,360
thing

1073
00:33:44,960 --> 00:33:48,720
so the move to hp3 should be fairly

1074
00:33:47,360 --> 00:33:52,639
simple if you have a good

1075
00:33:48,720 --> 00:33:55,279
devops team in place

1076
00:33:52,640 --> 00:33:55,279
more questions

1077
00:33:56,640 --> 00:34:02,720
with the arrival of the uh http3

1078
00:33:59,919 --> 00:34:04,720
yeah really experimental classification

1079
00:34:02,720 --> 00:34:06,880
of what is critical

1080
00:34:04,720 --> 00:34:06,880
are

1081
00:34:09,760 --> 00:34:15,200
okay so the the question is with http 3

1082
00:34:13,599 --> 00:34:17,760
will the browsers end up changing their

1083
00:34:15,199 --> 00:34:19,439
heuristics

1084
00:34:17,760 --> 00:34:21,599
that's kind of what i tried to say with

1085
00:34:19,440 --> 00:34:23,359
the whole head-of-line blocking issue

1086
00:34:21,599 --> 00:34:24,879
because quick allows new things to

1087
00:34:23,359 --> 00:34:25,759
happen it could be that the browsers are

1088
00:34:24,879 --> 00:34:28,399
now saying

1089
00:34:25,760 --> 00:34:29,760
we have something that works well on tcp

1090
00:34:28,399 --> 00:34:32,000
but we find something new that works

1091
00:34:29,760 --> 00:34:34,159
better on quick and so they might try to

1092
00:34:32,000 --> 00:34:36,800
change up some of the things depending

1093
00:34:34,159 --> 00:34:39,280
on what find uh works well in practice

1094
00:34:36,800 --> 00:34:40,480
okay so i think they're gonna stay

1095
00:34:39,280 --> 00:34:42,159
largely the same

1096
00:34:40,480 --> 00:34:44,000
but i hope they're gonna diverge at some

1097
00:34:42,159 --> 00:34:44,800
point because quick allows you some

1098
00:34:44,000 --> 00:34:49,359
really cool

1099
00:34:44,800 --> 00:34:50,670
internal optimizations for this as well

1100
00:34:49,359 --> 00:34:53,929
anyone else

1101
00:34:50,670 --> 00:34:53,929
[Music]

1102
00:34:54,800 --> 00:35:03,839
thank you

1103
00:35:08,839 --> 00:35:11,839
thanks

