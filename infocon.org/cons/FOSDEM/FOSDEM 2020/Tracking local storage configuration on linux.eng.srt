1
00:00:05,680 --> 00:00:10,399
our next speaker

2
00:00:06,799 --> 00:00:12,320
is alastair khan and he is going to talk

3
00:00:10,400 --> 00:00:13,360
about tracking local storage

4
00:00:12,320 --> 00:00:17,599
configuration

5
00:00:13,360 --> 00:00:17,599
on linux please welcome

6
00:00:17,620 --> 00:00:25,760
[Applause]

7
00:00:22,400 --> 00:00:29,038
okay i'll go fairly quickly um because

8
00:00:25,760 --> 00:00:32,160
we're running behind right so straight

9
00:00:29,039 --> 00:00:35,760
straight in um

10
00:00:32,159 --> 00:00:41,440
so um is this yes this is working

11
00:00:35,760 --> 00:00:41,440
right so common problems

12
00:00:42,840 --> 00:00:45,840
it's

13
00:00:46,079 --> 00:00:50,079
so my system has got problem with its

14
00:00:48,000 --> 00:00:51,360
storage devices is this

15
00:00:50,079 --> 00:00:53,520
shout if it's not coming through it

16
00:00:51,360 --> 00:00:54,559
doesn't sound right here um my system's

17
00:00:53,520 --> 00:00:56,719
got some problem

18
00:00:54,559 --> 00:00:58,160
it triggered thousands of log messages

19
00:00:56,719 --> 00:01:00,079
from different layers of the storage

20
00:00:58,160 --> 00:01:02,718
stack and applications on top so

21
00:01:00,079 --> 00:01:04,640
we've got this problem on linux that we

22
00:01:02,719 --> 00:01:06,240
get lots and lots of error messages

23
00:01:04,640 --> 00:01:08,159
from different layers and they're all

24
00:01:06,240 --> 00:01:11,759
incompatible and very difficult

25
00:01:08,159 --> 00:01:14,799
to automatically process

26
00:01:11,760 --> 00:01:18,479
so the the challenge is

27
00:01:14,799 --> 00:01:19,439
to recognize all the messages that we're

28
00:01:18,479 --> 00:01:23,439
getting

29
00:01:19,439 --> 00:01:26,080
and correlate them and try to work out

30
00:01:23,439 --> 00:01:26,960
what the original causes that has

31
00:01:26,080 --> 00:01:30,479
triggered

32
00:01:26,960 --> 00:01:34,559
all these thousands of messages

33
00:01:30,479 --> 00:01:38,560
and in the storage area in particular

34
00:01:34,560 --> 00:01:40,640
we have a lot of problems when we reboot

35
00:01:38,560 --> 00:01:43,600
devices get different major and minor

36
00:01:40,640 --> 00:01:47,920
numbers but it might be the same disc

37
00:01:43,600 --> 00:01:50,240
so a disc might be having problems

38
00:01:47,920 --> 00:01:51,200
but in the log messages it appears to be

39
00:01:50,240 --> 00:01:54,079
a different disc

40
00:01:51,200 --> 00:01:54,720
every time after you've booted you get

41
00:01:54,079 --> 00:01:57,279
different

42
00:01:54,720 --> 00:01:58,479
numbers each time and similarly a lot of

43
00:01:57,280 --> 00:02:02,479
the information

44
00:01:58,479 --> 00:02:05,840
in dev and sis is transient

45
00:02:02,479 --> 00:02:08,800
and connected with that uh

46
00:02:05,840 --> 00:02:11,039
it can change and we're not recording

47
00:02:08,800 --> 00:02:14,000
those changes properly

48
00:02:11,038 --> 00:02:14,799
so we're not keeping records and the

49
00:02:14,000 --> 00:02:17,520
basic

50
00:02:14,800 --> 00:02:19,760
challenge is can we keep better records

51
00:02:17,520 --> 00:02:21,599
of what's happening in terms of storage

52
00:02:19,760 --> 00:02:25,359
and having got those records can we

53
00:02:21,599 --> 00:02:27,679
analyze things automatically any better

54
00:02:25,360 --> 00:02:30,480
so the first thing we need is a

55
00:02:27,680 --> 00:02:32,959
persistent identifier for each device

56
00:02:30,480 --> 00:02:35,359
now this was solved a few years back

57
00:02:32,959 --> 00:02:37,440
when udev came along and udev rules were

58
00:02:35,360 --> 00:02:40,640
being invented

59
00:02:37,440 --> 00:02:43,840
and you see in the dev disc directory

60
00:02:40,640 --> 00:02:47,760
lots of classifications by ids

61
00:02:43,840 --> 00:02:51,040
labels paths uuids and if you go there

62
00:02:47,760 --> 00:02:54,319
you can find your device and

63
00:02:51,040 --> 00:02:54,560
map it back to the major minor number

64
00:02:54,319 --> 00:02:57,359
and

65
00:02:54,560 --> 00:02:58,319
anything else relating to it even across

66
00:02:57,360 --> 00:03:01,519
boots

67
00:02:58,319 --> 00:03:03,280
and other other changes on the system

68
00:03:01,519 --> 00:03:05,120
we want to record this information

69
00:03:03,280 --> 00:03:08,080
somewhere persistent so that we can

70
00:03:05,120 --> 00:03:08,080
query it later

71
00:03:08,400 --> 00:03:12,640
the system journal uh now part of

72
00:03:11,599 --> 00:03:15,280
systemd

73
00:03:12,640 --> 00:03:16,480
can store structured data in it as key

74
00:03:15,280 --> 00:03:19,840
value pairs

75
00:03:16,480 --> 00:03:20,879
it's no longer just a a single message

76
00:03:19,840 --> 00:03:24,000
string like

77
00:03:20,879 --> 00:03:28,079
the original syslog used to do um

78
00:03:24,000 --> 00:03:30,319
our syslog can also store uh key values

79
00:03:28,080 --> 00:03:33,680
uh but not to the same extent that

80
00:03:30,319 --> 00:03:36,560
systemd journal d can do

81
00:03:33,680 --> 00:03:38,319
so having stored it we if we put it into

82
00:03:36,560 --> 00:03:41,519
the system journal

83
00:03:38,319 --> 00:03:42,798
um the journal ctl command is capable of

84
00:03:41,519 --> 00:03:46,000
filtering this

85
00:03:42,799 --> 00:03:48,959
um by identifiers but it's

86
00:03:46,000 --> 00:03:49,680
not a very sophisticated filter yet it

87
00:03:48,959 --> 00:03:53,040
just does

88
00:03:49,680 --> 00:03:56,000
fixed string matches um

89
00:03:53,040 --> 00:03:56,640
at least wild cards and complicated

90
00:03:56,000 --> 00:03:59,840
patterns

91
00:03:56,640 --> 00:04:02,238
are beyond it at the moment but once

92
00:03:59,840 --> 00:04:05,040
we've recorded all this information

93
00:04:02,239 --> 00:04:06,560
going back to the time of the last boot

94
00:04:05,040 --> 00:04:09,679
we can play back

95
00:04:06,560 --> 00:04:10,799
the changes and from that reproduce the

96
00:04:09,680 --> 00:04:14,239
configuration

97
00:04:10,799 --> 00:04:16,880
like it was at an earlier time

98
00:04:14,239 --> 00:04:19,680
so what i'm leading towards here is if

99
00:04:16,880 --> 00:04:22,800
you're in a customer support situation

100
00:04:19,680 --> 00:04:26,320
you can contact you can

101
00:04:22,800 --> 00:04:29,120
get a copy of this from your customer

102
00:04:26,320 --> 00:04:31,280
and then replay the system to see what

103
00:04:29,120 --> 00:04:32,720
the storage was actually looking like at

104
00:04:31,280 --> 00:04:35,919
an earlier time

105
00:04:32,720 --> 00:04:37,520
um perhaps at the time that you're

106
00:04:35,919 --> 00:04:40,639
trying to focus on and

107
00:04:37,520 --> 00:04:42,639
when you think the problem happened so

108
00:04:40,639 --> 00:04:43,840
storage logger is a very simple little

109
00:04:42,639 --> 00:04:46,880
package

110
00:04:43,840 --> 00:04:47,520
um whenever the block device is added or

111
00:04:46,880 --> 00:04:50,639
removed

112
00:04:47,520 --> 00:04:53,440
it creates a new event

113
00:04:50,639 --> 00:04:54,639
this triggers what's called a udev rule

114
00:04:53,440 --> 00:04:56,880
processing

115
00:04:54,639 --> 00:04:59,360
and this performs actions it finds out

116
00:04:56,880 --> 00:05:01,520
the type of device it probes it

117
00:04:59,360 --> 00:05:03,440
finds out what might be on it is there a

118
00:05:01,520 --> 00:05:04,000
file system there do i need to mount it

119
00:05:03,440 --> 00:05:05,840
and so on

120
00:05:04,000 --> 00:05:07,759
creates the nodes and symbolic links

121
00:05:05,840 --> 00:05:09,520
that you see in dev

122
00:05:07,759 --> 00:05:11,360
what storage logger is going to do is

123
00:05:09,520 --> 00:05:14,719
record the result of all that

124
00:05:11,360 --> 00:05:17,280
into the system journal at the same time

125
00:05:14,720 --> 00:05:18,400
it can grab some information out of sys

126
00:05:17,280 --> 00:05:21,280
and attach it

127
00:05:18,400 --> 00:05:22,560
to that information so at the moment it

128
00:05:21,280 --> 00:05:26,159
is a bash script

129
00:05:22,560 --> 00:05:30,000
the script runs as a last udev rule

130
00:05:26,160 --> 00:05:32,240
um but in future if it's successful

131
00:05:30,000 --> 00:05:34,240
what it does can be folded back into

132
00:05:32,240 --> 00:05:36,240
those earlier udev rules

133
00:05:34,240 --> 00:05:37,759
and the remaining part could be built

134
00:05:36,240 --> 00:05:39,520
into you'd have itself are you the

135
00:05:37,759 --> 00:05:41,600
capacity to actually log

136
00:05:39,520 --> 00:05:45,039
in the system journal udev could do that

137
00:05:41,600 --> 00:05:48,240
itself if it was worth doing

138
00:05:45,039 --> 00:05:48,880
secondly the replay part what i've done

139
00:05:48,240 --> 00:05:52,880
there is

140
00:05:48,880 --> 00:05:54,479
written a wrapper around lsblk lsblk is

141
00:05:52,880 --> 00:05:57,120
a very friendly tool

142
00:05:54,479 --> 00:05:58,080
that lets you see your stack of storage

143
00:05:57,120 --> 00:06:00,560
devices and

144
00:05:58,080 --> 00:06:03,039
find information out about them so i've

145
00:06:00,560 --> 00:06:06,240
written a perl wrapper around that

146
00:06:03,039 --> 00:06:08,400
it takes time arguments since and

147
00:06:06,240 --> 00:06:09,600
until which happen to be the arguments

148
00:06:08,400 --> 00:06:13,359
that the

149
00:06:09,600 --> 00:06:14,080
uh journal ctl uses play back the new

150
00:06:13,360 --> 00:06:17,520
events

151
00:06:14,080 --> 00:06:19,520
between those two times create temporary

152
00:06:17,520 --> 00:06:21,840
devon cis directories

153
00:06:19,520 --> 00:06:23,440
similar to the original ones and then

154
00:06:21,840 --> 00:06:25,679
run ls block

155
00:06:23,440 --> 00:06:27,440
um on those temporary directories

156
00:06:25,680 --> 00:06:30,800
instead of the real ones

157
00:06:27,440 --> 00:06:32,400
um people have suggested other things we

158
00:06:30,800 --> 00:06:34,800
can do with this we could

159
00:06:32,400 --> 00:06:35,679
take this sequence of you events that

160
00:06:34,800 --> 00:06:38,560
we've logged

161
00:06:35,680 --> 00:06:41,280
and the changes to devon says and do

162
00:06:38,560 --> 00:06:42,800
them as a series of git commits

163
00:06:41,280 --> 00:06:44,799
so you can move forwards and backwards

164
00:06:42,800 --> 00:06:46,080
in time using git

165
00:06:44,800 --> 00:06:48,800
that's another idea that's been

166
00:06:46,080 --> 00:06:51,520
suggested and we may do

167
00:06:48,800 --> 00:06:52,240
finally there's a tool called skydive

168
00:06:51,520 --> 00:06:54,799
there've been

169
00:06:52,240 --> 00:06:56,960
some talks earlier today about this

170
00:06:54,800 --> 00:07:00,400
primarily this was invented for

171
00:06:56,960 --> 00:07:03,120
networking but it can also do storage um

172
00:07:00,400 --> 00:07:04,000
so the thing about skydive is it gives

173
00:07:03,120 --> 00:07:07,440
you a gui

174
00:07:04,000 --> 00:07:09,759
onto a graph database so we can

175
00:07:07,440 --> 00:07:10,719
store the relationships between the

176
00:07:09,759 --> 00:07:14,319
devices

177
00:07:10,720 --> 00:07:17,680
in the graph database we can also add in

178
00:07:14,319 --> 00:07:20,400
performance metrics i o statistics

179
00:07:17,680 --> 00:07:21,440
into that same database and then use the

180
00:07:20,400 --> 00:07:24,960
skydive

181
00:07:21,440 --> 00:07:26,719
user interface um to query that database

182
00:07:24,960 --> 00:07:29,919
and display it

183
00:07:26,720 --> 00:07:33,599
so i'm now going to move on to

184
00:07:29,919 --> 00:07:35,758
some specifics journal ctl

185
00:07:33,599 --> 00:07:37,520
um these are some of the parameters all

186
00:07:35,759 --> 00:07:39,440
the messages i'm recording

187
00:07:37,520 --> 00:07:40,799
i'm tagging them with that particular

188
00:07:39,440 --> 00:07:43,199
string you devlog

189
00:07:40,800 --> 00:07:45,680
so this is the parameter to journal ctl

190
00:07:43,199 --> 00:07:47,840
to select those messages

191
00:07:45,680 --> 00:07:49,360
i'm asking for out verbose output

192
00:07:47,840 --> 00:07:50,318
because i'm not actually logging any

193
00:07:49,360 --> 00:07:52,560
message string

194
00:07:50,319 --> 00:07:53,440
i don't want any of this to appear in

195
00:07:52,560 --> 00:07:56,000
normal

196
00:07:53,440 --> 00:07:57,360
var log message files it's just

197
00:07:56,000 --> 00:08:00,080
structured data

198
00:07:57,360 --> 00:08:01,039
so i'm asking here for verbose output

199
00:08:00,080 --> 00:08:03,840
i'm saying which

200
00:08:01,039 --> 00:08:06,080
fields i want i what keys persistent

201
00:08:03,840 --> 00:08:06,960
storage id major minor in my particular

202
00:08:06,080 --> 00:08:09,599
example

203
00:08:06,960 --> 00:08:11,680
and giving a range of times 10 minutes

204
00:08:09,599 --> 00:08:13,840
when i might have been giving the talk

205
00:08:11,680 --> 00:08:16,800
um if we were running to time

206
00:08:13,840 --> 00:08:18,000
and finally the persistent storage id

207
00:08:16,800 --> 00:08:20,160
acts as a filter

208
00:08:18,000 --> 00:08:21,840
to say only show me the events where the

209
00:08:20,160 --> 00:08:24,560
persistent storage id

210
00:08:21,840 --> 00:08:27,840
is device mapper name volume group one

211
00:08:24,560 --> 00:08:27,840
logical volume naught

212
00:08:28,000 --> 00:08:33,200
that output can then be put through into

213
00:08:30,520 --> 00:08:34,478
lsblk i put a j on the end because it's

214
00:08:33,200 --> 00:08:38,080
coming from the journal

215
00:08:34,479 --> 00:08:38,080
and it's also easy to type

216
00:08:38,640 --> 00:08:45,199
the until tells it when to stop

217
00:08:42,640 --> 00:08:45,839
so if i actually run that for real this

218
00:08:45,200 --> 00:08:49,360
is what i

219
00:08:45,839 --> 00:08:50,240
see um so running that command on a

220
00:08:49,360 --> 00:08:54,000
virtual machine

221
00:08:50,240 --> 00:08:57,839
guest so third line down you can see i'm

222
00:08:54,000 --> 00:09:00,480
the fedora kvm guest 10 root etc

223
00:08:57,839 --> 00:09:00,959
and this is the actual output you get

224
00:09:00,480 --> 00:09:04,240
the

225
00:09:00,959 --> 00:09:06,079
journal ctl log date and time stamp

226
00:09:04,240 --> 00:09:08,399
and then the parameters it had minor

227
00:09:06,080 --> 00:09:10,480
naught major 253

228
00:09:08,399 --> 00:09:12,640
and these are the two strings that

229
00:09:10,480 --> 00:09:16,240
recorded as persistent ids

230
00:09:12,640 --> 00:09:18,319
uh from uh udev um so these are the

231
00:09:16,240 --> 00:09:20,640
things you normally want to filter on

232
00:09:18,320 --> 00:09:22,720
so if i activated this device

233
00:09:20,640 --> 00:09:23,680
deactivated it did other things in

234
00:09:22,720 --> 00:09:25,360
between

235
00:09:23,680 --> 00:09:27,680
the major and minor numbers could be

236
00:09:25,360 --> 00:09:29,120
changing but if i filter it this way i

237
00:09:27,680 --> 00:09:31,599
can see all the events

238
00:09:29,120 --> 00:09:33,839
relating to that device and you can do

239
00:09:31,600 --> 00:09:36,880
the same thing with worldwide ids

240
00:09:33,839 --> 00:09:38,920
which is really why this has been

241
00:09:36,880 --> 00:09:42,000
written

242
00:09:38,920 --> 00:09:45,040
lsblkj looks just like ls

243
00:09:42,000 --> 00:09:45,920
blk on the output you can use all the

244
00:09:45,040 --> 00:09:48,399
standard

245
00:09:45,920 --> 00:09:50,240
command line arguments on it the only

246
00:09:48,399 --> 00:09:51,200
bits missing are the file system

247
00:09:50,240 --> 00:09:53,200
information

248
00:09:51,200 --> 00:09:56,160
because we're not yet logging that but

249
00:09:53,200 --> 00:09:59,680
in future we may be doing so

250
00:09:56,160 --> 00:10:02,640
so i'll create a device called test one

251
00:09:59,680 --> 00:10:04,640
uh obviously i'm recording the date here

252
00:10:02,640 --> 00:10:07,519
because i need that for my

253
00:10:04,640 --> 00:10:07,920
uh parameters later so i've created a

254
00:10:07,519 --> 00:10:10,720
very

255
00:10:07,920 --> 00:10:12,640
simple device mapper device called test1

256
00:10:10,720 --> 00:10:14,880
it just returns i o errors

257
00:10:12,640 --> 00:10:18,880
and it's 50 sectors in size that's all

258
00:10:14,880 --> 00:10:19,439
it's saying there decided to make it

259
00:10:18,880 --> 00:10:23,760
bigger

260
00:10:19,440 --> 00:10:26,640
so again using device mapper commands um

261
00:10:23,760 --> 00:10:28,079
i've increased its size there to 50 000

262
00:10:26,640 --> 00:10:30,560
sectors

263
00:10:28,079 --> 00:10:31,199
resumed it to make it active and put the

264
00:10:30,560 --> 00:10:33,680
date on

265
00:10:31,200 --> 00:10:36,399
so the thing to note that was between 12

266
00:10:33,680 --> 00:10:39,760
42 and 35 seconds today

267
00:10:36,399 --> 00:10:42,800
and 12 42 and 56 seconds today

268
00:10:39,760 --> 00:10:44,000
so the size of this device changed over

269
00:10:42,800 --> 00:10:47,120
time

270
00:10:44,000 --> 00:10:50,880
so if i run my ls block j

271
00:10:47,120 --> 00:10:53,200
and i say until 12 42 and 30 seconds

272
00:10:50,880 --> 00:10:54,560
i haven't created the device yet so it

273
00:10:53,200 --> 00:10:56,880
doesn't appear at the bottom of the

274
00:10:54,560 --> 00:10:59,680
output

275
00:10:56,880 --> 00:11:01,120
if i run it now at 12 40 10 seconds

276
00:10:59,680 --> 00:11:04,800
later

277
00:11:01,120 --> 00:11:09,200
it has arrived and it's 25k

278
00:11:04,800 --> 00:11:13,120
in size and if i run it again

279
00:11:09,200 --> 00:11:16,720
um now it's gone up to

280
00:11:13,120 --> 00:11:18,320
just under 25 megs so using that time

281
00:11:16,720 --> 00:11:21,519
i'll page backwards

282
00:11:18,320 --> 00:11:23,360
you can see the bottom line changes and

283
00:11:21,519 --> 00:11:24,560
it's that until parameter that's

284
00:11:23,360 --> 00:11:27,360
controlling

285
00:11:24,560 --> 00:11:28,959
um what i'm seeing there so this is just

286
00:11:27,360 --> 00:11:31,920
one application

287
00:11:28,959 --> 00:11:33,359
using the logs um but it makes it very

288
00:11:31,920 --> 00:11:36,240
easy to see

289
00:11:33,360 --> 00:11:38,480
so i now have a demo if the video plays

290
00:11:36,240 --> 00:11:41,600
we'll see if it works on here yeah

291
00:11:38,480 --> 00:11:43,519
so this is the old interface for skydive

292
00:11:41,600 --> 00:11:46,480
there is a newer interface which

293
00:11:43,519 --> 00:11:49,600
displays um the devices a different way

294
00:11:46,480 --> 00:11:53,600
is that going to play yes

295
00:11:49,600 --> 00:11:56,720
is it yes um i'm afraid i'm not sure how

296
00:11:53,600 --> 00:11:58,720
to hide that button but

297
00:11:56,720 --> 00:12:00,000
so this is showing all the devices on

298
00:11:58,720 --> 00:12:03,519
the system

299
00:12:00,000 --> 00:12:07,600
um you can see disks

300
00:12:03,519 --> 00:12:09,920
network devices and so forth um in a gui

301
00:12:07,600 --> 00:12:12,160
and you can use the gui to select some

302
00:12:09,920 --> 00:12:14,079
of those items and view their properties

303
00:12:12,160 --> 00:12:16,399
so up here we've got a mirror device a

304
00:12:14,079 --> 00:12:17,199
volume group lvm volume group that's a

305
00:12:16,399 --> 00:12:19,040
mirror

306
00:12:17,200 --> 00:12:22,160
and on the right hand side there we see

307
00:12:19,040 --> 00:12:25,040
a window just appeared with a metadata

308
00:12:22,160 --> 00:12:26,160
that's relating to some of those devices

309
00:12:25,040 --> 00:12:28,639
so over here

310
00:12:26,160 --> 00:12:29,920
we've got an r image device forming part

311
00:12:28,639 --> 00:12:32,639
of it

312
00:12:29,920 --> 00:12:34,079
mirror lv so if we just click on any of

313
00:12:32,639 --> 00:12:38,079
the devices

314
00:12:34,079 --> 00:12:40,399
we can see the attributes of that device

315
00:12:38,079 --> 00:12:41,760
and if we scroll down there we can see

316
00:12:40,399 --> 00:12:44,959
the sector size

317
00:12:41,760 --> 00:12:46,959
owner request size and so forth that is

318
00:12:44,959 --> 00:12:49,119
active and so on

319
00:12:46,959 --> 00:12:50,399
and underneath we've also been recording

320
00:12:49,120 --> 00:12:53,440
some metric

321
00:12:50,399 --> 00:12:55,279
information the average queue size read

322
00:12:53,440 --> 00:12:58,000
size right size

323
00:12:55,279 --> 00:12:58,480
um and so forth so we're storing that in

324
00:12:58,000 --> 00:13:01,839
their

325
00:12:58,480 --> 00:13:04,639
time sequence data as well

326
00:13:01,839 --> 00:13:06,000
um and then down at the bottom here

327
00:13:04,639 --> 00:13:08,800
we've just got a summary of

328
00:13:06,000 --> 00:13:10,320
total metrics on that device reads per

329
00:13:08,800 --> 00:13:12,160
second and so on

330
00:13:10,320 --> 00:13:13,920
just displayed in a slightly different

331
00:13:12,160 --> 00:13:16,719
way basically the same

332
00:13:13,920 --> 00:13:16,719
data as above

333
00:13:18,880 --> 00:13:23,200
so next up here we've in skydive we have

334
00:13:21,680 --> 00:13:26,000
the ability to run

335
00:13:23,200 --> 00:13:27,600
queries against the graph database so

336
00:13:26,000 --> 00:13:31,600
first of all in the highlight

337
00:13:27,600 --> 00:13:33,600
box we want it to highlight any device

338
00:13:31,600 --> 00:13:34,880
that me matches this particular

339
00:13:33,600 --> 00:13:37,440
expression

340
00:13:34,880 --> 00:13:39,199
and you can see there five devices have

341
00:13:37,440 --> 00:13:40,399
just been highlighted after we've cut

342
00:13:39,199 --> 00:13:42,880
and pasted in

343
00:13:40,399 --> 00:13:44,639
an expression that's a query a bit like

344
00:13:42,880 --> 00:13:47,439
sql but it's a graphical

345
00:13:44,639 --> 00:13:49,519
query language gremlin and i've

346
00:13:47,440 --> 00:13:50,000
highlighted anything where the reads per

347
00:13:49,519 --> 00:13:53,760
second

348
00:13:50,000 --> 00:13:55,760
is greater than 30 um and it's matched

349
00:13:53,760 --> 00:13:56,319
those five devices so it's highlighted

350
00:13:55,760 --> 00:13:59,279
them

351
00:13:56,320 --> 00:14:00,880
if we go to the filter box we can put

352
00:13:59,279 --> 00:14:02,560
that same expression in there and

353
00:14:00,880 --> 00:14:05,760
instead of highlighting

354
00:14:02,560 --> 00:14:06,239
it will remove everything else it will

355
00:14:05,760 --> 00:14:08,079
just

356
00:14:06,240 --> 00:14:10,240
show the items that match that

357
00:14:08,079 --> 00:14:12,719
expression so when we do that

358
00:14:10,240 --> 00:14:13,920
we find we're just left with those five

359
00:14:12,720 --> 00:14:19,680
devices

360
00:14:13,920 --> 00:14:19,680
that have more than 30 reads per second

361
00:14:23,040 --> 00:14:28,000
so finally up here there's also on the

362
00:14:25,920 --> 00:14:29,920
gremlin console you can write your own

363
00:14:28,000 --> 00:14:32,800
queries in here directly and see the

364
00:14:29,920 --> 00:14:35,199
results in json underneath

365
00:14:32,800 --> 00:14:37,279
so that is that same query and that's

366
00:14:35,199 --> 00:14:38,160
the json data that's come back from the

367
00:14:37,279 --> 00:14:42,320
database

368
00:14:38,160 --> 00:14:42,319
which skydive has now displayed

369
00:14:42,399 --> 00:14:45,760
and then the final thing if we add one

370
00:14:45,040 --> 00:14:48,959
more

371
00:14:45,760 --> 00:14:52,560
piece onto the end of that query

372
00:14:48,959 --> 00:14:52,560
um we scroll back up there

373
00:14:53,440 --> 00:14:58,720
here we are of count

374
00:14:56,560 --> 00:14:59,839
this dot count that will tell us how

375
00:14:58,720 --> 00:15:01,760
many

376
00:14:59,839 --> 00:15:03,440
and it's come back and said five there

377
00:15:01,760 --> 00:15:04,480
were five matches there were five

378
00:15:03,440 --> 00:15:05,839
devices

379
00:15:04,480 --> 00:15:09,120
so i'm going to i'm going to finish

380
00:15:05,839 --> 00:15:12,959
there um if i flick back to the final

381
00:15:09,120 --> 00:15:15,440
slide yep uh those are some links

382
00:15:12,959 --> 00:15:17,359
to the package it's sitting on github

383
00:15:15,440 --> 00:15:20,959
there are packages built already

384
00:15:17,360 --> 00:15:23,600
for fedora uh using the copper

385
00:15:20,959 --> 00:15:26,079
facility so you can try them out i'm

386
00:15:23,600 --> 00:15:28,399
looking for feedback

387
00:15:26,079 --> 00:15:29,758
and to determine whether to take this

388
00:15:28,399 --> 00:15:32,560
further or not

389
00:15:29,759 --> 00:15:34,240
whether it's useful for people so i'll

390
00:15:32,560 --> 00:15:41,199
end it there

391
00:15:34,240 --> 00:15:43,279
thank you

392
00:15:41,199 --> 00:15:43,279
you

