1
00:00:06,879 --> 00:00:11,759
okay

2
00:00:08,800 --> 00:00:13,440
so what i'll be talking about are

3
00:00:11,759 --> 00:00:16,160
different ways how we can deploy

4
00:00:13,440 --> 00:00:17,119
software and i think it's kind of

5
00:00:16,160 --> 00:00:20,160
important

6
00:00:17,119 --> 00:00:20,720
because usually those are the things

7
00:00:20,160 --> 00:00:23,359
that

8
00:00:20,720 --> 00:00:24,960
other people are thinking about and they

9
00:00:23,359 --> 00:00:27,039
actually greatly influence how we

10
00:00:24,960 --> 00:00:28,800
architecture our software how we

11
00:00:27,039 --> 00:00:31,519
test our software and so on and so forth

12
00:00:28,800 --> 00:00:32,880
so at least on a high level it is an

13
00:00:31,519 --> 00:00:36,399
important subject

14
00:00:32,880 --> 00:00:38,800
for everybody wait is this working

15
00:00:36,399 --> 00:00:38,800
come on

16
00:00:42,559 --> 00:00:46,800
sorry for that you need to plug it in

17
00:00:54,000 --> 00:00:58,000
okay so my name is victor that's how i

18
00:00:56,160 --> 00:01:01,599
look like i work for cloudbees

19
00:00:58,000 --> 00:01:05,438
i'm associated with dockerfolks with

20
00:01:01,600 --> 00:01:06,799
doc with google i have podcasts i have

21
00:01:05,438 --> 00:01:08,559
books

22
00:01:06,799 --> 00:01:10,080
not important twitter account this is

23
00:01:08,560 --> 00:01:12,960
important because

24
00:01:10,080 --> 00:01:14,960
after the talk i will give away uh some

25
00:01:12,960 --> 00:01:18,399
some stuff for free

26
00:01:14,960 --> 00:01:20,240
uh so you might wanna go there

27
00:01:18,400 --> 00:01:22,159
probably like 15 minutes after after

28
00:01:20,240 --> 00:01:23,759
this talk anyway

29
00:01:22,159 --> 00:01:25,520
i'm gonna skip the boring part and we're

30
00:01:23,759 --> 00:01:26,880
gonna jump the straight into what i'm

31
00:01:25,520 --> 00:01:30,399
going to

32
00:01:26,880 --> 00:01:32,640
to talk about here we go okay so

33
00:01:30,400 --> 00:01:34,400
deployment there are quite a few ways

34
00:01:32,640 --> 00:01:36,240
how you can deploy your stuff

35
00:01:34,400 --> 00:01:38,079
uh i'm not going to go through all of

36
00:01:36,240 --> 00:01:40,960
them but i will go

37
00:01:38,079 --> 00:01:42,880
through a hands-on part demo of those

38
00:01:40,960 --> 00:01:46,079
that are most commonly used today

39
00:01:42,880 --> 00:01:47,199
which would be recreate or big bang

40
00:01:46,079 --> 00:01:50,158
strategy

41
00:01:47,200 --> 00:01:52,079
uh rolling updates i might be talking a

42
00:01:50,159 --> 00:01:55,040
bit about blue-green

43
00:01:52,079 --> 00:01:57,039
country deployments and serverless right

44
00:01:55,040 --> 00:02:00,079
that covers most of the

45
00:01:57,040 --> 00:02:01,759
strategies that we are using today uh

46
00:02:00,079 --> 00:02:03,679
one way or another right

47
00:02:01,759 --> 00:02:04,960
and uh when we are talking about them

48
00:02:03,680 --> 00:02:06,560
there are usually a

49
00:02:04,960 --> 00:02:08,478
couple of things that are important that

50
00:02:06,560 --> 00:02:10,318
you're trying to take into account

51
00:02:08,479 --> 00:02:12,080
when you're making the decision how

52
00:02:10,318 --> 00:02:13,359
you're going to deploy your software

53
00:02:12,080 --> 00:02:15,440
even though actually in most cases

54
00:02:13,360 --> 00:02:17,760
you're not making that decision because

55
00:02:15,440 --> 00:02:19,840
how your software will be deployed does

56
00:02:17,760 --> 00:02:23,040
not depend on you it depends

57
00:02:19,840 --> 00:02:26,080
more often than not on how your

58
00:02:23,040 --> 00:02:28,319
application is designed uh and

59
00:02:26,080 --> 00:02:29,120
how mature your processes are and so on

60
00:02:28,319 --> 00:02:30,560
and so forth

61
00:02:29,120 --> 00:02:32,959
but anyways what we are trying to

62
00:02:30,560 --> 00:02:34,560
accomplish up to some level and trying

63
00:02:32,959 --> 00:02:37,120
to figure out pros and cons

64
00:02:34,560 --> 00:02:38,480
is whether it is fault tolerant uh i

65
00:02:37,120 --> 00:02:40,160
will that's the only thing that i will

66
00:02:38,480 --> 00:02:40,640
not be talking about today simply

67
00:02:40,160 --> 00:02:42,319
because

68
00:02:40,640 --> 00:02:44,559
everything i will be doing today is in

69
00:02:42,319 --> 00:02:46,799
kubernetes and everything you're doing

70
00:02:44,560 --> 00:02:48,400
kubernetes unrest unless you really mess

71
00:02:46,800 --> 00:02:50,080
it up is fault tolerant right

72
00:02:48,400 --> 00:02:51,519
if it goes down kubernetes is going to

73
00:02:50,080 --> 00:02:53,280
bring it up uh

74
00:02:51,519 --> 00:02:55,200
one way or another unless you don't have

75
00:02:53,280 --> 00:02:57,840
enough capacity or few other

76
00:02:55,200 --> 00:02:59,119
uh cases but what is important is

77
00:02:57,840 --> 00:02:59,840
whether your application is highly

78
00:02:59,120 --> 00:03:02,560
available

79
00:02:59,840 --> 00:03:04,400
right unless you are having a hobby site

80
00:03:02,560 --> 00:03:06,879
or something like that

81
00:03:04,400 --> 00:03:09,200
you do want your application to be

82
00:03:06,879 --> 00:03:11,359
highly available and that is especially

83
00:03:09,200 --> 00:03:12,480
important if you're deploying very

84
00:03:11,360 --> 00:03:14,239
frequently right

85
00:03:12,480 --> 00:03:16,159
we are all moving away from monthly

86
00:03:14,239 --> 00:03:17,760
releases or quarterly releases and

87
00:03:16,159 --> 00:03:19,840
you're probably all going into the

88
00:03:17,760 --> 00:03:21,679
direction of releasing once a week once

89
00:03:19,840 --> 00:03:22,239
a day many times a day and so on and so

90
00:03:21,680 --> 00:03:24,159
forth

91
00:03:22,239 --> 00:03:26,000
and the more frequently you release more

92
00:03:24,159 --> 00:03:29,599
frequently you deploy

93
00:03:26,000 --> 00:03:32,159
more important that part is

94
00:03:29,599 --> 00:03:32,720
because potentially deployment of a new

95
00:03:32,159 --> 00:03:35,760
release

96
00:03:32,720 --> 00:03:38,560
might create downtime

97
00:03:35,760 --> 00:03:40,319
and downtime as you know is quite

98
00:03:38,560 --> 00:03:43,360
opposite from highly available

99
00:03:40,319 --> 00:03:45,599
whether your application is responsive

100
00:03:43,360 --> 00:03:46,400
whether it rolls out progressively and

101
00:03:45,599 --> 00:03:48,079
you will see

102
00:03:46,400 --> 00:03:50,879
later on what what that means if you're

103
00:03:48,080 --> 00:03:53,840
not familiar uh can we roll back when

104
00:03:50,879 --> 00:03:54,560
in case of failure and just withdraw

105
00:03:53,840 --> 00:03:56,560
back just like

106
00:03:54,560 --> 00:03:58,239
like with anything else what they really

107
00:03:56,560 --> 00:03:59,519
mean whether all those things are

108
00:03:58,239 --> 00:04:01,920
happening without you

109
00:03:59,519 --> 00:04:03,200
you being involved right i know that you

110
00:04:01,920 --> 00:04:06,399
can do anything you want

111
00:04:03,200 --> 00:04:08,000
yourself or by having 50 people standing

112
00:04:06,400 --> 00:04:09,920
in the monitor all the time

113
00:04:08,000 --> 00:04:12,080
but all the things i'm talking about i

114
00:04:09,920 --> 00:04:14,238
assume that this is fully automated

115
00:04:12,080 --> 00:04:15,680
if it's not then i count it as if not

116
00:04:14,239 --> 00:04:17,759
not not happening

117
00:04:15,680 --> 00:04:20,079
even though you might be doing it

118
00:04:17,759 --> 00:04:22,079
through some other means manually

119
00:04:20,079 --> 00:04:23,360
uh is it cost effective will it cost us

120
00:04:22,079 --> 00:04:25,280
too much money

121
00:04:23,360 --> 00:04:27,040
or will it save us money if you do it

122
00:04:25,280 --> 00:04:29,359
one way or another

123
00:04:27,040 --> 00:04:30,800
so the first one i will talk about is

124
00:04:29,360 --> 00:04:33,120
serverless

125
00:04:30,800 --> 00:04:34,400
type of deployments right i will not be

126
00:04:33,120 --> 00:04:35,919
using lambdas and

127
00:04:34,400 --> 00:04:37,840
larger functions and all those things

128
00:04:35,919 --> 00:04:39,520
because this is focused on kubernetes

129
00:04:37,840 --> 00:04:41,119
and because i don't like to build locked

130
00:04:39,520 --> 00:04:43,120
in into any of those things

131
00:04:41,120 --> 00:04:45,120
so let's take a look first at the

132
00:04:43,120 --> 00:04:47,520
serverless strategy how that

133
00:04:45,120 --> 00:04:49,440
looks like and in a very simplified way

134
00:04:47,520 --> 00:04:51,680
extremely simplified way

135
00:04:49,440 --> 00:04:53,360
what we're doing with that is that we

136
00:04:51,680 --> 00:04:55,120
have external load balancer like

137
00:04:53,360 --> 00:04:57,199
for anything else basically we have some

138
00:04:55,120 --> 00:04:58,960
sort of api gateway no matter technology

139
00:04:57,199 --> 00:05:00,639
we are using that is

140
00:04:58,960 --> 00:05:02,159
accepting the requests coming into the

141
00:05:00,639 --> 00:05:03,759
clustering cueing them

142
00:05:02,160 --> 00:05:05,520
depending on whether there is something

143
00:05:03,759 --> 00:05:09,039
running or not and then

144
00:05:05,520 --> 00:05:11,120
it is notifying the cluster

145
00:05:09,039 --> 00:05:12,800
to do something with your application

146
00:05:11,120 --> 00:05:15,199
which might or might not be even running

147
00:05:12,800 --> 00:05:17,520
at any given moment

148
00:05:15,199 --> 00:05:19,280
so let's take a look at the first

149
00:05:17,520 --> 00:05:21,359
example how that looks like

150
00:05:19,280 --> 00:05:23,198
and so now we're taking a look at the

151
00:05:21,360 --> 00:05:26,800
serverless strategy

152
00:05:23,199 --> 00:05:30,080
and this is what i have in my cluster

153
00:05:26,800 --> 00:05:32,720
no this is what what am i doing here

154
00:05:30,080 --> 00:05:32,719
wrong slide

155
00:05:35,919 --> 00:05:40,080
oh yeah sorry yeah that's what i wanted

156
00:05:38,320 --> 00:05:41,759
uh this is what i have in my cluster

157
00:05:40,080 --> 00:05:42,960
it's a very simple definition even

158
00:05:41,759 --> 00:05:44,479
though if you're not working with

159
00:05:42,960 --> 00:05:46,320
kubernetes it might look scary

160
00:05:44,479 --> 00:05:47,919
it's a single resource that defines k

161
00:05:46,320 --> 00:05:49,440
native and if you're familiar with k

162
00:05:47,919 --> 00:05:53,758
native

163
00:05:49,440 --> 00:05:56,000
no a few of you shame um

164
00:05:53,759 --> 00:05:57,600
anyway a simple definition i will not go

165
00:05:56,000 --> 00:05:58,319
through it what really matters in this

166
00:05:57,600 --> 00:06:02,080
case

167
00:05:58,319 --> 00:06:04,160
uh is is this guy over here that says

168
00:06:02,080 --> 00:06:05,120
that nothing is currently running in my

169
00:06:04,160 --> 00:06:08,240
cluster right

170
00:06:05,120 --> 00:06:10,080
if i list all the pods in my cluster

171
00:06:08,240 --> 00:06:11,360
that are called k native because that's

172
00:06:10,080 --> 00:06:12,080
how i call the application that i

173
00:06:11,360 --> 00:06:13,680
deployed

174
00:06:12,080 --> 00:06:15,359
there is absolutely nothing running and

175
00:06:13,680 --> 00:06:17,199
that's normal because i

176
00:06:15,360 --> 00:06:19,680
created a cluster and i deployed the

177
00:06:17,199 --> 00:06:22,800
application a few hours ago

178
00:06:19,680 --> 00:06:25,120
right and between then and now

179
00:06:22,800 --> 00:06:26,960
nobody was using that application so the

180
00:06:25,120 --> 00:06:28,479
system decided to scale it down to zero

181
00:06:26,960 --> 00:06:31,198
replicas because

182
00:06:28,479 --> 00:06:32,159
why would you run something if nobody is

183
00:06:31,199 --> 00:06:34,080
using it

184
00:06:32,160 --> 00:06:35,520
unless you have too much money to spend

185
00:06:34,080 --> 00:06:37,199
but then you can come to

186
00:06:35,520 --> 00:06:39,440
cloud base for example and spend money

187
00:06:37,199 --> 00:06:39,440
there

188
00:06:39,680 --> 00:06:45,440
uh so well let's take a look what

189
00:06:42,560 --> 00:06:49,360
happens if i if i do send a request

190
00:06:45,440 --> 00:06:51,120
to my application and i'm going to run

191
00:06:49,360 --> 00:06:51,440
siege and if you're familiar with siege

192
00:06:51,120 --> 00:06:54,400
you know

193
00:06:51,440 --> 00:06:55,039
sieges uh it allows you to send a bunch

194
00:06:54,400 --> 00:06:57,520
of

195
00:06:55,039 --> 00:06:59,440
concurrent requests to somewhere so i

196
00:06:57,520 --> 00:07:00,960
will send to my application which is not

197
00:06:59,440 --> 00:07:03,440
running at all right now

198
00:07:00,960 --> 00:07:05,758
i will send my uh to my application 300

199
00:07:03,440 --> 00:07:08,319
concurrent requests during 30 seconds so

200
00:07:05,759 --> 00:07:10,160
for 30 seconds it will be bombing the up

201
00:07:08,319 --> 00:07:12,639
the system the application that does not

202
00:07:10,160 --> 00:07:14,319
even exist right now in a cluster

203
00:07:12,639 --> 00:07:15,840
and then we're going to see how many

204
00:07:14,319 --> 00:07:17,280
pots we have

205
00:07:15,840 --> 00:07:19,039
over there running i mean that is

206
00:07:17,280 --> 00:07:21,198
happening

207
00:07:19,039 --> 00:07:22,880
it will take a minute or two i have

208
00:07:21,199 --> 00:07:24,560
another pretty graph

209
00:07:22,880 --> 00:07:27,199
people get dizzy when they see only a

210
00:07:24,560 --> 00:07:29,440
terminal so i tend to mix it with

211
00:07:27,199 --> 00:07:30,800
different colors anyway so what was

212
00:07:29,440 --> 00:07:32,719
happening is that

213
00:07:30,800 --> 00:07:33,919
nothing was running over there when i

214
00:07:32,720 --> 00:07:36,080
showed you before

215
00:07:33,919 --> 00:07:37,758
because nobody was using the application

216
00:07:36,080 --> 00:07:39,919
so k native in this case and this

217
00:07:37,759 --> 00:07:40,800
this can be open fast it can be many

218
00:07:39,919 --> 00:07:42,880
different frameworks

219
00:07:40,800 --> 00:07:44,879
just think of k native as this example

220
00:07:42,880 --> 00:07:47,520
not a recommendation

221
00:07:44,879 --> 00:07:49,759
shut it down and now while i'm running

222
00:07:47,520 --> 00:07:51,120
the uh while i'm sending requests over a

223
00:07:49,759 --> 00:07:54,080
period of time

224
00:07:51,120 --> 00:07:54,479
it will go to the system figure out that

225
00:07:54,080 --> 00:07:56,719
uh

226
00:07:54,479 --> 00:07:58,719
there are that somebody wants to use the

227
00:07:56,720 --> 00:08:00,960
application there are 300 different

228
00:07:58,720 --> 00:08:02,800
requests happening at any given moment

229
00:08:00,960 --> 00:08:04,159
so you should not only start running my

230
00:08:02,800 --> 00:08:06,160
application but you should probably

231
00:08:04,160 --> 00:08:08,319
scale it to some number

232
00:08:06,160 --> 00:08:09,759
i'm not sure but if what i configured it

233
00:08:08,319 --> 00:08:12,240
right now but i think it should have

234
00:08:09,759 --> 00:08:14,800
approximately 100 requests per

235
00:08:12,240 --> 00:08:16,800
replica so since i'm sending 300 it

236
00:08:14,800 --> 00:08:18,560
should spin up probably three pods give

237
00:08:16,800 --> 00:08:20,800
or take

238
00:08:18,560 --> 00:08:22,560
so let's take a look at whether that's

239
00:08:20,800 --> 00:08:26,400
happening and there you go

240
00:08:22,560 --> 00:08:29,440
i sent 5800 blah blah blah

241
00:08:26,400 --> 00:08:31,198
requests 100 of them were working that's

242
00:08:29,440 --> 00:08:35,440
a good thing

243
00:08:31,199 --> 00:08:37,839
uh and the system at the time

244
00:08:35,440 --> 00:08:39,760
immediately after it finished sending

245
00:08:37,839 --> 00:08:43,039
those thousands of requests

246
00:08:39,760 --> 00:08:45,040
had five pods running inside of the

247
00:08:43,039 --> 00:08:48,800
cluster and doing whatever

248
00:08:45,040 --> 00:08:51,040
they need to do and if i now

249
00:08:48,800 --> 00:08:52,719
if i now since i was already talking for

250
00:08:51,040 --> 00:08:56,319
a couple of minutes

251
00:08:52,720 --> 00:08:58,080
since the time this finished running

252
00:08:56,320 --> 00:09:00,800
you will see that now it already dropped

253
00:08:58,080 --> 00:09:02,240
to two and now it is already terminating

254
00:09:00,800 --> 00:09:04,319
one so soon there will be only one

255
00:09:02,240 --> 00:09:06,160
replica running and after that if still

256
00:09:04,320 --> 00:09:10,560
nobody continues using it

257
00:09:06,160 --> 00:09:11,920
it will go to zero right so from

258
00:09:10,560 --> 00:09:14,000
taking into account the things i

259
00:09:11,920 --> 00:09:15,120
mentioned before excluding tolerance

260
00:09:14,000 --> 00:09:16,480
because that's already kind of

261
00:09:15,120 --> 00:09:18,160
kubernetes thing

262
00:09:16,480 --> 00:09:19,760
this is very highly available right

263
00:09:18,160 --> 00:09:22,880
because it will always provide

264
00:09:19,760 --> 00:09:24,880
as many replicas of my application as it

265
00:09:22,880 --> 00:09:26,800
is needed which can be nothing

266
00:09:24,880 --> 00:09:28,480
or it can be a thousand of them

267
00:09:26,800 --> 00:09:30,160
depending on how you configured it

268
00:09:28,480 --> 00:09:31,600
what's your load and so on and so forth

269
00:09:30,160 --> 00:09:33,439
so your users

270
00:09:31,600 --> 00:09:35,680
ignoring now the problems in your

271
00:09:33,440 --> 00:09:37,200
application but if your application is

272
00:09:35,680 --> 00:09:39,199
designed well and all those things

273
00:09:37,200 --> 00:09:40,640
users should always be happy because

274
00:09:39,200 --> 00:09:42,560
your application will always be

275
00:09:40,640 --> 00:09:45,920
responsive

276
00:09:42,560 --> 00:09:47,518
uh sorry highly available uh responsive

277
00:09:45,920 --> 00:09:50,240
that not so much

278
00:09:47,519 --> 00:09:52,160
because what you didn't see is that uh

279
00:09:50,240 --> 00:09:55,440
it may take a second it might take us

280
00:09:52,160 --> 00:09:57,360
two seconds until from it jumps from

281
00:09:55,440 --> 00:09:59,200
zero to something right so the first

282
00:09:57,360 --> 00:10:01,360
request took a bit of time until it

283
00:09:59,200 --> 00:10:03,600
responded so that's a downside

284
00:10:01,360 --> 00:10:06,959
it is highly available but not really

285
00:10:03,600 --> 00:10:10,480
responsive all the times

286
00:10:06,959 --> 00:10:12,079
progressive rollout yeah kind of

287
00:10:10,480 --> 00:10:13,760
you will see later what that really

288
00:10:12,079 --> 00:10:16,079
means but it it

289
00:10:13,760 --> 00:10:16,880
if i would deploy a new release it would

290
00:10:16,079 --> 00:10:19,040
be replay

291
00:10:16,880 --> 00:10:19,920
replacing existing pods while

292
00:10:19,040 --> 00:10:22,319
maintaining

293
00:10:19,920 --> 00:10:24,079
uh those from before so that the

294
00:10:22,320 --> 00:10:24,720
existing requests terminate and all

295
00:10:24,079 --> 00:10:26,640
those things

296
00:10:24,720 --> 00:10:28,079
so it would kind of progressively roll

297
00:10:26,640 --> 00:10:30,240
out but without

298
00:10:28,079 --> 00:10:31,839
real mechanisms to decide whether that

299
00:10:30,240 --> 00:10:34,160
should really be happening and when

300
00:10:31,839 --> 00:10:36,000
you should continue progressing or roll

301
00:10:34,160 --> 00:10:37,519
back and all those things so somehow it

302
00:10:36,000 --> 00:10:39,680
does but not really fully

303
00:10:37,519 --> 00:10:41,760
roll back there is no way to roll back

304
00:10:39,680 --> 00:10:43,120
automatically out of the box i know that

305
00:10:41,760 --> 00:10:45,680
you can script everything

306
00:10:43,120 --> 00:10:47,040
i know that you can do it and you i know

307
00:10:45,680 --> 00:10:48,160
that you can stay at the monitor and

308
00:10:47,040 --> 00:10:50,399
click the button but

309
00:10:48,160 --> 00:10:52,160
out of the box it doesn't come and it is

310
00:10:50,399 --> 00:10:53,920
very very cost effective this is the

311
00:10:52,160 --> 00:10:56,480
cheapest thing you can do

312
00:10:53,920 --> 00:10:57,040
because you're literally using what you

313
00:10:56,480 --> 00:10:58,880
need

314
00:10:57,040 --> 00:11:00,560
and not more assuming that your cluster

315
00:10:58,880 --> 00:11:01,920
is scaling up and down and that

316
00:11:00,560 --> 00:11:04,880
you're having some other things that you

317
00:11:01,920 --> 00:11:06,479
need to do but it is very cheap

318
00:11:04,880 --> 00:11:09,839
option even though it doesn't really

319
00:11:06,480 --> 00:11:11,839
matches everything that we really need

320
00:11:09,839 --> 00:11:13,120
so let me run a few other commands just

321
00:11:11,839 --> 00:11:16,160
so that

322
00:11:13,120 --> 00:11:19,040
they're happening while

323
00:11:16,160 --> 00:11:20,640
uh while i'm talking so what i'm going

324
00:11:19,040 --> 00:11:22,160
to do is that i'm going to go to a

325
00:11:20,640 --> 00:11:24,800
different application now

326
00:11:22,160 --> 00:11:25,439
the application deployed in a different

327
00:11:24,800 --> 00:11:26,959
way

328
00:11:25,440 --> 00:11:29,360
i'm going to change the source code of

329
00:11:26,959 --> 00:11:32,800
that application

330
00:11:29,360 --> 00:11:34,880
push that to my git repository

331
00:11:32,800 --> 00:11:36,160
and while i'm talking junkies x which

332
00:11:34,880 --> 00:11:38,720
i'm using in the background

333
00:11:36,160 --> 00:11:40,839
is going to deploy a new release of my

334
00:11:38,720 --> 00:11:44,079
application

335
00:11:40,839 --> 00:11:47,200
now what uh

336
00:11:44,079 --> 00:11:48,800
what i will call that strategy i like to

337
00:11:47,200 --> 00:11:50,560
call it big bang

338
00:11:48,800 --> 00:11:51,920
uh officially at least in kubernetes

339
00:11:50,560 --> 00:11:55,199
would be recreate

340
00:11:51,920 --> 00:11:57,839
and what that really means is that

341
00:11:55,200 --> 00:11:59,200
uh when i'm deploying a new release it

342
00:11:57,839 --> 00:12:02,000
will shut down

343
00:11:59,200 --> 00:12:04,320
my existing release it will put a new

344
00:12:02,000 --> 00:12:06,240
release in its place

345
00:12:04,320 --> 00:12:07,760
and then something will happen or it

346
00:12:06,240 --> 00:12:09,279
will not happen and so on and so forth

347
00:12:07,760 --> 00:12:10,160
we're going i'm going to take a look at

348
00:12:09,279 --> 00:12:13,040
that

349
00:12:10,160 --> 00:12:14,719
immediately so while i'm talking what

350
00:12:13,040 --> 00:12:16,959
i'm going to do

351
00:12:14,720 --> 00:12:18,320
is i will be sending requests to my

352
00:12:16,959 --> 00:12:20,479
application

353
00:12:18,320 --> 00:12:21,440
it says hello from something something

354
00:12:20,480 --> 00:12:23,200
example

355
00:12:21,440 --> 00:12:25,200
and when a new release is deployed it

356
00:12:23,200 --> 00:12:27,200
will start saying recreate so we will

357
00:12:25,200 --> 00:12:30,240
see how that works

358
00:12:27,200 --> 00:12:31,519
uh in a minute or two and until then i

359
00:12:30,240 --> 00:12:33,040
have another graph

360
00:12:31,519 --> 00:12:34,959
so what we are doing here and this is

361
00:12:33,040 --> 00:12:37,120
like probably 98

362
00:12:34,959 --> 00:12:38,880
of applications today are doing exactly

363
00:12:37,120 --> 00:12:42,240
this

364
00:12:38,880 --> 00:12:44,800
because 99 of them are legacy code

365
00:12:42,240 --> 00:12:46,160
uh so what we have a request coming to

366
00:12:44,800 --> 00:12:47,359
external load balancer going through

367
00:12:46,160 --> 00:12:49,279
ingress in this case because it's

368
00:12:47,360 --> 00:12:49,680
kubernetes so everything goes to version

369
00:12:49,279 --> 00:12:51,680
one

370
00:12:49,680 --> 00:12:54,000
or whatever the version is and then we

371
00:12:51,680 --> 00:12:55,439
are going to shut down that version

372
00:12:54,000 --> 00:12:57,440
and then we are going to put this

373
00:12:55,440 --> 00:13:00,000
version in its place right

374
00:12:57,440 --> 00:13:01,440
this is what i i'm not going to ask you

375
00:13:00,000 --> 00:13:03,600
who's doing this because you would not

376
00:13:01,440 --> 00:13:04,880
admit publicly but this is what most of

377
00:13:03,600 --> 00:13:06,959
you are doing

378
00:13:04,880 --> 00:13:09,040
right unless you work in a company that

379
00:13:06,959 --> 00:13:11,040
did not exist three years ago or five or

380
00:13:09,040 --> 00:13:13,760
something like that

381
00:13:11,040 --> 00:13:14,719
uh okay some older ones are doing it

382
00:13:13,760 --> 00:13:18,000
anyway

383
00:13:14,720 --> 00:13:20,000
but that's what most of us are doing

384
00:13:18,000 --> 00:13:21,600
and now i'm out of what to talk about

385
00:13:20,000 --> 00:13:25,920
let me see whether my

386
00:13:21,600 --> 00:13:25,920
uh new release is deploying

387
00:13:27,680 --> 00:13:30,959
it will be deployed soon

388
00:13:32,079 --> 00:13:35,599
yeah it will be deployed in a minute or

389
00:13:34,560 --> 00:13:38,160
two

390
00:13:35,600 --> 00:13:39,040
uh so i need to figure out what to talk

391
00:13:38,160 --> 00:13:42,719
anyway

392
00:13:39,040 --> 00:13:44,880
now when i said everybody is doing this

393
00:13:42,720 --> 00:13:45,760
what you might be wondering especially

394
00:13:44,880 --> 00:13:48,000
if you're not doing it

395
00:13:45,760 --> 00:13:49,279
why would anybody do this right can you

396
00:13:48,000 --> 00:13:51,760
predict what will happen

397
00:13:49,279 --> 00:13:52,480
here right it's pretty obvious what will

398
00:13:51,760 --> 00:13:55,439
happen

399
00:13:52,480 --> 00:13:56,959
and the reason why most of the people

400
00:13:55,440 --> 00:13:59,680
are still doing that

401
00:13:56,959 --> 00:14:01,199
is because most of the applications

402
00:13:59,680 --> 00:14:03,359
cannot do anything else

403
00:14:01,199 --> 00:14:05,439
for example if you cannot scale your

404
00:14:03,360 --> 00:14:07,360
application to multiple replicas

405
00:14:05,440 --> 00:14:08,880
and by multiple replicas i don't mean

406
00:14:07,360 --> 00:14:11,120
multiple instances

407
00:14:08,880 --> 00:14:12,320
uh then you have no other option than to

408
00:14:11,120 --> 00:14:14,320
do this

409
00:14:12,320 --> 00:14:15,519
if you have a stateful application that

410
00:14:14,320 --> 00:14:18,880
has a state

411
00:14:15,519 --> 00:14:21,040
inside itself and

412
00:14:18,880 --> 00:14:23,199
that state is not replicated across

413
00:14:21,040 --> 00:14:25,439
multiple replicas

414
00:14:23,199 --> 00:14:27,519
then you have to do this and so on and

415
00:14:25,440 --> 00:14:30,800
so forth there are many many reasons why

416
00:14:27,519 --> 00:14:34,079
you have to do that

417
00:14:30,800 --> 00:14:35,680
and come on okay i'm going to skip

418
00:14:34,079 --> 00:14:37,519
showing you what will happen because you

419
00:14:35,680 --> 00:14:39,279
you know what will happen and i'm

420
00:14:37,519 --> 00:14:42,959
pressed with time here and it will take

421
00:14:39,279 --> 00:14:42,959
half a minute more to deploy it

422
00:14:43,360 --> 00:14:47,519
anyway what will happen when you see it

423
00:14:45,760 --> 00:14:49,519
is that this is the horrible horrible

424
00:14:47,519 --> 00:14:52,800
thing to do even though you're doing it

425
00:14:49,519 --> 00:14:54,720
it's not highly available because uh

426
00:14:52,800 --> 00:14:56,479
it will there will be a period of time

427
00:14:54,720 --> 00:14:58,079
between

428
00:14:56,480 --> 00:15:00,240
all the release being shut down a new

429
00:14:58,079 --> 00:15:01,760
release running it

430
00:15:00,240 --> 00:15:04,320
if it's not highly available it cannot

431
00:15:01,760 --> 00:15:06,480
be responsive simply that's impossible

432
00:15:04,320 --> 00:15:08,480
uh there is no way to progressively roll

433
00:15:06,480 --> 00:15:10,320
out simply because if you don't have

434
00:15:08,480 --> 00:15:12,399
multiple replicas for example of your

435
00:15:10,320 --> 00:15:12,880
application what will you progressively

436
00:15:12,399 --> 00:15:14,720
do

437
00:15:12,880 --> 00:15:17,199
there is no progressiveness in any form

438
00:15:14,720 --> 00:15:19,680
of a you cannot roll back just

439
00:15:17,199 --> 00:15:21,439
at least not that easily out of the box

440
00:15:19,680 --> 00:15:22,959
and even if you can you're most likely

441
00:15:21,440 --> 00:15:24,560
going to be messed up because of the

442
00:15:22,959 --> 00:15:26,079
same reasons why you cannot move forward

443
00:15:24,560 --> 00:15:29,680
with multiple replicas

444
00:15:26,079 --> 00:15:32,399
and it is not cost effective at all

445
00:15:29,680 --> 00:15:35,359
it is very very expensive simply for

446
00:15:32,399 --> 00:15:39,120
simply because for you to run that

447
00:15:35,360 --> 00:15:40,079
uh you need to beef up your hardware

448
00:15:39,120 --> 00:15:42,079
beyond

449
00:15:40,079 --> 00:15:43,839
the need because your application most

450
00:15:42,079 --> 00:15:46,800
likely needs to have

451
00:15:43,839 --> 00:15:48,560
many many much much more memory and cpu

452
00:15:46,800 --> 00:15:50,719
than you really really need

453
00:15:48,560 --> 00:15:52,479
simply to to handle the peak load if you

454
00:15:50,720 --> 00:15:54,880
cannot scale or you cannot do whatever

455
00:15:52,480 --> 00:15:57,279
you cannot do

456
00:15:54,880 --> 00:15:57,279
come on

457
00:15:59,920 --> 00:16:03,680
it's gonna happen any questions while

458
00:16:02,880 --> 00:16:08,320
waiting

459
00:16:03,680 --> 00:16:11,839
ten seconds

460
00:16:08,320 --> 00:16:15,120
huh what is native k nativ

461
00:16:11,839 --> 00:16:16,560
is uh one possible solution to do

462
00:16:15,120 --> 00:16:19,759
serverless deployments

463
00:16:16,560 --> 00:16:22,638
in kubernetes like there is also open

464
00:16:19,759 --> 00:16:25,680
pass and few others

465
00:16:22,639 --> 00:16:27,600
and what it does is it monitors the

466
00:16:25,680 --> 00:16:30,880
traffic coming in and out

467
00:16:27,600 --> 00:16:33,839
and depending on the traffic and

468
00:16:30,880 --> 00:16:35,519
some internal configuration it decides

469
00:16:33,839 --> 00:16:36,079
how many replicas of application it

470
00:16:35,519 --> 00:16:38,639
should have

471
00:16:36,079 --> 00:16:41,040
like nothing 5 000 whatever the number

472
00:16:38,639 --> 00:16:42,639
is and it also cues those incoming

473
00:16:41,040 --> 00:16:45,360
requests so that when there is nothing

474
00:16:42,639 --> 00:16:46,240
you saw that there was no downtime in my

475
00:16:45,360 --> 00:16:47,920
case

476
00:16:46,240 --> 00:16:49,759
uh because when there is there are no

477
00:16:47,920 --> 00:16:50,560
replicas if you queue those requests and

478
00:16:49,759 --> 00:16:52,000
wait

479
00:16:50,560 --> 00:16:54,319
did you create a new one did you create

480
00:16:52,000 --> 00:16:57,120
the yes okay and

481
00:16:54,320 --> 00:16:57,120
send it down there

482
00:16:57,839 --> 00:17:05,839
drank sex is slow today

483
00:17:06,319 --> 00:17:11,039
yeah no it's kind of it's one of those

484
00:17:10,319 --> 00:17:15,760
things you know

485
00:17:11,039 --> 00:17:15,760
uh it's one of those things that

486
00:17:16,079 --> 00:17:20,480
few years ago i mean 10 years ago if i

487
00:17:18,559 --> 00:17:22,079
would need to wait only three days until

488
00:17:20,480 --> 00:17:24,160
my new release is in production i would

489
00:17:22,079 --> 00:17:25,839
be so happy and now i get

490
00:17:24,160 --> 00:17:27,360
really really disappointed because i

491
00:17:25,839 --> 00:17:29,840
need to wait more than

492
00:17:27,359 --> 00:17:32,719
no more than four minutes anyway it will

493
00:17:29,840 --> 00:17:34,799
fail it's gonna be horrible uh

494
00:17:32,720 --> 00:17:35,760
i'm going to save you from watching that

495
00:17:34,799 --> 00:17:37,360
embarrassment

496
00:17:35,760 --> 00:17:38,799
on the screen and we're going to go to

497
00:17:37,360 --> 00:17:41,918
the next one

498
00:17:38,799 --> 00:17:43,039
uh so what else do we have in uh in

499
00:17:41,919 --> 00:17:48,400
kubernetes

500
00:17:43,039 --> 00:17:48,400
let me run another set of commands and

501
00:17:48,960 --> 00:17:55,840
show you this is now by default

502
00:17:52,320 --> 00:17:57,520
if you work with kubernetes by default

503
00:17:55,840 --> 00:17:59,600
you will be using rolling up the

504
00:17:57,520 --> 00:18:01,120
strategy which unfortunately many people

505
00:17:59,600 --> 00:18:02,559
keep by default because they don't know

506
00:18:01,120 --> 00:18:04,239
that there is anything else

507
00:18:02,559 --> 00:18:08,399
and then they realize later on how

508
00:18:04,240 --> 00:18:10,160
terribly unappropriate hey there you go

509
00:18:08,400 --> 00:18:11,919
this this is what all most of your

510
00:18:10,160 --> 00:18:13,760
applications are doing most of the time

511
00:18:11,919 --> 00:18:15,280
whenever you deploy this is why most of

512
00:18:13,760 --> 00:18:16,559
the people are deploying once every

513
00:18:15,280 --> 00:18:18,559
three months

514
00:18:16,559 --> 00:18:20,639
because of that thing happening over

515
00:18:18,559 --> 00:18:23,360
here anyways

516
00:18:20,640 --> 00:18:24,160
going back to uh the third one rolling

517
00:18:23,360 --> 00:18:25,520
updates

518
00:18:24,160 --> 00:18:27,360
do you know what role who doesn't know

519
00:18:25,520 --> 00:18:31,918
what's rolling updates

520
00:18:27,360 --> 00:18:34,719
okay uh shame um

521
00:18:31,919 --> 00:18:36,400
so what uh what rolling updates means

522
00:18:34,720 --> 00:18:38,320
actually i have a graph here

523
00:18:36,400 --> 00:18:40,640
what rolling updates means is that when

524
00:18:38,320 --> 00:18:42,159
you have multiple replicas of your

525
00:18:40,640 --> 00:18:44,960
application they're most of the time

526
00:18:42,160 --> 00:18:46,960
stateless or they share the state

527
00:18:44,960 --> 00:18:49,360
between them and so on and so forth

528
00:18:46,960 --> 00:18:51,440
what we do when we deploy a new release

529
00:18:49,360 --> 00:18:53,280
we shut down one of those replicas and

530
00:18:51,440 --> 00:18:55,200
put a new one in its place

531
00:18:53,280 --> 00:18:57,200
and then we shut down the second and put

532
00:18:55,200 --> 00:18:58,480
this uh put the second one in its place

533
00:18:57,200 --> 00:19:00,320
and so on and so forth

534
00:18:58,480 --> 00:19:02,080
so we are rolling new release one

535
00:19:00,320 --> 00:19:04,159
replica at a time or ten percent at the

536
00:19:02,080 --> 00:19:06,799
time or whatever the criteria is

537
00:19:04,160 --> 00:19:08,000
and in that sense there is no moment in

538
00:19:06,799 --> 00:19:10,720
that process

539
00:19:08,000 --> 00:19:12,559
when your application is not running the

540
00:19:10,720 --> 00:19:13,360
problematic part that i didn't mention

541
00:19:12,559 --> 00:19:16,399
before

542
00:19:13,360 --> 00:19:18,399
and the reason why uh this is hard apart

543
00:19:16,400 --> 00:19:20,799
from all the reasons i mentioned before

544
00:19:18,400 --> 00:19:22,240
is that for this to work and for almost

545
00:19:20,799 --> 00:19:24,480
everything else to work

546
00:19:22,240 --> 00:19:25,760
that means that you need to create the

547
00:19:24,480 --> 00:19:27,760
version your apis

548
00:19:25,760 --> 00:19:28,879
you need to be backwards compatible you

549
00:19:27,760 --> 00:19:30,559
need to have data

550
00:19:28,880 --> 00:19:32,160
database schemas that are compatible

551
00:19:30,559 --> 00:19:32,960
with previous version and so on and so

552
00:19:32,160 --> 00:19:35,520
forth right

553
00:19:32,960 --> 00:19:38,000
you need to ensure that every single

554
00:19:35,520 --> 00:19:40,400
time you make a change to your code

555
00:19:38,000 --> 00:19:41,360
that changes is not only doing whatever

556
00:19:40,400 --> 00:19:43,200
it should be doing

557
00:19:41,360 --> 00:19:44,879
but it is compatible with the previous

558
00:19:43,200 --> 00:19:47,600
version of your application

559
00:19:44,880 --> 00:19:48,720
if you don't do that this will never

560
00:19:47,600 --> 00:19:50,559
work

561
00:19:48,720 --> 00:19:52,160
because you will have a period of time

562
00:19:50,559 --> 00:19:55,280
which can be a second

563
00:19:52,160 --> 00:19:57,200
or a full day during which multiple

564
00:19:55,280 --> 00:19:59,600
releases of your application will be

565
00:19:57,200 --> 00:20:02,159
running in parallel

566
00:19:59,600 --> 00:20:03,840
uh and finally at the one moment then

567
00:20:02,159 --> 00:20:05,360
that will not be happening only new

568
00:20:03,840 --> 00:20:07,520
release will be running in parallel and

569
00:20:05,360 --> 00:20:10,399
i'm going to show you that right now

570
00:20:07,520 --> 00:20:11,520
and we're going to see the same thing i

571
00:20:10,400 --> 00:20:14,400
showed you before

572
00:20:11,520 --> 00:20:17,039
a loop of sending requests which at one

573
00:20:14,400 --> 00:20:19,120
moment will start showing you

574
00:20:17,039 --> 00:20:20,400
instead of the message http example it

575
00:20:19,120 --> 00:20:22,719
should say something else

576
00:20:20,400 --> 00:20:25,280
i forgot what that something else is but

577
00:20:22,720 --> 00:20:27,600
it will take a bit

578
00:20:25,280 --> 00:20:28,399
and how much time i have oh i'm very

579
00:20:27,600 --> 00:20:32,080
good

580
00:20:28,400 --> 00:20:34,000
excellent anyways

581
00:20:32,080 --> 00:20:35,840
so what will happen with rolling update

582
00:20:34,000 --> 00:20:37,440
is that it will be all the time fully

583
00:20:35,840 --> 00:20:40,158
available because

584
00:20:37,440 --> 00:20:42,240
uh there will be no no millisecond no

585
00:20:40,159 --> 00:20:44,240
moment in all that

586
00:20:42,240 --> 00:20:45,360
period on all that process when your

587
00:20:44,240 --> 00:20:48,080
application will not be

588
00:20:45,360 --> 00:20:49,439
up and running even though two sometimes

589
00:20:48,080 --> 00:20:51,039
even more

590
00:20:49,440 --> 00:20:52,720
versions of your application will be

591
00:20:51,039 --> 00:20:53,360
running in parallel and serving requests

592
00:20:52,720 --> 00:20:56,000
to

593
00:20:53,360 --> 00:20:57,199
to random users uh it will be very

594
00:20:56,000 --> 00:20:59,679
responsive and it is

595
00:20:57,200 --> 00:21:01,440
very responsive uh progressive rollout

596
00:20:59,679 --> 00:21:05,039
still doesn't work really because

597
00:21:01,440 --> 00:21:07,200
it is doing this right one there done

598
00:21:05,039 --> 00:21:09,440
up and down up and down up and down but

599
00:21:07,200 --> 00:21:11,280
it doesn't really use any criteria to

600
00:21:09,440 --> 00:21:12,320
decide whether it should continue doing

601
00:21:11,280 --> 00:21:14,639
that or no

602
00:21:12,320 --> 00:21:16,399
should it go back should it go forward

603
00:21:14,640 --> 00:21:19,360
what is it based on

604
00:21:16,400 --> 00:21:20,880
and i say partly because i'm not

605
00:21:19,360 --> 00:21:22,000
actually it's wrong when i said no

606
00:21:20,880 --> 00:21:23,919
criteria

607
00:21:22,000 --> 00:21:26,000
you are kubernetes is using health

608
00:21:23,919 --> 00:21:28,799
checks of your application to confirm

609
00:21:26,000 --> 00:21:29,600
is this really running is this okay but

610
00:21:28,799 --> 00:21:32,158
health check out

611
00:21:29,600 --> 00:21:33,280
the health checks are ridiculously

612
00:21:32,159 --> 00:21:35,120
simplified right

613
00:21:33,280 --> 00:21:36,559
you cannot really make decisions whether

614
00:21:35,120 --> 00:21:38,959
you're doing the right thing or not

615
00:21:36,559 --> 00:21:39,760
based on health checks uh unless you

616
00:21:38,960 --> 00:21:42,400
actually

617
00:21:39,760 --> 00:21:45,200
uh include all promote use queries in a

618
00:21:42,400 --> 00:21:48,000
health check but that would be a bit

619
00:21:45,200 --> 00:21:49,919
a bit silly but it is very it is

620
00:21:48,000 --> 00:21:53,280
relatively cheap to do that

621
00:21:49,919 --> 00:21:54,960
uh because uh you are basically running

622
00:21:53,280 --> 00:21:58,399
the same workload all the time

623
00:21:54,960 --> 00:22:00,240
right uh you might have a moment when

624
00:21:58,400 --> 00:22:01,760
when one additional replica is running

625
00:22:00,240 --> 00:22:03,120
but that's that's more or less

626
00:22:01,760 --> 00:22:05,120
irrelevant and

627
00:22:03,120 --> 00:22:06,158
uh it will not really increase the cost

628
00:22:05,120 --> 00:22:08,239
especially if you

629
00:22:06,159 --> 00:22:09,520
if you run horizontal pedal scaler which

630
00:22:08,240 --> 00:22:10,960
will also

631
00:22:09,520 --> 00:22:14,240
manage the workload the number of

632
00:22:10,960 --> 00:22:17,679
replicas of your application

633
00:22:14,240 --> 00:22:18,400
oh there we go uh you can see that now

634
00:22:17,679 --> 00:22:20,400
it

635
00:22:18,400 --> 00:22:22,720
like this guy over there rolling update

636
00:22:20,400 --> 00:22:24,880
and then a bit of example so

637
00:22:22,720 --> 00:22:26,000
there was a moment before when we were

638
00:22:24,880 --> 00:22:28,799
receiving requests from

639
00:22:26,000 --> 00:22:30,640
one version and the other in parallel

640
00:22:28,799 --> 00:22:32,320
and then everything is going from uh to

641
00:22:30,640 --> 00:22:35,679
the new one and there is no down time

642
00:22:32,320 --> 00:22:37,360
and we leave happily ever after

643
00:22:35,679 --> 00:22:38,960
and then this is everybody's favorite

644
00:22:37,360 --> 00:22:41,199
strategy who is using

645
00:22:38,960 --> 00:22:42,960
blue grey deployment who is planning to

646
00:22:41,200 --> 00:22:45,200
use it

647
00:22:42,960 --> 00:22:45,200
why

648
00:22:46,640 --> 00:22:52,400
huh it's a horrible horrible thing to do

649
00:22:52,480 --> 00:22:56,080
blue green deployment is horrifyingly

650
00:22:54,640 --> 00:22:58,640
bad

651
00:22:56,080 --> 00:23:00,240
it was great long time ago and like a

652
00:22:58,640 --> 00:23:00,720
long time ago i mean 10 years you know

653
00:23:00,240 --> 00:23:04,080
that

654
00:23:00,720 --> 00:23:04,720
that's a long long time ago the problem

655
00:23:04,080 --> 00:23:06,879
with the

656
00:23:04,720 --> 00:23:10,240
blue green deployment is that it assumes

657
00:23:06,880 --> 00:23:12,480
that you have too much money to spend

658
00:23:10,240 --> 00:23:14,480
because for blue the idea behind blue

659
00:23:12,480 --> 00:23:16,559
green deployment is that i'm going to

660
00:23:14,480 --> 00:23:18,400
keep the old release running i'm going

661
00:23:16,559 --> 00:23:20,399
to deploy a new release

662
00:23:18,400 --> 00:23:22,080
and i'm going to redirect traffic to the

663
00:23:20,400 --> 00:23:24,400
new release and i'm going to keep the

664
00:23:22,080 --> 00:23:27,600
old release running just in case if i

665
00:23:24,400 --> 00:23:30,320
ever want to roll back right

666
00:23:27,600 --> 00:23:31,520
that means that if you need 100 servers

667
00:23:30,320 --> 00:23:34,720
for your workload

668
00:23:31,520 --> 00:23:36,960
you effectively need 200 right

669
00:23:34,720 --> 00:23:38,080
and you need to be filthy rich to be

670
00:23:36,960 --> 00:23:39,440
able to do that

671
00:23:38,080 --> 00:23:42,000
and you will still not be able to

672
00:23:39,440 --> 00:23:45,360
justify because it doesn't make sense

673
00:23:42,000 --> 00:23:48,000
it made sense before when uh

674
00:23:45,360 --> 00:23:50,158
deploying a release took a lot of time

675
00:23:48,000 --> 00:23:53,279
so rolling back would be very expensive

676
00:23:50,159 --> 00:23:54,960
in time from time perspective and when

677
00:23:53,279 --> 00:23:56,240
we didn't have virtual machines and

678
00:23:54,960 --> 00:23:57,919
especially when we didn't have

679
00:23:56,240 --> 00:23:58,400
kubernetes and containers and all those

680
00:23:57,919 --> 00:24:01,279
things

681
00:23:58,400 --> 00:24:02,799
it makes absolutely no sense today and i

682
00:24:01,279 --> 00:24:04,799
know that i'm going to be trashed on

683
00:24:02,799 --> 00:24:08,559
twitter and whatever for saying that

684
00:24:04,799 --> 00:24:12,639
but blue green deployment is silly

685
00:24:08,559 --> 00:24:12,639
so we're going to skip it we're going

686
00:24:15,120 --> 00:24:20,639
why would i show you something silly

687
00:24:18,240 --> 00:24:21,600
makes absolutely no sense did you expect

688
00:24:20,640 --> 00:24:24,240
a demo

689
00:24:21,600 --> 00:24:26,000
is that what you'd want it okay you're

690
00:24:24,240 --> 00:24:28,240
not getting a demo

691
00:24:26,000 --> 00:24:30,000
so i'm going to show you now canary and

692
00:24:28,240 --> 00:24:33,919
while doing that i'm going to

693
00:24:30,000 --> 00:24:36,640
push another change to my application

694
00:24:33,919 --> 00:24:38,960
just so that while i'm talking about it

695
00:24:36,640 --> 00:24:41,360
new release is being deployed

696
00:24:38,960 --> 00:24:42,559
and what i'm going to do here is again

697
00:24:41,360 --> 00:24:46,240
output

698
00:24:42,559 --> 00:24:48,080
uh i'll put some message from my

699
00:24:46,240 --> 00:24:50,880
application we're going to see what

700
00:24:48,080 --> 00:24:52,639
what what is doing so what are we going

701
00:24:50,880 --> 00:24:54,640
to do with canary

702
00:24:52,640 --> 00:24:55,919
we're going to do something similar to

703
00:24:54,640 --> 00:24:59,279
rolling updates

704
00:24:55,919 --> 00:25:03,279
right we will be increasing

705
00:24:59,279 --> 00:25:05,279
the number of pods potentially

706
00:25:03,279 --> 00:25:06,880
and the percentage of the traffic going

707
00:25:05,279 --> 00:25:09,679
to the new release

708
00:25:06,880 --> 00:25:10,320
and decreasing what is going to the old

709
00:25:09,679 --> 00:25:13,279
release

710
00:25:10,320 --> 00:25:14,240
so in that aspect it is very similar to

711
00:25:13,279 --> 00:25:16,000
rolling update

712
00:25:14,240 --> 00:25:17,520
the major difference first is that we

713
00:25:16,000 --> 00:25:20,000
are not controlling

714
00:25:17,520 --> 00:25:20,879
how much goes where by the number of

715
00:25:20,000 --> 00:25:22,960
replicas

716
00:25:20,880 --> 00:25:24,799
but rather through networking itself

717
00:25:22,960 --> 00:25:26,960
right it will control

718
00:25:24,799 --> 00:25:28,000
in this case i'm using istio but it

719
00:25:26,960 --> 00:25:29,760
applies to any other

720
00:25:28,000 --> 00:25:31,200
service mesh and probably not service

721
00:25:29,760 --> 00:25:32,960
mesh whatsoever

722
00:25:31,200 --> 00:25:34,320
through networking we control traffic

723
00:25:32,960 --> 00:25:37,679
but what really makes this

724
00:25:34,320 --> 00:25:39,840
very very different is that

725
00:25:37,679 --> 00:25:41,440
we are not just rolling forward rolling

726
00:25:39,840 --> 00:25:44,959
forward rolling forward

727
00:25:41,440 --> 00:25:49,120
we are checking all the time whether

728
00:25:44,960 --> 00:25:53,039
uh the results the experience

729
00:25:49,120 --> 00:25:57,039
that of our users is what we expect

730
00:25:53,039 --> 00:26:00,080
right uh whether is error rate

731
00:25:57,039 --> 00:26:02,559
above certain threshold right uh

732
00:26:00,080 --> 00:26:03,120
what is the duration average duration of

733
00:26:02,559 --> 00:26:05,360
our risk

734
00:26:03,120 --> 00:26:07,520
request shouldn't be above this amount

735
00:26:05,360 --> 00:26:10,000
of milliseconds and so on and so forth

736
00:26:07,520 --> 00:26:10,879
right normally you would have anything

737
00:26:10,000 --> 00:26:14,000
between

738
00:26:10,880 --> 00:26:15,840
2 and 200 different metrics

739
00:26:14,000 --> 00:26:17,520
that you are continuously evaluating

740
00:26:15,840 --> 00:26:19,120
over a period of time

741
00:26:17,520 --> 00:26:20,879
and then after some period of time

742
00:26:19,120 --> 00:26:24,080
saying it looks ok

743
00:26:20,880 --> 00:26:27,440
it looks good uh let

744
00:26:24,080 --> 00:26:28,720
me increase the the reach of my new

745
00:26:27,440 --> 00:26:31,600
release for another 10

746
00:26:28,720 --> 00:26:33,200
or 15 or 20 or whatever it is right and

747
00:26:31,600 --> 00:26:34,320
that whole process can take anything

748
00:26:33,200 --> 00:26:36,320
between minutes

749
00:26:34,320 --> 00:26:38,960
or even days depending on what you're

750
00:26:36,320 --> 00:26:41,039
really measuring

751
00:26:38,960 --> 00:26:43,360
now what you are probably saying now

752
00:26:41,039 --> 00:26:45,520
this is awesome and there are tools

753
00:26:43,360 --> 00:26:47,039
that can help you do that in my case i'm

754
00:26:45,520 --> 00:26:49,120
using eastern flagger

755
00:26:47,039 --> 00:26:50,240
there are others this is so awesome why

756
00:26:49,120 --> 00:26:53,600
don't i did you

757
00:26:50,240 --> 00:26:54,960
you do this uh well most likely because

758
00:26:53,600 --> 00:26:57,520
you can't

759
00:26:54,960 --> 00:26:58,480
uh one of the big reasons why you cannot

760
00:26:57,520 --> 00:27:01,918
do this

761
00:26:58,480 --> 00:27:03,760
is because you need to have really

762
00:27:01,919 --> 00:27:06,159
really firm grasp

763
00:27:03,760 --> 00:27:07,120
on metrics that you're using to monitor

764
00:27:06,159 --> 00:27:11,840
your system

765
00:27:07,120 --> 00:27:14,799
if you're not really confident

766
00:27:11,840 --> 00:27:15,840
in being able to predict when something

767
00:27:14,799 --> 00:27:18,240
is going wrong

768
00:27:15,840 --> 00:27:19,840
based on metrics actually not even

769
00:27:18,240 --> 00:27:21,679
metrics alerts

770
00:27:19,840 --> 00:27:22,959
if you today don't have a system that is

771
00:27:21,679 --> 00:27:26,000
sending you alerts

772
00:27:22,960 --> 00:27:27,760
whenever there is something wrong and

773
00:27:26,000 --> 00:27:29,840
if you're not capable based on those

774
00:27:27,760 --> 00:27:32,158
alerts to perform certain actions

775
00:27:29,840 --> 00:27:33,600
this is too soon for you that's not

776
00:27:32,159 --> 00:27:36,080
necessarily bad

777
00:27:33,600 --> 00:27:37,439
but you do need to have a really really

778
00:27:36,080 --> 00:27:40,158
firm grasp

779
00:27:37,440 --> 00:27:41,760
on the whole monitoring alerting and

780
00:27:40,159 --> 00:27:46,320
metrics and so on and so on

781
00:27:41,760 --> 00:27:46,320
so forth uh area

782
00:27:46,559 --> 00:27:52,559
so you will see vlogger in action soon

783
00:27:50,640 --> 00:27:54,480
it will take another minute technique

784
00:27:52,559 --> 00:27:57,440
slow as somebody already said

785
00:27:54,480 --> 00:27:57,919
anyway what do we get here just like

786
00:27:57,440 --> 00:27:59,440
with

787
00:27:57,919 --> 00:28:01,360
others i mean this is this kind of

788
00:27:59,440 --> 00:28:02,880
awesome just like k native

789
00:28:01,360 --> 00:28:04,559
uh it is highly available it is

790
00:28:02,880 --> 00:28:06,480
responsibility you have really

791
00:28:04,559 --> 00:28:09,200
progressive rollout finally

792
00:28:06,480 --> 00:28:10,080
uh it rolls back when any of those

793
00:28:09,200 --> 00:28:12,399
metrics

794
00:28:10,080 --> 00:28:14,559
or thresholds are not met within given

795
00:28:12,399 --> 00:28:16,000
period of time or given a number of

796
00:28:14,559 --> 00:28:18,080
times and so on and so forth

797
00:28:16,000 --> 00:28:20,240
it is not really the cheapest solution

798
00:28:18,080 --> 00:28:23,360
because you're likely going to run

799
00:28:20,240 --> 00:28:25,760
additional pods more replicas than than

800
00:28:23,360 --> 00:28:28,840
the bare minimum that you need

801
00:28:25,760 --> 00:28:30,000
but outside of that it's also all also

802
00:28:28,840 --> 00:28:31,360
peachy

803
00:28:30,000 --> 00:28:33,279
how much time do i have 10 minutes

804
00:28:31,360 --> 00:28:36,799
probably right anyways

805
00:28:33,279 --> 00:28:37,440
so which one which one are you gonna

806
00:28:36,799 --> 00:28:39,360
choose

807
00:28:37,440 --> 00:28:41,440
you're most likely going to use recreate

808
00:28:39,360 --> 00:28:43,039
for most of the things especially those

809
00:28:41,440 --> 00:28:46,799
things that were not designed

810
00:28:43,039 --> 00:28:49,440
uh recently

811
00:28:46,799 --> 00:28:50,559
if your application is stateful and by

812
00:28:49,440 --> 00:28:52,799
stateful i mean

813
00:28:50,559 --> 00:28:54,158
it is not replicating state across all

814
00:28:52,799 --> 00:28:55,360
the replicas so that they are all

815
00:28:54,159 --> 00:28:56,799
exactly the same

816
00:28:55,360 --> 00:28:58,959
you're going to use recreate if you

817
00:28:56,799 --> 00:29:02,080
cannot scale you're going to

818
00:28:58,960 --> 00:29:05,919
use recreate if you work in mainframe

819
00:29:02,080 --> 00:29:05,918
and kobold you're going to use recreate

820
00:29:07,200 --> 00:29:11,039
rolling update is the first logical step

821
00:29:09,600 --> 00:29:14,399
when you start using

822
00:29:11,039 --> 00:29:16,000
creating better applications

823
00:29:14,399 --> 00:29:18,239
and especially when you start using

824
00:29:16,000 --> 00:29:19,840
kubernetes don't think that because i

825
00:29:18,240 --> 00:29:21,679
told you that you should that

826
00:29:19,840 --> 00:29:23,918
others are cool you should jump directly

827
00:29:21,679 --> 00:29:25,760
there get the firm grip

828
00:29:23,919 --> 00:29:27,520
here first withdrawing updates make sure

829
00:29:25,760 --> 00:29:29,279
that you're backwards compatible always

830
00:29:27,520 --> 00:29:30,799
that your api is a version and so on and

831
00:29:29,279 --> 00:29:32,240
so forth

832
00:29:30,799 --> 00:29:34,559
but that's the first step towards

833
00:29:32,240 --> 00:29:38,320
something better canaries

834
00:29:34,559 --> 00:29:41,039
are usually the next step once you

835
00:29:38,320 --> 00:29:42,879
really master your prometheus or

836
00:29:41,039 --> 00:29:44,559
whatever metrics and your alerts and

837
00:29:42,880 --> 00:29:46,720
your confidence

838
00:29:44,559 --> 00:29:48,399
actually let's put it this way this is

839
00:29:46,720 --> 00:29:51,360
great when you're confident that you're

840
00:29:48,399 --> 00:29:54,000
not needed anymore

841
00:29:51,360 --> 00:29:55,678
when you can push and change to your

842
00:29:54,000 --> 00:29:57,840
application

843
00:29:55,679 --> 00:29:58,880
and initiate a process that will deploy

844
00:29:57,840 --> 00:30:00,720
to production

845
00:29:58,880 --> 00:30:02,320
and you feel confident confident going

846
00:30:00,720 --> 00:30:04,159
to movies

847
00:30:02,320 --> 00:30:05,600
and watch star trek or whatever you like

848
00:30:04,159 --> 00:30:07,200
watching

849
00:30:05,600 --> 00:30:08,959
and i'm saying movies because you need

850
00:30:07,200 --> 00:30:09,919
to put it on silence you cannot get a

851
00:30:08,960 --> 00:30:11,919
notification

852
00:30:09,919 --> 00:30:15,039
right that's that's why that part is

853
00:30:11,919 --> 00:30:18,240
important then you're ready for this

854
00:30:15,039 --> 00:30:20,240
and finally serverless are just as good

855
00:30:18,240 --> 00:30:22,960
depending on the

856
00:30:20,240 --> 00:30:25,440
architecture of your application or no

857
00:30:22,960 --> 00:30:28,000
we will see a lot of serverless

858
00:30:25,440 --> 00:30:29,440
this year and this will probably be when

859
00:30:28,000 --> 00:30:31,919
they're taking off

860
00:30:29,440 --> 00:30:33,760
outside of being vendor-specific let me

861
00:30:31,919 --> 00:30:35,120
see my canary is still not running it

862
00:30:33,760 --> 00:30:37,360
will run soon this is

863
00:30:35,120 --> 00:30:38,158
old this is so slow but i have no more

864
00:30:37,360 --> 00:30:39,678
time

865
00:30:38,159 --> 00:30:40,880
thank you so i'll have 10 minutes

866
00:30:39,679 --> 00:30:42,399
excellent for question thank you for

867
00:30:40,880 --> 00:30:44,640
telling me uh there are

868
00:30:42,399 --> 00:30:46,879
uh technology conversation blog uh

869
00:30:44,640 --> 00:30:49,200
podcast lists and buy books expand them

870
00:30:46,880 --> 00:30:51,360
to your managers all that stuff

871
00:30:49,200 --> 00:30:54,880
uh 10 minutes for questions while you're

872
00:30:51,360 --> 00:30:54,879
waiting for country deployments

873
00:30:56,159 --> 00:31:01,279
did they scare you is that the thing no

874
00:30:59,039 --> 00:31:05,840
no no amsterdam no

875
00:31:01,279 --> 00:31:05,840
okay okay okay

876
00:31:08,399 --> 00:31:12,320
you cannot do it with any kind of

877
00:31:10,360 --> 00:31:14,639
applications

878
00:31:12,320 --> 00:31:18,399
i mean like for example rarely used

879
00:31:14,640 --> 00:31:18,399
service you will not be able to use

880
00:31:22,720 --> 00:31:27,760
so i so if you don't have traffic

881
00:31:26,159 --> 00:31:29,519
you can simulate traffic you can be

882
00:31:27,760 --> 00:31:32,080
sending traffic to your application if

883
00:31:29,519 --> 00:31:33,600
you don't have a guaranteed traffic

884
00:31:32,080 --> 00:31:35,360
however i don't think that's the best

885
00:31:33,600 --> 00:31:37,760
idea you can do because

886
00:31:35,360 --> 00:31:40,320
what we really want for canadians is to

887
00:31:37,760 --> 00:31:42,320
get the real usage of the application

888
00:31:40,320 --> 00:31:44,240
not like i know from tests that

889
00:31:42,320 --> 00:31:46,799
simulating the environment works

890
00:31:44,240 --> 00:31:49,360
before i got to production right so i

891
00:31:46,799 --> 00:31:51,279
want real use cases real traffic

892
00:31:49,360 --> 00:31:52,479
to be measured and if your application

893
00:31:51,279 --> 00:31:54,240
doesn't have real traffic

894
00:31:52,480 --> 00:31:56,480
i mean it doesn't have consistent

895
00:31:54,240 --> 00:31:59,600
traffic let's say it can appear

896
00:31:56,480 --> 00:32:01,440
either you don't do it or you do it over

897
00:31:59,600 --> 00:32:04,959
a prolonged period of time

898
00:32:01,440 --> 00:32:05,840
you can say okay uh i can deploy it over

899
00:32:04,960 --> 00:32:08,000
a full week

900
00:32:05,840 --> 00:32:09,439
let's say that you have short long

901
00:32:08,000 --> 00:32:11,360
deployment cycles as well

902
00:32:09,440 --> 00:32:13,679
for some reason right in that case you

903
00:32:11,360 --> 00:32:14,320
can say i'm going to measure over five

904
00:32:13,679 --> 00:32:17,120
hours

905
00:32:14,320 --> 00:32:17,918
heck over five hours there will be a

906
00:32:17,120 --> 00:32:20,559
request

907
00:32:17,919 --> 00:32:22,240
or a few right uh so if you prolong it

908
00:32:20,559 --> 00:32:25,440
it could uh could work

909
00:32:22,240 --> 00:32:26,880
but nevertheless uh if you have no

910
00:32:25,440 --> 00:32:28,159
traffic maybe you should not bother

911
00:32:26,880 --> 00:32:30,559
bother it with it and

912
00:32:28,159 --> 00:32:30,559
anyways

913
00:32:32,720 --> 00:32:38,159
oh by the way you see the guy

914
00:32:35,760 --> 00:32:39,840
it's running away running away and a new

915
00:32:38,159 --> 00:32:41,600
ones are coming

916
00:32:39,840 --> 00:32:43,279
and the percentage of those will be

917
00:32:41,600 --> 00:32:44,639
increasing now over time i'm not sure

918
00:32:43,279 --> 00:32:56,559
what the period of time anyways

919
00:32:44,640 --> 00:32:59,840
more questions

920
00:32:56,559 --> 00:33:01,279
then you say okay now this week let's do

921
00:32:59,840 --> 00:33:02,959
big bang

922
00:33:01,279 --> 00:33:06,559
let's read something because where's

923
00:33:02,960 --> 00:33:06,559
some time it's not cost effective

924
00:33:07,440 --> 00:33:13,840
so why not mix the models yes

925
00:33:10,480 --> 00:33:15,600
so so the question is um for the rest

926
00:33:13,840 --> 00:33:17,120
is it feasible can we mix different

927
00:33:15,600 --> 00:33:18,080
strategies and the short answer is

928
00:33:17,120 --> 00:33:20,559
definitely yes

929
00:33:18,080 --> 00:33:22,158
right you can say and this is a common

930
00:33:20,559 --> 00:33:24,799
theme actually that

931
00:33:22,159 --> 00:33:26,320
teams when they're doing a really good

932
00:33:24,799 --> 00:33:27,360
job they're maintaining backwards

933
00:33:26,320 --> 00:33:29,120
compatible

934
00:33:27,360 --> 00:33:30,959
most of the time but sometimes it's

935
00:33:29,120 --> 00:33:32,959
really kind of like oh i can do this in

936
00:33:30,960 --> 00:33:34,559
15 minutes or i can spend a month

937
00:33:32,960 --> 00:33:36,640
make doing the same thing in a backwards

938
00:33:34,559 --> 00:33:37,600
compatible way and then you just change

939
00:33:36,640 --> 00:33:41,279
the strategy

940
00:33:37,600 --> 00:33:44,639
now depending on huh exactly

941
00:33:41,279 --> 00:33:47,519
so yes there is i actually hate

942
00:33:44,640 --> 00:33:49,200
the whole idea that oh we need to do

943
00:33:47,519 --> 00:33:51,200
this and only this

944
00:33:49,200 --> 00:33:52,880
our goal is to understand different

945
00:33:51,200 --> 00:33:55,120
aspects of different

946
00:33:52,880 --> 00:33:57,039
life cycles and so on and so forth and

947
00:33:55,120 --> 00:33:58,158
to apply what makes sense in any given

948
00:33:57,039 --> 00:34:00,559
situation

949
00:33:58,159 --> 00:34:02,480
uh i don't think that there should be a

950
00:34:00,559 --> 00:34:04,840
process that must be followed always no

951
00:34:02,480 --> 00:34:07,279
matter what no matter what the process

952
00:34:04,840 --> 00:34:10,399
is

953
00:34:07,279 --> 00:34:11,839
anybody else no no

954
00:34:10,399 --> 00:34:13,520
how did you guys do canary with your

955
00:34:11,839 --> 00:34:16,799
database

956
00:34:13,520 --> 00:34:18,960
databases with databases if they are

957
00:34:16,800 --> 00:34:20,240
rapidly if they are replicated then it

958
00:34:18,960 --> 00:34:22,639
should be okay

959
00:34:20,239 --> 00:34:24,239
if they're replicated if they are not

960
00:34:22,639 --> 00:34:28,159
replicated like

961
00:34:24,239 --> 00:34:31,040
oracle then you better change the

962
00:34:28,159 --> 00:34:31,040
company where you work

963
00:34:31,119 --> 00:34:35,839
but if you update need

964
00:34:36,239 --> 00:34:42,560
during the update and the replicated

965
00:34:39,679 --> 00:34:43,520
is not still updated replicable broken

966
00:34:42,560 --> 00:34:46,719
second

967
00:34:43,520 --> 00:34:48,560
you will update master and no slave and

968
00:34:46,719 --> 00:34:50,799
replica will be broken for example you

969
00:34:48,560 --> 00:34:54,719
are updating from five seven to eight

970
00:34:50,800 --> 00:34:58,560
zero my scale yes so so

971
00:34:54,719 --> 00:35:00,799
it works when you can have

972
00:34:58,560 --> 00:35:02,240
so let me put this this way if your

973
00:35:00,800 --> 00:35:05,599
database or anything else

974
00:35:02,240 --> 00:35:07,598
can be updated without downtime then you

975
00:35:05,599 --> 00:35:08,400
could potentially do canary or any other

976
00:35:07,599 --> 00:35:10,000
strategy

977
00:35:08,400 --> 00:35:11,920
now if your application cannot be

978
00:35:10,000 --> 00:35:13,680
updated in any form of way without

979
00:35:11,920 --> 00:35:15,680
downtime then you're messed up

980
00:35:13,680 --> 00:35:17,520
now there is an all the sorts of grey

981
00:35:15,680 --> 00:35:19,118
for example with mysql i haven't worked

982
00:35:17,520 --> 00:35:21,520
in a while so i don't really have the

983
00:35:19,119 --> 00:35:23,440
answer for mysql but if you cannot do it

984
00:35:21,520 --> 00:35:25,520
then you do something else you shouldn't

985
00:35:23,440 --> 00:35:26,560
be doing canaris only because it's

986
00:35:25,520 --> 00:35:29,040
amazing or

987
00:35:26,560 --> 00:35:30,320
you shouldn't make a database serverless

988
00:35:29,040 --> 00:35:32,720
because

989
00:35:30,320 --> 00:35:34,320
it's in and all those things so for

990
00:35:32,720 --> 00:35:36,640
databases

991
00:35:34,320 --> 00:35:38,240
cache implementations like radius

992
00:35:36,640 --> 00:35:40,960
flagger implements

993
00:35:38,240 --> 00:35:45,839
traffic by the way this is the author of

994
00:35:40,960 --> 00:35:45,839
the flagger that i'm showing you

995
00:35:47,200 --> 00:35:51,598
and you will see a lot next talk is is

996
00:35:49,839 --> 00:35:52,160
basically the same what i said but in a

997
00:35:51,599 --> 00:35:55,119
different

998
00:35:52,160 --> 00:35:55,118
with spanish accent

999
00:35:55,520 --> 00:35:59,839
anybody else

1000
00:36:08,000 --> 00:36:11,119
i hope so it's just that i i don't know

1001
00:36:10,720 --> 00:36:12,799
so

1002
00:36:11,119 --> 00:36:14,560
most of the terms are serverless which

1003
00:36:12,800 --> 00:36:17,839
is silly because

1004
00:36:14,560 --> 00:36:18,480
there are servers by the way uh now you

1005
00:36:17,839 --> 00:36:19,839
can say it

1006
00:36:18,480 --> 00:36:22,880
it's called serverless because we don't

1007
00:36:19,839 --> 00:36:24,560
really most people do not

1008
00:36:22,880 --> 00:36:26,320
care about servers that's managed by

1009
00:36:24,560 --> 00:36:28,560
somebody else functions

1010
00:36:26,320 --> 00:36:30,000
is even worse term uh function as a

1011
00:36:28,560 --> 00:36:30,880
service or whatever they're calling it

1012
00:36:30,000 --> 00:36:32,480
because

1013
00:36:30,880 --> 00:36:33,680
it sounds realistic that your all your

1014
00:36:32,480 --> 00:36:36,320
applications are going to be single

1015
00:36:33,680 --> 00:36:39,680
function deployed

1016
00:36:36,320 --> 00:36:40,000
so yes i mean you can come up with a new

1017
00:36:39,680 --> 00:36:40,960
term

1018
00:36:40,000 --> 00:36:44,320
i'm not sure whether you're going to

1019
00:36:40,960 --> 00:36:44,320
convince anybody but yes

1020
00:36:44,560 --> 00:36:49,440
well i don't see five minutes so

1021
00:36:47,599 --> 00:36:51,520
i'm so fast talking i hear more

1022
00:36:49,440 --> 00:36:55,760
questions excellent

1023
00:36:51,520 --> 00:36:58,400
kind of hundred percent over there

1024
00:36:55,760 --> 00:36:58,400
anybody else

1025
00:36:59,200 --> 00:37:03,279
huh you want to go to the toilet pippy

1026
00:37:00,800 --> 00:37:03,280
and kaka

1027
00:37:04,000 --> 00:37:07,280
i have a i have a daughter so i'm

1028
00:37:05,760 --> 00:37:10,000
allowed to say peeping kaka without

1029
00:37:07,280 --> 00:37:14,320
anybody gets offended

1030
00:37:10,000 --> 00:37:23,839
no given once even twice

1031
00:37:14,320 --> 00:37:23,839
hey yes

1032
00:37:30,240 --> 00:37:34,000
i mean that's kind of like in parallel

1033
00:37:32,079 --> 00:37:36,320
with anything else so you would probably

1034
00:37:34,000 --> 00:37:37,839
these days you service mesh of one type

1035
00:37:36,320 --> 00:37:39,680
of another that could be mirroring your

1036
00:37:37,839 --> 00:37:41,520
traffic wherever it's going

1037
00:37:39,680 --> 00:37:44,240
and then basically it's just doing the

1038
00:37:41,520 --> 00:37:44,240
same thing twice

1039
00:37:48,960 --> 00:37:54,880
yeah anybody else

1040
00:37:52,000 --> 00:38:05,839
okay i give you three minutes back of

1041
00:37:54,880 --> 00:38:05,839
your life

1042
00:38:09,200 --> 00:38:11,279
you

