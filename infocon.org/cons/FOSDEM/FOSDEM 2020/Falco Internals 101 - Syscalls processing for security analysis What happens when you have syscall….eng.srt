1
00:00:08,080 --> 00:00:11,440
so hello everyone welcome

2
00:00:09,599 --> 00:00:12,639
our next speaker in security the room

3
00:00:11,440 --> 00:00:15,160
lorenzo fontana

4
00:00:12,639 --> 00:00:17,039
and his talk about uh falco internals

5
00:00:15,160 --> 00:00:20,080
internals101

6
00:00:17,039 --> 00:00:20,640
hey um i feel a lot of pressure just

7
00:00:20,080 --> 00:00:23,680
because

8
00:00:20,640 --> 00:00:27,439
i mean it's saturday and it's lunchtime

9
00:00:23,680 --> 00:00:29,359
so you're all here to listen to this so

10
00:00:27,439 --> 00:00:31,359
it's very very it's very very high

11
00:00:29,359 --> 00:00:33,840
pressure situation so

12
00:00:31,359 --> 00:00:35,200
we have been we're going to talk about

13
00:00:33,840 --> 00:00:39,120
the falco project

14
00:00:35,200 --> 00:00:41,200
and how we have been able to

15
00:00:39,120 --> 00:00:42,959
put cisco's to user space bring cisco's

16
00:00:41,200 --> 00:00:44,640
user space in a very fast way with very

17
00:00:42,960 --> 00:00:47,440
low throughput

18
00:00:44,640 --> 00:00:48,960
the thing is that i didn't really wanted

19
00:00:47,440 --> 00:00:49,360
to talk about the falco project which is

20
00:00:48,960 --> 00:00:53,280
the

21
00:00:49,360 --> 00:00:55,519
cnc project i work on but while doing it

22
00:00:53,280 --> 00:00:56,960
actually discovered that we have been

23
00:00:55,520 --> 00:00:58,480
making

24
00:00:56,960 --> 00:01:01,440
something very interesting for everyone

25
00:00:58,480 --> 00:01:04,878
to listen to so i actually wanted to

26
00:01:01,440 --> 00:01:07,119
to tell everyone if you already knew me

27
00:01:04,879 --> 00:01:09,360
it would be probably because of my book

28
00:01:07,119 --> 00:01:11,840
linux observability with bpf

29
00:01:09,360 --> 00:01:13,439
and maybe because you're involved in the

30
00:01:11,840 --> 00:01:15,759
kubernetes space or

31
00:01:13,439 --> 00:01:17,279
cabinet space in some way and also

32
00:01:15,759 --> 00:01:17,680
because they've been engaged for them

33
00:01:17,280 --> 00:01:21,119
for

34
00:01:17,680 --> 00:01:21,119
the past five years probably

35
00:01:21,439 --> 00:01:25,600
first things first i will i want to give

36
00:01:23,439 --> 00:01:28,798
you some context

37
00:01:25,600 --> 00:01:29,360
to to let you understand falco is a

38
00:01:28,799 --> 00:01:32,000
project

39
00:01:29,360 --> 00:01:34,400
that basically takes every cisco that

40
00:01:32,000 --> 00:01:39,200
happens

41
00:01:34,400 --> 00:01:42,000
when no one is looking at that i mean

42
00:01:39,200 --> 00:01:43,439
every cisco is brought to user space and

43
00:01:42,000 --> 00:01:46,240
with those c schools

44
00:01:43,439 --> 00:01:47,439
falco process a set of rules that gen

45
00:01:46,240 --> 00:01:51,119
gives you alerts

46
00:01:47,439 --> 00:01:53,919
based on uh what happened in the system

47
00:01:51,119 --> 00:01:55,439
it has been started four years ago and

48
00:01:53,920 --> 00:01:56,880
two years ago it had been donated to the

49
00:01:55,439 --> 00:01:58,559
cncf

50
00:01:56,880 --> 00:02:00,640
so that everyone could contribute and

51
00:01:58,560 --> 00:02:01,280
make it better it's written you see plus

52
00:02:00,640 --> 00:02:04,399
splash with

53
00:02:01,280 --> 00:02:06,399
which is already makes it crazy enough

54
00:02:04,399 --> 00:02:08,160
but we wanted to add cisco's cisco's a

55
00:02:06,399 --> 00:02:11,280
very interesting mechanism it's an

56
00:02:08,160 --> 00:02:11,599
api to the kernel it abstracts the drive

57
00:02:11,280 --> 00:02:15,280
the

58
00:02:11,599 --> 00:02:16,799
the hardware to you so that you can

59
00:02:15,280 --> 00:02:18,480
just do things without actually

60
00:02:16,800 --> 00:02:20,959
destroying this machine and you can

61
00:02:18,480 --> 00:02:22,879
interact with the kernel

62
00:02:20,959 --> 00:02:24,720
if you think about cisco's whenever you

63
00:02:22,879 --> 00:02:25,920
open a file as it's called done whenever

64
00:02:24,720 --> 00:02:26,959
you establish a connection that is

65
00:02:25,920 --> 00:02:28,319
called it's done whenever you do

66
00:02:26,959 --> 00:02:29,920
anything that's just got it done

67
00:02:28,319 --> 00:02:31,518
even if you use a very high level

68
00:02:29,920 --> 00:02:32,079
language at some point that cisco is

69
00:02:31,519 --> 00:02:33,840
done

70
00:02:32,080 --> 00:02:36,160
and the cisco interface might be

71
00:02:33,840 --> 00:02:39,440
obstructed by libraries like gfc

72
00:02:36,160 --> 00:02:41,920
these things ciscos are very scary

73
00:02:39,440 --> 00:02:43,120
whenever whatever library that deals

74
00:02:41,920 --> 00:02:46,319
with cisco we have

75
00:02:43,120 --> 00:02:50,239
to actually map every single cisco to

76
00:02:46,319 --> 00:02:52,480
to deal with that and this already makes

77
00:02:50,239 --> 00:02:53,360
uh this already creates a very high

78
00:02:52,480 --> 00:02:55,518
buyer for every

79
00:02:53,360 --> 00:02:56,480
for any security implication because if

80
00:02:55,519 --> 00:02:58,400
you have a kernel

81
00:02:56,480 --> 00:02:59,518
and you have cisco's the next kernel

82
00:02:58,400 --> 00:03:02,319
version will have

83
00:02:59,519 --> 00:03:04,640
you know maybe a new cisco maybe a new

84
00:03:02,319 --> 00:03:07,920
parameter maybe a cisco changed version

85
00:03:04,640 --> 00:03:11,359
these kind of things um if i keep saying

86
00:03:07,920 --> 00:03:13,119
the words with ad suffix like change it

87
00:03:11,360 --> 00:03:14,400
it's because i'm italian i do that and i

88
00:03:13,120 --> 00:03:18,400
cannot deal with that so

89
00:03:14,400 --> 00:03:20,800
sorry ciscos are

90
00:03:18,400 --> 00:03:21,440
very powerful are very good for kernel

91
00:03:20,800 --> 00:03:23,440
space

92
00:03:21,440 --> 00:03:24,959
but are not very very good for user

93
00:03:23,440 --> 00:03:27,040
space to bring

94
00:03:24,959 --> 00:03:28,879
every cisco to user space guess what you

95
00:03:27,040 --> 00:03:32,400
have to do

96
00:03:28,879 --> 00:03:34,879
a cisco so it's already

97
00:03:32,400 --> 00:03:37,200
you know a very very hard problem it's

98
00:03:34,879 --> 00:03:39,920
like the kitchen egg

99
00:03:37,200 --> 00:03:41,839
and uh if you don't believe me that the

100
00:03:39,920 --> 00:03:44,000
problem is that try to have a system

101
00:03:41,840 --> 00:03:46,080
with you know a throughput of five

102
00:03:44,000 --> 00:03:48,239
millions of cisco at a second

103
00:03:46,080 --> 00:03:50,319
it's crazy you have five millions of

104
00:03:48,239 --> 00:03:51,760
ciscos and another five millions of

105
00:03:50,319 --> 00:03:54,159
cisco's to

106
00:03:51,760 --> 00:03:54,959
actually deal with the cisco so and and

107
00:03:54,159 --> 00:03:58,239
so on

108
00:03:54,959 --> 00:04:01,760
and it's not 1998 anymore i mean

109
00:03:58,239 --> 00:04:03,680
it was like five but um

110
00:04:01,760 --> 00:04:05,840
the candle was very very simple back

111
00:04:03,680 --> 00:04:05,840
then

112
00:04:06,159 --> 00:04:14,159
things like multi-trading and stuff and

113
00:04:10,159 --> 00:04:16,719
you really need to know

114
00:04:14,159 --> 00:04:18,159
that when you want to deal with cisco's

115
00:04:16,720 --> 00:04:18,799
and when you do a security tool in

116
00:04:18,160 --> 00:04:21,680
general

117
00:04:18,798 --> 00:04:22,960
you also have to deal with time and

118
00:04:21,680 --> 00:04:27,120
guess what you need to

119
00:04:22,960 --> 00:04:28,880
do with time a cisco nice

120
00:04:27,120 --> 00:04:32,880
or you can deal with things like you

121
00:04:28,880 --> 00:04:35,840
know registers like you can go get the

122
00:04:32,880 --> 00:04:36,880
time from the processor but processors

123
00:04:35,840 --> 00:04:39,119
are not obstructed

124
00:04:36,880 --> 00:04:42,080
so you have to deal with time for every

125
00:04:39,120 --> 00:04:46,960
single architecture you want to support

126
00:04:42,080 --> 00:04:46,960
and it's another maze like this place

127
00:04:47,360 --> 00:04:51,680
and also if that wasn't enough cisco's

128
00:04:50,240 --> 00:04:55,040
are not enough

129
00:04:51,680 --> 00:04:56,960
because you get a cisco that tells you

130
00:04:55,040 --> 00:04:58,560
hey someone open this file with these

131
00:04:56,960 --> 00:05:01,840
permissions

132
00:04:58,560 --> 00:05:04,560
thank you but we

133
00:05:01,840 --> 00:05:05,599
are in a different world that 10 years

134
00:05:04,560 --> 00:05:08,560
ago was like

135
00:05:05,600 --> 00:05:10,479
oh 1998 is nothing more than years ago

136
00:05:08,560 --> 00:05:11,360
we're a different world than 20 years

137
00:05:10,479 --> 00:05:15,120
ago

138
00:05:11,360 --> 00:05:18,880
and you uh don't have just

139
00:05:15,120 --> 00:05:20,880
a system that runs apache with some php

140
00:05:18,880 --> 00:05:23,600
you might have containers so you have a

141
00:05:20,880 --> 00:05:25,919
very complex infrastructure

142
00:05:23,600 --> 00:05:27,120
and you want to know in which container

143
00:05:25,919 --> 00:05:29,120
this is collapsing

144
00:05:27,120 --> 00:05:31,039
in which network namespace if the

145
00:05:29,120 --> 00:05:32,800
network namespace was in

146
00:05:31,039 --> 00:05:34,639
what was with the mountain space or if

147
00:05:32,800 --> 00:05:37,199
the attacker actually

148
00:05:34,639 --> 00:05:38,960
you know did something nasty maybe they

149
00:05:37,199 --> 00:05:40,639
change the c group of the networking

150
00:05:38,960 --> 00:05:43,520
spaces kind of things

151
00:05:40,639 --> 00:05:45,120
so having container information is also

152
00:05:43,520 --> 00:05:47,280
useful

153
00:05:45,120 --> 00:05:49,280
and for container information you have

154
00:05:47,280 --> 00:05:51,919
to deal with systems that are very slow

155
00:05:49,280 --> 00:05:54,000
because you are going to take the

156
00:05:51,919 --> 00:05:56,960
container information from

157
00:05:54,000 --> 00:05:58,639
the docker daemon or from container d or

158
00:05:56,960 --> 00:06:00,880
something like with their api

159
00:05:58,639 --> 00:06:02,880
and those are apis designed to go at you

160
00:06:00,880 --> 00:06:05,520
know

161
00:06:02,880 --> 00:06:06,800
with a latency of 100 milliseconds but

162
00:06:05,520 --> 00:06:08,960
cisco's are very fast

163
00:06:06,800 --> 00:06:09,840
five millions a second and you want to

164
00:06:08,960 --> 00:06:13,120
correlate every

165
00:06:09,840 --> 00:06:13,119
c school to

166
00:06:13,280 --> 00:06:18,239
it's crazy to every i

167
00:06:16,479 --> 00:06:20,639
we didn't solve this problem yet in a

168
00:06:18,240 --> 00:06:23,759
very good way

169
00:06:20,639 --> 00:06:25,600
so how to do that um we've been asking

170
00:06:23,759 --> 00:06:27,199
ourselves this question

171
00:06:25,600 --> 00:06:29,039
there's a third answer that we didn't

172
00:06:27,199 --> 00:06:34,560
develop yet but

173
00:06:29,039 --> 00:06:36,960
it's secret and

174
00:06:34,560 --> 00:06:39,919
basically two ways so you just implement

175
00:06:36,960 --> 00:06:39,919
your own kernel module

176
00:06:41,120 --> 00:06:45,919
like you know it's like when you install

177
00:06:44,240 --> 00:06:47,280
virtualbox in your linux machine and

178
00:06:45,919 --> 00:06:50,318
then you need to

179
00:06:47,280 --> 00:06:52,080
you know you need to restart nice

180
00:06:50,319 --> 00:06:54,160
or when you operate your kernel when you

181
00:06:52,080 --> 00:06:57,919
saw some modules imagine

182
00:06:54,160 --> 00:07:00,960
having your company with 100 servers

183
00:06:57,919 --> 00:07:04,960
 updates restarts

184
00:07:00,960 --> 00:07:10,080
the machines and that wasn't very handy

185
00:07:04,960 --> 00:07:11,680
so we also implemented any bpf probe

186
00:07:10,080 --> 00:07:13,359
which everyone knows what is it because

187
00:07:11,680 --> 00:07:15,919
my talk is not done in vpf

188
00:07:13,360 --> 00:07:18,319
and they don't want to explain and you

189
00:07:15,919 --> 00:07:21,680
know ibpf

190
00:07:18,319 --> 00:07:23,840
okay great um like 20 so

191
00:07:21,680 --> 00:07:25,120
i will explain very fast so with the

192
00:07:23,840 --> 00:07:27,198
kernel module you can just go in the

193
00:07:25,120 --> 00:07:28,840
kernel implement your code

194
00:07:27,199 --> 00:07:30,560
and you know it will do whatever you

195
00:07:28,840 --> 00:07:32,080
want pros

196
00:07:30,560 --> 00:07:34,319
you implement whatever you want it's

197
00:07:32,080 --> 00:07:35,919
very efficient because it will carry on

198
00:07:34,319 --> 00:07:36,479
panic your machine and then as soon as

199
00:07:35,919 --> 00:07:39,359
you

200
00:07:36,479 --> 00:07:41,599
do a mistake your servers are all done

201
00:07:39,360 --> 00:07:44,639
and you don't have a way to reboot them

202
00:07:41,599 --> 00:07:47,599
and you know it's very hard

203
00:07:44,639 --> 00:07:48,639
um with an mbpf probe the mechanism is a

204
00:07:47,599 --> 00:07:51,120
bit

205
00:07:48,639 --> 00:07:52,720
more sophisticated you can't implement

206
00:07:51,120 --> 00:07:53,840
whatever you want because there are some

207
00:07:52,720 --> 00:07:55,680
limitations

208
00:07:53,840 --> 00:07:57,359
but you can still go to the kernel and

209
00:07:55,680 --> 00:07:59,440
ask for information in a very efficient

210
00:07:57,360 --> 00:08:02,879
way

211
00:07:59,440 --> 00:08:05,199
so how does this look like

212
00:08:02,879 --> 00:08:06,639
well i initially wanted to do this

213
00:08:05,199 --> 00:08:09,840
presentation in the terminal then turns

214
00:08:06,639 --> 00:08:12,639
out today to do diagrams

215
00:08:09,840 --> 00:08:13,599
so my diagrams are not very good but i

216
00:08:12,639 --> 00:08:15,919
mean

217
00:08:13,599 --> 00:08:17,280
gives an idea so you have the kernel

218
00:08:15,919 --> 00:08:20,479
space and user space

219
00:08:17,280 --> 00:08:22,159
separated you have the kernel module

220
00:08:20,479 --> 00:08:24,080
on the lower band and you have bulk on

221
00:08:22,160 --> 00:08:25,599
the upper bound and in the middle there

222
00:08:24,080 --> 00:08:28,400
are a set of libraries and

223
00:08:25,599 --> 00:08:29,199
tools that you know allow you to process

224
00:08:28,400 --> 00:08:30,799
the cisco

225
00:08:29,199 --> 00:08:33,279
in a very efficient way let's start from

226
00:08:30,800 --> 00:08:34,959
the from the bottom the kernel module

227
00:08:33,279 --> 00:08:36,320
is the first implementation it's still

228
00:08:34,958 --> 00:08:40,319
there and still works with

229
00:08:36,320 --> 00:08:42,080
also and it basically go to the kernel

230
00:08:40,320 --> 00:08:43,360
and attach to every cisco that gets

231
00:08:42,080 --> 00:08:45,040
executed when it

232
00:08:43,360 --> 00:08:47,040
starts executed and when it exits the

233
00:08:45,040 --> 00:08:50,719
execution like imagine putting

234
00:08:47,040 --> 00:08:52,880
uh a jump at the start of every function

235
00:08:50,720 --> 00:08:54,240
and a jump at the end of every function

236
00:08:52,880 --> 00:08:57,600
that

237
00:08:54,240 --> 00:09:01,120
executes the ciscos that's it

238
00:08:57,600 --> 00:09:03,600
when this code executes it sends it

239
00:09:01,120 --> 00:09:05,839
to a ring buffer which we're going to be

240
00:09:03,600 --> 00:09:08,399
talking later

241
00:09:05,839 --> 00:09:10,240
that then is consumed user space profile

242
00:09:08,399 --> 00:09:12,800
descriptor

243
00:09:10,240 --> 00:09:14,240
you know like a device like the device

244
00:09:12,800 --> 00:09:15,760
of your printer because this is a

245
00:09:14,240 --> 00:09:19,519
current module

246
00:09:15,760 --> 00:09:20,319
and then this is consumed by another

247
00:09:19,519 --> 00:09:22,160
library

248
00:09:20,320 --> 00:09:23,760
that enriches all this stuff with

249
00:09:22,160 --> 00:09:24,880
container metadata and stuff which is

250
00:09:23,760 --> 00:09:26,880
called lib scenes

251
00:09:24,880 --> 00:09:29,040
we will talk about this more in details

252
00:09:26,880 --> 00:09:32,160
later and then falco can

253
00:09:29,040 --> 00:09:32,160
you know match the rules

254
00:09:32,320 --> 00:09:40,000
so this is crazy

255
00:09:35,600 --> 00:09:42,000
uh first things are in buffer

256
00:09:40,000 --> 00:09:43,200
i think buffer is a data structure that

257
00:09:42,000 --> 00:09:46,399
is basically

258
00:09:43,200 --> 00:09:48,000
imagine a link at least but that links

259
00:09:46,399 --> 00:09:51,200
to itself

260
00:09:48,000 --> 00:09:52,880
this is to avoid that you have to

261
00:09:51,200 --> 00:09:54,800
what's happening with the microphone uh

262
00:09:52,880 --> 00:09:57,920
this is to avoid that you have to

263
00:09:54,800 --> 00:09:59,519
actually uh shuffle back the buffer

264
00:09:57,920 --> 00:10:01,680
to the point the starting point of the

265
00:09:59,519 --> 00:10:04,480
execution so that you can continue

266
00:10:01,680 --> 00:10:05,120
putting elements and you know the last

267
00:10:04,480 --> 00:10:07,040
element

268
00:10:05,120 --> 00:10:09,120
was was overwritten like first

269
00:10:07,040 --> 00:10:12,399
infrastructure

270
00:10:09,120 --> 00:10:14,320
and um in falco we decided

271
00:10:12,399 --> 00:10:16,560
the perfect size would have been eight

272
00:10:14,320 --> 00:10:19,440
megabytes for it

273
00:10:16,560 --> 00:10:20,800
because it fits well in most of

274
00:10:19,440 --> 00:10:25,279
registers

275
00:10:20,800 --> 00:10:27,120
it's very uh handy to to use

276
00:10:25,279 --> 00:10:28,959
both from kernel space and bottom user

277
00:10:27,120 --> 00:10:30,640
space most users

278
00:10:28,959 --> 00:10:32,560
that have very strange use case they

279
00:10:30,640 --> 00:10:34,399
adjust this but it's a compile time

280
00:10:32,560 --> 00:10:38,239
thing

281
00:10:34,399 --> 00:10:38,240
i personally never had the problem

282
00:10:38,640 --> 00:10:42,240
the kernel takes the events and it mem

283
00:10:41,600 --> 00:10:44,240
copy

284
00:10:42,240 --> 00:10:47,120
the event to the next pointer in the

285
00:10:44,240 --> 00:10:50,160
ring buffer that's why this is fast

286
00:10:47,120 --> 00:10:53,120
so the memory is never uh ever

287
00:10:50,160 --> 00:10:53,839
copied it's just copying the pointer of

288
00:10:53,120 --> 00:10:55,760
the memory

289
00:10:53,839 --> 00:10:57,600
so i i thought the wrong thing and

290
00:10:55,760 --> 00:11:01,200
contradicting myself

291
00:10:57,600 --> 00:11:03,200
the memory of the

292
00:11:01,200 --> 00:11:05,680
the pointer is copied to the ring buffer

293
00:11:03,200 --> 00:11:09,279
so that you have access to that memory

294
00:11:05,680 --> 00:11:11,519
and at that point you can uh

295
00:11:09,279 --> 00:11:13,600
load this data from user space by

296
00:11:11,519 --> 00:11:15,839
reading the dev falco 0

297
00:11:13,600 --> 00:11:15,839
files

298
00:11:19,519 --> 00:11:24,640
this is basically how the structs looks

299
00:11:23,279 --> 00:11:27,200
in

300
00:11:24,640 --> 00:11:28,240
the etc file and these other files

301
00:11:27,200 --> 00:11:31,360
shared between

302
00:11:28,240 --> 00:11:32,000
the user space and current space so you

303
00:11:31,360 --> 00:11:33,760
basically

304
00:11:32,000 --> 00:11:35,760
what's in what you're interested in it's

305
00:11:33,760 --> 00:11:39,200
in the head and detail

306
00:11:35,760 --> 00:11:41,360
and then there's some uh metadata for

307
00:11:39,200 --> 00:11:42,959
for you to understand if your buffer is

308
00:11:41,360 --> 00:11:47,680
performing well

309
00:11:42,959 --> 00:11:50,479
um i'm showing this because uh

310
00:11:47,680 --> 00:11:51,519
i mean we are all used to very high

311
00:11:50,480 --> 00:11:54,720
level code

312
00:11:51,519 --> 00:11:55,760
i mean object oriented programming all

313
00:11:54,720 --> 00:11:57,279
the stuff you know functional

314
00:11:55,760 --> 00:11:58,160
programming all interesting things that

315
00:11:57,279 --> 00:11:59,519
i love

316
00:11:58,160 --> 00:12:01,920
but when you have to do these kind of

317
00:11:59,519 --> 00:12:03,839
things you actually have to

318
00:12:01,920 --> 00:12:05,599
you have no choice then designing a

319
00:12:03,839 --> 00:12:08,320
structure test everything you need

320
00:12:05,600 --> 00:12:11,360
because you have to make it fast and so

321
00:12:08,320 --> 00:12:14,240
this also as the responsibility

322
00:12:11,360 --> 00:12:15,279
you know the single responsibility

323
00:12:14,240 --> 00:12:19,600
concept

324
00:12:15,279 --> 00:12:22,000
um to um you know count the drop demands

325
00:12:19,600 --> 00:12:23,680
count the total number of events count

326
00:12:22,000 --> 00:12:26,399
if there have been preemptions

327
00:12:23,680 --> 00:12:28,239
contest reaches this kind of things drop

328
00:12:26,399 --> 00:12:29,680
demands happen because maybe the ring

329
00:12:28,240 --> 00:12:31,680
buffer is not fast enough

330
00:12:29,680 --> 00:12:33,040
you remember when i said 5 million

331
00:12:31,680 --> 00:12:36,000
ciscos

332
00:12:33,040 --> 00:12:37,920
maybe at 5 million cisco's events are

333
00:12:36,000 --> 00:12:38,959
starting getting dropped so there's no

334
00:12:37,920 --> 00:12:43,279
memory

335
00:12:38,959 --> 00:12:43,279
free in the ring buffer to put them

336
00:12:44,079 --> 00:12:51,439
and at that point

337
00:12:48,160 --> 00:12:55,199
cisco's are not yet

338
00:12:51,440 --> 00:12:57,519
ready to be uh used by

339
00:12:55,200 --> 00:12:58,639
by your application because well you

340
00:12:57,519 --> 00:13:01,680
recycle pointer

341
00:12:58,639 --> 00:13:04,720
first second thing you

342
00:13:01,680 --> 00:13:07,920
go to the pointer to see what's inside

343
00:13:04,720 --> 00:13:09,839
there's memory and then you look

344
00:13:07,920 --> 00:13:11,040
and there's only the name of the cisco

345
00:13:09,839 --> 00:13:14,639
and some other

346
00:13:11,040 --> 00:13:16,079
um you know some other data that you

347
00:13:14,639 --> 00:13:18,160
don't understand

348
00:13:16,079 --> 00:13:20,399
so we had to make a mechanism that's

349
00:13:18,160 --> 00:13:22,880
called fillers

350
00:13:20,399 --> 00:13:23,920
that basically goes to every cisco you

351
00:13:22,880 --> 00:13:28,639
know when i said

352
00:13:23,920 --> 00:13:31,680
do this for five millions of cisco and

353
00:13:28,639 --> 00:13:33,920
it takes with

354
00:13:31,680 --> 00:13:35,120
defensive functions cisco get arguments

355
00:13:33,920 --> 00:13:38,639
deprecated

356
00:13:35,120 --> 00:13:38,639
because there's another way yet

357
00:13:38,880 --> 00:13:43,120
it takes the registers and transforms

358
00:13:41,360 --> 00:13:46,480
that information

359
00:13:43,120 --> 00:13:48,639
to a string or to you know

360
00:13:46,480 --> 00:13:50,480
in this case their information was not

361
00:13:48,639 --> 00:13:53,680
there so it just prints out

362
00:13:50,480 --> 00:13:56,160
not available and

363
00:13:53,680 --> 00:13:57,839
and then if there have been success the

364
00:13:56,160 --> 00:14:00,000
cisco isn't reached

365
00:13:57,839 --> 00:14:02,480
still in the same data structure so you

366
00:14:00,000 --> 00:14:04,320
have to do this for every cisco

367
00:14:02,480 --> 00:14:05,680
two times because there's the enter and

368
00:14:04,320 --> 00:14:08,399
the exit

369
00:14:05,680 --> 00:14:09,599
and nothing i just wanted to share this

370
00:14:08,399 --> 00:14:13,600
with you all because

371
00:14:09,600 --> 00:14:17,519
it's been painful and at some point

372
00:14:13,600 --> 00:14:20,320
you go to people you talk with others

373
00:14:17,519 --> 00:14:21,680
you find out that there's ebpf you find

374
00:14:20,320 --> 00:14:23,199
out that people are very upset

375
00:14:21,680 --> 00:14:25,120
about having to compile their current

376
00:14:23,199 --> 00:14:28,479
module all the times

377
00:14:25,120 --> 00:14:29,360
and you decide to do this with ebpf

378
00:14:28,480 --> 00:14:31,760
again

379
00:14:29,360 --> 00:14:33,519
and it turns out that it's a much much

380
00:14:31,760 --> 00:14:36,240
nicer experience

381
00:14:33,519 --> 00:14:37,120
there is no uh ring buffer involved at

382
00:14:36,240 --> 00:14:39,760
all

383
00:14:37,120 --> 00:14:41,199
because ebpf doesn't allow you you know

384
00:14:39,760 --> 00:14:42,880
to advise and

385
00:14:41,199 --> 00:14:44,240
you know move memory from current space

386
00:14:42,880 --> 00:14:47,519
to user space because

387
00:14:44,240 --> 00:14:51,120
the purpose of it being safe will be

388
00:14:47,519 --> 00:14:54,399
totally you know

389
00:14:51,120 --> 00:14:56,240
it will be totally useless but it has

390
00:14:54,399 --> 00:14:58,320
a set of concepts that allow you to do

391
00:14:56,240 --> 00:15:01,360
that in fancy ways

392
00:14:58,320 --> 00:15:04,880
that are called maps

393
00:15:01,360 --> 00:15:07,120
and in this case libscap which was the

394
00:15:04,880 --> 00:15:10,800
library that before we just

395
00:15:07,120 --> 00:15:13,920
read in the file descriptor loads

396
00:15:10,800 --> 00:15:16,160
an vpf program to kernel space and says

397
00:15:13,920 --> 00:15:17,920
the kernel a kernel takes this object

398
00:15:16,160 --> 00:15:20,719
that i compiled for you

399
00:15:17,920 --> 00:15:21,279
and i can say it's yes and then the kind

400
00:15:20,720 --> 00:15:23,680
of says

401
00:15:21,279 --> 00:15:24,720
oh yes i like this and then the current

402
00:15:23,680 --> 00:15:28,399
says okay

403
00:15:24,720 --> 00:15:30,160
i will send you data and you know

404
00:15:28,399 --> 00:15:32,160
all this conversation was the abba

405
00:15:30,160 --> 00:15:34,880
verifier

406
00:15:32,160 --> 00:15:36,959
which basically make sure that you don't

407
00:15:34,880 --> 00:15:40,800
mess up with the kernel

408
00:15:36,959 --> 00:15:45,199
and at that point data

409
00:15:40,800 --> 00:15:47,599
flows to libscap through ebpf maps

410
00:15:45,199 --> 00:15:50,160
and guess what we had to do to do the

411
00:15:47,600 --> 00:15:50,160
fillers

412
00:15:51,120 --> 00:15:57,839
we had to tell this is very very nice

413
00:15:54,880 --> 00:15:58,639
we had to tell to lipscap to actually

414
00:15:57,839 --> 00:16:02,320
send

415
00:15:58,639 --> 00:16:05,920
ebpf programs in the map

416
00:16:02,320 --> 00:16:06,839
for the kernel to load them at runtime

417
00:16:05,920 --> 00:16:10,719
when they are

418
00:16:06,839 --> 00:16:12,399
needed okay

419
00:16:10,720 --> 00:16:13,839
i mean you have to see the code it's

420
00:16:12,399 --> 00:16:17,279
very funny

421
00:16:13,839 --> 00:16:19,279
and and these make sure that

422
00:16:17,279 --> 00:16:20,399
again every cisco is matched to the

423
00:16:19,279 --> 00:16:23,199
right argument

424
00:16:20,399 --> 00:16:24,720
all the blob data becomes you know um

425
00:16:23,199 --> 00:16:27,519
strings and you have

426
00:16:24,720 --> 00:16:28,800
i mean if you look at the chi mod cisco

427
00:16:27,519 --> 00:16:31,920
you don't want

428
00:16:28,800 --> 00:16:34,319
uh the you know excitation

429
00:16:31,920 --> 00:16:35,439
representation of the the permission you

430
00:16:34,320 --> 00:16:38,480
want to see

431
00:16:35,440 --> 00:16:40,800
uh you want to see these two

432
00:16:38,480 --> 00:16:41,920
zero seven seven seven or do you want

433
00:16:40,800 --> 00:16:45,599
you want to see

434
00:16:41,920 --> 00:16:50,639
the actual name of the constant like uh

435
00:16:45,600 --> 00:16:55,440
you want to see sue id right

436
00:16:50,639 --> 00:16:58,480
and to come back to lipscap just to

437
00:16:55,440 --> 00:17:02,959
to explain better uh what this does

438
00:16:58,480 --> 00:17:04,319
it basically maintains the control loop

439
00:17:02,959 --> 00:17:06,639
through the current module and to the

440
00:17:04,319 --> 00:17:10,399
bpf map because

441
00:17:06,640 --> 00:17:11,360
when you read from that file you know

442
00:17:10,400 --> 00:17:13,839
it's a device

443
00:17:11,359 --> 00:17:14,639
so you continue you have to read right

444
00:17:13,839 --> 00:17:16,799
because

445
00:17:14,640 --> 00:17:18,799
you need to consume it or you lose it

446
00:17:16,799 --> 00:17:19,918
and when you do a security software you

447
00:17:18,799 --> 00:17:22,799
cannot lose data

448
00:17:19,919 --> 00:17:24,400
right you cannot just i'm not reading it

449
00:17:22,799 --> 00:17:27,439
for a while so that

450
00:17:24,400 --> 00:17:29,200
and you know attacker very very very

451
00:17:27,439 --> 00:17:31,120
happy but you're not doing that

452
00:17:29,200 --> 00:17:33,600
so it has the responsibility to do that

453
00:17:31,120 --> 00:17:34,879
and we had to actually do a library that

454
00:17:33,600 --> 00:17:36,959
does that because the

455
00:17:34,880 --> 00:17:38,240
attack surface of that library alone

456
00:17:36,960 --> 00:17:40,720
would have to be

457
00:17:38,240 --> 00:17:42,880
very very small it would have to be just

458
00:17:40,720 --> 00:17:46,080
some lines of code

459
00:17:42,880 --> 00:17:48,080
because at that point since

460
00:17:46,080 --> 00:17:49,840
that you know does the enrichment you

461
00:17:48,080 --> 00:17:51,678
know to the next slide

462
00:17:49,840 --> 00:17:53,360
as a lot of you know code that talks

463
00:17:51,679 --> 00:17:55,919
with content runtimes and

464
00:17:53,360 --> 00:17:57,600
you know other parts that you know might

465
00:17:55,919 --> 00:17:59,360
be compromised

466
00:17:57,600 --> 00:18:02,000
and this also does a very nice thing

467
00:17:59,360 --> 00:18:04,320
which is the scap format which is a file

468
00:18:02,000 --> 00:18:05,280
that you basically can write and read

469
00:18:04,320 --> 00:18:08,159
it's a format

470
00:18:05,280 --> 00:18:09,280
so you can avoid when you need to test

471
00:18:08,160 --> 00:18:11,039
uh

472
00:18:09,280 --> 00:18:12,639
dealing with cisco you can avoid to have

473
00:18:11,039 --> 00:18:15,840
a real kernel you can just

474
00:18:12,640 --> 00:18:15,840
write and read from this file

475
00:18:15,919 --> 00:18:19,280
and then again since that's the

476
00:18:17,679 --> 00:18:21,600
container on time metadata

477
00:18:19,280 --> 00:18:23,600
and i said this is in c plus plus so we

478
00:18:21,600 --> 00:18:24,320
basically had to rewrite the client for

479
00:18:23,600 --> 00:18:27,439
every

480
00:18:24,320 --> 00:18:31,280
container at time nice and um

481
00:18:27,440 --> 00:18:34,559
coordinates metadata and filtering

482
00:18:31,280 --> 00:18:37,200
and this is essentially what falco is uh

483
00:18:34,559 --> 00:18:39,520
well it's much more than this because if

484
00:18:37,200 --> 00:18:43,840
this will be the project will not exist

485
00:18:39,520 --> 00:18:48,400
but it's just a main with a while loop

486
00:18:43,840 --> 00:18:51,918
that has an event called scenes payment

487
00:18:48,400 --> 00:18:54,240
here and every time

488
00:18:51,919 --> 00:18:55,520
uh there's that we go to the next

489
00:18:54,240 --> 00:18:58,720
iteration the pointer is

490
00:18:55,520 --> 00:19:00,639
reset and sent to the next event

491
00:18:58,720 --> 00:19:03,440
and then the falco engine applies the

492
00:19:00,640 --> 00:19:07,120
rules the falco rules to this event

493
00:19:03,440 --> 00:19:10,960
to match and there was a trait

494
00:19:07,120 --> 00:19:13,840
and if you want to see

495
00:19:10,960 --> 00:19:13,840
a falco rule

496
00:19:15,600 --> 00:19:19,199
you still okay to see yes

497
00:19:19,840 --> 00:19:23,678
this is how it looks like so you have

498
00:19:22,160 --> 00:19:28,240
the rule name

499
00:19:23,679 --> 00:19:31,360
it's very it's very fancy uh yamo

500
00:19:28,240 --> 00:19:33,120
no one loves the piano oh my gosh

501
00:19:31,360 --> 00:19:34,799
and that's the description of the rule

502
00:19:33,120 --> 00:19:38,320
and then there's a condition

503
00:19:34,799 --> 00:19:42,639
so in this case

504
00:19:38,320 --> 00:19:42,639
we let me find the very easy one

505
00:19:44,480 --> 00:19:52,320
i don't want one with the macro because

506
00:19:45,840 --> 00:19:55,439
if not i have to explain the macro

507
00:19:52,320 --> 00:19:56,960
okay okay this is a perfect condition so

508
00:19:55,440 --> 00:19:59,360
this in this case

509
00:19:56,960 --> 00:20:01,360
um we have a macro which can we can use

510
00:19:59,360 --> 00:20:02,799
you know to avoid repeating writing

511
00:20:01,360 --> 00:20:06,240
to avoid repeating to write the same

512
00:20:02,799 --> 00:20:09,120
thing and it matches to the event type

513
00:20:06,240 --> 00:20:10,080
exactly so whenever someone executes a

514
00:20:09,120 --> 00:20:13,280
process

515
00:20:10,080 --> 00:20:16,720
with exactly c school

516
00:20:13,280 --> 00:20:20,720
with direction to the left so

517
00:20:16,720 --> 00:20:22,640
when the cisco starts executing it will

518
00:20:20,720 --> 00:20:23,840
actually match and go to the next

519
00:20:22,640 --> 00:20:26,159
condition

520
00:20:23,840 --> 00:20:28,720
so that's why we needed to do all this

521
00:20:26,159 --> 00:20:28,720
crazy stuff

522
00:20:30,400 --> 00:20:34,080
another important thing when you deal

523
00:20:32,640 --> 00:20:38,320
with cisco's

524
00:20:34,080 --> 00:20:41,199
and when you deal with having to

525
00:20:38,320 --> 00:20:42,480
bring them to user space that was one of

526
00:20:41,200 --> 00:20:45,760
the mistakes we've been doing

527
00:20:42,480 --> 00:20:47,280
we've been doing earlier was to actually

528
00:20:45,760 --> 00:20:49,200
send all the cisco

529
00:20:47,280 --> 00:20:52,000
that was the initial point of my

530
00:20:49,200 --> 00:20:54,080
presentation you don't actually have to

531
00:20:52,000 --> 00:20:55,039
you just send the ciscos that match the

532
00:20:54,080 --> 00:20:58,080
conditions

533
00:20:55,039 --> 00:21:00,158
so what we did at some point was to take

534
00:20:58,080 --> 00:21:02,000
some parts of the filtering mechanism

535
00:21:00,159 --> 00:21:03,360
and bring them as close as possible to

536
00:21:02,000 --> 00:21:05,679
kernel space

537
00:21:03,360 --> 00:21:07,360
so that we could actually just take out

538
00:21:05,679 --> 00:21:10,400
the cisco that we needed

539
00:21:07,360 --> 00:21:11,678
with the arguments that we need okay

540
00:21:10,400 --> 00:21:14,159
because maybe there are five million

541
00:21:11,679 --> 00:21:17,840
ciscos but we are interested in opens

542
00:21:14,159 --> 00:21:17,840
of this file

543
00:21:18,559 --> 00:21:23,039
and to summarize you really want to do

544
00:21:21,600 --> 00:21:24,719
an bpf probe when you

545
00:21:23,039 --> 00:21:26,400
do a project that does something like

546
00:21:24,720 --> 00:21:27,919
this because

547
00:21:26,400 --> 00:21:29,600
implementing your own current module is

548
00:21:27,919 --> 00:21:34,080
never a good idea

549
00:21:29,600 --> 00:21:35,760
and having very well-defined boundaries

550
00:21:34,080 --> 00:21:39,439
and interfaces

551
00:21:35,760 --> 00:21:39,940
is always a good idea because

552
00:21:39,440 --> 00:21:42,480
you can

553
00:21:39,940 --> 00:21:45,679
[Music]

554
00:21:42,480 --> 00:21:48,559
you can work on something that you

555
00:21:45,679 --> 00:21:49,039
and that's very well defined again like

556
00:21:48,559 --> 00:21:50,879
as

557
00:21:49,039 --> 00:21:53,039
i said the skap format is very useful

558
00:21:50,880 --> 00:21:54,080
because you can use that format even to

559
00:21:53,039 --> 00:21:57,120
send data to

560
00:21:54,080 --> 00:22:00,399
another server in your infrastructure

561
00:21:57,120 --> 00:22:01,039
so it's it's very easier to you know

562
00:22:00,400 --> 00:22:02,720
make

563
00:22:01,039 --> 00:22:04,799
anything on top of that like a user

564
00:22:02,720 --> 00:22:06,400
interface like wi-sharp right

565
00:22:04,799 --> 00:22:08,400
wireshark basically use the pickup

566
00:22:06,400 --> 00:22:10,880
format i could make

567
00:22:08,400 --> 00:22:13,840
a wireshark like interface for the scap

568
00:22:10,880 --> 00:22:16,080
format for example

569
00:22:13,840 --> 00:22:17,039
and if you're interested in learning

570
00:22:16,080 --> 00:22:19,760
more

571
00:22:17,039 --> 00:22:21,120
because 25 million i guess it's not

572
00:22:19,760 --> 00:22:23,760
enough

573
00:22:21,120 --> 00:22:24,959
and also i speak very slowly you can

574
00:22:23,760 --> 00:22:28,240
join the community

575
00:22:24,960 --> 00:22:31,520
or go to the website or

576
00:22:28,240 --> 00:22:33,280
find me on my email or don't do anything

577
00:22:31,520 --> 00:22:41,840
because you are not interested

578
00:22:33,280 --> 00:22:41,840
and thanks

579
00:22:43,120 --> 00:22:46,959
we might have time for one or two

580
00:22:44,960 --> 00:22:49,360
questions if they will not be too far

581
00:22:46,960 --> 00:22:49,360
hello

582
00:22:50,000 --> 00:22:56,080
scream hello uh

583
00:22:54,080 --> 00:22:58,480
what is the performance impact on

584
00:22:56,080 --> 00:22:59,840
running falcon on your machine

585
00:22:58,480 --> 00:23:02,320
okay that's the first question and the

586
00:22:59,840 --> 00:23:04,879
second question is if uh

587
00:23:02,320 --> 00:23:06,960
something matched the filter if there is

588
00:23:04,880 --> 00:23:08,000
any way to have an action to take place

589
00:23:06,960 --> 00:23:10,480
right away

590
00:23:08,000 --> 00:23:11,919
instead of a simple output something

591
00:23:10,480 --> 00:23:13,840
about happening okay can i

592
00:23:11,919 --> 00:23:14,960
start with a second question uh the

593
00:23:13,840 --> 00:23:17,600
second question was

594
00:23:14,960 --> 00:23:18,720
uh there's any way to do an action when

595
00:23:17,600 --> 00:23:22,158
something happens

596
00:23:18,720 --> 00:23:25,280
like you know doing uh prevention

597
00:23:22,159 --> 00:23:28,799
um like c linux or something like that

598
00:23:25,280 --> 00:23:31,520
well with custom code and there's not

599
00:23:28,799 --> 00:23:32,400
actually falco is not a framework to

600
00:23:31,520 --> 00:23:34,480
design

601
00:23:32,400 --> 00:23:35,679
uh you know prevention mechanism it's

602
00:23:34,480 --> 00:23:37,840
just detection

603
00:23:35,679 --> 00:23:39,039
so it will tell you when something

604
00:23:37,840 --> 00:23:41,918
happens it's

605
00:23:39,039 --> 00:23:43,520
in you know in that kind of uh segment

606
00:23:41,919 --> 00:23:45,200
of security software where

607
00:23:43,520 --> 00:23:46,799
it only tells you hey there's someone

608
00:23:45,200 --> 00:23:50,159
poking you you know

609
00:23:46,799 --> 00:23:52,799
mining uh some bitcoins on your machine

610
00:23:50,159 --> 00:23:53,679
but it doesn't actually stop the miner

611
00:23:52,799 --> 00:23:57,679
from happening

612
00:23:53,679 --> 00:24:00,080
it will send those data to uh you know

613
00:23:57,679 --> 00:24:01,120
uh a server like you know collection

614
00:24:00,080 --> 00:24:04,480
mechanism that

615
00:24:01,120 --> 00:24:06,639
you use and with those information

616
00:24:04,480 --> 00:24:08,240
you can actually take action like it

617
00:24:06,640 --> 00:24:09,600
either manually or with a script or

618
00:24:08,240 --> 00:24:11,120
whatever you want

619
00:24:09,600 --> 00:24:12,959
and the first question was what's the

620
00:24:11,120 --> 00:24:13,840
performance impact of running falcon

621
00:24:12,960 --> 00:24:16,080
machine

622
00:24:13,840 --> 00:24:18,399
uh the performance impacts are very

623
00:24:16,080 --> 00:24:21,439
different based on the rules you apply

624
00:24:18,400 --> 00:24:23,360
uh on most of the machines that

625
00:24:21,440 --> 00:24:24,880
i personally use because operators

626
00:24:23,360 --> 00:24:27,840
project i don't

627
00:24:24,880 --> 00:24:29,200
actually have you know myself uh

628
00:24:27,840 --> 00:24:31,918
production machines but

629
00:24:29,200 --> 00:24:32,640
you know the user said and what i've

630
00:24:31,919 --> 00:24:34,799
been noticing

631
00:24:32,640 --> 00:24:36,559
in the issue and in the community calls

632
00:24:34,799 --> 00:24:37,200
was that it was around one or two

633
00:24:36,559 --> 00:24:40,559
percent

634
00:24:37,200 --> 00:24:41,840
of the cpu usage we are almost

635
00:24:40,559 --> 00:24:44,559
out of the time so if you've got some

636
00:24:41,840 --> 00:24:47,840
other questions please uh talk

637
00:24:44,559 --> 00:24:47,840
to orange

638
00:24:47,960 --> 00:24:55,099
[Applause]

