1
00:00:04,960 --> 00:00:07,359
all right

2
00:00:05,359 --> 00:00:09,920
welcome to the pent ultimate talk of the

3
00:00:07,359 --> 00:00:12,559
fosdem 2020 distribution dev room

4
00:00:09,920 --> 00:00:14,719
up next we have frederick croza talking

5
00:00:12,559 --> 00:00:16,960
about integrating new components on fast

6
00:00:14,719 --> 00:00:21,039
and slow moving distributions

7
00:00:16,960 --> 00:00:24,400
hello everybody so um i'm federic rosa

8
00:00:21,039 --> 00:00:26,880
i'm working at atsuze as

9
00:00:24,400 --> 00:00:31,038
one of the soos linux enterprise release

10
00:00:26,880 --> 00:00:34,239
manager for server and desktop and yeah

11
00:00:31,039 --> 00:00:39,520
i will walk you through how we

12
00:00:34,239 --> 00:00:42,239
handle changing big parts of the distro

13
00:00:39,520 --> 00:00:42,960
on the various distro we we take care of

14
00:00:42,239 --> 00:00:46,000
but first

15
00:00:42,960 --> 00:00:47,760
some words about susie so we don't do

16
00:00:46,000 --> 00:00:49,920
this thing so this is mostly for

17
00:00:47,760 --> 00:00:53,839
french-speaking people

18
00:00:49,920 --> 00:00:56,239
um but we do this thing

19
00:00:53,840 --> 00:00:58,480
especially if you wear at the booth of

20
00:00:56,239 --> 00:01:02,239
the open through the

21
00:00:58,480 --> 00:01:05,360
but yeah more seriously

22
00:01:02,239 --> 00:01:08,479
before before we go into uh

23
00:01:05,360 --> 00:01:11,600
more the details and the policies we

24
00:01:08,479 --> 00:01:16,880
we we use um first

25
00:01:11,600 --> 00:01:19,280
a bit of general

26
00:01:16,880 --> 00:01:20,000
vocal vocabulary so that we are all at

27
00:01:19,280 --> 00:01:24,880
the same

28
00:01:20,000 --> 00:01:28,080
level about distribution style

29
00:01:24,880 --> 00:01:31,360
so rosly these days

30
00:01:28,080 --> 00:01:33,039
there are three kinds of distribution

31
00:01:31,360 --> 00:01:35,680
style

32
00:01:33,040 --> 00:01:37,280
what we could we can call rolling

33
00:01:35,680 --> 00:01:40,560
release

34
00:01:37,280 --> 00:01:43,759
regular release and lts or

35
00:01:40,560 --> 00:01:47,119
enterprise or stable

36
00:01:43,759 --> 00:01:49,840
releases so rolling release

37
00:01:47,119 --> 00:01:51,040
what do we mean by that it's usually

38
00:01:49,840 --> 00:01:54,960
bleeding edge

39
00:01:51,040 --> 00:01:57,280
a bit sometimes a bit too bleeding

40
00:01:54,960 --> 00:01:58,798
released as soon as possible as fast as

41
00:01:57,280 --> 00:02:02,159
possible

42
00:01:58,799 --> 00:02:02,799
and as example i would say open to

43
00:02:02,159 --> 00:02:06,320
stumble with

44
00:02:02,799 --> 00:02:09,679
obviously arch

45
00:02:06,320 --> 00:02:13,040
n2 and probably others

46
00:02:09,679 --> 00:02:16,400
um regular release it's a thing

47
00:02:13,040 --> 00:02:19,120
which came first in the linux world um

48
00:02:16,400 --> 00:02:20,560
usually distribution like that are

49
00:02:19,120 --> 00:02:22,959
released

50
00:02:20,560 --> 00:02:24,640
one time a year sometime two times a

51
00:02:22,959 --> 00:02:27,120
year

52
00:02:24,640 --> 00:02:30,559
in the very old days some crazy people

53
00:02:27,120 --> 00:02:34,160
were doing that every three months

54
00:02:30,560 --> 00:02:34,160
i was part of those crazy people

55
00:02:34,640 --> 00:02:40,079
the thing is those this throw every

56
00:02:37,680 --> 00:02:42,160
every for each release they update

57
00:02:40,080 --> 00:02:45,840
everything

58
00:02:42,160 --> 00:02:46,879
which can have a lot of bring a lot of

59
00:02:45,840 --> 00:02:48,720
challenges

60
00:02:46,879 --> 00:02:51,599
because you have to stabilize everything

61
00:02:48,720 --> 00:02:54,640
at once

62
00:02:51,599 --> 00:02:57,200
and then you have the lts or enterprise

63
00:02:54,640 --> 00:03:00,720
releases which are

64
00:02:57,200 --> 00:03:04,000
released very less often

65
00:03:00,720 --> 00:03:07,280
so early cadence sometimes even less

66
00:03:04,000 --> 00:03:10,480
than that and there

67
00:03:07,280 --> 00:03:12,640
the point is to change as little as

68
00:03:10,480 --> 00:03:15,920
possible

69
00:03:12,640 --> 00:03:19,119
the reason is especially in

70
00:03:15,920 --> 00:03:21,280
in enterprise in the emphasize market

71
00:03:19,120 --> 00:03:23,920
customers are extremely frightened as

72
00:03:21,280 --> 00:03:26,239
soon as you change one bit somewhere

73
00:03:23,920 --> 00:03:27,839
because if they have validated their

74
00:03:26,239 --> 00:03:30,400
entire infrastructure

75
00:03:27,840 --> 00:03:31,920
oh it's running fine with this version

76
00:03:30,400 --> 00:03:33,519
of this this true

77
00:03:31,920 --> 00:03:35,359
and then you tell them yes but you need

78
00:03:33,519 --> 00:03:37,920
to upgrade to the next service pack

79
00:03:35,360 --> 00:03:39,360
and they are like oh my god so how much

80
00:03:37,920 --> 00:03:41,839
has changed

81
00:03:39,360 --> 00:03:44,159
can you guarantee that those those

82
00:03:41,840 --> 00:03:46,879
packages have not changed etc so

83
00:03:44,159 --> 00:03:49,040
um it's really a matter of changing as

84
00:03:46,879 --> 00:03:51,920
little as possible

85
00:03:49,040 --> 00:03:52,480
but still bringing bug fixes new

86
00:03:51,920 --> 00:03:56,079
features

87
00:03:52,480 --> 00:03:57,840
etc etc so there i would put

88
00:03:56,080 --> 00:03:59,120
open see the leap i will explain a bit

89
00:03:57,840 --> 00:04:02,720
later

90
00:03:59,120 --> 00:04:05,519
ubuntu the lts flavor

91
00:04:02,720 --> 00:04:07,439
and on the enterprise market the sea

92
00:04:05,519 --> 00:04:11,280
family slice and sled

93
00:04:07,439 --> 00:04:14,560
rail you name them

94
00:04:11,280 --> 00:04:15,920
so now jumping more into the open season

95
00:04:14,560 --> 00:04:19,839
through the world

96
00:04:15,920 --> 00:04:23,120
uh i will use a lot of

97
00:04:19,839 --> 00:04:26,799
uh acronyms uh obs so

98
00:04:23,120 --> 00:04:31,199
who has uh have heard about what

99
00:04:26,800 --> 00:04:34,880
obs is oh that's nice

100
00:04:31,199 --> 00:04:35,759
so for those who didn't put their hands

101
00:04:34,880 --> 00:04:38,800
up

102
00:04:35,759 --> 00:04:42,160
obs and i see you internet

103
00:04:38,800 --> 00:04:46,400
obs is the open build service

104
00:04:42,160 --> 00:04:46,800
it's a service that opensuse is provide

105
00:04:46,400 --> 00:04:49,679
to

106
00:04:46,800 --> 00:04:50,880
everybody to build packages for almost

107
00:04:49,680 --> 00:04:53,280
every distribution

108
00:04:50,880 --> 00:04:55,120
not just the open source distribution

109
00:04:53,280 --> 00:04:58,638
but it can be

110
00:04:55,120 --> 00:05:03,520
for fedora for red hat for red sorry

111
00:04:58,639 --> 00:05:07,280
for debian ubuntu

112
00:05:03,520 --> 00:05:09,120
yeah tons of distribution are supported

113
00:05:07,280 --> 00:05:12,239
[Music]

114
00:05:09,120 --> 00:05:13,360
so that's what what is part of our

115
00:05:12,240 --> 00:05:15,360
processes

116
00:05:13,360 --> 00:05:16,479
so three as i already mentioned this

117
00:05:15,360 --> 00:05:19,520
linux enterprise

118
00:05:16,479 --> 00:05:24,000
um it's a enterprise disorder that seuss

119
00:05:19,520 --> 00:05:27,198
is is creating

120
00:05:24,000 --> 00:05:30,160
several flavor server desktop

121
00:05:27,199 --> 00:05:30,960
uh open sustainable weed so um

122
00:05:30,160 --> 00:05:34,240
tumbleweed

123
00:05:30,960 --> 00:05:37,440
is a rolling release as i said before of

124
00:05:34,240 --> 00:05:40,479
uh of open shoes

125
00:05:37,440 --> 00:05:41,280
i will maybe sometime talk also about

126
00:05:40,479 --> 00:05:45,039
open source

127
00:05:41,280 --> 00:05:47,599
factory uh the point is that

128
00:05:45,039 --> 00:05:48,639
initially open sustainable weed was a

129
00:05:47,600 --> 00:05:52,240
rolling release

130
00:05:48,639 --> 00:05:54,000
created by greg croatman based on

131
00:05:52,240 --> 00:05:55,520
a regular release of open source and

132
00:05:54,000 --> 00:05:56,880
then he was changing a lot of things on

133
00:05:55,520 --> 00:06:00,159
top of it

134
00:05:56,880 --> 00:06:01,440
and after a lot of discussion a lot of

135
00:06:00,160 --> 00:06:04,800
processes put in place

136
00:06:01,440 --> 00:06:07,680
now the development

137
00:06:04,800 --> 00:06:08,479
this distribution which is open to the

138
00:06:07,680 --> 00:06:12,479
factory

139
00:06:08,479 --> 00:06:14,318
is then tested and shipped

140
00:06:12,479 --> 00:06:17,758
from time to time and this is what we

141
00:06:14,319 --> 00:06:20,880
call open system with more on that later

142
00:06:17,759 --> 00:06:24,319
open to the leaf it's a

143
00:06:20,880 --> 00:06:28,000
stable slash lts release of open source

144
00:06:24,319 --> 00:06:31,120
the point is it's a mix

145
00:06:28,000 --> 00:06:34,479
of components coming from the sleeve

146
00:06:31,120 --> 00:06:36,639
so from from the suse distribution plus

147
00:06:34,479 --> 00:06:37,599
a lot of other packages coming from

148
00:06:36,639 --> 00:06:40,960
tumbleweed

149
00:06:37,600 --> 00:06:43,680
factory let's say so it's a mix of

150
00:06:40,960 --> 00:06:44,560
something new something old and

151
00:06:43,680 --> 00:06:46,800
something new

152
00:06:44,560 --> 00:06:47,840
some people might say it starts to

153
00:06:46,800 --> 00:06:51,039
resemble

154
00:06:47,840 --> 00:06:54,479
things about wedding but no

155
00:06:51,039 --> 00:06:57,919
anyway let's talk about

156
00:06:54,479 --> 00:07:00,960
how we handle integration of

157
00:06:57,919 --> 00:07:02,960
of changes in in the open source and to

158
00:07:00,960 --> 00:07:05,840
the world

159
00:07:02,960 --> 00:07:06,479
first in the obs so in the open build

160
00:07:05,840 --> 00:07:10,638
service

161
00:07:06,479 --> 00:07:14,000
we have the concept of devel project

162
00:07:10,639 --> 00:07:16,000
the point is that every source

163
00:07:14,000 --> 00:07:17,759
when i say source i mean a source

164
00:07:16,000 --> 00:07:21,120
package

165
00:07:17,759 --> 00:07:25,280
every source package need to be

166
00:07:21,120 --> 00:07:29,840
in a project and a project can aggregate

167
00:07:25,280 --> 00:07:30,559
various packages those packages together

168
00:07:29,840 --> 00:07:34,159
and we

169
00:07:30,560 --> 00:07:37,440
tend to have those projects

170
00:07:34,160 --> 00:07:40,560
so those devil projects per topic so you

171
00:07:37,440 --> 00:07:43,520
want obviously to group things together

172
00:07:40,560 --> 00:07:45,599
like having all the things around x11 so

173
00:07:43,520 --> 00:07:47,919
the x11 server

174
00:07:45,599 --> 00:07:49,280
plus the libraries in a single project

175
00:07:47,919 --> 00:07:52,479
because usually they will

176
00:07:49,280 --> 00:07:55,758
have to be built together same about

177
00:07:52,479 --> 00:07:58,800
kd stuff kd all the kd packages

178
00:07:55,759 --> 00:08:01,039
would be in a kde project

179
00:07:58,800 --> 00:08:02,400
a project can be cut in several sub

180
00:08:01,039 --> 00:08:06,639
projects but that's

181
00:08:02,400 --> 00:08:11,039
roughly the id same for gnome etc etc

182
00:08:06,639 --> 00:08:15,919
and any changes in those

183
00:08:11,039 --> 00:08:15,919
project ardon i'm sorry

184
00:08:16,160 --> 00:08:19,759
any change in the distro sorry um has to

185
00:08:18,800 --> 00:08:23,280
be done first

186
00:08:19,759 --> 00:08:26,720
in a developed project and then

187
00:08:23,280 --> 00:08:27,758
pushed to uh to the upstream distro

188
00:08:26,720 --> 00:08:30,160
let's call it this way

189
00:08:27,759 --> 00:08:32,399
also downstream depends uh to the

190
00:08:30,160 --> 00:08:35,680
distribution for integration

191
00:08:32,399 --> 00:08:38,880
the push is can be made either by a

192
00:08:35,679 --> 00:08:38,880
human being or bot

193
00:08:39,360 --> 00:08:43,360
how does it work um don't be frightened

194
00:08:42,399 --> 00:08:46,240
by the

195
00:08:43,360 --> 00:08:46,240
the schema but

196
00:08:46,560 --> 00:08:51,439
you have done some work on any random

197
00:08:49,839 --> 00:08:53,600
packages

198
00:08:51,440 --> 00:08:55,040
so it has been done in the develop

199
00:08:53,600 --> 00:08:57,839
project

200
00:08:55,040 --> 00:08:58,719
now you want to push this work in the

201
00:08:57,839 --> 00:09:01,760
distro

202
00:08:58,720 --> 00:09:03,279
let's say in terms of it so

203
00:09:01,760 --> 00:09:06,080
the thing is you are going to do what we

204
00:09:03,279 --> 00:09:09,439
call a submit request which is basically

205
00:09:06,080 --> 00:09:12,720
the big diff of changes um

206
00:09:09,440 --> 00:09:15,920
you push that to this distro

207
00:09:12,720 --> 00:09:16,720
and then the magic or the pain it

208
00:09:15,920 --> 00:09:20,959
depends

209
00:09:16,720 --> 00:09:24,320
uh where you you are you are begin

210
00:09:20,959 --> 00:09:28,239
so there are going to be several things

211
00:09:24,320 --> 00:09:30,240
done at the same time first this change

212
00:09:28,240 --> 00:09:32,000
is going to be put on what we call a

213
00:09:30,240 --> 00:09:35,200
staging project

214
00:09:32,000 --> 00:09:39,120
this is a snapshot

215
00:09:35,200 --> 00:09:42,399
of the distro and we take this snapshot

216
00:09:39,120 --> 00:09:45,519
and we just put this change in it

217
00:09:42,399 --> 00:09:47,200
and we rebuild the distro based on the

218
00:09:45,519 --> 00:09:50,640
build dependencies etc

219
00:09:47,200 --> 00:09:53,360
caused by this so this

220
00:09:50,640 --> 00:09:53,839
this is building then at the end you

221
00:09:53,360 --> 00:09:58,080
will

222
00:09:53,839 --> 00:10:01,040
end up with a mini mini distro

223
00:09:58,080 --> 00:10:02,000
the destroy build with this change and

224
00:10:01,040 --> 00:10:05,199
then you

225
00:10:02,000 --> 00:10:08,399
give that to open qa which is another

226
00:10:05,200 --> 00:10:11,360
uh souza open to the project uh

227
00:10:08,399 --> 00:10:13,839
which how many people know about open qa

228
00:10:11,360 --> 00:10:16,000
in the room

229
00:10:13,839 --> 00:10:17,120
let's say alf so for the other half

230
00:10:16,000 --> 00:10:20,640
people out

231
00:10:17,120 --> 00:10:23,760
of the room openqa is an automated test

232
00:10:20,640 --> 00:10:26,800
testing framework based on

233
00:10:23,760 --> 00:10:30,560
image recognition among other things

234
00:10:26,800 --> 00:10:32,079
which is there to mimic a human

235
00:10:30,560 --> 00:10:34,319
testing a distribution in all the

236
00:10:32,079 --> 00:10:36,560
applications so it's going to

237
00:10:34,320 --> 00:10:38,079
start a distribution so in a virtual

238
00:10:36,560 --> 00:10:39,760
environment or sometimes even on real

239
00:10:38,079 --> 00:10:42,800
hardware

240
00:10:39,760 --> 00:10:46,160
click everywhere it's where it's needed

241
00:10:42,800 --> 00:10:50,000
check that yes you get the proper button

242
00:10:46,160 --> 00:10:52,399
at the right location etc etc etc so

243
00:10:50,000 --> 00:10:53,040
install the system then run it check

244
00:10:52,399 --> 00:10:55,680
that

245
00:10:53,040 --> 00:10:58,839
whatever application you expect to run

246
00:10:55,680 --> 00:11:01,359
run etc etc

247
00:10:58,839 --> 00:11:04,000
um so we have that

248
00:11:01,360 --> 00:11:04,880
on one point on one side and in parallel

249
00:11:04,000 --> 00:11:08,640
we have

250
00:11:04,880 --> 00:11:13,519
reviews done on the on the change itself

251
00:11:08,640 --> 00:11:16,800
like uh review on the code itself was

252
00:11:13,519 --> 00:11:20,240
does it add a patch is it well-formed

253
00:11:16,800 --> 00:11:22,240
is it uh introducing a vulnerability uh

254
00:11:20,240 --> 00:11:23,680
is it with a reference to an upstream

255
00:11:22,240 --> 00:11:26,720
commit for instance

256
00:11:23,680 --> 00:11:31,359
um there is other reviews like

257
00:11:26,720 --> 00:11:34,720
is there is the entire thing

258
00:11:31,360 --> 00:11:35,920
correct in terms of legal license so

259
00:11:34,720 --> 00:11:38,160
there is a license tag

260
00:11:35,920 --> 00:11:40,319
is there something in the the table

261
00:11:38,160 --> 00:11:44,399
which is

262
00:11:40,320 --> 00:11:44,399
another proprietary license et cetera

263
00:11:44,640 --> 00:11:48,079
and a lot of bots are doing automatic

264
00:11:46,640 --> 00:11:50,160
check on that and

265
00:11:48,079 --> 00:11:53,040
just with that just with the automatic

266
00:11:50,160 --> 00:11:55,360
check we already catch a lot of errors

267
00:11:53,040 --> 00:11:57,279
based on those two if everything looks

268
00:11:55,360 --> 00:12:00,320
fine basically you have a change

269
00:11:57,279 --> 00:12:03,839
uh it doesn't break the the entire qa

270
00:12:00,320 --> 00:12:05,440
thing so then we commit we accept the

271
00:12:03,839 --> 00:12:08,800
change

272
00:12:05,440 --> 00:12:10,399
we put it in the distro we rebuild the

273
00:12:08,800 --> 00:12:13,439
entire distro

274
00:12:10,399 --> 00:12:14,240
and then we have a new iso that we are

275
00:12:13,440 --> 00:12:16,240
going to

276
00:12:14,240 --> 00:12:17,680
put again in open qa but this time not

277
00:12:16,240 --> 00:12:20,720
with a small

278
00:12:17,680 --> 00:12:24,079
sub subset of the test tube but the

279
00:12:20,720 --> 00:12:27,200
entire test shoot

280
00:12:24,079 --> 00:12:30,000
when i say you have a one submit request

281
00:12:27,200 --> 00:12:30,800
in fact we never do that with just one

282
00:12:30,000 --> 00:12:33,120
change

283
00:12:30,800 --> 00:12:34,479
usually we aggregate change together

284
00:12:33,120 --> 00:12:36,399
either because they need to be

285
00:12:34,480 --> 00:12:37,680
aggregated like you need to upgrade two

286
00:12:36,399 --> 00:12:40,240
things in parallel

287
00:12:37,680 --> 00:12:42,000
or do you upgrade that and you need to

288
00:12:40,240 --> 00:12:44,320
patch this other package and this other

289
00:12:42,000 --> 00:12:46,639
package otherwise it breaks

290
00:12:44,320 --> 00:12:48,639
and of course it would mean if you were

291
00:12:46,639 --> 00:12:51,279
doing one staging per

292
00:12:48,639 --> 00:12:53,839
change we could not keep it keep up with

293
00:12:51,279 --> 00:12:53,839
the pace

294
00:12:58,079 --> 00:13:01,519
i forgot if you have questions during

295
00:13:00,720 --> 00:13:05,920
the talk

296
00:13:01,519 --> 00:13:09,200
please ask them don't wait at the end

297
00:13:05,920 --> 00:13:12,160
interrupt me um

298
00:13:09,200 --> 00:13:13,120
so another thing that we have so this is

299
00:13:12,160 --> 00:13:15,360
more for the

300
00:13:13,120 --> 00:13:16,720
through the part of of the thing we have

301
00:13:15,360 --> 00:13:19,600
a policy that we call

302
00:13:16,720 --> 00:13:20,160
factory first which has been in place

303
00:13:19,600 --> 00:13:23,600
for

304
00:13:20,160 --> 00:13:25,920
um quite a while 2017

305
00:13:23,600 --> 00:13:28,160
which is kind of um we want to make sure

306
00:13:25,920 --> 00:13:31,040
that all the work which is done

307
00:13:28,160 --> 00:13:32,719
on the enterprise distribution which is

308
00:13:31,040 --> 00:13:35,279
sometimes a bit

309
00:13:32,720 --> 00:13:36,959
on older software has to be always

310
00:13:35,279 --> 00:13:40,160
pushed to the

311
00:13:36,959 --> 00:13:42,000
factory or tumbleweed thing to make sure

312
00:13:40,160 --> 00:13:44,800
that we

313
00:13:42,000 --> 00:13:46,240
don't keep things just for the

314
00:13:44,800 --> 00:13:48,959
enterprise customer

315
00:13:46,240 --> 00:13:50,320
but it's available to everybody even if

316
00:13:48,959 --> 00:13:52,560
an enterprise customer

317
00:13:50,320 --> 00:13:53,760
everything is under a free software

318
00:13:52,560 --> 00:13:55,680
license

319
00:13:53,760 --> 00:13:57,439
it's not the point of point is to make

320
00:13:55,680 --> 00:14:01,359
sure that we always

321
00:13:57,440 --> 00:14:04,720
retrofit and push our patches or changes

322
00:14:01,360 --> 00:14:05,199
upstream upstream being tumbleweed but

323
00:14:04,720 --> 00:14:07,839
then

324
00:14:05,199 --> 00:14:10,319
of course being in the upstream project

325
00:14:07,839 --> 00:14:12,079
so this is very important because

326
00:14:10,320 --> 00:14:14,720
based on our experience it was not

327
00:14:12,079 --> 00:14:17,920
always the case in the past

328
00:14:14,720 --> 00:14:20,320
and sometimes we had to fix bugs

329
00:14:17,920 --> 00:14:22,479
when we rebased our code base and take a

330
00:14:20,320 --> 00:14:22,959
new snapshot of temporary to create the

331
00:14:22,480 --> 00:14:26,320
next

332
00:14:22,959 --> 00:14:28,079
generation of slee we discovered that a

333
00:14:26,320 --> 00:14:30,560
bug which has been there for

334
00:14:28,079 --> 00:14:31,599
eight years we patched it every two

335
00:14:30,560 --> 00:14:34,000
years when we were

336
00:14:31,600 --> 00:14:34,720
redoing the branching because the patch

337
00:14:34,000 --> 00:14:38,000
was never

338
00:14:34,720 --> 00:14:38,320
upstream and the worst part was when you

339
00:14:38,000 --> 00:14:40,560
were

340
00:14:38,320 --> 00:14:42,399
when we upstream it it was still

341
00:14:40,560 --> 00:14:43,760
applying so it would have been done

342
00:14:42,399 --> 00:14:46,320
eight years ago and

343
00:14:43,760 --> 00:14:48,000
that would have saved work for people

344
00:14:46,320 --> 00:14:49,920
over the years but anyway

345
00:14:48,000 --> 00:14:51,920
so we have that in place and we have a

346
00:14:49,920 --> 00:14:57,120
lot of bots

347
00:14:51,920 --> 00:14:57,120
ensuring that this is done properly

348
00:15:08,800 --> 00:15:12,639
a way to make sure that sleeve doesn't

349
00:15:11,279 --> 00:15:16,000
go in one direction

350
00:15:12,639 --> 00:15:20,000
and open this is another direction uh

351
00:15:16,000 --> 00:15:23,760
because in the end slee is a

352
00:15:20,000 --> 00:15:27,279
downstream of of open source so

353
00:15:23,760 --> 00:15:29,600
if we i mean you you all know you you

354
00:15:27,279 --> 00:15:31,439
you hack on this draw so as soon as

355
00:15:29,600 --> 00:15:33,120
somebody tries to do a downstream and

356
00:15:31,440 --> 00:15:35,839
doesn't contribute back his

357
00:15:33,120 --> 00:15:37,120
changes then they are the one who are

358
00:15:35,839 --> 00:15:40,480
going to feel the pain

359
00:15:37,120 --> 00:15:45,680
later there are ton of examples there

360
00:15:40,480 --> 00:15:49,440
so let's talk about uh gnome 34 so

361
00:15:45,680 --> 00:15:52,000
uh over the previous uh last month

362
00:15:49,440 --> 00:15:53,839
we have been working on on upgrading

363
00:15:52,000 --> 00:15:56,880
glom

364
00:15:53,839 --> 00:15:59,759
in the various distro so let's

365
00:15:56,880 --> 00:15:59,759
go over that

366
00:16:00,240 --> 00:16:04,240
i talked about the devil project on obs

367
00:16:07,040 --> 00:16:13,279
so um usually there is a

368
00:16:10,240 --> 00:16:16,160
one level project which would be in that

369
00:16:13,279 --> 00:16:16,160
case gnome but

370
00:16:16,639 --> 00:16:19,839
the open source minimum team has decided

371
00:16:19,120 --> 00:16:22,959
to use

372
00:16:19,839 --> 00:16:26,399
two layers one layer one

373
00:16:22,959 --> 00:16:28,638
one project which is the gnome factory

374
00:16:26,399 --> 00:16:30,959
devil project which is really the devil

375
00:16:28,639 --> 00:16:30,959
project

376
00:16:32,480 --> 00:16:38,720
sorry for people on the internet

377
00:16:35,519 --> 00:16:42,959
i hope i hope i didn't kill you here

378
00:16:38,720 --> 00:16:46,160
um twice let's avoid the third time

379
00:16:42,959 --> 00:16:50,319
um so yes gnome factory

380
00:16:46,160 --> 00:16:52,959
is the project which contained

381
00:16:50,320 --> 00:16:53,440
the last version um the latest version

382
00:16:52,959 --> 00:16:56,719
of the

383
00:16:53,440 --> 00:17:00,800
stable version of gnome so

384
00:16:56,720 --> 00:17:04,000
until september last year it was

385
00:17:00,800 --> 00:17:05,918
3 32 then 3 34

386
00:17:04,000 --> 00:17:08,000
was released so that's where you expect

387
00:17:05,919 --> 00:17:12,000
to have the latest version

388
00:17:08,000 --> 00:17:15,679
and then um having a cadence of

389
00:17:12,000 --> 00:17:16,640
six months there is another project on

390
00:17:15,679 --> 00:17:18,640
top of that

391
00:17:16,640 --> 00:17:20,880
which is gnome next which is obviously

392
00:17:18,640 --> 00:17:25,120
by its name it's what's going to happen

393
00:17:20,880 --> 00:17:28,240
in gnome in the future the idea

394
00:17:25,119 --> 00:17:31,520
is to have in this project

395
00:17:28,240 --> 00:17:34,720
not the development

396
00:17:31,520 --> 00:17:37,200
packages of gnome from the beginning

397
00:17:34,720 --> 00:17:38,720
like when there is a dot one or dot two

398
00:17:37,200 --> 00:17:40,720
of the next version

399
00:17:38,720 --> 00:17:43,120
because it's changing often and

400
00:17:40,720 --> 00:17:46,559
sometimes um

401
00:17:43,120 --> 00:17:47,918
maybe more in the past everything would

402
00:17:46,559 --> 00:17:49,840
not build

403
00:17:47,919 --> 00:17:52,160
properly et cetera these days it has

404
00:17:49,840 --> 00:17:56,799
improved a lot

405
00:17:52,160 --> 00:17:57,520
but at rc at release candidate time of

406
00:17:56,799 --> 00:18:00,320
gnome

407
00:17:57,520 --> 00:18:01,280
having the packages there so that we can

408
00:18:00,320 --> 00:18:04,559
start preparing

409
00:18:01,280 --> 00:18:07,760
everything in advance um

410
00:18:04,559 --> 00:18:09,918
and this also allows to these two layer

411
00:18:07,760 --> 00:18:12,320
things if we get bugs report on the

412
00:18:09,919 --> 00:18:15,600
stable version we still can push

413
00:18:12,320 --> 00:18:18,000
those bugs those bug fixes

414
00:18:15,600 --> 00:18:19,600
to our users they don't have they are

415
00:18:18,000 --> 00:18:22,640
not blocked because

416
00:18:19,600 --> 00:18:25,120
there is a development version in being

417
00:18:22,640 --> 00:18:28,559
integrated

418
00:18:25,120 --> 00:18:31,840
yep and as i said next next is

419
00:18:28,559 --> 00:18:35,200
layered on top of gnome factory so obs

420
00:18:31,840 --> 00:18:36,559
is smart enough to do links and branches

421
00:18:35,200 --> 00:18:40,400
so

422
00:18:36,559 --> 00:18:42,960
it will detect if you do a change in the

423
00:18:40,400 --> 00:18:43,679
stable branch so google factory it will

424
00:18:42,960 --> 00:18:46,000
propagate

425
00:18:43,679 --> 00:18:46,799
uh immediately to gnomenex so this way

426
00:18:46,000 --> 00:18:49,440
we know we

427
00:18:46,799 --> 00:18:50,720
are not going to lose a fix because we

428
00:18:49,440 --> 00:18:53,120
fixed something

429
00:18:50,720 --> 00:18:53,919
and then we wrap up the version of the

430
00:18:53,120 --> 00:18:57,840
package and

431
00:18:53,919 --> 00:18:57,840
sometimes you end up losing things

432
00:19:00,400 --> 00:19:07,840
so upgrading

433
00:19:03,919 --> 00:19:07,840
334 in thermal weed

434
00:19:08,320 --> 00:19:12,678
so as i said the packages were upgraded

435
00:19:11,360 --> 00:19:15,678
to

436
00:19:12,679 --> 00:19:18,960
3.3.90 something

437
00:19:15,679 --> 00:19:22,720
during the release and we had also

438
00:19:18,960 --> 00:19:25,840
an automated uh build of

439
00:19:22,720 --> 00:19:29,200
a live image so you know this kind of

440
00:19:25,840 --> 00:19:29,918
iso in the old days you were burning a

441
00:19:29,200 --> 00:19:32,000
cd

442
00:19:29,919 --> 00:19:33,600
you were putting that in in a computer

443
00:19:32,000 --> 00:19:34,960
and you were booting the cd directly you

444
00:19:33,600 --> 00:19:37,439
didn't install

445
00:19:34,960 --> 00:19:38,960
to test things these days you can do

446
00:19:37,440 --> 00:19:41,039
that with a vm but still

447
00:19:38,960 --> 00:19:42,559
the point was let's create an image

448
00:19:41,039 --> 00:19:45,440
based on tumbleweed

449
00:19:42,559 --> 00:19:45,918
we just replace the gnome on top of it

450
00:19:45,440 --> 00:19:48,320
with

451
00:19:45,919 --> 00:19:49,039
the gnome next packages and let's see if

452
00:19:48,320 --> 00:19:53,280
it boots

453
00:19:49,039 --> 00:19:56,080
and it it works like application start

454
00:19:53,280 --> 00:19:57,678
having that already helped a lot to make

455
00:19:56,080 --> 00:20:00,879
sure that um

456
00:19:57,679 --> 00:20:03,280
what it is in the next works

457
00:20:00,880 --> 00:20:04,159
good enough because even if it's just a

458
00:20:03,280 --> 00:20:07,840
few tests

459
00:20:04,159 --> 00:20:11,120
not the entire test suit but still

460
00:20:07,840 --> 00:20:14,399
um yeah so that's what i described

461
00:20:11,120 --> 00:20:17,840
and then gnome 334 was released

462
00:20:14,400 --> 00:20:18,480
point zero was released and then the

463
00:20:17,840 --> 00:20:21,520
work

464
00:20:18,480 --> 00:20:24,000
was to get this pushed into the gnome

465
00:20:21,520 --> 00:20:24,000
factory

466
00:20:24,400 --> 00:20:28,320
this is a bit tricky because openshift

467
00:20:26,559 --> 00:20:30,559
of known people like to do things

468
00:20:28,320 --> 00:20:30,559
right

469
00:20:32,240 --> 00:20:40,000
i have yeah so uh what do i mean what

470
00:20:35,919 --> 00:20:42,000
with that if um in gnome next basically

471
00:20:40,000 --> 00:20:44,240
people can submit things even commit

472
00:20:42,000 --> 00:20:49,840
things directly

473
00:20:44,240 --> 00:20:49,840
if they are part of the uh

474
00:20:49,919 --> 00:20:54,480
if they are not they can just throw a

475
00:20:52,240 --> 00:20:56,080
submit a change

476
00:20:54,480 --> 00:20:58,480
change request is going to be reviewed

477
00:20:56,080 --> 00:21:01,199
by somebody else but

478
00:20:58,480 --> 00:21:02,240
any change in non-factory has to be

479
00:21:01,200 --> 00:21:05,440
review reviewed

480
00:21:02,240 --> 00:21:08,880
by four eyes which means

481
00:21:05,440 --> 00:21:12,400
the person who submitted the the change

482
00:21:08,880 --> 00:21:14,720
or the version update it needs to have

483
00:21:12,400 --> 00:21:17,120
two other people reviewing what he or

484
00:21:14,720 --> 00:21:20,960
she did

485
00:21:17,120 --> 00:21:24,000
because yeah it's kind of

486
00:21:20,960 --> 00:21:28,000
ensuring that there is a good quality

487
00:21:24,000 --> 00:21:31,039
of the change sometimes even up to

488
00:21:28,000 --> 00:21:33,039
is the changelog properly spelled

489
00:21:31,039 --> 00:21:35,360
so that's why when i say the open source

490
00:21:33,039 --> 00:21:38,559
gnome team

491
00:21:35,360 --> 00:21:39,120
is sometimes very picky but that's kind

492
00:21:38,559 --> 00:21:42,399
of

493
00:21:39,120 --> 00:21:44,320
to ensure that over time those packages

494
00:21:42,400 --> 00:21:46,559
will be easy to maintain by somebody

495
00:21:44,320 --> 00:21:46,559
else

496
00:21:47,840 --> 00:21:54,559
so once 334

497
00:21:51,360 --> 00:21:59,199
landed in factory then

498
00:21:54,559 --> 00:22:02,639
it was pushed to tumbleweed

499
00:21:59,200 --> 00:22:06,159
then there is another um

500
00:22:02,640 --> 00:22:07,360
for ice review review this is not done

501
00:22:06,159 --> 00:22:10,080
by the same people

502
00:22:07,360 --> 00:22:12,320
this is done by the open source review

503
00:22:10,080 --> 00:22:12,320
team

504
00:22:13,039 --> 00:22:17,520
so again they checked things sometimes

505
00:22:16,240 --> 00:22:20,960
they noticed things that

506
00:22:17,520 --> 00:22:24,879
skipped through the open

507
00:22:20,960 --> 00:22:27,440
open to the gnome team but

508
00:22:24,880 --> 00:22:31,280
overall usually it's quite smooth there

509
00:22:27,440 --> 00:22:34,559
is a legal review of the changes

510
00:22:31,280 --> 00:22:37,280
for gnome it's usually not a problem but

511
00:22:34,559 --> 00:22:38,559
sometimes you can have one random

512
00:22:37,280 --> 00:22:42,158
packages which

513
00:22:38,559 --> 00:22:45,120
is pulling one

514
00:22:42,159 --> 00:22:46,000
guitar repo in a tarball copy of a

515
00:22:45,120 --> 00:22:47,918
guitar prepo

516
00:22:46,000 --> 00:22:49,200
where there is a test case which is

517
00:22:47,919 --> 00:22:51,520
under whatever

518
00:22:49,200 --> 00:22:52,799
fancy license and then the legal bots

519
00:22:51,520 --> 00:22:56,158
say i need a lawyer

520
00:22:52,799 --> 00:22:56,158
i cannot pass it

521
00:22:56,640 --> 00:23:00,480
we have that and then we have this

522
00:22:58,320 --> 00:23:02,240
entire staging approach that i described

523
00:23:00,480 --> 00:23:05,360
earlier

524
00:23:02,240 --> 00:23:10,000
where we put gloom in it

525
00:23:05,360 --> 00:23:13,280
and then we try does the rest build

526
00:23:10,000 --> 00:23:16,720
and sometimes yes sometimes

527
00:23:13,280 --> 00:23:17,520
not really so we have to make sure that

528
00:23:16,720 --> 00:23:20,480
uh there is

529
00:23:17,520 --> 00:23:21,280
this package this other packages and the

530
00:23:20,480 --> 00:23:23,360
third one

531
00:23:21,280 --> 00:23:24,480
which we're fine before we try to

532
00:23:23,360 --> 00:23:26,719
upgrade gnome

533
00:23:24,480 --> 00:23:27,840
now they are no longer built though so

534
00:23:26,720 --> 00:23:30,640
then we

535
00:23:27,840 --> 00:23:31,600
um notify the maintainer of those other

536
00:23:30,640 --> 00:23:34,320
packages

537
00:23:31,600 --> 00:23:35,439
could you have a look because uh if we

538
00:23:34,320 --> 00:23:38,559
accept this staging

539
00:23:35,440 --> 00:23:40,000
which we want uh it's going to break

540
00:23:38,559 --> 00:23:42,080
your packages

541
00:23:40,000 --> 00:23:43,600
so we do that at the compilation level

542
00:23:42,080 --> 00:23:46,639
and then

543
00:23:43,600 --> 00:23:50,158
at the qa testing level or

544
00:23:46,640 --> 00:23:52,400
open qa where it's going to install the

545
00:23:50,159 --> 00:23:54,320
mini distro with the entire gnome update

546
00:23:52,400 --> 00:23:57,520
so system install not just a live

547
00:23:54,320 --> 00:23:58,000
live image and then run all the possible

548
00:23:57,520 --> 00:24:00,639
tests

549
00:23:58,000 --> 00:24:01,840
uh which are written like i don't know

550
00:24:00,640 --> 00:24:05,039
starting g edit

551
00:24:01,840 --> 00:24:08,639
starting evolution making sure

552
00:24:05,039 --> 00:24:08,640
you can still read your mail whatever

553
00:24:08,799 --> 00:24:14,000
and often you discover that

554
00:24:11,840 --> 00:24:16,240
because open create is based on image

555
00:24:14,000 --> 00:24:19,520
recognition

556
00:24:16,240 --> 00:24:23,679
your some pixels have moved a bit

557
00:24:19,520 --> 00:24:26,000
some the theme has changed completely

558
00:24:23,679 --> 00:24:26,960
uh so there is a bit of fuzziness so

559
00:24:26,000 --> 00:24:28,880
opencl can be

560
00:24:26,960 --> 00:24:30,880
can be set up in a way so that it

561
00:24:28,880 --> 00:24:34,880
doesn't expect 100

562
00:24:30,880 --> 00:24:36,320
match but being fuzzy up to 95 or 90

563
00:24:34,880 --> 00:24:37,679
percent i don't remember what is the

564
00:24:36,320 --> 00:24:40,559
default

565
00:24:37,679 --> 00:24:41,760
yeah richard is telling me 95 is the

566
00:24:40,559 --> 00:24:43,678
default so

567
00:24:41,760 --> 00:24:46,320
sometimes if it's like the font has

568
00:24:43,679 --> 00:24:48,720
changed a bit but not too much

569
00:24:46,320 --> 00:24:49,760
so the fuzziness will make sure it's

570
00:24:48,720 --> 00:24:53,600
okay

571
00:24:49,760 --> 00:24:56,400
but um yeah with with 334

572
00:24:53,600 --> 00:24:58,000
i think it's 334 that so the theme was

573
00:24:56,400 --> 00:25:00,240
updated or something

574
00:24:58,000 --> 00:25:02,080
distinctly i mean a human could see

575
00:25:00,240 --> 00:25:05,600
there is a difference

576
00:25:02,080 --> 00:25:15,840
then we had to update the the needle

577
00:25:05,600 --> 00:25:15,840
next question

578
00:25:26,080 --> 00:25:33,279
to even get to this so the question was

579
00:25:30,080 --> 00:25:36,240
um we have this kind of layer of of

580
00:25:33,279 --> 00:25:37,679
uh also on the distro level on the

581
00:25:36,240 --> 00:25:40,159
package level do we have this

582
00:25:37,679 --> 00:25:41,520
the similar concept on the open qa level

583
00:25:40,159 --> 00:25:43,120
so we don't have

584
00:25:41,520 --> 00:25:45,279
we don't have it but we have something a

585
00:25:43,120 --> 00:25:48,559
bit different is that open qa

586
00:25:45,279 --> 00:25:49,039
is not um when it's expecting to check

587
00:25:48,559 --> 00:25:52,720
for

588
00:25:49,039 --> 00:25:54,799
a needle so to check for a screen

589
00:25:52,720 --> 00:25:56,640
screenshot and finding something which

590
00:25:54,799 --> 00:25:59,279
match it doesn't

591
00:25:56,640 --> 00:26:00,799
search for just one matching we have a

592
00:25:59,279 --> 00:26:04,400
list of matching

593
00:26:00,799 --> 00:26:07,360
a possible acceptable thing and also

594
00:26:04,400 --> 00:26:08,320
with that we have some tags so for we

595
00:26:07,360 --> 00:26:11,199
can say

596
00:26:08,320 --> 00:26:12,559
you can accept not any any of the

597
00:26:11,200 --> 00:26:16,080
screenshots we have put

598
00:26:12,559 --> 00:26:19,200
aside but those which were tagged like

599
00:26:16,080 --> 00:26:22,720
this is for starting evolution

600
00:26:19,200 --> 00:26:25,039
and then we were like we will be in that

601
00:26:22,720 --> 00:26:25,919
at that point in time in the test we are

602
00:26:25,039 --> 00:26:30,240
expecting

603
00:26:25,919 --> 00:26:32,400
a a needle which is starting evolution

604
00:26:30,240 --> 00:26:33,520
check all of which are in the in the in

605
00:26:32,400 --> 00:26:36,559
the database

606
00:26:33,520 --> 00:26:37,120
it's a github repo but um checks all of

607
00:26:36,559 --> 00:26:40,480
those

608
00:26:37,120 --> 00:26:42,320
and if one match we are gooned

609
00:26:40,480 --> 00:26:44,799
and we can even refine with something

610
00:26:42,320 --> 00:26:47,439
like we want a repo

611
00:26:44,799 --> 00:26:48,480
a tag of starting evolution and the

612
00:26:47,440 --> 00:26:52,080
distro is

613
00:26:48,480 --> 00:26:52,799
tumbleweed or is sli or is open to the

614
00:26:52,080 --> 00:26:55,039
lip

615
00:26:52,799 --> 00:26:55,840
because sometimes we have things which

616
00:26:55,039 --> 00:26:59,120
are

617
00:26:55,840 --> 00:26:59,120
different but on purpose

618
00:26:59,279 --> 00:27:07,679
yes recognition to avoid these issues

619
00:27:05,520 --> 00:27:09,600
so question was do we use text

620
00:27:07,679 --> 00:27:10,320
recognition to avoid the screenshot

621
00:27:09,600 --> 00:27:13,678
thing um

622
00:27:10,320 --> 00:27:17,200
no uh i don't think it was

623
00:27:13,679 --> 00:27:20,559
ever tested it was yes

624
00:27:17,200 --> 00:27:22,559
this was way better so uh answer

625
00:27:20,559 --> 00:27:23,918
from the audience from richard brown so

626
00:27:22,559 --> 00:27:26,639
it was tested

627
00:27:23,919 --> 00:27:28,080
and the current approach is way better

628
00:27:26,640 --> 00:27:32,159
uh

629
00:27:28,080 --> 00:27:33,918
yeah um so it's surprisingly good

630
00:27:32,159 --> 00:27:36,159
let's say because uh one one thing i

631
00:27:33,919 --> 00:27:39,440
forgot is on the needling

632
00:27:36,159 --> 00:27:42,799
part we just don't we don't do

633
00:27:39,440 --> 00:27:47,039
full screen uh matching we can

634
00:27:42,799 --> 00:27:50,080
just highlight i want to check one part

635
00:27:47,039 --> 00:27:53,200
of the screen like this button or

636
00:27:50,080 --> 00:27:54,399
this text and even if it moves a bit in

637
00:27:53,200 --> 00:27:56,960
the image

638
00:27:54,399 --> 00:27:58,080
in the in the results the matching will

639
00:27:56,960 --> 00:28:01,120
be fine

640
00:27:58,080 --> 00:28:03,678
so with that plus the fuzziness

641
00:28:01,120 --> 00:28:04,879
it's usually able to to catch a lot of

642
00:28:03,679 --> 00:28:06,240
things but it's it's

643
00:28:04,880 --> 00:28:08,880
it can be a pain for instance for

644
00:28:06,240 --> 00:28:11,919
localization because we don't

645
00:28:08,880 --> 00:28:15,039
test the distro in

646
00:28:11,919 --> 00:28:17,679
french spanish chinese

647
00:28:15,039 --> 00:28:18,480
japanese korean because it would mean we

648
00:28:17,679 --> 00:28:21,600
have to

649
00:28:18,480 --> 00:28:21,600
redo all the needles

650
00:28:23,039 --> 00:28:29,279
okay then

651
00:28:26,159 --> 00:28:31,279
once the staging was accepted

652
00:28:29,279 --> 00:28:34,000
there is a open player running again but

653
00:28:31,279 --> 00:28:37,360
this time with the entire test suit

654
00:28:34,000 --> 00:28:39,039
and if it works there is a bot which is

655
00:28:37,360 --> 00:28:42,399
going to say yeah

656
00:28:39,039 --> 00:28:45,039
sounds good there is as much breakage

657
00:28:42,399 --> 00:28:46,239
as before so we didn't break much as

658
00:28:45,039 --> 00:28:48,640
before

659
00:28:46,240 --> 00:28:50,320
so the quality is the same or improved

660
00:28:48,640 --> 00:28:52,960
it isn't it didn't decrease

661
00:28:50,320 --> 00:28:54,720
and the bot will uh automatically

662
00:28:52,960 --> 00:28:58,080
release the build

663
00:28:54,720 --> 00:29:00,399
to or open or open to the tumbleweed

664
00:28:58,080 --> 00:29:00,399
user

665
00:29:01,520 --> 00:29:08,559
so in this case 334.0 was

666
00:29:05,440 --> 00:29:12,960
available less than a month

667
00:29:08,559 --> 00:29:15,678
after it was available upstream which is

668
00:29:12,960 --> 00:29:18,960
good and bad at the same time it's good

669
00:29:15,679 --> 00:29:21,440
because it's yes it's less than a month

670
00:29:18,960 --> 00:29:22,320
it's bad because we we're only surprised

671
00:29:21,440 --> 00:29:23,760
to be even

672
00:29:22,320 --> 00:29:26,000
better than that sometimes we were able

673
00:29:23,760 --> 00:29:29,440
to release it the day after the release

674
00:29:26,000 --> 00:29:30,880
of upstream or even sometimes the same

675
00:29:29,440 --> 00:29:35,039
day because the turbo are

676
00:29:30,880 --> 00:29:37,919
really already a bit of a before

677
00:29:35,039 --> 00:29:39,279
this time it didn't work well because we

678
00:29:37,919 --> 00:29:41,919
are lacking hands

679
00:29:39,279 --> 00:29:43,279
to do the packaging so if you are

680
00:29:41,919 --> 00:29:47,600
willing to help

681
00:29:43,279 --> 00:29:49,440
please join it's fun

682
00:29:47,600 --> 00:29:52,840
so i talked about open sustainable wheat

683
00:29:49,440 --> 00:29:54,799
let's talk about sleep and open shoe

684
00:29:52,840 --> 00:29:58,000
sleep

685
00:29:54,799 --> 00:30:02,639
first uh yeah i said about

686
00:29:58,000 --> 00:30:08,799
uh leap that it's based on on

687
00:30:02,640 --> 00:30:12,000
on sleeves but how do we do things

688
00:30:08,799 --> 00:30:15,039
the idea is there is a set of

689
00:30:12,000 --> 00:30:18,880
packages which are i mean sli

690
00:30:15,039 --> 00:30:22,158
is a bunch of pack of packages

691
00:30:18,880 --> 00:30:22,559
from those packages we create what we

692
00:30:22,159 --> 00:30:25,440
can

693
00:30:22,559 --> 00:30:25,440
call a shareport

694
00:30:26,399 --> 00:30:33,120
and then leap is reusing that

695
00:30:29,919 --> 00:30:34,799
and injects all the packages

696
00:30:33,120 --> 00:30:36,959
which are coming from tumbleweed which

697
00:30:34,799 --> 00:30:38,158
are the latest and greatest let's put it

698
00:30:36,960 --> 00:30:41,840
this way

699
00:30:38,159 --> 00:30:45,279
um and we do that for uh

700
00:30:41,840 --> 00:30:46,158
the 15.0 code base so this is where we

701
00:30:45,279 --> 00:30:48,159
branch

702
00:30:46,159 --> 00:30:49,440
directly we did we took a copy of

703
00:30:48,159 --> 00:30:52,240
tumbleweed we

704
00:30:49,440 --> 00:30:54,880
just kept the packages we wanted for an

705
00:30:52,240 --> 00:30:57,120
enterprise distro

706
00:30:54,880 --> 00:30:59,039
and for leap the community decided oh we

707
00:30:57,120 --> 00:31:00,479
want also those packages because they

708
00:30:59,039 --> 00:31:02,480
are not part of the

709
00:31:00,480 --> 00:31:04,799
enterprise distro but the community

710
00:31:02,480 --> 00:31:07,440
wants those packages

711
00:31:04,799 --> 00:31:07,440
for instance

712
00:31:08,000 --> 00:31:11,840
suse doesn't ship anymore as supported

713
00:31:10,880 --> 00:31:14,000
packages

714
00:31:11,840 --> 00:31:16,080
the kde environment we just ship one

715
00:31:14,000 --> 00:31:19,120
desktop which is gnome

716
00:31:16,080 --> 00:31:20,639
the other desktop are available through

717
00:31:19,120 --> 00:31:23,439
the community

718
00:31:20,640 --> 00:31:24,080
by either in leap or with another

719
00:31:23,440 --> 00:31:26,720
mechanism

720
00:31:24,080 --> 00:31:29,360
which is called package but i will not

721
00:31:26,720 --> 00:31:33,960
go too much into details about that

722
00:31:29,360 --> 00:31:37,360
we do that for the major release so

723
00:31:33,960 --> 00:31:39,600
15.0 and then uh

724
00:31:37,360 --> 00:31:41,918
three as a cadence of doing a service

725
00:31:39,600 --> 00:31:45,918
pack every year

726
00:31:41,919 --> 00:31:47,679
which is um and the idea is a bit

727
00:31:45,919 --> 00:31:49,760
tick-tock approach where there is one

728
00:31:47,679 --> 00:31:52,880
service pack where there is going to be

729
00:31:49,760 --> 00:31:56,158
mostly stability fixes plus a few

730
00:31:52,880 --> 00:31:59,519
uh feature and then uh

731
00:31:56,159 --> 00:32:02,000
the next uh iteration will be

732
00:31:59,519 --> 00:32:03,440
let's update a bit more things because

733
00:32:02,000 --> 00:32:05,200
we are starting to educate

734
00:32:03,440 --> 00:32:06,880
enterprise customers yes you can still

735
00:32:05,200 --> 00:32:09,679
upgrade the kernel

736
00:32:06,880 --> 00:32:10,640
while being in a stable list it's a bit

737
00:32:09,679 --> 00:32:13,440
difficult but

738
00:32:10,640 --> 00:32:16,159
they're starting to get it and we we do

739
00:32:13,440 --> 00:32:17,919
for instance also we update the desktop

740
00:32:16,159 --> 00:32:19,519
also from time to time so we don't have

741
00:32:17,919 --> 00:32:23,440
the pain of

742
00:32:19,519 --> 00:32:26,320
maintaining a very old desktop

743
00:32:23,440 --> 00:32:28,799
and we this way customer can enjoy new

744
00:32:26,320 --> 00:32:31,439
feature from the desktop upstream

745
00:32:28,799 --> 00:32:33,760
and we enjoy less bug fixes to backport

746
00:32:31,440 --> 00:32:33,760
also

747
00:32:35,279 --> 00:32:44,159
so how we did it for 315 sp2

748
00:32:39,679 --> 00:32:46,960
so we have we had gnome next so on obs

749
00:32:44,159 --> 00:32:48,240
and there which was it was building on

750
00:32:46,960 --> 00:32:51,360
top of tumbleweed

751
00:32:48,240 --> 00:32:54,159
so we did we added another repo in this

752
00:32:51,360 --> 00:32:55,120
project let's build it on top of 315 sp2

753
00:32:54,159 --> 00:32:58,159
which was

754
00:32:55,120 --> 00:33:02,000
and is still under development uh

755
00:32:58,159 --> 00:33:04,320
yeah i forgot 315 sp2 the development is

756
00:33:02,000 --> 00:33:05,919
always available on audiobs so you can

757
00:33:04,320 --> 00:33:10,799
see where we are going

758
00:33:05,919 --> 00:33:14,000
this is not behind closed doors um

759
00:33:10,799 --> 00:33:17,600
so then we looked at how

760
00:33:14,000 --> 00:33:19,840
how much is it broke because um

761
00:33:17,600 --> 00:33:22,320
even if we have those this factory first

762
00:33:19,840 --> 00:33:22,320
policy

763
00:33:22,799 --> 00:33:26,158
we make sure we make sure to push all

764
00:33:24,960 --> 00:33:28,720
our patches to

765
00:33:26,159 --> 00:33:29,279
tumbleweed but sometimes we push package

766
00:33:28,720 --> 00:33:31,279
patch

767
00:33:29,279 --> 00:33:32,399
but we don't apply them or we don't

768
00:33:31,279 --> 00:33:35,120
enable them

769
00:33:32,399 --> 00:33:36,158
because some changes are really for

770
00:33:35,120 --> 00:33:38,639
enterprise

771
00:33:36,159 --> 00:33:39,600
customer and you don't want to do that

772
00:33:38,640 --> 00:33:43,120
for um

773
00:33:39,600 --> 00:33:45,039
let's say a regular or

774
00:33:43,120 --> 00:33:47,360
yeah non-enterprise customer where it's

775
00:33:45,039 --> 00:33:49,519
like limiting things etc

776
00:33:47,360 --> 00:33:52,719
uh so we don't want to have a lot of

777
00:33:49,519 --> 00:33:55,600
people shouting at us

778
00:33:52,720 --> 00:33:56,559
so we discovered this kind of breakage

779
00:33:55,600 --> 00:33:59,678
like patch up

780
00:33:56,559 --> 00:34:01,760
not applying anymore so we had to update

781
00:33:59,679 --> 00:34:05,200
that

782
00:34:01,760 --> 00:34:07,679
then because lee is kind of older than

783
00:34:05,200 --> 00:34:10,159
tumbleweed we discovered oh

784
00:34:07,679 --> 00:34:12,879
this doesn't build because it needs this

785
00:34:10,159 --> 00:34:16,320
new package which is not in sleep

786
00:34:12,879 --> 00:34:18,960
oh this doesn't build because it did the

787
00:34:16,320 --> 00:34:21,760
latest version of meson

788
00:34:18,960 --> 00:34:23,040
so now we have to update mason in the

789
00:34:21,760 --> 00:34:24,879
next service pack

790
00:34:23,040 --> 00:34:26,560
and then you discover oh but we need to

791
00:34:24,879 --> 00:34:28,319
update cmake also

792
00:34:26,560 --> 00:34:29,679
because the test suite of meson doesn't

793
00:34:28,320 --> 00:34:32,839
pass anymore

794
00:34:29,679 --> 00:34:34,000
because you need another fix in pkg

795
00:34:32,839 --> 00:34:36,799
config

796
00:34:34,000 --> 00:34:37,440
because the one we had was a bit too old

797
00:34:36,800 --> 00:34:40,320
and it was

798
00:34:37,440 --> 00:34:42,000
it has a bug which only is seen in the

799
00:34:40,320 --> 00:34:44,879
test suite of the latest method

800
00:34:42,000 --> 00:34:46,159
so this is the kind of you start to put

801
00:34:44,879 --> 00:34:50,399
the finger

802
00:34:46,159 --> 00:34:53,119
there and it's like oh my god but it's

803
00:34:50,399 --> 00:34:54,638
it's interesting uh it's challenging but

804
00:34:53,119 --> 00:34:55,679
it's quite interesting and you also

805
00:34:54,639 --> 00:34:59,119
discover

806
00:34:55,679 --> 00:35:00,880
that even if the tumbleweed

807
00:34:59,119 --> 00:35:02,720
and the package is done by the open

808
00:35:00,880 --> 00:35:06,079
shoes gloom team are

809
00:35:02,720 --> 00:35:06,720
of high quality sometimes anybody can

810
00:35:06,079 --> 00:35:09,680
miss that

811
00:35:06,720 --> 00:35:11,919
oh you need another there is a build

812
00:35:09,680 --> 00:35:13,598
request which is a new version of this

813
00:35:11,920 --> 00:35:15,359
package

814
00:35:13,599 --> 00:35:16,880
it happened it was already in tumbleweed

815
00:35:15,359 --> 00:35:17,759
so nobody noticed that it need to

816
00:35:16,880 --> 00:35:20,079
upgrade

817
00:35:17,760 --> 00:35:22,000
this in the bid requires but instantly

818
00:35:20,079 --> 00:35:22,640
it's not the case so you have a random

819
00:35:22,000 --> 00:35:25,440
fader of

820
00:35:22,640 --> 00:35:26,560
why it's not building so this kind of

821
00:35:25,440 --> 00:35:30,000
thing we

822
00:35:26,560 --> 00:35:33,759
we went through at the same time

823
00:35:30,000 --> 00:35:37,040
we also created a staging project

824
00:35:33,760 --> 00:35:39,440
same id we take slee

825
00:35:37,040 --> 00:35:40,240
which is developed under development as

826
00:35:39,440 --> 00:35:43,440
a base

827
00:35:40,240 --> 00:35:44,000
we put gloom the gnomery base on top of

828
00:35:43,440 --> 00:35:47,440
it

829
00:35:44,000 --> 00:35:49,839
we check does it build then uh

830
00:35:47,440 --> 00:35:51,040
yes it builds the let's create a distro

831
00:35:49,839 --> 00:35:53,839
of

832
00:35:51,040 --> 00:35:55,759
from that and let's run on open qa and

833
00:35:53,839 --> 00:35:56,160
fix all the needles and all the test

834
00:35:55,760 --> 00:35:59,280
case

835
00:35:56,160 --> 00:36:00,399
and all the changes which were not

836
00:35:59,280 --> 00:36:03,920
really expected

837
00:36:00,400 --> 00:36:07,040
because you upgrade whatever component

838
00:36:03,920 --> 00:36:09,280
then for instance uh

839
00:36:07,040 --> 00:36:10,320
over two or three release i don't

840
00:36:09,280 --> 00:36:13,599
remember

841
00:36:10,320 --> 00:36:14,480
now gnome shut down gdm when you are

842
00:36:13,599 --> 00:36:17,520
logged in

843
00:36:14,480 --> 00:36:20,720
so you no longer have gdm running in

844
00:36:17,520 --> 00:36:22,880
in your initial graphical console

845
00:36:20,720 --> 00:36:24,720
except that there was some test case in

846
00:36:22,880 --> 00:36:28,000
open qa which were kind of

847
00:36:24,720 --> 00:36:31,359
oh let's search for gdm to detect where

848
00:36:28,000 --> 00:36:33,599
it's which vt it's using

849
00:36:31,359 --> 00:36:34,799
there is no longer gdm running anymore

850
00:36:33,599 --> 00:36:36,720
so you are like ah

851
00:36:34,800 --> 00:36:39,119
i need to update the test case this kind

852
00:36:36,720 --> 00:36:39,118
of thing

853
00:36:39,440 --> 00:36:47,920
uh yep so what did i say

854
00:36:43,839 --> 00:36:48,400
as i said we also make sure to push to

855
00:36:47,920 --> 00:36:52,320
sleep

856
00:36:48,400 --> 00:36:55,520
only not the entire gnome next project

857
00:36:52,320 --> 00:36:58,880
but just the packages which are

858
00:36:55,520 --> 00:37:01,520
which are shipped honestly because again

859
00:36:58,880 --> 00:37:03,200
we don't ship everything to our

860
00:37:01,520 --> 00:37:06,240
enterprise customer

861
00:37:03,200 --> 00:37:07,919
and all the other packages they are

862
00:37:06,240 --> 00:37:08,799
always available to the enterprise

863
00:37:07,920 --> 00:37:11,599
customers through

864
00:37:08,800 --> 00:37:12,640
what we call package up which is kind of

865
00:37:11,599 --> 00:37:14,160
a repo

866
00:37:12,640 --> 00:37:16,319
where all the packages which are

867
00:37:14,160 --> 00:37:19,118
available on tumbleweed

868
00:37:16,320 --> 00:37:20,079
more or less on leap are available to

869
00:37:19,119 --> 00:37:22,320
see customer

870
00:37:20,079 --> 00:37:23,280
and supported so they can and we say you

871
00:37:22,320 --> 00:37:25,839
can install

872
00:37:23,280 --> 00:37:26,720
those packages on your distro but don't

873
00:37:25,839 --> 00:37:29,599
call us

874
00:37:26,720 --> 00:37:30,160
they won't be supported but we won't

875
00:37:29,599 --> 00:37:31,599
tell you

876
00:37:30,160 --> 00:37:33,279
you broke your system because you

877
00:37:31,599 --> 00:37:36,960
installed those packages we

878
00:37:33,280 --> 00:37:40,800
we double check those

879
00:37:36,960 --> 00:37:44,880
so to get things into some green state

880
00:37:40,800 --> 00:37:44,880
it took roughly a month

881
00:37:46,960 --> 00:37:53,200
then we okay

882
00:37:50,079 --> 00:37:54,560
this is looks great let's accept it we

883
00:37:53,200 --> 00:37:57,919
accept it

884
00:37:54,560 --> 00:38:01,119
and then uh we started to see

885
00:37:57,920 --> 00:38:03,839
another set of failure because for

886
00:38:01,119 --> 00:38:05,200
speed reason we do things on intel

887
00:38:03,839 --> 00:38:07,279
platform

888
00:38:05,200 --> 00:38:09,359
for our staging because already building

889
00:38:07,280 --> 00:38:12,640
this and having the test run

890
00:38:09,359 --> 00:38:13,839
it's kind of time consuming so we don't

891
00:38:12,640 --> 00:38:15,759
usually

892
00:38:13,839 --> 00:38:18,720
do the staging approach on other

893
00:38:15,760 --> 00:38:22,119
architecture except that

894
00:38:18,720 --> 00:38:26,240
the sli world is like we support

895
00:38:22,119 --> 00:38:29,359
ar64 ppc64 le so power

896
00:38:26,240 --> 00:38:30,879
and mainframes so yes

897
00:38:29,359 --> 00:38:33,839
you can have gnome running on a

898
00:38:30,880 --> 00:38:33,839
mainframe

899
00:38:35,760 --> 00:38:39,280
we even discovered that we were the only

900
00:38:38,720 --> 00:38:41,439
one

901
00:38:39,280 --> 00:38:43,359
for this version of gnome we were the

902
00:38:41,440 --> 00:38:46,800
first one trying to do it because it was

903
00:38:43,359 --> 00:38:49,119
not working and it was a bug upstream

904
00:38:46,800 --> 00:38:49,839
despite also this through having it

905
00:38:49,119 --> 00:38:52,079
built

906
00:38:49,839 --> 00:38:54,279
but apparently nobody was trying to ever

907
00:38:52,079 --> 00:38:55,440
try to run it

908
00:38:54,280 --> 00:38:58,839
[Music]

909
00:38:55,440 --> 00:39:01,760
kind of funny it was a bit of a pain

910
00:38:58,839 --> 00:39:02,078
to to debug it in the end it was not

911
00:39:01,760 --> 00:39:04,560
even

912
00:39:02,079 --> 00:39:05,599
loom fault it was a bug in the mozilla

913
00:39:04,560 --> 00:39:06,880
code base

914
00:39:05,599 --> 00:39:09,119
because mozilla doesn't care about

915
00:39:06,880 --> 00:39:12,480
mainframe obviously

916
00:39:09,119 --> 00:39:14,960
um yeah so but we we were able to

917
00:39:12,480 --> 00:39:18,720
backboard the proper fixes

918
00:39:14,960 --> 00:39:21,280
and we even had um yeah we after that

919
00:39:18,720 --> 00:39:23,279
after fixing that we updated also the

920
00:39:21,280 --> 00:39:26,480
rest of the application

921
00:39:23,280 --> 00:39:29,200
and sometimes we forgot things so

922
00:39:26,480 --> 00:39:30,720
we we discovered after a while oh let's

923
00:39:29,200 --> 00:39:34,160
rebase things and then

924
00:39:30,720 --> 00:39:36,799
wait i think i forgot to update dconf

925
00:39:34,160 --> 00:39:38,240
so i had one of the layer which is kind

926
00:39:36,800 --> 00:39:41,200
of saving all the

927
00:39:38,240 --> 00:39:42,000
the configuration on disk for gnome i

928
00:39:41,200 --> 00:39:45,680
had the version

929
00:39:42,000 --> 00:39:49,359
of three gnome 326

930
00:39:45,680 --> 00:39:52,560
and everything was running fine

931
00:39:49,359 --> 00:39:54,799
so it's it's enterprise yeah enterprise

932
00:39:52,560 --> 00:39:56,880
table so we can say gnome is enterprise

933
00:39:54,800 --> 00:39:57,839
table or at least d conf is enterprise

934
00:39:56,880 --> 00:40:00,240
stable

935
00:39:57,839 --> 00:40:02,078
but it was surprisingly i would have

936
00:40:00,240 --> 00:40:02,799
expected to have random bugs here and

937
00:40:02,079 --> 00:40:05,839
there no

938
00:40:02,800 --> 00:40:09,440
um so right now

939
00:40:05,839 --> 00:40:11,200
we are running at 3 34.

940
00:40:09,440 --> 00:40:12,480
one and between one and two because we

941
00:40:11,200 --> 00:40:14,078
have a few packages

942
00:40:12,480 --> 00:40:16,240
we did that before the christmas break

943
00:40:14,079 --> 00:40:16,240
so

944
00:40:17,760 --> 00:40:23,520
we will update uh soon uh to

945
00:40:20,960 --> 00:40:26,480
3 30 4. three or maybe four if there is

946
00:40:23,520 --> 00:40:26,480
a dot four release

947
00:40:27,280 --> 00:40:34,240
so we we have gnome um

948
00:40:30,640 --> 00:40:39,598
in sli since uh the first version

949
00:40:34,240 --> 00:40:41,839
so since november then

950
00:40:39,599 --> 00:40:42,640
we should have gnome in lip because

951
00:40:41,839 --> 00:40:45,680
after all

952
00:40:42,640 --> 00:40:49,279
lip is created on top of sleep so it

953
00:40:45,680 --> 00:40:49,279
should be fine it should be easy

954
00:40:49,760 --> 00:40:56,640
not really one thing

955
00:40:53,280 --> 00:40:59,280
i didn't tell you

956
00:40:56,640 --> 00:41:00,799
i mean i can kind of tell you told you

957
00:40:59,280 --> 00:41:04,560
but

958
00:41:00,800 --> 00:41:07,599
is that the difference also between slee

959
00:41:04,560 --> 00:41:10,160
and leave is that on sleeve

960
00:41:07,599 --> 00:41:10,800
when we do a service pack when we can

961
00:41:10,160 --> 00:41:13,598
not

962
00:41:10,800 --> 00:41:14,640
when we can avoid changing the package

963
00:41:13,599 --> 00:41:17,680
we don't touch it

964
00:41:14,640 --> 00:41:18,839
at all which means on a service on

965
00:41:17,680 --> 00:41:22,000
service pack

966
00:41:18,839 --> 00:41:23,680
one everything which is in touch

967
00:41:22,000 --> 00:41:27,200
between service pack zero and service

968
00:41:23,680 --> 00:41:29,919
pack one we just grab the binary package

969
00:41:27,200 --> 00:41:31,919
we don't rebuild things because it's

970
00:41:29,920 --> 00:41:34,319
kind of this mindset of customer

971
00:41:31,920 --> 00:41:35,680
oh my god you change packages you are

972
00:41:34,319 --> 00:41:38,560
going to break everything

973
00:41:35,680 --> 00:41:39,200
these days we've reproducible bills and

974
00:41:38,560 --> 00:41:42,078
all of that

975
00:41:39,200 --> 00:41:42,879
it should be less of a problem but even

976
00:41:42,079 --> 00:41:45,119
getting to

977
00:41:42,880 --> 00:41:46,640
a state where 100 percent of our package

978
00:41:45,119 --> 00:41:49,440
is reproducible

979
00:41:46,640 --> 00:41:49,759
is we are not there yet and even when we

980
00:41:49,440 --> 00:41:52,880
be

981
00:41:49,760 --> 00:41:53,440
there i hope um it will be to get this

982
00:41:52,880 --> 00:41:56,880
mindset

983
00:41:53,440 --> 00:42:00,400
into people's minds into enterprise

984
00:41:56,880 --> 00:42:02,640
people minds into administrator etc it

985
00:42:00,400 --> 00:42:06,240
can be very tricky

986
00:42:02,640 --> 00:42:09,200
so slee is kind of

987
00:42:06,240 --> 00:42:09,759
let's modify as little as possible but 3

988
00:42:09,200 --> 00:42:12,960
is

989
00:42:09,760 --> 00:42:13,359
this layer this idea of layer of service

990
00:42:12,960 --> 00:42:15,599
pack

991
00:42:13,359 --> 00:42:16,799
service pack 1 service pack 2 is done on

992
00:42:15,599 --> 00:42:20,079
top of service pack one

993
00:42:16,800 --> 00:42:23,359
et cetera open to the leap

994
00:42:20,079 --> 00:42:24,160
it's not a layered system it's a regular

995
00:42:23,359 --> 00:42:26,240
distro

996
00:42:24,160 --> 00:42:28,640
so a regular disto where you rebuild

997
00:42:26,240 --> 00:42:31,759
everything when you want to

998
00:42:28,640 --> 00:42:36,640
do your new next version

999
00:42:31,760 --> 00:42:40,000
so which means bootstrapping the distro

1000
00:42:36,640 --> 00:42:42,640
which means you discover that

1001
00:42:40,000 --> 00:42:44,079
even though you have your gnome packages

1002
00:42:42,640 --> 00:42:46,720
which are

1003
00:42:44,079 --> 00:42:47,520
which we are able to build fine on 315

1004
00:42:46,720 --> 00:42:50,560
sp2

1005
00:42:47,520 --> 00:42:52,480
everything is nice and shiny then you

1006
00:42:50,560 --> 00:42:54,880
try to rebuild

1007
00:42:52,480 --> 00:42:56,400
the entire distro not just a service

1008
00:42:54,880 --> 00:42:58,400
pack that you have modified

1009
00:42:56,400 --> 00:43:00,319
but it's everything and then you

1010
00:42:58,400 --> 00:43:02,800
discover that oh

1011
00:43:00,319 --> 00:43:04,800
that's not really working because there

1012
00:43:02,800 --> 00:43:05,680
are other packages which are either not

1013
00:43:04,800 --> 00:43:08,720
part of sleep

1014
00:43:05,680 --> 00:43:11,440
which are just in leap

1015
00:43:08,720 --> 00:43:13,359
i don't i not kidding for instance for a

1016
00:43:11,440 --> 00:43:15,839
while we didn't have upgraded

1017
00:43:13,359 --> 00:43:16,480
so was not building anymore we did

1018
00:43:15,839 --> 00:43:19,839
upgrade it

1019
00:43:16,480 --> 00:43:20,880
but there were other random packages

1020
00:43:19,839 --> 00:43:24,078
using gtk

1021
00:43:20,880 --> 00:43:25,520
maybe or whatever which would not build

1022
00:43:24,079 --> 00:43:28,560
anymore so we had to

1023
00:43:25,520 --> 00:43:31,680
update that so

1024
00:43:28,560 --> 00:43:34,720
it it was

1025
00:43:31,680 --> 00:43:37,040
um painful uh let's be honest

1026
00:43:34,720 --> 00:43:37,919
uh to get to a point where everything

1027
00:43:37,040 --> 00:43:41,279
was really

1028
00:43:37,920 --> 00:43:44,079
fine for leap when i say

1029
00:43:41,280 --> 00:43:46,240
painful i mean it took 45 days okay

1030
00:43:44,079 --> 00:43:50,640
there is a christmas break in between

1031
00:43:46,240 --> 00:43:54,160
but still it to end

1032
00:43:50,640 --> 00:43:58,000
nicely enough the staging containing

1033
00:43:54,160 --> 00:44:00,560
gnome 334 for leap was accepted

1034
00:43:58,000 --> 00:44:01,119
last week i mean this week just in time

1035
00:44:00,560 --> 00:44:04,319
for them

1036
00:44:01,119 --> 00:44:06,240
no i didn't push them uh or open to the

1037
00:44:04,319 --> 00:44:06,560
release manager to accept the staging it

1038
00:44:06,240 --> 00:44:09,520
just

1039
00:44:06,560 --> 00:44:11,680
happened that yes all the roadblocks

1040
00:44:09,520 --> 00:44:14,079
were

1041
00:44:11,680 --> 00:44:14,799
were no longer there so we were we were

1042
00:44:14,079 --> 00:44:18,319
good

1043
00:44:14,800 --> 00:44:21,359
uh to have it which means um the next

1044
00:44:18,319 --> 00:44:22,000
milestone of uh so in term of milestone

1045
00:44:21,359 --> 00:44:24,240
which means

1046
00:44:22,000 --> 00:44:25,520
kind of milestone before the final

1047
00:44:24,240 --> 00:44:27,759
release

1048
00:44:25,520 --> 00:44:29,759
the next development microphone of uh

1049
00:44:27,760 --> 00:44:31,760
open sleep 15.2

1050
00:44:29,760 --> 00:44:33,040
which should happen maybe it happened

1051
00:44:31,760 --> 00:44:35,359
today i don't know

1052
00:44:33,040 --> 00:44:37,520
uh but it should happen next week let's

1053
00:44:35,359 --> 00:44:41,119
say because it's kind of automated

1054
00:44:37,520 --> 00:44:41,119
it will have gnome 334

1055
00:44:44,000 --> 00:44:49,200
and i'm already my god i was first

1056
00:44:47,599 --> 00:44:50,800
there was not enough question in the

1057
00:44:49,200 --> 00:44:54,240
audience

1058
00:44:50,800 --> 00:44:57,920
so yeah to summarize we have

1059
00:44:54,240 --> 00:44:58,319
a great system to build things which is

1060
00:44:57,920 --> 00:45:01,599
open

1061
00:44:58,319 --> 00:45:03,920
which is a open build service which

1062
00:45:01,599 --> 00:45:05,520
you if you want to use it you don't even

1063
00:45:03,920 --> 00:45:08,480
have i mean

1064
00:45:05,520 --> 00:45:10,079
you can use the instance we provide but

1065
00:45:08,480 --> 00:45:13,280
you can even install

1066
00:45:10,079 --> 00:45:15,760
it on your system there are people

1067
00:45:13,280 --> 00:45:18,640
running their own open q a open bid

1068
00:45:15,760 --> 00:45:18,640
service instance

1069
00:45:19,599 --> 00:45:25,040
on their system to create their own

1070
00:45:22,560 --> 00:45:25,040
packages

1071
00:45:25,440 --> 00:45:29,200
so we've opened big service we've opened

1072
00:45:27,520 --> 00:45:32,880
qa again open qa

1073
00:45:29,200 --> 00:45:36,799
is not just uh

1074
00:45:32,880 --> 00:45:40,319
an open source and a chooser project

1075
00:45:36,800 --> 00:45:42,319
fedora is using it uh i

1076
00:45:40,319 --> 00:45:44,400
i don't know if other distro are using

1077
00:45:42,319 --> 00:45:47,599
it yes

1078
00:45:44,400 --> 00:45:51,119
unless uses it so a debian distro

1079
00:45:47,599 --> 00:45:51,839
i mean debian os os3 based distro uses

1080
00:45:51,119 --> 00:45:56,720
it

1081
00:45:51,839 --> 00:45:56,720
so um yep definitely uh

1082
00:45:57,599 --> 00:46:03,680
if you it saves stance it can be

1083
00:46:00,880 --> 00:46:04,560
painful to set up i mean to to have

1084
00:46:03,680 --> 00:46:06,240
something where

1085
00:46:04,560 --> 00:46:07,759
you are end up to a point where it

1086
00:46:06,240 --> 00:46:10,799
passes everything

1087
00:46:07,760 --> 00:46:14,079
but in the end the value is

1088
00:46:10,800 --> 00:46:16,319
tremendous yeah so thanks to

1089
00:46:14,079 --> 00:46:17,119
those tools to our processes to make

1090
00:46:16,319 --> 00:46:19,920
sure that we

1091
00:46:17,119 --> 00:46:21,200
force enterprise this developer to push

1092
00:46:19,920 --> 00:46:25,599
their changes

1093
00:46:21,200 --> 00:46:26,240
uh upstream uh so we were still able to

1094
00:46:25,599 --> 00:46:29,280
upgrade

1095
00:46:26,240 --> 00:46:34,160
gnome which is kind of a big stack

1096
00:46:29,280 --> 00:46:37,359
um just firstly it's around 200 packages

1097
00:46:34,160 --> 00:46:39,359
which are intermixed i didn't check for

1098
00:46:37,359 --> 00:46:41,598
for tumbleweed but it's all lip it's

1099
00:46:39,359 --> 00:46:45,119
probably maybe not a double

1100
00:46:41,599 --> 00:46:47,280
300 with 2400 um

1101
00:46:45,119 --> 00:46:48,880
we were able to do that for terminal we

1102
00:46:47,280 --> 00:46:53,119
need a month

1103
00:46:48,880 --> 00:46:56,560
for um in total for all the distro in

1104
00:46:53,119 --> 00:47:00,079
four months a bit less than that

1105
00:46:56,560 --> 00:47:02,480
and one thing is we maintain quality

1106
00:47:00,079 --> 00:47:04,319
we didn't ship especially for the

1107
00:47:02,480 --> 00:47:07,920
tumbleweed user

1108
00:47:04,319 --> 00:47:10,960
they didn't got a breakage due to

1109
00:47:07,920 --> 00:47:13,359
upgrade of the desktop because it was

1110
00:47:10,960 --> 00:47:16,240
not released until it was passing

1111
00:47:13,359 --> 00:47:17,680
the curator the automated qa test and

1112
00:47:16,240 --> 00:47:20,799
that's what

1113
00:47:17,680 --> 00:47:22,640
we want i mean we i think we we

1114
00:47:20,800 --> 00:47:24,720
probably can everybody in the audience

1115
00:47:22,640 --> 00:47:25,920
can agree on that we don't want to ship

1116
00:47:24,720 --> 00:47:27,799
broken stuff to our

1117
00:47:25,920 --> 00:47:29,760
to other users

1118
00:47:27,800 --> 00:47:33,680
[Music]

1119
00:47:29,760 --> 00:47:36,240
so it's nice i think we can do better

1120
00:47:33,680 --> 00:47:38,558
i hope we'll do better like doing things

1121
00:47:36,240 --> 00:47:41,040
more in parallel

1122
00:47:38,559 --> 00:47:42,559
having more people joining initially to

1123
00:47:41,040 --> 00:47:46,880
do the

1124
00:47:42,559 --> 00:47:50,160
initial revision updates as part of the

1125
00:47:46,880 --> 00:47:52,400
of gnome next making sure that we do

1126
00:47:50,160 --> 00:47:54,078
in parallel something we didn't do for

1127
00:47:52,400 --> 00:47:56,800
time constraint having

1128
00:47:54,079 --> 00:48:00,160
leap and sleeve work being done in

1129
00:47:56,800 --> 00:48:04,400
parallel not one after the other

1130
00:48:00,160 --> 00:48:04,399
but we are we are getting there

1131
00:48:04,800 --> 00:48:12,160
any question comments do

1132
00:48:08,319 --> 00:48:16,160
yes so yeah yes

1133
00:48:12,160 --> 00:48:19,598
a question about the binaries that are

1134
00:48:16,160 --> 00:48:22,640
not that are not reviewed in sleep

1135
00:48:19,599 --> 00:48:25,760
but when they depend on something that

1136
00:48:22,640 --> 00:48:29,598
was changed do you ever have

1137
00:48:25,760 --> 00:48:32,960
breakage because of that so question

1138
00:48:29,599 --> 00:48:36,319
yeah yeah question was because

1139
00:48:32,960 --> 00:48:40,000
we import binary rpm binaries in slee

1140
00:48:36,319 --> 00:48:42,720
if if those binaries depend on

1141
00:48:40,000 --> 00:48:43,680
another as a dependency on another

1142
00:48:42,720 --> 00:48:48,078
package which

1143
00:48:43,680 --> 00:48:50,960
is updated is there breakage

1144
00:48:48,079 --> 00:48:52,079
in the sleeve world it should not

1145
00:48:50,960 --> 00:48:55,280
because

1146
00:48:52,079 --> 00:48:58,480
the reason why we we

1147
00:48:55,280 --> 00:48:59,200
we say we this we do this kind of binary

1148
00:48:58,480 --> 00:49:02,559
import is

1149
00:48:59,200 --> 00:49:04,640
we guarantee to our user api

1150
00:49:02,559 --> 00:49:08,559
compatibility

1151
00:49:04,640 --> 00:49:11,118
we so far the ib compatibility usually

1152
00:49:08,559 --> 00:49:15,520
is kind of enforced by the so name

1153
00:49:11,119 --> 00:49:17,680
and we are we use a policy which is

1154
00:49:15,520 --> 00:49:18,559
derived from the debian policy of having

1155
00:49:17,680 --> 00:49:21,680
a package

1156
00:49:18,559 --> 00:49:24,880
named by the sr name so when things

1157
00:49:21,680 --> 00:49:27,440
start to be like uh the the

1158
00:49:24,880 --> 00:49:29,280
upstream has changed their api so that

1159
00:49:27,440 --> 00:49:30,720
the api is different so it's end up with

1160
00:49:29,280 --> 00:49:33,680
a so name where the

1161
00:49:30,720 --> 00:49:34,640
major is bumped we will see that and we

1162
00:49:33,680 --> 00:49:37,759
will either

1163
00:49:34,640 --> 00:49:38,960
in that case say it's it's fine it will

1164
00:49:37,760 --> 00:49:42,160
use the old copy

1165
00:49:38,960 --> 00:49:43,040
the old package but very often in that

1166
00:49:42,160 --> 00:49:46,240
case we will

1167
00:49:43,040 --> 00:49:49,040
update this binary package

1168
00:49:46,240 --> 00:49:49,839
to a more either a more recent version

1169
00:49:49,040 --> 00:49:52,880
of the package

1170
00:49:49,839 --> 00:49:55,599
or we will for this one we say we want

1171
00:49:52,880 --> 00:49:57,440
to instantiate it in sp2 and

1172
00:49:55,599 --> 00:50:00,880
and rebuild it so that it's used only

1173
00:49:57,440 --> 00:50:00,880
the latest version of the library

1174
00:50:01,119 --> 00:50:06,640
other questions yes it's kind of clean

1175
00:50:04,400 --> 00:50:08,960
so what you said about the transition

1176
00:50:06,640 --> 00:50:08,960
between

1177
00:50:09,280 --> 00:50:12,480
so to make it smoother

1178
00:50:13,119 --> 00:50:18,640
will it help to introduce a periodic uh

1179
00:50:16,319 --> 00:50:19,440
test like a rebuilding rebuilding

1180
00:50:18,640 --> 00:50:22,160
everything so

1181
00:50:19,440 --> 00:50:24,160
you clearly know where to grow or do you

1182
00:50:22,160 --> 00:50:27,598
have other solutions to make it

1183
00:50:24,160 --> 00:50:30,640
smoother sorry

1184
00:50:27,599 --> 00:50:33,760
sticking to english um question was

1185
00:50:30,640 --> 00:50:35,920
to mitigate a bit uh

1186
00:50:33,760 --> 00:50:37,280
all the difficulties of leap not being

1187
00:50:35,920 --> 00:50:39,520
able to rebuild

1188
00:50:37,280 --> 00:50:41,040
because of sleep changing things and not

1189
00:50:39,520 --> 00:50:43,680
discovering that

1190
00:50:41,040 --> 00:50:45,279
oh my god we are breaking leap should we

1191
00:50:43,680 --> 00:50:47,759
should did we try to

1192
00:50:45,280 --> 00:50:49,680
do periodic rebuild of all of this kind

1193
00:50:47,760 --> 00:50:53,359
of thing

1194
00:50:49,680 --> 00:50:54,000
i'm sorry we don't the reason is also

1195
00:50:53,359 --> 00:50:57,279
because we

1196
00:50:54,000 --> 00:51:00,000
have um the the staging which

1197
00:50:57,280 --> 00:51:01,359
are always monitoring what's happening

1198
00:51:00,000 --> 00:51:05,040
on sleep

1199
00:51:01,359 --> 00:51:06,880
so we um those staging use a snapshot

1200
00:51:05,040 --> 00:51:10,240
which is usually

1201
00:51:06,880 --> 00:51:13,839
refreshed i think it's on a weekly basis

1202
00:51:10,240 --> 00:51:16,799
uh so every week um

1203
00:51:13,839 --> 00:51:17,520
on on on leap we will discover the

1204
00:51:16,800 --> 00:51:20,720
breakage

1205
00:51:17,520 --> 00:51:24,000
as soon as they appear because the

1206
00:51:20,720 --> 00:51:26,879
base of of uh leap is

1207
00:51:24,000 --> 00:51:28,559
sli so we will see that there are

1208
00:51:26,880 --> 00:51:31,040
changes in in sli

1209
00:51:28,559 --> 00:51:33,119
and then they we see that it's it's

1210
00:51:31,040 --> 00:51:35,440
breaking so we don't have the concept of

1211
00:51:33,119 --> 00:51:36,480
let's rebuild the entire distro and see

1212
00:51:35,440 --> 00:51:40,640
what's break

1213
00:51:36,480 --> 00:51:42,880
because the obs is doing that constantly

1214
00:51:40,640 --> 00:51:43,680
monitoring all the build requires etc

1215
00:51:42,880 --> 00:51:46,720
and with

1216
00:51:43,680 --> 00:51:49,118
this idea of taking a snapshot

1217
00:51:46,720 --> 00:51:52,319
of of a distro and then updating the

1218
00:51:49,119 --> 00:51:52,319
snapshot from time to time

1219
00:51:54,240 --> 00:51:57,118
any other question

1220
00:51:57,359 --> 00:52:05,839
no oh thank you

1221
00:52:10,559 --> 00:52:12,640
you

