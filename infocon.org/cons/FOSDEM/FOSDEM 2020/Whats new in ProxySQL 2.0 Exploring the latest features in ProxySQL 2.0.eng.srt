1
00:00:05,040 --> 00:00:07,520
so good afternoon everyone my name is

2
00:00:06,960 --> 00:00:10,639
nick

3
00:00:07,520 --> 00:00:13,840
visas from proxy sql and today

4
00:00:10,639 --> 00:00:15,599
i'm going to present the new features

5
00:00:13,840 --> 00:00:19,520
and changes in proxy sql

6
00:00:15,599 --> 00:00:22,800
version 2. so a bit about us proxy scale

7
00:00:19,520 --> 00:00:23,680
llc we're a small company a bit smaller

8
00:00:22,800 --> 00:00:26,960
than google

9
00:00:23,680 --> 00:00:27,920
and we primarily do proxy sql

10
00:00:26,960 --> 00:00:29,439
development

11
00:00:27,920 --> 00:00:31,119
but of course we also provide support

12
00:00:29,439 --> 00:00:34,399
services to our um

13
00:00:31,119 --> 00:00:37,840
customers and also

14
00:00:34,399 --> 00:00:39,840
some dba consulting stuff

15
00:00:37,840 --> 00:00:41,120
we're hiring so um if anyone's

16
00:00:39,840 --> 00:00:44,239
interested in doing either

17
00:00:41,120 --> 00:00:47,199
c development or uh you know

18
00:00:44,239 --> 00:00:48,320
proxy sql support please reach out to us

19
00:00:47,200 --> 00:00:52,160
we work 100

20
00:00:48,320 --> 00:00:52,800
remote um and we're very flexible with

21
00:00:52,160 --> 00:00:55,760
the

22
00:00:52,800 --> 00:00:57,680
time and the type of work there's a lot

23
00:00:55,760 --> 00:01:00,399
that you can do at our company so

24
00:00:57,680 --> 00:01:01,840
reach out to us if you're interested

25
00:01:00,399 --> 00:01:05,119
this is an old slide of

26
00:01:01,840 --> 00:01:07,680
some companies using proxy sql

27
00:01:05,119 --> 00:01:08,640
and let's get started with a specific

28
00:01:07,680 --> 00:01:10,159
talk

29
00:01:08,640 --> 00:01:12,000
so in the beginning i'm going to start

30
00:01:10,159 --> 00:01:14,880
off with some performance enhancements

31
00:01:12,000 --> 00:01:16,400
that have been added and then go into

32
00:01:14,880 --> 00:01:19,280
the features specifically

33
00:01:16,400 --> 00:01:20,799
gtid causal reads the extended support

34
00:01:19,280 --> 00:01:23,600
we've introduced for

35
00:01:20,799 --> 00:01:24,560
galera and amazon aurora we're going to

36
00:01:23,600 --> 00:01:26,640
touch on

37
00:01:24,560 --> 00:01:28,159
the ldap integration that has been

38
00:01:26,640 --> 00:01:30,320
implemented and then

39
00:01:28,159 --> 00:01:31,840
move over to security kind of stuff

40
00:01:30,320 --> 00:01:32,479
audit logging features that we've

41
00:01:31,840 --> 00:01:36,079
introduced

42
00:01:32,479 --> 00:01:38,000
ssl we've built a lot of things in terms

43
00:01:36,079 --> 00:01:39,439
of logging to get information about what

44
00:01:38,000 --> 00:01:41,520
all of your connections and what all of

45
00:01:39,439 --> 00:01:44,320
your

46
00:01:41,520 --> 00:01:46,000
processes in your database are doing so

47
00:01:44,320 --> 00:01:46,398
i mean we've implemented all of that

48
00:01:46,000 --> 00:01:48,159
with

49
00:01:46,399 --> 00:01:49,600
json so we're going to try and go

50
00:01:48,159 --> 00:01:51,119
through that quickly this is a longer

51
00:01:49,600 --> 00:01:52,479
presentation than we have

52
00:01:51,119 --> 00:01:55,280
time for today so i'm going to try and

53
00:01:52,479 --> 00:01:57,679
whiz past some sections

54
00:01:55,280 --> 00:02:00,320
and then finally discuss the the

55
00:01:57,680 --> 00:02:03,680
firewall that's been introduced and sql

56
00:02:00,320 --> 00:02:04,639
injection detection so performance

57
00:02:03,680 --> 00:02:06,560
enhancements

58
00:02:04,640 --> 00:02:08,000
starting off we've upgraded a lot of our

59
00:02:06,560 --> 00:02:10,479
internal dependencies

60
00:02:08,000 --> 00:02:11,360
this led to a lot of code changes we

61
00:02:10,479 --> 00:02:13,680
moved to the

62
00:02:11,360 --> 00:02:14,480
mariadb connector version three we've

63
00:02:13,680 --> 00:02:16,879
uploaded

64
00:02:14,480 --> 00:02:18,238
we've upgraded gemma lock which in

65
00:02:16,879 --> 00:02:21,200
itself is faster

66
00:02:18,239 --> 00:02:21,440
to version 5.2 and we've also upgraded

67
00:02:21,200 --> 00:02:24,640
the

68
00:02:21,440 --> 00:02:26,800
sqlite and the lip config

69
00:02:24,640 --> 00:02:27,920
we improved the the performance of the

70
00:02:26,800 --> 00:02:30,959
mysql

71
00:02:27,920 --> 00:02:30,958
refresh variables

72
00:02:31,360 --> 00:02:35,599
process let me call it it's it's very

73
00:02:33,840 --> 00:02:37,519
core because i mean this this takes care

74
00:02:35,599 --> 00:02:39,280
of updating all of the

75
00:02:37,519 --> 00:02:40,800
stats variables for every single thread

76
00:02:39,280 --> 00:02:41,599
that's running and every single process

77
00:02:40,800 --> 00:02:43,760
so

78
00:02:41,599 --> 00:02:44,720
the changes here really made a big uh

79
00:02:43,760 --> 00:02:47,359
improvement

80
00:02:44,720 --> 00:02:47,920
um we also have made well it was

81
00:02:47,360 --> 00:02:49,760
actually a

82
00:02:47,920 --> 00:02:53,280
complete overhaul rather than several

83
00:02:49,760 --> 00:02:55,760
optimizations for the stat tables

84
00:02:53,280 --> 00:02:57,040
and that goes together with a monitor

85
00:02:55,760 --> 00:02:58,480
module changes

86
00:02:57,040 --> 00:03:00,560
a lot of code was just completely

87
00:02:58,480 --> 00:03:03,679
rewritten

88
00:03:00,560 --> 00:03:04,879
and some some bugs were were found well

89
00:03:03,680 --> 00:03:06,239
they weren't actually bugs they were

90
00:03:04,879 --> 00:03:08,879
performance issues

91
00:03:06,239 --> 00:03:10,159
in fast when running proxy sql and fast

92
00:03:08,879 --> 00:03:13,518
forward so

93
00:03:10,159 --> 00:03:15,599
those were addressed and we've also

94
00:03:13,519 --> 00:03:17,360
added a variable

95
00:03:15,599 --> 00:03:19,440
where you can pass through a list of

96
00:03:17,360 --> 00:03:21,920
variables that you want to keep

97
00:03:19,440 --> 00:03:23,680
multiplexing enabled for that will make

98
00:03:21,920 --> 00:03:24,399
a major performance improvement because

99
00:03:23,680 --> 00:03:27,040
you won't have to

100
00:03:24,400 --> 00:03:28,480
create individual query rules you can

101
00:03:27,040 --> 00:03:28,879
just group them all together and say

102
00:03:28,480 --> 00:03:30,720
okay

103
00:03:28,879 --> 00:03:32,239
do not disable multiplexing for this

104
00:03:30,720 --> 00:03:35,359
list of variables

105
00:03:32,239 --> 00:03:37,120
so that's quite useful we'll also

106
00:03:35,360 --> 00:03:39,599
introduce some memory optimization

107
00:03:37,120 --> 00:03:41,680
specifically on the vacuuming of the

108
00:03:39,599 --> 00:03:43,599
internal proxy sql database and the stat

109
00:03:41,680 --> 00:03:46,959
schemas

110
00:03:43,599 --> 00:03:49,359
and also introduce this variable

111
00:03:46,959 --> 00:03:50,959
to normalize the digest text so you can

112
00:03:49,360 --> 00:03:53,040
actually just

113
00:03:50,959 --> 00:03:54,000
store a portion of your digest rather

114
00:03:53,040 --> 00:03:56,239
than the

115
00:03:54,000 --> 00:03:58,400
the full query especially when it's a

116
00:03:56,239 --> 00:04:00,959
bad sheet

117
00:03:58,400 --> 00:04:01,840
full double bed sql statement and you

118
00:04:00,959 --> 00:04:02,959
don't want to store that in your

119
00:04:01,840 --> 00:04:05,200
database

120
00:04:02,959 --> 00:04:06,879
um okay and germaloc which we already

121
00:04:05,200 --> 00:04:09,920
discussed

122
00:04:06,879 --> 00:04:12,640
so in the query cache we've also finally

123
00:04:09,920 --> 00:04:15,200
implemented this was

124
00:04:12,640 --> 00:04:16,399
widely requested uh just the command so

125
00:04:15,200 --> 00:04:19,680
that you can be able to

126
00:04:16,399 --> 00:04:22,719
flush your cash um and we also improve

127
00:04:19,680 --> 00:04:24,800
the the cash ttl now it actually purges

128
00:04:22,720 --> 00:04:26,080
the cash entries rather than handle it

129
00:04:24,800 --> 00:04:28,960
as a background process

130
00:04:26,080 --> 00:04:29,440
previously it would just um you know

131
00:04:28,960 --> 00:04:31,120
mark

132
00:04:29,440 --> 00:04:32,719
that the cache should get emptied at

133
00:04:31,120 --> 00:04:36,240
some point now it actually gets

134
00:04:32,720 --> 00:04:38,800
emptied in real time

135
00:04:36,240 --> 00:04:41,199
um and we also have added an option to

136
00:04:38,800 --> 00:04:44,160
avoid caching empty result sets which

137
00:04:41,199 --> 00:04:44,160
can create a lot of

138
00:04:44,560 --> 00:04:47,919
garbage essentially in your in your

139
00:04:46,240 --> 00:04:50,479
cache so

140
00:04:47,919 --> 00:04:51,440
gtid causal reads i'm just going to

141
00:04:50,479 --> 00:04:54,400
touch on this

142
00:04:51,440 --> 00:04:56,639
feature i hope everybody has as has

143
00:04:54,400 --> 00:04:59,039
anybody here worked with the gtid

144
00:04:56,639 --> 00:05:00,400
causal reads and proxy scale was

145
00:04:59,040 --> 00:05:03,919
familiar with it

146
00:05:00,400 --> 00:05:06,479
okay um this is a presentation in itself

147
00:05:03,919 --> 00:05:08,840
but i will just try and give you an

148
00:05:06,479 --> 00:05:11,599
overview of

149
00:05:08,840 --> 00:05:14,479
the the feature

150
00:05:11,600 --> 00:05:16,160
the way it works is we'll set up proxy

151
00:05:14,479 --> 00:05:17,599
sqr as we normally do

152
00:05:16,160 --> 00:05:19,600
we also have to deploy an additional

153
00:05:17,600 --> 00:05:23,120
component called the bin log reader

154
00:05:19,600 --> 00:05:24,240
what this does is it uh checks the

155
00:05:23,120 --> 00:05:25,600
currently

156
00:05:24,240 --> 00:05:27,600
the bin logs that are currently being

157
00:05:25,600 --> 00:05:30,720
processed on each of the instances

158
00:05:27,600 --> 00:05:31,199
and just sends uh the transaction id so

159
00:05:30,720 --> 00:05:33,759
that's

160
00:05:31,199 --> 00:05:34,720
the the gt the identifier for the for

161
00:05:33,759 --> 00:05:37,360
the server

162
00:05:34,720 --> 00:05:39,520
and the sequence number for the gtid so

163
00:05:37,360 --> 00:05:42,080
in this way proxy sql can track

164
00:05:39,520 --> 00:05:42,960
the replication status of every single

165
00:05:42,080 --> 00:05:47,840
instance

166
00:05:42,960 --> 00:05:49,758
and you can you can define

167
00:05:47,840 --> 00:05:51,840
you can define query rules to ensure

168
00:05:49,759 --> 00:05:53,680
that all of your statements that are

169
00:05:51,840 --> 00:05:57,039
being executed on the slaves will be

170
00:05:53,680 --> 00:05:59,039
accessing a node that has uh data that

171
00:05:57,039 --> 00:06:00,960
is needed for your transaction so

172
00:05:59,039 --> 00:06:02,240
i won't say up-to-date data but it will

173
00:06:00,960 --> 00:06:03,359
make sure that the data that you're

174
00:06:02,240 --> 00:06:06,800
trying to access

175
00:06:03,360 --> 00:06:08,800
is up to date on the instance

176
00:06:06,800 --> 00:06:10,319
so the bin log reader itself is a really

177
00:06:08,800 --> 00:06:13,520
lightweight process

178
00:06:10,319 --> 00:06:15,840
it just sends um two numbers

179
00:06:13,520 --> 00:06:17,680
for every for every event well actually

180
00:06:15,840 --> 00:06:18,479
it sends the source id just once and

181
00:06:17,680 --> 00:06:20,639
then

182
00:06:18,479 --> 00:06:21,599
it just sends the sql sequence id so

183
00:06:20,639 --> 00:06:23,759
it's lightweight

184
00:06:21,600 --> 00:06:24,960
both in terms of what it's processing

185
00:06:23,759 --> 00:06:26,639
and what it's sending

186
00:06:24,960 --> 00:06:28,000
uh you don't have to worry about uh

187
00:06:26,639 --> 00:06:30,560
network throughput

188
00:06:28,000 --> 00:06:32,840
um it's also built with an angel process

189
00:06:30,560 --> 00:06:35,919
so it will stay up and ensure that

190
00:06:32,840 --> 00:06:36,880
um the data is flowing back to the proxy

191
00:06:35,919 --> 00:06:39,520
sql

192
00:06:36,880 --> 00:06:41,759
instances so where can we get this this

193
00:06:39,520 --> 00:06:43,120
is in a separate repository to proxy sql

194
00:06:41,759 --> 00:06:44,880
itself

195
00:06:43,120 --> 00:06:46,319
if you want to download it from the repo

196
00:06:44,880 --> 00:06:48,719
from github repo

197
00:06:46,319 --> 00:06:50,560
you can build it yourself it's just make

198
00:06:48,720 --> 00:06:52,400
and then your platform name

199
00:06:50,560 --> 00:06:53,840
we have actually created packages and we

200
00:06:52,400 --> 00:06:57,679
will be releasing these

201
00:06:53,840 --> 00:07:01,359
soon so keep an eye out for that

202
00:06:57,680 --> 00:07:03,599
um so um galeria application i hope

203
00:07:01,360 --> 00:07:06,720
everybody's familiar with galera

204
00:07:03,599 --> 00:07:09,759
show of hands so so okay

205
00:07:06,720 --> 00:07:10,880
okay um so i will skip the overview of

206
00:07:09,759 --> 00:07:13,520
galera application

207
00:07:10,880 --> 00:07:14,400
just say it's a very nice technology

208
00:07:13,520 --> 00:07:18,000
it's a

209
00:07:14,400 --> 00:07:19,198
virtually synchronous proxy sql has

210
00:07:18,000 --> 00:07:21,520
great support for it

211
00:07:19,199 --> 00:07:22,880
so we've introduced this a similar table

212
00:07:21,520 --> 00:07:25,840
to the one that we used for

213
00:07:22,880 --> 00:07:27,919
uh group replication where we can define

214
00:07:25,840 --> 00:07:30,719
the the concepts we need for

215
00:07:27,919 --> 00:07:31,758
the clustered configuration so we can

216
00:07:30,720 --> 00:07:33,599
define how many

217
00:07:31,759 --> 00:07:35,280
write instances we have we can define

218
00:07:33,599 --> 00:07:37,440
whether our writer instance is also

219
00:07:35,280 --> 00:07:39,359
going to be used as a reader

220
00:07:37,440 --> 00:07:41,360
we can define a threshold for how many

221
00:07:39,360 --> 00:07:44,080
transactions behind we can let

222
00:07:41,360 --> 00:07:45,680
a node be before considering it offline

223
00:07:44,080 --> 00:07:47,680
and then

224
00:07:45,680 --> 00:07:48,800
we also have the option for the backup

225
00:07:47,680 --> 00:07:50,879
writer host group

226
00:07:48,800 --> 00:07:52,960
which is essentially similar to the the

227
00:07:50,879 --> 00:07:53,840
backup option in h a proxy you can have

228
00:07:52,960 --> 00:07:56,400
instances just

229
00:07:53,840 --> 00:07:58,159
uh on like a warm standby in case you

230
00:07:56,400 --> 00:08:01,198
lose your master

231
00:07:58,160 --> 00:08:04,879
so that's what the table

232
00:08:01,199 --> 00:08:04,879
looks like inside proxy sql

233
00:08:05,360 --> 00:08:08,800
you'll need to define four different

234
00:08:06,879 --> 00:08:10,240
host groups one for your writer

235
00:08:08,800 --> 00:08:11,919
one for your backup writer this can

236
00:08:10,240 --> 00:08:14,240
obviously be an empty host group if you

237
00:08:11,919 --> 00:08:15,919
don't want to have a backup writer

238
00:08:14,240 --> 00:08:17,919
and you also have to define your reader

239
00:08:15,919 --> 00:08:19,680
your either host group the offline host

240
00:08:17,919 --> 00:08:21,520
group is a special host group that proxy

241
00:08:19,680 --> 00:08:22,879
sql will use itself when it detects a

242
00:08:21,520 --> 00:08:24,719
node is offline it will

243
00:08:22,879 --> 00:08:26,639
move it into the offline host group

244
00:08:24,720 --> 00:08:30,240
keeping only the active nodes in the

245
00:08:26,639 --> 00:08:30,240
writer and reader host groups

246
00:08:30,479 --> 00:08:34,319
so you can also define which instances

247
00:08:32,640 --> 00:08:35,919
you have active in case you

248
00:08:34,320 --> 00:08:37,440
haven't have an instance that you

249
00:08:35,919 --> 00:08:38,958
haven't launched yet or you've taken

250
00:08:37,440 --> 00:08:41,839
down for

251
00:08:38,958 --> 00:08:41,838
whatever reasons

252
00:08:42,240 --> 00:08:45,279
again these are the settings we

253
00:08:43,760 --> 00:08:48,800
discussed before about

254
00:08:45,279 --> 00:08:50,399
configuring your max writers and whether

255
00:08:48,800 --> 00:08:52,800
the writer should also be used as a

256
00:08:50,399 --> 00:08:52,800
reader

257
00:08:52,880 --> 00:08:56,000
separate health checks have been

258
00:08:54,240 --> 00:08:59,200
introduced um these check

259
00:08:56,000 --> 00:09:00,399
the the the ws rep variables to

260
00:08:59,200 --> 00:09:04,000
determine

261
00:09:00,399 --> 00:09:05,839
um the status of a node um

262
00:09:04,000 --> 00:09:08,240
here obviously you can set the interval

263
00:09:05,839 --> 00:09:11,519
the timeout and the max timeout count

264
00:09:08,240 --> 00:09:12,160
for each of the checks by default we've

265
00:09:11,519 --> 00:09:14,480
left the

266
00:09:12,160 --> 00:09:15,680
the amount number of checks to three you

267
00:09:14,480 --> 00:09:16,800
might want to tune this

268
00:09:15,680 --> 00:09:18,800
according to the needs of your

269
00:09:16,800 --> 00:09:20,399
environment

270
00:09:18,800 --> 00:09:22,000
there's also a new variable percona

271
00:09:20,399 --> 00:09:25,680
extra this is specifically for

272
00:09:22,000 --> 00:09:27,920
piconextrodb cluster pxc main mode

273
00:09:25,680 --> 00:09:28,800
so if you set this variable on the pxc

274
00:09:27,920 --> 00:09:31,279
node

275
00:09:28,800 --> 00:09:32,160
proxy x sql will pick up on the change

276
00:09:31,279 --> 00:09:34,160
and set the

277
00:09:32,160 --> 00:09:37,040
node to offline soft so that no traffic

278
00:09:34,160 --> 00:09:40,719
will be routed to it

279
00:09:37,040 --> 00:09:42,560
uh amazon aurora so we've added a lot of

280
00:09:40,720 --> 00:09:46,160
support for amazon aurora in

281
00:09:42,560 --> 00:09:46,640
version two the way it works is it will

282
00:09:46,160 --> 00:09:49,120
track

283
00:09:46,640 --> 00:09:50,080
the replica host status table which

284
00:09:49,120 --> 00:09:52,000
contains contains

285
00:09:50,080 --> 00:09:53,600
the replication information about your

286
00:09:52,000 --> 00:09:56,240
aurora cluster

287
00:09:53,600 --> 00:09:57,600
it supports auto discovery to a certain

288
00:09:56,240 --> 00:09:59,760
level you still need to define your

289
00:09:57,600 --> 00:10:02,399
reader and writer host groups but

290
00:09:59,760 --> 00:10:04,880
it's enough to just specify one node and

291
00:10:02,399 --> 00:10:06,560
proxy sql will connect to that instance

292
00:10:04,880 --> 00:10:08,320
and based on the information it collects

293
00:10:06,560 --> 00:10:11,119
it will build your topology

294
00:10:08,320 --> 00:10:12,079
um so it has native so it has auto

295
00:10:11,120 --> 00:10:14,800
discovery it has

296
00:10:12,079 --> 00:10:18,000
ac awareness and you can even set

297
00:10:14,800 --> 00:10:20,959
replication like granularity to to

298
00:10:18,000 --> 00:10:21,839
milliseconds we have a similar table to

299
00:10:20,959 --> 00:10:25,680
the one for

300
00:10:21,839 --> 00:10:26,880
galera cluster as well but we have

301
00:10:25,680 --> 00:10:29,839
i don't know if you can see these

302
00:10:26,880 --> 00:10:32,399
clearly there's some new aurora specific

303
00:10:29,839 --> 00:10:35,040
variables for instance your report your

304
00:10:32,399 --> 00:10:35,040
domain name

305
00:10:35,279 --> 00:10:39,839
the new reader weight variable

306
00:10:41,279 --> 00:10:44,480
these are all documented on on the

307
00:10:42,880 --> 00:10:45,120
github wiki so if you want to have a

308
00:10:44,480 --> 00:10:48,000
look at

309
00:10:45,120 --> 00:10:49,440
what each one does the main variables to

310
00:10:48,000 --> 00:10:51,600
keep in mind are

311
00:10:49,440 --> 00:10:53,360
max lag millisecond which is how many

312
00:10:51,600 --> 00:10:56,160
how much milliseconds

313
00:10:53,360 --> 00:10:56,959
will we can tolerate to keep a node

314
00:10:56,160 --> 00:11:00,079
active

315
00:10:56,959 --> 00:11:03,518
and the check timeout and interval

316
00:11:00,079 --> 00:11:05,279
um the rest are similar to a regular uh

317
00:11:03,519 --> 00:11:06,800
group replication or galera cluster

318
00:11:05,279 --> 00:11:10,079
configuration

319
00:11:06,800 --> 00:11:10,479
um we also have a logging table where we

320
00:11:10,079 --> 00:11:12,239
keep

321
00:11:10,480 --> 00:11:14,160
all of the statistics of you know how

322
00:11:12,240 --> 00:11:15,920
many checks failed

323
00:11:14,160 --> 00:11:16,959
the reasons for the for their failures

324
00:11:15,920 --> 00:11:18,560
and this is where you can track the

325
00:11:16,959 --> 00:11:19,439
monitoring it basically takes all of the

326
00:11:18,560 --> 00:11:22,079
information

327
00:11:19,440 --> 00:11:24,240
it finds in or and also persists it in

328
00:11:22,079 --> 00:11:27,760
proxy sql

329
00:11:24,240 --> 00:11:29,760
okay um and then the last thing that i

330
00:11:27,760 --> 00:11:31,200
want to touch on here is we also give an

331
00:11:29,760 --> 00:11:33,200
option where you can directly in your

332
00:11:31,200 --> 00:11:36,079
select statement uh

333
00:11:33,200 --> 00:11:38,079
specify how much uh how many

334
00:11:36,079 --> 00:11:39,599
milliseconds of delay are okay for a

335
00:11:38,079 --> 00:11:41,040
query in case you have some query that

336
00:11:39,600 --> 00:11:42,880
needs to be more up to date and it will

337
00:11:41,040 --> 00:11:44,560
go and it will find an instance

338
00:11:42,880 --> 00:11:46,640
that has the most up-to-date data for

339
00:11:44,560 --> 00:11:49,119
you

340
00:11:46,640 --> 00:11:50,560
just to note it's not the exact measured

341
00:11:49,120 --> 00:11:54,160
lag but it's kind of an

342
00:11:50,560 --> 00:11:57,839
estimate because you can't know the

343
00:11:54,160 --> 00:12:00,480
exact amount of lag from the time

344
00:11:57,839 --> 00:12:01,040
the connection was initialized so this

345
00:12:00,480 --> 00:12:03,040
is the

346
00:12:01,040 --> 00:12:04,560
the lag that proxy sql at least knows

347
00:12:03,040 --> 00:12:08,880
about but um

348
00:12:04,560 --> 00:12:08,880
it's highly granular and very accurate

349
00:12:09,360 --> 00:12:13,680
so again we have the option to use the

350
00:12:11,279 --> 00:12:16,240
writer as a reader

351
00:12:13,680 --> 00:12:17,920
and we can we can also set this variable

352
00:12:16,240 --> 00:12:22,480
to only

353
00:12:17,920 --> 00:12:22,479
only read from replicas okay

354
00:12:22,880 --> 00:12:26,800
so ldap i don't want to talk about this

355
00:12:24,720 --> 00:12:30,639
too much because the implementation

356
00:12:26,800 --> 00:12:32,639
is still rudimentary but there's

357
00:12:30,639 --> 00:12:33,760
going to be a lot of active development

358
00:12:32,639 --> 00:12:37,040
on ldap

359
00:12:33,760 --> 00:12:38,639
in the next few months

360
00:12:37,040 --> 00:12:40,480
the way it works is a client will

361
00:12:38,639 --> 00:12:41,360
collect connect to proxy sql and try and

362
00:12:40,480 --> 00:12:42,959
authenticate

363
00:12:41,360 --> 00:12:45,120
if proxy sql doesn't find those

364
00:12:42,959 --> 00:12:47,839
credentials within its own list of

365
00:12:45,120 --> 00:12:49,600
users it will connect to ldap and it

366
00:12:47,839 --> 00:12:52,880
will try authenticate

367
00:12:49,600 --> 00:12:54,399
it will it will check multiple groups

368
00:12:52,880 --> 00:12:56,240
it will try to find that user if it

369
00:12:54,399 --> 00:12:58,399
finds map credentials

370
00:12:56,240 --> 00:13:01,600
it will allow the user to authenticate

371
00:12:58,399 --> 00:13:04,079
um it's available as a separate plugin

372
00:13:01,600 --> 00:13:05,600
it's not on the website it will be

373
00:13:04,079 --> 00:13:07,199
released at some point but it still

374
00:13:05,600 --> 00:13:11,200
needs to be

375
00:13:07,200 --> 00:13:14,160
brushed up a bit you can see um

376
00:13:11,200 --> 00:13:17,200
the variables related to ldap it's

377
00:13:14,160 --> 00:13:20,319
pretty simple to use you just have to

378
00:13:17,200 --> 00:13:22,639
specify your your prefixes your suffixes

379
00:13:20,320 --> 00:13:24,959
your uri and make sure you have access

380
00:13:22,639 --> 00:13:28,720
and you can start using this

381
00:13:24,959 --> 00:13:31,439
so um ssl support

382
00:13:28,720 --> 00:13:33,120
we've implemented not only back-end but

383
00:13:31,440 --> 00:13:36,880
also front-end support

384
00:13:33,120 --> 00:13:38,560
for ssl and proxy sql version 2.

385
00:13:36,880 --> 00:13:40,079
to configure it you just have to set

386
00:13:38,560 --> 00:13:42,959
have ssl true

387
00:13:40,079 --> 00:13:43,839
and then proxy skill will automatically

388
00:13:42,959 --> 00:13:46,560
generate your

389
00:13:43,839 --> 00:13:48,079
certificates if you want to use your own

390
00:13:46,560 --> 00:13:49,279
ones you just have to create them with

391
00:13:48,079 --> 00:13:55,120
these specific names

392
00:13:49,279 --> 00:13:55,120
in the proxy sql data directory

393
00:13:55,600 --> 00:13:59,519
you can verify your front end connection

394
00:13:58,399 --> 00:14:02,720
just by

395
00:13:59,519 --> 00:14:04,720
checking the the status

396
00:14:02,720 --> 00:14:06,000
and then you can also see that in proxy

397
00:14:04,720 --> 00:14:08,320
sql admin

398
00:14:06,000 --> 00:14:10,240
so there's two points where you you

399
00:14:08,320 --> 00:14:13,360
would want to verify your connections

400
00:14:10,240 --> 00:14:15,120
the impact as you can see here there's a

401
00:14:13,360 --> 00:14:16,800
higher impact when there's a lower

402
00:14:15,120 --> 00:14:17,519
number of threads but as the threads

403
00:14:16,800 --> 00:14:19,359
increase

404
00:14:17,519 --> 00:14:21,519
because proxy sql reuses back-end

405
00:14:19,360 --> 00:14:24,160
connections there's not a huge impact i

406
00:14:21,519 --> 00:14:24,160
mean it's almost

407
00:14:25,839 --> 00:14:29,760
it's almost comparable with just the

408
00:14:27,760 --> 00:14:32,480
back-end ssl

409
00:14:29,760 --> 00:14:34,079
also you'll see reduced latency as the

410
00:14:32,480 --> 00:14:35,680
as the connections get prepared in the

411
00:14:34,079 --> 00:14:37,680
connection pool and

412
00:14:35,680 --> 00:14:40,079
once they're ready you won't even see

413
00:14:37,680 --> 00:14:41,519
the difference

414
00:14:40,079 --> 00:14:44,319
audit log is a new feature that was

415
00:14:41,519 --> 00:14:47,680
sponsored in proxy sql 2.0

416
00:14:44,320 --> 00:14:49,760
this allows you to track events both for

417
00:14:47,680 --> 00:14:51,279
the mysql module and for the admin

418
00:14:49,760 --> 00:14:52,959
module so you can track

419
00:14:51,279 --> 00:14:54,720
successful failed authentications

420
00:14:52,959 --> 00:14:56,399
graceful connects closed connections

421
00:14:54,720 --> 00:14:59,199
change of schemas

422
00:14:56,399 --> 00:15:00,160
within mysql and also you can see what's

423
00:14:59,199 --> 00:15:03,199
being

424
00:15:00,160 --> 00:15:06,240
changed within a proxy sql admin

425
00:15:03,199 --> 00:15:09,279
so just an example of what these

426
00:15:06,240 --> 00:15:11,120
logs look like it's all in json so you

427
00:15:09,279 --> 00:15:13,279
can see the type of error

428
00:15:11,120 --> 00:15:15,360
or the type of message connector k you

429
00:15:13,279 --> 00:15:17,680
can see if you've got ssl so this is

430
00:15:15,360 --> 00:15:19,360
a good way to be able to log all

431
00:15:17,680 --> 00:15:23,040
activities that are happening in

432
00:15:19,360 --> 00:15:25,120
proxy sql additionally when we improved

433
00:15:23,040 --> 00:15:28,240
the general log which was previously a

434
00:15:25,120 --> 00:15:28,959
strange custom format now we've migrated

435
00:15:28,240 --> 00:15:32,320
that to

436
00:15:28,959 --> 00:15:33,920
use json so if you

437
00:15:32,320 --> 00:15:35,759
in order to enable the events log you

438
00:15:33,920 --> 00:15:39,759
just have to specify the file

439
00:15:35,759 --> 00:15:40,000
and that will start producing events

440
00:15:39,759 --> 00:15:41,199
which

441
00:15:40,000 --> 00:15:42,639
look kind of like this i don't know if

442
00:15:41,199 --> 00:15:43,599
it's a bit small but here you can see a

443
00:15:42,639 --> 00:15:46,000
select

444
00:15:43,600 --> 00:15:47,600
statement was executed and it shows you

445
00:15:46,000 --> 00:15:48,480
the type of query and which is the host

446
00:15:47,600 --> 00:15:50,639
group idea

447
00:15:48,480 --> 00:15:52,399
id here we can see host group id minus

448
00:15:50,639 --> 00:15:54,639
one so this was actually

449
00:15:52,399 --> 00:15:55,839
served from cache whereas this went to

450
00:15:54,639 --> 00:15:59,360
host group

451
00:15:55,839 --> 00:16:01,600
one i think no host group zero

452
00:15:59,360 --> 00:16:03,199
um so it's a very nice way to see what's

453
00:16:01,600 --> 00:16:04,560
going on in practice scale this is

454
00:16:03,199 --> 00:16:06,639
think of it as the equivalent to the

455
00:16:04,560 --> 00:16:09,040
slow or general log in mysql

456
00:16:06,639 --> 00:16:11,279
very useful it should be always be on in

457
00:16:09,040 --> 00:16:14,399
products in a development environment so

458
00:16:11,279 --> 00:16:14,399
that you can see what's going on

459
00:16:14,959 --> 00:16:21,680
did a lot of implementation here on

460
00:16:18,560 --> 00:16:23,199
exporting stats in json specifically

461
00:16:21,680 --> 00:16:25,439
the process list and the free

462
00:16:23,199 --> 00:16:26,800
connections okay that's a lot of

463
00:16:25,440 --> 00:16:28,240
information because

464
00:16:26,800 --> 00:16:30,240
you have to consider that for every

465
00:16:28,240 --> 00:16:32,959
connection in proxy sql

466
00:16:30,240 --> 00:16:33,920
you have information about the front-end

467
00:16:32,959 --> 00:16:35,920
side of the connection

468
00:16:33,920 --> 00:16:37,839
the back-end side of the connection

469
00:16:35,920 --> 00:16:39,599
these connections could be changing

470
00:16:37,839 --> 00:16:41,279
there's a whole stack and there's a

471
00:16:39,600 --> 00:16:44,560
whole lot of reusing so it's

472
00:16:41,279 --> 00:16:47,199
very difficult to track all this and it

473
00:16:44,560 --> 00:16:49,439
also results in a lot of information

474
00:16:47,199 --> 00:16:52,959
so in order to sift through this you can

475
00:16:49,440 --> 00:16:55,120
use json extract in proxy sql admin

476
00:16:52,959 --> 00:16:57,199
this is this is what the information

477
00:16:55,120 --> 00:17:01,279
looks like for a thread id

478
00:16:57,199 --> 00:17:04,639
0 okay don't worry

479
00:17:01,279 --> 00:17:05,679
keep calm and love json if you beautify

480
00:17:04,640 --> 00:17:07,600
this

481
00:17:05,679 --> 00:17:09,199
and you break it down and dissect it

482
00:17:07,599 --> 00:17:10,399
what we can see here it's a bit small

483
00:17:09,199 --> 00:17:12,799
here we have

484
00:17:10,400 --> 00:17:14,079
back ends the client and the connection

485
00:17:12,799 --> 00:17:16,559
so

486
00:17:14,079 --> 00:17:18,559
you can get information about what's

487
00:17:16,559 --> 00:17:19,199
happening on your back end very useful

488
00:17:18,559 --> 00:17:21,359
information

489
00:17:19,199 --> 00:17:23,360
for instance if multiplexing is disabled

490
00:17:21,359 --> 00:17:25,599
if auto commit was true

491
00:17:23,359 --> 00:17:27,520
if uh you know what the last auto commit

492
00:17:25,599 --> 00:17:28,079
sent was and within mysql here you can

493
00:17:27,520 --> 00:17:30,400
even see

494
00:17:28,079 --> 00:17:32,000
the statements that you're executing

495
00:17:30,400 --> 00:17:33,679
whether it's a prepared statement you

496
00:17:32,000 --> 00:17:35,760
can see exactly what's going on

497
00:17:33,679 --> 00:17:37,520
but of course it's a lot of information

498
00:17:35,760 --> 00:17:39,520
um it's difficult to

499
00:17:37,520 --> 00:17:41,200
to sort through unless you know exactly

500
00:17:39,520 --> 00:17:42,480
um what you want to get but we wanted to

501
00:17:41,200 --> 00:17:45,760
keep it explicit so

502
00:17:42,480 --> 00:17:48,240
that we could have an easier path to

503
00:17:45,760 --> 00:17:49,600
diagnosing issues

504
00:17:48,240 --> 00:17:50,960
so here we can see the connection

505
00:17:49,600 --> 00:17:52,559
elements you can see what charset's

506
00:17:50,960 --> 00:17:53,679
being used you can see for binary

507
00:17:52,559 --> 00:17:56,879
logging is enabled

508
00:17:53,679 --> 00:17:58,640
it's a complete log of everything going

509
00:17:56,880 --> 00:18:00,559
inside

510
00:17:58,640 --> 00:18:01,919
going on in your processes and here we

511
00:18:00,559 --> 00:18:04,160
can see an example of what

512
00:18:01,919 --> 00:18:05,520
free connections looks like this is a

513
00:18:04,160 --> 00:18:09,120
much

514
00:18:05,520 --> 00:18:10,639
more contained view of data it's um

515
00:18:09,120 --> 00:18:12,879
most of the information you would get

516
00:18:10,640 --> 00:18:14,400
from your stats mysql connection pool

517
00:18:12,880 --> 00:18:16,320
table

518
00:18:14,400 --> 00:18:18,000
as well as some other system stuff here

519
00:18:16,320 --> 00:18:21,360
you can see

520
00:18:18,000 --> 00:18:23,360
affected rows the character set

521
00:18:21,360 --> 00:18:25,280
some systemic information you know

522
00:18:23,360 --> 00:18:28,159
packet size

523
00:18:25,280 --> 00:18:29,600
and some mysql info so if you want to

524
00:18:28,160 --> 00:18:31,440
get this information in a clear form

525
00:18:29,600 --> 00:18:33,760
it's best to use json extract and just

526
00:18:31,440 --> 00:18:38,960
get exactly what you're interested in

527
00:18:33,760 --> 00:18:41,919
getting um okay we still have some time

528
00:18:38,960 --> 00:18:45,520
so so i'm quickly going to go through

529
00:18:41,919 --> 00:18:47,440
this okay we've introduced a firewall

530
00:18:45,520 --> 00:18:49,840
we use the whitelist approach previously

531
00:18:47,440 --> 00:18:52,400
you'd use a query rule to block users

532
00:18:49,840 --> 00:18:56,000
instead we've allowed a whitelist where

533
00:18:52,400 --> 00:18:59,360
you can specify either users

534
00:18:56,000 --> 00:19:01,360
schemas and you can you can set it

535
00:18:59,360 --> 00:19:02,399
set it up in one of three modes either

536
00:19:01,360 --> 00:19:03,918
off completely

537
00:19:02,400 --> 00:19:05,600
detecting so that you can track what's

538
00:19:03,919 --> 00:19:06,480
going through and finally protecting so

539
00:19:05,600 --> 00:19:10,080
think of this

540
00:19:06,480 --> 00:19:12,960
kind of like as se linux for proxy sql

541
00:19:10,080 --> 00:19:13,520
um we also keep a track of all of the

542
00:19:12,960 --> 00:19:16,080
traffic

543
00:19:13,520 --> 00:19:18,000
um that goes through so it's useful to

544
00:19:16,080 --> 00:19:20,559
have statistics on that as well

545
00:19:18,000 --> 00:19:22,080
uh finally we've also added a library

546
00:19:20,559 --> 00:19:24,639
for sql injection

547
00:19:22,080 --> 00:19:27,039
it does work uh it does give a lot of

548
00:19:24,640 --> 00:19:29,440
false positives because it's very picky

549
00:19:27,039 --> 00:19:31,520
um if you're interested you can you can

550
00:19:29,440 --> 00:19:33,760
have a look at how it works

551
00:19:31,520 --> 00:19:36,160
and by enabling it you'll see messages

552
00:19:33,760 --> 00:19:37,840
in your error log about how

553
00:19:36,160 --> 00:19:39,440
whether there are danger statements

554
00:19:37,840 --> 00:19:41,600
being executed

555
00:19:39,440 --> 00:19:42,960
and finally just to add on this because

556
00:19:41,600 --> 00:19:43,760
it was an issue with the initial

557
00:19:42,960 --> 00:19:46,320
releases

558
00:19:43,760 --> 00:19:49,520
we have got full support for mysql 8

559
00:19:46,320 --> 00:19:51,200
authentication mechanisms so

560
00:19:49,520 --> 00:19:53,840
thank you very much we have 30 seconds

561
00:19:51,200 --> 00:19:53,840
for questions

562
00:19:54,270 --> 00:19:57,809
[Applause]

