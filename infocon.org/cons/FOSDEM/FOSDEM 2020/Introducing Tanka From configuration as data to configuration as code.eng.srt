1
00:00:04,960 --> 00:00:07,919
further ado

2
00:00:05,920 --> 00:00:09,280
uh i'd like to give the word to uh to

3
00:00:07,919 --> 00:00:12,399
tom and uh

4
00:00:09,280 --> 00:00:12,399
after that uh malcolm

5
00:00:12,559 --> 00:00:20,640
so hello everybody

6
00:00:16,400 --> 00:00:20,640
is this working cool no

7
00:00:22,240 --> 00:00:26,240
so like already said i'm tom this is

8
00:00:25,199 --> 00:00:28,480
malcolm

9
00:00:26,240 --> 00:00:31,119
we're from grafana labs and introducing

10
00:00:28,480 --> 00:00:32,480
you to grifanatanka today

11
00:00:31,119 --> 00:00:34,719
a new open source project we've been

12
00:00:32,479 --> 00:00:38,078
starting recently

13
00:00:34,719 --> 00:00:40,320
so who of you is using kubernetes as his

14
00:00:38,079 --> 00:00:40,320
job

15
00:00:41,520 --> 00:00:45,120
and who if you would say that they are

16
00:00:43,520 --> 00:00:47,760
really in love with yellow and it's

17
00:00:45,120 --> 00:00:47,760
super cool

18
00:00:48,480 --> 00:00:51,839
okay basically expected that we don't

19
00:00:51,199 --> 00:00:53,760
really

20
00:00:51,840 --> 00:00:56,719
like it that much either because it did

21
00:00:53,760 --> 00:01:01,199
not completely fit our needs

22
00:00:56,719 --> 00:01:04,159
because after all yaml is basically data

23
00:01:01,199 --> 00:01:05,600
and it's laid down like data and it's

24
00:01:04,159 --> 00:01:06,799
not much more clever than a sheet of

25
00:01:05,600 --> 00:01:09,839
paper

26
00:01:06,799 --> 00:01:12,000
you kind of effectively express things

27
00:01:09,840 --> 00:01:13,920
but they need to stay as verbose as they

28
00:01:12,000 --> 00:01:15,600
are and you can't use any of these cool

29
00:01:13,920 --> 00:01:19,759
tricks or

30
00:01:15,600 --> 00:01:22,399
fancy programming languages can do

31
00:01:19,759 --> 00:01:24,640
let's take a look at some examples why

32
00:01:22,400 --> 00:01:27,040
this won't work that well

33
00:01:24,640 --> 00:01:27,759
for example this is a deployment for

34
00:01:27,040 --> 00:01:30,240
just a

35
00:01:27,759 --> 00:01:31,439
single final port and it's not

36
00:01:30,240 --> 00:01:33,280
configured or anything

37
00:01:31,439 --> 00:01:34,639
it just starts the container this is

38
00:01:33,280 --> 00:01:36,960
basically the equivalent of

39
00:01:34,640 --> 00:01:37,840
equivalent of a docker run command but

40
00:01:36,960 --> 00:01:40,399
instead

41
00:01:37,840 --> 00:01:41,360
of one line on a command line it takes

42
00:01:40,400 --> 00:01:44,000
like

43
00:01:41,360 --> 00:01:45,040
an entire screen of things and most of

44
00:01:44,000 --> 00:01:48,399
these

45
00:01:45,040 --> 00:01:48,880
aren't actually anything expressive at

46
00:01:48,399 --> 00:01:52,240
all

47
00:01:48,880 --> 00:01:53,759
like we have the word grafana four times

48
00:01:52,240 --> 00:01:56,798
on screen

49
00:01:53,759 --> 00:01:58,479
why and actually the only thing that's

50
00:01:56,799 --> 00:01:59,439
really unique about this here is the

51
00:01:58,479 --> 00:02:02,159
image

52
00:01:59,439 --> 00:02:03,279
but still we need to express the entire

53
00:02:02,159 --> 00:02:08,160
object

54
00:02:03,280 --> 00:02:11,200
which makes using it pretty slow

55
00:02:08,160 --> 00:02:13,920
another example usually you don't deploy

56
00:02:11,200 --> 00:02:16,160
things a single time but instead in a

57
00:02:13,920 --> 00:02:19,599
deaf environment in a prod environment

58
00:02:16,160 --> 00:02:22,560
and these are not exactly equivalent

59
00:02:19,599 --> 00:02:24,879
so in-depth you would have the

60
00:02:22,560 --> 00:02:25,360
deployment a secret to hold your data

61
00:02:24,879 --> 00:02:27,120
source

62
00:02:25,360 --> 00:02:28,959
or the connection to your data source

63
00:02:27,120 --> 00:02:31,360
and the config map

64
00:02:28,959 --> 00:02:33,120
and that's it but for prod you probably

65
00:02:31,360 --> 00:02:35,840
need to alter that secret

66
00:02:33,120 --> 00:02:37,360
and you kind of want users to be able to

67
00:02:35,840 --> 00:02:38,640
use the source actually

68
00:02:37,360 --> 00:02:40,720
so you probably need a service in the

69
00:02:38,640 --> 00:02:43,839
ingress object as well

70
00:02:40,720 --> 00:02:45,440
but what yammer has to offer here is

71
00:02:43,840 --> 00:02:48,319
fairly limited

72
00:02:45,440 --> 00:02:50,959
because you can't just reuse what you

73
00:02:48,319 --> 00:02:52,720
have for dev for prop because the

74
00:02:50,959 --> 00:02:55,760
even though these are the same or nearly

75
00:02:52,720 --> 00:02:58,159
the same for the secret

76
00:02:55,760 --> 00:02:59,840
you can't do the only thing you can do

77
00:02:58,159 --> 00:03:01,440
is duplicate the entire directory now

78
00:02:59,840 --> 00:03:03,920
you have to maintain two

79
00:03:01,440 --> 00:03:05,040
and if you're one of the cool people and

80
00:03:03,920 --> 00:03:08,079
want to be

81
00:03:05,040 --> 00:03:09,679
region aware and not have your entire

82
00:03:08,080 --> 00:03:10,560
production fail if one data center goes

83
00:03:09,680 --> 00:03:13,920
down

84
00:03:10,560 --> 00:03:15,920
then you need to maintain for us for you

85
00:03:13,920 --> 00:03:16,958
and the second one for you or any other

86
00:03:15,920 --> 00:03:19,119
region so

87
00:03:16,959 --> 00:03:20,640
you already have three directories of

88
00:03:19,120 --> 00:03:23,760
nearly equivalent files

89
00:03:20,640 --> 00:03:26,079
like there's might be a diff of

90
00:03:23,760 --> 00:03:26,959
two lines three lines between these but

91
00:03:26,080 --> 00:03:29,200
still

92
00:03:26,959 --> 00:03:30,959
you need to maintain all of them and as

93
00:03:29,200 --> 00:03:31,679
soon as you want to add something to one

94
00:03:30,959 --> 00:03:33,440
of these

95
00:03:31,680 --> 00:03:35,360
you need to propagate these changes to

96
00:03:33,440 --> 00:03:37,599
all of the directories

97
00:03:35,360 --> 00:03:38,400
which probably will be forgotten at some

98
00:03:37,599 --> 00:03:41,518
point

99
00:03:38,400 --> 00:03:42,720
so that you have severe drift in your

100
00:03:41,519 --> 00:03:44,959
configuration which

101
00:03:42,720 --> 00:03:46,799
makes maintaining heart and imagine

102
00:03:44,959 --> 00:03:48,720
being on call like at 3 a.m

103
00:03:46,799 --> 00:03:50,560
and having to fix something but first

104
00:03:48,720 --> 00:03:53,519
need to propagate all the fixes you've

105
00:03:50,560 --> 00:03:57,680
applied previously to other environments

106
00:03:53,519 --> 00:03:59,280
but that have not been done yet so

107
00:03:57,680 --> 00:04:01,120
this raise the question what can be done

108
00:03:59,280 --> 00:04:04,000
about it

109
00:04:01,120 --> 00:04:05,599
well at grifana labs we've looked around

110
00:04:04,000 --> 00:04:07,840
a little bit

111
00:04:05,599 --> 00:04:09,359
what we found out is that basically yaml

112
00:04:07,840 --> 00:04:11,200
lacks abstraction

113
00:04:09,360 --> 00:04:12,560
there have been previous attempts at

114
00:04:11,200 --> 00:04:14,720
adding abstraction

115
00:04:12,560 --> 00:04:16,560
to kubernetes like helm did it with

116
00:04:14,720 --> 00:04:18,798
temple lighting

117
00:04:16,560 --> 00:04:21,199
but templating didn't work quite out for

118
00:04:18,798 --> 00:04:23,280
us because

119
00:04:21,199 --> 00:04:24,639
it was too distant from what actually

120
00:04:23,280 --> 00:04:27,280
matters because we're string

121
00:04:24,639 --> 00:04:28,720
substituting on yaml and the was a

122
00:04:27,280 --> 00:04:31,440
pretty fragile syntax

123
00:04:28,720 --> 00:04:31,759
and it was pretty hard to read there was

124
00:04:31,440 --> 00:04:34,960
no

125
00:04:31,759 --> 00:04:38,479
no language shooting available for it

126
00:04:34,960 --> 00:04:42,000
it really did not make the thing for us

127
00:04:38,479 --> 00:04:43,120
so looked around a bit further and found

128
00:04:42,000 --> 00:04:46,960
out that there is something called

129
00:04:43,120 --> 00:04:49,919
jsonnet from google it's basically json

130
00:04:46,960 --> 00:04:50,960
but with additions like it supports

131
00:04:49,919 --> 00:04:53,919
comments

132
00:04:50,960 --> 00:04:55,198
it supports variables it's supposed to

133
00:04:53,919 --> 00:04:58,159
have fields

134
00:04:55,199 --> 00:04:59,680
and it supports a pre pretty big set of

135
00:04:58,160 --> 00:05:03,280
common language features

136
00:04:59,680 --> 00:05:06,000
which i will show in the next slides

137
00:05:03,280 --> 00:05:07,520
so probably one of the most interesting

138
00:05:06,000 --> 00:05:10,479
things is functions

139
00:05:07,520 --> 00:05:12,080
they work basically just like you would

140
00:05:10,479 --> 00:05:15,120
expect a function to work

141
00:05:12,080 --> 00:05:18,479
it takes arguments and it returns

142
00:05:15,120 --> 00:05:19,360
any type of json is aware of so maybe a

143
00:05:18,479 --> 00:05:24,000
dictionary

144
00:05:19,360 --> 00:05:27,199
an array an integer boolean whatever

145
00:05:24,000 --> 00:05:29,280
but this can be used to reduce

146
00:05:27,199 --> 00:05:30,479
that big thing we have been seeing for

147
00:05:29,280 --> 00:05:32,159
deployment before

148
00:05:30,479 --> 00:05:33,520
for something that is nearly as concise

149
00:05:32,160 --> 00:05:35,520
as docker run again

150
00:05:33,520 --> 00:05:38,000
you specify the name you specify the

151
00:05:35,520 --> 00:05:41,039
image and you get all of these filled in

152
00:05:38,000 --> 00:05:41,039
and it just works out

153
00:05:41,120 --> 00:05:48,479
also another thing that makes it really

154
00:05:45,680 --> 00:05:50,080
somewhat superior to helm is patching

155
00:05:48,479 --> 00:05:50,880
which is natively integrated into the

156
00:05:50,080 --> 00:05:54,000
language

157
00:05:50,880 --> 00:05:54,960
so say we had this function signature

158
00:05:54,000 --> 00:05:56,720
from before

159
00:05:54,960 --> 00:05:58,638
but i really really really wanted to add

160
00:05:56,720 --> 00:05:59,759
a label there but the function doesn't

161
00:05:58,639 --> 00:06:02,479
allow me to

162
00:05:59,759 --> 00:06:04,160
this is something somewhat equivalent to

163
00:06:02,479 --> 00:06:05,280
something missing from values.yaml and

164
00:06:04,160 --> 00:06:07,759
helm

165
00:06:05,280 --> 00:06:08,799
so what can we do about it in jsonnet

166
00:06:07,759 --> 00:06:10,960
well we can

167
00:06:08,800 --> 00:06:12,080
just format one of these patches so it

168
00:06:10,960 --> 00:06:14,638
just says

169
00:06:12,080 --> 00:06:15,919
basically we want whatever this returns

170
00:06:14,639 --> 00:06:18,560
plus

171
00:06:15,919 --> 00:06:20,240
we want the team label and we don't want

172
00:06:18,560 --> 00:06:21,120
to overwrite metadata and labels

173
00:06:20,240 --> 00:06:23,360
completely

174
00:06:21,120 --> 00:06:24,639
but just inject that single thing in

175
00:06:23,360 --> 00:06:27,840
there as well

176
00:06:24,639 --> 00:06:30,880
so you don't you can modify things down

177
00:06:27,840 --> 00:06:33,198
the tree without affecting others

178
00:06:30,880 --> 00:06:34,240
which really is about the flexibility of

179
00:06:33,199 --> 00:06:35,840
jsonnet

180
00:06:34,240 --> 00:06:37,759
so if something is missing from the

181
00:06:35,840 --> 00:06:39,599
library the library does not let you

182
00:06:37,759 --> 00:06:43,360
down completely but instead you just

183
00:06:39,600 --> 00:06:43,360
format these patches afterwards

184
00:06:43,600 --> 00:06:48,000
another cool thing are imports so one

185
00:06:46,319 --> 00:06:51,199
big issue of yaml is that as

186
00:06:48,000 --> 00:06:54,240
soon as your file gets pretty big

187
00:06:51,199 --> 00:06:55,120
it's hard to keep up with it where is

188
00:06:54,240 --> 00:06:56,400
something defined

189
00:06:55,120 --> 00:06:59,199
why do you need to define things

190
00:06:56,400 --> 00:07:00,840
multiple times and especially

191
00:06:59,199 --> 00:07:03,360
the issue we had previously with

192
00:07:00,840 --> 00:07:04,560
environments yeah i have to copy it all

193
00:07:03,360 --> 00:07:07,440
the time even if it's

194
00:07:04,560 --> 00:07:08,400
the same thing so jsonnet supports

195
00:07:07,440 --> 00:07:10,319
imports

196
00:07:08,400 --> 00:07:12,080
consider a file called comma with sonnet

197
00:07:10,319 --> 00:07:14,720
with this content

198
00:07:12,080 --> 00:07:16,080
and another one that imports exactly

199
00:07:14,720 --> 00:07:18,080
that file

200
00:07:16,080 --> 00:07:19,199
and takes the labels sub key out of

201
00:07:18,080 --> 00:07:22,240
there

202
00:07:19,199 --> 00:07:26,160
the jsonnet runtime then

203
00:07:22,240 --> 00:07:31,840
just copy paste practically the content

204
00:07:26,160 --> 00:07:31,840
into the correct location on the object

205
00:07:32,080 --> 00:07:37,440
another cool thing are packages

206
00:07:35,199 --> 00:07:38,880
so jsonnet is not only about having it

207
00:07:37,440 --> 00:07:40,319
or locally on your computer

208
00:07:38,880 --> 00:07:42,880
but also there's a package manager

209
00:07:40,319 --> 00:07:45,520
available so you can actually share

210
00:07:42,880 --> 00:07:46,479
your jsonnet files on the internet so

211
00:07:45,520 --> 00:07:48,400
that

212
00:07:46,479 --> 00:07:49,840
other people can make use of it you can

213
00:07:48,400 --> 00:07:51,840
build proper libraries

214
00:07:49,840 --> 00:07:54,159
they can be shared projects can build

215
00:07:51,840 --> 00:07:55,599
their own libraries which can just be

216
00:07:54,160 --> 00:07:57,759
installed and used

217
00:07:55,599 --> 00:07:59,759
and at grifana we have done that we have

218
00:07:57,759 --> 00:08:01,120
for nearly everything we use

219
00:07:59,759 --> 00:08:03,680
in our production environment we have

220
00:08:01,120 --> 00:08:05,599
json ellipse which contains for example

221
00:08:03,680 --> 00:08:07,120
memcached but also there's a library for

222
00:08:05,599 --> 00:08:10,400
loki available

223
00:08:07,120 --> 00:08:12,400
so it's basically everything we have

224
00:08:10,400 --> 00:08:13,440
modules for certain applications we have

225
00:08:12,400 --> 00:08:16,560
also

226
00:08:13,440 --> 00:08:17,440
mix-ins that include dashboard boards

227
00:08:16,560 --> 00:08:21,039
and alerts

228
00:08:17,440 --> 00:08:22,800
and deploy together they allow you to

229
00:08:21,039 --> 00:08:24,479
install an application to kubernetes

230
00:08:22,800 --> 00:08:28,160
which is monitored out of the box

231
00:08:24,479 --> 00:08:31,199
which i think is quite cool so

232
00:08:28,160 --> 00:08:31,199
how can that be used

233
00:08:34,000 --> 00:08:38,240
so now we're going to give you a quick

234
00:08:38,839 --> 00:08:41,839
demo

235
00:08:41,919 --> 00:08:45,360
so uh i'm going to talk it through so

236
00:08:44,000 --> 00:08:46,640
that it won't go wrong well it will go

237
00:08:45,360 --> 00:08:50,480
wrong but you'll see it

238
00:08:46,640 --> 00:08:51,360
happen um so here we have a k3d is a

239
00:08:50,480 --> 00:08:53,680
kubernetes

240
00:08:51,360 --> 00:08:54,480
uh simple kubernetes infrastructure

241
00:08:53,680 --> 00:08:56,399
we've

242
00:08:54,480 --> 00:08:57,920
shown that we've got a cluster we've got

243
00:08:56,399 --> 00:08:59,519
an empty cluster with the default

244
00:08:57,920 --> 00:09:01,120
namespace there's no pods in that

245
00:08:59,519 --> 00:09:02,399
namespace

246
00:09:01,120 --> 00:09:04,560
so what we're going to do is we're going

247
00:09:02,399 --> 00:09:07,440
to deploy grafana

248
00:09:04,560 --> 00:09:08,800
with a sample dashboard so here we have

249
00:09:07,440 --> 00:09:12,320
the provisioning

250
00:09:08,800 --> 00:09:13,680
yaml that tells uh grafana where to find

251
00:09:12,320 --> 00:09:15,519
dashboards

252
00:09:13,680 --> 00:09:17,120
and now uh we're going to have a look at

253
00:09:15,519 --> 00:09:19,839
a dashboard this

254
00:09:17,120 --> 00:09:20,880
is some json that i created a dashboard

255
00:09:19,839 --> 00:09:22,800
in grafana

256
00:09:20,880 --> 00:09:24,880
and i downloaded the dashboard it's just

257
00:09:22,800 --> 00:09:26,719
just just a random snippet of json

258
00:09:24,880 --> 00:09:28,800
that we're going to need yeah quite a

259
00:09:26,720 --> 00:09:32,080
lot of it but we don't need to know

260
00:09:28,800 --> 00:09:34,319
exactly what's in there right now okay

261
00:09:32,080 --> 00:09:35,200
so i'm going to create myself a tanker

262
00:09:34,320 --> 00:09:37,600
directory

263
00:09:35,200 --> 00:09:39,200
and enter it it's now an empty directory

264
00:09:37,600 --> 00:09:41,839
i'm now going to initialize

265
00:09:39,200 --> 00:09:43,200
tanka what this does is this goes off

266
00:09:41,839 --> 00:09:45,680
and downloads

267
00:09:43,200 --> 00:09:46,720
a couple of libraries that make

268
00:09:45,680 --> 00:09:49,760
kubernetes

269
00:09:46,720 --> 00:09:51,040
much much easier to use so you saw

270
00:09:49,760 --> 00:09:53,360
deployment dot new

271
00:09:51,040 --> 00:09:56,160
it's downloading libraries that that

272
00:09:53,360 --> 00:09:59,760
provide all of that

273
00:09:56,160 --> 00:10:03,040
for us okay so now i need to connect

274
00:09:59,760 --> 00:10:06,640
the the default environment uh

275
00:10:03,040 --> 00:10:09,360
to my own cluster so i set i tell it

276
00:10:06,640 --> 00:10:10,640
go to the a few i could make a few

277
00:10:09,360 --> 00:10:13,680
mistakes there yes

278
00:10:10,640 --> 00:10:16,160
so uh connect it to the default context

279
00:10:13,680 --> 00:10:19,599
in kubernetes

280
00:10:16,160 --> 00:10:20,959
so we're now set now let's have a look

281
00:10:19,600 --> 00:10:23,120
what we've got there so you can see

282
00:10:20,959 --> 00:10:24,880
we've got environments we've got

283
00:10:23,120 --> 00:10:26,240
lib and we've got in a vendored in

284
00:10:24,880 --> 00:10:29,439
directory you can see

285
00:10:26,240 --> 00:10:31,440
the libraries that we're going to uh

286
00:10:29,440 --> 00:10:32,640
we're going to use so we're now just

287
00:10:31,440 --> 00:10:35,519
going to copy

288
00:10:32,640 --> 00:10:37,760
those resources into the location where

289
00:10:35,519 --> 00:10:40,959
our tank is going to expect them

290
00:10:37,760 --> 00:10:43,839
so we're now ready to deploy

291
00:10:40,959 --> 00:10:47,199
grafana so we start with this

292
00:10:43,839 --> 00:10:48,800
environment's default main.jsonet

293
00:10:47,200 --> 00:10:50,320
and the first thing we want to do is we

294
00:10:48,800 --> 00:10:53,519
want to import

295
00:10:50,320 --> 00:10:56,720
the library that's going to bring in

296
00:10:53,519 --> 00:10:58,079
the kubernetes libraries so we'll start

297
00:10:56,720 --> 00:11:00,000
by importing something

298
00:10:58,079 --> 00:11:02,719
it's a library that's called currently

299
00:11:00,000 --> 00:11:05,839
called k-sonic util

300
00:11:02,720 --> 00:11:05,839
causal.lips on it

301
00:11:07,040 --> 00:11:14,640
and we add to that so that's the

302
00:11:10,640 --> 00:11:18,560
standard json jsonnet syntax

303
00:11:14,640 --> 00:11:20,079
we're now adding a section of json to

304
00:11:18,560 --> 00:11:20,959
that so we're taking one thing which is

305
00:11:20,079 --> 00:11:23,439
the library

306
00:11:20,959 --> 00:11:24,640
and then another thing which is a chunk

307
00:11:23,440 --> 00:11:26,000
of json

308
00:11:24,640 --> 00:11:28,240
and we've got some local definitions

309
00:11:26,000 --> 00:11:30,160
those are just shorthands

310
00:11:28,240 --> 00:11:32,000
that we're going to use later and now

311
00:11:30,160 --> 00:11:34,079
we've got a config

312
00:11:32,000 --> 00:11:36,160
object the plus means it doesn't

313
00:11:34,079 --> 00:11:37,439
overwrite any pre-existing configs it

314
00:11:36,160 --> 00:11:38,719
just adds to it

315
00:11:37,440 --> 00:11:41,680
and we've said just the number of

316
00:11:38,720 --> 00:11:44,160
replicas and now we're specifying

317
00:11:41,680 --> 00:11:46,399
that we're gonna the image we're gonna

318
00:11:44,160 --> 00:11:46,399
use

319
00:11:47,680 --> 00:11:53,120
now we create a standard json

320
00:11:51,200 --> 00:11:56,320
uh element called grafana that's going

321
00:11:53,120 --> 00:12:00,320
to contain all of the

322
00:11:56,320 --> 00:12:02,079
resources needed to make our

323
00:12:00,320 --> 00:12:03,680
deployment so the deployment is going to

324
00:12:02,079 --> 00:12:05,519
involve a conflict map

325
00:12:03,680 --> 00:12:07,599
a deployment and a service three

326
00:12:05,519 --> 00:12:10,959
standard kubernetes

327
00:12:07,600 --> 00:12:13,279
resources so here we've got a

328
00:12:10,959 --> 00:12:14,638
config map that's going to be called

329
00:12:13,279 --> 00:12:16,480
grafana config

330
00:12:14,639 --> 00:12:18,959
it's going to have a provisioning.yaml

331
00:12:16,480 --> 00:12:24,320
file which is just importing the yaml

332
00:12:18,959 --> 00:12:28,239
file we saw earlier

333
00:12:24,320 --> 00:12:29,920
and next we'll have the dashboard json

334
00:12:28,240 --> 00:12:31,200
so if any of you know about provisioning

335
00:12:29,920 --> 00:12:34,240
i'm being a bit naughty here i'm

336
00:12:31,200 --> 00:12:39,839
mounting them both into one directory

337
00:12:34,240 --> 00:12:39,839
but it just makes the demo simpler

338
00:12:42,959 --> 00:12:47,279
so now we've got our dashboard our

339
00:12:45,440 --> 00:12:48,000
config map set up with those two files

340
00:12:47,279 --> 00:12:50,839
that we need

341
00:12:48,000 --> 00:12:52,880
that will be mounted into our deployment

342
00:12:50,839 --> 00:12:54,399
uh

343
00:12:52,880 --> 00:12:56,240
see i had to change i was going to call

344
00:12:54,399 --> 00:12:57,440
it just container because it's inside

345
00:12:56,240 --> 00:12:58,720
the grafana

346
00:12:57,440 --> 00:13:00,240
element but that would overwrite my

347
00:12:58,720 --> 00:13:02,399
local at the top which is why i had to

348
00:13:00,240 --> 00:13:04,480
quickly edit myself there

349
00:13:02,399 --> 00:13:06,240
uh and i'm not going to call it fuzz dem

350
00:13:04,480 --> 00:13:08,480
i'm going to call it grafana too

351
00:13:06,240 --> 00:13:10,160
so as you can see the the amount of

352
00:13:08,480 --> 00:13:10,880
stuff we actually need to specify about

353
00:13:10,160 --> 00:13:14,240
the container

354
00:13:10,880 --> 00:13:17,920
is relatively small so

355
00:13:14,240 --> 00:13:19,680
we specify the name and the image

356
00:13:17,920 --> 00:13:21,439
and now we can use what's called a mix

357
00:13:19,680 --> 00:13:24,479
in so we're saying

358
00:13:21,440 --> 00:13:27,440
it's the new has created the container

359
00:13:24,480 --> 00:13:28,000
but we're saying actually add on another

360
00:13:27,440 --> 00:13:30,560
thing

361
00:13:28,000 --> 00:13:32,240
that just sets the port or says sets the

362
00:13:30,560 --> 00:13:33,040
port so we just want it to listen on

363
00:13:32,240 --> 00:13:36,560
port

364
00:13:33,040 --> 00:13:37,279
3000 now we create ourselves a

365
00:13:36,560 --> 00:13:39,518
deployment

366
00:13:37,279 --> 00:13:41,839
which is going to make use of that

367
00:13:39,519 --> 00:13:43,199
container

368
00:13:41,839 --> 00:13:46,240
so the course the deployment is going to

369
00:13:43,199 --> 00:13:46,240
be called grafana

370
00:13:47,279 --> 00:13:50,399
and now we're going to say for the

371
00:13:48,800 --> 00:13:51,839
number of replicas we're going to go up

372
00:13:50,399 --> 00:13:54,880
and we're going to use

373
00:13:51,839 --> 00:13:56,240
uh the config value and the

374
00:13:54,880 --> 00:13:57,839
neat thing about that is another

375
00:13:56,240 --> 00:13:58,399
environment could set a different value

376
00:13:57,839 --> 00:14:01,920
for that

377
00:13:58,399 --> 00:14:02,480
so that's an easily overrideable value

378
00:14:01,920 --> 00:14:04,560
yeah

379
00:14:02,480 --> 00:14:05,920
so you can say certain things we know

380
00:14:04,560 --> 00:14:07,279
we're going to override

381
00:14:05,920 --> 00:14:09,279
make them available for people to

382
00:14:07,279 --> 00:14:11,360
override but some things

383
00:14:09,279 --> 00:14:13,040
we can't predict everything so if even

384
00:14:11,360 --> 00:14:13,680
if we haven't made it overrideable you

385
00:14:13,040 --> 00:14:16,880
can just

386
00:14:13,680 --> 00:14:18,399
adapt it afterwards by adding some extra

387
00:14:16,880 --> 00:14:21,680
unit for example using a mixing or just

388
00:14:18,399 --> 00:14:24,160
adding on another bit of json it

389
00:14:21,680 --> 00:14:26,000
so there we've got the basic deployment

390
00:14:24,160 --> 00:14:26,240
we're adding this very simple i mean if

391
00:14:26,000 --> 00:14:29,680
you

392
00:14:26,240 --> 00:14:31,440
if you normally when you do volumes

393
00:14:29,680 --> 00:14:33,359
you have to have a volume and a volume

394
00:14:31,440 --> 00:14:35,440
mount and it's lots of repetition

395
00:14:33,360 --> 00:14:36,959
here in one line we've just said add the

396
00:14:35,440 --> 00:14:38,560
volume and mount it

397
00:14:36,959 --> 00:14:40,880
please and just do the rest and off it

398
00:14:38,560 --> 00:14:43,359
goes and here again

399
00:14:40,880 --> 00:14:44,959
service dot util for service for that

400
00:14:43,360 --> 00:14:46,480
creates a service for the deployment and

401
00:14:44,959 --> 00:14:50,160
that's all i have to say

402
00:14:46,480 --> 00:14:54,079
to make my service so now off we go

403
00:14:50,160 --> 00:14:57,279
tape tanker show will show us

404
00:14:54,079 --> 00:14:58,239
so this is a json representation of the

405
00:14:57,279 --> 00:15:03,199
yaml

406
00:14:58,240 --> 00:15:04,720
but but cubecontrol can use json as well

407
00:15:03,199 --> 00:15:07,760
oh no actually this isn't json this is

408
00:15:04,720 --> 00:15:07,760
yaml sorry

409
00:15:08,560 --> 00:15:13,839
and now we just apply it

410
00:15:16,079 --> 00:15:19,199
so it's shown us a big diff of

411
00:15:18,079 --> 00:15:20,800
everything that it's going to do of

412
00:15:19,199 --> 00:15:22,639
course it doesn't exist yet so it's

413
00:15:20,800 --> 00:15:24,479
going to create everything

414
00:15:22,639 --> 00:15:28,079
and there we go it's created and now

415
00:15:24,480 --> 00:15:28,079
it's off it's going it's creating

416
00:15:28,560 --> 00:15:33,920
okay and at this point i pause and back

417
00:15:31,519 --> 00:15:33,920
to tom

418
00:15:34,959 --> 00:15:43,199
a second okay it's okay again cool

419
00:15:39,680 --> 00:15:44,079
so what we've just seen we've deployed

420
00:15:43,199 --> 00:15:45,519
kefana

421
00:15:44,079 --> 00:15:47,839
we're currently waiting for grafana to

422
00:15:45,519 --> 00:15:50,720
come up which of course has happened in

423
00:15:47,839 --> 00:15:53,920
the past so we can already see it

424
00:15:50,720 --> 00:15:56,000
it's working we have it here that's live

425
00:15:53,920 --> 00:16:00,639
i can prove

426
00:15:56,000 --> 00:16:00,639
it's pretty live i can log in

427
00:16:03,120 --> 00:16:12,000
and or dashboard is there

428
00:16:08,959 --> 00:16:16,239
using 30 lines of jsonnet

429
00:16:12,000 --> 00:16:18,720
instead of a bunch of files of yemo

430
00:16:16,240 --> 00:16:20,399
and the whole thing was done in about

431
00:16:18,720 --> 00:16:25,440
seven minutes

432
00:16:20,399 --> 00:16:25,440
so that strikes me as cool so

433
00:16:26,399 --> 00:16:31,759
to recap what you've just seen and what

434
00:16:29,040 --> 00:16:34,639
was really striking about it

435
00:16:31,759 --> 00:16:35,680
first we have been able to use jsonnet

436
00:16:34,639 --> 00:16:39,279
to reduce this

437
00:16:35,680 --> 00:16:42,239
thing this big big big deployment

438
00:16:39,279 --> 00:16:42,800
to just four lines and if we we could

439
00:16:42,240 --> 00:16:44,480
have even

440
00:16:42,800 --> 00:16:45,599
written that at one line only that

441
00:16:44,480 --> 00:16:47,360
wouldn't have been fit on your

442
00:16:45,600 --> 00:16:51,440
presentation then but

443
00:16:47,360 --> 00:16:54,959
hey so we are back to

444
00:16:51,440 --> 00:16:57,759
the usability of the quran basically

445
00:16:54,959 --> 00:17:00,638
and the other thing is even if the

446
00:16:57,759 --> 00:17:03,920
library authors haven't been able

447
00:17:00,639 --> 00:17:06,640
to include every single eventual thing

448
00:17:03,920 --> 00:17:08,399
you might want to do at some point

449
00:17:06,640 --> 00:17:09,760
you're still covered because you can

450
00:17:08,400 --> 00:17:12,400
just add

451
00:17:09,760 --> 00:17:14,559
some patches on top of it so for example

452
00:17:12,400 --> 00:17:15,839
i don't need to copy my entire yammer

453
00:17:14,559 --> 00:17:18,879
files anymore

454
00:17:15,839 --> 00:17:21,198
only for prod i could format the library

455
00:17:18,880 --> 00:17:23,360
lib grafana or however i want to call it

456
00:17:21,199 --> 00:17:26,480
import it

457
00:17:23,359 --> 00:17:28,079
import it um i

458
00:17:26,480 --> 00:17:29,679
only need to change the ingress in this

459
00:17:28,079 --> 00:17:33,440
example so i

460
00:17:29,679 --> 00:17:34,559
just say it's all fine i just need to

461
00:17:33,440 --> 00:17:37,440
add

462
00:17:34,559 --> 00:17:39,520
my plot hose to the ingress and i'm

463
00:17:37,440 --> 00:17:43,280
covered

464
00:17:39,520 --> 00:17:44,720
so what what's to do next if somebody

465
00:17:43,280 --> 00:17:48,160
thought this is a cool thing and is

466
00:17:44,720 --> 00:17:49,679
interested go to https.dev

467
00:17:48,160 --> 00:17:51,840
follow our tutorial there it really

468
00:17:49,679 --> 00:17:52,880
walks you through and shows how to use

469
00:17:51,840 --> 00:17:54,799
in-depth

470
00:17:52,880 --> 00:17:56,240
and if you think it was nice tweet at

471
00:17:54,799 --> 00:18:00,080
grafana on twitter

472
00:17:56,240 --> 00:18:01,360
and tell us how your experience was one

473
00:18:00,080 --> 00:18:02,960
thing

474
00:18:01,360 --> 00:18:04,799
this is the start history of the project

475
00:18:02,960 --> 00:18:07,600
when we announced it to hackernews

476
00:18:04,799 --> 00:18:08,480
it really blow up but in the end now you

477
00:18:07,600 --> 00:18:12,000
can see it's

478
00:18:08,480 --> 00:18:13,520
kinda it's getting back to horizontal

479
00:18:12,000 --> 00:18:16,000
if possible we would like to change that

480
00:18:13,520 --> 00:18:28,320
again if you liked it

481
00:18:16,000 --> 00:18:32,480
maybe give us a start github thank you

482
00:18:28,320 --> 00:18:32,480
so we do have some time for questions

483
00:18:37,520 --> 00:18:42,400
hi um first of all congratulations so

484
00:18:40,480 --> 00:18:43,440
let's assume i use helm currently and i

485
00:18:42,400 --> 00:18:45,679
saw this

486
00:18:43,440 --> 00:18:47,600
and i fell in love how can you tanker

487
00:18:45,679 --> 00:18:51,039
with helm

488
00:18:47,600 --> 00:18:53,039
so at the moment there is no native helm

489
00:18:51,039 --> 00:18:56,160
integration in tonka

490
00:18:53,039 --> 00:18:58,000
but you could do basically two things if

491
00:18:56,160 --> 00:19:00,080
you just wanted to get started

492
00:18:58,000 --> 00:19:02,880
you could use the helm template command

493
00:19:00,080 --> 00:19:06,879
to render yaml out of your helm

494
00:19:02,880 --> 00:19:08,720
and rewrite that gradually to jsonnet

495
00:19:06,880 --> 00:19:10,240
or you could contribute to the community

496
00:19:08,720 --> 00:19:12,720
take your help chart

497
00:19:10,240 --> 00:19:14,240
understand how it works and write a json

498
00:19:12,720 --> 00:19:17,120
library for it publish on github and

499
00:19:14,240 --> 00:19:17,120
make other people happy

500
00:19:18,720 --> 00:19:26,880
any more questions hey

501
00:19:24,480 --> 00:19:27,840
hey um does it do any validation or dry

502
00:19:26,880 --> 00:19:30,559
runs

503
00:19:27,840 --> 00:19:31,280
stuff like that i sorry but i can't hear

504
00:19:30,559 --> 00:19:34,320
you currently

505
00:19:31,280 --> 00:19:39,440
does it do dry runs or validation

506
00:19:34,320 --> 00:19:42,879
oh uh driver of validation

507
00:19:39,440 --> 00:19:46,000
what was the question okay yeah so

508
00:19:42,880 --> 00:19:48,720
there are is the tk diff command

509
00:19:46,000 --> 00:19:50,640
which basically works like git div it

510
00:19:48,720 --> 00:19:52,320
takes the yaml and shows exactly the

511
00:19:50,640 --> 00:19:54,720
differences to the cluster

512
00:19:52,320 --> 00:19:56,159
and it shows you exactly in beforehand

513
00:19:54,720 --> 00:19:58,240
what will be done

514
00:19:56,160 --> 00:19:59,840
so you can really you change something

515
00:19:58,240 --> 00:20:02,640
and you can make sure that it actually

516
00:19:59,840 --> 00:20:02,639
does what you want to

517
00:20:04,720 --> 00:20:10,799
any more questions

518
00:20:07,760 --> 00:20:10,799
any more yeah we have one

519
00:20:11,280 --> 00:20:20,320
where's that hand there

520
00:20:14,640 --> 00:20:23,360
and tom

521
00:20:20,320 --> 00:20:26,720
um didn't the case on a team uh

522
00:20:23,360 --> 00:20:29,760
abandon the project yes

523
00:20:26,720 --> 00:20:33,520
tonka is basically the spiritual

524
00:20:29,760 --> 00:20:36,000
question again

525
00:20:33,520 --> 00:20:37,600
so uh didn't the k summit team abandoned

526
00:20:36,000 --> 00:20:40,480
the project was the question

527
00:20:37,600 --> 00:20:41,439
yes so yes the case sonar project is

528
00:20:40,480 --> 00:20:43,120
abandoned

529
00:20:41,440 --> 00:20:45,520
tanker can be thought of as the

530
00:20:43,120 --> 00:20:47,600
spiritual successor to case on it

531
00:20:45,520 --> 00:20:48,799
and we are in the process of starting to

532
00:20:47,600 --> 00:20:50,320
maintain

533
00:20:48,799 --> 00:20:52,080
everything that's still required for our

534
00:20:50,320 --> 00:20:55,439
ecosystem including

535
00:20:52,080 --> 00:20:57,600
the case on it library which will

536
00:20:55,440 --> 00:21:03,840
be maintained as part of tanker in the

537
00:20:57,600 --> 00:21:03,840
near future

538
00:21:05,600 --> 00:21:14,000
why why did you call it tanker um

539
00:21:09,760 --> 00:21:16,640
this the language is called jsonnet and

540
00:21:14,000 --> 00:21:18,799
sonnet is the form of ancient poetry

541
00:21:16,640 --> 00:21:20,240
and tonka is as well or maybe it's even

542
00:21:18,799 --> 00:21:23,360
cooler i'm not sure

543
00:21:20,240 --> 00:21:24,799
but we thought that tk was a nice

544
00:21:23,360 --> 00:21:25,840
command to type at the command line

545
00:21:24,799 --> 00:21:28,240
because it's short

546
00:21:25,840 --> 00:21:29,439
it can be typed with two hands so it

547
00:21:28,240 --> 00:21:32,640
shouldn't take

548
00:21:29,440 --> 00:21:32,640
a long time to do it

549
00:21:34,480 --> 00:21:37,760
does tanka maintain local state on

550
00:21:36,960 --> 00:21:41,520
developers

551
00:21:37,760 --> 00:21:44,879
laptop like in terraform

552
00:21:41,520 --> 00:21:46,320
case for example so does tanko maintain

553
00:21:44,880 --> 00:21:49,280
a local state

554
00:21:46,320 --> 00:21:49,280
uh no

555
00:21:49,760 --> 00:21:55,280
so uh it generates uh yaml

556
00:21:53,280 --> 00:21:57,280
but it hands directly to cube control

557
00:21:55,280 --> 00:21:59,440
which then talks to kubernetes

558
00:21:57,280 --> 00:22:00,559
this is probably interesting as well

559
00:21:59,440 --> 00:22:03,200
tanker

560
00:22:00,559 --> 00:22:04,000
directly shouts out to cube cuddle so

561
00:22:03,200 --> 00:22:06,320
there's no

562
00:22:04,000 --> 00:22:07,360
it's not behaving any differently it's

563
00:22:06,320 --> 00:22:10,399
just a stage

564
00:22:07,360 --> 00:22:11,439
before cube control or cuddle or you're

565
00:22:10,400 --> 00:22:14,480
going to call it

566
00:22:11,440 --> 00:22:18,080
and it just uses it so it's exactly

567
00:22:14,480 --> 00:22:18,080
the same to your kubernetes cluster

568
00:22:23,120 --> 00:22:26,719
so the question is is there any uh

569
00:22:25,200 --> 00:22:29,120
configuration controlled

570
00:22:26,720 --> 00:22:30,000
stored other than that is in kubernetes

571
00:22:29,120 --> 00:22:31,760
uh

572
00:22:30,000 --> 00:22:33,039
all that tank does is generates

573
00:22:31,760 --> 00:22:35,280
kubernetes resources

574
00:22:33,039 --> 00:22:36,320
in yaml which then gets shipped to

575
00:22:35,280 --> 00:22:38,158
kubernetes

576
00:22:36,320 --> 00:22:40,240
as any other resources get shipped to

577
00:22:38,159 --> 00:22:43,120
kubernetes so it's all before

578
00:22:40,240 --> 00:22:46,080
the kubernetes cube control command it's

579
00:22:43,120 --> 00:22:50,000
basically a very fancy way to get yaml

580
00:22:46,080 --> 00:22:50,000
instead of having to write it by hand

581
00:22:50,720 --> 00:22:54,480
a cube cutter includes a diff command

582
00:22:53,360 --> 00:22:57,840
which is used by us

583
00:22:54,480 --> 00:22:59,919
so we generate our yaml and pipe into

584
00:22:57,840 --> 00:23:02,879
cube cartel diff and cube cattle

585
00:22:59,919 --> 00:23:04,240
then shows the differences so last thing

586
00:23:02,880 --> 00:23:06,240
if anyone is interested to

587
00:23:04,240 --> 00:23:08,799
talk talk more about tanker please come

588
00:23:06,240 --> 00:23:10,270
and find us at the grafana stand

589
00:23:08,799 --> 00:23:17,849
thank you

590
00:23:10,270 --> 00:23:17,849
[Applause]

591
00:23:20,840 --> 00:23:24,240
thanks

592
00:23:22,159 --> 00:23:24,240
you

