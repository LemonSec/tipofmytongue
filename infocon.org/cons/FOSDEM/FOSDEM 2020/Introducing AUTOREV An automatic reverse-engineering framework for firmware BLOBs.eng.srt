1
00:00:13,519 --> 00:00:19,279
hello everybody

2
00:00:16,079 --> 00:00:22,080
thanks for joining um

3
00:00:19,279 --> 00:00:25,840
my talk is autoref a framework for

4
00:00:22,080 --> 00:00:25,839
automatic firmware reverse engineering

5
00:00:27,599 --> 00:00:30,880
so i'm working as open source film

6
00:00:30,000 --> 00:00:34,719
developer

7
00:00:30,880 --> 00:00:37,360
at nine elements and we

8
00:00:34,719 --> 00:00:39,760
wrote this framework just for fun and

9
00:00:37,360 --> 00:00:43,200
not for profit

10
00:00:39,760 --> 00:00:45,360
it's open source available on github

11
00:00:43,200 --> 00:00:48,640
since yesterday

12
00:00:45,360 --> 00:00:48,960
it's written in golang and it allows to

13
00:00:48,640 --> 00:00:52,719
do

14
00:00:48,960 --> 00:00:55,360
black box testing of firmware

15
00:00:52,719 --> 00:00:56,079
it does abstract zoomtext free

16
00:00:55,360 --> 00:00:59,760
generation

17
00:00:56,079 --> 00:01:01,280
and is then able to generate c code out

18
00:00:59,760 --> 00:01:03,358
of that

19
00:01:01,280 --> 00:01:05,280
the whole thing is backed by mysql

20
00:01:03,359 --> 00:01:08,880
database

21
00:01:05,280 --> 00:01:12,159
and i'm going to explain all the details

22
00:01:08,880 --> 00:01:15,280
in the next few slides so

23
00:01:12,159 --> 00:01:18,159
um what's boot firmware uh you all might

24
00:01:15,280 --> 00:01:19,680
uh know that's the most privileged code

25
00:01:18,159 --> 00:01:23,200
running on your machine

26
00:01:19,680 --> 00:01:27,040
when you press the power button um it

27
00:01:23,200 --> 00:01:30,960
does all the the hardware initialization

28
00:01:27,040 --> 00:01:33,759
and for example that's core boot or ufi

29
00:01:30,960 --> 00:01:34,399
and it usually loads the bootloader from

30
00:01:33,759 --> 00:01:37,759
disk

31
00:01:34,400 --> 00:01:39,200
like grab and then

32
00:01:37,759 --> 00:01:42,560
the bootloader loads the operating

33
00:01:39,200 --> 00:01:45,280
system and in this talk i'm going to

34
00:01:42,560 --> 00:01:48,799
focus on the firmware part only

35
00:01:45,280 --> 00:01:51,600
ignoring any later stages

36
00:01:48,799 --> 00:01:52,479
if we look at core boot it's written in

37
00:01:51,600 --> 00:01:56,559
assembly and c

38
00:01:52,479 --> 00:01:59,759
code and divide it into multiple stages

39
00:01:56,560 --> 00:02:03,119
and each stage loads the next stage

40
00:01:59,759 --> 00:02:05,840
and every stage has a specific hardware

41
00:02:03,119 --> 00:02:05,840
initialization

42
00:02:06,719 --> 00:02:10,720
let me let me show you um if you press

43
00:02:09,038 --> 00:02:11,920
the power button and you see here over

44
00:02:10,720 --> 00:02:13,840
time

45
00:02:11,920 --> 00:02:15,839
um first of all is the boot block

46
00:02:13,840 --> 00:02:18,800
written in assembly

47
00:02:15,840 --> 00:02:20,720
um which loads the rom stage that does

48
00:02:18,800 --> 00:02:23,360
the drum in it

49
00:02:20,720 --> 00:02:24,480
and once the dram is available we can

50
00:02:23,360 --> 00:02:28,239
initialize

51
00:02:24,480 --> 00:02:29,519
um other devices like pci pc express and

52
00:02:28,239 --> 00:02:32,879
so on

53
00:02:29,520 --> 00:02:36,160
and after that um the the bootloader or

54
00:02:32,879 --> 00:02:38,480
in case of core boot it's called payload

55
00:02:36,160 --> 00:02:40,799
it's loaded into memory and that loads

56
00:02:38,480 --> 00:02:44,399
operating system

57
00:02:40,800 --> 00:02:46,800
and i only care for the first stages as

58
00:02:44,400 --> 00:02:50,319
shown here

59
00:02:46,800 --> 00:02:52,400
so in a perfect world

60
00:02:50,319 --> 00:02:55,760
for example the car boot running on the

61
00:02:52,400 --> 00:02:58,800
thinkpad x230

62
00:02:55,760 --> 00:03:00,480
there are no no blobs everything is open

63
00:02:58,800 --> 00:03:03,360
source

64
00:03:00,480 --> 00:03:06,000
it has basically been reverse engineered

65
00:03:03,360 --> 00:03:07,920
so some parts of it

66
00:03:06,000 --> 00:03:10,959
but that also means there's no

67
00:03:07,920 --> 00:03:13,518
registered documentation on some parts

68
00:03:10,959 --> 00:03:16,239
that means you write magic numbers

69
00:03:13,519 --> 00:03:19,519
somewhere into the pci space and then

70
00:03:16,239 --> 00:03:20,560
everything works um which isn't that

71
00:03:19,519 --> 00:03:22,239
nice but at least

72
00:03:20,560 --> 00:03:24,879
it's open source and you can see what

73
00:03:22,239 --> 00:03:30,560
it's actually doing

74
00:03:24,879 --> 00:03:33,599
um there's a microcode which is loaded

75
00:03:30,560 --> 00:03:36,080
as shown here um the yellow bar

76
00:03:33,599 --> 00:03:38,720
it's loaded in early boot block um it's

77
00:03:36,080 --> 00:03:41,920
not directly code

78
00:03:38,720 --> 00:03:44,840
so i'm going to ignore it and claim it's

79
00:03:41,920 --> 00:03:46,720
100 open source even though it loads

80
00:03:44,840 --> 00:03:48,799
microcodes and we have

81
00:03:46,720 --> 00:03:50,239
got another example here um cardboard on

82
00:03:48,799 --> 00:03:54,879
the super microserver

83
00:03:50,239 --> 00:03:56,879
x11 ssh and it uses multiple blobs

84
00:03:54,879 --> 00:03:58,879
in this case it's the firmware support

85
00:03:56,879 --> 00:04:02,720
package fsp

86
00:03:58,879 --> 00:04:05,920
and it occupies about 500 kilobytes

87
00:04:02,720 --> 00:04:08,319
of space in the spy flash

88
00:04:05,920 --> 00:04:10,079
and car boot itself so the open source

89
00:04:08,319 --> 00:04:13,280
part of the firmware

90
00:04:10,080 --> 00:04:16,079
only occupies 200 kilobytes and

91
00:04:13,280 --> 00:04:17,600
car boot jumps into the fsp and let the

92
00:04:16,079 --> 00:04:20,478
fsp

93
00:04:17,600 --> 00:04:21,600
do all the hardware initialization um as

94
00:04:20,478 --> 00:04:24,800
you can see here

95
00:04:21,600 --> 00:04:27,360
so um one big part is the norm stage is

96
00:04:24,800 --> 00:04:28,880
bringing up the dram and then in the rum

97
00:04:27,360 --> 00:04:31,600
stage it does all the device

98
00:04:28,880 --> 00:04:34,960
initialization

99
00:04:31,600 --> 00:04:38,639
and um sometimes cobots need to

100
00:04:34,960 --> 00:04:43,280
undo what fsp does because some features

101
00:04:38,639 --> 00:04:43,280
cannot be disabled and then if f2

102
00:04:43,600 --> 00:04:52,320
yeah and there's also microcode updates

103
00:04:47,520 --> 00:04:56,320
again uh it's loaded in only boot block

104
00:04:52,320 --> 00:04:58,880
so but i'm only concentrate again on the

105
00:04:56,320 --> 00:04:59,919
on the blobs so what are blobs binary

106
00:04:58,880 --> 00:05:01,680
large object

107
00:04:59,919 --> 00:05:03,039
um there's no source code available for

108
00:05:01,680 --> 00:05:06,080
the blobs

109
00:05:03,039 --> 00:05:10,400
um usually there's no documentation

110
00:05:06,080 --> 00:05:12,000
what it does and that's

111
00:05:10,400 --> 00:05:14,638
um because of that it's difficult to

112
00:05:12,000 --> 00:05:16,800
integrate into open source firmware

113
00:05:14,639 --> 00:05:18,080
there might be security issues because

114
00:05:16,800 --> 00:05:20,160
you don't know

115
00:05:18,080 --> 00:05:21,359
which register is already locked or

116
00:05:20,160 --> 00:05:23,199
isn't locked and

117
00:05:21,360 --> 00:05:24,720
you should lock it in an open source

118
00:05:23,199 --> 00:05:28,320
firmware

119
00:05:24,720 --> 00:05:31,919
there's no linker symbols that means you

120
00:05:28,320 --> 00:05:33,199
always have to use the whole blob

121
00:05:31,919 --> 00:05:35,919
even though you only need a single

122
00:05:33,199 --> 00:05:37,840
feature out of it and there's no

123
00:05:35,919 --> 00:05:39,758
garbage collection and yeah the size

124
00:05:37,840 --> 00:05:42,960
cannot be reduced

125
00:05:39,759 --> 00:05:46,400
also debugging is quite difficult

126
00:05:42,960 --> 00:05:49,758
usually there's no debug output because

127
00:05:46,400 --> 00:05:52,560
that would make the increase the size

128
00:05:49,759 --> 00:05:53,600
and i guess it would allow or give

129
00:05:52,560 --> 00:05:56,880
insights

130
00:05:53,600 --> 00:06:00,240
what the the blob actually does

131
00:05:56,880 --> 00:06:01,680
okay so what are we allowed to do um i'm

132
00:06:00,240 --> 00:06:04,840
from germany

133
00:06:01,680 --> 00:06:06,080
um this is from laura translated into

134
00:06:04,840 --> 00:06:10,000
english

135
00:06:06,080 --> 00:06:11,919
so i'm allowed to gain basic knowledge

136
00:06:10,000 --> 00:06:13,680
of the ideas and concepts by just

137
00:06:11,919 --> 00:06:14,880
loading displaying running transmitting

138
00:06:13,680 --> 00:06:16,319
saving the program

139
00:06:14,880 --> 00:06:18,479
and i don't need permission from the

140
00:06:16,319 --> 00:06:22,080
copyright owner

141
00:06:18,479 --> 00:06:25,280
that basically means um i can do

142
00:06:22,080 --> 00:06:28,960
um reverse engineering and

143
00:06:25,280 --> 00:06:31,440
yeah um even though then there's uh

144
00:06:28,960 --> 00:06:32,840
um some sent into the license that

145
00:06:31,440 --> 00:06:34,479
doesn't allow it

146
00:06:32,840 --> 00:06:35,919
yeah question is what is the implication

147
00:06:34,479 --> 00:06:38,639
of basic

148
00:06:35,919 --> 00:06:40,080
in the german law okay yeah so so the

149
00:06:38,639 --> 00:06:43,199
law isn't very precise

150
00:06:40,080 --> 00:06:44,000
okay yeah so there's uh another um

151
00:06:43,199 --> 00:06:46,720
passage

152
00:06:44,000 --> 00:06:48,800
it talks about decompilation and it says

153
00:06:46,720 --> 00:06:51,680
it's only allowed for interoperability

154
00:06:48,800 --> 00:06:52,160
but it doesn't say what the compilation

155
00:06:51,680 --> 00:06:55,599
at all

156
00:06:52,160 --> 00:06:58,319
so it's just mentioned this term and

157
00:06:55,599 --> 00:07:00,319
it also says if you decompile it you're

158
00:06:58,319 --> 00:07:02,479
not allowed to create

159
00:07:00,319 --> 00:07:04,000
a program that does basically the same

160
00:07:02,479 --> 00:07:07,758
so we cannot create an

161
00:07:04,000 --> 00:07:10,160
free and open source software out of it

162
00:07:07,759 --> 00:07:11,919
yeah so the only thing we can legally do

163
00:07:10,160 --> 00:07:14,960
is black box testing

164
00:07:11,919 --> 00:07:17,599
we observe that's

165
00:07:14,960 --> 00:07:19,599
shown here so black box testing we have

166
00:07:17,599 --> 00:07:24,479
the firmware that talks to the hardware

167
00:07:19,599 --> 00:07:24,479
and we can observe the io

168
00:07:25,520 --> 00:07:31,440
and we can observe bios options

169
00:07:28,720 --> 00:07:32,880
like settings you usually do in the bios

170
00:07:31,440 --> 00:07:36,000
menu

171
00:07:32,880 --> 00:07:39,840
and if we observe both we can generate

172
00:07:36,000 --> 00:07:42,840
a model out of it and that model can be

173
00:07:39,840 --> 00:07:44,638
free and open source but there's some

174
00:07:42,840 --> 00:07:49,119
issues

175
00:07:44,639 --> 00:07:49,120
it only works on a single hardware

176
00:07:49,199 --> 00:07:53,360
it's very difficult to see branches

177
00:07:51,280 --> 00:07:54,400
inside the firmware and to catch corner

178
00:07:53,360 --> 00:07:56,800
cases

179
00:07:54,400 --> 00:07:57,520
there might be some fix up for specific

180
00:07:56,800 --> 00:07:59,680
devices

181
00:07:57,520 --> 00:08:01,599
and if we don't have that device we

182
00:07:59,680 --> 00:08:05,199
simply won't see that fix up

183
00:08:01,599 --> 00:08:05,199
when we observe the the i o

184
00:08:05,360 --> 00:08:12,080
yes our model is likely incomplete and

185
00:08:08,720 --> 00:08:14,560
there's lots of data we need to analyze

186
00:08:12,080 --> 00:08:16,000
and we cannot put the firmware in and

187
00:08:14,560 --> 00:08:19,199
like emulator like

188
00:08:16,000 --> 00:08:23,039
qmo because it doesn't emulate

189
00:08:19,199 --> 00:08:24,960
the hardware okay so what

190
00:08:23,039 --> 00:08:26,560
do we need to do we run it on real

191
00:08:24,960 --> 00:08:28,799
hardware

192
00:08:26,560 --> 00:08:31,680
and there are similar projects like

193
00:08:28,800 --> 00:08:33,680
serial ice and avatar too

194
00:08:31,680 --> 00:08:35,279
that put the firmware inside the patch

195
00:08:33,679 --> 00:08:38,559
qml but

196
00:08:35,279 --> 00:08:41,679
that's something we haven't done

197
00:08:38,559 --> 00:08:43,518
so we put the emulation inside the

198
00:08:41,679 --> 00:08:46,560
firmware

199
00:08:43,519 --> 00:08:50,800
and this case it's a library called lib

200
00:08:46,560 --> 00:08:54,079
x86 mu and

201
00:08:50,800 --> 00:08:54,479
it allows to trace io and send it over

202
00:08:54,080 --> 00:08:58,720
the

203
00:08:54,480 --> 00:09:01,920
serial port and it also allows to

204
00:08:58,720 --> 00:09:06,320
upload bios option like change it

205
00:09:01,920 --> 00:09:06,319
to fake io or skip io

206
00:09:06,880 --> 00:09:10,640
yeah the whole thing is um done in a

207
00:09:08,880 --> 00:09:13,839
client server model

208
00:09:10,640 --> 00:09:15,279
let me explain so this um this is an

209
00:09:13,839 --> 00:09:19,120
open source library

210
00:09:15,279 --> 00:09:22,320
uh you can find it on github it emulates

211
00:09:19,120 --> 00:09:25,440
um x86 cpus so

212
00:09:22,320 --> 00:09:27,920
auto ref currently only works on x86

213
00:09:25,440 --> 00:09:30,560
but in theory it runs on any

214
00:09:27,920 --> 00:09:30,560
architecture

215
00:09:31,440 --> 00:09:37,360
yeah so the library allows to hook into

216
00:09:34,720 --> 00:09:37,920
specific instructions and in our case we

217
00:09:37,360 --> 00:09:42,080
only

218
00:09:37,920 --> 00:09:42,079
care for io instructions

219
00:09:44,560 --> 00:09:52,640
it only does 32-bit yes that's right

220
00:09:48,839 --> 00:09:55,680
and what we do we never um

221
00:09:52,640 --> 00:09:58,800
so we we don't jump to rum stage we

222
00:09:55,680 --> 00:09:59,359
continue running in one stage um and

223
00:09:58,800 --> 00:10:02,479
instead

224
00:09:59,360 --> 00:10:05,839
load the library and the library um

225
00:10:02,480 --> 00:10:09,120
emulates everything and

226
00:10:05,839 --> 00:10:12,240
so the the ram stage and the payload run

227
00:10:09,120 --> 00:10:15,360
in this emulated environment

228
00:10:12,240 --> 00:10:19,760
um the stages doesn't even know

229
00:10:15,360 --> 00:10:23,360
that they're being emulated

230
00:10:19,760 --> 00:10:25,279
again here you can see the blobs and

231
00:10:23,360 --> 00:10:29,200
what we are doing is we are tracing all

232
00:10:25,279 --> 00:10:29,200
the i o of the blobs in the ram stage

233
00:10:31,279 --> 00:10:35,200
so this method works on any hardware as

234
00:10:33,600 --> 00:10:37,760
long as there's a serial port

235
00:10:35,200 --> 00:10:38,320
and with that we can observe memory

236
00:10:37,760 --> 00:10:41,680
access

237
00:10:38,320 --> 00:10:43,120
like read and write access to the pci

238
00:10:41,680 --> 00:10:46,560
config space

239
00:10:43,120 --> 00:10:49,440
access to ao ports and machine

240
00:10:46,560 --> 00:10:50,800
specific registers and the cpu id

241
00:10:49,440 --> 00:10:53,680
instruction

242
00:10:50,800 --> 00:10:54,240
and so that's that's the complete set of

243
00:10:53,680 --> 00:10:57,199
io

244
00:10:54,240 --> 00:10:57,680
firmware talks to hardware and we can

245
00:10:57,200 --> 00:11:01,360
just

246
00:10:57,680 --> 00:11:03,839
observe it with this library

247
00:11:01,360 --> 00:11:06,240
you can see here it's not that readable

248
00:11:03,839 --> 00:11:08,320
but you get an impression

249
00:11:06,240 --> 00:11:09,519
on what it does so in this case it's

250
00:11:08,320 --> 00:11:12,839
mostly pci

251
00:11:09,519 --> 00:11:14,399
reads and the last two are memory

252
00:11:12,839 --> 00:11:17,120
accesses

253
00:11:14,399 --> 00:11:18,240
what we actually can do is convert it to

254
00:11:17,120 --> 00:11:22,240
something more readable

255
00:11:18,240 --> 00:11:25,760
like c code and

256
00:11:22,240 --> 00:11:28,079
you can compile it and run it on or

257
00:11:25,760 --> 00:11:29,120
replace the blob and put it into your

258
00:11:28,079 --> 00:11:32,160
firmware

259
00:11:29,120 --> 00:11:34,079
but it likely won't work and

260
00:11:32,160 --> 00:11:36,000
it only works on the single machine for

261
00:11:34,079 --> 00:11:38,079
the single configuration which is not

262
00:11:36,000 --> 00:11:40,240
what you likely want

263
00:11:38,079 --> 00:11:40,239
so

264
00:11:41,120 --> 00:11:44,640
what we can do is generate in syntax

265
00:11:43,360 --> 00:11:46,399
tree

266
00:11:44,640 --> 00:11:48,480
and that's the main feature of the

267
00:11:46,399 --> 00:11:52,079
framework

268
00:11:48,480 --> 00:11:54,320
it collects traces and

269
00:11:52,079 --> 00:11:55,599
put them into the database and then

270
00:11:54,320 --> 00:11:59,200
merges all the traces

271
00:11:55,600 --> 00:12:00,320
into a syntax street as you can see it's

272
00:11:59,200 --> 00:12:03,360
a directed graph

273
00:12:00,320 --> 00:12:05,120
and if you have two runs

274
00:12:03,360 --> 00:12:07,279
on the first run the bias option one is

275
00:12:05,120 --> 00:12:08,079
set to true on the second is set to

276
00:12:07,279 --> 00:12:09,839
false

277
00:12:08,079 --> 00:12:11,839
and you can see there's a slightly

278
00:12:09,839 --> 00:12:15,120
difference in the io

279
00:12:11,839 --> 00:12:19,920
operations and we can then

280
00:12:15,120 --> 00:12:19,920
merge it into a graph and

281
00:12:20,000 --> 00:12:28,160
actually see which bias option

282
00:12:23,040 --> 00:12:28,160
triggers which pass in the tree

283
00:12:29,519 --> 00:12:34,720
the merging is done with the lcs

284
00:12:31,040 --> 00:12:38,160
algorithm and it tries to generate a

285
00:12:34,720 --> 00:12:41,440
minimal graph um that has

286
00:12:38,160 --> 00:12:43,279
some issues as it turned out

287
00:12:41,440 --> 00:12:44,480
and we then can convert the abstract

288
00:12:43,279 --> 00:12:46,639
syntax 3 to

289
00:12:44,480 --> 00:12:48,399
high level language again we only

290
00:12:46,639 --> 00:12:51,440
implemented this for c

291
00:12:48,399 --> 00:12:56,240
but in siri we could just generate

292
00:12:51,440 --> 00:12:56,240
anything like go or ada or whatever

293
00:12:57,279 --> 00:13:02,560
analyzing the mesh is quite time

294
00:13:00,000 --> 00:13:05,360
consuming

295
00:13:02,560 --> 00:13:06,000
right now we only tested this with a qmo

296
00:13:05,360 --> 00:13:10,560
and a small

297
00:13:06,000 --> 00:13:13,920
example and it's in this case it's okay

298
00:13:10,560 --> 00:13:17,279
but on real hardware it's pretty slow uh

299
00:13:13,920 --> 00:13:17,279
you can see here that's the

300
00:13:18,000 --> 00:13:22,800
abstract syntax tree converted to c code

301
00:13:22,959 --> 00:13:27,359
and this is another example so the

302
00:13:25,600 --> 00:13:31,200
framework ships with a

303
00:13:27,360 --> 00:13:35,200
simple qmo codeboot image that runs in

304
00:13:31,200 --> 00:13:38,399
qml and as you can see that's the graph

305
00:13:35,200 --> 00:13:42,160
generated uh every node is a single io

306
00:13:38,399 --> 00:13:45,360
instruction and

307
00:13:42,160 --> 00:13:49,120
if you generate c code out of it

308
00:13:45,360 --> 00:13:52,560
it doesn't look that pretty it's

309
00:13:49,120 --> 00:13:54,560
it's not even complete it just continues

310
00:13:52,560 --> 00:13:56,638
below the slide so that's only half of

311
00:13:54,560 --> 00:14:03,119
it and that's something we need

312
00:13:56,639 --> 00:14:06,639
to to work on and make pretty c code

313
00:14:03,120 --> 00:14:10,399
um there are quite a few to do's um

314
00:14:06,639 --> 00:14:12,959
we would like to add plug-in support

315
00:14:10,399 --> 00:14:14,720
detect loops inside the firmware because

316
00:14:12,959 --> 00:14:17,839
right now we can't

317
00:14:14,720 --> 00:14:19,920
detect read modify write operations

318
00:14:17,839 --> 00:14:21,519
uh usually only one bit is set or

319
00:14:19,920 --> 00:14:24,719
cleared

320
00:14:21,519 --> 00:14:27,360
we can't detect that right now um

321
00:14:24,720 --> 00:14:29,199
there's no debt code detection so if we

322
00:14:27,360 --> 00:14:31,279
run into code pass

323
00:14:29,199 --> 00:14:33,199
we shouldn't and it just crashes we

324
00:14:31,279 --> 00:14:35,439
won't see that

325
00:14:33,199 --> 00:14:38,079
um yeah we have no no sec for the reboot

326
00:14:35,440 --> 00:14:41,680
detection

327
00:14:38,079 --> 00:14:44,959
we need to work on making pretty

328
00:14:41,680 --> 00:14:49,040
code yeah and optimize

329
00:14:44,959 --> 00:14:49,040
the abstract syntax tree even more

330
00:14:49,360 --> 00:14:53,600
um then there's usually the question can

331
00:14:52,480 --> 00:14:57,199
we reverse engineer

332
00:14:53,600 --> 00:15:00,240
like the complete fsp and have some

333
00:14:57,199 --> 00:15:01,120
stats so i assume you have four cpu

334
00:15:00,240 --> 00:15:04,160
sockets

335
00:15:01,120 --> 00:15:06,560
with four cpu each and four

336
00:15:04,160 --> 00:15:08,079
dimms for memory and you test four

337
00:15:06,560 --> 00:15:12,319
different dimms

338
00:15:08,079 --> 00:15:14,399
two piece sales bridges 16 usb ports

339
00:15:12,320 --> 00:15:15,680
uh quite a few piece express lanes which

340
00:15:14,399 --> 00:15:19,120
can be again

341
00:15:15,680 --> 00:15:23,199
equipped with different devices

342
00:15:19,120 --> 00:15:25,519
uh up to eight serial later boards and

343
00:15:23,199 --> 00:15:26,719
fsp has quite a lot of options that can

344
00:15:25,519 --> 00:15:29,360
be configured

345
00:15:26,720 --> 00:15:30,320
and i only assume they can be true or

346
00:15:29,360 --> 00:15:33,839
false

347
00:15:30,320 --> 00:15:36,959
then we have 2 to the power of 588

348
00:15:33,839 --> 00:15:41,040
times 15 minutes to

349
00:15:36,959 --> 00:15:44,079
collect a single trace

350
00:15:41,040 --> 00:15:47,279
and yeah that's going to take

351
00:15:44,079 --> 00:15:49,279
quite a while and then

352
00:15:47,279 --> 00:15:50,800
after you collect all the traces you

353
00:15:49,279 --> 00:15:51,680
still have to analyze the upside stream

354
00:15:50,800 --> 00:15:54,639
touch three and

355
00:15:51,680 --> 00:15:56,399
generate c code after so it's so black

356
00:15:54,639 --> 00:15:59,120
box testing

357
00:15:56,399 --> 00:16:00,079
might give insights into the firmware

358
00:15:59,120 --> 00:16:03,040
into

359
00:16:00,079 --> 00:16:05,040
small parts of the firmware but um it's

360
00:16:03,040 --> 00:16:09,839
likely not the correct approach to

361
00:16:05,040 --> 00:16:09,839
reverse engineer a complete

362
00:16:10,000 --> 00:16:13,920
hardware installation like the fsp

363
00:16:14,079 --> 00:16:18,719
and that's it already i think it was

364
00:16:17,120 --> 00:16:23,440
quite fast

365
00:16:18,720 --> 00:16:25,839
do you have any any questions so far

366
00:16:23,440 --> 00:16:28,880
yes taking timing into account as well

367
00:16:25,839 --> 00:16:32,480
as things like dram setup especially

368
00:16:28,880 --> 00:16:34,240
uh story time setup uh it's very time

369
00:16:32,480 --> 00:16:36,720
and critical where you actually have to

370
00:16:34,240 --> 00:16:38,240
like token myo and then wait for

371
00:16:36,720 --> 00:16:39,279
something nanoseconds but usually in

372
00:16:38,240 --> 00:16:41,600
code as you recognize

373
00:16:39,279 --> 00:16:43,920
like random operators and then you just

374
00:16:41,600 --> 00:16:46,480
close things again so do you

375
00:16:43,920 --> 00:16:48,079
have do you also record timings uh so

376
00:16:46,480 --> 00:16:51,600
the question was if i

377
00:16:48,079 --> 00:16:54,719
re record timings

378
00:16:51,600 --> 00:16:58,000
right now it doesn't record

379
00:16:54,720 --> 00:17:02,130
timings and as you have seen

380
00:16:58,000 --> 00:17:03,440
we only trace io in the ram stage

381
00:17:02,130 --> 00:17:06,799
[Music]

382
00:17:03,440 --> 00:17:09,600
so dram training isn't

383
00:17:06,799 --> 00:17:11,199
um or it isn't possible yet to capture

384
00:17:09,599 --> 00:17:13,918
drum training

385
00:17:11,199 --> 00:17:15,199
only everything that lives in the room

386
00:17:13,919 --> 00:17:18,959
stage

387
00:17:15,199 --> 00:17:19,919
yeah um yeah as we send everything over

388
00:17:18,959 --> 00:17:23,679
the

389
00:17:19,919 --> 00:17:27,199
the serial the the com port it

390
00:17:23,679 --> 00:17:29,280
takes a while and we um

391
00:17:27,199 --> 00:17:30,799
might run into some some timing issues

392
00:17:29,280 --> 00:17:33,760
that bits are

393
00:17:30,799 --> 00:17:35,360
already set because we wrote out a

394
00:17:33,760 --> 00:17:38,879
single line over the studio

395
00:17:35,360 --> 00:17:43,360
and so yeah we could work on that maybe

396
00:17:38,880 --> 00:17:43,360
use a different approach of sending the

397
00:17:44,840 --> 00:17:49,039
traces

398
00:17:46,799 --> 00:17:49,918
yeah did you observe any behaviors that

399
00:17:49,039 --> 00:17:52,960
were obviously

400
00:17:49,919 --> 00:17:56,080
bugs um

401
00:17:52,960 --> 00:17:59,200
so i only recorded one trace

402
00:17:56,080 --> 00:18:02,559
oh sorry yeah so the question was

403
00:17:59,200 --> 00:18:05,840
if i observed any bugs in

404
00:18:02,559 --> 00:18:08,960
blobs yes yeah so

405
00:18:05,840 --> 00:18:12,639
i only run a single

406
00:18:08,960 --> 00:18:12,640
trace on fsp

407
00:18:13,039 --> 00:18:16,240
yeah that's why i said it takes 50

408
00:18:15,200 --> 00:18:18,880
minutes

409
00:18:16,240 --> 00:18:19,440
and i didn't have that much time to

410
00:18:18,880 --> 00:18:22,720
collect

411
00:18:19,440 --> 00:18:23,120
more traces i um continued working on

412
00:18:22,720 --> 00:18:26,480
the

413
00:18:23,120 --> 00:18:30,719
qmo demonstration because it takes about

414
00:18:26,480 --> 00:18:32,880
five seconds to capture a complete trace

415
00:18:30,720 --> 00:18:34,960
yeah but uh yeah that's something we

416
00:18:32,880 --> 00:18:38,000
could do just let it run

417
00:18:34,960 --> 00:18:41,039
like overnight and then

418
00:18:38,000 --> 00:18:43,840
analyze the c code to explain the

419
00:18:41,039 --> 00:18:43,840
question

420
00:18:44,480 --> 00:18:48,080
we did an emulator for uh running dfi

421
00:18:47,200 --> 00:18:51,200
option robs

422
00:18:48,080 --> 00:18:54,000
and there when you run x864 push your

423
00:18:51,200 --> 00:18:54,880
code in an emulator and run into lots of

424
00:18:54,000 --> 00:18:57,520
like non-pointed

425
00:18:54,880 --> 00:18:57,520
references

426
00:19:03,510 --> 00:19:07,780
[Music]

427
00:19:06,160 --> 00:19:09,360
we are running

428
00:19:07,780 --> 00:19:12,320
[Music]

429
00:19:09,360 --> 00:19:13,439
blobs that are usually compiled into

430
00:19:12,320 --> 00:19:18,000
protected mode

431
00:19:13,440 --> 00:19:21,039
so we won't see any issues with

432
00:19:18,000 --> 00:19:24,640
running option runs that are usually in

433
00:19:21,039 --> 00:19:28,240
compiled into 16-bit rear mode

434
00:19:24,640 --> 00:19:31,679
i doubt that there will be lots of

435
00:19:28,240 --> 00:19:34,000
issues with it because we can see

436
00:19:31,679 --> 00:19:35,760
that those blobs are working quite well

437
00:19:34,000 --> 00:19:39,840
on modern computers

438
00:19:35,760 --> 00:19:39,840
and yeah

439
00:19:40,480 --> 00:19:43,919
yes please it's good to see that you're

440
00:19:43,440 --> 00:19:46,080
staying

441
00:19:43,919 --> 00:19:47,120
trying to stay at the right side of the

442
00:19:46,080 --> 00:19:49,439
lawn therefore

443
00:19:47,120 --> 00:19:51,199
all these paragraphs on the other hand

444
00:19:49,440 --> 00:19:53,520
the definition of a trace

445
00:19:51,200 --> 00:19:55,280
is a matter for interpretation if you

446
00:19:53,520 --> 00:19:58,559
write an emulator that actually

447
00:19:55,280 --> 00:20:00,799
gives the trace for every instruction it

448
00:19:58,559 --> 00:20:01,600
carries on i would still consider this a

449
00:20:00,799 --> 00:20:03,520
trace

450
00:20:01,600 --> 00:20:05,600
others would consider this to be a

451
00:20:03,520 --> 00:20:08,799
debugging exercise

452
00:20:05,600 --> 00:20:10,080
but in this regard um the rather weighty

453
00:20:08,799 --> 00:20:12,720
formulation of the law

454
00:20:10,080 --> 00:20:14,000
they walk into your papers because i see

455
00:20:12,720 --> 00:20:15,919
you do not

456
00:20:14,000 --> 00:20:18,000
recognize a single instruction you just

457
00:20:15,919 --> 00:20:19,919
have branches where stuff

458
00:20:18,000 --> 00:20:21,280
executes differently you don't know

459
00:20:19,919 --> 00:20:23,520
what's happening in between

460
00:20:21,280 --> 00:20:24,960
you don't have fine grade timing even an

461
00:20:23,520 --> 00:20:28,240
idea how long it takes

462
00:20:24,960 --> 00:20:30,400
uh before uh two pieces of memory are

463
00:20:28,240 --> 00:20:32,000
being read or written so finding out the

464
00:20:30,400 --> 00:20:34,720
heuristics just to spot

465
00:20:32,000 --> 00:20:35,440
loops will already be quite a bit of a

466
00:20:34,720 --> 00:20:37,120
challenge

467
00:20:35,440 --> 00:20:39,600
but there may be shortcuts there and i

468
00:20:37,120 --> 00:20:43,280
would suggest to consider some of that

469
00:20:39,600 --> 00:20:45,600
yeah so the

470
00:20:43,280 --> 00:20:46,480
i think it was the note uh the note was

471
00:20:45,600 --> 00:20:49,280
about

472
00:20:46,480 --> 00:20:50,159
the german law and it turns out that we

473
00:20:49,280 --> 00:20:52,240
are on a

474
00:20:50,159 --> 00:20:54,159
likely on the safe side of the law

475
00:20:52,240 --> 00:20:57,919
because we

476
00:20:54,159 --> 00:21:00,360
really only capture the traces and

477
00:20:57,919 --> 00:21:01,600
don't use it as debugger to

478
00:21:00,360 --> 00:21:05,280
[Music]

479
00:21:01,600 --> 00:21:05,280
trace every single instruction and

480
00:21:06,720 --> 00:21:14,080
yeah so it could be quite challenging

481
00:21:10,080 --> 00:21:16,879
to detect branches and tight loops

482
00:21:14,080 --> 00:21:17,520
on the on the target um because

483
00:21:16,880 --> 00:21:20,480
everything is

484
00:21:17,520 --> 00:21:21,360
slowed down and we only really see io

485
00:21:20,480 --> 00:21:24,000
and not

486
00:21:21,360 --> 00:21:24,639
the decision to send out the specific

487
00:21:24,000 --> 00:21:30,159
instruction

488
00:21:24,640 --> 00:21:33,039
the io instructions

489
00:21:30,159 --> 00:21:33,039
any other questions

490
00:21:35,440 --> 00:21:45,840
okay that is it thank you for attending

491
00:21:49,280 --> 00:21:51,360
you

