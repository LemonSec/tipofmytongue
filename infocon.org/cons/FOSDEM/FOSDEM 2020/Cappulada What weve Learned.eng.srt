1
00:00:05,839 --> 00:00:10,639
so hello everyone

2
00:00:07,359 --> 00:00:13,200
um last year i presented our

3
00:00:10,639 --> 00:00:13,759
binding generator for c a c plus plus

4
00:00:13,200 --> 00:00:16,480
code

5
00:00:13,759 --> 00:00:16,480
for trader

6
00:00:17,279 --> 00:00:22,000
we we promised you that it's going to be

7
00:00:19,760 --> 00:00:26,240
better than any existing solution

8
00:00:22,000 --> 00:00:26,240
and we tried hard but it isn't

9
00:00:26,480 --> 00:00:29,599
and i'm going to exp now i'm going to

10
00:00:28,080 --> 00:00:32,399
explain why

11
00:00:29,599 --> 00:00:33,920
so what would what uh what did we say we

12
00:00:32,399 --> 00:00:36,960
wanted to be better than existing

13
00:00:33,920 --> 00:00:36,960
solutions um

14
00:00:38,879 --> 00:00:42,239
um we wanted to have to maintain the

15
00:00:41,360 --> 00:00:44,239
original c

16
00:00:42,239 --> 00:00:46,399
plus api layout we wanted to have type

17
00:00:44,239 --> 00:00:49,599
safety

18
00:00:46,399 --> 00:00:50,399
we wanted to have template support

19
00:00:49,600 --> 00:00:52,000
because

20
00:00:50,399 --> 00:00:55,440
because this is what most of the

21
00:00:52,000 --> 00:00:55,440
existing solutions were lacking

22
00:00:56,320 --> 00:00:59,600
and for this we also had to implement

23
00:00:58,320 --> 00:01:04,319
things like um

24
00:00:59,600 --> 00:01:04,320
c plus plus uh name mangling and so on

25
00:01:04,400 --> 00:01:08,640
so how far did we get well we got a

26
00:01:07,040 --> 00:01:10,720
working temp we got working template

27
00:01:08,640 --> 00:01:12,159
support to some extent i showed a demo

28
00:01:10,720 --> 00:01:14,320
last year

29
00:01:12,159 --> 00:01:17,119
we were able to bind these simple things

30
00:01:14,320 --> 00:01:21,039
like classes namespaces functions

31
00:01:17,119 --> 00:01:21,040
pointers function pointers

32
00:01:22,479 --> 00:01:26,720
visibility like public protected and

33
00:01:24,400 --> 00:01:30,560
private and also we

34
00:01:26,720 --> 00:01:33,200
at some point we arrived at our own

35
00:01:30,560 --> 00:01:33,920
probably not complete uh c plus plus um

36
00:01:33,200 --> 00:01:37,680
name mang

37
00:01:33,920 --> 00:01:40,880
implementation so what did

38
00:01:37,680 --> 00:01:44,479
what are the things we didn't achieve

39
00:01:40,880 --> 00:01:46,880
well one great

40
00:01:44,479 --> 00:01:48,240
but also really complex features of c

41
00:01:46,880 --> 00:01:50,960
plus are

42
00:01:48,240 --> 00:01:51,920
partial template specializations so this

43
00:01:50,960 --> 00:01:54,720
is something that

44
00:01:51,920 --> 00:01:55,759
we didn't make to work also there are

45
00:01:54,720 --> 00:01:58,158
many things that

46
00:01:55,759 --> 00:01:59,520
we could have done with just more effort

47
00:01:58,159 --> 00:02:02,799
like uh there are

48
00:01:59,520 --> 00:02:04,240
many um many edge cases like type devs

49
00:02:02,799 --> 00:02:05,920
on specific types or

50
00:02:04,240 --> 00:02:08,720
the auto keyword operator overlays

51
00:02:05,920 --> 00:02:11,599
function templates and so on

52
00:02:08,720 --> 00:02:12,239
but there are also things we didn't even

53
00:02:11,599 --> 00:02:14,000
try to do

54
00:02:12,239 --> 00:02:17,840
until the point where we stopped like

55
00:02:14,000 --> 00:02:17,840
the structures or multiple inheritance

56
00:02:18,480 --> 00:02:23,679
so why is it hard in an overview

57
00:02:22,000 --> 00:02:25,280
well they're both quite complex

58
00:02:23,680 --> 00:02:29,280
languages like ada

59
00:02:25,280 --> 00:02:31,599
2012 has thousands uh 300 pages and

60
00:02:29,280 --> 00:02:33,760
cnc plus plus together have around 2000

61
00:02:31,599 --> 00:02:35,920
pages of set office of standard

62
00:02:33,760 --> 00:02:38,399
so you to make a complete generator you

63
00:02:35,920 --> 00:02:41,760
have to understand it all and map it all

64
00:02:38,400 --> 00:02:43,120
one on another and that some points they

65
00:02:41,760 --> 00:02:46,239
are also inherently

66
00:02:43,120 --> 00:02:47,840
different so c plus plus templates

67
00:02:46,239 --> 00:02:49,920
can be used for meta programming they're

68
00:02:47,840 --> 00:02:53,120
actually touring complete

69
00:02:49,920 --> 00:02:54,480
ada generics are not that not that

70
00:02:53,120 --> 00:02:56,319
versatile

71
00:02:54,480 --> 00:02:58,000
which is in my in my mind is a good

72
00:02:56,319 --> 00:03:01,119
thing

73
00:02:58,000 --> 00:03:02,800
also aries for example in ada they are a

74
00:03:01,120 --> 00:03:04,800
separate type they have a specific

75
00:03:02,800 --> 00:03:05,920
index type and c plus plus the index is

76
00:03:04,800 --> 00:03:09,120
just um

77
00:03:05,920 --> 00:03:10,958
well the area itself is just a built-in

78
00:03:09,120 --> 00:03:12,560
construct and the index is just a

79
00:03:10,959 --> 00:03:15,360
constant expression that is

80
00:03:12,560 --> 00:03:18,560
casted to whatever type is needed on in

81
00:03:15,360 --> 00:03:21,519
compile time so

82
00:03:18,560 --> 00:03:22,319
what doesn't work or what is really hard

83
00:03:21,519 --> 00:03:25,360
to get

84
00:03:22,319 --> 00:03:28,159
right um templates

85
00:03:25,360 --> 00:03:30,159
in c plus plus they are static so um

86
00:03:28,159 --> 00:03:32,319
when you have a template

87
00:03:30,159 --> 00:03:33,679
you are ensured with a type name t for

88
00:03:32,319 --> 00:03:35,440
example

89
00:03:33,680 --> 00:03:38,239
and then you use this type so this is

90
00:03:35,440 --> 00:03:40,879
like an ada generic with a private type

91
00:03:38,239 --> 00:03:41,760
and as its aesthetic it generates its

92
00:03:40,879 --> 00:03:44,879
own symbol

93
00:03:41,760 --> 00:03:47,840
and this symbol is mangled to prevent

94
00:03:44,879 --> 00:03:49,760
overlapping symbols so we instantiate

95
00:03:47,840 --> 00:03:51,760
this template and we have with integers

96
00:03:49,760 --> 00:03:53,359
so we have the name a which maps

97
00:03:51,760 --> 00:03:56,399
to this name a in the symbol and the

98
00:03:53,360 --> 00:03:58,080
integer matches to this e in the symbol

99
00:03:56,400 --> 00:03:59,360
the function name matches to this name

100
00:03:58,080 --> 00:04:01,200
in the symbol and the other integer

101
00:03:59,360 --> 00:04:04,640
matches to this i in the symbol

102
00:04:01,200 --> 00:04:06,798
the things between our start and end

103
00:04:04,640 --> 00:04:09,040
points for the names and this set

104
00:04:06,799 --> 00:04:10,159
underscore set is like just this is a c

105
00:04:09,040 --> 00:04:13,040
plus plus

106
00:04:10,159 --> 00:04:13,040
manga symbol

107
00:04:13,599 --> 00:04:17,839
so um we want to implement this as an

108
00:04:15,599 --> 00:04:19,759
ada generic and we want

109
00:04:17,839 --> 00:04:21,198
we don't want to make this statically

110
00:04:19,759 --> 00:04:22,960
it's as well

111
00:04:21,199 --> 00:04:24,639
not statically in sense of compile time

112
00:04:22,960 --> 00:04:26,159
but statically in sense of binding

113
00:04:24,639 --> 00:04:28,160
but we want to generate our binding

114
00:04:26,160 --> 00:04:29,680
automatically so what what we have to do

115
00:04:28,160 --> 00:04:31,120
we have to generate the sim in the

116
00:04:29,680 --> 00:04:32,400
external name where we can import

117
00:04:31,120 --> 00:04:34,560
symbols in ada

118
00:04:32,400 --> 00:04:35,840
we would have to generate the symbol at

119
00:04:34,560 --> 00:04:37,280
compile time

120
00:04:35,840 --> 00:04:38,880
well now we are running in a problem

121
00:04:37,280 --> 00:04:41,758
here when we

122
00:04:38,880 --> 00:04:43,199
call this function which generates um

123
00:04:41,759 --> 00:04:46,880
this the correct

124
00:04:43,199 --> 00:04:49,280
symbol part of our type which x is off

125
00:04:46,880 --> 00:04:50,880
so x is of type t and we call we

126
00:04:49,280 --> 00:04:54,159
generate a string of

127
00:04:50,880 --> 00:04:56,000
of x which is type specific and problem

128
00:04:54,160 --> 00:04:58,479
is this isn't static

129
00:04:56,000 --> 00:05:00,080
and in general the ada reference manual

130
00:04:58,479 --> 00:05:01,840
says in this uh

131
00:05:00,080 --> 00:05:03,680
no well not at this point but in general

132
00:05:01,840 --> 00:05:06,960
says that this part

133
00:05:03,680 --> 00:05:09,039
the template uh the template

134
00:05:06,960 --> 00:05:10,560
argument is never static so we will

135
00:05:09,039 --> 00:05:14,159
never be able

136
00:05:10,560 --> 00:05:16,160
to um to get the template argument be

137
00:05:14,160 --> 00:05:17,840
somewhere included in the symbol name so

138
00:05:16,160 --> 00:05:19,759
this just doesn't work

139
00:05:17,840 --> 00:05:22,560
the idea behind this function initially

140
00:05:19,759 --> 00:05:24,880
was we overload this function

141
00:05:22,560 --> 00:05:26,560
and for each type you return a specific

142
00:05:24,880 --> 00:05:28,960
symbol

143
00:05:26,560 --> 00:05:30,320
but the other problem is we can't uh

144
00:05:28,960 --> 00:05:31,599
overload a function and then put a

145
00:05:30,320 --> 00:05:35,599
private type

146
00:05:31,600 --> 00:05:37,520
uh if you go back and we see that

147
00:05:35,600 --> 00:05:39,759
x is private and access of a private

148
00:05:37,520 --> 00:05:41,359
type t so we can't just overload m with

149
00:05:39,759 --> 00:05:42,880
integer and hope that the private type

150
00:05:41,360 --> 00:05:45,120
is integer and it will automatically

151
00:05:42,880 --> 00:05:48,400
resolve this just doesn't work

152
00:05:45,120 --> 00:05:51,600
so um yeah you can't

153
00:05:48,400 --> 00:05:53,198
just generate a symbol from code in

154
00:05:51,600 --> 00:05:54,720
um the only solution would be a

155
00:05:53,199 --> 00:05:56,639
preprocessor

156
00:05:54,720 --> 00:05:57,840
um we didn't want to have a preprocessor

157
00:05:56,639 --> 00:06:01,280
first uh thing

158
00:05:57,840 --> 00:06:02,638
is eight um the ada doesn't have one

159
00:06:01,280 --> 00:06:04,880
in the first place and the second thing

160
00:06:02,639 --> 00:06:07,039
is if we want we wanted to make the code

161
00:06:04,880 --> 00:06:08,800
as bar compatible as possible

162
00:06:07,039 --> 00:06:10,880
and if we would make a preprocessor it

163
00:06:08,800 --> 00:06:12,080
would be really hard to prove all the

164
00:06:10,880 --> 00:06:14,080
code because

165
00:06:12,080 --> 00:06:15,680
depending on the preprocessor options

166
00:06:14,080 --> 00:06:18,318
you would only prove the part that the

167
00:06:15,680 --> 00:06:20,160
preprocessor includes and then you have

168
00:06:18,319 --> 00:06:22,479
then you had to make would have to make

169
00:06:20,160 --> 00:06:23,440
sure that all the preprocessor options

170
00:06:22,479 --> 00:06:26,080
are proved

171
00:06:23,440 --> 00:06:27,520
also and this would require some major

172
00:06:26,080 --> 00:06:29,120
approval that proves that all your code

173
00:06:27,520 --> 00:06:31,120
is proof

174
00:06:29,120 --> 00:06:32,400
um yeah so that's why we don't want to

175
00:06:31,120 --> 00:06:34,560
have a preprocessor and this is an

176
00:06:32,400 --> 00:06:37,039
option for us

177
00:06:34,560 --> 00:06:38,800
um the second is c c plus plus supports

178
00:06:37,039 --> 00:06:40,960
pass by value for anything

179
00:06:38,800 --> 00:06:42,000
so you can just take a class that is

180
00:06:40,960 --> 00:06:45,599
like a kilobyte

181
00:06:42,000 --> 00:06:49,280
large and you can just pass it by value

182
00:06:45,600 --> 00:06:52,000
so how do we import a class in c plus an

183
00:06:49,280 --> 00:06:52,880
ada first the class itself is a record

184
00:06:52,000 --> 00:06:55,039
in ada

185
00:06:52,880 --> 00:06:57,120
and it has the convention c plus plus

186
00:06:55,039 --> 00:06:58,560
and it must be limited so if you don't

187
00:06:57,120 --> 00:07:01,120
at the limited

188
00:06:58,560 --> 00:07:02,800
you won't get the constructor which is a

189
00:07:01,120 --> 00:07:05,840
function that returns a

190
00:07:02,800 --> 00:07:07,360
but has a c plus plus constructor the

191
00:07:05,840 --> 00:07:10,479
important thing here is

192
00:07:07,360 --> 00:07:12,479
that this function behaves like a

193
00:07:10,479 --> 00:07:14,240
this construct behaves like a function

194
00:07:12,479 --> 00:07:15,039
so that it can initialize the limited

195
00:07:14,240 --> 00:07:17,440
object

196
00:07:15,039 --> 00:07:19,599
but it actually is it is a procedure

197
00:07:17,440 --> 00:07:21,520
where a is the first argument as an out

198
00:07:19,599 --> 00:07:24,400
parameter

199
00:07:21,520 --> 00:07:26,159
so um yeah this is kind of a kind of a

200
00:07:24,400 --> 00:07:29,280
special construct we need for c

201
00:07:26,160 --> 00:07:32,319
plus classes so we can't omit this

202
00:07:29,280 --> 00:07:35,679
now we had a fun a procedure

203
00:07:32,319 --> 00:07:39,199
print a so as we can see here

204
00:07:35,680 --> 00:07:41,759
um this takes a without any

205
00:07:39,199 --> 00:07:43,680
pointer or reference addition so it just

206
00:07:41,759 --> 00:07:45,759
passed by value

207
00:07:43,680 --> 00:07:47,199
and well okay we just imported and we

208
00:07:45,759 --> 00:07:49,919
say it's an in parameter so it's

209
00:07:47,199 --> 00:07:53,120
potentially passed by value

210
00:07:49,919 --> 00:07:55,840
but the problem is um does anyone see

211
00:07:53,120 --> 00:07:55,840
the problem here

212
00:07:56,800 --> 00:08:01,919
exactly well a is limited and so a is

213
00:08:00,080 --> 00:08:03,680
always passed by reference

214
00:08:01,919 --> 00:08:05,599
so what we do is we take the reference

215
00:08:03,680 --> 00:08:07,840
to a and pass it to print and print

216
00:08:05,599 --> 00:08:09,919
things oh this is already my class and

217
00:08:07,840 --> 00:08:10,638
for anything else then this simple thing

218
00:08:09,919 --> 00:08:12,318
it will just

219
00:08:10,639 --> 00:08:14,160
break and you have a stack overflow

220
00:08:12,319 --> 00:08:16,160
because print will just go

221
00:08:14,160 --> 00:08:17,680
deeper into the class and yeah this is

222
00:08:16,160 --> 00:08:19,280
your memory where the pointer is but not

223
00:08:17,680 --> 00:08:23,039
your class

224
00:08:19,280 --> 00:08:25,198
so well a considered solution would

225
00:08:23,039 --> 00:08:27,280
be that we can import print by the

226
00:08:25,199 --> 00:08:29,440
convention c pass by copy which

227
00:08:27,280 --> 00:08:30,719
explicitly tells print okay whatever

228
00:08:29,440 --> 00:08:35,120
goes into there

229
00:08:30,720 --> 00:08:37,279
must be passed by copy problem is um

230
00:08:35,120 --> 00:08:38,640
this is only allowed for the s for the

231
00:08:37,279 --> 00:08:41,519
record type and

232
00:08:38,640 --> 00:08:42,159
as as soon as we add make it limited and

233
00:08:41,519 --> 00:08:44,000
that's

234
00:08:42,159 --> 00:08:46,240
a convention c plus plus it is not

235
00:08:44,000 --> 00:08:49,440
longer a record type but a c plus

236
00:08:46,240 --> 00:08:53,600
class type which can at no point

237
00:08:49,440 --> 00:08:56,080
ever be passed by by value

238
00:08:53,600 --> 00:08:57,360
so we can just define an identical

239
00:08:56,080 --> 00:09:00,720
record

240
00:08:57,360 --> 00:09:04,240
and convert between both

241
00:09:00,720 --> 00:09:06,640
so yeah this is going to be

242
00:09:04,240 --> 00:09:08,640
on one point really really ugly because

243
00:09:06,640 --> 00:09:10,800
you always have to convert between

244
00:09:08,640 --> 00:09:12,240
usually identical things and the other

245
00:09:10,800 --> 00:09:13,920
thing is you would have to make an

246
00:09:12,240 --> 00:09:15,760
unchecked conversion between a limited

247
00:09:13,920 --> 00:09:18,479
and an unlimited type

248
00:09:15,760 --> 00:09:19,680
and this is some kind of you you may you

249
00:09:18,480 --> 00:09:22,080
take an address and convert it to

250
00:09:19,680 --> 00:09:25,199
something that is not an address so this

251
00:09:22,080 --> 00:09:25,200
doesn't sound really safe

252
00:09:25,839 --> 00:09:32,959
um yes things that are just not working

253
00:09:28,880 --> 00:09:34,959
automatically called destructors so um

254
00:09:32,959 --> 00:09:36,880
i think we even wrote a ticket trader

255
00:09:34,959 --> 00:09:39,359
call and they just told us this

256
00:09:36,880 --> 00:09:39,360
won't work

257
00:09:40,000 --> 00:09:43,519
an option for this could be control

258
00:09:41,760 --> 00:09:45,760
types but

259
00:09:43,519 --> 00:09:46,720
to use a control type you have to

260
00:09:45,760 --> 00:09:49,680
inherit from it

261
00:09:46,720 --> 00:09:50,480
so you already already have the

262
00:09:49,680 --> 00:09:53,199
controlled

263
00:09:50,480 --> 00:09:54,880
uh type in your class but then it's not

264
00:09:53,200 --> 00:09:56,800
any more identical to the c plus plus

265
00:09:54,880 --> 00:10:00,000
class you actually want to use

266
00:09:56,800 --> 00:10:01,680
so you probably have to embed the c plus

267
00:10:00,000 --> 00:10:03,440
class somehow until the control type but

268
00:10:01,680 --> 00:10:05,199
if you have a point of the c plus plus

269
00:10:03,440 --> 00:10:06,560
class it doesn't point anymore to the

270
00:10:05,200 --> 00:10:08,800
control type

271
00:10:06,560 --> 00:10:10,479
so yeah you see this isn't going

272
00:10:08,800 --> 00:10:12,719
anywhere

273
00:10:10,480 --> 00:10:12,720
um

274
00:10:13,600 --> 00:10:18,160
yeah we could call the destructor

275
00:10:15,680 --> 00:10:20,479
manually but then we had to implement

276
00:10:18,160 --> 00:10:21,279
a solution in our binding generator that

277
00:10:20,480 --> 00:10:24,399
checks

278
00:10:21,279 --> 00:10:25,680
the scope of and of uh the scope of any

279
00:10:24,399 --> 00:10:27,920
object we ever

280
00:10:25,680 --> 00:10:29,519
see in c plus and checks if it goes out

281
00:10:27,920 --> 00:10:30,719
of scope and automatically cause then

282
00:10:29,519 --> 00:10:33,920
the generator

283
00:10:30,720 --> 00:10:37,279
at the destructor this isn't

284
00:10:33,920 --> 00:10:38,240
really a feasible solution so what have

285
00:10:37,279 --> 00:10:40,880
you learned well

286
00:10:38,240 --> 00:10:42,000
even if anything would work we would

287
00:10:40,880 --> 00:10:45,439
still have to implement

288
00:10:42,000 --> 00:10:45,440
2000 pages of standard

289
00:10:45,600 --> 00:10:49,519
and yeah there are things that might

290
00:10:47,760 --> 00:10:50,399
work with really high effort with a

291
00:10:49,519 --> 00:10:52,640
preprocessor

292
00:10:50,399 --> 00:10:55,120
or but there are also things that just

293
00:10:52,640 --> 00:10:58,399
never will work really good

294
00:10:55,120 --> 00:11:00,320
um or at the high cost of a bad

295
00:10:58,399 --> 00:11:00,640
usability or really really bad safety

296
00:11:00,320 --> 00:11:03,600
and

297
00:11:00,640 --> 00:11:05,199
since we are going to target spark as

298
00:11:03,600 --> 00:11:08,480
our language we are not going to make

299
00:11:05,200 --> 00:11:08,480
any compromises in safety

300
00:11:09,360 --> 00:11:13,760
last year someone asked this question

301
00:11:12,480 --> 00:11:15,760
do you fear that you import the

302
00:11:13,760 --> 00:11:17,760
weirdness of c plus plus into ada

303
00:11:15,760 --> 00:11:20,000
and well now we have our answer it is

304
00:11:17,760 --> 00:11:20,000
yes

305
00:11:20,240 --> 00:11:26,320
um yes

306
00:11:23,440 --> 00:11:28,320
um well we didn't make the binding

307
00:11:26,320 --> 00:11:28,880
generator for no purpose but the purpose

308
00:11:28,320 --> 00:11:32,000
was

309
00:11:28,880 --> 00:11:33,360
was to build um safe components for

310
00:11:32,000 --> 00:11:34,959
component-based systems so

311
00:11:33,360 --> 00:11:36,880
since we don't have a binding generator

312
00:11:34,959 --> 00:11:38,800
we had to write our bindings ourselves

313
00:11:36,880 --> 00:11:40,320
and i will talk about those bindings and

314
00:11:38,800 --> 00:11:42,640
the solutions in

315
00:11:40,320 --> 00:11:44,480
my nice a nice component framework and

316
00:11:42,640 --> 00:11:47,439
spark talk tomorrow in the

317
00:11:44,480 --> 00:11:49,279
microcontroller so you're all welcome to

318
00:11:47,440 --> 00:11:57,839
go there

319
00:11:49,279 --> 00:11:57,839
thank you are there any questions

320
00:12:06,240 --> 00:12:11,839
sorry it was just

321
00:12:17,600 --> 00:12:22,000
yeah the question was if we can change

322
00:12:20,240 --> 00:12:24,399
things in the other language to overcome

323
00:12:22,000 --> 00:12:26,079
some of those limitations well what

324
00:12:24,399 --> 00:12:27,600
at some point what we really thought

325
00:12:26,079 --> 00:12:31,199
would be useful would be

326
00:12:27,600 --> 00:12:33,120
a static the the option to make uh

327
00:12:31,200 --> 00:12:34,399
generics completely static so the

328
00:12:33,120 --> 00:12:36,240
problem is that

329
00:12:34,399 --> 00:12:38,240
generics are never considered static

330
00:12:36,240 --> 00:12:38,800
even if all inputs are actually static

331
00:12:38,240 --> 00:12:40,880
because

332
00:12:38,800 --> 00:12:43,120
you just write them into the code so

333
00:12:40,880 --> 00:12:46,320
this would be a great option for

334
00:12:43,120 --> 00:12:47,120
those things another one would i don't

335
00:12:46,320 --> 00:12:49,920
know if it's

336
00:12:47,120 --> 00:12:51,600
um if it's something you want to have in

337
00:12:49,920 --> 00:12:54,319
the language but maybe some

338
00:12:51,600 --> 00:12:55,839
kind of constant expression so like like

339
00:12:54,320 --> 00:12:58,079
an expression function but you say it's

340
00:12:55,839 --> 00:12:58,880
errors that is always static and you can

341
00:12:58,079 --> 00:13:01,199
evaluate it

342
00:12:58,880 --> 00:13:03,360
at compile time this would probably make

343
00:13:01,200 --> 00:13:05,519
templates and generics work

344
00:13:03,360 --> 00:13:07,839
um about the path by value thing i'm not

345
00:13:05,519 --> 00:13:11,040
sure if this is going

346
00:13:07,839 --> 00:13:11,040
if this is ever going to work

347
00:13:14,480 --> 00:13:17,600
i try to remember

348
00:13:19,440 --> 00:13:25,200
with you descriptors

349
00:13:22,560 --> 00:13:26,719
have you considered the option of not

350
00:13:25,200 --> 00:13:30,079
trying to directly map

351
00:13:26,720 --> 00:13:32,079
the attack types to

352
00:13:30,079 --> 00:13:33,199
the foreign binary interface of

353
00:13:32,079 --> 00:13:35,599
superstars

354
00:13:33,200 --> 00:13:36,480
instead instead going through some kind

355
00:13:35,600 --> 00:13:40,160
of wrapper

356
00:13:36,480 --> 00:13:44,720
you have actually pure ada type

357
00:13:40,160 --> 00:13:47,199
types that just contain

358
00:13:44,720 --> 00:13:49,519
something private a pointer to then

359
00:13:47,199 --> 00:13:51,519
immediately

360
00:13:49,519 --> 00:13:53,600
so that you can actually manually

361
00:13:51,519 --> 00:13:56,720
forward the

362
00:13:53,600 --> 00:13:58,880
identity operations such as

363
00:13:56,720 --> 00:13:59,920
compiling in the controller control

364
00:13:58,880 --> 00:14:03,760
types

365
00:13:59,920 --> 00:14:07,040
to the uh constructors in

366
00:14:03,760 --> 00:14:10,160
space i don't know if i that's clear but

367
00:14:07,040 --> 00:14:13,760
introducing an indirection not to rely

368
00:14:10,160 --> 00:14:16,800
on the only that's uh

369
00:14:13,760 --> 00:14:16,800
interfacing aspects

370
00:14:18,800 --> 00:14:24,160
yeah i tried to repeat it well um the

371
00:14:21,600 --> 00:14:27,199
question was

372
00:14:24,160 --> 00:14:28,880
if we if we can embed the the c plus

373
00:14:27,199 --> 00:14:30,079
plus types as pointers you know into our

374
00:14:28,880 --> 00:14:32,800
data types and then

375
00:14:30,079 --> 00:14:34,479
that we can forward the destructor and

376
00:14:32,800 --> 00:14:36,719
construct and copy constructor costs to

377
00:14:34,480 --> 00:14:39,839
c plus plus again

378
00:14:36,720 --> 00:14:41,920
um our initial goal was

379
00:14:39,839 --> 00:14:45,040
also for those component based systems

380
00:14:41,920 --> 00:14:48,319
and we don't have dynamic memory there

381
00:14:45,040 --> 00:14:49,760
and our memory management solution for

382
00:14:48,320 --> 00:14:52,240
these systems is that

383
00:14:49,760 --> 00:14:53,199
all the memory resides in the bss in our

384
00:14:52,240 --> 00:14:58,560
package

385
00:14:53,199 --> 00:15:02,639
so we have we have to um

386
00:14:58,560 --> 00:15:07,040
to know all x exact um c plus plus type

387
00:15:02,639 --> 00:15:07,040
layouts to map them correctly to ada

388
00:15:10,839 --> 00:15:13,839
yeah

389
00:15:15,519 --> 00:15:18,959
yes exactly so we have a quite limited

390
00:15:17,760 --> 00:15:22,480
um

391
00:15:18,959 --> 00:15:24,399
uh quite a limited environment so

392
00:15:22,480 --> 00:15:26,079
with the limited runtime so we really

393
00:15:24,399 --> 00:15:26,800
have to make our memory management

394
00:15:26,079 --> 00:15:28,880
ourselves

395
00:15:26,800 --> 00:15:30,240
and then we have to know the exact type

396
00:15:28,880 --> 00:15:34,240
layout for any c

397
00:15:30,240 --> 00:15:35,600
plus type we want to use uh you

398
00:15:34,240 --> 00:15:37,360
on one of your slides where it was a

399
00:15:35,600 --> 00:15:38,480
sentence but overloading doesn't work

400
00:15:37,360 --> 00:15:42,000
with private types

401
00:15:38,480 --> 00:15:42,720
what do you mean by what um i think this

402
00:15:42,000 --> 00:15:45,440
was like

403
00:15:42,720 --> 00:15:45,440
three or so

404
00:15:46,880 --> 00:15:50,480
overloading so the question was

405
00:15:48,959 --> 00:15:55,839
somewhere on my slides was overloading

406
00:15:50,480 --> 00:15:55,839
doesn't work with private types

407
00:16:01,440 --> 00:16:06,320
ah no i know i know what you mean so um

408
00:16:04,320 --> 00:16:10,240
you see here that

409
00:16:06,320 --> 00:16:12,800
t is a private type so and the idea was

410
00:16:10,240 --> 00:16:13,920
that m is a function we implemented

411
00:16:12,800 --> 00:16:17,599
somewhere else

412
00:16:13,920 --> 00:16:20,079
for any possible possible type and that

413
00:16:17,600 --> 00:16:21,440
whatever you put in t is automatically

414
00:16:20,079 --> 00:16:23,519
overloaded in m

415
00:16:21,440 --> 00:16:24,959
but if you do a construct like this the

416
00:16:23,519 --> 00:16:27,600
compiler just tells you

417
00:16:24,959 --> 00:16:29,439
okay well m does not accept t but m

418
00:16:27,600 --> 00:16:31,120
wants integer or whatever

419
00:16:29,440 --> 00:16:32,560
so you have to implement an m that

420
00:16:31,120 --> 00:16:34,639
accepts exactly t

421
00:16:32,560 --> 00:16:36,319
and then you again you don't know what t

422
00:16:34,639 --> 00:16:37,040
is but you want at this point you want

423
00:16:36,320 --> 00:16:39,199
to know what t

424
00:16:37,040 --> 00:16:39,199
is

425
00:16:48,839 --> 00:16:53,120
yes

426
00:16:50,079 --> 00:16:56,319
um this is actually

427
00:16:53,120 --> 00:16:58,560
a restriction set by the by the nut

428
00:16:56,320 --> 00:16:58,560
um

429
00:17:00,000 --> 00:17:04,079
oh sorry yeah why are we are we using

430
00:17:02,639 --> 00:17:08,000
limited types for c plus plus

431
00:17:04,079 --> 00:17:08,480
classes uh and while nothing is limited

432
00:17:08,000 --> 00:17:10,959
in c

433
00:17:08,480 --> 00:17:12,079
plus well one thing is we are not in c

434
00:17:10,959 --> 00:17:14,160
plus plus

435
00:17:12,079 --> 00:17:15,359
and when you copy some things in c plus

436
00:17:14,160 --> 00:17:17,600
plus or

437
00:17:15,359 --> 00:17:20,000
um there might be a copy constructor

438
00:17:17,599 --> 00:17:22,000
called but if you copy something in ada

439
00:17:20,000 --> 00:17:24,160
the copy constructor isn't called so

440
00:17:22,000 --> 00:17:24,799
you're actually not allowed to copy it

441
00:17:24,160 --> 00:17:27,679
because

442
00:17:24,799 --> 00:17:29,760
it doesn't have the same behavior so we

443
00:17:27,679 --> 00:17:31,919
you don't want to copy it in ada

444
00:17:29,760 --> 00:17:33,679
and the other limitation is not just

445
00:17:31,919 --> 00:17:35,440
sales if you use the sprockmatter type

446
00:17:33,679 --> 00:17:37,840
must be limited point so it just doesn't

447
00:17:35,440 --> 00:17:37,840
compile

448
00:17:39,679 --> 00:17:42,720
any further questions

449
00:17:43,840 --> 00:17:52,780
well then thank you you

450
00:17:45,840 --> 00:17:52,780
[Applause]

