1
00:00:06,319 --> 00:00:11,040
well thank you for coming

2
00:00:08,160 --> 00:00:12,960
uh my name is brian borum uh i work for

3
00:00:11,040 --> 00:00:15,518
a company called weaveworks

4
00:00:12,960 --> 00:00:16,240
um so let me just check who's in the

5
00:00:15,519 --> 00:00:19,759
room

6
00:00:16,239 --> 00:00:21,919
uh who had heard of weave net before

7
00:00:19,760 --> 00:00:23,519
before they read the schedule about half

8
00:00:21,920 --> 00:00:26,400
half the room that's okay

9
00:00:23,519 --> 00:00:27,278
and who who identifies as like a kernel

10
00:00:26,400 --> 00:00:31,598
developer

11
00:00:27,279 --> 00:00:33,840
or a device driver or dptk developer or

12
00:00:31,599 --> 00:00:36,559
yeah they've all left okay that's great

13
00:00:33,840 --> 00:00:40,000
so so we can uh

14
00:00:36,559 --> 00:00:43,040
because i um i put on this slide i

15
00:00:40,000 --> 00:00:43,600
i am not a networking expert i'm i'm

16
00:00:43,040 --> 00:00:46,399
like a

17
00:00:43,600 --> 00:00:47,840
programmer and uh i've been looking

18
00:00:46,399 --> 00:00:51,039
after this project for

19
00:00:47,840 --> 00:00:54,160
for five years uh it's been

20
00:00:51,039 --> 00:00:58,719
downloaded 250 million times it's

21
00:00:54,160 --> 00:01:01,358
uh starred five thousand times there's

22
00:00:58,719 --> 00:01:02,480
there's a certain things to be proud of

23
00:01:01,359 --> 00:01:05,519
um

24
00:01:02,480 --> 00:01:08,080
but uh it's

25
00:01:05,519 --> 00:01:09,280
yeah fundamentally i don't think i did

26
00:01:08,080 --> 00:01:11,679
anything clever

27
00:01:09,280 --> 00:01:13,520
so uh so i'm kind of glad that all those

28
00:01:11,680 --> 00:01:16,640
all the clever people have left the room

29
00:01:13,520 --> 00:01:19,840
and uh um

30
00:01:16,640 --> 00:01:21,439
i put my smiling face up um

31
00:01:19,840 --> 00:01:23,040
uh somewhat because i'm gonna put a

32
00:01:21,439 --> 00:01:24,960
bunch of people up you know this is a

33
00:01:23,040 --> 00:01:26,640
talk somewhat about the technology and

34
00:01:24,960 --> 00:01:30,079
somewhat about the people

35
00:01:26,640 --> 00:01:34,320
and the history of this project

36
00:01:30,079 --> 00:01:38,839
so hopefully that's interesting

37
00:01:34,320 --> 00:01:40,079
um so what is weavenet it's a container

38
00:01:38,840 --> 00:01:44,240
network

39
00:01:40,079 --> 00:01:47,839
and i'll talk about that in a minute um

40
00:01:44,240 --> 00:01:49,759
the primary thing we were aiming for

41
00:01:47,840 --> 00:01:51,280
is that it's easy to install it just

42
00:01:49,759 --> 00:01:52,880
works

43
00:01:51,280 --> 00:01:54,640
it runs anywhere and there's a little

44
00:01:52,880 --> 00:01:56,640
asterisk because we mean anywhere that

45
00:01:54,640 --> 00:02:00,240
is linux

46
00:01:56,640 --> 00:02:03,280
um but windows runs linux now

47
00:02:00,240 --> 00:02:03,759
uh we have tried this you can actually

48
00:02:03,280 --> 00:02:08,080
run

49
00:02:03,759 --> 00:02:11,280
weavenet on wsl so um

50
00:02:08,080 --> 00:02:12,879
nearly everywhere so um

51
00:02:11,280 --> 00:02:14,959
and we we never it's open source it's

52
00:02:12,879 --> 00:02:19,200
apache licensed we never made an

53
00:02:14,959 --> 00:02:22,640
enterprise version um

54
00:02:19,200 --> 00:02:26,480
so enjoy

55
00:02:22,640 --> 00:02:29,920
uh yeah what is a container network

56
00:02:26,480 --> 00:02:31,119
um well we had we had one definition

57
00:02:29,920 --> 00:02:34,319
from

58
00:02:31,120 --> 00:02:37,680
uh justin garrison works for disney

59
00:02:34,319 --> 00:02:39,839
uh i'm an admirer of

60
00:02:37,680 --> 00:02:42,080
of his work and and generally the work

61
00:02:39,840 --> 00:02:44,080
of disney it's good stuff

62
00:02:42,080 --> 00:02:46,160
um but he said there's no such thing as

63
00:02:44,080 --> 00:02:49,200
container networking

64
00:02:46,160 --> 00:02:50,640
uh so that was a bummer

65
00:02:49,200 --> 00:02:52,879
because i've been working on it for five

66
00:02:50,640 --> 00:02:52,879
years

67
00:02:54,239 --> 00:03:00,560
um uh but actually it turns out uh

68
00:02:57,920 --> 00:03:01,040
he uses weave net and and it just works

69
00:03:00,560 --> 00:03:04,560
uh

70
00:03:01,040 --> 00:03:06,640
so yes so um

71
00:03:04,560 --> 00:03:08,080
so more seriously uh you know what is a

72
00:03:06,640 --> 00:03:09,440
container network so the point of

73
00:03:08,080 --> 00:03:12,959
containers is

74
00:03:09,440 --> 00:03:14,879
is or one point at least is isolation uh

75
00:03:12,959 --> 00:03:16,080
through through name spaces and and

76
00:03:14,879 --> 00:03:18,560
kernel features

77
00:03:16,080 --> 00:03:20,560
uh one thing is sort of believes it's

78
00:03:18,560 --> 00:03:22,480
completely separate from another thing

79
00:03:20,560 --> 00:03:23,920
uh including network they have separate

80
00:03:22,480 --> 00:03:26,399
network namespaces

81
00:03:23,920 --> 00:03:27,518
so now how do these things talk to each

82
00:03:26,400 --> 00:03:29,599
other

83
00:03:27,519 --> 00:03:31,680
well whatever the answer to that

84
00:03:29,599 --> 00:03:33,359
question is that's a container network

85
00:03:31,680 --> 00:03:35,920
that's that's the definition i'm going

86
00:03:33,360 --> 00:03:39,760
to work with

87
00:03:35,920 --> 00:03:39,760
okay let's go back uh

88
00:03:40,239 --> 00:03:44,480
okay let's go here uh conceptually uh

89
00:03:43,599 --> 00:03:46,879
what does this mean

90
00:03:44,480 --> 00:03:48,238
so i'm gonna draw i'm going to put up a

91
00:03:46,879 --> 00:03:49,599
large number of

92
00:03:48,239 --> 00:03:51,519
diagrams that look a little bit like

93
00:03:49,599 --> 00:03:54,159
this so the

94
00:03:51,519 --> 00:03:55,120
the meaning of the shapes uh the big

95
00:03:54,159 --> 00:03:58,319
darker

96
00:03:55,120 --> 00:04:00,799
blue shape is is a machine

97
00:03:58,319 --> 00:04:02,640
whether it's bare metal or vm or or

98
00:04:00,799 --> 00:04:04,799
something like that that's that's your

99
00:04:02,640 --> 00:04:05,920
that's your kind of node in the network

100
00:04:04,799 --> 00:04:10,239
machine

101
00:04:05,920 --> 00:04:13,119
and the light blue blobs are containers

102
00:04:10,239 --> 00:04:15,680
okay so sometimes containers are talking

103
00:04:13,120 --> 00:04:17,040
to each other on the same machine

104
00:04:15,680 --> 00:04:20,079
sometimes they're talking to each other

105
00:04:17,040 --> 00:04:23,680
on different machines

106
00:04:20,079 --> 00:04:25,759
and by and large we're going to have

107
00:04:23,680 --> 00:04:26,960
like lots of these things

108
00:04:25,759 --> 00:04:30,000
and they're all going to be talking at

109
00:04:26,960 --> 00:04:32,479
once in in different amounts

110
00:04:30,000 --> 00:04:34,479
okay so that's the kind of theoretical

111
00:04:32,479 --> 00:04:37,520
high-level model that we want to

112
00:04:34,479 --> 00:04:38,719
that's what we want to do uh go back

113
00:04:37,520 --> 00:04:41,198
let's go back five years

114
00:04:38,720 --> 00:04:42,160
five and a half years uh this smiling

115
00:04:41,199 --> 00:04:45,680
face

116
00:04:42,160 --> 00:04:49,680
uh mr sackman wrote the first

117
00:04:45,680 --> 00:04:52,720
version of uh what became weave net

118
00:04:49,680 --> 00:04:55,280
um he was

119
00:04:52,720 --> 00:04:56,160
uh out of rabbit mq in fact the the

120
00:04:55,280 --> 00:04:59,359
founders of

121
00:04:56,160 --> 00:05:02,479
weave works all came from rabbitmq

122
00:04:59,360 --> 00:05:05,600
um so here's a erlang programmer

123
00:05:02,479 --> 00:05:07,039
and the the code uh a lot of the code

124
00:05:05,600 --> 00:05:09,039
has quite a strong it's all written in

125
00:05:07,039 --> 00:05:11,039
go but it's a strong kind of erlang

126
00:05:09,039 --> 00:05:13,919
flavor to it

127
00:05:11,039 --> 00:05:16,120
which is kind of cool if uh if you want

128
00:05:13,919 --> 00:05:20,479
to think about that

129
00:05:16,120 --> 00:05:20,479
3400 lines is the first commit

130
00:05:22,240 --> 00:05:29,120
spoiler we're at like 30 000 lines now

131
00:05:25,360 --> 00:05:33,199
so it's it's it's growed a bit

132
00:05:29,120 --> 00:05:36,960
um anyway so basically what we do

133
00:05:33,199 --> 00:05:38,000
uh at that version uh fundamentally what

134
00:05:36,960 --> 00:05:40,638
we do is we we we

135
00:05:38,000 --> 00:05:41,840
put a bridge a linux bridge on each

136
00:05:40,639 --> 00:05:43,440
machine

137
00:05:41,840 --> 00:05:45,520
we connect all the containers on one

138
00:05:43,440 --> 00:05:48,320
machine to the bridge

139
00:05:45,520 --> 00:05:51,599
and then we um we tunnel the packets

140
00:05:48,320 --> 00:05:53,280
from one bridge to another bridge

141
00:05:51,600 --> 00:05:55,039
so that's the kind of the the the

142
00:05:53,280 --> 00:05:56,000
conceptual model taken to an actual

143
00:05:55,039 --> 00:05:59,120
implementation

144
00:05:56,000 --> 00:06:02,319
let's take that down a layer further

145
00:05:59,120 --> 00:06:04,400
um so specifically we we set up uh

146
00:06:02,319 --> 00:06:05,680
a bridge for each container we set up a

147
00:06:04,400 --> 00:06:08,638
beef

148
00:06:05,680 --> 00:06:10,560
ethernet device one end is inside the

149
00:06:08,639 --> 00:06:13,360
container namespace one side is attached

150
00:06:10,560 --> 00:06:18,840
to the bridge in the host

151
00:06:13,360 --> 00:06:21,440
and we listen on that bridge using pcapp

152
00:06:18,840 --> 00:06:24,479
whoa

153
00:06:21,440 --> 00:06:26,080
the room went quiet no seriously we

154
00:06:24,479 --> 00:06:28,080
tested three different ways to do it

155
00:06:26,080 --> 00:06:31,440
like tap devices and whatever

156
00:06:28,080 --> 00:06:34,479
and as at five years ago in go

157
00:06:31,440 --> 00:06:37,680
as it stood uh pcap work best

158
00:06:34,479 --> 00:06:40,000
so um so there it is um

159
00:06:37,680 --> 00:06:41,600
so if you've got uh if you've got two

160
00:06:40,000 --> 00:06:43,039
containers on the same host they're both

161
00:06:41,600 --> 00:06:45,120
attached to the same bridge they'll just

162
00:06:43,039 --> 00:06:47,360
talk to each other other over the bridge

163
00:06:45,120 --> 00:06:48,960
and and and even that doesn't get

164
00:06:47,360 --> 00:06:52,000
involved

165
00:06:48,960 --> 00:06:54,400
um if you have two containers on

166
00:06:52,000 --> 00:06:55,840
different machines uh then we're gonna

167
00:06:54,400 --> 00:06:56,159
pick up those packets we're gonna put

168
00:06:55,840 --> 00:06:59,840
them

169
00:06:56,160 --> 00:07:02,400
in uh another udp packet

170
00:06:59,840 --> 00:07:03,758
um it's kind of homegrown encapsulation

171
00:07:02,400 --> 00:07:04,880
uh and we're gonna send that over the

172
00:07:03,759 --> 00:07:08,720
network

173
00:07:04,880 --> 00:07:09,759
and um uh deliver it to the bridge again

174
00:07:08,720 --> 00:07:11,599
via pcap

175
00:07:09,759 --> 00:07:13,120
packet injection on the other side

176
00:07:11,599 --> 00:07:15,919
deliver it to the bridge

177
00:07:13,120 --> 00:07:18,560
and uh that's gonna end up at its

178
00:07:15,919 --> 00:07:18,560
destination

179
00:07:18,800 --> 00:07:24,639
um this is

180
00:07:22,720 --> 00:07:25,919
i like to call it at least a distributed

181
00:07:24,639 --> 00:07:27,759
ethernet switch it is

182
00:07:25,919 --> 00:07:29,198
we've now implements an ethernet switch

183
00:07:27,759 --> 00:07:32,240
it's a layer 2

184
00:07:29,199 --> 00:07:33,759
network it works purely in terms of mac

185
00:07:32,240 --> 00:07:35,360
addresses

186
00:07:33,759 --> 00:07:37,599
it does what uh what a dom ethernet

187
00:07:35,360 --> 00:07:39,759
switch does it learns mac addresses by

188
00:07:37,599 --> 00:07:42,080
seeing a packet come in

189
00:07:39,759 --> 00:07:43,440
uh and it and it observes the source

190
00:07:42,080 --> 00:07:45,758
address that it came from

191
00:07:43,440 --> 00:07:47,840
and when it later on it has a packet to

192
00:07:45,759 --> 00:07:50,960
send to that destination

193
00:07:47,840 --> 00:07:51,919
it it uses what it learned and it

194
00:07:50,960 --> 00:07:55,198
delivers

195
00:07:51,919 --> 00:07:57,599
the um the packets that way so

196
00:07:55,199 --> 00:07:59,520
so physical ethernet switch is going to

197
00:07:57,599 --> 00:08:01,280
deliver on different cables

198
00:07:59,520 --> 00:08:02,878
we're in software we're going to send to

199
00:08:01,280 --> 00:08:06,479
different hosts

200
00:08:02,879 --> 00:08:08,160
but it's exactly the same uh concept um

201
00:08:06,479 --> 00:08:09,280
and we also have the same fallback

202
00:08:08,160 --> 00:08:12,800
behavior if we don't know where it's

203
00:08:09,280 --> 00:08:16,559
supposed to go send it everywhere

204
00:08:12,800 --> 00:08:16,560
that behavior will come in useful later

205
00:08:19,199 --> 00:08:25,759
this is a real website somebody was kind

206
00:08:22,639 --> 00:08:27,199
i didn't put their smiling face up

207
00:08:25,759 --> 00:08:29,360
somebody was kind enough to make this

208
00:08:27,199 --> 00:08:31,039
website um

209
00:08:29,360 --> 00:08:32,560
pointing out something that we did

210
00:08:31,039 --> 00:08:35,679
actually know

211
00:08:32,559 --> 00:08:37,838
uh but if i if i step back uh can i step

212
00:08:35,679 --> 00:08:37,838
back

213
00:08:38,479 --> 00:08:42,080
yeah okay so yeah the reason it's kind

214
00:08:41,360 --> 00:08:45,040
of slow

215
00:08:42,080 --> 00:08:46,240
is um we start off in user space here in

216
00:08:45,040 --> 00:08:47,360
the program that's trying to get some

217
00:08:46,240 --> 00:08:50,399
work done

218
00:08:47,360 --> 00:08:51,839
uh we go down into the kernel here we go

219
00:08:50,399 --> 00:08:54,640
back up into user space

220
00:08:51,839 --> 00:08:56,480
through pcap we put it in a udp packet

221
00:08:54,640 --> 00:08:58,880
we go down into the kernel again

222
00:08:56,480 --> 00:09:00,640
across the physical network uh and then

223
00:08:58,880 --> 00:09:02,080
do the same thing again we we go like up

224
00:09:00,640 --> 00:09:04,480
down up down up down up down

225
00:09:02,080 --> 00:09:06,000
and it yeah it's kind of slow it's

226
00:09:04,480 --> 00:09:07,600
terribly slow that's

227
00:09:06,000 --> 00:09:08,880
we used to measure it like five years

228
00:09:07,600 --> 00:09:10,160
ago i used to measure at 300

229
00:09:08,880 --> 00:09:13,680
microseconds per

230
00:09:10,160 --> 00:09:16,399
packet extra latency um

231
00:09:13,680 --> 00:09:17,839
and uh now you know you have to set this

232
00:09:16,399 --> 00:09:18,880
aside what are you actually going to do

233
00:09:17,839 --> 00:09:20,160
with those packets if

234
00:09:18,880 --> 00:09:22,560
if the next thing that happens is they

235
00:09:20,160 --> 00:09:23,279
get delivered to a massive heap of php

236
00:09:22,560 --> 00:09:24,959
code

237
00:09:23,279 --> 00:09:26,720
then 300 microseconds is not your

238
00:09:24,959 --> 00:09:29,119
problem um

239
00:09:26,720 --> 00:09:29,920
but uh whatever the the yeah it's kind

240
00:09:29,120 --> 00:09:34,800
of slow okay

241
00:09:29,920 --> 00:09:37,760
so next next step in the evaluation

242
00:09:34,800 --> 00:09:39,199
we implemented uh what we call the fast

243
00:09:37,760 --> 00:09:40,560
data path

244
00:09:39,200 --> 00:09:43,360
because we have no imagination when

245
00:09:40,560 --> 00:09:43,359
thinking of names

246
00:09:43,760 --> 00:09:50,000
um so kind of similar picture

247
00:09:46,880 --> 00:09:52,240
um the packet starts off

248
00:09:50,000 --> 00:09:53,120
uh in a container again we've attached a

249
00:09:52,240 --> 00:09:55,440
v

250
00:09:53,120 --> 00:09:57,200
uh the other end of the v now is in a in

251
00:09:55,440 --> 00:10:00,720
a different device which is a

252
00:09:57,200 --> 00:10:02,800
vswitch data path so this is implemented

253
00:10:00,720 --> 00:10:03,440
by a kernel module from the open vswitch

254
00:10:02,800 --> 00:10:05,199
project

255
00:10:03,440 --> 00:10:06,880
this is the only piece of the open v

256
00:10:05,200 --> 00:10:10,240
switch project that we use

257
00:10:06,880 --> 00:10:11,760
so we're in these kind of these uh demon

258
00:10:10,240 --> 00:10:12,320
processors are basically implementing

259
00:10:11,760 --> 00:10:14,250
our

260
00:10:12,320 --> 00:10:15,360
control plane um

261
00:10:14,250 --> 00:10:17,279
[Music]

262
00:10:15,360 --> 00:10:21,120
independently of open v switch but we're

263
00:10:17,279 --> 00:10:21,120
using their kernel module

264
00:10:21,360 --> 00:10:25,680
so it takes the place of the bridge and

265
00:10:23,120 --> 00:10:28,720
at least in this version of the code

266
00:10:25,680 --> 00:10:29,279
and we add we add a few kind of bridge

267
00:10:28,720 --> 00:10:32,079
like

268
00:10:29,279 --> 00:10:33,360
behaviors to it to get everything we

269
00:10:32,079 --> 00:10:36,880
need out of it

270
00:10:33,360 --> 00:10:39,360
but once a

271
00:10:36,880 --> 00:10:40,560
source destination mac pair has been

272
00:10:39,360 --> 00:10:43,040
seen to be talking

273
00:10:40,560 --> 00:10:43,920
on the container network we we set up a

274
00:10:43,040 --> 00:10:47,439
vxlan

275
00:10:43,920 --> 00:10:49,920
tunnel and that goes kernel to kernel

276
00:10:47,440 --> 00:10:51,200
so the the packets don't do this up down

277
00:10:49,920 --> 00:10:53,439
up down up down

278
00:10:51,200 --> 00:10:54,880
thing they they are encapsulated which

279
00:10:53,440 --> 00:10:57,920
costs you a little bit

280
00:10:54,880 --> 00:11:00,560
um but we used to measure this like on a

281
00:10:57,920 --> 00:11:01,560
on a 10 gigabit network which we thought

282
00:11:00,560 --> 00:11:06,239
was fast in

283
00:11:01,560 --> 00:11:07,760
2015 uh um

284
00:11:06,240 --> 00:11:09,600
on a 10 gigabit network we'd measure

285
00:11:07,760 --> 00:11:13,040
eight gigabits of of throughput

286
00:11:09,600 --> 00:11:14,880
uh you know so it wasn't that bad um

287
00:11:13,040 --> 00:11:16,399
and it's doing encapsulation but it's

288
00:11:14,880 --> 00:11:20,240
it's kernel to kernel

289
00:11:16,399 --> 00:11:22,560
and it's delivered uh to its destination

290
00:11:20,240 --> 00:11:24,560
uh pretty fast uh so the person that did

291
00:11:22,560 --> 00:11:28,000
this was uh mr rag

292
00:11:24,560 --> 00:11:31,119
dr rag i should say almost everybody

293
00:11:28,000 --> 00:11:34,959
that worked on weavenet has a php

294
00:11:31,120 --> 00:11:38,240
a phd except me um

295
00:11:34,959 --> 00:11:40,959
sorry uh yeah so

296
00:11:38,240 --> 00:11:42,880
um like i say i like to put up the

297
00:11:40,959 --> 00:11:46,079
smiling faces um

298
00:11:42,880 --> 00:11:49,279
so that's the the fast data path uh

299
00:11:46,079 --> 00:11:52,800
uh fixed our main kind of

300
00:11:49,279 --> 00:11:54,800
uh obstacle that we had in the

301
00:11:52,800 --> 00:11:57,439
in the marketplace uh which was that it

302
00:11:54,800 --> 00:12:00,399
was kind of slow

303
00:11:57,440 --> 00:12:01,839
um let's talk a bit about how we set all

304
00:12:00,399 --> 00:12:03,920
these things up

305
00:12:01,839 --> 00:12:05,920
uh so you know right from the very

306
00:12:03,920 --> 00:12:08,319
beginning we need a bridge we need vis

307
00:12:05,920 --> 00:12:11,760
we need to step into network namespaces

308
00:12:08,320 --> 00:12:14,480
step out again we need to uh set up some

309
00:12:11,760 --> 00:12:16,160
iptables rules we need to do

310
00:12:14,480 --> 00:12:18,000
set up some cisco you know a bunch of

311
00:12:16,160 --> 00:12:21,120
things we need to do

312
00:12:18,000 --> 00:12:23,360
so how do we do all that in a show

313
00:12:21,120 --> 00:12:26,880
script

314
00:12:23,360 --> 00:12:30,639
um we uh

315
00:12:26,880 --> 00:12:33,839
uh borrowed liberally

316
00:12:30,639 --> 00:12:37,839
um from this project called pipe work uh

317
00:12:33,839 --> 00:12:42,000
uh by jerome pettazzuni

318
00:12:37,839 --> 00:12:44,160
who was a docker at the time i think um

319
00:12:42,000 --> 00:12:46,000
and this project is a is a shell script

320
00:12:44,160 --> 00:12:49,439
it turns out it's it's actually really

321
00:12:46,000 --> 00:12:53,440
uh concise uh to do the kind of ip

322
00:12:49,440 --> 00:12:56,079
nest blah blah stuff um

323
00:12:53,440 --> 00:12:57,200
so so we had our own shell script which

324
00:12:56,079 --> 00:13:00,399
is called weave

325
00:12:57,200 --> 00:13:03,120
uh and it started off

326
00:13:00,399 --> 00:13:04,959
uh 350 lines and it it has these

327
00:13:03,120 --> 00:13:07,760
commands like we've launched and we've

328
00:13:04,959 --> 00:13:10,800
attached and so on

329
00:13:07,760 --> 00:13:12,880
at uh at peak it got up to

330
00:13:10,800 --> 00:13:14,639
two thousand two and a half thousand

331
00:13:12,880 --> 00:13:17,519
lines

332
00:13:14,639 --> 00:13:19,200
it's not a very nice place to be to

333
00:13:17,519 --> 00:13:20,880
maintain a two and a half thousand line

334
00:13:19,200 --> 00:13:24,160
shell script

335
00:13:20,880 --> 00:13:25,839
um so i i sat down and re-implemented a

336
00:13:24,160 --> 00:13:27,680
lot of it into go

337
00:13:25,839 --> 00:13:29,920
uh so it's currently i mean this is the

338
00:13:27,680 --> 00:13:33,120
latest commit it's at uh

339
00:13:29,920 --> 00:13:34,719
1600 lines or so it's um the features

340
00:13:33,120 --> 00:13:36,079
keep getting bigger and the option it

341
00:13:34,720 --> 00:13:37,760
does it works in all kinds of different

342
00:13:36,079 --> 00:13:41,359
modes and so on so that

343
00:13:37,760 --> 00:13:43,439
bloats it but um but one thing is

344
00:13:41,360 --> 00:13:44,639
when recoding from these things in shell

345
00:13:43,440 --> 00:13:47,120
script to go

346
00:13:44,639 --> 00:13:48,240
it the code gets like 50 times bigger

347
00:13:47,120 --> 00:13:52,320
because you know go is

348
00:13:48,240 --> 00:13:52,320
notoriously verbose but

349
00:13:52,399 --> 00:14:01,040
but there we are um so

350
00:13:56,079 --> 00:14:01,040
what else we do encryption um

351
00:14:01,199 --> 00:14:05,439
we do that uh both ways with the fast

352
00:14:04,160 --> 00:14:07,439
data path and the

353
00:14:05,440 --> 00:14:09,519
the slow data path we renamed sleeve

354
00:14:07,440 --> 00:14:10,800
because slow data path didn't seem like

355
00:14:09,519 --> 00:14:13,839
a good

356
00:14:10,800 --> 00:14:16,800
a good branding position corporately

357
00:14:13,839 --> 00:14:18,639
uh uh you know sleeve is a thing that

358
00:14:16,800 --> 00:14:22,000
encapsulates some

359
00:14:18,639 --> 00:14:25,279
i don't know anyway so um

360
00:14:22,000 --> 00:14:28,839
so uh cunning metaphor here uh in

361
00:14:25,279 --> 00:14:32,480
in user space we use the nacl library

362
00:14:28,839 --> 00:14:36,800
um nacl sodium chloride

363
00:14:32,480 --> 00:14:40,480
salt yeah okay uh to do our encryption

364
00:14:36,800 --> 00:14:44,880
um in kernel space uh we use the

365
00:14:40,480 --> 00:14:46,880
xfrm framework and there's a wonderful

366
00:14:44,880 --> 00:14:48,000
uh explanation on that link at the

367
00:14:46,880 --> 00:14:51,279
bottom

368
00:14:48,000 --> 00:14:54,880
all the my new details of how we do this

369
00:14:51,279 --> 00:14:57,600
um one interesting uh tweak

370
00:14:54,880 --> 00:14:58,160
uh we couldn't get this to work at all

371
00:14:57,600 --> 00:15:00,560
for

372
00:14:58,160 --> 00:15:00,560
months

373
00:15:01,360 --> 00:15:06,800
essentially because the the the open v

374
00:15:03,839 --> 00:15:06,800
switch data path

375
00:15:08,320 --> 00:15:14,560
doesn't provide any way to to drive

376
00:15:12,079 --> 00:15:16,638
the the packets through the exopharm

377
00:15:14,560 --> 00:15:18,560
framework we can't set a policy

378
00:15:16,639 --> 00:15:20,880
to say everything on this data path go

379
00:15:18,560 --> 00:15:23,920
through here and

380
00:15:20,880 --> 00:15:27,199
eventually uh the idea how to fix this

381
00:15:23,920 --> 00:15:28,639
we stole from docker

382
00:15:27,199 --> 00:15:30,719
we we put all the packets through an

383
00:15:28,639 --> 00:15:33,920
iptables rule which marks them

384
00:15:30,720 --> 00:15:35,440
and then set a policy on that mark so we

385
00:15:33,920 --> 00:15:36,959
have an iptables rule whose only

386
00:15:35,440 --> 00:15:37,920
function is to glue these two bits of

387
00:15:36,959 --> 00:15:39,839
software together

388
00:15:37,920 --> 00:15:41,759
that otherwise inside the kernel that

389
00:15:39,839 --> 00:15:45,279
otherwise don't play

390
00:15:41,759 --> 00:15:48,480
um and that's kind of

391
00:15:45,279 --> 00:15:51,680
uh a lot of the history of

392
00:15:48,480 --> 00:15:54,000
of this project has been sort of

393
00:15:51,680 --> 00:15:55,040
fighting with things that didn't quite

394
00:15:54,000 --> 00:15:59,360
want to do what

395
00:15:55,040 --> 00:16:01,599
we wanted them to do um

396
00:15:59,360 --> 00:16:03,279
that's uh you know the history is is

397
00:16:01,600 --> 00:16:04,160
there in the code and and some of it i

398
00:16:03,279 --> 00:16:06,570
can remember

399
00:16:04,160 --> 00:16:07,759
but um anyway so we we um

400
00:16:06,570 --> 00:16:10,800
[Music]

401
00:16:07,759 --> 00:16:14,800
we encrypt the packets um

402
00:16:10,800 --> 00:16:19,758
we we're doing key management up here

403
00:16:14,800 --> 00:16:22,959
um we did not roll our own crypto

404
00:16:19,759 --> 00:16:24,720
and yeah some people like that feature

405
00:16:22,959 --> 00:16:26,239
it's it's encrypted on this side it's

406
00:16:24,720 --> 00:16:28,240
encrypted when it hits the

407
00:16:26,240 --> 00:16:30,320
underlying network it's it's not

408
00:16:28,240 --> 00:16:32,800
encrypted here

409
00:16:30,320 --> 00:16:34,320
uh you know so if you have if you've

410
00:16:32,800 --> 00:16:34,800
managed to get onto the machine and you

411
00:16:34,320 --> 00:16:37,839
can

412
00:16:34,800 --> 00:16:38,319
you can uh sniff this v then you'll see

413
00:16:37,839 --> 00:16:42,160
the

414
00:16:38,320 --> 00:16:44,079
plane uh traffic there

415
00:16:42,160 --> 00:16:45,680
but i i always reckon if if you're if

416
00:16:44,079 --> 00:16:47,199
you've got that much access to be on the

417
00:16:45,680 --> 00:16:49,439
machine and sniffing the v

418
00:16:47,199 --> 00:16:51,599
then you probably lost the game already

419
00:16:49,440 --> 00:16:54,639
so

420
00:16:51,600 --> 00:16:57,120
who knows um

421
00:16:54,639 --> 00:16:57,920
what else oh yeah martinez wrote this uh

422
00:16:57,120 --> 00:17:00,399
martinez

423
00:16:57,920 --> 00:17:00,399
did all the

424
00:17:01,199 --> 00:17:05,039
gluing things together at the xfrm level

425
00:17:04,160 --> 00:17:08,240
uh

426
00:17:05,039 --> 00:17:10,400
he now works on psyllium at isovalent

427
00:17:08,240 --> 00:17:15,839
which is which is that vendor

428
00:17:10,400 --> 00:17:19,679
um so that's uh martinez

429
00:17:15,839 --> 00:17:21,280
uh okay so change tack again um

430
00:17:19,679 --> 00:17:23,600
we've that is a is a peer-to-peer

431
00:17:21,280 --> 00:17:25,760
network well the i mean that

432
00:17:23,599 --> 00:17:27,359
the title of this talk is is like no

433
00:17:25,760 --> 00:17:29,360
central point of control

434
00:17:27,359 --> 00:17:30,639
and it's a pun on the management style

435
00:17:29,360 --> 00:17:34,320
um and

436
00:17:30,640 --> 00:17:36,880
the technology we

437
00:17:34,320 --> 00:17:38,480
we wanted it to just be install and run

438
00:17:36,880 --> 00:17:41,679
whether you're running on your laptop

439
00:17:38,480 --> 00:17:43,440
or in the cloud or on 100 hosts or

440
00:17:41,679 --> 00:17:46,720
whatever

441
00:17:43,440 --> 00:17:48,720
and what most people did

442
00:17:46,720 --> 00:17:51,600
to put together a container network was

443
00:17:48,720 --> 00:17:55,200
was they they rely on something like xcd

444
00:17:51,600 --> 00:17:56,240
uh to to be a central consistent store

445
00:17:55,200 --> 00:17:58,799
of what's going on

446
00:17:56,240 --> 00:18:00,240
to to hold all the container information

447
00:17:58,799 --> 00:18:04,320
or the roots or the

448
00:18:00,240 --> 00:18:06,960
whatever and we didn't do that um

449
00:18:04,320 --> 00:18:08,080
uh so we've net is is completely

450
00:18:06,960 --> 00:18:10,080
peer-to-peer

451
00:18:08,080 --> 00:18:13,120
uh you can you can start with one peer

452
00:18:10,080 --> 00:18:17,678
and you can start adding more peers

453
00:18:13,120 --> 00:18:21,918
um they talk to each other via gossip

454
00:18:17,679 --> 00:18:25,039
um so i've given each one a little flag

455
00:18:21,919 --> 00:18:25,760
um each peer has an identity on the

456
00:18:25,039 --> 00:18:28,559
network

457
00:18:25,760 --> 00:18:30,080
and that that peer can be present on the

458
00:18:28,559 --> 00:18:31,840
network or it can go away you know you

459
00:18:30,080 --> 00:18:33,918
can close your laptop and take it on a

460
00:18:31,840 --> 00:18:37,199
plane and open it up again and it'll

461
00:18:33,919 --> 00:18:38,000
still work on the network um so the way

462
00:18:37,200 --> 00:18:41,280
we do that

463
00:18:38,000 --> 00:18:42,160
is all the shared data structures are

464
00:18:41,280 --> 00:18:46,160
implemented as

465
00:18:42,160 --> 00:18:47,760
as crdts as as a eventual consistency

466
00:18:46,160 --> 00:18:49,919
data structures they're they're

467
00:18:47,760 --> 00:18:52,720
specially designed so that we can do

468
00:18:49,919 --> 00:18:54,880
that like somebody can be absent for

469
00:18:52,720 --> 00:18:56,000
any number of hours and come back again

470
00:18:54,880 --> 00:18:59,840
and and the the

471
00:18:56,000 --> 00:19:02,960
data reconciles

472
00:18:59,840 --> 00:19:06,000
it all fits together that is

473
00:19:02,960 --> 00:19:10,799
incredibly hard work

474
00:19:06,000 --> 00:19:12,160
so uh anyway

475
00:19:10,799 --> 00:19:14,240
it has this property that you don't have

476
00:19:12,160 --> 00:19:17,360
to set up xd before you get started

477
00:19:14,240 --> 00:19:20,720
but um but it is very hard work

478
00:19:17,360 --> 00:19:22,959
um we do this for ip address management

479
00:19:20,720 --> 00:19:24,640
as well we do it for several things but

480
00:19:22,960 --> 00:19:27,280
but one of them so we basically take an

481
00:19:24,640 --> 00:19:30,480
ip address space and map it onto a

482
00:19:27,280 --> 00:19:31,678
to a ring uh data like a distributed

483
00:19:30,480 --> 00:19:34,559
hash table type ring

484
00:19:31,679 --> 00:19:35,440
that idea um and then spread that across

485
00:19:34,559 --> 00:19:39,280
the network

486
00:19:35,440 --> 00:19:41,039
and uh and gossip updates to that ring

487
00:19:39,280 --> 00:19:42,960
that's how we why we do ip address

488
00:19:41,039 --> 00:19:45,280
management

489
00:19:42,960 --> 00:19:45,280
um

490
00:19:46,240 --> 00:19:50,720
yeah uh okay i wanted to talk about the

491
00:19:49,840 --> 00:19:54,080
community

492
00:19:50,720 --> 00:19:56,880
a little bit um

493
00:19:54,080 --> 00:19:57,280
so as i uh yeah i think i have a chart

494
00:19:56,880 --> 00:20:00,240
here

495
00:19:57,280 --> 00:20:00,720
so this is the uh when it says installs

496
00:20:00,240 --> 00:20:03,039
this is

497
00:20:00,720 --> 00:20:04,840
what we get a count from docker of the

498
00:20:03,039 --> 00:20:07,520
docker pool

499
00:20:04,840 --> 00:20:10,799
operations um

500
00:20:07,520 --> 00:20:13,360
uh so it's running well over

501
00:20:10,799 --> 00:20:14,879
a million yeah so i mean it was up at

502
00:20:13,360 --> 00:20:17,918
two million this is the one year

503
00:20:14,880 --> 00:20:20,159
the last year two million a week uh down

504
00:20:17,919 --> 00:20:24,000
to about one and a half million a week

505
00:20:20,159 --> 00:20:26,240
um uh we we see this software

506
00:20:24,000 --> 00:20:27,840
fire up a lot we don't as an open source

507
00:20:26,240 --> 00:20:29,600
project we don't have a very good idea

508
00:20:27,840 --> 00:20:33,199
of who's using it

509
00:20:29,600 --> 00:20:35,439
right we you know we don't people

510
00:20:33,200 --> 00:20:36,880
people write in when they have a problem

511
00:20:35,440 --> 00:20:39,600
sometimes

512
00:20:36,880 --> 00:20:40,960
um but they generally don't tell us just

513
00:20:39,600 --> 00:20:41,760
that they're using it and they're happy

514
00:20:40,960 --> 00:20:44,400
with it

515
00:20:41,760 --> 00:20:45,440
um so this is one of the few bits of

516
00:20:44,400 --> 00:20:48,720
evidence we have

517
00:20:45,440 --> 00:20:51,760
uh the thing gets gets uh

518
00:20:48,720 --> 00:20:56,080
fired up in some sense um

519
00:20:51,760 --> 00:20:56,080
a million or two times a week um

520
00:20:56,640 --> 00:21:00,720
uh compared to that we gotta we get very

521
00:20:59,520 --> 00:21:02,799
few prs

522
00:21:00,720 --> 00:21:04,480
um we we get lots of people coming along

523
00:21:02,799 --> 00:21:05,760
and saying things like you know this is

524
00:21:04,480 --> 00:21:08,720
just one i picked on

525
00:21:05,760 --> 00:21:10,158
because it came up recently um and this

526
00:21:08,720 --> 00:21:11,679
is over a period of a year and a half

527
00:21:10,159 --> 00:21:12,480
people complaining about a setting and

528
00:21:11,679 --> 00:21:14,880
saying why isn't

529
00:21:12,480 --> 00:21:16,080
why don't you change the default it's

530
00:21:14,880 --> 00:21:18,799
one line

531
00:21:16,080 --> 00:21:18,799
send a pr

532
00:21:22,159 --> 00:21:29,360
people don't know how maybe yeah uh

533
00:21:25,679 --> 00:21:31,520
um so most of the work

534
00:21:29,360 --> 00:21:32,639
uh has been done by by people being paid

535
00:21:31,520 --> 00:21:35,840
by weave works

536
00:21:32,640 --> 00:21:36,880
um uh this is the the github

537
00:21:35,840 --> 00:21:40,320
contributors

538
00:21:36,880 --> 00:21:42,240
list uh uh fun

539
00:21:40,320 --> 00:21:43,678
fun statistic after being the lead on

540
00:21:42,240 --> 00:21:46,159
this project for five years i'm the

541
00:21:43,679 --> 00:21:49,520
second highest contributor

542
00:21:46,159 --> 00:21:52,880
um matthias radestock

543
00:21:49,520 --> 00:21:54,960
uh who is also ex rabbit mq he was

544
00:21:52,880 --> 00:21:56,400
co-founder of wave works he's still the

545
00:21:54,960 --> 00:21:58,000
number one contributor

546
00:21:56,400 --> 00:21:59,760
but yeah all these people work for we've

547
00:21:58,000 --> 00:22:01,919
worked this this is the

548
00:21:59,760 --> 00:22:03,919
mike bryant is the biggest contributor

549
00:22:01,919 --> 00:22:06,000
who doesn't work for wave works

550
00:22:03,919 --> 00:22:07,440
we do have a kind of long tail of people

551
00:22:06,000 --> 00:22:07,919
who did manage to come up with one or

552
00:22:07,440 --> 00:22:11,120
two

553
00:22:07,919 --> 00:22:13,440
uh prs uh which is great

554
00:22:11,120 --> 00:22:15,199
um and i i would like to encourage that

555
00:22:13,440 --> 00:22:18,559
but um

556
00:22:15,200 --> 00:22:22,400
it is a it is a little bit uh

557
00:22:18,559 --> 00:22:25,678
uh dispiriting when um

558
00:22:22,400 --> 00:22:27,440
uh people just wanna uh kind of complain

559
00:22:25,679 --> 00:22:29,039
um

560
00:22:27,440 --> 00:22:30,880
about about the software and demand that

561
00:22:29,039 --> 00:22:33,919
it does something else

562
00:22:30,880 --> 00:22:35,840
um okay kubernetes this is what you were

563
00:22:33,919 --> 00:22:39,200
promised right this is

564
00:22:35,840 --> 00:22:42,799
the theme of this day uh

565
00:22:39,200 --> 00:22:46,159
so um so even is is quite popular

566
00:22:42,799 --> 00:22:47,280
uh with with kubernetes um i thought i'd

567
00:22:46,159 --> 00:22:48,960
just kind of run through

568
00:22:47,280 --> 00:22:50,639
what does what does that mean exactly

569
00:22:48,960 --> 00:22:51,679
and and what is it doing there and how

570
00:22:50,640 --> 00:22:56,240
does it work

571
00:22:51,679 --> 00:22:59,760
um so um

572
00:22:56,240 --> 00:23:01,440
uh kubernetes uh it doesn't just talk

573
00:22:59,760 --> 00:23:02,240
about container stocks about pods a pod

574
00:23:01,440 --> 00:23:06,000
is a collection of

575
00:23:02,240 --> 00:23:08,640
containers on the same machine um

576
00:23:06,000 --> 00:23:11,039
and so so in in kubernetes world

577
00:23:08,640 --> 00:23:11,919
conceptually the the blue blobs are pods

578
00:23:11,039 --> 00:23:13,200
and but the same

579
00:23:11,919 --> 00:23:15,520
same stuff is going on they're talking

580
00:23:13,200 --> 00:23:17,600
to each other and and kubernetes

581
00:23:15,520 --> 00:23:19,200
has a very small set of rules one of

582
00:23:17,600 --> 00:23:23,840
which is that any pod can talk to any

583
00:23:19,200 --> 00:23:28,559
other pod without going through gnat

584
00:23:23,840 --> 00:23:30,720
and uh funnily enough

585
00:23:28,559 --> 00:23:32,320
the rules the the sort of model the

586
00:23:30,720 --> 00:23:35,520
networking model of kubernetes

587
00:23:32,320 --> 00:23:38,320
matches very well to google's network

588
00:23:35,520 --> 00:23:39,918
so i don't know if we'll ever figure out

589
00:23:38,320 --> 00:23:43,600
how that happened

590
00:23:39,919 --> 00:23:46,159
um but you know what if you run it

591
00:23:43,600 --> 00:23:47,039
uh gk you know google's commercial

592
00:23:46,159 --> 00:23:49,520
kubernetes

593
00:23:47,039 --> 00:23:50,879
um then this thing with the bridges they

594
00:23:49,520 --> 00:23:55,360
just they just have roots

595
00:23:50,880 --> 00:23:57,360
like um ip root layer 3 roots from

596
00:23:55,360 --> 00:23:58,399
machine to machine so they have the same

597
00:23:57,360 --> 00:23:59,439
thing with the bridges

598
00:23:58,400 --> 00:24:00,880
but they don't have they don't have

599
00:23:59,440 --> 00:24:01,600
anything else other than the google

600
00:24:00,880 --> 00:24:05,200
network

601
00:24:01,600 --> 00:24:08,719
to transmit packets between machines

602
00:24:05,200 --> 00:24:10,320
um they just use linux routing and let

603
00:24:08,720 --> 00:24:12,480
the

604
00:24:10,320 --> 00:24:15,439
let the underlying network deliver the

605
00:24:12,480 --> 00:24:19,120
packets to a bridge at the other side

606
00:24:15,440 --> 00:24:21,120
and that just works if you google um

607
00:24:19,120 --> 00:24:22,399
it pretty much doesn't just just work

608
00:24:21,120 --> 00:24:24,799
anywhere else

609
00:24:22,400 --> 00:24:26,480
so uh so there is a need for for

610
00:24:24,799 --> 00:24:28,080
something to take that place

611
00:24:26,480 --> 00:24:29,679
and and weavenet is one of the things

612
00:24:28,080 --> 00:24:33,279
that people sometimes choose to take

613
00:24:29,679 --> 00:24:34,880
that place um

614
00:24:33,279 --> 00:24:36,400
so back around the time this was getting

615
00:24:34,880 --> 00:24:39,840
popular which is about

616
00:24:36,400 --> 00:24:42,960
uh four years ago now um

617
00:24:39,840 --> 00:24:43,439
uh the project uh rocket uh which came

618
00:24:42,960 --> 00:24:45,120
out of

619
00:24:43,440 --> 00:24:47,520
core os which was kind of a competitor

620
00:24:45,120 --> 00:24:50,479
to docker

621
00:24:47,520 --> 00:24:50,960
they had uh they had this very simple

622
00:24:50,480 --> 00:24:52,640
model

623
00:24:50,960 --> 00:24:54,240
for network interfaces where they would

624
00:24:52,640 --> 00:24:57,679
exec a process

625
00:24:54,240 --> 00:25:02,799
that uh would add a network interface

626
00:24:57,679 --> 00:25:02,799
so that became uh cni essentially

627
00:25:03,440 --> 00:25:06,799
essentially some people including weave

628
00:25:06,240 --> 00:25:10,000
workers

629
00:25:06,799 --> 00:25:14,240
got in a room and and said yeah

630
00:25:10,000 --> 00:25:15,840
that should work um and uh

631
00:25:14,240 --> 00:25:17,440
and it got it got named and it got

632
00:25:15,840 --> 00:25:21,360
turned into a project and i am

633
00:25:17,440 --> 00:25:23,200
i'm a maintainer of the cni project um

634
00:25:21,360 --> 00:25:24,719
uh but it the cni is supposed to be

635
00:25:23,200 --> 00:25:29,520
really really thin i just thought i'd

636
00:25:24,720 --> 00:25:32,159
walk through what exactly that is

637
00:25:29,520 --> 00:25:33,039
uh so cni is is not coupled to

638
00:25:32,159 --> 00:25:35,600
kubernetes

639
00:25:33,039 --> 00:25:36,799
it it is like i said it came from rocket

640
00:25:35,600 --> 00:25:39,760
uh it's completely

641
00:25:36,799 --> 00:25:42,320
independent of network and what we call

642
00:25:39,760 --> 00:25:44,158
a runtime so kubernetes is a is in the

643
00:25:42,320 --> 00:25:45,200
place of a thing we call the runtime in

644
00:25:44,159 --> 00:25:49,039
cni

645
00:25:45,200 --> 00:25:50,640
speak um and physically it's the the bit

646
00:25:49,039 --> 00:25:52,000
of kubernetes called the cubelet which

647
00:25:50,640 --> 00:25:55,360
is the bit that runs on

648
00:25:52,000 --> 00:25:58,720
uh on each node um

649
00:25:55,360 --> 00:26:00,959
so the cubelet calls a cni plugin

650
00:25:58,720 --> 00:26:02,000
and it calls it right now the interface

651
00:26:00,960 --> 00:26:05,440
is is exec

652
00:26:02,000 --> 00:26:09,120
exact same process in the in the host

653
00:26:05,440 --> 00:26:12,720
host namespace not in a container um

654
00:26:09,120 --> 00:26:14,479
it supplies a json config which lists a

655
00:26:12,720 --> 00:26:15,600
few things out like maybe which subnet

656
00:26:14,480 --> 00:26:16,880
you're supposed to be using something

657
00:26:15,600 --> 00:26:20,480
like that

658
00:26:16,880 --> 00:26:21,919
um uh the plugin then talks i mean

659
00:26:20,480 --> 00:26:23,919
conceptually

660
00:26:21,919 --> 00:26:25,039
conceptually you've got a network some

661
00:26:23,919 --> 00:26:27,200
you know somebody showed up with a

662
00:26:25,039 --> 00:26:30,080
network you you bought one from

663
00:26:27,200 --> 00:26:31,120
uh juniper or you installed we've net or

664
00:26:30,080 --> 00:26:34,320
you're using psyllium

665
00:26:31,120 --> 00:26:35,918
or whatever um somebody's got a network

666
00:26:34,320 --> 00:26:38,720
so the job of the plug-in is just to be

667
00:26:35,919 --> 00:26:42,000
that little bit of glue in between

668
00:26:38,720 --> 00:26:44,720
to interpret this json spec and to

669
00:26:42,000 --> 00:26:46,480
cause the network to attach itself to a

670
00:26:44,720 --> 00:26:51,279
container

671
00:26:46,480 --> 00:26:55,279
so that's uh that's the idea of the cni

672
00:26:51,279 --> 00:26:58,320
project um and i i think it's it's

673
00:26:55,279 --> 00:27:00,480
uh it's worked fairly well in in its

674
00:26:58,320 --> 00:27:02,080
goal of of being agnostic and kind of

675
00:27:00,480 --> 00:27:05,279
staying out the way of people

676
00:27:02,080 --> 00:27:07,360
um i do quite often hear uh complaints

677
00:27:05,279 --> 00:27:07,919
that cni doesn't do this and cni doesn't

678
00:27:07,360 --> 00:27:11,199
do that

679
00:27:07,919 --> 00:27:12,640
and the unfortunate news is it's it's

680
00:27:11,200 --> 00:27:15,600
never going to do those things because

681
00:27:12,640 --> 00:27:18,960
it's trying to be the thinnest possible

682
00:27:15,600 --> 00:27:20,639
layer that could work for everybody

683
00:27:18,960 --> 00:27:22,480
uh this is jason if you want to say

684
00:27:20,640 --> 00:27:26,399
extra things in jason just add them

685
00:27:22,480 --> 00:27:26,399
just like party on

686
00:27:26,480 --> 00:27:32,559
just add fields um

687
00:27:29,840 --> 00:27:34,399
okay that's cni uh uh how do we get

688
00:27:32,559 --> 00:27:38,320
weavnet installed so i just mentioned

689
00:27:34,399 --> 00:27:41,360
um the plugin runs in the host

690
00:27:38,320 --> 00:27:43,039
as a process on the host uh and

691
00:27:41,360 --> 00:27:44,479
and everything we're talking about is

692
00:27:43,039 --> 00:27:47,840
containers

693
00:27:44,480 --> 00:27:49,440
uh you know which are isolated

694
00:27:47,840 --> 00:27:51,279
so we get that we get around that by

695
00:27:49,440 --> 00:27:54,399
devious trickery um

696
00:27:51,279 --> 00:27:57,440
we we mount a directory off the host and

697
00:27:54,399 --> 00:27:58,719
start when we've net starts up it copies

698
00:27:57,440 --> 00:28:02,480
the file into the host

699
00:27:58,720 --> 00:28:06,159
directory so now it's in the host um

700
00:28:02,480 --> 00:28:07,679
i as far as i know i invented this trick

701
00:28:06,159 --> 00:28:10,559
but everyone does this now so maybe i

702
00:28:07,679 --> 00:28:13,360
copied it from someone else

703
00:28:10,559 --> 00:28:14,399
tell me at the end if it was your idea

704
00:28:13,360 --> 00:28:16,399
um

705
00:28:14,399 --> 00:28:17,918
yeah so so kubernetes has this concept

706
00:28:16,399 --> 00:28:20,080
of a demon set

707
00:28:17,919 --> 00:28:22,159
uh which basically means run the same

708
00:28:20,080 --> 00:28:24,559
thing on one on every node

709
00:28:22,159 --> 00:28:25,360
um and restart it if it dies that kind

710
00:28:24,559 --> 00:28:28,799
of thing

711
00:28:25,360 --> 00:28:30,399
uh so that's how we we fire up we just

712
00:28:28,799 --> 00:28:33,279
we arrange for someone to ask for that

713
00:28:30,399 --> 00:28:36,000
demon set um

714
00:28:33,279 --> 00:28:37,039
that fires up a copy of our software on

715
00:28:36,000 --> 00:28:41,279
every node

716
00:28:37,039 --> 00:28:44,799
uh we do this trick with um

717
00:28:41,279 --> 00:28:46,960
copying a file onto the host uh

718
00:28:44,799 --> 00:28:48,960
and now we're away so you know cubelet

719
00:28:46,960 --> 00:28:51,919
is now gonna gonna call the plugin

720
00:28:48,960 --> 00:28:52,640
plugins gonna call uh backup into the

721
00:28:51,919 --> 00:28:57,120
daemon

722
00:28:52,640 --> 00:29:00,159
and um uh that's how that all works

723
00:28:57,120 --> 00:29:03,840
um i'm i

724
00:29:00,159 --> 00:29:05,520
observed about uh

725
00:29:03,840 --> 00:29:08,240
not having any kind of central

726
00:29:05,520 --> 00:29:11,600
consistent idea of what's going on

727
00:29:08,240 --> 00:29:13,120
and and of course in in kubernetes you

728
00:29:11,600 --> 00:29:15,199
have exactly that you have a

729
00:29:13,120 --> 00:29:16,320
the the central what's called the api

730
00:29:15,200 --> 00:29:17,679
server does know

731
00:29:16,320 --> 00:29:19,360
everything that's going on in a

732
00:29:17,679 --> 00:29:22,960
kubernetes cluster

733
00:29:19,360 --> 00:29:24,479
um and so a few times we thought about

734
00:29:22,960 --> 00:29:26,960
about abandoning the uh

735
00:29:24,480 --> 00:29:28,799
eventually consistent stuff and just

736
00:29:26,960 --> 00:29:30,399
rely on

737
00:29:28,799 --> 00:29:33,039
on what kubernetes is telling us which

738
00:29:30,399 --> 00:29:38,000
is what everyone else does

739
00:29:33,039 --> 00:29:38,000
and never quite got around to doing that

740
00:29:38,320 --> 00:29:42,559
anyway it's an idea if you want to

741
00:29:40,080 --> 00:29:46,240
submit a pr that'd be great

742
00:29:42,559 --> 00:29:48,720
uh we do we implement um kubernetes

743
00:29:46,240 --> 00:29:50,159
uh network policy which was mentioned if

744
00:29:48,720 --> 00:29:51,039
you were in a couple of the previous

745
00:29:50,159 --> 00:29:54,559
talks so

746
00:29:51,039 --> 00:29:56,799
like saying who's allowed to talk to who

747
00:29:54,559 --> 00:29:58,080
we do that by relying on what kubernetes

748
00:29:56,799 --> 00:29:59,440
tells us because you know

749
00:29:58,080 --> 00:30:01,199
it's the only thing that knows all the

750
00:29:59,440 --> 00:30:04,799
labels on different things

751
00:30:01,200 --> 00:30:06,720
um and and somewhat excitingly the

752
00:30:04,799 --> 00:30:08,399
the network is implemented at layer two

753
00:30:06,720 --> 00:30:09,840
and the network policy is implemented at

754
00:30:08,399 --> 00:30:11,760
layer three

755
00:30:09,840 --> 00:30:13,039
um and they they essentially have no

756
00:30:11,760 --> 00:30:14,799
connection between them we just run them

757
00:30:13,039 --> 00:30:17,120
as two separate processes in the in the

758
00:30:14,799 --> 00:30:20,158
same pod

759
00:30:17,120 --> 00:30:20,479
anywho um is that all i wanted to say uh

760
00:30:20,159 --> 00:30:23,120
just

761
00:30:20,480 --> 00:30:24,000
skip over that yeah that's uh that's uh

762
00:30:23,120 --> 00:30:25,840
pretty much

763
00:30:24,000 --> 00:30:28,240
what i wanted to say does anyone have

764
00:30:25,840 --> 00:30:31,520
any questions

765
00:30:28,240 --> 00:30:34,799
yes i used before so

766
00:30:31,520 --> 00:30:36,559
i'm gonna say it's super simple but i

767
00:30:34,799 --> 00:30:39,360
i changed from weave at some point

768
00:30:36,559 --> 00:30:41,600
because it doesn't support ipv6

769
00:30:39,360 --> 00:30:42,639
uh okay so well that's not a question

770
00:30:41,600 --> 00:30:45,279
that's an observation

771
00:30:42,640 --> 00:30:46,640
um but the the the observation was that

772
00:30:45,279 --> 00:30:48,320
i

773
00:30:46,640 --> 00:30:52,000
oh okay do we have any plans to support

774
00:30:48,320 --> 00:30:52,000
ipv6 um

775
00:30:52,320 --> 00:30:56,639
so we'venet has has no support for for

776
00:30:55,039 --> 00:30:59,760
ipv6 in two ways

777
00:30:56,640 --> 00:31:02,480
um it doesn't support ipv6 inside the

778
00:30:59,760 --> 00:31:04,080
overlay and it doesn't support ipv6 as a

779
00:31:02,480 --> 00:31:05,919
target on the underlying network so

780
00:31:04,080 --> 00:31:08,799
which of those two did you want

781
00:31:05,919 --> 00:31:08,799
you wanted both of them

782
00:31:09,440 --> 00:31:14,799
uh and may may i ask a question um

783
00:31:12,480 --> 00:31:16,559
i mean the whole point of of overlay

784
00:31:14,799 --> 00:31:18,320
networks generally is that you have some

785
00:31:16,559 --> 00:31:21,440
problem that stops you just rooting

786
00:31:18,320 --> 00:31:22,320
across from one container to another and

787
00:31:21,440 --> 00:31:25,279
that problem is

788
00:31:22,320 --> 00:31:26,320
very often an addressing problem in ipv4

789
00:31:25,279 --> 00:31:28,799
um

790
00:31:26,320 --> 00:31:30,879
so do you know what what problem in ipv6

791
00:31:28,799 --> 00:31:32,158
you're solving by having a

792
00:31:30,880 --> 00:31:33,919
like why can't you just root between the

793
00:31:32,159 --> 00:31:36,399
two containers

794
00:31:33,919 --> 00:31:38,240
well if you have some uh some bodies

795
00:31:36,399 --> 00:31:42,639
that you need to expose them directly

796
00:31:38,240 --> 00:31:46,399
outside so you need them to be directly

797
00:31:42,640 --> 00:31:50,080
exposed okay so you said your answer

798
00:31:46,399 --> 00:31:50,080
your point was that you need some pods

799
00:31:53,919 --> 00:31:59,679
now my suggestion is that all pods can

800
00:31:56,000 --> 00:32:01,200
have globally reachable ipv6 addresses

801
00:31:59,679 --> 00:32:03,200
so you so you don't need anything else

802
00:32:01,200 --> 00:32:06,880
you don't need me to write any

803
00:32:03,200 --> 00:32:06,880
code because ipv6 will solve your

804
00:32:12,840 --> 00:32:15,360
problems

805
00:32:14,240 --> 00:32:17,760
all right well i think we have to take

806
00:32:15,360 --> 00:32:21,439
that offline uh

807
00:32:17,760 --> 00:32:23,440
yeah i mean you know bottom line um

808
00:32:21,440 --> 00:32:26,559
nobody did why doesn't it support ibv6

809
00:32:23,440 --> 00:32:26,559
because nobody did the work

810
00:32:26,840 --> 00:32:32,158
um it's an open source project

811
00:32:29,679 --> 00:32:33,600
um we've worked as a company found

812
00:32:32,159 --> 00:32:35,120
something much more exciting to do which

813
00:32:33,600 --> 00:32:38,000
is called gitops

814
00:32:35,120 --> 00:32:39,039
and you should all buy that uh we we

815
00:32:38,000 --> 00:32:42,720
never managed to

816
00:32:39,039 --> 00:32:45,120
uh monetize weave net

817
00:32:42,720 --> 00:32:46,559
we never made an enterprise version uh

818
00:32:45,120 --> 00:32:48,879
and we never

819
00:32:46,559 --> 00:32:50,639
we never found anyone that was for

820
00:32:48,880 --> 00:32:54,240
instance willing to pay us enough money

821
00:32:50,640 --> 00:32:54,240
to do an ipv6 implementation

822
00:32:54,960 --> 00:33:00,159
now thank you for the question any more

823
00:32:57,519 --> 00:33:00,159
one over here

824
00:33:05,679 --> 00:33:08,880
uh question is what was the contract

825
00:33:07,200 --> 00:33:11,760
race condition

826
00:33:08,880 --> 00:33:13,279
uh so i should put martinez's smiling

827
00:33:11,760 --> 00:33:15,360
face up

828
00:33:13,279 --> 00:33:17,360
uh oh i'm pressing on the wrong button

829
00:33:15,360 --> 00:33:20,479
to put martinez up

830
00:33:17,360 --> 00:33:22,158
um uh

831
00:33:20,480 --> 00:33:24,080
so in particular that that link at the

832
00:33:22,159 --> 00:33:27,840
bottom is not the right one to look for

833
00:33:24,080 --> 00:33:31,840
i i should have changed that sorry um

834
00:33:27,840 --> 00:33:32,879
uh okay the um

835
00:33:31,840 --> 00:33:34,799
i'm just trying to see if i can give you

836
00:33:32,880 --> 00:33:36,320
a short explanation of this basically it

837
00:33:34,799 --> 00:33:39,840
shows up when doing

838
00:33:36,320 --> 00:33:42,639
dns requests uh

839
00:33:39,840 --> 00:33:44,959
particularly on kubernetes particularly

840
00:33:42,640 --> 00:33:47,679
using the muzzle

841
00:33:44,960 --> 00:33:47,679
c library

842
00:33:48,399 --> 00:33:56,479
and what happens is uh it it does um

843
00:33:52,640 --> 00:34:00,240
uh two requests at exactly the same time

844
00:33:56,480 --> 00:34:01,519
for the a record and the 4a record

845
00:34:00,240 --> 00:34:03,440
notwithstanding the fact that we don't

846
00:34:01,519 --> 00:34:07,200
support ipv6

847
00:34:03,440 --> 00:34:10,159
um the the uh

848
00:34:07,200 --> 00:34:11,760
uh the two dns requests go out from the

849
00:34:10,159 --> 00:34:13,839
same source address to the same

850
00:34:11,760 --> 00:34:16,240
destination address source same source

851
00:34:13,839 --> 00:34:19,679
port same destination port

852
00:34:16,239 --> 00:34:20,399
um and uh they hit a race condition in

853
00:34:19,679 --> 00:34:23,599
contract

854
00:34:20,399 --> 00:34:23,598
and one of them gets dropped

855
00:34:25,679 --> 00:34:31,040
no it's fixed in the linux kernel

856
00:34:28,879 --> 00:34:32,319
yeah like i say we we spent most of our

857
00:34:31,040 --> 00:34:33,918
time not

858
00:34:32,320 --> 00:34:34,960
not on our own software we spent most of

859
00:34:33,918 --> 00:34:36,319
our time fighting other people's

860
00:34:34,960 --> 00:34:39,679
software including linux

861
00:34:36,320 --> 00:34:41,839
and uh and um

862
00:34:39,679 --> 00:34:44,079
and in some cases fixing it uh so that

863
00:34:41,839 --> 00:34:46,960
yeah so martinez wrote two patches

864
00:34:44,079 --> 00:34:48,159
uh he found three three race conditions

865
00:34:46,960 --> 00:34:51,520
he wrote two patches

866
00:34:48,159 --> 00:34:53,520
to fix two of the race conditions um

867
00:34:51,520 --> 00:34:54,639
so this is a this is a you you can

868
00:34:53,520 --> 00:34:56,800
google like

869
00:34:54,639 --> 00:35:00,839
uh why why do i see a mysterious

870
00:34:56,800 --> 00:35:03,440
five-second delay in my kubernetes

871
00:35:00,839 --> 00:35:05,119
system so this is not the only reason

872
00:35:03,440 --> 00:35:06,160
why people see mysterious five-second

873
00:35:05,119 --> 00:35:08,000
delays

874
00:35:06,160 --> 00:35:09,440
uh but it's it's certainly a very

875
00:35:08,000 --> 00:35:12,720
popular one

876
00:35:09,440 --> 00:35:16,240
um the the the uh the nature of the

877
00:35:12,720 --> 00:35:16,959
the requests um uh they are from the

878
00:35:16,240 --> 00:35:18,640
same

879
00:35:16,960 --> 00:35:21,040
source address same destination address

880
00:35:18,640 --> 00:35:22,640
same source port same destination port

881
00:35:21,040 --> 00:35:24,480
and contract does not know how to deal

882
00:35:22,640 --> 00:35:31,839
with that

883
00:35:24,480 --> 00:35:31,839
yeah well i'm time's up thank you

884
00:35:40,400 --> 00:35:42,480
you

