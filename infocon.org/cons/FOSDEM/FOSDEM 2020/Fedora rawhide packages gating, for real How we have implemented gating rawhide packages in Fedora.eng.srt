1
00:00:15,360 --> 00:00:17,919
hi

2
00:00:18,640 --> 00:00:21,680
welcome to the positive 2020

3
00:00:20,240 --> 00:00:23,599
distribution discovery

4
00:00:21,680 --> 00:00:26,800
our next talk is going to be on fedora

5
00:00:23,600 --> 00:00:30,560
package we're all high package dating

6
00:00:26,800 --> 00:00:31,920
here so this being the last thought of

7
00:00:30,560 --> 00:00:34,079
the last day because i'm

8
00:00:31,920 --> 00:00:35,120
very thankful for everyone to be present

9
00:00:34,079 --> 00:00:37,600
in the room

10
00:00:35,120 --> 00:00:38,399
uh so we are going to be speaking about

11
00:00:37,600 --> 00:00:40,320
uh

12
00:00:38,399 --> 00:00:42,800
preservation of which is the right

13
00:00:40,320 --> 00:00:45,680
branch and how we've implemented

14
00:00:42,800 --> 00:00:45,680
getting packages

15
00:00:46,160 --> 00:00:49,199
i'm not going to go to the mechanisms of

16
00:00:48,640 --> 00:00:51,680
what

17
00:00:49,200 --> 00:00:53,360
we get now the idea is not to go into

18
00:00:51,680 --> 00:00:54,800
which tests are used to make a decision

19
00:00:53,360 --> 00:00:55,519
about whether the package should go

20
00:00:54,800 --> 00:00:56,640
through or not

21
00:00:55,520 --> 00:00:59,600
but i'm going to run through the

22
00:00:56,640 --> 00:01:01,520
mechanism that replaces

23
00:00:59,600 --> 00:01:02,960
the architectural mechanisms that we

24
00:01:01,520 --> 00:01:13,840
have put in place

25
00:01:02,960 --> 00:01:13,840
to be able to get into uh

26
00:01:23,119 --> 00:01:27,280
so i don't know how much of the federal

27
00:01:39,040 --> 00:01:42,560
that we are trying to face or some of

28
00:01:40,720 --> 00:01:46,079
the constraints

29
00:01:42,560 --> 00:01:48,960
and projects uh wake up now

30
00:01:46,079 --> 00:01:50,479
uh what's the studies of things or you

31
00:01:48,960 --> 00:01:52,079
can debug

32
00:01:50,479 --> 00:01:55,280
you know try to see if you can unlock

33
00:01:52,079 --> 00:01:55,279
yourself if you're interested

34
00:01:56,560 --> 00:02:00,479
you know i don't want to put a this is a

35
00:01:58,960 --> 00:02:01,520
great presentation everything's working

36
00:02:00,479 --> 00:02:04,000
great

37
00:02:01,520 --> 00:02:09,840
so there shouldn't be inside but you

38
00:02:04,000 --> 00:02:09,840
know things

39
00:02:20,840 --> 00:02:23,840
uh

40
00:02:31,680 --> 00:02:37,840
what is

41
00:02:47,760 --> 00:02:51,920
it has new packages coming in and

42
00:02:49,840 --> 00:02:55,760
everything interacts in our

43
00:02:51,920 --> 00:02:55,760
height before it turns to several ways

44
00:02:56,319 --> 00:03:00,079
then we have how does the packager work

45
00:02:58,720 --> 00:03:02,480
for works

46
00:03:00,080 --> 00:03:04,959
there's something what we call this kit

47
00:03:02,480 --> 00:03:07,200
and this is basically a

48
00:03:04,959 --> 00:03:09,200
term that we use for two things it's a

49
00:03:07,200 --> 00:03:12,640
collection of each representatives

50
00:03:09,200 --> 00:03:14,799
every single package in general

51
00:03:12,640 --> 00:03:16,720
every single package in fedora as the

52
00:03:14,800 --> 00:03:18,720
corresponding teach repositories

53
00:03:16,720 --> 00:03:20,159
in which the the packager are

54
00:03:18,720 --> 00:03:22,959
maintaining spec file

55
00:03:20,159 --> 00:03:22,959
and the patches

56
00:03:23,360 --> 00:03:27,120
it's also like a web service

57
00:03:30,080 --> 00:03:42,640
so is also a guitar string platform it's

58
00:03:33,280 --> 00:03:42,640
kind of a platform

59
00:03:44,840 --> 00:03:48,319
limitations

60
00:03:46,239 --> 00:03:49,440
they are playing the triples the what

61
00:03:48,319 --> 00:03:51,280
sits on the top of it

62
00:03:49,440 --> 00:03:52,720
is a web interface that we have designed

63
00:03:51,280 --> 00:03:54,640
to sit on the top of it

64
00:03:52,720 --> 00:03:55,840
but the the core infrastructure is

65
00:03:54,640 --> 00:03:58,559
basically two elements

66
00:03:55,840 --> 00:04:00,799
it's a basic git server and what we call

67
00:03:58,560 --> 00:04:02,480
the leukocyte cache where the packager

68
00:04:00,799 --> 00:04:04,799
uploads the tables from the option

69
00:04:02,480 --> 00:04:06,399
projects so there is a it's really a

70
00:04:04,799 --> 00:04:07,519
collection of the triple it's not a

71
00:04:06,400 --> 00:04:09,519
central one

72
00:04:07,519 --> 00:04:14,879
and uh each of one each one is different

73
00:04:09,519 --> 00:04:18,239
but it's painted underneath

74
00:04:14,879 --> 00:04:18,798
sure uh there are some limitations but

75
00:04:18,238 --> 00:04:20,719
they are

76
00:04:18,798 --> 00:04:21,918
uh you can't false push for example if

77
00:04:20,720 --> 00:04:24,320
that's what you're uh

78
00:04:21,918 --> 00:04:25,359
thinking about but these are

79
00:04:24,320 --> 00:04:27,280
configurations

80
00:04:25,360 --> 00:04:28,479
that you can do to any git repositories

81
00:04:27,280 --> 00:04:31,599
not specific to uh

82
00:04:28,479 --> 00:04:34,080
our department there then we have

83
00:04:31,600 --> 00:04:36,000
the so once you have your git trip or

84
00:04:34,080 --> 00:04:37,199
your disk repo you have your specs

85
00:04:36,000 --> 00:04:39,680
patches you have

86
00:04:37,199 --> 00:04:41,280
the sources from upstream and federer

87
00:04:39,680 --> 00:04:42,800
uses a build system so everything that

88
00:04:41,280 --> 00:04:45,280
is shipped in federer is built

89
00:04:42,800 --> 00:04:45,840
in a control environment which is called

90
00:04:45,280 --> 00:04:49,119
then

91
00:04:45,840 --> 00:04:51,280
in our case uh koji so that's where

92
00:04:49,120 --> 00:04:52,639
everything is built and bills are

93
00:04:51,280 --> 00:04:54,719
managed with tags

94
00:04:52,639 --> 00:04:56,000
so the building certain tag is in a

95
00:04:54,720 --> 00:04:58,479
certain state if you reach

96
00:04:56,000 --> 00:04:59,840
a certain if you move to the next tag

97
00:04:58,479 --> 00:05:00,960
it's moved to the next state so

98
00:04:59,840 --> 00:05:01,840
basically the tags will give you a

99
00:05:00,960 --> 00:05:03,919
little bit of the

100
00:05:01,840 --> 00:05:06,000
the state of the package if it's in the

101
00:05:03,919 --> 00:05:07,840
you know f32 tag that means it's

102
00:05:06,000 --> 00:05:10,479
available in the build roots for rawhide

103
00:05:07,840 --> 00:05:12,320
at moments which is still a footage

104
00:05:10,479 --> 00:05:14,000
um something that we're going to come

105
00:05:12,320 --> 00:05:14,800
back with is uh they are called site

106
00:05:14,000 --> 00:05:16,639
tags

107
00:05:14,800 --> 00:05:18,639
they are basically tags which are

108
00:05:16,639 --> 00:05:21,199
sitting on next to the the usual

109
00:05:18,639 --> 00:05:23,360
main ones uh and they are used to be

110
00:05:21,199 --> 00:05:24,560
able to do work without impacting the

111
00:05:23,360 --> 00:05:26,639
the main tags

112
00:05:24,560 --> 00:05:28,479
uh so they are isolated from the other

113
00:05:26,639 --> 00:05:30,240
but they rely on the base tag

114
00:05:28,479 --> 00:05:32,000
so there is a gear key between the tags

115
00:05:30,240 --> 00:05:33,919
so the you have the base target then

116
00:05:32,000 --> 00:05:35,680
the one the other one sits on the top of

117
00:05:33,919 --> 00:05:37,440
it so

118
00:05:35,680 --> 00:05:38,960
the lower down you can always access to

119
00:05:37,440 --> 00:05:42,320
types which aren't an issue but you

120
00:05:38,960 --> 00:05:42,320
can't access to tag which however

121
00:05:43,520 --> 00:05:46,719
then we have our update system once we

122
00:05:45,280 --> 00:05:48,479
have made a build

123
00:05:46,720 --> 00:05:50,000
we can say well i want this build to go

124
00:05:48,479 --> 00:05:51,520
up to the users

125
00:05:50,000 --> 00:05:53,840
this is handled by an application called

126
00:05:51,520 --> 00:05:54,240
body and basically every packager gets

127
00:05:53,840 --> 00:05:55,919
to

128
00:05:54,240 --> 00:05:57,680
choose well that application goes to the

129
00:05:55,919 --> 00:05:58,479
user that update does not go to the

130
00:05:57,680 --> 00:06:00,240
users

131
00:05:58,479 --> 00:06:02,639
that is true for every stable federal

132
00:06:00,240 --> 00:06:04,319
releases that is not true for her hide

133
00:06:02,639 --> 00:06:07,120
in raw heights as soon as you build

134
00:06:04,319 --> 00:06:08,960
something it's going to go to right

135
00:06:07,120 --> 00:06:10,240
so there may be bills which are wasted

136
00:06:08,960 --> 00:06:12,560
there may be builds that

137
00:06:10,240 --> 00:06:14,479
would not need to go to the users but

138
00:06:12,560 --> 00:06:16,720
the mechanism of light has always been

139
00:06:14,479 --> 00:06:18,560
if you build it it goes to arrive in

140
00:06:16,720 --> 00:06:20,160
simple releases you can build it and say

141
00:06:18,560 --> 00:06:21,120
well actually no i don't want to push

142
00:06:20,160 --> 00:06:23,199
this one

143
00:06:21,120 --> 00:06:24,160
one of the one of the aspect there as

144
00:06:23,199 --> 00:06:26,479
well is also

145
00:06:24,160 --> 00:06:28,000
if i push something and then i realize

146
00:06:26,479 --> 00:06:29,440
it's broken i can then push it

147
00:06:28,000 --> 00:06:31,520
up to a certain point so it does not

148
00:06:29,440 --> 00:06:35,039
affect our users until we are

149
00:06:31,520 --> 00:06:38,159
kind of sure that it won't affect

150
00:06:35,039 --> 00:06:39,599
we have an mqp based message bus called

151
00:06:38,160 --> 00:06:41,199
federal messaging

152
00:06:39,600 --> 00:06:43,520
well federer messaging is basically a

153
00:06:41,199 --> 00:06:45,759
wrapper around mqp

154
00:06:43,520 --> 00:06:47,198
to make up to make it easy to send

155
00:06:45,759 --> 00:06:49,280
message on the bus

156
00:06:47,199 --> 00:06:50,560
that is very used for making the

157
00:06:49,280 --> 00:06:51,359
different applications talk to each

158
00:06:50,560 --> 00:06:53,039
other so

159
00:06:51,360 --> 00:06:54,960
whether you will listen to messages from

160
00:06:53,039 --> 00:06:57,599
koji koji may react to

161
00:06:54,960 --> 00:06:59,680
messages from another source and so on

162
00:06:57,599 --> 00:07:02,960
and finally we have something called the

163
00:06:59,680 --> 00:07:04,000
robot signatory listens to the messages

164
00:07:02,960 --> 00:07:06,719
coming from the bus

165
00:07:04,000 --> 00:07:08,000
coming from a tv from koji and it will

166
00:07:06,720 --> 00:07:11,039
so every time there is a build

167
00:07:08,000 --> 00:07:13,520
it will be notified of it sign

168
00:07:11,039 --> 00:07:15,680
get the rpm sign the rpm and move the

169
00:07:13,520 --> 00:07:17,758
bill to us to the next tag in uh in

170
00:07:15,680 --> 00:07:21,039
country

171
00:07:17,759 --> 00:07:24,400
so what do we want to get rawhide well

172
00:07:21,039 --> 00:07:26,000
simply roy is a place which is uh

173
00:07:24,400 --> 00:07:27,599
i think that's true fairly well known in

174
00:07:26,000 --> 00:07:30,160
the federal community to be something

175
00:07:27,599 --> 00:07:31,919
which is not stable

176
00:07:30,160 --> 00:07:33,759
i don't think that's so much that's

177
00:07:31,919 --> 00:07:36,400
wrong to say that

178
00:07:33,759 --> 00:07:37,120
it is not it is wrong however to accept

179
00:07:36,400 --> 00:07:38,880
this

180
00:07:37,120 --> 00:07:40,560
there is no reason why rawhide shouldn't

181
00:07:38,880 --> 00:07:42,319
be stable the only reason why

182
00:07:40,560 --> 00:07:44,319
we allow right to not be stable is

183
00:07:42,319 --> 00:07:45,360
because we don't have ways of grouping

184
00:07:44,319 --> 00:07:48,639
changes

185
00:07:45,360 --> 00:07:49,440
so if if i build something and it dumps

186
00:07:48,639 --> 00:07:50,720
the surname

187
00:07:49,440 --> 00:07:52,960
then i need to rebuild all the

188
00:07:50,720 --> 00:07:53,680
dependencies but that can take me some

189
00:07:52,960 --> 00:07:55,120
time

190
00:07:53,680 --> 00:07:56,639
and in during the time that i'm

191
00:07:55,120 --> 00:07:58,080
rebuilding other dependencies well

192
00:07:56,639 --> 00:08:01,120
rawhide is broken

193
00:07:58,080 --> 00:08:04,240
that leads to situations like

194
00:08:01,120 --> 00:08:05,919
f29 i believe or 30 when we branch

195
00:08:04,240 --> 00:08:07,280
when so we branch our flow height to

196
00:08:05,919 --> 00:08:08,719
make the stability disease when we

197
00:08:07,280 --> 00:08:12,318
branched off fro height

198
00:08:08,720 --> 00:08:13,759
for f-13 f2930 i forgot we did not have

199
00:08:12,319 --> 00:08:17,360
a working compose

200
00:08:13,759 --> 00:08:18,160
for about a month because rawhide was

201
00:08:17,360 --> 00:08:19,759
broken

202
00:08:18,160 --> 00:08:22,160
when we branched off rawhide if we

203
00:08:19,759 --> 00:08:24,319
branch a broken federer

204
00:08:22,160 --> 00:08:25,680
so there is no reason why we want to

205
00:08:24,319 --> 00:08:27,759
keep pro-life broken

206
00:08:25,680 --> 00:08:29,280
and getting is about preventing this

207
00:08:27,759 --> 00:08:30,319
breakage from happening so we want a

208
00:08:29,280 --> 00:08:33,199
more stable realize

209
00:08:30,319 --> 00:08:34,880
we with most of our eyes we get working

210
00:08:33,200 --> 00:08:36,320
composites this means when we

211
00:08:34,880 --> 00:08:38,240
branch our flow height we'll get a

212
00:08:36,320 --> 00:08:41,039
working compose we'll get a working

213
00:08:38,240 --> 00:08:41,680
f 32 for the left 31 f 32 for the next

214
00:08:41,039 --> 00:08:43,838
one

215
00:08:41,679 --> 00:08:44,880
uh and we can already work on that

216
00:08:43,839 --> 00:08:47,040
product

217
00:08:44,880 --> 00:08:48,399
uh that also means faster updates for

218
00:08:47,040 --> 00:08:50,959
rawhide itself because

219
00:08:48,399 --> 00:08:53,040
uh in right updates the push of the

220
00:08:50,959 --> 00:08:55,199
updates of the write updates the mirrors

221
00:08:53,040 --> 00:08:57,360
happen as part of their compose

222
00:08:55,200 --> 00:08:58,959
if you don't have compose for months you

223
00:08:57,360 --> 00:09:00,560
don't have you're not pushing right

224
00:08:58,959 --> 00:09:01,599
update out to the mirror for a month so

225
00:09:00,560 --> 00:09:05,319
everybody using

226
00:09:01,600 --> 00:09:07,519
rawhide is not going to get their new

227
00:09:05,320 --> 00:09:09,920
versions

228
00:09:07,519 --> 00:09:11,360
so the compose of the in the compost is

229
00:09:09,920 --> 00:09:13,519
uh

230
00:09:11,360 --> 00:09:15,440
so the question is uh can we define more

231
00:09:13,519 --> 00:09:16,959
precisely what composes

232
00:09:15,440 --> 00:09:19,040
that's an overloaded term which is

233
00:09:16,959 --> 00:09:22,399
always very hard to define

234
00:09:19,040 --> 00:09:24,880
the the basic answer is um

235
00:09:22,399 --> 00:09:27,040
when we compose federer we are

236
00:09:24,880 --> 00:09:28,959
rebuilding the update repositories the

237
00:09:27,040 --> 00:09:30,000
dnf repositories that we are pushing out

238
00:09:28,959 --> 00:09:32,399
to our mirrors

239
00:09:30,000 --> 00:09:33,040
but we also are building our iso image

240
00:09:32,399 --> 00:09:36,720
for example

241
00:09:33,040 --> 00:09:38,480
our base image for containers and so on

242
00:09:36,720 --> 00:09:40,080
so depending on who you talk to you may

243
00:09:38,480 --> 00:09:41,440
be talking about a part of the process

244
00:09:40,080 --> 00:09:43,360
or the entire process

245
00:09:41,440 --> 00:09:44,480
uh but yeah when we talk about the right

246
00:09:43,360 --> 00:09:45,920
compose it means

247
00:09:44,480 --> 00:09:48,000
generating the ripple making sure the

248
00:09:45,920 --> 00:09:50,319
ripples solve themselves so the

249
00:09:48,000 --> 00:09:52,640
dependency resolution works building

250
00:09:50,320 --> 00:09:53,760
the basic images and if one of these

251
00:09:52,640 --> 00:09:55,279
steps breaks

252
00:09:53,760 --> 00:09:59,120
the anterior composite is considered a

253
00:09:55,279 --> 00:10:01,040
failure and not pushed to the users

254
00:09:59,120 --> 00:10:03,200
well and one of the and one of the last

255
00:10:01,040 --> 00:10:05,920
thing we want to get right is

256
00:10:03,200 --> 00:10:07,839
we want to get in the point of uh well

257
00:10:05,920 --> 00:10:10,079
some of us have the chance to be paid

258
00:10:07,839 --> 00:10:11,600
by companies to work in thorough the

259
00:10:10,079 --> 00:10:12,959
vast majority of the con

260
00:10:11,600 --> 00:10:15,120
the contributors in federer are

261
00:10:12,959 --> 00:10:16,160
volunteers they do that on their free

262
00:10:15,120 --> 00:10:18,880
time

263
00:10:16,160 --> 00:10:20,959
which is a great investment we can't

264
00:10:18,880 --> 00:10:22,880
thank them enough for you know

265
00:10:20,959 --> 00:10:24,079
using your free time to come and help us

266
00:10:22,880 --> 00:10:25,760
and work on federer

267
00:10:24,079 --> 00:10:27,199
uh it's awesome to have you there i've

268
00:10:25,760 --> 00:10:29,120
been there you know before i got the

269
00:10:27,200 --> 00:10:32,160
chance to be hired to work on this

270
00:10:29,120 --> 00:10:32,720
uh the only thing is uh you know you may

271
00:10:32,160 --> 00:10:34,160
be

272
00:10:32,720 --> 00:10:36,480
you may be maintaining a package and

273
00:10:34,160 --> 00:10:39,839
then something lower on the stack

274
00:10:36,480 --> 00:10:41,519
breaks and they can't rebuild it because

275
00:10:39,839 --> 00:10:43,680
for x and y reasons they don't have the

276
00:10:41,519 --> 00:10:46,000
permissions to do that and then suddenly

277
00:10:43,680 --> 00:10:48,880
what you're doing is you're on holiday

278
00:10:46,000 --> 00:10:50,240
you're having family time you're having

279
00:10:48,880 --> 00:10:51,200
you're working on something else on your

280
00:10:50,240 --> 00:10:52,880
plate project

281
00:10:51,200 --> 00:10:54,399
and then you get an email saying that

282
00:10:52,880 --> 00:10:55,200
your package can no longer install

283
00:10:54,399 --> 00:10:57,120
because

284
00:10:55,200 --> 00:10:58,560
there is a broken there is a name bump

285
00:10:57,120 --> 00:11:00,399
in one of the dependencies

286
00:10:58,560 --> 00:11:02,000
and you you have to go and fix it you

287
00:11:00,399 --> 00:11:04,480
have to go and rebuild your package

288
00:11:02,000 --> 00:11:05,120
because someone else bumped also them

289
00:11:04,480 --> 00:11:06,640
and did not

290
00:11:05,120 --> 00:11:08,560
warn you and you couldn't coordinate the

291
00:11:06,640 --> 00:11:10,640
change with that person

292
00:11:08,560 --> 00:11:11,680
so we want to get into the mood of uh

293
00:11:10,640 --> 00:11:14,160
you break it

294
00:11:11,680 --> 00:11:14,959
you fix it it's fine to break something

295
00:11:14,160 --> 00:11:17,040
you just don't

296
00:11:14,959 --> 00:11:18,399
you fix you fix it and when you push

297
00:11:17,040 --> 00:11:19,519
something out

298
00:11:18,399 --> 00:11:21,519
it's something which is fixed it's

299
00:11:19,519 --> 00:11:22,720
something which is working so that's the

300
00:11:21,519 --> 00:11:23,279
that's one of the challenges that we

301
00:11:22,720 --> 00:11:24,800
want

302
00:11:23,279 --> 00:11:26,880
that we want to bring to the right it's

303
00:11:24,800 --> 00:11:29,199
not okay to have right broken

304
00:11:26,880 --> 00:11:31,200
it is okay to break things but let's

305
00:11:29,200 --> 00:11:31,920
break them in a way that does not impact

306
00:11:31,200 --> 00:11:34,320
everyone

307
00:11:31,920 --> 00:11:36,800
but you until you have figured a way to

308
00:11:34,320 --> 00:11:36,800
fix them

309
00:11:36,880 --> 00:11:42,000
so what what are the challenges well the

310
00:11:39,839 --> 00:11:43,680
first challenge was to make it happen

311
00:11:42,000 --> 00:11:45,040
it's not the first time if you're part

312
00:11:43,680 --> 00:11:46,239
of the fellow community you've made a

313
00:11:45,040 --> 00:11:48,800
verdict

314
00:11:46,240 --> 00:11:50,560
some months ago i would say it's not the

315
00:11:48,800 --> 00:11:53,279
first time that we tried to to improve

316
00:11:50,560 --> 00:11:55,199
to work on this but it failed for a

317
00:11:53,279 --> 00:11:55,920
number of reasons last time so when we

318
00:11:55,200 --> 00:11:57,360
start

319
00:11:55,920 --> 00:11:59,120
to look into that again we need to be

320
00:11:57,360 --> 00:12:00,720
careful on them

321
00:11:59,120 --> 00:12:03,040
why did it not work last time and how

322
00:12:00,720 --> 00:12:05,519
can we make it work this time

323
00:12:03,040 --> 00:12:07,120
the second one is uh well those are more

324
00:12:05,519 --> 00:12:08,160
requirements we want to fit into the

325
00:12:07,120 --> 00:12:09,839
existing tuning we don't want to

326
00:12:08,160 --> 00:12:11,600
reinvent a build system that will

327
00:12:09,839 --> 00:12:12,320
provide us the getting we don't want to

328
00:12:11,600 --> 00:12:16,720
invent

329
00:12:12,320 --> 00:12:19,120
a body update management system

330
00:12:16,720 --> 00:12:20,959
i'll come back to this and we want to

331
00:12:19,120 --> 00:12:23,120
interrupt the package of workforce

332
00:12:20,959 --> 00:12:24,800
as little as possible if we every time

333
00:12:23,120 --> 00:12:26,639
we change something in the package or

334
00:12:24,800 --> 00:12:27,040
workflow we are imposing something on

335
00:12:26,639 --> 00:12:29,760
our

336
00:12:27,040 --> 00:12:31,599
community of contributors and you know

337
00:12:29,760 --> 00:12:33,760
if you update a package every day

338
00:12:31,600 --> 00:12:35,200
that is uh you quickly learn the trick

339
00:12:33,760 --> 00:12:36,720
to to use the new way

340
00:12:35,200 --> 00:12:38,320
if you're if you're packaging something

341
00:12:36,720 --> 00:12:39,839
every three months every time you have

342
00:12:38,320 --> 00:12:40,800
to go back into documentation and where

343
00:12:39,839 --> 00:12:42,480
is it again and

344
00:12:40,800 --> 00:12:43,920
is there is that page of documentation

345
00:12:42,480 --> 00:12:45,440
up to date or is it this one over there

346
00:12:43,920 --> 00:12:47,439
or is that the email which i'm finding

347
00:12:45,440 --> 00:12:49,920
in my mailbox somehow

348
00:12:47,440 --> 00:12:51,120
uh and then the last one is uh well but

349
00:12:49,920 --> 00:12:52,719
there will be bugs

350
00:12:51,120 --> 00:12:54,639
there will be bugs in the ci there will

351
00:12:52,720 --> 00:12:56,000
be in the test

352
00:12:54,639 --> 00:12:57,519
there will be bugs in the way we test

353
00:12:56,000 --> 00:12:59,440
things so we need to have a way to

354
00:12:57,519 --> 00:13:01,200
handle false negative

355
00:12:59,440 --> 00:13:02,959
so something which works but it's

356
00:13:01,200 --> 00:13:03,360
identified as not working so we need a

357
00:13:02,959 --> 00:13:06,319
way

358
00:13:03,360 --> 00:13:08,480
to bypass the result of the test in a

359
00:13:06,320 --> 00:13:12,160
way that is satisfactory for the for

360
00:13:08,480 --> 00:13:14,800
our packages so

361
00:13:12,160 --> 00:13:16,000
having all of this in mind uh one of the

362
00:13:14,800 --> 00:13:19,279
idea was that we would

363
00:13:16,000 --> 00:13:21,920
roll out the changes in phases so we we

364
00:13:19,279 --> 00:13:22,880
try to do the the easy one first so the

365
00:13:21,920 --> 00:13:25,040
easy one is a

366
00:13:22,880 --> 00:13:26,800
it's an update that only contains a

367
00:13:25,040 --> 00:13:28,560
single package

368
00:13:26,800 --> 00:13:30,800
it's only you know it's it's a python

369
00:13:28,560 --> 00:13:33,518
module that is updated that does not

370
00:13:30,800 --> 00:13:34,880
depend on anything it's pure python it's

371
00:13:33,519 --> 00:13:36,800
python 3 you know it's

372
00:13:34,880 --> 00:13:38,079
the most simplest thing you can think of

373
00:13:36,800 --> 00:13:40,959
this is the easy case

374
00:13:38,079 --> 00:13:41,680
one build one package one of these and

375
00:13:40,959 --> 00:13:44,800
then

376
00:13:41,680 --> 00:13:45,199
as we as we get user feedback as we get

377
00:13:44,800 --> 00:13:47,760
uh

378
00:13:45,199 --> 00:13:49,120
as we polish them we also work on to uh

379
00:13:47,760 --> 00:13:50,800
how do we deal with

380
00:13:49,120 --> 00:13:52,880
updates that contain multiple build that

381
00:13:50,800 --> 00:13:54,719
needs to be shipped and tested as one

382
00:13:52,880 --> 00:13:57,680
unit

383
00:13:54,720 --> 00:13:59,440
um so this was our id let's do single

384
00:13:57,680 --> 00:14:00,079
build first let's do multi-build after

385
00:13:59,440 --> 00:14:02,079
that

386
00:14:00,079 --> 00:14:03,199
gather feedback as slowly as possible

387
00:14:02,079 --> 00:14:04,560
and try to

388
00:14:03,199 --> 00:14:06,880
account for that for that feedback as

389
00:14:04,560 --> 00:14:10,000
much as we can and try to get a police

390
00:14:06,880 --> 00:14:12,160
user experiment at the end of it

391
00:14:10,000 --> 00:14:13,440
where is it today well we've announced

392
00:14:12,160 --> 00:14:15,519
that flock so

393
00:14:13,440 --> 00:14:16,720
the fedora conference last summer that

394
00:14:15,519 --> 00:14:19,680
we were able to do

395
00:14:16,720 --> 00:14:20,800
single package getting and i'm now happy

396
00:14:19,680 --> 00:14:22,399
to announce you that we can do

397
00:14:20,800 --> 00:14:24,800
multi-package packaging as well in

398
00:14:22,399 --> 00:14:24,800
fedora

399
00:14:26,880 --> 00:14:30,399
so how does it work these are slides

400
00:14:29,440 --> 00:14:32,399
which are

401
00:14:30,399 --> 00:14:33,839
uh back from the i just went back to the

402
00:14:32,399 --> 00:14:35,839
slides which i used uh

403
00:14:33,839 --> 00:14:37,440
clock when i presented this so for the

404
00:14:35,839 --> 00:14:40,000
single build getting

405
00:14:37,440 --> 00:14:41,680
it's a fairly complex system this is

406
00:14:40,000 --> 00:14:43,440
basically the flow of everything

407
00:14:41,680 --> 00:14:44,800
it's not meant to be red so don't worry

408
00:14:43,440 --> 00:14:46,560
that you can't read it it's just

409
00:14:44,800 --> 00:14:48,800
to give you an idea every column here is

410
00:14:46,560 --> 00:14:49,920
a different system and then every box is

411
00:14:48,800 --> 00:14:52,479
a different action

412
00:14:49,920 --> 00:14:53,120
the user being the you know the first

413
00:14:52,480 --> 00:14:55,440
system

414
00:14:53,120 --> 00:14:57,040
over there and as you can see the

415
00:14:55,440 --> 00:14:58,959
interaction with the user are actually

416
00:14:57,040 --> 00:15:00,560
fairly limited there is only uh

417
00:14:58,959 --> 00:15:02,800
the users the package will start the

418
00:15:00,560 --> 00:15:04,239
process and there is the override here

419
00:15:02,800 --> 00:15:06,000
which is basically uh

420
00:15:04,240 --> 00:15:13,839
if something goes wrong the false

421
00:15:06,000 --> 00:15:13,839
handling the false negative case here

422
00:15:15,839 --> 00:15:20,560
so this is the the simplified version of

423
00:15:18,880 --> 00:15:21,519
the large graph which is much easier to

424
00:15:20,560 --> 00:15:23,119
correspond

425
00:15:21,519 --> 00:15:24,560
even for myself that's the one i go back

426
00:15:23,120 --> 00:15:26,000
to when i need to to

427
00:15:24,560 --> 00:15:28,160
you know see if something is working the

428
00:15:26,000 --> 00:15:30,560
way it should um

429
00:15:28,160 --> 00:15:32,719
we have a packager they do that person

430
00:15:30,560 --> 00:15:33,599
does a coaching build in a certain tag

431
00:15:32,720 --> 00:15:36,240
in koji

432
00:15:33,600 --> 00:15:38,160
so this is the it basically says this is

433
00:15:36,240 --> 00:15:38,880
a candidate for an update of the f-31

434
00:15:38,160 --> 00:15:40,880
that was

435
00:15:38,880 --> 00:15:44,480
made this summer before 31 was out so

436
00:15:40,880 --> 00:15:46,800
absolutely was very hard at that time

437
00:15:44,480 --> 00:15:48,720
koji announces that he has built and

438
00:15:46,800 --> 00:15:51,359
tagged the build into this tag

439
00:15:48,720 --> 00:15:52,560
robert signatory received the message

440
00:15:51,360 --> 00:15:55,759
signs the build

441
00:15:52,560 --> 00:15:57,279
and push it into update pending but he

442
00:15:55,759 --> 00:15:59,279
gets the message that an update was

443
00:15:57,279 --> 00:16:00,240
pushed into a big pending it creates an

444
00:15:59,279 --> 00:16:02,480
update

445
00:16:00,240 --> 00:16:04,079
and then it waits when it trades the

446
00:16:02,480 --> 00:16:05,839
update it sends a message to the ci

447
00:16:04,079 --> 00:16:07,279
system that says this is this update is

448
00:16:05,839 --> 00:16:09,360
ready to be tested

449
00:16:07,279 --> 00:16:10,959
to see how system is going to test it

450
00:16:09,360 --> 00:16:12,399
it's going to come back to body and say

451
00:16:10,959 --> 00:16:14,719
yep that turned up

452
00:16:12,399 --> 00:16:16,720
and when he moves it or the cr system

453
00:16:14,720 --> 00:16:17,199
says no that can't go anybody say well

454
00:16:16,720 --> 00:16:19,920
you know

455
00:16:17,199 --> 00:16:21,439
i can't do anything there so what we the

456
00:16:19,920 --> 00:16:22,479
one of the champ that we have introduced

457
00:16:21,440 --> 00:16:25,199
here is that

458
00:16:22,480 --> 00:16:26,399
body was not part of the question before

459
00:16:25,199 --> 00:16:28,479
before you would

460
00:16:26,399 --> 00:16:30,959
build it would be signed and pushed

461
00:16:28,480 --> 00:16:32,959
directly to the stable type

462
00:16:30,959 --> 00:16:34,000
to the build roots nowadays everything

463
00:16:32,959 --> 00:16:35,839
was very body

464
00:16:34,000 --> 00:16:37,680
because body was the place which was

465
00:16:35,839 --> 00:16:38,959
natural for packager to get feedback

466
00:16:37,680 --> 00:16:40,319
about an update

467
00:16:38,959 --> 00:16:41,839
so we have fit into the existing

468
00:16:40,320 --> 00:16:43,440
workflow we changed the we changed our

469
00:16:41,839 --> 00:16:45,199
workflow because we introduced it

470
00:16:43,440 --> 00:16:46,720
but it is a natural place for packager

471
00:16:45,199 --> 00:16:49,920
to receive feedback about

472
00:16:46,720 --> 00:16:51,759
if this something is going right or not

473
00:16:49,920 --> 00:16:53,519
why is it a natural place because body

474
00:16:51,759 --> 00:16:56,160
when you create an update buddy

475
00:16:53,519 --> 00:16:57,600
is the place where people can report if

476
00:16:56,160 --> 00:16:58,160
an update is working or not so there is

477
00:16:57,600 --> 00:17:00,399
already

478
00:16:58,160 --> 00:17:01,920
a mechanism there for comments from

479
00:17:00,399 --> 00:17:02,320
contributors in the community to say

480
00:17:01,920 --> 00:17:04,319
well

481
00:17:02,320 --> 00:17:06,079
that update broke my system let's and

482
00:17:04,319 --> 00:17:09,918
push it

483
00:17:06,079 --> 00:17:12,799
so this is the id now multi builds

484
00:17:09,919 --> 00:17:14,559
well the picture didn't get clear the

485
00:17:12,799 --> 00:17:15,918
number system did not get smaller and

486
00:17:14,559 --> 00:17:17,520
the number of interaction actually

487
00:17:15,919 --> 00:17:20,799
didn't get

488
00:17:17,520 --> 00:17:22,400
that worse either so the simplified

489
00:17:20,799 --> 00:17:24,240
version again

490
00:17:22,400 --> 00:17:26,319
you start by creating a site tag so this

491
00:17:24,240 --> 00:17:27,839
is a manual this is a manual step so

492
00:17:26,319 --> 00:17:29,039
that changes from the way you were

493
00:17:27,839 --> 00:17:31,600
working before

494
00:17:29,039 --> 00:17:33,440
you create a site tag and that is your

495
00:17:31,600 --> 00:17:35,120
site time it's

496
00:17:33,440 --> 00:17:36,799
f 32 is going to be the base so the

497
00:17:35,120 --> 00:17:38,399
currently a substitute is right so

498
00:17:36,799 --> 00:17:39,440
that's going to be always substitute

499
00:17:38,400 --> 00:17:41,760
side and then

500
00:17:39,440 --> 00:17:43,679
a random integer well it's an increasing

501
00:17:41,760 --> 00:17:45,039
integral

502
00:17:43,679 --> 00:17:46,799
then you're just going to build in that

503
00:17:45,039 --> 00:17:48,320
site tag as many packages you like

504
00:17:46,799 --> 00:17:50,160
if you have two packages you do two if

505
00:17:48,320 --> 00:17:51,918
you have android you do hundreds

506
00:17:50,160 --> 00:17:53,600
once you are ready you're going to be

507
00:17:51,919 --> 00:17:55,200
the one going to buddy and you're going

508
00:17:53,600 --> 00:17:58,159
to sell to tell to buddy

509
00:17:55,200 --> 00:17:59,600
that site tag here is ready buddy is

510
00:17:58,160 --> 00:18:01,200
going to get all the bills that you've

511
00:17:59,600 --> 00:18:02,480
made in that site tag and turn it into a

512
00:18:01,200 --> 00:18:04,559
single update

513
00:18:02,480 --> 00:18:06,799
it's going to signal that to the ci

514
00:18:04,559 --> 00:18:10,559
system that will click off the

515
00:18:06,799 --> 00:18:12,799
uh it's not easy but so it's going to

516
00:18:10,559 --> 00:18:13,760
it's going to create the update it's

517
00:18:12,799 --> 00:18:16,080
going to move

518
00:18:13,760 --> 00:18:17,520
it's going to uh body at it at the time

519
00:18:16,080 --> 00:18:19,199
when you create the update it's creating

520
00:18:17,520 --> 00:18:22,080
two side types as well

521
00:18:19,200 --> 00:18:22,960
it's using the same id signing pending

522
00:18:22,080 --> 00:18:25,678
and then

523
00:18:22,960 --> 00:18:27,280
testing pending and when once you have

524
00:18:25,679 --> 00:18:29,840
created this user tag it moves

525
00:18:27,280 --> 00:18:31,520
all the builds from your site tag into

526
00:18:29,840 --> 00:18:34,320
the signing painting

527
00:18:31,520 --> 00:18:36,080
robot signatory has pattern matching

528
00:18:34,320 --> 00:18:38,240
algorithms that say as well

529
00:18:36,080 --> 00:18:39,918
everything that is associated to side

530
00:18:38,240 --> 00:18:42,960
something signing pending

531
00:18:39,919 --> 00:18:45,520
i'm listening to i take all the builds

532
00:18:42,960 --> 00:18:47,840
in the updates i sign them and i move

533
00:18:45,520 --> 00:18:49,440
them to the testing pending

534
00:18:47,840 --> 00:18:52,559
buddy gets the notification that

535
00:18:49,440 --> 00:18:54,880
something was moved to testing planning

536
00:18:52,559 --> 00:18:55,600
it marks the update as ready to be

537
00:18:54,880 --> 00:18:58,400
tested

538
00:18:55,600 --> 00:18:59,840
it signals it to the ci system that will

539
00:18:58,400 --> 00:19:01,120
perform all the tests on all the

540
00:18:59,840 --> 00:19:02,799
packages at once

541
00:19:01,120 --> 00:19:04,479
so if you have two package that needs to

542
00:19:02,799 --> 00:19:06,000
be tested together it will make sure

543
00:19:04,480 --> 00:19:06,960
that both packages are present on the

544
00:19:06,000 --> 00:19:08,840
system to be

545
00:19:06,960 --> 00:19:10,480
before the test is the actor in this

546
00:19:08,840 --> 00:19:13,678
server

547
00:19:10,480 --> 00:19:15,039
sorry who is the article uh director

548
00:19:13,679 --> 00:19:17,679
there is a packager

549
00:19:15,039 --> 00:19:17,679
packager

550
00:19:18,080 --> 00:19:23,360
this is like an internal red hat

551
00:19:21,120 --> 00:19:25,280
employee or outsider anybody in the

552
00:19:23,360 --> 00:19:27,039
federal community with a packager can do

553
00:19:25,280 --> 00:19:29,600
these steps how can we create

554
00:19:27,039 --> 00:19:31,360
the bags fair package fat package

555
00:19:29,600 --> 00:19:33,199
request site tag

556
00:19:31,360 --> 00:19:34,639
so that package is the question is how

557
00:19:33,200 --> 00:19:36,960
do we create the site types

558
00:19:34,640 --> 00:19:38,000
uh there is a utility etc that's used by

559
00:19:36,960 --> 00:19:41,280
packager that's called

560
00:19:38,000 --> 00:19:42,080
package it's a small cli tool and there

561
00:19:41,280 --> 00:19:44,160
is a simple

562
00:19:42,080 --> 00:19:45,120
action that says a package request site

563
00:19:44,160 --> 00:19:48,080
tags

564
00:19:45,120 --> 00:19:49,520
that basically goes to koji and ask a

565
00:19:48,080 --> 00:19:50,799
foresight tag to be created and it

566
00:19:49,520 --> 00:19:53,120
returns you with the id

567
00:19:50,799 --> 00:19:54,400
of the site type which you can then pass

568
00:19:53,120 --> 00:19:57,918
onto your build command

569
00:19:54,400 --> 00:19:59,600
and uh and that you specified together

570
00:19:57,919 --> 00:20:01,280
the next thing is a site tag can also be

571
00:19:59,600 --> 00:20:03,199
shared if you're working

572
00:20:01,280 --> 00:20:05,360
with a on an update with a group or

573
00:20:03,200 --> 00:20:06,080
person the first one creates the cell

574
00:20:05,360 --> 00:20:08,000
tags

575
00:20:06,080 --> 00:20:09,520
gives the site tag id to the word for

576
00:20:08,000 --> 00:20:10,559
the group and everybody can build in

577
00:20:09,520 --> 00:20:12,320
that site tag

578
00:20:10,559 --> 00:20:14,399
and once and then once everything is

579
00:20:12,320 --> 00:20:21,840
ready someone goes to body and creates

580
00:20:14,400 --> 00:20:21,840
the corresponding update

581
00:20:28,720 --> 00:20:32,720
so the question is if we have packages

582
00:20:30,720 --> 00:20:35,280
depending on each other in the site tags

583
00:20:32,720 --> 00:20:36,559
uh how do we handle package a being

584
00:20:35,280 --> 00:20:38,240
present in the bid root when we build

585
00:20:36,559 --> 00:20:40,799
package b

586
00:20:38,240 --> 00:20:41,440
you so there are two ways to do that the

587
00:20:40,799 --> 00:20:43,918
hard way

588
00:20:41,440 --> 00:20:45,039
is to do package a and then you wait for

589
00:20:43,919 --> 00:20:47,520
koji to create

590
00:20:45,039 --> 00:20:49,520
the repository for the site tag before

591
00:20:47,520 --> 00:20:51,679
you trigger the build for package b

592
00:20:49,520 --> 00:20:53,120
or you have a nicer way to do that is

593
00:20:51,679 --> 00:20:54,400
it's a package command again that's

594
00:20:53,120 --> 00:20:56,320
called chain build

595
00:20:54,400 --> 00:20:57,919
and it basically does that for you it

596
00:20:56,320 --> 00:21:00,080
tells koji i want to build all of these

597
00:20:57,919 --> 00:21:01,440
packages and they depend on each other

598
00:21:00,080 --> 00:21:03,678
and you can group them so you can

599
00:21:01,440 --> 00:21:04,880
parallelize say package a and b can be

600
00:21:03,679 --> 00:21:08,000
built together but c

601
00:21:04,880 --> 00:21:08,000
needs package a and b

602
00:21:13,440 --> 00:21:16,559
the question is can we build the same

603
00:21:14,799 --> 00:21:18,879
package twice um

604
00:21:16,559 --> 00:21:19,918
koji has a requirement that is that on

605
00:21:18,880 --> 00:21:23,120
the nv

606
00:21:19,919 --> 00:21:26,080
and evr a so that's name epoch

607
00:21:23,120 --> 00:21:27,039
version release architecture of a of a

608
00:21:26,080 --> 00:21:28,879
package

609
00:21:27,039 --> 00:21:30,480
so as long as you can you can send to

610
00:21:28,880 --> 00:21:34,000
koji

611
00:21:30,480 --> 00:21:37,039
you can send to koji uh a git

612
00:21:34,000 --> 00:21:39,679
hash basically to build as long as

613
00:21:37,039 --> 00:21:41,200
the the the nvr you can send it multiple

614
00:21:39,679 --> 00:21:41,840
time but this tnvr has already been

615
00:21:41,200 --> 00:21:43,200
built

616
00:21:41,840 --> 00:21:45,439
because you will say well that has

617
00:21:43,200 --> 00:21:47,120
already been built what can so

618
00:21:45,440 --> 00:21:48,559
i guess the answer behind that is can i

619
00:21:47,120 --> 00:21:50,158
have a build that's presenting multiple

620
00:21:48,559 --> 00:21:52,080
tags at the same time

621
00:21:50,159 --> 00:21:54,000
because that's you would like to send an

622
00:21:52,080 --> 00:21:56,320
nvr to that build

623
00:21:54,000 --> 00:21:57,440
to this site as well as json the same

624
00:21:56,320 --> 00:22:00,480
nvr to another site

625
00:21:57,440 --> 00:22:00,480
is that's what you're dealing with

626
00:22:01,520 --> 00:22:06,000
okay so i want to have a package

627
00:22:06,880 --> 00:22:10,480
without this test disabled and then

628
00:22:08,960 --> 00:22:11,200
build another package that depends on

629
00:22:10,480 --> 00:22:12,880
this one

630
00:22:11,200 --> 00:22:14,559
and then i want to do a full build on

631
00:22:12,880 --> 00:22:15,840
the first package with tests enabled or

632
00:22:14,559 --> 00:22:19,120
something generated

633
00:22:15,840 --> 00:22:22,480
so i'm i'm fine with bumping the

634
00:22:19,120 --> 00:22:24,399
release between yes so in this case it's

635
00:22:22,480 --> 00:22:24,720
a bootstrap case where you start with

636
00:22:24,400 --> 00:22:27,280
that

637
00:22:24,720 --> 00:22:28,720
disabled build the dependency and then

638
00:22:27,280 --> 00:22:30,799
build again the first package

639
00:22:28,720 --> 00:22:31,760
with the test enabled so that's because

640
00:22:30,799 --> 00:22:34,799
it needed package b

641
00:22:31,760 --> 00:22:36,879
to be able to to run the full

642
00:22:34,799 --> 00:22:38,559
tests uh yeah and these solutions you

643
00:22:36,880 --> 00:22:39,520
have no choice at the moment but dumping

644
00:22:38,559 --> 00:22:41,840
the release

645
00:22:39,520 --> 00:22:41,840
again

646
00:22:48,799 --> 00:22:52,879
so the question is can i target packages

647
00:22:50,960 --> 00:22:54,559
and yes you can tag them inside packages

648
00:22:52,880 --> 00:22:55,760
if you're not allowed to do that koji

649
00:22:54,559 --> 00:22:56,158
will tell you you're not allowed to do

650
00:22:55,760 --> 00:22:57,760
that

651
00:22:56,159 --> 00:22:59,679
but it's one of the it's one of the

652
00:22:57,760 --> 00:23:00,559
elements on how how can you unblock

653
00:22:59,679 --> 00:23:03,039
yourself if you

654
00:23:00,559 --> 00:23:04,480
if you find yourself that somehow you

655
00:23:03,039 --> 00:23:06,320
built lost a tag

656
00:23:04,480 --> 00:23:07,679
you can actually you can actually just

657
00:23:06,320 --> 00:23:10,080
to koji tag

658
00:23:07,679 --> 00:23:12,320
the target the tag and the package name

659
00:23:10,080 --> 00:23:13,520
and koji will happily take it for you

660
00:23:12,320 --> 00:23:14,960
if you're allowed to do it if you're not

661
00:23:13,520 --> 00:23:16,080
allowed you will just say well i can't

662
00:23:14,960 --> 00:23:17,919
do that

663
00:23:16,080 --> 00:23:23,840
so that's a that's one way you cannot

664
00:23:17,919 --> 00:23:23,840
search yourself

665
00:23:32,400 --> 00:23:36,320
so the question is how much freedom do

666
00:23:34,159 --> 00:23:38,640
packager have to configure koji

667
00:23:36,320 --> 00:23:40,080
and the answer to this one is none this

668
00:23:38,640 --> 00:23:42,320
is a really this is a really

669
00:23:40,080 --> 00:23:43,678
release engineering uh task basically

670
00:23:42,320 --> 00:23:45,520
the other one that will be defined in

671
00:23:43,679 --> 00:23:47,760
the the tags the hierarchy

672
00:23:45,520 --> 00:23:49,279
you can create your site type based on

673
00:23:47,760 --> 00:23:50,559
the existing ones but you're not going

674
00:23:49,279 --> 00:23:54,799
to be able to create

675
00:23:50,559 --> 00:23:54,799
you know official tags uh on your own

676
00:23:55,520 --> 00:23:58,799
would it be possible to start the ci

677
00:23:57,120 --> 00:23:59,439
before the signing or we need to sign

678
00:23:58,799 --> 00:24:01,760
the application

679
00:23:59,440 --> 00:24:03,200
so the question is is it possible to

680
00:24:01,760 --> 00:24:05,679
start the the ci process

681
00:24:03,200 --> 00:24:07,039
so earlier earlier in the process before

682
00:24:05,679 --> 00:24:08,320
the signing

683
00:24:07,039 --> 00:24:10,480
that was one of the questions we

684
00:24:08,320 --> 00:24:10,960
originally considered and the issue

685
00:24:10,480 --> 00:24:12,720
which

686
00:24:10,960 --> 00:24:15,039
which i had with that is that you end up

687
00:24:12,720 --> 00:24:17,840
if you end up installing a package

688
00:24:15,039 --> 00:24:19,600
uh you end up in you end up testing the

689
00:24:17,840 --> 00:24:21,760
installation of the package

690
00:24:19,600 --> 00:24:23,120
not in the way the user are going to use

691
00:24:21,760 --> 00:24:25,200
it so

692
00:24:23,120 --> 00:24:27,600
if something goes wrong here and the

693
00:24:25,200 --> 00:24:30,080
package is not correctly signed

694
00:24:27,600 --> 00:24:31,360
i'm going to i'm going suddenly my test

695
00:24:30,080 --> 00:24:32,879
install is going to fail

696
00:24:31,360 --> 00:24:34,959
because the package is expecting to be

697
00:24:32,880 --> 00:24:37,520
signed because in federal by default

698
00:24:34,960 --> 00:24:38,320
the the dnf configured the umdf

699
00:24:37,520 --> 00:24:40,559
configuration

700
00:24:38,320 --> 00:24:41,678
requires the package to be signed so

701
00:24:40,559 --> 00:24:44,000
this is going to fail

702
00:24:41,679 --> 00:24:44,960
if if you say well i'm triggering you

703
00:24:44,000 --> 00:24:47,279
from here

704
00:24:44,960 --> 00:24:48,240
or you know directly from the koji build

705
00:24:47,279 --> 00:24:51,120
well suddenly

706
00:24:48,240 --> 00:24:52,320
you it means you have to test with a gpg

707
00:24:51,120 --> 00:24:54,080
no check

708
00:24:52,320 --> 00:24:55,678
which basically is the different than

709
00:24:54,080 --> 00:24:57,600
what the user would be so

710
00:24:55,679 --> 00:24:59,760
it was a conscious decision to stop the

711
00:24:57,600 --> 00:25:01,039
ci so late in the process

712
00:24:59,760 --> 00:25:02,480
but in the way that we make sure that

713
00:25:01,039 --> 00:25:05,440
what we test is actually what we're

714
00:25:02,480 --> 00:25:05,440
going to push to the users

715
00:25:09,120 --> 00:25:14,479
the question is is robusting necessary a

716
00:25:10,720 --> 00:25:18,000
bottom net

717
00:25:14,480 --> 00:25:18,799
yes and no uh on a daily on a daily

718
00:25:18,000 --> 00:25:20,559
basis no

719
00:25:18,799 --> 00:25:22,639
because the amount of bills that we get

720
00:25:20,559 --> 00:25:23,120
is low enough that reversing naturally

721
00:25:22,640 --> 00:25:25,760
just

722
00:25:23,120 --> 00:25:26,639
bill uh takes them uh it can be in a

723
00:25:25,760 --> 00:25:29,200
bottleneck

724
00:25:26,640 --> 00:25:31,120
during master builds mastery builds is

725
00:25:29,200 --> 00:25:33,600
when we take all the twenty thousand

726
00:25:31,120 --> 00:25:36,239
repeats reposts of packages in federer

727
00:25:33,600 --> 00:25:37,439
and we sell koji please rebuild so

728
00:25:36,240 --> 00:25:39,600
within a day or two

729
00:25:37,440 --> 00:25:40,559
koji gets to rebuild 20 000 packages

730
00:25:39,600 --> 00:25:42,559
which means

731
00:25:40,559 --> 00:25:44,399
probably signatory gets to sign 27

732
00:25:42,559 --> 00:25:46,720
packages and

733
00:25:44,400 --> 00:25:48,240
if we mess up a little bit which has

734
00:25:46,720 --> 00:25:50,320
happened not in this

735
00:25:48,240 --> 00:25:51,600
this much figure but the last one where

736
00:25:50,320 --> 00:25:53,520
we forgot

737
00:25:51,600 --> 00:25:55,039
to turn on rubber signatory from the

738
00:25:53,520 --> 00:25:56,639
start

739
00:25:55,039 --> 00:25:58,400
we basically had to address the robot

740
00:25:56,640 --> 00:25:59,360
signature you go through all the 20 000

741
00:25:58,400 --> 00:26:01,440
builds

742
00:25:59,360 --> 00:26:03,039
and well could be the mother are you

743
00:26:01,440 --> 00:26:04,880
signed no you're not okay i'm signing

744
00:26:03,039 --> 00:26:06,320
you are you signed yes you are okay

745
00:26:04,880 --> 00:26:08,080
next one are your son yes are you

746
00:26:06,320 --> 00:26:09,120
signing yes and that took that's

747
00:26:08,080 --> 00:26:11,120
basically strong

748
00:26:09,120 --> 00:26:12,799
from lottery but there was a mistake on

749
00:26:11,120 --> 00:26:14,719
our side in a way that we

750
00:26:12,799 --> 00:26:16,080
uh we forgot to turn a robot senator

751
00:26:14,720 --> 00:26:18,400
early enough in the process

752
00:26:16,080 --> 00:26:19,439
if in the case of the current mastermind

753
00:26:18,400 --> 00:26:21,919
that just happened

754
00:26:19,440 --> 00:26:23,200
uh robot signatory was triggered was set

755
00:26:21,919 --> 00:26:24,799
up correctly from the start

756
00:26:23,200 --> 00:26:26,240
and basically as the build was up and

757
00:26:24,799 --> 00:26:28,240
rubber signatory was running so

758
00:26:26,240 --> 00:26:29,760
and we didn't get the the issue of

759
00:26:28,240 --> 00:26:33,600
thrumping robotnik

760
00:26:29,760 --> 00:26:33,600
which we had at the last last round

761
00:26:36,960 --> 00:26:40,240
there is an update for each package

762
00:26:39,039 --> 00:26:43,440
there is a

763
00:26:40,240 --> 00:26:45,360
uh for all device there is an update for

764
00:26:43,440 --> 00:26:47,440
the whole group of packages or it's

765
00:26:45,360 --> 00:26:50,559
separated

766
00:26:47,440 --> 00:26:53,120
so on in the sim in the case of

767
00:26:50,559 --> 00:26:54,320
yeah and the the question is is there an

768
00:26:53,120 --> 00:26:55,918
update for uh

769
00:26:54,320 --> 00:26:57,760
for every build or is it a different

770
00:26:55,919 --> 00:26:58,960
update in the case of single bill it's

771
00:26:57,760 --> 00:27:00,799
one update per build

772
00:26:58,960 --> 00:27:02,320
in the case of multi-bills it's one

773
00:27:00,799 --> 00:27:04,158
update per site tag

774
00:27:02,320 --> 00:27:06,000
so all the bills in the site tags are

775
00:27:04,159 --> 00:27:08,000
going to go into one single update

776
00:27:06,000 --> 00:27:09,200
they are going to be tested as a single

777
00:27:08,000 --> 00:27:10,559
update they are going to be pushed to

778
00:27:09,200 --> 00:27:14,000
the mirror as a single update

779
00:27:10,559 --> 00:27:16,399
so that the maintainer has to sign

780
00:27:14,000 --> 00:27:17,279
some uh body to say okay i've done all

781
00:27:16,400 --> 00:27:19,360
my links

782
00:27:17,279 --> 00:27:20,640
now you can start yeah that's that

783
00:27:19,360 --> 00:27:21,439
that's one change in the package of

784
00:27:20,640 --> 00:27:23,919
workflow

785
00:27:21,440 --> 00:27:25,120
you need to before you had to build and

786
00:27:23,919 --> 00:27:26,799
that's all you had to do

787
00:27:25,120 --> 00:27:28,239
now if you have multiple bills you need

788
00:27:26,799 --> 00:27:30,158
to create the site tags

789
00:27:28,240 --> 00:27:31,600
then do your build and once you're done

790
00:27:30,159 --> 00:27:33,919
with it you say

791
00:27:31,600 --> 00:27:35,840
okay you can go ahead there was thought

792
00:27:33,919 --> 00:27:37,760
about automating this and saying well

793
00:27:35,840 --> 00:27:39,918
we just keep on testing whatever is in

794
00:27:37,760 --> 00:27:41,440
the site tax until it passes and then as

795
00:27:39,919 --> 00:27:43,600
soon as it pass we merge it

796
00:27:41,440 --> 00:27:45,279
but there is no guarantee that there is

797
00:27:43,600 --> 00:27:46,799
not some bills left over behind that

798
00:27:45,279 --> 00:27:49,279
that should be still included in the in

799
00:27:46,799 --> 00:27:49,279
that generator

800
00:27:50,799 --> 00:27:53,840
as a packager can you create a new site

801
00:27:53,120 --> 00:27:55,840
like

802
00:27:53,840 --> 00:27:58,158
you can get any combination of other

803
00:27:55,840 --> 00:28:00,959
packages that are given when they

804
00:27:58,159 --> 00:28:02,799
put into a site and then cleaning blocks

805
00:28:00,960 --> 00:28:03,520
ci for other projects just by adding

806
00:28:02,799 --> 00:28:07,918
them

807
00:28:03,520 --> 00:28:10,960
into your site so if you're a packager

808
00:28:07,919 --> 00:28:13,200
you can create an arbitrary site right

809
00:28:10,960 --> 00:28:14,880
no no you can't yeah so the question is

810
00:28:13,200 --> 00:28:17,760
can i create arbitrary site tags

811
00:28:14,880 --> 00:28:18,480
you can create site tags from a very

812
00:28:17,760 --> 00:28:20,559
specific

813
00:28:18,480 --> 00:28:21,919
uh you can create arbitrary you can

814
00:28:20,559 --> 00:28:23,279
create a site text from anything you

815
00:28:21,919 --> 00:28:25,919
have to create a site text from

816
00:28:23,279 --> 00:28:27,039
one of the existing tags and a limited

817
00:28:25,919 --> 00:28:29,760
set of data inside

818
00:28:27,039 --> 00:28:31,039
tags right but if you have like packages

819
00:28:29,760 --> 00:28:33,279
that have fedora

820
00:28:31,039 --> 00:28:35,120
that you think that are you know

821
00:28:33,279 --> 00:28:36,159
together but maybe vermont gamers don't

822
00:28:35,120 --> 00:28:39,279
think so

823
00:28:36,159 --> 00:28:41,919
so how is this settled so

824
00:28:39,279 --> 00:28:43,200
uh how can we add like a what happens if

825
00:28:41,919 --> 00:28:45,360
in the case where i cannot

826
00:28:43,200 --> 00:28:47,520
i'm hiding packages in the site tag

827
00:28:45,360 --> 00:28:49,918
which maintainer may disagree with

828
00:28:47,520 --> 00:28:50,879
uh well that we are coming back to the

829
00:28:49,919 --> 00:28:52,960
nvr question

830
00:28:50,880 --> 00:28:54,960
uh to be to build something in fedora

831
00:28:52,960 --> 00:28:56,720
you need to change the spec file

832
00:28:54,960 --> 00:28:58,000
to change the spec file you need to have

833
00:28:56,720 --> 00:28:59,440
the right to change the spec file and

834
00:28:58,000 --> 00:29:00,640
not everybody is going to have the

835
00:28:59,440 --> 00:29:03,840
permission to charge

836
00:29:00,640 --> 00:29:05,279
every spec file there so the chances are

837
00:29:03,840 --> 00:29:07,840
that you're going to

838
00:29:05,279 --> 00:29:08,320
include that you have the permissions to

839
00:29:07,840 --> 00:29:10,000
build

840
00:29:08,320 --> 00:29:12,480
that you have the permission to change

841
00:29:10,000 --> 00:29:14,640
the spec file to do the build

842
00:29:12,480 --> 00:29:15,840
then end up in your site tags i'm going

843
00:29:14,640 --> 00:29:18,159
to say would be pretty low

844
00:29:15,840 --> 00:29:20,000
because you normally have permissions

845
00:29:18,159 --> 00:29:21,919
the packages

846
00:29:20,000 --> 00:29:23,120
you should be concerned about or that

847
00:29:21,919 --> 00:29:24,880
you're maintaining and that's your own

848
00:29:23,120 --> 00:29:27,120
set of packages

849
00:29:24,880 --> 00:29:28,159
and if you are one of the few people

850
00:29:27,120 --> 00:29:30,559
that have access to

851
00:29:28,159 --> 00:29:32,000
everything then we expect you to know

852
00:29:30,559 --> 00:29:34,480
better than to mess around just for the

853
00:29:32,000 --> 00:29:34,480
fun of it

854
00:29:37,120 --> 00:29:40,879
so there is one there is one change

855
00:29:39,520 --> 00:29:44,639
between what i've presented

856
00:29:40,880 --> 00:29:47,760
at flock and what is uh sorry

857
00:29:44,640 --> 00:29:48,480
what is uh currently in action so what

858
00:29:47,760 --> 00:29:51,600
you see

859
00:29:48,480 --> 00:29:54,240
in with the multi-build is that we have

860
00:29:51,600 --> 00:29:56,320
where the user it go it builds it goes

861
00:29:54,240 --> 00:29:58,880
to body and then through the signatory

862
00:29:56,320 --> 00:30:00,240
if you remember what before and if i'm

863
00:29:58,880 --> 00:30:02,080
tweaking the right direction that would

864
00:30:00,240 --> 00:30:04,559
be easier

865
00:30:02,080 --> 00:30:05,840
we had it built it's signed and then it

866
00:30:04,559 --> 00:30:07,520
sends up in body

867
00:30:05,840 --> 00:30:09,120
and i was basically creating two

868
00:30:07,520 --> 00:30:10,879
workflows depending if you

869
00:30:09,120 --> 00:30:13,360
were considering a single build or multi

870
00:30:10,880 --> 00:30:15,200
builds so we changed

871
00:30:13,360 --> 00:30:16,399
we changed the workflow for single build

872
00:30:15,200 --> 00:30:19,440
a little bit

873
00:30:16,399 --> 00:30:20,479
uh now when you build it's first goes to

874
00:30:19,440 --> 00:30:22,799
body

875
00:30:20,480 --> 00:30:24,640
so you already have your update that

876
00:30:22,799 --> 00:30:27,760
update is being signed

877
00:30:24,640 --> 00:30:30,720
and then it's being tested so we have a

878
00:30:27,760 --> 00:30:32,320
we have a much more similar uh more flow

879
00:30:30,720 --> 00:30:32,880
between the multi build and the single

880
00:30:32,320 --> 00:30:34,240
button

881
00:30:32,880 --> 00:30:36,320
one of the advantage here is that

882
00:30:34,240 --> 00:30:39,039
basically as soon as it's built you have

883
00:30:36,320 --> 00:30:41,678
a body update that video date is in the

884
00:30:39,039 --> 00:30:43,360
pending state with whatever you know if

885
00:30:41,679 --> 00:30:45,360
you have a single build or a multi build

886
00:30:43,360 --> 00:30:47,439
you have an update in pending state

887
00:30:45,360 --> 00:30:49,520
once it's signed you have it in testing

888
00:30:47,440 --> 00:30:50,559
state and once inside you have been

889
00:30:49,520 --> 00:30:52,480
stable

890
00:30:50,559 --> 00:30:54,080
so it's a it's just to make sure that we

891
00:30:52,480 --> 00:30:56,559
have uh something correct between the

892
00:30:54,080 --> 00:30:59,600
digital workflows

893
00:30:56,559 --> 00:31:00,080
um that's just a little bit on uh going

894
00:30:59,600 --> 00:31:03,360
through

895
00:31:00,080 --> 00:31:05,199
how the decision frameworks works so we

896
00:31:03,360 --> 00:31:06,559
have as i was saying we have body that

897
00:31:05,200 --> 00:31:09,679
starts in update

898
00:31:06,559 --> 00:31:12,158
and basically um

899
00:31:09,679 --> 00:31:14,080
yeah buddy buddy basically triggers the

900
00:31:12,159 --> 00:31:15,679
the ci system by saying that update is

901
00:31:14,080 --> 00:31:18,559
really to be tested

902
00:31:15,679 --> 00:31:19,360
the crt system will run on the test

903
00:31:18,559 --> 00:31:20,879
finds

904
00:31:19,360 --> 00:31:22,479
and it will send the results to

905
00:31:20,880 --> 00:31:23,760
something which is called nicely

906
00:31:22,480 --> 00:31:25,919
resultstv

907
00:31:23,760 --> 00:31:28,158
so it's just a it's basically just a

908
00:31:25,919 --> 00:31:30,159
database with an api in the front of it

909
00:31:28,159 --> 00:31:30,480
that just stores whatever we turn into

910
00:31:30,159 --> 00:31:32,320
it

911
00:31:30,480 --> 00:31:34,080
it's a keystore database you can just

912
00:31:32,320 --> 00:31:35,760
put anything in there it's backed up by

913
00:31:34,080 --> 00:31:36,639
squadron but it's basically a key value

914
00:31:35,760 --> 00:31:39,919
store it's

915
00:31:36,640 --> 00:31:41,760
really you can put anything in there um

916
00:31:39,919 --> 00:31:43,760
every time there is a new result it's

917
00:31:41,760 --> 00:31:46,000
going to announce it i have a new result

918
00:31:43,760 --> 00:31:46,799
i have a new result i have any results

919
00:31:46,000 --> 00:31:48,960
then we have

920
00:31:46,799 --> 00:31:51,279
green wave here which is our decision

921
00:31:48,960 --> 00:31:53,200
engine it basically has a set of rules

922
00:31:51,279 --> 00:31:55,039
and it says well every time i'm seeing a

923
00:31:53,200 --> 00:32:00,159
new result i'm going to check

924
00:31:55,039 --> 00:32:01,519
well is can i make a decision now

925
00:32:00,159 --> 00:32:03,039
this package has been tested i have a

926
00:32:01,519 --> 00:32:04,080
new result about this package can i make

927
00:32:03,039 --> 00:32:05,279
a decision

928
00:32:04,080 --> 00:32:07,199
what are the rules applying to this

929
00:32:05,279 --> 00:32:08,720
package uh no

930
00:32:07,200 --> 00:32:10,720
i'm still missing a test i'm not going

931
00:32:08,720 --> 00:32:13,519
to i'm not going to do anything

932
00:32:10,720 --> 00:32:15,039
hey a new results coming hey that result

933
00:32:13,519 --> 00:32:17,279
failed all right then

934
00:32:15,039 --> 00:32:18,158
i already know that this result was a

935
00:32:17,279 --> 00:32:19,919
requirement

936
00:32:18,159 --> 00:32:21,760
so i can announce that this update is

937
00:32:19,919 --> 00:32:24,880
not going through because that build

938
00:32:21,760 --> 00:32:25,919
is has failed um so this is what

939
00:32:24,880 --> 00:32:27,919
happened ci

940
00:32:25,919 --> 00:32:29,120
ci sends the result to result tv that

941
00:32:27,919 --> 00:32:31,519
sort them

942
00:32:29,120 --> 00:32:32,158
green wave gets the result from resource

943
00:32:31,519 --> 00:32:33,600
db

944
00:32:32,159 --> 00:32:35,600
and makes a decision based on these

945
00:32:33,600 --> 00:32:36,719
results and send that decision back to

946
00:32:35,600 --> 00:32:38,719
body

947
00:32:36,720 --> 00:32:41,039
if the user disagrees with them because

948
00:32:38,720 --> 00:32:42,559
hey bugs are bugs networks are networks

949
00:32:41,039 --> 00:32:46,320
and computers sometimes fails us

950
00:32:42,559 --> 00:32:48,879
surprisingly the user can override that

951
00:32:46,320 --> 00:32:50,399
and overriding this is basically

952
00:32:48,880 --> 00:32:52,480
throwing a waiver

953
00:32:50,399 --> 00:32:54,479
so you send you send a waiver that says

954
00:32:52,480 --> 00:32:56,159
this result that you find in result db

955
00:32:54,480 --> 00:32:58,480
you ignore it

956
00:32:56,159 --> 00:33:00,080
you can also say these results that you

957
00:32:58,480 --> 00:33:02,960
don't find in results db

958
00:33:00,080 --> 00:33:04,480
you ignore them so if something is stuck

959
00:33:02,960 --> 00:33:06,159
if something is broken the

960
00:33:04,480 --> 00:33:07,679
the ci system just simply doesn't work

961
00:33:06,159 --> 00:33:08,960
anymore well you're not strong in your

962
00:33:07,679 --> 00:33:11,519
results

963
00:33:08,960 --> 00:33:12,880
so your date is blocked because

964
00:33:11,519 --> 00:33:13,679
something is broken and just doesn't

965
00:33:12,880 --> 00:33:15,120
move along

966
00:33:13,679 --> 00:33:17,200
so you can say well you know what just

967
00:33:15,120 --> 00:33:19,760
ignore everything that's not

968
00:33:17,200 --> 00:33:21,519
present and then green wave is going to

969
00:33:19,760 --> 00:33:23,360
be notified about new ever

970
00:33:21,519 --> 00:33:25,360
he's going to say can i can i change my

971
00:33:23,360 --> 00:33:27,360
decision should i change my decision

972
00:33:25,360 --> 00:33:29,760
and if it does it notifies body that

973
00:33:27,360 --> 00:33:32,080
will react based on that

974
00:33:29,760 --> 00:33:33,440
so that's a little bit uh the framework

975
00:33:32,080 --> 00:33:35,039
uh i'm mentioning

976
00:33:33,440 --> 00:33:36,559
i will stop promotion dislike because if

977
00:33:35,039 --> 00:33:40,000
you're into result tv bring

978
00:33:36,559 --> 00:33:41,519
well resourcefully these are the trio

979
00:33:40,000 --> 00:33:44,720
that's used for actually making a

980
00:33:41,519 --> 00:33:44,720
decision about getting out

981
00:33:45,679 --> 00:33:50,480
so how can we debug ourselves well as i

982
00:33:48,880 --> 00:33:52,320
was saying one of the quick ways to

983
00:33:50,480 --> 00:33:55,360
check the koji tags so

984
00:33:52,320 --> 00:33:56,399
you run cody built info you put the tnv

985
00:33:55,360 --> 00:33:58,799
of your build there

986
00:33:56,399 --> 00:34:00,559
it will you have a line that says tag

987
00:33:58,799 --> 00:34:02,480
and then you just look into that

988
00:34:00,559 --> 00:34:03,760
if it's a single build and it's an

989
00:34:02,480 --> 00:34:06,559
update testing

990
00:34:03,760 --> 00:34:08,320
well it hasn't been picked up by body

991
00:34:06,559 --> 00:34:10,639
something is wrong with body

992
00:34:08,320 --> 00:34:11,679
if it's a side tag then that's for me to

993
00:34:10,639 --> 00:34:14,240
build

994
00:34:11,679 --> 00:34:15,839
uh then it's still a body problem if

995
00:34:14,239 --> 00:34:16,959
it's in sign in pending

996
00:34:15,839 --> 00:34:19,040
then there is something wrong with

997
00:34:16,960 --> 00:34:20,159
verbal signatory it could be that robust

998
00:34:19,040 --> 00:34:21,599
signatory is just

999
00:34:20,159 --> 00:34:23,200
doing going through the master build and

1000
00:34:21,599 --> 00:34:25,359
it's very buzzing it's just you know it

1001
00:34:23,199 --> 00:34:27,040
doesn't caught up with your build yet

1002
00:34:25,359 --> 00:34:28,799
but it could be that from the signatory

1003
00:34:27,040 --> 00:34:29,918
somehow broke the connection with the

1004
00:34:28,800 --> 00:34:32,879
signing server and

1005
00:34:29,918 --> 00:34:34,399
needs to needs to have a gentle poke uh

1006
00:34:32,879 --> 00:34:37,679
resort

1007
00:34:34,399 --> 00:34:39,759
uh if it's in testing pending well

1008
00:34:37,679 --> 00:34:41,359
it's waiting for the ci system it could

1009
00:34:39,760 --> 00:34:42,720
be that the cia system is proceeding a

1010
00:34:41,359 --> 00:34:44,639
lot of requests or it could be that the

1011
00:34:42,719 --> 00:34:45,678
cr system is done for maintenance or for

1012
00:34:44,639 --> 00:34:48,560
something else

1013
00:34:45,679 --> 00:34:49,918
so you know if you're there it's

1014
00:34:48,560 --> 00:34:51,440
probably something you know if you're

1015
00:34:49,918 --> 00:34:53,440
in one of these two here it's probably

1016
00:34:51,440 --> 00:34:54,720
uh an infra issue

1017
00:34:53,440 --> 00:34:55,918
if you stay there too long that's

1018
00:34:54,719 --> 00:34:57,279
definitely gonna emphasize you if you

1019
00:34:55,918 --> 00:34:59,359
stay there too long

1020
00:34:57,280 --> 00:35:00,880
it could be a robo signature swap or

1021
00:34:59,359 --> 00:35:02,960
it's needs a result

1022
00:35:00,880 --> 00:35:04,400
if you're there it's less i see a

1023
00:35:02,960 --> 00:35:05,440
slighter increase you and more

1024
00:35:04,400 --> 00:35:09,040
potentially more

1025
00:35:05,440 --> 00:35:10,560
a ci problem or a cs system problem

1026
00:35:09,040 --> 00:35:12,079
another way to look into that is to look

1027
00:35:10,560 --> 00:35:15,279
at the the state

1028
00:35:12,079 --> 00:35:18,079
of your body updates if it's pending

1029
00:35:15,280 --> 00:35:18,640
it's not signed so pending means we have

1030
00:35:18,079 --> 00:35:20,720
moved

1031
00:35:18,640 --> 00:35:22,319
the we've we've seen the building update

1032
00:35:20,720 --> 00:35:23,040
candidates we've created the data

1033
00:35:22,320 --> 00:35:25,599
spending

1034
00:35:23,040 --> 00:35:26,640
and we are waiting for it to be signed

1035
00:35:25,599 --> 00:35:28,240
if it's in testing

1036
00:35:26,640 --> 00:35:30,799
then the tests are running or the

1037
00:35:28,240 --> 00:35:31,279
package is good and if it's stable then

1038
00:35:30,800 --> 00:35:32,800
that

1039
00:35:31,280 --> 00:35:34,480
well you don't you're not debugging

1040
00:35:32,800 --> 00:35:36,720
anymore it's working or it should be

1041
00:35:34,480 --> 00:35:36,720
working

1042
00:35:37,200 --> 00:35:42,319
so some of the some of the some of the

1043
00:35:40,079 --> 00:35:44,240
user feedback we collected over the

1044
00:35:42,320 --> 00:35:46,000
over the last months was the first of

1045
00:35:44,240 --> 00:35:49,439
all the introducing body

1046
00:35:46,000 --> 00:35:51,440
as a as a element of the right workflow

1047
00:35:49,440 --> 00:35:53,359
introduced a lot of email notifications

1048
00:35:51,440 --> 00:35:54,079
basically a single build will give you

1049
00:35:53,359 --> 00:35:57,200
between

1050
00:35:54,079 --> 00:35:57,520
five and seven emails uh you know you

1051
00:35:57,200 --> 00:35:59,359
get

1052
00:35:57,520 --> 00:36:00,720
one for your data has been created you

1053
00:35:59,359 --> 00:36:02,000
have been have been pushed your thing

1054
00:36:00,720 --> 00:36:03,839
has been tested you're

1055
00:36:02,000 --> 00:36:05,839
in you've been your update is being

1056
00:36:03,839 --> 00:36:08,560
pushed to stable

1057
00:36:05,839 --> 00:36:09,279
yeah okay uh right used to send you no

1058
00:36:08,560 --> 00:36:11,440
emails

1059
00:36:09,280 --> 00:36:12,800
it's now sending you five per update

1060
00:36:11,440 --> 00:36:15,920
that's a little bit too much

1061
00:36:12,800 --> 00:36:16,480
uh we reduced it to three uh basically

1062
00:36:15,920 --> 00:36:19,839
tells you

1063
00:36:16,480 --> 00:36:22,720
your update is uh have been created

1064
00:36:19,839 --> 00:36:24,560
if the test results failed it will

1065
00:36:22,720 --> 00:36:27,040
notify you if they pass it once

1066
00:36:24,560 --> 00:36:27,599
and your update has been pushed that's

1067
00:36:27,040 --> 00:36:29,680
basically

1068
00:36:27,599 --> 00:36:30,800
the only three that you should get if

1069
00:36:29,680 --> 00:36:31,598
it's still too much we're happy to

1070
00:36:30,800 --> 00:36:34,079
revisit

1071
00:36:31,599 --> 00:36:35,520
this is how we've the middle ground

1072
00:36:34,079 --> 00:36:37,119
reform for now

1073
00:36:35,520 --> 00:36:38,640
if people complain too loudly we are

1074
00:36:37,119 --> 00:36:40,640
happy to reuse it and see which of these

1075
00:36:38,640 --> 00:36:41,598
emails are actually useful and which are

1076
00:36:40,640 --> 00:36:44,400
actually not

1077
00:36:41,599 --> 00:36:45,599
that useful uh when we introduce

1078
00:36:44,400 --> 00:36:47,920
multi-bill getting

1079
00:36:45,599 --> 00:36:49,680
uh you may if you're a federal publisher

1080
00:36:47,920 --> 00:36:51,040
you may have seen the new ui introduced

1081
00:36:49,680 --> 00:36:54,240
with body fico

1082
00:36:51,040 --> 00:36:55,599
you didn't see the the the mechanism

1083
00:36:54,240 --> 00:36:56,799
underneath it for multi-getting because

1084
00:36:55,599 --> 00:36:59,119
we haven't announced it

1085
00:36:56,800 --> 00:37:00,720
at that time uh but there were some

1086
00:36:59,119 --> 00:37:03,280
changes there like

1087
00:37:00,720 --> 00:37:05,598
the the list of bills used to be either

1088
00:37:03,280 --> 00:37:07,440
space delimited or comma delimited

1089
00:37:05,599 --> 00:37:08,720
and we removed the support for comma

1090
00:37:07,440 --> 00:37:09,680
which made the coaches a lot more

1091
00:37:08,720 --> 00:37:11,919
complex for

1092
00:37:09,680 --> 00:37:14,160
little game so now a list of builds

1093
00:37:11,920 --> 00:37:16,320
should be only space delimited

1094
00:37:14,160 --> 00:37:18,560
uh there used to be there is a mechanism

1095
00:37:16,320 --> 00:37:21,119
that goes to create all of your builds

1096
00:37:18,560 --> 00:37:22,320
in koji uh as you know the bills you've

1097
00:37:21,119 --> 00:37:24,720
made in koji

1098
00:37:22,320 --> 00:37:26,640
and the mechanism was such that it would

1099
00:37:24,720 --> 00:37:28,959
basically block the input field

1100
00:37:26,640 --> 00:37:30,560
while it was loading the bills from koji

1101
00:37:28,960 --> 00:37:32,800
and it turns out that that request to

1102
00:37:30,560 --> 00:37:34,880
koji is sometimes very slow

1103
00:37:32,800 --> 00:37:36,720
or that you have hundreds of packages or

1104
00:37:34,880 --> 00:37:39,200
hundreds of bills that you've made

1105
00:37:36,720 --> 00:37:41,040
and so you couldn't copy and paste so

1106
00:37:39,200 --> 00:37:42,799
we've that was a

1107
00:37:41,040 --> 00:37:44,480
feature that's a feature that we thought

1108
00:37:42,800 --> 00:37:45,520
was good and that we were told no that's

1109
00:37:44,480 --> 00:37:48,320
not good

1110
00:37:45,520 --> 00:37:49,920
uh so like the gnome folks who wonder

1111
00:37:48,320 --> 00:37:51,040
who updates android packages at once

1112
00:37:49,920 --> 00:37:53,040
they are actually tracking

1113
00:37:51,040 --> 00:37:54,720
uh dnvr in the text file and then they

1114
00:37:53,040 --> 00:37:56,720
just copy paste in the field

1115
00:37:54,720 --> 00:37:58,560
and they couldn't do that before so

1116
00:37:56,720 --> 00:38:00,720
we've reverted that change

1117
00:37:58,560 --> 00:38:03,520
you can now easily copy paste your nvr

1118
00:38:00,720 --> 00:38:05,118
as you did before

1119
00:38:03,520 --> 00:38:08,000
and yeah the next that's the next point

1120
00:38:05,119 --> 00:38:09,520
here the the logic that goes and creates

1121
00:38:08,000 --> 00:38:11,040
body to know which uh

1122
00:38:09,520 --> 00:38:12,400
coaches are you know which builds you've

1123
00:38:11,040 --> 00:38:13,040
made is still a little bit slow and we

1124
00:38:12,400 --> 00:38:16,000
still need to

1125
00:38:13,040 --> 00:38:16,640
to look at the performance there we saw

1126
00:38:16,000 --> 00:38:18,320
that

1127
00:38:16,640 --> 00:38:20,720
someone that came to us and asked us

1128
00:38:18,320 --> 00:38:22,480
well there is no point in having people

1129
00:38:20,720 --> 00:38:24,240
allowing people to comment on an update

1130
00:38:22,480 --> 00:38:26,240
once it's pushed to stable

1131
00:38:24,240 --> 00:38:28,000
and i've heard of that happening to few

1132
00:38:26,240 --> 00:38:28,560
of my updates and it's annoying so

1133
00:38:28,000 --> 00:38:30,640
please

1134
00:38:28,560 --> 00:38:32,320
disable comments once an update is

1135
00:38:30,640 --> 00:38:35,440
pushed to stable

1136
00:38:32,320 --> 00:38:38,640
and we've had adam w uh coming

1137
00:38:35,440 --> 00:38:40,640
back to us and saying no

1138
00:38:38,640 --> 00:38:42,319
because the update turns out the update

1139
00:38:40,640 --> 00:38:43,359
is still a mechanism where we can point

1140
00:38:42,320 --> 00:38:45,040
people well

1141
00:38:43,359 --> 00:38:46,880
that update brought this and this the

1142
00:38:45,040 --> 00:38:49,200
boxing ticket is over there

1143
00:38:46,880 --> 00:38:50,720
so as a user if you run into a buddy

1144
00:38:49,200 --> 00:38:52,240
update it may actually be useful to

1145
00:38:50,720 --> 00:38:54,720
still be able to comment on it

1146
00:38:52,240 --> 00:38:57,520
even though the update has been pushed

1147
00:38:54,720 --> 00:38:59,200
so that got rebooted as well

1148
00:38:57,520 --> 00:39:01,759
if you have more feedback i'm more than

1149
00:38:59,200 --> 00:39:04,560
happy to take it to take it with me

1150
00:39:01,760 --> 00:39:05,119
and i'm sure we'll work through uh

1151
00:39:04,560 --> 00:39:07,040
either

1152
00:39:05,119 --> 00:39:08,320
finding a way to make it work for you or

1153
00:39:07,040 --> 00:39:11,920
just fixing the

1154
00:39:08,320 --> 00:39:12,880
the damn thing okay so where do we want

1155
00:39:11,920 --> 00:39:15,119
to go from that

1156
00:39:12,880 --> 00:39:16,880
well we now have mechanisms to gate

1157
00:39:15,119 --> 00:39:19,520
something

1158
00:39:16,880 --> 00:39:20,640
we still need to optimize testing and

1159
00:39:19,520 --> 00:39:23,200
reporting

1160
00:39:20,640 --> 00:39:25,118
or test results for groups so if i have

1161
00:39:23,200 --> 00:39:27,200
currently 500 builds

1162
00:39:25,119 --> 00:39:28,400
i'm going to create greenway for give me

1163
00:39:27,200 --> 00:39:29,759
the studies about that being given the

1164
00:39:28,400 --> 00:39:31,119
status about this will give me the

1165
00:39:29,760 --> 00:39:32,800
status about this build

1166
00:39:31,119 --> 00:39:34,480
so that's a little bit inefficient when

1167
00:39:32,800 --> 00:39:36,320
we can tell when greenway

1168
00:39:34,480 --> 00:39:38,240
when the cia system knows that it's been

1169
00:39:36,320 --> 00:39:40,400
tested these android packages

1170
00:39:38,240 --> 00:39:41,919
and could just say as once well you know

1171
00:39:40,400 --> 00:39:43,280
this group of packages that i have

1172
00:39:41,920 --> 00:39:46,079
tested

1173
00:39:43,280 --> 00:39:47,520
they failed ci that would be one request

1174
00:39:46,079 --> 00:39:50,240
to green wave that would be one

1175
00:39:47,520 --> 00:39:51,599
way to optimize things uh nicely so this

1176
00:39:50,240 --> 00:39:52,160
is something which is uh which is in

1177
00:39:51,599 --> 00:39:55,520
progress

1178
00:39:52,160 --> 00:39:58,399
uh and hopefully we'll end soon

1179
00:39:55,520 --> 00:39:59,520
then we still need to work on the okay

1180
00:39:58,400 --> 00:40:01,040
now i'm breaking back to

1181
00:39:59,520 --> 00:40:03,040
what i said would not be part of the

1182
00:40:01,040 --> 00:40:05,440
topic but it is now

1183
00:40:03,040 --> 00:40:06,720
what do we want to get on so what are

1184
00:40:05,440 --> 00:40:08,640
what are our tests

1185
00:40:06,720 --> 00:40:10,480
currently the tests are defined in the

1186
00:40:08,640 --> 00:40:13,200
package repository

1187
00:40:10,480 --> 00:40:14,880
and they are defined by anyone basically

1188
00:40:13,200 --> 00:40:16,160
anyone can go there and there is a

1189
00:40:14,880 --> 00:40:16,720
specification that the test should

1190
00:40:16,160 --> 00:40:19,200
follow

1191
00:40:16,720 --> 00:40:21,359
they are using ansible and you can you

1192
00:40:19,200 --> 00:40:23,839
can basically write your own tests

1193
00:40:21,359 --> 00:40:25,520
this is great except that having twenty

1194
00:40:23,839 --> 00:40:26,160
thousand pack or you know two thousand

1195
00:40:25,520 --> 00:40:28,560
packages

1196
00:40:26,160 --> 00:40:30,879
writing twenty thousand tests for all

1197
00:40:28,560 --> 00:40:32,880
packages and making sure that

1198
00:40:30,880 --> 00:40:34,640
you know we all want to test whether we

1199
00:40:32,880 --> 00:40:36,960
can install or update or

1200
00:40:34,640 --> 00:40:38,078
remove a package there is no need to

1201
00:40:36,960 --> 00:40:39,839
have two thousand

1202
00:40:38,079 --> 00:40:41,440
people do that for twenty thousand

1203
00:40:39,839 --> 00:40:43,200
ripples we could do that

1204
00:40:41,440 --> 00:40:44,960
for the entire distro in one go and

1205
00:40:43,200 --> 00:40:45,839
that's one test to maintain instead of

1206
00:40:44,960 --> 00:40:48,160
having

1207
00:40:45,839 --> 00:40:50,640
a different crm all from ansible doing

1208
00:40:48,160 --> 00:40:53,040
the same tests for every single package

1209
00:40:50,640 --> 00:40:54,240
so we want to look into uh destroy-level

1210
00:40:53,040 --> 00:40:56,000
testing

1211
00:40:54,240 --> 00:40:57,680
some of them are reverse dependency

1212
00:40:56,000 --> 00:40:59,920
testing being able to run the test of

1213
00:40:57,680 --> 00:41:01,919
the package that depends on me

1214
00:40:59,920 --> 00:41:03,839
uh being able to install to upgrade to

1215
00:41:01,920 --> 00:41:05,200
downgrade to remove

1216
00:41:03,839 --> 00:41:07,920
and we also want to look at the impact

1217
00:41:05,200 --> 00:41:12,160
on compasses does your update

1218
00:41:07,920 --> 00:41:12,720
break compose can i push a new rawhide

1219
00:41:12,160 --> 00:41:16,319
update

1220
00:41:12,720 --> 00:41:19,359
if your build goes into goes in there

1221
00:41:16,319 --> 00:41:20,560
so we don't know yet how we are going to

1222
00:41:19,359 --> 00:41:21,920
achieve this one

1223
00:41:20,560 --> 00:41:24,640
but that is one of the things we would

1224
00:41:21,920 --> 00:41:24,640
like to go to

1225
00:41:24,800 --> 00:41:28,560
something else that we are looking into

1226
00:41:26,240 --> 00:41:30,879
is uh we have the agreement from the

1227
00:41:28,560 --> 00:41:32,880
fiscal the technical steering committee

1228
00:41:30,880 --> 00:41:34,400
in federer the engineering committee in

1229
00:41:32,880 --> 00:41:36,240
fedora

1230
00:41:34,400 --> 00:41:37,760
so we have introduced three test

1231
00:41:36,240 --> 00:41:40,000
packages

1232
00:41:37,760 --> 00:41:41,760
so they are they only there are spec

1233
00:41:40,000 --> 00:41:44,720
files which only

1234
00:41:41,760 --> 00:41:46,319
ship a uuid in a certain file and just

1235
00:41:44,720 --> 00:41:48,160
you can install them they won't do you

1236
00:41:46,319 --> 00:41:49,920
any ar but on your side you really

1237
00:41:48,160 --> 00:41:51,200
shouldn't install them because there are

1238
00:41:49,920 --> 00:41:52,640
no use at all

1239
00:41:51,200 --> 00:41:54,319
but they are useful for us because

1240
00:41:52,640 --> 00:41:56,560
basically um

1241
00:41:54,319 --> 00:41:57,520
while working on this we want scripts to

1242
00:41:56,560 --> 00:41:59,279
be able to make sure

1243
00:41:57,520 --> 00:42:01,440
things were working and since we are

1244
00:41:59,280 --> 00:42:03,760
touching so many systems it's easy to

1245
00:42:01,440 --> 00:42:05,359
you know to lose one on in the stuff so

1246
00:42:03,760 --> 00:42:06,640
the idea is to have this script run on a

1247
00:42:05,359 --> 00:42:09,279
regular basis

1248
00:42:06,640 --> 00:42:10,879
you know uh once a day twice a day every

1249
00:42:09,280 --> 00:42:13,200
two hours something like this

1250
00:42:10,880 --> 00:42:14,720
and check is everything fine is

1251
00:42:13,200 --> 00:42:16,240
everything fine

1252
00:42:14,720 --> 00:42:18,319
are the test running are the tests

1253
00:42:16,240 --> 00:42:19,520
failing can i wait the test is my update

1254
00:42:18,319 --> 00:42:21,440
going through

1255
00:42:19,520 --> 00:42:23,359
and then so for a single package as well

1256
00:42:21,440 --> 00:42:26,400
as for two uh a build of

1257
00:42:23,359 --> 00:42:29,920
an update of two builds so two like two

1258
00:42:26,400 --> 00:42:31,119
single bits so those are the things that

1259
00:42:29,920 --> 00:42:33,920
we are currently working on

1260
00:42:31,119 --> 00:42:35,119
uh so that will uh that will come out

1261
00:42:33,920 --> 00:42:38,079
soon uh

1262
00:42:35,119 --> 00:42:39,599
yeah soon i guess and um one of the

1263
00:42:38,079 --> 00:42:41,359
discussion there was on the level list

1264
00:42:39,599 --> 00:42:42,400
recently about the infrastructure is not

1265
00:42:41,359 --> 00:42:45,440
reliable

1266
00:42:42,400 --> 00:42:47,920
well using this we may be able to

1267
00:42:45,440 --> 00:42:49,599
look into how fun things break in the

1268
00:42:47,920 --> 00:42:51,040
entire workflow not a single application

1269
00:42:49,599 --> 00:42:52,560
but the entire workflows

1270
00:42:51,040 --> 00:42:54,560
how often does the workflow break

1271
00:42:52,560 --> 00:42:55,920
because one application breaks

1272
00:42:54,560 --> 00:42:58,078
it may be a different application at the

1273
00:42:55,920 --> 00:43:00,160
time but the result is as a packager my

1274
00:42:58,079 --> 00:43:02,079
workflow does not work

1275
00:43:00,160 --> 00:43:05,598
uh so we might be able to measure how

1276
00:43:02,079 --> 00:43:07,280
often things break and often they don't

1277
00:43:05,599 --> 00:43:09,280
and that would also help us you know

1278
00:43:07,280 --> 00:43:11,119
when we roll out a new version of body

1279
00:43:09,280 --> 00:43:11,680
or new version of koji in exchange so

1280
00:43:11,119 --> 00:43:13,920
that

1281
00:43:11,680 --> 00:43:15,680
what we want the best this is our best

1282
00:43:13,920 --> 00:43:16,400
scenario and we don't test every single

1283
00:43:15,680 --> 00:43:18,399
sketch

1284
00:43:16,400 --> 00:43:21,440
but we want to make sure that at least

1285
00:43:18,400 --> 00:43:23,599
the best scenario case should work right

1286
00:43:21,440 --> 00:43:25,200
and another thing which we have in our

1287
00:43:23,599 --> 00:43:26,720
roadmap and i don't know how we'll get

1288
00:43:25,200 --> 00:43:28,240
to this was the the must rebuild the

1289
00:43:26,720 --> 00:43:29,598
scanning of robotic naturally during

1290
00:43:28,240 --> 00:43:30,959
master build

1291
00:43:29,599 --> 00:43:33,920
that is something which has happened in

1292
00:43:30,960 --> 00:43:35,440
the past it was annoying for a few days

1293
00:43:33,920 --> 00:43:37,280
there are high chances it will happen

1294
00:43:35,440 --> 00:43:41,520
again in the in the future

1295
00:43:37,280 --> 00:43:44,240
uh as much as we will try to avoid it

1296
00:43:41,520 --> 00:43:45,839
so finally a small surprise for the all

1297
00:43:44,240 --> 00:43:46,720
of you who have been who are fellow gap

1298
00:43:45,839 --> 00:43:48,078
but catcher

1299
00:43:46,720 --> 00:43:50,240
if you're a pencil packager you're

1300
00:43:48,079 --> 00:43:53,440
probably less interested in this one

1301
00:43:50,240 --> 00:43:54,799
and you've stayed so far so with builds

1302
00:43:53,440 --> 00:43:57,599
we have introduced fundamental

1303
00:43:54,800 --> 00:43:58,880
tags so you can create your site tag

1304
00:43:57,599 --> 00:44:01,280
whenever you want

1305
00:43:58,880 --> 00:44:03,359
well they were for right but they don't

1306
00:44:01,280 --> 00:44:05,520
work only for her height

1307
00:44:03,359 --> 00:44:07,759
which means you can create a site tag

1308
00:44:05,520 --> 00:44:10,640
for a stable release branch

1309
00:44:07,760 --> 00:44:13,119
which means flat package chain build

1310
00:44:10,640 --> 00:44:15,520
which was only a raw height feature

1311
00:44:13,119 --> 00:44:16,400
now work since stable fedora releases as

1312
00:44:15,520 --> 00:44:18,800
well

1313
00:44:16,400 --> 00:44:20,720
you can create your site tax 530 and

1314
00:44:18,800 --> 00:44:22,640
chain guild 200 builds in there

1315
00:44:20,720 --> 00:44:25,680
and crank them into one update in

1316
00:44:22,640 --> 00:44:29,040
basically two commands

1317
00:44:25,680 --> 00:44:32,319
so enjoy that and that's it for me

1318
00:44:29,040 --> 00:44:32,319
if you have any questions i'm happy to

1319
00:44:34,839 --> 00:44:37,839
continue

1320
00:44:48,160 --> 00:44:52,960
know how to report uh so the question is

1321
00:44:52,000 --> 00:44:56,400
how can i plug

1322
00:44:52,960 --> 00:44:59,200
my own ci system in this workflow

1323
00:44:56,400 --> 00:45:00,720
uh yeah there is a we are working on

1324
00:44:59,200 --> 00:45:03,439
standards on how to

1325
00:45:00,720 --> 00:45:04,959
there is a fairly defined message from

1326
00:45:03,440 --> 00:45:05,680
body that says this update is ready to

1327
00:45:04,960 --> 00:45:08,319
be tested

1328
00:45:05,680 --> 00:45:09,839
so you can trigger off the idea is you

1329
00:45:08,319 --> 00:45:11,759
trigger off

1330
00:45:09,839 --> 00:45:14,560
fedora messaging and you report to

1331
00:45:11,760 --> 00:45:14,560
federal messaging

1332
00:45:14,720 --> 00:45:18,560
so there is a there is a defined message

1333
00:45:16,800 --> 00:45:20,480
from body that's triggers

1334
00:45:18,560 --> 00:45:22,240
and there is a standard format that is

1335
00:45:20,480 --> 00:45:24,880
expected for the report

1336
00:45:22,240 --> 00:45:26,240
and then there is one small piece of of

1337
00:45:24,880 --> 00:45:27,680
software that basically

1338
00:45:26,240 --> 00:45:29,118
is the piece which listen to the bus and

1339
00:45:27,680 --> 00:45:30,000
then plus the results a bit needs to be

1340
00:45:29,119 --> 00:45:32,319
adjusted

1341
00:45:30,000 --> 00:45:33,280
if you follow the defined format i just

1342
00:45:32,319 --> 00:45:36,240
think should be just

1343
00:45:33,280 --> 00:45:38,160
uh you know listen to the new topic and

1344
00:45:36,240 --> 00:45:41,680
process the message that way

1345
00:45:38,160 --> 00:45:41,680
that's that's all that should be

1346
00:45:44,839 --> 00:45:47,839
required

1347
00:45:52,880 --> 00:45:56,880
so they are the question is how do we

1348
00:45:55,119 --> 00:45:58,880
envision reverse dependency testing

1349
00:45:56,880 --> 00:46:00,480
there are a few ways to look into that

1350
00:45:58,880 --> 00:46:02,560
uh one of the first thing i would do is

1351
00:46:00,480 --> 00:46:03,839
uh go look at my friends in green over

1352
00:46:02,560 --> 00:46:06,078
there in the obs

1353
00:46:03,839 --> 00:46:08,880
world where they actually do rebuild the

1354
00:46:06,079 --> 00:46:10,800
entire dependency tree upon a change

1355
00:46:08,880 --> 00:46:12,160
so that problem has been solved for them

1356
00:46:10,800 --> 00:46:13,520
which means this shouldn't

1357
00:46:12,160 --> 00:46:16,480
it shouldn't be afraid to solve it for

1358
00:46:13,520 --> 00:46:16,960
us uh there are a few alternatives there

1359
00:46:16,480 --> 00:46:19,520
uh

1360
00:46:16,960 --> 00:46:21,920
clouds it would be one way to scale up

1361
00:46:19,520 --> 00:46:24,160
resources when we suddenly rebuild gcc

1362
00:46:21,920 --> 00:46:25,040
and need surveilled the entire most of

1363
00:46:24,160 --> 00:46:28,000
the federal

1364
00:46:25,040 --> 00:46:29,520
because the interesting piece about that

1365
00:46:28,000 --> 00:46:31,280
is um

1366
00:46:29,520 --> 00:46:32,720
we do mastery builds currently and that

1367
00:46:31,280 --> 00:46:34,079
goes through all the twenty thousand

1368
00:46:32,720 --> 00:46:35,598
packages

1369
00:46:34,079 --> 00:46:38,079
but the twenty thousand packages don't

1370
00:46:35,599 --> 00:46:39,920
need to be rebuilt for a new tcc update

1371
00:46:38,079 --> 00:46:41,280
all the per and python and php module

1372
00:46:39,920 --> 00:46:43,520
which are not

1373
00:46:41,280 --> 00:46:44,720
c map plugins they don't care about the

1374
00:46:43,520 --> 00:46:47,759
new gcc

1375
00:46:44,720 --> 00:46:49,439
so if we were to do uh reverse

1376
00:46:47,760 --> 00:46:51,440
dependency testing and rebuild

1377
00:46:49,440 --> 00:46:53,280
for a new gcc we would actually rebuild

1378
00:46:51,440 --> 00:46:55,359
less than we do today with russell built

1379
00:46:53,280 --> 00:46:57,200
because we would only we would only

1380
00:46:55,359 --> 00:46:59,119
reveal what depends on gcc

1381
00:46:57,200 --> 00:47:01,520
all the no arch package here we will

1382
00:46:59,119 --> 00:47:11,839
ignore no not gs packages don't need to

1383
00:47:01,520 --> 00:47:11,839
be repealed

1384
00:47:15,760 --> 00:47:19,680
um so the question is how do we what

1385
00:47:18,480 --> 00:47:21,440
about the feedback if i

1386
00:47:19,680 --> 00:47:24,879
if i rebuild gcc do i really want to

1387
00:47:21,440 --> 00:47:27,040
know the test result about 8000 packages

1388
00:47:24,880 --> 00:47:28,640
those are good questions and that we

1389
00:47:27,040 --> 00:47:31,599
really need to figure out

1390
00:47:28,640 --> 00:47:33,040
what the answer for this are the first

1391
00:47:31,599 --> 00:47:35,440
approach may very well be

1392
00:47:33,040 --> 00:47:36,960
well rebuilt gcc europe for 8 000

1393
00:47:35,440 --> 00:47:38,960
notifications about

1394
00:47:36,960 --> 00:47:41,280
things not working or maybe you know

1395
00:47:38,960 --> 00:47:41,280
we'll say

1396
00:47:41,440 --> 00:47:46,400
not 8000 but maybe we can grip them and

1397
00:47:43,280 --> 00:47:48,400
you get 8000 in one email

1398
00:47:46,400 --> 00:47:50,240
one way we would do that one way which

1399
00:47:48,400 --> 00:47:51,040
would help maybe is also looking into

1400
00:47:50,240 --> 00:47:53,118
the

1401
00:47:51,040 --> 00:47:54,400
we said we wanted to optimize the test

1402
00:47:53,119 --> 00:47:58,000
results when we come to

1403
00:47:54,400 --> 00:48:00,319
groups of builds uh so instead of having

1404
00:47:58,000 --> 00:48:02,160
one build one result one bill having one

1405
00:48:00,319 --> 00:48:03,839
result for the entire group

1406
00:48:02,160 --> 00:48:05,040
uh that would solve that because then

1407
00:48:03,839 --> 00:48:06,960
you have a group of eight thousand

1408
00:48:05,040 --> 00:48:09,040
packages but you only get one

1409
00:48:06,960 --> 00:48:11,040
one feedback that says all of these

1410
00:48:09,040 --> 00:48:14,480
packages are failed but it's one action

1411
00:48:11,040 --> 00:48:14,480
and not eight thousand actions

1412
00:48:14,640 --> 00:48:21,200
so maybe it's um those are

1413
00:48:17,760 --> 00:48:24,000
you know clues or ideas they are not

1414
00:48:21,200 --> 00:48:25,118
anywhere defined or i'm not going to put

1415
00:48:24,000 --> 00:48:28,160
my hand on the table and

1416
00:48:25,119 --> 00:48:35,119
i'd say this is the way it's going to be

1417
00:48:28,160 --> 00:48:35,118
there will stay something

1418
00:48:46,000 --> 00:48:49,920
uh the question is uh how do we what

1419
00:48:48,480 --> 00:48:51,920
what do we need to do to actually have

1420
00:48:49,920 --> 00:48:55,359
the install update and upgrade the

1421
00:48:51,920 --> 00:48:57,839
test um i'll say this is a

1422
00:48:55,359 --> 00:48:59,598
this is a chicken net problem uh as long

1423
00:48:57,839 --> 00:49:01,599
as we didn't have a getting mechanism

1424
00:48:59,599 --> 00:49:02,800
we could build all the tests we wanted

1425
00:49:01,599 --> 00:49:05,920
if they had no impact

1426
00:49:02,800 --> 00:49:07,680
nobody cares a broken test that

1427
00:49:05,920 --> 00:49:09,920
doesn't work on the side there does not

1428
00:49:07,680 --> 00:49:11,680
impact me

1429
00:49:09,920 --> 00:49:13,839
i can leave with a small red dot on the

1430
00:49:11,680 --> 00:49:16,078
tie on the side of my testing bar and

1431
00:49:13,839 --> 00:49:17,759
in body updates if it doesn't impact me

1432
00:49:16,079 --> 00:49:19,520
in any way we had that for years

1433
00:49:17,760 --> 00:49:21,440
saskatchewan has been running and

1434
00:49:19,520 --> 00:49:23,280
looking into a great test for a long

1435
00:49:21,440 --> 00:49:24,960
time and they were not

1436
00:49:23,280 --> 00:49:26,319
blocking in any way they had no impact

1437
00:49:24,960 --> 00:49:30,079
in any way

1438
00:49:26,319 --> 00:49:31,440
so so there is a there is a chicken egg

1439
00:49:30,079 --> 00:49:33,040
problem as long as we did not have

1440
00:49:31,440 --> 00:49:33,680
getting there was no incentive to

1441
00:49:33,040 --> 00:49:35,040
actually

1442
00:49:33,680 --> 00:49:37,040
go and look at these states and try to

1443
00:49:35,040 --> 00:49:39,520
fix them now that we have this

1444
00:49:37,040 --> 00:49:40,960
uh i think it's time to look uh to look

1445
00:49:39,520 --> 00:49:43,920
more into that problem

1446
00:49:40,960 --> 00:49:45,760
the question is going to be is going to

1447
00:49:43,920 --> 00:49:47,680
be a lot on

1448
00:49:45,760 --> 00:49:49,839
the ordering which one should we start

1449
00:49:47,680 --> 00:49:52,558
with um

1450
00:49:49,839 --> 00:49:53,359
i know rpm inspect is being worked on at

1451
00:49:52,559 --> 00:49:55,040
the moment

1452
00:49:53,359 --> 00:49:56,640
it's also going to be one of the

1453
00:49:55,040 --> 00:49:59,279
probably one of the first destroyable

1454
00:49:56,640 --> 00:50:02,720
testing that is being that is enabled

1455
00:49:59,280 --> 00:50:06,240
um and one of the one it's also

1456
00:50:02,720 --> 00:50:08,000
used as a you know as a uh i'd say

1457
00:50:06,240 --> 00:50:10,000
a background okay how do we plug in a

1458
00:50:08,000 --> 00:50:11,760
new ci system are we because it's going

1459
00:50:10,000 --> 00:50:14,000
to have its own pipeline you're going to

1460
00:50:11,760 --> 00:50:17,119
trigger differently so how do we expand

1461
00:50:14,000 --> 00:50:19,200
our our testing system there um

1462
00:50:17,119 --> 00:50:20,319
so this one is probably going to be the

1463
00:50:19,200 --> 00:50:22,720
the first one and then

1464
00:50:20,319 --> 00:50:24,240
the next one after that it's a good

1465
00:50:22,720 --> 00:50:26,240
question

1466
00:50:24,240 --> 00:50:28,319
uh fixing upgrade versus impact on

1467
00:50:26,240 --> 00:50:30,640
compose

1468
00:50:28,319 --> 00:50:32,079
uh reverse dependency versus install

1469
00:50:30,640 --> 00:50:35,680
which one should we start with

1470
00:50:32,079 --> 00:50:36,160
i don't know and that's the place uh

1471
00:50:35,680 --> 00:50:38,319
where

1472
00:50:36,160 --> 00:50:40,000
uh alexandra is not there but alexandra

1473
00:50:38,319 --> 00:50:42,800
fedorova who works under the

1474
00:50:40,000 --> 00:50:43,440
cic is looking into this question so she

1475
00:50:42,800 --> 00:50:44,640
will be a

1476
00:50:43,440 --> 00:50:47,040
the person to contact if you're

1477
00:50:44,640 --> 00:50:55,839
interested to help or

1478
00:50:47,040 --> 00:50:55,839
provide feedback on some of these ideas

1479
00:51:20,839 --> 00:51:23,839
it's

1480
00:51:28,240 --> 00:51:34,078
so the question is um how do we know

1481
00:51:32,000 --> 00:51:37,040
uh where do we get the information about

1482
00:51:34,079 --> 00:51:39,119
the number of packets present in fedora

1483
00:51:37,040 --> 00:51:40,640
there are two places the first one is to

1484
00:51:39,119 --> 00:51:41,920
look into these kits which is going to

1485
00:51:40,640 --> 00:51:42,879
tell you the number of git reports that

1486
00:51:41,920 --> 00:51:46,000
we have

1487
00:51:42,880 --> 00:51:47,680
and that's about uh 20 so over 20

1488
00:51:46,000 --> 00:51:49,200
thousand gigatriples that we have

1489
00:51:47,680 --> 00:51:50,879
and you can look per name space so you

1490
00:51:49,200 --> 00:51:52,480
can look only the rpm and space and i

1491
00:51:50,880 --> 00:51:54,960
will give you only the rpms one

1492
00:51:52,480 --> 00:51:56,319
ignoring the modules the containers the

1493
00:51:54,960 --> 00:51:59,280
flat packs

1494
00:51:56,319 --> 00:52:00,000
and everything the second last and we

1495
00:51:59,280 --> 00:52:01,599
can

1496
00:52:00,000 --> 00:52:03,200
but there are there's a problem with

1497
00:52:01,599 --> 00:52:06,160
that number is that we

1498
00:52:03,200 --> 00:52:07,359
keep get repositories also for packages

1499
00:52:06,160 --> 00:52:09,118
that are no longer shipped

1500
00:52:07,359 --> 00:52:10,640
they are retired from fedora but we

1501
00:52:09,119 --> 00:52:12,400
still have the the git triples because

1502
00:52:10,640 --> 00:52:14,400
that's part of our history of has a

1503
00:52:12,400 --> 00:52:16,079
distribution

1504
00:52:14,400 --> 00:52:18,559
so that number is a bit quick you get

1505
00:52:16,079 --> 00:52:20,960
all the packages that fedora

1506
00:52:18,559 --> 00:52:22,160
has ever had whether they are active or

1507
00:52:20,960 --> 00:52:24,079
not that's a different

1508
00:52:22,160 --> 00:52:25,200
you won't get enough information there

1509
00:52:24,079 --> 00:52:26,880
well you could

1510
00:52:25,200 --> 00:52:29,040
but that means going through each and

1511
00:52:26,880 --> 00:52:31,920
every package and checking if they are

1512
00:52:29,040 --> 00:52:33,200
if they are flaggers retired the one

1513
00:52:31,920 --> 00:52:35,440
place where you would have

1514
00:52:33,200 --> 00:52:36,480
the actual number and that's you you

1515
00:52:35,440 --> 00:52:38,480
will have to you know

1516
00:52:36,480 --> 00:52:40,079
create for it and look for it uh that's

1517
00:52:38,480 --> 00:52:42,640
called the pdc

1518
00:52:40,079 --> 00:52:43,839
and that's uh that's the database it's

1519
00:52:42,640 --> 00:52:45,759
the pdc stand for

1520
00:52:43,839 --> 00:52:47,680
project definition center and it's a

1521
00:52:45,760 --> 00:52:50,559
database and that's a place where we

1522
00:52:47,680 --> 00:52:54,078
record for every packages

1523
00:52:50,559 --> 00:52:55,520
their studies and basically if you

1524
00:52:54,079 --> 00:52:58,079
are allowed to push to the master branch

1525
00:52:55,520 --> 00:52:59,680
or not so if the master branch is

1526
00:52:58,079 --> 00:53:01,520
you cannot push to it basically means

1527
00:52:59,680 --> 00:53:03,520
the package has been retired

1528
00:53:01,520 --> 00:53:04,960
so that's the place where you you you

1529
00:53:03,520 --> 00:53:07,680
would be able to say well

1530
00:53:04,960 --> 00:53:08,000
give me for all packages the studies of

1531
00:53:07,680 --> 00:53:09,759
the

1532
00:53:08,000 --> 00:53:11,839
the studies of each branch or the master

1533
00:53:09,760 --> 00:53:12,400
branch and from that number you would be

1534
00:53:11,839 --> 00:53:16,000
able to

1535
00:53:12,400 --> 00:53:17,599
to see how it's going the last place

1536
00:53:16,000 --> 00:53:18,480
where you could see progress is going to

1537
00:53:17,599 --> 00:53:21,520
be body

1538
00:53:18,480 --> 00:53:25,440
the body works with binary rpms

1539
00:53:21,520 --> 00:53:27,759
so you know one source rpm can give you

1540
00:53:25,440 --> 00:53:30,079
how many packages do we have in latex

1541
00:53:27,760 --> 00:53:30,079
again

1542
00:53:34,079 --> 00:53:38,720
something like that so way too much uh

1543
00:53:36,800 --> 00:53:40,000
so yeah the the body's number is going

1544
00:53:38,720 --> 00:53:42,078
to be squeezed because

1545
00:53:40,000 --> 00:53:43,920
it's only going to counter binary rpm

1546
00:53:42,079 --> 00:53:47,280
and not the source rpm

1547
00:53:43,920 --> 00:53:48,800
um i think pdc is going to be your

1548
00:53:47,280 --> 00:53:49,920
closest bet and that's not going to be

1549
00:53:48,800 --> 00:53:51,839
the easiest one

1550
00:53:49,920 --> 00:53:53,040
package db used to have a feature where

1551
00:53:51,839 --> 00:53:56,960
we give you the number of

1552
00:53:53,040 --> 00:54:01,359
package per branch

1553
00:53:56,960 --> 00:54:01,359
but we don't we longer up that graph

1554
00:54:04,839 --> 00:54:11,839
yes

1555
00:54:07,359 --> 00:54:11,839
for each language

1556
00:54:24,160 --> 00:54:27,920
so the the remark was it's the same for

1557
00:54:26,240 --> 00:54:29,759
line pack where we have

1558
00:54:27,920 --> 00:54:31,280
one source rpm that splits a number of

1559
00:54:29,760 --> 00:54:33,280
rpm per languages

1560
00:54:31,280 --> 00:54:34,319
uh so that you can reduce the install

1561
00:54:33,280 --> 00:54:37,440
surface uh

1562
00:54:34,319 --> 00:54:38,799
on containers and the like uh so and

1563
00:54:37,440 --> 00:54:40,480
therefore that's why the

1564
00:54:38,799 --> 00:54:42,319
the number to look at is the number of

1565
00:54:40,480 --> 00:54:43,920
source rpm and the number of rpms

1566
00:54:42,319 --> 00:54:47,119
produced

1567
00:54:43,920 --> 00:54:47,119
you also have a question i believe

1568
00:54:50,400 --> 00:54:58,160
anything else

1569
00:54:53,839 --> 00:55:00,319
is it only for x86 architectures

1570
00:54:58,160 --> 00:55:02,000
uh the question is is it only for htc

1571
00:55:00,319 --> 00:55:05,680
architecture or only for arm

1572
00:55:02,000 --> 00:55:08,000
the mechanism is arch independent

1573
00:55:05,680 --> 00:55:10,240
the problem is the ci system currently

1574
00:55:08,000 --> 00:55:12,720
works on the mi66 architecture

1575
00:55:10,240 --> 00:55:14,240
there is plan to add support for arm to

1576
00:55:12,720 --> 00:55:17,040
the to the cr system

1577
00:55:14,240 --> 00:55:17,359
but as far as i know it's not there yet

1578
00:55:17,040 --> 00:55:20,160
but

1579
00:55:17,359 --> 00:55:20,558
yeah the idea is to start with you know

1580
00:55:20,160 --> 00:55:22,799
what

1581
00:55:20,559 --> 00:55:24,640
will if we can get eighty percent of the

1582
00:55:22,799 --> 00:55:26,480
bugs with httc architecture

1583
00:55:24,640 --> 00:55:28,640
it's still better than the zero we have

1584
00:55:26,480 --> 00:55:29,680
now and then when we get the ninety

1585
00:55:28,640 --> 00:55:31,440
percent adding harm

1586
00:55:29,680 --> 00:55:32,879
then we get another ten percent but it's

1587
00:55:31,440 --> 00:55:34,240
always there

1588
00:55:32,880 --> 00:55:36,559
twenty percent of the work is going to

1589
00:55:34,240 --> 00:55:38,558
get you eighty percent of the benefits

1590
00:55:36,559 --> 00:55:39,839
and the twenty remaining percent is

1591
00:55:38,559 --> 00:55:41,040
going to take you the eighty percent of

1592
00:55:39,839 --> 00:55:43,200
the work

1593
00:55:41,040 --> 00:55:44,400
so you're using this rule we start with

1594
00:55:43,200 --> 00:55:46,240
the easy one trying to get

1595
00:55:44,400 --> 00:55:49,839
the most results and then see if we can

1596
00:55:46,240 --> 00:55:49,839
improve that later on

