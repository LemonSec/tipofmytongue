1
00:00:27,680 --> 00:00:31,039
it's

2
00:00:28,800 --> 00:00:31,039
about

3
00:00:43,520 --> 00:00:50,800
all right we're going to start with uh

4
00:00:47,920 --> 00:00:50,800
the next session

5
00:00:53,760 --> 00:00:58,800
so the next session uh is again a panel

6
00:00:56,800 --> 00:01:01,358
second panel for today

7
00:00:58,800 --> 00:01:02,959
um just like the first panel it's a bit

8
00:01:01,359 --> 00:01:05,519
of an experiment it's the first time we

9
00:01:02,960 --> 00:01:08,960
run this well now it's second time

10
00:01:05,519 --> 00:01:11,040
and this panel uh we thought we'd set up

11
00:01:08,960 --> 00:01:12,720
well we set a few experienced all vm

12
00:01:11,040 --> 00:01:15,439
developers in the front of the room

13
00:01:12,720 --> 00:01:16,880
and they're up to answer all of your

14
00:01:15,439 --> 00:01:18,240
questions while all of your questions

15
00:01:16,880 --> 00:01:19,280
that are at least somewhat related to

16
00:01:18,240 --> 00:01:22,320
llvm

17
00:01:19,280 --> 00:01:26,880
or its development so

18
00:01:22,320 --> 00:01:28,158
to start off maybe can each of you do a

19
00:01:26,880 --> 00:01:31,839
small introduction where

20
00:01:28,159 --> 00:01:34,000
your experiences are so hello my name is

21
00:01:31,840 --> 00:01:35,200
peter smith i'm working at linaro at the

22
00:01:34,000 --> 00:01:38,720
moment that's

23
00:01:35,200 --> 00:01:41,439
working primarily on primarily on

24
00:01:38,720 --> 00:01:43,360
lld so i'm mostly in the linker area

25
00:01:41,439 --> 00:01:45,119
health type area so

26
00:01:43,360 --> 00:01:47,520
please no complicated compiler questions

27
00:01:45,119 --> 00:01:47,520
for me

28
00:01:48,880 --> 00:01:52,640
hello i am jurun doblar i work for

29
00:01:51,280 --> 00:01:55,520
synopsis

30
00:01:52,640 --> 00:01:56,159
in the group that i work at we work on a

31
00:01:55,520 --> 00:01:58,719
tool called

32
00:01:56,159 --> 00:01:59,600
asip designer and that's a tool that

33
00:01:58,719 --> 00:02:01,839
allows you to

34
00:01:59,600 --> 00:02:04,079
describe a higher level in a high-level

35
00:02:01,840 --> 00:02:05,920
language a processor architecture

36
00:02:04,079 --> 00:02:07,600
and from the tool we produce the

37
00:02:05,920 --> 00:02:08,080
hardware the simulation the software

38
00:02:07,600 --> 00:02:11,440
tools

39
00:02:08,080 --> 00:02:15,520
including the compiler

40
00:02:11,440 --> 00:02:15,520
and i mainly work on the lvm site there

41
00:02:16,959 --> 00:02:22,720
hi everyone my name is nick desonia i

42
00:02:18,800 --> 00:02:24,319
work on android's lfm team at google

43
00:02:22,720 --> 00:02:26,800
and i work on building the linux kernel

44
00:02:24,319 --> 00:02:26,799
with clang

45
00:02:28,959 --> 00:02:32,239
i probably should also do a brief

46
00:02:30,640 --> 00:02:33,760
introduction for myself so i'm crystal

47
00:02:32,239 --> 00:02:35,680
bells i work for arm

48
00:02:33,760 --> 00:02:36,879
i've been working on compilers there for

49
00:02:35,680 --> 00:02:40,879
about 10 years

50
00:02:36,879 --> 00:02:44,079
mainly on a llvm and llvm rated projects

51
00:02:40,879 --> 00:02:46,000
so i do have one or two

52
00:02:44,080 --> 00:02:47,680
questions prepared to get the panel

53
00:02:46,000 --> 00:02:48,080
started but i really want to open the

54
00:02:47,680 --> 00:02:51,360
floor

55
00:02:48,080 --> 00:02:52,959
for for the audience to ask

56
00:02:51,360 --> 00:02:54,640
questions all the while hopefully that

57
00:02:52,959 --> 00:02:56,800
will give the most interesting questions

58
00:02:54,640 --> 00:03:00,319
so please do raise your hands if

59
00:02:56,800 --> 00:03:00,319
you've got any questions to ask

60
00:03:02,000 --> 00:03:05,840
in the back

61
00:03:09,920 --> 00:03:13,760
so i'll repeat the question was about uh

62
00:03:11,599 --> 00:03:15,359
how is azam go do uh so asm go to

63
00:03:13,760 --> 00:03:18,000
shipped in clang nine

64
00:03:15,360 --> 00:03:21,120
uh so if you need it it's there we

65
00:03:18,000 --> 00:03:23,280
actually put out an rfc for extending it

66
00:03:21,120 --> 00:03:24,239
so this is curious the curious case of

67
00:03:23,280 --> 00:03:28,239
what does it mean for

68
00:03:24,239 --> 00:03:29,760
llvm to extend a gnu c extension so

69
00:03:28,239 --> 00:03:31,440
we actually have patches there's

70
00:03:29,760 --> 00:03:33,518
actually like a constraint in gcc where

71
00:03:31,440 --> 00:03:34,959
if you try to use output variables

72
00:03:33,519 --> 00:03:36,319
you can't you get an error message in

73
00:03:34,959 --> 00:03:38,080
the front end and there's definitely

74
00:03:36,319 --> 00:03:39,599
like ambiguous cases of like

75
00:03:38,080 --> 00:03:41,599
what happens if you have two azim go to

76
00:03:39,599 --> 00:03:43,040
statements that jump to the same label

77
00:03:41,599 --> 00:03:44,879
but then they have conflicting output

78
00:03:43,040 --> 00:03:47,200
constraints like one says put this

79
00:03:44,879 --> 00:03:48,319
output in in one register and one says

80
00:03:47,200 --> 00:03:52,798
put it in a different register

81
00:03:48,319 --> 00:03:54,238
right and i uh suppose you can

82
00:03:52,799 --> 00:03:55,680
detect that and just error out when

83
00:03:54,239 --> 00:03:56,400
that's the case and then still right

84
00:03:55,680 --> 00:03:58,319
assembly that

85
00:03:56,400 --> 00:04:00,000
isn't overly constrained like that and

86
00:03:58,319 --> 00:04:02,720
support that so

87
00:04:00,000 --> 00:04:04,000
patches are out and they're under review

88
00:04:02,720 --> 00:04:05,760
currently and there's still a lot of

89
00:04:04,000 --> 00:04:08,080
work that we're doing there

90
00:04:05,760 --> 00:04:10,319
but bill wendling is driving dr driving

91
00:04:08,080 --> 00:04:12,080
that work there's posts on llvm dev for

92
00:04:10,319 --> 00:04:13,439
the rfc for that

93
00:04:12,080 --> 00:04:14,799
and we'll probably have kernel patches

94
00:04:13,439 --> 00:04:17,918
soon that detect if your compiler

95
00:04:14,799 --> 00:04:20,880
supports that and then makes use of it

96
00:04:17,918 --> 00:04:22,320
cheers so just a quick follow-up

97
00:04:20,880 --> 00:04:23,199
question on that nick you said this is

98
00:04:22,320 --> 00:04:26,320
extending

99
00:04:23,199 --> 00:04:28,639
a gnu extension um

100
00:04:26,320 --> 00:04:30,479
that seems to be similar on topic for

101
00:04:28,639 --> 00:04:32,000
the previous panel also how this llvm

102
00:04:30,479 --> 00:04:33,680
and the gcc community work together do

103
00:04:32,000 --> 00:04:35,919
you have any insights for this specific

104
00:04:33,680 --> 00:04:35,919
one

105
00:04:37,199 --> 00:04:40,400
uh i think

106
00:04:41,280 --> 00:04:44,479
this is something where we've picked up

107
00:04:42,960 --> 00:04:46,560
on like uh

108
00:04:44,479 --> 00:04:47,919
kind of the feature requests on it and i

109
00:04:46,560 --> 00:04:50,400
think um

110
00:04:47,919 --> 00:04:51,440
a lot of the the pushback on the gcc

111
00:04:50,400 --> 00:04:53,198
side has been

112
00:04:51,440 --> 00:04:54,719
this is not something that's easy to

113
00:04:53,199 --> 00:04:56,160
implement not necessarily that it's

114
00:04:54,720 --> 00:04:57,120
impossible just that it's not easy and

115
00:04:56,160 --> 00:04:58,479
there are lots of

116
00:04:57,120 --> 00:05:00,400
kind of edge cases and things that we

117
00:04:58,479 --> 00:05:05,520
can think of kind of thing and i think

118
00:05:00,400 --> 00:05:07,440
um if if we were able to

119
00:05:05,520 --> 00:05:08,560
show that it is possible and come up

120
00:05:07,440 --> 00:05:10,479
with some test cases

121
00:05:08,560 --> 00:05:11,759
and try to work out and understand these

122
00:05:10,479 --> 00:05:13,758
edge cases like

123
00:05:11,759 --> 00:05:15,199
conflicting output constraints we might

124
00:05:13,759 --> 00:05:16,400
be able to take this back to gcc

125
00:05:15,199 --> 00:05:17,840
developers and say like

126
00:05:16,400 --> 00:05:20,000
hey we have it working with some

127
00:05:17,840 --> 00:05:21,679
constraints kind of thing and then

128
00:05:20,000 --> 00:05:23,280
there's an actual important code base

129
00:05:21,680 --> 00:05:25,360
that may use it

130
00:05:23,280 --> 00:05:27,198
kind of thing and that that may help

131
00:05:25,360 --> 00:05:29,039
drive uh prioritization to

132
00:05:27,199 --> 00:05:31,280
to implement it as well kind of thing i

133
00:05:29,039 --> 00:05:33,599
think a lot of different features

134
00:05:31,280 --> 00:05:34,880
like it always requires someone to take

135
00:05:33,600 --> 00:05:36,320
a crack at initial

136
00:05:34,880 --> 00:05:38,000
implementing something initially and

137
00:05:36,320 --> 00:05:39,919
kind of work out the edge cases

138
00:05:38,000 --> 00:05:41,520
and and find what's sharp and then

139
00:05:39,919 --> 00:05:44,639
typically a second

140
00:05:41,520 --> 00:05:47,120
implementation to really work out um

141
00:05:44,639 --> 00:05:49,600
interrupt between other things that the

142
00:05:47,120 --> 00:05:51,680
initial developers didn't think about

143
00:05:49,600 --> 00:05:53,600
and then there's always a question of

144
00:05:51,680 --> 00:05:54,080
well is this a priority or not for me to

145
00:05:53,600 --> 00:05:55,840
implement

146
00:05:54,080 --> 00:05:57,599
kind of thing so there's definitely been

147
00:05:55,840 --> 00:05:59,359
like back and forth that i've had with

148
00:05:57,600 --> 00:06:01,520
gcc developers where i've said

149
00:05:59,360 --> 00:06:02,560
hey you know as developer trying to

150
00:06:01,520 --> 00:06:04,400
write portable code

151
00:06:02,560 --> 00:06:06,479
it'd be great if i had has built in

152
00:06:04,400 --> 00:06:08,318
right we have has attribute helps

153
00:06:06,479 --> 00:06:10,000
write kind of more portable cnc plus

154
00:06:08,319 --> 00:06:12,400
plus code if i had has built in

155
00:06:10,000 --> 00:06:13,600
that would help as well gcc developers

156
00:06:12,400 --> 00:06:14,799
got back to me when they got around to

157
00:06:13,600 --> 00:06:17,280
implementing it saying

158
00:06:14,800 --> 00:06:17,840
oh we noticed difference between gcc and

159
00:06:17,280 --> 00:06:20,239
clang

160
00:06:17,840 --> 00:06:21,359
is you know we happen to expand mac

161
00:06:20,240 --> 00:06:22,960
macros

162
00:06:21,360 --> 00:06:24,800
uh then pasta has built in and clang

163
00:06:22,960 --> 00:06:25,758
does not like we think this is a bug

164
00:06:24,800 --> 00:06:28,000
what do you think

165
00:06:25,759 --> 00:06:29,039
i said yes this is absolutely a bug i

166
00:06:28,000 --> 00:06:31,120
filed a bug

167
00:06:29,039 --> 00:06:32,479
but you know it's not my priority right

168
00:06:31,120 --> 00:06:34,080
now to go and fix that

169
00:06:32,479 --> 00:06:35,680
kind of thing so i think that that's the

170
00:06:34,080 --> 00:06:37,120
tricky part too is like

171
00:06:35,680 --> 00:06:39,440
you know if it's if it's going to be

172
00:06:37,120 --> 00:06:40,080
like part of the explicit language

173
00:06:39,440 --> 00:06:41,600
standard

174
00:06:40,080 --> 00:06:44,800
that sets a deadline of like when should

175
00:06:41,600 --> 00:06:44,800
we have this implemented by

176
00:06:45,120 --> 00:06:48,880
there was a question hearing from oh

177
00:06:47,199 --> 00:06:51,919
yeah um

178
00:06:48,880 --> 00:06:54,240
so i was wondering whether you can maybe

179
00:06:51,919 --> 00:06:55,919
tell something about so when you have a

180
00:06:54,240 --> 00:06:59,919
batch for lvm

181
00:06:55,919 --> 00:07:02,639
so there's the system for

182
00:06:59,919 --> 00:07:04,159
with code ownership but sometimes it's

183
00:07:02,639 --> 00:07:06,000
not very clear

184
00:07:04,160 --> 00:07:07,360
who is the owner of a certain piece of

185
00:07:06,000 --> 00:07:11,599
code or

186
00:07:07,360 --> 00:07:11,599
who you need to review backshift who you

187
00:07:15,039 --> 00:07:21,680
about um the right people and yeah

188
00:07:19,199 --> 00:07:22,720
um so they're quite trying to repeat the

189
00:07:21,680 --> 00:07:24,479
question if you've

190
00:07:22,720 --> 00:07:26,880
got a patch and you're looking for

191
00:07:24,479 --> 00:07:28,080
someone suitable to review the patch for

192
00:07:26,880 --> 00:07:30,800
you

193
00:07:28,080 --> 00:07:31,359
it's unclear sometimes who you should

194
00:07:30,800 --> 00:07:34,720
ask

195
00:07:31,360 --> 00:07:36,560
and there is uh there's a code owner's

196
00:07:34,720 --> 00:07:40,000
file in the directory showing for

197
00:07:36,560 --> 00:07:43,440
different areas who the code owners are

198
00:07:40,000 --> 00:07:46,639
but even then sometimes it's unclear

199
00:07:43,440 --> 00:07:49,599
and so on the code owners file itself i

200
00:07:46,639 --> 00:07:51,039
think some of the code owners listed

201
00:07:49,599 --> 00:07:54,560
there they're not very active in the

202
00:07:51,039 --> 00:07:56,878
project anymore they used to be active

203
00:07:54,560 --> 00:07:58,960
and then for probably some of the code

204
00:07:56,879 --> 00:08:00,800
owners have just arials that are so wide

205
00:07:58,960 --> 00:08:02,878
that attract so many patches that

206
00:08:00,800 --> 00:08:04,560
it's impossible for them to just look at

207
00:08:02,879 --> 00:08:08,160
basically just everything

208
00:08:04,560 --> 00:08:10,800
um after that it gets to the point where

209
00:08:08,160 --> 00:08:12,720
somehow you need to figure out who would

210
00:08:10,800 --> 00:08:14,479
be the most active person understanding

211
00:08:12,720 --> 00:08:14,960
this area to be able to review this for

212
00:08:14,479 --> 00:08:16,719
me

213
00:08:14,960 --> 00:08:18,638
of course if you're working on a team

214
00:08:16,720 --> 00:08:20,639
with lots of lvm developers

215
00:08:18,639 --> 00:08:22,240
developers around you and with lots of

216
00:08:20,639 --> 00:08:24,720
connections to all the teams that

217
00:08:22,240 --> 00:08:26,720
i don't know all the companies it's a

218
00:08:24,720 --> 00:08:29,599
bit easier to know and understand

219
00:08:26,720 --> 00:08:31,440
uh who to ask but if you don't have that

220
00:08:29,599 --> 00:08:34,240
um it gets a bit harder

221
00:08:31,440 --> 00:08:36,159
so some of the tricks i sometimes

222
00:08:34,240 --> 00:08:37,440
suggest to to people facing this problem

223
00:08:36,159 --> 00:08:39,679
is first of all

224
00:08:37,440 --> 00:08:40,880
look at who lost touched the code that

225
00:08:39,679 --> 00:08:42,640
you're touching

226
00:08:40,880 --> 00:08:44,480
does it that's that person probably

227
00:08:42,640 --> 00:08:46,080
understands the code at least somewhat

228
00:08:44,480 --> 00:08:47,839
uh and there's a chance they're they're

229
00:08:46,080 --> 00:08:50,959
still active in the code base

230
00:08:47,839 --> 00:08:53,920
um what's another suggestion

231
00:08:50,959 --> 00:08:54,560
uh look for anyone who gave a talk on

232
00:08:53,920 --> 00:08:56,640
that

233
00:08:54,560 --> 00:08:58,640
in that topic in the recent years might

234
00:08:56,640 --> 00:09:01,360
also be

235
00:08:58,640 --> 00:09:03,199
a suggestion or look who for who

236
00:09:01,360 --> 00:09:04,480
actually reviewed similar patches in the

237
00:09:03,200 --> 00:09:06,480
same area

238
00:09:04,480 --> 00:09:08,399
if they did good reviews in the past

239
00:09:06,480 --> 00:09:09,440
that's a good sign probably good reviews

240
00:09:08,399 --> 00:09:12,399
in the future

241
00:09:09,440 --> 00:09:12,880
and then yes probably just like in any

242
00:09:12,399 --> 00:09:16,880
project

243
00:09:12,880 --> 00:09:19,360
there are some areas where it's just

244
00:09:16,880 --> 00:09:20,800
there are one or two experts and maybe

245
00:09:19,360 --> 00:09:24,240
they started working on a different

246
00:09:20,800 --> 00:09:24,240
project and it gets hard

247
00:09:25,440 --> 00:09:29,519
that's an awful lot to add to that

248
00:09:27,279 --> 00:09:32,000
you're right it is a bit diffuse

249
00:09:29,519 --> 00:09:34,000
and it's not any formal policy on who

250
00:09:32,000 --> 00:09:35,200
can sign off who cannot sign off as far

251
00:09:34,000 --> 00:09:38,000
as i understand

252
00:09:35,200 --> 00:09:39,839
um i think anyone can sign off on

253
00:09:38,000 --> 00:09:41,680
someone else's code

254
00:09:39,839 --> 00:09:43,440
but it has to be sort of in an area that

255
00:09:41,680 --> 00:09:45,279
you're known and familiar

256
00:09:43,440 --> 00:09:46,880
with or that's kind of expected that you

257
00:09:45,279 --> 00:09:49,439
make that check and

258
00:09:46,880 --> 00:09:50,959
say the standards across the code base

259
00:09:49,440 --> 00:09:52,480
vary quite wildly

260
00:09:50,959 --> 00:09:54,319
some of them have quite strong owners

261
00:09:52,480 --> 00:09:56,240
some of them not so much

262
00:09:54,320 --> 00:09:58,080
um quite often a good way to do things

263
00:09:56,240 --> 00:09:59,839
is just to

264
00:09:58,080 --> 00:10:01,600
look for areas where people have strong

265
00:09:59,839 --> 00:10:02,720
opinions certainly if you put patching

266
00:10:01,600 --> 00:10:03,519
somewhere where someone's got a strong

267
00:10:02,720 --> 00:10:05,519
opinion

268
00:10:03,519 --> 00:10:06,560
it will probably get attention at that

269
00:10:05,519 --> 00:10:08,000
particular point so

270
00:10:06,560 --> 00:10:09,920
often finding out who's who's the sort

271
00:10:08,000 --> 00:10:12,160
of person you're likely to upset if

272
00:10:09,920 --> 00:10:14,399
things go around that particular point

273
00:10:12,160 --> 00:10:16,399
and sometimes also irc is a good

274
00:10:14,399 --> 00:10:18,079
good good thing good thing to go to say

275
00:10:16,399 --> 00:10:19,920
um hey i've got this patch

276
00:10:18,079 --> 00:10:21,199
can somebody advise me who who can look

277
00:10:19,920 --> 00:10:23,040
at that that type of thing so sometimes

278
00:10:21,200 --> 00:10:23,760
you might find going on yellow vmi rc

279
00:10:23,040 --> 00:10:25,439
channel

280
00:10:23,760 --> 00:10:27,120
um and going and asking on there can

281
00:10:25,440 --> 00:10:32,320
often help

282
00:10:27,120 --> 00:10:35,200
anyone else a question in the back

283
00:10:32,320 --> 00:10:35,680
yeah nikolai what's what happens to work

284
00:10:35,200 --> 00:10:39,600
is

285
00:10:35,680 --> 00:10:42,880
if your patch is not a minor thing

286
00:10:39,600 --> 00:10:46,320
you just present it on the mailing list

287
00:10:42,880 --> 00:10:46,320
and if someone happens to answer

288
00:10:53,519 --> 00:10:57,040
yeah so this particular trick was um if

289
00:10:56,640 --> 00:10:58,319
you see

290
00:10:57,040 --> 00:11:00,560
if you post your patch to the mailing

291
00:10:58,320 --> 00:11:01,279
list and someone well makes themselves a

292
00:11:00,560 --> 00:11:05,199
victim

293
00:11:01,279 --> 00:11:06,079
um then then by all means add them to um

294
00:11:05,200 --> 00:11:07,760
to the thing

295
00:11:06,079 --> 00:11:15,839
no good deed goes unpunished i think in

296
00:11:07,760 --> 00:11:15,839
that particular case

297
00:11:19,279 --> 00:11:22,560
yeah okay first to review one you

298
00:11:21,519 --> 00:11:24,959
mentioned ifc

299
00:11:22,560 --> 00:11:26,399
now there's this course as well which is

300
00:11:24,959 --> 00:11:28,560
much more

301
00:11:26,399 --> 00:11:30,800
newcomer friendly and there's you can

302
00:11:28,560 --> 00:11:31,680
ask is anyone willing to review my

303
00:11:30,800 --> 00:11:33,839
client

304
00:11:31,680 --> 00:11:36,079
okay yeah so the comment there was that

305
00:11:33,839 --> 00:11:38,480
there is also a discord um

306
00:11:36,079 --> 00:11:40,319
server is that actually on the llvm

307
00:11:38,480 --> 00:11:42,720
mailing list of where to find that

308
00:11:40,320 --> 00:11:42,720
i think

309
00:11:46,959 --> 00:11:50,479
okay so yeah so there's also a discord

310
00:11:48,720 --> 00:11:52,160
server that's potentially more beginner

311
00:11:50,480 --> 00:11:54,959
friendly

312
00:11:52,160 --> 00:11:56,160
and uh so on the trick of looking at who

313
00:11:54,959 --> 00:11:57,920
touched the code last

314
00:11:56,160 --> 00:12:00,160
you can say like get log on the

315
00:11:57,920 --> 00:12:02,240
individual file or directory

316
00:12:00,160 --> 00:12:04,000
kind of thing but not just the author

317
00:12:02,240 --> 00:12:06,399
but if someone committed their patch

318
00:12:04,000 --> 00:12:07,279
with arc like command line utility it'll

319
00:12:06,399 --> 00:12:09,440
typically say

320
00:12:07,279 --> 00:12:11,519
who reviewed the patch so you can get

321
00:12:09,440 --> 00:12:13,920
the kind of list of reviewers who have

322
00:12:11,519 --> 00:12:16,240
reviewed people touching this file most

323
00:12:13,920 --> 00:12:16,240
recently

324
00:12:17,600 --> 00:12:20,639
in fact fabricator will when you put

325
00:12:20,320 --> 00:12:22,560
your

326
00:12:20,639 --> 00:12:25,120
patch on fabricated it will also come up

327
00:12:22,560 --> 00:12:27,680
with some suggestions already

328
00:12:25,120 --> 00:12:27,680
i noticed

329
00:12:28,480 --> 00:12:31,680
let's first do the follow-up for a good

330
00:12:30,079 --> 00:12:36,959
lesson yeah so i'm

331
00:12:31,680 --> 00:12:38,880
kind of interested in certain evolving

332
00:12:36,959 --> 00:12:41,359
at the ir level the azim ghost is

333
00:12:38,880 --> 00:12:44,480
represented as an instruction

334
00:12:41,360 --> 00:12:46,560
right and um

335
00:12:44,480 --> 00:12:48,000
so i care about amd gpu where

336
00:12:46,560 --> 00:12:48,638
interesting things happen with control

337
00:12:48,000 --> 00:12:50,160
flow

338
00:12:48,639 --> 00:12:52,160
and one of the things that they're kind

339
00:12:50,160 --> 00:12:54,160
of thinking about is having target

340
00:12:52,160 --> 00:12:56,560
specific intrinsics

341
00:12:54,160 --> 00:12:57,760
that can be called with this call branch

342
00:12:56,560 --> 00:12:59,839
instruction

343
00:12:57,760 --> 00:13:01,279
is is that something that you think

344
00:12:59,839 --> 00:13:02,639
people have problems with is that

345
00:13:01,279 --> 00:13:04,160
something that

346
00:13:02,639 --> 00:13:07,839
would there would be obstacles within

347
00:13:04,160 --> 00:13:07,839
the current implementation

348
00:13:08,720 --> 00:13:11,839
so the question was could we build

349
00:13:10,560 --> 00:13:13,359
additional uh

350
00:13:11,839 --> 00:13:14,959
like higher level intrinsics on top of

351
00:13:13,360 --> 00:13:18,000
the call br instruction that

352
00:13:14,959 --> 00:13:21,439
is used in the ir level to represent

353
00:13:18,000 --> 00:13:21,920
uh control flow uh i can't think of

354
00:13:21,440 --> 00:13:23,440
anything

355
00:13:21,920 --> 00:13:25,599
i think you'd probably help us work out

356
00:13:23,440 --> 00:13:26,320
more bugs in various transforms on call

357
00:13:25,600 --> 00:13:28,160
br

358
00:13:26,320 --> 00:13:29,360
because it's been like a minefield and

359
00:13:28,160 --> 00:13:29,920
that's like part of the discussion in

360
00:13:29,360 --> 00:13:31,440
the

361
00:13:29,920 --> 00:13:33,040
llvm community right now is kind of the

362
00:13:31,440 --> 00:13:36,720
overhead involved in adding

363
00:13:33,040 --> 00:13:38,319
new instructions to the ir tends to like

364
00:13:36,720 --> 00:13:39,680
you have a lot of case statements in

365
00:13:38,320 --> 00:13:42,160
certain places where like the default

366
00:13:39,680 --> 00:13:43,760
branch is absolutely not what you want

367
00:13:42,160 --> 00:13:44,880
and there's like that happens all over

368
00:13:43,760 --> 00:13:46,160
the place and so adding a new

369
00:13:44,880 --> 00:13:47,439
instruction like

370
00:13:46,160 --> 00:13:50,079
a lot of things are broken and it takes

371
00:13:47,440 --> 00:13:50,560
a long time to find broken transforms

372
00:13:50,079 --> 00:13:52,880
but

373
00:13:50,560 --> 00:13:54,000
we've we put i've paid a lot of blood

374
00:13:52,880 --> 00:13:56,480
into

375
00:13:54,000 --> 00:13:57,839
call br like if you want to build on top

376
00:13:56,480 --> 00:14:02,399
of it

377
00:13:57,839 --> 00:14:05,760
it's relatively stable kind of thing

378
00:14:02,399 --> 00:14:06,600
yeah about the community a while ago one

379
00:14:05,760 --> 00:14:10,079
of your top

380
00:14:06,600 --> 00:14:11,120
contributors rafael vida left the

381
00:14:10,079 --> 00:14:13,120
project

382
00:14:11,120 --> 00:14:14,639
due to something you could likely call

383
00:14:13,120 --> 00:14:17,680
political reasons

384
00:14:14,639 --> 00:14:19,120
mr did this have a negative impact on

385
00:14:17,680 --> 00:14:21,040
the community that the atmosphere

386
00:14:19,120 --> 00:14:24,320
changed do you notice that he's missing

387
00:14:21,040 --> 00:14:27,439
he has contributed so much um

388
00:14:24,320 --> 00:14:31,839
i can only give my personal view and

389
00:14:27,440 --> 00:14:31,839
i didn't notice the difference so

390
00:14:32,240 --> 00:14:38,320
so raphael was a big contributor to

391
00:14:35,760 --> 00:14:40,880
lld i guess so i guess i know him from

392
00:14:38,320 --> 00:14:44,000
those particular ones and

393
00:14:40,880 --> 00:14:46,399
yes did the velocity of the lld project

394
00:14:44,000 --> 00:14:47,440
um it would have been faster if raphael

395
00:14:46,399 --> 00:14:49,199
had stayed around and

396
00:14:47,440 --> 00:14:51,040
yes it almost certainly would have been

397
00:14:49,199 --> 00:14:52,479
but i think other people from the

398
00:14:51,040 --> 00:14:54,160
community have come

399
00:14:52,480 --> 00:14:56,079
have come up and stepped into that place

400
00:14:54,160 --> 00:14:57,199
and whilst we may not have been as fast

401
00:14:56,079 --> 00:14:58,959
as we were before we

402
00:14:57,199 --> 00:15:00,639
have we have managed to pick that up but

403
00:14:58,959 --> 00:15:02,000
yes there's always a risk in any

404
00:15:00,639 --> 00:15:03,680
when when anyone leaves the community

405
00:15:02,000 --> 00:15:06,800
for any particular reason

406
00:15:03,680 --> 00:15:08,319
um that project will will slow down but

407
00:15:06,800 --> 00:15:10,000
generally when someone leaves a hole

408
00:15:08,320 --> 00:15:11,680
other people rise up to fill it

409
00:15:10,000 --> 00:15:14,560
it's all i could say there anybody else

410
00:15:11,680 --> 00:15:14,560
want anything to add up that

411
00:15:16,079 --> 00:15:20,399
that's another question i'm not quite

412
00:15:19,040 --> 00:15:21,199
sure whether it's fully a question or

413
00:15:20,399 --> 00:15:23,279
sometimes

414
00:15:21,199 --> 00:15:25,599
a statement but i'm using all the admins

415
00:15:23,279 --> 00:15:26,639
from an open source project and i found

416
00:15:25,600 --> 00:15:29,759
it extremely hard

417
00:15:26,639 --> 00:15:30,079
to to deal with obm from the perspective

418
00:15:29,759 --> 00:15:32,240
that

419
00:15:30,079 --> 00:15:34,079
distribution for big me to like have a

420
00:15:32,240 --> 00:15:36,560
rendered version of lvm

421
00:15:34,079 --> 00:15:37,279
but lvm api has changed so much and we

422
00:15:36,560 --> 00:15:41,359
have five years

423
00:15:37,279 --> 00:15:42,560
back for it and like it's a nightmare

424
00:15:41,360 --> 00:15:44,800
and i don't know whether you have any

425
00:15:42,560 --> 00:15:47,119
experience like they assume you have

426
00:15:44,800 --> 00:15:49,359
some experience like that so if any tips

427
00:15:47,120 --> 00:15:51,759
on that i would be very

428
00:15:49,360 --> 00:15:51,759
interested

429
00:15:53,519 --> 00:15:56,639
so i haven't have any direct experience

430
00:15:56,000 --> 00:15:58,480
myself

431
00:15:56,639 --> 00:16:00,240
i know that um i think one of our

432
00:15:58,480 --> 00:16:02,720
earlier presenters today um

433
00:16:00,240 --> 00:16:04,240
um alex dennis of um i don't know he's

434
00:16:02,720 --> 00:16:06,800
in the room at the moment but uh

435
00:16:04,240 --> 00:16:08,800
i remember him presenting about his

436
00:16:06,800 --> 00:16:10,399
particular strategy for one of his tools

437
00:16:08,800 --> 00:16:11,920
that had to support multiple backwards

438
00:16:10,399 --> 00:16:14,399
revisions of llvmi

439
00:16:11,920 --> 00:16:15,680
i think in effect it had he had

440
00:16:14,399 --> 00:16:17,360
basically wrapped version

441
00:16:15,680 --> 00:16:19,040
sort of interfaces where it had various

442
00:16:17,360 --> 00:16:20,560
different ones yeah i think it's one of

443
00:16:19,040 --> 00:16:23,439
those things that the

444
00:16:20,560 --> 00:16:23,680
i think the community sort of um it has

445
00:16:23,440 --> 00:16:25,680
it

446
00:16:23,680 --> 00:16:26,800
it follows the live head mentality

447
00:16:25,680 --> 00:16:28,479
unfortunately i think it's one of those

448
00:16:26,800 --> 00:16:29,599
things you want to use llvmir

449
00:16:28,480 --> 00:16:31,040
unfortunately you pretty much have to

450
00:16:29,600 --> 00:16:32,000
subscribe to that otherwise you're in

451
00:16:31,040 --> 00:16:34,000
pro

452
00:16:32,000 --> 00:16:35,440
it's painful yes i think it's just one

453
00:16:34,000 --> 00:16:36,079
of the drawbacks of that particular

454
00:16:35,440 --> 00:16:38,639
model

455
00:16:36,079 --> 00:16:38,638
anyone else

456
00:16:43,440 --> 00:16:47,120
well i i think i can only make like a

457
00:16:45,519 --> 00:16:49,519
general statement that's it's

458
00:16:47,120 --> 00:16:50,720
it's a trade-off between improving the

459
00:16:49,519 --> 00:16:53,040
system you're working on

460
00:16:50,720 --> 00:16:53,920
requiring to break apis or being held

461
00:16:53,040 --> 00:16:58,000
back

462
00:16:53,920 --> 00:16:59,360
by keeping stable apis apis for for a

463
00:16:58,000 --> 00:17:02,880
long time to come so

464
00:16:59,360 --> 00:17:05,120
but yeah maybe my guess is that

465
00:17:02,880 --> 00:17:07,439
most of the people who contribute a lot

466
00:17:05,119 --> 00:17:08,319
to llvm maybe feel the pain less because

467
00:17:07,439 --> 00:17:09,679
they

468
00:17:08,319 --> 00:17:11,520
they don't have the use case of having

469
00:17:09,679 --> 00:17:14,319
to support something that was

470
00:17:11,520 --> 00:17:16,559
uh the version from five years ago or

471
00:17:14,319 --> 00:17:20,159
five multiple versions at the same time

472
00:17:16,559 --> 00:17:20,639
so yeah i do think i don't think we

473
00:17:20,160 --> 00:17:24,000
could

474
00:17:20,640 --> 00:17:27,520
be better at lvm at using the

475
00:17:24,000 --> 00:17:30,480
lvm what is called attribute deprecated

476
00:17:27,520 --> 00:17:31,600
to just keep old versions of overloads

477
00:17:30,480 --> 00:17:34,559
for example around

478
00:17:31,600 --> 00:17:36,080
and just mark them as deprecated so that

479
00:17:34,559 --> 00:17:36,639
because we have the same problem as well

480
00:17:36,080 --> 00:17:38,320
because

481
00:17:36,640 --> 00:17:40,400
some of our stuff this is actually

482
00:17:38,320 --> 00:17:42,240
outside of the lpm project but

483
00:17:40,400 --> 00:17:43,520
yeah i think we should do a better job

484
00:17:42,240 --> 00:17:45,600
of this

485
00:17:43,520 --> 00:17:48,480
so i'll try to summarize nikolai thinks

486
00:17:45,600 --> 00:17:50,799
we should do a better job by using

487
00:17:48,480 --> 00:17:52,400
deprecated attributes and if i

488
00:17:50,799 --> 00:17:55,120
understood correctly

489
00:17:52,400 --> 00:17:57,120
uh having wrappers that the old api

490
00:17:55,120 --> 00:17:58,840
keeps on working but under the hoods

491
00:17:57,120 --> 00:18:00,239
calls the the new api something like

492
00:17:58,840 --> 00:18:13,360
that

493
00:18:00,240 --> 00:18:16,559
where it's feasible

494
00:18:13,360 --> 00:18:20,320
many people choose that and the c

495
00:18:16,559 --> 00:18:23,360
api may be an option i've never used

496
00:18:20,320 --> 00:18:23,360
it and i've used it

497
00:18:26,880 --> 00:18:30,480
the surgery marks uh the rest uh the

498
00:18:29,520 --> 00:18:33,918
rest project

499
00:18:30,480 --> 00:18:35,919
does use wrappers to have some api

500
00:18:33,919 --> 00:18:38,160
stability

501
00:18:35,919 --> 00:18:39,039
and the c api is also mentioned

502
00:18:38,160 --> 00:18:41,440
apparently it's

503
00:18:39,039 --> 00:18:43,200
less of a pain but also sometimes you

504
00:18:41,440 --> 00:18:45,919
you do see that the same problem

505
00:18:43,200 --> 00:18:45,919
popping up there

506
00:18:47,440 --> 00:18:53,200
question in the back so one of the fun

507
00:18:50,400 --> 00:18:53,200
parts

508
00:18:54,960 --> 00:18:58,080
any code you is need some runtime

509
00:18:56,799 --> 00:19:01,039
libraries like

510
00:18:58,080 --> 00:19:01,600
most obviously let's see uh but also

511
00:19:01,039 --> 00:19:04,080
things like

512
00:19:01,600 --> 00:19:05,678
um has a massive pile of rubber

513
00:19:04,080 --> 00:19:10,320
libraries

514
00:19:05,679 --> 00:19:13,280
and the lvm project now has uh

515
00:19:10,320 --> 00:19:13,840
i think slightly rotted open sierra run

516
00:19:13,280 --> 00:19:17,039
time

517
00:19:13,840 --> 00:19:19,760
but it also has beginnings of a little c

518
00:19:17,039 --> 00:19:23,679
this indicates that alabama is becoming

519
00:19:19,760 --> 00:19:23,679
a bit more open to having more run types

520
00:19:37,600 --> 00:19:42,159
no so so the question is or i'll just

521
00:19:41,120 --> 00:19:45,280
try to rephrase

522
00:19:42,160 --> 00:19:46,080
um there's a number of if you want to

523
00:19:45,280 --> 00:19:50,799
get any code

524
00:19:46,080 --> 00:19:50,799
running you need runtime libraries um

525
00:19:51,200 --> 00:19:55,039
llvm for example has opencl runtime

526
00:19:53,120 --> 00:19:58,159
libraries there's a

527
00:19:55,039 --> 00:19:59,520
c runtime library project starting and

528
00:19:58,160 --> 00:20:02,720
the question is

529
00:19:59,520 --> 00:20:04,158
um llvm seems to be open to accepting

530
00:20:02,720 --> 00:20:05,679
more runtime libraries

531
00:20:04,159 --> 00:20:08,000
you've got a bunch of runtime libraries

532
00:20:05,679 --> 00:20:11,039
and you want to contribute all of them

533
00:20:08,000 --> 00:20:11,039
how do you go about that

534
00:20:14,000 --> 00:20:17,919
this is pretty much speculation on my

535
00:20:15,679 --> 00:20:19,360
part but i i think a lot of it depends

536
00:20:17,919 --> 00:20:22,080
on

537
00:20:19,360 --> 00:20:23,678
is there a large subset of the community

538
00:20:22,080 --> 00:20:24,480
that's interested in those particular

539
00:20:23,679 --> 00:20:27,360
ones i think

540
00:20:24,480 --> 00:20:28,960
a libsy obviously is of interest for

541
00:20:27,360 --> 00:20:31,439
quite a substantial

542
00:20:28,960 --> 00:20:32,799
portion of the community although that

543
00:20:31,440 --> 00:20:34,559
does bring the drawback there's a lot of

544
00:20:32,799 --> 00:20:38,320
different opinions on how to do

545
00:20:34,559 --> 00:20:40,720
said lipsy but i certainly think um

546
00:20:38,320 --> 00:20:42,240
if the various runtimes that you've got

547
00:20:40,720 --> 00:20:43,600
reach a significant amount of people

548
00:20:42,240 --> 00:20:45,679
particularly some of the larger

549
00:20:43,600 --> 00:20:46,879
community members who can potentially

550
00:20:45,679 --> 00:20:48,799
throw more of their weight

551
00:20:46,880 --> 00:20:49,919
to to actually get some of that through

552
00:20:48,799 --> 00:20:51,280
so i think i think the answer is

553
00:20:49,919 --> 00:20:55,200
probably it depends

554
00:20:51,280 --> 00:20:57,200
um if if something is considered useful

555
00:20:55,200 --> 00:21:03,840
by considerable amount of the members i

556
00:20:57,200 --> 00:21:03,840
think it it's worth a shot i think

557
00:21:26,000 --> 00:21:29,120
uh sorry isn't compiler rt has separate

558
00:21:28,799 --> 00:21:32,639
like

559
00:21:29,120 --> 00:21:34,239
iso specific builds right so i'd assume

560
00:21:32,640 --> 00:21:35,919
it would follow a similar model to

561
00:21:34,240 --> 00:21:38,240
whatever compiler rt does

562
00:21:35,919 --> 00:21:44,159
uh have you talked to any of the

563
00:21:38,240 --> 00:21:48,799
compiler rt folks about this idea

564
00:21:44,159 --> 00:21:51,039
well git log compiler rt

565
00:21:48,799 --> 00:21:51,039
sorry

566
00:21:53,600 --> 00:21:57,360
yeah i think maybe just one last remark

567
00:21:55,600 --> 00:21:59,678
on that is the only way to find out is

568
00:21:57,360 --> 00:22:02,320
actually have an rfc proposal

569
00:21:59,679 --> 00:22:03,039
and see what kind of answers you get try

570
00:22:02,320 --> 00:22:07,600
to explain

571
00:22:03,039 --> 00:22:12,480
your rationale for wanting to contribute

572
00:22:07,600 --> 00:22:15,600
that's the best way to find out

573
00:22:12,480 --> 00:22:17,360
as uh as russ was mentioned um

574
00:22:15,600 --> 00:22:18,879
did i get this right the rust folks are

575
00:22:17,360 --> 00:22:21,918
just

576
00:22:18,880 --> 00:22:23,840
uh basically normal users of llvm or is

577
00:22:21,919 --> 00:22:24,799
there some sort of cooperation between

578
00:22:23,840 --> 00:22:28,158
you guys

579
00:22:24,799 --> 00:22:31,360
are so

580
00:22:28,159 --> 00:22:33,280
um from my point of view it's not like

581
00:22:31,360 --> 00:22:37,520
the llvm community is like a

582
00:22:33,280 --> 00:22:39,440
very cohesive small set of people so um

583
00:22:37,520 --> 00:22:41,120
some that there might be close

584
00:22:39,440 --> 00:22:42,799
collaborations with between some people

585
00:22:41,120 --> 00:22:43,918
in the lvm community and some people in

586
00:22:42,799 --> 00:22:46,080
the rest community

587
00:22:43,919 --> 00:22:47,039
me personally i don't have a close

588
00:22:46,080 --> 00:22:49,039
collaboration with

589
00:22:47,039 --> 00:22:50,400
uh rus people per se so from my

590
00:22:49,039 --> 00:22:53,520
perspective i would say

591
00:22:50,400 --> 00:22:55,120
it's more like the users of llvm

592
00:22:53,520 --> 00:22:56,559
and probably some of the risk developers

593
00:22:55,120 --> 00:22:59,840
probably contribute

594
00:22:56,559 --> 00:23:01,440
changes to llvm

595
00:22:59,840 --> 00:23:03,280
but i'm guessing some people who are

596
00:23:01,440 --> 00:23:04,159
active in the lvm community might see it

597
00:23:03,280 --> 00:23:06,000
differently

598
00:23:04,159 --> 00:23:07,280
i'm mostly interested because i would

599
00:23:06,000 --> 00:23:09,520
like to know if there

600
00:23:07,280 --> 00:23:11,039
have been any changes to llvm to

601
00:23:09,520 --> 00:23:14,080
accommodate

602
00:23:11,039 --> 00:23:14,640
king's rosters have there been any

603
00:23:14,080 --> 00:23:18,158
changes

604
00:23:14,640 --> 00:23:22,159
in adult vm to accommodate rust

605
00:23:18,159 --> 00:23:24,240
can anyone think of song

606
00:23:22,159 --> 00:23:25,679
uh i can't think of concrete examples of

607
00:23:24,240 --> 00:23:28,080
changes to llvm

608
00:23:25,679 --> 00:23:30,320
um but the last time i spoke to alex

609
00:23:28,080 --> 00:23:33,840
crichton who's one of the rust

610
00:23:30,320 --> 00:23:37,918
c developers he explained to me that

611
00:23:33,840 --> 00:23:40,158
they have significantly expanded

612
00:23:37,919 --> 00:23:41,600
llvm's interface they have like quite a

613
00:23:40,159 --> 00:23:46,320
few additional

614
00:23:41,600 --> 00:23:50,240
kind of methods that they expose in llvm

615
00:23:46,320 --> 00:23:51,520
for whatever additional um uh

616
00:23:50,240 --> 00:23:53,360
you know whatever their front end kind

617
00:23:51,520 --> 00:23:55,440
of needs additionally and i said oh wow

618
00:23:53,360 --> 00:23:56,959
like this is great have you um thought

619
00:23:55,440 --> 00:23:58,159
of up streaming this and he says well of

620
00:23:56,960 --> 00:23:59,039
course i thought of upstream and i'm

621
00:23:58,159 --> 00:24:00,480
just so busy

622
00:23:59,039 --> 00:24:02,960
you know i never have time to kind of

623
00:24:00,480 --> 00:24:05,039
thing so i think a lot of the folks

624
00:24:02,960 --> 00:24:06,640
at mozilla were like interested in this

625
00:24:05,039 --> 00:24:09,200
compilation pipeline of like

626
00:24:06,640 --> 00:24:10,799
rust through llvm to web assembly kind

627
00:24:09,200 --> 00:24:13,200
of thing and so you had people

628
00:24:10,799 --> 00:24:14,960
working on like web assembly back ends

629
00:24:13,200 --> 00:24:16,880
and then like rust front ends

630
00:24:14,960 --> 00:24:18,799
kind of thing and then it didn't look

631
00:24:16,880 --> 00:24:19,279
like too much development within llvm

632
00:24:18,799 --> 00:24:21,918
itself

633
00:24:19,279 --> 00:24:22,720
kind of thing and i think um since then

634
00:24:21,919 --> 00:24:25,360
i've actually

635
00:24:22,720 --> 00:24:26,320
i think they've kind of picked up like

636
00:24:25,360 --> 00:24:27,039
there's more people in the rust

637
00:24:26,320 --> 00:24:30,879
community

638
00:24:27,039 --> 00:24:32,960
looking at uh making modifications to

639
00:24:30,880 --> 00:24:36,240
llvm itself

640
00:24:32,960 --> 00:24:38,320
i was surprised most recently to find

641
00:24:36,240 --> 00:24:40,159
some folks on google's fuchsia tool

642
00:24:38,320 --> 00:24:41,120
chain team contributing to the rust

643
00:24:40,159 --> 00:24:44,000
compiler

644
00:24:41,120 --> 00:24:46,000
kind of thing and kind of using existing

645
00:24:44,000 --> 00:24:49,279
llvm experience to uh

646
00:24:46,000 --> 00:24:52,559
to to extend llvm for rust but concrete

647
00:24:49,279 --> 00:24:52,559
examples i i can't give you one

648
00:24:57,320 --> 00:25:00,960
sorry used for

649
00:25:09,360 --> 00:25:12,799
so yeah the question is if in our

650
00:25:11,919 --> 00:25:14,880
product then the

651
00:25:12,799 --> 00:25:17,039
lvm is used for the generation of the

652
00:25:14,880 --> 00:25:20,880
hardware or only for

653
00:25:17,039 --> 00:25:24,320
the extensions the instructions

654
00:25:20,880 --> 00:25:25,039
so lvm is used as the front-end compiler

655
00:25:24,320 --> 00:25:28,399
cc

656
00:25:25,039 --> 00:25:29,600
plus and it maps to the specific

657
00:25:28,400 --> 00:25:31,679
instructions that you have in your

658
00:25:29,600 --> 00:25:33,360
hardware so it's not used to produce the

659
00:25:31,679 --> 00:25:35,279
actual rtl hardware or

660
00:25:33,360 --> 00:25:36,719
do any of the optimizations there so

661
00:25:35,279 --> 00:25:39,760
it's not lvm ir2

662
00:25:36,720 --> 00:25:42,080
rtl but it's a c to your

663
00:25:39,760 --> 00:25:44,799
particular instruction sets that you

664
00:25:42,080 --> 00:25:44,799
have defined

665
00:25:45,039 --> 00:25:49,360
i was secretly hoping that there was

666
00:25:46,480 --> 00:25:49,360
this open source

667
00:25:52,320 --> 00:26:00,080
well there do exist

668
00:25:56,159 --> 00:26:02,320
uh lvm ir2 rtl generators but i'm not

669
00:26:00,080 --> 00:26:04,158
sure if they are open source

670
00:26:02,320 --> 00:26:05,600
there are there have been talks in the

671
00:26:04,159 --> 00:26:11,840
past

672
00:26:05,600 --> 00:26:11,840
about such systems

673
00:26:22,240 --> 00:26:24,720
and then

674
00:26:36,960 --> 00:26:44,960
mean when we execute pre-compiled

675
00:26:41,200 --> 00:26:47,600
white code in

676
00:26:44,960 --> 00:26:47,600
when we compile

677
00:26:48,559 --> 00:26:52,240
is it possible to optimize this code in

678
00:26:51,120 --> 00:26:55,520
runtime

679
00:26:52,240 --> 00:26:57,679
by profiling the paths which are

680
00:26:55,520 --> 00:27:01,039
executed

681
00:26:57,679 --> 00:27:01,520
so the question is that you can use lvm

682
00:27:01,039 --> 00:27:04,799
to

683
00:27:01,520 --> 00:27:08,559
compile code but you can also use it to

684
00:27:04,799 --> 00:27:13,120
generate runtime code at runtime so jit

685
00:27:08,559 --> 00:27:18,000
and the question is if you can use

686
00:27:13,120 --> 00:27:18,000
which paths are used

687
00:27:18,799 --> 00:27:21,039
like

688
00:27:27,600 --> 00:27:31,039
yeah so the question is if you can also

689
00:27:29,200 --> 00:27:35,840
use profile guided

690
00:27:31,039 --> 00:27:35,840
optimizations for the jitting

691
00:27:36,559 --> 00:27:40,240
in our tools we also use lvm as jit

692
00:27:39,760 --> 00:27:44,080
engine

693
00:27:40,240 --> 00:27:47,520
for the simulation and we do make use of

694
00:27:44,080 --> 00:27:47,520
runtime information there

695
00:27:47,679 --> 00:27:50,799
we are not using profile guided

696
00:27:49,760 --> 00:27:54,240
optimizations

697
00:27:50,799 --> 00:27:56,879
although if you can uh if you can

698
00:27:54,240 --> 00:27:58,399
get the numbers the probabilities i'm

699
00:27:56,880 --> 00:28:03,600
sure you can also

700
00:27:58,399 --> 00:28:03,600
make use of the passes when doing jets

701
00:28:04,960 --> 00:28:09,200
to that point so i actually supervised

702
00:28:07,039 --> 00:28:11,679
the master thesis last year

703
00:28:09,200 --> 00:28:12,399
where we did that on the gpu and it

704
00:28:11,679 --> 00:28:14,399
works

705
00:28:12,399 --> 00:28:16,879
the main issue was actually getting the

706
00:28:14,399 --> 00:28:19,678
data back into the compiler

707
00:28:16,880 --> 00:28:20,320
you can just use all the code that llvm

708
00:28:19,679 --> 00:28:24,320
has for

709
00:28:20,320 --> 00:28:25,678
ahead of time profile instrumentation

710
00:28:24,320 --> 00:28:28,320
you just need to mess with what the

711
00:28:25,679 --> 00:28:30,880
runtime does to store the data

712
00:28:28,320 --> 00:28:30,879
and get

713
00:28:39,840 --> 00:28:45,840
is always

714
00:28:47,120 --> 00:28:51,120
maybe one more example i'm thinking of

715
00:28:49,200 --> 00:28:53,440
as uh there's been a

716
00:28:51,120 --> 00:28:54,799
few presentations at the dev meetings

717
00:28:53,440 --> 00:28:58,720
from how azul

718
00:28:54,799 --> 00:28:59,200
uses the llvm jets in their java virtual

719
00:28:58,720 --> 00:29:01,039
machine

720
00:28:59,200 --> 00:29:02,399
and there for sure they need runtime

721
00:29:01,039 --> 00:29:04,720
information to be able

722
00:29:02,399 --> 00:29:06,719
to optimize well that's exactly how much

723
00:29:04,720 --> 00:29:07,440
of that infrastructure is fully upstream

724
00:29:06,720 --> 00:29:08,960
versus

725
00:29:07,440 --> 00:29:10,880
part of their products that remains a

726
00:29:08,960 --> 00:29:12,960
little bit unclear to me

727
00:29:10,880 --> 00:29:13,919
but at least it shows it's possible

728
00:29:12,960 --> 00:29:15,279
maybe

729
00:29:13,919 --> 00:29:17,919
you don't have all of the necessary

730
00:29:15,279 --> 00:29:20,720
infrastructure in open source lvm

731
00:29:17,919 --> 00:29:22,159
i'm sorry i i i've heard about for

732
00:29:20,720 --> 00:29:25,679
example

733
00:29:22,159 --> 00:29:28,960
which is used in java for calculation

734
00:29:25,679 --> 00:29:33,600
allowing infrastructure but

735
00:29:28,960 --> 00:29:33,600
it doesn't use all vm features

736
00:29:34,159 --> 00:29:41,120
it uses java okay

737
00:29:37,279 --> 00:29:45,600
so i was wondering if it is possible

738
00:29:41,120 --> 00:29:45,600
with native features right

739
00:29:46,880 --> 00:29:50,080
well slvm is mainly just a bunch of

740
00:29:49,360 --> 00:29:53,120
libraries

741
00:29:50,080 --> 00:29:54,000
and in the main clan you can do this so

742
00:29:53,120 --> 00:29:56,320
once you

743
00:29:54,000 --> 00:29:57,440
can provide actual uh numbers of

744
00:29:56,320 --> 00:30:00,639
measuring

745
00:29:57,440 --> 00:30:02,559
uh the number of iterations on then you

746
00:30:00,640 --> 00:30:04,880
can just include those libraries

747
00:30:02,559 --> 00:30:08,480
and you can get it done but it's of

748
00:30:04,880 --> 00:30:10,880
course extra work

749
00:30:08,480 --> 00:30:12,480
i have actually done this and it works

750
00:30:10,880 --> 00:30:16,799
it's the problem is that

751
00:30:12,480 --> 00:30:18,799
the profile guide the instruction emits

752
00:30:16,799 --> 00:30:19,840
force it to be done into file with the

753
00:30:18,799 --> 00:30:21,679
profile information

754
00:30:19,840 --> 00:30:23,039
so you have to have these weird temp

755
00:30:21,679 --> 00:30:24,000
files and there's a bunch of race

756
00:30:23,039 --> 00:30:25,840
conditions around

757
00:30:24,000 --> 00:30:27,120
multiple processes right into the same

758
00:30:25,840 --> 00:30:29,199
file

759
00:30:27,120 --> 00:30:37,840
except for you need to hack that out and

760
00:30:29,200 --> 00:30:37,840
that works

761
00:30:42,000 --> 00:30:44,960
any other questions

762
00:30:45,039 --> 00:30:49,440
maybe when we are talking about the jit

763
00:30:46,960 --> 00:30:53,039
02 interfaces the

764
00:30:49,440 --> 00:30:55,440
mcgit and the aux jet and in other areas

765
00:30:53,039 --> 00:30:58,480
llvm is always

766
00:30:55,440 --> 00:30:59,120
eager to have a good interface and

767
00:30:58,480 --> 00:31:01,600
there's

768
00:30:59,120 --> 00:31:04,479
two interfaces for years it's are there

769
00:31:01,600 --> 00:31:06,879
any plans to streamline this too

770
00:31:04,480 --> 00:31:09,679
well there is arc v2 already so we have

771
00:31:06,880 --> 00:31:09,679
three interfaces

772
00:31:09,760 --> 00:31:14,080
and there used to be classic genes also

773
00:31:11,760 --> 00:31:14,080
before

774
00:31:14,159 --> 00:31:19,840
makes the question much stronger

775
00:31:19,919 --> 00:31:24,080
don't know too much about the jits but i

776
00:31:21,440 --> 00:31:26,000
know um the the author of um

777
00:31:24,080 --> 00:31:28,399
i think orchid and probably object too

778
00:31:26,000 --> 00:31:29,440
has just started a sort of um

779
00:31:28,399 --> 00:31:31,678
i don't know what it's a weekly or

780
00:31:29,440 --> 00:31:33,519
monthly sort of summary of

781
00:31:31,679 --> 00:31:34,720
the progress in that sort of area so

782
00:31:33,519 --> 00:31:36,240
there's being a bit more

783
00:31:34,720 --> 00:31:37,679
on llvm dev a lot more sort of

784
00:31:36,240 --> 00:31:38,480
consolidated reporting on that so if

785
00:31:37,679 --> 00:31:40,880
you're interested in that

786
00:31:38,480 --> 00:31:42,320
area be worth following that i think the

787
00:31:40,880 --> 00:31:44,000
guy's name is lang haims

788
00:31:42,320 --> 00:31:45,840
i think if you follow follow that that

789
00:31:44,000 --> 00:31:48,240
would be pretty worthwhile to see what

790
00:31:45,840 --> 00:31:52,720
if there's any development in that area

791
00:31:48,240 --> 00:31:52,720
if you also have a question here yeah um

792
00:31:55,600 --> 00:31:59,120
but if you take a step back technical

793
00:31:58,240 --> 00:32:01,679
questions but

794
00:31:59,120 --> 00:32:03,360
take a step back and look at llvm what

795
00:32:01,679 --> 00:32:05,679
are the three things that

796
00:32:03,360 --> 00:32:06,559
you would really want but i find too

797
00:32:05,679 --> 00:32:10,080
difficult to do

798
00:32:06,559 --> 00:32:12,000
or it's just too much work this moment

799
00:32:10,080 --> 00:32:14,559
what features what you want what you

800
00:32:12,000 --> 00:32:14,559
want to do

801
00:32:25,200 --> 00:32:28,880
it would be nice to not have a long tail

802
00:32:26,960 --> 00:32:32,159
of like compatibility bugs

803
00:32:28,880 --> 00:32:34,480
in like weird corner edge cases

804
00:32:32,159 --> 00:32:36,240
i find myself working on a lot of those

805
00:32:34,480 --> 00:32:39,279
i would like to get back to just

806
00:32:36,240 --> 00:32:41,360
traditional compiler optimizations like

807
00:32:39,279 --> 00:32:43,840
insta combined is like a nice pure

808
00:32:41,360 --> 00:32:43,840
classical

809
00:32:44,159 --> 00:32:46,640
i don't know

810
00:32:50,960 --> 00:32:54,559
maybe it's not top three but one of the

811
00:32:52,799 --> 00:32:57,760
things that keeps on annoying me

812
00:32:54,559 --> 00:32:59,678
is that maybe the first question is

813
00:32:57,760 --> 00:33:01,279
who actually can sign off on a

814
00:32:59,679 --> 00:33:05,039
particular change

815
00:33:01,279 --> 00:33:07,840
so uh with the uh most of the time

816
00:33:05,039 --> 00:33:08,320
actually it's uh i find it nice that

817
00:33:07,840 --> 00:33:10,000
there

818
00:33:08,320 --> 00:33:12,080
there's more of this consensus driven

819
00:33:10,000 --> 00:33:13,120
model towards having decisions but at

820
00:33:12,080 --> 00:33:15,120
some point

821
00:33:13,120 --> 00:33:17,360
some discussions just keep on going and

822
00:33:15,120 --> 00:33:20,559
going

823
00:33:17,360 --> 00:33:23,039
and having no decision

824
00:33:20,559 --> 00:33:26,399
seems worse than having either option a

825
00:33:23,039 --> 00:33:28,240
or option b decided and move forward

826
00:33:26,399 --> 00:33:29,518
i'm not entirely sure if there's a

827
00:33:28,240 --> 00:33:32,240
solution to that

828
00:33:29,519 --> 00:33:39,600
that's not worth the status quo

829
00:33:32,240 --> 00:33:42,399
sometimes that annoys me

830
00:33:39,600 --> 00:33:43,039
how do you decide yeah i think that yeah

831
00:33:42,399 --> 00:33:45,760
i think the

832
00:33:43,039 --> 00:33:47,760
there there has been some move at least

833
00:33:45,760 --> 00:33:48,158
from chris slatner to sort of maybe try

834
00:33:47,760 --> 00:33:50,480
and

835
00:33:48,159 --> 00:33:51,440
open this kind of worms for um sort of

836
00:33:50,480 --> 00:33:53,600
saying

837
00:33:51,440 --> 00:33:55,360
do how do we come up as a community with

838
00:33:53,600 --> 00:33:56,959
a sort of decision-making procedure to

839
00:33:55,360 --> 00:33:59,039
try and break some of the deadlocks and

840
00:33:56,960 --> 00:34:00,320
i say i fully welcome welcome that i

841
00:33:59,039 --> 00:34:01,600
think that's uh

842
00:34:00,320 --> 00:34:02,960
hopefully as a community we can come up

843
00:34:01,600 --> 00:34:04,879
with something that over several

844
00:34:02,960 --> 00:34:06,399
iterations we can all agree with but i

845
00:34:04,880 --> 00:34:07,919
think i agree with christoph the

846
00:34:06,399 --> 00:34:09,839
the majority of things that i want from

847
00:34:07,919 --> 00:34:12,560
the lrvm are more community

848
00:34:09,839 --> 00:34:14,000
based and technical base um i guess from

849
00:34:12,560 --> 00:34:16,320
a technical side i

850
00:34:14,000 --> 00:34:17,839
i would love that it didn't have a

851
00:34:16,320 --> 00:34:20,079
horrible experience for people with the

852
00:34:17,839 --> 00:34:22,639
default build options um

853
00:34:20,079 --> 00:34:23,200
so the first thing you type nin ninja or

854
00:34:22,639 --> 00:34:25,520
make

855
00:34:23,199 --> 00:34:27,359
you end up with static linking debug

856
00:34:25,520 --> 00:34:29,199
with as many threads as you can use

857
00:34:27,359 --> 00:34:30,399
and it generally blows people's memory

858
00:34:29,199 --> 00:34:31,839
apart and

859
00:34:30,399 --> 00:34:33,359
there are a different set of build

860
00:34:31,839 --> 00:34:34,960
options to avoid that but they're not

861
00:34:33,359 --> 00:34:35,279
the default and we don't even document

862
00:34:34,960 --> 00:34:36,960
them

863
00:34:35,280 --> 00:34:39,679
so lots of lots of questions on the

864
00:34:36,960 --> 00:34:42,240
mailing list about that

865
00:34:39,679 --> 00:34:44,560
as far as actual features that i think

866
00:34:42,239 --> 00:34:47,598
hulk promise in the future

867
00:34:44,560 --> 00:34:50,000
i'm particularly excited about

868
00:34:47,599 --> 00:34:51,520
post link optimization and i think

869
00:34:50,000 --> 00:34:52,480
that's being explored in a bunch of

870
00:34:51,520 --> 00:34:55,359
different spaces

871
00:34:52,480 --> 00:34:56,480
including like parts of lovm but a lot

872
00:34:55,359 --> 00:34:58,720
of it is kind of like

873
00:34:56,480 --> 00:35:00,240
the linker process has ended and like

874
00:34:58,720 --> 00:35:02,000
you've thrown away all this knowledge

875
00:35:00,240 --> 00:35:04,560
that the linker just accumulated such

876
00:35:02,000 --> 00:35:06,560
as was there a relocation here and like

877
00:35:04,560 --> 00:35:07,759
who really needs this value to really be

878
00:35:06,560 --> 00:35:09,440
in this spot

879
00:35:07,760 --> 00:35:10,960
right and and and i think people are

880
00:35:09,440 --> 00:35:12,480
kind of proving out that you can

881
00:35:10,960 --> 00:35:14,720
like there's still performance we're

882
00:35:12,480 --> 00:35:16,240
leaving on the table right that post

883
00:35:14,720 --> 00:35:19,118
link optimization can win back

884
00:35:16,240 --> 00:35:20,720
things back but for very very large

885
00:35:19,119 --> 00:35:24,079
binaries

886
00:35:20,720 --> 00:35:25,759
or like certain

887
00:35:24,079 --> 00:35:27,280
large programs there's like assumptions

888
00:35:25,760 --> 00:35:29,119
that post link optimization just

889
00:35:27,280 --> 00:35:31,280
completely wrecks the binary

890
00:35:29,119 --> 00:35:32,720
and doesn't give you something that's

891
00:35:31,280 --> 00:35:35,119
actually runnable or usable

892
00:35:32,720 --> 00:35:37,279
but i think if these were more tightly

893
00:35:35,119 --> 00:35:39,359
integrated into the linker

894
00:35:37,280 --> 00:35:40,720
perhaps we may be able to like keep some

895
00:35:39,359 --> 00:35:42,960
of that information

896
00:35:40,720 --> 00:35:46,480
around and actually like do further

897
00:35:42,960 --> 00:35:46,480
optimizations that we're not doing today

898
00:35:50,400 --> 00:35:59,839
two questions

899
00:36:10,079 --> 00:36:13,200
uh i guess the question was like what

900
00:36:12,079 --> 00:36:15,119
was the status on the

901
00:36:13,200 --> 00:36:16,319
the original pass manager versus the the

902
00:36:15,119 --> 00:36:18,480
new pass manager

903
00:36:16,320 --> 00:36:20,079
um my understanding is that passes are

904
00:36:18,480 --> 00:36:23,040
slowly being ported over

905
00:36:20,079 --> 00:36:24,560
to the new pass manager um i i don't i

906
00:36:23,040 --> 00:36:25,520
don't know that there's any deadlines or

907
00:36:24,560 --> 00:36:26,799
plans but

908
00:36:25,520 --> 00:36:29,119
do you have something to say about that

909
00:36:26,800 --> 00:36:30,000
yeah so i don't know if anybody has been

910
00:36:29,119 --> 00:36:31,920
in the

911
00:36:30,000 --> 00:36:34,079
linux kernel keynote that was this

912
00:36:31,920 --> 00:36:35,440
morning where the speaker i think made

913
00:36:34,079 --> 00:36:36,560
the very interesting point that the

914
00:36:35,440 --> 00:36:40,160
linux kernel

915
00:36:36,560 --> 00:36:41,759
successfully managed to evolve small

916
00:36:40,160 --> 00:36:43,440
changes at a time

917
00:36:41,760 --> 00:36:45,040
and the whole thing is like i agree that

918
00:36:43,440 --> 00:36:47,440
the task manager has a nice

919
00:36:45,040 --> 00:36:48,480
design but i think it made the mistake

920
00:36:47,440 --> 00:36:50,720
of

921
00:36:48,480 --> 00:36:51,839
introducing something completely new and

922
00:36:50,720 --> 00:36:53,759
then you know

923
00:36:51,839 --> 00:36:55,680
people just don't switch over and the

924
00:36:53,760 --> 00:36:57,760
thing that i wanted to

925
00:36:55,680 --> 00:36:59,520
to still kind of bring up is i have the

926
00:36:57,760 --> 00:37:02,320
same feeling about mlir

927
00:36:59,520 --> 00:37:03,920
like mlr is something that is in some

928
00:37:02,320 --> 00:37:04,560
sense great and it demonstrates that

929
00:37:03,920 --> 00:37:08,720
there is a

930
00:37:04,560 --> 00:37:11,119
desire to have an extensible ir but

931
00:37:08,720 --> 00:37:13,279
i also want an extensible ir but adding

932
00:37:11,119 --> 00:37:14,800
mlr into our compiler pipeline gives me

933
00:37:13,280 --> 00:37:16,400
nightmares because our customers are

934
00:37:14,800 --> 00:37:17,839
already complaining that llvm is too

935
00:37:16,400 --> 00:37:20,880
bloated

936
00:37:17,839 --> 00:37:22,240
having an mli r2lbmr transition puts a

937
00:37:20,880 --> 00:37:23,280
barrier where you can't do pass

938
00:37:22,240 --> 00:37:25,680
reordering anymore

939
00:37:23,280 --> 00:37:27,280
it just it blocks you so i was just

940
00:37:25,680 --> 00:37:28,960
wondering how people feel about

941
00:37:27,280 --> 00:37:30,320
we've seen people want an accessible

942
00:37:28,960 --> 00:37:32,320
hour and

943
00:37:30,320 --> 00:37:34,079
and there's there's you know

944
00:37:32,320 --> 00:37:37,680
understandable

945
00:37:34,079 --> 00:37:38,720
hesitation to expand ldmr itself but i

946
00:37:37,680 --> 00:37:40,480
think if we

947
00:37:38,720 --> 00:37:42,560
think about carefully what we can do in

948
00:37:40,480 --> 00:37:44,320
small sets then maybe we can get to a

949
00:37:42,560 --> 00:37:47,040
point where elements are always

950
00:37:44,320 --> 00:37:51,839
extensible as mlrs and i wonder if any

951
00:37:47,040 --> 00:37:51,839
of you have thought about that

952
00:37:56,079 --> 00:37:59,440
no i haven't really thought about that

953
00:38:01,119 --> 00:38:06,240
i'm happy to offer an opinion so

954
00:38:06,400 --> 00:38:11,200
try so so you've criticized

955
00:38:09,599 --> 00:38:12,720
the design approach where you create

956
00:38:11,200 --> 00:38:15,040
something brand new

957
00:38:12,720 --> 00:38:16,720
bolted on top rather than gradually

958
00:38:15,040 --> 00:38:19,359
changing something that exists

959
00:38:16,720 --> 00:38:20,799
in this case llvmr it demonstrates that

960
00:38:19,359 --> 00:38:24,480
it's useful right

961
00:38:20,800 --> 00:38:26,800
yeah so um

962
00:38:24,480 --> 00:38:28,400
i don't know in this specific case maybe

963
00:38:26,800 --> 00:38:29,920
that's the only way to demonstrate

964
00:38:28,400 --> 00:38:32,320
it's useful and that's how you have to

965
00:38:29,920 --> 00:38:32,320
do it

966
00:38:32,880 --> 00:38:38,560
maybe gradually mlir and llvmir

967
00:38:36,960 --> 00:38:42,079
could grow closer together it just

968
00:38:38,560 --> 00:38:45,440
becomes a dialect in mlir

969
00:38:42,079 --> 00:38:48,480
might take a dozen years or more

970
00:38:45,440 --> 00:38:50,000
to get there uh so

971
00:38:48,480 --> 00:38:51,520
i i would say like i definitely

972
00:38:50,000 --> 00:38:54,880
recognize

973
00:38:51,520 --> 00:38:58,000
um people being bearish

974
00:38:54,880 --> 00:39:01,040
bullish or bearish right on uh on

975
00:38:58,000 --> 00:39:02,960
additional intermediary representations

976
00:39:01,040 --> 00:39:04,640
i think like one of my favorite examples

977
00:39:02,960 --> 00:39:05,520
right now is this project called crane

978
00:39:04,640 --> 00:39:07,920
lift

979
00:39:05,520 --> 00:39:08,640
um that that kind of like if you think

980
00:39:07,920 --> 00:39:10,880
so

981
00:39:08,640 --> 00:39:12,799
you know llvm has two different pass

982
00:39:10,880 --> 00:39:14,320
managers it also has

983
00:39:12,800 --> 00:39:15,920
like three different instruction

984
00:39:14,320 --> 00:39:17,920
selectors and

985
00:39:15,920 --> 00:39:19,280
two different register allocators at

986
00:39:17,920 --> 00:39:22,160
least two um

987
00:39:19,280 --> 00:39:25,040
but but the crane lift says like let's

988
00:39:22,160 --> 00:39:26,640
bypass like multiple ir conversions and

989
00:39:25,040 --> 00:39:28,800
like just go straight to machine code

990
00:39:26,640 --> 00:39:29,839
right and and we think we can cut out a

991
00:39:28,800 --> 00:39:31,760
lot of

992
00:39:29,839 --> 00:39:33,200
um compilation time or time spent

993
00:39:31,760 --> 00:39:35,040
lowering by not

994
00:39:33,200 --> 00:39:37,200
spending so much time going between ir

995
00:39:35,040 --> 00:39:38,720
to ir and ir so so i can agree

996
00:39:37,200 --> 00:39:40,560
kind of from that that perspective the

997
00:39:38,720 --> 00:39:43,359
the the spirit of the question

998
00:39:40,560 --> 00:39:44,880
um i think the point of mlir where it

999
00:39:43,359 --> 00:39:48,000
really shines to me is

1000
00:39:44,880 --> 00:39:49,680
is um kind of converting to and from a

1001
00:39:48,000 --> 00:39:53,040
textual representation

1002
00:39:49,680 --> 00:39:55,440
and then doing uh kind of your

1003
00:39:53,040 --> 00:39:56,880
your dependency analysis or like use def

1004
00:39:55,440 --> 00:39:59,119
chains or

1005
00:39:56,880 --> 00:40:01,359
um like certain compiler passes are

1006
00:39:59,119 --> 00:40:02,640
really kind of language agnostic

1007
00:40:01,359 --> 00:40:05,440
and it would be really cool to be able

1008
00:40:02,640 --> 00:40:11,839
to like generate a compiler from a

1009
00:40:05,440 --> 00:40:11,839
abstract description of your ir

1010
00:40:13,520 --> 00:40:19,599
does anyone have a 20-second question

1011
00:40:16,800 --> 00:40:20,880
oh oh andre 20 seconds i just have a

1012
00:40:19,599 --> 00:40:22,960
quick follow-up on the new

1013
00:40:20,880 --> 00:40:24,880
versus legacy pass manager yeah there

1014
00:40:22,960 --> 00:40:26,560
was an rfc on the mailing list few

1015
00:40:24,880 --> 00:40:28,400
months ago are we ready to switch to the

1016
00:40:26,560 --> 00:40:31,920
new fast manager consensus was

1017
00:40:28,400 --> 00:40:33,599
yes we are expectation was now we have

1018
00:40:31,920 --> 00:40:35,680
switched but no we have not

1019
00:40:33,599 --> 00:40:37,119
as far as i know all passes with an ldm

1020
00:40:35,680 --> 00:40:39,118
have both interfaces

1021
00:40:37,119 --> 00:40:40,400
and porting a steady straightforward but

1022
00:40:39,119 --> 00:40:42,400
no we have not

1023
00:40:40,400 --> 00:40:43,599
switched so we have the api for the new

1024
00:40:42,400 --> 00:40:47,280
one there's no c

1025
00:40:43,599 --> 00:40:49,599
api other things missing yes

1026
00:40:47,280 --> 00:40:50,480
but as far as best consensus is the

1027
00:40:49,599 --> 00:40:53,839
switch

1028
00:40:50,480 --> 00:40:53,839
all right

1029
00:41:00,560 --> 00:41:04,078
i'm afraid we we have run out of time

1030
00:41:02,319 --> 00:41:04,400
for this session uh thank you everyone

1031
00:41:04,079 --> 00:41:07,440
for

1032
00:41:04,400 --> 00:41:07,839
the questions thank you panelists and i

1033
00:41:07,440 --> 00:41:10,319
would

1034
00:41:07,839 --> 00:41:10,880
like to also request if you have any

1035
00:41:10,319 --> 00:41:12,480
feedback

1036
00:41:10,880 --> 00:41:14,000
given that we run this as a first time

1037
00:41:12,480 --> 00:41:15,760
as an experiment please do share

1038
00:41:14,000 --> 00:41:18,720
feedback either in person

1039
00:41:15,760 --> 00:41:20,000
email me or on the fosdem website at the

1040
00:41:18,720 --> 00:41:21,520
bottom of this session

1041
00:41:20,000 --> 00:41:23,520
or every session you can also share

1042
00:41:21,520 --> 00:41:35,839
feedback please do share your feedback

1043
00:41:23,520 --> 00:41:35,839
thank you

1044
00:41:36,400 --> 00:41:38,480
you

