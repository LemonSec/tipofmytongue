1
00:00:05,520 --> 00:00:09,559
so hello

2
00:00:06,799 --> 00:00:10,960
so my name is i'm the first silver silva

3
00:00:09,560 --> 00:00:13,920
[Music]

4
00:00:10,960 --> 00:00:14,920
and yeah we'll talk about graffiti

5
00:00:13,920 --> 00:00:18,640
graffiti was

6
00:00:14,920 --> 00:00:22,400
created because it's first we were

7
00:00:18,640 --> 00:00:22,400
working on skydive which is a

8
00:00:22,720 --> 00:00:26,880
networking tool so it's one of the

9
00:00:25,119 --> 00:00:27,759
features it allows you to get the

10
00:00:26,880 --> 00:00:31,119
topology

11
00:00:27,760 --> 00:00:34,079
of your world network infrastructure and

12
00:00:31,119 --> 00:00:35,440
and to retrieve the topology and to

13
00:00:34,079 --> 00:00:38,960
visualize it

14
00:00:35,440 --> 00:00:41,040
and so and so the data model that we use

15
00:00:38,960 --> 00:00:44,079
for skydive is a graph

16
00:00:41,040 --> 00:00:46,320
and so so we extracted this part

17
00:00:44,079 --> 00:00:48,480
and we created a brand new project from

18
00:00:46,320 --> 00:00:51,360
this which is graffiti

19
00:00:48,480 --> 00:00:53,120
so the the engine is embedded in inside

20
00:00:51,360 --> 00:00:56,000
skylive

21
00:00:53,120 --> 00:00:57,280
so it's a it's a it's a graph engine

22
00:00:56,000 --> 00:01:00,719
which is a highly

23
00:00:57,280 --> 00:01:03,520
event based so um

24
00:01:00,719 --> 00:01:04,799
everything in skydive go through through

25
00:01:03,520 --> 00:01:09,280
events

26
00:01:04,799 --> 00:01:11,040
uh it has uh interesting features uh

27
00:01:09,280 --> 00:01:12,799
one of the interesting features we have

28
00:01:11,040 --> 00:01:15,600
is that it's uh it allows to

29
00:01:12,799 --> 00:01:18,000
to time travel so it allows you to to

30
00:01:15,600 --> 00:01:22,240
query the graph

31
00:01:18,000 --> 00:01:22,240
as it was as a certain point of time

32
00:01:22,320 --> 00:01:26,798
it's it's highly available so you can

33
00:01:25,600 --> 00:01:30,320
have like multiple

34
00:01:26,799 --> 00:01:33,360
um we'll see later but one of the

35
00:01:30,320 --> 00:01:35,279
the components is the under the hubs so

36
00:01:33,360 --> 00:01:37,360
we can have multiple hubs

37
00:01:35,280 --> 00:01:38,560
and so it provides you high availability

38
00:01:37,360 --> 00:01:40,400
for your graph

39
00:01:38,560 --> 00:01:42,000
and it's also it provides a load

40
00:01:40,400 --> 00:01:44,880
balancing because

41
00:01:42,000 --> 00:01:46,799
uh i will see that um we can you can

42
00:01:44,880 --> 00:01:50,079
subscribe to multiple hubs

43
00:01:46,799 --> 00:01:54,399
and so and to read to to

44
00:01:50,079 --> 00:01:54,399
to balance the load

45
00:01:55,200 --> 00:02:00,159
so why why did not we create uh did we

46
00:01:58,079 --> 00:02:03,119
create our own

47
00:02:00,159 --> 00:02:04,000
engine it's because first we we were

48
00:02:03,119 --> 00:02:07,520
using uh

49
00:02:04,000 --> 00:02:09,759
existing graph engines and but we had

50
00:02:07,520 --> 00:02:10,799
first the the constraint of the the

51
00:02:09,758 --> 00:02:13,920
embedding

52
00:02:10,800 --> 00:02:16,560
so that that was the

53
00:02:13,920 --> 00:02:17,040
our first constraint and uh but also we

54
00:02:16,560 --> 00:02:18,879
had

55
00:02:17,040 --> 00:02:20,319
constrained we wanted to be able to

56
00:02:18,879 --> 00:02:21,920
easily extend

57
00:02:20,319 --> 00:02:24,079
the the query language that we were

58
00:02:21,920 --> 00:02:26,238
using in fact in skydive we

59
00:02:24,080 --> 00:02:27,440
implemented in gravity we implemented

60
00:02:26,239 --> 00:02:31,360
the

61
00:02:27,440 --> 00:02:34,800
our own gremlin parser and exec

62
00:02:31,360 --> 00:02:37,920
executor and so we wanted to be

63
00:02:34,800 --> 00:02:40,640
able to add custom steps very easily and

64
00:02:37,920 --> 00:02:43,119
even steps that are not really graph

65
00:02:40,640 --> 00:02:43,119
related

66
00:02:43,920 --> 00:02:50,958
so that's the architecture of of gravity

67
00:02:47,680 --> 00:02:52,000
we have a few first components is the

68
00:02:50,959 --> 00:02:55,360
pod

69
00:02:52,000 --> 00:02:58,480
so the part is a is a

70
00:02:55,360 --> 00:03:02,159
small agent it has just a local graph

71
00:02:58,480 --> 00:03:05,840
just part of the graph and

72
00:03:02,159 --> 00:03:08,159
that's where you create the nodes uh so

73
00:03:05,840 --> 00:03:08,959
in our case in this case in the case of

74
00:03:08,159 --> 00:03:12,159
skydive

75
00:03:08,959 --> 00:03:14,879
this is uh the pods are running on the

76
00:03:12,159 --> 00:03:16,399
machines of the infrastructure and so

77
00:03:14,879 --> 00:03:18,159
the the graph is populated

78
00:03:16,400 --> 00:03:19,920
on the on the pod and then the pod

79
00:03:18,159 --> 00:03:22,000
forwards it's rough

80
00:03:19,920 --> 00:03:22,958
to another component which which is the

81
00:03:22,000 --> 00:03:26,159
hub

82
00:03:22,959 --> 00:03:29,680
and the hub uh has the the wall graph

83
00:03:26,159 --> 00:03:32,399
so it resides it's in memory but it

84
00:03:29,680 --> 00:03:33,599
it's also persistent so it's a you can

85
00:03:32,400 --> 00:03:36,720
also have a

86
00:03:33,599 --> 00:03:36,720
database behind it

87
00:03:37,040 --> 00:03:42,000
so as you can see the the hubs are

88
00:03:38,879 --> 00:03:44,079
replicated they are

89
00:03:42,000 --> 00:03:46,879
connected and the pods are connected to

90
00:03:44,080 --> 00:03:51,120
multiple hubs just in case of

91
00:03:46,879 --> 00:03:51,120
failover or load balancing

92
00:03:53,680 --> 00:04:01,760
so this regarding the event mechanisms

93
00:03:57,120 --> 00:04:04,640
so it's a it's a graph as a pop sub so

94
00:04:01,760 --> 00:04:04,959
you can so in when internally so when

95
00:04:04,640 --> 00:04:08,000
it's

96
00:04:04,959 --> 00:04:12,239
using in this embedded mode

97
00:04:08,000 --> 00:04:15,200
you you register callbacks on the graph

98
00:04:12,239 --> 00:04:16,560
and then your code is uh is a triggered

99
00:04:15,200 --> 00:04:21,199
when any event

100
00:04:16,560 --> 00:04:23,600
happens on the graph you can also uh

101
00:04:21,199 --> 00:04:25,680
subscribe to the graph externally

102
00:04:23,600 --> 00:04:28,400
through through a web socket

103
00:04:25,680 --> 00:04:29,759
so that's the way the the web the web ui

104
00:04:28,400 --> 00:04:33,599
works

105
00:04:29,759 --> 00:04:37,199
um and you can also publish to

106
00:04:33,600 --> 00:04:38,479
to the graph so you can publish to a pod

107
00:04:37,199 --> 00:04:40,560
or to a hub

108
00:04:38,479 --> 00:04:42,800
it doesn't doesn't make any difference

109
00:04:40,560 --> 00:04:46,160
it's the same api

110
00:04:42,800 --> 00:04:46,160
and you can also

111
00:04:46,720 --> 00:04:50,720
subscribe just to portion of the graph

112
00:04:48,560 --> 00:04:51,199
if you are not interested in all the

113
00:04:50,720 --> 00:04:54,240
events

114
00:04:51,199 --> 00:04:57,840
of the graph just a few nodes or so

115
00:04:54,240 --> 00:05:00,400
subsets you can subscribe on this

116
00:04:57,840 --> 00:05:01,758
uh so the events that you get are pretty

117
00:05:00,400 --> 00:05:03,599
straightforward is the

118
00:05:01,759 --> 00:05:06,720
note creation the edge creation the

119
00:05:03,600 --> 00:05:06,720
updates the deletes

120
00:05:07,360 --> 00:05:14,960
um so we the messages are encoded

121
00:05:11,759 --> 00:05:18,000
in different formats you can use json

122
00:05:14,960 --> 00:05:21,120
for the web ui obviously and uh and but

123
00:05:18,000 --> 00:05:23,600
you can also use a protobuf

124
00:05:21,120 --> 00:05:24,240
for performance reasons so that's the

125
00:05:23,600 --> 00:05:26,800
way the

126
00:05:24,240 --> 00:05:27,280
the way the the pods and their hubs are

127
00:05:26,800 --> 00:05:29,360
con

128
00:05:27,280 --> 00:05:32,320
are talking together is through using

129
00:05:29,360 --> 00:05:35,120
web protobuf

130
00:05:32,320 --> 00:05:35,440
so regarding the history uh so we we

131
00:05:35,120 --> 00:05:38,320
keep

132
00:05:35,440 --> 00:05:38,960
every uh every modification on the graph

133
00:05:38,320 --> 00:05:42,400
uh

134
00:05:38,960 --> 00:05:46,239
generates a new revision of the elements

135
00:05:42,400 --> 00:05:49,359
um so that allows us to do two things

136
00:05:46,240 --> 00:05:53,039
it's just to say uh show me the graph

137
00:05:49,360 --> 00:05:56,319
as it was as a specific point of time

138
00:05:53,039 --> 00:05:59,759
but also to see uh all the modifications

139
00:05:56,319 --> 00:06:02,319
that um on that happened

140
00:05:59,759 --> 00:06:03,440
on the node are our subset of the graph

141
00:06:02,319 --> 00:06:06,800
so you can see like

142
00:06:03,440 --> 00:06:09,120
they give me what happened to this node

143
00:06:06,800 --> 00:06:10,960
and you will get all the all the events

144
00:06:09,120 --> 00:06:13,199
all the modifications and the revisions

145
00:06:10,960 --> 00:06:16,400
of our node

146
00:06:13,199 --> 00:06:18,880
so to do to achieve this so to query

147
00:06:16,400 --> 00:06:20,318
uh to use this time context we

148
00:06:18,880 --> 00:06:23,440
introduced a new step

149
00:06:20,319 --> 00:06:25,840
agreement step which we called at and

150
00:06:23,440 --> 00:06:27,759
you can see here that um

151
00:06:25,840 --> 00:06:29,520
you can you can specify your time so

152
00:06:27,759 --> 00:06:34,240
let's say that let

153
00:06:29,520 --> 00:06:36,880
this next question says the graph

154
00:06:34,240 --> 00:06:37,440
how it was one minute ago or you can

155
00:06:36,880 --> 00:06:40,639
specify

156
00:06:37,440 --> 00:06:44,240
a date and you can

157
00:06:40,639 --> 00:06:49,120
also say um give a time and then

158
00:06:44,240 --> 00:06:52,479
the the period where you want to get the

159
00:06:49,120 --> 00:06:52,479
you get the revisions from

160
00:06:52,880 --> 00:06:56,240
uh so we support as a back-end we

161
00:06:55,759 --> 00:06:59,840
support

162
00:06:56,240 --> 00:07:02,880
elasticsearch um but we also

163
00:06:59,840 --> 00:07:06,000
support orientdb but it's i would not

164
00:07:02,880 --> 00:07:09,360
recommend you to to use this

165
00:07:06,000 --> 00:07:12,400
so because yeah our all our efforts are

166
00:07:09,360 --> 00:07:14,560
put on the elasticsearch backend

167
00:07:12,400 --> 00:07:15,599
we also have like uh in the case of

168
00:07:14,560 --> 00:07:18,639
elasticsearch

169
00:07:15,599 --> 00:07:21,199
to to to maintain uh

170
00:07:18,639 --> 00:07:23,039
so the the index are not too big we have

171
00:07:21,199 --> 00:07:25,039
a rolling index mechanism a rolling

172
00:07:23,039 --> 00:07:28,318
index mechanism

173
00:07:25,039 --> 00:07:31,360
so and you can set like i don't i

174
00:07:28,319 --> 00:07:34,880
don't want my index to be more than

175
00:07:31,360 --> 00:07:37,039
a specific size or a specific number of

176
00:07:34,880 --> 00:07:39,840
nodes

177
00:07:37,039 --> 00:07:40,400
so to achieve high availability we have

178
00:07:39,840 --> 00:07:45,119
a

179
00:07:40,400 --> 00:07:47,120
replication mechanisms between the hubs

180
00:07:45,120 --> 00:07:48,560
and for the load balance for the load

181
00:07:47,120 --> 00:07:52,720
balancing we the pods

182
00:07:48,560 --> 00:07:56,800
are use a round robin connections

183
00:07:52,720 --> 00:08:00,319
to the to the hubs and we handle the

184
00:07:56,800 --> 00:08:02,639
reconnection so if the network

185
00:08:00,319 --> 00:08:05,039
connectivity goes down then the parts

186
00:08:02,639 --> 00:08:08,560
will automatically reconnect

187
00:08:05,039 --> 00:08:12,000
and re-sync their their graph

188
00:08:08,560 --> 00:08:15,120
with the hubs and we have

189
00:08:12,000 --> 00:08:15,680
um and for the rolling index this has to

190
00:08:15,120 --> 00:08:18,879
be done

191
00:08:15,680 --> 00:08:21,360
on a single uh hub so we have a

192
00:08:18,879 --> 00:08:24,000
master election that and for this we use

193
00:08:21,360 --> 00:08:24,000
etcd

194
00:08:24,960 --> 00:08:30,080
so to write remnant extensions uh those

195
00:08:28,080 --> 00:08:31,758
have they have to be written in go

196
00:08:30,080 --> 00:08:34,880
because as uh

197
00:08:31,759 --> 00:08:39,599
graffiti is written entirely in go

198
00:08:34,880 --> 00:08:41,919
um and so and in

199
00:08:39,599 --> 00:08:43,519
and your new step will be available

200
00:08:41,919 --> 00:08:46,360
automatically available through the

201
00:08:43,519 --> 00:08:47,519
rest api um

202
00:08:46,360 --> 00:08:50,959
[Music]

203
00:08:47,519 --> 00:08:54,240
so we did not implement uh all

204
00:08:50,959 --> 00:08:57,839
the gremlins the specifications only

205
00:08:54,240 --> 00:08:58,320
the one we were really using so we have

206
00:08:57,839 --> 00:09:01,360
all the

207
00:08:58,320 --> 00:09:03,760
basic uh gremlin steps and

208
00:09:01,360 --> 00:09:05,040
the one we added for specifically for

209
00:09:03,760 --> 00:09:08,720
for the time selection

210
00:09:05,040 --> 00:09:13,040
but we also added steps

211
00:09:08,720 --> 00:09:14,959
for uh networking purpose so in

212
00:09:13,040 --> 00:09:16,319
the case of skydive so the main user of

213
00:09:14,959 --> 00:09:18,399
graffiti

214
00:09:16,320 --> 00:09:19,519
we added the flow steps so that allows

215
00:09:18,399 --> 00:09:21,920
you to

216
00:09:19,519 --> 00:09:23,839
you can retrieve the network network

217
00:09:21,920 --> 00:09:24,880
flows of your infrastructure you can get

218
00:09:23,839 --> 00:09:28,160
some metrics

219
00:09:24,880 --> 00:09:30,160
you can have like sockets so those are

220
00:09:28,160 --> 00:09:31,920
i won't explain this because it's this

221
00:09:30,160 --> 00:09:35,439
network specific stuff

222
00:09:31,920 --> 00:09:38,319
but the fact is that it

223
00:09:35,440 --> 00:09:40,160
trends it it provides a graph transform

224
00:09:38,320 --> 00:09:42,240
transformation so if you do

225
00:09:40,160 --> 00:09:43,360
use the socket steps then you have a new

226
00:09:42,240 --> 00:09:45,360
graph

227
00:09:43,360 --> 00:09:46,560
and then you can also subscribe to this

228
00:09:45,360 --> 00:09:48,880
new graph and get

229
00:09:46,560 --> 00:09:50,000
the the same feature that you have with

230
00:09:48,880 --> 00:09:54,320
a

231
00:09:50,000 --> 00:09:56,640
the regular graph and now

232
00:09:54,320 --> 00:09:56,640
sorry

233
00:10:02,839 --> 00:10:05,839
sorry

234
00:10:14,000 --> 00:10:19,440
okay this is the first demo so just

235
00:10:17,440 --> 00:10:20,800
just pause it yes yes just to introduce

236
00:10:19,440 --> 00:10:22,480
you what what it is fine

237
00:10:20,800 --> 00:10:24,000
this is this is a webinar that we are

238
00:10:22,480 --> 00:10:27,200
using for sky which is a

239
00:10:24,000 --> 00:10:28,640
the the core project for graffiti but

240
00:10:27,200 --> 00:10:32,240
definitely it can be used with

241
00:10:28,640 --> 00:10:34,319
with yeah it can be used it was used it

242
00:10:32,240 --> 00:10:36,399
was used by sky directory but definitely

243
00:10:34,320 --> 00:10:39,600
you can use it with gravity

244
00:10:36,399 --> 00:10:42,720
yeah so that's what you can get

245
00:10:39,600 --> 00:10:44,399
uh so you can explore the graph

246
00:10:42,720 --> 00:10:46,000
it's a kind of a tree because it's

247
00:10:44,399 --> 00:10:48,079
because of skydive but

248
00:10:46,000 --> 00:10:49,680
then you have a radio graph we can see

249
00:10:48,079 --> 00:10:51,760
we have multiple parents

250
00:10:49,680 --> 00:10:55,040
and you can walk through the graph you

251
00:10:51,760 --> 00:10:55,040
will get a metadata

252
00:10:55,519 --> 00:11:01,680
yes sorry

253
00:11:00,240 --> 00:11:03,600
and the metadata you can you can have

254
00:11:01,680 --> 00:11:05,040
multiple metadata and you have a way to

255
00:11:03,600 --> 00:11:07,120
render them properly

256
00:11:05,040 --> 00:11:08,319
according to what to your needs you have

257
00:11:07,120 --> 00:11:10,880
a way to

258
00:11:08,320 --> 00:11:12,399
to to do search to to select the columns

259
00:11:10,880 --> 00:11:14,000
that you want to see

260
00:11:12,399 --> 00:11:15,519
you can describe your metadata and the

261
00:11:14,000 --> 00:11:18,560
rendering used for that

262
00:11:15,519 --> 00:11:18,560
within a config file

263
00:11:18,800 --> 00:11:24,319
so since this is an embedded project uh

264
00:11:21,920 --> 00:11:26,160
you embed your graffiti in your project

265
00:11:24,320 --> 00:11:27,600
and you provide metadata and then the

266
00:11:26,160 --> 00:11:30,640
web ui will render it

267
00:11:27,600 --> 00:11:32,320
properly and

268
00:11:30,640 --> 00:11:34,240
thanks to the story for example for the

269
00:11:32,320 --> 00:11:34,959
for the matrix here is for networking

270
00:11:34,240 --> 00:11:38,240
purpose but

271
00:11:34,959 --> 00:11:39,199
then thanks to the history we can we can

272
00:11:38,240 --> 00:11:42,399
get a graph

273
00:11:39,200 --> 00:11:45,120
of the data requesting the

274
00:11:42,399 --> 00:11:46,640
yes the period of time something like

275
00:11:45,120 --> 00:11:50,320
this

276
00:11:46,640 --> 00:11:52,399
uh and then we thanks to the web we have

277
00:11:50,320 --> 00:11:53,839
we have a way to tag uh the links and

278
00:11:52,399 --> 00:11:56,399
the the notes

279
00:11:53,839 --> 00:11:57,519
and then you it will generate different

280
00:11:56,399 --> 00:11:59,600
views

281
00:11:57,519 --> 00:12:01,440
so yeah that's another another view so

282
00:11:59,600 --> 00:12:02,560
it's it's a kubernetes infrastructure so

283
00:12:01,440 --> 00:12:04,320
you can get the infrastructure i mean

284
00:12:02,560 --> 00:12:07,839
the physical infrastructure and then

285
00:12:04,320 --> 00:12:08,320
the logical one and and basically we we

286
00:12:07,839 --> 00:12:11,839
have

287
00:12:08,320 --> 00:12:13,920
a kind of layers of graphs

288
00:12:11,839 --> 00:12:16,959
so and we you can select the types the

289
00:12:13,920 --> 00:12:16,959
link types you want to see

290
00:12:18,079 --> 00:12:21,839
and now we are going to see that we are

291
00:12:20,320 --> 00:12:24,480
going to leverage the

292
00:12:21,839 --> 00:12:26,399
filtering subscribing mechanism so yeah

293
00:12:24,480 --> 00:12:28,160
when we click on this

294
00:12:26,399 --> 00:12:29,839
the webinar is going to reconnect to the

295
00:12:28,160 --> 00:12:33,120
to graffiti subscribing to

296
00:12:29,839 --> 00:12:33,680
us another subgraph and getting another

297
00:12:33,120 --> 00:12:35,920
view

298
00:12:33,680 --> 00:12:36,719
assuming just a subgraph so here that

299
00:12:35,920 --> 00:12:40,399
just

300
00:12:36,720 --> 00:12:42,560
the namespaces and

301
00:12:40,399 --> 00:12:44,240
yeah and you can do you can do a quick

302
00:12:42,560 --> 00:12:46,479
search thanks to the web ui

303
00:12:44,240 --> 00:12:47,680
the kind of index and then it will open

304
00:12:46,480 --> 00:12:53,839
properly the

305
00:12:47,680 --> 00:12:53,839
the node and yeah

306
00:12:55,360 --> 00:13:01,120
no no no

307
00:12:58,880 --> 00:13:01,120
one

308
00:13:04,839 --> 00:13:12,000
okay so just to summarize a bit

309
00:13:08,480 --> 00:13:14,800
when to use graffiti and when to

310
00:13:12,000 --> 00:13:15,680
to not use it so definitely if you want

311
00:13:14,800 --> 00:13:18,000
to write on

312
00:13:15,680 --> 00:13:19,040
a go long application having an

313
00:13:18,000 --> 00:13:21,680
abandoned

314
00:13:19,040 --> 00:13:22,560
graph engine you can use it it's

315
00:13:21,680 --> 00:13:26,079
schema-less

316
00:13:22,560 --> 00:13:28,800
or not you can have schema and that's

317
00:13:26,079 --> 00:13:30,880
useful sometimes

318
00:13:28,800 --> 00:13:33,519
if you want to have like like we did for

319
00:13:30,880 --> 00:13:34,560
skydive if you want to have a kind of

320
00:13:33,519 --> 00:13:36,240
griming language

321
00:13:34,560 --> 00:13:37,760
a common grooming language but being

322
00:13:36,240 --> 00:13:40,240
able to extend it you know for

323
00:13:37,760 --> 00:13:41,760
specific purpose you can definitely do

324
00:13:40,240 --> 00:13:43,040
this

325
00:13:41,760 --> 00:13:44,800
if you want to have a distributed

326
00:13:43,040 --> 00:13:48,399
architecture that's good too

327
00:13:44,800 --> 00:13:49,279
and and we do support iraqi graph hq of

328
00:13:48,399 --> 00:13:51,279
graphs

329
00:13:49,279 --> 00:13:53,680
so meaning if you want to have a subset

330
00:13:51,279 --> 00:13:55,040
of the infrastructure having a specific

331
00:13:53,680 --> 00:13:58,160
graph and then

332
00:13:55,040 --> 00:14:01,120
propagating the graph in the chain

333
00:13:58,160 --> 00:14:02,959
that's possible and attaching acl that's

334
00:14:01,120 --> 00:14:06,240
that's pretty useful because you can get

335
00:14:02,959 --> 00:14:08,560
you can authorize some persona to do

336
00:14:06,240 --> 00:14:11,279
something or to subscribe to something

337
00:14:08,560 --> 00:14:13,359
and wait to not use it so definitely

338
00:14:11,279 --> 00:14:16,639
this is not good for

339
00:14:13,360 --> 00:14:17,839
any graph specific algorithm in high

340
00:14:16,639 --> 00:14:19,440
computing stuff

341
00:14:17,839 --> 00:14:21,040
this is not the purpose of the of the

342
00:14:19,440 --> 00:14:22,000
project it's definitely an embedded

343
00:14:21,040 --> 00:14:24,160
project

344
00:14:22,000 --> 00:14:25,600
and if you have nodes or edges with a

345
00:14:24,160 --> 00:14:27,279
lot of metadata

346
00:14:25,600 --> 00:14:30,240
binary attached to the metadata that's

347
00:14:27,279 --> 00:14:31,760
not good too

348
00:14:30,240 --> 00:14:33,440
that's that's definitely an embedded

349
00:14:31,760 --> 00:14:35,040
project

350
00:14:33,440 --> 00:14:37,120
for the railway it's definitely even

351
00:14:35,040 --> 00:14:40,160
based i will show you that just after

352
00:14:37,120 --> 00:14:42,560
you can do search as i explained

353
00:14:40,160 --> 00:14:44,000
filtering everything you can put

354
00:14:42,560 --> 00:14:47,760
everything in a config file

355
00:14:44,000 --> 00:14:50,399
so you can really customize everything

356
00:14:47,760 --> 00:14:51,519
that's that's one view you can get with

357
00:14:50,399 --> 00:14:52,880
that's definitely a network

358
00:14:51,519 --> 00:14:55,680
infrastructure but you can see

359
00:14:52,880 --> 00:14:57,120
there is plenty of nodes and i do have

360
00:14:55,680 --> 00:14:59,439
another demo

361
00:14:57,120 --> 00:15:00,720
so basically the demo is about doing

362
00:14:59,440 --> 00:15:03,199
something which is completely

363
00:15:00,720 --> 00:15:04,240
outside of the scope of skydive so not

364
00:15:03,199 --> 00:15:06,560
networking purpose

365
00:15:04,240 --> 00:15:07,279
that's a real demo so it will be your

366
00:15:06,560 --> 00:15:11,040
python

367
00:15:07,279 --> 00:15:12,000
um python demo watching a directory

368
00:15:11,040 --> 00:15:15,040
creating note for

369
00:15:12,000 --> 00:15:19,839
files or folders creating edges for

370
00:15:15,040 --> 00:15:22,639
any kind of links between the entities

371
00:15:19,839 --> 00:15:24,399
so basically the code is like this we

372
00:15:22,639 --> 00:15:25,279
are watching thanks to our notifier

373
00:15:24,399 --> 00:15:27,120
folder

374
00:15:25,279 --> 00:15:28,959
and we create nodes when we see a file

375
00:15:27,120 --> 00:15:32,000
or a folder and then

376
00:15:28,959 --> 00:15:35,518
if it's a if it's um we are linking the

377
00:15:32,000 --> 00:15:37,920
the new file to the root

378
00:15:35,519 --> 00:15:39,040
node and if it's a folder we we do this

379
00:15:37,920 --> 00:15:41,680
again

380
00:15:39,040 --> 00:15:43,040
so that's fairly simple this code is in

381
00:15:41,680 --> 00:15:45,199
python

382
00:15:43,040 --> 00:15:47,839
this code is in python meaning that we

383
00:15:45,199 --> 00:15:51,199
are you do have this graphical python

384
00:15:47,839 --> 00:15:54,240
binding so you can it's not mandatory to

385
00:15:51,199 --> 00:15:56,160
interact with graffiti with ingoland

386
00:15:54,240 --> 00:15:58,880
and i'm going to show you that it's

387
00:15:56,160 --> 00:15:58,880
going to be quick

388
00:16:02,560 --> 00:16:07,040
so first we start the dewatcher so we're

389
00:16:05,519 --> 00:16:10,079
going to watch a folder

390
00:16:07,040 --> 00:16:11,439
then i run the script and we are waiting

391
00:16:10,079 --> 00:16:14,560
a bit

392
00:16:11,440 --> 00:16:15,759
so we have a host and then if we expand

393
00:16:14,560 --> 00:16:18,800
it we have

394
00:16:15,759 --> 00:16:20,560
our first folder which is watched

395
00:16:18,800 --> 00:16:22,240
and then we start to demo the

396
00:16:20,560 --> 00:16:23,599
mode.search which is going to create a

397
00:16:22,240 --> 00:16:26,000
few files

398
00:16:23,600 --> 00:16:26,880
so and just to show you that even base

399
00:16:26,000 --> 00:16:31,279
we will see the

400
00:16:26,880 --> 00:16:31,279
web ui reacting on on the events

401
00:16:34,160 --> 00:16:41,680
and yes few folders and then finally

402
00:16:37,199 --> 00:16:46,319
uh we'll see a sim link between

403
00:16:41,680 --> 00:16:48,959
between two files uh

404
00:16:46,320 --> 00:16:50,160
yeah just here that's a sim link and

405
00:16:48,959 --> 00:16:51,839
yeah you you have a

406
00:16:50,160 --> 00:16:54,800
new link types that you can select if

407
00:16:51,839 --> 00:16:56,560
you want and then the filtering again

408
00:16:54,800 --> 00:16:59,839
okay i want to see only the folders and

409
00:16:56,560 --> 00:16:59,839
that's what that's what i have

410
00:17:00,959 --> 00:17:06,720
and i think that it's

411
00:17:04,640 --> 00:17:14,959
so if you have if there is any question

412
00:17:06,720 --> 00:17:17,600
[Applause]

413
00:17:14,959 --> 00:17:19,679
is there any questions yeah uh how do

414
00:17:17,599 --> 00:17:21,119
you handle deletions or can you handle

415
00:17:19,679 --> 00:17:24,799
deletions because of the

416
00:17:21,119 --> 00:17:28,000
possibility of going back inside sorry

417
00:17:24,799 --> 00:17:29,440
yeah that's an event

418
00:17:28,000 --> 00:17:31,840
that's part of the event stored just

419
00:17:29,440 --> 00:17:32,400
repeat the question oh yes yes how do we

420
00:17:31,840 --> 00:17:34,559
handle

421
00:17:32,400 --> 00:17:35,840
deletions of information nodes or edges

422
00:17:34,559 --> 00:17:37,678
for example yeah

423
00:17:35,840 --> 00:17:38,959
so basically we store this information

424
00:17:37,679 --> 00:17:40,880
within the data store

425
00:17:38,960 --> 00:17:43,679
so that's that's one of the events we

426
00:17:40,880 --> 00:17:46,240
saw we store creation deletion updates

427
00:17:43,679 --> 00:17:46,720
maybe you want to yeah you mean in the

428
00:17:46,240 --> 00:17:48,799
data

429
00:17:46,720 --> 00:17:50,160
how you restore it in the database or

430
00:17:48,799 --> 00:17:52,960
the way we

431
00:17:50,160 --> 00:17:54,400
we mark a node as deleted or yeah

432
00:17:52,960 --> 00:17:56,320
because every node has a lifetime

433
00:17:54,400 --> 00:17:58,799
basically has a created and

434
00:17:56,320 --> 00:18:00,000
deleted times and then we just select

435
00:17:58,799 --> 00:18:03,600
the nodes that are

436
00:18:00,000 --> 00:18:06,080
still living and at the time we query

437
00:18:03,600 --> 00:18:07,840
yeah grows over time because at some

438
00:18:06,080 --> 00:18:09,520
point in time you have so much data like

439
00:18:07,840 --> 00:18:11,760
yeah that's what yeah yeah that's why we

440
00:18:09,520 --> 00:18:13,679
we do have a rolling index stuff

441
00:18:11,760 --> 00:18:15,360
okay yeah that's that's one of the

442
00:18:13,679 --> 00:18:17,840
reason and

443
00:18:15,360 --> 00:18:19,120
but and there is a revision which is

444
00:18:17,840 --> 00:18:22,080
keep kept

445
00:18:19,120 --> 00:18:23,039
for all the modifications so that's part

446
00:18:22,080 --> 00:18:26,840
of the mechanism

447
00:18:23,039 --> 00:18:30,400
yeah is there any

448
00:18:26,840 --> 00:18:33,760
transactionality or sort of consistency

449
00:18:30,400 --> 00:18:33,760
in the thinking

450
00:18:34,640 --> 00:18:37,840
okay so if you want to if you use it as

451
00:18:37,200 --> 00:18:40,320
a yes

452
00:18:37,840 --> 00:18:41,280
is there any transaction transactions

453
00:18:40,320 --> 00:18:43,918
thing

454
00:18:41,280 --> 00:18:45,520
so if you use it in january if you embed

455
00:18:43,919 --> 00:18:48,080
the project within your project

456
00:18:45,520 --> 00:18:49,200
yes we do have a mechanism for that but

457
00:18:48,080 --> 00:18:51,520
if you interact it

458
00:18:49,200 --> 00:18:52,400
with the graffiti outside of the golang

459
00:18:51,520 --> 00:18:55,280
scope like

460
00:18:52,400 --> 00:18:56,160
in python there is nothing so it's but

461
00:18:55,280 --> 00:18:58,639
if you embed it

462
00:18:56,160 --> 00:19:06,000
as part of a golem project yes there is

463
00:18:58,640 --> 00:19:06,000
a kind of mechanism for that

464
00:19:07,280 --> 00:19:11,840
sorry can you repeat it

465
00:19:23,280 --> 00:19:36,879
any more questions good then

466
00:19:26,480 --> 00:19:36,880
let's thank the speakers again

