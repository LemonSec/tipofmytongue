1
00:00:05,279 --> 00:00:10,480
i'm going to talk about

2
00:00:06,399 --> 00:00:14,480
raku previously known as

3
00:00:10,480 --> 00:00:16,640
pearl 6 until october last year

4
00:00:14,480 --> 00:00:18,000
long story short it's a different

5
00:00:16,640 --> 00:00:21,520
language

6
00:00:18,000 --> 00:00:24,080
so i mean you you think about

7
00:00:21,520 --> 00:00:25,680
something that has a six in its name and

8
00:00:24,080 --> 00:00:26,560
then you say okay so it's like five a

9
00:00:25,680 --> 00:00:28,160
little

10
00:00:26,560 --> 00:00:30,479
you know bigger or better or whatever

11
00:00:28,160 --> 00:00:32,880
but it's enough it's totally different

12
00:00:30,480 --> 00:00:33,680
still there is more than one way to do

13
00:00:32,880 --> 00:00:36,160
it so

14
00:00:33,680 --> 00:00:37,840
larry wall which by the way his nickname

15
00:00:36,160 --> 00:00:39,919
is tim taudi

16
00:00:37,840 --> 00:00:41,760
there is more than one way to do it so

17
00:00:39,920 --> 00:00:43,120
the basic idea about

18
00:00:41,760 --> 00:00:45,680
record is that there is more than one

19
00:00:43,120 --> 00:00:48,480
way to do it but before

20
00:00:45,680 --> 00:00:50,640
let me tell you about dracula before

21
00:00:48,480 --> 00:00:52,879
that

22
00:00:50,640 --> 00:00:54,480
what are the kind of things that many

23
00:00:52,879 --> 00:00:57,120
cool emerging languages

24
00:00:54,480 --> 00:00:58,319
do nowadays what kind of things are you

25
00:00:57,120 --> 00:01:01,120
going to find

26
00:00:58,320 --> 00:01:02,160
in new languages and also all languages

27
00:01:01,120 --> 00:01:05,199
which are getting

28
00:01:02,160 --> 00:01:09,439
new features one of them is unicode

29
00:01:05,199 --> 00:01:12,399
because unicode is important

30
00:01:09,439 --> 00:01:13,679
it's very extremely important i mean

31
00:01:12,400 --> 00:01:15,360
it's the basis of

32
00:01:13,680 --> 00:01:17,119
every single language is the basic of

33
00:01:15,360 --> 00:01:20,320
every single text computing

34
00:01:17,119 --> 00:01:23,040
nowadays let's check out for instance

35
00:01:20,320 --> 00:01:24,240
javascript javascript has very good

36
00:01:23,040 --> 00:01:27,920
support of unicode

37
00:01:24,240 --> 00:01:31,600
i know you can see that let me let me

38
00:01:27,920 --> 00:01:33,280
okay lower it up for you still

39
00:01:31,600 --> 00:01:34,960
you see that there are many ways of

40
00:01:33,280 --> 00:01:36,400
supporting javascript and

41
00:01:34,960 --> 00:01:38,320
i mean of supporting unique javascript

42
00:01:36,400 --> 00:01:40,400
for instance you can write

43
00:01:38,320 --> 00:01:41,600
the name of identifiers you can write

44
00:01:40,400 --> 00:01:44,320
them in unicode

45
00:01:41,600 --> 00:01:45,119
but also you can use them inside regular

46
00:01:44,320 --> 00:01:47,360
expressions

47
00:01:45,119 --> 00:01:48,320
so you can check if something is is

48
00:01:47,360 --> 00:01:50,240
actually

49
00:01:48,320 --> 00:01:51,758
greek or not and you can you can then

50
00:01:50,240 --> 00:01:54,240
call this

51
00:01:51,759 --> 00:01:55,040
function with this thing and then it

52
00:01:54,240 --> 00:01:57,520
will actually

53
00:01:55,040 --> 00:01:59,040
output just because it's but still you

54
00:01:57,520 --> 00:02:01,520
see something here which is

55
00:01:59,040 --> 00:02:02,799
this thing right this is you so you are

56
00:02:01,520 --> 00:02:05,840
telling explicitly

57
00:02:02,799 --> 00:02:07,119
javascript that it's it's unicode it's a

58
00:02:05,840 --> 00:02:08,399
unicorn regular expression

59
00:02:07,119 --> 00:02:09,840
it's like it happened for instance in

60
00:02:08,399 --> 00:02:10,720
person two in person two if you wanted a

61
00:02:09,840 --> 00:02:13,360
unicorn string

62
00:02:10,720 --> 00:02:14,160
you have to put a new in front so i mean

63
00:02:13,360 --> 00:02:16,800
it's supportive

64
00:02:14,160 --> 00:02:17,920
and you will see this in many languages

65
00:02:16,800 --> 00:02:19,520
will have different kind of

66
00:02:17,920 --> 00:02:21,280
support but there are some other things

67
00:02:19,520 --> 00:02:24,239
for instance lambdas

68
00:02:21,280 --> 00:02:25,920
lambdas are so important that even c

69
00:02:24,239 --> 00:02:28,319
plus plus has lambdas

70
00:02:25,920 --> 00:02:30,799
now which is totally amazing also in

71
00:02:28,319 --> 00:02:32,319
motability

72
00:02:30,800 --> 00:02:34,239
the two things are kind of related

73
00:02:32,319 --> 00:02:35,200
because they're ready to function on

74
00:02:34,239 --> 00:02:37,599
programming

75
00:02:35,200 --> 00:02:38,399
languages are functions that you can use

76
00:02:37,599 --> 00:02:40,079
as data

77
00:02:38,400 --> 00:02:41,440
and they are first-class citizens and

78
00:02:40,080 --> 00:02:42,720
immutability is something that

79
00:02:41,440 --> 00:02:43,920
you are going to use because you're

80
00:02:42,720 --> 00:02:44,959
going to create some kind of variables

81
00:02:43,920 --> 00:02:46,640
that are not changed

82
00:02:44,959 --> 00:02:48,080
and you are going to do some kind of

83
00:02:46,640 --> 00:02:51,119
things with them

84
00:02:48,080 --> 00:02:56,080
like for instance this

85
00:02:51,120 --> 00:02:59,360
i will okay can you see that yeah right

86
00:02:56,080 --> 00:03:00,720
this is closure it's

87
00:02:59,360 --> 00:03:02,400
not a very modern language but it's very

88
00:03:00,720 --> 00:03:04,879
similar to many

89
00:03:02,400 --> 00:03:05,840
other uh lisp-like languages like like

90
00:03:04,879 --> 00:03:07,599
for instance

91
00:03:05,840 --> 00:03:10,000
while or some other like that the first

92
00:03:07,599 --> 00:03:12,560
thing is we define a lambda here

93
00:03:10,000 --> 00:03:14,480
this is a lambda because we are saying

94
00:03:12,560 --> 00:03:17,840
we said we are defining some

95
00:03:14,480 --> 00:03:19,200
general kind of data which is ellipses

96
00:03:17,840 --> 00:03:19,840
and then we're saying okay so this is

97
00:03:19,200 --> 00:03:22,000
going to be an

98
00:03:19,840 --> 00:03:23,360
fn a lambda and then it's going to take

99
00:03:22,000 --> 00:03:24,319
this as an argument and it's going to do

100
00:03:23,360 --> 00:03:28,000
this right

101
00:03:24,319 --> 00:03:28,000
and then this function is a

102
00:03:28,560 --> 00:03:32,239
recursive function which is using that

103
00:03:30,879 --> 00:03:34,640
lambda right here

104
00:03:32,239 --> 00:03:35,599
right so i'm using both things here at

105
00:03:34,640 --> 00:03:37,679
the same time

106
00:03:35,599 --> 00:03:39,359
the good thing about the immutability is

107
00:03:37,680 --> 00:03:40,959
that you can be pretty sure that the

108
00:03:39,360 --> 00:03:42,560
some particular data structure is not

109
00:03:40,959 --> 00:03:45,280
going to change and that allows for

110
00:03:42,560 --> 00:03:46,720
lots of optimizations also needs you

111
00:03:45,280 --> 00:03:49,440
changing a little bit the way you

112
00:03:46,720 --> 00:03:50,400
you think about about the algorithm

113
00:03:49,440 --> 00:03:54,079
everything

114
00:03:50,400 --> 00:03:56,400
and it allows you to forget about loops

115
00:03:54,080 --> 00:03:58,080
so that loops can be eventually

116
00:03:56,400 --> 00:03:59,439
deprecated

117
00:03:58,080 --> 00:04:01,280
there are also some other kind of things

118
00:03:59,439 --> 00:04:02,959
like postmodern assignment

119
00:04:01,280 --> 00:04:05,280
basically what you do is you destruct

120
00:04:02,959 --> 00:04:09,120
your arguments so instead of

121
00:04:05,280 --> 00:04:11,680
taking one data structure here and then

122
00:04:09,120 --> 00:04:12,879
you do some kind of exploration of that

123
00:04:11,680 --> 00:04:14,640
data structure and you put

124
00:04:12,879 --> 00:04:16,639
several data structure on the other side

125
00:04:14,640 --> 00:04:18,798
on the left hand side you can do that

126
00:04:16,639 --> 00:04:20,160
in one single way and also gradual

127
00:04:18,798 --> 00:04:21,519
typing gradle typing is a very cool

128
00:04:20,160 --> 00:04:22,400
thing that many many modern languages

129
00:04:21,519 --> 00:04:24,639
have

130
00:04:22,400 --> 00:04:26,000
and it allows you to use type if you

131
00:04:24,639 --> 00:04:27,600
want

132
00:04:26,000 --> 00:04:29,120
not use it if you don't want right you

133
00:04:27,600 --> 00:04:30,960
can have some some types

134
00:04:29,120 --> 00:04:32,800
i mean some data structures that are

135
00:04:30,960 --> 00:04:35,120
whatever they can change

136
00:04:32,800 --> 00:04:36,160
uh they can have different types along

137
00:04:35,120 --> 00:04:38,320
its uh

138
00:04:36,160 --> 00:04:40,560
lifetime but then some others say no i

139
00:04:38,320 --> 00:04:44,400
want this their sector to be like that

140
00:04:40,560 --> 00:04:47,600
i'm putting these two things together in

141
00:04:44,400 --> 00:04:51,840
kotlin with the reader

142
00:04:47,600 --> 00:04:53,280
who is the father of post-modernism

143
00:04:51,840 --> 00:04:55,758
and then he was all the time talking

144
00:04:53,280 --> 00:04:59,758
about the structuring and

145
00:04:55,759 --> 00:05:00,800
okay that's it this is several things

146
00:04:59,759 --> 00:05:04,639
here

147
00:05:00,800 --> 00:05:06,960
first one is alonda

148
00:05:04,639 --> 00:05:08,160
londo is right here lambdas are all over

149
00:05:06,960 --> 00:05:10,080
the place

150
00:05:08,160 --> 00:05:11,360
there's almost no single language that

151
00:05:10,080 --> 00:05:13,440
doesn't have land

152
00:05:11,360 --> 00:05:14,639
i'm pretty sure that fortran in the next

153
00:05:13,440 --> 00:05:18,160
iteration will have lambdas

154
00:05:14,639 --> 00:05:21,680
anyway using that here right and then

155
00:05:18,160 --> 00:05:23,680
you also cutting is very nice because

156
00:05:21,680 --> 00:05:25,199
it allows the structure in a pretty

157
00:05:23,680 --> 00:05:26,000
simple way you just create a data

158
00:05:25,199 --> 00:05:28,160
structure

159
00:05:26,000 --> 00:05:30,160
in any way like a struct or whatever and

160
00:05:28,160 --> 00:05:33,280
you can assign it to something else

161
00:05:30,160 --> 00:05:34,800
with you don't even need to to uh to

162
00:05:33,280 --> 00:05:35,440
specify what you are going to assign to

163
00:05:34,800 --> 00:05:36,720
the first thing

164
00:05:35,440 --> 00:05:38,639
but you are going to assign to

165
00:05:36,720 --> 00:05:40,320
sequencing you see that in this case i

166
00:05:38,639 --> 00:05:42,000
return a result which is a data

167
00:05:40,320 --> 00:05:44,800
structure that i define right here

168
00:05:42,000 --> 00:05:45,600
and then result says 42 and truly in

169
00:05:44,800 --> 00:05:47,600
this case

170
00:05:45,600 --> 00:05:49,520
says something else i'm file so it's a

171
00:05:47,600 --> 00:05:50,160
data structure this data structure right

172
00:05:49,520 --> 00:05:53,198
here

173
00:05:50,160 --> 00:05:55,759
with two things here i'm assigning

174
00:05:53,199 --> 00:05:56,560
the result of that which is a data

175
00:05:55,759 --> 00:05:58,319
structure

176
00:05:56,560 --> 00:05:59,600
to do two different variables i'm

177
00:05:58,319 --> 00:06:01,600
destructing

178
00:05:59,600 --> 00:06:02,800
that data structure directly which is

179
00:06:01,600 --> 00:06:04,639
easy which is nice

180
00:06:02,800 --> 00:06:06,400
i don't have to create an intermediate

181
00:06:04,639 --> 00:06:07,039
structure i don't have to deal with with

182
00:06:06,400 --> 00:06:09,198
issues of

183
00:06:07,039 --> 00:06:10,400
of memory allocation and things like

184
00:06:09,199 --> 00:06:12,000
that pretty fast

185
00:06:10,400 --> 00:06:14,400
pretty straight forward type save

186
00:06:12,000 --> 00:06:16,400
everything very nice right

187
00:06:14,400 --> 00:06:19,840
then you have things like pattern

188
00:06:16,400 --> 00:06:21,919
matching for complex decision making so

189
00:06:19,840 --> 00:06:23,039
the kind of thing it avoids is if

190
00:06:21,919 --> 00:06:25,599
cascades

191
00:06:23,039 --> 00:06:27,199
so you don't have like if this happens

192
00:06:25,600 --> 00:06:30,000
then do that

193
00:06:27,199 --> 00:06:30,800
if else if this other thing happens then

194
00:06:30,000 --> 00:06:33,360
another thing

195
00:06:30,800 --> 00:06:34,000
then another thing and else you know if

196
00:06:33,360 --> 00:06:35,440
caskets

197
00:06:34,000 --> 00:06:37,759
by the way this is a very nice cascade

198
00:06:35,440 --> 00:06:40,080
in iceland all the pictures are mine

199
00:06:37,759 --> 00:06:41,520
uh and they are all creative commons so

200
00:06:40,080 --> 00:06:42,000
you can download and you can do whatever

201
00:06:41,520 --> 00:06:44,080
you want

202
00:06:42,000 --> 00:06:45,919
it's the creative commons you see by sa

203
00:06:44,080 --> 00:06:49,039
anyway so

204
00:06:45,919 --> 00:06:51,120
we are going to try them in scala escala

205
00:06:49,039 --> 00:06:53,759
is

206
00:06:51,120 --> 00:06:54,800
i'm not going to say a pretty nice

207
00:06:53,759 --> 00:06:57,360
language i'm going to say it's an

208
00:06:54,800 --> 00:06:59,919
academic language

209
00:06:57,360 --> 00:07:02,160
it means that it does some things very

210
00:06:59,919 --> 00:07:03,758
well some other things not so well

211
00:07:02,160 --> 00:07:05,360
that's what means that as any other

212
00:07:03,759 --> 00:07:06,080
language it was an obscurity for a long

213
00:07:05,360 --> 00:07:07,599
time

214
00:07:06,080 --> 00:07:09,840
and then all of a sudden data science

215
00:07:07,599 --> 00:07:11,599
happened and then everybody said oh

216
00:07:09,840 --> 00:07:13,359
data science you're going to learn scala

217
00:07:11,599 --> 00:07:15,280
but anyways it's a language that

218
00:07:13,360 --> 00:07:16,720
you can do very nice things with spark

219
00:07:15,280 --> 00:07:17,919
and everything but

220
00:07:16,720 --> 00:07:19,599
it's also object oriented it's

221
00:07:17,919 --> 00:07:21,039
functional and it's got very nice

222
00:07:19,599 --> 00:07:23,759
features anyway

223
00:07:21,039 --> 00:07:24,719
i was looking at this pattern matching

224
00:07:23,759 --> 00:07:28,080
which

225
00:07:24,720 --> 00:07:30,319
we use this thing called

226
00:07:28,080 --> 00:07:31,919
match it's it's a key word in scala

227
00:07:30,319 --> 00:07:34,639
which is match and then you

228
00:07:31,919 --> 00:07:35,599
check card and you can check it against

229
00:07:34,639 --> 00:07:38,479
ace

230
00:07:35,599 --> 00:07:39,280
three j q you can do more complicated

231
00:07:38,479 --> 00:07:41,599
things here

232
00:07:39,280 --> 00:07:43,280
like you can put some regular expression

233
00:07:41,599 --> 00:07:45,120
uh you can compare it with a type

234
00:07:43,280 --> 00:07:46,960
you can do some other complicated things

235
00:07:45,120 --> 00:07:50,240
and you also have a default type

236
00:07:46,960 --> 00:07:52,318
a default case which is this one i mean

237
00:07:50,240 --> 00:07:55,440
which which you're you're going to use

238
00:07:52,319 --> 00:07:56,080
in this case it's like a cascade of

239
00:07:55,440 --> 00:07:59,039
fifth

240
00:07:56,080 --> 00:08:00,159
only it's nicer because you see very

241
00:07:59,039 --> 00:08:01,759
clearly the intent

242
00:08:00,160 --> 00:08:03,919
of the code that you're seeing there

243
00:08:01,759 --> 00:08:05,520
eventually you use it you know using

244
00:08:03,919 --> 00:08:07,120
you call it in points and it goes to

245
00:08:05,520 --> 00:08:10,240
here and it prints whatever

246
00:08:07,120 --> 00:08:12,160
right multiple dispatch

247
00:08:10,240 --> 00:08:13,680
the great thing about multiple dispatch

248
00:08:12,160 --> 00:08:16,720
is that

249
00:08:13,680 --> 00:08:17,840
depending on the signature of a method

250
00:08:16,720 --> 00:08:19,759
or function you're going to call

251
00:08:17,840 --> 00:08:23,039
different code so

252
00:08:19,759 --> 00:08:24,639
again you avoid if again you say

253
00:08:23,039 --> 00:08:26,878
you state very clearly what's the intent

254
00:08:24,639 --> 00:08:28,479
of your code and then your git compiler

255
00:08:26,879 --> 00:08:30,160
or anything that's a lower level

256
00:08:28,479 --> 00:08:31,919
can see very clearly what's going on and

257
00:08:30,160 --> 00:08:33,039
then it can kind of optimize what's

258
00:08:31,919 --> 00:08:34,319
what's going to happen

259
00:08:33,039 --> 00:08:36,399
of course if it's functional it's going

260
00:08:34,320 --> 00:08:39,200
to be even better because you can cache

261
00:08:36,399 --> 00:08:41,200
you can do memoize any kind of thing

262
00:08:39,200 --> 00:08:43,760
we're going to do it with julia

263
00:08:41,200 --> 00:08:45,920
julia is also a language that was

264
00:08:43,760 --> 00:08:47,439
created for science

265
00:08:45,920 --> 00:08:48,959
which means that it doesn't have this

266
00:08:47,440 --> 00:08:50,800
like you know web or

267
00:08:48,959 --> 00:08:52,880
database things like that the science

268
00:08:50,800 --> 00:08:53,920
you know we do science nothing else

269
00:08:52,880 --> 00:08:55,439
of course there is something like that

270
00:08:53,920 --> 00:08:56,000
because it's a general purpose language

271
00:08:55,440 --> 00:08:59,040
it was

272
00:08:56,000 --> 00:09:01,519
very recently turned into into

273
00:08:59,040 --> 00:09:02,240
version 1.0 which broke everything of

274
00:09:01,519 --> 00:09:04,720
course

275
00:09:02,240 --> 00:09:07,040
but anyways it's a language it's got

276
00:09:04,720 --> 00:09:08,959
very extensive support of macros

277
00:09:07,040 --> 00:09:10,160
and it's i mean there are many cool

278
00:09:08,959 --> 00:09:13,040
things about julia

279
00:09:10,160 --> 00:09:15,040
but in this case we are we are using

280
00:09:13,040 --> 00:09:17,439
this multiple dispatch with these

281
00:09:15,040 --> 00:09:19,120
two functions two different functions we

282
00:09:17,440 --> 00:09:22,399
are going to use the spanish way of

283
00:09:19,120 --> 00:09:24,640
expressing cards like bastos espadas uh

284
00:09:22,399 --> 00:09:25,920
anyone knows this it's no it's it's

285
00:09:24,640 --> 00:09:29,040
actually not spanish it's from

286
00:09:25,920 --> 00:09:32,399
nepalese but anyway so we use

287
00:09:29,040 --> 00:09:34,800
two different denims this this

288
00:09:32,399 --> 00:09:37,839
ampersand over here is a macro so the

289
00:09:34,800 --> 00:09:39,680
way julia defines macros is by

290
00:09:37,839 --> 00:09:41,040
using an ampersand and the way the way

291
00:09:39,680 --> 00:09:43,920
julia defines an enum

292
00:09:41,040 --> 00:09:44,640
is by using a macro which is kind of

293
00:09:43,920 --> 00:09:48,079
nice

294
00:09:44,640 --> 00:09:50,800
anyway it's kind of a type so if

295
00:09:48,080 --> 00:09:52,560
i am calling two string with something

296
00:09:50,800 --> 00:09:56,240
that is

297
00:09:52,560 --> 00:09:59,359
a symbol of the american or

298
00:09:56,240 --> 00:10:02,000
french kind of uh

299
00:09:59,360 --> 00:10:03,040
card deck it's gonna call the first one

300
00:10:02,000 --> 00:10:06,720
and then it's gonna call

301
00:10:03,040 --> 00:10:09,360
the other one this is also

302
00:10:06,720 --> 00:10:10,079
a lambda so we are defined to string as

303
00:10:09,360 --> 00:10:12,399
a lambda

304
00:10:10,079 --> 00:10:13,519
because we are not putting you know the

305
00:10:12,399 --> 00:10:15,680
the key of

306
00:10:13,519 --> 00:10:17,200
whatever we are saying no no this thing

307
00:10:15,680 --> 00:10:18,399
is going to be to do that and also we're

308
00:10:17,200 --> 00:10:20,959
using unicode

309
00:10:18,399 --> 00:10:22,160
we can use inum we can use directly

310
00:10:20,959 --> 00:10:26,959
unicode symbols

311
00:10:22,160 --> 00:10:30,839
here as unicode that's cool right

312
00:10:26,959 --> 00:10:33,839
slots will inherit the earth

313
00:10:30,839 --> 00:10:33,839
actually

314
00:10:36,320 --> 00:10:41,680
i'm too lazy so i was looking up for a

315
00:10:38,800 --> 00:10:44,319
for a picture of a slot i didn't find it

316
00:10:41,680 --> 00:10:45,760
i found this picture of of penguins and

317
00:10:44,320 --> 00:10:49,120
penguins are

318
00:10:45,760 --> 00:10:51,279
they have fresh penguins so anyway

319
00:10:49,120 --> 00:10:52,880
laser evaluation is very powerful it

320
00:10:51,279 --> 00:10:54,640
allows you to find to work with

321
00:10:52,880 --> 00:10:56,320
infinite data structures you can have

322
00:10:54,640 --> 00:10:58,399
anything in it

323
00:10:56,320 --> 00:10:59,680
only when you're actually needing

324
00:10:58,399 --> 00:11:00,079
something when you're actually printing

325
00:10:59,680 --> 00:11:03,439
something

326
00:11:00,079 --> 00:11:05,279
it comes to life but working with lazy

327
00:11:03,440 --> 00:11:06,720
is also functional because you can work

328
00:11:05,279 --> 00:11:08,079
with mathematical data structure

329
00:11:06,720 --> 00:11:11,360
infinite sequences

330
00:11:08,079 --> 00:11:14,000
uh infinite maps whatever and also

331
00:11:11,360 --> 00:11:15,839
there is this thing called cascading

332
00:11:14,000 --> 00:11:17,200
cascading is something that allows you

333
00:11:15,839 --> 00:11:19,600
to

334
00:11:17,200 --> 00:11:22,160
kind of put the result into a

335
00:11:19,600 --> 00:11:23,360
computation into another

336
00:11:22,160 --> 00:11:26,399
computation and then into another

337
00:11:23,360 --> 00:11:27,680
computation without the need to use

338
00:11:26,399 --> 00:11:29,920
intermediate variable or anything you

339
00:11:27,680 --> 00:11:31,040
just say okay i want the result of this

340
00:11:29,920 --> 00:11:32,240
to be processed by this

341
00:11:31,040 --> 00:11:34,240
the result of this is going to be

342
00:11:32,240 --> 00:11:34,959
processed by this other thing and so

343
00:11:34,240 --> 00:11:38,000
forth let's

344
00:11:34,959 --> 00:11:39,518
look at it in f-sharp

345
00:11:38,000 --> 00:11:41,600
f-sharp was a language that was created

346
00:11:39,519 --> 00:11:42,000
by microsoft which is why nobody pay

347
00:11:41,600 --> 00:11:44,320
attention

348
00:11:42,000 --> 00:11:45,680
to it for a long time but then it's a

349
00:11:44,320 --> 00:11:46,959
good language it's a it's a purely

350
00:11:45,680 --> 00:11:48,079
functional language it's a language

351
00:11:46,959 --> 00:11:52,160
that's working on the

352
00:11:48,079 --> 00:11:54,560
on the on the net virtual machine

353
00:11:52,160 --> 00:11:57,120
yes please you use it five minutes okay

354
00:11:54,560 --> 00:12:00,239
yeah amazon thank you very much

355
00:11:57,120 --> 00:12:02,079
uh we are going to uh uh compute

356
00:12:00,240 --> 00:12:04,160
something which is called the horizon

357
00:12:02,079 --> 00:12:05,519
sequence horizontal sequence is kind of

358
00:12:04,160 --> 00:12:07,360
a generalized

359
00:12:05,519 --> 00:12:08,720
fibonacci sequence everyone is using

360
00:12:07,360 --> 00:12:10,560
fibonacci sequence so i'm going to do

361
00:12:08,720 --> 00:12:13,680
something different

362
00:12:10,560 --> 00:12:15,279
but you see what what we are doing is

363
00:12:13,680 --> 00:12:17,120
this is the first element of the

364
00:12:15,279 --> 00:12:18,399
sequence so this is the first thing that

365
00:12:17,120 --> 00:12:21,519
that's going to go into the

366
00:12:18,399 --> 00:12:24,720
into the pipeline then we pipe it

367
00:12:21,519 --> 00:12:25,360
into this thing so what we are telling

368
00:12:24,720 --> 00:12:27,279
it is

369
00:12:25,360 --> 00:12:29,760
you are going to pick this up and you

370
00:12:27,279 --> 00:12:32,880
are going to create an infinite sequence

371
00:12:29,760 --> 00:12:34,319
all of that and then eventually what you

372
00:12:32,880 --> 00:12:34,800
are going to do is you are going to

373
00:12:34,320 --> 00:12:37,120
append

374
00:12:34,800 --> 00:12:38,240
it to the first two elements so i'm

375
00:12:37,120 --> 00:12:40,320
going to put that

376
00:12:38,240 --> 00:12:41,680
in the beginning right and then this is

377
00:12:40,320 --> 00:12:43,279
totally lazy so

378
00:12:41,680 --> 00:12:45,680
i'm telling it i want this this infinite

379
00:12:43,279 --> 00:12:47,120
sequence and i'm going to have a

380
00:12:45,680 --> 00:12:49,439
lazy data structure that's going to hold

381
00:12:47,120 --> 00:12:51,360
that and then i'm going to compute it

382
00:12:49,440 --> 00:12:54,480
and i'm also going to use

383
00:12:51,360 --> 00:12:55,920
this pipe to just take the first 15 so

384
00:12:54,480 --> 00:12:56,560
that eventually when i compute the first

385
00:12:55,920 --> 00:12:59,040
15

386
00:12:56,560 --> 00:13:00,560
they come to life right that's cool and

387
00:12:59,040 --> 00:13:02,719
that's actually very fast

388
00:13:00,560 --> 00:13:03,920
i got all of them in my my computer

389
00:13:02,720 --> 00:13:07,279
actually

390
00:13:03,920 --> 00:13:11,279
finally inheriting is much better than

391
00:13:07,279 --> 00:13:13,839
composing i can't reduce it anymore so

392
00:13:11,279 --> 00:13:15,920
you can use trades mixing and rows the

393
00:13:13,839 --> 00:13:17,200
90s were a little bit all about

394
00:13:15,920 --> 00:13:18,959
objectivity programming but then

395
00:13:17,200 --> 00:13:21,360
something more complicated came

396
00:13:18,959 --> 00:13:22,800
people were talking about meta meta

397
00:13:21,360 --> 00:13:23,519
object protocol so that you can create

398
00:13:22,800 --> 00:13:25,760
all kinds of things

399
00:13:23,519 --> 00:13:26,639
anyway my point is that you can create a

400
00:13:25,760 --> 00:13:28,560
new kind of

401
00:13:26,639 --> 00:13:30,480
objects or classes by composing other

402
00:13:28,560 --> 00:13:32,638
objects like for instance using it

403
00:13:30,480 --> 00:13:34,959
in rust glass is a very nice language

404
00:13:32,639 --> 00:13:36,560
it's supposed to be safe because

405
00:13:34,959 --> 00:13:38,560
people were tired of fusing sea and

406
00:13:36,560 --> 00:13:38,959
getting shot in the feet and so they say

407
00:13:38,560 --> 00:13:40,239
okay

408
00:13:38,959 --> 00:13:42,399
we are going to do something totally

409
00:13:40,240 --> 00:13:45,120
different and and then they

410
00:13:42,399 --> 00:13:45,920
talk about rust rust has a very very

411
00:13:45,120 --> 00:13:48,240
interesting

412
00:13:45,920 --> 00:13:49,760
concept of data properties so that some

413
00:13:48,240 --> 00:13:51,760
only some things can work

414
00:13:49,760 --> 00:13:52,959
with some of the other things but here

415
00:13:51,760 --> 00:13:54,800
what you define is extract

416
00:13:52,959 --> 00:13:56,880
which is just a struct it's a data

417
00:13:54,800 --> 00:13:58,560
structure and then you define a trade

418
00:13:56,880 --> 00:14:00,240
and then here what you say okay so what

419
00:13:58,560 --> 00:14:01,439
i am going to do is i'm going to apply

420
00:14:00,240 --> 00:14:04,320
this

421
00:14:01,440 --> 00:14:04,959
code for this trade for this data

422
00:14:04,320 --> 00:14:06,959
structure

423
00:14:04,959 --> 00:14:08,079
so you kind of bind it together and

424
00:14:06,959 --> 00:14:11,359
that's you know

425
00:14:08,079 --> 00:14:11,359
using threads in rust

426
00:14:12,160 --> 00:14:14,880
what's the point with track we didn't

427
00:14:13,440 --> 00:14:16,240
talk about drago so far was just a

428
00:14:14,880 --> 00:14:18,800
little bit

429
00:14:16,240 --> 00:14:19,920
the point with raku is that it's got

430
00:14:18,800 --> 00:14:22,560
everything

431
00:14:19,920 --> 00:14:25,439
and the kitchen sink this is actually my

432
00:14:22,560 --> 00:14:27,199
kitchen sink at home

433
00:14:25,440 --> 00:14:29,199
right it's it's a little bit dirty

434
00:14:27,199 --> 00:14:32,399
there's some chopsticks here

435
00:14:29,199 --> 00:14:35,519
the rest of the anyway took me a while

436
00:14:32,399 --> 00:14:38,240
to in most cases i hadn't seen those

437
00:14:35,519 --> 00:14:40,079
those languages ever i had never written

438
00:14:38,240 --> 00:14:42,639
a line of coding in grass or

439
00:14:40,079 --> 00:14:43,279
or of course in f sharp or javascript a

440
00:14:42,639 --> 00:14:46,399
little bit

441
00:14:43,279 --> 00:14:48,320
python also took me a while uh

442
00:14:46,399 --> 00:14:51,440
but not too much the most difficult part

443
00:14:48,320 --> 00:14:53,600
was actually uh cutting

444
00:14:51,440 --> 00:14:55,760
because syntax is tricky because you

445
00:14:53,600 --> 00:14:57,920
have to know how to do some specific

446
00:14:55,760 --> 00:14:58,560
thing like concatenating two strings or

447
00:14:57,920 --> 00:15:00,880
or

448
00:14:58,560 --> 00:15:02,079
getting an element of an array and

449
00:15:00,880 --> 00:15:04,240
that's a new max mode for

450
00:15:02,079 --> 00:15:06,399
everyone so it took a while you had to

451
00:15:04,240 --> 00:15:08,399
look up the writimax mode

452
00:15:06,399 --> 00:15:10,399
but i understood the concepts the

453
00:15:08,399 --> 00:15:12,959
concepts were there

454
00:15:10,399 --> 00:15:15,199
because i called him raccoon so every

455
00:15:12,959 --> 00:15:18,560
one of those things is in raku

456
00:15:15,199 --> 00:15:21,680
and many more this is me

457
00:15:18,560 --> 00:15:24,719
mariello i'm part of the kind of the

458
00:15:21,680 --> 00:15:27,680
core of raccoon development i i work

459
00:15:24,720 --> 00:15:28,320
more or less with the documentation and

460
00:15:27,680 --> 00:15:32,719
that's my

461
00:15:28,320 --> 00:15:32,720
my github by the way and this is

462
00:15:35,440 --> 00:15:39,519
this is going to suck anyway so i'm not

463
00:15:37,600 --> 00:15:40,000
going to even try it's on the web you

464
00:15:39,519 --> 00:15:43,199
can check

465
00:15:40,000 --> 00:15:44,079
it out but this is a raku program which

466
00:15:43,199 --> 00:15:47,040
has

467
00:15:44,079 --> 00:15:48,959
around 20 lines of code which implements

468
00:15:47,040 --> 00:15:49,680
every single concept i have talked about

469
00:15:48,959 --> 00:15:51,839
here

470
00:15:49,680 --> 00:15:52,880
every single one of them plus one that

471
00:15:51,839 --> 00:15:55,680
is

472
00:15:52,880 --> 00:15:58,800
incredibly cool i will see if i i can

473
00:15:55,680 --> 00:15:58,800
show it here you see it here

474
00:16:01,040 --> 00:16:03,839
you know what's that

475
00:16:04,160 --> 00:16:12,079
it's arab number rock was able to do

476
00:16:08,320 --> 00:16:13,519
arithmetic with arab literals

477
00:16:12,079 --> 00:16:14,880
as far as i know there is no language

478
00:16:13,519 --> 00:16:15,440
that's able to do that this is actually

479
00:16:14,880 --> 00:16:17,839
a range

480
00:16:15,440 --> 00:16:19,120
so it's rare that this goes from one to

481
00:16:17,839 --> 00:16:21,040
one thousand

482
00:16:19,120 --> 00:16:23,199
right so this is one and it's also

483
00:16:21,040 --> 00:16:26,319
written in the right direction

484
00:16:23,199 --> 00:16:26,560
because unicode is important so if you

485
00:16:26,320 --> 00:16:28,079
are

486
00:16:26,560 --> 00:16:30,160
written in arab you have to do it in the

487
00:16:28,079 --> 00:16:32,079
right direction you type it in the

488
00:16:30,160 --> 00:16:35,600
direction it shows up in that direction

489
00:16:32,079 --> 00:16:38,079
so it's incredible i mean you

490
00:16:35,600 --> 00:16:39,360
this is not part of the highlight i'm

491
00:16:38,079 --> 00:16:42,319
using this

492
00:16:39,360 --> 00:16:45,279
slanted eye which is a unicorn thing

493
00:16:42,320 --> 00:16:47,360
anyway it's there you can check it out

494
00:16:45,279 --> 00:16:49,519
so learn raku to learn every single

495
00:16:47,360 --> 00:16:52,079
language

496
00:16:49,519 --> 00:17:05,839
i'll list the cool ones that's it thank

497
00:16:52,079 --> 00:17:05,839
you very much

498
00:17:16,839 --> 00:17:20,240
uh in a team what's uh sorry let's say

499
00:17:18,880 --> 00:17:22,959
an international team and

500
00:17:20,240 --> 00:17:24,959
other people who can't type our keys and

501
00:17:22,959 --> 00:17:27,360
they have to maintain your code

502
00:17:24,959 --> 00:17:28,319
i mean it's no big deal i repeat the

503
00:17:27,359 --> 00:17:31,039
questions

504
00:17:28,319 --> 00:17:32,080
he's asking how people is able to

505
00:17:31,039 --> 00:17:34,080
maintain a team

506
00:17:32,080 --> 00:17:37,039
where people type in different different

507
00:17:34,080 --> 00:17:37,039
ways is that correct

508
00:17:39,039 --> 00:17:43,200
that's a good thing you use vmax

509
00:17:43,840 --> 00:17:48,639
control x 8 tab and then you get all the

510
00:17:47,440 --> 00:17:50,160
unicode

511
00:17:48,640 --> 00:17:51,840
things and then you save one this one

512
00:17:50,160 --> 00:17:54,160
that's it or you

513
00:17:51,840 --> 00:17:56,720
look it up in the in the web and then

514
00:17:54,160 --> 00:17:56,720
copy and paste

515
00:17:56,799 --> 00:18:02,240
okay thank you yes please yesterday

516
00:18:00,000 --> 00:18:03,120
i heard at the move that there's a way

517
00:18:02,240 --> 00:18:05,600
to

518
00:18:03,120 --> 00:18:07,600
interact with libraries from other

519
00:18:05,600 --> 00:18:09,199
languages like titan that's correct

520
00:18:07,600 --> 00:18:11,360
could you a little bit elaborate on that

521
00:18:09,200 --> 00:18:12,480
how it's done yeah the thing is that uh

522
00:18:11,360 --> 00:18:12,959
rebecca has got something which is

523
00:18:12,480 --> 00:18:15,520
called

524
00:18:12,960 --> 00:18:16,400
native call right so native code

525
00:18:15,520 --> 00:18:19,440
basically

526
00:18:16,400 --> 00:18:20,880
it allows you to to embed things

527
00:18:19,440 --> 00:18:22,720
which are written in any other languages

528
00:18:20,880 --> 00:18:24,080
in shared libraries so you just say also

529
00:18:22,720 --> 00:18:26,240
i want this function

530
00:18:24,080 --> 00:18:27,520
which is taken from that particular

531
00:18:26,240 --> 00:18:29,039
shared library

532
00:18:27,520 --> 00:18:30,240
and you can do that with python you can

533
00:18:29,039 --> 00:18:31,760
buy the interpreter of python there is

534
00:18:30,240 --> 00:18:33,760
something called in live python

535
00:18:31,760 --> 00:18:34,879
that is also in line pair so you can use

536
00:18:33,760 --> 00:18:36,480
interpreter

537
00:18:34,880 --> 00:18:38,880
and you can basically do anything many

538
00:18:36,480 --> 00:18:41,600
libraries are just basically

539
00:18:38,880 --> 00:18:43,200
i want this this c library or even

540
00:18:41,600 --> 00:18:44,879
anything that can be compiled from from

541
00:18:43,200 --> 00:18:47,280
go or russ or whatever

542
00:18:44,880 --> 00:18:48,320
to a to azure library i want this inside

543
00:18:47,280 --> 00:18:51,360
inside raccoon

544
00:18:48,320 --> 00:18:54,240
so i load it and then what i do is

545
00:18:51,360 --> 00:18:55,280
i want this function in c to be called

546
00:18:54,240 --> 00:18:57,679
that other way

547
00:18:55,280 --> 00:18:59,120
and this data check structure which is

548
00:18:57,679 --> 00:19:00,240
in the original language to be called in

549
00:18:59,120 --> 00:19:01,840
this other way it's called native

550
00:19:00,240 --> 00:19:11,840
calling it it's amazing works

551
00:19:01,840 --> 00:19:11,840
pretty well thank you very much

