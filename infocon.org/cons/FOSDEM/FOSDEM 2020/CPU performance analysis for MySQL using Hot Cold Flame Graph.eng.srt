1
00:00:05,200 --> 00:00:07,920
hi

2
00:00:05,520 --> 00:00:07,920
everyone

3
00:00:08,559 --> 00:00:15,678
i hope you can hear me in the end

4
00:00:12,240 --> 00:00:16,320
welcome i promise that i'm not going to

5
00:00:15,679 --> 00:00:19,439
make you

6
00:00:16,320 --> 00:00:22,640
suffer too much on this talk

7
00:00:19,439 --> 00:00:26,560
i just want to present you the idea of

8
00:00:22,640 --> 00:00:26,560
analyzing cpus

9
00:00:28,840 --> 00:00:31,840
and

10
00:00:36,480 --> 00:00:40,718
so just a little bit about bricklawn i

11
00:00:38,719 --> 00:00:44,399
probably already heard these all day

12
00:00:40,719 --> 00:00:45,600
i'm not going to stick about it a little

13
00:00:44,399 --> 00:00:47,840
bit about me

14
00:00:45,600 --> 00:00:49,680
i'm not going to keep bragging about

15
00:00:47,840 --> 00:00:53,039
myself here as well

16
00:00:49,680 --> 00:00:56,079
i'm a support engineer from percola

17
00:00:53,039 --> 00:00:59,199
and a few days ago

18
00:00:56,079 --> 00:01:02,879
it came an interesting case for

19
00:00:59,199 --> 00:01:06,080
support commonwealth most of you that

20
00:01:02,879 --> 00:01:09,280
deals with software already got it

21
00:01:06,080 --> 00:01:13,119
it's your cpu is burning something

22
00:01:09,280 --> 00:01:16,000
is completely taking over and

23
00:01:13,119 --> 00:01:18,159
in case of a database you you can't do q

24
00:01:16,000 --> 00:01:19,920
minus nine of course you want to keep

25
00:01:18,159 --> 00:01:22,799
your services running

26
00:01:19,920 --> 00:01:24,159
so the idea of this talk is to present

27
00:01:22,799 --> 00:01:27,439
how

28
00:01:24,159 --> 00:01:30,079
we support investigated this problem

29
00:01:27,439 --> 00:01:31,119
uh how we attack it and identify the

30
00:01:30,079 --> 00:01:34,320
issue

31
00:01:31,119 --> 00:01:36,000
using flame graphs also in the end i'm

32
00:01:34,320 --> 00:01:39,039
going to talk a little bit

33
00:01:36,000 --> 00:01:41,360
about code graphs which is another

34
00:01:39,040 --> 00:01:44,720
approach and i explain details

35
00:01:41,360 --> 00:01:49,119
a little bit so first

36
00:01:44,720 --> 00:01:52,799
uh this slide is uh

37
00:01:49,119 --> 00:01:56,640
uh homing age for brandon brandon greg

38
00:01:52,799 --> 00:01:59,680
not sure if all of you heard about it

39
00:01:56,640 --> 00:02:04,719
about him he was the

40
00:01:59,680 --> 00:02:08,000
guru the the mentor of flame graphs

41
00:02:04,719 --> 00:02:11,280
me i'm just a padawan here

42
00:02:08,000 --> 00:02:14,160
i'm just summarizing the things uh but

43
00:02:11,280 --> 00:02:17,200
his content it's much more broad than

44
00:02:14,160 --> 00:02:20,400
what i'm going to show here

45
00:02:17,200 --> 00:02:23,440
so what are flame graphs uh

46
00:02:20,400 --> 00:02:24,400
the best way to define flame graphs is

47
00:02:23,440 --> 00:02:27,040
using

48
00:02:24,400 --> 00:02:28,879
the words of the creator so basically

49
00:02:27,040 --> 00:02:32,959
flame graphs are a way

50
00:02:28,879 --> 00:02:36,560
to visualize uh

51
00:02:32,959 --> 00:02:40,239
to visualize the profiled software and

52
00:02:36,560 --> 00:02:43,360
in this way we can quickly identify

53
00:02:40,239 --> 00:02:44,879
what are the threads uh running what

54
00:02:43,360 --> 00:02:49,120
code paths are running

55
00:02:44,879 --> 00:02:52,319
on the cpu so saying that

56
00:02:49,120 --> 00:02:55,360
let's be a little bit more specific and

57
00:02:52,319 --> 00:02:59,679
what is a code path most of you

58
00:02:55,360 --> 00:03:02,720
are aware of uh this is a really simple

59
00:02:59,680 --> 00:03:06,480
code most of you saw it all

60
00:03:02,720 --> 00:03:09,599
universities are doing your work uh

61
00:03:06,480 --> 00:03:11,760
main function some functions that are

62
00:03:09,599 --> 00:03:15,040
called during the process

63
00:03:11,760 --> 00:03:19,440
and this will lead us

64
00:03:15,040 --> 00:03:22,159
to call chains so what are call chains

65
00:03:19,440 --> 00:03:23,840
couchings are possible ways that the

66
00:03:22,159 --> 00:03:27,519
functions can work

67
00:03:23,840 --> 00:03:30,640
based on the behavior of the user or the

68
00:03:27,519 --> 00:03:33,200
the behavior of the database so in this

69
00:03:30,640 --> 00:03:36,879
example that i showed before

70
00:03:33,200 --> 00:03:39,599
which is like possible a library

71
00:03:36,879 --> 00:03:40,560
software what do we are doing getting

72
00:03:39,599 --> 00:03:43,359
book lists

73
00:03:40,560 --> 00:03:44,400
getting the book and the alter or the

74
00:03:43,360 --> 00:03:48,080
editorial

75
00:03:44,400 --> 00:03:51,840
or getting a print whatever these are

76
00:03:48,080 --> 00:03:53,599
possible call chains that can happen uh

77
00:03:51,840 --> 00:03:56,159
of your tree of course that we are

78
00:03:53,599 --> 00:03:59,200
talking when the software is running

79
00:03:56,159 --> 00:04:01,439
fine not when he has a bug and crashes

80
00:03:59,200 --> 00:04:04,238
in the middle

81
00:04:01,439 --> 00:04:05,920
saying that we have the possible how

82
00:04:04,239 --> 00:04:09,439
chains

83
00:04:05,920 --> 00:04:13,599
what do we do so we

84
00:04:09,439 --> 00:04:16,639
profile it so what is profiling

85
00:04:13,599 --> 00:04:20,719
profiling is a way of capturing

86
00:04:16,639 --> 00:04:24,000
metrics for a constant period of time

87
00:04:20,720 --> 00:04:27,680
and then we can aggregate and combine

88
00:04:24,000 --> 00:04:30,960
and analyze it later so

89
00:04:27,680 --> 00:04:31,600
there are several ways of profiling most

90
00:04:30,960 --> 00:04:35,520
of you

91
00:04:31,600 --> 00:04:39,120
already use it without knowing the name

92
00:04:35,520 --> 00:04:41,599
um raise your hand who never

93
00:04:39,120 --> 00:04:44,240
got the issue from the developer like

94
00:04:41,600 --> 00:04:47,280
look my credit is is is low

95
00:04:44,240 --> 00:04:49,680
what do you do you enable this low log

96
00:04:47,280 --> 00:04:50,400
then you set the long time the query

97
00:04:49,680 --> 00:04:52,880
long

98
00:04:50,400 --> 00:04:54,719
long query time that you want and then

99
00:04:52,880 --> 00:04:55,600
the queries are going to be profiled in

100
00:04:54,720 --> 00:04:58,400
this low log

101
00:04:55,600 --> 00:04:59,280
this is profiling as well and later you

102
00:04:58,400 --> 00:05:02,799
use

103
00:04:59,280 --> 00:05:05,679
some tool that you want pt quality jest

104
00:05:02,800 --> 00:05:07,520
grep whatever you aggregate the credits

105
00:05:05,680 --> 00:05:10,400
identify the ones that are

106
00:05:07,520 --> 00:05:11,280
using more rows consuming more time you

107
00:05:10,400 --> 00:05:14,560
use the metric

108
00:05:11,280 --> 00:05:16,080
that you want so this is a profile a sql

109
00:05:14,560 --> 00:05:19,039
profiling

110
00:05:16,080 --> 00:05:19,919
in this case i want to profile stack

111
00:05:19,039 --> 00:05:23,360
traces

112
00:05:19,919 --> 00:05:25,599
and code paths and for it

113
00:05:23,360 --> 00:05:26,639
to analyze the burning phase we are

114
00:05:25,600 --> 00:05:30,800
going to use

115
00:05:26,639 --> 00:05:32,080
birth earth is widely used on linux i

116
00:05:30,800 --> 00:05:34,880
think most

117
00:05:32,080 --> 00:05:35,280
of the installations comes by default

118
00:05:34,880 --> 00:05:38,639
with

119
00:05:35,280 --> 00:05:42,159
perf if not it's a really simple install

120
00:05:38,639 --> 00:05:45,199
i you and you can install it

121
00:05:42,160 --> 00:05:48,800
so with three one two

122
00:05:45,199 --> 00:05:52,479
three simple comments you can create

123
00:05:48,800 --> 00:05:55,520
the svg file and

124
00:05:52,479 --> 00:05:57,919
what perf record do

125
00:05:55,520 --> 00:05:58,880
minus a means that we are going to

126
00:05:57,919 --> 00:06:03,280
profile

127
00:05:58,880 --> 00:06:06,400
all the cpus and minus g

128
00:06:03,280 --> 00:06:07,280
we are going to capture call graphs or

129
00:06:06,400 --> 00:06:11,198
stock free

130
00:06:07,280 --> 00:06:14,479
or stack trace minus f99

131
00:06:11,199 --> 00:06:14,880
means the frequency so we are profiling

132
00:06:14,479 --> 00:06:18,800
this

133
00:06:14,880 --> 00:06:21,280
the cpus at 99 hertz

134
00:06:18,800 --> 00:06:22,800
and minus p this is the little trick so

135
00:06:21,280 --> 00:06:26,159
you don't have to do

136
00:06:22,800 --> 00:06:27,840
ps and get the pid every time if

137
00:06:26,160 --> 00:06:29,360
you're running a single instance of

138
00:06:27,840 --> 00:06:31,679
course uh if you have

139
00:06:29,360 --> 00:06:32,720
multiple ones then this is not going to

140
00:06:31,680 --> 00:06:35,280
work

141
00:06:32,720 --> 00:06:36,000
and we are going to profile this for one

142
00:06:35,280 --> 00:06:37,840
minute

143
00:06:36,000 --> 00:06:39,840
we are going to create data for one

144
00:06:37,840 --> 00:06:42,719
minute

145
00:06:39,840 --> 00:06:44,239
after that we are going to make this

146
00:06:42,720 --> 00:06:47,680
machine readable

147
00:06:44,240 --> 00:06:51,599
create using perfscript and send it

148
00:06:47,680 --> 00:06:55,199
through the output and finally

149
00:06:51,599 --> 00:06:58,560
using the tool provided by

150
00:06:55,199 --> 00:07:00,840
by brandon we are going to create the

151
00:06:58,560 --> 00:07:05,599
flame graphs

152
00:07:00,840 --> 00:07:05,599
now let me show you

153
00:07:05,840 --> 00:07:20,880
the flame graphs itself

154
00:07:17,280 --> 00:07:23,840
so this is a flame graph basically this

155
00:07:20,880 --> 00:07:28,639
is the data that we profiled

156
00:07:23,840 --> 00:07:28,638
using perf and after creating

157
00:07:28,840 --> 00:07:34,239
the uh

158
00:07:31,360 --> 00:07:35,599
creating the svg so this is inter

159
00:07:34,240 --> 00:07:38,400
interactive

160
00:07:35,599 --> 00:07:39,520
so you can zoom in and zoom out i'm

161
00:07:38,400 --> 00:07:45,840
going to show you

162
00:07:39,520 --> 00:07:45,840
for the analysis uh it's a little bit

163
00:07:47,759 --> 00:07:52,800
so uh how do we identify how do we work

164
00:07:52,160 --> 00:07:56,160
with

165
00:07:52,800 --> 00:08:00,400
with this bunch of colors and data

166
00:07:56,160 --> 00:08:03,280
so you have the y-axis and the x-axis

167
00:08:00,400 --> 00:08:04,719
and when we are analyzing on the

168
00:08:03,280 --> 00:08:06,960
vertical thing

169
00:08:04,720 --> 00:08:06,960
uh

170
00:08:08,319 --> 00:08:12,479
you are going to see several stock trays

171
00:08:11,280 --> 00:08:15,359
uh

172
00:08:12,479 --> 00:08:17,280
the we we have more above but i'm not

173
00:08:15,360 --> 00:08:19,039
going details let's suppose this is the

174
00:08:17,280 --> 00:08:22,080
last one

175
00:08:19,039 --> 00:08:23,599
so the the last one is the one that is

176
00:08:22,080 --> 00:08:26,719
current on the cpu

177
00:08:23,599 --> 00:08:29,520
and the other ones are its ancestors

178
00:08:26,720 --> 00:08:30,639
so the bad the best way to read is

179
00:08:29,520 --> 00:08:34,478
bottle up

180
00:08:30,639 --> 00:08:38,560
so because i profiled my sql d

181
00:08:34,479 --> 00:08:39,039
process sorry guys you're in game maybe

182
00:08:38,559 --> 00:08:42,319
may

183
00:08:39,039 --> 00:08:45,519
not see but we can see that 100 percent

184
00:08:42,320 --> 00:08:46,959
of the cpu time was spent on mysql d why

185
00:08:45,519 --> 00:08:50,080
because we were perfect

186
00:08:46,959 --> 00:08:53,599
only my sql d now

187
00:08:50,080 --> 00:08:56,240
when we look on the x axis

188
00:08:53,600 --> 00:08:56,880
the order from left to right it doesn't

189
00:08:56,240 --> 00:09:00,560
matter

190
00:08:56,880 --> 00:09:02,800
like this has no logical order of time

191
00:09:00,560 --> 00:09:05,119
it's only sorted uh you know an

192
00:09:02,800 --> 00:09:09,599
alphabetical order

193
00:09:05,120 --> 00:09:12,640
and why to maximize uh the aggregation

194
00:09:09,600 --> 00:09:16,000
that's it there is no more meaning

195
00:09:12,640 --> 00:09:18,560
from left to right but

196
00:09:16,000 --> 00:09:19,279
when we are talking about the size the

197
00:09:18,560 --> 00:09:22,319
width

198
00:09:19,279 --> 00:09:24,800
of these boxes this is what matters and

199
00:09:22,320 --> 00:09:28,080
this is what we are going to analyze

200
00:09:24,800 --> 00:09:31,519
so as larger uh

201
00:09:28,080 --> 00:09:34,720
becomes the the box more cpu was spent

202
00:09:31,519 --> 00:09:35,839
on this process and here comes the good

203
00:09:34,720 --> 00:09:39,920
thing this was based

204
00:09:35,839 --> 00:09:42,240
on a real case so if we start my c code

205
00:09:39,920 --> 00:09:45,680
is using 100 percent

206
00:09:42,240 --> 00:09:48,959
but when we come to this outer table

207
00:09:45,680 --> 00:09:52,160
we can see that 54

208
00:09:48,959 --> 00:09:55,760
of the sample that we got was spent

209
00:09:52,160 --> 00:09:59,279
on outer table which is interesting

210
00:09:55,760 --> 00:10:01,920
so when we go deep and we zoom in

211
00:09:59,279 --> 00:10:04,000
we can see that now we have only the

212
00:10:01,920 --> 00:10:08,319
stacked race

213
00:10:04,000 --> 00:10:11,440
for it we have the functions

214
00:10:08,320 --> 00:10:14,560
that mysql is calling and

215
00:10:11,440 --> 00:10:18,160
this bars starts to be constant and

216
00:10:14,560 --> 00:10:21,680
we see copying that cropping data

217
00:10:18,160 --> 00:10:26,319
insert inserts on secondary index

218
00:10:21,680 --> 00:10:28,880
and now we see we are spending

219
00:10:26,320 --> 00:10:30,640
we are spending a lot of time checking

220
00:10:28,880 --> 00:10:34,000
forwarding constraints

221
00:10:30,640 --> 00:10:37,199
after that we're seeing freeze on that

222
00:10:34,000 --> 00:10:39,120
on data dictionary and this requires a

223
00:10:37,200 --> 00:10:42,079
little bit of understanding the code

224
00:10:39,120 --> 00:10:43,680
but this function means that we tried to

225
00:10:42,079 --> 00:10:46,880
acquire the lock

226
00:10:43,680 --> 00:10:50,640
here but we couldn't so the process is

227
00:10:46,880 --> 00:10:54,079
spinning so it's waiting

228
00:10:50,640 --> 00:10:55,600
and after investigating uh we collected

229
00:10:54,079 --> 00:10:59,599
some interesting

230
00:10:55,600 --> 00:11:01,279
data data and we identified that

231
00:10:59,600 --> 00:11:02,640
because we are checking forwarding

232
00:11:01,279 --> 00:11:06,399
constraints

233
00:11:02,640 --> 00:11:07,360
and the database of this customer had a

234
00:11:06,399 --> 00:11:11,600
small

235
00:11:07,360 --> 00:11:14,320
open table open cache we saw several

236
00:11:11,600 --> 00:11:15,040
tables being opened and closed so this

237
00:11:14,320 --> 00:11:19,040
involves

238
00:11:15,040 --> 00:11:22,000
has a high cost for mysql our proposal

239
00:11:19,040 --> 00:11:25,120
was increasing table open cash

240
00:11:22,000 --> 00:11:28,720
and with that we could reduce the size

241
00:11:25,120 --> 00:11:31,839
of this and it was smaller than the cpu

242
00:11:28,720 --> 00:11:32,800
not that stop it burning this is like a

243
00:11:31,839 --> 00:11:36,160
common name

244
00:11:32,800 --> 00:11:39,599
but we made the this whole process

245
00:11:36,160 --> 00:11:43,519
more friendly for the cpu and

246
00:11:39,600 --> 00:11:46,560
the database could go on more smoothly

247
00:11:43,519 --> 00:11:57,839
so this is the real importance

248
00:11:46,560 --> 00:11:57,839
that we evaluate for flame graphs

249
00:12:05,920 --> 00:12:14,160
so moving on i'm going to talk a bit

250
00:12:10,959 --> 00:12:17,760
about code graphs uh

251
00:12:14,160 --> 00:12:20,880
so what is code code graphs

252
00:12:17,760 --> 00:12:21,600
basically is what we call of cpu

253
00:12:20,880 --> 00:12:24,560
analysis

254
00:12:21,600 --> 00:12:26,639
so if the previous flame graph was

255
00:12:24,560 --> 00:12:29,518
analyzing

256
00:12:26,639 --> 00:12:30,639
and identifying what was running on the

257
00:12:29,519 --> 00:12:33,600
cpu

258
00:12:30,639 --> 00:12:35,680
code of cpu analysis and code graphs

259
00:12:33,600 --> 00:12:37,680
identifies

260
00:12:35,680 --> 00:12:39,040
what the thread what is making the

261
00:12:37,680 --> 00:12:41,920
thread wait

262
00:12:39,040 --> 00:12:43,040
to be executed so we have the the both

263
00:12:41,920 --> 00:12:46,079
sides

264
00:12:43,040 --> 00:12:49,120
and in the end i'm going to talk

265
00:12:46,079 --> 00:12:52,560
how do we merge them so

266
00:12:49,120 --> 00:12:53,040
op cpu analysis is where we are spending

267
00:12:52,560 --> 00:12:55,839
time

268
00:12:53,040 --> 00:12:56,480
waiting for things as we can see on this

269
00:12:55,839 --> 00:12:58,800
graph

270
00:12:56,480 --> 00:13:00,800
flame graphs are responsible for these

271
00:12:58,800 --> 00:13:05,680
two things

272
00:13:00,800 --> 00:13:08,719
and without cpu analysis we can identify

273
00:13:05,680 --> 00:13:10,239
why your credit is waiting if the credit

274
00:13:08,720 --> 00:13:13,120
is waiting for

275
00:13:10,240 --> 00:13:14,000
uh disk if the credit is waiting for the

276
00:13:13,120 --> 00:13:17,839
credit sorry

277
00:13:14,000 --> 00:13:20,079
the thread is waiting for a disk network

278
00:13:17,839 --> 00:13:21,200
or in case of mysql we know that there

279
00:13:20,079 --> 00:13:25,199
are several locks

280
00:13:21,200 --> 00:13:26,399
uh if the default uh isolation level is

281
00:13:25,200 --> 00:13:29,200
repeatable read

282
00:13:26,399 --> 00:13:30,320
so if you are inserting or updating you

283
00:13:29,200 --> 00:13:34,240
have the famous

284
00:13:30,320 --> 00:13:36,800
ending famous gap lock so these might

285
00:13:34,240 --> 00:13:40,560
make the tread weight and this is all

286
00:13:36,800 --> 00:13:44,079
part of the off cpu analysis

287
00:13:40,560 --> 00:13:47,359
how do we do it this is made

288
00:13:44,079 --> 00:13:52,880
with bcc tools so

289
00:13:47,360 --> 00:13:56,639
uh for candles that are newer than 4.1

290
00:13:52,880 --> 00:13:59,600
you can just install it uh it comes

291
00:13:56,639 --> 00:14:01,680
already with with the operating system i

292
00:13:59,600 --> 00:14:04,079
just pasted for the

293
00:14:01,680 --> 00:14:04,800
my opinion the most true common ones red

294
00:14:04,079 --> 00:14:07,680
hat

295
00:14:04,800 --> 00:14:09,760
santos version just a young install or

296
00:14:07,680 --> 00:14:13,120
ubuntu debian

297
00:14:09,760 --> 00:14:14,880
the appetite get installed bcc tools

298
00:14:13,120 --> 00:14:17,440
and then it's going to install it for

299
00:14:14,880 --> 00:14:19,680
you a way to validate

300
00:14:17,440 --> 00:14:21,680
just check if this directory has the

301
00:14:19,680 --> 00:14:25,199
tools and you are going to see

302
00:14:21,680 --> 00:14:29,040
if you are more curious about hundreds

303
00:14:25,199 --> 00:14:32,719
of scripts you can do profiling with bcc

304
00:14:29,040 --> 00:14:36,160
tools for disk latency network

305
00:14:32,720 --> 00:14:37,600
every sort of things these would like

306
00:14:36,160 --> 00:14:40,959
take a life

307
00:14:37,600 --> 00:14:41,519
to learn there are much better people

308
00:14:40,959 --> 00:14:45,279
than me

309
00:14:41,519 --> 00:14:46,959
about it but the one that i wanted to

310
00:14:45,279 --> 00:14:52,320
focus now

311
00:14:46,959 --> 00:14:55,359
is the off cpu time so with off cpu time

312
00:14:52,320 --> 00:14:57,600
uh the minus d option

313
00:14:55,360 --> 00:14:58,560
we'll put a delimiter this is for the

314
00:14:57,600 --> 00:15:02,160
parsing of

315
00:14:58,560 --> 00:15:05,199
the stock trace f is the

316
00:15:02,160 --> 00:15:09,120
to make the stack trace folded minus p

317
00:15:05,199 --> 00:15:09,839
again is for identify the pid of the

318
00:15:09,120 --> 00:15:11,760
process

319
00:15:09,839 --> 00:15:13,519
and we are going to collect for 30

320
00:15:11,760 --> 00:15:15,839
seconds

321
00:15:13,519 --> 00:15:18,320
the same idea we are going to produce

322
00:15:15,839 --> 00:15:21,760
this text

323
00:15:18,320 --> 00:15:24,959
and here we can use the tools from

324
00:15:21,760 --> 00:15:26,240
from brandon again to create the svg

325
00:15:24,959 --> 00:15:30,560
files

326
00:15:26,240 --> 00:15:30,560
so let me quickly show to you

327
00:15:38,560 --> 00:15:44,160
so this is the code graphs and this

328
00:15:41,600 --> 00:15:44,720
is extracted extracted from my sequel

329
00:15:44,160 --> 00:15:48,800
that

330
00:15:44,720 --> 00:15:52,240
i just uh put it up and uh it was idle

331
00:15:48,800 --> 00:15:55,839
there were no queries running on it and

332
00:15:52,240 --> 00:15:55,839
then i run a test

333
00:15:56,320 --> 00:16:03,040
with the classic sysbench of course

334
00:15:59,839 --> 00:16:04,240
and this is what is happening when the

335
00:16:03,040 --> 00:16:07,599
system starts to get

336
00:16:04,240 --> 00:16:09,360
saturated and as we can see here we are

337
00:16:07,600 --> 00:16:12,639
spending

338
00:16:09,360 --> 00:16:13,519
a lot of time handling connections and

339
00:16:12,639 --> 00:16:16,800
this is waiting

340
00:16:13,519 --> 00:16:18,079
for a reader writes on the on the i o

341
00:16:16,800 --> 00:16:20,719
socket

342
00:16:18,079 --> 00:16:21,279
but the cutest thing and i did this on

343
00:16:20,720 --> 00:16:23,920
purpose

344
00:16:21,279 --> 00:16:26,160
of course my sequel i put very limited

345
00:16:23,920 --> 00:16:29,360
results on a single car

346
00:16:26,160 --> 00:16:31,680
virtual machine is that i was opening

347
00:16:29,360 --> 00:16:32,000
and closing connections for every single

348
00:16:31,680 --> 00:16:35,439
thing

349
00:16:32,000 --> 00:16:37,759
during my workload uh one proposal here

350
00:16:35,440 --> 00:16:39,920
after we analyze it maybe using

351
00:16:37,759 --> 00:16:43,519
connection pool on the application

352
00:16:39,920 --> 00:16:46,639
or use thread pulling on my sql side

353
00:16:43,519 --> 00:16:50,160
to reduce the amount of time spent

354
00:16:46,639 --> 00:16:53,920
spent opening connections

355
00:16:50,160 --> 00:16:57,199
and to resume uh of course these

356
00:16:53,920 --> 00:16:59,920
not only this but the

357
00:16:57,199 --> 00:17:00,479
flame graphs they are absolute numbers

358
00:16:59,920 --> 00:17:03,120
so

359
00:17:00,480 --> 00:17:03,680
it's interesting when you collect both

360
00:17:03,120 --> 00:17:06,959
and

361
00:17:03,680 --> 00:17:09,119
on this way you have the 100 picture

362
00:17:06,959 --> 00:17:11,280
of what the threads are doing and

363
00:17:09,119 --> 00:17:14,159
waiting and then you can correlate

364
00:17:11,280 --> 00:17:15,039
everything because just taking a look at

365
00:17:14,160 --> 00:17:17,360
this

366
00:17:15,039 --> 00:17:18,959
you don't you can't infer if your my

367
00:17:17,359 --> 00:17:22,639
sequel is suffering or not

368
00:17:18,959 --> 00:17:25,199
so it's good to have both

369
00:17:22,640 --> 00:17:28,079
sides of this story the running one and

370
00:17:25,199 --> 00:17:28,079
the blocked one

371
00:17:28,480 --> 00:17:33,840
that's it if by

372
00:17:42,799 --> 00:17:47,280
that's it if you have any questions i am

373
00:17:45,120 --> 00:17:49,760
available uh sorry for being short i

374
00:17:47,280 --> 00:17:52,080
hope you got the idea

375
00:17:49,760 --> 00:17:53,600
we are going to talk more about this

376
00:17:52,080 --> 00:17:56,559
perk on alive

377
00:17:53,600 --> 00:17:58,559
or you can catch me on around here

378
00:17:56,559 --> 00:17:59,360
taking a beer i will be really glad to

379
00:17:58,559 --> 00:18:04,000
answer

380
00:17:59,360 --> 00:18:04,000
all your questions thank you

381
00:18:07,840 --> 00:18:11,039
do you have time to take some questions

382
00:18:09,520 --> 00:18:15,840
okay so if someone has

383
00:18:11,039 --> 00:18:15,840
questions i am available

384
00:18:16,320 --> 00:18:18,559
yes

385
00:18:19,919 --> 00:18:24,240
i looked very impressive i was surprised

386
00:18:22,240 --> 00:18:27,200
that it was how readable

387
00:18:24,240 --> 00:18:28,559
the calls were in the stack is that it

388
00:18:27,200 --> 00:18:29,760
doesn't look like you did any special

389
00:18:28,559 --> 00:18:35,200
compile

390
00:18:29,760 --> 00:18:38,480
no uh can you repeat the question

391
00:18:35,200 --> 00:18:41,760
oh okay sorry sorry so his question

392
00:18:38,480 --> 00:18:42,000
uh was uh if i did anything special to

393
00:18:41,760 --> 00:18:45,840
my

394
00:18:42,000 --> 00:18:48,640
sql to analyze the code paths

395
00:18:45,840 --> 00:18:49,520
uh for the mysql community version there

396
00:18:48,640 --> 00:18:53,200
is a package

397
00:18:49,520 --> 00:18:56,160
uh for rpms the the debug package

398
00:18:53,200 --> 00:18:57,200
which installed the symbols so like you

399
00:18:56,160 --> 00:18:59,679
just need to

400
00:18:57,200 --> 00:19:01,280
if you do the the bundle installation it

401
00:18:59,679 --> 00:19:04,320
will come everything

402
00:19:01,280 --> 00:19:08,000
so you don't need to compile anything

403
00:19:04,320 --> 00:19:08,000
special to analyze it

404
00:19:08,880 --> 00:19:12,160
yeah like not normal magically just

405
00:19:11,520 --> 00:19:16,000
another

406
00:19:12,160 --> 00:19:16,720
rpm of the box of the function calls and

407
00:19:16,000 --> 00:19:18,240
things you can

408
00:19:16,720 --> 00:19:19,840
you can sort of understand what they

409
00:19:18,240 --> 00:19:23,360
mean what's going on and therefore you

410
00:19:19,840 --> 00:19:23,360
can actually understand from that

411
00:19:27,440 --> 00:19:30,720
another thing that i usually do i get on

412
00:19:29,679 --> 00:19:33,200
github of

413
00:19:30,720 --> 00:19:35,679
mysql for example i have on my my

414
00:19:33,200 --> 00:19:38,080
repository then i go to the

415
00:19:35,679 --> 00:19:38,799
source code and open the function when i

416
00:19:38,080 --> 00:19:40,559
don't know

417
00:19:38,799 --> 00:19:42,639
and the function is really well

418
00:19:40,559 --> 00:19:44,160
documented on the header it's really

419
00:19:42,640 --> 00:19:46,799
easy to

420
00:19:44,160 --> 00:19:49,440
my question was actually going to go a

421
00:19:46,799 --> 00:19:49,440
little bit further

422
00:19:49,520 --> 00:19:53,440
my question was more actually i mean i'm

423
00:19:51,919 --> 00:19:54,559
most of my time i'm working with oracle

424
00:19:53,440 --> 00:19:55,760
postgres

425
00:19:54,559 --> 00:19:58,559
and i know oracle's deliberately

426
00:19:55,760 --> 00:19:59,760
obscured so people can't unpace what

427
00:19:58,559 --> 00:20:01,600
they do

428
00:19:59,760 --> 00:20:03,200
i really dislike about oracle but that's

429
00:20:01,600 --> 00:20:04,559
how it works but actually

430
00:20:03,200 --> 00:20:07,039
a lot of the time i'm working with

431
00:20:04,559 --> 00:20:09,440
postgres and also i'm getting maria db

432
00:20:07,039 --> 00:20:10,480
has the same name convention is that

433
00:20:09,440 --> 00:20:13,520
right

434
00:20:10,480 --> 00:20:15,520
uh i'm not sure because maria on recent

435
00:20:13,520 --> 00:20:16,720
versions are going to the left and my

436
00:20:15,520 --> 00:20:19,520
sequel is going to

437
00:20:16,720 --> 00:20:20,320
the right like they're not but in the

438
00:20:19,520 --> 00:20:24,158
past

439
00:20:20,320 --> 00:20:27,760
the functions were crossed like most 99

440
00:20:24,159 --> 00:20:27,760
nowadays they are really starting to

441
00:20:32,840 --> 00:20:35,840
defer

442
00:20:46,000 --> 00:20:50,159
is there a way to see what actually what

443
00:20:49,120 --> 00:20:53,678
line that is

444
00:20:50,159 --> 00:20:53,679
in this function

445
00:20:54,400 --> 00:20:57,039
it was blocked

446
00:20:58,559 --> 00:21:02,080
do you want to get the name of the

447
00:20:59,840 --> 00:21:04,720
function sorry

448
00:21:02,080 --> 00:21:06,000
so so you at this one point the process

449
00:21:04,720 --> 00:21:06,799
is running and then it does something

450
00:21:06,000 --> 00:21:10,480
that makes it

451
00:21:06,799 --> 00:21:14,080
uh block

452
00:21:10,480 --> 00:21:15,679
it becomes offset yes and but

453
00:21:14,080 --> 00:21:17,840
what you show i think is only the

454
00:21:15,679 --> 00:21:19,760
function names function

455
00:21:17,840 --> 00:21:21,520
that's happening there's some way to

456
00:21:19,760 --> 00:21:24,960
actually see which line or

457
00:21:21,520 --> 00:21:26,960
area of the function at this

458
00:21:24,960 --> 00:21:29,200
no then you have to investigate the

459
00:21:26,960 --> 00:21:32,240
source code then

460
00:21:29,200 --> 00:21:32,559
like for go to the specific line you can

461
00:21:32,240 --> 00:21:36,000
use

462
00:21:32,559 --> 00:21:38,639
gdb but then this like

463
00:21:36,000 --> 00:21:39,360
gdb is attached to the process and then

464
00:21:38,640 --> 00:21:42,400
you can

465
00:21:39,360 --> 00:21:44,799
literally dive into the codes and

466
00:21:42,400 --> 00:21:46,320
every single line of but this brings a

467
00:21:44,799 --> 00:21:49,440
lot of overhead

468
00:21:46,320 --> 00:21:52,639
so we don't use on production

469
00:21:49,440 --> 00:21:54,880
but it's our option uh

470
00:21:52,640 --> 00:21:55,760
if you don't have shell access to the uh

471
00:21:54,880 --> 00:21:57,919
to the

472
00:21:55,760 --> 00:21:59,039
to the box like managed service is it

473
00:21:57,919 --> 00:22:02,159
possible to do anything

474
00:21:59,039 --> 00:22:03,679
from the bicycle command line for game

475
00:22:02,159 --> 00:22:07,760
graphs

476
00:22:03,679 --> 00:22:13,440
no no because these are you need

477
00:22:07,760 --> 00:22:26,799
the libraries behind it

478
00:22:13,440 --> 00:22:26,799
well i think that's it thank you guys

