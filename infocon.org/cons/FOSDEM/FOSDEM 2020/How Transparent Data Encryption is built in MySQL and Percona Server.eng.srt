1
00:00:06,879 --> 00:00:10,639
hello everyone let's

2
00:00:08,080 --> 00:00:11,679
uh welcome to our next talk in security

3
00:00:10,639 --> 00:00:14,160
the room

4
00:00:11,679 --> 00:00:14,880
and let's welcome robert and his talk

5
00:00:14,160 --> 00:00:17,279
about

6
00:00:14,880 --> 00:00:20,240
transparent data encryption in mysql and

7
00:00:17,279 --> 00:00:20,240
percona server

8
00:00:21,020 --> 00:00:27,759
[Applause]

9
00:00:24,480 --> 00:00:28,800
hi hello my name is robert i've been

10
00:00:27,760 --> 00:00:31,679
working on

11
00:00:28,800 --> 00:00:33,120
transparent data encryption in kona

12
00:00:31,679 --> 00:00:35,360
server for last

13
00:00:33,120 --> 00:00:36,160
three years and before that i was

14
00:00:35,360 --> 00:00:40,160
working at

15
00:00:36,160 --> 00:00:41,919
oracle at transparent data encryption in

16
00:00:40,160 --> 00:00:44,800
mysql

17
00:00:41,920 --> 00:00:45,840
so today i want to kind of show how the

18
00:00:44,800 --> 00:00:49,919
internals works

19
00:00:45,840 --> 00:00:52,559
how it's all connected and what's that

20
00:00:49,920 --> 00:00:53,520
what are things to look at when you

21
00:00:52,559 --> 00:00:56,839
decide to

22
00:00:53,520 --> 00:01:00,000
turn it on in your server

23
00:00:56,840 --> 00:01:03,039
so first thing we need to cover

24
00:01:00,000 --> 00:01:06,400
our keyrings um so

25
00:01:03,039 --> 00:01:09,439
basically those are plugins uh which

26
00:01:06,400 --> 00:01:12,720
percona server and mysql use to store

27
00:01:09,439 --> 00:01:17,439
encryption key or to communicate between

28
00:01:12,720 --> 00:01:20,640
volt server servers with key key stores

29
00:01:17,439 --> 00:01:24,240
or or just

30
00:01:20,640 --> 00:01:27,840
justify so they come in two flavors

31
00:01:24,240 --> 00:01:30,479
one is a server based so

32
00:01:27,840 --> 00:01:32,159
giving plugin connects to server takes

33
00:01:30,479 --> 00:01:35,200
keys from the server

34
00:01:32,159 --> 00:01:38,479
put that into in cache memory

35
00:01:35,200 --> 00:01:39,439
and provides that to mysql or perkona

36
00:01:38,479 --> 00:01:43,600
server

37
00:01:39,439 --> 00:01:46,798
so those keys are cached in memory

38
00:01:43,600 --> 00:01:48,479
and apart so as i said it can

39
00:01:46,799 --> 00:01:52,320
communicate with the server

40
00:01:48,479 --> 00:01:55,600
or it can just use a file

41
00:01:52,320 --> 00:01:57,758
to store the keys so when you

42
00:01:55,600 --> 00:01:59,600
install uh keurig the installation

43
00:01:57,759 --> 00:02:02,560
itself is always successful

44
00:01:59,600 --> 00:02:04,479
because in mysql and in percona you need

45
00:02:02,560 --> 00:02:08,399
to have a plugin installed

46
00:02:04,479 --> 00:02:11,440
to be able to use its variables

47
00:02:08,399 --> 00:02:12,640
and uh so we all should get if you

48
00:02:11,440 --> 00:02:15,440
didn't provide

49
00:02:12,640 --> 00:02:16,958
enough information warnings in your

50
00:02:15,440 --> 00:02:20,079
server log file

51
00:02:16,959 --> 00:02:23,599
that you should um you know set up

52
00:02:20,080 --> 00:02:26,640
cueing vault config options or

53
00:02:23,599 --> 00:02:29,280
for giving volts uh plugging or gearing

54
00:02:26,640 --> 00:02:31,119
file data for q5 plugging

55
00:02:29,280 --> 00:02:32,959
so when you set up one of those

56
00:02:31,120 --> 00:02:35,040
variables um

57
00:02:32,959 --> 00:02:36,080
actually for key involved giving volt

58
00:02:35,040 --> 00:02:38,799
config

59
00:02:36,080 --> 00:02:39,120
the percona server will try to connect

60
00:02:38,800 --> 00:02:42,239
to

61
00:02:39,120 --> 00:02:42,720
volt server and check it and check if

62
00:02:42,239 --> 00:02:45,280
it's

63
00:02:42,720 --> 00:02:46,000
if it's working and the same with

64
00:02:45,280 --> 00:02:49,840
queueing

65
00:02:46,000 --> 00:02:50,959
file data so that will try to load the

66
00:02:49,840 --> 00:02:53,680
keys from

67
00:02:50,959 --> 00:02:56,160
from from the file and check the version

68
00:02:53,680 --> 00:03:00,159
check if nobody manipulate the

69
00:02:56,160 --> 00:03:04,159
queueing file and if it

70
00:03:00,159 --> 00:03:07,120
checks the checksum

71
00:03:04,159 --> 00:03:09,359
if it's all right it allows the

72
00:03:07,120 --> 00:03:12,400
procurement server or mysql to use those

73
00:03:09,360 --> 00:03:15,680
keys so with queuing

74
00:03:12,400 --> 00:03:19,840
file all information are loaded

75
00:03:15,680 --> 00:03:22,560
immediately from from file with keys

76
00:03:19,840 --> 00:03:23,280
so when you select from a table that was

77
00:03:22,560 --> 00:03:26,959
encrypted

78
00:03:23,280 --> 00:03:29,680
the key that is used to decrypt

79
00:03:26,959 --> 00:03:31,280
the table is available for sure in

80
00:03:29,680 --> 00:03:34,319
memory

81
00:03:31,280 --> 00:03:35,120
and with queuing vault it's a bit

82
00:03:34,319 --> 00:03:38,399
different

83
00:03:35,120 --> 00:03:39,120
and it's comes with also chemical key v

84
00:03:38,400 --> 00:03:42,159
or different

85
00:03:39,120 --> 00:03:43,840
other giving aws that you can use with

86
00:03:42,159 --> 00:03:46,879
mysql

87
00:03:43,840 --> 00:03:48,319
it doesn't retrieve all the data on the

88
00:03:46,879 --> 00:03:53,120
startup from

89
00:03:48,319 --> 00:03:57,518
from the key server just the list of the

90
00:03:53,120 --> 00:03:59,519
of the file of the keys so you may ask

91
00:03:57,519 --> 00:04:01,439
so what happens if i try to select from

92
00:03:59,519 --> 00:04:02,400
a table encrypted table and key is not

93
00:04:01,439 --> 00:04:05,200
there

94
00:04:02,400 --> 00:04:07,439
so it will retrieve the keys also on the

95
00:04:05,200 --> 00:04:11,439
startup but just the active ones

96
00:04:07,439 --> 00:04:11,439
and i will show that a bit later

97
00:04:13,519 --> 00:04:17,358
the weird thing about queuing five is

98
00:04:15,920 --> 00:04:20,000
that we implemented it

99
00:04:17,358 --> 00:04:21,358
when you change when you do a single

100
00:04:20,000 --> 00:04:24,560
change

101
00:04:21,358 --> 00:04:27,198
uh into a queueing file

102
00:04:24,560 --> 00:04:29,120
first the backup file is created so

103
00:04:27,199 --> 00:04:32,400
whole content of a curing file is cr

104
00:04:29,120 --> 00:04:34,400
is copied and after that if the

105
00:04:32,400 --> 00:04:35,440
change in the in memory cache is

106
00:04:34,400 --> 00:04:37,599
successful

107
00:04:35,440 --> 00:04:39,040
it will be swapped with the current

108
00:04:37,600 --> 00:04:41,520
queuing file

109
00:04:39,040 --> 00:04:43,120
so the reason we did that is because we

110
00:04:41,520 --> 00:04:44,479
we don't know how many users are going

111
00:04:43,120 --> 00:04:48,320
to use it and there are

112
00:04:44,479 --> 00:04:50,000
so so if and if it becomes a bottleneck

113
00:04:48,320 --> 00:04:53,440
error we will kind of change it

114
00:04:50,000 --> 00:04:57,280
but every single change to keying

115
00:04:53,440 --> 00:05:00,479
is it means copies all the file

116
00:04:57,280 --> 00:05:02,719
all the queueing file and also dumps all

117
00:05:00,479 --> 00:05:05,520
the memory of keyings into the

118
00:05:02,720 --> 00:05:07,600
file so it's rewritten each and every

119
00:05:05,520 --> 00:05:10,639
time

120
00:05:07,600 --> 00:05:14,160
with kirin volt it's much

121
00:05:10,639 --> 00:05:17,199
less intensive i would say it just

122
00:05:14,160 --> 00:05:18,080
sends a key over a network or request of

123
00:05:17,199 --> 00:05:22,000
deletion

124
00:05:18,080 --> 00:05:23,758
of a key from vault server

125
00:05:22,000 --> 00:05:26,639
there are problems like connection legs

126
00:05:23,759 --> 00:05:30,720
of course with this kind of approach

127
00:05:26,639 --> 00:05:30,720
but you cannot do without them

128
00:05:30,740 --> 00:05:35,759
[Music]

129
00:05:33,520 --> 00:05:36,719
also there is a concept of that you

130
00:05:35,759 --> 00:05:39,440
should have

131
00:05:36,720 --> 00:05:40,720
a separate place in your key store where

132
00:05:39,440 --> 00:05:43,600
you

133
00:05:40,720 --> 00:05:44,560
store your keys per keyring so imagine

134
00:05:43,600 --> 00:05:47,840
you have a

135
00:05:44,560 --> 00:05:48,400
cluster and you have like a master and

136
00:05:47,840 --> 00:05:51,359
slave

137
00:05:48,400 --> 00:05:53,198
and both of them using the same place in

138
00:05:51,360 --> 00:05:56,560
your vault server

139
00:05:53,199 --> 00:05:59,280
where they store the keys then you would

140
00:05:56,560 --> 00:06:01,840
get the clash between the names of the

141
00:05:59,280 --> 00:06:05,758
keys of course

142
00:06:01,840 --> 00:06:09,039
so with in mysql master key

143
00:06:05,759 --> 00:06:09,600
is a unique has unique name i will talk

144
00:06:09,039 --> 00:06:12,479
about that

145
00:06:09,600 --> 00:06:13,919
also later but when you use queuing udf

146
00:06:12,479 --> 00:06:17,280
there is a special plugin that

147
00:06:13,919 --> 00:06:20,080
users can store their own keys

148
00:06:17,280 --> 00:06:20,719
keys into the vault server that becomes

149
00:06:20,080 --> 00:06:24,000
a problem

150
00:06:20,720 --> 00:06:27,199
because those names are not unique

151
00:06:24,000 --> 00:06:27,680
um so this kind of separation is natural

152
00:06:27,199 --> 00:06:30,560
for

153
00:06:27,680 --> 00:06:32,160
queuing file because queuing files stay

154
00:06:30,560 --> 00:06:34,880
next to the

155
00:06:32,160 --> 00:06:37,440
server itself so it's another problem

156
00:06:34,880 --> 00:06:39,600
there will be a file per each server

157
00:06:37,440 --> 00:06:40,800
but there is some work needed for when

158
00:06:39,600 --> 00:06:44,000
you use uh

159
00:06:40,800 --> 00:06:46,840
hashicorp volts server or

160
00:06:44,000 --> 00:06:49,360
uh oracle oracle key vault for for that

161
00:06:46,840 --> 00:06:52,799
matter

162
00:06:49,360 --> 00:06:57,520
um i don't know if you guys used uh

163
00:06:52,800 --> 00:06:57,520
vault it's very cool uh open source

164
00:06:58,400 --> 00:07:05,599
server for storing keys and you you

165
00:07:02,160 --> 00:07:08,319
in in kirinvalk

166
00:07:05,599 --> 00:07:09,360
uh in killing fault you provide a mount

167
00:07:08,319 --> 00:07:12,000
point

168
00:07:09,360 --> 00:07:14,000
uh where the keys should be stored by

169
00:07:12,000 --> 00:07:15,520
queueing volt in volt server

170
00:07:14,000 --> 00:07:17,520
so you can do the separation but

171
00:07:15,520 --> 00:07:20,080
providing different

172
00:07:17,520 --> 00:07:22,400
mount points to each queueing but that's

173
00:07:20,080 --> 00:07:25,280
a kind of a

174
00:07:22,400 --> 00:07:26,719
high privilege thing to do so you will

175
00:07:25,280 --> 00:07:30,400
have to have a privilege

176
00:07:26,720 --> 00:07:32,479
to create mount point and you may not

177
00:07:30,400 --> 00:07:34,239
want to do that to give that privileges

178
00:07:32,479 --> 00:07:37,120
to all your dbas

179
00:07:34,240 --> 00:07:38,080
so the world server also provides you

180
00:07:37,120 --> 00:07:41,759
that you can

181
00:07:38,080 --> 00:07:44,800
create um one mount point

182
00:07:41,759 --> 00:07:47,199
and provide a path to

183
00:07:44,800 --> 00:07:48,720
giving volt configuration file and when

184
00:07:47,199 --> 00:07:51,280
the first

185
00:07:48,720 --> 00:07:52,000
key is sent to queueing vault vault

186
00:07:51,280 --> 00:07:56,000
server will

187
00:07:52,000 --> 00:07:58,560
automatically create a directory in that

188
00:07:56,000 --> 00:07:59,840
mount point and when you delete the last

189
00:07:58,560 --> 00:08:04,240
key from that

190
00:07:59,840 --> 00:08:07,119
path volt server will also delete the

191
00:08:04,240 --> 00:08:07,120
the directory

192
00:08:08,080 --> 00:08:12,318
so yeah so this is the configuration

193
00:08:10,240 --> 00:08:15,520
file for keying vault

194
00:08:12,319 --> 00:08:18,000
uh vault url so that's the url of

195
00:08:15,520 --> 00:08:19,840
full server the secret mount point you

196
00:08:18,000 --> 00:08:21,919
need to create on fault server

197
00:08:19,840 --> 00:08:22,878
where the keys are gonna be stored and

198
00:08:21,919 --> 00:08:26,080
you can use this

199
00:08:22,879 --> 00:08:29,759
path to separate those places for

200
00:08:26,080 --> 00:08:31,919
each server perk on a server

201
00:08:29,759 --> 00:08:34,560
then you have a token a token is

202
00:08:31,919 --> 00:08:37,199
provided to you by vote server it's one

203
00:08:34,559 --> 00:08:39,359
one time token and vault certificate so

204
00:08:37,200 --> 00:08:42,719
this one is optional because you can

205
00:08:39,360 --> 00:08:44,320
add your vault certificate into

206
00:08:42,719 --> 00:08:46,480
to your machine so it would be trusted

207
00:08:44,320 --> 00:08:47,519
by machine or you can provide it here

208
00:08:46,480 --> 00:08:49,040
and

209
00:08:47,519 --> 00:08:55,200
queuing vault will use it to

210
00:08:49,040 --> 00:08:57,920
authenticate the vault server

211
00:08:55,200 --> 00:08:59,200
we store keys inside wall server in

212
00:08:57,920 --> 00:09:03,279
base64

213
00:08:59,200 --> 00:09:05,200
uh encoding so whenever you are

214
00:09:03,279 --> 00:09:06,959
in a position you want to list your keys

215
00:09:05,200 --> 00:09:10,080
in in full server

216
00:09:06,959 --> 00:09:13,199
you should just decode it so here

217
00:09:10,080 --> 00:09:18,160
we have the code that's something

218
00:09:13,200 --> 00:09:21,120
and it appears it's a master key

219
00:09:18,160 --> 00:09:23,839
and i will talk a bit about how this is

220
00:09:21,120 --> 00:09:23,839
structured

221
00:09:23,920 --> 00:09:31,120
yes and also the master key here

222
00:09:27,680 --> 00:09:31,680
has a uuid of a server embedded in its

223
00:09:31,120 --> 00:09:35,040
name

224
00:09:31,680 --> 00:09:36,479
so it's a unique name so you can kind of

225
00:09:35,040 --> 00:09:39,599
use a

226
00:09:36,480 --> 00:09:42,800
common place in this vault server

227
00:09:39,600 --> 00:09:46,320
sorry to store keys from different

228
00:09:42,800 --> 00:09:46,319
mysql or piconna servers

229
00:09:48,880 --> 00:09:55,439
and you can use also keying udf

230
00:09:52,080 --> 00:09:58,880
um plugin and this

231
00:09:55,440 --> 00:10:04,000
queueing udf is users can use to store

232
00:09:58,880 --> 00:10:07,760
its own keys in the volt server or

233
00:10:04,000 --> 00:10:11,360
or in this queueing file file

234
00:10:07,760 --> 00:10:14,959
and you can generate a new new key

235
00:10:11,360 --> 00:10:18,800
fetch you have also you can also

236
00:10:14,959 --> 00:10:20,239
fetch key length historic new key i

237
00:10:18,800 --> 00:10:23,279
don't remove

238
00:10:20,240 --> 00:10:25,360
the key so how

239
00:10:23,279 --> 00:10:26,720
does this you know db encryption is

240
00:10:25,360 --> 00:10:30,839
really

241
00:10:26,720 --> 00:10:32,160
done so in mysql tablespace consists of

242
00:10:30,839 --> 00:10:36,000
pages

243
00:10:32,160 --> 00:10:36,000
so we have table spaces which are

244
00:10:36,480 --> 00:10:42,800
a set of tables or you can have a verify

245
00:10:39,519 --> 00:10:44,959
tablespace which is a one table

246
00:10:42,800 --> 00:10:46,560
has its own dedicated table space and

247
00:10:44,959 --> 00:10:48,800
that's it and

248
00:10:46,560 --> 00:10:50,000
in mysql the encryption works on a

249
00:10:48,800 --> 00:10:52,319
tablespace level

250
00:10:50,000 --> 00:10:54,000
so you can have whole tablespace

251
00:10:52,320 --> 00:10:57,440
encrypted but you cannot have some

252
00:10:54,000 --> 00:11:00,800
tables encrypted in tablespace

253
00:10:57,440 --> 00:11:05,600
so what is master key encryption it's an

254
00:11:00,800 --> 00:11:08,959
envelope encryption so you use one key

255
00:11:05,600 --> 00:11:11,360
uh to uh to encrypt other keys in in the

256
00:11:08,959 --> 00:11:11,359
server

257
00:11:12,560 --> 00:11:18,800
so so we have a key uh master key

258
00:11:16,480 --> 00:11:19,760
resides in queueing that we already

259
00:11:18,800 --> 00:11:22,719
discussed

260
00:11:19,760 --> 00:11:22,720
and then we have a

261
00:11:23,040 --> 00:11:30,240
server generated keeper table uh

262
00:11:26,399 --> 00:11:35,040
inside mysql data directory

263
00:11:30,240 --> 00:11:37,440
so whenever a table is to be encrypted

264
00:11:35,040 --> 00:11:39,360
uh a key is generated for it by

265
00:11:37,440 --> 00:11:42,480
procurement server itself

266
00:11:39,360 --> 00:11:43,760
and so it stays next to the data it's

267
00:11:42,480 --> 00:11:46,079
encrypts

268
00:11:43,760 --> 00:11:47,760
so in order for it to stay next to the

269
00:11:46,079 --> 00:11:49,120
data it encrypts it has to be also

270
00:11:47,760 --> 00:11:51,519
encrypted and this

271
00:11:49,120 --> 00:11:56,480
is this key is encrypted by the master

272
00:11:51,519 --> 00:11:59,279
key coming from keyring

273
00:11:56,480 --> 00:11:59,279
uh so

274
00:11:59,600 --> 00:12:04,399
encrypt type space key is stored in a

275
00:12:02,240 --> 00:12:08,720
tablespace

276
00:12:04,399 --> 00:12:08,720
header so in

277
00:12:09,120 --> 00:12:12,480
and this is how this header looks like

278
00:12:10,959 --> 00:12:16,079
so we have some versioning

279
00:12:12,480 --> 00:12:19,120
three version already key id and uuid

280
00:12:16,079 --> 00:12:19,680
are used for combining combined together

281
00:12:19,120 --> 00:12:22,959
to

282
00:12:19,680 --> 00:12:24,638
get the master key id then we have a

283
00:12:22,959 --> 00:12:27,920
tablespace key and iv

284
00:12:24,639 --> 00:12:31,360
so any saturation vector that are

285
00:12:27,920 --> 00:12:33,920
together encrypted with the master key

286
00:12:31,360 --> 00:12:34,560
and as the next as the last part is a

287
00:12:33,920 --> 00:12:38,079
checksum

288
00:12:34,560 --> 00:12:40,880
of tablespace key and i v an iv but the

289
00:12:38,079 --> 00:12:42,719
checksum itself is taken from plaintext

290
00:12:40,880 --> 00:12:45,600
tablespace key and iv not the

291
00:12:42,720 --> 00:12:45,600
unencrypted one

292
00:12:45,839 --> 00:12:50,800
so yeah when we combine key id and uuid

293
00:12:48,720 --> 00:12:53,839
we get the

294
00:12:50,800 --> 00:12:53,839
master key id

295
00:12:55,839 --> 00:12:59,120
so how do we know which master key we

296
00:12:57,839 --> 00:13:01,440
should fetch from keying to

297
00:12:59,120 --> 00:13:04,800
decrypt a table because we have this

298
00:13:01,440 --> 00:13:06,639
table a let's say and we have a key

299
00:13:04,800 --> 00:13:08,959
there can be multiple master keys in a

300
00:13:06,639 --> 00:13:12,399
key ring so we need to have this

301
00:13:08,959 --> 00:13:15,920
id by looking at table space header

302
00:13:12,399 --> 00:13:18,240
we take key id and uuid and

303
00:13:15,920 --> 00:13:19,040
we combine it and we have the master key

304
00:13:18,240 --> 00:13:21,680
id

305
00:13:19,040 --> 00:13:24,480
so we know how to which key master key

306
00:13:21,680 --> 00:13:28,000
we should fetch from the keying

307
00:13:24,480 --> 00:13:31,040
but the queuings can be swapped and

308
00:13:28,000 --> 00:13:31,920
we may have a keying with a key id that

309
00:13:31,040 --> 00:13:34,399
is

310
00:13:31,920 --> 00:13:35,120
okay for us to fetch that we are looking

311
00:13:34,399 --> 00:13:37,680
for but

312
00:13:35,120 --> 00:13:38,720
it turns out that it's the wrong key

313
00:13:37,680 --> 00:13:40,399
wrong key right

314
00:13:38,720 --> 00:13:42,880
because the queuings were swapped or

315
00:13:40,399 --> 00:13:44,399
something so how we make sure that the

316
00:13:42,880 --> 00:13:46,959
key itself is correct

317
00:13:44,399 --> 00:13:48,399
because if we start using incorrect key

318
00:13:46,959 --> 00:13:51,680
for decrypting data

319
00:13:48,399 --> 00:13:52,320
we'll get the all mess well the server

320
00:13:51,680 --> 00:13:57,760
will crash

321
00:13:52,320 --> 00:14:01,199
basically um so we do that by

322
00:13:57,760 --> 00:14:04,399
by checking this year's checksum

323
00:14:01,199 --> 00:14:07,760
so we retrieve master key

324
00:14:04,399 --> 00:14:10,320
decrypt tablespace key and iv we do

325
00:14:07,760 --> 00:14:16,560
the checksum of those two and we check

326
00:14:10,320 --> 00:14:18,880
and we map

327
00:14:16,560 --> 00:14:18,880
sorry

328
00:14:23,120 --> 00:14:26,800
yeah and we much matched it with the crc

329
00:14:25,760 --> 00:14:30,079
32

330
00:14:26,800 --> 00:14:30,719
from the tablespace header so once that

331
00:14:30,079 --> 00:14:32,800
compared

332
00:14:30,720 --> 00:14:36,720
and it's okay we know that it's safe to

333
00:14:32,800 --> 00:14:36,719
use this key to decrypt this table space

334
00:14:38,320 --> 00:14:41,440
so how do we make sure that we are able

335
00:14:40,720 --> 00:14:43,600
to detract

336
00:14:41,440 --> 00:14:44,480
table when we need it as i showed at the

337
00:14:43,600 --> 00:14:46,800
beginning

338
00:14:44,480 --> 00:14:48,160
with keying vault we just fetched the

339
00:14:46,800 --> 00:14:50,560
list of the keys

340
00:14:48,160 --> 00:14:53,760
and active keys and this is how we know

341
00:14:50,560 --> 00:14:53,760
which keys are active

342
00:14:53,920 --> 00:14:57,279
so at the start of the table of the

343
00:14:55,839 --> 00:14:59,920
server

344
00:14:57,279 --> 00:15:01,439
we read page zero of each tablespace

345
00:14:59,920 --> 00:15:03,839
where tablespace header

346
00:15:01,440 --> 00:15:04,639
resides so if there is encrypted

347
00:15:03,839 --> 00:15:07,760
tablespace

348
00:15:04,639 --> 00:15:10,959
it says flux set to be encrypted

349
00:15:07,760 --> 00:15:13,040
we read page zero read tablespace header

350
00:15:10,959 --> 00:15:15,760
we get the master key from keyring so we

351
00:15:13,040 --> 00:15:18,040
check if we can connect to keyring

352
00:15:15,760 --> 00:15:19,680
we do the decryption and we check the

353
00:15:18,040 --> 00:15:23,120
crc32

354
00:15:19,680 --> 00:15:26,399
so by by that we know that we are

355
00:15:23,120 --> 00:15:28,399
okay to decrypt this table but if any of

356
00:15:26,399 --> 00:15:32,399
those steps fail we have to

357
00:15:28,399 --> 00:15:34,480
say that the table space is just missing

358
00:15:32,399 --> 00:15:38,560
we don't say we cannot decrypt it it

359
00:15:34,480 --> 00:15:38,560
will just show us missing table space

360
00:15:38,839 --> 00:15:41,839
um

361
00:15:43,279 --> 00:15:47,120
so this this part is done on the startup

362
00:15:45,839 --> 00:15:50,160
of the server so

363
00:15:47,120 --> 00:15:50,480
it's important to have a limited number

364
00:15:50,160 --> 00:15:53,680
of

365
00:15:50,480 --> 00:15:56,720
master keys active in the

366
00:15:53,680 --> 00:15:57,439
mysql because if you have a a lot of

367
00:15:56,720 --> 00:15:59,600
them

368
00:15:57,440 --> 00:16:01,759
that would mean that there will be a lot

369
00:15:59,600 --> 00:16:03,680
of transmission between fault server and

370
00:16:01,759 --> 00:16:05,600
your mysql instance

371
00:16:03,680 --> 00:16:09,839
on startup so when you're rebooting it

372
00:16:05,600 --> 00:16:12,639
will slow down your reboots

373
00:16:09,839 --> 00:16:13,279
so let's talk about what crypto we use

374
00:16:12,639 --> 00:16:16,320
in

375
00:16:13,279 --> 00:16:19,439
mysql uh

376
00:16:16,320 --> 00:16:22,720
first one is ais 256

377
00:16:19,440 --> 00:16:25,440
ecb so this is a famous picture

378
00:16:22,720 --> 00:16:26,160
why it's insecure because it's not

379
00:16:25,440 --> 00:16:30,320
randomized

380
00:16:26,160 --> 00:16:33,920
algorithm so you can see the repetition

381
00:16:30,320 --> 00:16:35,680
uh in the plaintext by looking at the

382
00:16:33,920 --> 00:16:38,000
ciphertext

383
00:16:35,680 --> 00:16:39,359
so it will always like encode the same

384
00:16:38,000 --> 00:16:42,079
value to the same value so

385
00:16:39,360 --> 00:16:42,800
for if it's a if it's a black pixel it's

386
00:16:42,079 --> 00:16:45,120
let's say

387
00:16:42,800 --> 00:16:46,319
it will encode it as a gray pixel and we

388
00:16:45,120 --> 00:16:48,240
can see where

389
00:16:46,320 --> 00:16:50,480
the shape of the penguin by looking at

390
00:16:48,240 --> 00:16:53,199
this cipher text

391
00:16:50,480 --> 00:16:53,759
so why we are using it because we are

392
00:16:53,199 --> 00:16:56,800
using it

393
00:16:53,759 --> 00:16:58,160
only for tablespace key and iv and table

394
00:16:56,800 --> 00:17:00,719
space key

395
00:16:58,160 --> 00:17:03,439
itself is a random thing so it should

396
00:17:00,720 --> 00:17:06,079
not have like a deterministic

397
00:17:03,440 --> 00:17:07,199
repetition in it and since the there is

398
00:17:06,079 --> 00:17:09,198
no

399
00:17:07,199 --> 00:17:10,400
deterministic repetition it's okay to

400
00:17:09,199 --> 00:17:13,839
use here and we

401
00:17:10,400 --> 00:17:17,360
kind of save iv because if you have this

402
00:17:13,839 --> 00:17:21,039
uh ecb you don't have to have iv

403
00:17:17,359 --> 00:17:24,639
uh okay so this is the broad picture of

404
00:17:21,039 --> 00:17:28,960
how ais basically works it takes

405
00:17:24,640 --> 00:17:31,280
128 bits of text 256

406
00:17:28,960 --> 00:17:32,240
bit long encryption key and provides the

407
00:17:31,280 --> 00:17:35,918
cipher text

408
00:17:32,240 --> 00:17:38,640
so as to 256 in the ais

409
00:17:35,919 --> 00:17:39,280
it means the length of the key but it

410
00:17:38,640 --> 00:17:42,720
also

411
00:17:39,280 --> 00:17:46,320
always works on like 128 bits long

412
00:17:42,720 --> 00:17:50,320
block of of text

413
00:17:46,320 --> 00:17:51,280
um for page encryption we use a ais 256

414
00:17:50,320 --> 00:17:54,559
cbc so

415
00:17:51,280 --> 00:17:55,440
change one uh changed and it's a

416
00:17:54,559 --> 00:17:59,520
randomized one

417
00:17:55,440 --> 00:18:02,640
so you get no repetition this way

418
00:17:59,520 --> 00:18:05,120
so how do you get the randomization

419
00:18:02,640 --> 00:18:06,000
basically you never encrypt the same

420
00:18:05,120 --> 00:18:09,520
plain text

421
00:18:06,000 --> 00:18:13,520
uh twice so

422
00:18:09,520 --> 00:18:15,520
to do that you add to your plain text iv

423
00:18:13,520 --> 00:18:17,679
so initialization vector

424
00:18:15,520 --> 00:18:19,440
so it's important to have the

425
00:18:17,679 --> 00:18:21,919
initialization vector and

426
00:18:19,440 --> 00:18:24,400
key itself always to be different when

427
00:18:21,919 --> 00:18:28,400
you start encoding with cvc

428
00:18:24,400 --> 00:18:31,120
or ctr we also use ctr but

429
00:18:28,400 --> 00:18:31,120
i don't have time

430
00:18:32,400 --> 00:18:38,880
okay a bit about master key rotation so

431
00:18:35,919 --> 00:18:40,400
when it's useful there's two cases

432
00:18:38,880 --> 00:18:42,000
actually

433
00:18:40,400 --> 00:18:43,520
when you end up in a situation you have

434
00:18:42,000 --> 00:18:46,640
a lot of master keys

435
00:18:43,520 --> 00:18:48,320
in your vault server and your uh startup

436
00:18:46,640 --> 00:18:51,440
is getting slow because of that

437
00:18:48,320 --> 00:18:53,360
you can re you can ask the

438
00:18:51,440 --> 00:18:54,960
mysql or program server to re-encrypt

439
00:18:53,360 --> 00:18:58,159
all your tablespace keys

440
00:18:54,960 --> 00:19:01,840
with the new master key and

441
00:18:58,160 --> 00:19:02,480
that's also must the master key rotation

442
00:19:01,840 --> 00:19:05,520
is also

443
00:19:02,480 --> 00:19:06,720
important when you for security reasons

444
00:19:05,520 --> 00:19:08,799
because you can

445
00:19:06,720 --> 00:19:10,080
lose your keying and you don't know

446
00:19:08,799 --> 00:19:12,559
about it so

447
00:19:10,080 --> 00:19:14,320
it's a good thing to to rotate it from

448
00:19:12,559 --> 00:19:17,840
time to time

449
00:19:14,320 --> 00:19:19,678
and how is it look like so we

450
00:19:17,840 --> 00:19:21,520
re encrypted with the new master key the

451
00:19:19,679 --> 00:19:25,600
tablespace key and iv

452
00:19:21,520 --> 00:19:27,039
and we we changed the key id and uuid to

453
00:19:25,600 --> 00:19:30,000
the new ones

454
00:19:27,039 --> 00:19:31,440
so so it will all point to one master

455
00:19:30,000 --> 00:19:33,120
key

456
00:19:31,440 --> 00:19:35,039
we don't have to update this checksum of

457
00:19:33,120 --> 00:19:39,360
tablespace key and iv because

458
00:19:35,039 --> 00:19:41,760
it always stays stays the same

459
00:19:39,360 --> 00:19:43,199
and it's because of that because it's

460
00:19:41,760 --> 00:19:44,160
always stayed the same it's also the

461
00:19:43,200 --> 00:19:46,799
biggest drawback

462
00:19:44,160 --> 00:19:48,000
drawback of master key encryption so

463
00:19:46,799 --> 00:19:50,799
imagine you have the

464
00:19:48,000 --> 00:19:51,600
type of space key and somebody stole

465
00:19:50,799 --> 00:19:55,120
this once

466
00:19:51,600 --> 00:19:57,678
because he has or she has access to your

467
00:19:55,120 --> 00:19:57,678
core dump

468
00:19:58,960 --> 00:20:03,760
so he will be able to decrypt your data

469
00:20:02,080 --> 00:20:05,840
although you are not aware of it you can

470
00:20:03,760 --> 00:20:06,799
rotate your master key but that won't

471
00:20:05,840 --> 00:20:09,280
help you because

472
00:20:06,799 --> 00:20:09,918
this tablespace key that is actually

473
00:20:09,280 --> 00:20:13,600
used to

474
00:20:09,919 --> 00:20:16,240
encrypt the table will stay the same

475
00:20:13,600 --> 00:20:16,639
so we are working on some mitigation for

476
00:20:16,240 --> 00:20:21,840
that

477
00:20:16,640 --> 00:20:24,559
in percona server now

478
00:20:21,840 --> 00:20:26,240
so those were the drum bugs we have also

479
00:20:24,559 --> 00:20:28,799
been on encryption so

480
00:20:26,240 --> 00:20:29,840
bin log is a place where mysql and

481
00:20:28,799 --> 00:20:33,039
percona server

482
00:20:29,840 --> 00:20:35,439
drops its events we call it

483
00:20:33,039 --> 00:20:37,280
and those events are then replicated to

484
00:20:35,440 --> 00:20:40,320
your slave servers

485
00:20:37,280 --> 00:20:42,158
uh in your replication schema

486
00:20:40,320 --> 00:20:43,918
so for binoc encryption in five seven

487
00:20:42,159 --> 00:20:45,840
you have to provide

488
00:20:43,919 --> 00:20:47,600
two variables encrypt bin lock so it

489
00:20:45,840 --> 00:20:48,720
will just encrypt the pin lock but you

490
00:20:47,600 --> 00:20:50,879
have also to

491
00:20:48,720 --> 00:20:53,200
provide master verified checks down and

492
00:20:50,880 --> 00:20:56,960
why is it that because

493
00:20:53,200 --> 00:21:00,720
when masters master server is encrypting

494
00:20:56,960 --> 00:21:02,799
it's decrypting its master its bin lock

495
00:21:00,720 --> 00:21:04,799
after decryption it will have to check

496
00:21:02,799 --> 00:21:07,440
if it used the correct key

497
00:21:04,799 --> 00:21:09,039
and for that it will just verify the

498
00:21:07,440 --> 00:21:11,840
checksum that the checksum of the

499
00:21:09,039 --> 00:21:12,720
event is okay before sending it to slave

500
00:21:11,840 --> 00:21:16,158
otherwise it

501
00:21:12,720 --> 00:21:19,120
could you could it could send just uh

502
00:21:16,159 --> 00:21:19,919
trash to slave server and crush it so

503
00:21:19,120 --> 00:21:23,280
that would be

504
00:21:19,919 --> 00:21:23,280
also a point of attack

505
00:21:23,760 --> 00:21:27,360
and for bing encryption phase seven we

506
00:21:26,400 --> 00:21:30,240
provide a new

507
00:21:27,360 --> 00:21:32,320
event that it's never transferred across

508
00:21:30,240 --> 00:21:35,360
the network

509
00:21:32,320 --> 00:21:37,039
so after this event all the

510
00:21:35,360 --> 00:21:39,600
bin lock is rest of the bin lock is

511
00:21:37,039 --> 00:21:41,200
encrypted so mysql reads the bin lock

512
00:21:39,600 --> 00:21:45,840
sees this even at the beginning

513
00:21:41,200 --> 00:21:45,840
it knows it has to start decrypting

514
00:21:46,000 --> 00:21:49,360
this event is never sent over the

515
00:21:48,080 --> 00:21:52,240
network because

516
00:21:49,360 --> 00:21:53,520
slave server doesn't need to know that

517
00:21:52,240 --> 00:21:58,000
bin locking master

518
00:21:53,520 --> 00:22:00,960
master server is encrypted

519
00:21:58,000 --> 00:22:03,360
this event is served over a network in a

520
00:22:00,960 --> 00:22:07,600
plain text so you have to have a

521
00:22:03,360 --> 00:22:07,600
tls connection between master and slave

522
00:22:09,760 --> 00:22:15,520
so my bin lock cannot decrypt

523
00:22:13,600 --> 00:22:17,360
however there is an option that you can

524
00:22:15,520 --> 00:22:20,879
connect your mysql bin lock

525
00:22:17,360 --> 00:22:23,039
reader into your uh mysql server

526
00:22:20,880 --> 00:22:24,880
mysql server will read the bin log and

527
00:22:23,039 --> 00:22:25,200
send it over to mysql bin lock so you

528
00:22:24,880 --> 00:22:27,600
can

529
00:22:25,200 --> 00:22:28,559
kind of use it when you have a an

530
00:22:27,600 --> 00:22:31,520
encrypted

531
00:22:28,559 --> 00:22:31,520
bin lock also

532
00:22:32,080 --> 00:22:35,280
we have also binocular encryption in

533
00:22:33,840 --> 00:22:38,720
eight zero it's upstream

534
00:22:35,280 --> 00:22:40,799
implementation it basically works the

535
00:22:38,720 --> 00:22:42,720
same as master key encryption

536
00:22:40,799 --> 00:22:44,000
you have just replication master key in

537
00:22:42,720 --> 00:22:47,600
your key ring

538
00:22:44,000 --> 00:22:51,039
and the server generated keeper

539
00:22:47,600 --> 00:22:54,480
block when you turn it on

540
00:22:51,039 --> 00:22:57,919
master key parkour server will just rot

541
00:22:54,480 --> 00:23:01,039
enable rotation of a bin lock so the new

542
00:22:57,919 --> 00:23:03,360
file will be created with because

543
00:23:01,039 --> 00:23:05,039
you have number of bin lock files in

544
00:23:03,360 --> 00:23:06,959
your mysql

545
00:23:05,039 --> 00:23:08,320
new file will be created from starting

546
00:23:06,960 --> 00:23:12,880
from that file

547
00:23:08,320 --> 00:23:14,639
each all belongs will be encrypted

548
00:23:12,880 --> 00:23:16,799
we have also under table space

549
00:23:14,640 --> 00:23:18,799
encryption and read work encryption

550
00:23:16,799 --> 00:23:20,879
it's almost same as a bin lock

551
00:23:18,799 --> 00:23:23,200
encryption

552
00:23:20,880 --> 00:23:25,440
also system tablespace and double write

553
00:23:23,200 --> 00:23:28,400
buffers encryption so this is the

554
00:23:25,440 --> 00:23:30,000
thing that is only in the percona server

555
00:23:28,400 --> 00:23:32,720
so there is a system tablespace

556
00:23:30,000 --> 00:23:34,559
encryption in mysql ib data1

557
00:23:32,720 --> 00:23:36,240
and in this tablespace there is also

558
00:23:34,559 --> 00:23:38,399
double right buffer

559
00:23:36,240 --> 00:23:41,200
which is not encrypted in mysql and we

560
00:23:38,400 --> 00:23:43,039
think it's a it's a problem because

561
00:23:41,200 --> 00:23:44,480
all the data before it gets written to

562
00:23:43,039 --> 00:23:47,600
the disk to the

563
00:23:44,480 --> 00:23:50,159
pages to the table spaces goes through

564
00:23:47,600 --> 00:23:51,039
this double write buffer so if it's

565
00:23:50,159 --> 00:23:52,559
unencrypted

566
00:23:51,039 --> 00:23:54,879
it's basically mean you can read

567
00:23:52,559 --> 00:23:57,360
anything even though you have encryption

568
00:23:54,880 --> 00:23:59,840
turned on

569
00:23:57,360 --> 00:24:00,799
mysql ib data is a new tablespace for

570
00:23:59,840 --> 00:24:04,639
storing data

571
00:24:00,799 --> 00:24:08,240
dictionary information so it's also

572
00:24:04,640 --> 00:24:10,640
encrypted and in percona server we have

573
00:24:08,240 --> 00:24:13,120
a parallel double write buffer which you

574
00:24:10,640 --> 00:24:19,840
can also encrypt

575
00:24:13,120 --> 00:24:19,840
so thank you this is for recorder live

576
00:24:23,340 --> 00:24:26,510
[Applause]

577
00:24:42,080 --> 00:24:45,199
so the solution with master key there is

578
00:24:44,480 --> 00:24:47,520
no solution

579
00:24:45,200 --> 00:24:49,279
you can just alter encryption to know

580
00:24:47,520 --> 00:24:51,679
and alter encryption to yes

581
00:24:49,279 --> 00:24:52,720
so it will generate a new tablespace key

582
00:24:51,679 --> 00:24:55,279
but you have to do it

583
00:24:52,720 --> 00:24:55,279
on your own

584
00:24:55,840 --> 00:25:00,158
oh yeah yeah but those are encryption

585
00:24:58,320 --> 00:25:03,840
threads that will

586
00:25:00,159 --> 00:25:05,679
will work not with this two

587
00:25:03,840 --> 00:25:07,199
level encryption that you have table

588
00:25:05,679 --> 00:25:09,279
space key and master key

589
00:25:07,200 --> 00:25:11,440
it will just use key directly from

590
00:25:09,279 --> 00:25:14,640
keying so you can

591
00:25:11,440 --> 00:25:15,840
have new versions of keys and change the

592
00:25:14,640 --> 00:25:17,840
keying

593
00:25:15,840 --> 00:25:19,600
yeah sorry we are out of the time so if

594
00:25:17,840 --> 00:25:29,840
you've got some other questions

595
00:25:19,600 --> 00:25:29,840
please reach out after talks

596
00:25:35,200 --> 00:25:37,279
you

