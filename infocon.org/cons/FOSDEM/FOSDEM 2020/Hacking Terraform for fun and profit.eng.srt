1
00:00:05,520 --> 00:00:08,559
tell us

2
00:00:06,720 --> 00:00:09,840
all the things you should never do with

3
00:00:08,559 --> 00:00:17,920
terraform

4
00:00:09,840 --> 00:00:17,920
thank you

5
00:00:18,480 --> 00:00:23,359
okay now you can hear me anyway thank

6
00:00:21,600 --> 00:00:25,039
you walter for the introduction

7
00:00:23,359 --> 00:00:27,199
and yes in fact there will be some

8
00:00:25,039 --> 00:00:28,960
things which you should not do

9
00:00:27,199 --> 00:00:30,640
but at least you should be aware that

10
00:00:28,960 --> 00:00:32,558
they exist so maybe you

11
00:00:30,640 --> 00:00:34,320
have this actual situation when you

12
00:00:32,558 --> 00:00:38,000
should be doing it

13
00:00:34,320 --> 00:00:41,520
so uh couple words oh my god

14
00:00:38,000 --> 00:00:44,480
of course it never works in this room so

15
00:00:41,520 --> 00:00:44,960
this time without clicker again uh what

16
00:00:44,480 --> 00:00:47,680
i do

17
00:00:44,960 --> 00:00:48,879
uh i'm staying truly active in open

18
00:00:47,680 --> 00:00:51,280
source community

19
00:00:48,879 --> 00:00:53,039
and i'm writing and maintaining a lot of

20
00:00:51,280 --> 00:00:56,320
open source tools

21
00:00:53,039 --> 00:00:58,879
related to terraform aws and i became

22
00:00:56,320 --> 00:01:00,960
aws community hero because i actually

23
00:00:58,879 --> 00:01:02,960
do something in the community giving

24
00:01:00,960 --> 00:01:04,000
talks and trying to figure out how to

25
00:01:02,960 --> 00:01:07,360
make uh

26
00:01:04,000 --> 00:01:09,680
usage of aws and terraform first

27
00:01:07,360 --> 00:01:10,479
question to all of you please raise your

28
00:01:09,680 --> 00:01:13,680
hand if you

29
00:01:10,479 --> 00:01:16,240
are using teleform aws modules

30
00:01:13,680 --> 00:01:16,720
excellent oh my god that's actually much

31
00:01:16,240 --> 00:01:18,559
more

32
00:01:16,720 --> 00:01:20,240
so it means that some people went to

33
00:01:18,560 --> 00:01:22,159
previous year talk as well

34
00:01:20,240 --> 00:01:24,240
because in previous year i talked about

35
00:01:22,159 --> 00:01:25,200
terraform best practices and how to use

36
00:01:24,240 --> 00:01:27,360
it properly

37
00:01:25,200 --> 00:01:28,640
and honestly i am tired of using it a

38
00:01:27,360 --> 00:01:30,880
correct way

39
00:01:28,640 --> 00:01:32,159
okay so this time we will look into how

40
00:01:30,880 --> 00:01:35,199
to

41
00:01:32,159 --> 00:01:37,119
to not use or how you can use and

42
00:01:35,200 --> 00:01:39,439
this should give you some information

43
00:01:37,119 --> 00:01:43,360
about uh possibilities

44
00:01:39,439 --> 00:01:44,798
and uh yeah what i do i actually do

45
00:01:43,360 --> 00:01:46,720
everything related to terraform

46
00:01:44,799 --> 00:01:49,040
consulting and providing

47
00:01:46,720 --> 00:01:49,840
different services running workshops

48
00:01:49,040 --> 00:01:52,240
trainings

49
00:01:49,840 --> 00:01:54,079
and i also like mentorship i mean i'm

50
00:01:52,240 --> 00:01:54,960
exposed to a lot of different codes and

51
00:01:54,079 --> 00:01:57,679
solutions

52
00:01:54,960 --> 00:01:59,759
which i try to aggregate and sometimes

53
00:01:57,680 --> 00:02:02,159
talk about them

54
00:01:59,759 --> 00:02:04,600
you can see my blog where i write

55
00:02:02,159 --> 00:02:06,719
exclusively about terraform and aws on

56
00:02:04,600 --> 00:02:10,560
antondagenko.com

57
00:02:06,719 --> 00:02:12,879
and uh yeah uh this is uh stuff which uh

58
00:02:10,560 --> 00:02:14,720
most of you as i understand are using

59
00:02:12,879 --> 00:02:16,799
which is pretty cool

60
00:02:14,720 --> 00:02:19,040
uh there were seven million downloads so

61
00:02:16,800 --> 00:02:20,319
far and uh i'm sure that amount will be

62
00:02:19,040 --> 00:02:24,000
just increasing because

63
00:02:20,319 --> 00:02:25,519
uh come on so far just one

64
00:02:24,000 --> 00:02:27,760
thousand pull requests and issues

65
00:02:25,520 --> 00:02:29,599
resolved right so we need more issues

66
00:02:27,760 --> 00:02:30,640
more people request more users and more

67
00:02:29,599 --> 00:02:33,760
sponsors

68
00:02:30,640 --> 00:02:35,359
so there is a link um

69
00:02:33,760 --> 00:02:37,518
another project which i'm involved is

70
00:02:35,360 --> 00:02:40,160
cloudcraft which is opinionated and

71
00:02:37,519 --> 00:02:43,360
pretty good way of drawing aws diagrams

72
00:02:40,160 --> 00:02:45,120
in the browser i have 25 minutes and i

73
00:02:43,360 --> 00:02:48,879
have 66 slides left

74
00:02:45,120 --> 00:02:51,680
so we have to go fast okay

75
00:02:48,879 --> 00:02:52,399
what i'm working on is that uh once you

76
00:02:51,680 --> 00:02:54,319
visualize

77
00:02:52,400 --> 00:02:55,840
something in the browser uh you don't

78
00:02:54,319 --> 00:02:57,679
have to repeat yourself when you

79
00:02:55,840 --> 00:02:59,760
actually implement this as code

80
00:02:57,680 --> 00:03:01,040
so modules tf is an open source project

81
00:02:59,760 --> 00:03:03,359
which i work on

82
00:03:01,040 --> 00:03:05,200
uh you can go and use it for free and

83
00:03:03,360 --> 00:03:08,319
see what kind of code and structure

84
00:03:05,200 --> 00:03:10,560
and tools are actually used so

85
00:03:08,319 --> 00:03:12,399
infrastructure infrastructure is all

86
00:03:10,560 --> 00:03:16,080
what is necessary to

87
00:03:12,400 --> 00:03:17,680
run application it's all kind of

88
00:03:16,080 --> 00:03:20,239
computing networking

89
00:03:17,680 --> 00:03:21,200
and other requirements which we have to

90
00:03:20,239 --> 00:03:23,120
maintain

91
00:03:21,200 --> 00:03:24,798
so this is my favorite definition of

92
00:03:23,120 --> 00:03:27,680
infrastructure despite the fact that

93
00:03:24,799 --> 00:03:30,400
this is not coming from wikipedia

94
00:03:27,680 --> 00:03:32,080
and terraform i'm not going to ask who

95
00:03:30,400 --> 00:03:35,200
used terraform because i mean

96
00:03:32,080 --> 00:03:38,159
otherwise you would go to another talk

97
00:03:35,200 --> 00:03:39,920
plan disclaimer everything what i'm

98
00:03:38,159 --> 00:03:43,200
going to talk uh

99
00:03:39,920 --> 00:03:44,559
will probably look uh oh my god why do

100
00:03:43,200 --> 00:03:46,319
you even show this

101
00:03:44,560 --> 00:03:48,239
i don't really care because this is

102
00:03:46,319 --> 00:03:50,879
disclaimer okay

103
00:03:48,239 --> 00:03:52,720
and there are a lot of things a lot of

104
00:03:50,879 --> 00:03:55,599
features of terraform which exist

105
00:03:52,720 --> 00:03:56,959
in documentation in users code but it

106
00:03:55,599 --> 00:04:00,079
doesn't mean that they are good

107
00:03:56,959 --> 00:04:02,239
for example terraform workspaces

108
00:04:00,080 --> 00:04:03,120
and there will be some useful parts as

109
00:04:02,239 --> 00:04:04,959
well in the talk

110
00:04:03,120 --> 00:04:07,200
uh i put them in the beginning so that

111
00:04:04,959 --> 00:04:09,599
you actually get something useful first

112
00:04:07,200 --> 00:04:11,679
and then you figure out that oh my god

113
00:04:09,599 --> 00:04:14,000
terraform can be used as a hammer

114
00:04:11,680 --> 00:04:14,879
because everything except i don't know

115
00:04:14,000 --> 00:04:17,519
is a nail

116
00:04:14,879 --> 00:04:19,279
right so let's use terraform for

117
00:04:17,519 --> 00:04:21,280
absolutely crazy situations

118
00:04:19,279 --> 00:04:23,198
and then we'll look into how terraform

119
00:04:21,279 --> 00:04:23,919
zero twelve actually helps and what does

120
00:04:23,199 --> 00:04:27,199
it do

121
00:04:23,919 --> 00:04:29,198
and how cool is it so first add of

122
00:04:27,199 --> 00:04:30,720
course and let's make terraform with aws

123
00:04:29,199 --> 00:04:32,080
faster for free with sms and

124
00:04:30,720 --> 00:04:35,199
registrations

125
00:04:32,080 --> 00:04:36,960
right who doesn't like to have it so

126
00:04:35,199 --> 00:04:38,800
please use this one

127
00:04:36,960 --> 00:04:40,320
you'll be surprised that if you specify

128
00:04:38,800 --> 00:04:42,880
in the provider that you can

129
00:04:40,320 --> 00:04:44,960
skip credential validation check uh

130
00:04:42,880 --> 00:04:47,280
which region you are using

131
00:04:44,960 --> 00:04:48,159
meta data api check and all of this you

132
00:04:47,280 --> 00:04:51,919
will have

133
00:04:48,160 --> 00:04:55,199
in most cases you will have at least

134
00:04:51,919 --> 00:04:58,080
one no so you will have one instead of

135
00:04:55,199 --> 00:04:59,120
uh 10 api calls and if you are working

136
00:04:58,080 --> 00:05:02,639
on slow network

137
00:04:59,120 --> 00:05:04,240
uh like an airplane this helps a lot

138
00:05:02,639 --> 00:05:05,759
you can work with terraform offline

139
00:05:04,240 --> 00:05:07,520
using this hex

140
00:05:05,759 --> 00:05:10,320
and this is document so this is not hack

141
00:05:07,520 --> 00:05:12,560
this is useful okay uh

142
00:05:10,320 --> 00:05:14,000
a little bit more practical stuff uh

143
00:05:12,560 --> 00:05:16,479
versioning and secrets

144
00:05:14,000 --> 00:05:17,919
i mean everybody uh likes to deal with

145
00:05:16,479 --> 00:05:19,599
secrets i know

146
00:05:17,919 --> 00:05:21,840
so we'll talk about that but first

147
00:05:19,600 --> 00:05:24,160
versioning so version in in terraform

148
00:05:21,840 --> 00:05:26,479
exist in many places and many flavors

149
00:05:24,160 --> 00:05:28,479
we have terraform core which uh

150
00:05:26,479 --> 00:05:31,758
obviously has to be version zero twelve

151
00:05:28,479 --> 00:05:32,719
dot samsung providers uh many from the

152
00:05:31,759 --> 00:05:34,320
community

153
00:05:32,720 --> 00:05:36,240
uh now you can get them from the

154
00:05:34,320 --> 00:05:38,080
registry and

155
00:05:36,240 --> 00:05:39,280
a lot of them are in private because

156
00:05:38,080 --> 00:05:42,320
nobody wants to

157
00:05:39,280 --> 00:05:43,198
publish them and also there are modules

158
00:05:42,320 --> 00:05:46,080
which are

159
00:05:43,199 --> 00:05:47,680
more uh obvious way and more obvious

160
00:05:46,080 --> 00:05:50,000
things to be versioned

161
00:05:47,680 --> 00:05:51,280
most of them are in registry some of

162
00:05:50,000 --> 00:05:54,479
them are private

163
00:05:51,280 --> 00:05:55,919
and so on so when we are talking about

164
00:05:54,479 --> 00:05:59,280
versioning in terraform

165
00:05:55,919 --> 00:06:01,599
uh of telephone core itself there are

166
00:05:59,280 --> 00:06:03,359
not many tools which are useful and

167
00:06:01,600 --> 00:06:04,080
helpful for example if you need to run

168
00:06:03,360 --> 00:06:06,800
terraform

169
00:06:04,080 --> 00:06:07,280
on your local machine tf and is one of

170
00:06:06,800 --> 00:06:10,400
these two

171
00:06:07,280 --> 00:06:14,559
which you run and switch similar

172
00:06:10,400 --> 00:06:14,560
as you do with ruby and for example

173
00:06:14,639 --> 00:06:19,280
if you have to specify version of

174
00:06:17,840 --> 00:06:21,039
terraform as well as version of

175
00:06:19,280 --> 00:06:23,520
providers that's really good

176
00:06:21,039 --> 00:06:25,280
thing that you are starting to look at

177
00:06:23,520 --> 00:06:28,479
your code assumption what will actually

178
00:06:25,280 --> 00:06:29,840
leave longer than you quit right so

179
00:06:28,479 --> 00:06:32,960
you're

180
00:06:29,840 --> 00:06:34,719
worried about future and the point of

181
00:06:32,960 --> 00:06:37,919
versioning of telephone providers is

182
00:06:34,720 --> 00:06:41,199
that when you specify your dependencies

183
00:06:37,919 --> 00:06:43,039
and they will be combined later on and

184
00:06:41,199 --> 00:06:45,039
you cannot override them from the parent

185
00:06:43,039 --> 00:06:48,479
modules which you use that's why

186
00:06:45,039 --> 00:06:51,680
good terraform modules are never using

187
00:06:48,479 --> 00:06:53,919
a provider block inside of module itself

188
00:06:51,680 --> 00:06:56,240
always instant generated at the highest

189
00:06:53,919 --> 00:06:59,359
level

190
00:06:56,240 --> 00:07:02,240
and there are many tools which

191
00:06:59,360 --> 00:07:04,240
try to do similar stuff for modules

192
00:07:02,240 --> 00:07:06,240
honestly all of them failed in my

193
00:07:04,240 --> 00:07:08,160
opinion even the one which i'm talking

194
00:07:06,240 --> 00:07:10,960
about now because it worked

195
00:07:08,160 --> 00:07:12,720
on october now it doesn't work the point

196
00:07:10,960 --> 00:07:15,919
is that it is really hard to make

197
00:07:12,720 --> 00:07:17,919
versioning correct for example as it

198
00:07:15,919 --> 00:07:19,440
says here support ranges for modules

199
00:07:17,919 --> 00:07:22,159
from telephone registry

200
00:07:19,440 --> 00:07:22,639
seems to be the case uh if the latest

201
00:07:22,160 --> 00:07:25,919
digit

202
00:07:22,639 --> 00:07:28,800
is less than than nine

203
00:07:25,919 --> 00:07:30,479
ten uh is not more than nine according

204
00:07:28,800 --> 00:07:33,599
to this tool

205
00:07:30,479 --> 00:07:33,599
so i was surprised

206
00:07:34,639 --> 00:07:39,039
and overall the flow looks like that is

207
00:07:38,240 --> 00:07:41,120
that we first

208
00:07:39,039 --> 00:07:42,800
set up version for the terraform then we

209
00:07:41,120 --> 00:07:44,800
figure out which version of

210
00:07:42,800 --> 00:07:46,960
provider of modules we need to do and

211
00:07:44,800 --> 00:07:48,319
then we use terraform init to download

212
00:07:46,960 --> 00:07:50,479
providers which satisfy

213
00:07:48,319 --> 00:07:52,000
modules requirements which we have and

214
00:07:50,479 --> 00:07:53,359
then we use terraform as normally

215
00:07:52,000 --> 00:07:57,039
terraform plan apply

216
00:07:53,360 --> 00:07:58,000
destroy if you are into automation and

217
00:07:57,039 --> 00:08:01,199
see icd

218
00:07:58,000 --> 00:08:04,000
things you may look into the panda board

219
00:08:01,199 --> 00:08:05,759
which still has ongoing issue related to

220
00:08:04,000 --> 00:08:07,199
terraform 0 12 syntax

221
00:08:05,759 --> 00:08:09,120
but from what i understand it will be

222
00:08:07,199 --> 00:08:10,000
resolved sooner or later because the

223
00:08:09,120 --> 00:08:12,800
amount of

224
00:08:10,000 --> 00:08:13,680
disappointed people is growing very fast

225
00:08:12,800 --> 00:08:16,720
you can go there

226
00:08:13,680 --> 00:08:18,720
and upvote it yourself

227
00:08:16,720 --> 00:08:20,639
uh secrets in terraform it's still a

228
00:08:18,720 --> 00:08:21,759
problem with terraform zero twelve uh

229
00:08:20,639 --> 00:08:25,039
not a big surprise

230
00:08:21,759 --> 00:08:27,120
uh telephone core uh has not done

231
00:08:25,039 --> 00:08:28,080
everything what is necessary but let's

232
00:08:27,120 --> 00:08:29,919
see what we can do

233
00:08:28,080 --> 00:08:31,599
so first of all there are two types of

234
00:08:29,919 --> 00:08:34,319
secrets which we're talking about

235
00:08:31,599 --> 00:08:35,598
the first one is uh inside of plan apply

236
00:08:34,320 --> 00:08:37,440
and output

237
00:08:35,599 --> 00:08:40,080
and then the second one which is still

238
00:08:37,440 --> 00:08:42,640
this uh no changes at all is

239
00:08:40,080 --> 00:08:44,480
terraform state so whatever you put will

240
00:08:42,640 --> 00:08:47,360
be in state

241
00:08:44,480 --> 00:08:48,399
uh first of all when we specify uh that

242
00:08:47,360 --> 00:08:51,200
we want to

243
00:08:48,399 --> 00:08:51,600
uh output password we may specify that

244
00:08:51,200 --> 00:08:53,680
we

245
00:08:51,600 --> 00:08:54,720
want to use sensitive through then it

246
00:08:53,680 --> 00:08:57,519
will be uh

247
00:08:54,720 --> 00:08:58,000
written as sensitive pretty good and

248
00:08:57,519 --> 00:09:01,519
pretty

249
00:08:58,000 --> 00:09:04,320
helpful sometimes if we want to use

250
00:09:01,519 --> 00:09:05,920
actually a random string and we want to

251
00:09:04,320 --> 00:09:08,240
generate this random password and then

252
00:09:05,920 --> 00:09:10,319
we use it somewhere else

253
00:09:08,240 --> 00:09:12,160
quite recently there was a new resource

254
00:09:10,320 --> 00:09:14,000
which is called random password

255
00:09:12,160 --> 00:09:15,360
and the cool part of it is that it does

256
00:09:14,000 --> 00:09:18,800
not output id

257
00:09:15,360 --> 00:09:21,839
of the password itself as console output

258
00:09:18,800 --> 00:09:22,719
which means that we can run it in ci and

259
00:09:21,839 --> 00:09:25,440
it will not be

260
00:09:22,720 --> 00:09:28,080
available for anyone else so check out

261
00:09:25,440 --> 00:09:30,800
random password resource

262
00:09:28,080 --> 00:09:32,160
and overall the solutions are very

263
00:09:30,800 --> 00:09:35,040
specific to the provider

264
00:09:32,160 --> 00:09:36,560
and if we are talking about aws there

265
00:09:35,040 --> 00:09:38,399
are a lot of options

266
00:09:36,560 --> 00:09:40,079
uh related to the provider

267
00:09:38,399 --> 00:09:40,800
implementation of how to deal with

268
00:09:40,080 --> 00:09:44,000
secrets

269
00:09:40,800 --> 00:09:46,719
and how to encrypt them somewhere uh

270
00:09:44,000 --> 00:09:48,720
it is uh it is pretty big topic in

271
00:09:46,720 --> 00:09:50,880
general

272
00:09:48,720 --> 00:09:52,640
so if you have uh some money let's say

273
00:09:50,880 --> 00:09:55,439
from zero to seventy dollars

274
00:09:52,640 --> 00:09:56,160
you may get benefit from telephone cloud

275
00:09:55,440 --> 00:09:59,760
and uh

276
00:09:56,160 --> 00:10:02,800
you will be able to have secrets uh

277
00:09:59,760 --> 00:10:04,640
uh managed using terraform cloud and uh

278
00:10:02,800 --> 00:10:07,120
your state file will be also

279
00:10:04,640 --> 00:10:08,240
stored on telephone cloud so you

280
00:10:07,120 --> 00:10:10,079
actually

281
00:10:08,240 --> 00:10:11,920
will not have so much problem with

282
00:10:10,079 --> 00:10:14,719
secrets but this is only if you have

283
00:10:11,920 --> 00:10:15,120
some money if you don't have money uh

284
00:10:14,720 --> 00:10:18,480
you

285
00:10:15,120 --> 00:10:20,800
can use tool like secret hub i

286
00:10:18,480 --> 00:10:21,600
think it is one of the best tool out

287
00:10:20,800 --> 00:10:23,839
there i'm

288
00:10:21,600 --> 00:10:24,720
surprised that uh not many people are

289
00:10:23,839 --> 00:10:27,519
talking about it

290
00:10:24,720 --> 00:10:29,680
including uh employees i don't know why

291
00:10:27,519 --> 00:10:32,880
but i'm telling you that this is cool

292
00:10:29,680 --> 00:10:34,000
so check it out it has support for tfrs

293
00:10:32,880 --> 00:10:36,880
tf state

294
00:10:34,000 --> 00:10:37,760
it's another resource uh it's another

295
00:10:36,880 --> 00:10:40,000
provider

296
00:10:37,760 --> 00:10:41,839
in terraform uh which you have to

297
00:10:40,000 --> 00:10:46,560
include and it will be

298
00:10:41,839 --> 00:10:49,839
dealing with secrets so secret hub

299
00:10:46,560 --> 00:10:52,319
is documentation so overall

300
00:10:49,839 --> 00:10:53,760
uh versioning is doable secrets still

301
00:10:52,320 --> 00:10:57,200
problems secret hub looks

302
00:10:53,760 --> 00:11:00,880
good okay that was the end of

303
00:10:57,200 --> 00:11:01,600
useful information okay now let's look

304
00:11:00,880 --> 00:11:04,959
about

305
00:11:01,600 --> 00:11:08,480
what is actually a hammer right i mean

306
00:11:04,959 --> 00:11:11,040
hammer looks cool right we

307
00:11:08,480 --> 00:11:11,760
we know the terraform is powerful let's

308
00:11:11,040 --> 00:11:15,040
use for

309
00:11:11,760 --> 00:11:17,200
pretty much anything means anything

310
00:11:15,040 --> 00:11:18,640
so let's manage resources but don't care

311
00:11:17,200 --> 00:11:20,640
about state

312
00:11:18,640 --> 00:11:22,240
and uh what does infrastructure glue

313
00:11:20,640 --> 00:11:25,920
terraform mean

314
00:11:22,240 --> 00:11:29,120
and uh how to manage any resource on aws

315
00:11:25,920 --> 00:11:30,399
uh using terraform and how to do

316
00:11:29,120 --> 00:11:33,920
application deployment

317
00:11:30,399 --> 00:11:35,200
and how to actually use uh dynamic

318
00:11:33,920 --> 00:11:38,959
terraform modules

319
00:11:35,200 --> 00:11:38,959
and what does actually sheam means

320
00:11:39,040 --> 00:11:42,079
so let's look in the first problem how

321
00:11:41,040 --> 00:11:44,319
to create resources

322
00:11:42,079 --> 00:11:46,079
and don't worry about their state if you

323
00:11:44,320 --> 00:11:48,240
are coming from infrastructure

324
00:11:46,079 --> 00:11:49,199
you like infrastructure management you

325
00:11:48,240 --> 00:11:51,279
get used to

326
00:11:49,200 --> 00:11:52,560
there is resource there is configuration

327
00:11:51,279 --> 00:11:55,200
or definition

328
00:11:52,560 --> 00:11:57,518
there is state and we have to take care

329
00:11:55,200 --> 00:11:59,360
about this tf state file very carefully

330
00:11:57,519 --> 00:12:01,839
because we don't want to lose it

331
00:11:59,360 --> 00:12:02,959
it's really sensitive and it's all these

332
00:12:01,839 --> 00:12:05,360
scatter things

333
00:12:02,959 --> 00:12:07,119
in most cases it's right or what about

334
00:12:05,360 --> 00:12:10,320
if we want to use terraform for

335
00:12:07,120 --> 00:12:13,040
just right only operations or

336
00:12:10,320 --> 00:12:14,959
for example we have some tooling which

337
00:12:13,040 --> 00:12:17,120
allow us to generate reform

338
00:12:14,959 --> 00:12:18,479
configuration files and we want to

339
00:12:17,120 --> 00:12:21,440
manage data

340
00:12:18,480 --> 00:12:23,120
which we populate console key value or

341
00:12:21,440 --> 00:12:26,320
we just want to upload

342
00:12:23,120 --> 00:12:30,079
and overwrite any amount of

343
00:12:26,320 --> 00:12:33,040
files on s3 or any other reason there

344
00:12:30,079 --> 00:12:34,079
there are a lot of different reasons i'm

345
00:12:33,040 --> 00:12:36,160
putting this

346
00:12:34,079 --> 00:12:38,239
as an example yes there is a back-end

347
00:12:36,160 --> 00:12:39,760
type called mem

348
00:12:38,240 --> 00:12:41,360
unfortunately i cannot put link to

349
00:12:39,760 --> 00:12:42,240
documentation because documentation

350
00:12:41,360 --> 00:12:47,120
doesn't exist

351
00:12:42,240 --> 00:12:48,720
and nobody wants you to use it so

352
00:12:47,120 --> 00:12:50,639
i encourage you to check this out it's

353
00:12:48,720 --> 00:12:52,399
really helpful if you are creating

354
00:12:50,639 --> 00:12:54,639
something what you don't want

355
00:12:52,399 --> 00:12:56,160
to worry about for example it's your

356
00:12:54,639 --> 00:12:59,040
test environment which you

357
00:12:56,160 --> 00:12:59,760
know certainly will never touch anymore

358
00:12:59,040 --> 00:13:02,480
so that's

359
00:12:59,760 --> 00:13:03,360
great example of using inman it will

360
00:13:02,480 --> 00:13:06,480
make your

361
00:13:03,360 --> 00:13:08,399
uh work with terraform faster of course

362
00:13:06,480 --> 00:13:09,360
so there is no state so every time there

363
00:13:08,399 --> 00:13:11,360
will be

364
00:13:09,360 --> 00:13:12,480
a creation of resources there is no way

365
00:13:11,360 --> 00:13:15,360
to change them

366
00:13:12,480 --> 00:13:17,440
but in many cases it helps

367
00:13:15,360 --> 00:13:20,800
infrastructure glue terraform

368
00:13:17,440 --> 00:13:23,920
well some time ago we figure out that

369
00:13:20,800 --> 00:13:26,240
a lot of apis exist terraform has a

370
00:13:23,920 --> 00:13:29,199
unified way to manage all of them

371
00:13:26,240 --> 00:13:31,760
like you can manage resources on your

372
00:13:29,200 --> 00:13:33,440
file system to create them to read

373
00:13:31,760 --> 00:13:35,040
create archives or call different

374
00:13:33,440 --> 00:13:38,399
scripts clies

375
00:13:35,040 --> 00:13:42,000
rest api make http calls and

376
00:13:38,399 --> 00:13:44,399
many many different things and i see

377
00:13:42,000 --> 00:13:45,120
not many people are actually taking it

378
00:13:44,399 --> 00:13:47,440
seriously

379
00:13:45,120 --> 00:13:48,480
because what what it gives you is you

380
00:13:47,440 --> 00:13:51,040
have a way

381
00:13:48,480 --> 00:13:52,399
to interact with this uh apis or with

382
00:13:51,040 --> 00:13:55,839
these

383
00:13:52,399 --> 00:13:58,399
providers uh in very standardized way

384
00:13:55,839 --> 00:13:59,120
for example this code shows that we can

385
00:13:58,399 --> 00:14:02,240
connect

386
00:13:59,120 --> 00:14:04,800
different type of resources and create

387
00:14:02,240 --> 00:14:06,240
files make an archive for them and

388
00:14:04,800 --> 00:14:10,160
upload this archive

389
00:14:06,240 --> 00:14:13,040
into s3 bucket so first of all we use

390
00:14:10,160 --> 00:14:14,959
features of terraform 012 to iterate

391
00:14:13,040 --> 00:14:18,240
through lists and make a list of

392
00:14:14,959 --> 00:14:21,040
users for example and then we make

393
00:14:18,240 --> 00:14:22,240
files in specific location on our file

394
00:14:21,040 --> 00:14:24,319
system

395
00:14:22,240 --> 00:14:26,800
then we make an archive from that

396
00:14:24,320 --> 00:14:30,320
directory and we upload this archive

397
00:14:26,800 --> 00:14:31,359
into s3 bucket so all of this is 24

398
00:14:30,320 --> 00:14:34,639
lines

399
00:14:31,360 --> 00:14:38,079
which of course can be uh updated

400
00:14:34,639 --> 00:14:39,360
and you can use cli or aws cli or you

401
00:14:38,079 --> 00:14:41,040
can use

402
00:14:39,360 --> 00:14:42,480
any other tool or you can write shell

403
00:14:41,040 --> 00:14:45,279
script in one line

404
00:14:42,480 --> 00:14:46,480
but the point is that uh of this talk is

405
00:14:45,279 --> 00:14:48,560
not to show that hey

406
00:14:46,480 --> 00:14:50,800
the same you can do in better way no

407
00:14:48,560 --> 00:14:53,599
terraform can do this

408
00:14:50,800 --> 00:14:54,479
so how to manage any type of aws

409
00:14:53,600 --> 00:14:56,399
resource

410
00:14:54,480 --> 00:14:58,000
if you are coming from aws you know

411
00:14:56,399 --> 00:15:01,040
cloud formation right

412
00:14:58,000 --> 00:15:03,360
many people know cloud formation okay

413
00:15:01,040 --> 00:15:05,199
uh cloud formation does not support a

414
00:15:03,360 --> 00:15:07,600
lot like it doesn't support

415
00:15:05,199 --> 00:15:09,040
everything and terraform does not

416
00:15:07,600 --> 00:15:12,079
support everything either

417
00:15:09,040 --> 00:15:14,959
but in total they support pretty much

418
00:15:12,079 --> 00:15:15,279
everything if not everything then you

419
00:15:14,959 --> 00:15:17,760
have

420
00:15:15,279 --> 00:15:18,639
two options you have to open pull

421
00:15:17,760 --> 00:15:21,839
requests to

422
00:15:18,639 --> 00:15:24,160
aws provider and then wait and wait

423
00:15:21,839 --> 00:15:25,199
and wait meanwhile you have to use your

424
00:15:24,160 --> 00:15:26,800
own fork

425
00:15:25,199 --> 00:15:28,800
and i'm quite sure that there are people

426
00:15:26,800 --> 00:15:29,758
who open pull requests to terraform aws

427
00:15:28,800 --> 00:15:32,959
provider

428
00:15:29,759 --> 00:15:34,480
and uh you are still waiting for pull

429
00:15:32,959 --> 00:15:37,599
requests to be merged

430
00:15:34,480 --> 00:15:38,639
right yeah i can see some faces so yes

431
00:15:37,600 --> 00:15:40,560
it takes some time

432
00:15:38,639 --> 00:15:42,639
it takes some time and meanwhile you

433
00:15:40,560 --> 00:15:45,279
have to use your own fork

434
00:15:42,639 --> 00:15:46,880
but even worse situation is when you

435
00:15:45,279 --> 00:15:50,320
have some stuff developed

436
00:15:46,880 --> 00:15:53,279
in cloud formation because that's

437
00:15:50,320 --> 00:15:54,160
defaulting in aws back then even still

438
00:15:53,279 --> 00:15:56,639
now

439
00:15:54,160 --> 00:15:57,680
and uh you want to move to something

440
00:15:56,639 --> 00:15:59,600
else but

441
00:15:57,680 --> 00:16:01,839
you was told that oh you cannot to

442
00:15:59,600 --> 00:16:04,639
delete this database or s3 bucket

443
00:16:01,839 --> 00:16:05,279
so what can you do so that you have to

444
00:16:04,639 --> 00:16:08,480
use

445
00:16:05,279 --> 00:16:10,160
better tools but you at the same time

446
00:16:08,480 --> 00:16:12,240
cannot recreate resources

447
00:16:10,160 --> 00:16:13,279
this is where the requirement is if you

448
00:16:12,240 --> 00:16:16,880
could create uh

449
00:16:13,279 --> 00:16:16,880
and delete that's easy

450
00:16:17,040 --> 00:16:20,959
so the solution for that one is that you

451
00:16:18,880 --> 00:16:24,720
first create cloud formation stack

452
00:16:20,959 --> 00:16:27,359
and you specify a deletion policy retain

453
00:16:24,720 --> 00:16:28,880
so you have a cloud formation stack

454
00:16:27,360 --> 00:16:31,440
where deletion policy

455
00:16:28,880 --> 00:16:32,480
retain means that this resource will not

456
00:16:31,440 --> 00:16:34,880
be deleted

457
00:16:32,480 --> 00:16:37,360
uh after cloud formation stack is

458
00:16:34,880 --> 00:16:38,399
deleted this means that it's not managed

459
00:16:37,360 --> 00:16:41,440
by anything else

460
00:16:38,399 --> 00:16:43,759
literally then you delete cloud

461
00:16:41,440 --> 00:16:47,519
formation stack and you import this

462
00:16:43,759 --> 00:16:50,800
retained resource to terraform

463
00:16:47,519 --> 00:16:51,440
it looks it looks like this is that you

464
00:16:50,800 --> 00:16:54,800
have to

465
00:16:51,440 --> 00:16:57,040
write codes describing these resources

466
00:16:54,800 --> 00:16:58,079
like in this case s3 bucket and you have

467
00:16:57,040 --> 00:17:01,599
to import it

468
00:16:58,079 --> 00:17:03,680
and you have to see that plan is happier

469
00:17:01,600 --> 00:17:04,799
because you customize the resource

470
00:17:03,680 --> 00:17:06,480
configuration

471
00:17:04,799 --> 00:17:08,400
and there is nothing else to change so

472
00:17:06,480 --> 00:17:11,439
what you have now is a

473
00:17:08,400 --> 00:17:14,160
resource is managed

474
00:17:11,439 --> 00:17:18,720
using terraform and it does not have any

475
00:17:14,160 --> 00:17:20,880
relation with cloud formation anymore

476
00:17:18,720 --> 00:17:22,559
and if there are some situations which

477
00:17:20,880 --> 00:17:25,919
you cannot manage

478
00:17:22,559 --> 00:17:28,720
using cloud formation or using terraform

479
00:17:25,919 --> 00:17:29,440
you can still use new resource and aws

480
00:17:28,720 --> 00:17:31,679
cli

481
00:17:29,440 --> 00:17:34,640
aws cli still supports significant

482
00:17:31,679 --> 00:17:38,880
amount of resources

483
00:17:34,640 --> 00:17:42,960
even registration domains if you want

484
00:17:38,880 --> 00:17:45,120
and yeah of course it's never too late

485
00:17:42,960 --> 00:17:46,080
so application deployment i have a

486
00:17:45,120 --> 00:17:49,678
little bit time

487
00:17:46,080 --> 00:17:51,840
and i want to ask you what was before

488
00:17:49,679 --> 00:17:53,600
i mean on this conference you've heard

489
00:17:51,840 --> 00:17:54,320
about immutable infrastructure more than

490
00:17:53,600 --> 00:17:56,959
once

491
00:17:54,320 --> 00:17:58,639
you all know what is packer and docker

492
00:17:56,960 --> 00:18:01,360
smoker

493
00:17:58,640 --> 00:18:02,960
there are many different tools out there

494
00:18:01,360 --> 00:18:05,520
but what was before

495
00:18:02,960 --> 00:18:07,200
like who tell like how did you do before

496
00:18:05,520 --> 00:18:09,200
all of this let's say

497
00:18:07,200 --> 00:18:10,240
maybe in some places you still do it

498
00:18:09,200 --> 00:18:14,400
like i did

499
00:18:10,240 --> 00:18:17,520
uh and i still do it for summer projects

500
00:18:14,400 --> 00:18:19,200
so what is like anyways how you do this

501
00:18:17,520 --> 00:18:20,080
don't mention anything fancy like

502
00:18:19,200 --> 00:18:22,320
immutable

503
00:18:20,080 --> 00:18:25,120
of course no no kubernetes please no

504
00:18:22,320 --> 00:18:25,120
packer docker

505
00:18:26,840 --> 00:18:32,399
what yeah scp

506
00:18:29,600 --> 00:18:33,120
scp is pretty cool yeah sap is supported

507
00:18:32,400 --> 00:18:35,440
uh

508
00:18:33,120 --> 00:18:36,639
quite successfully that's too boring i

509
00:18:35,440 --> 00:18:39,360
would say

510
00:18:36,640 --> 00:18:40,400
what about this one terraform and get

511
00:18:39,360 --> 00:18:42,399
pool

512
00:18:40,400 --> 00:18:44,000
isn't it cool that you can use terraform

513
00:18:42,400 --> 00:18:47,440
to actually

514
00:18:44,000 --> 00:18:48,960
use uh remote execution to connect to

515
00:18:47,440 --> 00:18:51,120
the ins to an instance

516
00:18:48,960 --> 00:18:53,679
which is not managed of course anywhere

517
00:18:51,120 --> 00:18:57,600
and you run git pool on that machine

518
00:18:53,679 --> 00:19:00,400
isn't it future

519
00:18:57,600 --> 00:19:02,559
hopefully not but still you can describe

520
00:19:00,400 --> 00:19:05,760
this resource you are kind of one way

521
00:19:02,559 --> 00:19:08,160
into into 21st century and

522
00:19:05,760 --> 00:19:10,559
uh then you say oh no now i need to

523
00:19:08,160 --> 00:19:12,240
redeploy this so you run terrafontaine

524
00:19:10,559 --> 00:19:14,399
you attain that resource and you run the

525
00:19:12,240 --> 00:19:15,280
play apply again and then you run it

526
00:19:14,400 --> 00:19:17,280
again

527
00:19:15,280 --> 00:19:19,520
uh i think it's brilliant because you

528
00:19:17,280 --> 00:19:21,280
are almost there you start to understand

529
00:19:19,520 --> 00:19:23,679
that oh yeah there is a

530
00:19:21,280 --> 00:19:26,399
gap between this process but terraform

531
00:19:23,679 --> 00:19:29,520
can breach them

532
00:19:26,400 --> 00:19:33,919
so and uh one of the most complicated uh

533
00:19:29,520 --> 00:19:36,720
feature or not even feature but

534
00:19:33,919 --> 00:19:37,520
scenario i would say how to use

535
00:19:36,720 --> 00:19:40,640
terraform

536
00:19:37,520 --> 00:19:42,080
uh for things which kind of was not

537
00:19:40,640 --> 00:19:45,200
designed for

538
00:19:42,080 --> 00:19:48,000
and this is uh called uh like in that

539
00:19:45,200 --> 00:19:49,760
web browser it's called polyfill where

540
00:19:48,000 --> 00:19:52,480
polyfill is code that

541
00:19:49,760 --> 00:19:54,799
implements a feature of web browser that

542
00:19:52,480 --> 00:19:58,799
do not support the feature

543
00:19:54,799 --> 00:20:01,600
uh in terms of terraform uh

544
00:19:58,799 --> 00:20:02,639
we all wanted to have something what uh

545
00:20:01,600 --> 00:20:05,039
terraform

546
00:20:02,640 --> 00:20:06,080
if we go to terraform open issues and we

547
00:20:05,039 --> 00:20:08,559
see that

548
00:20:06,080 --> 00:20:09,280
there are hundreds of upvotes or even

549
00:20:08,559 --> 00:20:11,520
some

550
00:20:09,280 --> 00:20:13,600
disappointed customers say like oh this

551
00:20:11,520 --> 00:20:16,080
feature is not supported we cannot

552
00:20:13,600 --> 00:20:17,360
we cannot use terraform because it's uh

553
00:20:16,080 --> 00:20:19,760
it's too bad

554
00:20:17,360 --> 00:20:20,879
what can we do for them for example for

555
00:20:19,760 --> 00:20:22,960
reach with modules

556
00:20:20,880 --> 00:20:24,880
like many people wanted to use it i'm

557
00:20:22,960 --> 00:20:26,880
sure because i go to github issues and

558
00:20:24,880 --> 00:20:30,559
they see so many upvotes

559
00:20:26,880 --> 00:20:33,280
or even more uh like historically

560
00:20:30,559 --> 00:20:35,760
people wanted to have reusable module

561
00:20:33,280 --> 00:20:38,240
that they wanted to have different

562
00:20:35,760 --> 00:20:39,919
values inside of ignore changes for

563
00:20:38,240 --> 00:20:41,600
example an auto-scaling group

564
00:20:39,919 --> 00:20:43,760
i still have debate between people who

565
00:20:41,600 --> 00:20:45,918
said like oh we don't have to specify a

566
00:20:43,760 --> 00:20:49,840
minimum maximum desired capacity

567
00:20:45,919 --> 00:20:50,320
as required values because we wanted to

568
00:20:49,840 --> 00:20:52,799
have

569
00:20:50,320 --> 00:20:53,439
up and down like scale uh in and scale

570
00:20:52,799 --> 00:20:55,918
out

571
00:20:53,440 --> 00:20:59,280
but at the same time other group of

572
00:20:55,919 --> 00:21:01,919
people say that this has to be fixed

573
00:20:59,280 --> 00:21:03,039
and there is no way for me as a

574
00:21:01,919 --> 00:21:05,120
maintainer to

575
00:21:03,039 --> 00:21:07,200
specify that ignore changes can be

576
00:21:05,120 --> 00:21:10,000
parameterized based on what you need

577
00:21:07,200 --> 00:21:12,159
because inside of life cycle block i

578
00:21:10,000 --> 00:21:14,000
cannot use variables

579
00:21:12,159 --> 00:21:15,200
actually i cannot use variables in many

580
00:21:14,000 --> 00:21:17,600
other places

581
00:21:15,200 --> 00:21:19,360
but in life cycle ignore changes this is

582
00:21:17,600 --> 00:21:21,760
one of most obvious

583
00:21:19,360 --> 00:21:23,199
second example is prevent destroy uh

584
00:21:21,760 --> 00:21:26,158
inside of life cycle

585
00:21:23,200 --> 00:21:27,520
we wanted to have uh this optional like

586
00:21:26,159 --> 00:21:29,120
now i'm entering

587
00:21:27,520 --> 00:21:31,120
pseudomode this means that prevent

588
00:21:29,120 --> 00:21:33,439
destroy should be false

589
00:21:31,120 --> 00:21:34,879
okay fine so this feature is not

590
00:21:33,440 --> 00:21:36,720
supported in terraform

591
00:21:34,880 --> 00:21:39,600
i think it will be supported in the near

592
00:21:36,720 --> 00:21:42,480
future to be honest but uh

593
00:21:39,600 --> 00:21:42,879
we'll see and another example is when we

594
00:21:42,480 --> 00:21:45,679
have

595
00:21:42,880 --> 00:21:47,120
a so-called self-service i this is a

596
00:21:45,679 --> 00:21:48,000
feature which i have hardest time to

597
00:21:47,120 --> 00:21:50,158
explain and

598
00:21:48,000 --> 00:21:52,720
even figure out this myself to be honest

599
00:21:50,159 --> 00:21:54,240
but i want to have module content to be

600
00:21:52,720 --> 00:21:57,200
based on the input

601
00:21:54,240 --> 00:21:57,679
to the module itself not just values of

602
00:21:57,200 --> 00:21:59,760
the

603
00:21:57,679 --> 00:22:03,200
of resources has to be parameterized but

604
00:21:59,760 --> 00:22:06,320
the content of the module itself

605
00:22:03,200 --> 00:22:07,840
if we look into this module block where

606
00:22:06,320 --> 00:22:11,039
we can see that uh

607
00:22:07,840 --> 00:22:13,918
https might reform.tf

608
00:22:11,039 --> 00:22:17,280
is actually a website where the source

609
00:22:13,919 --> 00:22:20,480
code of the module is generated based on

610
00:22:17,280 --> 00:22:24,320
results submitted from the form

611
00:22:20,480 --> 00:22:26,080
this means that inside of zip archive

612
00:22:24,320 --> 00:22:27,678
which is going to be produced by mitre

613
00:22:26,080 --> 00:22:30,080
reform.tf

614
00:22:27,679 --> 00:22:30,799
there will be content which is very

615
00:22:30,080 --> 00:22:34,158
unique

616
00:22:30,799 --> 00:22:37,840
for example i can embed some secret uh

617
00:22:34,159 --> 00:22:40,720
stuff based on requests

618
00:22:37,840 --> 00:22:42,720
i receive or i can generate infinite

619
00:22:40,720 --> 00:22:44,960
amount of combinations i can use

620
00:22:42,720 --> 00:22:47,039
full features of programming language i

621
00:22:44,960 --> 00:22:50,720
can even use polum to generate terraform

622
00:22:47,039 --> 00:22:54,320
code inside of that http response

623
00:22:50,720 --> 00:22:56,960
if i want but the point is that uh

624
00:22:54,320 --> 00:22:57,840
this is a place where we can add uh

625
00:22:56,960 --> 00:23:01,039
so-called

626
00:22:57,840 --> 00:23:01,039
shim to the terraform

627
00:23:02,799 --> 00:23:06,559
if this was not enough sean from

628
00:23:05,679 --> 00:23:08,559
hashicorp

629
00:23:06,559 --> 00:23:11,678
is a good guy he published workshop

630
00:23:08,559 --> 00:23:14,240
puzzles there are i think five of them

631
00:23:11,679 --> 00:23:16,240
which i didn't list here you can go to

632
00:23:14,240 --> 00:23:18,080
that repository and try to solve them

633
00:23:16,240 --> 00:23:21,039
yourself and you will see that

634
00:23:18,080 --> 00:23:22,480
terraform is a pretty cool tool to do

635
00:23:21,039 --> 00:23:25,360
random stuff

636
00:23:22,480 --> 00:23:26,159
when i say random i actually mean random

637
00:23:25,360 --> 00:23:30,080
for example

638
00:23:26,159 --> 00:23:30,799
you you may want to orchestrate printers

639
00:23:30,080 --> 00:23:34,799
remotely

640
00:23:30,799 --> 00:23:38,000
using terraform i mean yes it has

641
00:23:34,799 --> 00:23:38,799
http interface so terraform can talk

642
00:23:38,000 --> 00:23:42,799
http

643
00:23:38,799 --> 00:23:44,960
so you see it works um

644
00:23:42,799 --> 00:23:47,679
and i was told by one guy who actually

645
00:23:44,960 --> 00:23:50,799
do this for work because he works as a

646
00:23:47,679 --> 00:23:51,760
system administrator remotely and he

647
00:23:50,799 --> 00:23:54,480
says that

648
00:23:51,760 --> 00:23:55,039
sometimes he has to do like most of his

649
00:23:54,480 --> 00:23:57,200
job is

650
00:23:55,039 --> 00:23:58,799
with terraform and proper usage of it

651
00:23:57,200 --> 00:24:02,480
but also he has to

652
00:23:58,799 --> 00:24:06,639
do some i.t stuff without going to work

653
00:24:02,480 --> 00:24:09,520
which is good so terraform zero twelve

654
00:24:06,640 --> 00:24:11,120
uh what does it mean for us uh please

655
00:24:09,520 --> 00:24:14,158
raise your hand if you

656
00:24:11,120 --> 00:24:17,199
are still using uh zero eleven and uh

657
00:24:14,159 --> 00:24:20,960
want to move uh to zero twelve like

658
00:24:17,200 --> 00:24:23,600
immediately why this part of the room

659
00:24:20,960 --> 00:24:26,240
really okay i've lost this part of the

660
00:24:23,600 --> 00:24:32,158
room do you guys know what is 0-12

661
00:24:26,240 --> 00:24:35,200
okay good so yeah talk to them

662
00:24:32,159 --> 00:24:37,120
no but uh uh what does it mean for us so

663
00:24:35,200 --> 00:24:39,120
there are at least two groups of people

664
00:24:37,120 --> 00:24:41,120
uh terraform developers and terraform

665
00:24:39,120 --> 00:24:45,199
users and

666
00:24:41,120 --> 00:24:47,520
the reason for this separation is quite

667
00:24:45,200 --> 00:24:49,120
strict i would say is that we don't have

668
00:24:47,520 --> 00:24:51,918
to expand the term of

669
00:24:49,120 --> 00:24:52,239
full stack developer even more like you

670
00:24:51,919 --> 00:24:55,279
knew

671
00:24:52,240 --> 00:24:57,840
html javascript php

672
00:24:55,279 --> 00:24:58,320
now java oh there is devops so devops as

673
00:24:57,840 --> 00:25:00,000
well

674
00:24:58,320 --> 00:25:01,840
and terraform as well that's too much

675
00:25:00,000 --> 00:25:04,240
there will be no quality

676
00:25:01,840 --> 00:25:05,678
so if we we will be constantly expanding

677
00:25:04,240 --> 00:25:07,840
this term that's uh

678
00:25:05,679 --> 00:25:10,320
that's too bad the quality will be not

679
00:25:07,840 --> 00:25:12,639
so good what i believe inter is that

680
00:25:10,320 --> 00:25:14,799
there are group of people typically we

681
00:25:12,640 --> 00:25:17,919
call them as devops engineers they know

682
00:25:14,799 --> 00:25:19,918
aws they know provider they know some

683
00:25:17,919 --> 00:25:21,279
companies start their standards they

684
00:25:19,919 --> 00:25:22,799
know security

685
00:25:21,279 --> 00:25:25,200
to some degree they know what is

686
00:25:22,799 --> 00:25:26,799
encryption and they want to figure out

687
00:25:25,200 --> 00:25:27,679
how to connect different components

688
00:25:26,799 --> 00:25:29,918
together

689
00:25:27,679 --> 00:25:30,720
so the end result from these guys should

690
00:25:29,919 --> 00:25:32,880
be

691
00:25:30,720 --> 00:25:34,000
reference architecture which they

692
00:25:32,880 --> 00:25:37,200
publish and

693
00:25:34,000 --> 00:25:39,200
maintain inside of organization

694
00:25:37,200 --> 00:25:41,679
and they actually use happily all

695
00:25:39,200 --> 00:25:44,400
features of terraform zero twelve

696
00:25:41,679 --> 00:25:45,039
while terraform users are on another

697
00:25:44,400 --> 00:25:47,760
hand

698
00:25:45,039 --> 00:25:49,360
just go into wiki page and see what kind

699
00:25:47,760 --> 00:25:51,440
of solutions do we have in our

700
00:25:49,360 --> 00:25:52,000
organization like how do we deploy this

701
00:25:51,440 --> 00:25:55,039
stuff

702
00:25:52,000 --> 00:25:56,960
and they pick existing module from the

703
00:25:55,039 --> 00:25:58,960
reference architecture published in

704
00:25:56,960 --> 00:26:00,799
organization and they use it

705
00:25:58,960 --> 00:26:02,799
just to build whatever they need they

706
00:26:00,799 --> 00:26:06,000
don't have to know all these

707
00:26:02,799 --> 00:26:09,279
features about terraform uh shim

708
00:26:06,000 --> 00:26:11,760
and crazy other things which exist

709
00:26:09,279 --> 00:26:13,440
they just need to get their job done and

710
00:26:11,760 --> 00:26:16,080
for that they just need to know basics

711
00:26:13,440 --> 00:26:19,360
of hthcl2

712
00:26:16,080 --> 00:26:20,639
which is terraform 0 12. they already

713
00:26:19,360 --> 00:26:23,279
know how to build uh

714
00:26:20,640 --> 00:26:25,520
stuff and they know their their domain

715
00:26:23,279 --> 00:26:28,159
area

716
00:26:25,520 --> 00:26:29,918
so my last slide here is that uh

717
00:26:28,159 --> 00:26:32,000
telephone 0 12 is great

718
00:26:29,919 --> 00:26:33,520
and there is no doubt that that's what

719
00:26:32,000 --> 00:26:37,279
we need and we need this

720
00:26:33,520 --> 00:26:41,360
for for very many reasons but

721
00:26:37,279 --> 00:26:43,440
i don't want uh to have even more people

722
00:26:41,360 --> 00:26:44,719
who are not dealing with terraform on

723
00:26:43,440 --> 00:26:47,520
daily basis

724
00:26:44,720 --> 00:26:49,679
to be so excited that yes now i will go

725
00:26:47,520 --> 00:26:50,480
to work and now i will make my code work

726
00:26:49,679 --> 00:26:52,559
in

727
00:26:50,480 --> 00:26:54,559
terraform 0 0-12 and everything will be

728
00:26:52,559 --> 00:26:56,158
perfect no it will be crap

729
00:26:54,559 --> 00:26:57,840
honestly it will be crap because you

730
00:26:56,159 --> 00:27:00,000
need to understand a lot of internal

731
00:26:57,840 --> 00:27:01,678
implementations like you need to know

732
00:27:00,000 --> 00:27:02,960
how to connect these things together so

733
00:27:01,679 --> 00:27:06,000
that you can actually

734
00:27:02,960 --> 00:27:09,679
live with them when uh terraform 0 13

735
00:27:06,000 --> 00:27:11,840
comes out and uh yeah terraform uh is

736
00:27:09,679 --> 00:27:15,440
the universal tool i hope you

737
00:27:11,840 --> 00:27:17,840
got this impression uh but

738
00:27:15,440 --> 00:27:18,559
honestly please evaluate and pick more

739
00:27:17,840 --> 00:27:22,080
uh

740
00:27:18,559 --> 00:27:24,399
carefully than just listen in my talk

741
00:27:22,080 --> 00:27:24,399
thank you

742
00:27:27,630 --> 00:27:35,760
[Music]

743
00:27:30,799 --> 00:27:36,900
no questions one question

744
00:27:35,760 --> 00:27:39,919
okay

745
00:27:36,900 --> 00:27:41,760
[Music]

746
00:27:39,919 --> 00:27:43,039
uh i'd like to know why you don't like

747
00:27:41,760 --> 00:27:45,039
workspaces

748
00:27:43,039 --> 00:27:46,799
sorry and i'd like to know why you don't

749
00:27:45,039 --> 00:27:50,080
like workspaces

750
00:27:46,799 --> 00:28:03,840
it's so loud yeah it's not that hard

751
00:27:50,080 --> 00:28:03,840
it is so loud

752
00:28:16,399 --> 00:28:20,158
we've just refactored our code to use

753
00:28:23,399 --> 00:28:26,399
workspaces

