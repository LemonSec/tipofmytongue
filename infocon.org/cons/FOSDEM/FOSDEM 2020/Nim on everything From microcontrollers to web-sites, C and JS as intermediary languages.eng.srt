1
00:00:05,839 --> 00:00:10,400
hello everyone

2
00:00:07,359 --> 00:00:11,440
welcome uh nice to see that so many

3
00:00:10,400 --> 00:00:14,400
people are coming

4
00:00:11,440 --> 00:00:15,280
in for the name talks not just leaving

5
00:00:14,400 --> 00:00:17,760
uh

6
00:00:15,280 --> 00:00:19,840
so yeah my uh my presentation here is uh

7
00:00:17,760 --> 00:00:22,960
called nim on everything

8
00:00:19,840 --> 00:00:24,000
um sorry just have to update the video

9
00:00:22,960 --> 00:00:26,960
stream

10
00:00:24,000 --> 00:00:27,439
um so yeah name on everything how to run

11
00:00:26,960 --> 00:00:30,400
them

12
00:00:27,439 --> 00:00:31,119
on everything from microcontrollers to

13
00:00:30,400 --> 00:00:34,719
servers

14
00:00:31,119 --> 00:00:37,390
and even in the web browser

15
00:00:34,719 --> 00:00:38,559
i held the presentation here last year

16
00:00:37,390 --> 00:00:40,239
[Music]

17
00:00:38,559 --> 00:00:42,160
i have a computer science background

18
00:00:40,239 --> 00:00:44,959
from university in tromso

19
00:00:42,160 --> 00:00:46,319
which is way like above the polar circle

20
00:00:44,960 --> 00:00:50,000
somewhere

21
00:00:46,320 --> 00:00:52,239
uh mostly with with c and python uh

22
00:00:50,000 --> 00:00:53,760
sort of the background that i came from

23
00:00:52,239 --> 00:00:56,320
and nim has been uh

24
00:00:53,760 --> 00:00:57,199
been a really great language to to

25
00:00:56,320 --> 00:01:00,960
migrate to

26
00:00:57,199 --> 00:01:03,440
from from that starting point

27
00:01:00,960 --> 00:01:04,479
uh but before we get into how to run nem

28
00:01:03,440 --> 00:01:06,798
on everything

29
00:01:04,479 --> 00:01:09,119
i think it's a bit important to say why

30
00:01:06,799 --> 00:01:12,799
should we run them on anything

31
00:01:09,119 --> 00:01:13,760
uh so since you all seem to come here

32
00:01:12,799 --> 00:01:16,080
for the presentation

33
00:01:13,760 --> 00:01:17,439
how many people here have uh heard of

34
00:01:16,080 --> 00:01:19,759
them

35
00:01:17,439 --> 00:01:21,758
oh wow okay almost all of you that's

36
00:01:19,759 --> 00:01:23,840
great uh how many here have uh

37
00:01:21,759 --> 00:01:27,119
used them like tried it for simple

38
00:01:23,840 --> 00:01:28,560
projects oh wow about half of you

39
00:01:27,119 --> 00:01:31,280
how many of you would say that you're

40
00:01:28,560 --> 00:01:33,200
experienced in them

41
00:01:31,280 --> 00:01:35,200
ah actually some people i don't know

42
00:01:33,200 --> 00:01:37,840
that's fine

43
00:01:35,200 --> 00:01:40,799
okay yeah so uh name is a compiled

44
00:01:37,840 --> 00:01:43,920
statically typed language

45
00:01:40,799 --> 00:01:47,840
the type system is really powerful not

46
00:01:43,920 --> 00:01:51,600
like c plus plus with just numbers and

47
00:01:47,840 --> 00:01:54,159
strings and pointers to random stuff

48
00:01:51,600 --> 00:01:55,600
but we have a proper type system you

49
00:01:54,159 --> 00:01:58,719
have distinct types

50
00:01:55,600 --> 00:01:59,439
so you could have a number can store

51
00:01:58,719 --> 00:02:02,640
multiple

52
00:01:59,439 --> 00:02:03,119
types of information and you can reflect

53
00:02:02,640 --> 00:02:05,520
that in

54
00:02:03,119 --> 00:02:07,360
in the type system in them so you could

55
00:02:05,520 --> 00:02:08,799
have something like this is a meter this

56
00:02:07,360 --> 00:02:10,639
is a dollar

57
00:02:08,800 --> 00:02:13,120
you can't add meters to dollars because

58
00:02:10,639 --> 00:02:15,760
that would or maybe you can i don't know

59
00:02:13,120 --> 00:02:16,560
but for your application but but you you

60
00:02:15,760 --> 00:02:18,640
can create

61
00:02:16,560 --> 00:02:20,879
uh distinct types and this is actually

62
00:02:18,640 --> 00:02:22,879
something that that helps us with uh

63
00:02:20,879 --> 00:02:24,160
with uh another of the great features

64
00:02:22,879 --> 00:02:26,640
which is meta programming

65
00:02:24,160 --> 00:02:27,840
i'll come back to that later uh it's

66
00:02:26,640 --> 00:02:29,519
also garbage collected

67
00:02:27,840 --> 00:02:32,000
which might sound weird when i'm talking

68
00:02:29,520 --> 00:02:33,519
about running it on microcontrollers

69
00:02:32,000 --> 00:02:35,680
but you can actually turn the garbage

70
00:02:33,519 --> 00:02:36,800
collector off and you can also tune it

71
00:02:35,680 --> 00:02:38,640
so you can say

72
00:02:36,800 --> 00:02:40,160
for example if you're making a game run

73
00:02:38,640 --> 00:02:42,238
at 60fps

74
00:02:40,160 --> 00:02:44,640
if we have some time left over in our

75
00:02:42,239 --> 00:02:46,959
frame then we do garbage collection

76
00:02:44,640 --> 00:02:49,040
so it really doesn't get in the way like

77
00:02:46,959 --> 00:02:50,480
java for example you have a game

78
00:02:49,040 --> 00:02:52,560
playing along and just everything

79
00:02:50,480 --> 00:02:53,440
suddenly freezes while it's collecting

80
00:02:52,560 --> 00:02:55,760
your garbage

81
00:02:53,440 --> 00:02:58,000
and then you can get back to playing so

82
00:02:55,760 --> 00:03:00,239
you can avoid that

83
00:02:58,000 --> 00:03:01,120
i also included hero code that i had

84
00:03:00,239 --> 00:03:03,120
last year

85
00:03:01,120 --> 00:03:06,080
the speed of c ease of python and

86
00:03:03,120 --> 00:03:07,760
flexibility of pearl

87
00:03:06,080 --> 00:03:10,480
i thought this was something that

88
00:03:07,760 --> 00:03:13,120
andreas said the creator of of nim

89
00:03:10,480 --> 00:03:14,720
apparently not and now i've seen it

90
00:03:13,120 --> 00:03:17,120
attributed to me

91
00:03:14,720 --> 00:03:20,640
in other presentations so apparently

92
00:03:17,120 --> 00:03:23,680
that's a that's a quote of my own

93
00:03:20,640 --> 00:03:24,480
um so yeah one of maybe or maybe the

94
00:03:23,680 --> 00:03:27,680
most

95
00:03:24,480 --> 00:03:29,920
sort of killer feature of of nem

96
00:03:27,680 --> 00:03:30,799
is a metro programming or the the

97
00:03:29,920 --> 00:03:34,238
strongest

98
00:03:30,799 --> 00:03:36,959
kind of which is is macros

99
00:03:34,239 --> 00:03:38,799
um dominic is going to talk a bit more

100
00:03:36,959 --> 00:03:41,120
on this later today

101
00:03:38,799 --> 00:03:43,040
so if you want to know even more go see

102
00:03:41,120 --> 00:03:44,799
his talk as well

103
00:03:43,040 --> 00:03:46,319
and with meta programming what we can do

104
00:03:44,799 --> 00:03:48,560
is that we can really

105
00:03:46,319 --> 00:03:50,480
optimize our code so we can for example

106
00:03:48,560 --> 00:03:53,120
take in types and do

107
00:03:50,480 --> 00:03:53,679
certain things on compile time spit out

108
00:03:53,120 --> 00:03:56,799
code that

109
00:03:53,680 --> 00:03:58,480
works better than than the code we gave

110
00:03:56,799 --> 00:04:00,879
it

111
00:03:58,480 --> 00:04:02,798
we can also create nice looking code so

112
00:04:00,879 --> 00:04:05,200
we can create nice looking code that

113
00:04:02,799 --> 00:04:08,000
we then optimize to be ugly code but

114
00:04:05,200 --> 00:04:10,720
fast running code

115
00:04:08,000 --> 00:04:11,680
for example this case we also have a

116
00:04:10,720 --> 00:04:14,799
safer

117
00:04:11,680 --> 00:04:15,599
way or a safety element to it so here we

118
00:04:14,799 --> 00:04:17,440
can write the

119
00:04:15,599 --> 00:04:18,880
width lock template this is actually in

120
00:04:17,440 --> 00:04:19,199
the standard libraries and i would write

121
00:04:18,880 --> 00:04:21,680
it

122
00:04:19,199 --> 00:04:22,720
write this yourself and with this you

123
00:04:21,680 --> 00:04:26,080
can just give it a block

124
00:04:22,720 --> 00:04:28,160
it will do the try finally stuff for you

125
00:04:26,080 --> 00:04:29,758
uh pretty much i think everyone who's

126
00:04:28,160 --> 00:04:30,960
ever worked with like multi-threading

127
00:04:29,759 --> 00:04:33,840
and locks

128
00:04:30,960 --> 00:04:35,280
you know you should do this but but you

129
00:04:33,840 --> 00:04:39,198
probably don't

130
00:04:35,280 --> 00:04:41,039
everywhere where you use locks um

131
00:04:39,199 --> 00:04:42,240
but but with metaprogram you can easily

132
00:04:41,040 --> 00:04:44,320
create templates to

133
00:04:42,240 --> 00:04:46,000
do all of that boring stuff that you you

134
00:04:44,320 --> 00:04:48,240
know you should be doing but you

135
00:04:46,000 --> 00:04:49,759
can't be bothered uh so you can do all

136
00:04:48,240 --> 00:04:53,520
of that automatically or

137
00:04:49,759 --> 00:04:54,240
semi-automatically um it also works on

138
00:04:53,520 --> 00:04:56,479
the

139
00:04:54,240 --> 00:04:58,800
on the abstract syntax tree instead of

140
00:04:56,479 --> 00:05:00,080
on text so if you've used macros and for

141
00:04:58,800 --> 00:05:02,080
example c

142
00:05:00,080 --> 00:05:03,758
they are just taking some text do some

143
00:05:02,080 --> 00:05:06,560
replacements spread out some

144
00:05:03,759 --> 00:05:07,520
new text but this works in on a tree

145
00:05:06,560 --> 00:05:10,400
structure

146
00:05:07,520 --> 00:05:11,359
so it parses name code into a tree

147
00:05:10,400 --> 00:05:12,719
structure

148
00:05:11,360 --> 00:05:14,240
then you can play around with that tree

149
00:05:12,720 --> 00:05:17,280
structure and you can give it back

150
00:05:14,240 --> 00:05:17,280
another tree structure

151
00:05:17,680 --> 00:05:21,759
and this is something that that really

152
00:05:19,759 --> 00:05:24,000
allows us to

153
00:05:21,759 --> 00:05:25,600
compose these macros in a much more

154
00:05:24,000 --> 00:05:26,639
efficient way and we can we can really

155
00:05:25,600 --> 00:05:29,759
make them

156
00:05:26,639 --> 00:05:31,680
um do a lot more for us or at least

157
00:05:29,759 --> 00:05:32,960
easier do a lot of more a lot more for

158
00:05:31,680 --> 00:05:36,400
us

159
00:05:32,960 --> 00:05:39,359
this is just an example here we take in

160
00:05:36,400 --> 00:05:41,280
a static string so also the type system

161
00:05:39,360 --> 00:05:42,240
or the the type system also applies to

162
00:05:41,280 --> 00:05:45,919
macros

163
00:05:42,240 --> 00:05:48,080
and all of the meta programming uh so

164
00:05:45,919 --> 00:05:49,280
in for example in c macros again you

165
00:05:48,080 --> 00:05:51,039
don't really have types

166
00:05:49,280 --> 00:05:53,119
you take in something and you just put

167
00:05:51,039 --> 00:05:54,560
it in there and then you pass it off to

168
00:05:53,120 --> 00:05:56,160
the type system

169
00:05:54,560 --> 00:05:58,800
here types are actually checked when you

170
00:05:56,160 --> 00:06:00,639
call this function or this template

171
00:05:58,800 --> 00:06:02,880
uh this is a macros when you call this

172
00:06:00,639 --> 00:06:04,800
macro it will actually

173
00:06:02,880 --> 00:06:05,919
check that your type is correct before

174
00:06:04,800 --> 00:06:07,919
trying to do anything with

175
00:06:05,919 --> 00:06:09,440
it so you won't get some weird error

176
00:06:07,919 --> 00:06:11,758
message from somewhere else in your

177
00:06:09,440 --> 00:06:11,759
system

178
00:06:12,639 --> 00:06:17,919
yeah i've compiled time yeah so in this

179
00:06:16,080 --> 00:06:20,240
case this is a static string that means

180
00:06:17,919 --> 00:06:22,318
that this is a string on compile time

181
00:06:20,240 --> 00:06:23,840
if we had just the string it's actually

182
00:06:22,319 --> 00:06:26,880
anything that

183
00:06:23,840 --> 00:06:28,159
can become a string on runtime so if you

184
00:06:26,880 --> 00:06:29,440
can give it a variable that's only

185
00:06:28,160 --> 00:06:33,039
available on

186
00:06:29,440 --> 00:06:35,199
on runtime but we we tell the the

187
00:06:33,039 --> 00:06:36,159
macro system that yes this this should

188
00:06:35,199 --> 00:06:38,319
be

189
00:06:36,160 --> 00:06:39,600
something that will be a string when

190
00:06:38,319 --> 00:06:41,120
we're running this code

191
00:06:39,600 --> 00:06:42,400
so you can take that symbol and put it

192
00:06:41,120 --> 00:06:42,960
somewhere and you know that it's going

193
00:06:42,400 --> 00:06:46,400
to

194
00:06:42,960 --> 00:06:48,080
be a string when the code is run

195
00:06:46,400 --> 00:06:50,239
this is just an example from from the

196
00:06:48,080 --> 00:06:53,520
manual take a string split it up

197
00:06:50,240 --> 00:06:57,440
and this will actually spit out um

198
00:06:53,520 --> 00:06:59,280
just an array of these four elements

199
00:06:57,440 --> 00:07:00,880
uh and you won't have to do any of the

200
00:06:59,280 --> 00:07:03,198
string stuff

201
00:07:00,880 --> 00:07:05,039
on runtime and this is great for for

202
00:07:03,199 --> 00:07:06,319
microcontrollers for example

203
00:07:05,039 --> 00:07:09,360
you don't want to do like string

204
00:07:06,319 --> 00:07:11,120
splitting uh on a tiny microcontroller

205
00:07:09,360 --> 00:07:13,520
this way you can do it you can do all

206
00:07:11,120 --> 00:07:15,759
that on compile time

207
00:07:13,520 --> 00:07:16,639
and then on runtime you just have your

208
00:07:15,759 --> 00:07:20,960
array with

209
00:07:16,639 --> 00:07:20,960
like pre-split and done everything

210
00:07:21,599 --> 00:07:26,240
uh so i mentioned that nim is a compiled

211
00:07:23,840 --> 00:07:29,039
language but it doesn't compile directly

212
00:07:26,240 --> 00:07:29,599
to binaries or to to code that you can

213
00:07:29,039 --> 00:07:33,120
run or

214
00:07:29,599 --> 00:07:36,479
to yeah to binaries uh it uses

215
00:07:33,120 --> 00:07:38,479
c c plus plus also objective c

216
00:07:36,479 --> 00:07:40,080
uh and javascript as sort of

217
00:07:38,479 --> 00:07:42,080
intermediary languages

218
00:07:40,080 --> 00:07:44,400
so it first compiles so it takes some

219
00:07:42,080 --> 00:07:47,680
away some of the abstractions it doesn't

220
00:07:44,400 --> 00:07:50,560
compile your macros into like c macros

221
00:07:47,680 --> 00:07:51,919
um so so it compiles down to c c plus

222
00:07:50,560 --> 00:07:53,440
plus javascript

223
00:07:51,919 --> 00:07:55,359
and then it hands that over to the

224
00:07:53,440 --> 00:07:58,479
compiler which actually creates the

225
00:07:55,360 --> 00:08:00,080
binary for you

226
00:07:58,479 --> 00:08:01,520
and because of these languages like

227
00:08:00,080 --> 00:08:03,199
they've been around for so long

228
00:08:01,520 --> 00:08:05,280
you can really take your name code and

229
00:08:03,199 --> 00:08:07,599
run it on anything that can run

230
00:08:05,280 --> 00:08:09,119
these languages which is pretty much any

231
00:08:07,599 --> 00:08:11,280
device

232
00:08:09,120 --> 00:08:12,639
we have name running on microcontrollers

233
00:08:11,280 --> 00:08:15,919
as i said servers

234
00:08:12,639 --> 00:08:19,680
android phones iphones of course

235
00:08:15,919 --> 00:08:21,520
servers laptops anything

236
00:08:19,680 --> 00:08:23,360
this also means that we can very easily

237
00:08:21,520 --> 00:08:26,159
tie into the native libraries

238
00:08:23,360 --> 00:08:27,120
of that system so you can take a c

239
00:08:26,160 --> 00:08:29,440
library

240
00:08:27,120 --> 00:08:31,199
and just say well call this c function

241
00:08:29,440 --> 00:08:33,039
or a javascript library and say call

242
00:08:31,199 --> 00:08:35,440
this javascript function

243
00:08:33,039 --> 00:08:37,199
so you can really easily tie into the

244
00:08:35,440 --> 00:08:40,399
the system that you're building

245
00:08:37,200 --> 00:08:42,800
that you're building for um

246
00:08:40,399 --> 00:08:46,000
it also means that as i write here we're

247
00:08:42,799 --> 00:08:49,599
standing on the shoulders of giants

248
00:08:46,000 --> 00:08:49,600
because we have

249
00:08:50,000 --> 00:08:54,480
we have the benefit of all of the work

250
00:08:52,560 --> 00:08:55,518
that's gone into for example the gcc

251
00:08:54,480 --> 00:08:57,200
compiler

252
00:08:55,519 --> 00:08:58,959
like it's been around for a long time

253
00:08:57,200 --> 00:09:01,760
there's a lot of optimizations

254
00:08:58,959 --> 00:09:03,279
built into this thing and we get all of

255
00:09:01,760 --> 00:09:06,399
that sort of for free

256
00:09:03,279 --> 00:09:09,519
by creating c code

257
00:09:06,399 --> 00:09:11,519
so that means it's super fast and it

258
00:09:09,519 --> 00:09:15,040
also it doesn't spit out

259
00:09:11,519 --> 00:09:17,440
like human readable code so it uses

260
00:09:15,040 --> 00:09:19,040
c more as a as a target like you

261
00:09:17,440 --> 00:09:22,880
wouldn't want to read the nim

262
00:09:19,040 --> 00:09:25,519
c code i know that some people do but

263
00:09:22,880 --> 00:09:27,360
it's it's not it's not great and i mean

264
00:09:25,519 --> 00:09:27,600
like if you're working with someone on a

265
00:09:27,360 --> 00:09:30,080
c

266
00:09:27,600 --> 00:09:31,680
project and you start committing the

267
00:09:30,080 --> 00:09:33,760
code that name spits out they're not

268
00:09:31,680 --> 00:09:36,959
gonna be happy with you

269
00:09:33,760 --> 00:09:38,319
um so and and that's also

270
00:09:36,959 --> 00:09:40,160
a lot of people say well you have a

271
00:09:38,320 --> 00:09:41,440
speed of c but you're obviously doing

272
00:09:40,160 --> 00:09:43,600
something more

273
00:09:41,440 --> 00:09:45,120
than than what you can do in c so how

274
00:09:43,600 --> 00:09:46,800
does that work like there's got to be

275
00:09:45,120 --> 00:09:49,279
more work here

276
00:09:46,800 --> 00:09:50,880
and the answer is just because we're

277
00:09:49,279 --> 00:09:54,000
spitting out stuff

278
00:09:50,880 --> 00:09:55,360
that no sane human would write or read

279
00:09:54,000 --> 00:09:57,040
or maintain

280
00:09:55,360 --> 00:09:58,560
it means that our c code can be more

281
00:09:57,040 --> 00:10:02,160
efficient than what you would

282
00:09:58,560 --> 00:10:04,399
normally write as a c programmer

283
00:10:02,160 --> 00:10:05,760
another question is why not llvm or

284
00:10:04,399 --> 00:10:08,240
webassembly

285
00:10:05,760 --> 00:10:09,680
uh the answer to that is pretty simple

286
00:10:08,240 --> 00:10:14,000
webassembly didn't exist

287
00:10:09,680 --> 00:10:16,239
when name was created and llvm was still

288
00:10:14,000 --> 00:10:17,839
sort of kind of new and no one really

289
00:10:16,240 --> 00:10:21,200
knew about it and it wasn't

290
00:10:17,839 --> 00:10:23,440
yeah it wasn't proven to be what it is

291
00:10:21,200 --> 00:10:26,959
today

292
00:10:23,440 --> 00:10:28,959
um when i first discovered them

293
00:10:26,959 --> 00:10:30,239
i remember i clicked into the website

294
00:10:28,959 --> 00:10:32,560
like oh

295
00:10:30,240 --> 00:10:33,680
compares to c and javascript that that

296
00:10:32,560 --> 00:10:35,760
can't be good

297
00:10:33,680 --> 00:10:37,359
there has to be there has to be some

298
00:10:35,760 --> 00:10:39,439
trade-offs here like

299
00:10:37,360 --> 00:10:41,600
you you can't do everything you can do

300
00:10:39,440 --> 00:10:43,200
in in c and javascript like that that

301
00:10:41,600 --> 00:10:45,680
doesn't work

302
00:10:43,200 --> 00:10:46,880
um but the way name solves this is that

303
00:10:45,680 --> 00:10:49,920
you can't run

304
00:10:46,880 --> 00:10:50,959
all name code on both javascript and and

305
00:10:49,920 --> 00:10:53,360
c

306
00:10:50,959 --> 00:10:54,000
um like you can't access the dom tree

307
00:10:53,360 --> 00:10:56,480
when you're

308
00:10:54,000 --> 00:10:59,279
writing c code and you can't do pointers

309
00:10:56,480 --> 00:11:02,480
when you're compiling to javascript

310
00:10:59,279 --> 00:11:05,760
uh so really like this is an example two

311
00:11:02,480 --> 00:11:07,600
two pieces of uh of code both in nem

312
00:11:05,760 --> 00:11:10,079
on the right hand side we have uh some

313
00:11:07,600 --> 00:11:12,240
javascript stuff

314
00:11:10,079 --> 00:11:15,439
just interfaces with with the regular

315
00:11:12,240 --> 00:11:18,320
like document create element on load

316
00:11:15,440 --> 00:11:19,680
regular javascript stuff on the left

317
00:11:18,320 --> 00:11:22,880
side you have some of my

318
00:11:19,680 --> 00:11:25,199
horrible code from a work project

319
00:11:22,880 --> 00:11:26,839
that interfaces with with sockets and

320
00:11:25,200 --> 00:11:31,040
stuff on

321
00:11:26,839 --> 00:11:33,519
on on nse library

322
00:11:31,040 --> 00:11:35,519
and it's really it's based on we have we

323
00:11:33,519 --> 00:11:37,279
have the same syntax we have the same

324
00:11:35,519 --> 00:11:39,440
meta programming capabilities we have

325
00:11:37,279 --> 00:11:42,720
the same type system

326
00:11:39,440 --> 00:11:43,839
but we don't it's not exactly the same

327
00:11:42,720 --> 00:11:47,600
language

328
00:11:43,839 --> 00:11:49,839
um so so it really

329
00:11:47,600 --> 00:11:51,120
it gives us all of the benefits of nim

330
00:11:49,839 --> 00:11:53,680
but it doesn't take away

331
00:11:51,120 --> 00:11:57,839
any of the benefits or sort of

332
00:11:53,680 --> 00:12:00,079
capabilities of the underlying language

333
00:11:57,839 --> 00:12:02,160
so what we're actually here to talk

334
00:12:00,079 --> 00:12:04,000
about name on everything

335
00:12:02,160 --> 00:12:05,519
so let's start with the smallest these

336
00:12:04,000 --> 00:12:08,320
are

337
00:12:05,519 --> 00:12:10,079
all things you can program with the

338
00:12:08,320 --> 00:12:13,279
arduino ide

339
00:12:10,079 --> 00:12:14,319
this one is a digispark it has four

340
00:12:13,279 --> 00:12:16,800
kilobytes of

341
00:12:14,320 --> 00:12:20,000
accessible memory or it has six the two

342
00:12:16,800 --> 00:12:22,560
of those are used for the bootloader

343
00:12:20,000 --> 00:12:23,360
and name runs on that you have the

344
00:12:22,560 --> 00:12:25,920
arduboy

345
00:12:23,360 --> 00:12:27,279
which is kind of fun it's a arduino

346
00:12:25,920 --> 00:12:29,519
leonardo based

347
00:12:27,279 --> 00:12:31,680
thing with just a screen and some

348
00:12:29,519 --> 00:12:35,120
buttons and a tiny little speaker

349
00:12:31,680 --> 00:12:38,160
it has 32 kilobytes of program memory

350
00:12:35,120 --> 00:12:41,279
um and you can run him on that

351
00:12:38,160 --> 00:12:44,959
i made a breakout clone for it and

352
00:12:41,279 --> 00:12:48,160
that's an interesting thing um

353
00:12:44,959 --> 00:12:49,680
with with this device you like

354
00:12:48,160 --> 00:12:51,439
when i was writing the code i was

355
00:12:49,680 --> 00:12:53,199
compiling it and it comes out to the

356
00:12:51,440 --> 00:12:56,240
same binary sizes

357
00:12:53,200 --> 00:12:58,000
like give or take a few bites so so

358
00:12:56,240 --> 00:12:58,959
really when when you're compiling nim

359
00:12:58,000 --> 00:13:00,720
code

360
00:12:58,959 --> 00:13:03,040
uh into c code and then on to the

361
00:13:00,720 --> 00:13:04,399
arduino if you're not doing

362
00:13:03,040 --> 00:13:06,639
something dumb like of course you're

363
00:13:04,399 --> 00:13:08,399
turning off the garbage collector and

364
00:13:06,639 --> 00:13:09,680
avoiding some stuff that you know is

365
00:13:08,399 --> 00:13:12,800
going to take up space

366
00:13:09,680 --> 00:13:13,760
but like a one-to-one rewrite from c to

367
00:13:12,800 --> 00:13:16,079
nem

368
00:13:13,760 --> 00:13:19,519
actually turned out to be pretty much

369
00:13:16,079 --> 00:13:22,719
the exact same footprint on the chip

370
00:13:19,519 --> 00:13:25,440
so unlike for example micropython um

371
00:13:22,720 --> 00:13:26,399
i've run micropython on some devices and

372
00:13:25,440 --> 00:13:28,000
i was like wait

373
00:13:26,399 --> 00:13:30,880
why am i running out of memory i'm

374
00:13:28,000 --> 00:13:33,600
reading like two sensors and this is a

375
00:13:30,880 --> 00:13:34,000
super capable chip ah yeah i have the

376
00:13:33,600 --> 00:13:36,160
python

377
00:13:34,000 --> 00:13:37,600
interpreter i have a lot of string

378
00:13:36,160 --> 00:13:39,040
handling of course i'm running out of

379
00:13:37,600 --> 00:13:42,160
memory

380
00:13:39,040 --> 00:13:43,360
um and i say we're running without the

381
00:13:42,160 --> 00:13:46,399
garbage collector

382
00:13:43,360 --> 00:13:48,000
right now um here at foster we were

383
00:13:46,399 --> 00:13:51,519
actually able to get it to work with

384
00:13:48,000 --> 00:13:53,760
gc art so now you can do strings and

385
00:13:51,519 --> 00:13:57,120
sequences and stuff on these

386
00:13:53,760 --> 00:13:58,639
you probably don't want to but you can

387
00:13:57,120 --> 00:14:00,399
and it means that all of the standard

388
00:13:58,639 --> 00:14:02,480
libraries should should be available at

389
00:14:00,399 --> 00:14:04,160
some point

390
00:14:02,480 --> 00:14:06,560
because now there are some points that

391
00:14:04,160 --> 00:14:10,160
you actually can't use

392
00:14:06,560 --> 00:14:12,399
um and really the benefit

393
00:14:10,160 --> 00:14:13,279
like as i said when you do a one-to-one

394
00:14:12,399 --> 00:14:15,279
rewrite

395
00:14:13,279 --> 00:14:17,040
it's pretty much the same but if you're

396
00:14:15,279 --> 00:14:19,439
doing a one-to-one rewrite

397
00:14:17,040 --> 00:14:22,000
why do it in them why not just write the

398
00:14:19,440 --> 00:14:22,000
c code

399
00:14:22,480 --> 00:14:27,440
and the thing is that you can you can

400
00:14:25,360 --> 00:14:29,839
use the meta programming you can use

401
00:14:27,440 --> 00:14:31,920
all of the extra features so again for

402
00:14:29,839 --> 00:14:35,360
the arduboy i wrote

403
00:14:31,920 --> 00:14:37,439
a macro that loads sprites on compile

404
00:14:35,360 --> 00:14:40,560
time

405
00:14:37,440 --> 00:14:41,760
so it reads in the sprites as images on

406
00:14:40,560 --> 00:14:46,479
compile time

407
00:14:41,760 --> 00:14:48,399
it converts them to the internal image

408
00:14:46,480 --> 00:14:49,600
image representation that the art boy

409
00:14:48,399 --> 00:14:51,920
libraries use

410
00:14:49,600 --> 00:14:55,519
and i'm using the same c libraries as

411
00:14:51,920 --> 00:14:55,519
the regular artboy code

412
00:14:55,600 --> 00:15:01,519
and i'm casting them to a type that on

413
00:14:58,240 --> 00:15:03,360
compile time knows the size of the image

414
00:15:01,519 --> 00:15:05,279
so for example this draw a bitmap it

415
00:15:03,360 --> 00:15:06,880
takes a logo and a logo mask

416
00:15:05,279 --> 00:15:08,480
and these have to be the same size

417
00:15:06,880 --> 00:15:10,560
because otherwise like what what would

418
00:15:08,480 --> 00:15:14,320
it do with them

419
00:15:10,560 --> 00:15:15,839
but because i do them through this load

420
00:15:14,320 --> 00:15:19,360
sprite function i'm

421
00:15:15,839 --> 00:15:20,959
saving the like the size of the images

422
00:15:19,360 --> 00:15:23,040
in my type

423
00:15:20,959 --> 00:15:24,880
so on compile time i can check that

424
00:15:23,040 --> 00:15:26,079
these two sprites are actually the same

425
00:15:24,880 --> 00:15:28,480
size

426
00:15:26,079 --> 00:15:29,439
so i can never call this function with

427
00:15:28,480 --> 00:15:31,600
two sprites that

428
00:15:29,440 --> 00:15:33,680
won't do the thing i expect them to and

429
00:15:31,600 --> 00:15:36,720
create crashes and stuff

430
00:15:33,680 --> 00:15:38,000
so it's actually both safer and i don't

431
00:15:36,720 --> 00:15:41,120
have to go through like a

432
00:15:38,000 --> 00:15:43,199
web ui to convert my sprites into a

433
00:15:41,120 --> 00:15:46,000
aged file which i download and then put

434
00:15:43,199 --> 00:15:47,599
into my project folder and run it and

435
00:15:46,000 --> 00:15:50,720
don't have to do any of that just load

436
00:15:47,600 --> 00:15:55,199
sprite try done

437
00:15:50,720 --> 00:15:58,880
um and um

438
00:15:55,199 --> 00:16:02,479
it's also now running in the

439
00:15:58,880 --> 00:16:05,279
nim or in the arduino ide

440
00:16:02,480 --> 00:16:06,399
this was uh hacked together very

441
00:16:05,279 --> 00:16:07,759
recently

442
00:16:06,399 --> 00:16:10,240
but it actually works you can open the

443
00:16:07,759 --> 00:16:13,040
arduino ide type name code

444
00:16:10,240 --> 00:16:14,240
hit upload it goes straight on to your

445
00:16:13,040 --> 00:16:17,920
microcontroller

446
00:16:14,240 --> 00:16:18,800
and uh it just works uh there was also

447
00:16:17,920 --> 00:16:21,120
and

448
00:16:18,800 --> 00:16:23,279
nim forums a chinese bluetooth low

449
00:16:21,120 --> 00:16:26,959
energy chip producer

450
00:16:23,279 --> 00:16:29,360
um that just out of nowhere posted that

451
00:16:26,959 --> 00:16:30,638
hey we're making we're making bluetooth

452
00:16:29,360 --> 00:16:34,000
low energy chips

453
00:16:30,639 --> 00:16:37,120
and uh we have a name sdk so is that is

454
00:16:34,000 --> 00:16:39,759
actually catching on even even with

455
00:16:37,120 --> 00:16:41,360
chip manufacturers not only not only

456
00:16:39,759 --> 00:16:43,600
users

457
00:16:41,360 --> 00:16:44,720
but again since we can use c libraries

458
00:16:43,600 --> 00:16:46,959
we don't have to

459
00:16:44,720 --> 00:16:49,120
rewrite all our sdks ourselves we can

460
00:16:46,959 --> 00:16:54,479
just use the existing c ones

461
00:16:49,120 --> 00:16:54,480
and and use those directly

462
00:16:55,199 --> 00:16:59,199
you can also of course run it on a

463
00:16:56,720 --> 00:17:02,959
server or a desktop or

464
00:16:59,199 --> 00:17:02,959
any regular computer

465
00:17:03,360 --> 00:17:07,039
again we can use all the libraries like

466
00:17:05,199 --> 00:17:10,720
databases mysql

467
00:17:07,039 --> 00:17:14,079
uh maria db we can use gui libraries

468
00:17:10,720 --> 00:17:18,000
um this is a gui library that

469
00:17:14,079 --> 00:17:21,280
i i talk it's a vx widgets

470
00:17:18,000 --> 00:17:22,000
so this runs on gtk and and windows and

471
00:17:21,280 --> 00:17:26,000
coco

472
00:17:22,000 --> 00:17:29,760
on mac this is just done with a macro

473
00:17:26,000 --> 00:17:29,760
so the code for this looks super clean

474
00:17:30,000 --> 00:17:37,360
and this runs regular regular programs

475
00:17:34,000 --> 00:17:40,640
um we also the the back end for

476
00:17:37,360 --> 00:17:43,280
the nim forum is running on them

477
00:17:40,640 --> 00:17:44,000
the back the back end for the name

478
00:17:43,280 --> 00:17:45,240
playground

479
00:17:44,000 --> 00:17:47,520
so you can go to play dot

480
00:17:45,240 --> 00:17:48,960
play.name.lang.org and just type name

481
00:17:47,520 --> 00:17:50,639
code and hit run

482
00:17:48,960 --> 00:17:52,000
compiles it on a server send you back

483
00:17:50,640 --> 00:17:55,600
the results

484
00:17:52,000 --> 00:17:56,640
that is written in them this is another

485
00:17:55,600 --> 00:18:00,399
example

486
00:17:56,640 --> 00:18:03,760
again taken from the nim forums

487
00:18:00,400 --> 00:18:05,679
i created a gui for doing some

488
00:18:03,760 --> 00:18:07,600
unlocking stuff and setting up servers

489
00:18:05,679 --> 00:18:10,160
for uh for battlefield

490
00:18:07,600 --> 00:18:11,120
i think it was uh of course a lot of

491
00:18:10,160 --> 00:18:15,919
terminal tools

492
00:18:11,120 --> 00:18:19,360
them compiler nimble a lot of stuff

493
00:18:15,919 --> 00:18:20,000
you can write in them you can also run

494
00:18:19,360 --> 00:18:23,439
it on

495
00:18:20,000 --> 00:18:26,480
the web we can compile

496
00:18:23,440 --> 00:18:28,720
to javascript as i mentioned again this

497
00:18:26,480 --> 00:18:31,080
is not something that you would want to

498
00:18:28,720 --> 00:18:32,240
look at necessarily um

499
00:18:31,080 --> 00:18:35,199
[Music]

500
00:18:32,240 --> 00:18:38,320
and again the forums the front end for

501
00:18:35,200 --> 00:18:38,320
those are also written in them

502
00:18:38,880 --> 00:18:44,160
the the playground again it's also

503
00:18:42,080 --> 00:18:46,480
written in them

504
00:18:44,160 --> 00:18:47,919
and as i mentioned we don't have a lot

505
00:18:46,480 --> 00:18:50,160
of stuff like the c

506
00:18:47,919 --> 00:18:51,840
uh like pointers and and all of that but

507
00:18:50,160 --> 00:18:55,360
what we do have is stuff like

508
00:18:51,840 --> 00:18:56,799
dom uh we have we have js specific

509
00:18:55,360 --> 00:18:58,479
modules that

510
00:18:56,799 --> 00:19:00,000
are only available for the javascript

511
00:18:58,480 --> 00:19:04,240
target that only does

512
00:19:00,000 --> 00:19:06,960
javascript javascript specific things

513
00:19:04,240 --> 00:19:08,799
but also we can use javascript libraries

514
00:19:06,960 --> 00:19:11,919
so in the same way that we can use

515
00:19:08,799 --> 00:19:13,280
existing c plus code when we're running

516
00:19:11,919 --> 00:19:15,760
an arduino or

517
00:19:13,280 --> 00:19:17,120
database code when we're running on the

518
00:19:15,760 --> 00:19:20,000
on a server

519
00:19:17,120 --> 00:19:21,120
we can run javascript libraries in our

520
00:19:20,000 --> 00:19:23,280
in our

521
00:19:21,120 --> 00:19:24,799
javascript code so for example the

522
00:19:23,280 --> 00:19:26,960
playground uses a

523
00:19:24,799 --> 00:19:28,240
standard like input with syntax

524
00:19:26,960 --> 00:19:30,080
highlighting and all of that

525
00:19:28,240 --> 00:19:32,000
don't have to re-implement that myself

526
00:19:30,080 --> 00:19:34,159
just find it like you would normally do

527
00:19:32,000 --> 00:19:37,679
when you're writing javascript

528
00:19:34,160 --> 00:19:38,960
use that works great um

529
00:19:37,679 --> 00:19:40,960
and of course we don't use the

530
00:19:38,960 --> 00:19:43,600
javascript garbage collector uh

531
00:19:40,960 --> 00:19:45,120
we didn't build a garbage collector on

532
00:19:43,600 --> 00:19:48,080
top of a garbage collector

533
00:19:45,120 --> 00:19:50,080
uh so that that doesn't apply to the

534
00:19:48,080 --> 00:19:53,120
javascript target

535
00:19:50,080 --> 00:19:57,520
here's one example um real valley

536
00:19:53,120 --> 00:19:58,799
was written almost i think 100 99.99

537
00:19:57,520 --> 00:20:01,120
i think it's written in a blog post

538
00:19:58,799 --> 00:20:04,639
somewhere um

539
00:20:01,120 --> 00:20:08,239
both server front-end

540
00:20:04,640 --> 00:20:13,520
runs on phones runs on web

541
00:20:08,240 --> 00:20:13,520
embedded on facebook the servers as well

542
00:20:14,720 --> 00:20:19,120
these are the forums that i mentioned

543
00:20:16,640 --> 00:20:22,320
looks kind of like discourse

544
00:20:19,120 --> 00:20:23,918
a lot of people think it is but it's a

545
00:20:22,320 --> 00:20:25,760
sort of a lightweight alternative to

546
00:20:23,919 --> 00:20:28,960
this course that is written in

547
00:20:25,760 --> 00:20:32,400
in uh entirely in them

548
00:20:28,960 --> 00:20:33,360
um yeah that was uh that was my talk a

549
00:20:32,400 --> 00:20:35,600
bit faster

550
00:20:33,360 --> 00:20:37,120
but we're a bit behind schedule so i

551
00:20:35,600 --> 00:20:39,120
think that's fine

552
00:20:37,120 --> 00:20:40,799
actually we can take a couple of

553
00:20:39,120 --> 00:20:49,840
questions because you still have

554
00:20:40,799 --> 00:20:49,840
seven minutes yeah

555
00:20:49,919 --> 00:20:53,360
templates are more like macros in c so

556
00:20:52,640 --> 00:20:57,679
they are

557
00:20:53,360 --> 00:21:00,879
simple replacement so if you look at the

558
00:20:57,679 --> 00:21:04,640
the example here um

559
00:21:00,880 --> 00:21:07,679
this template is just you have the lock

560
00:21:04,640 --> 00:21:09,840
and the body and lock and body in this

561
00:21:07,679 --> 00:21:12,080
code is just being replaced with

562
00:21:09,840 --> 00:21:14,959
whatever you pass in

563
00:21:12,080 --> 00:21:15,760
but otherwise the body is the same in a

564
00:21:14,960 --> 00:21:19,679
macro

565
00:21:15,760 --> 00:21:23,120
like this you see we create a new tree

566
00:21:19,679 --> 00:21:26,240
like a new dom or a new ast tree

567
00:21:23,120 --> 00:21:27,360
and then we add nodes into that tree so

568
00:21:26,240 --> 00:21:29,440
the code that

569
00:21:27,360 --> 00:21:31,199
actually comes out is is not the code

570
00:21:29,440 --> 00:21:35,520
that you see here but the code that

571
00:21:31,200 --> 00:21:35,520
you generate through the through the asd

572
00:21:41,760 --> 00:21:46,879
uh yeah sorry i should have repeated the

573
00:21:44,159 --> 00:21:50,000
questions but um

574
00:21:46,880 --> 00:21:52,080
so you're asking can the can macros

575
00:21:50,000 --> 00:21:53,840
uh access the file system and the answer

576
00:21:52,080 --> 00:21:57,439
is yes

577
00:21:53,840 --> 00:22:00,000
what and yeah you can you can run

578
00:21:57,440 --> 00:22:00,640
uh static exec so you can run any

579
00:22:00,000 --> 00:22:03,679
program

580
00:22:00,640 --> 00:22:05,360
on your computer as well um so

581
00:22:03,679 --> 00:22:07,679
so you have you have to be careful when

582
00:22:05,360 --> 00:22:10,158
you run others other people's code

583
00:22:07,679 --> 00:22:10,880
uh but on the other hand it means you

584
00:22:10,159 --> 00:22:14,720
can do

585
00:22:10,880 --> 00:22:14,720
anything in the macro

586
00:22:20,080 --> 00:22:23,918
so the question is if there are plans to

587
00:22:21,840 --> 00:22:26,639
support llvm

588
00:22:23,919 --> 00:22:29,440
i don't yes i'm getting yes from from

589
00:22:26,640 --> 00:22:29,440
andreas back here

590
00:22:33,520 --> 00:22:41,840
it's just slightly behind the

591
00:22:37,360 --> 00:22:41,840
main firewall

592
00:22:48,000 --> 00:22:52,840
is there any kind of simple memory

593
00:22:50,240 --> 00:22:55,200
management or it's just

594
00:22:52,840 --> 00:22:56,720
always so the question is

595
00:22:55,200 --> 00:22:58,480
when you turn off the garbage collector

596
00:22:56,720 --> 00:23:02,240
is there any any sort of

597
00:22:58,480 --> 00:23:03,919
backup yeah uh so you have you have

598
00:23:02,240 --> 00:23:05,679
options you can use different garbage

599
00:23:03,919 --> 00:23:06,400
collectors so you can find one that that

600
00:23:05,679 --> 00:23:08,960
suits your need

601
00:23:06,400 --> 00:23:10,159
one of them is reference counting when

602
00:23:08,960 --> 00:23:13,039
you turn it off

603
00:23:10,159 --> 00:23:14,000
it doesn't do anything but you will get

604
00:23:13,039 --> 00:23:15,520
warnings

605
00:23:14,000 --> 00:23:17,840
when you're compiling that says this

606
00:23:15,520 --> 00:23:20,960
uses garbage collected memory

607
00:23:17,840 --> 00:23:25,918
but on runtime it is just going to leak

608
00:23:20,960 --> 00:23:27,840
like i said any more questions yep

609
00:23:25,919 --> 00:23:29,039
in that case are there any facilities

610
00:23:27,840 --> 00:23:32,240
for uh

611
00:23:29,039 --> 00:23:32,720
manual memory management so the question

612
00:23:32,240 --> 00:23:34,799
is

613
00:23:32,720 --> 00:23:36,080
can you do manual memory management and

614
00:23:34,799 --> 00:23:38,960
the answer is yes

615
00:23:36,080 --> 00:23:39,439
you can use malloc you can use free

616
00:23:38,960 --> 00:23:41,039
again

617
00:23:39,440 --> 00:23:43,600
like for interfacing with c you need

618
00:23:41,039 --> 00:23:43,600
them anyways

619
00:23:47,120 --> 00:23:52,080
what about compile times is it feasible

620
00:23:49,520 --> 00:23:53,918
to write launch projects

621
00:23:52,080 --> 00:23:56,720
so the question is is it feasible to

622
00:23:53,919 --> 00:23:59,200
write large projects in them

623
00:23:56,720 --> 00:24:00,400
in reference to compile times i would

624
00:23:59,200 --> 00:24:03,679
say definitely yes

625
00:24:00,400 --> 00:24:05,440
it compiles super fast and i know

626
00:24:03,679 --> 00:24:06,799
there is work on doing incremental

627
00:24:05,440 --> 00:24:09,279
compilation

628
00:24:06,799 --> 00:24:10,000
um i have to say if you write super

629
00:24:09,279 --> 00:24:12,320
complex

630
00:24:10,000 --> 00:24:14,799
macros or if you do like me and write a

631
00:24:12,320 --> 00:24:16,559
parser that isn't very good

632
00:24:14,799 --> 00:24:18,960
then you can quickly rack up some

633
00:24:16,559 --> 00:24:19,600
compile time but compared to like c plus

634
00:24:18,960 --> 00:24:22,000
plus or

635
00:24:19,600 --> 00:24:33,678
something like that it's nothing it's

636
00:24:22,000 --> 00:24:35,440
running super fast

637
00:24:33,679 --> 00:24:37,360
so the question is um when you're

638
00:24:35,440 --> 00:24:41,279
compiling to see can you get c

639
00:24:37,360 --> 00:24:44,719
errors or and does that happen often um

640
00:24:41,279 --> 00:24:47,520
answer yes it can happen and no

641
00:24:44,720 --> 00:24:48,880
it doesn't happen often uh like if it

642
00:24:47,520 --> 00:24:50,480
happens there's something wrong in the

643
00:24:48,880 --> 00:24:51,520
compiler and you should create an issue

644
00:24:50,480 --> 00:24:53,760
in github

645
00:24:51,520 --> 00:24:53,760
um

646
00:24:55,200 --> 00:25:01,679
yeah no no yeah uh you can do emit

647
00:24:59,520 --> 00:25:03,520
so just emit a block of text into your

648
00:25:01,679 --> 00:25:04,880
code file that of course will get you

649
00:25:03,520 --> 00:25:07,279
errors uh

650
00:25:04,880 --> 00:25:08,720
you can also do some weird things with

651
00:25:07,279 --> 00:25:11,919
code gun decal

652
00:25:08,720 --> 00:25:13,600
stuff but if you're using them like a

653
00:25:11,919 --> 00:25:16,720
normal person then you shouldn't have

654
00:25:13,600 --> 00:25:19,439
any issues with that at all

655
00:25:16,720 --> 00:25:22,320
there was a hand yep is the language

656
00:25:19,440 --> 00:25:22,320
specifications

657
00:25:22,640 --> 00:25:26,080
or something so is the language

658
00:25:24,240 --> 00:25:29,919
specification out on the web

659
00:25:26,080 --> 00:25:32,960
yes it is on in the manual um

660
00:25:29,919 --> 00:25:34,159
there is maybe some idiosyncrasies

661
00:25:32,960 --> 00:25:37,039
between the implementation

662
00:25:34,159 --> 00:25:37,360
and the specification but in general

663
00:25:37,039 --> 00:25:39,600
it's

664
00:25:37,360 --> 00:25:39,600
yes

665
00:25:41,520 --> 00:25:44,960
yeah who is the next speaker oh andreas

666
00:25:44,640 --> 00:25:46,480
yeah

667
00:25:44,960 --> 00:25:48,159
just come now uh he's using my machine

668
00:25:46,480 --> 00:25:49,919
so it's fine

669
00:25:48,159 --> 00:25:51,200
you can get a couple of more questions

670
00:25:49,919 --> 00:25:54,320
one more question

671
00:25:51,200 --> 00:25:57,840
do we have any more no just come down

672
00:25:54,320 --> 00:25:57,840
don't worry

673
00:25:59,520 --> 00:26:11,840
three more

674
00:26:15,200 --> 00:26:17,279
you

