1
00:00:05,040 --> 00:00:08,000
itself a little bit

2
00:00:06,240 --> 00:00:10,080
more extensive than normal yeah all

3
00:00:08,000 --> 00:00:12,480
right okay

4
00:00:10,080 --> 00:00:12,480
thank you

5
00:00:13,360 --> 00:00:17,279
so hello everyone my name is marcus

6
00:00:15,839 --> 00:00:20,720
netera from

7
00:00:17,279 --> 00:00:23,198
coming from bonn mundiales we have a

8
00:00:20,720 --> 00:00:24,160
startup existing for now almost five

9
00:00:23,199 --> 00:00:26,160
years

10
00:00:24,160 --> 00:00:28,320
i'm originally coming from research in

11
00:00:26,160 --> 00:00:31,359
italy and i'm

12
00:00:28,320 --> 00:00:32,159
the project coordinator of the grass gs

13
00:00:31,359 --> 00:00:36,000
project and

14
00:00:32,159 --> 00:00:39,519
also co-founder of osgo foundation

15
00:00:36,000 --> 00:00:40,879
um yeah we thought to bring grass gis to

16
00:00:39,520 --> 00:00:43,760
the next level

17
00:00:40,879 --> 00:00:44,160
in the last years working on that the

18
00:00:43,760 --> 00:00:47,360
main

19
00:00:44,160 --> 00:00:49,839
author is zurin gebbert

20
00:00:47,360 --> 00:00:50,800
he spent most of the time initially on

21
00:00:49,840 --> 00:00:55,280
it and

22
00:00:50,800 --> 00:00:55,280
yeah we are working on this software

23
00:00:55,360 --> 00:00:59,039
this is our very outdated company

24
00:00:58,320 --> 00:01:02,480
picture

25
00:00:59,039 --> 00:01:06,000
it's let's say an approximation

26
00:01:02,480 --> 00:01:07,200
we have more people now but maybe giving

27
00:01:06,000 --> 00:01:08,880
you an idea

28
00:01:07,200 --> 00:01:11,040
river rhine in the background so we are

29
00:01:08,880 --> 00:01:13,920
near cologne

30
00:01:11,040 --> 00:01:15,520
and interestingly uh and we are in the

31
00:01:13,920 --> 00:01:17,200
open source context here

32
00:01:15,520 --> 00:01:19,039
you can make a living of open source

33
00:01:17,200 --> 00:01:21,200
software in case you didn't know

34
00:01:19,040 --> 00:01:23,200
uh the entire company along with our

35
00:01:21,200 --> 00:01:26,240
sister company terrestris

36
00:01:23,200 --> 00:01:29,439
uh which exists much longer since 2002

37
00:01:26,240 --> 00:01:33,439
is our full open source companies

38
00:01:29,439 --> 00:01:36,479
and this is something uh which i still

39
00:01:33,439 --> 00:01:39,439
try to repeat uh everywhere where i can

40
00:01:36,479 --> 00:01:40,560
because um yeah it's an it's an

41
00:01:39,439 --> 00:01:43,439
interesting

42
00:01:40,560 --> 00:01:44,960
uh way of developing software and

43
00:01:43,439 --> 00:01:47,839
offering services

44
00:01:44,960 --> 00:01:48,798
so what i'm talking about we had some

45
00:01:47,840 --> 00:01:51,119
idea

46
00:01:48,799 --> 00:01:53,200
uh it's a bit small i hope you can read

47
00:01:51,119 --> 00:01:55,040
it i wasn't really prepared for

48
00:01:53,200 --> 00:01:56,240
a low resolution but i can tell you

49
00:01:55,040 --> 00:02:00,240
what's written there

50
00:01:56,240 --> 00:02:02,158
bring the the algorithms to the data

51
00:02:00,240 --> 00:02:03,439
so we heard in the previous talk that

52
00:02:02,159 --> 00:02:06,960
data can

53
00:02:03,439 --> 00:02:09,359
increase and do increase non-linearity

54
00:02:06,960 --> 00:02:10,639
and in our case we are dealing with

55
00:02:09,360 --> 00:02:13,360
geospatial data

56
00:02:10,639 --> 00:02:15,760
including copernicus data so also there

57
00:02:13,360 --> 00:02:18,160
are petabytes of data everywhere

58
00:02:15,760 --> 00:02:18,959
and those have to be dealt with somehow

59
00:02:18,160 --> 00:02:22,400
and

60
00:02:18,959 --> 00:02:24,239
everybody is dealing with i o problems

61
00:02:22,400 --> 00:02:26,000
and disk storage and so forth and why

62
00:02:24,239 --> 00:02:28,800
not go where the data are

63
00:02:26,000 --> 00:02:30,800
but this also implies kind of bringing

64
00:02:28,800 --> 00:02:32,400
the user to the data so this paradigm

65
00:02:30,800 --> 00:02:35,440
you have probably heard of

66
00:02:32,400 --> 00:02:36,400
already several times and it's still

67
00:02:35,440 --> 00:02:39,920
valid

68
00:02:36,400 --> 00:02:41,920
um we wanted to check how to exploit

69
00:02:39,920 --> 00:02:43,440
the grass gs software particularly but

70
00:02:41,920 --> 00:02:45,679
not only purely grass

71
00:02:43,440 --> 00:02:46,800
but all the related ecosystem with the

72
00:02:45,680 --> 00:02:50,480
gdi

73
00:02:46,800 --> 00:02:52,800
approach ethersnap included as well

74
00:02:50,480 --> 00:02:54,399
and whatever you want to deploy yourself

75
00:02:52,800 --> 00:02:58,000
how to get this into some

76
00:02:54,400 --> 00:02:59,440
kind of cloud context so the original

77
00:02:58,000 --> 00:03:02,480
name was grass

78
00:02:59,440 --> 00:03:06,159
grass as a service g

79
00:03:02,480 --> 00:03:07,599
g r ras which is not so intuitive

80
00:03:06,159 --> 00:03:09,840
probably to pronounce

81
00:03:07,599 --> 00:03:11,040
for marketing reasons we then called it

82
00:03:09,840 --> 00:03:14,080
artenia

83
00:03:11,040 --> 00:03:16,239
um artenia is a sea creature which is

84
00:03:14,080 --> 00:03:17,840
like having tentacles and filtering the

85
00:03:16,239 --> 00:03:20,159
water so now we

86
00:03:17,840 --> 00:03:21,040
consider like something like data lake

87
00:03:20,159 --> 00:03:22,879
or

88
00:03:21,040 --> 00:03:24,480
the flood of information or whatever you

89
00:03:22,879 --> 00:03:28,079
want up to you

90
00:03:24,480 --> 00:03:30,000
and so with our uh analysis software we

91
00:03:28,080 --> 00:03:32,480
can go there and fish the relevant

92
00:03:30,000 --> 00:03:37,120
information and go for processing that

93
00:03:32,480 --> 00:03:39,440
of course core element here is grass gis

94
00:03:37,120 --> 00:03:41,519
and this software is if in case you are

95
00:03:39,440 --> 00:03:44,640
not aware of it

96
00:03:41,519 --> 00:03:45,200
under development since 1982 so way

97
00:03:44,640 --> 00:03:48,720
before

98
00:03:45,200 --> 00:03:52,879
i left school um i joined in

99
00:03:48,720 --> 00:03:56,080
let's say as a shy user in 1993

100
00:03:52,879 --> 00:03:57,920
and then moved on to basically yeah more

101
00:03:56,080 --> 00:04:02,879
or less coordinating it you know

102
00:03:57,920 --> 00:04:06,000
it's a bureaucracy means who is working

103
00:04:02,879 --> 00:04:09,760
can move things and i thought to

104
00:04:06,000 --> 00:04:11,840
contribute to that um

105
00:04:09,760 --> 00:04:13,840
yeah if you are not familiar with grassy

106
00:04:11,840 --> 00:04:14,799
itself we have something called grass

107
00:04:13,840 --> 00:04:18,720
database

108
00:04:14,799 --> 00:04:21,280
that is more or less a file based system

109
00:04:18,720 --> 00:04:22,079
with a sql database in the background as

110
00:04:21,279 --> 00:04:24,638
well

111
00:04:22,079 --> 00:04:26,240
but there are a few particular things

112
00:04:24,639 --> 00:04:28,080
one thing is called location and there

113
00:04:26,240 --> 00:04:30,240
are inside map sets that's more or less

114
00:04:28,080 --> 00:04:32,159
for the organization of the data

115
00:04:30,240 --> 00:04:34,960
you could also consider this as a

116
00:04:32,160 --> 00:04:37,120
workspace or as a project and subfolders

117
00:04:34,960 --> 00:04:39,198
so nothing dramatic but there's

118
00:04:37,120 --> 00:04:42,080
something related to that because

119
00:04:39,199 --> 00:04:43,360
this brings the possibility to offer

120
00:04:42,080 --> 00:04:45,440
user management

121
00:04:43,360 --> 00:04:47,120
so probably you do not want to share

122
00:04:45,440 --> 00:04:48,320
especially in a cloud context you don't

123
00:04:47,120 --> 00:04:50,320
want to do that

124
00:04:48,320 --> 00:04:52,320
share all data with everybody but you

125
00:04:50,320 --> 00:04:54,639
want to have a restrictive

126
00:04:52,320 --> 00:04:57,199
user model there and this is coming kind

127
00:04:54,639 --> 00:04:59,360
of implicit here

128
00:04:57,199 --> 00:05:00,479
then we have lots of algorithms we are

129
00:04:59,360 --> 00:05:04,639
talking about

130
00:05:00,479 --> 00:05:07,520
500 plus methods available

131
00:05:04,639 --> 00:05:09,440
majority is in the core it's vector

132
00:05:07,520 --> 00:05:12,400
analysis raster analysis

133
00:05:09,440 --> 00:05:14,000
volume so volumetric data analysis time

134
00:05:12,400 --> 00:05:16,960
series which is

135
00:05:14,000 --> 00:05:18,720
not so in terms of grass age it is new

136
00:05:16,960 --> 00:05:19,919
but it's already existing for seven

137
00:05:18,720 --> 00:05:21,919
years or something

138
00:05:19,919 --> 00:05:24,000
so you have space time cubes and you can

139
00:05:21,919 --> 00:05:26,960
go and analyze things

140
00:05:24,000 --> 00:05:28,960
with algebra as well and all this is

141
00:05:26,960 --> 00:05:30,719
already there you have image processing

142
00:05:28,960 --> 00:05:32,000
which we use for the copernicus data

143
00:05:30,720 --> 00:05:34,080
processing

144
00:05:32,000 --> 00:05:36,000
or metrological data interpretation and

145
00:05:34,080 --> 00:05:38,800
so forth and what you can do

146
00:05:36,000 --> 00:05:40,720
here since we are in a gis context you

147
00:05:38,800 --> 00:05:42,080
have the full integration between image

148
00:05:40,720 --> 00:05:44,400
processing and gis

149
00:05:42,080 --> 00:05:45,120
in one shell so it's not two distinct

150
00:05:44,400 --> 00:05:46,960
words

151
00:05:45,120 --> 00:05:48,960
i'm not interested in that i'm a

152
00:05:46,960 --> 00:05:50,239
geographer myself so i like to get

153
00:05:48,960 --> 00:05:52,159
things together

154
00:05:50,240 --> 00:05:55,360
and here you can do that and you can

155
00:05:52,160 --> 00:05:57,120
just smoothly go from one to the next

156
00:05:55,360 --> 00:05:58,720
so now the question is how to get this

157
00:05:57,120 --> 00:06:00,720
into the cloud

158
00:05:58,720 --> 00:06:01,840
and cloud means we want to have a

159
00:06:00,720 --> 00:06:05,120
restful api

160
00:06:01,840 --> 00:06:08,479
on top maybe to start with

161
00:06:05,120 --> 00:06:09,960
to list what data are there uh what does

162
00:06:08,479 --> 00:06:12,639
belong to whom space

163
00:06:09,960 --> 00:06:13,758
spatiotemporal dataset is offered as

164
00:06:12,639 --> 00:06:16,479
resources

165
00:06:13,759 --> 00:06:18,160
so you can then go there and do

166
00:06:16,479 --> 00:06:20,400
naturally

167
00:06:18,160 --> 00:06:22,080
computation on top of that enable usage

168
00:06:20,400 --> 00:06:23,599
of grass gis modules

169
00:06:22,080 --> 00:06:26,000
and they already mentioned user

170
00:06:23,600 --> 00:06:28,400
management so define different roles

171
00:06:26,000 --> 00:06:30,800
but in a cloud context where you pay as

172
00:06:28,400 --> 00:06:32,638
you go also for the resources

173
00:06:30,800 --> 00:06:34,880
you want to have some control over what

174
00:06:32,639 --> 00:06:37,360
you offer to the user for example

175
00:06:34,880 --> 00:06:38,400
you offer to the to the user being a

176
00:06:37,360 --> 00:06:40,560
provider

177
00:06:38,400 --> 00:06:42,318
a kind of flat rate but flat rate

178
00:06:40,560 --> 00:06:42,960
doesn't mean unlimited of course but it

179
00:06:42,319 --> 00:06:45,680
means

180
00:06:42,960 --> 00:06:46,239
flat rate in the context of what they

181
00:06:45,680 --> 00:06:48,080
want

182
00:06:46,240 --> 00:06:49,599
so you can go there and say you're

183
00:06:48,080 --> 00:06:51,840
restrict to uh

184
00:06:49,599 --> 00:06:53,360
it's like geofencing to a particular

185
00:06:51,840 --> 00:06:54,880
area of the world where you can compute

186
00:06:53,360 --> 00:06:56,240
things or amount of

187
00:06:54,880 --> 00:06:58,800
data volume and so on there are

188
00:06:56,240 --> 00:07:01,919
different possibilities and you can also

189
00:06:58,800 --> 00:07:04,160
expose uh the methods you have or the

190
00:07:01,919 --> 00:07:07,039
modules called in grass language

191
00:07:04,160 --> 00:07:09,520
uh selectively to the users and say okay

192
00:07:07,039 --> 00:07:11,759
we offer you this deck of functionality

193
00:07:09,520 --> 00:07:13,758
and if you want uh level two then you

194
00:07:11,759 --> 00:07:16,880
can also

195
00:07:13,759 --> 00:07:19,840
access the other one

196
00:07:16,880 --> 00:07:21,759
interestingly you want to avoid that one

197
00:07:19,840 --> 00:07:22,318
users overrides things of the others who

198
00:07:21,759 --> 00:07:24,400
have to

199
00:07:22,319 --> 00:07:26,000
have kind of data locking also natural

200
00:07:24,400 --> 00:07:28,239
but you have to implement it

201
00:07:26,000 --> 00:07:31,759
and this is also coming already with

202
00:07:28,240 --> 00:07:35,199
grass.js itself so if you take

203
00:07:31,759 --> 00:07:36,960
upgate install grass or dnf install

204
00:07:35,199 --> 00:07:39,680
grass or whatever you do

205
00:07:36,960 --> 00:07:41,840
docker pull grass yeah then you have the

206
00:07:39,680 --> 00:07:42,639
possibility to already use a network

207
00:07:41,840 --> 00:07:45,440
drive

208
00:07:42,639 --> 00:07:46,479
and using the unix or windows user

209
00:07:45,440 --> 00:07:48,479
management

210
00:07:46,479 --> 00:07:49,599
you have to have access or not and all

211
00:07:48,479 --> 00:07:53,599
this is now

212
00:07:49,599 --> 00:07:55,599
exposed through actinia itself as well

213
00:07:53,599 --> 00:07:58,479
we have two kinds of storages we have

214
00:07:55,599 --> 00:08:00,878
the persistent read-only

215
00:07:58,479 --> 00:08:02,159
storage where you offer base cartography

216
00:08:00,879 --> 00:08:05,919
for example

217
00:08:02,160 --> 00:08:08,879
like the original data like what it is

218
00:08:05,919 --> 00:08:10,240
elevation model copernicus data land use

219
00:08:08,879 --> 00:08:12,160
map whatever it is

220
00:08:10,240 --> 00:08:14,240
you already provide to your users it

221
00:08:12,160 --> 00:08:16,080
would go there because you do not want

222
00:08:14,240 --> 00:08:18,080
that anyone modifies them

223
00:08:16,080 --> 00:08:20,560
but the users through the computation

224
00:08:18,080 --> 00:08:22,800
here are different workers or notes

225
00:08:20,560 --> 00:08:25,120
um they want to write their own stuff

226
00:08:22,800 --> 00:08:28,479
and so that goes into the user space

227
00:08:25,120 --> 00:08:29,759
and this is also connected to kind of

228
00:08:28,479 --> 00:08:32,240
garbage collection

229
00:08:29,759 --> 00:08:33,039
for example in ephemeral processing you

230
00:08:32,240 --> 00:08:35,279
say the data

231
00:08:33,039 --> 00:08:37,360
the results are available for whatever

232
00:08:35,279 --> 00:08:40,000
you put there 24 hours and they are

233
00:08:37,360 --> 00:08:42,000
deleted automatically just housekeeping

234
00:08:40,000 --> 00:08:44,479
in order to avoid the too much storage

235
00:08:42,000 --> 00:08:44,479
is used

236
00:08:45,200 --> 00:08:48,800
so in the end you have this grass

237
00:08:47,360 --> 00:08:51,279
database over there

238
00:08:48,800 --> 00:08:53,599
which is the data storage can be

239
00:08:51,279 --> 00:08:55,200
whatever i come to it later

240
00:08:53,600 --> 00:08:58,399
and you have the different workers

241
00:08:55,200 --> 00:09:01,040
equipped with grass gis also gdal pedal

242
00:08:58,399 --> 00:09:04,560
pedal as well i forgot to mention before

243
00:09:01,040 --> 00:09:04,560
whatever you put there basically

244
00:09:05,200 --> 00:09:11,839
the user management is done in in redis

245
00:09:09,040 --> 00:09:13,680
and uh there we can we have an

246
00:09:11,839 --> 00:09:15,680
irradiance instance and

247
00:09:13,680 --> 00:09:17,120
the systems are communicating to each

248
00:09:15,680 --> 00:09:20,160
other and

249
00:09:17,120 --> 00:09:21,600
so forth everything then can be

250
00:09:20,160 --> 00:09:23,279
deployed on different cloud

251
00:09:21,600 --> 00:09:24,240
infrastructures so this is all docker

252
00:09:23,279 --> 00:09:26,560
based

253
00:09:24,240 --> 00:09:29,760
we have running instances in openshift

254
00:09:26,560 --> 00:09:32,560
cube anita's and openstack

255
00:09:29,760 --> 00:09:33,600
and also others we're using terraform in

256
00:09:32,560 --> 00:09:37,040
order to

257
00:09:33,600 --> 00:09:39,760
deploy machines so kind of

258
00:09:37,040 --> 00:09:41,040
if actinia wants to scale up we can say

259
00:09:39,760 --> 00:09:43,920
okay you can order

260
00:09:41,040 --> 00:09:46,079
new machines by yourself and after

261
00:09:43,920 --> 00:09:48,160
consumption means the finishing of the

262
00:09:46,080 --> 00:09:52,560
process the machines are destroyed

263
00:09:48,160 --> 00:09:52,560
in order to not generate further cost

264
00:09:53,440 --> 00:09:57,519
then we need a load balancer so the

265
00:09:55,600 --> 00:10:00,640
incoming requests are coming here

266
00:09:57,519 --> 00:10:02,720
from through the api but you want that

267
00:10:00,640 --> 00:10:05,120
let's say the cloud resources are

268
00:10:02,720 --> 00:10:07,600
optimally used for that there's a

269
00:10:05,120 --> 00:10:09,440
load balancer then sending stuff to to

270
00:10:07,600 --> 00:10:13,200
the different workers and

271
00:10:09,440 --> 00:10:14,320
ideally well the data are visible anyway

272
00:10:13,200 --> 00:10:17,200
but you also

273
00:10:14,320 --> 00:10:18,079
in case you have a heterogeneous you

274
00:10:17,200 --> 00:10:20,800
have heterogeneous

275
00:10:18,079 --> 00:10:22,319
cloud resources like these instances

276
00:10:20,800 --> 00:10:26,079
with different flavors

277
00:10:22,320 --> 00:10:28,160
you want to send them to the right

278
00:10:26,079 --> 00:10:30,560
worker in order to be able to compute

279
00:10:28,160 --> 00:10:30,560
the job

280
00:10:30,800 --> 00:10:35,519
okay now uh how to control all this

281
00:10:36,880 --> 00:10:42,320
uh we are having uh json files here we

282
00:10:40,640 --> 00:10:45,040
have the rest api

283
00:10:42,320 --> 00:10:47,279
so there are requests like get location

284
00:10:45,040 --> 00:10:47,760
so that is a you can use curl or we have

285
00:10:47,279 --> 00:10:50,480
some in

286
00:10:47,760 --> 00:10:52,800
other interface or the web based system

287
00:10:50,480 --> 00:10:53,519
or maybe in the future also qgis based

288
00:10:52,800 --> 00:10:55,680
one

289
00:10:53,519 --> 00:10:57,120
you can call it from grass command line

290
00:10:55,680 --> 00:10:59,439
so different ways of

291
00:10:57,120 --> 00:11:00,480
retrieving information you can query the

292
00:10:59,440 --> 00:11:03,839
system and ask

293
00:11:00,480 --> 00:11:06,640
okay what data set are already there and

294
00:11:03,839 --> 00:11:08,000
um there could be yeah there's for

295
00:11:06,640 --> 00:11:11,600
example the global

296
00:11:08,000 --> 00:11:14,399
in our system the global srtm model

297
00:11:11,600 --> 00:11:15,760
um the elevation model that is a three

298
00:11:14,399 --> 00:11:19,360
200 something

299
00:11:15,760 --> 00:11:21,120
gigabyte geotiff file and in case you

300
00:11:19,360 --> 00:11:23,279
are working with elevation model

301
00:11:21,120 --> 00:11:24,720
uh i think most of you will only be

302
00:11:23,279 --> 00:11:27,040
interested in a subset

303
00:11:24,720 --> 00:11:28,000
but each of you in a different subset so

304
00:11:27,040 --> 00:11:30,480
the idea of cloud

305
00:11:28,000 --> 00:11:31,120
is we offer it once and then you can

306
00:11:30,480 --> 00:11:33,040
just

307
00:11:31,120 --> 00:11:34,480
operate on the area of interest and

308
00:11:33,040 --> 00:11:38,160
which which could be

309
00:11:34,480 --> 00:11:39,279
a change dynamically and then as it is

310
00:11:38,160 --> 00:11:42,160
rest style you

311
00:11:39,279 --> 00:11:43,279
uh chain more stuff there you say kind

312
00:11:42,160 --> 00:11:46,319
of zooming into

313
00:11:43,279 --> 00:11:48,959
uh north carolina that is uh some

314
00:11:46,320 --> 00:11:50,720
geo sample data set uh what is inside so

315
00:11:48,959 --> 00:11:51,359
where north carolina here and then you

316
00:11:50,720 --> 00:11:53,279
see

317
00:11:51,360 --> 00:11:55,360
what data sets are there and you can go

318
00:11:53,279 --> 00:11:57,439
on and you can go further

319
00:11:55,360 --> 00:11:59,519
look into the maps and you see there's

320
00:11:57,440 --> 00:12:02,160
already a render

321
00:11:59,519 --> 00:12:02,639
endpoint which means if you query the

322
00:12:02,160 --> 00:12:04,959
system

323
00:12:02,639 --> 00:12:07,519
and by the way this is online reachable

324
00:12:04,959 --> 00:12:10,319
under artenia mundial sd you can go and

325
00:12:07,519 --> 00:12:12,079
play there's the demo user available

326
00:12:10,320 --> 00:12:13,360
then you can go into the dive into these

327
00:12:12,079 --> 00:12:16,880
data and also

328
00:12:13,360 --> 00:12:20,399
use them for computation

329
00:12:16,880 --> 00:12:21,839
now user defined processing in this case

330
00:12:20,399 --> 00:12:23,680
you don't retrieve but you send

331
00:12:21,839 --> 00:12:24,560
something to the system and say please

332
00:12:23,680 --> 00:12:26,638
do this

333
00:12:24,560 --> 00:12:28,479
and that is a post request you see over

334
00:12:26,639 --> 00:12:31,920
there post request

335
00:12:28,480 --> 00:12:35,279
and um you say i want to compute

336
00:12:31,920 --> 00:12:37,199
the slope of some map

337
00:12:35,279 --> 00:12:39,519
and i want the result as a geotiff

338
00:12:37,200 --> 00:12:40,000
please and what's also possible by the

339
00:12:39,519 --> 00:12:42,399
way

340
00:12:40,000 --> 00:12:43,360
you can also give it a url it's not

341
00:12:42,399 --> 00:12:46,639
shown here because

342
00:12:43,360 --> 00:12:47,200
too long but you can specify url in this

343
00:12:46,639 --> 00:12:49,279
case

344
00:12:47,200 --> 00:12:50,959
this data set will be retrieved first

345
00:12:49,279 --> 00:12:53,680
and then

346
00:12:50,959 --> 00:12:55,760
computation being done on top of that or

347
00:12:53,680 --> 00:12:56,319
you intersect with data already there or

348
00:12:55,760 --> 00:12:58,000
you

349
00:12:56,320 --> 00:12:59,760
fetch different from different data

350
00:12:58,000 --> 00:13:02,079
sources and compute stuff

351
00:12:59,760 --> 00:13:03,439
and eventually you retrieve either a

352
00:13:02,079 --> 00:13:05,920
vector file or

353
00:13:03,440 --> 00:13:08,880
raster file or you dump it into a

354
00:13:05,920 --> 00:13:12,240
postgis database or whatever you prefer

355
00:13:08,880 --> 00:13:14,480
and through this in json style you can

356
00:13:12,240 --> 00:13:16,000
write custom process chains

357
00:13:14,480 --> 00:13:18,160
already mentioned grass modules are

358
00:13:16,000 --> 00:13:20,480
there importer exporter is there

359
00:13:18,160 --> 00:13:23,199
and then you can also bring in your own

360
00:13:20,480 --> 00:13:26,560
python scripts and those can be whatever

361
00:13:23,200 --> 00:13:28,079
and if you say oh but python no idea i

362
00:13:26,560 --> 00:13:30,959
still have my good old

363
00:13:28,079 --> 00:13:32,719
90th shell scripts they work so nicely

364
00:13:30,959 --> 00:13:34,638
no need to rewrite them you just

365
00:13:32,720 --> 00:13:36,160
wrap them into a python script and hang

366
00:13:34,639 --> 00:13:38,000
them in and you are done

367
00:13:36,160 --> 00:13:39,920
so it's not that you have to rewrite

368
00:13:38,000 --> 00:13:42,800
everything but you can just

369
00:13:39,920 --> 00:13:44,800
um make it appear a python script and

370
00:13:42,800 --> 00:13:46,319
the system is happy with that

371
00:13:44,800 --> 00:13:48,000
we have also wrapped you find this on

372
00:13:46,320 --> 00:13:50,800
github and docker hub

373
00:13:48,000 --> 00:13:51,680
snap is a snap we made a docker image

374
00:13:50,800 --> 00:13:53,439
out of that

375
00:13:51,680 --> 00:13:55,519
by the way it's a fraction of the

376
00:13:53,440 --> 00:13:56,959
original size

377
00:13:55,519 --> 00:13:59,680
there are some funny things in the

378
00:13:56,959 --> 00:14:02,719
original like full java and so forth

379
00:13:59,680 --> 00:14:03,359
this can be heavily reduced and through

380
00:14:02,720 --> 00:14:06,959
that we

381
00:14:03,360 --> 00:14:09,040
build up the entire stack so how does a

382
00:14:06,959 --> 00:14:11,359
curl request look like so there's of

383
00:14:09,040 --> 00:14:12,480
course curl then demo user please steal

384
00:14:11,360 --> 00:14:16,000
the password it's

385
00:14:12,480 --> 00:14:16,880
public um you send a post there a

386
00:14:16,000 --> 00:14:19,120
process chain

387
00:14:16,880 --> 00:14:21,600
it's only written like a variable there

388
00:14:19,120 --> 00:14:22,560
this is essentially a file a json file

389
00:14:21,600 --> 00:14:25,360
or maybe

390
00:14:22,560 --> 00:14:27,760
you put it into a variable up to you and

391
00:14:25,360 --> 00:14:30,079
this is then sent to this endpoint here

392
00:14:27,760 --> 00:14:31,040
and it will do in this case asynchronous

393
00:14:30,079 --> 00:14:34,079
processing

394
00:14:31,040 --> 00:14:36,639
that means with synchronous processing

395
00:14:34,079 --> 00:14:37,120
you say okay do that and i wait till you

396
00:14:36,639 --> 00:14:39,279
are done

397
00:14:37,120 --> 00:14:41,199
and it comes back to me but in case the

398
00:14:39,279 --> 00:14:42,880
job is something complex and it would

399
00:14:41,199 --> 00:14:43,599
run for several hours you don't want to

400
00:14:42,880 --> 00:14:45,439
sit

401
00:14:43,600 --> 00:14:47,040
and block your terminal with that you

402
00:14:45,440 --> 00:14:50,480
use the asynchronous

403
00:14:47,040 --> 00:14:51,680
endpoint and then it is sent there and

404
00:14:50,480 --> 00:14:54,959
you have a

405
00:14:51,680 --> 00:14:55,760
url with a resource of status and you

406
00:14:54,959 --> 00:14:57,839
just ping it

407
00:14:55,760 --> 00:14:59,279
from time to time this you can automate

408
00:14:57,839 --> 00:15:01,120
of course

409
00:14:59,279 --> 00:15:02,880
if you have a web interface then it

410
00:15:01,120 --> 00:15:06,240
would

411
00:15:02,880 --> 00:15:09,439
notify you once it is done so both

412
00:15:06,240 --> 00:15:11,600
options are available which means

413
00:15:09,440 --> 00:15:13,440
polling in this case so you get the

414
00:15:11,600 --> 00:15:15,120
status and once it is done

415
00:15:13,440 --> 00:15:17,040
you get the resource you are at back

416
00:15:15,120 --> 00:15:20,000
which is the duotif or

417
00:15:17,040 --> 00:15:23,120
whatever it is and then you can retrieve

418
00:15:20,000 --> 00:15:23,120
the map and you are done

419
00:15:24,320 --> 00:15:28,800
uh what else is there um we have been

420
00:15:26,959 --> 00:15:29,680
implementing processing chains for

421
00:15:28,800 --> 00:15:32,479
sentinel one

422
00:15:29,680 --> 00:15:34,079
and sentinel-2 data also for landsat not

423
00:15:32,480 --> 00:15:36,320
written here

424
00:15:34,079 --> 00:15:37,439
there are endpoints like ndvi so for

425
00:15:36,320 --> 00:15:39,680
example you have

426
00:15:37,440 --> 00:15:41,759
a certain you're interested in

427
00:15:39,680 --> 00:15:43,120
normalized differences vegetation index

428
00:15:41,759 --> 00:15:45,360
a very common index

429
00:15:43,120 --> 00:15:48,079
in used in agriculture and elsewhere

430
00:15:45,360 --> 00:15:52,000
also to find green areas in urban

431
00:15:48,079 --> 00:15:54,880
uh in urban areas you can use that

432
00:15:52,000 --> 00:15:55,759
you just say okay i want to analyze in

433
00:15:54,880 --> 00:15:58,639
this area

434
00:15:55,759 --> 00:16:00,079
and maybe for the year 2018 from first

435
00:15:58,639 --> 00:16:03,519
of april to

436
00:16:00,079 --> 00:16:05,758
end of june um search something

437
00:16:03,519 --> 00:16:07,199
a scene with less than one percent cloud

438
00:16:05,759 --> 00:16:09,040
and do the ndvi

439
00:16:07,199 --> 00:16:11,040
so this is more or less one endpoint and

440
00:16:09,040 --> 00:16:12,560
then you say just these few metadata

441
00:16:11,040 --> 00:16:15,599
send it to the system

442
00:16:12,560 --> 00:16:18,800
and you get stuff back we have

443
00:16:15,600 --> 00:16:19,120
connectors to essa api hub that means

444
00:16:18,800 --> 00:16:21,359
there

445
00:16:19,120 --> 00:16:24,079
are the sentinel data are retrieved from

446
00:16:21,360 --> 00:16:26,639
one way

447
00:16:24,079 --> 00:16:28,319
we are in discussion also because we are

448
00:16:26,639 --> 00:16:30,240
involved in the open eo project which

449
00:16:28,320 --> 00:16:32,320
was mentioned earlier

450
00:16:30,240 --> 00:16:34,320
to connect to the diaz platforms that

451
00:16:32,320 --> 00:16:38,000
are copernicus platforms for

452
00:16:34,320 --> 00:16:40,240
sentinel processing the amazon

453
00:16:38,000 --> 00:16:42,399
aws and google cloud storage we have

454
00:16:40,240 --> 00:16:45,759
also some deployments there

455
00:16:42,399 --> 00:16:46,560
advantage is of those the sentinel data

456
00:16:45,759 --> 00:16:48,160
already

457
00:16:46,560 --> 00:16:50,160
unpacked there you do not have to

458
00:16:48,160 --> 00:16:53,360
retrieve the entire

459
00:16:50,160 --> 00:16:55,680
full zip file of one gigabyte size if

460
00:16:53,360 --> 00:16:57,600
you are only interested in two channels

461
00:16:55,680 --> 00:16:59,199
yeah then you can switch to that

462
00:16:57,600 --> 00:17:02,560
provider

463
00:16:59,199 --> 00:17:05,438
you can see it's flexible

464
00:17:02,560 --> 00:17:06,720
our idea is to not be locked into one

465
00:17:05,439 --> 00:17:10,640
single platform

466
00:17:06,720 --> 00:17:12,480
but to have the possibility to uh

467
00:17:10,640 --> 00:17:13,919
well to deploy it here and there and use

468
00:17:12,480 --> 00:17:17,280
the best so

469
00:17:13,919 --> 00:17:18,000
example here sentinel two processes the

470
00:17:17,280 --> 00:17:21,119
endpoint

471
00:17:18,000 --> 00:17:21,919
compute ndvi and use this scene the

472
00:17:21,119 --> 00:17:24,159
scene i got

473
00:17:21,919 --> 00:17:25,679
the c name i got from somewhere but you

474
00:17:24,160 --> 00:17:28,960
can also search for it

475
00:17:25,679 --> 00:17:30,160
and then as before you can pull for the

476
00:17:28,960 --> 00:17:32,400
result and

477
00:17:30,160 --> 00:17:34,240
then you get the ndvi back and this

478
00:17:32,400 --> 00:17:36,160
you'll get like a screenshot so previews

479
00:17:34,240 --> 00:17:38,960
that you'll need see what you have done

480
00:17:36,160 --> 00:17:42,000
plus the geotiff file as well which is

481
00:17:38,960 --> 00:17:42,000
of course a bit larger

482
00:17:43,200 --> 00:17:47,600
okay some more features you can also

483
00:17:45,440 --> 00:17:49,760
write you can write to google

484
00:17:47,600 --> 00:17:50,639
cloud storage you can write to your own

485
00:17:49,760 --> 00:17:53,760
if you deploy

486
00:17:50,640 --> 00:17:54,960
actinia yourself could be your laptop

487
00:17:53,760 --> 00:17:56,720
even

488
00:17:54,960 --> 00:17:59,280
then you can naturally write also there

489
00:17:56,720 --> 00:18:03,039
or those two s3 buckets

490
00:17:59,280 --> 00:18:03,840
then we have added for the grass users

491
00:18:03,039 --> 00:18:07,039
here

492
00:18:03,840 --> 00:18:08,000
the possibility of a grass sorry often

493
00:18:07,039 --> 00:18:10,240
actinia

494
00:18:08,000 --> 00:18:12,640
command execution that means you have

495
00:18:10,240 --> 00:18:14,080
one grass command you just write ace in

496
00:18:12,640 --> 00:18:15,360
front of it of course you need to have

497
00:18:14,080 --> 00:18:17,120
the credentials

498
00:18:15,360 --> 00:18:19,600
and then the same command is sent to the

499
00:18:17,120 --> 00:18:20,239
cloud so not locally executed but in the

500
00:18:19,600 --> 00:18:22,159
cloud

501
00:18:20,240 --> 00:18:23,679
so you can play around prototype on your

502
00:18:22,160 --> 00:18:25,600
laptop and once you know

503
00:18:23,679 --> 00:18:26,960
you set the resolution this is one of

504
00:18:25,600 --> 00:18:28,719
the nice glass features

505
00:18:26,960 --> 00:18:31,280
to the original resolution and do the

506
00:18:28,720 --> 00:18:33,919
heavy computation in the cloud itself

507
00:18:31,280 --> 00:18:35,280
as mentioned we have an open eo support

508
00:18:33,919 --> 00:18:37,039
there we are one of the back-end

509
00:18:35,280 --> 00:18:38,799
providers

510
00:18:37,039 --> 00:18:40,799
we will probably not fully implement

511
00:18:38,799 --> 00:18:42,240
everything but no back-end implements

512
00:18:40,799 --> 00:18:44,960
everything but the

513
00:18:42,240 --> 00:18:45,760
the relevant parts and you find on

514
00:18:44,960 --> 00:18:48,400
github

515
00:18:45,760 --> 00:18:49,280
the related information also on open

516
00:18:48,400 --> 00:18:52,640
eorg

517
00:18:49,280 --> 00:18:55,200
site that's a horizon european project

518
00:18:52,640 --> 00:18:55,200
by the way

519
00:18:55,360 --> 00:18:59,280
if you haven't been here this morning uh

520
00:18:57,280 --> 00:19:00,240
you can see in the video archive of

521
00:18:59,280 --> 00:19:03,120
today

522
00:19:00,240 --> 00:19:04,559
the related talks and then eventually

523
00:19:03,120 --> 00:19:07,280
something very interested

524
00:19:04,559 --> 00:19:08,000
interesting called artenia algebra that

525
00:19:07,280 --> 00:19:10,480
is something

526
00:19:08,000 --> 00:19:13,039
to do massive computation in parallel

527
00:19:10,480 --> 00:19:15,280
since we are on cloud we also want to

528
00:19:13,039 --> 00:19:16,400
make good use of that and imagine you

529
00:19:15,280 --> 00:19:18,320
want to compute

530
00:19:16,400 --> 00:19:20,880
something of an entire country

531
00:19:18,320 --> 00:19:23,039
watersheds vegetation index

532
00:19:20,880 --> 00:19:25,039
run off whatever you can imagine as i

533
00:19:23,039 --> 00:19:28,400
mentioned can be gis can be

534
00:19:25,039 --> 00:19:31,520
earth observation then all the stuff

535
00:19:28,400 --> 00:19:33,919
is parallelized and executed in much

536
00:19:31,520 --> 00:19:35,200
faster time of course you need to have

537
00:19:33,919 --> 00:19:39,039
some more resources

538
00:19:35,200 --> 00:19:42,559
for that so um

539
00:19:39,039 --> 00:19:44,640
what's upcoming um we are

540
00:19:42,559 --> 00:19:46,240
almost through with implementation of

541
00:19:44,640 --> 00:19:48,880
process self description

542
00:19:46,240 --> 00:19:50,240
that means what you saw this is almost

543
00:19:48,880 --> 00:19:53,679
last like

544
00:19:50,240 --> 00:19:55,600
what you saw um that we can see what

545
00:19:53,679 --> 00:19:57,520
data are there we also want to have

546
00:19:55,600 --> 00:19:59,840
what methods are there yeah a kind of

547
00:19:57,520 --> 00:20:02,080
catalog and if you want to

548
00:19:59,840 --> 00:20:03,600
uh maybe then wrap around something like

549
00:20:02,080 --> 00:20:07,840
wps style

550
00:20:03,600 --> 00:20:07,840
yeah then you can make you

