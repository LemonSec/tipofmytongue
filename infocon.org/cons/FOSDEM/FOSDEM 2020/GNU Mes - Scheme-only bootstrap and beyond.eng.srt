1
00:00:07,279 --> 00:00:09,440
okay

2
00:00:09,599 --> 00:00:16,880
hello i'm janika this talk

3
00:00:13,440 --> 00:00:20,160
is about gnomes and the ongoing

4
00:00:16,880 --> 00:00:22,799
effort to remove the binary

5
00:00:20,160 --> 00:00:25,759
seeds that we inject into our free

6
00:00:22,800 --> 00:00:25,760
software stack

7
00:00:26,720 --> 00:00:30,320
hopefully you will learn what this new

8
00:00:29,119 --> 00:00:33,840
bootstrapping how

9
00:00:30,320 --> 00:00:33,840
hype is all about

10
00:00:34,239 --> 00:00:40,399
so to crack this chicken and nag

11
00:00:37,440 --> 00:00:43,120
problem which bootstrapping is i wrote

12
00:00:40,399 --> 00:00:43,120
gnomes

13
00:00:43,600 --> 00:00:49,920
messy c is a c compiler written in a

14
00:00:46,719 --> 00:00:52,559
subset of gel scheme

15
00:00:49,920 --> 00:00:53,520
and it comes with mess which is a scheme

16
00:00:52,559 --> 00:00:58,160
interpreter

17
00:00:53,520 --> 00:01:00,640
written in c

18
00:00:58,160 --> 00:01:01,358
from the early days of computing we know

19
00:01:00,640 --> 00:01:05,119
that uh

20
00:01:01,359 --> 00:01:07,280
lisp is an is a good way

21
00:01:05,119 --> 00:01:08,640
to make the jump from a low-level

22
00:01:07,280 --> 00:01:12,880
language into a

23
00:01:08,640 --> 00:01:16,320
high-level elegant language

24
00:01:12,880 --> 00:01:20,240
so you may wonder before mess

25
00:01:16,320 --> 00:01:20,240
how did we bootstrap our systems

26
00:01:21,520 --> 00:01:31,280
well actually we don't

27
00:01:27,759 --> 00:01:32,079
well that's normally because canoe geeks

28
00:01:31,280 --> 00:01:35,040
as well as

29
00:01:32,079 --> 00:01:37,600
nixos actually use some kind of

30
00:01:35,040 --> 00:01:37,600
bootstrap

31
00:01:39,200 --> 00:01:47,439
however ludovic cortes a developer of

32
00:01:43,600 --> 00:01:50,158
canoe geeks noticed that um

33
00:01:47,439 --> 00:01:51,520
the boots and the bootstrap binaries

34
00:01:50,159 --> 00:01:54,079
that were bootstrapped from

35
00:01:51,520 --> 00:01:54,960
are still very large and that's a

36
00:01:54,079 --> 00:01:57,520
problem

37
00:01:54,960 --> 00:01:59,839
so he should he suggested we remove

38
00:01:57,520 --> 00:01:59,839
those

39
00:02:01,200 --> 00:02:07,759
in the 80s already

40
00:02:04,320 --> 00:02:11,519
ken thompson uh

41
00:02:07,759 --> 00:02:14,319
gave a talk and saw that um

42
00:02:11,520 --> 00:02:16,080
we have actually a pretty big problem in

43
00:02:14,319 --> 00:02:18,079
computing

44
00:02:16,080 --> 00:02:19,440
um he called that the trusting trust

45
00:02:18,080 --> 00:02:22,959
attack

46
00:02:19,440 --> 00:02:23,840
and uh so what do we do when a

47
00:02:22,959 --> 00:02:27,280
researcher

48
00:02:23,840 --> 00:02:30,640
points out a problem that's possibly

49
00:02:27,280 --> 00:02:33,440
going to affect everyone and is very

50
00:02:30,640 --> 00:02:33,440
hard to solve

51
00:02:35,040 --> 00:02:38,879
so usually we just ignore it

52
00:02:42,640 --> 00:02:50,799
um and we want to change that so

53
00:02:47,519 --> 00:02:54,400
um with gnu geeks and also

54
00:02:50,800 --> 00:02:57,840
nixos we have already uh

55
00:02:54,400 --> 00:02:59,360
a bootstrapping story so nixon's and

56
00:02:57,840 --> 00:03:01,080
geeks are interesting from a

57
00:02:59,360 --> 00:03:03,680
bootstrapping

58
00:03:01,080 --> 00:03:04,560
experimentation and research point of

59
00:03:03,680 --> 00:03:07,360
view

60
00:03:04,560 --> 00:03:08,879
because the package dependencies in

61
00:03:07,360 --> 00:03:12,000
geeks

62
00:03:08,879 --> 00:03:14,480
form an acyclic directed graph

63
00:03:12,000 --> 00:03:15,519
which means there are no bootstrapping

64
00:03:14,480 --> 00:03:17,920
loops

65
00:03:15,519 --> 00:03:20,400
that's unlike most other software

66
00:03:17,920 --> 00:03:24,799
distributions that are full of

67
00:03:20,400 --> 00:03:24,800
loops that you would need to break

68
00:03:28,319 --> 00:03:31,518
the critical importance of this was

69
00:03:30,879 --> 00:03:34,959
noted

70
00:03:31,519 --> 00:03:37,599
by bitcoin developer carl dong

71
00:03:34,959 --> 00:03:39,599
he gave a talk about this at the

72
00:03:37,599 --> 00:03:43,040
breaking bitcoin conference

73
00:03:39,599 --> 00:03:43,518
last summer i warmly recommend that talk

74
00:03:43,040 --> 00:03:47,840
it will

75
00:03:43,519 --> 00:03:47,840
take only 18 minutes of your time

76
00:03:49,120 --> 00:03:56,480
carl dong explains how

77
00:03:52,319 --> 00:04:00,560
by wishing to provide the community

78
00:03:56,480 --> 00:04:03,119
with trustable binary downloads

79
00:04:00,560 --> 00:04:04,080
they have implemented a githian that's a

80
00:04:03,120 --> 00:04:09,120
system

81
00:04:04,080 --> 00:04:09,120
that uses reproducible builds to do so

82
00:04:10,560 --> 00:04:17,839
so in computing

83
00:04:14,000 --> 00:04:19,440
bootstrap is slang for doing something

84
00:04:17,839 --> 00:04:23,599
which is actually

85
00:04:19,440 --> 00:04:26,719
impossible to do for example

86
00:04:23,600 --> 00:04:29,840
say say that you

87
00:04:26,720 --> 00:04:32,400
wrote the very first c compiler

88
00:04:29,840 --> 00:04:33,119
and you wrote it in c and you called it

89
00:04:32,400 --> 00:04:36,638
gnu

90
00:04:33,120 --> 00:04:39,919
cc it is impossible

91
00:04:36,639 --> 00:04:43,840
to compile that very first c source code

92
00:04:39,919 --> 00:04:43,840
into a working gcc binary

93
00:04:45,360 --> 00:04:50,479
so what to do when you're confronted

94
00:04:48,720 --> 00:04:52,960
with an impossible task

95
00:04:50,479 --> 00:04:57,360
but you know that something quite

96
00:04:52,960 --> 00:05:00,320
similar has been done before

97
00:04:57,360 --> 00:05:01,199
you just asked grandma so grandma tell

98
00:05:00,320 --> 00:05:05,360
me again

99
00:05:01,199 --> 00:05:08,560
how did you make that yogurt well son

100
00:05:05,360 --> 00:05:09,440
you get some fresh milk must be good

101
00:05:08,560 --> 00:05:12,160
milk

102
00:05:09,440 --> 00:05:14,560
and you just take some leftover yogurts

103
00:05:12,160 --> 00:05:18,320
from yesterday

104
00:05:14,560 --> 00:05:19,759
okay so with that wisdom uh we can now

105
00:05:18,320 --> 00:05:25,120
create our second

106
00:05:19,759 --> 00:05:29,840
gcc compiler so we take our gcc source

107
00:05:25,120 --> 00:05:29,840
and we compile it into a working binary

108
00:05:31,440 --> 00:05:40,080
so while this looks like ordinary milk

109
00:05:35,680 --> 00:05:43,360
it actually um is

110
00:05:40,080 --> 00:05:46,000
a bit of software that has been

111
00:05:43,360 --> 00:05:48,240
carefully crafted it's actually it's a

112
00:05:46,000 --> 00:05:52,479
masterpiece

113
00:05:48,240 --> 00:05:54,800
a work of art it's bug free

114
00:05:52,479 --> 00:05:56,639
uh it has been the the difficult parts

115
00:05:54,800 --> 00:05:59,840
have been peer-reviewed

116
00:05:56,639 --> 00:06:02,960
and if at all possible uh maybe

117
00:05:59,840 --> 00:06:06,239
a pair programmed some difficult bits or

118
00:06:02,960 --> 00:06:10,000
if possible we even apply formal methods

119
00:06:06,240 --> 00:06:14,080
to prove that that this second compiler

120
00:06:10,000 --> 00:06:14,080
of ours will be bug free

121
00:06:16,800 --> 00:06:23,680
then we apply the recipe

122
00:06:21,680 --> 00:06:25,280
and we even share our recipe so that

123
00:06:23,680 --> 00:06:28,479
others may reproduce

124
00:06:25,280 --> 00:06:32,239
the results that we got and

125
00:06:28,479 --> 00:06:35,840
produce the same second compiler

126
00:06:32,240 --> 00:06:38,639
and lo and behold uh we're reproducible

127
00:06:35,840 --> 00:06:39,919
we got this same second compiler and as

128
00:06:38,639 --> 00:06:43,039
long as

129
00:06:39,919 --> 00:06:46,840
uh they follow exactly our recipe and

130
00:06:43,039 --> 00:06:50,159
um they use exactly our first

131
00:06:46,840 --> 00:06:53,840
compiler um

132
00:06:50,160 --> 00:06:53,840
then we're reproducible

133
00:06:54,319 --> 00:07:00,880
and we're just as safe

134
00:06:57,680 --> 00:07:03,840
as our first compiler was

135
00:07:00,880 --> 00:07:03,840
actually

136
00:07:03,919 --> 00:07:08,880
so what follows from this is that

137
00:07:06,280 --> 00:07:10,719
reproducibility is critical but it's not

138
00:07:08,880 --> 00:07:13,039
enough

139
00:07:10,720 --> 00:07:14,000
and even reproducibility with clean

140
00:07:13,039 --> 00:07:17,840
source code

141
00:07:14,000 --> 00:07:17,840
is not enough

142
00:07:18,319 --> 00:07:26,240
so carl went looking for

143
00:07:21,440 --> 00:07:26,240
something else and found it in geeks

144
00:07:29,199 --> 00:07:36,160
uh so he he noticed that um

145
00:07:32,639 --> 00:07:40,880
bitcoin with gideon in order to

146
00:07:36,160 --> 00:07:43,199
provide uh trusted uh binary downloads

147
00:07:40,880 --> 00:07:44,000
uh when you start to get in build it all

148
00:07:43,199 --> 00:07:47,840
it starts

149
00:07:44,000 --> 00:07:50,800
with downloading almost all of ubuntu

150
00:07:47,840 --> 00:07:51,840
so in order to create trustable binary

151
00:07:50,800 --> 00:07:55,199
download

152
00:07:51,840 --> 00:07:58,318
we first download a lot of binaries

153
00:07:55,199 --> 00:08:02,000
that we have to trust

154
00:07:58,319 --> 00:08:03,120
so yeah that's not good so last year at

155
00:08:02,000 --> 00:08:06,720
falsdam

156
00:08:03,120 --> 00:08:09,039
i prevented i presented i prevented

157
00:08:06,720 --> 00:08:10,160
i presented the root reduced binary seed

158
00:08:09,039 --> 00:08:13,599
bootstrap

159
00:08:10,160 --> 00:08:16,560
which reduces the bootstrap seat by

160
00:08:13,599 --> 00:08:17,759
almost 50 percent but it redu it removes

161
00:08:16,560 --> 00:08:20,319
gcc

162
00:08:17,759 --> 00:08:21,039
from our bootstrap seeds our first

163
00:08:20,319 --> 00:08:23,280
compiler

164
00:08:21,039 --> 00:08:23,280
right

165
00:08:24,319 --> 00:08:31,599
so could we improve on that well

166
00:08:28,560 --> 00:08:35,279
that reducing the binary seed

167
00:08:31,599 --> 00:08:38,479
in our case of geeks would mean

168
00:08:35,279 --> 00:08:42,240
removing bash core utils

169
00:08:38,479 --> 00:08:47,600
bzip2 awk grab gzip patch

170
00:08:42,240 --> 00:08:50,640
said tar xz maybe a couple more

171
00:08:47,600 --> 00:08:53,760
so that's why i'm very proud

172
00:08:50,640 --> 00:08:55,519
and excited that annelnet saw the

173
00:08:53,760 --> 00:08:59,040
importance of this project

174
00:08:55,519 --> 00:09:04,160
and decided to

175
00:08:59,040 --> 00:09:04,160
fund me to create this next step

176
00:09:05,519 --> 00:09:08,880
which i'm presenting here the scheme

177
00:09:07,360 --> 00:09:12,000
only bootstrap

178
00:09:08,880 --> 00:09:14,959
another reduction by about 50 percent of

179
00:09:12,000 --> 00:09:14,959
the binary seed

180
00:09:17,519 --> 00:09:23,440
one component of that new bootstrap is

181
00:09:20,640 --> 00:09:25,279
a gas and gas coil utils which are an

182
00:09:23,440 --> 00:09:28,560
implementation of these critical

183
00:09:25,279 --> 00:09:31,760
binaries in scheme

184
00:09:28,560 --> 00:09:34,079
while we've been focusing

185
00:09:31,760 --> 00:09:35,360
quite narrowly on bootstrapping it's our

186
00:09:34,080 --> 00:09:38,640
intention to provide

187
00:09:35,360 --> 00:09:39,200
a really rich shell scripting experience

188
00:09:38,640 --> 00:09:42,399
and bring

189
00:09:39,200 --> 00:09:42,399
that to guile

190
00:09:43,600 --> 00:09:47,040
so this is what the current bottom of

191
00:09:45,920 --> 00:09:49,279
the bootstrap

192
00:09:47,040 --> 00:09:50,640
graph now looks like the only

193
00:09:49,279 --> 00:09:54,560
interesting binaries

194
00:09:50,640 --> 00:09:57,839
left here is the scheme interpreter

195
00:09:54,560 --> 00:10:00,959
and the scheme compiler gnumas

196
00:09:57,839 --> 00:10:04,880
and gnogile

197
00:10:00,959 --> 00:10:08,319
so that's the scheme only bootstrap

198
00:10:04,880 --> 00:10:10,480
so when fragrant cascadian uh got mess

199
00:10:08,320 --> 00:10:12,880
got gnu mass packaged for debian and it

200
00:10:10,480 --> 00:10:15,440
went into unstable

201
00:10:12,880 --> 00:10:16,880
at the reproducible build summit last

202
00:10:15,440 --> 00:10:20,399
month he was wondering

203
00:10:16,880 --> 00:10:22,720
uh is there anything we can do to to

204
00:10:20,399 --> 00:10:24,079
give more trust to this new first

205
00:10:22,720 --> 00:10:27,279
compiler that we

206
00:10:24,079 --> 00:10:29,199
injected and

207
00:10:27,279 --> 00:10:30,800
he thought well it would be nice if we

208
00:10:29,200 --> 00:10:34,240
could

209
00:10:30,800 --> 00:10:35,000
build mass in and uh um do it on

210
00:10:34,240 --> 00:10:38,079
different

211
00:10:35,000 --> 00:10:41,360
distributions and prove that

212
00:10:38,079 --> 00:10:42,560
uh we get the same binary that tells us

213
00:10:41,360 --> 00:10:44,560
something so

214
00:10:42,560 --> 00:10:46,800
when he suggested that dave terry and

215
00:10:44,560 --> 00:10:49,680
jealous der aa

216
00:10:46,800 --> 00:10:51,920
vanderwaar joined in and we actually did

217
00:10:49,680 --> 00:10:51,920
that

218
00:10:52,640 --> 00:10:57,680
so is there any more we could do

219
00:10:58,000 --> 00:11:05,040
carl don't think so so

220
00:11:01,360 --> 00:11:07,360
stepping back back a bit from this um

221
00:11:05,040 --> 00:11:09,360
given that we dislike downloading

222
00:11:07,360 --> 00:11:10,160
binaries from the internet and trusting

223
00:11:09,360 --> 00:11:15,519
them

224
00:11:10,160 --> 00:11:18,000
why not stop doing so altogether

225
00:11:15,519 --> 00:11:20,079
so that's what i'm proposing to do the

226
00:11:18,000 --> 00:11:24,240
coming year

227
00:11:20,079 --> 00:11:24,239
to create the full source bootstrap

228
00:11:27,040 --> 00:11:31,519
then is there anything left well

229
00:11:32,800 --> 00:11:37,519
um we do it on the geek system so we

230
00:11:35,600 --> 00:11:39,279
have the geeks built daemon we have to

231
00:11:37,519 --> 00:11:40,399
use the land and we have the linux

232
00:11:39,279 --> 00:11:42,959
kernel

233
00:11:40,399 --> 00:11:44,160
and at the reproducible build summit uh

234
00:11:42,959 --> 00:11:48,560
ludovic

235
00:11:44,160 --> 00:11:51,760
uh actually built um a geeks package

236
00:11:48,560 --> 00:11:55,279
in the initial ram disc so

237
00:11:51,760 --> 00:11:58,160
with that effort uh user land and

238
00:11:55,279 --> 00:11:59,519
the the built demon are removed from the

239
00:11:58,160 --> 00:12:02,480
picture

240
00:11:59,519 --> 00:12:03,600
the next next target obvious target is

241
00:12:02,480 --> 00:12:08,320
linux

242
00:12:03,600 --> 00:12:11,519
so the last release of mass version 22

243
00:12:08,320 --> 00:12:15,360
of this month um

244
00:12:11,519 --> 00:12:18,480
starts to run on the new herd

245
00:12:15,360 --> 00:12:24,880
microkernel could help there with

246
00:12:18,480 --> 00:12:28,480
remo reducing the trusted computing base

247
00:12:24,880 --> 00:12:30,160
um so will we be having a boring life

248
00:12:28,480 --> 00:12:34,560
after that well

249
00:12:30,160 --> 00:12:34,560
jeremy orion has some ideas

250
00:12:37,120 --> 00:12:44,399
and uh well mark weaver

251
00:12:40,880 --> 00:12:45,839
um has some nice suggestions so we have

252
00:12:44,399 --> 00:12:49,360
something working

253
00:12:45,839 --> 00:12:52,320
uh well the next step is maybe other

254
00:12:49,360 --> 00:12:55,600
architectures and well make it more

255
00:12:52,320 --> 00:12:55,600
autumn auditable

256
00:12:57,920 --> 00:13:06,160
so are we really doing this just

257
00:13:01,200 --> 00:13:09,360
to address the trusting trust attack

258
00:13:06,160 --> 00:13:09,360
to be honest i'm not sure

259
00:13:09,839 --> 00:13:13,600
i think that the proper way to do

260
00:13:12,399 --> 00:13:17,200
computing

261
00:13:13,600 --> 00:13:19,920
is to use source code always

262
00:13:17,200 --> 00:13:21,839
and compile that into a binary and i

263
00:13:19,920 --> 00:13:23,120
think the trusting trust attack is just

264
00:13:21,839 --> 00:13:26,320
a symptom

265
00:13:23,120 --> 00:13:29,680
of confusing

266
00:13:26,320 --> 00:13:35,839
a binary with actually compiling

267
00:13:29,680 --> 00:13:35,839
a program from source

268
00:13:38,880 --> 00:13:44,880
so i'm very grateful for all the help

269
00:13:41,920 --> 00:13:45,599
that i got and the support in this

270
00:13:44,880 --> 00:13:48,560
project

271
00:13:45,600 --> 00:13:49,519
many people are helping spreading the

272
00:13:48,560 --> 00:13:53,199
world

273
00:13:49,519 --> 00:13:53,199
or helping with code

274
00:13:54,320 --> 00:14:03,839
so that's all folks

275
00:14:11,680 --> 00:14:17,839
it's you come on

276
00:14:40,800 --> 00:14:44,399
so the question is i'm not very

277
00:14:43,120 --> 00:14:46,399
knowledgeable about

278
00:14:44,399 --> 00:14:48,000
about hardware but is there something we

279
00:14:46,399 --> 00:14:50,000
should do

280
00:14:48,000 --> 00:14:51,120
yes if you're knowledgeable about

281
00:14:50,000 --> 00:14:59,839
hardware please

282
00:14:51,120 --> 00:14:59,839
do something

283
00:15:10,839 --> 00:15:13,839
uh

284
00:15:20,720 --> 00:15:27,839
thank you thank you

285
00:15:33,839 --> 00:15:35,920
you

