1
00:00:05,279 --> 00:00:09,599
i'm

2
00:00:06,319 --> 00:00:11,440
tim panton i'm the cto at pipe and this

3
00:00:09,599 --> 00:00:11,840
is like really just trying to encourage

4
00:00:11,440 --> 00:00:15,518
you

5
00:00:11,840 --> 00:00:17,359
to think about where rtc is being

6
00:00:15,519 --> 00:00:19,520
maybe a little bit more than just that

7
00:00:17,359 --> 00:00:22,640
thing that you do conference calls with

8
00:00:19,520 --> 00:00:24,480
um so i mean you like that was what it

9
00:00:22,640 --> 00:00:26,160
was built for it was built as a skype

10
00:00:24,480 --> 00:00:28,720
replacement that was the original idea

11
00:00:26,160 --> 00:00:31,039
and that's effectively what's

12
00:00:28,720 --> 00:00:32,800
what most of you you either are working

13
00:00:31,039 --> 00:00:33,840
on in the engineering sense or at least

14
00:00:32,800 --> 00:00:36,718
just making

15
00:00:33,840 --> 00:00:37,600
daily videos sprint calls or whatever um

16
00:00:36,719 --> 00:00:39,440
and so it's like

17
00:00:37,600 --> 00:00:41,120
it's there but it's actually kind of

18
00:00:39,440 --> 00:00:43,360
useful for other things

19
00:00:41,120 --> 00:00:45,199
and and i wanted to highlight that

20
00:00:43,360 --> 00:00:47,120
because i think

21
00:00:45,200 --> 00:00:48,960
it actually should influence the way

22
00:00:47,120 --> 00:00:51,199
that we see the apis

23
00:00:48,960 --> 00:00:53,440
and i think that's that's we tend to

24
00:00:51,199 --> 00:00:56,960
forget that to some extent

25
00:00:53,440 --> 00:00:59,920
so um here's a

26
00:00:56,960 --> 00:01:00,399
here's a conference call you know in in

27
00:00:59,920 --> 00:01:02,000
action

28
00:01:00,399 --> 00:01:03,680
it looks like a conference call but

29
00:01:02,000 --> 00:01:07,119
actually i would argue that it

30
00:01:03,680 --> 00:01:09,680
sort of isn't in that this is meat echo

31
00:01:07,119 --> 00:01:10,479
um what's interesting about meat echo is

32
00:01:09,680 --> 00:01:12,880
that

33
00:01:10,479 --> 00:01:15,520
although it's a video conferencing tool

34
00:01:12,880 --> 00:01:16,960
it's very specifically designed i'm

35
00:01:15,520 --> 00:01:18,479
talking about somebody else's product

36
00:01:16,960 --> 00:01:20,000
here but you know

37
00:01:18,479 --> 00:01:22,159
it's very specifically designed to meet

38
00:01:20,000 --> 00:01:23,280
the semantics of a particular meeting

39
00:01:22,159 --> 00:01:25,840
type

40
00:01:23,280 --> 00:01:26,799
and and it has the rules of that meeting

41
00:01:25,840 --> 00:01:29,920
in there

42
00:01:26,799 --> 00:01:32,880
is but embedded in the interface um

43
00:01:29,920 --> 00:01:33,920
and what what's more actually if you

44
00:01:32,880 --> 00:01:36,000
look at some of the way

45
00:01:33,920 --> 00:01:38,320
that it works the the media priorities

46
00:01:36,000 --> 00:01:39,840
are fantastically complicated this isn't

47
00:01:38,320 --> 00:01:41,199
actually a particularly good example

48
00:01:39,840 --> 00:01:42,640
because normally what you'd have is a

49
00:01:41,200 --> 00:01:44,479
slide deck in the middle

50
00:01:42,640 --> 00:01:46,399
which is taking over most of the space

51
00:01:44,479 --> 00:01:47,679
and then you have audio from multiple

52
00:01:46,399 --> 00:01:50,479
microphones

53
00:01:47,680 --> 00:01:51,360
your own local feed the the person at

54
00:01:50,479 --> 00:01:53,920
the stand

55
00:01:51,360 --> 00:01:55,680
like there's a bunch of different video

56
00:01:53,920 --> 00:01:57,200
feeds coming in that are differently

57
00:01:55,680 --> 00:01:59,680
prioritized

58
00:01:57,200 --> 00:02:00,880
and some of them aren't actually coming

59
00:01:59,680 --> 00:02:03,200
from browsers

60
00:02:00,880 --> 00:02:05,520
like a lot of the feeds coming into this

61
00:02:03,200 --> 00:02:07,840
aren't actually browser inputs they're

62
00:02:05,520 --> 00:02:09,598
they're microphones loose microphones

63
00:02:07,840 --> 00:02:11,520
loose cameras this kind of stuff

64
00:02:09,598 --> 00:02:14,160
and so although it looks like a

65
00:02:11,520 --> 00:02:16,480
conference call engine it kind of

66
00:02:14,160 --> 00:02:17,520
isn't um and the other thing the

67
00:02:16,480 --> 00:02:19,599
critical thing

68
00:02:17,520 --> 00:02:20,720
is for it to work you have to be able to

69
00:02:19,599 --> 00:02:22,560
join it

70
00:02:20,720 --> 00:02:24,879
with xero install you have to be able to

71
00:02:22,560 --> 00:02:26,560
open your browser browse to it

72
00:02:24,879 --> 00:02:28,160
you know agree with the note well and

73
00:02:26,560 --> 00:02:30,640
you're in

74
00:02:28,160 --> 00:02:31,920
and that's kind of important so here's

75
00:02:30,640 --> 00:02:34,720
another one this is something that we've

76
00:02:31,920 --> 00:02:37,119
worked on it's a baby monitor

77
00:02:34,720 --> 00:02:38,640
reasonably privacy protecting baby

78
00:02:37,120 --> 00:02:41,760
monitor

79
00:02:38,640 --> 00:02:44,958
that runs webrtc between the camera

80
00:02:41,760 --> 00:02:47,519
and your um smartphone

81
00:02:44,959 --> 00:02:49,280
so you can watch your baby in real time

82
00:02:47,519 --> 00:02:50,080
rolling over or whatever you can see

83
00:02:49,280 --> 00:02:52,720
it's heartbeat

84
00:02:50,080 --> 00:02:53,280
as well no sorry it's respiration rate

85
00:02:52,720 --> 00:02:55,440
as well

86
00:02:53,280 --> 00:02:56,400
which is also carried over the webrtc

87
00:02:55,440 --> 00:02:59,200
data channel

88
00:02:56,400 --> 00:03:00,319
so you've got a privacy protecting

89
00:02:59,200 --> 00:03:02,958
secure

90
00:03:00,319 --> 00:03:04,720
thing between the two ends and there's

91
00:03:02,959 --> 00:03:06,560
also like an interesting thing from the

92
00:03:04,720 --> 00:03:09,040
service provider's point of view is that

93
00:03:06,560 --> 00:03:10,560
if it does end to end media not only do

94
00:03:09,040 --> 00:03:12,239
you get the encryption benefits but you

95
00:03:10,560 --> 00:03:14,159
also get

96
00:03:12,239 --> 00:03:15,920
a reduced bandwidth cost because it's

97
00:03:14,159 --> 00:03:18,560
not most of that traffic's not going

98
00:03:15,920 --> 00:03:21,040
through a central server

99
00:03:18,560 --> 00:03:23,280
so i built this thing um it's another

100
00:03:21,040 --> 00:03:24,879
example of thing that is webrtc but it

101
00:03:23,280 --> 00:03:28,000
isn't a conference call

102
00:03:24,879 --> 00:03:30,879
it's i do podcast with a friend um

103
00:03:28,000 --> 00:03:33,120
we interview people who are doing stuff

104
00:03:30,879 --> 00:03:35,040
that we think might

105
00:03:33,120 --> 00:03:36,159
tell us what's happening in the future

106
00:03:35,040 --> 00:03:38,319
um

107
00:03:36,159 --> 00:03:39,599
and it's audio only and we wanted to

108
00:03:38,319 --> 00:03:40,879
make it so that we could interview these

109
00:03:39,599 --> 00:03:42,560
people really easily so we just

110
00:03:40,879 --> 00:03:44,560
basically send them a link they open a

111
00:03:42,560 --> 00:03:47,760
link to a webrtc page

112
00:03:44,560 --> 00:03:49,440
and that gets recorded automatically and

113
00:03:47,760 --> 00:03:50,720
and that conversation's got to be really

114
00:03:49,440 --> 00:03:52,400
easy to do

115
00:03:50,720 --> 00:03:55,280
and so we did this i built this thing in

116
00:03:52,400 --> 00:03:58,159
webrtc um

117
00:03:55,280 --> 00:03:59,360
it's on github um and the podcast is

118
00:03:58,159 --> 00:04:01,760
there as well actually but

119
00:03:59,360 --> 00:04:02,720
but the critical thing was it was mobile

120
00:04:01,760 --> 00:04:05,840
first

121
00:04:02,720 --> 00:04:08,959
at both ends of this call are on mobile

122
00:04:05,840 --> 00:04:11,519
there's no laptops involved so we tend

123
00:04:08,959 --> 00:04:14,480
to think of webrtc

124
00:04:11,519 --> 00:04:16,478
as a laptop tool and and it really isn't

125
00:04:14,480 --> 00:04:18,639
um for a lot of a lot of use cases i

126
00:04:16,478 --> 00:04:21,039
think

127
00:04:18,639 --> 00:04:22,880
and this is the extreme example which i

128
00:04:21,040 --> 00:04:23,919
i bought this the other day um this is

129
00:04:22,880 --> 00:04:25,840
google stadia

130
00:04:23,919 --> 00:04:28,719
this is a games engine right you can

131
00:04:25,840 --> 00:04:32,719
play like you know your favorite

132
00:04:28,720 --> 00:04:35,199
big shoot-em-up game in in amazingly

133
00:04:32,720 --> 00:04:36,960
in in this case in 1080p but it'll

134
00:04:35,199 --> 00:04:40,160
actually run in 4k as well

135
00:04:36,960 --> 00:04:42,560
so this is the um

136
00:04:40,160 --> 00:04:44,000
webrtc internals from the chrome browser

137
00:04:42,560 --> 00:04:46,240
on my old macbook

138
00:04:44,000 --> 00:04:47,680
running stadia and actually the the

139
00:04:46,240 --> 00:04:50,880
twitches in it are

140
00:04:47,680 --> 00:04:52,720
me flipping tabs to get this um

141
00:04:50,880 --> 00:04:54,000
get this screen up so actually it

142
00:04:52,720 --> 00:04:57,120
rocksteady

143
00:04:54,000 --> 00:05:00,880
60 frames a second 1080p

144
00:04:57,120 --> 00:05:01,360
25 megabits um of video streaming into

145
00:05:00,880 --> 00:05:03,120
my

146
00:05:01,360 --> 00:05:04,720
my device and there are a lot of other

147
00:05:03,120 --> 00:05:06,560
interesting things about what

148
00:05:04,720 --> 00:05:08,400
the way they do that but the critical

149
00:05:06,560 --> 00:05:10,800
stuff is it's low latency

150
00:05:08,400 --> 00:05:11,679
very high but controllable manageable

151
00:05:10,800 --> 00:05:13,600
bit rate

152
00:05:11,680 --> 00:05:15,440
and to make a playable game and i think

153
00:05:13,600 --> 00:05:17,680
that's amazing that you know there's a

154
00:05:15,440 --> 00:05:19,440
webrtc use case that

155
00:05:17,680 --> 00:05:22,560
i don't think any of us really predicted

156
00:05:19,440 --> 00:05:24,719
when when we started this game

157
00:05:22,560 --> 00:05:26,639
and there's the final thing i want to

158
00:05:24,720 --> 00:05:28,720
show you is the thing that i use

159
00:05:26,639 --> 00:05:30,080
almost every day which is remote access

160
00:05:28,720 --> 00:05:33,600
to devices

161
00:05:30,080 --> 00:05:36,000
um so this if it works

162
00:05:33,600 --> 00:05:37,039
is remote access to a device that's

163
00:05:36,000 --> 00:05:53,199
sitting

164
00:05:37,039 --> 00:05:57,199
in my apartment in berlin which

165
00:05:53,199 --> 00:05:59,360
is a raspberry pi zero

166
00:05:57,199 --> 00:06:01,120
sitting on my router in berlin and i

167
00:05:59,360 --> 00:06:02,800
have now have a terminal session to it

168
00:06:01,120 --> 00:06:06,880
um

169
00:06:02,800 --> 00:06:09,840
and what's really exciting about that

170
00:06:06,880 --> 00:06:11,840
is that it's sitting behind nat and it's

171
00:06:09,840 --> 00:06:13,758
not exposing any ports but i can still

172
00:06:11,840 --> 00:06:15,599
log into it because it's just going over

173
00:06:13,759 --> 00:06:17,919
the webrtc data channel

174
00:06:15,600 --> 00:06:21,840
there's a kind of interesting um

175
00:06:17,919 --> 00:06:21,840
attribute of webrtc in that

176
00:06:22,800 --> 00:06:27,280
so what have we learnt

177
00:06:25,919 --> 00:06:29,039
basically what we've learned is that

178
00:06:27,280 --> 00:06:32,638
webrtc isn't just

179
00:06:29,039 --> 00:06:35,039
for video conferencing

180
00:06:32,639 --> 00:06:36,400
on laptops that's not the only thing you

181
00:06:35,039 --> 00:06:37,759
can do with it there are a lot of other

182
00:06:36,400 --> 00:06:39,440
interesting things you can do with it it

183
00:06:37,759 --> 00:06:41,199
may be the original point it may be the

184
00:06:39,440 --> 00:06:41,680
major use case but i still think there's

185
00:06:41,199 --> 00:06:45,039
other things

186
00:06:41,680 --> 00:06:45,919
we can do with it the other thing that

187
00:06:45,039 --> 00:06:47,680
we've learned

188
00:06:45,919 --> 00:06:49,680
or that i've learned in all of this is

189
00:06:47,680 --> 00:06:53,120
that the w3c

190
00:06:49,680 --> 00:06:56,720
um webrtc api uh

191
00:06:53,120 --> 00:06:57,280
aka stp is really not a good environment

192
00:06:56,720 --> 00:07:00,080
for doing

193
00:06:57,280 --> 00:07:01,198
development outside the telecoms world

194
00:07:00,080 --> 00:07:02,479
i'm not even going to

195
00:07:01,199 --> 00:07:04,400
discuss whether it is inside the

196
00:07:02,479 --> 00:07:06,240
telecoms world but i would say that

197
00:07:04,400 --> 00:07:08,159
every single one of those use cases has

198
00:07:06,240 --> 00:07:11,280
had to manipulate the sdp to get the

199
00:07:08,160 --> 00:07:11,280
behavior that they wanted

200
00:07:12,000 --> 00:07:17,199
and the other thing that i didn't

201
00:07:15,039 --> 00:07:17,759
emphasize but it's actually true of that

202
00:07:17,199 --> 00:07:21,120
lot

203
00:07:17,759 --> 00:07:23,280
is that only one of those

204
00:07:21,120 --> 00:07:25,360
well so they're not learning running

205
00:07:23,280 --> 00:07:28,400
libware what you see at both ends

206
00:07:25,360 --> 00:07:29,919
like typically there's a if there's not

207
00:07:28,400 --> 00:07:31,359
a browser at both ends the only one

208
00:07:29,919 --> 00:07:33,039
where there's a browser at both ends is

209
00:07:31,360 --> 00:07:34,720
actually my pod call

210
00:07:33,039 --> 00:07:36,800
the rest of them you have a browser at

211
00:07:34,720 --> 00:07:40,160
one end and you have a server running

212
00:07:36,800 --> 00:07:43,280
something that's rtc web that runs the

213
00:07:40,160 --> 00:07:46,879
wire protocol but doesn't run the api

214
00:07:43,280 --> 00:07:49,520
um so if you think about about meet echo

215
00:07:46,879 --> 00:07:50,879
that's not running libero but you see at

216
00:07:49,520 --> 00:07:53,039
it end

217
00:07:50,879 --> 00:07:55,919
the brow the user is but the other end

218
00:07:53,039 --> 00:07:58,318
isn't and the same is true for for the

219
00:07:55,919 --> 00:08:00,000
the other devices that you know you're

220
00:07:58,319 --> 00:08:00,720
running something where you're sharing a

221
00:08:00,000 --> 00:08:04,879
protocol

222
00:08:00,720 --> 00:08:06,479
but not necessarily in an implementation

223
00:08:04,879 --> 00:08:08,960
and you're saying like what what there

224
00:08:06,479 --> 00:08:09,919
are other implementations of webrtc well

225
00:08:08,960 --> 00:08:12,799
yes actually there

226
00:08:09,919 --> 00:08:13,280
are thank you um there is a whole list

227
00:08:12,800 --> 00:08:15,599
here

228
00:08:13,280 --> 00:08:16,799
this in a variety of languages i've

229
00:08:15,599 --> 00:08:19,120
written one in java

230
00:08:16,800 --> 00:08:20,319
um pylon's written one in go there's

231
00:08:19,120 --> 00:08:22,879
meet echo in c

232
00:08:20,319 --> 00:08:23,599
there's one in python there's javascript

233
00:08:22,879 --> 00:08:25,199
there's

234
00:08:23,599 --> 00:08:27,120
c sharp these have got various different

235
00:08:25,199 --> 00:08:28,960
licenses they're not all

236
00:08:27,120 --> 00:08:30,160
they're not all open source they're not

237
00:08:28,960 --> 00:08:31,840
you know they've got various different

238
00:08:30,160 --> 00:08:35,760
licenses i don't actually know what g

239
00:08:31,840 --> 00:08:40,958
stream is written in but

240
00:08:35,760 --> 00:08:42,640
it's there um and what this tells you is

241
00:08:40,958 --> 00:08:44,800
that if you write an open standard

242
00:08:42,640 --> 00:08:46,800
so like this isn't really about open

243
00:08:44,800 --> 00:08:49,040
software this is about open standards

244
00:08:46,800 --> 00:08:50,800
that if you write an open standard view

245
00:08:49,040 --> 00:08:52,959
and you um it means that other people

246
00:08:50,800 --> 00:08:54,479
can implement it if it's a well-written

247
00:08:52,959 --> 00:08:56,079
standard then it's proof that it is

248
00:08:54,480 --> 00:08:59,200
because we've all done this

249
00:08:56,080 --> 00:09:01,360
i want to run an interop session at um

250
00:08:59,200 --> 00:09:02,959
in vancouver to try and get these people

251
00:09:01,360 --> 00:09:04,320
to prove that they can interrupt between

252
00:09:02,959 --> 00:09:06,319
each other and not just with

253
00:09:04,320 --> 00:09:07,600
robot you see and i should add i

254
00:09:06,320 --> 00:09:08,959
realized at the end

255
00:09:07,600 --> 00:09:11,120
as i was putting these slides together

256
00:09:08,959 --> 00:09:12,800
there of course there are other web rtc

257
00:09:11,120 --> 00:09:14,800
engines out there there's asterisk and

258
00:09:12,800 --> 00:09:17,439
free switch they're not really libraries

259
00:09:14,800 --> 00:09:19,760
but they do talk um the same wire

260
00:09:17,440 --> 00:09:22,160
protocol

261
00:09:19,760 --> 00:09:23,200
so all of this we ask ourselves what is

262
00:09:22,160 --> 00:09:25,360
a good api

263
00:09:23,200 --> 00:09:26,399
and the answer is i have no idea right

264
00:09:25,360 --> 00:09:28,480
and what's for

265
00:09:26,399 --> 00:09:30,240
absolutely for certain is the w3c

266
00:09:28,480 --> 00:09:32,399
doesn't know what a good api looks like

267
00:09:30,240 --> 00:09:33,760
for this because it it's if they've had

268
00:09:32,399 --> 00:09:35,839
a couple of goes at it or

269
00:09:33,760 --> 00:09:37,040
more and like the results are still

270
00:09:35,839 --> 00:09:39,920
unconvincing

271
00:09:37,040 --> 00:09:41,040
the native library the api is horrible

272
00:09:39,920 --> 00:09:43,599
uh the the

273
00:09:41,040 --> 00:09:45,760
libweb otc library the api is pretty

274
00:09:43,600 --> 00:09:47,360
hideous

275
00:09:45,760 --> 00:09:49,439
and i wonder whether that's because

276
00:09:47,360 --> 00:09:52,240
we're framing the problem wrong

277
00:09:49,440 --> 00:09:53,519
so when framing an api problem it's

278
00:09:52,240 --> 00:09:56,560
always good to think what

279
00:09:53,519 --> 00:09:58,160
about albert einstein so albert said it

280
00:09:56,560 --> 00:10:01,040
should be as simple as possible

281
00:09:58,160 --> 00:10:01,920
but no simpler which is a really good

282
00:10:01,040 --> 00:10:05,360
dictum for

283
00:10:01,920 --> 00:10:07,680
for apis so i

284
00:10:05,360 --> 00:10:09,920
thought a lot about our use cases that

285
00:10:07,680 --> 00:10:11,040
we'd seen and what i realized was that

286
00:10:09,920 --> 00:10:14,719
actually

287
00:10:11,040 --> 00:10:16,000
people were using webrtc effectively as

288
00:10:14,720 --> 00:10:19,200
a proxy

289
00:10:16,000 --> 00:10:22,160
like they had a local service that that

290
00:10:19,200 --> 00:10:23,920
generated rtp or that monitored the

291
00:10:22,160 --> 00:10:25,920
baby's breathing and

292
00:10:23,920 --> 00:10:27,439
gave data out over a websocket or

293
00:10:25,920 --> 00:10:29,760
whatever and they

294
00:10:27,440 --> 00:10:31,200
they just wanted to be able to kind of

295
00:10:29,760 --> 00:10:34,880
sprinkle

296
00:10:31,200 --> 00:10:36,600
the magic um not reversal encryption

297
00:10:34,880 --> 00:10:38,959
all of those things into the

298
00:10:36,600 --> 00:10:41,360
browser-ness of webrtc they want to

299
00:10:38,959 --> 00:10:43,279
sprinkle that pixie dust onto

300
00:10:41,360 --> 00:10:45,120
their service and make it appear

301
00:10:43,279 --> 00:10:48,800
magically into a browser

302
00:10:45,120 --> 00:10:50,240
a long way away and they didn't really

303
00:10:48,800 --> 00:10:52,160
want

304
00:10:50,240 --> 00:10:55,279
to kind of get into an api they just

305
00:10:52,160 --> 00:10:58,880
wanted to configure a proxy basically

306
00:10:55,279 --> 00:11:00,720
um and so we ended up i mean this took

307
00:10:58,880 --> 00:11:02,720
me two or three iterations to get to

308
00:11:00,720 --> 00:11:04,320
this point that the pipe agent the pipe

309
00:11:02,720 --> 00:11:08,000
implementation of

310
00:11:04,320 --> 00:11:10,480
webrtc or rtc web um is effectively a

311
00:11:08,000 --> 00:11:13,519
configurable proxy you tell it

312
00:11:10,480 --> 00:11:16,640
what things you're allowed to proxy um

313
00:11:13,519 --> 00:11:17,519
and it does and what does that look like

314
00:11:16,640 --> 00:11:20,319
well so

315
00:11:17,519 --> 00:11:21,600
like an obvious one is rt rtp or rtsp

316
00:11:20,320 --> 00:11:22,240
there are a lot of cameras out there

317
00:11:21,600 --> 00:11:25,839
that speak

318
00:11:22,240 --> 00:11:26,640
rtp um there are a lot of devices out

319
00:11:25,839 --> 00:11:28,959
there that do

320
00:11:26,640 --> 00:11:31,279
do rtp and what you can do is just like

321
00:11:28,959 --> 00:11:32,800
wrap it up in detail ssrtp

322
00:11:31,279 --> 00:11:35,040
and push it out to the browser and you

323
00:11:32,800 --> 00:11:37,120
get your your video in your audio

324
00:11:35,040 --> 00:11:39,360
there's some complexity about managing

325
00:11:37,120 --> 00:11:41,200
the encoder bitrates and stuff like that

326
00:11:39,360 --> 00:11:42,880
but actually it's sort of first

327
00:11:41,200 --> 00:11:44,480
approximation pretty clear how to do

328
00:11:42,880 --> 00:11:46,399
that

329
00:11:44,480 --> 00:11:48,959
the really easy one turns out and this

330
00:11:46,399 --> 00:11:51,680
is funny

331
00:11:48,959 --> 00:11:52,880
we when we specified the data channel

332
00:11:51,680 --> 00:11:56,719
api

333
00:11:52,880 --> 00:11:59,279
in the browser it looks exactly like

334
00:11:56,720 --> 00:12:01,519
the websocket api which means that you

335
00:11:59,279 --> 00:12:04,079
can substitute one for the other and the

336
00:12:01,519 --> 00:12:05,200
rest of the web the javascript doesn't

337
00:12:04,079 --> 00:12:07,519
notice

338
00:12:05,200 --> 00:12:08,480
um which is kind of funny so what we do

339
00:12:07,519 --> 00:12:12,399
with with

340
00:12:08,480 --> 00:12:14,079
in in pipe is we instead of giving back

341
00:12:12,399 --> 00:12:16,399
when the when the device when the

342
00:12:14,079 --> 00:12:18,638
page us wants a websocket thinks it

343
00:12:16,399 --> 00:12:21,680
wants a websocket we give it back

344
00:12:18,639 --> 00:12:23,760
a proxy websocket which is actually a

345
00:12:21,680 --> 00:12:26,079
data channel so we create a data channel

346
00:12:23,760 --> 00:12:28,560
connect back to the the agent and the

347
00:12:26,079 --> 00:12:30,638
agent then opens a local websocket to

348
00:12:28,560 --> 00:12:32,560
the service and then proxies the data

349
00:12:30,639 --> 00:12:35,519
between them and it like

350
00:12:32,560 --> 00:12:38,800
amazingly it works invisibly to most of

351
00:12:35,519 --> 00:12:42,639
the pages which is kind of cool

352
00:12:38,800 --> 00:12:44,399
um then we have the one that's magic now

353
00:12:42,639 --> 00:12:46,320
this is the one that's

354
00:12:44,399 --> 00:12:48,399
i feel most guilty about because

355
00:12:46,320 --> 00:12:50,000
basically you want to

356
00:12:48,399 --> 00:12:53,120
you've got a web page that wants to get

357
00:12:50,000 --> 00:12:54,720
some web pages from a server

358
00:12:53,120 --> 00:12:56,240
from the service running over there but

359
00:12:54,720 --> 00:12:59,360
there's lots of nat and

360
00:12:56,240 --> 00:13:01,279
other stuff in between so basically what

361
00:12:59,360 --> 00:13:03,920
you can do is you can do that over to

362
00:13:01,279 --> 00:13:06,160
data channel and then with a little

363
00:13:03,920 --> 00:13:09,279
trickiness of abusing the service worker

364
00:13:06,160 --> 00:13:12,480
api and abusing iframes

365
00:13:09,279 --> 00:13:14,800
you can make the page not know you can

366
00:13:12,480 --> 00:13:17,680
have a page that doesn't know

367
00:13:14,800 --> 00:13:18,639
that it has come from a data channel

368
00:13:17,680 --> 00:13:20,319
connection

369
00:13:18,639 --> 00:13:21,680
you can like hide the fact that it's

370
00:13:20,320 --> 00:13:23,440
data channel connection

371
00:13:21,680 --> 00:13:25,519
and the page is completely unaware of

372
00:13:23,440 --> 00:13:29,200
how it got there

373
00:13:25,519 --> 00:13:32,399
which is kind of cool actually

374
00:13:29,200 --> 00:13:35,680
so um what does this let us do

375
00:13:32,399 --> 00:13:38,800
well it lets me for example

376
00:13:35,680 --> 00:13:42,000
take this thing which is um you know

377
00:13:38,800 --> 00:13:45,519
two motors two wheels a ball bearing

378
00:13:42,000 --> 00:13:48,560
a raspberry pi zero and a battery um

379
00:13:45,519 --> 00:13:49,279
and it has a little local web service

380
00:13:48,560 --> 00:13:52,319
which tells

381
00:13:49,279 --> 00:13:55,680
the motors to run um

382
00:13:52,320 --> 00:14:00,480
it has a video streaming service

383
00:13:55,680 --> 00:14:03,120
with g streamers from the camera and um

384
00:14:00,480 --> 00:14:04,560
what we do is we proxy all that at least

385
00:14:03,120 --> 00:14:08,000
in theory

386
00:14:04,560 --> 00:14:10,000
into a browser but it also has

387
00:14:08,000 --> 00:14:11,839
a web service on there with the control

388
00:14:10,000 --> 00:14:14,320
page so what we're doing now is we're

389
00:14:11,839 --> 00:14:17,920
proxying that control page up into

390
00:14:14,320 --> 00:14:21,839
the browser on my ipad

391
00:14:17,920 --> 00:14:24,719
and we now have at least in theory

392
00:14:21,839 --> 00:14:24,720
a drivable

393
00:14:26,160 --> 00:14:31,839
device over webrtc

394
00:14:32,399 --> 00:14:40,639
so um get rid of that

395
00:14:36,560 --> 00:14:41,599
back to keynote so that lets us drive a

396
00:14:40,639 --> 00:14:43,120
device

397
00:14:41,600 --> 00:14:44,800
which isn't quite small enough that our

398
00:14:43,120 --> 00:14:46,480
customers say like you know that

399
00:14:44,800 --> 00:14:48,000
it's using too much memory and whatever

400
00:14:46,480 --> 00:14:50,160
but in principle

401
00:14:48,000 --> 00:14:51,199
let's just drive a device from a from

402
00:14:50,160 --> 00:14:55,120
from here with

403
00:14:51,199 --> 00:14:56,880
live real-time video how's that an api

404
00:14:55,120 --> 00:14:58,560
like how can i claim that's an api what

405
00:14:56,880 --> 00:15:00,000
does it look like well what we've done

406
00:14:58,560 --> 00:15:00,719
is and this is a bit tricky it's

407
00:15:00,000 --> 00:15:02,160
basically

408
00:15:00,720 --> 00:15:03,839
when you create a data channel in

409
00:15:02,160 --> 00:15:04,719
javascript you're allowed to give it a

410
00:15:03,839 --> 00:15:06,240
label

411
00:15:04,720 --> 00:15:07,760
and what we've done is we're again we've

412
00:15:06,240 --> 00:15:11,440
slightly abused that by what

413
00:15:07,760 --> 00:15:14,639
the label we give it is a uri

414
00:15:11,440 --> 00:15:16,240
and the uri tells the far end what we

415
00:15:14,639 --> 00:15:19,279
want it to proxy

416
00:15:16,240 --> 00:15:20,160
so in this case we've said i want you to

417
00:15:19,279 --> 00:15:23,279
we've opened a

418
00:15:20,160 --> 00:15:27,199
local data channel whose name is

419
00:15:23,279 --> 00:15:29,040
websocket localhost motor

420
00:15:27,199 --> 00:15:32,399
and then what happens is under the hood

421
00:15:29,040 --> 00:15:35,920
we created we proxy this up to there

422
00:15:32,399 --> 00:15:38,399
and page is quite happy with this

423
00:15:35,920 --> 00:15:39,040
um you know there's some verification

424
00:15:38,399 --> 00:15:42,240
and

425
00:15:39,040 --> 00:15:43,439
checking but in in essence the page

426
00:15:42,240 --> 00:15:45,199
hardly notice

427
00:15:43,440 --> 00:15:46,720
the stuff with rtp turned out to be a

428
00:15:45,199 --> 00:15:49,680
bit more complicated

429
00:15:46,720 --> 00:15:52,800
um but in essence we do the same thing

430
00:15:49,680 --> 00:15:54,479
we created h channel we label it rtp

431
00:15:52,800 --> 00:15:57,199
and then we have to do a little bit of

432
00:15:54,480 --> 00:15:59,600
like upgrade to to get the ssrc

433
00:15:57,199 --> 00:16:00,719
and the p-type and the rid over between

434
00:15:59,600 --> 00:16:02,399
the two ends because those are the

435
00:16:00,720 --> 00:16:03,920
things that you can't guess

436
00:16:02,399 --> 00:16:06,000
in the offer answer the rest you can

437
00:16:03,920 --> 00:16:07,439
guess the rest are already known by the

438
00:16:06,000 --> 00:16:09,120
time you go to data channel

439
00:16:07,440 --> 00:16:11,040
but those things you have to have to

440
00:16:09,120 --> 00:16:12,959
pass between them and then

441
00:16:11,040 --> 00:16:14,959
you apply the offer in the answer and

442
00:16:12,959 --> 00:16:18,319
boom you get proxied streams

443
00:16:14,959 --> 00:16:19,599
um which is nice and so i'm asking

444
00:16:18,320 --> 00:16:21,360
myself whether this is actually

445
00:16:19,600 --> 00:16:23,440
something that like

446
00:16:21,360 --> 00:16:24,800
should be standardized is this something

447
00:16:23,440 --> 00:16:28,959
that we really want

448
00:16:24,800 --> 00:16:32,639
other people to build into their

449
00:16:28,959 --> 00:16:35,040
their apis so that or into their

450
00:16:32,639 --> 00:16:36,000
lib their rtc implementation so that

451
00:16:35,040 --> 00:16:37,839
more people could take

452
00:16:36,000 --> 00:16:39,360
advantage of this at multiple levels or

453
00:16:37,839 --> 00:16:42,959
is this just something that

454
00:16:39,360 --> 00:16:45,199
like is a quirk for me um but yeah

455
00:16:42,959 --> 00:16:46,160
or ask me questions tweet me catch me

456
00:16:45,199 --> 00:16:51,170
whatever

457
00:16:46,160 --> 00:16:55,360
thank you

458
00:16:51,170 --> 00:16:58,399
[Applause]

459
00:16:55,360 --> 00:17:00,160
all right wake up everybody um no we

460
00:16:58,399 --> 00:17:04,000
have five minutes for questions so

461
00:17:00,160 --> 00:17:06,559
that should be plenty for some

462
00:17:04,000 --> 00:17:06,559
anyone

463
00:17:07,280 --> 00:17:11,439
so anybody building robots anybody

464
00:17:10,079 --> 00:17:14,639
building

465
00:17:11,439 --> 00:17:17,039
like do you have entry cameras doorbells

466
00:17:14,640 --> 00:17:19,039
those sorts of things are all candidates

467
00:17:17,039 --> 00:17:21,199
for this kind of trick

468
00:17:19,039 --> 00:17:22,400
that you want to arrive you want your

469
00:17:21,199 --> 00:17:24,720
your

470
00:17:22,400 --> 00:17:25,679
user interface to arrive easily into a

471
00:17:24,720 --> 00:17:27,120
web page

472
00:17:25,679 --> 00:17:28,960
that's kind of essentially the trick it

473
00:17:27,119 --> 00:17:30,559
does but it could be i mean it could be

474
00:17:28,960 --> 00:17:32,640
big stuff i'm playing with

475
00:17:30,559 --> 00:17:33,600
small toys but presumably i suppose it

476
00:17:32,640 --> 00:17:39,039
could be a car

477
00:17:33,600 --> 00:17:39,039
or something larger

478
00:17:44,840 --> 00:17:48,480
questions

479
00:17:47,120 --> 00:17:50,479
no no otherwise it's not in the

480
00:17:48,480 --> 00:17:52,799
recording so think about the good

481
00:17:50,480 --> 00:17:52,799
question

482
00:17:55,520 --> 00:17:59,120
hey thank you first thank you for the

483
00:17:57,360 --> 00:18:02,240
amazing presentation

484
00:17:59,120 --> 00:18:03,760
was really new ideas and the question is

485
00:18:02,240 --> 00:18:06,799
there is any frameworks

486
00:18:03,760 --> 00:18:09,200
for like spatial libraries to do

487
00:18:06,799 --> 00:18:11,120
all of those internet of things or all

488
00:18:09,200 --> 00:18:14,160
of those application level

489
00:18:11,120 --> 00:18:17,360
what will be like the best framework

490
00:18:14,160 --> 00:18:21,760
to be like to be able to analyze

491
00:18:17,360 --> 00:18:23,918
those packets that are not rtp but

492
00:18:21,760 --> 00:18:26,640
do give us like the application level

493
00:18:23,919 --> 00:18:30,080
what is like the implementation level

494
00:18:26,640 --> 00:18:34,080
from a framework perspective

495
00:18:30,080 --> 00:18:34,080
um so

496
00:18:35,039 --> 00:18:39,760
the i think my answer is it doesn't

497
00:18:39,120 --> 00:18:41,600
matter

498
00:18:39,760 --> 00:18:42,960
like i mean there's two there's two

499
00:18:41,600 --> 00:18:44,000
questions there there's one of which is

500
00:18:42,960 --> 00:18:47,120
a generally

501
00:18:44,000 --> 00:18:48,720
like how should you do it and the answer

502
00:18:47,120 --> 00:18:50,239
is you do it with the engineers that

503
00:18:48,720 --> 00:18:52,080
you've got available who've got the

504
00:18:50,240 --> 00:18:54,799
tools that they know how to write

505
00:18:52,080 --> 00:18:56,720
like if you if you you'll find a ton of

506
00:18:54,799 --> 00:18:59,918
embedded web servers out there

507
00:18:56,720 --> 00:19:01,200
you'll find a ton of of rtsp

508
00:18:59,919 --> 00:19:02,320
clients out there and it's just a

509
00:19:01,200 --> 00:19:04,480
question of the ones that your

510
00:19:02,320 --> 00:19:07,760
engineering team feel comfortable with

511
00:19:04,480 --> 00:19:10,000
um and the meta question is the

512
00:19:07,760 --> 00:19:12,559
there is the meta answer there is

513
00:19:10,000 --> 00:19:15,039
actually

514
00:19:12,559 --> 00:19:16,399
you can sandbox it so what's nice about

515
00:19:15,039 --> 00:19:20,160
this is you it

516
00:19:16,400 --> 00:19:22,720
it hides the artist

517
00:19:20,160 --> 00:19:24,960
from the embedded people so the people

518
00:19:22,720 --> 00:19:26,640
who building this this stuff can carry

519
00:19:24,960 --> 00:19:27,360
on doing the things that they've always

520
00:19:26,640 --> 00:19:29,039
done

521
00:19:27,360 --> 00:19:31,439
and then you just put like this

522
00:19:29,039 --> 00:19:33,520
effectively this proxy in between

523
00:19:31,440 --> 00:19:35,039
and this the proxy knows everything it

524
00:19:33,520 --> 00:19:36,080
needs to know and it doesn't like

525
00:19:35,039 --> 00:19:39,120
interfere

526
00:19:36,080 --> 00:19:40,559
so using those protocols as the gateways

527
00:19:39,120 --> 00:19:42,879
and and the answer to the question about

528
00:19:40,559 --> 00:19:44,320
what protocols i think it's rtp

529
00:19:42,880 --> 00:19:47,120
i mean you might want something like

530
00:19:44,320 --> 00:19:50,080
snmp but i

531
00:19:47,120 --> 00:19:51,600
i'm unsure about that and in the extreme

532
00:19:50,080 --> 00:19:52,960
case i mean what you'd saw me do with

533
00:19:51,600 --> 00:19:56,559
the the shell

534
00:19:52,960 --> 00:20:00,000
is it's just a plain plain pipe

535
00:19:56,559 --> 00:20:03,039
so it opens up a pipe to a shell

536
00:20:00,000 --> 00:20:04,799
and and talks to that so like you can

537
00:20:03,039 --> 00:20:06,879
i i don't think you can call that a

538
00:20:04,799 --> 00:20:07,679
protocol but that's the extreme back end

539
00:20:06,880 --> 00:20:12,159
of that

540
00:20:07,679 --> 00:20:12,159
did that answer the question okay

541
00:20:15,760 --> 00:20:21,840
i've got a question um sorry

542
00:20:24,159 --> 00:20:30,000
um if you didn't get all this first time

543
00:20:27,919 --> 00:20:33,360
from the explanation is there is it all

544
00:20:30,000 --> 00:20:35,840
documented somewhere with this stuff or

545
00:20:33,360 --> 00:20:37,439
less than it should be um there's a

546
00:20:35,840 --> 00:20:41,039
there's a github repo

547
00:20:37,440 --> 00:20:43,120
um there's a github pipe webcam

548
00:20:41,039 --> 00:20:44,480
which lets you build this minimum

549
00:20:43,120 --> 00:20:48,080
version of this

550
00:20:44,480 --> 00:20:49,919
um but uh

551
00:20:48,080 --> 00:20:51,199
part of the question is actually is it

552
00:20:49,919 --> 00:20:52,880
something that we should be writing up

553
00:20:51,200 --> 00:20:56,240
and trying to standardize

554
00:20:52,880 --> 00:20:56,559
and and make something off or is it just

555
00:20:56,240 --> 00:20:58,960
a

556
00:20:56,559 --> 00:21:00,879
like a little interesting game for me

557
00:20:58,960 --> 00:21:02,240
i'm i'm genuinely unsure about that at

558
00:21:00,880 --> 00:21:06,240
the moment

559
00:21:02,240 --> 00:21:07,679
okay thanks so the question was more

560
00:21:06,240 --> 00:21:09,600
feedback actually i think it's an

561
00:21:07,679 --> 00:21:10,960
absolutely brilliant idea because being

562
00:21:09,600 --> 00:21:13,120
able to

563
00:21:10,960 --> 00:21:14,880
explain to web developers that this is

564
00:21:13,120 --> 00:21:16,239
just like a websocket and i have to go

565
00:21:14,880 --> 00:21:18,960
through the whole

566
00:21:16,240 --> 00:21:21,360
peerconnect for offer answer to get a um

567
00:21:18,960 --> 00:21:23,600
to get a session up to an end point

568
00:21:21,360 --> 00:21:24,959
um is absolutely superb the only thing

569
00:21:23,600 --> 00:21:26,240
that makes me shiver a little bit is

570
00:21:24,960 --> 00:21:29,600
that iframe

571
00:21:26,240 --> 00:21:32,000
um in order to get the data from the um

572
00:21:29,600 --> 00:21:33,120
from the service worker into the uh into

573
00:21:32,000 --> 00:21:34,799
the peer connector

574
00:21:33,120 --> 00:21:36,639
is there any way you're ever going to be

575
00:21:34,799 --> 00:21:38,799
able to get away from that

576
00:21:36,640 --> 00:21:40,880
get away from from having to have a

577
00:21:38,799 --> 00:21:42,840
child iframe so that you can open up a

578
00:21:40,880 --> 00:21:46,000
peer connector

579
00:21:42,840 --> 00:21:50,799
um only if i can persuade

580
00:21:46,000 --> 00:21:55,039
the browser vendors to support um

581
00:21:50,799 --> 00:21:57,440
data channels in service workers um

582
00:21:55,039 --> 00:21:58,720
and that's not totally implausible i've

583
00:21:57,440 --> 00:22:01,919
i've had like

584
00:21:58,720 --> 00:22:03,200
sound soundings that

585
00:22:01,919 --> 00:22:05,360
mean that it's something they'll

586
00:22:03,200 --> 00:22:06,640
consider but getting it done is a whole

587
00:22:05,360 --> 00:22:08,320
other game

588
00:22:06,640 --> 00:22:10,480
although if it turns out that for

589
00:22:08,320 --> 00:22:12,879
example stadia needs it it'll happen in

590
00:22:10,480 --> 00:22:14,559
an

591
00:22:12,880 --> 00:22:16,159
absolutely i guess i crosses over the

592
00:22:14,559 --> 00:22:17,120
permissions model as well and that's the

593
00:22:16,159 --> 00:22:19,520
reason that it's

594
00:22:17,120 --> 00:22:20,799
not done within the service worker

595
00:22:19,520 --> 00:22:24,000
there's a there's a bunch

596
00:22:20,799 --> 00:22:26,158
they actively don't want

597
00:22:24,000 --> 00:22:27,679
the full peer connection api in service

598
00:22:26,159 --> 00:22:29,919
workers because it makes no sense to

599
00:22:27,679 --> 00:22:32,640
send video to a service worker

600
00:22:29,919 --> 00:22:34,720
but data channels there's some agreement

601
00:22:32,640 --> 00:22:36,799
that there is a point to doing it

602
00:22:34,720 --> 00:22:38,840
it's just like everyone's looking at it

603
00:22:36,799 --> 00:22:42,000
and thinking oh do we have to

604
00:22:38,840 --> 00:22:53,280
um thank latin

605
00:22:42,000 --> 00:22:53,280
thank you

