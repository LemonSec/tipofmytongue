1
00:00:07,839 --> 00:00:12,559
okay

2
00:00:09,360 --> 00:00:15,838
nice so hi i'm

3
00:00:12,559 --> 00:00:17,759
simon sir also known as immersion

4
00:00:15,839 --> 00:00:20,080
and i'm going to talk about liblive

5
00:00:17,760 --> 00:00:20,080
stuff

6
00:00:21,279 --> 00:00:28,320
so yeah libliftuff's goals is to take

7
00:00:25,920 --> 00:00:31,119
advantage of kms planes so

8
00:00:28,320 --> 00:00:32,238
i'll first explain what is a hardware

9
00:00:31,119 --> 00:00:34,559
plane

10
00:00:32,238 --> 00:00:35,360
uh then i explain what what is

11
00:00:34,559 --> 00:00:36,959
libliftuff

12
00:00:35,360 --> 00:00:39,120
and what's the current status of the

13
00:00:36,960 --> 00:00:42,719
library and then

14
00:00:39,120 --> 00:00:45,360
we'll see what the next steps are

15
00:00:42,719 --> 00:00:46,559
so this talk will be um it is designed

16
00:00:45,360 --> 00:00:49,519
to

17
00:00:46,559 --> 00:00:50,239
um for mere mortals to be to to

18
00:00:49,520 --> 00:00:53,360
understand

19
00:00:50,239 --> 00:00:55,199
what what the lib lifter is so

20
00:00:53,360 --> 00:00:56,960
if there are experts in the room uh

21
00:00:55,199 --> 00:00:57,680
maybe it will be a little boring at the

22
00:00:56,960 --> 00:01:00,320
beginning

23
00:00:57,680 --> 00:01:00,320
but yeah

24
00:01:00,800 --> 00:01:05,039
so first yeah what what's a hardware

25
00:01:02,800 --> 00:01:07,600
plate so first it has nothing to do with

26
00:01:05,040 --> 00:01:08,159
actual planes so it's a hardware

27
00:01:07,600 --> 00:01:12,240
features

28
00:01:08,159 --> 00:01:15,040
in gpus

29
00:01:12,240 --> 00:01:15,920
so before getting into hardware planes

30
00:01:15,040 --> 00:01:19,119
let's just see

31
00:01:15,920 --> 00:01:22,560
uh how we get a frame and screen uh

32
00:01:19,119 --> 00:01:26,560
how do we show something on screen

33
00:01:22,560 --> 00:01:29,600
so um basically

34
00:01:26,560 --> 00:01:31,840
there's a user space program

35
00:01:29,600 --> 00:01:34,000
that wants to show something on screen

36
00:01:31,840 --> 00:01:36,159
so it has a frame

37
00:01:34,000 --> 00:01:37,200
so here's a typical screen with a

38
00:01:36,159 --> 00:01:40,880
terminal and

39
00:01:37,200 --> 00:01:45,119
a few windows so it talks to the kernel

40
00:01:40,880 --> 00:01:45,119
it's a kernel interface called kms

41
00:01:45,520 --> 00:01:53,360
so it submits a frame to kms kms then

42
00:01:50,479 --> 00:01:55,280
talks to the driver so you have a

43
00:01:53,360 --> 00:01:55,920
different driver depending on the gpu

44
00:01:55,280 --> 00:01:59,200
vendor

45
00:01:55,920 --> 00:02:02,719
so for intel for intel it's i-915

46
00:01:59,200 --> 00:02:04,320
for amd it's amd gpu

47
00:02:02,719 --> 00:02:07,280
and each driver will program the

48
00:02:04,320 --> 00:02:09,840
hardware to display the frame

49
00:02:07,280 --> 00:02:09,840
end screen

50
00:02:10,560 --> 00:02:18,400
so one important thing is that

51
00:02:15,360 --> 00:02:21,120
since i don't know few years we have

52
00:02:18,400 --> 00:02:23,040
a new api to do this which is called the

53
00:02:21,120 --> 00:02:26,000
atomic api

54
00:02:23,040 --> 00:02:27,040
so submitting a frame is now atomic so

55
00:02:26,000 --> 00:02:30,000
you don't you don't have

56
00:02:27,040 --> 00:02:31,679
a partial frame on screen you don't have

57
00:02:30,000 --> 00:02:34,720
tiering and things like this

58
00:02:31,680 --> 00:02:36,720
so it's much better than before

59
00:02:34,720 --> 00:02:38,800
with the legacy api you could you could

60
00:02:36,720 --> 00:02:41,280
have corrupted frames

61
00:02:38,800 --> 00:02:41,280
that way

62
00:02:42,160 --> 00:02:47,840
so um so

63
00:02:45,440 --> 00:02:49,440
the client is typically called a

64
00:02:47,840 --> 00:02:53,200
compositor

65
00:02:49,440 --> 00:02:56,079
because it will take a few windows

66
00:02:53,200 --> 00:02:57,359
so a terminal window a calculator window

67
00:02:56,080 --> 00:02:59,599
a document window

68
00:02:57,360 --> 00:03:00,480
here and it will draw all of these

69
00:02:59,599 --> 00:03:04,000
windows into

70
00:03:00,480 --> 00:03:06,720
a large buffer so it will actually

71
00:03:04,000 --> 00:03:07,680
perform a copy and then it will submit

72
00:03:06,720 --> 00:03:11,090
the final

73
00:03:07,680 --> 00:03:12,480
frame buffer to kms

74
00:03:11,090 --> 00:03:14,400
[Music]

75
00:03:12,480 --> 00:03:17,040
so nowadays this is performed using

76
00:03:14,400 --> 00:03:17,040
opengl

77
00:03:17,599 --> 00:03:23,599
so planes basically

78
00:03:20,879 --> 00:03:24,480
allow the compositor to not to copy and

79
00:03:23,599 --> 00:03:27,200
not to use

80
00:03:24,480 --> 00:03:29,200
opengl at all but to submit directly the

81
00:03:27,200 --> 00:03:32,480
client buffers

82
00:03:29,200 --> 00:03:36,319
to kms so here users

83
00:03:32,480 --> 00:03:39,518
the compositor will submit three buffers

84
00:03:36,319 --> 00:03:42,640
in one in one step in one atomic covet

85
00:03:39,519 --> 00:03:43,360
with some metadata so for instance it

86
00:03:42,640 --> 00:03:46,399
says

87
00:03:43,360 --> 00:03:48,400
terminal window isn't top left

88
00:03:46,400 --> 00:03:50,640
the calculator window is on the bottom

89
00:03:48,400 --> 00:03:50,640
right

90
00:03:50,879 --> 00:03:56,560
so we just submit this full state to kms

91
00:03:54,000 --> 00:03:57,840
and the hardware will perform the

92
00:03:56,560 --> 00:04:03,200
composition

93
00:03:57,840 --> 00:04:03,200
directly in the scan out engine

94
00:04:04,080 --> 00:04:11,200
so you don't copy anymore

95
00:04:08,560 --> 00:04:12,640
and you have an api to set properties

96
00:04:11,200 --> 00:04:17,360
and

97
00:04:12,640 --> 00:04:17,360
all of these windows like the position

98
00:04:18,238 --> 00:04:24,400
so why do we want to use planes so

99
00:04:22,240 --> 00:04:25,919
so it's zero copier as i've said so

100
00:04:24,400 --> 00:04:29,440
sometimes it's very important

101
00:04:25,919 --> 00:04:31,359
because some hardware needs a lot of

102
00:04:29,440 --> 00:04:32,960
time to perform copies

103
00:04:31,360 --> 00:04:36,639
depending on the location and buffers

104
00:04:32,960 --> 00:04:40,000
and other things for instance arm gpus

105
00:04:36,639 --> 00:04:44,720
it makes a big difference you also get

106
00:04:40,000 --> 00:04:47,040
lower latency if you don't do a copy

107
00:04:44,720 --> 00:04:50,479
because you don't need to wait until the

108
00:04:47,040 --> 00:04:54,960
copy is over to submit the frame to kms

109
00:04:50,479 --> 00:04:58,159
and it also improves power consumption

110
00:04:54,960 --> 00:04:59,198
because when you use planes uh the

111
00:04:58,160 --> 00:05:02,720
render engine

112
00:04:59,199 --> 00:05:07,600
um can go to sleep

113
00:05:02,720 --> 00:05:10,160
so the the the the part of the gpu that

114
00:05:07,600 --> 00:05:11,120
is used for opengl is not used anymore

115
00:05:10,160 --> 00:05:14,479
and and can

116
00:05:11,120 --> 00:05:16,880
uh is not using battery

117
00:05:14,479 --> 00:05:18,080
only the scan out engine which is

118
00:05:16,880 --> 00:05:22,800
sending frames to

119
00:05:18,080 --> 00:05:22,800
uh to the screen is still awake

120
00:05:22,880 --> 00:05:29,520
but planes come with some downsides too

121
00:05:26,000 --> 00:05:32,560
uh they are very hard so pretty hard to

122
00:05:29,520 --> 00:05:33,359
to set up and use uh especially when you

123
00:05:32,560 --> 00:05:36,160
don't

124
00:05:33,360 --> 00:05:36,960
control the buffer especially if buffers

125
00:05:36,160 --> 00:05:39,840
come from

126
00:05:36,960 --> 00:05:39,840
clients

127
00:05:40,080 --> 00:05:44,890
so right now compositors don't really

128
00:05:43,680 --> 00:05:48,209
support planes

129
00:05:44,890 --> 00:05:48,209
[Music]

130
00:05:48,720 --> 00:05:56,160
there's one exception western supports

131
00:05:52,880 --> 00:05:59,120
playing pretty well but apart from that

132
00:05:56,160 --> 00:06:00,000
everybody just always composites the

133
00:05:59,120 --> 00:06:02,560
whole

134
00:06:00,000 --> 00:06:04,000
image so one little exception is the

135
00:06:02,560 --> 00:06:06,800
cursor plane

136
00:06:04,000 --> 00:06:08,960
so when i move my cursor here most

137
00:06:06,800 --> 00:06:12,000
composites are able to put it in a plane

138
00:06:08,960 --> 00:06:14,638
a special plane called the cursor plane

139
00:06:12,000 --> 00:06:16,880
but that's the only thing compositors

140
00:06:14,639 --> 00:06:20,319
are able to use

141
00:06:16,880 --> 00:06:23,520
except western um

142
00:06:20,319 --> 00:06:26,319
so one other

143
00:06:23,520 --> 00:06:27,840
issue with planes is that there are so i

144
00:06:26,319 --> 00:06:30,319
said planes are hard to use

145
00:06:27,840 --> 00:06:31,359
and that's because they come with some

146
00:06:30,319 --> 00:06:33,680
constraints

147
00:06:31,360 --> 00:06:34,479
so for instance here are the planes i

148
00:06:33,680 --> 00:06:38,240
have on my

149
00:06:34,479 --> 00:06:43,520
intel machine i have three planes

150
00:06:38,240 --> 00:06:46,800
the first plane here is able to display

151
00:06:43,520 --> 00:06:50,960
buffers with only a few formats so

152
00:06:46,800 --> 00:06:53,840
for instance it can do c8 rgb 565

153
00:06:50,960 --> 00:06:55,599
and all of this in the list the second

154
00:06:53,840 --> 00:06:58,000
plane can do a different set of

155
00:06:55,599 --> 00:06:59,039
formats with wide uv formats and the

156
00:06:58,000 --> 00:07:03,759
last plane

157
00:06:59,039 --> 00:07:05,520
is only able to do a rgb 888

158
00:07:03,759 --> 00:07:07,520
so you can see that i only have a

159
00:07:05,520 --> 00:07:08,960
limited number of planes with a limited

160
00:07:07,520 --> 00:07:12,880
number of

161
00:07:08,960 --> 00:07:12,880
formats supported on each plane

162
00:07:14,319 --> 00:07:18,639
so uh for instance let's take an example

163
00:07:18,000 --> 00:07:21,120
with

164
00:07:18,639 --> 00:07:22,319
these three windows and the the three

165
00:07:21,120 --> 00:07:24,800
planes i have

166
00:07:22,319 --> 00:07:26,240
so for instance if the this window is

167
00:07:24,800 --> 00:07:28,960
using a rgb

168
00:07:26,240 --> 00:07:30,000
this will do xrgb this window xlgb then

169
00:07:28,960 --> 00:07:33,120
i can put everything

170
00:07:30,000 --> 00:07:36,319
to plane and everything's fine but

171
00:07:33,120 --> 00:07:40,400
if the first window is used in xrgb then

172
00:07:36,319 --> 00:07:40,400
i can do that and i can't use planes

173
00:07:40,639 --> 00:07:44,879
so planes come with a large number of

174
00:07:43,759 --> 00:07:47,199
constraints

175
00:07:44,879 --> 00:07:47,919
so we said number of friends formats but

176
00:07:47,199 --> 00:07:49,440
that you can

177
00:07:47,919 --> 00:07:51,359
there are also some constraints on the

178
00:07:49,440 --> 00:07:53,520
buffer size uh

179
00:07:51,360 --> 00:07:54,639
some constraints in the that position so

180
00:07:53,520 --> 00:07:57,520
which plane is

181
00:07:54,639 --> 00:07:59,039
over whichever plane so for instance on

182
00:07:57,520 --> 00:08:01,039
my machine

183
00:07:59,039 --> 00:08:02,560
the first plane will be under the second

184
00:08:01,039 --> 00:08:06,080
plane which is under the

185
00:08:02,560 --> 00:08:08,319
last plane and i can change that

186
00:08:06,080 --> 00:08:10,800
some hardware is able to change that

187
00:08:08,319 --> 00:08:10,800
position

188
00:08:10,879 --> 00:08:14,639
there are also some bandwidth

189
00:08:12,240 --> 00:08:17,120
constraints so if i use

190
00:08:14,639 --> 00:08:19,360
windows that are too large i can't put

191
00:08:17,120 --> 00:08:23,759
them into planes

192
00:08:19,360 --> 00:08:27,039
and a lot of real stuff for instance

193
00:08:23,759 --> 00:08:27,759
on my yuv plane if i want to on my

194
00:08:27,039 --> 00:08:30,560
second plane

195
00:08:27,759 --> 00:08:31,840
if i want to display yuv buffer the

196
00:08:30,560 --> 00:08:34,880
position

197
00:08:31,840 --> 00:08:36,159
must be even i think and if it's the

198
00:08:34,880 --> 00:08:39,279
position is odd

199
00:08:36,159 --> 00:08:42,479
the the position coordinates are odd

200
00:08:39,279 --> 00:08:44,560
then it doesn't work um that's a so

201
00:08:42,479 --> 00:08:47,680
that's intel specific of course and

202
00:08:44,560 --> 00:08:51,040
every vendor has some uh

203
00:08:47,680 --> 00:08:54,560
vendor-specific constraints like this

204
00:08:51,040 --> 00:08:57,920
so yeah that's a mess

205
00:08:54,560 --> 00:09:00,239
and the only way we we we know whether

206
00:08:57,920 --> 00:09:02,319
some combination will work or not is to

207
00:09:00,240 --> 00:09:03,360
perform what we call an atomic test only

208
00:09:02,320 --> 00:09:06,240
commit

209
00:09:03,360 --> 00:09:06,880
so we basically say hey i want to

210
00:09:06,240 --> 00:09:09,120
display

211
00:09:06,880 --> 00:09:10,560
this window and this plane with a window

212
00:09:09,120 --> 00:09:13,839
on this other plane

213
00:09:10,560 --> 00:09:17,359
and we asked the kernel we asked kms

214
00:09:13,839 --> 00:09:20,320
will this work and kms says yes or no

215
00:09:17,360 --> 00:09:20,320
but we don't know why

216
00:09:21,120 --> 00:09:24,720
so yeah that's how we use planes

217
00:09:23,440 --> 00:09:28,640
basically

218
00:09:24,720 --> 00:09:30,000
so now we can uh dive into what's slip

219
00:09:28,640 --> 00:09:32,959
lift off so the goal of

220
00:09:30,000 --> 00:09:34,839
lib liftoff is to make it easier to use

221
00:09:32,959 --> 00:09:38,319
hardware planes

222
00:09:34,839 --> 00:09:41,360
um one goal is also to

223
00:09:38,320 --> 00:09:41,920
not abstract too much to be a as as a

224
00:09:41,360 --> 00:09:45,440
feel

225
00:09:41,920 --> 00:09:46,800
as thin as possible uh a thin layer of

226
00:09:45,440 --> 00:09:49,839
abstraction

227
00:09:46,800 --> 00:09:50,880
uh to don't get into the in the way of

228
00:09:49,839 --> 00:09:53,680
the compositor

229
00:09:50,880 --> 00:09:57,279
so if the compositor wants to use

230
00:09:53,680 --> 00:10:01,680
special address features or

231
00:09:57,279 --> 00:10:05,279
so we don't we want to let the composer

232
00:10:01,680 --> 00:10:08,479
customize a lot how it uses uh

233
00:10:05,279 --> 00:10:11,200
planes so we had the workshop at

234
00:10:08,480 --> 00:10:12,240
existing last year and so this this

235
00:10:11,200 --> 00:10:15,040
presentation is

236
00:10:12,240 --> 00:10:15,360
basically what what we've done so far

237
00:10:15,040 --> 00:10:18,560
and

238
00:10:15,360 --> 00:10:22,079
what's what are the next steps

239
00:10:18,560 --> 00:10:25,839
so the basic idea bi

240
00:10:22,079 --> 00:10:29,279
behind lib lift off is to

241
00:10:25,839 --> 00:10:31,360
expose some layers so layers are virtual

242
00:10:29,279 --> 00:10:33,040
planes

243
00:10:31,360 --> 00:10:35,200
they are the same as planes you you can

244
00:10:33,040 --> 00:10:36,160
set the position you can set the buffer

245
00:10:35,200 --> 00:10:39,440
you can set a

246
00:10:36,160 --> 00:10:42,160
bunch of properties in them uh but

247
00:10:39,440 --> 00:10:42,720
they don't have any constraint so you

248
00:10:42,160 --> 00:10:45,199
can

249
00:10:42,720 --> 00:10:46,000
you have as many layers as as you want

250
00:10:45,200 --> 00:10:49,440
and

251
00:10:46,000 --> 00:10:51,920
you can set any property in them

252
00:10:49,440 --> 00:10:51,920
it's fine

253
00:10:52,800 --> 00:10:56,399
so basically compositors can use layers

254
00:10:55,519 --> 00:10:59,920
just like they

255
00:10:56,399 --> 00:11:03,120
they they would use planes

256
00:10:59,920 --> 00:11:06,719
and then libliftuff will see

257
00:11:03,120 --> 00:11:11,519
which layers the compositor has set up

258
00:11:06,720 --> 00:11:14,560
and then try to map them into planes

259
00:11:11,519 --> 00:11:17,200
and so yeah lib lift from the layer to

260
00:11:14,560 --> 00:11:17,199
plane mapping

261
00:11:18,320 --> 00:11:26,399
so let's see a very basic example

262
00:11:23,200 --> 00:11:29,040
so it's a pretty simple api

263
00:11:26,399 --> 00:11:30,640
so for each gpu you can create a lib

264
00:11:29,040 --> 00:11:33,120
lift off device

265
00:11:30,640 --> 00:11:33,760
uh and then for each device you have a

266
00:11:33,120 --> 00:11:38,240
bunch of

267
00:11:33,760 --> 00:11:41,680
uh of outputs you can create an output

268
00:11:38,240 --> 00:11:45,120
uh list of outputs and then you can

269
00:11:41,680 --> 00:11:48,399
create as many layers as you want um

270
00:11:45,120 --> 00:11:49,519
here i create a layer i set the frame

271
00:11:48,399 --> 00:11:53,279
buffer id

272
00:11:49,519 --> 00:11:55,920
i can set the position i can set

273
00:11:53,279 --> 00:11:58,399
the scaling method and a bunch of stuff

274
00:11:55,920 --> 00:12:01,680
like this so these are just plain

275
00:11:58,399 --> 00:12:03,920
standard plain properties yeah

276
00:12:01,680 --> 00:12:06,800
probably a real order example will set

277
00:12:03,920 --> 00:12:09,680
up more layers like this

278
00:12:06,800 --> 00:12:10,399
and then the compositor can just call

279
00:12:09,680 --> 00:12:13,760
this function

280
00:12:10,399 --> 00:12:17,519
lift off output apply uh and

281
00:12:13,760 --> 00:12:20,560
this will fill an atomic commit

282
00:12:17,519 --> 00:12:24,079
we will all the plane stats planes

283
00:12:20,560 --> 00:12:27,279
state and the composite can just

284
00:12:24,079 --> 00:12:29,839
uh perform the atomic commit so send

285
00:12:27,279 --> 00:12:30,959
all the properties to the kernel and to

286
00:12:29,839 --> 00:12:33,519
display a new frame

287
00:12:30,959 --> 00:12:35,359
and that's all so all the compositors

288
00:12:33,519 --> 00:12:36,399
the compositor has to do is set up a

289
00:12:35,360 --> 00:12:39,920
bunch of layers

290
00:12:36,399 --> 00:12:43,360
and then uh this was done this is like

291
00:12:39,920 --> 00:12:43,360
before like this doesn't change

292
00:12:43,519 --> 00:12:47,519
composer was already doing that before

293
00:12:47,839 --> 00:12:57,920
so one small um

294
00:12:52,480 --> 00:12:57,920
problem with this is that sometimes

295
00:12:58,880 --> 00:13:05,519
some window cannot make it into plane

296
00:13:02,320 --> 00:13:08,720
so we've seen before that if this uses

297
00:13:05,519 --> 00:13:09,519
x rgb then uh i need to fall back to

298
00:13:08,720 --> 00:13:12,320
composition

299
00:13:09,519 --> 00:13:12,720
but i don't need to do that for uh so

300
00:13:12,320 --> 00:13:15,760
yeah

301
00:13:12,720 --> 00:13:18,320
for so in this example if these two

302
00:13:15,760 --> 00:13:20,000
can put be put into a plane we must fall

303
00:13:18,320 --> 00:13:21,839
back to composition to copy them

304
00:13:20,000 --> 00:13:23,120
into a large frame buffer like before

305
00:13:21,839 --> 00:13:25,600
with opengl

306
00:13:23,120 --> 00:13:28,639
and if this makes it into a plane then

307
00:13:25,600 --> 00:13:28,639
we don't need to copy it

308
00:13:29,839 --> 00:13:36,320
so this is a mixed mode where we use

309
00:13:33,200 --> 00:13:39,440
planes for some windows but not for

310
00:13:36,320 --> 00:13:39,440
all of them um

311
00:13:40,240 --> 00:13:46,880
so the way it works is that

312
00:13:43,440 --> 00:13:49,040
so yeah one important thing before

313
00:13:46,880 --> 00:13:50,959
uh anything how we can manage this

314
00:13:49,040 --> 00:13:52,560
situation is that liberty staff doesn't

315
00:13:50,959 --> 00:13:55,359
perform any composition so

316
00:13:52,560 --> 00:13:56,160
the compensator is is still responsible

317
00:13:55,360 --> 00:13:59,600
for

318
00:13:56,160 --> 00:14:03,839
using opengl and copy window buffers

319
00:13:59,600 --> 00:14:03,839
into the larger buffer

320
00:14:04,000 --> 00:14:09,519
so basically compositors

321
00:14:07,279 --> 00:14:13,199
will have this larger frame buffer they

322
00:14:09,519 --> 00:14:16,160
need to mark it to to tell leib liftef

323
00:14:13,199 --> 00:14:17,120
this is the composition layer so please

324
00:14:16,160 --> 00:14:19,279
if you need to

325
00:14:17,120 --> 00:14:21,839
fall back to composition for some

326
00:14:19,279 --> 00:14:21,839
windows

327
00:14:22,160 --> 00:14:26,319
please use this layer to to indicate i

328
00:14:25,199 --> 00:14:29,599
need to copy

329
00:14:26,320 --> 00:14:32,240
to perform some copies and this so

330
00:14:29,600 --> 00:14:34,079
there's a function for this and then

331
00:14:32,240 --> 00:14:37,440
compositors need to

332
00:14:34,079 --> 00:14:39,120
uh after performing the uh

333
00:14:37,440 --> 00:14:40,720
calling the the functions that perform

334
00:14:39,120 --> 00:14:44,160
perform the the mapping

335
00:14:40,720 --> 00:14:47,760
liblift output apply compositors need

336
00:14:44,160 --> 00:14:50,480
to check each layer and if the layer

337
00:14:47,760 --> 00:14:54,319
couldn't be put into plane

338
00:14:50,480 --> 00:14:56,839
um then the

339
00:14:54,320 --> 00:14:58,639
the composer needs to copy it with a pen

340
00:14:56,839 --> 00:15:02,000
shear

341
00:14:58,639 --> 00:15:05,760
so the

342
00:15:02,000 --> 00:15:08,830
current status is that

343
00:15:05,760 --> 00:15:10,480
so the layer to plane mapping works

344
00:15:08,830 --> 00:15:12,320
[Music]

345
00:15:10,480 --> 00:15:13,519
we have some support for collision

346
00:15:12,320 --> 00:15:14,959
detection so for

347
00:15:13,519 --> 00:15:17,600
for instance if you have two windows

348
00:15:14,959 --> 00:15:19,518
that don't collide then you don't care

349
00:15:17,600 --> 00:15:20,639
whether a plane is on top of the other

350
00:15:19,519 --> 00:15:23,839
or not

351
00:15:20,639 --> 00:15:25,440
you can just put the two windows into

352
00:15:23,839 --> 00:15:28,720
planes and you don't care about

353
00:15:25,440 --> 00:15:28,720
the relative position

354
00:15:29,360 --> 00:15:32,800
we have support for basic incremental

355
00:15:32,079 --> 00:15:36,160
updates

356
00:15:32,800 --> 00:15:38,479
so if you only update the buffer

357
00:15:36,160 --> 00:15:40,880
property and you don't update any other

358
00:15:38,480 --> 00:15:43,440
property we can reuse the previous

359
00:15:40,880 --> 00:15:46,560
mapping we had we don't need to

360
00:15:43,440 --> 00:15:50,000
recompute the whole thing

361
00:15:46,560 --> 00:15:52,719
and one important item is that we

362
00:15:50,000 --> 00:15:53,279
we have some unit tests i think i feel

363
00:15:52,720 --> 00:15:55,600
with

364
00:15:53,279 --> 00:15:57,120
these unit tests are pretty important

365
00:15:55,600 --> 00:15:59,360
because it's very easy to

366
00:15:57,120 --> 00:16:00,240
change a bit of the algorithm and then

367
00:15:59,360 --> 00:16:03,759
get it wrong

368
00:16:00,240 --> 00:16:05,600
and it's very hard to debug so we have a

369
00:16:03,759 --> 00:16:09,759
mock leap the arm

370
00:16:05,600 --> 00:16:12,880
library which fakes some uh

371
00:16:09,759 --> 00:16:16,079
some hardware planes and checks that lip

372
00:16:12,880 --> 00:16:16,079
lifter does the right thing

373
00:16:18,079 --> 00:16:24,959
so i i also focused on

374
00:16:21,600 --> 00:16:25,519
doing some field testing so making sure

375
00:16:24,959 --> 00:16:28,160
that

376
00:16:25,519 --> 00:16:28,880
uh in the real world it makes sense to

377
00:16:28,160 --> 00:16:33,040
do this

378
00:16:28,880 --> 00:16:33,040
to to do what lib lifter does

379
00:16:35,440 --> 00:16:40,560
so the first thing i've done is uh

380
00:16:38,560 --> 00:16:43,758
starting a glider which is an

381
00:16:40,560 --> 00:16:46,880
experimental compositor using libliftuff

382
00:16:43,759 --> 00:16:47,920
um this is just to prove that the api is

383
00:16:46,880 --> 00:16:52,000
fine and that

384
00:16:47,920 --> 00:16:54,479
with real clients with well windows

385
00:16:52,000 --> 00:16:54,480
it works

386
00:16:55,360 --> 00:16:59,759
so the goal uh i'm working on well

387
00:16:58,079 --> 00:17:00,638
routes which is the wyland compositor

388
00:16:59,759 --> 00:17:04,480
library

389
00:17:00,639 --> 00:17:05,839
and i'm working on making making it

390
00:17:04,480 --> 00:17:08,240
ready for lib liftoff

391
00:17:05,839 --> 00:17:09,198
so we need to add a bunch of new apis

392
00:17:08,240 --> 00:17:12,880
and

393
00:17:09,199 --> 00:17:16,319
refactor some some things um

394
00:17:12,880 --> 00:17:18,000
there's also valve is working on a

395
00:17:16,319 --> 00:17:21,359
compositor called gamescope

396
00:17:18,000 --> 00:17:21,359
for the steam os

397
00:17:23,439 --> 00:17:27,919
distribution and it will use libliftuff

398
00:17:26,480 --> 00:17:31,039
as well so that's

399
00:17:27,919 --> 00:17:33,840
pretty cool to have some other people

400
00:17:31,039 --> 00:17:33,840
trying it out

401
00:17:34,799 --> 00:17:38,320
so with glider i've performed some very

402
00:17:37,360 --> 00:17:43,360
very early

403
00:17:38,320 --> 00:17:43,360
benchmarks so

404
00:17:43,440 --> 00:17:49,600
we can see here that so the compositor

405
00:17:46,559 --> 00:17:51,840
is the first item it

406
00:17:49,600 --> 00:17:53,760
this test was done by using a very

407
00:17:51,840 --> 00:17:58,559
simple client that just was

408
00:17:53,760 --> 00:18:02,400
a gradient uh in a 250

409
00:17:58,559 --> 00:18:05,760
per 250 pixels buffer

410
00:18:02,400 --> 00:18:08,320
so a pretty small buffer

411
00:18:05,760 --> 00:18:09,200
and we can see that yeah the power's

412
00:18:08,320 --> 00:18:13,439
teammate is

413
00:18:09,200 --> 00:18:13,440
like yeah it's pretty good

414
00:18:13,679 --> 00:18:16,799
we use less power than before so that's

415
00:18:16,080 --> 00:18:21,600
a good sign

416
00:18:16,799 --> 00:18:21,600
so but uh yeah again um

417
00:18:22,080 --> 00:18:25,760
we need to like take a step back when

418
00:18:24,160 --> 00:18:28,480
reading these numbers because

419
00:18:25,760 --> 00:18:29,520
uh the the when falling back to when

420
00:18:28,480 --> 00:18:31,600
using composition

421
00:18:29,520 --> 00:18:33,520
there was no optimization like damage

422
00:18:31,600 --> 00:18:36,559
tracking or anything like this

423
00:18:33,520 --> 00:18:39,918
so uh when doing positions the wool

424
00:18:36,559 --> 00:18:42,559
screen buffer was copied each time uh

425
00:18:39,919 --> 00:18:43,600
and when using planes or absolutely no

426
00:18:42,559 --> 00:18:46,879
copy whatsoever

427
00:18:43,600 --> 00:18:49,120
so yeah that's pretty good but uh

428
00:18:46,880 --> 00:18:51,280
maybe real world scenarios will be like

429
00:18:49,120 --> 00:18:54,840
not as optimistic as this and clients

430
00:18:51,280 --> 00:18:57,280
will probably use a lot more power of

431
00:18:54,840 --> 00:19:02,320
course

432
00:18:57,280 --> 00:19:02,320
so yeah what's next um

433
00:19:02,960 --> 00:19:08,840
so i have a bunch of short term goals um

434
00:19:06,559 --> 00:19:11,280
the first one is to perform more

435
00:19:08,840 --> 00:19:15,039
benchmarks

436
00:19:11,280 --> 00:19:17,360
one issue is that when lib liftoff has a

437
00:19:15,039 --> 00:19:20,240
bunch of layers and need to

438
00:19:17,360 --> 00:19:21,840
try to map as many layers as possible to

439
00:19:20,240 --> 00:19:24,240
planes

440
00:19:21,840 --> 00:19:25,840
the algorithm takes quite a long time

441
00:19:24,240 --> 00:19:30,880
because we need to perform

442
00:19:25,840 --> 00:19:33,439
a lot of atomic comets so we need to

443
00:19:30,880 --> 00:19:34,240
take a layer put it into a plane and ask

444
00:19:33,440 --> 00:19:37,039
the kernel

445
00:19:34,240 --> 00:19:38,080
will this work if it does work put take

446
00:19:37,039 --> 00:19:39,840
the second layer

447
00:19:38,080 --> 00:19:41,918
try to put it in the plane ask the

448
00:19:39,840 --> 00:19:45,600
kernel again is this fine

449
00:19:41,919 --> 00:19:49,520
so this takes quite a long time

450
00:19:45,600 --> 00:19:52,959
depending on the hardware configuration

451
00:19:49,520 --> 00:19:54,080
so i have some ideas to try to find the

452
00:19:52,960 --> 00:19:58,640
best

453
00:19:54,080 --> 00:20:00,720
layer to play in mapping a little faster

454
00:19:58,640 --> 00:20:02,080
we need to test more hardware and see

455
00:20:00,720 --> 00:20:06,720
how it behaves

456
00:20:02,080 --> 00:20:10,399
but one important thing is that

457
00:20:06,720 --> 00:20:11,039
um the incremental update saves a lot of

458
00:20:10,400 --> 00:20:13,200
time so

459
00:20:11,039 --> 00:20:15,760
most of the time you only change the

460
00:20:13,200 --> 00:20:18,840
buffer you don't really

461
00:20:15,760 --> 00:20:22,480
change the position of the windows a lot

462
00:20:18,840 --> 00:20:23,520
um so you just update what the contents

463
00:20:22,480 --> 00:20:26,320
of the window

464
00:20:23,520 --> 00:20:29,200
so incremental updates are very

465
00:20:26,320 --> 00:20:31,918
important to mitigate this also

466
00:20:29,200 --> 00:20:32,400
so the goal is here is to not miss a

467
00:20:31,919 --> 00:20:36,960
frame

468
00:20:32,400 --> 00:20:36,960
we basically have a budget um

469
00:20:37,520 --> 00:20:44,480
for if if the screen refresh rate is

470
00:20:40,799 --> 00:20:47,600
16 uh 60

471
00:20:44,480 --> 00:20:51,280
hertz then we have 16 milliseconds to

472
00:20:47,600 --> 00:20:54,959
to to do everything to do a new frame

473
00:20:51,280 --> 00:20:58,000
so yeah we need to be fast um

474
00:20:54,960 --> 00:21:02,000
we need also to to better

475
00:20:58,000 --> 00:21:04,159
support uh multi oh yeah

476
00:21:02,000 --> 00:21:05,120
so layer priority is an important thing

477
00:21:04,159 --> 00:21:07,679
so if

478
00:21:05,120 --> 00:21:09,439
if a window updates a lot so for

479
00:21:07,679 --> 00:21:12,480
instance if you have a video player

480
00:21:09,440 --> 00:21:15,360
uh each frame

481
00:21:12,480 --> 00:21:17,520
each frame will be a new one and you

482
00:21:15,360 --> 00:21:19,760
will never basically reuse the previous

483
00:21:17,520 --> 00:21:21,520
frame

484
00:21:19,760 --> 00:21:22,960
then you really want to put it into a

485
00:21:21,520 --> 00:21:26,480
plane to avoid

486
00:21:22,960 --> 00:21:26,480
having to copy the thing

487
00:21:26,559 --> 00:21:33,280
so you you want to yeah

488
00:21:30,320 --> 00:21:34,960
you want to do to to try to see which

489
00:21:33,280 --> 00:21:36,879
which layers are updating more often

490
00:21:34,960 --> 00:21:41,120
than the others and put them into

491
00:21:36,880 --> 00:21:41,120
layer planes in priority

492
00:21:42,000 --> 00:21:45,360
i'd also like to have better

493
00:21:43,919 --> 00:21:48,799
multi-output supports

494
00:21:45,360 --> 00:21:51,039
um because right now the first

495
00:21:48,799 --> 00:21:51,918
output that comes will take all the

496
00:21:51,039 --> 00:21:55,039
planes it can

497
00:21:51,919 --> 00:21:56,840
take and if you have another output

498
00:21:55,039 --> 00:21:58,240
then it won't it won't have as many

499
00:21:56,840 --> 00:22:01,199
planes

500
00:21:58,240 --> 00:22:01,840
so we need to be fair when splitting

501
00:22:01,200 --> 00:22:04,720
planes

502
00:22:01,840 --> 00:22:07,840
across outputs and also we need a way to

503
00:22:04,720 --> 00:22:07,840
migrate planes

504
00:22:07,919 --> 00:22:12,880
so for instance if i use 10 planes and

505
00:22:10,720 --> 00:22:13,760
one output and a new output comes in i

506
00:22:12,880 --> 00:22:16,080
need to

507
00:22:13,760 --> 00:22:18,320
migrate planes from the first one to the

508
00:22:16,080 --> 00:22:19,760
other one and it's a little bit tricky

509
00:22:18,320 --> 00:22:22,879
because

510
00:22:19,760 --> 00:22:25,280
sometimes the output are not refreshed

511
00:22:22,880 --> 00:22:27,760
at the same time

512
00:22:25,280 --> 00:22:28,399
so for instance if both outputs have

513
00:22:27,760 --> 00:22:31,840
different

514
00:22:28,400 --> 00:22:35,679
refresh rates uh yeah there's

515
00:22:31,840 --> 00:22:35,678
some synchronization issues here

516
00:22:36,240 --> 00:22:40,510
um i have also a bunch of long-term

517
00:22:39,440 --> 00:22:42,080
goals

518
00:22:40,510 --> 00:22:44,158
[Music]

519
00:22:42,080 --> 00:22:46,639
so the first one is to have a feedback

520
00:22:44,159 --> 00:22:49,679
loop so basically the idea is that

521
00:22:46,640 --> 00:22:51,520
right now clients allocate buffers

522
00:22:49,679 --> 00:22:53,600
send it to the compositor and the

523
00:22:51,520 --> 00:22:55,600
compositors need to do the copy

524
00:22:53,600 --> 00:22:56,879
and so the client decides what the

525
00:22:55,600 --> 00:23:00,559
buffer format is so

526
00:22:56,880 --> 00:23:03,919
here the client decided xrgb

527
00:23:00,559 --> 00:23:06,399
but then the compositor cannot put it

528
00:23:03,919 --> 00:23:09,679
into a plane

529
00:23:06,400 --> 00:23:12,000
so the idea as a feedback loop is to not

530
00:23:09,679 --> 00:23:12,720
just be sad and say okay i can't put

531
00:23:12,000 --> 00:23:14,720
into it

532
00:23:12,720 --> 00:23:15,760
put the window into play and life is

533
00:23:14,720 --> 00:23:18,720
terrible

534
00:23:15,760 --> 00:23:21,039
uh the idea is just to let the composite

535
00:23:18,720 --> 00:23:23,440
to other way for the compositor to say

536
00:23:21,039 --> 00:23:24,720
okay to say to the client i can't put

537
00:23:23,440 --> 00:23:27,520
this format into

538
00:23:24,720 --> 00:23:28,720
into a plane but if you allocate using

539
00:23:27,520 --> 00:23:32,320
this different format

540
00:23:28,720 --> 00:23:33,360
argb then life will be better and so the

541
00:23:32,320 --> 00:23:36,960
client can do it

542
00:23:33,360 --> 00:23:39,360
so we need a little protocol to so

543
00:23:36,960 --> 00:23:40,400
i'm working violence so i'm working a

544
00:23:39,360 --> 00:23:43,918
well-known protocol

545
00:23:40,400 --> 00:23:44,720
to do this some kind of feedback loop to

546
00:23:43,919 --> 00:23:46,960
say okay

547
00:23:44,720 --> 00:23:51,279
use rgb and the client says okay i'm

548
00:23:46,960 --> 00:23:54,559
using irgb now

549
00:23:51,279 --> 00:23:58,559
so yeah this is work in progress

550
00:23:54,559 --> 00:23:58,559
it's called the dma buff hints

551
00:24:00,320 --> 00:24:06,240
one of our long term goal is to have

552
00:24:03,440 --> 00:24:07,600
driver specific plugins so as i said

553
00:24:06,240 --> 00:24:10,880
right now we have only the

554
00:24:07,600 --> 00:24:15,120
atomic test only api um to know if

555
00:24:10,880 --> 00:24:18,799
a plane combination will work um

556
00:24:15,120 --> 00:24:19,439
so the idea will be to have some driver

557
00:24:18,799 --> 00:24:22,639
specific

558
00:24:19,440 --> 00:24:25,840
uh plugins inside libliftef itself

559
00:24:22,640 --> 00:24:27,120
so you we could have logics to say okay

560
00:24:25,840 --> 00:24:29,918
an intel i know that

561
00:24:27,120 --> 00:24:30,799
this won't work so i won't even try it

562
00:24:29,919 --> 00:24:32,400
and

563
00:24:30,799 --> 00:24:35,120
things like this and i know that the

564
00:24:32,400 --> 00:24:38,480
bandwidth limitation is

565
00:24:35,120 --> 00:24:41,520
this limit so i won't try to go over it

566
00:24:38,480 --> 00:24:42,640
so this will allow us to be more clever

567
00:24:41,520 --> 00:24:46,240
when allocating

568
00:24:42,640 --> 00:24:48,960
when doing the plane mapping

569
00:24:46,240 --> 00:24:49,760
and the last item but yeah it's for the

570
00:24:48,960 --> 00:24:51,919
future

571
00:24:49,760 --> 00:24:52,799
is exotic configuration sometimes you

572
00:24:51,919 --> 00:24:55,279
have

573
00:24:52,799 --> 00:24:56,879
planes which are under the composition

574
00:24:55,279 --> 00:24:59,279
layer so you need to draw a

575
00:24:56,880 --> 00:25:00,799
hole into the composition plane to be

576
00:24:59,279 --> 00:25:03,760
able to to

577
00:25:00,799 --> 00:25:04,480
to to show some planes under it so it's

578
00:25:03,760 --> 00:25:07,919
very very

579
00:25:04,480 --> 00:25:09,050
um yeah tricky we'll see if it's worth

580
00:25:07,919 --> 00:25:10,559
it

581
00:25:09,050 --> 00:25:15,200
[Music]

582
00:25:10,559 --> 00:25:18,480
so there are a bunch of references here

583
00:25:15,200 --> 00:25:21,200
if you're interested um and

584
00:25:18,480 --> 00:25:29,840
thank you for attention and yeah feel

585
00:25:21,200 --> 00:25:29,840
free to ask questions

586
00:25:46,320 --> 00:25:49,520
so can you repeat the question how do

587
00:25:48,720 --> 00:25:50,880
you know which

588
00:25:49,520 --> 00:25:52,720
surfaces you should put into live

589
00:25:50,880 --> 00:25:53,279
liftoff do you put in every window that

590
00:25:52,720 --> 00:25:55,840
we have

591
00:25:53,279 --> 00:25:56,640
or just the ones that are have a high

592
00:25:55,840 --> 00:25:58,320
frequency

593
00:25:56,640 --> 00:25:59,679
okay so i'll repeat the questions for

594
00:25:58,320 --> 00:26:03,200
people on the stream

595
00:25:59,679 --> 00:26:06,080
um so the question is uh

596
00:26:03,200 --> 00:26:07,679
do we so for so this is a question from

597
00:26:06,080 --> 00:26:11,199
the compositor point of view

598
00:26:07,679 --> 00:26:14,400
so as the compositor do i put every

599
00:26:11,200 --> 00:26:15,279
uh window and put it and create a lift

600
00:26:14,400 --> 00:26:17,919
off layer

601
00:26:15,279 --> 00:26:19,120
or do i do something else so yeah the

602
00:26:17,919 --> 00:26:21,200
answer is basically

603
00:26:19,120 --> 00:26:22,320
you you take every client window you

604
00:26:21,200 --> 00:26:25,600
create a layer

605
00:26:22,320 --> 00:26:26,960
and then if it works if it's if it's put

606
00:26:25,600 --> 00:26:28,719
into a plane leave lift if we tell you

607
00:26:26,960 --> 00:26:30,799
okay you can put it into plane

608
00:26:28,720 --> 00:26:32,720
and if it doesn't then you need to fall

609
00:26:30,799 --> 00:26:35,120
back to composition as you were doing

610
00:26:32,720 --> 00:26:35,120
before

611
00:26:35,200 --> 00:26:38,240
yeah i was wondering is it typical for

612
00:26:37,360 --> 00:26:40,479
your graphic

613
00:26:38,240 --> 00:26:42,480
cards to have only three layers or

614
00:26:40,480 --> 00:26:43,520
something more or less okay so what's

615
00:26:42,480 --> 00:26:44,960
the base so

616
00:26:43,520 --> 00:26:47,200
the question is basically how many

617
00:26:44,960 --> 00:26:50,320
planes do we have generally so

618
00:26:47,200 --> 00:26:50,720
my uh sunday bridge laptop is pretty old

619
00:26:50,320 --> 00:26:53,520
and

620
00:26:50,720 --> 00:26:55,760
only has three planes so that's not a

621
00:26:53,520 --> 00:26:58,799
lot

622
00:26:55,760 --> 00:27:01,279
i know that newer intel

623
00:26:58,799 --> 00:27:03,440
hardware has a lot more planes i think

624
00:27:01,279 --> 00:27:06,880
like seven planes or something

625
00:27:03,440 --> 00:27:09,600
and some armed gpus basically

626
00:27:06,880 --> 00:27:10,559
don't have a limit don't have a maximum

627
00:27:09,600 --> 00:27:12,480
number of planes

628
00:27:10,559 --> 00:27:14,799
like you can have as many planes as you

629
00:27:12,480 --> 00:27:18,240
want but you have some bandwidth limits

630
00:27:14,799 --> 00:27:19,840
so they expose 10 planes and

631
00:27:18,240 --> 00:27:22,159
you can try to use them but at some

632
00:27:19,840 --> 00:27:25,600
point it won't work anymore

633
00:27:22,159 --> 00:27:27,520
so yeah the trend is basically

634
00:27:25,600 --> 00:27:28,639
we will get more on our planes as we

635
00:27:27,520 --> 00:27:34,158
keep going

636
00:27:28,640 --> 00:27:36,000
so that's pretty good news yep

637
00:27:34,159 --> 00:27:37,520
be in the kernel we're going to talk

638
00:27:36,000 --> 00:27:40,480
about doing the

639
00:27:37,520 --> 00:27:41,440
device plugins in user space but in my

640
00:27:40,480 --> 00:27:43,600
mind it would

641
00:27:41,440 --> 00:27:46,960
rather be in the kernel right yeah so

642
00:27:43,600 --> 00:27:46,959
we've talked also about

643
00:27:47,279 --> 00:27:52,880
lib lift off ioctl

644
00:27:50,880 --> 00:27:54,880
so basically you set up your layers and

645
00:27:52,880 --> 00:27:58,000
send all your layers to the kernel

646
00:27:54,880 --> 00:28:00,480
and then um as the kernel

647
00:27:58,000 --> 00:28:03,360
will this work and do i need to

648
00:28:00,480 --> 00:28:06,880
composite anything or not

649
00:28:03,360 --> 00:28:09,360
yeah there's been some talk about this

650
00:28:06,880 --> 00:28:11,840
i think it's important here just to

651
00:28:09,360 --> 00:28:14,240
start with this

652
00:28:11,840 --> 00:28:15,279
and then if it works then we can discuss

653
00:28:14,240 --> 00:28:17,279
about

654
00:28:15,279 --> 00:28:19,440
maybe putting it into the kernel or

655
00:28:17,279 --> 00:28:20,720
maybe having device specific plugins

656
00:28:19,440 --> 00:28:23,039
we will discuss with the kernel

657
00:28:20,720 --> 00:28:26,559
developers what makes most sense

658
00:28:23,039 --> 00:28:30,158
but for user space they could just keep

659
00:28:26,559 --> 00:28:32,799
using the this api and it won't change

660
00:28:30,159 --> 00:28:32,799
uh like

661
00:28:33,520 --> 00:28:36,559
it's basically an implementation detail

662
00:28:36,159 --> 00:28:38,240
so

663
00:28:36,559 --> 00:28:39,760
we can change how it works behind the

664
00:28:38,240 --> 00:28:43,279
scenes and

665
00:28:39,760 --> 00:28:46,640
it won't matter a lot for user space

666
00:28:43,279 --> 00:28:47,919
yeah the idea here was just to use the

667
00:28:46,640 --> 00:28:51,279
current api

668
00:28:47,919 --> 00:28:52,320
as it was designed and then uh depending

669
00:28:51,279 --> 00:28:54,720
on the result of the

670
00:28:52,320 --> 00:28:56,000
experiment will we continue using this

671
00:28:54,720 --> 00:28:59,840
api or not

672
00:28:56,000 --> 00:28:59,840
we'll see

673
00:29:00,559 --> 00:29:07,678
yep what about traditional xorg does it

674
00:29:03,919 --> 00:29:11,120
use any kind of feature so xorg

675
00:29:07,679 --> 00:29:16,880
yeah i don't think exorcising

676
00:29:11,120 --> 00:29:20,000
is this is using hardware planes um

677
00:29:16,880 --> 00:29:22,720
stuff all the video stuff from

678
00:29:20,000 --> 00:29:23,919
all the like between the 2000s okay so

679
00:29:22,720 --> 00:29:28,080
implemented

680
00:29:23,919 --> 00:29:30,880
and using all so it was able to

681
00:29:28,080 --> 00:29:32,320
yeah but so right now if i have a xor

682
00:29:30,880 --> 00:29:36,240
glum session will you

683
00:29:32,320 --> 00:29:38,559
use plain or not yeah yeah okay so

684
00:29:36,240 --> 00:29:39,520
yeah okay so legacy so that's some

685
00:29:38,559 --> 00:29:41,039
legacy

686
00:29:39,520 --> 00:29:43,279
it was able to use planes at some point

687
00:29:41,039 --> 00:29:43,840
but then the new new stuff is not able

688
00:29:43,279 --> 00:29:46,159
to

689
00:29:43,840 --> 00:29:46,158
hmm

690
00:29:52,799 --> 00:29:56,879
and the number of planes on all winner

691
00:29:55,120 --> 00:29:58,959
is 7p4 for

692
00:29:56,880 --> 00:30:00,640
all winner devices all winner devices

693
00:29:58,960 --> 00:30:04,780
74.

694
00:30:00,640 --> 00:30:06,320
74. are you kidding me

695
00:30:04,780 --> 00:30:09,840
[Laughter]

696
00:30:06,320 --> 00:30:09,840
for each pipeline okay all right

697
00:30:13,600 --> 00:30:18,000
starting from iceland

698
00:30:18,399 --> 00:30:25,840
sorry it's eight planes and then

699
00:30:22,000 --> 00:30:28,480
so i select eight planes

700
00:30:25,840 --> 00:30:31,039
so eight planes per pipe right so per

701
00:30:28,480 --> 00:30:31,039
output okay

702
00:30:33,520 --> 00:30:40,639
so 42 planes total distributed across uh

703
00:30:36,960 --> 00:30:43,840
eight minutes okay okay okay okay

704
00:30:40,640 --> 00:30:46,080
yeah so for like i think for most

705
00:30:43,840 --> 00:30:46,399
desktop applications like eight planes

706
00:30:46,080 --> 00:30:50,799
it's

707
00:30:46,399 --> 00:30:52,639
pretty good already you need a lot more

708
00:30:50,799 --> 00:30:55,120
so we can do like 10 more minutes of

709
00:30:52,640 --> 00:30:57,360
question time because eric is stuck in

710
00:30:55,120 --> 00:30:57,360
the bus

711
00:30:59,519 --> 00:31:06,640
feel free to discuss

712
00:31:04,480 --> 00:31:07,600
are you planning on handling transforms

713
00:31:06,640 --> 00:31:09,679
properly so some

714
00:31:07,600 --> 00:31:11,360
planes sometimes can and can't scale

715
00:31:09,679 --> 00:31:15,279
they can and can't rotate they can only

716
00:31:11,360 --> 00:31:15,279
rotate the specific formats et cetera

717
00:31:16,840 --> 00:31:19,840
so

718
00:31:20,559 --> 00:31:24,158
um so the way you do scaling is

719
00:31:22,880 --> 00:31:27,760
basically setting the

720
00:31:24,159 --> 00:31:30,000
some properties on the on the planes and

721
00:31:27,760 --> 00:31:31,840
layers are you can set any property on

722
00:31:30,000 --> 00:31:32,799
it so basically you can set the scaling

723
00:31:31,840 --> 00:31:35,760
properties and

724
00:31:32,799 --> 00:31:36,320
it will just work it will just try uh

725
00:31:35,760 --> 00:31:39,600
the

726
00:31:36,320 --> 00:31:41,519
so on each plane to to use it and

727
00:31:39,600 --> 00:31:43,120
maybe it works maybe not if it doesn't

728
00:31:41,519 --> 00:31:44,240
work it will ask you to fall back to

729
00:31:43,120 --> 00:31:47,120
composition

730
00:31:44,240 --> 00:31:48,159
so each everything so you can set any

731
00:31:47,120 --> 00:31:50,559
property

732
00:31:48,159 --> 00:31:51,519
so all plain features should just just

733
00:31:50,559 --> 00:31:53,360
work

734
00:31:51,519 --> 00:31:54,880
basically but would you optimistically

735
00:31:53,360 --> 00:31:56,080
set every property and then it could

736
00:31:54,880 --> 00:31:58,080
fail or would you like

737
00:31:56,080 --> 00:31:59,439
roll back so you can set a property that

738
00:31:58,080 --> 00:32:02,240
doesn't exist

739
00:31:59,440 --> 00:32:03,279
and then it will fail always but then

740
00:32:02,240 --> 00:32:06,000
you don't have feedback on which

741
00:32:03,279 --> 00:32:07,919
property to roll back right

742
00:32:06,000 --> 00:32:09,919
and which so like if you have a

743
00:32:07,919 --> 00:32:10,799
conservative set of properties like x

744
00:32:09,919 --> 00:32:13,120
and y position

745
00:32:10,799 --> 00:32:14,639
and z order for example would you expect

746
00:32:13,120 --> 00:32:17,360
to work but then you want to go

747
00:32:14,640 --> 00:32:18,159
more like transform which is less likely

748
00:32:17,360 --> 00:32:19,840
to work

749
00:32:18,159 --> 00:32:21,120
and you have maybe 10 properties of

750
00:32:19,840 --> 00:32:21,840
which four of them you think you're

751
00:32:21,120 --> 00:32:23,678
going to work in

752
00:32:21,840 --> 00:32:25,519
six of them some steps of them might

753
00:32:23,679 --> 00:32:28,640
work is there a way

754
00:32:25,519 --> 00:32:30,240
basically the idea is that when you want

755
00:32:28,640 --> 00:32:32,159
to do a transform

756
00:32:30,240 --> 00:32:33,600
if you can't do the transform in any

757
00:32:32,159 --> 00:32:34,240
case you'll fall back to composition

758
00:32:33,600 --> 00:32:36,879
right

759
00:32:34,240 --> 00:32:38,240
right so what i'm saying is that

760
00:32:36,880 --> 00:32:38,720
following that decomposition that would

761
00:32:38,240 --> 00:32:41,200
be

762
00:32:38,720 --> 00:32:42,000
optimal there's a more optimal solution

763
00:32:41,200 --> 00:32:44,559
that doesn't include

764
00:32:42,000 --> 00:32:46,960
transformers like maybe only one of your

765
00:32:44,559 --> 00:32:49,600
windows is rotated

766
00:32:46,960 --> 00:32:50,480
so what's the situation like can you

767
00:32:49,600 --> 00:32:53,840
describe a like

768
00:32:50,480 --> 00:32:55,760
desktop which you have terminal here

769
00:32:53,840 --> 00:32:57,199
yeah the calculator here the calculator

770
00:32:55,760 --> 00:32:58,559
is 90 degrees

771
00:32:57,200 --> 00:33:00,640
or it's like a picture or something

772
00:32:58,559 --> 00:33:02,480
something it makes sense to rotate

773
00:33:00,640 --> 00:33:03,679
so it's rotated you have one rotated

774
00:33:02,480 --> 00:33:06,240
client you're lucky

775
00:33:03,679 --> 00:33:07,120
okay okay and ideally you can put them

776
00:33:06,240 --> 00:33:09,200
all in planes

777
00:33:07,120 --> 00:33:10,158
and then let the gpu rotate that one

778
00:33:09,200 --> 00:33:12,399
client for you

779
00:33:10,159 --> 00:33:13,679
yeah yeah so you might specify it with

780
00:33:12,399 --> 00:33:14,959
the lib lift dock layer

781
00:33:13,679 --> 00:33:16,159
i have this one that i want to rotate

782
00:33:14,960 --> 00:33:17,279
that's what you don't want yeah yeah

783
00:33:16,159 --> 00:33:18,880
sure maybe we

784
00:33:17,279 --> 00:33:20,320
extrapolate this for another five

785
00:33:18,880 --> 00:33:23,840
properties that are maybe some kind of

786
00:33:20,320 --> 00:33:25,519
exotic like this one is something

787
00:33:23,840 --> 00:33:26,879
and it fails because the gpu doesn't

788
00:33:25,519 --> 00:33:28,640
support rotation

789
00:33:26,880 --> 00:33:30,720
okay does the closer you're expected to

790
00:33:28,640 --> 00:33:32,320
just peel off properties one at a time

791
00:33:30,720 --> 00:33:33,279
and keep trying so it takes off the

792
00:33:32,320 --> 00:33:35,279
rotation and tries

793
00:33:33,279 --> 00:33:36,399
so if you want to if you take out the

794
00:33:35,279 --> 00:33:39,360
rotation then

795
00:33:36,399 --> 00:33:39,918
your final uh image won't be the same

796
00:33:39,360 --> 00:33:41,360
right

797
00:33:39,919 --> 00:33:43,279
right but then the compositor could just

798
00:33:41,360 --> 00:33:44,559
rotate it in software and still use the

799
00:33:43,279 --> 00:33:46,000
plane for the other client that doesn't

800
00:33:44,559 --> 00:33:48,559
need to be rotated

801
00:33:46,000 --> 00:33:49,600
so uh so yeah yeah so basically that's

802
00:33:48,559 --> 00:33:51,760
what happens so

803
00:33:49,600 --> 00:33:54,240
uh if the what i think client can't be

804
00:33:51,760 --> 00:33:56,879
put into a plane so

805
00:33:54,240 --> 00:33:58,640
because so it will ask you to composite

806
00:33:56,880 --> 00:34:01,120
it but the the other client

807
00:33:58,640 --> 00:34:02,799
can be put into a plane and that's fine

808
00:34:01,120 --> 00:34:04,399
for multiple composition layers so like

809
00:34:02,799 --> 00:34:06,879
you could compose it onto a plane

810
00:34:04,399 --> 00:34:07,918
and they could pause it yeah uh so

811
00:34:06,880 --> 00:34:10,240
that's

812
00:34:07,919 --> 00:34:12,159
more complicated uh it's planned but

813
00:34:10,239 --> 00:34:15,520
it's

814
00:34:12,159 --> 00:34:18,639
we'll see for the future just doing this

815
00:34:15,520 --> 00:34:20,480
will already be big win so we'll see

816
00:34:18,639 --> 00:34:23,359
yeah having multiple composition layers

817
00:34:20,480 --> 00:34:23,359
is like yeah

818
00:34:23,440 --> 00:34:28,079
hurry more questions

819
00:34:32,000 --> 00:34:35,839
so since since this is said the the the

820
00:34:34,800 --> 00:34:38,480
criteria for

821
00:34:35,839 --> 00:34:39,040
uh allocating the layers to planes are

822
00:34:38,480 --> 00:34:40,800
very

823
00:34:39,040 --> 00:34:42,639
uh depend on a lot of things as i

824
00:34:40,800 --> 00:34:44,720
understand yep uh

825
00:34:42,639 --> 00:34:46,720
i i expected it might very well be that

826
00:34:44,719 --> 00:34:47,598
uh you have to frequently reschedule

827
00:34:46,719 --> 00:34:50,480
things because

828
00:34:47,599 --> 00:34:51,599
if you move if you move windows and for

829
00:34:50,480 --> 00:34:54,000
example when

830
00:34:51,599 --> 00:34:54,720
coordinated was even becomes odd yeah

831
00:34:54,000 --> 00:34:56,800
and

832
00:34:54,719 --> 00:34:58,319
you know what happens so you probably

833
00:34:56,800 --> 00:35:01,760
have to change

834
00:34:58,320 --> 00:35:03,440
your your location and maybe at some

835
00:35:01,760 --> 00:35:04,000
points you didn't expect you know at

836
00:35:03,440 --> 00:35:06,400
some point

837
00:35:04,000 --> 00:35:07,520
you could avoid composition and

838
00:35:06,400 --> 00:35:11,040
immediately you have to

839
00:35:07,520 --> 00:35:12,880
start using composition yeah i expect

840
00:35:11,040 --> 00:35:16,320
that this could

841
00:35:12,880 --> 00:35:19,359
be a problem if your composition

842
00:35:16,320 --> 00:35:21,920
flow is called caches and it's not being

843
00:35:19,359 --> 00:35:22,960
recently used it could be quite slower

844
00:35:21,920 --> 00:35:25,359
the first time you use it

845
00:35:22,960 --> 00:35:26,800
because you need to like boot up the

846
00:35:25,359 --> 00:35:27,680
engine yeah i don't know if it takes

847
00:35:26,800 --> 00:35:30,960
time to

848
00:35:27,680 --> 00:35:31,598
i need to do my experiments uh yeah i'm

849
00:35:30,960 --> 00:35:34,000
not sure

850
00:35:31,599 --> 00:35:34,720
need to add the to us the drive device

851
00:35:34,000 --> 00:35:37,520
like the

852
00:35:34,720 --> 00:35:45,839
canon drivers guys to see if that would

853
00:35:37,520 --> 00:35:45,839
be an issue

854
00:35:46,640 --> 00:35:50,960
yeah you basically don't want to use

855
00:35:48,079 --> 00:35:52,560
discrete gpus for composition anyway

856
00:35:50,960 --> 00:35:59,839
because if you unplug it then you don't

857
00:35:52,560 --> 00:35:59,839
have any

858
00:36:00,240 --> 00:36:07,200
yeah there's a lot of complicated issues

859
00:36:03,760 --> 00:36:10,880
with the plain layer to play in a

860
00:36:07,200 --> 00:36:11,439
mapping algorithm it's pretty annoying

861
00:36:10,880 --> 00:36:16,000
to

862
00:36:11,440 --> 00:36:16,640
yeah guessing in advance like if the if

863
00:36:16,000 --> 00:36:18,560
the client

864
00:36:16,640 --> 00:36:20,000
or the user moves their mouse cursor

865
00:36:18,560 --> 00:36:21,279
over the paddle bar and it looks like

866
00:36:20,000 --> 00:36:24,000
they're getting ready to drag you might

867
00:36:21,280 --> 00:36:27,599
want to boot up that rendering

868
00:36:24,000 --> 00:36:30,800
yeah yeah maybe the compositor could

869
00:36:27,599 --> 00:36:31,680
just fall back to the full position

870
00:36:30,800 --> 00:36:34,240
whenever

871
00:36:31,680 --> 00:36:34,879
something is moving yeah so in any case

872
00:36:34,240 --> 00:36:37,759
if

873
00:36:34,880 --> 00:36:39,359
if something took harry is going on then

874
00:36:37,760 --> 00:36:40,640
it will fall back to composition anyway

875
00:36:39,359 --> 00:36:44,160
so

876
00:36:40,640 --> 00:36:46,560
yeah yeah i'm not a fan of

877
00:36:44,160 --> 00:36:48,240
like letting the compositor say okay the

878
00:36:46,560 --> 00:36:48,880
the guy is moving the mouse and the

879
00:36:48,240 --> 00:36:52,720
other thing

880
00:36:48,880 --> 00:36:54,560
so i'm gonna do some holistics too

881
00:36:52,720 --> 00:36:56,160
yeah we need to do some experiments to

882
00:36:54,560 --> 00:37:01,839
see if it's worth it or not yeah

883
00:36:56,160 --> 00:37:01,839
sure is there any kind of mechanism

884
00:37:02,880 --> 00:37:06,560
regarding either partial updates like

885
00:37:05,760 --> 00:37:08,960
when the window

886
00:37:06,560 --> 00:37:08,960
doesn't need

887
00:37:11,359 --> 00:37:16,960
so so partial updates and the

888
00:37:14,960 --> 00:37:18,000
windows been uploaded behind other

889
00:37:16,960 --> 00:37:21,680
windows so

890
00:37:18,000 --> 00:37:24,000
partial updates should so

891
00:37:21,680 --> 00:37:24,879
for planes you don't really need to to

892
00:37:24,000 --> 00:37:28,240
say the

893
00:37:24,880 --> 00:37:30,960
to the gpu uh whether uh

894
00:37:28,240 --> 00:37:33,839
only a region oh actually there is a

895
00:37:30,960 --> 00:37:33,839
property for this

896
00:37:34,839 --> 00:37:37,839
yes

897
00:37:40,079 --> 00:37:43,520
actually you you can you can set up a

898
00:37:43,040 --> 00:37:45,599
layer

899
00:37:43,520 --> 00:37:47,119
and say i only updated this region of

900
00:37:45,599 --> 00:37:48,880
the of the layer

901
00:37:47,119 --> 00:37:50,160
and then the hardware will be some

902
00:37:48,880 --> 00:37:53,359
hardware will be able to

903
00:37:50,160 --> 00:37:56,240
make use of this um so

904
00:37:53,359 --> 00:37:57,040
so the compositor without leave lift off

905
00:37:56,240 --> 00:37:59,839
already does

906
00:37:57,040 --> 00:38:01,440
damage tracking so it keeps track of

907
00:37:59,839 --> 00:38:04,960
which parts of the screen that have been

908
00:38:01,440 --> 00:38:06,800
updated since let's let's frame um

909
00:38:04,960 --> 00:38:08,079
and then only we paint the parts that

910
00:38:06,800 --> 00:38:10,640
need to be repainted

911
00:38:08,079 --> 00:38:11,920
so it could just uh like set the

912
00:38:10,640 --> 00:38:15,200
property on the layer

913
00:38:11,920 --> 00:38:17,760
and it will be fine um

914
00:38:15,200 --> 00:38:19,279
and about so right now i don't have any

915
00:38:17,760 --> 00:38:21,200
logic to

916
00:38:19,280 --> 00:38:23,359
not show layers that are completely

917
00:38:21,200 --> 00:38:26,078
occluded behind other layers

918
00:38:23,359 --> 00:38:27,200
but it's a little difficult sometimes

919
00:38:26,079 --> 00:38:29,359
because you

920
00:38:27,200 --> 00:38:30,399
if you have transparency for instance

921
00:38:29,359 --> 00:38:32,960
you still want to

922
00:38:30,400 --> 00:38:34,160
like draw the layer uh even if it's

923
00:38:32,960 --> 00:38:37,520
completely occluded

924
00:38:34,160 --> 00:38:39,598
behind um so the composite

925
00:38:37,520 --> 00:38:40,560
so the compositor will have more hints

926
00:38:39,599 --> 00:38:43,119
some clients

927
00:38:40,560 --> 00:38:44,320
can say my window is completely opaque

928
00:38:43,119 --> 00:38:46,240
so

929
00:38:44,320 --> 00:38:47,920
it's fine if you don't do anything under

930
00:38:46,240 --> 00:38:50,000
it uh so

931
00:38:47,920 --> 00:38:50,960
compositors are more knowledge to do

932
00:38:50,000 --> 00:38:53,440
this and

933
00:38:50,960 --> 00:38:54,079
should already do this for opengl i'll

934
00:38:53,440 --> 00:38:56,960
see if

935
00:38:54,079 --> 00:38:58,400
yeah i don't know if it's worth it to to

936
00:38:56,960 --> 00:39:01,520
add this to the blue stuff

937
00:38:58,400 --> 00:39:02,960
maybe in the future we'll see depending

938
00:39:01,520 --> 00:39:05,440
on the buffer format if it's

939
00:39:02,960 --> 00:39:06,560
xrgb for instance we know it won't have

940
00:39:05,440 --> 00:39:10,000
an alpha channel

941
00:39:06,560 --> 00:39:13,040
so we can uh say it's a pack

942
00:39:10,000 --> 00:39:15,839
and don't do anything under it

943
00:39:13,040 --> 00:39:15,839
yeah maybe we'll see

944
00:39:26,960 --> 00:39:42,560
okay yeah sure

