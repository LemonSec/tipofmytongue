1
00:00:08,240 --> 00:00:13,679
okay

2
00:00:08,800 --> 00:00:15,519
our next talk will be by grinnell govick

3
00:00:13,679 --> 00:00:19,039
and he's talking to us about platform

4
00:00:15,519 --> 00:00:23,198
independence cpu fpga co-design

5
00:00:19,039 --> 00:00:26,640
thank you this talk with

6
00:00:23,199 --> 00:00:27,439
is about this this work this ecosystem

7
00:00:26,640 --> 00:00:30,960
we have developed

8
00:00:27,439 --> 00:00:34,239
an ecosystem to be able to

9
00:00:30,960 --> 00:00:38,719
to to assemble and generate uh

10
00:00:34,239 --> 00:00:41,760
design in the fpga and using the cpu for

11
00:00:38,719 --> 00:00:45,039
for example on the zinc board the cpu to

12
00:00:41,760 --> 00:00:47,760
configure the design and to configure

13
00:00:45,039 --> 00:00:50,480
each block at the runtime it's possible

14
00:00:47,760 --> 00:00:53,920
to modify some parameters in live

15
00:00:50,480 --> 00:00:54,800
it's fully pipelined it's not no no fifo

16
00:00:53,920 --> 00:00:58,559
nothing

17
00:00:54,800 --> 00:01:02,000
it's just a sample arrive is used so

18
00:00:58,559 --> 00:01:07,039
we try as possible to avoid

19
00:01:02,000 --> 00:01:10,000
using ram to simplify design

20
00:01:07,040 --> 00:01:12,240
since we use a cpu with linux this

21
00:01:10,000 --> 00:01:15,040
ecosystem comply with the structure

22
00:01:12,240 --> 00:01:15,679
of an architecture of operating system

23
00:01:15,040 --> 00:01:19,280
we have

24
00:01:15,680 --> 00:01:22,080
a drive ip ipr connected to the cpu

25
00:01:19,280 --> 00:01:22,479
to communicate with respect of system

26
00:01:22,080 --> 00:01:24,798
and

27
00:01:22,479 --> 00:01:26,560
in the better way we have we provide

28
00:01:24,799 --> 00:01:29,280
driver for this ips

29
00:01:26,560 --> 00:01:30,479
and finally some some ips are some

30
00:01:29,280 --> 00:01:34,000
complex

31
00:01:30,479 --> 00:01:36,720
configurations so we provide again a

32
00:01:34,000 --> 00:01:37,759
library to avoid to duplicate piece of

33
00:01:36,720 --> 00:01:40,960
code it's more

34
00:01:37,759 --> 00:01:44,399
the user has to focus on the design

35
00:01:40,960 --> 00:01:48,079
on the application and nothing else

36
00:01:44,399 --> 00:01:51,280
the last wish about this

37
00:01:48,079 --> 00:01:54,079
framework is to be

38
00:01:51,280 --> 00:01:55,280
as possible independent of the uh

39
00:01:54,079 --> 00:01:58,639
hardware

40
00:01:55,280 --> 00:02:01,840
the same design must be

41
00:01:58,640 --> 00:02:04,799
generated for a zinc platform from for

42
00:02:01,840 --> 00:02:05,759
a cyclone five platform and maybe other

43
00:02:04,799 --> 00:02:07,840
new one

44
00:02:05,759 --> 00:02:09,440
existing we are validated it's not

45
00:02:07,840 --> 00:02:12,879
exhaustive on zinc

46
00:02:09,440 --> 00:02:15,680
on a cyclone 5 with some

47
00:02:12,879 --> 00:02:16,640
different board it's overboard with

48
00:02:15,680 --> 00:02:20,720
other

49
00:02:16,640 --> 00:02:24,399
hardware but it's um

50
00:02:20,720 --> 00:02:27,120
some id it's not

51
00:02:24,400 --> 00:02:29,040
the it's not alone there are other

52
00:02:27,120 --> 00:02:32,080
ecosystems the first one

53
00:02:29,040 --> 00:02:35,679
uh of course is the aethus rf nucleus

54
00:02:32,080 --> 00:02:39,360
in the usrp it's a great thing because

55
00:02:35,680 --> 00:02:42,959
we your recipe

56
00:02:39,360 --> 00:02:46,400
has a firmware like a toolbox with some

57
00:02:42,959 --> 00:02:47,440
ips available to be used it's possible

58
00:02:46,400 --> 00:02:50,400
to configure

59
00:02:47,440 --> 00:02:51,280
which processing is done in the fpga

60
00:02:50,400 --> 00:02:54,640
which processing

61
00:02:51,280 --> 00:02:58,400
is done in the cpu by you just adding

62
00:02:54,640 --> 00:03:02,319
refnec block or new radio block

63
00:02:58,400 --> 00:03:06,159
but if your design

64
00:03:02,319 --> 00:03:09,518
has no an ip you need for your specific

65
00:03:06,159 --> 00:03:14,720
application you need to generate a new

66
00:03:09,519 --> 00:03:14,720
firmware with this ip and the

67
00:03:14,800 --> 00:03:22,000
the the refnock structure as a limited

68
00:03:18,800 --> 00:03:25,840
um slot available to add your

69
00:03:22,000 --> 00:03:27,680
your or ips five or seven i don't

70
00:03:25,840 --> 00:03:30,720
remember exactly

71
00:03:27,680 --> 00:03:33,840
and i have tried to use

72
00:03:30,720 --> 00:03:35,200
a refnock on a zed board with an a2d

73
00:03:33,840 --> 00:03:37,760
converter

74
00:03:35,200 --> 00:03:38,640
finally the fpga part it's okay it's not

75
00:03:37,760 --> 00:03:42,480
really hard

76
00:03:38,640 --> 00:03:45,518
but uhd i never it's a fail

77
00:03:42,480 --> 00:03:46,238
um you actually do some assumption about

78
00:03:45,519 --> 00:03:49,680
the hardware

79
00:03:46,239 --> 00:03:51,680
you have an audio prompt to

80
00:03:49,680 --> 00:03:54,319
detect the motherboard the daughter

81
00:03:51,680 --> 00:03:57,439
board you need to have a take chain

82
00:03:54,319 --> 00:03:58,480
erection and finally it's just too

83
00:03:57,439 --> 00:04:01,920
complex

84
00:03:58,480 --> 00:04:03,040
for some small design so it's really

85
00:04:01,920 --> 00:04:07,518
good

86
00:04:03,040 --> 00:04:10,000
but with usrp and another

87
00:04:07,519 --> 00:04:11,439
ecosystem framework is pavel domine

88
00:04:10,000 --> 00:04:14,560
repeated not

89
00:04:11,439 --> 00:04:15,760
it's this ecosystem has been present

90
00:04:14,560 --> 00:04:18,880
here

91
00:04:15,760 --> 00:04:21,918
the good thing about this ecosystem

92
00:04:18,880 --> 00:04:23,680
is the repository provides some already

93
00:04:21,918 --> 00:04:24,479
available design you have just to do

94
00:04:23,680 --> 00:04:29,440
some make

95
00:04:24,479 --> 00:04:32,800
and you have a sd card ready to be used

96
00:04:29,440 --> 00:04:35,759
each project has a documentation with

97
00:04:32,800 --> 00:04:36,240
everything and it's directly compatible

98
00:04:35,759 --> 00:04:40,639
with

99
00:04:36,240 --> 00:04:44,240
the new radio finally osmo is there as a

100
00:04:40,639 --> 00:04:47,759
client for a repeat ir

101
00:04:44,240 --> 00:04:48,560
cpu server part and you have a repeat

102
00:04:47,759 --> 00:04:52,639
area

103
00:04:48,560 --> 00:04:53,840
exactly as a dvb-t key usrp or another

104
00:04:52,639 --> 00:04:55,919
but

105
00:04:53,840 --> 00:04:58,239
it's dedicated to the red pitara

106
00:04:55,919 --> 00:04:59,280
platform and it's more or less limited

107
00:04:58,240 --> 00:05:02,720
to the

108
00:04:59,280 --> 00:05:06,880
already available project it's

109
00:05:02,720 --> 00:05:10,160
to move from another board on um or to

110
00:05:06,880 --> 00:05:14,159
create your your safe project it's

111
00:05:10,160 --> 00:05:17,759
less documented okay now

112
00:05:14,160 --> 00:05:22,080
the ecosystem look like this we have

113
00:05:17,759 --> 00:05:26,080
the ips the ips as a specific repository

114
00:05:22,080 --> 00:05:29,359
the eyepiece is connected to the cpu

115
00:05:26,080 --> 00:05:29,919
using driver to communicate uh library

116
00:05:29,360 --> 00:05:32,000
or not

117
00:05:29,919 --> 00:05:33,120
and device three because uh with the

118
00:05:32,000 --> 00:05:35,600
stock system

119
00:05:33,120 --> 00:05:36,560
the way to describe the platform is a

120
00:05:35,600 --> 00:05:39,440
device tree

121
00:05:36,560 --> 00:05:40,160
and this overlay is used to happen the

122
00:05:39,440 --> 00:05:44,080
default

123
00:05:40,160 --> 00:05:47,199
runtime device tree

124
00:05:44,080 --> 00:05:49,280
and finally you provide some tools to uh

125
00:05:47,199 --> 00:05:50,400
to to build the application to provide

126
00:05:49,280 --> 00:05:52,880
some

127
00:05:50,400 --> 00:05:54,320
wrapper to to generate some part of

128
00:05:52,880 --> 00:05:56,639
design

129
00:05:54,320 --> 00:05:58,960
first thing mostly maybe the most

130
00:05:56,639 --> 00:06:02,400
important part is the fpga

131
00:05:58,960 --> 00:06:04,159
and the ip uh it's for a simple

132
00:06:02,400 --> 00:06:05,440
simplified simulation we are split

133
00:06:04,160 --> 00:06:08,000
between the um

134
00:06:05,440 --> 00:06:08,960
implant implementation part the

135
00:06:08,000 --> 00:06:10,479
algorithm

136
00:06:08,960 --> 00:06:12,159
implementation and the rise of

137
00:06:10,479 --> 00:06:14,240
communication for the configuration of

138
00:06:12,160 --> 00:06:17,759
the design

139
00:06:14,240 --> 00:06:21,280
exactly as new radio

140
00:06:17,759 --> 00:06:24,319
we use a custom interface this allows

141
00:06:21,280 --> 00:06:27,198
the user to plug one block to connect

142
00:06:24,319 --> 00:06:30,800
one block to one other

143
00:06:27,199 --> 00:06:34,319
and it thanks to this interface

144
00:06:30,800 --> 00:06:37,520
it's okay it's the current

145
00:06:34,319 --> 00:06:41,520
data stream for the user it's just

146
00:06:37,520 --> 00:06:44,479
a wire like this one but

147
00:06:41,520 --> 00:06:45,120
to provide more information we have in

148
00:06:44,479 --> 00:06:48,960
this

149
00:06:45,120 --> 00:06:53,039
interface this theory of signal

150
00:06:48,960 --> 00:06:56,239
data control and clock and reset

151
00:06:53,039 --> 00:06:59,360
to be to be sure to have a correct

152
00:06:56,240 --> 00:07:02,880
clearance with the cross clock domain

153
00:06:59,360 --> 00:07:06,000
more precisely about content you have

154
00:07:02,880 --> 00:07:09,520
on the complex you have inq

155
00:07:06,000 --> 00:07:12,720
databus on real just one data

156
00:07:09,520 --> 00:07:15,520
and enable to to specify

157
00:07:12,720 --> 00:07:16,639
when a new data is available to be

158
00:07:15,520 --> 00:07:19,198
processed

159
00:07:16,639 --> 00:07:21,360
and you have some control signals

160
00:07:19,199 --> 00:07:24,479
starter frames top of frame

161
00:07:21,360 --> 00:07:27,520
finally an a 2d

162
00:07:24,479 --> 00:07:29,120
converter or a d2a converter as just an

163
00:07:27,520 --> 00:07:33,039
infinite data stream

164
00:07:29,120 --> 00:07:36,400
no start no stop nothing but when you

165
00:07:33,039 --> 00:07:39,680
have some design with

166
00:07:36,400 --> 00:07:42,080
uh when we we want to propagate data

167
00:07:39,680 --> 00:07:43,520
only on the event it's monitoring to

168
00:07:42,080 --> 00:07:46,159
know

169
00:07:43,520 --> 00:07:46,960
the start sample the end sample of the

170
00:07:46,160 --> 00:07:48,879
data set

171
00:07:46,960 --> 00:07:51,198
it's exactly the same for for example

172
00:07:48,879 --> 00:07:52,240
the fft the fft as the start frequency

173
00:07:51,199 --> 00:07:55,759
stop frequency

174
00:07:52,240 --> 00:07:58,800
and this two signal allows to simplify

175
00:07:55,759 --> 00:08:03,199
the logic per ip

176
00:07:58,800 --> 00:08:06,720
to handle this data set

177
00:08:03,199 --> 00:08:09,360
okay we have vipin now you we must

178
00:08:06,720 --> 00:08:10,240
connect ip generate the design it's

179
00:08:09,360 --> 00:08:12,400
possible

180
00:08:10,240 --> 00:08:13,680
of course to use a graphical approach

181
00:08:12,400 --> 00:08:17,120
with vivado

182
00:08:13,680 --> 00:08:20,319
or with quartus and qsys but

183
00:08:17,120 --> 00:08:23,759
all vendor tools

184
00:08:20,319 --> 00:08:27,759
provide some procedure to

185
00:08:23,759 --> 00:08:31,360
build a design using tcl

186
00:08:27,759 --> 00:08:34,399
the the interest of this is small

187
00:08:31,360 --> 00:08:37,599
able to to version and it's great thing

188
00:08:34,399 --> 00:08:40,640
but vivado provides some function

189
00:08:37,599 --> 00:08:41,760
create debate crit bd cell etc it's a

190
00:08:40,640 --> 00:08:45,040
specific pro

191
00:08:41,760 --> 00:08:48,800
procedure for vivado it's the same thing

192
00:08:45,040 --> 00:08:51,839
for quartus and finally vivado provides

193
00:08:48,800 --> 00:08:53,680
need one tcl file to generate everything

194
00:08:51,839 --> 00:08:56,480
quartus need two files to generate

195
00:08:53,680 --> 00:08:59,519
everything so we have added

196
00:08:56,480 --> 00:09:02,959
our procedure and some

197
00:08:59,519 --> 00:09:06,080
make file to generate this for example

198
00:09:02,959 --> 00:09:08,800
this procedure is implemented in the

199
00:09:06,080 --> 00:09:10,560
vivado context in the quartus context if

200
00:09:08,800 --> 00:09:13,199
you want to add a new vendor tool

201
00:09:10,560 --> 00:09:14,560
you need just to fill this procedure to

202
00:09:13,200 --> 00:09:18,080
be able to build

203
00:09:14,560 --> 00:09:19,279
um the the design for a new platform

204
00:09:18,080 --> 00:09:22,320
with a new tool

205
00:09:19,279 --> 00:09:25,519
um do some tests

206
00:09:22,320 --> 00:09:28,640
with two different fpga and two

207
00:09:25,519 --> 00:09:31,839
different um vendor tools

208
00:09:28,640 --> 00:09:35,279
the same design the same application is

209
00:09:31,839 --> 00:09:38,480
able to work in all cases some stuff

210
00:09:35,279 --> 00:09:41,360
are just generally originally generated

211
00:09:38,480 --> 00:09:43,120
for each platform but it's not a problem

212
00:09:41,360 --> 00:09:47,200
it just generates

213
00:09:43,120 --> 00:09:47,200
the rest is perfectly compatible

214
00:09:48,320 --> 00:09:54,800
this the design is just a

215
00:09:52,160 --> 00:09:55,839
subpart of a project a project look like

216
00:09:54,800 --> 00:09:59,040
this you have

217
00:09:55,839 --> 00:10:01,360
the project directory subdirectory

218
00:09:59,040 --> 00:10:03,120
where we store everything about the

219
00:10:01,360 --> 00:10:07,440
design

220
00:10:03,120 --> 00:10:10,800
uh ons design built it's possible to use

221
00:10:07,440 --> 00:10:14,640
a tcl script to analyze xperia

222
00:10:10,800 --> 00:10:17,760
or um by a quartus equivalent

223
00:10:14,640 --> 00:10:20,880
to extract which

224
00:10:17,760 --> 00:10:23,040
ips are connected to the cpu

225
00:10:20,880 --> 00:10:23,920
the base address for each of them to

226
00:10:23,040 --> 00:10:26,800
generate

227
00:10:23,920 --> 00:10:27,279
an xml file this xml file is used by a

228
00:10:26,800 --> 00:10:29,680
tool

229
00:10:27,279 --> 00:10:31,120
to generate a template of application

230
00:10:29,680 --> 00:10:34,719
and the last thing

231
00:10:31,120 --> 00:10:37,680
for the user is just to create a c

232
00:10:34,720 --> 00:10:40,880
c plus plus or python file to drive to

233
00:10:37,680 --> 00:10:44,640
configure everything in the fpga

234
00:10:40,880 --> 00:10:46,079
this this set is generated by module

235
00:10:44,640 --> 00:10:48,959
generator you have an

236
00:10:46,079 --> 00:10:49,839
xml file you have a project name you

237
00:10:48,959 --> 00:10:52,640
have an ip

238
00:10:49,839 --> 00:10:53,920
a signal ip ip is the name of the ip in

239
00:10:52,640 --> 00:10:56,240
the repository

240
00:10:53,920 --> 00:10:58,079
and for each of them you have instance

241
00:10:56,240 --> 00:11:01,440
ip with a specific name

242
00:10:58,079 --> 00:11:03,920
with a specific address based on this

243
00:11:01,440 --> 00:11:04,480
it's possible to generate the script

244
00:11:03,920 --> 00:11:08,079
script

245
00:11:04,480 --> 00:11:11,279
is to simplify the

246
00:11:08,079 --> 00:11:13,439
um the tool to simplify

247
00:11:11,279 --> 00:11:14,560
the run of the application you have you

248
00:11:13,440 --> 00:11:17,680
copy the bit stream

249
00:11:14,560 --> 00:11:19,599
you flash the fpga you flash you update

250
00:11:17,680 --> 00:11:20,239
the device tree you append your device

251
00:11:19,600 --> 00:11:23,519
tree with

252
00:11:20,240 --> 00:11:25,920
your specific case and you load

253
00:11:23,519 --> 00:11:26,880
driver mandatory for this specific

254
00:11:25,920 --> 00:11:29,439
project

255
00:11:26,880 --> 00:11:30,240
first one second device three you need

256
00:11:29,440 --> 00:11:33,839
to happen

257
00:11:30,240 --> 00:11:37,680
and you find exactly you open the um

258
00:11:33,839 --> 00:11:41,040
fpga full it's a node dedicated

259
00:11:37,680 --> 00:11:44,560
to under left is the fpga you have the

260
00:11:41,040 --> 00:11:48,240
firmware name you have um one

261
00:11:44,560 --> 00:11:50,719
driver with this same

262
00:11:48,240 --> 00:11:52,000
base address is exactly the same and

263
00:11:50,720 --> 00:11:54,240
finally a mac file

264
00:11:52,000 --> 00:11:56,000
make file is just used to cross compile

265
00:11:54,240 --> 00:11:58,720
the application to compile

266
00:11:56,000 --> 00:12:00,480
everything and to install in the board

267
00:11:58,720 --> 00:12:04,160
everything

268
00:12:00,480 --> 00:12:07,760
it's finally all about

269
00:12:04,160 --> 00:12:11,040
the ecosystem just

270
00:12:07,760 --> 00:12:11,839
we provide this block it's not all block

271
00:12:11,040 --> 00:12:15,199
available but

272
00:12:11,839 --> 00:12:17,279
it's a subset you have a local

273
00:12:15,200 --> 00:12:20,959
oscillator frequency transposition

274
00:12:17,279 --> 00:12:23,760
you have an ip used to handle a 2d

275
00:12:20,959 --> 00:12:28,000
converter a d2a converter for the red

276
00:12:23,760 --> 00:12:31,519
you have a sound card you have

277
00:12:28,000 --> 00:12:33,279
some block used to start the propagation

278
00:12:31,519 --> 00:12:37,279
when a specific event

279
00:12:33,279 --> 00:12:41,600
appear on the block on the

280
00:12:37,279 --> 00:12:44,079
pin of the fpga for a trigger event

281
00:12:41,600 --> 00:12:45,760
you have a radio frequency signal c code

282
00:12:44,079 --> 00:12:49,199
used for

283
00:12:45,760 --> 00:12:51,200
gnss gps fear filter

284
00:12:49,200 --> 00:12:53,040
you have your filter real for

285
00:12:51,200 --> 00:12:54,399
interfacial complex for interface

286
00:12:53,040 --> 00:12:57,760
complex etc

287
00:12:54,399 --> 00:13:01,040
some prn generator a cross correlator

288
00:12:57,760 --> 00:13:03,920
again used to for example with gps

289
00:13:01,040 --> 00:13:06,319
and some utilities to add a specific

290
00:13:03,920 --> 00:13:08,959
constant to all sample received

291
00:13:06,320 --> 00:13:10,560
it's exactly an offset you have other

292
00:13:08,959 --> 00:13:13,920
subtractor you add one

293
00:13:10,560 --> 00:13:16,160
input to the other input mean on a

294
00:13:13,920 --> 00:13:18,639
simple accumulator

295
00:13:16,160 --> 00:13:19,519
and some utilities convert from one

296
00:13:18,639 --> 00:13:22,639
interface to

297
00:13:19,519 --> 00:13:26,320
an other interface in custom interface

298
00:13:22,639 --> 00:13:28,880
do because uh interface as is one to one

299
00:13:26,320 --> 00:13:29,519
and sometimes we want to have one too

300
00:13:28,880 --> 00:13:32,839
many

301
00:13:29,519 --> 00:13:34,480
so we have this to allows these

302
00:13:32,839 --> 00:13:37,600
possibilities

303
00:13:34,480 --> 00:13:41,120
expander shifter is for

304
00:13:37,600 --> 00:13:42,399
bit bit manipulating for bit shifting or

305
00:13:41,120 --> 00:13:45,839
expanding

306
00:13:42,399 --> 00:13:47,519
switch is just a select you have two

307
00:13:45,839 --> 00:13:52,000
inputs you have

308
00:13:47,519 --> 00:13:54,560
mix finally and some interface between

309
00:13:52,000 --> 00:13:56,399
our custom interface and axe interface

310
00:13:54,560 --> 00:14:00,839
used for example when you need to use

311
00:13:56,399 --> 00:14:05,680
a file for provided by by guiding

312
00:14:00,839 --> 00:14:09,360
to to do a cross-clock domain

313
00:14:05,680 --> 00:14:12,880
now we have seen

314
00:14:09,360 --> 00:14:16,800
the ecosystem but why doing

315
00:14:12,880 --> 00:14:19,839
with first one is the gps decoding

316
00:14:16,800 --> 00:14:20,800
the idea is we have an uh pluto zero the

317
00:14:19,839 --> 00:14:23,760
pluto

318
00:14:20,800 --> 00:14:24,959
is able to directly sample the signal we

319
00:14:23,760 --> 00:14:28,000
have

320
00:14:24,959 --> 00:14:29,439
a satellite constellation with the same

321
00:14:28,000 --> 00:14:32,320
carrier frequency but

322
00:14:29,440 --> 00:14:33,040
with a doppler shift and with each

323
00:14:32,320 --> 00:14:37,040
satellite

324
00:14:33,040 --> 00:14:41,439
has a unique p-rn code

325
00:14:37,040 --> 00:14:44,880
but when you use the pluto sdr

326
00:14:41,440 --> 00:14:47,440
like this one with the stock firmware

327
00:14:44,880 --> 00:14:48,160
the finally the pluto hdr do quite

328
00:14:47,440 --> 00:14:51,120
nothing

329
00:14:48,160 --> 00:14:52,160
receive data transmit data and it's all

330
00:14:51,120 --> 00:14:54,880
to

331
00:14:52,160 --> 00:14:55,519
to detect which satellite light has

332
00:14:54,880 --> 00:14:56,959
present

333
00:14:55,519 --> 00:14:59,040
you need to loop on the frequency you

334
00:14:56,959 --> 00:15:01,518
need to loop on the p rn

335
00:14:59,040 --> 00:15:02,480
so you need to cross correlate the

336
00:15:01,519 --> 00:15:06,560
signal will

337
00:15:02,480 --> 00:15:09,279
with all possible p rn code

338
00:15:06,560 --> 00:15:10,399
with a new audio on cpu it's take one or

339
00:15:09,279 --> 00:15:13,439
two seconds

340
00:15:10,399 --> 00:15:16,800
per satellite the idea

341
00:15:13,440 --> 00:15:20,240
is to update the firmware

342
00:15:16,800 --> 00:15:23,439
by adding or specific ip to do

343
00:15:20,240 --> 00:15:26,720
exactly the same thing but in processing

344
00:15:23,440 --> 00:15:28,000
just look like this you have your array

345
00:15:26,720 --> 00:15:32,240
front end

346
00:15:28,000 --> 00:15:36,560
the uh the local oscillator of the

347
00:15:32,240 --> 00:15:39,440
air ref front end take some time to

348
00:15:36,560 --> 00:15:40,319
to reconfigure to be reconfigured so we

349
00:15:39,440 --> 00:15:43,519
have added

350
00:15:40,320 --> 00:15:46,639
a nco a local oscillator a mixer to

351
00:15:43,519 --> 00:15:50,240
do a second step and second step

352
00:15:46,639 --> 00:15:53,040
frequency transposition you have your

353
00:15:50,240 --> 00:15:55,199
ca code generator this block provides

354
00:15:53,040 --> 00:15:58,719
all possible

355
00:15:55,199 --> 00:16:03,040
ca code in parallel so we use

356
00:15:58,720 --> 00:16:06,160
the user the user space to configure

357
00:16:03,040 --> 00:16:07,040
our ca code to move from to loop

358
00:16:06,160 --> 00:16:09,199
frequency

359
00:16:07,040 --> 00:16:10,480
and to select which pairing we want to

360
00:16:09,199 --> 00:16:14,079
use

361
00:16:10,480 --> 00:16:17,839
and you have the cross curator

362
00:16:14,079 --> 00:16:21,359
and the result is just sent to the ram

363
00:16:17,839 --> 00:16:21,360
and received from the cpu

364
00:16:21,440 --> 00:16:23,839
thanks to

365
00:16:24,959 --> 00:16:28,319
finally the most important thing we have

366
00:16:27,279 --> 00:16:31,680
added

367
00:16:28,320 --> 00:16:34,800
this part but we don't break anything

368
00:16:31,680 --> 00:16:38,239
the pluto work exactly like

369
00:16:34,800 --> 00:16:42,399
uh with a default firmware but we

370
00:16:38,240 --> 00:16:46,000
with a bonus block

371
00:16:42,399 --> 00:16:48,240
thanks to to this uh to this

372
00:16:46,000 --> 00:16:49,040
modification it's possible to divide by

373
00:16:48,240 --> 00:16:51,199
five

374
00:16:49,040 --> 00:16:52,480
the time to process all satellite for

375
00:16:51,199 --> 00:16:56,639
all frequency

376
00:16:52,480 --> 00:17:00,079
but now but we are just limited by the

377
00:16:56,639 --> 00:17:02,000
the zinc the fpga part is a bit small

378
00:17:00,079 --> 00:17:03,439
so it's not possible to add more than

379
00:17:02,000 --> 00:17:05,599
one cross correlator

380
00:17:03,440 --> 00:17:07,439
in the fpga so we have moved on the

381
00:17:05,599 --> 00:17:10,159
analog device

382
00:17:07,439 --> 00:17:11,120
board with the biggest fpga to be able

383
00:17:10,160 --> 00:17:13,679
to cross create

384
00:17:11,119 --> 00:17:14,559
all satellite at the same time it's a

385
00:17:13,679 --> 00:17:17,520
work in progress

386
00:17:14,559 --> 00:17:18,000
currently the design fits in the fpga in

387
00:17:17,520 --> 00:17:21,039
parallel

388
00:17:18,000 --> 00:17:26,400
on official data stream

389
00:17:21,039 --> 00:17:26,400
but we need just to verify it's working

390
00:17:27,439 --> 00:17:34,160
next demonstration is

391
00:17:31,360 --> 00:17:36,240
it's more funny demonstration uh the

392
00:17:34,160 --> 00:17:40,160
again the pluto is there do

393
00:17:36,240 --> 00:17:43,360
quite nothing and uh but this board

394
00:17:40,160 --> 00:17:45,200
use built roots to generate the

395
00:17:43,360 --> 00:17:46,959
firmware the root file system the linux

396
00:17:45,200 --> 00:17:49,600
system etc

397
00:17:46,960 --> 00:17:50,720
built roots support new radio so it's

398
00:17:49,600 --> 00:17:53,760
possible to add

399
00:17:50,720 --> 00:17:57,280
new radio in the

400
00:17:53,760 --> 00:18:01,840
firmware on the board it's it's we have

401
00:17:57,280 --> 00:18:01,840
do this and

402
00:18:02,000 --> 00:18:05,360
the the second idea is to have really

403
00:18:04,720 --> 00:18:08,160
totally

404
00:18:05,360 --> 00:18:09,678
um embedded so we have added a sound

405
00:18:08,160 --> 00:18:13,280
card

406
00:18:09,679 --> 00:18:14,799
in parallel in the fpga and finally we

407
00:18:13,280 --> 00:18:18,080
have an application

408
00:18:14,799 --> 00:18:21,840
surplus plus speed python what you want

409
00:18:18,080 --> 00:18:23,120
to just to do this low pass filter

410
00:18:21,840 --> 00:18:26,240
duplicate fm

411
00:18:23,120 --> 00:18:27,760
receiver and output on the sound card

412
00:18:26,240 --> 00:18:29,520
this looks like this you have the

413
00:18:27,760 --> 00:18:33,919
default eric's

414
00:18:29,520 --> 00:18:37,120
chain the io used as a sync

415
00:18:33,919 --> 00:18:40,480
as a source sorry by new radio the

416
00:18:37,120 --> 00:18:44,559
process is owned by new radio and an

417
00:18:40,480 --> 00:18:47,600
audio sync is used connected to the aza

418
00:18:44,559 --> 00:18:50,559
framework we provide a driver

419
00:18:47,600 --> 00:18:52,399
compatible alsa to communicate with the

420
00:18:50,559 --> 00:18:55,520
sigma delta

421
00:18:52,400 --> 00:18:59,039
ip in the fpga and a

422
00:18:55,520 --> 00:19:01,918
lc filter this is using this

423
00:18:59,039 --> 00:19:02,640
approach it's just due to the small

424
00:19:01,919 --> 00:19:06,160
amount

425
00:19:02,640 --> 00:19:09,840
of available pin for fpgr

426
00:19:06,160 --> 00:19:12,160
so and for the phone

427
00:19:09,840 --> 00:19:12,159
sorry

428
00:19:15,200 --> 00:19:19,039
i have just launched a specific

429
00:19:18,160 --> 00:19:22,559
application

430
00:19:19,039 --> 00:19:26,160
by providing a frequency and it's all

431
00:19:22,559 --> 00:19:29,120
the pc do nothing just connect

432
00:19:26,160 --> 00:19:31,600
with the ssh and it's all everything is

433
00:19:29,120 --> 00:19:33,918
done in the pluto reserve board

434
00:19:31,600 --> 00:19:37,039
the reception the processing and the

435
00:19:33,919 --> 00:19:37,039
output on the audio

436
00:19:37,200 --> 00:19:39,840
in the thing

437
00:19:41,440 --> 00:19:48,320
now to conclude

438
00:19:44,640 --> 00:19:50,880
this is an flexible framework

439
00:19:48,320 --> 00:19:52,240
demonstration we have demonstrated with

440
00:19:50,880 --> 00:19:55,440
some

441
00:19:52,240 --> 00:19:58,559
specific design end to end but

442
00:19:55,440 --> 00:20:02,240
we have to use

443
00:19:58,559 --> 00:20:04,960
our approach with the

444
00:20:02,240 --> 00:20:06,400
analog device of your unknown to merge

445
00:20:04,960 --> 00:20:09,440
to mix

446
00:20:06,400 --> 00:20:12,480
or approach an analog device approach

447
00:20:09,440 --> 00:20:14,320
and it's definitely really working

448
00:20:12,480 --> 00:20:16,720
it's a platform dependent it's possible

449
00:20:14,320 --> 00:20:20,480
to use with

450
00:20:16,720 --> 00:20:23,760
altera exilinx maybe other

451
00:20:20,480 --> 00:20:26,799
it's uh in respect the

452
00:20:23,760 --> 00:20:30,240
structure of a linux system with

453
00:20:26,799 --> 00:20:34,240
where the ip is located

454
00:20:30,240 --> 00:20:38,320
is exactly as all controller around

455
00:20:34,240 --> 00:20:41,039
the core in the sock component

456
00:20:38,320 --> 00:20:41,360
perspective the first one is to finalize

457
00:20:41,039 --> 00:20:46,240
the

458
00:20:41,360 --> 00:20:50,000
gnss parallel gold code verify and

459
00:20:46,240 --> 00:20:53,280
push on the github for everyone

460
00:20:50,000 --> 00:20:55,760
to improve documentation uh some part as

461
00:20:53,280 --> 00:20:57,678
quite i suppose well documented there

462
00:20:55,760 --> 00:20:58,879
are some tutorials for red pitaraya for

463
00:20:57,679 --> 00:21:01,919
pluto azera

464
00:20:58,880 --> 00:21:02,720
but there are some missing parts uh

465
00:21:01,919 --> 00:21:05,840
around

466
00:21:02,720 --> 00:21:09,520
many tcl approach

467
00:21:05,840 --> 00:21:13,439
and its work in progress and the

468
00:21:09,520 --> 00:21:13,918
final thing currently for race 5 seems

469
00:21:13,440 --> 00:21:18,799
to

470
00:21:13,919 --> 00:21:21,120
be important concurrent to arm processor

471
00:21:18,799 --> 00:21:22,879
so it may be interesting to try to

472
00:21:21,120 --> 00:21:26,719
demonstrate with a softcore

473
00:21:22,880 --> 00:21:30,240
risk 5 instead of an hardcore

474
00:21:26,720 --> 00:21:33,280
arm of course we have the

475
00:21:30,240 --> 00:21:35,039
built root beetroot extension for the

476
00:21:33,280 --> 00:21:38,080
red pitaya

477
00:21:35,039 --> 00:21:41,760
again same thing for the pluto sdr

478
00:21:38,080 --> 00:21:43,199
with configuration default configuration

479
00:21:41,760 --> 00:21:46,960
a configuration with a

480
00:21:43,200 --> 00:21:50,159
new radio already enabled

481
00:21:46,960 --> 00:21:53,200
and of course the github of the oskim

482
00:21:50,159 --> 00:21:55,200
digital github where we

483
00:21:53,200 --> 00:21:57,200
everything is available it's just

484
00:21:55,200 --> 00:22:00,240
monitoring to get clone or receive it

485
00:21:57,200 --> 00:22:03,440
and to read doc tutorials to see

486
00:22:00,240 --> 00:22:13,840
how to start with this

487
00:22:03,440 --> 00:22:13,840
ecosystem thank you very much

488
00:22:24,960 --> 00:22:31,260
your ui no no currently uh i'm

489
00:22:28,480 --> 00:22:33,440
currently i use um

490
00:22:31,260 --> 00:22:36,799
[Music]

491
00:22:33,440 --> 00:22:36,799
for actually for the

492
00:22:37,280 --> 00:22:41,039
for some block i use a specific dev car

493
00:22:40,000 --> 00:22:44,080
device

494
00:22:41,039 --> 00:22:48,158
but it's true i need to use io

495
00:22:44,080 --> 00:22:50,960
uio or some specific

496
00:22:48,159 --> 00:22:50,960
structure of the

497
00:22:53,039 --> 00:22:57,760
most of the kernel in using space right

498
00:22:56,000 --> 00:23:01,440
most of the work to control the

499
00:22:57,760 --> 00:23:05,039
fpga is done in user space

500
00:23:01,440 --> 00:23:08,159
um the configuration is done in

501
00:23:05,039 --> 00:23:10,960
user space by the user space

502
00:23:08,159 --> 00:23:12,640
is it yeah my question is how much of

503
00:23:10,960 --> 00:23:16,000
the

504
00:23:12,640 --> 00:23:17,280
configuration of the ip cores is done in

505
00:23:16,000 --> 00:23:21,200
kernel land

506
00:23:17,280 --> 00:23:22,960
and how much is done the repetition

507
00:23:21,200 --> 00:23:25,280
between for configuration between

508
00:23:22,960 --> 00:23:26,640
userland and kernel on to configure the

509
00:23:25,280 --> 00:23:30,320
ip

510
00:23:26,640 --> 00:23:35,280
the definitively the the driver

511
00:23:30,320 --> 00:23:38,799
is know how to communicate with the ip

512
00:23:35,280 --> 00:23:43,039
but for depending on the

513
00:23:38,799 --> 00:23:44,480
ip a part is done by the user space for

514
00:23:43,039 --> 00:23:46,720
example the

515
00:23:44,480 --> 00:23:48,400
nco the nco you have an input frequency

516
00:23:46,720 --> 00:23:50,720
you wanna you have an output frequency

517
00:23:48,400 --> 00:23:53,360
you have

518
00:23:50,720 --> 00:23:54,880
phase accumulator and this is done in

519
00:23:53,360 --> 00:23:57,760
the user space through lib

520
00:23:54,880 --> 00:23:58,159
library for example for the fear filter

521
00:23:57,760 --> 00:24:01,120
you have

522
00:23:58,159 --> 00:24:01,760
just a set of data you write you use the

523
00:24:01,120 --> 00:24:05,039
right

524
00:24:01,760 --> 00:24:08,799
on the pseudo on the file descriptor

525
00:24:05,039 --> 00:24:19,840
and the kernel do everything about that

526
00:24:08,799 --> 00:24:19,840
it's a pawn

527
00:24:30,840 --> 00:24:36,480
uh

528
00:24:32,880 --> 00:24:36,960
so you compared uh the speed of camera

529
00:24:36,480 --> 00:24:41,039
shave

530
00:24:36,960 --> 00:24:44,240
to receive gps and you compared

531
00:24:41,039 --> 00:24:46,559
your fpga uh implementation to it

532
00:24:44,240 --> 00:24:47,760
but did you also have a for example like

533
00:24:46,559 --> 00:24:51,120
a radio holograph

534
00:24:47,760 --> 00:24:52,799
to compare this decoder speed um

535
00:24:51,120 --> 00:24:54,479
the comparison the speed comparison

536
00:24:52,799 --> 00:24:58,840
between the hardware

537
00:24:54,480 --> 00:25:00,960
uh implementation and the software

538
00:24:58,840 --> 00:25:04,000
implementation

539
00:25:00,960 --> 00:25:04,960
finally in the fpga we are just limited

540
00:25:04,000 --> 00:25:08,240
by the

541
00:25:04,960 --> 00:25:11,840
uh input the sample rate if

542
00:25:08,240 --> 00:25:12,320
you if if the sample rate is one mega

543
00:25:11,840 --> 00:25:15,918
sample

544
00:25:12,320 --> 00:25:19,200
we have one microsecond between two

545
00:25:15,919 --> 00:25:21,760
new samples if you need to cross create

546
00:25:19,200 --> 00:25:23,360
about one kilo point you have just one

547
00:25:21,760 --> 00:25:25,760
millisecond

548
00:25:23,360 --> 00:25:26,719
it's not possible to reduce this because

549
00:25:25,760 --> 00:25:29,360
this the

550
00:25:26,720 --> 00:25:30,159
ff front end the limitation and the

551
00:25:29,360 --> 00:25:33,520
finally it's

552
00:25:30,159 --> 00:25:36,799
just not mandatory to to quick

553
00:25:33,520 --> 00:25:40,320
to speed up this because it's

554
00:25:36,799 --> 00:25:43,840
um the fastest way the fastest

555
00:25:40,320 --> 00:25:44,320
due to the input frequency and the real

556
00:25:43,840 --> 00:25:47,918
gain

557
00:25:44,320 --> 00:25:51,039
is after that you have result

558
00:25:47,919 --> 00:25:55,440
in the cpu not you have sample

559
00:25:51,039 --> 00:25:58,000
to compute it's just a latency

560
00:25:55,440 --> 00:25:58,880
in between the error front end and the

561
00:25:58,000 --> 00:26:02,080
cpu

562
00:25:58,880 --> 00:26:05,919
with a classic classical approach with

563
00:26:02,080 --> 00:26:09,840
octavor you need to store a big

564
00:26:05,919 --> 00:26:13,840
sample data set you process

565
00:26:09,840 --> 00:26:16,158
it's just a big difference

566
00:26:13,840 --> 00:26:17,279
it's okay after you it's possible to use

567
00:26:16,159 --> 00:26:20,480
the gpu to

568
00:26:17,279 --> 00:26:24,159
to improve this but you have always

569
00:26:20,480 --> 00:26:33,679
the acquisition time before able to be

570
00:26:24,159 --> 00:26:33,679
to process data

