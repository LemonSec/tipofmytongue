1
00:00:05,520 --> 00:00:08,240
hmm

2
00:00:06,000 --> 00:00:09,840
okay so i guess that's it can you hear

3
00:00:08,240 --> 00:00:12,559
me correctly

4
00:00:09,840 --> 00:00:14,240
okay uh so thank you everyone to be here

5
00:00:12,559 --> 00:00:17,759
today and i'm

6
00:00:14,240 --> 00:00:21,279
very happy to be able to be here

7
00:00:17,760 --> 00:00:25,119
to speak about one of my projects from

8
00:00:21,279 --> 00:00:28,080
several years ago so first

9
00:00:25,119 --> 00:00:29,599
quick presentation about me i'm a python

10
00:00:28,080 --> 00:00:32,399
and testing fan as you can

11
00:00:29,599 --> 00:00:33,600
imagine i'm a former macro reviewer and

12
00:00:32,399 --> 00:00:35,760
i currently work for

13
00:00:33,600 --> 00:00:37,520
comet.ml which is doing a monitoring

14
00:00:35,760 --> 00:00:38,000
solution for machine learning but it's

15
00:00:37,520 --> 00:00:40,399
not

16
00:00:38,000 --> 00:00:41,600
the subject today and you can find me

17
00:00:40,399 --> 00:00:44,719
with my pseudo

18
00:00:41,600 --> 00:00:45,840
literal done almost everywhere around

19
00:00:44,719 --> 00:00:48,480
the web

20
00:00:45,840 --> 00:00:49,520
so let's start by a question who in this

21
00:00:48,480 --> 00:00:53,038
room

22
00:00:49,520 --> 00:00:53,520
is writing unit tests okay so pretty

23
00:00:53,039 --> 00:00:57,360
much

24
00:00:53,520 --> 00:01:01,440
everyone and who in this room is

25
00:00:57,360 --> 00:01:04,080
not writing any tests but executing them

26
00:01:01,440 --> 00:01:05,280
okay so that's pretty much the majority

27
00:01:04,080 --> 00:01:08,798
so i have a good

28
00:01:05,280 --> 00:01:12,080
news we are not alone in fact

29
00:01:08,799 --> 00:01:14,320
more than 70 percent of the jetbrains

30
00:01:12,080 --> 00:01:17,119
developer ecosystem survey ensure that

31
00:01:14,320 --> 00:01:18,399
they're at least running unit tests and

32
00:01:17,119 --> 00:01:23,280
most of them

33
00:01:18,400 --> 00:01:26,000
are waiting then running unit tests

34
00:01:23,280 --> 00:01:27,040
so a bit of background i actually do

35
00:01:26,000 --> 00:01:29,920
both

36
00:01:27,040 --> 00:01:30,400
because i'm writing python most of the

37
00:01:29,920 --> 00:01:32,880
time

38
00:01:30,400 --> 00:01:34,960
and sometimes gs so of course what i'm

39
00:01:32,880 --> 00:01:36,240
doing i'm writing some code i'm writing

40
00:01:34,960 --> 00:01:39,360
some tests and when

41
00:01:36,240 --> 00:01:41,600
what's on test i run them so

42
00:01:39,360 --> 00:01:43,280
with the experience i've learned how to

43
00:01:41,600 --> 00:01:46,320
run all of my tasks

44
00:01:43,280 --> 00:01:49,759
subset of my test or a single task

45
00:01:46,320 --> 00:01:52,000
check why my new test is not running or

46
00:01:49,759 --> 00:01:54,320
i i know it should fail but it it

47
00:01:52,000 --> 00:01:58,640
doesn't so why

48
00:01:54,320 --> 00:02:01,360
i know where to find the data i need

49
00:01:58,640 --> 00:02:03,920
to in the output of the test runners to

50
00:02:01,360 --> 00:02:06,560
understand why it's failing or not

51
00:02:03,920 --> 00:02:08,640
and i know how to debug a failing test

52
00:02:06,560 --> 00:02:10,800
efficiently either resorting on

53
00:02:08,639 --> 00:02:11,839
debugger or addiction prints and knowing

54
00:02:10,800 --> 00:02:15,040
exactly what

55
00:02:11,840 --> 00:02:15,040
already where you should

56
00:02:15,200 --> 00:02:22,238
appears but

57
00:02:18,879 --> 00:02:23,040
this knowledge i took it from a lot of

58
00:02:22,239 --> 00:02:25,520
years of

59
00:02:23,040 --> 00:02:26,799
actually writing tests running tests and

60
00:02:25,520 --> 00:02:30,400
debugging them

61
00:02:26,800 --> 00:02:32,239
and when you first come uh to run tests

62
00:02:30,400 --> 00:02:32,959
in python so for example with pi tests

63
00:02:32,239 --> 00:02:34,800
as

64
00:02:32,959 --> 00:02:36,080
the interface you can use you can you

65
00:02:34,800 --> 00:02:38,080
can have so

66
00:02:36,080 --> 00:02:40,480
you have pretty much everything but you

67
00:02:38,080 --> 00:02:43,120
need to know where to find them

68
00:02:40,480 --> 00:02:44,399
and if you move them to javascript with

69
00:02:43,120 --> 00:02:47,200
for example just

70
00:02:44,400 --> 00:02:48,000
it's a totally different uh interface so

71
00:02:47,200 --> 00:02:51,839
for newcom

72
00:02:48,000 --> 00:02:55,120
for beginners it's very hard

73
00:02:51,840 --> 00:02:58,959
to being able to use both

74
00:02:55,120 --> 00:03:03,519
tools efficiently this in the beginning

75
00:02:58,959 --> 00:03:06,400
so that's for the language i'm the most

76
00:03:03,519 --> 00:03:07,920
able to ride because that's what i'm

77
00:03:06,400 --> 00:03:10,640
using from day to day

78
00:03:07,920 --> 00:03:11,599
but i'm actually also unfortunately the

79
00:03:10,640 --> 00:03:15,040
ci expert

80
00:03:11,599 --> 00:03:15,760
is almost all of my jobs and i am the

81
00:03:15,040 --> 00:03:18,079
one guy

82
00:03:15,760 --> 00:03:18,959
in the office or remotely when people

83
00:03:18,080 --> 00:03:21,200
say hey

84
00:03:18,959 --> 00:03:22,080
my will is for is failing but i don't

85
00:03:21,200 --> 00:03:25,518
know why

86
00:03:22,080 --> 00:03:28,560
i'm okay send me a link okay you have

87
00:03:25,519 --> 00:03:30,080
this broken dependency or you have here

88
00:03:28,560 --> 00:03:32,239
you have a national failure that

89
00:03:30,080 --> 00:03:34,720
you are expected to but it's false let's

90
00:03:32,239 --> 00:03:37,440
try to debug that

91
00:03:34,720 --> 00:03:38,959
so i have to understand failures from

92
00:03:37,440 --> 00:03:41,599
random

93
00:03:38,959 --> 00:03:42,879
tooling that i don't know they existed

94
00:03:41,599 --> 00:03:45,359
in the first place

95
00:03:42,879 --> 00:03:46,959
i have to find the data in the output

96
00:03:45,360 --> 00:03:48,879
and maybe add them because

97
00:03:46,959 --> 00:03:50,319
by default i don't know you don't have

98
00:03:48,879 --> 00:03:53,439
vlogs or

99
00:03:50,319 --> 00:03:54,958
vlogs but in info and not in debug stuff

100
00:03:53,439 --> 00:03:57,280
like that

101
00:03:54,959 --> 00:03:59,200
from time to time i even have to run

102
00:03:57,280 --> 00:04:01,599
them those tests even

103
00:03:59,200 --> 00:04:03,119
either on other another server to see if

104
00:04:01,599 --> 00:04:06,159
the server configuration

105
00:04:03,120 --> 00:04:06,720
is impacting the test or locally and

106
00:04:06,159 --> 00:04:09,439
then

107
00:04:06,720 --> 00:04:10,480
okay so you you need to install this uh

108
00:04:09,439 --> 00:04:13,680
package

109
00:04:10,480 --> 00:04:14,000
in this way then when this weird command

110
00:04:13,680 --> 00:04:17,840
with

111
00:04:14,000 --> 00:04:20,798
those flags so if not that won't work

112
00:04:17,839 --> 00:04:23,280
so all with an unfamiliar language a

113
00:04:20,798 --> 00:04:28,400
tool an interface

114
00:04:23,280 --> 00:04:30,559
so i was unhappy about this situation

115
00:04:28,400 --> 00:04:31,758
and so i decided that we not we need

116
00:04:30,560 --> 00:04:34,800
some common tooling

117
00:04:31,759 --> 00:04:37,680
uh we are engineers we love

118
00:04:34,800 --> 00:04:38,320
to buy tooling so let's write a tool

119
00:04:37,680 --> 00:04:41,120
that

120
00:04:38,320 --> 00:04:43,680
can bring all of this information into a

121
00:04:41,120 --> 00:04:47,840
single interface

122
00:04:43,680 --> 00:04:50,240
so what do we want in an interface

123
00:04:47,840 --> 00:04:50,880
so my christmas list yours can be

124
00:04:50,240 --> 00:04:53,280
different

125
00:04:50,880 --> 00:04:54,240
but i think most of them will be there

126
00:04:53,280 --> 00:04:56,719
so first color

127
00:04:54,240 --> 00:04:57,840
because when you are wedding thousands

128
00:04:56,720 --> 00:05:01,440
or thousands of line

129
00:04:57,840 --> 00:05:04,239
colors definitely helps progress bar

130
00:05:01,440 --> 00:05:05,039
of course we're launching only failing

131
00:05:04,240 --> 00:05:07,600
test

132
00:05:05,039 --> 00:05:09,520
because if you have a build that takes

133
00:05:07,600 --> 00:05:11,440
three hours you don't want to take

134
00:05:09,520 --> 00:05:12,719
to add another three hours to your

135
00:05:11,440 --> 00:05:16,800
debugging session just

136
00:05:12,720 --> 00:05:19,039
when you add a print lunch specific test

137
00:05:16,800 --> 00:05:21,520
you might know exactly which test you

138
00:05:19,039 --> 00:05:23,680
want it's either failing one or

139
00:05:21,520 --> 00:05:26,880
one that should be failing but you you

140
00:05:23,680 --> 00:05:30,240
know it should be failing but it's not

141
00:05:26,880 --> 00:05:31,680
and finally a web interface so what i

142
00:05:30,240 --> 00:05:34,880
did with this christmas list

143
00:05:31,680 --> 00:05:38,720
is i turned it into an interface

144
00:05:34,880 --> 00:05:40,159
let's meet balto so balto

145
00:05:38,720 --> 00:05:42,160
is a language independent test

146
00:05:40,160 --> 00:05:46,000
orchestrator

147
00:05:42,160 --> 00:05:50,960
balto check all of the wish lists

148
00:05:46,000 --> 00:05:54,320
it has colors progress bar

149
00:05:50,960 --> 00:05:57,680
launching failing tests only launching

150
00:05:54,320 --> 00:06:00,319
specific tests and if you don't trust me

151
00:05:57,680 --> 00:06:01,919
i will show you with a live demo wish me

152
00:06:00,319 --> 00:06:05,520
luck

153
00:06:01,919 --> 00:06:08,560
okay um so here is well can you see

154
00:06:05,520 --> 00:06:12,318
correctly okay so

155
00:06:08,560 --> 00:06:16,880
you can uh collect all of the tests

156
00:06:12,319 --> 00:06:20,160
which will uh ask that the android

157
00:06:16,880 --> 00:06:21,280
test owner to give you all the

158
00:06:20,160 --> 00:06:24,319
all the tests you have in your test

159
00:06:21,280 --> 00:06:27,280
suite you can select

160
00:06:24,319 --> 00:06:29,199
a single task which will give you some

161
00:06:27,280 --> 00:06:30,159
very basic information because you

162
00:06:29,199 --> 00:06:34,319
didn't run

163
00:06:30,160 --> 00:06:37,680
everything yet so let's try to run

164
00:06:34,319 --> 00:06:37,680
this one specifically

165
00:06:38,800 --> 00:06:45,199
so here i get uh some new data so i know

166
00:06:42,720 --> 00:06:48,479
that the test is passing which is good

167
00:06:45,199 --> 00:06:51,919
i get some additional tooling and if i

168
00:06:48,479 --> 00:06:56,960
launch everything now let's

169
00:06:51,919 --> 00:07:00,479
launch those two files at the beginning

170
00:06:56,960 --> 00:07:03,758
we can see that we get some failure

171
00:07:00,479 --> 00:07:08,240
with some trust back

172
00:07:03,759 --> 00:07:08,240
and now we can launch everything

173
00:07:10,560 --> 00:07:16,400
and you can see that you are

174
00:07:14,160 --> 00:07:18,560
it's actually not a good idea to have

175
00:07:16,400 --> 00:07:23,198
not mirroring my screen but

176
00:07:18,560 --> 00:07:26,479
uh you have like std out you have

177
00:07:23,199 --> 00:07:28,590
stdr somewhere you have logs you have

178
00:07:26,479 --> 00:07:29,840
everything i need when i debug

179
00:07:28,590 --> 00:07:32,880
[Music]

180
00:07:29,840 --> 00:07:37,919
when i debug a test suite

181
00:07:32,880 --> 00:07:40,800
so okay but that's not why i'm here

182
00:07:37,919 --> 00:07:40,799
let's go back

183
00:07:41,120 --> 00:07:47,520
here okay so balto balto

184
00:07:45,120 --> 00:07:49,120
what is doing under the hood to get all

185
00:07:47,520 --> 00:07:52,400
of your data

186
00:07:49,120 --> 00:07:55,759
valtto is launching the process okay

187
00:07:52,400 --> 00:07:59,039
but what is the big secret of balto

188
00:07:55,759 --> 00:08:02,400
it's reading the subprocess std out

189
00:07:59,039 --> 00:08:05,919
that's it but

190
00:08:02,400 --> 00:08:07,919
they still need one little piece

191
00:08:05,919 --> 00:08:08,960
the plugin which is running in test

192
00:08:07,919 --> 00:08:10,878
runner

193
00:08:08,960 --> 00:08:13,840
the web server and the ui need to speak

194
00:08:10,879 --> 00:08:13,840
the same language

195
00:08:15,039 --> 00:08:20,719
so what are the possible language to

196
00:08:18,240 --> 00:08:21,680
talk with each other because you might

197
00:08:20,720 --> 00:08:25,440
have

198
00:08:21,680 --> 00:08:26,240
here is both python the example it was

199
00:08:25,440 --> 00:08:29,520
in

200
00:08:26,240 --> 00:08:32,719
with pi test and interface in javascript

201
00:08:29,520 --> 00:08:34,478
so there's already some couple of output

202
00:08:32,719 --> 00:08:36,880
formats

203
00:08:34,479 --> 00:08:37,519
so you might know some of all of them

204
00:08:36,880 --> 00:08:41,838
you have

205
00:08:37,519 --> 00:08:44,800
junit tap log and submit

206
00:08:41,839 --> 00:08:45,120
so doing it very quickly is it's based

207
00:08:44,800 --> 00:08:48,719
on

208
00:08:45,120 --> 00:08:52,240
xml it's well known and used in the java

209
00:08:48,720 --> 00:08:55,120
community it's one big xml file at the

210
00:08:52,240 --> 00:08:55,519
end of the build its format is tied to

211
00:08:55,120 --> 00:08:58,320
gene

212
00:08:55,519 --> 00:08:59,279
there is no independent definition of it

213
00:08:58,320 --> 00:09:01,600
and it's not

214
00:08:59,279 --> 00:09:03,120
streamable as it's one big file at the

215
00:09:01,600 --> 00:09:05,600
end you need

216
00:09:03,120 --> 00:09:06,880
to wait for the end of the build before

217
00:09:05,600 --> 00:09:10,160
being able to consume it

218
00:09:06,880 --> 00:09:12,800
of course you have also tap

219
00:09:10,160 --> 00:09:14,480
that which is mostly famous in the pearl

220
00:09:12,800 --> 00:09:17,680
community

221
00:09:14,480 --> 00:09:17,680
in the pearl community

222
00:09:17,760 --> 00:09:22,480
it's simple but hard to extend i don't

223
00:09:20,560 --> 00:09:26,000
put an example here but you can

224
00:09:22,480 --> 00:09:28,880
take a um a look online

225
00:09:26,000 --> 00:09:30,640
its format is also tied to the top pearl

226
00:09:28,880 --> 00:09:33,839
implementation there is no independent

227
00:09:30,640 --> 00:09:35,680
uh definition of it and its need

228
00:09:33,839 --> 00:09:37,279
then an independent password in both

229
00:09:35,680 --> 00:09:39,920
python and gs so

230
00:09:37,279 --> 00:09:39,920
it was not good

231
00:09:41,920 --> 00:09:44,880
i mean that

232
00:09:45,200 --> 00:09:48,080
you don't have

233
00:09:48,640 --> 00:09:53,120
the format is deeply tied to the default

234
00:09:51,600 --> 00:09:56,399
implementation

235
00:09:53,120 --> 00:09:58,399
there is no if you want to discuss

236
00:09:56,399 --> 00:09:59,600
the tab format you need to create issue

237
00:09:58,399 --> 00:10:05,360
on the top

238
00:09:59,600 --> 00:10:07,839
pearl implementation

239
00:10:05,360 --> 00:10:10,720
okay oh i don't know so okay i will

240
00:10:07,839 --> 00:10:10,720
update the slide then

241
00:10:12,240 --> 00:10:14,480
okay

242
00:10:16,880 --> 00:10:23,920
yeah okay so the question was uh

243
00:10:20,000 --> 00:10:28,480
what is a non-independent definition and

244
00:10:23,920 --> 00:10:28,479
you get the answer so

245
00:10:30,839 --> 00:10:33,839
sorry

246
00:10:41,360 --> 00:10:45,200
okay hopefully i will offer another

247
00:10:43,519 --> 00:10:48,880
solution for that

248
00:10:45,200 --> 00:10:50,640
the question the comment was uh

249
00:10:48,880 --> 00:10:52,880
there's already several producers on

250
00:10:50,640 --> 00:10:56,079
consumer in several languages

251
00:10:52,880 --> 00:10:58,720
so as a starting point

252
00:10:56,079 --> 00:10:59,439
he will start with that so there's also

253
00:10:58,720 --> 00:11:02,800
mozlog

254
00:10:59,440 --> 00:11:06,800
which is uh used internally at mozilla

255
00:11:02,800 --> 00:11:07,279
and one particular uh design choice was

256
00:11:06,800 --> 00:11:09,920
that

257
00:11:07,279 --> 00:11:11,839
you you have one message at the

258
00:11:09,920 --> 00:11:13,199
beginning of an execution of test and

259
00:11:11,839 --> 00:11:14,880
one message at the end

260
00:11:13,200 --> 00:11:17,040
which means that readers need to keep

261
00:11:14,880 --> 00:11:19,680
some kind of state

262
00:11:17,040 --> 00:11:20,399
and i decided that one task equal one

263
00:11:19,680 --> 00:11:24,160
message is

264
00:11:20,399 --> 00:11:25,120
easier to to consider the last one is

265
00:11:24,160 --> 00:11:27,199
subunit

266
00:11:25,120 --> 00:11:28,560
which is actually the closest to design

267
00:11:27,200 --> 00:11:31,920
to what i

268
00:11:28,560 --> 00:11:35,518
i have designed it's a binary format

269
00:11:31,920 --> 00:11:38,719
ex while the other one

270
00:11:35,519 --> 00:11:41,200
are text based an

271
00:11:38,720 --> 00:11:43,519
effort has been made to try merging

272
00:11:41,200 --> 00:11:44,000
actually subnet and alitf which i will

273
00:11:43,519 --> 00:11:47,360
present

274
00:11:44,000 --> 00:11:48,800
just after and the biggest issue was

275
00:11:47,360 --> 00:11:52,800
that subani doesn't have

276
00:11:48,800 --> 00:11:56,240
an input format so what was again

277
00:11:52,800 --> 00:11:56,719
my christmas list so my christmas list

278
00:11:56,240 --> 00:11:58,959
was

279
00:11:56,720 --> 00:12:00,480
a format which is easy to write and easy

280
00:11:58,959 --> 00:12:03,599
to read

281
00:12:00,480 --> 00:12:06,800
which is streamable because uh

282
00:12:03,600 --> 00:12:07,440
here with balto it's a desktop

283
00:12:06,800 --> 00:12:09,839
application

284
00:12:07,440 --> 00:12:11,440
so you get all the data in real time for

285
00:12:09,839 --> 00:12:13,519
a websocket connection

286
00:12:11,440 --> 00:12:14,480
but you can have also on the ci and as

287
00:12:13,519 --> 00:12:17,040
soon as you get

288
00:12:14,480 --> 00:12:17,680
a failing test you can mark the ci build

289
00:12:17,040 --> 00:12:20,000
as well

290
00:12:17,680 --> 00:12:22,160
without needing to wait for the full

291
00:12:20,000 --> 00:12:24,320
build to be finished

292
00:12:22,160 --> 00:12:25,680
and finally a format defined outside of

293
00:12:24,320 --> 00:12:29,600
an implementation

294
00:12:25,680 --> 00:12:32,319
code dies with age

295
00:12:29,600 --> 00:12:33,680
while formats define independently can

296
00:12:32,320 --> 00:12:37,120
continue to evolve

297
00:12:33,680 --> 00:12:40,479
and get hopefully more

298
00:12:37,120 --> 00:12:42,079
traction and more tooling if it's not

299
00:12:40,480 --> 00:12:45,040
tied to a specific implementation and

300
00:12:42,079 --> 00:12:48,399
specific usage

301
00:12:45,040 --> 00:12:48,800
so i decided a new format so what do we

302
00:12:48,399 --> 00:12:51,040
need

303
00:12:48,800 --> 00:12:53,120
in this format we need a test name we

304
00:12:51,040 --> 00:12:54,880
need a test status and we need an error

305
00:12:53,120 --> 00:12:58,160
message

306
00:12:54,880 --> 00:13:07,279
so let's use json can you read

307
00:12:58,160 --> 00:13:09,329
correctly okay

308
00:13:07,279 --> 00:13:10,800
okay sorry um

309
00:13:09,330 --> 00:13:13,839
[Music]

310
00:13:10,800 --> 00:13:14,560
so there's two examples was uh with a

311
00:13:13,839 --> 00:13:17,920
pacing

312
00:13:14,560 --> 00:13:20,160
uh test and one with a failing one

313
00:13:17,920 --> 00:13:21,760
so there's actually a missing piece we

314
00:13:20,160 --> 00:13:24,079
will want

315
00:13:21,760 --> 00:13:25,920
one message at the beginning which tells

316
00:13:24,079 --> 00:13:27,439
us how many

317
00:13:25,920 --> 00:13:29,040
tests we are going to have in the test

318
00:13:27,440 --> 00:13:31,440
suite and one at the end

319
00:13:29,040 --> 00:13:33,680
for the total duration and the number of

320
00:13:31,440 --> 00:13:35,600
thing test passing tests

321
00:13:33,680 --> 00:13:37,120
but we could add more data and i

322
00:13:35,600 --> 00:13:39,279
actually showed you more data in the

323
00:13:37,120 --> 00:13:42,320
balto demo

324
00:13:39,279 --> 00:13:46,480
we can have timing log message

325
00:13:42,320 --> 00:13:49,279
stdo sdr cdr text and image diff

326
00:13:46,480 --> 00:13:49,680
for example if you are you've done some

327
00:13:49,279 --> 00:13:52,560
uh

328
00:13:49,680 --> 00:13:53,680
snapshot testing either on the front end

329
00:13:52,560 --> 00:13:57,279
or

330
00:13:53,680 --> 00:13:59,519
with some specific uh test runner and

331
00:13:57,279 --> 00:14:00,560
on the command line uh snapshot testing

332
00:13:59,519 --> 00:14:04,639
is when you

333
00:14:00,560 --> 00:14:05,920
expect a full html page or full text

334
00:14:04,639 --> 00:14:07,760
and you get something else so you want

335
00:14:05,920 --> 00:14:09,519
to diff i want uh

336
00:14:07,760 --> 00:14:11,040
you you want to give what was expected

337
00:14:09,519 --> 00:14:14,160
or not and

338
00:14:11,040 --> 00:14:16,560
find file line and more

339
00:14:14,160 --> 00:14:18,319
there was actually also one stuff

340
00:14:16,560 --> 00:14:21,518
missing

341
00:14:18,320 --> 00:14:22,880
how do you launch a specific test uh

342
00:14:21,519 --> 00:14:25,279
that's a good question because it's

343
00:14:22,880 --> 00:14:25,760
dependent to all different languages

344
00:14:25,279 --> 00:14:28,240
different

345
00:14:25,760 --> 00:14:30,319
tests or even in the same with the same

346
00:14:28,240 --> 00:14:32,480
languages different customer might have

347
00:14:30,320 --> 00:14:33,440
different way to run a specific test if

348
00:14:32,480 --> 00:14:36,560
they have one

349
00:14:33,440 --> 00:14:39,600
in the beginning so

350
00:14:36,560 --> 00:14:42,560
we talk about output format which is

351
00:14:39,600 --> 00:14:44,720
just like junit mars log subunit but we

352
00:14:42,560 --> 00:14:46,079
were missing something we need also an

353
00:14:44,720 --> 00:14:48,880
input format

354
00:14:46,079 --> 00:14:49,920
why because what you want to run a

355
00:14:48,880 --> 00:14:52,959
specific

356
00:14:49,920 --> 00:14:55,599
uh specific test you don't want any tool

357
00:14:52,959 --> 00:14:58,239
that need to do that having okay so for

358
00:14:55,600 --> 00:15:01,519
pi tests the command line is this way

359
00:14:58,240 --> 00:15:03,680
for just the command line this way for

360
00:15:01,519 --> 00:15:04,959
know the combination this way you will

361
00:15:03,680 --> 00:15:08,160
be duplicate everything

362
00:15:04,959 --> 00:15:09,199
while if you define an input format all

363
00:15:08,160 --> 00:15:12,240
the tools can

364
00:15:09,199 --> 00:15:12,880
implement it in the plugin which is

365
00:15:12,240 --> 00:15:15,920
already

366
00:15:12,880 --> 00:15:18,000
needed for the output format so if you

367
00:15:15,920 --> 00:15:20,719
have also an input format

368
00:15:18,000 --> 00:15:21,279
any tool can actually use this format to

369
00:15:20,720 --> 00:15:24,959
talk

370
00:15:21,279 --> 00:15:28,399
uh with the test runner so there's two

371
00:15:24,959 --> 00:15:29,920
main case one is i just want to collect

372
00:15:28,399 --> 00:15:31,600
all the different tests in the test

373
00:15:29,920 --> 00:15:34,160
suite

374
00:15:31,600 --> 00:15:37,279
and the other one is i want to run

375
00:15:34,160 --> 00:15:40,800
specific files or specific node ids

376
00:15:37,279 --> 00:15:42,639
but for nodes that's a bit odd because

377
00:15:40,800 --> 00:15:44,000
how do you format nodes we have the same

378
00:15:42,639 --> 00:15:46,560
issue

379
00:15:44,000 --> 00:15:47,440
so let's ask the different test runner

380
00:15:46,560 --> 00:15:50,479
to add it

381
00:15:47,440 --> 00:15:51,519
and let's create an ide field so

382
00:15:50,480 --> 00:15:53,920
whatever test

383
00:15:51,519 --> 00:15:54,959
whatever unique id a test runner can

384
00:15:53,920 --> 00:15:56,719
generate

385
00:15:54,959 --> 00:15:58,719
you send it back to whatever consumer

386
00:15:56,720 --> 00:16:00,240
for example balto and we can send it

387
00:15:58,720 --> 00:16:03,360
back to say hey

388
00:16:00,240 --> 00:16:05,680
this specific test i want to run only

389
00:16:03,360 --> 00:16:07,519
it so give it to you i don't know

390
00:16:05,680 --> 00:16:09,680
anything about oh it was

391
00:16:07,519 --> 00:16:10,880
formatted created that it includes a

392
00:16:09,680 --> 00:16:16,000
test hash

393
00:16:10,880 --> 00:16:16,000
whatever i don't care just run it again

394
00:16:16,079 --> 00:16:23,758
so if we take a full example uh aries

395
00:16:20,000 --> 00:16:27,360
valid letf output with both the name

396
00:16:23,759 --> 00:16:30,480
the unique id which is again obscure for

397
00:16:27,360 --> 00:16:33,680
balto the outcome and

398
00:16:30,480 --> 00:16:36,880
zero so that's

399
00:16:33,680 --> 00:16:40,239
the format i trying to

400
00:16:36,880 --> 00:16:42,959
define it's called atf for

401
00:16:40,240 --> 00:16:44,399
language independent test format it's

402
00:16:42,959 --> 00:16:47,439
defined in its

403
00:16:44,399 --> 00:16:50,639
it's sorry is in its

404
00:16:47,440 --> 00:16:54,320
repository independent which lists

405
00:16:50,639 --> 00:16:55,279
both producer and consumer so that means

406
00:16:54,320 --> 00:16:58,240
we can have

407
00:16:55,279 --> 00:17:01,199
discussion and effort independently from

408
00:16:58,240 --> 00:17:04,319
any implementation

409
00:17:01,199 --> 00:17:07,918
each message that i gave an example

410
00:17:04,319 --> 00:17:11,199
is defining in its own with json schema

411
00:17:07,919 --> 00:17:14,400
because it's quite easy to actually

412
00:17:11,199 --> 00:17:18,799
say what is required what are the kind

413
00:17:14,400 --> 00:17:21,839
of type that you are expecting

414
00:17:18,799 --> 00:17:23,039
one thing that was i think very very

415
00:17:21,839 --> 00:17:26,159
important is that

416
00:17:23,039 --> 00:17:29,039
you have uh in this repertory

417
00:17:26,160 --> 00:17:29,760
helpers and tools which which can help

418
00:17:29,039 --> 00:17:33,280
you

419
00:17:29,760 --> 00:17:34,240
both uh validate streams that you are

420
00:17:33,280 --> 00:17:38,080
creating or

421
00:17:34,240 --> 00:17:41,440
input streams so when you are developing

422
00:17:38,080 --> 00:17:42,799
a plugin for example a test runner in

423
00:17:41,440 --> 00:17:44,960
rust

424
00:17:42,799 --> 00:17:47,520
you don't have to you don't need a

425
00:17:44,960 --> 00:17:49,840
consumer to tell you okay it's valid

426
00:17:47,520 --> 00:17:50,799
you have an independent format which is

427
00:17:49,840 --> 00:17:53,280
important

428
00:17:50,799 --> 00:17:53,840
test suite which tell you okay this is

429
00:17:53,280 --> 00:17:57,360
valid

430
00:17:53,840 --> 00:18:00,159
any consumer should accept it and and

431
00:17:57,360 --> 00:18:02,639
understand it might be some edge cases

432
00:18:00,160 --> 00:18:05,679
in consumers but at least

433
00:18:02,640 --> 00:18:08,559
the stream is valid

434
00:18:05,679 --> 00:18:09,679
so what is the missing data uh it's

435
00:18:08,559 --> 00:18:14,399
currently working for me

436
00:18:09,679 --> 00:18:17,600
i'm like i'm using balto with python

437
00:18:14,400 --> 00:18:18,320
in my day-to-day job so the two main

438
00:18:17,600 --> 00:18:22,240
thing i see

439
00:18:18,320 --> 00:18:25,360
right now is a version number because

440
00:18:22,240 --> 00:18:29,120
hopefully it will evolve and binary data

441
00:18:25,360 --> 00:18:31,199
as it's based on json binary is

442
00:18:29,120 --> 00:18:33,360
kind of hard to send if you are when you

443
00:18:31,200 --> 00:18:36,640
want to send

444
00:18:33,360 --> 00:18:37,039
images for this thing or any output

445
00:18:36,640 --> 00:18:40,080
which

446
00:18:37,039 --> 00:18:41,919
might which might not be valid unicode

447
00:18:40,080 --> 00:18:43,600
you have an issue so that's i know what

448
00:18:41,919 --> 00:18:46,480
is missing but

449
00:18:43,600 --> 00:18:47,520
it works for me uh it's work for the

450
00:18:46,480 --> 00:18:51,600
test one i'm using

451
00:18:47,520 --> 00:18:54,559
i'm trying to create a

452
00:18:51,600 --> 00:18:55,678
a plug-in for desk in javascript but i

453
00:18:54,559 --> 00:18:58,960
realized that

454
00:18:55,679 --> 00:18:59,840
ingest the logs are not grouped per test

455
00:18:58,960 --> 00:19:02,240
they are

456
00:18:59,840 --> 00:19:03,199
for the world test files so you need uh

457
00:19:02,240 --> 00:19:05,840
to dispatch

458
00:19:03,200 --> 00:19:07,679
you have you don't have lines for

459
00:19:05,840 --> 00:19:08,799
example for specific tests so there's

460
00:19:07,679 --> 00:19:12,160
some limitations

461
00:19:08,799 --> 00:19:14,879
so i'm trying to get more languages

462
00:19:12,160 --> 00:19:15,520
to support it to see what kind of

463
00:19:14,880 --> 00:19:19,200
assumption

464
00:19:15,520 --> 00:19:22,400
i made in the language itself

465
00:19:19,200 --> 00:19:24,960
of what the test runner have and can

466
00:19:22,400 --> 00:19:26,000
send me and actually uh some

467
00:19:24,960 --> 00:19:29,039
testosterone cannot

468
00:19:26,000 --> 00:19:31,360
give me lots like i expected

469
00:19:29,039 --> 00:19:34,799
to get a line and a file from every test

470
00:19:31,360 --> 00:19:38,159
but apparently that's not the case

471
00:19:34,799 --> 00:19:39,039
so i'm looking specifically for those

472
00:19:38,160 --> 00:19:42,640
languages

473
00:19:39,039 --> 00:19:45,360
uh but uh if you want uh to have

474
00:19:42,640 --> 00:19:46,000
uh additive support for your own task

475
00:19:45,360 --> 00:19:49,678
owner in

476
00:19:46,000 --> 00:19:52,400
other languages uh i will be

477
00:19:49,679 --> 00:19:53,919
very happy to have it also and more

478
00:19:52,400 --> 00:19:55,360
importantly get your feedback on the

479
00:19:53,919 --> 00:19:58,559
format itself

480
00:19:55,360 --> 00:20:02,080
to being able to support everything

481
00:19:58,559 --> 00:20:02,480
one thing which is also on the to-do

482
00:20:02,080 --> 00:20:04,480
list

483
00:20:02,480 --> 00:20:06,080
is currently i'm launching soup

484
00:20:04,480 --> 00:20:09,520
processes and running a cd

485
00:20:06,080 --> 00:20:10,320
out but it's on your stream so i could

486
00:20:09,520 --> 00:20:14,000
also

487
00:20:10,320 --> 00:20:16,240
i could also load the stream from

488
00:20:14,000 --> 00:20:18,559
from an ssh connection or from a docker

489
00:20:16,240 --> 00:20:20,159
container remotely

490
00:20:18,559 --> 00:20:22,080
i had it working in the past i have a

491
00:20:20,159 --> 00:20:25,679
bug right now that i need to fix

492
00:20:22,080 --> 00:20:29,199
but it's working uh

493
00:20:25,679 --> 00:20:31,760
it's whiter in python so thanks to

494
00:20:29,200 --> 00:20:32,640
python new capabilities in python 3 it's

495
00:20:31,760 --> 00:20:35,280
in synchronous

496
00:20:32,640 --> 00:20:36,880
so that also means that if you have a

497
00:20:35,280 --> 00:20:39,440
project with a back end and a front end

498
00:20:36,880 --> 00:20:42,559
within two different languages which is

499
00:20:39,440 --> 00:20:43,280
a good possibility you could actually

500
00:20:42,559 --> 00:20:46,240
run

501
00:20:43,280 --> 00:20:47,678
both of your tests in a single tool in

502
00:20:46,240 --> 00:20:49,280
parallel

503
00:20:47,679 --> 00:20:52,400
so that would be awesome i don't have

504
00:20:49,280 --> 00:20:56,240
the case myself i'm doing only python

505
00:20:52,400 --> 00:20:58,880
uh but that's definitely possible

506
00:20:56,240 --> 00:20:59,440
so the architecture just for reminder is

507
00:20:58,880 --> 00:21:03,280
valto

508
00:20:59,440 --> 00:21:07,120
is picking up only about edf

509
00:21:03,280 --> 00:21:11,039
compatible compatible

510
00:21:07,120 --> 00:21:14,080
plugin or processes if any of the

511
00:21:11,039 --> 00:21:15,360
test runner will implement ltf directly

512
00:21:14,080 --> 00:21:17,840
that will mean there's no need for

513
00:21:15,360 --> 00:21:17,840
plug-in but

514
00:21:17,919 --> 00:21:21,840
until it's the case a plug-in will will

515
00:21:20,720 --> 00:21:24,159
do and

516
00:21:21,840 --> 00:21:26,399
may actually be helpful for getting all

517
00:21:24,159 --> 00:21:27,840
the stdr out of stdr and be sure that if

518
00:21:26,400 --> 00:21:29,679
the test runner is failing

519
00:21:27,840 --> 00:21:33,199
we get something to catch it and send

520
00:21:29,679 --> 00:21:33,200
something back to belt

521
00:21:33,440 --> 00:21:39,120
so in conclusion atf is a new

522
00:21:36,640 --> 00:21:39,840
protocol because i think it's input and

523
00:21:39,120 --> 00:21:43,039
output

524
00:21:39,840 --> 00:21:47,760
and similar to

525
00:21:43,039 --> 00:21:50,400
http or lsp if you know about it

526
00:21:47,760 --> 00:21:51,600
so lsp is a language server protocol

527
00:21:50,400 --> 00:21:54,880
it's a new protocol

528
00:21:51,600 --> 00:21:57,678
pushed by microsoft so you ide cool

529
00:21:54,880 --> 00:21:59,760
talk to any lsp compatible servers so

530
00:21:57,679 --> 00:22:03,440
you have one asp server for python

531
00:21:59,760 --> 00:22:08,000
which can be used from emacs not

532
00:22:03,440 --> 00:22:11,280
maybe not nano uh vs code sublime text

533
00:22:08,000 --> 00:22:12,960
so it's exactly like edf it's cutting

534
00:22:11,280 --> 00:22:15,840
down the compatibility matrix

535
00:22:12,960 --> 00:22:17,280
to one format so everything that talking

536
00:22:15,840 --> 00:22:19,760
a

537
00:22:17,280 --> 00:22:21,120
asp or atf will be able to talk to each

538
00:22:19,760 --> 00:22:23,440
other

539
00:22:21,120 --> 00:22:25,039
so i hope that it will be a foundation

540
00:22:23,440 --> 00:22:27,039
that could be used for building two more

541
00:22:25,039 --> 00:22:29,200
tools on testing

542
00:22:27,039 --> 00:22:30,158
and for example if you want a curse tool

543
00:22:29,200 --> 00:22:33,760
to when you test

544
00:22:30,159 --> 00:22:35,600
you can and if it's speaking edit f it

545
00:22:33,760 --> 00:22:36,400
will be compatible with any ledf test

546
00:22:35,600 --> 00:22:40,000
runner

547
00:22:36,400 --> 00:22:42,640
and if you want a detailed html report

548
00:22:40,000 --> 00:22:43,280
about your test timing you also can and

549
00:22:42,640 --> 00:22:44,960
again

550
00:22:43,280 --> 00:22:48,879
if it's making edit f it will be

551
00:22:44,960 --> 00:22:51,410
compatible with all letf test run

552
00:22:48,880 --> 00:22:52,559
so if you want to test balto uh

553
00:22:51,410 --> 00:22:56,159
[Music]

554
00:22:52,559 --> 00:22:59,440
the are online you can install uh ppxp

555
00:22:56,159 --> 00:23:03,360
because uh packaging in python is uh

556
00:22:59,440 --> 00:23:05,679
hard for now uh i hope in the future

557
00:23:03,360 --> 00:23:07,678
i will get a better solution to avoid

558
00:23:05,679 --> 00:23:09,679
installing something else

559
00:23:07,679 --> 00:23:12,080
but then once you have barter on your

560
00:23:09,679 --> 00:23:14,640
system you install

561
00:23:12,080 --> 00:23:17,039
the ltf plugin for your testing and then

562
00:23:14,640 --> 00:23:20,480
you can enjoy

563
00:23:17,039 --> 00:23:22,559
so how can you help any feedback about

564
00:23:20,480 --> 00:23:26,159
ltf is a good feedback

565
00:23:22,559 --> 00:23:26,879
it's young so nothing is rather in stone

566
00:23:26,159 --> 00:23:29,840
yet

567
00:23:26,880 --> 00:23:30,799
you can create new hf producer and you

568
00:23:29,840 --> 00:23:34,320
plug in

569
00:23:30,799 --> 00:23:37,440
for whatever test tool you are using or

570
00:23:34,320 --> 00:23:41,279
designing can create new ledf consumer

571
00:23:37,440 --> 00:23:44,000
i will be very happy to get both

572
00:23:41,279 --> 00:23:47,039
ecosystem on both ends of the format and

573
00:23:44,000 --> 00:23:49,279
use balto or speak about it

574
00:23:47,039 --> 00:23:51,120
of course both balto and elitef are open

575
00:23:49,279 --> 00:23:54,799
source

576
00:23:51,120 --> 00:23:55,840
on my github account feel free to open

577
00:23:54,799 --> 00:23:59,918
issue or

578
00:23:55,840 --> 00:24:02,959
that best sendpull request

579
00:23:59,919 --> 00:24:04,000
and that's it for me so i have time for

580
00:24:02,960 --> 00:24:06,320
question

581
00:24:04,000 --> 00:24:06,320
thank you

582
00:24:10,960 --> 00:24:19,840
we have one question there yeah

583
00:24:25,840 --> 00:24:29,360
yeah uh so in the input for uh yeah

584
00:24:28,480 --> 00:24:32,880
sorry

585
00:24:29,360 --> 00:24:33,840
so the question was uh in my quotation i

586
00:24:32,880 --> 00:24:37,440
talked about about

587
00:24:33,840 --> 00:24:41,520
input format and output format so when i

588
00:24:37,440 --> 00:24:41,520
speak about the input format

589
00:24:42,240 --> 00:24:46,640
yeah the first example is the input that

590
00:24:45,440 --> 00:24:49,679
balto is sending

591
00:24:46,640 --> 00:24:51,919
to the plugin which is just collect only

592
00:24:49,679 --> 00:24:55,440
and then the test runners

593
00:24:51,919 --> 00:24:56,159
itself has already uh all the code to

594
00:24:55,440 --> 00:24:57,679
just

595
00:24:56,159 --> 00:25:00,320
collect the tasks without running them

596
00:24:57,679 --> 00:25:00,880
and so it's sending back a specific

597
00:25:00,320 --> 00:25:03,439
message

598
00:25:00,880 --> 00:25:04,320
for test collection without the status

599
00:25:03,440 --> 00:25:07,279
without

600
00:25:04,320 --> 00:25:09,600
the timing stuff like that does that

601
00:25:07,279 --> 00:25:13,440
answer your question

602
00:25:09,600 --> 00:25:15,678
how do you discover the tesla it's it's

603
00:25:13,440 --> 00:25:18,159
uh so uh the question was how do you

604
00:25:15,679 --> 00:25:20,799
discover the test in the first place so

605
00:25:18,159 --> 00:25:21,679
uh there is a config file for balto at

606
00:25:20,799 --> 00:25:25,279
the root of the

607
00:25:21,679 --> 00:25:27,279
test deal uh so i'm just detecting the

608
00:25:25,279 --> 00:25:29,200
config file and then i'm pointing

609
00:25:27,279 --> 00:25:31,840
the test runner two dash to that

610
00:25:29,200 --> 00:25:31,840
directory

611
00:26:03,600 --> 00:26:06,959
so if i answer the question correctly is

612
00:26:05,760 --> 00:26:10,640
that testoner

613
00:26:06,960 --> 00:26:12,480
can actually have colors in

614
00:26:10,640 --> 00:26:14,720
the data they send back to whatever

615
00:26:12,480 --> 00:26:15,600
consumer so i plan to support it in

616
00:26:14,720 --> 00:26:18,320
balto

617
00:26:15,600 --> 00:26:19,120
uh yes sure we need to find a way to

618
00:26:18,320 --> 00:26:22,840
encode it

619
00:26:19,120 --> 00:26:25,120
and being able to transmit it but yeah

620
00:26:22,840 --> 00:26:27,918
definitely

621
00:26:25,120 --> 00:26:28,719
yeah question so what you can also do

622
00:26:27,919 --> 00:26:30,720
with this

623
00:26:28,720 --> 00:26:32,559
test framework unit test framework is

624
00:26:30,720 --> 00:26:34,400
writing roller tests such as

625
00:26:32,559 --> 00:26:36,240
duration tests or even system tests when

626
00:26:34,400 --> 00:26:39,840
it's called ui tests

627
00:26:36,240 --> 00:26:42,960
and what i often observe is that

628
00:26:39,840 --> 00:26:43,840
as broadly your tests became as more

629
00:26:42,960 --> 00:26:46,720
important the

630
00:26:43,840 --> 00:26:46,720
environment becomes

631
00:26:51,039 --> 00:26:54,080
on some foreign versions it works and

632
00:26:53,120 --> 00:26:55,678
the other ones

633
00:26:54,080 --> 00:26:57,279
maybe doesn't work can you see any

634
00:26:55,679 --> 00:26:59,600
possibility to

635
00:26:57,279 --> 00:27:01,440
have these environment information put

636
00:26:59,600 --> 00:27:02,080
into these input files there and say

637
00:27:01,440 --> 00:27:05,120
okay

638
00:27:02,080 --> 00:27:08,000
now test i don't know when you write

639
00:27:05,120 --> 00:27:10,000
use mssql server and use testers for ms

640
00:27:08,000 --> 00:27:12,960
experience server 2008 for back

641
00:27:10,000 --> 00:27:14,480
until 2019. i think that's really

642
00:27:12,960 --> 00:27:17,039
currently blind spot of

643
00:27:14,480 --> 00:27:17,840
many channels definitely so the question

644
00:27:17,039 --> 00:27:20,158
was

645
00:27:17,840 --> 00:27:21,760
when you're doing a test for example

646
00:27:20,159 --> 00:27:22,640
when you're testing against a database

647
00:27:21,760 --> 00:27:24,158
and you want

648
00:27:22,640 --> 00:27:25,600
you might have your test working with

649
00:27:24,159 --> 00:27:26,159
one version of the database and not

650
00:27:25,600 --> 00:27:28,080
another

651
00:27:26,159 --> 00:27:29,520
or different database we might have

652
00:27:28,080 --> 00:27:31,840
different failure so do i

653
00:27:29,520 --> 00:27:34,720
plan to support that yes i plan to

654
00:27:31,840 --> 00:27:37,120
support that in balto

655
00:27:34,720 --> 00:27:37,919
for now likely with both metric

656
00:27:37,120 --> 00:27:41,199
definition

657
00:27:37,919 --> 00:27:42,480
and docker compose support

658
00:27:41,200 --> 00:27:45,120
you can bring up your database

659
00:27:42,480 --> 00:27:48,399
automatically and snap snapshot it

660
00:27:45,120 --> 00:27:51,678
but i'm not sure how it will

661
00:27:48,399 --> 00:27:53,918
involve the elliott ledf format

662
00:27:51,679 --> 00:27:56,399
apart from sending information about the

663
00:27:53,919 --> 00:27:58,240
environment and which

664
00:27:56,399 --> 00:27:59,360
testing matrix combination you are

665
00:27:58,240 --> 00:28:02,420
testing

666
00:27:59,360 --> 00:28:02,419
[Music]

667
00:28:09,440 --> 00:28:17,840
yeah so sorry yeah so

668
00:28:12,880 --> 00:28:17,840
what are what are the links

669
00:28:18,799 --> 00:28:23,440
okay so the question was i said that

670
00:28:20,880 --> 00:28:26,640
subunit was a binary

671
00:28:23,440 --> 00:28:31,039
format while atf was a text format

672
00:28:26,640 --> 00:28:34,159
and he was asking me what are the links

673
00:28:31,039 --> 00:28:36,640
the binary versus text is likely

674
00:28:34,159 --> 00:28:37,760
the fact that letf is a tax format is

675
00:28:36,640 --> 00:28:40,880
mostly just

676
00:28:37,760 --> 00:28:43,440
for easiness to write and put

677
00:28:40,880 --> 00:28:44,880
and read because json is easy to write

678
00:28:43,440 --> 00:28:45,760
is it read you have library and

679
00:28:44,880 --> 00:28:50,559
everything

680
00:28:45,760 --> 00:28:54,080
uh subnet is more designed to handle

681
00:28:50,559 --> 00:28:56,879
higher loads and it has capabilities to

682
00:28:54,080 --> 00:28:59,199
actually filter streams uh split streams

683
00:28:56,880 --> 00:29:02,320
nurse streams

684
00:28:59,200 --> 00:29:06,480
so if we have to support

685
00:29:02,320 --> 00:29:08,639
binary outputs

686
00:29:06,480 --> 00:29:09,919
for example in ltf we likely have to

687
00:29:08,640 --> 00:29:12,720
move to a binary

688
00:29:09,919 --> 00:29:15,520
format anyway but for now it's tech

689
00:29:12,720 --> 00:29:15,520
because it's easier

690
00:29:16,720 --> 00:29:27,840
okay yeah

691
00:29:33,200 --> 00:29:37,440
okay okay the question was how do i test

692
00:29:36,399 --> 00:29:40,879
test

693
00:29:37,440 --> 00:29:44,480
results for no i don't balto

694
00:29:40,880 --> 00:29:48,480
is only a tool for

695
00:29:44,480 --> 00:29:51,440
desktop but with elite f i hope

696
00:29:48,480 --> 00:29:52,399
that we can get ci system which is our

697
00:29:51,440 --> 00:29:55,919
much

698
00:29:52,399 --> 00:30:05,840
much more smarter and will have to store

699
00:29:55,919 --> 00:30:05,840
data for no i don't

