1
00:00:06,160 --> 00:00:10,719
so hello everyone welcome to

2
00:00:07,600 --> 00:00:13,280
our next talk in security room next

3
00:00:10,719 --> 00:00:14,399
speaker is mojis and he's talking about

4
00:00:13,280 --> 00:00:16,650
plain text secrets in

5
00:00:14,400 --> 00:00:20,100
configuration files let's welcome him

6
00:00:16,650 --> 00:00:20,099
[Applause]

7
00:00:21,520 --> 00:00:24,720
thank you hi everybody i'm here to

8
00:00:24,240 --> 00:00:28,799
present

9
00:00:24,720 --> 00:00:31,279
my work on protecting plaintext secrets

10
00:00:28,800 --> 00:00:33,520
this work has been driven in the

11
00:00:31,279 --> 00:00:35,760
openstack project

12
00:00:33,520 --> 00:00:37,200
and it's mostly written in python what

13
00:00:35,760 --> 00:00:39,760
we have so far

14
00:00:37,200 --> 00:00:40,719
uh basically uh in our applications or

15
00:00:39,760 --> 00:00:43,920
services

16
00:00:40,719 --> 00:00:46,320
we handle input output and we have many

17
00:00:43,920 --> 00:00:48,559
ways to interact with our applications

18
00:00:46,320 --> 00:00:50,559
basically uh standard input standard

19
00:00:48,559 --> 00:00:54,000
output networking as well

20
00:00:50,559 --> 00:00:55,519
we also have standard error and

21
00:00:54,000 --> 00:00:58,320
and then we get other forms of

22
00:00:55,520 --> 00:01:00,640
interaction uh like arguments and for

23
00:00:58,320 --> 00:01:03,760
python we have our parser

24
00:01:00,640 --> 00:01:04,879
in this short code we can see uh i can

25
00:01:03,760 --> 00:01:07,840
import our password

26
00:01:04,879 --> 00:01:08,320
i create my parser and then i declare

27
00:01:07,840 --> 00:01:11,520
what

28
00:01:08,320 --> 00:01:12,880
will i expect as arguments and then i

29
00:01:11,520 --> 00:01:16,479
can later use them

30
00:01:12,880 --> 00:01:18,720
so i can call and it

31
00:01:16,479 --> 00:01:20,159
automatic automatically will generate me

32
00:01:18,720 --> 00:01:23,200
a helper

33
00:01:20,159 --> 00:01:24,960
for my program and i can call

34
00:01:23,200 --> 00:01:26,479
my program passing the arguments in the

35
00:01:24,960 --> 00:01:30,320
command line and it will

36
00:01:26,479 --> 00:01:33,679
behave accordingly

37
00:01:30,320 --> 00:01:38,559
and we it will also handle uh

38
00:01:33,680 --> 00:01:40,960
types for example and

39
00:01:38,560 --> 00:01:43,360
yeah that's mostly for arguments next

40
00:01:40,960 --> 00:01:47,600
one we have environment variables

41
00:01:43,360 --> 00:01:50,640
so um python we use os environ

42
00:01:47,600 --> 00:01:53,759
and then you can import os and then see

43
00:01:50,640 --> 00:01:55,680
your environment variables but also we

44
00:01:53,759 --> 00:01:57,600
can have some uh

45
00:01:55,680 --> 00:02:00,320
private information there that we want

46
00:01:57,600 --> 00:02:03,199
to keep it secret

47
00:02:00,320 --> 00:02:04,960
another thing configuration files so

48
00:02:03,200 --> 00:02:08,000
usually when we deploy

49
00:02:04,960 --> 00:02:11,120
we are building a service application

50
00:02:08,000 --> 00:02:13,120
we have the code and then the code base

51
00:02:11,120 --> 00:02:15,360
it usually doesn't change and then we

52
00:02:13,120 --> 00:02:18,080
have the configuration which is

53
00:02:15,360 --> 00:02:20,239
which usually changes from deployment to

54
00:02:18,080 --> 00:02:22,080
deployment and we want to keep them

55
00:02:20,239 --> 00:02:23,520
in a separate place usually we use

56
00:02:22,080 --> 00:02:26,879
configuration files

57
00:02:23,520 --> 00:02:30,000
for a database connection for example

58
00:02:26,879 --> 00:02:33,679
and in python we use config parser

59
00:02:30,000 --> 00:02:36,160
which consumes any files

60
00:02:33,680 --> 00:02:36,720
and you can see you have a session and

61
00:02:36,160 --> 00:02:40,400
and then

62
00:02:36,720 --> 00:02:42,239
like uh like a key value on each session

63
00:02:40,400 --> 00:02:45,760
and then you can access them with the

64
00:02:42,239 --> 00:02:48,319
code if i import config parser

65
00:02:45,760 --> 00:02:49,359
create my parser and then start parsing

66
00:02:48,319 --> 00:02:53,119
the file

67
00:02:49,360 --> 00:02:57,760
i can see the sections i can

68
00:02:53,120 --> 00:03:00,400
get the get the values of each key

69
00:02:57,760 --> 00:03:00,399
and so on

70
00:03:00,959 --> 00:03:06,480
then we also have signals to interact

71
00:03:04,400 --> 00:03:08,400
with

72
00:03:06,480 --> 00:03:09,920
then we have this bunch of signals i'm

73
00:03:08,400 --> 00:03:13,360
not going to go through

74
00:03:09,920 --> 00:03:16,000
all them and finally

75
00:03:13,360 --> 00:03:18,000
our application has like exit code when

76
00:03:16,000 --> 00:03:19,840
where we can see if it worked or if

77
00:03:18,000 --> 00:03:21,200
it didn't and then try to find out what

78
00:03:19,840 --> 00:03:25,360
happened

79
00:03:21,200 --> 00:03:27,040
then in openstack it's basically a

80
00:03:25,360 --> 00:03:29,440
some people call it a cloud operating

81
00:03:27,040 --> 00:03:29,440
system

82
00:03:29,840 --> 00:03:34,000
it handles bare metal nodes virtual

83
00:03:32,080 --> 00:03:35,280
machines containers and then on top of

84
00:03:34,000 --> 00:03:38,080
it

85
00:03:35,280 --> 00:03:39,440
you can deploy basically anything it's

86
00:03:38,080 --> 00:03:41,680
mostly uh

87
00:03:39,440 --> 00:03:44,319
it stays in the layer of infrastructure

88
00:03:41,680 --> 00:03:44,319
as a service

89
00:03:44,959 --> 00:03:52,239
and openstack is broke is separate in

90
00:03:48,879 --> 00:03:55,599
lots of projects

91
00:03:52,239 --> 00:03:56,560
this project is oslo which is openstack

92
00:03:55,599 --> 00:03:59,200
common libraries

93
00:03:56,560 --> 00:04:02,640
and oslo config is the the package we

94
00:03:59,200 --> 00:04:06,079
use to handle configuration in openstack

95
00:04:02,640 --> 00:04:09,279
it's not uh you don't really to be doing

96
00:04:06,080 --> 00:04:12,959
openstack stuff to to use oslo config

97
00:04:09,280 --> 00:04:16,478
most of the openstack libraries they

98
00:04:12,959 --> 00:04:17,840
they are you can use them uh

99
00:04:16,478 --> 00:04:20,880
in any piece of software you don't

100
00:04:17,839 --> 00:04:23,119
really need openstack for it

101
00:04:20,880 --> 00:04:25,840
so also configure supports configuration

102
00:04:23,120 --> 00:04:29,280
files but also arguments

103
00:04:25,840 --> 00:04:32,719
uh environment variables all in one

104
00:04:29,280 --> 00:04:35,440
and this bit more which are the the

105
00:04:32,720 --> 00:04:37,600
source drivers that i've been working in

106
00:04:35,440 --> 00:04:40,639
the past two years

107
00:04:37,600 --> 00:04:44,880
and these source drivers

108
00:04:40,639 --> 00:04:44,880
it's what allows oslo config to

109
00:04:45,280 --> 00:04:49,039
absorb configuration to read

110
00:04:46,720 --> 00:04:52,479
configuration from different sources

111
00:04:49,040 --> 00:04:53,120
so uh mainly in this talk we are going

112
00:04:52,479 --> 00:04:55,359
to use

113
00:04:53,120 --> 00:04:57,759
ozo config to access secrets behind

114
00:04:55,360 --> 00:05:00,320
vault which is a secret manager

115
00:04:57,759 --> 00:05:01,199
but we have open uh specifications that

116
00:05:00,320 --> 00:05:04,080
you can find

117
00:05:01,199 --> 00:05:05,199
links for it in both of the posters i

118
00:05:04,080 --> 00:05:08,800
attached to the

119
00:05:05,199 --> 00:05:10,400
to the presentation site and

120
00:05:08,800 --> 00:05:12,160
and then from the specification you can

121
00:05:10,400 --> 00:05:14,960
create your own drivers

122
00:05:12,160 --> 00:05:16,080
and then use autoconfig to draw the the

123
00:05:14,960 --> 00:05:19,919
values from

124
00:05:16,080 --> 00:05:21,280
whatever source you want so castellan is

125
00:05:19,919 --> 00:05:23,840
another library

126
00:05:21,280 --> 00:05:24,880
on the under the ozo project and is a

127
00:05:23,840 --> 00:05:28,719
secret manager

128
00:05:24,880 --> 00:05:31,440
um interface so it can both talk

129
00:05:28,720 --> 00:05:32,560
to barbican which is the openstack

130
00:05:31,440 --> 00:05:35,520
secret manager

131
00:05:32,560 --> 00:05:35,919
but it also talks to hashicorp vault and

132
00:05:35,520 --> 00:05:39,198
then

133
00:05:35,919 --> 00:05:42,240
uh in the future it can be uh enabled to

134
00:05:39,199 --> 00:05:44,800
talk to other secret managers

135
00:05:42,240 --> 00:05:46,479
and basically your application is

136
00:05:44,800 --> 00:05:49,840
talking to vault and then it has

137
00:05:46,479 --> 00:05:51,440
all the the secrets stored and then pro

138
00:05:49,840 --> 00:05:53,119
you authenticate the vault you provide a

139
00:05:51,440 --> 00:05:54,880
key id and then you it finally gives you

140
00:05:53,120 --> 00:05:58,319
the key

141
00:05:54,880 --> 00:05:59,280
and then it's all encrypted also config

142
00:05:58,319 --> 00:06:01,520
it has

143
00:05:59,280 --> 00:06:03,119
basic types where you can do type

144
00:06:01,520 --> 00:06:06,159
verification

145
00:06:03,120 --> 00:06:07,360
string boolean integers float list digs

146
00:06:06,160 --> 00:06:11,759
and it also has

147
00:06:07,360 --> 00:06:14,639
uh some special types for uh validation

148
00:06:11,759 --> 00:06:16,560
like uri host name ip address host

149
00:06:14,639 --> 00:06:20,000
address and port

150
00:06:16,560 --> 00:06:22,160
and this is a simple um

151
00:06:20,000 --> 00:06:23,039
an example of an application using oslo

152
00:06:22,160 --> 00:06:26,000
config

153
00:06:23,039 --> 00:06:27,840
so here i'm importing from ozo config

154
00:06:26,000 --> 00:06:31,440
and you can see

155
00:06:27,840 --> 00:06:34,560
my options for example name

156
00:06:31,440 --> 00:06:37,600
default world the greeting

157
00:06:34,560 --> 00:06:40,880
default hello the times

158
00:06:37,600 --> 00:06:40,880
default one

159
00:06:41,199 --> 00:06:45,600
and in my code i create my configuration

160
00:06:44,880 --> 00:06:48,639
object

161
00:06:45,600 --> 00:06:52,000
i register my options

162
00:06:48,639 --> 00:06:53,759
and i call

163
00:06:52,000 --> 00:06:55,440
my object and then at this moment it

164
00:06:53,759 --> 00:06:58,560
will load all my configuration

165
00:06:55,440 --> 00:07:00,560
values i can register um

166
00:06:58,560 --> 00:07:03,919
command line options with the register

167
00:07:00,560 --> 00:07:08,240
cli options i can

168
00:07:03,919 --> 00:07:11,919
register a single option with a group

169
00:07:08,240 --> 00:07:14,720
in the name and here if you use a plural

170
00:07:11,919 --> 00:07:16,000
you have more than one option this is a

171
00:07:14,720 --> 00:07:18,319
list and then this is a single

172
00:07:16,000 --> 00:07:18,319
option

173
00:07:19,199 --> 00:07:22,960
okay and when i run

174
00:07:23,120 --> 00:07:28,160
it gets you the helper from from the

175
00:07:24,960 --> 00:07:30,880
information you put on it option

176
00:07:28,160 --> 00:07:32,240
uh you can also change it will

177
00:07:30,880 --> 00:07:34,880
automatically try to

178
00:07:32,240 --> 00:07:38,800
to build the the name of the arguments

179
00:07:34,880 --> 00:07:38,800
but you can also uh override that

180
00:07:39,680 --> 00:07:45,440
and then when i call my micro

181
00:07:43,039 --> 00:07:46,878
my program it it's drawing basically the

182
00:07:45,440 --> 00:07:48,080
the configuration from the from the

183
00:07:46,879 --> 00:07:53,199
default values

184
00:07:48,080 --> 00:07:57,758
but now i can pass uh using the argument

185
00:07:53,199 --> 00:08:00,639
and it changes behavior i can

186
00:07:57,759 --> 00:08:01,199
have a configuration file and then tell

187
00:08:00,639 --> 00:08:03,360
my

188
00:08:01,199 --> 00:08:04,479
program to use the configuration file

189
00:08:03,360 --> 00:08:05,680
and then it will

190
00:08:04,479 --> 00:08:08,159
load the data from the configuration

191
00:08:05,680 --> 00:08:10,879
file and it happens if you

192
00:08:08,160 --> 00:08:12,479
put like um multiple sources of

193
00:08:10,879 --> 00:08:14,160
information

194
00:08:12,479 --> 00:08:15,520
you will have the configuration file

195
00:08:14,160 --> 00:08:18,160
first and then

196
00:08:15,520 --> 00:08:18,639
environment variables and then argument

197
00:08:18,160 --> 00:08:21,280
and then

198
00:08:18,639 --> 00:08:23,599
different sources it's in the

199
00:08:21,280 --> 00:08:26,479
documentation of the ozo project you can

200
00:08:23,599 --> 00:08:27,520
check all the how the fallbacks happen

201
00:08:26,479 --> 00:08:30,800
in the order

202
00:08:27,520 --> 00:08:34,799
it access so

203
00:08:30,800 --> 00:08:37,839
um if i call

204
00:08:34,799 --> 00:08:41,598
oh quite fast uh

205
00:08:37,839 --> 00:08:45,839
if i call my program now here just using

206
00:08:41,599 --> 00:08:45,839
arguments and configuration files

207
00:08:48,560 --> 00:08:55,518
and then on this example this is

208
00:08:52,000 --> 00:08:57,920
environment variable the

209
00:08:55,519 --> 00:08:59,120
environment variables it's also a source

210
00:08:57,920 --> 00:09:01,120
drive

211
00:08:59,120 --> 00:09:03,600
that derived from from the first

212
00:09:01,120 --> 00:09:04,959
implementation we did in 2017

213
00:09:03,600 --> 00:09:06,880
so basically you put environment

214
00:09:04,959 --> 00:09:09,680
variable with os

215
00:09:06,880 --> 00:09:10,720
underline as a prefix openstack and and

216
00:09:09,680 --> 00:09:13,120
then the group name

217
00:09:10,720 --> 00:09:13,920
greeting and then underline underline

218
00:09:13,120 --> 00:09:16,959
and then you can put

219
00:09:13,920 --> 00:09:20,240
your uh option name

220
00:09:16,959 --> 00:09:23,359
so if i have greeting times

221
00:09:20,240 --> 00:09:23,839
as a environment variable like that it

222
00:09:23,360 --> 00:09:25,440
will

223
00:09:23,839 --> 00:09:27,920
draw the configuration from the

224
00:09:25,440 --> 00:09:27,920
environment

225
00:09:29,040 --> 00:09:33,439
so uh here i have the

226
00:09:33,760 --> 00:09:36,800
a basic application flask application i

227
00:09:36,080 --> 00:09:39,920
made

228
00:09:36,800 --> 00:09:41,920
to run in my local machine

229
00:09:39,920 --> 00:09:43,839
so it has a host and a port that it will

230
00:09:41,920 --> 00:09:46,800
listen to and then i have some

231
00:09:43,839 --> 00:09:48,480
database connection and then i will try

232
00:09:46,800 --> 00:09:50,880
to connect to this

233
00:09:48,480 --> 00:09:52,080
database and when i run my application

234
00:09:50,880 --> 00:09:54,160
it

235
00:09:52,080 --> 00:09:56,320
should connect to the data database and

236
00:09:54,160 --> 00:09:59,120
then tells me if it was successful to

237
00:09:56,320 --> 00:10:02,320
connect or not

238
00:09:59,120 --> 00:10:05,200
these values they can be uh

239
00:10:02,320 --> 00:10:06,240
put to default so i can make my

240
00:10:05,200 --> 00:10:08,640
configuration file

241
00:10:06,240 --> 00:10:09,279
uh short smaller and then just change

242
00:10:08,640 --> 00:10:12,560
then

243
00:10:09,279 --> 00:10:14,880
if i need putting of course you're not

244
00:10:12,560 --> 00:10:15,680
going to put username and password as

245
00:10:14,880 --> 00:10:19,120
default

246
00:10:15,680 --> 00:10:21,359
on your new software

247
00:10:19,120 --> 00:10:22,399
so we're going to i'm calling my

248
00:10:21,360 --> 00:10:23,839
application like this

249
00:10:22,399 --> 00:10:26,880
passing the configuration file it's

250
00:10:23,839 --> 00:10:29,519
still able to work

251
00:10:26,880 --> 00:10:30,640
so now i can kill my entire

252
00:10:29,519 --> 00:10:34,000
configuration file

253
00:10:30,640 --> 00:10:34,720
because i had sensitive information

254
00:10:34,000 --> 00:10:38,000
there

255
00:10:34,720 --> 00:10:38,000
and i put them in the

256
00:10:38,959 --> 00:10:42,719
in the environment variables and i'm

257
00:10:40,480 --> 00:10:46,000
passing them here to my

258
00:10:42,720 --> 00:10:48,000
to my call and then

259
00:10:46,000 --> 00:10:49,120
these examples they go from like most

260
00:10:48,000 --> 00:10:51,920
insecure to

261
00:10:49,120 --> 00:10:51,920
to more secure

262
00:10:52,399 --> 00:10:56,079
the next one we have um

263
00:10:56,320 --> 00:11:01,040
so this is now using the the castle and

264
00:10:58,560 --> 00:11:03,839
driver to talk to the secret manager

265
00:11:01,040 --> 00:11:04,640
so how it works i have a an option

266
00:11:03,839 --> 00:11:07,760
called

267
00:11:04,640 --> 00:11:09,040
config source in the default group and

268
00:11:07,760 --> 00:11:11,839
then it defines

269
00:11:09,040 --> 00:11:14,000
this section called secrets you can have

270
00:11:11,839 --> 00:11:15,920
more um

271
00:11:14,000 --> 00:11:17,600
as you can have a list type in ozo

272
00:11:15,920 --> 00:11:19,839
config you can have multiple uh

273
00:11:17,600 --> 00:11:23,200
configuration sources config sources

274
00:11:19,839 --> 00:11:25,040
and then it will uh try to fetch

275
00:11:23,200 --> 00:11:26,720
configuration values from them based on

276
00:11:25,040 --> 00:11:28,480
the order you declare them

277
00:11:26,720 --> 00:11:30,000
so i could have like secrets one secrets

278
00:11:28,480 --> 00:11:31,760
to secrets d3

279
00:11:30,000 --> 00:11:33,360
and then when my application runs it

280
00:11:31,760 --> 00:11:37,360
will both then index

281
00:11:33,360 --> 00:11:37,360
that sequence until it gets the value

282
00:11:38,079 --> 00:11:42,959
on the session you have to define the

283
00:11:39,839 --> 00:11:45,680
driver so this driver is castling

284
00:11:42,959 --> 00:11:47,359
and then you can create your own drivers

285
00:11:45,680 --> 00:11:49,839
the the config file

286
00:11:47,360 --> 00:11:51,279
for forecastling itself and a mapping

287
00:11:49,839 --> 00:11:54,480
file

288
00:11:51,279 --> 00:11:55,040
on the config file for castlen which is

289
00:11:54,480 --> 00:11:59,600
here

290
00:11:55,040 --> 00:12:02,319
i have um key manager the back end vault

291
00:11:59,600 --> 00:12:03,200
on the example that i will be showing

292
00:12:02,320 --> 00:12:07,360
and

293
00:12:03,200 --> 00:12:07,360
you can also have barbican on openstack

294
00:12:07,920 --> 00:12:11,680
and then there's a session that should

295
00:12:10,000 --> 00:12:14,320
be a session here but i will be

296
00:12:11,680 --> 00:12:15,839
passing those values on the environment

297
00:12:14,320 --> 00:12:18,959
variable

298
00:12:15,839 --> 00:12:21,920
and then the mapping file it tells me uh

299
00:12:18,959 --> 00:12:24,560
for the group db username and password

300
00:12:21,920 --> 00:12:27,599
they have these ids

301
00:12:24,560 --> 00:12:29,920
so when i poke the the castle and driver

302
00:12:27,600 --> 00:12:31,519
it will use this mapping file for when i

303
00:12:29,920 --> 00:12:34,560
ask it like give me the

304
00:12:31,519 --> 00:12:35,519
username of the groupdb it will then use

305
00:12:34,560 --> 00:12:37,839
this id

306
00:12:35,519 --> 00:12:39,360
and then talk to vault and retrieve the

307
00:12:37,839 --> 00:12:42,320
secret which which is

308
00:12:39,360 --> 00:12:43,440
under this id so here i call my

309
00:12:42,320 --> 00:12:46,560
application again

310
00:12:43,440 --> 00:12:50,560
best in my configuration file and i

311
00:12:46,560 --> 00:12:52,800
pass my vault token on the environment

312
00:12:50,560 --> 00:12:53,680
and then my application it's able to to

313
00:12:52,800 --> 00:12:55,599
talk to vault

314
00:12:53,680 --> 00:12:58,319
get the credentials for the database and

315
00:12:55,600 --> 00:12:58,320
then run

316
00:13:00,480 --> 00:13:07,920
i think this is the last slide yes

317
00:13:06,000 --> 00:13:09,760
then here is the the demo that i

318
00:13:07,920 --> 00:13:13,920
presented at euro python

319
00:13:09,760 --> 00:13:15,600
this uh last year i have a docker

320
00:13:13,920 --> 00:13:18,719
compose which i will run

321
00:13:15,600 --> 00:13:20,079
one flask app in the first one the

322
00:13:18,720 --> 00:13:24,399
second one is a vault

323
00:13:20,079 --> 00:13:28,319
server and the third one is the database

324
00:13:24,399 --> 00:13:28,320
so i will start docker

325
00:13:30,320 --> 00:13:36,160
should have done that before but it was

326
00:13:31,760 --> 00:13:49,839
killing my memory

327
00:13:36,160 --> 00:13:49,839
oh my

328
00:13:57,360 --> 00:14:03,839
okay so we have

329
00:14:05,360 --> 00:14:17,839
that i'm not connected to the internet

330
00:14:21,120 --> 00:14:24,079
yeah oh it's here

331
00:14:27,519 --> 00:14:31,600
it doesn't work until i connect my phone

332
00:14:29,279 --> 00:14:33,920
and then say oh i have internet and then

333
00:14:31,600 --> 00:14:33,920
i can

334
00:14:37,920 --> 00:14:40,079
good

335
00:14:41,600 --> 00:14:44,800
so i can connect to the database and

336
00:14:44,240 --> 00:14:46,639
then i'm

337
00:14:44,800 --> 00:14:48,240
saying here the username and password i

338
00:14:46,639 --> 00:14:48,530
used

339
00:14:48,240 --> 00:14:51,440
and

340
00:14:48,530 --> 00:14:54,319
[Music]

341
00:14:51,440 --> 00:14:57,279
basically all the the values are coming

342
00:14:54,320 --> 00:15:00,560
from the configuration file

343
00:14:57,279 --> 00:15:03,199
then i have the other examples

344
00:15:00,560 --> 00:15:03,199
on this one

345
00:15:03,760 --> 00:15:07,920
on the plain text example i have only my

346
00:15:06,079 --> 00:15:10,959
application configuration file

347
00:15:07,920 --> 00:15:12,240
and this uh run script will

348
00:15:10,959 --> 00:15:15,439
call my application pass in the

349
00:15:12,240 --> 00:15:18,560
configuration file when i run it

350
00:15:15,440 --> 00:15:21,120
it is using with this configuration and

351
00:15:18,560 --> 00:15:22,560
i have here another node running in a

352
00:15:21,120 --> 00:15:26,800
different port

353
00:15:22,560 --> 00:15:30,160
the same

354
00:15:26,800 --> 00:15:33,279
the same application so

355
00:15:30,160 --> 00:15:35,920
going up another level um

356
00:15:33,279 --> 00:15:36,880
this is plain text example so now i have

357
00:15:35,920 --> 00:15:39,199
a secrets

358
00:15:36,880 --> 00:15:40,320
static so i have my application

359
00:15:39,199 --> 00:15:42,959
configuration file

360
00:15:40,320 --> 00:15:43,600
i have a castellan file and the mapping

361
00:15:42,959 --> 00:15:48,719
for the

362
00:15:43,600 --> 00:15:52,160
the secret and when i run it

363
00:15:48,720 --> 00:15:55,440
it will crash because uh

364
00:15:52,160 --> 00:15:59,759
vault is not running yet

365
00:15:55,440 --> 00:15:59,759
it's sealed it's here

366
00:16:00,160 --> 00:16:03,920
so i started my container uh my vault

367
00:16:03,360 --> 00:16:07,040
container

368
00:16:03,920 --> 00:16:10,479
it is locked so i have to unseal

369
00:16:07,040 --> 00:16:13,279
and then now i have my token um

370
00:16:10,480 --> 00:16:15,519
which i can check it's unsealed i have

371
00:16:13,279 --> 00:16:19,279
my secrets there

372
00:16:15,519 --> 00:16:19,279
and then now it will not crash

373
00:16:19,360 --> 00:16:25,440
so when i try to access

374
00:16:22,639 --> 00:16:27,759
it connects to the database and but i

375
00:16:25,440 --> 00:16:30,240
still have the same secrets there

376
00:16:27,759 --> 00:16:30,880
so if you have like multiple nodes the

377
00:16:30,240 --> 00:16:33,759
ideal

378
00:16:30,880 --> 00:16:34,639
is that you have different credentials

379
00:16:33,759 --> 00:16:36,480
for each node

380
00:16:34,639 --> 00:16:37,839
because if you have like 100 nodes

381
00:16:36,480 --> 00:16:40,079
running with the same secrets

382
00:16:37,839 --> 00:16:42,240
if one gets compromised all of them are

383
00:16:40,079 --> 00:16:46,160
compromised

384
00:16:42,240 --> 00:16:48,079
so um i have a third example

385
00:16:46,160 --> 00:16:49,360
so even though the secrets are encrypted

386
00:16:48,079 --> 00:16:51,199
and stored in volt

387
00:16:49,360 --> 00:16:52,720
if you have multiple nodes that's a

388
00:16:51,199 --> 00:16:56,880
problem

389
00:16:52,720 --> 00:17:00,800
so on this one

390
00:16:56,880 --> 00:17:04,160
just see i also have this

391
00:17:00,800 --> 00:17:06,639
example code simple

392
00:17:04,160 --> 00:17:09,120
orchestrator that will talk to vault get

393
00:17:06,640 --> 00:17:11,439
me a temporary token for my node

394
00:17:09,119 --> 00:17:13,359
and then uh generate uh temporary

395
00:17:11,439 --> 00:17:15,120
credentials for my application

396
00:17:13,359 --> 00:17:16,879
and then we'll create the configuration

397
00:17:15,119 --> 00:17:20,159
files

398
00:17:16,880 --> 00:17:20,160
so when i run this

399
00:17:20,799 --> 00:17:24,559
it talks to vault creates the

400
00:17:22,400 --> 00:17:27,520
credentials for me and then here

401
00:17:24,559 --> 00:17:28,399
i can see that i can connect to the

402
00:17:27,520 --> 00:17:30,639
database

403
00:17:28,400 --> 00:17:32,160
and i have a different username and a

404
00:17:30,640 --> 00:17:34,080
different password and

405
00:17:32,160 --> 00:17:35,360
if i run this again and again it will

406
00:17:34,080 --> 00:17:38,000
always create

407
00:17:35,360 --> 00:17:40,320
different credentials for me if i go to

408
00:17:38,000 --> 00:17:40,320
vault

409
00:17:40,640 --> 00:17:47,679
and check check my access lease

410
00:17:43,919 --> 00:17:48,960
database credentials so this is that

411
00:17:47,679 --> 00:17:52,720
token

412
00:17:48,960 --> 00:17:56,320
and as this is an example it

413
00:17:52,720 --> 00:17:58,080
it's one minute valid token

414
00:17:56,320 --> 00:17:59,360
you should have more running on

415
00:17:58,080 --> 00:18:02,399
production but

416
00:17:59,360 --> 00:18:05,439
for this example i put it just to one

417
00:18:02,400 --> 00:18:05,440
minute so we could

418
00:18:06,000 --> 00:18:09,600
check 13 seconds

419
00:18:12,720 --> 00:18:16,400
it's still working

420
00:18:16,880 --> 00:18:20,400
and now probably

421
00:18:22,000 --> 00:18:28,799
okay the token expired so it's no longer

422
00:18:25,200 --> 00:18:33,840
listed here and when i try to connect

423
00:18:28,799 --> 00:18:43,840
again to the database it will fail

424
00:18:33,840 --> 00:18:43,840
so that's it thank you

425
00:18:44,799 --> 00:18:59,520
you still have time for questions

426
00:18:56,320 --> 00:19:01,610
so please give one more pause for

427
00:18:59,520 --> 00:19:05,120
the speaker

428
00:19:01,610 --> 00:19:11,840
[Applause]

429
00:19:05,120 --> 00:19:11,840
thank you

430
00:19:15,200 --> 00:19:17,280
you

