1
00:00:15,440 --> 00:00:17,919
secure foreign

2
00:00:19,520 --> 00:00:22,560
so i'll start with a brief intro about

3
00:00:21,520 --> 00:00:24,240
myself

4
00:00:22,560 --> 00:00:26,160
i studied electrical engineering at the

5
00:00:24,240 --> 00:00:28,959
university

6
00:00:26,160 --> 00:00:30,320
then i got my phd at uc berkeley on

7
00:00:28,960 --> 00:00:33,760
cloud security code

8
00:00:30,320 --> 00:00:34,480
and then now uh technical director of

9
00:00:33,760 --> 00:00:37,280
botanics

10
00:00:34,480 --> 00:00:39,919
were basically uh building security

11
00:00:37,280 --> 00:00:45,840
platforms

12
00:00:39,920 --> 00:00:45,840
um so first

13
00:00:57,360 --> 00:01:02,239
way to write your enclaves from scratch

14
00:01:02,320 --> 00:01:13,840
and um

15
00:01:36,400 --> 00:01:40,880
okay we'll talk later or you can read

16
00:01:53,360 --> 00:02:09,840
very specific use case

17
00:01:58,640 --> 00:02:09,840
and that is network services

18
00:02:20,400 --> 00:02:26,400
sgx using being secure

19
00:02:23,440 --> 00:02:27,920
being easy to use and the glass was also

20
00:02:26,400 --> 00:02:29,520
very important because

21
00:02:27,920 --> 00:02:31,040
i don't know tried using some of the

22
00:02:29,520 --> 00:02:33,920
other

23
00:02:31,040 --> 00:02:35,519
like into sjx sdk or something like that

24
00:02:33,920 --> 00:02:38,720
getting something running it takes

25
00:02:35,519 --> 00:02:41,280
some time so i'm gonna go

26
00:02:38,720 --> 00:02:42,640
through each of these things and like

27
00:02:41,280 --> 00:02:45,040
show you how it was how

28
00:02:42,640 --> 00:02:47,760
i dealt with it and hopefully at the end

29
00:02:45,040 --> 00:02:51,840
i can show you some demos

30
00:02:47,760 --> 00:02:51,840
and yeah

31
00:02:57,200 --> 00:03:00,079
sorry about that

32
00:03:02,840 --> 00:03:08,959
okay so uh yeah let's start with the

33
00:03:06,879 --> 00:03:12,640
designing for security

34
00:03:08,959 --> 00:03:13,840
right um one of the interesting things

35
00:03:12,640 --> 00:03:15,279
when you look at

36
00:03:13,840 --> 00:03:17,120
you know security is you know which

37
00:03:15,280 --> 00:03:18,000
program language can you use this is a

38
00:03:17,120 --> 00:03:20,480
picture from

39
00:03:18,000 --> 00:03:21,360
from microsoft actually where they

40
00:03:20,480 --> 00:03:24,480
showed uh

41
00:03:21,360 --> 00:03:26,400
you know of all the bugs that they have

42
00:03:24,480 --> 00:03:27,760
in in their software over the past you

43
00:03:26,400 --> 00:03:30,799
know 12 years

44
00:03:27,760 --> 00:03:32,720
what which of those are caused by

45
00:03:30,799 --> 00:03:35,200
by memory safety issues and which were

46
00:03:32,720 --> 00:03:38,080
other types of bugs so about 70

47
00:03:35,200 --> 00:03:39,679
of all their their security issues were

48
00:03:38,080 --> 00:03:43,040
memory safety issues

49
00:03:39,680 --> 00:03:45,040
right so uh sure i mean

50
00:03:43,040 --> 00:03:46,239
uh if you are really focused on

51
00:03:45,040 --> 00:03:47,840
something and working on your own and

52
00:03:46,239 --> 00:03:51,280
you can probably write

53
00:03:47,840 --> 00:03:54,560
like memory safe c uh but doing it

54
00:03:51,280 --> 00:03:56,319
at a scale of a large company is

55
00:03:54,560 --> 00:03:58,840
or just any large project it's just

56
00:03:56,319 --> 00:04:02,720
basically impossible

57
00:03:58,840 --> 00:04:04,560
um so that's uh why i think rust is the

58
00:04:02,720 --> 00:04:06,239
the best way to go for secure enclaves

59
00:04:04,560 --> 00:04:09,360
right you're you have this

60
00:04:06,239 --> 00:04:12,000
this kind of minimal

61
00:04:09,360 --> 00:04:13,519
uh environment so you probably can't

62
00:04:12,000 --> 00:04:15,120
pull in all the dependencies that you

63
00:04:13,519 --> 00:04:18,478
would need for like a jvm

64
00:04:15,120 --> 00:04:19,680
or or or or something like that and so

65
00:04:18,478 --> 00:04:21,519
you're kind of

66
00:04:19,680 --> 00:04:23,520
stuck with choosing something like lower

67
00:04:21,519 --> 00:04:26,320
level uh

68
00:04:23,520 --> 00:04:27,680
but you know of course this is you

69
00:04:26,320 --> 00:04:29,440
you've identified something you want to

70
00:04:27,680 --> 00:04:32,639
be super secure

71
00:04:29,440 --> 00:04:35,840
um so so why why uc

72
00:04:32,639 --> 00:04:37,919
right so we're using rust so some of the

73
00:04:35,840 --> 00:04:40,880
cool features of rust are

74
00:04:37,919 --> 00:04:41,599
guaranteed memory and type safety there

75
00:04:40,880 --> 00:04:43,759
there's like

76
00:04:41,600 --> 00:04:44,960
static analysis built right into the

77
00:04:43,759 --> 00:04:48,160
compiler right

78
00:04:44,960 --> 00:04:50,719
uh 25 years of programming languages

79
00:04:48,160 --> 00:04:53,120
and static analysis research that is

80
00:04:50,720 --> 00:04:56,240
just right available right there

81
00:04:53,120 --> 00:04:58,160
um very good way to deal with errors

82
00:04:56,240 --> 00:05:00,000
uh right so you cannot ignore errors in

83
00:04:58,160 --> 00:05:01,600
rust but it's it's not

84
00:05:00,000 --> 00:05:03,600
it's not hard to deal with them either

85
00:05:01,600 --> 00:05:04,479
so that's really good uh very good

86
00:05:03,600 --> 00:05:06,880
concurrency

87
00:05:04,479 --> 00:05:08,479
uh primitives and uh like i said

88
00:05:06,880 --> 00:05:09,600
basically no runtime right you can just

89
00:05:08,479 --> 00:05:11,280
compile it down

90
00:05:09,600 --> 00:05:14,320
to the bare metal which is what we need

91
00:05:11,280 --> 00:05:17,440
to do in in this environment

92
00:05:14,320 --> 00:05:18,320
okay so the next thing that we're

93
00:05:17,440 --> 00:05:20,400
thinking about you know

94
00:05:18,320 --> 00:05:22,479
when you're designing something that for

95
00:05:20,400 --> 00:05:24,000
security purposes is like the interface

96
00:05:22,479 --> 00:05:27,280
that you expose to the outside world

97
00:05:24,000 --> 00:05:29,759
right the interface is like the

98
00:05:27,280 --> 00:05:30,799
number one attack point uh for for an

99
00:05:29,759 --> 00:05:33,759
adversary

100
00:05:30,800 --> 00:05:35,199
uh so you better like think think long

101
00:05:33,759 --> 00:05:36,479
and hard about like what are you gonna

102
00:05:35,199 --> 00:05:38,560
expose there

103
00:05:36,479 --> 00:05:40,240
and uh how are you going to deal with

104
00:05:38,560 --> 00:05:41,440
with whatever an attacker might throw at

105
00:05:40,240 --> 00:05:44,560
you

106
00:05:41,440 --> 00:05:47,600
uh right so if you

107
00:05:44,560 --> 00:05:49,360
if you use an interface like a binary

108
00:05:47,600 --> 00:05:51,520
function call interface like you might

109
00:05:49,360 --> 00:05:53,680
find in uh

110
00:05:51,520 --> 00:05:55,840
you know just any like the c calling

111
00:05:53,680 --> 00:05:58,000
convention or even like the linux cisco

112
00:05:55,840 --> 00:05:59,758
calling convention it's very hard to get

113
00:05:58,000 --> 00:06:02,400
these things correct

114
00:05:59,759 --> 00:06:04,000
uh you can have variable variable length

115
00:06:02,400 --> 00:06:06,080
structures you can have time of check to

116
00:06:04,000 --> 00:06:09,440
time of use issues you can have padding

117
00:06:06,080 --> 00:06:12,560
issues uh and and things like that

118
00:06:09,440 --> 00:06:14,240
right so uh regarding the padding issue

119
00:06:12,560 --> 00:06:16,880
you know this was an issue with the

120
00:06:14,240 --> 00:06:17,600
intel sgx sdk so this is now an excerpt

121
00:06:16,880 --> 00:06:19,199
from the

122
00:06:17,600 --> 00:06:20,720
developer guide from intel where they

123
00:06:19,199 --> 00:06:22,319
say okay you know you've got to be aware

124
00:06:20,720 --> 00:06:23,520
you don't put padding in the structures

125
00:06:22,319 --> 00:06:25,680
that you're using in your enclave

126
00:06:23,520 --> 00:06:28,960
interface

127
00:06:25,680 --> 00:06:32,240
another thing from from

128
00:06:28,960 --> 00:06:35,120
intel's manual or intel's

129
00:06:32,240 --> 00:06:36,000
developer guide uh right uh they had

130
00:06:35,120 --> 00:06:38,400
this

131
00:06:36,000 --> 00:06:40,240
functionality to allow you to uh specify

132
00:06:38,400 --> 00:06:43,679
like variable length inputs

133
00:06:40,240 --> 00:06:47,280
uh well that's that's gone now right so

134
00:06:43,680 --> 00:06:50,400
um why why are we trying to mimic

135
00:06:47,280 --> 00:06:52,479
these these seed type interfaces across

136
00:06:50,400 --> 00:06:55,359
an interface that's just not compatible

137
00:06:52,479 --> 00:06:57,680
or well compatible like not not suitable

138
00:06:55,360 --> 00:06:57,680
for it

139
00:06:58,000 --> 00:07:02,479
right so i would say you know

140
00:07:01,039 --> 00:07:03,840
look look somewhere else right if you

141
00:07:02,479 --> 00:07:05,039
look at network services they are

142
00:07:03,840 --> 00:07:06,960
designed

143
00:07:05,039 --> 00:07:09,280
to work with untrusted inputs right like

144
00:07:06,960 --> 00:07:10,960
everyone has some web servers and

145
00:07:09,280 --> 00:07:13,440
they're connected to the internet

146
00:07:10,960 --> 00:07:14,880
and right they have been for 30 years

147
00:07:13,440 --> 00:07:16,000
and they're like really focused on

148
00:07:14,880 --> 00:07:17,900
dealing with untrusted

149
00:07:16,000 --> 00:07:19,199
inputs

150
00:07:17,900 --> 00:07:21,840
[Music]

151
00:07:19,199 --> 00:07:23,039
so why not do the same right so in in

152
00:07:21,840 --> 00:07:24,318
the edp

153
00:07:23,039 --> 00:07:26,240
we just provide a byte stream

154
00:07:24,319 --> 00:07:27,599
abstraction

155
00:07:26,240 --> 00:07:29,440
and then you can run any protocol you

156
00:07:27,599 --> 00:07:33,599
want on top of that

157
00:07:29,440 --> 00:07:36,800
including like tls or not right

158
00:07:33,599 --> 00:07:40,240
but you can run grpc or http

159
00:07:36,800 --> 00:07:42,080
or anything like that and you know you

160
00:07:40,240 --> 00:07:44,560
might think that a reason for not

161
00:07:42,080 --> 00:07:46,318
running like a full protocol like that

162
00:07:44,560 --> 00:07:47,599
is is that parsing is hard and you know

163
00:07:46,319 --> 00:07:49,280
we're an enclave we don't want to deal

164
00:07:47,599 --> 00:07:50,080
with like parsing issues but you know if

165
00:07:49,280 --> 00:07:53,198
you're using

166
00:07:50,080 --> 00:07:56,560
anything but c parsing is actually easy

167
00:07:53,199 --> 00:07:58,879
right um so that's not a reason not to

168
00:07:56,560 --> 00:08:02,879
use it

169
00:07:58,879 --> 00:08:04,960
okay um so

170
00:08:02,879 --> 00:08:06,560
moving on to the threat model you know

171
00:08:04,960 --> 00:08:08,000
if you're talking about network services

172
00:08:06,560 --> 00:08:10,080
this is what you can think of right you

173
00:08:08,000 --> 00:08:13,120
can basically

174
00:08:10,080 --> 00:08:14,719
get your your your remote compute

175
00:08:13,120 --> 00:08:15,919
infrastructure from anywhere

176
00:08:14,720 --> 00:08:17,759
it doesn't matter as long as they have

177
00:08:15,919 --> 00:08:19,039
the secure enclave capability it runs on

178
00:08:17,759 --> 00:08:20,800
the server you don't trust the

179
00:08:19,039 --> 00:08:22,479
administrator you don't trust the server

180
00:08:20,800 --> 00:08:23,759
right so this is like a cloud provider

181
00:08:22,479 --> 00:08:25,520
or anything

182
00:08:23,759 --> 00:08:27,199
uh you trust of course the client and

183
00:08:25,520 --> 00:08:31,039
the user um

184
00:08:27,199 --> 00:08:32,880
and um for for secure enclaves

185
00:08:31,039 --> 00:08:34,880
specifically kind of you know we're not

186
00:08:32,880 --> 00:08:36,958
considering availability here

187
00:08:34,880 --> 00:08:38,320
uh but you can of course get

188
00:08:36,958 --> 00:08:40,319
availability by by

189
00:08:38,320 --> 00:08:41,919
deploying your things in a like a

190
00:08:40,320 --> 00:08:45,120
redundant fashion across multiple

191
00:08:41,919 --> 00:08:48,880
providers or something like that

192
00:08:45,120 --> 00:08:50,160
um so the the secure enclave is the

193
00:08:48,880 --> 00:08:53,680
network server

194
00:08:50,160 --> 00:08:55,040
that is what you would what how you need

195
00:08:53,680 --> 00:08:58,079
to think about this here

196
00:08:55,040 --> 00:08:58,719
right uh so you're not talking to like a

197
00:08:58,080 --> 00:09:00,480
host

198
00:08:58,720 --> 00:09:02,160
that has is running some server but

199
00:09:00,480 --> 00:09:03,279
you're talking to directly to the secure

200
00:09:02,160 --> 00:09:06,880
enclave

201
00:09:03,279 --> 00:09:08,399
right so

202
00:09:06,880 --> 00:09:10,800
how does that integrate with remote at

203
00:09:08,399 --> 00:09:12,480
the station well easy right

204
00:09:10,800 --> 00:09:13,920
client connects to the secure enclave

205
00:09:12,480 --> 00:09:17,200
there's some

206
00:09:13,920 --> 00:09:18,160
uh there's a some protocol that you do

207
00:09:17,200 --> 00:09:19,680
where you verify

208
00:09:18,160 --> 00:09:21,360
you know is this a real software that

209
00:09:19,680 --> 00:09:22,160
i'm trying to run is running on a legit

210
00:09:21,360 --> 00:09:25,200
platform

211
00:09:22,160 --> 00:09:28,800
something like that and then

212
00:09:25,200 --> 00:09:32,560
you can move on so

213
00:09:28,800 --> 00:09:35,839
um in a very

214
00:09:32,560 --> 00:09:38,079
uh you know first first idea of like how

215
00:09:35,839 --> 00:09:40,800
you would implement this maybe you can

216
00:09:38,080 --> 00:09:42,399
like save the hash of your of your that

217
00:09:40,800 --> 00:09:43,680
you expect on the server side in your

218
00:09:42,399 --> 00:09:46,720
client program

219
00:09:43,680 --> 00:09:48,719
and you verify that um you verify that

220
00:09:46,720 --> 00:09:50,800
when you do this connection

221
00:09:48,720 --> 00:09:52,480
this works right but but now you really

222
00:09:50,800 --> 00:09:54,719
you have an issue because you can't do

223
00:09:52,480 --> 00:09:56,959
updates on the server side

224
00:09:54,720 --> 00:09:58,320
uh and you need you need like one client

225
00:09:56,959 --> 00:10:00,399
per service like every

226
00:09:58,320 --> 00:10:02,000
because the identity of the server is

227
00:10:00,399 --> 00:10:02,800
baked into the client you need a

228
00:10:02,000 --> 00:10:06,000
different client

229
00:10:02,800 --> 00:10:08,800
every all the time right so we have this

230
00:10:06,000 --> 00:10:10,800
ability to to verify

231
00:10:08,800 --> 00:10:11,920
the code identity on the on the server

232
00:10:10,800 --> 00:10:13,599
side but

233
00:10:11,920 --> 00:10:15,360
how do we know which which identity we

234
00:10:13,600 --> 00:10:18,240
want here

235
00:10:15,360 --> 00:10:18,880
uh that's that's that's a big question

236
00:10:18,240 --> 00:10:22,160
um

237
00:10:18,880 --> 00:10:24,959
but this is uh something that you can

238
00:10:22,160 --> 00:10:26,560
solve in a different way right so like i

239
00:10:24,959 --> 00:10:28,959
said we it's a byte stream abstraction

240
00:10:26,560 --> 00:10:32,000
so we can we can just use tls

241
00:10:28,959 --> 00:10:34,719
so if we take a private tls private key

242
00:10:32,000 --> 00:10:36,560
and and assign it to the enclave and

243
00:10:34,720 --> 00:10:38,800
then make sure that the enclave

244
00:10:36,560 --> 00:10:40,160
never exposes this private key to the

245
00:10:38,800 --> 00:10:43,920
pub to the world

246
00:10:40,160 --> 00:10:45,760
right uh then if you are able to

247
00:10:43,920 --> 00:10:48,160
establish the secure channel and the id

248
00:10:45,760 --> 00:10:49,519
the enclave identifies itself using its

249
00:10:48,160 --> 00:10:50,880
private key

250
00:10:49,519 --> 00:10:52,640
you know you're talking directly to

251
00:10:50,880 --> 00:10:54,320
enclave right because

252
00:10:52,640 --> 00:10:57,510
the secure enclave is only the only one

253
00:10:54,320 --> 00:10:58,959
that has access to this key

254
00:10:57,510 --> 00:11:02,240
[Music]

255
00:10:58,959 --> 00:11:05,839
so um you don't actually need to do

256
00:11:02,240 --> 00:11:08,959
a a live remote at the station challenge

257
00:11:05,839 --> 00:11:11,360
uh if you use this uh scheme

258
00:11:08,959 --> 00:11:13,599
um you can just you know attest to the

259
00:11:11,360 --> 00:11:16,480
the the public enclave the enclave

260
00:11:13,600 --> 00:11:17,839
can have its public key attested to once

261
00:11:16,480 --> 00:11:19,600
and then you can rely on that

262
00:11:17,839 --> 00:11:21,279
going forward and then you can just set

263
00:11:19,600 --> 00:11:22,800
up a standard tls connection right so

264
00:11:21,279 --> 00:11:24,399
this makes the whole life a whole lot

265
00:11:22,800 --> 00:11:26,880
easier because

266
00:11:24,399 --> 00:11:28,560
now you can use uh you don't have to

267
00:11:26,880 --> 00:11:30,320
write your own custom protocols to do

268
00:11:28,560 --> 00:11:35,119
security and things like that

269
00:11:30,320 --> 00:11:39,120
um so similarly to like how a

270
00:11:35,120 --> 00:11:41,760
standard tls certificate kind of binds a

271
00:11:39,120 --> 00:11:43,680
subject name to a tlsp public key you

272
00:11:41,760 --> 00:11:45,519
can use it at the station to bind the

273
00:11:43,680 --> 00:11:47,199
public key to a software

274
00:11:45,519 --> 00:11:49,120
so now we have a binding all the way

275
00:11:47,200 --> 00:11:52,880
from subject name to

276
00:11:49,120 --> 00:11:55,360
to the enclave right so

277
00:11:52,880 --> 00:11:57,120
you can you can use this in your trust

278
00:11:55,360 --> 00:11:58,959
model so when you say

279
00:11:57,120 --> 00:12:00,480
i'm going to a particular web service

280
00:11:58,959 --> 00:12:03,040
like my webmail.com

281
00:12:00,480 --> 00:12:04,959
okay i know that you know mywebmail.com

282
00:12:03,040 --> 00:12:10,719
is actually running

283
00:12:04,959 --> 00:12:12,880
a particular piece of software so um

284
00:12:10,720 --> 00:12:14,240
right through hop through the cervical

285
00:12:12,880 --> 00:12:16,880
and then 3d at the station

286
00:12:14,240 --> 00:12:21,040
you know exactly the server side

287
00:12:16,880 --> 00:12:23,279
software that's running on mywebmill.com

288
00:12:21,040 --> 00:12:25,279
so like you can't do something like the

289
00:12:23,279 --> 00:12:26,880
lava bit thing right where where the the

290
00:12:25,279 --> 00:12:30,240
private key is leaked

291
00:12:26,880 --> 00:12:31,920
uh or ordered to be leaked because the

292
00:12:30,240 --> 00:12:33,839
private key is not owned by a human it's

293
00:12:31,920 --> 00:12:35,120
owned by the enclave

294
00:12:33,839 --> 00:12:36,560
and you know that the software that

295
00:12:35,120 --> 00:12:37,680
you've written that's running in the

296
00:12:36,560 --> 00:12:40,239
enclave

297
00:12:37,680 --> 00:12:41,839
it cannot like it will not release the

298
00:12:40,240 --> 00:12:45,440
private key

299
00:12:41,839 --> 00:12:46,399
right so when the enclave starts you

300
00:12:45,440 --> 00:12:48,000
just

301
00:12:46,399 --> 00:12:50,240
check you know do i have a valid private

302
00:12:48,000 --> 00:12:52,240
key if not i'll make one

303
00:12:50,240 --> 00:12:53,440
and then and do is to have a valid

304
00:12:52,240 --> 00:12:55,200
certificate if not

305
00:12:53,440 --> 00:12:57,040
you know i'll put a certificate signing

306
00:12:55,200 --> 00:12:59,360
request and then

307
00:12:57,040 --> 00:13:03,199
i just you know once i get a certificate

308
00:12:59,360 --> 00:13:03,200
i can i can run i can be a tls server

309
00:13:04,160 --> 00:13:08,880
uh okay so that's the services part uh

310
00:13:06,959 --> 00:13:10,399
like and how you integrate services with

311
00:13:08,880 --> 00:13:14,079
enclaves

312
00:13:10,399 --> 00:13:15,839
um so then um

313
00:13:14,079 --> 00:13:18,160
talking about you know portability and

314
00:13:15,839 --> 00:13:20,639
ease of use um

315
00:13:18,160 --> 00:13:21,199
if you want to write run an intel stx

316
00:13:20,639 --> 00:13:22,720
enclave

317
00:13:21,200 --> 00:13:24,720
all you need to do is write a simple

318
00:13:22,720 --> 00:13:25,519
rust program and i'll show you that in a

319
00:13:24,720 --> 00:13:27,920
bit

320
00:13:25,519 --> 00:13:29,360
uh and that's because uh the rust

321
00:13:27,920 --> 00:13:32,479
standard library

322
00:13:29,360 --> 00:13:35,200
uh upstream includes a

323
00:13:32,480 --> 00:13:36,880
a back end for for sgx that that we

324
00:13:35,200 --> 00:13:39,680
wrote

325
00:13:36,880 --> 00:13:41,920
and so you can just uh rust has very

326
00:13:39,680 --> 00:13:44,319
good support for cross compilation

327
00:13:41,920 --> 00:13:45,920
um so you can easily just you know

328
00:13:44,320 --> 00:13:46,800
install the standard library for this

329
00:13:45,920 --> 00:13:49,199
other target

330
00:13:46,800 --> 00:13:50,719
compile for this sjx target and now your

331
00:13:49,199 --> 00:13:54,639
program is just running

332
00:13:50,720 --> 00:13:57,920
or is able to run in an enclave

333
00:13:54,639 --> 00:13:58,720
right so a lot of people or a lot of

334
00:13:57,920 --> 00:14:02,319
designs for

335
00:13:58,720 --> 00:14:03,760
for using enclaves they make you think

336
00:14:02,320 --> 00:14:04,560
about splitting your application in

337
00:14:03,760 --> 00:14:06,480
halves

338
00:14:04,560 --> 00:14:07,760
like one half runs outside the enclave

339
00:14:06,480 --> 00:14:11,440
run one half

340
00:14:07,760 --> 00:14:12,319
runs inside um but you know then you

341
00:14:11,440 --> 00:14:13,920
need to write two

342
00:14:12,320 --> 00:14:16,480
two pieces of software so that's a lot

343
00:14:13,920 --> 00:14:18,240
of work um so because of the simple byte

344
00:14:16,480 --> 00:14:20,000
stream interface that that you know i

345
00:14:18,240 --> 00:14:21,600
defined as the enclave interface

346
00:14:20,000 --> 00:14:23,440
we only ever need to write the piece

347
00:14:21,600 --> 00:14:24,800
that runs outside the enclave once and

348
00:14:23,440 --> 00:14:27,360
you can reuse that for all

349
00:14:24,800 --> 00:14:30,319
enclaves all right so this is just

350
00:14:27,360 --> 00:14:33,600
available you can just install that

351
00:14:30,320 --> 00:14:36,399
once and you can run all the enclaves

352
00:14:33,600 --> 00:14:38,000
and then right this runner program is

353
00:14:36,399 --> 00:14:41,839
just in charge

354
00:14:38,000 --> 00:14:43,519
of shuttling traffic around

355
00:14:41,839 --> 00:14:46,000
between the outside world and the

356
00:14:43,519 --> 00:14:47,600
enclave right because it's just

357
00:14:46,000 --> 00:14:50,160
forwarding a byte stream right so if you

358
00:14:47,600 --> 00:14:51,440
have a tcp listening server or something

359
00:14:50,160 --> 00:14:52,560
like that right that needs to run

360
00:14:51,440 --> 00:14:55,360
outside the enclave

361
00:14:52,560 --> 00:14:56,959
it interacts with the os to do that when

362
00:14:55,360 --> 00:14:58,560
you get any connection that gets passed

363
00:14:56,959 --> 00:14:59,920
through the enclave and the

364
00:14:58,560 --> 00:15:01,920
read and write operations are just

365
00:14:59,920 --> 00:15:03,599
passed directly through

366
00:15:01,920 --> 00:15:05,360
so it also means that you know this

367
00:15:03,600 --> 00:15:07,279
enclave uh

368
00:15:05,360 --> 00:15:09,120
is kind of like independent of like the

369
00:15:07,279 --> 00:15:11,839
operating system right because

370
00:15:09,120 --> 00:15:13,040
it doesn't depend on anything so you can

371
00:15:11,839 --> 00:15:16,480
use the same enclave

372
00:15:13,040 --> 00:15:21,360
on all os easily

373
00:15:16,480 --> 00:15:21,360
um cool so

374
00:15:21,600 --> 00:15:25,680
there was a bit of a whirlwind of the

375
00:15:24,160 --> 00:15:27,199
overview of like you know the thoughts

376
00:15:25,680 --> 00:15:28,160
that i put into like designing the

377
00:15:27,199 --> 00:15:31,758
system

378
00:15:28,160 --> 00:15:33,839
um so um uh

379
00:15:31,759 --> 00:15:35,199
yeah you take sgx you take rust you take

380
00:15:33,839 --> 00:15:37,120
a service

381
00:15:35,199 --> 00:15:38,319
uh network service idea you combine it

382
00:15:37,120 --> 00:15:40,880
and that's what uh what the enclave

383
00:15:38,320 --> 00:15:43,199
development platform is

384
00:15:40,880 --> 00:15:46,160
website is edp.fortanix.com you can

385
00:15:43,199 --> 00:15:46,160
download everything there

386
00:15:46,639 --> 00:15:50,959
um and there's like a quick guide a

387
00:15:49,040 --> 00:15:52,880
quick start guide and everything so

388
00:15:50,959 --> 00:15:54,399
in the future we're gonna work on

389
00:15:52,880 --> 00:15:56,880
supporting sgx2

390
00:15:54,399 --> 00:15:58,480
and and other extensions that are come

391
00:15:56,880 --> 00:16:01,360
up coming

392
00:15:58,480 --> 00:16:02,639
we're going to do better support for

393
00:16:01,360 --> 00:16:04,560
asynchronous io so

394
00:16:02,639 --> 00:16:06,800
rust has very good support for for

395
00:16:04,560 --> 00:16:08,959
asynchronous io using futures

396
00:16:06,800 --> 00:16:10,880
so that's going to be supported soon and

397
00:16:08,959 --> 00:16:12,479
i'm looking at like adding some binary

398
00:16:10,880 --> 00:16:14,639
analysis tools so that you know once

399
00:16:12,480 --> 00:16:16,240
you've built the enclave you want to

400
00:16:14,639 --> 00:16:19,199
like make sure that certain things got

401
00:16:16,240 --> 00:16:19,199
compiled correctly

402
00:16:19,759 --> 00:16:24,000
to guard against miscompilations and

403
00:16:22,639 --> 00:16:25,920
programmer errors

404
00:16:24,000 --> 00:16:27,600
just again to add like another layer of

405
00:16:25,920 --> 00:16:30,079
security on top of this this interface

406
00:16:27,600 --> 00:16:36,240
for the enclave

407
00:16:30,079 --> 00:16:38,479
um okay so let's move to a quick demo

408
00:16:36,240 --> 00:16:39,600
here uh one of the tools that is

409
00:16:38,480 --> 00:16:41,040
available is just you know

410
00:16:39,600 --> 00:16:42,880
checking if your system is configured

411
00:16:41,040 --> 00:16:45,920
correctly to run sgx

412
00:16:42,880 --> 00:16:47,439
right so it says sgx detect tool uh and

413
00:16:45,920 --> 00:16:48,959
it will just check everything do i have

414
00:16:47,440 --> 00:16:49,600
it enabled in the bios do i have the

415
00:16:48,959 --> 00:16:51,040
right

416
00:16:49,600 --> 00:16:52,959
system software installed to have the

417
00:16:51,040 --> 00:16:56,719
driver all that stuff

418
00:16:52,959 --> 00:16:59,439
um then here it looks like we're not

419
00:16:56,720 --> 00:17:03,600
running a piece that's needed

420
00:16:59,440 --> 00:17:05,199
on on older systems so you know intel uh

421
00:17:03,600 --> 00:17:05,599
i'll get to that in a bit so we'll just

422
00:17:05,199 --> 00:17:07,280
start

423
00:17:05,599 --> 00:17:08,719
start the software that's not running

424
00:17:07,280 --> 00:17:10,480
and then if you run it again

425
00:17:08,720 --> 00:17:12,799
you can see okay you know i was able to

426
00:17:10,480 --> 00:17:16,079
launch enclaves good you're good to go

427
00:17:12,799 --> 00:17:19,280
um so why do you need this aesm service

428
00:17:16,079 --> 00:17:22,559
well on intel processors before like

429
00:17:19,280 --> 00:17:24,720
late 2018 uh there was actually like a

430
00:17:22,559 --> 00:17:26,079
drm built into sgx so you couldn't run

431
00:17:24,720 --> 00:17:27,760
your own software but that's all gone

432
00:17:26,079 --> 00:17:29,280
now if you buy a new enough processor

433
00:17:27,760 --> 00:17:33,840
you can run whatever enclaves you want

434
00:17:29,280 --> 00:17:33,840
without intel's whitelist

435
00:17:35,520 --> 00:17:40,080
okay so let's run some actual enclave

436
00:17:37,520 --> 00:17:40,080
code right

437
00:17:41,440 --> 00:17:45,120
so i'll just do a simple hello world

438
00:17:43,120 --> 00:17:47,039
demo here first right so i'll just you

439
00:17:45,120 --> 00:17:50,159
know write a standard

440
00:17:47,039 --> 00:17:52,480
hello world um

441
00:17:50,160 --> 00:17:53,760
it you know it's just the standard thing

442
00:17:52,480 --> 00:17:54,960
you get when you start first start a

443
00:17:53,760 --> 00:17:58,640
rust project

444
00:17:54,960 --> 00:18:01,200
uh main function print hello okay

445
00:17:58,640 --> 00:18:01,760
run it so i just ran it for linux cargo

446
00:18:01,200 --> 00:18:03,679
run

447
00:18:01,760 --> 00:18:05,120
because i i was running this on linux

448
00:18:03,679 --> 00:18:07,440
right so

449
00:18:05,120 --> 00:18:09,199
uh but now i'll just run it on sjx so

450
00:18:07,440 --> 00:18:11,360
all i need to do is specify that i'm

451
00:18:09,200 --> 00:18:14,960
cross compiling to a different target

452
00:18:11,360 --> 00:18:18,320
uh the uh botanics on osgx target

453
00:18:14,960 --> 00:18:19,360
run it boom okay so the command to print

454
00:18:18,320 --> 00:18:22,159
hello world

455
00:18:19,360 --> 00:18:25,600
to to the screen here that actually was

456
00:18:22,160 --> 00:18:25,600
came from inside the enclave

457
00:18:32,799 --> 00:18:36,400
yeah yeah yeah so in this in this this

458
00:18:35,200 --> 00:18:39,280
this is really fast

459
00:18:36,400 --> 00:18:40,080
uh in the next video i have sped up the

460
00:18:39,280 --> 00:18:41,760
compilation

461
00:18:40,080 --> 00:18:43,840
a bit but this this is this is actually

462
00:18:41,760 --> 00:18:48,480
how how fast it is

463
00:18:43,840 --> 00:18:48,480
it really is yeah um yeah

464
00:18:49,440 --> 00:18:54,400
um okay so uh well but

465
00:18:52,559 --> 00:18:56,480
this is just a hello world program i

466
00:18:54,400 --> 00:18:58,640
told you i was wanted to write net

467
00:18:56,480 --> 00:18:59,760
like network services so let's let's do

468
00:18:58,640 --> 00:19:03,440
that right

469
00:18:59,760 --> 00:19:07,440
um i'm going to use the hyper library

470
00:19:03,440 --> 00:19:10,640
which is a standard way sorry

471
00:19:07,440 --> 00:19:13,679
nope i'm not using the rocket library

472
00:19:10,640 --> 00:19:16,960
which is a way to write

473
00:19:13,679 --> 00:19:16,960
web applications in rust

474
00:19:17,520 --> 00:19:20,960
and then while i'm editing this file to

475
00:19:19,120 --> 00:19:22,719
add the rocket dependency to my project

476
00:19:20,960 --> 00:19:24,320
i'm also going to configure

477
00:19:22,720 --> 00:19:27,440
that i want a certain number of threads

478
00:19:24,320 --> 00:19:27,439
so in

479
00:19:27,840 --> 00:19:31,360
version 1 of sgx there's a maximum

480
00:19:30,000 --> 00:19:32,559
number of threads that you have to

481
00:19:31,360 --> 00:19:35,199
specify

482
00:19:32,559 --> 00:19:35,200
at build time

483
00:19:36,640 --> 00:19:42,000
okay so uh yeah in order to uh to use

484
00:19:39,919 --> 00:19:45,440
rocket you need to enable some some

485
00:19:42,000 --> 00:19:47,840
features in rust um i'm gonna

486
00:19:45,440 --> 00:19:49,600
import the uh the rocket crate the crate

487
00:19:47,840 --> 00:19:52,720
is basically what what does a

488
00:19:49,600 --> 00:19:53,600
library in other languages so i'm just

489
00:19:52,720 --> 00:19:56,960
defining the

490
00:19:53,600 --> 00:19:58,639
slash hello endpoint for my api

491
00:19:56,960 --> 00:20:02,400
right because we're doing hello world

492
00:19:58,640 --> 00:20:02,400
here so instead of

493
00:20:03,760 --> 00:20:06,799
printing it to the screen i'm just going

494
00:20:05,039 --> 00:20:09,120
to return hello role you know as the

495
00:20:06,799 --> 00:20:11,280
output of my api here

496
00:20:09,120 --> 00:20:12,479
and then in my main function i'm just

497
00:20:11,280 --> 00:20:15,760
going to run

498
00:20:12,480 --> 00:20:21,840
the uh the web server with this one end

499
00:20:15,760 --> 00:20:21,840
point here

500
00:20:26,159 --> 00:20:30,400
yeah no uh depends on what you do right

501
00:20:29,760 --> 00:20:31,919
so

502
00:20:30,400 --> 00:20:34,159
here the question was you don't need to

503
00:20:31,919 --> 00:20:36,640
use macro use anymore

504
00:20:34,159 --> 00:20:38,640
macro uses you need it if you don't

505
00:20:36,640 --> 00:20:40,400
explicitly import the macro you're using

506
00:20:38,640 --> 00:20:42,960
using a use statement

507
00:20:40,400 --> 00:20:45,360
so macro use is like a blanket import of

508
00:20:42,960 --> 00:20:48,559
all macros from a rust crate

509
00:20:45,360 --> 00:20:50,479
yeah okay so uh

510
00:20:48,559 --> 00:20:52,158
it's compiled it like i said this was a

511
00:20:50,480 --> 00:20:55,440
little bit sped up but uh you know

512
00:20:52,159 --> 00:20:58,799
you can see it's running uh on port 8000

513
00:20:55,440 --> 00:21:01,840
um and uh yeah so

514
00:20:58,799 --> 00:21:03,039
um that's it right we just uh we just

515
00:21:01,840 --> 00:21:05,199
built a web server

516
00:21:03,039 --> 00:21:07,120
a web web application that's completely

517
00:21:05,200 --> 00:21:07,760
contained in the enclave running in

518
00:21:07,120 --> 00:21:16,158
inside

519
00:21:07,760 --> 00:21:19,120
an osgx enclave yeah

520
00:21:16,159 --> 00:21:20,640
so uh cargo uh i think normally it will

521
00:21:19,120 --> 00:21:21,918
uh so so all these crates can be

522
00:21:20,640 --> 00:21:24,000
compiled in parallel

523
00:21:21,919 --> 00:21:25,679
uh well depending on how your dependency

524
00:21:24,000 --> 00:21:26,960
tree looks right so it will just fill up

525
00:21:25,679 --> 00:21:29,440
your uh

526
00:21:26,960 --> 00:21:31,679
your your cpus but but sorry so this was

527
00:21:29,440 --> 00:21:33,600
sped up because you know i don't want to

528
00:21:31,679 --> 00:21:36,480
wait here during my presentation for

529
00:21:33,600 --> 00:21:36,480
everything to compile

530
00:21:40,480 --> 00:21:44,799
uh so this uh this was actually doing a

531
00:21:42,720 --> 00:21:47,679
plain text response uh so yeah i was

532
00:21:44,799 --> 00:21:50,720
just returning a string um so in in

533
00:21:47,679 --> 00:21:51,919
in rust uh um

534
00:21:50,720 --> 00:21:53,760
there's difference between like

535
00:21:51,919 --> 00:21:56,159
references and owned objects so

536
00:21:53,760 --> 00:21:58,799
um that's that's why that was there i'll

537
00:21:56,159 --> 00:22:12,000
talk about more later yeah

538
00:21:58,799 --> 00:22:14,240
uh any other questions so far

539
00:22:12,000 --> 00:22:16,480
yeah well i i wouldn't necessarily call

540
00:22:14,240 --> 00:22:21,039
it serialization deserialization

541
00:22:16,480 --> 00:22:22,720
um right so so um

542
00:22:21,039 --> 00:22:24,240
there's a special calling convention

543
00:22:22,720 --> 00:22:27,280
that is defined

544
00:22:24,240 --> 00:22:28,320
um and um that has

545
00:22:27,280 --> 00:22:31,200
a

546
00:22:28,320 --> 00:22:33,678
[Applause]

547
00:22:31,200 --> 00:22:35,200
uh like a bunch of calls defined uh

548
00:22:33,679 --> 00:22:37,120
right so this is the full list of all

549
00:22:35,200 --> 00:22:38,559
the uh what is called user calls

550
00:22:37,120 --> 00:22:41,039
right so when the enclave needs to call

551
00:22:38,559 --> 00:22:43,440
out it needs to go to user space

552
00:22:41,039 --> 00:22:45,440
so i call the user call and then right

553
00:22:43,440 --> 00:22:46,960
you can then forward that to the system

554
00:22:45,440 --> 00:22:48,960
right so this is this is the whole list

555
00:22:46,960 --> 00:22:52,240
of all the user calls that is supported

556
00:22:48,960 --> 00:22:52,880
right now um and this is like sufficient

557
00:22:52,240 --> 00:22:56,400
to build

558
00:22:52,880 --> 00:22:58,960
basically any network service um

559
00:22:56,400 --> 00:22:59,440
yeah so you have the standard primitives

560
00:22:58,960 --> 00:23:01,200
like

561
00:22:59,440 --> 00:23:02,960
read write and you know there's some

562
00:23:01,200 --> 00:23:06,799
networking stuff to to

563
00:23:02,960 --> 00:23:08,720
open streams and then some some

564
00:23:06,799 --> 00:23:09,840
event management and some some memory

565
00:23:08,720 --> 00:23:13,520
management and then

566
00:23:09,840 --> 00:23:13,520
that's basically basically it

567
00:23:14,320 --> 00:23:23,840
uh yo um

568
00:23:25,679 --> 00:23:28,799
yeah yeah so so the the example that i

569
00:23:27,600 --> 00:23:32,559
just showed was

570
00:23:28,799 --> 00:23:36,320
uh unencrypted http um

571
00:23:32,559 --> 00:23:37,918
right so if you depending on like

572
00:23:36,320 --> 00:23:40,720
your security model you probably you

573
00:23:37,919 --> 00:23:43,200
might want to use https instead

574
00:23:40,720 --> 00:23:43,200
but yeah

575
00:23:46,159 --> 00:23:48,400
well

576
00:23:49,520 --> 00:23:54,720
it depends uh right so when you're

577
00:23:52,799 --> 00:23:56,650
running a network

578
00:23:54,720 --> 00:23:57,760
server you might

579
00:23:56,650 --> 00:24:01,200
[Music]

580
00:23:57,760 --> 00:24:03,279
in addition to like all the protected

581
00:24:01,200 --> 00:24:05,200
apis that you want to do over tls you

582
00:24:03,279 --> 00:24:05,600
might have some management apis like you

583
00:24:05,200 --> 00:24:08,000
know

584
00:24:05,600 --> 00:24:10,240
stop the server or something like that

585
00:24:08,000 --> 00:24:12,000
uh right so there's no security needed

586
00:24:10,240 --> 00:24:14,720
because that's

587
00:24:12,000 --> 00:24:16,400
availability is out of scope right so

588
00:24:14,720 --> 00:24:18,240
that can just be given by anyone who has

589
00:24:16,400 --> 00:24:19,760
access to the host system

590
00:24:18,240 --> 00:24:22,080
and so then you can you could do that

591
00:24:19,760 --> 00:24:24,240
over http instead of https because

592
00:24:22,080 --> 00:24:25,840
yeah that doesn't really matter right

593
00:24:24,240 --> 00:24:28,640
but then you wouldn't want to

594
00:24:25,840 --> 00:24:29,199
expose that over the network probably um

595
00:24:28,640 --> 00:24:33,039
right

596
00:24:29,200 --> 00:24:33,039
yeah i suppose

597
00:24:34,799 --> 00:24:39,360
yeah you could use a reverse proxy of

598
00:24:36,320 --> 00:24:43,120
course but you know as soon as you

599
00:24:39,360 --> 00:24:44,639
um if you want to use um

600
00:24:43,120 --> 00:24:46,000
if you're planning on using tls for

601
00:24:44,640 --> 00:24:47,760
security right you want the tls

602
00:24:46,000 --> 00:24:48,559
connection to be terminated inside the

603
00:24:47,760 --> 00:24:50,799
enclave

604
00:24:48,559 --> 00:24:52,399
uh because otherwise you get you can

605
00:24:50,799 --> 00:25:00,240
easily do a man-in-the-middle attack

606
00:24:52,400 --> 00:25:01,360
between the proxy and the enclave you do

607
00:25:00,240 --> 00:25:04,400
use

608
00:25:01,360 --> 00:25:07,279
ssl you're going to have to create a

609
00:25:04,400 --> 00:25:07,760
certificate belonging to the end play

610
00:25:07,279 --> 00:25:10,159
yeah

611
00:25:07,760 --> 00:25:11,679
and i assume that at this point you do

612
00:25:10,159 --> 00:25:15,039
have to do the complexity

613
00:25:11,679 --> 00:25:15,039
to validate the thing that

614
00:25:16,640 --> 00:25:20,000
yeah yeah so there's two different way

615
00:25:18,799 --> 00:25:20,720
there's a couple different ways you can

616
00:25:20,000 --> 00:25:22,799
go about it

617
00:25:20,720 --> 00:25:24,960
oh uh sorry i'll repeat the question the

618
00:25:22,799 --> 00:25:28,080
question was um

619
00:25:24,960 --> 00:25:29,440
uh i showed a slide about you know

620
00:25:28,080 --> 00:25:32,879
issuing certificates

621
00:25:29,440 --> 00:25:34,799
um at certificate issuance time do you

622
00:25:32,880 --> 00:25:35,760
need to do like any complex validation

623
00:25:34,799 --> 00:25:39,039
yeah so

624
00:25:35,760 --> 00:25:41,200
um you could uh like one

625
00:25:39,039 --> 00:25:43,600
approach you can take is that your ca is

626
00:25:41,200 --> 00:25:45,440
in charge of checking at the station so

627
00:25:43,600 --> 00:25:46,879
uh then you need to make sure that you

628
00:25:45,440 --> 00:25:49,039
know when you get your

629
00:25:46,880 --> 00:25:49,919
certificate signing request it contains

630
00:25:49,039 --> 00:25:51,919
a an

631
00:25:49,919 --> 00:25:53,600
extension that you know also includes

632
00:25:51,919 --> 00:25:55,200
includes the attestation

633
00:25:53,600 --> 00:25:56,799
that might include the public key and

634
00:25:55,200 --> 00:25:58,080
you verify that the public key is the

635
00:25:56,799 --> 00:25:59,679
same as the public key and the

636
00:25:58,080 --> 00:26:01,678
certificate signing request you verify

637
00:25:59,679 --> 00:26:03,120
the attestation you verify that

638
00:26:01,679 --> 00:26:04,799
against the list of software that you

639
00:26:03,120 --> 00:26:07,279
trust or something like that

640
00:26:04,799 --> 00:26:08,480
and then only then you actually issued a

641
00:26:07,279 --> 00:26:10,960
certificate

642
00:26:08,480 --> 00:26:12,640
that's one way you can do that um there

643
00:26:10,960 --> 00:26:13,279
there's other ways where you can like

644
00:26:12,640 --> 00:26:15,760
publish

645
00:26:13,279 --> 00:26:16,880
all the attestations in like a public

646
00:26:15,760 --> 00:26:19,679
repository

647
00:26:16,880 --> 00:26:22,000
um so that clients can go and check that

648
00:26:19,679 --> 00:26:25,840
in addition to checking the certificate

649
00:26:22,000 --> 00:26:25,840
um but uh yeah

650
00:26:29,360 --> 00:26:34,000
um so uh

651
00:26:32,480 --> 00:26:36,080
no currently we don't really have any

652
00:26:34,000 --> 00:26:39,200
any plans on on having

653
00:26:36,080 --> 00:26:42,639
uh that kind of functionality uh

654
00:26:39,200 --> 00:26:44,960
as part of the uh this project yeah

655
00:26:42,640 --> 00:26:44,960
um

656
00:26:46,080 --> 00:26:51,360
um right i mean the we do have the the

657
00:26:49,440 --> 00:26:53,200
the standard attestation primitives

658
00:26:51,360 --> 00:26:54,639
that you get from into sgx and like how

659
00:26:53,200 --> 00:26:58,000
you can use those um

660
00:26:54,640 --> 00:27:00,320
and um yeah but no

661
00:26:58,000 --> 00:27:02,559
like ca server or something like that

662
00:27:00,320 --> 00:27:02,559
yeah

663
00:27:02,799 --> 00:27:10,400
uh it depends on on uh

664
00:27:06,880 --> 00:27:14,080
yeah i mean uh

665
00:27:10,400 --> 00:27:15,120
depends on like how complex the policies

666
00:27:14,080 --> 00:27:18,240
you want

667
00:27:15,120 --> 00:27:18,239
are yeah

668
00:27:18,960 --> 00:27:22,399
you basically don't um the server

669
00:27:20,320 --> 00:27:25,439
environment because it's running

670
00:27:22,399 --> 00:27:27,840
yeah and you assume that putting a

671
00:27:25,440 --> 00:27:30,320
private key in private storage that only

672
00:27:27,840 --> 00:27:31,678
the actual sdx

673
00:27:30,320 --> 00:27:34,639
makes it secure right that's the whole

674
00:27:31,679 --> 00:27:38,480
fundamental concept of

675
00:27:34,640 --> 00:27:40,640
uh given all of the abilities to extract

676
00:27:38,480 --> 00:27:43,360
data from sgx these days

677
00:27:40,640 --> 00:27:44,720
does that all true yeah so that's a good

678
00:27:43,360 --> 00:27:46,639
question you know we have seen a lot of

679
00:27:44,720 --> 00:27:48,399
vulnerabilities

680
00:27:46,640 --> 00:27:49,840
oh yeah sorry you're right sorry i'll

681
00:27:48,399 --> 00:27:52,080
repeat the question okay so we're

682
00:27:49,840 --> 00:27:55,120
putting a private key inside the enclave

683
00:27:52,080 --> 00:27:55,918
um given all the attacks we've seen on

684
00:27:55,120 --> 00:27:57,439
sgx

685
00:27:55,919 --> 00:27:58,880
you know do you think it's reasonable to

686
00:27:57,440 --> 00:27:59,600
expect that you can actually keep the

687
00:27:58,880 --> 00:28:02,960
private on

688
00:27:59,600 --> 00:28:04,559
sorry your private key secure um

689
00:28:02,960 --> 00:28:06,080
yeah so there there have been lots of

690
00:28:04,559 --> 00:28:08,960
attacks uh but

691
00:28:06,080 --> 00:28:09,600
generally um they've been able to be

692
00:28:08,960 --> 00:28:12,240
patched

693
00:28:09,600 --> 00:28:12,879
with microcode updates um actually there

694
00:28:12,240 --> 00:28:17,840
was a

695
00:28:12,880 --> 00:28:17,840
some report earlier this week uh on

696
00:28:18,559 --> 00:28:24,399
on on on with the cash out attack

697
00:28:22,240 --> 00:28:25,360
but if you go read the paper you can see

698
00:28:24,399 --> 00:28:26,799
that the

699
00:28:25,360 --> 00:28:29,600
the researchers had hyper threading

700
00:28:26,799 --> 00:28:32,559
enabled which you know is no longer

701
00:28:29,600 --> 00:28:34,240
kind of if you use remote at the station

702
00:28:32,559 --> 00:28:36,080
with sgx if you have hyper trading

703
00:28:34,240 --> 00:28:38,799
enabled it will no longer pass

704
00:28:36,080 --> 00:28:39,760
remote at the station so uh that's the

705
00:28:38,799 --> 00:28:41,360
the

706
00:28:39,760 --> 00:28:43,039
i believe that the attack that the

707
00:28:41,360 --> 00:28:45,840
attack that was shown last week it

708
00:28:43,039 --> 00:28:48,960
doesn't actually work against the

709
00:28:45,840 --> 00:28:49,520
standard sjx environment anymore um so

710
00:28:48,960 --> 00:28:51,200
so

711
00:28:49,520 --> 00:28:53,120
but to get back to your question yeah

712
00:28:51,200 --> 00:28:54,640
you like once an attack is discovered of

713
00:28:53,120 --> 00:28:55,840
course you can leverage it to extract a

714
00:28:54,640 --> 00:28:58,640
private key so

715
00:28:55,840 --> 00:29:00,399
sgx has this tcb recovery mechanism

716
00:28:58,640 --> 00:29:02,320
right where you need to

717
00:29:00,399 --> 00:29:03,600
basically update to the latest version

718
00:29:02,320 --> 00:29:05,840
of everything and then

719
00:29:03,600 --> 00:29:07,360
provision some new keys so you can do

720
00:29:05,840 --> 00:29:08,879
the same thing here

721
00:29:07,360 --> 00:29:11,840
all right so you need to use short-lived

722
00:29:08,880 --> 00:29:13,679
certificates but that's that's already

723
00:29:11,840 --> 00:29:15,120
standard practice these days right so if

724
00:29:13,679 --> 00:29:15,919
you use like let's encrypt or something

725
00:29:15,120 --> 00:29:17,918
like that

726
00:29:15,919 --> 00:29:19,360
you know that uh if you keep patching

727
00:29:17,919 --> 00:29:20,320
everything you know within three months

728
00:29:19,360 --> 00:29:22,639
you'll have a

729
00:29:20,320 --> 00:29:27,840
valid certificate again for for like the

730
00:29:22,640 --> 00:29:27,840
latest updates

731
00:29:36,399 --> 00:29:43,279
um so yes somehow

732
00:29:40,159 --> 00:29:45,520
right so um if you can tie the

733
00:29:43,279 --> 00:29:45,520
the

734
00:29:52,399 --> 00:29:59,199
so the microcode version is uh

735
00:29:55,840 --> 00:30:01,520
checked as part of remote attestation um

736
00:29:59,200 --> 00:30:03,279
right so as long as you know that you

737
00:30:01,520 --> 00:30:04,399
have a new enough remote at the station

738
00:30:03,279 --> 00:30:05,760
that is valid

739
00:30:04,399 --> 00:30:07,918
uh then you know you were on a new

740
00:30:05,760 --> 00:30:09,679
enough microcode so you need to buy yeah

741
00:30:07,919 --> 00:30:12,640
that's so you just need to get a new

742
00:30:09,679 --> 00:30:14,559
gls private key and then you're good so

743
00:30:12,640 --> 00:30:18,960
um

744
00:30:14,559 --> 00:30:19,520
right so so you need to build somewhere

745
00:30:18,960 --> 00:30:21,520
in your

746
00:30:19,520 --> 00:30:22,720
in your trust verification mechanism to

747
00:30:21,520 --> 00:30:24,720
ensure that you know

748
00:30:22,720 --> 00:30:26,240
there's a way to get like that at the

749
00:30:24,720 --> 00:30:29,120
station that was used for this private

750
00:30:26,240 --> 00:30:29,120
key is not too old

751
00:30:29,520 --> 00:30:32,399
uh sorry i forgot to repeat the question

752
00:30:31,200 --> 00:30:36,240
but i think it might have been clear

753
00:30:32,399 --> 00:30:38,479
from context

754
00:30:36,240 --> 00:30:38,480
okay

755
00:30:39,870 --> 00:30:43,929
[Music]

756
00:30:47,039 --> 00:30:53,840
um possibly so currently

757
00:30:50,240 --> 00:30:54,640
um there's not a lot of off-the-shelf

758
00:30:53,840 --> 00:30:56,240
hardware

759
00:30:54,640 --> 00:30:58,880
available with with security

760
00:30:56,240 --> 00:31:02,480
capabilities are as good as sgx

761
00:30:58,880 --> 00:31:05,200
um right so sgx gives you

762
00:31:02,480 --> 00:31:06,240
like integrity protected uh memory

763
00:31:05,200 --> 00:31:08,480
encryption

764
00:31:06,240 --> 00:31:11,039
so you really only have to uh to trust

765
00:31:08,480 --> 00:31:12,240
the the the one cpu chip and not like

766
00:31:11,039 --> 00:31:14,080
the rest of the motherboard and the

767
00:31:12,240 --> 00:31:17,760
supply chain and everything

768
00:31:14,080 --> 00:31:18,480
uh it gives you um multiplexing right so

769
00:31:17,760 --> 00:31:20,240
multiple

770
00:31:18,480 --> 00:31:22,720
secure enclaves that are isolated from

771
00:31:20,240 --> 00:31:24,960
each other as well

772
00:31:22,720 --> 00:31:26,240
and um yeah so if you look at other

773
00:31:24,960 --> 00:31:29,279
technologies like

774
00:31:26,240 --> 00:31:31,279
trustzone or the recently announced amd

775
00:31:29,279 --> 00:31:33,679
suv smp

776
00:31:31,279 --> 00:31:34,799
you just don't quite get get there yet

777
00:31:33,679 --> 00:31:37,760
um but

778
00:31:34,799 --> 00:31:38,559
uh you know once once it makes sense to

779
00:31:37,760 --> 00:31:40,480
to support

780
00:31:38,559 --> 00:31:42,000
uh new cool technologies that are

781
00:31:40,480 --> 00:31:43,679
probably gonna come out uh yeah i'll

782
00:31:42,000 --> 00:31:45,679
definitely look at it

783
00:31:43,679 --> 00:31:46,880
all right so the goal is to do the same

784
00:31:45,679 --> 00:31:49,919
thing

785
00:31:46,880 --> 00:31:52,159
uh uh do the same thing

786
00:31:49,919 --> 00:31:53,200
right where we just you know make it

787
00:31:52,159 --> 00:31:55,760
make a small

788
00:31:53,200 --> 00:31:58,000
like run run the same code in in the

789
00:31:55,760 --> 00:32:02,240
enclave and have like a small proxy

790
00:31:58,000 --> 00:32:02,240
um yeah just to run the same thing

791
00:32:02,320 --> 00:32:06,000
um yeah so sorry the question was should

792
00:32:05,120 --> 00:32:08,000
i support

793
00:32:06,000 --> 00:32:09,480
or are we going to support other ocular

794
00:32:08,000 --> 00:32:12,720
technologies

795
00:32:09,480 --> 00:32:12,720
[Applause]

796
00:32:12,960 --> 00:32:19,440
uh okay so um

797
00:32:16,399 --> 00:32:19,439
am i doing one time

798
00:32:20,320 --> 00:32:26,240
five minutes okay so uh um

799
00:32:23,840 --> 00:32:28,080
i just gonna show you real quick uh the

800
00:32:26,240 --> 00:32:30,799
next step right i just showed a very

801
00:32:28,080 --> 00:32:31,840
simple api but now i want to do some

802
00:32:30,799 --> 00:32:34,399
some json

803
00:32:31,840 --> 00:32:35,600
computation types thing so i'm going to

804
00:32:34,399 --> 00:32:38,639
add um

805
00:32:35,600 --> 00:32:41,039
add some dependencies on 3030 is

806
00:32:38,640 --> 00:32:42,080
rust's serialization deserialization

807
00:32:41,039 --> 00:32:45,440
framework

808
00:32:42,080 --> 00:32:47,519
it's uh i would say the best way to do

809
00:32:45,440 --> 00:32:49,120
to serialize data in any language it's

810
00:32:47,519 --> 00:32:51,919
it's it works really

811
00:32:49,120 --> 00:32:56,239
conveniently and easy and interacts very

812
00:32:51,919 --> 00:32:58,000
well with the type system

813
00:32:56,240 --> 00:32:59,919
so yeah i'm just going to import these

814
00:32:58,000 --> 00:33:01,440
extra crates that i added as

815
00:32:59,919 --> 00:33:04,480
dependencies

816
00:33:01,440 --> 00:33:08,320
and then i'm going to define a type

817
00:33:04,480 --> 00:33:08,320
uh i'm going to import some more stuff

818
00:33:08,840 --> 00:33:11,840
um

819
00:33:14,320 --> 00:33:17,678
yeah so i'm gonna i'm gonna going to

820
00:33:16,480 --> 00:33:19,919
define a type

821
00:33:17,679 --> 00:33:20,799
that implements deserialize right so

822
00:33:19,919 --> 00:33:23,760
i'll be able to

823
00:33:20,799 --> 00:33:24,000
to turn json into this type the type is

824
00:33:23,760 --> 00:33:25,840
called

825
00:33:24,000 --> 00:33:27,440
two vectors which means i'm going to

826
00:33:25,840 --> 00:33:30,720
call hold two

827
00:33:27,440 --> 00:33:33,679
vectors in the mathematical sense um

828
00:33:30,720 --> 00:33:34,159
and um because uh the function i'm gonna

829
00:33:33,679 --> 00:33:38,640
implement

830
00:33:34,159 --> 00:33:42,080
is the dot dot product right so uh

831
00:33:38,640 --> 00:33:42,720
i'm gonna pass in uh two vectors in json

832
00:33:42,080 --> 00:33:44,320
and then

833
00:33:42,720 --> 00:33:46,159
compute the dot product and output it

834
00:33:44,320 --> 00:33:50,158
again so oh

835
00:33:46,159 --> 00:33:50,159
sorry i said i meant cross product

836
00:33:51,039 --> 00:33:56,480
um right so i just i just have to define

837
00:33:54,399 --> 00:33:58,080
the api here so the previous api was

838
00:33:56,480 --> 00:33:59,360
that slash hello this one is at slash

839
00:33:58,080 --> 00:34:01,199
cross

840
00:33:59,360 --> 00:34:03,199
as input i'm going to take this json

841
00:34:01,200 --> 00:34:05,840
value

842
00:34:03,200 --> 00:34:06,480
of type 2 vectors and i'm going to

843
00:34:05,840 --> 00:34:10,319
output

844
00:34:06,480 --> 00:34:13,119
json value again and then

845
00:34:10,320 --> 00:34:13,119
i just need to

846
00:34:14,000 --> 00:34:18,800
kind of get these two values a and b

847
00:34:16,320 --> 00:34:22,480
from the json

848
00:34:18,800 --> 00:34:25,200
from the input compute the uh

849
00:34:22,480 --> 00:34:26,240
compute the cross product the output and

850
00:34:25,199 --> 00:34:30,239
then uh

851
00:34:26,239 --> 00:34:31,839
yeah send that on back to the client

852
00:34:30,239 --> 00:34:35,839
uh so this is going to be like maybe

853
00:34:31,839 --> 00:34:35,839
like another 10 lines of code or so

854
00:34:35,918 --> 00:34:40,879
so here i need to figure out what the

855
00:34:39,760 --> 00:34:44,159
right

856
00:34:40,879 --> 00:34:44,159
elements are to multiply

857
00:34:45,119 --> 00:34:49,839
don't worry i'm coming back to to change

858
00:34:47,040 --> 00:34:49,839
the indices

859
00:34:55,100 --> 00:34:58,469
[Music]

860
00:35:09,200 --> 00:35:12,960
and then last thing i just need to add

861
00:35:11,920 --> 00:35:14,960
the

862
00:35:12,960 --> 00:35:16,800
api to the list of apis that my web

863
00:35:14,960 --> 00:35:20,320
server supports

864
00:35:16,800 --> 00:35:23,200
okay save quit

865
00:35:20,320 --> 00:35:23,200
compile run

866
00:35:26,079 --> 00:35:28,320
okay

867
00:35:29,599 --> 00:35:34,160
so yeah i'm just running compiling the

868
00:35:32,079 --> 00:35:36,880
rest

869
00:35:34,160 --> 00:35:40,000
normally uh on my laptop this takes

870
00:35:36,880 --> 00:35:40,000
about five minutes so you know

871
00:35:43,119 --> 00:35:50,960
but here we're on uh presentation time

872
00:35:46,880 --> 00:35:53,520
uh so yeah i mean here again i'm just

873
00:35:50,960 --> 00:35:55,440
running the api with some input data and

874
00:35:53,520 --> 00:35:57,680
then we'll see that it works

875
00:35:55,440 --> 00:35:59,359
you know defensive security demo is

876
00:35:57,680 --> 00:36:00,480
always so boring because it's just you

877
00:35:59,359 --> 00:36:02,880
know you should just show that something

878
00:36:00,480 --> 00:36:02,880
is working

879
00:36:03,119 --> 00:36:08,320
um yeah well there we go the cross

880
00:36:06,640 --> 00:36:10,879
product of one two three and four five

881
00:36:08,320 --> 00:36:13,760
six is minus three six minus three

882
00:36:10,880 --> 00:36:14,720
uh computed inside an enclave so if you

883
00:36:13,760 --> 00:36:16,400
had a more

884
00:36:14,720 --> 00:36:17,680
sensitive computation where you wanted

885
00:36:16,400 --> 00:36:19,040
to be sure that it was correct and you

886
00:36:17,680 --> 00:36:27,839
couldn't do it on the client you might

887
00:36:19,040 --> 00:36:27,839
you might use this

888
00:36:29,680 --> 00:36:42,078
uh sorry can you repeat the questions

889
00:36:40,079 --> 00:36:43,200
okay uh the question is why shouldn't we

890
00:36:42,079 --> 00:36:44,880
use this

891
00:36:43,200 --> 00:36:46,000
this this framework is very big and we

892
00:36:44,880 --> 00:36:46,400
should you shouldn't use it because of

893
00:36:46,000 --> 00:36:49,760
that

894
00:36:46,400 --> 00:36:51,839
um um so

895
00:36:49,760 --> 00:36:53,200
um you know you have to make certain

896
00:36:51,839 --> 00:36:54,560
trade-offs when you're building security

897
00:36:53,200 --> 00:36:57,439
software

898
00:36:54,560 --> 00:36:57,440
i think here

899
00:36:58,560 --> 00:37:02,160
letting the programmer use familiar

900
00:37:00,320 --> 00:37:04,240
primitives that are familiar to them

901
00:37:02,160 --> 00:37:06,160
lets them folk like build software in a

902
00:37:04,240 --> 00:37:08,560
more in a

903
00:37:06,160 --> 00:37:09,680
more common way um right so that makes

904
00:37:08,560 --> 00:37:12,480
it more accessible

905
00:37:09,680 --> 00:37:13,919
to people so people you know they might

906
00:37:12,480 --> 00:37:15,040
they might have some familiarity with

907
00:37:13,920 --> 00:37:16,960
like building a

908
00:37:15,040 --> 00:37:19,839
web service with an api that is somewhat

909
00:37:16,960 --> 00:37:22,000
secure and so this lets them do that

910
00:37:19,839 --> 00:37:23,119
uh yeah you get you get a slightly

911
00:37:22,000 --> 00:37:26,640
larger tcp

912
00:37:23,119 --> 00:37:28,640
um but um

913
00:37:26,640 --> 00:37:30,078
you know i think that's that's uh

914
00:37:28,640 --> 00:37:33,200
countered by

915
00:37:30,079 --> 00:37:36,320
uh like the the using the rust language

916
00:37:33,200 --> 00:37:38,319
uh having a very well defined and

917
00:37:36,320 --> 00:37:39,520
interface that is very small and and

918
00:37:38,320 --> 00:37:45,280
interpretable

919
00:37:39,520 --> 00:37:45,280
uh yeah so any other questions

920
00:37:48,720 --> 00:37:52,640
oh uh yeah so in terms of future

921
00:37:50,960 --> 00:37:55,920
developments uh

922
00:37:52,640 --> 00:37:57,440
there was a so i uh uh mentioned you

923
00:37:55,920 --> 00:37:59,599
know support for upcoming features in

924
00:37:57,440 --> 00:38:01,920
sgx and rust and binary analysis

925
00:37:59,599 --> 00:38:03,359
already uh in the future we might

926
00:38:01,920 --> 00:38:04,960
support you know different platforms

927
00:38:03,359 --> 00:38:08,799
when when those are

928
00:38:04,960 --> 00:38:09,680
uh you know have grown up to be as good

929
00:38:08,800 --> 00:38:13,440
as sgx

930
00:38:09,680 --> 00:38:13,440
uh and uh yeah

931
00:38:13,680 --> 00:38:17,200
okay yes so should there be other

932
00:38:15,839 --> 00:38:19,119
architectures that actually have an

933
00:38:17,200 --> 00:38:20,960
enclave similar to yours yes there

934
00:38:19,119 --> 00:38:23,040
should be

935
00:38:20,960 --> 00:38:24,320
i assume that there should be a process

936
00:38:23,040 --> 00:38:25,759
in place where the

937
00:38:24,320 --> 00:38:27,680
people behind the software support for

938
00:38:25,760 --> 00:38:28,320
that can get in touch with the rust

939
00:38:27,680 --> 00:38:32,720
community

940
00:38:28,320 --> 00:38:32,720
and youth or similar people

941
00:38:38,079 --> 00:38:44,720
uh okay so uh the question is um

942
00:38:41,440 --> 00:38:46,560
if there are uh you know new

943
00:38:44,720 --> 00:38:48,319
architectures that want like similar

944
00:38:46,560 --> 00:38:50,320
support for this type of enclaves in

945
00:38:48,320 --> 00:38:51,200
rust uh how should they go about doing

946
00:38:50,320 --> 00:38:54,079
that

947
00:38:51,200 --> 00:38:56,960
um yeah so the rust uh community uh is

948
00:38:54,079 --> 00:39:00,160
basically just pull request based

949
00:38:56,960 --> 00:39:02,960
um no no

950
00:39:00,160 --> 00:39:04,240
no so so currently yeah and rust if you

951
00:39:02,960 --> 00:39:06,800
want to add a new target

952
00:39:04,240 --> 00:39:08,399
they're super flexible about it um you

953
00:39:06,800 --> 00:39:08,960
know maybe once the grit list grows to

954
00:39:08,400 --> 00:39:12,320
100

955
00:39:08,960 --> 00:39:12,320
they'll they'll get put a more

956
00:39:12,480 --> 00:39:16,079
bigger process in place uh but right now

957
00:39:14,720 --> 00:39:17,279
it's just uh yeah you send a pull

958
00:39:16,079 --> 00:39:20,640
request

959
00:39:17,280 --> 00:39:22,880
if you need any like uh help or advice

960
00:39:20,640 --> 00:39:25,040
uh on like building a new target that is

961
00:39:22,880 --> 00:39:28,079
like similar to this i'm happy to help

962
00:39:25,040 --> 00:39:30,560
um there's a slack

963
00:39:28,079 --> 00:39:32,720
channel that i'm generally available on

964
00:39:30,560 --> 00:39:34,320
you can find the link on our website

965
00:39:32,720 --> 00:39:36,399
uh so this is a slack channel for for

966
00:39:34,320 --> 00:39:38,960
sgx expert and things like that

967
00:39:36,400 --> 00:39:38,960
so yeah

968
00:39:40,079 --> 00:39:53,440
thank you very much thank you thank you

