1
00:00:14,920 --> 00:00:20,400
yours

2
00:00:16,480 --> 00:00:22,400
hello everyone i'm neil

3
00:00:20,400 --> 00:00:24,560
i'm principal engineering working on

4
00:00:22,400 --> 00:00:27,598
obvious storage

5
00:00:24,560 --> 00:00:31,840
and i want to talk today about teaching

6
00:00:27,599 --> 00:00:31,840
videos and new tricks

7
00:00:32,960 --> 00:00:38,480
so first we're going to talk why orville

8
00:00:35,520 --> 00:00:40,559
needs to support 4k

9
00:00:38,480 --> 00:00:42,959
and what are the challenges we face when

10
00:00:40,559 --> 00:00:46,078
we try to add

11
00:00:42,960 --> 00:00:49,600
this feature to kind of old and mature

12
00:00:46,079 --> 00:00:51,840
system and we'll focus on the

13
00:00:49,600 --> 00:00:53,520
interesting issue of detecting block

14
00:00:51,840 --> 00:00:55,600
size

15
00:00:53,520 --> 00:00:57,360
and finally we'll see how we use the

16
00:00:55,600 --> 00:01:00,399
block size

17
00:00:57,360 --> 00:01:02,800
in uh obvious and how we manage just

18
00:01:00,399 --> 00:01:04,159
supporting different kind of blocks as

19
00:01:02,800 --> 00:01:06,399
detection

20
00:01:04,159 --> 00:01:07,439
and we'll see a short demo of creating a

21
00:01:06,400 --> 00:01:12,000
store domain on

22
00:01:07,439 --> 00:01:15,279
4k storage

23
00:01:12,000 --> 00:01:18,080
so first why f4k

24
00:01:15,280 --> 00:01:18,880
older this skills to support block size

25
00:01:18,080 --> 00:01:22,240
of

26
00:01:18,880 --> 00:01:25,679
512 bytes so you can write and read

27
00:01:22,240 --> 00:01:29,119
this size you cannot write

28
00:01:25,680 --> 00:01:30,640
like one by two disc and newer steroids

29
00:01:29,119 --> 00:01:33,680
supports

30
00:01:30,640 --> 00:01:34,400
both spokane 512 many diffs are

31
00:01:33,680 --> 00:01:38,159
supporting

32
00:01:34,400 --> 00:01:41,439
emulating 512 block size

33
00:01:38,159 --> 00:01:44,560
and some new disc are supporting uh

34
00:01:41,439 --> 00:01:47,119
only 4k and maybe cheaper and

35
00:01:44,560 --> 00:01:47,119
and faster

36
00:01:47,600 --> 00:01:50,798
now the main reason we need to support

37
00:01:49,600 --> 00:01:55,839
4k is y

38
00:01:50,799 --> 00:01:55,840
which is that hyper converge

39
00:01:56,560 --> 00:02:00,000
infrastructure and what it means it

40
00:01:59,200 --> 00:02:03,119
means

41
00:02:00,000 --> 00:02:06,159
hyper convert solution austin engine

42
00:02:03,119 --> 00:02:08,800
cluster fs and video together

43
00:02:06,159 --> 00:02:11,599
and what you why do we want this setup

44
00:02:08,800 --> 00:02:14,720
it means that you can take several

45
00:02:11,599 --> 00:02:15,679
cheap servers with some disks on the

46
00:02:14,720 --> 00:02:17,760
server

47
00:02:15,680 --> 00:02:19,280
and you can combine them and create a

48
00:02:17,760 --> 00:02:22,239
small data center

49
00:02:19,280 --> 00:02:22,640
without any storage the servers are used

50
00:02:22,239 --> 00:02:27,920
on

51
00:02:22,640 --> 00:02:31,440
also for compute nodes and storage

52
00:02:27,920 --> 00:02:33,359
and people like this combination

53
00:02:31,440 --> 00:02:34,720
this setup is pretty complex but to

54
00:02:33,360 --> 00:02:37,840
create simplicity we need complex

55
00:02:34,720 --> 00:02:37,840
software behind it

56
00:02:38,000 --> 00:02:44,160
so what is video video is the

57
00:02:41,200 --> 00:02:44,560
new dead application and compression

58
00:02:44,160 --> 00:02:47,200
layer

59
00:02:44,560 --> 00:02:50,160
in linux it can give you 10 times more

60
00:02:47,200 --> 00:02:52,160
storage in the same hardware

61
00:02:50,160 --> 00:02:54,239
so it's very useful to use and why you

62
00:02:52,160 --> 00:02:57,519
want to use video

63
00:02:54,239 --> 00:02:58,000
now video really wants to use 4k circle

64
00:02:57,519 --> 00:03:01,130
size

65
00:02:58,000 --> 00:03:02,400
it is designed for this it can emulate

66
00:03:01,130 --> 00:03:04,799
[Music]

67
00:03:02,400 --> 00:03:07,280
all the block size but it's not

68
00:03:04,800 --> 00:03:07,280
efficient

69
00:03:07,760 --> 00:03:11,760
and of course the other reason is to

70
00:03:09,519 --> 00:03:14,239
support users that want to use

71
00:03:11,760 --> 00:03:14,799
uh new disks maybe they bought new disks

72
00:03:14,239 --> 00:03:17,280
and they

73
00:03:14,800 --> 00:03:18,159
currently they could not use them so

74
00:03:17,280 --> 00:03:22,560
with

75
00:03:18,159 --> 00:03:22,560
of it for 38 users can use the

76
00:03:23,519 --> 00:03:27,599
local fs storage with 4k block size and

77
00:03:26,560 --> 00:03:29,360
cluster

78
00:03:27,599 --> 00:03:30,640
if your storage with 4k block size or

79
00:03:29,360 --> 00:03:33,840
with video

80
00:03:30,640 --> 00:03:33,839
on top of any storage

81
00:03:35,519 --> 00:03:41,840
so what are the challenges uh when vdsm

82
00:03:39,680 --> 00:03:43,200
and oviatt was created like more than 10

83
00:03:41,840 --> 00:03:47,040
years ago

84
00:03:43,200 --> 00:03:51,200
4k support was not important

85
00:03:47,040 --> 00:03:54,400
and trying to modify the old system

86
00:03:51,200 --> 00:03:54,399
is pretty bumpy ride

87
00:03:55,120 --> 00:04:00,480
the first issue the real issue is that

88
00:03:58,400 --> 00:04:02,879
of your search format assumes that the

89
00:04:00,480 --> 00:04:05,920
block size is 512.

90
00:04:02,879 --> 00:04:08,798
we assume that we can access um

91
00:04:05,920 --> 00:04:09,359
volume metadata from any host and read

92
00:04:08,799 --> 00:04:12,640
and write

93
00:04:09,360 --> 00:04:14,480
500 bytes to some error and storage

94
00:04:12,640 --> 00:04:16,560
and this does not really work on 4k

95
00:04:14,480 --> 00:04:18,798
storage when you can write only

96
00:04:16,560 --> 00:04:21,839
complete blocks unless you have

97
00:04:18,798 --> 00:04:21,839
complicated locking

98
00:04:22,160 --> 00:04:26,160
so this was fixed by introducing the new

99
00:04:24,800 --> 00:04:30,000
storage format

100
00:04:26,160 --> 00:04:32,960
storage format v5 in of it every

101
00:04:30,000 --> 00:04:33,680
uh storage format has a version and we

102
00:04:32,960 --> 00:04:35,198
usually

103
00:04:33,680 --> 00:04:37,120
introduce new version when we add new

104
00:04:35,199 --> 00:04:39,040
features

105
00:04:37,120 --> 00:04:44,000
so storage from what v5 is available

106
00:04:39,040 --> 00:04:48,400
since 430 so everyone running

107
00:04:44,000 --> 00:04:51,840
over 3 as it and it supports

108
00:04:48,400 --> 00:04:53,440
any block size of the storage

109
00:04:51,840 --> 00:04:54,880
it use the same layout for any block

110
00:04:53,440 --> 00:04:57,680
size

111
00:04:54,880 --> 00:05:00,080
so with this format we can use fork

112
00:04:57,680 --> 00:05:00,080
storage

113
00:05:01,039 --> 00:05:04,639
uh but of course it's not enough when we

114
00:05:03,199 --> 00:05:05,520
have storage remote supporting

115
00:05:04,639 --> 00:05:08,160
everything because

116
00:05:05,520 --> 00:05:11,359
we need to use unlock and salnok cannot

117
00:05:08,160 --> 00:05:13,280
detect the block size on file storage

118
00:05:11,360 --> 00:05:15,039
because there is no way to detect blocks

119
00:05:13,280 --> 00:05:17,919
on the file storage or actually

120
00:05:15,039 --> 00:05:18,960
to get it right you can do some magic to

121
00:05:17,919 --> 00:05:22,000
detect it but

122
00:05:18,960 --> 00:05:24,400
there is no official way to do it and

123
00:05:22,000 --> 00:05:27,280
even if we had a way

124
00:05:24,400 --> 00:05:28,320
uh salok is not the way to the the place

125
00:05:27,280 --> 00:05:31,198
to text

126
00:05:28,320 --> 00:05:32,479
the storage block size because vdsm the

127
00:05:31,199 --> 00:05:35,919
agent that

128
00:05:32,479 --> 00:05:39,039
runs on every host is

129
00:05:35,919 --> 00:05:40,719
does need to know the block size and it

130
00:05:39,039 --> 00:05:44,320
should be synchronized with sunlock

131
00:05:40,720 --> 00:05:47,600
so sannok is not the place to fix it

132
00:05:44,320 --> 00:05:50,400
so what we did was adding uh changing

133
00:05:47,600 --> 00:05:52,880
sano kpis to support 4k

134
00:05:50,400 --> 00:05:54,560
it means that vdsm can detect the block

135
00:05:52,880 --> 00:05:56,719
size and tells unlock

136
00:05:54,560 --> 00:05:58,240
what is the block size we can see in

137
00:05:56,720 --> 00:05:59,600
this example

138
00:05:58,240 --> 00:06:01,919
that when you create a sum of clock

139
00:05:59,600 --> 00:06:01,919
space

140
00:06:02,319 --> 00:06:06,400
we also specify the sector size and the

141
00:06:05,600 --> 00:06:07,840
alignment

142
00:06:06,400 --> 00:06:09,440
the element is related also to the

143
00:06:07,840 --> 00:06:12,318
sector size

144
00:06:09,440 --> 00:06:15,120
so with this vdsm can use unlock with

145
00:06:12,319 --> 00:06:15,120
any block size

146
00:06:16,000 --> 00:06:22,479
and we are ready for 4k right

147
00:06:19,360 --> 00:06:26,720
well no because vdsm

148
00:06:22,479 --> 00:06:30,318
used hardcoded block size everywhere

149
00:06:26,720 --> 00:06:32,720
like every in many places we had quoted

150
00:06:30,319 --> 00:06:36,400
the value to 512 bytes

151
00:06:32,720 --> 00:06:39,199
because it probably was not uh

152
00:06:36,400 --> 00:06:41,758
important thing to make it configurable

153
00:06:39,199 --> 00:06:41,759
in the past

154
00:06:42,400 --> 00:06:49,039
so we solved it by moving to bytes

155
00:06:45,600 --> 00:06:50,080
now all bdsm apis and the metadata that

156
00:06:49,039 --> 00:06:54,240
videos invites

157
00:06:50,080 --> 00:06:57,280
is using bytes we don't store or

158
00:06:54,240 --> 00:07:01,759
process sector size anywhere

159
00:06:57,280 --> 00:07:04,239
for example in this internal uh

160
00:07:01,759 --> 00:07:06,319
api that used to get size in sectors

161
00:07:04,240 --> 00:07:09,039
hardcoded detectors

162
00:07:06,319 --> 00:07:11,520
and used to write them the the same

163
00:07:09,039 --> 00:07:14,159
outputted value right to storage

164
00:07:11,520 --> 00:07:17,520
currently we get capacity and bytes and

165
00:07:14,160 --> 00:07:19,919
we saved capacity to the metadata

166
00:07:17,520 --> 00:07:23,039
with a new key and this is part of

167
00:07:19,919 --> 00:07:23,039
storage format v5

168
00:07:24,800 --> 00:07:31,280
now with all these changes we are still

169
00:07:28,639 --> 00:07:32,800
not ready because we need to detect the

170
00:07:31,280 --> 00:07:35,359
block size somehow

171
00:07:32,800 --> 00:07:36,880
to use it and there is no way to do it

172
00:07:35,360 --> 00:07:39,759
so

173
00:07:36,880 --> 00:07:41,120
the way to solve this issue is to look

174
00:07:39,759 --> 00:07:42,479
in qma code

175
00:07:41,120 --> 00:07:44,560
you can find a lot of interesting stuff

176
00:07:42,479 --> 00:07:47,680
into hemocode so

177
00:07:44,560 --> 00:07:50,879
we found that qmo solved this issue by

178
00:07:47,680 --> 00:07:53,120
accessing storage and

179
00:07:50,879 --> 00:07:53,120
will

180
00:07:54,319 --> 00:07:58,400
this is what video sando is doing now is

181
00:07:56,960 --> 00:07:59,599
detecting block size by accessing

182
00:07:58,400 --> 00:08:02,878
storage

183
00:07:59,599 --> 00:08:05,840
now how do we do it we'll talk later

184
00:08:02,879 --> 00:08:08,879
about the details but with this vdsm can

185
00:08:05,840 --> 00:08:12,560
detect the block size

186
00:08:08,879 --> 00:08:13,759
okay so vdsm is detecting our block size

187
00:08:12,560 --> 00:08:17,039
and

188
00:08:13,759 --> 00:08:19,360
uh we can continue and maybe we are

189
00:08:17,039 --> 00:08:19,360
ready

190
00:08:20,160 --> 00:08:24,960
okay with all the changes how do we know

191
00:08:23,680 --> 00:08:27,919
that we did not break

192
00:08:24,960 --> 00:08:29,520
vdsm right we have big python

193
00:08:27,919 --> 00:08:32,559
application

194
00:08:29,520 --> 00:08:34,079
very little tests because the people who

195
00:08:32,559 --> 00:08:36,958
wrote this code

196
00:08:34,080 --> 00:08:38,880
so that tests are not very important and

197
00:08:36,958 --> 00:08:42,319
when you have two tests

198
00:08:38,880 --> 00:08:44,640
for example if i test for this uh room

199
00:08:42,320 --> 00:08:46,240
maybe i can change something here and

200
00:08:44,640 --> 00:08:46,720
then the ceiling fall down at the end of

201
00:08:46,240 --> 00:08:50,240
the room

202
00:08:46,720 --> 00:08:54,399
so really need good tests

203
00:08:50,240 --> 00:08:57,200
so what we did was improving uh

204
00:08:54,399 --> 00:08:58,160
test coverage and storage area when we

205
00:08:57,200 --> 00:09:00,080
started

206
00:08:58,160 --> 00:09:01,439
test coverage was the lowest spout in

207
00:09:00,080 --> 00:09:04,720
vdsm

208
00:09:01,440 --> 00:09:09,519
compared to other components and now

209
00:09:04,720 --> 00:09:12,080
we have the best coverage

210
00:09:09,519 --> 00:09:13,839
uh we added a lot of testing of

211
00:09:12,080 --> 00:09:16,880
infrastructure for example

212
00:09:13,839 --> 00:09:18,640
we have this tmp repo that

213
00:09:16,880 --> 00:09:21,040
knows how to create store generally for

214
00:09:18,640 --> 00:09:24,080
you this is real slow domain

215
00:09:21,040 --> 00:09:25,920
it's not some fake and

216
00:09:24,080 --> 00:09:27,200
not using any mocks this creates a real

217
00:09:25,920 --> 00:09:30,959
storage

218
00:09:27,200 --> 00:09:34,000
on your laptop or on travis

219
00:09:30,959 --> 00:09:36,959
and we run this with this

220
00:09:34,000 --> 00:09:38,560
user mount this user map will see you is

221
00:09:36,959 --> 00:09:41,920
another feature

222
00:09:38,560 --> 00:09:44,079
that will give you a mud point with

223
00:09:41,920 --> 00:09:46,800
several types of file system and several

224
00:09:44,080 --> 00:09:49,120
types of block sizes

225
00:09:46,800 --> 00:09:50,399
so this test code using this

226
00:09:49,120 --> 00:09:52,399
infrastructure

227
00:09:50,399 --> 00:09:55,839
will run multiple times with all the

228
00:09:52,399 --> 00:09:55,839
combinations automatically

229
00:09:56,160 --> 00:10:00,800
and we have even either infrastructure

230
00:09:58,800 --> 00:10:03,279
like this user domain

231
00:10:00,800 --> 00:10:04,959
that will create a domain for you and

232
00:10:03,279 --> 00:10:06,160
now you can create volumes and modify

233
00:10:04,959 --> 00:10:07,439
them and

234
00:10:06,160 --> 00:10:08,880
do stored operations and delete the

235
00:10:07,440 --> 00:10:10,320
volumes query the metadata and

236
00:10:08,880 --> 00:10:12,160
everything

237
00:10:10,320 --> 00:10:13,920
and of course these tests will run

238
00:10:12,160 --> 00:10:15,519
several times all the configured block

239
00:10:13,920 --> 00:10:18,399
size and file systems

240
00:10:15,519 --> 00:10:21,360
so we can tell that for example on xfs

241
00:10:18,399 --> 00:10:21,360
this code will fail

242
00:10:23,360 --> 00:10:28,320
so this was vdsm before we changed it we

243
00:10:26,399 --> 00:10:31,279
took a picture before we did it

244
00:10:28,320 --> 00:10:32,160
you can see that all these hardcoded

245
00:10:31,279 --> 00:10:35,519
block sizes

246
00:10:32,160 --> 00:10:38,800
and all the rust

247
00:10:35,519 --> 00:10:41,839
not the kind the good kind of fast that

248
00:10:38,800 --> 00:10:44,399
we talked about the other day

249
00:10:41,839 --> 00:10:46,000
and this is now much better i think you

250
00:10:44,399 --> 00:10:48,560
made a lot of progress

251
00:10:46,000 --> 00:10:51,120
maybe it's not very accurate but we did

252
00:10:48,560 --> 00:10:51,119
a lot of work

253
00:10:52,000 --> 00:10:57,920
so with videos and ready can we use

254
00:10:55,200 --> 00:10:59,600
4k storage we can create a storage

255
00:10:57,920 --> 00:11:02,719
drawing

256
00:10:59,600 --> 00:11:04,240
and then we try to provision a vm on the

257
00:11:02,720 --> 00:11:07,920
storage

258
00:11:04,240 --> 00:11:09,600
and we found that when you want the when

259
00:11:07,920 --> 00:11:13,199
you want to install the vm

260
00:11:09,600 --> 00:11:15,839
the installation fails so after

261
00:11:13,200 --> 00:11:17,279
spending a lot of time with estes on gmo

262
00:11:15,839 --> 00:11:20,880
we found that qmo is

263
00:11:17,279 --> 00:11:20,880
reading and writing underlying sizes

264
00:11:21,040 --> 00:11:24,560
and it turns out that qmo does not work

265
00:11:23,920 --> 00:11:27,040
on

266
00:11:24,560 --> 00:11:28,319
certain combinations of gluster and

267
00:11:27,040 --> 00:11:33,839
interface

268
00:11:28,320 --> 00:11:37,279
or xfs with local storage

269
00:11:33,839 --> 00:11:38,560
and the fix was to send some patches to

270
00:11:37,279 --> 00:11:40,800
current

271
00:11:38,560 --> 00:11:42,719
and with the help of kevin and max we

272
00:11:40,800 --> 00:11:45,839
got it match quickly

273
00:11:42,720 --> 00:11:49,120
and qm on the l77 supports

274
00:11:45,839 --> 00:11:51,600
all these edge cases and everyone

275
00:11:49,120 --> 00:11:54,959
running over 43 has this

276
00:11:51,600 --> 00:11:57,839
fixed um so now we are really ready to

277
00:11:54,959 --> 00:11:57,839
use 4k

278
00:11:58,800 --> 00:12:01,920
and then we found that yes we can

279
00:12:00,480 --> 00:12:05,200
provision a vm with 4k

280
00:12:01,920 --> 00:12:08,240
we can start it but

281
00:12:05,200 --> 00:12:10,000
the vm thinks that the block size is 512

282
00:12:08,240 --> 00:12:11,680
and it's not 4k

283
00:12:10,000 --> 00:12:13,600
so we found out to configure it using

284
00:12:11,680 --> 00:12:14,959
leave built

285
00:12:13,600 --> 00:12:17,120
and then we found that the vm is not

286
00:12:14,959 --> 00:12:18,800
boot

287
00:12:17,120 --> 00:12:22,240
so it turns out that bios does not

288
00:12:18,800 --> 00:12:25,680
support 4k

289
00:12:22,240 --> 00:12:29,120
and we can solve it using ovmf

290
00:12:25,680 --> 00:12:32,079
which not a lot of people know about

291
00:12:29,120 --> 00:12:34,480
it's not supported in force yet maybe it

292
00:12:32,079 --> 00:12:38,399
supports an e4 i'm not sure

293
00:12:34,480 --> 00:12:42,399
so currently we just keep the current

294
00:12:38,399 --> 00:12:47,200
way that the vm thinks that this is a

295
00:12:42,399 --> 00:12:50,000
an old uh 512 byte storage

296
00:12:47,200 --> 00:12:50,639
so basically what we can provide now is

297
00:12:50,000 --> 00:12:53,279
this

298
00:12:50,639 --> 00:12:54,560
setup that the guests think that it's

299
00:12:53,279 --> 00:12:57,600
running on

300
00:12:54,560 --> 00:12:58,800
logical block size of 512 qm knows the

301
00:12:57,600 --> 00:13:01,200
real value

302
00:12:58,800 --> 00:13:02,560
and if the guess is writing something

303
00:13:01,200 --> 00:13:05,440
unaligned qmo can

304
00:13:02,560 --> 00:13:07,199
fix the height of course this can

305
00:13:05,440 --> 00:13:10,320
introduce

306
00:13:07,200 --> 00:13:11,760
performance issues uh but we don't have

307
00:13:10,320 --> 00:13:13,519
yet any

308
00:13:11,760 --> 00:13:15,760
results so we don't know if it's this if

309
00:13:13,519 --> 00:13:18,839
this is the wheels or better than

310
00:13:15,760 --> 00:13:21,839
the old way but with this you can use

311
00:13:18,839 --> 00:13:21,839
video

312
00:13:22,240 --> 00:13:26,639
so how do you how we do we detect block

313
00:13:24,320 --> 00:13:26,639
size

314
00:13:26,720 --> 00:13:30,639
let's see how geoma does it this is the

315
00:13:29,680 --> 00:13:34,479
new way

316
00:13:30,639 --> 00:13:38,560
that works on glaston xfs

317
00:13:34,480 --> 00:13:41,760
first we need one byte with the directio

318
00:13:38,560 --> 00:13:44,800
and this is expected to fail

319
00:13:41,760 --> 00:13:46,720
on anything unless we cannot detect the

320
00:13:44,800 --> 00:13:49,839
block size

321
00:13:46,720 --> 00:13:52,320
so if this succeeds qma knows that

322
00:13:49,839 --> 00:13:53,519
we cannot detect the block size maybe

323
00:13:52,320 --> 00:13:56,720
there is no block size

324
00:13:53,519 --> 00:13:57,519
uh requirement and pm we fall back to a

325
00:13:56,720 --> 00:13:59,839
safe value

326
00:13:57,519 --> 00:14:03,199
that works in any case it's not the

327
00:13:59,839 --> 00:14:05,199
optimal value but it's safe

328
00:14:03,199 --> 00:14:07,040
then we try the next value and if it

329
00:14:05,199 --> 00:14:08,240
succeed we know that this is the block

330
00:14:07,040 --> 00:14:10,959
size

331
00:14:08,240 --> 00:14:12,399
and if not we try the next value and if

332
00:14:10,959 --> 00:14:13,518
not this is the value and of course if

333
00:14:12,399 --> 00:14:15,920
nothing works

334
00:14:13,519 --> 00:14:18,800
camera will fail to use direct io with

335
00:14:15,920 --> 00:14:18,800
this image

336
00:14:20,079 --> 00:14:24,399
now there's a few issues with this one

337
00:14:22,800 --> 00:14:25,760
of them is that you cannot detect the

338
00:14:24,399 --> 00:14:29,120
block size on

339
00:14:25,760 --> 00:14:31,760
unallocated block in

340
00:14:29,120 --> 00:14:33,519
uh xfs when it's a remote xfs of the

341
00:14:31,760 --> 00:14:36,399
cluster

342
00:14:33,519 --> 00:14:37,839
and this was fixed by changing qm image

343
00:14:36,399 --> 00:14:39,440
create to always allocate the first

344
00:14:37,839 --> 00:14:43,360
block so

345
00:14:39,440 --> 00:14:46,320
when you create an image new image with

346
00:14:43,360 --> 00:14:47,760
chiami image create on opiate source 3

347
00:14:46,320 --> 00:14:51,440
you will get

348
00:14:47,760 --> 00:14:53,040
this issue fixed so we are not affected

349
00:14:51,440 --> 00:14:54,959
and of course there is the issue of nfs

350
00:14:53,040 --> 00:14:58,719
nfs does not really

351
00:14:54,959 --> 00:15:00,160
enforce any block size or alignment

352
00:14:58,720 --> 00:15:03,120
because it actually does not do any

353
00:15:00,160 --> 00:15:04,639
direct i o on the server side

354
00:15:03,120 --> 00:15:07,199
so in this case clear my fallback to a

355
00:15:04,639 --> 00:15:07,199
safe value

356
00:15:07,920 --> 00:15:11,279
and how we do the same with vdsm or more

357
00:15:10,079 --> 00:15:13,120
precisely

358
00:15:11,279 --> 00:15:15,680
i process the helper process used by

359
00:15:13,120 --> 00:15:15,680
vdsm

360
00:15:16,399 --> 00:15:22,480
we created a profile and

361
00:15:19,519 --> 00:15:23,279
then we do the same flow like writing

362
00:15:22,480 --> 00:15:25,360
one byte

363
00:15:23,279 --> 00:15:26,399
writing more bytes until we find the

364
00:15:25,360 --> 00:15:28,639
value

365
00:15:26,399 --> 00:15:30,800
as with this we don't have any issues we

366
00:15:28,639 --> 00:15:34,240
can detect any value

367
00:15:30,800 --> 00:15:34,240
even with glaston and fs

368
00:15:34,800 --> 00:15:38,959
so no issue of the cluster no issue of

369
00:15:36,959 --> 00:15:39,439
course with lfs we detect the same value

370
00:15:38,959 --> 00:15:41,279
of

371
00:15:39,440 --> 00:15:43,920
one byte and we fall back two

372
00:15:41,279 --> 00:15:43,920
exceptionally

373
00:15:44,639 --> 00:15:49,199
so we know how we detect the block size

374
00:15:47,440 --> 00:15:52,800
how we made videos already

375
00:15:49,199 --> 00:15:52,800
how do we use all this

376
00:15:53,440 --> 00:15:59,839
so first video same uh

377
00:15:56,639 --> 00:16:03,519
oh actually oviatt 438 that was released

378
00:15:59,839 --> 00:16:05,440
recently supports 4k by default

379
00:16:03,519 --> 00:16:07,120
so we don't need to do anything but if

380
00:16:05,440 --> 00:16:09,040
you have an older version

381
00:16:07,120 --> 00:16:11,040
you can use the configuration file to

382
00:16:09,040 --> 00:16:12,399
enable it like we see here

383
00:16:11,040 --> 00:16:15,040
or you can use it to disable this

384
00:16:12,399 --> 00:16:16,560
feature if it goes double

385
00:16:15,040 --> 00:16:18,880
but generally you don't have to do

386
00:16:16,560 --> 00:16:18,880
anything

387
00:16:19,279 --> 00:16:25,199
when vdsm reports its capabilities

388
00:16:23,199 --> 00:16:26,479
we also report the blocks are supported

389
00:16:25,199 --> 00:16:29,599
by

390
00:16:26,480 --> 00:16:33,680
all the storage types

391
00:16:29,600 --> 00:16:35,040
so every storage type in vdsm has this

392
00:16:33,680 --> 00:16:37,839
supported block size

393
00:16:35,040 --> 00:16:39,759
list and in this case we can see that

394
00:16:37,839 --> 00:16:43,440
cluster domain supports

395
00:16:39,759 --> 00:16:45,759
512 and 4k and also this magic auto

396
00:16:43,440 --> 00:16:45,759
value

397
00:16:46,320 --> 00:16:50,480
and other store types support different

398
00:16:48,839 --> 00:16:51,839
sizes

399
00:16:50,480 --> 00:16:54,000
so we can introduce this feature

400
00:16:51,839 --> 00:16:57,120
gradually

401
00:16:54,000 --> 00:16:58,480
what is this outer value is zero you you

402
00:16:57,120 --> 00:17:00,160
see zero in the logs

403
00:16:58,480 --> 00:17:04,240
and it means that vdsm will detect the

404
00:17:00,160 --> 00:17:07,678
size for you and this is the way that

405
00:17:04,240 --> 00:17:11,439
we use currently we support setting

406
00:17:07,679 --> 00:17:14,799
some block size but engineer zero when

407
00:17:11,439 --> 00:17:14,799
it creates a storage domain

408
00:17:15,919 --> 00:17:20,079
now if you request us different block

409
00:17:18,160 --> 00:17:21,280
size we will validate the actual block

410
00:17:20,079 --> 00:17:24,639
size and make sure that

411
00:17:21,280 --> 00:17:28,160
it's much it matches because without it

412
00:17:24,640 --> 00:17:30,720
so the person is very little and if it

413
00:17:28,160 --> 00:17:32,000
failed we have this new exception about

414
00:17:30,720 --> 00:17:35,280
storage

415
00:17:32,000 --> 00:17:35,280
domain block size mismatch

416
00:17:36,400 --> 00:17:39,760
another thing that you have to compute

417
00:17:37,840 --> 00:17:41,918
alignment in the past alignment was

418
00:17:39,760 --> 00:17:44,720
always one megabyte it's the

419
00:17:41,919 --> 00:17:46,880
alignment used by cell lock now it

420
00:17:44,720 --> 00:17:49,280
depends on the block size

421
00:17:46,880 --> 00:17:52,799
and we compute it by the number of hosts

422
00:17:49,280 --> 00:17:52,799
that requested by the user

423
00:17:53,039 --> 00:17:59,760
and the default is 250.

424
00:17:56,080 --> 00:18:01,360
if you use all the storage with a

425
00:17:59,760 --> 00:18:04,000
smaller block size with the default

426
00:18:01,360 --> 00:18:06,240
value uh the sonic default value of two

427
00:18:04,000 --> 00:18:07,919
thousands

428
00:18:06,240 --> 00:18:09,679
uh generally this is the default value

429
00:18:07,919 --> 00:18:10,880
used by engine so you don't have to

430
00:18:09,679 --> 00:18:13,440
configure anything

431
00:18:10,880 --> 00:18:16,480
but it's possible to create bigger

432
00:18:13,440 --> 00:18:16,480
setups with mohos

433
00:18:17,919 --> 00:18:21,440
and finally when we have all the

434
00:18:19,840 --> 00:18:23,120
information we keep it in the storage

435
00:18:21,440 --> 00:18:25,120
metadata

436
00:18:23,120 --> 00:18:27,360
and store generated data and this is for

437
00:18:25,120 --> 00:18:30,559
example the storage metadata for

438
00:18:27,360 --> 00:18:33,520
file storage in block storage we keep it

439
00:18:30,559 --> 00:18:33,520
in the vg tags

440
00:18:35,120 --> 00:18:39,600
so just to recap this is the the flow we

441
00:18:38,400 --> 00:18:41,520
when you create a storage room and we

442
00:18:39,600 --> 00:18:42,959
detect the block size

443
00:18:41,520 --> 00:18:45,520
we validate the block size with the

444
00:18:42,960 --> 00:18:47,840
requested value in case the user

445
00:18:45,520 --> 00:18:48,720
asks for specific value we compute the

446
00:18:47,840 --> 00:18:51,280
alignment

447
00:18:48,720 --> 00:18:52,320
we create a metadata create directory

448
00:18:51,280 --> 00:18:54,080
structure

449
00:18:52,320 --> 00:18:55,600
and initialize unlock with all the

450
00:18:54,080 --> 00:18:58,240
details

451
00:18:55,600 --> 00:18:59,840
so with this you can get a 4k sold

452
00:18:58,240 --> 00:19:03,679
domain

453
00:18:59,840 --> 00:19:06,159
but we are not that done yet

454
00:19:03,679 --> 00:19:07,039
because how do you manage several hosts

455
00:19:06,160 --> 00:19:08,400
well

456
00:19:07,039 --> 00:19:10,640
when you can have off that does not

457
00:19:08,400 --> 00:19:12,080
support 4k and host that does support 4k

458
00:19:10,640 --> 00:19:15,200
so

459
00:19:12,080 --> 00:19:19,360
engine has to check

460
00:19:15,200 --> 00:19:21,600
the host capabilities that we saw before

461
00:19:19,360 --> 00:19:23,039
so when we activate a host and only

462
00:19:21,600 --> 00:19:27,039
check its capabilities

463
00:19:23,039 --> 00:19:27,039
and restore the value in the database

464
00:19:27,600 --> 00:19:31,199
and we will create a storage domain

465
00:19:31,280 --> 00:19:34,799
and generally check that all the hosts

466
00:19:32,880 --> 00:19:38,880
support the

467
00:19:34,799 --> 00:19:42,240
the same block detection

468
00:19:38,880 --> 00:19:43,200
and it will use automatic block

469
00:19:42,240 --> 00:19:46,160
detection only if

470
00:19:43,200 --> 00:19:46,160
all the supports it

471
00:19:46,320 --> 00:19:51,280
so engine will create a domain with

472
00:19:49,200 --> 00:19:53,840
automatic boxes detection

473
00:19:51,280 --> 00:19:56,080
then it will get the domain information

474
00:19:53,840 --> 00:19:58,799
learn what vbsm is created

475
00:19:56,080 --> 00:20:00,559
and store it in the database so next

476
00:19:58,799 --> 00:20:03,918
time when you add the host

477
00:20:00,559 --> 00:20:06,158
to the same setup engine

478
00:20:03,919 --> 00:20:07,679
can know if this host can work with this

479
00:20:06,159 --> 00:20:08,559
told you man if those cannot work with

480
00:20:07,679 --> 00:20:12,320
distorter man

481
00:20:08,559 --> 00:20:14,399
it will become you you cannot activate

482
00:20:12,320 --> 00:20:14,399
it

483
00:20:14,559 --> 00:20:18,399
basically all this is not needed if you

484
00:20:16,640 --> 00:20:21,520
want

485
00:20:18,400 --> 00:20:22,960
like 438 system but we introduced this

486
00:20:21,520 --> 00:20:24,480
feature gradually so

487
00:20:22,960 --> 00:20:28,400
it's possible that you will see these

488
00:20:24,480 --> 00:20:28,400
issues if you have an older version

489
00:20:30,080 --> 00:20:33,439
and of course if any host does not

490
00:20:32,080 --> 00:20:36,158
support the value

491
00:20:33,440 --> 00:20:36,640
engine will fall back to the old the all

492
00:20:36,159 --> 00:20:38,000
the way

493
00:20:36,640 --> 00:20:39,679
and if you have focus storage it will

494
00:20:38,000 --> 00:20:41,120
not work so this means that you need to

495
00:20:39,679 --> 00:20:43,120
upgrade your host

496
00:20:41,120 --> 00:20:45,840
or maybe enable the configuration that

497
00:20:43,120 --> 00:20:45,840
we saw before

498
00:20:47,120 --> 00:20:53,600
so let's see a short demo

499
00:20:50,320 --> 00:20:53,600
of getting a storage man

500
00:20:54,400 --> 00:21:03,840
basically all this complexity is hidden

501
00:20:56,320 --> 00:21:03,840
from the user

502
00:21:04,400 --> 00:21:08,640
and all the details are hidden

503
00:21:08,960 --> 00:21:15,760
slowly okay so

504
00:21:12,960 --> 00:21:16,240
we can see our way how we can check the

505
00:21:15,760 --> 00:21:21,120
host's

506
00:21:16,240 --> 00:21:23,120
capabilities we see the the first return

507
00:21:21,120 --> 00:21:24,719
supported block size for several level

508
00:21:23,120 --> 00:21:26,000
domains

509
00:21:24,720 --> 00:21:27,840
we can see that the cluster fs is

510
00:21:26,000 --> 00:21:28,640
supported and this is the domain we use

511
00:21:27,840 --> 00:21:31,439
in

512
00:21:28,640 --> 00:21:33,760
this demo so now the user just create a

513
00:21:31,440 --> 00:21:35,120
new domain

514
00:21:33,760 --> 00:21:36,960
in the normal way there's no

515
00:21:35,120 --> 00:21:37,918
configuration you don't need to know

516
00:21:36,960 --> 00:21:40,640
anything about it

517
00:21:37,919 --> 00:21:40,640
it just works

518
00:21:41,760 --> 00:21:46,640
of course you need obvious 4c8 or older

519
00:21:44,880 --> 00:21:49,360
version with enabled last

520
00:21:46,640 --> 00:21:49,360
4k support

521
00:21:50,320 --> 00:21:54,399
so now we created the domain and

522
00:21:55,120 --> 00:22:01,760
we can check what vdsm did

523
00:21:58,480 --> 00:22:01,760
when it created the domain

524
00:22:02,240 --> 00:22:07,919
we can check that engine asks for

525
00:22:05,760 --> 00:22:10,158
automatic block size detection we can

526
00:22:07,919 --> 00:22:13,840
see block size equals zero it means that

527
00:22:10,159 --> 00:22:13,840
please detect the value

528
00:22:14,799 --> 00:22:23,600
and we can see that bdsm detected

529
00:22:18,400 --> 00:22:23,600
the right value in the next section

530
00:22:24,159 --> 00:22:27,919
this is available only in the backlog

531
00:22:26,640 --> 00:22:28,720
but we can also get the domain

532
00:22:27,919 --> 00:22:31,360
information and

533
00:22:28,720 --> 00:22:32,799
look at it so we can see that vdsm tried

534
00:22:31,360 --> 00:22:35,918
one byte and

535
00:22:32,799 --> 00:22:41,840
front-end to elephant so on

536
00:22:35,919 --> 00:22:41,840
and finally detected the value

537
00:22:53,039 --> 00:22:56,720
so we have a gluster domain we can use

538
00:22:54,880 --> 00:22:59,840
it we can create vms we can

539
00:22:56,720 --> 00:23:02,080
start them and

540
00:22:59,840 --> 00:23:04,959
this part show that how we can check

541
00:23:02,080 --> 00:23:07,520
what engine knows about resource

542
00:23:04,960 --> 00:23:08,320
we see that resource supports these

543
00:23:07,520 --> 00:23:10,960
values

544
00:23:08,320 --> 00:23:12,000
and then we can check the store domain

545
00:23:10,960 --> 00:23:15,360
if engine

546
00:23:12,000 --> 00:23:15,360
recorded the value properly

547
00:23:17,679 --> 00:23:27,360
so this is basically all

548
00:23:22,799 --> 00:23:27,360
and if you want to learn more about this

549
00:23:30,080 --> 00:23:33,520
you can check these links there's an

550
00:23:32,480 --> 00:23:36,400
interesting

551
00:23:33,520 --> 00:23:37,600
rfe with many many patches attached to

552
00:23:36,400 --> 00:23:40,880
it

553
00:23:37,600 --> 00:23:44,158
because it was a huge work during the

554
00:23:40,880 --> 00:23:46,400
fourth resistor development

555
00:23:44,159 --> 00:23:47,200
and this is an example of edsm test

556
00:23:46,400 --> 00:23:48,720
using the

557
00:23:47,200 --> 00:23:50,400
all this infrastructure that i talked

558
00:23:48,720 --> 00:23:52,799
about later

559
00:23:50,400 --> 00:23:53,919
and link to the user storage project

560
00:23:52,799 --> 00:23:56,720
which is the

561
00:23:53,919 --> 00:23:58,720
helper to test with a lot of a lot of

562
00:23:56,720 --> 00:24:00,480
kinds of storage a lot of kinds of block

563
00:23:58,720 --> 00:24:05,279
size

564
00:24:00,480 --> 00:24:08,159
uh pip jacket and of course of it all

565
00:24:05,279 --> 00:24:08,159
so any questions

566
00:24:16,840 --> 00:24:19,840
yes

567
00:24:23,200 --> 00:24:26,240
okay so the question is if we can mix

568
00:24:25,120 --> 00:24:28,879
different kinds of

569
00:24:26,240 --> 00:24:30,400
uh disk in the same store domain and no

570
00:24:28,880 --> 00:24:33,840
we don't support it

571
00:24:30,400 --> 00:24:33,840
it will fail

572
00:24:35,600 --> 00:24:38,240
anything else

573
00:24:44,840 --> 00:25:00,959
nothing

574
00:24:46,400 --> 00:25:00,960
thank you

