1
00:00:05,040 --> 00:00:08,160
uh

2
00:00:05,520 --> 00:00:08,879
next up is uh paul uh paul stack and he

3
00:00:08,160 --> 00:00:11,599
will talk to

4
00:00:08,880 --> 00:00:12,960
uh talk to us about uh polumi and uh

5
00:00:11,599 --> 00:00:16,480
infrastructure testing

6
00:00:12,960 --> 00:00:18,160
apparently it's a real thing okay um oh

7
00:00:16,480 --> 00:00:19,680
nothing there we go can everyone hear me

8
00:00:18,160 --> 00:00:22,000
at the back no

9
00:00:19,680 --> 00:00:23,840
no okay i don't know what's going on i

10
00:00:22,000 --> 00:00:27,439
have a very loud voice so i can show it

11
00:00:23,840 --> 00:00:29,439
um this is a 55 minute talk i don't know

12
00:00:27,439 --> 00:00:31,039
why i got the short straw on a 55 minute

13
00:00:29,439 --> 00:00:33,520
talk when everyone else got 25

14
00:00:31,039 --> 00:00:35,360
but i guess we'll give it a try um so

15
00:00:33,520 --> 00:00:37,680
this is a talk called infrastructure

16
00:00:35,360 --> 00:00:40,660
infra testing it's a real thing

17
00:00:37,680 --> 00:00:42,000
hands up who infrastructure tests

18
00:00:40,660 --> 00:00:44,319
[Music]

19
00:00:42,000 --> 00:00:46,640
less than 10 percent of the room this is

20
00:00:44,320 --> 00:00:49,200
why this is actually a relevant talk

21
00:00:46,640 --> 00:00:50,559
so thank you all for coming i work for a

22
00:00:49,200 --> 00:00:52,480
company called palumi

23
00:00:50,559 --> 00:00:54,079
you have the terraform appetizer and now

24
00:00:52,480 --> 00:00:56,640
you get the pollutant um

25
00:00:54,079 --> 00:00:58,000
main course but um it's not really a

26
00:00:56,640 --> 00:01:00,000
sales talk for plummy at all that

27
00:00:58,000 --> 00:01:03,039
happens a conflict management camp

28
00:01:00,000 --> 00:01:06,560
i'm just kidding so in the beginning

29
00:01:03,039 --> 00:01:08,159
software developers have been including

30
00:01:06,560 --> 00:01:10,080
testing

31
00:01:08,159 --> 00:01:13,040
as part of their development cycles for

32
00:01:10,080 --> 00:01:16,240
a long long long time

33
00:01:13,040 --> 00:01:16,240
and unfortunately

34
00:01:16,560 --> 00:01:20,080
the ops people the infrastructure

35
00:01:17,840 --> 00:01:21,360
management people i'm gonna call them

36
00:01:20,080 --> 00:01:23,119
the laggards

37
00:01:21,360 --> 00:01:24,479
okay and i'm really gonna say it's the

38
00:01:23,119 --> 00:01:27,040
laggards unfortunately

39
00:01:24,479 --> 00:01:28,080
but we are in a part of the industry

40
00:01:27,040 --> 00:01:31,040
that hasn't had

41
00:01:28,080 --> 00:01:33,360
testing in its forefront we used to have

42
00:01:31,040 --> 00:01:37,280
very specialized people

43
00:01:33,360 --> 00:01:39,200
who knew how to do very special things

44
00:01:37,280 --> 00:01:40,880
and they were the center of everything

45
00:01:39,200 --> 00:01:43,200
that happened within operations

46
00:01:40,880 --> 00:01:45,199
now what i mean by that is we had

47
00:01:43,200 --> 00:01:48,079
networking geniuses we had dns

48
00:01:45,200 --> 00:01:49,680
geniuses we had people that understood

49
00:01:48,079 --> 00:01:52,240
the data centers the racks

50
00:01:49,680 --> 00:01:54,240
the the power situations the storage we

51
00:01:52,240 --> 00:01:55,920
had all of these different things

52
00:01:54,240 --> 00:01:59,439
and because everyone had their own

53
00:01:55,920 --> 00:02:01,360
speciality there wasn't really a need

54
00:01:59,439 --> 00:02:02,798
to bring in an automated system for

55
00:02:01,360 --> 00:02:04,240
testing what they were doing

56
00:02:02,799 --> 00:02:06,479
it was what they did it was what they

57
00:02:04,240 --> 00:02:12,480
did day in day out and that was their

58
00:02:06,479 --> 00:02:14,720
area of expertise now in the same time

59
00:02:12,480 --> 00:02:16,560
the developers actually went for manual

60
00:02:14,720 --> 00:02:19,599
qa testing anyone still work at a

61
00:02:16,560 --> 00:02:22,879
company where you have manual qa testing

62
00:02:19,599 --> 00:02:24,720
okay you all just

63
00:02:22,879 --> 00:02:26,480
we need to talk over a beer and work

64
00:02:24,720 --> 00:02:30,800
that one out

65
00:02:26,480 --> 00:02:34,238
so most most of the industry have moved

66
00:02:30,800 --> 00:02:35,360
from manual qa testing to having testing

67
00:02:34,239 --> 00:02:38,400
included

68
00:02:35,360 --> 00:02:40,160
in their ci pipeline their cd pipeline

69
00:02:38,400 --> 00:02:42,560
included as part of their development

70
00:02:40,160 --> 00:02:44,720
workflow we broke down the barriers

71
00:02:42,560 --> 00:02:46,319
between devs and qas and it became part

72
00:02:44,720 --> 00:02:49,440
of everything we did

73
00:02:46,319 --> 00:02:53,280
okay we're now at the point where

74
00:02:49,440 --> 00:02:54,959
we had in 2007 martin foiler who's like

75
00:02:53,280 --> 00:02:56,640
a software development thought leader

76
00:02:54,959 --> 00:02:58,720
actually wrote a post about mocks

77
00:02:56,640 --> 00:03:00,319
aren't stubs so we were at the part of

78
00:02:58,720 --> 00:03:00,959
the industry where people were starting

79
00:03:00,319 --> 00:03:04,238
to mock

80
00:03:00,959 --> 00:03:06,640
out integrations in their software

81
00:03:04,239 --> 00:03:08,239
between the code and the database or the

82
00:03:06,640 --> 00:03:10,000
code and the file system

83
00:03:08,239 --> 00:03:11,360
all these different things to actually

84
00:03:10,000 --> 00:03:13,280
test

85
00:03:11,360 --> 00:03:14,800
that what they were building was fit for

86
00:03:13,280 --> 00:03:16,800
purpose

87
00:03:14,800 --> 00:03:19,920
now again at the same time we didn't

88
00:03:16,800 --> 00:03:21,760
have the same evolution and ops

89
00:03:19,920 --> 00:03:23,440
but in development we got to the point

90
00:03:21,760 --> 00:03:25,040
where we understood what was called the

91
00:03:23,440 --> 00:03:28,560
pyramid of testing

92
00:03:25,040 --> 00:03:29,280
so we had levels of of testing within

93
00:03:28,560 --> 00:03:30,720
the pyramid

94
00:03:29,280 --> 00:03:32,640
starting at the bottom we had unit

95
00:03:30,720 --> 00:03:34,239
testing then we had integration testing

96
00:03:32,640 --> 00:03:36,640
then we had end-to-end testing

97
00:03:34,239 --> 00:03:38,879
now what i mean by a unit test is

98
00:03:36,640 --> 00:03:41,760
testing its code in its isolation not

99
00:03:38,879 --> 00:03:42,720
calling its dependencies okay so if you

100
00:03:41,760 --> 00:03:44,159
have a function

101
00:03:42,720 --> 00:03:46,239
and that function talks to the file

102
00:03:44,159 --> 00:03:47,200
system in the database or the cloud or

103
00:03:46,239 --> 00:03:50,080
anything like that

104
00:03:47,200 --> 00:03:52,798
you mock out those interactions and you

105
00:03:50,080 --> 00:03:54,080
test the function in isolation

106
00:03:52,799 --> 00:03:56,400
and you can mock the different

107
00:03:54,080 --> 00:03:58,319
interactions and you can check

108
00:03:56,400 --> 00:03:59,519
that the code adheres to what it's

109
00:03:58,319 --> 00:04:00,720
supposed to do under different

110
00:03:59,519 --> 00:04:02,959
conditions

111
00:04:00,720 --> 00:04:04,400
then we had integration tests and

112
00:04:02,959 --> 00:04:06,159
integration tests

113
00:04:04,400 --> 00:04:08,480
excuse me i'll go back a second unit

114
00:04:06,159 --> 00:04:10,879
tests were fast

115
00:04:08,480 --> 00:04:13,040
very very very fast you could run

116
00:04:10,879 --> 00:04:16,399
hundreds if not thousands of unit tests

117
00:04:13,040 --> 00:04:18,478
in in a matter of seconds okay because

118
00:04:16,399 --> 00:04:19,918
they had no external dependencies

119
00:04:18,478 --> 00:04:22,479
then we moved into the level of

120
00:04:19,918 --> 00:04:23,919
integration tests and integration tests

121
00:04:22,479 --> 00:04:26,400
allowed us to

122
00:04:23,919 --> 00:04:27,680
check that pieces of our system were

123
00:04:26,400 --> 00:04:29,758
working together

124
00:04:27,680 --> 00:04:32,400
so we could actually call the database

125
00:04:29,759 --> 00:04:33,840
here we could actually call that

126
00:04:32,400 --> 00:04:36,880
the code was able to talk to the

127
00:04:33,840 --> 00:04:39,440
database and connect to the database

128
00:04:36,880 --> 00:04:40,320
and these were much slower and we

129
00:04:39,440 --> 00:04:42,320
started doing

130
00:04:40,320 --> 00:04:44,080
crazy things in our industry like only

131
00:04:42,320 --> 00:04:46,880
making our integration tests run on

132
00:04:44,080 --> 00:04:48,880
chrome per night or twice per day or

133
00:04:46,880 --> 00:04:51,199
different scenarios that allowed the

134
00:04:48,880 --> 00:04:52,719
feedback to be a little faster still

135
00:04:51,199 --> 00:04:55,759
and then we realized that the

136
00:04:52,720 --> 00:04:58,479
integration tests were still not enough

137
00:04:55,759 --> 00:05:00,639
so we had to do end-to-end testing now

138
00:04:58,479 --> 00:05:03,039
what i mean by end-to-end testing is

139
00:05:00,639 --> 00:05:04,479
from the outside of the application in

140
00:05:03,039 --> 00:05:05,919
the whole way through

141
00:05:04,479 --> 00:05:08,080
whether it talk to the file system the

142
00:05:05,919 --> 00:05:10,799
database or whatever and actually adhere

143
00:05:08,080 --> 00:05:14,719
to what was going on

144
00:05:10,800 --> 00:05:16,639
now it's a pyramid for a reason because

145
00:05:14,720 --> 00:05:19,120
the comprehensiveness of the test

146
00:05:16,639 --> 00:05:21,680
actually goes up as we go up the pyramid

147
00:05:19,120 --> 00:05:22,800
but the brit the brittleness of the test

148
00:05:21,680 --> 00:05:25,680
also goes up

149
00:05:22,800 --> 00:05:27,360
as we go up the pyramid now you can have

150
00:05:25,680 --> 00:05:28,400
tens of thousands of unit tests and you

151
00:05:27,360 --> 00:05:29,759
can change your line of code

152
00:05:28,400 --> 00:05:32,000
you can break tens of thousand line

153
00:05:29,759 --> 00:05:33,600
lines of unit tests and it's pretty

154
00:05:32,000 --> 00:05:36,240
simple in order to actually

155
00:05:33,600 --> 00:05:38,800
refactor and update them if you have

156
00:05:36,240 --> 00:05:40,800
tens of thousands of integration or

157
00:05:38,800 --> 00:05:42,880
excuse me end-to-end tests that talk to

158
00:05:40,800 --> 00:05:44,479
your system from the outside going in

159
00:05:42,880 --> 00:05:48,000
the chances of you being able to fix

160
00:05:44,479 --> 00:05:49,599
them all very easily is a lot less

161
00:05:48,000 --> 00:05:52,000
and then we start doing things like

162
00:05:49,600 --> 00:05:56,479
deleting them or adding skips

163
00:05:52,000 --> 00:05:56,960
in our testing does the same hierarchy

164
00:05:56,479 --> 00:05:59,599
of

165
00:05:56,960 --> 00:06:01,599
testing work in operations can anybody

166
00:05:59,600 --> 00:06:04,479
tell me do they follow

167
00:06:01,600 --> 00:06:05,520
a similar style of testing within the

168
00:06:04,479 --> 00:06:08,159
infrastructure

169
00:06:05,520 --> 00:06:10,400
or operations style systems of their

170
00:06:08,160 --> 00:06:12,639
company

171
00:06:10,400 --> 00:06:14,719
two three people those three people i

172
00:06:12,639 --> 00:06:16,639
will buy you a beer

173
00:06:14,720 --> 00:06:20,000
like actually because it's quite cheap

174
00:06:16,639 --> 00:06:22,960
here but not in the city

175
00:06:20,000 --> 00:06:25,919
now we haven't gone through this same

176
00:06:22,960 --> 00:06:29,039
evolution of testing cicd

177
00:06:25,919 --> 00:06:31,120
for developers was a huge thing way back

178
00:06:29,039 --> 00:06:33,680
in the early 2000s

179
00:06:31,120 --> 00:06:34,639
and if you ask the developer excuse me

180
00:06:33,680 --> 00:06:36,240
an operator

181
00:06:34,639 --> 00:06:37,759
and i'm going to class them as like you

182
00:06:36,240 --> 00:06:39,919
know traditional operators

183
00:06:37,759 --> 00:06:41,840
people who like used to think that we

184
00:06:39,919 --> 00:06:43,198
used to feed them pizza under the stairs

185
00:06:41,840 --> 00:06:44,560
and stuff like that before the evolution

186
00:06:43,199 --> 00:06:48,080
of devops of course

187
00:06:44,560 --> 00:06:51,039
but if you ask those same people

188
00:06:48,080 --> 00:06:52,479
did they hook their um their scripts for

189
00:06:51,039 --> 00:06:55,360
infrastructure up to ci

190
00:06:52,479 --> 00:06:56,560
cd they would probably ask you we

191
00:06:55,360 --> 00:06:58,560
managed the seat

192
00:06:56,560 --> 00:07:00,160
they would suggest that we manage the cd

193
00:06:58,560 --> 00:07:01,280
tool we know our scripts shouldn't go in

194
00:07:00,160 --> 00:07:02,880
there

195
00:07:01,280 --> 00:07:04,880
and then we've got to this point where

196
00:07:02,880 --> 00:07:06,159
we have the rise of infrastructure

197
00:07:04,880 --> 00:07:09,919
testing

198
00:07:06,160 --> 00:07:11,599
now it's not a new thing it's really not

199
00:07:09,919 --> 00:07:12,560
a new thing you can see people are doing

200
00:07:11,599 --> 00:07:14,240
it today

201
00:07:12,560 --> 00:07:16,639
and there are tools that have been

202
00:07:14,240 --> 00:07:17,199
around for a long time really a long

203
00:07:16,639 --> 00:07:19,360
time

204
00:07:17,199 --> 00:07:21,039
anyone use test kitchen for puppet back

205
00:07:19,360 --> 00:07:24,080
in the day quite a few people

206
00:07:21,039 --> 00:07:27,840
everyone anyone heard of server spec

207
00:07:24,080 --> 00:07:29,120
yeah chef spec these are all tools that

208
00:07:27,840 --> 00:07:30,560
have been around and actually part of

209
00:07:29,120 --> 00:07:32,639
the ecosystem for a while

210
00:07:30,560 --> 00:07:35,520
but they were very much picked up by a

211
00:07:32,639 --> 00:07:37,120
small amount of people in the ecosystem

212
00:07:35,520 --> 00:07:38,799
because that's they had the freedom to

213
00:07:37,120 --> 00:07:40,479
do it they were working i'm not going to

214
00:07:38,800 --> 00:07:42,000
say more on greenfield products but they

215
00:07:40,479 --> 00:07:44,560
were in a scenario where they could

216
00:07:42,000 --> 00:07:46,240
actually build this into their pipeline

217
00:07:44,560 --> 00:07:48,400
into their scenario

218
00:07:46,240 --> 00:07:51,280
and what it ended up doing is it gave us

219
00:07:48,400 --> 00:07:54,638
this as the normal testing pyramid for

220
00:07:51,280 --> 00:07:57,440
for operations now

221
00:07:54,639 --> 00:07:58,000
this only is acceptance tests and i'm

222
00:07:57,440 --> 00:07:59,759
going to say

223
00:07:58,000 --> 00:08:01,599
i'm going to call them acceptance tests

224
00:07:59,759 --> 00:08:03,680
because it fits into the ecosystem the

225
00:08:01,599 --> 00:08:05,280
model i created before so you can

226
00:08:03,680 --> 00:08:07,280
try and relate so it's the middle

227
00:08:05,280 --> 00:08:10,000
segment of the last

228
00:08:07,280 --> 00:08:10,719
testing pyramid but unfortunately this

229
00:08:10,000 --> 00:08:14,000
is

230
00:08:10,720 --> 00:08:17,280
the area where we were testing after

231
00:08:14,000 --> 00:08:19,599
resources had been created okay

232
00:08:17,280 --> 00:08:21,198
we were actually testing that the tools

233
00:08:19,599 --> 00:08:23,360
that we used

234
00:08:21,199 --> 00:08:24,560
were doing the job that we asked them to

235
00:08:23,360 --> 00:08:27,680
do

236
00:08:24,560 --> 00:08:29,440
which is a valid um

237
00:08:27,680 --> 00:08:31,120
level of testing it really is because if

238
00:08:29,440 --> 00:08:35,279
you're going to outsource their tool you

239
00:08:31,120 --> 00:08:35,279
expect that tool to work and that's okay

240
00:08:35,760 --> 00:08:39,838
but the better testing pyramid for ops

241
00:08:38,880 --> 00:08:43,039
would also

242
00:08:39,839 --> 00:08:45,760
include a level of unit tests below now

243
00:08:43,039 --> 00:08:50,160
what i mean by a level of unit tests

244
00:08:45,760 --> 00:08:52,399
is that in this previous scenario

245
00:08:50,160 --> 00:08:54,000
you would actually have to let's pretend

246
00:08:52,399 --> 00:08:54,880
that you're deploying to the cloud for

247
00:08:54,000 --> 00:08:58,399
example

248
00:08:54,880 --> 00:08:59,360
you would have to have credentials on

249
00:08:58,399 --> 00:09:01,600
your machine

250
00:08:59,360 --> 00:09:03,040
as a developer or as an operator or an

251
00:09:01,600 --> 00:09:04,959
infrastructure person or a devops

252
00:09:03,040 --> 00:09:07,040
engineer whatever you call yourself

253
00:09:04,959 --> 00:09:08,079
that would allow you to talk to the

254
00:09:07,040 --> 00:09:10,880
resources that you

255
00:09:08,080 --> 00:09:13,279
created in the cloud that you created

256
00:09:10,880 --> 00:09:16,160
them in

257
00:09:13,279 --> 00:09:17,920
okay so it was after the fact and

258
00:09:16,160 --> 00:09:22,160
because it was after the fact

259
00:09:17,920 --> 00:09:25,839
problems can already have arisen

260
00:09:22,160 --> 00:09:25,839
who has heard of gdpr

261
00:09:26,560 --> 00:09:31,119
i'm sure it's the bane of your life if

262
00:09:29,120 --> 00:09:34,000
you're in the infrastructure world

263
00:09:31,120 --> 00:09:35,839
but because we wrote tests after the

264
00:09:34,000 --> 00:09:37,040
fact if we wrote tests that basically

265
00:09:35,839 --> 00:09:39,760
says hey

266
00:09:37,040 --> 00:09:42,560
this resource that we created needs to

267
00:09:39,760 --> 00:09:44,560
be within a specific region in our cloud

268
00:09:42,560 --> 00:09:47,518
and someone created it and it's already

269
00:09:44,560 --> 00:09:47,920
created in the default aws region which

270
00:09:47,519 --> 00:09:50,800
is

271
00:09:47,920 --> 00:09:51,680
us east one we've already potentially

272
00:09:50,800 --> 00:09:55,040
broken

273
00:09:51,680 --> 00:09:56,319
gdpr because we have stored information

274
00:09:55,040 --> 00:09:57,519
somewhere where it's not allowed to be

275
00:09:56,320 --> 00:10:00,080
stored

276
00:09:57,519 --> 00:10:01,440
so after the fact is only really part of

277
00:10:00,080 --> 00:10:03,839
it

278
00:10:01,440 --> 00:10:06,000
so we needed to interact or into

279
00:10:03,839 --> 00:10:07,920
integrate these these level of tests

280
00:10:06,000 --> 00:10:10,079
which are unit tests so

281
00:10:07,920 --> 00:10:12,000
it's about understanding that the code

282
00:10:10,079 --> 00:10:14,000
will do what it's supposed to do

283
00:10:12,000 --> 00:10:16,560
rather than has done what it is supposed

284
00:10:14,000 --> 00:10:18,399
to do and they're extremely interested

285
00:10:16,560 --> 00:10:22,399
in the reason why

286
00:10:18,399 --> 00:10:24,079
no devops is brilliant

287
00:10:22,399 --> 00:10:25,440
okay brings the developers and the

288
00:10:24,079 --> 00:10:28,800
operators together

289
00:10:25,440 --> 00:10:30,959
what about the per security people okay

290
00:10:28,800 --> 00:10:31,599
and we have the rise of devsecops which

291
00:10:30,959 --> 00:10:33,839
is

292
00:10:31,600 --> 00:10:34,720
a huge part of the industry right now

293
00:10:33,839 --> 00:10:36,640
and there's

294
00:10:34,720 --> 00:10:39,519
there's all sorts of things happening

295
00:10:36,640 --> 00:10:41,360
but without embedding them

296
00:10:39,519 --> 00:10:42,959
in what we're trying to do and testing

297
00:10:41,360 --> 00:10:46,000
after the fact

298
00:10:42,959 --> 00:10:49,040
we can do all sorts of date crazy

299
00:10:46,000 --> 00:10:49,839
dumb things in the cloud and i really

300
00:10:49,040 --> 00:10:53,040
mean

301
00:10:49,839 --> 00:10:55,279
things that to you look sane to the

302
00:10:53,040 --> 00:10:58,319
operator to the security people

303
00:10:55,279 --> 00:11:00,800
are not and not only that they can cause

304
00:10:58,320 --> 00:11:02,959
your company big problems

305
00:11:00,800 --> 00:11:05,040
this just makes me laugh in so many

306
00:11:02,959 --> 00:11:07,640
different ways

307
00:11:05,040 --> 00:11:09,920
because there is actually an admin at

308
00:11:07,640 --> 00:11:13,519
kremlin.ru account spotted on

309
00:11:09,920 --> 00:11:16,240
thousands of russian mongodb servers

310
00:11:13,519 --> 00:11:17,600
okay i'm not pointing any fingers but i

311
00:11:16,240 --> 00:11:19,920
just think it's hilarious

312
00:11:17,600 --> 00:11:22,800
but it's more of the fact that it's

313
00:11:19,920 --> 00:11:25,199
unsecured mongodb databases

314
00:11:22,800 --> 00:11:27,599
were the source of information for this

315
00:11:25,200 --> 00:11:30,160
anyone use mongodb

316
00:11:27,600 --> 00:11:32,160
yeah you probably have this a lot

317
00:11:30,160 --> 00:11:34,000
kidding i'm joking i'm joking i'm so i

318
00:11:32,160 --> 00:11:36,240
pick on mongodb developers a lot

319
00:11:34,000 --> 00:11:37,120
and and sometimes other like types of

320
00:11:36,240 --> 00:11:39,680
things

321
00:11:37,120 --> 00:11:41,519
then another one people who deployed an

322
00:11:39,680 --> 00:11:45,199
elastic search cluster

323
00:11:41,519 --> 00:11:50,000
actually leaked the data of 6.7

324
00:11:45,200 --> 00:11:50,000
million people in ecuador

325
00:11:50,079 --> 00:11:54,479
and this is like this was what 2019 this

326
00:11:53,040 --> 00:11:57,599
is last year

327
00:11:54,480 --> 00:11:59,600
and in the three months or four months

328
00:11:57,600 --> 00:12:01,839
since that happened we didn't learn our

329
00:11:59,600 --> 00:12:04,880
lesson and it just came out

330
00:12:01,839 --> 00:12:08,560
two two weeks ago

331
00:12:04,880 --> 00:12:10,079
that microsoft actually exposed the

332
00:12:08,560 --> 00:12:13,119
customer data

333
00:12:10,079 --> 00:12:16,800
conversations of 250

334
00:12:13,120 --> 00:12:19,040
million people in office 365

335
00:12:16,800 --> 00:12:19,920
and again this is based on elastic

336
00:12:19,040 --> 00:12:23,199
search

337
00:12:19,920 --> 00:12:25,120
okay now i'm sorry but if you're doing

338
00:12:23,200 --> 00:12:25,760
your unit testing and your integration

339
00:12:25,120 --> 00:12:28,399
testing

340
00:12:25,760 --> 00:12:30,720
that's brilliant but if you're not

341
00:12:28,399 --> 00:12:31,519
introducing some level of security

342
00:12:30,720 --> 00:12:34,959
testing

343
00:12:31,519 --> 00:12:38,160
or security validation or or basic

344
00:12:34,959 --> 00:12:40,479
sanity validation then you need to

345
00:12:38,160 --> 00:12:43,600
really start to think about how you can

346
00:12:40,480 --> 00:12:47,360
integrate that in 2020

347
00:12:43,600 --> 00:12:49,040
we are extremely extremely bad at

348
00:12:47,360 --> 00:12:51,040
security in our industry

349
00:12:49,040 --> 00:12:52,079
there is a very special sect of people

350
00:12:51,040 --> 00:12:54,240
who live it

351
00:12:52,079 --> 00:12:56,638
they breathe it and without them we

352
00:12:54,240 --> 00:13:00,000
would be in a much worse situation

353
00:12:56,639 --> 00:13:03,360
any security professionals in here

354
00:13:00,000 --> 00:13:03,760
two that's the people who we owe beers

355
00:13:03,360 --> 00:13:06,560
to

356
00:13:03,760 --> 00:13:08,319
right there and that's the people who we

357
00:13:06,560 --> 00:13:10,800
need to help integrate into

358
00:13:08,320 --> 00:13:12,000
our existing pipeline and our existing

359
00:13:10,800 --> 00:13:15,839
flow

360
00:13:12,000 --> 00:13:20,560
i believe the best testing pyramid

361
00:13:15,839 --> 00:13:22,880
should be this no i'm not suggesting

362
00:13:20,560 --> 00:13:25,359
that you have more security tests than

363
00:13:22,880 --> 00:13:28,000
acceptance tests and unit tests

364
00:13:25,360 --> 00:13:29,360
but the creation the management of our

365
00:13:28,000 --> 00:13:31,760
infrastructure

366
00:13:29,360 --> 00:13:33,839
is actually only a small part of what we

367
00:13:31,760 --> 00:13:36,319
do on a day-to-day basis

368
00:13:33,839 --> 00:13:38,079
okay keeping our system secure and

369
00:13:36,320 --> 00:13:41,199
keeping our systems running

370
00:13:38,079 --> 00:13:42,880
is a bigger part of what we do and if we

371
00:13:41,199 --> 00:13:44,719
can do something in our industry in

372
00:13:42,880 --> 00:13:47,199
order to keep that working

373
00:13:44,720 --> 00:13:49,440
then great so i'm going to show you some

374
00:13:47,199 --> 00:13:52,639
demos for these scenarios okay

375
00:13:49,440 --> 00:13:55,680
the demos are using a tool called polumi

376
00:13:52,639 --> 00:13:57,600
uh quick disclaimer um pollumi is not a

377
00:13:55,680 --> 00:13:59,279
paid for product this is not a product

378
00:13:57,600 --> 00:14:01,199
pitch in any way shape or form

379
00:13:59,279 --> 00:14:03,040
you can do the same thing with using

380
00:14:01,199 --> 00:14:04,160
tools like terra grunt and so on and so

381
00:14:03,040 --> 00:14:06,160
forth

382
00:14:04,160 --> 00:14:07,360
it's based on an apache 2 license it's

383
00:14:06,160 --> 00:14:11,279
open source

384
00:14:07,360 --> 00:14:13,040
and it is not strictly a wrapper around

385
00:14:11,279 --> 00:14:14,399
terraform that allows you to write your

386
00:14:13,040 --> 00:14:15,680
code in typescript

387
00:14:14,399 --> 00:14:18,399
and i will demo that because i'm

388
00:14:15,680 --> 00:14:23,439
actually writing it in javascript

389
00:14:18,399 --> 00:14:23,440
so and i'm going to start um very easily

390
00:14:23,920 --> 00:14:30,000
and very easily will be is that

391
00:14:27,120 --> 00:14:32,800
i have a polumi pro you need to be able

392
00:14:30,000 --> 00:14:36,399
to see this i apologize

393
00:14:32,800 --> 00:14:36,399
i have a pollumi project

394
00:14:36,880 --> 00:14:44,480
there we go very good and that will just

395
00:14:40,399 --> 00:14:48,000
allow me to create some infrastructure

396
00:14:44,480 --> 00:14:50,880
now i am going to create elastic

397
00:14:48,000 --> 00:14:51,680
eks clusters okay kubernetes clusters in

398
00:14:50,880 --> 00:14:53,439
amazon

399
00:14:51,680 --> 00:14:56,399
and therefore we know they're slow as

400
00:14:53,440 --> 00:14:59,440
anything so i've pre-created them

401
00:14:56,399 --> 00:15:02,800
otherwise it would be a very boring demo

402
00:14:59,440 --> 00:15:05,199
and you would actually have to um

403
00:15:02,800 --> 00:15:06,319
watch the screen just sit there and go

404
00:15:05,199 --> 00:15:08,800
next next

405
00:15:06,320 --> 00:15:10,639
next next next so we're going to skip

406
00:15:08,800 --> 00:15:12,399
like the creation of the clusters

407
00:15:10,639 --> 00:15:16,240
but i'm going to do a few things okay so

408
00:15:12,399 --> 00:15:21,040
i'm going to say fosdem one

409
00:15:16,240 --> 00:15:24,160
and and it is called a bucket

410
00:15:21,040 --> 00:15:25,760
so by default polumi is

411
00:15:24,160 --> 00:15:27,920
an infrastructure as code tool that

412
00:15:25,760 --> 00:15:30,399
allows you to keep your

413
00:15:27,920 --> 00:15:32,560
infrastructure code declarative allows

414
00:15:30,399 --> 00:15:34,639
you to lay it out in a real language

415
00:15:32,560 --> 00:15:36,079
but it is actually under the hood

416
00:15:34,639 --> 00:15:37,440
managing it in the same way the

417
00:15:36,079 --> 00:15:39,599
terraform would manage it

418
00:15:37,440 --> 00:15:40,720
this is using typescript just to show

419
00:15:39,600 --> 00:15:43,519
you that's there

420
00:15:40,720 --> 00:15:44,480
now everything is sub packaged so i can

421
00:15:43,519 --> 00:15:46,480
say aws

422
00:15:44,480 --> 00:15:49,120
dots and i can get all of the sub

423
00:15:46,480 --> 00:15:50,959
packages so let's just continue with s3

424
00:15:49,120 --> 00:15:53,360
but the most important thing is that

425
00:15:50,959 --> 00:15:54,800
it's real code so you can actually look

426
00:15:53,360 --> 00:15:56,639
at what's happening under the hood by

427
00:15:54,800 --> 00:15:58,000
stepping into the integrations

428
00:15:56,639 --> 00:15:59,600
and i can have a look at the arguments

429
00:15:58,000 --> 00:16:00,959
that are required because everything is

430
00:15:59,600 --> 00:16:04,320
there

431
00:16:00,959 --> 00:16:06,719
now back to what it's doing so what this

432
00:16:04,320 --> 00:16:10,240
is doing is this is going to create an

433
00:16:06,720 --> 00:16:11,199
s3 bucket with the name fosdem testing

434
00:16:10,240 --> 00:16:14,320
bucket

435
00:16:11,199 --> 00:16:15,680
and has set an acl of public read anyone

436
00:16:14,320 --> 00:16:17,040
have public read buckets in their

437
00:16:15,680 --> 00:16:20,079
organization

438
00:16:17,040 --> 00:16:23,599
okay let me rephrase that does anybody

439
00:16:20,079 --> 00:16:25,120
have real supposed need for public read

440
00:16:23,600 --> 00:16:28,240
buckets in their organization

441
00:16:25,120 --> 00:16:29,839
and actually have them okay so there are

442
00:16:28,240 --> 00:16:31,360
other people who just leak public

443
00:16:29,839 --> 00:16:33,680
buckets all over the place and you can

444
00:16:31,360 --> 00:16:33,680
search

445
00:16:35,279 --> 00:16:40,079
yeah so i i there's a load of stuff on

446
00:16:38,639 --> 00:16:41,120
the internet that will actually allow

447
00:16:40,079 --> 00:16:43,279
you to go and

448
00:16:41,120 --> 00:16:45,279
find public read buckets on the internet

449
00:16:43,279 --> 00:16:46,320
and um it's declarative so it allows you

450
00:16:45,279 --> 00:16:47,920
to do it

451
00:16:46,320 --> 00:16:49,680
and then i'm going to say i've already

452
00:16:47,920 --> 00:16:51,120
created these resources because i'm this

453
00:16:49,680 --> 00:16:56,160
is not a paloomy demo

454
00:16:51,120 --> 00:16:58,800
uh i'm going to say fosdem oh wrong one

455
00:16:56,160 --> 00:16:58,800
fosdem

456
00:16:59,360 --> 00:17:03,839
crap cluster it's actually i actually

457
00:17:01,839 --> 00:17:06,079
called it my crappy cluster

458
00:17:03,839 --> 00:17:08,400
because it is a wrapper around the

459
00:17:06,079 --> 00:17:09,438
cluster that is not deployed inside a

460
00:17:08,400 --> 00:17:12,240
vpc

461
00:17:09,439 --> 00:17:13,919
it doesn't have subnets it's basically

462
00:17:12,240 --> 00:17:16,240
public facing

463
00:17:13,919 --> 00:17:18,480
in every way shape or form don't create

464
00:17:16,240 --> 00:17:22,480
any cast cluster like this please okay

465
00:17:18,480 --> 00:17:25,599
and then lastly i actually created

466
00:17:22,480 --> 00:17:28,319
um a different one called uh

467
00:17:25,599 --> 00:17:29,760
better cluster which we can see is we

468
00:17:28,319 --> 00:17:32,799
create a vpc

469
00:17:29,760 --> 00:17:33,440
and then we pass the vpc id and the

470
00:17:32,799 --> 00:17:35,520
public

471
00:17:33,440 --> 00:17:37,120
public subnet ids in here but it's just

472
00:17:35,520 --> 00:17:37,918
to demonstrate i haven't created private

473
00:17:37,120 --> 00:17:39,918
subnets

474
00:17:37,919 --> 00:17:42,160
but this is based on something inside

475
00:17:39,919 --> 00:17:44,320
pollumi called polomi crosswalk

476
00:17:42,160 --> 00:17:46,400
which is an opinionated api across the

477
00:17:44,320 --> 00:17:49,200
top of a vpc it creates sensible

478
00:17:46,400 --> 00:17:50,960
sensible defaults and it sets a version

479
00:17:49,200 --> 00:17:53,520
okay because the one before

480
00:17:50,960 --> 00:17:55,520
doesn't have a version now this is

481
00:17:53,520 --> 00:17:58,799
really important to talk about

482
00:17:55,520 --> 00:17:59,200
there are a number of companies who do

483
00:17:58,799 --> 00:18:01,760
not

484
00:17:59,200 --> 00:18:02,799
allow you to use the latest and greatest

485
00:18:01,760 --> 00:18:05,679
version

486
00:18:02,799 --> 00:18:06,559
of either databases or any type of

487
00:18:05,679 --> 00:18:08,160
software

488
00:18:06,559 --> 00:18:10,000
that are out there because they have to

489
00:18:08,160 --> 00:18:12,240
go through compliance checks

490
00:18:10,000 --> 00:18:14,799
they have to go through different pieces

491
00:18:12,240 --> 00:18:17,520
so if you're just setting no

492
00:18:14,799 --> 00:18:19,679
version then you could get yourself in a

493
00:18:17,520 --> 00:18:22,240
little bit of a problem anyway because

494
00:18:19,679 --> 00:18:25,280
you're potentially going to annoy the

495
00:18:22,240 --> 00:18:29,120
security team that's there

496
00:18:25,280 --> 00:18:31,120
and lastly i can actually save that and

497
00:18:29,120 --> 00:18:34,320
i can go back to my

498
00:18:31,120 --> 00:18:36,000
code and i can say pull me up

499
00:18:34,320 --> 00:18:38,879
and let's just check i haven't broke any

500
00:18:36,000 --> 00:18:38,880
of my infrastructure

501
00:18:39,200 --> 00:18:42,640
i have no internet where's my internet

502
00:18:40,799 --> 00:18:45,280
connection going

503
00:18:42,640 --> 00:18:45,280
one second

504
00:18:47,520 --> 00:18:51,840
it's a super secret uh wi-fi password so

505
00:18:52,480 --> 00:18:58,799
why you not work

506
00:18:57,120 --> 00:19:02,239
the next demo is even better because you

507
00:18:58,799 --> 00:19:02,240
can turn off the internet connection

508
00:19:02,400 --> 00:19:06,320
go away there we go

509
00:19:06,559 --> 00:19:11,120
that's better okay so let's just run

510
00:19:09,600 --> 00:19:12,639
plummy up

511
00:19:11,120 --> 00:19:15,439
i'll take a little swig of beer and it

512
00:19:12,640 --> 00:19:15,440
still doesn't work

513
00:19:15,520 --> 00:19:20,000
still thinking about it it's thinking

514
00:19:18,640 --> 00:19:22,160
about it

515
00:19:20,000 --> 00:19:23,840
there we go it's better so it it does

516
00:19:22,160 --> 00:19:26,240
the same type of thing under the hood is

517
00:19:23,840 --> 00:19:28,000
terraform it reconciles the state

518
00:19:26,240 --> 00:19:32,240
with actually what's going on and what's

519
00:19:28,000 --> 00:19:32,240
not but effectively it tells me

520
00:19:32,640 --> 00:19:39,919
that i

521
00:19:36,799 --> 00:19:41,440
i have no changes in my infrastructure

522
00:19:39,919 --> 00:19:42,720
okay so it's not this is not a limit

523
00:19:41,440 --> 00:19:43,760
demo if you come to conflict management

524
00:19:42,720 --> 00:19:45,360
camp come and have a look at how it

525
00:19:43,760 --> 00:19:47,039
really works but this will tell us that

526
00:19:45,360 --> 00:19:48,399
nothing has changed because i have

527
00:19:47,039 --> 00:19:50,320
existing infrastructure that is

528
00:19:48,400 --> 00:19:53,440
pre-created

529
00:19:50,320 --> 00:19:55,200
i really hope so let's go back to the

530
00:19:53,440 --> 00:19:57,039
code while that's finished and run in

531
00:19:55,200 --> 00:19:58,640
and we're going to add this idea of

532
00:19:57,039 --> 00:20:00,960
specs okay

533
00:19:58,640 --> 00:20:02,320
now anyone ever heard of bdd behavioral

534
00:20:00,960 --> 00:20:05,360
driven development

535
00:20:02,320 --> 00:20:06,240
okay where you sort of define in your

536
00:20:05,360 --> 00:20:09,280
code

537
00:20:06,240 --> 00:20:11,360
in a user agnostic language like what

538
00:20:09,280 --> 00:20:12,879
it's supposed to look like and what

539
00:20:11,360 --> 00:20:15,760
what you're actually supposed to adhere

540
00:20:12,880 --> 00:20:18,880
to so i'm going to create a new file

541
00:20:15,760 --> 00:20:20,799
and i'm going to call it index.ts and i

542
00:20:18,880 --> 00:20:21,360
actually renamed this snippet recently

543
00:20:20,799 --> 00:20:23,039
because it was

544
00:20:21,360 --> 00:20:24,559
something that could have been annoying

545
00:20:23,039 --> 00:20:27,919
for people but um

546
00:20:24,559 --> 00:20:31,120
so we're going to call it maca

547
00:20:27,919 --> 00:20:35,120
test spec and we basically are using

548
00:20:31,120 --> 00:20:37,199
maca which is a javascript test runner

549
00:20:35,120 --> 00:20:38,959
and it allows you to write specs in a

550
00:20:37,200 --> 00:20:39,280
very simple way using another tool

551
00:20:38,960 --> 00:20:41,840
called

552
00:20:39,280 --> 00:20:43,200
chai so that one's not interesting but

553
00:20:41,840 --> 00:20:44,080
now we're actually going to write a real

554
00:20:43,200 --> 00:20:47,039
spec

555
00:20:44,080 --> 00:20:48,240
and i'm going to say bucket.spec.ts now

556
00:20:47,039 --> 00:20:51,039
remember this is

557
00:20:48,240 --> 00:20:53,520
testing after the fact resources have

558
00:20:51,039 --> 00:20:55,120
already been created here

559
00:20:53,520 --> 00:20:57,520
and we're now checking to make sure that

560
00:20:55,120 --> 00:21:01,439
they've been created as expected

561
00:20:57,520 --> 00:21:04,080
so i'm going to say fosdem

562
00:21:01,440 --> 00:21:04,080
bucket spec

563
00:21:05,679 --> 00:21:10,240
and i'm going to say import

564
00:21:14,840 --> 00:21:17,840
dammit

565
00:21:19,600 --> 00:21:24,959
let's just delete that there we go

566
00:21:25,120 --> 00:21:28,239
that's better now we're in the right

567
00:21:27,120 --> 00:21:32,080
place

568
00:21:28,240 --> 00:21:33,280
so force them buckets back perfect

569
00:21:32,080 --> 00:21:35,120
that's much better

570
00:21:33,280 --> 00:21:37,200
so we're actually going to import my

571
00:21:35,120 --> 00:21:38,479
bucket which we'll look at in a second

572
00:21:37,200 --> 00:21:40,880
okay and we're going to wrap it in a

573
00:21:38,480 --> 00:21:43,760
condition that basically says if it's

574
00:21:40,880 --> 00:21:45,200
a polymer dry run then forget it because

575
00:21:43,760 --> 00:21:47,200
there is no infrastructure that has been

576
00:21:45,200 --> 00:21:50,080
created here so pulling me will fail

577
00:21:47,200 --> 00:21:52,400
but we can start to write specs like it

578
00:21:50,080 --> 00:21:55,840
should have an exact name

579
00:21:52,400 --> 00:21:59,200
it should be in eu west one it

580
00:21:55,840 --> 00:22:02,559
should have a private acl okay

581
00:21:59,200 --> 00:22:04,559
so these are making sure that the

582
00:22:02,559 --> 00:22:06,320
resources that we've actually created

583
00:22:04,559 --> 00:22:07,280
adhere to what we've actually asked it

584
00:22:06,320 --> 00:22:09,200
to create

585
00:22:07,280 --> 00:22:10,960
and we can of course go back straight

586
00:22:09,200 --> 00:22:12,159
away to the code that we've looked at

587
00:22:10,960 --> 00:22:14,640
and created

588
00:22:12,159 --> 00:22:15,840
and we're going to say well the bucket

589
00:22:14,640 --> 00:22:17,520
name is correct

590
00:22:15,840 --> 00:22:19,199
but the acl is wrong so we're going to

591
00:22:17,520 --> 00:22:20,960
fail at least one test

592
00:22:19,200 --> 00:22:22,720
and then we can actually add the check

593
00:22:20,960 --> 00:22:24,720
about where it's been deployed

594
00:22:22,720 --> 00:22:26,080
but the most interesting thing is at the

595
00:22:24,720 --> 00:22:30,320
end of my

596
00:22:26,080 --> 00:22:31,678
excellent at the end of my um

597
00:22:30,320 --> 00:22:33,039
some of the question oh i thought

598
00:22:31,679 --> 00:22:34,640
somebody showed it somewhere at the end

599
00:22:33,039 --> 00:22:37,440
of my code i can

600
00:22:34,640 --> 00:22:39,520
call the function run tests and as part

601
00:22:37,440 --> 00:22:42,640
of my code run

602
00:22:39,520 --> 00:22:44,240
i can actually and you'll see very

603
00:22:42,640 --> 00:22:46,799
shortly in the top right hand corner

604
00:22:44,240 --> 00:22:49,840
you'll see that it starts to run maca

605
00:22:46,799 --> 00:22:52,480
at the top in very like three two one

606
00:22:49,840 --> 00:22:52,480
hopefully now

607
00:22:52,840 --> 00:22:57,918
please please

608
00:22:56,400 --> 00:22:59,440
there we go you can see it here it's

609
00:22:57,919 --> 00:23:01,280
just my screen is too much

610
00:22:59,440 --> 00:23:02,559
but very short it will get an output

611
00:23:01,280 --> 00:23:05,440
based on the back of it

612
00:23:02,559 --> 00:23:06,799
now of course that's only one set of

613
00:23:05,440 --> 00:23:08,960
specs that went with it

614
00:23:06,799 --> 00:23:10,639
let's add in some more specs because we

615
00:23:08,960 --> 00:23:12,159
still have this thing called my crappy

616
00:23:10,640 --> 00:23:15,919
cluster

617
00:23:12,159 --> 00:23:22,799
uh eks.spec.ts

618
00:23:15,919 --> 00:23:26,880
and we're going to say bucket

619
00:23:22,799 --> 00:23:30,879
buckets back i'm going to delete this

620
00:23:26,880 --> 00:23:34,559
i'm going to say fosdem

621
00:23:30,880 --> 00:23:38,720
one eks spec and we can

622
00:23:34,559 --> 00:23:38,720
really start to take advantage of

623
00:23:39,760 --> 00:23:44,158
and look i can just import my crappy

624
00:23:41,520 --> 00:23:45,679
cluster and lastly everything i have to

625
00:23:44,159 --> 00:23:50,080
do is import star

626
00:23:45,679 --> 00:23:52,480
as aws from pollumi aws

627
00:23:50,080 --> 00:23:53,520
just because of what it's actually doing

628
00:23:52,480 --> 00:23:56,960
but we can

629
00:23:53,520 --> 00:23:59,039
start to run and say look i need my

630
00:23:56,960 --> 00:24:01,600
version of eks

631
00:23:59,039 --> 00:24:03,520
to be 1.13 because that's what the

632
00:24:01,600 --> 00:24:04,879
security part of our organization

633
00:24:03,520 --> 00:24:08,000
adheres to

634
00:24:04,880 --> 00:24:09,039
i need and if you don't do this today

635
00:24:08,000 --> 00:24:11,679
please do

636
00:24:09,039 --> 00:24:13,840
i need my infrastructure in amazon to

637
00:24:11,679 --> 00:24:16,080
run in its own vpc

638
00:24:13,840 --> 00:24:17,760
not the default vpc that you get with

639
00:24:16,080 --> 00:24:19,360
your amazon regions

640
00:24:17,760 --> 00:24:21,039
okay and we can write these tests and of

641
00:24:19,360 --> 00:24:22,320
course we can include these tests in our

642
00:24:21,039 --> 00:24:25,440
output

643
00:24:22,320 --> 00:24:28,399
um but if we go back to our last code

644
00:24:25,440 --> 00:24:30,159
we'll actually see very shortly it's

645
00:24:28,400 --> 00:24:32,080
because i might i'm actually exporting a

646
00:24:30,159 --> 00:24:35,360
ton of stuff for this demo

647
00:24:32,080 --> 00:24:36,799
um come on

648
00:24:35,360 --> 00:24:40,240
this is now where i go off the screen

649
00:24:36,799 --> 00:24:40,240
right because i have cube config

650
00:24:44,000 --> 00:24:48,720
so okay we'll do it again

651
00:24:47,520 --> 00:24:51,679
and you'll see what comes out the back

652
00:24:48,720 --> 00:24:52,080
of it now this is testing before the

653
00:24:51,679 --> 00:24:54,320
fact

654
00:24:52,080 --> 00:24:57,840
um excuse me after the fact and after

655
00:24:54,320 --> 00:24:59,918
the fact is one of those things where

656
00:24:57,840 --> 00:25:01,360
it's kind of difficult to do of course

657
00:24:59,919 --> 00:25:02,960
you can fail your build

658
00:25:01,360 --> 00:25:04,479
you can have a specific build which

659
00:25:02,960 --> 00:25:05,039
actually runs this again and again and

660
00:25:04,480 --> 00:25:06,720
again

661
00:25:05,039 --> 00:25:08,240
to make sure nobody's changing any

662
00:25:06,720 --> 00:25:10,080
characteristics of the resources that

663
00:25:08,240 --> 00:25:12,400
are created within the cloud

664
00:25:10,080 --> 00:25:13,840
but it doesn't really give you anything

665
00:25:12,400 --> 00:25:15,360
so we'll go and have a look at a better

666
00:25:13,840 --> 00:25:18,799
example

667
00:25:15,360 --> 00:25:20,559
any questions so far anybody care

668
00:25:18,799 --> 00:25:21,679
oh question you just have a staging

669
00:25:20,559 --> 00:25:23,039
environment right and then it's not

670
00:25:21,679 --> 00:25:24,799
after the fact

671
00:25:23,039 --> 00:25:26,158
you so the question is i could do this

672
00:25:24,799 --> 00:25:27,840
in a staging environment and then it's

673
00:25:26,159 --> 00:25:31,200
not after the fact

674
00:25:27,840 --> 00:25:32,799
yes the trouble is is that not everyone

675
00:25:31,200 --> 00:25:34,000
adheres to the fact that production is

676
00:25:32,799 --> 00:25:36,000
the same as staging

677
00:25:34,000 --> 00:25:37,360
i wish i wish we could guarantee that

678
00:25:36,000 --> 00:25:40,480
was the case

679
00:25:37,360 --> 00:25:41,840
but in every company i have worked in

680
00:25:40,480 --> 00:25:43,520
including companies where i have been

681
00:25:41,840 --> 00:25:44,399
involved in the operations team that

682
00:25:43,520 --> 00:25:45,840
isn't the case

683
00:25:44,400 --> 00:25:47,679
and that could partly be done to the

684
00:25:45,840 --> 00:25:49,678
fact that i'm also lazy as well

685
00:25:47,679 --> 00:25:51,360
so it's just it's a human problem right

686
00:25:49,679 --> 00:25:52,880
so but you are 100

687
00:25:51,360 --> 00:25:54,559
correct you could test and you could

688
00:25:52,880 --> 00:25:55,440
verify and then promote the build and so

689
00:25:54,559 --> 00:25:58,480
on and so forth

690
00:25:55,440 --> 00:26:01,279
okay so let's think about

691
00:25:58,480 --> 00:26:03,120
how we can do this in a different way

692
00:26:01,279 --> 00:26:05,520
now

693
00:26:03,120 --> 00:26:07,199
it's very much a case of we have an

694
00:26:05,520 --> 00:26:08,799
infrastructure and again just to show

695
00:26:07,200 --> 00:26:11,039
you that we are not a rapper around

696
00:26:08,799 --> 00:26:13,520
terraform just for typescript

697
00:26:11,039 --> 00:26:14,320
we actually allowed javascript as well

698
00:26:13,520 --> 00:26:17,520
but

699
00:26:14,320 --> 00:26:19,039
we are in a situation where

700
00:26:17,520 --> 00:26:20,639
you can actually write your

701
00:26:19,039 --> 00:26:23,279
infrastructure as code

702
00:26:20,640 --> 00:26:24,080
in a number of different languages and

703
00:26:23,279 --> 00:26:26,559
you can actually

704
00:26:24,080 --> 00:26:28,480
bring all of these languages together to

705
00:26:26,559 --> 00:26:29,840
write common tests

706
00:26:28,480 --> 00:26:31,919
because if you can give people the

707
00:26:29,840 --> 00:26:33,760
common tests or a

708
00:26:31,919 --> 00:26:36,159
central place for common tests then you

709
00:26:33,760 --> 00:26:39,200
can test your infrastructure whole scale

710
00:26:36,159 --> 00:26:42,799
now the last one actually caused me

711
00:26:39,200 --> 00:26:45,760
to spin up eks clusters the um

712
00:26:42,799 --> 00:26:47,600
vpcs which included public subnets which

713
00:26:45,760 --> 00:26:49,760
included

714
00:26:47,600 --> 00:26:51,439
also private subnets which had elastic

715
00:26:49,760 --> 00:26:53,200
ips and mac gateways and it is

716
00:26:51,440 --> 00:26:55,200
immediately costing me money

717
00:26:53,200 --> 00:26:57,679
in my development cycle and takes

718
00:26:55,200 --> 00:27:00,559
approximately 20 to 25 minutes

719
00:26:57,679 --> 00:27:02,159
to deploy the eks cluster and that for

720
00:27:00,559 --> 00:27:03,840
me is not acceptable

721
00:27:02,159 --> 00:27:05,360
that's not what i want to be sitting

722
00:27:03,840 --> 00:27:06,799
spending my time doing although i can

723
00:27:05,360 --> 00:27:07,678
drink beer at the same time but that's

724
00:27:06,799 --> 00:27:10,080
okay

725
00:27:07,679 --> 00:27:12,240
but the fact that we can do that means

726
00:27:10,080 --> 00:27:13,918
we can we should be able to mock what is

727
00:27:12,240 --> 00:27:16,080
going on

728
00:27:13,919 --> 00:27:18,640
now this is where we are working right

729
00:27:16,080 --> 00:27:22,320
now inside palumi

730
00:27:18,640 --> 00:27:25,679
we believe that because

731
00:27:22,320 --> 00:27:27,600
you are writing in code in an ecosystem

732
00:27:25,679 --> 00:27:28,320
that manages that code and runs that

733
00:27:27,600 --> 00:27:31,439
code

734
00:27:28,320 --> 00:27:33,439
you should be able to write tests in the

735
00:27:31,440 --> 00:27:34,080
same way as other people within that

736
00:27:33,440 --> 00:27:36,880
ecosystem

737
00:27:34,080 --> 00:27:38,000
write their tests okay so i'm going to

738
00:27:36,880 --> 00:27:39,600
write some

739
00:27:38,000 --> 00:27:41,120
some this is actually how i would

740
00:27:39,600 --> 00:27:42,879
declare my infrastructure

741
00:27:41,120 --> 00:27:45,120
but i'm going to write some javascript

742
00:27:42,880 --> 00:27:46,559
tests in order to actually test my

743
00:27:45,120 --> 00:27:48,559
infrastructure

744
00:27:46,559 --> 00:27:50,240
so if i ran pull me up in this this

745
00:27:48,559 --> 00:27:51,520
would go and create an instance and so

746
00:27:50,240 --> 00:27:56,000
on and so forth

747
00:27:51,520 --> 00:27:56,000
now i want to prove to you that

748
00:27:56,320 --> 00:28:03,279
i don't have anything

749
00:28:00,159 --> 00:28:06,720
grep aws access key there are no

750
00:28:03,279 --> 00:28:09,120
aws access keys on this part of my

751
00:28:06,720 --> 00:28:11,360
terminal this profile right now

752
00:28:09,120 --> 00:28:13,039
okay so what we're going to do is we're

753
00:28:11,360 --> 00:28:15,918
going to create a new file

754
00:28:13,039 --> 00:28:16,960
and we're going to call the file ec2

755
00:28:15,919 --> 00:28:20,559
tests

756
00:28:16,960 --> 00:28:21,919
dot js okay

757
00:28:20,559 --> 00:28:24,480
now the first thing that we actually

758
00:28:21,919 --> 00:28:28,159
have to do is we need to

759
00:28:24,480 --> 00:28:28,159
let um

760
00:28:28,480 --> 00:28:35,440
maca equals require

761
00:28:32,240 --> 00:28:38,880
mauka excuse me let

762
00:28:35,440 --> 00:28:43,039
assert equals require

763
00:28:38,880 --> 00:28:47,039
assert and then let polumi

764
00:28:43,039 --> 00:28:51,520
equals require

765
00:28:47,039 --> 00:28:53,360
no at palumi

766
00:28:51,520 --> 00:28:55,200
slash polumi so we're actually bringing

767
00:28:53,360 --> 00:28:57,199
in the modules like we would do in any

768
00:28:55,200 --> 00:28:59,200
in any test and framework and everything

769
00:28:57,200 --> 00:29:00,880
we do

770
00:28:59,200 --> 00:29:02,000
now going back to my code the first

771
00:29:00,880 --> 00:29:04,080
thing i'm going to do is i'm going to

772
00:29:02,000 --> 00:29:04,559
create a security group and the security

773
00:29:04,080 --> 00:29:08,158
group

774
00:29:04,559 --> 00:29:10,639
is allows access to port 22

775
00:29:08,159 --> 00:29:13,440
from everywhere and it allows access to

776
00:29:10,640 --> 00:29:17,840
port 80 from everywhere

777
00:29:13,440 --> 00:29:17,840
hmm can anybody see a problem

778
00:29:20,320 --> 00:29:25,039
okay and then what we're doing is we're

779
00:29:23,440 --> 00:29:27,679
deploying the instance

780
00:29:25,039 --> 00:29:28,960
on the default security group or an ec2

781
00:29:27,679 --> 00:29:30,880
classic

782
00:29:28,960 --> 00:29:32,880
which would again allow it to be

783
00:29:30,880 --> 00:29:36,640
accessible from the world

784
00:29:32,880 --> 00:29:39,760
hmm do we see any further problems here

785
00:29:36,640 --> 00:29:42,799
so immediately what looks like some

786
00:29:39,760 --> 00:29:45,039
it's basic infrastructure code can cause

787
00:29:42,799 --> 00:29:47,279
us a number of issues right here because

788
00:29:45,039 --> 00:29:48,240
if this is like a server that that

789
00:29:47,279 --> 00:29:50,240
people can access

790
00:29:48,240 --> 00:29:51,520
inside your network then this is a big

791
00:29:50,240 --> 00:29:54,080
problem it's a big

792
00:29:51,520 --> 00:29:55,120
problem and if you're doing this right

793
00:29:54,080 --> 00:29:58,720
now

794
00:29:55,120 --> 00:30:01,918
please try and not do this anymore

795
00:29:58,720 --> 00:30:04,960
please okay so

796
00:30:01,919 --> 00:30:08,000
then we're going to say fuzz them

797
00:30:04,960 --> 00:30:10,640
to marks

798
00:30:08,000 --> 00:30:12,799
we're going to mock the cloud okay and

799
00:30:10,640 --> 00:30:16,000
it is literally mocking the cloud

800
00:30:12,799 --> 00:30:18,879
so we're going to say that whenever

801
00:30:16,000 --> 00:30:20,320
anything from polumi wants to create a

802
00:30:18,880 --> 00:30:22,080
new resource

803
00:30:20,320 --> 00:30:23,918
or update the resource or read the

804
00:30:22,080 --> 00:30:26,480
resource of type

805
00:30:23,919 --> 00:30:27,919
ec2 security group then we're going to

806
00:30:26,480 --> 00:30:30,480
return this id

807
00:30:27,919 --> 00:30:32,399
any inputs that you require and we're

808
00:30:30,480 --> 00:30:35,440
actually going to set the arn

809
00:30:32,399 --> 00:30:37,279
of the the um the resource

810
00:30:35,440 --> 00:30:39,200
and we could do the same with instance

811
00:30:37,279 --> 00:30:41,200
and you can basically do this the whole

812
00:30:39,200 --> 00:30:42,159
way down right you can mock any resource

813
00:30:41,200 --> 00:30:44,159
it doesn't matter

814
00:30:42,159 --> 00:30:46,159
it's not about what this is actually

815
00:30:44,159 --> 00:30:50,320
doing and then we're going to say let

816
00:30:46,159 --> 00:30:52,279
infra equals require

817
00:30:50,320 --> 00:30:55,279
and we're going to say dot in for

818
00:30:52,279 --> 00:30:55,279
index.js

819
00:30:55,760 --> 00:30:59,279
and then lastly we're going to say fuzz

820
00:30:58,000 --> 00:31:01,440
them

821
00:30:59,279 --> 00:31:02,840
two specs let's just make sure i haven't

822
00:31:01,440 --> 00:31:05,039
thought oh no i added it twice i

823
00:31:02,840 --> 00:31:05,360
apologize so what we're going to say is

824
00:31:05,039 --> 00:31:06,799
that

825
00:31:05,360 --> 00:31:08,399
we're actually going to write our specs

826
00:31:06,799 --> 00:31:09,360
against our infrastructure here

827
00:31:08,399 --> 00:31:12,000
so we're going to say we're going to

828
00:31:09,360 --> 00:31:12,320
describe the server and we need to say

829
00:31:12,000 --> 00:31:16,080
that

830
00:31:12,320 --> 00:31:16,559
all instances that are in the index.js

831
00:31:16,080 --> 00:31:19,918
file

832
00:31:16,559 --> 00:31:23,120
have a name tag anyone do cost

833
00:31:19,919 --> 00:31:25,120
allocation within their cloud does

834
00:31:23,120 --> 00:31:27,518
anybody get extremely frustrated like i

835
00:31:25,120 --> 00:31:30,080
do when people don't add tags to their

836
00:31:27,519 --> 00:31:32,000
resources yeah it's annoying right it's

837
00:31:30,080 --> 00:31:35,439
great this will actually catch it

838
00:31:32,000 --> 00:31:38,480
in advance as part of your ci pipeline

839
00:31:35,440 --> 00:31:40,159
if people have not added tags so

840
00:31:38,480 --> 00:31:42,799
i could very quickly change it from the

841
00:31:40,159 --> 00:31:44,720
name tag to

842
00:31:42,799 --> 00:31:46,080
a cost allocation or a project or

843
00:31:44,720 --> 00:31:46,880
whatever you call it internally in your

844
00:31:46,080 --> 00:31:49,678
company

845
00:31:46,880 --> 00:31:50,080
then we want to do things like must not

846
00:31:49,679 --> 00:31:53,600
use

847
00:31:50,080 --> 00:31:56,080
user data so i'm very much somebody who

848
00:31:53,600 --> 00:31:58,480
agrees with immutable infrastructure i

849
00:31:56,080 --> 00:31:59,519
love creating new amis those amis are

850
00:31:58,480 --> 00:32:01,200
launched they have everything they

851
00:31:59,519 --> 00:32:03,360
already need they're well tested

852
00:32:01,200 --> 00:32:05,600
and everything is there so i don't like

853
00:32:03,360 --> 00:32:06,879
people using user data on the servers i

854
00:32:05,600 --> 00:32:08,559
manage and create

855
00:32:06,880 --> 00:32:10,240
so we've written a quick check that

856
00:32:08,559 --> 00:32:12,559
stops people from doing that

857
00:32:10,240 --> 00:32:13,679
lastly you must actually have like a

858
00:32:12,559 --> 00:32:16,000
name security group

859
00:32:13,679 --> 00:32:17,120
but the most important spec of the lot

860
00:32:16,000 --> 00:32:20,399
in this case

861
00:32:17,120 --> 00:32:21,678
is it must not have port 22 open to the

862
00:32:20,399 --> 00:32:24,158
internet

863
00:32:21,679 --> 00:32:25,519
okay so it's you know it's everything is

864
00:32:24,159 --> 00:32:28,880
there there's no problem

865
00:32:25,519 --> 00:32:32,080
but how do we actually run this so

866
00:32:28,880 --> 00:32:35,360
i'm going to run the command pollumi

867
00:32:32,080 --> 00:32:36,879
no js stack okay so i'm mocking a stack

868
00:32:35,360 --> 00:32:38,799
inside polumi

869
00:32:36,880 --> 00:32:40,840
um that's the equivalent of a terraform

870
00:32:38,799 --> 00:32:42,960
workspace let's not get into that

871
00:32:40,840 --> 00:32:44,879
conversation because i know anton's not

872
00:32:42,960 --> 00:32:46,720
a big fan

873
00:32:44,880 --> 00:32:48,720
we're going to say the project which is

874
00:32:46,720 --> 00:32:50,080
the the the project within the

875
00:32:48,720 --> 00:32:51,760
what you're trying to run it in again

876
00:32:50,080 --> 00:32:52,480
it's an implementation detail of polymer

877
00:32:51,760 --> 00:32:54,960
itself

878
00:32:52,480 --> 00:32:55,600
but lastly we want to run pollumion test

879
00:32:54,960 --> 00:32:57,919
mode

880
00:32:55,600 --> 00:32:58,799
which means it will not talk to the

881
00:32:57,919 --> 00:33:00,640
clouds

882
00:32:58,799 --> 00:33:02,799
because i have no credentials on here

883
00:33:00,640 --> 00:33:07,120
and then i'm going to run the file

884
00:33:02,799 --> 00:33:09,200
ec2 tests.js and if i run this

885
00:33:07,120 --> 00:33:11,199
we can actually see that right now we're

886
00:33:09,200 --> 00:33:13,039
actually failing every test

887
00:33:11,200 --> 00:33:15,039
and we get an output of why so the first

888
00:33:13,039 --> 00:33:17,200
thing is we're missing a name tag

889
00:33:15,039 --> 00:33:18,320
okay next thing is we're actually using

890
00:33:17,200 --> 00:33:19,919
user data

891
00:33:18,320 --> 00:33:21,918
next thing is we're using an illegal

892
00:33:19,919 --> 00:33:24,960
security group and lastly we have

893
00:33:21,919 --> 00:33:27,600
port 22 open to the world okay

894
00:33:24,960 --> 00:33:28,080
this is a really simple validation unit

895
00:33:27,600 --> 00:33:31,279
test

896
00:33:28,080 --> 00:33:34,639
check that we as infrastructure people

897
00:33:31,279 --> 00:33:36,840
or if we have been forced into

898
00:33:34,640 --> 00:33:38,880
granting access to those wicked

899
00:33:36,840 --> 00:33:41,120
developers to actually launch

900
00:33:38,880 --> 00:33:42,320
infrastructure in your cloud that we can

901
00:33:41,120 --> 00:33:45,279
force them

902
00:33:42,320 --> 00:33:46,000
to build before they actually even run

903
00:33:45,279 --> 00:33:48,960
anything

904
00:33:46,000 --> 00:33:50,880
and of course ourselves as operators if

905
00:33:48,960 --> 00:33:52,799
we can make it difficult

906
00:33:50,880 --> 00:33:55,679
for the nasty developers to create

907
00:33:52,799 --> 00:33:58,480
instances before they can cause problems

908
00:33:55,679 --> 00:34:00,640
then we should okay and this is a great

909
00:33:58,480 --> 00:34:04,080
way of being able to do that

910
00:34:00,640 --> 00:34:06,080
so that's before the fact

911
00:34:04,080 --> 00:34:08,239
and then we already did after the fact

912
00:34:06,080 --> 00:34:10,639
let's look at the security side of

913
00:34:08,239 --> 00:34:12,799
things okay let's look at how you can

914
00:34:10,639 --> 00:34:15,520
apply policy as code anyone ever heard

915
00:34:12,800 --> 00:34:17,919
of hashicorp sentinel

916
00:34:15,520 --> 00:34:20,000
yeah so sentinel is a tool by hashicorp

917
00:34:17,918 --> 00:34:21,759
that allows you to write

918
00:34:20,000 --> 00:34:23,520
security policies around the

919
00:34:21,760 --> 00:34:25,440
infrastructure that you manage okay

920
00:34:23,520 --> 00:34:26,960
of course we wouldn't be a good

921
00:34:25,440 --> 00:34:27,599
competitor if we didn't have a similar

922
00:34:26,960 --> 00:34:29,918
thing

923
00:34:27,599 --> 00:34:31,679
but again this is open source you're not

924
00:34:29,918 --> 00:34:34,719
forced to pay for this okay

925
00:34:31,679 --> 00:34:38,159
and that's the most important thing

926
00:34:34,719 --> 00:34:39,678
now i have a much more interest in

927
00:34:38,159 --> 00:34:42,079
architecture here

928
00:34:39,679 --> 00:34:42,800
okay so the first thing is i'm going to

929
00:34:42,079 --> 00:34:45,200
call

930
00:34:42,800 --> 00:34:46,000
the file s3 and then i'm going to call

931
00:34:45,199 --> 00:34:48,158
compute

932
00:34:46,000 --> 00:34:49,918
because we're actually segmenting the

933
00:34:48,159 --> 00:34:50,639
difference between like storage and

934
00:34:49,918 --> 00:34:53,839
compute

935
00:34:50,639 --> 00:34:57,200
and if i have a look at s3

936
00:34:53,839 --> 00:34:58,880
we're actually creating an s3 bucket

937
00:34:57,200 --> 00:35:02,000
that is a website

938
00:34:58,880 --> 00:35:04,560
that has a default index.html that

939
00:35:02,000 --> 00:35:05,280
has server-side encryption using a kms

940
00:35:04,560 --> 00:35:07,440
key id

941
00:35:05,280 --> 00:35:08,960
okay and of course we haven't created

942
00:35:07,440 --> 00:35:10,960
the kms id with blooming

943
00:35:08,960 --> 00:35:12,640
so we're just hard-coding the arn for

944
00:35:10,960 --> 00:35:16,240
the string in here

945
00:35:12,640 --> 00:35:18,640
and then we go inside compute

946
00:35:16,240 --> 00:35:19,598
and compute now you're seeing the power

947
00:35:18,640 --> 00:35:22,640
of pollumi

948
00:35:19,599 --> 00:35:25,520
okay so we have a vpc which

949
00:35:22,640 --> 00:35:27,359
we're passing base tags and the tags

950
00:35:25,520 --> 00:35:28,079
will actually append the tags the whole

951
00:35:27,359 --> 00:35:30,560
way down

952
00:35:28,079 --> 00:35:32,560
but the interesting thing is for each of

953
00:35:30,560 --> 00:35:36,078
the zone ids that come back

954
00:35:32,560 --> 00:35:38,400
we can map a subnet to that zone id

955
00:35:36,079 --> 00:35:39,599
give it a specific cider block based on

956
00:35:38,400 --> 00:35:42,720
the map number

957
00:35:39,599 --> 00:35:45,440
and then lastly we can actually map an

958
00:35:42,720 --> 00:35:48,000
instance into each subnet this is

959
00:35:45,440 --> 00:35:50,079
technically how you would build

960
00:35:48,000 --> 00:35:51,040
an architecture in amazon okay you would

961
00:35:50,079 --> 00:35:54,400
load balance

962
00:35:51,040 --> 00:35:56,079
your vpc across all of the availability

963
00:35:54,400 --> 00:35:57,520
zones or a number of availability zones

964
00:35:56,079 --> 00:35:59,520
within your region and then you would

965
00:35:57,520 --> 00:36:01,200
deploy an instance of your application

966
00:35:59,520 --> 00:36:02,560
into each of the availability zones for

967
00:36:01,200 --> 00:36:04,879
high availability okay

968
00:36:02,560 --> 00:36:06,640
not groundbreaking stuff by any means

969
00:36:04,880 --> 00:36:10,079
and then lastly we just

970
00:36:06,640 --> 00:36:11,440
um push out some some data

971
00:36:10,079 --> 00:36:13,839
now there's a few things that we can

972
00:36:11,440 --> 00:36:14,800
test here really a few things that we

973
00:36:13,839 --> 00:36:16,320
can test here

974
00:36:14,800 --> 00:36:19,040
and we have this idea called policy as

975
00:36:16,320 --> 00:36:20,720
code okay and policy as code allows us

976
00:36:19,040 --> 00:36:22,079
to do a lot of things

977
00:36:20,720 --> 00:36:25,040
so the first thing that it allows us to

978
00:36:22,079 --> 00:36:27,119
do is subnet sizing

979
00:36:25,040 --> 00:36:28,240
one of the things that we do very badly

980
00:36:27,119 --> 00:36:30,320
within the industry

981
00:36:28,240 --> 00:36:31,439
is we just choose random subnet sizes

982
00:36:30,320 --> 00:36:33,920
and we don't understand

983
00:36:31,440 --> 00:36:34,880
the connotations of what happens when we

984
00:36:33,920 --> 00:36:37,440
run out

985
00:36:34,880 --> 00:36:39,440
of address spaces inside the subnet and

986
00:36:37,440 --> 00:36:40,400
to remap things around can be crazy

987
00:36:39,440 --> 00:36:43,520
painful

988
00:36:40,400 --> 00:36:45,520
so i know a lot of parts of of

989
00:36:43,520 --> 00:36:47,359
the industry right now that actually try

990
00:36:45,520 --> 00:36:50,560
and enforce policies

991
00:36:47,359 --> 00:36:52,560
that stop developers from choosing

992
00:36:50,560 --> 00:36:54,799
subnets that are too large

993
00:36:52,560 --> 00:36:56,880
and they're trying to be kept to below

994
00:36:54,800 --> 00:36:59,359
24 and so on and so forth okay

995
00:36:56,880 --> 00:37:00,800
so we can write a policy that says each

996
00:36:59,359 --> 00:37:04,640
of the subnets

997
00:37:00,800 --> 00:37:07,119
that we create must be less

998
00:37:04,640 --> 00:37:07,680
than slash 24 okay and the policy is

999
00:37:07,119 --> 00:37:09,680
there

1000
00:37:07,680 --> 00:37:11,359
and based on the code that validates the

1001
00:37:09,680 --> 00:37:14,078
policy it will actually run

1002
00:37:11,359 --> 00:37:16,960
and update it then we can say each of

1003
00:37:14,079 --> 00:37:16,960
the instances

1004
00:37:17,760 --> 00:37:21,359
just for the people at the back each of

1005
00:37:20,079 --> 00:37:24,960
the instances that are

1006
00:37:21,359 --> 00:37:28,078
created must have specific tags of name

1007
00:37:24,960 --> 00:37:31,760
business unit and cost center okay again

1008
00:37:28,079 --> 00:37:31,760
so you can track within the organization

1009
00:37:31,839 --> 00:37:37,440
and then inside our s3 policies

1010
00:37:35,520 --> 00:37:38,800
this is where we can start to do things

1011
00:37:37,440 --> 00:37:41,040
like bucket not

1012
00:37:38,800 --> 00:37:43,280
must not be publicly accessible this is

1013
00:37:41,040 --> 00:37:45,359
a basic security concern

1014
00:37:43,280 --> 00:37:47,680
this is something we must be doing if

1015
00:37:45,359 --> 00:37:50,078
you're using state in your bucket

1016
00:37:47,680 --> 00:37:51,759
the bucket must have versioning enabled

1017
00:37:50,079 --> 00:37:52,480
or if you're pushing any different files

1018
00:37:51,760 --> 00:37:54,880
in there

1019
00:37:52,480 --> 00:37:56,480
we should have no static website hosting

1020
00:37:54,880 --> 00:37:58,880
because there's no need for it

1021
00:37:56,480 --> 00:38:00,800
maybe you're hosting your own blog and

1022
00:37:58,880 --> 00:38:01,520
your company's s3 buckets and they don't

1023
00:38:00,800 --> 00:38:03,839
know

1024
00:38:01,520 --> 00:38:05,040
whatever and lastly that you should

1025
00:38:03,839 --> 00:38:07,520
actually have

1026
00:38:05,040 --> 00:38:08,560
server side encryption with kms enabled

1027
00:38:07,520 --> 00:38:12,000
these are

1028
00:38:08,560 --> 00:38:15,200
company mandated policies that

1029
00:38:12,000 --> 00:38:16,480
every piece of infrastructure in s3

1030
00:38:15,200 --> 00:38:18,720
or that's chosen pieces of

1031
00:38:16,480 --> 00:38:21,440
infrastructure and s3 for this demo

1032
00:38:18,720 --> 00:38:21,919
actually need to adhere to and the same

1033
00:38:21,440 --> 00:38:24,240
for

1034
00:38:21,920 --> 00:38:26,079
the compute things now you can even take

1035
00:38:24,240 --> 00:38:28,000
a step further you can say

1036
00:38:26,079 --> 00:38:29,359
the version of my sequel that has

1037
00:38:28,000 --> 00:38:32,160
released or that we're

1038
00:38:29,359 --> 00:38:34,319
deploying into rds or into whatever

1039
00:38:32,160 --> 00:38:37,520
cloud you want that's not aws specific

1040
00:38:34,320 --> 00:38:38,480
must be less than 5.7 because our dbas

1041
00:38:37,520 --> 00:38:41,040
and our security team

1042
00:38:38,480 --> 00:38:42,560
haven't validated that this goes against

1043
00:38:41,040 --> 00:38:43,759
all the different practices of what

1044
00:38:42,560 --> 00:38:47,040
they're doing

1045
00:38:43,760 --> 00:38:48,320
now we can actually do that by going in

1046
00:38:47,040 --> 00:38:51,680
here

1047
00:38:48,320 --> 00:38:53,040
and we have this idea right now where we

1048
00:38:51,680 --> 00:38:58,000
have

1049
00:38:53,040 --> 00:39:00,320
ploomy experimental

1050
00:38:58,000 --> 00:39:01,040
it sounds like a harry potter thing um

1051
00:39:00,320 --> 00:39:03,119
it's not

1052
00:39:01,040 --> 00:39:05,040
um all it is is there are a number of

1053
00:39:03,119 --> 00:39:07,599
features that we're testing

1054
00:39:05,040 --> 00:39:08,720
but we don't want to stop the deployment

1055
00:39:07,599 --> 00:39:10,560
of our tool

1056
00:39:08,720 --> 00:39:12,480
so we're just going to enable pollumi

1057
00:39:10,560 --> 00:39:14,400
experimental equals true

1058
00:39:12,480 --> 00:39:17,359
okay and then based on that i can say

1059
00:39:14,400 --> 00:39:17,359
polumi preview

1060
00:39:17,839 --> 00:39:20,720
policy pack

1061
00:39:20,960 --> 00:39:24,960
and it's called the folder is called

1062
00:39:22,800 --> 00:39:28,079
policy as

1063
00:39:24,960 --> 00:39:30,160
code now policies can be mandatory

1064
00:39:28,079 --> 00:39:31,119
which will fail to build or they can be

1065
00:39:30,160 --> 00:39:34,480
advisory

1066
00:39:31,119 --> 00:39:35,200
okay things that you want people to

1067
00:39:34,480 --> 00:39:37,599
think about

1068
00:39:35,200 --> 00:39:39,439
but that it doesn't care okay it's not

1069
00:39:37,599 --> 00:39:40,240
as urgent as something that's like a

1070
00:39:39,440 --> 00:39:42,320
problem

1071
00:39:40,240 --> 00:39:43,839
now we can run this this is of course

1072
00:39:42,320 --> 00:39:44,880
can be run inside your ci tool

1073
00:39:43,839 --> 00:39:46,640
continually

1074
00:39:44,880 --> 00:39:47,920
or as part of a pull request before

1075
00:39:46,640 --> 00:39:48,960
anything happens and anything is

1076
00:39:47,920 --> 00:39:51,520
deployed

1077
00:39:48,960 --> 00:39:52,240
and we will get an output that tells us

1078
00:39:51,520 --> 00:39:55,359
what is

1079
00:39:52,240 --> 00:39:58,319
wrong with the code that we have created

1080
00:39:55,359 --> 00:40:00,640
hopefully it's running i promise it's

1081
00:39:58,320 --> 00:40:00,640
running

1082
00:40:01,119 --> 00:40:05,440
i did test this earlier and it does fail

1083
00:40:06,960 --> 00:40:14,000
come on come on gotta feed the children

1084
00:40:11,119 --> 00:40:16,079
there we go excellent so we can see

1085
00:40:14,000 --> 00:40:17,440
straight away we're failing every policy

1086
00:40:16,079 --> 00:40:18,000
that we have because of the code i've

1087
00:40:17,440 --> 00:40:21,119
written

1088
00:40:18,000 --> 00:40:25,040
our s3 is publicly um accessible um

1089
00:40:21,119 --> 00:40:26,880
subnets are bigger than 24 um

1090
00:40:25,040 --> 00:40:28,720
and and for every instance and for every

1091
00:40:26,880 --> 00:40:31,920
subnet you get you get that thing

1092
00:40:28,720 --> 00:40:33,439
right you don't need of course it would

1093
00:40:31,920 --> 00:40:35,839
be very nice if you use plumi

1094
00:40:33,440 --> 00:40:37,200
because i work for them you can use

1095
00:40:35,839 --> 00:40:39,359
tools to do this

1096
00:40:37,200 --> 00:40:41,520
okay you can really use other tools to

1097
00:40:39,359 --> 00:40:43,440
do this i'm not suggesting that

1098
00:40:41,520 --> 00:40:44,560
you need to go and spend money and do

1099
00:40:43,440 --> 00:40:46,640
different things

1100
00:40:44,560 --> 00:40:47,759
just start to bring these types of

1101
00:40:46,640 --> 00:40:49,200
practices

1102
00:40:47,760 --> 00:40:51,040
into what you're building and what

1103
00:40:49,200 --> 00:40:53,200
you're doing

1104
00:40:51,040 --> 00:40:55,440
now the last demo i have because i'm

1105
00:40:53,200 --> 00:40:58,240
seriously running out of time

1106
00:40:55,440 --> 00:40:59,920
is people have asked me listen i have

1107
00:40:58,240 --> 00:41:02,879
existing infrastructure

1108
00:40:59,920 --> 00:41:04,960
that is in the cloud that is not managed

1109
00:41:02,880 --> 00:41:06,000
by terraform or not managed by pollumi

1110
00:41:04,960 --> 00:41:10,000
or ansible or any

1111
00:41:06,000 --> 00:41:12,720
of these tools what can i do today

1112
00:41:10,000 --> 00:41:14,480
to start running some level of testing

1113
00:41:12,720 --> 00:41:16,078
this type of testing

1114
00:41:14,480 --> 00:41:17,839
after the ti after you know to

1115
00:41:16,079 --> 00:41:19,280
understand the details of what's going

1116
00:41:17,839 --> 00:41:22,960
on

1117
00:41:19,280 --> 00:41:23,760
against these resources so we can do it

1118
00:41:22,960 --> 00:41:27,280
of course

1119
00:41:23,760 --> 00:41:29,200
okay now polumi this can

1120
00:41:27,280 --> 00:41:31,280
pull him is an engine just think of it

1121
00:41:29,200 --> 00:41:34,799
as a cli runner okay an engine

1122
00:41:31,280 --> 00:41:38,960
okay so here we're going to write a file

1123
00:41:34,800 --> 00:41:42,079
which will be called our index.ts again

1124
00:41:38,960 --> 00:41:42,079
that one already exists

1125
00:41:42,640 --> 00:41:48,960
new file which will be specs

1126
00:41:45,839 --> 00:41:52,480
slash index.ts because again we want

1127
00:41:48,960 --> 00:41:55,599
an instance of the mocker testrunner

1128
00:41:52,480 --> 00:41:58,400
okay which we can have

1129
00:41:55,599 --> 00:42:00,839
and then we can actually say file which

1130
00:41:58,400 --> 00:42:05,359
will be

1131
00:42:00,839 --> 00:42:07,119
bucket.spec.ts and if i say bucket spec

1132
00:42:05,359 --> 00:42:09,440
but if i delete this because i know it

1133
00:42:07,119 --> 00:42:13,119
doesn't work right now

1134
00:42:09,440 --> 00:42:16,000
and then lastly if i say fuzz them for

1135
00:42:13,119 --> 00:42:18,560
bucket spec then based on exactly what's

1136
00:42:16,000 --> 00:42:22,079
going on right now

1137
00:42:18,560 --> 00:42:25,920
i need to import star as aws

1138
00:42:22,079 --> 00:42:28,160
from at pollumi aws

1139
00:42:25,920 --> 00:42:29,040
then we can actually set a constant

1140
00:42:28,160 --> 00:42:30,879
right now

1141
00:42:29,040 --> 00:42:34,560
which will be a constant of our bucket

1142
00:42:30,880 --> 00:42:38,079
name okay bucket name will be fosdem

1143
00:42:34,560 --> 00:42:42,480
what did i call it go away siri

1144
00:42:38,079 --> 00:42:45,680
always so needy like really

1145
00:42:42,480 --> 00:42:49,520
we called it fosdem testing bucket

1146
00:42:45,680 --> 00:42:49,520
uh let's go back in here

1147
00:42:49,839 --> 00:42:54,880
and what we can do is we can actually as

1148
00:42:52,319 --> 00:42:58,000
part of a lookup

1149
00:42:54,880 --> 00:43:02,079
oh the import is bad where

1150
00:42:58,000 --> 00:43:07,200
it is not yeah it's there

1151
00:43:02,079 --> 00:43:07,200
go away think why you not want to work

1152
00:43:08,640 --> 00:43:16,000
there we go thank you people that's

1153
00:43:12,319 --> 00:43:19,920
why the live demos are not fun

1154
00:43:16,000 --> 00:43:21,440
um so we have aws from polluting aws

1155
00:43:19,920 --> 00:43:23,440
and we can see it's gone red right it's

1156
00:43:21,440 --> 00:43:25,359
gone green right now now inside it we

1157
00:43:23,440 --> 00:43:26,319
can actually set the constant of the

1158
00:43:25,359 --> 00:43:29,200
bucket name

1159
00:43:26,319 --> 00:43:31,040
which we know is a resource that exists

1160
00:43:29,200 --> 00:43:32,078
this can be a database it can be a vpc

1161
00:43:31,040 --> 00:43:34,480
it can be an instance

1162
00:43:32,079 --> 00:43:35,280
it can be any piece of information you

1163
00:43:34,480 --> 00:43:37,599
want

1164
00:43:35,280 --> 00:43:38,800
okay and of course because even if

1165
00:43:37,599 --> 00:43:39,359
you're in terraform you can do this as

1166
00:43:38,800 --> 00:43:41,440
well

1167
00:43:39,359 --> 00:43:43,880
because terraform is data sources so

1168
00:43:41,440 --> 00:43:45,359
we're running the command

1169
00:43:43,880 --> 00:43:48,400
aws.s3.getbucket

1170
00:43:45,359 --> 00:43:50,880
so get me the details of the bucket from

1171
00:43:48,400 --> 00:43:52,240
aws right now and then i can actually

1172
00:43:50,880 --> 00:43:54,640
write my specs of

1173
00:43:52,240 --> 00:43:56,799
it should be an east one it should not

1174
00:43:54,640 --> 00:43:58,240
have a website endpoint it should not

1175
00:43:56,800 --> 00:44:00,240
have public acl

1176
00:43:58,240 --> 00:44:01,839
it should have versioning enabled it

1177
00:44:00,240 --> 00:44:04,399
should have logs that are

1178
00:44:01,839 --> 00:44:05,759
being emptied greater than 45 days and

1179
00:44:04,400 --> 00:44:08,560
so on and so forth

1180
00:44:05,760 --> 00:44:09,680
okay so you can start this now you don't

1181
00:44:08,560 --> 00:44:11,599
need to be doing this

1182
00:44:09,680 --> 00:44:13,200
on green field applications or

1183
00:44:11,599 --> 00:44:15,839
greenfield infrastructure

1184
00:44:13,200 --> 00:44:17,759
if you have longer running servers that

1185
00:44:15,839 --> 00:44:20,000
you manage or longer running networking

1186
00:44:17,760 --> 00:44:21,839
infrastructure or even dns

1187
00:44:20,000 --> 00:44:24,079
that you manage you can be running these

1188
00:44:21,839 --> 00:44:26,078
style of spec tests

1189
00:44:24,079 --> 00:44:27,520
to understand that no one is changing

1190
00:44:26,079 --> 00:44:29,280
anything without you knowing it

1191
00:44:27,520 --> 00:44:31,599
okay these can be hooked up to a ci

1192
00:44:29,280 --> 00:44:35,200
building everything that's there

1193
00:44:31,599 --> 00:44:36,319
promise i'm almost done and then we can

1194
00:44:35,200 --> 00:44:38,799
all go and drink

1195
00:44:36,319 --> 00:44:39,680
i mean um have a nice tea and talk about

1196
00:44:38,800 --> 00:44:42,079
things

1197
00:44:39,680 --> 00:44:43,919
um so a well-tested infrastructure

1198
00:44:42,079 --> 00:44:46,640
ensures a number of things

1199
00:44:43,920 --> 00:44:49,119
okay and this is the key takeaways our

1200
00:44:46,640 --> 00:44:52,400
confidence in our changes

1201
00:44:49,119 --> 00:44:54,240
okay has anybody sort of sat with their

1202
00:44:52,400 --> 00:44:57,680
finger above the button

1203
00:44:54,240 --> 00:44:59,359
thinking what i might deploy this

1204
00:44:57,680 --> 00:45:01,118
but i'm not quite sure what it's going

1205
00:44:59,359 --> 00:45:03,119
to do me

1206
00:45:01,119 --> 00:45:04,400
a hundred percent me i've done this a

1207
00:45:03,119 --> 00:45:07,359
lot of times

1208
00:45:04,400 --> 00:45:09,280
it's going to introduce less risky

1209
00:45:07,359 --> 00:45:11,680
infrastructure deployments

1210
00:45:09,280 --> 00:45:13,200
which is seriously something that we

1211
00:45:11,680 --> 00:45:16,000
should all be striving for

1212
00:45:13,200 --> 00:45:17,520
and lastly we can forget this argument

1213
00:45:16,000 --> 00:45:18,800
of whether you want to deploy on a

1214
00:45:17,520 --> 00:45:21,200
friday or not

1215
00:45:18,800 --> 00:45:23,440
okay it's one of those things it

1216
00:45:21,200 --> 00:45:25,839
shouldn't matter if you have the correct

1217
00:45:23,440 --> 00:45:28,160
ci and testing and tooling around but if

1218
00:45:25,839 --> 00:45:32,319
you're very very strict on no fridays

1219
00:45:28,160 --> 00:45:34,480
then that's okay no fridays in summary

1220
00:45:32,319 --> 00:45:35,440
don't just test after resources have

1221
00:45:34,480 --> 00:45:38,000
been created

1222
00:45:35,440 --> 00:45:39,440
the damage may already have been done to

1223
00:45:38,000 --> 00:45:42,640
your infrastructure

1224
00:45:39,440 --> 00:45:43,920
to your company to your reputation so on

1225
00:45:42,640 --> 00:45:45,839
and so forth

1226
00:45:43,920 --> 00:45:47,280
for anybody who knows i'm not going to

1227
00:45:45,839 --> 00:45:50,240
talk about brexit

1228
00:45:47,280 --> 00:45:50,560
but there was just before christmas the

1229
00:45:50,240 --> 00:45:52,959
uh

1230
00:45:50,560 --> 00:45:53,680
the new the queen's new year's honors

1231
00:45:52,960 --> 00:45:56,880
list

1232
00:45:53,680 --> 00:45:58,799
in the uk uh caused a big story

1233
00:45:56,880 --> 00:46:00,160
because somebody actually uploaded the

1234
00:45:58,800 --> 00:46:01,920
entire spreadsheet

1235
00:46:00,160 --> 00:46:04,319
of all of the names of the uk honors

1236
00:46:01,920 --> 00:46:07,280
list including where they lived

1237
00:46:04,319 --> 00:46:08,560
now as one of the people on there was a

1238
00:46:07,280 --> 00:46:10,560
politician and another

1239
00:46:08,560 --> 00:46:12,560
person was one of the top policemen for

1240
00:46:10,560 --> 00:46:14,640
security concerns that was a problem

1241
00:46:12,560 --> 00:46:16,480
so it was too late it was out there it

1242
00:46:14,640 --> 00:46:19,040
was in the industry and it was wild

1243
00:46:16,480 --> 00:46:20,960
okay we need to ensure that our

1244
00:46:19,040 --> 00:46:21,680
infrastructure code is fit for purpose

1245
00:46:20,960 --> 00:46:24,160
without

1246
00:46:21,680 --> 00:46:25,680
spending money okay you shouldn't need

1247
00:46:24,160 --> 00:46:28,000
to be running a terraform up

1248
00:46:25,680 --> 00:46:30,000
or a plummy up or whatever the command

1249
00:46:28,000 --> 00:46:30,880
for ansible or salt or puppet or chef is

1250
00:46:30,000 --> 00:46:33,280
these days

1251
00:46:30,880 --> 00:46:35,280
at that point it's too late you're

1252
00:46:33,280 --> 00:46:38,000
spending money on resources

1253
00:46:35,280 --> 00:46:40,160
and lastly we need to ensure our

1254
00:46:38,000 --> 00:46:42,880
security our infrastructure code

1255
00:46:40,160 --> 00:46:44,078
doesn't cause us problems within our

1256
00:46:42,880 --> 00:46:46,880
organization

1257
00:46:44,079 --> 00:46:48,560
i have three minutes for questions if

1258
00:46:46,880 --> 00:46:51,920
anybody has any please

1259
00:46:48,560 --> 00:46:51,920
but shout very loud

1260
00:46:54,079 --> 00:47:01,280
question is where do i store the states

1261
00:46:57,440 --> 00:47:03,599
um in terms of my infrastructure or in

1262
00:47:01,280 --> 00:47:05,200
the demos right here

1263
00:47:03,599 --> 00:47:06,720
in polluting okay so is this a general

1264
00:47:05,200 --> 00:47:07,919
pollution question

1265
00:47:06,720 --> 00:47:10,160
okay it could be a general pullman

1266
00:47:07,920 --> 00:47:12,720
question um polluting me by default

1267
00:47:10,160 --> 00:47:14,879
will not store state locally it will use

1268
00:47:12,720 --> 00:47:15,520
the polumi sas which is free for single

1269
00:47:14,880 --> 00:47:17,520
user

1270
00:47:15,520 --> 00:47:21,440
but you can immediately turn around and

1271
00:47:17,520 --> 00:47:21,440
stop that by using the command

1272
00:47:22,960 --> 00:47:25,920
uh polumi

1273
00:47:27,200 --> 00:47:33,279
oh sorry sorry sorry sorry sorry so you

1274
00:47:29,920 --> 00:47:36,079
can say plummy login dash dash cloud url

1275
00:47:33,280 --> 00:47:38,079
and you can give it your s3 buckets and

1276
00:47:36,079 --> 00:47:40,559
you will be able to store your

1277
00:47:38,079 --> 00:47:41,839
infrastructure you don't have to use it

1278
00:47:40,559 --> 00:47:52,400
for what you're doing

1279
00:47:41,839 --> 00:47:54,720
is that okay next question anybody

1280
00:47:52,400 --> 00:47:56,160
great question is there a bunch of is

1281
00:47:54,720 --> 00:47:58,078
there a place on the internet where you

1282
00:47:56,160 --> 00:48:00,240
can go and grab a bunch of tests

1283
00:47:58,079 --> 00:48:01,440
that are already created and you can run

1284
00:48:00,240 --> 00:48:02,430
them in your infrastructure

1285
00:48:01,440 --> 00:48:04,960
polumi.com

1286
00:48:02,430 --> 00:48:08,558
[Laughter]

1287
00:48:04,960 --> 00:48:10,960
and now uh it is there of course but

1288
00:48:08,559 --> 00:48:12,720
there are lots okay like different tools

1289
00:48:10,960 --> 00:48:15,119
are starting to try and feed into like

1290
00:48:12,720 --> 00:48:16,640
open policy like opa and stuff like that

1291
00:48:15,119 --> 00:48:17,040
so this part of the industry is going to

1292
00:48:16,640 --> 00:48:19,200
change

1293
00:48:17,040 --> 00:48:21,119
a lot in the next six months but we do

1294
00:48:19,200 --> 00:48:24,240
have normal policies

1295
00:48:21,119 --> 00:48:24,480
next question anybody anybody just want

1296
00:48:24,240 --> 00:48:35,839
me

1297
00:48:24,480 --> 00:48:35,839
oh question at the back shout very loud

1298
00:48:36,960 --> 00:48:42,400
good question um are you coming again

1299
00:48:39,280 --> 00:48:45,440
for a conflict management camp

1300
00:48:42,400 --> 00:48:46,640
then you will see it there i'm pimping

1301
00:48:45,440 --> 00:48:48,800
my own talk forget

1302
00:48:46,640 --> 00:48:50,160
okay any other last questions um the

1303
00:48:48,800 --> 00:48:51,200
answer is yes you can import

1304
00:48:50,160 --> 00:48:53,520
infrastructure of course there's no

1305
00:48:51,200 --> 00:48:53,520
problem

1306
00:49:00,839 --> 00:49:03,839
yep

1307
00:49:14,000 --> 00:49:18,400
so the question is is that maybe

1308
00:49:17,119 --> 00:49:21,119
i promise i'll be on your way in one

1309
00:49:18,400 --> 00:49:23,760
minute um the question is is that

1310
00:49:21,119 --> 00:49:26,240
it's very easy to test code that's been

1311
00:49:23,760 --> 00:49:29,359
created by pollumi because it's code

1312
00:49:26,240 --> 00:49:30,720
how can you test other tools that

1313
00:49:29,359 --> 00:49:32,400
created infrastructure

1314
00:49:30,720 --> 00:49:34,240
so if you're in terraform you can look

1315
00:49:32,400 --> 00:49:35,760
at teragram terra grunt's really good

1316
00:49:34,240 --> 00:49:36,319
for running these types of tests as well

1317
00:49:35,760 --> 00:49:39,119
right

1318
00:49:36,319 --> 00:49:40,558
siri tear a test tear a test if you're

1319
00:49:39,119 --> 00:49:42,720
in terraform

1320
00:49:40,559 --> 00:49:46,079
okay he said he doesn't recommend it but

1321
00:49:42,720 --> 00:49:47,598
it exists it exists it exists it exists

1322
00:49:46,079 --> 00:49:49,599
i have time for one more question one

1323
00:49:47,599 --> 00:49:50,420
more one more one more somebody else put

1324
00:49:49,599 --> 00:49:53,570
their hand up

1325
00:49:50,420 --> 00:49:53,570
[Music]

1326
00:49:53,920 --> 00:49:58,720
anybody else now i'm i've left some

1327
00:49:56,880 --> 00:50:01,280
paloomy stickers down the front

1328
00:49:58,720 --> 00:50:13,839
please put them on your laptops no it's

1329
00:50:01,280 --> 00:50:13,839
okay nobody has anymore thank you

1330
00:50:15,280 --> 00:50:17,359
you

