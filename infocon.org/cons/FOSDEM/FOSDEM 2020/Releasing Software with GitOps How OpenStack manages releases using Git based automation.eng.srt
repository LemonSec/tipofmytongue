1
00:00:05,520 --> 00:00:08,559
uh

2
00:00:05,920 --> 00:00:10,719
hello i'm sean mcginnis i run the open

3
00:00:08,559 --> 00:00:13,759
source office at dell

4
00:00:10,719 --> 00:00:14,959
but i'm here talking about at things

5
00:00:13,759 --> 00:00:16,560
that i've been doing

6
00:00:14,960 --> 00:00:19,520
in the openstack community for the last

7
00:00:16,560 --> 00:00:21,520
several years um

8
00:00:19,520 --> 00:00:23,519
and not that i've been doing i've been

9
00:00:21,520 --> 00:00:24,640
doing it recently a lot of this has been

10
00:00:23,519 --> 00:00:27,919
stuff that's built

11
00:00:24,640 --> 00:00:29,039
up over years of people making

12
00:00:27,920 --> 00:00:31,439
improvements and

13
00:00:29,039 --> 00:00:32,719
and making things better so i just get

14
00:00:31,439 --> 00:00:34,880
to present all the great work that's

15
00:00:32,719 --> 00:00:37,040
been done

16
00:00:34,880 --> 00:00:37,040
so

17
00:00:38,650 --> 00:00:45,440
[Music]

18
00:00:41,680 --> 00:00:47,920
okay uh in the openstack community

19
00:00:45,440 --> 00:00:49,519
we need to release the all the work that

20
00:00:47,920 --> 00:00:50,719
is being done there's uh if you're not

21
00:00:49,520 --> 00:00:53,280
familiar with it

22
00:00:50,719 --> 00:00:54,399
in within openstack there's quite a few

23
00:00:53,280 --> 00:00:55,920
different projects

24
00:00:54,399 --> 00:00:59,359
they each have different deliverables

25
00:00:55,920 --> 00:01:02,559
usually several deliverables per project

26
00:00:59,359 --> 00:01:04,479
and we need a way to to package that up

27
00:01:02,559 --> 00:01:06,960
and make that available to

28
00:01:04,479 --> 00:01:07,520
downstream consumers or whoever needs

29
00:01:06,960 --> 00:01:10,880
that

30
00:01:07,520 --> 00:01:13,759
so you know like typical release steps

31
00:01:10,880 --> 00:01:15,600
we need to be able to compile or

32
00:01:13,760 --> 00:01:16,799
validate make sure that that source code

33
00:01:15,600 --> 00:01:18,559
is good we want to

34
00:01:16,799 --> 00:01:21,119
make sure whatever we're delivering and

35
00:01:18,560 --> 00:01:25,119
releasing it actually is something

36
00:01:21,119 --> 00:01:25,119
that someone can pick up and use

37
00:01:25,759 --> 00:01:32,240
we need to take the repos uh we need to

38
00:01:28,960 --> 00:01:34,880
be able to know exactly at what point

39
00:01:32,240 --> 00:01:38,000
any given deliverable was released so

40
00:01:34,880 --> 00:01:40,640
that we can go back later

41
00:01:38,000 --> 00:01:42,479
uh we need to create whatever artifacts

42
00:01:40,640 --> 00:01:45,439
and this varies depending on what the

43
00:01:42,479 --> 00:01:47,520
deliverable is for us the most of

44
00:01:45,439 --> 00:01:50,000
openstack is python so that's

45
00:01:47,520 --> 00:01:50,560
uh packages that you know pic pip can

46
00:01:50,000 --> 00:01:55,840
install

47
00:01:50,560 --> 00:01:59,600
our tarballs of the the source itself

48
00:01:55,840 --> 00:02:02,399
there's some node npm packages

49
00:01:59,600 --> 00:02:02,399
things like that

50
00:02:03,680 --> 00:02:07,360
we need to publish those somewhere

51
00:02:05,759 --> 00:02:08,878
doesn't do much good just to

52
00:02:07,360 --> 00:02:10,639
create them and we need to make them

53
00:02:08,878 --> 00:02:11,760
available so they need to get published

54
00:02:10,639 --> 00:02:15,519
on a website

55
00:02:11,760 --> 00:02:18,560
they need to get pushed up to a package

56
00:02:15,520 --> 00:02:21,440
repository where i can get pulled down

57
00:02:18,560 --> 00:02:23,040
and typically even if you're just doing

58
00:02:21,440 --> 00:02:24,560
this as something within your own

59
00:02:23,040 --> 00:02:25,359
company you need to send some kind of

60
00:02:24,560 --> 00:02:27,040
announcement

61
00:02:25,360 --> 00:02:28,879
you know let people know that there's

62
00:02:27,040 --> 00:02:30,879
something new that is out there that

63
00:02:28,879 --> 00:02:34,480
they can pick up and use

64
00:02:30,879 --> 00:02:35,359
so we've tried to automate all these

65
00:02:34,480 --> 00:02:37,840
steps

66
00:02:35,360 --> 00:02:39,920
um you know this is something that

67
00:02:37,840 --> 00:02:43,920
that's evolved over time

68
00:02:39,920 --> 00:02:46,238
uh initially uh

69
00:02:43,920 --> 00:02:47,599
we tried to just trigger on new commit

70
00:02:46,239 --> 00:02:50,640
or new takes being

71
00:02:47,599 --> 00:02:51,839
being pushed which was great that took

72
00:02:50,640 --> 00:02:53,679
care of a lot of things

73
00:02:51,840 --> 00:02:55,200
that does take care of a lot of manual

74
00:02:53,680 --> 00:02:56,480
steps but

75
00:02:55,200 --> 00:02:58,640
there were some issues with that

76
00:02:56,480 --> 00:03:02,159
approach

77
00:02:58,640 --> 00:03:04,399
there was inconsistent use of versioning

78
00:03:02,159 --> 00:03:06,239
we didn't actually follow simba for a

79
00:03:04,400 --> 00:03:08,560
while but semantic versioning if you're

80
00:03:06,239 --> 00:03:10,720
not aware of it simver.org

81
00:03:08,560 --> 00:03:12,560
really great way to make sure that

82
00:03:10,720 --> 00:03:14,080
you're communicating by your version

83
00:03:12,560 --> 00:03:17,760
number

84
00:03:14,080 --> 00:03:19,920
if that version contains

85
00:03:17,760 --> 00:03:21,679
breaking changes or if there's just bug

86
00:03:19,920 --> 00:03:23,760
fixes

87
00:03:21,680 --> 00:03:25,200
and if you leave that up to individual

88
00:03:23,760 --> 00:03:26,480
teams to do

89
00:03:25,200 --> 00:03:28,560
you just kind of have to hope that

90
00:03:26,480 --> 00:03:28,879
they're aware of what those rules are

91
00:03:28,560 --> 00:03:32,000
and

92
00:03:28,879 --> 00:03:35,040
that they actually follow them

93
00:03:32,000 --> 00:03:35,599
uh the packages that were being

94
00:03:35,040 --> 00:03:39,920
published

95
00:03:35,599 --> 00:03:42,238
weren't always always what you wanted

96
00:03:39,920 --> 00:03:45,200
they could maybe grab the wrong commit

97
00:03:42,239 --> 00:03:48,560
miss something important

98
00:03:45,200 --> 00:03:50,640
there's the times where the wrong

99
00:03:48,560 --> 00:03:52,560
commit gets tagged and and you end up

100
00:03:50,640 --> 00:03:55,040
releasing something that that really

101
00:03:52,560 --> 00:03:58,720
well now it's out there you can't really

102
00:03:55,040 --> 00:03:58,720
easily go back and take that down

103
00:03:58,840 --> 00:04:04,640
and if uh

104
00:04:02,560 --> 00:04:05,840
for stable branches it's easy to go back

105
00:04:04,640 --> 00:04:08,000
and create branches but

106
00:04:05,840 --> 00:04:10,319
you know if you're if you know you're

107
00:04:08,000 --> 00:04:11,439
doing something for a past cycle you

108
00:04:10,319 --> 00:04:12,879
want to make sure you have a branch

109
00:04:11,439 --> 00:04:14,319
there and that everything's in place it

110
00:04:12,879 --> 00:04:15,840
makes it easy to make sure

111
00:04:14,319 --> 00:04:18,798
that the right changes are going to the

112
00:04:15,840 --> 00:04:20,399
right place and

113
00:04:18,798 --> 00:04:24,000
publishing that making that information

114
00:04:20,399 --> 00:04:26,880
available we have releases.openstack.org

115
00:04:24,000 --> 00:04:27,680
we want to list everything on there if

116
00:04:26,880 --> 00:04:30,479
if that

117
00:04:27,680 --> 00:04:32,160
information can't easily be extracted

118
00:04:30,479 --> 00:04:33,680
then it's a manual process of going

119
00:04:32,160 --> 00:04:35,520
through and finding what versions and

120
00:04:33,680 --> 00:04:39,120
where and getting that published

121
00:04:35,520 --> 00:04:42,799
so we try to automate more of the things

122
00:04:39,120 --> 00:04:44,720
and not only that but make it a process

123
00:04:42,800 --> 00:04:47,040
that really fits into the

124
00:04:44,720 --> 00:04:48,720
the processes that the developers

125
00:04:47,040 --> 00:04:51,360
already are comfortable with

126
00:04:48,720 --> 00:04:53,600
with doing code reviews um pushing

127
00:04:51,360 --> 00:04:56,720
changes up just like they push code

128
00:04:53,600 --> 00:04:59,759
changes uh so we

129
00:04:56,720 --> 00:05:02,240
the process evolved where um we

130
00:04:59,759 --> 00:05:03,600
actually are able to leverage that

131
00:05:02,240 --> 00:05:04,880
tooling we have in place for the

132
00:05:03,600 --> 00:05:06,880
development workflow

133
00:05:04,880 --> 00:05:08,560
we use garrett for code review makes it

134
00:05:06,880 --> 00:05:12,320
really uh

135
00:05:08,560 --> 00:05:14,560
easy to have anybody propose something

136
00:05:12,320 --> 00:05:17,599
and then you can review what changes

137
00:05:14,560 --> 00:05:21,280
and we have zuul ci that

138
00:05:17,600 --> 00:05:22,720
is great at testing

139
00:05:21,280 --> 00:05:24,880
these changes and being able to have

140
00:05:22,720 --> 00:05:28,160
dependencies between things

141
00:05:24,880 --> 00:05:29,680
making sure that that if you have a

142
00:05:28,160 --> 00:05:32,240
dependency that

143
00:05:29,680 --> 00:05:33,600
one change merges before the next and

144
00:05:32,240 --> 00:05:36,960
the nice thing about

145
00:05:33,600 --> 00:05:40,400
zool for us being the most mostly python

146
00:05:36,960 --> 00:05:41,440
project it's ansible very zool friendly

147
00:05:40,400 --> 00:05:44,080
very easy to

148
00:05:41,440 --> 00:05:45,520
extend and and work with python with

149
00:05:44,080 --> 00:05:48,479
that

150
00:05:45,520 --> 00:05:50,000
so our typical workflow for just code

151
00:05:48,479 --> 00:05:53,039
changes

152
00:05:50,000 --> 00:05:55,600
is that we have a check queue so when

153
00:05:53,039 --> 00:05:58,400
someone proposes a change

154
00:05:55,600 --> 00:06:00,240
that goes through check tests are run

155
00:05:58,400 --> 00:06:03,520
like any kind of ci

156
00:06:00,240 --> 00:06:06,000
and those tests need to pass

157
00:06:03,520 --> 00:06:06,560
before you can even get beyond that step

158
00:06:06,000 --> 00:06:08,080
and then

159
00:06:06,560 --> 00:06:10,080
once it's approved it goes through the

160
00:06:08,080 --> 00:06:12,880
gate really runs

161
00:06:10,080 --> 00:06:14,800
those tests again make sure that nothing

162
00:06:12,880 --> 00:06:17,039
has changed in the meantime between you

163
00:06:14,800 --> 00:06:19,680
when you initially tested and and right

164
00:06:17,039 --> 00:06:22,080
before you merge that into the code base

165
00:06:19,680 --> 00:06:23,039
and then it gets merged into into the

166
00:06:22,080 --> 00:06:25,039
the final

167
00:06:23,039 --> 00:06:27,680
repo the code where everybody else can

168
00:06:25,039 --> 00:06:27,680
pull that down

169
00:06:27,840 --> 00:06:31,679
so we tried to do the same thing with

170
00:06:29,680 --> 00:06:35,440
the release process

171
00:06:31,680 --> 00:06:38,160
and the way we do that is we have

172
00:06:35,440 --> 00:06:38,800
a yaml file for each deliverable so each

173
00:06:38,160 --> 00:06:41,120
team each

174
00:06:38,800 --> 00:06:43,840
deliverable out of that team has the

175
00:06:41,120 --> 00:06:45,680
ammo file that is per cycle

176
00:06:43,840 --> 00:06:47,039
so there's a nice folder structure you

177
00:06:45,680 --> 00:06:51,199
can

178
00:06:47,039 --> 00:06:54,240
very easily go in and see each cycle

179
00:06:51,199 --> 00:06:58,720
exactly what is released which

180
00:06:54,240 --> 00:07:01,919
commit hash it is all the information

181
00:06:58,720 --> 00:07:05,599
it contains release information

182
00:07:01,919 --> 00:07:08,719
it contains any branching information

183
00:07:05,599 --> 00:07:11,440
and then as a release team we've

184
00:07:08,720 --> 00:07:12,400
we're able to kind of spread the load of

185
00:07:11,440 --> 00:07:15,120
doing this

186
00:07:12,400 --> 00:07:17,039
release because then anybody can propose

187
00:07:15,120 --> 00:07:18,319
changes to this yaml file

188
00:07:17,039 --> 00:07:21,360
and the release team just needs to

189
00:07:18,319 --> 00:07:24,639
review that just like reviewing

190
00:07:21,360 --> 00:07:27,840
a code change and then

191
00:07:24,639 --> 00:07:29,680
zool really does a lot in there and what

192
00:07:27,840 --> 00:07:31,919
triggers that automation or what what

193
00:07:29,680 --> 00:07:34,160
enables that automation of being able to

194
00:07:31,919 --> 00:07:34,960
run tests against these changes and go

195
00:07:34,160 --> 00:07:36,639
out and

196
00:07:34,960 --> 00:07:39,599
use the information that we capture in

197
00:07:36,639 --> 00:07:42,479
the ammo file to do a lot of validation

198
00:07:39,599 --> 00:07:44,000
so what it really looks like is this is

199
00:07:42,479 --> 00:07:46,400
just yaml

200
00:07:44,000 --> 00:07:47,919
we capture information like the name of

201
00:07:46,400 --> 00:07:49,840
the team that is responsible for that

202
00:07:47,919 --> 00:07:52,799
deliverable

203
00:07:49,840 --> 00:07:54,159
we capture information about the

204
00:07:52,800 --> 00:07:57,280
deliverable itself that

205
00:07:54,160 --> 00:07:58,160
lets us programmatically evaluate

206
00:07:57,280 --> 00:07:59,840
certain things

207
00:07:58,160 --> 00:08:01,440
knowing what type of thing it is like

208
00:07:59,840 --> 00:08:02,719
knowing that this is a library there's

209
00:08:01,440 --> 00:08:04,400
certain

210
00:08:02,720 --> 00:08:07,280
things that we want to enforce for

211
00:08:04,400 --> 00:08:10,719
something that's a library

212
00:08:07,280 --> 00:08:13,039
we have information if there's anything

213
00:08:10,720 --> 00:08:13,759
unique about the repo that we can

214
00:08:13,039 --> 00:08:15,360
capture

215
00:08:13,759 --> 00:08:16,720
you know this specific repo maybe it

216
00:08:15,360 --> 00:08:18,319
needs to be called something else when

217
00:08:16,720 --> 00:08:22,800
we package it up and

218
00:08:18,319 --> 00:08:27,039
and provide it as a as a deliverable

219
00:08:22,800 --> 00:08:28,639
and then the actual release information

220
00:08:27,039 --> 00:08:32,319
itself where we can say

221
00:08:28,639 --> 00:08:35,440
on this commit hash i need this release

222
00:08:32,320 --> 00:08:39,039
version xyz and

223
00:08:35,440 --> 00:08:41,919
um and then if there's anything

224
00:08:39,039 --> 00:08:42,958
to branch we can also include that and

225
00:08:41,919 --> 00:08:46,560
what to call it

226
00:08:42,958 --> 00:08:48,640
so it's all captured basically the the

227
00:08:46,560 --> 00:08:50,079
the idea here is that everything that we

228
00:08:48,640 --> 00:08:53,199
need to know

229
00:08:50,080 --> 00:08:56,399
to make a valley make decisions about

230
00:08:53,200 --> 00:08:59,040
the proposed release and

231
00:08:56,399 --> 00:09:00,080
know what it is and and what the release

232
00:08:59,040 --> 00:09:02,240
name is going to be

233
00:09:00,080 --> 00:09:05,040
and all of that is all captured with an

234
00:09:02,240 --> 00:09:05,040
email file

235
00:09:06,399 --> 00:09:11,120
and um i know everyone loves to edit

236
00:09:09,680 --> 00:09:13,920
yaml

237
00:09:11,120 --> 00:09:14,959
but in that same spirit of of trying to

238
00:09:13,920 --> 00:09:17,279
automate things

239
00:09:14,959 --> 00:09:18,399
um that also then allows us to provide

240
00:09:17,279 --> 00:09:23,040
some tooling

241
00:09:18,399 --> 00:09:24,880
on the proposal's side of the

242
00:09:23,040 --> 00:09:26,079
they can just run this new release

243
00:09:24,880 --> 00:09:27,680
command

244
00:09:26,080 --> 00:09:31,040
and tell us what series and what

245
00:09:27,680 --> 00:09:34,800
deliverable and and what type

246
00:09:31,040 --> 00:09:36,079
and then that is able to go and add that

247
00:09:34,800 --> 00:09:37,839
release information into

248
00:09:36,080 --> 00:09:40,160
the yaml file so that they don't need to

249
00:09:37,839 --> 00:09:43,120
manually manually edit it

250
00:09:40,160 --> 00:09:44,319
that has the smarts where if you say

251
00:09:43,120 --> 00:09:46,399
type here

252
00:09:44,320 --> 00:09:47,680
is probably the very useful thing i

253
00:09:46,399 --> 00:09:51,519
think

254
00:09:47,680 --> 00:09:55,199
type is is it a major release is it a

255
00:09:51,519 --> 00:09:57,360
minor a feature change is it a bug fix

256
00:09:55,200 --> 00:09:58,800
and just by telling the tool this is a

257
00:09:57,360 --> 00:10:00,959
bug fix

258
00:09:58,800 --> 00:10:02,560
it is smart enough to go and look

259
00:10:00,959 --> 00:10:03,040
because we have all of that history

260
00:10:02,560 --> 00:10:05,518
already

261
00:10:03,040 --> 00:10:07,760
in the repo in the releases repo it can

262
00:10:05,519 --> 00:10:09,440
go back and read the existing deliberate

263
00:10:07,760 --> 00:10:12,880
file and see

264
00:10:09,440 --> 00:10:15,440
okay last version was 1.5.0

265
00:10:12,880 --> 00:10:16,959
they're requesting a bug fix release

266
00:10:15,440 --> 00:10:20,640
therefore i know this is

267
00:10:16,959 --> 00:10:22,479
1.5.1 so it encapsulates a lot of that

268
00:10:20,640 --> 00:10:25,279
logic into the tooling

269
00:10:22,480 --> 00:10:27,200
so anybody within the community that

270
00:10:25,279 --> 00:10:28,399
needs to do release can run the command

271
00:10:27,200 --> 00:10:31,040
and they don't necess

272
00:10:28,399 --> 00:10:32,240
they don't need to know all the little

273
00:10:31,040 --> 00:10:34,880
details about

274
00:10:32,240 --> 00:10:35,680
how you know those little decisions that

275
00:10:34,880 --> 00:10:38,640
you need to

276
00:10:35,680 --> 00:10:38,959
to do um to decide what version number

277
00:10:38,640 --> 00:10:41,839
and

278
00:10:38,959 --> 00:10:43,119
things um which file and things like

279
00:10:41,839 --> 00:10:46,959
that

280
00:10:43,120 --> 00:10:48,079
so here's an example uh new release for

281
00:10:46,959 --> 00:10:50,000
the train cycle

282
00:10:48,079 --> 00:10:51,199
for the cinder deliverable and it's a

283
00:10:50,000 --> 00:10:54,000
feature release

284
00:10:51,200 --> 00:10:55,120
so this last little part there if you

285
00:10:54,000 --> 00:10:57,120
can see that

286
00:10:55,120 --> 00:10:59,120
it just added another version it

287
00:10:57,120 --> 00:11:01,040
automatically goes and because i told it

288
00:10:59,120 --> 00:11:03,040
it's in the train cycle

289
00:11:01,040 --> 00:11:04,160
by default it'll look at the train

290
00:11:03,040 --> 00:11:07,279
branch and

291
00:11:04,160 --> 00:11:08,079
pick the the most recent commits so it

292
00:11:07,279 --> 00:11:11,200
gets the commit

293
00:11:08,079 --> 00:11:12,479
hash and because i told it it's a

294
00:11:11,200 --> 00:11:16,320
feature release

295
00:11:12,480 --> 00:11:18,000
last version was 1.1.0

296
00:11:16,320 --> 00:11:21,920
and it knows okay now i'm going to bump

297
00:11:18,000 --> 00:11:24,800
that up and call it 1.2.0

298
00:11:21,920 --> 00:11:26,319
makes it nice and easy so now that

299
00:11:24,800 --> 00:11:29,359
they've they've made that change

300
00:11:26,320 --> 00:11:33,040
they're able to

301
00:11:29,360 --> 00:11:35,760
commit that code and submit it

302
00:11:33,040 --> 00:11:37,120
for as a code review just like they

303
00:11:35,760 --> 00:11:38,079
would do if they're editing a python

304
00:11:37,120 --> 00:11:41,120
file or

305
00:11:38,079 --> 00:11:42,719
whatever what have you and then as the

306
00:11:41,120 --> 00:11:44,079
release team that makes it really easy

307
00:11:42,720 --> 00:11:47,120
that we can go in

308
00:11:44,079 --> 00:11:49,279
and we can see here's the specific thing

309
00:11:47,120 --> 00:11:53,839
that's being added to this file

310
00:11:49,279 --> 00:11:55,760
um which you know honestly we

311
00:11:53,839 --> 00:11:59,200
because of the automation in place then

312
00:11:55,760 --> 00:12:01,279
the jobs that we were able to run in ci

313
00:11:59,200 --> 00:12:02,880
don't really need to worry too much

314
00:12:01,279 --> 00:12:06,160
about this because usually

315
00:12:02,880 --> 00:12:10,000
if the yaml is messed up those jobs will

316
00:12:06,160 --> 00:12:12,000
will find that and but it's still easy

317
00:12:10,000 --> 00:12:14,240
if we want to look at exactly what's

318
00:12:12,000 --> 00:12:16,800
happening here you can look at that and

319
00:12:14,240 --> 00:12:18,000
because it's done as a code review it

320
00:12:16,800 --> 00:12:20,319
highlights exactly

321
00:12:18,000 --> 00:12:24,800
the differences in the file that are

322
00:12:20,320 --> 00:12:27,920
being proposed but we do

323
00:12:24,800 --> 00:12:29,760
leverage those ci jobs um just like our

324
00:12:27,920 --> 00:12:30,880
development workflow we have that check

325
00:12:29,760 --> 00:12:34,480
and gate queue

326
00:12:30,880 --> 00:12:35,680
that runs tests and there because of all

327
00:12:34,480 --> 00:12:36,800
of the information that we capture in

328
00:12:35,680 --> 00:12:38,479
the ammo file

329
00:12:36,800 --> 00:12:39,920
there are quite a few things that we're

330
00:12:38,480 --> 00:12:43,519
able to automate

331
00:12:39,920 --> 00:12:46,240
in a validation job that

332
00:12:43,519 --> 00:12:47,920
looks at the change being made so that

333
00:12:46,240 --> 00:12:50,880
we know

334
00:12:47,920 --> 00:12:52,240
things can pass and then we know if we

335
00:12:50,880 --> 00:12:54,880
approve that change you know

336
00:12:52,240 --> 00:12:56,639
everything's good for the most part

337
00:12:54,880 --> 00:12:59,600
but i'll go into some detail about some

338
00:12:56,639 --> 00:13:02,639
of the other things here that we can't

339
00:12:59,600 --> 00:13:05,360
and then once it gets through check

340
00:13:02,639 --> 00:13:06,399
passes we do a review make sure

341
00:13:05,360 --> 00:13:08,959
everything's good

342
00:13:06,399 --> 00:13:10,399
approve it it does those tests one more

343
00:13:08,959 --> 00:13:12,479
time through the gate queue

344
00:13:10,399 --> 00:13:14,480
and that's when when that actually

345
00:13:12,480 --> 00:13:16,880
merges it kicks off

346
00:13:14,480 --> 00:13:18,800
some of the automation that actually

347
00:13:16,880 --> 00:13:20,959
does all those tasks i i mentioned in

348
00:13:18,800 --> 00:13:24,000
the beginning of packaging things up

349
00:13:20,959 --> 00:13:25,518
and then doing the release so i'll i can

350
00:13:24,000 --> 00:13:26,959
dig a little more into that

351
00:13:25,519 --> 00:13:29,360
so this is what it looks like in the

352
00:13:26,959 --> 00:13:31,839
garrett ui it runs these jobs reports

353
00:13:29,360 --> 00:13:31,839
them back

354
00:13:32,639 --> 00:13:36,320
one of the the useful things is building

355
00:13:34,880 --> 00:13:38,639
the docs uh like i

356
00:13:36,320 --> 00:13:40,560
i briefly mentioned because we have this

357
00:13:38,639 --> 00:13:42,320
information in the animal file

358
00:13:40,560 --> 00:13:44,479
we're able to extract that information

359
00:13:42,320 --> 00:13:46,399
and automatically use that to publish to

360
00:13:44,480 --> 00:13:47,600
the releases site so that we have all of

361
00:13:46,399 --> 00:13:50,880
the release details

362
00:13:47,600 --> 00:13:53,120
on the site so because

363
00:13:50,880 --> 00:13:54,959
those docs are really integral to to

364
00:13:53,120 --> 00:13:58,160
doing our release it's part of our

365
00:13:54,959 --> 00:14:00,000
overall release process we want to

366
00:13:58,160 --> 00:14:01,360
make sure that we can build those docs

367
00:14:00,000 --> 00:14:04,720
so we have

368
00:14:01,360 --> 00:14:06,880
we use rst and sphinx

369
00:14:04,720 --> 00:14:08,079
to generate those there's a sphinx

370
00:14:06,880 --> 00:14:11,120
extension that we

371
00:14:08,079 --> 00:14:14,319
we have that will read in

372
00:14:11,120 --> 00:14:15,760
that yaml file and from that extract all

373
00:14:14,320 --> 00:14:18,800
the information it needs

374
00:14:15,760 --> 00:14:20,240
to plug into the actual documentation

375
00:14:18,800 --> 00:14:21,519
itself and then that's what gets

376
00:14:20,240 --> 00:14:23,440
published on the website all

377
00:14:21,519 --> 00:14:25,279
automatically

378
00:14:23,440 --> 00:14:26,560
so we want to make sure that those docs

379
00:14:25,279 --> 00:14:28,560
actually build if there's some

380
00:14:26,560 --> 00:14:29,839
error in how they've entered information

381
00:14:28,560 --> 00:14:31,680
in the yaml file

382
00:14:29,839 --> 00:14:33,279
likely the docs will fail or there's

383
00:14:31,680 --> 00:14:34,800
some issue that we need to take a look

384
00:14:33,279 --> 00:14:38,240
at

385
00:14:34,800 --> 00:14:40,719
so we don't want anything to be

386
00:14:38,240 --> 00:14:41,440
passing tests and look happy if we if it

387
00:14:40,720 --> 00:14:43,040
ends up that

388
00:14:41,440 --> 00:14:45,040
if we actually approve that there's

389
00:14:43,040 --> 00:14:46,719
going to be issues afterwards

390
00:14:45,040 --> 00:14:48,319
it's all about catching the areas

391
00:14:46,720 --> 00:14:50,959
earlier in the process and making sure

392
00:14:48,320 --> 00:14:52,720
things are right

393
00:14:50,959 --> 00:14:53,920
there are a bunch of validation checks

394
00:14:52,720 --> 00:14:56,399
and this is where there's a lot of

395
00:14:53,920 --> 00:14:56,399
benefit

396
00:14:56,839 --> 00:15:01,600
the uh this is

397
00:14:59,920 --> 00:15:03,120
some an area where we've been able to

398
00:15:01,600 --> 00:15:04,720
build up over time

399
00:15:03,120 --> 00:15:06,560
because there are certain things that we

400
00:15:04,720 --> 00:15:09,680
know we need to look for

401
00:15:06,560 --> 00:15:10,239
we don't have to rely on the release

402
00:15:09,680 --> 00:15:13,599
team

403
00:15:10,240 --> 00:15:15,680
as a code review to know

404
00:15:13,600 --> 00:15:16,720
or to remember to go and look at all

405
00:15:15,680 --> 00:15:19,120
these things

406
00:15:16,720 --> 00:15:22,560
so there's validation jobs just to make

407
00:15:19,120 --> 00:15:26,480
sure that all the information is good

408
00:15:22,560 --> 00:15:29,279
the the job will actually clone the repo

409
00:15:26,480 --> 00:15:31,600
of the deliverable and make sure things

410
00:15:29,279 --> 00:15:34,000
like the commit hash exists which has

411
00:15:31,600 --> 00:15:35,120
actually been a very common issue that

412
00:15:34,000 --> 00:15:36,720
oh i

413
00:15:35,120 --> 00:15:38,880
type owed something if i didn't use that

414
00:15:36,720 --> 00:15:41,040
tool you know something's not quite

415
00:15:38,880 --> 00:15:43,279
right here um

416
00:15:41,040 --> 00:15:45,120
especially on stable branches you know

417
00:15:43,279 --> 00:15:47,759
maybe

418
00:15:45,120 --> 00:15:48,800
they want to make a change or a bug fix

419
00:15:47,759 --> 00:15:51,199
in a stable branch

420
00:15:48,800 --> 00:15:52,399
but they merged it into the master

421
00:15:51,199 --> 00:15:54,240
branch

422
00:15:52,399 --> 00:15:55,920
which will be the next release and

423
00:15:54,240 --> 00:15:57,839
forgot that they'd need to take that

424
00:15:55,920 --> 00:16:00,479
extra step and actually backboard it

425
00:15:57,839 --> 00:16:02,480
into the old uh stable branch so um this

426
00:16:00,480 --> 00:16:04,880
is a great way right away it sees oh no

427
00:16:02,480 --> 00:16:06,839
this commit hash is not here so

428
00:16:04,880 --> 00:16:08,639
you know really prevent some errors

429
00:16:06,839 --> 00:16:11,759
there

430
00:16:08,639 --> 00:16:14,079
make sure that the package can be built

431
00:16:11,759 --> 00:16:15,279
readme files don't have any errors

432
00:16:14,079 --> 00:16:18,959
because that's used in

433
00:16:15,279 --> 00:16:20,560
the package publish package information

434
00:16:18,959 --> 00:16:22,160
make sure there's permissions this is

435
00:16:20,560 --> 00:16:23,920
was a common one

436
00:16:22,160 --> 00:16:25,199
you know everything's built everything

437
00:16:23,920 --> 00:16:27,439
packages fine

438
00:16:25,199 --> 00:16:28,800
and then we go to publish the package

439
00:16:27,440 --> 00:16:30,639
and oh we actually don't have

440
00:16:28,800 --> 00:16:32,479
permissions to do that

441
00:16:30,639 --> 00:16:34,079
and by that point everything else is all

442
00:16:32,480 --> 00:16:35,759
done so

443
00:16:34,079 --> 00:16:38,399
this just makes it easier right away we

444
00:16:35,759 --> 00:16:41,040
can validate oh yeah we can do this

445
00:16:38,399 --> 00:16:41,440
and um version numbers things like that

446
00:16:41,040 --> 00:16:44,719
so

447
00:16:41,440 --> 00:16:45,199
this has been an area as we've um run

448
00:16:44,720 --> 00:16:47,040
across

449
00:16:45,199 --> 00:16:48,800
different corner cases and different

450
00:16:47,040 --> 00:16:51,040
things that oh right you know

451
00:16:48,800 --> 00:16:52,880
right i've never thought of that we can

452
00:16:51,040 --> 00:16:54,319
add that into our validation and then

453
00:16:52,880 --> 00:16:56,240
it's able to go and check that

454
00:16:54,320 --> 00:16:58,959
automatically and we don't have to be

455
00:16:56,240 --> 00:16:59,279
as humans remembering oh i should check

456
00:16:58,959 --> 00:17:01,599
this

457
00:16:59,279 --> 00:17:02,720
make sure this weird case isn't uh isn't

458
00:17:01,600 --> 00:17:05,919
going to happen here

459
00:17:02,720 --> 00:17:08,720
it's all built in and

460
00:17:05,919 --> 00:17:10,160
this is uh i think one of the most

461
00:17:08,720 --> 00:17:12,400
useful things

462
00:17:10,160 --> 00:17:14,400
you know this is all about automating

463
00:17:12,400 --> 00:17:18,160
how this process is done

464
00:17:14,400 --> 00:17:18,880
but there are certain kind of subjective

465
00:17:18,160 --> 00:17:20,880
kind of just

466
00:17:18,880 --> 00:17:22,000
things that need an actual human to take

467
00:17:20,880 --> 00:17:25,679
a look at

468
00:17:22,000 --> 00:17:28,720
so rather than just leaving that up to

469
00:17:25,679 --> 00:17:30,640
to us as a release team to go out and

470
00:17:28,720 --> 00:17:33,760
check these things

471
00:17:30,640 --> 00:17:34,559
at least we can use the automation to

472
00:17:33,760 --> 00:17:37,440
pull all of the

473
00:17:34,559 --> 00:17:38,240
the things that we need to do that we

474
00:17:37,440 --> 00:17:41,280
need to look at

475
00:17:38,240 --> 00:17:42,000
into one place so that um when it comes

476
00:17:41,280 --> 00:17:44,879
time to

477
00:17:42,000 --> 00:17:46,320
evaluate this release to see if

478
00:17:44,880 --> 00:17:48,400
everything is good

479
00:17:46,320 --> 00:17:49,360
um it's not a matter of going to five

480
00:17:48,400 --> 00:17:50,880
different places and

481
00:17:49,360 --> 00:17:52,959
and pulling together that information

482
00:17:50,880 --> 00:17:55,120
our on our own the automatic

483
00:17:52,960 --> 00:17:57,200
automation has already pulled that into

484
00:17:55,120 --> 00:17:59,439
the output of the job

485
00:17:57,200 --> 00:18:01,200
so it makes it much easier we just pull

486
00:17:59,440 --> 00:18:03,600
up the results of that job

487
00:18:01,200 --> 00:18:05,440
we're able to see all of the commits

488
00:18:03,600 --> 00:18:07,439
that are included

489
00:18:05,440 --> 00:18:09,120
any requirements changes and and those

490
00:18:07,440 --> 00:18:12,640
two are really

491
00:18:09,120 --> 00:18:13,760
useful because one of the most common

492
00:18:12,640 --> 00:18:16,240
things that we

493
00:18:13,760 --> 00:18:17,760
might have to go back and say no i think

494
00:18:16,240 --> 00:18:20,400
you need to change this

495
00:18:17,760 --> 00:18:22,000
is you know maybe they've called it a

496
00:18:20,400 --> 00:18:23,760
bug fix release

497
00:18:22,000 --> 00:18:25,520
but we look at some of these changes

498
00:18:23,760 --> 00:18:26,559
here and they've made they've added a

499
00:18:25,520 --> 00:18:29,200
new dependency or

500
00:18:26,559 --> 00:18:30,799
they've we see that one of them commits

501
00:18:29,200 --> 00:18:31,600
that are merged into the repo really

502
00:18:30,799 --> 00:18:34,720
changes

503
00:18:31,600 --> 00:18:36,000
or adds a new feature or or even

504
00:18:34,720 --> 00:18:38,240
removes something that makes it

505
00:18:36,000 --> 00:18:39,919
backwards incompatible so that we have

506
00:18:38,240 --> 00:18:41,520
that information and then we can say you

507
00:18:39,919 --> 00:18:44,320
know with semantic versioning

508
00:18:41,520 --> 00:18:46,240
you've requested this version number uh

509
00:18:44,320 --> 00:18:48,559
really with what you have in here

510
00:18:46,240 --> 00:18:52,160
i think it makes more sense to go with

511
00:18:48,559 --> 00:18:54,000
you know 2.0 or something

512
00:18:52,160 --> 00:18:55,360
which if we didn't have the automation

513
00:18:54,000 --> 00:18:57,760
pulling all this together

514
00:18:55,360 --> 00:18:59,439
for us would really be time consuming

515
00:18:57,760 --> 00:19:00,160
for us to go out and look at the repo

516
00:18:59,440 --> 00:19:02,400
look at the get

517
00:19:00,160 --> 00:19:04,480
you know commit history and pull all

518
00:19:02,400 --> 00:19:08,080
that information

519
00:19:04,480 --> 00:19:09,600
uh we it gets the the lead of that

520
00:19:08,080 --> 00:19:13,360
project and

521
00:19:09,600 --> 00:19:14,959
if there is one i release liaison so

522
00:19:13,360 --> 00:19:18,240
that's part of decentralizing this

523
00:19:14,960 --> 00:19:18,240
process is anybody

524
00:19:18,640 --> 00:19:22,160
anybody in the community can propose a

525
00:19:20,400 --> 00:19:25,200
release

526
00:19:22,160 --> 00:19:26,799
but if somebody you know

527
00:19:25,200 --> 00:19:28,799
somebody just wants their bug fix

528
00:19:26,799 --> 00:19:31,200
available right away uh

529
00:19:28,799 --> 00:19:32,480
we don't want to just do the releases

530
00:19:31,200 --> 00:19:34,240
all the time we want to make sure that

531
00:19:32,480 --> 00:19:37,360
the people that are responsible

532
00:19:34,240 --> 00:19:40,080
for these deliverables actually can can

533
00:19:37,360 --> 00:19:41,039
be aware that a release is being

534
00:19:40,080 --> 00:19:43,280
requested

535
00:19:41,039 --> 00:19:45,840
and they need to be the ones to say plus

536
00:19:43,280 --> 00:19:46,960
one on the review

537
00:19:45,840 --> 00:19:48,639
because we don't want to release

538
00:19:46,960 --> 00:19:50,000
something and then have that team come

539
00:19:48,640 --> 00:19:52,880
back later and say hey what

540
00:19:50,000 --> 00:19:54,799
why did you do this why is this out here

541
00:19:52,880 --> 00:19:55,440
this way we can make sure that we know

542
00:19:54,799 --> 00:19:58,000
who that

543
00:19:55,440 --> 00:19:58,720
who we need to get uh feedback from to

544
00:19:58,000 --> 00:20:02,320
make sure that

545
00:19:58,720 --> 00:20:05,120
yeah okay this is good we're ready to go

546
00:20:02,320 --> 00:20:06,000
and then things like generating a

547
00:20:05,120 --> 00:20:07,678
release announcement

548
00:20:06,000 --> 00:20:09,440
we can see what exactly is going to be

549
00:20:07,679 --> 00:20:10,559
sent out to the community on the mailing

550
00:20:09,440 --> 00:20:11,840
list before

551
00:20:10,559 --> 00:20:14,720
before it's actually sent out to the

552
00:20:11,840 --> 00:20:16,480
world and um you know sometimes there's

553
00:20:14,720 --> 00:20:17,919
errors or something like that that we

554
00:20:16,480 --> 00:20:21,679
want to make sure

555
00:20:17,919 --> 00:20:25,440
get caught so after

556
00:20:21,679 --> 00:20:28,000
we approve the release request so that

557
00:20:25,440 --> 00:20:28,559
that yaml file change actually does get

558
00:20:28,000 --> 00:20:31,440
commit

559
00:20:28,559 --> 00:20:31,840
committed into the repo that triggers

560
00:20:31,440 --> 00:20:34,960
some

561
00:20:31,840 --> 00:20:37,039
post jobs that'll actually publish those

562
00:20:34,960 --> 00:20:38,559
thanks generated html docs to the

563
00:20:37,039 --> 00:20:40,640
release site so then it'll

564
00:20:38,559 --> 00:20:43,918
be available out there it'll show that

565
00:20:40,640 --> 00:20:43,919
this new release is available

566
00:20:44,080 --> 00:20:50,240
and that's what this looks like here

567
00:20:47,200 --> 00:20:51,840
if you can see that it's a it's a list

568
00:20:50,240 --> 00:20:55,039
of all of the deliverables

569
00:20:51,840 --> 00:20:57,520
all the services with the

570
00:20:55,039 --> 00:20:59,120
first release of this release cycle and

571
00:20:57,520 --> 00:21:00,158
the most recent release of this release

572
00:20:59,120 --> 00:21:01,840
cycle

573
00:21:00,159 --> 00:21:03,360
there are links to release notes that

574
00:21:01,840 --> 00:21:04,639
we're able to capture in that yaml file

575
00:21:03,360 --> 00:21:07,199
all this information that

576
00:21:04,640 --> 00:21:09,200
that gets published out there um very

577
00:21:07,200 --> 00:21:11,440
extensive information and we don't need

578
00:21:09,200 --> 00:21:12,880
someone to sit down and actually fill

579
00:21:11,440 --> 00:21:16,400
out all this information because it can

580
00:21:12,880 --> 00:21:16,400
just pull it right out of the ammo files

581
00:21:16,640 --> 00:21:21,360
taking process will get details from the

582
00:21:19,919 --> 00:21:23,919
commit

583
00:21:21,360 --> 00:21:25,760
and then it's able to add the tag to the

584
00:21:23,919 --> 00:21:26,880
repo and include all that metadata so

585
00:21:25,760 --> 00:21:28,799
that there's a lot of really good

586
00:21:26,880 --> 00:21:32,720
tracking in there

587
00:21:28,799 --> 00:21:34,158
and uh if because we know where bugs are

588
00:21:32,720 --> 00:21:34,880
being tracked for that individual

589
00:21:34,159 --> 00:21:36,960
project

590
00:21:34,880 --> 00:21:39,120
and what commits are included in that

591
00:21:36,960 --> 00:21:41,760
release it's able to go and actually

592
00:21:39,120 --> 00:21:42,799
update the bug tracker and say this you

593
00:21:41,760 --> 00:21:44,799
know based on

594
00:21:42,799 --> 00:21:47,520
information in the commit message to say

595
00:21:44,799 --> 00:21:49,600
this is now released

596
00:21:47,520 --> 00:21:51,679
and if it needs to it'll create the

597
00:21:49,600 --> 00:21:55,360
branch so no human is actually creating

598
00:21:51,679 --> 00:21:55,360
the branch the automation does it all

599
00:21:56,240 --> 00:22:01,120
we will we manage our requirements by

600
00:21:59,360 --> 00:22:02,479
uh if there are any libraries that we

601
00:22:01,120 --> 00:22:05,678
release um

602
00:22:02,480 --> 00:22:07,360
updating before we we have

603
00:22:05,679 --> 00:22:09,280
everybody start using that new release

604
00:22:07,360 --> 00:22:10,879
we run some jobs and make sure that

605
00:22:09,280 --> 00:22:14,158
doesn't break anything any

606
00:22:10,880 --> 00:22:15,200
unintended consequences so it'll propose

607
00:22:14,159 --> 00:22:18,080
a change to our

608
00:22:15,200 --> 00:22:20,159
our requirements process it'll publish

609
00:22:18,080 --> 00:22:22,320
the package whichever it is and it'll

610
00:22:20,159 --> 00:22:26,640
send the release announcement

611
00:22:22,320 --> 00:22:29,600
um basically what i

612
00:22:26,640 --> 00:22:29,600
go through there

613
00:22:30,640 --> 00:22:34,159
so to go back to what that looks like so

614
00:22:32,880 --> 00:22:36,000
the check and gate queue

615
00:22:34,159 --> 00:22:37,440
those are just the validation on the

616
00:22:36,000 --> 00:22:39,600
change in the

617
00:22:37,440 --> 00:22:41,200
deliverable yaml file itself where we're

618
00:22:39,600 --> 00:22:45,039
able to get that information

619
00:22:41,200 --> 00:22:46,640
and decide is this release

620
00:22:45,039 --> 00:22:48,879
correct is it using the right version

621
00:22:46,640 --> 00:22:51,600
number after it's committed

622
00:22:48,880 --> 00:22:52,880
this release post release process runs

623
00:22:51,600 --> 00:22:55,918
that actually is what

624
00:22:52,880 --> 00:22:58,400
creates the tag in the repo and then

625
00:22:55,919 --> 00:23:01,600
that then will publish the package and

626
00:22:58,400 --> 00:23:04,559
get all the information out there

627
00:23:01,600 --> 00:23:04,959
so overall ideas of what we do and then

628
00:23:04,559 --> 00:23:07,039
overall

629
00:23:04,960 --> 00:23:08,799
the ideas of what you can maybe think

630
00:23:07,039 --> 00:23:09,600
about of how you can use some of these

631
00:23:08,799 --> 00:23:11,360
ideas for

632
00:23:09,600 --> 00:23:12,879
for how you manage your releases whether

633
00:23:11,360 --> 00:23:14,479
it's a community

634
00:23:12,880 --> 00:23:16,480
uh open source project or something

635
00:23:14,480 --> 00:23:19,280
internally or your company

636
00:23:16,480 --> 00:23:19,760
um automate those repetitive tasks if

637
00:23:19,280 --> 00:23:22,480
there's

638
00:23:19,760 --> 00:23:24,000
uh if you're doing releases for your

639
00:23:22,480 --> 00:23:27,039
whatever deliverable it is

640
00:23:24,000 --> 00:23:27,600
um see what pieces of those of that

641
00:23:27,039 --> 00:23:30,000
process

642
00:23:27,600 --> 00:23:32,158
you can have a script do whether you can

643
00:23:30,000 --> 00:23:32,880
fully automate it and just have it taken

644
00:23:32,159 --> 00:23:35,440
care of

645
00:23:32,880 --> 00:23:36,159
or like our our job that gets those

646
00:23:35,440 --> 00:23:37,600
changes

647
00:23:36,159 --> 00:23:39,840
have a job that can at least pull

648
00:23:37,600 --> 00:23:41,120
together information and minimize the

649
00:23:39,840 --> 00:23:44,559
amount of

650
00:23:41,120 --> 00:23:48,399
brain power that you need to expend on

651
00:23:44,559 --> 00:23:49,918
on evaluating these releases

652
00:23:48,400 --> 00:23:51,760
automate security tests what i mean

653
00:23:49,919 --> 00:23:54,799
about like about this

654
00:23:51,760 --> 00:23:55,679
is um uh things like creating those

655
00:23:54,799 --> 00:23:59,200
branches

656
00:23:55,679 --> 00:24:02,240
uh pushing those tags in the git repo

657
00:23:59,200 --> 00:24:05,360
um signing tarballs all of that we're

658
00:24:02,240 --> 00:24:07,919
able to offload to the tooling

659
00:24:05,360 --> 00:24:09,678
so it's not a human that's making these

660
00:24:07,919 --> 00:24:12,880
accessing these secret keys

661
00:24:09,679 --> 00:24:14,880
and doing these things we

662
00:24:12,880 --> 00:24:16,480
the tool does it and by the time the

663
00:24:14,880 --> 00:24:19,200
tool runs we know we

664
00:24:16,480 --> 00:24:21,520
vetted everything and then the tool can

665
00:24:19,200 --> 00:24:25,600
access the secrets that it needs

666
00:24:21,520 --> 00:24:28,320
to do that no human needs to do it

667
00:24:25,600 --> 00:24:30,480
um you know automate even the things

668
00:24:28,320 --> 00:24:33,279
that that are manual as much as you can

669
00:24:30,480 --> 00:24:33,840
and then keep looking for things that

670
00:24:33,279 --> 00:24:35,760
that'll

671
00:24:33,840 --> 00:24:37,760
make it better the the validation job

672
00:24:35,760 --> 00:24:39,679
that we have we've just kept

673
00:24:37,760 --> 00:24:40,799
improving adding new checks adding new

674
00:24:39,679 --> 00:24:42,640
things that

675
00:24:40,799 --> 00:24:44,559
uh really get rid of all those surprises

676
00:24:42,640 --> 00:24:46,799
for us and

677
00:24:44,559 --> 00:24:49,120
i think having using it and using the

678
00:24:46,799 --> 00:24:50,559
same workflow or very very similar

679
00:24:49,120 --> 00:24:53,199
workflow that we do for

680
00:24:50,559 --> 00:24:54,799
uh changes to the code of the project

681
00:24:53,200 --> 00:24:57,279
makes it a lot easier for

682
00:24:54,799 --> 00:25:00,720
everyone or anyone to be able to step in

683
00:24:57,279 --> 00:25:03,760
and then also do releases

684
00:25:00,720 --> 00:25:04,960
so uh that's it um you can always follow

685
00:25:03,760 --> 00:25:06,480
up afterwards and

686
00:25:04,960 --> 00:25:08,240
and ask me any questions here's my

687
00:25:06,480 --> 00:25:08,880
twitter handle i think we have a couple

688
00:25:08,240 --> 00:25:11,440
minutes

689
00:25:08,880 --> 00:25:12,240
five minutes uh so if anybody has any

690
00:25:11,440 --> 00:25:15,840
questions

691
00:25:12,240 --> 00:25:15,840
i can try to answer them yes

692
00:25:17,520 --> 00:25:21,600
because i work for wake works we've done

693
00:25:19,760 --> 00:25:23,760
a lot with githubs and

694
00:25:21,600 --> 00:25:25,678
we mostly think of the things as being

695
00:25:23,760 --> 00:25:28,720
unimportant

696
00:25:25,679 --> 00:25:31,919
it feels like your

697
00:25:28,720 --> 00:25:33,200
releases will have a point where you if

698
00:25:31,919 --> 00:25:35,279
something goes wrong you don't have to

699
00:25:33,200 --> 00:25:37,279
do it all again it's not either

700
00:25:35,279 --> 00:25:39,360
it's either up to a point and then not

701
00:25:37,279 --> 00:25:43,039
is that it should always be

702
00:25:39,360 --> 00:25:46,639
item potent um

703
00:25:43,039 --> 00:25:50,000
so the the question was um uh the

704
00:25:46,640 --> 00:25:51,200
um is it always that important git up

705
00:25:50,000 --> 00:25:54,400
should be something that you can

706
00:25:51,200 --> 00:25:57,520
can do over and over and and not have

707
00:25:54,400 --> 00:26:01,360
different results every time yes so

708
00:25:57,520 --> 00:26:04,480
if if if someone has

709
00:26:01,360 --> 00:26:05,279
put in a release and a version number

710
00:26:04,480 --> 00:26:08,159
and that

711
00:26:05,279 --> 00:26:09,919
yaml file gets merged we can make other

712
00:26:08,159 --> 00:26:11,360
changes to that yaml file and when that

713
00:26:09,919 --> 00:26:14,880
merges

714
00:26:11,360 --> 00:26:16,158
it the automation will will see what has

715
00:26:14,880 --> 00:26:19,039
changed here

716
00:26:16,159 --> 00:26:20,080
it will not attempt to take that commit

717
00:26:19,039 --> 00:26:23,120
again

718
00:26:20,080 --> 00:26:27,039
it'll see it'll check okay

719
00:26:23,120 --> 00:26:30,080
i have abc version one two three

720
00:26:27,039 --> 00:26:33,279
okay hash abc has take one two three

721
00:26:30,080 --> 00:26:35,199
um and then i'll move on um same thing

722
00:26:33,279 --> 00:26:36,960
with branches if a branch exists it

723
00:26:35,200 --> 00:26:39,039
won't try to do that again

724
00:26:36,960 --> 00:26:40,080
that's actually kind of bit us a couple

725
00:26:39,039 --> 00:26:41,760
of times where

726
00:26:40,080 --> 00:26:44,240
something for some whatever reason

727
00:26:41,760 --> 00:26:46,240
someone had to manually delete a branch

728
00:26:44,240 --> 00:26:47,840
and then we make a change that yaml file

729
00:26:46,240 --> 00:26:48,960
and we'll see oh i need to create this

730
00:26:47,840 --> 00:26:51,039
branch

731
00:26:48,960 --> 00:26:52,640
so it'll always make sure that that

732
00:26:51,039 --> 00:26:54,240
whatever is requested in the ammo file

733
00:26:52,640 --> 00:26:55,279
actually exists out there if it already

734
00:26:54,240 --> 00:26:56,559
exists out there

735
00:26:55,279 --> 00:26:59,520
it won't attempt to do any other

736
00:26:56,559 --> 00:26:59,520
operations on it

737
00:27:04,840 --> 00:27:07,840
yes

738
00:27:14,000 --> 00:27:17,919
so the question is about where these uh

739
00:27:16,000 --> 00:27:19,440
yaml files exist whether it's in the

740
00:27:17,919 --> 00:27:22,720
repo with product or

741
00:27:19,440 --> 00:27:24,159
or elsewhere we have a releases repo so

742
00:27:22,720 --> 00:27:27,200
it is a separate repo

743
00:27:24,159 --> 00:27:29,279
by itself which is nice because then it

744
00:27:27,200 --> 00:27:29,919
contains a lot of the automation not all

745
00:27:29,279 --> 00:27:31,600
of it but

746
00:27:29,919 --> 00:27:33,600
a lot of the automation exists right

747
00:27:31,600 --> 00:27:36,320
there and then there's

748
00:27:33,600 --> 00:27:37,600
within that repo there is the directory

749
00:27:36,320 --> 00:27:41,120
structure of

750
00:27:37,600 --> 00:27:45,360
deliverables the name of the cycle

751
00:27:41,120 --> 00:27:47,520
and then the deliverable.yaml file

752
00:27:45,360 --> 00:27:48,959
which makes it a really nice reference

753
00:27:47,520 --> 00:27:50,320
you know everything's self-contained in

754
00:27:48,960 --> 00:27:51,600
this releases repo

755
00:27:50,320 --> 00:27:53,600
if you're someone out in the community

756
00:27:51,600 --> 00:27:54,080
you don't care about uh releases you

757
00:27:53,600 --> 00:27:57,279
don't

758
00:27:54,080 --> 00:27:59,360
have all these files in your repo um

759
00:27:57,279 --> 00:28:01,279
you need to know to go to this releases

760
00:27:59,360 --> 00:28:02,959
repo to make this change and propose the

761
00:28:01,279 --> 00:28:08,320
release

762
00:28:02,960 --> 00:28:08,320
yep any other questions

763
00:28:09,120 --> 00:28:16,158
yes just brother comment and a question

764
00:28:13,520 --> 00:28:16,879
as a consumer of this process for past

765
00:28:16,159 --> 00:28:19,200
few years

766
00:28:16,880 --> 00:28:20,480
and i still remember the first release

767
00:28:19,200 --> 00:28:23,440
we were pushing

768
00:28:20,480 --> 00:28:24,320
about five years ago that i was involved

769
00:28:23,440 --> 00:28:27,039
into

770
00:28:24,320 --> 00:28:28,799
myself and the current release ppl at

771
00:28:27,039 --> 00:28:33,039
the time about an hour

772
00:28:28,799 --> 00:28:35,600
sitting together on irc and figuring out

773
00:28:33,039 --> 00:28:36,559
every single step to get the package out

774
00:28:35,600 --> 00:28:39,600
there

775
00:28:36,559 --> 00:28:43,360
and the last release what we did in

776
00:28:39,600 --> 00:28:45,199
november i think it took me about

777
00:28:43,360 --> 00:28:47,360
five minutes total time because the

778
00:28:45,200 --> 00:28:49,760
release team had the patch

779
00:28:47,360 --> 00:28:51,520
already only thing what i had to go and

780
00:28:49,760 --> 00:28:54,320
do was check the

781
00:28:51,520 --> 00:28:55,760
comment hash i go like oh this is not

782
00:28:54,320 --> 00:28:59,039
the right one i know we

783
00:28:55,760 --> 00:28:59,039
still are pending merging

784
00:29:09,760 --> 00:29:13,200
and i knew that everything was was

785
00:29:12,399 --> 00:29:16,639
published and

786
00:29:13,200 --> 00:29:17,440
out there when the time hit the timeline

787
00:29:16,640 --> 00:29:21,039
so

788
00:29:17,440 --> 00:29:24,080
it's just it's amazing how much a

789
00:29:21,039 --> 00:29:27,360
a bunch of automation and verification

790
00:29:24,080 --> 00:29:28,720
can help from the from the actual man

791
00:29:27,360 --> 00:29:32,719
hours spent on

792
00:29:28,720 --> 00:29:32,720
simple so-called simple tasks

793
00:29:38,399 --> 00:29:41,439
great to hear well for the sake of the

794
00:29:40,240 --> 00:29:44,799
recording and just to

795
00:29:41,440 --> 00:29:45,360
really summarize that um about a few

796
00:29:44,799 --> 00:29:49,039
years ago

797
00:29:45,360 --> 00:29:49,520
took about an hour of the um the project

798
00:29:49,039 --> 00:29:52,080
lead

799
00:29:49,520 --> 00:29:54,399
and the release manager together to get

800
00:29:52,080 --> 00:29:56,240
everything in place to do a release

801
00:29:54,399 --> 00:29:58,080
and now this last one took maybe five

802
00:29:56,240 --> 00:29:59,279
minutes of time so that's great to hear

803
00:29:58,080 --> 00:30:01,039
and that's exactly the

804
00:29:59,279 --> 00:30:04,480
the benefit of doing something like this

805
00:30:01,039 --> 00:30:04,480
that we're trying to trying to

806
00:30:06,840 --> 00:30:09,840
accomplish

807
00:30:17,200 --> 00:30:24,320
what is the learning curve to use to

808
00:30:20,320 --> 00:30:24,320
request a release or to

809
00:30:27,919 --> 00:30:32,159
okay well i'll go through from both so

810
00:30:30,720 --> 00:30:35,200
from the consuming side

811
00:30:32,159 --> 00:30:36,720
on our releases.openstack.org site

812
00:30:35,200 --> 00:30:38,640
there's documentation reference

813
00:30:36,720 --> 00:30:39,440
documentation it says with using and

814
00:30:38,640 --> 00:30:41,440
then that

815
00:30:39,440 --> 00:30:43,200
kind of goes through the steps as a

816
00:30:41,440 --> 00:30:45,600
consumer of this

817
00:30:43,200 --> 00:30:46,880
automation of here are the things that i

818
00:30:45,600 --> 00:30:50,000
need to do

819
00:30:46,880 --> 00:30:51,360
to edit the cmo file and and request the

820
00:30:50,000 --> 00:30:54,399
release through doing a

821
00:30:51,360 --> 00:30:57,120
uh requesting a code review and then

822
00:30:54,399 --> 00:30:59,279
for the release team uh getting people

823
00:30:57,120 --> 00:31:00,320
on board to participate as release

824
00:30:59,279 --> 00:31:04,399
managers

825
00:31:00,320 --> 00:31:05,519
um it's it's really um

826
00:31:04,399 --> 00:31:07,600
there's a bit of a learning curve

827
00:31:05,519 --> 00:31:09,279
because they're like i said this has is

828
00:31:07,600 --> 00:31:10,879
something that we've added more and more

829
00:31:09,279 --> 00:31:12,320
validation over time every time that we

830
00:31:10,880 --> 00:31:14,080
found something that hey we could have

831
00:31:12,320 --> 00:31:17,360
checked for this ahead of time

832
00:31:14,080 --> 00:31:20,799
um the overall concept is

833
00:31:17,360 --> 00:31:22,158
is pretty easy to grasp and then if

834
00:31:20,799 --> 00:31:24,799
anything goes wrong or if you need to

835
00:31:22,159 --> 00:31:26,880
dig into some kind of change

836
00:31:24,799 --> 00:31:28,720
it's just a matter of knowing where in

837
00:31:26,880 --> 00:31:30,240
the automation in the scripts you need

838
00:31:28,720 --> 00:31:31,760
to go to look at it

839
00:31:30,240 --> 00:31:33,600
i wouldn't say anything's too overly

840
00:31:31,760 --> 00:31:34,559
complex it just does things like check

841
00:31:33,600 --> 00:31:36,399
out the get repo

842
00:31:34,559 --> 00:31:39,279
and do does some git commands and the

843
00:31:36,399 --> 00:31:42,320
rest is fairly basic python code

844
00:31:39,279 --> 00:31:46,320
um reviewing those release requests

845
00:31:42,320 --> 00:31:49,519
uh takes a little time just knowing

846
00:31:46,320 --> 00:31:50,799
um for that that semi-manual step of

847
00:31:49,519 --> 00:31:52,480
just knowing

848
00:31:50,799 --> 00:31:54,399
all of the information that's included

849
00:31:52,480 --> 00:31:54,960
in that job output what do i need to

850
00:31:54,399 --> 00:31:57,760
look at

851
00:31:54,960 --> 00:31:59,200
what does it mean and um you know just

852
00:31:57,760 --> 00:32:00,799
understanding things like semantic

853
00:31:59,200 --> 00:32:14,559
versioning

854
00:32:00,799 --> 00:32:16,639
good question thank you very much thanks

855
00:32:14,559 --> 00:32:16,639
you

