1
00:00:08,000 --> 00:00:12,639
hello everyone

2
00:00:10,000 --> 00:00:13,360
so my name is axel i work at quartz lab

3
00:00:12,639 --> 00:00:15,678
which is an

4
00:00:13,360 --> 00:00:17,359
information security company i'm part of

5
00:00:15,679 --> 00:00:20,320
the infrastructure team

6
00:00:17,359 --> 00:00:23,039
and so one of our roles is to manage all

7
00:00:20,320 --> 00:00:25,039
the services and services of quartz lab

8
00:00:23,039 --> 00:00:27,680
and one of your duty of course is to

9
00:00:25,039 --> 00:00:29,840
handle backups of all those services

10
00:00:27,680 --> 00:00:31,759
so after we had an issue with a backup

11
00:00:29,840 --> 00:00:33,440
server we decided to redo all the backup

12
00:00:31,760 --> 00:00:35,520
systems that quarkxlab

13
00:00:33,440 --> 00:00:36,960
and so in this talk i will present the

14
00:00:35,520 --> 00:00:39,280
solution we designed

15
00:00:36,960 --> 00:00:40,559
and we implemented it can also be

16
00:00:39,280 --> 00:00:42,079
applied if you have like a personal

17
00:00:40,559 --> 00:00:44,079
infrastructure you can also

18
00:00:42,079 --> 00:00:46,559
back it up using the solution uh

19
00:00:44,079 --> 00:00:50,000
everything is on github that's all your

20
00:00:46,559 --> 00:00:51,680
links at the end of the presentation so

21
00:00:50,000 --> 00:00:53,280
basically at quarkxlab our

22
00:00:51,680 --> 00:00:55,680
infrastructure is composed of

23
00:00:53,280 --> 00:00:56,879
different types of servers so you have

24
00:00:55,680 --> 00:00:59,440
virtual machines

25
00:00:56,879 --> 00:00:59,919
of course you have also bare metal

26
00:00:59,440 --> 00:01:03,519
service

27
00:00:59,920 --> 00:01:07,040
that are on premise some

28
00:01:03,520 --> 00:01:08,479
project service we call them uh who

29
00:01:07,040 --> 00:01:10,240
who can contain some sensitive

30
00:01:08,479 --> 00:01:11,679
information that we don't

31
00:01:10,240 --> 00:01:13,759
just we only want a limited number of

32
00:01:11,680 --> 00:01:17,119
people at quarkstop to have access to

33
00:01:13,760 --> 00:01:19,119
and sometimes that doesn't include us

34
00:01:17,119 --> 00:01:21,200
but we have to manage okay to backup

35
00:01:19,119 --> 00:01:24,560
them as well find a solution to do it

36
00:01:21,200 --> 00:01:26,880
and also some service in the cloud it's

37
00:01:24,560 --> 00:01:28,320
mostly bare metal service that our

38
00:01:26,880 --> 00:01:29,920
hosting providers

39
00:01:28,320 --> 00:01:31,600
that are encrypted as well that we need

40
00:01:29,920 --> 00:01:33,920
to handle

41
00:01:31,600 --> 00:01:35,280
so basically what we want to do is to be

42
00:01:33,920 --> 00:01:37,200
able to backup all those types of

43
00:01:35,280 --> 00:01:38,960
servers

44
00:01:37,200 --> 00:01:40,640
uh so we looked at the existing

45
00:01:38,960 --> 00:01:43,600
solutions uh

46
00:01:40,640 --> 00:01:45,759
to manage backups and we found we found

47
00:01:43,600 --> 00:01:49,919
that were quite complex

48
00:01:45,759 --> 00:01:52,399
so often often they they try to

49
00:01:49,920 --> 00:01:53,439
handle all the cases to be very generic

50
00:01:52,399 --> 00:01:56,799
to

51
00:01:53,439 --> 00:01:58,240
to have uh the ability to process a

52
00:01:56,799 --> 00:02:01,920
windows servers to

53
00:01:58,240 --> 00:02:04,320
all kinds of machines and also they

54
00:02:01,920 --> 00:02:05,360
often need like an agent on the host

55
00:02:04,320 --> 00:02:07,520
that needs to run

56
00:02:05,360 --> 00:02:08,800
continuously they need a server maybe

57
00:02:07,520 --> 00:02:12,319
with the database

58
00:02:08,800 --> 00:02:13,200
uh they say you provide the access

59
00:02:12,319 --> 00:02:14,879
control list

60
00:02:13,200 --> 00:02:16,799
web interfaces to manage the backup

61
00:02:14,879 --> 00:02:20,239
stuff like this and we found it's

62
00:02:16,800 --> 00:02:23,520
quite uh quite hard

63
00:02:20,239 --> 00:02:26,080
to actually understand every part of

64
00:02:23,520 --> 00:02:28,480
each system and what we believe in is

65
00:02:26,080 --> 00:02:30,720
that we need to be able to understand

66
00:02:28,480 --> 00:02:32,720
how everything functions to be able to

67
00:02:30,720 --> 00:02:36,400
debug any issues that occurs

68
00:02:32,720 --> 00:02:39,630
so we decided to go with tools we knew

69
00:02:36,400 --> 00:02:41,840
and we decided to to

70
00:02:39,630 --> 00:02:44,079
[Music]

71
00:02:41,840 --> 00:02:45,760
package them together to be able to

72
00:02:44,080 --> 00:02:51,519
answer our needs

73
00:02:45,760 --> 00:02:53,040
so basically backups rely on two things

74
00:02:51,519 --> 00:02:55,120
to have effective backups you need to

75
00:02:53,040 --> 00:02:58,480
have effective storage

76
00:02:55,120 --> 00:03:00,319
so basically if you write data to

77
00:02:58,480 --> 00:03:02,319
disk backup data to disk you want to be

78
00:03:00,319 --> 00:03:03,839
able to get it back later

79
00:03:02,319 --> 00:03:06,159
so it's very important even if your

80
00:03:03,840 --> 00:03:09,360
backups the system is really

81
00:03:06,159 --> 00:03:11,920
uh if the software is really uh advanced

82
00:03:09,360 --> 00:03:14,480
it can't actually backup it can't

83
00:03:11,920 --> 00:03:16,399
actually survive like a hardware error

84
00:03:14,480 --> 00:03:18,480
so to handle the adwords side of things

85
00:03:16,400 --> 00:03:21,440
and to handle the storage side of things

86
00:03:18,480 --> 00:03:22,640
we decided to go with two tools which

87
00:03:21,440 --> 00:03:26,319
are

88
00:03:22,640 --> 00:03:28,798
friends and uh opens the cfs so freenas

89
00:03:26,319 --> 00:03:30,798
is a linux distribution that you can

90
00:03:28,799 --> 00:03:33,840
install on the server that has

91
00:03:30,799 --> 00:03:34,239
the server can have like any disks that

92
00:03:33,840 --> 00:03:37,280
you

93
00:03:34,239 --> 00:03:39,599
want it's not forced to be uh

94
00:03:37,280 --> 00:03:40,480
like sas drives or enterprise drives it

95
00:03:39,599 --> 00:03:45,280
can be like

96
00:03:40,480 --> 00:03:48,159
uh out of the shelf's

97
00:03:45,280 --> 00:03:50,000
normal hard drives that you can buy uh

98
00:03:48,159 --> 00:03:53,040
consumer hard drives

99
00:03:50,000 --> 00:03:54,159
so basically it transforms this server

100
00:03:53,040 --> 00:03:56,798
into a very

101
00:03:54,159 --> 00:03:58,159
powerful solution to be able to

102
00:03:56,799 --> 00:04:01,280
effectively backup

103
00:03:58,159 --> 00:04:03,519
to effectively store files and files so

104
00:04:01,280 --> 00:04:06,879
it offers some interfaces like uh

105
00:04:03,519 --> 00:04:08,640
nfs uh those kind of interfaces so you

106
00:04:06,879 --> 00:04:09,518
can access and store your data on the

107
00:04:08,640 --> 00:04:12,839
server

108
00:04:09,519 --> 00:04:16,478
it also uh does a really great job of

109
00:04:12,840 --> 00:04:19,519
handling emails

110
00:04:16,478 --> 00:04:21,440
to automatic automatize stuff like for

111
00:04:19,519 --> 00:04:23,199
example a disk scrubbing so you want to

112
00:04:21,440 --> 00:04:24,800
verify that all your disks so that on

113
00:04:23,199 --> 00:04:28,080
the disks are intact

114
00:04:24,800 --> 00:04:29,040
so you can use it very effectively to do

115
00:04:28,080 --> 00:04:31,359
it

116
00:04:29,040 --> 00:04:32,160
and this server relies on the file

117
00:04:31,360 --> 00:04:35,440
system

118
00:04:32,160 --> 00:04:37,199
file system which is a cfs so the fs is

119
00:04:35,440 --> 00:04:42,560
more than just a file system

120
00:04:37,199 --> 00:04:45,360
it also handles uh

121
00:04:42,560 --> 00:04:46,080
it also handles the red side of things

122
00:04:45,360 --> 00:04:48,160
so you

123
00:04:46,080 --> 00:04:49,599
you provide it with multiple disks and

124
00:04:48,160 --> 00:04:53,040
you want redundancy

125
00:04:49,600 --> 00:04:56,080
across the data you write those disks so

126
00:04:53,040 --> 00:04:59,120
cfs can do this it also

127
00:04:56,080 --> 00:05:02,800
offers two functionalities similar to

128
00:04:59,120 --> 00:05:06,639
lvm so for example if you need

129
00:05:02,800 --> 00:05:09,120
to be able to create separate

130
00:05:06,639 --> 00:05:11,680
partitions let's say you can do it quite

131
00:05:09,120 --> 00:05:13,759
easily red dimensions and

132
00:05:11,680 --> 00:05:14,880
what it's uh what it brings with those

133
00:05:13,759 --> 00:05:17,280
uh kind of uh

134
00:05:14,880 --> 00:05:19,039
red partitions which are which are

135
00:05:17,280 --> 00:05:21,039
called data stores

136
00:05:19,039 --> 00:05:22,560
uh is the ability to do snapshots of

137
00:05:21,039 --> 00:05:24,719
them so for example

138
00:05:22,560 --> 00:05:25,680
uh any point in any point in time you

139
00:05:24,720 --> 00:05:28,800
can just freeze

140
00:05:25,680 --> 00:05:31,039
the content of the of the

141
00:05:28,800 --> 00:05:32,960
data store where you store your data and

142
00:05:31,039 --> 00:05:35,039
then you can

143
00:05:32,960 --> 00:05:36,320
mount it read only later if you want so

144
00:05:35,039 --> 00:05:38,560
you can access

145
00:05:36,320 --> 00:05:39,360
those files as there were at the time

146
00:05:38,560 --> 00:05:41,840
you you

147
00:05:39,360 --> 00:05:42,880
did the snapshot and another ability is

148
00:05:41,840 --> 00:05:46,080
that you can

149
00:05:42,880 --> 00:05:46,639
actually send snapshots to other hosts

150
00:05:46,080 --> 00:05:49,359
that run

151
00:05:46,639 --> 00:05:50,880
zfs and the freeness does a great job of

152
00:05:49,360 --> 00:05:52,639
integrating it

153
00:05:50,880 --> 00:05:55,280
so this allows you for example to do

154
00:05:52,639 --> 00:05:56,400
off-site uh backups of your data so you

155
00:05:55,280 --> 00:05:59,520
just take a snapshot

156
00:05:56,400 --> 00:06:02,000
of your partition of your data store

157
00:05:59,520 --> 00:06:03,680
and you can just send it to a remote cfs

158
00:06:02,000 --> 00:06:06,479
server and

159
00:06:03,680 --> 00:06:08,639
so you have the ability to basically

160
00:06:06,479 --> 00:06:10,240
self-host a complete backup system

161
00:06:08,639 --> 00:06:11,759
so you don't have to rely on existing

162
00:06:10,240 --> 00:06:13,759
backup systems or

163
00:06:11,759 --> 00:06:15,919
to rely on servers hosted by other

164
00:06:13,759 --> 00:06:16,160
people and that was rap we are very keen

165
00:06:15,919 --> 00:06:18,639
on

166
00:06:16,160 --> 00:06:20,479
self-hosting uh everything we can

167
00:06:18,639 --> 00:06:21,360
because we deal sometimes with sensitive

168
00:06:20,479 --> 00:06:23,758
information

169
00:06:21,360 --> 00:06:25,840
and we don't trust external entities to

170
00:06:23,759 --> 00:06:29,919
handle them for us

171
00:06:25,840 --> 00:06:31,280
so the issue you also have to take care

172
00:06:29,919 --> 00:06:33,680
of course in hardware

173
00:06:31,280 --> 00:06:36,880
is actually the hard drives themselves

174
00:06:33,680 --> 00:06:40,960
so for example here

175
00:06:36,880 --> 00:06:43,520
this seagate model at the 32

176
00:06:40,960 --> 00:06:44,960
failure rate after a few years of work

177
00:06:43,520 --> 00:06:46,639
which is quite usual

178
00:06:44,960 --> 00:06:48,560
because seagate was trying a new

179
00:06:46,639 --> 00:06:51,759
technology at the time and

180
00:06:48,560 --> 00:06:52,639
they they claimed that it was of course

181
00:06:51,759 --> 00:06:54,400
very safe

182
00:06:52,639 --> 00:06:55,680
but it wasn't really so they faced a

183
00:06:54,400 --> 00:06:58,719
class action lawsuit

184
00:06:55,680 --> 00:07:00,080
so if your server happens to have those

185
00:06:58,720 --> 00:07:02,400
disks in size

186
00:07:00,080 --> 00:07:03,120
then you have a very high probability of

187
00:07:02,400 --> 00:07:06,880
failure and

188
00:07:03,120 --> 00:07:08,639
even uh the the cfs won't be able to do

189
00:07:06,880 --> 00:07:10,960
anything regarding it if you lose like

190
00:07:08,639 --> 00:07:12,560
majority of your drives so it's very

191
00:07:10,960 --> 00:07:17,120
important just uh

192
00:07:12,560 --> 00:07:20,080
to to have a separate types of disks

193
00:07:17,120 --> 00:07:20,080
into your server

194
00:07:20,479 --> 00:07:24,880
so the effective storage is one part of

195
00:07:22,720 --> 00:07:26,400
the things the other part is having

196
00:07:24,880 --> 00:07:28,560
effective backups

197
00:07:26,400 --> 00:07:30,960
so here we decided to use work because

198
00:07:28,560 --> 00:07:32,479
we use burger ourselves

199
00:07:30,960 --> 00:07:35,359
for example i use block to backup my

200
00:07:32,479 --> 00:07:38,960
personal laptop and i decided

201
00:07:35,360 --> 00:07:42,400
that maybe it was also a good idea to

202
00:07:38,960 --> 00:07:44,960
use this tool to also work about service

203
00:07:42,400 --> 00:07:46,159
work provides a number of advantages so

204
00:07:44,960 --> 00:07:48,000
it's open stores

205
00:07:46,160 --> 00:07:49,440
in standard binary so you can just drop

206
00:07:48,000 --> 00:07:50,240
it on the server and it works you don't

207
00:07:49,440 --> 00:07:51,759
have to

208
00:07:50,240 --> 00:07:53,599
install a ton of dependencies to make it

209
00:07:51,759 --> 00:07:55,360
work so it makes it very easy to

210
00:07:53,599 --> 00:07:57,360
install on a heterogeneous

211
00:07:55,360 --> 00:07:59,280
infrastructure

212
00:07:57,360 --> 00:08:01,120
it handles compression the duplication

213
00:07:59,280 --> 00:08:01,758
and encryption so basically it works at

214
00:08:01,120 --> 00:08:05,039
the block

215
00:08:01,759 --> 00:08:05,759
level of files so instead of treating

216
00:08:05,039 --> 00:08:09,520
files

217
00:08:05,759 --> 00:08:11,680
individually as a file it it treats uh

218
00:08:09,520 --> 00:08:12,560
it treats the data as blocks so for

219
00:08:11,680 --> 00:08:14,720
example

220
00:08:12,560 --> 00:08:15,599
in the file you can have multiple blocks

221
00:08:14,720 --> 00:08:17,520
and then it does

222
00:08:15,599 --> 00:08:19,199
the duplication across those blocks not

223
00:08:17,520 --> 00:08:20,799
across the files themselves

224
00:08:19,199 --> 00:08:22,400
and it's really powerful because for

225
00:08:20,800 --> 00:08:25,440
example if you have a

226
00:08:22,400 --> 00:08:28,560
virtual machines disk image

227
00:08:25,440 --> 00:08:30,080
on your system you can have multiple

228
00:08:28,560 --> 00:08:30,879
virtual machines that have the same base

229
00:08:30,080 --> 00:08:33,519
image

230
00:08:30,879 --> 00:08:34,640
but small modifications inside them of

231
00:08:33,519 --> 00:08:37,919
course

232
00:08:34,640 --> 00:08:38,319
uh work recognize the data that is the

233
00:08:37,919 --> 00:08:40,319
same

234
00:08:38,320 --> 00:08:41,680
in every file and it allows you to

235
00:08:40,320 --> 00:08:44,159
duplicate it

236
00:08:41,679 --> 00:08:45,680
very effectively only the data that is

237
00:08:44,159 --> 00:08:47,439
that is unique

238
00:08:45,680 --> 00:08:49,680
into all the files in the in the file

239
00:08:47,440 --> 00:08:53,440
system will be

240
00:08:49,680 --> 00:08:55,040
backups so the duplication is very

241
00:08:53,440 --> 00:08:58,320
powerful and of course it has a

242
00:08:55,040 --> 00:08:58,959
compression as well above it so this

243
00:08:58,320 --> 00:09:00,880
means that

244
00:08:58,959 --> 00:09:02,000
if your data is highly compressible like

245
00:09:00,880 --> 00:09:04,480
logs for example

246
00:09:02,000 --> 00:09:06,000
uh they will be quite effectively

247
00:09:04,480 --> 00:09:09,440
compressed

248
00:09:06,000 --> 00:09:12,080
it also it's quite fast so i

249
00:09:09,440 --> 00:09:13,519
i have an example and you can do remote

250
00:09:12,080 --> 00:09:16,320
backups over ssh

251
00:09:13,519 --> 00:09:18,080
so it's quite fast here it's uh my last

252
00:09:16,320 --> 00:09:21,360
backup of my personal machine

253
00:09:18,080 --> 00:09:25,040
of this laptop so you can see that

254
00:09:21,360 --> 00:09:25,360
he did a backup of 1.4 million files in

255
00:09:25,040 --> 00:09:29,199
uh

256
00:09:25,360 --> 00:09:32,720
four minutes and uh in four minutes

257
00:09:29,200 --> 00:09:35,040
so there there were 350 gigabytes of

258
00:09:32,720 --> 00:09:36,720
total data on the drive total use the

259
00:09:35,040 --> 00:09:40,000
data

260
00:09:36,720 --> 00:09:42,000
it compressed it to 228 gigabytes

261
00:09:40,000 --> 00:09:43,440
just by compressing the files that were

262
00:09:42,000 --> 00:09:47,839
highly compressible

263
00:09:43,440 --> 00:09:50,800
and it further deduplicated the data

264
00:09:47,839 --> 00:09:52,800
so this is my last my last backup of

265
00:09:50,800 --> 00:09:56,560
course i had previous backups

266
00:09:52,800 --> 00:10:00,399
so in this last backup of 350 gigabytes

267
00:09:56,560 --> 00:10:02,560
only 247 megabytes were changed

268
00:10:00,399 --> 00:10:05,279
between the last backup and this one so

269
00:10:02,560 --> 00:10:08,399
it only stores 247 new

270
00:10:05,279 --> 00:10:10,399
uh megabytes of new data on the disk

271
00:10:08,399 --> 00:10:12,399
and so you can see that is quite

272
00:10:10,399 --> 00:10:14,240
effective because the total number of

273
00:10:12,399 --> 00:10:18,160
data that were backup

274
00:10:14,240 --> 00:10:21,279
ever on my machine were 5.5

275
00:10:18,160 --> 00:10:22,800
terabytes of combined data so of unique

276
00:10:21,279 --> 00:10:24,399
data

277
00:10:22,800 --> 00:10:25,839
sorry not unique that are like unique

278
00:10:24,399 --> 00:10:28,480
files

279
00:10:25,839 --> 00:10:31,760
in those five terabytes of unique or

280
00:10:28,480 --> 00:10:35,440
even the site terabyte of data

281
00:10:31,760 --> 00:10:38,480
so it went to a 3.47

282
00:10:35,440 --> 00:10:41,440
terabyte of compressed data

283
00:10:38,480 --> 00:10:41,920
and then the duplication brought those

284
00:10:41,440 --> 00:10:46,079
uh

285
00:10:41,920 --> 00:10:49,760
300 off so so this is a 3.4

286
00:10:46,079 --> 00:10:52,239
terabytes down to 266 gigabytes

287
00:10:49,760 --> 00:10:55,760
so effectively on my backup hard drive

288
00:10:52,240 --> 00:10:58,880
so it's only 266 gigabytes used

289
00:10:55,760 --> 00:11:01,920
but if i if i were to

290
00:10:58,880 --> 00:11:04,240
expands all the backups in time

291
00:11:01,920 --> 00:11:05,199
to recover all the files it will have a

292
00:11:04,240 --> 00:11:08,640
total of

293
00:11:05,200 --> 00:11:10,880
5.7 terabytes of combined data across

294
00:11:08,640 --> 00:11:12,240
everything so it's really really

295
00:11:10,880 --> 00:11:15,279
effective

296
00:11:12,240 --> 00:11:15,600
the duplication and it's very fast i

297
00:11:15,279 --> 00:11:17,439
mean

298
00:11:15,600 --> 00:11:19,279
1.4 million five scanning four minutes

299
00:11:17,440 --> 00:11:20,240
to determine what the difference is

300
00:11:19,279 --> 00:11:23,360
between the

301
00:11:20,240 --> 00:11:23,360
previous backup and this one

302
00:11:23,600 --> 00:11:29,360
so um so we decided to use

303
00:11:27,120 --> 00:11:30,560
borg in onto the different servers like

304
00:11:29,360 --> 00:11:33,920
i said work

305
00:11:30,560 --> 00:11:35,839
you can do backup server ssh so you you

306
00:11:33,920 --> 00:11:39,120
just connect to the remote server

307
00:11:35,839 --> 00:11:41,040
and you ask and you sorry so remote

308
00:11:39,120 --> 00:11:42,240
the server connects to the backup server

309
00:11:41,040 --> 00:11:44,800
and basically

310
00:11:42,240 --> 00:11:46,480
it does its backups across a ssh

311
00:11:44,800 --> 00:11:48,560
connection

312
00:11:46,480 --> 00:11:50,720
the issue we have is that our backup

313
00:11:48,560 --> 00:11:54,160
server which is the server here

314
00:11:50,720 --> 00:11:57,120
is uh is self-hosted like is

315
00:11:54,160 --> 00:11:58,480
in our internal like on-premise

316
00:11:57,120 --> 00:12:00,560
infrastructure

317
00:11:58,480 --> 00:12:02,000
because we mostly have a self-hosted

318
00:12:00,560 --> 00:12:03,760
service

319
00:12:02,000 --> 00:12:05,600
uh the issue is that we have some hosts

320
00:12:03,760 --> 00:12:09,120
that are on internet like i said like

321
00:12:05,600 --> 00:12:11,600
on like bare metal service and hosting

322
00:12:09,120 --> 00:12:14,959
providers that we need to backup as well

323
00:12:11,600 --> 00:12:17,680
so we can connect from the backup server

324
00:12:14,959 --> 00:12:19,839
to the external server without any issue

325
00:12:17,680 --> 00:12:21,199
but the external server can't connect

326
00:12:19,839 --> 00:12:23,360
back to the backup server

327
00:12:21,200 --> 00:12:24,959
he can't initiate a connection so the

328
00:12:23,360 --> 00:12:27,760
issue is that our

329
00:12:24,959 --> 00:12:28,800
firewall only allows basically outgoing

330
00:12:27,760 --> 00:12:31,279
connections and not

331
00:12:28,800 --> 00:12:32,399
in incoming connections and we don't

332
00:12:31,279 --> 00:12:35,279
want to allow

333
00:12:32,399 --> 00:12:36,000
incoming connections because uh for

334
00:12:35,279 --> 00:12:37,760
security

335
00:12:36,000 --> 00:12:39,440
for security reasons basically we don't

336
00:12:37,760 --> 00:12:43,279
want to expose any internal server

337
00:12:39,440 --> 00:12:46,639
service to uh to internet directly

338
00:12:43,279 --> 00:12:48,480
so the issue is that borgs arrows

339
00:12:46,639 --> 00:12:50,240
the servers that need to be backups to

340
00:12:48,480 --> 00:12:52,320
connect to the

341
00:12:50,240 --> 00:12:54,560
server that is storing the backups but

342
00:12:52,320 --> 00:12:56,240
here the connection will be blocked by

343
00:12:54,560 --> 00:13:00,160
the firewall

344
00:12:56,240 --> 00:13:01,680
so to solve this issue um

345
00:13:00,160 --> 00:13:03,519
we initiate the connection from the

346
00:13:01,680 --> 00:13:07,359
backup server itself

347
00:13:03,519 --> 00:13:08,800
and uh we do a reverse port forwarding

348
00:13:07,360 --> 00:13:11,519
using ssh

349
00:13:08,800 --> 00:13:13,040
so this means that the backup server

350
00:13:11,519 --> 00:13:14,560
will initiate the connection to the

351
00:13:13,040 --> 00:13:18,480
remote server

352
00:13:14,560 --> 00:13:21,839
and then it it will across this uh

353
00:13:18,480 --> 00:13:24,880
this initial ssh connection it will

354
00:13:21,839 --> 00:13:26,399
open a listen a port listening port here

355
00:13:24,880 --> 00:13:28,560
on the remote server

356
00:13:26,399 --> 00:13:30,959
and every data that that is incoming

357
00:13:28,560 --> 00:13:33,518
into this port will be redirected to the

358
00:13:30,959 --> 00:13:34,479
local backup server on any port we want

359
00:13:33,519 --> 00:13:37,440
so either on

360
00:13:34,480 --> 00:13:39,680
the ssh port so basically this allows us

361
00:13:37,440 --> 00:13:40,880
to expose the ssh server of the backup

362
00:13:39,680 --> 00:13:43,680
server

363
00:13:40,880 --> 00:13:45,920
to any external host without the host

364
00:13:43,680 --> 00:13:47,839
having to connect to the backup server

365
00:13:45,920 --> 00:13:50,160
because we initiate the connection first

366
00:13:47,839 --> 00:13:51,120
we establish a ssh channel between the

367
00:13:50,160 --> 00:13:53,120
two servers

368
00:13:51,120 --> 00:13:54,800
so the data can flow back across this

369
00:13:53,120 --> 00:13:56,800
tunnel which is

370
00:13:54,800 --> 00:13:59,439
inside the ssh connection that is

371
00:13:56,800 --> 00:14:01,519
already established

372
00:13:59,440 --> 00:14:02,720
this also of course works for internal

373
00:14:01,519 --> 00:14:05,920
hosts

374
00:14:02,720 --> 00:14:08,480
so we have some overhead because we have

375
00:14:05,920 --> 00:14:09,519
two ssh connections where we didn't need

376
00:14:08,480 --> 00:14:11,120
two because

377
00:14:09,519 --> 00:14:12,720
the remote server the server here can

378
00:14:11,120 --> 00:14:13,199
connect directly to the backup server

379
00:14:12,720 --> 00:14:17,040
because

380
00:14:13,199 --> 00:14:19,040
they're in the same network but uh

381
00:14:17,040 --> 00:14:20,480
it works for both case so it's the most

382
00:14:19,040 --> 00:14:23,040
generic case so we are going to

383
00:14:20,480 --> 00:14:23,040
implement it

384
00:14:23,120 --> 00:14:27,040
the second issue we have to deal with if

385
00:14:25,600 --> 00:14:28,720
is that some server so

386
00:14:27,040 --> 00:14:31,120
they handle sensitive information we

387
00:14:28,720 --> 00:14:34,000
want all our backups to be encrypted

388
00:14:31,120 --> 00:14:35,920
so this means that the key for the

389
00:14:34,000 --> 00:14:38,320
encryption must be stored on the server

390
00:14:35,920 --> 00:14:41,439
itself so it knows it knows which key

391
00:14:38,320 --> 00:14:43,600
it has to use uh

392
00:14:41,440 --> 00:14:45,120
the server will do the backup across the

393
00:14:43,600 --> 00:14:47,199
ssh tuner like i just

394
00:14:45,120 --> 00:14:49,279
explained so the data will flow

395
00:14:47,199 --> 00:14:52,639
encrypted across the tuner and will be

396
00:14:49,279 --> 00:14:55,680
stored encrypted onto the backup server

397
00:14:52,639 --> 00:14:58,399
the issue is though what happens if the

398
00:14:55,680 --> 00:14:59,199
your server dies basically like a hard

399
00:14:58,399 --> 00:15:01,440
drop dies

400
00:14:59,199 --> 00:15:02,240
because uh the encryption key was stored

401
00:15:01,440 --> 00:15:03,839
on it

402
00:15:02,240 --> 00:15:06,720
so basically you have no way to recover

403
00:15:03,839 --> 00:15:09,920
your backups so that's a bit of an issue

404
00:15:06,720 --> 00:15:11,120
so what we do we don't have a very good

405
00:15:09,920 --> 00:15:13,920
workflow to under

406
00:15:11,120 --> 00:15:16,240
this at the moment what we do is uh

407
00:15:13,920 --> 00:15:19,279
basically we store a copy of the

408
00:15:16,240 --> 00:15:22,240
of the backup encryption key

409
00:15:19,279 --> 00:15:22,880
in the infrared team guys laptops

410
00:15:22,240 --> 00:15:26,079
basically

411
00:15:22,880 --> 00:15:28,320
so and also we have a few backups of

412
00:15:26,079 --> 00:15:30,959
sushi

413
00:15:28,320 --> 00:15:31,519
uh so in case of the server catching

414
00:15:30,959 --> 00:15:34,079
fire

415
00:15:31,519 --> 00:15:35,839
we have a backup of the encryption key

416
00:15:34,079 --> 00:15:36,560
that we can directly use to recover the

417
00:15:35,839 --> 00:15:38,800
data

418
00:15:36,560 --> 00:15:40,000
but the encryption key is not backup

419
00:15:38,800 --> 00:15:43,199
it's not present on the backup

420
00:15:40,000 --> 00:15:47,759
server itself because we don't want

421
00:15:43,199 --> 00:15:48,719
someone um finding like a vulnerability

422
00:15:47,759 --> 00:15:50,720
on the backup server

423
00:15:48,720 --> 00:15:52,320
gaining access to it we don't want the

424
00:15:50,720 --> 00:15:52,800
person to be able to read the backups

425
00:15:52,320 --> 00:15:55,120
because

426
00:15:52,800 --> 00:15:56,079
the content sensitive information so we

427
00:15:55,120 --> 00:15:59,120
prefer to have the

428
00:15:56,079 --> 00:16:02,160
the keys uh stored separately from the

429
00:15:59,120 --> 00:16:04,959
data itself encrypted data and

430
00:16:02,160 --> 00:16:05,920
uh this is also very convenient because

431
00:16:04,959 --> 00:16:08,000
some of the servers

432
00:16:05,920 --> 00:16:09,120
we want to backup using this

433
00:16:08,000 --> 00:16:11,360
infrastructure

434
00:16:09,120 --> 00:16:13,360
but we are not allowed to access the

435
00:16:11,360 --> 00:16:17,519
data inside

436
00:16:13,360 --> 00:16:20,160
so it's a bit of an issue because if we

437
00:16:17,519 --> 00:16:20,560
if if we add a copy of the encryption

438
00:16:20,160 --> 00:16:21,920
key

439
00:16:20,560 --> 00:16:24,079
we will be able to just use it to

440
00:16:21,920 --> 00:16:24,639
decrypt the data so what we can do

441
00:16:24,079 --> 00:16:26,800
instead

442
00:16:24,639 --> 00:16:28,240
is tell the person managing the server

443
00:16:26,800 --> 00:16:31,359
how to

444
00:16:28,240 --> 00:16:33,279
set up the system on on his server and

445
00:16:31,360 --> 00:16:36,160
then this person can store a copy

446
00:16:33,279 --> 00:16:36,880
of the key themselves securely so this

447
00:16:36,160 --> 00:16:40,079
means that

448
00:16:36,880 --> 00:16:41,199
we sysadmins infrastructures never have

449
00:16:40,079 --> 00:16:44,880
access

450
00:16:41,199 --> 00:16:46,959
to the decryption key

451
00:16:44,880 --> 00:16:48,480
but in case of the server catching fire

452
00:16:46,959 --> 00:16:49,680
we can provide the person with the

453
00:16:48,480 --> 00:16:53,440
encrypted files and

454
00:16:49,680 --> 00:16:53,439
they can decrypt the files themselves

455
00:16:55,759 --> 00:17:03,199
so to handle executing the backup

456
00:17:00,320 --> 00:17:05,439
process on all the various servers we

457
00:17:03,199 --> 00:17:08,720
created a small python script

458
00:17:05,439 --> 00:17:13,520
python free scripts which basically

459
00:17:08,720 --> 00:17:17,120
is in charge of at regular intervals

460
00:17:13,520 --> 00:17:19,599
of connecting to the remote servers so

461
00:17:17,119 --> 00:17:22,000
triggers the ssh general creation

462
00:17:19,599 --> 00:17:24,559
process and triggers the backup process

463
00:17:22,000 --> 00:17:26,880
so this script is running on the on the

464
00:17:24,559 --> 00:17:29,760
backup server itself

465
00:17:26,880 --> 00:17:31,280
and uh it collects all the logs from all

466
00:17:29,760 --> 00:17:33,679
the various backups

467
00:17:31,280 --> 00:17:34,639
and it sends us emails so it sends us of

468
00:17:33,679 --> 00:17:36,799
course emails on

469
00:17:34,640 --> 00:17:37,679
error so if the backup has an issue we

470
00:17:36,799 --> 00:17:40,240
are informed

471
00:17:37,679 --> 00:17:41,280
directly but it's also sent email on

472
00:17:40,240 --> 00:17:43,440
success

473
00:17:41,280 --> 00:17:45,039
which is very important because if you

474
00:17:43,440 --> 00:17:47,679
never receive emails

475
00:17:45,039 --> 00:17:48,160
on success of your backups you are never

476
00:17:47,679 --> 00:17:50,559
sure

477
00:17:48,160 --> 00:17:51,600
that the backup process actually

478
00:17:50,559 --> 00:17:54,080
executed

479
00:17:51,600 --> 00:17:54,959
you know so basically you can have a the

480
00:17:54,080 --> 00:17:56,559
backup server

481
00:17:54,960 --> 00:17:58,960
can be down for example for some

482
00:17:56,559 --> 00:18:02,480
whatever reason and then

483
00:17:58,960 --> 00:18:03,600
you will you will not receive any error

484
00:18:02,480 --> 00:18:05,039
message

485
00:18:03,600 --> 00:18:06,639
informing you that the backup can't be

486
00:18:05,039 --> 00:18:09,919
done because the server is down

487
00:18:06,640 --> 00:18:11,280
so basically it's important for us to

488
00:18:09,919 --> 00:18:12,880
receive emails when

489
00:18:11,280 --> 00:18:16,160
everything is going well because then we

490
00:18:12,880 --> 00:18:19,200
know that everything actually went well

491
00:18:16,160 --> 00:18:20,240
so that's a subject of the emails that

492
00:18:19,200 --> 00:18:21,600
are sent to us so

493
00:18:20,240 --> 00:18:23,760
informing us of the total number of

494
00:18:21,600 --> 00:18:26,159
server backups the

495
00:18:23,760 --> 00:18:27,120
number of servers that had issues during

496
00:18:26,160 --> 00:18:29,600
the backup and

497
00:18:27,120 --> 00:18:30,479
a total time that was spent back up in

498
00:18:29,600 --> 00:18:32,799
the service

499
00:18:30,480 --> 00:18:33,919
which is a huge a useful metric if you

500
00:18:32,799 --> 00:18:36,400
compare

501
00:18:33,919 --> 00:18:37,440
um if you compare the times between

502
00:18:36,400 --> 00:18:39,840
different backups

503
00:18:37,440 --> 00:18:41,039
you can know instantly if for example

504
00:18:39,840 --> 00:18:43,600
some server is acting

505
00:18:41,039 --> 00:18:46,320
weird because it takes a really longer

506
00:18:43,600 --> 00:18:48,399
than usual to backup

507
00:18:46,320 --> 00:18:50,159
so it handles a store storage of all

508
00:18:48,400 --> 00:18:51,360
those backup plugs so we can access them

509
00:18:50,160 --> 00:18:54,559
whenever

510
00:18:51,360 --> 00:18:57,918
and it's really simple we have a full

511
00:18:54,559 --> 00:19:01,678
coverage on it with unit tests

512
00:18:57,919 --> 00:19:04,000
and it's accessible on github

513
00:19:01,679 --> 00:19:04,799
so you can use this script if you want

514
00:19:04,000 --> 00:19:07,360
to

515
00:19:04,799 --> 00:19:08,639
replicate the same concept as basically

516
00:19:07,360 --> 00:19:11,199
so to have this

517
00:19:08,640 --> 00:19:14,000
concept of backuping using borg on

518
00:19:11,200 --> 00:19:14,000
remote servers

519
00:19:14,480 --> 00:19:18,720
so no i'll present

520
00:19:16,390 --> 00:19:22,080
[Music]

521
00:19:18,720 --> 00:19:23,679
no sorry yeah so so this script is

522
00:19:22,080 --> 00:19:24,000
running on a freebsd jail which is

523
00:19:23,679 --> 00:19:26,480
running

524
00:19:24,000 --> 00:19:27,919
on the freelance server itself so the

525
00:19:26,480 --> 00:19:28,640
recommended way to run code on the

526
00:19:27,919 --> 00:19:31,280
freeness

527
00:19:28,640 --> 00:19:32,880
server is actually to create a bsd jail

528
00:19:31,280 --> 00:19:33,918
and run the code inside it so that's

529
00:19:32,880 --> 00:19:36,559
what we do

530
00:19:33,919 --> 00:19:38,160
and we automate a few things so we

531
00:19:36,559 --> 00:19:39,918
automate the creation and the

532
00:19:38,160 --> 00:19:42,000
provisioning of the jail

533
00:19:39,919 --> 00:19:44,160
and the provisioning of the servers that

534
00:19:42,000 --> 00:19:47,520
need to be backup

535
00:19:44,160 --> 00:19:50,400
uh using ansible and you can find

536
00:19:47,520 --> 00:19:52,160
all different ansible roles and an

537
00:19:50,400 --> 00:19:55,440
example playbook

538
00:19:52,160 --> 00:19:55,919
that implements those words on github as

539
00:19:55,440 --> 00:19:57,760
well

540
00:19:55,919 --> 00:19:59,200
so if you if you want to just recreate

541
00:19:57,760 --> 00:20:02,240
the solution assist you can

542
00:19:59,200 --> 00:20:05,360
very easily do so

543
00:20:02,240 --> 00:20:06,960
now i'll present the complete backup

544
00:20:05,360 --> 00:20:08,799
process

545
00:20:06,960 --> 00:20:10,960
so basically you have the backup server

546
00:20:08,799 --> 00:20:13,679
here this is a

547
00:20:10,960 --> 00:20:16,080
chrome that is running um periodically

548
00:20:13,679 --> 00:20:18,559
on the backup server

549
00:20:16,080 --> 00:20:20,960
so for it's once a day but you can have

550
00:20:18,559 --> 00:20:23,678
the frequency you want

551
00:20:20,960 --> 00:20:25,280
so this chrome is in charge of executing

552
00:20:23,679 --> 00:20:27,600
the backup script that we

553
00:20:25,280 --> 00:20:29,360
i just talked about so the script will

554
00:20:27,600 --> 00:20:31,360
read its configuration file

555
00:20:29,360 --> 00:20:32,840
so configuration files content basically

556
00:20:31,360 --> 00:20:34,000
the list of hosts that need to be

557
00:20:32,840 --> 00:20:35,918
backups

558
00:20:34,000 --> 00:20:37,679
how to connect to those hosts so which

559
00:20:35,919 --> 00:20:40,960
ssh ports which

560
00:20:37,679 --> 00:20:41,600
should we use uh some various

561
00:20:40,960 --> 00:20:43,600
information

562
00:20:41,600 --> 00:20:46,320
for example the topic of the success and

563
00:20:43,600 --> 00:20:51,039
error emails what they should be

564
00:20:46,320 --> 00:20:54,799
so it reads um this backup configuration

565
00:20:51,039 --> 00:20:58,480
then it runs ssh

566
00:20:54,799 --> 00:21:01,200
ssh command so basically it instructs

567
00:20:58,480 --> 00:21:03,120
it creates a ssh connection to the to

568
00:21:01,200 --> 00:21:03,760
the host we need to backup for each host

569
00:21:03,120 --> 00:21:05,439
it does this

570
00:21:03,760 --> 00:21:07,360
of course uh sequentially we can also

571
00:21:05,440 --> 00:21:09,440
parallelize it but it's a work in

572
00:21:07,360 --> 00:21:12,799
progress it's not done yet

573
00:21:09,440 --> 00:21:14,400
but social security it will find that we

574
00:21:12,799 --> 00:21:17,760
trust needs to be backup

575
00:21:14,400 --> 00:21:20,880
it will uh create a connection to it

576
00:21:17,760 --> 00:21:23,919
and it will establish the reverse

577
00:21:20,880 --> 00:21:25,039
uh port forwarding using ssh so to have

578
00:21:23,919 --> 00:21:27,440
the connection back

579
00:21:25,039 --> 00:21:30,158
to be able to connect back for us saturn

580
00:21:27,440 --> 00:21:31,840
internet for example

581
00:21:30,159 --> 00:21:34,080
so the host will receive the ssh

582
00:21:31,840 --> 00:21:37,439
connection the hosted into the backup

583
00:21:34,080 --> 00:21:37,439
will receive the csh connection

584
00:21:37,760 --> 00:21:44,400
the tunnel will be established

585
00:21:41,120 --> 00:21:45,280
so in the sshg and also need to be

586
00:21:44,400 --> 00:21:47,039
backup

587
00:21:45,280 --> 00:21:48,879
so there are two important things so

588
00:21:47,039 --> 00:21:52,320
basically we permit root login

589
00:21:48,880 --> 00:21:55,039
but we only allow commands that are

590
00:21:52,320 --> 00:21:55,840
predetermined in advance so we don't

591
00:21:55,039 --> 00:21:59,280
actually

592
00:21:55,840 --> 00:22:01,600
expose root access to the to

593
00:21:59,280 --> 00:22:02,480
nurture attackers where we exposed

594
00:22:01,600 --> 00:22:05,520
berserker only

595
00:22:02,480 --> 00:22:08,159
run one command that we defined and we

596
00:22:05,520 --> 00:22:10,080
permit user environments

597
00:22:08,159 --> 00:22:11,840
so we can send the environment variables

598
00:22:10,080 --> 00:22:15,039
to ssh

599
00:22:11,840 --> 00:22:16,320
then so you you you can

600
00:22:15,039 --> 00:22:18,879
you can see that we don't actually

601
00:22:16,320 --> 00:22:21,520
execute any commands on the server

602
00:22:18,880 --> 00:22:22,000
why because it's restricted to executing

603
00:22:21,520 --> 00:22:23,840
only

604
00:22:22,000 --> 00:22:25,120
one specified command in advance and

605
00:22:23,840 --> 00:22:27,280
this specified command

606
00:22:25,120 --> 00:22:28,479
is a call to bogmatic which is a tool

607
00:22:27,280 --> 00:22:31,520
that handles

608
00:22:28,480 --> 00:22:34,159
a bork configuration so basically we

609
00:22:31,520 --> 00:22:36,639
tell blogmatic hey

610
00:22:34,159 --> 00:22:38,080
you can execute you can read this

611
00:22:36,640 --> 00:22:42,080
configuration file

612
00:22:38,080 --> 00:22:44,399
to know what settings uh you you need to

613
00:22:42,080 --> 00:22:45,520
provide to work so which directories you

614
00:22:44,400 --> 00:22:48,960
need to backup

615
00:22:45,520 --> 00:22:51,520
uh which server you need to backup to

616
00:22:48,960 --> 00:22:53,039
uh if the repository doesn't exist on

617
00:22:51,520 --> 00:22:54,080
the backup host already you can create

618
00:22:53,039 --> 00:22:56,240
it

619
00:22:54,080 --> 00:22:58,879
using an encryption key that we store on

620
00:22:56,240 --> 00:23:00,159
the backup server itself

621
00:22:58,880 --> 00:23:01,679
oh sorry that we don't store on the

622
00:23:00,159 --> 00:23:04,799
backup server itself that is stored on

623
00:23:01,679 --> 00:23:04,799
the host that needs to be backup

624
00:23:04,880 --> 00:23:08,720
then you can create a new backup check

625
00:23:06,720 --> 00:23:09,440
all existing backups for integrity so we

626
00:23:08,720 --> 00:23:10,960
are sure that

627
00:23:09,440 --> 00:23:12,960
the backups don't become corrupt

628
00:23:10,960 --> 00:23:14,559
corrupted over time and that we can

629
00:23:12,960 --> 00:23:15,280
actually reassemble all the various

630
00:23:14,559 --> 00:23:17,678
block

631
00:23:15,280 --> 00:23:19,678
from all the various backups we use we

632
00:23:17,679 --> 00:23:22,880
restored

633
00:23:19,679 --> 00:23:24,799
and then you can delete all the backups

634
00:23:22,880 --> 00:23:27,919
that you don't need anymore because they

635
00:23:24,799 --> 00:23:30,320
they are expired for example and

636
00:23:27,919 --> 00:23:31,919
it uses an ssh key to connect to the

637
00:23:30,320 --> 00:23:33,360
backup server that we provisioned in

638
00:23:31,919 --> 00:23:35,360
advance using ansible

639
00:23:33,360 --> 00:23:37,520
but you can also provision it by hand of

640
00:23:35,360 --> 00:23:40,559
course

641
00:23:37,520 --> 00:23:41,760
so basically the host will establish the

642
00:23:40,559 --> 00:23:45,440
ssh connection

643
00:23:41,760 --> 00:23:48,559
to the backup server using the mechanism

644
00:23:45,440 --> 00:23:48,559
integrated into borg

645
00:23:49,520 --> 00:23:52,879
the backup server will receive the

646
00:23:51,520 --> 00:23:56,240
incoming ssh connection

647
00:23:52,880 --> 00:23:57,120
established by borg uh it will also

648
00:23:56,240 --> 00:23:58,960
restrict it to

649
00:23:57,120 --> 00:24:01,120
executing one single command only which

650
00:23:58,960 --> 00:24:03,919
is box serve so by the keyboard will act

651
00:24:01,120 --> 00:24:05,520
as a remote server and will handle very

652
00:24:03,919 --> 00:24:06,559
efficiently all the incoming data

653
00:24:05,520 --> 00:24:09,039
because uh

654
00:24:06,559 --> 00:24:10,000
it can understand what the borg on the

655
00:24:09,039 --> 00:24:12,559
servers that need to be backup

656
00:24:10,000 --> 00:24:12,559
descending

657
00:24:12,960 --> 00:24:17,440
so we work in app and only mode so that

658
00:24:16,400 --> 00:24:21,520
means that

659
00:24:17,440 --> 00:24:23,120
remote server can only store new blocks

660
00:24:21,520 --> 00:24:25,200
instead inside the backup server it

661
00:24:23,120 --> 00:24:27,279
can't actually delete any blocks

662
00:24:25,200 --> 00:24:29,840
so it's very important because if some

663
00:24:27,279 --> 00:24:33,039
if someone were to compromise

664
00:24:29,840 --> 00:24:35,279
our remote host then

665
00:24:33,039 --> 00:24:37,039
if they want to cause us harm they can

666
00:24:35,279 --> 00:24:39,600
just instruct the host to delete

667
00:24:37,039 --> 00:24:41,520
all of all of its backups and then we

668
00:24:39,600 --> 00:24:44,959
don't have actually backups

669
00:24:41,520 --> 00:24:46,960
so by using the app and only mode

670
00:24:44,960 --> 00:24:48,400
the server can't delete any information

671
00:24:46,960 --> 00:24:50,559
so we can always

672
00:24:48,400 --> 00:24:52,080
uh we are always sure to have actual

673
00:24:50,559 --> 00:24:53,678
backups of the server

674
00:24:52,080 --> 00:24:55,760
inside our backup servers even if the

675
00:24:53,679 --> 00:24:58,880
remote server is compromised

676
00:24:55,760 --> 00:24:59,440
so we can we we know we can roll back to

677
00:24:58,880 --> 00:25:01,600
a state

678
00:24:59,440 --> 00:25:03,919
where it wasn't compromised basically if

679
00:25:01,600 --> 00:25:03,918
we need

680
00:25:04,720 --> 00:25:09,200
and we restrict it to uh to a specific

681
00:25:07,279 --> 00:25:10,320
folder so it can only store backups in

682
00:25:09,200 --> 00:25:13,520
this folder

683
00:25:10,320 --> 00:25:15,279
so it's the same issue if someone were

684
00:25:13,520 --> 00:25:17,279
to compromise a remote host

685
00:25:15,279 --> 00:25:19,039
they could basically instruct borg to

686
00:25:17,279 --> 00:25:21,760
store the backups

687
00:25:19,039 --> 00:25:23,360
to erase so to overwrite backups of

688
00:25:21,760 --> 00:25:26,000
other servers so you don't want this you

689
00:25:23,360 --> 00:25:29,360
want it to be restricted to only one

690
00:25:26,000 --> 00:25:31,760
repository so that's what we do here

691
00:25:29,360 --> 00:25:32,719
and this ssh key is actually stored on

692
00:25:31,760 --> 00:25:36,480
the

693
00:25:32,720 --> 00:25:40,080
in the ssh key of this host which we

694
00:25:36,480 --> 00:25:43,840
have into our backup server

695
00:25:40,080 --> 00:25:46,080
so then the connection is established

696
00:25:43,840 --> 00:25:47,840
a borg serve is running here borg is

697
00:25:46,080 --> 00:25:48,639
running here they can exchange data

698
00:25:47,840 --> 00:25:50,240
which which is

699
00:25:48,640 --> 00:25:51,760
encrypted of course with the encryption

700
00:25:50,240 --> 00:25:55,200
key that is present on the

701
00:25:51,760 --> 00:25:57,279
person need to be backup and then

702
00:25:55,200 --> 00:25:59,440
the script once the backup is finished

703
00:25:57,279 --> 00:26:01,360
this sends us an email so for example

704
00:25:59,440 --> 00:26:02,799
uh we started backup completed

705
00:26:01,360 --> 00:26:06,080
successfully we don't have any

706
00:26:02,799 --> 00:26:08,720
errors uh it's uh

707
00:26:06,080 --> 00:26:09,120
um it spends this time backuping and uh

708
00:26:08,720 --> 00:26:10,880
so

709
00:26:09,120 --> 00:26:13,918
we are we are only success we don't have

710
00:26:10,880 --> 00:26:13,919
failure or skipped host

711
00:26:14,400 --> 00:26:17,840
so thank you every everything i talked

712
00:26:17,440 --> 00:26:19,440
about

713
00:26:17,840 --> 00:26:20,959
everything we created so basically the

714
00:26:19,440 --> 00:26:22,000
ansible roles to set up the backup

715
00:26:20,960 --> 00:26:24,400
system

716
00:26:22,000 --> 00:26:26,720
uh it's a script that is handling uh

717
00:26:24,400 --> 00:26:30,000
awkward creating all the backups

718
00:26:26,720 --> 00:26:32,320
and uh the backup process itself uh

719
00:26:30,000 --> 00:26:33,360
are all documented and present on github

720
00:26:32,320 --> 00:26:35,439
so uh

721
00:26:33,360 --> 00:26:36,479
it's on the quarkxlab organ sorry quartz

722
00:26:35,440 --> 00:26:38,720
lab organization

723
00:26:36,480 --> 00:26:40,720
and this is the name of the various

724
00:26:38,720 --> 00:26:45,120
repositories we have

725
00:26:40,720 --> 00:26:47,679
so feel free to ask me any questions

726
00:26:45,120 --> 00:26:49,678
i will also be present outside the room

727
00:26:47,679 --> 00:26:51,600
if you have any questions

728
00:26:49,679 --> 00:26:53,200
for me that are a bit too long to talk

729
00:26:51,600 --> 00:26:55,039
about here and uh

730
00:26:53,200 --> 00:26:56,400
don't yeah feel free to take a look at

731
00:26:55,039 --> 00:26:58,879
the scripts if the

732
00:26:56,400 --> 00:27:02,080
system seems interesting for you and you

733
00:26:58,880 --> 00:27:02,080
want to implement it yourself

734
00:27:05,120 --> 00:27:08,559
needs to be yes axis and that you cannot

735
00:27:08,080 --> 00:27:10,320
uh

736
00:27:08,559 --> 00:27:12,399
keep them fall back up open and at the

737
00:27:10,320 --> 00:27:14,399
same time by itself or if you take a

738
00:27:12,400 --> 00:27:16,559
fork back overboard backwards that you

739
00:27:14,400 --> 00:27:18,799
need to use overlay attached to exit

740
00:27:16,559 --> 00:27:20,960
how did you solve that okay can you

741
00:27:18,799 --> 00:27:22,210
repeat the question sorry

742
00:27:20,960 --> 00:27:24,000
doesn't allow

743
00:27:22,210 --> 00:27:28,399
[Music]

744
00:27:24,000 --> 00:27:31,279
to have access to his own goal packer

745
00:27:28,399 --> 00:27:31,918
with two simultaneous systems or you can

746
00:27:31,279 --> 00:27:34,000
also not

747
00:27:31,919 --> 00:27:35,600
do a port backup of another pork backer

748
00:27:34,000 --> 00:27:37,679
and access that walk back up

749
00:27:35,600 --> 00:27:39,279
without using very special tricks and

750
00:27:37,679 --> 00:27:41,440
overlay if yes and all kinds of other

751
00:27:39,279 --> 00:27:43,919
things it does not have paid only access

752
00:27:41,440 --> 00:27:44,799
how did you how did you guys solve that

753
00:27:43,919 --> 00:27:48,640
bulk doesn't have

754
00:27:44,799 --> 00:27:51,440
read only access to as i'm sorry i don't

755
00:27:48,640 --> 00:27:51,440
understand your question

756
00:27:55,760 --> 00:27:59,520
does not allow only access oh that's the

757
00:27:58,559 --> 00:28:02,320
app and only mod

758
00:27:59,520 --> 00:28:04,639
that we use basically so basically the

759
00:28:02,320 --> 00:28:07,760
box server

760
00:28:04,640 --> 00:28:09,279
allows new blocks to be stored inside it

761
00:28:07,760 --> 00:28:10,240
but it doesn't allow any blocks to be

762
00:28:09,279 --> 00:28:13,440
erased

763
00:28:10,240 --> 00:28:15,120
so the box server has

764
00:28:13,440 --> 00:28:17,039
read write access to the files

765
00:28:15,120 --> 00:28:18,239
themselves but the box server itself

766
00:28:17,039 --> 00:28:21,440
restricts

767
00:28:18,240 --> 00:28:22,080
blocks to only be written if there are

768
00:28:21,440 --> 00:28:26,880
new blocks

769
00:28:22,080 --> 00:28:26,879
they say it doesn't allow any

770
00:28:27,120 --> 00:28:31,840
old present blocks to be erased

771
00:28:32,480 --> 00:28:36,240
yeah but if you have if you are

772
00:28:34,960 --> 00:28:38,559
installing a backup

773
00:28:36,240 --> 00:28:39,679
or if you restore a bucket yeah you

774
00:28:38,559 --> 00:28:43,600
cannot do anything

775
00:28:39,679 --> 00:28:45,679
anymore and all the other other backups

776
00:28:43,600 --> 00:28:46,879
so if you keep them back over you cannot

777
00:28:45,679 --> 00:28:48,720
do anything

778
00:28:46,880 --> 00:28:50,000
with the backup if you mount the port

779
00:28:48,720 --> 00:28:51,840
mount

780
00:28:50,000 --> 00:28:53,039
if you have issues with that it seems

781
00:28:51,840 --> 00:28:56,399
not anyway so

782
00:28:53,039 --> 00:28:58,000
that's not the case so no i don't i i i

783
00:28:56,399 --> 00:28:59,600
we never experienced any issues with it

784
00:28:58,000 --> 00:29:03,200
so i don't i don't know

785
00:28:59,600 --> 00:29:07,279
sorry about mounting read-only

786
00:29:03,200 --> 00:29:11,760
snapshots yeah so is that handled

787
00:29:07,279 --> 00:29:13,440
by zfs yeah so basically the

788
00:29:11,760 --> 00:29:14,879
yeah i skipped a bit because i didn't

789
00:29:13,440 --> 00:29:17,360
have time to present everything

790
00:29:14,880 --> 00:29:18,559
but basically the data is stored by by

791
00:29:17,360 --> 00:29:21,600
the box server onto

792
00:29:18,559 --> 00:29:22,639
uh cfs into a data store a cfs data

793
00:29:21,600 --> 00:29:24,320
store

794
00:29:22,640 --> 00:29:26,559
then we can create snapshots of this

795
00:29:24,320 --> 00:29:28,480
data store which are read-only

796
00:29:26,559 --> 00:29:30,799
but the data store itself in normal use

797
00:29:28,480 --> 00:29:33,919
remains read write and it's only those

798
00:29:30,799 --> 00:29:38,158
snapshots that we can

799
00:29:33,919 --> 00:29:38,159
mount at a later date to be able to

800
00:29:38,840 --> 00:29:42,879
access

801
00:29:40,080 --> 00:29:43,678
the backup files as they were at this

802
00:29:42,880 --> 00:29:45,679
date

803
00:29:43,679 --> 00:29:46,960
this prevents us for for example if

804
00:29:45,679 --> 00:29:49,039
there is an issue in

805
00:29:46,960 --> 00:29:50,960
our script that is running on the on the

806
00:29:49,039 --> 00:29:54,320
jail on the backup server if the screen

807
00:29:50,960 --> 00:29:57,600
decides to erase all the backup files

808
00:29:54,320 --> 00:30:01,279
we can actually restore a cfs snapshot

809
00:29:57,600 --> 00:30:02,959
of the data in the previous

810
00:30:01,279 --> 00:30:04,720
like of the previous day so we can

811
00:30:02,960 --> 00:30:07,520
basically recover the data

812
00:30:04,720 --> 00:30:09,360
i don't know if it answers your question

813
00:30:07,520 --> 00:30:11,520
but we can talk about it a bit later if

814
00:30:09,360 --> 00:30:14,240
you want

815
00:30:11,520 --> 00:30:14,240
any other questions

816
00:30:17,120 --> 00:30:22,959
to actually back up and

817
00:30:20,480 --> 00:30:22,960
how is it

818
00:30:24,559 --> 00:30:27,918
yeah the resource is also quite fast the

819
00:30:26,640 --> 00:30:31,039
only thing that

820
00:30:27,919 --> 00:30:32,080
uh that happens is that it used quite a

821
00:30:31,039 --> 00:30:34,720
lot of cpu

822
00:30:32,080 --> 00:30:35,439
usage to do the backups and to do the

823
00:30:34,720 --> 00:30:39,120
restore

824
00:30:35,440 --> 00:30:41,600
because it has to basically compute uh

825
00:30:39,120 --> 00:30:42,719
ashes of all the parts of each file to

826
00:30:41,600 --> 00:30:45,520
be able to know which

827
00:30:42,720 --> 00:30:46,640
ones are different for which one other

828
00:30:45,520 --> 00:30:49,440
and uh

829
00:30:46,640 --> 00:30:51,120
during the restore it has to uh and also

830
00:30:49,440 --> 00:30:52,640
it does compression over those parts the

831
00:30:51,120 --> 00:30:53,678
phrases so during the rest so it has the

832
00:30:52,640 --> 00:30:55,520
same operations

833
00:30:53,679 --> 00:30:57,200
so it's quite cpu intensive during the

834
00:30:55,520 --> 00:31:01,440
backup itself

835
00:30:57,200 --> 00:31:04,720
but it's you can mount the

836
00:31:01,440 --> 00:31:07,440
the backup

837
00:31:04,720 --> 00:31:08,240
any backup you want using work that is a

838
00:31:07,440 --> 00:31:10,320
xposed

839
00:31:08,240 --> 00:31:11,679
file system basically like confused file

840
00:31:10,320 --> 00:31:15,519
system so

841
00:31:11,679 --> 00:31:15,919
it's i didn't notice any slow access to

842
00:31:15,519 --> 00:31:17,760
this

843
00:31:15,919 --> 00:31:20,880
as long as you have the correct cpu to

844
00:31:17,760 --> 00:31:20,879
handle it basically

845
00:31:22,000 --> 00:31:24,720
our time's up

846
00:31:25,679 --> 00:31:33,840
is your market server sequentially you

847
00:31:28,320 --> 00:31:33,840
track the server to be better

848
00:31:33,919 --> 00:31:37,039
it's a sequential okay so sorry i didn't

849
00:31:36,159 --> 00:31:39,039
repeat the question

850
00:31:37,039 --> 00:31:40,640
so it's um it's a backup process

851
00:31:39,039 --> 00:31:43,120
sequential opera or

852
00:31:40,640 --> 00:31:43,760
parallelist so basically it's sequential

853
00:31:43,120 --> 00:31:45,918
right now

854
00:31:43,760 --> 00:31:47,120
but uh nothing prevents it from being

855
00:31:45,919 --> 00:31:50,159
paralyzed

856
00:31:47,120 --> 00:31:51,918
so we proved one configuration file to

857
00:31:50,159 --> 00:31:54,159
the script and the script executes the

858
00:31:51,919 --> 00:31:56,720
configuration file in order

859
00:31:54,159 --> 00:31:57,440
but we also have a mod we added quite

860
00:31:56,720 --> 00:32:00,559
recently

861
00:31:57,440 --> 00:32:01,440
where we can just instruct the script to

862
00:32:00,559 --> 00:32:04,879
only backup

863
00:32:01,440 --> 00:32:07,679
one host in this in this second trigger

864
00:32:04,880 --> 00:32:08,240
configuration file so you could imagine

865
00:32:07,679 --> 00:32:10,799
a case

866
00:32:08,240 --> 00:32:10,799
where you have

867
00:32:11,679 --> 00:32:15,279
n chrome entries one per server that

868
00:32:14,320 --> 00:32:17,439
need to be backups

869
00:32:15,279 --> 00:32:18,399
that can execute at the same time and

870
00:32:17,440 --> 00:32:20,399
that

871
00:32:18,399 --> 00:32:21,439
all use the same configuration file but

872
00:32:20,399 --> 00:32:24,158
all restrict

873
00:32:21,440 --> 00:32:25,919
the backup to one specific host you will

874
00:32:24,159 --> 00:32:27,279
just receive a lot of emails of success

875
00:32:25,919 --> 00:32:30,240
or error but that's all

876
00:32:27,279 --> 00:32:30,240
but it can be done here

877
00:32:30,399 --> 00:32:33,678
so time's up i'll be outside if you have

878
00:32:32,240 --> 00:32:43,440
any more questions

879
00:32:33,679 --> 00:32:45,519
thank you for

880
00:32:43,440 --> 00:32:45,519
you

