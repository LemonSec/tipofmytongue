1
00:00:06,560 --> 00:00:09,760
our next speaker needs little

2
00:00:08,160 --> 00:00:11,679
introduction

3
00:00:09,760 --> 00:00:13,440
uh daniel will talk to us about gr

4
00:00:11,679 --> 00:00:15,360
satellites

5
00:00:13,440 --> 00:00:17,119
on the line it's very exciting thank you

6
00:00:15,360 --> 00:00:17,680
very much i'm glad to be here for the

7
00:00:17,119 --> 00:00:22,000
first time

8
00:00:17,680 --> 00:00:24,320
actually so what is gr satellites

9
00:00:22,000 --> 00:00:25,279
just satellites is a gnu radio out of

10
00:00:24,320 --> 00:00:27,760
three modules

11
00:00:25,279 --> 00:00:28,640
and has a collection of telemetry

12
00:00:27,760 --> 00:00:31,279
decoders

13
00:00:28,640 --> 00:00:31,920
for many different amateur satellites

14
00:00:31,279 --> 00:00:34,719
and

15
00:00:31,920 --> 00:00:36,000
by amateur satellite i understand any

16
00:00:34,719 --> 00:00:39,040
kind of satellite

17
00:00:36,000 --> 00:00:41,920
which transmits data digital data

18
00:00:39,040 --> 00:00:43,200
on amateur radio spectrum so these are

19
00:00:41,920 --> 00:00:46,399
satellites built

20
00:00:43,200 --> 00:00:48,320
by research institutions uh educational

21
00:00:46,399 --> 00:00:51,360
projects and universities

22
00:00:48,320 --> 00:00:53,120
also i'm actually individuals or smart

23
00:00:51,360 --> 00:00:56,079
groups

24
00:00:53,120 --> 00:00:57,280
things like that if we see this as a

25
00:00:56,079 --> 00:01:00,879
small black box

26
00:00:57,280 --> 00:01:04,320
uh the input to the decoder is usually

27
00:01:00,879 --> 00:01:04,798
iq rf samples either taken in real time

28
00:01:04,319 --> 00:01:08,479
from

29
00:01:04,799 --> 00:01:11,600
sdr hardware or uh a conventional radio

30
00:01:08,479 --> 00:01:12,080
like a kenwood or icon amateur radio or

31
00:01:11,600 --> 00:01:14,960
maybe

32
00:01:12,080 --> 00:01:16,798
an iq recording uh done with that

33
00:01:14,960 --> 00:01:20,080
hardware before

34
00:01:16,799 --> 00:01:24,000
and the output you get from the decoder

35
00:01:20,080 --> 00:01:26,560
is uh either packets printed out in

36
00:01:24,000 --> 00:01:27,600
hexadecimal format or you can save the

37
00:01:26,560 --> 00:01:30,799
packets uh

38
00:01:27,600 --> 00:01:32,240
to a file on your computer or pass

39
00:01:30,799 --> 00:01:35,280
telemetry values so

40
00:01:32,240 --> 00:01:36,960
those are things like voltages of

41
00:01:35,280 --> 00:01:40,240
batteries and buses

42
00:01:36,960 --> 00:01:43,919
and current intensities temperatures

43
00:01:40,240 --> 00:01:46,479
um and maybe even payload data so

44
00:01:43,920 --> 00:01:47,040
some satellites have experiments i don't

45
00:01:46,479 --> 00:01:49,759
know

46
00:01:47,040 --> 00:01:52,000
maybe a high energy particle detector

47
00:01:49,759 --> 00:01:55,520
for example

48
00:01:52,000 --> 00:01:58,479
the main project goal is to provide an

49
00:01:55,520 --> 00:02:00,000
open source solution to decode any

50
00:01:58,479 --> 00:02:02,880
amateur satellite

51
00:02:00,000 --> 00:02:03,520
so there's some philosophy to that that

52
00:02:02,880 --> 00:02:06,399
any

53
00:02:03,520 --> 00:02:07,039
amateur radio signal needs to have a

54
00:02:06,399 --> 00:02:09,840
clear

55
00:02:07,040 --> 00:02:11,120
um public specifications for anyone to

56
00:02:09,840 --> 00:02:13,200
be able to

57
00:02:11,120 --> 00:02:14,160
build their own decoder but that would

58
00:02:13,200 --> 00:02:17,440
be a matter for

59
00:02:14,160 --> 00:02:20,879
a different talk this all started for

60
00:02:17,440 --> 00:02:23,760
fun and learning in 2015

61
00:02:20,879 --> 00:02:24,959
some small projects i did with a few

62
00:02:23,760 --> 00:02:27,040
satellites and

63
00:02:24,959 --> 00:02:28,560
no one besides the audience had decoded

64
00:02:27,040 --> 00:02:32,160
before

65
00:02:28,560 --> 00:02:34,959
and it sort of grew up and turned into a

66
00:02:32,160 --> 00:02:36,079
collection which is uh mainly a one

67
00:02:34,959 --> 00:02:38,000
month project but

68
00:02:36,080 --> 00:02:40,640
i'm always eager to collaborate with

69
00:02:38,000 --> 00:02:44,080
other people

70
00:02:40,640 --> 00:02:47,359
so versioning uh before

71
00:02:44,080 --> 00:02:50,160
summer this year uh this was only

72
00:02:47,360 --> 00:02:53,519
working for greno radio 3.7

73
00:02:50,160 --> 00:02:58,560
and it had just a master branch

74
00:02:53,519 --> 00:03:02,000
releasing versions 1.1 1.2 etc

75
00:02:58,560 --> 00:03:05,040
and since october i switched to

76
00:03:02,000 --> 00:03:08,800
gnu radio 3.8 and

77
00:03:05,040 --> 00:03:10,799
most of the packet decoding is done in

78
00:03:08,800 --> 00:03:14,319
python so that was

79
00:03:10,800 --> 00:03:15,760
a large but good change from python 2 to

80
00:03:14,319 --> 00:03:18,799
python 3.

81
00:03:15,760 --> 00:03:22,159
and now i have the main

82
00:03:18,800 --> 00:03:24,080
3.8 branch and i'm releasing versions

83
00:03:22,159 --> 00:03:27,200
2.1 2.2

84
00:03:24,080 --> 00:03:30,480
uh it's 2.2 now on the branch

85
00:03:27,200 --> 00:03:32,959
and i've kind of dropped development on

86
00:03:30,480 --> 00:03:35,200
the gnu radio 3.7 version

87
00:03:32,959 --> 00:03:36,480
so that is stuck in the past with the

88
00:03:35,200 --> 00:03:39,760
satellites that were

89
00:03:36,480 --> 00:03:42,560
supported before october if

90
00:03:39,760 --> 00:03:43,760
anyone really wants a satellite which

91
00:03:42,560 --> 00:03:47,440
has appeared

92
00:03:43,760 --> 00:03:47,920
only for 3.8 i might go and backported

93
00:03:47,440 --> 00:03:51,519
it

94
00:03:47,920 --> 00:03:54,879
to 3.7 but this talk is about

95
00:03:51,519 --> 00:03:55,680
a large refactor i'm kind of doing right

96
00:03:54,879 --> 00:03:58,159
now

97
00:03:55,680 --> 00:03:59,680
to all the code base of gr satellites

98
00:03:58,159 --> 00:04:02,079
this is in the next branch

99
00:03:59,680 --> 00:04:03,319
and when it's ready it will be released

100
00:04:02,080 --> 00:04:06,319
as version

101
00:04:03,319 --> 00:04:06,319
3.0.0

102
00:04:06,560 --> 00:04:10,720
so let's talk about how geosatellite

103
00:04:09,280 --> 00:04:13,680
looks like inside

104
00:04:10,720 --> 00:04:14,080
to motivate the need for this refactor

105
00:04:13,680 --> 00:04:16,320
so

106
00:04:14,080 --> 00:04:17,519
each different satellite has its own

107
00:04:16,320 --> 00:04:19,440
flow graph

108
00:04:17,519 --> 00:04:21,680
we're talking more than 80 different

109
00:04:19,440 --> 00:04:23,520
satellites so that's a huge amount of

110
00:04:21,680 --> 00:04:25,680
flow graphs

111
00:04:23,520 --> 00:04:26,719
basic information is written in the

112
00:04:25,680 --> 00:04:29,280
readme about

113
00:04:26,720 --> 00:04:30,160
each of the satellites or flow graphs

114
00:04:29,280 --> 00:04:33,520
such as the

115
00:04:30,160 --> 00:04:34,880
kind of protocols photo correction crc

116
00:04:33,520 --> 00:04:38,080
code it uses

117
00:04:34,880 --> 00:04:41,520
so the read my file is quite useful but

118
00:04:38,080 --> 00:04:42,320
very very long and the flow graph

119
00:04:41,520 --> 00:04:45,840
contains

120
00:04:42,320 --> 00:04:49,840
uh all the things you need to

121
00:04:45,840 --> 00:04:53,758
turn iq data into useful data

122
00:04:49,840 --> 00:04:56,320
so you have um blocks to demodulate the

123
00:04:53,759 --> 00:04:58,800
data to run photo correction to

124
00:04:56,320 --> 00:05:01,440
pass the telemetry into useful values

125
00:04:58,800 --> 00:05:02,960
also image decoder for satellites which

126
00:05:01,440 --> 00:05:07,440
transmit jpeg data into

127
00:05:02,960 --> 00:05:09,599
small chunks there's no gui

128
00:05:07,440 --> 00:05:10,719
the flow grass has some configuration

129
00:05:09,600 --> 00:05:14,479
parameters

130
00:05:10,720 --> 00:05:15,759
so the idea is you should run this as a

131
00:05:14,479 --> 00:05:18,159
dot pi script

132
00:05:15,759 --> 00:05:19,199
generated from grc from the terminal so

133
00:05:18,160 --> 00:05:22,720
you can just say

134
00:05:19,199 --> 00:05:25,759
dash dash whatever parameter

135
00:05:22,720 --> 00:05:26,720
and uh the input they get is

136
00:05:25,759 --> 00:05:29,919
standardized

137
00:05:26,720 --> 00:05:33,759
uh to getting udp input

138
00:05:29,919 --> 00:05:36,560
so samples uh streamed in in royalty

139
00:05:33,759 --> 00:05:37,600
in real time using the udp protocol and

140
00:05:36,560 --> 00:05:40,800
these are real

141
00:05:37,600 --> 00:05:42,320
not iq uh this was chosen because it's

142
00:05:40,800 --> 00:05:45,759
the protocol used by

143
00:05:42,320 --> 00:05:47,520
gqrx uh to stream data out

144
00:05:45,759 --> 00:05:49,440
so you can interface your satellites

145
00:05:47,520 --> 00:05:52,479
easily with gqrx

146
00:05:49,440 --> 00:05:54,400
also if you have a worth recording taken

147
00:05:52,479 --> 00:05:55,440
from a conventional radio or something

148
00:05:54,400 --> 00:05:58,799
like that

149
00:05:55,440 --> 00:05:59,600
or just from satnox it's not so much

150
00:05:58,800 --> 00:06:03,600
different

151
00:05:59,600 --> 00:06:04,960
from this so interface into very

152
00:06:03,600 --> 00:06:07,039
different formats is

153
00:06:04,960 --> 00:06:09,440
always difficult you need to handle

154
00:06:07,039 --> 00:06:12,639
different sample rates and so on

155
00:06:09,440 --> 00:06:14,960
and from the point of view of

156
00:06:12,639 --> 00:06:16,319
output you get everything printed out to

157
00:06:14,960 --> 00:06:19,599
the terminal

158
00:06:16,319 --> 00:06:22,400
or passed on to other applications via

159
00:06:19,600 --> 00:06:26,720
sockets of files

160
00:06:22,400 --> 00:06:30,159
so an example flow graph we can see here

161
00:06:26,720 --> 00:06:33,199
here i have my pointer we have the

162
00:06:30,160 --> 00:06:36,560
udp input and then

163
00:06:33,199 --> 00:06:39,840
uh some of you may recognize here on

164
00:06:36,560 --> 00:06:44,000
a fsk demodulator so

165
00:06:39,840 --> 00:06:47,400
audio frequency gmsk actually

166
00:06:44,000 --> 00:06:48,560
uh this is running with a gumspace u for

167
00:06:47,400 --> 00:06:52,000
u482c

168
00:06:48,560 --> 00:06:55,599
radio so here we would perform

169
00:06:52,000 --> 00:06:58,800
the packet boundary detection to turn

170
00:06:55,599 --> 00:07:00,159
different packets into pdus then fact

171
00:06:58,800 --> 00:07:03,520
decoding

172
00:07:00,160 --> 00:07:05,919
and here we end up with uh the useful

173
00:07:03,520 --> 00:07:08,400
packets transmitted by the satellite

174
00:07:05,919 --> 00:07:09,840
so then it depends on your intended

175
00:07:08,400 --> 00:07:12,960
application for that we can

176
00:07:09,840 --> 00:07:14,400
uh submit uh the packets to sat nox

177
00:07:12,960 --> 00:07:17,520
database

178
00:07:14,400 --> 00:07:19,120
with this telemetry forward block and we

179
00:07:17,520 --> 00:07:22,560
also have

180
00:07:19,120 --> 00:07:25,599
a telemetry parser to print out uh

181
00:07:22,560 --> 00:07:28,560
human readable values uh but you could

182
00:07:25,599 --> 00:07:28,960
do something like uh store into a file

183
00:07:28,560 --> 00:07:33,120
or

184
00:07:28,960 --> 00:07:35,599
whatever so problems with this

185
00:07:33,120 --> 00:07:37,599
kind of approach there's lots of

186
00:07:35,599 --> 00:07:40,240
repetition as you can imagine

187
00:07:37,599 --> 00:07:41,919
there's an fsk demodulator in many of

188
00:07:40,240 --> 00:07:44,000
the different flow graphs

189
00:07:41,919 --> 00:07:46,639
so this is really difficult to maintain

190
00:07:44,000 --> 00:07:49,520
if i want to change a single parameter

191
00:07:46,639 --> 00:07:50,240
for fsk demodulation or the kind of

192
00:07:49,520 --> 00:07:53,758
algorithm

193
00:07:50,240 --> 00:07:56,639
i use i would have to go into maybe

194
00:07:53,759 --> 00:07:58,560
50 different flow graphs updating the

195
00:07:56,639 --> 00:08:01,680
very same thing in all of them

196
00:07:58,560 --> 00:08:04,080
so that was uh natural fine when there

197
00:08:01,680 --> 00:08:07,120
were very few flowgraphs on satellites

198
00:08:04,080 --> 00:08:08,080
but uh it has grown a lot so this

199
00:08:07,120 --> 00:08:10,960
doesn't make a

200
00:08:08,080 --> 00:08:12,000
sense any longer at the same time it's

201
00:08:10,960 --> 00:08:15,280
very flexible

202
00:08:12,000 --> 00:08:19,039
and not very flexible so the user can go

203
00:08:15,280 --> 00:08:21,919
and change anything he wants let's say

204
00:08:19,039 --> 00:08:23,039
as an example before you want to write

205
00:08:21,919 --> 00:08:26,159
the

206
00:08:23,039 --> 00:08:26,560
packets into a file or process them with

207
00:08:26,160 --> 00:08:29,360
your

208
00:08:26,560 --> 00:08:32,399
custom whatever or send them out to an

209
00:08:29,360 --> 00:08:35,440
application using zmq you can do that

210
00:08:32,399 --> 00:08:37,120
but uh doing that is cumbersome and if

211
00:08:35,440 --> 00:08:38,640
you want to do that for all the flow

212
00:08:37,120 --> 00:08:42,320
graphs it's

213
00:08:38,640 --> 00:08:44,319
more or less impossible and also

214
00:08:42,320 --> 00:08:45,360
uh for adding support to new satellites

215
00:08:44,320 --> 00:08:48,080
which is something

216
00:08:45,360 --> 00:08:49,519
i do quite often as they keep launching

217
00:08:48,080 --> 00:08:53,040
more and more stuff

218
00:08:49,519 --> 00:08:55,600
uh it's also cumbersome so you copy

219
00:08:53,040 --> 00:08:56,560
us a flowgraph for a sort of similar

220
00:08:55,600 --> 00:08:59,600
satellite

221
00:08:56,560 --> 00:09:02,800
and then modify the things you

222
00:08:59,600 --> 00:09:03,760
need to change so the main idea for the

223
00:09:02,800 --> 00:09:06,839
refactor

224
00:09:03,760 --> 00:09:08,160
would be to eliminate all these

225
00:09:06,839 --> 00:09:11,200
redundancy

226
00:09:08,160 --> 00:09:13,760
and the motivation is

227
00:09:11,200 --> 00:09:14,560
well let's see if we can come up with a

228
00:09:13,760 --> 00:09:16,880
way

229
00:09:14,560 --> 00:09:18,560
to describe what the things the

230
00:09:16,880 --> 00:09:21,600
satellite is transmitting like

231
00:09:18,560 --> 00:09:23,839
have a simple text file with these

232
00:09:21,600 --> 00:09:24,560
satellites is doing this protocol with

233
00:09:23,839 --> 00:09:27,920
this

234
00:09:24,560 --> 00:09:30,880
error correction and this sort of things

235
00:09:27,920 --> 00:09:31,599
and then we should have code to read

236
00:09:30,880 --> 00:09:34,160
that

237
00:09:31,600 --> 00:09:35,040
text description and automatically

238
00:09:34,160 --> 00:09:37,279
figure out

239
00:09:35,040 --> 00:09:38,560
how to put together the decoder flow

240
00:09:37,279 --> 00:09:41,600
graph

241
00:09:38,560 --> 00:09:44,479
and i had i identified three different

242
00:09:41,600 --> 00:09:45,519
use cases for this kind of refactor

243
00:09:44,480 --> 00:09:47,839
decoder

244
00:09:45,519 --> 00:09:49,120
one is a standalone decoder like a

245
00:09:47,839 --> 00:09:51,440
command line tool

246
00:09:49,120 --> 00:09:52,320
where you say hey this is an iq

247
00:09:51,440 --> 00:09:54,560
recording

248
00:09:52,320 --> 00:09:57,200
for this satellite just decode the data

249
00:09:54,560 --> 00:10:00,479
for me and maybe print it on screen or

250
00:09:57,200 --> 00:10:02,000
put it to a file or whatever and so the

251
00:10:00,480 --> 00:10:04,399
command line tool should have

252
00:10:02,000 --> 00:10:05,200
enough command line options to be

253
00:10:04,399 --> 00:10:07,120
flexible

254
00:10:05,200 --> 00:10:09,760
it should support different kind of

255
00:10:07,120 --> 00:10:12,399
inputs and outputs

256
00:10:09,760 --> 00:10:13,920
also an important use case is us

257
00:10:12,399 --> 00:10:17,040
building blocks for

258
00:10:13,920 --> 00:10:17,599
other custom gun radio decoders maybe

259
00:10:17,040 --> 00:10:19,920
people

260
00:10:17,600 --> 00:10:22,240
building their own ground station

261
00:10:19,920 --> 00:10:24,800
solution for the satellite

262
00:10:22,240 --> 00:10:25,360
that's something that essa did recently

263
00:10:24,800 --> 00:10:28,640
for the

264
00:10:25,360 --> 00:10:30,880
offset satellite uh

265
00:10:28,640 --> 00:10:32,000
so i recognize that uh there are users

266
00:10:30,880 --> 00:10:34,720
who want to go

267
00:10:32,000 --> 00:10:35,920
a more advanced customization than just

268
00:10:34,720 --> 00:10:37,839
using the

269
00:10:35,920 --> 00:10:39,360
command line tool with everything built

270
00:10:37,839 --> 00:10:43,040
in

271
00:10:39,360 --> 00:10:46,720
and also some other cool thing which

272
00:10:43,040 --> 00:10:48,880
i haven't gone at yet is a plugin

273
00:10:46,720 --> 00:10:50,240
so this is uh reused parts of

274
00:10:48,880 --> 00:10:53,120
geosatellite but

275
00:10:50,240 --> 00:10:53,680
not as i used to build something else

276
00:10:53,120 --> 00:10:56,399
but

277
00:10:53,680 --> 00:10:56,800
from the point of view of an application

278
00:10:56,399 --> 00:10:59,200
so

279
00:10:56,800 --> 00:11:00,079
i'm especially interested in hooking

280
00:10:59,200 --> 00:11:03,519
this to

281
00:11:00,079 --> 00:11:06,000
satnox network from the server side

282
00:11:03,519 --> 00:11:08,399
decoding point of view so ground

283
00:11:06,000 --> 00:11:11,440
stations everywhere in the world submit

284
00:11:08,399 --> 00:11:14,000
the data to sadnox and

285
00:11:11,440 --> 00:11:16,160
currently the decoding is done by the

286
00:11:14,000 --> 00:11:19,279
distributed ground stations

287
00:11:16,160 --> 00:11:21,600
so this has the problem that whenever a

288
00:11:19,279 --> 00:11:23,760
new satellite is launched if it uses

289
00:11:21,600 --> 00:11:24,959
really different protocols they need to

290
00:11:23,760 --> 00:11:27,040
push the

291
00:11:24,959 --> 00:11:28,560
updated software to all the ground

292
00:11:27,040 --> 00:11:30,959
stations

293
00:11:28,560 --> 00:11:31,920
and this is a coast tool and it takes

294
00:11:30,959 --> 00:11:35,119
time

295
00:11:31,920 --> 00:11:37,920
so sitenox people are also interested in

296
00:11:35,120 --> 00:11:39,920
hey can we do server side decoding so i

297
00:11:37,920 --> 00:11:42,479
think your satellite would be

298
00:11:39,920 --> 00:11:43,279
would integrate really well with that

299
00:11:42,480 --> 00:11:46,560
but also

300
00:11:43,279 --> 00:11:49,920
a plug-in for dqrx or any other

301
00:11:46,560 --> 00:11:52,959
sdr gui app would be really

302
00:11:49,920 --> 00:11:54,719
great to have like a pop-up menu

303
00:11:52,959 --> 00:11:58,800
this signal i'm tuned to is this

304
00:11:54,720 --> 00:11:58,800
satellite do something with the data

305
00:11:59,120 --> 00:12:02,720
so key elements there are two key

306
00:12:01,760 --> 00:12:05,839
elements for the

307
00:12:02,720 --> 00:12:09,040
refactor one is uh what i call

308
00:12:05,839 --> 00:12:10,079
sat yaml files and these are yaml files

309
00:12:09,040 --> 00:12:13,199
describing the

310
00:12:10,079 --> 00:12:16,239
satellite basic information on the

311
00:12:13,200 --> 00:12:19,760
satellite name norad id so on and

312
00:12:16,240 --> 00:12:23,600
the protocols and transmitters why amlo

313
00:12:19,760 --> 00:12:24,800
it's just because uh since gun radio 3.8

314
00:12:23,600 --> 00:12:27,839
is doing yaml

315
00:12:24,800 --> 00:12:30,639
for grc floor graphs and blocks

316
00:12:27,839 --> 00:12:31,760
i figured out it wouldn't be such a bad

317
00:12:30,639 --> 00:12:36,240
choice to

318
00:12:31,760 --> 00:12:38,639
keep doing yaml also for year satellites

319
00:12:36,240 --> 00:12:40,160
so this is one part the other one is

320
00:12:38,639 --> 00:12:42,880
components

321
00:12:40,160 --> 00:12:43,199
uh the idea of components is to break up

322
00:12:42,880 --> 00:12:46,720
the

323
00:12:43,200 --> 00:12:50,079
decoding chain into logical

324
00:12:46,720 --> 00:12:53,360
higher level functions

325
00:12:50,079 --> 00:12:54,239
uh we'll see that in a moment so the

326
00:12:53,360 --> 00:12:57,839
idea is

327
00:12:54,240 --> 00:13:01,040
you have your very simple blocks

328
00:12:57,839 --> 00:13:02,399
you put them together into high level

329
00:13:01,040 --> 00:13:05,760
components

330
00:13:02,399 --> 00:13:06,000
and then the way to write a satiaml file

331
00:13:05,760 --> 00:13:08,720
is

332
00:13:06,000 --> 00:13:09,680
to specify what components you need to

333
00:13:08,720 --> 00:13:12,720
put together

334
00:13:09,680 --> 00:13:15,760
to decode the satellite

335
00:13:12,720 --> 00:13:18,160
so that's what the standalone decoder do

336
00:13:15,760 --> 00:13:20,639
it reads the 3ml file for satellite in

337
00:13:18,160 --> 00:13:22,719
question figures out what components it

338
00:13:20,639 --> 00:13:25,519
needs to connect together

339
00:13:22,720 --> 00:13:27,040
and runs the flow graph but it's also

340
00:13:25,519 --> 00:13:29,440
possible for the user

341
00:13:27,040 --> 00:13:30,240
to go on you know radio companion and

342
00:13:29,440 --> 00:13:33,519
use

343
00:13:30,240 --> 00:13:34,079
either high level components or lower

344
00:13:33,519 --> 00:13:36,639
level

345
00:13:34,079 --> 00:13:38,079
blocks from your satellites to create

346
00:13:36,639 --> 00:13:42,079
any kind of

347
00:13:38,079 --> 00:13:45,920
custom flow graph so

348
00:13:42,079 --> 00:13:49,199
components are speaking from the iq data

349
00:13:45,920 --> 00:13:51,839
onto the final packet

350
00:13:49,199 --> 00:13:52,560
you can break the chain logically into

351
00:13:51,839 --> 00:13:55,199
these

352
00:13:52,560 --> 00:13:56,479
four main tasks the first one is the

353
00:13:55,199 --> 00:13:59,439
modulators

354
00:13:56,480 --> 00:14:01,360
these convert the rf samples into

355
00:13:59,440 --> 00:14:04,560
symbols

356
00:14:01,360 --> 00:14:06,959
then decoders look at the symbol stream

357
00:14:04,560 --> 00:14:07,839
detect the boundaries of the packets

358
00:14:06,959 --> 00:14:10,959
perform

359
00:14:07,839 --> 00:14:15,040
photo correction crc checking

360
00:14:10,959 --> 00:14:15,439
etc so roughly this would correspond to

361
00:14:15,040 --> 00:14:18,480
the

362
00:14:15,440 --> 00:14:21,199
physical layer of the system

363
00:14:18,480 --> 00:14:23,680
when we get of the upper layers if we

364
00:14:21,199 --> 00:14:27,199
think of this as a network stack

365
00:14:23,680 --> 00:14:30,479
it's kind of messy because you have

366
00:14:27,199 --> 00:14:35,120
ccsds standard protocols but many

367
00:14:30,480 --> 00:14:37,839
small satellites do adopt protocols

368
00:14:35,120 --> 00:14:39,199
so you don't really have like a good

369
00:14:37,839 --> 00:14:43,040
separation between

370
00:14:39,199 --> 00:14:45,359
different uh network layers so

371
00:14:43,040 --> 00:14:47,839
this kind of upper layer thing is hunted

372
00:14:45,360 --> 00:14:50,880
by what we call transports

373
00:14:47,839 --> 00:14:51,680
so whenever you want to convert from

374
00:14:50,880 --> 00:14:54,160
your physical

375
00:14:51,680 --> 00:14:55,239
frames into something else maybe you

376
00:14:54,160 --> 00:14:58,160
want to perform

377
00:14:55,240 --> 00:15:00,959
defragmentation or things like that

378
00:14:58,160 --> 00:15:02,800
or look at extra headers that would be

379
00:15:00,959 --> 00:15:06,079
implemented in a transport

380
00:15:02,800 --> 00:15:08,240
and finally data syncs are the blocks

381
00:15:06,079 --> 00:15:10,239
which do something useful with the data

382
00:15:08,240 --> 00:15:13,440
be to print it on screen

383
00:15:10,240 --> 00:15:16,639
with telemetry values to submit it to

384
00:15:13,440 --> 00:15:21,920
some online server to store it file

385
00:15:16,639 --> 00:15:25,519
to parse a jpeg file whatever

386
00:15:21,920 --> 00:15:28,399
so if we look at the example before and

387
00:15:25,519 --> 00:15:28,959
we identify the functionality all the

388
00:15:28,399 --> 00:15:31,600
part in

389
00:15:28,959 --> 00:15:33,680
red would be the demodulator in this

390
00:15:31,600 --> 00:15:36,320
case for afsk

391
00:15:33,680 --> 00:15:37,199
then these two blocks would implement at

392
00:15:36,320 --> 00:15:40,079
the framer

393
00:15:37,199 --> 00:15:42,639
for this particular gum space radio and

394
00:15:40,079 --> 00:15:46,719
then we have a few data things

395
00:15:42,639 --> 00:15:46,720
which do the useful stuff

396
00:15:47,360 --> 00:15:54,079
so if we replace all the low-level

397
00:15:51,040 --> 00:15:56,880
blocks in the example before with uh

398
00:15:54,079 --> 00:15:59,199
components we end up with uh something

399
00:15:56,880 --> 00:16:02,320
much more simple

400
00:15:59,199 --> 00:16:03,199
that it's easier to understand for many

401
00:16:02,320 --> 00:16:06,839
users and

402
00:16:03,199 --> 00:16:08,319
easy to reuse so we have this afsk

403
00:16:06,839 --> 00:16:11,680
demodulator

404
00:16:08,320 --> 00:16:15,240
just uh turn any fsk signal into

405
00:16:11,680 --> 00:16:18,239
soft simples uh this gum space

406
00:16:15,240 --> 00:16:21,360
ua2c d framer whenever

407
00:16:18,240 --> 00:16:25,360
i have these custom protocol

408
00:16:21,360 --> 00:16:28,800
transmitted by these comspers radio just

409
00:16:25,360 --> 00:16:32,160
detect packets run photo correction and

410
00:16:28,800 --> 00:16:34,560
speed out the frames as pdus

411
00:16:32,160 --> 00:16:35,680
and then the useful things we want to do

412
00:16:34,560 --> 00:16:39,040
with the data

413
00:16:35,680 --> 00:16:40,880
so any user who wants to work with this

414
00:16:39,040 --> 00:16:43,120
kind of gum space radio he

415
00:16:40,880 --> 00:16:44,000
doesn't really need to know about photo

416
00:16:43,120 --> 00:16:46,800
correction or

417
00:16:44,000 --> 00:16:47,600
anything like that he just needs to know

418
00:16:46,800 --> 00:16:50,560
well it's this

419
00:16:47,600 --> 00:16:52,720
radio and it's transmit afsk so you just

420
00:16:50,560 --> 00:16:55,439
put together these two blocks

421
00:16:52,720 --> 00:16:55,440
and you're done

422
00:16:57,360 --> 00:17:04,880
so let's look at satiamo the

423
00:17:00,959 --> 00:17:08,399
example here is actually the satia ml

424
00:17:04,880 --> 00:17:11,439
file for the satellite i'm using as

425
00:17:08,400 --> 00:17:14,559
example in this talk

426
00:17:11,439 --> 00:17:16,720
the idea is uh to describe the protocols

427
00:17:14,559 --> 00:17:20,000
that the satellite is using

428
00:17:16,720 --> 00:17:23,039
in a component-centric way and

429
00:17:20,000 --> 00:17:27,119
uh what i found is that uh

430
00:17:23,039 --> 00:17:30,320
many of the protocols are very adult

431
00:17:27,119 --> 00:17:30,639
so it doesn't make a lot of sense to try

432
00:17:30,320 --> 00:17:33,360
to

433
00:17:30,640 --> 00:17:35,039
change to chase like all these specific

434
00:17:33,360 --> 00:17:38,320
parameters of course

435
00:17:35,039 --> 00:17:41,520
we could describe this kind of gum

436
00:17:38,320 --> 00:17:45,678
space addock framing

437
00:17:41,520 --> 00:17:46,720
by things like it uses a rich solomon

438
00:17:45,679 --> 00:17:50,080
ccsds

439
00:17:46,720 --> 00:17:52,720
code and this kind of scrambler and

440
00:17:50,080 --> 00:17:55,039
the header looks like these with some

441
00:17:52,720 --> 00:17:58,080
goliath error correction

442
00:17:55,039 --> 00:18:01,760
but it

443
00:17:58,080 --> 00:18:04,639
tends to become really messy so

444
00:18:01,760 --> 00:18:06,000
whenever i see something which looks

445
00:18:04,640 --> 00:18:09,039
kind of a talk

446
00:18:06,000 --> 00:18:12,400
i just uh call it by name

447
00:18:09,039 --> 00:18:15,200
rather than trying to parameterize it so

448
00:18:12,400 --> 00:18:15,919
in here uh the framing we specify is

449
00:18:15,200 --> 00:18:21,440
just

450
00:18:15,919 --> 00:18:24,320
u8 uh sorry u482c

451
00:18:21,440 --> 00:18:25,200
and uh that's the approach so if we look

452
00:18:24,320 --> 00:18:27,918
at here we have

453
00:18:25,200 --> 00:18:28,799
basic information like the main name of

454
00:18:27,919 --> 00:18:32,720
the satellite

455
00:18:28,799 --> 00:18:35,840
alternative names and you can call the

456
00:18:32,720 --> 00:18:36,960
decoder by using any of these names the

457
00:18:35,840 --> 00:18:40,159
norad id

458
00:18:36,960 --> 00:18:42,880
this is used to transmit the

459
00:18:40,160 --> 00:18:44,400
telemetry to subnox database also you

460
00:18:42,880 --> 00:18:47,200
can call up the

461
00:18:44,400 --> 00:18:48,160
decoder using norwrite id so this is

462
00:18:47,200 --> 00:18:51,919
helpful to

463
00:18:48,160 --> 00:18:52,640
automate things uh then for the data the

464
00:18:51,919 --> 00:18:55,600
transmit

465
00:18:52,640 --> 00:18:56,720
the satellite transmits here use we say

466
00:18:55,600 --> 00:18:59,678
we have a

467
00:18:56,720 --> 00:19:01,600
telemetry parser for the data and the

468
00:18:59,679 --> 00:19:02,960
name of the telemetry parser this is

469
00:19:01,600 --> 00:19:06,320
actually a python

470
00:19:02,960 --> 00:19:08,480
uh class is a 03

471
00:19:06,320 --> 00:19:10,799
and here we describe the transmitter

472
00:19:08,480 --> 00:19:14,000
with parameters related to

473
00:19:10,799 --> 00:19:18,240
afsk and for the framing we just say

474
00:19:14,000 --> 00:19:18,240
it's the custom gum space radio thing

475
00:19:18,720 --> 00:19:22,960
so this is the list of modulation some

476
00:19:21,600 --> 00:19:25,520
framing supported

477
00:19:22,960 --> 00:19:27,200
modulations is something very basic for

478
00:19:25,520 --> 00:19:29,840
sk bpsk and

479
00:19:27,200 --> 00:19:30,559
variations of that but in the framings

480
00:19:29,840 --> 00:19:34,039
you can see

481
00:19:30,559 --> 00:19:38,960
um some really standard things like

482
00:19:34,039 --> 00:19:41,039
ax.25 and some ccsds protocols

483
00:19:38,960 --> 00:19:42,320
but also some specific names of the

484
00:19:41,039 --> 00:19:46,160
satellites because

485
00:19:42,320 --> 00:19:48,960
they're using other protocols

486
00:19:46,160 --> 00:19:50,640
uh you can also use uh satyamerlin guna

487
00:19:48,960 --> 00:19:52,559
radio companion

488
00:19:50,640 --> 00:19:54,240
so the way to do that is you have this

489
00:19:52,559 --> 00:19:57,120
satellite decoder block

490
00:19:54,240 --> 00:19:58,320
and the satellite decoder block does

491
00:19:57,120 --> 00:20:01,918
most of the work

492
00:19:58,320 --> 00:20:06,240
that the command line tool does

493
00:20:01,919 --> 00:20:07,200
so it gets iq samples on one end and on

494
00:20:06,240 --> 00:20:10,400
the other end

495
00:20:07,200 --> 00:20:12,480
it spits out uh frames

496
00:20:10,400 --> 00:20:13,520
so you're free to do whatever you want

497
00:20:12,480 --> 00:20:15,520
with the frames

498
00:20:13,520 --> 00:20:17,440
but uh you don't need to know anything

499
00:20:15,520 --> 00:20:20,480
about the satellite you just

500
00:20:17,440 --> 00:20:24,400
write the name or put here the path of

501
00:20:20,480 --> 00:20:28,799
our tml file and this block figures out

502
00:20:24,400 --> 00:20:30,960
how to put together the decoder

503
00:20:28,799 --> 00:20:32,559
the standalone command line decoder

504
00:20:30,960 --> 00:20:35,039
looks like this

505
00:20:32,559 --> 00:20:36,720
so you need to run it like to your

506
00:20:35,039 --> 00:20:37,600
satellites and then the name of the

507
00:20:36,720 --> 00:20:40,960
satellite

508
00:20:37,600 --> 00:20:43,600
because the amount and type of

509
00:20:40,960 --> 00:20:45,200
command line parameters you get depends

510
00:20:43,600 --> 00:20:48,000
on

511
00:20:45,200 --> 00:20:49,360
what sort of functionality needed to

512
00:20:48,000 --> 00:20:51,760
decode the satellite

513
00:20:49,360 --> 00:20:52,719
so for example for this particular

514
00:20:51,760 --> 00:20:55,360
satellite

515
00:20:52,720 --> 00:20:56,159
we have four telecorrection decoding so

516
00:20:55,360 --> 00:20:59,199
there's a

517
00:20:56,159 --> 00:21:02,640
reverse photo correction option

518
00:20:59,200 --> 00:21:06,159
but there's no crc so there's no

519
00:21:02,640 --> 00:21:06,799
verbal crc option so the way this works

520
00:21:06,159 --> 00:21:10,080
is

521
00:21:06,799 --> 00:21:14,158
when you run gear satellites au

522
00:21:10,080 --> 00:21:16,399
03 it looks at the satiem file

523
00:21:14,159 --> 00:21:18,720
it figures out what kind of component

524
00:21:16,400 --> 00:21:20,960
blocks it needs to put together

525
00:21:18,720 --> 00:21:22,640
to decode this particular satellite and

526
00:21:20,960 --> 00:21:25,520
then it asks

527
00:21:22,640 --> 00:21:27,280
every of those component blocks what

528
00:21:25,520 --> 00:21:30,000
kind of command line options would you

529
00:21:27,280 --> 00:21:33,600
like to put into the

530
00:21:30,000 --> 00:21:33,600
whole command line set

531
00:21:35,120 --> 00:21:38,719
telemetry passes this is something which

532
00:21:37,360 --> 00:21:40,719
was

533
00:21:38,720 --> 00:21:42,159
more or less present in previous

534
00:21:40,720 --> 00:21:45,280
versions in the same

535
00:21:42,159 --> 00:21:46,000
manner but i'm relying on to it uh so

536
00:21:45,280 --> 00:21:48,799
much uh

537
00:21:46,000 --> 00:21:50,480
for this refactor so it's done using a

538
00:21:48,799 --> 00:21:53,840
python library called cons

539
00:21:50,480 --> 00:21:57,120
construct which allows you to

540
00:21:53,840 --> 00:22:00,158
define how your data structures look

541
00:21:57,120 --> 00:22:00,799
like like the first field is 8 bits wide

542
00:22:00,159 --> 00:22:04,720
and

543
00:22:00,799 --> 00:22:08,080
it's called whatever voltage

544
00:22:04,720 --> 00:22:11,600
and from this definition you get a

545
00:22:08,080 --> 00:22:14,720
parser and an encoder for free so

546
00:22:11,600 --> 00:22:18,320
we use the parsers not the encoders but

547
00:22:14,720 --> 00:22:19,120
if anyone wants to build a satellite

548
00:22:18,320 --> 00:22:22,240
transmitter

549
00:22:19,120 --> 00:22:24,719
he could use the encoders

550
00:22:22,240 --> 00:22:25,760
so new telemetry definitions can be

551
00:22:24,720 --> 00:22:29,840
written by

552
00:22:25,760 --> 00:22:32,400
writing this construct structure class

553
00:22:29,840 --> 00:22:33,199
and then this telemetry definition can

554
00:22:32,400 --> 00:22:36,240
be

555
00:22:33,200 --> 00:22:39,280
specified inside yaml files and can

556
00:22:36,240 --> 00:22:42,240
also be used with a telemetry pass block

557
00:22:39,280 --> 00:22:43,280
which just takes your construct

558
00:22:42,240 --> 00:22:47,039
structure

559
00:22:43,280 --> 00:22:49,200
and parses according to that and

560
00:22:47,039 --> 00:22:50,640
currently there are 20 different

561
00:22:49,200 --> 00:22:52,400
telemetry definitions

562
00:22:50,640 --> 00:22:54,480
there are many satellites without a

563
00:22:52,400 --> 00:22:57,520
parser the

564
00:22:54,480 --> 00:22:58,480
format the satellite uses for many of

565
00:22:57,520 --> 00:23:02,000
them it's

566
00:22:58,480 --> 00:23:02,880
publicly available so just because lack

567
00:23:02,000 --> 00:23:05,840
of time i'm not

568
00:23:02,880 --> 00:23:09,039
adding more but if you want to help that

569
00:23:05,840 --> 00:23:11,918
is something you can help with

570
00:23:09,039 --> 00:23:12,640
and something that the refactor also

571
00:23:11,919 --> 00:23:16,000
brings

572
00:23:12,640 --> 00:23:18,559
is a new uh file slash

573
00:23:16,000 --> 00:23:19,360
image receiver so there are several

574
00:23:18,559 --> 00:23:23,840
satellites

575
00:23:19,360 --> 00:23:27,678
which transmit uh file or image data

576
00:23:23,840 --> 00:23:30,240
broken up in small chunks and

577
00:23:27,679 --> 00:23:32,320
the way each of the satellites does it

578
00:23:30,240 --> 00:23:36,400
is

579
00:23:32,320 --> 00:23:39,039
quite a bit different some

580
00:23:36,400 --> 00:23:41,279
attack the sample some tag the chunks

581
00:23:39,039 --> 00:23:43,760
which uh with a chunk number so

582
00:23:41,279 --> 00:23:45,520
you get things like chunk zero chunk one

583
00:23:43,760 --> 00:23:48,720
chunk two

584
00:23:45,520 --> 00:23:51,039
some don't and uh assume that

585
00:23:48,720 --> 00:23:52,080
you are not going to miss any chunks and

586
00:23:51,039 --> 00:23:55,120
if you miss one

587
00:23:52,080 --> 00:23:57,520
chunk you're screwed some

588
00:23:55,120 --> 00:23:58,239
don't tag the chunks but rather say this

589
00:23:57,520 --> 00:24:00,960
chunk

590
00:23:58,240 --> 00:24:02,240
starts at offset 1000 bytes within the

591
00:24:00,960 --> 00:24:05,039
file

592
00:24:02,240 --> 00:24:06,720
so the idea of these uh file image

593
00:24:05,039 --> 00:24:10,000
receiver is to have a

594
00:24:06,720 --> 00:24:12,880
general python class that can deal

595
00:24:10,000 --> 00:24:13,760
in a generic way of with these ways of

596
00:24:12,880 --> 00:24:17,200
transmitting

597
00:24:13,760 --> 00:24:20,240
data by chunks and

598
00:24:17,200 --> 00:24:23,600
to use a specific protocol you should uh

599
00:24:20,240 --> 00:24:26,960
derive from that class and implement the

600
00:24:23,600 --> 00:24:27,840
specific things but uh for most of the

601
00:24:26,960 --> 00:24:31,039
protocols

602
00:24:27,840 --> 00:24:34,720
uh the main functionality is already

603
00:24:31,039 --> 00:24:36,799
inside the general python class

604
00:24:34,720 --> 00:24:39,200
so the things you need to specify when

605
00:24:36,799 --> 00:24:42,879
deriving the class are very very little

606
00:24:39,200 --> 00:24:45,919
and in a few situations it's enough

607
00:24:42,880 --> 00:24:47,120
to build a construct structure where you

608
00:24:45,919 --> 00:24:50,000
just say

609
00:24:47,120 --> 00:24:50,719
this field of the chunk is the chunk

610
00:24:50,000 --> 00:24:53,120
number

611
00:24:50,720 --> 00:24:55,600
this is the useful data this is file

612
00:24:53,120 --> 00:24:57,840
name for example

613
00:24:55,600 --> 00:25:00,080
so currently there's support for all

614
00:24:57,840 --> 00:25:04,080
these satellites

615
00:25:00,080 --> 00:25:07,360
and roadmap most of the things

616
00:25:04,080 --> 00:25:09,918
that were functional in v2 are now

617
00:25:07,360 --> 00:25:10,959
also in the next branch i've been

618
00:25:09,919 --> 00:25:13,440
releasing

619
00:25:10,960 --> 00:25:14,240
alpha versions to engage with the

620
00:25:13,440 --> 00:25:17,360
community

621
00:25:14,240 --> 00:25:19,120
because i don't want to break not a

622
00:25:17,360 --> 00:25:22,559
functionality but workflows

623
00:25:19,120 --> 00:25:25,918
for people who are used to modifying

624
00:25:22,559 --> 00:25:28,480
uh flow graphs themselves or whatever so

625
00:25:25,919 --> 00:25:29,360
just to engage with them see if i break

626
00:25:28,480 --> 00:25:33,200
anything of

627
00:25:29,360 --> 00:25:35,199
what they were using how well it works

628
00:25:33,200 --> 00:25:36,960
for them etc

629
00:25:35,200 --> 00:25:39,039
and currently i'm testing the

630
00:25:36,960 --> 00:25:41,600
performance of the modulators

631
00:25:39,039 --> 00:25:42,559
and when this is done probably i'll

632
00:25:41,600 --> 00:25:46,000
release

633
00:25:42,559 --> 00:25:48,879
v3 but there are many possible

634
00:25:46,000 --> 00:25:51,919
improvements which are made easier by

635
00:25:48,880 --> 00:25:55,200
these uh refactor so this will

636
00:25:51,919 --> 00:25:57,919
keep appearing in later versions and

637
00:25:55,200 --> 00:25:58,960
uh final question uh what about

638
00:25:57,919 --> 00:26:01,279
integration with

639
00:25:58,960 --> 00:26:04,159
satnoct network i don't know if there

640
00:26:01,279 --> 00:26:07,520
are any people from sadness in the room

641
00:26:04,159 --> 00:26:11,360
we have a thread open in the forums

642
00:26:07,520 --> 00:26:11,840
since 2010 not much progress has been

643
00:26:11,360 --> 00:26:14,719
done

644
00:26:11,840 --> 00:26:15,760
about integration with gear satellites

645
00:26:14,720 --> 00:26:19,039
and sadness

646
00:26:15,760 --> 00:26:21,600
both on their side or on my side so

647
00:26:19,039 --> 00:26:22,080
hopefully with this new architecture

648
00:26:21,600 --> 00:26:25,039
it's

649
00:26:22,080 --> 00:26:26,320
much easier to put things together on

650
00:26:25,039 --> 00:26:28,860
interface

651
00:26:26,320 --> 00:26:35,120
so that's all for today thank you

652
00:26:28,860 --> 00:26:37,279
[Applause]

653
00:26:35,120 --> 00:26:38,959
we have a question over there and if

654
00:26:37,279 --> 00:26:39,840
you're going to leave please start very

655
00:26:38,960 --> 00:26:42,400
quietly

656
00:26:39,840 --> 00:26:44,158
shuffling out of the room i've got a

657
00:26:42,400 --> 00:26:47,600
question regarding uh testing and

658
00:26:44,159 --> 00:26:50,159
avoiding the questions because we have

659
00:26:47,600 --> 00:26:52,879
like uh iq captures uh all the

660
00:26:50,159 --> 00:26:52,880
satellites to

661
00:26:58,400 --> 00:27:02,480
yeah the question was about testing and

662
00:27:01,120 --> 00:27:05,439
not breaking things with the

663
00:27:02,480 --> 00:27:06,960
refactor so that was actually one of my

664
00:27:05,440 --> 00:27:10,080
major concerns

665
00:27:06,960 --> 00:27:14,080
and i don't really have much

666
00:27:10,080 --> 00:27:16,960
in terms of unit testing i have uh iq

667
00:27:14,080 --> 00:27:18,960
small yeah i have small iq samples for

668
00:27:16,960 --> 00:27:22,159
most of the satellites

669
00:27:18,960 --> 00:27:25,520
and but not expected output because

670
00:27:22,159 --> 00:27:26,000
uh depending on you know radio version

671
00:27:25,520 --> 00:27:28,320
or

672
00:27:26,000 --> 00:27:29,840
some variations some of the packets can

673
00:27:28,320 --> 00:27:33,279
be barely missed

674
00:27:29,840 --> 00:27:36,639
or barely decoded so what i look like

675
00:27:33,279 --> 00:27:38,960
what i look at is uh that when i run the

676
00:27:36,640 --> 00:27:41,039
recording through the decoder it at

677
00:27:38,960 --> 00:27:43,600
least produces some packets

678
00:27:41,039 --> 00:27:46,158
and they look sensible for example if

679
00:27:43,600 --> 00:27:48,879
you have a crc and the cr6 okay you can

680
00:27:46,159 --> 00:27:50,799
be pretty much reasonable maybe you lost

681
00:27:48,880 --> 00:27:52,320
a bit of decoding performance but

682
00:27:50,799 --> 00:27:54,720
at least you haven't broken anything

683
00:27:52,320 --> 00:27:54,720
serious

684
00:27:57,679 --> 00:28:03,840
have you also considered working online

685
00:28:13,039 --> 00:28:17,039
satellites at the same time and can

686
00:28:18,240 --> 00:28:21,279
yeah the question is whether can we

687
00:28:20,640 --> 00:28:24,480
support

688
00:28:21,279 --> 00:28:26,559
a couple different channels i guess you

689
00:28:24,480 --> 00:28:28,880
can

690
00:28:26,559 --> 00:28:30,480
you can yeah also two different

691
00:28:28,880 --> 00:28:33,840
modulation schemes

692
00:28:30,480 --> 00:28:37,840
uh so i haven't thought about this yet

693
00:28:33,840 --> 00:28:40,879
i guess you can run two copies of the

694
00:28:37,840 --> 00:28:41,279
decoder or transmitter but if you want

695
00:28:40,880 --> 00:28:44,000
some

696
00:28:41,279 --> 00:28:51,840
interaction it's not better okay so yeah

697
00:28:44,000 --> 00:28:51,840
thank you

