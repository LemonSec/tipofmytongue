1
00:00:05,839 --> 00:00:08,400
yes

2
00:00:06,640 --> 00:00:10,080
so i'm going to give a talk about

3
00:00:08,400 --> 00:00:13,280
building a product with opti so

4
00:00:10,080 --> 00:00:15,120
actually using opti to build a product

5
00:00:13,280 --> 00:00:15,518
which you can deploy to production and

6
00:00:15,120 --> 00:00:17,359
be

7
00:00:15,519 --> 00:00:19,199
reasonably sure that nobody is going to

8
00:00:17,359 --> 00:00:21,680
leak your secrets you

9
00:00:19,199 --> 00:00:22,480
deployed into the product in the end so

10
00:00:21,680 --> 00:00:25,039
a bit about me

11
00:00:22,480 --> 00:00:26,400
my name is rufen sivinsky i work i work

12
00:00:25,039 --> 00:00:29,359
for pangotronix

13
00:00:26,400 --> 00:00:30,080
ecar we do a lot of embedded software

14
00:00:29,359 --> 00:00:32,320
consulting

15
00:00:30,080 --> 00:00:33,440
so we do stings things like board

16
00:00:32,320 --> 00:00:35,280
support packages

17
00:00:33,440 --> 00:00:36,960
and we often work on embedded arm

18
00:00:35,280 --> 00:00:38,800
platforms

19
00:00:36,960 --> 00:00:40,399
you can find me on github with the name

20
00:00:38,800 --> 00:00:42,078
emantor and you can also

21
00:00:40,399 --> 00:00:44,800
contact me by email at this email

22
00:00:42,079 --> 00:00:48,320
address and at penguitronics i do

23
00:00:44,800 --> 00:00:49,760
a lot of work with opti i do a bit of

24
00:00:48,320 --> 00:00:52,480
system integration so

25
00:00:49,760 --> 00:00:54,160
integrating opti into the board support

26
00:00:52,480 --> 00:00:57,919
package which will eventually

27
00:00:54,160 --> 00:00:59,519
be used in the field and i also do

28
00:00:57,920 --> 00:01:01,600
a bit of testing because i wrote a

29
00:00:59,520 --> 00:01:03,840
testic framework like three years ago

30
00:01:01,600 --> 00:01:04,640
which we still use today to test uh

31
00:01:03,840 --> 00:01:07,200
platforms

32
00:01:04,640 --> 00:01:08,560
uh when we eventually want to do updates

33
00:01:07,200 --> 00:01:11,680
on the platforms

34
00:01:08,560 --> 00:01:12,720
um let's get a short overview so i'm

35
00:01:11,680 --> 00:01:13,439
going to start with a bit of

36
00:01:12,720 --> 00:01:15,600
introduction

37
00:01:13,439 --> 00:01:17,279
a short introduction to the into the

38
00:01:15,600 --> 00:01:19,280
trust zone and opti

39
00:01:17,280 --> 00:01:21,520
then i'm going to present a motivation

40
00:01:19,280 --> 00:01:23,360
for this talk then i'm going to show you

41
00:01:21,520 --> 00:01:25,280
the problems you run into when you're

42
00:01:23,360 --> 00:01:28,240
trying to use opti in a product

43
00:01:25,280 --> 00:01:28,640
um i'm going to present the solutions so

44
00:01:28,240 --> 00:01:32,000
far

45
00:01:28,640 --> 00:01:34,320
for the platform i'm working on but

46
00:01:32,000 --> 00:01:36,400
which should also be applicable to the

47
00:01:34,320 --> 00:01:38,559
platforms you may be working with

48
00:01:36,400 --> 00:01:40,159
um i'm going to come to a conclusion and

49
00:01:38,560 --> 00:01:41,840
then there's going to be the happy

50
00:01:40,159 --> 00:01:43,840
outlook where i wish for things which

51
00:01:41,840 --> 00:01:46,240
are not implemented yet

52
00:01:43,840 --> 00:01:47,040
um so let's start with the trust zone so

53
00:01:46,240 --> 00:01:50,079
trust zone

54
00:01:47,040 --> 00:01:52,240
and 32 bits divides our processor state

55
00:01:50,079 --> 00:01:53,360
into a normal world in the secure world

56
00:01:52,240 --> 00:01:55,280
and then there's

57
00:01:53,360 --> 00:01:56,719
some kind of secure monitor which allows

58
00:01:55,280 --> 00:01:57,439
us to switch between the different

59
00:01:56,719 --> 00:02:00,798
worlds

60
00:01:57,439 --> 00:02:01,360
so the usual cpus come up in the secure

61
00:02:00,799 --> 00:02:02,960
world

62
00:02:01,360 --> 00:02:04,960
then the bootloader starts up in the

63
00:02:02,960 --> 00:02:07,119
secure world i deploy

64
00:02:04,960 --> 00:02:08,000
my trusted operating system and the

65
00:02:07,119 --> 00:02:09,840
trusted operating

66
00:02:08,000 --> 00:02:11,440
system ensures that when it switches

67
00:02:09,840 --> 00:02:12,879
over to the normal world my bootloader

68
00:02:11,440 --> 00:02:15,520
can continue to run

69
00:02:12,879 --> 00:02:17,200
and every time i want to want to access

70
00:02:15,520 --> 00:02:19,520
some kind of trust zone data

71
00:02:17,200 --> 00:02:20,640
or i want to call into my trusted

72
00:02:19,520 --> 00:02:23,840
operating system

73
00:02:20,640 --> 00:02:24,319
i do this uh smc called secure monitor

74
00:02:23,840 --> 00:02:26,720
call

75
00:02:24,319 --> 00:02:27,760
which goes into the secure monitor the

76
00:02:26,720 --> 00:02:30,239
secure monitor

77
00:02:27,760 --> 00:02:31,920
then does all the sanitization between

78
00:02:30,239 --> 00:02:33,200
the normal and the secure world so

79
00:02:31,920 --> 00:02:34,879
ensuring no

80
00:02:33,200 --> 00:02:36,879
register contents are leaked and

81
00:02:34,879 --> 00:02:38,799
everything is sanitized

82
00:02:36,879 --> 00:02:40,319
and then goes into the secure world the

83
00:02:38,800 --> 00:02:41,040
sequel world does some kind of

84
00:02:40,319 --> 00:02:43,119
computation

85
00:02:41,040 --> 00:02:44,720
my trusted operating system runs my

86
00:02:43,120 --> 00:02:45,360
trusted application which runs in the

87
00:02:44,720 --> 00:02:48,560
field

88
00:02:45,360 --> 00:02:50,160
which also may compute some secrets may

89
00:02:48,560 --> 00:02:53,040
request some pin entry

90
00:02:50,160 --> 00:02:54,640
from from a secured device whatever and

91
00:02:53,040 --> 00:02:57,760
then returns the data

92
00:02:54,640 --> 00:02:57,760
back to the normal world

93
00:02:58,000 --> 00:03:02,640
the trusted operating system we are

94
00:03:00,319 --> 00:03:04,159
employing in the field is called opti

95
00:03:02,640 --> 00:03:05,518
which is the open portable trusted

96
00:03:04,159 --> 00:03:09,120
execution environment

97
00:03:05,519 --> 00:03:12,400
and it's an open source implementation

98
00:03:09,120 --> 00:03:12,879
of the global platform t specifications

99
00:03:12,400 --> 00:03:15,519
which

100
00:03:12,879 --> 00:03:16,799
use the trust zone global platform is a

101
00:03:15,519 --> 00:03:20,159
standard body which

102
00:03:16,800 --> 00:03:22,640
also standardized smart card interfaces

103
00:03:20,159 --> 00:03:24,720
so the idea is that you have a standard

104
00:03:22,640 --> 00:03:26,480
interface for your trusted applications

105
00:03:24,720 --> 00:03:28,159
and then it doesn't matter which trusted

106
00:03:26,480 --> 00:03:30,319
operating system in the end you're going

107
00:03:28,159 --> 00:03:32,720
to use

108
00:03:30,319 --> 00:03:33,920
opti also has support for various arm

109
00:03:32,720 --> 00:03:37,280
platforms so there's

110
00:03:33,920 --> 00:03:39,280
uh some support for stm32 ti platforms

111
00:03:37,280 --> 00:03:39,920
are supported layerscape platforms from

112
00:03:39,280 --> 00:03:42,640
nxp

113
00:03:39,920 --> 00:03:43,440
are supported and broadcom platforms for

114
00:03:42,640 --> 00:03:45,359
example for

115
00:03:43,440 --> 00:03:47,280
simple development use cases you can

116
00:03:45,360 --> 00:03:49,680
also use raspberry pi's

117
00:03:47,280 --> 00:03:52,080
so there's support for raspberry pi 3 to

118
00:03:49,680 --> 00:03:55,439
develop an opti there

119
00:03:52,080 --> 00:03:59,360
and my focus is especially on imx6

120
00:03:55,439 --> 00:04:02,799
32-bit platforms or specifically on imx6

121
00:03:59,360 --> 00:04:05,120
ul platforms so the motivation for the

122
00:04:02,799 --> 00:04:07,920
talk is that we want to secure opti

123
00:04:05,120 --> 00:04:09,200
and the trusted applications running

124
00:04:07,920 --> 00:04:12,480
within opti

125
00:04:09,200 --> 00:04:14,238
for production use so we want to be

126
00:04:12,480 --> 00:04:17,039
reasonably sure that we are not leaking

127
00:04:14,239 --> 00:04:19,280
our data in production anywhere and we

128
00:04:17,040 --> 00:04:19,919
want to ensure that upstream opt can be

129
00:04:19,279 --> 00:04:23,359
used

130
00:04:19,918 --> 00:04:24,639
securely on imx6 so all the changes i

131
00:04:23,360 --> 00:04:26,479
need to do to opti

132
00:04:24,639 --> 00:04:27,759
are not going to live downstream

133
00:04:26,479 --> 00:04:30,000
somewhere so

134
00:04:27,759 --> 00:04:31,600
they are going to go upstream into the

135
00:04:30,000 --> 00:04:32,800
project so we don't have to maintain

136
00:04:31,600 --> 00:04:35,040
that and cannot

137
00:04:32,800 --> 00:04:37,520
do and can do that in conjunction with

138
00:04:35,040 --> 00:04:39,919
the upstream opti maintainers

139
00:04:37,520 --> 00:04:41,520
and i also want to provide some guidance

140
00:04:39,919 --> 00:04:42,240
which parts may be missing for other

141
00:04:41,520 --> 00:04:44,880
platforms

142
00:04:42,240 --> 00:04:46,560
because i'm specifically looking at imx6

143
00:04:44,880 --> 00:04:49,280
platforms i don't know

144
00:04:46,560 --> 00:04:50,880
how to implement certain parts for ti or

145
00:04:49,280 --> 00:04:54,080
stm platforms and how

146
00:04:50,880 --> 00:04:56,560
to serve to solve certain problems there

147
00:04:54,080 --> 00:04:57,758
but i can show you the problems and

148
00:04:56,560 --> 00:04:59,520
maybe you can kind of

149
00:04:57,759 --> 00:05:01,039
come you can come up with a solution to

150
00:04:59,520 --> 00:05:04,400
the problem

151
00:05:01,039 --> 00:05:06,479
um so the problems are which components

152
00:05:04,400 --> 00:05:08,080
do i need to secure opti so

153
00:05:06,479 --> 00:05:10,000
which are the parts which need to be

154
00:05:08,080 --> 00:05:13,120
implemented by the platform rather by

155
00:05:10,000 --> 00:05:14,000
then by the opti core to secure the opt

156
00:05:13,120 --> 00:05:15,520
in production

157
00:05:14,000 --> 00:05:17,759
and which part of this conv

158
00:05:15,520 --> 00:05:19,680
configuration is already done upstream

159
00:05:17,759 --> 00:05:20,560
so what's the point that i don't need to

160
00:05:19,680 --> 00:05:22,400
worry about

161
00:05:20,560 --> 00:05:23,840
which part has already already been done

162
00:05:22,400 --> 00:05:27,520
by the upstream maintainers

163
00:05:23,840 --> 00:05:30,719
or maybe by the stock manufacturer

164
00:05:27,520 --> 00:05:31,520
who upstreamed his changes to upstream

165
00:05:30,720 --> 00:05:33,280
opti

166
00:05:31,520 --> 00:05:35,039
and then again the next question is

167
00:05:33,280 --> 00:05:36,960
which part of this

168
00:05:35,039 --> 00:05:38,960
needs to be managed by the system

169
00:05:36,960 --> 00:05:40,880
integrator so which part needs to be

170
00:05:38,960 --> 00:05:42,479
managed by the person who in the end is

171
00:05:40,880 --> 00:05:43,680
going to assemble the whole system

172
00:05:42,479 --> 00:05:45,520
including the kernel

173
00:05:43,680 --> 00:05:48,479
including the bootloader and including

174
00:05:45,520 --> 00:05:51,520
the trusted operating system

175
00:05:48,479 --> 00:05:53,280
so securing upstream obstacle opti from

176
00:05:51,520 --> 00:05:54,880
my point of view consists of the

177
00:05:53,280 --> 00:05:57,919
following

178
00:05:54,880 --> 00:05:58,880
five or optionally six points you need

179
00:05:57,919 --> 00:06:01,039
to

180
00:05:58,880 --> 00:06:03,120
employ some kind of ram protection or

181
00:06:01,039 --> 00:06:05,199
you need to employ the opti pager

182
00:06:03,120 --> 00:06:06,160
you need a hardware unit key for your

183
00:06:05,199 --> 00:06:09,360
platform

184
00:06:06,160 --> 00:06:11,919
you need to see the opti

185
00:06:09,360 --> 00:06:13,840
pseudo random number generator with a

186
00:06:11,919 --> 00:06:16,080
sufficiently random seat

187
00:06:13,840 --> 00:06:18,159
you need some kind of peripheral access

188
00:06:16,080 --> 00:06:21,039
configuration depending on your platform

189
00:06:18,160 --> 00:06:22,000
and you have to ensure that you have a

190
00:06:21,039 --> 00:06:24,800
trusted

191
00:06:22,000 --> 00:06:25,840
boot up of your opti operating system so

192
00:06:24,800 --> 00:06:28,800
you need to ensure

193
00:06:25,840 --> 00:06:30,960
that only the optis you compiled can

194
00:06:28,800 --> 00:06:33,199
boot on the platform because otherwise

195
00:06:30,960 --> 00:06:34,000
somebody could run other optis and thus

196
00:06:33,199 --> 00:06:35,840
leak your

197
00:06:34,000 --> 00:06:37,039
secrets on the platform and you

198
00:06:35,840 --> 00:06:39,359
optionally want to

199
00:06:37,039 --> 00:06:40,318
employ some kind of storage rollback

200
00:06:39,360 --> 00:06:41,850
protection

201
00:06:40,319 --> 00:06:44,000
to ensure that nobody can

202
00:06:41,850 --> 00:06:46,880
[Music]

203
00:06:44,000 --> 00:06:48,639
fool you with old data from a previous

204
00:06:46,880 --> 00:06:50,800
installation

205
00:06:48,639 --> 00:06:51,840
so let's start with the ram protection

206
00:06:50,800 --> 00:06:53,759
so

207
00:06:51,840 --> 00:06:55,359
the one thing you can do for ram

208
00:06:53,759 --> 00:06:58,319
protection is employ

209
00:06:55,360 --> 00:07:00,240
some kind of ddr firewall and this

210
00:06:58,319 --> 00:07:03,440
protects part of my

211
00:07:00,240 --> 00:07:06,560
ram from access by the normal world

212
00:07:03,440 --> 00:07:09,360
so an example of this is the trustzone

213
00:07:06,560 --> 00:07:11,280
controller 380 hardware which supports

214
00:07:09,360 --> 00:07:14,560
the configuration of multiple regions

215
00:07:11,280 --> 00:07:16,719
so you can say i'd like to be 32

216
00:07:14,560 --> 00:07:18,479
megabytes at the very end of ram to be

217
00:07:16,720 --> 00:07:20,160
allocated to the secure world

218
00:07:18,479 --> 00:07:21,520
and the normal world can no longer

219
00:07:20,160 --> 00:07:23,520
access the memory there

220
00:07:21,520 --> 00:07:24,639
every time the normal world will try to

221
00:07:23,520 --> 00:07:28,000
access this memory

222
00:07:24,639 --> 00:07:30,400
it will generate an interrupt to

223
00:07:28,000 --> 00:07:32,560
notify you that somebody tried to access

224
00:07:30,400 --> 00:07:34,638
the secure memory from the normal world

225
00:07:32,560 --> 00:07:36,479
and you will also read only zeros from

226
00:07:34,639 --> 00:07:40,479
the normal world

227
00:07:36,479 --> 00:07:42,880
and uh for imx 6 platforms there's

228
00:07:40,479 --> 00:07:44,080
this trustzone address based controller

229
00:07:42,880 --> 00:07:46,240
from

230
00:07:44,080 --> 00:07:48,800
arm used inside the platform so many

231
00:07:46,240 --> 00:07:50,240
socks may use different ddr firewalls

232
00:07:48,800 --> 00:07:52,080
there are also

233
00:07:50,240 --> 00:07:54,720
custom implementations from different

234
00:07:52,080 --> 00:07:56,960
vendors i know that for example the

235
00:07:54,720 --> 00:07:58,879
high key platforms use a custom ddr

236
00:07:56,960 --> 00:08:01,120
firewall which is

237
00:07:58,879 --> 00:08:01,919
not very well documented as far as i

238
00:08:01,120 --> 00:08:04,560
know or the

239
00:08:01,919 --> 00:08:05,198
documentation is hard to get to but for

240
00:08:04,560 --> 00:08:06,960
these

241
00:08:05,199 --> 00:08:09,599
arm standard implementations you can

242
00:08:06,960 --> 00:08:12,400
just download the datasheet from arm

243
00:08:09,599 --> 00:08:14,240
and the upstream there's already an

244
00:08:12,400 --> 00:08:15,919
upstream driver for these trust zone

245
00:08:14,240 --> 00:08:19,199
controllers inside of opti

246
00:08:15,919 --> 00:08:19,198
and you had to previously

247
00:08:19,520 --> 00:08:23,520
you had to previously describe the

248
00:08:21,599 --> 00:08:24,479
regions and all the stuff yourself but

249
00:08:23,520 --> 00:08:27,280
this is no longer

250
00:08:24,479 --> 00:08:28,800
necessary because uh depending on your

251
00:08:27,280 --> 00:08:31,758
platform configuration for

252
00:08:28,800 --> 00:08:34,000
imx6 platforms at least there's auto

253
00:08:31,759 --> 00:08:36,000
configuration so with an opti we already

254
00:08:34,000 --> 00:08:36,320
know the total memory size we already

255
00:08:36,000 --> 00:08:38,000
know

256
00:08:36,320 --> 00:08:40,000
how much memory we want in the secure

257
00:08:38,000 --> 00:08:42,320
world and we can just calculate

258
00:08:40,000 --> 00:08:44,320
how the region configuration inside this

259
00:08:42,320 --> 00:08:47,040
trustzone controller should look like

260
00:08:44,320 --> 00:08:48,160
and then we can just apply the trustzone

261
00:08:47,040 --> 00:08:50,959
controller

262
00:08:48,160 --> 00:08:53,120
configuration and be happy that nobody

263
00:08:50,959 --> 00:08:56,399
can access this

264
00:08:53,120 --> 00:08:58,640
it's also important to uh

265
00:08:56,399 --> 00:08:59,519
remember that there may be some kind of

266
00:08:58,640 --> 00:09:02,800
bypass

267
00:08:59,519 --> 00:09:04,399
for this trustzone controller for imx6

268
00:09:02,800 --> 00:09:07,439
platforms as an example

269
00:09:04,399 --> 00:09:09,120
there's a single bit in the i o mox

270
00:09:07,440 --> 00:09:11,040
which you need to set to disable the

271
00:09:09,120 --> 00:09:14,880
bypass of the trustzone controller

272
00:09:11,040 --> 00:09:16,319
because you have a certain bandwidth

273
00:09:14,880 --> 00:09:19,040
so there's a small reduction of

274
00:09:16,320 --> 00:09:20,959
bandwidth going through the ddr firewall

275
00:09:19,040 --> 00:09:22,480
and you have to disable this obviously

276
00:09:20,959 --> 00:09:24,399
because otherwise you can

277
00:09:22,480 --> 00:09:26,320
just bypass the firewall and everybody

278
00:09:24,399 --> 00:09:26,640
can read your secure word memory which

279
00:09:26,320 --> 00:09:30,240
is

280
00:09:26,640 --> 00:09:32,640
rather bad so next up

281
00:09:30,240 --> 00:09:34,560
an alternative to using this run

282
00:09:32,640 --> 00:09:36,720
protection or configuring the ddr

283
00:09:34,560 --> 00:09:39,599
firewall is employing

284
00:09:36,720 --> 00:09:40,800
the opti pager where you run a small

285
00:09:39,600 --> 00:09:44,240
part of your opt

286
00:09:40,800 --> 00:09:45,359
inside the sram on your cpu and then you

287
00:09:44,240 --> 00:09:47,519
encrypt all the

288
00:09:45,360 --> 00:09:49,519
other memory pages you want to stall

289
00:09:47,519 --> 00:09:51,680
into you want to store into a normal

290
00:09:49,519 --> 00:09:52,959
memory you still want to ensure that

291
00:09:51,680 --> 00:09:56,640
nobody can overwrite the

292
00:09:52,959 --> 00:09:58,319
memory in the end but even if they can

293
00:09:56,640 --> 00:10:01,839
read the memory the memory is still

294
00:09:58,320 --> 00:10:03,920
going to be encrypted and authenticated

295
00:10:01,839 --> 00:10:05,839
which does not necessarily require the

296
00:10:03,920 --> 00:10:06,399
dr firewall there are some constraints

297
00:10:05,839 --> 00:10:08,480
with this

298
00:10:06,399 --> 00:10:09,880
your device needs to have a sufficient

299
00:10:08,480 --> 00:10:14,880
amount of sram so

300
00:10:09,880 --> 00:10:18,480
128 kilobytes to 256 kilobytes

301
00:10:14,880 --> 00:10:20,720
and for us the chosen ul

302
00:10:18,480 --> 00:10:22,160
does not necessarily have enough sram

303
00:10:20,720 --> 00:10:23,839
depending on the version of the

304
00:10:22,160 --> 00:10:26,240
processor you select

305
00:10:23,839 --> 00:10:27,680
and also for bigger variants which may

306
00:10:26,240 --> 00:10:29,600
have enough sram there's

307
00:10:27,680 --> 00:10:31,040
constraints on other devices maybe

308
00:10:29,600 --> 00:10:34,240
requiring the sram

309
00:10:31,040 --> 00:10:36,800
so even for this imx6 ul there's a pixel

310
00:10:34,240 --> 00:10:39,440
coprocessor you can use to

311
00:10:36,800 --> 00:10:39,920
do simple frame buffer stuff or simple

312
00:10:39,440 --> 00:10:42,079
2d

313
00:10:39,920 --> 00:10:42,959
graphics on an external display and this

314
00:10:42,079 --> 00:10:46,079
requires

315
00:10:42,959 --> 00:10:48,719
a 128 times 32 bits of

316
00:10:46,079 --> 00:10:50,239
sram to store the frame buffers for your

317
00:10:48,720 --> 00:10:52,560
pixel pipeline so if you connect the

318
00:10:50,240 --> 00:10:56,000
display your sram is going to be smaller

319
00:10:52,560 --> 00:10:58,560
and for bigger imx6 variants there's

320
00:10:56,000 --> 00:11:00,160
the image processing unit or the gpu

321
00:10:58,560 --> 00:11:03,518
which also may require

322
00:11:00,160 --> 00:11:06,719
sram to store data because

323
00:11:03,519 --> 00:11:08,720
ddr memory may be too slow for this so

324
00:11:06,720 --> 00:11:10,800
this was why we didn't choose the

325
00:11:08,720 --> 00:11:11,920
optipager as the way to go there and

326
00:11:10,800 --> 00:11:15,279
instead use

327
00:11:11,920 --> 00:11:18,000
the ddr firewall so next up is this

328
00:11:15,279 --> 00:11:20,160
hardware unit key opti requires some

329
00:11:18,000 --> 00:11:22,000
kind of hardware unit key

330
00:11:20,160 --> 00:11:23,279
which is used to derive all the other

331
00:11:22,000 --> 00:11:26,800
keys on boot up

332
00:11:23,279 --> 00:11:28,320
and this should be unique per device

333
00:11:26,800 --> 00:11:29,839
which means that every device should

334
00:11:28,320 --> 00:11:33,600
have a unique key and uh

335
00:11:29,839 --> 00:11:35,920
subsequently um once a device

336
00:11:33,600 --> 00:11:36,880
stores data it can only be encrypted by

337
00:11:35,920 --> 00:11:39,519
the very same

338
00:11:36,880 --> 00:11:41,200
decrypted by the very same processor and

339
00:11:39,519 --> 00:11:43,040
obviously should not be accessible from

340
00:11:41,200 --> 00:11:44,720
the normal world because otherwise

341
00:11:43,040 --> 00:11:46,719
people can just derive the key in the

342
00:11:44,720 --> 00:11:50,399
normal world and then

343
00:11:46,720 --> 00:11:54,240
decrypt the data for imx6 we actually

344
00:11:50,399 --> 00:11:56,560
use a trick with the cryptographics

345
00:11:54,240 --> 00:11:58,399
acceleration and authentication module

346
00:11:56,560 --> 00:11:59,599
there's something called the master key

347
00:11:58,399 --> 00:12:02,639
verification blob

348
00:11:59,600 --> 00:12:05,040
where you can say i want to do

349
00:12:02,639 --> 00:12:06,560
a hash over the master key which is

350
00:12:05,040 --> 00:12:08,800
unique per device

351
00:12:06,560 --> 00:12:10,000
and then we use this hash as the

352
00:12:08,800 --> 00:12:12,240
hardware unit key

353
00:12:10,000 --> 00:12:14,399
and additionally in the calm there's a

354
00:12:12,240 --> 00:12:17,120
bid where you can lock out this

355
00:12:14,399 --> 00:12:17,760
generation or where you can increment a

356
00:12:17,120 --> 00:12:19,839
counter

357
00:12:17,760 --> 00:12:21,839
and the next one who does this master

358
00:12:19,839 --> 00:12:22,959
key verification blob is going to get a

359
00:12:21,839 --> 00:12:25,440
different hash

360
00:12:22,959 --> 00:12:26,079
and you will never going to get the same

361
00:12:25,440 --> 00:12:28,399
hash again

362
00:12:26,079 --> 00:12:31,120
unless you reboot the platform and then

363
00:12:28,399 --> 00:12:34,399
the bit is unset again

364
00:12:31,120 --> 00:12:37,200
and this is still not

365
00:12:34,399 --> 00:12:38,000
in upstream opti the pull request at the

366
00:12:37,200 --> 00:12:40,480
moment is

367
00:12:38,000 --> 00:12:42,880
uh closed because this needs to be

368
00:12:40,480 --> 00:12:46,000
rebased on the imx67 car

369
00:12:42,880 --> 00:12:47,600
driver so nxp actually contributed a

370
00:12:46,000 --> 00:12:49,519
driver for the calm the calm

371
00:12:47,600 --> 00:12:52,079
does more than this master key

372
00:12:49,519 --> 00:12:54,079
verification bob you can also do

373
00:12:52,079 --> 00:12:55,839
aas encryption and decryption and

374
00:12:54,079 --> 00:12:58,160
hardware so a lot of crypto

375
00:12:55,839 --> 00:13:00,720
acceleration is possible possible there

376
00:12:58,160 --> 00:13:02,880
it also does hash algorithms

377
00:13:00,720 --> 00:13:05,279
and i'm currently in the process of

378
00:13:02,880 --> 00:13:08,000
rebasing this on the calm driver

379
00:13:05,279 --> 00:13:09,279
and then we should have hardware unit

380
00:13:08,000 --> 00:13:12,399
key derivation for

381
00:13:09,279 --> 00:13:15,439
opti platforms or for imx6 platforms

382
00:13:12,399 --> 00:13:18,800
so this will be done soon

383
00:13:15,440 --> 00:13:20,320
then get the next one is rng seeding so

384
00:13:18,800 --> 00:13:22,719
opti internally

385
00:13:20,320 --> 00:13:23,360
if you use a software rmg you can also

386
00:13:22,720 --> 00:13:26,160
use

387
00:13:23,360 --> 00:13:28,000
a hardware rng but due to constraints on

388
00:13:26,160 --> 00:13:29,439
our platforms we don't want to use the

389
00:13:28,000 --> 00:13:33,040
hardware

390
00:13:29,440 --> 00:13:36,079
rng you still require some kind of rng

391
00:13:33,040 --> 00:13:37,760
seat and the default seat for in

392
00:13:36,079 --> 00:13:39,199
development environment is always zero

393
00:13:37,760 --> 00:13:41,199
so it's kind of

394
00:13:39,199 --> 00:13:42,399
well predictable that's not necessarily

395
00:13:41,199 --> 00:13:46,319
what you want for a

396
00:13:42,399 --> 00:13:48,639
for a product so for imx6 we have a

397
00:13:46,320 --> 00:13:50,560
rng or true random damage generator

398
00:13:48,639 --> 00:13:54,320
again inside this calm block

399
00:13:50,560 --> 00:13:56,239
and we can read out a seat for

400
00:13:54,320 --> 00:13:58,160
our pseudo-random number generator at

401
00:13:56,240 --> 00:14:02,320
the very beginning of boot

402
00:13:58,160 --> 00:14:04,560
and then just seat the prng with this

403
00:14:02,320 --> 00:14:06,399
and this is not implemented yet it's up

404
00:14:04,560 --> 00:14:08,239
on my schedule i'll get to it at some

405
00:14:06,399 --> 00:14:11,760
point and then we should have

406
00:14:08,240 --> 00:14:13,839
good rng seeding uh at the start of opti

407
00:14:11,760 --> 00:14:16,000
i know currently if you start opting on

408
00:14:13,839 --> 00:14:18,240
imix6 platform it's also going

409
00:14:16,000 --> 00:14:20,079
to complain with a loud warning saying

410
00:14:18,240 --> 00:14:22,399
uh seating rng with

411
00:14:20,079 --> 00:14:24,160
with zero's exclamation mark so

412
00:14:22,399 --> 00:14:24,560
eventually i'd like to get rid of this

413
00:14:24,160 --> 00:14:28,800
and

414
00:14:24,560 --> 00:14:30,800
do a real rng seating

415
00:14:28,800 --> 00:14:32,959
so there's also the problem of

416
00:14:30,800 --> 00:14:36,160
peripheral axis configuration

417
00:14:32,959 --> 00:14:37,599
so socks have dma masters usually

418
00:14:36,160 --> 00:14:40,639
besides the cpu

419
00:14:37,600 --> 00:14:41,920
and the ddr firewall only protects you

420
00:14:40,639 --> 00:14:44,240
from accesses which

421
00:14:41,920 --> 00:14:46,319
are marked as normal so if they are

422
00:14:44,240 --> 00:14:48,880
marked as the secure world axis your

423
00:14:46,320 --> 00:14:49,680
um your ddr firewall is just going to

424
00:14:48,880 --> 00:14:52,959
let the

425
00:14:49,680 --> 00:14:53,920
access through and depending on how your

426
00:14:52,959 --> 00:14:56,638
platform works

427
00:14:53,920 --> 00:14:57,599
those masters may actually be default

428
00:14:56,639 --> 00:14:59,839
secure

429
00:14:57,600 --> 00:15:01,920
so in the end i configure my ddr

430
00:14:59,839 --> 00:15:05,279
firewall correct i configure

431
00:15:01,920 --> 00:15:07,279
my bypass correct so my cpu normal world

432
00:15:05,279 --> 00:15:08,000
process can't access my secure memory

433
00:15:07,279 --> 00:15:10,560
which is great

434
00:15:08,000 --> 00:15:12,800
but then i asked the gpu hey give me a

435
00:15:10,560 --> 00:15:13,119
dma transfer from my secure memory and

436
00:15:12,800 --> 00:15:15,920
the

437
00:15:13,120 --> 00:15:16,480
dna and the gpu says happily here's your

438
00:15:15,920 --> 00:15:18,319
dma

439
00:15:16,480 --> 00:15:21,279
transfer what else do you want so you

440
00:15:18,320 --> 00:15:23,120
need to ensure that uh all masters are

441
00:15:21,279 --> 00:15:25,120
configured as non-secure and this is

442
00:15:23,120 --> 00:15:27,120
highly dependent on your platform so

443
00:15:25,120 --> 00:15:29,040
read your reference manual and ensure

444
00:15:27,120 --> 00:15:32,000
that these access policy

445
00:15:29,040 --> 00:15:32,480
is are configured correctly for imx6

446
00:15:32,000 --> 00:15:35,680
there's

447
00:15:32,480 --> 00:15:38,079
a unit inside the processor which is

448
00:15:35,680 --> 00:15:40,239
called the central security unit csu

449
00:15:38,079 --> 00:15:42,239
there's a register inside of that where

450
00:15:40,240 --> 00:15:45,360
you can just say whether

451
00:15:42,240 --> 00:15:48,079
this dma master is secure or non-secure

452
00:15:45,360 --> 00:15:50,079
and uh for this we just configure

453
00:15:48,079 --> 00:15:54,000
everything as non-secure except for

454
00:15:50,079 --> 00:15:58,160
the cpu obviously and then everything is

455
00:15:54,000 --> 00:16:00,639
safe if you want to do some kind of uh

456
00:15:58,160 --> 00:16:02,319
peripheral access from opti however then

457
00:16:00,639 --> 00:16:05,199
it gets more interesting so

458
00:16:02,320 --> 00:16:06,560
um if you want to do some kind of dma

459
00:16:05,199 --> 00:16:08,240
uart in the

460
00:16:06,560 --> 00:16:09,758
secure world you may have to come up

461
00:16:08,240 --> 00:16:13,440
with some kind of api

462
00:16:09,759 --> 00:16:14,480
which is able to handle this case we

463
00:16:13,440 --> 00:16:17,519
just configure

464
00:16:14,480 --> 00:16:18,800
everything default non-secure inside the

465
00:16:17,519 --> 00:16:21,120
imx6 url

466
00:16:18,800 --> 00:16:22,880
and it's rather trivial to configure

467
00:16:21,120 --> 00:16:24,800
this register for other platforms you

468
00:16:22,880 --> 00:16:26,800
just have to look inside the security

469
00:16:24,800 --> 00:16:28,399
reference manual and then find out which

470
00:16:26,800 --> 00:16:30,639
peripherals are actually

471
00:16:28,399 --> 00:16:31,600
on your specific stock and then submit

472
00:16:30,639 --> 00:16:35,600
this

473
00:16:31,600 --> 00:16:38,160
should be really really easy

474
00:16:35,600 --> 00:16:40,320
and then next is trusted boot up so you

475
00:16:38,160 --> 00:16:42,880
use you have to use your platform's

476
00:16:40,320 --> 00:16:43,279
version of verified or secure boot

477
00:16:42,880 --> 00:16:46,880
because

478
00:16:43,279 --> 00:16:48,399
otherwise anybody could start other opti

479
00:16:46,880 --> 00:16:50,639
versions on your board and then just

480
00:16:48,399 --> 00:16:52,800
leak your secrets if

481
00:16:50,639 --> 00:16:55,120
this is not verified and this verifies

482
00:16:52,800 --> 00:16:58,319
the opti version to prevent replacements

483
00:16:55,120 --> 00:17:01,680
so you for i make six platforms there's

484
00:16:58,320 --> 00:17:03,600
a high assurance boot implemented

485
00:17:01,680 --> 00:17:06,240
by the stock vendor and inside the boot

486
00:17:03,600 --> 00:17:08,160
rom so the boot rom verifies our

487
00:17:06,240 --> 00:17:11,199
bootloader the bootloader in turn

488
00:17:08,160 --> 00:17:13,039
contains a binary version of opti so the

489
00:17:11,199 --> 00:17:14,959
bootloader is verified the opt is

490
00:17:13,039 --> 00:17:17,520
verified and the very first thing the

491
00:17:14,959 --> 00:17:20,959
bootloader starts on startup is opti

492
00:17:17,520 --> 00:17:24,480
so there's no real or we try to minimize

493
00:17:20,959 --> 00:17:26,160
the attack vector in this in this case

494
00:17:24,480 --> 00:17:28,000
and this is not something you can

495
00:17:26,160 --> 00:17:29,360
implement in upstream opti this is

496
00:17:28,000 --> 00:17:30,400
something you need to ensure on the

497
00:17:29,360 --> 00:17:33,840
integration level

498
00:17:30,400 --> 00:17:35,520
so inside your or the system

499
00:17:33,840 --> 00:17:37,039
this is something the system integrator

500
00:17:35,520 --> 00:17:37,600
has to do when he's designing the

501
00:17:37,039 --> 00:17:39,280
platform

502
00:17:37,600 --> 00:17:41,039
so not only does he need to compile the

503
00:17:39,280 --> 00:17:41,678
kernel compile the bootloader compile

504
00:17:41,039 --> 00:17:44,320
the opti

505
00:17:41,679 --> 00:17:45,840
and bundle it all into a fine bundle he

506
00:17:44,320 --> 00:17:48,000
also needs to

507
00:17:45,840 --> 00:17:49,600
enable high assurance boot on the stock

508
00:17:48,000 --> 00:17:50,880
and sign the bootloader and opt

509
00:17:49,600 --> 00:17:54,959
correctly

510
00:17:50,880 --> 00:17:56,960
and then he may also want to sign his

511
00:17:54,960 --> 00:17:58,320
user space and the linux kernel to

512
00:17:56,960 --> 00:18:00,320
ensure that there is no

513
00:17:58,320 --> 00:18:01,760
untrusted software running on the sock

514
00:18:00,320 --> 00:18:05,039
if you're added why not

515
00:18:01,760 --> 00:18:07,200
do that as well and then there's also

516
00:18:05,039 --> 00:18:10,799
optionally storage rollback protection

517
00:18:07,200 --> 00:18:12,960
you can use the emmc feature of replay

518
00:18:10,799 --> 00:18:16,000
protected memory blocks

519
00:18:12,960 --> 00:18:18,960
which is an area where

520
00:18:16,000 --> 00:18:20,640
your rights are repre replay protected

521
00:18:18,960 --> 00:18:23,200
by a counter

522
00:18:20,640 --> 00:18:24,240
opti implements this as a simple fat

523
00:18:23,200 --> 00:18:26,880
file system so

524
00:18:24,240 --> 00:18:29,360
many mmcs have a replay protected memory

525
00:18:26,880 --> 00:18:32,080
block size of like four megabytes

526
00:18:29,360 --> 00:18:32,559
which is enough to store some kind of

527
00:18:32,080 --> 00:18:35,520
data

528
00:18:32,559 --> 00:18:36,399
or store an encryption key for data as

529
00:18:35,520 --> 00:18:39,200
an example

530
00:18:36,400 --> 00:18:40,960
and this is already supported upstream

531
00:18:39,200 --> 00:18:43,600
so you have to enable

532
00:18:40,960 --> 00:18:44,400
this replay protected memory block file

533
00:18:43,600 --> 00:18:47,360
system

534
00:18:44,400 --> 00:18:49,840
and then you have to deploy this one

535
00:18:47,360 --> 00:18:51,678
time during production to write a key

536
00:18:49,840 --> 00:18:54,159
or to exchange a key between your

537
00:18:51,679 --> 00:18:56,640
processor and your emmc

538
00:18:54,160 --> 00:18:58,240
and this is a one-time operation um you

539
00:18:56,640 --> 00:19:02,080
can't write this key again

540
00:18:58,240 --> 00:19:06,080
this is then kind of fused to your emmc

541
00:19:02,080 --> 00:19:07,360
um and then you run your normal opti

542
00:19:06,080 --> 00:19:10,000
which does not do the

543
00:19:07,360 --> 00:19:12,879
key exchange afterwards and you also

544
00:19:10,000 --> 00:19:14,880
have to ensure to disable the emulation

545
00:19:12,880 --> 00:19:16,799
in the user space program which

546
00:19:14,880 --> 00:19:18,559
facilitates the communication

547
00:19:16,799 --> 00:19:20,559
to user space from the corner side

548
00:19:18,559 --> 00:19:24,240
because otherwise this provides

549
00:19:20,559 --> 00:19:26,160
an emulation layer to test this

550
00:19:24,240 --> 00:19:28,160
in a development environment but for

551
00:19:26,160 --> 00:19:30,400
production devices obviously you want to

552
00:19:28,160 --> 00:19:33,840
disable this

553
00:19:30,400 --> 00:19:34,960
so in conclusion there's no platform

554
00:19:33,840 --> 00:19:38,480
which is totally

555
00:19:34,960 --> 00:19:41,679
secure at the moment in upstream option

556
00:19:38,480 --> 00:19:43,760
i'm slowly getting imx6 to a state where

557
00:19:41,679 --> 00:19:44,640
i can say if you enable the correct

558
00:19:43,760 --> 00:19:48,400
switches

559
00:19:44,640 --> 00:19:49,039
and ensure that you use a high assurance

560
00:19:48,400 --> 00:19:52,320
boot

561
00:19:49,039 --> 00:19:54,320
your opt should be secure enough and

562
00:19:52,320 --> 00:19:55,840
vendor implementations may include the

563
00:19:54,320 --> 00:19:59,200
necessary bits so because

564
00:19:55,840 --> 00:20:02,720
opti is a bsd too clause

565
00:19:59,200 --> 00:20:03,520
licensed downstream vendors do not

566
00:20:02,720 --> 00:20:05,280
necessarily

567
00:20:03,520 --> 00:20:07,600
have to open source their

568
00:20:05,280 --> 00:20:09,760
implementations but sometimes you can

569
00:20:07,600 --> 00:20:11,840
bug them or sometimes they release them

570
00:20:09,760 --> 00:20:12,799
as well and then you can look at their

571
00:20:11,840 --> 00:20:15,520
implementations

572
00:20:12,799 --> 00:20:17,120
but you still have to review all the

573
00:20:15,520 --> 00:20:19,200
code they implemented and get the

574
00:20:17,120 --> 00:20:20,559
reference manual and then

575
00:20:19,200 --> 00:20:22,080
cross-reference between the

576
00:20:20,559 --> 00:20:22,639
implementation and what the reference

577
00:20:22,080 --> 00:20:25,199
menu

578
00:20:22,640 --> 00:20:27,280
says and even then you have to sometimes

579
00:20:25,200 --> 00:20:28,080
test whether their implementation works

580
00:20:27,280 --> 00:20:29,840
correctly

581
00:20:28,080 --> 00:20:31,918
so in the end you have to get a real

582
00:20:29,840 --> 00:20:33,918
hardware platform you have to do

583
00:20:31,919 --> 00:20:35,120
all the different stuff and then

584
00:20:33,919 --> 00:20:36,960
actually tests

585
00:20:35,120 --> 00:20:39,760
whether your memory accesses are now

586
00:20:36,960 --> 00:20:42,000
protected or whether your dma masters

587
00:20:39,760 --> 00:20:42,879
can now really not access the secure

588
00:20:42,000 --> 00:20:45,280
world memory

589
00:20:42,880 --> 00:20:47,840
so it requires a lot of validation and

590
00:20:45,280 --> 00:20:50,320
testing on your site

591
00:20:47,840 --> 00:20:50,959
and then i'll get to the outlook or wish

592
00:20:50,320 --> 00:20:54,000
list so

593
00:20:50,960 --> 00:20:56,720
currently we have a certain problem

594
00:20:54,000 --> 00:20:59,280
in that clock accesses and coordination

595
00:20:56,720 --> 00:21:00,799
between opti and linux is kind of hard

596
00:20:59,280 --> 00:21:02,559
i told you before that this

597
00:21:00,799 --> 00:21:04,400
cryptographics acceleration

598
00:21:02,559 --> 00:21:05,600
and assurance module is now supported

599
00:21:04,400 --> 00:21:10,000
with an opti

600
00:21:05,600 --> 00:21:10,799
um but the kernel may disable the clocks

601
00:21:10,000 --> 00:21:13,919
for your

602
00:21:10,799 --> 00:21:16,080
cryptographics module because the kernel

603
00:21:13,919 --> 00:21:18,480
is managing the clocks on the system

604
00:21:16,080 --> 00:21:19,600
and if you try to access the crypto

605
00:21:18,480 --> 00:21:22,000
module in opti

606
00:21:19,600 --> 00:21:24,000
because your ta wants to encrypt some

607
00:21:22,000 --> 00:21:24,640
kind of data your platform is just going

608
00:21:24,000 --> 00:21:26,159
to get stuck

609
00:21:24,640 --> 00:21:28,080
because there's a transaction on the bus

610
00:21:26,159 --> 00:21:29,919
but nobody is handling it so you

611
00:21:28,080 --> 00:21:30,879
effectively have a denial of service

612
00:21:29,919 --> 00:21:35,520
attack there

613
00:21:30,880 --> 00:21:37,520
and i would like some kind of

614
00:21:35,520 --> 00:21:38,559
fix or some kind of framework for this

615
00:21:37,520 --> 00:21:41,440
there's

616
00:21:38,559 --> 00:21:42,720
some work ongoing but i think it's it

617
00:21:41,440 --> 00:21:46,320
targets more

618
00:21:42,720 --> 00:21:47,520
i am i'm 64-bit platforms but i have to

619
00:21:46,320 --> 00:21:49,439
look into this again

620
00:21:47,520 --> 00:21:51,440
and i also i also would like deeper

621
00:21:49,440 --> 00:21:52,720
device to integration for opti so

622
00:21:51,440 --> 00:21:55,200
currently it's a lot

623
00:21:52,720 --> 00:21:55,840
of platform device definitions within

624
00:21:55,200 --> 00:21:58,159
opti

625
00:21:55,840 --> 00:21:59,199
and there's not much pricing of device

626
00:21:58,159 --> 00:22:01,679
tree information

627
00:21:59,200 --> 00:22:04,240
going on the device tree is basically

628
00:22:01,679 --> 00:22:07,280
just used to insert some properties

629
00:22:04,240 --> 00:22:08,320
for linux to pi so linux knows that opti

630
00:22:07,280 --> 00:22:12,399
is available

631
00:22:08,320 --> 00:22:15,120
but stuff like memory sizes or available

632
00:22:12,400 --> 00:22:17,039
peripherals can all be passed from the

633
00:22:15,120 --> 00:22:19,840
device tree and opti already

634
00:22:17,039 --> 00:22:22,080
includes the possibility to include a

635
00:22:19,840 --> 00:22:24,000
device tree within opti itself

636
00:22:22,080 --> 00:22:26,080
so in theory you could do all the

637
00:22:24,000 --> 00:22:28,320
probing of devices from the device tree

638
00:22:26,080 --> 00:22:30,399
as it's done within linux at the moment

639
00:22:28,320 --> 00:22:32,480
and i would also like some more ci

640
00:22:30,400 --> 00:22:34,480
infrastructure to test each commit to

641
00:22:32,480 --> 00:22:37,360
optimaster for imx6

642
00:22:34,480 --> 00:22:37,760
because on the way here i tried to test

643
00:22:37,360 --> 00:22:40,479
the

644
00:22:37,760 --> 00:22:42,080
latest release which was like a week ago

645
00:22:40,480 --> 00:22:44,000
but unfortunately there was a last

646
00:22:42,080 --> 00:22:45,360
minute fix going in and my platform

647
00:22:44,000 --> 00:22:47,679
doesn't boot at the moment

648
00:22:45,360 --> 00:22:48,879
on the latest release so evidently we

649
00:22:47,679 --> 00:22:51,679
need some kind of

650
00:22:48,880 --> 00:22:53,440
ci there and i need to allocate some

651
00:22:51,679 --> 00:22:54,240
time to get platforms up and running to

652
00:22:53,440 --> 00:22:56,480
ensure

653
00:22:54,240 --> 00:22:58,000
that the platforms aren't again don't

654
00:22:56,480 --> 00:23:01,360
get broken again

655
00:22:58,000 --> 00:23:08,610
yeah so that's the talk and now i'd

656
00:23:01,360 --> 00:23:12,530
like to answer your questions

657
00:23:08,610 --> 00:23:12,530
[Applause]

658
00:23:17,010 --> 00:23:20,099
[Music]

659
00:23:20,840 --> 00:23:23,840
um

660
00:23:27,039 --> 00:23:33,520
yes so for imx6 platforms there's only

661
00:23:31,280 --> 00:23:34,960
this ddr firewall but i know that stm

662
00:23:33,520 --> 00:23:38,080
platforms have a

663
00:23:34,960 --> 00:23:40,559
very um have a more advanced

664
00:23:38,080 --> 00:23:42,720
method of assigning peripherals to the

665
00:23:40,559 --> 00:23:46,399
secure or normal world or the

666
00:23:42,720 --> 00:23:48,559
small cortex pro coprocessor and

667
00:23:46,400 --> 00:23:50,240
i i'm not entirely sure but i think

668
00:23:48,559 --> 00:23:52,240
there's a framework

669
00:23:50,240 --> 00:23:54,480
being talked about on how to coordinate

670
00:23:52,240 --> 00:23:54,480
this

671
00:23:56,080 --> 00:24:05,600
yes please

672
00:24:02,960 --> 00:24:06,720
yes and i was wondering when

673
00:24:05,600 --> 00:24:11,360
configuration time

674
00:24:06,720 --> 00:24:11,360
is this basically big time for

675
00:24:11,760 --> 00:24:15,520
yes this is so so all the configuration

676
00:24:13,919 --> 00:24:18,159
needs to be done at build time

677
00:24:15,520 --> 00:24:20,480
and in the case of this replay protected

678
00:24:18,159 --> 00:24:23,520
memory blocks

679
00:24:20,480 --> 00:24:25,600
thing you also need two opti binaries

680
00:24:23,520 --> 00:24:27,440
so you need one opti binary which is

681
00:24:25,600 --> 00:24:28,000
basically configured the same as the

682
00:24:27,440 --> 00:24:30,720
other one

683
00:24:28,000 --> 00:24:32,720
but includes this right key provisioning

684
00:24:30,720 --> 00:24:35,760
so it actually exchanges the key between

685
00:24:32,720 --> 00:24:37,840
the cpu and the emmc

686
00:24:35,760 --> 00:24:39,600
for manufacturing use so during

687
00:24:37,840 --> 00:24:41,360
manufacturing you would write the key

688
00:24:39,600 --> 00:24:41,760
and then afterwards deploy your normal

689
00:24:41,360 --> 00:24:43,840
opt

690
00:24:41,760 --> 00:24:46,799
which no longer does the key exchange so

691
00:24:43,840 --> 00:24:48,559
the key doesn't leak

692
00:24:46,799 --> 00:24:50,799
yes ahmed the first point would be

693
00:24:48,559 --> 00:24:55,039
something

694
00:24:50,799 --> 00:24:57,279
yes and you know there's

695
00:24:55,039 --> 00:24:59,679
some implementation discussion currently

696
00:24:57,279 --> 00:25:03,840
going on for opt but i have not

697
00:24:59,679 --> 00:25:03,840
looked deeply into yet into it yet

698
00:25:04,240 --> 00:25:07,200
other questions yes

699
00:25:11,440 --> 00:25:15,840
no i did not yet i just got this merged

700
00:25:14,799 --> 00:25:18,080
like

701
00:25:15,840 --> 00:25:18,959
two days ago or three days ago when i

702
00:25:18,080 --> 00:25:22,240
did the talk

703
00:25:18,960 --> 00:25:24,159
and i still have to verify that this

704
00:25:22,240 --> 00:25:26,640
that these dma accesses are now

705
00:25:24,159 --> 00:25:26,640
forbidden

706
00:25:27,279 --> 00:25:30,720
i will probably just hack the gpu driver

707
00:25:30,080 --> 00:25:33,678
to try

708
00:25:30,720 --> 00:25:35,279
uh an sdma request but you could also do

709
00:25:33,679 --> 00:25:40,000
probably do it

710
00:25:35,279 --> 00:25:42,960
using the urdma capabilities so the sdma

711
00:25:40,000 --> 00:25:44,320
firmware should be able to do dma

712
00:25:42,960 --> 00:25:48,559
transfers

713
00:25:44,320 --> 00:25:50,720
there so i i will test this and then i

714
00:25:48,559 --> 00:25:57,840
will submit more pull requests to fix

715
00:25:50,720 --> 00:25:57,840
this if it doesn't work

716
00:25:58,240 --> 00:26:03,200
no i unfortunately don't have open pcie

717
00:26:00,960 --> 00:26:03,679
ports on the imx 62l it's too small for

718
00:26:03,200 --> 00:26:06,320
that but

719
00:26:03,679 --> 00:26:07,520
that would be a proper a possibility on

720
00:26:06,320 --> 00:26:12,399
bigger platforms like

721
00:26:07,520 --> 00:26:15,120
imx6 quad which has a pcie port yeah

722
00:26:12,400 --> 00:26:15,120
other questions

723
00:26:21,760 --> 00:26:26,480
it's a part of of the socks so it's on

724
00:26:24,400 --> 00:26:30,240
the system itself it lives on the

725
00:26:26,480 --> 00:26:30,240
on the bus of the cpu

726
00:26:36,960 --> 00:26:39,840
thank you

