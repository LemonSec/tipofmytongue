1
00:00:05,920 --> 00:00:09,440
uh

2
00:00:06,319 --> 00:00:12,480
can you hear me okay all right uh

3
00:00:09,440 --> 00:00:13,040
yeah so um i'm gonna be talking today

4
00:00:12,480 --> 00:00:15,519
about

5
00:00:13,040 --> 00:00:17,359
a something that's probably running on

6
00:00:15,519 --> 00:00:18,640
every linux laptop and server as well

7
00:00:17,359 --> 00:00:20,880
which is a

8
00:00:18,640 --> 00:00:22,000
systemd and d bus so a little bit of

9
00:00:20,880 --> 00:00:26,080
background myself

10
00:00:22,000 --> 00:00:29,198
my name is leonid uh i work at dropbox

11
00:00:26,080 --> 00:00:30,560
on infrastructure team and does i deal a

12
00:00:29,199 --> 00:00:34,239
lot with linux and

13
00:00:30,560 --> 00:00:37,199
servers and all the infrastructure and

14
00:00:34,239 --> 00:00:37,599
one thing i keep noticing is that when i

15
00:00:37,200 --> 00:00:40,800
go

16
00:00:37,600 --> 00:00:42,559
to like servers we maintain i always see

17
00:00:40,800 --> 00:00:44,559
systemd bus running there

18
00:00:42,559 --> 00:00:45,680
so they're like systemd they manage new

19
00:00:44,559 --> 00:00:47,280
services

20
00:00:45,680 --> 00:00:49,039
but i was always curious like what is

21
00:00:47,280 --> 00:00:51,360
debuss what what's it doing

22
00:00:49,039 --> 00:00:52,559
um can i use it for something and i

23
00:00:51,360 --> 00:00:55,440
start looking into that

24
00:00:52,559 --> 00:00:56,320
a few months ago and uh like start

25
00:00:55,440 --> 00:00:59,519
exploring

26
00:00:56,320 --> 00:01:01,680
um can i do something with it

27
00:00:59,520 --> 00:01:04,080
can i use it for some of my services can

28
00:01:01,680 --> 00:01:07,520
i use it to

29
00:01:04,080 --> 00:01:10,640
programmatically do some tasks

30
00:01:07,520 --> 00:01:12,560
and uh yeah so this is kind of this talk

31
00:01:10,640 --> 00:01:13,760
is the result of this exploration really

32
00:01:12,560 --> 00:01:15,280
is to

33
00:01:13,760 --> 00:01:17,360
take a look at like what's going on

34
00:01:15,280 --> 00:01:20,080
there um so

35
00:01:17,360 --> 00:01:21,680
i'll start by just describing uh the

36
00:01:20,080 --> 00:01:24,720
scope of this

37
00:01:21,680 --> 00:01:27,759
and then go briefly through uh dbus

38
00:01:24,720 --> 00:01:31,200
and systemd and then

39
00:01:27,759 --> 00:01:33,920
see how really linear distributions

40
00:01:31,200 --> 00:01:34,479
laid out the configuration for that it's

41
00:01:33,920 --> 00:01:37,680
it's

42
00:01:34,479 --> 00:01:41,200
very shortly about that and then

43
00:01:37,680 --> 00:01:44,560
uh the main point here is to show

44
00:01:41,200 --> 00:01:46,399
how a go developer can interact with

45
00:01:44,560 --> 00:01:47,439
these services and build something out

46
00:01:46,399 --> 00:01:50,159
of that

47
00:01:47,439 --> 00:01:51,199
and at the end is sort of wrap up with

48
00:01:50,159 --> 00:01:54,479
is it worth it

49
00:01:51,200 --> 00:01:57,360
or like what is it good for um

50
00:01:54,479 --> 00:01:58,320
so yeah so be looking at systems

51
00:01:57,360 --> 00:02:02,560
programming so

52
00:01:58,320 --> 00:02:03,919
um this area uh as wikipedia has defined

53
00:02:02,560 --> 00:02:06,079
is

54
00:02:03,920 --> 00:02:09,440
software that provides services for

55
00:02:06,079 --> 00:02:13,120
other software so this is not

56
00:02:09,440 --> 00:02:15,200
um and applications not

57
00:02:13,120 --> 00:02:16,640
uh user-facing services this is more

58
00:02:15,200 --> 00:02:17,599
like a back-end infrastructure

59
00:02:16,640 --> 00:02:19,040
components

60
00:02:17,599 --> 00:02:20,640
and i'm going to be looking at go

61
00:02:19,040 --> 00:02:22,640
developer point of view so it's

62
00:02:20,640 --> 00:02:24,958
developed test debug cycle

63
00:02:22,640 --> 00:02:27,359
is to how to get productive with these

64
00:02:24,959 --> 00:02:29,599
tools with systemd and debuss

65
00:02:27,360 --> 00:02:31,920
not really how to configure systemd

66
00:02:29,599 --> 00:02:34,560
itself how to manage debuss how to

67
00:02:31,920 --> 00:02:36,480
manage containers etc and again this is

68
00:02:34,560 --> 00:02:40,000
modern linux so think about

69
00:02:36,480 --> 00:02:44,079
most stable distribution um

70
00:02:40,000 --> 00:02:47,040
linux distribution i used ubuntu 1804

71
00:02:44,080 --> 00:02:47,840
as an example here but i'm pretty sure

72
00:02:47,040 --> 00:02:51,359
fedora

73
00:02:47,840 --> 00:02:53,680
and other distributions they have the

74
00:02:51,360 --> 00:02:56,000
kind of similar setup which is standard

75
00:02:53,680 --> 00:02:59,599
so let's get started um

76
00:02:56,000 --> 00:03:03,120
what is dbus so first of all is a

77
00:02:59,599 --> 00:03:06,238
specification so freedesktop.org is a

78
00:03:03,120 --> 00:03:08,480
initiative as a linux desktop defines a

79
00:03:06,239 --> 00:03:11,920
set of standards around linux desktop

80
00:03:08,480 --> 00:03:15,040
so dbos came around 2003 so this is

81
00:03:11,920 --> 00:03:16,958
a very very long time ago so json came

82
00:03:15,040 --> 00:03:19,200
around this time so that you can just

83
00:03:16,959 --> 00:03:22,800
kind of put things in perspective

84
00:03:19,200 --> 00:03:24,399
and i sort of uh divide this

85
00:03:22,800 --> 00:03:26,720
specification in two parts

86
00:03:24,400 --> 00:03:28,000
one is core protocol which deals with a

87
00:03:26,720 --> 00:03:31,519
type system

88
00:03:28,000 --> 00:03:33,280
wire format and certain core pieces of

89
00:03:31,519 --> 00:03:35,680
the protocol and the second one is bus

90
00:03:33,280 --> 00:03:36,480
in the message bus abstraction this is

91
00:03:35,680 --> 00:03:39,200
where

92
00:03:36,480 --> 00:03:40,319
it's actually used as as a message bus

93
00:03:39,200 --> 00:03:42,798
supports naming

94
00:03:40,319 --> 00:03:44,560
uh well-known buses matches routing and

95
00:03:42,799 --> 00:03:47,120
standard interfaces so

96
00:03:44,560 --> 00:03:47,760
we'll be looking into that and there's

97
00:03:47,120 --> 00:03:50,400
also

98
00:03:47,760 --> 00:03:51,679
a reference implementation which is used

99
00:03:50,400 --> 00:03:55,280
pretty much everywhere

100
00:03:51,680 --> 00:03:57,760
lib debuss uh implements the

101
00:03:55,280 --> 00:03:59,519
core protocol part and debus daemon

102
00:03:57,760 --> 00:04:00,159
implements the dbos abstraction so this

103
00:03:59,519 --> 00:04:03,840
is what

104
00:04:00,159 --> 00:04:06,159
what you get on your fedora over ubuntu

105
00:04:03,840 --> 00:04:07,599
there's many alternative implementation

106
00:04:06,159 --> 00:04:10,159
of the core protocol there's

107
00:04:07,599 --> 00:04:12,399
sd bus from systemd there's goldibus

108
00:04:10,159 --> 00:04:14,480
which we'll be using today

109
00:04:12,400 --> 00:04:16,399
there are not that many implementations

110
00:04:14,480 --> 00:04:18,320
of message buses there's

111
00:04:16,399 --> 00:04:20,000
debuss broker but we're not going to

112
00:04:18,320 --> 00:04:23,120
look into that so

113
00:04:20,000 --> 00:04:24,800
uh what is systemd it's also it came

114
00:04:23,120 --> 00:04:29,280
around 2010

115
00:04:24,800 --> 00:04:32,560
10 years ago as a csv knit replacement

116
00:04:29,280 --> 00:04:34,159
but expanded much more so i'm only

117
00:04:32,560 --> 00:04:34,880
briefly touching this because there's

118
00:04:34,160 --> 00:04:38,000
like so

119
00:04:34,880 --> 00:04:40,400
much to go into that um again the goal

120
00:04:38,000 --> 00:04:42,800
here is to really show how to use go to

121
00:04:40,400 --> 00:04:46,239
interact with systemd

122
00:04:42,800 --> 00:04:47,680
and uh yeah many mainstream links

123
00:04:46,240 --> 00:04:49,199
distributions actually have that by

124
00:04:47,680 --> 00:04:51,440
default configured

125
00:04:49,199 --> 00:04:52,720
including there's a linux from scratch

126
00:04:51,440 --> 00:04:55,600
which is interesting

127
00:04:52,720 --> 00:04:56,080
it's basically just a document and it's

128
00:04:55,600 --> 00:04:59,280
even

129
00:04:56,080 --> 00:05:01,440
that has system diversion and also

130
00:04:59,280 --> 00:05:03,359
all these systemd apis they provide it

131
00:05:01,440 --> 00:05:06,080
through the bus itself so you can

132
00:05:03,360 --> 00:05:08,080
uh read the code of systemd to kind of

133
00:05:06,080 --> 00:05:11,758
understand what's exactly it's there but

134
00:05:08,080 --> 00:05:13,359
it's very powerful and to start with we

135
00:05:11,759 --> 00:05:16,800
need to first understand the

136
00:05:13,360 --> 00:05:18,800
um what is the how linux

137
00:05:16,800 --> 00:05:19,840
configures that how how distributions

138
00:05:18,800 --> 00:05:22,560
configure uh

139
00:05:19,840 --> 00:05:24,560
systemd and the bus and this is like

140
00:05:22,560 --> 00:05:26,320
we're going to be using today something

141
00:05:24,560 --> 00:05:28,880
called linux session

142
00:05:26,320 --> 00:05:29,599
this is really how linux distribution

143
00:05:28,880 --> 00:05:32,159
configures

144
00:05:29,600 --> 00:05:34,720
all the environment so here you can see

145
00:05:32,160 --> 00:05:39,840
the output of systemdc gls which

146
00:05:34,720 --> 00:05:39,840
uh so systemd partitions your

147
00:05:40,320 --> 00:05:46,240
user space into set of namespaces and

148
00:05:43,680 --> 00:05:48,479
it they're nicely grouped into hierarchy

149
00:05:46,240 --> 00:05:51,199
so here

150
00:05:48,479 --> 00:05:52,080
this is linux session hierarchy user at

151
00:05:51,199 --> 00:05:55,600
1000

152
00:05:52,080 --> 00:05:58,159
is basically what everyone would get if

153
00:05:55,600 --> 00:06:01,440
there is ssh on the on the basic

154
00:05:58,160 --> 00:06:04,960
linux this is this case is ubuntu

155
00:06:01,440 --> 00:06:06,719
and this is already enabled by default

156
00:06:04,960 --> 00:06:08,239
highlighted there are the two components

157
00:06:06,720 --> 00:06:11,440
you can see

158
00:06:08,240 --> 00:06:14,800
i have systemd manager running already

159
00:06:11,440 --> 00:06:18,880
so this is interesting because systemd

160
00:06:14,800 --> 00:06:20,479
runs can run many systemd's

161
00:06:18,880 --> 00:06:21,919
on the system so this is sort of like a

162
00:06:20,479 --> 00:06:24,479
delegation they

163
00:06:21,919 --> 00:06:26,560
they run a separate user manager for

164
00:06:24,479 --> 00:06:29,758
every user on the system

165
00:06:26,560 --> 00:06:31,840
um and you can see also uh debuzz daemon

166
00:06:29,759 --> 00:06:35,440
runs a separate called session bus

167
00:06:31,840 --> 00:06:37,599
uh again under generic user

168
00:06:35,440 --> 00:06:37,600
so

169
00:06:38,960 --> 00:06:42,400
and this is how it looks like from the

170
00:06:40,560 --> 00:06:45,199
process point of view like if

171
00:06:42,400 --> 00:06:46,080
i look all the processes um so i'm using

172
00:06:45,199 --> 00:06:49,199
vagrant here

173
00:06:46,080 --> 00:06:50,960
and generic ubuntu image

174
00:06:49,199 --> 00:06:53,120
around ps3 which shows me all the

175
00:06:50,960 --> 00:06:55,359
processes for user vagrant

176
00:06:53,120 --> 00:06:57,199
and you can see sshd bash and then the

177
00:06:55,360 --> 00:06:58,160
command but then the highlighted again i

178
00:06:57,199 --> 00:06:59,840
have a systemd

179
00:06:58,160 --> 00:07:01,280
and dbus so i haven't started that

180
00:06:59,840 --> 00:07:04,638
manually it was already

181
00:07:01,280 --> 00:07:06,080
there so it's there by default so i

182
00:07:04,639 --> 00:07:07,599
don't have to do anything also i don't

183
00:07:06,080 --> 00:07:09,599
need a route to do that

184
00:07:07,599 --> 00:07:10,880
so it's kind of the setup is ruthless

185
00:07:09,599 --> 00:07:13,680
sort of

186
00:07:10,880 --> 00:07:15,199
i don't need any extra permissions to do

187
00:07:13,680 --> 00:07:16,560
anything everything is already set up

188
00:07:15,199 --> 00:07:20,400
configured for me

189
00:07:16,560 --> 00:07:22,080
so from go point of view is

190
00:07:20,400 --> 00:07:23,440
it looks like this so we're going to be

191
00:07:22,080 --> 00:07:26,000
dealing with

192
00:07:23,440 --> 00:07:27,360
we're writing coding go process there on

193
00:07:26,000 --> 00:07:28,880
the left

194
00:07:27,360 --> 00:07:30,880
we're going to be using two libraries go

195
00:07:28,880 --> 00:07:33,360
d bus d bus

196
00:07:30,880 --> 00:07:35,440
and core os go systemd which is a

197
00:07:33,360 --> 00:07:39,120
library on top of goadibus

198
00:07:35,440 --> 00:07:41,440
it provides a more go

199
00:07:39,120 --> 00:07:43,360
kind of go flavored abstractions on top

200
00:07:41,440 --> 00:07:45,199
of dbos

201
00:07:43,360 --> 00:07:47,360
the central component is the bus demon

202
00:07:45,199 --> 00:07:50,240
itself that implements the message bus

203
00:07:47,360 --> 00:07:52,479
obstruction and it uses the reference

204
00:07:50,240 --> 00:07:55,120
implementation leave the bus

205
00:07:52,479 --> 00:07:56,800
on the right we have a systemd which

206
00:07:55,120 --> 00:07:59,120
uses a different implementation of the

207
00:07:56,800 --> 00:08:00,960
bus library called sd bus

208
00:07:59,120 --> 00:08:02,240
all these three components communicate

209
00:08:00,960 --> 00:08:06,000
through a

210
00:08:02,240 --> 00:08:08,319
shared linux domain socket um

211
00:08:06,000 --> 00:08:09,919
so it's it's a standard it's part of the

212
00:08:08,319 --> 00:08:11,199
specification it's called the session

213
00:08:09,919 --> 00:08:12,960
bus so basically

214
00:08:11,199 --> 00:08:14,560
it's it's a unix domain sockets like a

215
00:08:12,960 --> 00:08:16,400
single file on the file system not

216
00:08:14,560 --> 00:08:18,000
nothing special about it

217
00:08:16,400 --> 00:08:20,080
again i don't have to set it up it's

218
00:08:18,000 --> 00:08:22,319
already there on most of the default

219
00:08:20,080 --> 00:08:25,758
distributions

220
00:08:22,319 --> 00:08:26,879
so let's start with the bus so

221
00:08:25,759 --> 00:08:28,479
the thing about this when i started

222
00:08:26,879 --> 00:08:29,919
looking at that there is kind of quite

223
00:08:28,479 --> 00:08:33,760
steep learning curve here

224
00:08:29,919 --> 00:08:36,079
is if you compare that to grpc

225
00:08:33,760 --> 00:08:38,799
for example like most recent version

226
00:08:36,080 --> 00:08:41,360
grpc or even like a rest api

227
00:08:38,799 --> 00:08:42,240
in like rest you have a simple url to

228
00:08:41,360 --> 00:08:43,680
identify

229
00:08:42,240 --> 00:08:47,200
what what you want to do what kind of

230
00:08:43,679 --> 00:08:50,399
method you want to call and grpc sort of

231
00:08:47,200 --> 00:08:52,880
abstracts that all away from you um

232
00:08:50,399 --> 00:08:54,720
completely in dbus it's it's it's a bit

233
00:08:52,880 --> 00:08:57,040
different it's very

234
00:08:54,720 --> 00:08:58,080
it comes from the ages before web i

235
00:08:57,040 --> 00:09:00,160
would say

236
00:08:58,080 --> 00:09:01,360
uh so if you heard something called

237
00:09:00,160 --> 00:09:03,360
corba

238
00:09:01,360 --> 00:09:05,040
and this object-oriented abstractions

239
00:09:03,360 --> 00:09:06,160
from the 90s so this is where it's

240
00:09:05,040 --> 00:09:10,000
coming from

241
00:09:06,160 --> 00:09:10,719
um the terminology boils down to really

242
00:09:10,000 --> 00:09:13,279
like

243
00:09:10,720 --> 00:09:14,000
three things so you have a bus which is

244
00:09:13,279 --> 00:09:16,399
basically

245
00:09:14,000 --> 00:09:18,000
uh it's a process so you connect to

246
00:09:16,399 --> 00:09:19,920
we're gonna use a debus demon it's it's

247
00:09:18,000 --> 00:09:21,279
a process so it's it's kind of like a

248
00:09:19,920 --> 00:09:24,000
dress it could be

249
00:09:21,279 --> 00:09:25,519
unix socket it could be tcp which is not

250
00:09:24,000 --> 00:09:29,279
quite used often but

251
00:09:25,519 --> 00:09:32,880
still connection is identified by name

252
00:09:29,279 --> 00:09:32,880
you can think about it as a dns name

253
00:09:33,040 --> 00:09:37,040
the object and this is kind of the part

254
00:09:35,279 --> 00:09:39,279
of the object interface and the member

255
00:09:37,040 --> 00:09:40,880
this is really three things kind of

256
00:09:39,279 --> 00:09:42,399
combined you can think of it as a one

257
00:09:40,880 --> 00:09:44,480
thing so it's basically

258
00:09:42,399 --> 00:09:46,320
tells you what the kind of url is which

259
00:09:44,480 --> 00:09:49,120
is the object

260
00:09:46,320 --> 00:09:50,560
what type of inter method you're going

261
00:09:49,120 --> 00:09:52,080
to call and the method is

262
00:09:50,560 --> 00:09:53,680
has to be a part of some interface

263
00:09:52,080 --> 00:09:55,839
called a member here so

264
00:09:53,680 --> 00:09:57,359
object interface and a member you can

265
00:09:55,839 --> 00:09:59,760
think about as a url

266
00:09:57,360 --> 00:10:02,399
based in in a rest kind of json rpc or

267
00:09:59,760 --> 00:10:02,399
something like this

268
00:10:02,839 --> 00:10:07,279
um there are some tools uh again these

269
00:10:05,839 --> 00:10:10,079
tools are available

270
00:10:07,279 --> 00:10:11,600
by default on most of the linux

271
00:10:10,079 --> 00:10:14,479
distributions so you have d bus

272
00:10:11,600 --> 00:10:15,920
send it's convenient cli tool if you

273
00:10:14,480 --> 00:10:18,480
want to interact with the bus

274
00:10:15,920 --> 00:10:20,719
you can send a command here an example

275
00:10:18,480 --> 00:10:23,839
we can see i'm using session bus

276
00:10:20,720 --> 00:10:25,519
this is again like this is a user's

277
00:10:23,839 --> 00:10:27,279
private session that's configured

278
00:10:25,519 --> 00:10:31,120
everywhere and

279
00:10:27,279 --> 00:10:33,279
i'm calling a method on the default

280
00:10:31,120 --> 00:10:34,480
destination which is org for desktop

281
00:10:33,279 --> 00:10:36,880
debuss

282
00:10:34,480 --> 00:10:37,920
the object path is slash which is kind

283
00:10:36,880 --> 00:10:40,000
of root

284
00:10:37,920 --> 00:10:41,760
of the hierarchy and then the method is

285
00:10:40,000 --> 00:10:43,680
list names it shows me

286
00:10:41,760 --> 00:10:46,399
what what connections available on this

287
00:10:43,680 --> 00:10:48,239
bus so a cd bus ac systemd

288
00:10:46,399 --> 00:10:51,680
and then i see two private connections

289
00:10:48,240 --> 00:10:54,079
which come from the bus send itself

290
00:10:51,680 --> 00:10:55,839
there's another tool bus cuddle it's

291
00:10:54,079 --> 00:10:58,880
part of systemd is also available

292
00:10:55,839 --> 00:11:00,800
by default sparta systemd package

293
00:10:58,880 --> 00:11:02,720
it pretty much can do the same as d bus

294
00:11:00,800 --> 00:11:03,680
send but it's more like a terminology is

295
00:11:02,720 --> 00:11:06,640
a bit different so

296
00:11:03,680 --> 00:11:08,239
in the bus send you use a session in the

297
00:11:06,640 --> 00:11:11,040
bus cut will use user

298
00:11:08,240 --> 00:11:11,519
to kind of uh there are two commands

299
00:11:11,040 --> 00:11:14,240
three

300
00:11:11,519 --> 00:11:16,480
which lets you list all these object

301
00:11:14,240 --> 00:11:19,519
hierarchies that available under

302
00:11:16,480 --> 00:11:21,680
for certain service name there is also

303
00:11:19,519 --> 00:11:23,360
introspect that shows you what the

304
00:11:21,680 --> 00:11:26,719
actual interface is available

305
00:11:23,360 --> 00:11:28,320
what what can you do with that this is

306
00:11:26,720 --> 00:11:30,880
all useful we're going to be using this

307
00:11:28,320 --> 00:11:34,079
with systemd

308
00:11:30,880 --> 00:11:35,519
um so let's start with how how do you

309
00:11:34,079 --> 00:11:37,439
use that from go so

310
00:11:35,519 --> 00:11:39,440
how to use debug from go there's library

311
00:11:37,440 --> 00:11:40,880
go debuzz bus it's native go library

312
00:11:39,440 --> 00:11:42,560
there's no

313
00:11:40,880 --> 00:11:44,640
it doesn't depend on leap debuss there's

314
00:11:42,560 --> 00:11:47,199
no c go it's very kind of simple library

315
00:11:44,640 --> 00:11:51,040
in terms of it just does the

316
00:11:47,200 --> 00:11:53,519
message serialization visualization

317
00:11:51,040 --> 00:11:54,719
and provides some of the wrappers on top

318
00:11:53,519 --> 00:11:57,200
of that

319
00:11:54,720 --> 00:12:00,160
so what we have here is highlighted in

320
00:11:57,200 --> 00:12:02,399
uh you connect to session bus

321
00:12:00,160 --> 00:12:03,680
you create an object instantiate

322
00:12:02,399 --> 00:12:05,200
connection object is ba

323
00:12:03,680 --> 00:12:08,319
it identifies where you're going to be

324
00:12:05,200 --> 00:12:11,279
connecting to and then you call a method

325
00:12:08,320 --> 00:12:11,600
uh and then you need to deserialize the

326
00:12:11,279 --> 00:12:13,920
the

327
00:12:11,600 --> 00:12:14,880
the result so serialization in

328
00:12:13,920 --> 00:12:18,399
decentralization

329
00:12:14,880 --> 00:12:20,560
it uses reflection a lot so

330
00:12:18,399 --> 00:12:21,440
it's kind of like a bit of a pain point

331
00:12:20,560 --> 00:12:23,279
because

332
00:12:21,440 --> 00:12:24,560
that thing panicked on me a lot when i

333
00:12:23,279 --> 00:12:26,560
try to

334
00:12:24,560 --> 00:12:29,279
when you try to de-sterilize something

335
00:12:26,560 --> 00:12:32,319
in in the wrong format it's just panic

336
00:12:29,279 --> 00:12:35,519
so uh you have to be careful with that

337
00:12:32,320 --> 00:12:35,519
it's easy to make it panic

338
00:12:35,600 --> 00:12:39,680
so debus message format it's a binary

339
00:12:37,680 --> 00:12:41,920
format it's a

340
00:12:39,680 --> 00:12:42,719
kind of interesting one so you have

341
00:12:41,920 --> 00:12:45,439
every type

342
00:12:42,720 --> 00:12:45,760
release prefix with the ascii character

343
00:12:45,440 --> 00:12:48,720
so

344
00:12:45,760 --> 00:12:49,839
here they usually call it signature so

345
00:12:48,720 --> 00:12:52,800
for example

346
00:12:49,839 --> 00:12:54,399
yy this signature translates as y means

347
00:12:52,800 --> 00:12:57,760
byte

348
00:12:54,399 --> 00:13:01,360
uh u means you int a means array

349
00:12:57,760 --> 00:13:04,720
and parens means it's a struct so it's

350
00:13:01,360 --> 00:13:07,920
kind of easy to understand but yeah it's

351
00:13:04,720 --> 00:13:10,160
not what you see in uh very often these

352
00:13:07,920 --> 00:13:10,160
days

353
00:13:10,240 --> 00:13:16,480
how do you construct a message in go uh

354
00:13:13,600 --> 00:13:17,519
yeah the library has this message type

355
00:13:16,480 --> 00:13:19,760
has a type

356
00:13:17,519 --> 00:13:21,600
if you want to make a method call you

357
00:13:19,760 --> 00:13:24,399
call it type method call

358
00:13:21,600 --> 00:13:26,959
and then it takes a bunch of headers and

359
00:13:24,399 --> 00:13:29,920
headers really set the destination the

360
00:13:26,959 --> 00:13:30,800
uh what the method is what the interface

361
00:13:29,920 --> 00:13:33,680
is

362
00:13:30,800 --> 00:13:35,120
and then the body of the message is it

363
00:13:33,680 --> 00:13:37,839
looks very similar

364
00:13:35,120 --> 00:13:40,000
so all the messages they operate on this

365
00:13:37,839 --> 00:13:41,920
generic interface this is again like

366
00:13:40,000 --> 00:13:43,519
because it's all this reflection i find

367
00:13:41,920 --> 00:13:45,120
it hard to

368
00:13:43,519 --> 00:13:48,160
like it's very easy to make mistake and

369
00:13:45,120 --> 00:13:48,959
then uh this thing will panic or you'll

370
00:13:48,160 --> 00:13:53,360
get something

371
00:13:48,959 --> 00:13:53,359
not that you want it um but yeah

372
00:13:53,760 --> 00:13:57,839
so briefly about introspection so when

373
00:13:57,040 --> 00:14:00,079
you want to

374
00:13:57,839 --> 00:14:01,760
call some method in the bus you need to

375
00:14:00,079 --> 00:14:04,880
know which parameters

376
00:14:01,760 --> 00:14:06,000
it's going to take is going to take the

377
00:14:04,880 --> 00:14:08,560
way to actually

378
00:14:06,000 --> 00:14:10,639
implement that it's it uses xml so it's

379
00:14:08,560 --> 00:14:11,518
really it's a standard interface and you

380
00:14:10,639 --> 00:14:15,360
have to define

381
00:14:11,519 --> 00:14:16,800
this xml format the format is easy

382
00:14:15,360 --> 00:14:19,040
you have an interface and then you have

383
00:14:16,800 --> 00:14:22,240
a method then you list

384
00:14:19,040 --> 00:14:24,000
um your arguments

385
00:14:22,240 --> 00:14:26,399
so you can think about it as a sort of

386
00:14:24,000 --> 00:14:29,040
like if you use jrpc this is like what

387
00:14:26,399 --> 00:14:31,600
you define in protobufs

388
00:14:29,040 --> 00:14:33,040
the problem is that it doesn't generate

389
00:14:31,600 --> 00:14:35,760
any anything out of that

390
00:14:33,040 --> 00:14:36,319
so uh you still have to kind of code by

391
00:14:35,760 --> 00:14:40,480
hand

392
00:14:36,320 --> 00:14:43,199
manually uh all the

393
00:14:40,480 --> 00:14:45,199
the wrappers itself so if you want to

394
00:14:43,199 --> 00:14:46,560
export an object for example this is i

395
00:14:45,199 --> 00:14:50,000
want to run the bus service

396
00:14:46,560 --> 00:14:51,680
uh as a worker genetic worker

397
00:14:50,000 --> 00:14:53,360
export this object so first of all

398
00:14:51,680 --> 00:14:55,199
there's not like a request handler i

399
00:14:53,360 --> 00:14:57,279
just export the object

400
00:14:55,199 --> 00:14:58,319
and all the methods all the public

401
00:14:57,279 --> 00:15:01,279
methods

402
00:14:58,320 --> 00:15:02,399
uh will be available on the bus so three

403
00:15:01,279 --> 00:15:05,439
lines i

404
00:15:02,399 --> 00:15:07,279
export object i also need to export this

405
00:15:05,440 --> 00:15:09,040
xml definition

406
00:15:07,279 --> 00:15:10,320
and then i need to request a name which

407
00:15:09,040 --> 00:15:12,959
is kind of like a dns name

408
00:15:10,320 --> 00:15:15,360
under which name will be available my

409
00:15:12,959 --> 00:15:18,239
object

410
00:15:15,360 --> 00:15:18,800
and this is how it's implemented so you

411
00:15:18,240 --> 00:15:21,760
have to

412
00:15:18,800 --> 00:15:24,000
kind of hard code xml bit in your code

413
00:15:21,760 --> 00:15:25,600
and then

414
00:15:24,000 --> 00:15:27,680
the all the public method will be

415
00:15:25,600 --> 00:15:30,399
exported you can configure that but

416
00:15:27,680 --> 00:15:31,599
the point here is it's a regular go

417
00:15:30,399 --> 00:15:33,920
method

418
00:15:31,600 --> 00:15:36,320
the only difference is if you return an

419
00:15:33,920 --> 00:15:37,839
error which is quite common in go

420
00:15:36,320 --> 00:15:39,440
here you have to do different it has to

421
00:15:37,839 --> 00:15:42,880
be a debussed error

422
00:15:39,440 --> 00:15:42,880
so it's encoded properly

423
00:15:43,839 --> 00:15:47,040
there's another concept in the bus

424
00:15:46,079 --> 00:15:49,599
called signals

425
00:15:47,040 --> 00:15:51,199
it's implement one-to-many publish

426
00:15:49,600 --> 00:15:54,000
subscribe so this is where

427
00:15:51,199 --> 00:15:56,399
it gets to useful parts actually you can

428
00:15:54,000 --> 00:16:00,639
implement

429
00:15:56,399 --> 00:16:02,880
publish subscribe quite easily

430
00:16:00,639 --> 00:16:04,160
and it's async and you have to kind of

431
00:16:02,880 --> 00:16:06,240
filter which message

432
00:16:04,160 --> 00:16:07,199
suggests you want to get on the bus it's

433
00:16:06,240 --> 00:16:09,040
possible to get

434
00:16:07,199 --> 00:16:11,680
all the messages but yeah you have to

435
00:16:09,040 --> 00:16:14,719
configure that first

436
00:16:11,680 --> 00:16:15,439
um there are some best practices there i

437
00:16:14,720 --> 00:16:18,240
found these two

438
00:16:15,440 --> 00:16:18,800
nice pages one is a chrome os apparently

439
00:16:18,240 --> 00:16:21,600
either

440
00:16:18,800 --> 00:16:23,279
used or uses the bus for everything and

441
00:16:21,600 --> 00:16:25,600
they have this nice page where they say

442
00:16:23,279 --> 00:16:26,480
it's like base avoid every advanced

443
00:16:25,600 --> 00:16:28,399
feature of the bus

444
00:16:26,480 --> 00:16:30,240
avoid properties complex object

445
00:16:28,399 --> 00:16:32,240
hierarchies

446
00:16:30,240 --> 00:16:33,519
consider using protobufs instead of

447
00:16:32,240 --> 00:16:37,279
complex messages you

448
00:16:33,519 --> 00:16:39,279
have to deal with that xml definitions

449
00:16:37,279 --> 00:16:40,639
and don't use the bus service activation

450
00:16:39,279 --> 00:16:42,240
this is kind of i think it's a legacy

451
00:16:40,639 --> 00:16:46,959
feature but you can

452
00:16:42,240 --> 00:16:50,079
start a service through the bus oh yeah

453
00:16:46,959 --> 00:16:52,160
and then there's another article it's

454
00:16:50,079 --> 00:16:55,839
about how the version is essentially

455
00:16:52,160 --> 00:16:57,839
it's same as grpc once you made it

456
00:16:55,839 --> 00:16:59,360
an interface public you can't change it

457
00:16:57,839 --> 00:17:01,519
you can only extend it but you can't you

458
00:16:59,360 --> 00:17:04,959
can't really change the

459
00:17:01,519 --> 00:17:08,240
anything that's already available so

460
00:17:04,959 --> 00:17:09,919
let's go to systemd so we know a little

461
00:17:08,240 --> 00:17:13,760
bit about the bus

462
00:17:09,919 --> 00:17:16,480
um so systemd very powerful it's

463
00:17:13,760 --> 00:17:17,439
basically how the linux user space uses

464
00:17:16,480 --> 00:17:20,160
looks these days

465
00:17:17,439 --> 00:17:21,760
and to use it you have to understand the

466
00:17:20,160 --> 00:17:23,600
bus you can of course call the stop

467
00:17:21,760 --> 00:17:27,679
process you can exact

468
00:17:23,599 --> 00:17:30,080
and that's kind of st so yeah

469
00:17:27,679 --> 00:17:31,840
so debus interface it's very powerful

470
00:17:30,080 --> 00:17:35,039
there

471
00:17:31,840 --> 00:17:37,760
so systemd really high level up

472
00:17:35,039 --> 00:17:38,160
its system that operates in units it can

473
00:17:37,760 --> 00:17:40,640
run

474
00:17:38,160 --> 00:17:41,919
jobs that transition these units through

475
00:17:40,640 --> 00:17:45,919
a set of states

476
00:17:41,919 --> 00:17:46,960
so units are really stateful and uh

477
00:17:45,919 --> 00:17:48,880
changing of states

478
00:17:46,960 --> 00:17:50,160
you can set up the bus signals to

479
00:17:48,880 --> 00:17:52,000
receive all the

480
00:17:50,160 --> 00:17:54,559
um all the signals when you service

481
00:17:52,000 --> 00:17:57,679
startups shutdown something happens that

482
00:17:54,559 --> 00:17:59,120
um there are three commands really um to

483
00:17:57,679 --> 00:18:02,240
start exploring the api

484
00:17:59,120 --> 00:18:05,520
is the first one is tree at least

485
00:18:02,240 --> 00:18:08,400
all object hierarchy introspect

486
00:18:05,520 --> 00:18:09,520
see what's available what interface is

487
00:18:08,400 --> 00:18:12,880
available

488
00:18:09,520 --> 00:18:17,520
and then the last one is actually see

489
00:18:12,880 --> 00:18:17,520
which units implement what interfaces

490
00:18:18,080 --> 00:18:22,639
so how do you use that in go there is

491
00:18:20,000 --> 00:18:26,840
core so core os

492
00:18:22,640 --> 00:18:29,600
i think they this is the part of the

493
00:18:26,840 --> 00:18:32,559
um

494
00:18:29,600 --> 00:18:34,559
they were building a container engine on

495
00:18:32,559 --> 00:18:35,600
top of systemd and as part of this they

496
00:18:34,559 --> 00:18:39,039
built this library go

497
00:18:35,600 --> 00:18:39,918
go systemd um it's a wrapper on top of d

498
00:18:39,039 --> 00:18:42,320
bus

499
00:18:39,919 --> 00:18:43,120
it has some helpers but it at the

500
00:18:42,320 --> 00:18:46,320
essence is just

501
00:18:43,120 --> 00:18:46,639
it's a thing wrapper so very simple how

502
00:18:46,320 --> 00:18:48,480
to

503
00:18:46,640 --> 00:18:49,760
list all the units currently available

504
00:18:48,480 --> 00:18:53,280
in systemd

505
00:18:49,760 --> 00:18:55,120
um connect to the user connection

506
00:18:53,280 --> 00:18:56,559
so you don't have to use root for that

507
00:18:55,120 --> 00:18:58,479
so

508
00:18:56,559 --> 00:19:01,840
and then just call it list list units

509
00:18:58,480 --> 00:19:01,840
and this is super super easy

510
00:19:02,080 --> 00:19:05,120
how to create a transient unit and this

511
00:19:03,840 --> 00:19:07,280
is where it's actually

512
00:19:05,120 --> 00:19:08,719
like more like exploration area i'm

513
00:19:07,280 --> 00:19:12,080
trying to see

514
00:19:08,720 --> 00:19:12,080
can i use systemd to

515
00:19:12,320 --> 00:19:16,960
simplify some of the infrastructure

516
00:19:14,799 --> 00:19:18,080
related like very low level system level

517
00:19:16,960 --> 00:19:21,679
com

518
00:19:18,080 --> 00:19:24,080
automation i'm working on and the one

519
00:19:21,679 --> 00:19:25,679
nice thing is systemd has this concept

520
00:19:24,080 --> 00:19:28,799
of transient unit

521
00:19:25,679 --> 00:19:30,799
that's a unit created dynamically it's

522
00:19:28,799 --> 00:19:33,360
not persisted on disk

523
00:19:30,799 --> 00:19:34,320
and you can run it through cli system

524
00:19:33,360 --> 00:19:38,000
deprives you like

525
00:19:34,320 --> 00:19:42,000
systemd run user and

526
00:19:38,000 --> 00:19:44,640
you can run like an n command in a

527
00:19:42,000 --> 00:19:45,520
transit unit and then you can see all

528
00:19:44,640 --> 00:19:48,640
the

529
00:19:45,520 --> 00:19:48,639
the output of that

530
00:19:50,240 --> 00:19:58,080
um so i i have an example um

531
00:19:55,360 --> 00:19:58,559
this is how you do that in go uh very

532
00:19:58,080 --> 00:20:02,879
easy

533
00:19:58,559 --> 00:20:04,960
you connect to the bus uh

534
00:20:02,880 --> 00:20:06,400
then you have to create a job uh it's

535
00:20:04,960 --> 00:20:08,480
basically it's a

536
00:20:06,400 --> 00:20:10,320
you start a transit unit and it takes a

537
00:20:08,480 --> 00:20:11,120
list of properties and this is what you

538
00:20:10,320 --> 00:20:14,559
want

539
00:20:11,120 --> 00:20:15,199
to run under this unit this could be any

540
00:20:14,559 --> 00:20:17,120
command

541
00:20:15,200 --> 00:20:19,200
or it could be any service for example

542
00:20:17,120 --> 00:20:20,959
if you want to

543
00:20:19,200 --> 00:20:23,600
run a go playground or something like

544
00:20:20,960 --> 00:20:25,679
that you can start that and then

545
00:20:23,600 --> 00:20:27,360
you have to wait on the channel to when

546
00:20:25,679 --> 00:20:28,480
the job is completed so it means that

547
00:20:27,360 --> 00:20:32,399
the task

548
00:20:28,480 --> 00:20:34,559
or the service is uh activated

549
00:20:32,400 --> 00:20:36,400
so this is really wraps the talk and i

550
00:20:34,559 --> 00:20:39,760
have like pros and cons you can read

551
00:20:36,400 --> 00:20:39,760
through that but yeah this is the end

552
00:20:41,520 --> 00:20:44,960
yeah it's kind of yeah it's very stable

553
00:20:44,559 --> 00:20:48,080
but

554
00:20:44,960 --> 00:20:50,400
like the bus part is really

555
00:20:48,080 --> 00:20:51,840
um yeah there's a lot of legacy stuff

556
00:20:50,400 --> 00:20:53,440
and uh

557
00:20:51,840 --> 00:20:55,678
yeah this is a steep learning curve as

558
00:20:53,440 --> 00:20:55,679
well

559
00:20:57,760 --> 00:21:05,949
yeah this is it

560
00:21:02,390 --> 00:21:05,949
[Applause]

561
00:21:08,000 --> 00:21:10,080
you

