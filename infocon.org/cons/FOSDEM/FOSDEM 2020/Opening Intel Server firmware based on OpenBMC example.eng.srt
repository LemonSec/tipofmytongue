1
00:00:06,080 --> 00:00:10,240
hello my name is machi and together with

2
00:00:08,320 --> 00:00:12,400
shamek we'll tell you a presentation

3
00:00:10,240 --> 00:00:15,440
about opening intel server firmware

4
00:00:12,400 --> 00:00:18,240
based on openbx bmc example

5
00:00:15,440 --> 00:00:19,439
so uh the agenda first i will tell you a

6
00:00:18,240 --> 00:00:22,799
little bit about open

7
00:00:19,439 --> 00:00:24,320
bmc and open bmc history and overview

8
00:00:22,800 --> 00:00:26,880
uh then i will tell you what features

9
00:00:24,320 --> 00:00:29,359
are supported in open bmc

10
00:00:26,880 --> 00:00:30,880
and the architecture of high-level

11
00:00:29,359 --> 00:00:33,120
architecture of open bmc

12
00:00:30,880 --> 00:00:35,440
then we'll go to inter-specific features

13
00:00:33,120 --> 00:00:38,559
that are that are built on top of

14
00:00:35,440 --> 00:00:40,399
openbmc uh then i'll tell you how to get

15
00:00:38,559 --> 00:00:44,078
involved into the community

16
00:00:40,399 --> 00:00:47,840
and uh we'll give you some live demo

17
00:00:44,079 --> 00:00:50,719
so it's 1998

18
00:00:47,840 --> 00:00:52,320
and the new something new arrived in the

19
00:00:50,719 --> 00:00:54,160
data center world it's called

20
00:00:52,320 --> 00:00:56,000
it's called the baseboard management

21
00:00:54,160 --> 00:00:59,358
controller

22
00:00:56,000 --> 00:01:00,079
bmc and it's a separate chip located on

23
00:00:59,359 --> 00:01:02,800
the server

24
00:01:00,079 --> 00:01:04,720
server board that has multiple physical

25
00:01:02,800 --> 00:01:09,280
connections to

26
00:01:04,720 --> 00:01:11,439
multiple platform components

27
00:01:09,280 --> 00:01:12,320
it also has a dedicated firmware running

28
00:01:11,439 --> 00:01:15,279
on it

29
00:01:12,320 --> 00:01:16,960
and from the interesting part is that it

30
00:01:15,280 --> 00:01:20,080
had a dedicated nik

31
00:01:16,960 --> 00:01:20,798
cart for remote management the first

32
00:01:20,080 --> 00:01:23,360
version

33
00:01:20,799 --> 00:01:25,040
had some basic features like ipmi

34
00:01:23,360 --> 00:01:27,840
support event logging

35
00:01:25,040 --> 00:01:28,640
power control system watchdog timer and

36
00:01:27,840 --> 00:01:30,720
also

37
00:01:28,640 --> 00:01:33,200
oem specific features that each vendor

38
00:01:30,720 --> 00:01:33,200
delivered

39
00:01:34,000 --> 00:01:38,960
okay so it make a life of data center

40
00:01:37,360 --> 00:01:41,280
administrator a little bit easier

41
00:01:38,960 --> 00:01:43,199
because

42
00:01:41,280 --> 00:01:44,560
earlier he had to every time he had to

43
00:01:43,200 --> 00:01:47,040
physically go to the server

44
00:01:44,560 --> 00:01:47,920
and do something with it and now he can

45
00:01:47,040 --> 00:01:51,600
just

46
00:01:47,920 --> 00:01:54,479
log on to bmc web ui and

47
00:01:51,600 --> 00:01:55,839
and perform the same task there but the

48
00:01:54,479 --> 00:01:58,320
problem was that

49
00:01:55,840 --> 00:01:58,960
each vendor delivered their own firmware

50
00:01:58,320 --> 00:02:02,639
so

51
00:01:58,960 --> 00:02:06,240
uh not so in some cases

52
00:02:02,640 --> 00:02:06,880
still he had to go to the to the server

53
00:02:06,240 --> 00:02:10,000
room

54
00:02:06,880 --> 00:02:11,920
to the server to do something that

55
00:02:10,000 --> 00:02:14,400
because this vendor was not supporting

56
00:02:11,920 --> 00:02:19,440
it earlier

57
00:02:14,400 --> 00:02:22,640
okay so in 2015 openbmc arrived

58
00:02:19,440 --> 00:02:26,319
the idea was to create an open source

59
00:02:22,640 --> 00:02:28,640
bmc firmware stack

60
00:02:26,319 --> 00:02:30,480
i can i was not there but i can imagine

61
00:02:28,640 --> 00:02:32,480
there were two reasons to create it

62
00:02:30,480 --> 00:02:35,518
first of all customers were not really

63
00:02:32,480 --> 00:02:35,518
happy that there's a

64
00:02:35,599 --> 00:02:38,959
chip that is running some black box

65
00:02:37,680 --> 00:02:42,239
firmware on it

66
00:02:38,959 --> 00:02:44,879
and because it uh it has

67
00:02:42,239 --> 00:02:47,120
a great power over the platform and it

68
00:02:44,879 --> 00:02:47,840
had dedicated network interface cards

69
00:02:47,120 --> 00:02:50,560
that not

70
00:02:47,840 --> 00:02:52,879
in all cases was let's say behind the

71
00:02:50,560 --> 00:02:53,920
firewall so sometimes it was available

72
00:02:52,879 --> 00:02:55,840
externally

73
00:02:53,920 --> 00:02:57,679
it was very tempting for the hackers to

74
00:02:55,840 --> 00:02:59,440
attack the bmc

75
00:02:57,680 --> 00:03:01,840
so basically customers wanted to know

76
00:02:59,440 --> 00:03:04,400
what's going on on their bmc's

77
00:03:01,840 --> 00:03:06,879
and the second thing was that imagine

78
00:03:04,400 --> 00:03:09,840
there are two vendors of bmc firmware

79
00:03:06,879 --> 00:03:11,760
both of them are delivering the same

80
00:03:09,840 --> 00:03:13,280
features the same basic features

81
00:03:11,760 --> 00:03:15,040
and some additional officials but the

82
00:03:13,280 --> 00:03:16,000
basic features were pretty much the same

83
00:03:15,040 --> 00:03:17,840
so

84
00:03:16,000 --> 00:03:19,200
van der rey and vendor b were delivering

85
00:03:17,840 --> 00:03:21,360
rpmi support

86
00:03:19,200 --> 00:03:23,679
power management fan speed control and

87
00:03:21,360 --> 00:03:26,959
so etc etc so

88
00:03:23,680 --> 00:03:29,120
they i i can imagine that vendor rate

89
00:03:26,959 --> 00:03:30,480
for that it's maybe it's a little bit

90
00:03:29,120 --> 00:03:33,120
stupid to do

91
00:03:30,480 --> 00:03:34,798
do this when the competing company is

92
00:03:33,120 --> 00:03:35,440
also doing it so they went to them and

93
00:03:34,799 --> 00:03:37,840
say hey

94
00:03:35,440 --> 00:03:38,560
we will do ipmi you will do power

95
00:03:37,840 --> 00:03:41,760
management

96
00:03:38,560 --> 00:03:45,200
and fun control for example so uh

97
00:03:41,760 --> 00:03:48,000
the reasons were quite obvious and for

98
00:03:45,200 --> 00:03:48,958
and in 2015 two companies ibm and

99
00:03:48,000 --> 00:03:51,120
facebook

100
00:03:48,959 --> 00:03:52,080
decided to start the projects both of

101
00:03:51,120 --> 00:03:55,439
them were named

102
00:03:52,080 --> 00:03:58,000
open bmc uh the idea was the same

103
00:03:55,439 --> 00:03:59,439
but the implementation was different so

104
00:03:58,000 --> 00:04:01,599
uh

105
00:03:59,439 --> 00:04:03,120
i don't know exactly what happened later

106
00:04:01,599 --> 00:04:06,159
but finally the

107
00:04:03,120 --> 00:04:06,560
ibm initiative uh were able to gather

108
00:04:06,159 --> 00:04:11,359
more

109
00:04:06,560 --> 00:04:14,239
uh companies to join to join it

110
00:04:11,360 --> 00:04:16,160
so between 2015 and 2018 there was a

111
00:04:14,239 --> 00:04:20,239
rapid growth of the community

112
00:04:16,160 --> 00:04:21,759
and as a result in 2010 open bmc became

113
00:04:20,238 --> 00:04:25,359
a linux foundation uh

114
00:04:21,759 --> 00:04:28,479
project part of linux foundation project

115
00:04:25,360 --> 00:04:31,520
and in 2020 we have like 30 companies

116
00:04:28,479 --> 00:04:35,039
uh contributing to uh

117
00:04:31,520 --> 00:04:37,520
to this to the source code uh

118
00:04:35,040 --> 00:04:39,280
something around 140 repositories and a

119
00:04:37,520 --> 00:04:42,639
lot of email subscribers

120
00:04:39,280 --> 00:04:45,758
to the mailing list okay

121
00:04:42,639 --> 00:04:48,960
if it goes to feature support we have

122
00:04:45,759 --> 00:04:52,080
uh data center administrator can use uh

123
00:04:48,960 --> 00:04:54,000
web ui but they can also use redfish

124
00:04:52,080 --> 00:04:56,240
interface so redfish was something new

125
00:04:54,000 --> 00:04:58,320
it was created in 2014

126
00:04:56,240 --> 00:05:00,400
and the idea was to standardize the

127
00:04:58,320 --> 00:05:04,719
interface between each vendor

128
00:05:00,400 --> 00:05:07,599
so redfish created a protocol

129
00:05:04,720 --> 00:05:09,520
protocol the interface that was based on

130
00:05:07,600 --> 00:05:13,440
http

131
00:05:09,520 --> 00:05:15,198
and json and odata

132
00:05:13,440 --> 00:05:18,080
and they were releasing something called

133
00:05:15,199 --> 00:05:20,320
schemas so schemas

134
00:05:18,080 --> 00:05:22,080
was they were saying like for example if

135
00:05:20,320 --> 00:05:24,080
you want to

136
00:05:22,080 --> 00:05:26,240
you want to implement power management

137
00:05:24,080 --> 00:05:27,359
and redfish interface to it you have to

138
00:05:26,240 --> 00:05:29,680
do it in this specific

139
00:05:27,360 --> 00:05:31,440
this specific and only way so it was

140
00:05:29,680 --> 00:05:32,320
forcing standardization between each

141
00:05:31,440 --> 00:05:35,520
vendor

142
00:05:32,320 --> 00:05:38,320
uh so then we have host management

143
00:05:35,520 --> 00:05:40,320
ipmi to zero compliance sensor scanning

144
00:05:38,320 --> 00:05:42,880
and monitoring

145
00:05:40,320 --> 00:05:44,880
we can update bmc and bios firmware

146
00:05:42,880 --> 00:05:47,039
remotely

147
00:05:44,880 --> 00:05:48,240
we have for better management we have

148
00:05:47,039 --> 00:05:51,199
ssh

149
00:05:48,240 --> 00:05:53,199
serial overland and remote kvm we have

150
00:05:51,199 --> 00:05:56,240
user management with multiple roles

151
00:05:53,199 --> 00:05:58,560
certificates and ldap support

152
00:05:56,240 --> 00:05:59,360
and we have also virtual media that we

153
00:05:58,560 --> 00:06:01,039
can you know

154
00:05:59,360 --> 00:06:02,639
install for example operating new

155
00:06:01,039 --> 00:06:06,000
operating system remotely on

156
00:06:02,639 --> 00:06:08,240
on the host so this is just a top of

157
00:06:06,000 --> 00:06:10,080
the iceberg so there's a lot of other

158
00:06:08,240 --> 00:06:12,400
features that are not listed here

159
00:06:10,080 --> 00:06:13,919
and every day we we are working to add

160
00:06:12,400 --> 00:06:17,280
new features to

161
00:06:13,919 --> 00:06:17,840
do it if it goes to the architecture so

162
00:06:17,280 --> 00:06:21,440
we have

163
00:06:17,840 --> 00:06:22,799
our bmc chip and all his physical

164
00:06:21,440 --> 00:06:26,160
connections then there's

165
00:06:22,800 --> 00:06:27,360
a u-boot that is loading linux kernel

166
00:06:26,160 --> 00:06:29,120
and drivers

167
00:06:27,360 --> 00:06:30,560
and at the top we have the application

168
00:06:29,120 --> 00:06:34,319
layer so

169
00:06:30,560 --> 00:06:35,680
each feature is implemented as a service

170
00:06:34,319 --> 00:06:37,759
or multiple

171
00:06:35,680 --> 00:06:39,840
multiple services that are communicating

172
00:06:37,759 --> 00:06:42,800
with each other

173
00:06:39,840 --> 00:06:43,599
over debuss all of the services are

174
00:06:42,800 --> 00:06:46,720
managed by

175
00:06:43,600 --> 00:06:49,440
systemd and

176
00:06:46,720 --> 00:06:51,919
the whole distribution is built using

177
00:06:49,440 --> 00:06:51,919
yokto

178
00:06:52,160 --> 00:06:57,120
so now data center admins can still use

179
00:06:55,199 --> 00:06:59,360
the web ui for the day-to-day task

180
00:06:57,120 --> 00:07:00,160
on the single server but if they would

181
00:06:59,360 --> 00:07:04,479
like to you know

182
00:07:00,160 --> 00:07:06,560
uh do like tasks on multiple servers

183
00:07:04,479 --> 00:07:07,840
they will probably do some scripting

184
00:07:06,560 --> 00:07:11,039
around redfish because it's a

185
00:07:07,840 --> 00:07:11,039
standardized interface

186
00:07:11,520 --> 00:07:17,440
okay so companies are still

187
00:07:15,360 --> 00:07:20,240
adding some additional features on top

188
00:07:17,440 --> 00:07:22,880
of open bmc so intel is trying to

189
00:07:20,240 --> 00:07:25,520
uh build some features that will enable

190
00:07:22,880 --> 00:07:28,319
and enhance usage of its hardware

191
00:07:25,520 --> 00:07:30,400
so what we have it's the first one is

192
00:07:28,319 --> 00:07:33,520
out of band cpu crash dam collection

193
00:07:30,400 --> 00:07:35,679
so in case of critical platform error uh

194
00:07:33,520 --> 00:07:38,080
it will auto automatically gather across

195
00:07:35,680 --> 00:07:41,199
the crunched up data from the cpu

196
00:07:38,080 --> 00:07:42,560
decode it and publish it over redfish

197
00:07:41,199 --> 00:07:46,319
for the user

198
00:07:42,560 --> 00:07:48,960
uh it will help to debug

199
00:07:46,319 --> 00:07:50,479
cpu problems but also pci express

200
00:07:48,960 --> 00:07:53,840
devices and

201
00:07:50,479 --> 00:07:55,440
memory problems uh next thing is vmc

202
00:07:53,840 --> 00:07:58,318
autonomous sps dump so

203
00:07:55,440 --> 00:08:00,000
this will basically also in case of

204
00:07:58,319 --> 00:08:03,280
critical platform error will

205
00:08:00,000 --> 00:08:04,479
uh gather the debug data from management

206
00:08:03,280 --> 00:08:07,919
engines

207
00:08:04,479 --> 00:08:09,520
firmware and we'll uh publish it over

208
00:08:07,919 --> 00:08:11,280
redfish also

209
00:08:09,520 --> 00:08:12,960
and the third thing is out-of-band

210
00:08:11,280 --> 00:08:15,919
platform telemetry streaming so

211
00:08:12,960 --> 00:08:17,919
what we plan to do is to gather all

212
00:08:15,919 --> 00:08:19,039
possible telemetry that's available for

213
00:08:17,919 --> 00:08:22,799
bmc

214
00:08:19,039 --> 00:08:25,520
uh and stream it to third-party uh

215
00:08:22,800 --> 00:08:26,000
monitoring and analytics tools so

216
00:08:25,520 --> 00:08:28,799
hopefully

217
00:08:26,000 --> 00:08:30,560
it will give some more information about

218
00:08:28,800 --> 00:08:34,000
what was happening with the platform and

219
00:08:30,560 --> 00:08:36,159
why is why did it fail

220
00:08:34,000 --> 00:08:37,120
so if you like the idea and you want to

221
00:08:36,159 --> 00:08:41,279
join the

222
00:08:37,120 --> 00:08:44,320
community you have here all the links

223
00:08:41,279 --> 00:08:45,760
all the code defects and documentation

224
00:08:44,320 --> 00:08:47,680
is stored on github

225
00:08:45,760 --> 00:08:49,680
for communication we are using mailing

226
00:08:47,680 --> 00:08:52,800
list irc channel

227
00:08:49,680 --> 00:08:55,920
and rio channel and

228
00:08:52,800 --> 00:08:58,160
from my part this will be all so if

229
00:08:55,920 --> 00:09:00,800
you're interested if you would like your

230
00:08:58,160 --> 00:09:01,760
code run on big percentage of the

231
00:09:00,800 --> 00:09:04,399
servers

232
00:09:01,760 --> 00:09:05,360
soon then this is the way to do it and

233
00:09:04,399 --> 00:09:09,839
now

234
00:09:05,360 --> 00:09:09,839
xiaomi will show you a demo

235
00:09:34,839 --> 00:09:37,839
okay

236
00:09:46,080 --> 00:09:49,120
okay so

237
00:09:49,680 --> 00:09:53,760
let's start the demo part i will show

238
00:09:52,720 --> 00:09:56,640
you how to add a

239
00:09:53,760 --> 00:09:56,640
redfish schema

240
00:09:56,800 --> 00:10:02,240
so it is is it difficult

241
00:10:02,320 --> 00:10:09,200
yes but only at the beginning

242
00:10:06,399 --> 00:10:11,279
so uh at the beginning you you have to

243
00:10:09,200 --> 00:10:14,240
get familiarized with some new concepts

244
00:10:11,279 --> 00:10:14,240
yes so so

245
00:10:14,880 --> 00:10:20,720
it's a quite new uh quite a big amount

246
00:10:18,800 --> 00:10:24,640
of information that you have to

247
00:10:20,720 --> 00:10:27,600
to gather at the beginning so uh

248
00:10:24,640 --> 00:10:30,480
so the first time is not so easy but the

249
00:10:27,600 --> 00:10:34,560
next time and subsequent ones are

250
00:10:30,480 --> 00:10:37,600
really really easy and

251
00:10:34,560 --> 00:10:40,640
just a copy-paste thing

252
00:10:37,600 --> 00:10:42,720
okay for this demo i created a simple

253
00:10:40,640 --> 00:10:46,000
oem schema fortune generator

254
00:10:42,720 --> 00:10:49,360
uh i

255
00:10:46,000 --> 00:10:50,640
i made a service back end which serves

256
00:10:49,360 --> 00:10:54,640
uh fortunes or

257
00:10:50,640 --> 00:10:57,920
edges uh like the tool we know fortune

258
00:10:54,640 --> 00:11:01,279
uh we i will generate two kinds of

259
00:10:57,920 --> 00:11:03,680
fortunes related to computers and some

260
00:11:01,279 --> 00:11:03,680
questions

261
00:11:03,920 --> 00:11:10,959
oem schema will show those

262
00:11:07,680 --> 00:11:14,719
fortunes and there is also an action

263
00:11:10,959 --> 00:11:18,560
which makes to the the next

264
00:11:14,720 --> 00:11:18,560
fortune is shown so

265
00:11:19,120 --> 00:11:21,760
okay so

266
00:11:22,880 --> 00:11:30,959
so the theory first of all

267
00:11:27,680 --> 00:11:32,079
we have to of course read the

268
00:11:30,959 --> 00:11:36,079
documentation

269
00:11:32,079 --> 00:11:37,519
redfish is well documented on the dmtf

270
00:11:36,079 --> 00:11:41,439
page there is a

271
00:11:37,519 --> 00:11:44,720
redfish redfish

272
00:11:41,440 --> 00:11:48,079
page so take a look at the

273
00:11:44,720 --> 00:11:51,600
also take a look at on oh data standard

274
00:11:48,079 --> 00:11:54,800
it's a base of this it's the language of

275
00:11:51,600 --> 00:11:58,399
description of schema

276
00:11:54,800 --> 00:12:01,680
all schemas are written in

277
00:11:58,399 --> 00:12:04,720
csdl and json uh

278
00:12:01,680 --> 00:12:06,160
to to start uh take a look at the

279
00:12:04,720 --> 00:12:09,200
structure

280
00:12:06,160 --> 00:12:10,079
how the red whole redfish looks like

281
00:12:09,200 --> 00:12:12,880
what

282
00:12:10,079 --> 00:12:13,680
what are the links and where in order to

283
00:12:12,880 --> 00:12:16,399
do this

284
00:12:13,680 --> 00:12:17,680
effectively use mock-ups prepared for

285
00:12:16,399 --> 00:12:21,519
for that reason

286
00:12:17,680 --> 00:12:24,239
uh redfish uses rest api

287
00:12:21,519 --> 00:12:26,560
so also get get some knowledge on the

288
00:12:24,240 --> 00:12:26,560
rest

289
00:12:28,639 --> 00:12:35,600
implementation of redfish in open bmc

290
00:12:32,639 --> 00:12:36,320
is made in modern c plus plus d bus uses

291
00:12:35,600 --> 00:12:40,399
sdbas

292
00:12:36,320 --> 00:12:46,000
plus library always on synchronous so

293
00:12:40,399 --> 00:12:46,000
we use boost agio for most work

294
00:12:46,079 --> 00:12:52,239
hardware for for bmc is mostly

295
00:12:49,360 --> 00:12:53,120
based on processors with one core so

296
00:12:52,240 --> 00:12:56,160
please stick to

297
00:12:53,120 --> 00:12:57,600
one thread model if you want to make

298
00:12:56,160 --> 00:13:00,560
some

299
00:12:57,600 --> 00:13:04,160
threading use caroutines c plus pascal

300
00:13:00,560 --> 00:13:04,160
routines or boost coroutines

301
00:13:04,880 --> 00:13:13,279
okay so let's do the back end

302
00:13:09,600 --> 00:13:16,480
backend is based on debus

303
00:13:13,279 --> 00:13:20,399
interface between redfish and backend

304
00:13:16,480 --> 00:13:24,079
is via devas debuss is the main ipc

305
00:13:20,399 --> 00:13:24,079
in open bmc so

306
00:13:24,480 --> 00:13:28,880
it's good to to make the set the back

307
00:13:27,920 --> 00:13:35,839
end

308
00:13:28,880 --> 00:13:39,600
api coherent with redfish schema so uh

309
00:13:35,839 --> 00:13:42,399
create a service in the xyz xyz

310
00:13:39,600 --> 00:13:44,399
open bmc project namespace adding a

311
00:13:42,399 --> 00:13:47,040
service name at the end of course

312
00:13:44,399 --> 00:13:48,079
it's good to to expose object manager

313
00:13:47,040 --> 00:13:52,560
interface

314
00:13:48,079 --> 00:13:56,160
to get easier access to members

315
00:13:52,560 --> 00:14:00,319
if there are more of them

316
00:13:56,160 --> 00:14:03,360
after after the the backend is created

317
00:14:00,320 --> 00:14:06,880
of course it's good to create

318
00:14:03,360 --> 00:14:07,279
that service file and allow system data

319
00:14:06,880 --> 00:14:12,480
start

320
00:14:07,279 --> 00:14:12,480
and manage the the the service

321
00:14:13,600 --> 00:14:21,279
by systemd so

322
00:14:18,320 --> 00:14:21,279
let's move to the

323
00:14:21,600 --> 00:14:26,079
schema part and implementation of the

324
00:14:23,680 --> 00:14:29,120
schema so

325
00:14:26,079 --> 00:14:32,319
if anybody wants to make us

326
00:14:29,120 --> 00:14:34,560
on its own schema it's good to

327
00:14:32,320 --> 00:14:36,399
start a discussion on redfish forum

328
00:14:34,560 --> 00:14:38,800
because maybe somebody

329
00:14:36,399 --> 00:14:40,160
works on the same on the same feature

330
00:14:38,800 --> 00:14:42,839
and

331
00:14:40,160 --> 00:14:45,360
as redfish should be as generic as

332
00:14:42,839 --> 00:14:48,399
possible

333
00:14:45,360 --> 00:14:49,360
so you can join join efforts and make

334
00:14:48,399 --> 00:14:51,839
the feature

335
00:14:49,360 --> 00:14:51,839
together

336
00:14:53,279 --> 00:14:56,959
after the design is completed you have

337
00:14:55,360 --> 00:15:00,720
to write the

338
00:14:56,959 --> 00:15:04,399
the description of schema

339
00:15:00,720 --> 00:15:07,760
you can use documentation other schemas

340
00:15:04,399 --> 00:15:08,320
and there are a lot of of them there are

341
00:15:07,760 --> 00:15:12,000
also

342
00:15:08,320 --> 00:15:15,199
after the the xml part is completed

343
00:15:12,000 --> 00:15:18,880
you have to also generate json

344
00:15:15,199 --> 00:15:21,279
version and the files

345
00:15:18,880 --> 00:15:22,959
should be put in the proper location

346
00:15:21,279 --> 00:15:26,320
like the below

347
00:15:22,959 --> 00:15:29,119
what okay and implementation itself

348
00:15:26,320 --> 00:15:31,360
we have redfish core directory in bmc

349
00:15:29,120 --> 00:15:31,360
web

350
00:15:31,680 --> 00:15:37,439
bmc web serves redfish

351
00:15:34,880 --> 00:15:38,240
we named the file using snake case like

352
00:15:37,440 --> 00:15:42,000
the

353
00:15:38,240 --> 00:15:46,240
and using the name of the schema uh

354
00:15:42,000 --> 00:15:49,199
every each type of redfish node

355
00:15:46,240 --> 00:15:50,000
derives from the node class we have

356
00:15:49,199 --> 00:15:53,599
collection

357
00:15:50,000 --> 00:15:56,639
which lists our

358
00:15:53,600 --> 00:16:00,560
all our items uh in our in our

359
00:15:56,639 --> 00:16:03,920
of our type uh item uh which shows the

360
00:16:00,560 --> 00:16:07,359
properties of of a given item

361
00:16:03,920 --> 00:16:10,880
and and the last

362
00:16:07,360 --> 00:16:12,079
actions actions are used to for them for

363
00:16:10,880 --> 00:16:15,360
example

364
00:16:12,079 --> 00:16:20,319
i don't know start host or reset host

365
00:16:15,360 --> 00:16:20,320
uh using the redfish api so

366
00:16:20,959 --> 00:16:24,000
once we have the code we have to

367
00:16:23,199 --> 00:16:26,079
register with

368
00:16:24,000 --> 00:16:28,480
include our file and and place unique

369
00:16:26,079 --> 00:16:31,599
pointer on in the node list

370
00:16:28,480 --> 00:16:33,920
so and that's more or less everything

371
00:16:31,600 --> 00:16:35,839
we get a lot of helpers to to to

372
00:16:33,920 --> 00:16:39,360
simplify implementation

373
00:16:35,839 --> 00:16:41,839
message error classes to get feed

374
00:16:39,360 --> 00:16:42,959
to to show feedback adjacent utilities

375
00:16:41,839 --> 00:16:46,800
to to take

376
00:16:42,959 --> 00:16:46,800
parameters from the rest

377
00:16:47,279 --> 00:16:53,199
lots of boilerplate code i said it's

378
00:16:50,959 --> 00:16:54,160
more or less copy-paste programming just

379
00:16:53,199 --> 00:16:56,160
few lines of

380
00:16:54,160 --> 00:16:57,439
implementation generic implementation

381
00:16:56,160 --> 00:17:01,040
and after

382
00:16:57,440 --> 00:17:03,920
at the at the end it's important to to

383
00:17:01,040 --> 00:17:07,039
make compatibility check whether the our

384
00:17:03,920 --> 00:17:19,839
schema complies with standard

385
00:17:07,039 --> 00:17:19,839
okay so let's start a code walkthrough

386
00:17:24,959 --> 00:17:29,120
okay so this is how the description of

387
00:17:28,079 --> 00:17:33,280
the

388
00:17:29,120 --> 00:17:38,320
schema looks like we have our fortune

389
00:17:33,280 --> 00:17:38,320
property there is an action and

390
00:17:40,480 --> 00:17:47,760
that's it for now here we have

391
00:17:44,840 --> 00:17:51,600
as yes it's uh

392
00:17:47,760 --> 00:17:51,600
it's our back end so

393
00:17:55,200 --> 00:17:58,320
the back end looks like

394
00:17:58,400 --> 00:18:01,840
i'm sorry

395
00:18:03,120 --> 00:18:07,199
okay so at the bottom

396
00:18:07,760 --> 00:18:11,280
at the bottom there is a sd bus

397
00:18:09,520 --> 00:18:15,840
initialization

398
00:18:11,280 --> 00:18:15,840
i make it bigger

399
00:18:19,760 --> 00:18:28,080
okay as the debus debus initialization

400
00:18:24,320 --> 00:18:31,678
we create a project object uh

401
00:18:28,080 --> 00:18:34,559
and using as your run

402
00:18:31,679 --> 00:18:37,120
once the object when we do the run the

403
00:18:34,559 --> 00:18:37,120
object is

404
00:18:38,160 --> 00:18:40,880
is created

405
00:18:41,200 --> 00:18:44,640
here we register the service in the

406
00:18:43,600 --> 00:18:48,240
debuss

407
00:18:44,640 --> 00:18:48,240
we add some interfaces

408
00:18:48,799 --> 00:18:51,280
let's see

409
00:18:52,240 --> 00:19:00,400
a little below okay fortune property

410
00:18:57,200 --> 00:19:00,400
and generate method

411
00:19:00,880 --> 00:19:05,120
it's the same as the schema schema

412
00:19:03,679 --> 00:19:08,559
description

413
00:19:05,120 --> 00:19:10,239
so let's move to the implementation of

414
00:19:08,559 --> 00:19:13,280
redfish schema so

415
00:19:10,240 --> 00:19:13,280
first collection

416
00:19:14,880 --> 00:19:18,559
here you have the path in the in the

417
00:19:17,760 --> 00:19:21,840
tree

418
00:19:18,559 --> 00:19:24,639
let's maybe

419
00:19:21,840 --> 00:19:26,720
do this bigger okay here we set the

420
00:19:24,640 --> 00:19:30,320
permissions for the

421
00:19:26,720 --> 00:19:33,919
for for the the item

422
00:19:30,320 --> 00:19:37,760
there is to get implementation

423
00:19:33,919 --> 00:19:40,799
as i said it's red so we have get method

424
00:19:37,760 --> 00:19:43,840
we just create some some data

425
00:19:40,799 --> 00:19:48,240
for the schema which are

426
00:19:43,840 --> 00:19:48,240
obligatory and then

427
00:19:48,320 --> 00:19:53,840
then we put some information inside

428
00:19:54,400 --> 00:19:58,720
so here we take the the items from the

429
00:19:57,280 --> 00:20:00,960
from the debuss it's a it's a

430
00:19:58,720 --> 00:20:03,919
it's all it's all in the bus

431
00:20:00,960 --> 00:20:07,200
[Music]

432
00:20:03,919 --> 00:20:09,120
debus callbacks here we put the

433
00:20:07,200 --> 00:20:12,000
information and

434
00:20:09,120 --> 00:20:12,000
that's that's it

435
00:20:12,240 --> 00:20:18,880
here is the item it's more

436
00:20:15,360 --> 00:20:22,240
it looks like the the collection

437
00:20:18,880 --> 00:20:26,559
but the information is quite

438
00:20:22,240 --> 00:20:26,559
different because you have

439
00:20:26,720 --> 00:20:32,960
the data and here is the action

440
00:20:29,760 --> 00:20:36,400
plus and somewhere

441
00:20:32,960 --> 00:20:38,240
somewhere here we take the information

442
00:20:36,400 --> 00:20:41,840
from the from the schema and

443
00:20:38,240 --> 00:20:46,320
put it oh yes it's here put it inside

444
00:20:41,840 --> 00:20:46,320
uh inside the the result json

445
00:20:47,039 --> 00:20:53,360
okay and the last one

446
00:20:50,159 --> 00:20:57,039
action note it looks almost the same but

447
00:20:53,360 --> 00:21:00,959
here we have post method

448
00:20:57,039 --> 00:21:04,480
actions uses post rest posts so

449
00:21:00,960 --> 00:21:09,039
so implementation we implement post

450
00:21:04,480 --> 00:21:09,039
here okay so let's move on to

451
00:21:09,360 --> 00:21:19,039
the web browser here is the root note

452
00:21:17,270 --> 00:21:22,240
[Music]

453
00:21:19,039 --> 00:21:27,520
the root note there is a place when

454
00:21:22,240 --> 00:21:27,520
i put the oem our oem schema

455
00:21:27,760 --> 00:21:33,440
so let's take a look system

456
00:21:31,520 --> 00:21:34,559
it's called it's a collection of systems

457
00:21:33,440 --> 00:21:39,200
only one

458
00:21:34,559 --> 00:21:39,200
systems available of course

459
00:21:41,200 --> 00:21:46,640
oh here is our fortune generator let's

460
00:21:44,080 --> 00:21:46,639
click on it

461
00:21:47,520 --> 00:21:51,760
yes and we have fortune questions

462
00:21:49,440 --> 00:21:54,880
fortune fortune computer

463
00:21:51,760 --> 00:21:58,080
let's click that one

464
00:21:54,880 --> 00:22:01,039
okay there is a fortune

465
00:21:58,080 --> 00:22:01,039
and right now

466
00:22:06,559 --> 00:22:13,918
let's generate the post the post

467
00:22:10,480 --> 00:22:17,360
here is the result 204

468
00:22:13,919 --> 00:22:20,720
no content it's okay and

469
00:22:17,360 --> 00:22:23,840
after we reload it yes there is another

470
00:22:20,720 --> 00:22:27,520
fortune so

471
00:22:23,840 --> 00:22:30,799
and that's that's all

472
00:22:27,520 --> 00:22:30,799
any questions to both parts

473
00:22:33,679 --> 00:22:36,799
are they is there any plans to support

474
00:22:35,360 --> 00:22:40,080
the secure

475
00:22:36,799 --> 00:22:44,639
configuration enrollment

476
00:22:40,080 --> 00:22:47,678
uh the question is

477
00:22:44,640 --> 00:22:51,360
whether there is a

478
00:22:47,679 --> 00:22:53,679
plan to to make a security successful

479
00:22:51,360 --> 00:22:54,479
secured yes secure but implemented in

480
00:22:53,679 --> 00:22:56,960
open bmc

481
00:22:54,480 --> 00:22:57,919
uh that's not uh exactly the question i

482
00:22:56,960 --> 00:23:01,919
can answer

483
00:22:57,919 --> 00:23:05,280
because uh i just uh make some

484
00:23:01,919 --> 00:23:09,840
you know other areas of the open bmc so

485
00:23:05,280 --> 00:23:09,840
so not exactly

486
00:23:14,400 --> 00:23:23,840
no idea

487
00:23:34,840 --> 00:23:38,000
is no

488
00:23:36,320 --> 00:23:40,320
i don't think there are any plans right

489
00:23:38,000 --> 00:23:42,080
now to do it uh but

490
00:23:40,320 --> 00:23:44,080
i know there are there are plans to add

491
00:23:42,080 --> 00:23:45,600
some additional security features to it

492
00:23:44,080 --> 00:23:46,799
i'm not sure if the secure boot will be

493
00:23:45,600 --> 00:23:51,840
also

494
00:23:46,799 --> 00:23:51,840
involved let's say

495
00:23:57,840 --> 00:24:01,120
but there has been this long-standing

496
00:23:59,679 --> 00:24:04,640
unresolved issue

497
00:24:01,120 --> 00:24:07,279
between the umc and

498
00:24:04,640 --> 00:24:09,039
trusted computing so basically we have a

499
00:24:07,279 --> 00:24:11,360
whole engine underneath

500
00:24:09,039 --> 00:24:13,679
it doesn't matter what you measure

501
00:24:11,360 --> 00:24:16,639
upstairs in the operating system

502
00:24:13,679 --> 00:24:17,279
the bmc canvas we pull the rug under

503
00:24:16,640 --> 00:24:19,520
your

504
00:24:17,279 --> 00:24:20,799
operation because you're very powerful

505
00:24:19,520 --> 00:24:24,158
at this level so

506
00:24:20,799 --> 00:24:26,639
for years the mentions please

507
00:24:24,159 --> 00:24:28,240
at least signal from the pmc that you're

508
00:24:26,640 --> 00:24:30,080
changing the configuration

509
00:24:28,240 --> 00:24:31,679
so we know this up there in the

510
00:24:30,080 --> 00:24:32,480
measurement modules of the operating

511
00:24:31,679 --> 00:24:35,039
system

512
00:24:32,480 --> 00:24:36,400
is there any initiative and this has

513
00:24:35,039 --> 00:24:39,200
been now we've worked in

514
00:24:36,400 --> 00:24:40,159
under the open license as someone raised

515
00:24:39,200 --> 00:24:42,720
to issue

516
00:24:40,159 --> 00:24:47,840
and are there any interfaces in order to

517
00:24:42,720 --> 00:24:47,840
get this result

518
00:24:48,080 --> 00:24:51,360
as far as i know there are already plans

519
00:24:50,960 --> 00:24:53,360
uh

520
00:24:51,360 --> 00:24:55,918
i'm not sure this will ask answer your

521
00:24:53,360 --> 00:24:58,959
question but there are plans to

522
00:24:55,919 --> 00:25:00,640
make bmc as a root of trust of the

523
00:24:58,960 --> 00:25:03,840
platform so basically

524
00:25:00,640 --> 00:25:06,080
bmc will be the let's say component that

525
00:25:03,840 --> 00:25:06,080
will

526
00:25:06,240 --> 00:25:11,279
say check all the all the humor on the

527
00:25:08,799 --> 00:25:11,279
platform

528
00:25:13,200 --> 00:25:20,559
the question was uh the question was

529
00:25:17,679 --> 00:25:22,000
the question was is there an integration

530
00:25:20,559 --> 00:25:24,799
planned or existing

531
00:25:22,000 --> 00:25:26,400
between bmc on the one hand and trusted

532
00:25:24,799 --> 00:25:29,440
computing

533
00:25:26,400 --> 00:25:29,440
stuff for operating

534
00:25:30,080 --> 00:25:43,840
okay so

535
00:25:33,840 --> 00:25:43,840
sorry it's hard question to repeat

536
00:25:48,000 --> 00:25:51,079
[Music]

537
00:25:53,520 --> 00:25:57,520
so yeah bm open bmc is communicating

538
00:25:57,120 --> 00:26:00,559
with

539
00:25:57,520 --> 00:26:03,918
uh if the question was

540
00:26:00,559 --> 00:26:07,760
is open bmc is supporting

541
00:26:03,919 --> 00:26:08,960
intel sps addition so uh openvmc is

542
00:26:07,760 --> 00:26:12,080
communicating with

543
00:26:08,960 --> 00:26:14,480
intel sps currently so

544
00:26:12,080 --> 00:26:18,240
this is the let's say only point of

545
00:26:14,480 --> 00:26:18,240
contact the ipmi interface

546
00:26:19,919 --> 00:26:30,109
thank you

547
00:26:25,550 --> 00:26:30,109
[Applause]

548
00:26:33,520 --> 00:26:35,600
you

