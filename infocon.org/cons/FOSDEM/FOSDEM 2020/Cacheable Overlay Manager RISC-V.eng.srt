1
00:00:05,040 --> 00:00:09,040
hello everyone

2
00:00:06,000 --> 00:00:10,160
my name is of china i'm working at

3
00:00:09,040 --> 00:00:12,079
wrestling digital

4
00:00:10,160 --> 00:00:14,240
for the next generation platform

5
00:00:12,080 --> 00:00:16,240
technologist at the cto

6
00:00:14,240 --> 00:00:18,000
my team is leading a female toolchain

7
00:00:16,239 --> 00:00:20,640
efforts for risk 5

8
00:00:18,000 --> 00:00:22,480
and today i want to present you a

9
00:00:20,640 --> 00:00:23,039
feature that we are open sourcing it's

10
00:00:22,480 --> 00:00:25,599
called

11
00:00:23,039 --> 00:00:27,439
cacheable overlay manager for s5 in

12
00:00:25,599 --> 00:00:30,560
short we call it comov

13
00:00:27,439 --> 00:00:31,279
it's a software paging mechanism which

14
00:00:30,560 --> 00:00:34,239
we

15
00:00:31,279 --> 00:00:35,760
i will introduce in a second so the

16
00:00:34,239 --> 00:00:37,599
agenda for today is

17
00:00:35,760 --> 00:00:38,879
i will talk a little bit about solving

18
00:00:37,600 --> 00:00:42,239
code space limitation

19
00:00:38,879 --> 00:00:44,559
with software is a small introduction

20
00:00:42,239 --> 00:00:45,760
some basic concepts and use cases for

21
00:00:44,559 --> 00:00:47,360
this feature

22
00:00:45,760 --> 00:00:48,800
the building blocks that we need in

23
00:00:47,360 --> 00:00:51,120
order to make this happen

24
00:00:48,800 --> 00:00:53,839
on software and tool chains and the

25
00:00:51,120 --> 00:00:53,839
deployments

26
00:00:54,640 --> 00:00:59,359
let's start with short introduction so

27
00:00:57,440 --> 00:01:00,960
on the early days of computing

28
00:00:59,359 --> 00:01:04,239
there was a technique to load code on

29
00:01:00,960 --> 00:01:06,159
runtime on the moment it was needed

30
00:01:04,239 --> 00:01:08,320
actually one of the first example we can

31
00:01:06,159 --> 00:01:10,000
see is by nasa using this technique

32
00:01:08,320 --> 00:01:11,439
on the early days of shuttle flight

33
00:01:10,000 --> 00:01:14,240
control systems

34
00:01:11,439 --> 00:01:15,758
when the code itself was replaced betw

35
00:01:14,240 --> 00:01:17,199
from the moment uh

36
00:01:15,759 --> 00:01:19,040
there was the launch sequence and then

37
00:01:17,200 --> 00:01:20,479
there is the ob sequence and the code

38
00:01:19,040 --> 00:01:22,960
itself has changed

39
00:01:20,479 --> 00:01:23,840
so this is a a well-known technique

40
00:01:22,960 --> 00:01:27,119
we're just

41
00:01:23,840 --> 00:01:29,600
reviving it and this technique

42
00:01:27,119 --> 00:01:30,960
was called overlay it gave his easy

43
00:01:29,600 --> 00:01:34,000
interface to the user

44
00:01:30,960 --> 00:01:34,798
the software engineer there was no need

45
00:01:34,000 --> 00:01:38,240
for any

46
00:01:34,799 --> 00:01:40,000
complex outdoor ips like mmu etc

47
00:01:38,240 --> 00:01:41,360
and it was traded with the toolchain and

48
00:01:40,000 --> 00:01:44,479
the firmware itself

49
00:01:41,360 --> 00:01:45,200
today iot devices have the same problem

50
00:01:44,479 --> 00:01:46,720
with memory

51
00:01:45,200 --> 00:01:48,560
they have a very small footprint of

52
00:01:46,720 --> 00:01:51,439
memory and

53
00:01:48,560 --> 00:01:52,399
they need some some solution alongside

54
00:01:51,439 --> 00:01:55,279
reduced five

55
00:01:52,399 --> 00:01:57,520
issues with code density uh it just

56
00:01:55,280 --> 00:02:00,079
bring up the the usage of let's use

57
00:01:57,520 --> 00:02:00,079
overlay

58
00:02:01,520 --> 00:02:07,520
some basic concepts

59
00:02:04,560 --> 00:02:08,959
okay so the basic concept is like there

60
00:02:07,520 --> 00:02:11,519
is a

61
00:02:08,959 --> 00:02:12,480
there is an engine in the middle of the

62
00:02:11,520 --> 00:02:13,920
screen here

63
00:02:12,480 --> 00:02:16,238
this engine is running on the fast

64
00:02:13,920 --> 00:02:18,319
memory and it's uh

65
00:02:16,239 --> 00:02:19,440
responsible to decide what to be loaded

66
00:02:18,319 --> 00:02:20,319
and what not to be loaded from the

67
00:02:19,440 --> 00:02:22,720
storage device

68
00:02:20,319 --> 00:02:23,440
on the right which is the slow memory it

69
00:02:22,720 --> 00:02:26,879
can be

70
00:02:23,440 --> 00:02:28,640
whatever storage you wish

71
00:02:26,879 --> 00:02:30,079
and then you decide what to load into

72
00:02:28,640 --> 00:02:33,920
the fast memory

73
00:02:30,080 --> 00:02:36,879
to the sr we call it a cache area

74
00:02:33,920 --> 00:02:37,679
we call it in a cache area uh or nip and

75
00:02:36,879 --> 00:02:39,760
this is uh

76
00:02:37,680 --> 00:02:42,160
where uh the code is running according

77
00:02:39,760 --> 00:02:46,079
to the running flow

78
00:02:42,160 --> 00:02:48,319
the main engine uh workload is to invoke

79
00:02:46,080 --> 00:02:51,840
the overlay calls and also to decide

80
00:02:48,319 --> 00:02:51,839
what to evict and what to load

81
00:02:55,920 --> 00:02:59,839
now let's look how it looks today for

82
00:02:58,239 --> 00:03:01,280
just normal function

83
00:02:59,840 --> 00:03:03,680
so for a normal function where there's

84
00:03:01,280 --> 00:03:05,599
above and full full calling bar then the

85
00:03:03,680 --> 00:03:08,400
tool chain will generate a jump to bow

86
00:03:05,599 --> 00:03:10,000
this is by the way an instruction for s5

87
00:03:08,400 --> 00:03:11,200
and now it looks when you're using an

88
00:03:10,000 --> 00:03:12,720
overlay

89
00:03:11,200 --> 00:03:14,159
so when you're using an overlay all what

90
00:03:12,720 --> 00:03:15,120
is needed from the user just to put an

91
00:03:14,159 --> 00:03:16,879
attribute saying

92
00:03:15,120 --> 00:03:18,319
my function is an overlay and then i

93
00:03:16,879 --> 00:03:20,319
write this function as as it is

94
00:03:18,319 --> 00:03:21,359
foo is calling baron that's it but

95
00:03:20,319 --> 00:03:23,679
beneath that

96
00:03:21,360 --> 00:03:25,120
the toolchain will generate a token or

97
00:03:23,680 --> 00:03:28,640
descriptor as we call it

98
00:03:25,120 --> 00:03:29,599
here and push it into a jump address

99
00:03:28,640 --> 00:03:31,920
that we are

100
00:03:29,599 --> 00:03:32,640
entering the common of the engine itself

101
00:03:31,920 --> 00:03:34,798
so

102
00:03:32,640 --> 00:03:36,159
inside this engine the engine itself

103
00:03:34,799 --> 00:03:38,239
will decide what to load

104
00:03:36,159 --> 00:03:40,239
while it will pass this token and

105
00:03:38,239 --> 00:03:41,120
understand where it is where it needs to

106
00:03:40,239 --> 00:03:43,360
be loaded

107
00:03:41,120 --> 00:03:44,319
etc and another thing that's very

108
00:03:43,360 --> 00:03:46,480
important to say that

109
00:03:44,319 --> 00:03:47,760
once we are inside an overlay function

110
00:03:46,480 --> 00:03:49,840
then all the calling

111
00:03:47,760 --> 00:03:51,760
for functions and all the colors going

112
00:03:49,840 --> 00:03:53,680
back to the function

113
00:03:51,760 --> 00:03:55,920
have to run to the engine that's because

114
00:03:53,680 --> 00:03:58,560
when you're coming back from a function

115
00:03:55,920 --> 00:04:00,000
sometimes your color can be evicted it

116
00:03:58,560 --> 00:04:01,840
was not there anymore or

117
00:04:00,000 --> 00:04:03,280
it got moved that's why you're going

118
00:04:01,840 --> 00:04:05,200
back to the engine to decide

119
00:04:03,280 --> 00:04:06,959
if this function was loaded or not or if

120
00:04:05,200 --> 00:04:09,839
it if it was evicted then

121
00:04:06,959 --> 00:04:09,840
it will load it again

122
00:04:11,840 --> 00:04:16,478
let's talk about grouping and what it's

123
00:04:13,439 --> 00:04:19,120
mean so since we are loading from

124
00:04:16,478 --> 00:04:21,120
low speed storage we want to load much

125
00:04:19,120 --> 00:04:22,160
as much function as we want in the same

126
00:04:21,120 --> 00:04:25,280
context

127
00:04:22,160 --> 00:04:27,280
meaning grouping so in grouping

128
00:04:25,280 --> 00:04:30,880
we have functions overlay functions and

129
00:04:27,280 --> 00:04:30,880
read-only data of overlay

130
00:04:34,080 --> 00:04:37,680
when a runtime module will decide or to

131
00:04:35,919 --> 00:04:39,840
load the function it will actually

132
00:04:37,680 --> 00:04:43,840
load the entire group and this will show

133
00:04:39,840 --> 00:04:43,840
us the painful storage load time

134
00:04:45,040 --> 00:04:50,080
we can configure the grouping in size

135
00:04:47,919 --> 00:04:52,880
between half a k and four kilobytes

136
00:04:50,080 --> 00:04:54,960
and it's a it's it's it's not fixed

137
00:04:52,880 --> 00:04:57,360
meaning that you can get you can get

138
00:04:54,960 --> 00:04:59,520
a size of groups between these sites and

139
00:04:57,360 --> 00:05:01,919
4k so you can have

140
00:04:59,520 --> 00:05:02,880
all kinds of permutations on this

141
00:05:01,919 --> 00:05:06,400
grouping size

142
00:05:02,880 --> 00:05:06,400
in resolution of ffk

143
00:05:06,560 --> 00:05:09,600
so it just makes sense to group things

144
00:05:08,560 --> 00:05:11,360
together right that

145
00:05:09,600 --> 00:05:13,520
relationship together like when you're

146
00:05:11,360 --> 00:05:15,120
calling a spy feature or you're calling

147
00:05:13,520 --> 00:05:17,039
a sleep model or whatever

148
00:05:15,120 --> 00:05:18,720
that you're developing you want to put

149
00:05:17,039 --> 00:05:20,320
those all in one group

150
00:05:18,720 --> 00:05:22,240
in order to make just one shot of

151
00:05:20,320 --> 00:05:24,960
loading so we

152
00:05:22,240 --> 00:05:26,479
we provide several uh features in order

153
00:05:24,960 --> 00:05:28,638
to support that there is the obvious

154
00:05:26,479 --> 00:05:30,240
feature that which is we call manually

155
00:05:28,639 --> 00:05:32,720
manually grouping when the user just

156
00:05:30,240 --> 00:05:34,639
registers his uh functions to a group

157
00:05:32,720 --> 00:05:36,240
he knows what what he needs and then he

158
00:05:34,639 --> 00:05:38,479
registers to a specific group

159
00:05:36,240 --> 00:05:40,320
and that group will hold its functions

160
00:05:38,479 --> 00:05:42,320
there's not another option we call it an

161
00:05:40,320 --> 00:05:44,639
automatically option

162
00:05:42,320 --> 00:05:46,479
which will automatically trigger by the

163
00:05:44,639 --> 00:05:48,720
by the grouping tool

164
00:05:46,479 --> 00:05:50,479
invoked by the linker you will need a

165
00:05:48,720 --> 00:05:53,759
ppp preparatory

166
00:05:50,479 --> 00:05:55,039
a profile file that we provide to the

167
00:05:53,759 --> 00:05:57,120
linker we need will

168
00:05:55,039 --> 00:05:58,639
invoke the automatically a grouping tool

169
00:05:57,120 --> 00:06:01,280
which i present later on

170
00:05:58,639 --> 00:06:02,960
concepts of how it works and the obvious

171
00:06:01,280 --> 00:06:04,880
solution that you don't have

172
00:06:02,960 --> 00:06:06,159
don't need any grouping so if you don't

173
00:06:04,880 --> 00:06:07,360
need any grouping you don't care about

174
00:06:06,160 --> 00:06:09,440
performance at all

175
00:06:07,360 --> 00:06:11,680
then each function will be in its own

176
00:06:09,440 --> 00:06:11,680
group

177
00:06:12,560 --> 00:06:17,680
another concept we are calling calling

178
00:06:14,800 --> 00:06:17,680
it a multi-grouping

179
00:06:17,759 --> 00:06:22,319
it's a it's a very special unique for

180
00:06:20,720 --> 00:06:24,160
for this feature

181
00:06:22,319 --> 00:06:26,319
uh and let's look at an example and

182
00:06:24,160 --> 00:06:28,080
explain it by an example

183
00:06:26,319 --> 00:06:30,400
sometimes different software scenarios

184
00:06:28,080 --> 00:06:32,240
can run the same function

185
00:06:30,400 --> 00:06:33,919
for example let's assume that the cache

186
00:06:32,240 --> 00:06:35,360
area the hip that we have is very small

187
00:06:33,919 --> 00:06:38,318
it's just fitting to this

188
00:06:35,360 --> 00:06:38,319
for just one group

189
00:06:38,479 --> 00:06:42,318
so in this example we can see my full

190
00:06:40,560 --> 00:06:45,440
function is in group a

191
00:06:42,319 --> 00:06:47,600
it's used by function 42 in that group

192
00:06:45,440 --> 00:06:50,160
and also needed by function 1003 which

193
00:06:47,600 --> 00:06:50,160
is in group b

194
00:06:50,319 --> 00:06:54,560
meaning we need to evict we need to

195
00:06:53,599 --> 00:06:57,759
evict a

196
00:06:54,560 --> 00:06:59,360
when b is running and back to a when my

197
00:06:57,759 --> 00:07:01,599
full function is done running

198
00:06:59,360 --> 00:07:03,919
okay so when function 1003 we'll call

199
00:07:01,599 --> 00:07:06,880
that function

200
00:07:03,919 --> 00:07:08,400
we need to evict b and go back to a and

201
00:07:06,880 --> 00:07:10,000
inverse vector

202
00:07:08,400 --> 00:07:12,159
as a result there are going to be too

203
00:07:10,000 --> 00:07:13,039
many loads it will take just too much

204
00:07:12,160 --> 00:07:16,160
time

205
00:07:13,039 --> 00:07:17,759
the solution is that for multi-grouping

206
00:07:16,160 --> 00:07:20,880
is that my full function

207
00:07:17,759 --> 00:07:22,560
can be live in the same group in

208
00:07:20,880 --> 00:07:24,000
both of the groups it can be in group a

209
00:07:22,560 --> 00:07:27,280
and also in group b

210
00:07:24,000 --> 00:07:28,400
then when function 1003 will call my

211
00:07:27,280 --> 00:07:31,280
function full

212
00:07:28,400 --> 00:07:33,359
you will see it's in its own group and

213
00:07:31,280 --> 00:07:35,919
no need for evict or load

214
00:07:33,360 --> 00:07:35,919
group a

215
00:07:38,319 --> 00:07:43,120
so a little bit about the logic flow of

216
00:07:40,080 --> 00:07:45,120
the engine and this is very little bit

217
00:07:43,120 --> 00:07:46,800
uh overlapped function will pass through

218
00:07:45,120 --> 00:07:50,080
a common v runtime engine

219
00:07:46,800 --> 00:07:51,360
here okay the engine itself is written

220
00:07:50,080 --> 00:07:53,520
in c and assembly

221
00:07:51,360 --> 00:07:56,160
and that's why it's traded with a target

222
00:07:53,520 --> 00:07:56,159
for s5

223
00:07:56,319 --> 00:08:02,240
the main engine itself

224
00:07:59,680 --> 00:08:04,400
sorry the maintenance itself will will

225
00:08:02,240 --> 00:08:08,000
do a few things that's the main

226
00:08:04,400 --> 00:08:10,799
workload it will load or evoke invoke

227
00:08:08,000 --> 00:08:12,240
overlay function it will also handle

228
00:08:10,800 --> 00:08:14,560
evict algorithm

229
00:08:12,240 --> 00:08:15,280
as a cancel with cash case sorry cash

230
00:08:14,560 --> 00:08:18,800
concepts

231
00:08:15,280 --> 00:08:19,758
so like an lru or etc this is what the

232
00:08:18,800 --> 00:08:21,919
grouping do itself

233
00:08:19,759 --> 00:08:23,840
so this is what the engine is doing and

234
00:08:21,919 --> 00:08:26,318
it also have a fragmentation algorithm

235
00:08:23,840 --> 00:08:28,239
in order to do

236
00:08:26,319 --> 00:08:30,479
you know close holes in the memory when

237
00:08:28,240 --> 00:08:32,799
you evict

238
00:08:30,479 --> 00:08:32,799
groups

239
00:08:35,519 --> 00:08:39,519
the building blocks we needed for having

240
00:08:38,399 --> 00:08:43,760
this

241
00:08:39,519 --> 00:08:44,720
tool box so with our collaborator from

242
00:08:43,760 --> 00:08:46,480
because them

243
00:08:44,720 --> 00:08:47,920
we did a lot of changes on the tool

244
00:08:46,480 --> 00:08:49,920
chain

245
00:08:47,920 --> 00:08:51,199
as a compiler we choose the lvm and the

246
00:08:49,920 --> 00:08:52,800
clangers frontend

247
00:08:51,200 --> 00:08:54,800
the compiler will just create special

248
00:08:52,800 --> 00:08:58,079
calls for the overlay functions

249
00:08:54,800 --> 00:08:58,079
as we see earlier

250
00:08:58,320 --> 00:09:04,560
for linker we choose the new ld uh

251
00:09:01,519 --> 00:09:07,760
these few changes are on the bfd

252
00:09:04,560 --> 00:09:09,599
creating descriptors tokens as we saw it

253
00:09:07,760 --> 00:09:11,120
for functions and offset table for

254
00:09:09,600 --> 00:09:12,880
overlay functions

255
00:09:11,120 --> 00:09:14,399
those tokens and over on the in the

256
00:09:12,880 --> 00:09:14,880
tables are being used by the engine

257
00:09:14,399 --> 00:09:17,839
itself

258
00:09:14,880 --> 00:09:19,519
on runtime so this is also all for the

259
00:09:17,839 --> 00:09:22,560
engine itself

260
00:09:19,519 --> 00:09:24,560
as a debugger we'll choose gdb to

261
00:09:22,560 --> 00:09:26,719
provide easy interface to the user for

262
00:09:24,560 --> 00:09:27,599
debugging overlay functions and overlay

263
00:09:26,720 --> 00:09:29,040
calls

264
00:09:27,600 --> 00:09:30,560
because sometimes you want to do a step

265
00:09:29,040 --> 00:09:31,680
into a function and just get into your

266
00:09:30,560 --> 00:09:33,199
function don't want to hold the

267
00:09:31,680 --> 00:09:35,199
mechanism of the overlay

268
00:09:33,200 --> 00:09:36,480
but sometimes you do want to debug the

269
00:09:35,200 --> 00:09:38,720
oval engine itself

270
00:09:36,480 --> 00:09:39,680
so we need awareness from the debugger

271
00:09:38,720 --> 00:09:42,880
side

272
00:09:39,680 --> 00:09:44,560
other utilities the grouping tool some

273
00:09:42,880 --> 00:09:47,200
extension to map file

274
00:09:44,560 --> 00:09:48,479
and other service utilities that we are

275
00:09:47,200 --> 00:09:50,880
going to provide

276
00:09:48,480 --> 00:09:53,680
that's all to make the life easier for

277
00:09:50,880 --> 00:09:57,600
the engineer to develop and to design

278
00:09:53,680 --> 00:09:57,599
and that's all coming

279
00:09:59,440 --> 00:10:04,160
so grouping so i want to share with you

280
00:10:02,320 --> 00:10:07,600
the grouping tool techniques

281
00:10:04,160 --> 00:10:12,480
okay but uh that's that's like a very

282
00:10:07,600 --> 00:10:12,480
high level uh concept of how it works

283
00:10:12,640 --> 00:10:16,240
uh so you can see here in instagram okay

284
00:10:15,519 --> 00:10:18,640
of

285
00:10:16,240 --> 00:10:20,240
of time and each color you represent an

286
00:10:18,640 --> 00:10:23,120
overlay function

287
00:10:20,240 --> 00:10:24,480
which is being called 12 times for

288
00:10:23,120 --> 00:10:26,720
example here and 10 times

289
00:10:24,480 --> 00:10:28,800
for example here that's the orange ones

290
00:10:26,720 --> 00:10:32,640
and there is the blue ones

291
00:10:28,800 --> 00:10:34,240
etc then we can see there is kind of uh

292
00:10:32,640 --> 00:10:36,079
in each stage here that's a lot of

293
00:10:34,240 --> 00:10:39,040
activities here and then

294
00:10:36,079 --> 00:10:39,920
a lot of the activities here here and

295
00:10:39,040 --> 00:10:43,279
here

296
00:10:39,920 --> 00:10:43,279
okay so what this uh

297
00:10:43,360 --> 00:10:46,720
grouping tool need to do is need to

298
00:10:44,880 --> 00:10:48,399
follow and split all the activities and

299
00:10:46,720 --> 00:10:50,399
find their hot areas

300
00:10:48,399 --> 00:10:52,880
in order to make a recommendation to do

301
00:10:50,399 --> 00:10:52,880
a grouping

302
00:10:53,600 --> 00:10:56,880
so let's separate that and see how it

303
00:10:55,440 --> 00:10:59,120
works so we can see

304
00:10:56,880 --> 00:11:01,279
so the grouping tool will get a

305
00:10:59,120 --> 00:11:02,399
pre-paper profile as i saw as i

306
00:11:01,279 --> 00:11:04,240
mentioned earlier

307
00:11:02,399 --> 00:11:05,839
for all of the functions and then we

308
00:11:04,240 --> 00:11:06,640
will start building instagrams for each

309
00:11:05,839 --> 00:11:08,640
function

310
00:11:06,640 --> 00:11:11,360
so we can see here for example the brown

311
00:11:08,640 --> 00:11:13,760
one there is activities for function a

312
00:11:11,360 --> 00:11:15,680
activities for function b and activities

313
00:11:13,760 --> 00:11:17,439
for function c

314
00:11:15,680 --> 00:11:18,959
if you merge everything together one

315
00:11:17,440 --> 00:11:20,880
above other then

316
00:11:18,959 --> 00:11:22,160
obviously we can see that there is a

317
00:11:20,880 --> 00:11:25,360
something that recommends

318
00:11:22,160 --> 00:11:28,560
recommend doing grouping about about the

319
00:11:25,360 --> 00:11:30,399
brown in blue and also

320
00:11:28,560 --> 00:11:33,040
green is by himself so make it a group

321
00:11:30,399 --> 00:11:35,120
by himself but if it fits of course to

322
00:11:33,040 --> 00:11:37,920
the first ones then we would like to

323
00:11:35,120 --> 00:11:37,920
merge them also

324
00:11:39,200 --> 00:11:42,480
so following what we saw earlier this is

325
00:11:42,000 --> 00:11:45,040
like the

326
00:11:42,480 --> 00:11:48,079
initialization stage and this is part of

327
00:11:45,040 --> 00:11:48,079
the steady state stage

328
00:11:50,639 --> 00:11:53,600
now for deployment

329
00:11:54,720 --> 00:11:58,160
so first of all comma v is open source

330
00:11:56,560 --> 00:12:00,239
it's already on the github

331
00:11:58,160 --> 00:12:02,399
we can access that you can see it it's

332
00:12:00,240 --> 00:12:02,399
there

333
00:12:02,639 --> 00:12:06,480
it's designed to fit bare metal software

334
00:12:04,560 --> 00:12:08,479
and with autos based software

335
00:12:06,480 --> 00:12:10,000
we are currently targeting free autos to

336
00:12:08,480 --> 00:12:13,279
support that so it will be

337
00:12:10,000 --> 00:12:13,279
threaded with friatos

338
00:12:13,680 --> 00:12:17,279
the first first draft of bermuda is all

339
00:12:15,680 --> 00:12:20,399
the open source as i said

340
00:12:17,279 --> 00:12:24,079
and the support for fiatos is on the go

341
00:12:20,399 --> 00:12:26,639
so it will be soon and also on the

342
00:12:24,079 --> 00:12:28,719
github we can see a draft of the tool

343
00:12:26,639 --> 00:12:31,519
chain itself it's already built

344
00:12:28,720 --> 00:12:31,920
for debian targets uh but we all but

345
00:12:31,519 --> 00:12:35,279
soon

346
00:12:31,920 --> 00:12:38,240
it's all going to be also open source so

347
00:12:35,279 --> 00:12:40,240
pay attention uh by may 2020 we're going

348
00:12:38,240 --> 00:12:43,279
to have a full deployment of core rv

349
00:12:40,240 --> 00:12:46,000
running on a real other platform with

350
00:12:43,279 --> 00:12:49,600
the os currently it's running on a few

351
00:12:46,000 --> 00:12:51,360
other platforms and it runs on iss

352
00:12:49,600 --> 00:12:52,880
which is cool but because it doesn't

353
00:12:51,360 --> 00:12:54,639
depend on any other

354
00:12:52,880 --> 00:12:58,240
solutions then it can run on any any

355
00:12:54,639 --> 00:13:00,560
other but it have to release five

356
00:12:58,240 --> 00:13:01,360
following next small demos for usage of

357
00:13:00,560 --> 00:13:04,079
each common v

358
00:13:01,360 --> 00:13:04,800
api the target is that we want like an

359
00:13:04,079 --> 00:13:07,760
sdk

360
00:13:04,800 --> 00:13:08,639
for developers to see all the demos all

361
00:13:07,760 --> 00:13:11,680
the apis

362
00:13:08,639 --> 00:13:15,360
and it can start design is uh

363
00:13:11,680 --> 00:13:17,599
it's called based on com movie

364
00:13:15,360 --> 00:13:18,560
this is the github that we are providing

365
00:13:17,600 --> 00:13:20,480
it

366
00:13:18,560 --> 00:13:23,920
and soon it's going to move to cheaper

367
00:13:20,480 --> 00:13:23,920
lines but so far it's here

368
00:13:24,800 --> 00:13:29,920
and also we're going to provide the

369
00:13:26,160 --> 00:13:31,920
two-chain branch to support it

370
00:13:29,920 --> 00:13:35,839
that's it thank you very much questions

371
00:13:31,920 --> 00:13:35,839
i have some time

372
00:13:38,959 --> 00:13:43,040
you would be totally loading your

373
00:13:40,720 --> 00:13:45,040
modules from

374
00:13:43,040 --> 00:13:46,480
land flash and it's because you don't

375
00:13:45,040 --> 00:13:49,040
have no flash that you cannot

376
00:13:46,480 --> 00:13:49,040
directly

377
00:13:49,920 --> 00:13:54,719
that's correct uh yes

378
00:13:53,120 --> 00:13:56,639
the question was where we are targeting

379
00:13:54,720 --> 00:13:57,760
to load the storage itself we are

380
00:13:56,639 --> 00:14:00,160
targeting for an end

381
00:13:57,760 --> 00:14:00,959
or something like that right so the

382
00:14:00,160 --> 00:14:02,959
implantation

383
00:14:00,959 --> 00:14:05,518
itself it doesn't care if it's an end

384
00:14:02,959 --> 00:14:07,359
flash it can be even a network

385
00:14:05,519 --> 00:14:09,440
because we are providing a hook to users

386
00:14:07,360 --> 00:14:11,199
saying load this function for us

387
00:14:09,440 --> 00:14:13,519
we're going to provide him the address

388
00:14:11,199 --> 00:14:15,199
where the source destination and the

389
00:14:13,519 --> 00:14:17,040
the map for the the function and we'll

390
00:14:15,199 --> 00:14:18,160
decide how to load it but yes your

391
00:14:17,040 --> 00:14:20,000
correct

392
00:14:18,160 --> 00:14:21,439
observation it's it's target for an end

393
00:14:20,000 --> 00:14:22,000
when we are talking about western

394
00:14:21,440 --> 00:14:31,839
digital

395
00:14:22,000 --> 00:14:31,839
right yes

396
00:14:42,839 --> 00:14:48,800
uh linux re-implementation

397
00:14:46,800 --> 00:14:51,519
okay if it's a really implementation of

398
00:14:48,800 --> 00:14:52,880
the loader mode model in linux so the

399
00:14:51,519 --> 00:14:56,079
answer is no

400
00:14:52,880 --> 00:14:59,279
it's something that we are working with

401
00:14:56,079 --> 00:15:00,638
many years it's very bare metal very

402
00:14:59,279 --> 00:15:02,160
embedded solution

403
00:15:00,639 --> 00:15:04,079
i would not recommend using that on

404
00:15:02,160 --> 00:15:05,279
linux for example there is a performance

405
00:15:04,079 --> 00:15:07,439
impact every time you're going to end

406
00:15:05,279 --> 00:15:08,800
the engine

407
00:15:07,440 --> 00:15:10,639
it's doing yeah it's doing almost the

408
00:15:08,800 --> 00:15:12,959
same thing uh with

409
00:15:10,639 --> 00:15:14,880
varsity of changes yeah and the tool

410
00:15:12,959 --> 00:15:17,839
chain support of course

411
00:15:14,880 --> 00:15:18,560
yes two questions uh do you have any

412
00:15:17,839 --> 00:15:22,560
plans

413
00:15:18,560 --> 00:15:24,880
to use this with zephyr at all

414
00:15:22,560 --> 00:15:25,680
okay so the question was if you are

415
00:15:24,880 --> 00:15:28,720
going to use this

416
00:15:25,680 --> 00:15:30,079
with a safer so the answer currently is

417
00:15:28,720 --> 00:15:32,160
no

418
00:15:30,079 --> 00:15:34,239
there is a it all depends on how much

419
00:15:32,160 --> 00:15:36,000
effort we are going to do in friatos

420
00:15:34,240 --> 00:15:38,240
meaning if we are going to do this very

421
00:15:36,000 --> 00:15:40,399
model very tiny changes

422
00:15:38,240 --> 00:15:43,279
in the candle itself then it will be

423
00:15:40,399 --> 00:15:45,680
very easy to move it to any other

424
00:15:43,279 --> 00:15:46,720
atos right so you can do it for example

425
00:15:45,680 --> 00:15:48,399
for tradex

426
00:15:46,720 --> 00:15:49,759
you can do it for cypher you can do it

427
00:15:48,399 --> 00:15:52,639
for whatever

428
00:15:49,759 --> 00:15:54,079
that's that time time will tell but

429
00:15:52,639 --> 00:15:56,160
currently it's fearless

430
00:15:54,079 --> 00:15:57,599
and the other question um so the other

431
00:15:56,160 --> 00:16:01,199
question i had was

432
00:15:57,600 --> 00:16:04,160
um could you use this um more

433
00:16:01,199 --> 00:16:05,120
as a caging system where you could

434
00:16:04,160 --> 00:16:08,160
execute

435
00:16:05,120 --> 00:16:10,639
say from uh nor flash

436
00:16:08,160 --> 00:16:12,800
but there's a performance here that

437
00:16:10,639 --> 00:16:13,759
anytime something is used if it's used

438
00:16:12,800 --> 00:16:16,959
frequently

439
00:16:13,759 --> 00:16:20,560
you pull it into um

440
00:16:16,959 --> 00:16:23,599
the like high speed memory that you have

441
00:16:20,560 --> 00:16:24,719
have you explored so that's that's a

442
00:16:23,600 --> 00:16:26,560
long question

443
00:16:24,720 --> 00:16:28,000
i will not repeat that but if i got it

444
00:16:26,560 --> 00:16:30,239
right you're asking if uh

445
00:16:28,000 --> 00:16:31,279
the cash concepts work uh like a like a

446
00:16:30,240 --> 00:16:32,880
real cash right like

447
00:16:31,279 --> 00:16:34,639
you're using nru if functions are very

448
00:16:32,880 --> 00:16:36,880
hard not to evict them that's what you

449
00:16:34,639 --> 00:16:40,000
ask for i'm more

450
00:16:36,880 --> 00:16:42,240
keeping track of how frequently a

451
00:16:40,000 --> 00:16:43,759
page might be accessed and then only

452
00:16:42,240 --> 00:16:46,240
loading them

453
00:16:43,759 --> 00:16:47,839
frequently because you can yes yeah yeah

454
00:16:46,240 --> 00:16:49,600
yeah

455
00:16:47,839 --> 00:16:52,079
yeah so yes the answer is yes we're

456
00:16:49,600 --> 00:16:55,120
investigating other options to

457
00:16:52,079 --> 00:16:56,880
to to monitor the cache itself not only

458
00:16:55,120 --> 00:16:58,399
using just lru for example we can use

459
00:16:56,880 --> 00:17:01,360
lfu which is last

460
00:16:58,399 --> 00:17:01,920
this frequently used so yes it's on its

461
00:17:01,360 --> 00:17:04,959
own

462
00:17:01,920 --> 00:17:06,799
it's on the plan more questions

463
00:17:04,959 --> 00:17:08,160
i have time right now uh just a minute

464
00:17:06,799 --> 00:17:10,240
so a minute okay

465
00:17:08,160 --> 00:17:12,799
um so you have to modify the tool chain

466
00:17:10,240 --> 00:17:14,319
obviously to yes

467
00:17:12,799 --> 00:17:16,319
how does that interact with the link

468
00:17:14,319 --> 00:17:17,760
time optimization

469
00:17:16,319 --> 00:17:19,918
okay that's a good question so it

470
00:17:17,760 --> 00:17:23,199
doesn't

471
00:17:19,919 --> 00:17:24,559
okay so uh for example uh not only

472
00:17:23,199 --> 00:17:27,199
linkedin optimization also

473
00:17:24,559 --> 00:17:28,879
for uh inlining for example okay so each

474
00:17:27,199 --> 00:17:29,600
function which is an overlay will not be

475
00:17:28,880 --> 00:17:32,160
inlined

476
00:17:29,600 --> 00:17:34,559
and also we not participate in the lto

477
00:17:32,160 --> 00:17:37,440
because it's very unique

478
00:17:34,559 --> 00:17:37,440
functions very unique

479
00:17:37,919 --> 00:17:42,320
within a group that's maybe a good idea

480
00:17:41,520 --> 00:17:46,720
right

481
00:17:42,320 --> 00:18:00,480
yeah we can examine that

482
00:17:46,720 --> 00:18:00,480
that's it thank you very much

