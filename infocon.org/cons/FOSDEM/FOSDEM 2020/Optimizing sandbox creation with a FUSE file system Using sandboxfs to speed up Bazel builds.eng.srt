1
00:00:05,040 --> 00:00:08,960
uh we have julio moreno here he's going

2
00:00:07,279 --> 00:00:09,920
to talk about optimizing sandbox

3
00:00:08,960 --> 00:00:13,360
creation

4
00:00:09,920 --> 00:00:14,719
with uh foose file system is that right

5
00:00:13,360 --> 00:00:17,919
that's about right all right give him a

6
00:00:14,719 --> 00:00:17,919
more welcome thank you

7
00:00:19,840 --> 00:00:23,759
the time i'm working okay great hello

8
00:00:21,840 --> 00:00:25,519
everyone um as i've been introduced i'm

9
00:00:23,760 --> 00:00:27,840
julia marino i work for google

10
00:00:25,519 --> 00:00:29,038
i'm in the bazel team um it's my first

11
00:00:27,840 --> 00:00:31,759
time at fosdem

12
00:00:29,039 --> 00:00:32,399
so i'm giving a talk now about bazel so

13
00:00:31,760 --> 00:00:35,680
today

14
00:00:32,399 --> 00:00:37,040
i want to talk to you about bazel and

15
00:00:35,680 --> 00:00:38,559
specifically about sandboxing and how

16
00:00:37,040 --> 00:00:40,719
we've been trying to optimize it to be

17
00:00:38,559 --> 00:00:43,839
faster by using a fuse file system

18
00:00:40,719 --> 00:00:45,360
um we have 15 minutes as you know i'll

19
00:00:43,840 --> 00:00:46,960
fill them up with my talk if you have

20
00:00:45,360 --> 00:00:47,839
questions we have to wait until later

21
00:00:46,960 --> 00:00:51,199
but you don't find me

22
00:00:47,840 --> 00:00:52,640
i'll let you know how okay so before we

23
00:00:51,199 --> 00:00:54,559
get into some boxing i want to re to

24
00:00:52,640 --> 00:00:57,360
recap a little bit what bazel is

25
00:00:54,559 --> 00:00:58,160
um you've been here either last year or

26
00:00:57,360 --> 00:01:00,879
the year before

27
00:00:58,160 --> 00:01:02,398
our team had a booth and i know it was

28
00:01:00,879 --> 00:01:04,559
very popular

29
00:01:02,399 --> 00:01:05,600
but this year we don't have one so if

30
00:01:04,559 --> 00:01:06,640
you don't know what basically is just go

31
00:01:05,600 --> 00:01:09,600
to the website at the bottom

32
00:01:06,640 --> 00:01:10,159
bazel.build or basically i want to tell

33
00:01:09,600 --> 00:01:12,880
you

34
00:01:10,159 --> 00:01:14,320
basically it's google's build system um

35
00:01:12,880 --> 00:01:16,320
and basically itself is the external

36
00:01:14,320 --> 00:01:18,158
version of it the open source version

37
00:01:16,320 --> 00:01:19,919
which essentially lets you build and

38
00:01:18,159 --> 00:01:20,880
test kind of any kind of project that

39
00:01:19,920 --> 00:01:24,000
you have right

40
00:01:20,880 --> 00:01:25,600
and it's specialized in integrating

41
00:01:24,000 --> 00:01:28,240
trees sources that have many different

42
00:01:25,600 --> 00:01:29,679
languages and and the goal is to build

43
00:01:28,240 --> 00:01:32,720
anything very quickly

44
00:01:29,680 --> 00:01:34,079
and reliably and by reliably reliably i

45
00:01:32,720 --> 00:01:35,520
mean you want your bills to be

46
00:01:34,079 --> 00:01:37,199
deterministic so if you build the same

47
00:01:35,520 --> 00:01:38,320
thing twice in a row they should give

48
00:01:37,200 --> 00:01:39,840
you the same results

49
00:01:38,320 --> 00:01:41,839
and that's actually where sandboxing

50
00:01:39,840 --> 00:01:43,280
comes into play right but before we get

51
00:01:41,840 --> 00:01:45,040
into this unboxing

52
00:01:43,280 --> 00:01:47,600
we have to go in i have to tell you a

53
00:01:45,040 --> 00:01:48,399
little bit uh how bazel actually models

54
00:01:47,600 --> 00:01:49,679
things

55
00:01:48,399 --> 00:01:51,920
so the basic concept we have to

56
00:01:49,680 --> 00:01:52,479
understand for this talk are uh bazel

57
00:01:51,920 --> 00:01:56,079
actions

58
00:01:52,479 --> 00:01:59,280
right in bazel action

59
00:01:56,079 --> 00:02:00,399
is essentially a command invocation like

60
00:01:59,280 --> 00:02:01,920
if you're familiar with any other build

61
00:02:00,399 --> 00:02:03,759
tool like for example make

62
00:02:01,920 --> 00:02:06,079
any command that make runs essentially

63
00:02:03,759 --> 00:02:08,239
becomes an action in bazel

64
00:02:06,079 --> 00:02:10,239
and bazel represents this in memory with

65
00:02:08,239 --> 00:02:11,920
a data structure called action of course

66
00:02:10,239 --> 00:02:13,840
and the action contains a command line

67
00:02:11,920 --> 00:02:15,440
in this case we have an example for a cc

68
00:02:13,840 --> 00:02:16,959
compile that takes a source file and

69
00:02:15,440 --> 00:02:20,079
generates an object file

70
00:02:16,959 --> 00:02:20,800
and as part of the action we register in

71
00:02:20,080 --> 00:02:22,400
memory

72
00:02:20,800 --> 00:02:23,920
what the inputs of that action are and

73
00:02:22,400 --> 00:02:25,280
what the outputs that we expect from it

74
00:02:23,920 --> 00:02:26,640
will be

75
00:02:25,280 --> 00:02:29,120
now you will notice that the inputs here

76
00:02:26,640 --> 00:02:30,799
contain like the compiler itself

77
00:02:29,120 --> 00:02:32,400
i've simplified it by just listing the

78
00:02:30,800 --> 00:02:34,560
binary but of course that includes any

79
00:02:32,400 --> 00:02:35,920
libraries that we made the panel etc

80
00:02:34,560 --> 00:02:38,319
but the important thing is to see that

81
00:02:35,920 --> 00:02:40,480
we have the source file parser.c

82
00:02:38,319 --> 00:02:41,440
as well as any includes that the source

83
00:02:40,480 --> 00:02:43,840
file might have

84
00:02:41,440 --> 00:02:44,480
inside right a c file we have in this

85
00:02:43,840 --> 00:02:46,720
case

86
00:02:44,480 --> 00:02:47,760
the partial.c file has include

87
00:02:46,720 --> 00:02:49,120
parser.page

88
00:02:47,760 --> 00:02:50,399
so that becomes part of the inputs of

89
00:02:49,120 --> 00:02:51,840
the action and then when we run this

90
00:02:50,400 --> 00:02:52,720
command we expect that the compiler will

91
00:02:51,840 --> 00:02:54,800
generate just

92
00:02:52,720 --> 00:02:57,359
one single dot oh file in the same

93
00:02:54,800 --> 00:03:00,480
directory where we run the command

94
00:02:57,360 --> 00:03:02,080
now this is great uh it works but now

95
00:03:00,480 --> 00:03:02,319
the problem is look at that dash capital

96
00:03:02,080 --> 00:03:06,400
i

97
00:03:02,319 --> 00:03:07,760
dot right the c compiler um when we

98
00:03:06,400 --> 00:03:09,599
that was our memory structure when we

99
00:03:07,760 --> 00:03:11,760
put the file system into play

100
00:03:09,599 --> 00:03:12,879
the file system has more things and in

101
00:03:11,760 --> 00:03:14,480
this case

102
00:03:12,879 --> 00:03:16,720
in the same directory we have the parser

103
00:03:14,480 --> 00:03:20,000
file the header we have another header

104
00:03:16,720 --> 00:03:21,680
called lecture.h right

105
00:03:20,000 --> 00:03:23,440
there is nothing preventing the compiler

106
00:03:21,680 --> 00:03:24,879
from reading that file right if your

107
00:03:23,440 --> 00:03:26,879
password.c

108
00:03:24,879 --> 00:03:27,920
source file contains an inclusion of

109
00:03:26,879 --> 00:03:30,399
this other header file

110
00:03:27,920 --> 00:03:32,079
regularly indirectly and you haven't

111
00:03:30,400 --> 00:03:33,680
told bazel about this right it's not

112
00:03:32,080 --> 00:03:36,879
part of the memory data structure

113
00:03:33,680 --> 00:03:37,920
then things will not work eventually

114
00:03:36,879 --> 00:03:40,079
because

115
00:03:37,920 --> 00:03:41,359
if that header that you didn't know

116
00:03:40,080 --> 00:03:42,720
about changes

117
00:03:41,360 --> 00:03:44,080
then bazel doesn't know that it has to

118
00:03:42,720 --> 00:03:46,400
rebuild this action and then you build

119
00:03:44,080 --> 00:03:47,760
will not be correct in the end

120
00:03:46,400 --> 00:03:49,840
so we want to prevent this kind of

121
00:03:47,760 --> 00:03:50,399
things and the way we do this with some

122
00:03:49,840 --> 00:03:54,080
boxing

123
00:03:50,400 --> 00:03:55,840
now um with unboxing we have

124
00:03:54,080 --> 00:03:57,599
two things that we have to take into

125
00:03:55,840 --> 00:03:59,439
account and the first thing is

126
00:03:57,599 --> 00:04:01,359
actually isolating the process so when

127
00:03:59,439 --> 00:04:05,040
we run the compiler it can only do

128
00:04:01,360 --> 00:04:08,159
the things that we think it should do

129
00:04:05,040 --> 00:04:11,280
right so here we have our process

130
00:04:08,159 --> 00:04:12,399
now it's a more clever version of cc and

131
00:04:11,280 --> 00:04:14,400
we put it inside

132
00:04:12,400 --> 00:04:15,519
sandbox now these samples will prevent

133
00:04:14,400 --> 00:04:16,880
things like you know

134
00:04:15,519 --> 00:04:18,478
it happens that this compiler wants to

135
00:04:16,880 --> 00:04:19,759
check the whole name of the machine or

136
00:04:18,478 --> 00:04:20,560
for some reason it wants to access the

137
00:04:19,759 --> 00:04:22,079
internet

138
00:04:20,560 --> 00:04:23,759
or it wants to access the file that we

139
00:04:22,079 --> 00:04:25,520
didn't declare in our inputs right

140
00:04:23,759 --> 00:04:27,120
so the sandbox will block all those

141
00:04:25,520 --> 00:04:29,120
accesses or mock

142
00:04:27,120 --> 00:04:30,560
their result and make sure that the

143
00:04:29,120 --> 00:04:30,960
process behaves only in the way that we

144
00:04:30,560 --> 00:04:33,759
thought

145
00:04:30,960 --> 00:04:35,758
it should um on linux we implement this

146
00:04:33,759 --> 00:04:37,919
today with username spaces

147
00:04:35,759 --> 00:04:39,600
and on mac os we use this deprecated

148
00:04:37,919 --> 00:04:40,799
tool called sandbox exec

149
00:04:39,600 --> 00:04:42,639
and you have there are a couple of links

150
00:04:40,800 --> 00:04:45,360
at the bottom that explain a bit all of

151
00:04:42,639 --> 00:04:45,360
this in more detail

152
00:04:45,520 --> 00:04:48,960
now okay that's how we actually prevent

153
00:04:47,840 --> 00:04:49,840
the process from doing things but i'm

154
00:04:48,960 --> 00:04:51,280
not gonna touch any

155
00:04:49,840 --> 00:04:52,719
anymore of this in this talk what we

156
00:04:51,280 --> 00:04:54,799
want to look into is how we actually

157
00:04:52,720 --> 00:04:55,759
prepare the file system for this to work

158
00:04:54,800 --> 00:04:58,320
right because we have to run this

159
00:04:55,759 --> 00:05:01,840
command somewhere and

160
00:04:58,320 --> 00:05:02,320
the way we do this is we create kind of

161
00:05:01,840 --> 00:05:04,400
a

162
00:05:02,320 --> 00:05:05,599
truth environment for the command so

163
00:05:04,400 --> 00:05:07,840
essentially we have the same

164
00:05:05,600 --> 00:05:09,039
data structure as before but now when we

165
00:05:07,840 --> 00:05:12,400
want to run this command

166
00:05:09,039 --> 00:05:13,840
write the cc binary instead of running

167
00:05:12,400 --> 00:05:16,239
it in the sorcery

168
00:05:13,840 --> 00:05:17,359
we create a separate sandbox directory

169
00:05:16,240 --> 00:05:18,560
that contains

170
00:05:17,360 --> 00:05:21,919
only the things that we want the

171
00:05:18,560 --> 00:05:24,639
compiler to have access to and see

172
00:05:21,919 --> 00:05:26,000
and then we create the sandbox before we

173
00:05:24,639 --> 00:05:28,240
run the action

174
00:05:26,000 --> 00:05:29,919
we run whatever it is inside there we

175
00:05:28,240 --> 00:05:31,199
don't use truth but essentially the same

176
00:05:29,919 --> 00:05:33,039
idea right we just

177
00:05:31,199 --> 00:05:34,240
execute the command in the directory and

178
00:05:33,039 --> 00:05:36,320
then we

179
00:05:34,240 --> 00:05:37,680
extract the outputs that we generated in

180
00:05:36,320 --> 00:05:38,719
that directory and put them back where

181
00:05:37,680 --> 00:05:40,080
they belong

182
00:05:38,720 --> 00:05:41,520
in this example you can see that they go

183
00:05:40,080 --> 00:05:42,960
into the workspace that's not exactly

184
00:05:41,520 --> 00:05:45,440
true they go in a different location but

185
00:05:42,960 --> 00:05:48,638
you get the idea

186
00:05:45,440 --> 00:05:50,880
now the problem is that

187
00:05:48,639 --> 00:05:52,240
the sandbox that actually today is

188
00:05:50,880 --> 00:05:55,199
created with symlinks

189
00:05:52,240 --> 00:05:56,319
right all of these things in between are

190
00:05:55,199 --> 00:05:57,039
siblings that point back to the

191
00:05:56,319 --> 00:06:00,400
workspace

192
00:05:57,039 --> 00:06:02,000
or whatever the outputs are so when i

193
00:06:00,400 --> 00:06:03,198
put the like read-only question mark

194
00:06:02,000 --> 00:06:04,880
it's like we would like those files to

195
00:06:03,199 --> 00:06:06,960
be read-only but with siblings we cannot

196
00:06:04,880 --> 00:06:09,600
do that

197
00:06:06,960 --> 00:06:10,000
anyway the main problem here that we

198
00:06:09,600 --> 00:06:11,280
have

199
00:06:10,000 --> 00:06:14,000
and the performance issues i want to

200
00:06:11,280 --> 00:06:17,039
talk to you about is that

201
00:06:14,000 --> 00:06:17,360
there are in big builds actions tend to

202
00:06:17,039 --> 00:06:20,159
have

203
00:06:17,360 --> 00:06:21,520
thousands of inputs right so then this

204
00:06:20,160 --> 00:06:23,919
process of creating the sandbox for

205
00:06:21,520 --> 00:06:25,440
every action becomes extremely costly

206
00:06:23,919 --> 00:06:27,359
we have to do one system one sibling

207
00:06:25,440 --> 00:06:31,360
system called for every input

208
00:06:27,360 --> 00:06:33,280
and when you have you know

209
00:06:31,360 --> 00:06:34,639
any kind of perturbance in the timing

210
00:06:33,280 --> 00:06:35,119
for the action the axis in the critical

211
00:06:34,639 --> 00:06:37,680
path

212
00:06:35,120 --> 00:06:39,680
so any increase in performance there

213
00:06:37,680 --> 00:06:41,440
will result in a big

214
00:06:39,680 --> 00:06:44,160
impact on the whole build time so you

215
00:06:41,440 --> 00:06:46,080
want to minimize that

216
00:06:44,160 --> 00:06:48,000
so the idea here is we will use our

217
00:06:46,080 --> 00:06:49,359
fistfile system to make

218
00:06:48,000 --> 00:06:52,080
to actually replace all those system

219
00:06:49,360 --> 00:06:52,960
calls with just one kind of rpc right we

220
00:06:52,080 --> 00:06:55,199
introduce

221
00:06:52,960 --> 00:06:57,520
a processing between bazel and the file

222
00:06:55,199 --> 00:06:59,360
system that's called sandbox fs

223
00:06:57,520 --> 00:07:01,758
and this process receives calls from

224
00:06:59,360 --> 00:07:02,880
bazel that tell it what to do

225
00:07:01,759 --> 00:07:04,240
so in this case you want to run this

226
00:07:02,880 --> 00:07:06,159
image as before right with different

227
00:07:04,240 --> 00:07:08,800
files i don't know why but

228
00:07:06,160 --> 00:07:10,479
we have an rpc called createsandbox that

229
00:07:08,800 --> 00:07:12,639
says please create a sandbox for

230
00:07:10,479 --> 00:07:14,240
action one and i want to put these files

231
00:07:12,639 --> 00:07:15,840
in and i actually want

232
00:07:14,240 --> 00:07:17,599
the root directory of this action to

233
00:07:15,840 --> 00:07:18,880
point to specific location where that

234
00:07:17,599 --> 00:07:20,319
will be writable

235
00:07:18,880 --> 00:07:22,240
and the source files have to be put

236
00:07:20,319 --> 00:07:23,759
inside in read-only mode

237
00:07:22,240 --> 00:07:25,360
these are not symbolics these are just

238
00:07:23,759 --> 00:07:27,840
actual real files that will be

239
00:07:25,360 --> 00:07:29,360
put in the in the directory so then

240
00:07:27,840 --> 00:07:30,960
somebody fast comes in

241
00:07:29,360 --> 00:07:33,360
does some in-memory operations only

242
00:07:30,960 --> 00:07:35,198
based on this data and exposes you

243
00:07:33,360 --> 00:07:36,960
those files in the file system so we can

244
00:07:35,199 --> 00:07:38,560
then with that go into there and run the

245
00:07:36,960 --> 00:07:41,680
command

246
00:07:38,560 --> 00:07:41,680
if you're familiar with

247
00:07:42,080 --> 00:07:46,240
linux or unix or whatever you know you

248
00:07:44,240 --> 00:07:48,479
may find this very similar to mount

249
00:07:46,240 --> 00:07:50,720
that's just bind on linux or

250
00:07:48,479 --> 00:07:52,240
null file systems on bsd and that is

251
00:07:50,720 --> 00:07:54,160
essentially the same thing right we have

252
00:07:52,240 --> 00:07:56,639
implemented these

253
00:07:54,160 --> 00:07:58,400
uh they let you do this they they let

254
00:07:56,639 --> 00:08:01,280
you do a bind mouth

255
00:07:58,400 --> 00:08:02,400
for multiple things into the same uh

256
00:08:01,280 --> 00:08:05,599
location

257
00:08:02,400 --> 00:08:07,359
not with just one source the other main

258
00:08:05,599 --> 00:08:09,120
thing that this does

259
00:08:07,360 --> 00:08:11,199
which is different than bind mounts is

260
00:08:09,120 --> 00:08:13,599
that we can have a second action coming

261
00:08:11,199 --> 00:08:16,000
in and we have do the same process

262
00:08:13,599 --> 00:08:17,520
but look there we didn't have to remount

263
00:08:16,000 --> 00:08:17,919
the file system to apply those changes

264
00:08:17,520 --> 00:08:19,680
right

265
00:08:17,919 --> 00:08:21,599
we just send another rpc to this d1

266
00:08:19,680 --> 00:08:22,960
that's running and it just added

267
00:08:21,599 --> 00:08:24,400
more files into the sandbox with

268
00:08:22,960 --> 00:08:25,280
different permissions different paths

269
00:08:24,400 --> 00:08:26,960
whatever

270
00:08:25,280 --> 00:08:28,479
and we didn't have to remount it so the

271
00:08:26,960 --> 00:08:31,840
performance there can be

272
00:08:28,479 --> 00:08:34,799
better it can be it's not yet but

273
00:08:31,840 --> 00:08:35,760
we'll see into that now so how does this

274
00:08:34,799 --> 00:08:38,478
behave

275
00:08:35,760 --> 00:08:40,718
well so i ran some measurements a year

276
00:08:38,479 --> 00:08:42,399
and a half ago on mac os

277
00:08:40,719 --> 00:08:43,839
and this is mostly about mac os because

278
00:08:42,399 --> 00:08:46,240
that's where we had the most performance

279
00:08:43,839 --> 00:08:48,880
problems on linux this is pretty good

280
00:08:46,240 --> 00:08:50,160
um and we got these numbers i don't have

281
00:08:48,880 --> 00:08:51,040
more recent numbers because i've been

282
00:08:50,160 --> 00:08:52,560
having trouble

283
00:08:51,040 --> 00:08:54,319
getting things to work properly with

284
00:08:52,560 --> 00:08:56,560
more modern builds but

285
00:08:54,320 --> 00:08:58,240
okay this is just a proof of concept for

286
00:08:56,560 --> 00:08:59,839
now so here we just have like three

287
00:08:58,240 --> 00:09:01,279
different builds uh two of them are

288
00:08:59,839 --> 00:09:03,279
building bezel with itself

289
00:09:01,279 --> 00:09:05,120
and another one is building one of our

290
00:09:03,279 --> 00:09:07,279
pretty large ios apps

291
00:09:05,120 --> 00:09:08,240
and there you have the times for the

292
00:09:07,279 --> 00:09:11,279
total build time

293
00:09:08,240 --> 00:09:12,720
when we run it without some boxing

294
00:09:11,279 --> 00:09:14,480
now when we enable the assembling

295
00:09:12,720 --> 00:09:16,959
sandbox the original one

296
00:09:14,480 --> 00:09:19,440
right we got these timings so for basic

297
00:09:16,959 --> 00:09:21,359
itself we see a tiny increase

298
00:09:19,440 --> 00:09:23,200
which is expected because any kind of

299
00:09:21,360 --> 00:09:25,519
sandboxing will have some overhead

300
00:09:23,200 --> 00:09:26,959
but then for the ios app the increase is

301
00:09:25,519 --> 00:09:28,560
massive that's just not acceptable right

302
00:09:26,959 --> 00:09:30,719
we cannot have this cost

303
00:09:28,560 --> 00:09:32,000
when you want to do like interactive

304
00:09:30,720 --> 00:09:33,360
development you cannot have this cost

305
00:09:32,000 --> 00:09:33,839
because people will not enable this

306
00:09:33,360 --> 00:09:35,360
feature

307
00:09:33,839 --> 00:09:38,000
and actually be disabling it because of

308
00:09:35,360 --> 00:09:39,360
this so with unbox the fest we've got

309
00:09:38,000 --> 00:09:42,640
for the moment

310
00:09:39,360 --> 00:09:45,440
to this um the overhead surveys itself

311
00:09:42,640 --> 00:09:46,319
remain but for ios apps which happen to

312
00:09:45,440 --> 00:09:47,920
have

313
00:09:46,320 --> 00:09:50,000
actions that are gigantic they have many

314
00:09:47,920 --> 00:09:51,920
many many inputs

315
00:09:50,000 --> 00:09:54,800
we've gotten the cost to like only 50

316
00:09:51,920 --> 00:09:56,800
for now i'm sure that can be cut down

317
00:09:54,800 --> 00:09:58,719
much more but at the moment that's what

318
00:09:56,800 --> 00:10:00,880
we get

319
00:09:58,720 --> 00:10:02,320
all right so something else found out

320
00:10:00,880 --> 00:10:04,480
when in this project is that

321
00:10:02,320 --> 00:10:06,079
it was originally written in go and i

322
00:10:04,480 --> 00:10:07,440
went through a rewriting rust just

323
00:10:06,079 --> 00:10:08,560
because basic

324
00:10:07,440 --> 00:10:09,920
but i want to tell you a little bit of

325
00:10:08,560 --> 00:10:11,518
what that what we found there what i

326
00:10:09,920 --> 00:10:14,959
found

327
00:10:11,519 --> 00:10:17,760
so first we started with go

328
00:10:14,959 --> 00:10:19,599
i had an intern that came to write this

329
00:10:17,760 --> 00:10:20,720
project and he did a very good job

330
00:10:19,600 --> 00:10:23,600
and he was working by the end of his

331
00:10:20,720 --> 00:10:25,040
internship um we found that vs code for

332
00:10:23,600 --> 00:10:26,959
example has very good support

333
00:10:25,040 --> 00:10:28,399
for go it was very nice he didn't get a

334
00:10:26,959 --> 00:10:30,000
no-go so just

335
00:10:28,399 --> 00:10:32,079
having like commission stuff was very

336
00:10:30,000 --> 00:10:32,880
useful to get into the language but then

337
00:10:32,079 --> 00:10:35,760
at some point

338
00:10:32,880 --> 00:10:37,439
we hit some scalability issues uh the go

339
00:10:35,760 --> 00:10:38,959
runtime didn't like the way the fused

340
00:10:37,440 --> 00:10:42,959
libraries for go work

341
00:10:38,959 --> 00:10:44,239
and it was not behaving properly we were

342
00:10:42,959 --> 00:10:46,719
hitting some very very

343
00:10:44,240 --> 00:10:48,160
significant performance issues and the

344
00:10:46,720 --> 00:10:48,800
code started to become pretty hard to

345
00:10:48,160 --> 00:10:51,839
maintain

346
00:10:48,800 --> 00:10:52,880
and that's my own critique of goal i

347
00:10:51,839 --> 00:10:55,440
would say

348
00:10:52,880 --> 00:10:56,800
there is no way or accepted way of

349
00:10:55,440 --> 00:10:57,760
adding like annotations in your school

350
00:10:56,800 --> 00:11:00,880
like assertions

351
00:10:57,760 --> 00:11:03,360
or i don't know threat annotations

352
00:11:00,880 --> 00:11:04,800
so things you know had to have a lot of

353
00:11:03,360 --> 00:11:06,160
comments saying how

354
00:11:04,800 --> 00:11:08,399
the code was supposed to behave but the

355
00:11:06,160 --> 00:11:09,519
compiler cannot enforce anything

356
00:11:08,399 --> 00:11:11,360
so at some point i just you know i

357
00:11:09,519 --> 00:11:12,800
wanted to learn rust and this is my set

358
00:11:11,360 --> 00:11:14,959
price so let's say let's

359
00:11:12,800 --> 00:11:17,359
learn raspberry writing this thing so i

360
00:11:14,959 --> 00:11:18,800
did that um

361
00:11:17,360 --> 00:11:20,399
the reward was very difficult i mean

362
00:11:18,800 --> 00:11:21,199
learning rust and getting up to speed

363
00:11:20,399 --> 00:11:24,320
with it is

364
00:11:21,200 --> 00:11:26,079
hard but i think it pays off um

365
00:11:24,320 --> 00:11:28,160
something specifically that we've i

366
00:11:26,079 --> 00:11:29,599
found is that vs code has also support

367
00:11:28,160 --> 00:11:30,880
and i kind of like vs code for that

368
00:11:29,600 --> 00:11:31,600
reason i mentioned before to learn the

369
00:11:30,880 --> 00:11:33,920
language

370
00:11:31,600 --> 00:11:35,920
but for us it was it's it's very slow

371
00:11:33,920 --> 00:11:37,519
compile times are slow as you may know

372
00:11:35,920 --> 00:11:39,279
and they get in the way even for like

373
00:11:37,519 --> 00:11:40,720
tiny edits to get the red squiggles

374
00:11:39,279 --> 00:11:42,240
under the code it takes a while so

375
00:11:40,720 --> 00:11:44,079
that's annoying

376
00:11:42,240 --> 00:11:45,519
on the other hand the code that we have

377
00:11:44,079 --> 00:11:48,719
today

378
00:11:45,519 --> 00:11:50,079
uh is more much more sane i feel much

379
00:11:48,720 --> 00:11:50,399
more confident that it's doing the right

380
00:11:50,079 --> 00:11:52,239
thing

381
00:11:50,399 --> 00:11:54,560
in the past i had to trust look it and

382
00:11:52,240 --> 00:11:55,839
maybe trust it but more interestingly

383
00:11:54,560 --> 00:11:58,000
anything that kind of shocked me in the

384
00:11:55,839 --> 00:11:59,600
process is that so as part of the

385
00:11:58,000 --> 00:12:01,519
rewrite i was trying to copy the same

386
00:11:59,600 --> 00:12:02,800
logic that we had from go into rust to

387
00:12:01,519 --> 00:12:04,560
avoid having to change anything make

388
00:12:02,800 --> 00:12:07,599
sure that everything remained the same

389
00:12:04,560 --> 00:12:09,040
but in doing this rust didn't let me

390
00:12:07,600 --> 00:12:10,639
write those same ideas

391
00:12:09,040 --> 00:12:12,639
in the same way the compiler just

392
00:12:10,639 --> 00:12:14,320
refused that kind of code

393
00:12:12,639 --> 00:12:16,000
and it turned out that the old code had

394
00:12:14,320 --> 00:12:18,720
many threading

395
00:12:16,000 --> 00:12:20,399
bugs that were not visible in go or

396
00:12:18,720 --> 00:12:22,399
actually running the test that we have

397
00:12:20,399 --> 00:12:24,000
but the compiler the ras compiler would

398
00:12:22,399 --> 00:12:27,200
just catch them and not let me specify

399
00:12:24,000 --> 00:12:29,120
that kind of buggy code i kind of wrote

400
00:12:27,200 --> 00:12:30,560
down my experiences with the red in that

401
00:12:29,120 --> 00:12:32,160
post there you can take a look at each

402
00:12:30,560 --> 00:12:34,000
one later

403
00:12:32,160 --> 00:12:35,920
and some common issues or common things

404
00:12:34,000 --> 00:12:38,000
about this process

405
00:12:35,920 --> 00:12:40,319
i just mentioned that pprof for example

406
00:12:38,000 --> 00:12:42,320
is a profiling tool also from google

407
00:12:40,320 --> 00:12:43,519
it integrates extremely well with go

408
00:12:42,320 --> 00:12:45,760
it's super easy to use it was very

409
00:12:43,519 --> 00:12:48,079
useful in finding the performance issues

410
00:12:45,760 --> 00:12:48,959
um it works also for ras binaries with

411
00:12:48,079 --> 00:12:51,839
some more effort

412
00:12:48,959 --> 00:12:53,279
i is also very useful in that case and

413
00:12:51,839 --> 00:12:55,200
the main problem is that the fuse

414
00:12:53,279 --> 00:12:57,920
bindings for both go and rust

415
00:12:55,200 --> 00:12:58,880
are not first class right fuse is a c

416
00:12:57,920 --> 00:13:00,240
project

417
00:12:58,880 --> 00:13:02,000
and the fuse bindings that have been

418
00:13:00,240 --> 00:13:04,000
written for these other languages are

419
00:13:02,000 --> 00:13:05,440
kind of like a rewritten from scratch i

420
00:13:04,000 --> 00:13:06,160
wouldn't say they are very actively

421
00:13:05,440 --> 00:13:08,720
maintained

422
00:13:06,160 --> 00:13:10,160
they are missing some features then you

423
00:13:08,720 --> 00:13:12,160
file backs out performance they'll get

424
00:13:10,160 --> 00:13:15,199
fixed so that's a very big problem

425
00:13:12,160 --> 00:13:16,639
for where we are at

426
00:13:15,200 --> 00:13:20,240
i don't know what the solution is really

427
00:13:16,639 --> 00:13:21,680
except yeah we'll see

428
00:13:20,240 --> 00:13:23,519
other things that i would like to do

429
00:13:21,680 --> 00:13:24,800
here and

430
00:13:23,519 --> 00:13:26,959
i would say this is an open source

431
00:13:24,800 --> 00:13:28,399
project wing wink i would like help if

432
00:13:26,959 --> 00:13:30,319
anyone is interested

433
00:13:28,399 --> 00:13:32,399
basically the main problem today is i

434
00:13:30,320 --> 00:13:34,079
said we have 50 cost in performance but

435
00:13:32,399 --> 00:13:35,360
i'm pretty sure it can be brought down

436
00:13:34,079 --> 00:13:36,800
and one of the problems today is that

437
00:13:35,360 --> 00:13:37,360
the protocol that we use to send data

438
00:13:36,800 --> 00:13:39,519
between

439
00:13:37,360 --> 00:13:41,040
bazel and sandbox is pretty inefficient

440
00:13:39,519 --> 00:13:42,160
it's very chatty it sends very big

441
00:13:41,040 --> 00:13:45,439
messages we could

442
00:13:42,160 --> 00:13:46,959
just make that smaller um another thing

443
00:13:45,440 --> 00:13:48,399
i would like to do personally is like i

444
00:13:46,959 --> 00:13:49,680
have this other tool called package comp

445
00:13:48,399 --> 00:13:51,760
or package compiler

446
00:13:49,680 --> 00:13:53,519
which builds any kind of software from

447
00:13:51,760 --> 00:13:54,000
packet source which is an fbsd packet

448
00:13:53,519 --> 00:13:57,199
system

449
00:13:54,000 --> 00:13:58,320
in a in a sandbox and in the past i use

450
00:13:57,199 --> 00:13:59,680
like bind mounts and it was very

451
00:13:58,320 --> 00:14:01,600
complicated together and to work on mac

452
00:13:59,680 --> 00:14:03,359
os and blah blah blah so

453
00:14:01,600 --> 00:14:05,120
actually the original idea of sandbox

454
00:14:03,360 --> 00:14:07,279
fest came from this project i wanted to

455
00:14:05,120 --> 00:14:09,199
do some buzzer fest for this project

456
00:14:07,279 --> 00:14:11,040
um but they never had the time and i was

457
00:14:09,199 --> 00:14:12,160
just lucky enough to kind of sell it as

458
00:14:11,040 --> 00:14:13,599
you know we will use it for basics

459
00:14:12,160 --> 00:14:14,240
instead so then i could do it at work as

460
00:14:13,600 --> 00:14:17,040
a 20

461
00:14:14,240 --> 00:14:18,160
project so that was good i would like to

462
00:14:17,040 --> 00:14:20,959
integrate it there

463
00:14:18,160 --> 00:14:21,839
and other things we could look into is

464
00:14:20,959 --> 00:14:22,959
like microsoft

465
00:14:21,839 --> 00:14:24,959
has come up with their own way of

466
00:14:22,959 --> 00:14:27,279
sandboxing they call it build excel

467
00:14:24,959 --> 00:14:28,239
and instead of enforcing things they

468
00:14:27,279 --> 00:14:30,240
actually let

469
00:14:28,240 --> 00:14:32,000
the code run as it was and they

470
00:14:30,240 --> 00:14:32,959
sanitized what the code did like they

471
00:14:32,000 --> 00:14:34,639
audit basically

472
00:14:32,959 --> 00:14:36,319
they don't prevent that's very

473
00:14:34,639 --> 00:14:37,040
interesting can offer much better

474
00:14:36,320 --> 00:14:38,560
performance

475
00:14:37,040 --> 00:14:40,240
but we have to look into it maybe we can

476
00:14:38,560 --> 00:14:42,719
have the same ideas

477
00:14:40,240 --> 00:14:44,399
and finally you should know that future

478
00:14:42,720 --> 00:14:46,399
mac is kind of

479
00:14:44,399 --> 00:14:47,760
not open source anymore and kernel

480
00:14:46,399 --> 00:14:50,160
extensions on mac are

481
00:14:47,760 --> 00:14:51,199
going away at some point so these two

482
00:14:50,160 --> 00:14:54,399
things are

483
00:14:51,199 --> 00:14:56,800
problematic for using views on mac

484
00:14:54,399 --> 00:14:58,959
and it's unclear what's going to happen

485
00:14:56,800 --> 00:15:00,240
with that um i'll just give you a couple

486
00:14:58,959 --> 00:15:01,760
of couple of links

487
00:15:00,240 --> 00:15:04,480
here you can go to the bezel basic

488
00:15:01,760 --> 00:15:04,959
webpage or the samplexfs project page or

489
00:15:04,480 --> 00:15:07,440
just

490
00:15:04,959 --> 00:15:08,560
you can contact me below you have any

491
00:15:07,440 --> 00:15:10,560
questions i'll be here today and

492
00:15:08,560 --> 00:15:11,680
tomorrow you can find me

493
00:15:10,560 --> 00:15:13,279
or not it's very difficult to find

494
00:15:11,680 --> 00:15:13,680
someone just ping me if you want twitter

495
00:15:13,279 --> 00:15:16,079
and then

496
00:15:13,680 --> 00:15:18,479
we can meet anywhere with that i'm done

497
00:15:16,079 --> 00:15:18,479
thank you

498
00:15:19,279 --> 00:15:29,600
okay thank you for your talk

499
00:15:27,519 --> 00:15:29,600
you

