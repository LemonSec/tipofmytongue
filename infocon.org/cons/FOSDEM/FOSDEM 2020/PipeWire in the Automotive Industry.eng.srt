1
00:00:06,080 --> 00:00:09,440
um

2
00:00:06,720 --> 00:00:09,440
hello everyone

3
00:00:11,040 --> 00:00:15,599
welcome i'm george i work at calabra i'm

4
00:00:14,240 --> 00:00:18,880
a senior software engineer

5
00:00:15,599 --> 00:00:21,279
um working on multimedia things like

6
00:00:18,880 --> 00:00:23,279
just trimmer and pipewire and today i'm

7
00:00:21,279 --> 00:00:26,720
going to talk about what i've been doing

8
00:00:23,279 --> 00:00:27,439
in the past one year with pipewire

9
00:00:26,720 --> 00:00:31,279
enabling

10
00:00:27,439 --> 00:00:35,840
livewire in the automotive industry so

11
00:00:31,279 --> 00:00:38,879
let's start by defining automotive

12
00:00:35,840 --> 00:00:40,079
so basically i've been working on a

13
00:00:38,879 --> 00:00:44,079
project called

14
00:00:40,079 --> 00:00:45,680
automotive grade linux um

15
00:00:44,079 --> 00:00:47,200
i'm pretty sure if you've heard of it

16
00:00:45,680 --> 00:00:48,640
before if you haven't heard

17
00:00:47,200 --> 00:00:50,559
ask around there is a booth at the

18
00:00:48,640 --> 00:00:54,000
building k as well where you can see a

19
00:00:50,559 --> 00:00:57,440
live demo of automotive grid linux

20
00:00:54,000 --> 00:01:01,359
and my task in agl

21
00:00:57,440 --> 00:01:05,199
has been to to make an audio system

22
00:01:01,359 --> 00:01:06,880
for cars now the

23
00:01:05,199 --> 00:01:08,640
immediate question you might have is

24
00:01:06,880 --> 00:01:09,280
what's so special about the audio system

25
00:01:08,640 --> 00:01:11,680
i mean

26
00:01:09,280 --> 00:01:13,920
we've been we had audio systems for

27
00:01:11,680 --> 00:01:16,320
years in on linux we have

28
00:01:13,920 --> 00:01:17,040
okay the the driver layer works also

29
00:01:16,320 --> 00:01:21,039
works

30
00:01:17,040 --> 00:01:23,680
we have pulse audio on top um

31
00:01:21,040 --> 00:01:25,360
that works really well for the desktop

32
00:01:23,680 --> 00:01:28,640
but

33
00:01:25,360 --> 00:01:31,280
yeah what's missing so that to

34
00:01:28,640 --> 00:01:32,159
explain that i need to to explain to you

35
00:01:31,280 --> 00:01:34,159
how the

36
00:01:32,159 --> 00:01:35,680
hardware looks like because that's the

37
00:01:34,159 --> 00:01:38,320
difference basically

38
00:01:35,680 --> 00:01:39,439
so on a desktop we're used to having

39
00:01:38,320 --> 00:01:42,479
this kind of

40
00:01:39,439 --> 00:01:46,559
scheme where there is a single cpu

41
00:01:42,479 --> 00:01:48,320
and a single audio card

42
00:01:46,560 --> 00:01:49,920
might be multiple but it doesn't matter

43
00:01:48,320 --> 00:01:52,320
you basically choose

44
00:01:49,920 --> 00:01:53,759
one audio card that you use you have

45
00:01:52,320 --> 00:01:55,758
your speakers connected there and you

46
00:01:53,759 --> 00:01:59,360
have your microphone connected there and

47
00:01:55,759 --> 00:02:03,520
that's the whole thing that

48
00:01:59,360 --> 00:02:04,079
that that exists and uh yeah you have

49
00:02:03,520 --> 00:02:06,079
things like

50
00:02:04,079 --> 00:02:09,038
pulse audio that can manage this really

51
00:02:06,079 --> 00:02:12,239
really really well

52
00:02:09,038 --> 00:02:15,920
on a car now things are quite different

53
00:02:12,239 --> 00:02:19,280
because you have different

54
00:02:15,920 --> 00:02:21,440
nodes in a inside the car different cpus

55
00:02:19,280 --> 00:02:22,959
multiples to be used so you have maybe

56
00:02:21,440 --> 00:02:26,000
one cpu that is the

57
00:02:22,959 --> 00:02:27,840
in-vehicle infotainment uh system and

58
00:02:26,000 --> 00:02:31,680
then another cpu around

59
00:02:27,840 --> 00:02:34,239
uh somewhere else which is maybe a

60
00:02:31,680 --> 00:02:36,080
i don't know a hardware radio device or

61
00:02:34,239 --> 00:02:39,280
a cd player

62
00:02:36,080 --> 00:02:42,480
there is a dedicated

63
00:02:39,280 --> 00:02:45,440
dsp somewhere else

64
00:02:42,480 --> 00:02:46,640
which is doing the filters and

65
00:02:45,440 --> 00:02:49,440
[Music]

66
00:02:46,640 --> 00:02:51,760
echo cancellation and finally amplifies

67
00:02:49,440 --> 00:02:54,560
the audio to the speakers

68
00:02:51,760 --> 00:02:55,120
and there might be multiple dsps

69
00:02:54,560 --> 00:02:57,360
actually

70
00:02:55,120 --> 00:02:59,280
um one for the front speakers one for

71
00:02:57,360 --> 00:03:01,280
the rear seat speakers

72
00:02:59,280 --> 00:03:03,920
there are some cars that have even

73
00:03:01,280 --> 00:03:06,080
speakers on your headrest

74
00:03:03,920 --> 00:03:07,040
there are also microphone arrays that

75
00:03:06,080 --> 00:03:09,840
sit that

76
00:03:07,040 --> 00:03:10,959
are on your seatbelt or on the top on

77
00:03:09,840 --> 00:03:14,319
the roof

78
00:03:10,959 --> 00:03:17,040
on the doors on the side

79
00:03:14,319 --> 00:03:17,760
everywhere basically and this is all

80
00:03:17,040 --> 00:03:19,840
quite

81
00:03:17,760 --> 00:03:21,120
this becomes basically a very complex

82
00:03:19,840 --> 00:03:24,400
network that you

83
00:03:21,120 --> 00:03:28,159
no longer manage

84
00:03:24,400 --> 00:03:28,159
in the way that you manage the desktop

85
00:03:30,239 --> 00:03:36,159
so some requirements basically um

86
00:03:33,440 --> 00:03:36,640
yeah i mostly talked about it already

87
00:03:36,159 --> 00:03:39,280
you have

88
00:03:36,640 --> 00:03:41,040
a lot of different hardware um and the

89
00:03:39,280 --> 00:03:42,959
other thing that i didn't say is that

90
00:03:41,040 --> 00:03:45,040
you might have streams that go

91
00:03:42,959 --> 00:03:46,879
um around without passing through the

92
00:03:45,040 --> 00:03:49,840
main cpu so you may have

93
00:03:46,879 --> 00:03:50,640
for example a dedicated hardware cd

94
00:03:49,840 --> 00:03:54,239
player

95
00:03:50,640 --> 00:03:56,720
that directly puts audio on the dsp

96
00:03:54,239 --> 00:03:58,879
and that audio never passes through the

97
00:03:56,720 --> 00:04:01,680
main cpu although the main cpu still has

98
00:03:58,879 --> 00:04:05,040
control over what place

99
00:04:01,680 --> 00:04:06,480
you don't actually get the audio data

100
00:04:05,040 --> 00:04:09,840
routed through the main cpu

101
00:04:06,480 --> 00:04:09,840
for performance reasons

102
00:04:10,159 --> 00:04:13,519
and you need low latency because you may

103
00:04:12,480 --> 00:04:16,079
want to implement

104
00:04:13,519 --> 00:04:18,000
echo cancellation and things like that

105
00:04:16,079 --> 00:04:20,160
and then on the software side for when

106
00:04:18,000 --> 00:04:21,600
on on the ifi system when you want to

107
00:04:20,160 --> 00:04:23,840
play something

108
00:04:21,600 --> 00:04:25,919
there are some uh requirements there as

109
00:04:23,840 --> 00:04:27,840
well because you might have

110
00:04:25,919 --> 00:04:29,280
you basically have apps that have a

111
00:04:27,840 --> 00:04:32,080
different context

112
00:04:29,280 --> 00:04:33,280
there are apps that do for example apps

113
00:04:32,080 --> 00:04:37,198
that play music

114
00:04:33,280 --> 00:04:37,679
um that are in a in the multimedia

115
00:04:37,199 --> 00:04:40,240
context

116
00:04:37,680 --> 00:04:41,919
say and there are other apps that may be

117
00:04:40,240 --> 00:04:43,600
doing something special like for example

118
00:04:41,919 --> 00:04:46,799
your navigation app

119
00:04:43,600 --> 00:04:49,440
which every once in a while it says

120
00:04:46,800 --> 00:04:50,800
please turn left in 100 meters or

121
00:04:49,440 --> 00:04:54,880
something like that

122
00:04:50,800 --> 00:04:54,880
and that sound needs to be

123
00:04:55,440 --> 00:05:00,080
treat it specially because you want to

124
00:04:57,520 --> 00:05:01,840
to make sure that the driver can hear it

125
00:05:00,080 --> 00:05:04,159
uh you want to play it on the front

126
00:05:01,840 --> 00:05:06,719
speakers you want to play it amplified

127
00:05:04,160 --> 00:05:07,919
lower down the music while it's playing

128
00:05:06,720 --> 00:05:09,280
and things like that so you have to

129
00:05:07,919 --> 00:05:11,840
treat it in a different

130
00:05:09,280 --> 00:05:11,840
path than

131
00:05:12,400 --> 00:05:17,599
and in a different way than how you

132
00:05:14,880 --> 00:05:17,600
treat the music

133
00:05:19,280 --> 00:05:24,719
we want security because things nowadays

134
00:05:22,320 --> 00:05:24,719
are very

135
00:05:26,880 --> 00:05:29,199
hard

136
00:05:31,759 --> 00:05:35,039
we want to have containerized apps

137
00:05:34,240 --> 00:05:38,080
nowadays

138
00:05:35,039 --> 00:05:40,159
that can play music or something

139
00:05:38,080 --> 00:05:41,520
else but you don't want them to be able

140
00:05:40,160 --> 00:05:42,639
to do something that they are not

141
00:05:41,520 --> 00:05:44,560
intended to do

142
00:05:42,639 --> 00:05:46,240
like you don't want the music up to be

143
00:05:44,560 --> 00:05:50,320
able to take over

144
00:05:46,240 --> 00:05:51,520
the navigation special stream

145
00:05:50,320 --> 00:05:53,360
and things like that and then you have

146
00:05:51,520 --> 00:05:54,960
emergency signals when

147
00:05:53,360 --> 00:05:58,000
there's something wrong with your car

148
00:05:54,960 --> 00:06:00,638
that needs to play um

149
00:05:58,000 --> 00:06:01,680
some sound to warn the driver that's

150
00:06:00,639 --> 00:06:05,039
also something that

151
00:06:01,680 --> 00:06:06,639
needs to be treated especially and

152
00:06:05,039 --> 00:06:09,199
it's usually coming from dedicated

153
00:06:06,639 --> 00:06:11,759
hardware that has to be certified

154
00:06:09,199 --> 00:06:14,319
and it it won't actually send data

155
00:06:11,759 --> 00:06:17,120
through the main cpu again it will just

156
00:06:14,319 --> 00:06:19,199
play directly on the dsp and there is a

157
00:06:17,120 --> 00:06:21,039
path there that is guaranteed to work

158
00:06:19,199 --> 00:06:23,919
because it's

159
00:06:21,039 --> 00:06:24,560
it's certified but then the ibi all

160
00:06:23,919 --> 00:06:28,479
needs to

161
00:06:24,560 --> 00:06:31,440
understand that this is going on and

162
00:06:28,479 --> 00:06:32,840
stop the other streams at the time and

163
00:06:31,440 --> 00:06:35,759
things like that

164
00:06:32,840 --> 00:06:37,919
so the real problem

165
00:06:35,759 --> 00:06:38,960
actually um to be doing an audio system

166
00:06:37,919 --> 00:06:42,080
in a car

167
00:06:38,960 --> 00:06:42,880
is routing and policy management how do

168
00:06:42,080 --> 00:06:46,240
we

169
00:06:42,880 --> 00:06:50,960
how do we manage the

170
00:06:46,240 --> 00:06:50,960
routing and how do we make policies

171
00:06:52,319 --> 00:06:55,919
so there have been some projects that

172
00:06:54,319 --> 00:06:59,599
have tried to address this

173
00:06:55,919 --> 00:07:01,280
um i mean okay

174
00:06:59,599 --> 00:07:03,440
i'm starting with pulse audio audio

175
00:07:01,280 --> 00:07:04,960
didn't actually ever try to address this

176
00:07:03,440 --> 00:07:07,360
use case it's really meant for the

177
00:07:04,960 --> 00:07:10,159
desktop it makes its own policy

178
00:07:07,360 --> 00:07:13,520
decisions so you can't actually

179
00:07:10,160 --> 00:07:15,680
tinker with it unless you build a module

180
00:07:13,520 --> 00:07:18,240
and some people do that they build a

181
00:07:15,680 --> 00:07:20,240
module that tries to circumvent how

182
00:07:18,240 --> 00:07:22,240
pulse audio is internally routing

183
00:07:20,240 --> 00:07:25,599
streams

184
00:07:22,240 --> 00:07:27,120
but it's not very nice it is fairly

185
00:07:25,599 --> 00:07:30,880
resource intensive

186
00:07:27,120 --> 00:07:32,479
compared to other multimedia demons

187
00:07:30,880 --> 00:07:34,560
and it doesn't implement any kind of

188
00:07:32,479 --> 00:07:37,360
security so whichever app connects

189
00:07:34,560 --> 00:07:39,039
has control over everything and then

190
00:07:37,360 --> 00:07:40,960
there have been things like the audio

191
00:07:39,039 --> 00:07:43,520
genevieve audio manager which

192
00:07:40,960 --> 00:07:44,719
is building on top of also use pulse

193
00:07:43,520 --> 00:07:46,400
audio as a back-end

194
00:07:44,720 --> 00:07:47,840
optionally you can use other back-ends

195
00:07:46,400 --> 00:07:49,758
as well it

196
00:07:47,840 --> 00:07:52,239
basically builds up an api for policy

197
00:07:49,759 --> 00:07:54,560
management on top of that

198
00:07:52,240 --> 00:07:57,039
but it has a couple of shortcomings like

199
00:07:54,560 --> 00:07:57,039
it doesn't

200
00:07:57,520 --> 00:08:01,758
you must call the the audio manager api

201
00:07:59,919 --> 00:08:03,359
so the applications need to be aware

202
00:08:01,759 --> 00:08:06,479
that this exists

203
00:08:03,360 --> 00:08:08,560
and things like that and um

204
00:08:06,479 --> 00:08:10,878
people that have used it they generally

205
00:08:08,560 --> 00:08:13,680
agree that it's complex and

206
00:08:10,879 --> 00:08:15,599
not very nice and then in agl we also

207
00:08:13,680 --> 00:08:18,160
had another api called the

208
00:08:15,599 --> 00:08:20,080
foray which tried to solve some of the

209
00:08:18,160 --> 00:08:23,520
features of audio manager

210
00:08:20,080 --> 00:08:24,000
but uh didn't succeed in addressing all

211
00:08:23,520 --> 00:08:27,919
of them

212
00:08:24,000 --> 00:08:31,280
and people still didn't like it so much

213
00:08:27,919 --> 00:08:31,280
so then there was pipe wire

214
00:08:33,919 --> 00:08:39,279
what uh what is um what is

215
00:08:37,039 --> 00:08:41,439
pipewire doing differently to address

216
00:08:39,279 --> 00:08:43,838
these issues so

217
00:08:41,440 --> 00:08:45,760
when i started looking at that i didn't

218
00:08:43,839 --> 00:08:47,040
fight wire of course didn't support any

219
00:08:45,760 --> 00:08:51,519
of these use cases

220
00:08:47,040 --> 00:08:55,120
but it had something that looked like

221
00:08:51,519 --> 00:08:58,640
it was possible to um to develop it

222
00:08:55,120 --> 00:09:00,399
to address these use cases so

223
00:08:58,640 --> 00:09:02,319
let's start with explaining a little bit

224
00:09:00,399 --> 00:09:02,800
of the architecture of pipewire how does

225
00:09:02,320 --> 00:09:05,040
it

226
00:09:02,800 --> 00:09:06,160
look like so there is a demon pipewire

227
00:09:05,040 --> 00:09:08,000
demon

228
00:09:06,160 --> 00:09:09,279
that basically handles all the media

229
00:09:08,000 --> 00:09:14,399
routing

230
00:09:09,279 --> 00:09:14,399
between applications and devices and

231
00:09:15,920 --> 00:09:19,599
everything is a different process so

232
00:09:19,839 --> 00:09:26,959
you can have applications

233
00:09:22,959 --> 00:09:29,359
sending data through mfd or dma buff to

234
00:09:26,959 --> 00:09:32,640
pipe wire or capturing data

235
00:09:29,360 --> 00:09:36,000
and then you have you can have devices

236
00:09:32,640 --> 00:09:38,720
either accessed directly through

237
00:09:36,000 --> 00:09:40,080
a plugin to connect let's say to also or

238
00:09:38,720 --> 00:09:43,200
to video for linux

239
00:09:40,080 --> 00:09:45,920
but you can also show

240
00:09:43,200 --> 00:09:48,560
present devices uh through external

241
00:09:45,920 --> 00:09:51,839
processes like the bluetooth

242
00:09:48,560 --> 00:09:53,439
manager process that we have that that

243
00:09:51,839 --> 00:09:55,440
does all the networking stuff with

244
00:09:53,440 --> 00:09:58,240
bluetooth and provides the device

245
00:09:55,440 --> 00:09:59,920
to the to the pipewire demon and then

246
00:09:58,240 --> 00:10:01,040
there is another process which is called

247
00:09:59,920 --> 00:10:05,599
the session manager

248
00:10:01,040 --> 00:10:08,800
which is the the most important thing

249
00:10:05,600 --> 00:10:11,680
that basically

250
00:10:08,800 --> 00:10:12,800
looks at the whole um applications and

251
00:10:11,680 --> 00:10:14,800
devices graph

252
00:10:12,800 --> 00:10:17,199
and decides what is going to be routed

253
00:10:14,800 --> 00:10:21,040
where and makes all these connections

254
00:10:17,200 --> 00:10:22,240
um and i'll talk more about that later

255
00:10:21,040 --> 00:10:25,680
that's actually what i'm

256
00:10:22,240 --> 00:10:27,839
i've been doing myself so inside that

257
00:10:25,680 --> 00:10:31,439
blue box the pipeline demon the

258
00:10:27,839 --> 00:10:33,200
things look like that so inside the

259
00:10:31,440 --> 00:10:37,120
backward demon there is actually an

260
00:10:33,200 --> 00:10:39,440
a media graph with um

261
00:10:37,120 --> 00:10:40,240
a lot of little objects called nodes

262
00:10:39,440 --> 00:10:45,279
that

263
00:10:40,240 --> 00:10:48,720
connect to each other with links

264
00:10:45,279 --> 00:10:49,360
um every application is represented by

265
00:10:48,720 --> 00:10:51,839
an app

266
00:10:49,360 --> 00:10:53,839
by an application node every device is

267
00:10:51,839 --> 00:10:57,360
represented there

268
00:10:53,839 --> 00:11:01,040
as well also video for linux bluetooth

269
00:10:57,360 --> 00:11:04,240
and we it can also load internal plugins

270
00:11:01,040 --> 00:11:08,560
that also provide nodes that can do

271
00:11:04,240 --> 00:11:08,560
filtering and processing

272
00:11:12,240 --> 00:11:17,519
pipe wire actually started from

273
00:11:14,959 --> 00:11:20,319
providing a pulse audio for video it was

274
00:11:17,519 --> 00:11:22,720
initially called pulse video

275
00:11:20,320 --> 00:11:23,440
so it can handle video data very well

276
00:11:22,720 --> 00:11:25,680
that's its

277
00:11:23,440 --> 00:11:26,480
original purpose nowadays it also

278
00:11:25,680 --> 00:11:29,839
implements

279
00:11:26,480 --> 00:11:33,120
routing audio data and it's evolving to

280
00:11:29,839 --> 00:11:36,720
become a pulse audio replacement

281
00:11:33,120 --> 00:11:39,760
it is uh it is modular so you can

282
00:11:36,720 --> 00:11:41,360
customize it a lot and it has built-in

283
00:11:39,760 --> 00:11:42,880
security something that pulse audio

284
00:11:41,360 --> 00:11:45,680
didn't have

285
00:11:42,880 --> 00:11:47,040
um it can there is there is access

286
00:11:45,680 --> 00:11:51,040
control per application

287
00:11:47,040 --> 00:11:52,719
per device and you can make things um

288
00:11:51,040 --> 00:11:54,959
you can you can give access to certain

289
00:11:52,720 --> 00:11:57,040
applications do certain things and not

290
00:11:54,959 --> 00:12:00,399
other things and that's

291
00:11:57,040 --> 00:12:02,319
what i mean with security it's much

292
00:12:00,399 --> 00:12:03,519
it's a it's a very clean code and much

293
00:12:02,320 --> 00:12:06,959
more efficient that

294
00:12:03,519 --> 00:12:10,160
than pulse audio it's capable of doing

295
00:12:06,959 --> 00:12:13,599
low latency audio and it actually

296
00:12:10,160 --> 00:12:16,800
implements the jack api so you can also

297
00:12:13,600 --> 00:12:18,880
it can also work as a jack audio server

298
00:12:16,800 --> 00:12:19,839
and yeah the single most important thing

299
00:12:18,880 --> 00:12:22,000
is

300
00:12:19,839 --> 00:12:24,000
the external policy management so

301
00:12:22,000 --> 00:12:27,279
applications connect to pipewire

302
00:12:24,000 --> 00:12:28,959
they don't actually get

303
00:12:27,279 --> 00:12:30,560
linked to anything they don't they are

304
00:12:28,959 --> 00:12:33,119
not able to do anything

305
00:12:30,560 --> 00:12:34,160
until the session manager acts and gives

306
00:12:33,120 --> 00:12:37,600
them permissions

307
00:12:34,160 --> 00:12:40,480
and gives them links to something else

308
00:12:37,600 --> 00:12:42,959
to a device

309
00:12:40,480 --> 00:12:44,240
what was missing from backwire um when i

310
00:12:42,959 --> 00:12:46,079
started last year

311
00:12:44,240 --> 00:12:47,519
there was no session manager so i

312
00:12:46,079 --> 00:12:48,399
started developing a session manager

313
00:12:47,519 --> 00:12:52,639
basically that was

314
00:12:48,399 --> 00:12:56,000
all my work and i developed

315
00:12:52,639 --> 00:12:57,200
a system manager called wire plumber

316
00:12:56,000 --> 00:12:59,680
that was the first session manager

317
00:12:57,200 --> 00:13:01,680
implementation it's uh like five wire

318
00:12:59,680 --> 00:13:04,839
it's modular and extensible the

319
00:13:01,680 --> 00:13:06,079
target is to provide a reusable session

320
00:13:04,839 --> 00:13:09,600
manager

321
00:13:06,079 --> 00:13:12,560
for all kind of use cases

322
00:13:09,600 --> 00:13:13,360
automotive other embedded also on the

323
00:13:12,560 --> 00:13:15,599
provide

324
00:13:13,360 --> 00:13:18,160
desktop session manager and a session

325
00:13:15,600 --> 00:13:20,320
manager session management api as well

326
00:13:18,160 --> 00:13:21,199
so it provides a library that would

327
00:13:20,320 --> 00:13:22,800
allow you to

328
00:13:21,200 --> 00:13:25,680
write your own session manager if you

329
00:13:22,800 --> 00:13:28,719
want or to write your own policies

330
00:13:25,680 --> 00:13:29,279
to to to decide what route where to

331
00:13:28,720 --> 00:13:32,800
write

332
00:13:29,279 --> 00:13:36,880
modules for web number to extend its

333
00:13:32,800 --> 00:13:39,680
its features and tools around that

334
00:13:36,880 --> 00:13:41,760
uh it's written using g object it

335
00:13:39,680 --> 00:13:45,439
provides a geo-objectified

336
00:13:41,760 --> 00:13:47,760
api on top of five wire for ease of use

337
00:13:45,440 --> 00:13:49,519
and for enabling bindings in other

338
00:13:47,760 --> 00:13:52,800
languages

339
00:13:49,519 --> 00:13:56,480
that would be super useful

340
00:13:52,800 --> 00:13:59,279
and it also provides a an api

341
00:13:56,480 --> 00:14:00,880
which is called the endpoint api i'm

342
00:13:59,279 --> 00:14:03,920
going to explain that

343
00:14:00,880 --> 00:14:06,000
which is uh very useful

344
00:14:03,920 --> 00:14:08,160
for implementing policies i'm going to

345
00:14:06,000 --> 00:14:11,600
explain that so

346
00:14:08,160 --> 00:14:13,279
endpoints is a concept that i brought

347
00:14:11,600 --> 00:14:14,720
in into pipe where it didn't exist

348
00:14:13,279 --> 00:14:17,439
before

349
00:14:14,720 --> 00:14:18,480
pipewire itself it withdraws media

350
00:14:17,440 --> 00:14:20,560
through nodes

351
00:14:18,480 --> 00:14:22,240
uh from an application to a device or

352
00:14:20,560 --> 00:14:25,439
vice versa

353
00:14:22,240 --> 00:14:28,839
but the thing is that in a car you have

354
00:14:25,440 --> 00:14:30,150
all these kinds of streams uh hardware

355
00:14:28,839 --> 00:14:31,279
streams um

356
00:14:30,150 --> 00:14:32,880
[Music]

357
00:14:31,279 --> 00:14:35,199
that maybe are not passing through the

358
00:14:32,880 --> 00:14:38,399
main cpu and you want to control them

359
00:14:35,199 --> 00:14:40,719
so i i thought how can we make an

360
00:14:38,399 --> 00:14:42,560
abstraction of all of these

361
00:14:40,720 --> 00:14:43,920
and uh this is what the end points are

362
00:14:42,560 --> 00:14:45,599
basically

363
00:14:43,920 --> 00:14:47,519
endpoints are also little objects that

364
00:14:45,600 --> 00:14:50,079
you can

365
00:14:47,519 --> 00:14:52,320
that look like nodes they they can be

366
00:14:50,079 --> 00:14:55,199
linked together and unlinked

367
00:14:52,320 --> 00:14:56,720
but they don't actually have media they

368
00:14:55,199 --> 00:15:00,240
don't route media they are

369
00:14:56,720 --> 00:15:04,800
something more abstract so for example

370
00:15:00,240 --> 00:15:05,839
um you could think of a pipeline that

371
00:15:04,800 --> 00:15:07,680
looks like in

372
00:15:05,839 --> 00:15:09,760
the endpoints graph it looks like there

373
00:15:07,680 --> 00:15:10,800
is a media player that gets connected to

374
00:15:09,760 --> 00:15:12,480
the car amplifier

375
00:15:10,800 --> 00:15:14,560
and these are the twin points with one

376
00:15:12,480 --> 00:15:17,680
link and there is no more

377
00:15:14,560 --> 00:15:19,839
in that graph while

378
00:15:17,680 --> 00:15:21,439
the same thing on the nodes graph it

379
00:15:19,839 --> 00:15:23,279
looks like there is a media player that

380
00:15:21,440 --> 00:15:24,959
goes into a filter

381
00:15:23,279 --> 00:15:27,040
that does some processing and then it

382
00:15:24,959 --> 00:15:28,880
goes to a network sync

383
00:15:27,040 --> 00:15:31,199
that pushes things out to the car

384
00:15:28,880 --> 00:15:34,079
network and then

385
00:15:31,199 --> 00:15:35,680
there is a car network distribution

386
00:15:34,079 --> 00:15:38,638
demand or whatever that

387
00:15:35,680 --> 00:15:40,800
eventually ends up in the amplifier and

388
00:15:38,639 --> 00:15:43,920
this is a much more complex path

389
00:15:40,800 --> 00:15:47,040
that the policy

390
00:15:43,920 --> 00:15:50,319
management would have to know and

391
00:15:47,040 --> 00:15:52,480
would become very hardware specific to

392
00:15:50,320 --> 00:15:53,360
to handle this so this is how this is

393
00:15:52,480 --> 00:15:57,199
why

394
00:15:53,360 --> 00:15:59,120
i thought we need to obstruct this and

395
00:15:57,199 --> 00:16:01,199
these two are meant to run in parallel

396
00:15:59,120 --> 00:16:02,800
so you have both the endpoints graph and

397
00:16:01,199 --> 00:16:05,120
the media

398
00:16:02,800 --> 00:16:07,279
the nodes graph and whenever you make a

399
00:16:05,120 --> 00:16:11,199
link on the endpoints graph

400
00:16:07,279 --> 00:16:14,720
the session manager translates that

401
00:16:11,199 --> 00:16:16,880
into links on the actual notes graph

402
00:16:14,720 --> 00:16:19,920
and on the actual car network or

403
00:16:16,880 --> 00:16:19,920
whatever else is there

404
00:16:20,480 --> 00:16:23,759
the endpoints api is also something

405
00:16:22,800 --> 00:16:27,359
useful to bring

406
00:16:23,759 --> 00:16:29,920
um the graph closer to what pulse audio

407
00:16:27,360 --> 00:16:30,639
has so pulse audio has only sources and

408
00:16:29,920 --> 00:16:32,719
things

409
00:16:30,639 --> 00:16:34,560
there is only two things that you can

410
00:16:32,720 --> 00:16:34,880
link together there is no concept of a

411
00:16:34,560 --> 00:16:38,560
very

412
00:16:34,880 --> 00:16:40,240
much more complex complex graph

413
00:16:38,560 --> 00:16:41,920
and this is exactly what endpoints are

414
00:16:40,240 --> 00:16:43,759
so you have

415
00:16:41,920 --> 00:16:45,360
if you were to implement them points on

416
00:16:43,759 --> 00:16:47,519
a desktop you could still have things

417
00:16:45,360 --> 00:16:49,440
like

418
00:16:47,519 --> 00:16:50,959
an application being represented as one

419
00:16:49,440 --> 00:16:52,639
endpoint and your speakers or your

420
00:16:50,959 --> 00:16:54,239
microphone is another endpoint and then

421
00:16:52,639 --> 00:16:56,079
you can link them together

422
00:16:54,240 --> 00:16:58,000
no matter if there are filters in

423
00:16:56,079 --> 00:17:00,719
between or

424
00:16:58,000 --> 00:17:00,720
whatever else

425
00:17:01,040 --> 00:17:04,639
and this is how it looks the indian

426
00:17:03,199 --> 00:17:06,799
points graph so you have

427
00:17:04,640 --> 00:17:08,000
your applications your media player your

428
00:17:06,799 --> 00:17:11,439
voice agent

429
00:17:08,000 --> 00:17:13,439
voice assistant and they make links to

430
00:17:11,439 --> 00:17:14,799
uh to the endpoints there's an amplifier

431
00:17:13,439 --> 00:17:18,240
endpoint there

432
00:17:14,799 --> 00:17:21,439
a speech microphone and the

433
00:17:18,240 --> 00:17:24,000
the top on the top of this um

434
00:17:21,439 --> 00:17:24,559
graph we have basically the streams that

435
00:17:24,000 --> 00:17:26,959
are

436
00:17:24,559 --> 00:17:28,720
in the main cpu the the main cpu

437
00:17:26,959 --> 00:17:32,160
actually routes media data

438
00:17:28,720 --> 00:17:35,360
but then we can also represent uh

439
00:17:32,160 --> 00:17:36,160
hardware a hardware player or something

440
00:17:35,360 --> 00:17:38,719
else that is

441
00:17:36,160 --> 00:17:39,600
only routed in the in the car network

442
00:17:38,720 --> 00:17:41,919
and not in

443
00:17:39,600 --> 00:17:44,000
in the main cpu but the main cpu can

444
00:17:41,919 --> 00:17:46,880
still

445
00:17:44,000 --> 00:17:48,799
have this representation in a graph and

446
00:17:46,880 --> 00:17:50,000
so the policy management code can still

447
00:17:48,799 --> 00:17:53,039
look at this

448
00:17:50,000 --> 00:17:56,640
and decide okay here's a for example a

449
00:17:53,039 --> 00:17:56,640
hardware player that decides to

450
00:17:58,960 --> 00:18:02,240
you know in this example um so for

451
00:18:00,880 --> 00:18:05,360
example there is a

452
00:18:02,240 --> 00:18:06,640
voice agent uh assistant there that

453
00:18:05,360 --> 00:18:09,600
wants to play something

454
00:18:06,640 --> 00:18:09,919
to play um and it starts playing and

455
00:18:09,600 --> 00:18:11,600
then

456
00:18:09,919 --> 00:18:13,200
as soon as it makes the link and it

457
00:18:11,600 --> 00:18:15,199
starts streaming

458
00:18:13,200 --> 00:18:17,039
maybe the policy management policy

459
00:18:15,200 --> 00:18:17,600
management understands that this happens

460
00:18:17,039 --> 00:18:20,480
and

461
00:18:17,600 --> 00:18:21,840
it enables some effects on the amplifier

462
00:18:20,480 --> 00:18:24,400
endpoint

463
00:18:21,840 --> 00:18:25,918
which could mean that more nodes are

464
00:18:24,400 --> 00:18:28,799
getting linked at the point

465
00:18:25,919 --> 00:18:30,160
and they enable some effects or it could

466
00:18:28,799 --> 00:18:33,120
mean that something on the

467
00:18:30,160 --> 00:18:34,880
on the hardware is triggered to enable

468
00:18:33,120 --> 00:18:38,239
this effect where the voice is

469
00:18:34,880 --> 00:18:38,240
louder than the music

470
00:18:39,760 --> 00:18:45,120
and then the hardware player the user

471
00:18:43,120 --> 00:18:47,120
goes and clicks a button on the hardware

472
00:18:45,120 --> 00:18:48,239
and there's a radio hardware player that

473
00:18:47,120 --> 00:18:50,799
starts streaming

474
00:18:48,240 --> 00:18:52,720
to the amplifier without passing media

475
00:18:50,799 --> 00:18:53,918
through the main cpu but

476
00:18:52,720 --> 00:18:55,840
because we have this graph

477
00:18:53,919 --> 00:18:57,200
representation the policy management

478
00:18:55,840 --> 00:18:59,840
understands that it needs to

479
00:18:57,200 --> 00:19:01,120
unlink that media player at top which

480
00:18:59,840 --> 00:19:04,480
was previously linked

481
00:19:01,120 --> 00:19:10,959
and which is in software so

482
00:19:04,480 --> 00:19:12,559
this is um how it works and then we have

483
00:19:10,960 --> 00:19:14,880
how how do we make the connection

484
00:19:12,559 --> 00:19:18,879
between the endpoints and the actual

485
00:19:14,880 --> 00:19:21,440
uh media nodes so maybe you have uh

486
00:19:18,880 --> 00:19:23,440
again two endpoints uh an application

487
00:19:21,440 --> 00:19:26,880
that plays something and um

488
00:19:23,440 --> 00:19:29,840
and software an amplifier

489
00:19:26,880 --> 00:19:30,480
something that plays and you want to

490
00:19:29,840 --> 00:19:33,199
implement

491
00:19:30,480 --> 00:19:34,559
uh volume controls per stream so you

492
00:19:33,200 --> 00:19:36,559
have the multimedia stream and the

493
00:19:34,559 --> 00:19:38,320
navigation stream which are as i said

494
00:19:36,559 --> 00:19:40,000
earlier something that needs to be

495
00:19:38,320 --> 00:19:43,840
treated differently

496
00:19:40,000 --> 00:19:45,600
uh so the the software dsp also output

497
00:19:43,840 --> 00:19:48,639
and point that i've written there

498
00:19:45,600 --> 00:19:50,320
is creating a couple of dsp nodes there

499
00:19:48,640 --> 00:19:51,039
that implement volume controls per

500
00:19:50,320 --> 00:19:53,039
stream

501
00:19:51,039 --> 00:19:54,720
and as soon as you make this virtual

502
00:19:53,039 --> 00:19:56,640
link on the endpoints graph

503
00:19:54,720 --> 00:19:59,840
it goes and creates the actual link on

504
00:19:56,640 --> 00:19:59,840
the media routing graph

505
00:20:00,720 --> 00:20:03,919
and in the in the case where there is a

506
00:20:03,360 --> 00:20:07,120
hardware

507
00:20:03,919 --> 00:20:09,200
dedicated dsp that can support

508
00:20:07,120 --> 00:20:11,520
these streams in the hardware and you

509
00:20:09,200 --> 00:20:14,880
can trigger

510
00:20:11,520 --> 00:20:18,480
the different volumes per stream by

511
00:20:14,880 --> 00:20:21,440
sending some comments to the hardware

512
00:20:18,480 --> 00:20:23,679
it's still the same externally so you

513
00:20:21,440 --> 00:20:25,760
can make a link on the endpoints graph

514
00:20:23,679 --> 00:20:27,039
and then the session manager which has a

515
00:20:25,760 --> 00:20:29,280
module that implements

516
00:20:27,039 --> 00:20:31,600
this endpoint it understands that it

517
00:20:29,280 --> 00:20:34,240
needs to go and send a message to the

518
00:20:31,600 --> 00:20:37,360
hardware amplifier to enable that

519
00:20:34,240 --> 00:20:37,360
different volume effect

520
00:20:39,039 --> 00:20:42,400
so what's the status of web number right

521
00:20:41,200 --> 00:20:46,480
now

522
00:20:42,400 --> 00:20:48,720
it currently works nicely for agl

523
00:20:46,480 --> 00:20:49,840
on the demo that we have on building k

524
00:20:48,720 --> 00:20:53,200
uh we use for

525
00:20:49,840 --> 00:20:56,879
five wire and web lumber at the moment

526
00:20:53,200 --> 00:20:58,880
um the api is setting down uh we are

527
00:20:56,880 --> 00:21:00,640
we're doing some more refactoring on the

528
00:20:58,880 --> 00:21:02,799
api level on the library but it's

529
00:21:00,640 --> 00:21:04,799
setting down and we've just recently

530
00:21:02,799 --> 00:21:07,760
started generating documentation

531
00:21:04,799 --> 00:21:08,080
using hotdog and i'm i'm in the process

532
00:21:07,760 --> 00:21:11,039
of

533
00:21:08,080 --> 00:21:14,080
documenting right now i started like

534
00:21:11,039 --> 00:21:15,679
last week i pushed some dogs

535
00:21:14,080 --> 00:21:17,439
there are some shortcomings like it

536
00:21:15,679 --> 00:21:19,600
doesn't have flexible policy

537
00:21:17,440 --> 00:21:22,000
although the policy is configurable it's

538
00:21:19,600 --> 00:21:24,240
not configurable enough

539
00:21:22,000 --> 00:21:25,840
and it works only for the agl demo and

540
00:21:24,240 --> 00:21:27,280
nothing else right now

541
00:21:25,840 --> 00:21:29,039
and there is no security management

542
00:21:27,280 --> 00:21:30,158
implemented we just give access to all

543
00:21:29,039 --> 00:21:33,760
the applications

544
00:21:30,159 --> 00:21:33,760
which is bad but

545
00:21:34,240 --> 00:21:39,919
we have a plan so the next steps

546
00:21:37,840 --> 00:21:42,158
what i want to do next is experiment

547
00:21:39,919 --> 00:21:45,200
with a scriptable policy provide

548
00:21:42,159 --> 00:21:48,240
something provide an api that scripts

549
00:21:45,200 --> 00:21:48,799
can be written to to to influence how

550
00:21:48,240 --> 00:21:50,799
these

551
00:21:48,799 --> 00:21:53,120
decisions are taken about what to link

552
00:21:50,799 --> 00:21:53,840
where and there is a runtime called

553
00:21:53,120 --> 00:21:57,039
anatoly

554
00:21:53,840 --> 00:21:59,600
written by uh bastian serra who

555
00:21:57,039 --> 00:22:00,240
who wrote this basically for this

556
00:21:59,600 --> 00:22:04,000
purpose

557
00:22:00,240 --> 00:22:05,760
for um managing pipewire policies

558
00:22:04,000 --> 00:22:07,360
so my next step is to experiment with

559
00:22:05,760 --> 00:22:10,158
that see if that's something

560
00:22:07,360 --> 00:22:11,039
that makes sense and if we can write

561
00:22:10,159 --> 00:22:14,240
nice scripts

562
00:22:11,039 --> 00:22:16,240
like that but other other ways

563
00:22:14,240 --> 00:22:18,080
of doing that would be also acceptable

564
00:22:16,240 --> 00:22:19,679
and welcome

565
00:22:18,080 --> 00:22:21,439
the other thing is improve desktop

566
00:22:19,679 --> 00:22:23,280
compatibility and make a drop-in

567
00:22:21,440 --> 00:22:24,840
replacement for pulse audio

568
00:22:23,280 --> 00:22:27,840
that currently doesn't work on the

569
00:22:24,840 --> 00:22:27,840
desktop

570
00:22:27,919 --> 00:22:31,440
another next step is to enable

571
00:22:29,360 --> 00:22:34,240
management of video video nodes

572
00:22:31,440 --> 00:22:35,679
enable camera inputs and screencast

573
00:22:34,240 --> 00:22:37,520
inputs

574
00:22:35,679 --> 00:22:38,720
and implement security management there

575
00:22:37,520 --> 00:22:41,039
is a design for that

576
00:22:38,720 --> 00:22:43,600
i just haven't gotten around to it to

577
00:22:41,039 --> 00:22:43,600
implement it

578
00:22:43,760 --> 00:22:47,039
the source code it's all on gitlab for

579
00:22:46,000 --> 00:22:49,360
the desktop.org

580
00:22:47,039 --> 00:22:52,240
slash pipe wire you can find both pipe

581
00:22:49,360 --> 00:22:53,840
wire and wire plumber in there

582
00:22:52,240 --> 00:22:55,520
you can make a merge request there you

583
00:22:53,840 --> 00:22:58,320
can find issues there

584
00:22:55,520 --> 00:22:58,799
the wiki is there everything's there and

585
00:22:58,320 --> 00:23:02,480
on the

586
00:22:58,799 --> 00:23:04,720
on the agile front uh i maintain a

587
00:23:02,480 --> 00:23:06,159
branch of pipe wire with the agent

588
00:23:04,720 --> 00:23:09,280
specific

589
00:23:06,159 --> 00:23:09,600
commits uh that i had to make although

590
00:23:09,280 --> 00:23:11,520
i'm

591
00:23:09,600 --> 00:23:13,039
i'm constantly pushing them upstream so

592
00:23:11,520 --> 00:23:14,559
as soon as they are merged upstream i

593
00:23:13,039 --> 00:23:17,679
remove them from the branch and

594
00:23:14,559 --> 00:23:19,200
i rebase and then there is this meta

595
00:23:17,679 --> 00:23:22,320
pipe wire yocto layer

596
00:23:19,200 --> 00:23:24,799
icl is based on yokto so these are the

597
00:23:22,320 --> 00:23:25,439
recipes to build pipe wire and wire

598
00:23:24,799 --> 00:23:28,799
plumber

599
00:23:25,440 --> 00:23:37,050
inside hl thank you very much

600
00:23:28,799 --> 00:23:40,440
any questions

601
00:23:37,050 --> 00:23:40,440
[Applause]

602
00:23:44,240 --> 00:23:47,440
uh the question is if i have any

603
00:23:45,679 --> 00:23:48,640
benchmarks comparing pulsar to the pipe

604
00:23:47,440 --> 00:23:51,200
wire um

605
00:23:48,640 --> 00:23:51,760
yes i had the benchmark that's from last

606
00:23:51,200 --> 00:23:55,279
year

607
00:23:51,760 --> 00:23:58,640
so it's not up to date um but it was

608
00:23:55,279 --> 00:24:01,679
looking like um i don't i'm sorry i

609
00:23:58,640 --> 00:24:01,679
don't have the slide with me

610
00:24:02,400 --> 00:24:08,320
but we had some some comparison of uh

611
00:24:05,440 --> 00:24:10,799
pipe wire basically taking a stream of

612
00:24:08,320 --> 00:24:12,399
5.1 streams or six channels

613
00:24:10,799 --> 00:24:14,879
transforming it in a couple of ways

614
00:24:12,400 --> 00:24:18,080
resampling changing the format and

615
00:24:14,880 --> 00:24:20,880
taking it out that was using uh

616
00:24:18,080 --> 00:24:22,960
something like six percent cpu uh with

617
00:24:20,880 --> 00:24:26,720
um

618
00:24:22,960 --> 00:24:28,720
64 samples latency

619
00:24:26,720 --> 00:24:31,520
uh while pulsodio at the same

620
00:24:28,720 --> 00:24:33,039
configuration was using 100 cpu it was

621
00:24:31,520 --> 00:24:36,158
failing

622
00:24:33,039 --> 00:24:38,400
so that was a good comparison was like

623
00:24:36,159 --> 00:24:38,400
that

624
00:24:39,039 --> 00:24:45,840
i'm sorry i don't have latest statistics

625
00:24:42,320 --> 00:24:48,158
but uh yeah it's looking really really

626
00:24:45,840 --> 00:24:48,158
good

627
00:24:49,360 --> 00:24:52,799
in terms of flexibility over here yeah

628
00:24:51,760 --> 00:24:53,919
um you said you were

629
00:24:52,799 --> 00:24:55,279
looking to do more flexibility we're

630
00:24:53,919 --> 00:24:57,760
talking about boot time flexibility or

631
00:24:55,279 --> 00:24:59,520
runtime flexibility

632
00:24:57,760 --> 00:25:02,000
because like with the adoption of things

633
00:24:59,520 --> 00:25:04,559
like a to b in the audio space now

634
00:25:02,000 --> 00:25:05,919
you're getting um nodes that are coming

635
00:25:04,559 --> 00:25:10,080
on and off the buses all the time

636
00:25:05,919 --> 00:25:13,120
that are making audio harder to manage

637
00:25:10,080 --> 00:25:15,360
yeah um this is uh pipe wire is very

638
00:25:13,120 --> 00:25:16,879
dynamic in how it manages hardware so

639
00:25:15,360 --> 00:25:19,279
you could um

640
00:25:16,880 --> 00:25:20,080
it can detect things coming up and

641
00:25:19,279 --> 00:25:22,960
moving out

642
00:25:20,080 --> 00:25:24,080
uh all the time and does that include

643
00:25:22,960 --> 00:25:26,480
like firmware because like

644
00:25:24,080 --> 00:25:28,320
like um we can you can have uh a to b

645
00:25:26,480 --> 00:25:29,919
nodes with dsps in them that the

646
00:25:28,320 --> 00:25:31,600
firmware in the dsp

647
00:25:29,919 --> 00:25:35,440
which implements different functionality

648
00:25:31,600 --> 00:25:35,439
gets changed dynamically as well

649
00:25:35,520 --> 00:25:38,559
yeah i don't i don't see why it wouldn't

650
00:25:37,520 --> 00:25:41,039
be supported but

651
00:25:38,559 --> 00:25:41,600
i never looked at this kind of hardware

652
00:25:41,039 --> 00:25:45,760
okay

653
00:25:41,600 --> 00:25:47,760
okay okay

654
00:25:45,760 --> 00:25:49,039
okay there's no time for more questions

655
00:25:47,760 --> 00:25:57,600
thank you very much for

656
00:25:49,039 --> 00:25:59,679
for listening

657
00:25:57,600 --> 00:25:59,678
you

