1
00:00:14,799 --> 00:00:18,720
okay

2
00:00:15,519 --> 00:00:19,119
so hello everybody uh let me introduce

3
00:00:18,720 --> 00:00:21,919
you

4
00:00:19,119 --> 00:00:24,080
john joe conway who is a long time

5
00:00:21,920 --> 00:00:26,800
contributor of pascal sql

6
00:00:24,080 --> 00:00:27,439
and we will talk about cell comp for

7
00:00:26,800 --> 00:00:30,640
your

8
00:00:27,439 --> 00:00:34,480
particular sql thank you

9
00:00:30,640 --> 00:00:36,320
thanks so is this mike back on

10
00:00:34,480 --> 00:00:37,680
can you hear me in the back right all

11
00:00:36,320 --> 00:00:39,200
right good

12
00:00:37,680 --> 00:00:41,120
all right so like i said my name is joe

13
00:00:39,200 --> 00:00:43,040
conway i've been

14
00:00:41,120 --> 00:00:44,640
working around and with the postgres

15
00:00:43,040 --> 00:00:46,559
community for a lot of years

16
00:00:44,640 --> 00:00:49,280
20 plus years using postgres i've been a

17
00:00:46,559 --> 00:00:52,399
committer for about the last

18
00:00:49,280 --> 00:00:54,239
16 or 17 years i guess and

19
00:00:52,399 --> 00:00:56,399
i'm on the pg infrastructure team i'm

20
00:00:54,239 --> 00:01:00,320
also the vp of engineering for a

21
00:00:56,399 --> 00:01:00,320
company called crunchy data in the us

22
00:01:02,000 --> 00:01:07,680
so i do we do a lot of work with

23
00:01:05,680 --> 00:01:09,119
companies that care a lot about security

24
00:01:07,680 --> 00:01:10,799
or organizations that care a lot about

25
00:01:09,119 --> 00:01:13,439
security and so i've done a number of

26
00:01:10,799 --> 00:01:15,040
talks on security

27
00:01:13,439 --> 00:01:17,919
the way i like to think about it is kind

28
00:01:15,040 --> 00:01:21,040
of in a holistic way security

29
00:01:17,920 --> 00:01:24,080
involves protecting your database

30
00:01:21,040 --> 00:01:25,360
from the outside right the the operating

31
00:01:24,080 --> 00:01:28,080
system that it's on

32
00:01:25,360 --> 00:01:29,600
the box actually getting to the box how

33
00:01:28,080 --> 00:01:32,079
the operating system is protecting

34
00:01:29,600 --> 00:01:35,360
postgres itself

35
00:01:32,079 --> 00:01:36,240
also from the inside inside of postgres

36
00:01:35,360 --> 00:01:38,320
you lock down

37
00:01:36,240 --> 00:01:40,240
permissions so that only certain users

38
00:01:38,320 --> 00:01:42,398
can access certain tables

39
00:01:40,240 --> 00:01:44,158
and so on so that's kind of the crunchy

40
00:01:42,399 --> 00:01:47,200
core

41
00:01:44,159 --> 00:01:49,600
and then but once someone is inside

42
00:01:47,200 --> 00:01:50,880
your database you have to worry about

43
00:01:49,600 --> 00:01:53,759
them finding some kind of

44
00:01:50,880 --> 00:01:54,720
a a bug in postgres and exploiting it

45
00:01:53,759 --> 00:01:57,040
right

46
00:01:54,720 --> 00:01:58,560
so part of what you want to do to

47
00:01:57,040 --> 00:02:00,719
enhance security there is

48
00:01:58,560 --> 00:02:02,000
what i call confinement so reducing

49
00:02:00,719 --> 00:02:03,600
attack surface

50
00:02:02,000 --> 00:02:06,320
and that's what this talk is all about

51
00:02:03,600 --> 00:02:08,639
it's about reducing attack surface

52
00:02:06,320 --> 00:02:10,399
once you're inside of postgres using

53
00:02:08,639 --> 00:02:12,958
setcomp

54
00:02:10,399 --> 00:02:14,000
and then the other aspect of security

55
00:02:12,959 --> 00:02:16,640
which we should mention

56
00:02:14,000 --> 00:02:18,319
is you should instrument you should have

57
00:02:16,640 --> 00:02:18,640
monitoring alerting setup and it should

58
00:02:18,319 --> 00:02:21,359
not

59
00:02:18,640 --> 00:02:22,000
just be monitoring alerting around

60
00:02:21,360 --> 00:02:25,120
performance

61
00:02:22,000 --> 00:02:27,840
issues things like monitoring

62
00:02:25,120 --> 00:02:29,280
did someone restart my database sending

63
00:02:27,840 --> 00:02:31,200
an alert

64
00:02:29,280 --> 00:02:33,120
so that if someone redid restart your

65
00:02:31,200 --> 00:02:33,839
database how come you didn't know about

66
00:02:33,120 --> 00:02:37,840
it

67
00:02:33,840 --> 00:02:37,840
or hopefully you did know about it

68
00:02:38,560 --> 00:02:43,920
so we're going to do today is talk about

69
00:02:41,760 --> 00:02:45,200
a little bit broadly about setcomp i'm

70
00:02:43,920 --> 00:02:47,760
going to show

71
00:02:45,200 --> 00:02:48,720
some example c code actually just to

72
00:02:47,760 --> 00:02:52,480
give you a feel for

73
00:02:48,720 --> 00:02:55,359
how it works and then i'm going to go

74
00:02:52,480 --> 00:02:58,399
into how you might use systemd

75
00:02:55,360 --> 00:03:00,480
to to set up setcomp for a service and

76
00:02:58,400 --> 00:03:02,840
then specifically for postgres

77
00:03:00,480 --> 00:03:05,518
and then i wrote an extension called pg

78
00:03:02,840 --> 00:03:08,560
setcomp and so i'll end with that

79
00:03:05,519 --> 00:03:09,599
the repository for that is we just made

80
00:03:08,560 --> 00:03:12,640
it public

81
00:03:09,599 --> 00:03:13,920
about a week ago it's brand new i've not

82
00:03:12,640 --> 00:03:14,879
actually even done a release out of it

83
00:03:13,920 --> 00:03:16,319
yet

84
00:03:14,879 --> 00:03:17,679
but the code is pretty solid i've been

85
00:03:16,319 --> 00:03:18,560
working on it for several months and in

86
00:03:17,680 --> 00:03:20,400
fact

87
00:03:18,560 --> 00:03:22,080
it originates from a patch that i

88
00:03:20,400 --> 00:03:24,879
submitted to the upstream postgres

89
00:03:22,080 --> 00:03:27,440
project last august and the community

90
00:03:24,879 --> 00:03:30,560
was not quite ready for the idea of

91
00:03:27,440 --> 00:03:32,400
having set comp filters built in so

92
00:03:30,560 --> 00:03:33,599
instead i implement it as a as an

93
00:03:32,400 --> 00:03:34,959
extension which is one of the great

94
00:03:33,599 --> 00:03:36,238
things about postgres

95
00:03:34,959 --> 00:03:38,799
that you can do a lot of things through

96
00:03:36,239 --> 00:03:41,519
extensions

97
00:03:38,799 --> 00:03:44,239
so i'll talk about how that works and

98
00:03:41,519 --> 00:03:44,239
how to use that

99
00:03:44,799 --> 00:03:48,480
so just give me a feel how many people

100
00:03:47,120 --> 00:03:50,799
in here i assume if you're in here you

101
00:03:48,480 --> 00:03:54,480
have some idea what set comp is

102
00:03:50,799 --> 00:03:57,360
anyone about half the room

103
00:03:54,480 --> 00:03:58,720
okay so this is kind of you know this

104
00:03:57,360 --> 00:03:58,959
paragraph i'm not going to try and read

105
00:03:58,720 --> 00:04:01,840
it

106
00:03:58,959 --> 00:04:01,840
is is

107
00:04:02,080 --> 00:04:09,360
from the um the documentation kernel.org

108
00:04:06,159 --> 00:04:12,399
but basically setcomp stands for secure

109
00:04:09,360 --> 00:04:14,959
computing with filters it's a filtering

110
00:04:12,400 --> 00:04:17,199
mechanism that's built into the kernel

111
00:04:14,959 --> 00:04:19,759
and it allows kernel attack surface

112
00:04:17,199 --> 00:04:19,759
reduction

113
00:04:20,000 --> 00:04:23,600
and what it allows you to do in kind of

114
00:04:22,960 --> 00:04:25,840
really

115
00:04:23,600 --> 00:04:27,440
high level big picture is it allows you

116
00:04:25,840 --> 00:04:30,080
to either block

117
00:04:27,440 --> 00:04:32,880
or at least audit what sys calls are

118
00:04:30,080 --> 00:04:32,880
made to the kernel

119
00:04:33,759 --> 00:04:38,800
the original version of this was called

120
00:04:35,440 --> 00:04:41,280
strict mode it came out in about 2005

121
00:04:38,800 --> 00:04:42,000
in linux 2.6 so it's been around quite a

122
00:04:41,280 --> 00:04:44,719
while

123
00:04:42,000 --> 00:04:45,840
but this was pretty limited capability

124
00:04:44,720 --> 00:04:48,800
version of it

125
00:04:45,840 --> 00:04:51,119
basically was hard-coded you know you

126
00:04:48,800 --> 00:04:53,680
the idea was that you would

127
00:04:51,120 --> 00:04:55,040
make a call to load setcomp and at that

128
00:04:53,680 --> 00:04:58,000
point

129
00:04:55,040 --> 00:04:59,440
the process irreversibly could only make

130
00:04:58,000 --> 00:05:02,639
these four sys calls

131
00:04:59,440 --> 00:05:04,320
so you could basically exit

132
00:05:02,639 --> 00:05:05,759
you can read and write from a file

133
00:05:04,320 --> 00:05:07,280
descriptor that's already open that's

134
00:05:05,759 --> 00:05:09,199
all you could do

135
00:05:07,280 --> 00:05:11,039
so that you know had i'm sure some

136
00:05:09,199 --> 00:05:15,440
useful

137
00:05:11,039 --> 00:05:17,120
applications but it was pretty limiting

138
00:05:15,440 --> 00:05:19,039
and anything else any other sys call

139
00:05:17,120 --> 00:05:20,960
would actually call cause the process to

140
00:05:19,039 --> 00:05:24,800
be killed immediately with cis skill

141
00:05:20,960 --> 00:05:28,400
sid killed

142
00:05:24,800 --> 00:05:31,039
in 2012 setcomp filter mode came out and

143
00:05:28,400 --> 00:05:32,560
this is also sometimes called setcomppf

144
00:05:31,039 --> 00:05:34,880
i think i was in a talk yesterday and

145
00:05:32,560 --> 00:05:37,440
someone mentioned setcomppf

146
00:05:34,880 --> 00:05:38,560
bpf is a built-in kernel facility for

147
00:05:37,440 --> 00:05:40,160
doing

148
00:05:38,560 --> 00:05:41,600
filtering it was originally for packet

149
00:05:40,160 --> 00:05:42,800
filtering but it can also be used for

150
00:05:41,600 --> 00:05:44,960
other things

151
00:05:42,800 --> 00:05:46,080
and so this was used to add a flexible

152
00:05:44,960 --> 00:05:48,560
way

153
00:05:46,080 --> 00:05:50,000
to filter what sys calls you want to

154
00:05:48,560 --> 00:05:51,680
allow and which ones

155
00:05:50,000 --> 00:05:54,320
you don't want to allow and what action

156
00:05:51,680 --> 00:05:55,960
you want to take when they get called

157
00:05:54,320 --> 00:05:58,080
and so you know this is kind of an

158
00:05:55,960 --> 00:05:58,960
oversimplification to some extent there

159
00:05:58,080 --> 00:06:02,400
are more

160
00:05:58,960 --> 00:06:05,758
actions than this but as far as their

161
00:06:02,400 --> 00:06:07,599
kind of basics you can either based on

162
00:06:05,759 --> 00:06:09,520
the syscall you can add a rule that will

163
00:06:07,600 --> 00:06:12,319
say either kill the syscall

164
00:06:09,520 --> 00:06:13,280
kill the process if the syscall is used

165
00:06:12,319 --> 00:06:17,199
throw an error

166
00:06:13,280 --> 00:06:19,840
and you get supply the error number log

167
00:06:17,199 --> 00:06:21,199
the event so don't do anything allow it

168
00:06:19,840 --> 00:06:24,080
but log it

169
00:06:21,199 --> 00:06:25,120
in audit d log or just simply allow the

170
00:06:24,080 --> 00:06:28,479
syscall

171
00:06:25,120 --> 00:06:30,479
and so you can use these along with uh

172
00:06:28,479 --> 00:06:32,719
the fact that you can set a default in

173
00:06:30,479 --> 00:06:34,719
your filter so you can say

174
00:06:32,720 --> 00:06:36,479
i want to build a white list or i can

175
00:06:34,720 --> 00:06:40,160
build a blacklist

176
00:06:36,479 --> 00:06:42,960
if your default is allow

177
00:06:40,160 --> 00:06:44,560
and you set up rules for blocking

178
00:06:42,960 --> 00:06:45,280
certain syscalls you've effectively

179
00:06:44,560 --> 00:06:47,280
built

180
00:06:45,280 --> 00:06:48,880
a blacklist that's not what's

181
00:06:47,280 --> 00:06:50,400
recommended what's recommended is you

182
00:06:48,880 --> 00:06:52,000
build a white list which means

183
00:06:50,400 --> 00:06:54,080
you set your default to something like

184
00:06:52,000 --> 00:06:56,720
log or kill

185
00:06:54,080 --> 00:06:59,440
and then you provide a specific list of

186
00:06:56,720 --> 00:07:02,800
syscalls that you want to allow

187
00:06:59,440 --> 00:07:05,840
now there's a library called libsetcom

188
00:07:02,800 --> 00:07:09,120
i think written by paul moore and

189
00:07:05,840 --> 00:07:12,318
that uses setcomppf and it also

190
00:07:09,120 --> 00:07:13,759
is a nice interface to setcomp from

191
00:07:12,319 --> 00:07:15,520
c program so that's what i use for

192
00:07:13,759 --> 00:07:17,759
pgs.com i

193
00:07:15,520 --> 00:07:19,440
really have no idea what um systemd is

194
00:07:17,759 --> 00:07:22,240
doing internally i didn't

195
00:07:19,440 --> 00:07:22,240
try and look at that

196
00:07:24,560 --> 00:07:28,840
so first off you need to have setcomp

197
00:07:26,880 --> 00:07:30,159
built into your kernel the support for

198
00:07:28,840 --> 00:07:33,198
it

199
00:07:30,160 --> 00:07:34,000
so the way you can check that is is

200
00:07:33,199 --> 00:07:36,800
using this

201
00:07:34,000 --> 00:07:37,680
this grep command and you should see

202
00:07:36,800 --> 00:07:40,240
something like this

203
00:07:37,680 --> 00:07:41,360
basically indicating that your fill your

204
00:07:40,240 --> 00:07:44,560
kernel

205
00:07:41,360 --> 00:07:45,599
has been configured for setcomp these

206
00:07:44,560 --> 00:07:47,759
days i'd be

207
00:07:45,599 --> 00:07:49,120
pretty surprised if you came across one

208
00:07:47,759 --> 00:07:53,759
that wasn't

209
00:07:49,120 --> 00:07:53,759
but it is worth checking anyway

210
00:07:56,080 --> 00:07:59,599
this is a kind of a little bit of a side

211
00:07:58,400 --> 00:08:03,359
issue but

212
00:07:59,599 --> 00:08:05,840
there's um another kernel parameter

213
00:08:03,360 --> 00:08:08,960
basically it's called no new privs

214
00:08:05,840 --> 00:08:10,960
and what that does is it basically says

215
00:08:08,960 --> 00:08:14,159
that

216
00:08:10,960 --> 00:08:17,520
if you set no new privs then the process

217
00:08:14,160 --> 00:08:18,720
and any child process of that process

218
00:08:17,520 --> 00:08:23,758
could never

219
00:08:18,720 --> 00:08:26,800
increase privileges and in order to use

220
00:08:23,759 --> 00:08:29,680
setcomp as an unprivileged user

221
00:08:26,800 --> 00:08:31,599
this has to be set because otherwise it

222
00:08:29,680 --> 00:08:33,919
wouldn't make sense because then

223
00:08:31,599 --> 00:08:35,039
if you didn't have this set and you had

224
00:08:33,919 --> 00:08:36,240
some filters

225
00:08:35,039 --> 00:08:41,838
you wouldn't want someone to be able to

226
00:08:36,240 --> 00:08:41,839
bypass those filters down the line

227
00:08:45,760 --> 00:08:51,360
so in terms of libsec comp the basic

228
00:08:49,200 --> 00:08:54,080
usage of it is that you're going to

229
00:08:51,360 --> 00:08:56,080
init setcomp as i said earlier with some

230
00:08:54,080 --> 00:08:59,680
kind of a default action

231
00:08:56,080 --> 00:09:02,000
you're going to add a number of rules

232
00:08:59,680 --> 00:09:03,760
for specific sys calls and then you're

233
00:09:02,000 --> 00:09:06,560
going to load the filter

234
00:09:03,760 --> 00:09:08,399
and you can load a filter you can load

235
00:09:06,560 --> 00:09:10,880
multiple filters

236
00:09:08,399 --> 00:09:12,160
and basically they just layer one on top

237
00:09:10,880 --> 00:09:15,279
of the other

238
00:09:12,160 --> 00:09:18,000
the key aspect of this again being that

239
00:09:15,279 --> 00:09:19,120
once a filter is loaded subsequent

240
00:09:18,000 --> 00:09:22,560
filters cannot

241
00:09:19,120 --> 00:09:25,920
reduce the requirements

242
00:09:22,560 --> 00:09:28,399
so you cannot at one point say that

243
00:09:25,920 --> 00:09:29,360
for a syscall of write i want to throw

244
00:09:28,399 --> 00:09:32,000
an error

245
00:09:29,360 --> 00:09:33,760
and then later load a filter that says i

246
00:09:32,000 --> 00:09:34,480
want to allow cisco right that won't

247
00:09:33,760 --> 00:09:36,240
work

248
00:09:34,480 --> 00:09:39,120
because the most restrictive action is

249
00:09:36,240 --> 00:09:39,120
the one will get used

250
00:09:40,640 --> 00:09:45,199
so as i just said once the filter is

251
00:09:42,399 --> 00:09:48,000
loaded you cannot relax the restrictions

252
00:09:45,200 --> 00:09:49,040
you can load multiple filters and

253
00:09:48,000 --> 00:09:51,519
importantly all child

254
00:09:49,040 --> 00:09:52,240
processes inherit all the active filters

255
00:09:51,519 --> 00:09:54,640
as well

256
00:09:52,240 --> 00:09:56,160
they can set their own and the highest

257
00:09:54,640 --> 00:09:58,880
precedence action is always the one

258
00:09:56,160 --> 00:09:58,880
that's going to be taken

259
00:10:01,120 --> 00:10:07,279
so is this readable in the back good

260
00:10:04,720 --> 00:10:08,560
so what i wanted to do here that i had

261
00:10:07,279 --> 00:10:10,800
actually

262
00:10:08,560 --> 00:10:13,518
was doing this just to kind of in

263
00:10:10,800 --> 00:10:16,800
investigate the behaviors of

264
00:10:13,519 --> 00:10:18,480
libsec comp and setcomp in general and

265
00:10:16,800 --> 00:10:20,640
as i was writing these slides and as i

266
00:10:18,480 --> 00:10:22,240
was doing the work on the extension

267
00:10:20,640 --> 00:10:24,000
and one of the things that became clear

268
00:10:22,240 --> 00:10:27,279
to me

269
00:10:24,000 --> 00:10:29,120
secco can be really um

270
00:10:27,279 --> 00:10:30,320
kind of hard to understand and get your

271
00:10:29,120 --> 00:10:31,680
mind around

272
00:10:30,320 --> 00:10:33,519
if you haven't played with it a little

273
00:10:31,680 --> 00:10:36,880
bit so

274
00:10:33,519 --> 00:10:38,800
this is kind of a simple example and

275
00:10:36,880 --> 00:10:40,000
but it illustrates a number of important

276
00:10:38,800 --> 00:10:43,040
points so

277
00:10:40,000 --> 00:10:43,680
just basically what i'm doing here you

278
00:10:43,040 --> 00:10:47,360
know

279
00:10:43,680 --> 00:10:48,319
i'm creating a uh context for the

280
00:10:47,360 --> 00:10:49,680
setcomp

281
00:10:48,320 --> 00:10:51,360
i'm going to loop three times so i'm

282
00:10:49,680 --> 00:10:54,399
basically going to create

283
00:10:51,360 --> 00:10:57,839
and load three set comp filters

284
00:10:54,399 --> 00:10:59,920
on the the first iteration i'm going to

285
00:10:57,839 --> 00:11:01,360
allow my right action is going to be

286
00:10:59,920 --> 00:11:02,959
allowed

287
00:11:01,360 --> 00:11:04,399
on the second iteration it's going to be

288
00:11:02,959 --> 00:11:06,239
log and on the third iteration it's

289
00:11:04,399 --> 00:11:08,160
going to be allow

290
00:11:06,240 --> 00:11:12,320
and so what i'm doing is i'm emitting

291
00:11:08,160 --> 00:11:15,040
satcomp with a default action of log

292
00:11:12,320 --> 00:11:15,760
and then i'm adding a rule that says

293
00:11:15,040 --> 00:11:19,920
write

294
00:11:15,760 --> 00:11:21,839
syscall should be whatever my action is

295
00:11:19,920 --> 00:11:23,199
so that in the first the first time

296
00:11:21,839 --> 00:11:24,560
through it'll be allowed the second time

297
00:11:23,200 --> 00:11:25,200
it will be log and the third time it

298
00:11:24,560 --> 00:11:28,079
will be right

299
00:11:25,200 --> 00:11:28,880
allow and then i'm going to load the

300
00:11:28,079 --> 00:11:32,640
filter

301
00:11:28,880 --> 00:11:32,640
now i'm going to try and use printf

302
00:11:33,440 --> 00:11:37,120
and then finally at the end i'll release

303
00:11:35,519 --> 00:11:39,760
the context and i'll just so i'll load

304
00:11:37,120 --> 00:11:39,760
three filters

305
00:11:40,320 --> 00:11:48,079
when you do that you know so here's

306
00:11:44,160 --> 00:11:48,079
basically running

307
00:11:49,279 --> 00:11:55,519
running that compiled c code and

308
00:11:52,399 --> 00:11:56,000
if you look through the audit log what

309
00:11:55,519 --> 00:11:58,560
you find

310
00:11:56,000 --> 00:12:00,800
is you get these cis calls that get

311
00:11:58,560 --> 00:12:03,439
logged

312
00:12:00,800 --> 00:12:04,240
is that when i turn over is it too low

313
00:12:03,440 --> 00:12:07,360
in the back

314
00:12:04,240 --> 00:12:07,360
when i turn my head

315
00:12:07,519 --> 00:12:11,279
it's all right okay because i was

316
00:12:09,920 --> 00:12:12,639
getting the feeling was louder when i

317
00:12:11,279 --> 00:12:15,760
was

318
00:12:12,639 --> 00:12:19,040
looking forward so

319
00:12:15,760 --> 00:12:20,720
what's it interesting to note here is

320
00:12:19,040 --> 00:12:23,120
the only thing i did really was call

321
00:12:20,720 --> 00:12:26,639
printf and get all these syscalls get

322
00:12:23,120 --> 00:12:26,639
made kernel syscalls

323
00:12:27,120 --> 00:12:32,720
i'll go through this on the next slide

324
00:12:28,639 --> 00:12:35,760
but syscall 5 ends up being f-stat

325
00:12:32,720 --> 00:12:36,399
these two sys calls end up being pr

326
00:12:35,760 --> 00:12:40,160
control

327
00:12:36,399 --> 00:12:44,320
and setcomp syscall1 is right

328
00:12:40,160 --> 00:12:44,319
and this is uh basically an exit return

329
00:12:44,399 --> 00:12:47,519
and i'll talk about it a little bit

330
00:12:46,880 --> 00:12:50,160
later but

331
00:12:47,519 --> 00:12:52,160
in in the pg sec comp extension i

332
00:12:50,160 --> 00:12:55,199
provide a little shell script

333
00:12:52,160 --> 00:12:58,800
that will basically pull just the names

334
00:12:55,200 --> 00:13:00,160
of the system calls out of the audit log

335
00:12:58,800 --> 00:13:03,599
and put them in a form that makes it

336
00:13:00,160 --> 00:13:03,600
very easy to use with the extension

337
00:13:04,639 --> 00:13:07,839
so as you as you look at that simple bit

338
00:13:07,440 --> 00:13:10,160
of c

339
00:13:07,839 --> 00:13:12,079
code what you're seeing is first of all

340
00:13:10,160 --> 00:13:13,519
before the first time you've loaded a

341
00:13:12,079 --> 00:13:15,199
filter

342
00:13:13,519 --> 00:13:17,440
nothing gets logged right because

343
00:13:15,200 --> 00:13:21,040
there's no set comp filter loaded

344
00:13:17,440 --> 00:13:24,079
so the first pass through there were no

345
00:13:21,040 --> 00:13:25,439
no calls that were logged but

346
00:13:24,079 --> 00:13:28,079
the very first thing you see is that

347
00:13:25,440 --> 00:13:29,600
printf calls f-stat but it only calls it

348
00:13:28,079 --> 00:13:32,000
once

349
00:13:29,600 --> 00:13:34,160
i i don't even i haven't even really

350
00:13:32,000 --> 00:13:35,519
researched why that is i assumed

351
00:13:34,160 --> 00:13:37,120
that that's because the first time it

352
00:13:35,519 --> 00:13:38,240
gets called it needs to check to see if

353
00:13:37,120 --> 00:13:41,600
standard out is there

354
00:13:38,240 --> 00:13:44,720
i suppose right and

355
00:13:41,600 --> 00:13:47,040
printf clearly requires right

356
00:13:44,720 --> 00:13:48,560
but in that first filter i said right

357
00:13:47,040 --> 00:13:51,519
was allowed

358
00:13:48,560 --> 00:13:53,119
so it did not get logged now in the

359
00:13:51,519 --> 00:13:55,279
second loop

360
00:13:53,120 --> 00:13:57,360
i add a rule that says right should now

361
00:13:55,279 --> 00:14:00,079
be logged

362
00:13:57,360 --> 00:14:01,040
and now all of a sudden we see the the

363
00:14:00,079 --> 00:14:04,638
output in the log

364
00:14:01,040 --> 00:14:06,880
for pr control and setcomp

365
00:14:04,639 --> 00:14:09,680
because they were actually blocked in

366
00:14:06,880 --> 00:14:09,680
the first filter

367
00:14:09,760 --> 00:14:13,439
and stuff f-stat like i said is no

368
00:14:11,440 --> 00:14:16,079
longer called

369
00:14:13,440 --> 00:14:18,160
in the third loop again i see the pure

370
00:14:16,079 --> 00:14:20,479
control and set comp

371
00:14:18,160 --> 00:14:21,199
that third loop tries to add an allow

372
00:14:20,480 --> 00:14:23,920
rule

373
00:14:21,199 --> 00:14:25,040
for right but it's ineffective because

374
00:14:23,920 --> 00:14:26,399
it's already been

375
00:14:25,040 --> 00:14:29,040
blocked and i can't relax that

376
00:14:26,399 --> 00:14:29,040
restriction

377
00:14:29,440 --> 00:14:33,440
and then finally exit group gets called

378
00:14:31,279 --> 00:14:37,120
when the program exits

379
00:14:33,440 --> 00:14:39,120
so there's a very simple program and yet

380
00:14:37,120 --> 00:14:41,680
a fair amount of stuff going on with

381
00:14:39,120 --> 00:14:41,680
syscalls

382
00:14:42,399 --> 00:14:45,680
so this is a second example and this one

383
00:14:44,720 --> 00:14:48,880
i basically

384
00:14:45,680 --> 00:14:50,479
have specific allow rules for the all of

385
00:14:48,880 --> 00:14:52,320
the other

386
00:14:50,480 --> 00:14:53,680
syscalls except for write i'm still

387
00:14:52,320 --> 00:14:57,040
doing the

388
00:14:53,680 --> 00:14:59,279
you know log allow thing with the right

389
00:14:57,040 --> 00:15:01,519
so otherwise when you call it now it

390
00:14:59,279 --> 00:15:02,560
looks a lot simpler because

391
00:15:01,519 --> 00:15:05,040
all the other sys calls i've

392
00:15:02,560 --> 00:15:05,439
specifically allowed and now you can see

393
00:15:05,040 --> 00:15:08,079
that

394
00:15:05,440 --> 00:15:09,519
the right syscall gets does not get

395
00:15:08,079 --> 00:15:11,279
logged the first time but it does get

396
00:15:09,519 --> 00:15:14,639
logged the second two times

397
00:15:11,279 --> 00:15:17,519
because of that second filter

398
00:15:14,639 --> 00:15:17,519
so that makes sense

399
00:15:18,079 --> 00:15:22,399
like i said as you go through this you

400
00:15:20,800 --> 00:15:23,199
really have to wrap your mind about

401
00:15:22,399 --> 00:15:25,040
what's going on

402
00:15:23,199 --> 00:15:26,479
otherwise you sit there and you look at

403
00:15:25,040 --> 00:15:28,719
you say what

404
00:15:26,480 --> 00:15:30,880
you know just like weird stuff's going

405
00:15:28,720 --> 00:15:30,880
on

406
00:15:32,320 --> 00:15:39,279
so you know as i said printf gets um

407
00:15:36,079 --> 00:15:41,839
uses right and it gets logged

408
00:15:39,279 --> 00:15:41,839
twice

409
00:15:43,920 --> 00:15:46,959
okay so now we're going to switch gears

410
00:15:45,360 --> 00:15:50,639
into systemd

411
00:15:46,959 --> 00:15:55,839
support for satcom any questions about

412
00:15:50,639 --> 00:15:55,839
what i've talked about so far

413
00:16:05,120 --> 00:16:11,120
yeah yeah i'm gonna get to that kind of

414
00:16:08,160 --> 00:16:12,399
i'll talk about that more um oh so the

415
00:16:11,120 --> 00:16:16,160
question was

416
00:16:12,399 --> 00:16:19,440
how do we map um glib c

417
00:16:16,160 --> 00:16:23,439
calls to to kernel

418
00:16:19,440 --> 00:16:25,120
syscalls and i talk about that more

419
00:16:23,440 --> 00:16:26,800
kind of as i'm going through this but i

420
00:16:25,120 --> 00:16:29,920
guess in short

421
00:16:26,800 --> 00:16:31,920
um it's not an easy thing to do

422
00:16:29,920 --> 00:16:34,319
and everyone i've asked about it admits

423
00:16:31,920 --> 00:16:37,040
it's not an easy thing to do

424
00:16:34,320 --> 00:16:37,759
there are ways to do it with things like

425
00:16:37,040 --> 00:16:41,279
i guess

426
00:16:37,759 --> 00:16:44,399
p-trace and and

427
00:16:41,279 --> 00:16:44,399
there are people who have written

428
00:16:44,480 --> 00:16:51,440
bpf filters that do that kind of thing

429
00:16:48,320 --> 00:16:53,519
but what i found to be by far

430
00:16:51,440 --> 00:16:55,040
the easiest thing to do which is really

431
00:16:53,519 --> 00:16:58,079
the only one i did do

432
00:16:55,040 --> 00:17:01,360
was i wrote my own library for postgres

433
00:16:58,079 --> 00:17:04,959
right and one of the things

434
00:17:01,360 --> 00:17:07,360
and one of the reasons um i only support

435
00:17:04,959 --> 00:17:08,240
kind of the latest versions of libsec

436
00:17:07,359 --> 00:17:11,599
comp

437
00:17:08,240 --> 00:17:14,880
because of two things it it

438
00:17:11,599 --> 00:17:16,958
supports this log action

439
00:17:14,880 --> 00:17:19,120
which the older kernels do not and

440
00:17:16,959 --> 00:17:21,360
systemd does not

441
00:17:19,119 --> 00:17:22,559
which allow everything to happen just

442
00:17:21,359 --> 00:17:24,000
like it would have happened but

443
00:17:22,559 --> 00:17:26,720
everything goes to the log

444
00:17:24,000 --> 00:17:28,720
makes it really easy to kind of run your

445
00:17:26,720 --> 00:17:31,120
software through its paces

446
00:17:28,720 --> 00:17:32,000
now as people in the postgres community

447
00:17:31,120 --> 00:17:35,840
pointed out that's not

448
00:17:32,000 --> 00:17:37,440
perfect but what i

449
00:17:35,840 --> 00:17:39,360
will argue i guess i'll argue it now

450
00:17:37,440 --> 00:17:42,799
instead of later

451
00:17:39,360 --> 00:17:45,520
if you sufficiently run a

452
00:17:42,799 --> 00:17:46,000
production system through all of its

453
00:17:45,520 --> 00:17:48,160
paces

454
00:17:46,000 --> 00:17:49,520
the regression test for your application

455
00:17:48,160 --> 00:17:51,360
maybe all the regression tests for

456
00:17:49,520 --> 00:17:54,320
postgres

457
00:17:51,360 --> 00:17:55,918
maybe you make your default rule log for

458
00:17:54,320 --> 00:17:57,918
even six months

459
00:17:55,919 --> 00:18:00,400
right let it run and predict production

460
00:17:57,919 --> 00:18:03,679
for six months and watch audit log

461
00:18:00,400 --> 00:18:04,960
you're going to catch 99.9 percent of

462
00:18:03,679 --> 00:18:07,600
all sys calls that

463
00:18:04,960 --> 00:18:09,120
postgres is going to make in your audit

464
00:18:07,600 --> 00:18:10,480
log and you can go

465
00:18:09,120 --> 00:18:12,959
after you've done that initially and

466
00:18:10,480 --> 00:18:15,520
i'll show you that process at the end

467
00:18:12,960 --> 00:18:16,320
you're going to have the vast ones that

468
00:18:15,520 --> 00:18:19,360
pop up in

469
00:18:16,320 --> 00:18:21,120
syslog are going to be anomalies

470
00:18:19,360 --> 00:18:22,879
you're going to go investigate and see

471
00:18:21,120 --> 00:18:25,039
well why did i get that

472
00:18:22,880 --> 00:18:26,720
and then if you determine oh yeah okay

473
00:18:25,039 --> 00:18:29,760
in this very rare case postgres

474
00:18:26,720 --> 00:18:32,559
will use that syscall fine i add it to

475
00:18:29,760 --> 00:18:35,840
my allow list and i restart postgres

476
00:18:32,559 --> 00:18:37,520
um but if it

477
00:18:35,840 --> 00:18:39,520
there's no explanation for it maybe the

478
00:18:37,520 --> 00:18:42,400
explanation is that someone's trying to

479
00:18:39,520 --> 00:18:43,679
compromise your system right so i think

480
00:18:42,400 --> 00:18:46,720
in practice

481
00:18:43,679 --> 00:18:50,400
it's workable and but that

482
00:18:46,720 --> 00:18:51,919
allow action really makes it a whole lot

483
00:18:50,400 --> 00:18:55,200
simpler to figure out

484
00:18:51,919 --> 00:18:56,799
which sys calls you need so a little bit

485
00:18:55,200 --> 00:19:00,080
of a long-winded answer but

486
00:18:56,799 --> 00:19:02,000
hopefully that's good so systemd

487
00:19:00,080 --> 00:19:03,039
supports this comp filtering via some

488
00:19:02,000 --> 00:19:06,880
options

489
00:19:03,039 --> 00:19:09,440
um there's an advantage to that in that

490
00:19:06,880 --> 00:19:10,000
the control over the use of setcomp in

491
00:19:09,440 --> 00:19:12,320
this case

492
00:19:10,000 --> 00:19:14,000
is now in the hands of your sysadmin not

493
00:19:12,320 --> 00:19:16,000
your database admin

494
00:19:14,000 --> 00:19:18,160
sysadmin may see that as an advantage

495
00:19:16,000 --> 00:19:21,360
your database admin may not

496
00:19:18,160 --> 00:19:23,120
um and it was also brought up on the

497
00:19:21,360 --> 00:19:24,080
postgres mailing list that it may be

498
00:19:23,120 --> 00:19:25,600
more difficult

499
00:19:24,080 --> 00:19:27,918
since it's kind of an external control

500
00:19:25,600 --> 00:19:29,120
from postgres it might be more difficult

501
00:19:27,919 --> 00:19:30,000
for someone who's trying to hack

502
00:19:29,120 --> 00:19:33,039
postgres

503
00:19:30,000 --> 00:19:36,400
to subvert i you know i think that's

504
00:19:33,039 --> 00:19:39,520
maybe a fair uh comment

505
00:19:36,400 --> 00:19:41,840
it does require extra coordination it

506
00:19:39,520 --> 00:19:43,760
i did find it required extra cis calls

507
00:19:41,840 --> 00:19:47,760
to be allowed

508
00:19:43,760 --> 00:19:50,000
and it gives you

509
00:19:47,760 --> 00:19:50,879
less flexibility as i said systemd

510
00:19:50,000 --> 00:19:52,320
doesn't have

511
00:19:50,880 --> 00:19:54,080
quite the flexibility that i've got

512
00:19:52,320 --> 00:19:55,520
built into the extension that i

513
00:19:54,080 --> 00:19:58,559
specifically wrote

514
00:19:55,520 --> 00:19:58,960
for postgres although i it may well be

515
00:19:58,559 --> 00:20:00,799
that

516
00:19:58,960 --> 00:20:02,960
more recent versions of systemd will

517
00:20:00,799 --> 00:20:05,600
have that but i've i've tried on

518
00:20:02,960 --> 00:20:07,360
buster and i've tried on rail8 and so

519
00:20:05,600 --> 00:20:08,559
far at least the versions of systemd

520
00:20:07,360 --> 00:20:10,399
that i've found

521
00:20:08,559 --> 00:20:13,760
are not as flexible as i'd like they

522
00:20:10,400 --> 00:20:15,600
don't have that log option specifically

523
00:20:13,760 --> 00:20:17,039
the the other thing that they don't have

524
00:20:15,600 --> 00:20:18,320
is and i think i mentioned this in

525
00:20:17,039 --> 00:20:21,760
another slide

526
00:20:18,320 --> 00:20:22,720
when you set the error action for assist

527
00:20:21,760 --> 00:20:25,760
call

528
00:20:22,720 --> 00:20:27,440
by default when the error is thrown it

529
00:20:25,760 --> 00:20:29,440
does not get audit logged

530
00:20:27,440 --> 00:20:30,559
which means nothing shows up in audit d

531
00:20:29,440 --> 00:20:31,600
you just get an error in your

532
00:20:30,559 --> 00:20:34,320
application

533
00:20:31,600 --> 00:20:36,000
i find that very surprising and

534
00:20:34,320 --> 00:20:38,720
disconcerting also so

535
00:20:36,000 --> 00:20:40,559
with lip setcomp you can specifically

536
00:20:38,720 --> 00:20:43,360
flip a switch that says

537
00:20:40,559 --> 00:20:44,799
even if i've got an error action i want

538
00:20:43,360 --> 00:20:46,879
it audit logged

539
00:20:44,799 --> 00:20:48,000
anyway and that to me makes things a lot

540
00:20:46,880 --> 00:20:51,280
easier to figure out what's going

541
00:20:48,000 --> 00:20:53,360
on so the first

542
00:20:51,280 --> 00:20:55,360
parameter that you use the system d is

543
00:20:53,360 --> 00:20:56,719
system call filter

544
00:20:55,360 --> 00:20:58,959
it's basically how you set up a white

545
00:20:56,720 --> 00:20:58,960
list

546
00:21:00,000 --> 00:21:07,039
the default action will be

547
00:21:03,440 --> 00:21:10,880
kill and it's kill with a sig sis

548
00:21:07,039 --> 00:21:12,480
signal um

549
00:21:10,880 --> 00:21:14,559
setcomp does that it's not a

550
00:21:12,480 --> 00:21:16,240
non-blockable signal

551
00:21:14,559 --> 00:21:18,240
so it's you're gonna the process is

552
00:21:16,240 --> 00:21:20,960
gonna get killed no matter what

553
00:21:18,240 --> 00:21:21,919
you can override that with system call

554
00:21:20,960 --> 00:21:24,000
error number

555
00:21:21,919 --> 00:21:24,960
which will basically let you supply an

556
00:21:24,000 --> 00:21:27,840
error number

557
00:21:24,960 --> 00:21:30,320
that will be used for the error action

558
00:21:27,840 --> 00:21:32,000
instead of killing the process

559
00:21:30,320 --> 00:21:33,840
and you can specify it more than once in

560
00:21:32,000 --> 00:21:36,880
your systemd

561
00:21:33,840 --> 00:21:38,000
control file you can also set up

562
00:21:36,880 --> 00:21:39,679
blacklist

563
00:21:38,000 --> 00:21:42,159
if you use a tilde in front of the list

564
00:21:39,679 --> 00:21:45,679
it basically inverts it

565
00:21:42,159 --> 00:21:46,720
if you suffix your element with a colon

566
00:21:45,679 --> 00:21:49,440
and a number

567
00:21:46,720 --> 00:21:51,520
or a colon in the name of an error then

568
00:21:49,440 --> 00:21:54,159
it will use that error for that

569
00:21:51,520 --> 00:21:54,158
syscall

570
00:21:55,600 --> 00:21:59,840
but whitelisting is actually recommended

571
00:22:00,720 --> 00:22:04,080
systemd one of the things that at first

572
00:22:02,480 --> 00:22:07,039
looked kind of neat

573
00:22:04,080 --> 00:22:09,039
um but later on i kind of decided was

574
00:22:07,039 --> 00:22:10,960
not as useful as it seems

575
00:22:09,039 --> 00:22:12,960
is it has these predefined sets of

576
00:22:10,960 --> 00:22:15,679
syscalls so you could say

577
00:22:12,960 --> 00:22:18,000
i want to allow all of the system

578
00:22:15,679 --> 00:22:20,000
service sys calls

579
00:22:18,000 --> 00:22:21,039
or i want to allow all the file system

580
00:22:20,000 --> 00:22:23,360
sys calls and

581
00:22:21,039 --> 00:22:25,039
that kind of on the surface sounds like

582
00:22:23,360 --> 00:22:28,240
it would be convenient

583
00:22:25,039 --> 00:22:28,960
the problem is that the list of sys

584
00:22:28,240 --> 00:22:31,600
calls

585
00:22:28,960 --> 00:22:32,640
in those lists could vary from system d

586
00:22:31,600 --> 00:22:35,520
version to system d

587
00:22:32,640 --> 00:22:36,159
version could vary from kernel to kernel

588
00:22:35,520 --> 00:22:38,799
um

589
00:22:36,159 --> 00:22:40,080
it could you know there's a lot of

590
00:22:38,799 --> 00:22:42,158
variability you don't

591
00:22:40,080 --> 00:22:44,399
without inspecting it carefully you

592
00:22:42,159 --> 00:22:46,559
don't know what you're getting

593
00:22:44,400 --> 00:22:48,240
and if you combine that with the

594
00:22:46,559 --> 00:22:49,200
difficulty and figure out what cis calls

595
00:22:48,240 --> 00:22:51,440
you need to

596
00:22:49,200 --> 00:22:52,240
allow i just ended up not wanting to go

597
00:22:51,440 --> 00:22:54,240
there

598
00:22:52,240 --> 00:22:56,400
there is this system analyzes call

599
00:22:54,240 --> 00:22:58,880
filter that will let you enumerate

600
00:22:56,400 --> 00:23:02,000
the actual filters the actual syscalls

601
00:22:58,880 --> 00:23:02,000
are in the filter sets

602
00:23:02,720 --> 00:23:06,799
syscall error number is what you'll

603
00:23:04,799 --> 00:23:08,320
allows the override of the default

604
00:23:06,799 --> 00:23:10,400
action gives you

605
00:23:08,320 --> 00:23:12,080
the error action instead of the kill

606
00:23:10,400 --> 00:23:14,480
action

607
00:23:12,080 --> 00:23:16,399
but as i said earlier it's not logged by

608
00:23:14,480 --> 00:23:18,080
default with system d

609
00:23:16,400 --> 00:23:22,000
and i couldn't figure out any way to

610
00:23:18,080 --> 00:23:25,039
turn on the logging in with systemd

611
00:23:22,000 --> 00:23:27,200
what's that it's not implemented so

612
00:23:25,039 --> 00:23:30,320
as a comment from the audience it's not

613
00:23:27,200 --> 00:23:30,320
implemented in systemd

614
00:23:31,200 --> 00:23:34,400
there's a another primer called system

615
00:23:32,880 --> 00:23:36,240
called architectures

616
00:23:34,400 --> 00:23:38,320
uh that's one of the kind of things

617
00:23:36,240 --> 00:23:41,760
again makes this

618
00:23:38,320 --> 00:23:42,158
set comp difficult is the system calls

619
00:23:41,760 --> 00:23:44,158
are

620
00:23:42,159 --> 00:23:45,840
architecture specific and you know

621
00:23:44,159 --> 00:23:47,440
there's some nuances like if you're on a

622
00:23:45,840 --> 00:23:49,439
64-bit system

623
00:23:47,440 --> 00:23:51,520
you might actually have available the

624
00:23:49,440 --> 00:23:55,279
32-bit syscalls as well

625
00:23:51,520 --> 00:23:59,279
and that can actually be in a path to

626
00:23:55,279 --> 00:24:01,279
exploits so what you really want to do

627
00:23:59,279 --> 00:24:02,480
is restrict the syscalls to just the

628
00:24:01,279 --> 00:24:04,799
ones that are native

629
00:24:02,480 --> 00:24:07,600
for your architecture and that's the

630
00:24:04,799 --> 00:24:07,600
keyword native

631
00:24:08,960 --> 00:24:13,020
there is a parameter to set no new

632
00:24:11,360 --> 00:24:14,320
privileges the documentation

633
00:24:13,020 --> 00:24:16,559
[Music]

634
00:24:14,320 --> 00:24:19,678
claims and maybe i just misunderstood

635
00:24:16,559 --> 00:24:20,960
the documentation but it claims that

636
00:24:19,679 --> 00:24:23,360
whatever this value is will be

637
00:24:20,960 --> 00:24:25,200
overridden if you use syscall filter

638
00:24:23,360 --> 00:24:26,799
but with a little bit of experimentation

639
00:24:25,200 --> 00:24:29,679
i'll show you what i mean

640
00:24:26,799 --> 00:24:31,039
i didn't feel like that was true so

641
00:24:29,679 --> 00:24:32,000
maybe i'm just misunderstanding the

642
00:24:31,039 --> 00:24:34,640
documentation

643
00:24:32,000 --> 00:24:36,880
but in any case i'll show you what i

644
00:24:34,640 --> 00:24:40,240
mean

645
00:24:36,880 --> 00:24:41,919
so with postgres specifically trying to

646
00:24:40,240 --> 00:24:45,120
derive the

647
00:24:41,919 --> 00:24:46,640
the white list was was too painful so

648
00:24:45,120 --> 00:24:48,158
although i'm doing the slides in the

649
00:24:46,640 --> 00:24:51,039
order of showing you the

650
00:24:48,159 --> 00:24:53,600
systemd implementation before pg setcomp

651
00:24:51,039 --> 00:24:55,520
i actually did pg setcomp first

652
00:24:53,600 --> 00:24:57,279
and i got a list and then i used that in

653
00:24:55,520 --> 00:24:59,120
systemd and that

654
00:24:57,279 --> 00:25:00,559
worked okay like i said earlier there

655
00:24:59,120 --> 00:25:01,360
were actually extra sys calls that i

656
00:25:00,559 --> 00:25:03,760
needed

657
00:25:01,360 --> 00:25:06,000
so i started out with that list and then

658
00:25:03,760 --> 00:25:08,320
i tried to start postgres

659
00:25:06,000 --> 00:25:09,919
and it gets killed and i go look and i

660
00:25:08,320 --> 00:25:12,080
see what the syscall is

661
00:25:09,919 --> 00:25:13,600
and i add it to the list and rinse and

662
00:25:12,080 --> 00:25:15,520
repeat

663
00:25:13,600 --> 00:25:17,678
five or six times until i caught all the

664
00:25:15,520 --> 00:25:19,200
extra sys calls that were needed

665
00:25:17,679 --> 00:25:21,200
when i was starting postgres using

666
00:25:19,200 --> 00:25:24,480
system d and then

667
00:25:21,200 --> 00:25:26,000
finally postgres would run

668
00:25:24,480 --> 00:25:29,840
but i did determine that no new

669
00:25:26,000 --> 00:25:29,840
privileges needed to be set

670
00:25:30,000 --> 00:25:33,440
so this is kind of an interesting way of

671
00:25:32,480 --> 00:25:36,880
looking at it

672
00:25:33,440 --> 00:25:40,400
if you look in proc pid

673
00:25:36,880 --> 00:25:43,200
number status and you grab for

674
00:25:40,400 --> 00:25:44,159
you know any of these three terms you'll

675
00:25:43,200 --> 00:25:46,480
see before you

676
00:25:44,159 --> 00:25:47,600
load setcomp basically no new privs is

677
00:25:46,480 --> 00:25:51,600
not set

678
00:25:47,600 --> 00:25:53,678
setcomp is not set and

679
00:25:51,600 --> 00:25:57,360
your thread vulnerable for speculation

680
00:25:53,679 --> 00:25:58,880
store bypass

681
00:25:57,360 --> 00:26:02,719
and what i'm showing here is just

682
00:25:58,880 --> 00:26:06,640
basically all of the postgres processes

683
00:26:02,720 --> 00:26:09,120
so now if i edit postgresql.service

684
00:26:06,640 --> 00:26:10,080
i i didn't try want to list all of them

685
00:26:09,120 --> 00:26:13,279
here but

686
00:26:10,080 --> 00:26:14,559
basically there's you know 94 sys calls

687
00:26:13,279 --> 00:26:17,360
that i determined were needed for

688
00:26:14,559 --> 00:26:20,960
postgres add them to the call filter

689
00:26:17,360 --> 00:26:23,120
list um i didn't i

690
00:26:20,960 --> 00:26:24,080
left it as an error i didn't leave i

691
00:26:23,120 --> 00:26:26,080
didn't make it

692
00:26:24,080 --> 00:26:28,559
i left it as kill i mean i didn't make

693
00:26:26,080 --> 00:26:30,399
it an error action

694
00:26:28,559 --> 00:26:32,720
you can see i said the architecture to

695
00:26:30,400 --> 00:26:36,880
native and for the the first time out i

696
00:26:32,720 --> 00:26:36,880
left no new privileges to yes

697
00:26:37,039 --> 00:26:44,480
so now restart the postgres daven and um

698
00:26:41,440 --> 00:26:44,480
look at the audit log

699
00:26:45,120 --> 00:26:49,360
so now when i go look you can see no new

700
00:26:46,799 --> 00:26:52,559
privs is still set to zero so it was not

701
00:26:49,360 --> 00:26:53,120
set by systemd for me that's the part i

702
00:26:52,559 --> 00:26:55,840
didn't

703
00:26:53,120 --> 00:26:56,879
quite get from the documentation setcomp

704
00:26:55,840 --> 00:27:00,158
is set

705
00:26:56,880 --> 00:27:00,159
and it's in mode two

706
00:27:05,279 --> 00:27:09,039
itself so yes you manually tune the

707
00:27:07,760 --> 00:27:13,760
second filter

708
00:27:09,039 --> 00:27:13,760
you must also have private knowledge

709
00:27:14,240 --> 00:27:18,480
okay so the documentation was not really

710
00:27:17,120 --> 00:27:21,678
clear on that point to me

711
00:27:18,480 --> 00:27:23,600
at least to me so

712
00:27:21,679 --> 00:27:25,919
mode two for set comp is basically the

713
00:27:23,600 --> 00:27:28,080
setcomp filter which is the bpf

714
00:27:25,919 --> 00:27:29,760
filter if that said one it would be the

715
00:27:28,080 --> 00:27:32,080
original setcomp which i don't think

716
00:27:29,760 --> 00:27:34,720
anyone ever uses anymore

717
00:27:32,080 --> 00:27:36,639
um and then you can see that spec by as

718
00:27:34,720 --> 00:27:38,240
kind of a side benefit here i get thread

719
00:27:36,640 --> 00:27:40,960
force mitigated for

720
00:27:38,240 --> 00:27:41,919
speculation store bypass just a note on

721
00:27:40,960 --> 00:27:43,919
that

722
00:27:41,919 --> 00:27:46,320
about a week or two ago i tried this

723
00:27:43,919 --> 00:27:48,880
this is all done on a

724
00:27:46,320 --> 00:27:50,080
latest linux mint machine which i guess

725
00:27:48,880 --> 00:27:53,840
is based on ubuntu

726
00:27:50,080 --> 00:27:54,639
1804 i guess um and that's what i see

727
00:27:53,840 --> 00:27:56,959
there

728
00:27:54,640 --> 00:27:58,640
on a latest fedora machine which i tried

729
00:27:56,960 --> 00:28:00,880
just a week or two ago

730
00:27:58,640 --> 00:28:02,480
i did not get the speculation store

731
00:28:00,880 --> 00:28:03,440
bypass mitigated

732
00:28:02,480 --> 00:28:06,320
and i'm not i haven't really

733
00:28:03,440 --> 00:28:09,120
investigated why that is yet

734
00:28:06,320 --> 00:28:10,879
so now if we uncomment no new privileges

735
00:28:09,120 --> 00:28:14,840
and run all this again

736
00:28:10,880 --> 00:28:17,840
we'll see that we do get um no new priv

737
00:28:14,840 --> 00:28:17,840
set

738
00:28:20,640 --> 00:28:26,000
okay so that's that's it for um the

739
00:28:23,679 --> 00:28:27,760
system d implementation

740
00:28:26,000 --> 00:28:29,919
any questions about that before i move

741
00:28:27,760 --> 00:28:29,919
on

742
00:28:39,200 --> 00:28:42,640
so the question is will this be in the

743
00:28:41,200 --> 00:28:44,960
official packaging

744
00:28:42,640 --> 00:28:46,559
and specifically the systemd filtering

745
00:28:44,960 --> 00:28:49,520
i've not talked to anyone about that no

746
00:28:46,559 --> 00:28:49,520
one's asked me about that

747
00:28:49,840 --> 00:28:54,879
the packaging for postgres and therefore

748
00:28:52,080 --> 00:28:56,559
the service file i guess is done

749
00:28:54,880 --> 00:28:58,000
by one of the postgres community members

750
00:28:56,559 --> 00:29:01,520
so conceivably that could be done

751
00:28:58,000 --> 00:29:04,640
yeah i could talk to kristoff and

752
00:29:01,520 --> 00:29:06,720
see if he's willing to do that good

753
00:29:04,640 --> 00:29:10,320
point

754
00:29:06,720 --> 00:29:11,520
so as i said pg sec comp the repository

755
00:29:10,320 --> 00:29:12,799
for that

756
00:29:11,520 --> 00:29:15,279
sorry this is my refrigerator

757
00:29:12,799 --> 00:29:15,279
temperatures

758
00:29:15,760 --> 00:29:20,000
is in so my company name crunchy data pg

759
00:29:18,640 --> 00:29:22,880
set comp

760
00:29:20,000 --> 00:29:25,120
it's basically the postgres license it

761
00:29:22,880 --> 00:29:28,000
was just released it was just

762
00:29:25,120 --> 00:29:30,080
opened up a week ago i've not done an

763
00:29:28,000 --> 00:29:32,799
actual official release

764
00:29:30,080 --> 00:29:34,080
and just to forced all the the probably

765
00:29:32,799 --> 00:29:35,200
inevitable question

766
00:29:34,080 --> 00:29:37,279
i don't know whether this will get

767
00:29:35,200 --> 00:29:38,640
packaged by debian or not but again i

768
00:29:37,279 --> 00:29:40,080
could talk to kristoff about it and i

769
00:29:38,640 --> 00:29:41,360
could talk to devrum about maybe the

770
00:29:40,080 --> 00:29:44,399
rpms

771
00:29:41,360 --> 00:29:47,039
but um it's it's literally just

772
00:29:44,399 --> 00:29:49,439
been opened up within the last week i

773
00:29:47,039 --> 00:29:50,960
wrote this over the last several months

774
00:29:49,440 --> 00:29:52,480
because of the fact that you know for

775
00:29:50,960 --> 00:29:54,960
the people that weren't here earlier

776
00:29:52,480 --> 00:29:56,399
i tried to get this into core postgres

777
00:29:54,960 --> 00:29:58,799
and the community was

778
00:29:56,399 --> 00:29:59,439
not willing to take it so i'd implement

779
00:29:58,799 --> 00:30:02,399
it as a

780
00:29:59,440 --> 00:30:02,399
as an extension

781
00:30:05,600 --> 00:30:08,879
so this is setcomp filtering through

782
00:30:07,760 --> 00:30:11,520
postgres config

783
00:30:08,880 --> 00:30:12,640
options and i think there's a lot of

784
00:30:11,520 --> 00:30:15,279
advantages to this

785
00:30:12,640 --> 00:30:16,640
not everyone agrees but it gives the

786
00:30:15,279 --> 00:30:20,080
postgres

787
00:30:16,640 --> 00:30:22,320
admin control over the setcomp filtering

788
00:30:20,080 --> 00:30:24,158
and by the way there's no reason this

789
00:30:22,320 --> 00:30:25,120
can't be used in conjunction with system

790
00:30:24,159 --> 00:30:28,880
d

791
00:30:25,120 --> 00:30:32,080
so as i pointed out earlier um

792
00:30:28,880 --> 00:30:33,520
you can add filters down the line

793
00:30:32,080 --> 00:30:35,918
as long as you're making things more

794
00:30:33,520 --> 00:30:39,120
restrictive and in fact when postgres

795
00:30:35,919 --> 00:30:40,559
runs in a container on kubernetes which

796
00:30:39,120 --> 00:30:42,399
my company does a lot of with our

797
00:30:40,559 --> 00:30:43,678
customers it's already running under

798
00:30:42,399 --> 00:30:45,678
setcomp because

799
00:30:43,679 --> 00:30:47,760
containers do have i think it's a

800
00:30:45,679 --> 00:30:50,720
blacklist filter not a whitelist

801
00:30:47,760 --> 00:30:51,440
there's about 350 sys calls and they

802
00:30:50,720 --> 00:30:55,360
blacklist

803
00:30:51,440 --> 00:30:57,120
about 50 of them so they allow 300 or so

804
00:30:55,360 --> 00:30:59,439
i've found that postgres needs about a

805
00:30:57,120 --> 00:31:00,239
hundred so that leaves a lot of room for

806
00:30:59,440 --> 00:31:03,279
improvement

807
00:31:00,240 --> 00:31:04,720
as far as security posture goes

808
00:31:03,279 --> 00:31:06,399
but in any case it provides more

809
00:31:04,720 --> 00:31:09,600
flexibility

810
00:31:06,399 --> 00:31:11,678
it does have the the log action

811
00:31:09,600 --> 00:31:14,320
it does ensure that if you use the error

812
00:31:11,679 --> 00:31:17,360
action it gets logged

813
00:31:14,320 --> 00:31:19,039
it allows you to have different settings

814
00:31:17,360 --> 00:31:19,519
at the the postmaster which is the

815
00:31:19,039 --> 00:31:21,919
parent

816
00:31:19,519 --> 00:31:24,399
postgres process level and the session

817
00:31:21,919 --> 00:31:27,120
level and it also allows you to have

818
00:31:24,399 --> 00:31:28,719
different filters at the session level

819
00:31:27,120 --> 00:31:30,239
based on the user that's logged into

820
00:31:28,720 --> 00:31:32,240
postgres

821
00:31:30,240 --> 00:31:34,399
and then finally it also allows there's

822
00:31:32,240 --> 00:31:36,880
a client command which i'll show you

823
00:31:34,399 --> 00:31:38,559
which allows even the client application

824
00:31:36,880 --> 00:31:40,640
to set its own filter

825
00:31:38,559 --> 00:31:43,279
so now you can imagine you know the

826
00:31:40,640 --> 00:31:46,960
system administrator enforces some basic

827
00:31:43,279 --> 00:31:49,760
level of setcom filtering with systemd

828
00:31:46,960 --> 00:31:50,480
the database administrator enforces some

829
00:31:49,760 --> 00:31:52,559
set com

830
00:31:50,480 --> 00:31:53,760
filtering at the postmaster and the

831
00:31:52,559 --> 00:31:54,960
session level

832
00:31:53,760 --> 00:31:57,120
and then the person writing the

833
00:31:54,960 --> 00:31:58,320
application can even lock it down

834
00:31:57,120 --> 00:31:59,840
further

835
00:31:58,320 --> 00:32:01,519
the first thing they do out of the gate

836
00:31:59,840 --> 00:32:02,959
and then it can never be relaxed for the

837
00:32:01,519 --> 00:32:04,880
rest of the session

838
00:32:02,960 --> 00:32:07,519
so now if you know you're really talking

839
00:32:04,880 --> 00:32:10,320
about layering security

840
00:32:07,519 --> 00:32:11,200
now if someone figures out how to do sql

841
00:32:10,320 --> 00:32:14,399
injection

842
00:32:11,200 --> 00:32:18,159
to your app you've you've blocked stuff

843
00:32:14,399 --> 00:32:18,158
as as far as you can block it

844
00:32:19,840 --> 00:32:24,080
and you know it's pointed out it might

845
00:32:21,519 --> 00:32:24,880
be less resilient to the systemd method

846
00:32:24,080 --> 00:32:28,158
but

847
00:32:24,880 --> 00:32:29,760
you could use it in conjunction and of

848
00:32:28,159 --> 00:32:32,159
course the other thing you can do

849
00:32:29,760 --> 00:32:34,000
in order to change the values at the

850
00:32:32,159 --> 00:32:35,760
postmaster level

851
00:32:34,000 --> 00:32:37,360
for this extension you have to restart

852
00:32:35,760 --> 00:32:39,039
postgres and

853
00:32:37,360 --> 00:32:41,279
again for the benefit of the people that

854
00:32:39,039 --> 00:32:44,080
weren't here at the beginning

855
00:32:41,279 --> 00:32:45,039
good security practices if postgres

856
00:32:44,080 --> 00:32:47,760
restarts

857
00:32:45,039 --> 00:32:49,600
you better get an alert and if you

858
00:32:47,760 --> 00:32:50,240
didn't plan that restart you better

859
00:32:49,600 --> 00:32:53,120
figure out

860
00:32:50,240 --> 00:32:53,120
why it restarted

861
00:32:55,600 --> 00:32:59,279
okay so it's implemented as a postgres

862
00:32:57,840 --> 00:33:02,879
extension

863
00:32:59,279 --> 00:33:04,880
it's loaded via shared preload libraries

864
00:33:02,880 --> 00:33:07,039
um which basically means it's loaded

865
00:33:04,880 --> 00:33:10,159
immediately postgres won't start

866
00:33:07,039 --> 00:33:11,679
if it doesn't load uh

867
00:33:10,159 --> 00:33:14,480
which is maybe a good point if you have

868
00:33:11,679 --> 00:33:17,039
some kind of uh syntax error when you go

869
00:33:14,480 --> 00:33:18,480
edit your postgres.conf to do this and

870
00:33:17,039 --> 00:33:20,399
you go to start postgres

871
00:33:18,480 --> 00:33:21,760
and it doesn't start it might be because

872
00:33:20,399 --> 00:33:23,039
you made a syntax error

873
00:33:21,760 --> 00:33:25,840
the postgres error log should tell you

874
00:33:23,039 --> 00:33:25,840
that

875
00:33:26,399 --> 00:33:32,719
it is um there's a global config setting

876
00:33:30,399 --> 00:33:34,479
which is the postmaster level it

877
00:33:32,720 --> 00:33:36,240
requires a restart

878
00:33:34,480 --> 00:33:37,039
the client settings are done through

879
00:33:36,240 --> 00:33:38,559
something called the client

880
00:33:37,039 --> 00:33:40,799
authentication hook

881
00:33:38,559 --> 00:33:42,320
which happens immediately after the

882
00:33:40,799 --> 00:33:44,799
client authenticates but before the

883
00:33:42,320 --> 00:33:47,360
client gets access to the session

884
00:33:44,799 --> 00:33:49,120
so it's before there any user input is

885
00:33:47,360 --> 00:33:51,840
taken

886
00:33:49,120 --> 00:33:52,719
the client filters require a reload not

887
00:33:51,840 --> 00:33:56,158
a restart

888
00:33:52,720 --> 00:33:58,720
which is kind of important if

889
00:33:56,159 --> 00:33:59,919
you want to be able to modify the client

890
00:33:58,720 --> 00:34:03,120
settings

891
00:33:59,919 --> 00:34:04,880
as the administrator without having to

892
00:34:03,120 --> 00:34:06,719
restart your whole database

893
00:34:04,880 --> 00:34:08,000
now again this may be something that

894
00:34:06,720 --> 00:34:09,280
someone complains about and says it

895
00:34:08,000 --> 00:34:12,000
would be more secure

896
00:34:09,280 --> 00:34:12,879
to require a restart i found that kind

897
00:34:12,000 --> 00:34:14,639
of

898
00:34:12,879 --> 00:34:17,359
hard to work with i think this is good

899
00:34:14,639 --> 00:34:20,320
enough this is still like you know

900
00:34:17,359 --> 00:34:21,040
version one of this so maybe i could be

901
00:34:20,320 --> 00:34:22,879
convinced of

902
00:34:21,040 --> 00:34:25,040
otherwise later on but for now that's

903
00:34:22,879 --> 00:34:27,759
the way it is

904
00:34:25,040 --> 00:34:29,839
and it provides this setcomp filter

905
00:34:27,760 --> 00:34:32,639
table function which will actually

906
00:34:29,839 --> 00:34:34,078
show you the merged filter what it looks

907
00:34:32,639 --> 00:34:37,280
like in your back end

908
00:34:34,079 --> 00:34:39,040
to the best of its ability and the

909
00:34:37,280 --> 00:34:40,320
reason i say that is because there's

910
00:34:39,040 --> 00:34:41,918
you know in addition to the fact that

911
00:34:40,320 --> 00:34:43,679
there's no easy way to know which sys

912
00:34:41,918 --> 00:34:46,399
calls are used by which glibc

913
00:34:43,679 --> 00:34:48,000
calls there's also no way to read from

914
00:34:46,399 --> 00:34:51,199
the kernel and find out what

915
00:34:48,000 --> 00:34:55,199
the loaded filter looks like so

916
00:34:51,199 --> 00:34:59,279
if if a filter was loaded by system d

917
00:34:55,199 --> 00:34:59,279
this extension has no idea about that

918
00:34:59,839 --> 00:35:04,078
or kubernetes for that matter

919
00:35:04,640 --> 00:35:07,118
and i've talked to the kernel

920
00:35:05,839 --> 00:35:10,078
maintainers about that and they said

921
00:35:07,119 --> 00:35:10,079
yeah that would be pretty cool

922
00:35:11,119 --> 00:35:14,480
um i'm not sure how hard it would be to

923
00:35:13,680 --> 00:35:18,319
implement

924
00:35:14,480 --> 00:35:21,839
or if it's even possible but um

925
00:35:18,320 --> 00:35:23,200
so in any case in order to enable this

926
00:35:21,839 --> 00:35:25,520
you have to have shared preload

927
00:35:23,200 --> 00:35:26,720
libraries set to at least pg setcomp you

928
00:35:25,520 --> 00:35:28,839
might have other stuff in there

929
00:35:26,720 --> 00:35:31,040
maybe pg audit if you care about

930
00:35:28,839 --> 00:35:33,720
security um

931
00:35:31,040 --> 00:35:35,839
that's a whole other talk pg

932
00:35:33,720 --> 00:35:38,879
setcomp.enabled is your overall on off

933
00:35:35,839 --> 00:35:38,880
switch for this feature

934
00:35:39,040 --> 00:35:42,079
the global configuration which is at the

935
00:35:40,960 --> 00:35:43,359
postmaster level

936
00:35:42,079 --> 00:35:46,079
you know we'll see an example of this

937
00:35:43,359 --> 00:35:48,640
later but um basically there's

938
00:35:46,079 --> 00:35:49,760
four of these one that's that you know

939
00:35:48,640 --> 00:35:51,440
underscore allow

940
00:35:49,760 --> 00:35:52,880
underscore log underscore error

941
00:35:51,440 --> 00:35:57,200
underscore kill

942
00:35:52,880 --> 00:35:59,599
those are each specific lists

943
00:35:57,200 --> 00:36:02,640
and then there's a default action so you

944
00:35:59,599 --> 00:36:06,079
can basically set the default action to

945
00:36:02,640 --> 00:36:07,200
log and you could have a list of items

946
00:36:06,079 --> 00:36:09,839
that you want

947
00:36:07,200 --> 00:36:11,040
to allow and you could have a specific

948
00:36:09,839 --> 00:36:14,078
list maybe of

949
00:36:11,040 --> 00:36:17,359
syscalls that you never want to allow

950
00:36:14,079 --> 00:36:17,359
that are set to error or kill

951
00:36:19,280 --> 00:36:24,079
and then similarly at the session level

952
00:36:21,119 --> 00:36:27,040
you've got the equivalent calls

953
00:36:24,079 --> 00:36:28,240
session instead of global and then this

954
00:36:27,040 --> 00:36:33,040
session roles

955
00:36:28,240 --> 00:36:34,879
business this is a little sidebar

956
00:36:33,040 --> 00:36:36,640
when i want to implement this postgres

957
00:36:34,880 --> 00:36:39,440
does allow you to

958
00:36:36,640 --> 00:36:40,160
specify specific settings that are bound

959
00:36:39,440 --> 00:36:44,960
to a specific

960
00:36:40,160 --> 00:36:47,200
user however those settings are read in

961
00:36:44,960 --> 00:36:49,280
later than that client authentication

962
00:36:47,200 --> 00:36:52,000
hook that i'm using

963
00:36:49,280 --> 00:36:54,000
and so there was no way to get to those

964
00:36:52,000 --> 00:36:56,400
basically using this extension now maybe

965
00:36:54,000 --> 00:36:58,720
some future version of postgres i can

966
00:36:56,400 --> 00:37:00,000
convince the community to add a hook

967
00:36:58,720 --> 00:37:02,000
in the right location but right now

968
00:37:00,000 --> 00:37:03,280
there isn't one in a better location so

969
00:37:02,000 --> 00:37:05,200
the way i did this was

970
00:37:03,280 --> 00:37:07,280
basically you provide a list of specific

971
00:37:05,200 --> 00:37:11,919
roles that are going to have specific

972
00:37:07,280 --> 00:37:15,440
setcomp filters and then you have this

973
00:37:11,920 --> 00:37:17,760
each of these entries again except dot

974
00:37:15,440 --> 00:37:19,440
with the role name on the end

975
00:37:17,760 --> 00:37:21,280
and that will give you a list that's

976
00:37:19,440 --> 00:37:22,640
specific for that logged in user and

977
00:37:21,280 --> 00:37:25,760
that will get used

978
00:37:22,640 --> 00:37:28,720
instead of default session one

979
00:37:25,760 --> 00:37:28,720
when someone logs in

980
00:37:28,800 --> 00:37:32,960
and then finally as i talked about

981
00:37:30,480 --> 00:37:35,280
earlier for an application

982
00:37:32,960 --> 00:37:36,000
you could call this sql statement and

983
00:37:35,280 --> 00:37:39,440
you can create

984
00:37:36,000 --> 00:37:40,960
a filter on the fly dynamically

985
00:37:39,440 --> 00:37:42,400
it can only be called once per session

986
00:37:40,960 --> 00:37:44,400
if you try and call a second time it'll

987
00:37:42,400 --> 00:37:46,480
throw an error

988
00:37:44,400 --> 00:37:48,839
just because i think that would be

989
00:37:46,480 --> 00:37:51,839
confusing because it wouldn't do

990
00:37:48,839 --> 00:37:51,839
anything

991
00:37:54,000 --> 00:37:58,560
so this is now this is my 10-step

992
00:37:56,640 --> 00:38:01,680
process for deriving your list of

993
00:37:58,560 --> 00:38:03,799
syscalls at least for postgres

994
00:38:01,680 --> 00:38:06,480
so if you set this as your in your

995
00:38:03,800 --> 00:38:08,160
postgresql.conf

996
00:38:06,480 --> 00:38:10,400
you're gonna enable setcomp you're gonna

997
00:38:08,160 --> 00:38:13,200
allow everything at the global level

998
00:38:10,400 --> 00:38:15,040
and you're gonna log everything at the

999
00:38:13,200 --> 00:38:17,200
session level

1000
00:38:15,040 --> 00:38:19,200
and just a note here and it says it in

1001
00:38:17,200 --> 00:38:20,799
this in on the slide

1002
00:38:19,200 --> 00:38:22,560
an asterisk at the session level

1003
00:38:20,800 --> 00:38:23,680
basically means just use whatever's in

1004
00:38:22,560 --> 00:38:27,920
the

1005
00:38:23,680 --> 00:38:30,879
the global list i just found out to be a

1006
00:38:27,920 --> 00:38:30,880
useful notation

1007
00:38:30,960 --> 00:38:34,480
so you do that um when you're doing this

1008
00:38:34,000 --> 00:38:35,760
i

1009
00:38:34,480 --> 00:38:37,680
you don't want to do this on your

1010
00:38:35,760 --> 00:38:40,320
production machine please

1011
00:38:37,680 --> 00:38:41,839
um you're going to want to modify audit

1012
00:38:40,320 --> 00:38:44,079
d

1013
00:38:41,839 --> 00:38:46,160
i found that auto d actually by default

1014
00:38:44,079 --> 00:38:48,480
is um lossy

1015
00:38:46,160 --> 00:38:50,399
so if you overload audit d you start

1016
00:38:48,480 --> 00:38:53,119
losing audit records which i find

1017
00:38:50,400 --> 00:38:54,640
a bit strange actually so you want to

1018
00:38:53,119 --> 00:38:56,880
make it lossless

1019
00:38:54,640 --> 00:38:58,799
and you also don't want the files

1020
00:38:56,880 --> 00:39:02,640
rotating out of your way because this

1021
00:38:58,800 --> 00:39:04,480
when you first run this you will get

1022
00:39:02,640 --> 00:39:07,040
very large growth of your audit d log

1023
00:39:04,480 --> 00:39:07,040
very quickly

1024
00:39:09,119 --> 00:39:12,839
so if you clear out audit d and

1025
00:39:10,720 --> 00:39:14,560
basically restart the service restart

1026
00:39:12,839 --> 00:39:17,680
postgres

1027
00:39:14,560 --> 00:39:18,880
after making all these changes now

1028
00:39:17,680 --> 00:39:21,759
you know this is what i alluded to

1029
00:39:18,880 --> 00:39:25,119
earlier you want to exercise postgres

1030
00:39:21,760 --> 00:39:26,960
through as many paces as you can do so

1031
00:39:25,119 --> 00:39:29,200
you want to run all your application

1032
00:39:26,960 --> 00:39:31,200
regression test you basically want to

1033
00:39:29,200 --> 00:39:32,640
try and get your application to use the

1034
00:39:31,200 --> 00:39:34,560
database to do everything it might

1035
00:39:32,640 --> 00:39:35,920
possibly do

1036
00:39:34,560 --> 00:39:38,000
you might also want to run like the

1037
00:39:35,920 --> 00:39:41,920
postgres regression test

1038
00:39:38,000 --> 00:39:44,160
i've got the the formulas here um

1039
00:39:41,920 --> 00:39:47,440
interestingly this is how you use the

1040
00:39:44,160 --> 00:39:49,279
make check world and specify some extra

1041
00:39:47,440 --> 00:39:50,640
stuff to go under the configuration

1042
00:39:49,280 --> 00:39:52,800
which you would need in order to test

1043
00:39:50,640 --> 00:39:52,799
this

1044
00:39:53,760 --> 00:40:01,680
when you run these you will add a lot of

1045
00:39:57,680 --> 00:40:01,680
set comp entries to the audit d-log

1046
00:40:03,359 --> 00:40:07,359
so this point stop audit d run the

1047
00:40:06,160 --> 00:40:09,920
script that i provided with the

1048
00:40:07,359 --> 00:40:10,480
extension that i talked about earlier

1049
00:40:09,920 --> 00:40:12,160
and then

1050
00:40:10,480 --> 00:40:14,319
it'll just give you a list that you can

1051
00:40:12,160 --> 00:40:17,680
cut and paste into the

1052
00:40:14,319 --> 00:40:17,680
session syscall allow

1053
00:40:19,359 --> 00:40:26,319
excuse me

1054
00:40:24,720 --> 00:40:29,680
so now you're basically going to repeat

1055
00:40:26,319 --> 00:40:34,319
repeat this at the global level

1056
00:40:29,680 --> 00:40:34,319
and paste that into the global cisco wow

1057
00:40:34,400 --> 00:40:37,599
and now you know i've found over time

1058
00:40:36,240 --> 00:40:40,399
that you know

1059
00:40:37,599 --> 00:40:41,200
as we talked about earlier it's it's not

1060
00:40:40,400 --> 00:40:43,599
a

1061
00:40:41,200 --> 00:40:45,279
100 percent deterministic fix figuring

1062
00:40:43,599 --> 00:40:47,680
out which his calls are made

1063
00:40:45,280 --> 00:40:49,040
because some sys calls are only made

1064
00:40:47,680 --> 00:40:50,879
when certain things happen maybe

1065
00:40:49,040 --> 00:40:53,680
something gets flushed

1066
00:40:50,880 --> 00:40:55,440
or you know i can't even explain all the

1067
00:40:53,680 --> 00:40:56,720
reasons why it might happen but i did

1068
00:40:55,440 --> 00:41:00,640
find

1069
00:40:56,720 --> 00:41:02,319
that if i reran this

1070
00:41:00,640 --> 00:41:06,640
two or three times i might catch one or

1071
00:41:02,319 --> 00:41:08,400
two other sys calls

1072
00:41:06,640 --> 00:41:10,319
now at this point optionally you might

1073
00:41:08,400 --> 00:41:11,599
decide to change your defaults to error

1074
00:41:10,319 --> 00:41:13,680
or kill

1075
00:41:11,599 --> 00:41:15,040
as i said earlier i think probably what

1076
00:41:13,680 --> 00:41:17,040
you would want to do

1077
00:41:15,040 --> 00:41:18,319
is leave it set to log for some period

1078
00:41:17,040 --> 00:41:20,880
of time

1079
00:41:18,319 --> 00:41:23,279
implement all this in production and

1080
00:41:20,880 --> 00:41:24,960
then monitor your audit d-log for

1081
00:41:23,280 --> 00:41:26,319
some period of time and see if anything

1082
00:41:24,960 --> 00:41:28,560
else pops up

1083
00:41:26,319 --> 00:41:29,920
and it should be fairly lightweight at

1084
00:41:28,560 --> 00:41:31,839
this point

1085
00:41:29,920 --> 00:41:33,440
it shouldn't happen very often but when

1086
00:41:31,839 --> 00:41:34,880
it does go investigate and see if you

1087
00:41:33,440 --> 00:41:37,440
can figure out

1088
00:41:34,880 --> 00:41:39,280
using the postgres source or whatever

1089
00:41:37,440 --> 00:41:41,200
why you got this this call and if you

1090
00:41:39,280 --> 00:41:43,359
can convince yourself that it was

1091
00:41:41,200 --> 00:41:44,799
legitimately postgres add it to the

1092
00:41:43,359 --> 00:41:47,119
allow list

1093
00:41:44,800 --> 00:41:50,880
if it wasn't legitimately postgresq you

1094
00:41:47,119 --> 00:41:50,880
better figure out why that happened

1095
00:41:51,040 --> 00:41:54,560
so on an ongoing basis you would want to

1096
00:41:52,960 --> 00:41:58,560
monitor postgres and

1097
00:41:54,560 --> 00:41:58,560
react as required so

1098
00:42:01,119 --> 00:42:07,839
out questions that cisco was locked

1099
00:42:04,720 --> 00:42:09,598
considering the application isn't killed

1100
00:42:07,839 --> 00:42:11,759
is there any way to get status or

1101
00:42:09,599 --> 00:42:16,160
something like that to

1102
00:42:11,760 --> 00:42:19,040
get specific from where the cisco

1103
00:42:16,160 --> 00:42:20,560
uh so the question is since the process

1104
00:42:19,040 --> 00:42:22,240
is not killed

1105
00:42:20,560 --> 00:42:24,000
is there a way to get basically a stack

1106
00:42:22,240 --> 00:42:24,479
trace or something to help you aid you

1107
00:42:24,000 --> 00:42:26,160
in

1108
00:42:24,480 --> 00:42:27,599
figuring out where the origin of the

1109
00:42:26,160 --> 00:42:31,759
syscall was

1110
00:42:27,599 --> 00:42:33,119
and um there's a patch that was being

1111
00:42:31,760 --> 00:42:35,520
talked about and i can't remember if

1112
00:42:33,119 --> 00:42:37,119
it's actually been committed for 13

1113
00:42:35,520 --> 00:42:39,440
postgres 13 that would allow you to

1114
00:42:37,119 --> 00:42:42,800
configure basically getting

1115
00:42:39,440 --> 00:42:46,400
stack traces i believe

1116
00:42:42,800 --> 00:42:48,480
but i'm not sure if first of all that's

1117
00:42:46,400 --> 00:42:51,599
gonna be postgres 13 which is not out

1118
00:42:48,480 --> 00:42:53,760
if it's in there and

1119
00:42:51,599 --> 00:42:56,800
so in in my imagination what you what i

1120
00:42:53,760 --> 00:42:56,800
would do is i would

1121
00:42:57,280 --> 00:43:01,520
start googling and start gripping

1122
00:42:59,599 --> 00:43:02,880
through the postgres source

1123
00:43:01,520 --> 00:43:04,880
i mean i can't i don't honestly have a

1124
00:43:02,880 --> 00:43:06,640
great answer for that i don't have

1125
00:43:04,880 --> 00:43:08,640
a lot of experience using this yet this

1126
00:43:06,640 --> 00:43:09,680
is this like i said this project is

1127
00:43:08,640 --> 00:43:11,440
brand new

1128
00:43:09,680 --> 00:43:12,720
the requirement for this actually is

1129
00:43:11,440 --> 00:43:16,000
fairly new

1130
00:43:12,720 --> 00:43:18,160
um i was driven to it because we have

1131
00:43:16,000 --> 00:43:20,240
large organizations we work with that

1132
00:43:18,160 --> 00:43:22,879
are starting to make this a requirement

1133
00:43:20,240 --> 00:43:23,919
so there's still some some place place

1134
00:43:22,880 --> 00:43:25,920
to learn but if

1135
00:43:23,920 --> 00:43:27,440
if you figure out something that's

1136
00:43:25,920 --> 00:43:29,599
that's better i would love to hear about

1137
00:43:27,440 --> 00:43:29,599
it

1138
00:43:31,359 --> 00:43:34,400
okay so now i just want to go through a

1139
00:43:32,560 --> 00:43:35,200
couple of examples i'm kind of running

1140
00:43:34,400 --> 00:43:38,079
out of time

1141
00:43:35,200 --> 00:43:40,640
so i'm going to try and do this quickly

1142
00:43:38,079 --> 00:43:42,720
in this example i'm basically

1143
00:43:40,640 --> 00:43:44,799
going to block the read links this call

1144
00:43:42,720 --> 00:43:48,560
so initially if i create a table space

1145
00:43:44,800 --> 00:43:50,160
and i say you can see here this is the

1146
00:43:48,560 --> 00:43:52,480
use of that

1147
00:43:50,160 --> 00:43:54,078
set comp filter so that this output

1148
00:43:52,480 --> 00:43:55,040
shows me that the read link syscall

1149
00:43:54,079 --> 00:43:58,000
which is

1150
00:43:55,040 --> 00:43:58,560
number 89 at the session level is set to

1151
00:43:58,000 --> 00:44:02,319
allow

1152
00:43:58,560 --> 00:44:02,319
and the context is session

1153
00:44:03,680 --> 00:44:09,919
if i now go use

1154
00:44:06,800 --> 00:44:13,040
read link using this call

1155
00:44:09,920 --> 00:44:13,040
you know my call works

1156
00:44:13,440 --> 00:44:16,960
but now if i move read link from allow

1157
00:44:15,599 --> 00:44:21,440
to error

1158
00:44:16,960 --> 00:44:24,160
and restart or reload at least

1159
00:44:21,440 --> 00:44:25,280
you can see now i'm set to error and i

1160
00:44:24,160 --> 00:44:28,319
rerun this and i'll get

1161
00:44:25,280 --> 00:44:28,319
a permission denied

1162
00:44:29,839 --> 00:44:33,920
here's an example i cannot reduce the

1163
00:44:31,920 --> 00:44:34,720
restriction on nano sleep so if i add

1164
00:44:33,920 --> 00:44:37,359
nano sleep

1165
00:44:34,720 --> 00:44:39,359
in the session allow but it's already in

1166
00:44:37,359 --> 00:44:41,920
the global list

1167
00:44:39,359 --> 00:44:41,920
for log

1168
00:44:43,440 --> 00:44:47,040
you can see that it's still going to get

1169
00:44:44,720 --> 00:44:47,040
logged

1170
00:44:47,839 --> 00:44:50,960
this example i'm going to block clones

1171
00:44:49,359 --> 00:44:51,279
so this is kind of an interesting one a

1172
00:44:50,960 --> 00:44:52,800
lot

1173
00:44:51,280 --> 00:44:54,880
you know i don't how many people are

1174
00:44:52,800 --> 00:44:57,680
familiar with pg pearl u

1175
00:44:54,880 --> 00:44:59,200
pg pearl u is basically the untrusted

1176
00:44:57,680 --> 00:45:02,000
version of pg pearl

1177
00:44:59,200 --> 00:45:03,200
you can do things like shell out and run

1178
00:45:02,000 --> 00:45:04,720
stuff

1179
00:45:03,200 --> 00:45:06,480
which can be really useful if it's also

1180
00:45:04,720 --> 00:45:08,640
potentially dangerous right

1181
00:45:06,480 --> 00:45:10,400
so in this example i create a pl perl u

1182
00:45:08,640 --> 00:45:11,118
function that's going to let me cut a

1183
00:45:10,400 --> 00:45:14,640
file

1184
00:45:11,119 --> 00:45:19,760
and an x and send it to the client as

1185
00:45:14,640 --> 00:45:22,240
output and you can see that works right

1186
00:45:19,760 --> 00:45:23,839
so now if i add clone to the session

1187
00:45:22,240 --> 00:45:26,720
error

1188
00:45:23,839 --> 00:45:26,720
i'm going to get an error

1189
00:45:28,800 --> 00:45:32,079
so now i'm going to create a special

1190
00:45:31,280 --> 00:45:36,160
entry for

1191
00:45:32,079 --> 00:45:40,160
the user joe that does not have clone

1192
00:45:36,160 --> 00:45:41,440
as an error and now when i log in as joe

1193
00:45:40,160 --> 00:45:42,160
you can see i can use that function

1194
00:45:41,440 --> 00:45:44,400
again so

1195
00:45:42,160 --> 00:45:45,598
basically i can use this to say joe's

1196
00:45:44,400 --> 00:45:47,680
allowed

1197
00:45:45,599 --> 00:45:48,960
to use pl pearl u to shell out and do

1198
00:45:47,680 --> 00:45:53,040
stuff

1199
00:45:48,960 --> 00:45:53,040
whereas everyone else is not

1200
00:45:54,480 --> 00:45:59,599
five minutes okay and then

1201
00:45:58,079 --> 00:46:01,680
finally i'm going to show how that

1202
00:45:59,599 --> 00:46:02,480
client set client filter could be used

1203
00:46:01,680 --> 00:46:04,240
now

1204
00:46:02,480 --> 00:46:05,839
even though i'm logged in as joe i can

1205
00:46:04,240 --> 00:46:08,720
run create

1206
00:46:05,839 --> 00:46:09,680
a client filter right here with this

1207
00:46:08,720 --> 00:46:12,799
call

1208
00:46:09,680 --> 00:46:16,399
which will again deny using the

1209
00:46:12,800 --> 00:46:19,680
the clone syscall and so that

1210
00:46:16,400 --> 00:46:23,760
is it um i've got i guess

1211
00:46:19,680 --> 00:46:23,759
four minutes left for questions

1212
00:46:25,200 --> 00:46:30,240
oh thank you for this excellent talk and

1213
00:46:28,000 --> 00:46:34,000
we have some time for our questions so

1214
00:46:30,240 --> 00:46:34,000
does anybody has a question

1215
00:46:39,359 --> 00:46:42,720
you said that it's possible to reduce

1216
00:46:41,920 --> 00:46:45,520
privileges

1217
00:46:42,720 --> 00:46:45,520
at a later point

1218
00:46:46,240 --> 00:46:51,118
i'm an open phd developer we have pledge

1219
00:46:49,119 --> 00:46:52,319
and what we found was that it's

1220
00:46:51,119 --> 00:46:54,480
possible with quite a lot of

1221
00:46:52,319 --> 00:46:56,640
applications to hoist

1222
00:46:54,480 --> 00:46:58,240
some of the codes to the initialization

1223
00:46:56,640 --> 00:47:01,118
phase and then drop

1224
00:46:58,240 --> 00:47:02,399
additional privileges that you had

1225
00:47:01,119 --> 00:47:04,640
similar experience with

1226
00:47:02,400 --> 00:47:05,920
postgres did you find certain components

1227
00:47:04,640 --> 00:47:08,960
that were like okay

1228
00:47:05,920 --> 00:47:10,480
this is where i drop some privileges but

1229
00:47:08,960 --> 00:47:13,040
i need

1230
00:47:10,480 --> 00:47:14,480
uh need those privileges here but

1231
00:47:13,040 --> 00:47:16,000
actually it can be done in

1232
00:47:14,480 --> 00:47:17,520
initialization that you find some of

1233
00:47:16,000 --> 00:47:19,280
those cases so

1234
00:47:17,520 --> 00:47:20,720
if i do i need to repeat the question

1235
00:47:19,280 --> 00:47:23,599
again since you use the mic yeah

1236
00:47:20,720 --> 00:47:24,799
i do so i'm gonna see if i can summarize

1237
00:47:23,599 --> 00:47:27,839
that a little bit um

1238
00:47:24,800 --> 00:47:29,200
so the you you found that with certain

1239
00:47:27,839 --> 00:47:30,720
applications you can

1240
00:47:29,200 --> 00:47:32,799
basically when you initialize you need

1241
00:47:30,720 --> 00:47:35,839
more sys calls available

1242
00:47:32,800 --> 00:47:37,119
later on you can restrict and and get

1243
00:47:35,839 --> 00:47:40,480
away with kind of a

1244
00:47:37,119 --> 00:47:42,319
reduced surface area right and so yes

1245
00:47:40,480 --> 00:47:44,480
absolutely that's true

1246
00:47:42,319 --> 00:47:47,040
um actually the the filters that i've

1247
00:47:44,480 --> 00:47:49,119
developed for postgres using pg setcomp

1248
00:47:47,040 --> 00:47:50,800
there are more assist calls required at

1249
00:47:49,119 --> 00:47:53,440
the global level

1250
00:47:50,800 --> 00:47:55,520
than at the session level and so the

1251
00:47:53,440 --> 00:47:56,960
session level actually is already in

1252
00:47:55,520 --> 00:47:58,559
in the filters that i've developed using

1253
00:47:56,960 --> 00:48:00,319
that 10-step process

1254
00:47:58,559 --> 00:48:02,319
is already more restrictive for the

1255
00:48:00,319 --> 00:48:04,960
client than it is

1256
00:48:02,319 --> 00:48:06,960
for the global level one of the things

1257
00:48:04,960 --> 00:48:08,559
that's kind of related to that that

1258
00:48:06,960 --> 00:48:11,839
you don't really ask about but i'll talk

1259
00:48:08,559 --> 00:48:13,680
about a little bit the postgres has like

1260
00:48:11,839 --> 00:48:14,880
i forget exactly that but it's like

1261
00:48:13,680 --> 00:48:17,759
seven or eight

1262
00:48:14,880 --> 00:48:19,359
processes that spin up when it starts

1263
00:48:17,760 --> 00:48:21,839
there's the postmaster but then there's

1264
00:48:19,359 --> 00:48:22,880
some auxiliary processes one of the

1265
00:48:21,839 --> 00:48:25,520
things we've looked into

1266
00:48:22,880 --> 00:48:27,119
is some of those auxiliary processes in

1267
00:48:25,520 --> 00:48:30,400
particular probably need quite

1268
00:48:27,119 --> 00:48:32,319
a few less sys calls unfortunately

1269
00:48:30,400 --> 00:48:34,800
there's not a good way to hook into

1270
00:48:32,319 --> 00:48:35,920
specific processes to reduce the surface

1271
00:48:34,800 --> 00:48:38,720
area of those

1272
00:48:35,920 --> 00:48:40,160
so far one of the things that i hope we

1273
00:48:38,720 --> 00:48:41,118
will get into our future version of

1274
00:48:40,160 --> 00:48:43,279
postgres

1275
00:48:41,119 --> 00:48:44,960
is some additional hooks so that this

1276
00:48:43,280 --> 00:48:46,240
could be extended so that for instance

1277
00:48:44,960 --> 00:48:49,119
the auto vacuum

1278
00:48:46,240 --> 00:48:50,399
damon that runs as part of postgres

1279
00:48:49,119 --> 00:48:52,880
probably needs

1280
00:48:50,400 --> 00:48:53,760
far less cis calls than a session normal

1281
00:48:52,880 --> 00:48:55,359
session does

1282
00:48:53,760 --> 00:48:56,800
but that's not something that's possible

1283
00:48:55,359 --> 00:48:59,359
to do yet

1284
00:48:56,800 --> 00:49:01,280
but you know as i said you can restrict

1285
00:48:59,359 --> 00:49:02,960
at the session level

1286
00:49:01,280 --> 00:49:04,480
and you can even restrict postgres as

1287
00:49:02,960 --> 00:49:06,079
opposed to the system d

1288
00:49:04,480 --> 00:49:07,839
because as i talked about systemd

1289
00:49:06,079 --> 00:49:10,880
actually needed more sys calls

1290
00:49:07,839 --> 00:49:13,520
than just starting up postgres does

1291
00:49:10,880 --> 00:49:15,520
so if you use this with systemd you'd

1292
00:49:13,520 --> 00:49:17,200
have a bigger list with systemd

1293
00:49:15,520 --> 00:49:18,559
slightly smaller list with the global

1294
00:49:17,200 --> 00:49:20,558
list for postgres

1295
00:49:18,559 --> 00:49:21,920
and a slightly smaller list at the

1296
00:49:20,559 --> 00:49:25,440
session level

1297
00:49:21,920 --> 00:49:31,839
that you're allowing okay

1298
00:49:25,440 --> 00:49:31,839
and here's a question

1299
00:49:32,240 --> 00:49:36,160
does it has a an impact in terms of

1300
00:49:34,800 --> 00:49:38,559
latency

1301
00:49:36,160 --> 00:49:40,960
licensing treatment i'm sorry can you

1302
00:49:38,559 --> 00:49:44,400
repeat that does it have

1303
00:49:40,960 --> 00:49:47,119
an impact in terms of latency treatment

1304
00:49:44,400 --> 00:49:47,920
an impact on latency yeah so does it

1305
00:49:47,119 --> 00:49:50,720
have an impact

1306
00:49:47,920 --> 00:49:52,160
on performance in general right i've not

1307
00:49:50,720 --> 00:49:55,200
done any measurements for

1308
00:49:52,160 --> 00:49:56,839
for performance uh at this point

1309
00:49:55,200 --> 00:49:58,480
you know i didn't see anything

1310
00:49:56,839 --> 00:50:00,240
noticeable okay

1311
00:49:58,480 --> 00:50:01,760
actually i mean you'll see something

1312
00:50:00,240 --> 00:50:03,118
noticeable

1313
00:50:01,760 --> 00:50:04,559
when you're going through that process

1314
00:50:03,119 --> 00:50:06,079
and everything's getting written to the

1315
00:50:04,559 --> 00:50:07,119
audit d-log if it's all in the same

1316
00:50:06,079 --> 00:50:09,599
machine

1317
00:50:07,119 --> 00:50:10,640
that'll have a noticeable impact but

1318
00:50:09,599 --> 00:50:12,640
once you

1319
00:50:10,640 --> 00:50:15,040
kind of clean up your filter so not

1320
00:50:12,640 --> 00:50:17,279
every every query is getting logged

1321
00:50:15,040 --> 00:50:18,160
um you know the the performance goes

1322
00:50:17,280 --> 00:50:20,000
back to

1323
00:50:18,160 --> 00:50:21,598
more or less normal i'm sure yes i

1324
00:50:20,000 --> 00:50:23,920
should at some point

1325
00:50:21,599 --> 00:50:26,319
do some more rigorous performance

1326
00:50:23,920 --> 00:50:29,680
testing to see what the impact of it is

1327
00:50:26,319 --> 00:50:31,759
but you know the reality is that places

1328
00:50:29,680 --> 00:50:35,200
that care about this kind of stuff

1329
00:50:31,760 --> 00:50:35,200
are probably willing to make that

1330
00:50:38,839 --> 00:50:41,839
trade-off

1331
00:50:44,240 --> 00:50:47,439
um i don't know if if you have time to

1332
00:50:46,079 --> 00:50:51,440
go into this um but

1333
00:50:47,440 --> 00:50:54,800
um second i don't know

1334
00:50:51,440 --> 00:50:57,839
that thoroughly but um if you

1335
00:50:54,800 --> 00:51:01,119
have like the way postgres implements

1336
00:50:57,839 --> 00:51:04,000
uh uh certain functions it's

1337
00:51:01,119 --> 00:51:05,280
kind of separated uh within specific

1338
00:51:04,000 --> 00:51:08,319
processes

1339
00:51:05,280 --> 00:51:12,880
so um

1340
00:51:08,319 --> 00:51:12,880
is it possible to have succumb

1341
00:51:15,119 --> 00:51:22,240
different second rules for different

1342
00:51:19,200 --> 00:51:25,359
system processes within the postgres

1343
00:51:22,240 --> 00:51:27,839
for example replication or uh

1344
00:51:25,359 --> 00:51:29,920
like a different kind of profile for

1345
00:51:27,839 --> 00:51:31,359
different processes

1346
00:51:29,920 --> 00:51:33,599
so the question is is it possible to

1347
00:51:31,359 --> 00:51:36,799
have different profiles for different

1348
00:51:33,599 --> 00:51:37,119
processes parts of the postgas processes

1349
00:51:36,800 --> 00:51:38,240
yeah

1350
00:51:37,119 --> 00:51:40,160
and that's actually that's what i was

1351
00:51:38,240 --> 00:51:43,040
just talking about a minute ago

1352
00:51:40,160 --> 00:51:44,640
um there are these extra demons that are

1353
00:51:43,040 --> 00:51:46,079
launched that are kind of auxiliary

1354
00:51:44,640 --> 00:51:47,759
processes

1355
00:51:46,079 --> 00:51:49,440
right now they just get what the

1356
00:51:47,760 --> 00:51:51,760
postmaster gets because there's really

1357
00:51:49,440 --> 00:51:53,200
no convenient way to hook into them

1358
00:51:51,760 --> 00:51:54,880
but i hope that in the future i'll be

1359
00:51:53,200 --> 00:51:57,839
able to improve that

1360
00:51:54,880 --> 00:51:58,559
i think that's probably it right we're

1361
00:51:57,839 --> 00:52:01,680
done

1362
00:51:58,559 --> 00:52:02,960
yeah we're done thank you again for this

1363
00:52:01,680 --> 00:52:17,839
excellent talk and

1364
00:52:02,960 --> 00:52:17,839
please write some clothes for him

