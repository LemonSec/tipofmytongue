1
00:00:05,120 --> 00:00:08,960
for those of you like me who have like

2
00:00:06,879 --> 00:00:10,399
teenagers uh story of trust that will

3
00:00:08,960 --> 00:00:12,240
never clean up your room when they tell

4
00:00:10,400 --> 00:00:14,080
you

5
00:00:12,240 --> 00:00:15,280
and that's basically also a part of this

6
00:00:14,080 --> 00:00:17,680
talk

7
00:00:15,280 --> 00:00:18,960
nerd alert this was from a previous uh

8
00:00:17,680 --> 00:00:20,880
conference but i guess here

9
00:00:18,960 --> 00:00:22,720
it's there's no alert everybody

10
00:00:20,880 --> 00:00:25,359
everybody's here

11
00:00:22,720 --> 00:00:25,840
and like to put the scope down uh we

12
00:00:25,359 --> 00:00:28,320
really

13
00:00:25,840 --> 00:00:29,039
only gonna focus on putting things from

14
00:00:28,320 --> 00:00:30,720
source

15
00:00:29,039 --> 00:00:32,640
to production so not running in

16
00:00:30,720 --> 00:00:33,280
production because that's another field

17
00:00:32,640 --> 00:00:35,840
of

18
00:00:33,280 --> 00:00:38,079
dealing with tampering and so on uh

19
00:00:35,840 --> 00:00:39,760
we're i'm not gonna tell you like scary

20
00:00:38,079 --> 00:00:41,920
stories about security because you know

21
00:00:39,760 --> 00:00:43,519
that's all too easy you all know that's

22
00:00:41,920 --> 00:00:44,800
important i don't have to explain that

23
00:00:43,520 --> 00:00:47,120
to you

24
00:00:44,800 --> 00:00:49,120
i'm not talking about changing hardware

25
00:00:47,120 --> 00:00:51,360
because that's another vector

26
00:00:49,120 --> 00:00:53,839
you know nationwide attacks i'm not

27
00:00:51,360 --> 00:00:55,440
going to go there as well

28
00:00:53,840 --> 00:00:57,680
i'm not talking about like human

29
00:00:55,440 --> 00:01:00,160
engineering or kind of tricking you into

30
00:00:57,680 --> 00:01:02,160
doing stuff that you don't want to do

31
00:01:00,160 --> 00:01:03,919
i'm not talking about physical bypassing

32
00:01:02,160 --> 00:01:06,720
access to your server rooms

33
00:01:03,920 --> 00:01:08,880
you know trying to compress the talk as

34
00:01:06,720 --> 00:01:11,200
much as i can

35
00:01:08,880 --> 00:01:11,920
i'm not talking about key management

36
00:01:11,200 --> 00:01:13,920
although it's like

37
00:01:11,920 --> 00:01:14,960
important and here at fosdem you

38
00:01:13,920 --> 00:01:18,159
probably

39
00:01:14,960 --> 00:01:20,399
want to manage the stuff as well

40
00:01:18,159 --> 00:01:21,520
um not talking about hardening your

41
00:01:20,400 --> 00:01:24,720
servers

42
00:01:21,520 --> 00:01:27,280
uh okay so we're almost there what i'm

43
00:01:24,720 --> 00:01:28,000
gonna talk about tampering changing

44
00:01:27,280 --> 00:01:30,240
things

45
00:01:28,000 --> 00:01:31,840
unauthorized changes that's what i'm

46
00:01:30,240 --> 00:01:35,119
gonna talk about

47
00:01:31,840 --> 00:01:36,640
um i leave this slide in here because

48
00:01:35,119 --> 00:01:37,840
promise theory for those who know it

49
00:01:36,640 --> 00:01:40,640
there's a lot of the word

50
00:01:37,840 --> 00:01:42,320
trust stress trusting in there but trust

51
00:01:40,640 --> 00:01:43,600
through verification and that's going to

52
00:01:42,320 --> 00:01:46,398
be the crux of the talk

53
00:01:43,600 --> 00:01:48,240
like how do we verify the stuff as well

54
00:01:46,399 --> 00:01:49,680
i don't have an answer for everything so

55
00:01:48,240 --> 00:01:51,520
this is a research talk there's going to

56
00:01:49,680 --> 00:01:52,240
be a lot all over the place of things i

57
00:01:51,520 --> 00:01:54,158
found

58
00:01:52,240 --> 00:01:55,360
so i hope in next iterations of the talk

59
00:01:54,159 --> 00:01:57,759
i will get better

60
00:01:55,360 --> 00:01:59,360
at providing solutions as well so but i

61
00:01:57,759 --> 00:02:00,719
went as far as i could

62
00:01:59,360 --> 00:02:03,280
from what i know right now in my

63
00:02:00,719 --> 00:02:04,960
research um

64
00:02:03,280 --> 00:02:06,960
so we're going to start with you know

65
00:02:04,960 --> 00:02:08,079
the laptop it's i know it's a curse to

66
00:02:06,960 --> 00:02:10,318
put like a

67
00:02:08,080 --> 00:02:12,400
mac here and an open source conference

68
00:02:10,318 --> 00:02:15,200
but that's a lot of the reality

69
00:02:12,400 --> 00:02:17,200
uh and we gotta trust already the

70
00:02:15,200 --> 00:02:17,920
hardware vendor we gotta trust apple we

71
00:02:17,200 --> 00:02:20,640
got the trust

72
00:02:17,920 --> 00:02:22,319
the operating system so i'm gonna take

73
00:02:20,640 --> 00:02:24,160
that as a starting point

74
00:02:22,319 --> 00:02:26,480
the developers laptop with the

75
00:02:24,160 --> 00:02:28,160
certificate author is on there

76
00:02:26,480 --> 00:02:29,760
you know with everything and there and

77
00:02:28,160 --> 00:02:34,319
it's updated so i kind of

78
00:02:29,760 --> 00:02:36,480
start from there um

79
00:02:34,319 --> 00:02:37,599
these days a lot of the development is

80
00:02:36,480 --> 00:02:40,160
actually assembling

81
00:02:37,599 --> 00:02:42,399
more and more libraries uh you know uh

82
00:02:40,160 --> 00:02:44,720
if you're doing some development on mac

83
00:02:42,400 --> 00:02:47,280
uh there's the app store there's docker

84
00:02:44,720 --> 00:02:48,640
uh npm if your node homebrew

85
00:02:47,280 --> 00:02:50,560
because you know apple doesn't provide

86
00:02:48,640 --> 00:02:52,160
all the tools you actually need so

87
00:02:50,560 --> 00:02:53,920
you know it's nice to have the community

88
00:02:52,160 --> 00:02:56,239
but we depend on a lot of

89
00:02:53,920 --> 00:02:57,359
other libraries actually to even start

90
00:02:56,239 --> 00:02:59,519
our job

91
00:02:57,360 --> 00:03:01,200
and get the information before we can

92
00:02:59,519 --> 00:03:03,519
even start developing so the first thing

93
00:03:01,200 --> 00:03:06,159
we trust is kind of all these kind of

94
00:03:03,519 --> 00:03:08,080
external dependencies and most of them

95
00:03:06,159 --> 00:03:08,959
are actually based on you know some form

96
00:03:08,080 --> 00:03:13,360
of tls

97
00:03:08,959 --> 00:03:13,360
verification chain of trust

98
00:03:13,760 --> 00:03:17,760
and uh well you know i don't have to

99
00:03:16,239 --> 00:03:21,360
explain to this crowd

100
00:03:17,760 --> 00:03:24,560
any configuration ciphers uh you know

101
00:03:21,360 --> 00:03:26,000
all that stuff certificates uh that we

102
00:03:24,560 --> 00:03:28,560
think that is happening underneath

103
00:03:26,000 --> 00:03:30,640
because you know we're using https

104
00:03:28,560 --> 00:03:32,879
and it should magically be taken care of

105
00:03:30,640 --> 00:03:32,879
right

106
00:03:33,040 --> 00:03:37,440
obviously you know leaked or rogue ca

107
00:03:35,840 --> 00:03:38,799
certificates but you know that's another

108
00:03:37,440 --> 00:03:42,560
story we'll leave that to

109
00:03:38,799 --> 00:03:46,799
the pros and all the ciphers and so on

110
00:03:42,560 --> 00:03:47,280
um if you so i'm taking this example of

111
00:03:46,799 --> 00:03:50,560
a node

112
00:03:47,280 --> 00:03:53,760
app trying to push that to production

113
00:03:50,560 --> 00:03:55,680
like the node by default has a lot of

114
00:03:53,760 --> 00:03:56,640
cyphers it supports so it has to support

115
00:03:55,680 --> 00:04:00,799
it because it's

116
00:03:56,640 --> 00:04:02,559
quite open so we're trusting it but we

117
00:04:00,799 --> 00:04:05,840
can get better at

118
00:04:02,560 --> 00:04:07,760
you know putting this down it's it's as

119
00:04:05,840 --> 00:04:08,640
easy even as putting some environment

120
00:04:07,760 --> 00:04:10,798
variables

121
00:04:08,640 --> 00:04:12,079
and kind of saying these ones we don't

122
00:04:10,799 --> 00:04:13,840
want

123
00:04:12,080 --> 00:04:15,280
so it's a simple thing you can do if you

124
00:04:13,840 --> 00:04:18,320
don't

125
00:04:15,280 --> 00:04:20,880
want just rely on node just doing stuff

126
00:04:18,320 --> 00:04:20,880
and there as well

127
00:04:21,918 --> 00:04:25,599
i have to take my glasses on and off i'm

128
00:04:23,600 --> 00:04:28,400
sorry

129
00:04:25,600 --> 00:04:29,840
what's interesting is that a lot of the

130
00:04:28,400 --> 00:04:32,560
we think about

131
00:04:29,840 --> 00:04:34,320
certificates being validated yes most of

132
00:04:32,560 --> 00:04:37,280
the time it actually validates whether

133
00:04:34,320 --> 00:04:41,360
the certificate has been expired

134
00:04:37,280 --> 00:04:44,559
but it doesn't look at revocations

135
00:04:41,360 --> 00:04:47,600
so um for example you know you can

136
00:04:44,560 --> 00:04:48,880
uh what is it crl and so on you can

137
00:04:47,600 --> 00:04:52,320
verify it

138
00:04:48,880 --> 00:04:55,360
but in several of the libraries

139
00:04:52,320 --> 00:04:58,400
it is just not available

140
00:04:55,360 --> 00:04:59,600
let's encrypt as uh kind of made this

141
00:04:58,400 --> 00:05:02,880
better

142
00:04:59,600 --> 00:05:04,320
uh but we're still not there yet um

143
00:05:02,880 --> 00:05:06,000
if you want to go a step further you

144
00:05:04,320 --> 00:05:09,199
know you look at the

145
00:05:06,000 --> 00:05:10,160
ssl the certificate is valid uh you look

146
00:05:09,199 --> 00:05:13,199
at the revocation

147
00:05:10,160 --> 00:05:15,039
stuff the next step is actually like

148
00:05:13,199 --> 00:05:18,320
what other certificates got created

149
00:05:15,039 --> 00:05:19,680
for my domain uh facebook provides like

150
00:05:18,320 --> 00:05:22,400
a nice interface

151
00:05:19,680 --> 00:05:24,080
uh to kind of check whatever certificate

152
00:05:22,400 --> 00:05:26,080
that was created

153
00:05:24,080 --> 00:05:27,680
in your domain so that's a way of

154
00:05:26,080 --> 00:05:28,639
detecting work certificates being

155
00:05:27,680 --> 00:05:31,360
created

156
00:05:28,639 --> 00:05:33,199
under your domain that you validate so

157
00:05:31,360 --> 00:05:35,680
you can put a web hook on there

158
00:05:33,199 --> 00:05:37,680
modif monitor your domain and kind of

159
00:05:35,680 --> 00:05:41,360
get information about things

160
00:05:37,680 --> 00:05:42,960
certificates being created there as well

161
00:05:41,360 --> 00:05:45,840
and if you want to go step one step

162
00:05:42,960 --> 00:05:48,880
further you can put in dns

163
00:05:45,840 --> 00:05:50,080
the caa record that actually says well

164
00:05:48,880 --> 00:05:52,639
if this record

165
00:05:50,080 --> 00:05:54,320
if this certificate has been created by

166
00:05:52,639 --> 00:05:56,479
which authority has it been created

167
00:05:54,320 --> 00:05:59,759
because maybe there's some dodgy

168
00:05:56,479 --> 00:06:00,800
kind of ca that creates a certificate

169
00:05:59,759 --> 00:06:03,440
for your domain

170
00:06:00,800 --> 00:06:05,039
but here you can specified in dns which

171
00:06:03,440 --> 00:06:06,960
ones do you trust

172
00:06:05,039 --> 00:06:08,960
i'm not saying this is widely used but

173
00:06:06,960 --> 00:06:09,758
it's like one of the trust verification

174
00:06:08,960 --> 00:06:13,120
system

175
00:06:09,759 --> 00:06:14,880
uh we can use uh in the system so we we

176
00:06:13,120 --> 00:06:17,120
kind of you know

177
00:06:14,880 --> 00:06:19,600
went a little bit deeper on https and

178
00:06:17,120 --> 00:06:20,319
validation than usual yes you know https

179
00:06:19,600 --> 00:06:22,720
and we're

180
00:06:20,319 --> 00:06:23,360
happy kind of a couple of things we

181
00:06:22,720 --> 00:06:25,199
could do

182
00:06:23,360 --> 00:06:27,440
but obviously there's the next problem

183
00:06:25,199 --> 00:06:31,039
is kind of is dns right

184
00:06:27,440 --> 00:06:33,120
because we want to do a request but we

185
00:06:31,039 --> 00:06:36,240
want to do a dns request

186
00:06:33,120 --> 00:06:39,280
and um well i'm

187
00:06:36,240 --> 00:06:41,199
i'm sorry to say it still isn't solved

188
00:06:39,280 --> 00:06:42,719
and many would think like dns sec is

189
00:06:41,199 --> 00:06:44,800
kind of the answer

190
00:06:42,720 --> 00:06:46,080
but if you look at what a few of the

191
00:06:44,800 --> 00:06:49,120
major ones

192
00:06:46,080 --> 00:06:49,440
like npm and github don't have the inner

193
00:06:49,120 --> 00:06:53,120
sec

194
00:06:49,440 --> 00:06:54,960
enabled so that was a surprise to me

195
00:06:53,120 --> 00:06:56,479
i was like thinking yeah this is you

196
00:06:54,960 --> 00:06:58,159
know sex you know everybody should be

197
00:06:56,479 --> 00:07:00,240
doing it i know it's hard but

198
00:06:58,160 --> 00:07:01,520
i would have expected these companies uh

199
00:07:00,240 --> 00:07:04,560
to be doing it

200
00:07:01,520 --> 00:07:07,359
um even curl

201
00:07:04,560 --> 00:07:09,199
doesn't check it like there's like a six

202
00:07:07,360 --> 00:07:12,720
year old open

203
00:07:09,199 --> 00:07:13,440
pull request to do it like my trust in

204
00:07:12,720 --> 00:07:15,440
curl has

205
00:07:13,440 --> 00:07:16,960
gone way down i'm not saying it's not a

206
00:07:15,440 --> 00:07:18,639
good tool but

207
00:07:16,960 --> 00:07:21,120
obviously it's people but the more you

208
00:07:18,639 --> 00:07:24,000
look at the things under the hood the

209
00:07:21,120 --> 00:07:25,360
the scarier things kind of getting uh

210
00:07:24,000 --> 00:07:28,080
there as well

211
00:07:25,360 --> 00:07:29,680
and then oh no okay we got hd gps out of

212
00:07:28,080 --> 00:07:30,240
the way we kind of trust that we got the

213
00:07:29,680 --> 00:07:32,560
dns

214
00:07:30,240 --> 00:07:33,680
we kind of assumed that trust as well

215
00:07:32,560 --> 00:07:36,400
and then the next thing you

216
00:07:33,680 --> 00:07:37,759
do is like a home brew says us like you

217
00:07:36,400 --> 00:07:40,638
know run this

218
00:07:37,759 --> 00:07:42,160
kind of ruby execute from github on your

219
00:07:40,639 --> 00:07:47,199
laptop

220
00:07:42,160 --> 00:07:50,720
how many have done that yeah scary right

221
00:07:47,199 --> 00:07:53,440
um so i don't know why we

222
00:07:50,720 --> 00:07:54,000
you know it's it's it doesn't seem to

223
00:07:53,440 --> 00:07:56,240
you know

224
00:07:54,000 --> 00:07:58,800
be able to get better to do it uh

225
00:07:56,240 --> 00:08:01,120
there's a tool i found like pipe this

226
00:07:58,800 --> 00:08:02,879
that allows you to actually view

227
00:08:01,120 --> 00:08:03,919
whatever has been piped to the bash

228
00:08:02,879 --> 00:08:05,360
command that

229
00:08:03,919 --> 00:08:07,758
you can review the commands being

230
00:08:05,360 --> 00:08:09,440
executed gives you some kind of

231
00:08:07,759 --> 00:08:12,000
visibility of the things that are

232
00:08:09,440 --> 00:08:13,520
happening uh but again like we we just

233
00:08:12,000 --> 00:08:17,520
take that for granted right so

234
00:08:13,520 --> 00:08:19,280
homebrew right uh let's do it um

235
00:08:17,520 --> 00:08:21,359
node is a little bit better in a way

236
00:08:19,280 --> 00:08:24,559
that at least we can do the curl

237
00:08:21,360 --> 00:08:27,599
uh download and check the validity of

238
00:08:24,560 --> 00:08:31,039
the binaries

239
00:08:27,599 --> 00:08:34,880
they have gpg enabled so which is nice

240
00:08:31,039 --> 00:08:38,080
uh but okay i'm just going to go back

241
00:08:34,880 --> 00:08:40,719
on this slide nope okay but it it still

242
00:08:38,080 --> 00:08:41,680
is kind of a whole ceremony to go

243
00:08:40,719 --> 00:08:44,240
through right

244
00:08:41,679 --> 00:08:46,000
um i rarely do it but it's like one of

245
00:08:44,240 --> 00:08:48,000
those things

246
00:08:46,000 --> 00:08:49,120
it should almost get baked into the tool

247
00:08:48,000 --> 00:08:52,080
somehow in the future

248
00:08:49,120 --> 00:08:54,399
uh as a step that just says i download

249
00:08:52,080 --> 00:08:57,040
it it's validated it does all the checks

250
00:08:54,399 --> 00:08:59,200
currently across all the uh package

251
00:08:57,040 --> 00:09:01,120
repositories there's no standard way

252
00:08:59,200 --> 00:09:03,120
everybody does it differently and you

253
00:09:01,120 --> 00:09:05,120
kind of have to figure out and sometimes

254
00:09:03,120 --> 00:09:06,800
it's not even well documented

255
00:09:05,120 --> 00:09:09,760
and you have to spend a lot of time to

256
00:09:06,800 --> 00:09:12,319
actually verify the stuff

257
00:09:09,760 --> 00:09:15,040
doctor was an interesting one i wanted

258
00:09:12,320 --> 00:09:18,240
to have docker desktop on my laptop

259
00:09:15,040 --> 00:09:19,599
i could not find it check some somewhere

260
00:09:18,240 --> 00:09:22,160
on a website that

261
00:09:19,600 --> 00:09:23,920
was able to verify the dmg that i was

262
00:09:22,160 --> 00:09:26,719
downloading

263
00:09:23,920 --> 00:09:28,719
the only way i could verify it was if i

264
00:09:26,720 --> 00:09:31,519
install it on my mac

265
00:09:28,720 --> 00:09:32,640
using app store and then i could verify

266
00:09:31,519 --> 00:09:34,800
the signature

267
00:09:32,640 --> 00:09:35,680
and that was documented but then again

268
00:09:34,800 --> 00:09:37,279
we go through the

269
00:09:35,680 --> 00:09:38,719
chain of thrust that we have to trust

270
00:09:37,279 --> 00:09:40,880
like apple and

271
00:09:38,720 --> 00:09:42,480
and kind of go around that so that was a

272
00:09:40,880 --> 00:09:44,320
little bit surprising for me to see

273
00:09:42,480 --> 00:09:45,680
you know we can kind of do that with a

274
00:09:44,320 --> 00:09:48,640
docker binary and

275
00:09:45,680 --> 00:09:48,640
verify that as well

276
00:09:48,839 --> 00:09:54,320
um okay i i got like node i got like

277
00:09:52,880 --> 00:09:56,800
docker a homebrew

278
00:09:54,320 --> 00:09:57,839
so now you know i'm gonna install some

279
00:09:56,800 --> 00:10:00,160
libraries right

280
00:09:57,839 --> 00:10:00,160
um

281
00:10:00,959 --> 00:10:07,839
if you look at libraries how do you

282
00:10:05,200 --> 00:10:08,240
think that the library is secure right

283
00:10:07,839 --> 00:10:10,079
oh

284
00:10:08,240 --> 00:10:11,880
if there's like a million people using

285
00:10:10,079 --> 00:10:15,069
it it's secure

286
00:10:11,880 --> 00:10:15,070
[Music]

287
00:10:15,360 --> 00:10:18,800
if it's like been there a long time it's

288
00:10:17,120 --> 00:10:22,560
secure

289
00:10:18,800 --> 00:10:24,399
so i haven't really found a good way

290
00:10:22,560 --> 00:10:26,959
obviously it's kind of like verifying

291
00:10:24,399 --> 00:10:29,839
multiple vectors

292
00:10:26,959 --> 00:10:31,760
but there is no kind of good way to

293
00:10:29,839 --> 00:10:33,600
verify it there's a lot of vulnerability

294
00:10:31,760 --> 00:10:35,920
scanners that will report these

295
00:10:33,600 --> 00:10:37,839
cvs or something on something but if

296
00:10:35,920 --> 00:10:38,240
it's like a library not well know or a

297
00:10:37,839 --> 00:10:41,040
new

298
00:10:38,240 --> 00:10:42,800
thing it's like really hard to verify

299
00:10:41,040 --> 00:10:44,560
unless you kind of download

300
00:10:42,800 --> 00:10:48,319
or compile everything from scratch

301
00:10:44,560 --> 00:10:48,319
yourself and go from there

302
00:10:49,839 --> 00:10:53,040
npm install is interesting because it

303
00:10:52,240 --> 00:10:55,279
actually you know

304
00:10:53,040 --> 00:10:56,959
like many of the package managers just

305
00:10:55,279 --> 00:10:58,800
runs also scripts

306
00:10:56,959 --> 00:11:00,560
when you do that so you can change a lot

307
00:10:58,800 --> 00:11:04,079
of stuff on your laptop

308
00:11:00,560 --> 00:11:06,000
as well so you can for example use npm

309
00:11:04,079 --> 00:11:06,880
install with ignore scripts and say well

310
00:11:06,000 --> 00:11:08,880
don't run it

311
00:11:06,880 --> 00:11:10,160
and get like a preview of the scripts

312
00:11:08,880 --> 00:11:12,880
it's going to execute

313
00:11:10,160 --> 00:11:13,439
and then do the execution so it's like a

314
00:11:12,880 --> 00:11:16,000
next

315
00:11:13,440 --> 00:11:16,640
layer you can verify uh what is actually

316
00:11:16,000 --> 00:11:20,079
going on

317
00:11:16,640 --> 00:11:21,839
uh underneath uh it's it's very clunky

318
00:11:20,079 --> 00:11:22,399
um of course we don't want to have like

319
00:11:21,839 --> 00:11:25,040
uh

320
00:11:22,399 --> 00:11:27,519
you know advertising in npm uh who

321
00:11:25,040 --> 00:11:30,959
remembers this happening

322
00:11:27,519 --> 00:11:31,839
nobody so for a while when you did npm

323
00:11:30,959 --> 00:11:34,079
install

324
00:11:31,839 --> 00:11:35,279
instead of only giving you the packages

325
00:11:34,079 --> 00:11:37,359
that installed

326
00:11:35,279 --> 00:11:39,040
it will just show advertising in your

327
00:11:37,360 --> 00:11:41,279
cli tool

328
00:11:39,040 --> 00:11:42,640
there was a lot of debates of something

329
00:11:41,279 --> 00:11:45,040
happening but it kind of

330
00:11:42,640 --> 00:11:46,880
you know shows you what these package

331
00:11:45,040 --> 00:11:49,279
managers could do to your system

332
00:11:46,880 --> 00:11:50,560
if you know this somebody who wants to

333
00:11:49,279 --> 00:11:54,079
do some uh

334
00:11:50,560 --> 00:11:56,959
stuff with it um

335
00:11:54,079 --> 00:11:58,239
so you you kind of do the scanning you

336
00:11:56,959 --> 00:12:00,160
find all the bugs

337
00:11:58,240 --> 00:12:01,279
uh one of the problems obviously is kind

338
00:12:00,160 --> 00:12:03,199
of

339
00:12:01,279 --> 00:12:04,639
all the dependencies and the libraries

340
00:12:03,200 --> 00:12:07,440
like a bug could be

341
00:12:04,639 --> 00:12:08,320
uh ddosing it but you're using it

342
00:12:07,440 --> 00:12:10,560
internally

343
00:12:08,320 --> 00:12:12,079
so even with all the scanner tools it's

344
00:12:10,560 --> 00:12:14,399
really hard to figure out like

345
00:12:12,079 --> 00:12:16,319
what what do where do i spend my time

346
00:12:14,399 --> 00:12:18,320
patching so

347
00:12:16,320 --> 00:12:19,360
that's you know one of the the problems

348
00:12:18,320 --> 00:12:22,800
prioritization

349
00:12:19,360 --> 00:12:23,600
to do that you can take a step further

350
00:12:22,800 --> 00:12:25,439
of the

351
00:12:23,600 --> 00:12:28,399
scanning of libraries and do it at a

352
00:12:25,440 --> 00:12:30,240
proxy level like jfrog's x-ray

353
00:12:28,399 --> 00:12:32,320
allows you to do the scanning and not

354
00:12:30,240 --> 00:12:32,959
allow you when you download the packages

355
00:12:32,320 --> 00:12:35,120
through

356
00:12:32,959 --> 00:12:36,880
an upstream repo and that they're like

357
00:12:35,120 --> 00:12:38,240
secure or verified or not so you don't

358
00:12:36,880 --> 00:12:41,279
have to do it on your laptop

359
00:12:38,240 --> 00:12:42,639
obviously you have to trust jfrog x-ray

360
00:12:41,279 --> 00:12:44,639
but it's kind of

361
00:12:42,639 --> 00:12:47,120
another layer of control you can put

362
00:12:44,639 --> 00:12:50,079
there as well

363
00:12:47,120 --> 00:12:50,720
so this was just to point out that

364
00:12:50,079 --> 00:12:52,880
homebrew

365
00:12:50,720 --> 00:12:54,800
the only thing it actually does is like

366
00:12:52,880 --> 00:12:57,519
looking at

367
00:12:54,800 --> 00:12:58,800
the checksum of the tarball or something

368
00:12:57,519 --> 00:13:03,519
it downloads

369
00:12:58,800 --> 00:13:06,800
so the actual recipe or was it the brew

370
00:13:03,519 --> 00:13:08,399
that itself is not signed and the

371
00:13:06,800 --> 00:13:09,839
maintainer said we're not doing that

372
00:13:08,399 --> 00:13:11,279
we're an open source project we don't

373
00:13:09,839 --> 00:13:12,639
have time for that that was basically

374
00:13:11,279 --> 00:13:14,000
kind of the answer

375
00:13:12,639 --> 00:13:16,720
so it's you know it's kind of

376
00:13:14,000 --> 00:13:18,959
interesting uh on something we've used

377
00:13:16,720 --> 00:13:20,000
we're using so much in our laptops to to

378
00:13:18,959 --> 00:13:23,518
install stuff that

379
00:13:20,000 --> 00:13:23,519
this is kind of the state where we are

380
00:13:23,680 --> 00:13:27,040
you know noda is a little bit better

381
00:13:25,440 --> 00:13:30,320
they kind of signed their

382
00:13:27,040 --> 00:13:32,319
um their dependencies as well they have

383
00:13:30,320 --> 00:13:35,040
like check sounds but you can see like

384
00:13:32,320 --> 00:13:36,480
this is all manual steps that you need

385
00:13:35,040 --> 00:13:38,800
to go through but at least you can

386
00:13:36,480 --> 00:13:40,480
verify that you can get their gpg keys

387
00:13:38,800 --> 00:13:43,920
you can verify the stuff

388
00:13:40,480 --> 00:13:45,440
so that's nice and obviously when you

389
00:13:43,920 --> 00:13:46,639
commit things yourself you can sign the

390
00:13:45,440 --> 00:13:49,199
signatures

391
00:13:46,639 --> 00:13:51,440
uh with your gpg key and push things to

392
00:13:49,199 --> 00:13:51,439
git

393
00:13:52,160 --> 00:13:55,920
but there's a i found an interesting

394
00:13:54,240 --> 00:13:59,920
project that allows you actually

395
00:13:55,920 --> 00:14:02,880
like multi comments or what is it multi

396
00:13:59,920 --> 00:14:03,760
submitters that you do and get that

397
00:14:02,880 --> 00:14:07,120
there is like an

398
00:14:03,760 --> 00:14:10,319
uh solution for multi-signing it

399
00:14:07,120 --> 00:14:11,600
a commit so not only one person and then

400
00:14:10,320 --> 00:14:13,279
you can say well

401
00:14:11,600 --> 00:14:15,440
before it goes into production multiple

402
00:14:13,279 --> 00:14:16,000
people have to sign that commit before

403
00:14:15,440 --> 00:14:18,639
it actually

404
00:14:16,000 --> 00:14:19,680
goes out so that's another way of

405
00:14:18,639 --> 00:14:22,480
verifying

406
00:14:19,680 --> 00:14:22,479
things there as well

407
00:14:23,279 --> 00:14:26,320
you know if you're using github or

408
00:14:24,880 --> 00:14:28,480
something similar you

409
00:14:26,320 --> 00:14:30,079
when you push things these fingerprints

410
00:14:28,480 --> 00:14:32,320
of the official host keys are

411
00:14:30,079 --> 00:14:33,599
actually documented so you can verify

412
00:14:32,320 --> 00:14:36,240
those as well

413
00:14:33,600 --> 00:14:37,199
instead of just saying yes i trust first

414
00:14:36,240 --> 00:14:39,440
trust and

415
00:14:37,199 --> 00:14:41,040
push it to the server as well it can

416
00:14:39,440 --> 00:14:43,120
kind of be like any

417
00:14:41,040 --> 00:14:44,319
anything that has like a ssh key at that

418
00:14:43,120 --> 00:14:47,120
point

419
00:14:44,320 --> 00:14:50,800
you can kind of push to but at least

420
00:14:47,120 --> 00:14:50,800
here you can verify the official ones

421
00:14:51,360 --> 00:14:54,480
that brings me kind of to a principle of

422
00:14:53,920 --> 00:14:57,519
tough i

423
00:14:54,480 --> 00:14:58,880
who has heard of tough few people so

424
00:14:57,519 --> 00:15:02,320
it's kind of

425
00:14:58,880 --> 00:15:05,120
known in um more in the docker sphere

426
00:15:02,320 --> 00:15:07,040
is spreading towards uh more of the

427
00:15:05,120 --> 00:15:09,920
applications and the package

428
00:15:07,040 --> 00:15:12,079
distributions uh so it's it's tough

429
00:15:09,920 --> 00:15:12,800
stands for the update framework so they

430
00:15:12,079 --> 00:15:14,880
kind of

431
00:15:12,800 --> 00:15:17,359
made some principles and some guidelines

432
00:15:14,880 --> 00:15:20,639
of people pushing things to repos

433
00:15:17,360 --> 00:15:23,519
um so the separation of

434
00:15:20,639 --> 00:15:24,880
duty is more like you know one multiple

435
00:15:23,519 --> 00:15:27,600
keys and not one key

436
00:15:24,880 --> 00:15:29,120
to kind of push things thresholds much

437
00:15:27,600 --> 00:15:31,440
like the git

438
00:15:29,120 --> 00:15:33,360
commit signing they do the similar thing

439
00:15:31,440 --> 00:15:35,279
like multiple people

440
00:15:33,360 --> 00:15:36,639
depending on the step have to kind of

441
00:15:35,279 --> 00:15:39,920
say yes not only

442
00:15:36,639 --> 00:15:42,959
one so that builds like the consensus

443
00:15:39,920 --> 00:15:42,959
much like um

444
00:15:43,440 --> 00:15:47,680
was it the certificate thing i talked

445
00:15:46,959 --> 00:15:50,079
about

446
00:15:47,680 --> 00:15:51,359
uh the revocation of keys is really

447
00:15:50,079 --> 00:15:52,800
important so it's built into the

448
00:15:51,360 --> 00:15:55,920
framework that they can

449
00:15:52,800 --> 00:15:57,599
fast rotate keys to make sure that

450
00:15:55,920 --> 00:16:00,240
there's like no delay

451
00:15:57,600 --> 00:16:02,000
uh offline keys so the root keys don't

452
00:16:00,240 --> 00:16:03,680
need to be active all the time so they

453
00:16:02,000 --> 00:16:05,600
can be on offline storage

454
00:16:03,680 --> 00:16:07,120
and then the trust goes up for more like

455
00:16:05,600 --> 00:16:09,440
shorter keys

456
00:16:07,120 --> 00:16:10,240
to be there and no need for the key

457
00:16:09,440 --> 00:16:12,240
sharing so

458
00:16:10,240 --> 00:16:14,000
everybody can kind of delegate a key to

459
00:16:12,240 --> 00:16:16,079
somebody else depending on what

460
00:16:14,000 --> 00:16:17,360
the job they do so there's a principle

461
00:16:16,079 --> 00:16:19,839
look it up the the tough

462
00:16:17,360 --> 00:16:21,360
the update framework uh you know i'm

463
00:16:19,839 --> 00:16:23,839
just rushing over here but

464
00:16:21,360 --> 00:16:26,000
it's an interesting read as a concept

465
00:16:23,839 --> 00:16:28,320
and this is what actually is used

466
00:16:26,000 --> 00:16:29,680
by docker notary when you want to have

467
00:16:28,320 --> 00:16:33,360
push

468
00:16:29,680 --> 00:16:34,399
images in you know that are signed and

469
00:16:33,360 --> 00:16:36,079
secure

470
00:16:34,399 --> 00:16:38,160
those principles are used by docker

471
00:16:36,079 --> 00:16:40,959
notary so you create a key

472
00:16:38,160 --> 00:16:41,600
you sign it very much like any of the

473
00:16:40,959 --> 00:16:45,119
package

474
00:16:41,600 --> 00:16:46,880
repositories as well and then you can

475
00:16:45,120 --> 00:16:48,639
expect

476
00:16:46,880 --> 00:16:50,240
whether it's signed with or correct to

477
00:16:48,639 --> 00:16:53,360
like you would do with a git commit

478
00:16:50,240 --> 00:16:56,160
but now with the docker image as well

479
00:16:53,360 --> 00:16:57,680
this actually has saved a major breach

480
00:16:56,160 --> 00:17:01,360
on the docker hub

481
00:16:57,680 --> 00:17:02,160
by requiring multiple people to do a

482
00:17:01,360 --> 00:17:04,160
certain steps

483
00:17:02,160 --> 00:17:05,678
one of the keys got compromised but they

484
00:17:04,160 --> 00:17:08,240
recovered in a way

485
00:17:05,679 --> 00:17:09,439
because they had this uh principle uh

486
00:17:08,240 --> 00:17:13,199
available in in

487
00:17:09,439 --> 00:17:15,280
in the setup we've talked about you know

488
00:17:13,199 --> 00:17:16,319
note code or any of you know ruby or

489
00:17:15,280 --> 00:17:19,359
whatever code

490
00:17:16,319 --> 00:17:21,119
we talked about docker images but there

491
00:17:19,359 --> 00:17:24,399
is also something you can do for

492
00:17:21,119 --> 00:17:26,559
um verification uh for uh

493
00:17:24,400 --> 00:17:28,240
for example for javascript libraries in

494
00:17:26,559 --> 00:17:29,840
the browser so you can build the

495
00:17:28,240 --> 00:17:31,840
checksum and you can make sure

496
00:17:29,840 --> 00:17:33,840
that there is an integrity check when

497
00:17:31,840 --> 00:17:34,959
the code gets executed in the browser as

498
00:17:33,840 --> 00:17:37,439
well

499
00:17:34,960 --> 00:17:39,919
so it's it's you know the the check

500
00:17:37,440 --> 00:17:42,799
summing and so on we just keep going

501
00:17:39,919 --> 00:17:44,480
and we can verify more and more so

502
00:17:42,799 --> 00:17:46,240
that's a good thing

503
00:17:44,480 --> 00:17:47,919
i'm taking it even further we talked

504
00:17:46,240 --> 00:17:50,080
about code uh

505
00:17:47,919 --> 00:17:51,120
but you know this is probably the

506
00:17:50,080 --> 00:17:53,120
simplest

507
00:17:51,120 --> 00:17:54,959
uh way in the days when i was running

508
00:17:53,120 --> 00:17:58,000
apache like minus t

509
00:17:54,960 --> 00:17:58,880
was my friend to validate the code or

510
00:17:58,000 --> 00:18:01,280
the config

511
00:17:58,880 --> 00:18:02,240
as well i'm not saying this is the trust

512
00:18:01,280 --> 00:18:04,799
but at least

513
00:18:02,240 --> 00:18:05,679
it gives you some kind of id of what has

514
00:18:04,799 --> 00:18:07,280
happened

515
00:18:05,679 --> 00:18:08,880
happening and if you want to take that

516
00:18:07,280 --> 00:18:11,760
further now with

517
00:18:08,880 --> 00:18:12,799
something like tfsec who can basically

518
00:18:11,760 --> 00:18:15,360
check your

519
00:18:12,799 --> 00:18:16,320
terraform code to validate if there's

520
00:18:15,360 --> 00:18:19,520
something happening

521
00:18:16,320 --> 00:18:21,678
that shouldn't be happening as well

522
00:18:19,520 --> 00:18:22,879
i think that's getting powerful more in

523
00:18:21,679 --> 00:18:24,000
cloud configs

524
00:18:22,880 --> 00:18:26,960
that we can actually do that

525
00:18:24,000 --> 00:18:26,960
verification as well

526
00:18:27,679 --> 00:18:31,039
taking it one step further so i'm just

527
00:18:29,520 --> 00:18:33,918
going up and up

528
00:18:31,039 --> 00:18:35,200
so what if i don't trust my laptop every

529
00:18:33,919 --> 00:18:38,720
time i do some stuff

530
00:18:35,200 --> 00:18:40,640
uh i think uh jess rosali has

531
00:18:38,720 --> 00:18:42,720
coined this idea of running every

532
00:18:40,640 --> 00:18:43,600
application inside of a docker container

533
00:18:42,720 --> 00:18:47,039
on the desktop

534
00:18:43,600 --> 00:18:49,280
2015 this was a blog post

535
00:18:47,039 --> 00:18:50,879
now there's been a couple you know

536
00:18:49,280 --> 00:18:53,280
visual studio code

537
00:18:50,880 --> 00:18:54,080
you develop code inside your containers

538
00:18:53,280 --> 00:18:56,960
and then

539
00:18:54,080 --> 00:18:59,039
we get better at exporting like

540
00:18:56,960 --> 00:19:02,160
debugging it from remote

541
00:18:59,039 --> 00:19:05,360
uh you know uh fedora has a

542
00:19:02,160 --> 00:19:07,760
similar project um and

543
00:19:05,360 --> 00:19:08,799
something like cubos goes a step further

544
00:19:07,760 --> 00:19:10,960
they even give like

545
00:19:08,799 --> 00:19:12,400
every application the way i understand

546
00:19:10,960 --> 00:19:13,760
it they give every application

547
00:19:12,400 --> 00:19:16,000
their own network stuck their own

548
00:19:13,760 --> 00:19:17,600
everything and

549
00:19:16,000 --> 00:19:20,320
everything stays like separate and

550
00:19:17,600 --> 00:19:23,199
ephemeral and it's actually used

551
00:19:20,320 --> 00:19:24,559
in for journalists to make sure that

552
00:19:23,200 --> 00:19:26,720
when they're putting things in the news

553
00:19:24,559 --> 00:19:29,760
that they have like a safe environment

554
00:19:26,720 --> 00:19:31,679
uh wide where they can edit stuff uh

555
00:19:29,760 --> 00:19:34,320
and they can kind of make sure that it

556
00:19:31,679 --> 00:19:36,720
hasn't been tampered with

557
00:19:34,320 --> 00:19:38,720
so one of the point is that i know a lot

558
00:19:36,720 --> 00:19:40,240
of people say you know server scales not

559
00:19:38,720 --> 00:19:41,120
pads but i think we're going the

560
00:19:40,240 --> 00:19:42,320
direction that

561
00:19:41,120 --> 00:19:44,239
it's going to be the same for the

562
00:19:42,320 --> 00:19:46,080
desktops i have

563
00:19:44,240 --> 00:19:47,360
when i said that i heard like developers

564
00:19:46,080 --> 00:19:50,240
screaming like i

565
00:19:47,360 --> 00:19:51,678
i'm i cannot have my own autonomy and so

566
00:19:50,240 --> 00:19:52,000
on i was like yeah i've heard that

567
00:19:51,679 --> 00:19:55,440
before

568
00:19:52,000 --> 00:19:57,440
like 10 years ago on the server world

569
00:19:55,440 --> 00:19:59,440
giving pets names we were just

570
00:19:57,440 --> 00:20:00,880
discussing that like pokemon names or

571
00:19:59,440 --> 00:20:03,200
whatever

572
00:20:00,880 --> 00:20:03,200
um

573
00:20:03,919 --> 00:20:08,640
so we got the code verified we're

574
00:20:06,400 --> 00:20:12,480
pushing it now hopefully to the ci

575
00:20:08,640 --> 00:20:15,120
uh or uh we pushed it to the git repo

576
00:20:12,480 --> 00:20:16,799
and now hopefully the ci kicks in but

577
00:20:15,120 --> 00:20:20,320
what's interesting is that

578
00:20:16,799 --> 00:20:22,639
this often is outside our control so

579
00:20:20,320 --> 00:20:24,080
it's like who watches the watchers who

580
00:20:22,640 --> 00:20:26,240
trusts the

581
00:20:24,080 --> 00:20:27,840
people we trust so it's it's uh this is

582
00:20:26,240 --> 00:20:29,039
a nice paper to read if you want to know

583
00:20:27,840 --> 00:20:32,158
more

584
00:20:29,039 --> 00:20:33,280
uh i don't know if anybody knows that

585
00:20:32,159 --> 00:20:36,400
project

586
00:20:33,280 --> 00:20:38,158
uh but yeah it's just you know it's

587
00:20:36,400 --> 00:20:39,919
in a fun way it shows like anything can

588
00:20:38,159 --> 00:20:41,760
happen in your ci system

589
00:20:39,919 --> 00:20:44,000
that you you don't know that's gonna

590
00:20:41,760 --> 00:20:47,120
happen uh as well

591
00:20:44,000 --> 00:20:49,840
um and that makes you think like if you

592
00:20:47,120 --> 00:20:52,239
use like a sas solution

593
00:20:49,840 --> 00:20:53,520
how do we get that same trust we can't

594
00:20:52,240 --> 00:20:56,559
verify the binaries

595
00:20:53,520 --> 00:20:57,760
we can't do everything we pay them or we

596
00:20:56,559 --> 00:21:00,799
use them

597
00:20:57,760 --> 00:21:02,400
and we just assume they're secure so

598
00:21:00,799 --> 00:21:06,559
that's like a big leap

599
00:21:02,400 --> 00:21:08,720
up uh and i i haven't got any

600
00:21:06,559 --> 00:21:10,320
you know perfect solution for it but

601
00:21:08,720 --> 00:21:12,559
there's obviously

602
00:21:10,320 --> 00:21:14,480
they get better at exposing what they do

603
00:21:12,559 --> 00:21:15,760
so they show you the images they're on

604
00:21:14,480 --> 00:21:18,159
your builds on

605
00:21:15,760 --> 00:21:19,520
they share that officially but we don't

606
00:21:18,159 --> 00:21:22,400
have any id

607
00:21:19,520 --> 00:21:22,960
whether they're running this image so

608
00:21:22,400 --> 00:21:26,960
it's

609
00:21:22,960 --> 00:21:26,960
it's still like it's better

610
00:21:27,200 --> 00:21:30,720
some have a solution to run things

611
00:21:28,880 --> 00:21:31,840
on-prem so they would do the same

612
00:21:30,720 --> 00:21:34,000
orchestration

613
00:21:31,840 --> 00:21:35,360
but they run it on your machines so at

614
00:21:34,000 --> 00:21:37,919
least you can kind of

615
00:21:35,360 --> 00:21:40,639
get audit logs kind of see what commands

616
00:21:37,919 --> 00:21:43,919
get executed so it's not perfect

617
00:21:40,640 --> 00:21:47,200
some would have like a um uh

618
00:21:43,919 --> 00:21:48,720
more of um they would officially

619
00:21:47,200 --> 00:21:49,280
announce that there was an audit of the

620
00:21:48,720 --> 00:21:52,880
code

621
00:21:49,280 --> 00:21:56,320
so that's kind of how more and more

622
00:21:52,880 --> 00:21:58,159
uh they are building trust um

623
00:21:56,320 --> 00:22:00,240
some would allow you to limit the ip

624
00:21:58,159 --> 00:22:01,200
addresses let's say if your build system

625
00:22:00,240 --> 00:22:03,120
is remote

626
00:22:01,200 --> 00:22:05,360
they have you push things to your

627
00:22:03,120 --> 00:22:07,840
environment that at least you only

628
00:22:05,360 --> 00:22:08,479
allow the ip addresses of the people who

629
00:22:07,840 --> 00:22:11,600
are

630
00:22:08,480 --> 00:22:12,000
pushing something to you and this is a

631
00:22:11,600 --> 00:22:14,480
nice

632
00:22:12,000 --> 00:22:16,159
you know little trick uh for example if

633
00:22:14,480 --> 00:22:19,120
you use any of the uh

634
00:22:16,159 --> 00:22:19,600
aws cli tools you can change the user

635
00:22:19,120 --> 00:22:22,239
agent

636
00:22:19,600 --> 00:22:23,280
and you can have like an ein profile

637
00:22:22,240 --> 00:22:26,000
that says like

638
00:22:23,280 --> 00:22:26,320
only this user agent is allowed so you

639
00:22:26,000 --> 00:22:29,840
can

640
00:22:26,320 --> 00:22:33,039
turn that into an almost random

641
00:22:29,840 --> 00:22:35,120
key by obscurity that allows you to kind

642
00:22:33,039 --> 00:22:37,360
of say well nobody else even if though

643
00:22:35,120 --> 00:22:40,158
they have like the aws credentials

644
00:22:37,360 --> 00:22:40,719
can actually use that if they don't know

645
00:22:40,159 --> 00:22:43,600
uh

646
00:22:40,720 --> 00:22:45,360
the the the random key that you put here

647
00:22:43,600 --> 00:22:46,080
i'm not saying this is secure but it's

648
00:22:45,360 --> 00:22:50,719
like

649
00:22:46,080 --> 00:22:52,799
one step more the people from

650
00:22:50,720 --> 00:22:55,039
uh the bitcoin system they went a step

651
00:22:52,799 --> 00:22:57,360
further so they just went

652
00:22:55,039 --> 00:22:58,559
with what if we have multiple people

653
00:22:57,360 --> 00:23:01,918
compile it

654
00:22:58,559 --> 00:23:02,879
and then verify if this gives us the

655
00:23:01,919 --> 00:23:04,559
same result

656
00:23:02,880 --> 00:23:06,880
and then if most of the people get the

657
00:23:04,559 --> 00:23:08,879
same result we assume that is the best

658
00:23:06,880 --> 00:23:11,760
result and then we

659
00:23:08,880 --> 00:23:13,039
put the checksum in so not only one

660
00:23:11,760 --> 00:23:15,440
checksum because

661
00:23:13,039 --> 00:23:16,960
your tooling might be infected and just

662
00:23:15,440 --> 00:23:19,679
changing it there as well

663
00:23:16,960 --> 00:23:21,760
so i found that a nice way we we

664
00:23:19,679 --> 00:23:23,039
sometimes think about multi-clouds what

665
00:23:21,760 --> 00:23:25,600
about multiple ci

666
00:23:23,039 --> 00:23:27,760
what about using two ci systems and then

667
00:23:25,600 --> 00:23:30,158
do like verification and see if both

668
00:23:27,760 --> 00:23:31,120
kind of created the same thing again

669
00:23:30,159 --> 00:23:33,600
it's like

670
00:23:31,120 --> 00:23:35,280
thinking i'm not saying this is actually

671
00:23:33,600 --> 00:23:36,799
being done but it gives you some

672
00:23:35,280 --> 00:23:38,639
inspiration

673
00:23:36,799 --> 00:23:40,720
but this brings us to the hard point of

674
00:23:38,640 --> 00:23:43,760
doing reproducible builds

675
00:23:40,720 --> 00:23:47,039
which isn't really that easy because

676
00:23:43,760 --> 00:23:50,240
let's say you have like a something

677
00:23:47,039 --> 00:23:51,679
like a time in your banner or your

678
00:23:50,240 --> 00:23:53,919
header or already

679
00:23:51,679 --> 00:23:55,520
whatever and you're kind of recompiling

680
00:23:53,919 --> 00:23:57,760
it the next time you compile it

681
00:23:55,520 --> 00:23:58,799
you know the binary will be different uh

682
00:23:57,760 --> 00:24:01,200
or the flags

683
00:23:58,799 --> 00:24:02,320
from the compiler or anything there so

684
00:24:01,200 --> 00:24:04,960
um

685
00:24:02,320 --> 00:24:07,360
debian has spent a lot of time on making

686
00:24:04,960 --> 00:24:12,000
packages and builds reproducible

687
00:24:07,360 --> 00:24:13,840
um node if i run it twice on my same

688
00:24:12,000 --> 00:24:16,840
laptop with the same compiler in the

689
00:24:13,840 --> 00:24:18,240
same settings the binary or whatever it

690
00:24:16,840 --> 00:24:21,360
builds uh

691
00:24:18,240 --> 00:24:22,400
will not give me the same checksum so

692
00:24:21,360 --> 00:24:25,760
it's something that

693
00:24:22,400 --> 00:24:27,279
i found interesting to to to see and we

694
00:24:25,760 --> 00:24:27,600
would think like a checksum this is kind

695
00:24:27,279 --> 00:24:30,080
of

696
00:24:27,600 --> 00:24:30,080
what we do

697
00:24:31,200 --> 00:24:38,960
one more step further what about

698
00:24:35,360 --> 00:24:41,439
the operating system itself um

699
00:24:38,960 --> 00:24:43,679
it turns out that this was from a fosdem

700
00:24:41,440 --> 00:24:43,679
talk

701
00:24:44,320 --> 00:24:47,520
to build a linux nowadays you have to

702
00:24:46,640 --> 00:24:50,240
have a linux

703
00:24:47,520 --> 00:24:52,799
right so somewhere we lost the link from

704
00:24:50,240 --> 00:24:55,840
being completely from scratch

705
00:24:52,799 --> 00:24:57,679
to build the linux system uh

706
00:24:55,840 --> 00:25:00,080
sometimes you see like bootstrap one two

707
00:24:57,679 --> 00:25:02,799
three when you do like gcc compiling

708
00:25:00,080 --> 00:25:03,360
like some of the bootstrapping is binary

709
00:25:02,799 --> 00:25:05,440
only

710
00:25:03,360 --> 00:25:06,799
so people are still working on making

711
00:25:05,440 --> 00:25:09,360
that code

712
00:25:06,799 --> 00:25:10,080
as well so it's it's sometimes hard to

713
00:25:09,360 --> 00:25:12,158
verify

714
00:25:10,080 --> 00:25:14,000
uh to do that if you want to have a look

715
00:25:12,159 --> 00:25:16,480
at this this is

716
00:25:14,000 --> 00:25:18,559
i think there was a talk earlier today

717
00:25:16,480 --> 00:25:20,480
on that as well grix

718
00:25:18,559 --> 00:25:22,639
sd like all the dependencies of the

719
00:25:20,480 --> 00:25:26,080
libraries it's not that easy

720
00:25:22,640 --> 00:25:29,120
as it looks uh and even

721
00:25:26,080 --> 00:25:31,120
like the bootstrapping assembler

722
00:25:29,120 --> 00:25:32,399
uh that you know people are working on

723
00:25:31,120 --> 00:25:35,279
that just to have like a

724
00:25:32,400 --> 00:25:37,360
front source verifiable compiler uh to

725
00:25:35,279 --> 00:25:40,080
make things happen

726
00:25:37,360 --> 00:25:40,559
i'm gonna skip that slide that's like

727
00:25:40,080 --> 00:25:42,720
right

728
00:25:40,559 --> 00:25:44,399
so we kind of said well make it

729
00:25:42,720 --> 00:25:45,520
repeatable make it repeatable and then

730
00:25:44,400 --> 00:25:48,000
the hacker say

731
00:25:45,520 --> 00:25:50,080
fantastic now i can detect every binary

732
00:25:48,000 --> 00:25:51,760
because if i look at the checksum i know

733
00:25:50,080 --> 00:25:53,840
what binary it is

734
00:25:51,760 --> 00:25:55,600
so then this company said well you know

735
00:25:53,840 --> 00:25:58,240
what we're going to build a wrapper that

736
00:25:55,600 --> 00:26:00,480
randomizes the checksums again

737
00:25:58,240 --> 00:26:02,880
to run it in production and then we mop

738
00:26:00,480 --> 00:26:05,919
it on the static

739
00:26:02,880 --> 00:26:07,520
checksums again so it's kind of you know

740
00:26:05,919 --> 00:26:10,480
we're going around and round but you

741
00:26:07,520 --> 00:26:10,480
know we're getting better

742
00:26:11,200 --> 00:26:15,360
the checksumming is one thing i talked

743
00:26:13,039 --> 00:26:15,360
about

744
00:26:15,520 --> 00:26:19,440
thinking about all the dependencies i

745
00:26:17,200 --> 00:26:22,080
think this is where google bazel

746
00:26:19,440 --> 00:26:23,679
comes in that they instead of saying

747
00:26:22,080 --> 00:26:26,080
reproducible builds which

748
00:26:23,679 --> 00:26:27,120
built this in binary they're working on

749
00:26:26,080 --> 00:26:29,199
uh the concept of

750
00:26:27,120 --> 00:26:31,760
hermetic builds where all the

751
00:26:29,200 --> 00:26:34,080
dependencies that you need in the build

752
00:26:31,760 --> 00:26:35,039
for your docker image or whatever they

753
00:26:34,080 --> 00:26:37,279
are specified

754
00:26:35,039 --> 00:26:38,158
it is not just app get update or

755
00:26:37,279 --> 00:26:40,799
something

756
00:26:38,159 --> 00:26:42,559
they kind of try to do that as well and

757
00:26:40,799 --> 00:26:42,960
not only for your dependencies but all

758
00:26:42,559 --> 00:26:45,279
your

759
00:26:42,960 --> 00:26:47,039
also for your compiling toolchain so

760
00:26:45,279 --> 00:26:49,039
bazel will download

761
00:26:47,039 --> 00:26:50,799
a known set of compilers so that

762
00:26:49,039 --> 00:26:51,760
everybody in your team will use the same

763
00:26:50,799 --> 00:26:55,279
compilers

764
00:26:51,760 --> 00:26:55,279
and do the same installation as well

765
00:26:55,360 --> 00:26:59,279
and that brings us you know the attack

766
00:26:57,279 --> 00:27:00,880
factors quite often the discussion is on

767
00:26:59,279 --> 00:27:02,080
containers like hello there's so much in

768
00:27:00,880 --> 00:27:04,159
the container and then

769
00:27:02,080 --> 00:27:06,399
so much vulnerabilities and they're

770
00:27:04,159 --> 00:27:08,400
actually going the direction what if we

771
00:27:06,400 --> 00:27:11,039
only need like one binary

772
00:27:08,400 --> 00:27:11,600
in the container so this trellis and

773
00:27:11,039 --> 00:27:14,320
that

774
00:27:11,600 --> 00:27:16,000
you know makes it a lot more difficult

775
00:27:14,320 --> 00:27:20,240
to do any attack vector

776
00:27:16,000 --> 00:27:22,559
there this

777
00:27:20,240 --> 00:27:24,159
is what some people are working on so we

778
00:27:22,559 --> 00:27:26,000
when we know all the dependencies we

779
00:27:24,159 --> 00:27:28,480
kind of have like a bill of material

780
00:27:26,000 --> 00:27:30,000
you know like the ingredient list this

781
00:27:28,480 --> 00:27:30,960
code has been built with this

782
00:27:30,000 --> 00:27:34,960
dependencies

783
00:27:30,960 --> 00:27:36,799
and so on um

784
00:27:34,960 --> 00:27:38,159
well there's many tools that allow you

785
00:27:36,799 --> 00:27:40,720
to reverge engineer

786
00:27:38,159 --> 00:27:42,159
docker files because it's sometimes not

787
00:27:40,720 --> 00:27:43,360
that easy and you don't know what's

788
00:27:42,159 --> 00:27:45,200
inside

789
00:27:43,360 --> 00:27:47,678
you can take multiple approaches either

790
00:27:45,200 --> 00:27:48,799
from forensics or reverse engineering

791
00:27:47,679 --> 00:27:51,279
they're all in the notes you can check

792
00:27:48,799 --> 00:27:53,918
that later some interesting stuff

793
00:27:51,279 --> 00:27:54,640
but you know it's stupid that we throw

794
00:27:53,919 --> 00:27:57,600
away

795
00:27:54,640 --> 00:27:58,880
all the meta information while building

796
00:27:57,600 --> 00:28:01,918
and then

797
00:27:58,880 --> 00:28:04,159
have to reverse it engineer it again i

798
00:28:01,919 --> 00:28:07,520
in my past company i worked on

799
00:28:04,159 --> 00:28:10,240
uh video stuff and it's almost like

800
00:28:07,520 --> 00:28:11,120
uh when you have a dvd i know that's

801
00:28:10,240 --> 00:28:13,919
getting old

802
00:28:11,120 --> 00:28:16,080
uh with subtitles you know and you have

803
00:28:13,919 --> 00:28:19,919
to reverse engineer it from the image

804
00:28:16,080 --> 00:28:23,279
but it will that's actually stupid

805
00:28:19,919 --> 00:28:25,520
um in toto is a new

806
00:28:23,279 --> 00:28:26,559
not new but it goes one step further

807
00:28:25,520 --> 00:28:29,840
they actually

808
00:28:26,559 --> 00:28:31,279
not only specify the dependency sources

809
00:28:29,840 --> 00:28:34,879
but also the steps

810
00:28:31,279 --> 00:28:37,360
that they took while doing the build

811
00:28:34,880 --> 00:28:38,399
so they would sign every step of the

812
00:28:37,360 --> 00:28:40,559
build

813
00:28:38,399 --> 00:28:43,039
so you can verify what happened during

814
00:28:40,559 --> 00:28:45,039
the build as well

815
00:28:43,039 --> 00:28:46,720
and then graphias in the dockerx system

816
00:28:45,039 --> 00:28:48,480
can use all that metadata

817
00:28:46,720 --> 00:28:50,080
to decide whether something should run

818
00:28:48,480 --> 00:28:53,039
in production or not

819
00:28:50,080 --> 00:28:54,799
uh based on what has been in the image

820
00:28:53,039 --> 00:28:56,559
when a new vulnerability comes out they

821
00:28:54,799 --> 00:28:58,960
can kind of say well you know this is

822
00:28:56,559 --> 00:29:01,200
kind of something that this has been

823
00:28:58,960 --> 00:29:03,760
built now we know there's a

824
00:29:01,200 --> 00:29:05,200
severity one so you have to do about it

825
00:29:03,760 --> 00:29:07,760
but that's something that can be

826
00:29:05,200 --> 00:29:10,480
integrated there as well

827
00:29:07,760 --> 00:29:12,559
but obviously you know it never ends and

828
00:29:10,480 --> 00:29:16,000
we just keep going

829
00:29:12,559 --> 00:29:18,320
there as well so

830
00:29:16,000 --> 00:29:19,200
i'm getting toward the ends of my talk i

831
00:29:18,320 --> 00:29:20,960
know

832
00:29:19,200 --> 00:29:22,320
all the tools that i've shown you are so

833
00:29:20,960 --> 00:29:27,360
hard to use right

834
00:29:22,320 --> 00:29:29,600
and sometimes i think about it um

835
00:29:27,360 --> 00:29:30,639
we thought fought so hard to get the

836
00:29:29,600 --> 00:29:33,199
right to vote

837
00:29:30,640 --> 00:29:34,000
but then you would say well i don't want

838
00:29:33,200 --> 00:29:35,279
to vote right

839
00:29:34,000 --> 00:29:37,440
and it's a little bit like this we

840
00:29:35,279 --> 00:29:38,080
fought so hard about getting the freedom

841
00:29:37,440 --> 00:29:41,279
for

842
00:29:38,080 --> 00:29:41,600
you know using sharing libraries and so

843
00:29:41,279 --> 00:29:43,120
on

844
00:29:41,600 --> 00:29:44,959
and i think we kind of have to get

845
00:29:43,120 --> 00:29:45,439
better at the verification step because

846
00:29:44,960 --> 00:29:48,799
you know

847
00:29:45,440 --> 00:29:51,520
that's one of the duties we have as well

848
00:29:48,799 --> 00:29:53,200
to make our ecosystem more secure uh in

849
00:29:51,520 --> 00:29:57,039
there

850
00:29:53,200 --> 00:29:58,559
um and i think a lot of it has to do

851
00:29:57,039 --> 00:30:01,679
with the transparency

852
00:29:58,559 --> 00:30:02,000
transparency building consensus so not

853
00:30:01,679 --> 00:30:05,440
like

854
00:30:02,000 --> 00:30:07,200
one group saying yes or no but work on

855
00:30:05,440 --> 00:30:10,960
there as well

856
00:30:07,200 --> 00:30:10,960
so i think that was basically my thought

857
00:30:15,919 --> 00:30:19,440
i don't have time for questions

858
00:30:19,679 --> 00:30:24,240
okay anyone yeah okay

859
00:30:26,960 --> 00:30:30,240
i know there's quite some debate whether

860
00:30:28,720 --> 00:30:36,320
it's useful or not

861
00:30:30,240 --> 00:30:38,000
uh yeah but um i think um

862
00:30:36,320 --> 00:30:39,600
if you automate it that's one of the

863
00:30:38,000 --> 00:30:42,480
problems uh because

864
00:30:39,600 --> 00:30:42,959
if it's if it's just like uh i will do

865
00:30:42,480 --> 00:30:44,720
the

866
00:30:42,960 --> 00:30:46,640
from what i understand the the argument

867
00:30:44,720 --> 00:30:51,279
is about when you automate the step

868
00:30:46,640 --> 00:30:53,279
then it's no use because it's uh

869
00:30:51,279 --> 00:30:55,120
there is no real verification happening

870
00:30:53,279 --> 00:30:57,919
i don't know if if you have another

871
00:30:55,120 --> 00:30:59,199
id on on there for instance not to build

872
00:30:57,919 --> 00:31:03,039
something that is not

873
00:30:59,200 --> 00:31:05,840
signed properly prevent building

874
00:31:03,039 --> 00:31:06,559
is not signing yeah but sometimes you

875
00:31:05,840 --> 00:31:09,840
have to

876
00:31:06,559 --> 00:31:12,399
i guess no

877
00:31:09,840 --> 00:31:13,760
is it possible are there any tools that

878
00:31:12,399 --> 00:31:17,039
they can use to prevent

879
00:31:13,760 --> 00:31:17,760
build something oh hi okay i think the

880
00:31:17,039 --> 00:31:21,200
question

881
00:31:17,760 --> 00:31:22,879
was uh is there a question oh yeah okay

882
00:31:21,200 --> 00:31:27,120
i'm gonna repeat the second one so

883
00:31:22,880 --> 00:31:30,159
uh that uh that can prevent um

884
00:31:27,120 --> 00:31:32,399
a build from happening if some the the

885
00:31:30,159 --> 00:31:33,279
commit hasn't been signed i think that

886
00:31:32,399 --> 00:31:35,518
is probably

887
00:31:33,279 --> 00:31:36,880
looking at the verification and then

888
00:31:35,519 --> 00:31:38,159
putting an exit code i don't know i

889
00:31:36,880 --> 00:31:41,840
haven't come across

890
00:31:38,159 --> 00:31:45,039
any specific tool in there so

891
00:31:41,840 --> 00:31:46,879
yeah well very interesting by the way

892
00:31:45,039 --> 00:31:49,519
thank you for the representation it was

893
00:31:46,880 --> 00:31:49,519
really really good

894
00:31:49,840 --> 00:31:53,760
you talk about the pipeline what

895
00:31:51,120 --> 00:31:55,439
happened what is already in production

896
00:31:53,760 --> 00:31:57,200
yeah okay so that's another talk like i

897
00:31:55,440 --> 00:32:00,559
said yeah

898
00:31:57,200 --> 00:32:03,039
um because i think that's more dangerous

899
00:32:00,559 --> 00:32:06,080
actually though

900
00:32:03,039 --> 00:32:08,480
it is more dangerous uh but um

901
00:32:06,080 --> 00:32:08,480
i think

902
00:32:09,519 --> 00:32:13,600
it's it's another you know it's another

903
00:32:11,279 --> 00:32:16,559
aspect of looking at things

904
00:32:13,600 --> 00:32:17,760
i i i think here i want to go in the

905
00:32:16,559 --> 00:32:19,760
prevention mode

906
00:32:17,760 --> 00:32:21,440
and not in the you know but even if

907
00:32:19,760 --> 00:32:24,559
you're going to prevention mode you

908
00:32:21,440 --> 00:32:27,039
i mean the hacker sure

909
00:32:24,559 --> 00:32:27,760
is quite fast i mean the community is

910
00:32:27,039 --> 00:32:29,519
quite fast

911
00:32:27,760 --> 00:32:31,120
trying to find vulnerabilities and

912
00:32:29,519 --> 00:32:31,360
things that are disclosure already but

913
00:32:31,120 --> 00:32:35,439
the

914
00:32:31,360 --> 00:32:35,439
companies didn't have time to budget yes

915
00:32:35,679 --> 00:32:40,559
but but the visibility of knowing what

916
00:32:38,320 --> 00:32:41,840
is running production

917
00:32:40,559 --> 00:32:43,760
and i'm not talking about intrusion

918
00:32:41,840 --> 00:32:45,360
detection or logging or auditing but

919
00:32:43,760 --> 00:32:47,039
if you know what is happening and you

920
00:32:45,360 --> 00:32:48,959
can at least know

921
00:32:47,039 --> 00:32:50,960
check the vulnerability databases and

922
00:32:48,960 --> 00:32:53,120
get some of the tools that do that

923
00:32:50,960 --> 00:32:54,159
you get you are better informed whether

924
00:32:53,120 --> 00:32:56,799
you should kind of

925
00:32:54,159 --> 00:32:58,159
you know patch the zero day or kind of

926
00:32:56,799 --> 00:32:59,840
as fast as possible

927
00:32:58,159 --> 00:33:01,600
uh i'm not saying you don't have to

928
00:32:59,840 --> 00:33:04,158
protect your servers anymore

929
00:33:01,600 --> 00:33:04,639
but at least the visibility is it's what

930
00:33:04,159 --> 00:33:07,039
i

931
00:33:04,640 --> 00:33:07,840
try to show here if you verify and get

932
00:33:07,039 --> 00:33:10,158
things visible

933
00:33:07,840 --> 00:33:11,279
at least you can see it if you don't

934
00:33:10,159 --> 00:33:14,640
know it you just

935
00:33:11,279 --> 00:33:17,679
yeah live in happiness so that

936
00:33:14,640 --> 00:33:17,679
might be good as well so

937
00:33:17,919 --> 00:33:25,840
one more question one more yeah

938
00:33:29,440 --> 00:33:35,360
yeah that is what um i think

939
00:33:32,799 --> 00:33:36,840
most of the distro the package managers

940
00:33:35,360 --> 00:33:39,678
are using

941
00:33:36,840 --> 00:33:42,639
um yeah my question is if the

942
00:33:39,679 --> 00:33:44,000
file is like downloaded over https

943
00:33:42,640 --> 00:33:46,720
connection already

944
00:33:44,000 --> 00:33:47,440
and then i use a checksum from the same

945
00:33:46,720 --> 00:33:49,760
source

946
00:33:47,440 --> 00:33:51,919
to check the downloaded file against

947
00:33:49,760 --> 00:33:52,960
besides accidental transmission arrows

948
00:33:51,919 --> 00:33:54,720
would that

949
00:33:52,960 --> 00:33:56,880
provide any additional security like

950
00:33:54,720 --> 00:33:56,880
this

951
00:33:57,760 --> 00:34:02,080
it depends it could it could not right

952
00:34:00,640 --> 00:34:05,120
um

953
00:34:02,080 --> 00:34:08,879
if you're saying um

954
00:34:05,120 --> 00:34:11,118
if if i have like an s3 repository and

955
00:34:08,879 --> 00:34:11,598
my binary is here and my checksum is

956
00:34:11,119 --> 00:34:13,679
here

957
00:34:11,599 --> 00:34:16,639
you know on the same bucket and i have

958
00:34:13,679 --> 00:34:18,879
access you know yes i can alter both so

959
00:34:16,639 --> 00:34:21,040
that's not really a solution but if i

960
00:34:18,879 --> 00:34:22,960
have the checksums on a website

961
00:34:21,040 --> 00:34:25,279
something else on a different system

962
00:34:22,960 --> 00:34:26,800
and i have my banners here yes it makes

963
00:34:25,280 --> 00:34:29,359
sense

964
00:34:26,800 --> 00:34:30,879
okay from the same source no but it

965
00:34:29,359 --> 00:34:32,319
depends what you define as same source

966
00:34:30,879 --> 00:34:33,839
is it the same company is it

967
00:34:32,320 --> 00:34:36,159
another company is it the same website

968
00:34:33,839 --> 00:34:39,599
same server so it's kind of

969
00:34:36,159 --> 00:34:41,839
depending on you know the more the

970
00:34:39,599 --> 00:34:43,040
more people are seeing it the the the

971
00:34:41,839 --> 00:34:46,560
better it gets there

972
00:34:43,040 --> 00:34:49,839
yes okay i'm sorry

973
00:34:46,560 --> 00:34:49,839
find the ottawa

