1
00:00:05,600 --> 00:00:09,280
so

2
00:00:06,080 --> 00:00:12,719
now arjun will speak about

3
00:00:09,280 --> 00:00:15,518
nfs ganesha arjun works for red hat

4
00:00:12,719 --> 00:00:17,039
in the bangalore office in india i'm

5
00:00:15,519 --> 00:00:19,920
very happy to have him here

6
00:00:17,039 --> 00:00:19,920
thanks thank you

7
00:00:21,920 --> 00:00:25,519
thank you for the introduction meals uh

8
00:00:23,920 --> 00:00:27,519
well yeah i'm arjun sharma

9
00:00:25,519 --> 00:00:28,560
i've been with red hat for about one and

10
00:00:27,519 --> 00:00:30,639
a half year now

11
00:00:28,560 --> 00:00:32,238
and i'm a part of the nfs ganesha team

12
00:00:30,640 --> 00:00:36,719
at iraq in bangalore office

13
00:00:32,238 --> 00:00:39,760
india so i'll just start right away

14
00:00:36,719 --> 00:00:42,800
i think i just done it yes

15
00:00:39,760 --> 00:00:44,879
yeah perfect all right so

16
00:00:42,800 --> 00:00:46,718
the outline of my talk is something like

17
00:00:44,879 --> 00:00:48,239
i'll start off with the the introduction

18
00:00:46,719 --> 00:00:50,000
of nfs ganesha

19
00:00:48,239 --> 00:00:51,760
and i'll explain about its architecture

20
00:00:50,000 --> 00:00:53,600
i'll talk about the

21
00:00:51,760 --> 00:00:56,000
about a component of nfs ganesha which

22
00:00:53,600 --> 00:00:58,399
is a a configuration file

23
00:00:56,000 --> 00:01:00,480
known as the ganesha.com then i'll move

24
00:00:58,399 --> 00:01:03,120
on to nfs ganesha features and i'll

25
00:01:00,480 --> 00:01:04,959
yeah and i'll also compare nfs ganesha

26
00:01:03,120 --> 00:01:08,240
with kernel nfs

27
00:01:04,959 --> 00:01:09,839
and uh yeah and then i'll talk about

28
00:01:08,240 --> 00:01:12,479
since i'm mostly working with the

29
00:01:09,840 --> 00:01:15,360
gloucester fs and not ceph

30
00:01:12,479 --> 00:01:17,360
i do not touch there for rgw at all i'll

31
00:01:15,360 --> 00:01:19,759
talk about cluster with the

32
00:01:17,360 --> 00:01:21,280
with nfs ganesha and then i'll talk

33
00:01:19,759 --> 00:01:22,320
about some recent developments or

34
00:01:21,280 --> 00:01:25,360
ongoing developments

35
00:01:22,320 --> 00:01:27,758
in nfs ganesha and then finally i hope

36
00:01:25,360 --> 00:01:29,360
uh to get some feedbacks regarding uh

37
00:01:27,759 --> 00:01:31,840
transport layer security

38
00:01:29,360 --> 00:01:33,280
it's it's one of the i think hot topics

39
00:01:31,840 --> 00:01:36,560
in nfs i guess

40
00:01:33,280 --> 00:01:38,960
so yes i'll move on right

41
00:01:36,560 --> 00:01:41,520
so nfs ganesha like most of you here i

42
00:01:38,960 --> 00:01:44,559
guess know what nfs ganesha is

43
00:01:41,520 --> 00:01:44,880
so it's it's basically it's a user these

44
00:01:44,560 --> 00:01:48,000
are

45
00:01:44,880 --> 00:01:49,199
nfs uh servers in user space nfs ganesha

46
00:01:48,000 --> 00:01:51,759
basically allows you to

47
00:01:49,200 --> 00:01:52,799
uh nfs servers in user space and uh it

48
00:01:51,759 --> 00:01:55,439
supports

49
00:01:52,799 --> 00:01:55,920
uh your version three four and your pnfs

50
00:01:55,439 --> 00:01:58,639
with the

51
00:01:55,920 --> 00:02:01,520
uh also nine p protocol nine p for the

52
00:01:58,640 --> 00:02:05,600
plant nine operating system

53
00:02:01,520 --> 00:02:08,239
uh the version three of uh nfs was uh

54
00:02:05,600 --> 00:02:08,639
stateless stateless and from version

55
00:02:08,239 --> 00:02:11,840
four

56
00:02:08,639 --> 00:02:13,119
uh it was stateful so i know most of you

57
00:02:11,840 --> 00:02:14,879
all probably know what stateless and

58
00:02:13,120 --> 00:02:16,800
stateful is but let me just

59
00:02:14,879 --> 00:02:18,319
uh rephrase what stateless is so

60
00:02:16,800 --> 00:02:20,160
basically yeah uh

61
00:02:18,319 --> 00:02:22,958
stateless stores no client information

62
00:02:20,160 --> 00:02:25,520
you know like the fd the file ft

63
00:02:22,959 --> 00:02:26,239
uh next buy to read and etc stuff like

64
00:02:25,520 --> 00:02:29,200
that

65
00:02:26,239 --> 00:02:29,680
or uh but instead it uh supports the

66
00:02:29,200 --> 00:02:31,760
lookup

67
00:02:29,680 --> 00:02:33,040
uh procedure that converts the file name

68
00:02:31,760 --> 00:02:36,239
to a file handle

69
00:02:33,040 --> 00:02:38,480
uh yeah which is a unique identifier

70
00:02:36,239 --> 00:02:39,360
like uh it's prob it's mostly the inode

71
00:02:38,480 --> 00:02:42,399
number

72
00:02:39,360 --> 00:02:43,680
uh for the file and uh yeah i mean nfs

73
00:02:42,400 --> 00:02:45,760
ganesha has fazal

74
00:02:43,680 --> 00:02:47,920
which is called file system abstraction

75
00:02:45,760 --> 00:02:48,399
layer and i'll be talking more about

76
00:02:47,920 --> 00:02:50,399
fazal

77
00:02:48,400 --> 00:02:51,440
i'll be talking about faizal a couple of

78
00:02:50,400 --> 00:02:54,640
times in my

79
00:02:51,440 --> 00:02:58,079
presentation so the architecture

80
00:02:54,640 --> 00:03:00,238
right uh on the top uh

81
00:02:58,080 --> 00:03:01,200
we have the network layer the network

82
00:03:00,239 --> 00:03:03,920
four channel

83
00:03:01,200 --> 00:03:06,079
it actively listens and uh captures your

84
00:03:03,920 --> 00:03:08,000
network requests from the client

85
00:03:06,080 --> 00:03:10,080
uh which the request then passes through

86
00:03:08,000 --> 00:03:13,440
an rpt rpc dispatcher

87
00:03:10,080 --> 00:03:14,400
uh here uh the request uh the rpc

88
00:03:13,440 --> 00:03:18,400
dispatcher

89
00:03:14,400 --> 00:03:21,519
decodes your request uh rpc

90
00:03:18,400 --> 00:03:22,319
and uh the rpc dispatcher here uses a

91
00:03:21,519 --> 00:03:26,000
sub

92
00:03:22,319 --> 00:03:29,518
sub uh sub uh

93
00:03:26,000 --> 00:03:31,519
i'm sorry sub project uh sub

94
00:03:29,519 --> 00:03:32,879
sub directory sub program known as the

95
00:03:31,519 --> 00:03:35,360
lib entire pc

96
00:03:32,879 --> 00:03:37,359
that is used to implement rpc and then

97
00:03:35,360 --> 00:03:39,920
the request passes through a duplicate

98
00:03:37,360 --> 00:03:40,959
request layer and also nfs ganesha

99
00:03:39,920 --> 00:03:45,200
supports rpc

100
00:03:40,959 --> 00:03:49,040
sec gss for your user space

101
00:03:45,200 --> 00:03:51,760
user space applications like curve 5

102
00:03:49,040 --> 00:03:53,679
and then from there the request passes

103
00:03:51,760 --> 00:03:55,359
to the protocol layer depending upon

104
00:03:53,680 --> 00:03:58,640
which protocol you're using

105
00:03:55,360 --> 00:04:01,840
version 3 for whichever it is and

106
00:03:58,640 --> 00:04:02,319
from the protocol layer it passes uh to

107
00:04:01,840 --> 00:04:05,040
the

108
00:04:02,319 --> 00:04:06,000
actually so i was half asleep when i

109
00:04:05,040 --> 00:04:08,879
made this diagram

110
00:04:06,000 --> 00:04:10,640
uh just just imagine the sad layer to be

111
00:04:08,879 --> 00:04:13,120
on top of the md cache layer

112
00:04:10,640 --> 00:04:14,559
and uh yeah i mean the request from the

113
00:04:13,120 --> 00:04:15,439
protocol there the request passes to the

114
00:04:14,560 --> 00:04:18,560
cell layer

115
00:04:15,439 --> 00:04:20,880
uh and the solver converts the the

116
00:04:18,560 --> 00:04:22,479
request to an operation for example the

117
00:04:20,880 --> 00:04:23,919
write operation to a

118
00:04:22,479 --> 00:04:26,400
write request to a write operation read

119
00:04:23,919 --> 00:04:28,719
request or read operation and then it

120
00:04:26,400 --> 00:04:29,758
the md cache layer basically stores your

121
00:04:28,720 --> 00:04:32,320
uh

122
00:04:29,759 --> 00:04:33,280
the metadata cache uh for the particular

123
00:04:32,320 --> 00:04:35,520
request

124
00:04:33,280 --> 00:04:37,119
and then finally we have the facade the

125
00:04:35,520 --> 00:04:40,880
file system abstraction layer

126
00:04:37,120 --> 00:04:43,600
uh depending on what backend file system

127
00:04:40,880 --> 00:04:46,719
are we using glusters

128
00:04:43,600 --> 00:04:47,919
whatever it is uh it uh yeah it

129
00:04:46,720 --> 00:04:50,000
communicates with that

130
00:04:47,919 --> 00:04:52,159
and that goes on to your backend file

131
00:04:50,000 --> 00:04:54,479
system so it makes more sense to have

132
00:04:52,160 --> 00:04:57,759
file system a facade here since

133
00:04:54,479 --> 00:04:59,280
it's easier for uh nfs ganesha to also

134
00:04:57,759 --> 00:05:00,160
interact with other user space

135
00:04:59,280 --> 00:05:03,919
applications like

136
00:05:00,160 --> 00:05:06,880
f5 and up and then we have debuss

137
00:05:03,919 --> 00:05:08,799
that basically in a way controls the

138
00:05:06,880 --> 00:05:12,240
entire nfs ganesha process so you can

139
00:05:08,800 --> 00:05:14,880
dynamically send dbs messages to uh

140
00:05:12,240 --> 00:05:15,360
you know dynamically export and export

141
00:05:14,880 --> 00:05:18,080
and

142
00:05:15,360 --> 00:05:20,560
do other things and yeah we also have

143
00:05:18,080 --> 00:05:24,560
logging depending on log levels you can

144
00:05:20,560 --> 00:05:28,639
log the results the progress

145
00:05:24,560 --> 00:05:32,240
i mean the yeah locking basically

146
00:05:28,639 --> 00:05:33,520
okay so the configuration file uh

147
00:05:32,240 --> 00:05:34,880
although the configuration file has a

148
00:05:33,520 --> 00:05:35,840
lot more things i'm just pointing out

149
00:05:34,880 --> 00:05:37,280
the i'm

150
00:05:35,840 --> 00:05:39,758
touching up on the main parts here main

151
00:05:37,280 --> 00:05:40,159
main components so first we have the nfs

152
00:05:39,759 --> 00:05:43,199
code

153
00:05:40,160 --> 00:05:46,639
uh parameter right

154
00:05:43,199 --> 00:05:48,479
so here uh yeah if the block is not

155
00:05:46,639 --> 00:05:49,280
defined it picks up the default uh

156
00:05:48,479 --> 00:05:52,159
default

157
00:05:49,280 --> 00:05:53,840
values for it it's basically used for uh

158
00:05:52,160 --> 00:05:55,600
defining uh your

159
00:05:53,840 --> 00:05:56,880
ports to be used for the particular

160
00:05:55,600 --> 00:05:59,520
share for

161
00:05:56,880 --> 00:06:00,560
a particular share and then we have the

162
00:05:59,520 --> 00:06:04,400
export block

163
00:06:00,560 --> 00:06:06,560
where you can export your file system uh

164
00:06:04,400 --> 00:06:07,440
uh your uh the shares that you want to

165
00:06:06,560 --> 00:06:09,120
export

166
00:06:07,440 --> 00:06:11,199
uh it can be multiple expo you can

167
00:06:09,120 --> 00:06:13,120
export multiple file systems

168
00:06:11,199 --> 00:06:14,400
and then we have the yeah it's a generic

169
00:06:13,120 --> 00:06:17,039
block the nfs

170
00:06:14,400 --> 00:06:17,679
curb five so you know now here you

171
00:06:17,039 --> 00:06:19,520
basically

172
00:06:17,680 --> 00:06:20,960
uh for example the nfs curve 5 block

173
00:06:19,520 --> 00:06:24,240
will communicate with

174
00:06:20,960 --> 00:06:26,479
if i'm using curb5 for authentication

175
00:06:24,240 --> 00:06:29,039
so this block basically is used to

176
00:06:26,479 --> 00:06:32,479
modify functions and options for

177
00:06:29,039 --> 00:06:34,960
my curb5 and then we have the nfs v4 as

178
00:06:32,479 --> 00:06:38,400
the name suggests it's basically used to

179
00:06:34,960 --> 00:06:41,758
you know uh limit if you want to just uh

180
00:06:38,400 --> 00:06:43,599
go ahead with the nfs 4.1 and not 4.2

181
00:06:41,759 --> 00:06:45,600
so yeah it's it's mainly for that and

182
00:06:43,600 --> 00:06:47,840
then you have the cache anode layer

183
00:06:45,600 --> 00:06:50,160
the the cache anal block that's used to

184
00:06:47,840 --> 00:06:52,560
set options for caching

185
00:06:50,160 --> 00:06:54,639
and finally we have the log block uh

186
00:06:52,560 --> 00:06:57,840
where you can modify log levels

187
00:06:54,639 --> 00:06:58,560
uh for each for for uh for the fizzled

188
00:06:57,840 --> 00:07:03,440
layers

189
00:06:58,560 --> 00:07:06,479
uh to you know to store logs

190
00:07:03,440 --> 00:07:09,120
features okay uh so nfs

191
00:07:06,479 --> 00:07:10,960
uh uh yeah let me just start by saying

192
00:07:09,120 --> 00:07:14,080
uh talking about fizzle

193
00:07:10,960 --> 00:07:18,239
file system abstraction there and uh so

194
00:07:14,080 --> 00:07:20,400
uh it's it's it's fazal is basically

195
00:07:18,240 --> 00:07:22,560
yeah it's it's it's like a plug-in

196
00:07:20,400 --> 00:07:24,719
that's written in nfs ganesha for

197
00:07:22,560 --> 00:07:26,160
uh for your backend file systems so

198
00:07:24,720 --> 00:07:26,960
basically if you have a file system that

199
00:07:26,160 --> 00:07:29,280
you have

200
00:07:26,960 --> 00:07:30,560
and uh you know if you have an uh you

201
00:07:29,280 --> 00:07:32,638
have a library that

202
00:07:30,560 --> 00:07:34,240
uh supports i mean you would write a

203
00:07:32,639 --> 00:07:36,880
library in your file system to

204
00:07:34,240 --> 00:07:38,960
uh to integrate it with nfs you can

205
00:07:36,880 --> 00:07:40,960
write a facade in nfs ganesha

206
00:07:38,960 --> 00:07:43,599
for it and then you can just straight up

207
00:07:40,960 --> 00:07:47,198
use your file system with nfs ganesha

208
00:07:43,599 --> 00:07:49,759
so that's where fazal is handy and then

209
00:07:47,199 --> 00:07:51,759
it supports your dynamic exports using

210
00:07:49,759 --> 00:07:54,000
dbus mechanism i spoke about this in

211
00:07:51,759 --> 00:07:55,199
during the architecture so you can

212
00:07:54,000 --> 00:07:57,199
basically give

213
00:07:55,199 --> 00:07:58,639
divas commands to dynamically export and

214
00:07:57,199 --> 00:08:00,240
unexport your uh

215
00:07:58,639 --> 00:08:02,080
file systems you won't have to shut down

216
00:08:00,240 --> 00:08:03,360
your entire server and

217
00:08:02,080 --> 00:08:04,878
restart and do that so you can

218
00:08:03,360 --> 00:08:05,199
dynamically just give commands and you

219
00:08:04,879 --> 00:08:07,840
know

220
00:08:05,199 --> 00:08:08,879
export one of a few shares and not the

221
00:08:07,840 --> 00:08:11,039
entire

222
00:08:08,879 --> 00:08:12,639
do not all the shares that you're

223
00:08:11,039 --> 00:08:15,199
exporting

224
00:08:12,639 --> 00:08:16,160
yeah it's uh it's in the user space so i

225
00:08:15,199 --> 00:08:19,280
think which is why

226
00:08:16,160 --> 00:08:22,560
it's ideal for huge uh metadata caching

227
00:08:19,280 --> 00:08:26,080
and uh also we have uh

228
00:08:22,560 --> 00:08:28,240
i'm not sure i'm not 100 sure about a

229
00:08:26,080 --> 00:08:29,440
i think it's it's if it's not impossible

230
00:08:28,240 --> 00:08:33,120
it's it's

231
00:08:29,440 --> 00:08:35,519
complex a bit complex to uh to you know

232
00:08:33,120 --> 00:08:36,799
uh implement high availability high

233
00:08:35,519 --> 00:08:38,880
availability

234
00:08:36,799 --> 00:08:40,640
most of you know it's basically you know

235
00:08:38,880 --> 00:08:43,760
it's for servers uh if

236
00:08:40,640 --> 00:08:45,360
uh to basically prevent failovers so if

237
00:08:43,760 --> 00:08:47,839
in case i have like multiple servers

238
00:08:45,360 --> 00:08:49,279
that are actively serving my clients so

239
00:08:47,839 --> 00:08:50,959
if one server goes down i have the other

240
00:08:49,279 --> 00:08:54,160
servers to support i mean to

241
00:08:50,959 --> 00:08:57,119
uh service uh for that so

242
00:08:54,160 --> 00:08:58,560
that's what uh ha is for and we use uh

243
00:08:57,120 --> 00:08:59,839
pacemaker and chorusing which are

244
00:08:58,560 --> 00:09:03,439
actively

245
00:08:59,839 --> 00:09:04,000
developed uh by red hat especially and

246
00:09:03,440 --> 00:09:06,320
uh

247
00:09:04,000 --> 00:09:08,080
yeah pacemaker and chorusing if i have

248
00:09:06,320 --> 00:09:11,440
to touch up on it uh

249
00:09:08,080 --> 00:09:14,720
pacemaker i'd say is is like a

250
00:09:11,440 --> 00:09:17,920
in essence pacemaker is like a it it

251
00:09:14,720 --> 00:09:20,160
it decides how your cluster behaves

252
00:09:17,920 --> 00:09:21,120
and chorusing is like is is like a

253
00:09:20,160 --> 00:09:22,719
message

254
00:09:21,120 --> 00:09:25,040
is like a message channel that

255
00:09:22,720 --> 00:09:28,959
communicates between server and clients

256
00:09:25,040 --> 00:09:29,839
uh so yeah we uh so it supports active

257
00:09:28,959 --> 00:09:32,560
active config

258
00:09:29,839 --> 00:09:34,480
configuration so there's a difference

259
00:09:32,560 --> 00:09:35,199
between active and passive and active so

260
00:09:34,480 --> 00:09:37,279
i'd say

261
00:09:35,200 --> 00:09:38,240
for the viewers so most of you here know

262
00:09:37,279 --> 00:09:40,800
i'd say that

263
00:09:38,240 --> 00:09:41,360
uh active active is uh basically where

264
00:09:40,800 --> 00:09:43,439
uh

265
00:09:41,360 --> 00:09:45,440
all your servers are up and running and

266
00:09:43,440 --> 00:09:47,760
serving your clients

267
00:09:45,440 --> 00:09:48,560
uh and this is also good for your load

268
00:09:47,760 --> 00:09:50,399
balancing

269
00:09:48,560 --> 00:09:52,479
uh depending on the situation and

270
00:09:50,399 --> 00:09:54,080
whereas active passive uh you have

271
00:09:52,480 --> 00:09:55,600
although there is redundancy but you

272
00:09:54,080 --> 00:09:56,959
have just one server that's serving and

273
00:09:55,600 --> 00:09:59,920
if it goes down you have the other

274
00:09:56,959 --> 00:10:03,199
server that takes its place

275
00:09:59,920 --> 00:10:06,240
then yeah security and auth mechanism

276
00:10:03,200 --> 00:10:06,640
yes it communicates well with other user

277
00:10:06,240 --> 00:10:09,279
level

278
00:10:06,640 --> 00:10:10,640
applications like five laps so you have

279
00:10:09,279 --> 00:10:12,959
walk mechanism similar

280
00:10:10,640 --> 00:10:14,240
to kernel nfs i think it's way much

281
00:10:12,959 --> 00:10:16,959
easier

282
00:10:14,240 --> 00:10:18,240
uh and it's user space so yes it's

283
00:10:16,959 --> 00:10:21,279
easier to work with

284
00:10:18,240 --> 00:10:22,160
easy to debug and of course we are like

285
00:10:21,279 --> 00:10:24,640
a small team

286
00:10:22,160 --> 00:10:25,920
and small team so we have a faster

287
00:10:24,640 --> 00:10:29,600
development cycle

288
00:10:25,920 --> 00:10:30,880
and uh yes uh fast development cycle

289
00:10:29,600 --> 00:10:33,519
it's it's not

290
00:10:30,880 --> 00:10:34,720
it's not chaotic and okay i think aortic

291
00:10:33,519 --> 00:10:37,440
is not the right word yeah but yeah we

292
00:10:34,720 --> 00:10:40,480
have a faster development cycle

293
00:10:37,440 --> 00:10:40,959
integration with cluster fs so yeah uh

294
00:10:40,480 --> 00:10:44,560
the

295
00:10:40,959 --> 00:10:46,000
firstly uh the gluster fs has something

296
00:10:44,560 --> 00:10:48,640
called as the gf api

297
00:10:46,000 --> 00:10:49,120
the lib gf api to communicate with the

298
00:10:48,640 --> 00:10:54,560
glass

299
00:10:49,120 --> 00:10:57,760
with nfs ganesha and nfs ganesha uses uh

300
00:10:54,560 --> 00:10:58,479
it's basically a wrapper with a gluster

301
00:10:57,760 --> 00:11:00,160
protocol

302
00:10:58,480 --> 00:11:02,399
which interfaces with fazal cluster

303
00:11:00,160 --> 00:11:05,600
that's written in the nfs ganesha

304
00:11:02,399 --> 00:11:07,519
so nfs ganesha uses uh gf api to

305
00:11:05,600 --> 00:11:10,480
communicate directly with the

306
00:11:07,519 --> 00:11:12,640
gloucester fs and not go via the

307
00:11:10,480 --> 00:11:15,519
traditional

308
00:11:12,640 --> 00:11:16,560
traditional uh gluster fuse layer so

309
00:11:15,519 --> 00:11:19,519
performance is

310
00:11:16,560 --> 00:11:20,640
better in that way in that sense and uh

311
00:11:19,519 --> 00:11:24,160
yeah we have the

312
00:11:20,640 --> 00:11:26,959
ha implementation for nfs ganesha where

313
00:11:24,160 --> 00:11:28,160
uh you use uh as a spoke use pacemaker

314
00:11:26,959 --> 00:11:29,518
and chorusing for active active

315
00:11:28,160 --> 00:11:32,000
configuration

316
00:11:29,519 --> 00:11:34,079
here uh you need i think at least uh

317
00:11:32,000 --> 00:11:37,200
four servers to

318
00:11:34,079 --> 00:11:40,319
carry out each implementation and

319
00:11:37,200 --> 00:11:40,959
uh it uh fails over seamlessly and you

320
00:11:40,320 --> 00:11:44,240
know

321
00:11:40,959 --> 00:11:45,518
if let's say a server dies

322
00:11:44,240 --> 00:11:46,880
the most of the clients don't even

323
00:11:45,519 --> 00:11:47,760
realize it dies and you know the

324
00:11:46,880 --> 00:11:50,320
administration

325
00:11:47,760 --> 00:11:51,200
administrator can go and bring up that

326
00:11:50,320 --> 00:11:55,600
server without

327
00:11:51,200 --> 00:11:56,560
any problem so nfs ganesha was just

328
00:11:55,600 --> 00:11:59,440
going to

329
00:11:56,560 --> 00:11:59,439
corner nfs

330
00:11:59,760 --> 00:12:03,279
firstly i'd like to mention uh

331
00:12:01,279 --> 00:12:04,320
performance wise of course it's kernel

332
00:12:03,279 --> 00:12:06,399
nfs that's

333
00:12:04,320 --> 00:12:07,519
that's that provides better performance

334
00:12:06,399 --> 00:12:10,000
but

335
00:12:07,519 --> 00:12:10,800
nfs ganesha is quite good it's not it's

336
00:12:10,000 --> 00:12:12,880
not that bad

337
00:12:10,800 --> 00:12:14,079
it has good performance it gives you

338
00:12:12,880 --> 00:12:16,880
good performance

339
00:12:14,079 --> 00:12:17,199
other than that uh it's easier to debug

340
00:12:16,880 --> 00:12:20,160
with

341
00:12:17,200 --> 00:12:22,240
we all know how daunting it can be to

342
00:12:20,160 --> 00:12:25,439
debug kernel

343
00:12:22,240 --> 00:12:27,040
nfs or kernel applications and it's

344
00:12:25,440 --> 00:12:30,399
easier to scale out

345
00:12:27,040 --> 00:12:34,000
as compared compared to kernel nfs

346
00:12:30,399 --> 00:12:36,720
so uh like uh

347
00:12:34,000 --> 00:12:38,160
a scale out as in sk there's a

348
00:12:36,720 --> 00:12:38,720
difference between scale out and scale

349
00:12:38,160 --> 00:12:41,439
up

350
00:12:38,720 --> 00:12:43,040
so let me just touch up on that uh since

351
00:12:41,440 --> 00:12:46,480
most of you i think you know but

352
00:12:43,040 --> 00:12:47,120
i'll i'll just say that so scale a scale

353
00:12:46,480 --> 00:12:49,600
up is where

354
00:12:47,120 --> 00:12:50,560
basically basically you have a box you

355
00:12:49,600 --> 00:12:52,560
have a machine

356
00:12:50,560 --> 00:12:54,079
and you add more cpu power you added

357
00:12:52,560 --> 00:12:55,040
more rams you added more memory and you

358
00:12:54,079 --> 00:12:57,760
added more stuff

359
00:12:55,040 --> 00:12:59,279
to scale up the box and then there is

360
00:12:57,760 --> 00:13:00,800
only as much as you can put in and

361
00:12:59,279 --> 00:13:01,760
eventually you run out of space to do it

362
00:13:00,800 --> 00:13:04,479
and you scale up

363
00:13:01,760 --> 00:13:05,519
as much as you can but whereas in scale

364
00:13:04,480 --> 00:13:07,120
out you can

365
00:13:05,519 --> 00:13:08,800
add in more boxes and then of course you

366
00:13:07,120 --> 00:13:10,959
can scale up those boxes so it's

367
00:13:08,800 --> 00:13:14,479
much easier to scale out with nfs

368
00:13:10,959 --> 00:13:17,920
ganesha as compared to kernel of nfs

369
00:13:14,480 --> 00:13:20,480
and yes it's easy to access

370
00:13:17,920 --> 00:13:21,760
yeah since it's in the user space rf is

371
00:13:20,480 --> 00:13:24,399
in the user space so it's

372
00:13:21,760 --> 00:13:26,000
easier for an nfs ganesha to communicate

373
00:13:24,399 --> 00:13:26,320
with other user space applications it's

374
00:13:26,000 --> 00:13:29,600
not

375
00:13:26,320 --> 00:13:31,839
as complex as kernel nfs although it's a

376
00:13:29,600 --> 00:13:34,079
bit complex but it's not as complex

377
00:13:31,839 --> 00:13:35,200
and yes we are much smaller community so

378
00:13:34,079 --> 00:13:37,439
you know uh

379
00:13:35,200 --> 00:13:39,040
we know how uh so for development how

380
00:13:37,440 --> 00:13:40,160
daunting it can be to get your patches

381
00:13:39,040 --> 00:13:42,719
merged for uh

382
00:13:40,160 --> 00:13:43,600
any kernel projects but here in nfs

383
00:13:42,720 --> 00:13:48,320
ganesha it's not

384
00:13:43,600 --> 00:13:51,839
it's not that bad and it's much faster

385
00:13:48,320 --> 00:13:55,680
so some recent ongoing developments

386
00:13:51,839 --> 00:13:59,440
labeled nfs uh so the

387
00:13:55,680 --> 00:14:02,399
labeled nfs right so basically

388
00:13:59,440 --> 00:14:03,760
uh labeled nfs in short allows you to

389
00:14:02,399 --> 00:14:07,120
set security con

390
00:14:03,760 --> 00:14:10,000
s linux contacts to to restrict

391
00:14:07,120 --> 00:14:10,320
processes from you know uh interacting

392
00:14:10,000 --> 00:14:13,839
with

393
00:14:10,320 --> 00:14:16,880
each other so uh for basically if uh so

394
00:14:13,839 --> 00:14:19,360
if a client uh requests the file access

395
00:14:16,880 --> 00:14:19,920
from a server and server sensor request

396
00:14:19,360 --> 00:14:22,639
back

397
00:14:19,920 --> 00:14:22,959
uh access uh to the client i mean these

398
00:14:22,639 --> 00:14:24,560
two

399
00:14:22,959 --> 00:14:26,160
processes for the same file are actually

400
00:14:24,560 --> 00:14:26,638
different so you don't want them to mix

401
00:14:26,160 --> 00:14:28,959
up

402
00:14:26,639 --> 00:14:30,000
and you can you have better security

403
00:14:28,959 --> 00:14:32,638
that way

404
00:14:30,000 --> 00:14:34,000
so it was one of the the this feature i

405
00:14:32,639 --> 00:14:35,199
worked i personally worked on this

406
00:14:34,000 --> 00:14:38,240
feature and it's

407
00:14:35,199 --> 00:14:41,760
it's been merged upstream uh

408
00:14:38,240 --> 00:14:44,880
then we have delegation so uh

409
00:14:41,760 --> 00:14:46,800
this uh for delegation i'd say uh

410
00:14:44,880 --> 00:14:48,000
it's it's more or less as far as i

411
00:14:46,800 --> 00:14:51,680
understand so it's it

412
00:14:48,000 --> 00:14:54,720
it's for better performance where uh

413
00:14:51,680 --> 00:14:56,719
so where you whether

414
00:14:54,720 --> 00:14:58,880
you know a client doesn't have to speak

415
00:14:56,720 --> 00:15:00,000
to a where the client doesn't have to

416
00:14:58,880 --> 00:15:03,839
speak to a server

417
00:15:00,000 --> 00:15:07,120
which then speaks with a uh with a

418
00:15:03,839 --> 00:15:09,120
with nfs ganesha and then that that act

419
00:15:07,120 --> 00:15:11,040
to locate a file that

420
00:15:09,120 --> 00:15:12,320
and then nfs ganesha actually has to

421
00:15:11,040 --> 00:15:13,599
find uh

422
00:15:12,320 --> 00:15:15,680
another server where the file is

423
00:15:13,600 --> 00:15:18,880
actually located so

424
00:15:15,680 --> 00:15:20,719
delegation uh allows you to allows the

425
00:15:18,880 --> 00:15:23,120
server to basically

426
00:15:20,720 --> 00:15:25,279
uh you know delegate file data to this

427
00:15:23,120 --> 00:15:28,800
uh to the client so that it can

428
00:15:25,279 --> 00:15:30,320
directly access the file and then we

429
00:15:28,800 --> 00:15:32,000
have the sticky grace period

430
00:15:30,320 --> 00:15:33,759
so for grace period i'd like to touch

431
00:15:32,000 --> 00:15:36,639
upon what grade speed idea is so when an

432
00:15:33,759 --> 00:15:39,680
nfs ganesha server is up and running

433
00:15:36,639 --> 00:15:42,399
uh for a while uh it

434
00:15:39,680 --> 00:15:42,719
it takes them it takes some time to cool

435
00:15:42,399 --> 00:15:44,800
uh

436
00:15:42,720 --> 00:15:47,360
to to you know start a problem so

437
00:15:44,800 --> 00:15:50,000
basically in the starting

438
00:15:47,360 --> 00:15:51,120
a few of the file operations are uh not

439
00:15:50,000 --> 00:15:54,000
permitted

440
00:15:51,120 --> 00:15:55,600
so that uh the servers can uh you know

441
00:15:54,000 --> 00:15:56,959
uh

442
00:15:55,600 --> 00:15:59,199
so so the clients that were

443
00:15:56,959 --> 00:16:01,839
communicating with the server earlier

444
00:15:59,199 --> 00:16:03,758
can have the locks for if there were any

445
00:16:01,839 --> 00:16:06,320
previous file operations going on

446
00:16:03,759 --> 00:16:07,600
so here in the uh with sticky grace

447
00:16:06,320 --> 00:16:10,160
period

448
00:16:07,600 --> 00:16:11,920
uh the thing is uh for in-flight

449
00:16:10,160 --> 00:16:15,600
operations uh like for

450
00:16:11,920 --> 00:16:17,519
some file operations require uh

451
00:16:15,600 --> 00:16:19,120
the server to be in a great spirit and

452
00:16:17,519 --> 00:16:22,639
some don't so

453
00:16:19,120 --> 00:16:26,160
for uh so here uh with this

454
00:16:22,639 --> 00:16:29,199
uh improvement you have uh

455
00:16:26,160 --> 00:16:31,040
it overcomes the problem of in-flight uh

456
00:16:29,199 --> 00:16:32,560
uh file operations so basically you

457
00:16:31,040 --> 00:16:36,319
don't flip

458
00:16:32,560 --> 00:16:38,560
uh your uh sticky the grace period uh

459
00:16:36,320 --> 00:16:39,600
so it it basically sorted for a

460
00:16:38,560 --> 00:16:43,119
clustered

461
00:16:39,600 --> 00:16:45,040
clustered a cluster nfs ganesha cluster

462
00:16:43,120 --> 00:16:47,279
right and then we have the async io i

463
00:16:45,040 --> 00:16:50,639
think most of you know what async io is

464
00:16:47,279 --> 00:16:53,680
uh yeah

465
00:16:50,639 --> 00:16:57,360
okay so finally i have uh

466
00:16:53,680 --> 00:16:59,199
transport layer security there is no

467
00:16:57,360 --> 00:17:01,759
uh assets right now there's no proof of

468
00:16:59,199 --> 00:17:04,799
concept for it and

469
00:17:01,759 --> 00:17:08,240
this is this is a project that uh

470
00:17:04,799 --> 00:17:10,319
my uh my my team has been uh

471
00:17:08,240 --> 00:17:11,520
asking me to you know get a reaction

472
00:17:10,319 --> 00:17:14,559
from community from

473
00:17:11,520 --> 00:17:17,280
uh nfs enthusiasts like you so

474
00:17:14,559 --> 00:17:18,160
you know i urge uh all of you to you

475
00:17:17,280 --> 00:17:20,799
know participate

476
00:17:18,160 --> 00:17:21,760
you know uh like chatter about transport

477
00:17:20,799 --> 00:17:24,959
layer security

478
00:17:21,760 --> 00:17:27,039
uh since uh we have curve five but it's

479
00:17:24,959 --> 00:17:28,720
it's it's a little bit complex and you

480
00:17:27,039 --> 00:17:31,760
know you might as well have transfer

481
00:17:28,720 --> 00:17:33,360
tls uh and so you know i'm hoping to get

482
00:17:31,760 --> 00:17:34,480
some reaction although there is nothing

483
00:17:33,360 --> 00:17:36,479
right now for it

484
00:17:34,480 --> 00:17:37,760
so but depending on the reaction we get

485
00:17:36,480 --> 00:17:40,720
from the community

486
00:17:37,760 --> 00:17:41,440
and uh about the the i don't know any

487
00:17:40,720 --> 00:17:43,280
suggestions

488
00:17:41,440 --> 00:17:44,799
uh that the community may have we may

489
00:17:43,280 --> 00:17:47,039
start working on tls

490
00:17:44,799 --> 00:17:47,918
so please feel free to you know get in

491
00:17:47,039 --> 00:17:49,360
touch with me

492
00:17:47,919 --> 00:17:50,799
after the talk if you have any

493
00:17:49,360 --> 00:17:51,520
suggestions you may just raise your hand

494
00:17:50,799 --> 00:17:54,160
and you know

495
00:17:51,520 --> 00:17:55,200
say anything you like about it yeah

496
00:17:54,160 --> 00:18:01,840
that's all

497
00:17:55,200 --> 00:18:01,840
and questions

498
00:18:19,440 --> 00:18:23,919
thanks arjun for the talk uh i have one

499
00:18:21,919 --> 00:18:25,679
question regarding this async io you

500
00:18:23,919 --> 00:18:29,039
have mentioned in the cluster

501
00:18:25,679 --> 00:18:32,480
sorry regarding

502
00:18:29,039 --> 00:18:32,720
okay okay so okay so i have briefly work

503
00:18:32,480 --> 00:18:36,160
in

504
00:18:32,720 --> 00:18:38,400
nfs ganesha layer to develop our own

505
00:18:36,160 --> 00:18:39,520
propriety file system so i have used

506
00:18:38,400 --> 00:18:43,280
async io

507
00:18:39,520 --> 00:18:45,520
and 2.5 version of nfs ganesha

508
00:18:43,280 --> 00:18:48,160
so i wanted to know like what is the

509
00:18:45,520 --> 00:18:49,679
state of sorry i use sync io i wanted to

510
00:18:48,160 --> 00:18:52,640
know what is the stage of

511
00:18:49,679 --> 00:18:53,679
async i o are you guys in gluster have

512
00:18:52,640 --> 00:18:56,880
already implemented

513
00:18:53,679 --> 00:18:59,840
upsell for async or still you guys are

514
00:18:56,880 --> 00:19:00,240
using sync and it's still in the you

515
00:18:59,840 --> 00:19:02,240
know

516
00:19:00,240 --> 00:19:04,799
development phase not in the production

517
00:19:02,240 --> 00:19:07,919
ready in in case of gluster i know that

518
00:19:04,799 --> 00:19:09,120
apis are available from nfs ganesha side

519
00:19:07,919 --> 00:19:11,120
but

520
00:19:09,120 --> 00:19:13,120
like how robust they have been

521
00:19:11,120 --> 00:19:14,639
integrated with with the gluster office

522
00:19:13,120 --> 00:19:17,918
just want to know your

523
00:19:14,640 --> 00:19:21,440
your view and how our team is okay so uh

524
00:19:17,919 --> 00:19:24,320
right thank you for the question okay

525
00:19:21,440 --> 00:19:26,320
uh so a question uh i repeat the

526
00:19:24,320 --> 00:19:29,439
question the question basically was

527
00:19:26,320 --> 00:19:32,879
how robust uh is async i o

528
00:19:29,440 --> 00:19:36,880
with cluster fs in short right

529
00:19:32,880 --> 00:19:39,120
so okay as far as i know uh

530
00:19:36,880 --> 00:19:41,280
that it's it's uh the development is

531
00:19:39,120 --> 00:19:43,918
still going on but it's still it's it's

532
00:19:41,280 --> 00:19:44,879
it is uh better with luster it's it's

533
00:19:43,919 --> 00:19:48,240
it's there

534
00:19:44,880 --> 00:19:51,120
and it works well uh i mean

535
00:19:48,240 --> 00:19:52,080
i'm saying this because you also have an

536
00:19:51,120 --> 00:19:53,760
option for

537
00:19:52,080 --> 00:19:55,678
going just with the synchronous i o and

538
00:19:53,760 --> 00:19:57,520
not the async so i

539
00:19:55,679 --> 00:19:58,799
think the async is in a pretty good

540
00:19:57,520 --> 00:20:01,280
state right now

541
00:19:58,799 --> 00:20:02,158
but i'm not sure where it is exactly

542
00:20:01,280 --> 00:20:05,200
right now

543
00:20:02,159 --> 00:20:07,679
so yeah i mean i'd be happy to

544
00:20:05,200 --> 00:20:09,280
you know shoot your mail with after i

545
00:20:07,679 --> 00:20:10,080
research about it a little bit more and

546
00:20:09,280 --> 00:20:13,520
then you know

547
00:20:10,080 --> 00:20:16,559
definitely follow up with you

548
00:20:13,520 --> 00:20:20,960
yes please um

549
00:20:16,559 --> 00:20:23,520
just okay so we use the center best with

550
00:20:20,960 --> 00:20:25,120
a destination on top and uh i'm curious

551
00:20:23,520 --> 00:20:26,720
what you mentioned about the caching the

552
00:20:25,120 --> 00:20:28,479
the empty cache layer

553
00:20:26,720 --> 00:20:30,240
uh it sounds like that's that's a major

554
00:20:28,480 --> 00:20:33,280
contribution to a potential

555
00:20:30,240 --> 00:20:34,320
performance benefit in particular with

556
00:20:33,280 --> 00:20:36,240
uh

557
00:20:34,320 --> 00:20:37,360
considering yourself that is terribly

558
00:20:36,240 --> 00:20:39,440
performant with

559
00:20:37,360 --> 00:20:40,719
with the metadata in particular in your

560
00:20:39,440 --> 00:20:43,520
small files

561
00:20:40,720 --> 00:20:46,080
okay is that correct am i am i should i

562
00:20:43,520 --> 00:20:49,760
focus on that and give it a little cash

563
00:20:46,080 --> 00:20:53,520
area okay uh so the question is uh

564
00:20:49,760 --> 00:20:54,799
uh first sev uh since uh metadata is i

565
00:20:53,520 --> 00:20:57,360
think an issue with sef

566
00:20:54,799 --> 00:20:57,918
uh and nfs ganesha is an empty cache

567
00:20:57,360 --> 00:21:00,240
layer

568
00:20:57,919 --> 00:21:02,480
uh so should he just rely on nfs

569
00:21:00,240 --> 00:21:02,960
ganesha's md gash layer and shoot more

570
00:21:02,480 --> 00:21:06,240
md

571
00:21:02,960 --> 00:21:09,520
more metadata for it so that uh

572
00:21:06,240 --> 00:21:11,840
so firstly i'd say i've i'm i'm not

573
00:21:09,520 --> 00:21:13,440
familiar with ceph like the the problems

574
00:21:11,840 --> 00:21:15,439
and the limitations with stuff

575
00:21:13,440 --> 00:21:16,799
which steph has although just about

576
00:21:15,440 --> 00:21:18,480
heard about it i think

577
00:21:16,799 --> 00:21:20,400
metadata is a big big of an issue

578
00:21:18,480 --> 00:21:23,679
himself uh but

579
00:21:20,400 --> 00:21:24,480
uh so since i'm not that aware what i'd

580
00:21:23,679 --> 00:21:26,880
say is

581
00:21:24,480 --> 00:21:28,080
yes since uh so this is what my

582
00:21:26,880 --> 00:21:30,240
understanding is please

583
00:21:28,080 --> 00:21:32,158
jump in if you have something to add on

584
00:21:30,240 --> 00:21:33,120
yields since it's a user level user

585
00:21:32,159 --> 00:21:36,720
space

586
00:21:33,120 --> 00:21:38,080
it has uh the ability to store a lot of

587
00:21:36,720 --> 00:21:39,919
metadata

588
00:21:38,080 --> 00:21:41,840
so i think if that's what you're looking

589
00:21:39,919 --> 00:21:47,840
for to store a lot of metadata

590
00:21:41,840 --> 00:21:47,840
maybe so yeah i think that's

591
00:21:48,679 --> 00:21:51,679
right

592
00:21:54,799 --> 00:21:59,840
so in my case

593
00:22:18,559 --> 00:22:21,840
the answer is it depends right um the

594
00:22:21,520 --> 00:22:24,559
the

595
00:22:21,840 --> 00:22:26,240
md cache layer is great but anytime

596
00:22:24,559 --> 00:22:29,039
you're stacking caches like this

597
00:22:26,240 --> 00:22:30,559
because uh libsef invest has its own uh

598
00:22:29,039 --> 00:22:31,760
and it kind of caches a lot of this data

599
00:22:30,559 --> 00:22:34,639
as well

600
00:22:31,760 --> 00:22:36,080
so so um well it has to for for the caps

601
00:22:34,640 --> 00:22:37,360
right you know so it has to to do that

602
00:22:36,080 --> 00:22:38,879
for caps so anytime you're doing that

603
00:22:37,360 --> 00:22:40,240
you always have cash coherency issues

604
00:22:38,880 --> 00:22:41,600
that you have to work through

605
00:22:40,240 --> 00:22:43,760
so you know some things time out some

606
00:22:41,600 --> 00:22:46,879
not some don't um so

607
00:22:43,760 --> 00:22:48,400
um you know the issue though is that you

608
00:22:46,880 --> 00:22:49,840
know you're double caching two so you're

609
00:22:48,400 --> 00:22:51,120
gonna consume a lot more memory if you

610
00:22:49,840 --> 00:22:55,039
use the md cache layer

611
00:22:51,120 --> 00:22:56,320
that way um the the one um

612
00:22:55,039 --> 00:22:58,559
you know most of these are in memory

613
00:22:56,320 --> 00:22:59,520
operations so and and all in the same

614
00:22:58,559 --> 00:23:00,559
process so

615
00:22:59,520 --> 00:23:02,639
you're probably not going to get a whole

616
00:23:00,559 --> 00:23:05,280
lot of benefit from doing that

617
00:23:02,640 --> 00:23:07,440
the one thing that uh is the problem

618
00:23:05,280 --> 00:23:10,799
with lips ffs is that it's

619
00:23:07,440 --> 00:23:12,799
all under a giant mutex uh and so

620
00:23:10,799 --> 00:23:14,639
uh you know you know you can get

621
00:23:12,799 --> 00:23:16,158
contention on that mutex

622
00:23:14,640 --> 00:23:17,760
uh for uh if you're doing a lot of

623
00:23:16,159 --> 00:23:19,120
threading if you want me i can talk to

624
00:23:17,760 --> 00:23:19,919
you about a lot more detail later if you

625
00:23:19,120 --> 00:23:21,918
want but

626
00:23:19,919 --> 00:23:23,440
but yeah the question you know depending

627
00:23:21,919 --> 00:23:25,520
on what you're doing uh you know

628
00:23:23,440 --> 00:23:26,640
it it may help you but it may harm you

629
00:23:25,520 --> 00:23:28,799
too

630
00:23:26,640 --> 00:23:28,799
so

631
00:23:30,480 --> 00:23:37,840
all right so thank you jeff just ask

632
00:23:33,520 --> 00:23:37,840
your questions

633
00:23:45,200 --> 00:23:48,559
the other part too is that we don't have

634
00:23:46,960 --> 00:23:51,120
any up calls from from

635
00:23:48,559 --> 00:23:52,399
uh lips ffs to call into the to ganesha

636
00:23:51,120 --> 00:23:55,678
to invalidate stuff

637
00:23:52,400 --> 00:23:58,480
so if so if we uh get capped revoked

638
00:23:55,679 --> 00:24:00,640
then uh uh and you lose and the metadata

639
00:23:58,480 --> 00:24:04,000
changes it may be difficult for the

640
00:24:00,640 --> 00:24:05,760
for ganesha to know this yeah so

641
00:24:04,000 --> 00:24:07,360
if you have one ganesha and it's the

642
00:24:05,760 --> 00:24:08,559
only thing that talks to fs it's fine

643
00:24:07,360 --> 00:24:09,918
but if you have two ganeshas running

644
00:24:08,559 --> 00:24:11,039
independently or some seven best and

645
00:24:09,919 --> 00:24:15,760
some ganesha

646
00:24:11,039 --> 00:24:15,760
then that's bad thanks guys

647
00:24:17,039 --> 00:24:20,559
options yes for example we run ganesha

648
00:24:19,520 --> 00:24:22,960
in a container

649
00:24:20,559 --> 00:24:24,480
okay and let the core sync pacemaker who

650
00:24:22,960 --> 00:24:26,960
doesn't really

651
00:24:24,480 --> 00:24:27,919
is great for that so you know perhaps

652
00:24:26,960 --> 00:24:32,000
something like

653
00:24:27,919 --> 00:24:34,720
using raft or transactions

654
00:24:32,000 --> 00:24:35,919
right so the question is if there is uh

655
00:24:34,720 --> 00:24:39,039
any other option for

656
00:24:35,919 --> 00:24:40,240
uh ha as comp as related to pacemaker

657
00:24:39,039 --> 00:24:42,879
and chorusing

658
00:24:40,240 --> 00:24:44,880
if that's what i hear correctly so since

659
00:24:42,880 --> 00:24:46,559
i've only used pacemaker and cursing i'm

660
00:24:44,880 --> 00:24:49,600
not sure what the other

661
00:24:46,559 --> 00:24:50,720
uh the other instrument the other

662
00:24:49,600 --> 00:24:53,600
application that you mentioned

663
00:24:50,720 --> 00:24:55,279
draft i think i'm not sure about it but

664
00:24:53,600 --> 00:24:56,879
as far as i know it's only pacemaker and

665
00:24:55,279 --> 00:25:00,320
chorusing that we use for ha

666
00:24:56,880 --> 00:25:00,320
in gloucester especially so

667
00:25:12,320 --> 00:25:16,000
the good part is that he does not

668
00:25:13,600 --> 00:25:21,039
enforce you to do use something

669
00:25:16,000 --> 00:25:24,000
so so we uh used uh zookeeper for him

670
00:25:21,039 --> 00:25:24,960
and we have our written our own

671
00:25:24,000 --> 00:25:28,000
duplicate

672
00:25:24,960 --> 00:25:31,360
request ddrc for our

673
00:25:28,000 --> 00:25:33,360
own metadata uh drc purpose so it is

674
00:25:31,360 --> 00:25:36,240
possible yeah it's it's quite uh

675
00:25:33,360 --> 00:25:36,959
it's ver it's it's quite plug pluggable

676
00:25:36,240 --> 00:25:38,640
architecture

677
00:25:36,960 --> 00:25:43,840
that is the best part of nfs guiness i

678
00:25:38,640 --> 00:25:43,840
would say

679
00:25:51,760 --> 00:25:55,520
yeah yeah there's a there's actually

680
00:25:53,039 --> 00:25:58,240
some native uh clustering inside

681
00:25:55,520 --> 00:25:58,720
uh there too if you're using ceph um so

682
00:25:58,240 --> 00:26:02,640
sef

683
00:25:58,720 --> 00:26:05,440
uh we i built a uh uh way to do h

684
00:26:02,640 --> 00:26:06,080
active active h a with using just ceph

685
00:26:05,440 --> 00:26:08,799
uh on top

686
00:26:06,080 --> 00:26:10,320
so using rados basically it kind of

687
00:26:08,799 --> 00:26:11,840
maintains a shared state database

688
00:26:10,320 --> 00:26:13,918
between the ganesha servers

689
00:26:11,840 --> 00:26:15,199
i can point you at a talk a couple talks

690
00:26:13,919 --> 00:26:17,760
i've given on if you want to if you want

691
00:26:15,200 --> 00:26:17,760
to see them so

692
00:26:20,320 --> 00:26:25,840
any more questions

693
00:26:45,050 --> 00:26:48,119
[Music]

694
00:26:49,200 --> 00:26:55,200
a few nfs clients uh

695
00:26:52,640 --> 00:26:56,880
uh okay i what i know is i know but

696
00:26:55,200 --> 00:26:59,600
cluster has a fuse but i'm not sure if

697
00:26:56,880 --> 00:27:02,799
nfs ganesha has a fuse

698
00:26:59,600 --> 00:27:03,840
yeah and if it's just so there are nfs

699
00:27:02,799 --> 00:27:06,879
client utilities

700
00:27:03,840 --> 00:27:07,520
that you can use protocol from a client

701
00:27:06,880 --> 00:27:10,720
side

702
00:27:07,520 --> 00:27:12,080
there are libraries for that um but

703
00:27:10,720 --> 00:27:14,240
they're not part of the entire kinesia

704
00:27:12,080 --> 00:27:16,080
project so advanced venetia is really

705
00:27:14,240 --> 00:27:17,840
the nfs server

706
00:27:16,080 --> 00:27:19,439
the nfs client is either the linux

707
00:27:17,840 --> 00:27:20,639
client that you have in the linux kernel

708
00:27:19,440 --> 00:27:24,159
or

709
00:27:20,640 --> 00:27:26,480
lfs utilities in your space

710
00:27:24,159 --> 00:27:26,480
player

711
00:27:28,240 --> 00:27:34,960
okay thank you

712
00:27:31,840 --> 00:27:37,039
oh any more questions

713
00:27:34,960 --> 00:27:39,120
okay i guess if there's no more

714
00:27:37,039 --> 00:27:44,240
questions

715
00:27:39,120 --> 00:27:44,239
then oh okay let's do one more sorry

716
00:27:44,960 --> 00:27:48,080
thank you for your talk so other

717
00:27:46,320 --> 00:27:49,279
questions about the clients so for

718
00:27:48,080 --> 00:27:52,080
example if there are

719
00:27:49,279 --> 00:27:53,520
no for example system uh no single ap is

720
00:27:52,080 --> 00:27:55,439
used and no

721
00:27:53,520 --> 00:27:56,720
peacemaker other things but you have two

722
00:27:55,440 --> 00:27:59,360
active active

723
00:27:56,720 --> 00:28:00,960
servers and you use something like auths

724
00:27:59,360 --> 00:28:03,199
on on a client side

725
00:28:00,960 --> 00:28:05,039
so you do multiple connections and how

726
00:28:03,200 --> 00:28:05,679
that how that can work with the ganesha

727
00:28:05,039 --> 00:28:08,080
to achieve

728
00:28:05,679 --> 00:28:09,440
aha for for that kind of case i'm sorry

729
00:28:08,080 --> 00:28:11,360
i i didn't i

730
00:28:09,440 --> 00:28:13,120
i didn't get the okay we have like two

731
00:28:11,360 --> 00:28:14,799
servers active active

732
00:28:13,120 --> 00:28:16,239
active active so you have multiple

733
00:28:14,799 --> 00:28:18,799
active nodes for example five

734
00:28:16,240 --> 00:28:20,480
okay yeah and you need to reconnect to

735
00:28:18,799 --> 00:28:22,879
every time to different ap

736
00:28:20,480 --> 00:28:23,679
so you don't have peacemaker you don't

737
00:28:22,880 --> 00:28:26,320
check the

738
00:28:23,679 --> 00:28:27,840
ability of nodes but you just once it

739
00:28:26,320 --> 00:28:30,000
failed you need to reconnect and you're

740
00:28:27,840 --> 00:28:33,360
using for example auto fs for

741
00:28:30,000 --> 00:28:36,799
like a wrapper for for for client

742
00:28:33,360 --> 00:28:40,479
to do multiple connections and uh uh

743
00:28:36,799 --> 00:28:42,320
yeah okay i don't i don't think i fully

744
00:28:40,480 --> 00:28:42,960
understand your question but i think uh

745
00:28:42,320 --> 00:28:44,960
what

746
00:28:42,960 --> 00:28:46,240
i i think what they're asking is about

747
00:28:44,960 --> 00:28:49,200
the ip

748
00:28:46,240 --> 00:28:51,200
connection for iap addresses that the

749
00:28:49,200 --> 00:28:53,120
that the

750
00:28:51,200 --> 00:28:55,520
name and multiple ips so there would be

751
00:28:53,120 --> 00:28:55,520
yeah so

752
00:28:55,600 --> 00:28:58,719
the nfs ganesha server has like virtual

753
00:28:57,760 --> 00:29:02,000
ips

754
00:28:58,720 --> 00:29:02,640
uh vips for every uh multiple ips for

755
00:29:02,000 --> 00:29:06,320
every

756
00:29:02,640 --> 00:29:09,520
node in the servers so yeah i mean that

757
00:29:06,320 --> 00:29:10,720
points you to a different like if for

758
00:29:09,520 --> 00:29:14,000
failovers that's what

759
00:29:10,720 --> 00:29:17,279
points your difference over so i i

760
00:29:14,000 --> 00:29:18,080
yeah about the one more than question so

761
00:29:17,279 --> 00:29:20,399
we used

762
00:29:18,080 --> 00:29:22,320
for example kernel nfs for that for for

763
00:29:20,399 --> 00:29:25,039
for ages for some point of time but

764
00:29:22,320 --> 00:29:26,639
um we have these timeouts so one once

765
00:29:25,039 --> 00:29:28,080
once connection is established it's not

766
00:29:26,640 --> 00:29:30,640
so easy to do the switch

767
00:29:28,080 --> 00:29:31,360
so we're always losing time and uh with

768
00:29:30,640 --> 00:29:33,840
ganesha

769
00:29:31,360 --> 00:29:34,479
in user space is it something he will be

770
00:29:33,840 --> 00:29:38,240
easier

771
00:29:34,480 --> 00:29:41,840
better than i mean from the failover

772
00:29:38,240 --> 00:29:44,240
part i get from the failover right uh

773
00:29:41,840 --> 00:29:45,360
okay um i'm not sure about the

774
00:29:44,240 --> 00:29:48,720
performance

775
00:29:45,360 --> 00:29:50,399
okay uh but you know

776
00:29:48,720 --> 00:29:51,919
the locks are transferred to different

777
00:29:50,399 --> 00:29:54,959
servers so

778
00:29:51,919 --> 00:29:57,039
your data is preserved and

779
00:29:54,960 --> 00:29:58,399
yeah i mean the clients don't even

780
00:29:57,039 --> 00:30:00,480
notice the failure

781
00:29:58,399 --> 00:30:01,678
in a server but i'm not sure about the

782
00:30:00,480 --> 00:30:05,120
performance i'm sorry

783
00:30:01,679 --> 00:30:17,520
okay thank you okay that's it

784
00:30:05,120 --> 00:30:17,520
thank you thank you everyone

