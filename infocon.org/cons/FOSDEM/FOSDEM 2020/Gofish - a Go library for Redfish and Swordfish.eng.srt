1
00:00:11,840 --> 00:00:16,800
all right guys looks like we'll have a

2
00:00:14,000 --> 00:00:17,600
nice and small crowd so if you all come

3
00:00:16,800 --> 00:00:22,080
forward

4
00:00:17,600 --> 00:00:22,080
we don't have to make giant amounts of

5
00:00:28,840 --> 00:00:33,760
noise

6
00:00:30,080 --> 00:00:44,239
uh yeah so uh last talk for today um

7
00:00:33,760 --> 00:00:46,399
without further ado enjoy

8
00:00:44,239 --> 00:00:48,160
you today about a library that i created

9
00:00:46,399 --> 00:00:49,760
actually for some work i had done in the

10
00:00:48,160 --> 00:00:52,160
past for the open sds

11
00:00:49,760 --> 00:00:52,160
project

12
00:00:53,760 --> 00:00:58,399
to set a little background i'm assuming

13
00:00:55,600 --> 00:01:01,199
most people here probably know but

14
00:00:58,399 --> 00:01:02,480
no assumptions uh go in case you haven't

15
00:01:01,199 --> 00:01:04,399
looked at it before

16
00:01:02,480 --> 00:01:05,920
statically typed language it can

17
00:01:04,400 --> 00:01:07,920
cross-compile to many different

18
00:01:05,920 --> 00:01:11,439
platforms

19
00:01:07,920 --> 00:01:13,920
kind of a fun language and a lot of

20
00:01:11,439 --> 00:01:16,880
recent things being written with that um

21
00:01:13,920 --> 00:01:16,880
great to see some stuff

22
00:01:19,119 --> 00:01:22,240
studying background too uh

23
00:01:20,960 --> 00:01:24,479
infrastructure room so

24
00:01:22,240 --> 00:01:25,600
hopefully most people know but baseboard

25
00:01:24,479 --> 00:01:28,240
management controller

26
00:01:25,600 --> 00:01:29,600
typically a system on chip that's in a

27
00:01:28,240 --> 00:01:32,479
machine

28
00:01:29,600 --> 00:01:34,479
it allows you to interact with a server

29
00:01:32,479 --> 00:01:35,280
without any operating system running on

30
00:01:34,479 --> 00:01:38,079
there

31
00:01:35,280 --> 00:01:39,600
or you know do things like power off

32
00:01:38,079 --> 00:01:42,079
haram

33
00:01:39,600 --> 00:01:45,199
get information from the system outside

34
00:01:42,079 --> 00:01:45,199
of the operating system

35
00:01:46,640 --> 00:01:50,240
being able to do things like get

36
00:01:50,399 --> 00:01:55,840
inventory information yep

37
00:02:01,280 --> 00:02:05,920
all right start over

38
00:02:02,770 --> 00:02:07,280
[Laughter]

39
00:02:05,920 --> 00:02:10,399
hopefully the slides so far were pretty

40
00:02:07,280 --> 00:02:12,720
self-explanatory um

41
00:02:10,399 --> 00:02:15,040
so that's the background um that piece

42
00:02:12,720 --> 00:02:17,440
uh redfish is the thing that maybe

43
00:02:15,040 --> 00:02:19,760
some people might not be as familiar

44
00:02:17,440 --> 00:02:22,879
with uh redfish is a protocol that was

45
00:02:19,760 --> 00:02:26,640
that is um by the dmtf

46
00:02:22,879 --> 00:02:30,399
that kind of supersedes things like ipmi

47
00:02:26,640 --> 00:02:31,119
smash and snmp to be able to interact

48
00:02:30,400 --> 00:02:32,879
with

49
00:02:31,120 --> 00:02:34,560
things like baseball management

50
00:02:32,879 --> 00:02:36,560
controller

51
00:02:34,560 --> 00:02:38,480
using something a little more modern and

52
00:02:36,560 --> 00:02:40,000
a little more intuitive than some of

53
00:02:38,480 --> 00:02:43,359
those past protocols so it's

54
00:02:40,000 --> 00:02:45,200
a rest api um json

55
00:02:43,360 --> 00:02:46,800
formatted data that gets sent back and

56
00:02:45,200 --> 00:02:50,480
forth um

57
00:02:46,800 --> 00:02:53,840
it it also is defined in a way so that

58
00:02:50,480 --> 00:02:54,560
it's not necessarily just capable of

59
00:02:53,840 --> 00:02:58,480
talking to an

60
00:02:54,560 --> 00:03:00,959
individual host it's an api that can be

61
00:02:58,480 --> 00:03:02,959
used by

62
00:03:00,959 --> 00:03:06,080
a higher level management tool so if you

63
00:03:02,959 --> 00:03:09,200
have an application that is managing

64
00:03:06,080 --> 00:03:11,360
say your entire data center

65
00:03:09,200 --> 00:03:13,040
and is already doing things with with

66
00:03:11,360 --> 00:03:16,319
the devices in your data center

67
00:03:13,040 --> 00:03:18,079
that can actually expose a redfish

68
00:03:16,319 --> 00:03:20,319
interface and then you're able to

69
00:03:18,080 --> 00:03:21,519
interact using that same api that you

70
00:03:20,319 --> 00:03:24,560
would directly to

71
00:03:21,519 --> 00:03:26,239
a host with that application so it's

72
00:03:24,560 --> 00:03:26,799
flexible enough to handle that where

73
00:03:26,239 --> 00:03:29,680
it's either

74
00:03:26,799 --> 00:03:31,120
a single device or a whole collection of

75
00:03:29,680 --> 00:03:34,239
devices

76
00:03:31,120 --> 00:03:36,400
swordfish is from the storage networking

77
00:03:34,239 --> 00:03:38,879
industry association and that

78
00:03:36,400 --> 00:03:39,840
was done really closely with the dmtf

79
00:03:38,879 --> 00:03:41,920
redfish team

80
00:03:39,840 --> 00:03:44,319
it really just builds on top it's

81
00:03:41,920 --> 00:03:47,040
layered on top of the redfish protocol

82
00:03:44,319 --> 00:03:49,440
adding things for managing storage and

83
00:03:47,040 --> 00:03:52,239
that can be

84
00:03:49,440 --> 00:03:52,959
typically an external storage device so

85
00:03:52,239 --> 00:03:57,840
a

86
00:03:52,959 --> 00:04:00,799
sand device could expose a swordfish api

87
00:03:57,840 --> 00:04:01,200
there are some basic storage management

88
00:04:00,799 --> 00:04:03,040
for

89
00:04:01,200 --> 00:04:04,399
redfish itself for managing an

90
00:04:03,040 --> 00:04:06,720
individual server

91
00:04:04,400 --> 00:04:08,799
with the internal hard drives but for

92
00:04:06,720 --> 00:04:11,760
anything other than just a really basic

93
00:04:08,799 --> 00:04:12,319
internal drive configuration the the

94
00:04:11,760 --> 00:04:14,959
vision

95
00:04:12,319 --> 00:04:16,959
at least is that then swordfish takes

96
00:04:14,959 --> 00:04:18,798
over and then that gives you all of the

97
00:04:16,959 --> 00:04:21,280
advanced functionality from configuring

98
00:04:18,798 --> 00:04:21,279
storage

99
00:04:21,440 --> 00:04:25,040
it might help to take a look at the

100
00:04:22,960 --> 00:04:27,840
actual object model like i said this is

101
00:04:25,040 --> 00:04:30,320
all rust so it's it's

102
00:04:27,840 --> 00:04:32,239
little you know easier to read than than

103
00:04:30,320 --> 00:04:35,280
something like uh

104
00:04:32,240 --> 00:04:38,000
smis protocol specification

105
00:04:35,280 --> 00:04:38,719
so everything is off this redfish v1

106
00:04:38,000 --> 00:04:40,800
route

107
00:04:38,720 --> 00:04:42,800
so to do anything with either redfish or

108
00:04:40,800 --> 00:04:43,520
swordfish you need to get that service

109
00:04:42,800 --> 00:04:45,600
route

110
00:04:43,520 --> 00:04:46,880
and then from there you can navigate to

111
00:04:45,600 --> 00:04:49,759
all of these other things

112
00:04:46,880 --> 00:04:51,280
all of the devices so for example

113
00:04:49,759 --> 00:04:52,639
there's a collection of systems

114
00:04:51,280 --> 00:04:54,320
and then you can get an individual

115
00:04:52,639 --> 00:04:56,720
system and through that

116
00:04:54,320 --> 00:04:58,320
that gets you the processors within that

117
00:04:56,720 --> 00:05:01,120
system or the memory

118
00:04:58,320 --> 00:05:02,400
um or in a physical chassis you can find

119
00:05:01,120 --> 00:05:05,680
out the power information

120
00:05:02,400 --> 00:05:07,440
thermal information and things like that

121
00:05:05,680 --> 00:05:09,680
swordfish like i said is built right on

122
00:05:07,440 --> 00:05:10,880
top so there's still that redfish v1

123
00:05:09,680 --> 00:05:13,120
service route

124
00:05:10,880 --> 00:05:14,240
but then it adds additional information

125
00:05:13,120 --> 00:05:17,680
through these this

126
00:05:14,240 --> 00:05:19,520
storage services collection so there can

127
00:05:17,680 --> 00:05:20,800
be multiple different storage services

128
00:05:19,520 --> 00:05:23,440
and then through that

129
00:05:20,800 --> 00:05:24,000
you can see the drives the enclosures

130
00:05:23,440 --> 00:05:27,280
storage

131
00:05:24,000 --> 00:05:29,600
pools things like that it's actually

132
00:05:27,280 --> 00:05:30,960
i should point out it's on the bottom

133
00:05:29,600 --> 00:05:33,840
here i have file systems

134
00:05:30,960 --> 00:05:35,120
the protocol itself for storage is meant

135
00:05:33,840 --> 00:05:38,479
for both

136
00:05:35,120 --> 00:05:41,600
uh well for block

137
00:05:38,479 --> 00:05:43,199
file and object storage uh focus so far

138
00:05:41,600 --> 00:05:45,840
has been on block storage i think

139
00:05:43,199 --> 00:05:47,680
there's rudimentary file system support

140
00:05:45,840 --> 00:05:49,520
object is planned in there kind of some

141
00:05:47,680 --> 00:05:51,120
placeholders but it's a protocol that's

142
00:05:49,520 --> 00:05:53,840
still evolving so

143
00:05:51,120 --> 00:05:55,919
if anyone is interested in that that's a

144
00:05:53,840 --> 00:05:58,960
place you can help out

145
00:05:55,919 --> 00:06:02,400
so go fish is a library that

146
00:05:58,960 --> 00:06:04,000
um it really just makes it easier to

147
00:06:02,400 --> 00:06:06,880
consume these protocols from

148
00:06:04,000 --> 00:06:09,199
a go application it can talk to both

149
00:06:06,880 --> 00:06:12,319
redfish and swordfish services

150
00:06:09,199 --> 00:06:14,319
and you know those services can give you

151
00:06:12,319 --> 00:06:16,400
a wide variety of

152
00:06:14,319 --> 00:06:18,400
server hardware types a variety of

153
00:06:16,400 --> 00:06:21,440
storage devices

154
00:06:18,400 --> 00:06:24,400
you don't need to care as much

155
00:06:21,440 --> 00:06:25,600
necessarily uh if it's a dell server or

156
00:06:24,400 --> 00:06:28,638
lenovo or

157
00:06:25,600 --> 00:06:31,280
hpe you just talk redfish

158
00:06:28,639 --> 00:06:33,039
and um it's a standard interface for all

159
00:06:31,280 --> 00:06:36,239
of them

160
00:06:33,039 --> 00:06:37,840
so the the the goal

161
00:06:36,240 --> 00:06:39,600
with the library is that it hides a lot

162
00:06:37,840 --> 00:06:43,198
of the implement internal details

163
00:06:39,600 --> 00:06:44,080
um you don't you shouldn't necessarily

164
00:06:43,199 --> 00:06:47,120
need to be an

165
00:06:44,080 --> 00:06:49,359
expert in the redfish specification to

166
00:06:47,120 --> 00:06:52,880
be able to use this library and interact

167
00:06:49,360 --> 00:06:54,880
with a redfish-enabled device

168
00:06:52,880 --> 00:06:56,400
it does expose that basic object model

169
00:06:54,880 --> 00:06:57,440
so you kind of need to understand that

170
00:06:56,400 --> 00:06:59,359
but

171
00:06:57,440 --> 00:07:01,919
through the linkage and everything being

172
00:06:59,360 --> 00:07:03,440
off of that service route even if you

173
00:07:01,919 --> 00:07:04,479
don't even take a look at the

174
00:07:03,440 --> 00:07:06,400
specification

175
00:07:04,479 --> 00:07:08,240
you can kind of figure out based on the

176
00:07:06,400 --> 00:07:11,039
names and what they link to

177
00:07:08,240 --> 00:07:13,759
where to go and find some things and it

178
00:07:11,039 --> 00:07:16,000
attempts to hide implementation details

179
00:07:13,759 --> 00:07:17,360
there's not too much of that yet so this

180
00:07:16,000 --> 00:07:20,160
is kind of a forward

181
00:07:17,360 --> 00:07:21,120
goal with it that as the specification

182
00:07:20,160 --> 00:07:22,880
evolves

183
00:07:21,120 --> 00:07:24,960
um you know new properties might be

184
00:07:22,880 --> 00:07:28,080
added some things might be taken away

185
00:07:24,960 --> 00:07:30,719
uh it's the it's one of the goals with

186
00:07:28,080 --> 00:07:32,400
the library is that it'll hide that from

187
00:07:30,720 --> 00:07:34,080
you so you don't necessarily need to

188
00:07:32,400 --> 00:07:37,440
know in your application

189
00:07:34,080 --> 00:07:39,198
um the first thing that you do isn't

190
00:07:37,440 --> 00:07:41,039
to query what version it is and then

191
00:07:39,199 --> 00:07:41,440
have a whole bunch of conditional logic

192
00:07:41,039 --> 00:07:42,880
to

193
00:07:41,440 --> 00:07:44,800
okay this version i got to do this this

194
00:07:42,880 --> 00:07:47,199
person i got to do that

195
00:07:44,800 --> 00:07:49,199
it'll just take care of whatever it can

196
00:07:47,199 --> 00:07:51,840
as much as possible

197
00:07:49,199 --> 00:07:53,680
where you can still have that consistent

198
00:07:51,840 --> 00:07:57,198
interface and not need to worry as much

199
00:07:53,680 --> 00:07:57,199
if something got moved around

200
00:07:57,599 --> 00:08:01,039
so to show an example of what this looks

201
00:07:59,599 --> 00:08:04,000
like uh this is

202
00:08:01,039 --> 00:08:04,800
some just really basic go code uh need

203
00:08:04,000 --> 00:08:07,680
to import

204
00:08:04,800 --> 00:08:09,360
the go fish library and there are it is

205
00:08:07,680 --> 00:08:11,759
broken out into different name spaces

206
00:08:09,360 --> 00:08:14,400
for redfish and swordfish

207
00:08:11,759 --> 00:08:15,919
are some common data structures that

208
00:08:14,400 --> 00:08:17,758
they share but

209
00:08:15,919 --> 00:08:19,680
to try to keep things separate in there

210
00:08:17,759 --> 00:08:22,560
there's a little overlap between

211
00:08:19,680 --> 00:08:23,840
names there's uh redfish and swordfish

212
00:08:22,560 --> 00:08:26,160
namespace

213
00:08:23,840 --> 00:08:27,119
depending what you need to access in

214
00:08:26,160 --> 00:08:30,240
this example

215
00:08:27,120 --> 00:08:32,080
i'm going to connect to

216
00:08:30,240 --> 00:08:34,000
the client before i can do that i need

217
00:08:32,080 --> 00:08:35,599
to define this client config structure

218
00:08:34,000 --> 00:08:37,279
and this is where

219
00:08:35,599 --> 00:08:39,440
unless it's a very simple thing like

220
00:08:37,279 --> 00:08:41,200
there they have a simulator that you

221
00:08:39,440 --> 00:08:43,200
there's no authentication it's you just

222
00:08:41,200 --> 00:08:44,000
connect to it you can even use your web

223
00:08:43,200 --> 00:08:46,800
browser

224
00:08:44,000 --> 00:08:47,600
um in most cases you'll need to give it

225
00:08:46,800 --> 00:08:50,479
username

226
00:08:47,600 --> 00:08:51,279
password tell it where to connect

227
00:08:50,480 --> 00:08:55,120
insecure

228
00:08:51,279 --> 00:08:56,160
is i think unfortunately is a very

229
00:08:55,120 --> 00:08:57,920
common option

230
00:08:56,160 --> 00:08:59,120
uh that you'll have to set that to true

231
00:08:57,920 --> 00:09:00,640
unless you actually go through the

232
00:08:59,120 --> 00:09:03,040
effort of setting up certificates and

233
00:09:00,640 --> 00:09:03,680
all that um otherwise it will try it

234
00:09:03,040 --> 00:09:05,920
will

235
00:09:03,680 --> 00:09:06,959
enforce that uh if there's a known

236
00:09:05,920 --> 00:09:10,079
certificate when it

237
00:09:06,959 --> 00:09:12,719
does an https connection um and

238
00:09:10,080 --> 00:09:13,839
and fail uh if you don't have everything

239
00:09:12,720 --> 00:09:15,519
in place so

240
00:09:13,839 --> 00:09:17,600
especially internally if you're using

241
00:09:15,519 --> 00:09:19,360
this within your data center

242
00:09:17,600 --> 00:09:21,440
you know it's good to have security but

243
00:09:19,360 --> 00:09:22,320
um you know probably hopefully okay to

244
00:09:21,440 --> 00:09:25,360
set that

245
00:09:22,320 --> 00:09:26,800
insecure to true and that'll just ignore

246
00:09:25,360 --> 00:09:28,560
any kind of certificate and

247
00:09:26,800 --> 00:09:29,839
and as long as it can establish the

248
00:09:28,560 --> 00:09:32,079
connection it works

249
00:09:29,839 --> 00:09:33,120
so you pass that config into the connect

250
00:09:32,080 --> 00:09:34,720
call

251
00:09:33,120 --> 00:09:36,399
that gives you an instance of the

252
00:09:34,720 --> 00:09:37,360
clients and

253
00:09:36,399 --> 00:09:38,880
by that point you should be

254
00:09:37,360 --> 00:09:39,839
authenticated if there's any

255
00:09:38,880 --> 00:09:43,279
authentication

256
00:09:39,839 --> 00:09:44,480
negotiation that needs to happen between

257
00:09:43,279 --> 00:09:46,959
like i said everything is off the

258
00:09:44,480 --> 00:09:47,360
service route so that that's one common

259
00:09:46,959 --> 00:09:49,680
piece

260
00:09:47,360 --> 00:09:50,560
is pretty much always you establish you

261
00:09:49,680 --> 00:09:51,760
get the client

262
00:09:50,560 --> 00:09:53,760
and then from the client you get the

263
00:09:51,760 --> 00:09:54,720
service route and then from there things

264
00:09:53,760 --> 00:09:55,920
start to

265
00:09:54,720 --> 00:09:57,760
change depending on what you're trying

266
00:09:55,920 --> 00:10:00,560
to do you

267
00:09:57,760 --> 00:10:01,120
query the systems and like i said most

268
00:10:00,560 --> 00:10:03,279
cases

269
00:10:01,120 --> 00:10:05,200
if you're just talking to an individual

270
00:10:03,279 --> 00:10:06,959
server that's just going to give you a

271
00:10:05,200 --> 00:10:08,800
collection of one

272
00:10:06,959 --> 00:10:10,800
but if you have an application that

273
00:10:08,800 --> 00:10:12,479
exposes the redfish api

274
00:10:10,800 --> 00:10:14,160
that's managing multiple multiple

275
00:10:12,480 --> 00:10:16,079
devices this is going to give you that

276
00:10:14,160 --> 00:10:20,399
collection of every

277
00:10:16,079 --> 00:10:20,399
system that your application knows about

278
00:10:20,560 --> 00:10:25,920
so that aside another little setup piece

279
00:10:23,920 --> 00:10:27,360
um because this is an example i'm going

280
00:10:25,920 --> 00:10:29,120
to reboot a server

281
00:10:27,360 --> 00:10:30,480
you have some control you can override

282
00:10:29,120 --> 00:10:31,120
some of the boot settings when you do

283
00:10:30,480 --> 00:10:34,240
this

284
00:10:31,120 --> 00:10:35,279
so i'm going to tell it uh the target

285
00:10:34,240 --> 00:10:37,600
change the target

286
00:10:35,279 --> 00:10:39,839
to pixie boot so if it was booting off

287
00:10:37,600 --> 00:10:43,279
its internal drive i can set here

288
00:10:39,839 --> 00:10:47,680
next time you reboot do a pixie boot

289
00:10:43,279 --> 00:10:49,600
and the override i can set to once

290
00:10:47,680 --> 00:10:51,040
so this isn't going to make a permanent

291
00:10:49,600 --> 00:10:52,640
change in my bios and every time i

292
00:10:51,040 --> 00:10:53,599
reboot is something different is going

293
00:10:52,640 --> 00:10:56,240
to happen

294
00:10:53,600 --> 00:10:56,880
um if i just need to to boot up my

295
00:10:56,240 --> 00:10:58,560
machines

296
00:10:56,880 --> 00:11:00,079
pull down an image i can do that just

297
00:10:58,560 --> 00:11:03,839
one time

298
00:11:00,079 --> 00:11:06,319
then all i do here is i loop through

299
00:11:03,839 --> 00:11:08,079
that collection of systems so loop

300
00:11:06,320 --> 00:11:09,839
through the one instance if i'm talking

301
00:11:08,079 --> 00:11:13,040
to a server

302
00:11:09,839 --> 00:11:15,279
it sets that set boot call

303
00:11:13,040 --> 00:11:17,279
sets those options and then just call

304
00:11:15,279 --> 00:11:19,040
reset and here i'm telling it force

305
00:11:17,279 --> 00:11:20,000
restart so there's different options you

306
00:11:19,040 --> 00:11:23,599
can tell it to

307
00:11:20,000 --> 00:11:25,279
try to gracefully shut down the host os

308
00:11:23,600 --> 00:11:28,240
in this case i'm just telling it you

309
00:11:25,279 --> 00:11:30,640
know basically like cut the power reboot

310
00:11:28,240 --> 00:11:33,760
the machine

311
00:11:30,640 --> 00:11:35,680
so that's a basic

312
00:11:33,760 --> 00:11:36,959
overview of the library there's a lot of

313
00:11:35,680 --> 00:11:38,640
detail in there

314
00:11:36,959 --> 00:11:41,599
i didn't want to go too into all the

315
00:11:38,640 --> 00:11:45,279
object model of redfish and swordfish

316
00:11:41,600 --> 00:11:47,519
those specs are linked to off of the

317
00:11:45,279 --> 00:11:48,560
this talks page if you want to take a

318
00:11:47,519 --> 00:11:51,839
look there

319
00:11:48,560 --> 00:11:54,479
they have a fairly decent online viewer

320
00:11:51,839 --> 00:11:56,160
if you're looking for something specific

321
00:11:54,480 --> 00:11:58,240
it's not too hard to look through there

322
00:11:56,160 --> 00:12:00,240
if you're fine trying to find a

323
00:11:58,240 --> 00:12:02,399
certain property that you're you need to

324
00:12:00,240 --> 00:12:05,120
pull in for whatever

325
00:12:02,399 --> 00:12:05,920
um so i just wanted to show an example

326
00:12:05,120 --> 00:12:09,120
of

327
00:12:05,920 --> 00:12:11,199
uh where this is already being used uh i

328
00:12:09,120 --> 00:12:13,680
i know of people using this write their

329
00:12:11,200 --> 00:12:16,639
own little tooling internally

330
00:12:13,680 --> 00:12:18,160
to interact with their their devices in

331
00:12:16,639 --> 00:12:20,720
their data center

332
00:12:18,160 --> 00:12:22,240
someone's writing a prometheus

333
00:12:20,720 --> 00:12:24,079
integration to be able to use this to

334
00:12:22,240 --> 00:12:24,959
pull in your hardware information into

335
00:12:24,079 --> 00:12:28,000
prometheus

336
00:12:24,959 --> 00:12:30,800
which helps with get those metrics

337
00:12:28,000 --> 00:12:32,639
and um but this one is kind of

338
00:12:30,800 --> 00:12:34,079
interesting to me the bmc lib is an

339
00:12:32,639 --> 00:12:34,800
existing library that's been out there

340
00:12:34,079 --> 00:12:39,040
before

341
00:12:34,800 --> 00:12:42,880
this and it right now

342
00:12:39,040 --> 00:12:46,880
has to have that implementation

343
00:12:42,880 --> 00:12:48,880
where there's a separate um

344
00:12:46,880 --> 00:12:50,079
whole separate module for this is how i

345
00:12:48,880 --> 00:12:53,120
talk to adele

346
00:12:50,079 --> 00:12:53,680
a whole separate model module to how i

347
00:12:53,120 --> 00:12:56,880
talk to

348
00:12:53,680 --> 00:12:58,638
hpe um and they're starting uh

349
00:12:56,880 --> 00:13:00,160
in a development branch so this isn't

350
00:12:58,639 --> 00:13:01,200
you know mainline stuff but they're

351
00:13:00,160 --> 00:13:02,800
they're starting to see

352
00:13:01,200 --> 00:13:04,720
where they can start to replace that

353
00:13:02,800 --> 00:13:06,800
with using gofish

354
00:13:04,720 --> 00:13:09,279
and just using this common redfish

355
00:13:06,800 --> 00:13:11,839
protocol to do that interface

356
00:13:09,279 --> 00:13:13,439
rather than needing to write all of

357
00:13:11,839 --> 00:13:17,200
these device specific

358
00:13:13,440 --> 00:13:17,600
codes so they would like to make it

359
00:13:17,200 --> 00:13:19,920
where

360
00:13:17,600 --> 00:13:21,360
you just plug in a server you don't need

361
00:13:19,920 --> 00:13:24,000
to know which type it is

362
00:13:21,360 --> 00:13:26,880
it's plug and play be able to provision

363
00:13:24,000 --> 00:13:29,760
things get things boot up

364
00:13:26,880 --> 00:13:31,279
you know ideally be able to have all the

365
00:13:29,760 --> 00:13:33,839
programmatic interface

366
00:13:31,279 --> 00:13:36,959
in here so that they don't need to do

367
00:13:33,839 --> 00:13:36,959
any manual intervention

368
00:13:37,120 --> 00:13:40,399
so that's part of an overall bmc toolbox

369
00:13:39,839 --> 00:13:43,920
bmc

370
00:13:40,399 --> 00:13:47,600
lib is is the one piece in there that

371
00:13:43,920 --> 00:13:49,839
does that abstraction currently

372
00:13:47,600 --> 00:13:51,279
um so that they can do all these fancy

373
00:13:49,839 --> 00:13:53,680
things um and

374
00:13:51,279 --> 00:13:54,639
all of that conditional logic for what

375
00:13:53,680 --> 00:13:58,399
they're talking to

376
00:13:54,639 --> 00:13:59,279
is in bmc lib so they have all of these

377
00:13:58,399 --> 00:14:02,880
different tools

378
00:13:59,279 --> 00:14:04,160
in bmc toolbox i'm not an expert on here

379
00:14:02,880 --> 00:14:04,720
so i'm not going to try to explain all

380
00:14:04,160 --> 00:14:07,680
of them but

381
00:14:04,720 --> 00:14:09,199
they all in some way interact with the

382
00:14:07,680 --> 00:14:12,399
hardware device

383
00:14:09,199 --> 00:14:13,519
through bmc lib so they're able to get

384
00:14:12,399 --> 00:14:16,399
the information out

385
00:14:13,519 --> 00:14:18,240
collect inventory make configuration

386
00:14:16,399 --> 00:14:20,720
changes and everything

387
00:14:18,240 --> 00:14:21,440
through bmc lab like i said they right

388
00:14:20,720 --> 00:14:24,800
now they have

389
00:14:21,440 --> 00:14:28,880
all these specific integrations for

390
00:14:24,800 --> 00:14:30,880
different device types uh and they're

391
00:14:28,880 --> 00:14:33,360
being you know solely able to migrate

392
00:14:30,880 --> 00:14:35,360
that away most modern

393
00:14:33,360 --> 00:14:36,639
devices from all these manufacturers and

394
00:14:35,360 --> 00:14:39,680
others now do

395
00:14:36,639 --> 00:14:42,480
have a redfish interface and

396
00:14:39,680 --> 00:14:44,959
they can stop doing these

397
00:14:42,480 --> 00:14:48,000
vendor-specific things for everything

398
00:14:44,959 --> 00:14:49,279
so the ongoing effort with that um

399
00:14:48,000 --> 00:14:51,199
you know they all have their own

400
00:14:49,279 --> 00:14:53,680
protocol

401
00:14:51,199 --> 00:14:55,120
but they are getting more support they

402
00:14:53,680 --> 00:14:57,680
are getting up-to-date

403
00:14:55,120 --> 00:15:00,160
uh there are still if you do try this

404
00:14:57,680 --> 00:15:03,359
out and see anything strange

405
00:15:00,160 --> 00:15:06,160
you may need to apply an update

406
00:15:03,360 --> 00:15:07,680
like older example older versions of

407
00:15:06,160 --> 00:15:10,639
dell idrac

408
00:15:07,680 --> 00:15:11,680
supported early on protocol version of

409
00:15:10,639 --> 00:15:14,160
redfish

410
00:15:11,680 --> 00:15:15,920
so like i mentioned going forward you

411
00:15:14,160 --> 00:15:17,760
should hopefully not have to care

412
00:15:15,920 --> 00:15:19,839
what version of the redfish

413
00:15:17,760 --> 00:15:21,600
specification they support

414
00:15:19,839 --> 00:15:24,079
i didn't really want to go all the way

415
00:15:21,600 --> 00:15:27,040
back to these old old versions so

416
00:15:24,079 --> 00:15:28,000
if you run into anything check how old

417
00:15:27,040 --> 00:15:32,480
your

418
00:15:28,000 --> 00:15:32,480
your firmware is may need to be updated

419
00:15:32,959 --> 00:15:38,959
and the idea for bmc lib to adopt this

420
00:15:35,759 --> 00:15:42,880
is it's easier to use one protocol

421
00:15:38,959 --> 00:15:42,880
and the work is being done there so

422
00:15:43,120 --> 00:15:49,759
try it out um you know i'd love to

423
00:15:46,639 --> 00:15:51,279
hear more feedback uh you know

424
00:15:49,759 --> 00:15:53,120
i've been able to test a few different

425
00:15:51,279 --> 00:15:54,720
things we the bmc lib

426
00:15:53,120 --> 00:15:56,240
project has been able to test a few

427
00:15:54,720 --> 00:15:58,160
different servers

428
00:15:56,240 --> 00:16:00,160
so we found little things here and there

429
00:15:58,160 --> 00:16:03,360
but for the most part i think the

430
00:16:00,160 --> 00:16:03,920
library is pretty usable but i'd love to

431
00:16:03,360 --> 00:16:07,360
hear

432
00:16:03,920 --> 00:16:10,079
more it success and failure so

433
00:16:07,360 --> 00:16:12,480
try it out if you do see anything just

434
00:16:10,079 --> 00:16:15,519
file an issue on github and hopefully

435
00:16:12,480 --> 00:16:17,839
we can get to that soon and of course

436
00:16:15,519 --> 00:16:19,600
contributions are always welcome if you

437
00:16:17,839 --> 00:16:22,079
see anything and want to

438
00:16:19,600 --> 00:16:24,079
enhance something make it easier to use

439
00:16:22,079 --> 00:16:27,758
have any other ideas

440
00:16:24,079 --> 00:16:31,040
definitely welcome any participation

441
00:16:27,759 --> 00:16:33,360
so the maybe this doesn't

442
00:16:31,040 --> 00:16:34,959
read on the black isn't great in this

443
00:16:33,360 --> 00:16:38,240
room but

444
00:16:34,959 --> 00:16:40,079
git repo is the top link there um

445
00:16:38,240 --> 00:16:41,279
this will be linked in the presentation

446
00:16:40,079 --> 00:16:43,439
as well so

447
00:16:41,279 --> 00:16:45,040
that's where you can get the code file

448
00:16:43,440 --> 00:16:48,560
any issues

449
00:16:45,040 --> 00:16:50,000
throw up any poll requests if you would

450
00:16:48,560 --> 00:16:53,439
like to find out more about

451
00:16:50,000 --> 00:16:56,480
the redfish protocol redfish.dmtf.org

452
00:16:53,440 --> 00:16:58,240
and senior has a longer url there i'm

453
00:16:56,480 --> 00:17:00,079
not going to read off

454
00:16:58,240 --> 00:17:02,399
and if you're interested in that bmc

455
00:17:00,079 --> 00:17:05,438
toolbox there are some really

456
00:17:02,399 --> 00:17:06,319
useful tools in there you know check

457
00:17:05,439 --> 00:17:08,400
them out

458
00:17:06,319 --> 00:17:10,079
uh if if you want to get involved in

459
00:17:08,400 --> 00:17:11,360
that project i think the same thing

460
00:17:10,079 --> 00:17:14,480
they'd welcome any

461
00:17:11,359 --> 00:17:15,760
contribution but it's also interesting

462
00:17:14,480 --> 00:17:16,559
to see what types of things they're

463
00:17:15,760 --> 00:17:18,559
doing

464
00:17:16,559 --> 00:17:19,678
using some of these basic ideas of how

465
00:17:18,559 --> 00:17:23,280
to interact with the

466
00:17:19,679 --> 00:17:27,199
bmc and and manage hardware uh below

467
00:17:23,280 --> 00:17:31,840
the operating system any

468
00:17:27,199 --> 00:17:35,679
uh any use of this if you start using it

469
00:17:31,840 --> 00:17:38,080
i'd love to hear about it tweet me

470
00:17:35,679 --> 00:17:39,200
can contact me directly through twitter

471
00:17:38,080 --> 00:17:41,760
or

472
00:17:39,200 --> 00:17:42,880
through github issues and whatever works

473
00:17:41,760 --> 00:17:44,640
best for you but

474
00:17:42,880 --> 00:17:46,080
love to hear about anything that works

475
00:17:44,640 --> 00:17:49,840
doesn't work

476
00:17:46,080 --> 00:17:52,480
any kind of feedback so

477
00:17:49,840 --> 00:17:52,480
any questions

478
00:17:55,120 --> 00:18:01,840
all straightforward

479
00:18:12,840 --> 00:18:17,039
is so the question is if there's an

480
00:18:15,440 --> 00:18:18,880
environment that you can test changes if

481
00:18:17,039 --> 00:18:21,760
all you have is your laptop that

482
00:18:18,880 --> 00:18:22,640
most likely does not have a vmc in it uh

483
00:18:21,760 --> 00:18:25,679
yeah there's

484
00:18:22,640 --> 00:18:28,480
um there is a simulator that the redfish

485
00:18:25,679 --> 00:18:30,480
team from dmtf provides it's just a

486
00:18:28,480 --> 00:18:34,240
python application

487
00:18:30,480 --> 00:18:36,960
by default download it run it

488
00:18:34,240 --> 00:18:37,679
it'll give you a basic setup if you want

489
00:18:36,960 --> 00:18:41,280
to test

490
00:18:37,679 --> 00:18:43,280
a specific scenario of type of hardware

491
00:18:41,280 --> 00:18:46,559
configuration

492
00:18:43,280 --> 00:18:49,840
it is configurable so there's not a

493
00:18:46,559 --> 00:18:50,960
tool to configure it but there they have

494
00:18:49,840 --> 00:18:53,520
instructions

495
00:18:50,960 --> 00:18:54,720
in there about how you can configure the

496
00:18:53,520 --> 00:18:57,520
simulator to

497
00:18:54,720 --> 00:18:59,200
report different types of configuration

498
00:18:57,520 --> 00:19:02,720
different hardware

499
00:18:59,200 --> 00:19:05,600
it's just adding a few files yeah

500
00:19:02,720 --> 00:19:05,600
yep good question

501
00:19:08,840 --> 00:19:13,678
yes

502
00:19:10,400 --> 00:19:16,400
does it work for open bmc

503
00:19:13,679 --> 00:19:18,320
um that's actually something i'd like to

504
00:19:16,400 --> 00:19:22,080
know i haven't been able to test yet

505
00:19:18,320 --> 00:19:22,879
um i i would assume if openvmc exposes a

506
00:19:22,080 --> 00:19:26,159
redfish

507
00:19:22,880 --> 00:19:28,559
interface it should work

508
00:19:26,160 --> 00:19:32,160
shouldn't be any reason why not just not

509
00:19:28,559 --> 00:19:32,160
something i've tested yet myself

510
00:19:32,559 --> 00:19:38,960
yes when testing or adding your hardware

511
00:19:46,880 --> 00:19:50,559
so when you're testing being able to

512
00:19:48,400 --> 00:19:52,240
download the

513
00:19:50,559 --> 00:19:54,160
basically the responses are the data

514
00:19:52,240 --> 00:19:57,919
from the the redfish server

515
00:19:54,160 --> 00:19:59,280
um there's uh that was actually a nice

516
00:19:57,919 --> 00:20:00,799
thing that someone added they

517
00:19:59,280 --> 00:20:03,200
they put up a pull request there's a

518
00:20:00,799 --> 00:20:06,480
configuration in that client config

519
00:20:03,200 --> 00:20:08,880
where you can tell it to dump all of the

520
00:20:06,480 --> 00:20:09,520
responses it gets so then you can look

521
00:20:08,880 --> 00:20:12,960
at the

522
00:20:09,520 --> 00:20:15,600
the raw json data that comes back and

523
00:20:12,960 --> 00:20:16,320
and uh that that has that is useful to

524
00:20:15,600 --> 00:20:18,639
see

525
00:20:16,320 --> 00:20:20,000
if something's not working quite right

526
00:20:18,640 --> 00:20:21,600
um you know

527
00:20:20,000 --> 00:20:22,880
trying to tell what what the library

528
00:20:21,600 --> 00:20:24,080
expects and then what data you're

529
00:20:22,880 --> 00:20:25,840
actually getting back

530
00:20:24,080 --> 00:20:28,879
uh a lot of them will actually do work

531
00:20:25,840 --> 00:20:31,918
well too if you just point a browser

532
00:20:28,880 --> 00:20:36,480
at this you know redfish

533
00:20:31,919 --> 00:20:38,320
v1 uh most browsers will be able to do a

534
00:20:36,480 --> 00:20:39,919
challenge authentication and then once

535
00:20:38,320 --> 00:20:42,960
you're authenticated you can

536
00:20:39,919 --> 00:20:45,039
really follow through

537
00:20:42,960 --> 00:20:48,559
you just have to put in the url for some

538
00:20:45,039 --> 00:20:48,559
of the associations that are in there

539
00:20:51,770 --> 00:20:54,839
[Music]

540
00:21:00,840 --> 00:21:03,840
um

541
00:21:08,320 --> 00:21:14,240
yeah so you could use this yeah

542
00:21:12,240 --> 00:21:16,000
you could use this to write a tool that

543
00:21:14,240 --> 00:21:17,760
if your your client whoever you're

544
00:21:16,000 --> 00:21:20,320
you're providing support for has this

545
00:21:17,760 --> 00:21:22,799
issue and you can't access the system

546
00:21:20,320 --> 00:21:23,678
that it'll it'll it could just go out

547
00:21:22,799 --> 00:21:25,600
and

548
00:21:23,679 --> 00:21:28,159
pull down all kinds of information dump

549
00:21:25,600 --> 00:21:29,840
it into text files and then

550
00:21:28,159 --> 00:21:31,520
then there you you've got everything

551
00:21:29,840 --> 00:21:36,158
hopefully that you need

552
00:21:31,520 --> 00:21:36,158
yeah yeah good

553
00:21:37,919 --> 00:21:45,840
all right well yeah thank you everyone

554
00:21:48,080 --> 00:21:50,158
you

