1
00:00:06,399 --> 00:00:08,720
robin

2
00:00:09,120 --> 00:00:13,360
okay so we have nicholas finally we have

3
00:00:12,719 --> 00:00:16,079
someone that

4
00:00:13,360 --> 00:00:16,880
actually implemented something in the

5
00:00:16,079 --> 00:00:19,839
browsers

6
00:00:16,880 --> 00:00:20,320
and one a couple of the performance apis

7
00:00:19,840 --> 00:00:23,198
so

8
00:00:20,320 --> 00:00:24,800
it's it will be really interesting to

9
00:00:23,199 --> 00:00:28,000
understand more how it is

10
00:00:24,800 --> 00:00:28,840
so nicholas please all right hello

11
00:00:28,000 --> 00:00:31,759
everyone

12
00:00:28,840 --> 00:00:32,399
um like peter just said i'm going to

13
00:00:31,760 --> 00:00:35,360
talk about

14
00:00:32,399 --> 00:00:36,480
shipping a performance api on chromium

15
00:00:35,360 --> 00:00:38,079
and

16
00:00:36,480 --> 00:00:40,239
i'm going to talk about it from the

17
00:00:38,079 --> 00:00:43,760
perspective of

18
00:00:40,239 --> 00:00:45,919
how we worked to ship the element timing

19
00:00:43,760 --> 00:00:48,800
api

20
00:00:45,920 --> 00:00:49,520
i'm nikolas and i work on google chrome

21
00:00:48,800 --> 00:00:52,399
on the

22
00:00:49,520 --> 00:00:54,239
speedmatrix team in particular my focus

23
00:00:52,399 --> 00:00:56,800
is on

24
00:00:54,239 --> 00:00:58,000
defining and implementing new web

25
00:00:56,800 --> 00:01:00,800
performance apis

26
00:00:58,000 --> 00:01:02,640
so those are the ones that you can run

27
00:01:00,800 --> 00:01:06,080
on javascript

28
00:01:02,640 --> 00:01:06,880
so i'm part of the chrome team within

29
00:01:06,080 --> 00:01:10,720
blink

30
00:01:06,880 --> 00:01:12,640
blink is chrome's rendering engine

31
00:01:10,720 --> 00:01:15,119
so basically that's where we implement

32
00:01:12,640 --> 00:01:17,680
the javascript apis

33
00:01:15,119 --> 00:01:19,200
so the objectives of the talk are

34
00:01:17,680 --> 00:01:21,200
basically two

35
00:01:19,200 --> 00:01:22,640
i want to explain the process that's

36
00:01:21,200 --> 00:01:25,439
involved with

37
00:01:22,640 --> 00:01:26,720
standardizing a new web performance api

38
00:01:25,439 --> 00:01:29,839
so that

39
00:01:26,720 --> 00:01:32,240
developers get a more clear sense of

40
00:01:29,840 --> 00:01:34,079
the steps involved and can also maybe

41
00:01:32,240 --> 00:01:36,158
understand why sometimes it takes so

42
00:01:34,079 --> 00:01:39,360
long

43
00:01:36,159 --> 00:01:42,399
in fact they have a 42-step checklist so

44
00:01:39,360 --> 00:01:44,399
that i don't forget some of the steps

45
00:01:42,399 --> 00:01:47,439
that are required

46
00:01:44,399 --> 00:01:50,079
and the second objective is to encourage

47
00:01:47,439 --> 00:01:51,520
web developers here or web and web

48
00:01:50,079 --> 00:01:54,960
performance enthusiasts

49
00:01:51,520 --> 00:01:55,920
to get involved we love to get feedback

50
00:01:54,960 --> 00:01:58,559
about

51
00:01:55,920 --> 00:02:00,159
what we're working on the new apis and

52
00:01:58,560 --> 00:02:02,000
what we should be working on like

53
00:02:00,159 --> 00:02:03,200
what new apis we should be surfacing to

54
00:02:02,000 --> 00:02:06,799
web developers

55
00:02:03,200 --> 00:02:08,399
so that's one of the other purposes of

56
00:02:06,799 --> 00:02:10,000
the talk to get some help from you

57
00:02:08,399 --> 00:02:12,640
to get some feedback about what we

58
00:02:10,000 --> 00:02:14,560
should be working on

59
00:02:12,640 --> 00:02:17,119
now let's go over the steps to ship an

60
00:02:14,560 --> 00:02:18,800
api the first step is to identify a

61
00:02:17,120 --> 00:02:21,520
problem

62
00:02:18,800 --> 00:02:22,959
so in the case of performance apis the

63
00:02:21,520 --> 00:02:24,480
problem will basically be

64
00:02:22,959 --> 00:02:25,760
there's a gap in measurement there's

65
00:02:24,480 --> 00:02:26,879
something that web developers want to

66
00:02:25,760 --> 00:02:28,640
measure but they

67
00:02:26,879 --> 00:02:30,239
can't do it right now or they can do it

68
00:02:28,640 --> 00:02:33,839
but in a very hacky

69
00:02:30,239 --> 00:02:34,959
or unreliable way in the case of element

70
00:02:33,840 --> 00:02:38,000
timing

71
00:02:34,959 --> 00:02:40,000
the gap in measurement is being able to

72
00:02:38,000 --> 00:02:42,160
measure when an image has rendered on

73
00:02:40,000 --> 00:02:44,879
the screen for the user

74
00:02:42,160 --> 00:02:47,359
so throughout the talk i will have some

75
00:02:44,879 --> 00:02:49,599
screenshots from some websites

76
00:02:47,360 --> 00:02:50,560
to showcase what i'm trying to say for

77
00:02:49,599 --> 00:02:52,480
example here

78
00:02:50,560 --> 00:02:54,400
i have a screenshot from steve

79
00:02:52,480 --> 00:02:56,799
souders.com

80
00:02:54,400 --> 00:02:58,000
and the blog is saying how to measure

81
00:02:56,800 --> 00:02:59,760
the image render time

82
00:02:58,000 --> 00:03:01,360
so the idea is that you have an image

83
00:02:59,760 --> 00:03:04,799
tag and

84
00:03:01,360 --> 00:03:08,800
it contains the hero.jpg that's your

85
00:03:04,800 --> 00:03:11,040
critical hero image and it has an unload

86
00:03:08,800 --> 00:03:12,720
where you call performance.mark that

87
00:03:11,040 --> 00:03:14,640
will basically give you a

88
00:03:12,720 --> 00:03:15,840
high resolution timestamp of when you

89
00:03:14,640 --> 00:03:18,958
call the method

90
00:03:15,840 --> 00:03:20,800
so that gives you timestamp hero1

91
00:03:18,959 --> 00:03:22,959
and in addition to that you have to

92
00:03:20,800 --> 00:03:23,760
append a script right after the image

93
00:03:22,959 --> 00:03:26,000
tag

94
00:03:23,760 --> 00:03:27,599
and the script will also have another

95
00:03:26,000 --> 00:03:29,440
call to performance.mark

96
00:03:27,599 --> 00:03:31,440
so you get a second high resolution

97
00:03:29,440 --> 00:03:35,440
timestamp in this case

98
00:03:31,440 --> 00:03:38,720
hero2 now to get the estimated

99
00:03:35,440 --> 00:03:40,640
image render time you get the maximum

100
00:03:38,720 --> 00:03:43,280
between those two marks

101
00:03:40,640 --> 00:03:46,480
and that is the proposed solution does

102
00:03:43,280 --> 00:03:49,599
it sound reasonable no

103
00:03:46,480 --> 00:03:51,760
of course not it's very hacky and in

104
00:03:49,599 --> 00:03:56,560
addition to being very hacky it's also

105
00:03:51,760 --> 00:03:59,679
inaccurate why is it inaccurate well

106
00:03:56,560 --> 00:04:03,200
those two calls will be running on

107
00:03:59,680 --> 00:04:05,519
the main thread right which is the only

108
00:04:03,200 --> 00:04:08,000
thread that can actually run javascript

109
00:04:05,519 --> 00:04:10,400
but browsers generally

110
00:04:08,000 --> 00:04:11,200
actually render content in separate

111
00:04:10,400 --> 00:04:12,799
processes

112
00:04:11,200 --> 00:04:14,238
right which means that the timestamps

113
00:04:12,799 --> 00:04:16,400
will not really capture

114
00:04:14,239 --> 00:04:18,798
the actual time when the image was

115
00:04:16,399 --> 00:04:21,279
rendered

116
00:04:18,798 --> 00:04:23,599
now that we have identified a problem

117
00:04:21,279 --> 00:04:26,559
let's start by writing an explainer

118
00:04:23,600 --> 00:04:28,160
so what are the parts of an explainer

119
00:04:26,560 --> 00:04:29,840
the first and most important part is to

120
00:04:28,160 --> 00:04:33,199
present the problem

121
00:04:29,840 --> 00:04:36,000
so in the case of element timing we have

122
00:04:33,199 --> 00:04:36,400
the following problem developers know

123
00:04:36,000 --> 00:04:38,639
what

124
00:04:36,400 --> 00:04:40,320
content is important to them what they

125
00:04:38,639 --> 00:04:42,560
want to know has been rendered

126
00:04:40,320 --> 00:04:44,080
on the screen for the users and browsers

127
00:04:42,560 --> 00:04:44,720
are the ones who actually paint this

128
00:04:44,080 --> 00:04:47,280
content

129
00:04:44,720 --> 00:04:49,759
so they are the ones that can compute

130
00:04:47,280 --> 00:04:52,638
when that content has been rendered

131
00:04:49,759 --> 00:04:54,240
so from should be panickers explainer it

132
00:04:52,639 --> 00:04:55,840
can be summarized as

133
00:04:54,240 --> 00:04:57,440
web developers want to know when the

134
00:04:55,840 --> 00:04:59,119
critical elements

135
00:04:57,440 --> 00:05:00,960
on a web page have been displayed on the

136
00:04:59,120 --> 00:05:03,039
screen

137
00:05:00,960 --> 00:05:05,440
now once we have presented the problem

138
00:05:03,039 --> 00:05:07,599
we can have some use cases

139
00:05:05,440 --> 00:05:08,960
so what are the user needs that are

140
00:05:07,600 --> 00:05:12,320
being satisfied

141
00:05:08,960 --> 00:05:14,960
by the new api or what are the user

142
00:05:12,320 --> 00:05:18,159
needs that we want to satisfy

143
00:05:14,960 --> 00:05:21,198
and what are some examples of how this

144
00:05:18,160 --> 00:05:24,400
new api could be used to solve real

145
00:05:21,199 --> 00:05:28,080
developer problems in the case of

146
00:05:24,400 --> 00:05:31,919
hero element timing we have two examples

147
00:05:28,080 --> 00:05:33,919
one is time it takes for

148
00:05:31,919 --> 00:05:35,599
images to be displayed upon page

149
00:05:33,919 --> 00:05:38,320
navigation so some images

150
00:05:35,600 --> 00:05:39,600
are displayed on the page immediately

151
00:05:38,320 --> 00:05:41,199
after navigation because

152
00:05:39,600 --> 00:05:43,919
the user doesn't have to do anything to

153
00:05:41,199 --> 00:05:45,919
see them they just show up right away

154
00:05:43,919 --> 00:05:47,359
and the other use case a little more

155
00:05:45,919 --> 00:05:50,479
tricky but still

156
00:05:47,360 --> 00:05:51,600
applicable to this is measure the time

157
00:05:50,479 --> 00:05:53,840
it takes for

158
00:05:51,600 --> 00:05:54,880
hero elements that are caused by user

159
00:05:53,840 --> 00:05:57,359
interaction

160
00:05:54,880 --> 00:05:58,639
so for example you can click on

161
00:05:57,360 --> 00:06:01,360
something that causes a new

162
00:05:58,639 --> 00:06:02,720
giant image to appear on your web page

163
00:06:01,360 --> 00:06:04,880
of course in this case it doesn't make

164
00:06:02,720 --> 00:06:07,919
sense to compute the delta

165
00:06:04,880 --> 00:06:09,840
with respect to page navigation because

166
00:06:07,919 --> 00:06:12,719
it depends on when the user interaction

167
00:06:09,840 --> 00:06:12,719
occurred so

168
00:06:13,440 --> 00:06:16,960
now that we have the use cases uh we

169
00:06:16,000 --> 00:06:20,960
have a third

170
00:06:16,960 --> 00:06:22,799
optional component which is usually

171
00:06:20,960 --> 00:06:26,159
in explainers but i will call it

172
00:06:22,800 --> 00:06:29,520
optional and it's proposing a solution

173
00:06:26,160 --> 00:06:32,160
so having a proposed api of

174
00:06:29,520 --> 00:06:32,960
how we could solve this problem i say

175
00:06:32,160 --> 00:06:34,560
it's optional

176
00:06:32,960 --> 00:06:36,239
because the idea of the explainer is

177
00:06:34,560 --> 00:06:37,680
more to present the problem and to make

178
00:06:36,240 --> 00:06:39,520
sure that people agree that this is

179
00:06:37,680 --> 00:06:41,280
something we want to solve

180
00:06:39,520 --> 00:06:43,198
and the solution is just something

181
00:06:41,280 --> 00:06:44,559
optional of maybe this is one way we

182
00:06:43,199 --> 00:06:47,039
could solve it

183
00:06:44,560 --> 00:06:49,840
in fact we discourage people to have

184
00:06:47,039 --> 00:06:51,840
very concrete

185
00:06:49,840 --> 00:06:53,359
proposals in their initial explainer

186
00:06:51,840 --> 00:06:56,479
because then

187
00:06:53,360 --> 00:06:58,639
as even browser engineers are human

188
00:06:56,479 --> 00:07:00,159
beings right so we get we get attached

189
00:06:58,639 --> 00:07:02,080
to the solution that we're first

190
00:07:00,160 --> 00:07:04,400
proposing so then

191
00:07:02,080 --> 00:07:06,000
it'll be harder to make drastic changes

192
00:07:04,400 --> 00:07:07,120
on the initial proposal if we have a

193
00:07:06,000 --> 00:07:10,479
very concrete

194
00:07:07,120 --> 00:07:12,479
proposal at the very beginning

195
00:07:10,479 --> 00:07:14,560
so in the case of element timing our

196
00:07:12,479 --> 00:07:16,960
initial proposal is basically

197
00:07:14,560 --> 00:07:18,880
let's annotate the hero elements so the

198
00:07:16,960 --> 00:07:21,680
web developer has to do this

199
00:07:18,880 --> 00:07:24,319
and you can see there it is using the

200
00:07:21,680 --> 00:07:26,479
element timing html attribute

201
00:07:24,319 --> 00:07:28,000
to annotate this is an element i care

202
00:07:26,479 --> 00:07:30,719
about

203
00:07:28,000 --> 00:07:31,759
and let's expose information about those

204
00:07:30,720 --> 00:07:35,039
annotated elements

205
00:07:31,759 --> 00:07:38,240
via the performance observer which is

206
00:07:35,039 --> 00:07:42,159
the class that exposes most of the web

207
00:07:38,240 --> 00:07:42,160
performance apis on javascript

208
00:07:42,720 --> 00:07:46,400
so once you have written an explainer

209
00:07:44,639 --> 00:07:48,400
which presents the problem and the use

210
00:07:46,400 --> 00:07:50,638
cases that you are trying to achieve

211
00:07:48,400 --> 00:07:52,799
by solving a problem you can start by

212
00:07:50,639 --> 00:07:55,440
socializing the explainer

213
00:07:52,800 --> 00:07:56,240
so there are several ways in which you

214
00:07:55,440 --> 00:07:59,280
can do this

215
00:07:56,240 --> 00:08:02,479
for the web performance apis

216
00:07:59,280 --> 00:08:05,119
we take mostly two steps one is to

217
00:08:02,479 --> 00:08:07,120
present to the w3c web performance

218
00:08:05,120 --> 00:08:10,000
working group

219
00:08:07,120 --> 00:08:11,039
we basically share the explainer and we

220
00:08:10,000 --> 00:08:13,360
talk to them to see

221
00:08:11,039 --> 00:08:16,000
what they think what concerns they have

222
00:08:13,360 --> 00:08:17,120
do they think these use cases are valid

223
00:08:16,000 --> 00:08:19,199
is this something that could be

224
00:08:17,120 --> 00:08:22,160
implemented in all major browsers

225
00:08:19,199 --> 00:08:22,960
things like that uh the ways of

226
00:08:22,160 --> 00:08:25,599
communicating

227
00:08:22,960 --> 00:08:26,400
in the web performance working group are

228
00:08:25,599 --> 00:08:28,560
several

229
00:08:26,400 --> 00:08:32,159
we have a mailing list which is in the

230
00:08:28,560 --> 00:08:35,919
slides but we also have bi-weekly

231
00:08:32,159 --> 00:08:37,838
video conference calls so basically

232
00:08:35,919 --> 00:08:39,519
we have an agenda every two weeks where

233
00:08:37,839 --> 00:08:42,320
we just gather

234
00:08:39,519 --> 00:08:44,399
together for an hour and talk about

235
00:08:42,320 --> 00:08:48,160
whatever topics are on the agenda

236
00:08:44,399 --> 00:08:51,760
and we have roughly yearly face-to-face

237
00:08:48,160 --> 00:08:52,399
so we gather for let's say a full day

238
00:08:51,760 --> 00:08:54,560
and

239
00:08:52,399 --> 00:08:56,880
try to solve as many problems as we can

240
00:08:54,560 --> 00:08:59,599
in this space

241
00:08:56,880 --> 00:09:02,640
another way to socialize the explainer

242
00:08:59,600 --> 00:09:06,320
is via the web platform incubator group

243
00:09:02,640 --> 00:09:07,439
or wicg discourse so i also have put a

244
00:09:06,320 --> 00:09:09,279
link for

245
00:09:07,440 --> 00:09:11,200
that this course which is basically a

246
00:09:09,279 --> 00:09:14,399
forum with ideas

247
00:09:11,200 --> 00:09:18,080
oh i should point out that the

248
00:09:14,399 --> 00:09:20,800
members of the webperf working group are

249
00:09:18,080 --> 00:09:21,360
mostly browser engineers so people like

250
00:09:20,800 --> 00:09:23,120
me

251
00:09:21,360 --> 00:09:26,959
from chrome and there's also people from

252
00:09:23,120 --> 00:09:28,560
firefox and safari but there's also

253
00:09:26,959 --> 00:09:30,479
in the case of the web performance

254
00:09:28,560 --> 00:09:30,880
working group there's web developers

255
00:09:30,480 --> 00:09:33,040
from

256
00:09:30,880 --> 00:09:34,320
large companies as well as web

257
00:09:33,040 --> 00:09:36,319
developers from other

258
00:09:34,320 --> 00:09:37,519
smaller companies in fact wikimedia also

259
00:09:36,320 --> 00:09:39,760
participates

260
00:09:37,519 --> 00:09:41,600
and there's also analytics analytics

261
00:09:39,760 --> 00:09:43,279
providers like akamai participates in

262
00:09:41,600 --> 00:09:45,120
the working group so basically it's open

263
00:09:43,279 --> 00:09:47,839
to anyone that is

264
00:09:45,120 --> 00:09:51,200
really enthusiastic about web

265
00:09:47,839 --> 00:09:54,560
performance apis

266
00:09:51,200 --> 00:09:58,240
now we have socialized the explainer and

267
00:09:54,560 --> 00:09:59,920
ideally we partner with people that are

268
00:09:58,240 --> 00:10:00,480
really interested in solving the same

269
00:09:59,920 --> 00:10:03,920
problem

270
00:10:00,480 --> 00:10:05,600
and we develop a concrete proposal now

271
00:10:03,920 --> 00:10:09,360
this proposal

272
00:10:05,600 --> 00:10:11,519
usually will live in wacg that is

273
00:10:09,360 --> 00:10:12,880
kind of its purpose if the idea is that

274
00:10:11,519 --> 00:10:15,279
that is the place where we

275
00:10:12,880 --> 00:10:19,040
incubate new proposals before they

276
00:10:15,279 --> 00:10:22,160
become actual web standards

277
00:10:19,040 --> 00:10:25,680
and in addition to moving

278
00:10:22,160 --> 00:10:29,600
the explainer to wicg on github

279
00:10:25,680 --> 00:10:30,399
we also request a design review from the

280
00:10:29,600 --> 00:10:33,600
technical

281
00:10:30,399 --> 00:10:34,640
architecture group or tag it's made of

282
00:10:33,600 --> 00:10:37,519
people that are

283
00:10:34,640 --> 00:10:38,720
experts in the web and they have a

284
00:10:37,519 --> 00:10:40,959
familiarity with

285
00:10:38,720 --> 00:10:42,160
the majority of major web features so

286
00:10:40,959 --> 00:10:45,359
they

287
00:10:42,160 --> 00:10:48,000
do a high level design review and

288
00:10:45,360 --> 00:10:49,839
provide some feedback in terms of

289
00:10:48,000 --> 00:10:52,880
privacy concerns as well as

290
00:10:49,839 --> 00:10:55,279
design concerns for the api

291
00:10:52,880 --> 00:10:57,200
in addition to this we send an intent to

292
00:10:55,279 --> 00:10:59,920
prototype

293
00:10:57,200 --> 00:11:00,560
the idea being that we're signaling to

294
00:10:59,920 --> 00:11:02,800
the world

295
00:11:00,560 --> 00:11:05,040
this is something that a chrome engineer

296
00:11:02,800 --> 00:11:08,240
is looking to implement

297
00:11:05,040 --> 00:11:10,240
before it was named intent to implement

298
00:11:08,240 --> 00:11:12,000
um but we decided to rename it to

299
00:11:10,240 --> 00:11:14,640
prototype because

300
00:11:12,000 --> 00:11:16,079
because it is actually more accurate to

301
00:11:14,640 --> 00:11:18,480
say prototype because it is

302
00:11:16,079 --> 00:11:19,519
implemented behind the flag inc in

303
00:11:18,480 --> 00:11:21,920
chromium

304
00:11:19,519 --> 00:11:22,800
but the flag is basically disabled by

305
00:11:21,920 --> 00:11:24,880
default

306
00:11:22,800 --> 00:11:26,160
so it is code that is not shipping to

307
00:11:24,880 --> 00:11:29,839
any user

308
00:11:26,160 --> 00:11:31,600
um and it is just like basically the

309
00:11:29,839 --> 00:11:32,959
playground of the browser engineer where

310
00:11:31,600 --> 00:11:35,760
he can just

311
00:11:32,959 --> 00:11:36,880
uh implement whatever he wants without

312
00:11:35,760 --> 00:11:40,000
having uh

313
00:11:36,880 --> 00:11:41,600
fear of it reaching uh the final users

314
00:11:40,000 --> 00:11:44,959
yet

315
00:11:41,600 --> 00:11:49,839
so this intent to prototype is sent to

316
00:11:44,959 --> 00:11:52,479
link dev which is a public forum

317
00:11:49,839 --> 00:11:53,760
obviously composed primarily of link

318
00:11:52,480 --> 00:11:56,399
engineers

319
00:11:53,760 --> 00:11:57,439
but anyone can see the intents that are

320
00:11:56,399 --> 00:12:00,399
sent to this

321
00:11:57,440 --> 00:12:00,880
forum it's a basically a google group

322
00:12:00,399 --> 00:12:04,000
and

323
00:12:00,880 --> 00:12:04,560
there is no approvals required at this

324
00:12:04,000 --> 00:12:07,279
stage

325
00:12:04,560 --> 00:12:10,560
and that makes sense because we're not

326
00:12:07,279 --> 00:12:12,399
launching any code to the users yet

327
00:12:10,560 --> 00:12:14,319
now proposals can take multiple

328
00:12:12,399 --> 00:12:17,120
iterations as you can see

329
00:12:14,320 --> 00:12:18,000
for element timing we did quite a few of

330
00:12:17,120 --> 00:12:21,120
iterations

331
00:12:18,000 --> 00:12:22,800
so the first is the original proposal

332
00:12:21,120 --> 00:12:24,160
and then it links to the updated version

333
00:12:22,800 --> 00:12:26,479
and then you click on that then there's

334
00:12:24,160 --> 00:12:28,399
another proposal which says obsolete

335
00:12:26,480 --> 00:12:30,959
and now it has a link to the updated

336
00:12:28,399 --> 00:12:32,800
version so you click on that oh

337
00:12:30,959 --> 00:12:34,638
it has been moved to wicg and then

338
00:12:32,800 --> 00:12:35,279
finally that link will take you to the

339
00:12:34,639 --> 00:12:38,639
actual

340
00:12:35,279 --> 00:12:39,439
current explainer so we have multiple

341
00:12:38,639 --> 00:12:42,480
iterations

342
00:12:39,440 --> 00:12:43,360
because like i said socializing the

343
00:12:42,480 --> 00:12:45,680
proposal

344
00:12:43,360 --> 00:12:47,600
the idea is to make changes based on

345
00:12:45,680 --> 00:12:51,680
feedback

346
00:12:47,600 --> 00:12:54,160
now once we have a more solid proposal

347
00:12:51,680 --> 00:12:54,959
and after we've sent the intent to

348
00:12:54,160 --> 00:12:56,800
prototype

349
00:12:54,959 --> 00:12:58,479
then we can actually start prototyping

350
00:12:56,800 --> 00:13:01,040
the proposed api so implement

351
00:12:58,480 --> 00:13:03,519
in chrome behind a flag that is disabled

352
00:13:01,040 --> 00:13:05,920
by default

353
00:13:03,519 --> 00:13:07,279
in parallel to that we add web platform

354
00:13:05,920 --> 00:13:11,199
tests

355
00:13:07,279 --> 00:13:14,240
these are tests that help prevent

356
00:13:11,200 --> 00:13:16,320
the greatest joy of web developers which

357
00:13:14,240 --> 00:13:18,839
is

358
00:13:16,320 --> 00:13:20,000
like they said in the previous talk

359
00:13:18,839 --> 00:13:22,000
basically

360
00:13:20,000 --> 00:13:23,120
browser render is not behaving the same

361
00:13:22,000 --> 00:13:26,160
right so

362
00:13:23,120 --> 00:13:26,880
the web platform test ensure that you

363
00:13:26,160 --> 00:13:31,120
can test

364
00:13:26,880 --> 00:13:34,240
the same thing on all major browsers

365
00:13:31,120 --> 00:13:38,480
so that's the idea i can go a bit

366
00:13:34,240 --> 00:13:40,399
over how they look like here

367
00:13:38,480 --> 00:13:42,000
at the beginning you have some imports

368
00:13:40,399 --> 00:13:42,880
of some scripts which are the test

369
00:13:42,000 --> 00:13:44,639
harness

370
00:13:42,880 --> 00:13:47,519
they just allow you to create new

371
00:13:44,639 --> 00:13:50,480
functions and do some assertions

372
00:13:47,519 --> 00:13:53,040
inside the html file because that's what

373
00:13:50,480 --> 00:13:55,199
the test is

374
00:13:53,040 --> 00:13:56,160
uh then we have some content of the

375
00:13:55,199 --> 00:13:59,439
actual test so

376
00:13:56,160 --> 00:14:03,040
some style there and then we have a

377
00:13:59,440 --> 00:14:05,120
hero image which is annotated with the

378
00:14:03,040 --> 00:14:09,199
key element timing

379
00:14:05,120 --> 00:14:10,480
html attribute and then comes the core

380
00:14:09,199 --> 00:14:13,439
part of the test

381
00:14:10,480 --> 00:14:13,760
which is using the performance observer

382
00:14:13,440 --> 00:14:16,000
to

383
00:14:13,760 --> 00:14:17,040
obtain the rendering timing of that

384
00:14:16,000 --> 00:14:20,000
image

385
00:14:17,040 --> 00:14:21,760
and then inside the performance observer

386
00:14:20,000 --> 00:14:22,639
you have a callback and in the callback

387
00:14:21,760 --> 00:14:26,800
you do some

388
00:14:22,639 --> 00:14:28,839
assertions to check some of the

389
00:14:26,800 --> 00:14:31,839
properties of the information that you

390
00:14:28,839 --> 00:14:31,839
received

391
00:14:32,000 --> 00:14:36,480
in parallel to implementing or

392
00:14:35,279 --> 00:14:39,199
prototyping

393
00:14:36,480 --> 00:14:40,079
the api and writing web platform tests

394
00:14:39,199 --> 00:14:43,359
word

395
00:14:40,079 --> 00:14:47,359
we draft a spec so

396
00:14:43,360 --> 00:14:49,760
the specification of an api is meant to

397
00:14:47,360 --> 00:14:50,480
not only inform web developers about how

398
00:14:49,760 --> 00:14:53,279
it works

399
00:14:50,480 --> 00:14:55,040
but also inform other browser engineers

400
00:14:53,279 --> 00:14:56,639
about how they should be implementing

401
00:14:55,040 --> 00:14:58,880
the new api

402
00:14:56,639 --> 00:15:00,320
so some characteristics about it it is

403
00:14:58,880 --> 00:15:03,760
composed of both

404
00:15:00,320 --> 00:15:06,240
both pros and algorithms

405
00:15:03,760 --> 00:15:07,920
so some of it is paragraphs but others

406
00:15:06,240 --> 00:15:10,079
parts of it are more

407
00:15:07,920 --> 00:15:12,719
algorithmic steps and things you should

408
00:15:10,079 --> 00:15:15,040
do in sequential order

409
00:15:12,720 --> 00:15:16,800
it is written in bike shed or respect so

410
00:15:15,040 --> 00:15:19,360
it has like a special

411
00:15:16,800 --> 00:15:20,719
language just for it so that it can have

412
00:15:19,360 --> 00:15:24,160
a very

413
00:15:20,720 --> 00:15:27,360
specific um

414
00:15:24,160 --> 00:15:29,519
way of rendering when you translate it

415
00:15:27,360 --> 00:15:32,399
to html

416
00:15:29,519 --> 00:15:33,040
and usually a new specification will

417
00:15:32,399 --> 00:15:36,399
interact

418
00:15:33,040 --> 00:15:38,959
with new existing specifications

419
00:15:36,399 --> 00:15:40,000
like for example the html or the dom

420
00:15:38,959 --> 00:15:41,758
specification

421
00:15:40,000 --> 00:15:44,000
the reason for that is well you need to

422
00:15:41,759 --> 00:15:46,480
call your new algorithms

423
00:15:44,000 --> 00:15:48,320
from somewhere right so usually there

424
00:15:46,480 --> 00:15:51,120
will be interactions

425
00:15:48,320 --> 00:15:52,079
with new specific with sorry with older

426
00:15:51,120 --> 00:15:56,320
specifications

427
00:15:52,079 --> 00:15:58,160
and um one very key component of a spec

428
00:15:56,320 --> 00:15:59,839
is that it shouldn't have any chrome

429
00:15:58,160 --> 00:16:01,439
specific jargon

430
00:15:59,839 --> 00:16:03,040
many specs are written by chrome

431
00:16:01,440 --> 00:16:06,320
engineers um

432
00:16:03,040 --> 00:16:09,519
but the idea is that when

433
00:16:06,320 --> 00:16:11,279
someone from say mozilla or from apple

434
00:16:09,519 --> 00:16:12,480
is reading this spec they should be able

435
00:16:11,279 --> 00:16:13,600
to understand what it's saying and they

436
00:16:12,480 --> 00:16:16,560
should be able to

437
00:16:13,600 --> 00:16:18,480
implement the steps of the algorithms so

438
00:16:16,560 --> 00:16:23,040
it should not include anything that is

439
00:16:18,480 --> 00:16:26,000
specific to chrome

440
00:16:23,040 --> 00:16:27,040
now once you have a draft spec we can

441
00:16:26,000 --> 00:16:28,959
start doing the

442
00:16:27,040 --> 00:16:30,480
internal launch review so in the case of

443
00:16:28,959 --> 00:16:33,199
performance apis

444
00:16:30,480 --> 00:16:35,120
our main concerns are privacy and

445
00:16:33,199 --> 00:16:38,399
security

446
00:16:35,120 --> 00:16:38,399
the spectre ring a bell

447
00:16:39,120 --> 00:16:44,000
no yes well there are tons of privacy or

448
00:16:42,480 --> 00:16:46,000
security concerns with

449
00:16:44,000 --> 00:16:47,519
exposing high resolution timers on the

450
00:16:46,000 --> 00:16:50,000
web

451
00:16:47,519 --> 00:16:50,959
so yes we need to do a very careful

452
00:16:50,000 --> 00:16:52,639
review of

453
00:16:50,959 --> 00:16:54,399
any new features that we're trying to

454
00:16:52,639 --> 00:16:57,199
introduce

455
00:16:54,399 --> 00:16:59,600
in addition to that of course the web

456
00:16:57,199 --> 00:17:02,160
performance working group or the

457
00:16:59,600 --> 00:17:03,440
tag can also surface some concerns and

458
00:17:02,160 --> 00:17:05,520
we have to make sure that

459
00:17:03,440 --> 00:17:08,720
all of those are addressed before we

460
00:17:05,520 --> 00:17:08,720
actually ship the api

461
00:17:09,119 --> 00:17:12,399
now an optional step in the process is

462
00:17:11,919 --> 00:17:15,120
to do

463
00:17:12,400 --> 00:17:16,240
an origin trial so i have a link there

464
00:17:15,119 --> 00:17:19,280
for

465
00:17:16,240 --> 00:17:22,480
what an origin trial means but

466
00:17:19,280 --> 00:17:25,678
the basics of it is

467
00:17:22,480 --> 00:17:29,919
it's a way of allowing experimentation

468
00:17:25,679 --> 00:17:33,360
before we actually ship the web feature

469
00:17:29,919 --> 00:17:35,679
like like for realsies so in this

470
00:17:33,360 --> 00:17:36,879
origin trial the idea is that browser

471
00:17:35,679 --> 00:17:39,360
engineers can get

472
00:17:36,880 --> 00:17:41,039
some early feedback which have i

473
00:17:39,360 --> 00:17:43,600
mentioned that we love feedback

474
00:17:41,039 --> 00:17:44,640
maybe i have yeah so we love early

475
00:17:43,600 --> 00:17:46,639
feedback and

476
00:17:44,640 --> 00:17:48,480
the reason we do is because after you

477
00:17:46,640 --> 00:17:50,720
ship a web feature

478
00:17:48,480 --> 00:17:51,600
it's very hard to make breaking changes

479
00:17:50,720 --> 00:17:54,720
to it right

480
00:17:51,600 --> 00:17:57,039
because once web developers stop

481
00:17:54,720 --> 00:17:58,640
start relying on that feature if you

482
00:17:57,039 --> 00:18:01,840
make some breaking changes you might

483
00:17:58,640 --> 00:18:02,640
break well real websites right and then

484
00:18:01,840 --> 00:18:05,120
people will

485
00:18:02,640 --> 00:18:06,320
be mad and they'll be mad at us we don't

486
00:18:05,120 --> 00:18:09,360
like that so

487
00:18:06,320 --> 00:18:10,240
the idea of this is that a web developer

488
00:18:09,360 --> 00:18:11,840
let's say

489
00:18:10,240 --> 00:18:14,320
they're interested in an origin trial

490
00:18:11,840 --> 00:18:16,720
for this fantastic new

491
00:18:14,320 --> 00:18:17,600
web feature they sign up and they get

492
00:18:16,720 --> 00:18:21,200
some tokens

493
00:18:17,600 --> 00:18:23,360
for their domains and some small portion

494
00:18:21,200 --> 00:18:26,080
of page loads

495
00:18:23,360 --> 00:18:27,199
can use those tokens and will actually

496
00:18:26,080 --> 00:18:30,399
be able to access

497
00:18:27,200 --> 00:18:32,559
the experimental web feature um

498
00:18:30,400 --> 00:18:33,679
why only a small portion again so that

499
00:18:32,559 --> 00:18:36,639
this

500
00:18:33,679 --> 00:18:39,200
website does not start relying on these

501
00:18:36,640 --> 00:18:42,320
apis to actually work properly

502
00:18:39,200 --> 00:18:44,960
um and

503
00:18:42,320 --> 00:18:46,960
once uh they start using this

504
00:18:44,960 --> 00:18:48,080
experimental api which is disabled by

505
00:18:46,960 --> 00:18:49,679
default but

506
00:18:48,080 --> 00:18:52,240
under controlled environment it can be

507
00:18:49,679 --> 00:18:55,280
used then we can get some

508
00:18:52,240 --> 00:18:58,880
um oh we can get

509
00:18:55,280 --> 00:18:59,678
some um feedback from it i forgot to say

510
00:18:58,880 --> 00:19:02,160
that

511
00:18:59,679 --> 00:19:03,600
in order to launch an origin trial you

512
00:19:02,160 --> 00:19:06,640
need to

513
00:19:03,600 --> 00:19:09,199
send an intent to experiment

514
00:19:06,640 --> 00:19:10,640
uh so again this is sent to blink dev

515
00:19:09,200 --> 00:19:14,160
and it requires

516
00:19:10,640 --> 00:19:16,160
approval from one api owner so you will

517
00:19:14,160 --> 00:19:19,440
ask what is an api owner

518
00:19:16,160 --> 00:19:22,080
it's a person from well

519
00:19:19,440 --> 00:19:22,880
it's a web expert not necessarily works

520
00:19:22,080 --> 00:19:25,199
at google

521
00:19:22,880 --> 00:19:26,480
because we do have an api owner who

522
00:19:25,200 --> 00:19:28,320
doesn't work at google

523
00:19:26,480 --> 00:19:29,520
but it's a web expert that is very

524
00:19:28,320 --> 00:19:32,240
familiar with blink

525
00:19:29,520 --> 00:19:33,120
and with link's mission and what we are

526
00:19:32,240 --> 00:19:36,080
trying to achieve

527
00:19:33,120 --> 00:19:36,639
and they can assess the interoperability

528
00:19:36,080 --> 00:19:38,960
risks

529
00:19:36,640 --> 00:19:39,760
and the benefits so there's always

530
00:19:38,960 --> 00:19:43,280
trade-offs

531
00:19:39,760 --> 00:19:45,039
associated with this api and

532
00:19:43,280 --> 00:19:46,559
once you get an approval from one of

533
00:19:45,039 --> 00:19:50,000
these persons then yeah

534
00:19:46,559 --> 00:19:51,360
you launch your origin trial and you can

535
00:19:50,000 --> 00:19:53,440
get some feedback

536
00:19:51,360 --> 00:19:54,719
so in this case i'm highlighting

537
00:19:53,440 --> 00:19:58,960
feedback from peter

538
00:19:54,720 --> 00:20:01,200
hi peter that is basically saying

539
00:19:58,960 --> 00:20:03,360
the api looks promising at least for

540
00:20:01,200 --> 00:20:06,880
wikimedia web pages it looks

541
00:20:03,360 --> 00:20:10,158
like it's actually sorry accurately

542
00:20:06,880 --> 00:20:13,280
capturing the image render time of

543
00:20:10,159 --> 00:20:15,120
the critical images from the pages that

544
00:20:13,280 --> 00:20:18,480
were tested

545
00:20:15,120 --> 00:20:20,719
so in general we get some feedback from

546
00:20:18,480 --> 00:20:23,280
origin trials but

547
00:20:20,720 --> 00:20:24,000
well you can understand that most web

548
00:20:23,280 --> 00:20:25,520
developers

549
00:20:24,000 --> 00:20:27,520
they want to use features that are

550
00:20:25,520 --> 00:20:27,918
actually already shipped not features

551
00:20:27,520 --> 00:20:31,679
that

552
00:20:27,919 --> 00:20:32,720
maybe ship in the future are they going

553
00:20:31,679 --> 00:20:35,760
to ship i don't know

554
00:20:32,720 --> 00:20:37,440
so we we don't get a ton of feedback

555
00:20:35,760 --> 00:20:40,080
from origin trials especially for

556
00:20:37,440 --> 00:20:40,799
performance apis but if you're

557
00:20:40,080 --> 00:20:43,039
interested

558
00:20:40,799 --> 00:20:46,240
in that then let me know because i'd

559
00:20:43,039 --> 00:20:46,240
love more early feedback

560
00:20:46,840 --> 00:20:50,639
now we need to polish the proposal

561
00:20:49,520 --> 00:20:53,679
before we actually

562
00:20:50,640 --> 00:20:56,320
ship the feature to users

563
00:20:53,679 --> 00:20:58,240
and this involves many steps for example

564
00:20:56,320 --> 00:20:59,120
we need to know what other browser

565
00:20:58,240 --> 00:21:02,240
vendors think

566
00:20:59,120 --> 00:21:04,158
about the the new api so that's

567
00:21:02,240 --> 00:21:05,679
basically getting signals from

568
00:21:04,159 --> 00:21:07,919
browser vendors but we also need to

569
00:21:05,679 --> 00:21:10,720
think what web developers think

570
00:21:07,919 --> 00:21:11,679
do they actually think it's useful or

571
00:21:10,720 --> 00:21:13,760
are we just

572
00:21:11,679 --> 00:21:15,200
working for no reason because if it's

573
00:21:13,760 --> 00:21:17,440
not going to be used later then

574
00:21:15,200 --> 00:21:19,120
what's the point then we also need to

575
00:21:17,440 --> 00:21:22,799
polish the

576
00:21:19,120 --> 00:21:24,799
draft spec which is hosted in wicg

577
00:21:22,799 --> 00:21:25,918
and we need to make sure that there are

578
00:21:24,799 --> 00:21:27,600
no

579
00:21:25,919 --> 00:21:30,400
major bugs in the chromium

580
00:21:27,600 --> 00:21:32,320
implementation which is behind a flag

581
00:21:30,400 --> 00:21:35,039
and we also need to address feedback

582
00:21:32,320 --> 00:21:37,360
from the tag review

583
00:21:35,039 --> 00:21:38,320
so these are examples of polishing the

584
00:21:37,360 --> 00:21:40,879
spec these are

585
00:21:38,320 --> 00:21:42,000
these are pull requests into the element

586
00:21:40,880 --> 00:21:45,120
timing

587
00:21:42,000 --> 00:21:45,840
github repop and then these are examples

588
00:21:45,120 --> 00:21:47,360
of

589
00:21:45,840 --> 00:21:49,439
polishing the implementation because

590
00:21:47,360 --> 00:21:53,439
these are chromium code changes

591
00:21:49,440 --> 00:21:55,840
related to the element timing api

592
00:21:53,440 --> 00:21:57,360
now let's say we are all done and our

593
00:21:55,840 --> 00:22:00,158
api is like

594
00:21:57,360 --> 00:22:01,120
super perfect right because code is

595
00:22:00,159 --> 00:22:02,799
always perfect

596
00:22:01,120 --> 00:22:04,639
now we're ready to shape so what's the

597
00:22:02,799 --> 00:22:07,760
step we do we we send an

598
00:22:04,640 --> 00:22:10,080
intent to ship to blink dev

599
00:22:07,760 --> 00:22:11,200
this is again signaling the world

600
00:22:10,080 --> 00:22:13,520
including

601
00:22:11,200 --> 00:22:15,440
other browser vendors that we are

602
00:22:13,520 --> 00:22:18,158
planning to actually now release this

603
00:22:15,440 --> 00:22:21,919
feature to users like for reals is now

604
00:22:18,159 --> 00:22:25,600
not origin trial like enabled by default

605
00:22:21,919 --> 00:22:28,640
so this is obviously a more

606
00:22:25,600 --> 00:22:31,439
rigorous step because it is actually now

607
00:22:28,640 --> 00:22:32,559
the real deal so it requires three

608
00:22:31,440 --> 00:22:34,799
approvals from

609
00:22:32,559 --> 00:22:36,480
these special people that are the api

610
00:22:34,799 --> 00:22:40,720
owners

611
00:22:36,480 --> 00:22:43,200
and once you get that approval then we

612
00:22:40,720 --> 00:22:44,080
basically ensure that chrome status is

613
00:22:43,200 --> 00:22:45,679
up to date

614
00:22:44,080 --> 00:22:48,320
because i don't know does anyone use

615
00:22:45,679 --> 00:22:50,159
chrome status at all

616
00:22:48,320 --> 00:22:52,000
so yeah some people here raise their

617
00:22:50,159 --> 00:22:54,880
hands some web developers use

618
00:22:52,000 --> 00:22:56,000
chrome status and our devrel also uses

619
00:22:54,880 --> 00:22:58,640
chrome status

620
00:22:56,000 --> 00:22:59,760
so it would be nice if it's updated

621
00:22:58,640 --> 00:23:02,799
right otherwise

622
00:22:59,760 --> 00:23:04,879
who is going to promote the new web

623
00:23:02,799 --> 00:23:08,480
platform apis well no one

624
00:23:04,880 --> 00:23:11,520
um and then we can flip the

625
00:23:08,480 --> 00:23:15,039
implementation flag so that it is

626
00:23:11,520 --> 00:23:17,440
uh launched by default

627
00:23:15,039 --> 00:23:19,039
even after shipping the work is not done

628
00:23:17,440 --> 00:23:20,640
there are several things that we need to

629
00:23:19,039 --> 00:23:23,520
continue doing

630
00:23:20,640 --> 00:23:25,520
for example the most obvious one is

631
00:23:23,520 --> 00:23:26,480
basically remove all the experimental

632
00:23:25,520 --> 00:23:29,679
flags because

633
00:23:26,480 --> 00:23:31,760
once they are enabled by default well

634
00:23:29,679 --> 00:23:34,720
maybe after a while to make sure like

635
00:23:31,760 --> 00:23:36,158
oh no you need to unship this i removed

636
00:23:34,720 --> 00:23:37,679
all the flags if you have still have the

637
00:23:36,159 --> 00:23:40,799
flag it's very easy to

638
00:23:37,679 --> 00:23:42,559
unship a fish feature but once you're

639
00:23:40,799 --> 00:23:45,918
sure you're not going to unship

640
00:23:42,559 --> 00:23:47,840
then we remove the experimental flags

641
00:23:45,919 --> 00:23:49,360
then we also want to continue the

642
00:23:47,840 --> 00:23:51,120
conversations in the web

643
00:23:49,360 --> 00:23:52,799
of working group because we're not

644
00:23:51,120 --> 00:23:55,120
shipping a chrome api

645
00:23:52,799 --> 00:23:57,120
we're shipping a web platform feature so

646
00:23:55,120 --> 00:24:00,239
what do we want we want everyone to

647
00:23:57,120 --> 00:24:03,678
implement and ship the new feature right

648
00:24:00,240 --> 00:24:05,919
and we address issues that are surfaced

649
00:24:03,679 --> 00:24:09,760
on the github repository so that's

650
00:24:05,919 --> 00:24:13,120
one example there in addition to that

651
00:24:09,760 --> 00:24:16,158
we monitor usage and crashes you can't

652
00:24:13,120 --> 00:24:18,158
tell from the screenshot if that's usage

653
00:24:16,159 --> 00:24:19,919
or crashes but obviously it's going

654
00:24:18,159 --> 00:24:22,400
a little upward so i'm gonna say it's

655
00:24:19,919 --> 00:24:25,760
usage right

656
00:24:22,400 --> 00:24:28,480
and we also remove features that do not

657
00:24:25,760 --> 00:24:32,879
have multi-implementer support

658
00:24:28,480 --> 00:24:35,440
and have very little usage so uh

659
00:24:32,880 --> 00:24:37,520
that that is to say that even after we

660
00:24:35,440 --> 00:24:40,480
ship our platform api

661
00:24:37,520 --> 00:24:42,400
it we may actually change our minds in

662
00:24:40,480 --> 00:24:44,240
the future if we see that

663
00:24:42,400 --> 00:24:46,320
it was actually a failure because

664
00:24:44,240 --> 00:24:46,960
sometimes like everyone makes mistakes

665
00:24:46,320 --> 00:24:50,480
right

666
00:24:46,960 --> 00:24:52,880
even us so yeah so

667
00:24:50,480 --> 00:24:54,640
a very simple process here's a summary i

668
00:24:52,880 --> 00:24:58,159
don't know if you can see very well

669
00:24:54,640 --> 00:24:59,520
but i'll try to be concise about

670
00:24:58,159 --> 00:25:03,840
summarizing it

671
00:24:59,520 --> 00:25:05,918
the idea is you have an explainer then

672
00:25:03,840 --> 00:25:07,439
the explainer again the idea is to

673
00:25:05,919 --> 00:25:09,520
present the problem

674
00:25:07,440 --> 00:25:11,200
after you have presented the problem in

675
00:25:09,520 --> 00:25:13,039
the explainer then you can start

676
00:25:11,200 --> 00:25:16,159
socializing your idea

677
00:25:13,039 --> 00:25:20,240
to w3c the weapons working group

678
00:25:16,159 --> 00:25:24,080
or to wicg then

679
00:25:20,240 --> 00:25:26,080
once you have socialized this idea maybe

680
00:25:24,080 --> 00:25:27,760
well we don't we don't partner a lot

681
00:25:26,080 --> 00:25:30,720
with people to develop

682
00:25:27,760 --> 00:25:31,919
the the original explainers but it would

683
00:25:30,720 --> 00:25:35,279
be great to partner with

684
00:25:31,919 --> 00:25:36,960
people right like share the work but

685
00:25:35,279 --> 00:25:38,880
perhaps you partner with people that are

686
00:25:36,960 --> 00:25:42,240
really interested in the proposal

687
00:25:38,880 --> 00:25:44,000
um and you write a more detailed

688
00:25:42,240 --> 00:25:46,240
explainer together and you move it to

689
00:25:44,000 --> 00:25:48,480
wicg

690
00:25:46,240 --> 00:25:50,559
in addition to that we can start

691
00:25:48,480 --> 00:25:52,799
requesting a tag review

692
00:25:50,559 --> 00:25:54,000
we can send an intent to prototype

693
00:25:52,799 --> 00:25:56,559
saying we're

694
00:25:54,000 --> 00:25:57,440
ready because we have this concrete

695
00:25:56,559 --> 00:25:59,279
proposal of

696
00:25:57,440 --> 00:26:01,120
how to solve this problem and we're

697
00:25:59,279 --> 00:26:03,360
going to start implementing behind the

698
00:26:01,120 --> 00:26:04,799
flag

699
00:26:03,360 --> 00:26:07,600
after you've done all those steps then

700
00:26:04,799 --> 00:26:10,400
you can implement behind a flag

701
00:26:07,600 --> 00:26:10,959
and while you implement also very

702
00:26:10,400 --> 00:26:13,760
important

703
00:26:10,960 --> 00:26:15,600
write web platform tests so that not

704
00:26:13,760 --> 00:26:17,200
only chrome knows how to implement the

705
00:26:15,600 --> 00:26:19,840
api

706
00:26:17,200 --> 00:26:22,480
in addition to that write a draft spec

707
00:26:19,840 --> 00:26:25,360
for the same reason

708
00:26:22,480 --> 00:26:27,279
and then do a launch review that's more

709
00:26:25,360 --> 00:26:30,719
internal but it helps surface

710
00:26:27,279 --> 00:26:32,320
potential problems after all of that is

711
00:26:30,720 --> 00:26:33,919
more or less done you can start an

712
00:26:32,320 --> 00:26:36,840
origin trial

713
00:26:33,919 --> 00:26:38,080
and perhaps get some feedback from it

714
00:26:36,840 --> 00:26:40,559
okay

715
00:26:38,080 --> 00:26:41,199
in addition to that well keep polishing

716
00:26:40,559 --> 00:26:44,639
your

717
00:26:41,200 --> 00:26:44,640
implementations back

718
00:26:45,039 --> 00:26:52,320
tests as well and whatnot

719
00:26:48,559 --> 00:26:55,200
finally once your api is in good shape

720
00:26:52,320 --> 00:26:56,480
and once developers are like when are

721
00:26:55,200 --> 00:26:59,600
you shipping

722
00:26:56,480 --> 00:27:00,880
give it to me now then you can send an

723
00:26:59,600 --> 00:27:03,840
intent to ship

724
00:27:00,880 --> 00:27:05,120
because you have concrete evidence that

725
00:27:03,840 --> 00:27:06,959
this is something that

726
00:27:05,120 --> 00:27:08,559
is going to be useful as a web platform

727
00:27:06,960 --> 00:27:11,919
feature and

728
00:27:08,559 --> 00:27:13,840
perhaps you have already

729
00:27:11,919 --> 00:27:16,080
concrete signals from other browsers

730
00:27:13,840 --> 00:27:18,158
saying yeah we think this is interesting

731
00:27:16,080 --> 00:27:20,399
sometimes they may disagree but that

732
00:27:18,159 --> 00:27:23,760
doesn't block us from shipping

733
00:27:20,399 --> 00:27:24,639
um and then once you get approval on

734
00:27:23,760 --> 00:27:26,960
that

735
00:27:24,640 --> 00:27:28,399
you can now actually release the feature

736
00:27:26,960 --> 00:27:31,679
to all users

737
00:27:28,399 --> 00:27:32,080
and like i said the work there is not

738
00:27:31,679 --> 00:27:34,960
done

739
00:27:32,080 --> 00:27:36,559
there are some steps even after you you

740
00:27:34,960 --> 00:27:38,000
release the feature which are cleaning

741
00:27:36,559 --> 00:27:39,840
up the code

742
00:27:38,000 --> 00:27:41,360
encouraging other browser vendors to

743
00:27:39,840 --> 00:27:43,039
actually

744
00:27:41,360 --> 00:27:45,439
ship the feature if they haven't done so

745
00:27:43,039 --> 00:27:46,720
already we're not always the first ones

746
00:27:45,440 --> 00:27:50,080
to ship a feature

747
00:27:46,720 --> 00:27:53,440
by the way but almost always

748
00:27:50,080 --> 00:27:55,199
and we then monitor usage right

749
00:27:53,440 --> 00:27:56,720
make sure that it's actually being used

750
00:27:55,200 --> 00:27:58,080
by web developers

751
00:27:56,720 --> 00:28:00,559
because if it's not then what's the

752
00:27:58,080 --> 00:28:05,120
point right

753
00:28:00,559 --> 00:28:07,918
and that is the end of my talk oh

754
00:28:05,120 --> 00:28:07,918
something's happening

755
00:28:14,880 --> 00:28:18,640
that's like the signal you're done

756
00:28:16,630 --> 00:28:31,840
[Applause]

757
00:28:18,640 --> 00:28:31,840
i think is it

758
00:28:42,840 --> 00:28:45,840
uh

759
00:29:00,799 --> 00:29:04,158
i'm not sure it's talking to you

760
00:29:10,559 --> 00:29:13,840
okay it's broken

761
00:29:23,840 --> 00:29:27,840
so how many quarters

762
00:29:29,039 --> 00:29:36,158
how many quarters is my manager

763
00:29:33,760 --> 00:29:38,000
willing to let me work on something like

764
00:29:36,159 --> 00:29:40,640
this um

765
00:29:38,000 --> 00:29:43,039
i would say i'm more of a multitask kind

766
00:29:40,640 --> 00:29:43,039
of guy

767
00:29:43,919 --> 00:29:48,159
no like web features can take a very

768
00:29:45,679 --> 00:29:51,440
long time um

769
00:29:48,159 --> 00:29:53,360
like you saw from the when i showed the

770
00:29:51,440 --> 00:29:54,000
multiple iterations that's multiple

771
00:29:53,360 --> 00:29:57,199
people

772
00:29:54,000 --> 00:29:59,039
writing similar ideas until eventually

773
00:29:57,200 --> 00:30:02,000
someone actually

774
00:29:59,039 --> 00:30:03,840
pushes it forward and ships it uh so it

775
00:30:02,000 --> 00:30:06,240
can take

776
00:30:03,840 --> 00:30:08,480
a very long time for uh from the time

777
00:30:06,240 --> 00:30:11,600
the initial explainer is written

778
00:30:08,480 --> 00:30:14,799
to the time it actually gets shipped

779
00:30:11,600 --> 00:30:17,840
for actual like

780
00:30:14,799 --> 00:30:23,840
intensive working on it maybe

781
00:30:17,840 --> 00:30:23,840
a quarter could be reasonable

782
00:30:42,240 --> 00:30:45,440
uh good question

783
00:30:48,799 --> 00:30:54,158
why are new apis always in chrome or

784
00:31:02,840 --> 00:31:05,840
like

785
00:31:06,480 --> 00:31:09,919
yeah that's a good question why do other

786
00:31:08,880 --> 00:31:13,200
browser vendors

787
00:31:09,919 --> 00:31:18,960
not implement many of these apis

788
00:31:13,200 --> 00:31:20,480
um well

789
00:31:18,960 --> 00:31:23,279
right well it depends how you define

790
00:31:20,480 --> 00:31:26,399
standardized but the

791
00:31:23,279 --> 00:31:30,840
the main answer is resources

792
00:31:26,399 --> 00:31:34,320
so chrome has more resources

793
00:31:30,840 --> 00:31:37,439
than other browser vendors

794
00:31:34,320 --> 00:31:39,918
both mozilla and apple

795
00:31:37,440 --> 00:31:41,760
at least for the web platform right so

796
00:31:39,919 --> 00:31:44,000
they choose to prioritize

797
00:31:41,760 --> 00:31:45,679
on some things and not others in

798
00:31:44,000 --> 00:31:48,000
particular performance perhaps is

799
00:31:45,679 --> 00:31:51,039
something they don't prioritize as much

800
00:31:48,000 --> 00:31:53,200
as i'd like to right because

801
00:31:51,039 --> 00:31:54,320
well i work on performance and i'd love

802
00:31:53,200 --> 00:31:56,640
to see them ship

803
00:31:54,320 --> 00:31:57,439
the apis shortly after we do that would

804
00:31:56,640 --> 00:31:59,200
be great

805
00:31:57,440 --> 00:32:00,480
but yeah that's not the case because of

806
00:31:59,200 --> 00:32:03,600
prioritization and

807
00:32:00,480 --> 00:32:06,080
the resources they have um but

808
00:32:03,600 --> 00:32:06,959
one way to help them prioritize is by

809
00:32:06,080 --> 00:32:08,879
shouting at them

810
00:32:06,960 --> 00:32:10,159
when they don't have the apis

811
00:32:08,880 --> 00:32:13,440
implemented

812
00:32:10,159 --> 00:32:17,039
i i hear that that works wonders

813
00:32:13,440 --> 00:32:29,840
but yeah the reason is that resources

814
00:32:17,039 --> 00:32:29,840
and the prioritization that they have

815
00:32:32,559 --> 00:32:37,519
do we do any snapshots like from real

816
00:32:35,519 --> 00:32:40,640
websites

817
00:32:37,519 --> 00:32:43,760
yeah yeah we do we do have

818
00:32:40,640 --> 00:32:45,120
a bunch of lab tests and testing in the

819
00:32:43,760 --> 00:32:48,320
lab is

820
00:32:45,120 --> 00:32:52,479
really hard because

821
00:32:48,320 --> 00:32:54,320
unfortunately the web is not

822
00:32:52,480 --> 00:32:55,679
very sequential right because so many

823
00:32:54,320 --> 00:32:58,639
resources arriving

824
00:32:55,679 --> 00:33:00,720
at different times there can be multiple

825
00:32:58,640 --> 00:33:04,000
race conditions and

826
00:33:00,720 --> 00:33:05,679
the truth is loading the website twice

827
00:33:04,000 --> 00:33:08,240
won't necessarily give you the same

828
00:33:05,679 --> 00:33:08,240
waterfall

829
00:33:09,279 --> 00:33:13,840
uh we don't we don't use uh

830
00:33:13,919 --> 00:33:18,000
web page replay i think um but we do

831
00:33:17,279 --> 00:33:21,600
have

832
00:33:18,000 --> 00:33:25,279
our own lab setup where we can gather

833
00:33:21,600 --> 00:33:26,639
traces from the lab loading and then we

834
00:33:25,279 --> 00:33:29,440
analyze those traces

835
00:33:26,640 --> 00:33:30,880
and that helps us catch regressions in

836
00:33:29,440 --> 00:33:34,640
our own

837
00:33:30,880 --> 00:33:38,159
chromium code so when things get like

838
00:33:34,640 --> 00:33:39,919
obviously much slower we are able to use

839
00:33:38,159 --> 00:33:40,799
the lab to detect that before it

840
00:33:39,919 --> 00:33:43,679
actually

841
00:33:40,799 --> 00:33:45,360
reaches real users which is one of the

842
00:33:43,679 --> 00:33:48,240
main benefits of the lab as well as

843
00:33:45,360 --> 00:33:49,600
less noise of course so so yeah we do

844
00:33:48,240 --> 00:33:51,760
use that uh

845
00:33:49,600 --> 00:33:53,199
i'm not the person most familiar with

846
00:33:51,760 --> 00:33:55,600
that but if you want

847
00:33:53,200 --> 00:33:58,799
some tips i'm happy to connect you with

848
00:33:55,600 --> 00:33:58,799
people that know more yeah

849
00:34:04,840 --> 00:34:07,840
sorry

850
00:34:14,090 --> 00:34:17,249
[Music]

851
00:34:17,280 --> 00:34:23,599
oh yes uh the idea is that

852
00:34:20,560 --> 00:34:26,879
we want to make features

853
00:34:23,599 --> 00:34:30,720
easy to use not hard to use

854
00:34:26,879 --> 00:34:32,000
uh so yeah so yeah i understand what you

855
00:34:30,719 --> 00:34:35,040
mean before

856
00:34:32,000 --> 00:34:38,320
apis had like the prefix but then

857
00:34:35,040 --> 00:34:39,679
basically the problem is not

858
00:34:38,320 --> 00:34:42,159
web developers don't test for our

859
00:34:39,679 --> 00:34:43,839
browsers so developers that are

860
00:34:42,159 --> 00:34:46,560
that have less market would just copy

861
00:34:43,839 --> 00:34:48,320
the prefix and that just looks bad right

862
00:34:46,560 --> 00:34:50,078
instead of putting their own prefix

863
00:34:48,320 --> 00:34:52,240
because no nobody's gonna use it then

864
00:34:50,079 --> 00:34:55,919
they would just copy the

865
00:34:52,239 --> 00:34:58,078
pr the predominant prefix like webkit uh

866
00:34:55,918 --> 00:34:59,279
underscore something and why would

867
00:34:58,079 --> 00:35:00,800
firefox want to

868
00:34:59,280 --> 00:35:03,119
ship something that's like webkit

869
00:35:00,800 --> 00:35:05,520
underscore something right it's

870
00:35:03,119 --> 00:35:06,960
the idea is that these apis are for the

871
00:35:05,520 --> 00:35:16,880
web platform not for

872
00:35:06,960 --> 00:35:18,960
webkit or for blink specifically

873
00:35:16,880 --> 00:35:18,960
you

