1
00:00:05,200 --> 00:00:09,120
so uh

2
00:00:05,839 --> 00:00:11,440
hi my name is uh chris nova uh second

3
00:00:09,120 --> 00:00:14,079
time here at fosdem presenting

4
00:00:11,440 --> 00:00:15,200
uh i gave a talk last year show hands

5
00:00:14,080 --> 00:00:17,840
who have seen it

6
00:00:15,200 --> 00:00:20,160
yep it was a good one uh we explored

7
00:00:17,840 --> 00:00:22,160
well y'all ran the track so thank you

8
00:00:20,160 --> 00:00:24,240
uh but we explored some anti-patterns

9
00:00:22,160 --> 00:00:26,400
and some exciting things in kubernetes

10
00:00:24,240 --> 00:00:27,840
uh since then kubernetes has grown a lot

11
00:00:26,400 --> 00:00:29,759
i've grown a lot and

12
00:00:27,840 --> 00:00:31,679
the entire cloud native ecosystem has

13
00:00:29,760 --> 00:00:33,520
also grown tremendously

14
00:00:31,679 --> 00:00:34,879
so we're going to be looking at some

15
00:00:33,520 --> 00:00:36,480
more concepts tonight

16
00:00:34,880 --> 00:00:38,800
something that i've been thinking about

17
00:00:36,480 --> 00:00:39,519
and studying for about the past six

18
00:00:38,800 --> 00:00:41,279
months

19
00:00:39,520 --> 00:00:43,200
and we're going to look at some cloud

20
00:00:41,280 --> 00:00:45,520
native computing foundation

21
00:00:43,200 --> 00:00:47,200
open source tools uh including

22
00:00:45,520 --> 00:00:48,960
kubernetes including

23
00:00:47,200 --> 00:00:50,879
uh the open policy agent and i'm going

24
00:00:48,960 --> 00:00:54,239
to try to be diligent about calling it

25
00:00:50,879 --> 00:00:55,839
the verbose name open policy agent

26
00:00:54,239 --> 00:00:58,480
but you might hear me refer to it as

27
00:00:55,840 --> 00:00:59,680
oppa or opa as well

28
00:00:58,480 --> 00:01:01,519
and some other exciting tools in the

29
00:00:59,680 --> 00:01:04,959
ecosystem including the

30
00:01:01,520 --> 00:01:06,560
linux kernel so to start off shout out

31
00:01:04,959 --> 00:01:08,000
to my friends over in this section who

32
00:01:06,560 --> 00:01:09,680
gave me some delicious cookies and

33
00:01:08,000 --> 00:01:12,000
chocolate before i came on stage

34
00:01:09,680 --> 00:01:12,799
and also we have the two falco

35
00:01:12,000 --> 00:01:14,479
maintainers

36
00:01:12,799 --> 00:01:16,000
here in the front that have some falco

37
00:01:14,479 --> 00:01:17,759
stickers and francesc

38
00:01:16,000 --> 00:01:19,200
and matcha have some over there so

39
00:01:17,759 --> 00:01:20,000
throughout the talk if you see stickers

40
00:01:19,200 --> 00:01:21,520
come your way

41
00:01:20,000 --> 00:01:22,960
uh feel free to grab one and stick it on

42
00:01:21,520 --> 00:01:23,520
your laptop and you're gonna be learning

43
00:01:22,960 --> 00:01:26,880
more about

44
00:01:23,520 --> 00:01:29,520
falco and these other projects tonight

45
00:01:26,880 --> 00:01:30,240
so uh the first thing i'm gonna do is i

46
00:01:29,520 --> 00:01:34,158
am going to

47
00:01:30,240 --> 00:01:37,439
open up my slides

48
00:01:34,159 --> 00:01:40,640
okay so this is our first

49
00:01:37,439 --> 00:01:42,798
slide here so uh yeah it's called fixing

50
00:01:40,640 --> 00:01:45,439
the kubernetes which i think

51
00:01:42,799 --> 00:01:48,399
is a funny way of basically alluding to

52
00:01:45,439 --> 00:01:49,279
kubernetes is complex and it's complex

53
00:01:48,399 --> 00:01:50,880
for a good reason

54
00:01:49,280 --> 00:01:54,000
and because of this complexity it

55
00:01:50,880 --> 00:01:55,360
actually is a very powerful tool

56
00:01:54,000 --> 00:01:56,960
which is why i've been working on it and

57
00:01:55,360 --> 00:01:58,479
that's why i love it so much and why

58
00:01:56,960 --> 00:02:01,119
i've been so diligent about

59
00:01:58,479 --> 00:02:02,240
being involved with it and using it so

60
00:02:01,119 --> 00:02:04,479
in a weird way

61
00:02:02,240 --> 00:02:06,000
this complexity can potentially scare

62
00:02:04,479 --> 00:02:07,200
folks or cause problems

63
00:02:06,000 --> 00:02:09,199
but we're going to be looking at

64
00:02:07,200 --> 00:02:11,520
concretely some ways how

65
00:02:09,199 --> 00:02:12,879
uh the complexity particularly around

66
00:02:11,520 --> 00:02:14,480
security

67
00:02:12,879 --> 00:02:16,640
is something that a lot of people that

68
00:02:14,480 --> 00:02:19,519
i've i've noticed uh may not be

69
00:02:16,640 --> 00:02:21,119
necessarily an expert on uh i don't even

70
00:02:19,520 --> 00:02:22,879
know if i would call myself an expert

71
00:02:21,120 --> 00:02:24,560
but i've been studying it for

72
00:02:22,879 --> 00:02:26,160
for quite some time and i'm going to

73
00:02:24,560 --> 00:02:29,200
share with you today everything

74
00:02:26,160 --> 00:02:29,599
that i've found um so yeah i wrote a

75
00:02:29,200 --> 00:02:31,280
book

76
00:02:29,599 --> 00:02:33,040
called cloud native infrastructure which

77
00:02:31,280 --> 00:02:33,760
is how i got into this whole kubernetes

78
00:02:33,040 --> 00:02:36,319
thing

79
00:02:33,760 --> 00:02:38,160
and one of the things that i noticed in

80
00:02:36,319 --> 00:02:39,040
kubernetes that hasn't really been

81
00:02:38,160 --> 00:02:41,760
solved

82
00:02:39,040 --> 00:02:42,400
is this concept of security and like

83
00:02:41,760 --> 00:02:44,959
what does

84
00:02:42,400 --> 00:02:46,640
security mean to me as a as an

85
00:02:44,959 --> 00:02:47,360
infrastructure engineer it was basically

86
00:02:46,640 --> 00:02:49,040
like

87
00:02:47,360 --> 00:02:51,280
i don't want anything happening in my

88
00:02:49,040 --> 00:02:52,079
system that i feel like should not be

89
00:02:51,280 --> 00:02:53,680
happening or

90
00:02:52,080 --> 00:02:55,360
that i don't know about or have

91
00:02:53,680 --> 00:02:57,120
visibility into

92
00:02:55,360 --> 00:02:58,400
and i would like a convenient way to

93
00:02:57,120 --> 00:03:01,040
control that layer

94
00:02:58,400 --> 00:03:02,720
of security so recently i've become a

95
00:03:01,040 --> 00:03:03,760
maintainer of an open source project

96
00:03:02,720 --> 00:03:05,680
called falco

97
00:03:03,760 --> 00:03:06,879
and i've been maintainers of other tools

98
00:03:05,680 --> 00:03:08,480
and kubernetes and

99
00:03:06,879 --> 00:03:10,079
other projects i've contributed across

100
00:03:08,480 --> 00:03:11,040
the ecosystem for the better half of my

101
00:03:10,080 --> 00:03:12,879
adult life

102
00:03:11,040 --> 00:03:15,440
and uh all of this kind of alludes to

103
00:03:12,879 --> 00:03:16,959
this idea that i fancy myself a hacker

104
00:03:15,440 --> 00:03:18,480
in the sense that i see something i

105
00:03:16,959 --> 00:03:19,920
don't understand and i sit there and

106
00:03:18,480 --> 00:03:23,280
hack away at it until i

107
00:03:19,920 --> 00:03:26,159
i finally understand it so the two words

108
00:03:23,280 --> 00:03:28,799
i want everyone to think about today the

109
00:03:26,159 --> 00:03:31,840
first word is prevention

110
00:03:28,799 --> 00:03:33,280
and the second word is detection and

111
00:03:31,840 --> 00:03:35,120
we're going to really explore these two

112
00:03:33,280 --> 00:03:36,000
words and what they mean from a security

113
00:03:35,120 --> 00:03:37,280
context

114
00:03:36,000 --> 00:03:39,120
and we're going to actually go through

115
00:03:37,280 --> 00:03:42,000
and do a live demo where

116
00:03:39,120 --> 00:03:43,360
we take a kubernetes cluster set up with

117
00:03:42,000 --> 00:03:45,920
kubernetes cops

118
00:03:43,360 --> 00:03:47,519
uh with the default configuration we're

119
00:03:45,920 --> 00:03:48,238
going to exploit the prevention

120
00:03:47,519 --> 00:03:49,519
techniques

121
00:03:48,239 --> 00:03:51,519
in other words we're going to hack into

122
00:03:49,519 --> 00:03:52,720
the kubernetes cluster live on stage

123
00:03:51,519 --> 00:03:54,720
and then we're going to look at how

124
00:03:52,720 --> 00:03:55,519
falco was able to detect this malicious

125
00:03:54,720 --> 00:03:57,680
behavior

126
00:03:55,519 --> 00:04:00,000
and we're going to look at how we can

127
00:03:57,680 --> 00:04:02,159
use what's coming out of falco to drafts

128
00:04:00,000 --> 00:04:03,200
policy using preventative tactics

129
00:04:02,159 --> 00:04:05,840
downstream

130
00:04:03,200 --> 00:04:07,280
to prevent this from happening again

131
00:04:05,840 --> 00:04:09,040
hopefully when i get done doing this

132
00:04:07,280 --> 00:04:11,280
you'll walk away from here saying

133
00:04:09,040 --> 00:04:12,720
as an infrastructure engineer as a

134
00:04:11,280 --> 00:04:15,360
software engineer

135
00:04:12,720 --> 00:04:17,358
as a general kubernetes user i would

136
00:04:15,360 --> 00:04:18,720
fancy a cluster to have both of these

137
00:04:17,358 --> 00:04:21,440
for a complementary

138
00:04:18,720 --> 00:04:22,479
holistic approach to securing and

139
00:04:21,440 --> 00:04:26,000
understanding

140
00:04:22,479 --> 00:04:27,840
my kubernetes system

141
00:04:26,000 --> 00:04:29,199
okay so everybody this is the time where

142
00:04:27,840 --> 00:04:30,960
you take your phone out

143
00:04:29,199 --> 00:04:32,960
everything that i'm about to do

144
00:04:30,960 --> 00:04:34,159
including these slides including links

145
00:04:32,960 --> 00:04:35,919
that i'm going to reference

146
00:04:34,160 --> 00:04:38,240
including talks that i think you should

147
00:04:35,919 --> 00:04:40,000
go see uh including links to

148
00:04:38,240 --> 00:04:41,440
my github my twitter everybody's getting

149
00:04:40,000 --> 00:04:43,280
their phones out now i'll get mine out

150
00:04:41,440 --> 00:04:46,880
just so that you don't feel lonely

151
00:04:43,280 --> 00:04:50,320
and um uh everything is there so

152
00:04:46,880 --> 00:04:52,479
if you go to github.com chris nova

153
00:04:50,320 --> 00:04:54,000
slash public speaking i'm going to do

154
00:04:52,479 --> 00:04:56,240
some remote command injection here by

155
00:04:54,000 --> 00:04:58,240
hitting the spacebar

156
00:04:56,240 --> 00:05:00,080
um and of course my internet's not

157
00:04:58,240 --> 00:05:02,000
working

158
00:05:00,080 --> 00:05:04,240
hold on no it's okay we're gonna need it

159
00:05:02,000 --> 00:05:06,080
i uh i don't use the foster wi-fi so

160
00:05:04,240 --> 00:05:08,000
give me like two seconds

161
00:05:06,080 --> 00:05:10,320
but anyway if you go to this website uh

162
00:05:08,000 --> 00:05:14,240
at the very top i changed uh

163
00:05:10,320 --> 00:05:18,000
there it goes um i changed the

164
00:05:14,240 --> 00:05:20,160
the title here to go to the actual oh

165
00:05:18,000 --> 00:05:21,199
there's my iphone uh the link in the

166
00:05:20,160 --> 00:05:22,880
repo

167
00:05:21,199 --> 00:05:24,400
that has everything that i have checked

168
00:05:22,880 --> 00:05:26,240
out locally so if you want to go

169
00:05:24,400 --> 00:05:28,080
and follow along all of the notes all of

170
00:05:26,240 --> 00:05:29,600
the markdown everything exists here

171
00:05:28,080 --> 00:05:32,719
including the uh the samples that we're

172
00:05:29,600 --> 00:05:32,720
going to be going through tonight

173
00:05:32,880 --> 00:05:39,840
okay so

174
00:05:40,479 --> 00:05:44,719
let's go back to my slides here

175
00:05:51,360 --> 00:05:55,600
so the first word prevention words that

176
00:05:54,160 --> 00:05:57,199
come to mind when i look at preventing

177
00:05:55,600 --> 00:05:58,400
unwanted behavior are locks

178
00:05:57,199 --> 00:06:00,160
right if you want to keep somebody out

179
00:05:58,400 --> 00:06:01,758
you lock the door it's very easy it's

180
00:06:00,160 --> 00:06:02,240
low-hanging fruit and most doors and

181
00:06:01,759 --> 00:06:04,560
most

182
00:06:02,240 --> 00:06:05,600
access to our systems have a concept of

183
00:06:04,560 --> 00:06:08,000
a lock on it

184
00:06:05,600 --> 00:06:10,240
uh if you look at linux fundamentally

185
00:06:08,000 --> 00:06:12,560
right there's different ways of locking

186
00:06:10,240 --> 00:06:14,960
either users or applications out of what

187
00:06:12,560 --> 00:06:16,800
we do not want them doing in the kernel

188
00:06:14,960 --> 00:06:18,239
show of hands here who's created a user

189
00:06:16,800 --> 00:06:20,240
in linux before

190
00:06:18,240 --> 00:06:21,520
okay everybody at fosdem just put their

191
00:06:20,240 --> 00:06:24,240
hand up um

192
00:06:21,520 --> 00:06:25,680
who here has written se linux policy set

193
00:06:24,240 --> 00:06:29,039
comp policy

194
00:06:25,680 --> 00:06:32,639
set compupf policy one person two

195
00:06:29,039 --> 00:06:33,840
three okay four um okay so again if you

196
00:06:32,639 --> 00:06:34,800
go and you do some research here you'll

197
00:06:33,840 --> 00:06:36,880
understand that

198
00:06:34,800 --> 00:06:38,560
uh we're preventing unwanted behavior or

199
00:06:36,880 --> 00:06:39,840
at least we're attempting to and that's

200
00:06:38,560 --> 00:06:42,080
kind of the lesson here

201
00:06:39,840 --> 00:06:43,440
uh if you did not want a user to access

202
00:06:42,080 --> 00:06:44,240
something on the file system you could

203
00:06:43,440 --> 00:06:45,919
create a user

204
00:06:44,240 --> 00:06:47,840
change the permissions there's this

205
00:06:45,919 --> 00:06:49,359
whole fundamental paradigm in place that

206
00:06:47,840 --> 00:06:50,638
allows you to prevent people from doing

207
00:06:49,360 --> 00:06:52,880
things they shouldn't do

208
00:06:50,639 --> 00:06:54,080
you can also do this with an application

209
00:06:52,880 --> 00:06:56,400
right so set

210
00:06:54,080 --> 00:06:57,758
bpf actually gives you a way to go

211
00:06:56,400 --> 00:07:00,159
through and control which

212
00:06:57,759 --> 00:07:01,759
system calls an application could or

213
00:07:00,160 --> 00:07:03,680
could not execute

214
00:07:01,759 --> 00:07:05,360
if you look at c groups right in the

215
00:07:03,680 --> 00:07:07,280
linux kernel you could define

216
00:07:05,360 --> 00:07:08,880
arbitrary limits for what you want

217
00:07:07,280 --> 00:07:09,840
applications that are running within the

218
00:07:08,880 --> 00:07:12,560
context of the c

219
00:07:09,840 --> 00:07:13,758
group to be bound to and if they violate

220
00:07:12,560 --> 00:07:15,199
this limit the kernel is going to

221
00:07:13,759 --> 00:07:17,120
terminate the process

222
00:07:15,199 --> 00:07:18,960
so we have these fundamental paradigms

223
00:07:17,120 --> 00:07:21,360
in linux that we're all familiar with

224
00:07:18,960 --> 00:07:22,239
and if you follow along in kubernetes

225
00:07:21,360 --> 00:07:24,160
you will see

226
00:07:22,240 --> 00:07:25,520
that kubernetes and cloud native

227
00:07:24,160 --> 00:07:27,759
ecosystem is following

228
00:07:25,520 --> 00:07:28,639
in the footsteps of the linux operating

229
00:07:27,759 --> 00:07:31,919
system

230
00:07:28,639 --> 00:07:34,960
set conf is to kubernetes as opa

231
00:07:31,919 --> 00:07:36,560
open policy agent is to cloud native or

232
00:07:34,960 --> 00:07:37,198
i'm sorry set confidence to linux as

233
00:07:36,560 --> 00:07:39,280
oppa is

234
00:07:37,199 --> 00:07:40,319
cloud native um so that's this concept

235
00:07:39,280 --> 00:07:42,880
of access control

236
00:07:40,319 --> 00:07:44,800
policy enforcement um we also have this

237
00:07:42,880 --> 00:07:45,280
idea of image and artifact scanning

238
00:07:44,800 --> 00:07:48,400
right

239
00:07:45,280 --> 00:07:50,479
so in uh traditional ecosystems if you

240
00:07:48,400 --> 00:07:51,758
wanted to deploy a new application you

241
00:07:50,479 --> 00:07:53,440
might want to go through and actually

242
00:07:51,759 --> 00:07:54,240
look at the byte code to see if anything

243
00:07:53,440 --> 00:07:56,560
in there looks

244
00:07:54,240 --> 00:07:58,160
suspicious there's a well-known set of

245
00:07:56,560 --> 00:07:58,720
libraries that are open source on the

246
00:07:58,160 --> 00:08:00,080
internet

247
00:07:58,720 --> 00:08:01,840
that you can go and you can actually

248
00:08:00,080 --> 00:08:03,440
assert your binaries against whether

249
00:08:01,840 --> 00:08:04,638
it's java byte code or it's good

250
00:08:03,440 --> 00:08:06,319
old-fashioned

251
00:08:04,639 --> 00:08:07,919
machine by code and you can actually see

252
00:08:06,319 --> 00:08:09,520
if there's anything buried inside of

253
00:08:07,919 --> 00:08:10,159
that that you potentially would not want

254
00:08:09,520 --> 00:08:12,240
there

255
00:08:10,160 --> 00:08:14,080
we have the same concept with images in

256
00:08:12,240 --> 00:08:16,080
a cloud native ecosystem

257
00:08:14,080 --> 00:08:17,840
the same paradigm applied in a different

258
00:08:16,080 --> 00:08:19,758
more distributed way

259
00:08:17,840 --> 00:08:21,440
code reviews right so you and your team

260
00:08:19,759 --> 00:08:23,280
going and looking at what the actual

261
00:08:21,440 --> 00:08:24,319
code does is there any vulnerabilities

262
00:08:23,280 --> 00:08:26,318
are you catching your

263
00:08:24,319 --> 00:08:27,360
errors do you have exposed sockets what

264
00:08:26,319 --> 00:08:29,759
happens if

265
00:08:27,360 --> 00:08:31,039
somebody floods the socket just being

266
00:08:29,759 --> 00:08:32,399
security-minded throughout your

267
00:08:31,039 --> 00:08:34,080
day-to-day life is another big thing

268
00:08:32,399 --> 00:08:35,360
that i've been obsessing over

269
00:08:34,080 --> 00:08:36,880
so these are all tools that you and your

270
00:08:35,360 --> 00:08:38,800
team can use to prevent unwanted

271
00:08:36,880 --> 00:08:42,080
behavior

272
00:08:38,799 --> 00:08:42,478
but as we all know bad things can still

273
00:08:42,080 --> 00:08:45,200
happen

274
00:08:42,479 --> 00:08:47,360
cves still happen right there's no such

275
00:08:45,200 --> 00:08:49,519
thing as perfectly safe and perfectly

276
00:08:47,360 --> 00:08:53,600
secure and perfectly perfect

277
00:08:49,519 --> 00:08:55,519
software right freebsd linux kubernetes

278
00:08:53,600 --> 00:08:57,279
name and open source projects jupyter

279
00:08:55,519 --> 00:08:58,000
notebooks they've all had cves opened up

280
00:08:57,279 --> 00:08:59,600
against them

281
00:08:58,000 --> 00:09:01,279
they've all been exploited at one point

282
00:08:59,600 --> 00:09:03,600
and they've all been fixed

283
00:09:01,279 --> 00:09:05,680
but somebody had to discover this first

284
00:09:03,600 --> 00:09:08,399
so this concept of detection

285
00:09:05,680 --> 00:09:09,359
is the scientific approach to looking at

286
00:09:08,399 --> 00:09:11,600
our systems

287
00:09:09,360 --> 00:09:13,040
from the bottom up instead of from the

288
00:09:11,600 --> 00:09:14,959
top down

289
00:09:13,040 --> 00:09:17,279
so by taking things that we would

290
00:09:14,959 --> 00:09:20,239
otherwise be effectively blind

291
00:09:17,279 --> 00:09:22,720
to and asserting rules against them and

292
00:09:20,240 --> 00:09:24,959
using those signals for data processing

293
00:09:22,720 --> 00:09:25,839
we're actually able to see things in our

294
00:09:24,959 --> 00:09:28,560
system that we

295
00:09:25,839 --> 00:09:30,160
otherwise would not be able to see and

296
00:09:28,560 --> 00:09:32,719
so detection is this

297
00:09:30,160 --> 00:09:33,360
approach to looking at our system and

298
00:09:32,720 --> 00:09:36,640
saying

299
00:09:33,360 --> 00:09:39,920
99 of the time it behaves in this way

300
00:09:36,640 --> 00:09:42,319
given these input signals but on tuesday

301
00:09:39,920 --> 00:09:43,599
last week all of a sudden this happened

302
00:09:42,320 --> 00:09:45,360
and we have never seen this before and

303
00:09:43,600 --> 00:09:47,440
we weren't expecting this to happen

304
00:09:45,360 --> 00:09:49,440
and we can programmatically assert that

305
00:09:47,440 --> 00:09:51,600
there was we would call this an anomaly

306
00:09:49,440 --> 00:09:54,640
that there was an anomaly that happened

307
00:09:51,600 --> 00:09:57,440
in our system and that is where

308
00:09:54,640 --> 00:09:59,040
detection comes into play so some people

309
00:09:57,440 --> 00:10:01,120
use tools like observability

310
00:09:59,040 --> 00:10:03,360
uh to do this right so whether we're

311
00:10:01,120 --> 00:10:06,399
auditing cloud infrastructure or

312
00:10:03,360 --> 00:10:08,000
the application yourself itself or the

313
00:10:06,399 --> 00:10:09,760
linux kernel that you're running on

314
00:10:08,000 --> 00:10:11,519
or the kubernetes audit logs we

315
00:10:09,760 --> 00:10:12,160
basically just want to have visibility

316
00:10:11,519 --> 00:10:14,320
into

317
00:10:12,160 --> 00:10:16,399
our system with high cardinality across

318
00:10:14,320 --> 00:10:18,000
the whole stack

319
00:10:16,399 --> 00:10:20,079
we also look at things like intrusion

320
00:10:18,000 --> 00:10:21,760
detection right there's been

321
00:10:20,079 --> 00:10:23,760
a couple of exploits over the past year

322
00:10:21,760 --> 00:10:26,720
where folks have uh found out

323
00:10:23,760 --> 00:10:27,519
that people scan images so people scan

324
00:10:26,720 --> 00:10:29,120
pdfs

325
00:10:27,519 --> 00:10:31,200
and if you upload an image with

326
00:10:29,120 --> 00:10:33,120
thousands of urls buried inside of it or

327
00:10:31,200 --> 00:10:33,839
a pdf with thousands of images buried

328
00:10:33,120 --> 00:10:35,680
inside of it

329
00:10:33,839 --> 00:10:37,760
you can effectively dock someone

330
00:10:35,680 --> 00:10:40,079
unintentionally or intentionally

331
00:10:37,760 --> 00:10:42,240
so there are ways of getting things into

332
00:10:40,079 --> 00:10:43,519
a secure system and you may not be aware

333
00:10:42,240 --> 00:10:45,680
of a certain vector

334
00:10:43,519 --> 00:10:46,959
so security is this whole concept of

335
00:10:45,680 --> 00:10:49,519
studying these attack

336
00:10:46,959 --> 00:10:50,000
patterns in the humanistic approach to

337
00:10:49,519 --> 00:10:52,560
how

338
00:10:50,000 --> 00:10:53,040
somebody might think of being intrusive

339
00:10:52,560 --> 00:10:55,439
in

340
00:10:53,040 --> 00:10:57,599
your systems and so i've done that with

341
00:10:55,440 --> 00:10:59,600
kubernetes

342
00:10:57,600 --> 00:11:01,600
and i think the approach to preventing

343
00:10:59,600 --> 00:11:04,720
this from happening to securing this

344
00:11:01,600 --> 00:11:06,399
and do detecting something uh that is

345
00:11:04,720 --> 00:11:08,640
malicious that could be going on

346
00:11:06,399 --> 00:11:09,519
is this word that i have been using that

347
00:11:08,640 --> 00:11:11,920
i would like to

348
00:11:09,519 --> 00:11:13,360
start advertising pull requests accepted

349
00:11:11,920 --> 00:11:15,920
if you don't like it

350
00:11:13,360 --> 00:11:16,800
called runtime security that is a hybrid

351
00:11:15,920 --> 00:11:19,040
of both

352
00:11:16,800 --> 00:11:20,719
the practice of using something like

353
00:11:19,040 --> 00:11:22,480
kubernetes access control

354
00:11:20,720 --> 00:11:23,920
or policy enforcement to prevent

355
00:11:22,480 --> 00:11:25,440
unwanted behavior

356
00:11:23,920 --> 00:11:27,599
but also understanding that in some

357
00:11:25,440 --> 00:11:29,600
cases that might not be enough

358
00:11:27,600 --> 00:11:31,839
so we can begin to use tools like

359
00:11:29,600 --> 00:11:33,279
observability tooling like falco what

360
00:11:31,839 --> 00:11:35,680
you're going to see in a moment

361
00:11:33,279 --> 00:11:37,040
to actually audit the kernel and

362
00:11:35,680 --> 00:11:37,760
understand what's happening in our

363
00:11:37,040 --> 00:11:40,560
system

364
00:11:37,760 --> 00:11:42,640
and i believe that having both of these

365
00:11:40,560 --> 00:11:44,560
creates a set of checks and balances

366
00:11:42,640 --> 00:11:45,839
where an operator or an infrastructure

367
00:11:44,560 --> 00:11:47,680
engineer could go

368
00:11:45,839 --> 00:11:49,120
in and not only prevent unwanted

369
00:11:47,680 --> 00:11:50,638
behavior but detect it

370
00:11:49,120 --> 00:11:52,399
and then after they've detected it go

371
00:11:50,639 --> 00:11:53,760
through and create new policy to prevent

372
00:11:52,399 --> 00:11:55,600
it from happening again

373
00:11:53,760 --> 00:11:57,760
and i think this is a complimentary

374
00:11:55,600 --> 00:11:59,440
approach to understanding our systems

375
00:11:57,760 --> 00:12:02,959
and to securing our systems

376
00:11:59,440 --> 00:12:05,040
moving forward okay

377
00:12:02,959 --> 00:12:06,479
so i'll give you the uh the 30-second

378
00:12:05,040 --> 00:12:08,160
pitch on falco

379
00:12:06,480 --> 00:12:09,519
don't worry we're going to compile it

380
00:12:08,160 --> 00:12:10,319
and actually run it so you'll be able to

381
00:12:09,519 --> 00:12:13,200
see com

382
00:12:10,320 --> 00:12:14,000
concretely what it does it's a cncf

383
00:12:13,200 --> 00:12:16,000
incubation

384
00:12:14,000 --> 00:12:17,519
project who here has ran wireshark

385
00:12:16,000 --> 00:12:20,000
before

386
00:12:17,519 --> 00:12:21,200
okay i really wish we could have seen

387
00:12:20,000 --> 00:12:22,959
that but everybody in this giant

388
00:12:21,200 --> 00:12:25,600
auditorium just put their hand up

389
00:12:22,959 --> 00:12:27,439
um so laura stujani my boss the founder

390
00:12:25,600 --> 00:12:28,720
of the company i worked for systig

391
00:12:27,440 --> 00:12:31,040
was one of the original creators of

392
00:12:28,720 --> 00:12:33,600
wireshark he has his phd in linux

393
00:12:31,040 --> 00:12:34,880
and he his original thesis to solving

394
00:12:33,600 --> 00:12:37,600
this problem of understanding our

395
00:12:34,880 --> 00:12:40,160
systems was that tcp is the fundamental

396
00:12:37,600 --> 00:12:41,360
packet of truth right it's the atom it's

397
00:12:40,160 --> 00:12:42,160
the quark if you're into quantum

398
00:12:41,360 --> 00:12:45,200
mechanics

399
00:12:42,160 --> 00:12:46,800
of how we understand computer science

400
00:12:45,200 --> 00:12:48,560
as we moved into cloud native as we

401
00:12:46,800 --> 00:12:50,319
moved into computers we realized that

402
00:12:48,560 --> 00:12:52,399
the network isn't necessarily the

403
00:12:50,320 --> 00:12:54,880
ultimate source of truth anymore

404
00:12:52,399 --> 00:12:56,639
so what we did is we started to look at

405
00:12:54,880 --> 00:12:57,920
kernel tracing who here is familiar with

406
00:12:56,639 --> 00:13:00,320
colonel tracy

407
00:12:57,920 --> 00:13:01,199
okay so maybe a third of the room just

408
00:13:00,320 --> 00:13:04,160
put their hand up

409
00:13:01,200 --> 00:13:05,519
they put his hand up um and there are a

410
00:13:04,160 --> 00:13:06,079
couple avenues for how you would

411
00:13:05,519 --> 00:13:08,320
potentially

412
00:13:06,079 --> 00:13:10,560
trace events in the kernel but the idea

413
00:13:08,320 --> 00:13:12,320
here is that if all software ultimately

414
00:13:10,560 --> 00:13:14,959
flows through the system calls in the

415
00:13:12,320 --> 00:13:16,800
linux api interface by auditing these

416
00:13:14,959 --> 00:13:18,880
system calls at runtime

417
00:13:16,800 --> 00:13:20,399
we should be able to understand exactly

418
00:13:18,880 --> 00:13:22,480
what's going on in our system

419
00:13:20,399 --> 00:13:24,079
and gain otherwise unavailable

420
00:13:22,480 --> 00:13:25,519
information about what potentially is

421
00:13:24,079 --> 00:13:28,479
happening so this is where this whole

422
00:13:25,519 --> 00:13:30,959
observability thing comes into play

423
00:13:28,480 --> 00:13:32,560
so falco has taken this enormous

424
00:13:30,959 --> 00:13:34,719
onslaught of data

425
00:13:32,560 --> 00:13:36,239
from the kernel globally so if you use

426
00:13:34,720 --> 00:13:38,320
something like p trace i mean by

427
00:13:36,240 --> 00:13:40,480
definition p a stands for process

428
00:13:38,320 --> 00:13:41,920
it's concretely married to a process

429
00:13:40,480 --> 00:13:45,120
itself with a pid

430
00:13:41,920 --> 00:13:47,199
uh what falco and what the cystic cli

431
00:13:45,120 --> 00:13:48,560
tool does is it has some libraries

432
00:13:47,199 --> 00:13:50,399
that allow you to go through and

433
00:13:48,560 --> 00:13:51,199
globally audit what's happening in your

434
00:13:50,399 --> 00:13:52,959
kernel

435
00:13:51,199 --> 00:13:55,680
the two ways we do this is by either

436
00:13:52,959 --> 00:13:56,880
running a kernel module or by using a

437
00:13:55,680 --> 00:14:00,000
newer technology called

438
00:13:56,880 --> 00:14:02,320
ebpf that allows us to implement

439
00:14:00,000 --> 00:14:03,839
kernel tracing in user space so that we

440
00:14:02,320 --> 00:14:06,480
can understand what's going on

441
00:14:03,839 --> 00:14:07,839
in the kernel what falco does is it

442
00:14:06,480 --> 00:14:10,160
takes this stream of data

443
00:14:07,839 --> 00:14:12,240
these signals from linux and it asserts

444
00:14:10,160 --> 00:14:14,959
them against well-known

445
00:14:12,240 --> 00:14:16,160
anomalies right what happens if somebody

446
00:14:14,959 --> 00:14:18,719
executes open

447
00:14:16,160 --> 00:14:19,680
the open system call against etsy shadow

448
00:14:18,720 --> 00:14:22,320
do you and your team

449
00:14:19,680 --> 00:14:22,719
want to know about that i probably would

450
00:14:22,320 --> 00:14:25,199
um

451
00:14:22,720 --> 00:14:26,880
and if you're savvy i got to use the

452
00:14:25,199 --> 00:14:29,359
word savvy in my presentation

453
00:14:26,880 --> 00:14:31,439
if you're a savvy linux user you could

454
00:14:29,360 --> 00:14:33,839
probably find ways of doing this

455
00:14:31,440 --> 00:14:36,000
on a system with the system and user

456
00:14:33,839 --> 00:14:37,519
space not being aware that you did this

457
00:14:36,000 --> 00:14:39,040
but the kernel ultimately would have to

458
00:14:37,519 --> 00:14:40,880
execute the system call

459
00:14:39,040 --> 00:14:42,399
so by going to the kernel level you're

460
00:14:40,880 --> 00:14:43,680
able to see things you would otherwise

461
00:14:42,399 --> 00:14:45,600
be blind to

462
00:14:43,680 --> 00:14:46,719
so again it's an evolution of wireshark

463
00:14:45,600 --> 00:14:48,560
but for the kernel

464
00:14:46,720 --> 00:14:50,399
and this allows us to begin kernel

465
00:14:48,560 --> 00:14:53,518
tracing

466
00:14:50,399 --> 00:14:55,600
so how does it work so falco takes not

467
00:14:53,519 --> 00:14:57,680
only information from the kernel

468
00:14:55,600 --> 00:14:59,360
but also other bits of information from

469
00:14:57,680 --> 00:15:01,680
a containerized system

470
00:14:59,360 --> 00:15:03,440
as well and we're just using what's

471
00:15:01,680 --> 00:15:05,439
going on in the kernel to tell a broader

472
00:15:03,440 --> 00:15:06,480
story about how we would potentially be

473
00:15:05,440 --> 00:15:09,279
detecting

474
00:15:06,480 --> 00:15:11,360
anomalies in kubernetes i like how

475
00:15:09,279 --> 00:15:14,000
people are taking photos of my

476
00:15:11,360 --> 00:15:15,279
very professional ascii diagram on the

477
00:15:14,000 --> 00:15:16,240
screen here

478
00:15:15,279 --> 00:15:17,519
i mean come on i went through and

479
00:15:16,240 --> 00:15:19,040
actually centered this with spaces and

480
00:15:17,519 --> 00:15:19,440
counted the spaces this took like at

481
00:15:19,040 --> 00:15:22,399
least

482
00:15:19,440 --> 00:15:22,399
20 or 30 minutes

483
00:15:22,480 --> 00:15:27,120
so on the left side here we have system

484
00:15:25,440 --> 00:15:28,480
call events is what what i basically

485
00:15:27,120 --> 00:15:30,160
just described

486
00:15:28,480 --> 00:15:32,079
we also can parse other bits of meta

487
00:15:30,160 --> 00:15:33,839
information from our systems as well

488
00:15:32,079 --> 00:15:36,399
who here has ever explored the docker

489
00:15:33,839 --> 00:15:38,160
socket handful

490
00:15:36,399 --> 00:15:40,240
yet another third or so of the people

491
00:15:38,160 --> 00:15:41,360
here uh if you can actually go and

492
00:15:40,240 --> 00:15:42,720
connect to the sock and you can actually

493
00:15:41,360 --> 00:15:44,639
get all kinds of interesting meta

494
00:15:42,720 --> 00:15:46,800
information about the containers

495
00:15:44,639 --> 00:15:48,720
that are running on the system

496
00:15:46,800 --> 00:15:50,240
kubernetes also gives us some visibility

497
00:15:48,720 --> 00:15:51,440
as well we have kubernetes meta

498
00:15:50,240 --> 00:15:53,839
information

499
00:15:51,440 --> 00:15:54,480
what is the name of the pod when was it

500
00:15:53,839 --> 00:15:56,160
started

501
00:15:54,480 --> 00:15:58,160
how long has it been running what

502
00:15:56,160 --> 00:16:00,000
namespace is the pod running in

503
00:15:58,160 --> 00:16:02,480
uh and we also have this new feature in

504
00:16:00,000 --> 00:16:04,560
kubernetes called kubernetes audit logs

505
00:16:02,480 --> 00:16:05,600
that basically give you the who what why

506
00:16:04,560 --> 00:16:08,160
and where

507
00:16:05,600 --> 00:16:10,720
of something happening of some mutation

508
00:16:08,160 --> 00:16:12,719
in your infrastructure in your system

509
00:16:10,720 --> 00:16:15,040
so if you ever go and you know follow

510
00:16:12,720 --> 00:16:16,959
the tutorial online and blindly download

511
00:16:15,040 --> 00:16:18,480
a yaml manifest and apply it to a

512
00:16:16,959 --> 00:16:21,040
cluster and just kind of hope it works

513
00:16:18,480 --> 00:16:22,320
which we've all done before i'm sure

514
00:16:21,040 --> 00:16:24,399
what's actually happening is you're

515
00:16:22,320 --> 00:16:25,839
mutating the data store in kubernetes

516
00:16:24,399 --> 00:16:27,040
and then all these little controllers

517
00:16:25,839 --> 00:16:28,880
come out and they go and they try to

518
00:16:27,040 --> 00:16:30,560
reconcile this new configuration that

519
00:16:28,880 --> 00:16:33,759
you've pushed to your cluster and

520
00:16:30,560 --> 00:16:35,680
if you're lucky it should work

521
00:16:33,759 --> 00:16:37,360
so by having the central database we're

522
00:16:35,680 --> 00:16:38,079
able to tell an even broader story about

523
00:16:37,360 --> 00:16:41,199
what's happening

524
00:16:38,079 --> 00:16:42,000
in our system so all of this data comes

525
00:16:41,199 --> 00:16:43,599
into falco

526
00:16:42,000 --> 00:16:45,279
which is written in c plus and it's

527
00:16:43,600 --> 00:16:46,560
highly optimized for efficiency here i

528
00:16:45,279 --> 00:16:47,439
mean we're dealing on the order of

529
00:16:46,560 --> 00:16:49,680
magnitude

530
00:16:47,440 --> 00:16:50,480
of millions of system calls potentially

531
00:16:49,680 --> 00:16:52,560
a second

532
00:16:50,480 --> 00:16:54,160
coming up from the kernel and how it

533
00:16:52,560 --> 00:16:56,239
comes up from the kernel is over a ring

534
00:16:54,160 --> 00:16:57,759
buffer and lavenzo fontana

535
00:16:56,240 --> 00:16:59,279
probably the most technical maintainer

536
00:16:57,759 --> 00:17:00,399
on the falco project sitting in the

537
00:16:59,279 --> 00:17:03,680
front row here

538
00:17:00,399 --> 00:17:06,000
um that's an inside joke of ours uh he

539
00:17:03,680 --> 00:17:07,918
uh gave a wonderful talk earlier today

540
00:17:06,000 --> 00:17:09,839
about evpf he literally wrote the book

541
00:17:07,919 --> 00:17:11,360
on bpf there's and that

542
00:17:09,839 --> 00:17:13,039
uh the slide i ask you to take a picture

543
00:17:11,359 --> 00:17:14,479
of you can go watch his talk and he goes

544
00:17:13,039 --> 00:17:16,839
into much more detail here

545
00:17:14,480 --> 00:17:18,319
but basically we have a 16 megabyte ring

546
00:17:16,839 --> 00:17:20,958
buffer per

547
00:17:18,319 --> 00:17:22,399
cpu running on our system i'll show you

548
00:17:20,959 --> 00:17:22,959
concretely in a moment what that looks

549
00:17:22,400 --> 00:17:24,880
like

550
00:17:22,959 --> 00:17:26,240
and we're able to pull these system

551
00:17:24,880 --> 00:17:28,240
calls up through that

552
00:17:26,240 --> 00:17:29,600
combine that with kubernetes information

553
00:17:28,240 --> 00:17:30,400
combine that with the container

554
00:17:29,600 --> 00:17:32,080
information

555
00:17:30,400 --> 00:17:34,880
and then assert this against well-known

556
00:17:32,080 --> 00:17:38,000
security anomalies

557
00:17:34,880 --> 00:17:40,080
once an anomaly is detected there's a

558
00:17:38,000 --> 00:17:41,760
few things falco allows us to do

559
00:17:40,080 --> 00:17:43,520
fundamentally falco is designed to be

560
00:17:41,760 --> 00:17:44,879
composable so you can take an output

561
00:17:43,520 --> 00:17:45,840
from it you can plug it into anything

562
00:17:44,880 --> 00:17:47,360
you want

563
00:17:45,840 --> 00:17:50,159
the first one we see on the screen is

564
00:17:47,360 --> 00:17:52,159
grpc this is relevant because this has

565
00:17:50,160 --> 00:17:54,720
allowed us using tools like protobuf

566
00:17:52,160 --> 00:17:56,720
to easily build clients and sdks for you

567
00:17:54,720 --> 00:17:58,640
to plug falco outputs into other

568
00:17:56,720 --> 00:18:01,679
arbitrary parts of your system

569
00:17:58,640 --> 00:18:02,960
right now we have rust go python and if

570
00:18:01,679 --> 00:18:06,480
you would like to generate your

571
00:18:02,960 --> 00:18:08,640
your own pull requests are accepted

572
00:18:06,480 --> 00:18:10,240
um we also have a concept of a web hook

573
00:18:08,640 --> 00:18:10,880
of actually going out and trying to send

574
00:18:10,240 --> 00:18:12,799
data to

575
00:18:10,880 --> 00:18:14,000
a configured web server and in this

576
00:18:12,799 --> 00:18:16,080
example that i'm going to be running

577
00:18:14,000 --> 00:18:17,360
today good old standard out which we're

578
00:18:16,080 --> 00:18:20,559
just going to look at in

579
00:18:17,360 --> 00:18:23,918
the terminal here so again

580
00:18:20,559 --> 00:18:26,399
to summarize from the bottom up we have

581
00:18:23,919 --> 00:18:27,200
the linux kernel on top of the kernel we

582
00:18:26,400 --> 00:18:29,679
have either

583
00:18:27,200 --> 00:18:31,360
a kernel module which we'll go more into

584
00:18:29,679 --> 00:18:34,559
what that looks like in a moment

585
00:18:31,360 --> 00:18:36,799
or an evpf pro then we go into our ring

586
00:18:34,559 --> 00:18:38,399
buffer that basically runs on that thin

587
00:18:36,799 --> 00:18:39,360
layer between the kernel and the rest of

588
00:18:38,400 --> 00:18:41,120
user space

589
00:18:39,360 --> 00:18:43,039
and we move up into user space where we

590
00:18:41,120 --> 00:18:44,799
have two libraries that are able to pull

591
00:18:43,039 --> 00:18:46,799
information from the ring buffer

592
00:18:44,799 --> 00:18:48,400
and then ultimately falco is built on

593
00:18:46,799 --> 00:18:49,679
top of all of these libraries

594
00:18:48,400 --> 00:18:51,440
and allow us to interface with

595
00:18:49,679 --> 00:18:53,600
kubernetes in docker

596
00:18:51,440 --> 00:18:54,840
and actually tell a full holistic

597
00:18:53,600 --> 00:18:57,840
security

598
00:18:54,840 --> 00:18:57,840
story

599
00:18:58,559 --> 00:19:02,879
so to summarize falco is a static binary

600
00:19:01,600 --> 00:19:04,959
you can run it potentially in a

601
00:19:02,880 --> 00:19:08,240
container it's written in both

602
00:19:04,960 --> 00:19:10,880
c and c plus plus we have rust go

603
00:19:08,240 --> 00:19:11,520
and python clients and this whole thing

604
00:19:10,880 --> 00:19:14,880
has been

605
00:19:11,520 --> 00:19:17,200
optimized for speed github.com falco

606
00:19:14,880 --> 00:19:19,360
security if you want to see more

607
00:19:17,200 --> 00:19:21,520
so let's talk about the kernel module so

608
00:19:19,360 --> 00:19:22,559
what this does is this parses system

609
00:19:21,520 --> 00:19:25,200
events

610
00:19:22,559 --> 00:19:27,039
so kernel modules were the our first

611
00:19:25,200 --> 00:19:28,640
approach at how we would go about

612
00:19:27,039 --> 00:19:30,559
configuring custom logic

613
00:19:28,640 --> 00:19:32,080
in the kernel there's a fundamental

614
00:19:30,559 --> 00:19:32,559
problem with this which is if you're

615
00:19:32,080 --> 00:19:34,000
running

616
00:19:32,559 --> 00:19:35,918
a potentially unknown kernel

617
00:19:34,000 --> 00:19:37,280
configuration or if something happens on

618
00:19:35,919 --> 00:19:38,000
your hardware or something that you

619
00:19:37,280 --> 00:19:40,000
didn't plan for

620
00:19:38,000 --> 00:19:41,039
happens in your kernel module you can

621
00:19:40,000 --> 00:19:44,080
potentially crash

622
00:19:41,039 --> 00:19:45,679
a system furthermore imagine imagine me

623
00:19:44,080 --> 00:19:47,600
a security engineer like

624
00:19:45,679 --> 00:19:48,799
walking into a company and saying hi

625
00:19:47,600 --> 00:19:50,399
download our kernel from

626
00:19:48,799 --> 00:19:51,840
our kernel module from the internet and

627
00:19:50,400 --> 00:19:53,440
install it in production we promise

628
00:19:51,840 --> 00:19:57,520
that's going to be a good idea

629
00:19:53,440 --> 00:20:01,600
um so this is this problem

630
00:19:57,520 --> 00:20:03,600
is why evpf is so successful ebpf says

631
00:20:01,600 --> 00:20:04,799
we're going to take the bit the bpf

632
00:20:03,600 --> 00:20:05,918
berkeley packet filter

633
00:20:04,799 --> 00:20:07,520
and we're going to go a step further and

634
00:20:05,919 --> 00:20:08,799
we're going to start to build more logic

635
00:20:07,520 --> 00:20:11,440
and more capabilities

636
00:20:08,799 --> 00:20:13,360
into this very old otherwise relatively

637
00:20:11,440 --> 00:20:14,480
unused part of the linux kernel

638
00:20:13,360 --> 00:20:16,080
and what we're going to do is we're

639
00:20:14,480 --> 00:20:17,600
going to guarantee a few things and

640
00:20:16,080 --> 00:20:19,280
particularly we're going to solve this

641
00:20:17,600 --> 00:20:20,959
kernel module problem of

642
00:20:19,280 --> 00:20:22,559
if you want to do certain things we're

643
00:20:20,960 --> 00:20:23,039
going to prevent you from being able to

644
00:20:22,559 --> 00:20:27,840
crash

645
00:20:23,039 --> 00:20:29,919
a system so we started to play with ebpf

646
00:20:27,840 --> 00:20:31,439
so we wanted this to do the same thing

647
00:20:29,919 --> 00:20:32,960
that our kernel module was doing we

648
00:20:31,440 --> 00:20:34,320
wanted to parse these system calls

649
00:20:32,960 --> 00:20:35,679
because we have found that this is

650
00:20:34,320 --> 00:20:38,240
actually a good source of truth for

651
00:20:35,679 --> 00:20:39,760
doing things like detecting anomalies

652
00:20:38,240 --> 00:20:41,679
and we also wanted to make sure that we

653
00:20:39,760 --> 00:20:43,760
couldn't potentially crash a system

654
00:20:41,679 --> 00:20:45,520
so because ebpf code is already

655
00:20:43,760 --> 00:20:46,799
pre-compiled into the kernel

656
00:20:45,520 --> 00:20:48,799
you're effectively just telling the

657
00:20:46,799 --> 00:20:50,559
kernel to turn it on right it's just

658
00:20:48,799 --> 00:20:51,039
like javascript running in your browser

659
00:20:50,559 --> 00:20:52,799
it's just

660
00:20:51,039 --> 00:20:54,879
it's just saying you already have this

661
00:20:52,799 --> 00:20:55,360
logic just please do this one thing for

662
00:20:54,880 --> 00:20:57,200
me

663
00:20:55,360 --> 00:20:58,719
instead of please run this logic i wrote

664
00:20:57,200 --> 00:21:01,840
myself so

665
00:20:58,720 --> 00:21:03,919
bpf or ebpf rather it's unable to crash

666
00:21:01,840 --> 00:21:06,158
the kernel it's effectively read only

667
00:21:03,919 --> 00:21:07,520
and it's not turing complete but you're

668
00:21:06,159 --> 00:21:08,320
still able to do some pretty powerful

669
00:21:07,520 --> 00:21:10,080
things with it

670
00:21:08,320 --> 00:21:11,439
and then once you get it from the kernel

671
00:21:10,080 --> 00:21:13,439
you can implement that in a turing

672
00:21:11,440 --> 00:21:16,159
complete language of your choice

673
00:21:13,440 --> 00:21:17,760
so if you want to look more go to the uh

674
00:21:16,159 --> 00:21:18,720
the open source project and check out

675
00:21:17,760 --> 00:21:21,840
skype.c

676
00:21:18,720 --> 00:21:25,440
and skype bpf dot c who here

677
00:21:21,840 --> 00:21:27,280
uh remembers wireshark cap files

678
00:21:25,440 --> 00:21:29,520
same concept but with bpf and for the

679
00:21:27,280 --> 00:21:32,399
linux kernel

680
00:21:29,520 --> 00:21:32,960
so earlier today i met with a guy uh

681
00:21:32,400 --> 00:21:34,159
grass

682
00:21:32,960 --> 00:21:36,320
if he's here thank you for helping me

683
00:21:34,159 --> 00:21:38,400
out earlier uh and he helped me get

684
00:21:36,320 --> 00:21:40,399
oppa or open policy agent set up for my

685
00:21:38,400 --> 00:21:41,600
demo and we're gonna actually hack into

686
00:21:40,400 --> 00:21:43,440
kubernetes and then we're gonna go

687
00:21:41,600 --> 00:21:45,199
through and use this to prevent

688
00:21:43,440 --> 00:21:46,960
my hack from happening again and we're

689
00:21:45,200 --> 00:21:47,760
going to run a series of experiments

690
00:21:46,960 --> 00:21:50,799
here

691
00:21:47,760 --> 00:21:52,799
um so uh more on oppa in a moment

692
00:21:50,799 --> 00:21:53,840
but basically it's a cncf project just

693
00:21:52,799 --> 00:21:55,039
like falco

694
00:21:53,840 --> 00:21:56,720
and it works with more than just

695
00:21:55,039 --> 00:21:58,559
kubernetes so it doesn't have to work

696
00:21:56,720 --> 00:21:59,440
for kubernetes although in this example

697
00:21:58,559 --> 00:22:01,120
we're using it

698
00:21:59,440 --> 00:22:03,200
and it was designed to basically just

699
00:22:01,120 --> 00:22:04,239
solve uh the problem of creating a

700
00:22:03,200 --> 00:22:07,120
policy engine that

701
00:22:04,240 --> 00:22:08,880
we could implement uh anywhere so one

702
00:22:07,120 --> 00:22:10,158
policy engine to rule them all is

703
00:22:08,880 --> 00:22:12,000
basically what i think of when i think

704
00:22:10,159 --> 00:22:13,919
of opa

705
00:22:12,000 --> 00:22:15,120
gatekeeper an open source tool is an

706
00:22:13,919 --> 00:22:17,600
implementation of

707
00:22:15,120 --> 00:22:18,479
this broader policy enforcement

708
00:22:17,600 --> 00:22:20,320
mechanism

709
00:22:18,480 --> 00:22:22,240
and gatekeepers specifically coupled

710
00:22:20,320 --> 00:22:22,879
with kubernetes and that's what we have

711
00:22:22,240 --> 00:22:25,840
running

712
00:22:22,880 --> 00:22:27,679
in my cluster so if you want to run

713
00:22:25,840 --> 00:22:29,840
something like opa or opa in

714
00:22:27,679 --> 00:22:32,159
uh kubernetes gatekeeper has sort of

715
00:22:29,840 --> 00:22:33,760
taken uh this existing more flexible

716
00:22:32,159 --> 00:22:35,840
more modular project

717
00:22:33,760 --> 00:22:38,960
and optimized it for a single concrete

718
00:22:35,840 --> 00:22:40,799
use case of kubernetes

719
00:22:38,960 --> 00:22:42,240
okay so let's talk about my demo looks

720
00:22:40,799 --> 00:22:44,639
like we are

721
00:22:42,240 --> 00:22:46,400
25 minutes into my talk so i'll probably

722
00:22:44,640 --> 00:22:46,960
do another 10 or 15 minutes here of this

723
00:22:46,400 --> 00:22:49,440
demo

724
00:22:46,960 --> 00:22:51,280
and i'm gonna go pretty fast so i'm

725
00:22:49,440 --> 00:22:53,039
gonna leave some questions at the end so

726
00:22:51,280 --> 00:22:54,320
if something doesn't make sense or if i

727
00:22:53,039 --> 00:22:56,158
skip over something

728
00:22:54,320 --> 00:22:57,600
please uh either you know ask me

729
00:22:56,159 --> 00:22:58,880
afterwards so i can document it on the

730
00:22:57,600 --> 00:23:00,879
internet i'm sure you're not the only

731
00:22:58,880 --> 00:23:02,320
one about who had this question

732
00:23:00,880 --> 00:23:04,240
or even put your hand up at the end and

733
00:23:02,320 --> 00:23:04,960
i'm happy to answer quickly at the end

734
00:23:04,240 --> 00:23:05,919
of the demo

735
00:23:04,960 --> 00:23:07,440
but what we're going to do is we're

736
00:23:05,919 --> 00:23:09,280
going to start off by showing you how

737
00:23:07,440 --> 00:23:10,799
we're doing some kernel tracing on my

738
00:23:09,280 --> 00:23:13,280
local laptop here

739
00:23:10,799 --> 00:23:14,080
so i'm running arch linux i have a

740
00:23:13,280 --> 00:23:16,399
fairly old

741
00:23:14,080 --> 00:23:18,399
kernel not too old but also not like

742
00:23:16,400 --> 00:23:20,000
brand new to kind of demonstrate what i

743
00:23:18,400 --> 00:23:22,159
would think most people are running

744
00:23:20,000 --> 00:23:24,400
in production and we're going to create

745
00:23:22,159 --> 00:23:27,280
a user local bin fosdem

746
00:23:24,400 --> 00:23:28,080
on a couple of different environments

747
00:23:27,280 --> 00:23:30,158
the first one

748
00:23:28,080 --> 00:23:31,840
on my local laptop and we're going to

749
00:23:30,159 --> 00:23:33,200
parse this using the kernel module and

750
00:23:31,840 --> 00:23:34,240
you're going to see the devices

751
00:23:33,200 --> 00:23:36,320
and you're going to actually watch me

752
00:23:34,240 --> 00:23:38,320
load the kernel module on my laptop

753
00:23:36,320 --> 00:23:40,158
the next one we're going to start falco

754
00:23:38,320 --> 00:23:41,520
with bpf and i'm going to delete

755
00:23:40,159 --> 00:23:43,279
the kernel module and you'll see the

756
00:23:41,520 --> 00:23:43,600
devices go away and you'll see you'll

757
00:23:43,279 --> 00:23:46,080
see

758
00:23:43,600 --> 00:23:47,520
falco still working dynamically which is

759
00:23:46,080 --> 00:23:49,199
exciting because we didn't have to load

760
00:23:47,520 --> 00:23:50,320
anything into the kernel

761
00:23:49,200 --> 00:23:52,240
next we're going to do this in

762
00:23:50,320 --> 00:23:52,559
kubernetes again and we're going to do

763
00:23:52,240 --> 00:23:54,400
this

764
00:23:52,559 --> 00:23:55,600
by we're going to have a cluster

765
00:23:54,400 --> 00:23:57,600
administrator

766
00:23:55,600 --> 00:23:59,360
cube config configured which is

767
00:23:57,600 --> 00:24:00,240
basically like root on my kubernetes

768
00:23:59,360 --> 00:24:02,479
cluster

769
00:24:00,240 --> 00:24:03,679
uh and then i'm going to use kubernetes

770
00:24:02,480 --> 00:24:06,559
access control

771
00:24:03,679 --> 00:24:07,919
and prevention techniques are back to

772
00:24:06,559 --> 00:24:10,000
create a new

773
00:24:07,919 --> 00:24:12,799
uh configuration that only gives me

774
00:24:10,000 --> 00:24:15,200
access to one name space in kubernetes

775
00:24:12,799 --> 00:24:16,158
i'm then going to create a shell in

776
00:24:15,200 --> 00:24:18,400
kubernetes

777
00:24:16,159 --> 00:24:20,400
privilege escalate through that shell uh

778
00:24:18,400 --> 00:24:21,360
gain access to the underlying node get

779
00:24:20,400 --> 00:24:23,520
root access

780
00:24:21,360 --> 00:24:24,399
all of which that should have been

781
00:24:23,520 --> 00:24:27,679
reasonably

782
00:24:24,400 --> 00:24:30,480
prevented giving kubernetes are back uh

783
00:24:27,679 --> 00:24:31,520
after we do this and i've hopefully

784
00:24:30,480 --> 00:24:33,679
sufficiently scared

785
00:24:31,520 --> 00:24:34,799
a number of people in the room here um

786
00:24:33,679 --> 00:24:36,000
we're going to

787
00:24:34,799 --> 00:24:38,320
go through and we're going to look at

788
00:24:36,000 --> 00:24:40,240
the opa policy and the gatekeeper policy

789
00:24:38,320 --> 00:24:41,360
of preventing this from happening again

790
00:24:40,240 --> 00:24:44,240
and we're going to look at how

791
00:24:41,360 --> 00:24:46,639
falco the whole time had every system

792
00:24:44,240 --> 00:24:48,640
call and was able to tell a story

793
00:24:46,640 --> 00:24:50,240
about what happened and basically

794
00:24:48,640 --> 00:24:52,080
explained the threat model

795
00:24:50,240 --> 00:24:54,240
and the attack vector for what was

796
00:24:52,080 --> 00:24:57,520
happening in kubernetes

797
00:24:54,240 --> 00:25:00,159
okay so done with my

798
00:24:57,520 --> 00:25:00,639
slides so the first thing i'm going to

799
00:25:00,159 --> 00:25:04,240
do

800
00:25:00,640 --> 00:25:06,960
is i am going to uh show you my slash

801
00:25:04,240 --> 00:25:08,080
dev on my file system here can everybody

802
00:25:06,960 --> 00:25:10,799
see okay

803
00:25:08,080 --> 00:25:11,840
cool uh change directory slash dev you

804
00:25:10,799 --> 00:25:14,639
can see here

805
00:25:11,840 --> 00:25:16,000
uh we're looking for falco down here in

806
00:25:14,640 --> 00:25:18,640
these these devices

807
00:25:16,000 --> 00:25:20,000
uh and if you notice you don't see them

808
00:25:18,640 --> 00:25:23,440
so next i'm gonna go to

809
00:25:20,000 --> 00:25:25,279
this directory uh in in home here

810
00:25:23,440 --> 00:25:26,480
and you're gonna see i have two

811
00:25:25,279 --> 00:25:28,720
pre-compiled

812
00:25:26,480 --> 00:25:29,919
uh objects here one of which is a kernel

813
00:25:28,720 --> 00:25:31,440
object that we're going to load as a

814
00:25:29,919 --> 00:25:32,320
kernel module and the other one is just

815
00:25:31,440 --> 00:25:33,840
a regular old

816
00:25:32,320 --> 00:25:35,840
elf object and we're going to use both

817
00:25:33,840 --> 00:25:39,120
of these subjectively as we start

818
00:25:35,840 --> 00:25:41,039
running falco and so

819
00:25:39,120 --> 00:25:42,879
what i want to do is i'm going to just

820
00:25:41,039 --> 00:25:44,240
run sudo falco and let's see what

821
00:25:42,880 --> 00:25:46,720
happens

822
00:25:44,240 --> 00:25:48,240
let me enter my password here and you

823
00:25:46,720 --> 00:25:51,200
can see here we got an error

824
00:25:48,240 --> 00:25:53,039
unable to open device falco.0. remember

825
00:25:51,200 --> 00:25:54,240
earlier i mentioned the 16 megabyte

826
00:25:53,039 --> 00:25:55,919
buffer per core

827
00:25:54,240 --> 00:25:58,320
i have eight cores on this machine so

828
00:25:55,919 --> 00:26:01,200
we're looking for zero through seven

829
00:25:58,320 --> 00:26:02,320
right zero index uh device files that do

830
00:26:01,200 --> 00:26:04,640
not exist

831
00:26:02,320 --> 00:26:07,120
uh so what we're gonna do is we're gonna

832
00:26:04,640 --> 00:26:07,120
ins mod

833
00:26:09,200 --> 00:26:15,520
um falco

834
00:26:12,240 --> 00:26:17,919
probe dot ko

835
00:26:15,520 --> 00:26:19,918
and if i list mod and will grep for

836
00:26:17,919 --> 00:26:23,039
falco

837
00:26:19,919 --> 00:26:26,000
you can see it's loaded and if i

838
00:26:23,039 --> 00:26:26,559
list slash dev again you can see here we

839
00:26:26,000 --> 00:26:28,799
now have

840
00:26:26,559 --> 00:26:30,320
linux devices for every one of my cpu

841
00:26:28,799 --> 00:26:31,840
cores so now

842
00:26:30,320 --> 00:26:33,918
we have something that's coming from the

843
00:26:31,840 --> 00:26:35,678
kernel and this ring buffer is iterating

844
00:26:33,919 --> 00:26:36,880
around and around over itself in 16

845
00:26:35,679 --> 00:26:38,880
megabyte increments

846
00:26:36,880 --> 00:26:40,720
and nothing is pulling from it so we

847
00:26:38,880 --> 00:26:44,159
start from falco

848
00:26:40,720 --> 00:26:47,120
and now we're actually able to gain data

849
00:26:44,159 --> 00:26:48,880
so falco is doing nothing right

850
00:26:47,120 --> 00:26:50,639
nothing's happening on my system i'm

851
00:26:48,880 --> 00:26:51,200
running a pretty primitive system here i

852
00:26:50,640 --> 00:26:54,000
have

853
00:26:51,200 --> 00:26:55,360
an ide and a couple of uh folders open

854
00:26:54,000 --> 00:26:56,159
from when i plugged my phone into my

855
00:26:55,360 --> 00:26:58,399
laptop

856
00:26:56,159 --> 00:27:00,400
but even if i had chrome running right

857
00:26:58,400 --> 00:27:02,159
now you would see some set gids and set

858
00:27:00,400 --> 00:27:03,919
uids and you would see falco starting to

859
00:27:02,159 --> 00:27:06,880
alert us that something was happening

860
00:27:03,919 --> 00:27:08,799
so for our first experiment in a

861
00:27:06,880 --> 00:27:11,200
different terminal

862
00:27:08,799 --> 00:27:12,400
pseudo or actually we'll do this without

863
00:27:11,200 --> 00:27:16,159
pseudo first

864
00:27:12,400 --> 00:27:18,159
user local ben flosdem

865
00:27:16,159 --> 00:27:19,520
permission denied linux is using

866
00:27:18,159 --> 00:27:20,720
preventative action to keep us from

867
00:27:19,520 --> 00:27:21,440
doing something that we shouldn't be

868
00:27:20,720 --> 00:27:23,760
doing

869
00:27:21,440 --> 00:27:24,640
we escalate to a user we happen to know

870
00:27:23,760 --> 00:27:26,720
the password

871
00:27:24,640 --> 00:27:28,640
we're able to create the file falco

872
00:27:26,720 --> 00:27:30,799
alerts us pretty simple

873
00:27:28,640 --> 00:27:32,799
alerting mechanism here and you can see

874
00:27:30,799 --> 00:27:34,480
here that because this was a well-known

875
00:27:32,799 --> 00:27:35,279
directory i'm sure most people in the

876
00:27:34,480 --> 00:27:37,440
room here have

877
00:27:35,279 --> 00:27:38,880
are from is familiar with user local ben

878
00:27:37,440 --> 00:27:40,399
or user ben

879
00:27:38,880 --> 00:27:42,240
as well as maybe maybe some other files

880
00:27:40,399 --> 00:27:44,158
on the system such as slash proc

881
00:27:42,240 --> 00:27:45,360
or slash dev there's a lot of things

882
00:27:44,159 --> 00:27:46,960
that you would potentially want to know

883
00:27:45,360 --> 00:27:48,080
about if somebody's executing open

884
00:27:46,960 --> 00:27:49,919
system calls and some of these

885
00:27:48,080 --> 00:27:51,918
directories are on some of these files

886
00:27:49,919 --> 00:27:53,039
perhaps pin one would be of interest for

887
00:27:51,919 --> 00:27:56,320
some folks

888
00:27:53,039 --> 00:27:58,960
um so we're able to take this a step

889
00:27:56,320 --> 00:27:59,760
further right so we're gonna keep falco

890
00:27:58,960 --> 00:28:01,039
running

891
00:27:59,760 --> 00:28:02,799
and i'm gonna get some space in here so

892
00:28:01,039 --> 00:28:04,960
you can see the alert as it comes

893
00:28:02,799 --> 00:28:05,840
and this time i'm going to run a docker

894
00:28:04,960 --> 00:28:07,200
container

895
00:28:05,840 --> 00:28:08,879
locally and we're going to perform the

896
00:28:07,200 --> 00:28:10,000
same experiment and i want you to see

897
00:28:08,880 --> 00:28:12,159
how the linux kernel

898
00:28:10,000 --> 00:28:13,679
treats a containerized instance versus

899
00:28:12,159 --> 00:28:14,559
the local instance because this is the

900
00:28:13,679 --> 00:28:16,159
fundamental

901
00:28:14,559 --> 00:28:18,559
technology that empowers all the

902
00:28:16,159 --> 00:28:22,240
security parsing that we're doing

903
00:28:18,559 --> 00:28:24,480
so i'm going to docker run it

904
00:28:22,240 --> 00:28:25,679
i have a what i call it my hack

905
00:28:24,480 --> 00:28:27,600
container

906
00:28:25,679 --> 00:28:29,840
but basically this is a container that i

907
00:28:27,600 --> 00:28:31,840
just has like netcat and nmap and

908
00:28:29,840 --> 00:28:33,760
some bash aliases and a lot of goodies

909
00:28:31,840 --> 00:28:35,600
that i use to explore kubernetes

910
00:28:33,760 --> 00:28:36,879
and i just push this you push this

911
00:28:35,600 --> 00:28:38,879
whenever i make a change to it

912
00:28:36,880 --> 00:28:40,720
so i'm going to run this locally you can

913
00:28:38,880 --> 00:28:42,000
see here i've got two commands that

914
00:28:40,720 --> 00:28:42,960
might be interesting to you that we're

915
00:28:42,000 --> 00:28:44,080
going to use in a moment when we're

916
00:28:42,960 --> 00:28:47,679
running kubernetes

917
00:28:44,080 --> 00:28:50,480
and you can see i'm root here on my

918
00:28:47,679 --> 00:28:52,320
uh my system if we if we una minus a you

919
00:28:50,480 --> 00:28:53,120
can see i'm running manjaro linux kernel

920
00:28:52,320 --> 00:28:56,559
version

921
00:28:53,120 --> 00:28:58,479
or 4.19 and this is the kernel on my

922
00:28:56,559 --> 00:29:00,158
system right this isn't some newly

923
00:28:58,480 --> 00:29:01,679
invented magical virtual kernel or

924
00:29:00,159 --> 00:29:03,200
anything this is just the application

925
00:29:01,679 --> 00:29:04,159
running in the context of c groups and

926
00:29:03,200 --> 00:29:07,039
namespaces

927
00:29:04,159 --> 00:29:08,159
interfacing with my existing kernel so

928
00:29:07,039 --> 00:29:13,279
touch

929
00:29:08,159 --> 00:29:16,000
user local bin fosdem

930
00:29:13,279 --> 00:29:17,279
you can see here except for this time if

931
00:29:16,000 --> 00:29:18,640
you look at the end you can see we're

932
00:29:17,279 --> 00:29:20,080
able to get information from the docker

933
00:29:18,640 --> 00:29:21,840
context we're able to get the name of

934
00:29:20,080 --> 00:29:22,480
the image that executed this command as

935
00:29:21,840 --> 00:29:25,678
well as the

936
00:29:22,480 --> 00:29:27,679
the image id so falco starts to

937
00:29:25,679 --> 00:29:29,279
pull information from our system as

938
00:29:27,679 --> 00:29:31,279
things happen at different

939
00:29:29,279 --> 00:29:32,640
layers and if it's running locally we're

940
00:29:31,279 --> 00:29:34,320
able to audit it but if it's running in

941
00:29:32,640 --> 00:29:35,840
a container we're able to get even more

942
00:29:34,320 --> 00:29:36,799
information from the data streams that

943
00:29:35,840 --> 00:29:40,320
exist in

944
00:29:36,799 --> 00:29:43,520
a containerized environment okay

945
00:29:40,320 --> 00:29:47,520
so let's do this in kubernetes so

946
00:29:43,520 --> 00:29:51,039
i'm gonna go back to uh

947
00:29:47,520 --> 00:29:51,039
my public speaking repo here

948
00:29:51,360 --> 00:29:58,000
slides

949
00:29:54,799 --> 00:30:01,360
cool and i'm going to alias

950
00:29:58,000 --> 00:30:05,039
k is equal to cubectyl i'm going to

951
00:30:01,360 --> 00:30:08,080
k get pods

952
00:30:05,039 --> 00:30:10,720
so oh gosh positive wi-fi

953
00:30:08,080 --> 00:30:11,520
come on there we go no resources found

954
00:30:10,720 --> 00:30:13,200
i'll try to keep the

955
00:30:11,520 --> 00:30:14,960
the internet to a minimum here as we

956
00:30:13,200 --> 00:30:16,320
wrap up my talk um but you can see

957
00:30:14,960 --> 00:30:17,279
there's nothing running in the default

958
00:30:16,320 --> 00:30:19,039
name spaces

959
00:30:17,279 --> 00:30:21,039
and i'm going to use namespaces as a way

960
00:30:19,039 --> 00:30:22,879
to demonstrate that i do have in fact

961
00:30:21,039 --> 00:30:24,879
have global privileges on

962
00:30:22,880 --> 00:30:26,880
this this kubernetes cluster on this

963
00:30:24,880 --> 00:30:29,600
system so i'm going to list

964
00:30:26,880 --> 00:30:31,039
name spaces so i get name spaces and you

965
00:30:29,600 --> 00:30:33,199
can see here i have falco

966
00:30:31,039 --> 00:30:34,480
in the falco namespace gatekeeper and

967
00:30:33,200 --> 00:30:37,440
gatekeeper system

968
00:30:34,480 --> 00:30:39,120
all installed so if i go to my config

969
00:30:37,440 --> 00:30:42,880
directory

970
00:30:39,120 --> 00:30:46,799
um dot cube dot config

971
00:30:42,880 --> 00:30:49,360
sorry dot cube and listing here

972
00:30:46,799 --> 00:30:50,080
you can see i have config config admin

973
00:30:49,360 --> 00:30:52,320
and config

974
00:30:50,080 --> 00:30:54,240
default admin is the one i'm using now

975
00:30:52,320 --> 00:30:57,760
but if we copy

976
00:30:54,240 --> 00:30:59,200
config default over here

977
00:30:57,760 --> 00:31:00,960
it's still going to be interacting with

978
00:30:59,200 --> 00:31:02,640
the same kubernetes cluster

979
00:31:00,960 --> 00:31:04,240
except this time we're going to be using

980
00:31:02,640 --> 00:31:05,919
a different service account which means

981
00:31:04,240 --> 00:31:08,320
this user that i'm now

982
00:31:05,919 --> 00:31:09,519
running as should not have access to

983
00:31:08,320 --> 00:31:11,120
these name spaces and

984
00:31:09,519 --> 00:31:13,039
the the simple trick here is we should

985
00:31:11,120 --> 00:31:16,000
not be able to list name spaces

986
00:31:13,039 --> 00:31:16,559
so okay get namespaces and you're going

987
00:31:16,000 --> 00:31:19,120
to notice

988
00:31:16,559 --> 00:31:20,158
and see that the kubernetes api server

989
00:31:19,120 --> 00:31:22,320
rejected this

990
00:31:20,159 --> 00:31:24,399
request it's preventing us from doing

991
00:31:22,320 --> 00:31:27,279
something it doesn't want us to do

992
00:31:24,399 --> 00:31:28,879
but as a savvy computer user we

993
00:31:27,279 --> 00:31:29,519
understand that there may or may not be

994
00:31:28,880 --> 00:31:32,640
ways

995
00:31:29,519 --> 00:31:34,880
around this so let's go now

996
00:31:32,640 --> 00:31:36,559
still as my default user without access

997
00:31:34,880 --> 00:31:37,440
to the rest of the namespaces in my

998
00:31:36,559 --> 00:31:40,480
cluster

999
00:31:37,440 --> 00:31:42,080
we can list pods and we can list pods in

1000
00:31:40,480 --> 00:31:43,679
the default name space fine but if we

1001
00:31:42,080 --> 00:31:44,799
try the list pods in a different name

1002
00:31:43,679 --> 00:31:46,960
space

1003
00:31:44,799 --> 00:31:48,720
we happen to know falco exists you'll

1004
00:31:46,960 --> 00:31:52,000
see again that it's going to get

1005
00:31:48,720 --> 00:31:53,919
rejected so here in my

1006
00:31:52,000 --> 00:31:57,519
fosdem 2020 directory

1007
00:31:53,919 --> 00:32:01,600
i have a small bash function called

1008
00:31:57,519 --> 00:32:03,760
shell and you go in here and you can see

1009
00:32:01,600 --> 00:32:05,519
that we have some very interesting

1010
00:32:03,760 --> 00:32:07,519
configuration bits defined as well as

1011
00:32:05,519 --> 00:32:10,080
that original kubernetes cluster

1012
00:32:07,519 --> 00:32:10,640
uh container image that i ran moments

1013
00:32:10,080 --> 00:32:12,240
ago

1014
00:32:10,640 --> 00:32:14,480
on my local laptop and we're going to

1015
00:32:12,240 --> 00:32:16,080
run this in kubernetes

1016
00:32:14,480 --> 00:32:17,519
there's a few bits of configuration here

1017
00:32:16,080 --> 00:32:20,320
that we're going to prevent from

1018
00:32:17,519 --> 00:32:22,480
happening again using a tool like opa

1019
00:32:20,320 --> 00:32:24,080
which is this very lovely security

1020
00:32:22,480 --> 00:32:26,720
context privileged

1021
00:32:24,080 --> 00:32:27,519
equals true so kubernetes is an

1022
00:32:26,720 --> 00:32:29,919
abstraction

1023
00:32:27,519 --> 00:32:30,799
right uh and because of this abstraction

1024
00:32:29,919 --> 00:32:33,360
you may not quite

1025
00:32:30,799 --> 00:32:35,120
understand truly what's going on as you

1026
00:32:33,360 --> 00:32:36,719
go down to the internal layers of the

1027
00:32:35,120 --> 00:32:39,360
system that's running kubernetes

1028
00:32:36,720 --> 00:32:42,480
and basically what's happening here is

1029
00:32:39,360 --> 00:32:44,879
that we're able to go through and

1030
00:32:42,480 --> 00:32:46,480
escalate privileges and exploit this

1031
00:32:44,880 --> 00:32:47,919
cluster so i have five minutes left

1032
00:32:46,480 --> 00:32:49,279
and then we have 10 minutes for

1033
00:32:47,919 --> 00:32:50,000
questions so i'm going to go pretty

1034
00:32:49,279 --> 00:32:50,960
quick here

1035
00:32:50,000 --> 00:32:53,919
so what we're going to do is we're going

1036
00:32:50,960 --> 00:32:56,399
to run this function shell

1037
00:32:53,919 --> 00:32:57,600
first we're going to source it now we're

1038
00:32:56,399 --> 00:32:59,039
going to run shell

1039
00:32:57,600 --> 00:33:00,639
and so what this is doing is it's

1040
00:32:59,039 --> 00:33:02,158
basically creating a tty

1041
00:33:00,640 --> 00:33:04,399
in my container image running in

1042
00:33:02,159 --> 00:33:08,000
kubernetes

1043
00:33:04,399 --> 00:33:11,279
and here i am i'm root at shell as

1044
00:33:08,000 --> 00:33:12,960
uh the user in the container i can do a

1045
00:33:11,279 --> 00:33:14,240
list and you can see that i'm in the

1046
00:33:12,960 --> 00:33:17,760
root file system of

1047
00:33:14,240 --> 00:33:19,840
my linux system but if i cut out

1048
00:33:17,760 --> 00:33:21,360
etsy motd you're gonna see there's two

1049
00:33:19,840 --> 00:33:23,120
commands here that we're gonna use

1050
00:33:21,360 --> 00:33:24,399
because privilege is equal to true i'm

1051
00:33:23,120 --> 00:33:26,399
able to go through

1052
00:33:24,399 --> 00:33:28,399
and i'm able to jump into the pid1

1053
00:33:26,399 --> 00:33:31,279
namespace as well as the mount

1054
00:33:28,399 --> 00:33:34,799
the user and the network namespaces and

1055
00:33:31,279 --> 00:33:39,840
i'm able to basically build a tty

1056
00:33:34,799 --> 00:33:39,840
through this

1057
00:33:40,640 --> 00:33:46,080
such as this so now

1058
00:33:44,720 --> 00:33:48,799
i'm actually going to do this with bash

1059
00:33:46,080 --> 00:33:48,799
at the end sorry

1060
00:33:49,440 --> 00:33:57,600
ben bash now you can see i'm ip at 172

1061
00:33:54,320 --> 00:33:58,559
2035 32 which if you've ever run an ec2

1062
00:33:57,600 --> 00:34:00,240
instance before

1063
00:33:58,559 --> 00:34:01,600
you'll know that this looks like an uh

1064
00:34:00,240 --> 00:34:04,320
default vpc

1065
00:34:01,600 --> 00:34:05,120
uh amazon instance id and if i list

1066
00:34:04,320 --> 00:34:07,678
where i am

1067
00:34:05,120 --> 00:34:08,319
you can see now i am actually on a

1068
00:34:07,679 --> 00:34:10,800
different

1069
00:34:08,320 --> 00:34:12,480
file system than it was before because i

1070
00:34:10,800 --> 00:34:14,159
escalated to the amount namespace that

1071
00:34:12,480 --> 00:34:16,800
the container had access to

1072
00:34:14,159 --> 00:34:19,040
using in s enter to give you an example

1073
00:34:16,800 --> 00:34:23,280
of where i am and what's going on

1074
00:34:19,040 --> 00:34:26,239
i'm going to do a docker list

1075
00:34:23,280 --> 00:34:26,240
sorry docker ps

1076
00:34:28,560 --> 00:34:32,399
and you can see all the containers

1077
00:34:29,760 --> 00:34:34,320
running in kubernetes as the user of the

1078
00:34:32,399 --> 00:34:35,520
linux system that kubernetes is running

1079
00:34:34,320 --> 00:34:38,639
on top of

1080
00:34:35,520 --> 00:34:43,440
in amazon linux there is a well-known

1081
00:34:38,639 --> 00:34:43,440
ip address that looks like this

1082
00:34:45,359 --> 00:34:48,560
thanks i'm just going to do this so i

1083
00:34:46,800 --> 00:34:51,679
can copy it

1084
00:34:48,560 --> 00:34:55,839
sorry i'm trying to go fast here

1085
00:34:51,679 --> 00:34:59,680
oh thanks i know i know

1086
00:34:55,839 --> 00:35:02,799
cat etsy m-o-t-d

1087
00:34:59,680 --> 00:35:06,000
sorry fosdem wi-fi is hard

1088
00:35:02,800 --> 00:35:07,599
we're going to run our units enter again

1089
00:35:06,000 --> 00:35:09,359
run our curl and then we're going to

1090
00:35:07,599 --> 00:35:13,680
actually build this request

1091
00:35:09,359 --> 00:35:15,680
we're going to go to the 2019 api 1001.

1092
00:35:13,680 --> 00:35:18,560
you see here we have user space this is

1093
00:35:15,680 --> 00:35:23,919
where things are about to get exciting

1094
00:35:18,560 --> 00:35:23,920
and um did i spell this wrong

1095
00:35:26,160 --> 00:35:30,319
i hear a lot of mumbling but i can't

1096
00:35:27,520 --> 00:35:32,480
understand data user oh user data thank

1097
00:35:30,320 --> 00:35:34,320
you

1098
00:35:32,480 --> 00:35:36,079
all right there we go so if we scroll up

1099
00:35:34,320 --> 00:35:38,320
this is the configuration file that cops

1100
00:35:36,079 --> 00:35:39,599
use to bootstrap kubernetes and as i

1101
00:35:38,320 --> 00:35:41,599
get this from the amazon meta

1102
00:35:39,599 --> 00:35:42,720
information i come in here and i can

1103
00:35:41,599 --> 00:35:44,880
actually see

1104
00:35:42,720 --> 00:35:46,399
that this was hard coded on the system

1105
00:35:44,880 --> 00:35:48,880
and

1106
00:35:46,400 --> 00:35:50,000
we have not only privileged equals true

1107
00:35:48,880 --> 00:35:53,680
so we're going to do a grep

1108
00:35:50,000 --> 00:35:57,760
for minus i priv but we can actually get

1109
00:35:53,680 --> 00:35:59,680
minus i config and you can see

1110
00:35:57,760 --> 00:36:01,359
that i was able to get the cube config

1111
00:35:59,680 --> 00:36:04,560
path on the system

1112
00:36:01,359 --> 00:36:04,560
and cap this out

1113
00:36:05,040 --> 00:36:09,920
here poof root cluster access from cops

1114
00:36:08,480 --> 00:36:11,680
running in kubernetes what i would

1115
00:36:09,920 --> 00:36:13,280
otherwise not have access to

1116
00:36:11,680 --> 00:36:15,200
there's my cert material there on the

1117
00:36:13,280 --> 00:36:17,200
screen i would be able to copy this down

1118
00:36:15,200 --> 00:36:20,000
locally and basically escalate my way

1119
00:36:17,200 --> 00:36:21,040
to the rest of the cluster and exploit

1120
00:36:20,000 --> 00:36:22,880
kubernetes

1121
00:36:21,040 --> 00:36:24,240
while it's running unsecure so if you're

1122
00:36:22,880 --> 00:36:25,680
not already preventing this from

1123
00:36:24,240 --> 00:36:26,399
happening i'm going to show you how to

1124
00:36:25,680 --> 00:36:29,200
do it

1125
00:36:26,400 --> 00:36:30,160
so what we want to do is we're going to

1126
00:36:29,200 --> 00:36:33,279
go back to this

1127
00:36:30,160 --> 00:36:34,078
directory here and i have some opa

1128
00:36:33,280 --> 00:36:35,520
policy

1129
00:36:34,079 --> 00:36:36,960
that's going to get installed for with

1130
00:36:35,520 --> 00:36:38,400
gatekeeper that if you want to go and

1131
00:36:36,960 --> 00:36:40,079
actually look at what it's doing it's a

1132
00:36:38,400 --> 00:36:43,880
lovely set of default policy

1133
00:36:40,079 --> 00:36:46,320
and we're just going to k apply minus f

1134
00:36:43,880 --> 00:36:47,520
gatekeeper.yaml and what this is going

1135
00:36:46,320 --> 00:36:49,359
to do

1136
00:36:47,520 --> 00:36:51,200
remember i'm still this default user but

1137
00:36:49,359 --> 00:36:52,240
i was able to escalate my way through to

1138
00:36:51,200 --> 00:36:54,078
get the root config

1139
00:36:52,240 --> 00:36:55,118
what opa is going to do now for us is

1140
00:36:54,079 --> 00:36:55,920
it's going to prevent this from

1141
00:36:55,119 --> 00:36:58,240
happening

1142
00:36:55,920 --> 00:36:58,240
again

1143
00:36:59,839 --> 00:37:02,720
why did this not work

1144
00:37:05,119 --> 00:37:09,839
oh yeah thank you

1145
00:37:10,640 --> 00:37:14,240
it doesn't work because our back is

1146
00:37:11,920 --> 00:37:18,160
preventing us from taking action in this

1147
00:37:14,240 --> 00:37:18,160
uh defaults nope admin

1148
00:37:18,320 --> 00:37:25,760
to cube config

1149
00:37:22,160 --> 00:37:27,440
yes run this again and so now opa is

1150
00:37:25,760 --> 00:37:30,560
going to prevent us from

1151
00:37:27,440 --> 00:37:31,520
taking action again and if i try to run

1152
00:37:30,560 --> 00:37:34,000
my shell

1153
00:37:31,520 --> 00:37:35,759
again you're going to see here it's

1154
00:37:34,000 --> 00:37:38,160
effectively denying this request

1155
00:37:35,760 --> 00:37:40,079
so what does falco have to say about all

1156
00:37:38,160 --> 00:37:41,200
of this so i have an alias here called

1157
00:37:40,079 --> 00:37:43,119
falco logs

1158
00:37:41,200 --> 00:37:44,640
and if i can run that and basically all

1159
00:37:43,119 --> 00:37:47,839
it does is it's going to run k

1160
00:37:44,640 --> 00:37:51,118
logs uh minus label

1161
00:37:47,839 --> 00:37:54,560
app is equal to falco

1162
00:37:51,119 --> 00:37:56,720
in the falco namespace minus f

1163
00:37:54,560 --> 00:37:57,920
and this is where the whole lesson comes

1164
00:37:56,720 --> 00:38:00,480
to life right

1165
00:37:57,920 --> 00:38:01,920
this is where we can actually see from

1166
00:38:00,480 --> 00:38:04,000
the linux kernel

1167
00:38:01,920 --> 00:38:05,839
what was happening on those systems that

1168
00:38:04,000 --> 00:38:06,320
are echoing these alerts out to standard

1169
00:38:05,839 --> 00:38:08,000
out

1170
00:38:06,320 --> 00:38:10,000
and we're actually able to create this

1171
00:38:08,000 --> 00:38:12,800
policy to prevent it from happening

1172
00:38:10,000 --> 00:38:13,440
again so the story here if we look at

1173
00:38:12,800 --> 00:38:15,200
our

1174
00:38:13,440 --> 00:38:16,960
our alerts that we're getting it's

1175
00:38:15,200 --> 00:38:19,680
pretty concerning um

1176
00:38:16,960 --> 00:38:21,119
first my container happened to swipe our

1177
00:38:19,680 --> 00:38:22,319
bash history away

1178
00:38:21,119 --> 00:38:24,240
and we're starting to get information

1179
00:38:22,320 --> 00:38:26,160
from kubernetes and from docker

1180
00:38:24,240 --> 00:38:27,279
we're going through and we're creating

1181
00:38:26,160 --> 00:38:29,359
new shells

1182
00:38:27,280 --> 00:38:31,280
we started a privileged containers falco

1183
00:38:29,359 --> 00:38:33,598
was able to alert that

1184
00:38:31,280 --> 00:38:34,480
to us as well and here at the very end

1185
00:38:33,599 --> 00:38:36,400
you can see the

1186
00:38:34,480 --> 00:38:37,520
the big exploit itself privileged

1187
00:38:36,400 --> 00:38:39,119
containers stacked

1188
00:38:37,520 --> 00:38:40,800
and that's where i started to escalate

1189
00:38:39,119 --> 00:38:43,520
into different parts of

1190
00:38:40,800 --> 00:38:44,480
the system so the story here the threat

1191
00:38:43,520 --> 00:38:46,320
model here is

1192
00:38:44,480 --> 00:38:48,480
there are ways of hacking around things

1193
00:38:46,320 --> 00:38:50,079
if you're not taking preventative action

1194
00:38:48,480 --> 00:38:52,240
but in some cases that might not be

1195
00:38:50,079 --> 00:38:53,599
enough and so being able to detect these

1196
00:38:52,240 --> 00:38:54,399
types of events and these types of

1197
00:38:53,599 --> 00:38:56,720
anomalies

1198
00:38:54,400 --> 00:38:57,680
using tools like ebpf allow you to do it

1199
00:38:56,720 --> 00:38:59,040
in a safe way

1200
00:38:57,680 --> 00:39:00,960
so that you and your team and your

1201
00:38:59,040 --> 00:39:02,480
infrastructure can begin to have this

1202
00:39:00,960 --> 00:39:04,720
sort of checks and balances

1203
00:39:02,480 --> 00:39:05,680
as you go back and forth between

1204
00:39:04,720 --> 00:39:08,000
security

1205
00:39:05,680 --> 00:39:08,799
approaches with prevention and security

1206
00:39:08,000 --> 00:39:11,040
approaches

1207
00:39:08,800 --> 00:39:12,480
with detection so if you want to get

1208
00:39:11,040 --> 00:39:13,440
involved with any of these projects

1209
00:39:12,480 --> 00:39:15,520
they're all cncf

1210
00:39:13,440 --> 00:39:16,800
projects myself and i'm sure many other

1211
00:39:15,520 --> 00:39:18,720
maintainers here

1212
00:39:16,800 --> 00:39:19,839
would love to have you involved so feel

1213
00:39:18,720 --> 00:39:22,319
free to reach out to

1214
00:39:19,839 --> 00:39:24,240
to any of us and if anybody has any

1215
00:39:22,320 --> 00:39:26,400
questions i think i have about

1216
00:39:24,240 --> 00:39:27,759
seven or eight minutes left and why we

1217
00:39:26,400 --> 00:39:29,839
have the environment on the screen

1218
00:39:27,760 --> 00:39:30,800
i'm happy to answer questions or show

1219
00:39:29,839 --> 00:39:32,880
folks things

1220
00:39:30,800 --> 00:39:34,160
or or anything for that matter so thank

1221
00:39:32,880 --> 00:39:42,650
you all for coming

1222
00:39:34,160 --> 00:39:45,819
uh i'm chris nova

1223
00:39:42,650 --> 00:39:45,820
[Applause]

1224
00:39:46,320 --> 00:39:50,480
and then um one thing as people start

1225
00:39:49,440 --> 00:39:52,960
leaving the room

1226
00:39:50,480 --> 00:39:54,640
if somebody has a question i'm gonna say

1227
00:39:52,960 --> 00:39:56,160
the question back for the recording so

1228
00:39:54,640 --> 00:39:59,279
uh just try to be patient with us as we

1229
00:39:56,160 --> 00:39:59,279
do the audio relaying here

1230
00:40:00,160 --> 00:40:11,839
can i take one or two yeah yeah go for

1231
00:40:01,760 --> 00:40:11,839
it yeah

1232
00:40:14,880 --> 00:40:17,119
hi

1233
00:40:19,760 --> 00:40:27,839
and what is the performance

1234
00:40:24,800 --> 00:40:28,160
what is the performance impact of falco

1235
00:40:27,839 --> 00:40:30,640
on

1236
00:40:28,160 --> 00:40:31,920
one word you have to yell at me what is

1237
00:40:30,640 --> 00:40:35,759
the performance

1238
00:40:31,920 --> 00:40:38,480
impact on of falco on systems

1239
00:40:35,760 --> 00:40:39,839
negligible so the question was um and

1240
00:40:38,480 --> 00:40:41,920
i'll say this for the recording

1241
00:40:39,839 --> 00:40:43,599
uh the question was what's the impact of

1242
00:40:41,920 --> 00:40:45,359
falco on the underlying system and my

1243
00:40:43,599 --> 00:40:48,319
response was negligible

1244
00:40:45,359 --> 00:40:50,319
and the reason for that was because um

1245
00:40:48,319 --> 00:40:52,400
again 16 megabytes per core

1246
00:40:50,319 --> 00:40:54,400
and it's written c plus plus so we've

1247
00:40:52,400 --> 00:40:56,319
got some document documents uh out there

1248
00:40:54,400 --> 00:40:58,480
on the internet i'll add one to the

1249
00:40:56,319 --> 00:40:59,599
the the markdown document here where we

1250
00:40:58,480 --> 00:41:01,280
have folks running

1251
00:40:59,599 --> 00:41:03,359
you know upwards of 2000 nodes and

1252
00:41:01,280 --> 00:41:04,720
kubernetes all running falco

1253
00:41:03,359 --> 00:41:06,880
and still able to maintain their other

1254
00:41:04,720 --> 00:41:08,720
production loads is fine in fact

1255
00:41:06,880 --> 00:41:10,319
skyscanner a company just released a

1256
00:41:08,720 --> 00:41:12,160
blog that i'll put a link to

1257
00:41:10,319 --> 00:41:13,520
they have wonderful metrics where

1258
00:41:12,160 --> 00:41:15,040
they've been doing load testing and

1259
00:41:13,520 --> 00:41:20,240
benchmarking with falco and you can see

1260
00:41:15,040 --> 00:41:22,079
the performance of it

1261
00:41:20,240 --> 00:41:24,160
yeah if you have questions just come

1262
00:41:22,079 --> 00:41:26,480
right up here we'll answer them for the

1263
00:41:24,160 --> 00:41:29,040
recording how does this

1264
00:41:26,480 --> 00:41:30,640
how does this compare tools this how

1265
00:41:29,040 --> 00:41:33,359
does this compare to the standard

1266
00:41:30,640 --> 00:41:34,879
linux audit framework how does this

1267
00:41:33,359 --> 00:41:35,680
compare to the standard linux audit

1268
00:41:34,880 --> 00:41:37,920
framework

1269
00:41:35,680 --> 00:41:39,359
so it does similar things but it takes

1270
00:41:37,920 --> 00:41:41,119
it a step further when you start looking

1271
00:41:39,359 --> 00:41:42,799
at how we're able to enrich that

1272
00:41:41,119 --> 00:41:44,160
otherwise only available linux

1273
00:41:42,800 --> 00:41:47,200
information with

1274
00:41:44,160 --> 00:41:49,200
kubernetes with containers with other uh

1275
00:41:47,200 --> 00:41:50,640
bits of information and data streams

1276
00:41:49,200 --> 00:41:52,720
coming out of your system

1277
00:41:50,640 --> 00:41:53,759
we're right now building a new api for

1278
00:41:52,720 --> 00:41:56,480
inputs allowing

1279
00:41:53,760 --> 00:41:58,079
dynamic inputs being loaded into falco

1280
00:41:56,480 --> 00:41:59,200
so we could potentially start to stream

1281
00:41:58,079 --> 00:42:01,760
information about

1282
00:41:59,200 --> 00:42:02,879
io block devices xdp the rest of the

1283
00:42:01,760 --> 00:42:04,079
linux kernel

1284
00:42:02,880 --> 00:42:06,240
and other things happening on your

1285
00:42:04,079 --> 00:42:07,680
system and building hybrid objects with

1286
00:42:06,240 --> 00:42:11,200
all of these input streams

1287
00:42:07,680 --> 00:42:11,200
that takes it a step further than linux

1288
00:42:14,839 --> 00:42:19,279
audits

1289
00:42:17,280 --> 00:42:21,200
the question was do we plan to replace

1290
00:42:19,280 --> 00:42:23,200
the linux audit framework with falco

1291
00:42:21,200 --> 00:42:24,720
absolutely not what we want to do is we

1292
00:42:23,200 --> 00:42:26,720
want to make falco

1293
00:42:24,720 --> 00:42:28,240
in the community around falco mature

1294
00:42:26,720 --> 00:42:30,640
enough to where we can start to use

1295
00:42:28,240 --> 00:42:32,319
tools like the linux audit framework

1296
00:42:30,640 --> 00:42:33,759
in conjunction with these other tools

1297
00:42:32,319 --> 00:42:37,040
and assert rules against all of this

1298
00:42:33,760 --> 00:42:37,040
information coming into falco

1299
00:42:38,720 --> 00:42:41,279
yeah what's up

1300
00:42:42,800 --> 00:42:46,319
thank you very much really nice talk uh

1301
00:42:45,119 --> 00:42:49,040
my question would be

1302
00:42:46,319 --> 00:42:49,839
is it possible to turn the shield into a

1303
00:42:49,040 --> 00:42:52,880
weapon

1304
00:42:49,839 --> 00:42:54,799
meaning that somebody using falco and

1305
00:42:52,880 --> 00:42:57,280
observing those kernel

1306
00:42:54,800 --> 00:42:58,839
events and calls discover other

1307
00:42:57,280 --> 00:43:01,839
vulnerable

1308
00:42:58,839 --> 00:43:04,400
vulnerabilities in the system

1309
00:43:01,839 --> 00:43:05,520
by just playing around so the question

1310
00:43:04,400 --> 00:43:07,520
here was

1311
00:43:05,520 --> 00:43:09,200
would it be possible to discover other

1312
00:43:07,520 --> 00:43:10,640
vulnerabilities in a system

1313
00:43:09,200 --> 00:43:12,399
just by playing around with falco or

1314
00:43:10,640 --> 00:43:14,560
just seeing what falco has to say

1315
00:43:12,400 --> 00:43:16,480
and i think that was one of the lessons

1316
00:43:14,560 --> 00:43:18,799
that i was trying to allude to

1317
00:43:16,480 --> 00:43:20,800
which is giving an environment where

1318
00:43:18,800 --> 00:43:22,319
we're taking alerts like this

1319
00:43:20,800 --> 00:43:24,240
potentially this would be able to be

1320
00:43:22,319 --> 00:43:26,000
your first glimpse into building the

1321
00:43:24,240 --> 00:43:27,759
more mature threat model

1322
00:43:26,000 --> 00:43:30,000
um of understanding what actually

1323
00:43:27,760 --> 00:43:31,920
happened in my example i just kind of

1324
00:43:30,000 --> 00:43:33,280
did it in the reverse way like i sort of

1325
00:43:31,920 --> 00:43:34,079
did it backwards where i showed you the

1326
00:43:33,280 --> 00:43:35,520
threat model

1327
00:43:34,079 --> 00:43:37,520
and then i showed you what falco has to

1328
00:43:35,520 --> 00:43:40,079
say about it but the idea here is that

1329
00:43:37,520 --> 00:43:41,920
by detecting anomalies that you

1330
00:43:40,079 --> 00:43:43,440
are well known in linux you would

1331
00:43:41,920 --> 00:43:44,560
potentially be able to start a journey

1332
00:43:43,440 --> 00:43:46,800
into discovering

1333
00:43:44,560 --> 00:43:49,040
a cve remote command injection a root

1334
00:43:46,800 --> 00:43:53,280
kit whatever

1335
00:43:49,040 --> 00:43:54,720
yeah yeah does anybody want falco

1336
00:43:53,280 --> 00:43:55,359
stickers there's got some more up here

1337
00:43:54,720 --> 00:43:58,480
come

1338
00:43:55,359 --> 00:43:59,680
here here sorry

1339
00:43:58,480 --> 00:44:03,839
there's i don't know how many are left

1340
00:43:59,680 --> 00:44:03,839
there's one there's some there have fun

1341
00:44:04,319 --> 00:44:08,480
any other questions i'm gonna uh gonna

1342
00:44:07,200 --> 00:44:11,200
go stand over

1343
00:44:08,480 --> 00:44:12,640
here if folks want to come meet me but

1344
00:44:11,200 --> 00:44:13,839
expose them so i gotta get out of here

1345
00:44:12,640 --> 00:44:23,839
and let the next person

1346
00:44:13,839 --> 00:44:23,839
get ready thanks for coming everyone

1347
00:44:24,000 --> 00:44:26,079
you

