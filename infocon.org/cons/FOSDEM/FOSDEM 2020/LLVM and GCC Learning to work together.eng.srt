1
00:00:05,120 --> 00:00:08,400
ladies and gentlemen

2
00:00:06,080 --> 00:00:10,639
i'm jeremy bennett this is a bit of an

3
00:00:08,400 --> 00:00:12,880
experimental first for the llvmrem

4
00:00:10,639 --> 00:00:14,879
it's it's a panel session and we have

5
00:00:12,880 --> 00:00:17,600
one throat microphone

6
00:00:14,880 --> 00:00:18,960
um it's intended to stimulate a

7
00:00:17,600 --> 00:00:22,320
discussion

8
00:00:18,960 --> 00:00:22,960
um quick show of hands how many people

9
00:00:22,320 --> 00:00:27,439
here

10
00:00:22,960 --> 00:00:28,960
have worked or are working on llvm

11
00:00:27,439 --> 00:00:31,279
and i'd include in that anything in the

12
00:00:28,960 --> 00:00:34,079
llvm tool chain

13
00:00:31,279 --> 00:00:38,000
and how many people here are working on

14
00:00:34,079 --> 00:00:41,520
gcc or anything in the gnu tool chain

15
00:00:38,000 --> 00:00:43,920
okay how many people here have

16
00:00:41,520 --> 00:00:46,160
have dipped into or are dipping into

17
00:00:43,920 --> 00:00:47,840
both

18
00:00:46,160 --> 00:00:49,839
so actually there's a there's a number

19
00:00:47,840 --> 00:00:51,600
um

20
00:00:49,840 --> 00:00:53,680
the point is there are quite a few

21
00:00:51,600 --> 00:00:55,600
people who work or have worked on both

22
00:00:53,680 --> 00:00:58,480
projects

23
00:00:55,600 --> 00:00:59,520
and it's possibly time we tried to work

24
00:00:58,480 --> 00:01:02,559
out how to work

25
00:00:59,520 --> 00:01:02,960
better together we had a first session

26
00:01:02,559 --> 00:01:06,000
at this

27
00:01:02,960 --> 00:01:07,680
at the gnu tools cauldron and you can go

28
00:01:06,000 --> 00:01:08,479
and watch the videos online the link is

29
00:01:07,680 --> 00:01:11,040
on the

30
00:01:08,479 --> 00:01:12,400
abstract for this but we wanted to go

31
00:01:11,040 --> 00:01:16,320
into a primarily

32
00:01:12,400 --> 00:01:18,159
llvm audience and the llvm foundation

33
00:01:16,320 --> 00:01:20,240
suggested that fosdem was where you were

34
00:01:18,159 --> 00:01:24,840
going to find the broadest spectrum

35
00:01:20,240 --> 00:01:27,679
of views unlike not in california

36
00:01:24,840 --> 00:01:30,079
and so that's what we've got and we have

37
00:01:27,680 --> 00:01:31,840
three panelists to lead the discussion

38
00:01:30,079 --> 00:01:35,679
arnold de gran maison

39
00:01:31,840 --> 00:01:37,119
uh pedro alves and tom tromme um

40
00:01:35,680 --> 00:01:40,079
i'm going to let each of them briefly

41
00:01:37,119 --> 00:01:41,920
introduce themselves and then

42
00:01:40,079 --> 00:01:43,759
what we're looking for is a discussion

43
00:01:41,920 --> 00:01:45,759
about how we can work together

44
00:01:43,759 --> 00:01:47,200
and in particular afterwards we'll look

45
00:01:45,759 --> 00:01:48,560
at the recording and see if there's some

46
00:01:47,200 --> 00:01:50,240
concrete ideas

47
00:01:48,560 --> 00:01:52,159
of things we can actually take away and

48
00:01:50,240 --> 00:01:55,520
do rather than having a nice comfortable

49
00:01:52,159 --> 00:01:57,280
chat about them and then nothing happens

50
00:01:55,520 --> 00:01:58,560
so here's the aid memoir and we can

51
00:01:57,280 --> 00:02:01,920
cover anything else

52
00:01:58,560 --> 00:02:05,200
it's not just gcc and clang llvm

53
00:02:01,920 --> 00:02:09,119
it's the whole tool chains lldbf

54
00:02:05,200 --> 00:02:12,000
lld gdb bin utils and so forth

55
00:02:09,119 --> 00:02:12,400
so without further ado let me ask each

56
00:02:12,000 --> 00:02:14,640
of the

57
00:02:12,400 --> 00:02:16,879
panelists to just say a couple of words

58
00:02:14,640 --> 00:02:19,760
about themselves

59
00:02:16,879 --> 00:02:20,239
hi my name is tom trumy i work at ada

60
00:02:19,760 --> 00:02:23,760
core

61
00:02:20,239 --> 00:02:25,440
on primarily on gdb but in the past i've

62
00:02:23,760 --> 00:02:28,480
worked on

63
00:02:25,440 --> 00:02:30,959
gcc and i also worked on

64
00:02:28,480 --> 00:02:36,079
rust for a while so i worked on llvm and

65
00:02:30,959 --> 00:02:39,519
lldb as well

66
00:02:36,080 --> 00:02:42,640
hi my name is pedro alves and

67
00:02:39,519 --> 00:02:46,000
i work at red hat on the debug

68
00:02:42,640 --> 00:02:48,319
team and i i've been working on gdp for

69
00:02:46,000 --> 00:02:51,840
for a while and i'm a gdp maintainer and

70
00:02:48,319 --> 00:02:51,839
a contributor

71
00:02:53,680 --> 00:02:57,519
and i'm arno de gomezon i'm working at

72
00:02:55,920 --> 00:02:59,280
arm

73
00:02:57,519 --> 00:03:00,800
spent a long time in the in the

74
00:02:59,280 --> 00:03:03,440
compilation team at arm

75
00:03:00,800 --> 00:03:04,959
working on llvm and before joining arm i

76
00:03:03,440 --> 00:03:08,400
was in a startups

77
00:03:04,959 --> 00:03:09,920
doing on a custom dsp working on a

78
00:03:08,400 --> 00:03:12,560
custom dsp and a custom

79
00:03:09,920 --> 00:03:14,238
processor and i was in charge of the

80
00:03:12,560 --> 00:03:18,879
tool chain which was obviously

81
00:03:14,239 --> 00:03:21,599
llvm based can you speak up

82
00:03:18,879 --> 00:03:22,239
louder because if the mic doesn't go to

83
00:03:21,599 --> 00:03:26,959
the

84
00:03:22,239 --> 00:03:26,959
okay it just goes to the camera okay

85
00:03:30,560 --> 00:03:34,239
okay so this is intended to be a session

86
00:03:33,760 --> 00:03:36,079
where

87
00:03:34,239 --> 00:03:38,239
everyone participates the three at the

88
00:03:36,080 --> 00:03:41,280
front are to stimulate

89
00:03:38,239 --> 00:03:43,440
uh discussion um i've put up on the

90
00:03:41,280 --> 00:03:46,879
basis of the meeting we had

91
00:03:43,440 --> 00:03:48,959
the gnu cauldron some areas that i think

92
00:03:46,879 --> 00:03:51,359
matter and where we could work close

93
00:03:48,959 --> 00:03:54,159
together language standardization

94
00:03:51,360 --> 00:03:55,599
abi compatibility interoperability

95
00:03:54,159 --> 00:03:57,920
between the two chains

96
00:03:55,599 --> 00:03:58,879
and also channels of communication how

97
00:03:57,920 --> 00:04:00,319
do we talk

98
00:03:58,879 --> 00:04:02,239
together do we need different

99
00:04:00,319 --> 00:04:04,720
conferences and so forth

100
00:04:02,239 --> 00:04:05,439
what i'd like is each of the panelists

101
00:04:04,720 --> 00:04:08,799
now

102
00:04:05,439 --> 00:04:10,319
to give their first thought on the one

103
00:04:08,799 --> 00:04:15,840
most important thing we could do to

104
00:04:10,319 --> 00:04:15,839
improve cooperation

105
00:04:16,478 --> 00:04:21,440
i should have expected to be on the spot

106
00:04:19,279 --> 00:04:21,440
um

107
00:04:21,918 --> 00:04:27,520
yeah i'm very bad at planning um my

108
00:04:25,040 --> 00:04:28,240
you know my primary focus is on

109
00:04:27,520 --> 00:04:30,960
debugging

110
00:04:28,240 --> 00:04:32,639
so that's what i know the most about and

111
00:04:30,960 --> 00:04:35,198
when i look at the debugging world

112
00:04:32,639 --> 00:04:35,919
i think um it's actually in a worse

113
00:04:35,199 --> 00:04:39,520
state

114
00:04:35,919 --> 00:04:41,280
than like the the sort of the user

115
00:04:39,520 --> 00:04:44,639
language world you know like writing c

116
00:04:41,280 --> 00:04:46,960
or c plus plus and i think that one

117
00:04:44,639 --> 00:04:48,080
thing that would be very good to do is

118
00:04:46,960 --> 00:04:52,880
to have gcc

119
00:04:48,080 --> 00:04:55,758
and llvm sort of explicitly cooperate

120
00:04:52,880 --> 00:04:56,639
on improving the dwarf standard and

121
00:04:55,759 --> 00:05:00,320
documenting

122
00:04:56,639 --> 00:05:03,120
and sort of uh standardizing

123
00:05:00,320 --> 00:05:05,199
the extensions that they both use so i

124
00:05:03,120 --> 00:05:08,160
think that would be a very fruitful

125
00:05:05,199 --> 00:05:08,160
area of cooperation

126
00:05:09,600 --> 00:05:12,560
wow you've said everything

127
00:05:13,280 --> 00:05:20,159
uh i come i come from a

128
00:05:16,800 --> 00:05:22,840
debug background as well and uh actually

129
00:05:20,160 --> 00:05:25,759
my work on the compiler side is not very

130
00:05:22,840 --> 00:05:28,479
meaningful um

131
00:05:25,759 --> 00:05:30,320
looking at the current state and uh

132
00:05:28,479 --> 00:05:33,680
current like duopoly in

133
00:05:30,320 --> 00:05:36,800
in the debugger landing open source

134
00:05:33,680 --> 00:05:38,320
i see two aspects uh that would be nice

135
00:05:36,800 --> 00:05:40,639
to improve

136
00:05:38,320 --> 00:05:42,080
and one of them is an area of focus

137
00:05:40,639 --> 00:05:45,600
right now for our group it's

138
00:05:42,080 --> 00:05:48,159
on the quality of the bug information uh

139
00:05:45,600 --> 00:05:48,639
we're we've been looking at the quality

140
00:05:48,160 --> 00:05:51,680
of the

141
00:05:48,639 --> 00:05:53,280
dwarf that compilers emit

142
00:05:51,680 --> 00:05:54,960
does it represent the you know the

143
00:05:53,280 --> 00:05:56,880
original source accurately

144
00:05:54,960 --> 00:05:58,880
uh does it support the whole set of

145
00:05:56,880 --> 00:06:01,840
dwarf

146
00:05:58,880 --> 00:06:02,479
the whole features uh which compiler

147
00:06:01,840 --> 00:06:04,159
emits

148
00:06:02,479 --> 00:06:05,599
correct output which one doesn't which

149
00:06:04,160 --> 00:06:08,560
one needs to be fixed

150
00:06:05,600 --> 00:06:10,080
it would be nice if we joined efforts in

151
00:06:08,560 --> 00:06:12,319
the testing side

152
00:06:10,080 --> 00:06:13,120
in you know the testing frameworks that

153
00:06:12,319 --> 00:06:16,240
ex that

154
00:06:13,120 --> 00:06:18,160
validate the quality of the information

155
00:06:16,240 --> 00:06:19,759
i know that there have been efforts on

156
00:06:18,160 --> 00:06:23,120
the llvm side

157
00:06:19,759 --> 00:06:26,639
about this it'll be nice to

158
00:06:23,120 --> 00:06:28,160
chat about it and

159
00:06:26,639 --> 00:06:29,840
that was the second point which i forgot

160
00:06:28,160 --> 00:06:33,120
right now

161
00:06:29,840 --> 00:06:35,840
what was it it will come back

162
00:06:33,120 --> 00:06:35,840
sorry

163
00:06:37,280 --> 00:06:41,359
okay so it's a bit hard to be in the

164
00:06:39,039 --> 00:06:43,440
third position there

165
00:06:41,360 --> 00:06:44,639
but uh so to maybe to differentiate a

166
00:06:43,440 --> 00:06:46,960
bit but uh

167
00:06:44,639 --> 00:06:47,919
it i think it tightly links to what

168
00:06:46,960 --> 00:06:49,440
you've said

169
00:06:47,919 --> 00:06:52,240
and i think well we could probably

170
00:06:49,440 --> 00:06:54,960
better cooperate as communities

171
00:06:52,240 --> 00:06:56,639
is around the language standards uh my

172
00:06:54,960 --> 00:06:59,520
understanding of the language standards

173
00:06:56,639 --> 00:07:01,520
are the standards because if we consider

174
00:06:59,520 --> 00:07:05,120
dwarf as a language or not i don't know

175
00:07:01,520 --> 00:07:05,120
but the thing is

176
00:07:05,199 --> 00:07:09,280
my impression is that mostly in the

177
00:07:07,440 --> 00:07:13,280
standard committees we have companies

178
00:07:09,280 --> 00:07:14,318
are represented and whether this is llvm

179
00:07:13,280 --> 00:07:16,479
or gcc

180
00:07:14,319 --> 00:07:17,360
this is more tools for experiment

181
00:07:16,479 --> 00:07:20,080
experimented

182
00:07:17,360 --> 00:07:21,520
but experimenting with that uh with the

183
00:07:20,080 --> 00:07:23,840
new standards

184
00:07:21,520 --> 00:07:26,479
and uh but this is not representing the

185
00:07:23,840 --> 00:07:27,679
world gcc or the whole llvm community as

186
00:07:26,479 --> 00:07:30,800
a wall

187
00:07:27,680 --> 00:07:33,840
i i don't know if i'm right there

188
00:07:30,800 --> 00:07:35,919
but uh i don't think we we have llvm

189
00:07:33,840 --> 00:07:37,520
only representative or gcc only

190
00:07:35,919 --> 00:07:41,520
representative

191
00:07:37,520 --> 00:07:41,520
at the of those standards

192
00:07:43,599 --> 00:07:46,960
on kind of a tangent that touches

193
00:07:45,520 --> 00:07:48,400
standards

194
00:07:46,960 --> 00:07:50,239
again from the debug side because that's

195
00:07:48,400 --> 00:07:53,679
my expertise uh

196
00:07:50,240 --> 00:07:55,520
for example there's been a push on llvms

197
00:07:53,680 --> 00:07:59,199
for openmp support

198
00:07:55,520 --> 00:08:02,000
i think and yeah i'm sure and

199
00:07:59,199 --> 00:08:02,479
for debugging openmp there's a standard

200
00:08:02,000 --> 00:08:05,759
called

201
00:08:02,479 --> 00:08:07,840
ompd which is openmp debugging

202
00:08:05,759 --> 00:08:09,440
uh and that requires implementing a

203
00:08:07,840 --> 00:08:10,560
library that's exposed as a standard

204
00:08:09,440 --> 00:08:13,120
interface

205
00:08:10,560 --> 00:08:14,800
and what's happening right now is that

206
00:08:13,120 --> 00:08:18,160
llvm is implementing that

207
00:08:14,800 --> 00:08:19,440
library and glue side also needs to

208
00:08:18,160 --> 00:08:21,759
implement something like that

209
00:08:19,440 --> 00:08:23,599
exposing the same library and other tool

210
00:08:21,759 --> 00:08:26,879
chains like the intel compiler

211
00:08:23,599 --> 00:08:29,199
also is doing the same and we have a mix

212
00:08:26,879 --> 00:08:32,560
match of

213
00:08:29,199 --> 00:08:35,200
a matrix of debuggers cross

214
00:08:32,559 --> 00:08:36,159
runtimes like gdb against the llvm

215
00:08:35,200 --> 00:08:40,080
runtime gdb

216
00:08:36,159 --> 00:08:43,360
against omp from the new side and lldb

217
00:08:40,080 --> 00:08:46,800
against gc and you know the matrix

218
00:08:43,360 --> 00:08:49,360
it would be nice to see about

219
00:08:46,800 --> 00:08:51,519
sharing that infrastructure maybe

220
00:08:49,360 --> 00:08:53,920
sharing even the code

221
00:08:51,519 --> 00:08:56,640
and that can only work if you cooperate

222
00:08:53,920 --> 00:08:58,319
and discuss and experiment together

223
00:08:56,640 --> 00:09:00,240
and the other point which i had

224
00:08:58,320 --> 00:09:03,600
forgotten earlier came back to me

225
00:09:00,240 --> 00:09:07,519
it's i wanted to mention like the

226
00:09:03,600 --> 00:09:10,080
the uh like lodb uses

227
00:09:07,519 --> 00:09:12,240
the remote protocol from gdb and it has

228
00:09:10,080 --> 00:09:15,839
its own extensions

229
00:09:12,240 --> 00:09:18,160
and it would be nice to

230
00:09:15,839 --> 00:09:19,680
cooperate in the sense of ones that are

231
00:09:18,160 --> 00:09:22,000
generically usable

232
00:09:19,680 --> 00:09:24,560
would be standardized and documented in

233
00:09:22,000 --> 00:09:27,040
a single place

234
00:09:24,560 --> 00:09:27,599
and the longer we take to get to that

235
00:09:27,040 --> 00:09:30,160
point

236
00:09:27,600 --> 00:09:31,760
the more we will end up diverging and we

237
00:09:30,160 --> 00:09:37,839
don't want to end up in a place

238
00:09:31,760 --> 00:09:37,839
where tools end up more incompatible

239
00:09:38,640 --> 00:09:42,560
sorry about talking about debug stuff

240
00:09:45,760 --> 00:09:49,200
okay thank you um at this point i'd like

241
00:09:48,480 --> 00:09:51,839
to throw out

242
00:09:49,200 --> 00:09:53,120
the same question to the uh assembled

243
00:09:51,839 --> 00:09:55,200
multitude

244
00:09:53,120 --> 00:09:56,640
um if you'd like to put your hand up so

245
00:09:55,200 --> 00:09:58,399
we catch it on tape

246
00:09:56,640 --> 00:10:00,560
um if you make your point i will try and

247
00:09:58,399 --> 00:10:03,200
summarize it and repeat it so

248
00:10:00,560 --> 00:10:04,000
from the audit anyone here have a view

249
00:10:03,200 --> 00:10:06,079
on

250
00:10:04,000 --> 00:10:08,640
the most important areas where we could

251
00:10:06,079 --> 00:10:11,760
improve cooperation between gcc

252
00:10:08,640 --> 00:10:11,760
and llvm

253
00:10:14,399 --> 00:10:18,800
i think a neutral somewhere of a neutral

254
00:10:16,640 --> 00:10:19,279
forum for discussion would help in that

255
00:10:18,800 --> 00:10:21,680
you've got

256
00:10:19,279 --> 00:10:23,519
a set so basically llvm mailing list you

257
00:10:21,680 --> 00:10:24,880
have gcc mailing list you can be known

258
00:10:23,519 --> 00:10:27,120
in one and not the other

259
00:10:24,880 --> 00:10:28,079
and there's sometimes intimidating to

260
00:10:27,120 --> 00:10:30,240
cross the gap

261
00:10:28,079 --> 00:10:33,839
so i say more places where you can sort

262
00:10:30,240 --> 00:10:33,839
of tread on a more neutral place

263
00:10:34,000 --> 00:10:37,920
and yeah if you just say i'll repeat it

264
00:10:36,160 --> 00:10:42,480
for you i do not know if

265
00:10:37,920 --> 00:10:46,640
it's already done but gcc has a very

266
00:10:42,480 --> 00:10:51,200
big test suit of accepted tests but

267
00:10:46,640 --> 00:10:53,760
sorry by the gcc community

268
00:10:51,200 --> 00:10:55,760
we could throw together the tests for

269
00:10:53,760 --> 00:10:58,720
maintaining code quality

270
00:10:55,760 --> 00:11:00,000
so the suggestion is that gcc's big

271
00:10:58,720 --> 00:11:01,760
regression test suite

272
00:11:00,000 --> 00:11:03,519
could be brought together and have it as

273
00:11:01,760 --> 00:11:05,120
a test suite for llvm

274
00:11:03,519 --> 00:11:07,360
i have to say that professionally we've

275
00:11:05,120 --> 00:11:10,000
been doing that for 10 years

276
00:11:07,360 --> 00:11:11,680
so it's there but it will be good to

277
00:11:10,000 --> 00:11:12,880
formalize that so everyone can pick it

278
00:11:11,680 --> 00:11:14,160
up they don't have to come and get our

279
00:11:12,880 --> 00:11:17,040
magic copy of it

280
00:11:14,160 --> 00:11:19,279
any other comments have been integrated

281
00:11:17,040 --> 00:11:21,040
a couple of months ago

282
00:11:19,279 --> 00:11:22,480
excellent so we now have some of those

283
00:11:21,040 --> 00:11:24,000
there so that's great news

284
00:11:22,480 --> 00:11:25,839
uh the torture tests are there which are

285
00:11:24,000 --> 00:11:27,600
the ones that cause pain

286
00:11:25,839 --> 00:11:29,360
well it's not let's talk about that

287
00:11:27,600 --> 00:11:31,040
first time i i'm really curious about

288
00:11:29,360 --> 00:11:34,720
this

289
00:11:31,040 --> 00:11:36,160
like like i know gcc incorporates some

290
00:11:34,720 --> 00:11:38,320
things from llvm

291
00:11:36,160 --> 00:11:39,519
sanitizers or whatever and those are

292
00:11:38,320 --> 00:11:42,079
just imported

293
00:11:39,519 --> 00:11:44,320
periodically and maybe there's local

294
00:11:42,079 --> 00:11:47,760
hacks i don't really know

295
00:11:44,320 --> 00:11:49,920
on what basis are the gcc

296
00:11:47,760 --> 00:11:52,480
torture tests integrating llvm do

297
00:11:49,920 --> 00:11:54,399
patches go back to gcc

298
00:11:52,480 --> 00:11:56,240
you know is that because i feel like

299
00:11:54,399 --> 00:11:57,120
this is this is an important thing where

300
00:11:56,240 --> 00:11:58,480
i feel like

301
00:11:57,120 --> 00:12:00,720
like for instance this thing about

302
00:11:58,480 --> 00:12:02,240
cooperating on dwarf which is

303
00:12:00,720 --> 00:12:04,399
territory i'm really comfortable with

304
00:12:02,240 --> 00:12:06,320
right like there

305
00:12:04,399 --> 00:12:08,399
part of the process has to be like a

306
00:12:06,320 --> 00:12:08,959
social commitment by the maintainers to

307
00:12:08,399 --> 00:12:10,560
say

308
00:12:08,959 --> 00:12:13,599
if you're going to extend the dwarf you

309
00:12:10,560 --> 00:12:15,680
have to follow there are agreed-upon

310
00:12:13,600 --> 00:12:16,800
thing you have to upstream it or

311
00:12:15,680 --> 00:12:18,959
document it

312
00:12:16,800 --> 00:12:21,439
or whatever you know but that requires

313
00:12:18,959 --> 00:12:25,359
like a commitment from both sides

314
00:12:21,440 --> 00:12:27,839
but you know i'm concerned like

315
00:12:25,360 --> 00:12:30,399
just hearing that and if you don't know

316
00:12:27,839 --> 00:12:31,600
the answer like is it a fork of the gcc

317
00:12:30,399 --> 00:12:35,440
test suite that

318
00:12:31,600 --> 00:12:37,760
to me seems like worse somehow

319
00:12:35,440 --> 00:12:37,760
you know

320
00:12:45,519 --> 00:12:49,440
it is a fork and it works by actually

321
00:12:48,000 --> 00:12:50,399
having a black list of tests that won't

322
00:12:49,440 --> 00:12:52,480
run

323
00:12:50,399 --> 00:12:54,000
that's been done once before and of

324
00:12:52,480 --> 00:12:54,560
course then people end up running a

325
00:12:54,000 --> 00:12:56,959
10-year

326
00:12:54,560 --> 00:12:58,399
out-of-date test suite so i think there

327
00:12:56,959 --> 00:12:59,839
are two good points there one it's good

328
00:12:58,399 --> 00:13:01,600
that the cooperation is happening

329
00:12:59,839 --> 00:13:03,279
but the second is actually if it just

330
00:13:01,600 --> 00:13:05,200
leads to another fork then it's

331
00:13:03,279 --> 00:13:06,399
possibly not long-term valuable more

332
00:13:05,200 --> 00:13:09,440
comments from

333
00:13:06,399 --> 00:13:09,440
the assembled multitude

334
00:13:10,560 --> 00:13:13,680
uh yeah i think one thing that that

335
00:13:12,560 --> 00:13:16,000
works well that i see

336
00:13:13,680 --> 00:13:16,959
occur sometimes between projects is uh

337
00:13:16,000 --> 00:13:19,360
just practicing

338
00:13:16,959 --> 00:13:21,760
uh careful communication and respect

339
00:13:19,360 --> 00:13:24,639
kind of thing um it's it's very common

340
00:13:21,760 --> 00:13:26,639
um for people uh like i tried to

341
00:13:24,639 --> 00:13:27,920
dissuade people from saying oh why was

342
00:13:26,639 --> 00:13:29,920
this implemented this way

343
00:13:27,920 --> 00:13:31,199
or not that way kind of thing and

344
00:13:29,920 --> 00:13:32,479
generally be respectful of the

345
00:13:31,200 --> 00:13:34,320
competition i think helps

346
00:13:32,480 --> 00:13:36,320
in all discussions on either sides of

347
00:13:34,320 --> 00:13:40,480
things one thing

348
00:13:36,320 --> 00:13:42,800
that i wish we had more of was more of

349
00:13:40,480 --> 00:13:44,079
like an rfc proposal would be

350
00:13:42,800 --> 00:13:46,160
interesting for certain language

351
00:13:44,079 --> 00:13:49,439
extensions

352
00:13:46,160 --> 00:13:52,079
that uh like right now

353
00:13:49,440 --> 00:13:53,920
either side will ship extensions without

354
00:13:52,079 --> 00:13:56,319
input from the other

355
00:13:53,920 --> 00:13:58,160
uh and not necessarily take these to the

356
00:13:56,320 --> 00:14:01,519
iso standards bodies

357
00:13:58,160 --> 00:14:03,199
and i think that's okay but then

358
00:14:01,519 --> 00:14:05,040
typically multiple implementations will

359
00:14:03,199 --> 00:14:06,719
work out different kinks or interesting

360
00:14:05,040 --> 00:14:08,240
edge cases or things don't

361
00:14:06,720 --> 00:14:10,480
compose a certain way with other

362
00:14:08,240 --> 00:14:13,920
features and these typically only kind

363
00:14:10,480 --> 00:14:13,920
of shake out once you get more than one

364
00:14:14,839 --> 00:14:17,839
implementation

365
00:14:28,240 --> 00:14:33,120
it usually becomes very difficult from a

366
00:14:30,880 --> 00:14:35,680
documentation perspective

367
00:14:33,120 --> 00:14:37,040
trying to figure just that thing out so

368
00:14:35,680 --> 00:14:40,160
if some

369
00:14:37,040 --> 00:14:43,439
user of our code actually writes some

370
00:14:40,160 --> 00:14:46,480
code based on an extension by dcc

371
00:14:43,440 --> 00:14:48,560
that goes into this larger ecosystem

372
00:14:46,480 --> 00:14:50,399
trying to figure out like the rest of

373
00:14:48,560 --> 00:14:52,800
the components will work okay with it

374
00:14:50,399 --> 00:14:54,000
and it's just the night for right now so

375
00:14:52,800 --> 00:14:56,319
the comment being made

376
00:14:54,000 --> 00:14:57,760
is that if you have divergence of

377
00:14:56,320 --> 00:14:58,639
extensions as part of the language

378
00:14:57,760 --> 00:15:00,800
exploration

379
00:14:58,639 --> 00:15:02,399
then people writing application code

380
00:15:00,800 --> 00:15:06,399
have a nightmare of making sure

381
00:15:02,399 --> 00:15:09,199
it works on both gcc and llvm

382
00:15:06,399 --> 00:15:09,600
sorry just about the documentation thing

383
00:15:09,199 --> 00:15:12,639
i think

384
00:15:09,600 --> 00:15:14,959
one issue there is you know

385
00:15:12,639 --> 00:15:16,639
if you work on gcc you're familiar with

386
00:15:14,959 --> 00:15:18,479
gcc and if you work on

387
00:15:16,639 --> 00:15:19,839
clang you're familiar with clang there

388
00:15:18,480 --> 00:15:20,959
may be no one who can write that

389
00:15:19,839 --> 00:15:24,480
document

390
00:15:20,959 --> 00:15:26,160
who who understands the subtleties of

391
00:15:24,480 --> 00:15:28,560
the divergence in some particular

392
00:15:26,160 --> 00:15:30,480
feature you know but i really liked your

393
00:15:28,560 --> 00:15:33,359
point and it really reminds me actually

394
00:15:30,480 --> 00:15:35,759
of like what happens in the web world

395
00:15:33,360 --> 00:15:37,120
where you know different browsers

396
00:15:35,759 --> 00:15:40,240
collaborate

397
00:15:37,120 --> 00:15:41,759
and features sort of don't become web

398
00:15:40,240 --> 00:15:43,279
standards until they're implemented in

399
00:15:41,759 --> 00:15:46,880
multiple browsers

400
00:15:43,279 --> 00:15:49,519
and they have you know like you said

401
00:15:46,880 --> 00:15:50,160
more or less an rfc process and i think

402
00:15:49,519 --> 00:15:55,839
that would be

403
00:15:50,160 --> 00:15:55,839
an excellent idea

404
00:15:56,000 --> 00:16:03,120
well um so on the rfc process maybe one

405
00:16:00,079 --> 00:16:05,839
thought i have of where it might get

406
00:16:03,120 --> 00:16:07,920
hard to implement it is that the more

407
00:16:05,839 --> 00:16:10,639
people you involve into a discussion the

408
00:16:07,920 --> 00:16:13,040
longer it takes and it seems something

409
00:16:10,639 --> 00:16:13,759
i've seen in the past incompatibilities

410
00:16:13,040 --> 00:16:16,160
between two

411
00:16:13,759 --> 00:16:17,680
two tool chains appear because in one

412
00:16:16,160 --> 00:16:19,839
community there's

413
00:16:17,680 --> 00:16:21,359
a quick need to implement something

414
00:16:19,839 --> 00:16:22,480
would be relatively straightforward and

415
00:16:21,360 --> 00:16:25,680
in the other community

416
00:16:22,480 --> 00:16:26,160
they don't see the needs as quickly and

417
00:16:25,680 --> 00:16:28,160
so

418
00:16:26,160 --> 00:16:29,920
one community moves ahead because

419
00:16:28,160 --> 00:16:32,079
there's a genuine need for it

420
00:16:29,920 --> 00:16:34,079
and the other community doesn't react as

421
00:16:32,079 --> 00:16:36,000
quickly so that that might be

422
00:16:34,079 --> 00:16:37,680
something to overcome maybe not

423
00:16:36,000 --> 00:16:39,759
necessarily completely impossible

424
00:16:37,680 --> 00:16:40,880
from my point of view i would say my

425
00:16:39,759 --> 00:16:43,839
personal experiences

426
00:16:40,880 --> 00:16:44,560
i find most of the difficulties to come

427
00:16:43,839 --> 00:16:48,399
from

428
00:16:44,560 --> 00:16:50,319
probably the abi side in that

429
00:16:48,399 --> 00:16:52,240
whenever new feature gets implemented

430
00:16:50,320 --> 00:16:54,079
quite often without realizing

431
00:16:52,240 --> 00:16:55,440
there's some small binary interface all

432
00:16:54,079 --> 00:16:55,758
of a sudden that gets created and it

433
00:16:55,440 --> 00:16:58,480
sets

434
00:16:55,759 --> 00:16:59,600
us a defective standard and it doesn't

435
00:16:58,480 --> 00:17:01,680
get documented

436
00:16:59,600 --> 00:17:02,959
maybe that's because i work more on back

437
00:17:01,680 --> 00:17:05,760
end side stuff

438
00:17:02,959 --> 00:17:06,639
and it's just it seems almost probably

439
00:17:05,760 --> 00:17:09,359
every week

440
00:17:06,640 --> 00:17:11,360
at least every month some small extra

441
00:17:09,359 --> 00:17:12,240
addition happens to a binary interface

442
00:17:11,359 --> 00:17:14,319
somewhere

443
00:17:12,240 --> 00:17:15,280
and i would say the majority of binary

444
00:17:14,319 --> 00:17:17,119
interfaces

445
00:17:15,280 --> 00:17:19,199
go completely undocumented and so i'm

446
00:17:17,119 --> 00:17:22,159
starting to wonder

447
00:17:19,199 --> 00:17:23,839
would it make a difference if we tried

448
00:17:22,160 --> 00:17:24,959
to recognize oh there is a new binary

449
00:17:23,839 --> 00:17:27,198
interface that's at least just

450
00:17:24,959 --> 00:17:28,880
documented so it becomes more visible

451
00:17:27,199 --> 00:17:30,400
and it's not just three people who

452
00:17:28,880 --> 00:17:34,240
implemented it and you have to reverse

453
00:17:30,400 --> 00:17:34,240
engineer from code would that be helpful

454
00:17:37,200 --> 00:17:40,880
i have the impression that just

455
00:17:39,280 --> 00:17:46,000
documenting it would not

456
00:17:40,880 --> 00:17:48,080
solve it because because when you're

457
00:17:46,000 --> 00:17:49,360
it's only when the other team goes and

458
00:17:48,080 --> 00:17:50,799
tries to implement it

459
00:17:49,360 --> 00:17:52,320
even based on documentation that they

460
00:17:50,799 --> 00:17:53,440
realize oh this karna case wasn't

461
00:17:52,320 --> 00:17:55,439
considered

462
00:17:53,440 --> 00:17:57,840
and it's only them that will notice it

463
00:17:55,440 --> 00:18:00,320
because the original team just

464
00:17:57,840 --> 00:18:01,918
implicitly thought it worked that way

465
00:18:00,320 --> 00:18:04,799
didn't even think it would be a possible

466
00:18:01,919 --> 00:18:07,919
design point change

467
00:18:04,799 --> 00:18:09,360
so it feels to me like a lot of this is

468
00:18:07,919 --> 00:18:10,559
going to be based around communication

469
00:18:09,360 --> 00:18:13,678
and just reaching out

470
00:18:10,559 --> 00:18:17,039
and and being friends

471
00:18:13,679 --> 00:18:19,039
making bridges and

472
00:18:17,039 --> 00:18:20,400
break away from that mindset of them

473
00:18:19,039 --> 00:18:23,120
versus us we're all

474
00:18:20,400 --> 00:18:23,679
just tool chain people we work on the

475
00:18:23,120 --> 00:18:26,799
same

476
00:18:23,679 --> 00:18:29,600
kinds of problems and

477
00:18:26,799 --> 00:18:31,679
we should you know i'm adding this

478
00:18:29,600 --> 00:18:33,360
extension for the c language

479
00:18:31,679 --> 00:18:35,200
we should know i should reach out to

480
00:18:33,360 --> 00:18:36,559
that friend on the other side and see

481
00:18:35,200 --> 00:18:39,679
what he thinks about it

482
00:18:36,559 --> 00:18:42,320
and hash it out a little bit at least in

483
00:18:39,679 --> 00:18:44,799
public in preference

484
00:18:42,320 --> 00:18:45,520
and make that a way to shake out some

485
00:18:44,799 --> 00:18:47,440
things

486
00:18:45,520 --> 00:18:49,918
before they are done and documented it

487
00:18:47,440 --> 00:18:52,400
and then what what

488
00:18:49,919 --> 00:18:53,760
frequently happens is it it's releasing

489
00:18:52,400 --> 00:18:57,120
shipped and out

490
00:18:53,760 --> 00:18:57,840
and only release later on is the other

491
00:18:57,120 --> 00:18:59,918
side

492
00:18:57,840 --> 00:19:01,360
aware of oh there's an extension for

493
00:18:59,919 --> 00:19:03,120
that uh let's try it

494
00:19:01,360 --> 00:19:05,600
and then it's already too late because

495
00:19:03,120 --> 00:19:08,840
it's already on the in the wild

496
00:19:05,600 --> 00:19:11,840
so the point is you know just reaching

497
00:19:08,840 --> 00:19:11,840
out

498
00:19:12,320 --> 00:19:17,360
and to build on the on the point you

499
00:19:14,320 --> 00:19:19,360
raised earlier on

500
00:19:17,360 --> 00:19:20,559
and also on what christoph was saying

501
00:19:19,360 --> 00:19:23,360
with the fact that

502
00:19:20,559 --> 00:19:24,399
the two compiler teams may not be

503
00:19:23,360 --> 00:19:26,080
working at this

504
00:19:24,400 --> 00:19:27,919
with exactly the same agenda for

505
00:19:26,080 --> 00:19:29,520
different reasons

506
00:19:27,919 --> 00:19:31,520
uh i think what is would really be

507
00:19:29,520 --> 00:19:34,559
important apart from having

508
00:19:31,520 --> 00:19:36,160
some documentation for the api uh would

509
00:19:34,559 --> 00:19:38,399
also be to have some tests

510
00:19:36,160 --> 00:19:39,679
because just the description of the api

511
00:19:38,400 --> 00:19:42,799
is often not enough

512
00:19:39,679 --> 00:19:44,960
uh api can be quite uh sceptile and the

513
00:19:42,799 --> 00:19:46,960
corner cases uh are not

514
00:19:44,960 --> 00:19:48,480
often not described in the in the

515
00:19:46,960 --> 00:19:49,840
specification or why you are doing

516
00:19:48,480 --> 00:19:53,039
things this way

517
00:19:49,840 --> 00:19:55,360
and so there you really needed tests uh

518
00:19:53,039 --> 00:19:56,799
that's an excellent point that's an

519
00:19:55,360 --> 00:19:57,439
excellent point and it's something that

520
00:19:56,799 --> 00:19:58,799
you can do

521
00:19:57,440 --> 00:20:00,640
in your own team we have reaching

522
00:19:58,799 --> 00:20:03,280
outside right and it should

523
00:20:00,640 --> 00:20:04,240
it feels to me like that's just a good

524
00:20:03,280 --> 00:20:05,678
engineering right

525
00:20:04,240 --> 00:20:08,320
if you're not doing that you're doing it

526
00:20:05,679 --> 00:20:11,039
wrong okay we've got a question at that

527
00:20:08,320 --> 00:20:11,039
patient you're waiting

528
00:20:18,840 --> 00:20:21,840
patiently

529
00:20:29,280 --> 00:20:35,840
so the the question was the small device

530
00:20:31,520 --> 00:20:35,840
there's a seat

531
00:20:41,280 --> 00:20:44,480
uh it's a very good question so

532
00:20:42,559 --> 00:20:48,399
microsoft have out outline

533
00:20:44,480 --> 00:20:51,440
outs out open sourced their uh library

534
00:20:48,400 --> 00:20:52,480
last year um yes i mean i think the

535
00:20:51,440 --> 00:20:54,559
whole point is to

536
00:20:52,480 --> 00:20:56,400
bring in all voices microsoft is

537
00:20:54,559 --> 00:20:58,799
changing you know

538
00:20:56,400 --> 00:21:00,159
they were at the canoe tools cauldron

539
00:20:58,799 --> 00:21:02,480
this year which i think is

540
00:21:00,159 --> 00:21:03,360
a first and a very positive and big

541
00:21:02,480 --> 00:21:06,480
support they are

542
00:21:03,360 --> 00:21:08,879
changing as a company and you know

543
00:21:06,480 --> 00:21:10,640
yeah of course the more the open the

544
00:21:08,880 --> 00:21:11,600
whole point about free and open is it's

545
00:21:10,640 --> 00:21:13,679
inclusive

546
00:21:11,600 --> 00:21:16,879
that's great great point uh yeah two

547
00:21:13,679 --> 00:21:18,960
questions here

548
00:21:16,880 --> 00:21:20,640
so that's somehow related to

549
00:21:18,960 --> 00:21:23,280
specification and testing

550
00:21:20,640 --> 00:21:24,240
but writing test is not the most

551
00:21:23,280 --> 00:21:27,120
tremendous task

552
00:21:24,240 --> 00:21:27,919
or the most enjoyable task and whenever

553
00:21:27,120 --> 00:21:29,918
we develop

554
00:21:27,919 --> 00:21:31,600
a new security feature or new

555
00:21:29,919 --> 00:21:33,919
optimization

556
00:21:31,600 --> 00:21:34,959
we could write the tests as a whole

557
00:21:33,919 --> 00:21:37,039
community

558
00:21:34,960 --> 00:21:38,080
and in a generic way and then everybody

559
00:21:37,039 --> 00:21:40,158
could implement it

560
00:21:38,080 --> 00:21:41,840
and take advantage of the test suite

561
00:21:40,159 --> 00:21:43,679
that's some area where both from an

562
00:21:41,840 --> 00:21:45,120
engineering point of view and from a

563
00:21:43,679 --> 00:21:47,760
time span point of view

564
00:21:45,120 --> 00:21:48,799
collaboration is fruitful and not very

565
00:21:47,760 --> 00:21:51,760
difficult to

566
00:21:48,799 --> 00:21:52,879
to set up i wish that for 45 so there

567
00:21:51,760 --> 00:21:56,320
would be

568
00:21:52,880 --> 00:21:58,400
a test suit that i could use

569
00:21:56,320 --> 00:22:00,559
okay that's a good part from my personal

570
00:21:58,400 --> 00:22:04,320
experience i know the gnu

571
00:22:00,559 --> 00:22:06,879
regression test suite is based on uh

572
00:22:04,320 --> 00:22:08,559
uh deja vu new features that say is this

573
00:22:06,880 --> 00:22:10,320
feature supported and if you write those

574
00:22:08,559 --> 00:22:11,760
generally above you can give them gcc or

575
00:22:10,320 --> 00:22:12,399
ll them and it'll work out whether the

576
00:22:11,760 --> 00:22:15,679
test can run

577
00:22:12,400 --> 00:22:16,880
the problem is it's it the gcc test

578
00:22:15,679 --> 00:22:19,120
suite is huge

579
00:22:16,880 --> 00:22:21,200
and very old and only the best and

580
00:22:19,120 --> 00:22:26,080
newest tests actually work like that

581
00:22:21,200 --> 00:22:28,320
so the real world hits a bit there um i

582
00:22:26,080 --> 00:22:31,039
have a similar question like like sesh

583
00:22:28,320 --> 00:22:33,439
he made a talk about um changing the

584
00:22:31,039 --> 00:22:36,000
compiler from gcc to to clang

585
00:22:33,440 --> 00:22:37,280
and i saw many projects that tried to

586
00:22:36,000 --> 00:22:40,320
standardize don't

587
00:22:37,280 --> 00:22:42,000
use gcc specific stuff and i think it

588
00:22:40,320 --> 00:22:45,760
would be great as a user to

589
00:22:42,000 --> 00:22:48,000
to have more interrupt interoperability

590
00:22:45,760 --> 00:22:49,600
so where again can just change my

591
00:22:48,000 --> 00:22:52,480
compiler without having to

592
00:22:49,600 --> 00:22:52,959
think much and i think it's it goes

593
00:22:52,480 --> 00:22:54,480
currently

594
00:22:52,960 --> 00:22:56,559
the other way around that some projects

595
00:22:54,480 --> 00:22:58,000
just require to use a clang

596
00:22:56,559 --> 00:22:59,918
and if i had to have a platform that

597
00:22:58,000 --> 00:23:02,000
isn't supported by clang i'm

598
00:22:59,919 --> 00:23:09,200
i have no chance to do anything and yeah

599
00:23:02,000 --> 00:23:12,240
that would be great as a user

600
00:23:09,200 --> 00:23:15,600
here i like to say that

601
00:23:12,240 --> 00:23:19,200
in on one hand interoperability is uh

602
00:23:15,600 --> 00:23:21,039
is a nice goal to have the other thing

603
00:23:19,200 --> 00:23:22,320
i mean if you try to do embedded

604
00:23:21,039 --> 00:23:24,799
software it's

605
00:23:22,320 --> 00:23:26,559
often a good idea to test it with

606
00:23:24,799 --> 00:23:27,760
multiple compilers

607
00:23:26,559 --> 00:23:29,520
because they will make different

608
00:23:27,760 --> 00:23:30,320
implementation choice and you need to be

609
00:23:29,520 --> 00:23:33,120
to accept

610
00:23:30,320 --> 00:23:34,000
that what you have written is not

611
00:23:33,120 --> 00:23:35,039
portable

612
00:23:34,000 --> 00:23:36,799
so i mean that's the point of

613
00:23:35,039 --> 00:23:38,720
interoperability is just a subset will

614
00:23:36,799 --> 00:23:43,840
be interoperable

615
00:23:38,720 --> 00:23:43,840
so that's uh i mean it goes both ways so

616
00:23:48,080 --> 00:23:51,520
i'd like to panel what they think about

617
00:23:50,000 --> 00:23:53,279
deprecation as such

618
00:23:51,520 --> 00:23:54,720
or at least not deprecation i'm talking

619
00:23:53,279 --> 00:23:57,120
re-implementation so

620
00:23:54,720 --> 00:23:58,000
if like it or not all the calls for

621
00:23:57,120 --> 00:23:59,439
collaboration

622
00:23:58,000 --> 00:24:01,200
there will be features that get pushed

623
00:23:59,440 --> 00:24:03,520
ahead further in one than the other

624
00:24:01,200 --> 00:24:04,640
and then the other will try and catch up

625
00:24:03,520 --> 00:24:06,639
as such

626
00:24:04,640 --> 00:24:08,480
is it sort of in some ways akin to code

627
00:24:06,640 --> 00:24:10,320
review you do something downstream you

628
00:24:08,480 --> 00:24:11,840
then move it upstream and it gets code

629
00:24:10,320 --> 00:24:15,918
reviewed it gets changed

630
00:24:11,840 --> 00:24:19,039
and is there a way of

631
00:24:15,919 --> 00:24:21,120
deploying newer features as maybe some

632
00:24:19,039 --> 00:24:22,960
kind of tentative extensions

633
00:24:21,120 --> 00:24:24,158
or is it anything that you put in binary

634
00:24:22,960 --> 00:24:26,240
for life

635
00:24:24,159 --> 00:24:28,080
i guess is their raw rule for say

636
00:24:26,240 --> 00:24:31,039
communities to introduce things

637
00:24:28,080 --> 00:24:32,720
as sort of okay you can use this but

638
00:24:31,039 --> 00:24:34,559
it's not standardized yet

639
00:24:32,720 --> 00:24:37,200
whatever it may change in the future

640
00:24:34,559 --> 00:24:37,200
that type of thing

641
00:24:39,039 --> 00:24:41,679
that's a good question i think we ought

642
00:24:40,400 --> 00:24:46,480
to ask the panel and i'll start with

643
00:24:41,679 --> 00:24:49,120
arno this time

644
00:24:46,480 --> 00:24:50,960
uh so i'm not sure i understood uh fully

645
00:24:49,120 --> 00:24:54,559
your question but uh

646
00:24:50,960 --> 00:24:57,600
so around for for the deprecation

647
00:24:54,559 --> 00:24:58,879
uh it's a bit hard because you as long

648
00:24:57,600 --> 00:25:02,080
as you have one user

649
00:24:58,880 --> 00:25:05,840
uh who does not step barney refuses

650
00:25:02,080 --> 00:25:09,199
to update upgrades his code base

651
00:25:05,840 --> 00:25:11,279
you cannot fully deprecate the stuff

652
00:25:09,200 --> 00:25:15,679
or he will have to stick with an old

653
00:25:11,279 --> 00:25:17,600
version of the tools

654
00:25:15,679 --> 00:25:18,799
you know i'm far from the from an expert

655
00:25:17,600 --> 00:25:21,120
on you know the

656
00:25:18,799 --> 00:25:22,320
compiler side and the runtime side but

657
00:25:21,120 --> 00:25:24,158
uh you know i'm um

658
00:25:22,320 --> 00:25:25,760
there are some things that have been

659
00:25:24,159 --> 00:25:26,840
deprecated like i'm thinking for example

660
00:25:25,760 --> 00:25:31,360
on the glibc

661
00:25:26,840 --> 00:25:33,039
side there are facilities to

662
00:25:31,360 --> 00:25:34,719
if you really really need to you can

663
00:25:33,039 --> 00:25:38,080
create a new entry point

664
00:25:34,720 --> 00:25:38,080
and use uh

665
00:25:38,960 --> 00:25:44,320
healthy mark um symbol versions exactly

666
00:25:43,279 --> 00:25:47,360
thank you

667
00:25:44,320 --> 00:25:48,639
uh to like uh the old binary will still

668
00:25:47,360 --> 00:25:52,080
run and link

669
00:25:48,640 --> 00:25:54,320
at low time with the original

670
00:25:52,080 --> 00:25:56,399
deprecated version but if you try to

671
00:25:54,320 --> 00:26:01,520
compile again the program it will be

672
00:25:56,400 --> 00:26:01,520
using the newer api entry points

673
00:26:01,600 --> 00:26:08,799
so it's possible to deprecate things

674
00:26:04,720 --> 00:26:08,799
on the runtime side on the compiler side

675
00:26:09,600 --> 00:26:13,360
i'm not sure what the answer is i kind

676
00:26:11,520 --> 00:26:14,799
of feel like if it's there it's there

677
00:26:13,360 --> 00:26:18,399
forever

678
00:26:14,799 --> 00:26:21,120
i'm sure he he may have found some uh

679
00:26:18,400 --> 00:26:22,880
some compiler flags which are dating

680
00:26:21,120 --> 00:26:26,639
from very very old

681
00:26:22,880 --> 00:26:28,080
versions and the compilers are just

682
00:26:26,640 --> 00:26:28,640
ignoring them just so that the build

683
00:26:28,080 --> 00:26:31,199
scripts

684
00:26:28,640 --> 00:26:31,200
don't fail

685
00:26:37,120 --> 00:26:40,158
and it's not specific to compilers i

686
00:26:38,799 --> 00:26:42,559
mean ls has

687
00:26:40,159 --> 00:26:44,080
obsolete flags and they are still there

688
00:26:42,559 --> 00:26:47,918
and use

689
00:26:44,080 --> 00:26:50,799
and just an up so that's common practice

690
00:26:47,919 --> 00:26:53,039
although software was named soft as

691
00:26:50,799 --> 00:26:55,520
opposed to hardware

692
00:26:53,039 --> 00:26:56,240
once in there it becomes a hard stuff

693
00:26:55,520 --> 00:26:58,400
yeah that's

694
00:26:56,240 --> 00:27:00,960
the command line aspect and on the

695
00:26:58,400 --> 00:27:03,919
coding side on the language support side

696
00:27:00,960 --> 00:27:06,720
is there any like um when we will get

697
00:27:03,919 --> 00:27:09,760
rid of c89 or before

698
00:27:06,720 --> 00:27:11,360
yeah in 40 years

699
00:27:09,760 --> 00:27:13,039
i think there's you know i think one

700
00:27:11,360 --> 00:27:15,039
thing is you have to differentiate

701
00:27:13,039 --> 00:27:16,320
between like the different cases of

702
00:27:15,039 --> 00:27:19,760
compatibility

703
00:27:16,320 --> 00:27:21,439
like for source language in a way

704
00:27:19,760 --> 00:27:23,200
it's easier to just say we will no

705
00:27:21,440 --> 00:27:26,240
longer accept you know

706
00:27:23,200 --> 00:27:27,520
k r declarations or whatever those are

707
00:27:26,240 --> 00:27:28,799
just errors now

708
00:27:27,520 --> 00:27:31,840
i mean i don't know if they are i'm just

709
00:27:28,799 --> 00:27:34,399
saying it hypothetically and then

710
00:27:31,840 --> 00:27:36,158
people who want to have a 30 year old c

711
00:27:34,399 --> 00:27:39,520
compiler should go find one

712
00:27:36,159 --> 00:27:43,200
you know what's hard

713
00:27:39,520 --> 00:27:45,679
is abi compatibility especially if

714
00:27:43,200 --> 00:27:46,960
you know what happens pretty commonly is

715
00:27:45,679 --> 00:27:49,120
someone implements

716
00:27:46,960 --> 00:27:51,039
the abi and they think they did a good

717
00:27:49,120 --> 00:27:53,120
job but they made a mistake

718
00:27:51,039 --> 00:27:55,279
and it's not found out till later and

719
00:27:53,120 --> 00:27:58,239
then if you think about like if you just

720
00:27:55,279 --> 00:28:00,480
have one tool chain right like gcc

721
00:27:58,240 --> 00:28:03,279
made a mistake well they think it's

722
00:28:00,480 --> 00:28:06,640
better to just leave the mistake

723
00:28:03,279 --> 00:28:10,000
yeah now it's the standard you know yeah

724
00:28:06,640 --> 00:28:11,520
um even though it's ridiculous right but

725
00:28:10,000 --> 00:28:13,360
it's more difficult when there's two

726
00:28:11,520 --> 00:28:14,840
compilers involved because you can have

727
00:28:13,360 --> 00:28:16,879
this thing where you have parallel

728
00:28:14,840 --> 00:28:18,080
implementations and one or the other

729
00:28:16,880 --> 00:28:20,799
makes a mistake

730
00:28:18,080 --> 00:28:21,279
or they disagree about what's a mistake

731
00:28:20,799 --> 00:28:23,840
or

732
00:28:21,279 --> 00:28:25,200
you know it's undocumented and so they

733
00:28:23,840 --> 00:28:27,918
both made a choice

734
00:28:25,200 --> 00:28:29,120
you know and even those cases can be

735
00:28:27,919 --> 00:28:30,720
treated differently

736
00:28:29,120 --> 00:28:32,639
you know you could say well as

737
00:28:30,720 --> 00:28:34,480
communities we'll have a commitment to

738
00:28:32,640 --> 00:28:36,159
following the standard so if you catch

739
00:28:34,480 --> 00:28:38,320
us in a mistake

740
00:28:36,159 --> 00:28:39,440
we'll like make our users suffer a

741
00:28:38,320 --> 00:28:41,439
little and change

742
00:28:39,440 --> 00:28:43,760
but that has to be like a two-way street

743
00:28:41,440 --> 00:28:46,480
everyone has to agree to that like as a

744
00:28:43,760 --> 00:28:46,960
social thing and then for the case of

745
00:28:46,480 --> 00:28:50,480
like

746
00:28:46,960 --> 00:28:50,799
um implementing a new feature like it's

747
00:28:50,480 --> 00:28:52,399
not

748
00:28:50,799 --> 00:28:54,799
documented and you want to make some

749
00:28:52,399 --> 00:28:56,639
choice you have to also com

750
00:28:54,799 --> 00:28:58,320
you know make it like a it's a social

751
00:28:56,640 --> 00:29:01,200
problem you have to say

752
00:28:58,320 --> 00:29:01,760
we'll commit to sending a note to some

753
00:29:01,200 --> 00:29:04,000
abi

754
00:29:01,760 --> 00:29:04,879
list to say hey this is what we're

755
00:29:04,000 --> 00:29:07,120
planning to do

756
00:29:04,880 --> 00:29:09,520
stop us before you know we strike or

757
00:29:07,120 --> 00:29:09,520
whatever

758
00:29:10,159 --> 00:29:15,440
uh sure yeah uh

759
00:29:13,360 --> 00:29:16,639
question i guess to peter uh to

760
00:29:15,440 --> 00:29:18,000
reinterpret your question were you

761
00:29:16,640 --> 00:29:19,919
asking more about like how do

762
00:29:18,000 --> 00:29:21,520
how could we possibly ship experimental

763
00:29:19,919 --> 00:29:26,320
features with thought of

764
00:29:21,520 --> 00:29:28,240
potentially deprecating it future

765
00:29:26,320 --> 00:29:29,600
yeah so what i'm thinking less about say

766
00:29:28,240 --> 00:29:31,120
present thing thinking about

767
00:29:29,600 --> 00:29:32,719
implementing things that are already

768
00:29:31,120 --> 00:29:34,239
standardized like things in the front

769
00:29:32,720 --> 00:29:36,480
end i'm thinking about say

770
00:29:34,240 --> 00:29:37,760
say i've got some new binary security

771
00:29:36,480 --> 00:29:39,039
features so i'm just going to pull stack

772
00:29:37,760 --> 00:29:40,640
protection out of the

773
00:29:39,039 --> 00:29:42,158
of the hat here and it will work in a

774
00:29:40,640 --> 00:29:44,399
certain way in a compiler that's

775
00:29:42,159 --> 00:29:46,080
a downstream binary thing the compiler

776
00:29:44,399 --> 00:29:48,399
can choose how it implements it

777
00:29:46,080 --> 00:29:49,760
but it has as christoph mentioned some

778
00:29:48,399 --> 00:29:52,000
form of abi

779
00:29:49,760 --> 00:29:53,600
then when say clan comes up to that does

780
00:29:52,000 --> 00:29:54,880
it need to match precisely

781
00:29:53,600 --> 00:29:56,639
it might not be possible to match

782
00:29:54,880 --> 00:29:58,480
precisely it's

783
00:29:56,640 --> 00:30:00,799
at the moment there's i'm talking about

784
00:29:58,480 --> 00:30:03,360
for things like that that are kind of

785
00:30:00,799 --> 00:30:04,639
not in the area of anything that that's

786
00:30:03,360 --> 00:30:06,158
really written down

787
00:30:04,640 --> 00:30:08,000
how do you get it so that say for

788
00:30:06,159 --> 00:30:10,080
example you can

789
00:30:08,000 --> 00:30:11,120
maybe transition to a form that both can

790
00:30:10,080 --> 00:30:13,039
accept

791
00:30:11,120 --> 00:30:14,639
and that might involve changing and i

792
00:30:13,039 --> 00:30:16,320
think partly it's also got to be driven

793
00:30:14,640 --> 00:30:19,760
by the community i think

794
00:30:16,320 --> 00:30:21,520
um when there's demand from users that

795
00:30:19,760 --> 00:30:23,520
clang and gcc work together

796
00:30:21,520 --> 00:30:25,279
they will do it when there's not demand

797
00:30:23,520 --> 00:30:26,080
in areas that nobody cares about it's

798
00:30:25,279 --> 00:30:27,760
not going to happen

799
00:30:26,080 --> 00:30:30,559
so i think of it this would be to the

800
00:30:27,760 --> 00:30:32,879
community to decide what happens

801
00:30:30,559 --> 00:30:34,158
so yeah one of my the reasons why i

802
00:30:32,880 --> 00:30:36,080
remarked writing

803
00:30:34,159 --> 00:30:37,679
trying to produce some documentations

804
00:30:36,080 --> 00:30:39,279
once you if you realize you're

805
00:30:37,679 --> 00:30:40,399
introducing some new binary interface

806
00:30:39,279 --> 00:30:42,399
even if it's a small amount

807
00:30:40,399 --> 00:30:43,439
was just to just try to make it a little

808
00:30:42,399 --> 00:30:45,199
bit easier for

809
00:30:43,440 --> 00:30:46,880
other projects to to start using that

810
00:30:45,200 --> 00:30:49,679
interface um

811
00:30:46,880 --> 00:30:50,159
one thing i so it would indeed be really

812
00:30:49,679 --> 00:30:52,399
nice

813
00:30:50,159 --> 00:30:54,080
if we could come up with introducing

814
00:30:52,399 --> 00:30:56,320
binary interface without

815
00:30:54,080 --> 00:30:57,760
from the start and being forever making

816
00:30:56,320 --> 00:30:59,678
it more evolvable

817
00:30:57,760 --> 00:31:01,200
i don't think there's an easy way to to

818
00:30:59,679 --> 00:31:04,960
solve that problem and

819
00:31:01,200 --> 00:31:07,120
the only partial solution

820
00:31:04,960 --> 00:31:08,559
i think maybe for some binary interface

821
00:31:07,120 --> 00:31:10,000
might help a little bit as

822
00:31:08,559 --> 00:31:11,760
just try to make sure there's always

823
00:31:10,000 --> 00:31:13,519
some kind of versioning there so if you

824
00:31:11,760 --> 00:31:15,840
need to change at least

825
00:31:13,519 --> 00:31:16,880
it's very easily detectable something

826
00:31:15,840 --> 00:31:19,199
like that might be

827
00:31:16,880 --> 00:31:21,039
one step in the right direction but then

828
00:31:19,200 --> 00:31:21,360
it would need like general agreement oh

829
00:31:21,039 --> 00:31:22,559
yes

830
00:31:21,360 --> 00:31:24,080
every time we recognize we're

831
00:31:22,559 --> 00:31:24,639
introducing binary interface we'll also

832
00:31:24,080 --> 00:31:26,158
need to

833
00:31:24,640 --> 00:31:27,760
we'll make sure there's some metadata

834
00:31:26,159 --> 00:31:29,840
somewhere easily interpretable

835
00:31:27,760 --> 00:31:31,519
record the version something like that

836
00:31:29,840 --> 00:31:33,600
okay thank you

837
00:31:31,519 --> 00:31:35,120
at this at this point um we're quite a

838
00:31:33,600 --> 00:31:37,360
long way through our discussion a lot of

839
00:31:35,120 --> 00:31:39,360
issues raised here i want to turn to

840
00:31:37,360 --> 00:31:40,799
solutions now we have one suggestion

841
00:31:39,360 --> 00:31:42,639
which is for

842
00:31:40,799 --> 00:31:43,918
having a neutral mailing list so you

843
00:31:42,640 --> 00:31:46,960
don't have to

844
00:31:43,919 --> 00:31:49,360
that is neither gcc nor llvm for

845
00:31:46,960 --> 00:31:51,039
discussing neutrally that's a good one i

846
00:31:49,360 --> 00:31:52,559
think to take away and see what is the

847
00:31:51,039 --> 00:31:55,039
organization that can host

848
00:31:52,559 --> 00:31:55,918
such a list that will be trusted and

849
00:31:55,039 --> 00:31:57,600
respected

850
00:31:55,919 --> 00:31:59,600
and we can take that one away i'd like

851
00:31:57,600 --> 00:32:02,719
to now open up to the panel

852
00:31:59,600 --> 00:32:04,719
for um solutions we've got um

853
00:32:02,720 --> 00:32:06,960
one llvm director here we don't think

854
00:32:04,720 --> 00:32:09,600
we've actually got her gcc

855
00:32:06,960 --> 00:32:10,000
um uh steering committee member have we

856
00:32:09,600 --> 00:32:13,120
no

857
00:32:10,000 --> 00:32:13,850
no no um but start with you

858
00:32:13,120 --> 00:32:18,879
bedroom

859
00:32:13,850 --> 00:32:22,709
[Laughter]

860
00:32:18,880 --> 00:32:25,039
solutions oh man start from scratch

861
00:32:22,710 --> 00:32:28,799
[Laughter]

862
00:32:25,039 --> 00:32:31,600
third compiler yeah

863
00:32:28,799 --> 00:32:33,039
the solution is standard right uh i

864
00:32:31,600 --> 00:32:37,120
don't know solutions uh

865
00:32:33,039 --> 00:32:39,440
you were mentioning abi versioning

866
00:32:37,120 --> 00:32:40,479
and it reminded me of work that red hat

867
00:32:39,440 --> 00:32:42,640
is is doing

868
00:32:40,480 --> 00:32:44,399
and maybe i'll ask mark wheeler to help

869
00:32:42,640 --> 00:32:48,640
me with this

870
00:32:44,399 --> 00:32:53,360
the next project what's the name of that

871
00:32:48,640 --> 00:32:53,360
the the binary tagging thing

872
00:32:53,840 --> 00:33:02,240
not that there we go no that's doji's

873
00:32:58,480 --> 00:33:04,480
nick clifton's anabian exactly can you

874
00:33:02,240 --> 00:33:07,440
talk a little bit about that

875
00:33:04,480 --> 00:33:07,440
see what i've done there

876
00:33:08,000 --> 00:33:15,600
tell us the solution no

877
00:33:12,320 --> 00:33:18,720
it's not a solution but what eno bin

878
00:33:15,600 --> 00:33:23,199
does is uh record all the

879
00:33:18,720 --> 00:33:26,720
compiler flags and all the uh uh

880
00:33:23,200 --> 00:33:29,840
the the the apis it can recognize

881
00:33:26,720 --> 00:33:32,480
in uh object files so uh it's

882
00:33:29,840 --> 00:33:35,519
it's not a solution but you you're right

883
00:33:32,480 --> 00:33:39,039
i hadn't thought about that that

884
00:33:35,519 --> 00:33:42,000
uh there is uh

885
00:33:39,039 --> 00:33:42,559
i don't know how far nick is with the

886
00:33:42,000 --> 00:33:45,600
enemy

887
00:33:42,559 --> 00:33:49,760
plug-in for uh uh clang

888
00:33:45,600 --> 00:33:52,799
but he was working on that uh

889
00:33:49,760 --> 00:33:57,200
uh the okay and win is

890
00:33:52,799 --> 00:34:00,879
a a plugin currently for dc where

891
00:33:57,200 --> 00:34:06,320
it will output elf nodes

892
00:34:00,880 --> 00:34:09,679
for all the object files

893
00:34:06,320 --> 00:34:14,078
in which it records all the compiler

894
00:34:09,679 --> 00:34:17,119
flags and apis it's

895
00:34:14,079 --> 00:34:21,919
it's currently respecting and so

896
00:34:17,119 --> 00:34:24,879
when you link your object files together

897
00:34:21,918 --> 00:34:25,839
your binaries have all the flags ever

898
00:34:24,879 --> 00:34:29,598
used in all the

899
00:34:25,839 --> 00:34:32,799
compiler versions and he also

900
00:34:29,599 --> 00:34:33,200
is working on that for clang i don't

901
00:34:32,800 --> 00:34:36,079
know

902
00:34:33,199 --> 00:34:36,078
how far he is

903
00:34:36,480 --> 00:34:44,000
it's at least an interesting thing to do

904
00:34:40,239 --> 00:34:47,279
fedora does it now destroy white

905
00:34:44,000 --> 00:34:48,079
so that you can see what what is

906
00:34:47,280 --> 00:34:51,760
actually being

907
00:34:48,079 --> 00:34:54,000
used in a whole distribution which is

908
00:34:51,760 --> 00:34:54,000
nice

909
00:34:55,359 --> 00:34:59,119
i don't know whether the linker is

910
00:34:56,719 --> 00:35:01,200
extended i don't know whether that

911
00:34:59,119 --> 00:35:02,960
work uh progressed to a point where the

912
00:35:01,200 --> 00:35:06,078
liquor linker can reject

913
00:35:02,960 --> 00:35:09,839
incompatible apis but it could be

914
00:35:06,079 --> 00:35:11,520
done in that like it could be used

915
00:35:09,839 --> 00:35:13,119
to you can use it to query the whole

916
00:35:11,520 --> 00:35:16,400
distribution see what

917
00:35:13,119 --> 00:35:18,960
what's the apis you're using and i

918
00:35:16,400 --> 00:35:20,079
i think that for versioning we could use

919
00:35:18,960 --> 00:35:22,640
it to

920
00:35:20,079 --> 00:35:23,440
you know validate whether the apis are

921
00:35:22,640 --> 00:35:26,879
compatible

922
00:35:23,440 --> 00:35:29,440
which version are you using i feel like

923
00:35:26,880 --> 00:35:29,440
that could help

924
00:35:37,839 --> 00:35:41,839
collaboration uh better collaboration

925
00:35:40,000 --> 00:35:44,000
not to be just wishful thinking because

926
00:35:41,839 --> 00:35:47,200
i think everyone is in agreement that

927
00:35:44,000 --> 00:35:48,720
it's a good thing to do if we want to be

928
00:35:47,200 --> 00:35:52,078
pragmatic it only happens

929
00:35:48,720 --> 00:35:53,759
on on real projects and i think the

930
00:35:52,079 --> 00:35:56,720
both our communities are already

931
00:35:53,760 --> 00:35:59,839
collaborating on a need-be basis

932
00:35:56,720 --> 00:36:01,279
i know for example at arm the the llvm

933
00:35:59,839 --> 00:36:03,359
and the gcc people

934
00:36:01,280 --> 00:36:04,400
are working i mean are in the in the

935
00:36:03,359 --> 00:36:06,480
same building

936
00:36:04,400 --> 00:36:08,880
it was not the case for some time but

937
00:36:06,480 --> 00:36:11,839
now they are all together

938
00:36:08,880 --> 00:36:14,400
and we try to uh to make sure because

939
00:36:11,839 --> 00:36:17,040
arm has an interest that it is a

940
00:36:14,400 --> 00:36:17,599
proper support for the for their product

941
00:36:17,040 --> 00:36:19,759
uh

942
00:36:17,599 --> 00:36:21,920
and there are other cases where i think

943
00:36:19,760 --> 00:36:24,240
there is collaboration so

944
00:36:21,920 --> 00:36:26,880
could are there other projects where we

945
00:36:24,240 --> 00:36:29,759
could have a broader collaboration

946
00:36:26,880 --> 00:36:29,760
and then okay

947
00:36:30,640 --> 00:36:32,799
so

948
00:36:33,760 --> 00:36:36,880
yeah i think um you know when i listen

949
00:36:36,240 --> 00:36:41,839
to this

950
00:36:36,880 --> 00:36:41,839
like i think uh

951
00:36:42,160 --> 00:36:47,200
in some cases an rfc process something

952
00:36:44,960 --> 00:36:49,200
like that a shared way to communicate

953
00:36:47,200 --> 00:36:50,879
directly between like compiler

954
00:36:49,200 --> 00:36:53,439
developers is good

955
00:36:50,880 --> 00:36:54,320
for back ends like for abis i you know i

956
00:36:53,440 --> 00:36:57,119
think there

957
00:36:54,320 --> 00:36:58,800
are already existing institutions for

958
00:36:57,119 --> 00:37:00,720
that handle many of these things there's

959
00:36:58,800 --> 00:37:03,359
like the ce committee and the c

960
00:37:00,720 --> 00:37:03,759
plus committee there's dwarf some of

961
00:37:03,359 --> 00:37:05,839
those

962
00:37:03,760 --> 00:37:07,040
like i know more about dwarf which i

963
00:37:05,839 --> 00:37:09,759
think is like

964
00:37:07,040 --> 00:37:10,960
institutionally kind of weak that need

965
00:37:09,760 --> 00:37:14,079
to be strengthened

966
00:37:10,960 --> 00:37:16,880
you know and supported by

967
00:37:14,079 --> 00:37:17,760
like these communities but um some of

968
00:37:16,880 --> 00:37:21,359
these areas

969
00:37:17,760 --> 00:37:22,000
you know i've like i think the abi

970
00:37:21,359 --> 00:37:25,279
situation

971
00:37:22,000 --> 00:37:27,520
is similar it needs a little more uh

972
00:37:25,280 --> 00:37:28,960
commitment from developers and stuff and

973
00:37:27,520 --> 00:37:31,200
then some of the areas are

974
00:37:28,960 --> 00:37:33,119
terra incognita right like linkers are

975
00:37:31,200 --> 00:37:34,240
not documented at all as far as i can

976
00:37:33,119 --> 00:37:36,480
tell and

977
00:37:34,240 --> 00:37:37,919
just work by magic and like that would

978
00:37:36,480 --> 00:37:40,160
be a good thing to change and

979
00:37:37,920 --> 00:37:42,000
maybe create a new institution you know

980
00:37:40,160 --> 00:37:45,680
to

981
00:37:42,000 --> 00:37:48,960
handle that right so i don't know

982
00:37:45,680 --> 00:37:49,759
okay yeah we're running just a bit short

983
00:37:48,960 --> 00:37:51,599
of time

984
00:37:49,760 --> 00:37:54,480
so i'm going to actually draw things to

985
00:37:51,599 --> 00:37:57,760
a conclusion now

986
00:37:54,480 --> 00:37:59,520
we've heard issues

987
00:37:57,760 --> 00:38:00,880
where we could do better we've had a

988
00:37:59,520 --> 00:38:03,599
willingness to do better

989
00:38:00,880 --> 00:38:04,560
we've heard some concrete suggestions

990
00:38:03,599 --> 00:38:05,839
mailing lists

991
00:38:04,560 --> 00:38:08,078
projects that we work together some

992
00:38:05,839 --> 00:38:10,240
detailed technology from mark and

993
00:38:08,079 --> 00:38:11,599
pedro the possibility of needing new

994
00:38:10,240 --> 00:38:13,598
institutions

995
00:38:11,599 --> 00:38:14,960
there's one other i think we've missed

996
00:38:13,599 --> 00:38:17,359
which we did once

997
00:38:14,960 --> 00:38:18,800
we had an llvm cauldron the day before a

998
00:38:17,359 --> 00:38:20,240
gnu tools cauldron

999
00:38:18,800 --> 00:38:21,920
and forty percent of the people who went

1000
00:38:20,240 --> 00:38:23,439
to one went to the other

1001
00:38:21,920 --> 00:38:24,960
um and that was a very good mean

1002
00:38:23,440 --> 00:38:26,480
particularly the evening in between when

1003
00:38:24,960 --> 00:38:28,480
we all came to the same

1004
00:38:26,480 --> 00:38:29,599
um reception and all drank an eight

1005
00:38:28,480 --> 00:38:32,880
together

1006
00:38:29,599 --> 00:38:34,720
um my so

1007
00:38:32,880 --> 00:38:36,480
my two penta there i think possibly we

1008
00:38:34,720 --> 00:38:39,040
need to revive that

1009
00:38:36,480 --> 00:38:40,320
idea so actually we do talk to each

1010
00:38:39,040 --> 00:38:41,359
other because actually sometimes human

1011
00:38:40,320 --> 00:38:44,240
interaction

1012
00:38:41,359 --> 00:38:45,359
only matters uh it does matter i'd like

1013
00:38:44,240 --> 00:38:47,200
to thank you all

1014
00:38:45,359 --> 00:38:49,440
for your time i'd like to thank our

1015
00:38:47,200 --> 00:38:50,240
panelists for giving up their time arno

1016
00:38:49,440 --> 00:38:51,839
in particular

1017
00:38:50,240 --> 00:38:54,000
who came up here personally just for

1018
00:38:51,839 --> 00:38:54,880
this session um so i really do

1019
00:38:54,000 --> 00:38:58,160
appreciate you

1020
00:38:54,880 --> 00:38:58,800
traveling up here um please carry on the

1021
00:38:58,160 --> 00:39:00,720
discussion

1022
00:38:58,800 --> 00:39:01,920
send your feedback if you can't find

1023
00:39:00,720 --> 00:39:15,839
anyone else to tell

1024
00:39:01,920 --> 00:39:15,839
send me an email thank you very much

1025
00:39:16,640 --> 00:39:18,720
you

