1
00:00:04,799 --> 00:00:07,200
okay

2
00:00:07,520 --> 00:00:09,838
so

3
00:00:11,360 --> 00:00:17,759
our next speaker is once again myself

4
00:00:14,960 --> 00:00:17,759
piero then

5
00:00:18,320 --> 00:00:20,720
and

6
00:00:22,400 --> 00:00:24,959
what that

7
00:00:28,400 --> 00:00:31,840
okay let's go

8
00:00:51,840 --> 00:00:56,000
okay it works about distributed

9
00:00:54,800 --> 00:00:59,120
programming so

10
00:00:56,000 --> 00:01:01,519
this was announced as a live demo which

11
00:00:59,120 --> 00:01:04,399
is always frightening because you never

12
00:01:01,520 --> 00:01:06,000
know if it will work so i'll try to go

13
00:01:04,400 --> 00:01:08,880
relatively fast

14
00:01:06,000 --> 00:01:10,640
on the slides then we'll make the demo

15
00:01:08,880 --> 00:01:12,798
and if we have some spare time

16
00:01:10,640 --> 00:01:13,680
while we can i'll show you another

17
00:01:12,799 --> 00:01:17,520
example

18
00:01:13,680 --> 00:01:22,080
or maybe we can just uh come back to

19
00:01:17,520 --> 00:01:24,640
some of what i said so

20
00:01:22,080 --> 00:01:27,039
this is defining the reference manual in

21
00:01:24,640 --> 00:01:30,799
an annex in the distributed systems

22
00:01:27,040 --> 00:01:33,280
annex so it means that it's not required

23
00:01:30,799 --> 00:01:37,680
from every compiler to implement that

24
00:01:33,280 --> 00:01:40,159
in practice only gnat did implement that

25
00:01:37,680 --> 00:01:40,880
and i'm a bit sorry about that because

26
00:01:40,159 --> 00:01:43,520
it's a

27
00:01:40,880 --> 00:01:45,439
real nice feature of the ada and it

28
00:01:43,520 --> 00:01:45,759
would be nice if we had other compilers

29
00:01:45,439 --> 00:01:49,439
to

30
00:01:45,759 --> 00:01:52,399
implement it so

31
00:01:49,439 --> 00:01:53,279
to understand what it means it's one

32
00:01:52,399 --> 00:01:56,880
it's about

33
00:01:53,280 --> 00:02:00,159
having one program distributed

34
00:01:56,880 --> 00:02:03,360
over several machines you know

35
00:02:00,159 --> 00:02:04,320
distributed system that work well with

36
00:02:03,360 --> 00:02:07,520
several

37
00:02:04,320 --> 00:02:08,799
in general executions concurrently may

38
00:02:07,520 --> 00:02:11,840
have different

39
00:02:08,800 --> 00:02:14,400
levels of coupling you have tasking

40
00:02:11,840 --> 00:02:16,720
when it's inside in single program with

41
00:02:14,400 --> 00:02:20,000
shared memory

42
00:02:16,720 --> 00:02:24,080
then you have the distributed systems

43
00:02:20,000 --> 00:02:27,920
annex where it is a single program

44
00:02:24,080 --> 00:02:30,959
which is split over several computers

45
00:02:27,920 --> 00:02:34,640
okay and then you may have different

46
00:02:30,959 --> 00:02:38,720
programs communicating over the network

47
00:02:34,640 --> 00:02:41,440
so here it's a single program so

48
00:02:38,720 --> 00:02:42,319
it will we'll see it keeps all strong

49
00:02:41,440 --> 00:02:44,800
typing

50
00:02:42,319 --> 00:02:48,238
and all the check that you can have but

51
00:02:44,800 --> 00:02:51,840
still running on several machines

52
00:02:48,239 --> 00:02:55,120
and the goal of the annex is to make the

53
00:02:51,840 --> 00:02:58,000
programmer concentrate on the problem

54
00:02:55,120 --> 00:03:01,200
and be freed from all the nasty details

55
00:02:58,000 --> 00:03:03,599
of networking communication

56
00:03:01,200 --> 00:03:05,760
differences in representation and all

57
00:03:03,599 --> 00:03:09,920
those programs that plague

58
00:03:05,760 --> 00:03:13,679
distributed program so another program

59
00:03:09,920 --> 00:03:16,879
is made of several partitions

60
00:03:13,680 --> 00:03:20,319
so it's a very abstract definition but

61
00:03:16,879 --> 00:03:23,440
to be honest it's several executables

62
00:03:20,319 --> 00:03:24,640
okay you have several executables you

63
00:03:23,440 --> 00:03:27,440
run them together

64
00:03:24,640 --> 00:03:29,359
and together they build the whole

65
00:03:27,440 --> 00:03:32,079
program

66
00:03:29,360 --> 00:03:32,959
you have active partition that can run

67
00:03:32,080 --> 00:03:37,440
any program

68
00:03:32,959 --> 00:03:41,200
also passive partition that can contain

69
00:03:37,440 --> 00:03:44,720
code and data but no task

70
00:03:41,200 --> 00:03:48,640
nothing that's active

71
00:03:44,720 --> 00:03:52,400
you can even have several main programs

72
00:03:48,640 --> 00:03:54,559
the language requires only at least

73
00:03:52,400 --> 00:03:55,519
one main program in one of the

74
00:03:54,560 --> 00:03:58,560
partitions

75
00:03:55,519 --> 00:04:01,760
but you may have several main programs

76
00:03:58,560 --> 00:04:05,680
including one in each partition so

77
00:04:01,760 --> 00:04:05,679
this maps to different

78
00:04:05,920 --> 00:04:13,200
patterns for example if you imagine

79
00:04:09,360 --> 00:04:16,000
a hardware board plugged in a back plane

80
00:04:13,200 --> 00:04:18,399
so an active partition will be a

81
00:04:16,000 --> 00:04:21,519
processor board with a cpu

82
00:04:18,399 --> 00:04:23,440
and whatever but about sieve partition

83
00:04:21,519 --> 00:04:26,560
will be a memory board

84
00:04:23,440 --> 00:04:28,880
you can have ram for variables

85
00:04:26,560 --> 00:04:30,080
ram where you have the code of your

86
00:04:28,880 --> 00:04:32,880
subprograms

87
00:04:30,080 --> 00:04:34,159
but nothing that can run directly on the

88
00:04:32,880 --> 00:04:36,800
board

89
00:04:34,160 --> 00:04:39,280
on a local area network while it's a

90
00:04:36,800 --> 00:04:40,960
classical stuff with computers you may

91
00:04:39,280 --> 00:04:42,000
wonder how you could make passive

92
00:04:40,960 --> 00:04:46,000
partitions

93
00:04:42,000 --> 00:04:48,479
actually net manages to

94
00:04:46,000 --> 00:04:49,680
to be able to have passive partitions

95
00:04:48,479 --> 00:04:53,120
each variable

96
00:04:49,680 --> 00:04:56,880
is modeled as a file over nfs

97
00:04:53,120 --> 00:04:59,360
not very efficient but it works okay

98
00:04:56,880 --> 00:05:01,120
and it provides you with persistence by

99
00:04:59,360 --> 00:05:02,960
the same token so it

100
00:05:01,120 --> 00:05:04,880
can be quite interesting if you don't

101
00:05:02,960 --> 00:05:07,758
abuse it

102
00:05:04,880 --> 00:05:10,080
and even at the level of a number inside

103
00:05:07,759 --> 00:05:12,240
a single operating system

104
00:05:10,080 --> 00:05:13,520
well you could view the active partition

105
00:05:12,240 --> 00:05:16,880
as the process

106
00:05:13,520 --> 00:05:18,479
level tasking is about the threads level

107
00:05:16,880 --> 00:05:20,240
and that would be about the process

108
00:05:18,479 --> 00:05:23,360
level and

109
00:05:20,240 --> 00:05:24,479
for example a set of subprogram that is

110
00:05:23,360 --> 00:05:27,199
shared between

111
00:05:24,479 --> 00:05:28,800
between several executables that would

112
00:05:27,199 --> 00:05:31,919
map to a dll

113
00:05:28,800 --> 00:05:34,639
okay so i'm not saying that

114
00:05:31,919 --> 00:05:35,359
the current net implementation does all

115
00:05:34,639 --> 00:05:38,400
that

116
00:05:35,360 --> 00:05:42,320
but i want just to stress that the model

117
00:05:38,400 --> 00:05:44,080
is not linked to a particular model it

118
00:05:42,320 --> 00:05:47,840
has always been intended

119
00:05:44,080 --> 00:05:50,960
to be implementable in several

120
00:05:47,840 --> 00:05:53,840
contexts okay what i mean is

121
00:05:50,960 --> 00:05:54,239
if you take for example java's a remote

122
00:05:53,840 --> 00:05:58,000
net

123
00:05:54,240 --> 00:05:58,560
method invocation you designate a remote

124
00:05:58,000 --> 00:06:01,759
object

125
00:05:58,560 --> 00:06:03,680
through its ip address so

126
00:06:01,759 --> 00:06:04,880
it's purely internet there's nothing

127
00:06:03,680 --> 00:06:07,440
else you can do with it

128
00:06:04,880 --> 00:06:08,400
okay here it has been carefully made

129
00:06:07,440 --> 00:06:11,600
independent of

130
00:06:08,400 --> 00:06:14,080
any particular

131
00:06:11,600 --> 00:06:14,080
network

132
00:06:14,880 --> 00:06:21,199
so of course

133
00:06:17,919 --> 00:06:24,240
not all data can circulate

134
00:06:21,199 --> 00:06:27,520
on a network a task

135
00:06:24,240 --> 00:06:28,639
a pointer would be hard to if you

136
00:06:27,520 --> 00:06:30,400
exchange them

137
00:06:28,639 --> 00:06:32,560
that that would not be possible or it

138
00:06:30,400 --> 00:06:35,280
would be meaningless

139
00:06:32,560 --> 00:06:36,160
so you need to have some restrictions so

140
00:06:35,280 --> 00:06:40,318
the idea

141
00:06:36,160 --> 00:06:43,759
is you have a number of aspects

142
00:06:40,319 --> 00:06:47,280
that define how a package

143
00:06:43,759 --> 00:06:49,759
will behave regarding distribution

144
00:06:47,280 --> 00:06:50,479
i won't go into too many details but

145
00:06:49,759 --> 00:06:52,880
just

146
00:06:50,479 --> 00:06:54,240
to mention you have a regular package

147
00:06:52,880 --> 00:06:59,039
that has no

148
00:06:54,240 --> 00:07:01,599
um that has no categorization these are

149
00:06:59,039 --> 00:07:03,919
called categorization aspects

150
00:07:01,599 --> 00:07:05,360
without categorization the packages are

151
00:07:03,919 --> 00:07:08,080
duplicated so they are

152
00:07:05,360 --> 00:07:10,160
independent if you have a variable in a

153
00:07:08,080 --> 00:07:12,800
package in a partition

154
00:07:10,160 --> 00:07:14,240
that variable is not related to another

155
00:07:12,800 --> 00:07:16,479
to the same variable

156
00:07:14,240 --> 00:07:18,319
or with the same name in another

157
00:07:16,479 --> 00:07:21,599
partition

158
00:07:18,319 --> 00:07:24,639
your shared passive package are used

159
00:07:21,599 --> 00:07:27,280
um to manage the

160
00:07:24,639 --> 00:07:28,720
data that's directly shared so it's a

161
00:07:27,280 --> 00:07:31,840
common memory

162
00:07:28,720 --> 00:07:34,960
between the different

163
00:07:31,840 --> 00:07:36,560
partitions remote types allow the

164
00:07:34,960 --> 00:07:39,520
definition of types

165
00:07:36,560 --> 00:07:40,880
that can be exchanged between the

166
00:07:39,520 --> 00:07:43,120
partitions

167
00:07:40,880 --> 00:07:44,400
and remote call packages are the most

168
00:07:43,120 --> 00:07:48,639
interesting ones

169
00:07:44,400 --> 00:07:51,679
the one that can make rpcs remote

170
00:07:48,639 --> 00:07:54,800
rcp remote

171
00:07:51,680 --> 00:07:57,759
no remote procedure calls

172
00:07:54,800 --> 00:07:58,560
that where you can from a node from a

173
00:07:57,759 --> 00:08:01,440
partition

174
00:07:58,560 --> 00:08:03,440
called something that physically resides

175
00:08:01,440 --> 00:08:06,479
in another partition

176
00:08:03,440 --> 00:08:07,840
and for each kind of categorization

177
00:08:06,479 --> 00:08:10,878
of course there are a number of

178
00:08:07,840 --> 00:08:13,599
restrictions about what you can do

179
00:08:10,879 --> 00:08:15,440
those restrictions are very complicated

180
00:08:13,599 --> 00:08:16,719
you don't need to understand how it

181
00:08:15,440 --> 00:08:19,120
works

182
00:08:16,720 --> 00:08:21,280
you put the categorization the co you

183
00:08:19,120 --> 00:08:22,080
compile and the compiler will tell you

184
00:08:21,280 --> 00:08:24,878
what's allowed

185
00:08:22,080 --> 00:08:27,840
what's not allowed in ada we trust a

186
00:08:24,879 --> 00:08:27,840
compiler you know

187
00:08:29,360 --> 00:08:34,320
and since all the consistency of the

188
00:08:32,479 --> 00:08:37,360
program is guaranteed at

189
00:08:34,320 --> 00:08:40,000
program level it means that

190
00:08:37,360 --> 00:08:41,839
all the data representation are

191
00:08:40,000 --> 00:08:45,919
guaranteed to be consistent

192
00:08:41,839 --> 00:08:45,919
over all the partitions

193
00:08:48,080 --> 00:08:53,040
so you get a remote call how when you

194
00:08:51,200 --> 00:08:55,519
call a subprogram that something in

195
00:08:53,040 --> 00:08:57,760
another partition

196
00:08:55,519 --> 00:09:00,320
directly by calling what is called a

197
00:08:57,760 --> 00:09:03,040
remote subprogram

198
00:09:00,320 --> 00:09:03,040
so um

199
00:09:03,519 --> 00:09:07,440
so program with the aspect remote call

200
00:09:06,080 --> 00:09:11,680
interface so it's

201
00:09:07,440 --> 00:09:14,800
classical rpc of course you have

202
00:09:11,680 --> 00:09:17,199
to know the name of the package if you

203
00:09:14,800 --> 00:09:19,279
call a subprogram you have to know the

204
00:09:17,200 --> 00:09:20,959
name of the package so in terms of

205
00:09:19,279 --> 00:09:22,240
distribution it means you know the

206
00:09:20,959 --> 00:09:25,439
server

207
00:09:22,240 --> 00:09:29,360
you can you have a certain special kind

208
00:09:25,440 --> 00:09:33,120
of pointers that allow you to designate

209
00:09:29,360 --> 00:09:36,480
a subprogram in another package

210
00:09:33,120 --> 00:09:39,440
so it's a typical callback

211
00:09:36,480 --> 00:09:40,640
where you can call back a subprogram

212
00:09:39,440 --> 00:09:43,680
through a pointer

213
00:09:40,640 --> 00:09:46,720
in another partition but then you

214
00:09:43,680 --> 00:09:47,680
you have to get the pointer from

215
00:09:46,720 --> 00:09:50,880
somewhere

216
00:09:47,680 --> 00:09:51,279
so you have to get to have some kind of

217
00:09:50,880 --> 00:09:53,839
name

218
00:09:51,279 --> 00:09:55,680
server that will provide you with the

219
00:09:53,839 --> 00:10:01,279
pointer to

220
00:09:55,680 --> 00:10:01,279
the to the program being called

221
00:10:01,519 --> 00:10:08,399
and you can also have a remote

222
00:10:04,640 --> 00:10:12,160
objects the famous remote access to

223
00:10:08,399 --> 00:10:13,680
class-wide types so basically you can

224
00:10:12,160 --> 00:10:16,719
have a pointer to an

225
00:10:13,680 --> 00:10:19,760
object in the sense of a tag type

226
00:10:16,720 --> 00:10:23,120
and you can invoke methods

227
00:10:19,760 --> 00:10:26,640
of objects that are located in

228
00:10:23,120 --> 00:10:30,320
um in a remote node

229
00:10:26,640 --> 00:10:33,680
okay so you can have distributed objects

230
00:10:30,320 --> 00:10:36,160
and directly call the methods of the

231
00:10:33,680 --> 00:10:36,719
the object that's once again since you

232
00:10:36,160 --> 00:10:39,360
need to

233
00:10:36,720 --> 00:10:41,760
first get the pointer to the object then

234
00:10:39,360 --> 00:10:45,360
you'll need some name server

235
00:10:41,760 --> 00:10:48,959
and every the whole cement

236
00:10:45,360 --> 00:10:50,079
fix of eda is preserved so if a remote

237
00:10:48,959 --> 00:10:53,518
call raises

238
00:10:50,079 --> 00:10:55,920
an exception you'll get the exception

239
00:10:53,519 --> 00:10:56,800
of typing our checks and to be

240
00:10:55,920 --> 00:11:00,079
consistent

241
00:10:56,800 --> 00:11:03,439
and so on so distribution is completely

242
00:11:00,079 --> 00:11:07,040
transparent at least for the

243
00:11:03,440 --> 00:11:07,040
for the client for the caller

244
00:11:09,120 --> 00:11:12,800
when you transmit data over the new

245
00:11:11,600 --> 00:11:15,680
network

246
00:11:12,800 --> 00:11:17,359
the interface is designed in such a way

247
00:11:15,680 --> 00:11:20,880
that it uses

248
00:11:17,360 --> 00:11:24,240
the streams mechanism in either we have

249
00:11:20,880 --> 00:11:24,480
streams inspired without any shame from

250
00:11:24,240 --> 00:11:27,680
c

251
00:11:24,480 --> 00:11:30,000
plus plus streams and

252
00:11:27,680 --> 00:11:31,120
you have standard streams provided by

253
00:11:30,000 --> 00:11:33,600
the compiler

254
00:11:31,120 --> 00:11:35,760
and you can redefine the stream so the

255
00:11:33,600 --> 00:11:40,160
marshalling operation

256
00:11:35,760 --> 00:11:43,760
transforming your high level data type

257
00:11:40,160 --> 00:11:46,959
into a stream of bytes is performed

258
00:11:43,760 --> 00:11:50,000
automatically by the compiler

259
00:11:46,959 --> 00:11:52,959
using the stream that you can redefine

260
00:11:50,000 --> 00:11:53,920
so for example if you have a type name

261
00:11:52,959 --> 00:11:57,599
for example

262
00:11:53,920 --> 00:12:00,959
password you can redefine a marshalling

263
00:11:57,600 --> 00:12:02,160
function so that this type is always

264
00:12:00,959 --> 00:12:05,439
scripted

265
00:12:02,160 --> 00:12:06,079
and that your own redefinition will be

266
00:12:05,440 --> 00:12:08,240
used

267
00:12:06,079 --> 00:12:11,040
by the compiler and therefore you are

268
00:12:08,240 --> 00:12:13,839
guaranteed that

269
00:12:11,040 --> 00:12:16,319
never to have a clear password over the

270
00:12:13,839 --> 00:12:16,320
network

271
00:12:18,240 --> 00:12:22,720
so it means that strong typing is

272
00:12:20,560 --> 00:12:25,599
totally preserved you don't send

273
00:12:22,720 --> 00:12:28,079
bytes you send you exchange through

274
00:12:25,600 --> 00:12:31,120
normal mechanism

275
00:12:28,079 --> 00:12:31,120
high level data

276
00:12:32,639 --> 00:12:39,600
so how would you write in general

277
00:12:36,560 --> 00:12:42,719
distributed application first of all

278
00:12:39,600 --> 00:12:43,839
very important you don't care about

279
00:12:42,720 --> 00:12:45,760
distribution

280
00:12:43,839 --> 00:12:47,680
it's very tempting when you know that

281
00:12:45,760 --> 00:12:50,000
you'll have something that will work on

282
00:12:47,680 --> 00:12:52,319
several computers

283
00:12:50,000 --> 00:12:54,560
to think first oh what am i going to put

284
00:12:52,320 --> 00:12:57,920
on that computer and that

285
00:12:54,560 --> 00:13:01,119
if you do that any change will require a

286
00:12:57,920 --> 00:13:04,160
total redesign of your application

287
00:13:01,120 --> 00:13:07,040
and it will be extremely costly

288
00:13:04,160 --> 00:13:08,880
you know the the best way to design a

289
00:13:07,040 --> 00:13:11,279
distributed application

290
00:13:08,880 --> 00:13:12,399
is first to design your program on your

291
00:13:11,279 --> 00:13:15,519
own machine

292
00:13:12,399 --> 00:13:18,720
it works uh and you

293
00:13:15,519 --> 00:13:21,680
debug it and you design it on a thing as

294
00:13:18,720 --> 00:13:24,639
a regular application

295
00:13:21,680 --> 00:13:25,920
then you categorize you look at what

296
00:13:24,639 --> 00:13:28,959
you've done

297
00:13:25,920 --> 00:13:31,360
you said well these are some some

298
00:13:28,959 --> 00:13:34,638
casual utilities i don't mean not

299
00:13:31,360 --> 00:13:34,639
anything special

300
00:13:34,880 --> 00:13:41,120
here i have a centralized database

301
00:13:38,160 --> 00:13:42,480
so it must be shared if it's ever

302
00:13:41,120 --> 00:13:44,800
distributed

303
00:13:42,480 --> 00:13:47,680
here are the types that are used to

304
00:13:44,800 --> 00:13:50,880
exchange data with a database and so on

305
00:13:47,680 --> 00:13:54,319
so you just drop those little aspects

306
00:13:50,880 --> 00:13:57,439
on your code

307
00:13:54,320 --> 00:14:00,000
you recompile and you bow your head

308
00:13:57,440 --> 00:14:02,399
because in general there will be some

309
00:14:00,000 --> 00:14:03,680
restriction that's not obeyed so you'll

310
00:14:02,399 --> 00:14:06,160
need to change

311
00:14:03,680 --> 00:14:08,560
things here or there to make sure that

312
00:14:06,160 --> 00:14:11,920
it corresponds to your intent

313
00:14:08,560 --> 00:14:14,239
that's quite often for example you'll

314
00:14:11,920 --> 00:14:16,719
take off some type definition from a

315
00:14:14,240 --> 00:14:17,760
package to make a special remote types

316
00:14:16,720 --> 00:14:21,519
package

317
00:14:17,760 --> 00:14:21,519
or some changes like that

318
00:14:22,240 --> 00:14:27,360
then you decide on the distribution

319
00:14:25,440 --> 00:14:29,120
you decide that you will make three

320
00:14:27,360 --> 00:14:32,399
partitions

321
00:14:29,120 --> 00:14:33,680
and well the only shared package are the

322
00:14:32,399 --> 00:14:36,399
remote call

323
00:14:33,680 --> 00:14:37,920
interface packages and of course the

324
00:14:36,399 --> 00:14:41,279
shared passive

325
00:14:37,920 --> 00:14:44,399
so these are to be

326
00:14:41,279 --> 00:14:47,439
attached to some

327
00:14:44,399 --> 00:14:51,680
explicit partitions this is

328
00:14:47,440 --> 00:14:54,880
done uh thanks to a configuration file

329
00:14:51,680 --> 00:14:58,079
and i'll give you an example shortly

330
00:14:54,880 --> 00:15:01,360
okay you recompile

331
00:14:58,079 --> 00:15:03,920
the compiler will care about everything

332
00:15:01,360 --> 00:15:05,920
and you will get as many executables as

333
00:15:03,920 --> 00:15:07,920
you have defined partitions

334
00:15:05,920 --> 00:15:10,000
and then it's up to you to start your

335
00:15:07,920 --> 00:15:11,360
partitions where you want maybe on the

336
00:15:10,000 --> 00:15:15,920
same computer

337
00:15:11,360 --> 00:15:15,920
maybe on a different computer okay

338
00:15:16,079 --> 00:15:23,120
so that looks like a miracle

339
00:15:19,760 --> 00:15:25,519
have some are there some people who ever

340
00:15:23,120 --> 00:15:29,600
wrote distributed applications here

341
00:15:25,519 --> 00:15:33,279
yeah okay good so you appreciate

342
00:15:29,600 --> 00:15:35,759
the demo okay

343
00:15:33,279 --> 00:15:35,759
i'll

344
00:15:37,759 --> 00:15:42,320
turn now to this

345
00:15:43,279 --> 00:15:49,120
okay it's a very simple

346
00:15:46,560 --> 00:15:49,119
program

347
00:15:49,759 --> 00:15:56,320
and here i just have

348
00:15:53,360 --> 00:15:57,120
all the printing is done through that

349
00:15:56,320 --> 00:16:01,199
console

350
00:15:57,120 --> 00:16:02,160
package so console can you read it or if

351
00:16:01,199 --> 00:16:09,839
to be too small

352
00:16:02,160 --> 00:16:09,839
okay sorry but um

353
00:16:12,880 --> 00:16:16,160
okay that's better so it's just a

354
00:16:14,800 --> 00:16:18,959
package and

355
00:16:16,160 --> 00:16:21,519
we print by for the moment it's a

356
00:16:18,959 --> 00:16:25,359
regular package no categorization

357
00:16:21,519 --> 00:16:36,000
okay then i have

358
00:16:25,360 --> 00:16:39,199
a server

359
00:16:36,000 --> 00:16:41,120
this is a remote call interface package

360
00:16:39,199 --> 00:16:43,040
you see there is a primary remote called

361
00:16:41,120 --> 00:16:47,519
interface

362
00:16:43,040 --> 00:16:50,399
and what it does it registered

363
00:16:47,519 --> 00:16:51,600
client so when a client comes it calls

364
00:16:50,399 --> 00:16:54,480
register

365
00:16:51,600 --> 00:16:56,320
it keeps account of the number of

366
00:16:54,480 --> 00:16:59,519
registered clients

367
00:16:56,320 --> 00:17:02,639
and when that count reaches

368
00:16:59,519 --> 00:17:05,520
the expected number in that case three

369
00:17:02,639 --> 00:17:06,400
then i have a function must terminate

370
00:17:05,520 --> 00:17:10,559
that tell that

371
00:17:06,400 --> 00:17:12,240
now everybody has arrived so

372
00:17:10,559 --> 00:17:14,559
i can show you quickly the body if you

373
00:17:12,240 --> 00:17:19,839
want and

374
00:17:14,559 --> 00:17:19,839
come on okay let's do it this way

375
00:17:24,319 --> 00:17:31,760
so you see i just have a global counter

376
00:17:28,319 --> 00:17:32,320
but it's to show you that that counter

377
00:17:31,760 --> 00:17:35,280
must be

378
00:17:32,320 --> 00:17:37,760
shared between the different partitions

379
00:17:35,280 --> 00:17:37,760
of course

380
00:17:39,440 --> 00:17:47,840
and then the client at very

381
00:17:42,960 --> 00:17:47,840
simple also

382
00:17:58,840 --> 00:18:05,760
oops

383
00:18:01,840 --> 00:18:08,879
will fit ah just not okay so the code

384
00:18:05,760 --> 00:18:09,760
the client just registers it prints a

385
00:18:08,880 --> 00:18:13,520
message

386
00:18:09,760 --> 00:18:16,240
by printing message well it gives us

387
00:18:13,520 --> 00:18:18,320
the time and why not must terminate

388
00:18:16,240 --> 00:18:20,640
while not everybody's there

389
00:18:18,320 --> 00:18:22,879
it loops saying it waits for a certain

390
00:18:20,640 --> 00:18:26,000
number of seconds delays

391
00:18:22,880 --> 00:18:28,160
one second and when time it must

392
00:18:26,000 --> 00:18:31,520
terminate becomes true it just prints

393
00:18:28,160 --> 00:18:35,039
that it's terminating okay

394
00:18:31,520 --> 00:18:39,360
so for the moment

395
00:18:35,039 --> 00:18:42,400
the interesting point is the console

396
00:18:39,360 --> 00:18:43,918
that prints the message for now it's a

397
00:18:42,400 --> 00:18:47,760
regular package

398
00:18:43,919 --> 00:18:51,360
it will be duplicated in each partition

399
00:18:47,760 --> 00:18:51,840
so i prepared everything so we don't

400
00:18:51,360 --> 00:18:54,959
waste

401
00:18:51,840 --> 00:18:57,039
time but believe me i didn't cheat so if

402
00:18:54,960 --> 00:18:58,559
you want me to recompile in front of you

403
00:18:57,039 --> 00:19:01,760
i'll be happy to do it

404
00:18:58,559 --> 00:19:03,520
okay but you're not here to watch

405
00:19:01,760 --> 00:19:08,000
compilation time

406
00:19:03,520 --> 00:19:11,840
so if i start partition one

407
00:19:08,000 --> 00:19:11,840
it should start shortly

408
00:19:14,080 --> 00:19:19,760
oh i forgot to mention the server itself

409
00:19:17,280 --> 00:19:20,320
the server package prints when a new

410
00:19:19,760 --> 00:19:25,120
client

411
00:19:20,320 --> 00:19:28,399
arrives so you have seen that

412
00:19:25,120 --> 00:19:33,360
i'm can you see that

413
00:19:28,400 --> 00:19:33,360
excuse me oh yes sure

414
00:19:35,039 --> 00:19:41,440
that's better okay

415
00:19:38,080 --> 00:19:45,760
a bit small but i think you can see so

416
00:19:41,440 --> 00:19:45,760
it prints in its own window

417
00:19:46,000 --> 00:19:52,880
and now i start the second partition

418
00:19:50,880 --> 00:19:54,880
which is printing you see the server

419
00:19:52,880 --> 00:19:59,280
print on the left

420
00:19:54,880 --> 00:20:02,480
and here it prints on its own window

421
00:19:59,280 --> 00:20:05,600
okay if i start a third

422
00:20:02,480 --> 00:20:07,760
client then

423
00:20:05,600 --> 00:20:10,320
everybody terminates the con has been

424
00:20:07,760 --> 00:20:14,320
reached and everybody terminates

425
00:20:10,320 --> 00:20:14,320
okay now

426
00:20:14,640 --> 00:20:21,840
let's have some fun

427
00:20:23,760 --> 00:20:35,840
i change to another directory where i

428
00:20:26,640 --> 00:20:35,840
prepare the second step of the demo

429
00:20:37,919 --> 00:20:41,600
and okay

430
00:20:44,159 --> 00:20:50,159
so now oh

431
00:20:47,440 --> 00:20:51,840
i forgot to show you something important

432
00:20:50,159 --> 00:21:02,960
sorry

433
00:20:51,840 --> 00:21:06,000
to config the configuration

434
00:21:02,960 --> 00:21:09,120
so this is the file that defines

435
00:21:06,000 --> 00:21:11,280
the distribution the configuration

436
00:21:09,120 --> 00:21:13,120
here you see i just declared three

437
00:21:11,280 --> 00:21:15,600
partitions

438
00:21:13,120 --> 00:21:16,158
and i have only one remote called

439
00:21:15,600 --> 00:21:18,639
interface

440
00:21:16,159 --> 00:21:19,760
package the server so i said that the

441
00:21:18,640 --> 00:21:22,880
partition one

442
00:21:19,760 --> 00:21:26,400
contain the server

443
00:21:22,880 --> 00:21:28,320
client is my main procedure and

444
00:21:26,400 --> 00:21:30,080
well in that system there is a kind of

445
00:21:28,320 --> 00:21:34,799
main main procedure

446
00:21:30,080 --> 00:21:37,760
you know so this one is in partition one

447
00:21:34,799 --> 00:21:38,720
and there is a secondary main in

448
00:21:37,760 --> 00:21:43,440
partition two

449
00:21:38,720 --> 00:21:46,559
and partition three that pragma starter

450
00:21:43,440 --> 00:21:50,240
here for the because i need to start

451
00:21:46,559 --> 00:21:52,960
all this in three different windows

452
00:21:50,240 --> 00:21:53,919
i start them by hand but you can have

453
00:21:52,960 --> 00:21:56,960
the compiler

454
00:21:53,919 --> 00:22:00,159
generate automatically a starter

455
00:21:56,960 --> 00:22:02,720
that will run every partition

456
00:22:00,159 --> 00:22:04,320
in you can tell in which on which

457
00:22:02,720 --> 00:22:06,640
machine and so on

458
00:22:04,320 --> 00:22:07,918
and the funny thing is that starter can

459
00:22:06,640 --> 00:22:10,559
be written

460
00:22:07,919 --> 00:22:11,520
in either in ada and automatically

461
00:22:10,559 --> 00:22:14,559
compiled

462
00:22:11,520 --> 00:22:15,679
or generally rated as a shell script so

463
00:22:14,559 --> 00:22:18,158
if you want to see

464
00:22:15,679 --> 00:22:20,880
what happens and that generated

465
00:22:18,159 --> 00:22:20,880
automatically

466
00:22:21,600 --> 00:22:30,480
okay so we move to step two

467
00:22:25,760 --> 00:22:30,480
what did i change here very few

468
00:22:36,960 --> 00:22:43,919
i just added in my console

469
00:22:40,320 --> 00:22:46,960
pragma remote call interface

470
00:22:43,919 --> 00:22:50,000
i didn't change anything else but

471
00:22:46,960 --> 00:22:52,480
now in a sense i have a printer

472
00:22:50,000 --> 00:22:53,520
server instead of each partition

473
00:22:52,480 --> 00:22:56,720
printing

474
00:22:53,520 --> 00:23:00,158
in its own domain i have

475
00:22:56,720 --> 00:23:04,480
a shared printer

476
00:23:00,159 --> 00:23:06,840
server and at the level of the

477
00:23:04,480 --> 00:23:09,840
[Music]

478
00:23:06,840 --> 00:23:09,840
configuration

479
00:23:13,440 --> 00:23:19,600
you see i just added console since

480
00:23:16,559 --> 00:23:22,639
now it's a remote call interface package

481
00:23:19,600 --> 00:23:26,480
it has to be assigned to a certain

482
00:23:22,640 --> 00:23:30,400
partition so as i assign it to partition

483
00:23:26,480 --> 00:23:33,679
one and the rest is the same

484
00:23:30,400 --> 00:23:33,679
and then you recompile

485
00:23:34,000 --> 00:23:40,080
and i start

486
00:23:37,120 --> 00:23:40,080
partition one

487
00:23:41,279 --> 00:23:46,960
there there is a kind of middleware in

488
00:23:44,559 --> 00:23:51,678
behind if i have some time maybe i

489
00:23:46,960 --> 00:23:56,080
told you for now it seems like before

490
00:23:51,679 --> 00:23:59,440
but if now i start partition 2

491
00:23:56,080 --> 00:24:01,840
all messages for partition 2 are printed

492
00:23:59,440 --> 00:24:03,760
in the same window because that's the

493
00:24:01,840 --> 00:24:08,959
first window is where

494
00:24:03,760 --> 00:24:08,960
the printer server resides okay

495
00:24:10,320 --> 00:24:14,480
and of course if i start my third

496
00:24:13,600 --> 00:24:18,000
partition

497
00:24:14,480 --> 00:24:22,320
we'll see a new client and then

498
00:24:18,000 --> 00:24:26,240
everybody terminates okay

499
00:24:22,320 --> 00:24:30,559
now imagine that i made

500
00:24:26,240 --> 00:24:32,559
some insufficient design about the load

501
00:24:30,559 --> 00:24:35,918
of my server

502
00:24:32,559 --> 00:24:37,678
and that first server is really too

503
00:24:35,919 --> 00:24:39,760
heavily loaded

504
00:24:37,679 --> 00:24:41,279
okay that happens quite often on

505
00:24:39,760 --> 00:24:45,279
distributed systems

506
00:24:41,279 --> 00:24:48,320
it's hard to foresee what the actual

507
00:24:45,279 --> 00:24:51,440
load will be so i decide

508
00:24:48,320 --> 00:24:54,480
i'll put a fourth machine

509
00:24:51,440 --> 00:24:57,120
that will just hold the message server

510
00:24:54,480 --> 00:24:57,120
the console

511
00:24:58,840 --> 00:25:01,840
fine

512
00:25:01,919 --> 00:25:15,840
step three here

513
00:25:26,559 --> 00:25:33,200
i didn't change anything

514
00:25:30,000 --> 00:25:38,400
in the era

515
00:25:33,200 --> 00:25:43,840
i just changed the configuration file

516
00:25:38,400 --> 00:25:43,840
okay for you to see

517
00:25:44,880 --> 00:25:52,559
i define a fourth partition here

518
00:25:49,360 --> 00:25:54,320
where i put the console okay

519
00:25:52,559 --> 00:25:57,279
that's all i did i didn't change the

520
00:25:54,320 --> 00:26:00,158
software at all

521
00:25:57,279 --> 00:26:00,159
recompile

522
00:26:01,360 --> 00:26:07,039
okay it's here so let's

523
00:26:04,640 --> 00:26:08,640
start partition one nothing happens of

524
00:26:07,039 --> 00:26:12,879
course it's printing

525
00:26:08,640 --> 00:26:16,159
in partition 2 in partition

526
00:26:12,880 --> 00:26:18,480
4 okay let's start it

527
00:26:16,159 --> 00:26:18,480
now

528
00:26:19,600 --> 00:26:24,480
and you see all the messages are now

529
00:26:21,840 --> 00:26:25,918
moving to that dedicated partition for

530
00:26:24,480 --> 00:26:29,679
printing

531
00:26:25,919 --> 00:26:33,840
okay and of course if i now

532
00:26:29,679 --> 00:26:38,400
start partition three

533
00:26:33,840 --> 00:26:41,760
up everybody terminates nicely

534
00:26:38,400 --> 00:26:45,120
so let's this is

535
00:26:41,760 --> 00:26:48,960
just a small program to demonstrate it

536
00:26:45,120 --> 00:26:52,559
but think about it i first started

537
00:26:48,960 --> 00:26:55,679
with no centralized server

538
00:26:52,559 --> 00:26:59,918
each part of the program used its own

539
00:26:55,679 --> 00:27:02,720
local server then i decided

540
00:26:59,919 --> 00:27:04,559
to have one centralized server to do

541
00:27:02,720 --> 00:27:07,600
everything

542
00:27:04,559 --> 00:27:09,440
i added one pragma

543
00:27:07,600 --> 00:27:10,639
change the configuration file and

544
00:27:09,440 --> 00:27:13,840
recompiled

545
00:27:10,640 --> 00:27:15,679
that's all i had to do and then i

546
00:27:13,840 --> 00:27:18,480
decided to change

547
00:27:15,679 --> 00:27:21,279
the way the load is split on my

548
00:27:18,480 --> 00:27:23,200
different server add a new machine with

549
00:27:21,279 --> 00:27:26,960
a new server

550
00:27:23,200 --> 00:27:30,559
i changed one line in my configuration

551
00:27:26,960 --> 00:27:34,640
file i didn't change my ada software

552
00:27:30,559 --> 00:27:37,760
and i had my new configuration okay

553
00:27:34,640 --> 00:27:41,679
so generally people who

554
00:27:37,760 --> 00:27:42,240
never had to cope with distributed

555
00:27:41,679 --> 00:27:45,039
system

556
00:27:42,240 --> 00:27:46,480
find that very nice those who had to

557
00:27:45,039 --> 00:27:50,158
cope with distribution

558
00:27:46,480 --> 00:27:53,440
system are absolutely

559
00:27:50,159 --> 00:27:56,080
stunned by this because all

560
00:27:53,440 --> 00:27:58,320
the hard work yes i have some spare

561
00:27:56,080 --> 00:28:01,360
minutes i can show you something

562
00:27:58,320 --> 00:28:02,080
is done by the compiler when you compile

563
00:28:01,360 --> 00:28:06,320
something

564
00:28:02,080 --> 00:28:09,439
with the distribution you see here

565
00:28:06,320 --> 00:28:13,279
a little directory that appears

566
00:28:09,440 --> 00:28:16,720
with the name dsa that means distributed

567
00:28:13,279 --> 00:28:20,000
systems architecture okay

568
00:28:16,720 --> 00:28:20,000
and if you look at that

569
00:28:21,200 --> 00:28:26,240
you'll see the partitions and you see

570
00:28:24,799 --> 00:28:28,879
all the files

571
00:28:26,240 --> 00:28:30,159
you're seeing a number of header files

572
00:28:28,880 --> 00:28:33,679
here

573
00:28:30,159 --> 00:28:34,640
that are all automatically generated by

574
00:28:33,679 --> 00:28:37,840
the systems

575
00:28:34,640 --> 00:28:40,640
and compiled by the system that ensure

576
00:28:37,840 --> 00:28:41,678
the whole of the data transmission the

577
00:28:40,640 --> 00:28:44,559
coordination

578
00:28:41,679 --> 00:28:45,919
finding the name server and all those

579
00:28:44,559 --> 00:28:48,000
things that you need

580
00:28:45,919 --> 00:28:51,840
when you are doing a distributed system

581
00:28:48,000 --> 00:28:51,840
all generated automatically

582
00:28:56,840 --> 00:29:00,559
okay

583
00:28:58,080 --> 00:29:00,559
fine

584
00:29:04,159 --> 00:29:09,520
so well since we had

585
00:29:10,840 --> 00:29:13,840
some

586
00:29:18,559 --> 00:29:25,600
so now i'll show you another example

587
00:29:22,399 --> 00:29:26,000
um how to make distributed object so

588
00:29:25,600 --> 00:29:28,959
it's

589
00:29:26,000 --> 00:29:29,600
not a live demo because it would be a

590
00:29:28,960 --> 00:29:32,960
bit

591
00:29:29,600 --> 00:29:34,879
long to date imagine you have a tips

592
00:29:32,960 --> 00:29:38,159
well nowhere days of course you don't

593
00:29:34,880 --> 00:29:38,159
use tips anymore but

594
00:29:38,320 --> 00:29:42,799
could be any server do you well for

595
00:29:41,279 --> 00:29:45,200
archiving

596
00:29:42,799 --> 00:29:47,440
well when you see the amount of data you

597
00:29:45,200 --> 00:29:49,840
can put on a

598
00:29:47,440 --> 00:29:50,960
microsd card it's really impressive

599
00:29:49,840 --> 00:29:54,559
anyway

600
00:29:50,960 --> 00:29:58,080
so imagine i have one computer here

601
00:29:54,559 --> 00:30:01,200
here here that manages tapes

602
00:29:58,080 --> 00:30:04,399
okay so first i define an

603
00:30:01,200 --> 00:30:07,120
abstract data type tape

604
00:30:04,399 --> 00:30:08,158
with pure means it's another

605
00:30:07,120 --> 00:30:10,399
categorization

606
00:30:08,159 --> 00:30:11,760
package that means that there is no side

607
00:30:10,399 --> 00:30:14,879
effect

608
00:30:11,760 --> 00:30:19,200
and well the basic operation rewind

609
00:30:14,880 --> 00:30:19,200
read and write okay

610
00:30:21,520 --> 00:30:27,840
if i want to access

611
00:30:24,799 --> 00:30:31,360
a distributed object i

612
00:30:27,840 --> 00:30:34,559
mentioned that i need a name

613
00:30:31,360 --> 00:30:37,678
server so in a different partition

614
00:30:34,559 --> 00:30:38,639
i have that name server here so it's a

615
00:30:37,679 --> 00:30:41,919
remote call

616
00:30:38,640 --> 00:30:45,600
interface so you know where it is and

617
00:30:41,919 --> 00:30:48,799
it defines a pointer to that

618
00:30:45,600 --> 00:30:49,760
tips dot instance t class so it's a

619
00:30:48,799 --> 00:30:53,360
class

620
00:30:49,760 --> 00:30:56,399
type a car a type that encloses

621
00:30:53,360 --> 00:30:59,439
all desonants

622
00:30:56,399 --> 00:31:03,039
and since it's a regular name

623
00:30:59,440 --> 00:31:07,600
server you register a pointer to a tape

624
00:31:03,039 --> 00:31:10,640
under a certain name you can find

625
00:31:07,600 --> 00:31:12,799
from a name the pointer

626
00:31:10,640 --> 00:31:18,960
the corresponding pointer and you can

627
00:31:12,799 --> 00:31:21,840
unregister it if you want

628
00:31:18,960 --> 00:31:23,440
now you have an implementation of that

629
00:31:21,840 --> 00:31:26,480
object

630
00:31:23,440 --> 00:31:30,320
so a tip driver

631
00:31:26,480 --> 00:31:31,360
and so you define your own tape if you

632
00:31:30,320 --> 00:31:34,799
want

633
00:31:31,360 --> 00:31:39,519
the driver the concrete implementation

634
00:31:34,799 --> 00:31:42,000
of a tape drive and so you redefine

635
00:31:39,519 --> 00:31:43,039
the procedure rewind read and write by

636
00:31:42,000 --> 00:31:46,559
the way

637
00:31:43,039 --> 00:31:49,600
the overriding keyword here make sure

638
00:31:46,559 --> 00:31:50,720
that you are actually redefining a

639
00:31:49,600 --> 00:31:53,120
method

640
00:31:50,720 --> 00:31:54,880
and not due to some type or anything

641
00:31:53,120 --> 00:31:57,678
else defining

642
00:31:54,880 --> 00:31:57,679
something new

643
00:31:58,399 --> 00:32:05,678
you declare two tape objects here

644
00:32:02,240 --> 00:32:09,840
and you def you register those tapes

645
00:32:05,679 --> 00:32:13,039
under a certain name to the name server

646
00:32:09,840 --> 00:32:16,639
so you send to the rim

647
00:32:13,039 --> 00:32:19,679
to the remote name server

648
00:32:16,640 --> 00:32:24,080
a pointer that through the network

649
00:32:19,679 --> 00:32:24,080
designates your two tip drives

650
00:32:25,840 --> 00:32:32,760
and then the client which is a pure

651
00:32:29,279 --> 00:32:35,840
normal program without any

652
00:32:32,760 --> 00:32:39,200
categorization can declare

653
00:32:35,840 --> 00:32:42,320
two objects of tab pointer

654
00:32:39,200 --> 00:32:44,480
it will ask the name server to give the

655
00:32:42,320 --> 00:32:46,960
pointer that through the network

656
00:32:44,480 --> 00:32:51,440
designate those state drives

657
00:32:46,960 --> 00:32:51,440
and use that as usual

658
00:32:51,679 --> 00:33:00,640
now let maybe you didn't notice that

659
00:32:57,519 --> 00:33:03,840
but there is nothing in that example

660
00:33:00,640 --> 00:33:07,200
that refers to distribution except some

661
00:33:03,840 --> 00:33:10,480
pragmas here or there you just

662
00:33:07,200 --> 00:33:12,880
write it as a normal software

663
00:33:10,480 --> 00:33:14,240
and then you write your configuration to

664
00:33:12,880 --> 00:33:16,080
tell on which com

665
00:33:14,240 --> 00:33:17,440
tutor you want your tapes on which

666
00:33:16,080 --> 00:33:21,439
computer you want the name

667
00:33:17,440 --> 00:33:25,440
server and uh normally

668
00:33:21,440 --> 00:33:29,919
um you call

669
00:33:25,440 --> 00:33:29,919
you build your program by calling

670
00:33:30,000 --> 00:33:37,039
netmake or gpr build

671
00:33:33,440 --> 00:33:40,640
on your configure on your project file

672
00:33:37,039 --> 00:33:43,600
all you have to do is call p.o.netdist

673
00:33:40,640 --> 00:33:45,519
on the configuration file and it will

674
00:33:43,600 --> 00:33:47,760
recompile everything and that's all you

675
00:33:45,519 --> 00:33:47,760
need

676
00:33:50,559 --> 00:33:57,039
okay oh i've been even a

677
00:33:53,919 --> 00:33:59,679
bit earlier we have five minutes for

678
00:33:57,039 --> 00:33:59,679
questions

679
00:34:00,000 --> 00:34:04,159
wow so impressed yes please

680
00:34:04,370 --> 00:34:07,469
[Music]

681
00:34:14,480 --> 00:34:22,719
well there is

682
00:34:18,719 --> 00:34:25,520
it of course oh yes

683
00:34:22,719 --> 00:34:25,520
so the question

684
00:34:25,839 --> 00:34:32,320
was about the communication

685
00:34:29,040 --> 00:34:34,079
the necessity of a firewall and problems

686
00:34:32,320 --> 00:34:37,200
with firewalls and so on

687
00:34:34,079 --> 00:34:40,480
of course you need some middleware

688
00:34:37,199 --> 00:34:42,399
and i was afraid of being a bit short in

689
00:34:40,480 --> 00:34:45,520
time so i didn't put the slide

690
00:34:42,399 --> 00:34:46,960
but there is a middleware that's

691
00:34:45,520 --> 00:34:50,639
provided

692
00:34:46,960 --> 00:34:50,639
i want it i'll show you

693
00:34:51,520 --> 00:34:55,359
here in that window you have the

694
00:34:53,760 --> 00:34:58,800
middleware ready

695
00:34:55,359 --> 00:35:03,359
okay and when the middleware starts it

696
00:34:58,800 --> 00:35:04,940
gives you a magical string

697
00:35:03,359 --> 00:35:07,598
that's somewhere here

698
00:35:04,940 --> 00:35:10,800
[Music]

699
00:35:07,599 --> 00:35:11,760
okay polio coba name service blah blah

700
00:35:10,800 --> 00:35:14,640
blah blah

701
00:35:11,760 --> 00:35:17,359
and you have to set some environment

702
00:35:14,640 --> 00:35:20,160
variable to that magical string

703
00:35:17,359 --> 00:35:21,040
so that you have to boot from something

704
00:35:20,160 --> 00:35:24,799
from somewhere

705
00:35:21,040 --> 00:35:28,960
of course now of course

706
00:35:24,800 --> 00:35:32,480
that middleware must be accessible

707
00:35:28,960 --> 00:35:34,880
from your partitions so of course if you

708
00:35:32,480 --> 00:35:37,920
have firewalls in the middle

709
00:35:34,880 --> 00:35:40,960
or actually

710
00:35:37,920 --> 00:35:43,839
i intended to make the

711
00:35:40,960 --> 00:35:45,680
demo a bit more impressive by having one

712
00:35:43,839 --> 00:35:49,440
of the partitions running

713
00:35:45,680 --> 00:35:50,319
on my computer and at isilemolino near

714
00:35:49,440 --> 00:35:53,760
paris

715
00:35:50,320 --> 00:35:58,400
okay and through

716
00:35:53,760 --> 00:36:01,440
of course a vpn

717
00:35:58,400 --> 00:36:04,160
but it happens that the wi-fi here

718
00:36:01,440 --> 00:36:06,720
there is a firewall that does not let

719
00:36:04,160 --> 00:36:09,759
the vpns

720
00:36:06,720 --> 00:36:12,078
okay so i had to make it local

721
00:36:09,760 --> 00:36:13,760
okay normally it would have been even

722
00:36:12,079 --> 00:36:16,560
better because

723
00:36:13,760 --> 00:36:18,560
well trust me i'm sorry or come to my

724
00:36:16,560 --> 00:36:21,200
office and you silly more you know

725
00:36:18,560 --> 00:36:22,160
i can show you that it's exactly the

726
00:36:21,200 --> 00:36:24,319
same thing

727
00:36:22,160 --> 00:36:25,440
if one of the partitions is running

728
00:36:24,320 --> 00:36:28,079
linux

729
00:36:25,440 --> 00:36:29,119
side of windows okay it works exactly

730
00:36:28,079 --> 00:36:30,960
the same

731
00:36:29,119 --> 00:36:32,720
but of course you don't get rid of all

732
00:36:30,960 --> 00:36:36,640
the problems inherent

733
00:36:32,720 --> 00:36:40,640
with networks okay

734
00:36:36,640 --> 00:36:43,759
other uh questions networks

735
00:36:40,640 --> 00:36:47,118
what about error handling what happens

736
00:36:43,760 --> 00:36:47,119
if the server is not available

737
00:36:50,400 --> 00:36:58,160
okay if it's not available when you

738
00:36:55,040 --> 00:36:59,920
you start you have an exception and the

739
00:36:58,160 --> 00:37:02,930
partition doesn't start

740
00:36:59,920 --> 00:37:04,320
okay if you lose it

741
00:37:02,930 --> 00:37:08,078
[Music]

742
00:37:04,320 --> 00:37:10,079
well actually the middle of

743
00:37:08,079 --> 00:37:11,280
maybe did a couple people could answer

744
00:37:10,079 --> 00:37:14,720
that better

745
00:37:11,280 --> 00:37:17,440
but the middleware allows you

746
00:37:14,720 --> 00:37:18,959
to exchange the ip addresses of the

747
00:37:17,440 --> 00:37:21,440
various partitions

748
00:37:18,960 --> 00:37:24,720
i'm not sure that it plays a role once

749
00:37:21,440 --> 00:37:24,720
it's completely started

750
00:37:25,359 --> 00:37:31,279
no okay

751
00:37:28,480 --> 00:37:33,520
well it's a very specialized domain so

752
00:37:31,280 --> 00:37:33,839
you have two or three guys that i call

753
00:37:33,520 --> 00:37:37,040
that

754
00:37:33,839 --> 00:37:39,279
know the answer you just trust

755
00:37:37,040 --> 00:37:39,279
them

756
00:37:40,400 --> 00:37:46,800
there is an exception that's intended

757
00:37:43,839 --> 00:37:48,839
for communication problems in the

758
00:37:46,800 --> 00:37:52,320
network interface

759
00:37:48,839 --> 00:37:56,078
uh yes i can mention that

760
00:37:52,320 --> 00:38:00,119
now all communications have to go

761
00:37:56,079 --> 00:38:01,839
through a dedicated package called

762
00:38:00,119 --> 00:38:06,000
system.rci

763
00:38:01,839 --> 00:38:09,359
and that package and

764
00:38:06,000 --> 00:38:11,119
the implementation of that package is in

765
00:38:09,359 --> 00:38:14,480
charge of the transportation

766
00:38:11,119 --> 00:38:18,160
layer and the standard makes it very

767
00:38:14,480 --> 00:38:21,040
explicit that you are allowed to provide

768
00:38:18,160 --> 00:38:23,598
your own implementation on that package

769
00:38:21,040 --> 00:38:26,800
it means that if your compiler supports

770
00:38:23,599 --> 00:38:31,839
data nx and you have some

771
00:38:26,800 --> 00:38:35,680
proprietary networks uh safety

772
00:38:31,839 --> 00:38:38,320
whatever then you just have to rewrite

773
00:38:35,680 --> 00:38:39,680
the body of that package to handle all

774
00:38:38,320 --> 00:38:42,720
the communications

775
00:38:39,680 --> 00:38:43,759
but the compiler does not know about the

776
00:38:42,720 --> 00:38:47,520
transportation

777
00:38:43,760 --> 00:38:52,480
layer so you can use various

778
00:38:47,520 --> 00:38:52,480
networking solutions with that okay

779
00:38:54,560 --> 00:39:01,839
something else yeah

780
00:39:06,720 --> 00:39:12,560
no no it's special to the poly orb

781
00:39:10,000 --> 00:39:14,240
implementation oh yes i was talking

782
00:39:12,560 --> 00:39:17,359
about that and i

783
00:39:14,240 --> 00:39:20,720
wondered somewhere else but uh here

784
00:39:17,359 --> 00:39:23,359
the middleware i use is called polyorb

785
00:39:20,720 --> 00:39:25,118
it's something that's provided by

786
00:39:23,359 --> 00:39:27,680
edacore also

787
00:39:25,119 --> 00:39:29,200
and it's called a skidophrenic

788
00:39:27,680 --> 00:39:32,640
middleware

789
00:39:29,200 --> 00:39:35,680
because it has several personalities

790
00:39:32,640 --> 00:39:38,640
in the same person at the same time

791
00:39:35,680 --> 00:39:40,799
so it is a middleware for the

792
00:39:38,640 --> 00:39:44,000
distributed system annex

793
00:39:40,800 --> 00:39:47,920
but at the same time it is a media

794
00:39:44,000 --> 00:39:51,200
it's a coba server and

795
00:39:47,920 --> 00:39:54,680
mma or something like that server and

796
00:39:51,200 --> 00:39:57,839
some other protocol and it allows the

797
00:39:54,680 --> 00:40:01,040
simultaneous views of the same object

798
00:39:57,839 --> 00:40:04,640
so you can declare a distributed object

799
00:40:01,040 --> 00:40:06,000
in ada as a tag type and from your c

800
00:40:04,640 --> 00:40:10,160
plus plus application

801
00:40:06,000 --> 00:40:13,520
it will be viewed as a corbat class

802
00:40:10,160 --> 00:40:16,000
okay so you can exchange data

803
00:40:13,520 --> 00:40:18,800
with different protocols and the

804
00:40:16,000 --> 00:40:21,680
middleware that the translation be

805
00:40:18,800 --> 00:40:23,280
between the different views the

806
00:40:21,680 --> 00:40:25,839
different personalities of the

807
00:40:23,280 --> 00:40:25,839
middleware

808
00:40:28,240 --> 00:40:31,118
anything else

809
00:40:31,520 --> 00:40:35,599
okay i think i'm right in time

810
00:40:36,550 --> 00:40:53,839
[Applause]

811
00:40:39,200 --> 00:40:53,839
okay with pleasure

812
00:40:56,400 --> 00:41:03,440
no in coba

813
00:40:59,839 --> 00:41:04,000
you declare the types and it's intended

814
00:41:03,440 --> 00:41:07,280
for

815
00:41:04,000 --> 00:41:10,800
different application

816
00:41:07,280 --> 00:41:15,599
that communicate through shared object

817
00:41:10,800 --> 00:41:19,280
and you hope that the ideal is the same

818
00:41:15,599 --> 00:41:21,520
on the various applications idl is the

819
00:41:19,280 --> 00:41:22,720
cobalt language for defining the shared

820
00:41:21,520 --> 00:41:26,480
objects

821
00:41:22,720 --> 00:41:28,799
but there is no cross checks for example

822
00:41:26,480 --> 00:41:31,440
that the various applications

823
00:41:28,800 --> 00:41:32,319
use the same definition of your karba

824
00:41:31,440 --> 00:41:36,400
object

825
00:41:32,319 --> 00:41:39,200
okay in ada it's all compiled together

826
00:41:36,400 --> 00:41:40,000
with all the type controls that we are

827
00:41:39,200 --> 00:41:43,200
used to with

828
00:41:40,000 --> 00:41:45,599
error so there is a guarantee

829
00:41:43,200 --> 00:41:47,200
that the data representation and the

830
00:41:45,599 --> 00:41:50,560
objects will be the same

831
00:41:47,200 --> 00:41:51,520
in all your partitions but it's a single

832
00:41:50,560 --> 00:41:54,720
program

833
00:41:51,520 --> 00:41:55,839
split over several partitions with coba

834
00:41:54,720 --> 00:41:57,520
it's more aware

835
00:41:55,839 --> 00:41:59,759
of having different programs that

836
00:41:57,520 --> 00:42:03,280
communicate through object

837
00:41:59,760 --> 00:42:17,119
so there is a difference

838
00:42:03,280 --> 00:42:19,200
okay thank you for your thank you

839
00:42:17,119 --> 00:42:19,200
you

