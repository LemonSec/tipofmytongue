1
00:00:06,000 --> 00:00:10,800
i want to introduce you

2
00:00:08,559 --> 00:00:11,759
a little bit cortes sorry for my

3
00:00:10,800 --> 00:00:15,759
pronunciation

4
00:00:11,759 --> 00:00:19,520
it's wrong and he have a talk

5
00:00:15,759 --> 00:00:23,439
to uh about the geeks

6
00:00:19,520 --> 00:00:24,800
in the container age system managing

7
00:00:23,439 --> 00:00:26,160
yeah welcome thank you for the

8
00:00:24,800 --> 00:00:29,359
introduction

9
00:00:26,160 --> 00:00:32,800
[Applause]

10
00:00:29,359 --> 00:00:35,440
all right good evening everyone so

11
00:00:32,800 --> 00:00:36,640
indeed i'm going to talk about gnu geeks

12
00:00:35,440 --> 00:00:39,760
and

13
00:00:36,640 --> 00:00:41,920
i'm in a containers track containers and

14
00:00:39,760 --> 00:00:44,000
security i think it's called so i'm a

15
00:00:41,920 --> 00:00:45,680
bit of an outlier because i'm going to

16
00:00:44,000 --> 00:00:47,680
talk about geeks which is

17
00:00:45,680 --> 00:00:49,760
in part about containers but you know

18
00:00:47,680 --> 00:00:50,960
it's mostly about deployment in general

19
00:00:49,760 --> 00:00:55,839
and it's a bit also about

20
00:00:50,960 --> 00:00:57,920
distros so yeah i'm an outlier

21
00:00:55,840 --> 00:00:59,199
so before i start talking about geeks

22
00:00:57,920 --> 00:01:01,199
itself

23
00:00:59,199 --> 00:01:02,800
let me just do a brief introduction to

24
00:01:01,199 --> 00:01:04,399
talk about these tools and the state of

25
00:01:02,800 --> 00:01:06,640
distributions

26
00:01:04,400 --> 00:01:08,720
so if you were already in this room

27
00:01:06,640 --> 00:01:09,760
early in the afternoon like at 2 pm i

28
00:01:08,720 --> 00:01:12,240
think

29
00:01:09,760 --> 00:01:13,040
there was a talk and the abstract of the

30
00:01:12,240 --> 00:01:15,759
talk had

31
00:01:13,040 --> 00:01:17,520
these lines which is you know the linux

32
00:01:15,759 --> 00:01:18,240
distribution as we know it is coming to

33
00:01:17,520 --> 00:01:20,640
an end

34
00:01:18,240 --> 00:01:22,880
and it's being replaced roughly by

35
00:01:20,640 --> 00:01:25,360
containers

36
00:01:22,880 --> 00:01:26,640
so i suppose that many people in the

37
00:01:25,360 --> 00:01:28,560
audience are

38
00:01:26,640 --> 00:01:31,360
pretty much into containers and using

39
00:01:28,560 --> 00:01:33,119
docker and this kind of tools so perhaps

40
00:01:31,360 --> 00:01:34,880
you can feel that there is some truth in

41
00:01:33,119 --> 00:01:36,960
that statement

42
00:01:34,880 --> 00:01:38,798
and i i do feel that there is some tools

43
00:01:36,960 --> 00:01:42,798
in that statement right

44
00:01:38,799 --> 00:01:46,159
we're all using containers more and more

45
00:01:42,799 --> 00:01:48,720
yet i would like to challenge that idea

46
00:01:46,159 --> 00:01:49,759
that you know this is the future this is

47
00:01:48,720 --> 00:01:52,720
the only way

48
00:01:49,759 --> 00:01:52,720
we can move forward

49
00:01:53,040 --> 00:01:56,960
actually last year at fosdem i was

50
00:01:54,960 --> 00:01:57,679
giving a talk in the distributions dev

51
00:01:56,960 --> 00:02:00,719
room

52
00:01:57,680 --> 00:02:03,040
and so i wanted to you know look at the

53
00:02:00,719 --> 00:02:04,320
history of distributions with respect to

54
00:02:03,040 --> 00:02:07,600
other tools

55
00:02:04,320 --> 00:02:08,000
and yeah like i said last year we were

56
00:02:07,600 --> 00:02:09,840
in a

57
00:02:08,000 --> 00:02:12,080
you know so the distribution state room

58
00:02:09,840 --> 00:02:14,720
was much smaller than this one

59
00:02:12,080 --> 00:02:15,680
and that was mostly distribution

60
00:02:14,720 --> 00:02:17,520
developers

61
00:02:15,680 --> 00:02:18,879
and i had the impression that it was

62
00:02:17,520 --> 00:02:20,959
actually the

63
00:02:18,879 --> 00:02:22,399
desperate distribution developers the

64
00:02:20,959 --> 00:02:24,879
room in a way

65
00:02:22,400 --> 00:02:26,800
because you know distributions are not

66
00:02:24,879 --> 00:02:29,200
so much in fashion these days

67
00:02:26,800 --> 00:02:30,720
that's my impression perhaps you will

68
00:02:29,200 --> 00:02:32,560
agree

69
00:02:30,720 --> 00:02:34,640
but back when i started with three

70
00:02:32,560 --> 00:02:36,239
software we had

71
00:02:34,640 --> 00:02:38,480
these distributions for example

72
00:02:36,239 --> 00:02:39,840
slackware debian and the red hat

73
00:02:38,480 --> 00:02:41,679
distribution

74
00:02:39,840 --> 00:02:43,200
and they were pretty much at the center

75
00:02:41,680 --> 00:02:44,879
of the stage

76
00:02:43,200 --> 00:02:47,280
for free software like they were the

77
00:02:44,879 --> 00:02:49,518
gateway to free software you had

78
00:02:47,280 --> 00:02:50,319
i mean that was really high technology

79
00:02:49,519 --> 00:02:52,239
in a way

80
00:02:50,319 --> 00:02:53,760
it allowed you to deploy software in a

81
00:02:52,239 --> 00:02:56,720
way that was pretty much

82
00:02:53,760 --> 00:02:58,319
new like uh proprietary software didn't

83
00:02:56,720 --> 00:03:00,560
have anything equivalent

84
00:02:58,319 --> 00:03:01,518
and you could quickly run app get

85
00:03:00,560 --> 00:03:03,360
installed blah

86
00:03:01,519 --> 00:03:04,879
and you get your application plus all

87
00:03:03,360 --> 00:03:06,239
its dependencies you don't have to

88
00:03:04,879 --> 00:03:09,200
compile it it's just

89
00:03:06,239 --> 00:03:10,159
you know high-tech right so there are i

90
00:03:09,200 --> 00:03:12,640
think there was

91
00:03:10,159 --> 00:03:13,519
a lot of activity around distributions

92
00:03:12,640 --> 00:03:15,279
and

93
00:03:13,519 --> 00:03:16,840
they're at the center of the stage right

94
00:03:15,280 --> 00:03:19,360
there was the golden age of

95
00:03:16,840 --> 00:03:23,760
distributions

96
00:03:19,360 --> 00:03:25,840
but then started becoming cloudy

97
00:03:23,760 --> 00:03:27,920
people started to realize there are some

98
00:03:25,840 --> 00:03:28,560
shortcomings in distributions as we know

99
00:03:27,920 --> 00:03:30,958
them

100
00:03:28,560 --> 00:03:32,400
so for example i happen to work with

101
00:03:30,959 --> 00:03:35,599
people uh

102
00:03:32,400 --> 00:03:37,920
who do high performance computing hpc so

103
00:03:35,599 --> 00:03:38,798
they're using clusters with lots of

104
00:03:37,920 --> 00:03:40,640
users

105
00:03:38,799 --> 00:03:42,959
and obviously you're not going to run

106
00:03:40,640 --> 00:03:45,760
sudo apt-get installed on the cluster

107
00:03:42,959 --> 00:03:47,920
right i mean some people do but not

108
00:03:45,760 --> 00:03:50,239
every user it's on this is that means

109
00:03:47,920 --> 00:03:52,079
so you need to find a way to allow

110
00:03:50,239 --> 00:03:52,959
scientists to deploy their software

111
00:03:52,080 --> 00:03:55,840
stack

112
00:03:52,959 --> 00:03:57,439
and for that well you can just let them

113
00:03:55,840 --> 00:03:59,439
compile everything by hand

114
00:03:57,439 --> 00:04:01,439
or they you can use one of the tools

115
00:03:59,439 --> 00:04:03,439
that have been developed at the time so

116
00:04:01,439 --> 00:04:04,959
for example one of the most common one

117
00:04:03,439 --> 00:04:06,159
is called modules

118
00:04:04,959 --> 00:04:08,000
i don't know if you've heard about that

119
00:04:06,159 --> 00:04:11,280
one it's

120
00:04:08,000 --> 00:04:13,680
extremely common on hpc clusters

121
00:04:11,280 --> 00:04:15,519
it basically allows you to define your

122
00:04:13,680 --> 00:04:18,560
programming environment so you can say

123
00:04:15,519 --> 00:04:19,440
model load up an mpi module or gcc blah

124
00:04:18,560 --> 00:04:21,519
blah blah

125
00:04:19,440 --> 00:04:23,520
and every user can define their

126
00:04:21,519 --> 00:04:25,680
environment independently of other users

127
00:04:23,520 --> 00:04:28,080
so you get a lot of flexibility

128
00:04:25,680 --> 00:04:29,120
but of course the downside is that hpcc

129
00:04:28,080 --> 00:04:30,880
admins end up

130
00:04:29,120 --> 00:04:32,800
creating a distribution on their own

131
00:04:30,880 --> 00:04:35,199
just for their own cluster

132
00:04:32,800 --> 00:04:35,919
and so there's a lot of duplicated work

133
00:04:35,199 --> 00:04:38,720
it's not

134
00:04:35,919 --> 00:04:39,758
you know it's not exactly efficient i

135
00:04:38,720 --> 00:04:41,600
would say

136
00:04:39,759 --> 00:04:43,520
but yeah modules is pretty much like

137
00:04:41,600 --> 00:04:46,320
virtual lens so you've probably heard

138
00:04:43,520 --> 00:04:48,240
about virtual lens for python modules is

139
00:04:46,320 --> 00:04:50,240
somehow more generic but it doesn't take

140
00:04:48,240 --> 00:04:52,160
care of actually building the software

141
00:04:50,240 --> 00:04:54,479
so you still need to do it by hand

142
00:04:52,160 --> 00:04:55,440
and then there are tools like spike or

143
00:04:54,479 --> 00:04:57,680
easy build

144
00:04:55,440 --> 00:04:59,680
that actually take care of automating

145
00:04:57,680 --> 00:05:01,120
builds like reading configure make make

146
00:04:59,680 --> 00:05:01,759
install for each of your packages

147
00:05:01,120 --> 00:05:04,639
roughly

148
00:05:01,759 --> 00:05:06,400
these are package managers layered on

149
00:05:04,639 --> 00:05:08,479
top of the distribution that's running

150
00:05:06,400 --> 00:05:10,159
in the system

151
00:05:08,479 --> 00:05:12,000
so in a way we're already layering

152
00:05:10,160 --> 00:05:13,520
additional package managers on top of

153
00:05:12,000 --> 00:05:16,320
the distribution just because the

154
00:05:13,520 --> 00:05:20,080
distribution has limitations right

155
00:05:16,320 --> 00:05:22,400
that doesn't feel so great and then

156
00:05:20,080 --> 00:05:24,639
you have deployment tools like ansible

157
00:05:22,400 --> 00:05:27,520
puppet proper chef

158
00:05:24,639 --> 00:05:28,960
all these tools so these are not package

159
00:05:27,520 --> 00:05:32,000
managers right so it's

160
00:05:28,960 --> 00:05:34,320
kind of a different category

161
00:05:32,000 --> 00:05:35,680
but still i think you know deploying

162
00:05:34,320 --> 00:05:38,880
software in general

163
00:05:35,680 --> 00:05:41,199
is kind of the distribution's job right

164
00:05:38,880 --> 00:05:43,199
typically when you deploy systems using

165
00:05:41,199 --> 00:05:45,759
ncball you fiddle with the configuration

166
00:05:43,199 --> 00:05:47,680
of the system you install packages and

167
00:05:45,759 --> 00:05:49,280
things like that it's it's sort of the

168
00:05:47,680 --> 00:05:51,680
distributions job

169
00:05:49,280 --> 00:05:54,320
just applied to a bunch of machine

170
00:05:51,680 --> 00:05:56,800
instead of just a single machine roughly

171
00:05:54,320 --> 00:05:58,159
so it tells something that we have to

172
00:05:56,800 --> 00:05:59,680
yet add another

173
00:05:58,160 --> 00:06:01,680
layer of tools on top of the

174
00:05:59,680 --> 00:06:05,120
distribution just to

175
00:06:01,680 --> 00:06:05,120
you know address that use case

176
00:06:05,360 --> 00:06:12,080
uh well it can still get worse

177
00:06:09,039 --> 00:06:14,080
i'm sure you're familiar with all the

178
00:06:12,080 --> 00:06:15,280
you know language specific package

179
00:06:14,080 --> 00:06:18,318
managers

180
00:06:15,280 --> 00:06:20,400
they are wonderful tools for you know

181
00:06:18,319 --> 00:06:22,240
people who develop programming languages

182
00:06:20,400 --> 00:06:24,638
you know it's it's a very easy way to

183
00:06:22,240 --> 00:06:26,319
allow your users to get started and use

184
00:06:24,639 --> 00:06:29,440
libraries in your language

185
00:06:26,319 --> 00:06:31,520
that's great from that point of view but

186
00:06:29,440 --> 00:06:33,919
you know it adds another layer of

187
00:06:31,520 --> 00:06:34,960
software deployment on top of all these

188
00:06:33,919 --> 00:06:38,719
tools

189
00:06:34,960 --> 00:06:41,919
and it becomes a little bit messy when

190
00:06:38,720 --> 00:06:42,720
i mean in practice many people end up

191
00:06:41,919 --> 00:06:45,280
using

192
00:06:42,720 --> 00:06:46,960
you know like five of these tools maybe

193
00:06:45,280 --> 00:06:49,520
on a daily basis because they want to

194
00:06:46,960 --> 00:06:52,159
deploy titan code maybe

195
00:06:49,520 --> 00:06:53,039
you know rust code maybe haskell code

196
00:06:52,160 --> 00:06:54,880
and so

197
00:06:53,039 --> 00:06:56,240
you have lots of different tools

198
00:06:54,880 --> 00:06:57,440
depending on the kind of code that

199
00:06:56,240 --> 00:07:02,160
you're deploying

200
00:06:57,440 --> 00:07:06,080
it doesn't feel great and lastly

201
00:07:02,160 --> 00:07:09,599
well that's the thunder uh

202
00:07:06,080 --> 00:07:12,719
containers right so it's become

203
00:07:09,599 --> 00:07:15,440
so complex to manage all these software

204
00:07:12,720 --> 00:07:17,599
stack that you need to have a way to

205
00:07:15,440 --> 00:07:19,280
to say all right i'm just giving up i

206
00:07:17,599 --> 00:07:20,960
managed to get something that works

207
00:07:19,280 --> 00:07:23,119
right i managed to get to a state

208
00:07:20,960 --> 00:07:24,960
that's actually usable i have all my

209
00:07:23,120 --> 00:07:26,960
software installed for my application

210
00:07:24,960 --> 00:07:29,198
this is perfect i don't want to touch it

211
00:07:26,960 --> 00:07:30,239
anymore so i'm just going to freeze it

212
00:07:29,199 --> 00:07:32,800
in an image

213
00:07:30,240 --> 00:07:34,160
a darker image for example and then i

214
00:07:32,800 --> 00:07:36,960
can carry the bits

215
00:07:34,160 --> 00:07:38,720
of my system to another machine for

216
00:07:36,960 --> 00:07:39,919
example and i can run my application

217
00:07:38,720 --> 00:07:43,039
again without

218
00:07:39,919 --> 00:07:46,639
having to feed all with pip cargo

219
00:07:43,039 --> 00:07:46,639
ad get blah blah blah

220
00:07:47,039 --> 00:07:50,560
it does solve problems practical

221
00:07:48,960 --> 00:07:52,799
problems for people

222
00:07:50,560 --> 00:07:53,599
but still it doesn't feel right to me

223
00:07:52,800 --> 00:07:55,440
right we

224
00:07:53,599 --> 00:07:58,400
we're sort of giving up on deployment

225
00:07:55,440 --> 00:08:00,800
right it's too complex let's just freeze

226
00:07:58,400 --> 00:08:02,560
we get an image and then we reuse it and

227
00:08:00,800 --> 00:08:05,440
we don't bother anymore

228
00:08:02,560 --> 00:08:05,440
it doesn't feel right

229
00:08:06,319 --> 00:08:12,479
so my question last year in that

230
00:08:09,919 --> 00:08:14,240
distributions dave room was are this was

231
00:08:12,479 --> 00:08:18,719
doomed

232
00:08:14,240 --> 00:08:22,160
well maybe maybe not

233
00:08:18,720 --> 00:08:25,360
the good news for distributions is

234
00:08:22,160 --> 00:08:28,080
you know well we had people saying

235
00:08:25,360 --> 00:08:28,560
debian and other distributions are going

236
00:08:28,080 --> 00:08:30,318
to be

237
00:08:28,560 --> 00:08:31,599
that thing you run docker on a little

238
00:08:30,319 --> 00:08:34,800
more you know it's

239
00:08:31,599 --> 00:08:37,279
the end but the good news is

240
00:08:34,799 --> 00:08:38,559
it's also that thing you run inside

241
00:08:37,279 --> 00:08:40,320
docker

242
00:08:38,559 --> 00:08:43,039
because that's how you deploy software

243
00:08:40,320 --> 00:08:45,440
right so

244
00:08:43,039 --> 00:08:46,319
that's that's the on cloud docker file

245
00:08:45,440 --> 00:08:48,320
for example

246
00:08:46,320 --> 00:08:49,760
how they deploy their dependencies well

247
00:08:48,320 --> 00:08:53,440
first they start by running

248
00:08:49,760 --> 00:08:54,399
upgate and that's it so that tells

249
00:08:53,440 --> 00:08:57,519
something

250
00:08:54,399 --> 00:08:58,560
and to me it means that perhaps we

251
00:08:57,519 --> 00:09:02,240
should

252
00:08:58,560 --> 00:09:04,319
pay attention uh yeah going back to that

253
00:09:02,240 --> 00:09:08,000
docker file

254
00:09:04,320 --> 00:09:10,880
is great it does the job but

255
00:09:08,000 --> 00:09:12,560
it lacks transparency so if we look at

256
00:09:10,880 --> 00:09:14,320
the first line

257
00:09:12,560 --> 00:09:16,160
the first line of the dockerfile says

258
00:09:14,320 --> 00:09:19,519
okay i'm going to start with that big

259
00:09:16,160 --> 00:09:20,800
blob that contains uh you know a whole

260
00:09:19,519 --> 00:09:22,560
distribution

261
00:09:20,800 --> 00:09:24,319
and from there i'm going to run a bunch

262
00:09:22,560 --> 00:09:25,599
of commands to modify the state of my

263
00:09:24,320 --> 00:09:28,560
container image

264
00:09:25,600 --> 00:09:30,000
to install additional software and so on

265
00:09:28,560 --> 00:09:33,040
and so forth

266
00:09:30,000 --> 00:09:36,720
and so the end result of that is that

267
00:09:33,040 --> 00:09:39,120
containers are like smoothies so that's

268
00:09:36,720 --> 00:09:41,920
a phrase i borrowed from ricardo vermes

269
00:09:39,120 --> 00:09:44,240
another gig hacker

270
00:09:41,920 --> 00:09:45,199
it a container is like a smoothie in the

271
00:09:44,240 --> 00:09:47,600
sense that

272
00:09:45,200 --> 00:09:49,360
you can taste it right you can say

273
00:09:47,600 --> 00:09:52,000
whether you like it or not

274
00:09:49,360 --> 00:09:53,920
whether it's to your taste but it's

275
00:09:52,000 --> 00:09:54,959
really hard to say what's inside that

276
00:09:53,920 --> 00:09:58,640
smoothie

277
00:09:54,959 --> 00:10:01,920
right it's like yeah it's red but

278
00:09:58,640 --> 00:10:05,360
what's in there i don't really know

279
00:10:01,920 --> 00:10:07,120
and it lacks transparency

280
00:10:05,360 --> 00:10:08,640
and usually when we say that people come

281
00:10:07,120 --> 00:10:10,480
to us and say well look come on you're

282
00:10:08,640 --> 00:10:11,839
exaggerating we have a docker file so

283
00:10:10,480 --> 00:10:14,800
it's entirely transparent

284
00:10:11,839 --> 00:10:17,040
we know what's inside well do we i mean

285
00:10:14,800 --> 00:10:19,519
if we go back to that dockerfile

286
00:10:17,040 --> 00:10:21,760
can someone really tell me what software

287
00:10:19,519 --> 00:10:25,279
packages are in there

288
00:10:21,760 --> 00:10:27,040
i'm not sure you know we're just

289
00:10:25,279 --> 00:10:29,200
if we're in that docker file we're gonna

290
00:10:27,040 --> 00:10:29,519
get different results every time we run

291
00:10:29,200 --> 00:10:31,440
it

292
00:10:29,519 --> 00:10:33,680
because the first command that we run in

293
00:10:31,440 --> 00:10:34,959
there is apt-get update right so if i

294
00:10:33,680 --> 00:10:37,199
run it today

295
00:10:34,959 --> 00:10:39,040
i'm gonna get you know specific versions

296
00:10:37,200 --> 00:10:41,040
of the packages but if i run it

297
00:10:39,040 --> 00:10:42,079
in two months i'm gonna get different

298
00:10:41,040 --> 00:10:45,360
versions

299
00:10:42,079 --> 00:10:47,120
so that's not great plus if you look at

300
00:10:45,360 --> 00:10:49,200
that from line up there

301
00:10:47,120 --> 00:10:51,440
it doesn't tell us what's in there so

302
00:10:49,200 --> 00:10:52,560
the the abstraction level is the wrong

303
00:10:51,440 --> 00:10:54,720
one we'd like to

304
00:10:52,560 --> 00:10:55,920
think in terms of packages that are

305
00:10:54,720 --> 00:10:59,200
available

306
00:10:55,920 --> 00:11:02,160
and what we have instead is something

307
00:10:59,200 --> 00:11:02,160
pretty opaque

308
00:11:03,920 --> 00:11:09,279
so i believe we should not throw out the

309
00:11:06,640 --> 00:11:11,519
baby with the bath water

310
00:11:09,279 --> 00:11:12,880
oh i took this picture from wikipedia

311
00:11:11,519 --> 00:11:13,519
and i learned that it's actually a

312
00:11:12,880 --> 00:11:16,880
german

313
00:11:13,519 --> 00:11:18,079
saying from the 16th century yeah

314
00:11:16,880 --> 00:11:20,480
keep learning things while

315
00:11:18,079 --> 00:11:23,279
procrastinating anyway

316
00:11:20,480 --> 00:11:25,279
so probably there are still valuable

317
00:11:23,279 --> 00:11:26,720
things we can learn from distributions

318
00:11:25,279 --> 00:11:30,320
and maybe we should

319
00:11:26,720 --> 00:11:32,880
try to design systems not by

320
00:11:30,320 --> 00:11:34,399
piling tools and patches upon patches

321
00:11:32,880 --> 00:11:36,399
but instead by

322
00:11:34,399 --> 00:11:37,600
addressing the weaknesses that make

323
00:11:36,399 --> 00:11:41,440
those patches

324
00:11:37,600 --> 00:11:42,880
appear necessary i'm paraphrasing a

325
00:11:41,440 --> 00:11:44,720
sentence that some of you

326
00:11:42,880 --> 00:11:48,800
have probably heard before it's not from

327
00:11:44,720 --> 00:11:48,800
me we'll get to that later

328
00:11:49,040 --> 00:11:54,719
so that brings me to gigs

329
00:11:52,480 --> 00:11:58,240
how many people here have heard are

330
00:11:54,720 --> 00:11:58,240
familiar with the geeks i should say

331
00:11:58,560 --> 00:12:02,479
well that's like half of the audience i

332
00:12:00,240 --> 00:12:04,079
would say all right so you're

333
00:12:02,480 --> 00:12:06,240
if you're familiar with geeks i guess

334
00:12:04,079 --> 00:12:08,638
you're allowed to take a five minute nap

335
00:12:06,240 --> 00:12:09,440
because i'm going to introduce it that's

336
00:12:08,639 --> 00:12:12,800
fine

337
00:12:09,440 --> 00:12:15,839
and don't forget to wake up afterwards

338
00:12:12,800 --> 00:12:18,880
we'll get there so geeks

339
00:12:15,839 --> 00:12:20,320
what is geek's about so we tend to view

340
00:12:18,880 --> 00:12:23,279
it as a distribution

341
00:12:20,320 --> 00:12:24,000
or as a package manager but it's really

342
00:12:23,279 --> 00:12:26,160
more than that

343
00:12:24,000 --> 00:12:27,360
it's it's more like you could say it's a

344
00:12:26,160 --> 00:12:30,240
toolbox

345
00:12:27,360 --> 00:12:31,680
for software deployment in general and

346
00:12:30,240 --> 00:12:34,000
that includes

347
00:12:31,680 --> 00:12:35,760
package management in the traditional

348
00:12:34,000 --> 00:12:39,040
meaning of the world

349
00:12:35,760 --> 00:12:42,079
but also environment management

350
00:12:39,040 --> 00:12:43,279
container provisioning and operating

351
00:12:42,079 --> 00:12:48,000
system management so

352
00:12:43,279 --> 00:12:48,000
complete operating systems so i give

353
00:12:48,480 --> 00:12:52,000
i give you a feel of what it is to use

354
00:12:51,120 --> 00:12:55,440
geeks to get started

355
00:12:52,000 --> 00:12:57,040
with gigs of what it's like i start with

356
00:12:55,440 --> 00:13:01,200
a quick demo just to

357
00:12:57,040 --> 00:13:03,439
give your feel right all right so

358
00:13:01,200 --> 00:13:05,040
i guess the first the the way you would

359
00:13:03,440 --> 00:13:08,000
get started with geeks

360
00:13:05,040 --> 00:13:10,079
is by using you know the traditional

361
00:13:08,000 --> 00:13:13,839
geeks install commands so you would say

362
00:13:10,079 --> 00:13:17,279
geeks install calce

363
00:13:13,839 --> 00:13:19,760
python for example and it does

364
00:13:17,279 --> 00:13:20,959
what you would expect right it installs

365
00:13:19,760 --> 00:13:24,000
packages

366
00:13:20,959 --> 00:13:24,959
all right so from there i can say echo

367
00:13:24,000 --> 00:13:28,320
high pipe

368
00:13:24,959 --> 00:13:29,279
kerose so it seems you have to use

369
00:13:28,320 --> 00:13:30,959
kerosene in

370
00:13:29,279 --> 00:13:32,480
in demos so i thought i would do the

371
00:13:30,959 --> 00:13:34,479
same as everyone else

372
00:13:32,480 --> 00:13:36,399
that's why i have girls there and all

373
00:13:34,480 --> 00:13:39,920
right now i have kelsey

374
00:13:36,399 --> 00:13:42,320
if if we look up there at this message

375
00:13:39,920 --> 00:13:44,399
uh it's telling me something about

376
00:13:42,320 --> 00:13:46,560
environment variables right

377
00:13:44,399 --> 00:13:48,000
and typically when you install software

378
00:13:46,560 --> 00:13:49,920
very often you have to

379
00:13:48,000 --> 00:13:51,839
you know set environment variables so

380
00:13:49,920 --> 00:13:53,760
that it works just fine

381
00:13:51,839 --> 00:13:55,279
and that's typically the kind of thing i

382
00:13:53,760 --> 00:13:57,279
tend to forget so here

383
00:13:55,279 --> 00:13:58,880
geeks takes care of telling you well

384
00:13:57,279 --> 00:14:00,800
there is a file that will set those

385
00:13:58,880 --> 00:14:01,600
environment variables for you so you can

386
00:14:00,800 --> 00:14:04,240
just

387
00:14:01,600 --> 00:14:06,560
source that file which is what i'm going

388
00:14:04,240 --> 00:14:09,120
to do here

389
00:14:06,560 --> 00:14:11,518
and that file if we if we look at that

390
00:14:09,120 --> 00:14:11,519
file

391
00:14:11,760 --> 00:14:14,639
that lives here

392
00:14:15,680 --> 00:14:20,719
well it's telling me in particular about

393
00:14:17,760 --> 00:14:23,120
python path because i installed python

394
00:14:20,720 --> 00:14:25,120
so if i want to be able to use python

395
00:14:23,120 --> 00:14:26,240
then i better set python path correctly

396
00:14:25,120 --> 00:14:30,000
so that it can find

397
00:14:26,240 --> 00:14:32,800
its libraries right

398
00:14:30,000 --> 00:14:34,720
so i've installed uh car say python

399
00:14:32,800 --> 00:14:37,680
let's say i can install

400
00:14:34,720 --> 00:14:38,800
a guide a programming language all right

401
00:14:37,680 --> 00:14:42,560
so at this point i have

402
00:14:38,800 --> 00:14:45,760
python three i have guide i have calce

403
00:14:42,560 --> 00:14:47,920
it's all working fine but let's

404
00:14:45,760 --> 00:14:49,920
let's say after a while i realized that

405
00:14:47,920 --> 00:14:52,240
guy is such a great programming language

406
00:14:49,920 --> 00:14:55,839
i no longer need python

407
00:14:52,240 --> 00:14:59,519
that can happen so i can simply

408
00:14:55,839 --> 00:15:01,120
remove python the usual thing

409
00:14:59,519 --> 00:15:03,680
it looks boring at this point but you'll

410
00:15:01,120 --> 00:15:04,480
see we're getting to the interesting

411
00:15:03,680 --> 00:15:06,319
bits

412
00:15:04,480 --> 00:15:08,320
all right so i've done a bunch of

413
00:15:06,320 --> 00:15:09,680
operations on my system i've installed

414
00:15:08,320 --> 00:15:12,480
software

415
00:15:09,680 --> 00:15:12,959
you know several times remove software

416
00:15:12,480 --> 00:15:14,480
and

417
00:15:12,959 --> 00:15:16,560
this is where we get to the interesting

418
00:15:14,480 --> 00:15:18,720
bits which is that

419
00:15:16,560 --> 00:15:21,040
this was all transactional actually and

420
00:15:18,720 --> 00:15:22,639
the the history of my profile which

421
00:15:21,040 --> 00:15:23,519
means the set of packages that i

422
00:15:22,639 --> 00:15:27,519
installed

423
00:15:23,519 --> 00:15:30,959
was entirely recorded so i can just say

424
00:15:27,519 --> 00:15:31,680
can you list generations of my profile

425
00:15:30,959 --> 00:15:32,959
so

426
00:15:31,680 --> 00:15:35,680
basically every time i made a

427
00:15:32,959 --> 00:15:38,000
transaction i created a new generation

428
00:15:35,680 --> 00:15:38,719
that's the way we call it and here we

429
00:15:38,000 --> 00:15:42,320
see those

430
00:15:38,720 --> 00:15:43,199
three generation so generation one is

431
00:15:42,320 --> 00:15:46,399
when i type

432
00:15:43,199 --> 00:15:46,959
kicks install car say python right so we

433
00:15:46,399 --> 00:15:49,759
see

434
00:15:46,959 --> 00:15:51,839
these two packages up there generation

435
00:15:49,759 --> 00:15:55,040
two is when i type geeks install

436
00:15:51,839 --> 00:15:56,399
guide so that added guide to my set of

437
00:15:55,040 --> 00:15:58,639
install packages

438
00:15:56,399 --> 00:16:00,560
which is why we see a plus there it's

439
00:15:58,639 --> 00:16:03,040
like a diff

440
00:16:00,560 --> 00:16:03,839
and generation three is when i removed

441
00:16:03,040 --> 00:16:06,079
python

442
00:16:03,839 --> 00:16:06,959
from my profile and this is why we see a

443
00:16:06,079 --> 00:16:10,160
minus there

444
00:16:06,959 --> 00:16:12,239
it's again like a diff

445
00:16:10,160 --> 00:16:13,519
the cool thing here is that you can

446
00:16:12,240 --> 00:16:18,079
actually roll back

447
00:16:13,519 --> 00:16:20,240
right so if i have second thoughts and

448
00:16:18,079 --> 00:16:22,638
well i still need python after all then

449
00:16:20,240 --> 00:16:25,759
i can say

450
00:16:22,639 --> 00:16:27,040
let's roll back okay i'm going back to

451
00:16:25,759 --> 00:16:29,759
generation two

452
00:16:27,040 --> 00:16:31,279
and at that point if i run geeks list

453
00:16:29,759 --> 00:16:33,360
generations again

454
00:16:31,279 --> 00:16:34,560
then i see that i'm back to generation

455
00:16:33,360 --> 00:16:38,399
two

456
00:16:34,560 --> 00:16:41,439
that make sense yeah so to me this is

457
00:16:38,399 --> 00:16:42,800
this is in itself a good enough reason

458
00:16:41,440 --> 00:16:45,120
to use geeks because

459
00:16:42,800 --> 00:16:47,199
as a user it gives peace of mind like

460
00:16:45,120 --> 00:16:47,839
you know you cannot break your system

461
00:16:47,199 --> 00:16:49,680
because

462
00:16:47,839 --> 00:16:51,279
if you run an upgrade just before your

463
00:16:49,680 --> 00:16:53,599
talk and something breaks

464
00:16:51,279 --> 00:16:56,320
that's fine you can just fall back right

465
00:16:53,600 --> 00:16:59,440
so that's cool

466
00:16:56,320 --> 00:17:02,880
all right so so far from so much for

467
00:16:59,440 --> 00:17:05,039
package management the other cool thing

468
00:17:02,880 --> 00:17:07,039
is that so here i've been using a

469
00:17:05,039 --> 00:17:09,439
sequence of geeks install gex remove

470
00:17:07,039 --> 00:17:12,720
commands bucket but i can just as well

471
00:17:09,439 --> 00:17:15,199
use directly a file where i declare

472
00:17:12,720 --> 00:17:18,480
the packages that i want to have in my

473
00:17:15,199 --> 00:17:22,559
profile my set of install packages

474
00:17:18,480 --> 00:17:25,679
so let's say i want gcc emac scale

475
00:17:22,559 --> 00:17:28,280
and gazer then i can just create a file

476
00:17:25,679 --> 00:17:30,160
that contains that and pass it to

477
00:17:28,280 --> 00:17:34,720
geekspackage.manifest

478
00:17:30,160 --> 00:17:39,200
and yeah so i have an example here

479
00:17:34,720 --> 00:17:43,600
my profile yeah

480
00:17:39,200 --> 00:17:43,600
so i pass that file to gigs package

481
00:17:44,960 --> 00:17:49,039
and then what happens is that those

482
00:17:47,280 --> 00:17:49,440
three packages maybe we're not gonna

483
00:17:49,039 --> 00:17:52,080
wait

484
00:17:49,440 --> 00:17:53,520
because wi-fi is not so fast but those

485
00:17:52,080 --> 00:17:54,320
three packages are going to be

486
00:17:53,520 --> 00:17:56,879
downloaded

487
00:17:54,320 --> 00:17:58,720
if they are not available yet and then

488
00:17:56,880 --> 00:18:00,000
eventually i will end up with a profile

489
00:17:58,720 --> 00:18:03,200
that contains precisely

490
00:18:00,000 --> 00:18:05,440
those three packages this is it right

491
00:18:03,200 --> 00:18:08,400
so no need to type a sequence of install

492
00:18:05,440 --> 00:18:10,240
remove upgrade commands

493
00:18:08,400 --> 00:18:12,160
that's pretty cool because it means that

494
00:18:10,240 --> 00:18:13,600
you can have that file under version

495
00:18:12,160 --> 00:18:15,520
control for example

496
00:18:13,600 --> 00:18:17,199
you can share it with other people with

497
00:18:15,520 --> 00:18:19,840
colleagues or whatever

498
00:18:17,200 --> 00:18:21,679
or if you're developers then you can you

499
00:18:19,840 --> 00:18:23,039
know have it as part of your project

500
00:18:21,679 --> 00:18:25,440
repository

501
00:18:23,039 --> 00:18:29,840
it makes it makes it very easy to deploy

502
00:18:25,440 --> 00:18:33,120
a set of packages

503
00:18:29,840 --> 00:18:35,360
but if if you look at that manifest here

504
00:18:33,120 --> 00:18:38,879
i'm i'm just saying gcc toolchain for

505
00:18:35,360 --> 00:18:41,520
example i'm not specifying any version

506
00:18:38,880 --> 00:18:43,280
so if i really want to enable someone

507
00:18:41,520 --> 00:18:44,799
else to reproduce the same environment

508
00:18:43,280 --> 00:18:47,600
as i have here

509
00:18:44,799 --> 00:18:49,120
then i need an extra bit of information

510
00:18:47,600 --> 00:18:52,159
because for example

511
00:18:49,120 --> 00:18:55,678
gcc today is perhaps version nine

512
00:18:52,160 --> 00:18:58,400
but in three months it might be version

513
00:18:55,679 --> 00:18:59,919
and so if i run if i use that file in in

514
00:18:58,400 --> 00:19:01,679
three months then i'm not gonna get the

515
00:18:59,919 --> 00:19:05,679
same environment as right now

516
00:19:01,679 --> 00:19:09,280
i'm gonna get a newer version of gcc

517
00:19:05,679 --> 00:19:11,280
so how do we address that well

518
00:19:09,280 --> 00:19:12,960
that extra bit of information that we

519
00:19:11,280 --> 00:19:14,879
need to know exactly

520
00:19:12,960 --> 00:19:17,280
what how to reproduce the same

521
00:19:14,880 --> 00:19:19,039
environment is given by a command that's

522
00:19:17,280 --> 00:19:21,520
called gigsdescribe

523
00:19:19,039 --> 00:19:23,200
and so you've probably seen git

524
00:19:21,520 --> 00:19:26,639
described before

525
00:19:23,200 --> 00:19:27,440
and gex describe is very similar it just

526
00:19:26,640 --> 00:19:29,200
tells you

527
00:19:27,440 --> 00:19:30,960
which revision of geeks you're currently

528
00:19:29,200 --> 00:19:34,000
using

529
00:19:30,960 --> 00:19:35,120
so i have a commit id here and with that

530
00:19:34,000 --> 00:19:37,440
information i have

531
00:19:35,120 --> 00:19:38,719
bob bob on his laptop running

532
00:19:37,440 --> 00:19:41,280
gigsdescribe

533
00:19:38,720 --> 00:19:43,280
that gives us a commit id and then i can

534
00:19:41,280 --> 00:19:45,360
have alice on a completely different

535
00:19:43,280 --> 00:19:46,480
machine maybe at a different point in

536
00:19:45,360 --> 00:19:50,639
time and

537
00:19:46,480 --> 00:19:53,919
alice can just say geekspool.comit

538
00:19:50,640 --> 00:19:56,480
and then kicks package manifest

539
00:19:53,919 --> 00:19:58,640
and then alice will get exactly the same

540
00:19:56,480 --> 00:20:01,600
environment as bob

541
00:19:58,640 --> 00:20:04,080
same versions same packages everything

542
00:20:01,600 --> 00:20:04,080
is the same

543
00:20:04,559 --> 00:20:08,559
that's big deal in some cases i mean

544
00:20:07,039 --> 00:20:10,240
anytime you want to have

545
00:20:08,559 --> 00:20:12,240
precise reproducibility and in

546
00:20:10,240 --> 00:20:14,080
particular in reproducible science for

547
00:20:12,240 --> 00:20:16,799
example people are very keen on that

548
00:20:14,080 --> 00:20:18,960
kind of feature

549
00:20:16,799 --> 00:20:20,000
and so the the summary that you can

550
00:20:18,960 --> 00:20:24,640
travel in space

551
00:20:20,000 --> 00:20:26,720
and time with geeks it is pretty cool

552
00:20:24,640 --> 00:20:29,919
it's actually it's so cool that someone

553
00:20:26,720 --> 00:20:33,039
ended up adding a time machine command

554
00:20:29,919 --> 00:20:35,200
so we're very much into that spirit so

555
00:20:33,039 --> 00:20:36,559
time machine does pretty much like pool

556
00:20:35,200 --> 00:20:39,039
followed by

557
00:20:36,559 --> 00:20:39,600
install in that case so if i say time

558
00:20:39,039 --> 00:20:42,080
machine

559
00:20:39,600 --> 00:20:44,320
dot commit install hello then i'm

560
00:20:42,080 --> 00:20:45,280
installing the hello package from geeks

561
00:20:44,320 --> 00:20:50,320
at that commit

562
00:20:45,280 --> 00:20:50,320
right makes sense okay

563
00:20:51,280 --> 00:20:55,678
so another way to use geeks is to set up

564
00:20:53,679 --> 00:20:58,480
development environments or

565
00:20:55,679 --> 00:20:59,360
one-off environments in general so for

566
00:20:58,480 --> 00:21:02,080
example

567
00:20:59,360 --> 00:21:04,000
if i want to use python well i can type

568
00:21:02,080 --> 00:21:05,600
geeks install python blah

569
00:21:04,000 --> 00:21:07,200
but i can also use that kicks

570
00:21:05,600 --> 00:21:09,039
environment command

571
00:21:07,200 --> 00:21:11,120
and what it's going to do in this case

572
00:21:09,039 --> 00:21:13,360
is to set up a one-off environment that

573
00:21:11,120 --> 00:21:14,000
contains precisely those packages that i

574
00:21:13,360 --> 00:21:17,840
asked for

575
00:21:14,000 --> 00:21:17,840
python empire sci-fi

576
00:21:18,080 --> 00:21:24,320
oh so this is what it looks like

577
00:21:21,200 --> 00:21:30,720
so the dash dash ad hoc option

578
00:21:24,320 --> 00:21:33,360
says i want precisely those packages

579
00:21:30,720 --> 00:21:36,799
and i'm going to run the python3 command

580
00:21:33,360 --> 00:21:40,320
directly in that environment

581
00:21:36,799 --> 00:21:43,360
and so from there if i do import

582
00:21:40,320 --> 00:21:46,399
and buy it works right

583
00:21:43,360 --> 00:21:48,000
so i have a shell where python's

584
00:21:46,400 --> 00:21:51,039
available

585
00:21:48,000 --> 00:21:52,480
numpy is available and python path is

586
00:21:51,039 --> 00:21:55,600
set correctly

587
00:21:52,480 --> 00:21:56,240
so that python can find python confined

588
00:21:55,600 --> 00:21:59,840
numpy

589
00:21:56,240 --> 00:22:01,679
all right and on top of that you can

590
00:21:59,840 --> 00:22:06,320
actually say

591
00:22:01,679 --> 00:22:06,320
for example let's say i want car utils

592
00:22:06,400 --> 00:22:11,679
i can add the dash dash container option

593
00:22:09,760 --> 00:22:12,879
and what the dash dash container option

594
00:22:11,679 --> 00:22:15,679
is does

595
00:22:12,880 --> 00:22:16,640
is the same as gig's environment but in

596
00:22:15,679 --> 00:22:19,679
addition to that

597
00:22:16,640 --> 00:22:21,840
it creates a container so using the

598
00:22:19,679 --> 00:22:23,120
linux unprivileged username space

599
00:22:21,840 --> 00:22:25,520
feature

600
00:22:23,120 --> 00:22:26,239
a container that contains only the

601
00:22:25,520 --> 00:22:29,280
packages i

602
00:22:26,240 --> 00:22:30,080
asked for plus the current directory so

603
00:22:29,280 --> 00:22:33,918
for example

604
00:22:30,080 --> 00:22:37,280
if i do ls slash home in there

605
00:22:33,919 --> 00:22:40,240
there's not much in that directory

606
00:22:37,280 --> 00:22:40,799
and my my home is actually empty because

607
00:22:40,240 --> 00:22:43,440
it's not

608
00:22:40,799 --> 00:22:44,320
mapped from the outside of the container

609
00:22:43,440 --> 00:22:46,720
right

610
00:22:44,320 --> 00:22:48,080
so it's a very good way to you know to

611
00:22:46,720 --> 00:22:49,919
get a

612
00:22:48,080 --> 00:22:55,840
very isolated environment where you can

613
00:22:49,919 --> 00:22:55,840
do your development and all that

614
00:22:56,559 --> 00:22:58,960
all right

615
00:22:59,679 --> 00:23:04,720
so i said i would talk a bit about

616
00:23:02,720 --> 00:23:06,799
containers right

617
00:23:04,720 --> 00:23:09,600
it turns out that sometimes you have to

618
00:23:06,799 --> 00:23:11,760
deal with machines that do not run geeks

619
00:23:09,600 --> 00:23:14,080
right so how do you go from

620
00:23:11,760 --> 00:23:15,120
a machine that runs geeks where you have

621
00:23:14,080 --> 00:23:18,158
all your favorite

622
00:23:15,120 --> 00:23:20,479
software packages to a machine that

623
00:23:18,159 --> 00:23:21,840
unfortunately does not yet run geeks but

624
00:23:20,480 --> 00:23:23,520
still you want to be able to run your

625
00:23:21,840 --> 00:23:25,199
packages there

626
00:23:23,520 --> 00:23:27,918
so how do you do that well we need some

627
00:23:25,200 --> 00:23:30,960
sort of an interoperability bridge

628
00:23:27,919 --> 00:23:32,000
and this is what geeks pack does so

629
00:23:30,960 --> 00:23:33,840
geeks pack

630
00:23:32,000 --> 00:23:35,120
the way it works you give it a number a

631
00:23:33,840 --> 00:23:36,959
list of packages

632
00:23:35,120 --> 00:23:38,799
and it will create by default it will

633
00:23:36,960 --> 00:23:40,720
create a table that contains

634
00:23:38,799 --> 00:23:42,158
those packages and all their

635
00:23:40,720 --> 00:23:44,320
dependencies

636
00:23:42,159 --> 00:23:45,360
that's it so in this case i'm getting a

637
00:23:44,320 --> 00:23:48,480
table that contains

638
00:23:45,360 --> 00:23:50,719
python numpy but also

639
00:23:48,480 --> 00:23:54,720
leap c because python depends on lipsy

640
00:23:50,720 --> 00:23:54,720
and perhaps a couple of other libraries

641
00:23:54,799 --> 00:23:59,039
it becomes really cool when you add the

642
00:23:56,640 --> 00:24:00,880
dash relocatable option

643
00:23:59,039 --> 00:24:02,799
so if you add that option you get a

644
00:24:00,880 --> 00:24:03,679
double that contains again python and

645
00:24:02,799 --> 00:24:06,639
numpy

646
00:24:03,679 --> 00:24:08,080
but in addition to that python the the

647
00:24:06,640 --> 00:24:11,039
python executable

648
00:24:08,080 --> 00:24:12,080
is wrapped in a way that allows it to

649
00:24:11,039 --> 00:24:14,640
just run from

650
00:24:12,080 --> 00:24:16,559
anywhere so in other words you can

651
00:24:14,640 --> 00:24:18,559
unpack that table anywhere on your file

652
00:24:16,559 --> 00:24:21,120
system like in your home directory

653
00:24:18,559 --> 00:24:22,960
and from there you can type dot slash

654
00:24:21,120 --> 00:24:25,760
pin slash python

655
00:24:22,960 --> 00:24:26,320
and it just works right so that relies

656
00:24:25,760 --> 00:24:28,559
on

657
00:24:26,320 --> 00:24:30,158
either on again online privilege

658
00:24:28,559 --> 00:24:33,440
username spaces

659
00:24:30,159 --> 00:24:36,080
on linux or on a on payroll

660
00:24:33,440 --> 00:24:37,840
which is another tool that allows you to

661
00:24:36,080 --> 00:24:41,279
you know to virtualize the file system

662
00:24:37,840 --> 00:24:43,600
things like that but of course

663
00:24:41,279 --> 00:24:45,440
if you insist on using docker because

664
00:24:43,600 --> 00:24:48,320
docker is everywhere anyway so

665
00:24:45,440 --> 00:24:49,919
if you want to transfer your your the

666
00:24:48,320 --> 00:24:52,399
bits of your packages to a

667
00:24:49,919 --> 00:24:54,080
docker powered machine then you can

668
00:24:52,400 --> 00:24:55,200
always create a docker image using the

669
00:24:54,080 --> 00:24:57,760
dash dash format

670
00:24:55,200 --> 00:24:59,360
equals docker option and you get your

671
00:24:57,760 --> 00:25:02,158
docker image you can say

672
00:24:59,360 --> 00:25:04,158
darker lore darker run it just runs it's

673
00:25:02,159 --> 00:25:06,960
great

674
00:25:04,159 --> 00:25:08,960
so it it may sound a bit ironic because

675
00:25:06,960 --> 00:25:09,600
i just said before that containers are

676
00:25:08,960 --> 00:25:13,279
bad

677
00:25:09,600 --> 00:25:14,959
okay but don't get me wrong i mean

678
00:25:13,279 --> 00:25:15,760
containers are really two things there

679
00:25:14,960 --> 00:25:18,080
is the

680
00:25:15,760 --> 00:25:19,600
the packaging part and the runtime part

681
00:25:18,080 --> 00:25:21,360
so the packaging part is the

682
00:25:19,600 --> 00:25:23,918
docker file and this is what i'm

683
00:25:21,360 --> 00:25:24,799
criticizing but the runtime part is just

684
00:25:23,919 --> 00:25:27,039
fine

685
00:25:24,799 --> 00:25:28,000
and so here the advantage when you

686
00:25:27,039 --> 00:25:30,240
create a

687
00:25:28,000 --> 00:25:31,919
docker image with geekspack is that you

688
00:25:30,240 --> 00:25:34,000
get to reproducible image

689
00:25:31,919 --> 00:25:35,120
right so it's not like when you use a

690
00:25:34,000 --> 00:25:37,440
docker file

691
00:25:35,120 --> 00:25:39,279
you're pretty sure that the image is not

692
00:25:37,440 --> 00:25:41,120
going to be reproducible it's going to

693
00:25:39,279 --> 00:25:42,080
depend on the time at which you run it

694
00:25:41,120 --> 00:25:43,760
for example

695
00:25:42,080 --> 00:25:46,639
it's going to depend on the availability

696
00:25:43,760 --> 00:25:48,000
of a number of things on the network

697
00:25:46,640 --> 00:25:50,000
but here you know it's going to be

698
00:25:48,000 --> 00:25:52,240
reproducible right kicks back

699
00:25:50,000 --> 00:25:54,480
python is always going to give you the

700
00:25:52,240 --> 00:25:57,840
same image

701
00:25:54,480 --> 00:25:57,840
that makes a difference

702
00:25:58,640 --> 00:26:02,720
all right so far so good so i've been

703
00:26:00,400 --> 00:26:05,760
talking about package management

704
00:26:02,720 --> 00:26:06,799
environment management containers now i

705
00:26:05,760 --> 00:26:11,360
need to talk a bit about

706
00:26:06,799 --> 00:26:13,520
operating systems to the next level

707
00:26:11,360 --> 00:26:16,000
so the way it works oh this is a

708
00:26:13,520 --> 00:26:18,639
conversation i captured on irc a couple

709
00:26:16,000 --> 00:26:21,600
of days ago and i found it

710
00:26:18,640 --> 00:26:23,600
a good summary of the story so the story

711
00:26:21,600 --> 00:26:26,559
here when you use geek system

712
00:26:23,600 --> 00:26:28,000
which is a standalone distribution the

713
00:26:26,559 --> 00:26:29,678
story is that you just

714
00:26:28,000 --> 00:26:31,440
you tell it what you want right you

715
00:26:29,679 --> 00:26:32,240
describe what you want in your operating

716
00:26:31,440 --> 00:26:34,720
system

717
00:26:32,240 --> 00:26:35,360
and then you give it to geeks and it

718
00:26:34,720 --> 00:26:37,840
just

719
00:26:35,360 --> 00:26:39,039
puts everything in place you just need

720
00:26:37,840 --> 00:26:42,000
to speak its language

721
00:26:39,039 --> 00:26:43,760
of course but like i said it's such a

722
00:26:42,000 --> 00:26:48,240
fine language anyway

723
00:26:43,760 --> 00:26:48,240
so let me show you how that works

724
00:26:48,559 --> 00:26:52,080
so this is an operating system

725
00:26:50,159 --> 00:26:55,840
declaration hope you can

726
00:26:52,080 --> 00:26:58,480
read it yeah so

727
00:26:55,840 --> 00:26:59,760
in that single configuration file you

728
00:26:58,480 --> 00:27:01,840
would actually describe

729
00:26:59,760 --> 00:27:03,039
all the details about your operating

730
00:27:01,840 --> 00:27:05,039
system right

731
00:27:03,039 --> 00:27:06,720
so that includes like the host name the

732
00:27:05,039 --> 00:27:10,320
time zone the locale

733
00:27:06,720 --> 00:27:13,840
file systems user accounts services

734
00:27:10,320 --> 00:27:15,120
everything and so the services here we

735
00:27:13,840 --> 00:27:17,279
just

736
00:27:15,120 --> 00:27:19,439
we're just asking for not much actually

737
00:27:17,279 --> 00:27:20,240
we're just asking for a dhcp client

738
00:27:19,440 --> 00:27:22,480
service

739
00:27:20,240 --> 00:27:26,080
and for open ssh with the just the

740
00:27:22,480 --> 00:27:26,080
default configuration options

741
00:27:27,039 --> 00:27:31,120
don't be scared you don't have to learn

742
00:27:29,520 --> 00:27:33,279
that right from the start so typically

743
00:27:31,120 --> 00:27:35,678
when you get started with gig system

744
00:27:33,279 --> 00:27:36,559
you will download the iso installation

745
00:27:35,679 --> 00:27:38,880
image

746
00:27:36,559 --> 00:27:41,760
and the iso installation image contains

747
00:27:38,880 --> 00:27:42,880
a menu based installer pretty much like

748
00:27:41,760 --> 00:27:44,720
that of debian

749
00:27:42,880 --> 00:27:46,320
where you can choose you know all the

750
00:27:44,720 --> 00:27:48,000
parameters of your system and it

751
00:27:46,320 --> 00:27:50,158
generates that file for you

752
00:27:48,000 --> 00:27:52,880
so that's how you would get started with

753
00:27:50,159 --> 00:27:52,880
geek system

754
00:27:52,960 --> 00:27:56,799
the thing here is once you have this

755
00:27:55,200 --> 00:27:58,320
file ready

756
00:27:56,799 --> 00:28:00,240
you can pass it to the geek system

757
00:27:58,320 --> 00:28:01,120
command and do a number of interesting

758
00:28:00,240 --> 00:28:04,880
things

759
00:28:01,120 --> 00:28:06,879
so for example you can say gig system vm

760
00:28:04,880 --> 00:28:09,120
that config file and it will create a

761
00:28:06,880 --> 00:28:11,440
script that spawns a vm

762
00:28:09,120 --> 00:28:13,520
running the system or you can say gig

763
00:28:11,440 --> 00:28:14,240
system docker image and creates a docker

764
00:28:13,520 --> 00:28:16,480
image

765
00:28:14,240 --> 00:28:18,960
for that system or you can say gig

766
00:28:16,480 --> 00:28:22,080
system container and it creates a script

767
00:28:18,960 --> 00:28:24,399
to spawn a container on your machine and

768
00:28:22,080 --> 00:28:26,080
lastly but importantly you can say gig

769
00:28:24,399 --> 00:28:28,080
system reconfigure

770
00:28:26,080 --> 00:28:30,158
in that case you just reconfigure your

771
00:28:28,080 --> 00:28:32,799
machine on the bare metal

772
00:28:30,159 --> 00:28:33,840
so that well you just instantiate that

773
00:28:32,799 --> 00:28:36,799
configuration

774
00:28:33,840 --> 00:28:38,720
right so you no longer have to feed all

775
00:28:36,799 --> 00:28:39,440
these configuration bits everywhere on

776
00:28:38,720 --> 00:28:42,080
your system

777
00:28:39,440 --> 00:28:44,799
right it's entirely declarative you say

778
00:28:42,080 --> 00:28:47,199
i want this services these user accounts

779
00:28:44,799 --> 00:28:48,639
you say then you type pre-configure and

780
00:28:47,200 --> 00:28:52,080
you get what you asked for

781
00:28:48,640 --> 00:28:54,799
it's as simple as this

782
00:28:52,080 --> 00:28:56,799
and the good thing is that again you can

783
00:28:54,799 --> 00:28:57,279
well you can first test your system in a

784
00:28:56,799 --> 00:28:59,520
vm

785
00:28:57,279 --> 00:29:00,640
you can run geek system vm on that

786
00:28:59,520 --> 00:29:03,279
config and see

787
00:29:00,640 --> 00:29:05,039
how well it looks like right if it runs

788
00:29:03,279 --> 00:29:06,880
the way you expect

789
00:29:05,039 --> 00:29:08,320
and once you're happy with the result at

790
00:29:06,880 --> 00:29:09,840
that point you can run gig system

791
00:29:08,320 --> 00:29:12,960
reconfigure

792
00:29:09,840 --> 00:29:14,240
and if there is still for some reason a

793
00:29:12,960 --> 00:29:16,720
problem at that point with the

794
00:29:14,240 --> 00:29:20,240
configuration you can always roll back

795
00:29:16,720 --> 00:29:23,360
the whole system configuration okay

796
00:29:20,240 --> 00:29:26,960
so again it's super safe like as a user

797
00:29:23,360 --> 00:29:28,639
you can go ahead reconfigure no worries

798
00:29:26,960 --> 00:29:31,679
if something goes wrong you just fall

799
00:29:28,640 --> 00:29:31,679
back and everything is fine

800
00:29:32,960 --> 00:29:38,000
so of course people have been wanting to

801
00:29:36,240 --> 00:29:41,600
take it to the next level

802
00:29:38,000 --> 00:29:43,200
and you know try to deploy in a bunch of

803
00:29:41,600 --> 00:29:45,360
machines at once

804
00:29:43,200 --> 00:29:46,320
and so this is this is a brand new

805
00:29:45,360 --> 00:29:49,039
feature actually

806
00:29:46,320 --> 00:29:50,559
it's it's from a google summer of code

807
00:29:49,039 --> 00:29:54,240
internship that was

808
00:29:50,559 --> 00:29:56,320
super productive super efficient and

809
00:29:54,240 --> 00:29:57,520
the thing we're doing here is that we

810
00:29:56,320 --> 00:30:00,559
define a function

811
00:29:57,520 --> 00:30:01,120
up here that says all right given the

812
00:30:00,559 --> 00:30:03,840
machine

813
00:30:01,120 --> 00:30:05,199
number n here is the operating system

814
00:30:03,840 --> 00:30:06,639
configuration so

815
00:30:05,200 --> 00:30:08,320
essentially it's just producing a

816
00:30:06,640 --> 00:30:11,039
different hostname

817
00:30:08,320 --> 00:30:12,960
and then here i have a bit of code that

818
00:30:11,039 --> 00:30:15,840
maps over a list of numbers

819
00:30:12,960 --> 00:30:16,320
one two three four five and for each

820
00:30:15,840 --> 00:30:19,678
number

821
00:30:16,320 --> 00:30:20,799
it returns a well a configuration for a

822
00:30:19,679 --> 00:30:23,200
machine

823
00:30:20,799 --> 00:30:25,520
that uses that operating system and says

824
00:30:23,200 --> 00:30:27,919
the machines available over ssh

825
00:30:25,520 --> 00:30:29,840
and that's it and if you pass that

826
00:30:27,919 --> 00:30:31,360
configuration file to the new gigs

827
00:30:29,840 --> 00:30:33,439
deploy command

828
00:30:31,360 --> 00:30:35,520
then it will actually deploy the system

829
00:30:33,440 --> 00:30:38,640
on all these five machines

830
00:30:35,520 --> 00:30:39,679
over ssh and that's it and this is

831
00:30:38,640 --> 00:30:43,679
pretty cool

832
00:30:39,679 --> 00:30:45,919
i think so this is for machines that are

833
00:30:43,679 --> 00:30:47,360
accessible over ssh but there's another

834
00:30:45,919 --> 00:30:51,360
backend currently

835
00:30:47,360 --> 00:30:53,520
that's the digital ocean vps so

836
00:30:51,360 --> 00:30:55,840
if you want to deploy to digital ocean

837
00:30:53,520 --> 00:30:58,320
it should work like this

838
00:30:55,840 --> 00:30:58,959
this is still very much better at this

839
00:30:58,320 --> 00:31:02,559
point

840
00:30:58,960 --> 00:31:05,519
like we are aware of some shortcomings

841
00:31:02,559 --> 00:31:07,519
but that's i think it paves the way to a

842
00:31:05,519 --> 00:31:08,720
a very convenient way to deploy over a

843
00:31:07,519 --> 00:31:12,240
number of machines

844
00:31:08,720 --> 00:31:12,240
in a reproducible way

845
00:31:13,279 --> 00:31:18,480
all right i've been talking a lot about

846
00:31:17,519 --> 00:31:21,840
features

847
00:31:18,480 --> 00:31:23,760
what it feels like to use geeks i hope

848
00:31:21,840 --> 00:31:26,399
you now have a better idea of what it's

849
00:31:23,760 --> 00:31:29,600
like what you can do with it

850
00:31:26,399 --> 00:31:31,360
but i think it's also important to talk

851
00:31:29,600 --> 00:31:32,799
about

852
00:31:31,360 --> 00:31:35,678
other properties of geeks as a

853
00:31:32,799 --> 00:31:37,679
distributions it turns out that geeks is

854
00:31:35,679 --> 00:31:40,159
very much about source code

855
00:31:37,679 --> 00:31:41,760
so it's a new package so it will come as

856
00:31:40,159 --> 00:31:43,039
no surprise if i tell you that we're

857
00:31:41,760 --> 00:31:46,320
concerned about

858
00:31:43,039 --> 00:31:47,200
making sure that users have the freedom

859
00:31:46,320 --> 00:31:48,559
to actually

860
00:31:47,200 --> 00:31:50,799
you know see what software they're

861
00:31:48,559 --> 00:31:52,399
running for example modify it easily

862
00:31:50,799 --> 00:31:55,519
deploy it easily

863
00:31:52,399 --> 00:31:57,120
and all that and it turns out that geeks

864
00:31:55,519 --> 00:32:00,320
is pretty much a source based

865
00:31:57,120 --> 00:32:01,840
distribution so like i explained before

866
00:32:00,320 --> 00:32:03,760
in practice you get

867
00:32:01,840 --> 00:32:05,439
binary packages most of the time that's

868
00:32:03,760 --> 00:32:06,080
what we're aiming for because you don't

869
00:32:05,440 --> 00:32:08,799
want to

870
00:32:06,080 --> 00:32:10,480
wait for libreoffice to build on your

871
00:32:08,799 --> 00:32:13,360
laptop right

872
00:32:10,480 --> 00:32:14,000
but geeks knows about you know the

873
00:32:13,360 --> 00:32:16,959
source code

874
00:32:14,000 --> 00:32:18,640
that leads to a given binary artifact

875
00:32:16,960 --> 00:32:20,799
that's the thing

876
00:32:18,640 --> 00:32:22,720
so for example if we look at the package

877
00:32:20,799 --> 00:32:23,600
definition for audacity it looks like

878
00:32:22,720 --> 00:32:25,279
this

879
00:32:23,600 --> 00:32:26,719
you know you have the usual pieces of

880
00:32:25,279 --> 00:32:30,000
metadata

881
00:32:26,720 --> 00:32:32,960
and in particular we have the github

882
00:32:30,000 --> 00:32:35,840
git repo url and we specify the commit

883
00:32:32,960 --> 00:32:39,039
that we want to build from

884
00:32:35,840 --> 00:32:40,959
so far so great so far so good but i

885
00:32:39,039 --> 00:32:43,039
mean if you've been following along

886
00:32:40,960 --> 00:32:44,640
i told you about that that wonderful

887
00:32:43,039 --> 00:32:48,158
time machine command before

888
00:32:44,640 --> 00:32:51,679
this is great but what if i

889
00:32:48,159 --> 00:32:54,399
you know i go back to the future and

890
00:32:51,679 --> 00:32:57,440
somehow for some reason that git

891
00:32:54,399 --> 00:32:59,360
repository disappeared in the meantime

892
00:32:57,440 --> 00:33:00,640
we have a problem right we can no longer

893
00:32:59,360 --> 00:33:03,120
reproduce

894
00:33:00,640 --> 00:33:05,360
the the binary package because we

895
00:33:03,120 --> 00:33:07,120
actually lost the source

896
00:33:05,360 --> 00:33:08,479
and this is where software heritage

897
00:33:07,120 --> 00:33:11,678
comes in so

898
00:33:08,480 --> 00:33:15,120
have you heard about software heritage

899
00:33:11,679 --> 00:33:18,480
yeah all right so software heritage is

900
00:33:15,120 --> 00:33:20,879
is just an archival source code

901
00:33:18,480 --> 00:33:23,039
so they are trying to basically archive

902
00:33:20,880 --> 00:33:26,240
all the source code that's out there

903
00:33:23,039 --> 00:33:29,120
forever that's that's the idea and

904
00:33:26,240 --> 00:33:29,840
it comes in very handy for free software

905
00:33:29,120 --> 00:33:32,559
in general

906
00:33:29,840 --> 00:33:33,519
and for geeks and other distributions

907
00:33:32,559 --> 00:33:35,120
because

908
00:33:33,519 --> 00:33:36,960
it means we can just fall back to

909
00:33:35,120 --> 00:33:38,959
software heritage whenever

910
00:33:36,960 --> 00:33:41,840
we want to access source code that has

911
00:33:38,960 --> 00:33:43,600
disappeared from its upstream location

912
00:33:41,840 --> 00:33:45,439
and this is great so we have tooling and

913
00:33:43,600 --> 00:33:47,840
geeks that allows us to verify

914
00:33:45,440 --> 00:33:49,039
whether a given repo is available in

915
00:33:47,840 --> 00:33:50,799
software heritage

916
00:33:49,039 --> 00:33:53,840
and if it's not we can say all right

917
00:33:50,799 --> 00:33:56,559
please archive this git repo

918
00:33:53,840 --> 00:33:58,000
and on top of that there is work ongoing

919
00:33:56,559 --> 00:34:01,440
work by

920
00:33:58,000 --> 00:34:03,440
nixos people to provide additional

921
00:34:01,440 --> 00:34:04,159
information to software heritage so that

922
00:34:03,440 --> 00:34:06,240
they can

923
00:34:04,159 --> 00:34:07,600
we can make sure they archive every

924
00:34:06,240 --> 00:34:11,040
source double that

925
00:34:07,600 --> 00:34:13,040
our distributions nixos and geeks refer

926
00:34:11,040 --> 00:34:16,079
to so

927
00:34:13,040 --> 00:34:18,839
eventually the goal is that

928
00:34:16,079 --> 00:34:21,440
for every package available in geeks and

929
00:34:18,839 --> 00:34:22,639
xos well software heritage will have the

930
00:34:21,440 --> 00:34:25,679
source code archive

931
00:34:22,639 --> 00:34:25,679
so we'll be safe

932
00:34:27,040 --> 00:34:31,040
that's one thing about source code the

933
00:34:29,599 --> 00:34:32,480
other thing about source code is

934
00:34:31,040 --> 00:34:34,560
reproducible builds you've

935
00:34:32,480 --> 00:34:38,159
probably heard about that effort that

936
00:34:34,560 --> 00:34:41,440
was started by debian developers

937
00:34:38,159 --> 00:34:43,599
some six years ago i think

938
00:34:41,440 --> 00:34:44,639
it's a very important effort because the

939
00:34:43,599 --> 00:34:46,399
idea here

940
00:34:44,639 --> 00:34:48,720
is to make sure that we have a

941
00:34:46,399 --> 00:34:50,000
verifiable path from source code to

942
00:34:48,719 --> 00:34:51,918
binaries

943
00:34:50,000 --> 00:34:54,399
and if we don't have that verifiable

944
00:34:51,918 --> 00:34:56,319
path print rebels because

945
00:34:54,399 --> 00:34:57,920
how can i make sure that the software

946
00:34:56,320 --> 00:34:59,920
i'm running on my laptop

947
00:34:57,920 --> 00:35:01,760
really corresponds to what it's supposed

948
00:34:59,920 --> 00:35:03,200
to correspond to right how can i make

949
00:35:01,760 --> 00:35:05,520
sure that my emacs

950
00:35:03,200 --> 00:35:06,399
executable really comes from that emacs

951
00:35:05,520 --> 00:35:07,920
table

952
00:35:06,400 --> 00:35:10,880
and that's where reproducible builds

953
00:35:07,920 --> 00:35:12,400
come in this is crucial from a user

954
00:35:10,880 --> 00:35:15,200
freedom perspective but also from a

955
00:35:12,400 --> 00:35:18,400
security perspective obviously

956
00:35:15,200 --> 00:35:20,319
so how do we do that in gigs

957
00:35:18,400 --> 00:35:21,680
well here is standing on the shoulders

958
00:35:20,320 --> 00:35:23,200
of nyx

959
00:35:21,680 --> 00:35:25,118
because we're using a functional

960
00:35:23,200 --> 00:35:28,399
approach meaning that

961
00:35:25,119 --> 00:35:30,800
we consider each build process of

962
00:35:28,400 --> 00:35:32,240
of a package as a pure function in the

963
00:35:30,800 --> 00:35:35,359
mathematical sense

964
00:35:32,240 --> 00:35:37,680
so for example if i take e-max we

965
00:35:35,359 --> 00:35:39,520
consider that the e-max binary is the

966
00:35:37,680 --> 00:35:43,118
result of applying the function

967
00:35:39,520 --> 00:35:46,480
f to gtk gcc and all the the

968
00:35:43,119 --> 00:35:48,400
dependencies of e-max right where f

969
00:35:46,480 --> 00:35:50,000
is roughly the function that runs

970
00:35:48,400 --> 00:35:51,359
configure make make installed at the

971
00:35:50,000 --> 00:35:53,359
high level view

972
00:35:51,359 --> 00:35:55,680
and then of course it's recursive like

973
00:35:53,359 --> 00:35:57,359
jdk itself is the result of applying a

974
00:35:55,680 --> 00:36:00,399
function to a bunch of inputs

975
00:35:57,359 --> 00:36:02,160
and so on and so forth and so that's a

976
00:36:00,400 --> 00:36:06,400
great way to

977
00:36:02,160 --> 00:36:09,839
reason about reproducible builds because

978
00:36:06,400 --> 00:36:11,599
in practice when we build a package like

979
00:36:09,839 --> 00:36:13,839
if i run geeksbuild hello

980
00:36:11,599 --> 00:36:15,359
well either i'm going to download the

981
00:36:13,839 --> 00:36:18,078
pre-built binary

982
00:36:15,359 --> 00:36:19,598
or i'm going to build it locally in an

983
00:36:18,079 --> 00:36:22,160
isolated environment

984
00:36:19,599 --> 00:36:24,079
ch root separate name spaces and so on

985
00:36:22,160 --> 00:36:26,879
and so forth

986
00:36:24,079 --> 00:36:28,160
and because it's an isolated environment

987
00:36:26,880 --> 00:36:30,880
it's a

988
00:36:28,160 --> 00:36:31,759
very good context to you know to

989
00:36:30,880 --> 00:36:34,000
maximize

990
00:36:31,760 --> 00:36:35,200
the chances of having a reproducible

991
00:36:34,000 --> 00:36:37,520
build

992
00:36:35,200 --> 00:36:39,040
it does not guarantee that the build is

993
00:36:37,520 --> 00:36:40,800
going to be reproducible

994
00:36:39,040 --> 00:36:43,119
because for instance if that hello

995
00:36:40,800 --> 00:36:45,680
package is going to store a timestamp

996
00:36:43,119 --> 00:36:48,320
in in the binary then obviously it's not

997
00:36:45,680 --> 00:36:50,879
reproducible bit by bit right

998
00:36:48,320 --> 00:36:52,560
but it creates the conditions that make

999
00:36:50,880 --> 00:36:56,000
it more likely that bids

1000
00:36:52,560 --> 00:36:58,720
are reproducible and so if we look

1001
00:36:56,000 --> 00:36:59,680
at the result well the result of a build

1002
00:36:58,720 --> 00:37:03,279
is stored in that

1003
00:36:59,680 --> 00:37:03,680
directory new store and it has the big

1004
00:37:03,280 --> 00:37:05,359
hash

1005
00:37:03,680 --> 00:37:07,359
that is a hash of all the dependencies

1006
00:37:05,359 --> 00:37:09,759
so it's uniquely identified

1007
00:37:07,359 --> 00:37:11,359
this particular build and if the build

1008
00:37:09,760 --> 00:37:11,839
is already available in store we're not

1009
00:37:11,359 --> 00:37:15,680
going to

1010
00:37:11,839 --> 00:37:18,640
build it again and all this is

1011
00:37:15,680 --> 00:37:19,759
nearly a bit identical for everyone

1012
00:37:18,640 --> 00:37:21,520
nearly because

1013
00:37:19,760 --> 00:37:23,520
when it's not bit identical it means we

1014
00:37:21,520 --> 00:37:25,920
have a bug like maybe timestamps are

1015
00:37:23,520 --> 00:37:27,839
being stored somewhere

1016
00:37:25,920 --> 00:37:29,839
and so we want users to be able to take

1017
00:37:27,839 --> 00:37:32,320
advantage of that property and for that

1018
00:37:29,839 --> 00:37:34,240
we have a geeks challenge command that

1019
00:37:32,320 --> 00:37:37,599
allows users to say

1020
00:37:34,240 --> 00:37:39,598
well you know i know of two different

1021
00:37:37,599 --> 00:37:41,720
servers that provide pre-built binaries

1022
00:37:39,599 --> 00:37:43,920
for gigs i have

1023
00:37:41,720 --> 00:37:46,439
ci.kicks.gnu.org which is the official

1024
00:37:43,920 --> 00:37:48,079
build form and i have

1025
00:37:46,440 --> 00:37:50,960
something.example.org

1026
00:37:48,079 --> 00:37:52,079
can i really trust these two guys right

1027
00:37:50,960 --> 00:37:55,119
like do they get

1028
00:37:52,079 --> 00:37:57,839
the same build results as i do

1029
00:37:55,119 --> 00:37:59,920
i want to know so if i run that command

1030
00:37:57,839 --> 00:38:01,599
i give the urls of those servers

1031
00:37:59,920 --> 00:38:04,160
then it's going to report about

1032
00:38:01,599 --> 00:38:06,800
discrepancies so for example

1033
00:38:04,160 --> 00:38:07,759
here it's telling me that open ssl

1034
00:38:06,800 --> 00:38:10,560
differs like

1035
00:38:07,760 --> 00:38:11,359
i have a local build that has a certain

1036
00:38:10,560 --> 00:38:14,640
hash

1037
00:38:11,359 --> 00:38:16,960
but the build provided by ci dot geeks

1038
00:38:14,640 --> 00:38:18,720
has a different hash and the one by

1039
00:38:16,960 --> 00:38:21,200
example.org

1040
00:38:18,720 --> 00:38:22,560
has yet another hash so there must be

1041
00:38:21,200 --> 00:38:24,399
something wrong right

1042
00:38:22,560 --> 00:38:26,799
perhaps it's just a timestamp issue but

1043
00:38:24,400 --> 00:38:28,640
perhaps it's a torsion horse

1044
00:38:26,800 --> 00:38:30,400
right so that needs investigation and at

1045
00:38:28,640 --> 00:38:32,240
this point you would run default scope

1046
00:38:30,400 --> 00:38:35,040
or some kind of tool to see what the

1047
00:38:32,240 --> 00:38:35,040
differences are

1048
00:38:36,079 --> 00:38:42,480
so far for reproducible builds

1049
00:38:39,200 --> 00:38:43,759
this is great but then

1050
00:38:42,480 --> 00:38:46,079
perhaps you've heard about that

1051
00:38:43,760 --> 00:38:49,280
reflections on thrusting trust paper

1052
00:38:46,079 --> 00:38:51,839
from 1983 i think

1053
00:38:49,280 --> 00:38:53,119
well in that paper ken thompson shows

1054
00:38:51,839 --> 00:38:55,759
that in fact

1055
00:38:53,119 --> 00:38:57,440
it's possible to modify a compiler like

1056
00:38:55,760 --> 00:39:00,160
a c compiler in a way

1057
00:38:57,440 --> 00:39:02,480
that will allow it to insert backdoors

1058
00:39:00,160 --> 00:39:04,799
in the programs it compiles

1059
00:39:02,480 --> 00:39:06,400
and in addition to that it will allow it

1060
00:39:04,800 --> 00:39:09,119
to insert

1061
00:39:06,400 --> 00:39:09,839
to reproduce itself in a way that is

1062
00:39:09,119 --> 00:39:12,320
basically

1063
00:39:09,839 --> 00:39:13,920
impossible to diagnose right it makes it

1064
00:39:12,320 --> 00:39:16,079
impossible to see that the compiler

1065
00:39:13,920 --> 00:39:19,359
itself is backdoor

1066
00:39:16,079 --> 00:39:21,040
that's a problem also and

1067
00:39:19,359 --> 00:39:23,520
in general in geeks we want to build

1068
00:39:21,040 --> 00:39:25,440
everything from source right so

1069
00:39:23,520 --> 00:39:27,359
we have that situation where every time

1070
00:39:25,440 --> 00:39:27,680
we have just a binary and all source

1071
00:39:27,359 --> 00:39:29,839
that's

1072
00:39:27,680 --> 00:39:31,680
a problem and that's where

1073
00:39:29,839 --> 00:39:33,520
bootstrappable builds come in so it's

1074
00:39:31,680 --> 00:39:35,520
sort of you could see it as a

1075
00:39:33,520 --> 00:39:37,680
continuation to reproducible builds in a

1076
00:39:35,520 --> 00:39:40,720
way but it's all about making sure we

1077
00:39:37,680 --> 00:39:42,720
build everything from source

1078
00:39:40,720 --> 00:39:43,919
and if we go to the bottom of the

1079
00:39:42,720 --> 00:39:46,799
dependency graph

1080
00:39:43,920 --> 00:39:47,359
of packages and geeks well you'll find

1081
00:39:46,800 --> 00:39:49,359
out that

1082
00:39:47,359 --> 00:39:51,279
not long ago at the bottom of the

1083
00:39:49,359 --> 00:39:55,040
dependency graph we had

1084
00:39:51,280 --> 00:39:55,680
these five things and these five things

1085
00:39:55,040 --> 00:39:58,560
are just

1086
00:39:55,680 --> 00:39:59,680
pre-built binaries that we built someday

1087
00:39:58,560 --> 00:40:03,599
some years ago

1088
00:39:59,680 --> 00:40:06,640
that contains gcc glibc lots of software

1089
00:40:03,599 --> 00:40:07,200
so it's like 250 megabytes of binary

1090
00:40:06,640 --> 00:40:09,759
blobs

1091
00:40:07,200 --> 00:40:10,560
that are unauditable and it doesn't feel

1092
00:40:09,760 --> 00:40:13,599
right right

1093
00:40:10,560 --> 00:40:15,520
there could be a trojan horse in there

1094
00:40:13,599 --> 00:40:18,720
that replicates itself and we just don't

1095
00:40:15,520 --> 00:40:22,880
see it that's kind of a problem

1096
00:40:18,720 --> 00:40:26,078
so a bunch of crazy people

1097
00:40:22,880 --> 00:40:28,720
some of which standing in this room uh

1098
00:40:26,079 --> 00:40:29,680
decided to fix it and what's the way to

1099
00:40:28,720 --> 00:40:31,439
fix it well

1100
00:40:29,680 --> 00:40:33,759
you need to build everything from source

1101
00:40:31,440 --> 00:40:34,960
right so you need to take this guy here

1102
00:40:33,760 --> 00:40:37,119
this gcc

1103
00:40:34,960 --> 00:40:38,960
and somehow find a way to get to build

1104
00:40:37,119 --> 00:40:43,040
gcc from source

1105
00:40:38,960 --> 00:40:45,440
how do you do that well

1106
00:40:43,040 --> 00:40:46,560
it becomes a bit more complex right so

1107
00:40:45,440 --> 00:40:49,920
we still have this

1108
00:40:46,560 --> 00:40:51,839
gnu make built up there but before we

1109
00:40:49,920 --> 00:40:54,640
get to bill

1110
00:40:51,839 --> 00:40:55,440
and before we build we get to build gcc

1111
00:40:54,640 --> 00:40:58,560
itself

1112
00:40:55,440 --> 00:40:59,359
while we first build a very simple c

1113
00:40:58,560 --> 00:41:01,920
compiler

1114
00:40:59,359 --> 00:41:03,759
that in turns can build a more complex c

1115
00:41:01,920 --> 00:41:06,800
compiler tiny cc

1116
00:41:03,760 --> 00:41:09,680
which in turn can be the first gcc

1117
00:41:06,800 --> 00:41:11,760
and then a more complex gcc that's

1118
00:41:09,680 --> 00:41:15,598
roughly the story

1119
00:41:11,760 --> 00:41:18,160
but it means that we have a smaller

1120
00:41:15,599 --> 00:41:19,599
bootstrap blobs binary blobs at the

1121
00:41:18,160 --> 00:41:23,560
bottom of the graph

1122
00:41:19,599 --> 00:41:27,280
and so we went from 250 megabytes to

1123
00:41:23,560 --> 00:41:29,200
130 or 140 megabytes of binary blobs

1124
00:41:27,280 --> 00:41:30,319
which is already a great improvement i

1125
00:41:29,200 --> 00:41:31,839
think

1126
00:41:30,319 --> 00:41:33,440
it's not black and white you know it's

1127
00:41:31,839 --> 00:41:35,279
not zero light

1128
00:41:33,440 --> 00:41:39,440
that's not possible but we're making

1129
00:41:35,280 --> 00:41:42,480
progress and i really invite you to go

1130
00:41:39,440 --> 00:41:43,280
tomorrow at 11 50 a.m to the minimalist

1131
00:41:42,480 --> 00:41:45,359
language dev

1132
00:41:43,280 --> 00:41:46,960
um dev room if you want to learn more

1133
00:41:45,359 --> 00:41:48,000
about this and what's coming next

1134
00:41:46,960 --> 00:41:52,000
because we are going

1135
00:41:48,000 --> 00:41:54,079
beyond well below 130 megabytes

1136
00:41:52,000 --> 00:41:55,680
this is great i think it's crucial for

1137
00:41:54,079 --> 00:41:59,280
free software in general

1138
00:41:55,680 --> 00:42:00,399
and for security too we have the same

1139
00:41:59,280 --> 00:42:02,640
bootstrapping problem

1140
00:42:00,400 --> 00:42:03,839
at the level of every language roughly

1141
00:42:02,640 --> 00:42:05,839
every time you have a programming

1142
00:42:03,839 --> 00:42:06,720
language compiler you have that sort of

1143
00:42:05,839 --> 00:42:09,759
problem

1144
00:42:06,720 --> 00:42:11,439
and for example rust is one of them

1145
00:42:09,760 --> 00:42:12,880
you know the instructions to build

1146
00:42:11,440 --> 00:42:15,119
versus normally just to grab

1147
00:42:12,880 --> 00:42:17,040
a pre-built binary of the latest trust

1148
00:42:15,119 --> 00:42:18,720
and then you build the next version from

1149
00:42:17,040 --> 00:42:22,079
that that's not great

1150
00:42:18,720 --> 00:42:23,919
but again we had someone also sitting in

1151
00:42:22,079 --> 00:42:26,400
this room somewhere here

1152
00:42:23,920 --> 00:42:27,920
who worked on this and now in geeks

1153
00:42:26,400 --> 00:42:30,160
we're able to build everything

1154
00:42:27,920 --> 00:42:31,040
from source so we have we're using the c

1155
00:42:30,160 --> 00:42:33,359
plus plus

1156
00:42:31,040 --> 00:42:34,079
implementation of the rust compiler to

1157
00:42:33,359 --> 00:42:36,000
build

1158
00:42:34,079 --> 00:42:38,400
well the actual worst compiler and then

1159
00:42:36,000 --> 00:42:41,200
a series of versions of rust

1160
00:42:38,400 --> 00:42:41,839
this is great and yeah there's a talk

1161
00:42:41,200 --> 00:42:45,839
tomorrow about

1162
00:42:41,839 --> 00:42:45,839
rust packaging gigs if you are into that

1163
00:42:46,000 --> 00:42:51,599
all right one last thing about source

1164
00:42:48,640 --> 00:42:53,759
code and provenance tracking

1165
00:42:51,599 --> 00:42:54,800
so like i said we have a functional

1166
00:42:53,760 --> 00:42:57,119
model where

1167
00:42:54,800 --> 00:42:58,560
in effect when we deploy an operating

1168
00:42:57,119 --> 00:43:00,720
system we

1169
00:42:58,560 --> 00:43:02,240
apply a function gig system build to a

1170
00:43:00,720 --> 00:43:04,240
configuration file

1171
00:43:02,240 --> 00:43:06,479
and the result of that is a working

1172
00:43:04,240 --> 00:43:08,799
system this is great

1173
00:43:06,480 --> 00:43:09,599
but there are cases where you would like

1174
00:43:08,800 --> 00:43:11,599
to go

1175
00:43:09,599 --> 00:43:13,440
the other way around right you would

1176
00:43:11,599 --> 00:43:15,920
like to have the inverse function

1177
00:43:13,440 --> 00:43:17,599
like you have an already deployed system

1178
00:43:15,920 --> 00:43:19,359
and you would like to see how it was

1179
00:43:17,599 --> 00:43:23,119
deployed how you got to that

1180
00:43:19,359 --> 00:43:25,759
binary artifact how do you do that

1181
00:43:23,119 --> 00:43:26,960
well again another new feature that was

1182
00:43:25,760 --> 00:43:28,960
recently added

1183
00:43:26,960 --> 00:43:30,079
there's this kicksystem described

1184
00:43:28,960 --> 00:43:32,480
command

1185
00:43:30,079 --> 00:43:34,319
and basically every time you instantiate

1186
00:43:32,480 --> 00:43:35,440
your configuration with gig system

1187
00:43:34,319 --> 00:43:37,680
reconfigure

1188
00:43:35,440 --> 00:43:38,480
it would also store provenance

1189
00:43:37,680 --> 00:43:41,200
information

1190
00:43:38,480 --> 00:43:43,119
along with your system and in particular

1191
00:43:41,200 --> 00:43:44,078
it would store the configuration file

1192
00:43:43,119 --> 00:43:47,040
itself

1193
00:43:44,079 --> 00:43:49,520
as well as the commit that you used to

1194
00:43:47,040 --> 00:43:51,359
you know to reconfigure your system

1195
00:43:49,520 --> 00:43:52,720
and so from there you can actually map

1196
00:43:51,359 --> 00:43:56,480
your system

1197
00:43:52,720 --> 00:43:58,959
your binary artifact back to source code

1198
00:43:56,480 --> 00:43:59,920
and this is again pretty cool because

1199
00:43:58,960 --> 00:44:01,839
then you can

1200
00:43:59,920 --> 00:44:03,119
like you can do things like bisecting

1201
00:44:01,839 --> 00:44:05,040
your system if

1202
00:44:03,119 --> 00:44:06,720
for example a problem was introduced you

1203
00:44:05,040 --> 00:44:07,440
can say all right this was using that

1204
00:44:06,720 --> 00:44:09,279
commit

1205
00:44:07,440 --> 00:44:11,200
whereas the previous generation the one

1206
00:44:09,280 --> 00:44:12,000
that worked was using this commit so i

1207
00:44:11,200 --> 00:44:15,200
can

1208
00:44:12,000 --> 00:44:17,520
yeah bisect the problem

1209
00:44:15,200 --> 00:44:20,078
um i think that's really nice i like

1210
00:44:17,520 --> 00:44:21,440
that feature

1211
00:44:20,079 --> 00:44:23,520
all right i think it's about time to

1212
00:44:21,440 --> 00:44:25,520
wrap up so

1213
00:44:23,520 --> 00:44:27,359
yeah there are actually many topics i

1214
00:44:25,520 --> 00:44:28,800
did not include in this talk i'm already

1215
00:44:27,359 --> 00:44:31,200
almost out of time

1216
00:44:28,800 --> 00:44:32,800
uh there are many things going on in

1217
00:44:31,200 --> 00:44:34,240
gigsland like there are many people

1218
00:44:32,800 --> 00:44:36,480
doing crazy things

1219
00:44:34,240 --> 00:44:37,598
so for example if you're into embedded

1220
00:44:36,480 --> 00:44:40,640
systems

1221
00:44:37,599 --> 00:44:42,800
you may be interested in going to the uh

1222
00:44:40,640 --> 00:44:43,520
distribution step room tomorrow at 11

1223
00:44:42,800 --> 00:44:46,319
a.m

1224
00:44:43,520 --> 00:44:47,040
right so i'm just giving you a great

1225
00:44:46,319 --> 00:44:50,319
program

1226
00:44:47,040 --> 00:44:52,000
in case you don't already have one so

1227
00:44:50,319 --> 00:44:53,599
yeah distributions theorem is going to

1228
00:44:52,000 --> 00:44:55,760
talk about cross compiling

1229
00:44:53,599 --> 00:44:57,440
a complete operating system with gigs so

1230
00:44:55,760 --> 00:45:00,319
that you can build an image

1231
00:44:57,440 --> 00:45:02,079
on a device for a specific embedded

1232
00:45:00,319 --> 00:45:04,000
device

1233
00:45:02,079 --> 00:45:05,200
i didn't really mention it much but

1234
00:45:04,000 --> 00:45:07,119
you've probably seen all these

1235
00:45:05,200 --> 00:45:09,040
parentheses and in fact

1236
00:45:07,119 --> 00:45:10,640
geeks relies heavily on embedded

1237
00:45:09,040 --> 00:45:13,920
domain-specific languages

1238
00:45:10,640 --> 00:45:17,118
in guide scheme and there's a lot to

1239
00:45:13,920 --> 00:45:18,480
talk about that and if you're into

1240
00:45:17,119 --> 00:45:20,160
you know if you want to learn about the

1241
00:45:18,480 --> 00:45:21,359
programming language technology that's

1242
00:45:20,160 --> 00:45:23,359
used behind that

1243
00:45:21,359 --> 00:45:25,520
and about guide there was a guide three

1244
00:45:23,359 --> 00:45:26,880
released just a couple of weeks ago

1245
00:45:25,520 --> 00:45:29,200
and it's great you need to learn about

1246
00:45:26,880 --> 00:45:33,440
it you should go to the minimalist

1247
00:45:29,200 --> 00:45:36,480
language dev room tomorrow at 11 30.

1248
00:45:33,440 --> 00:45:38,960
and last there's also ongoing work in

1249
00:45:36,480 --> 00:45:40,640
hpc and reproducible science

1250
00:45:38,960 --> 00:45:43,599
i'm going to give a lightning talk about

1251
00:45:40,640 --> 00:45:46,640
geeks jupiter notebook integration

1252
00:45:43,599 --> 00:45:48,400
tomorrow and is also going to give a

1253
00:45:46,640 --> 00:45:51,040
talk about the use of containers in

1254
00:45:48,400 --> 00:45:53,440
scientific workflows

1255
00:45:51,040 --> 00:45:54,240
all right so join us now share the

1256
00:45:53,440 --> 00:45:56,240
parents

1257
00:45:54,240 --> 00:45:57,839
i invite you to install the thing you

1258
00:45:56,240 --> 00:45:59,359
can actually install geeks on top of

1259
00:45:57,839 --> 00:46:01,759
your distribution

1260
00:45:59,359 --> 00:46:03,598
or you can choose to go for the the one

1261
00:46:01,760 --> 00:46:05,280
true way of installing gig system the

1262
00:46:03,599 --> 00:46:06,400
standalone distribution but you really

1263
00:46:05,280 --> 00:46:08,720
have the choice of

1264
00:46:06,400 --> 00:46:10,800
using geeks on your own distribution and

1265
00:46:08,720 --> 00:46:13,759
just an additional package manager

1266
00:46:10,800 --> 00:46:15,280
or going all the way to gig system and

1267
00:46:13,760 --> 00:46:17,920
you can hack it

1268
00:46:15,280 --> 00:46:18,400
and you can also join us we are offering

1269
00:46:17,920 --> 00:46:21,599
an

1270
00:46:18,400 --> 00:46:23,760
outreach interchange so if you want

1271
00:46:21,599 --> 00:46:25,359
to join us maybe now is a good time to

1272
00:46:23,760 --> 00:46:29,680
get into free software

1273
00:46:25,359 --> 00:46:32,880
to hack on on really nice things right

1274
00:46:29,680 --> 00:46:34,319
so just to sum up we have gigs it allows

1275
00:46:32,880 --> 00:46:36,160
you to do package management

1276
00:46:34,319 --> 00:46:38,800
environment management and virtual

1277
00:46:36,160 --> 00:46:39,279
length container provisioning with geeks

1278
00:46:38,800 --> 00:46:41,520
pack

1279
00:46:39,280 --> 00:46:42,319
and operating system provisioning with

1280
00:46:41,520 --> 00:46:45,280
kick system

1281
00:46:42,319 --> 00:46:45,279
and kicks deploy

1282
00:46:46,000 --> 00:46:52,640
the take away message here is that

1283
00:46:49,280 --> 00:46:53,119
we've all migrated over the last decade

1284
00:46:52,640 --> 00:46:55,520
maybe

1285
00:46:53,119 --> 00:46:57,680
to distributed version control systems

1286
00:46:55,520 --> 00:46:59,359
and we've learned to value

1287
00:46:57,680 --> 00:47:01,680
you know what it brings us in terms of

1288
00:46:59,359 --> 00:47:04,000
being able to have a

1289
00:47:01,680 --> 00:47:06,319
track record of how we change our source

1290
00:47:04,000 --> 00:47:09,599
code and being able to

1291
00:47:06,319 --> 00:47:10,400
you know to reference a specific point

1292
00:47:09,599 --> 00:47:12,400
of time of

1293
00:47:10,400 --> 00:47:14,800
our source code right we have commit ids

1294
00:47:12,400 --> 00:47:17,440
we can we can be very precise about

1295
00:47:14,800 --> 00:47:20,079
source code i think reproducible

1296
00:47:17,440 --> 00:47:21,599
deployment is a logical next step

1297
00:47:20,079 --> 00:47:24,480
and that's why i would encourage you to

1298
00:47:21,599 --> 00:47:27,360
look into that technology

1299
00:47:24,480 --> 00:47:30,479
this is it thank you

1300
00:47:27,360 --> 00:47:30,479
[Applause]

1301
00:47:36,960 --> 00:47:40,800
thank you ludovic for a great talk now

1302
00:47:39,119 --> 00:47:44,000
it's time for qa

1303
00:47:40,800 --> 00:47:47,200
uh please stay silent and

1304
00:47:44,000 --> 00:47:48,079
give the possibility only to ones who

1305
00:47:47,200 --> 00:47:51,200
are

1306
00:47:48,079 --> 00:47:54,480
asking questions and answering uh

1307
00:47:51,200 --> 00:47:54,480
yeah to talk

1308
00:47:56,720 --> 00:48:04,480
thanks for the talk uh firsthand um

1309
00:48:01,040 --> 00:48:05,200
i you you were mentioning reproducible

1310
00:48:04,480 --> 00:48:08,160
builds

1311
00:48:05,200 --> 00:48:09,680
and we're mentioning the reproducibles

1312
00:48:08,160 --> 00:48:12,720
in context of the

1313
00:48:09,680 --> 00:48:14,319
of the system of the whole of the whole

1314
00:48:12,720 --> 00:48:18,640
environment

1315
00:48:14,319 --> 00:48:21,040
um i do have to admit that

1316
00:48:18,640 --> 00:48:22,160
i don't really care about that part

1317
00:48:21,040 --> 00:48:24,558
because

1318
00:48:22,160 --> 00:48:25,359
when i care about reproducibility i care

1319
00:48:24,559 --> 00:48:28,559
about some

1320
00:48:25,359 --> 00:48:30,880
specific aspects of it where i have a

1321
00:48:28,559 --> 00:48:34,640
specific version that i need of that

1322
00:48:30,880 --> 00:48:37,920
but there are other how would you

1323
00:48:34,640 --> 00:48:40,558
uh how would you handle

1324
00:48:37,920 --> 00:48:41,520
uh things like libraries that i want to

1325
00:48:40,559 --> 00:48:44,240
have

1326
00:48:41,520 --> 00:48:45,040
updated and have like i know openssl

1327
00:48:44,240 --> 00:48:46,799
where i don't

1328
00:48:45,040 --> 00:48:49,119
care what version it is i want the

1329
00:48:46,800 --> 00:48:51,359
latest one

1330
00:48:49,119 --> 00:48:52,800
well so by default gigs would give you

1331
00:48:51,359 --> 00:48:54,240
the latest version of the package you

1332
00:48:52,800 --> 00:48:55,599
asked for that's the story

1333
00:48:54,240 --> 00:48:57,680
so it's like pretty much any package

1334
00:48:55,599 --> 00:48:59,920
manager in that respect you just

1335
00:48:57,680 --> 00:49:01,598
like with apps for example you would run

1336
00:48:59,920 --> 00:49:03,599
app get update and then app get

1337
00:49:01,599 --> 00:49:05,200
installed up in ssl and presumably you

1338
00:49:03,599 --> 00:49:06,800
get the latest version

1339
00:49:05,200 --> 00:49:08,640
and with gex you would just run gigs

1340
00:49:06,800 --> 00:49:10,079
pool and then geeks install up in ssl

1341
00:49:08,640 --> 00:49:11,359
and you get the latest version that

1342
00:49:10,079 --> 00:49:14,480
that's the story

1343
00:49:11,359 --> 00:49:14,480
does that answer your question

1344
00:49:15,040 --> 00:49:20,558
but then the reputability gets lost

1345
00:49:18,319 --> 00:49:22,319
no it it doesn't because every time you

1346
00:49:20,559 --> 00:49:24,319
you deploy software with geeks

1347
00:49:22,319 --> 00:49:25,359
you deploy it from a specific kicks

1348
00:49:24,319 --> 00:49:27,599
revision

1349
00:49:25,359 --> 00:49:28,880
and so you can link that revision to a

1350
00:49:27,599 --> 00:49:32,480
specific version

1351
00:49:28,880 --> 00:49:32,480
of openssl for example

1352
00:49:34,319 --> 00:49:38,480
um the question kind of relates to

1353
00:49:36,400 --> 00:49:39,440
docker file which you bashed for being

1354
00:49:38,480 --> 00:49:42,480
non-descriptive

1355
00:49:39,440 --> 00:49:45,119
right and the answer i guess was the

1356
00:49:42,480 --> 00:49:47,200
last command you presented describe

1357
00:49:45,119 --> 00:49:48,319
right or what it was geeks describe this

1358
00:49:47,200 --> 00:49:50,879
scenario

1359
00:49:48,319 --> 00:49:52,480
what is cool about docker file is that

1360
00:49:50,880 --> 00:49:55,040
you announce your intention

1361
00:49:52,480 --> 00:49:55,839
i want to install package blah and you

1362
00:49:55,040 --> 00:49:58,319
don't care about

1363
00:49:55,839 --> 00:49:58,960
what is the hundred dependencies right

1364
00:49:58,319 --> 00:50:01,279
when you

1365
00:49:58,960 --> 00:50:02,880
call to describe most likely you are

1366
00:50:01,280 --> 00:50:05,839
describing the whole

1367
00:50:02,880 --> 00:50:08,000
environment which will lose this kind of

1368
00:50:05,839 --> 00:50:10,720
intentional you know description

1369
00:50:08,000 --> 00:50:11,440
what do they want to achieve for this

1370
00:50:10,720 --> 00:50:14,240
environment

1371
00:50:11,440 --> 00:50:16,240
is there any work to kind of embed that

1372
00:50:14,240 --> 00:50:17,118
semantic which is somewhat inherited in

1373
00:50:16,240 --> 00:50:19,279
the

1374
00:50:17,119 --> 00:50:20,240
stages or what you call history of the

1375
00:50:19,280 --> 00:50:22,800
environment which

1376
00:50:20,240 --> 00:50:24,000
somewhat describes what it was made for

1377
00:50:22,800 --> 00:50:25,599
right so how do you

1378
00:50:24,000 --> 00:50:28,720
record what it is that you actually

1379
00:50:25,599 --> 00:50:28,720
wanted to deploy right

1380
00:50:29,040 --> 00:50:33,359
that's yeah so yeah there are really two

1381
00:50:31,920 --> 00:50:34,960
pieces of information here

1382
00:50:33,359 --> 00:50:36,480
so one is what you get with gigs

1383
00:50:34,960 --> 00:50:38,640
described which tells you which

1384
00:50:36,480 --> 00:50:40,480
kicks revision you're using and then

1385
00:50:38,640 --> 00:50:42,240
there is this manifest file where you

1386
00:50:40,480 --> 00:50:44,319
specify that you want

1387
00:50:42,240 --> 00:50:45,680
i don't know this package that package

1388
00:50:44,319 --> 00:50:48,800
available for you

1389
00:50:45,680 --> 00:50:50,160
and so i think the this manifest file

1390
00:50:48,800 --> 00:50:51,440
that described the packages that you

1391
00:50:50,160 --> 00:50:53,040
want to have installed is kind of

1392
00:50:51,440 --> 00:50:54,960
similar to what you would do in a docker

1393
00:50:53,040 --> 00:50:57,200
file when you say ab get installed full

1394
00:50:54,960 --> 00:50:58,640
upgrading soul bar this is where you say

1395
00:50:57,200 --> 00:51:01,919
what you want to have

1396
00:50:58,640 --> 00:51:03,680
deployed right yeah does that answer

1397
00:51:01,920 --> 00:51:08,400
your question

1398
00:51:03,680 --> 00:51:12,078
sort of um

1399
00:51:08,400 --> 00:51:13,040
yes no docker file forces docker users

1400
00:51:12,079 --> 00:51:15,599
to describe it

1401
00:51:13,040 --> 00:51:17,520
with gigs i could describe just by

1402
00:51:15,599 --> 00:51:18,079
running the commands and kind of losing

1403
00:51:17,520 --> 00:51:21,040
this

1404
00:51:18,079 --> 00:51:23,119
forceful description right oh by by

1405
00:51:21,040 --> 00:51:25,599
running geeks install you mean freeze

1406
00:51:23,119 --> 00:51:26,319
right so yeah so geek supports really

1407
00:51:25,599 --> 00:51:28,319
two modes of

1408
00:51:26,319 --> 00:51:30,640
operation so one of them is to use the

1409
00:51:28,319 --> 00:51:32,400
the manifest where you have to describe

1410
00:51:30,640 --> 00:51:34,480
everything right you have to describe

1411
00:51:32,400 --> 00:51:35,599
every package you want to deploy but it

1412
00:51:34,480 --> 00:51:38,400
also supports the

1413
00:51:35,599 --> 00:51:40,079
interactive glx install thing which is

1414
00:51:38,400 --> 00:51:42,079
more freestyle

1415
00:51:40,079 --> 00:51:43,359
i personally like it actually i think

1416
00:51:42,079 --> 00:51:46,079
it's good to have something that

1417
00:51:43,359 --> 00:51:48,078
resembles appgate install for example

1418
00:51:46,079 --> 00:51:49,119
but yeah i agree with you when you start

1419
00:51:48,079 --> 00:51:53,119
using it then you

1420
00:51:49,119 --> 00:51:55,200
kind of lose the the declarative way

1421
00:51:53,119 --> 00:51:57,520
and so people have been complaining

1422
00:51:55,200 --> 00:51:59,839
about it actually and there is

1423
00:51:57,520 --> 00:52:00,880
there are ongoing discussions that would

1424
00:51:59,839 --> 00:52:03,119
allow us

1425
00:52:00,880 --> 00:52:04,160
about tools that would allow us to

1426
00:52:03,119 --> 00:52:06,000
export

1427
00:52:04,160 --> 00:52:08,640
an existing profile with a set of

1428
00:52:06,000 --> 00:52:10,800
install packages to a manifest

1429
00:52:08,640 --> 00:52:11,839
that would be like the declarative thing

1430
00:52:10,800 --> 00:52:14,000
that i showed

1431
00:52:11,839 --> 00:52:15,759
so that you would have a bridge from the

1432
00:52:14,000 --> 00:52:16,960
you know the imperative approach where

1433
00:52:15,760 --> 00:52:20,000
you just type geeks install

1434
00:52:16,960 --> 00:52:21,440
full bar to the declarative thing that

1435
00:52:20,000 --> 00:52:23,920
file that says everything you want to

1436
00:52:21,440 --> 00:52:26,880
have installed

1437
00:52:23,920 --> 00:52:28,400
okay i i hope that you can move also

1438
00:52:26,880 --> 00:52:31,119
discussion somewhere online

1439
00:52:28,400 --> 00:52:33,839
because time is over uh thank you ludwig

1440
00:52:31,119 --> 00:52:33,839
again for this great

1441
00:52:40,040 --> 00:52:43,040
presentation

