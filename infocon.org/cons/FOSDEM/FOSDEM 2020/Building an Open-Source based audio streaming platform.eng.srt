1
00:00:05,200 --> 00:00:09,280
up next we have a maxine boujee

2
00:00:07,279 --> 00:00:10,639
and his presentation is building an open

3
00:00:09,280 --> 00:00:16,990
source based

4
00:00:10,639 --> 00:00:18,799
audio streaming platform

5
00:00:16,990 --> 00:00:22,080
[Applause]

6
00:00:18,800 --> 00:00:22,400
hello everyone like i said i'm maxim

7
00:00:22,080 --> 00:00:25,919
from

8
00:00:22,400 --> 00:00:28,840
radio france i'm part of the

9
00:00:25,920 --> 00:00:30,080
cloud and infrastructure team at radio

10
00:00:28,840 --> 00:00:32,800
france

11
00:00:30,080 --> 00:00:34,160
we asked many think we also website or

12
00:00:32,800 --> 00:00:37,280
podcast and no

13
00:00:34,160 --> 00:00:37,760
or streaming in this context we use a

14
00:00:37,280 --> 00:00:39,840
lot of

15
00:00:37,760 --> 00:00:41,360
pencil software like kubernetes

16
00:00:39,840 --> 00:00:44,719
terraform and

17
00:00:41,360 --> 00:00:47,680
etc and

18
00:00:44,719 --> 00:00:48,800
we made uh we chose to build a new

19
00:00:47,680 --> 00:00:52,879
streaming platform

20
00:00:48,800 --> 00:00:56,000
with uh with open source versus software

21
00:00:52,879 --> 00:00:59,039
so that which we see today

22
00:00:56,000 --> 00:00:59,520
so we stream audio we are a radio

23
00:00:59,039 --> 00:01:03,680
station

24
00:00:59,520 --> 00:01:06,880
we broadcast radio in france

25
00:01:03,680 --> 00:01:09,760
and we have a lot of radio

26
00:01:06,880 --> 00:01:10,479
we have seven brands uh six national

27
00:01:09,760 --> 00:01:13,119
channels

28
00:01:10,479 --> 00:01:14,000
we are broadcasting everywhere in france

29
00:01:13,119 --> 00:01:17,040
47

30
00:01:14,000 --> 00:01:20,400
local channels mostly france blue

31
00:01:17,040 --> 00:01:23,360
sorry and 23

32
00:01:20,400 --> 00:01:25,759
music web radio which are broadcast only

33
00:01:23,360 --> 00:01:28,880
on the internet

34
00:01:25,759 --> 00:01:30,560
we have a lot of listener about 2

35
00:01:28,880 --> 00:01:32,880
million listener a day

36
00:01:30,560 --> 00:01:33,920
you can see here a graph with the peak

37
00:01:32,880 --> 00:01:38,839
in the morning

38
00:01:33,920 --> 00:01:41,759
where we get 200 friends on simultaneous

39
00:01:38,840 --> 00:01:45,759
listeners so we need to stream

40
00:01:41,759 --> 00:01:49,040
this um

41
00:01:45,759 --> 00:01:52,479
before we built the platform the

42
00:01:49,040 --> 00:01:54,479
audio were processed in the in the home

43
00:01:52,479 --> 00:01:57,920
of radio france

44
00:01:54,479 --> 00:01:59,600
send it to the third party with kind of

45
00:01:57,920 --> 00:02:02,719
a black box

46
00:01:59,600 --> 00:02:05,199
for us and stream by s cast drawer

47
00:02:02,719 --> 00:02:08,000
listener

48
00:02:05,200 --> 00:02:10,800
so we were not really satisfied with the

49
00:02:08,000 --> 00:02:13,440
service provided and wanted to modernize

50
00:02:10,800 --> 00:02:14,959
the streaming platform and make it our

51
00:02:13,440 --> 00:02:16,959
own

52
00:02:14,959 --> 00:02:18,160
the first thing was to put a put it in

53
00:02:16,959 --> 00:02:20,560
the cloud why

54
00:02:18,160 --> 00:02:23,359
because the rest of our technical stock

55
00:02:20,560 --> 00:02:26,800
is already there

56
00:02:23,360 --> 00:02:29,360
and we wanted to stream hls in price of

57
00:02:26,800 --> 00:02:29,360
ice casts

58
00:02:30,160 --> 00:02:36,400
so just to be clear about ice cast and

59
00:02:33,360 --> 00:02:39,440
hls so two streaming formats

60
00:02:36,400 --> 00:02:42,319
uh ask streaming server is it

61
00:02:39,440 --> 00:02:44,720
it was a historical way of streaming

62
00:02:42,319 --> 00:02:44,720
radio

63
00:02:44,879 --> 00:02:48,640
it works by the client connect to a

64
00:02:47,200 --> 00:02:52,000
single bit rate

65
00:02:48,640 --> 00:02:55,359
and the server push in audio

66
00:02:52,000 --> 00:02:58,000
over long tcp connections

67
00:02:55,360 --> 00:02:59,599
you cannot cache it and you cannot

68
00:02:58,000 --> 00:03:01,120
change bitrate

69
00:02:59,599 --> 00:03:04,560
on the fly you have to disconnect and

70
00:03:01,120 --> 00:03:07,920
reconnect the listener

71
00:03:04,560 --> 00:03:11,519
in hs we

72
00:03:07,920 --> 00:03:15,679
the principle is to chunk the audio

73
00:03:11,519 --> 00:03:17,760
into small parts and we have a sliding

74
00:03:15,680 --> 00:03:19,120
playlist that tells the client which

75
00:03:17,760 --> 00:03:21,518
file to download

76
00:03:19,120 --> 00:03:23,280
and you know what which order to play

77
00:03:21,519 --> 00:03:25,599
them

78
00:03:23,280 --> 00:03:26,959
in https we can have an adaptative bit

79
00:03:25,599 --> 00:03:30,000
rate

80
00:03:26,959 --> 00:03:33,280
that means the client can

81
00:03:30,000 --> 00:03:33,840
start with a low bit rate and change it

82
00:03:33,280 --> 00:03:37,519
without

83
00:03:33,840 --> 00:03:38,239
disconnecting so it's to provide a way

84
00:03:37,519 --> 00:03:40,239
better

85
00:03:38,239 --> 00:03:42,480
mobile experiences especially in

86
00:03:40,239 --> 00:03:46,400
transport

87
00:03:42,480 --> 00:03:48,720
and one of the the most uh

88
00:03:46,400 --> 00:03:50,720
the most important thing for us it's

89
00:03:48,720 --> 00:03:54,159
it's schedule

90
00:03:50,720 --> 00:03:56,959
call it's just static files so we have

91
00:03:54,159 --> 00:04:01,280
audio files and place files but it's not

92
00:03:56,959 --> 00:04:03,920
a stream it's files

93
00:04:01,280 --> 00:04:05,360
so how do you how do we build our

94
00:04:03,920 --> 00:04:07,679
platform

95
00:04:05,360 --> 00:04:08,720
the first thing was to transport the

96
00:04:07,680 --> 00:04:10,319
audio from

97
00:04:08,720 --> 00:04:12,640
the room of radio france where it's

98
00:04:10,319 --> 00:04:16,000
produced to the cloud

99
00:04:12,640 --> 00:04:19,358
we're an aws so

100
00:04:16,000 --> 00:04:21,759
we get to transport there next we'll see

101
00:04:19,358 --> 00:04:22,560
how to produce the two so to format

102
00:04:21,759 --> 00:04:26,160
icecast and

103
00:04:22,560 --> 00:04:29,199
hls then on to deliver

104
00:04:26,160 --> 00:04:32,240
the content to listener okay

105
00:04:29,199 --> 00:04:35,280
as i said we have a lot of listener

106
00:04:32,240 --> 00:04:38,000
and finally we'll see how to monitor the

107
00:04:35,280 --> 00:04:42,719
platform like any system in production

108
00:04:38,000 --> 00:04:45,919
we need to monitor it and operate it

109
00:04:42,720 --> 00:04:48,400
so first part uh how to get the audio to

110
00:04:45,919 --> 00:04:48,400
the cloud

111
00:04:48,479 --> 00:04:53,280
at radio france the audio is produced in

112
00:04:51,759 --> 00:04:56,720
several ways

113
00:04:53,280 --> 00:04:57,840
the national and local and you each have

114
00:04:56,720 --> 00:05:01,440
this own way of

115
00:04:57,840 --> 00:05:05,198
producing gojo but at the end

116
00:05:01,440 --> 00:05:07,440
all the sergio is impacted

117
00:05:05,199 --> 00:05:09,520
in the multicast network of the arm of

118
00:05:07,440 --> 00:05:12,000
radio france

119
00:05:09,520 --> 00:05:13,120
so the first thing we did was to create

120
00:05:12,000 --> 00:05:15,680
a direct connect

121
00:05:13,120 --> 00:05:17,840
which is a dedicated link between the

122
00:05:15,680 --> 00:05:21,039
home of radio france and the cloud

123
00:05:17,840 --> 00:05:24,799
so as fiber

124
00:05:21,039 --> 00:05:29,120
but how do we transport multicast

125
00:05:24,800 --> 00:05:32,400
into aws there is a problem here

126
00:05:29,120 --> 00:05:36,880
there are no multicast in aws

127
00:05:32,400 --> 00:05:40,560
like in any other major cloud provider

128
00:05:36,880 --> 00:05:42,880
so here we come acrt

129
00:05:40,560 --> 00:05:44,080
if you saw the previous talk we'll talk

130
00:05:42,880 --> 00:05:47,840
about that

131
00:05:44,080 --> 00:05:52,080
um there's the free party hdrt

132
00:05:47,840 --> 00:05:55,198
secure because it can encrypt the stream

133
00:05:52,080 --> 00:05:58,639
valuable because it can't retransmit

134
00:05:55,199 --> 00:06:00,000
pacquiao and so we can prevent packet

135
00:05:58,639 --> 00:06:03,120
loss

136
00:06:00,000 --> 00:06:05,360
and transport to dynamically adapt the

137
00:06:03,120 --> 00:06:09,280
transport

138
00:06:05,360 --> 00:06:11,360
with the network perturbation so

139
00:06:09,280 --> 00:06:13,039
the main advantage for us that you can

140
00:06:11,360 --> 00:06:16,160
take multicast stream

141
00:06:13,039 --> 00:06:18,960
and transform into new unicast stream

142
00:06:16,160 --> 00:06:19,759
came to the cloud in a valuable manner

143
00:06:18,960 --> 00:06:22,638
because

144
00:06:19,759 --> 00:06:24,560
we will traverse many firewalls and many

145
00:06:22,639 --> 00:06:27,360
networks between the home of radio

146
00:06:24,560 --> 00:06:27,360
france and the cloud

147
00:06:27,520 --> 00:06:32,960
so we have srt here so

148
00:06:30,639 --> 00:06:34,880
with the thing we did it just put two

149
00:06:32,960 --> 00:06:37,359
servers in the home of radio forms in

150
00:06:34,880 --> 00:06:39,360
their data center

151
00:06:37,360 --> 00:06:40,400
and take that that takes the multicast

152
00:06:39,360 --> 00:06:43,440
stream and

153
00:06:40,400 --> 00:06:45,840
transform it in srt and and send it into

154
00:06:43,440 --> 00:06:45,840
the cloud

155
00:06:47,360 --> 00:06:52,000
but we want to transport the stream in a

156
00:06:49,919 --> 00:06:54,080
resilient way

157
00:06:52,000 --> 00:06:55,680
a lot of things in this arc is about

158
00:06:54,080 --> 00:07:00,159
resiliency

159
00:06:55,680 --> 00:07:02,400
and each uh each radio channel

160
00:07:00,160 --> 00:07:06,080
have two sources at the end of reference

161
00:07:02,400 --> 00:07:08,318
that we would call here main and backup

162
00:07:06,080 --> 00:07:11,599
and we have a third source which uh i

163
00:07:08,319 --> 00:07:14,960
started at satellite backup

164
00:07:11,599 --> 00:07:18,319
which i'm not gonna talk a lot about it

165
00:07:14,960 --> 00:07:21,840
because it's done by the third party

166
00:07:18,319 --> 00:07:24,000
but the principle is we have or two

167
00:07:21,840 --> 00:07:26,000
two servers in the room of radio france

168
00:07:24,000 --> 00:07:29,120
which each takes the two

169
00:07:26,000 --> 00:07:31,199
source of each radio and we create a

170
00:07:29,120 --> 00:07:34,639
full match interconnection between

171
00:07:31,199 --> 00:07:37,759
two srt listeners in the cloud

172
00:07:34,639 --> 00:07:38,400
so at the end for each radio channel we

173
00:07:37,759 --> 00:07:41,520
get five

174
00:07:38,400 --> 00:07:44,400
inputs yeah this is

175
00:07:41,520 --> 00:07:47,198
the the two listener i agree exactly the

176
00:07:44,400 --> 00:07:47,198
same at the end

177
00:07:49,440 --> 00:07:55,919
okay great so we now have a way to

178
00:07:52,080 --> 00:07:55,919
transport the sun into the cloud

179
00:07:57,039 --> 00:08:03,360
but now we have two products the stream

180
00:08:00,800 --> 00:08:06,879
the stream format so the goal is still

181
00:08:03,360 --> 00:08:08,800
to produce ice cast and hls

182
00:08:06,879 --> 00:08:11,199
uh if you saw the previous start you

183
00:08:08,800 --> 00:08:15,039
know the software to do this

184
00:08:11,199 --> 00:08:18,960
exists so we choose lick itself

185
00:08:15,039 --> 00:08:23,199
for those who don't know look it's up is

186
00:08:18,960 --> 00:08:25,758
is an audio and video streaming language

187
00:08:23,199 --> 00:08:26,720
that you can take some input and create

188
00:08:25,759 --> 00:08:29,759
output

189
00:08:26,720 --> 00:08:31,360
with some control on it we decided to

190
00:08:29,759 --> 00:08:34,399
collaborate

191
00:08:31,360 --> 00:08:38,320
at with the liquid sub team on this

192
00:08:34,399 --> 00:08:41,279
to adapt it to your needs so we use it

193
00:08:38,320 --> 00:08:42,719
for several parts of the of the chain so

194
00:08:41,279 --> 00:08:45,920
you can re-save

195
00:08:42,719 --> 00:08:50,480
sr test stream so

196
00:08:45,920 --> 00:08:53,360
the srt input will create srt listener

197
00:08:50,480 --> 00:08:54,000
we use it then to transcode the through

198
00:08:53,360 --> 00:08:57,839
the

199
00:08:54,000 --> 00:08:58,560
stream in the format we want so hls and

200
00:08:57,839 --> 00:09:02,720
ice cast

201
00:08:58,560 --> 00:09:05,839
in multiple format aac and mp3

202
00:09:02,720 --> 00:09:08,480
and also you use it to

203
00:09:05,839 --> 00:09:11,040
to control the stream we have a need to

204
00:09:08,480 --> 00:09:13,040
switch between sources

205
00:09:11,040 --> 00:09:14,640
as i said there are the main the main

206
00:09:13,040 --> 00:09:17,920
sources and the backup

207
00:09:14,640 --> 00:09:19,519
sources and the satellites

208
00:09:17,920 --> 00:09:22,000
so we need the mechanism to switch

209
00:09:19,519 --> 00:09:24,160
between sources

210
00:09:22,000 --> 00:09:26,320
we need the fallback logic because uh

211
00:09:24,160 --> 00:09:29,279
the source can't fail

212
00:09:26,320 --> 00:09:30,720
and we need to monitor it so we usually

213
00:09:29,279 --> 00:09:33,600
look it's up to expose metric

214
00:09:30,720 --> 00:09:34,480
about what we are streaming now and

215
00:09:33,600 --> 00:09:37,839
which input

216
00:09:34,480 --> 00:09:37,839
is up or down

217
00:09:38,880 --> 00:09:45,680
so we did put liquid soap on a server

218
00:09:42,959 --> 00:09:47,040
that i i will call transcoder from now

219
00:09:45,680 --> 00:09:51,040
it's bad naming but

220
00:09:47,040 --> 00:09:53,599
it's not important we put two transcoder

221
00:09:51,040 --> 00:09:53,599
in the cloud

222
00:09:54,320 --> 00:09:58,000
what are there in a transcoder there's

223
00:09:56,959 --> 00:10:00,000
liquid stop

224
00:09:58,000 --> 00:10:01,839
which reserves the five inputs we talked

225
00:10:00,000 --> 00:10:05,360
before

226
00:10:01,839 --> 00:10:08,720
the instances of ice the ice cast server

227
00:10:05,360 --> 00:10:11,680
that we recall there a nice cast master

228
00:10:08,720 --> 00:10:13,040
because here we have the the master

229
00:10:11,680 --> 00:10:16,399
stream that we will really

230
00:10:13,040 --> 00:10:18,880
relay after that and we create

231
00:10:16,399 --> 00:10:19,839
actually files as i said hls is just

232
00:10:18,880 --> 00:10:22,560
files

233
00:10:19,839 --> 00:10:23,519
so we can use a web server like nginx or

234
00:10:22,560 --> 00:10:27,279
any other

235
00:10:23,519 --> 00:10:27,279
to serve static content

236
00:10:28,079 --> 00:10:33,839
let's zoom in and see what ticket sub

237
00:10:30,399 --> 00:10:37,200
does internally

238
00:10:33,839 --> 00:10:39,519
here we define inputs we

239
00:10:37,200 --> 00:10:41,120
we have the the five input we talked

240
00:10:39,519 --> 00:10:44,480
before the main

241
00:10:41,120 --> 00:10:47,440
from the two srt color

242
00:10:44,480 --> 00:10:48,079
main color one main color ii and the

243
00:10:47,440 --> 00:10:50,800
backup

244
00:10:48,079 --> 00:10:51,920
and the satellite uh i will not talk

245
00:10:50,800 --> 00:10:56,160
about the override

246
00:10:51,920 --> 00:10:58,880
that's just uh for us internally

247
00:10:56,160 --> 00:11:00,560
and we all these sources are valid

248
00:10:58,880 --> 00:11:03,600
variable

249
00:11:00,560 --> 00:11:03,599
they all can file

250
00:11:04,160 --> 00:11:07,760
and we create another source that is a

251
00:11:06,560 --> 00:11:10,959
safe blank

252
00:11:07,760 --> 00:11:13,120
that will serve us if everything else

253
00:11:10,959 --> 00:11:14,079
has failed we will switch to blank

254
00:11:13,120 --> 00:11:18,399
because it's better

255
00:11:14,079 --> 00:11:18,399
to broadcast blank than nothing

256
00:11:20,079 --> 00:11:27,040
next when we need the logic to switch

257
00:11:23,680 --> 00:11:28,239
between sources so we'll use a native or

258
00:11:27,040 --> 00:11:31,920
liquid sub function

259
00:11:28,240 --> 00:11:35,440
with a switch and a function

260
00:11:31,920 --> 00:11:35,439
is playing which is a boolean

261
00:11:35,519 --> 00:11:41,040
we just tell does this source has to

262
00:11:39,440 --> 00:11:43,519
play

263
00:11:41,040 --> 00:11:46,399
when only one of them can be true at the

264
00:11:43,519 --> 00:11:46,399
time at a time

265
00:11:48,560 --> 00:11:51,920
next we need fallback logic so what

266
00:11:51,440 --> 00:11:55,760
happens

267
00:11:51,920 --> 00:11:59,839
if the the source i want to play

268
00:11:55,760 --> 00:12:02,319
is not is down so

269
00:11:59,839 --> 00:12:03,519
uh i use the fallback operator of flick

270
00:12:02,320 --> 00:12:06,079
itself

271
00:12:03,519 --> 00:12:06,720
because i take at the first the live

272
00:12:06,079 --> 00:12:09,760
source

273
00:12:06,720 --> 00:12:12,880
the the source we want to play before

274
00:12:09,760 --> 00:12:15,839
but if that's not ever available

275
00:12:12,880 --> 00:12:17,519
we will the fallback operator will take

276
00:12:15,839 --> 00:12:19,839
the list in order

277
00:12:17,519 --> 00:12:21,120
and at the end we have the safe branch

278
00:12:19,839 --> 00:12:25,839
without before

279
00:12:21,120 --> 00:12:25,839
so this never failed

280
00:12:25,920 --> 00:12:29,760
and now with that we have stores that

281
00:12:28,959 --> 00:12:33,040
never fail

282
00:12:29,760 --> 00:12:33,040
we can would put it

283
00:12:33,440 --> 00:12:40,560
again we use a classical liquid

284
00:12:37,440 --> 00:12:43,440
is output that's file.

285
00:12:40,560 --> 00:12:44,160
uh it takes some parameter like the

286
00:12:43,440 --> 00:12:47,200
segment

287
00:12:44,160 --> 00:12:53,839
duration like it's

288
00:12:47,200 --> 00:12:53,839
the size of the the chunk of audio

289
00:12:54,160 --> 00:12:58,000
and the source we created before

290
00:12:59,760 --> 00:13:06,240
here i i create a source that i have two

291
00:13:03,120 --> 00:13:11,600
and two quality midfield and hi-fi

292
00:13:06,240 --> 00:13:15,279
hi i use ffmpeg to encode them

293
00:13:11,600 --> 00:13:17,760
with lib fdk asa

294
00:13:15,279 --> 00:13:18,560
and mix them in impact ts because it's

295
00:13:17,760 --> 00:13:21,439
the

296
00:13:18,560 --> 00:13:23,760
most supported former in hls for the

297
00:13:21,440 --> 00:13:23,760
client

298
00:13:25,839 --> 00:13:29,680
as a romantic preferred in the institute

299
00:13:28,320 --> 00:13:33,040
the illegal shop

300
00:13:29,680 --> 00:13:35,439
use a lot of call back and

301
00:13:33,040 --> 00:13:36,399
we make a use of them for example

302
00:13:35,440 --> 00:13:39,360
unfailed change

303
00:13:36,399 --> 00:13:40,639
is a function where which is called

304
00:13:39,360 --> 00:13:44,079
every time a segment

305
00:13:40,639 --> 00:13:44,079
a chellah segment is created

306
00:13:45,600 --> 00:13:49,760
we use them to upload to upload segment

307
00:13:48,240 --> 00:13:52,320
to cdn for example

308
00:13:49,760 --> 00:13:54,240
but you can do every everything you want

309
00:13:52,320 --> 00:13:58,000
with the file

310
00:13:54,240 --> 00:14:00,079
and we use a segment name to create

311
00:13:58,000 --> 00:14:01,120
the file name of the segment with

312
00:14:00,079 --> 00:14:05,920
timestamp

313
00:14:01,120 --> 00:14:05,920
and the position of the of the segment

314
00:14:07,279 --> 00:14:10,639
next we would put two ice casts which is

315
00:14:10,160 --> 00:14:13,199
much

316
00:14:10,639 --> 00:14:13,199
simpler

317
00:14:13,760 --> 00:14:17,760
we would put it in localhost because

318
00:14:16,720 --> 00:14:21,199
icecast master

319
00:14:17,760 --> 00:14:21,199
is on the transcoder

320
00:14:21,279 --> 00:14:27,439
again we use an encoder to

321
00:14:24,399 --> 00:14:29,920
to make the aac stream

322
00:14:27,440 --> 00:14:30,720
and still with the same with the same

323
00:14:29,920 --> 00:14:34,639
sources

324
00:14:30,720 --> 00:14:34,639
which is uh which never failed

325
00:14:36,160 --> 00:14:42,399
okay so now we don't know

326
00:14:39,760 --> 00:14:43,600
have the two stream as cast and hls

327
00:14:42,399 --> 00:14:47,040
files

328
00:14:43,600 --> 00:14:51,680
hash this is playlist

329
00:14:47,040 --> 00:14:55,199
and segmented audio

330
00:14:51,680 --> 00:14:56,239
and we needed to deliver that to your

331
00:14:55,199 --> 00:14:59,439
user

332
00:14:56,240 --> 00:15:02,480
so so to scale it

333
00:14:59,440 --> 00:15:05,600
uh we can start by asking

334
00:15:02,480 --> 00:15:10,160
ice casts well

335
00:15:05,600 --> 00:15:10,160
or two ice cast master here there

336
00:15:10,480 --> 00:15:14,079
ice cast is the classical master and

337
00:15:12,639 --> 00:15:17,040
relay architecture

338
00:15:14,079 --> 00:15:17,760
so we just put a bunch of ice cast relay

339
00:15:17,040 --> 00:15:20,319
that

340
00:15:17,760 --> 00:15:23,600
in each ice case relay will relay all

341
00:15:20,320 --> 00:15:27,680
the stream of the sketch master

342
00:15:23,600 --> 00:15:28,240
ice cast does have uh a functionality to

343
00:15:27,680 --> 00:15:32,479
switch

344
00:15:28,240 --> 00:15:32,480
between sources if one fail

345
00:15:32,560 --> 00:15:36,638
and in front of them we just put a lot

346
00:15:35,360 --> 00:15:40,160
balancer

347
00:15:36,639 --> 00:15:43,120
in the cloud

348
00:15:40,160 --> 00:15:43,519
there is no cache here and we can't auto

349
00:15:43,120 --> 00:15:46,079
scale

350
00:15:43,519 --> 00:15:47,519
ice casts because if you scale down with

351
00:15:46,079 --> 00:15:51,199
vice cast

352
00:15:47,519 --> 00:15:52,959
as it's a connected protocol

353
00:15:51,199 --> 00:15:55,680
when you scale down we will disconnect

354
00:15:52,959 --> 00:15:57,839
all your clients

355
00:15:55,680 --> 00:15:59,680
but we have an automatic fallback

356
00:15:57,839 --> 00:16:02,800
between the two

357
00:15:59,680 --> 00:16:02,800
the two ice cast master

358
00:16:03,440 --> 00:16:11,519
to scale hls is much simpler

359
00:16:08,720 --> 00:16:13,519
uh it's almost the same architecture

360
00:16:11,519 --> 00:16:16,720
that you have the true transcoder

361
00:16:13,519 --> 00:16:18,480
but at least you can cache static

362
00:16:16,720 --> 00:16:21,199
content

363
00:16:18,480 --> 00:16:22,959
so the cache layer is actually is

364
00:16:21,199 --> 00:16:24,959
scalable

365
00:16:22,959 --> 00:16:26,399
you can if this is an example arch

366
00:16:24,959 --> 00:16:29,518
architecture it's not

367
00:16:26,399 --> 00:16:30,240
exactly what we use but you can ask the

368
00:16:29,519 --> 00:16:32,720
cache layer

369
00:16:30,240 --> 00:16:34,079
anywhere anywhere you want like in

370
00:16:32,720 --> 00:16:38,079
kubernetes or

371
00:16:34,079 --> 00:16:41,199
in an instance groups with auto scaling

372
00:16:38,079 --> 00:16:42,959
and to make the fallback we between the

373
00:16:41,199 --> 00:16:46,079
two transcoder

374
00:16:42,959 --> 00:16:50,959
you can do this at the cdn level

375
00:16:46,079 --> 00:16:55,279
most cdn provide this

376
00:16:50,959 --> 00:16:59,518
no so so the main advantage for us

377
00:16:55,279 --> 00:17:02,639
hls is it's operates just like a website

378
00:16:59,519 --> 00:17:05,839
and not like a stream

379
00:17:02,639 --> 00:17:09,199
so let's see how we operate uh

380
00:17:05,839 --> 00:17:11,918
this three uh

381
00:17:09,199 --> 00:17:12,880
as i said on the transcoder we have a

382
00:17:11,919 --> 00:17:15,520
liquid stop but

383
00:17:12,880 --> 00:17:18,799
we do not just not have one nicket stop

384
00:17:15,520 --> 00:17:20,959
we have one liquid support channel

385
00:17:18,799 --> 00:17:23,119
so we needed a way to automatic

386
00:17:20,959 --> 00:17:25,919
installation of this

387
00:17:23,119 --> 00:17:28,639
the answer is a ansible we didn't

388
00:17:25,919 --> 00:17:31,520
reinvent the weld

389
00:17:28,640 --> 00:17:32,799
we created a dictionary with all radio

390
00:17:31,520 --> 00:17:36,000
channels

391
00:17:32,799 --> 00:17:39,120
it's a input and output

392
00:17:36,000 --> 00:17:42,720
the scrt portal and everything

393
00:17:39,120 --> 00:17:45,520
so with this dictionary

394
00:17:42,720 --> 00:17:46,320
we create all the configuration needed

395
00:17:45,520 --> 00:17:49,840
so

396
00:17:46,320 --> 00:17:50,559
each each channel has its own srt color

397
00:17:49,840 --> 00:17:53,678
as it on

398
00:17:50,559 --> 00:17:57,200
liquid subscripts and ice ice ice cast

399
00:17:53,679 --> 00:17:57,200
master and relay configuration

400
00:17:57,280 --> 00:18:03,918
and next we need to collect metrics

401
00:18:00,559 --> 00:18:07,520
so again it's pretty classical

402
00:18:03,919 --> 00:18:11,280
we use prometheus in the uh

403
00:18:07,520 --> 00:18:11,600
in all technical stack for your website

404
00:18:11,280 --> 00:18:14,639
and

405
00:18:11,600 --> 00:18:16,959
externa in kubernetes and graphina to

406
00:18:14,640 --> 00:18:19,840
visualize

407
00:18:16,960 --> 00:18:21,039
in this platform we menu use three

408
00:18:19,840 --> 00:18:24,000
sources of

409
00:18:21,039 --> 00:18:24,580
three sources of metrics not exporter

410
00:18:24,000 --> 00:18:25,840
for the

411
00:18:24,580 --> 00:18:28,559
[Music]

412
00:18:25,840 --> 00:18:30,559
metric at the server level like cpu and

413
00:18:28,559 --> 00:18:33,120
our enrollment

414
00:18:30,559 --> 00:18:35,760
liquid sub can actually expose

415
00:18:33,120 --> 00:18:39,280
promoter's metric now

416
00:18:35,760 --> 00:18:41,120
and ice cast exposes their own metric

417
00:18:39,280 --> 00:18:43,360
too

418
00:18:41,120 --> 00:18:44,719
so what do we get is an example

419
00:18:43,360 --> 00:18:47,360
dashboard of

420
00:18:44,720 --> 00:18:48,559
the internal of liquid shops we can see

421
00:18:47,360 --> 00:18:51,360
that all the sources

422
00:18:48,559 --> 00:18:52,399
are available they're the main color one

423
00:18:51,360 --> 00:18:55,439
is playing

424
00:18:52,400 --> 00:18:59,600
there is no blank output

425
00:18:55,440 --> 00:18:59,600
and this is an history of the stream

426
00:19:01,280 --> 00:19:05,440
in the stream platform one other

427
00:19:03,200 --> 00:19:07,440
important need is to know

428
00:19:05,440 --> 00:19:08,640
how many how many listeners are there

429
00:19:07,440 --> 00:19:13,760
now

430
00:19:08,640 --> 00:19:13,760
and for icecast it's easy

431
00:19:14,160 --> 00:19:19,120
it's a connected protocol so the server

432
00:19:16,400 --> 00:19:22,880
know how many clients are there

433
00:19:19,120 --> 00:19:25,439
yeah so we can just crop metric from the

434
00:19:22,880 --> 00:19:26,960
from icecast and we we know how many

435
00:19:25,440 --> 00:19:29,200
listers we have

436
00:19:26,960 --> 00:19:31,039
but for hls it's more complicated

437
00:19:29,200 --> 00:19:33,200
because the only information we get is

438
00:19:31,039 --> 00:19:36,320
success slog

439
00:19:33,200 --> 00:19:40,080
so we need we need to work with the cdn

440
00:19:36,320 --> 00:19:43,439
and to put

441
00:19:40,080 --> 00:19:44,879
the logs to us and we had to build the

442
00:19:43,440 --> 00:19:47,360
custom login gesture

443
00:19:44,880 --> 00:19:48,320
for this that creates promoters metric

444
00:19:47,360 --> 00:19:51,039
and tell us

445
00:19:48,320 --> 00:19:53,840
an estimation of how many listeners

446
00:19:51,039 --> 00:19:53,840
there is

447
00:19:54,400 --> 00:19:59,360
at the end at the end we have a

448
00:19:56,799 --> 00:20:03,440
dashboard like this so we can see

449
00:19:59,360 --> 00:20:04,879
we we have about 50 50 hls a nice cast

450
00:20:03,440 --> 00:20:08,159
listener

451
00:20:04,880 --> 00:20:12,880
this is a pattern on one week of

452
00:20:08,159 --> 00:20:12,880
of radio with the peak in the morning

453
00:20:13,039 --> 00:20:18,720
and now the platform is pretty complete

454
00:20:16,720 --> 00:20:20,640
so if you want to learn more you can

455
00:20:18,720 --> 00:20:23,840
check out my personal project which

456
00:20:20,640 --> 00:20:27,440
is an example of the liquid soft script

457
00:20:23,840 --> 00:20:30,480
views at radio france

458
00:20:27,440 --> 00:20:33,840
check out the srt github

459
00:20:30,480 --> 00:20:36,320
and the liquid website i

460
00:20:33,840 --> 00:20:37,520
would like to take a special thanks to

461
00:20:36,320 --> 00:20:41,678
the liquid soft

462
00:20:37,520 --> 00:20:49,840
teams roma and and samuel here

463
00:20:41,679 --> 00:20:49,840
thanks you for your attention

464
00:20:54,440 --> 00:21:00,840
questions

465
00:20:56,660 --> 00:21:03,840
[Music]

466
00:21:00,840 --> 00:21:03,840
uh

467
00:21:12,000 --> 00:21:17,440
question here uh i will start with how

468
00:21:14,960 --> 00:21:20,480
do you feed the satellite into the cloud

469
00:21:17,440 --> 00:21:22,480
with srt the third party provide us with

470
00:21:20,480 --> 00:21:25,600
an airstarted stream

471
00:21:22,480 --> 00:21:29,120
and we just use like

472
00:21:25,600 --> 00:21:31,840
another stream and although the failover

473
00:21:29,120 --> 00:21:31,840
mechanisms works

474
00:21:31,919 --> 00:21:39,280
it was in the fallback slide

475
00:21:35,360 --> 00:21:39,918
so liquid sub actually detect if there

476
00:21:39,280 --> 00:21:42,960
is

477
00:21:39,919 --> 00:21:43,600
any content to stream and if there are

478
00:21:42,960 --> 00:21:46,640
no

479
00:21:43,600 --> 00:21:59,840
no content he go back to to

480
00:21:46,640 --> 00:21:59,840
switch to another sources

481
00:22:01,440 --> 00:22:08,559
yeah this is the fallback mechanism

482
00:22:05,280 --> 00:22:11,600
if those if one sources is unavailable

483
00:22:08,559 --> 00:22:13,360
switch to the next one

484
00:22:11,600 --> 00:22:15,760
next question have you tested the audio

485
00:22:13,360 --> 00:22:15,760
quality

486
00:22:21,360 --> 00:22:23,918
not really

487
00:22:24,480 --> 00:22:27,679
yes but not in the details and we don't

488
00:22:26,799 --> 00:22:32,400
know if

489
00:22:27,679 --> 00:22:34,320
it's better than a fdk aic or not

490
00:22:32,400 --> 00:22:37,840
you showed your own cdn but you still

491
00:22:34,320 --> 00:22:37,840
use akamai at the same time

492
00:22:39,280 --> 00:22:42,399
it wasn't really clear because we are

493
00:22:41,440 --> 00:22:45,919
not on

494
00:22:42,400 --> 00:22:49,679
cdn we we do use akamai because it's

495
00:22:45,919 --> 00:22:52,640
uh it's public contracts and uh

496
00:22:49,679 --> 00:22:53,840
so we have to use it is just cheaper

497
00:22:52,640 --> 00:22:57,440
that

498
00:22:53,840 --> 00:22:57,439
that plain aws

499
00:23:02,240 --> 00:23:04,960
probably not

500
00:23:06,799 --> 00:23:10,400
probably not because uh you know you

501
00:23:09,679 --> 00:23:13,760
have to

502
00:23:10,400 --> 00:23:15,280
uh have one liquid soap per listener if

503
00:23:13,760 --> 00:23:19,360
you want to personalize

504
00:23:15,280 --> 00:23:23,760
it so kind of difficult

505
00:23:19,360 --> 00:23:25,280
and so i for hls you will create a lot

506
00:23:23,760 --> 00:23:27,840
of files because each

507
00:23:25,280 --> 00:23:28,799
uh each listener will have this the its

508
00:23:27,840 --> 00:23:32,879
own failed

509
00:23:28,799 --> 00:23:36,639
files why didn't you offer a dash stream

510
00:23:32,880 --> 00:23:38,450
uh because we don't know we don't need

511
00:23:36,640 --> 00:23:40,320
to uh from there

512
00:23:38,450 --> 00:23:43,520
[Music]

513
00:23:40,320 --> 00:23:51,840
hls is more popular for the moment

514
00:23:43,520 --> 00:23:51,840
maybe in the future we will but for now

515
00:24:03,279 --> 00:24:06,320
it was the question about the fallback

516
00:24:05,679 --> 00:24:09,760
and

517
00:24:06,320 --> 00:24:13,840
how uh how do we detect the fallback

518
00:24:09,760 --> 00:24:17,279
and i will ask i have one question is

519
00:24:13,840 --> 00:24:17,279
a fallback at which level

520
00:24:17,440 --> 00:24:20,720
there's two for basis fallback in uh

521
00:24:19,600 --> 00:24:23,120
liquid stop

522
00:24:20,720 --> 00:24:25,039
but there's fallback at the irl level

523
00:24:23,120 --> 00:24:27,600
between transcoder

524
00:24:25,039 --> 00:24:30,320
what's the question for the fallback in

525
00:24:27,600 --> 00:24:30,320
the transcoder

526
00:24:31,120 --> 00:24:34,879
uh in nick it's up it's just the it was

527
00:24:34,400 --> 00:24:37,120
the same

528
00:24:34,880 --> 00:24:39,760
question as before say it's a it's a

529
00:24:37,120 --> 00:24:43,039
fallback operator of flick itself

530
00:24:39,760 --> 00:24:46,158
but at the irr level uh it's

531
00:24:43,039 --> 00:24:49,760
kind of difficult you need to know

532
00:24:46,159 --> 00:24:53,279
if you need to detect if

533
00:24:49,760 --> 00:24:56,158
if there is stream or not but

534
00:24:53,279 --> 00:24:59,039
the thing we do is to return an error

535
00:24:56,159 --> 00:25:02,480
code an http error code

536
00:24:59,039 --> 00:25:03,200
as when there is no stream and the cdn

537
00:25:02,480 --> 00:25:06,559
can fall back

538
00:25:03,200 --> 00:25:14,400
on your http oracle

539
00:25:06,559 --> 00:25:18,639
last questions

540
00:25:14,400 --> 00:25:18,640
for legacy for legacy listener

541
00:25:21,039 --> 00:25:28,000
yeah there is a lot of websites

542
00:25:24,400 --> 00:25:30,559
that takes a radio from stream and

543
00:25:28,000 --> 00:25:32,480
provide them and then their players are

544
00:25:30,559 --> 00:25:35,600
not compatible with achievement

545
00:25:32,480 --> 00:25:43,840
as i said about 50 percent actually 50

546
00:25:35,600 --> 00:25:49,039
percent ice cuts for now

547
00:25:43,840 --> 00:25:52,080
yeah yeah for now except apple

548
00:25:49,039 --> 00:25:57,840
obviously okay

549
00:25:52,080 --> 00:25:57,840
well thank you thank you

550
00:26:02,480 --> 00:26:04,559
you

