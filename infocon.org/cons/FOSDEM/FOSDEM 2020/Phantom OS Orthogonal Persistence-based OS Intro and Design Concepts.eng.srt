1
00:00:04,960 --> 00:00:10,160
a good day ladies and gentlemen

2
00:00:07,120 --> 00:00:12,480
not a lot of ladies here but still uh

3
00:00:10,160 --> 00:00:14,000
i'll try a little there is a lot of

4
00:00:12,480 --> 00:00:17,359
operating systems around us

5
00:00:14,000 --> 00:00:19,198
i'll try to describe the way that led me

6
00:00:17,359 --> 00:00:20,080
to the idea of data this operating

7
00:00:19,199 --> 00:00:23,119
system

8
00:00:20,080 --> 00:00:26,479
so that uh it is very unusual

9
00:00:23,119 --> 00:00:30,000
so i hope that you will understand

10
00:00:26,480 --> 00:00:34,800
the way i thought you came to this point

11
00:00:30,000 --> 00:00:37,840
the idea was that traditional

12
00:00:34,800 --> 00:00:41,120
composite candle operating systems are

13
00:00:37,840 --> 00:00:44,000
more or less outdated and the

14
00:00:41,120 --> 00:00:45,919
world around us tried to move to the

15
00:00:44,000 --> 00:00:49,200
micro kernel operating systems

16
00:00:45,920 --> 00:00:52,559
uh and all of the microcurrent projects

17
00:00:49,200 --> 00:00:54,559
that started at the start of this

18
00:00:52,559 --> 00:00:57,519
century

19
00:00:54,559 --> 00:00:59,280
there was a lot of problems with the

20
00:00:57,520 --> 00:01:01,120
inter process communications

21
00:00:59,280 --> 00:01:02,960
if you have the microkernel operating

22
00:01:01,120 --> 00:01:05,840
systems you break down the system

23
00:01:02,960 --> 00:01:07,040
into the servers working in a separate

24
00:01:05,840 --> 00:01:09,760
address spaces

25
00:01:07,040 --> 00:01:11,040
then you have to communicate with some

26
00:01:09,760 --> 00:01:14,720
kind of ipc

27
00:01:11,040 --> 00:01:17,200
between the services if you break down

28
00:01:14,720 --> 00:01:18,000
the system in a real small services

29
00:01:17,200 --> 00:01:21,119
which is

30
00:01:18,000 --> 00:01:22,320
an idea basically then you have a lot of

31
00:01:21,119 --> 00:01:24,880
communications

32
00:01:22,320 --> 00:01:25,520
one uh the the user program calls one

33
00:01:24,880 --> 00:01:28,080
service

34
00:01:25,520 --> 00:01:30,000
this service breaks down the call into

35
00:01:28,080 --> 00:01:33,119
the several calls to this

36
00:01:30,000 --> 00:01:33,439
second service and so on and so on and

37
00:01:33,119 --> 00:01:38,320
the

38
00:01:33,439 --> 00:01:41,279
overhead for the communications is huge

39
00:01:38,320 --> 00:01:41,679
so uh the question was do you really

40
00:01:41,280 --> 00:01:44,320
have

41
00:01:41,680 --> 00:01:46,799
to break down the code into separate

42
00:01:44,320 --> 00:01:50,158
address spaces what the idea

43
00:01:46,799 --> 00:01:53,520
the idea is simple we want to

44
00:01:50,159 --> 00:01:58,159
protect code we want to protect

45
00:01:53,520 --> 00:02:01,759
different services one from other

46
00:01:58,159 --> 00:02:04,240
the usual way to protect is based on the

47
00:02:01,759 --> 00:02:04,240
unix

48
00:02:05,920 --> 00:02:13,520
unix pardon the separate other space

49
00:02:10,160 --> 00:02:15,040
can we do it in some other way actually

50
00:02:13,520 --> 00:02:18,959
yes

51
00:02:15,040 --> 00:02:22,799
if the language the basic

52
00:02:18,959 --> 00:02:25,920
virtual processor our system works

53
00:02:22,800 --> 00:02:28,879
at forbids you to convert

54
00:02:25,920 --> 00:02:29,920
anything to a pointer then you don't

55
00:02:28,879 --> 00:02:31,920
have to protect

56
00:02:29,920 --> 00:02:34,799
anything with the different address

57
00:02:31,920 --> 00:02:38,319
spaces you cannot just

58
00:02:34,800 --> 00:02:41,519
produce a pointer from for example from

59
00:02:38,319 --> 00:02:44,160
integer then you cannot

60
00:02:41,519 --> 00:02:46,720
access any memory you just have no

61
00:02:44,160 --> 00:02:50,959
pointer to

62
00:02:46,720 --> 00:02:52,560
actually java virtual machine and some

63
00:02:50,959 --> 00:02:56,080
dot network animation

64
00:02:52,560 --> 00:02:59,519
uh based on the same idea

65
00:02:56,080 --> 00:03:01,599
uh so the next step was let's

66
00:02:59,519 --> 00:03:02,959
build an operating system around the

67
00:03:01,599 --> 00:03:06,159
virtual machine

68
00:03:02,959 --> 00:03:07,440
which protects the memory this way as i

69
00:03:06,159 --> 00:03:11,359
described

70
00:03:07,440 --> 00:03:13,599
and you can

71
00:03:11,360 --> 00:03:15,920
get rid of the inter-process

72
00:03:13,599 --> 00:03:18,480
communications completely

73
00:03:15,920 --> 00:03:19,839
your components can communicate by just

74
00:03:18,480 --> 00:03:21,840
calling

75
00:03:19,840 --> 00:03:24,080
one another with just a pointer to the

76
00:03:21,840 --> 00:03:26,799
object

77
00:03:24,080 --> 00:03:27,840
uh the next question was well uh if we

78
00:03:26,799 --> 00:03:31,040
bring such

79
00:03:27,840 --> 00:03:33,920
an operating system build it uh

80
00:03:31,040 --> 00:03:34,879
build it in a usual way you will start

81
00:03:33,920 --> 00:03:38,159
services as

82
00:03:34,879 --> 00:03:39,359
a processors uh they communicate with

83
00:03:38,159 --> 00:03:42,399
pointers

84
00:03:39,360 --> 00:03:45,440
just calling one another but the next

85
00:03:42,400 --> 00:03:46,000
uh problem is that if this service is

86
00:03:45,440 --> 00:03:48,319
not yet

87
00:03:46,000 --> 00:03:49,360
started but you try to communicate with

88
00:03:48,319 --> 00:03:52,480
it

89
00:03:49,360 --> 00:03:54,799
the series just not there you're calling

90
00:03:52,480 --> 00:03:58,238
into the empty space

91
00:03:54,799 --> 00:04:01,360
so the next question was uh

92
00:03:58,239 --> 00:04:03,840
i think quite unusual

93
00:04:01,360 --> 00:04:05,680
in every traditional operating system

94
00:04:03,840 --> 00:04:08,239
the process

95
00:04:05,680 --> 00:04:09,840
stops when the operating system kernel

96
00:04:08,239 --> 00:04:13,519
stops

97
00:04:09,840 --> 00:04:16,320
do we really have to

98
00:04:13,519 --> 00:04:18,798
require the process to stop when the

99
00:04:16,320 --> 00:04:22,320
operating system stops

100
00:04:18,798 --> 00:04:23,679
the real answer is no all the world the

101
00:04:22,320 --> 00:04:26,320
process leaving is

102
00:04:23,680 --> 00:04:27,360
is operating system an operating system

103
00:04:26,320 --> 00:04:30,000
can hide

104
00:04:27,360 --> 00:04:30,560
from the process from the user space the

105
00:04:30,000 --> 00:04:34,800
fact

106
00:04:30,560 --> 00:04:34,800
that the kernel is rebooting

107
00:04:35,440 --> 00:04:42,479
the easiest way to hide it

108
00:04:38,639 --> 00:04:44,080
is to build the well i'm

109
00:04:42,479 --> 00:04:46,960
not in sync with the presentation but

110
00:04:44,080 --> 00:04:50,159
well i believe it's okay

111
00:04:46,960 --> 00:04:54,400
uh i'll get instinct later so

112
00:04:50,160 --> 00:04:56,639
um if we build the huge

113
00:04:54,400 --> 00:04:58,799
virtual address space which is

114
00:04:56,639 --> 00:05:00,960
persistent memory

115
00:04:58,800 --> 00:05:02,320
then the programs living in this huge

116
00:05:00,960 --> 00:05:05,599
persistent memory

117
00:05:02,320 --> 00:05:08,479
just cannot imagine that

118
00:05:05,600 --> 00:05:09,520
there is something wrong around when the

119
00:05:08,479 --> 00:05:12,240
system stops

120
00:05:09,520 --> 00:05:14,479
its seamlessly saves all the state of

121
00:05:12,240 --> 00:05:17,360
this memory to the disk

122
00:05:14,479 --> 00:05:18,159
and when it starts it rebuilds all the

123
00:05:17,360 --> 00:05:22,080
space

124
00:05:18,160 --> 00:05:25,120
and programs just continue to run

125
00:05:22,080 --> 00:05:28,639
is it easy the question is

126
00:05:25,120 --> 00:05:31,680
uh if our system is stops abruptly

127
00:05:28,639 --> 00:05:35,039
somebody just pulls out the

128
00:05:31,680 --> 00:05:38,720
uh plug from the receptacle

129
00:05:35,039 --> 00:05:41,520
and system uh turns off or some hardware

130
00:05:38,720 --> 00:05:42,240
malfunctions uh we have to build the

131
00:05:41,520 --> 00:05:47,440
world

132
00:05:42,240 --> 00:05:50,479
which saves the state um frequently

133
00:05:47,440 --> 00:05:53,520
and uh doesn't take

134
00:05:50,479 --> 00:05:56,000
a lot of resources to do that um

135
00:05:53,520 --> 00:05:56,639
well i'll try to change to the next

136
00:05:56,000 --> 00:06:01,039
slide

137
00:05:56,639 --> 00:06:01,039
oh well why not microkernel ask it

138
00:06:01,919 --> 00:06:09,599
so um

139
00:06:06,319 --> 00:06:11,120
think of this uh uh memory persistence

140
00:06:09,600 --> 00:06:13,360
memory space

141
00:06:11,120 --> 00:06:14,319
having the size of usual disks on it

142
00:06:13,360 --> 00:06:17,039
it's not not

143
00:06:14,319 --> 00:06:18,720
a hundred of megabytes not thousand

144
00:06:17,039 --> 00:06:20,318
maybe terabytes

145
00:06:18,720 --> 00:06:22,560
saving one terabyte to the risk is

146
00:06:20,319 --> 00:06:25,039
impossible in one moment

147
00:06:22,560 --> 00:06:27,039
and doing it frequently is impossible

148
00:06:25,039 --> 00:06:30,080
but usually how usual

149
00:06:27,039 --> 00:06:33,840
program works uh the big address spaces

150
00:06:30,080 --> 00:06:36,240
is divided to uh two parts one

151
00:06:33,840 --> 00:06:38,080
is a working set which is modified

152
00:06:36,240 --> 00:06:41,120
frequently in the memory

153
00:06:38,080 --> 00:06:42,000
and second part is usually can be mapped

154
00:06:41,120 --> 00:06:45,120
to the disk

155
00:06:42,000 --> 00:06:47,360
but uh the difference

156
00:06:45,120 --> 00:06:48,160
uh between the memory state and disk

157
00:06:47,360 --> 00:06:50,560
state

158
00:06:48,160 --> 00:06:51,280
doesn't exist like code when you bring

159
00:06:50,560 --> 00:06:53,199
it to the

160
00:06:51,280 --> 00:06:54,400
to the memory there is no difference

161
00:06:53,199 --> 00:06:56,000
between the page

162
00:06:54,400 --> 00:06:58,719
in memory and page on the disk so you

163
00:06:56,000 --> 00:07:03,039
don't have to save it

164
00:06:58,720 --> 00:07:05,919
actually it is possible

165
00:07:03,039 --> 00:07:07,039
to build an operating system which

166
00:07:05,919 --> 00:07:09,840
frequently i mean

167
00:07:07,039 --> 00:07:10,800
uh uh once in a minute on or even

168
00:07:09,840 --> 00:07:13,758
frequently one is

169
00:07:10,800 --> 00:07:14,240
once in a second depending on the size

170
00:07:13,759 --> 00:07:18,160
and

171
00:07:14,240 --> 00:07:20,160
uh memory requirements of the process

172
00:07:18,160 --> 00:07:23,599
saves all the state of the running

173
00:07:20,160 --> 00:07:23,599
processes onto the disk

174
00:07:23,680 --> 00:07:29,759
so this is the idea of the

175
00:07:27,520 --> 00:07:30,799
phantom operating system to put it

176
00:07:29,759 --> 00:07:33,440
really simply

177
00:07:30,800 --> 00:07:35,599
it's a virtual machine like java

178
00:07:33,440 --> 00:07:39,360
virtualization but different

179
00:07:35,599 --> 00:07:42,960
working in a huge persistent uh

180
00:07:39,360 --> 00:07:46,960
memory uh actually

181
00:07:42,960 --> 00:07:50,400
there are uh new problems which

182
00:07:46,960 --> 00:07:54,080
uh um which we

183
00:07:50,400 --> 00:07:56,960
bring to life when we start to live

184
00:07:54,080 --> 00:07:57,440
uh in such an environment first of all

185
00:07:56,960 --> 00:08:00,799
is

186
00:07:57,440 --> 00:08:03,199
garbage collection such a system is

187
00:08:00,800 --> 00:08:05,199
a really huge application server

188
00:08:03,199 --> 00:08:08,479
different programs working in

189
00:08:05,199 --> 00:08:11,360
uh big adder space communicating

190
00:08:08,479 --> 00:08:12,080
uh you cannot control memory but by

191
00:08:11,360 --> 00:08:15,520
allocating

192
00:08:12,080 --> 00:08:17,520
and manually deleting it you have to

193
00:08:15,520 --> 00:08:18,799
work with the gerber collector and the

194
00:08:17,520 --> 00:08:22,240
garbage collector

195
00:08:18,800 --> 00:08:26,160
have to collect garbage over the

196
00:08:22,240 --> 00:08:29,520
address space of say one terabyte

197
00:08:26,160 --> 00:08:32,640
size of disk is it possible

198
00:08:29,520 --> 00:08:34,958
actually actually it is

199
00:08:32,640 --> 00:08:36,080
not that it's impossible but it's very

200
00:08:34,958 --> 00:08:40,799
hard

201
00:08:36,080 --> 00:08:44,080
so uh you can stop the world to gerbach

202
00:08:40,799 --> 00:08:47,120
uh to collect garbage um

203
00:08:44,080 --> 00:08:50,640
on this uh address space

204
00:08:47,120 --> 00:08:50,640
uh and uh

205
00:08:52,399 --> 00:08:56,959
that was super for me um one moment i

206
00:08:55,279 --> 00:08:58,480
thought that it is really impossible to

207
00:08:56,959 --> 00:09:01,680
do that

208
00:08:58,480 --> 00:09:03,360
uh but i found the interesting article

209
00:09:01,680 --> 00:09:06,319
saying that

210
00:09:03,360 --> 00:09:07,440
it would be really easy to implement a

211
00:09:06,320 --> 00:09:09,920
garbage collector

212
00:09:07,440 --> 00:09:11,760
is the gerber collector is working not

213
00:09:09,920 --> 00:09:14,800
on a

214
00:09:11,760 --> 00:09:15,680
actual on on an actual copy of other

215
00:09:14,800 --> 00:09:19,439
space but

216
00:09:15,680 --> 00:09:22,479
on a separate uh not

217
00:09:19,440 --> 00:09:25,040
changing copy for some uh moment so

218
00:09:22,480 --> 00:09:25,600
that we if we can just take the memory

219
00:09:25,040 --> 00:09:29,040
and put

220
00:09:25,600 --> 00:09:29,760
a second copy of it we can collect

221
00:09:29,040 --> 00:09:33,120
garbage

222
00:09:29,760 --> 00:09:35,519
over this copy of memory and

223
00:09:33,120 --> 00:09:38,560
everything that is garbage in post is

224
00:09:35,519 --> 00:09:41,600
garbage in future so that we can

225
00:09:38,560 --> 00:09:44,399
free already okay

226
00:09:41,600 --> 00:09:47,360
we can free the memory based on the old

227
00:09:44,399 --> 00:09:47,360
state of the memory

228
00:09:47,440 --> 00:09:51,279
for the phantom operating system it is

229
00:09:49,600 --> 00:09:54,399
usual is is

230
00:09:51,279 --> 00:09:54,800
it is a basic idea is to make the copies

231
00:09:54,399 --> 00:09:58,240
of

232
00:09:54,800 --> 00:10:00,319
outer space so it is possible to write a

233
00:09:58,240 --> 00:10:04,320
garbage collector which is working on

234
00:10:00,320 --> 00:10:04,320
the snapshot of the memory

235
00:10:05,200 --> 00:10:09,040
such a garbage collector would be quite

236
00:10:08,160 --> 00:10:12,800
slow

237
00:10:09,040 --> 00:10:16,839
so that possibly we need second one

238
00:10:12,800 --> 00:10:18,079
and the basic idea at this point is to

239
00:10:16,839 --> 00:10:21,760
have

240
00:10:18,079 --> 00:10:25,599
garbage collectors uh one of them

241
00:10:21,760 --> 00:10:26,480
is working slow and collects over all of

242
00:10:25,600 --> 00:10:29,120
the garbage

243
00:10:26,480 --> 00:10:30,240
looking into the earlier state of the

244
00:10:29,120 --> 00:10:34,399
memory

245
00:10:30,240 --> 00:10:37,519
and one of them is fast but

246
00:10:34,399 --> 00:10:39,680
not ideal uh it is based

247
00:10:37,519 --> 00:10:40,959
on the reference counts so it cannot

248
00:10:39,680 --> 00:10:44,160
collect some kinds

249
00:10:40,959 --> 00:10:44,959
of the object structures such as object

250
00:10:44,160 --> 00:10:48,160
loops

251
00:10:44,959 --> 00:10:52,399
but it is okay uh because the basic

252
00:10:48,160 --> 00:10:57,040
task of this collector is to collect um

253
00:10:52,399 --> 00:11:00,959
first going uh um first allocated

254
00:10:57,040 --> 00:11:04,719
and uh you first first

255
00:11:00,959 --> 00:11:04,719
used objects such as

256
00:11:05,440 --> 00:11:10,640
automatic variables stick frames like

257
00:11:08,399 --> 00:11:10,640
this

258
00:11:12,839 --> 00:11:17,360
uh

259
00:11:14,560 --> 00:11:18,239
other uh big problem is the blocking

260
00:11:17,360 --> 00:11:21,600
syscalls

261
00:11:18,240 --> 00:11:24,000
in traditional unix uh the application

262
00:11:21,600 --> 00:11:26,240
just calls the kernel

263
00:11:24,000 --> 00:11:27,920
for example asking it to read from the

264
00:11:26,240 --> 00:11:30,160
keyboard

265
00:11:27,920 --> 00:11:32,560
in phantom it is next to impossible

266
00:11:30,160 --> 00:11:32,560
because

267
00:11:32,720 --> 00:11:38,000
just the user space is persistent kernel

268
00:11:35,760 --> 00:11:39,519
is not persistent curl is reboots and

269
00:11:38,000 --> 00:11:42,640
restarts from scratch as

270
00:11:39,519 --> 00:11:45,360
any other usual kernel so if if your

271
00:11:42,640 --> 00:11:46,480
system call is came into the kernel code

272
00:11:45,360 --> 00:11:48,880
you cannot restore

273
00:11:46,480 --> 00:11:51,120
the state of the user space completely

274
00:11:48,880 --> 00:11:54,560
you just don't know what's going on

275
00:11:51,120 --> 00:11:56,639
inside of the kernel uh it was a next

276
00:11:54,560 --> 00:12:00,719
big blocker for me

277
00:11:56,639 --> 00:12:03,440
uh i don't have time to describe all the

278
00:12:00,720 --> 00:12:04,000
attempts or the ideas to pass through

279
00:12:03,440 --> 00:12:07,680
these

280
00:12:04,000 --> 00:12:11,519
problems but the final idea was quite

281
00:12:07,680 --> 00:12:14,560
simple all the blocking system calls are

282
00:12:11,519 --> 00:12:15,120
restartable and they made uh more or

283
00:12:14,560 --> 00:12:17,439
less

284
00:12:15,120 --> 00:12:19,040
no not not more or less are just atomic

285
00:12:17,440 --> 00:12:22,320
to the user space

286
00:12:19,040 --> 00:12:25,599
user space calls kernel the

287
00:12:22,320 --> 00:12:26,160
call state is saved then colonel does

288
00:12:25,600 --> 00:12:27,720
something

289
00:12:26,160 --> 00:12:30,839
to to

290
00:12:27,720 --> 00:12:30,840
[Music]

291
00:12:31,360 --> 00:12:38,320
to execute this this call and

292
00:12:34,399 --> 00:12:40,480
if kernel finished then system call is

293
00:12:38,320 --> 00:12:45,519
finished and for the next snapshot

294
00:12:40,480 --> 00:12:45,519
it is finished if something

295
00:12:45,680 --> 00:12:50,239
went wrong during the system call like

296
00:12:47,519 --> 00:12:52,399
we just turned off the computer abruptly

297
00:12:50,240 --> 00:12:54,079
the system call for for the snapshot is

298
00:12:52,399 --> 00:12:57,040
just not started

299
00:12:54,079 --> 00:12:58,479
all the state uh that we need to restart

300
00:12:57,040 --> 00:13:01,680
system call is intact

301
00:12:58,480 --> 00:13:02,000
and for the uh virtual machine thread

302
00:13:01,680 --> 00:13:03,680
which

303
00:13:02,000 --> 00:13:05,040
restarts on the necro start of the

304
00:13:03,680 --> 00:13:07,920
operating system

305
00:13:05,040 --> 00:13:09,839
it just starts in the state when it's

306
00:13:07,920 --> 00:13:12,479
just going to implement to start the

307
00:13:09,839 --> 00:13:12,480
system call

308
00:13:14,880 --> 00:13:21,040
well the one of the huge problems for

309
00:13:18,959 --> 00:13:21,359
such kind of operating system is that it

310
00:13:21,040 --> 00:13:23,199
is

311
00:13:21,360 --> 00:13:24,480
very different from everything we have

312
00:13:23,200 --> 00:13:27,680
so

313
00:13:24,480 --> 00:13:30,959
uh thinking about how to bring

314
00:13:27,680 --> 00:13:34,638
a user code to this system is is uh

315
00:13:30,959 --> 00:13:38,479
one of the main things to think about

316
00:13:34,639 --> 00:13:41,279
uh for me i believe the uh

317
00:13:38,480 --> 00:13:42,320
one of the best ideas is to build um

318
00:13:41,279 --> 00:13:47,120
converter from the

319
00:13:42,320 --> 00:13:47,120
java virtual nation um

320
00:13:47,680 --> 00:13:50,880
class files to the phantom class files i

321
00:13:50,240 --> 00:13:54,399
can describe

322
00:13:50,880 --> 00:13:58,720
why uh the phantom virtual machine is uh

323
00:13:54,399 --> 00:14:01,199
not uh why why i cannot just use

324
00:13:58,720 --> 00:14:02,480
for example uh actual java virtual

325
00:14:01,199 --> 00:14:05,599
mission

326
00:14:02,480 --> 00:14:08,639
but i have no time so i believe that

327
00:14:05,600 --> 00:14:10,560
uh bringing the java into the phantom is

328
00:14:08,639 --> 00:14:11,600
one of the best ideas because java

329
00:14:10,560 --> 00:14:13,518
brings a lot of

330
00:14:11,600 --> 00:14:15,600
different languages which are com

331
00:14:13,519 --> 00:14:18,560
possibly compiled to java

332
00:14:15,600 --> 00:14:19,440
but direct compilation of the languages

333
00:14:18,560 --> 00:14:24,638
into the

334
00:14:19,440 --> 00:14:28,639
phantom byte code is a task two

335
00:14:24,639 --> 00:14:30,399
up to the this year i i was

336
00:14:28,639 --> 00:14:31,920
sure that it is impossible to run c

337
00:14:30,399 --> 00:14:35,600
programs on such an

338
00:14:31,920 --> 00:14:35,599
environment but

339
00:14:37,279 --> 00:14:41,439
now i think that it is really possible

340
00:14:39,839 --> 00:14:44,639
to compile

341
00:14:41,440 --> 00:14:47,120
c code into the managed environment not

342
00:14:44,639 --> 00:14:49,040
there are a lot of problems but i think

343
00:14:47,120 --> 00:14:52,399
it's really possible

344
00:14:49,040 --> 00:14:55,599
uh one more thing one more uh

345
00:14:52,399 --> 00:14:57,600
idea is that

346
00:14:55,600 --> 00:14:59,760
there is a very special process

347
00:14:57,600 --> 00:15:01,360
processor made in russia which is called

348
00:14:59,760 --> 00:15:04,880
elbros

349
00:15:01,360 --> 00:15:07,279
which contains in hardware the

350
00:15:04,880 --> 00:15:08,000
layer of protection which is more or

351
00:15:07,279 --> 00:15:10,720
less

352
00:15:08,000 --> 00:15:12,560
similar to the layer of to the

353
00:15:10,720 --> 00:15:14,959
protection level of the

354
00:15:12,560 --> 00:15:17,119
java virtual machines the processor

355
00:15:14,959 --> 00:15:18,479
which forbids you to convert integers to

356
00:15:17,120 --> 00:15:21,040
pointers

357
00:15:18,480 --> 00:15:22,480
and on such kind of processors it is

358
00:15:21,040 --> 00:15:24,880
possible to

359
00:15:22,480 --> 00:15:27,040
run c code on phantom operating system

360
00:15:24,880 --> 00:15:31,279
and in a persistent environment

361
00:15:27,040 --> 00:15:34,639
but frankly we didn't even try yet

362
00:15:31,279 --> 00:15:39,120
not not a lot of resources to do that um

363
00:15:34,639 --> 00:15:40,880
well i'll try to show you

364
00:15:39,120 --> 00:15:43,279
the this is the overview of the

365
00:15:40,880 --> 00:15:46,480
structure of the operating system

366
00:15:43,279 --> 00:15:49,519
the white uh place on

367
00:15:46,480 --> 00:15:53,279
the top is the persistent memory which

368
00:15:49,519 --> 00:15:56,240
is a place for the user code to leave in

369
00:15:53,279 --> 00:15:58,800
uh user code is object oriented by

370
00:15:56,240 --> 00:15:58,800
design but

371
00:16:00,959 --> 00:16:06,239
well functional

372
00:16:04,000 --> 00:16:09,199
code can can run as well there is a

373
00:16:06,240 --> 00:16:12,240
support in the virtual machine for

374
00:16:09,199 --> 00:16:15,040
functional paradigm this is the

375
00:16:12,240 --> 00:16:17,199
kernel this is the lowest level of the

376
00:16:15,040 --> 00:16:20,480
kernel which is

377
00:16:17,199 --> 00:16:22,240
made to be portable so this is a

378
00:16:20,480 --> 00:16:24,240
hardware independent this is more or

379
00:16:22,240 --> 00:16:28,399
less hardware dependent

380
00:16:24,240 --> 00:16:31,600
uh it is uh mostly made for the

381
00:16:28,399 --> 00:16:33,920
intel um hardware but

382
00:16:31,600 --> 00:16:35,680
the board there was an attempt to port

383
00:16:33,920 --> 00:16:38,959
it into the

384
00:16:35,680 --> 00:16:39,439
arm uh environment successful attempt

385
00:16:38,959 --> 00:16:42,479
but

386
00:16:39,440 --> 00:16:46,240
uh for now it is not continued

387
00:16:42,480 --> 00:16:48,000
uh again there is not a lot of resources

388
00:16:46,240 --> 00:16:49,440
it's time to question to for four

389
00:16:48,000 --> 00:16:53,360
questions i suppose

390
00:16:49,440 --> 00:16:55,519
so um i'm sorry i'm

391
00:16:53,360 --> 00:16:56,959
it's obvious that i need more time but

392
00:16:55,519 --> 00:17:01,519
anyway i have to

393
00:16:56,959 --> 00:17:01,518
stop and if you have questions

394
00:17:02,839 --> 00:17:05,839
please

395
00:17:09,839 --> 00:17:14,159
thank you of i don't know

396
00:17:14,559 --> 00:17:18,959
so this kind of operating system called

397
00:17:17,280 --> 00:17:19,359
team address space operating systems

398
00:17:18,959 --> 00:17:22,480
were

399
00:17:19,359 --> 00:17:24,240
built in the 90s we built one of them

400
00:17:22,480 --> 00:17:26,400
and the reason why they didn't take off

401
00:17:24,240 --> 00:17:29,440
was there was no real actual use case

402
00:17:26,400 --> 00:17:32,640
that showed that they had any benefit

403
00:17:29,440 --> 00:17:34,160
and of course nowadays because you have

404
00:17:32,640 --> 00:17:36,080
a single address space everything needs

405
00:17:34,160 --> 00:17:39,520
to be mapped into that same address base

406
00:17:36,080 --> 00:17:42,399
64-bit address space of course

407
00:17:39,520 --> 00:17:46,240
how do you deal with that 64-bit so the

408
00:17:42,400 --> 00:17:49,280
space is is it's more or less okay but

409
00:17:46,240 --> 00:17:50,960
well uh you know actually when i started

410
00:17:49,280 --> 00:17:55,360
to think about this

411
00:17:50,960 --> 00:17:56,320
uh i just cannot dream about this 64-bit

412
00:17:55,360 --> 00:17:59,600
address space

413
00:17:56,320 --> 00:18:01,840
so now it's usual i believe that's

414
00:17:59,600 --> 00:18:03,959
for some 10 years and we'll have

415
00:18:01,840 --> 00:18:08,879
comparisons with

416
00:18:03,960 --> 00:18:12,559
128 bit address space which is

417
00:18:08,880 --> 00:18:15,919
and not for anything you know i hope so

418
00:18:12,559 --> 00:18:19,918
at this moment i believe that it is okay

419
00:18:15,919 --> 00:18:23,039
uh for the one simple reason the disks

420
00:18:19,919 --> 00:18:23,840
actual uh real persistent memory is

421
00:18:23,039 --> 00:18:27,520
smaller that

422
00:18:23,840 --> 00:18:30,720
other space uh and uh you can map

423
00:18:27,520 --> 00:18:34,000
any uh size of the uh distance

424
00:18:30,720 --> 00:18:37,679
into the 64 bit address space

425
00:18:34,000 --> 00:18:37,679
maybe okay but oh

426
00:18:37,760 --> 00:18:43,120
i will we'll wait for for for even even

427
00:18:40,880 --> 00:18:57,840
bigger bus

428
00:18:43,120 --> 00:18:57,840
any any questions um

429
00:19:08,400 --> 00:19:11,919
the question is that the newer uh

430
00:19:11,039 --> 00:19:15,200
computers

431
00:19:11,919 --> 00:19:16,320
will have uh non-volatile ram am i right

432
00:19:15,200 --> 00:19:19,440
yes

433
00:19:16,320 --> 00:19:21,120
actually i even have this question in my

434
00:19:19,440 --> 00:19:25,120
presentation

435
00:19:21,120 --> 00:19:28,959
uh it is uh not true that if the

436
00:19:25,120 --> 00:19:31,439
uh ram state is saved then the kernel is

437
00:19:28,960 --> 00:19:34,559
automatically persistent it is not true

438
00:19:31,440 --> 00:19:35,039
you have to anyway uh for phantom is

439
00:19:34,559 --> 00:19:39,280
just

440
00:19:35,039 --> 00:19:42,080
uh in you it just helps it to to

441
00:19:39,280 --> 00:19:42,799
work simpler but still you need a kind

442
00:19:42,080 --> 00:19:45,760
of kernel

443
00:19:42,799 --> 00:19:47,280
which can synchronize the saved state

444
00:19:45,760 --> 00:19:48,879
with the change at work the world is

445
00:19:47,280 --> 00:19:50,799
changing anyway so

446
00:19:48,880 --> 00:19:52,480
for example just hardware when you

447
00:19:50,799 --> 00:19:54,480
restart the memory is the same but

448
00:19:52,480 --> 00:19:57,440
hardware is not not the same you

449
00:19:54,480 --> 00:19:58,240
you still need a layer which cycle

450
00:19:57,440 --> 00:19:59,679
synchronize

451
00:19:58,240 --> 00:20:02,480
this state of the operating system to

452
00:19:59,679 --> 00:20:02,480
the state of the world

453
00:20:04,720 --> 00:20:09,679
not not yet not yet yeah

454
00:20:13,200 --> 00:20:20,320
can you go back yes

455
00:20:16,320 --> 00:20:21,280
uh oh no no no no you know what is the

456
00:20:20,320 --> 00:20:24,639
question

457
00:20:21,280 --> 00:20:25,840
can we just uh restart from the one of

458
00:20:24,640 --> 00:20:28,400
the earlier states

459
00:20:25,840 --> 00:20:28,959
yes of course we can we can save a lot

460
00:20:28,400 --> 00:20:31,440
of the

461
00:20:28,960 --> 00:20:34,480
snapshots and the snapshots are

462
00:20:31,440 --> 00:20:36,960
incremental so that they don't uh

463
00:20:34,480 --> 00:20:37,840
lose a lot of disk space so that then

464
00:20:36,960 --> 00:20:40,720
yeah

465
00:20:37,840 --> 00:20:41,918
that's true that's an automatic uh

466
00:20:40,720 --> 00:20:45,039
backup system

467
00:20:41,919 --> 00:20:46,480
you can return back in time but you

468
00:20:45,039 --> 00:20:49,280
cannot

469
00:20:46,480 --> 00:20:51,440
for example do a backwards execution

470
00:20:49,280 --> 00:20:54,480
this is not not the idea of this

471
00:20:51,440 --> 00:20:58,640
system and one uh bigger problem

472
00:20:54,480 --> 00:20:59,600
you cannot go back in time for just one

473
00:20:58,640 --> 00:21:02,880
application

474
00:20:59,600 --> 00:21:02,879
only of us

475
00:21:15,120 --> 00:21:18,399
is the short name is e to key the long

476
00:21:17,919 --> 00:21:21,919
name is

477
00:21:18,400 --> 00:21:24,960
el brusse's mountain

478
00:21:21,919 --> 00:21:26,480
but it isn't dependent on this you know

479
00:21:24,960 --> 00:21:30,320
it can work on

480
00:21:26,480 --> 00:21:30,320
any any kind of the architecture

481
00:21:42,400 --> 00:21:46,500
well that's the question for another

482
00:21:45,120 --> 00:21:48,320
hour of discussion

483
00:21:46,500 --> 00:21:51,679
[Laughter]

484
00:21:48,320 --> 00:21:54,240
the question was uh how do we handle the

485
00:21:51,679 --> 00:21:55,280
uh situation when the hard way changed

486
00:21:54,240 --> 00:21:58,799
its state

487
00:21:55,280 --> 00:22:01,760
uh in uh some uh

488
00:21:58,799 --> 00:22:03,679
unhandlable the ways for example if the

489
00:22:01,760 --> 00:22:07,919
device is just

490
00:22:03,679 --> 00:22:09,120
uh took down some device from the

491
00:22:07,919 --> 00:22:11,200
computer and received the priority

492
00:22:09,120 --> 00:22:14,479
system

493
00:22:11,200 --> 00:22:17,600
to say it simply some code will

494
00:22:14,480 --> 00:22:22,159
get an exception on the next attempt to

495
00:22:17,600 --> 00:22:25,760
uh to access this this device

496
00:22:22,159 --> 00:22:25,760
well i believe

497
00:22:28,320 --> 00:22:41,120
thank you very much

