1
00:00:05,200 --> 00:00:09,040
hi

2
00:00:05,759 --> 00:00:13,120
um i'm mark villards and

3
00:00:09,040 --> 00:00:16,558
this isn't frank eichler sorry

4
00:00:13,120 --> 00:00:16,558
he couldn't be there

5
00:00:17,760 --> 00:00:21,359
but well i i will try it's a bit of a

6
00:00:20,560 --> 00:00:25,359
pity because

7
00:00:21,359 --> 00:00:28,840
frank actually did all the work

8
00:00:25,359 --> 00:00:32,399
so that's not completely too frank

9
00:00:28,840 --> 00:00:35,360
that most of the

10
00:00:32,399 --> 00:00:36,480
the server work and the client work was

11
00:00:35,360 --> 00:00:40,320
done by

12
00:00:36,480 --> 00:00:44,078
aaron or mary who is also not here

13
00:00:40,320 --> 00:00:47,120
but well so if the presentation

14
00:00:44,079 --> 00:00:50,879
is lame that's on me

15
00:00:47,120 --> 00:00:54,959
the code is actually pretty good

16
00:00:50,879 --> 00:00:58,959
okay um we all three work

17
00:00:54,960 --> 00:01:02,320
for redhead but

18
00:00:58,960 --> 00:01:04,960
the goal was very explicitly

19
00:01:02,320 --> 00:01:07,840
not to make something just for rel or

20
00:01:04,959 --> 00:01:07,839
fedora so

21
00:01:09,600 --> 00:01:17,919
okay so the summary is

22
00:01:14,479 --> 00:01:21,600
uh we have a debug info

23
00:01:17,920 --> 00:01:24,880
v demon uh

24
00:01:21,600 --> 00:01:26,240
we realized too late it should have been

25
00:01:24,880 --> 00:01:29,839
dwarfed

26
00:01:26,240 --> 00:01:32,960
barf demon of course but well

27
00:01:29,840 --> 00:01:35,600
now we're stuck with the name um and

28
00:01:32,960 --> 00:01:36,240
it's essentially just a file server for

29
00:01:35,600 --> 00:01:41,839
the

30
00:01:36,240 --> 00:01:41,839
king artifacts uh

31
00:01:42,399 --> 00:01:46,720
uh why would you uh need debugging

32
00:01:45,520 --> 00:01:48,798
artifacts

33
00:01:46,720 --> 00:01:49,759
because maybe you have ducks in your

34
00:01:48,799 --> 00:01:53,200
code

35
00:01:49,759 --> 00:01:55,840
some people do create lots of bags in

36
00:01:53,200 --> 00:01:55,840
their code

37
00:01:56,159 --> 00:02:03,200
so that's not a problem

38
00:01:59,920 --> 00:02:07,520
you debug your program you

39
00:02:03,200 --> 00:02:10,720
install all your debugging stuff

40
00:02:07,520 --> 00:02:14,319
you use a debugger

41
00:02:10,720 --> 00:02:14,319
not going to talk about that

42
00:02:14,959 --> 00:02:19,440
a debugger yes what is a debugger a

43
00:02:18,640 --> 00:02:22,000
debugger is

44
00:02:19,440 --> 00:02:23,280
anything to introspect your program

45
00:02:22,000 --> 00:02:25,920
basically

46
00:02:23,280 --> 00:02:26,720
anything that uses this kind of debug

47
00:02:25,920 --> 00:02:29,079
info

48
00:02:26,720 --> 00:02:30,640
that we serve

49
00:02:29,080 --> 00:02:31,880
[Music]

50
00:02:30,640 --> 00:02:35,200
so

51
00:02:31,880 --> 00:02:39,280
[Music]

52
00:02:35,200 --> 00:02:42,959
uh right uh it is about native code

53
00:02:39,280 --> 00:02:44,000
if you write in some scripting language

54
00:02:42,959 --> 00:02:45,920
you're

55
00:02:44,000 --> 00:02:47,840
already happy because you always have

56
00:02:45,920 --> 00:02:52,480
your source code with you

57
00:02:47,840 --> 00:02:55,120
yay um it is relevant for go

58
00:02:52,480 --> 00:02:55,119
or rust

59
00:02:55,519 --> 00:02:59,360
there are some improvements that could

60
00:02:57,360 --> 00:03:01,680
be made there but

61
00:02:59,360 --> 00:03:04,480
they're not really relevant it should

62
00:03:01,680 --> 00:03:08,239
kind of work out of the box for

63
00:03:04,480 --> 00:03:11,119
goal arrest 2 and

64
00:03:08,239 --> 00:03:14,159
well i will show a demo of some of the

65
00:03:11,120 --> 00:03:14,159
things that work with it

66
00:03:16,840 --> 00:03:19,200
so um

67
00:03:23,040 --> 00:03:30,079
no so for for the debugging info

68
00:03:26,319 --> 00:03:34,238
uh uh basically compilers

69
00:03:30,080 --> 00:03:34,239
these days are pretty good

70
00:03:34,560 --> 00:03:38,400
always do use minus g

71
00:03:39,040 --> 00:03:47,120
and you do use dc

72
00:03:43,760 --> 00:03:51,280
which says for tracking assignments

73
00:03:47,120 --> 00:03:54,239
which makes things really really nice

74
00:03:51,280 --> 00:03:56,000
and don't disable them the kernel

75
00:03:54,239 --> 00:03:59,760
disables

76
00:03:56,000 --> 00:04:04,239
for for tracking assignments which makes

77
00:03:59,760 --> 00:04:07,519
debugging kernel cuts really annoying

78
00:04:04,239 --> 00:04:10,720
apparently kernel hackers don't

79
00:04:07,519 --> 00:04:14,159
debug it

80
00:04:10,720 --> 00:04:17,279
there was once a bug in gc that

81
00:04:14,159 --> 00:04:20,159
generated something bad and since then

82
00:04:17,279 --> 00:04:20,798
the kernel has disabled this don't do

83
00:04:20,160 --> 00:04:23,840
that

84
00:04:20,798 --> 00:04:28,239
just use a fixed compiler

85
00:04:23,840 --> 00:04:30,239
sorry um

86
00:04:28,240 --> 00:04:31,520
there are various tools that can

87
00:04:30,240 --> 00:04:35,199
compress your uh

88
00:04:31,520 --> 00:04:38,639
debug info which is kind of uh useful

89
00:04:35,199 --> 00:04:42,400
because it's really big uh so some

90
00:04:38,639 --> 00:04:44,160
examples of that uh there are also

91
00:04:42,400 --> 00:04:45,679
there are some subsets that you could

92
00:04:44,160 --> 00:04:48,320
use which are already

93
00:04:45,680 --> 00:04:49,360
useful well like like convert showed

94
00:04:48,320 --> 00:04:53,120
that

95
00:04:49,360 --> 00:04:56,240
we want more that's basically it

96
00:04:53,120 --> 00:04:58,320
and um

97
00:04:56,240 --> 00:05:00,400
there's the source code which is also

98
00:04:58,320 --> 00:05:02,000
pretty big and which is

99
00:05:00,400 --> 00:05:03,679
kind of interesting because you don't

100
00:05:02,000 --> 00:05:05,840
want the source code

101
00:05:03,680 --> 00:05:07,440
the pristine source code but the source

102
00:05:05,840 --> 00:05:08,320
code that was actually used to build

103
00:05:07,440 --> 00:05:11,120
your program

104
00:05:08,320 --> 00:05:12,800
which is sometimes different because

105
00:05:11,120 --> 00:05:17,360
your builds

106
00:05:12,800 --> 00:05:22,080
might post pre-process

107
00:05:17,360 --> 00:05:22,080
your sources or generate them on the fly

108
00:05:23,759 --> 00:05:26,720
so um

109
00:05:30,000 --> 00:05:35,280
in general you use minus g and you're

110
00:05:32,880 --> 00:05:35,280
happy

111
00:05:36,240 --> 00:05:42,560
except uh

112
00:05:39,440 --> 00:05:45,759
if you don't or if make

113
00:05:42,560 --> 00:05:49,919
uh strips it

114
00:05:45,759 --> 00:05:49,919
well then we really can't help you

115
00:05:51,600 --> 00:05:58,880
but you might be using someone else uh

116
00:05:55,039 --> 00:06:01,919
uh their uh their belts are well

117
00:05:58,880 --> 00:06:05,280
distro packages uh uh

118
00:06:01,919 --> 00:06:08,318
or you you might be

119
00:06:05,280 --> 00:06:11,520
debugging remotely or in a container or

120
00:06:08,319 --> 00:06:14,960
from outside the container and

121
00:06:11,520 --> 00:06:15,758
where are your where is your debugging

122
00:06:14,960 --> 00:06:19,039
from

123
00:06:15,759 --> 00:06:23,280
um so the the

124
00:06:19,039 --> 00:06:26,318
the idea is in in all those depends

125
00:06:23,280 --> 00:06:30,638
we want to provide you with one

126
00:06:26,319 --> 00:06:35,440
way of getting at your uh deworking file

127
00:06:30,639 --> 00:06:39,440
um right so why

128
00:06:35,440 --> 00:06:43,600
doesn't everybody ship all their debug

129
00:06:39,440 --> 00:06:47,039
stuff because um

130
00:06:43,600 --> 00:06:51,440
basically the diva game follows

131
00:06:47,039 --> 00:06:54,960
uh your reverse compiler

132
00:06:51,440 --> 00:06:59,199
that goes from binary to source and

133
00:06:54,960 --> 00:07:02,479
describing that is oh

134
00:06:59,199 --> 00:07:06,319
big it's what five

135
00:07:02,479 --> 00:07:09,840
till five 15 times the size of

136
00:07:06,319 --> 00:07:09,840
receptor executable

137
00:07:12,160 --> 00:07:18,560
so yeah

138
00:07:16,400 --> 00:07:20,239
especially if you would like to have it

139
00:07:18,560 --> 00:07:24,000
for a complete

140
00:07:20,240 --> 00:07:27,360
distro it's really

141
00:07:24,000 --> 00:07:30,560
big so no wonder that people

142
00:07:27,360 --> 00:07:33,120
try to move it away and it might be hard

143
00:07:30,560 --> 00:07:33,120
to get it

144
00:07:33,919 --> 00:07:36,159
so

145
00:07:38,800 --> 00:07:45,599
most distributions

146
00:07:42,560 --> 00:07:49,199
at least provide you with some way to uh

147
00:07:45,599 --> 00:07:51,520
find it so uh fedora does it

148
00:07:49,199 --> 00:07:52,960
pretty nicely i think but i work on

149
00:07:51,520 --> 00:07:59,198
fedora so

150
00:07:52,960 --> 00:08:03,280
that's uh um

151
00:07:59,199 --> 00:08:07,120
as you can see gdb says just says well

152
00:08:03,280 --> 00:08:10,719
just dnf debugging for install

153
00:08:07,120 --> 00:08:14,639
uh that's packets

154
00:08:10,720 --> 00:08:15,120
and uh it even gets all the dependencies

155
00:08:14,639 --> 00:08:18,240
and

156
00:08:15,120 --> 00:08:21,440
uh so finn might

157
00:08:18,240 --> 00:08:24,319
rely on glib c so we'll also pulls in

158
00:08:21,440 --> 00:08:25,599
the gleb c uh the inverter info so

159
00:08:24,319 --> 00:08:29,039
that's

160
00:08:25,599 --> 00:08:30,240
it just works except you have to be rude

161
00:08:29,039 --> 00:08:33,838
for it

162
00:08:30,240 --> 00:08:36,320
to install it uh and

163
00:08:33,839 --> 00:08:37,279
it's pretty big so you'll have to have

164
00:08:36,320 --> 00:08:42,240
the

165
00:08:37,279 --> 00:08:42,240
this ways uh and

166
00:08:43,760 --> 00:08:50,399
well um for

167
00:08:47,120 --> 00:08:52,640
uh for ubuntu

168
00:08:50,399 --> 00:08:53,760
i'm not that familiar with it but that

169
00:08:52,640 --> 00:08:58,319
also makes it

170
00:08:53,760 --> 00:08:58,319
immediately harder for my for myself

171
00:08:59,200 --> 00:09:07,360
there is a a a different difference

172
00:09:02,399 --> 00:09:12,640
between debug sims and debug ddps

173
00:09:07,360 --> 00:09:15,920
it seems uh about debian and ubuntu now

174
00:09:12,640 --> 00:09:18,720
produce debug packages for everything

175
00:09:15,920 --> 00:09:18,719
but uh

176
00:09:19,040 --> 00:09:26,719
basically you have the the same

177
00:09:22,320 --> 00:09:30,000
limitations and then you have

178
00:09:26,720 --> 00:09:33,040
other distributions

179
00:09:30,000 --> 00:09:35,920
which don't create any keyword

180
00:09:33,040 --> 00:09:38,240
information so what do you do while you

181
00:09:35,920 --> 00:09:40,640
rebuild your

182
00:09:38,240 --> 00:09:42,640
program with the way you hope it's the

183
00:09:40,640 --> 00:09:45,680
same program that you

184
00:09:42,640 --> 00:09:49,360
did back then um

185
00:09:45,680 --> 00:09:52,640
so the the nexus kind of us

186
00:09:49,360 --> 00:09:56,800
always has an interesting approach which

187
00:09:52,640 --> 00:10:00,080
is uh a dwarf fall system

188
00:09:56,800 --> 00:10:01,120
fuse uh thing which is actually pretty

189
00:10:00,080 --> 00:10:04,160
nice

190
00:10:01,120 --> 00:10:07,760
uh this is

191
00:10:04,160 --> 00:10:11,120
kind of what we want although

192
00:10:07,760 --> 00:10:14,640
we wanted something slightly simpler

193
00:10:11,120 --> 00:10:17,279
and something that doesn't do

194
00:10:14,640 --> 00:10:20,560
that is easy to set up for about

195
00:10:17,279 --> 00:10:22,959
distributions in your local

196
00:10:20,560 --> 00:10:22,959
builds

197
00:10:25,120 --> 00:10:29,279
right so

198
00:10:30,880 --> 00:10:34,800
it's pretty useless that you have to

199
00:10:33,040 --> 00:10:38,560
have privileges to

200
00:10:34,800 --> 00:10:41,680
install debug info uh

201
00:10:38,560 --> 00:10:44,079
it would be nice if uh there was a

202
00:10:41,680 --> 00:10:44,719
mechanism that combines the packages

203
00:10:44,079 --> 00:10:48,640
with your

204
00:10:44,720 --> 00:10:52,480
local builds and maybe ufa a team

205
00:10:48,640 --> 00:10:55,839
that that publishes some

206
00:10:52,480 --> 00:10:55,839
of the account

207
00:10:56,399 --> 00:11:04,720
and we always want access to

208
00:11:00,880 --> 00:11:04,720
the actual source code used

209
00:11:05,440 --> 00:11:13,120
so the debug m4d

210
00:11:09,360 --> 00:11:16,959
is a simple http web server

211
00:11:13,120 --> 00:11:16,959
it has three

212
00:11:18,800 --> 00:11:27,599
it is two it has three

213
00:11:23,600 --> 00:11:30,240
i missed one it it has

214
00:11:27,600 --> 00:11:31,519
three get requests uh one for the

215
00:11:30,240 --> 00:11:34,880
executable

216
00:11:31,519 --> 00:11:35,360
uh that that seems weird that you might

217
00:11:34,880 --> 00:11:38,480
want

218
00:11:35,360 --> 00:11:41,200
the executable but uh you might be you

219
00:11:38,480 --> 00:11:44,480
might have gotten a corval

220
00:11:41,200 --> 00:11:44,480
from somebody and

221
00:11:45,040 --> 00:11:49,120
you you want to debug that so you want

222
00:11:47,760 --> 00:11:53,519
to get the executable you

223
00:11:49,120 --> 00:11:57,040
want to get a debug info

224
00:11:53,519 --> 00:12:00,720
and you want source code

225
00:11:57,040 --> 00:12:02,319
and basically that's the whole hspd

226
00:12:00,720 --> 00:12:06,399
server

227
00:12:02,320 --> 00:12:06,399
they're all indexed by build id

228
00:12:07,760 --> 00:12:15,200
you can run it on any port and

229
00:12:12,079 --> 00:12:16,959
the servers could can federate to each

230
00:12:15,200 --> 00:12:20,240
other

231
00:12:16,959 --> 00:12:23,040
so the build id is is

232
00:12:20,240 --> 00:12:25,839
kind of the thing that ties it all

233
00:12:23,040 --> 00:12:25,839
together

234
00:12:26,160 --> 00:12:29,439
ability id

235
00:12:30,079 --> 00:12:39,839
x swing basically

236
00:12:34,560 --> 00:12:43,040
has over your whole executable

237
00:12:39,839 --> 00:12:46,240
it's unique in

238
00:12:43,040 --> 00:12:46,240
the way that

239
00:12:46,480 --> 00:12:50,320
if you have a reproducible build it

240
00:12:48,639 --> 00:12:54,560
generates the same

241
00:12:50,320 --> 00:12:57,760
it should generate the same build id

242
00:12:54,560 --> 00:13:03,040
and you

243
00:12:57,760 --> 00:13:03,040
use it to uniquely identify a build

244
00:13:03,680 --> 00:13:09,359
but you cannot use it for verification

245
00:13:06,399 --> 00:13:13,120
it's it's not a security

246
00:13:09,360 --> 00:13:16,800
thing it's also if you

247
00:13:13,120 --> 00:13:19,519
uh a build id

248
00:13:16,800 --> 00:13:20,240
is generated by the linker for every

249
00:13:19,519 --> 00:13:24,639
loadable

250
00:13:20,240 --> 00:13:27,040
module program library kernel module

251
00:13:24,639 --> 00:13:27,040
kernel

252
00:13:28,720 --> 00:13:35,839
and what did i want to say oh yes

253
00:13:33,360 --> 00:13:35,839
and

254
00:13:37,680 --> 00:13:42,399
when you then split that loadable module

255
00:13:40,800 --> 00:13:45,439
like

256
00:13:42,399 --> 00:13:49,839
in the main executable and debug

257
00:13:45,440 --> 00:13:52,399
info you copy over the build id

258
00:13:49,839 --> 00:13:53,040
uh that also makes it harder to verify

259
00:13:52,399 --> 00:13:57,600
because

260
00:13:53,040 --> 00:13:59,279
the build id is calculated over the hold

261
00:13:57,600 --> 00:14:02,959
so you would have to

262
00:13:59,279 --> 00:14:06,959
merge them um

263
00:14:02,959 --> 00:14:10,160
so um the viva game for the

264
00:14:06,959 --> 00:14:13,199
uh is fairly fairly simple

265
00:14:10,160 --> 00:14:14,839
uh the version that was released you can

266
00:14:13,199 --> 00:14:17,120
point it at

267
00:14:14,839 --> 00:14:20,880
uh your

268
00:14:17,120 --> 00:14:24,880
build directory or at a

269
00:14:20,880 --> 00:14:24,880
collection of rpms

270
00:14:25,360 --> 00:14:32,000
in current git you can also

271
00:14:28,399 --> 00:14:34,720
point it at a collection of

272
00:14:32,000 --> 00:14:34,720
depth files

273
00:14:35,199 --> 00:14:43,199
and it uses slip archive

274
00:14:39,440 --> 00:14:46,800
so it can basically

275
00:14:43,199 --> 00:14:49,120
use any archiving formats that you

276
00:14:46,800 --> 00:14:49,120
use

277
00:14:50,399 --> 00:14:59,519
it it creates a database

278
00:14:55,680 --> 00:15:03,040
and from that

279
00:14:59,519 --> 00:15:07,040
it it serves the files you want

280
00:15:03,040 --> 00:15:10,719
the client is uh even simpler

281
00:15:07,040 --> 00:15:10,719
uh uh

282
00:15:10,839 --> 00:15:16,800
the uh if you have support

283
00:15:14,240 --> 00:15:18,959
uh like a gdb well it's not integrated

284
00:15:16,800 --> 00:15:21,120
yet but i will demo it anyway

285
00:15:18,959 --> 00:15:21,119
uh

286
00:15:22,800 --> 00:15:27,599
you just set an environment variable i

287
00:15:26,079 --> 00:15:30,880
have

288
00:15:27,600 --> 00:15:32,160
all my debug stuff my sources there fits

289
00:15:30,880 --> 00:15:35,040
them

290
00:15:32,160 --> 00:15:35,519
and we have a little example program

291
00:15:35,040 --> 00:15:39,120
debug

292
00:15:35,519 --> 00:15:40,399
info defined give me the source or debug

293
00:15:39,120 --> 00:15:43,519
info

294
00:15:40,399 --> 00:15:45,920
or executable for this hex code and

295
00:15:43,519 --> 00:15:48,079
with the source the source path that's

296
00:15:45,920 --> 00:15:48,079
it

297
00:15:51,440 --> 00:15:57,600
oh right let me just show it

298
00:15:55,279 --> 00:15:57,600
um

299
00:15:59,440 --> 00:16:03,440
oh right i can't see anything on this

300
00:16:02,240 --> 00:16:06,480
screen sorry

301
00:16:03,440 --> 00:16:06,480
um so

302
00:16:07,199 --> 00:16:09,839
go away

303
00:16:10,959 --> 00:16:15,758
so uh

304
00:16:16,240 --> 00:16:22,880
yeah oh

305
00:16:19,519 --> 00:16:26,800
yeah i said

306
00:16:22,880 --> 00:16:28,959
unprivileged that i'm using docker files

307
00:16:26,800 --> 00:16:28,959
and

308
00:16:31,600 --> 00:16:40,560
no how

309
00:16:36,560 --> 00:16:40,560
really it's me okay

310
00:16:42,399 --> 00:16:45,519
you script your whole demo and then you

311
00:16:45,040 --> 00:16:48,240
can't

312
00:16:45,519 --> 00:16:49,360
run the demo because you lost your

313
00:16:48,240 --> 00:16:52,480
password

314
00:16:49,360 --> 00:16:56,639
um yeah let's first

315
00:16:52,480 --> 00:16:56,639
show uh

316
00:16:59,680 --> 00:17:04,240
so we don't have uh we don't have any

317
00:17:02,560 --> 00:17:06,639
debug info insult

318
00:17:04,240 --> 00:17:09,039
we do have a future steve again for the

319
00:17:06,640 --> 00:17:09,039
insult

320
00:17:09,359 --> 00:17:13,198
well just to show that up

321
00:17:13,359 --> 00:17:16,079
that i'm not

322
00:17:16,839 --> 00:17:24,399
lying yeah

323
00:17:19,919 --> 00:17:24,400
so we start a server which

324
00:17:25,439 --> 00:17:28,400
yeah um

325
00:17:28,480 --> 00:17:36,480
we start a server with lots of uh for

326
00:17:32,600 --> 00:17:40,159
business come on

327
00:17:36,480 --> 00:17:43,679
yeah so lots of

328
00:17:40,160 --> 00:17:43,679
was the look in

329
00:17:44,080 --> 00:17:47,840
create a database here

330
00:17:49,840 --> 00:17:56,639
scan it every

331
00:17:52,880 --> 00:17:57,760
couple of seconds index all the rpms and

332
00:17:56,640 --> 00:18:01,840
the files

333
00:17:57,760 --> 00:18:06,080
that you can find in this directory

334
00:18:01,840 --> 00:18:10,799
and basically it's it indexes

335
00:18:06,080 --> 00:18:10,799
them and you're done

336
00:18:12,840 --> 00:18:15,840
well

337
00:18:15,919 --> 00:18:20,320
we don't really need that window anymore

338
00:18:18,320 --> 00:18:24,080
except to see

339
00:18:20,320 --> 00:18:29,840
that it actually gets the files there

340
00:18:24,080 --> 00:18:29,840
because this is all running locally um

341
00:18:30,640 --> 00:18:35,520
the demo is actually too smooth it just

342
00:18:33,440 --> 00:18:38,080
works and

343
00:18:35,520 --> 00:18:40,799
you should see it downloading but it's

344
00:18:38,080 --> 00:18:40,799
immediately there

345
00:18:41,039 --> 00:18:49,039
so um uh

346
00:18:44,799 --> 00:18:52,320
oh i should have shown you

347
00:18:49,039 --> 00:18:56,240
okay so in the demo directory i

348
00:18:52,320 --> 00:18:59,439
put the uh i happened to put

349
00:18:56,240 --> 00:19:02,559
the debugging for rpms for

350
00:18:59,440 --> 00:19:05,520
bass and telepse and well everything i

351
00:19:02,559 --> 00:19:05,520
need for the demo

352
00:19:06,480 --> 00:19:16,480
so um the this

353
00:19:11,760 --> 00:19:16,480
this window is too small

354
00:19:18,799 --> 00:19:22,960
support is built in in the elf uterus

355
00:19:21,840 --> 00:19:26,080
tools

356
00:19:22,960 --> 00:19:26,080
so even

357
00:19:26,640 --> 00:19:31,120
though we don't have any debug info

358
00:19:30,000 --> 00:19:34,400
installed it's

359
00:19:31,120 --> 00:19:37,600
it it gets them from

360
00:19:34,400 --> 00:19:38,640
the client that we we have a back trace

361
00:19:37,600 --> 00:19:43,520
with

362
00:19:38,640 --> 00:19:43,520
source files and symbols

363
00:19:47,360 --> 00:19:54,959
so this was for an rpm based thing

364
00:19:51,679 --> 00:20:00,880
maybe we we want to build something

365
00:19:54,960 --> 00:20:04,000
uh locally uh we make a winery

366
00:20:00,880 --> 00:20:06,559
and we

367
00:20:04,000 --> 00:20:08,960
we strip the thing that we are going to

368
00:20:06,559 --> 00:20:08,960
install

369
00:20:09,440 --> 00:20:11,679
so

370
00:20:15,039 --> 00:20:18,559
in this scenario you you you have your

371
00:20:17,919 --> 00:20:21,760
built

372
00:20:18,559 --> 00:20:24,480
directory you you give your binaries

373
00:20:21,760 --> 00:20:25,840
stripped to your co-workers to run a

374
00:20:24,480 --> 00:20:29,600
different machine

375
00:20:25,840 --> 00:20:29,600
which we now create

376
00:20:29,760 --> 00:20:32,720
yes so

377
00:20:33,120 --> 00:20:40,399
we use spotman and it right

378
00:20:37,200 --> 00:20:43,679
so on this

379
00:20:40,400 --> 00:20:47,280
machine which we just created there is

380
00:20:43,679 --> 00:20:50,559
the stripped binary so we run

381
00:20:47,280 --> 00:20:55,200
ddb on it and ah

382
00:20:50,559 --> 00:20:55,200
there's nothing this is uh

383
00:20:55,520 --> 00:20:58,158
frustrating

384
00:21:01,280 --> 00:21:07,918
yeah so

385
00:21:04,320 --> 00:21:12,799
yeah yeah um

386
00:21:07,919 --> 00:21:12,799
so now we do it again but we uh

387
00:21:14,159 --> 00:21:18,080
we give it access to the debugging for

388
00:21:17,760 --> 00:21:21,440
the

389
00:21:18,080 --> 00:21:23,678
server that we are running and

390
00:21:21,440 --> 00:21:23,679
uh

391
00:21:25,200 --> 00:21:33,360
so it uses okay it's it's cheating

392
00:21:30,240 --> 00:21:36,240
it actually uses the host

393
00:21:33,360 --> 00:21:38,959
network but it's as if it is on a

394
00:21:36,240 --> 00:21:38,960
different machine

395
00:21:39,440 --> 00:21:47,039
and it actually finds

396
00:21:42,720 --> 00:21:49,039
the symbols it you should have seen it

397
00:21:47,039 --> 00:21:50,559
download but it was so fast it

398
00:21:49,039 --> 00:21:54,799
immediately guesses

399
00:21:50,559 --> 00:21:54,799
it gets them from the cast and

400
00:21:55,360 --> 00:22:02,479
if i do start yay

401
00:21:59,120 --> 00:22:05,120
i can be back my program um

402
00:22:02,480 --> 00:22:06,240
and this would be the scenario where you

403
00:22:05,120 --> 00:22:13,840
have a team

404
00:22:06,240 --> 00:22:13,840
which uh presents their their own uh

405
00:22:14,000 --> 00:22:19,120
built environments to the server

406
00:22:22,480 --> 00:22:30,400
it it it also works for system tab

407
00:22:26,320 --> 00:22:30,399
for example give me

408
00:22:30,720 --> 00:22:34,640
all the oh you can't see what it's

409
00:22:35,280 --> 00:22:41,840
uh right give me all the the

410
00:22:38,320 --> 00:22:41,840
functions in g lab c

411
00:22:42,000 --> 00:22:49,679
that started vf printf and

412
00:22:46,559 --> 00:22:53,200
it was too fast again it's

413
00:22:49,679 --> 00:22:56,000
actually it it got the dlfc debug

414
00:22:53,200 --> 00:22:56,640
files from the previous run because now

415
00:22:56,000 --> 00:22:59,679
they're

416
00:22:56,640 --> 00:23:04,159
in its guess

417
00:22:59,679 --> 00:23:08,640
okay the demo actually worked

418
00:23:04,159 --> 00:23:11,200
um was it too smooth

419
00:23:08,640 --> 00:23:13,600
probably it was yeah it should have

420
00:23:11,200 --> 00:23:13,600
crashed

421
00:23:15,200 --> 00:23:22,320
i should have made the network slower

422
00:23:19,120 --> 00:23:23,600
but what you can't see actually do i

423
00:23:22,320 --> 00:23:27,600
have it here

424
00:23:23,600 --> 00:23:33,360
that no i don't have it

425
00:23:27,600 --> 00:23:33,360
oh what uh oh i could do this yeah

426
00:23:34,159 --> 00:23:37,840
the server has

427
00:23:38,559 --> 00:23:46,799
well html page or actually

428
00:23:42,960 --> 00:23:46,799
these are statistics from

429
00:23:47,970 --> 00:23:52,880
[Music]

430
00:23:49,360 --> 00:23:56,240
prometheus the

431
00:23:52,880 --> 00:23:57,279
anyway people that do metrics like this

432
00:23:56,240 --> 00:24:00,480
style of

433
00:23:57,279 --> 00:24:04,640
presenting statistics uh

434
00:24:00,480 --> 00:24:08,159
well you you can see that the the little

435
00:24:04,640 --> 00:24:11,679
file server htb server

436
00:24:08,159 --> 00:24:15,520
knows about a lot of file names in

437
00:24:11,679 --> 00:24:18,799
two thousand uh 2400

438
00:24:15,520 --> 00:24:22,879
two built ids and it

439
00:24:18,799 --> 00:24:27,240
it actually worked really yeah

440
00:24:22,880 --> 00:24:30,240
okay how do i get back to my

441
00:24:27,240 --> 00:24:30,240
presentation

442
00:24:30,840 --> 00:24:33,840
uh

443
00:24:44,840 --> 00:24:47,840
sorry

444
00:24:49,200 --> 00:24:56,559
ah where's my

445
00:24:52,480 --> 00:24:56,559
where's my presentation sorry

446
00:24:58,840 --> 00:25:06,559
uh oh wait

447
00:25:01,520 --> 00:25:06,559
and now yeah okay

448
00:25:12,240 --> 00:25:15,840
that's good thank you

449
00:25:17,440 --> 00:25:19,679
okay

450
00:25:20,880 --> 00:25:25,690
okay so what what what what did we see

451
00:25:23,840 --> 00:25:26,840
what does it do

452
00:25:25,690 --> 00:25:29,520
[Music]

453
00:25:26,840 --> 00:25:32,879
um

454
00:25:29,520 --> 00:25:36,720
you put all your your uh your

455
00:25:32,880 --> 00:25:41,360
debugging profiles in in in directories

456
00:25:36,720 --> 00:25:44,880
uh it's uh you tell uh you can tell it

457
00:25:41,360 --> 00:25:48,158
to scan rpms depths uh uh

458
00:25:44,880 --> 00:25:51,760
for your full build what

459
00:25:48,159 --> 00:25:54,960
anything yeah wow it

460
00:25:51,760 --> 00:25:58,000
it it does need a a bit

461
00:25:54,960 --> 00:26:01,039
of information to cross-reference them

462
00:25:58,000 --> 00:26:03,840
uh especially for the yeah

463
00:26:01,039 --> 00:26:04,640
right for the the source files that's

464
00:26:03,840 --> 00:26:08,240
not always

465
00:26:04,640 --> 00:26:10,400
easy sometimes uh uh on fedora

466
00:26:08,240 --> 00:26:11,440
source files are put in a separate

467
00:26:10,400 --> 00:26:14,799
package from

468
00:26:11,440 --> 00:26:15,360
the actual debugging file so that is

469
00:26:14,799 --> 00:26:19,440
some

470
00:26:15,360 --> 00:26:22,559
what tricky this so um

471
00:26:19,440 --> 00:26:25,919
uh you you

472
00:26:22,559 --> 00:26:29,279
you can basically let the

473
00:26:25,919 --> 00:26:31,200
the server running it scans

474
00:26:29,279 --> 00:26:32,720
uh what you have if it is built

475
00:26:31,200 --> 00:26:35,840
directory it also will

476
00:26:32,720 --> 00:26:39,039
clean up what's not relevant anymore

477
00:26:35,840 --> 00:26:41,279
if you put new rpms there it will index

478
00:26:39,039 --> 00:26:41,279
them

479
00:26:41,520 --> 00:26:44,480
and uh

480
00:26:45,360 --> 00:26:52,799
well it's it's basically a little sql

481
00:26:49,360 --> 00:26:52,799
sqlite database

482
00:26:53,919 --> 00:26:56,159
and

483
00:26:59,840 --> 00:27:06,639
it it it also supports dwz

484
00:27:04,480 --> 00:27:08,640
which which makes the indexing also a

485
00:27:06,640 --> 00:27:12,240
bit tricky because

486
00:27:08,640 --> 00:27:15,919
uh dwc

487
00:27:12,240 --> 00:27:19,120
compresses debug info by

488
00:27:15,919 --> 00:27:22,240
putting common

489
00:27:19,120 --> 00:27:27,039
elements in a separate file

490
00:27:22,240 --> 00:27:30,080
but essentially a dwc file

491
00:27:27,039 --> 00:27:33,279
is also something with the belt id

492
00:27:30,080 --> 00:27:39,360
and you can just request it

493
00:27:33,279 --> 00:27:42,720
um i feel a question coming up there

494
00:27:39,360 --> 00:27:42,719
okay um

495
00:27:46,080 --> 00:27:52,158
it's it it's uh

496
00:27:49,679 --> 00:27:52,159
um

497
00:27:53,039 --> 00:28:00,840
well basically sqlite is nice that's

498
00:27:56,640 --> 00:28:03,840
that's a message from this this slide

499
00:28:00,840 --> 00:28:03,840
um

500
00:28:06,000 --> 00:28:10,080
yeah um it's

501
00:28:11,039 --> 00:28:17,760
all right yeah so um

502
00:28:14,640 --> 00:28:21,120
it it it it indexes everything

503
00:28:17,760 --> 00:28:25,679
and you can really nicely

504
00:28:21,120 --> 00:28:30,080
partition uh what you do because you can

505
00:28:25,679 --> 00:28:34,080
make servers query other servers

506
00:28:30,080 --> 00:28:38,639
the debugging for the server

507
00:28:34,080 --> 00:28:42,320
is also a client so you can say if

508
00:28:38,640 --> 00:28:45,760
you don't have the build id

509
00:28:42,320 --> 00:28:49,039
go one server up

510
00:28:45,760 --> 00:28:52,158
and you could do the same

511
00:28:49,039 --> 00:28:53,760
inside your company or your programming

512
00:28:52,159 --> 00:28:57,440
group where you

513
00:28:53,760 --> 00:29:02,080
have one server that

514
00:28:57,440 --> 00:29:02,080
questions all the others um

515
00:29:03,039 --> 00:29:09,360
yeah so the the uh the the

516
00:29:06,399 --> 00:29:10,320
the the client kisses everything which

517
00:29:09,360 --> 00:29:13,678
also means

518
00:29:10,320 --> 00:29:17,200
that uh the servers kiss

519
00:29:13,679 --> 00:29:20,640
uh everything uh and uh

520
00:29:17,200 --> 00:29:20,640
there is a uh

521
00:29:20,880 --> 00:29:25,120
and there is kind of a simple client in

522
00:29:24,080 --> 00:29:28,399
elf utils

523
00:29:25,120 --> 00:29:32,158
the debugging for the client

524
00:29:28,399 --> 00:29:35,279
but it's not much work to create your

525
00:29:32,159 --> 00:29:38,840
own clients the the simple client

526
00:29:35,279 --> 00:29:41,760
just uses lib curl and has

527
00:29:38,840 --> 00:29:46,799
a uh least

528
00:29:41,760 --> 00:29:49,840
recently used guess of files

529
00:29:46,799 --> 00:29:53,039
uh well basically you you you to

530
00:29:49,840 --> 00:29:54,320
to implement a client you have to be

531
00:29:53,039 --> 00:29:57,360
able to make http

532
00:29:54,320 --> 00:30:02,480
requests and that's it

533
00:29:57,360 --> 00:30:02,479
um so um

534
00:30:03,760 --> 00:30:09,600
oh this was the minute thank you

535
00:30:08,080 --> 00:30:13,279
this was actually the slide i was

536
00:30:09,600 --> 00:30:13,279
describing quite the client sorry

537
00:30:20,399 --> 00:30:28,000
let me go back what i should have said

538
00:30:24,159 --> 00:30:32,960
uh here now this is good

539
00:30:28,000 --> 00:30:36,640
i already said most of this but uh

540
00:30:32,960 --> 00:30:40,799
the the the scanning

541
00:30:36,640 --> 00:30:43,520
can take long mostly because uh the rpms

542
00:30:40,799 --> 00:30:43,520
uh are

543
00:30:45,200 --> 00:30:51,360
compressed the decompressing reading

544
00:30:48,240 --> 00:30:55,840
takes most of the time

545
00:30:51,360 --> 00:31:00,719
the database can become

546
00:30:55,840 --> 00:31:05,199
a bit large but that's mainly because

547
00:31:00,720 --> 00:31:09,360
there are is so much data

548
00:31:05,200 --> 00:31:09,360
especially if you try to

549
00:31:09,840 --> 00:31:13,678
index all the rpms in the fedora ecology

550
00:31:12,480 --> 00:31:18,240
build system

551
00:31:13,679 --> 00:31:21,360
that that is really big

552
00:31:18,240 --> 00:31:24,000
uh uh but

553
00:31:21,360 --> 00:31:26,399
in in these it's embarrassing parallel

554
00:31:24,000 --> 00:31:28,559
problem you you can just partition it

555
00:31:26,399 --> 00:31:30,000
you can have multiple directories

556
00:31:28,559 --> 00:31:33,840
multiple servers

557
00:31:30,000 --> 00:31:33,840
you can even merge databases

558
00:31:35,279 --> 00:31:40,559
um so like i said

559
00:31:41,279 --> 00:31:47,279
there is an implication of the server

560
00:31:44,559 --> 00:31:49,918
and of the client in elf utils that was

561
00:31:47,279 --> 00:31:52,960
released in

562
00:31:49,919 --> 00:31:58,159
last month i believe

563
00:31:52,960 --> 00:31:58,159
in 0 178

564
00:31:58,799 --> 00:32:05,760
there is now support for

565
00:32:02,559 --> 00:32:07,200
deb files and for more parallel parsing

566
00:32:05,760 --> 00:32:10,240
of

567
00:32:07,200 --> 00:32:14,000
your directory trees in the current kit

568
00:32:10,240 --> 00:32:17,120
directory for the next release

569
00:32:14,000 --> 00:32:20,880
uh there's a prototype gdp client

570
00:32:17,120 --> 00:32:24,639
on a branch it works perfectly

571
00:32:20,880 --> 00:32:24,640
tom are you going to review it

572
00:32:24,720 --> 00:32:31,519
yay there

573
00:32:28,240 --> 00:32:33,840
there are several clients on the way i

574
00:32:31,519 --> 00:32:35,840
i have a little list uh and there are

575
00:32:33,840 --> 00:32:40,240
already some public servers if you

576
00:32:35,840 --> 00:32:44,240
if you want to try it out right so

577
00:32:40,240 --> 00:32:45,840
this is actually already too old because

578
00:32:44,240 --> 00:32:48,720
the slide was made

579
00:32:45,840 --> 00:32:48,720
before the weekend

580
00:32:49,039 --> 00:32:53,519
but there's there are two experimental

581
00:32:51,279 --> 00:32:56,559
servers now

582
00:32:53,519 --> 00:32:59,679
one for system theft

583
00:32:56,559 --> 00:32:59,678
that frank is running

584
00:33:01,039 --> 00:33:05,760
and one for susa

585
00:33:07,440 --> 00:33:11,840
they are

586
00:33:14,159 --> 00:33:19,120
frank is trying to to get the most

587
00:33:17,919 --> 00:33:22,720
common

588
00:33:19,120 --> 00:33:25,840
binaries that you use with systemdev

589
00:33:22,720 --> 00:33:28,880
for all the different distros uh

590
00:33:25,840 --> 00:33:32,480
there uh the open sushi one

591
00:33:28,880 --> 00:33:34,000
tries to index all of the the tumbleweed

592
00:33:32,480 --> 00:33:37,039
is the

593
00:33:34,000 --> 00:33:40,240
last one uh for opensuse they're

594
00:33:37,039 --> 00:33:41,840
both experimental so if they don't work

595
00:33:40,240 --> 00:33:45,440
sorry

596
00:33:41,840 --> 00:33:48,639
but uh hope hopefully others

597
00:33:45,440 --> 00:33:53,840
uh do that we had a talk with

598
00:33:48,640 --> 00:33:57,200
um alex

599
00:33:53,840 --> 00:34:00,399
larson i believe who does the flatbacks

600
00:33:57,200 --> 00:34:05,039
and he was also looking at

601
00:34:00,399 --> 00:34:08,638
making a a server available that

602
00:34:05,039 --> 00:34:12,159
uh serves the the the debug info for

603
00:34:08,639 --> 00:34:12,480
for flatbacks uh and he actually wanted

604
00:34:12,159 --> 00:34:15,040
to

605
00:34:12,480 --> 00:34:16,719
write his own server but the server is

606
00:34:15,040 --> 00:34:19,759
so simple that

607
00:34:16,719 --> 00:34:20,638
you can also do that uh so for the

608
00:34:19,760 --> 00:34:23,679
clients

609
00:34:20,639 --> 00:34:26,879
uh uh

610
00:34:23,679 --> 00:34:27,918
so of course the lsu does tools use it

611
00:34:26,879 --> 00:34:32,480
by default

612
00:34:27,918 --> 00:34:36,000
uh system tab uses it

613
00:34:32,480 --> 00:34:40,480
because uh elf uterus provides it

614
00:34:36,000 --> 00:34:43,119
uh twice the same thing uh the

615
00:34:40,480 --> 00:34:43,679
bin neutral some vinegar totals can use

616
00:34:43,119 --> 00:34:47,040
it that's

617
00:34:43,679 --> 00:34:48,560
merged in git uh the gdb pets is

618
00:34:47,040 --> 00:34:51,679
proposed then

619
00:34:48,560 --> 00:34:56,078
tom is going to merge it no

620
00:34:51,679 --> 00:35:00,079
but and there are some in progress

621
00:34:56,079 --> 00:35:03,520
i believe another check was also

622
00:35:00,079 --> 00:35:06,800
recently done uh try

623
00:35:03,520 --> 00:35:10,079
reloading that page um

624
00:35:06,800 --> 00:35:13,440
there's also some help wanted uh

625
00:35:10,079 --> 00:35:17,040
and uh we volunteered

626
00:35:13,440 --> 00:35:17,680
aaron for most of the work but i'm sure

627
00:35:17,040 --> 00:35:21,839
he wants

628
00:35:17,680 --> 00:35:25,200
help um

629
00:35:21,839 --> 00:35:28,240
yeah so for the uh the

630
00:35:25,200 --> 00:35:29,680
client support would be nice either

631
00:35:28,240 --> 00:35:35,359
directly or using

632
00:35:29,680 --> 00:35:35,359
the elf utils a simple client

633
00:35:39,520 --> 00:35:46,160
okay i don't know what that is

634
00:35:43,599 --> 00:35:46,640
you should think about security for the

635
00:35:46,160 --> 00:35:50,000
server

636
00:35:46,640 --> 00:35:50,000
a bit more uh

637
00:35:51,839 --> 00:35:58,960
uh of course the cd became file needs

638
00:35:55,359 --> 00:36:00,400
always to be improved but that's

639
00:35:58,960 --> 00:36:02,640
if you can help with that that would be

640
00:36:00,400 --> 00:36:05,440
nice um

641
00:36:02,640 --> 00:36:06,640
if you could run a server for your own

642
00:36:05,440 --> 00:36:08,720
stuff

643
00:36:06,640 --> 00:36:10,400
that would also be nice let us know that

644
00:36:08,720 --> 00:36:13,200
we put you on the page and

645
00:36:10,400 --> 00:36:14,880
we get lots of people debugging your

646
00:36:13,200 --> 00:36:18,160
stuff because

647
00:36:14,880 --> 00:36:21,760
it's so easy uh

648
00:36:18,160 --> 00:36:24,480
well and and we i think we

649
00:36:21,760 --> 00:36:25,359
hit the right spots by making it file

650
00:36:24,480 --> 00:36:29,839
based

651
00:36:25,359 --> 00:36:29,839
built a built-in index

652
00:36:31,119 --> 00:36:38,320
but we might want to

653
00:36:35,280 --> 00:36:42,720
see if we can improve the protocol

654
00:36:38,320 --> 00:36:45,839
either by making things uh

655
00:36:42,720 --> 00:36:49,118
making it smaller for example i

656
00:36:45,839 --> 00:36:52,078
just want to die tree for

657
00:36:49,119 --> 00:36:53,359
this thing or just the foul table so i

658
00:36:52,079 --> 00:36:57,760
don't have to have the

659
00:36:53,359 --> 00:36:59,839
whole debug file

660
00:36:57,760 --> 00:37:01,200
and maybe the other way around for

661
00:36:59,839 --> 00:37:04,880
example if you

662
00:37:01,200 --> 00:37:08,960
try to trace all the

663
00:37:04,880 --> 00:37:12,880
modules in the kernel then uh you'll

664
00:37:08,960 --> 00:37:15,920
currently have to fetch 2000

665
00:37:12,880 --> 00:37:18,800
debug info files separately and

666
00:37:15,920 --> 00:37:22,000
maybe you can batch that but i think the

667
00:37:18,800 --> 00:37:25,920
the current setup is so simple that

668
00:37:22,000 --> 00:37:25,920
it's good that we started with this

669
00:37:26,480 --> 00:37:37,839
do i have time for questions okay

670
00:37:38,079 --> 00:37:48,400
but there are no questions but i was

671
00:37:47,520 --> 00:37:51,839
curious

672
00:37:48,400 --> 00:37:51,839
what was wrong

673
00:37:54,800 --> 00:37:58,079
what was wrong with the next approach

674
00:37:57,200 --> 00:38:01,359
you mean

675
00:37:58,079 --> 00:38:05,839
uh yeah

676
00:38:01,359 --> 00:38:05,839
yeah um

677
00:38:06,320 --> 00:38:10,320
well there there's nothing wrong with it

678
00:38:08,800 --> 00:38:13,839
but

679
00:38:10,320 --> 00:38:16,839
it it is a much more complicated

680
00:38:13,839 --> 00:38:19,119
client it's a fuse file system which is

681
00:38:16,839 --> 00:38:21,359
nice

682
00:38:19,119 --> 00:38:21,359
and

683
00:38:23,200 --> 00:38:28,640
i i think what we have now is easier to

684
00:38:26,560 --> 00:38:32,160
set up and easier to federate

685
00:38:28,640 --> 00:38:36,319
and i think that's something that

686
00:38:32,160 --> 00:38:39,359
is good

687
00:38:36,320 --> 00:38:43,359
i i think you could maybe take

688
00:38:39,359 --> 00:38:47,839
that fuse file system

689
00:38:43,359 --> 00:38:47,839
approach and build it on top of this

690
00:38:51,680 --> 00:38:58,480
yes come on is the

691
00:38:55,040 --> 00:39:00,400
server being run on

692
00:38:58,480 --> 00:39:02,160
does it have to be run where your build

693
00:39:00,400 --> 00:39:04,800
directory is

694
00:39:02,160 --> 00:39:06,078
um because potentially if that's the

695
00:39:04,800 --> 00:39:09,520
build directory it's also the

696
00:39:06,079 --> 00:39:14,640
host maybe it might be

697
00:39:09,520 --> 00:39:16,880
yeah so so the uh

698
00:39:14,640 --> 00:39:18,240
yes it has to have access to your wealth

699
00:39:16,880 --> 00:39:20,560
directly but you could

700
00:39:18,240 --> 00:39:21,759
maybe have your belt directly mounted

701
00:39:20,560 --> 00:39:24,560
yeah

702
00:39:21,760 --> 00:39:25,200
but but you're right that is one of the

703
00:39:24,560 --> 00:39:28,240
things

704
00:39:25,200 --> 00:39:31,359
that's also why we have separate

705
00:39:28,240 --> 00:39:33,839
indexing of rpms and whole foul

706
00:39:31,359 --> 00:39:33,839
trees

707
00:39:38,880 --> 00:39:46,960
you could you could make it smaller the

708
00:39:42,160 --> 00:39:49,118
the interesting thing about

709
00:39:46,960 --> 00:39:51,280
having it on the host is that you are

710
00:39:49,119 --> 00:39:56,800
sure to also have all the

711
00:39:51,280 --> 00:39:59,280
header files as installed on the host

712
00:39:56,800 --> 00:40:00,240
so in a way you you have to have it on

713
00:39:59,280 --> 00:40:03,599
the house to

714
00:40:00,240 --> 00:40:06,720
have the complete picture

715
00:40:03,599 --> 00:40:11,839
okay i think i stopped before

716
00:40:06,720 --> 00:40:11,839
being dragged off the stage

717
00:40:13,680 --> 00:40:15,759
you

