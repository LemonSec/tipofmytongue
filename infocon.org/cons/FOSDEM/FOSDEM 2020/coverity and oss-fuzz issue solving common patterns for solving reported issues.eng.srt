1
00:00:06,240 --> 00:00:09,360
okay uh this is the

2
00:00:07,600 --> 00:00:11,280
coverity you know says fuzz issue

3
00:00:09,360 --> 00:00:12,959
solving thing so what i've done here is

4
00:00:11,280 --> 00:00:15,200
i've left out all of the simple stuff so

5
00:00:12,960 --> 00:00:17,760
if any simple bugs reported us

6
00:00:15,200 --> 00:00:18,480
not really yet at heart here it's just

7
00:00:17,760 --> 00:00:21,359
the more

8
00:00:18,480 --> 00:00:22,000
interesting things uh techniques to get

9
00:00:21,359 --> 00:00:24,400
rid of

10
00:00:22,000 --> 00:00:26,560
more complicated coverity warnings and

11
00:00:24,400 --> 00:00:28,959
ways to solve some of the uss fuzz

12
00:00:26,560 --> 00:00:30,160
uh issues that arise as well there will

13
00:00:28,960 --> 00:00:31,679
be lots of um

14
00:00:30,160 --> 00:00:33,600
3d slide transitions to keep you

15
00:00:31,679 --> 00:00:34,399
entertained and also to make sure that

16
00:00:33,600 --> 00:00:36,640
they work

17
00:00:34,399 --> 00:00:38,079
i did all my development version where

18
00:00:36,640 --> 00:00:38,640
the slide transitions worked perfectly

19
00:00:38,079 --> 00:00:40,000
fine

20
00:00:38,640 --> 00:00:42,399
and then they didn't actually work in

21
00:00:40,000 --> 00:00:45,680
the fedora version which can be tracked

22
00:00:42,399 --> 00:00:48,000
down to a change in how glm works

23
00:00:45,680 --> 00:00:49,920
and there's a fedora updates testing

24
00:00:48,000 --> 00:00:52,239
there since yesterday that has slide

25
00:00:49,920 --> 00:00:54,480
transitions working for fedora again

26
00:00:52,239 --> 00:00:55,599
so i guess tradition as a traditional

27
00:00:54,480 --> 00:00:57,120
traditional

28
00:00:55,600 --> 00:00:58,800
going to the conferences make to use

29
00:00:57,120 --> 00:01:00,959
your own software to realize what bugs

30
00:00:58,800 --> 00:01:02,480
need to be fixed

31
00:01:00,960 --> 00:01:05,040
all right so the configuration we have

32
00:01:02,480 --> 00:01:05,920
for coverity uh where coverity works is

33
00:01:05,040 --> 00:01:07,680
that you build

34
00:01:05,920 --> 00:01:09,200
it locally on your side and then that

35
00:01:07,680 --> 00:01:11,119
outputs a great big blob

36
00:01:09,200 --> 00:01:13,360
which is uploaded to their server and

37
00:01:11,119 --> 00:01:16,320
their server does the analysis and that

38
00:01:13,360 --> 00:01:17,520
so in the at least in the open source

39
00:01:16,320 --> 00:01:19,520
version that we use

40
00:01:17,520 --> 00:01:21,280
you don't check results locally you have

41
00:01:19,520 --> 00:01:22,798
to use their website and their output to

42
00:01:21,280 --> 00:01:24,960
see what um

43
00:01:22,799 --> 00:01:26,799
the results are the way we've configured

44
00:01:24,960 --> 00:01:28,798
nowadays is that it's fully public

45
00:01:26,799 --> 00:01:30,720
and passive it defaults to private you

46
00:01:28,799 --> 00:01:31,600
get a chance to look at the bugs first

47
00:01:30,720 --> 00:01:33,039
yourself

48
00:01:31,600 --> 00:01:34,720
and decide whether to make them public

49
00:01:33,040 --> 00:01:36,640
or not

50
00:01:34,720 --> 00:01:38,240
once we fixed all of the bugs we decided

51
00:01:36,640 --> 00:01:40,000
to be public

52
00:01:38,240 --> 00:01:42,000
because we had no legacy issues that we

53
00:01:40,000 --> 00:01:44,240
needed to be concerned about anymore

54
00:01:42,000 --> 00:01:45,680
so if you have ever applied to be a

55
00:01:44,240 --> 00:01:46,798
member of any of these projects you

56
00:01:45,680 --> 00:01:48,320
don't need to be a member of the

57
00:01:46,799 --> 00:01:50,079
libreoffice when all the issues are

58
00:01:48,320 --> 00:01:52,798
public

59
00:01:50,079 --> 00:01:54,639
um in the older versions of coverity

60
00:01:52,799 --> 00:01:56,640
your project was either c plus plus one

61
00:01:54,640 --> 00:01:57,920
or java one now it picks up both java

62
00:01:56,640 --> 00:02:00,320
and c plus plus

63
00:01:57,920 --> 00:02:00,960
in uh libreoffice and reports issues on

64
00:02:00,320 --> 00:02:04,158
both

65
00:02:00,960 --> 00:02:06,880
languages uh coverity does not support

66
00:02:04,159 --> 00:02:08,000
uh c plus plus 2a but does relatively

67
00:02:06,880 --> 00:02:10,878
recently support c plus

68
00:02:08,000 --> 00:02:11,920
plus 17 which means that we patch our

69
00:02:10,878 --> 00:02:14,799
configure to

70
00:02:11,920 --> 00:02:15,839
uh go down back down to c plus plus 17

71
00:02:14,800 --> 00:02:18,879
to get it past

72
00:02:15,840 --> 00:02:20,480
the converity tooling and we only scan

73
00:02:18,879 --> 00:02:22,480
libreoffice itself we don't worry about

74
00:02:20,480 --> 00:02:23,359
any of the third party projects that we

75
00:02:22,480 --> 00:02:25,440
use

76
00:02:23,360 --> 00:02:27,280
some of those are scanned separately and

77
00:02:25,440 --> 00:02:29,520
some of them other people's issues

78
00:02:27,280 --> 00:02:31,599
this is how the website that you see the

79
00:02:29,520 --> 00:02:33,760
results looks in

80
00:02:31,599 --> 00:02:34,879
the results are emailed to the list but

81
00:02:33,760 --> 00:02:36,879
the ui

82
00:02:34,879 --> 00:02:38,079
on the website is superior when you have

83
00:02:36,879 --> 00:02:39,599
a non-trivial issue

84
00:02:38,080 --> 00:02:41,440
there's an example case of something

85
00:02:39,599 --> 00:02:45,518
where there's a uninitialized

86
00:02:41,440 --> 00:02:47,760
members and it's just reported like that

87
00:02:45,519 --> 00:02:49,280
a lot of the warnings that coverty gives

88
00:02:47,760 --> 00:02:52,560
are kind of heuristic based

89
00:02:49,280 --> 00:02:54,239
as opposed to like a guaranteed

90
00:02:52,560 --> 00:02:57,599
well our heuristic base in the sense

91
00:02:54,239 --> 00:02:59,760
that um if there are no

92
00:02:57,599 --> 00:03:01,280
members initialized in your structure

93
00:02:59,760 --> 00:03:02,239
won't warn about that it assumes you

94
00:03:01,280 --> 00:03:03,920
know what you're doing

95
00:03:02,239 --> 00:03:05,920
if you initialize most of them but then

96
00:03:03,920 --> 00:03:07,518
not one or two it'll warn about that

97
00:03:05,920 --> 00:03:09,119
the same is true for a lot of the cases

98
00:03:07,519 --> 00:03:10,640
that it'll look

99
00:03:09,120 --> 00:03:12,959
kind of statistically whether or not

100
00:03:10,640 --> 00:03:15,760
things are out of

101
00:03:12,959 --> 00:03:17,200
abnormal so your code can be unchanged

102
00:03:15,760 --> 00:03:18,799
somebody can delete a couple of

103
00:03:17,200 --> 00:03:20,399
lines of code and that means the

104
00:03:18,800 --> 00:03:21,120
statistics for this particular pattern

105
00:03:20,400 --> 00:03:23,200
changes

106
00:03:21,120 --> 00:03:24,640
so you get new warnings even though new

107
00:03:23,200 --> 00:03:25,760
no change has been made to the code

108
00:03:24,640 --> 00:03:27,760
that's been warned about

109
00:03:25,760 --> 00:03:29,679
the overall state has changed so

110
00:03:27,760 --> 00:03:31,760
warnings can appear and disappear

111
00:03:29,680 --> 00:03:33,280
not with nothing to do with the actual

112
00:03:31,760 --> 00:03:36,000
lines of code being reported

113
00:03:33,280 --> 00:03:37,040
so you'll see like if there's 55 times

114
00:03:36,000 --> 00:03:39,040
somebody checks the

115
00:03:37,040 --> 00:03:40,239
return value and then the case is

116
00:03:39,040 --> 00:03:41,280
introduced and it doesn't

117
00:03:40,239 --> 00:03:43,440
then that's something that's worth

118
00:03:41,280 --> 00:03:44,480
flagging but if it's 30 30 and then

119
00:03:43,440 --> 00:03:46,720
somebody changes

120
00:03:44,480 --> 00:03:48,798
one of them then the changes is from 29

121
00:03:46,720 --> 00:03:49,440
30 and then you might get 29 warnings

122
00:03:48,799 --> 00:03:52,480
saying that

123
00:03:49,440 --> 00:03:55,519
return value isn't checked so that's why

124
00:03:52,480 --> 00:03:58,480
things sometimes appear and disappear

125
00:03:55,519 --> 00:04:00,000
if you want to wave a warning you can

126
00:03:58,480 --> 00:04:01,439
just do it directly in the web interface

127
00:04:00,000 --> 00:04:03,519
you can say this is not a warning this

128
00:04:01,439 --> 00:04:04,799
is a false positive this is intentional

129
00:04:03,519 --> 00:04:06,799
but if you do that and you have two

130
00:04:04,799 --> 00:04:08,319
issues first issue is that if the code

131
00:04:06,799 --> 00:04:09,840
changes efficiently that converges can

132
00:04:08,319 --> 00:04:11,518
no longer track that it's the same code

133
00:04:09,840 --> 00:04:13,280
the warning will reappear

134
00:04:11,519 --> 00:04:14,720
and then that only affects that clarity

135
00:04:13,280 --> 00:04:16,959
instance inside red hat

136
00:04:14,720 --> 00:04:18,639
we run another instance of coverity and

137
00:04:16,959 --> 00:04:19,680
we put libreoffice through the paces on

138
00:04:18,639 --> 00:04:21,519
that one as well

139
00:04:19,680 --> 00:04:23,520
so if i get rid of false positives in

140
00:04:21,519 --> 00:04:24,880
one i don't get rid of them in the other

141
00:04:23,520 --> 00:04:26,719
unless i do something that can be

142
00:04:24,880 --> 00:04:29,840
detected by both instances

143
00:04:26,720 --> 00:04:32,960
so we have the annotation stuff here

144
00:04:29,840 --> 00:04:36,000
there's two possibilities for annotation

145
00:04:32,960 --> 00:04:37,280
which i know work and i've seen

146
00:04:36,000 --> 00:04:39,040
documented

147
00:04:37,280 --> 00:04:41,039
in our own internal documentation red

148
00:04:39,040 --> 00:04:43,520
hat but seems to be hard to find

149
00:04:41,040 --> 00:04:45,120
out on the public web which is that if

150
00:04:43,520 --> 00:04:47,599
you use the

151
00:04:45,120 --> 00:04:49,120
um warning name that i'd highlight in

152
00:04:47,600 --> 00:04:50,720
the earlier slide you'll initialize

153
00:04:49,120 --> 00:04:52,400
members put it between the brackets

154
00:04:50,720 --> 00:04:54,479
converted whatever

155
00:04:52,400 --> 00:04:56,000
and put an optional comment it becomes

156
00:04:54,479 --> 00:04:58,080
marked as an intentional

157
00:04:56,000 --> 00:04:59,040
issue inside in the web interface but

158
00:04:58,080 --> 00:05:00,960
then if you use the

159
00:04:59,040 --> 00:05:02,960
space full colon false it's marked as a

160
00:05:00,960 --> 00:05:05,599
false positive automatically

161
00:05:02,960 --> 00:05:07,120
which is convenient so here then the top

162
00:05:05,600 --> 00:05:07,840
one is inside in calc where there's a

163
00:05:07,120 --> 00:05:10,000
struct

164
00:05:07,840 --> 00:05:10,880
that's deliberately not initialized it

165
00:05:10,000 --> 00:05:12,560
has some

166
00:05:10,880 --> 00:05:14,479
an ou string member which is a default

167
00:05:12,560 --> 00:05:17,520
constructor so some of its

168
00:05:14,479 --> 00:05:19,280
members are initializing others not you

169
00:05:17,520 --> 00:05:21,440
can say that they're all deliberately

170
00:05:19,280 --> 00:05:22,479
not initialized with that one it's an

171
00:05:21,440 --> 00:05:23,440
intentional issue

172
00:05:22,479 --> 00:05:24,800
and then the other one is where there's

173
00:05:23,440 --> 00:05:26,320
a copy and paste error which is just

174
00:05:24,800 --> 00:05:27,600
completely spurious

175
00:05:26,320 --> 00:05:30,080
and that can be marked as a false

176
00:05:27,600 --> 00:05:30,080
positive

177
00:05:30,639 --> 00:05:34,639
then the other annotation is that you

178
00:05:32,160 --> 00:05:35,440
can set a a a function to be told that

179
00:05:34,639 --> 00:05:37,120
it's like a

180
00:05:35,440 --> 00:05:38,880
fatal function that this function is

181
00:05:37,120 --> 00:05:40,720
called that's your program will

182
00:05:38,880 --> 00:05:43,120
terminate at that point

183
00:05:40,720 --> 00:05:45,360
and that's automatically in place for

184
00:05:43,120 --> 00:05:47,120
things like assert and abort obviously

185
00:05:45,360 --> 00:05:48,479
and then you can add annotations in our

186
00:05:47,120 --> 00:05:51,680
case to the cpp

187
00:05:48,479 --> 00:05:53,280
unit um call that reports an error how

188
00:05:51,680 --> 00:05:55,039
it actually reports and errors it throws

189
00:05:53,280 --> 00:05:57,198
an exception that's unhandled

190
00:05:55,039 --> 00:05:58,960
so if you leave things in their default

191
00:05:57,199 --> 00:06:00,960
state you get 5000 warnings saying that

192
00:05:58,960 --> 00:06:03,440
you won't handle exceptions labor office

193
00:06:00,960 --> 00:06:05,039
but they're all from the deliberately

194
00:06:03,440 --> 00:06:06,400
it's meant to deliberately fail in our

195
00:06:05,039 --> 00:06:08,159
cpp unit test

196
00:06:06,400 --> 00:06:09,440
so that's annotated as being a fatal

197
00:06:08,160 --> 00:06:12,160
function once that's called

198
00:06:09,440 --> 00:06:13,919
um a coverity knows that it's uh the end

199
00:06:12,160 --> 00:06:14,639
of execution and that any of follow-up

200
00:06:13,919 --> 00:06:17,440
issues

201
00:06:14,639 --> 00:06:19,360
are can be just dismissed automatically

202
00:06:17,440 --> 00:06:21,600
we run the converting runs with the

203
00:06:19,360 --> 00:06:23,919
enable assert always abort so any

204
00:06:21,600 --> 00:06:25,759
a search that you put in will also if

205
00:06:23,919 --> 00:06:27,680
triggered uh terminate flow

206
00:06:25,759 --> 00:06:28,960
so if you were to run without that flag

207
00:06:27,680 --> 00:06:30,160
you would find that there are warnings

208
00:06:28,960 --> 00:06:32,000
inside libreoffice that

209
00:06:30,160 --> 00:06:33,919
would not be handled but because we say

210
00:06:32,000 --> 00:06:35,120
assert is fatal which means that we

211
00:06:33,919 --> 00:06:36,719
really mean what we

212
00:06:35,120 --> 00:06:38,880
save when we have an assert we say and

213
00:06:36,720 --> 00:06:41,440
assert will not happen

214
00:06:38,880 --> 00:06:43,360
so they're not for use for like trivial

215
00:06:41,440 --> 00:06:45,919
issues use your warrants instead

216
00:06:43,360 --> 00:06:47,520
because you are removing them from the

217
00:06:45,919 --> 00:06:48,560
source code analysis if you use an

218
00:06:47,520 --> 00:06:52,080
assert that's not

219
00:06:48,560 --> 00:06:55,120
true assert that's really difficult

220
00:06:52,080 --> 00:06:56,560
um sometimes is the tainted data you

221
00:06:55,120 --> 00:06:58,479
want to know if something is chained to

222
00:06:56,560 --> 00:07:00,720
data if you're reading data from a

223
00:06:58,479 --> 00:07:01,520
a file farmer to microsoft office binary

224
00:07:00,720 --> 00:07:03,280
file format

225
00:07:01,520 --> 00:07:04,799
if the values are untrusted if it says

226
00:07:03,280 --> 00:07:07,758
that there's you know

227
00:07:04,800 --> 00:07:09,520
minus one uh values to follow and then

228
00:07:07,759 --> 00:07:10,639
you try to allocate minus one value then

229
00:07:09,520 --> 00:07:12,318
you have an issue there

230
00:07:10,639 --> 00:07:14,080
so you want to know that this data is

231
00:07:12,319 --> 00:07:15,599
untrusted but there are cases for

232
00:07:14,080 --> 00:07:17,680
coverity

233
00:07:15,599 --> 00:07:19,120
i will say this data is untrusted but

234
00:07:17,680 --> 00:07:20,800
you happen to know that that data is

235
00:07:19,120 --> 00:07:21,680
data that's shipped with libreoffice and

236
00:07:20,800 --> 00:07:24,960
it actually is

237
00:07:21,680 --> 00:07:26,639
trusted data so in this case

238
00:07:24,960 --> 00:07:29,599
in this example we don't want to say

239
00:07:26,639 --> 00:07:31,520
that all values that come back from that

240
00:07:29,599 --> 00:07:33,039
function are trusted but just in this

241
00:07:31,520 --> 00:07:35,680
specific case we trust

242
00:07:33,039 --> 00:07:37,199
uh that data and this markup here uh

243
00:07:35,680 --> 00:07:38,000
calling converity chain to down to

244
00:07:37,199 --> 00:07:39,919
standardize

245
00:07:38,000 --> 00:07:42,400
will say that this data is trusted and

246
00:07:39,919 --> 00:07:44,878
that removes that issue

247
00:07:42,400 --> 00:07:46,000
uh this all comes back from the the

248
00:07:44,879 --> 00:07:48,720
heart bleed

249
00:07:46,000 --> 00:07:50,560
issue in openssl and at that point uh

250
00:07:48,720 --> 00:07:52,800
coverty added this support by

251
00:07:50,560 --> 00:07:53,840
detecting common bite-swapping

252
00:07:52,800 --> 00:07:56,960
techniques as being

253
00:07:53,840 --> 00:08:00,318
a way to know that certain data is

254
00:07:56,960 --> 00:08:02,000
tainted so the other solution um

255
00:08:00,319 --> 00:08:04,319
whether it still works or not i haven't

256
00:08:02,000 --> 00:08:06,960
double checked is that if you use

257
00:08:04,319 --> 00:08:08,160
the then documented non-standard

258
00:08:06,960 --> 00:08:10,080
swapping pattern

259
00:08:08,160 --> 00:08:11,199
then coverity will not consider that

260
00:08:10,080 --> 00:08:12,719
that as tainted

261
00:08:11,199 --> 00:08:14,720
so if you wanted to say that all data

262
00:08:12,720 --> 00:08:16,080
that comes back from this function can

263
00:08:14,720 --> 00:08:17,599
be trusted

264
00:08:16,080 --> 00:08:19,440
despite the bite swapping you can bite

265
00:08:17,599 --> 00:08:24,479
swap in that style and

266
00:08:19,440 --> 00:08:26,000
apparently it will consider it untainted

267
00:08:24,479 --> 00:08:28,080
and if you just wanted to actually test

268
00:08:26,000 --> 00:08:28,720
your data properly in the case where you

269
00:08:28,080 --> 00:08:30,800
are reading

270
00:08:28,720 --> 00:08:32,159
untrusted data then any kind of a check

271
00:08:30,800 --> 00:08:34,320
at all on the data

272
00:08:32,159 --> 00:08:35,919
will consider it to be validated so here

273
00:08:34,320 --> 00:08:38,320
i've checked to make sure that

274
00:08:35,919 --> 00:08:39,760
the link to the resources is is possible

275
00:08:38,320 --> 00:08:41,279
within the lend of that file

276
00:08:39,760 --> 00:08:42,799
it's unsigned so there's no need to

277
00:08:41,279 --> 00:08:44,880
check for less than zero if it was

278
00:08:42,799 --> 00:08:46,560
signed you have to check both

279
00:08:44,880 --> 00:08:48,240
ends of it otherwise it'll be considered

280
00:08:46,560 --> 00:08:54,640
unchecked you get a lot of that

281
00:08:48,240 --> 00:08:57,680
especially in the image filters uh

282
00:08:54,640 --> 00:08:59,040
yeah sliding stuff um the other thing

283
00:08:57,680 --> 00:09:02,239
that's difficult to deal with

284
00:08:59,040 --> 00:09:03,920
in uh coverity is its handling is

285
00:09:02,240 --> 00:09:05,760
its tracking of exceptions it's very

286
00:09:03,920 --> 00:09:08,000
good at tracking where an exception

287
00:09:05,760 --> 00:09:09,519
could be thrown from which gives us a

288
00:09:08,000 --> 00:09:11,200
lot of

289
00:09:09,519 --> 00:09:13,040
exception warnings in areas where in

290
00:09:11,200 --> 00:09:15,279
practice it's not going to happen

291
00:09:13,040 --> 00:09:16,319
typically you get something like from

292
00:09:15,279 --> 00:09:17,439
the configuration where the

293
00:09:16,320 --> 00:09:19,440
configuration could

294
00:09:17,440 --> 00:09:21,200
throw but that configuration is going to

295
00:09:19,440 --> 00:09:22,880
throw the first time it's red

296
00:09:21,200 --> 00:09:24,640
and typically like you read maybe it

297
00:09:22,880 --> 00:09:25,920
started a constructor and then you read

298
00:09:24,640 --> 00:09:27,920
the same

299
00:09:25,920 --> 00:09:29,439
configuration data in the destructor

300
00:09:27,920 --> 00:09:31,760
when it comes into this structure and if

301
00:09:29,440 --> 00:09:34,000
there's a for instance a standard unique

302
00:09:31,760 --> 00:09:35,360
pointer which cannot have any exceptions

303
00:09:34,000 --> 00:09:37,839
to ensure

304
00:09:35,360 --> 00:09:39,040
it's going to uh you're going to be told

305
00:09:37,839 --> 00:09:39,680
that it's going to abort it ever

306
00:09:39,040 --> 00:09:41,519
happened

307
00:09:39,680 --> 00:09:42,880
but it's not going to happen i mean it

308
00:09:41,519 --> 00:09:44,320
could happen if somebody deleted the

309
00:09:42,880 --> 00:09:45,200
configuration while your program is

310
00:09:44,320 --> 00:09:47,120
running but

311
00:09:45,200 --> 00:09:48,399
in practice it's not going to happen so

312
00:09:47,120 --> 00:09:50,000
how are you going to get rid of these

313
00:09:48,399 --> 00:09:51,600
you can either come up with a really

314
00:09:50,000 --> 00:09:53,040
convoluted scheme of catching the

315
00:09:51,600 --> 00:09:54,240
exceptions but it's all just going to

316
00:09:53,040 --> 00:09:56,319
make your code

317
00:09:54,240 --> 00:09:57,279
a complete mess or just accept that it's

318
00:09:56,320 --> 00:09:59,040
not going to happen

319
00:09:57,279 --> 00:10:02,160
you want to hear about other cases like

320
00:09:59,040 --> 00:10:04,399
that but just not in this specific case

321
00:10:02,160 --> 00:10:06,480
so when you get that warning the most

322
00:10:04,399 --> 00:10:07,760
recent one was just yesterday before

323
00:10:06,480 --> 00:10:10,320
and you have your standard knee pointer

324
00:10:07,760 --> 00:10:12,800
you can pass in the deleted parameter

325
00:10:10,320 --> 00:10:15,279
and the data parameters of that o3 tl

326
00:10:12,800 --> 00:10:16,000
default delete which when it's not

327
00:10:15,279 --> 00:10:17,519
running in

328
00:10:16,000 --> 00:10:19,519
when it's not compiled and converted it

329
00:10:17,519 --> 00:10:21,040
just does the standard delete

330
00:10:19,519 --> 00:10:22,480
and you assume that that exception isn't

331
00:10:21,040 --> 00:10:23,920
going to happen and just to tell

332
00:10:22,480 --> 00:10:24,480
conversion not to worry about it you

333
00:10:23,920 --> 00:10:26,079
have

334
00:10:24,480 --> 00:10:27,920
effectively that it's not exactly the

335
00:10:26,079 --> 00:10:28,800
same code i shrunk it to fit in the

336
00:10:27,920 --> 00:10:30,399
slide

337
00:10:28,800 --> 00:10:32,560
and then you can see that if underscore

338
00:10:30,399 --> 00:10:33,839
underscore converity underscore under

339
00:10:32,560 --> 00:10:35,599
is defined you know that you're running

340
00:10:33,839 --> 00:10:38,240
under converting and then that silences

341
00:10:35,600 --> 00:10:38,959
uh that whole set of warnings so that

342
00:10:38,240 --> 00:10:41,519
you don't have to

343
00:10:38,959 --> 00:10:42,399
worry about all right so those kind of

344
00:10:41,519 --> 00:10:44,480
uh

345
00:10:42,399 --> 00:10:46,399
trips and tips and techniques we've been

346
00:10:44,480 --> 00:10:47,839
using to get conversion numbers low

347
00:10:46,399 --> 00:10:49,440
to get it manageable and what we always

348
00:10:47,839 --> 00:10:52,480
want to really hear about is

349
00:10:49,440 --> 00:10:54,320
changes in warnings from conversion so

350
00:10:52,480 --> 00:10:56,079
this is yesterday's uh stats and

351
00:10:54,320 --> 00:10:58,560
converted in 20.

352
00:10:56,079 --> 00:11:00,399
so we just fixed um the last warning

353
00:10:58,560 --> 00:11:02,880
there again so we're back down to

354
00:11:00,399 --> 00:11:04,320
zero warnings and the number of code we

355
00:11:02,880 --> 00:11:06,160
have you can see that we're analyzing

356
00:11:04,320 --> 00:11:08,160
6.1 million lines of code

357
00:11:06,160 --> 00:11:09,800
we're down from about 6.5 million lines

358
00:11:08,160 --> 00:11:12,399
of code since

359
00:11:09,800 --> 00:11:13,680
2018 so we've actually shrunk our code

360
00:11:12,399 --> 00:11:15,680
quite a bit which is

361
00:11:13,680 --> 00:11:18,239
nice hasn't happened for a while and

362
00:11:15,680 --> 00:11:21,040
those are the figures we have there

363
00:11:18,240 --> 00:11:22,079
the other set i have as well is a

364
00:11:21,040 --> 00:11:23,760
timeline

365
00:11:22,079 --> 00:11:26,160
of how many bugs he started off with

366
00:11:23,760 --> 00:11:26,880
back in 2014 and shrunken all the way

367
00:11:26,160 --> 00:11:28,240
down

368
00:11:26,880 --> 00:11:29,760
and the various gaps and then you see

369
00:11:28,240 --> 00:11:31,440
there's a gap there where we didn't have

370
00:11:29,760 --> 00:11:32,160
the ability to run covertly for a couple

371
00:11:31,440 --> 00:11:34,160
of months

372
00:11:32,160 --> 00:11:35,920
because we required c plus plus 17 and

373
00:11:34,160 --> 00:11:37,439
there wasn't c plus plus 17 supporting

374
00:11:35,920 --> 00:11:40,399
converting until

375
00:11:37,440 --> 00:11:42,079
whatever july last year so the numbers

376
00:11:40,399 --> 00:11:43,440
rise when it's not being constantly kept

377
00:11:42,079 --> 00:11:45,359
under control

378
00:11:43,440 --> 00:11:47,680
yeah so that's the end of the coverity

379
00:11:45,360 --> 00:11:47,680
section

380
00:11:49,839 --> 00:11:53,760
so the oss fuzz that's where there's a

381
00:11:52,480 --> 00:11:57,040
huge big giant set of

382
00:11:53,760 --> 00:12:01,279
uh core set aside on google's

383
00:11:57,040 --> 00:12:01,279
cloud where it poses documents

384
00:12:01,839 --> 00:12:09,120
for us in this case

385
00:12:05,680 --> 00:12:11,120
they build on their side our project

386
00:12:09,120 --> 00:12:12,800
on their compilers and their hardware

387
00:12:11,120 --> 00:12:14,240
they call our script

388
00:12:12,800 --> 00:12:16,240
uh that script which we'll find in our

389
00:12:14,240 --> 00:12:18,000
source tree which uh builds

390
00:12:16,240 --> 00:12:20,240
uh the various buzzers in our

391
00:12:18,000 --> 00:12:21,839
configuration so we've fortified them

392
00:12:20,240 --> 00:12:23,600
fuzzy targets we've got all of the

393
00:12:21,839 --> 00:12:27,040
graphics file formats bmp

394
00:12:23,600 --> 00:12:28,320
gif png jpg etc etc then the file

395
00:12:27,040 --> 00:12:30,319
formats such as like doc

396
00:12:28,320 --> 00:12:32,800
excel and all those ones our own file

397
00:12:30,320 --> 00:12:34,480
formats in the flat version so flat odt

398
00:12:32,800 --> 00:12:36,399
flat odf and all them

399
00:12:34,480 --> 00:12:37,839
so there's 45 individual targets and

400
00:12:36,399 --> 00:12:39,920
then they build them on their side in

401
00:12:37,839 --> 00:12:42,079
three different configurations

402
00:12:39,920 --> 00:12:43,279
uh two lib photo ones the address

403
00:12:42,079 --> 00:12:45,599
sanitizer

404
00:12:43,279 --> 00:12:47,279
uh the undefined behavior sanitizer and

405
00:12:45,600 --> 00:12:48,000
then there's one with the american fuzzy

406
00:12:47,279 --> 00:12:49,760
lap

407
00:12:48,000 --> 00:12:51,519
fuzzer which basically is the address

408
00:12:49,760 --> 00:12:54,000
sanitizer version of that as well

409
00:12:51,519 --> 00:12:57,839
so the three of them are build or run

410
00:12:54,000 --> 00:13:00,480
continuously giving 135 running away

411
00:12:57,839 --> 00:13:00,480
constantly

412
00:13:01,200 --> 00:13:05,040
what's real problem for us is that the

413
00:13:02,880 --> 00:13:07,360
configuration on their side is with no

414
00:13:05,040 --> 00:13:09,040
dynamic libraries at all

415
00:13:07,360 --> 00:13:11,200
you can find the configuration in that

416
00:13:09,040 --> 00:13:13,519
directory there if you're interested

417
00:13:11,200 --> 00:13:15,120
the what we do there is we reuse that

418
00:13:13,519 --> 00:13:16,320
disabled dynamic loading thing which is

419
00:13:15,120 --> 00:13:20,560
intended for ios

420
00:13:16,320 --> 00:13:22,320
it's a little bit fragile because tar he

421
00:13:20,560 --> 00:13:24,479
manages it effectively and he manages

422
00:13:22,320 --> 00:13:25,600
for ios so when there's ios changes

423
00:13:24,480 --> 00:13:27,600
there there can be

424
00:13:25,600 --> 00:13:28,959
unexpected changes for the fuzzing as

425
00:13:27,600 --> 00:13:31,839
well so new

426
00:13:28,959 --> 00:13:32,800
new components added to ios will end up

427
00:13:31,839 --> 00:13:35,600
getting compiled

428
00:13:32,800 --> 00:13:36,160
on the different configuration forces

429
00:13:35,600 --> 00:13:38,880
fuzz

430
00:13:36,160 --> 00:13:39,920
and it doesn't always succeed uh the

431
00:13:38,880 --> 00:13:41,040
individual photos are still

432
00:13:39,920 --> 00:13:43,120
unfortunately very large

433
00:13:41,040 --> 00:13:44,160
about 300 megs per fuzzer when they

434
00:13:43,120 --> 00:13:46,560
really should be

435
00:13:44,160 --> 00:13:48,319
you know a tent of that as an

436
00:13:46,560 --> 00:13:49,839
individually quite large

437
00:13:48,320 --> 00:13:51,279
uh we don't run with a configuration

438
00:13:49,839 --> 00:13:53,040
layer inside in the footing lens so we

439
00:13:51,279 --> 00:13:54,720
just hard code various defaults

440
00:13:53,040 --> 00:13:56,160
and then you can use that at runtime to

441
00:13:54,720 --> 00:13:57,760
determine whether or not

442
00:13:56,160 --> 00:13:59,600
you are being fuzzing or not whether the

443
00:13:57,760 --> 00:14:01,839
configuration is being avoided and

444
00:13:59,600 --> 00:14:02,880
putting some other kind of default if

445
00:14:01,839 --> 00:14:04,160
anybody else is interested running

446
00:14:02,880 --> 00:14:06,160
forces against us

447
00:14:04,160 --> 00:14:08,560
uh that's the url you can find our seed

448
00:14:06,160 --> 00:14:10,399
corpses for the 65 formats

449
00:14:08,560 --> 00:14:12,800
the 45 file formats are mentioned there

450
00:14:10,399 --> 00:14:15,360
and an edition of 15 from the

451
00:14:12,800 --> 00:14:16,880
document liberation project with the

452
00:14:15,360 --> 00:14:18,959
extra filters that are fuzzed

453
00:14:16,880 --> 00:14:20,720
separately so you have corpses there

454
00:14:18,959 --> 00:14:24,000
which are

455
00:14:20,720 --> 00:14:25,360
not our full collection of file formats

456
00:14:24,000 --> 00:14:27,680
for that file format

457
00:14:25,360 --> 00:14:29,519
but a cut down set of the minimized set

458
00:14:27,680 --> 00:14:31,040
that exercise the most cold pets

459
00:14:29,519 --> 00:14:33,600
without exceeding i don't know it's

460
00:14:31,040 --> 00:14:36,399
about half a megan size or something per

461
00:14:33,600 --> 00:14:36,399
individual case

462
00:14:36,560 --> 00:14:39,920
that's what the oss fuzz website looks

463
00:14:38,399 --> 00:14:41,279
like their documents

464
00:14:39,920 --> 00:14:44,240
their bugs are again private and they

465
00:14:41,279 --> 00:14:46,720
remain private for 60 or 90 days until

466
00:14:44,240 --> 00:14:48,800
after their report after they're fixed

467
00:14:46,720 --> 00:14:50,480
something like that so a lot of these

468
00:14:48,800 --> 00:14:51,839
issues are now publicly available you

469
00:14:50,480 --> 00:14:53,279
can examine them if you wish

470
00:14:51,839 --> 00:14:55,360
but by default they're private for the

471
00:14:53,279 --> 00:14:56,880
first time what's nice i find is that

472
00:14:55,360 --> 00:14:58,800
the minimizer there you can start off

473
00:14:56,880 --> 00:15:01,279
with a large test case

474
00:14:58,800 --> 00:15:02,880
in this case it's not too big 324 bytes

475
00:15:01,279 --> 00:15:04,399
but then it'll minimize it itself down

476
00:15:02,880 --> 00:15:04,880
to the smallest case so you don't have

477
00:15:04,399 --> 00:15:06,800
to

478
00:15:04,880 --> 00:15:09,120
work with a large document when you do

479
00:15:06,800 --> 00:15:11,839
get something reported

480
00:15:09,120 --> 00:15:14,160
so let's see kind of a more recent

481
00:15:11,839 --> 00:15:16,160
actual bug that came in

482
00:15:14,160 --> 00:15:17,839
the original top line is the original

483
00:15:16,160 --> 00:15:19,199
code and then there's a kind of an easy

484
00:15:17,839 --> 00:15:20,800
hack underway at the moment to find

485
00:15:19,199 --> 00:15:22,959
better integer types

486
00:15:20,800 --> 00:15:24,560
so it went from the cell underscore you

487
00:15:22,959 --> 00:15:26,959
long which is

488
00:15:24,560 --> 00:15:29,279
effectively a size t and it was changed

489
00:15:26,959 --> 00:15:30,479
into a size u16 because in colors is a

490
00:15:29,279 --> 00:15:32,000
size u16

491
00:15:30,480 --> 00:15:34,320
but that means then during the shift

492
00:15:32,000 --> 00:15:35,360
operation with the wonderful c plus plus

493
00:15:34,320 --> 00:15:37,440
promotion rules

494
00:15:35,360 --> 00:15:39,040
becomes an int at that point then you

495
00:15:37,440 --> 00:15:40,160
have two signed ins and then you try to

496
00:15:39,040 --> 00:15:41,680
add them together and the numbers are

497
00:15:40,160 --> 00:15:44,639
too large defeating signed ins

498
00:15:41,680 --> 00:15:46,160
and you get this undefined behavior

499
00:15:44,639 --> 00:15:48,720
warning like that

500
00:15:46,160 --> 00:15:50,800
and then at the bottom is a a simple fix

501
00:15:48,720 --> 00:15:52,720
to send it back to an unsigned type

502
00:15:50,800 --> 00:15:54,000
let me get rid of the issue again so

503
00:15:52,720 --> 00:15:55,920
that's the kind of um

504
00:15:54,000 --> 00:15:58,560
the kind of bug you get out from uh

505
00:15:55,920 --> 00:15:58,560
ubison

506
00:15:58,639 --> 00:16:05,040
what complicates things in or says fuzz

507
00:16:02,560 --> 00:16:07,199
is mostly the timeouts and the time of

508
00:16:05,040 --> 00:16:08,480
about 25 seconds at which case at which

509
00:16:07,199 --> 00:16:10,880
point they log bugs saying

510
00:16:08,480 --> 00:16:12,880
your target is slow uh they'll only

511
00:16:10,880 --> 00:16:15,360
report one at a time so you get one

512
00:16:12,880 --> 00:16:17,040
timeout bug per target if you fix the

513
00:16:15,360 --> 00:16:18,800
timeout bug for target you typically get

514
00:16:17,040 --> 00:16:20,160
another timeout bug a couple of days

515
00:16:18,800 --> 00:16:22,319
later for a different issue

516
00:16:20,160 --> 00:16:23,839
so it's a real treadmill um some of the

517
00:16:22,320 --> 00:16:25,199
file formats we seem to have gotten rid

518
00:16:23,839 --> 00:16:27,199
of all of the timeouts because it hasn't

519
00:16:25,199 --> 00:16:29,040
been any reporter for ages so

520
00:16:27,199 --> 00:16:30,240
noel seems to have solved the odf

521
00:16:29,040 --> 00:16:31,839
timeouts for example

522
00:16:30,240 --> 00:16:34,000
uh what's outstanding at the moment is

523
00:16:31,839 --> 00:16:36,880
various timeouts in the doc filter

524
00:16:34,000 --> 00:16:38,320
uh lwp filter the lotus wordpress filter

525
00:16:36,880 --> 00:16:40,000
and a few other ones like that

526
00:16:38,320 --> 00:16:41,600
some of them come and go we're just

527
00:16:40,000 --> 00:16:43,040
barely on the threshold

528
00:16:41,600 --> 00:16:44,880
and we slip below it for a couple of

529
00:16:43,040 --> 00:16:45,360
weeks it disappears and we rise above it

530
00:16:44,880 --> 00:16:47,360
again

531
00:16:45,360 --> 00:16:49,040
and it reappears so how can we help with

532
00:16:47,360 --> 00:16:50,560
the timeout

533
00:16:49,040 --> 00:16:52,880
obviously if we're processing infinite

534
00:16:50,560 --> 00:16:56,319
data you're going to timeout

535
00:16:52,880 --> 00:16:58,000
uh at some stage so they're all

536
00:16:56,320 --> 00:16:59,759
uh there's a dot options file inside

537
00:16:58,000 --> 00:17:00,160
that vcl workbend directory that says

538
00:16:59,759 --> 00:17:03,440
the

539
00:17:00,160 --> 00:17:05,119
maximum input you can deal with normally

540
00:17:03,440 --> 00:17:06,799
it's it's the 64k

541
00:17:05,119 --> 00:17:08,319
some file formats take longer than that

542
00:17:06,799 --> 00:17:10,879
so we slip it 32k

543
00:17:08,319 --> 00:17:12,240
or some number that gets it all in so

544
00:17:10,880 --> 00:17:13,600
you can adjust that

545
00:17:12,240 --> 00:17:15,520
some of the file formats though no

546
00:17:13,599 --> 00:17:17,359
matter how small you

547
00:17:15,520 --> 00:17:19,280
limit the input they have basically

548
00:17:17,359 --> 00:17:20,240
effectively near infinite decompression

549
00:17:19,280 --> 00:17:21,839
abilities you give them

550
00:17:20,240 --> 00:17:23,280
10 bytes and they can generate you know

551
00:17:21,839 --> 00:17:25,760
hundreds and hundreds of megs from that

552
00:17:23,280 --> 00:17:27,039
by just saying you know

553
00:17:25,760 --> 00:17:28,799
putting in an integer and saying that

554
00:17:27,039 --> 00:17:29,840
there's going to be this many zeros

555
00:17:28,799 --> 00:17:31,120
following it

556
00:17:29,840 --> 00:17:33,280
so you have to have some way to limit

557
00:17:31,120 --> 00:17:36,320
that so when we're running under

558
00:17:33,280 --> 00:17:38,000
um the oss fuzz and if that fuzz max

559
00:17:36,320 --> 00:17:39,120
input length which comes from the max

560
00:17:38,000 --> 00:17:41,440
then above is set

561
00:17:39,120 --> 00:17:42,399
then you can say that decompression is

562
00:17:41,440 --> 00:17:45,280
limited to

563
00:17:42,400 --> 00:17:46,799
some arbitrary multiple of that value so

564
00:17:45,280 --> 00:17:48,879
depending on some filters some filters

565
00:17:46,799 --> 00:17:49,840
are 256 times that value sometimes there

566
00:17:48,880 --> 00:17:52,240
are a thousand times

567
00:17:49,840 --> 00:17:53,760
but there is some sealing limit to the

568
00:17:52,240 --> 00:17:56,080
amount of decompression that's allowed

569
00:17:53,760 --> 00:17:58,320
given that the input

570
00:17:56,080 --> 00:17:59,840
and obviously of course sometimes the

571
00:17:58,320 --> 00:18:01,120
timeouts are just reporting that there's

572
00:17:59,840 --> 00:18:02,879
an infinite loop

573
00:18:01,120 --> 00:18:04,639
so here's an example of a true infinite

574
00:18:02,880 --> 00:18:05,280
loop inside one of the file formats

575
00:18:04,640 --> 00:18:07,760
where

576
00:18:05,280 --> 00:18:09,200
there's a chain of properties red each

577
00:18:07,760 --> 00:18:10,480
property tells where the opposite of the

578
00:18:09,200 --> 00:18:12,640
next chain is

579
00:18:10,480 --> 00:18:14,080
so a simple technique that's commonly

580
00:18:12,640 --> 00:18:16,799
used in a lot of the filters

581
00:18:14,080 --> 00:18:18,240
is just to track what places have been

582
00:18:16,799 --> 00:18:19,200
visited already what off sites have

583
00:18:18,240 --> 00:18:20,559
already been visited

584
00:18:19,200 --> 00:18:22,559
so if you've already visited one

585
00:18:20,559 --> 00:18:24,000
particular link in the chain

586
00:18:22,559 --> 00:18:25,200
and then you return to the same link

587
00:18:24,000 --> 00:18:27,039
again then obviously there's something

588
00:18:25,200 --> 00:18:27,760
wrong your loop is corrupt your document

589
00:18:27,039 --> 00:18:29,600
is bust

590
00:18:27,760 --> 00:18:32,640
and you just break and move on that's

591
00:18:29,600 --> 00:18:32,639
the most common um

592
00:18:32,960 --> 00:18:38,160
solution for the real case of the

593
00:18:35,440 --> 00:18:38,160
infinite loops

594
00:18:40,880 --> 00:18:43,520
the one then is out in memories there's

595
00:18:42,320 --> 00:18:45,520
another issue as well as that you're

596
00:18:43,520 --> 00:18:49,280
limited to two gigs

597
00:18:45,520 --> 00:18:50,799
and or you trigger that uh jpeg itself

598
00:18:49,280 --> 00:18:53,120
there's a couple of examples of simple

599
00:18:50,799 --> 00:18:53,600
files that will break right through that

600
00:18:53,120 --> 00:18:57,199
limit

601
00:18:53,600 --> 00:18:59,199
that are perfectly legitimate jpeg files

602
00:18:57,200 --> 00:19:00,960
the jpeg turbo we got some patches into

603
00:18:59,200 --> 00:19:01,679
that but to convince them that we could

604
00:19:00,960 --> 00:19:04,000
um

605
00:19:01,679 --> 00:19:05,600
set and honor the old flag for jpeg

606
00:19:04,000 --> 00:19:06,320
memory which already existed but to

607
00:19:05,600 --> 00:19:08,000
honor it

608
00:19:06,320 --> 00:19:09,439
so that it would you could set some

609
00:19:08,000 --> 00:19:12,160
ceiling for how far

610
00:19:09,440 --> 00:19:13,360
jpeg will allocate similar inside and

611
00:19:12,160 --> 00:19:15,440
calc you can set

612
00:19:13,360 --> 00:19:17,199
max matrix elements for some of the calc

613
00:19:15,440 --> 00:19:18,880
file formats to help limit that

614
00:19:17,200 --> 00:19:20,559
and similarly nutrient calculation

615
00:19:18,880 --> 00:19:21,360
brings things under some kind of control

616
00:19:20,559 --> 00:19:24,879
as well

617
00:19:21,360 --> 00:19:26,559
there are various tips and tricks there

618
00:19:24,880 --> 00:19:28,000
in code for the practical but the most

619
00:19:26,559 --> 00:19:29,120
useful thing is of course is just double

620
00:19:28,000 --> 00:19:32,080
checking

621
00:19:29,120 --> 00:19:33,360
how much data is available uh and

622
00:19:32,080 --> 00:19:34,320
setting and comparing that to what the

623
00:19:33,360 --> 00:19:35,918
headers of

624
00:19:34,320 --> 00:19:37,840
especially the image filters claim the

625
00:19:35,919 --> 00:19:38,559
image is claimed there's a huge graphic

626
00:19:37,840 --> 00:19:40,639
coming up

627
00:19:38,559 --> 00:19:41,918
you can check to see if that's possible

628
00:19:40,640 --> 00:19:43,360
some of the file formats of course are

629
00:19:41,919 --> 00:19:45,200
decompressed so you have to look at

630
00:19:43,360 --> 00:19:48,000
whether or not the decompression

631
00:19:45,200 --> 00:19:49,919
would uh be able to fill in that data so

632
00:19:48,000 --> 00:19:52,240
some of the filters have known max

633
00:19:49,919 --> 00:19:54,160
compression levels you know that if a

634
00:19:52,240 --> 00:19:56,640
gif cannot produce more than that

635
00:19:54,160 --> 00:19:58,720
ratio against its input data so we do

636
00:19:56,640 --> 00:20:00,720
that for a number of the

637
00:19:58,720 --> 00:20:02,559
binary file formats we compare what

638
00:20:00,720 --> 00:20:04,880
their max possible

639
00:20:02,559 --> 00:20:06,879
decompression of the input is and if it

640
00:20:04,880 --> 00:20:08,960
sees that we failed that again so

641
00:20:06,880 --> 00:20:11,679
they have practical real world

642
00:20:08,960 --> 00:20:11,679
implications

643
00:20:12,480 --> 00:20:18,480
yeah so that's the results

644
00:20:16,080 --> 00:20:19,280
for um the amount of reports you've been

645
00:20:18,480 --> 00:20:20,640
getting

646
00:20:19,280 --> 00:20:21,918
so in the last three years we've gotten

647
00:20:20,640 --> 00:20:23,520
basically a thousand of them which is

648
00:20:21,919 --> 00:20:25,280
roughly about one a day but they've all

649
00:20:23,520 --> 00:20:26,639
been front loaded the first two years is

650
00:20:25,280 --> 00:20:28,559
a huge tail off

651
00:20:26,640 --> 00:20:30,320
last year uh we've been adding them

652
00:20:28,559 --> 00:20:30,879
incrementally over those two years every

653
00:20:30,320 --> 00:20:32,639
time

654
00:20:30,880 --> 00:20:34,480
a particular fuzzer was added and began

655
00:20:32,640 --> 00:20:36,159
to not give constant results

656
00:20:34,480 --> 00:20:37,919
we can add in the next fuzzer so it was

657
00:20:36,159 --> 00:20:39,360
kind of kept to that limit we've stopped

658
00:20:37,919 --> 00:20:40,320
adding fuzzers now i think we've got

659
00:20:39,360 --> 00:20:41,760
most things covered

660
00:20:40,320 --> 00:20:43,439
and we're still getting this constant

661
00:20:41,760 --> 00:20:44,879
trickle but it's nowhere near the flood

662
00:20:43,440 --> 00:20:46,640
it was beforehand

663
00:20:44,880 --> 00:20:48,159
and that's it of course anytime anybody

664
00:20:46,640 --> 00:20:50,480
makes any changes to a given

665
00:20:48,159 --> 00:20:51,520
filter they tend to reproduce some

666
00:20:50,480 --> 00:20:53,360
problems as well

667
00:20:51,520 --> 00:20:54,960
so there were some changes yesterday to

668
00:20:53,360 --> 00:20:56,399
the lotus word pro filter

669
00:20:54,960 --> 00:20:58,559
and i can see that i have five or six

670
00:20:56,400 --> 00:21:00,559
new issues reported against that already

671
00:20:58,559 --> 00:21:03,120
so uh yeah it's very dangerous and

672
00:21:00,559 --> 00:21:06,240
fraught to change any of those

673
00:21:03,120 --> 00:21:10,080
kind of hacky binary file filters

674
00:21:06,240 --> 00:21:17,840
right that's what i've got it's the end

675
00:21:10,080 --> 00:21:17,840
is there any questions

676
00:21:26,880 --> 00:21:29,919
does it mean that they

677
00:21:34,240 --> 00:21:39,280
not for us but i think they have their

678
00:21:36,080 --> 00:21:41,280
own they reuse all these for chromium

679
00:21:39,280 --> 00:21:42,639
so i think uh for chromium they have

680
00:21:41,280 --> 00:21:44,000
different platforms that they test

681
00:21:42,640 --> 00:21:45,760
chromin on separately on

682
00:21:44,000 --> 00:21:47,600
but for our case it's it's just it's

683
00:21:45,760 --> 00:21:49,280
just linux that they work on

684
00:21:47,600 --> 00:21:50,959
so yeah all of the stuff you see here is

685
00:21:49,280 --> 00:21:52,480
they they reuse it for their own

686
00:21:50,960 --> 00:21:58,240
software and they just let us

687
00:21:52,480 --> 00:22:12,159
have a little bite at it

688
00:21:58,240 --> 00:22:12,159
okay thank you

