1
00:00:04,960 --> 00:00:07,759
with microsoft research in cambridge and

2
00:00:06,480 --> 00:00:09,200
i'm here to tell you about the

3
00:00:07,759 --> 00:00:10,800
confidential consortium framework which

4
00:00:09,200 --> 00:00:13,200
is our project

5
00:00:10,800 --> 00:00:14,400
uh it only says on last night which

6
00:00:13,200 --> 00:00:16,160
might have been a mistake but it's open

7
00:00:14,400 --> 00:00:18,560
source on github

8
00:00:16,160 --> 00:00:20,080
so please feel free to check it out so

9
00:00:18,560 --> 00:00:21,520
what we set out to do is

10
00:00:20,080 --> 00:00:22,959
build a framework to make it easy for

11
00:00:21,520 --> 00:00:23,840
people to construct multi-party

12
00:00:22,960 --> 00:00:27,199
applications

13
00:00:23,840 --> 00:00:28,720
with good guarantees so one of the

14
00:00:27,199 --> 00:00:30,720
things that's often a problem is

15
00:00:28,720 --> 00:00:32,479
the lack of governance mechanism so we

16
00:00:30,720 --> 00:00:34,239
wanted to have a verifiable

17
00:00:32,479 --> 00:00:35,839
consortium governance mechanism a system

18
00:00:34,239 --> 00:00:37,120
where you can have very well defined

19
00:00:35,840 --> 00:00:38,160
governance rules for the multi-party

20
00:00:37,120 --> 00:00:39,440
application

21
00:00:38,160 --> 00:00:41,040
which are easily verifiable to all

22
00:00:39,440 --> 00:00:42,079
participants to members themselves and

23
00:00:41,040 --> 00:00:43,600
to also users

24
00:00:42,079 --> 00:00:45,120
so they can see that the network is or

25
00:00:43,600 --> 00:00:46,320
the application is run in the specific

26
00:00:45,120 --> 00:00:49,120
way that

27
00:00:46,320 --> 00:00:50,800
is promised is to be run um we also want

28
00:00:49,120 --> 00:00:52,800
fine grain confidentiality of course

29
00:00:50,800 --> 00:00:54,078
so um people should be able to have very

30
00:00:52,800 --> 00:00:55,199
fine grain control of their data it

31
00:00:54,079 --> 00:00:55,840
should be possible for application

32
00:00:55,199 --> 00:00:57,519
makers

33
00:00:55,840 --> 00:00:59,199
to make it so that you can only see or

34
00:00:57,520 --> 00:01:01,199
reveal you know what's what's useful and

35
00:00:59,199 --> 00:01:02,640
appropriate for business purposes

36
00:01:01,199 --> 00:01:04,158
uh we want a very simple programming

37
00:01:02,640 --> 00:01:05,600
model uh everyone wants a simple

38
00:01:04,159 --> 00:01:07,040
programming model we want it to

39
00:01:05,600 --> 00:01:08,798
be approachable and make it easy for

40
00:01:07,040 --> 00:01:10,159
people to get those guarantees and of

41
00:01:08,799 --> 00:01:11,760
course we want high availability and

42
00:01:10,159 --> 00:01:13,920
high efficiency it's no good to have an

43
00:01:11,760 --> 00:01:15,439
easy framework if

44
00:01:13,920 --> 00:01:18,080
you then have to do a lot of legwork to

45
00:01:15,439 --> 00:01:20,559
make your app um you know available and

46
00:01:18,080 --> 00:01:20,560
fast right

47
00:01:20,799 --> 00:01:26,000
so broadly speaking um from a

48
00:01:23,840 --> 00:01:27,600
from a far away distance this is what a

49
00:01:26,000 --> 00:01:30,400
ccf application looks like

50
00:01:27,600 --> 00:01:31,119
you have a number of of machines which

51
00:01:30,400 --> 00:01:32,640
run

52
00:01:31,119 --> 00:01:34,640
trusted execution environments or

53
00:01:32,640 --> 00:01:35,840
hardware enclaves running anywhere so

54
00:01:34,640 --> 00:01:37,280
they could be running in a cloud

55
00:01:35,840 --> 00:01:38,240
provider multiple cloud providers some

56
00:01:37,280 --> 00:01:39,840
of them could be on premise

57
00:01:38,240 --> 00:01:41,839
it doesn't really matter where a bunch

58
00:01:39,840 --> 00:01:44,640
of users interact with that service

59
00:01:41,840 --> 00:01:46,159
and the members a set of members

60
00:01:44,640 --> 00:01:47,600
basically provide governance so the

61
00:01:46,159 --> 00:01:48,399
first thing they do is they endorse the

62
00:01:47,600 --> 00:01:51,199
service

63
00:01:48,399 --> 00:01:52,560
and they essentially endorse the

64
00:01:51,200 --> 00:01:53,920
identity of the service and make it so

65
00:01:52,560 --> 00:01:55,360
that everyone knows that this is the

66
00:01:53,920 --> 00:01:57,280
service they're talking to

67
00:01:55,360 --> 00:01:59,200
they also garden the service uh so

68
00:01:57,280 --> 00:02:00,000
they'll you know govern the membership

69
00:01:59,200 --> 00:02:01,920
sets they'll

70
00:02:00,000 --> 00:02:03,920
they allow new new members to join or to

71
00:02:01,920 --> 00:02:04,719
leave they can add and remove users and

72
00:02:03,920 --> 00:02:06,479
all that

73
00:02:04,719 --> 00:02:07,839
and they they'll look after upgrades too

74
00:02:06,479 --> 00:02:09,280
so if they need to replace the code

75
00:02:07,840 --> 00:02:10,878
improve the application fix security

76
00:02:09,280 --> 00:02:14,000
bugs and so on

77
00:02:10,878 --> 00:02:14,480
they're on the hook for that separate

78
00:02:14,000 --> 00:02:16,080
from them

79
00:02:14,480 --> 00:02:17,440
is an operator someone who's just

80
00:02:16,080 --> 00:02:18,160
provisioning things so they're providing

81
00:02:17,440 --> 00:02:20,800
the hardware

82
00:02:18,160 --> 00:02:21,920
they can spin up the the instances of

83
00:02:20,800 --> 00:02:22,560
the nodes that the application is

84
00:02:21,920 --> 00:02:23,679
running on

85
00:02:22,560 --> 00:02:25,040
but they're not trusted they're not

86
00:02:23,680 --> 00:02:26,160
inside the trust boundary so they're

87
00:02:25,040 --> 00:02:27,760
spinning things up

88
00:02:26,160 --> 00:02:29,200
and they can provide them to the members

89
00:02:27,760 --> 00:02:29,840
on behalf the members maybe the members

90
00:02:29,200 --> 00:02:31,599
pay them

91
00:02:29,840 --> 00:02:33,040
to make this available to them but they

92
00:02:31,599 --> 00:02:33,840
do not have any specific access to the

93
00:02:33,040 --> 00:02:34,959
application

94
00:02:33,840 --> 00:02:37,680
they are not they're not part of the

95
00:02:34,959 --> 00:02:39,599
transplanter in the application

96
00:02:37,680 --> 00:02:41,120
so how do we how do we bootstrap that

97
00:02:39,599 --> 00:02:42,879
how do we get that started

98
00:02:41,120 --> 00:02:44,319
and for that we need a number of trusted

99
00:02:42,879 --> 00:02:45,760
execution environments and we need a way

100
00:02:44,319 --> 00:02:49,200
to sort of connect them together and

101
00:02:45,760 --> 00:02:49,200
make them into a career network

102
00:02:49,280 --> 00:02:55,519
sorry yes i can try yes

103
00:02:52,319 --> 00:02:56,399
sorry um so trust the execution

104
00:02:55,519 --> 00:02:58,640
environments uh

105
00:02:56,400 --> 00:03:00,159
mostly everyone except well that person

106
00:02:58,640 --> 00:03:00,559
left but once everyone is familiar with

107
00:03:00,159 --> 00:03:03,280
them

108
00:03:00,560 --> 00:03:05,440
uh and so what we get is we want

109
00:03:03,280 --> 00:03:07,200
encrypted and integrity protected memory

110
00:03:05,440 --> 00:03:08,560
um so this is this is key to make sure

111
00:03:07,200 --> 00:03:09,839
that the operator the person who's

112
00:03:08,560 --> 00:03:11,440
running the nodes on their machine

113
00:03:09,840 --> 00:03:12,560
cannot have access we cannot see

114
00:03:11,440 --> 00:03:13,280
anything that's happening inside the

115
00:03:12,560 --> 00:03:15,440
node

116
00:03:13,280 --> 00:03:17,200
um we want cryptographic evidence of a

117
00:03:15,440 --> 00:03:18,640
running code so we want the ability to

118
00:03:17,200 --> 00:03:20,238
assert at the distance or to check at

119
00:03:18,640 --> 00:03:22,799
the distance what's running

120
00:03:20,239 --> 00:03:24,000
and finally so and remote at station so

121
00:03:22,800 --> 00:03:26,159
we want to be able to do this

122
00:03:24,000 --> 00:03:27,920
uh remotely and this gives us a

123
00:03:26,159 --> 00:03:29,359
distributed trusted computation so

124
00:03:27,920 --> 00:03:31,440
it allows us to spin up a number of

125
00:03:29,360 --> 00:03:33,840
enclaves and to check that

126
00:03:31,440 --> 00:03:35,359
they are running in enclaves so the the

127
00:03:33,840 --> 00:03:36,720
contents or anything we send over to

128
00:03:35,360 --> 00:03:37,920
them or anything they contain is not

129
00:03:36,720 --> 00:03:39,920
immediately visible to the people who

130
00:03:37,920 --> 00:03:41,359
are running these these enclaves we want

131
00:03:39,920 --> 00:03:42,238
to be able to know exactly which code

132
00:03:41,360 --> 00:03:44,959
they're running

133
00:03:42,239 --> 00:03:46,080
um and then we can make them part of the

134
00:03:44,959 --> 00:03:47,920
networking we can distribute

135
00:03:46,080 --> 00:03:49,120
our application with confidence that

136
00:03:47,920 --> 00:03:50,640
information is not going to be leaked or

137
00:03:49,120 --> 00:03:51,519
we're not going to have integrity issues

138
00:03:50,640 --> 00:03:54,000
or the sort of

139
00:03:51,519 --> 00:03:54,000
sort of stuff

140
00:03:54,959 --> 00:03:59,280
so how do we do that so a node overview

141
00:03:57,280 --> 00:03:59,760
so a single ccf node roughly looks like

142
00:03:59,280 --> 00:04:01,519
this

143
00:03:59,760 --> 00:04:02,879
you'd have a client talking to to the

144
00:04:01,519 --> 00:04:04,959
node

145
00:04:02,879 --> 00:04:06,480
they use tls so we we don't support

146
00:04:04,959 --> 00:04:08,159
generic byte streams

147
00:04:06,480 --> 00:04:10,720
we support only ets you have to talk to

148
00:04:08,159 --> 00:04:12,079
us via tls

149
00:04:10,720 --> 00:04:13,840
that goes through the host the host is

150
00:04:12,080 --> 00:04:15,439
potentially malicious and potentially

151
00:04:13,840 --> 00:04:16,560
you can look at

152
00:04:15,439 --> 00:04:18,320
all of the frames and so on but these

153
00:04:16,560 --> 00:04:19,440
are encrypted cs frames on the way in

154
00:04:18,320 --> 00:04:20,478
and out so they can't they can't see

155
00:04:19,440 --> 00:04:22,000
anything useful they can't derive

156
00:04:20,478 --> 00:04:23,199
anything useful from that traffic

157
00:04:22,000 --> 00:04:24,320
they're no different from someone who

158
00:04:23,199 --> 00:04:26,560
could be intercepting some of the

159
00:04:24,320 --> 00:04:28,479
network traffic there

160
00:04:26,560 --> 00:04:29,600
so the tr section terminates inside

161
00:04:28,479 --> 00:04:31,599
inside our enclave

162
00:04:29,600 --> 00:04:33,440
and inside enclave is essentially two

163
00:04:31,600 --> 00:04:35,199
bits this off framework which provides

164
00:04:33,440 --> 00:04:36,880
a certain certain amount of

165
00:04:35,199 --> 00:04:38,320
functionality and the user application

166
00:04:36,880 --> 00:04:40,479
code which is running whatever business

167
00:04:38,320 --> 00:04:42,000
logic there is there

168
00:04:40,479 --> 00:04:43,680
so the enclave contains the application

169
00:04:42,000 --> 00:04:44,880
logic and states uh it contains the

170
00:04:43,680 --> 00:04:46,400
governance code which is what we

171
00:04:44,880 --> 00:04:47,600
referred to earlier which is what allows

172
00:04:46,400 --> 00:04:48,400
these design claims to talk to each

173
00:04:47,600 --> 00:04:51,600
other

174
00:04:48,400 --> 00:04:52,638
and uh fault tolerance code so code that

175
00:04:51,600 --> 00:04:54,000
allows us to distribute

176
00:04:52,639 --> 00:04:55,440
essentially the updates across

177
00:04:54,000 --> 00:04:56,560
networking enclaves make sure that we

178
00:04:55,440 --> 00:04:57,919
have availability

179
00:04:56,560 --> 00:04:59,840
if a certain number of enclaves are

180
00:04:57,919 --> 00:05:03,599
affected or come down

181
00:04:59,840 --> 00:05:03,599
the applications still still can run

182
00:05:04,400 --> 00:05:07,679
so communication between the host and

183
00:05:05,680 --> 00:05:09,120
the enclave we want to avoid

184
00:05:07,680 --> 00:05:10,880
equals and oracle so we want to avoid

185
00:05:09,120 --> 00:05:11,759
calling in in and out of the enclave

186
00:05:10,880 --> 00:05:13,199
there's a there's a number of

187
00:05:11,759 --> 00:05:14,479
performance and security reasons why

188
00:05:13,199 --> 00:05:15,600
it's not such a good idea to do this on

189
00:05:14,479 --> 00:05:17,758
a regular basis

190
00:05:15,600 --> 00:05:18,880
and you want to minimize the amount of

191
00:05:17,759 --> 00:05:20,400
those you do

192
00:05:18,880 --> 00:05:21,919
so the way we the way we do things is

193
00:05:20,400 --> 00:05:23,679
the single local art start a single

194
00:05:21,919 --> 00:05:24,479
e-course or a start-up when we provision

195
00:05:23,680 --> 00:05:26,240
the enclave

196
00:05:24,479 --> 00:05:28,639
and then all communication between the

197
00:05:26,240 --> 00:05:30,639
enclave and the host

198
00:05:28,639 --> 00:05:31,680
is done over ring buffers and so

199
00:05:30,639 --> 00:05:32,160
essentially you put data on the ring

200
00:05:31,680 --> 00:05:34,320
buffer

201
00:05:32,160 --> 00:05:36,000
the enclaves the enclave reads it out on

202
00:05:34,320 --> 00:05:37,680
the other side and then back in

203
00:05:36,000 --> 00:05:38,800
i see a lot of people take pictures and

204
00:05:37,680 --> 00:05:39,520
i want to point out the slides on the

205
00:05:38,800 --> 00:05:41,520
website

206
00:05:39,520 --> 00:05:43,359
so you don't have to if you you know if

207
00:05:41,520 --> 00:05:45,520
you just want a slice

208
00:05:43,360 --> 00:05:47,039
um so yeah the communication is

209
00:05:45,520 --> 00:05:48,400
basically just the ts frames in and out

210
00:05:47,039 --> 00:05:49,280
with the ring buffers and also

211
00:05:48,400 --> 00:05:50,960
heartbeats

212
00:05:49,280 --> 00:05:52,719
so we'd like to have trusted time

213
00:05:50,960 --> 00:05:54,638
there's no such thing as trusted time

214
00:05:52,720 --> 00:05:55,759
but we still need some notion of time

215
00:05:54,639 --> 00:05:57,360
because if we're going to run

216
00:05:55,759 --> 00:05:58,800
a distributed consensus for example we

217
00:05:57,360 --> 00:05:59,680
need something to do timeouts and this

218
00:05:58,800 --> 00:06:02,319
sort of stuff

219
00:05:59,680 --> 00:06:03,120
so we take rough time from the host it's

220
00:06:02,319 --> 00:06:04,800
not trusted

221
00:06:03,120 --> 00:06:07,039
and the host could essentially perform a

222
00:06:04,800 --> 00:06:09,280
denial of service by

223
00:06:07,039 --> 00:06:10,800
withholding time updates or or sending

224
00:06:09,280 --> 00:06:13,119
time updates too often and so on

225
00:06:10,800 --> 00:06:17,199
while we claim this has no impact on

226
00:06:13,120 --> 00:06:17,199
confidentiality and integrity basically

227
00:06:17,759 --> 00:06:21,600
doesn't have an impact on availability

228
00:06:20,240 --> 00:06:22,319
it does have an impact on variability so

229
00:06:21,600 --> 00:06:23,840
if you want to

230
00:06:22,319 --> 00:06:26,080
if you're not performing denial service

231
00:06:23,840 --> 00:06:27,840
and uh you're the host you certainly can

232
00:06:26,080 --> 00:06:29,599
but then again if you're the host you

233
00:06:27,840 --> 00:06:31,119
can impact availability by withholding

234
00:06:29,600 --> 00:06:32,800
all task frames from the enclave

235
00:06:31,120 --> 00:06:35,280
and then not much variability there so

236
00:06:32,800 --> 00:06:36,960
yeah for sure

237
00:06:35,280 --> 00:06:38,239
then so the way we do availability is

238
00:06:36,960 --> 00:06:39,840
you distribute this and you have a

239
00:06:38,240 --> 00:06:42,080
number of enclaves running

240
00:06:39,840 --> 00:06:43,039
set up with a consensus mechanism and so

241
00:06:42,080 --> 00:06:44,400
you have to take down

242
00:06:43,039 --> 00:06:46,560
you know at least half the enclaves

243
00:06:44,400 --> 00:06:49,198
you're running cfd maybe a third if

244
00:06:46,560 --> 00:06:51,120
you're running a bft variant right

245
00:06:49,199 --> 00:06:52,720
but yeah if you take down or if you if

246
00:06:51,120 --> 00:06:53,759
you uh if you own all the hosts then

247
00:06:52,720 --> 00:06:56,960
yeah you can stop the system from

248
00:06:53,759 --> 00:06:56,960
working completely for sure yeah

249
00:06:58,960 --> 00:07:02,638
um so yeah so now that we have these uh

250
00:07:01,199 --> 00:07:05,120
these building blocks

251
00:07:02,639 --> 00:07:06,479
uh we can talk a bit about like a joint

252
00:07:05,120 --> 00:07:07,440
protocol so if we have a network that's

253
00:07:06,479 --> 00:07:08,318
already established that's already

254
00:07:07,440 --> 00:07:09,840
bootstrapped so

255
00:07:08,319 --> 00:07:11,599
the way we start at is we start a single

256
00:07:09,840 --> 00:07:13,198
node um and then we

257
00:07:11,599 --> 00:07:14,880
we gradually bootstrap the network by

258
00:07:13,199 --> 00:07:17,199
adding on new nodes to that

259
00:07:14,880 --> 00:07:19,599
uh to that network so the way it works

260
00:07:17,199 --> 00:07:21,599
is our nodes create a key pair

261
00:07:19,599 --> 00:07:23,680
very much like g-through scheme so that

262
00:07:21,599 --> 00:07:27,120
that stays inside the enclave

263
00:07:23,680 --> 00:07:30,479
that's the identity of the enclave and

264
00:07:27,120 --> 00:07:32,080
we the node produces a quote over its

265
00:07:30,479 --> 00:07:33,840
over states so that's the platform the

266
00:07:32,080 --> 00:07:35,280
code it's running and the identities the

267
00:07:33,840 --> 00:07:36,479
platform contains platform information

268
00:07:35,280 --> 00:07:37,919
it contains microcode

269
00:07:36,479 --> 00:07:39,758
version you know that type of

270
00:07:37,919 --> 00:07:41,359
information as well

271
00:07:39,759 --> 00:07:44,000
and then that's sent across to the

272
00:07:41,360 --> 00:07:45,360
network and the network then decides

273
00:07:44,000 --> 00:07:46,879
if this node should be allowed to join

274
00:07:45,360 --> 00:07:47,840
or not and there's basically two two

275
00:07:46,879 --> 00:07:49,680
parts to that

276
00:07:47,840 --> 00:07:51,599
one of it is checking the quotes so

277
00:07:49,680 --> 00:07:52,960
making sure that the node that wants to

278
00:07:51,599 --> 00:07:54,639
join is in fact running

279
00:07:52,960 --> 00:07:56,080
you know sgx is running the right

280
00:07:54,639 --> 00:07:57,759
microcode it's running everything's up

281
00:07:56,080 --> 00:08:00,400
to date it's running the right codes

282
00:07:57,759 --> 00:08:02,240
inside the enclave and the other part is

283
00:08:00,400 --> 00:08:03,840
governance kicks in here so

284
00:08:02,240 --> 00:08:05,680
essentially a proposal is created and

285
00:08:03,840 --> 00:08:07,119
it's put in our state and then

286
00:08:05,680 --> 00:08:09,440
the our governance mechanism which i'll

287
00:08:07,120 --> 00:08:11,599
talk about just next

288
00:08:09,440 --> 00:08:12,960
kicks in and the members get to decide

289
00:08:11,599 --> 00:08:14,080
if they want to allow this this node to

290
00:08:12,960 --> 00:08:15,680
join or not

291
00:08:14,080 --> 00:08:17,359
um in some configurations you could

292
00:08:15,680 --> 00:08:18,560
decide to allow that all the time

293
00:08:17,360 --> 00:08:19,840
so if you've got the right identity

294
00:08:18,560 --> 00:08:20,479
running in sgx you're running the right

295
00:08:19,840 --> 00:08:22,318
code and so on

296
00:08:20,479 --> 00:08:23,440
maybe everybody's allowed to join uh

297
00:08:22,319 --> 00:08:25,039
there's some reasons why you probably

298
00:08:23,440 --> 00:08:26,560
don't want to do that

299
00:08:25,039 --> 00:08:27,680
or maybe the the members have set up

300
00:08:26,560 --> 00:08:28,720
some rules maybe they want to check

301
00:08:27,680 --> 00:08:29,919
who's joining first

302
00:08:28,720 --> 00:08:31,759
maybe they want to just check the

303
00:08:29,919 --> 00:08:32,880
quantity of how many how many things are

304
00:08:31,759 --> 00:08:35,120
joining at the same time

305
00:08:32,880 --> 00:08:36,080
there's various problems with um having

306
00:08:35,120 --> 00:08:37,039
too many joins at the same time

307
00:08:36,080 --> 00:08:38,479
obviously everybody

308
00:08:37,039 --> 00:08:40,880
comes in and then they have to catch up

309
00:08:38,479 --> 00:08:42,479
on a crazy problem

310
00:08:40,880 --> 00:08:44,080
and so the network if it decides that it

311
00:08:42,479 --> 00:08:46,160
likes the node and it wants to

312
00:08:44,080 --> 00:08:47,600
add the node to its configuration then

313
00:08:46,160 --> 00:08:49,600
endorses this identity

314
00:08:47,600 --> 00:08:51,680
and sends data secret basically to that

315
00:08:49,600 --> 00:08:53,440
node so consensus can kick in and we can

316
00:08:51,680 --> 00:08:55,120
start replicating state to this node

317
00:08:53,440 --> 00:08:57,200
because now they can read they can read

318
00:08:55,120 --> 00:08:59,680
the updates we send them

319
00:08:57,200 --> 00:09:00,480
and so we have a single network identity

320
00:08:59,680 --> 00:09:02,079
which is

321
00:09:00,480 --> 00:09:03,760
distinct from the identity of the first

322
00:09:02,080 --> 00:09:04,640
node but is essentially set up by the

323
00:09:03,760 --> 00:09:06,880
first node

324
00:09:04,640 --> 00:09:08,399
and this network identity is what would

325
00:09:06,880 --> 00:09:10,480
be distributed so

326
00:09:08,399 --> 00:09:12,080
that can be you can produce a csr for

327
00:09:10,480 --> 00:09:13,360
that have it be signed by root ca or

328
00:09:12,080 --> 00:09:14,560
that could be something that the members

329
00:09:13,360 --> 00:09:15,839
distribute to their users

330
00:09:14,560 --> 00:09:17,359
so if you think of the members as a

331
00:09:15,839 --> 00:09:18,240
group of companies maybe a group of

332
00:09:17,360 --> 00:09:19,279
banks or something

333
00:09:18,240 --> 00:09:21,680
they could distribute this word

334
00:09:19,279 --> 00:09:23,760
certificate to their users and

335
00:09:21,680 --> 00:09:24,800
users can when they connect to a node

336
00:09:23,760 --> 00:09:26,880
over tis

337
00:09:24,800 --> 00:09:28,319
the fact that the certificate for the

338
00:09:26,880 --> 00:09:31,680
nodes is endorsed by this

339
00:09:28,320 --> 00:09:33,200
root cert this is how they get you know

340
00:09:31,680 --> 00:09:34,880
proof of evidence that yet station has

341
00:09:33,200 --> 00:09:37,920
been conducted properly and the rules of

342
00:09:34,880 --> 00:09:39,920
governance have been followed properly

343
00:09:37,920 --> 00:09:41,439
um and so yeah so once the joint and it

344
00:09:39,920 --> 00:09:42,160
needs to catch up on state and become

345
00:09:41,440 --> 00:09:44,640
part of the

346
00:09:42,160 --> 00:09:45,839
power system so that leads us into

347
00:09:44,640 --> 00:09:47,360
governance how do we uh

348
00:09:45,839 --> 00:09:49,519
how do we build a mechanism to make it

349
00:09:47,360 --> 00:09:52,240
easy for members to decide how the

350
00:09:49,519 --> 00:09:55,519
network should be governed and operated

351
00:09:52,240 --> 00:09:56,240
um so here we have our consortium of

352
00:09:55,519 --> 00:09:58,640
members and

353
00:09:56,240 --> 00:10:00,399
initially what they do is they endorse

354
00:09:58,640 --> 00:10:02,640
uh the first

355
00:10:00,399 --> 00:10:04,079
the first prefix of the ledger and the

356
00:10:02,640 --> 00:10:06,160
configuration so we have a first few

357
00:10:04,079 --> 00:10:08,319
transactions that configure our system

358
00:10:06,160 --> 00:10:09,920
and the members have to come in and they

359
00:10:08,320 --> 00:10:10,640
they have to stage a vote basically to

360
00:10:09,920 --> 00:10:12,399
say

361
00:10:10,640 --> 00:10:13,680
yes we agree this is the network we

362
00:10:12,399 --> 00:10:15,040
think uh we

363
00:10:13,680 --> 00:10:16,479
we wanted to start so it's running the

364
00:10:15,040 --> 00:10:17,519
right version of the code it's running

365
00:10:16,480 --> 00:10:21,120
with the right membership

366
00:10:17,519 --> 00:10:22,160
um and um we're happy with the identity

367
00:10:21,120 --> 00:10:23,519
of the node so far

368
00:10:22,160 --> 00:10:25,839
um so they vote for that this is

369
00:10:23,519 --> 00:10:27,200
recorded and in general this is just an

370
00:10:25,839 --> 00:10:28,640
instance of our generic governance

371
00:10:27,200 --> 00:10:30,959
mechanism which is

372
00:10:28,640 --> 00:10:32,480
staging votes so you can stage votes to

373
00:10:30,959 --> 00:10:34,319
decide things like membership

374
00:10:32,480 --> 00:10:36,000
uh who should be a member of the network

375
00:10:34,320 --> 00:10:38,000
uh who should be a user

376
00:10:36,000 --> 00:10:39,120
um what the network configuration should

377
00:10:38,000 --> 00:10:40,720
look like so i want to add a certain

378
00:10:39,120 --> 00:10:42,399
number of nodes remove some nodes

379
00:10:40,720 --> 00:10:43,600
um i want to update the code or i want

380
00:10:42,399 --> 00:10:45,440
to change the versions of the code that

381
00:10:43,600 --> 00:10:46,399
are allowed to run the network

382
00:10:45,440 --> 00:10:48,320
or you want to change maybe the

383
00:10:46,399 --> 00:10:49,920
constitution itself so all the votes are

384
00:10:48,320 --> 00:10:51,920
governed by a constitution which is a

385
00:10:49,920 --> 00:10:53,839
script which i'll show on the next slide

386
00:10:51,920 --> 00:10:55,279
and this is what decides how the votes

387
00:10:53,839 --> 00:10:56,000
are passed essentially how the votes are

388
00:10:55,279 --> 00:10:58,399
counted

389
00:10:56,000 --> 00:10:59,920
and this itself being part of our state

390
00:10:58,399 --> 00:11:01,279
is something we could update also

391
00:10:59,920 --> 00:11:04,240
probably with different rules maybe we

392
00:11:01,279 --> 00:11:04,240
want to be stricter about that

393
00:11:04,480 --> 00:11:08,560
so the constitution is a script the

394
00:11:06,320 --> 00:11:10,640
votes are scripts

395
00:11:08,560 --> 00:11:12,160
well so the proposals are scripts and

396
00:11:10,640 --> 00:11:14,399
the votes themselves are scripts

397
00:11:12,160 --> 00:11:15,760
so a proposal could be um you know we

398
00:11:14,399 --> 00:11:17,120
want to make this change and then all

399
00:11:15,760 --> 00:11:18,560
the members have to look at that

400
00:11:17,120 --> 00:11:20,399
and they have to say yeah i agree or i

401
00:11:18,560 --> 00:11:22,000
disagree but if you do

402
00:11:20,399 --> 00:11:23,680
if you say i agree or disagree then you

403
00:11:22,000 --> 00:11:25,040
have a check time abuse problem

404
00:11:23,680 --> 00:11:26,319
because things could have moved on and

405
00:11:25,040 --> 00:11:27,279
maybe you care about some other elements

406
00:11:26,320 --> 00:11:28,720
of the state maybe

407
00:11:27,279 --> 00:11:30,560
maybe you're happy to add a node but

408
00:11:28,720 --> 00:11:31,920
only if there's already if there's not

409
00:11:30,560 --> 00:11:33,040
like more than 10 nodes already because

410
00:11:31,920 --> 00:11:33,920
you're trying to restrict the total

411
00:11:33,040 --> 00:11:36,160
number of nodes

412
00:11:33,920 --> 00:11:37,599
so in your your vote should be something

413
00:11:36,160 --> 00:11:39,760
that's executable it should be something

414
00:11:37,600 --> 00:11:41,279
that can look at the proposal but also

415
00:11:39,760 --> 00:11:42,959
the current state of the system and say

416
00:11:41,279 --> 00:11:44,399
yeah okay i agree with that or you know

417
00:11:42,959 --> 00:11:44,959
given the circumstances given the state

418
00:11:44,399 --> 00:11:47,120
wherein

419
00:11:44,959 --> 00:11:48,399
i don't want to accept that um so

420
00:11:47,120 --> 00:11:50,880
because this because your vote is

421
00:11:48,399 --> 00:11:52,240
executable you get rid of these concerns

422
00:11:50,880 --> 00:11:53,920
and this is how this is how we count

423
00:11:52,240 --> 00:11:55,200
things

424
00:11:53,920 --> 00:11:56,560
so that's all the slides and we should

425
00:11:55,200 --> 00:11:59,120
see a bit of code hopefully it's big

426
00:11:56,560 --> 00:12:01,680
enough for everyone to read

427
00:11:59,120 --> 00:12:03,040
um okay so i'll try and go through that

428
00:12:01,680 --> 00:12:04,719
quickly but essentially this is a very

429
00:12:03,040 --> 00:12:06,319
simple constitution samples

430
00:12:04,720 --> 00:12:08,160
uh sample some of them will look bigger

431
00:12:06,320 --> 00:12:09,920
than that they'll be more complicated

432
00:12:08,160 --> 00:12:11,279
but here all we're doing is we're saying

433
00:12:09,920 --> 00:12:12,800
like look for most things all we're

434
00:12:11,279 --> 00:12:13,839
looking for is a majority of members

435
00:12:12,800 --> 00:12:15,760
saying that they agree

436
00:12:13,839 --> 00:12:17,600
so if if we if we want to stage a

437
00:12:15,760 --> 00:12:18,959
proposal and we want to say we want to

438
00:12:17,600 --> 00:12:20,959
add a new member for example

439
00:12:18,959 --> 00:12:22,239
or a new user we just want to have a

440
00:12:20,959 --> 00:12:24,638
look at the majority of you

441
00:12:22,240 --> 00:12:26,480
of members which are currently active

442
00:12:24,639 --> 00:12:29,600
and check that they agree with that

443
00:12:26,480 --> 00:12:30,399
um so we count member votes and

444
00:12:29,600 --> 00:12:33,040
essentially

445
00:12:30,399 --> 00:12:34,560
we just count member vote for um active

446
00:12:33,040 --> 00:12:36,959
for active members so we

447
00:12:34,560 --> 00:12:38,000
if we have members who have been retired

448
00:12:36,959 --> 00:12:39,199
or who are joining

449
00:12:38,000 --> 00:12:40,639
and they're in the process of joining

450
00:12:39,200 --> 00:12:42,480
they're not active yet and so on they

451
00:12:40,639 --> 00:12:44,079
shouldn't be counted in this vote

452
00:12:42,480 --> 00:12:46,399
we count all the members the same we

453
00:12:44,079 --> 00:12:47,920
could decide to make a distinction

454
00:12:46,399 --> 00:12:49,839
we could have some tables where we store

455
00:12:47,920 --> 00:12:51,760
special members who are like operating

456
00:12:49,839 --> 00:12:53,839
members or senior members whatever

457
00:12:51,760 --> 00:12:55,519
and maybe they have special rights maybe

458
00:12:53,839 --> 00:12:58,079
they can veto some things

459
00:12:55,519 --> 00:12:59,839
maybe their vote is sufficient to pass

460
00:12:58,079 --> 00:13:01,279
the entire thing it's very flexible we

461
00:12:59,839 --> 00:13:04,240
can do pretty much anything we want here

462
00:13:01,279 --> 00:13:05,920
this is just a simple example there are

463
00:13:04,240 --> 00:13:07,040
some tables where we store information

464
00:13:05,920 --> 00:13:09,599
that maybe

465
00:13:07,040 --> 00:13:10,399
shouldn't be so easy to modify so for

466
00:13:09,600 --> 00:13:12,480
example

467
00:13:10,399 --> 00:13:14,000
if the members once want to stage a vote

468
00:13:12,480 --> 00:13:16,800
over

469
00:13:14,000 --> 00:13:17,440
so there's a whitelist table which is

470
00:13:16,800 --> 00:13:19,519
basically

471
00:13:17,440 --> 00:13:21,200
some the tables are allowed to be

472
00:13:19,519 --> 00:13:22,480
affected by governance and then

473
00:13:21,200 --> 00:13:23,760
we have our governance script table

474
00:13:22,480 --> 00:13:24,880
which is the table that stores this

475
00:13:23,760 --> 00:13:26,079
constitution

476
00:13:24,880 --> 00:13:27,439
if people are going to replace the

477
00:13:26,079 --> 00:13:28,560
constitution you're probably looking for

478
00:13:27,440 --> 00:13:29,279
something more than just a simple

479
00:13:28,560 --> 00:13:30,560
majority

480
00:13:29,279 --> 00:13:32,399
so here in this case we enforce

481
00:13:30,560 --> 00:13:33,680
unanimity we need to have them the

482
00:13:32,399 --> 00:13:35,440
number of the total number of member

483
00:13:33,680 --> 00:13:35,920
votes needs to be the same as the total

484
00:13:35,440 --> 00:13:38,079
number of

485
00:13:35,920 --> 00:13:39,439
members that's active and so if we have

486
00:13:38,079 --> 00:13:40,959
a majority otherwise

487
00:13:39,440 --> 00:13:42,800
then you know we pass otherwise we

488
00:13:40,959 --> 00:13:44,160
return false and the way this works is

489
00:13:42,800 --> 00:13:46,639
very simple

490
00:13:44,160 --> 00:13:48,319
every time a member sends a vote um

491
00:13:46,639 --> 00:13:49,120
their script is executed that decides

492
00:13:48,320 --> 00:13:50,639
their votes

493
00:13:49,120 --> 00:13:52,800
then the constitution is run again

494
00:13:50,639 --> 00:13:54,480
recounts if it's good we pass if it's

495
00:13:52,800 --> 00:13:55,599
not good it's still pending the proposal

496
00:13:54,480 --> 00:13:57,360
is still there

497
00:13:55,600 --> 00:13:58,560
um there's a there's a way to withdraw

498
00:13:57,360 --> 00:14:00,639
proposals as well if you think there's

499
00:13:58,560 --> 00:14:03,839
no realistic chance of them passing

500
00:14:00,639 --> 00:14:03,839
but that's sort of how it works

501
00:14:07,360 --> 00:14:12,240
the types of proposals are fixed um

502
00:14:10,480 --> 00:14:14,240
not really so because you're because

503
00:14:12,240 --> 00:14:16,320
your proposal so this is lower

504
00:14:14,240 --> 00:14:18,160
your proposals are lua and votes are lua

505
00:14:16,320 --> 00:14:20,000
if you can if you can put your proposal

506
00:14:18,160 --> 00:14:21,760
in terms of a lua script that executes

507
00:14:20,000 --> 00:14:22,959
against the table in the key value store

508
00:14:21,760 --> 00:14:25,360
that's backing this

509
00:14:22,959 --> 00:14:26,239
then you can put it to a vote and the

510
00:14:25,360 --> 00:14:27,440
other members

511
00:14:26,240 --> 00:14:29,839
they'll have to write a script that

512
00:14:27,440 --> 00:14:31,120
knows how to evaluate your proposal

513
00:14:29,839 --> 00:14:32,079
and so it might be tricky for them if

514
00:14:31,120 --> 00:14:33,199
you propose something officially

515
00:14:32,079 --> 00:14:45,839
complicated

516
00:14:33,199 --> 00:14:45,839
maybe they won't agree to it yeah

517
00:14:46,320 --> 00:14:50,399
yeah your proposal is code so yeah you

518
00:14:48,880 --> 00:14:52,160
have to

519
00:14:50,399 --> 00:14:53,920
you have to cover so so conveniently

520
00:14:52,160 --> 00:14:56,079
we'll look at proposals now

521
00:14:53,920 --> 00:14:58,639
so some simple ones the first one is

522
00:14:56,079 --> 00:15:00,959
just we want to add a new user um

523
00:14:58,639 --> 00:15:02,639
so we're we get to see that the tables

524
00:15:00,959 --> 00:15:04,079
and then

525
00:15:02,639 --> 00:15:06,240
so there's a mistake should say user

526
00:15:04,079 --> 00:15:07,920
cert

527
00:15:06,240 --> 00:15:09,279
so we get the tables and the user search

528
00:15:07,920 --> 00:15:11,839
as arguments here and

529
00:15:09,279 --> 00:15:13,040
are what we're saying is we want to add

530
00:15:11,839 --> 00:15:16,079
this new user

531
00:15:13,040 --> 00:15:17,760
to our store so the way this is split is

532
00:15:16,079 --> 00:15:19,920
the proposals are typically little bits

533
00:15:17,760 --> 00:15:21,519
of codes and some arguments are

534
00:15:19,920 --> 00:15:23,279
templatized and parametrized so here the

535
00:15:21,519 --> 00:15:24,880
user search is passed separately is

536
00:15:23,279 --> 00:15:26,880
passed in

537
00:15:24,880 --> 00:15:28,480
so the next proposal is we're passing a

538
00:15:26,880 --> 00:15:30,160
new code digest and we're saying

539
00:15:28,480 --> 00:15:32,000
we should be able to run this new code

540
00:15:30,160 --> 00:15:34,560
version in our system

541
00:15:32,000 --> 00:15:35,839
and um we can have a look at the ballot

542
00:15:34,560 --> 00:15:38,719
here so a vote

543
00:15:35,839 --> 00:15:40,000
to evaluate that so the vote to evaluate

544
00:15:38,720 --> 00:15:41,519
that will look at the changes proposed

545
00:15:40,000 --> 00:15:43,199
by the proposal so it checks there's

546
00:15:41,519 --> 00:15:45,920
only one change proposed

547
00:15:43,199 --> 00:15:47,040
uh that the the proposal is a new code

548
00:15:45,920 --> 00:15:48,639
uh proposal

549
00:15:47,040 --> 00:15:50,240
and that the new code is this this new

550
00:15:48,639 --> 00:15:51,120
code id that we have decided is

551
00:15:50,240 --> 00:15:52,560
acceptable

552
00:15:51,120 --> 00:15:54,959
so probably typically what would happen

553
00:15:52,560 --> 00:15:56,160
is the member would have ahead of time

554
00:15:54,959 --> 00:15:57,599
communicated with the other members and

555
00:15:56,160 --> 00:15:58,800
say hey look i want to deploy this this

556
00:15:57,600 --> 00:16:00,880
new version of the code

557
00:15:58,800 --> 00:16:02,079
um i give you what you need to reproduce

558
00:16:00,880 --> 00:16:03,680
the build

559
00:16:02,079 --> 00:16:05,120
you added the code you produce the build

560
00:16:03,680 --> 00:16:06,239
you get to the same id you get the same

561
00:16:05,120 --> 00:16:07,920
hash over the code

562
00:16:06,240 --> 00:16:09,440
and you say okay i want to put a vote

563
00:16:07,920 --> 00:16:11,040
for that so you're not accepting the

564
00:16:09,440 --> 00:16:12,720
proposal itself you're accepting

565
00:16:11,040 --> 00:16:15,519
this particular code id that's that's

566
00:16:12,720 --> 00:16:15,519
what you're accepting there

567
00:16:16,880 --> 00:16:20,800
um yeah so code updates uh it's

568
00:16:19,759 --> 00:16:23,120
essentially a sort of

569
00:16:20,800 --> 00:16:24,560
simple three-phase mechanism you add a

570
00:16:23,120 --> 00:16:26,160
new supported code version through this

571
00:16:24,560 --> 00:16:28,880
vote mechanism

572
00:16:26,160 --> 00:16:29,759
everyone agrees to that for a while when

573
00:16:28,880 --> 00:16:31,839
you do that

574
00:16:29,759 --> 00:16:33,120
as you speed up new nodes that run this

575
00:16:31,839 --> 00:16:34,320
new version of the code

576
00:16:33,120 --> 00:16:36,160
you want to make sure that the new and

577
00:16:34,320 --> 00:16:39,279
the old versions are compatible

578
00:16:36,160 --> 00:16:40,560
um and then you can stage a vote say i

579
00:16:39,279 --> 00:16:41,120
want to remove the old version of the

580
00:16:40,560 --> 00:16:42,399
codes

581
00:16:41,120 --> 00:16:44,240
now that we've upgraded maybe the new

582
00:16:42,399 --> 00:16:45,360
version contains a security fix and you

583
00:16:44,240 --> 00:16:46,720
don't want to allow the old version to

584
00:16:45,360 --> 00:16:47,920
run anymore so you stage another vote

585
00:16:46,720 --> 00:16:48,639
see we should get rid of the old version

586
00:16:47,920 --> 00:16:51,199
now because

587
00:16:48,639 --> 00:16:52,240
we have a good quorum of uh of nodes

588
00:16:51,199 --> 00:16:54,880
running the new version

589
00:16:52,240 --> 00:16:55,279
um and then if that passes uh then the

590
00:16:54,880 --> 00:16:58,639
new

591
00:16:55,279 --> 00:17:00,320
the the old code is essentially um

592
00:16:58,639 --> 00:17:01,759
uh removed and so nodes that are running

593
00:17:00,320 --> 00:17:02,560
the old code can't be part of the

594
00:17:01,759 --> 00:17:05,839
network anymore

595
00:17:02,560 --> 00:17:05,839
and now you can tear them down

596
00:17:07,039 --> 00:17:11,439
uh so another thing we potentially need

597
00:17:09,039 --> 00:17:12,959
governance for is catastrophic recovery

598
00:17:11,439 --> 00:17:15,120
so typically we run with a consensus

599
00:17:12,959 --> 00:17:16,240
algorithm and it will be

600
00:17:15,119 --> 00:17:17,760
there will be a formula that tells us

601
00:17:16,240 --> 00:17:18,880
how many nodes we can tolerate are

602
00:17:17,760 --> 00:17:20,559
failing

603
00:17:18,880 --> 00:17:22,240
and that's that's basically f so if if

604
00:17:20,559 --> 00:17:22,959
we're running cfd crash volt turns we

605
00:17:22,240 --> 00:17:24,640
can

606
00:17:22,959 --> 00:17:26,000
if we have two f plus one nodes we can

607
00:17:24,640 --> 00:17:26,720
we could lose f nodes and still make

608
00:17:26,000 --> 00:17:28,799
progress

609
00:17:26,720 --> 00:17:29,760
if we're running with b synthetics

610
00:17:28,799 --> 00:17:31,120
instead we

611
00:17:29,760 --> 00:17:33,120
we need to have three f plus one nodes

612
00:17:31,120 --> 00:17:35,360
then we can tolerate f failures

613
00:17:33,120 --> 00:17:36,639
um but if we have more than failures

614
00:17:35,360 --> 00:17:37,439
then the network can't make progress

615
00:17:36,640 --> 00:17:39,039
anymore because

616
00:17:37,440 --> 00:17:40,240
there's no quorum so transactions can't

617
00:17:39,039 --> 00:17:42,240
be globally committed and now we're

618
00:17:40,240 --> 00:17:43,440
stuck

619
00:17:42,240 --> 00:17:44,880
so in that case we need to perform

620
00:17:43,440 --> 00:17:46,320
catastrophic recovery and what happens

621
00:17:44,880 --> 00:17:47,600
is we need to go back to the members who

622
00:17:46,320 --> 00:17:48,879
are ultimately the root of trust for

623
00:17:47,600 --> 00:17:51,280
this

624
00:17:48,880 --> 00:17:52,960
and they so we have a mechanism that

625
00:17:51,280 --> 00:17:54,399
uses key shares to do that

626
00:17:52,960 --> 00:17:56,400
um there's also another mechanism that

627
00:17:54,400 --> 00:18:00,000
you see in keys but essentially

628
00:17:56,400 --> 00:18:01,840
you need a way for the members to um

629
00:18:00,000 --> 00:18:03,120
come together and put together enough

630
00:18:01,840 --> 00:18:03,678
information that they can read the old

631
00:18:03,120 --> 00:18:05,360
ledger

632
00:18:03,679 --> 00:18:07,320
and produce a new service that runs on

633
00:18:05,360 --> 00:18:08,479
the basis of the old ledger

634
00:18:07,320 --> 00:18:10,960
[Music]

635
00:18:08,480 --> 00:18:12,960
and you want to have the the new the new

636
00:18:10,960 --> 00:18:14,480
ledger endorsed by the old service

637
00:18:12,960 --> 00:18:16,640
so if people are connected to your

638
00:18:14,480 --> 00:18:18,000
service and you have not distributed the

639
00:18:16,640 --> 00:18:19,440
new identity of the service to them yet

640
00:18:18,000 --> 00:18:21,200
they can still connect

641
00:18:19,440 --> 00:18:22,799
and they still know that this is

642
00:18:21,200 --> 00:18:24,000
endorsed by the older entity

643
00:18:22,799 --> 00:18:26,000
here the members have quite a lot of

644
00:18:24,000 --> 00:18:27,919
power so it's up to them not to endorse

645
00:18:26,000 --> 00:18:29,039
a new service or not to endorse multiple

646
00:18:27,919 --> 00:18:30,320
new services for example

647
00:18:29,039 --> 00:18:31,760
or to endorse a new service unless

648
00:18:30,320 --> 00:18:32,960
they're happy with the state of it but

649
00:18:31,760 --> 00:18:34,559
it sort of works the same way as the

650
00:18:32,960 --> 00:18:37,440
bootstrapping the first time works

651
00:18:34,559 --> 00:18:39,120
um someone staged one of the members

652
00:18:37,440 --> 00:18:40,720
stages of recovery votes the other the

653
00:18:39,120 --> 00:18:41,360
other members get to examine the state

654
00:18:40,720 --> 00:18:42,400
of the service

655
00:18:41,360 --> 00:18:44,159
and if they're happy with the state of

656
00:18:42,400 --> 00:18:46,960
the service then they endorse it and

657
00:18:44,160 --> 00:18:46,960
they can move forward

658
00:18:48,720 --> 00:18:52,080
and so finally we want verifiabilities

659
00:18:50,559 --> 00:18:53,039
it's no good to have a well-defined

660
00:18:52,080 --> 00:18:54,879
governance if

661
00:18:53,039 --> 00:18:56,320
no one can audit it because then there's

662
00:18:54,880 --> 00:18:57,760
no trust you have to trust that the code

663
00:18:56,320 --> 00:18:59,678
has been written correctly and that all

664
00:18:57,760 --> 00:19:01,520
the votes have been executed correctly

665
00:18:59,679 --> 00:19:02,720
um so for that to happen all the

666
00:19:01,520 --> 00:19:04,320
governance states all the

667
00:19:02,720 --> 00:19:06,000
all the tables that hold the governance

668
00:19:04,320 --> 00:19:07,200
in our system all public so anyone who

669
00:19:06,000 --> 00:19:08,960
has access to ledger which should be

670
00:19:07,200 --> 00:19:10,720
anybody

671
00:19:08,960 --> 00:19:12,240
can see what the governance tables hold

672
00:19:10,720 --> 00:19:13,440
and they can essentially play through

673
00:19:12,240 --> 00:19:14,880
the garden story

674
00:19:13,440 --> 00:19:16,640
and if anything doesn't match like one

675
00:19:14,880 --> 00:19:17,039
of the votes you know that the total

676
00:19:16,640 --> 00:19:18,240
that

677
00:19:17,039 --> 00:19:19,679
was counted doesn't matter and so on

678
00:19:18,240 --> 00:19:20,880
they can say hold on there's a problem

679
00:19:19,679 --> 00:19:22,480
there

680
00:19:20,880 --> 00:19:23,840
all the guns transactions have to be

681
00:19:22,480 --> 00:19:24,400
signed this is enforced by the service

682
00:19:23,840 --> 00:19:25,600
as well

683
00:19:24,400 --> 00:19:27,679
so you not only can say there's a

684
00:19:25,600 --> 00:19:29,039
problem there you can also blame whoever

685
00:19:27,679 --> 00:19:31,120
is responsible for this which are the

686
00:19:29,039 --> 00:19:33,120
members

687
00:19:31,120 --> 00:19:34,479
has basically made a you know made a

688
00:19:33,120 --> 00:19:36,239
mistake or lied about the way they voted

689
00:19:34,480 --> 00:19:37,600
for example

690
00:19:36,240 --> 00:19:38,640
this happens in the same flow order as

691
00:19:37,600 --> 00:19:40,639
other transactions so all our

692
00:19:38,640 --> 00:19:42,640
transactions happen on the same kv

693
00:19:40,640 --> 00:19:44,160
and governance is done over a set of

694
00:19:42,640 --> 00:19:46,799
tables which is part of this kv

695
00:19:44,160 --> 00:19:47,440
they're not separate so um the the

696
00:19:46,799 --> 00:19:48,799
versions

697
00:19:47,440 --> 00:19:50,240
the commit ids you get for for

698
00:19:48,799 --> 00:19:51,039
governance changes and for regular

699
00:19:50,240 --> 00:19:53,440
transactions are

700
00:19:51,039 --> 00:19:55,919
on the same scale on the same time scale

701
00:19:53,440 --> 00:19:57,200
so it's very easy to decide

702
00:19:55,919 --> 00:19:58,400
you know which business transactions

703
00:19:57,200 --> 00:20:00,160
should have been affected by governance

704
00:19:58,400 --> 00:20:01,039
so if a user for example has been kicked

705
00:20:00,160 --> 00:20:01,760
out of the system and you're trying to

706
00:20:01,039 --> 00:20:03,120
figure out

707
00:20:01,760 --> 00:20:04,400
exactly until when they could have

708
00:20:03,120 --> 00:20:05,678
performed transactions or they should

709
00:20:04,400 --> 00:20:07,039
have been able to perform transactions

710
00:20:05,679 --> 00:20:07,520
you can easily because it's part of the

711
00:20:07,039 --> 00:20:11,280
same

712
00:20:07,520 --> 00:20:11,679
version uh timeline um and so finally

713
00:20:11,280 --> 00:20:13,280
yeah

714
00:20:11,679 --> 00:20:15,039
also all of this is recorded in terms of

715
00:20:13,280 --> 00:20:17,280
ledger so we use sort of standard

716
00:20:15,039 --> 00:20:19,039
uh blockchain mechanisms or merkle trees

717
00:20:17,280 --> 00:20:19,600
to make sure that all our updates are

718
00:20:19,039 --> 00:20:20,960
changed

719
00:20:19,600 --> 00:20:22,480
and that you can't just go back and edit

720
00:20:20,960 --> 00:20:23,919
some part of the history without it

721
00:20:22,480 --> 00:20:26,400
being very very visible

722
00:20:23,919 --> 00:20:26,400
later on

723
00:20:28,400 --> 00:20:31,679
so it's all good to have the stuff but

724
00:20:30,000 --> 00:20:33,600
it has to be easy to write applications

725
00:20:31,679 --> 00:20:35,440
for it

726
00:20:33,600 --> 00:20:36,799
so the first the first guarantee we want

727
00:20:35,440 --> 00:20:38,640
to make is that

728
00:20:36,799 --> 00:20:41,200
unless you really go out of your way to

729
00:20:38,640 --> 00:20:43,440
to log like private information

730
00:20:41,200 --> 00:20:44,799
uh all data in ccf is encrypted all the

731
00:20:43,440 --> 00:20:46,880
time so it's obviously encrypted at rest

732
00:20:44,799 --> 00:20:49,520
so all the data we have to store on disk

733
00:20:46,880 --> 00:20:50,559
uh for for recovery and audit is is

734
00:20:49,520 --> 00:20:53,360
encrypted

735
00:20:50,559 --> 00:20:53,840
um all data that is sent around the

736
00:20:53,360 --> 00:20:56,320
network

737
00:20:53,840 --> 00:20:56,879
um is encrypted on the wire and in

738
00:20:56,320 --> 00:20:58,879
memory

739
00:20:56,880 --> 00:20:59,919
um we also get encryption from our use

740
00:20:58,880 --> 00:21:02,000
of enclaves

741
00:20:59,919 --> 00:21:03,200
so if somebody has access to the machine

742
00:21:02,000 --> 00:21:05,440
they cannot just look at what we're

743
00:21:03,200 --> 00:21:05,440
doing

744
00:21:06,799 --> 00:21:11,918
so roughly speaking our application

745
00:21:09,600 --> 00:21:14,879
schema looks something like this

746
00:21:11,919 --> 00:21:15,520
the application code plugs in in a gray

747
00:21:14,880 --> 00:21:17,200
box

748
00:21:15,520 --> 00:21:19,120
and everything else is is provided by

749
00:21:17,200 --> 00:21:19,760
the framework so client frames come from

750
00:21:19,120 --> 00:21:22,239
the host

751
00:21:19,760 --> 00:21:23,039
um that's just tls it comes to sstrs

752
00:21:22,240 --> 00:21:24,480
frames

753
00:21:23,039 --> 00:21:26,400
uh we have a frontend component that

754
00:21:24,480 --> 00:21:28,799
just takes care of um

755
00:21:26,400 --> 00:21:30,720
essentially the the ts functionality

756
00:21:28,799 --> 00:21:31,760
decrypting things we have authentication

757
00:21:30,720 --> 00:21:33,120
against the kv so

758
00:21:31,760 --> 00:21:34,720
remember we know exactly at which point

759
00:21:33,120 --> 00:21:36,239
in time which users or which members are

760
00:21:34,720 --> 00:21:38,799
allowed to use the system

761
00:21:36,240 --> 00:21:40,000
um because of our governance so we can

762
00:21:38,799 --> 00:21:41,360
check that and then

763
00:21:40,000 --> 00:21:42,640
if their identity is not allowed to do

764
00:21:41,360 --> 00:21:43,760
the operation base they say what they

765
00:21:42,640 --> 00:21:44,799
want to do at this point we can reject

766
00:21:43,760 --> 00:21:46,000
it automatically

767
00:21:44,799 --> 00:21:48,320
it's not something that the user has to

768
00:21:46,000 --> 00:21:49,840
worry about so things come to the user

769
00:21:48,320 --> 00:21:50,960
with this identity that's been

770
00:21:49,840 --> 00:21:53,199
verified so we've authenticated

771
00:21:50,960 --> 00:21:54,320
transactions and we've also authorized

772
00:21:53,200 --> 00:21:56,240
them at this point

773
00:21:54,320 --> 00:21:57,678
um and then the application engine can

774
00:21:56,240 --> 00:22:00,159
just produce a set of

775
00:21:57,679 --> 00:22:01,360
read and write transactions or single

776
00:22:00,159 --> 00:22:02,799
sorry read and write transactions

777
00:22:01,360 --> 00:22:04,719
against the key value store so that

778
00:22:02,799 --> 00:22:05,840
in their business logic all state has to

779
00:22:04,720 --> 00:22:07,440
go in the key value store that's

780
00:22:05,840 --> 00:22:08,720
provided by ccf

781
00:22:07,440 --> 00:22:11,120
they can perform any operations they

782
00:22:08,720 --> 00:22:13,120
want but in order for the states

783
00:22:11,120 --> 00:22:14,479
to be persistent to larger to be

784
00:22:13,120 --> 00:22:16,000
recoverable and to be distributed and

785
00:22:14,480 --> 00:22:17,600
available across the network

786
00:22:16,000 --> 00:22:19,840
um it has to happen as operations

787
00:22:17,600 --> 00:22:21,520
against the key value store

788
00:22:19,840 --> 00:22:23,120
and then further downstream we replicate

789
00:22:21,520 --> 00:22:25,120
this using consensus

790
00:22:23,120 --> 00:22:26,559
so that then that again goes back out to

791
00:22:25,120 --> 00:22:28,799
the host um

792
00:22:26,559 --> 00:22:29,600
it's a bunch of encrypted frames um back

793
00:22:28,799 --> 00:22:32,080
out to the ledger

794
00:22:29,600 --> 00:22:34,320
so to be to be stored in current storage

795
00:22:32,080 --> 00:22:37,039
um and at the regular interval we also

796
00:22:34,320 --> 00:22:38,080
uh so we hash all the transactions um we

797
00:22:37,039 --> 00:22:39,440
put them in order three and then a

798
00:22:38,080 --> 00:22:40,320
regular until we sign that that goes to

799
00:22:39,440 --> 00:22:41,919
our ledger

800
00:22:40,320 --> 00:22:45,039
so this is this is how we get our type

801
00:22:41,919 --> 00:22:45,039
of proof uh audit

802
00:22:45,440 --> 00:22:49,520
um so yeah so we we have encrypted tcp

803
00:22:48,240 --> 00:22:50,240
frames coming in and out to the ledger

804
00:22:49,520 --> 00:22:51,520
that's sort of

805
00:22:50,240 --> 00:22:53,039
coming in and out sorry of the

806
00:22:51,520 --> 00:22:54,080
application that's the only thing that's

807
00:22:53,039 --> 00:22:55,840
um

808
00:22:54,080 --> 00:22:57,760
goes in and out of the enclave we have

809
00:22:55,840 --> 00:23:00,000
an apparently larger on disk

810
00:22:57,760 --> 00:23:01,120
and all application states must be in

811
00:23:00,000 --> 00:23:04,080
the key value store for

812
00:23:01,120 --> 00:23:04,080
all the guarantees to hold

813
00:23:04,480 --> 00:23:08,799
so we have a couple of consensus

814
00:23:05,840 --> 00:23:10,639
variants crash filters is the main one

815
00:23:08,799 --> 00:23:12,240
we use now um

816
00:23:10,640 --> 00:23:14,080
we have a bft implementation that's

817
00:23:12,240 --> 00:23:15,120
still kind of work in progress but

818
00:23:14,080 --> 00:23:17,360
which is available in the build for

819
00:23:15,120 --> 00:23:19,199
people who want to try it so

820
00:23:17,360 --> 00:23:21,678
if you use crash world turns we have a

821
00:23:19,200 --> 00:23:23,120
an enclave raft variant

822
00:23:21,679 --> 00:23:25,120
what we do there is if you have two f

823
00:23:23,120 --> 00:23:26,719
plus one nodes you can have f two up to

824
00:23:25,120 --> 00:23:27,439
f failures and the network will still

825
00:23:26,720 --> 00:23:29,679
continue to

826
00:23:27,440 --> 00:23:32,159
make progress uh because we've added

827
00:23:29,679 --> 00:23:34,480
signatures

828
00:23:32,159 --> 00:23:35,520
you can blame compromised nodes and you

829
00:23:34,480 --> 00:23:38,960
can

830
00:23:35,520 --> 00:23:40,879
essentially go back to ledger and

831
00:23:38,960 --> 00:23:42,720
offline verify you know what has been

832
00:23:40,880 --> 00:23:44,240
done and potentially take things out if

833
00:23:42,720 --> 00:23:45,760
you think some notes have been malicious

834
00:23:44,240 --> 00:23:47,919
but it's not happening online so if a

835
00:23:45,760 --> 00:23:49,679
node somewhere is acting maliciously

836
00:23:47,919 --> 00:23:51,360
they can potentially go on doing it for

837
00:23:49,679 --> 00:23:53,440
some time you have to offline

838
00:23:51,360 --> 00:23:54,479
check for that and you know remove the

839
00:23:53,440 --> 00:23:56,159
transactions they've done

840
00:23:54,480 --> 00:23:57,760
and so here we rely on the t for both

841
00:23:56,159 --> 00:24:00,320
confidentiality and integrity

842
00:23:57,760 --> 00:24:01,039
um if the if the t is compromised if

843
00:24:00,320 --> 00:24:03,200
someone can

844
00:24:01,039 --> 00:24:05,200
for example tamper with the memory we

845
00:24:03,200 --> 00:24:06,720
won't be able to to detect it

846
00:24:05,200 --> 00:24:09,039
online it will have to it'll take some

847
00:24:06,720 --> 00:24:11,919
offline audit for it to be detected

848
00:24:09,039 --> 00:24:13,440
um if you use our pbft varit which again

849
00:24:11,919 --> 00:24:14,159
still work in progress but it's coming

850
00:24:13,440 --> 00:24:16,559
online

851
00:24:14,159 --> 00:24:18,159
then if you have three f plus one nodes

852
00:24:16,559 --> 00:24:19,600
you can tolerate up to f failures but

853
00:24:18,159 --> 00:24:20,559
you can target up to f nodes being

854
00:24:19,600 --> 00:24:22,799
malicious

855
00:24:20,559 --> 00:24:24,000
so the nice thing about that here is

856
00:24:22,799 --> 00:24:25,760
that you still rely on the t for

857
00:24:24,000 --> 00:24:26,880
confidentiality so if sjx is actually

858
00:24:25,760 --> 00:24:29,039
broken one day

859
00:24:26,880 --> 00:24:30,240
well you know your data still is no

860
00:24:29,039 --> 00:24:32,400
longer confidential

861
00:24:30,240 --> 00:24:34,080
but you potentially don't lose integrity

862
00:24:32,400 --> 00:24:35,440
if fewer than f nodes are affected

863
00:24:34,080 --> 00:24:37,279
so if you're clever enough about the way

864
00:24:35,440 --> 00:24:39,039
you distribute your instances and

865
00:24:37,279 --> 00:24:40,720
they're not all you know

866
00:24:39,039 --> 00:24:43,120
subject to the same attacker because

867
00:24:40,720 --> 00:24:44,400
maybe they're geographically distributed

868
00:24:43,120 --> 00:24:46,959
or distributed across multiple

869
00:24:44,400 --> 00:24:47,440
cloud providers and so on if you manage

870
00:24:46,960 --> 00:24:50,480
to keep

871
00:24:47,440 --> 00:24:51,679
two f plus one nodes that aren't

872
00:24:50,480 --> 00:24:53,200
affected by the attack

873
00:24:51,679 --> 00:24:54,960
you still keep integrity so your

874
00:24:53,200 --> 00:24:56,080
attacker gets to see the data but they

875
00:24:54,960 --> 00:24:58,840
don't get to

876
00:24:56,080 --> 00:25:01,840
manufacture transactions that are

877
00:24:58,840 --> 00:25:01,840
illegitimate

878
00:25:01,919 --> 00:25:05,279
so the key value store is is basically

879
00:25:03,919 --> 00:25:06,559
our very simple storage and phase

880
00:25:05,279 --> 00:25:07,600
there's really just two things you can

881
00:25:06,559 --> 00:25:09,279
do with it you can

882
00:25:07,600 --> 00:25:10,639
get stuff out of it and put stuff back

883
00:25:09,279 --> 00:25:12,799
inside um

884
00:25:10,640 --> 00:25:13,919
aggressive ccf is implemented in c plus

885
00:25:12,799 --> 00:25:14,960
so we'll get to the runtimes as

886
00:25:13,919 --> 00:25:16,720
supported but

887
00:25:14,960 --> 00:25:18,000
you can put any old c plus type in and

888
00:25:16,720 --> 00:25:19,120
out of there

889
00:25:18,000 --> 00:25:21,600
and then for other languages we have

890
00:25:19,120 --> 00:25:21,600
mappings

891
00:25:22,640 --> 00:25:26,080
transactions are very straightforward

892
00:25:24,320 --> 00:25:27,439
it's like any local

893
00:25:26,080 --> 00:25:30,158
key value store we've used we have

894
00:25:27,440 --> 00:25:32,240
strict areas of bt and opacity

895
00:25:30,159 --> 00:25:34,240
so that errors only see a consistent

896
00:25:32,240 --> 00:25:35,679
state there's there's really no uh

897
00:25:34,240 --> 00:25:39,440
no tricks there it's very very easy to

898
00:25:35,679 --> 00:25:41,279
use it behaves the way you'd expect

899
00:25:39,440 --> 00:25:42,720
you can have app driven confidentiality

900
00:25:41,279 --> 00:25:44,159
because of this very flexible key value

901
00:25:42,720 --> 00:25:45,840
store model so the app

902
00:25:44,159 --> 00:25:47,279
decides completely how it wants to

903
00:25:45,840 --> 00:25:48,320
expose data it's up to the application

904
00:25:47,279 --> 00:25:50,400
logic

905
00:25:48,320 --> 00:25:52,000
to decide how to do that there is no

906
00:25:50,400 --> 00:25:53,600
built-in support in the key value store

907
00:25:52,000 --> 00:25:54,960
to label things with certain degrees of

908
00:25:53,600 --> 00:25:56,959
privacy or anything it's completely left

909
00:25:54,960 --> 00:25:59,520
to the code

910
00:25:56,960 --> 00:26:00,880
and you can of course store your code in

911
00:25:59,520 --> 00:26:02,720
this in the store itself so

912
00:26:00,880 --> 00:26:03,520
you have the key value store and one of

913
00:26:02,720 --> 00:26:04,240
the things you can do is some of the

914
00:26:03,520 --> 00:26:05,679
values could be

915
00:26:04,240 --> 00:26:06,880
code themselves so if you want to upload

916
00:26:05,679 --> 00:26:08,720
scripts if you want to upload things

917
00:26:06,880 --> 00:26:11,840
that can be executed by the users um

918
00:26:08,720 --> 00:26:11,840
then of course you can

919
00:26:12,799 --> 00:26:16,480
another thing that the framework

920
00:26:13,679 --> 00:26:19,440
provides for you is transaction receipts

921
00:26:16,480 --> 00:26:20,720
so this is a little tricky for you for

922
00:26:19,440 --> 00:26:22,400
the applications to implement themselves

923
00:26:20,720 --> 00:26:23,120
for for a variety of reasons but

924
00:26:22,400 --> 00:26:25,600
basically

925
00:26:23,120 --> 00:26:26,879
applications should be able to or users

926
00:26:25,600 --> 00:26:28,559
that use the application should be able

927
00:26:26,880 --> 00:26:30,000
to get receipts from the application

928
00:26:28,559 --> 00:26:31,600
that are signed by the service that say

929
00:26:30,000 --> 00:26:33,120
that this out

930
00:26:31,600 --> 00:26:34,959
this outcome happened and it happened at

931
00:26:33,120 --> 00:26:36,399
this version inside the kv so if you're

932
00:26:34,960 --> 00:26:37,039
talking to people who are outside the

933
00:26:36,400 --> 00:26:38,720
system

934
00:26:37,039 --> 00:26:40,480
and you're trying to prove to them that

935
00:26:38,720 --> 00:26:41,919
something did happen or you

936
00:26:40,480 --> 00:26:43,120
you did do something and you want to

937
00:26:41,919 --> 00:26:44,240
give them cryptographic evidence that

938
00:26:43,120 --> 00:26:45,600
this thing happened

939
00:26:44,240 --> 00:26:47,520
and it should be something that can be

940
00:26:45,600 --> 00:26:48,799
verified offline they shouldn't be

941
00:26:47,520 --> 00:26:50,080
they shouldn't need to be a user that

942
00:26:48,799 --> 00:26:51,200
system and to talk to that system to

943
00:26:50,080 --> 00:26:54,559
verify that this happened

944
00:26:51,200 --> 00:26:54,559
you can do that through the receipts

945
00:26:55,200 --> 00:26:58,720
and so you can write your ccf apps

946
00:26:57,200 --> 00:27:00,240
either in c plus plus directly which is

947
00:26:58,720 --> 00:27:01,840
probably what you do for maximum speed a

948
00:27:00,240 --> 00:27:03,840
little bit tricky but you know

949
00:27:01,840 --> 00:27:05,039
it's not that bad it's modern c plus

950
00:27:03,840 --> 00:27:07,279
plus

951
00:27:05,039 --> 00:27:08,879
or you can use one of the runtimes that

952
00:27:07,279 --> 00:27:10,880
we've that we've built

953
00:27:08,880 --> 00:27:12,159
um so the standard one that's that's

954
00:27:10,880 --> 00:27:12,799
better tested that governance runs at

955
00:27:12,159 --> 00:27:15,200
the moment

956
00:27:12,799 --> 00:27:17,039
is lua um we also have a project called

957
00:27:15,200 --> 00:27:18,960
evm for ccf which allows you to use any

958
00:27:17,039 --> 00:27:20,799
evm compatible language like so easy

959
00:27:18,960 --> 00:27:23,039
to run smart contracts against the kv

960
00:27:20,799 --> 00:27:24,559
store

961
00:27:23,039 --> 00:27:26,640
or recently we've added javascript

962
00:27:24,559 --> 00:27:28,720
support it's still a bit experimental

963
00:27:26,640 --> 00:27:29,840
and there's probably the odd box here

964
00:27:28,720 --> 00:27:31,760
and there still

965
00:27:29,840 --> 00:27:34,158
but uh but it's coming as a supported

966
00:27:31,760 --> 00:27:36,240
option as well um

967
00:27:34,159 --> 00:27:37,760
so that's mostly it and the code is on

968
00:27:36,240 --> 00:27:42,799
github so go check it out

969
00:27:37,760 --> 00:27:42,799
and try it out any questions

970
00:27:42,960 --> 00:27:46,840
yes i'm very curious that you have a

971
00:27:45,520 --> 00:27:49,840
multiple station

972
00:27:46,840 --> 00:27:52,879
yep i didn't hear any detail about it so

973
00:27:49,840 --> 00:27:53,840
i wanted to ask is it possible to not be

974
00:27:52,880 --> 00:27:56,399
a member

975
00:27:53,840 --> 00:27:57,600
of the network and somehow do a

976
00:27:56,399 --> 00:28:00,320
multi-station and say

977
00:27:57,600 --> 00:28:01,120
okay this confidential network or

978
00:28:00,320 --> 00:28:03,678
whatever

979
00:28:01,120 --> 00:28:04,399
it is it has system integrity what kind

980
00:28:03,679 --> 00:28:05,919
of points

981
00:28:04,399 --> 00:28:07,760
do you use for the remote station

982
00:28:05,919 --> 00:28:09,120
structure or some details because i

983
00:28:07,760 --> 00:28:12,640
didn't see any slides about it

984
00:28:09,120 --> 00:28:14,479
sorry acid working yes it's working uh

985
00:28:12,640 --> 00:28:15,679
the real test station so uh sorry maybe

986
00:28:14,480 --> 00:28:17,600
something i should have made clear is we

987
00:28:15,679 --> 00:28:20,000
use the open enclave sdk

988
00:28:17,600 --> 00:28:21,918
um and essentially at the moment so the

989
00:28:20,000 --> 00:28:23,440
opening client sdk supports sgx mainly

990
00:28:21,919 --> 00:28:25,039
so our stations are just sjx

991
00:28:23,440 --> 00:28:27,520
at station there's a standard sjx at the

992
00:28:25,039 --> 00:28:28,320
station and open enclave is adding

993
00:28:27,520 --> 00:28:30,639
support for

994
00:28:28,320 --> 00:28:31,918
armed trust zone coming pretty soon so

995
00:28:30,640 --> 00:28:32,720
once they do we'll hopefully be

996
00:28:31,919 --> 00:28:34,960
multi-enclave

997
00:28:32,720 --> 00:28:34,960
um

998
00:28:36,000 --> 00:28:38,240
they don't have a mechanism for that

999
00:28:37,200 --> 00:28:40,000
yeah they don't have they don't have a

1000
00:28:38,240 --> 00:28:43,200
mechanism for that now yeah that's true

1001
00:28:40,000 --> 00:28:44,799
but at the moment if you run this yes

1002
00:28:43,200 --> 00:28:46,880
and it's using the format that's

1003
00:28:44,799 --> 00:28:48,480
open and click is using that's that's

1004
00:28:46,880 --> 00:28:50,720
right which is which is intel

1005
00:28:48,480 --> 00:28:51,919
enclave node and i'm not part of a

1006
00:28:50,720 --> 00:28:55,520
confidential network

1007
00:28:51,919 --> 00:28:57,200
yeah i can still verify

1008
00:28:55,520 --> 00:28:58,960
you don't need to use an open cloud node

1009
00:28:57,200 --> 00:29:01,279
so open enclave

1010
00:28:58,960 --> 00:29:03,440
provides a small utility library but the

1011
00:29:01,279 --> 00:29:05,120
intel sdk does as well

1012
00:29:03,440 --> 00:29:06,640
checking the remote attestation provided

1013
00:29:05,120 --> 00:29:08,000
by an enclave it's just a matter of

1014
00:29:06,640 --> 00:29:11,120
getting the right certs and the right

1015
00:29:08,000 --> 00:29:12,799
crls from intel in the right format

1016
00:29:11,120 --> 00:29:14,959
structure yeah the format is public i

1017
00:29:12,799 --> 00:29:16,639
mean it's specified in the intel sdk

1018
00:29:14,960 --> 00:29:18,720
documentation

1019
00:29:16,640 --> 00:29:19,840
so you don't have such use case where

1020
00:29:18,720 --> 00:29:22,399
someone wants to

1021
00:29:19,840 --> 00:29:23,918
externally verify your network so we do

1022
00:29:22,399 --> 00:29:25,760
and so if people want to do that

1023
00:29:23,919 --> 00:29:27,039
so as a user you can of course trust the

1024
00:29:25,760 --> 00:29:28,559
network identity because it's been given

1025
00:29:27,039 --> 00:29:29,520
to you by members and it's endorsed by

1026
00:29:28,559 --> 00:29:31,039
members

1027
00:29:29,520 --> 00:29:32,399
but if you want to verify the enclaves

1028
00:29:31,039 --> 00:29:33,360
for yourself before you connect one of

1029
00:29:32,399 --> 00:29:34,639
the things you can do is there is an

1030
00:29:33,360 --> 00:29:35,279
endpoint that allows you to get a list

1031
00:29:34,640 --> 00:29:37,279
of nodes

1032
00:29:35,279 --> 00:29:38,960
and the attestation for each node and

1033
00:29:37,279 --> 00:29:40,000
you could yourself verify that station

1034
00:29:38,960 --> 00:29:41,520
for each node

1035
00:29:40,000 --> 00:29:43,200
and make sure that it's running the

1036
00:29:41,520 --> 00:29:45,440
right version of the code uh

1037
00:29:43,200 --> 00:29:46,559
against an up-to-date you know intel jx

1038
00:29:45,440 --> 00:29:47,760
enclave and so on so you can do that

1039
00:29:46,559 --> 00:29:50,080
yourself as well if you want to

1040
00:29:47,760 --> 00:29:51,600
so if i would like to do that to develop

1041
00:29:50,080 --> 00:29:53,918
an application using the library you

1042
00:29:51,600 --> 00:29:53,918
mentioned

1043
00:30:00,480 --> 00:30:04,480
yeah you can absolutely do that okay and

1044
00:30:02,320 --> 00:30:05,840
then verify

1045
00:30:04,480 --> 00:30:07,600
yeah and so you'll be able to verify

1046
00:30:05,840 --> 00:30:10,240
that basically these nodes are running

1047
00:30:07,600 --> 00:30:11,520
um with a given identity so they'll have

1048
00:30:10,240 --> 00:30:12,880
the the public key

1049
00:30:11,520 --> 00:30:14,158
uh for the pair where they hold the

1050
00:30:12,880 --> 00:30:16,080
private key that's kept inside your

1051
00:30:14,159 --> 00:30:18,720
class

1052
00:30:16,080 --> 00:30:19,360
like the measurements yeah sorry what

1053
00:30:18,720 --> 00:30:21,039
the measurements

1054
00:30:19,360 --> 00:30:22,639
the measurements that are in the station

1055
00:30:21,039 --> 00:30:24,080
of the nodes yes

1056
00:30:22,640 --> 00:30:26,000
so it's the identity of the node the

1057
00:30:24,080 --> 00:30:28,399
code that the node is running and

1058
00:30:26,000 --> 00:30:29,840
the platform details yeah that's what

1059
00:30:28,399 --> 00:30:32,239
sjx at stations

1060
00:30:29,840 --> 00:30:33,840
provide to you yeah but i'll still be

1061
00:30:32,240 --> 00:30:37,840
bounded by the agx server

1062
00:30:33,840 --> 00:30:39,520
essentially to get the attestation so um

1063
00:30:37,840 --> 00:30:40,879
if you do this normally then yes you

1064
00:30:39,520 --> 00:30:42,639
have to talk to

1065
00:30:40,880 --> 00:30:45,200
the intel servers to get the search and

1066
00:30:42,640 --> 00:30:47,039
so on uh intel has a mechanism to to

1067
00:30:45,200 --> 00:30:48,840
delegate this so i know that in azure if

1068
00:30:47,039 --> 00:30:51,200
you use the microsoft cloud for example

1069
00:30:48,840 --> 00:30:53,039
uh um

1070
00:30:51,200 --> 00:30:54,799
yes you can use a microsoft service and

1071
00:30:53,039 --> 00:30:55,360
you can set up your own service to do

1072
00:30:54,799 --> 00:30:56,480
that

1073
00:30:55,360 --> 00:30:57,678
but you have to talk to intel it's

1074
00:30:56,480 --> 00:31:00,480
probably not super easy but it's

1075
00:30:57,679 --> 00:31:00,480
something you could probably do

1076
00:31:01,120 --> 00:31:06,239
yeah yeah i have business cards and you

1077
00:31:03,760 --> 00:31:07,760
come to me afterwards

1078
00:31:06,240 --> 00:31:10,159
yeah yeah okay good but thanks for the

1079
00:31:07,760 --> 00:31:13,120
answer thank you

1080
00:31:10,159 --> 00:31:13,120
so you have basically

1081
00:31:13,200 --> 00:31:18,880
i'm sorry how scalable is the framework

1082
00:31:17,120 --> 00:31:21,600
uh so that's a really good question

1083
00:31:18,880 --> 00:31:23,600
uh so the largest test we've run uh so

1084
00:31:21,600 --> 00:31:24,799
far were with about 20 nodes

1085
00:31:23,600 --> 00:31:26,240
so we run that to do performance

1086
00:31:24,799 --> 00:31:27,279
benchmarks that we put in the initial

1087
00:31:26,240 --> 00:31:30,000
technical reports

1088
00:31:27,279 --> 00:31:30,559
that we published about a year ago and

1089
00:31:30,000 --> 00:31:32,640
this was

1090
00:31:30,559 --> 00:31:34,720
across two regions so adamant azure only

1091
00:31:32,640 --> 00:31:37,919
supports sjx hardware in

1092
00:31:34,720 --> 00:31:39,519
uh east us and uh west europe regions um

1093
00:31:37,919 --> 00:31:41,279
so this is uh

1094
00:31:39,519 --> 00:31:43,519
sort of ten dollars like tennis one side

1095
00:31:41,279 --> 00:31:45,200
nine nodes uh the other side

1096
00:31:43,519 --> 00:31:47,200
and can you scale it to a larger number

1097
00:31:45,200 --> 00:31:50,799
of nodes like we hope you can

1098
00:31:47,200 --> 00:31:52,559
um the benefits are not super clear so

1099
00:31:50,799 --> 00:31:54,399
if you use if you use raft if you use

1100
00:31:52,559 --> 00:31:54,960
the cft implementation the only thing

1101
00:31:54,399 --> 00:31:57,840
that

1102
00:31:54,960 --> 00:31:59,440
more nodes lets you scale is reads so

1103
00:31:57,840 --> 00:32:00,639
you can scale the reads across the notes

1104
00:31:59,440 --> 00:32:01,840
but the writes still have to go through

1105
00:32:00,640 --> 00:32:03,679
a single leader

1106
00:32:01,840 --> 00:32:05,120
so you're making the leader the leader

1107
00:32:03,679 --> 00:32:06,159
busier because it has to replicate to

1108
00:32:05,120 --> 00:32:07,678
more nodes

1109
00:32:06,159 --> 00:32:09,279
um but if you have a really heavy

1110
00:32:07,679 --> 00:32:10,000
workload you know it might still be a

1111
00:32:09,279 --> 00:32:12,159
nice thing

1112
00:32:10,000 --> 00:32:13,360
you can also upload a signature

1113
00:32:12,159 --> 00:32:14,320
verification in cases where you have

1114
00:32:13,360 --> 00:32:16,320
proxies so

1115
00:32:14,320 --> 00:32:18,000
if your commands that come in are signed

1116
00:32:16,320 --> 00:32:19,519
um because the nodes are part of

1117
00:32:18,000 --> 00:32:21,519
uh are verified and a part of your

1118
00:32:19,519 --> 00:32:23,519
trusted compute base you could

1119
00:32:21,519 --> 00:32:24,960
have them verify the signatures before

1120
00:32:23,519 --> 00:32:26,159
they send stuff to the primary but it's

1121
00:32:24,960 --> 00:32:28,799
not a whole lot you can

1122
00:32:26,159 --> 00:32:29,360
offload to secondaries um in that

1123
00:32:28,799 --> 00:32:31,120
situation

1124
00:32:29,360 --> 00:32:32,399
and in in pbft unfortunately it's worse

1125
00:32:31,120 --> 00:32:34,158
than that because

1126
00:32:32,399 --> 00:32:36,879
um really every operation is a right

1127
00:32:34,159 --> 00:32:39,519
conceptually um because you need to get

1128
00:32:36,880 --> 00:32:41,120
proper consensus on it so it's not just

1129
00:32:39,519 --> 00:32:43,840
a leader doing things and

1130
00:32:41,120 --> 00:32:44,959
pushing updates out so in that case you

1131
00:32:43,840 --> 00:32:45,918
could you could scale up to a large

1132
00:32:44,960 --> 00:32:47,519
number of nodes but it's probably going

1133
00:32:45,919 --> 00:32:48,960
to cost you a lot in performance

1134
00:32:47,519 --> 00:32:50,559
it will give you good availability so

1135
00:32:48,960 --> 00:32:51,440
you'll be able to lose potentially a lot

1136
00:32:50,559 --> 00:32:53,120
of nodes

1137
00:32:51,440 --> 00:32:54,720
um but there won't be there won't be

1138
00:32:53,120 --> 00:32:56,239
super good benefits so there's work on

1139
00:32:54,720 --> 00:32:56,640
going and this is slightly longer term

1140
00:32:56,240 --> 00:32:57,519
work

1141
00:32:56,640 --> 00:32:59,519
it's probably not something that's going

1142
00:32:57,519 --> 00:33:00,320
to come out this year to add sharding to

1143
00:32:59,519 --> 00:33:02,159
ccf

1144
00:33:00,320 --> 00:33:03,600
and to really scale out to larger

1145
00:33:02,159 --> 00:33:06,000
volumes at the moment

1146
00:33:03,600 --> 00:33:07,519
um if you run ccf applications the best

1147
00:33:06,000 --> 00:33:08,640
benchmarks we have for applications that

1148
00:33:07,519 --> 00:33:10,640
are written in c plus plus

1149
00:33:08,640 --> 00:33:12,640
somewhere in the vicinity of like 50 60

1150
00:33:10,640 --> 00:33:14,480
000 transactions per second

1151
00:33:12,640 --> 00:33:16,320
so you can run like some stuff already

1152
00:33:14,480 --> 00:33:17,440
it's not it's not extremely large scale

1153
00:33:16,320 --> 00:33:18,399
but you can run reasonably large

1154
00:33:17,440 --> 00:33:20,159
applications

1155
00:33:18,399 --> 00:33:22,719
across two data centers geo-replicated

1156
00:33:20,159 --> 00:33:23,279
and so on and with sharding we're hoping

1157
00:33:22,720 --> 00:33:26,399
to do more

1158
00:33:23,279 --> 00:33:26,399
so i don't know if that answers your

1159
00:33:36,840 --> 00:33:39,760
questions

1160
00:33:38,320 --> 00:33:42,000
uh okay so the question is if i'm a new

1161
00:33:39,760 --> 00:33:44,320
user uh do i have to sign anything

1162
00:33:42,000 --> 00:33:46,080
and the answer is uh you don't have to

1163
00:33:44,320 --> 00:33:49,519
so it's it's standard tls

1164
00:33:46,080 --> 00:33:50,320
so if you have as a new user you won't

1165
00:33:49,519 --> 00:33:52,240
automatically

1166
00:33:50,320 --> 00:33:53,519
be allowed to take part in the service

1167
00:33:52,240 --> 00:33:54,080
unless the service is configured to be

1168
00:33:53,519 --> 00:33:56,159
very open

1169
00:33:54,080 --> 00:33:57,519
typically it's tls end to end so what

1170
00:33:56,159 --> 00:33:58,480
would happen is you have to talk to one

1171
00:33:57,519 --> 00:34:00,559
of the members and say

1172
00:33:58,480 --> 00:34:02,480
i want to participate here's my identity

1173
00:34:00,559 --> 00:34:04,320
can you add me that member would stage a

1174
00:34:02,480 --> 00:34:05,600
vote to add you then the rules the russo

1175
00:34:04,320 --> 00:34:06,639
government should apply and you know

1176
00:34:05,600 --> 00:34:08,000
you'd get it

1177
00:34:06,640 --> 00:34:09,440
now there could be schemes where you're

1178
00:34:08,000 --> 00:34:11,040
automatically allowed to participate

1179
00:34:09,440 --> 00:34:12,399
because your cert has been endorsed by

1180
00:34:11,040 --> 00:34:13,759
some identity of course and then the

1181
00:34:12,399 --> 00:34:14,480
governments might decide to do that but

1182
00:34:13,760 --> 00:34:15,760
you know

1183
00:34:14,480 --> 00:34:17,199
basically that's that's how the scheme

1184
00:34:15,760 --> 00:34:18,639
works and so once you've been added you

1185
00:34:17,199 --> 00:34:19,918
establish a tls session and you can

1186
00:34:18,639 --> 00:34:21,040
start talking to the service and that's

1187
00:34:19,918 --> 00:34:21,839
good enough as far as service is

1188
00:34:21,040 --> 00:34:24,079
concerned

1189
00:34:21,839 --> 00:34:25,599
we do support client signatures to

1190
00:34:24,079 --> 00:34:28,079
support use cases where

1191
00:34:25,599 --> 00:34:29,679
people might decide to proxy things so

1192
00:34:28,079 --> 00:34:31,040
if you are a client and you want to talk

1193
00:34:29,679 --> 00:34:32,399
to ccf

1194
00:34:31,040 --> 00:34:33,759
but you're not able to establish a

1195
00:34:32,399 --> 00:34:34,319
direct kiosk connection for whatever

1196
00:34:33,760 --> 00:34:36,320
reason

1197
00:34:34,320 --> 00:34:37,919
you could you could build a command sign

1198
00:34:36,320 --> 00:34:39,679
it with your identity

1199
00:34:37,918 --> 00:34:41,759
send it to cc have someone else send it

1200
00:34:39,679 --> 00:34:43,200
over to ccf they need to be allowed to

1201
00:34:41,760 --> 00:34:44,000
talk to ccf as well through their

1202
00:34:43,199 --> 00:34:45,439
identity

1203
00:34:44,000 --> 00:34:46,839
but the command would be recorded with

1204
00:34:45,440 --> 00:34:48,480
your signature and with your correct

1205
00:34:46,839 --> 00:34:50,078
identity um

1206
00:34:48,480 --> 00:34:51,839
there's a you know there's a trade-off

1207
00:34:50,079 --> 00:34:52,720
there it's it's a lot slower to do that

1208
00:34:51,839 --> 00:34:53,599
if you're trying to sell a lot of

1209
00:34:52,719 --> 00:34:56,719
transactions

1210
00:34:53,599 --> 00:34:58,400
um but on the other hand it means you

1211
00:34:56,719 --> 00:34:59,118
can sort of root through uh anywhere you

1212
00:34:58,400 --> 00:35:02,480
want

1213
00:34:59,119 --> 00:35:03,839
um so that's that's also nice and so if

1214
00:35:02,480 --> 00:35:06,640
you're trying to build some workflows

1215
00:35:03,839 --> 00:35:08,480
where you want verifiability for user

1216
00:35:06,640 --> 00:35:10,000
transactions as well as governance

1217
00:35:08,480 --> 00:35:11,280
transactions maybe you

1218
00:35:10,000 --> 00:35:13,119
you would want to enforce that so if you

1219
00:35:11,280 --> 00:35:15,119
have some very sensitive user operations

1220
00:35:13,119 --> 00:35:16,320
maybe you force the users to sign and

1221
00:35:15,119 --> 00:35:18,160
then you store the signatures in the

1222
00:35:16,320 --> 00:35:18,880
commands and people can offline verify

1223
00:35:18,160 --> 00:35:20,078
things

1224
00:35:18,880 --> 00:35:21,920
uh sorry i don't know if i'm running out

1225
00:35:20,079 --> 00:35:24,160
of time or not

1226
00:35:21,920 --> 00:35:25,760
no no but see vessel is getting closer

1227
00:35:24,160 --> 00:35:29,279
do we still have time or

1228
00:35:25,760 --> 00:35:31,040
yep one

1229
00:35:29,280 --> 00:35:32,720
you final question compromise in the

1230
00:35:31,040 --> 00:35:34,560
recovery yes um

1231
00:35:32,720 --> 00:35:36,078
so could you potentially even because

1232
00:35:34,560 --> 00:35:39,920
your hex is trusted you said you

1233
00:35:36,079 --> 00:35:41,520
you have to trusted members

1234
00:35:39,920 --> 00:35:43,440
like at the end basically the key shares

1235
00:35:41,520 --> 00:35:46,480
you mentioned yes could you basically

1236
00:35:43,440 --> 00:35:49,599
also use this uh to roll back the whole

1237
00:35:46,480 --> 00:35:50,079
uh like a whole state so in case of like

1238
00:35:49,599 --> 00:35:52,560
a

1239
00:35:50,079 --> 00:35:54,000
large scale compromise yes so that's

1240
00:35:52,560 --> 00:35:55,759
that's a good question and so the answer

1241
00:35:54,000 --> 00:35:56,720
is yes so if the members could decide

1242
00:35:55,760 --> 00:35:58,320
that they'll agree

1243
00:35:56,720 --> 00:35:59,839
that the last 20 transactions did not

1244
00:35:58,320 --> 00:36:01,680
happen and

1245
00:35:59,839 --> 00:36:03,359
so this is a good thing sometimes if

1246
00:36:01,680 --> 00:36:04,640
there's been a problem but it could also

1247
00:36:03,359 --> 00:36:05,680
be a bad things because the members

1248
00:36:04,640 --> 00:36:07,359
could be colluding

1249
00:36:05,680 --> 00:36:08,960
and what protection does the user have

1250
00:36:07,359 --> 00:36:10,160
against that and the answer is if

1251
00:36:08,960 --> 00:36:12,320
they've kept their receipts for those

1252
00:36:10,160 --> 00:36:13,118
transactions they could say i did have

1253
00:36:12,320 --> 00:36:14,720
this receipt

1254
00:36:13,119 --> 00:36:16,640
it was committed at this version and it

1255
00:36:14,720 --> 00:36:17,680
was signed by your service and although

1256
00:36:16,640 --> 00:36:20,078
you truncated it

1257
00:36:17,680 --> 00:36:21,279
post recovery i have proof that this was

1258
00:36:20,079 --> 00:36:22,960
in there in the ledger

1259
00:36:21,280 --> 00:36:24,720
and so you still have some defense

1260
00:36:22,960 --> 00:36:26,480
against that if the if the members

1261
00:36:24,720 --> 00:36:28,078
decide to truncate things because

1262
00:36:26,480 --> 00:36:30,000
they want to remove a sort of

1263
00:36:28,079 --> 00:36:31,200
inconvenient rather than illegitimate

1264
00:36:30,000 --> 00:36:32,880
operation

1265
00:36:31,200 --> 00:36:34,078
but yes when the members get together so

1266
00:36:32,880 --> 00:36:35,359
the process the way it actually works is

1267
00:36:34,079 --> 00:36:36,400
you spin up a bunch of nodes they look

1268
00:36:35,359 --> 00:36:39,200
at all the ledgers

1269
00:36:36,400 --> 00:36:40,400
they they verify um all the entries and

1270
00:36:39,200 --> 00:36:41,919
the signatures that are in there

1271
00:36:40,400 --> 00:36:43,440
and they give the members back

1272
00:36:41,920 --> 00:36:44,960
information about which the which which

1273
00:36:43,440 --> 00:36:46,240
one is the longest and has still been

1274
00:36:44,960 --> 00:36:47,599
globally committed

1275
00:36:46,240 --> 00:36:49,200
um and then the members can decide to

1276
00:36:47,599 --> 00:36:50,880
vote on that they could decide to

1277
00:36:49,200 --> 00:36:52,160
shorten the prefix for whatever reason

1278
00:36:50,880 --> 00:36:54,240
the signatures in the literature to be

1279
00:36:52,160 --> 00:36:55,920
clear signatures are done by nodes

1280
00:36:54,240 --> 00:36:57,200
so they allow you to attribute the

1281
00:36:55,920 --> 00:36:58,720
operations to particular nodes if you

1282
00:36:57,200 --> 00:37:00,240
know that some nodes are compromised

1283
00:36:58,720 --> 00:37:09,839
then this is how you can decide to you

1284
00:37:00,240 --> 00:37:09,839
know truncate various things

1285
00:37:10,320 --> 00:37:12,400
you

