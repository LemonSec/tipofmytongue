1
00:00:05,040 --> 00:00:08,800
um so yeah i'm russell

2
00:00:06,640 --> 00:00:10,480
you can find me at russia on twitter

3
00:00:08,800 --> 00:00:12,799
slack

4
00:00:10,480 --> 00:00:14,920
and i'm going to be starting next week

5
00:00:12,799 --> 00:00:16,079
at um touch lab doing multi-platform

6
00:00:14,920 --> 00:00:19,680
stuff

7
00:00:16,079 --> 00:00:21,038
um so um we've just had a couple talks

8
00:00:19,680 --> 00:00:22,800
on multi-platform so i'm just going to

9
00:00:21,039 --> 00:00:26,000
do kind of a quick

10
00:00:22,800 --> 00:00:28,480
intro with some of my thoughts um

11
00:00:26,000 --> 00:00:30,000
but in brief the idea of multi-platform

12
00:00:28,480 --> 00:00:32,320
is to take

13
00:00:30,000 --> 00:00:33,840
common code and compile it to multiple

14
00:00:32,320 --> 00:00:35,760
targets

15
00:00:33,840 --> 00:00:39,200
so that being things like jvm javascript

16
00:00:35,760 --> 00:00:41,519
android et cetera et cetera et cetera

17
00:00:39,200 --> 00:00:42,399
and in addition to that shared common

18
00:00:41,520 --> 00:00:44,719
code

19
00:00:42,399 --> 00:00:45,760
use platform platform-specific code to

20
00:00:44,719 --> 00:00:48,079
um talk to

21
00:00:45,760 --> 00:00:50,239
any of the um any of the individual

22
00:00:48,079 --> 00:00:53,840
platform apis

23
00:00:50,239 --> 00:00:56,320
and the general idea here is um

24
00:00:53,840 --> 00:00:57,120
making it easy to do the custom things

25
00:00:56,320 --> 00:00:58,559
when you have to

26
00:00:57,120 --> 00:01:02,078
but share the things that don't need to

27
00:00:58,559 --> 00:01:02,079
be customized per platform

28
00:01:02,160 --> 00:01:07,679
so um the tools to let you do that um

29
00:01:05,519 --> 00:01:09,280
the first one or study yeah so what does

30
00:01:07,680 --> 00:01:12,720
common code look like

31
00:01:09,280 --> 00:01:14,400
um so it looks pretty much like any

32
00:01:12,720 --> 00:01:17,360
kotlin code you write

33
00:01:14,400 --> 00:01:19,439
so from common you have access to most

34
00:01:17,360 --> 00:01:22,159
of the standard library that you use to

35
00:01:19,439 --> 00:01:23,758
minus some platform specific things you

36
00:01:22,159 --> 00:01:26,479
can create classes functions

37
00:01:23,759 --> 00:01:28,880
um you have things like the collections

38
00:01:26,479 --> 00:01:28,880
api

39
00:01:28,960 --> 00:01:32,079
um and when comment isn't quite good

40
00:01:31,360 --> 00:01:33,840
enough

41
00:01:32,079 --> 00:01:35,600
there's various strategies for platform

42
00:01:33,840 --> 00:01:37,439
specific code

43
00:01:35,600 --> 00:01:38,960
um to be able to kind of create

44
00:01:37,439 --> 00:01:41,039
whichever information you need to

45
00:01:38,960 --> 00:01:44,320
interact with that platform

46
00:01:41,040 --> 00:01:46,880
so you have things like expecting actual

47
00:01:44,320 --> 00:01:48,960
so you can say i expect some string

48
00:01:46,880 --> 00:01:51,360
that's going to be the platform

49
00:01:48,960 --> 00:01:52,000
which you might call android on android

50
00:01:51,360 --> 00:01:55,360
and you might call

51
00:01:52,000 --> 00:01:59,200
ios and ios it's very useful tool

52
00:01:55,360 --> 00:02:00,479
you don't have to use it so

53
00:01:59,200 --> 00:02:02,880
you could also just define an interface

54
00:02:00,479 --> 00:02:05,119
in your common um

55
00:02:02,880 --> 00:02:06,079
and have implementations on it for it on

56
00:02:05,119 --> 00:02:09,679
each of the platforms

57
00:02:06,079 --> 00:02:11,440
and a neat advantage to this is um

58
00:02:09,679 --> 00:02:13,760
your implement like your implementations

59
00:02:11,440 --> 00:02:16,560
don't necessarily have to

60
00:02:13,760 --> 00:02:18,319
live in kotlin so maybe on the ios side

61
00:02:16,560 --> 00:02:19,599
for example i want to have a swift

62
00:02:18,319 --> 00:02:21,119
implementation of something that's

63
00:02:19,599 --> 00:02:24,720
defined in common

64
00:02:21,120 --> 00:02:26,080
um interface you can still do that um

65
00:02:24,720 --> 00:02:28,239
and you have the ability to have

66
00:02:26,080 --> 00:02:29,360
multiple implementations so expect an

67
00:02:28,239 --> 00:02:31,519
actual

68
00:02:29,360 --> 00:02:32,400
um the compiler enforces that they are

69
00:02:31,519 --> 00:02:35,040
one to one

70
00:02:32,400 --> 00:02:36,560
per platform so there's exactly one

71
00:02:35,040 --> 00:02:38,400
actual regulation for every expect

72
00:02:36,560 --> 00:02:40,080
declaration

73
00:02:38,400 --> 00:02:41,920
if you wanted to be able to do things

74
00:02:40,080 --> 00:02:44,239
like substitute

75
00:02:41,920 --> 00:02:46,799
mocks for testing interfaces are a lot

76
00:02:44,239 --> 00:02:46,800
more flexible

77
00:02:47,360 --> 00:02:50,560
so that's kind of a brief overview of

78
00:02:48,959 --> 00:02:54,239
multi-platform on

79
00:02:50,560 --> 00:02:56,720
how did i get into this stuff so

80
00:02:54,239 --> 00:02:58,560
i did a project in react native a while

81
00:02:56,720 --> 00:03:01,840
ago about three years ago

82
00:02:58,560 --> 00:03:03,920
so my day job i uh

83
00:03:01,840 --> 00:03:06,000
mobile consultant i built apps for

84
00:03:03,920 --> 00:03:07,280
different clients and

85
00:03:06,000 --> 00:03:08,640
usually doing native android but we

86
00:03:07,280 --> 00:03:09,840
wanted to try out react native and see

87
00:03:08,640 --> 00:03:12,000
how we felt about it

88
00:03:09,840 --> 00:03:13,519
i wasn't a very big fan but it got me

89
00:03:12,000 --> 00:03:15,760
thinking a lot about

90
00:03:13,519 --> 00:03:17,280
what would i like in a multi-platform

91
00:03:15,760 --> 00:03:18,159
framework for any cross-platform

92
00:03:17,280 --> 00:03:20,879
framework

93
00:03:18,159 --> 00:03:21,679
um and around that time that was around

94
00:03:20,879 --> 00:03:23,840
when

95
00:03:21,680 --> 00:03:25,360
the like very very first version of

96
00:03:23,840 --> 00:03:26,480
kotlin native came out

97
00:03:25,360 --> 00:03:28,879
so that was before you could share

98
00:03:26,480 --> 00:03:30,640
anything to it but you could kind of

99
00:03:28,879 --> 00:03:32,239
see what jeff rains was starting to

100
00:03:30,640 --> 00:03:33,599
build towards

101
00:03:32,239 --> 00:03:35,120
um so i was watching that out of the

102
00:03:33,599 --> 00:03:37,440
corner of my eye for the next kind of

103
00:03:35,120 --> 00:03:40,799
year or so

104
00:03:37,440 --> 00:03:42,720
and one day this happened so in version

105
00:03:40,799 --> 00:03:45,360
0.6 of hotline native

106
00:03:42,720 --> 00:03:47,519
they added multi-platform support to it

107
00:03:45,360 --> 00:03:49,200
so this was finally the moment that

108
00:03:47,519 --> 00:03:50,799
if you've been kind of using kotlin on

109
00:03:49,200 --> 00:03:51,518
the gm for a while you could start to

110
00:03:50,799 --> 00:03:54,480
experiment

111
00:03:51,519 --> 00:03:56,560
with sharing some of that code to the

112
00:03:54,480 --> 00:03:58,640
native platforms

113
00:03:56,560 --> 00:04:00,000
um so i i started messing around with a

114
00:03:58,640 --> 00:04:03,200
little bit i did a couple little

115
00:04:00,000 --> 00:04:05,680
example apps um and

116
00:04:03,200 --> 00:04:07,518
a couple months later um the next

117
00:04:05,680 --> 00:04:09,120
version came out

118
00:04:07,519 --> 00:04:10,560
had a bunch of updates around the native

119
00:04:09,120 --> 00:04:13,280
threading model and stuff that i won't

120
00:04:10,560 --> 00:04:15,439
go into in too much detail

121
00:04:13,280 --> 00:04:16,959
um but there was this neat note deep in

122
00:04:15,439 --> 00:04:18,798
the in the change log

123
00:04:16,959 --> 00:04:20,478
um and sorry you can't read it but

124
00:04:18,798 --> 00:04:22,638
exactly what what it's saying is

125
00:04:20,478 --> 00:04:23,520
um use the gradle native dependency

126
00:04:22,639 --> 00:04:27,360
model

127
00:04:23,520 --> 00:04:29,599
um to be able to publish um caleb's as

128
00:04:27,360 --> 00:04:30,800
nathan artifacts so to translate that

129
00:04:29,600 --> 00:04:34,720
it's saying

130
00:04:30,800 --> 00:04:36,560
um kotlin native now had the ability to

131
00:04:34,720 --> 00:04:37,919
use the same kind of maven dependency

132
00:04:36,560 --> 00:04:40,400
framework that you're used to

133
00:04:37,919 --> 00:04:41,120
on jvm kotlin for native stuff which

134
00:04:40,400 --> 00:04:44,638
means

135
00:04:41,120 --> 00:04:47,120
if you want to do something like write a

136
00:04:44,639 --> 00:04:49,600
library that that runs on native you

137
00:04:47,120 --> 00:04:52,960
have the ability to do that now

138
00:04:49,600 --> 00:04:54,240
um so i did um so i

139
00:04:52,960 --> 00:04:55,840
took some of the code that i'd been

140
00:04:54,240 --> 00:04:57,440
playing with one of the sample projects

141
00:04:55,840 --> 00:05:01,198
that was interacting with

142
00:04:57,440 --> 00:05:03,199
the um preferences api on android

143
00:05:01,199 --> 00:05:06,160
and i extracted out this little settings

144
00:05:03,199 --> 00:05:09,919
library called multi-platform settings

145
00:05:06,160 --> 00:05:10,880
so what it does is key value storage

146
00:05:09,919 --> 00:05:12,960
based on

147
00:05:10,880 --> 00:05:14,240
native platform apis so initially that

148
00:05:12,960 --> 00:05:15,280
was just android and ios

149
00:05:14,240 --> 00:05:17,600
i've since added a couple other

150
00:05:15,280 --> 00:05:20,320
platforms um

151
00:05:17,600 --> 00:05:20,880
and in addition to the kind of like raw

152
00:05:20,320 --> 00:05:23,919
wrapping

153
00:05:20,880 --> 00:05:24,639
of the platform apis there's also some

154
00:05:23,919 --> 00:05:26,560
nice

155
00:05:24,639 --> 00:05:28,479
um syntax helpers on top of it so

156
00:05:26,560 --> 00:05:29,039
there's some operators and property

157
00:05:28,479 --> 00:05:32,479
delegates

158
00:05:29,039 --> 00:05:34,880
that let you get this that kind of

159
00:05:32,479 --> 00:05:36,719
nicer enigmatic hotline syntax if that's

160
00:05:34,880 --> 00:05:38,320
the style you prefer

161
00:05:36,720 --> 00:05:41,280
so it's available there on github if

162
00:05:38,320 --> 00:05:44,080
you're interested in looking at it

163
00:05:41,280 --> 00:05:44,960
um and let's take a quick walk through

164
00:05:44,080 --> 00:05:47,120
kind of like the

165
00:05:44,960 --> 00:05:48,479
restructure of what it is so there's um

166
00:05:47,120 --> 00:05:49,360
the core of it is this interface called

167
00:05:48,479 --> 00:05:52,560
settings

168
00:05:49,360 --> 00:05:55,280
um that i'm just kind of using one

169
00:05:52,560 --> 00:05:56,880
method example but it has a bunch of

170
00:05:55,280 --> 00:05:58,000
getters and setters for different data

171
00:05:56,880 --> 00:06:00,400
types

172
00:05:58,000 --> 00:06:01,600
um and it has different implementations

173
00:06:00,400 --> 00:06:04,239
on each of the platforms

174
00:06:01,600 --> 00:06:04,800
so there's a android settings which

175
00:06:04,240 --> 00:06:06,880
wraps

176
00:06:04,800 --> 00:06:08,720
um the typical android key value api

177
00:06:06,880 --> 00:06:10,400
which is called shared preferences

178
00:06:08,720 --> 00:06:12,240
there's an apple settings which wraps

179
00:06:10,400 --> 00:06:13,599
the user defaults api which is

180
00:06:12,240 --> 00:06:17,280
essentially the equivalent

181
00:06:13,600 --> 00:06:18,639
on ios um

182
00:06:17,280 --> 00:06:21,359
over time i've added more platforms so

183
00:06:18,639 --> 00:06:23,039
there's a js settings

184
00:06:21,360 --> 00:06:25,039
which wraps um local storage in

185
00:06:23,039 --> 00:06:27,919
javascript

186
00:06:25,039 --> 00:06:28,800
and there's other pure jvm

187
00:06:27,919 --> 00:06:32,719
implementations

188
00:06:28,800 --> 00:06:36,080
so this one as an example wraps the

189
00:06:32,720 --> 00:06:37,440
java preferences api um

190
00:06:36,080 --> 00:06:40,880
and i talked a little bit about mock

191
00:06:37,440 --> 00:06:43,840
things earlier so i i also include a

192
00:06:40,880 --> 00:06:45,280
mock settings so that means if you're if

193
00:06:43,840 --> 00:06:47,599
you're kind of writing application

194
00:06:45,280 --> 00:06:48,880
code that interacts with this library

195
00:06:47,600 --> 00:06:50,479
and you want to be able to write tests

196
00:06:48,880 --> 00:06:52,159
around it

197
00:06:50,479 --> 00:06:53,840
you can use this mux settings

198
00:06:52,160 --> 00:06:55,199
implementation which just has a in

199
00:06:53,840 --> 00:06:56,560
memory map

200
00:06:55,199 --> 00:06:58,240
and you don't have to worry about

201
00:06:56,560 --> 00:07:02,160
serializing your actual data

202
00:06:58,240 --> 00:07:05,680
to disk in your tests

203
00:07:02,160 --> 00:07:07,840
and then yeah there's um some other um

204
00:07:05,680 --> 00:07:10,800
operators and delegates and stuff to add

205
00:07:07,840 --> 00:07:12,318
that nicer syntax

206
00:07:10,800 --> 00:07:16,560
um so that's that's kind of the brief

207
00:07:12,319 --> 00:07:18,479
rundown of what the library looks like

208
00:07:16,560 --> 00:07:20,319
so it didn't it didn't all start that

209
00:07:18,479 --> 00:07:21,039
way so i'll tell you a couple stories of

210
00:07:20,319 --> 00:07:22,560
kind of

211
00:07:21,039 --> 00:07:25,120
things that i've learned along the way

212
00:07:22,560 --> 00:07:25,120
so it's been

213
00:07:25,199 --> 00:07:29,520
about a year and a half since since i

214
00:07:26,880 --> 00:07:32,240
first put that out a little longer now

215
00:07:29,520 --> 00:07:33,599
and uh yeah i learned a couple of things

216
00:07:32,240 --> 00:07:35,280
so one of the

217
00:07:33,599 --> 00:07:37,599
big lessons that i think is applicable

218
00:07:35,280 --> 00:07:39,359
to a lot of people's kind of first start

219
00:07:37,599 --> 00:07:41,440
in multi-platform

220
00:07:39,360 --> 00:07:43,520
is the use of expecting actual versus

221
00:07:41,440 --> 00:07:47,120
the use of interfaces

222
00:07:43,520 --> 00:07:47,520
so when you uh when you get a brand new

223
00:07:47,120 --> 00:07:48,720
tool

224
00:07:47,520 --> 00:07:50,960
like you get you got a brand new hammer

225
00:07:48,720 --> 00:07:52,319
and everything looks like a nail um

226
00:07:50,960 --> 00:07:54,719
and the the new tool and called the

227
00:07:52,319 --> 00:07:58,560
multiplatform is expecting actual

228
00:07:54,720 --> 00:08:01,360
so the first version of settings um

229
00:07:58,560 --> 00:08:02,560
suddenly it wasn't expect class um

230
00:08:01,360 --> 00:08:04,080
because like that seems like what you do

231
00:08:02,560 --> 00:08:06,800
in multi-platform right

232
00:08:04,080 --> 00:08:08,400
um and that was fine like it works

233
00:08:06,800 --> 00:08:11,520
perfectly well

234
00:08:08,400 --> 00:08:13,599
um but you

235
00:08:11,520 --> 00:08:15,280
like expecting actual is one-to-one and

236
00:08:13,599 --> 00:08:16,719
so there's there's kind of no ability

237
00:08:15,280 --> 00:08:18,638
for consumers of that

238
00:08:16,720 --> 00:08:19,919
to be able to kind of supply an

239
00:08:18,639 --> 00:08:21,120
alternate implementation for things like

240
00:08:19,919 --> 00:08:24,318
testing

241
00:08:21,120 --> 00:08:26,479
or other platforms or stuff like that um

242
00:08:24,319 --> 00:08:28,240
so eventually i i kind of pulled out a

243
00:08:26,479 --> 00:08:30,479
interface on top of it um

244
00:08:28,240 --> 00:08:31,759
to do that um but i still left the

245
00:08:30,479 --> 00:08:33,760
expected actual in there

246
00:08:31,759 --> 00:08:34,959
um i don't remember exactly why i did

247
00:08:33,760 --> 00:08:36,399
that it got kind of messy there wasn't

248
00:08:34,958 --> 00:08:38,319
really acne point to it so eventually

249
00:08:36,399 --> 00:08:41,519
got to the point where it is now

250
00:08:38,320 --> 00:08:42,640
where um it's just interface you don't

251
00:08:41,519 --> 00:08:44,000
really need any expectation

252
00:08:42,640 --> 00:08:45,920
there um for a little while there was

253
00:08:44,000 --> 00:08:49,440
actually zero usage of expect

254
00:08:45,920 --> 00:08:50,880
actual in the non-test code at all

255
00:08:49,440 --> 00:08:52,839
um i've since added a couple more new

256
00:08:50,880 --> 00:08:55,839
ones which i'll talk about later

257
00:08:52,839 --> 00:08:58,000
um but the overall lesson

258
00:08:55,839 --> 00:08:59,040
is um just because you have that

259
00:08:58,000 --> 00:09:01,279
functionality there

260
00:08:59,040 --> 00:09:02,399
um to use you don't necessarily need it

261
00:09:01,279 --> 00:09:03,920
and it's

262
00:09:02,399 --> 00:09:05,680
often the case that you can do things

263
00:09:03,920 --> 00:09:09,199
kind of a little bit more flexibly

264
00:09:05,680 --> 00:09:12,239
if you do it the old-fashioned way

265
00:09:09,200 --> 00:09:14,240
so one of the uh one of the first

266
00:09:12,240 --> 00:09:16,399
change requests or so i won the first

267
00:09:14,240 --> 00:09:19,200
feature request that i got

268
00:09:16,399 --> 00:09:20,399
after i put the library out was this

269
00:09:19,200 --> 00:09:23,200
question about

270
00:09:20,399 --> 00:09:24,800
what if you added change listeners so um

271
00:09:23,200 --> 00:09:26,560
the internal apis were all just like

272
00:09:24,800 --> 00:09:30,160
getters and setters

273
00:09:26,560 --> 00:09:32,560
um but both the android and ios apis

274
00:09:30,160 --> 00:09:35,040
provide a also right away to listen for

275
00:09:32,560 --> 00:09:35,040
updates

276
00:09:35,519 --> 00:09:37,920
so i started putting that together i

277
00:09:36,640 --> 00:09:38,800
started kind of looking at what was

278
00:09:37,920 --> 00:09:41,680
there

279
00:09:38,800 --> 00:09:43,199
um so an android um shared preferences

280
00:09:41,680 --> 00:09:45,439
has this

281
00:09:43,200 --> 00:09:46,720
um listener api ontario preferences

282
00:09:45,440 --> 00:09:49,440
change listener

283
00:09:46,720 --> 00:09:50,240
um and it's basically a hallback that it

284
00:09:49,440 --> 00:09:52,160
passes you

285
00:09:50,240 --> 00:09:53,360
kind of every time something updates it

286
00:09:52,160 --> 00:09:54,719
passes you

287
00:09:53,360 --> 00:09:57,360
a function that says this is the key

288
00:09:54,720 --> 00:09:58,560
that changed um

289
00:09:57,360 --> 00:10:01,760
but it does this funky thing where it

290
00:09:58,560 --> 00:10:05,680
says um it might get called again

291
00:10:01,760 --> 00:10:07,279
if there's repeated updates um

292
00:10:05,680 --> 00:10:08,399
so the documentation is kind of weirdly

293
00:10:07,279 --> 00:10:09,839
ambiguous about that i don't actually

294
00:10:08,399 --> 00:10:10,160
know why i think it's maybe behavior

295
00:10:09,839 --> 00:10:12,160
that

296
00:10:10,160 --> 00:10:14,000
kind of changed some from uh early

297
00:10:12,160 --> 00:10:16,399
versions of android

298
00:10:14,000 --> 00:10:18,640
but anyway um ios exposure is a very

299
00:10:16,399 --> 00:10:21,600
different looking api where they have

300
00:10:18,640 --> 00:10:22,560
the ns notification center which is

301
00:10:21,600 --> 00:10:25,360
essentially a

302
00:10:22,560 --> 00:10:27,839
centralized event bus that lots of

303
00:10:25,360 --> 00:10:31,120
different system updates go through

304
00:10:27,839 --> 00:10:33,200
so when a user defaults update

305
00:10:31,120 --> 00:10:34,399
happens you can subscribe to that and

306
00:10:33,200 --> 00:10:36,959
you get this

307
00:10:34,399 --> 00:10:38,240
user defaults to change notification but

308
00:10:36,959 --> 00:10:39,119
it doesn't tell you anything at all

309
00:10:38,240 --> 00:10:40,880
about the change

310
00:10:39,120 --> 00:10:43,279
um all it tells you is data change

311
00:10:40,880 --> 00:10:43,279
happened

312
00:10:43,839 --> 00:10:47,440
so i have these kind of like two very

313
00:10:45,600 --> 00:10:50,240
different apis behaviors that i'm trying

314
00:10:47,440 --> 00:10:52,320
to like write a shared interface around

315
00:10:50,240 --> 00:10:53,360
and what i came up uh with looks like

316
00:10:52,320 --> 00:10:54,800
this

317
00:10:53,360 --> 00:10:57,680
so i'm emitting a bunch of the kind of

318
00:10:54,800 --> 00:11:00,959
glue code but the core of it is

319
00:10:57,680 --> 00:11:03,359
i keep a cache of

320
00:11:00,959 --> 00:11:05,680
what the kind of previous value at that

321
00:11:03,360 --> 00:11:08,720
key was

322
00:11:05,680 --> 00:11:11,519
in my in in in all my callbacks i check

323
00:11:08,720 --> 00:11:13,920
if that has changed and only update the

324
00:11:11,519 --> 00:11:15,360
user supply call back if it did

325
00:11:13,920 --> 00:11:17,360
so it behaves a little bit differently

326
00:11:15,360 --> 00:11:18,480
than either of the platforms but it does

327
00:11:17,360 --> 00:11:21,120
so in a way

328
00:11:18,480 --> 00:11:23,120
that i could synchronize the behavior of

329
00:11:21,120 --> 00:11:26,160
both platforms

330
00:11:23,120 --> 00:11:28,079
um so i put that out and that was

331
00:11:26,160 --> 00:11:31,439
already for a little bit

332
00:11:28,079 --> 00:11:32,800
and then i added that javascript support

333
00:11:31,440 --> 00:11:35,040
and then i had the same problem all over

334
00:11:32,800 --> 00:11:35,040
again

335
00:11:35,279 --> 00:11:39,040
and it turns out so um the local storage

336
00:11:38,160 --> 00:11:41,839
apis do

337
00:11:39,040 --> 00:11:43,120
provide ways to listen for updates but

338
00:11:41,839 --> 00:11:44,800
they're basically built for

339
00:11:43,120 --> 00:11:46,240
talking to other processes and other

340
00:11:44,800 --> 00:11:49,439
windows

341
00:11:46,240 --> 00:11:50,959
um and i haven't yet found a way to kind

342
00:11:49,440 --> 00:11:52,959
of make it work in the same way that the

343
00:11:50,959 --> 00:11:56,479
international stations do

344
00:11:52,959 --> 00:11:59,599
so i'm kind of in trouble

345
00:11:56,480 --> 00:12:00,959
so where i landed without was um i split

346
00:11:59,600 --> 00:12:03,680
the interface

347
00:12:00,959 --> 00:12:04,880
so um i have a observable settings

348
00:12:03,680 --> 00:12:08,638
interface

349
00:12:04,880 --> 00:12:10,800
that holds all of the listener apis

350
00:12:08,639 --> 00:12:13,279
and like android and ios and like that

351
00:12:10,800 --> 00:12:16,479
um and the base settings interface

352
00:12:13,279 --> 00:12:18,079
um like sort of javascript just

353
00:12:16,480 --> 00:12:21,120
influence the base settings interface

354
00:12:18,079 --> 00:12:22,560
um so you can in your common code check

355
00:12:21,120 --> 00:12:24,000
whether you're just settings or you're

356
00:12:22,560 --> 00:12:26,479
in observable settings and

357
00:12:24,000 --> 00:12:29,279
only interact with the listeners when

358
00:12:26,480 --> 00:12:29,279
you are observable

359
00:12:31,120 --> 00:12:34,639
so another fun developer story was

360
00:12:34,000 --> 00:12:37,839
around

361
00:12:34,639 --> 00:12:38,399
jvm implementations so early on i put

362
00:12:37,839 --> 00:12:40,959
out a call

363
00:12:38,399 --> 00:12:43,440
saying what are other platforms that i

364
00:12:40,959 --> 00:12:46,880
should wrap around for this

365
00:12:43,440 --> 00:12:48,320
um and someone suggested properties on

366
00:12:46,880 --> 00:12:50,560
the jvm

367
00:12:48,320 --> 00:12:51,839
um so that seemed nice so properties are

368
00:12:50,560 --> 00:12:54,638
um

369
00:12:51,839 --> 00:12:56,160
drive api that reads things like the um

370
00:12:54,639 --> 00:12:56,959
gradle.properties file that you might

371
00:12:56,160 --> 00:12:58,240
know of from

372
00:12:56,959 --> 00:13:00,560
if you're if you're used to using gradle

373
00:12:58,240 --> 00:13:01,920
projects um that's just kind of like a

374
00:13:00,560 --> 00:13:05,119
standardized file format

375
00:13:01,920 --> 00:13:06,000
so this api can read um so i put a

376
00:13:05,120 --> 00:13:09,120
little quotation out

377
00:13:06,000 --> 00:13:10,720
that that wrapped that and then i

378
00:13:09,120 --> 00:13:13,760
got this pull request that pointed out

379
00:13:10,720 --> 00:13:17,360
something i missed which is

380
00:13:13,760 --> 00:13:19,839
um the java properties api um

381
00:13:17,360 --> 00:13:21,519
doesn't actually do any work for you to

382
00:13:19,839 --> 00:13:22,880
um serialize updates to disk when you

383
00:13:21,519 --> 00:13:24,560
make changes

384
00:13:22,880 --> 00:13:25,920
um so this process is essentially adding

385
00:13:24,560 --> 00:13:29,359
a callback inside of

386
00:13:25,920 --> 00:13:31,760
each of uh change calls so that um

387
00:13:29,360 --> 00:13:32,720
you would get the same behavior on on

388
00:13:31,760 --> 00:13:35,839
the properties implementation that you

389
00:13:32,720 --> 00:13:35,839
do on the other platforms

390
00:13:36,000 --> 00:13:41,120
so um just as i was about to

391
00:13:39,360 --> 00:13:42,639
merge that pull request i got through

392
00:13:41,120 --> 00:13:44,079
the comment that said

393
00:13:42,639 --> 00:13:46,480
hey by the way there's another api

394
00:13:44,079 --> 00:13:49,040
called preferences

395
00:13:46,480 --> 00:13:50,160
that basically behaves the same way as

396
00:13:49,040 --> 00:13:51,040
the internet i also want to do and does

397
00:13:50,160 --> 00:13:52,800
exactly what you want

398
00:13:51,040 --> 00:13:55,040
and plus the properties didn't have

399
00:13:52,800 --> 00:13:58,319
update listeners and this one does

400
00:13:55,040 --> 00:14:00,079
um so where i ended up with is

401
00:13:58,320 --> 00:14:03,839
now i have two two different limitations

402
00:14:00,079 --> 00:14:03,839
that i'm maintaining on jvm

403
00:14:04,639 --> 00:14:10,720
which means um like if you're using this

404
00:14:07,680 --> 00:14:12,399
in a in a project that has a jvm target

405
00:14:10,720 --> 00:14:13,760
whichever api you want to interact with

406
00:14:12,399 --> 00:14:15,920
you can

407
00:14:13,760 --> 00:14:16,880
and one of the lessons i came up with

408
00:14:15,920 --> 00:14:18,160
that is like

409
00:14:16,880 --> 00:14:20,000
there's a lot of complexity to having

410
00:14:18,160 --> 00:14:21,519
lots of different platforms that i don't

411
00:14:20,000 --> 00:14:24,720
have as much experience with

412
00:14:21,519 --> 00:14:27,600
um but another thing i thought about is

413
00:14:24,720 --> 00:14:29,120
um it is actually important to have that

414
00:14:27,600 --> 00:14:32,639
flexibility

415
00:14:29,120 --> 00:14:34,079
so um someone kind of introducing this

416
00:14:32,639 --> 00:14:36,880
library like introducing multi-platform

417
00:14:34,079 --> 00:14:38,319
into their project that has a jvm target

418
00:14:36,880 --> 00:14:40,480
might be using lots of different things

419
00:14:38,320 --> 00:14:42,880
to do their existing

420
00:14:40,480 --> 00:14:43,519
key value storage and the more things

421
00:14:42,880 --> 00:14:45,519
that

422
00:14:43,519 --> 00:14:46,800
my library interact with the easier it

423
00:14:45,519 --> 00:14:49,839
will be for them to

424
00:14:46,800 --> 00:14:52,719
use this library to to kind of add more

425
00:14:49,839 --> 00:14:55,199
support to their code

426
00:14:52,720 --> 00:14:57,199
um so another fun thing i did recently

427
00:14:55,199 --> 00:15:00,719
was adding um

428
00:14:57,199 --> 00:15:03,279
ci support uh to the library um

429
00:15:00,720 --> 00:15:03,279
so see me

430
00:15:04,079 --> 00:15:07,839
um so right now i have a setup that's

431
00:15:07,360 --> 00:15:12,000
using

432
00:15:07,839 --> 00:15:13,760
azure pipelines to be able to build on

433
00:15:12,000 --> 00:15:15,279
mac linux and windows host which you

434
00:15:13,760 --> 00:15:17,600
need to be able to target every single

435
00:15:15,279 --> 00:15:19,279
one of the native platforms

436
00:15:17,600 --> 00:15:20,639
um and one of the neat things that this

437
00:15:19,279 --> 00:15:22,480
enabled is

438
00:15:20,639 --> 00:15:23,760
building the common code so things like

439
00:15:22,480 --> 00:15:26,720
the settings interface

440
00:15:23,760 --> 00:15:27,839
to every platform so previously i was

441
00:15:26,720 --> 00:15:28,800
building everything locally and i was

442
00:15:27,839 --> 00:15:30,240
just building

443
00:15:28,800 --> 00:15:32,639
the platforms that had implementations

444
00:15:30,240 --> 00:15:35,199
which means if you

445
00:15:32,639 --> 00:15:36,320
as a consumer want to be able to use it

446
00:15:35,199 --> 00:15:36,959
on a different platform i hadn't thought

447
00:15:36,320 --> 00:15:38,240
of

448
00:15:36,959 --> 00:15:40,000
you don't have any opportunity to do

449
00:15:38,240 --> 00:15:41,839
that so now the interface

450
00:15:40,000 --> 00:15:43,519
exists everywhere you still have to

451
00:15:41,839 --> 00:15:45,360
supply the implementation

452
00:15:43,519 --> 00:15:48,720
if you want to use it on a new platform

453
00:15:45,360 --> 00:15:50,560
but you have the flexibility to do that

454
00:15:48,720 --> 00:15:53,600
and there's a funny little trick in the

455
00:15:50,560 --> 00:15:56,239
gradle code to make that happen

456
00:15:53,600 --> 00:15:57,680
where um the gradle plugin gives you

457
00:15:56,240 --> 00:15:59,040
this list of

458
00:15:57,680 --> 00:16:00,079
native presets for each target and you

459
00:15:59,040 --> 00:16:01,199
can just kind of iterate through them

460
00:16:00,079 --> 00:16:02,079
and say i want to build a target for

461
00:16:01,199 --> 00:16:03,439
each one of these

462
00:16:02,079 --> 00:16:06,959
because there's not a built-in that just

463
00:16:03,440 --> 00:16:06,959
turns it on for everything on its own

464
00:16:07,040 --> 00:16:10,719
and one of the couple things that came

465
00:16:08,720 --> 00:16:12,399
out of that um is there's a bunch of new

466
00:16:10,720 --> 00:16:15,519
apple targets that have been added

467
00:16:12,399 --> 00:16:16,639
in um the most recent kotlin version um

468
00:16:15,519 --> 00:16:20,240
so originally

469
00:16:16,639 --> 00:16:21,199
i just had support for um r64 and x64

470
00:16:20,240 --> 00:16:24,000
which is the

471
00:16:21,199 --> 00:16:24,880
64-bit device and simulator eventually

472
00:16:24,000 --> 00:16:27,680
added

473
00:16:24,880 --> 00:16:28,560
um like desktop support and 32-bit ios

474
00:16:27,680 --> 00:16:30,560
um

475
00:16:28,560 --> 00:16:32,800
but now there's all these new targets

476
00:16:30,560 --> 00:16:36,079
that would have been a pain to

477
00:16:32,800 --> 00:16:38,319
uh to um sorry what i'm saying

478
00:16:36,079 --> 00:16:39,839
um that that yeah there's kind of like a

479
00:16:38,320 --> 00:16:42,079
lot more to manage

480
00:16:39,839 --> 00:16:43,199
um and it's nice to kind of have some

481
00:16:42,079 --> 00:16:45,040
ski in place to make sure that it's all

482
00:16:43,199 --> 00:16:46,800
working the way expected to

483
00:16:45,040 --> 00:16:48,160
um and it's a good thing i had that

484
00:16:46,800 --> 00:16:50,240
because i actually learned that my

485
00:16:48,160 --> 00:16:52,880
initial 32-bit implementation was not

486
00:16:50,240 --> 00:16:55,440
doing what i thought it was

487
00:16:52,880 --> 00:16:56,880
so the user defaults api that these

488
00:16:55,440 --> 00:17:00,480
things are running under the hood

489
00:16:56,880 --> 00:17:02,800
has this set integer call

490
00:17:00,480 --> 00:17:04,480
which is using the integer size that is

491
00:17:02,800 --> 00:17:05,198
native to the platform that is running

492
00:17:04,480 --> 00:17:07,760
on

493
00:17:05,199 --> 00:17:09,120
so it might be 32-bit or might be 64-bit

494
00:17:07,760 --> 00:17:11,520
and initially

495
00:17:09,119 --> 00:17:12,159
i was just using this convert function

496
00:17:11,520 --> 00:17:15,280
that

497
00:17:12,160 --> 00:17:18,400
native provides to kind of

498
00:17:15,280 --> 00:17:19,520
try to convert between those um but it

499
00:17:18,400 --> 00:17:21,199
turns out

500
00:17:19,520 --> 00:17:22,879
that will like that will let you

501
00:17:21,199 --> 00:17:25,439
essentially cast between

502
00:17:22,880 --> 00:17:27,679
um 32 and 64 bit things so between intim

503
00:17:25,439 --> 00:17:30,880
long and kotlin

504
00:17:27,679 --> 00:17:33,280
but it won't like that doesn't allow

505
00:17:30,880 --> 00:17:35,520
a system api that's only storing things

506
00:17:33,280 --> 00:17:36,559
as 32 integers to store anything larger

507
00:17:35,520 --> 00:17:39,200
so the

508
00:17:36,559 --> 00:17:39,600
like long apis on 32-bit systems were

509
00:17:39,200 --> 00:17:41,840
not

510
00:17:39,600 --> 00:17:43,600
actually working and i didn't realize

511
00:17:41,840 --> 00:17:45,360
that until i had all that ci in place

512
00:17:43,600 --> 00:17:48,399
and was running the test on

513
00:17:45,360 --> 00:17:49,120
a 32-bit simulator which i didn't have

514
00:17:48,400 --> 00:17:52,559
until

515
00:17:49,120 --> 00:17:54,959
watchos came along um so

516
00:17:52,559 --> 00:17:56,320
where that's ended up is now i've

517
00:17:54,960 --> 00:17:57,520
reintroduced some expectations to the

518
00:17:56,320 --> 00:18:00,559
library

519
00:17:57,520 --> 00:18:02,799
um i have this um

520
00:18:00,559 --> 00:18:04,720
like set long extension and there's kind

521
00:18:02,799 --> 00:18:08,240
of like there's a setmonget long

522
00:18:04,720 --> 00:18:09,840
setting get in um that

523
00:18:08,240 --> 00:18:11,600
has different limitations per platform

524
00:18:09,840 --> 00:18:14,799
so on the

525
00:18:11,600 --> 00:18:18,159
on 64-bit platforms it can just put both

526
00:18:14,799 --> 00:18:22,799
and longs into integers or instead into

527
00:18:18,160 --> 00:18:24,960
um into ios integers which is

528
00:18:22,799 --> 00:18:27,520
64-bit which is is essentially the same

529
00:18:24,960 --> 00:18:29,280
as a column long

530
00:18:27,520 --> 00:18:31,840
and then on 32-bit stuff i have to

531
00:18:29,280 --> 00:18:34,799
stringify it so it's not super elegant

532
00:18:31,840 --> 00:18:36,399
um but it does the trick and it can

533
00:18:34,799 --> 00:18:39,039
still serialize every every possible

534
00:18:36,400 --> 00:18:41,360
value correctly

535
00:18:39,039 --> 00:18:42,799
um so some other notes from other things

536
00:18:41,360 --> 00:18:43,840
i've been or yeah from from other kind

537
00:18:42,799 --> 00:18:44,639
of like things i've learned along the

538
00:18:43,840 --> 00:18:46,959
way

539
00:18:44,640 --> 00:18:48,960
um an important thing for library

540
00:18:46,960 --> 00:18:51,600
development is that um kotlin native

541
00:18:48,960 --> 00:18:54,080
currently because it's still in beta has

542
00:18:51,600 --> 00:18:58,159
no version compatibility guarantees

543
00:18:54,080 --> 00:19:01,360
um so there is um

544
00:18:58,160 --> 00:19:02,240
excuse me um so it's like

545
00:19:01,360 --> 00:19:03,439
there's this kind of ratchet that

546
00:19:02,240 --> 00:19:04,559
happens every time a new culling version

547
00:19:03,440 --> 00:19:06,240
cam comes out where

548
00:19:04,559 --> 00:19:07,840
you're no longer compatible with when

549
00:19:06,240 --> 00:19:10,080
you update your hotline version your

550
00:19:07,840 --> 00:19:12,799
library needs updated at the same time

551
00:19:10,080 --> 00:19:14,559
so a lot of the library system will kind

552
00:19:12,799 --> 00:19:16,160
of try to update quickly so that you're

553
00:19:14,559 --> 00:19:19,280
not blocking

554
00:19:16,160 --> 00:19:20,880
all of your users um

555
00:19:19,280 --> 00:19:21,840
another good note is like the gradle set

556
00:19:20,880 --> 00:19:23,039
for a lot of this stuff can get kind of

557
00:19:21,840 --> 00:19:26,320
complicated

558
00:19:23,039 --> 00:19:27,200
um there's a good multi-platform gradle

559
00:19:26,320 --> 00:19:29,678
reference here

560
00:19:27,200 --> 00:19:30,559
um that's been like for a long time a

561
00:19:29,679 --> 00:19:33,360
lot of the

562
00:19:30,559 --> 00:19:33,840
um multiple documentation has not always

563
00:19:33,360 --> 00:19:35,760
been

564
00:19:33,840 --> 00:19:37,600
kept up to date very well um and this

565
00:19:35,760 --> 00:19:39,440
page has always been consistently pretty

566
00:19:37,600 --> 00:19:41,360
accurate

567
00:19:39,440 --> 00:19:42,880
um and a good just kind of reminder so

568
00:19:41,360 --> 00:19:44,240
like i've talked about a lot of

569
00:19:42,880 --> 00:19:46,320
of like difficulties and issues and

570
00:19:44,240 --> 00:19:47,200
things um but things have gotten a lot

571
00:19:46,320 --> 00:19:48,320
better

572
00:19:47,200 --> 00:19:50,840
over the last year and they will

573
00:19:48,320 --> 00:19:52,320
continue to over time as the on because

574
00:19:50,840 --> 00:19:53,280
temperatures

575
00:19:52,320 --> 00:19:56,000
so what are some other things i'm

576
00:19:53,280 --> 00:19:56,559
working on um i always like to shame

577
00:19:56,000 --> 00:19:59,440
myself

578
00:19:56,559 --> 00:20:01,678
into i need to do a maven central deploy

579
00:19:59,440 --> 00:20:04,880
right now is just deployed on j center

580
00:20:01,679 --> 00:20:06,320
um and i just hate dealing with um

581
00:20:04,880 --> 00:20:07,600
with publishing config and stuff but

582
00:20:06,320 --> 00:20:09,120
it's been able to do this for a while

583
00:20:07,600 --> 00:20:11,360
and it's still there

584
00:20:09,120 --> 00:20:12,639
um i have um portal quest up right now

585
00:20:11,360 --> 00:20:15,280
to do

586
00:20:12,640 --> 00:20:17,039
um code routines flow and context

587
00:20:15,280 --> 00:20:20,240
serialization integrations

588
00:20:17,039 --> 00:20:21,280
um so probably we'll have that in the

589
00:20:20,240 --> 00:20:23,440
next version

590
00:20:21,280 --> 00:20:25,200
but it's um up i get him now if you're

591
00:20:23,440 --> 00:20:27,200
interested in looking at them

592
00:20:25,200 --> 00:20:29,440
um i'd like to get set up for on device

593
00:20:27,200 --> 00:20:30,559
unit tests um so that i can test some of

594
00:20:29,440 --> 00:20:33,200
the platforms that aren't currently

595
00:20:30,559 --> 00:20:35,360
being tested in ci

596
00:20:33,200 --> 00:20:36,880
um and then also like add some more

597
00:20:35,360 --> 00:20:40,080
implications so like there's a

598
00:20:36,880 --> 00:20:42,960
um request right now um that's

599
00:20:40,080 --> 00:20:43,760
a draft trying to add windows registry

600
00:20:42,960 --> 00:20:47,039
support um

601
00:20:43,760 --> 00:20:49,440
for windows implementation um and

602
00:20:47,039 --> 00:20:50,400
i'm interested in getting feedback on

603
00:20:49,440 --> 00:20:52,480
like what a useful

604
00:20:50,400 --> 00:20:55,760
api to use on linux would be um because

605
00:20:52,480 --> 00:20:57,840
i'm not aware of one right now

606
00:20:55,760 --> 00:20:59,440
um so what other stuff is out there um

607
00:20:57,840 --> 00:21:00,720
so i'm not going too much detail on

608
00:20:59,440 --> 00:21:02,240
these but like jetbrains

609
00:21:00,720 --> 00:21:04,240
has a bunch of libraries that they've

610
00:21:02,240 --> 00:21:06,000
been working on um

611
00:21:04,240 --> 00:21:07,840
these three big ones are like protein

612
00:21:06,000 --> 00:21:09,600
serialization and the case store client

613
00:21:07,840 --> 00:21:10,959
um essentially give you like your

614
00:21:09,600 --> 00:21:14,158
default um

615
00:21:10,960 --> 00:21:14,799
hdb stack um in multiple platforms it's

616
00:21:14,159 --> 00:21:15,919
pretty useful

617
00:21:14,799 --> 00:21:17,679
and there's some other things that

618
00:21:15,919 --> 00:21:18,640
they've been working on um and then the

619
00:21:17,679 --> 00:21:19,440
community has been putting out some

620
00:21:18,640 --> 00:21:21,919
libraries so

621
00:21:19,440 --> 00:21:22,799
one of the notable ones is sql delight

622
00:21:21,919 --> 00:21:27,360
which gives you

623
00:21:22,799 --> 00:21:29,520
sql lite access in your shared code

624
00:21:27,360 --> 00:21:31,918
and there's a couple other community

625
00:21:29,520 --> 00:21:34,080
libraries there as well

626
00:21:31,919 --> 00:21:34,960
and maybe at some point yours um so one

627
00:21:34,080 --> 00:21:37,600
of the things i want to do

628
00:21:34,960 --> 00:21:39,120
in giving talks like this is try to

629
00:21:37,600 --> 00:21:41,678
inspire more people to get into this

630
00:21:39,120 --> 00:21:43,039
ecosystem

631
00:21:41,679 --> 00:21:45,440
and think about what that would look

632
00:21:43,039 --> 00:21:48,080
like um so one of the

633
00:21:45,440 --> 00:21:49,280
um kind of strategies you use to try to

634
00:21:48,080 --> 00:21:51,439
do this

635
00:21:49,280 --> 00:21:52,320
is wrapping around platform apis which

636
00:21:51,440 --> 00:21:53,919
is

637
00:21:52,320 --> 00:21:56,240
what the kind of core of multi-platform

638
00:21:53,919 --> 00:21:57,520
settings does um

639
00:21:56,240 --> 00:21:58,480
so like there's an implication that's

640
00:21:57,520 --> 00:22:00,480
already there and there's going to

641
00:21:58,480 --> 00:22:02,080
create a shared interface into it

642
00:22:00,480 --> 00:22:04,080
um so like a lot of the hard work is

643
00:22:02,080 --> 00:22:06,080
done but you have to do

644
00:22:04,080 --> 00:22:07,600
the kind of extra work of taking

645
00:22:06,080 --> 00:22:09,678
whatever different platform apa

646
00:22:07,600 --> 00:22:11,600
or whatever different platform

647
00:22:09,679 --> 00:22:13,520
implementations there are

648
00:22:11,600 --> 00:22:15,120
and find the shared interface around

649
00:22:13,520 --> 00:22:16,960
them

650
00:22:15,120 --> 00:22:18,479
or you can go the other way you could

651
00:22:16,960 --> 00:22:19,919
write something that's pure kotlin maybe

652
00:22:18,480 --> 00:22:21,760
it's like math utilities or something

653
00:22:19,919 --> 00:22:23,520
like that

654
00:22:21,760 --> 00:22:25,679
the work there is creating something

655
00:22:23,520 --> 00:22:28,000
brand new but once you have

656
00:22:25,679 --> 00:22:29,280
you've got this great payout where now

657
00:22:28,000 --> 00:22:30,480
you can access everything

658
00:22:29,280 --> 00:22:33,520
like once once that comment call

659
00:22:30,480 --> 00:22:34,559
invitation is there um there's no work

660
00:22:33,520 --> 00:22:37,600
to

661
00:22:34,559 --> 00:22:37,600
add more platforms to it

662
00:22:38,080 --> 00:22:42,158
but either way like now is a really

663
00:22:40,159 --> 00:22:45,679
great time to think about doing this

664
00:22:42,159 --> 00:22:46,720
um so um things have been maturing over

665
00:22:45,679 --> 00:22:48,559
the last couple years

666
00:22:46,720 --> 00:22:50,880
um but it's still a very young ecosystem

667
00:22:48,559 --> 00:22:52,080
there's a lot of opportunity if you

668
00:22:50,880 --> 00:22:54,000
want to start contributing to open

669
00:22:52,080 --> 00:22:56,000
source um

670
00:22:54,000 --> 00:22:57,200
to be the first person to build a thing

671
00:22:56,000 --> 00:22:58,320
on this platform

672
00:22:57,200 --> 00:23:01,440
that was one of the things that inspired

673
00:22:58,320 --> 00:23:03,120
me to get into this stuff to begin with

674
00:23:01,440 --> 00:23:05,200
and if that's interesting to you i

675
00:23:03,120 --> 00:23:08,479
recommend you think about it

676
00:23:05,200 --> 00:23:10,559
so thanks um here's some

677
00:23:08,480 --> 00:23:11,840
links if you uh want to refer back to

678
00:23:10,559 --> 00:23:13,520
them later

679
00:23:11,840 --> 00:23:15,520
um so the live link to the library code

680
00:23:13,520 --> 00:23:16,400
is there um that gradle documentation

681
00:23:15,520 --> 00:23:18,639
page

682
00:23:16,400 --> 00:23:20,480
um and um there's a repository at the

683
00:23:18,640 --> 00:23:22,240
bottom that has a good list of libraries

684
00:23:20,480 --> 00:23:25,360
that are already out there that might

685
00:23:22,240 --> 00:23:28,960
give you some inspiration um

686
00:23:25,360 --> 00:23:31,280
and then um i said earlier i'm

687
00:23:28,960 --> 00:23:33,360
joining the team at touch lab who are

688
00:23:31,280 --> 00:23:33,760
kind of taking a pretty big leading role

689
00:23:33,360 --> 00:23:36,320
in

690
00:23:33,760 --> 00:23:37,679
building a lot of uh like building

691
00:23:36,320 --> 00:23:39,520
multiple apps for clients and kind of

692
00:23:37,679 --> 00:23:42,640
defining best practices and things

693
00:23:39,520 --> 00:23:44,158
so if you are interested in that um

694
00:23:42,640 --> 00:23:45,520
or you like wanna want help kind of

695
00:23:44,159 --> 00:23:46,400
getting started with stuff uh let me

696
00:23:45,520 --> 00:23:51,840
know

697
00:23:46,400 --> 00:23:51,840
so thanks a lot

698
00:23:57,039 --> 00:23:59,120
you

