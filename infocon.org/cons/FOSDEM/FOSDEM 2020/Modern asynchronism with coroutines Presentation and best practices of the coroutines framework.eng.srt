1
00:00:04,960 --> 00:00:10,320
everyone thank you for coming

2
00:00:07,120 --> 00:00:12,559
um so unfortunately the speaker that was

3
00:00:10,320 --> 00:00:16,320
supposed to give this presentation

4
00:00:12,559 --> 00:00:18,640
is sick and his his apologies but he's

5
00:00:16,320 --> 00:00:20,320
unable to be on stage

6
00:00:18,640 --> 00:00:21,920
the talk we've been experimenting with a

7
00:00:20,320 --> 00:00:24,640
couple compiler

8
00:00:21,920 --> 00:00:26,000
and that's really unfortunate but we

9
00:00:24,640 --> 00:00:28,960
found

10
00:00:26,000 --> 00:00:29,599
a volunteer that took over this lot so

11
00:00:28,960 --> 00:00:32,880
we're going

12
00:00:29,599 --> 00:00:36,000
to have geoffrey on stage talking about

13
00:00:32,880 --> 00:00:38,480
modern asynchronism with curtins thank

14
00:00:36,000 --> 00:00:38,480
you very much

15
00:00:42,480 --> 00:00:45,919
good morning everyone um so i just

16
00:00:44,800 --> 00:00:48,078
presented the corrupting

17
00:00:45,920 --> 00:00:49,680
the most generic way i could because i

18
00:00:48,079 --> 00:00:52,239
am an android developer too

19
00:00:49,680 --> 00:00:54,480
i'll do a second talk this afternoon at

20
00:00:52,239 --> 00:00:55,919
1 pm which will be more specific to

21
00:00:54,480 --> 00:00:58,480
android

22
00:00:55,920 --> 00:00:59,120
so i won't cover everything for android

23
00:00:58,480 --> 00:01:01,440
right now

24
00:00:59,120 --> 00:01:03,199
you can come this afternoon noon for

25
00:01:01,440 --> 00:01:06,000
almost filled it up

26
00:01:03,199 --> 00:01:07,039
um first of all i present myself i work

27
00:01:06,000 --> 00:01:08,960
at

28
00:01:07,040 --> 00:01:11,600
video labs which is a company founded by

29
00:01:08,960 --> 00:01:12,080
videolan people to have people full time

30
00:01:11,600 --> 00:01:16,539
on

31
00:01:12,080 --> 00:01:19,600
vlc so i work on the android port of vlc

32
00:01:16,540 --> 00:01:22,799
[Music]

33
00:01:19,600 --> 00:01:26,080
so long story short call corrupting are

34
00:01:22,799 --> 00:01:30,640
just the compiler

35
00:01:26,080 --> 00:01:30,640
wrapping the callbacks for you so

36
00:01:31,360 --> 00:01:35,200
do you have to speak louder or the mic

37
00:01:38,640 --> 00:01:41,040
you hold

38
00:01:48,100 --> 00:01:53,439
[Music]

39
00:01:50,640 --> 00:01:54,479
then just under the wood wrapping

40
00:01:53,439 --> 00:01:57,679
callbacks for you

41
00:01:54,479 --> 00:02:00,320
so the compiler will you will write

42
00:01:57,680 --> 00:02:02,079
a linear code sequential calls and then

43
00:02:00,320 --> 00:02:04,240
the compiler can do some

44
00:02:02,079 --> 00:02:05,360
callbacks for you and you oh you don't

45
00:02:04,240 --> 00:02:07,280
have the callback you

46
00:02:05,360 --> 00:02:08,560
usual callback helps when you do some

47
00:02:07,280 --> 00:02:11,840
asynchronism

48
00:02:08,560 --> 00:02:11,840
so you don't need to lock and

49
00:02:12,720 --> 00:02:16,400
you don't need to write callbacks and

50
00:02:14,720 --> 00:02:19,680
you less need to lock

51
00:02:16,400 --> 00:02:22,879
to block the current thread to you won't

52
00:02:19,680 --> 00:02:25,760
use mutex anymore or similar force so

53
00:02:22,879 --> 00:02:27,840
the paradigm now now is suspending

54
00:02:25,760 --> 00:02:29,599
instead of blocking a thread so we have

55
00:02:27,840 --> 00:02:31,599
a suspending function which

56
00:02:29,599 --> 00:02:32,959
frees the current thread which is

57
00:02:31,599 --> 00:02:37,839
available for the task

58
00:02:32,959 --> 00:02:37,840
and then we'll call back later

59
00:02:39,360 --> 00:02:43,280
um so the entry point of corrections are

60
00:02:42,080 --> 00:02:46,640
is the launch call

61
00:02:43,280 --> 00:02:49,440
usually it returns a job um and the

62
00:02:46,640 --> 00:02:50,879
job is the controller of the your

63
00:02:49,440 --> 00:02:53,840
carotene

64
00:02:50,879 --> 00:02:54,720
uh you can specify uh dispatcher which

65
00:02:53,840 --> 00:02:56,400
will decide

66
00:02:54,720 --> 00:02:58,959
on which thread will the current

67
00:02:56,400 --> 00:02:58,959
executed

68
00:02:59,760 --> 00:03:03,440
the the second most useful the width

69
00:03:02,239 --> 00:03:05,440
context so

70
00:03:03,440 --> 00:03:07,680
inside the core routine this will

71
00:03:05,440 --> 00:03:11,120
suspend to this coding

72
00:03:07,680 --> 00:03:12,879
and execute the the inner code in the

73
00:03:11,120 --> 00:03:15,519
context you specified

74
00:03:12,879 --> 00:03:17,200
here i chose to use dispatcher.io which

75
00:03:15,519 --> 00:03:20,319
is a i o dedicated thread

76
00:03:17,200 --> 00:03:22,480
thread pull to do a background io

77
00:03:20,319 --> 00:03:25,599
operation which will be blocking

78
00:03:22,480 --> 00:03:26,159
so during this time the main thread is

79
00:03:25,599 --> 00:03:28,079
free

80
00:03:26,159 --> 00:03:30,798
you can just continue to display your

81
00:03:28,080 --> 00:03:33,040
app you can still have inputs from user

82
00:03:30,799 --> 00:03:33,840
while the the file is being fetched and

83
00:03:33,040 --> 00:03:36,079
once the file

84
00:03:33,840 --> 00:03:37,760
is ready in this curtain we come back to

85
00:03:36,080 --> 00:03:40,959
the main thread when it's available

86
00:03:37,760 --> 00:03:40,959
and we continue our task

87
00:03:42,239 --> 00:03:47,360
there is the async call which mimics the

88
00:03:45,040 --> 00:03:50,159
async await from t-sharp

89
00:03:47,360 --> 00:03:52,400
which is more suited it works a bit like

90
00:03:50,159 --> 00:03:55,040
with context but it's more suited for

91
00:03:52,400 --> 00:03:55,760
parallel calls you need so here we can

92
00:03:55,040 --> 00:03:59,439
call

93
00:03:55,760 --> 00:04:01,679
two async tasks two different testing

94
00:03:59,439 --> 00:04:04,959
tasks and then await for both of them

95
00:04:01,680 --> 00:04:07,200
so this way we'll have two parallel

96
00:04:04,959 --> 00:04:08,480
job launched and once they're once they

97
00:04:07,200 --> 00:04:12,720
are both ready

98
00:04:08,480 --> 00:04:15,280
we can't just leverage the result

99
00:04:12,720 --> 00:04:16,320
this in java would be complicated to

100
00:04:15,280 --> 00:04:19,440
achieve that will be

101
00:04:16,320 --> 00:04:23,120
a a lot of callback else actually

102
00:04:19,440 --> 00:04:26,880
and this becomes really really simple

103
00:04:23,120 --> 00:04:30,240
with the core routines so here the catch

104
00:04:26,880 --> 00:04:32,400
is the dispatching the

105
00:04:30,240 --> 00:04:33,520
you'll see the simple the code is way

106
00:04:32,400 --> 00:04:36,000
more simpler

107
00:04:33,520 --> 00:04:37,680
but under the wood you have to get in

108
00:04:36,000 --> 00:04:40,800
mind that

109
00:04:37,680 --> 00:04:43,520
the the execution is not a call stack

110
00:04:40,800 --> 00:04:44,880
anymore like in a regular function so

111
00:04:43,520 --> 00:04:46,960
it's not you don't know

112
00:04:44,880 --> 00:04:48,000
the exact state of your thread

113
00:04:46,960 --> 00:04:49,758
potentially

114
00:04:48,000 --> 00:04:51,759
typically when you start from the main

115
00:04:49,759 --> 00:04:53,440
thread you do a with one text

116
00:04:51,759 --> 00:04:55,759
background task when you come back to

117
00:04:53,440 --> 00:04:58,160
the main thread everything can happen

118
00:04:55,759 --> 00:04:59,759
maybe the view has been just wiped in

119
00:04:58,160 --> 00:05:03,360
the meantime and the task is not

120
00:04:59,759 --> 00:05:05,120
valid anymore so this is the trick we

121
00:05:03,360 --> 00:05:07,759
have to know with coveting it simplify

122
00:05:05,120 --> 00:05:10,160
the code but under the root we have to

123
00:05:07,759 --> 00:05:11,440
know that like with regular threading we

124
00:05:10,160 --> 00:05:16,160
don't know the state of the

125
00:05:11,440 --> 00:05:16,160
calling thread the ordinary original one

126
00:05:18,800 --> 00:05:22,320
we can also specify when we launch a

127
00:05:21,039 --> 00:05:25,280
curtain to not

128
00:05:22,320 --> 00:05:26,320
dispatch immediately because by default

129
00:05:25,280 --> 00:05:27,919
we just post

130
00:05:26,320 --> 00:05:29,520
the call to the main thread which will

131
00:05:27,919 --> 00:05:32,639
be executed later so we

132
00:05:29,520 --> 00:05:32,639
leave the current function

133
00:05:33,440 --> 00:05:36,880
and that's it so for the android

134
00:05:34,720 --> 00:05:39,280
developer the

135
00:05:36,880 --> 00:05:41,120
the main dispatch the dispatchers.main

136
00:05:39,280 --> 00:05:42,799
implementation is based on the handler

137
00:05:41,120 --> 00:05:47,199
it's just simply posting

138
00:05:42,800 --> 00:05:47,199
a runnable to a handler

139
00:05:51,120 --> 00:05:54,800
when you we launch a routine i showed

140
00:05:52,880 --> 00:05:56,000
you we chose a dispatcher but actually

141
00:05:54,800 --> 00:05:58,639
we can specify

142
00:05:56,000 --> 00:06:00,319
uh more complete context and context

143
00:05:58,639 --> 00:06:02,319
will be

144
00:06:00,319 --> 00:06:04,960
the most important element are the

145
00:06:02,319 --> 00:06:07,759
dispatcher and parent job

146
00:06:04,960 --> 00:06:08,400
and we can also specify exception number

147
00:06:07,759 --> 00:06:10,800
and name

148
00:06:08,400 --> 00:06:13,120
so dispatcher will just decide where the

149
00:06:10,800 --> 00:06:16,160
code will execute

150
00:06:13,120 --> 00:06:18,479
job is an interesting uh

151
00:06:16,160 --> 00:06:20,000
feature that you would will be a

152
00:06:18,479 --> 00:06:22,479
controller on your core jeans

153
00:06:20,000 --> 00:06:24,479
so we can join this job like we join a

154
00:06:22,479 --> 00:06:27,599
thread in the c plus plus

155
00:06:24,479 --> 00:06:29,680
for example and we can also cancel it

156
00:06:27,600 --> 00:06:32,400
and corrupting can have a parent job

157
00:06:29,680 --> 00:06:34,479
that's what we specify when we launch it

158
00:06:32,400 --> 00:06:36,719
and if you can't sell a parent shop all

159
00:06:34,479 --> 00:06:37,199
the children carotene will be cancelled

160
00:06:36,720 --> 00:06:39,360
too

161
00:06:37,199 --> 00:06:40,479
and that's really powerful to cancel

162
00:06:39,360 --> 00:06:49,440
operation when

163
00:06:40,479 --> 00:06:52,240
a specific scope is not valid anymore

164
00:06:49,440 --> 00:06:53,520
that's why gel points implemented the

165
00:06:52,240 --> 00:06:56,800
curtin scope

166
00:06:53,520 --> 00:07:00,159
interface this is basically just a

167
00:06:56,800 --> 00:07:03,280
holder for corrosion context but it's

168
00:07:00,160 --> 00:07:05,759
it will

169
00:07:03,280 --> 00:07:07,359
create a pattern of always specifying

170
00:07:05,759 --> 00:07:10,639
according context

171
00:07:07,360 --> 00:07:14,160
and matching to a life cycle so

172
00:07:10,639 --> 00:07:16,639
when you have a session you can

173
00:07:14,160 --> 00:07:17,759
define the scope the quality scope

174
00:07:16,639 --> 00:07:20,000
matching this session

175
00:07:17,759 --> 00:07:21,199
and when the session is over you can

176
00:07:20,000 --> 00:07:23,120
sell your current scope

177
00:07:21,199 --> 00:07:24,240
which it will in fact cancel the payment

178
00:07:23,120 --> 00:07:26,400
job you are

179
00:07:24,240 --> 00:07:27,759
affected for every core routine so all

180
00:07:26,400 --> 00:07:29,359
of your background

181
00:07:27,759 --> 00:07:31,120
and weighting tasks will be

182
00:07:29,360 --> 00:07:33,120
automatically cancelled when

183
00:07:31,120 --> 00:07:36,479
you decided this is not this is no

184
00:07:33,120 --> 00:07:36,479
longer no longer valid

185
00:07:37,680 --> 00:07:43,199
there is a global scope which is

186
00:07:40,880 --> 00:07:44,719
not duplicated but it's not advised to

187
00:07:43,199 --> 00:07:47,759
use it but this is

188
00:07:44,720 --> 00:07:50,879
an unfold for from

189
00:07:47,759 --> 00:07:58,000
migration from regular java code

190
00:07:50,879 --> 00:08:00,479
to kotlin

191
00:07:58,000 --> 00:08:02,720
so this is how we match um corrupting

192
00:08:00,479 --> 00:08:05,039
scope to a life cycle this is a

193
00:08:02,720 --> 00:08:05,759
an android view model which has its life

194
00:08:05,039 --> 00:08:07,120
cycle is

195
00:08:05,759 --> 00:08:08,800
it is creating and when the

196
00:08:07,120 --> 00:08:10,000
corresponding view is definitely

197
00:08:08,800 --> 00:08:12,720
destroyed

198
00:08:10,000 --> 00:08:15,840
it will be cleared so here we just

199
00:08:12,720 --> 00:08:15,840
define apparent job

200
00:08:16,240 --> 00:08:19,919
the dispatcher we want to use so this is

201
00:08:18,960 --> 00:08:23,120
the main one

202
00:08:19,919 --> 00:08:26,400
and then on clear we just um

203
00:08:23,120 --> 00:08:29,039
here we cancel the job and we can call

204
00:08:26,400 --> 00:08:32,000
the scope that cancel a call which is

205
00:08:29,039 --> 00:08:34,319
just a shortcut to this

206
00:08:32,000 --> 00:08:36,799
um i just i wrote a regular job but

207
00:08:34,320 --> 00:08:39,839
there is a variant a

208
00:08:36,799 --> 00:08:41,519
supervisor job and supervisor job will

209
00:08:39,839 --> 00:08:45,360
not cancel when one

210
00:08:41,519 --> 00:08:47,519
of a children of a child fails

211
00:08:45,360 --> 00:08:48,560
in the former example with the two

212
00:08:47,519 --> 00:08:51,600
parallel async

213
00:08:48,560 --> 00:08:52,479
calls with a regular job if one of this

214
00:08:51,600 --> 00:08:55,920
goal

215
00:08:52,480 --> 00:08:58,160
fails the entire scope is cancelled

216
00:08:55,920 --> 00:09:00,000
this is convenient when you really need

217
00:08:58,160 --> 00:09:01,680
the the two results for example you

218
00:09:00,000 --> 00:09:02,880
don't care about waiting for the second

219
00:09:01,680 --> 00:09:06,640
one when

220
00:09:02,880 --> 00:09:08,240
one has already failed in most

221
00:09:06,640 --> 00:09:10,399
main thread tasks you want to use a

222
00:09:08,240 --> 00:09:10,720
supervisor job because if one task fails

223
00:09:10,399 --> 00:09:14,320
you

224
00:09:10,720 --> 00:09:18,560
just you don't want to and

225
00:09:14,320 --> 00:09:18,560
abruptly stop the user experience

226
00:09:18,640 --> 00:09:22,399
so on some notes um corrosion are very

227
00:09:21,120 --> 00:09:25,360
powerful but it breaks

228
00:09:22,399 --> 00:09:25,839
the interval interoperability between

229
00:09:25,360 --> 00:09:28,480
java

230
00:09:25,839 --> 00:09:28,480
and kathleen

231
00:09:28,959 --> 00:09:34,079
there is a metex class which works

232
00:09:32,000 --> 00:09:36,160
really like the normal one but it

233
00:09:34,080 --> 00:09:39,440
doesn't block it just suspends

234
00:09:36,160 --> 00:09:41,680
the it and it has to be executed so in a

235
00:09:39,440 --> 00:09:44,240
correcting context there is a volatile

236
00:09:41,680 --> 00:09:47,040
and annotation in kotlin which is quite

237
00:09:44,240 --> 00:09:49,839
useful too it just matches the volatile

238
00:09:47,040 --> 00:09:53,120
java volatile

239
00:09:49,839 --> 00:09:53,120
that's it and um

240
00:09:57,680 --> 00:10:03,839
so now i'll just show you some um

241
00:10:01,360 --> 00:10:05,440
some way to use this core routine to do

242
00:10:03,839 --> 00:10:07,839
some really cool stuff a more

243
00:10:05,440 --> 00:10:09,760
complicated one okay one in a simpler

244
00:10:07,839 --> 00:10:11,440
way

245
00:10:09,760 --> 00:10:13,360
the first one i'll show it the callback

246
00:10:11,440 --> 00:10:16,839
limitation will

247
00:10:13,360 --> 00:10:20,399
will wrap a multiple shot

248
00:10:16,839 --> 00:10:23,680
callback in according

249
00:10:20,399 --> 00:10:25,920
so in this example i took the the libvlc

250
00:10:23,680 --> 00:10:27,680
browser api which is an synchronous

251
00:10:25,920 --> 00:10:30,719
browsing api so we

252
00:10:27,680 --> 00:10:33,120
just tell we want to browse

253
00:10:30,720 --> 00:10:35,040
this folder and then we have callbacks

254
00:10:33,120 --> 00:10:40,079
for every media discovered and

255
00:10:35,040 --> 00:10:40,079
one callback once the discover is over

256
00:10:40,800 --> 00:10:44,959
so in practice we have to

257
00:10:45,360 --> 00:10:51,600
define um listener which will receive

258
00:10:48,560 --> 00:10:53,760
the callbacks then and so for

259
00:10:51,600 --> 00:10:55,200
refresh we have to start this discovery

260
00:10:53,760 --> 00:10:57,279
and the listener will continue this

261
00:10:55,200 --> 00:11:01,839
execution so we we have the function

262
00:10:57,279 --> 00:11:01,839
occurring in two different places

263
00:11:04,640 --> 00:11:08,160
so in kotlin we have channels gold

264
00:11:07,360 --> 00:11:11,040
developer

265
00:11:08,160 --> 00:11:13,199
should know this it's really convenient

266
00:11:11,040 --> 00:11:16,480
we can just post events and

267
00:11:13,200 --> 00:11:16,480
wait for receive them

268
00:11:16,720 --> 00:11:21,839
and here this is what i use i just

269
00:11:20,000 --> 00:11:24,959
define a channel the

270
00:11:21,839 --> 00:11:26,880
the callbacks we just passed on it and

271
00:11:24,959 --> 00:11:28,719
then when we want to refresh we will use

272
00:11:26,880 --> 00:11:32,160
this channel we initiate it

273
00:11:28,720 --> 00:11:35,519
and use it to just suspend we

274
00:11:32,160 --> 00:11:38,399
start the request browsing then we

275
00:11:35,519 --> 00:11:39,680
the the for loop is um it's a select

276
00:11:38,399 --> 00:11:42,880
actually

277
00:11:39,680 --> 00:11:43,680
so this for the select we just suspend

278
00:11:42,880 --> 00:11:47,279
the function

279
00:11:43,680 --> 00:11:49,199
so the current thread is free

280
00:11:47,279 --> 00:11:50,560
function is suspended and every time we

281
00:11:49,200 --> 00:11:53,120
receive a media

282
00:11:50,560 --> 00:11:55,518
from the background or background task

283
00:11:53,120 --> 00:11:59,120
it will just

284
00:11:55,519 --> 00:12:02,959
execute and we can add our media

285
00:11:59,120 --> 00:12:06,000
in the main thread right when the debug

286
00:12:02,959 --> 00:12:06,719
and then we can update our data setted

287
00:12:06,000 --> 00:12:10,480
the data

288
00:12:06,720 --> 00:12:13,200
meant for the ui

289
00:12:10,480 --> 00:12:14,480
and then it brings some nice addition we

290
00:12:13,200 --> 00:12:17,040
have some operators like

291
00:12:14,480 --> 00:12:18,160
a map if we need some transformation

292
00:12:17,040 --> 00:12:21,279
when we have our

293
00:12:18,160 --> 00:12:24,079
raw media before sending into

294
00:12:21,279 --> 00:12:24,800
the ui we can also wait to have the full

295
00:12:24,079 --> 00:12:27,839
list so

296
00:12:24,800 --> 00:12:30,639
we'll wait for the the browse end

297
00:12:27,839 --> 00:12:31,760
being called for the list to be ready

298
00:12:30,639 --> 00:12:39,200
and once we have that we

299
00:12:31,760 --> 00:12:41,519
are we have the full list ready

300
00:12:39,200 --> 00:12:43,839
channel has been that's an experimental

301
00:12:41,519 --> 00:12:47,120
api though this is production ready but

302
00:12:43,839 --> 00:12:49,760
this api may move like the actors

303
00:12:47,120 --> 00:12:53,120
actors is basically a simple wrapper on

304
00:12:49,760 --> 00:12:56,639
top of channel the first example

305
00:12:53,120 --> 00:12:57,279
is for adapter uh the where working is

306
00:12:56,639 --> 00:13:00,560
basically

307
00:12:57,279 --> 00:13:02,800
we post a list of elements to it

308
00:13:00,560 --> 00:13:03,760
and it and it calculates the the diff

309
00:13:02,800 --> 00:13:06,160
exactly like

310
00:13:03,760 --> 00:13:07,680
git does between those two to update the

311
00:13:06,160 --> 00:13:10,880
view

312
00:13:07,680 --> 00:13:12,959
so um we

313
00:13:10,880 --> 00:13:14,720
we have to send the update function

314
00:13:12,959 --> 00:13:17,040
we'll just receive the new list

315
00:13:14,720 --> 00:13:18,079
we send this list to an to an actor

316
00:13:17,040 --> 00:13:21,279
which is

317
00:13:18,079 --> 00:13:23,359
under the channel in this way

318
00:13:21,279 --> 00:13:24,800
i chose a conflicted one this way if we

319
00:13:23,360 --> 00:13:28,079
send like 10 list

320
00:13:24,800 --> 00:13:30,479
at once um the conflicting will

321
00:13:28,079 --> 00:13:33,760
just ignore the intermediary step so

322
00:13:30,480 --> 00:13:36,480
while the first one is being

323
00:13:33,760 --> 00:13:38,000
uh the nine other arrive on this and

324
00:13:36,480 --> 00:13:40,720
every new one will just

325
00:13:38,000 --> 00:13:41,519
override the the formula so in the end

326
00:13:40,720 --> 00:13:45,360
we'll just

327
00:13:41,519 --> 00:13:45,360
just process the first and the last ones

328
00:13:45,600 --> 00:13:48,880
for ui we don't care about just updating

329
00:13:48,000 --> 00:13:51,360
uh

330
00:13:48,880 --> 00:13:53,279
that much steps we just want to be up to

331
00:13:51,360 --> 00:13:56,480
date

332
00:13:53,279 --> 00:13:56,959
and then um so in this channel we are in

333
00:13:56,480 --> 00:13:58,800
the

334
00:13:56,959 --> 00:14:01,199
scope so we are kind of suspending

335
00:13:58,800 --> 00:14:04,319
function so in this suspended function i

336
00:14:01,199 --> 00:14:07,120
i do the calculation in the

337
00:14:04,320 --> 00:14:08,160
default thread pull which is a sweatpool

338
00:14:07,120 --> 00:14:10,639
with

339
00:14:08,160 --> 00:14:12,079
as much thread that you have of cpu

340
00:14:10,639 --> 00:14:14,720
cores

341
00:14:12,079 --> 00:14:15,519
and then we come back to the main thread

342
00:14:14,720 --> 00:14:17,519
to post

343
00:14:15,519 --> 00:14:19,199
events and then we can process the next

344
00:14:17,519 --> 00:14:22,320
one in the list so it's a queue of

345
00:14:19,199 --> 00:14:24,560
events which can be suspended

346
00:14:22,320 --> 00:14:26,880
another way of using actors is to

347
00:14:24,560 --> 00:14:30,239
confine mutability

348
00:14:26,880 --> 00:14:31,439
that's what we do every day with the ui

349
00:14:30,240 --> 00:14:34,560
thread or main thread

350
00:14:31,440 --> 00:14:37,040
so typically views cannot be modified

351
00:14:34,560 --> 00:14:38,959
outside of this main thread because of

352
00:14:37,040 --> 00:14:41,920
possible concurrent access

353
00:14:38,959 --> 00:14:42,959
so the mutability of the ui is confined

354
00:14:41,920 --> 00:14:45,040
to the method

355
00:14:42,959 --> 00:14:46,239
we can do this with an actor so we can

356
00:14:45,040 --> 00:14:49,839
find it

357
00:14:46,240 --> 00:14:53,839
in this um in this specific

358
00:14:49,839 --> 00:14:55,360
routine so as this is a queue it

359
00:14:53,839 --> 00:14:58,560
guarantees we cannot

360
00:14:55,360 --> 00:15:01,680
have multiple access at the same time so

361
00:14:58,560 --> 00:15:05,119
here i can do like deletion modification

362
00:15:01,680 --> 00:15:08,000
and read access safely this is just

363
00:15:05,120 --> 00:15:09,279
cute it's not immediate but this is

364
00:15:08,000 --> 00:15:10,959
guaranteed to

365
00:15:09,279 --> 00:15:13,920
to not be concurrent so i don't block

366
00:15:10,959 --> 00:15:17,920
anything i don't need to use a matex

367
00:15:13,920 --> 00:15:20,560
i just confine it in it in this actor

368
00:15:17,920 --> 00:15:22,160
so here i just use an unlimited capacity

369
00:15:20,560 --> 00:15:26,239
for example to not

370
00:15:22,160 --> 00:15:29,040
conflate and not ignore any elements

371
00:15:26,240 --> 00:15:31,600
and this and then i just have to to post

372
00:15:29,040 --> 00:15:31,599
elements

373
00:15:31,839 --> 00:15:38,560
to this um

374
00:15:35,279 --> 00:15:40,720
another example of matching

375
00:15:38,560 --> 00:15:42,079
the scope with the life cycle this is

376
00:15:40,720 --> 00:15:45,120
the view life cycle

377
00:15:42,079 --> 00:15:47,279
on android uh it's right what i showed

378
00:15:45,120 --> 00:15:50,720
you

379
00:15:47,279 --> 00:15:53,120
sooner i i use a delegation for

380
00:15:50,720 --> 00:15:54,639
implementation on android so i implement

381
00:15:53,120 --> 00:15:58,000
implement the creatine scope by

382
00:15:54,639 --> 00:16:00,880
with the main scope function

383
00:15:58,000 --> 00:16:02,240
and i just now have to call the cancel

384
00:16:00,880 --> 00:16:05,279
in the on destroy and

385
00:16:02,240 --> 00:16:08,399
this makes me allows me to use

386
00:16:05,279 --> 00:16:10,720
corrupting in this view

387
00:16:08,399 --> 00:16:14,240
and all of the coding calls will be

388
00:16:10,720 --> 00:16:14,240
cancelled when the view is over

389
00:16:17,360 --> 00:16:23,920
we can play with it and add some useful

390
00:16:21,120 --> 00:16:24,720
extension function like for any view i

391
00:16:23,920 --> 00:16:27,759
can just

392
00:16:24,720 --> 00:16:29,680
use this is our other function we

393
00:16:27,759 --> 00:16:31,600
just post the action we want to do we

394
00:16:29,680 --> 00:16:37,199
use an actor

395
00:16:31,600 --> 00:16:39,199
to stack the the events to be processed

396
00:16:37,199 --> 00:16:40,399
so this is a listener the listener will

397
00:16:39,199 --> 00:16:42,160
put to the actor

398
00:16:40,399 --> 00:16:44,079
this is on the magic and then all of

399
00:16:42,160 --> 00:16:45,199
this will be are you understood and

400
00:16:44,079 --> 00:16:48,839
automatically consoled

401
00:16:45,199 --> 00:16:50,399
well when we don't need this view

402
00:16:48,839 --> 00:16:53,440
anymore

403
00:16:50,399 --> 00:16:54,240
um i show now another way to wrap

404
00:16:53,440 --> 00:16:57,120
callbacks

405
00:16:54,240 --> 00:16:57,680
but single shot callbacks so we just

406
00:16:57,120 --> 00:17:01,279
want

407
00:16:57,680 --> 00:17:02,160
one single event from a call i took a

408
00:17:01,279 --> 00:17:04,640
rest

409
00:17:02,160 --> 00:17:05,520
call for example we just send a http

410
00:17:04,640 --> 00:17:08,880
request and one

411
00:17:05,520 --> 00:17:12,079
want one result so this

412
00:17:08,880 --> 00:17:12,880
is how um retrofit used to work and now

413
00:17:12,079 --> 00:17:16,319
they

414
00:17:12,880 --> 00:17:19,919
natively to support support the routines

415
00:17:16,319 --> 00:17:21,199
so we had to to make a call and we add

416
00:17:19,919 --> 00:17:23,839
callbacks for the

417
00:17:21,199 --> 00:17:23,839
the result

418
00:17:25,119 --> 00:17:33,039
um we can directly create a coating

419
00:17:28,640 --> 00:17:36,080
like this with the

420
00:17:33,039 --> 00:17:39,919
with the suspense income the

421
00:17:36,080 --> 00:17:40,480
suspenseable carotene it will just will

422
00:17:39,919 --> 00:17:42,960
create

423
00:17:40,480 --> 00:17:46,480
our callback in it which will continue

424
00:17:42,960 --> 00:17:49,200
the coating with the correct result

425
00:17:46,480 --> 00:17:50,720
we are the important elements so we call

426
00:17:49,200 --> 00:17:53,200
suspend croutine

427
00:17:50,720 --> 00:17:54,799
the call on queue is the call the

428
00:17:53,200 --> 00:17:55,520
continuation is the state machine

429
00:17:54,799 --> 00:17:59,120
holding the

430
00:17:55,520 --> 00:18:01,200
quotient states so we either resume it

431
00:17:59,120 --> 00:18:03,360
with the result we add

432
00:18:01,200 --> 00:18:05,190
and then this function will return the

433
00:18:03,360 --> 00:18:06,479
result with the correct type directly

434
00:18:05,190 --> 00:18:09,120
[Music]

435
00:18:06,480 --> 00:18:10,160
or we failed and we with them with an

436
00:18:09,120 --> 00:18:12,479
exception and we can

437
00:18:10,160 --> 00:18:13,280
just try catch this core or use the

438
00:18:12,480 --> 00:18:16,240
quarantine

439
00:18:13,280 --> 00:18:16,240
handler for example

440
00:18:17,280 --> 00:18:20,879
so usage became pretty becomes pretty

441
00:18:19,840 --> 00:18:24,159
simple

442
00:18:20,880 --> 00:18:27,280
we just have to wrap our api

443
00:18:24,160 --> 00:18:28,960
calls in this ir order function and we

444
00:18:27,280 --> 00:18:30,320
get suspending function returning

445
00:18:28,960 --> 00:18:33,679
directly the

446
00:18:30,320 --> 00:18:35,760
the great app now from this i want to

447
00:18:33,679 --> 00:18:37,280
browse a path so i just receive a list

448
00:18:35,760 --> 00:18:40,080
of files

449
00:18:37,280 --> 00:18:41,440
and we don't care about this network

450
00:18:40,080 --> 00:18:42,960
logic anymore

451
00:18:41,440 --> 00:18:44,480
we don't care about threading or

452
00:18:42,960 --> 00:18:46,400
whatever we just have to be in

453
00:18:44,480 --> 00:18:49,280
encouraging context

454
00:18:46,400 --> 00:18:51,200
and we call it the protein will suspend

455
00:18:49,280 --> 00:18:52,960
the main thread will be free

456
00:18:51,200 --> 00:18:57,760
from the time being and then once it's

457
00:18:52,960 --> 00:18:59,679
ready we have our data

458
00:18:57,760 --> 00:19:00,879
a second example of the very same

459
00:18:59,679 --> 00:19:03,120
application

460
00:19:00,880 --> 00:19:04,640
in vlc we have like this is an android

461
00:19:03,120 --> 00:19:08,399
tv we have channels

462
00:19:04,640 --> 00:19:11,919
on screen so we may have to

463
00:19:08,400 --> 00:19:13,120
start media with and before vlc being

464
00:19:11,919 --> 00:19:15,840
actually launched

465
00:19:13,120 --> 00:19:18,959
so media library is not ready i did the

466
00:19:15,840 --> 00:19:21,280
same implementation with a shortcut if

467
00:19:18,960 --> 00:19:23,200
if the media library javary is already

468
00:19:21,280 --> 00:19:24,320
ready we don't care we just execute the

469
00:19:23,200 --> 00:19:27,919
call

470
00:19:24,320 --> 00:19:31,439
otherwise we do just what i showed you

471
00:19:27,919 --> 00:19:32,080
we will start the launch a start call

472
00:19:31,440 --> 00:19:34,160
for the code

473
00:19:32,080 --> 00:19:36,159
for the media library and this coding

474
00:19:34,160 --> 00:19:38,240
will just suspend once

475
00:19:36,160 --> 00:19:39,280
the time for the library to being ready

476
00:19:38,240 --> 00:19:42,400
to be ready

477
00:19:39,280 --> 00:19:43,918
and then we we resume and we execute the

478
00:19:42,400 --> 00:19:46,720
call we wanted to do on the

479
00:19:43,919 --> 00:19:46,720
meter library

480
00:19:46,960 --> 00:19:52,960
this become this becomes really really

481
00:19:50,400 --> 00:19:55,600
simple to use

482
00:19:52,960 --> 00:19:56,960
it's been a very very complicated case

483
00:19:55,600 --> 00:20:00,240
before coatings

484
00:19:56,960 --> 00:20:00,880
and this is now a single line of code to

485
00:20:00,240 --> 00:20:03,760
just

486
00:20:00,880 --> 00:20:07,840
get a media whether the media library is

487
00:20:03,760 --> 00:20:07,840
ready or not

488
00:20:09,039 --> 00:20:12,960
so thank you if you want to know a bit

489
00:20:11,280 --> 00:20:16,799
more and more specific to

490
00:20:12,960 --> 00:20:20,080
android i invite you to come back at 1pm

491
00:20:16,799 --> 00:20:20,480
and i'll present you the flow ipr which

492
00:20:20,080 --> 00:20:23,039
is

493
00:20:20,480 --> 00:20:24,960
bright new too otherwise there are some

494
00:20:23,039 --> 00:20:35,039
links if you want to discover a bit more

495
00:20:24,960 --> 00:20:37,840
and thank you for listening

496
00:20:35,039 --> 00:20:37,840
other questions

497
00:20:45,919 --> 00:20:50,960
what can you get your slide okay where

498
00:20:49,039 --> 00:20:52,879
can we get your slide

499
00:20:50,960 --> 00:20:54,080
can we get these lights repeat the

500
00:20:52,880 --> 00:20:57,440
question

501
00:20:54,080 --> 00:21:00,080
where can we get this right ah okay um

502
00:20:57,440 --> 00:21:01,840
i i just had to prepare it really i post

503
00:21:00,080 --> 00:21:04,669
the slide url

504
00:21:01,840 --> 00:21:06,559
on the on the fosdem

505
00:21:04,670 --> 00:21:09,280
[Music]

506
00:21:06,559 --> 00:21:17,840
speaker also you have it in the app and

507
00:21:09,280 --> 00:21:17,840
on the website

508
00:21:18,799 --> 00:21:21,440
anyone else

509
00:21:23,440 --> 00:21:31,840
thank you very much

510
00:21:36,080 --> 00:21:38,158
you

