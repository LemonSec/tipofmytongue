1
00:00:06,799 --> 00:00:09,279
thank you

2
00:00:09,519 --> 00:00:12,639
thank you guys for having me i hope you

3
00:00:10,880 --> 00:00:15,120
guys are having a good foster

4
00:00:12,639 --> 00:00:17,520
um my name is mohammed osama and i'll be

5
00:00:15,120 --> 00:00:19,038
presenting gun rock which is our graph

6
00:00:17,520 --> 00:00:23,359
processing library

7
00:00:19,039 --> 00:00:25,359
built on gpus using cuda

8
00:00:23,359 --> 00:00:27,039
i'm a phd student at university of

9
00:00:25,359 --> 00:00:30,080
california

10
00:00:27,039 --> 00:00:30,480
working with professor john owens and i

11
00:00:30,080 --> 00:00:33,839
flew

12
00:00:30,480 --> 00:00:34,320
more than i think 14 hours to give this

13
00:00:33,840 --> 00:00:36,960
talk

14
00:00:34,320 --> 00:00:38,239
so let's hope it goes all uh so this is

15
00:00:36,960 --> 00:00:39,360
a link to the talk if

16
00:00:38,239 --> 00:00:40,959
you if you guys are interested in

17
00:00:39,360 --> 00:00:42,559
downloading it and following along i'll

18
00:00:40,960 --> 00:00:44,559
give you a second to like take a picture

19
00:00:42,559 --> 00:00:48,640
or something

20
00:00:44,559 --> 00:00:52,160
all right so just a second

21
00:00:48,640 --> 00:00:54,800
um so why use gpus for graph processing

22
00:00:52,160 --> 00:00:57,120
um i didn't feel the need to actually

23
00:00:54,800 --> 00:00:57,120
sort of

24
00:00:57,199 --> 00:01:00,800
uh give a motivation of why graphs are

25
00:00:59,440 --> 00:01:02,000
important because obviously you guys are

26
00:01:00,800 --> 00:01:05,518
in this dev room

27
00:01:02,000 --> 00:01:08,720
so maybe you care about graphs but

28
00:01:05,519 --> 00:01:11,760
why how can you use gpus to sort of do

29
00:01:08,720 --> 00:01:15,280
graph processing better or faster

30
00:01:11,760 --> 00:01:17,840
and how did we manage to do it well so

31
00:01:15,280 --> 00:01:19,600
graphs are everywhere gpus are nowadays

32
00:01:17,840 --> 00:01:22,880
everywhere as well your phones your

33
00:01:19,600 --> 00:01:26,000
laptops everything now has a gpu in it

34
00:01:22,880 --> 00:01:28,080
graphs require fast processing it its

35
00:01:26,000 --> 00:01:29,280
need within the memory and the compute

36
00:01:28,080 --> 00:01:32,158
that you'd require

37
00:01:29,280 --> 00:01:34,079
to do some graph analytics gpus sort of

38
00:01:32,159 --> 00:01:36,000
give that powerful

39
00:01:34,079 --> 00:01:37,119
memory bandwidth and computation

40
00:01:36,000 --> 00:01:39,600
together so it goes

41
00:01:37,119 --> 00:01:41,119
really well hand in hand graphs are

42
00:01:39,600 --> 00:01:42,640
becoming very very large

43
00:01:41,119 --> 00:01:44,159
there's billions and billions of edges

44
00:01:42,640 --> 00:01:45,920
and now in graphs nowadays within

45
00:01:44,159 --> 00:01:49,680
facebook and twitter

46
00:01:45,920 --> 00:01:51,759
um and yeah there's there's a need to

47
00:01:49,680 --> 00:01:53,200
process a really really really large

48
00:01:51,759 --> 00:01:55,600
data sets

49
00:01:53,200 --> 00:01:57,600
gpus however are not good at that we

50
00:01:55,600 --> 00:01:59,839
have a very limited amount of memory

51
00:01:57,600 --> 00:02:00,719
32 gigabyte i think is the most in an

52
00:01:59,840 --> 00:02:03,840
nvidia

53
00:02:00,719 --> 00:02:06,240
v100 um and i'll talk about how we

54
00:02:03,840 --> 00:02:08,399
handle some of that some of those issues

55
00:02:06,240 --> 00:02:10,318
um there's some irregular

56
00:02:08,399 --> 00:02:11,920
data access patterns within graphs which

57
00:02:10,318 --> 00:02:14,160
makes load balancing quite

58
00:02:11,920 --> 00:02:14,958
hard and a very really difficult problem

59
00:02:14,160 --> 00:02:17,760
to solve

60
00:02:14,959 --> 00:02:19,680
so writing high performance graph

61
00:02:17,760 --> 00:02:21,679
analytics and graph algorithms

62
00:02:19,680 --> 00:02:23,200
uh really require you to get load

63
00:02:21,680 --> 00:02:25,280
balancing right

64
00:02:23,200 --> 00:02:26,319
and that's really hard to do on gpus

65
00:02:25,280 --> 00:02:28,800
using cuda

66
00:02:26,319 --> 00:02:30,079
so we show um a way to solve that as

67
00:02:28,800 --> 00:02:33,120
well

68
00:02:30,080 --> 00:02:33,840
so what is gun rock a gun rock is a gpu

69
00:02:33,120 --> 00:02:35,599
based

70
00:02:33,840 --> 00:02:38,000
graph processing library like i already

71
00:02:35,599 --> 00:02:40,160
said which aims for performance

72
00:02:38,000 --> 00:02:43,680
state you can write state-of-the-art

73
00:02:40,160 --> 00:02:47,519
graph algorithms using our library

74
00:02:43,680 --> 00:02:48,400
it also aims for generality so it covers

75
00:02:47,519 --> 00:02:51,280
a broad range of

76
00:02:48,400 --> 00:02:52,879
graph algorithms and i'll give you a

77
00:02:51,280 --> 00:02:53,840
list of algorithms that we have already

78
00:02:52,879 --> 00:02:56,399
implemented and

79
00:02:53,840 --> 00:02:57,360
ways that you can implement your own

80
00:02:56,400 --> 00:03:01,120
graph algorithm

81
00:02:57,360 --> 00:03:03,599
so problems that you're interested in so

82
00:03:01,120 --> 00:03:05,680
programmability which is really cool

83
00:03:03,599 --> 00:03:07,440
because you can implement your own graph

84
00:03:05,680 --> 00:03:09,440
algorithms and then extend it to

85
00:03:07,440 --> 00:03:13,120
go from a single gpu to a multi gpu

86
00:03:09,440 --> 00:03:15,280
environment pretty easily using gunrock

87
00:03:13,120 --> 00:03:17,120
scalability so once again one of the

88
00:03:15,280 --> 00:03:18,400
problems was the how much memory you

89
00:03:17,120 --> 00:03:20,560
have available within

90
00:03:18,400 --> 00:03:22,080
a gpu is super limited but the graphs

91
00:03:20,560 --> 00:03:22,640
are really large so there has to be a

92
00:03:22,080 --> 00:03:25,200
way

93
00:03:22,640 --> 00:03:29,119
to sort of scale that and still see the

94
00:03:25,200 --> 00:03:29,119
performance that you'd need from a gpu

95
00:03:29,280 --> 00:03:33,840
to sort of start off where can you find

96
00:03:31,760 --> 00:03:36,319
gun rock gun rock is hosted on github

97
00:03:33,840 --> 00:03:38,319
for i think over three years now

98
00:03:36,319 --> 00:03:40,560
it's an open source project has a lot of

99
00:03:38,319 --> 00:03:44,000
commits a lot of contributors

100
00:03:40,560 --> 00:03:45,440
and really active and a lot of graduate

101
00:03:44,000 --> 00:03:48,080
students that work on it too

102
00:03:45,440 --> 00:03:50,400
so this is the link right here to the

103
00:03:48,080 --> 00:03:52,159
gun rocks website where we have our docs

104
00:03:50,400 --> 00:03:54,400
and link to the github page and all that

105
00:03:52,159 --> 00:03:54,400
stuff

106
00:03:54,879 --> 00:03:59,040
uh some of the open source sort of

107
00:03:56,799 --> 00:04:01,280
project workflow stuff

108
00:03:59,040 --> 00:04:03,439
we managed two branches on the main

109
00:04:01,280 --> 00:04:04,159
repository the master branch and the dev

110
00:04:03,439 --> 00:04:05,920
branch

111
00:04:04,159 --> 00:04:08,079
master branch is where all the releases

112
00:04:05,920 --> 00:04:09,920
happen the dev branch

113
00:04:08,080 --> 00:04:12,480
is where we push all the our development

114
00:04:09,920 --> 00:04:13,760
work a lot of it is done within forks of

115
00:04:12,480 --> 00:04:16,798
individual people

116
00:04:13,760 --> 00:04:18,478
individual graduate students and then it

117
00:04:16,798 --> 00:04:20,159
eventually gets merged into dev branch

118
00:04:18,478 --> 00:04:20,478
and which eventually sort of trickles up

119
00:04:20,160 --> 00:04:22,880
to

120
00:04:20,478 --> 00:04:26,960
the to a release in in a master branch

121
00:04:22,880 --> 00:04:29,440
it's hosted using apache 2.0 license

122
00:04:26,960 --> 00:04:30,719
we also provide code coverage using code

123
00:04:29,440 --> 00:04:33,919
cover i o

124
00:04:30,720 --> 00:04:36,560
central integration using jenkins

125
00:04:33,919 --> 00:04:37,840
and lots of documentation using a slate

126
00:04:36,560 --> 00:04:40,880
documentation

127
00:04:37,840 --> 00:04:41,599
for api and oxygen also for api and some

128
00:04:40,880 --> 00:04:43,680
of the

129
00:04:41,600 --> 00:04:45,520
performance results and stuff are hosted

130
00:04:43,680 --> 00:04:46,240
on slate so you can check that out as

131
00:04:45,520 --> 00:04:48,719
well

132
00:04:46,240 --> 00:04:50,400
um we have unit testing using google

133
00:04:48,720 --> 00:04:53,520
test which is really cool

134
00:04:50,400 --> 00:04:56,239
um and if you are interested in

135
00:04:53,520 --> 00:04:58,479
or you have any questions please give

136
00:04:56,240 --> 00:05:01,199
please

137
00:04:58,479 --> 00:05:01,919
post a github issue or if you want to

138
00:05:01,199 --> 00:05:04,000
contribute

139
00:05:01,919 --> 00:05:05,198
create a pull request there's someone

140
00:05:04,000 --> 00:05:06,639
there there will be someone that will

141
00:05:05,199 --> 00:05:08,960
review it or give you

142
00:05:06,639 --> 00:05:10,800
feedback on it and will be able to

143
00:05:08,960 --> 00:05:12,960
respond really quickly on that on that

144
00:05:10,800 --> 00:05:16,400
as well using github

145
00:05:12,960 --> 00:05:20,239
we prefer github over emails um

146
00:05:16,400 --> 00:05:22,080
so everything related to gun rock is

147
00:05:20,240 --> 00:05:23,840
open source and online

148
00:05:22,080 --> 00:05:25,758
there's no hidden development at all

149
00:05:23,840 --> 00:05:27,119
even our roadmap is online so you can go

150
00:05:25,759 --> 00:05:27,759
and check that out if you're interested

151
00:05:27,120 --> 00:05:29,280
in seeing

152
00:05:27,759 --> 00:05:31,280
what kind of research problems that

153
00:05:29,280 --> 00:05:34,080
we're trying to solve in future

154
00:05:31,280 --> 00:05:36,799
or working on right now or the kind of

155
00:05:34,080 --> 00:05:38,800
graph algorithms that we aim to write

156
00:05:36,800 --> 00:05:40,080
and some of the interesting hive stuff

157
00:05:38,800 --> 00:05:44,080
as well is um

158
00:05:40,080 --> 00:05:45,520
all on there um

159
00:05:44,080 --> 00:05:47,440
yeah so i talked about a lot of

160
00:05:45,520 --> 00:05:50,719
contributors bunch of commits

161
00:05:47,440 --> 00:05:54,320
um and uh and

162
00:05:50,720 --> 00:05:55,919
gun rock is also part of the nvidia gpu

163
00:05:54,320 --> 00:05:59,039
accelerated libraries

164
00:05:55,919 --> 00:06:01,039
um and also it's being worked into being

165
00:05:59,039 --> 00:06:02,639
integrated into the nvidia rapids

166
00:06:01,039 --> 00:06:03,919
framework which is a python framework

167
00:06:02,639 --> 00:06:06,560
that allows you to do

168
00:06:03,919 --> 00:06:08,479
uh data science and stuff so under uh

169
00:06:06,560 --> 00:06:10,160
underneath the hood it will use gun rock

170
00:06:08,479 --> 00:06:11,919
and some other graph frameworks provided

171
00:06:10,160 --> 00:06:13,840
by nvidia

172
00:06:11,919 --> 00:06:15,758
so let's actually see how everything

173
00:06:13,840 --> 00:06:18,719
works um

174
00:06:15,759 --> 00:06:20,240
i i heard some people hint towards sort

175
00:06:18,720 --> 00:06:21,919
of different graphics

176
00:06:20,240 --> 00:06:23,759
programming models there exist and graph

177
00:06:21,919 --> 00:06:25,840
abstractions that you can use

178
00:06:23,759 --> 00:06:27,680
uh gunrock relies on the data centric

179
00:06:25,840 --> 00:06:30,479
abstraction so vertex centric

180
00:06:27,680 --> 00:06:32,720
abstraction is another name for it

181
00:06:30,479 --> 00:06:33,599
and it uses both synchronous programming

182
00:06:32,720 --> 00:06:37,600
models so what is

183
00:06:33,600 --> 00:06:40,960
what does those two words actually mean

184
00:06:37,600 --> 00:06:43,280
um so when i say data centric we have

185
00:06:40,960 --> 00:06:44,880
notion of a frontier where a frontier is

186
00:06:43,280 --> 00:06:46,799
just a group of vertices

187
00:06:44,880 --> 00:06:48,080
or edges so if you have your entire

188
00:06:46,800 --> 00:06:50,720
graph you just create

189
00:06:48,080 --> 00:06:52,639
a frontier using a subset of those nodes

190
00:06:50,720 --> 00:06:53,360
or maybe an entire graph gets put into a

191
00:06:52,639 --> 00:06:55,680
frontier

192
00:06:53,360 --> 00:06:57,599
and then you process your whatever

193
00:06:55,680 --> 00:06:59,120
algorithm you're trying to write on this

194
00:06:57,599 --> 00:07:00,800
frontier you don't have the notion of

195
00:06:59,120 --> 00:07:04,720
the entire graph anymore so everything

196
00:07:00,800 --> 00:07:07,840
works on a on a frontier moving forward

197
00:07:04,720 --> 00:07:09,520
you um have parallel operators this is

198
00:07:07,840 --> 00:07:12,880
what you use to actually do

199
00:07:09,520 --> 00:07:15,198
work on that frontier um we have some of

200
00:07:12,880 --> 00:07:16,000
our parallel operators but you're free

201
00:07:15,199 --> 00:07:19,199
to write your own

202
00:07:16,000 --> 00:07:21,199
as well these are really high-performant

203
00:07:19,199 --> 00:07:23,680
cuda implementations this is where all

204
00:07:21,199 --> 00:07:25,919
the engineering goes into

205
00:07:23,680 --> 00:07:27,120
so some of the examples i have on the

206
00:07:25,919 --> 00:07:29,120
left side are advanced

207
00:07:27,120 --> 00:07:30,160
filter for intersection neighborhood use

208
00:07:29,120 --> 00:07:31,759
and a lot more

209
00:07:30,160 --> 00:07:33,440
so an example would be advanced where

210
00:07:31,759 --> 00:07:35,520
advance will take a frontier an

211
00:07:33,440 --> 00:07:37,039
input frontier and then it will generate

212
00:07:35,520 --> 00:07:37,758
new frontier by visiting all the

213
00:07:37,039 --> 00:07:40,560
neighbors

214
00:07:37,759 --> 00:07:40,960
so in the in the action of visiting the

215
00:07:40,560 --> 00:07:42,800
uh

216
00:07:40,960 --> 00:07:44,080
the neighbors you have access to all of

217
00:07:42,800 --> 00:07:46,400
the neighbors

218
00:07:44,080 --> 00:07:47,520
off the of a given node or something and

219
00:07:46,400 --> 00:07:49,280
then you can perform

220
00:07:47,520 --> 00:07:50,878
all sorts of different operations on

221
00:07:49,280 --> 00:07:52,479
that node and i'll give an example a

222
00:07:50,879 --> 00:07:54,160
concrete example of where advance is

223
00:07:52,479 --> 00:07:55,919
used

224
00:07:54,160 --> 00:07:57,680
filter as the name suggests it just

225
00:07:55,919 --> 00:07:59,120
filters stuff out so you have an

226
00:07:57,680 --> 00:08:01,360
input frontier and you use some

227
00:07:59,120 --> 00:08:02,879
condition to filter some vertices out

228
00:08:01,360 --> 00:08:04,080
and you have a resulting frontier that's

229
00:08:02,879 --> 00:08:06,879
smaller than maybe

230
00:08:04,080 --> 00:08:08,000
the input frontier that you put in and a

231
00:08:06,879 --> 00:08:10,000
lot for a lot of

232
00:08:08,000 --> 00:08:11,199
documentation is available for available

233
00:08:10,000 --> 00:08:13,039
for all the other

234
00:08:11,199 --> 00:08:16,639
operators that there are and there's

235
00:08:13,039 --> 00:08:18,400
some that i don't mention here as well

236
00:08:16,639 --> 00:08:20,080
so what is the bulk synchronous

237
00:08:18,400 --> 00:08:24,080
programming side of things

238
00:08:20,080 --> 00:08:27,359
um so the operators in themselves are

239
00:08:24,080 --> 00:08:29,280
highly parallel and they run on gpu

240
00:08:27,360 --> 00:08:30,400
and how you write algorithms is you

241
00:08:29,280 --> 00:08:32,399
couple these

242
00:08:30,400 --> 00:08:34,399
operators together in sort of a bulk

243
00:08:32,399 --> 00:08:35,440
synchronous way so this is one operator

244
00:08:34,399 --> 00:08:37,279
you might have

245
00:08:35,440 --> 00:08:39,440
another one after that another one after

246
00:08:37,279 --> 00:08:41,679
that and so on and then you run this

247
00:08:39,440 --> 00:08:43,120
in this in a serial loop so you perform

248
00:08:41,679 --> 00:08:45,359
this in a serial loop so after

249
00:08:43,120 --> 00:08:46,880
every operation operator runs there's a

250
00:08:45,360 --> 00:08:48,800
synchronization call

251
00:08:46,880 --> 00:08:50,640
and that synchronize synchronizes the

252
00:08:48,800 --> 00:08:52,800
entire data flow and sort of

253
00:08:50,640 --> 00:08:54,000
makes that knowledge available to every

254
00:08:52,800 --> 00:08:56,959
uh processing unit

255
00:08:54,000 --> 00:08:57,600
or whatever you want to call a cuda core

256
00:08:56,959 --> 00:08:59,439
too

257
00:08:57,600 --> 00:09:03,279
and then all of this runs in a serial

258
00:08:59,440 --> 00:09:03,279
loop until your algorithm converges

259
00:09:04,399 --> 00:09:08,000
so these are the kind of algorithms that

260
00:09:06,720 --> 00:09:11,120
we currently support there's

261
00:09:08,000 --> 00:09:12,640
some that are being worked on and um

262
00:09:11,120 --> 00:09:14,399
so we have some of the traditional

263
00:09:12,640 --> 00:09:16,160
algorithms like connected component

264
00:09:14,399 --> 00:09:18,080
breadth breadth first search page rank

265
00:09:16,160 --> 00:09:20,240
is somewhere in there too

266
00:09:18,080 --> 00:09:21,360
ssp is there to single source shortest

267
00:09:20,240 --> 00:09:23,519
path and there

268
00:09:21,360 --> 00:09:24,560
then there we also have some more

269
00:09:23,519 --> 00:09:26,720
complicated

270
00:09:24,560 --> 00:09:28,000
um applications which require other

271
00:09:26,720 --> 00:09:29,839
algorithms to work so

272
00:09:28,000 --> 00:09:32,000
graph trend filtering is one of them

273
00:09:29,839 --> 00:09:33,760
which requires max flow as is one of its

274
00:09:32,000 --> 00:09:34,880
components to really perform the whole

275
00:09:33,760 --> 00:09:37,600
application

276
00:09:34,880 --> 00:09:39,200
um another one is shared nearest

277
00:09:37,600 --> 00:09:41,120
neighbor which is a clustering algorithm

278
00:09:39,200 --> 00:09:43,200
that requires k nearest neighbors

279
00:09:41,120 --> 00:09:44,320
which is somewhere in here for it to

280
00:09:43,200 --> 00:09:46,399
work

281
00:09:44,320 --> 00:09:47,440
so there's some really concrete real

282
00:09:46,399 --> 00:09:49,760
world examples

283
00:09:47,440 --> 00:09:51,600
and some textbook algorithms that you

284
00:09:49,760 --> 00:09:53,760
can use to couple those together

285
00:09:51,600 --> 00:09:55,519
or you can couple different operators to

286
00:09:53,760 --> 00:09:57,360
get together to write your own graph

287
00:09:55,519 --> 00:10:01,440
algorithm

288
00:09:57,360 --> 00:10:05,600
all working on in parallel on the gpu

289
00:10:01,440 --> 00:10:08,320
um i also have an example application

290
00:10:05,600 --> 00:10:09,680
i tried to sort of simplify this code as

291
00:10:08,320 --> 00:10:12,560
much as i could

292
00:10:09,680 --> 00:10:14,319
but i'll go and quickly explain what

293
00:10:12,560 --> 00:10:17,359
each of those line means

294
00:10:14,320 --> 00:10:19,120
so the first step to implement any

295
00:10:17,360 --> 00:10:20,560
algorithm in gun rock will be to

296
00:10:19,120 --> 00:10:23,920
actually implement the

297
00:10:20,560 --> 00:10:25,518
lambdas of the lambda functions of the

298
00:10:23,920 --> 00:10:27,120
uh operator that that you're going to

299
00:10:25,519 --> 00:10:29,040
write so what lambdas

300
00:10:27,120 --> 00:10:30,480
see these are c plus plus lambdas the

301
00:10:29,040 --> 00:10:33,279
entire library is written in c

302
00:10:30,480 --> 00:10:34,079
plus plus uh and cuda so what lambdas

303
00:10:33,279 --> 00:10:36,959
allow you to do

304
00:10:34,079 --> 00:10:38,880
is have the generality of like doing

305
00:10:36,959 --> 00:10:41,119
anything within a function so it's

306
00:10:38,880 --> 00:10:43,439
basically a user defined function

307
00:10:41,120 --> 00:10:45,040
say you wanted to do a traditional

308
00:10:43,440 --> 00:10:47,120
advanced operator in gun rock

309
00:10:45,040 --> 00:10:48,319
but you also wanted to attach some sort

310
00:10:47,120 --> 00:10:51,519
of notion to it

311
00:10:48,320 --> 00:10:54,160
some sort of um some sort of like

312
00:10:51,519 --> 00:10:56,320
computation attached to it uh in this

313
00:10:54,160 --> 00:10:58,000
example in a single source shortest path

314
00:10:56,320 --> 00:10:59,680
the algorithm is quite simple you have a

315
00:10:58,000 --> 00:11:01,600
single source and you want to find

316
00:10:59,680 --> 00:11:03,760
the shortest path to all the other nodes

317
00:11:01,600 --> 00:11:04,959
in the graph so you cue a frontier with

318
00:11:03,760 --> 00:11:06,959
that single node

319
00:11:04,959 --> 00:11:08,160
and then you basically do in advance so

320
00:11:06,959 --> 00:11:09,760
that's why you need the advanced

321
00:11:08,160 --> 00:11:11,519
operator you visit its neighbors and

322
00:11:09,760 --> 00:11:13,600
then you visit the neighbors neighbors

323
00:11:11,519 --> 00:11:15,360
and you build this frontier of neighbors

324
00:11:13,600 --> 00:11:18,480
and neighbors and neighbors

325
00:11:15,360 --> 00:11:19,600
over multiple iterations and then you

326
00:11:18,480 --> 00:11:22,720
calculate

327
00:11:19,600 --> 00:11:25,200
the shortest distance to that node given

328
00:11:22,720 --> 00:11:27,040
a source node so you take the distance

329
00:11:25,200 --> 00:11:27,360
of the source node that's the first line

330
00:11:27,040 --> 00:11:29,680
so

331
00:11:27,360 --> 00:11:31,519
auto distance equals distance of the

332
00:11:29,680 --> 00:11:32,560
vertex id the work the source that

333
00:11:31,519 --> 00:11:34,320
you're working on

334
00:11:32,560 --> 00:11:36,719
plus the weight of the edge id so the

335
00:11:34,320 --> 00:11:39,120
weight on the edge uh going to a

336
00:11:36,720 --> 00:11:39,839
neighbor or uh yeah going to a neighbor

337
00:11:39,120 --> 00:11:41,920
um

338
00:11:39,839 --> 00:11:44,000
and then you find the minimum between

339
00:11:41,920 --> 00:11:45,680
that and the existing distance that was

340
00:11:44,000 --> 00:11:47,680
in the source node and if it is the

341
00:11:45,680 --> 00:11:50,479
minimum the predecessor is set

342
00:11:47,680 --> 00:11:52,638
to the neighbor node and you move on if

343
00:11:50,480 --> 00:11:54,880
a shortest distance is found you'll need

344
00:11:52,639 --> 00:11:56,720
some way of removing that vertex

345
00:11:54,880 --> 00:11:58,160
from the frontier otherwise the

346
00:11:56,720 --> 00:11:59,360
algorithm won't terminate because the

347
00:11:58,160 --> 00:12:01,519
frontier is

348
00:11:59,360 --> 00:12:03,120
is completely full and you keep doing it

349
00:12:01,519 --> 00:12:05,120
so it will be an infinite loop

350
00:12:03,120 --> 00:12:06,639
so you need some way of removing nodes

351
00:12:05,120 --> 00:12:08,480
that are already

352
00:12:06,639 --> 00:12:10,480
that already found their shortest

353
00:12:08,480 --> 00:12:11,040
neighbors so that's what a filter lambda

354
00:12:10,480 --> 00:12:12,959
does

355
00:12:11,040 --> 00:12:14,639
it's basically saying if it's still

356
00:12:12,959 --> 00:12:16,880
valid um

357
00:12:14,639 --> 00:12:19,120
keep keep it in the frontier otherwise

358
00:12:16,880 --> 00:12:22,480
remove it remove it from the frontier

359
00:12:19,120 --> 00:12:23,040
so lambdas are are great abstraction to

360
00:12:22,480 --> 00:12:26,079
basically

361
00:12:23,040 --> 00:12:27,680
allow users to write their own

362
00:12:26,079 --> 00:12:29,279
computation within this

363
00:12:27,680 --> 00:12:31,519
and you can imagine using the same

364
00:12:29,279 --> 00:12:33,200
operators with different lambdas

365
00:12:31,519 --> 00:12:35,760
to implement a different algorithm

366
00:12:33,200 --> 00:12:37,360
entirely one of the recent ones that i

367
00:12:35,760 --> 00:12:40,000
did was graph coloring

368
00:12:37,360 --> 00:12:42,160
where i used uh four lambda or you can

369
00:12:40,000 --> 00:12:45,680
even use a filter for that

370
00:12:42,160 --> 00:12:48,160
and graph coloring requires is basic

371
00:12:45,680 --> 00:12:49,359
is basically a problem where you want to

372
00:12:48,160 --> 00:12:51,760
color

373
00:12:49,360 --> 00:12:52,480
different nodes with different colors if

374
00:12:51,760 --> 00:12:55,040
they share an

375
00:12:52,480 --> 00:12:55,519
edge um and you can write that all

376
00:12:55,040 --> 00:12:58,240
within

377
00:12:55,519 --> 00:12:59,839
a filter operator but with a different

378
00:12:58,240 --> 00:13:02,000
lambda and all of those examples are

379
00:12:59,839 --> 00:13:03,600
online for you to see

380
00:13:02,000 --> 00:13:05,200
so once you've written the lambdas down

381
00:13:03,600 --> 00:13:06,720
once you have actually expressed your

382
00:13:05,200 --> 00:13:09,760
algorithm

383
00:13:06,720 --> 00:13:11,760
you launch it and this is just

384
00:13:09,760 --> 00:13:15,040
a while loop while the frontier is not

385
00:13:11,760 --> 00:13:18,240
empty keep running

386
00:13:15,040 --> 00:13:18,880
keep running the advance operator with

387
00:13:18,240 --> 00:13:21,200
the advanced

388
00:13:18,880 --> 00:13:22,720
operator uh lambda and the filter

389
00:13:21,200 --> 00:13:24,560
operator lambda so you provide the

390
00:13:22,720 --> 00:13:26,560
lambdas and you keep running it

391
00:13:24,560 --> 00:13:27,839
until the algorithm converges until the

392
00:13:26,560 --> 00:13:30,880
printer filter

393
00:13:27,839 --> 00:13:33,519
frontier is empty um

394
00:13:30,880 --> 00:13:34,399
and that's basically all i have um these

395
00:13:33,519 --> 00:13:37,519
are

396
00:13:34,399 --> 00:13:39,360
some of the uh grants that we have that

397
00:13:37,519 --> 00:13:40,880
allow us to do this amazing research and

398
00:13:39,360 --> 00:13:43,760
i thank you guys for listening

399
00:13:40,880 --> 00:13:45,120
um left a few a lot of time for

400
00:13:43,760 --> 00:13:49,839
questions i think

401
00:13:45,120 --> 00:13:49,839
okay thanks

402
00:14:01,040 --> 00:14:05,920
yeah so um on the web so

403
00:14:04,240 --> 00:14:07,600
uh the question was do we have any

404
00:14:05,920 --> 00:14:07,920
benchmark where we compare our results

405
00:14:07,600 --> 00:14:10,560
to

406
00:14:07,920 --> 00:14:13,120
other stuff that's being done um yes

407
00:14:10,560 --> 00:14:15,518
they we have online we have a

408
00:14:13,120 --> 00:14:17,519
web page of evaluation where we compare

409
00:14:15,519 --> 00:14:20,399
against different graph frameworks and

410
00:14:17,519 --> 00:14:21,360
uh on some of the famous data sets and

411
00:14:20,399 --> 00:14:23,680
one of the recent

412
00:14:21,360 --> 00:14:24,560
uh performance evaluation that i've

413
00:14:23,680 --> 00:14:27,359
performed run

414
00:14:24,560 --> 00:14:28,160
runs over 74 different data sets which

415
00:14:27,360 --> 00:14:30,000
includes

416
00:14:28,160 --> 00:14:32,079
anywhere from like the twitter data sets

417
00:14:30,000 --> 00:14:34,560
social networks road networks

418
00:14:32,079 --> 00:14:37,199
uh some of the structured data sets the

419
00:14:34,560 --> 00:14:38,880
rgd the randomly generated graphs

420
00:14:37,199 --> 00:14:40,959
so anything you can imagine in sort of

421
00:14:38,880 --> 00:14:42,880
the graph analytics world we have

422
00:14:40,959 --> 00:14:44,000
a data set for that and a test for that

423
00:14:42,880 --> 00:14:49,040
yeah

424
00:14:44,000 --> 00:14:53,440
yeah yes how do you know the graph

425
00:14:49,040 --> 00:14:56,480
so that's a good question so we uh use

426
00:14:53,440 --> 00:14:59,600
okay uh how do we load the graph so

427
00:14:56,480 --> 00:15:00,560
we have we take matrix market format as

428
00:14:59,600 --> 00:15:03,040
an input

429
00:15:00,560 --> 00:15:04,319
um and then we have underlying graph

430
00:15:03,040 --> 00:15:07,120
representations which

431
00:15:04,320 --> 00:15:08,000
are the common ones like csr compressed

432
00:15:07,120 --> 00:15:10,240
sparse row

433
00:15:08,000 --> 00:15:11,360
csc which is compressed parse column

434
00:15:10,240 --> 00:15:15,360
coordinate format

435
00:15:11,360 --> 00:15:17,360
c-o-o um and we also have a graph

436
00:15:15,360 --> 00:15:18,800
representation which you can plug your

437
00:15:17,360 --> 00:15:21,440
own graph representation in

438
00:15:18,800 --> 00:15:22,160
and then define that under our graph

439
00:15:21,440 --> 00:15:24,399
data struct

440
00:15:22,160 --> 00:15:26,319
and we'll be good to use that going

441
00:15:24,399 --> 00:15:27,279
forward yeah so currently we support

442
00:15:26,320 --> 00:15:29,519
three

443
00:15:27,279 --> 00:15:32,079
and there's some work being done by

444
00:15:29,519 --> 00:15:35,920
rapids folk at nvidia to support

445
00:15:32,079 --> 00:15:37,120
uh the i think uh the apache arrow

446
00:15:35,920 --> 00:15:38,959
format within

447
00:15:37,120 --> 00:15:41,839
uh gun rock and within their framework

448
00:15:38,959 --> 00:15:41,839
as well

449
00:15:58,160 --> 00:16:01,199
so the frontier itself when it's built

450
00:16:00,399 --> 00:16:02,880
it's exact

451
00:16:01,199 --> 00:16:04,800
so you know what you put into the

452
00:16:02,880 --> 00:16:07,759
frontier to start off with

453
00:16:04,800 --> 00:16:08,319
but when you do operations like advance

454
00:16:07,759 --> 00:16:11,040
there's

455
00:16:08,320 --> 00:16:11,600
a policies that lets you determine is it

456
00:16:11,040 --> 00:16:14,480
uh

457
00:16:11,600 --> 00:16:15,199
is it an approximate deduplication or a

458
00:16:14,480 --> 00:16:17,199
complete

459
00:16:15,199 --> 00:16:19,040
deduplication where you'd remove any

460
00:16:17,199 --> 00:16:20,319
duplicate neighbors that you found in

461
00:16:19,040 --> 00:16:22,000
parallel

462
00:16:20,320 --> 00:16:23,360
or you might want to keep them for

463
00:16:22,000 --> 00:16:23,920
certain algorithms where it doesn't

464
00:16:23,360 --> 00:16:25,600
matter

465
00:16:23,920 --> 00:16:27,759
which will perform much faster because

466
00:16:25,600 --> 00:16:30,320
you don't have to do a synchronization

467
00:16:27,759 --> 00:16:31,519
and a deduplication of some sort uh so

468
00:16:30,320 --> 00:16:34,959
there's support for both

469
00:16:31,519 --> 00:16:37,199
so you can do approximate frontier

470
00:16:34,959 --> 00:16:38,160
handling or something or you could go

471
00:16:37,199 --> 00:16:41,920
aggressive and

472
00:16:38,160 --> 00:16:43,759
do exact yes have you found any

473
00:16:41,920 --> 00:16:47,120
algorithm any functions for which

474
00:16:43,759 --> 00:16:49,680
the gpu is slower than the cpu uh one of

475
00:16:47,120 --> 00:16:52,079
the ones is actually max flow

476
00:16:49,680 --> 00:16:54,160
so graph trend filtering is uses max

477
00:16:52,079 --> 00:16:56,160
flow and max flow we found that there's

478
00:16:54,160 --> 00:16:59,360
a cpu algorithm that

479
00:16:56,160 --> 00:17:01,759
that just maps so much better and it's

480
00:16:59,360 --> 00:17:03,199
not transferable to a gpu environment

481
00:17:01,759 --> 00:17:05,360
it's not parallelizable

482
00:17:03,199 --> 00:17:07,119
so the ones we the one we use i think

483
00:17:05,359 --> 00:17:10,319
it's the admins carp or

484
00:17:07,119 --> 00:17:12,479
push relabel max flow and

485
00:17:10,319 --> 00:17:13,520
it just doesn't do as well as we'd want

486
00:17:12,480 --> 00:17:15,120
it to be but there's

487
00:17:13,520 --> 00:17:17,520
a student working on some research and

488
00:17:15,119 --> 00:17:18,879
developing a maxwell algorithm for that

489
00:17:17,520 --> 00:17:19,760
but that's one example that comes to

490
00:17:18,880 --> 00:17:25,520
mind

491
00:17:19,760 --> 00:17:25,520
so yes

492
00:17:28,799 --> 00:17:33,039
because it's like you have to spend you

493
00:17:30,799 --> 00:17:33,039
have to

494
00:17:36,000 --> 00:17:42,880
right so the question is about low

495
00:17:39,440 --> 00:17:44,720
memory uh availability within

496
00:17:42,880 --> 00:17:49,039
gpus and you obviously need like a

497
00:17:44,720 --> 00:17:51,600
high-end v100 to get the maximum 32 gigs

498
00:17:49,039 --> 00:17:53,039
so what we also have is support for

499
00:17:51,600 --> 00:17:56,240
unified

500
00:17:53,039 --> 00:17:58,400
virtual memory which is a cuda uvm

501
00:17:56,240 --> 00:18:01,440
driver that allows you to manage

502
00:17:58,400 --> 00:18:03,919
memory through cpu by page faulting

503
00:18:01,440 --> 00:18:05,039
so your graph will essentially you load

504
00:18:03,919 --> 00:18:07,360
as much as you can

505
00:18:05,039 --> 00:18:08,559
on the gpu and the rest of it is page

506
00:18:07,360 --> 00:18:10,080
faulted as needed

507
00:18:08,559 --> 00:18:13,039
but you can imagine that will have a

508
00:18:10,080 --> 00:18:15,678
huge performance penalty

509
00:18:13,039 --> 00:18:17,360
depending on how many page faults there

510
00:18:15,679 --> 00:18:20,640
are and how you're doing them

511
00:18:17,360 --> 00:18:22,639
um there's also a multi-gpu environment

512
00:18:20,640 --> 00:18:26,320
so you could buy maybe cheap cards

513
00:18:22,640 --> 00:18:27,840
and use the multi-gpu aspect of gun rock

514
00:18:26,320 --> 00:18:29,840
which is sort of hidden away from the

515
00:18:27,840 --> 00:18:31,678
user which allows you to

516
00:18:29,840 --> 00:18:33,120
do the same algorithm in a multi-gp

517
00:18:31,679 --> 00:18:34,799
environment with now more

518
00:18:33,120 --> 00:18:36,080
more memory available but obviously

519
00:18:34,799 --> 00:18:39,039
you'll have to spend money on buying

520
00:18:36,080 --> 00:18:39,039
more gps for that

521
00:18:39,919 --> 00:18:43,280
i have a question yes you showed the

522
00:18:41,919 --> 00:18:46,080
sssp example

523
00:18:43,280 --> 00:18:47,678
um and you use these uh the values the

524
00:18:46,080 --> 00:18:49,678
input values for the lambda to store the

525
00:18:47,679 --> 00:18:51,360
result distances and the weights

526
00:18:49,679 --> 00:18:52,880
yes what are the constraints on those

527
00:18:51,360 --> 00:18:56,399
data structures can i

528
00:18:52,880 --> 00:18:58,240
basically pick a generic value or is it

529
00:18:56,400 --> 00:18:59,440
so that can be anything that can be

530
00:18:58,240 --> 00:19:02,320
literally anything so c

531
00:18:59,440 --> 00:19:04,320
plus plus lambda allows you to capture

532
00:19:02,320 --> 00:19:06,480
any of the variables that you'd like

533
00:19:04,320 --> 00:19:07,520
uh so that those square brackets are the

534
00:19:06,480 --> 00:19:09,280
actual capture

535
00:19:07,520 --> 00:19:11,520
where you can capture the data you're

536
00:19:09,280 --> 00:19:12,639
working with so if it's an array it can

537
00:19:11,520 --> 00:19:16,080
be a float or

538
00:19:12,640 --> 00:19:17,600
double or int or whatever and it's

539
00:19:16,080 --> 00:19:19,520
all the entire gunrock library is

540
00:19:17,600 --> 00:19:21,760
templated so it supports

541
00:19:19,520 --> 00:19:23,039
any of the data types that you'd like or

542
00:19:21,760 --> 00:19:25,600
you'd want to do

543
00:19:23,039 --> 00:19:27,039
um the i forgot to mention the sort of

544
00:19:25,600 --> 00:19:29,360
parentheses there with the dot

545
00:19:27,039 --> 00:19:30,400
dot it's uh i sort of simplified that

546
00:19:29,360 --> 00:19:32,559
for the slide but

547
00:19:30,400 --> 00:19:34,400
it's the signature of the lambda that

548
00:19:32,559 --> 00:19:36,080
stays the same no matter what

549
00:19:34,400 --> 00:19:38,480
uh so it's basically copy pasted from

550
00:19:36,080 --> 00:19:40,879
the api which provides you

551
00:19:38,480 --> 00:19:42,720
access to the vertex id and the edge id

552
00:19:40,880 --> 00:19:47,760
because that's how you get those

553
00:19:42,720 --> 00:19:49,600
yeah yes any more questions

554
00:19:47,760 --> 00:19:51,840
what about graphic bearings i saw that

555
00:19:49,600 --> 00:19:55,280
you have glass

556
00:19:51,840 --> 00:19:56,399
uh so i'm not the person that's working

557
00:19:55,280 --> 00:19:59,918
on graph embeddings

558
00:19:56,400 --> 00:20:03,120
but you can have any sort of

559
00:19:59,919 --> 00:20:05,120
data struct or struct attached to node

560
00:20:03,120 --> 00:20:06,959
labels or edge labels and then you pass

561
00:20:05,120 --> 00:20:07,918
it in in the same way and capture it

562
00:20:06,960 --> 00:20:11,440
within the lambda

563
00:20:07,919 --> 00:20:12,880
and you should be able to uh

564
00:20:11,440 --> 00:20:14,880
you should be able to work on it that's

565
00:20:12,880 --> 00:20:21,840
my 20 minutes okay let's

566
00:20:14,880 --> 00:20:21,840
thank the speaker

567
00:20:22,880 --> 00:20:24,960
you

