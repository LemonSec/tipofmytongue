1
00:00:05,440 --> 00:00:09,120
okay sorry about that

2
00:00:06,480 --> 00:00:10,000
so hi my name is skyler um so i'm a

3
00:00:09,120 --> 00:00:12,000
developer of

4
00:00:10,000 --> 00:00:13,440
a new hardware description language

5
00:00:12,000 --> 00:00:14,480
called chisel and also related to a

6
00:00:13,440 --> 00:00:15,678
thing called fertile

7
00:00:14,480 --> 00:00:17,760
but what i'm going to be talking about

8
00:00:15,679 --> 00:00:19,760
today is about how to build

9
00:00:17,760 --> 00:00:20,880
accelerators for the accelerator socket

10
00:00:19,760 --> 00:00:23,199
that esp or that

11
00:00:20,880 --> 00:00:24,720
luca was just talking about for esp

12
00:00:23,199 --> 00:00:26,240
about trying to use like all the power

13
00:00:24,720 --> 00:00:26,799
of like software engineering to make it

14
00:00:26,240 --> 00:00:28,840
like

15
00:00:26,800 --> 00:00:30,240
dead simple for people to build

16
00:00:28,840 --> 00:00:32,079
accelerators

17
00:00:30,240 --> 00:00:33,519
okay so this is sort of like a classic

18
00:00:32,079 --> 00:00:34,399
like academic slide that's basically

19
00:00:33,520 --> 00:00:35,920
just saying that

20
00:00:34,399 --> 00:00:37,680
accelerators are important because we're

21
00:00:35,920 --> 00:00:39,120
in this sort of end of moore's law era

22
00:00:37,680 --> 00:00:40,399
and so one thing you can always do to

23
00:00:39,120 --> 00:00:42,320
get a lot more performance is go and

24
00:00:40,399 --> 00:00:44,239
build accelerators

25
00:00:42,320 --> 00:00:45,600
however with sort of one caveat from

26
00:00:44,239 --> 00:00:46,320
like a pretty cool paper it was just

27
00:00:45,600 --> 00:00:47,520
saying that

28
00:00:46,320 --> 00:00:49,520
the big benefits you get from

29
00:00:47,520 --> 00:00:51,440
accelerators are sort of one time

30
00:00:49,520 --> 00:00:53,199
it's not about like iterating on the oh

31
00:00:51,440 --> 00:00:53,680
right we got uh dave wentz left in the

32
00:00:53,199 --> 00:00:55,360
room

33
00:00:53,680 --> 00:00:56,480
so basically just saying that like hey

34
00:00:55,360 --> 00:00:57,920
if you want to build an accelerator

35
00:00:56,480 --> 00:01:00,879
you're probably need a big benefit going

36
00:00:57,920 --> 00:01:03,680
from cpu to accelerator thanks palmer

37
00:01:00,879 --> 00:01:05,039
but after that so basically just the

38
00:01:03,680 --> 00:01:06,320
design is important you want to make it

39
00:01:05,040 --> 00:01:08,240
easy for people to build accelerators

40
00:01:06,320 --> 00:01:10,399
and do it fast

41
00:01:08,240 --> 00:01:11,839
okay so but usually i like to think

42
00:01:10,400 --> 00:01:12,960
about things in terms of like type

43
00:01:11,840 --> 00:01:14,880
hierarchies

44
00:01:12,960 --> 00:01:16,000
so really what we're concerned with at

45
00:01:14,880 --> 00:01:17,119
this point are loosely coupled

46
00:01:16,000 --> 00:01:18,320
accelerators

47
00:01:17,119 --> 00:01:20,000
as opposed to tightly coupled

48
00:01:18,320 --> 00:01:21,279
accelerators so something like cmd

49
00:01:20,000 --> 00:01:22,240
instructions you might add to a

50
00:01:21,280 --> 00:01:24,320
processor

51
00:01:22,240 --> 00:01:25,759
this is like something that's like a

52
00:01:24,320 --> 00:01:27,039
fixed function accelerator something

53
00:01:25,759 --> 00:01:28,400
that you would think about you have a c

54
00:01:27,040 --> 00:01:29,600
function you want to go and build an

55
00:01:28,400 --> 00:01:31,439
accelerator that's going to go and

56
00:01:29,600 --> 00:01:33,600
accelerate that c function

57
00:01:31,439 --> 00:01:34,960
so in this case things like like a fast

58
00:01:33,600 --> 00:01:36,399
fourier transform

59
00:01:34,960 --> 00:01:38,240
or the model that you would have for

60
00:01:36,400 --> 00:01:39,520
something like a gpu where you do like a

61
00:01:38,240 --> 00:01:42,079
cuda mem copy

62
00:01:39,520 --> 00:01:42,960
over to the you know a gpu you then go

63
00:01:42,079 --> 00:01:44,398
and run some core

64
00:01:42,960 --> 00:01:46,158
you go and run some kernel on it and

65
00:01:44,399 --> 00:01:47,759
then do a cuda mim copy back

66
00:01:46,159 --> 00:01:50,479
or stuff like a neural network you know

67
00:01:47,759 --> 00:01:52,399
i have a neural network and i have

68
00:01:50,479 --> 00:01:53,520
an image and i want to classify it or

69
00:01:52,399 --> 00:01:55,360
something like that

70
00:01:53,520 --> 00:01:56,560
so this is sort of the restricting the

71
00:01:55,360 --> 00:01:58,719
domain of the problem that then we're

72
00:01:56,560 --> 00:02:01,280
talking about here

73
00:01:58,719 --> 00:02:02,798
and just to sort of concretize that um

74
00:02:01,280 --> 00:02:03,439
this is sort of just like an example

75
00:02:02,799 --> 00:02:06,320
like

76
00:02:03,439 --> 00:02:08,079
toy timing diagram of an accelerator

77
00:02:06,320 --> 00:02:10,959
that is just doing a

78
00:02:08,080 --> 00:02:11,920
computing the sum of all the memory or

79
00:02:10,959 --> 00:02:14,879
computing the sum

80
00:02:11,920 --> 00:02:15,599
of uh an array in memory and what that

81
00:02:14,879 --> 00:02:17,040
looks like

82
00:02:15,599 --> 00:02:19,440
is you start off at the top and there's

83
00:02:17,040 --> 00:02:22,480
some configuration you're saying hey man

84
00:02:19,440 --> 00:02:25,920
go look at address hex0 or hex

85
00:02:22,480 --> 00:02:27,599
a it's a vector of size 3

86
00:02:25,920 --> 00:02:29,599
and i want you to compute the sum and

87
00:02:27,599 --> 00:02:31,200
write the output to address b

88
00:02:29,599 --> 00:02:33,440
so that happens the accelerator says

89
00:02:31,200 --> 00:02:34,399
okay i'm working it goes off and does a

90
00:02:33,440 --> 00:02:37,280
dma request

91
00:02:34,400 --> 00:02:39,280
onto address a goes and grabs that data

92
00:02:37,280 --> 00:02:40,640
the data comes back over multiple cycles

93
00:02:39,280 --> 00:02:41,440
here you're seeing that with one two

94
00:02:40,640 --> 00:02:43,440
three

95
00:02:41,440 --> 00:02:45,920
the accelerator does some computation

96
00:02:43,440 --> 00:02:47,680
okay computing a sum is not that complex

97
00:02:45,920 --> 00:02:49,679
but it finishes sometime later the

98
00:02:47,680 --> 00:02:50,959
result is six it writes it back and then

99
00:02:49,680 --> 00:02:52,800
it reports that it's done

100
00:02:50,959 --> 00:02:54,720
so these are like the sort of the class

101
00:02:52,800 --> 00:02:56,080
of accelerators that i'm talking about

102
00:02:54,720 --> 00:02:57,760
for this

103
00:02:56,080 --> 00:03:00,560
all right and this example of sort of

104
00:02:57,760 --> 00:03:02,720
building up um an adder accelerator

105
00:03:00,560 --> 00:03:03,760
is sort of uh goes through this whole

106
00:03:02,720 --> 00:03:06,080
talk and there's also

107
00:03:03,760 --> 00:03:08,480
an example available on the uh on the

108
00:03:06,080 --> 00:03:12,000
github right now

109
00:03:08,480 --> 00:03:13,518
okay so luca's embedded scalable

110
00:03:12,000 --> 00:03:15,440
platform comes into the picture here

111
00:03:13,519 --> 00:03:17,440
because it's basically saying

112
00:03:15,440 --> 00:03:19,599
we want to be a platform where you can

113
00:03:17,440 --> 00:03:20,959
go and just grab your accelerator you

114
00:03:19,599 --> 00:03:22,319
have an accelerator you want to build an

115
00:03:20,959 --> 00:03:23,840
accelerator and just integrate it with

116
00:03:22,319 --> 00:03:26,319
this system

117
00:03:23,840 --> 00:03:28,319
and sort of the pitch for that is great

118
00:03:26,319 --> 00:03:29,599
bring your accelerator in any language

119
00:03:28,319 --> 00:03:31,359
the accelerator can then be easily

120
00:03:29,599 --> 00:03:32,879
integrated with this soc

121
00:03:31,360 --> 00:03:34,640
but there's sort of a couple of little

122
00:03:32,879 --> 00:03:38,000
flies in the ointment here if you want

123
00:03:34,640 --> 00:03:41,359
to go and build in like verilog or vhdl

124
00:03:38,000 --> 00:03:43,680
so and the first thing is the esp

125
00:03:41,360 --> 00:03:44,799
framework has to know about the

126
00:03:43,680 --> 00:03:46,159
accelerator

127
00:03:44,799 --> 00:03:48,400
so in the sense there's all this

128
00:03:46,159 --> 00:03:51,280
metadata that you have to describe

129
00:03:48,400 --> 00:03:52,080
to that nice pretty gui that luca was

130
00:03:51,280 --> 00:03:54,239
showing

131
00:03:52,080 --> 00:03:55,280
and that's all in the sense of an xml

132
00:03:54,239 --> 00:03:57,040
file

133
00:03:55,280 --> 00:03:58,959
the second thing is there's sort of a

134
00:03:57,040 --> 00:04:02,159
defined

135
00:03:58,959 --> 00:04:03,920
interface for this esp accelerator

136
00:04:02,159 --> 00:04:05,519
but you can also configure that with

137
00:04:03,920 --> 00:04:07,920
additional configuration lines if your

138
00:04:05,519 --> 00:04:09,439
function has more parameters right

139
00:04:07,920 --> 00:04:11,119
now the thing that's annoying is if you

140
00:04:09,439 --> 00:04:12,640
go and just you know put this in a

141
00:04:11,120 --> 00:04:14,000
readme and just say okay you have to

142
00:04:12,640 --> 00:04:16,320
write this file

143
00:04:14,000 --> 00:04:17,519
um you know maybe you provide a schema

144
00:04:16,320 --> 00:04:19,519
for it

145
00:04:17,519 --> 00:04:20,798
and you also say i have these wires and

146
00:04:19,519 --> 00:04:21,600
they have these names and you have to

147
00:04:20,798 --> 00:04:22,960
code to that

148
00:04:21,600 --> 00:04:24,560
that's really brittle you know you're

149
00:04:22,960 --> 00:04:25,919
basically saying that a user has to go

150
00:04:24,560 --> 00:04:28,320
and parse a spec

151
00:04:25,919 --> 00:04:29,599
and come up with a bunch of correct

152
00:04:28,320 --> 00:04:30,400
strings that are going to work with this

153
00:04:29,600 --> 00:04:32,080
system

154
00:04:30,400 --> 00:04:33,440
and i sort of come from the school of

155
00:04:32,080 --> 00:04:34,560
you know i would like to just provide

156
00:04:33,440 --> 00:04:35,919
something that is

157
00:04:34,560 --> 00:04:37,919
um you know i would like to get a

158
00:04:35,919 --> 00:04:39,840
compiler warning if i screw up any of

159
00:04:37,919 --> 00:04:42,880
this

160
00:04:39,840 --> 00:04:44,159
so for that and just

161
00:04:42,880 --> 00:04:46,000
is one more example just what this

162
00:04:44,160 --> 00:04:47,600
accelerator kind of looks like you have

163
00:04:46,000 --> 00:04:50,080
an esp accelerator here

164
00:04:47,600 --> 00:04:51,360
the things which are in in green or sort

165
00:04:50,080 --> 00:04:54,000
of a white color

166
00:04:51,360 --> 00:04:56,479
are things which are fixed so the x

167
00:04:54,000 --> 00:04:58,560
socket is providing a dma port

168
00:04:56,479 --> 00:05:00,240
a debug port for like an error code when

169
00:04:58,560 --> 00:05:01,360
you're done something the accelerator

170
00:05:00,240 --> 00:05:04,639
can say it's done

171
00:05:01,360 --> 00:05:05,360
and something that the the processor can

172
00:05:04,639 --> 00:05:06,800
then

173
00:05:05,360 --> 00:05:08,720
save for the accelerator to start

174
00:05:06,800 --> 00:05:10,639
working but everything in red

175
00:05:08,720 --> 00:05:11,759
is something that the user has to go and

176
00:05:10,639 --> 00:05:14,000
implement

177
00:05:11,759 --> 00:05:14,880
and these are things like you have an

178
00:05:14,000 --> 00:05:18,320
optional

179
00:05:14,880 --> 00:05:19,759
um an optional vector of configuration

180
00:05:18,320 --> 00:05:20,880
parameters that you can spec that you

181
00:05:19,759 --> 00:05:22,320
have to pass to this

182
00:05:20,880 --> 00:05:23,680
you have all of the business logic

183
00:05:22,320 --> 00:05:24,479
associated with the internals of the

184
00:05:23,680 --> 00:05:26,320
accelerator

185
00:05:24,479 --> 00:05:27,758
and then you also have this xml which is

186
00:05:26,320 --> 00:05:29,039
supposed to be consistent with what

187
00:05:27,759 --> 00:05:32,320
you've written here

188
00:05:29,039 --> 00:05:33,919
okay so um

189
00:05:32,320 --> 00:05:35,440
the usual answer answer for something

190
00:05:33,919 --> 00:05:36,000
like this as well just code it up and

191
00:05:35,440 --> 00:05:39,199
you know

192
00:05:36,000 --> 00:05:42,560
verilog system verilog or vhdl however

193
00:05:39,199 --> 00:05:43,759
um you know verilog and vhdl like are

194
00:05:42,560 --> 00:05:44,560
kind of annoying because you don't have

195
00:05:43,759 --> 00:05:46,000
optional i o

196
00:05:44,560 --> 00:05:48,080
this is just like a fundamental feature

197
00:05:46,000 --> 00:05:51,360
that they don't support second

198
00:05:48,080 --> 00:05:54,080
um you know we're kind of coding in the

199
00:05:51,360 --> 00:05:54,639
like the 1970s here or even worse even

200
00:05:54,080 --> 00:05:55,919
earlier

201
00:05:54,639 --> 00:05:57,919
but there's no object-oriented

202
00:05:55,919 --> 00:05:58,880
programming in in verilog system verilog

203
00:05:57,919 --> 00:06:00,240
or vhdl

204
00:05:58,880 --> 00:06:03,039
with the slight caveat the system

205
00:06:00,240 --> 00:06:05,039
verilog supports

206
00:06:03,039 --> 00:06:06,560
classes but only for verification you

207
00:06:05,039 --> 00:06:08,000
can't go and build hardware that uses

208
00:06:06,560 --> 00:06:10,160
any of this stuff

209
00:06:08,000 --> 00:06:11,199
um and with you know the slight caveat

210
00:06:10,160 --> 00:06:12,880
that even like um

211
00:06:11,199 --> 00:06:14,240
it's like the base jump stl stuff like

212
00:06:12,880 --> 00:06:15,680
great work for michael taylor

213
00:06:14,240 --> 00:06:18,080
but he's even highlighted like system

214
00:06:15,680 --> 00:06:19,680
verilog has some like annoying features

215
00:06:18,080 --> 00:06:21,520
that make it hard to try and do this

216
00:06:19,680 --> 00:06:24,880
kind of stuff so

217
00:06:21,520 --> 00:06:26,479
um where then i come in is with um

218
00:06:24,880 --> 00:06:27,919
so a language sort of uh journally

219
00:06:26,479 --> 00:06:30,479
developed at ibm

220
00:06:27,919 --> 00:06:32,880
uc berkeley and a startups well a not so

221
00:06:30,479 --> 00:06:35,680
small startup called sci-five

222
00:06:32,880 --> 00:06:37,919
called chisel and fertile what is chisel

223
00:06:35,680 --> 00:06:38,880
so chisel is a hardware domain specific

224
00:06:37,919 --> 00:06:40,639
language

225
00:06:38,880 --> 00:06:42,400
so think of it's like you have a bunch

226
00:06:40,639 --> 00:06:44,319
of classes um

227
00:06:42,400 --> 00:06:45,599
that are describing hardware components

228
00:06:44,319 --> 00:06:47,360
and then you can go and extend them and

229
00:06:45,600 --> 00:06:50,639
add things to them

230
00:06:47,360 --> 00:06:52,560
and fertile is a circuit ir so you guys

231
00:06:50,639 --> 00:06:54,800
all know about like llvmir

232
00:06:52,560 --> 00:06:56,400
this is basically just lvmir is program

233
00:06:54,800 --> 00:06:59,840
ir fertile ir

234
00:06:56,400 --> 00:07:02,318
is for describing hardware circuits

235
00:06:59,840 --> 00:07:03,599
and you put all this together and the

236
00:07:02,319 --> 00:07:04,160
benefits of the fact that this is a

237
00:07:03,599 --> 00:07:06,080
language

238
00:07:04,160 --> 00:07:07,919
in scala is you get all the all the

239
00:07:06,080 --> 00:07:10,000
benefits that scala has to offer

240
00:07:07,919 --> 00:07:11,919
so you get simple parameterization you

241
00:07:10,000 --> 00:07:13,599
get parametric polymorphism

242
00:07:11,919 --> 00:07:15,198
uh you get first class function support

243
00:07:13,599 --> 00:07:16,080
functional programming object-oriented

244
00:07:15,199 --> 00:07:17,440
programming

245
00:07:16,080 --> 00:07:19,440
so basically you don't have to wait for

246
00:07:17,440 --> 00:07:21,280
the vendor tools to come along and say

247
00:07:19,440 --> 00:07:23,039
well or you want to wait for a standards

248
00:07:21,280 --> 00:07:26,000
body to come and build out

249
00:07:23,039 --> 00:07:27,520
uh to come and make an addition to the

250
00:07:26,000 --> 00:07:29,280
system verilog specification

251
00:07:27,520 --> 00:07:31,198
you can just say hey i'm going to go and

252
00:07:29,280 --> 00:07:32,559
use all of this awesome power to go and

253
00:07:31,199 --> 00:07:34,960
build hardware

254
00:07:32,560 --> 00:07:36,479
all right so what does this this process

255
00:07:34,960 --> 00:07:39,120
then actually look like

256
00:07:36,479 --> 00:07:41,120
you write your circuit in in chisel that

257
00:07:39,120 --> 00:07:42,960
runs through the chisel front end

258
00:07:41,120 --> 00:07:44,400
that generates fertile ir that runs

259
00:07:42,960 --> 00:07:46,400
through the fertile compiler

260
00:07:44,400 --> 00:07:48,080
that generates a lowered form of fertile

261
00:07:46,400 --> 00:07:49,280
ir and then that runs through a verilog

262
00:07:48,080 --> 00:07:51,280
backing and you get

263
00:07:49,280 --> 00:07:52,960
and you get verilog out of it you can

264
00:07:51,280 --> 00:07:54,960
customize this whole process with custom

265
00:07:52,960 --> 00:07:56,719
transforms that you inject into really

266
00:07:54,960 --> 00:07:58,318
any stage of this process but here it's

267
00:07:56,720 --> 00:08:00,000
just shown in adding custom transforms

268
00:07:58,319 --> 00:08:02,160
into the fertile compiler

269
00:08:00,000 --> 00:08:03,599
okay so there's a whole website on this

270
00:08:02,160 --> 00:08:07,360
chiseling.org

271
00:08:03,599 --> 00:08:09,440
it's an open source project check it out

272
00:08:07,360 --> 00:08:11,360
but what really what the point of this

273
00:08:09,440 --> 00:08:12,000
talk is is how you can try and use

274
00:08:11,360 --> 00:08:14,240
chisel to

275
00:08:12,000 --> 00:08:15,759
restrict and define sort of like a

276
00:08:14,240 --> 00:08:18,879
hardware api

277
00:08:15,759 --> 00:08:21,039
for this esp accelerator socket so the

278
00:08:18,879 --> 00:08:23,599
sort of abstraction that we came up with

279
00:08:21,039 --> 00:08:24,878
is this notion of a specification and an

280
00:08:23,599 --> 00:08:27,840
implementation

281
00:08:24,879 --> 00:08:30,720
so a specification is sort of the

282
00:08:27,840 --> 00:08:32,079
encapsulation of one of these sockets

283
00:08:30,720 --> 00:08:34,240
and then the implementation is the

284
00:08:32,080 --> 00:08:36,320
actual hardware associated with that

285
00:08:34,240 --> 00:08:38,719
so for one specification you can think

286
00:08:36,320 --> 00:08:42,240
about lots of different implementations

287
00:08:38,719 --> 00:08:44,399
like as an example um you know you could

288
00:08:42,240 --> 00:08:46,560
build an fft accelerator it could either

289
00:08:44,399 --> 00:08:48,000
be pipelined or not pipelined

290
00:08:46,560 --> 00:08:49,680
those two implement those would be two

291
00:08:48,000 --> 00:08:50,720
different concrete implementations

292
00:08:49,680 --> 00:08:53,279
but they would all have the same

293
00:08:50,720 --> 00:08:54,320
specification so the specification is

294
00:08:53,279 --> 00:08:55,279
the thing that handles all the

295
00:08:54,320 --> 00:08:58,720
configuration

296
00:08:55,279 --> 00:08:59,200
what are my ios how much memory do i

297
00:08:58,720 --> 00:09:00,320
need

298
00:08:59,200 --> 00:09:02,399
all those types of things but the

299
00:09:00,320 --> 00:09:04,080
implementation is the actual hardware so

300
00:09:02,399 --> 00:09:05,360
for this then

301
00:09:04,080 --> 00:09:07,360
and this is also sort of a type

302
00:09:05,360 --> 00:09:09,279
hierarchy kind of thing from the chisel

303
00:09:07,360 --> 00:09:11,040
3 module class which is just a generic

304
00:09:09,279 --> 00:09:13,040
hardware module

305
00:09:11,040 --> 00:09:15,040
you have an esp implementation that

306
00:09:13,040 --> 00:09:17,279
extends that and an accelerator mixes in

307
00:09:15,040 --> 00:09:19,279
a specification with that

308
00:09:17,279 --> 00:09:20,880
okay and so i think this is this is on

309
00:09:19,279 --> 00:09:22,880
later too but this is the

310
00:09:20,880 --> 00:09:25,279
the website of the project for the

311
00:09:22,880 --> 00:09:27,839
specific part of it

312
00:09:25,279 --> 00:09:28,720
and then sort of going off of this

313
00:09:27,839 --> 00:09:30,240
example

314
00:09:28,720 --> 00:09:32,720
adder accelerator that we have from

315
00:09:30,240 --> 00:09:34,320
before so this is sort of what the code

316
00:09:32,720 --> 00:09:35,360
for writing the specification for this

317
00:09:34,320 --> 00:09:37,040
adder is

318
00:09:35,360 --> 00:09:37,760
so you have three parameters here so

319
00:09:37,040 --> 00:09:38,480
these are the things that you would

320
00:09:37,760 --> 00:09:40,080
configure

321
00:09:38,480 --> 00:09:41,839
you have your read address your size and

322
00:09:40,080 --> 00:09:43,200
your right address some additional

323
00:09:41,839 --> 00:09:44,240
things that are useful for humans to

324
00:09:43,200 --> 00:09:46,640
look at like

325
00:09:44,240 --> 00:09:48,399
a name or a description as well as

326
00:09:46,640 --> 00:09:49,920
things that the esp framework cares

327
00:09:48,399 --> 00:09:51,279
about like what is the memory footprint

328
00:09:49,920 --> 00:09:53,360
as well as device id

329
00:09:51,279 --> 00:09:55,279
so what's cool is that i can just say

330
00:09:53,360 --> 00:09:56,959
hey

331
00:09:55,279 --> 00:09:58,720
you as a user if you want to go and work

332
00:09:56,959 --> 00:10:00,560
with esp and write chisel

333
00:09:58,720 --> 00:10:01,760
you just have to implement you know this

334
00:10:00,560 --> 00:10:02,959
api

335
00:10:01,760 --> 00:10:04,079
this is i mean it's just an abstract

336
00:10:02,959 --> 00:10:05,199
class if you don't implement it the

337
00:10:04,079 --> 00:10:06,640
compiler yells at you

338
00:10:05,200 --> 00:10:08,160
or if you miss something it'll yell at

339
00:10:06,640 --> 00:10:10,319
you and that's nice you want errors as

340
00:10:08,160 --> 00:10:12,640
early as you can get them

341
00:10:10,320 --> 00:10:13,440
all right so then the implementation is

342
00:10:12,640 --> 00:10:14,959
really

343
00:10:13,440 --> 00:10:17,200
just something that's mixing in that

344
00:10:14,959 --> 00:10:18,719
spec you define the actual

345
00:10:17,200 --> 00:10:19,920
implementation name so how do i

346
00:10:18,720 --> 00:10:20,880
differentiate this from other

347
00:10:19,920 --> 00:10:22,560
implementations

348
00:10:20,880 --> 00:10:24,079
and then finally like all of the you

349
00:10:22,560 --> 00:10:25,040
know all of the business logic

350
00:10:24,079 --> 00:10:26,160
associated with this

351
00:10:25,040 --> 00:10:28,079
so if you want to look at this this

352
00:10:26,160 --> 00:10:29,839
example i finished it's up online

353
00:10:28,079 --> 00:10:32,239
um last night you just go and look at

354
00:10:29,839 --> 00:10:34,720
check it out

355
00:10:32,240 --> 00:10:36,880
okay so sort of the quick like kind of

356
00:10:34,720 --> 00:10:38,399
can demo for what's going on here

357
00:10:36,880 --> 00:10:40,399
you just go into the project you type

358
00:10:38,399 --> 00:10:41,839
svt run this will go and build all of

359
00:10:40,399 --> 00:10:43,839
these accelerators for you

360
00:10:41,839 --> 00:10:46,160
one of them is this sort of toy adder

361
00:10:43,839 --> 00:10:48,720
accelerator but what you get out of that

362
00:10:46,160 --> 00:10:50,319
is just automatically you wind up with

363
00:10:48,720 --> 00:10:52,399
verilog for this accelerator and you

364
00:10:50,320 --> 00:10:54,880
also get this xml file

365
00:10:52,399 --> 00:10:56,959
and what's really going on here is that

366
00:10:54,880 --> 00:10:57,839
we add a transform into the fertile

367
00:10:56,959 --> 00:11:01,439
compiler

368
00:10:57,839 --> 00:11:03,600
that goes and looks at the design and

369
00:11:01,440 --> 00:11:04,640
then emits this additional xml data

370
00:11:03,600 --> 00:11:05,839
which we care about

371
00:11:04,640 --> 00:11:07,920
and then these are the two things that

372
00:11:05,839 --> 00:11:10,399
the esp framework wants to consume

373
00:11:07,920 --> 00:11:11,839
and then you're ready to go so basically

374
00:11:10,399 --> 00:11:13,279
there's no confusion on

375
00:11:11,839 --> 00:11:15,120
what is this supposed to look like what

376
00:11:13,279 --> 00:11:18,640
is the interface what is the schema for

377
00:11:15,120 --> 00:11:21,200
the xml we just take care of it for you

378
00:11:18,640 --> 00:11:22,880
and i think just yeah and just give you

379
00:11:21,200 --> 00:11:23,920
some concrete idea of what that xml

380
00:11:22,880 --> 00:11:25,519
output looks like

381
00:11:23,920 --> 00:11:27,599
this is where this is what it expects

382
00:11:25,519 --> 00:11:29,120
you know what are the configuration

383
00:11:27,600 --> 00:11:31,040
the optional i o that i have for my

384
00:11:29,120 --> 00:11:33,920
design and there

385
00:11:31,040 --> 00:11:35,439
and you can see this example online and

386
00:11:33,920 --> 00:11:37,120
then sort of finally just wrapping all

387
00:11:35,440 --> 00:11:39,200
this up

388
00:11:37,120 --> 00:11:40,480
so we currently have like three esp

389
00:11:39,200 --> 00:11:43,120
chisel accelerators

390
00:11:40,480 --> 00:11:44,720
two of them are toys one of them is not

391
00:11:43,120 --> 00:11:45,519
there's a counter accelerator which is

392
00:11:44,720 --> 00:11:48,800
just like

393
00:11:45,519 --> 00:11:50,000
um you know report done after in cycles

394
00:11:48,800 --> 00:11:52,079
there's this adder accelerator that we

395
00:11:50,000 --> 00:11:54,959
have and we also have an fft accelerator

396
00:11:52,079 --> 00:11:55,279
that integrates work from uc berkeley um

397
00:11:54,959 --> 00:11:59,359
on

398
00:11:55,279 --> 00:12:02,079
building nice fast efficient ffts

399
00:11:59,360 --> 00:12:03,680
and future work for this kind of stuff

400
00:12:02,079 --> 00:12:05,199
so obviously like this notion of

401
00:12:03,680 --> 00:12:07,120
emitting extra xml

402
00:12:05,200 --> 00:12:09,040
you could also think about emitting test

403
00:12:07,120 --> 00:12:10,800
benches emitting linux drivers

404
00:12:09,040 --> 00:12:12,399
you know trying to make it just super

405
00:12:10,800 --> 00:12:13,279
just dead simple for people to go and

406
00:12:12,399 --> 00:12:14,959
write hardware

407
00:12:13,279 --> 00:12:17,680
but also if they don't want to use the

408
00:12:14,959 --> 00:12:18,399
system c hls high level synthesis kind

409
00:12:17,680 --> 00:12:19,599
of approach

410
00:12:18,399 --> 00:12:21,760
they can do this but still get the

411
00:12:19,600 --> 00:12:24,000
benefits of all the the collateral that

412
00:12:21,760 --> 00:12:26,560
automatically gets generated

413
00:12:24,000 --> 00:12:27,600
all right so this is just links to the

414
00:12:26,560 --> 00:12:30,239
project

415
00:12:27,600 --> 00:12:31,839
some stuff about me so the main project

416
00:12:30,240 --> 00:12:32,800
is esp project there's the chisel

417
00:12:31,839 --> 00:12:35,120
accelerators

418
00:12:32,800 --> 00:12:35,920
which is a sub module of that for chisel

419
00:12:35,120 --> 00:12:37,600
3

420
00:12:35,920 --> 00:12:38,800
that's on free chips project but i will

421
00:12:37,600 --> 00:12:40,240
eventually switch to another project

422
00:12:38,800 --> 00:12:42,000
called chips alliance

423
00:12:40,240 --> 00:12:43,360
we have a chisel three twitter there's

424
00:12:42,000 --> 00:12:46,399
the fertile project

425
00:12:43,360 --> 00:12:49,600
and my github if that's of any interest

426
00:12:46,399 --> 00:12:51,040
and that's it and i think i somehow got

427
00:12:49,600 --> 00:12:51,440
back on time after that interesting

428
00:12:51,040 --> 00:12:53,349
start

429
00:12:51,440 --> 00:12:59,839
so thank you

430
00:12:53,350 --> 00:13:03,279
[Applause]

431
00:12:59,839 --> 00:13:05,600
sure any questions shoot

432
00:13:03,279 --> 00:13:06,480
like compiler of chisel to c or

433
00:13:05,600 --> 00:13:09,920
something to

434
00:13:06,480 --> 00:13:11,360
simulate it so um

435
00:13:09,920 --> 00:13:13,760
we try and just take advantage of open

436
00:13:11,360 --> 00:13:16,560
source tools so verilator is like an

437
00:13:13,760 --> 00:13:17,120
an open source compiler of a verilog

438
00:13:16,560 --> 00:13:18,959
file

439
00:13:17,120 --> 00:13:21,279
to a c plus plus executable if you just

440
00:13:18,959 --> 00:13:23,439
build with gcc so that's like the how do

441
00:13:21,279 --> 00:13:24,959
you get it to c plus plus to simulate it

442
00:13:23,440 --> 00:13:26,880
so we just use verilater for all this

443
00:13:24,959 --> 00:13:28,638
stuff but there does exist another

444
00:13:26,880 --> 00:13:31,360
project called treadle which lets you

445
00:13:28,639 --> 00:13:32,959
just directly simulate the fertile ir

446
00:13:31,360 --> 00:13:34,320
and you can use that for testing too so

447
00:13:32,959 --> 00:13:34,880
we have a bunch of unit tests with this

448
00:13:34,320 --> 00:13:36,560
thing

449
00:13:34,880 --> 00:13:38,880
you know you just type spt test and it

450
00:13:36,560 --> 00:13:41,599
runs all the tests for the accelerator

451
00:13:38,880 --> 00:13:41,600
as it goes along

452
00:13:44,720 --> 00:13:48,160
um i'm actually not a uh sorry i need to

453
00:13:47,279 --> 00:13:49,439
repeat the question

454
00:13:48,160 --> 00:13:51,600
so the question was can you go from

455
00:13:49,440 --> 00:13:52,399
system c to fertile i'm not aware of

456
00:13:51,600 --> 00:13:55,760
that right now

457
00:13:52,399 --> 00:13:58,399
but um the project yosis does have a

458
00:13:55,760 --> 00:14:00,240
verilog front end and a fertile back end

459
00:13:58,399 --> 00:14:02,079
so you can theoretically try and take

460
00:14:00,240 --> 00:14:03,279
advantage of like the fertile compiler

461
00:14:02,079 --> 00:14:05,920
ecosystem

462
00:14:03,279 --> 00:14:08,000
from verilog so you know you could go

463
00:14:05,920 --> 00:14:09,839
system c to verilog to

464
00:14:08,000 --> 00:14:11,040
to fertile if you wanted to but you

465
00:14:09,839 --> 00:14:17,839
would probably lose a lot of semantic

466
00:14:11,040 --> 00:14:17,839
information along the way

467
00:14:28,839 --> 00:14:31,839
sure

468
00:14:42,720 --> 00:14:45,680
yeah so the uh the question is what are

469
00:14:44,320 --> 00:14:47,360
the benefits of chisel versus something

470
00:14:45,680 --> 00:14:49,680
like system c or verilog

471
00:14:47,360 --> 00:14:51,040
um so generally the way that i

472
00:14:49,680 --> 00:14:51,519
understand you're going to use system c

473
00:14:51,040 --> 00:14:53,120
is sort of

474
00:14:51,519 --> 00:14:55,600
if you have these macros and you're very

475
00:14:53,120 --> 00:14:57,120
restricted in the set of what you can do

476
00:14:55,600 --> 00:14:58,800
with the benefits of chisel it's

477
00:14:57,120 --> 00:15:00,320
basically saying you know you get all of

478
00:14:58,800 --> 00:15:02,880
the last you know

479
00:15:00,320 --> 00:15:03,519
40 years of software engineering and you

480
00:15:02,880 --> 00:15:05,600
can really

481
00:15:03,519 --> 00:15:07,199
apply whatever programming paradigm you

482
00:15:05,600 --> 00:15:08,000
want to the process of hardware

483
00:15:07,199 --> 00:15:09,439
generation

484
00:15:08,000 --> 00:15:11,120
so you have first class functions you

485
00:15:09,440 --> 00:15:12,880
have parametric polymorphism there are

486
00:15:11,120 --> 00:15:14,079
no restrictions in the sense of you

487
00:15:12,880 --> 00:15:16,480
don't have a

488
00:15:14,079 --> 00:15:18,399
synthesizable subset it's just whatever

489
00:15:16,480 --> 00:15:19,040
you want to use to describe hardware how

490
00:15:18,399 --> 00:15:20,399
it connects

491
00:15:19,040 --> 00:15:21,760
and you can build more complicated

492
00:15:20,399 --> 00:15:22,800
libraries on top of this for doing

493
00:15:21,760 --> 00:15:26,480
whatever

494
00:15:22,800 --> 00:15:29,120
you may need or your company may need

495
00:15:26,480 --> 00:15:31,600
so yeah we got a minute got a minute

496
00:15:29,120 --> 00:15:31,600
anything else

497
00:15:32,639 --> 00:15:36,320
do you want to borrow the minute i can

498
00:15:34,800 --> 00:15:37,680
yield time too so i'll be around if

499
00:15:36,320 --> 00:15:39,440
anybody wants to talk about chisel or

500
00:15:37,680 --> 00:15:51,359
any of this kind of stuff

501
00:15:39,440 --> 00:15:51,360
today and tomorrow so thanks guys

