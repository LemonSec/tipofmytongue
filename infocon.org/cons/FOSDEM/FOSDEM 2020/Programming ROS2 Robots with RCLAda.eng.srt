1
00:00:05,200 --> 00:00:07,759
okay

2
00:00:05,610 --> 00:00:11,440
[Music]

3
00:00:07,759 --> 00:00:11,440
gentlemen please sit down

4
00:00:12,320 --> 00:00:20,480
oh we still have a lady come on

5
00:00:15,839 --> 00:00:23,519
you for being here and our next speaker

6
00:00:20,480 --> 00:00:26,480
is alejandro mosteau from

7
00:00:23,519 --> 00:00:27,680
spain so please okay so thank you for

8
00:00:26,480 --> 00:00:29,439
being here

9
00:00:27,680 --> 00:00:31,840
i'm going to talk about programming

10
00:00:29,439 --> 00:00:34,960
robots with a

11
00:00:31,840 --> 00:00:37,680
binding that i have created so i'm

12
00:00:34,960 --> 00:00:38,640
going to go from starting talking about

13
00:00:37,680 --> 00:00:41,760
what's ros

14
00:00:38,640 --> 00:00:44,559
2 how it can be used from ada

15
00:00:41,760 --> 00:00:45,920
i hopefully if all goes well i will do a

16
00:00:44,559 --> 00:00:48,559
small

17
00:00:45,920 --> 00:00:49,200
live demonstration in a nutshell in case

18
00:00:48,559 --> 00:00:52,239
i run

19
00:00:49,200 --> 00:00:54,960
out of time this is what this is about

20
00:00:52,239 --> 00:00:54,959
louder okay

21
00:00:55,520 --> 00:00:58,960
basically right now with this library

22
00:00:57,920 --> 00:01:02,160
you can program

23
00:00:58,960 --> 00:01:04,239
robots with the same

24
00:01:02,160 --> 00:01:06,158
as easily as in other languages like c

25
00:01:04,239 --> 00:01:08,799
plus plus or python

26
00:01:06,159 --> 00:01:09,439
there is a small print which i put not

27
00:01:08,799 --> 00:01:12,640
so small

28
00:01:09,439 --> 00:01:15,919
so you are not mislead and

29
00:01:12,640 --> 00:01:16,400
well what ros does and why i'm using

30
00:01:15,920 --> 00:01:19,759
this

31
00:01:16,400 --> 00:01:22,720
i belong to a robotics laboratory so

32
00:01:19,759 --> 00:01:24,560
we do from high level algorithms

33
00:01:22,720 --> 00:01:25,439
distributed algorithms to low level

34
00:01:24,560 --> 00:01:28,240
things like

35
00:01:25,439 --> 00:01:30,158
taking care of the network medium to

36
00:01:28,240 --> 00:01:33,119
transmit in real time

37
00:01:30,159 --> 00:01:34,560
and so on and right now programming

38
00:01:33,119 --> 00:01:37,680
robots at least in some

39
00:01:34,560 --> 00:01:38,960
research contexts means using ros which

40
00:01:37,680 --> 00:01:42,000
is

41
00:01:38,960 --> 00:01:45,600
robot operating system it's not a robot

42
00:01:42,000 --> 00:01:46,000
an operating system sorry this is when i

43
00:01:45,600 --> 00:01:49,520
ask

44
00:01:46,000 --> 00:01:52,880
if somebody has used ross before

45
00:01:49,520 --> 00:01:54,640
okay great and

46
00:01:52,880 --> 00:01:56,798
so you know what it is for those that

47
00:01:54,640 --> 00:02:00,320
don't know it's basically

48
00:01:56,799 --> 00:02:04,719
um a lot of things that work on top of

49
00:02:00,320 --> 00:02:08,720
ubuntu and with that you gain access to

50
00:02:04,719 --> 00:02:11,359
many sensors actuators

51
00:02:08,720 --> 00:02:14,080
algorithms there is a communication

52
00:02:11,360 --> 00:02:15,840
infrastructure so

53
00:02:14,080 --> 00:02:18,239
essentially it's a big ecosystem to

54
00:02:15,840 --> 00:02:19,599
program robots just to get an idea what

55
00:02:18,239 --> 00:02:22,080
kind of robots we could

56
00:02:19,599 --> 00:02:23,519
be talking about this is the original

57
00:02:22,080 --> 00:02:24,560
robot that was presented with the

58
00:02:23,520 --> 00:02:26,800
project

59
00:02:24,560 --> 00:02:28,160
it's as you can see a big robot it has

60
00:02:26,800 --> 00:02:31,120
several

61
00:02:28,160 --> 00:02:32,560
embedded computers several cameras

62
00:02:31,120 --> 00:02:35,440
several

63
00:02:32,560 --> 00:02:39,200
lasers here's a demonstration that's

64
00:02:35,440 --> 00:02:39,200
oddly appropriate for fosdem

65
00:02:41,440 --> 00:02:44,959
it's quite impressive when it becomes

66
00:02:43,840 --> 00:02:48,000
bigger

67
00:02:44,959 --> 00:02:50,879
and here it's doing a mission critical

68
00:02:48,000 --> 00:02:53,360
mission which is retrieving

69
00:02:50,879 --> 00:02:54,160
you'll see in a second retrieving beers

70
00:02:53,360 --> 00:02:57,599
for the

71
00:02:54,160 --> 00:03:01,440
for the programmers okay so you see

72
00:02:57,599 --> 00:03:04,399
it's uh well if you go shopping for

73
00:03:01,440 --> 00:03:06,400
parts you will also find robots that

74
00:03:04,400 --> 00:03:07,200
come with raw support so it's kind of

75
00:03:06,400 --> 00:03:09,599
expected in

76
00:03:07,200 --> 00:03:10,640
certain circles right now so it's

77
00:03:09,599 --> 00:03:13,920
interesting to make

78
00:03:10,640 --> 00:03:16,079
ada available for ross

79
00:03:13,920 --> 00:03:16,079
and

80
00:03:17,120 --> 00:03:23,440
somehow the video is interfering okay

81
00:03:20,400 --> 00:03:26,400
and when you jump in the ros uh

82
00:03:23,440 --> 00:03:27,280
one background you have access to many

83
00:03:26,400 --> 00:03:30,400
leading

84
00:03:27,280 --> 00:03:32,000
research projects for vision cloud

85
00:03:30,400 --> 00:03:34,799
processing and so on

86
00:03:32,000 --> 00:03:35,360
mostly leading robotics research there's

87
00:03:34,799 --> 00:03:39,440
also

88
00:03:35,360 --> 00:03:41,519
push to make ros industrial ready

89
00:03:39,440 --> 00:03:42,879
actually i will talk about any project

90
00:03:41,519 --> 00:03:45,840
at the end of the stock

91
00:03:42,879 --> 00:03:47,840
but in the title if you paid attention

92
00:03:45,840 --> 00:03:50,000
it says ros 2 and not ros

93
00:03:47,840 --> 00:03:52,080
the thing is that the new version is on

94
00:03:50,000 --> 00:03:53,840
the works and this one

95
00:03:52,080 --> 00:03:56,319
is trying to fix the problems of the

96
00:03:53,840 --> 00:03:59,040
past basically

97
00:03:56,319 --> 00:04:00,720
ross was not designed with her real time

98
00:03:59,040 --> 00:04:04,319
in mind it's more

99
00:04:00,720 --> 00:04:06,000
kind of high-level algorithms so

100
00:04:04,319 --> 00:04:07,359
right now they are paying attention to

101
00:04:06,000 --> 00:04:09,760
real-time capabilities

102
00:04:07,360 --> 00:04:10,720
uh dynamic memory allocation and things

103
00:04:09,760 --> 00:04:13,518
that will

104
00:04:10,720 --> 00:04:14,159
make ros easier to use in industrial

105
00:04:13,519 --> 00:04:17,840
setups

106
00:04:14,159 --> 00:04:23,039
and there is where traditionally ada is

107
00:04:17,839 --> 00:04:26,080
excellent so why not have ada for rost2

108
00:04:23,040 --> 00:04:28,240
and well what's

109
00:04:26,080 --> 00:04:29,840
a ros2 program or ros program in essence

110
00:04:28,240 --> 00:04:32,960
it's basically a set of

111
00:04:29,840 --> 00:04:36,320
different processes or threads

112
00:04:32,960 --> 00:04:37,919
each of them is called a node and it can

113
00:04:36,320 --> 00:04:39,759
communicate with other nodes there are

114
00:04:37,919 --> 00:04:42,159
nodes for accessing sensors

115
00:04:39,759 --> 00:04:43,600
for moving rotate platforms to perform

116
00:04:42,160 --> 00:04:46,960
algorithms and so on

117
00:04:43,600 --> 00:04:48,479
in ros2 there is an api which is low

118
00:04:46,960 --> 00:04:50,239
level which is in c

119
00:04:48,479 --> 00:04:52,080
there are two officially supported c

120
00:04:50,240 --> 00:04:55,120
plus class and python

121
00:04:52,080 --> 00:04:57,758
high level apis and there are

122
00:04:55,120 --> 00:04:59,280
third party apis like the one i'm

123
00:04:57,759 --> 00:05:01,360
presenting today

124
00:04:59,280 --> 00:05:03,119
the simplest way of communication is to

125
00:05:01,360 --> 00:05:05,919
connect nodes via topics which is

126
00:05:03,120 --> 00:05:07,520
sim simple publish and subscribe model

127
00:05:05,919 --> 00:05:09,198
of communication

128
00:05:07,520 --> 00:05:11,120
and with that you can create your own

129
00:05:09,199 --> 00:05:12,080
mess if you know what you are doing

130
00:05:11,120 --> 00:05:14,080
basically some

131
00:05:12,080 --> 00:05:17,599
notes publish information some other

132
00:05:14,080 --> 00:05:17,599
notes consume this information

133
00:05:18,000 --> 00:05:21,759
and what information travels through

134
00:05:20,880 --> 00:05:24,000
those topics

135
00:05:21,759 --> 00:05:25,840
essentially there are there is a way to

136
00:05:24,000 --> 00:05:28,080
define data types

137
00:05:25,840 --> 00:05:30,159
with text files which get translated

138
00:05:28,080 --> 00:05:32,960
into records

139
00:05:30,160 --> 00:05:35,440
and these records can be used to create

140
00:05:32,960 --> 00:05:37,599
new records so it's basically the same

141
00:05:35,440 --> 00:05:38,960
thing with that we do in all languages

142
00:05:37,600 --> 00:05:42,000
but starting from

143
00:05:38,960 --> 00:05:43,680
a textual description and now moving a

144
00:05:42,000 --> 00:05:46,800
bit into how this looks

145
00:05:43,680 --> 00:05:50,240
in ada well this is how you

146
00:05:46,800 --> 00:05:53,120
would use that one a message

147
00:05:50,240 --> 00:05:54,240
in it so you access the fields by name

148
00:05:53,120 --> 00:05:57,840
right now

149
00:05:54,240 --> 00:06:00,000
you specify the type that you must know

150
00:05:57,840 --> 00:06:00,880
although you can do introspection and

151
00:06:00,000 --> 00:06:04,000
everything

152
00:06:00,880 --> 00:06:07,840
in ada spirit is type checked and

153
00:06:04,000 --> 00:06:07,840
bounce checked and so on

154
00:06:08,240 --> 00:06:15,199
um going back to the whole ros

155
00:06:11,680 --> 00:06:17,360
architecture this is what ross is doing

156
00:06:15,199 --> 00:06:19,360
right now at the low level we have the

157
00:06:17,360 --> 00:06:21,440
communication facilities in ros 2

158
00:06:19,360 --> 00:06:23,360
there is a standard for real-time

159
00:06:21,440 --> 00:06:24,639
communications embedded communications

160
00:06:23,360 --> 00:06:28,319
with

161
00:06:24,639 --> 00:06:30,240
the was not available in ros

162
00:06:28,319 --> 00:06:32,800
and then on top we have the low level

163
00:06:30,240 --> 00:06:36,720
client library and the high level

164
00:06:32,800 --> 00:06:39,440
client libraries so rclada what does

165
00:06:36,720 --> 00:06:42,080
is to provide the equivalent to the c

166
00:06:39,440 --> 00:06:44,800
plus plus python libraries but for ela

167
00:06:42,080 --> 00:06:46,318
also with some examples of user code

168
00:06:44,800 --> 00:06:50,160
going a bit more in detail

169
00:06:46,319 --> 00:06:50,800
on what the packages that rcl aida

170
00:06:50,160 --> 00:06:54,319
provides

171
00:06:50,800 --> 00:06:56,960
we have those on the right the binding

172
00:06:54,319 --> 00:06:59,680
is structured in several components

173
00:06:56,960 --> 00:07:00,719
that address several of the needs of the

174
00:06:59,680 --> 00:07:03,360
ros ecosystem

175
00:07:00,720 --> 00:07:04,479
the building process access to messages

176
00:07:03,360 --> 00:07:09,280
and finally

177
00:07:04,479 --> 00:07:11,758
the programming of actual programs and

178
00:07:09,280 --> 00:07:14,000
looking a bit more into detail those

179
00:07:11,759 --> 00:07:16,560
that are in green are the

180
00:07:14,000 --> 00:07:17,120
main packages provided by rclada we have

181
00:07:16,560 --> 00:07:19,039
the

182
00:07:17,120 --> 00:07:22,800
cmake functions that allow to integrate

183
00:07:19,039 --> 00:07:25,440
the data code in the whole compilation

184
00:07:22,800 --> 00:07:27,120
infrastructure we have the message port

185
00:07:25,440 --> 00:07:29,520
and finally the client ap

186
00:07:27,120 --> 00:07:31,039
api that is intended to intended to

187
00:07:29,520 --> 00:07:33,599
write programs and on top there are a

188
00:07:31,039 --> 00:07:35,919
couple of samples

189
00:07:33,599 --> 00:07:36,880
so people can check that things work as

190
00:07:35,919 --> 00:07:38,560
expected

191
00:07:36,880 --> 00:07:40,400
there is a tradition in ros that when

192
00:07:38,560 --> 00:07:42,080
you do a new client library you

193
00:07:40,400 --> 00:07:44,479
implement the same programs

194
00:07:42,080 --> 00:07:46,639
the same example programs than in other

195
00:07:44,479 --> 00:07:51,199
languages so they can interoperate

196
00:07:46,639 --> 00:07:53,680
and you can can check them easily

197
00:07:51,199 --> 00:07:54,639
talking a bit about the building process

198
00:07:53,680 --> 00:07:57,840
um

199
00:07:54,639 --> 00:07:58,960
ros and ros2 have gone through several

200
00:07:57,840 --> 00:08:01,280
tool sets

201
00:07:58,960 --> 00:08:03,599
i'd say that this is something that most

202
00:08:01,280 --> 00:08:05,198
people in my laboratory hates about ross

203
00:08:03,599 --> 00:08:06,080
because they have changed things several

204
00:08:05,199 --> 00:08:08,400
times

205
00:08:06,080 --> 00:08:09,599
right now things seem to have stabilized

206
00:08:08,400 --> 00:08:13,039
in kolkon

207
00:08:09,599 --> 00:08:14,159
which is a tool that takes descriptions

208
00:08:13,039 --> 00:08:17,599
of packages in

209
00:08:14,160 --> 00:08:19,120
xml files where you say what depends on

210
00:08:17,599 --> 00:08:20,878
what and so on

211
00:08:19,120 --> 00:08:23,360
and it can compile things in many

212
00:08:20,879 --> 00:08:23,360
languages

213
00:08:23,520 --> 00:08:27,280
things described with cmake things

214
00:08:25,280 --> 00:08:28,638
described with python configuration

215
00:08:27,280 --> 00:08:30,799
scripts and so on

216
00:08:28,639 --> 00:08:32,159
what we have done for this project in

217
00:08:30,800 --> 00:08:36,080
ada is to use

218
00:08:32,159 --> 00:08:38,240
a few cmake functions to call gpr build

219
00:08:36,080 --> 00:08:40,000
so basically we are not there is no

220
00:08:38,240 --> 00:08:42,640
reinvention of the wheel of compilation

221
00:08:40,000 --> 00:08:44,080
process of ada in cmake but cmake

222
00:08:42,640 --> 00:08:46,560
redirects to

223
00:08:44,080 --> 00:08:48,640
to the gpr build and so you get all the

224
00:08:46,560 --> 00:08:50,079
consistency checks of the ada compiler

225
00:08:48,640 --> 00:08:51,920
for free

226
00:08:50,080 --> 00:08:53,760
and at the end of the build process

227
00:08:51,920 --> 00:08:55,120
process you'll find the libraries or

228
00:08:53,760 --> 00:08:58,160
executables for use

229
00:08:55,120 --> 00:09:01,680
sorry how does this look

230
00:08:58,160 --> 00:09:05,040
in practice we have a few new directives

231
00:09:01,680 --> 00:09:07,359
all starting with either something and

232
00:09:05,040 --> 00:09:09,439
for example here you say that you are

233
00:09:07,360 --> 00:09:12,640
going to provide an executable

234
00:09:09,440 --> 00:09:13,120
with some gpr file so it's as simple as

235
00:09:12,640 --> 00:09:15,920
that

236
00:09:13,120 --> 00:09:17,120
you specify where is your gpr file and

237
00:09:15,920 --> 00:09:19,519
everything should work

238
00:09:17,120 --> 00:09:20,839
out of the box of course this is the

239
00:09:19,519 --> 00:09:25,680
theory

240
00:09:20,839 --> 00:09:28,640
um and for the final part of the

241
00:09:25,680 --> 00:09:29,040
library we have the binding proper when

242
00:09:28,640 --> 00:09:30,640
we

243
00:09:29,040 --> 00:09:32,480
have to interface with other languages

244
00:09:30,640 --> 00:09:33,120
we need to write a binding if there is

245
00:09:32,480 --> 00:09:35,600
nothing

246
00:09:33,120 --> 00:09:37,600
before and here we have the choice

247
00:09:35,600 --> 00:09:40,240
between automatic bindings or

248
00:09:37,600 --> 00:09:41,519
manual bindings manual bindings are

249
00:09:40,240 --> 00:09:44,160
better because

250
00:09:41,519 --> 00:09:46,320
in theory they are written by a human

251
00:09:44,160 --> 00:09:48,959
who knows what he's doing

252
00:09:46,320 --> 00:09:50,800
automatic bindings have limitations just

253
00:09:48,959 --> 00:09:53,119
as we saw

254
00:09:50,800 --> 00:09:54,319
and we can get pointers and things that

255
00:09:53,120 --> 00:09:57,680
we don't

256
00:09:54,320 --> 00:10:01,120
deal with in high-level user code

257
00:09:57,680 --> 00:10:03,439
and in this case what i

258
00:10:01,120 --> 00:10:06,079
did was to try to get the best of both

259
00:10:03,440 --> 00:10:09,279
both worlds

260
00:10:06,079 --> 00:10:12,399
also because roster is relatively young

261
00:10:09,279 --> 00:10:14,880
and so it's still evolving so during the

262
00:10:12,399 --> 00:10:16,480
building process of the whole thing what

263
00:10:14,880 --> 00:10:17,200
happens is that first a low level

264
00:10:16,480 --> 00:10:21,440
binding

265
00:10:17,200 --> 00:10:21,440
binding is automatically generated

266
00:10:21,519 --> 00:10:27,519
and so we have the guarantee

267
00:10:25,040 --> 00:10:29,839
that we are using the actual existing

268
00:10:27,519 --> 00:10:32,640
cac functions

269
00:10:29,839 --> 00:10:34,000
and on top of that it's a high level

270
00:10:32,640 --> 00:10:37,439
manually written

271
00:10:34,000 --> 00:10:41,760
binding so this way users have a

272
00:10:37,440 --> 00:10:43,519
comfortable ada binding and i can detect

273
00:10:41,760 --> 00:10:45,600
immediately if something has changed

274
00:10:43,519 --> 00:10:48,399
underneath and instead of

275
00:10:45,600 --> 00:10:50,480
getting mysterious segmentation faults

276
00:10:48,399 --> 00:10:52,000
you get a compilation error

277
00:10:50,480 --> 00:10:55,519
because there is a mismatch between

278
00:10:52,000 --> 00:10:55,519
specifications and clients

279
00:10:56,240 --> 00:11:02,800
well now moving into the final part

280
00:11:00,480 --> 00:11:04,160
which is using the library i'm not going

281
00:11:02,800 --> 00:11:06,319
through

282
00:11:04,160 --> 00:11:08,640
detailed code because that's too boring

283
00:11:06,320 --> 00:11:11,120
so instead i'm going to show you just uh

284
00:11:08,640 --> 00:11:13,279
two examples

285
00:11:11,120 --> 00:11:15,440
hoping that everything works the first

286
00:11:13,279 --> 00:11:17,519
example is just a basic node that

287
00:11:15,440 --> 00:11:19,519
talks he says something and there's

288
00:11:17,519 --> 00:11:21,440
another node which is listening

289
00:11:19,519 --> 00:11:23,600
here for this first example i will use

290
00:11:21,440 --> 00:11:27,360
the sc plus plus node

291
00:11:23,600 --> 00:11:28,000
talking to the ada node so i would go to

292
00:11:27,360 --> 00:11:30,640
the

293
00:11:28,000 --> 00:11:31,600
to where i have the library with my code

294
00:11:30,640 --> 00:11:35,600
i would

295
00:11:31,600 --> 00:11:38,800
uh issue qualcomm build

296
00:11:35,600 --> 00:11:42,079
and hopefully everything gets compiled

297
00:11:38,800 --> 00:11:42,800
fine we'll see that this is a backup

298
00:11:42,079 --> 00:11:45,839
copy

299
00:11:42,800 --> 00:11:47,760
nothing if it goes wrong there is no

300
00:11:45,839 --> 00:11:49,760
problem yet

301
00:11:47,760 --> 00:11:50,880
there are some warnings that i have

302
00:11:49,760 --> 00:11:56,079
still to fix

303
00:11:50,880 --> 00:11:59,760
but yeah

304
00:11:56,079 --> 00:12:02,479
so those are totally

305
00:11:59,760 --> 00:12:04,480
fine warnings that do not affect the

306
00:12:02,480 --> 00:12:07,440
demonstration

307
00:12:04,480 --> 00:12:07,440
and for that

308
00:12:08,720 --> 00:12:13,120
here i'm going to launch the c plus plus

309
00:12:10,800 --> 00:12:13,120
node

310
00:12:13,600 --> 00:12:19,600
as you can see it's ros 2 invocation run

311
00:12:16,639 --> 00:12:20,399
within the diminished c package around

312
00:12:19,600 --> 00:12:23,440
the talker

313
00:12:20,399 --> 00:12:24,959
execute table and it starts it starts

314
00:12:23,440 --> 00:12:29,279
talking

315
00:12:24,959 --> 00:12:29,279
in the other side i will

316
00:12:33,839 --> 00:12:37,600
if that completion completion works

317
00:12:36,320 --> 00:12:41,680
that's a good signal

318
00:12:37,600 --> 00:12:43,839
and here the listener by integrating the

319
00:12:41,680 --> 00:12:46,000
building process with cmake we gain this

320
00:12:43,839 --> 00:12:46,880
that we get all the same features from

321
00:12:46,000 --> 00:12:49,200
ros

322
00:12:46,880 --> 00:12:50,959
that other client libraries have and now

323
00:12:49,200 --> 00:12:54,079
when this starts listening

324
00:12:50,959 --> 00:12:56,160
well whatever this says is

325
00:12:54,079 --> 00:12:57,920
heard to the other side this could be

326
00:12:56,160 --> 00:13:01,680
local local computer

327
00:12:57,920 --> 00:13:05,120
over the network or whatever and

328
00:13:01,680 --> 00:13:07,040
for something a little bit well

329
00:13:05,120 --> 00:13:08,959
if anyone is interested are other

330
00:13:07,040 --> 00:13:11,439
samples in the presentation that i

331
00:13:08,959 --> 00:13:13,119
just skipped for the client server

332
00:13:11,440 --> 00:13:15,920
communication

333
00:13:13,120 --> 00:13:17,279
and for the final demonstration which is

334
00:13:15,920 --> 00:13:19,199
a bit more involved

335
00:13:17,279 --> 00:13:20,480
i will show that you gain access not

336
00:13:19,200 --> 00:13:23,920
only to ros 2

337
00:13:20,480 --> 00:13:25,920
but also to ros1 because we can use

338
00:13:23,920 --> 00:13:27,839
a special node that is a bridge between

339
00:13:25,920 --> 00:13:30,639
the both versions

340
00:13:27,839 --> 00:13:32,240
so here i will have a a program

341
00:13:30,639 --> 00:13:36,000
commanding the simulator

342
00:13:32,240 --> 00:13:39,040
that comes with with rust which is the

343
00:13:36,000 --> 00:13:40,320
it's going back to our early days like a

344
00:13:39,040 --> 00:13:43,519
logo

345
00:13:40,320 --> 00:13:44,959
logo charcoal it's a differential drive

346
00:13:43,519 --> 00:13:47,600
robot it can

347
00:13:44,959 --> 00:13:49,439
go forward and and rotate but it cannot

348
00:13:47,600 --> 00:13:52,160
move laterally

349
00:13:49,440 --> 00:13:53,839
so i will send commands and those

350
00:13:52,160 --> 00:13:56,000
commands will travel through the bridge

351
00:13:53,839 --> 00:13:57,120
and reach the simulator which is right

352
00:13:56,000 --> 00:13:59,279
and written in

353
00:13:57,120 --> 00:14:01,199
a c plus node and we will see what

354
00:13:59,279 --> 00:14:04,480
happens

355
00:14:01,199 --> 00:14:07,439
okay so here since this requires

356
00:14:04,480 --> 00:14:09,120
launching several things the last one uh

357
00:14:07,440 --> 00:14:11,040
roscore

358
00:14:09,120 --> 00:14:12,800
the bridge and so on i have everything

359
00:14:11,040 --> 00:14:16,240
scripted hopefully

360
00:14:12,800 --> 00:14:19,439
everything will work and first of all

361
00:14:16,240 --> 00:14:20,880
here we have the ros name server here

362
00:14:19,440 --> 00:14:24,079
i'm going to launch

363
00:14:20,880 --> 00:14:30,079
the simulator here it is

364
00:14:24,079 --> 00:14:32,959
that i'm going to put on top

365
00:14:30,079 --> 00:14:34,319
here we have uh well it's kind of

366
00:14:32,959 --> 00:14:37,359
difficult to see

367
00:14:34,320 --> 00:14:40,639
i realize but okay

368
00:14:37,360 --> 00:14:44,639
so now i'm going to launch the

369
00:14:40,639 --> 00:14:47,120
i ada client

370
00:14:44,639 --> 00:14:48,880
and the robot should start moving i

371
00:14:47,120 --> 00:14:51,279
cannot change the size because that's a

372
00:14:48,880 --> 00:14:53,279
fixed size window

373
00:14:51,279 --> 00:14:55,519
here we are seeing the messages as they

374
00:14:53,279 --> 00:14:59,120
go through the network

375
00:14:55,519 --> 00:15:01,680
with the rostopic echo

376
00:14:59,120 --> 00:15:02,639
and well this is a pre-programmed

377
00:15:01,680 --> 00:15:05,040
sequence of

378
00:15:02,639 --> 00:15:06,720
linear speed and angular speed there is

379
00:15:05,040 --> 00:15:09,120
no feedback

380
00:15:06,720 --> 00:15:10,079
anything could go wrong but in a sense

381
00:15:09,120 --> 00:15:13,279
you have access to

382
00:15:10,079 --> 00:15:15,839
all the facilities of any ros 2 note

383
00:15:13,279 --> 00:15:19,279
and well that's it it's finished now

384
00:15:15,839 --> 00:15:22,320
it's starting to go around in circles

385
00:15:19,279 --> 00:15:22,320
so as conclusion

386
00:15:23,760 --> 00:15:29,680
presentation is here the pro

387
00:15:27,199 --> 00:15:32,000
the project uh the conclusion is that

388
00:15:29,680 --> 00:15:34,719
ros2 is in

389
00:15:32,000 --> 00:15:35,680
on kind of equal standing for ada

390
00:15:34,720 --> 00:15:38,959
programmers

391
00:15:35,680 --> 00:15:40,479
uh the whole point is to eliminate a

392
00:15:38,959 --> 00:15:44,079
barrier of entry

393
00:15:40,480 --> 00:15:47,759
for ada programmers to rows and rows 2.

394
00:15:44,079 --> 00:15:51,359
there is well the next revolution may be

395
00:15:47,759 --> 00:15:53,040
that of robotics it's here so

396
00:15:51,360 --> 00:15:55,600
not been able to easily program with

397
00:15:53,040 --> 00:15:58,639
data seems like uh

398
00:15:55,600 --> 00:16:00,399
intuitive you can do that

399
00:15:58,639 --> 00:16:01,759
also the library has some special

400
00:16:00,399 --> 00:16:02,480
properties that the other client

401
00:16:01,759 --> 00:16:04,399
libraries

402
00:16:02,480 --> 00:16:08,079
don't have like for example thanks to

403
00:16:04,399 --> 00:16:10,240
the ada superior stack management

404
00:16:08,079 --> 00:16:11,519
there is no dynamic allocations in the

405
00:16:10,240 --> 00:16:13,600
aida part

406
00:16:11,519 --> 00:16:15,680
so it so everything is can be allocated

407
00:16:13,600 --> 00:16:19,440
in the stack if you want

408
00:16:15,680 --> 00:16:22,719
and this also

409
00:16:19,440 --> 00:16:25,360
might simplify using spark verified

410
00:16:22,720 --> 00:16:25,360
algorithms

411
00:16:25,440 --> 00:16:31,839
more easily with with ros robots

412
00:16:28,959 --> 00:16:33,040
and well everything i have shown you

413
00:16:31,839 --> 00:16:36,399
right now is

414
00:16:33,040 --> 00:16:39,519
done for the bouncy version of ross 2

415
00:16:36,399 --> 00:16:42,160
which is end of la end of life

416
00:16:39,519 --> 00:16:42,639
but yesterday i got confirmation that i

417
00:16:42,160 --> 00:16:45,680
got

418
00:16:42,639 --> 00:16:46,560
a small grant to work on porting this to

419
00:16:45,680 --> 00:16:49,359
the latest

420
00:16:46,560 --> 00:16:50,000
roster version and keep it up to date

421
00:16:49,360 --> 00:16:52,399
and integrate

422
00:16:50,000 --> 00:16:53,120
it into the build farm of russ2 so it

423
00:16:52,399 --> 00:16:56,320
should

424
00:16:53,120 --> 00:16:56,800
leave moving forward and be kept up to

425
00:16:56,320 --> 00:16:59,120
date

426
00:16:56,800 --> 00:17:00,399
and have fully integrated as a

427
00:16:59,120 --> 00:17:03,120
first-class language

428
00:17:00,399 --> 00:17:03,759
even if the open source robotics

429
00:17:03,120 --> 00:17:19,839
foundation

430
00:17:03,759 --> 00:17:19,839
is willing and that's it thanks

431
00:17:30,240 --> 00:17:33,840
sorry i didn't have the last part what

432
00:17:32,400 --> 00:17:35,919
what do you need to do now

433
00:17:33,840 --> 00:17:37,120
that you have the board up and running

434
00:17:35,919 --> 00:17:40,080
to keep seeing

435
00:17:37,120 --> 00:17:43,439
crap today with the changes that are

436
00:17:40,080 --> 00:17:43,439
going into the rcm

437
00:17:44,320 --> 00:17:48,960
please repeat the question yeah i think

438
00:17:47,039 --> 00:17:51,039
it's what's the maintenance

439
00:17:48,960 --> 00:17:52,640
repeat the question otherwise it's not

440
00:17:51,039 --> 00:17:55,520
recorded

441
00:17:52,640 --> 00:17:57,840
oh yeah so the the question is that uh

442
00:17:55,520 --> 00:17:58,559
what's the maintenance needs to ensure

443
00:17:57,840 --> 00:18:01,600
that this

444
00:17:58,559 --> 00:18:02,480
keeps in sync with the rest well thanks

445
00:18:01,600 --> 00:18:05,678
to the

446
00:18:02,480 --> 00:18:06,320
automatic binding i already know that

447
00:18:05,679 --> 00:18:08,160
for the

448
00:18:06,320 --> 00:18:10,320
latest roster version there are some

449
00:18:08,160 --> 00:18:12,400
breaking changes the first step is going

450
00:18:10,320 --> 00:18:16,159
to be to fix those changes

451
00:18:12,400 --> 00:18:19,200
hopefully rcl will be stable in

452
00:18:16,160 --> 00:18:21,440
the future with only new features so the

453
00:18:19,200 --> 00:18:23,200
maintenance work will be to add those

454
00:18:21,440 --> 00:18:25,200
new features for example actions are

455
00:18:23,200 --> 00:18:27,200
still not implemented that's another

456
00:18:25,200 --> 00:18:29,840
of the milestone of the of this new

457
00:18:27,200 --> 00:18:29,840
project

458
00:18:40,480 --> 00:18:42,799
another

459
00:18:50,960 --> 00:18:55,280
yeah what was the part that required the

460
00:18:53,600 --> 00:18:59,600
most work to create the

461
00:18:55,280 --> 00:18:59,600
library for me it was

462
00:19:02,320 --> 00:19:05,600
integrating the cmake building process

463
00:19:04,960 --> 00:19:08,320
that was

464
00:19:05,600 --> 00:19:11,199
really complex to understand because ros

465
00:19:08,320 --> 00:19:13,918
2 works with templating of

466
00:19:11,200 --> 00:19:15,600
messages and there are many hidden

467
00:19:13,919 --> 00:19:16,080
dependencies between packages that are

468
00:19:15,600 --> 00:19:19,520
not

469
00:19:16,080 --> 00:19:23,039
explained anywhere because for a normal

470
00:19:19,520 --> 00:19:24,879
user it's not necessary to know

471
00:19:23,039 --> 00:19:26,720
then the binding of course is more work

472
00:19:24,880 --> 00:19:30,000
because it's quite big

473
00:19:26,720 --> 00:19:32,400
api but it's more mechanical so the

474
00:19:30,000 --> 00:19:35,039
more difficult was to get to understand

475
00:19:32,400 --> 00:19:36,000
how the build process worked with cmake

476
00:19:35,039 --> 00:19:41,039
with python

477
00:19:36,000 --> 00:19:41,039
sometimes on the mix yeah

478
00:19:50,320 --> 00:19:59,859
okay okay thank you

479
00:19:52,980 --> 00:19:59,859
[Applause]

