1
00:00:05,359 --> 00:00:07,759
uh

2
00:00:06,000 --> 00:00:09,280
now it's time to introduce bob that is

3
00:00:07,759 --> 00:00:10,160
going to talk about communication

4
00:00:09,280 --> 00:00:14,079
breakdown

5
00:00:10,160 --> 00:00:14,080
coverage so please welcome him

6
00:00:14,160 --> 00:00:21,279
thank you

7
00:00:17,520 --> 00:00:24,640
so first mike can you hear me

8
00:00:21,279 --> 00:00:26,320
yeah okay uh i'll try to entertain you

9
00:00:24,640 --> 00:00:30,080
during this lunch break

10
00:00:26,320 --> 00:00:33,360
um i'm gonna talk about communication

11
00:00:30,080 --> 00:00:34,559
on co-routines and i'm a mobile lead

12
00:00:33,360 --> 00:00:37,519
developer at quick

13
00:00:34,559 --> 00:00:40,879
with headquarters in finland and i'm

14
00:00:37,520 --> 00:00:40,879
based in stockholm sweden

15
00:00:41,120 --> 00:00:46,640
so co-routines we had a lot of talk

16
00:00:44,239 --> 00:00:48,000
about them so i'm not going to go into

17
00:00:46,640 --> 00:00:49,440
them i'm going to talk about the

18
00:00:48,000 --> 00:00:53,039
communication

19
00:00:49,440 --> 00:00:54,000
and basically one of the main problems i

20
00:00:53,039 --> 00:00:57,120
see is

21
00:00:54,000 --> 00:01:00,960
think of them as lightweight threats

22
00:00:57,120 --> 00:01:04,319
so we're gonna see why we might not

23
00:01:00,960 --> 00:01:06,400
take that too literally

24
00:01:04,319 --> 00:01:08,960
and we're also gonna see what do we mean

25
00:01:06,400 --> 00:01:12,720
by light weight

26
00:01:08,960 --> 00:01:15,919
should we treat them as threads

27
00:01:12,720 --> 00:01:21,039
because they might be and

28
00:01:15,920 --> 00:01:24,400
also let's see if this works

29
00:01:21,040 --> 00:01:25,439
whoa it's fast this function main run

30
00:01:24,400 --> 00:01:28,479
blocking

31
00:01:25,439 --> 00:01:30,000
it's going to be in every slide but it's

32
00:01:28,479 --> 00:01:32,400
going to be invisible so you have to

33
00:01:30,000 --> 00:01:34,000
stare at it so it's locked into your

34
00:01:32,400 --> 00:01:37,439
eyes

35
00:01:34,000 --> 00:01:39,200
for two more seconds and now it's gone

36
00:01:37,439 --> 00:01:40,479
so but it's always going to be there so

37
00:01:39,200 --> 00:01:41,360
we're always going to have the main

38
00:01:40,479 --> 00:01:44,560
scope

39
00:01:41,360 --> 00:01:47,039
to run all the core routines on

40
00:01:44,560 --> 00:01:48,799
and by lightweight we've seen this

41
00:01:47,040 --> 00:01:52,320
example before

42
00:01:48,799 --> 00:01:53,600
here we create 100 000 co routines with

43
00:01:52,320 --> 00:01:56,880
the launch

44
00:01:53,600 --> 00:02:00,320
builder co-routine builder and it takes

45
00:01:56,880 --> 00:02:03,520
around 150 milliseconds to run

46
00:02:00,320 --> 00:02:07,679
on my machine and now we switch

47
00:02:03,520 --> 00:02:12,560
to threads and it's up to five seconds

48
00:02:07,680 --> 00:02:12,560
to run this so yeah they're lightweight

49
00:02:13,520 --> 00:02:17,760
let's go back to co routines and now

50
00:02:16,319 --> 00:02:21,519
we're using a dispatcher

51
00:02:17,760 --> 00:02:23,359
the default dispatcher which comes on my

52
00:02:21,520 --> 00:02:25,680
machine on eight threads

53
00:02:23,360 --> 00:02:27,920
it's usually the number of cores on your

54
00:02:25,680 --> 00:02:31,040
machine times two

55
00:02:27,920 --> 00:02:31,440
so it's very effective and this takes

56
00:02:31,040 --> 00:02:34,959
around

57
00:02:31,440 --> 00:02:36,160
800 milliseconds to run and if we switch

58
00:02:34,959 --> 00:02:37,920
to io

59
00:02:36,160 --> 00:02:39,440
that doesn't really have a limit i

60
00:02:37,920 --> 00:02:42,319
cranked it up to about

61
00:02:39,440 --> 00:02:44,160
eight to four threads on this machine

62
00:02:42,319 --> 00:02:46,238
and

63
00:02:44,160 --> 00:02:48,000
it's the more threads you're going to

64
00:02:46,239 --> 00:02:52,239
use

65
00:02:48,000 --> 00:02:52,239
the more time it's going to take so

66
00:02:52,879 --> 00:02:57,120
and how about thread safety dispatchers

67
00:02:55,519 --> 00:02:59,519
you can think of it as sort of like

68
00:02:57,120 --> 00:03:03,200
thread pulls but not really

69
00:02:59,519 --> 00:03:04,159
uh there are rules deciding on where you

70
00:03:03,200 --> 00:03:07,839
can run

71
00:03:04,159 --> 00:03:11,519
your core routines and thread safety

72
00:03:07,840 --> 00:03:15,360
um just a quick show of hands is this

73
00:03:11,519 --> 00:03:15,360
thread safe yes show hands

74
00:03:16,800 --> 00:03:22,720
no it's not because we run on

75
00:03:20,080 --> 00:03:24,879
possibly eight threads and we have a

76
00:03:22,720 --> 00:03:27,120
shared neutral stake

77
00:03:24,879 --> 00:03:28,000
and the same goes for io it's just

78
00:03:27,120 --> 00:03:32,879
another

79
00:03:28,000 --> 00:03:35,360
thread pool ish how about now

80
00:03:32,879 --> 00:03:37,599
remember that function main run blocking

81
00:03:35,360 --> 00:03:41,280
we're running on the main thread

82
00:03:37,599 --> 00:03:44,000
we launch 100 000 co routines

83
00:03:41,280 --> 00:03:44,799
but this is actually thread safe because

84
00:03:44,000 --> 00:03:48,480
we all run

85
00:03:44,799 --> 00:03:51,200
on maine because coroutines inherit the

86
00:03:48,480 --> 00:03:54,319
dispatchers from their parents

87
00:03:51,200 --> 00:03:57,679
but you might have a co-worker who

88
00:03:54,319 --> 00:03:58,879
does this and now it's not really safe

89
00:03:57,680 --> 00:04:03,280
anymore

90
00:03:58,879 --> 00:04:03,280
so we have to be careful

91
00:04:04,400 --> 00:04:09,040
and just to make sure when i started

92
00:04:06,799 --> 00:04:12,000
learning java a couple of years ago and

93
00:04:09,040 --> 00:04:13,599
threading a bunch of years ago i

94
00:04:12,000 --> 00:04:16,478
actually thought this would help

95
00:04:13,599 --> 00:04:17,358
to add a volatile keyword or annotations

96
00:04:16,478 --> 00:04:21,039
to it

97
00:04:17,358 --> 00:04:23,198
it doesn't the volatile only makes sure

98
00:04:21,040 --> 00:04:24,720
that you don't use the cash value you

99
00:04:23,199 --> 00:04:27,440
read it every time

100
00:04:24,720 --> 00:04:28,000
but you it doesn't prevent anyone else

101
00:04:27,440 --> 00:04:29,840
from reading

102
00:04:28,000 --> 00:04:31,120
the same value and writing the same

103
00:04:29,840 --> 00:04:34,960
value

104
00:04:31,120 --> 00:04:34,960
so volatile doesn't help us

105
00:04:35,440 --> 00:04:40,240
so can we treat them as threads and be

106
00:04:38,000 --> 00:04:40,240
fine

107
00:04:41,680 --> 00:04:45,360
someone mentioned the unconfined

108
00:04:43,759 --> 00:04:48,320
dispatcher as well

109
00:04:45,360 --> 00:04:48,960
and i think it should be whatever

110
00:04:48,320 --> 00:04:52,320
instead

111
00:04:48,960 --> 00:04:54,400
renamed to whatever i just follow along

112
00:04:52,320 --> 00:04:56,000
because what it does here we have our

113
00:04:54,400 --> 00:04:57,039
function main so we're running on the

114
00:04:56,000 --> 00:04:58,800
main thread

115
00:04:57,040 --> 00:05:00,160
and when you get into a co routine with

116
00:04:58,800 --> 00:05:02,000
the unconfined

117
00:05:00,160 --> 00:05:03,600
it says okay you're on the main thread

118
00:05:02,000 --> 00:05:06,639
i'm just going to tag along

119
00:05:03,600 --> 00:05:09,360
i don't care so the first statement

120
00:05:06,639 --> 00:05:10,639
print a1 is going to be on the main

121
00:05:09,360 --> 00:05:13,039
thread

122
00:05:10,639 --> 00:05:15,199
and then we do a delay which has a

123
00:05:13,039 --> 00:05:17,120
different dispatcher

124
00:05:15,199 --> 00:05:18,720
and when it comes back the unconfined

125
00:05:17,120 --> 00:05:19,919
core routine is going to say okay you're

126
00:05:18,720 --> 00:05:23,039
on a new thread

127
00:05:19,919 --> 00:05:26,799
new context i'll tag along you

128
00:05:23,039 --> 00:05:29,520
it doesn't preserve your context so

129
00:05:26,800 --> 00:05:30,800
the a2 is going to be running on a

130
00:05:29,520 --> 00:05:34,719
different thread

131
00:05:30,800 --> 00:05:34,720
or possibly often

132
00:05:35,120 --> 00:05:40,400
and unconfined is for a corner case

133
00:05:38,639 --> 00:05:43,120
i haven't seen them being used in

134
00:05:40,400 --> 00:05:45,919
production code yet

135
00:05:43,120 --> 00:05:48,639
but you can have the similar result with

136
00:05:45,919 --> 00:05:52,479
this example

137
00:05:48,639 --> 00:05:55,759
we launch on the dispatcher i o

138
00:05:52,479 --> 00:05:58,080
we print a one on thread

139
00:05:55,759 --> 00:06:00,000
worker one say then we call the

140
00:05:58,080 --> 00:06:02,800
suspension functions which

141
00:06:00,000 --> 00:06:04,800
declares a with context and a different

142
00:06:02,800 --> 00:06:07,680
dispatcher

143
00:06:04,800 --> 00:06:08,560
and here you can possibly have end up in

144
00:06:07,680 --> 00:06:10,960
a different

145
00:06:08,560 --> 00:06:12,639
thread you are going to end up in a

146
00:06:10,960 --> 00:06:13,120
different context but you can switch

147
00:06:12,639 --> 00:06:15,759
thread

148
00:06:13,120 --> 00:06:16,560
and you can stay in the same one and

149
00:06:15,759 --> 00:06:20,160
when you come

150
00:06:16,560 --> 00:06:23,840
back to the co routine

151
00:06:20,160 --> 00:06:26,240
from the suspension and print a2

152
00:06:23,840 --> 00:06:27,359
you can just follow along the other

153
00:06:26,240 --> 00:06:30,800
thread

154
00:06:27,360 --> 00:06:31,840
so you might get this and it's perfectly

155
00:06:30,800 --> 00:06:35,520
safe

156
00:06:31,840 --> 00:06:38,159
but you can also get this

157
00:06:35,520 --> 00:06:39,440
the thing to be aware of is that after

158
00:06:38,160 --> 00:06:41,039
the switch context you're going to

159
00:06:39,440 --> 00:06:44,160
continue on that

160
00:06:41,039 --> 00:06:46,719
thread instead of coming back so

161
00:06:44,160 --> 00:06:49,840
thirds and core routines aren't exactly

162
00:06:46,720 --> 00:06:49,840
one one match

163
00:06:50,000 --> 00:06:53,680
and just to make it even clearer why

164
00:06:53,120 --> 00:06:55,440
it's

165
00:06:53,680 --> 00:06:57,280
kind of confusing to think of them

166
00:06:55,440 --> 00:07:00,000
literally as threads

167
00:06:57,280 --> 00:07:02,080
is if you have a thread local which

168
00:07:00,000 --> 00:07:05,840
contains your

169
00:07:02,080 --> 00:07:07,680
um your value on a thread

170
00:07:05,840 --> 00:07:09,919
so if you switch red you're going to

171
00:07:07,680 --> 00:07:13,919
have a new value that you can share

172
00:07:09,919 --> 00:07:17,440
on that thread so given the same example

173
00:07:13,919 --> 00:07:20,960
we can have or we we set the

174
00:07:17,440 --> 00:07:24,639
local to io first then we read it we

175
00:07:20,960 --> 00:07:27,039
call switch context we read it again

176
00:07:24,639 --> 00:07:27,840
we set it to default and we come back

177
00:07:27,039 --> 00:07:30,960
and read it

178
00:07:27,840 --> 00:07:33,440
one third time so we can have

179
00:07:30,960 --> 00:07:34,719
i o i o default meaning we're all

180
00:07:33,440 --> 00:07:37,919
running on the same

181
00:07:34,720 --> 00:07:41,039
thread the thread local stays the same

182
00:07:37,919 --> 00:07:43,280
during the entire operations but we can

183
00:07:41,039 --> 00:07:45,759
also switch straight

184
00:07:43,280 --> 00:07:48,318
and now thread local are thread safe

185
00:07:45,759 --> 00:07:51,440
they're going to stick to their thread

186
00:07:48,319 --> 00:07:54,560
and this is a proof of that because we

187
00:07:51,440 --> 00:07:56,000
switch threads and when we're coming

188
00:07:54,560 --> 00:07:57,680
back to print a2

189
00:07:56,000 --> 00:07:59,759
we're on the new thread with a new

190
00:07:57,680 --> 00:08:01,680
thread local value

191
00:07:59,759 --> 00:08:03,039
but it reads wrong in your head when you

192
00:08:01,680 --> 00:08:06,000
have a co routine

193
00:08:03,039 --> 00:08:07,280
with different thread local values so i

194
00:08:06,000 --> 00:08:10,240
i would suggest

195
00:08:07,280 --> 00:08:11,039
just for your insanity to not combine

196
00:08:10,240 --> 00:08:14,479
those

197
00:08:11,039 --> 00:08:19,759
because you're not it's not

198
00:08:14,479 --> 00:08:19,758
readable code to have this differentiate

199
00:08:20,479 --> 00:08:27,520
so we should treat them as co-routines

200
00:08:24,479 --> 00:08:30,878
and another example from

201
00:08:27,520 --> 00:08:34,240
dan leb is

202
00:08:30,879 --> 00:08:36,000
if you use synchronized this

203
00:08:34,240 --> 00:08:37,680
actually when you have a thread like

204
00:08:36,000 --> 00:08:40,000
this or we create

205
00:08:37,679 --> 00:08:41,199
two threads and call a synchronous

206
00:08:40,000 --> 00:08:43,200
function

207
00:08:41,200 --> 00:08:44,320
we're gonna have starting ending

208
00:08:43,200 --> 00:08:46,320
starting ending

209
00:08:44,320 --> 00:08:48,080
the annotation is gonna help us

210
00:08:46,320 --> 00:08:50,080
synchronize the code so

211
00:08:48,080 --> 00:08:51,120
only one thread is gonna be allowed in

212
00:08:50,080 --> 00:08:54,560
it at

213
00:08:51,120 --> 00:08:57,760
any given time and if we change

214
00:08:54,560 --> 00:09:00,239
to co routines

215
00:08:57,760 --> 00:09:01,279
we launch two co routines and we call

216
00:09:00,240 --> 00:09:03,279
the same function

217
00:09:01,279 --> 00:09:05,200
but now it's a suspending function and

218
00:09:03,279 --> 00:09:06,640
we do a delay

219
00:09:05,200 --> 00:09:10,560
this is actually going to print out

220
00:09:06,640 --> 00:09:12,319
starting starting ending ending

221
00:09:10,560 --> 00:09:14,160
and to understand that we have to

222
00:09:12,320 --> 00:09:17,279
understand how suspending

223
00:09:14,160 --> 00:09:19,920
mechanism works in co routines

224
00:09:17,279 --> 00:09:22,000
what it actually does on a high level is

225
00:09:19,920 --> 00:09:24,160
when you call from a core routine when

226
00:09:22,000 --> 00:09:26,320
you enter the critical section

227
00:09:24,160 --> 00:09:27,680
it's going to acquire the lock so it's

228
00:09:26,320 --> 00:09:28,640
going to do the same thing it's going to

229
00:09:27,680 --> 00:09:30,399
lock

230
00:09:28,640 --> 00:09:32,560
the function it's going to print

231
00:09:30,399 --> 00:09:35,680
starting and then it hits

232
00:09:32,560 --> 00:09:38,640
the suspending function and gonna

233
00:09:35,680 --> 00:09:40,079
put the state into a continuation and

234
00:09:38,640 --> 00:09:43,439
suspend it

235
00:09:40,080 --> 00:09:46,240
and then it releases the lock

236
00:09:43,440 --> 00:09:47,600
so it actually divides this function

237
00:09:46,240 --> 00:09:49,440
into two

238
00:09:47,600 --> 00:09:51,519
and when the suspension is done it's

239
00:09:49,440 --> 00:09:54,880
going to acquire the lock again

240
00:09:51,519 --> 00:09:56,240
and print the ending and then release

241
00:09:54,880 --> 00:09:59,920
the lock

242
00:09:56,240 --> 00:10:02,160
so that's why we can have this order

243
00:09:59,920 --> 00:10:03,199
because during the suspension the other

244
00:10:02,160 --> 00:10:05,839
thread comes in

245
00:10:03,200 --> 00:10:05,839
and takes over

246
00:10:07,360 --> 00:10:12,320
so never use suspending with the

247
00:10:10,480 --> 00:10:14,480
synchronized annotation

248
00:10:12,320 --> 00:10:15,839
you can do it if you don't call any

249
00:10:14,480 --> 00:10:19,839
suspension functions

250
00:10:15,839 --> 00:10:22,000
inside of it but it's not safe so

251
00:10:19,839 --> 00:10:22,880
someone will put the suspension function

252
00:10:22,000 --> 00:10:26,320
in there

253
00:10:22,880 --> 00:10:29,680
eventually so let's

254
00:10:26,320 --> 00:10:31,970
do the communication like we should in

255
00:10:29,680 --> 00:10:33,279
co routines

256
00:10:31,970 --> 00:10:35,120
[Music]

257
00:10:33,279 --> 00:10:38,000
deferred we mentioned it and talked a

258
00:10:35,120 --> 00:10:38,000
little bit about it

259
00:10:38,640 --> 00:10:45,279
it's often used with the async builder

260
00:10:42,000 --> 00:10:48,079
which launches a protein and

261
00:10:45,279 --> 00:10:49,920
the last value of the co routine or if

262
00:10:48,079 --> 00:10:51,839
you return explicitly

263
00:10:49,920 --> 00:10:54,240
is going to be the deferred value it's

264
00:10:51,839 --> 00:10:58,320
kind of like a future

265
00:10:54,240 --> 00:10:58,320
and when you're

266
00:10:58,800 --> 00:11:01,839
when you need the value you call a wait

267
00:11:01,120 --> 00:11:05,120
on it

268
00:11:01,839 --> 00:11:07,680
and then it's going to wait until the

269
00:11:05,120 --> 00:11:10,399
async block is finished and return the

270
00:11:07,680 --> 00:11:10,399
value for you

271
00:11:11,040 --> 00:11:18,719
and the async is executed directly

272
00:11:14,880 --> 00:11:20,720
just to prove that we have this code

273
00:11:18,720 --> 00:11:22,880
this entire block actually takes two

274
00:11:20,720 --> 00:11:25,600
seconds

275
00:11:22,880 --> 00:11:27,680
the second async block is going to

276
00:11:25,600 --> 00:11:30,560
finish before the first one

277
00:11:27,680 --> 00:11:31,519
but when we await the results it

278
00:11:30,560 --> 00:11:34,640
suspends

279
00:11:31,519 --> 00:11:37,519
so the second wait won't be called until

280
00:11:34,640 --> 00:11:38,640
the first two seconds are done but that

281
00:11:37,519 --> 00:11:40,880
suspend is gonna

282
00:11:38,640 --> 00:11:43,839
release directly so it's gonna be like a

283
00:11:40,880 --> 00:11:43,839
regular call

284
00:11:44,800 --> 00:11:51,359
we could also do this more manually

285
00:11:48,399 --> 00:11:52,720
with a completable deferred that you

286
00:11:51,360 --> 00:11:54,880
actually control yourself

287
00:11:52,720 --> 00:11:55,760
so you don't have to use the async

288
00:11:54,880 --> 00:11:58,639
builder

289
00:11:55,760 --> 00:12:00,000
you can use like an actor or just a

290
00:11:58,639 --> 00:12:03,600
regular launch

291
00:12:00,000 --> 00:12:06,000
or on a car routine and what you have to

292
00:12:03,600 --> 00:12:09,600
do then is you have to call the complete

293
00:12:06,000 --> 00:12:12,399
on it to say this deferred

294
00:12:09,600 --> 00:12:12,880
is completed it's done you don't have to

295
00:12:12,399 --> 00:12:16,880
wait

296
00:12:12,880 --> 00:12:17,519
anymore just this example is just to

297
00:12:16,880 --> 00:12:21,040
show that

298
00:12:17,519 --> 00:12:23,519
even though deferred

299
00:12:21,040 --> 00:12:24,880
or completable deferred is a safe way of

300
00:12:23,519 --> 00:12:28,560
communicating

301
00:12:24,880 --> 00:12:31,920
we still can't share a state

302
00:12:28,560 --> 00:12:35,680
because this can altering

303
00:12:31,920 --> 00:12:38,240
the the object that we send to complete

304
00:12:35,680 --> 00:12:39,199
after we send to complete will actually

305
00:12:38,240 --> 00:12:42,560
still alter

306
00:12:39,200 --> 00:12:45,279
the object so it's not

307
00:12:42,560 --> 00:12:46,638
um it's not safe to assume that whatever

308
00:12:45,279 --> 00:12:50,560
we complete is gonna

309
00:12:46,639 --> 00:12:52,160
stick through forever so we should use a

310
00:12:50,560 --> 00:12:55,199
valance that we don't

311
00:12:52,160 --> 00:12:55,199
want to do like this

312
00:12:55,760 --> 00:12:58,800
but one thing that's good with a

313
00:12:58,079 --> 00:13:02,638
complete will

314
00:12:58,800 --> 00:13:05,680
deferrable is that if you call complete

315
00:13:02,639 --> 00:13:09,200
multiple times it's only the first one

316
00:13:05,680 --> 00:13:12,000
that's actually going to complete it so

317
00:13:09,200 --> 00:13:12,399
in this code we're always going to have

318
00:13:12,000 --> 00:13:14,959
bob

319
00:13:12,399 --> 00:13:16,720
sent never going to have charlie you can

320
00:13:14,959 --> 00:13:20,239
still call it and you can start

321
00:13:16,720 --> 00:13:22,480
call complete how many times you want

322
00:13:20,240 --> 00:13:23,839
the first one is going to return true

323
00:13:22,480 --> 00:13:26,399
that it completed

324
00:13:23,839 --> 00:13:27,440
the deferred all the others is going to

325
00:13:26,399 --> 00:13:31,120
return false

326
00:13:27,440 --> 00:13:31,120
because they don't do anything

327
00:13:32,560 --> 00:13:37,439
and just to be explicit that it's

328
00:13:34,959 --> 00:13:40,560
communication between core routines

329
00:13:37,440 --> 00:13:40,560
it's perfectly safe

330
00:13:40,639 --> 00:13:43,680
second one we're going to talk about is

331
00:13:42,560 --> 00:13:46,560
channels

332
00:13:43,680 --> 00:13:48,079
they provide a way to transfer stream of

333
00:13:46,560 --> 00:13:52,160
values deferred all for one

334
00:13:48,079 --> 00:13:55,599
value channels are for multiple values

335
00:13:52,160 --> 00:13:58,319
so let's get familiar with it

336
00:13:55,600 --> 00:13:58,880
here we launch on the dispatch default

337
00:13:58,320 --> 00:14:01,920
and we

338
00:13:58,880 --> 00:14:02,880
send two values on a channel and the

339
00:14:01,920 --> 00:14:05,920
send function

340
00:14:02,880 --> 00:14:08,000
is a suspending function so

341
00:14:05,920 --> 00:14:11,439
it's going to suspend until someone

342
00:14:08,000 --> 00:14:13,040
calls receive on the same channel

343
00:14:11,440 --> 00:14:15,040
and here we send two times and we

344
00:14:13,040 --> 00:14:17,839
receive two times

345
00:14:15,040 --> 00:14:19,839
just to be clear this code will never

346
00:14:17,839 --> 00:14:22,959
terminate

347
00:14:19,839 --> 00:14:26,000
because we call send

348
00:14:22,959 --> 00:14:29,518
and then it suspends it will never get

349
00:14:26,000 --> 00:14:32,320
to the receive line of code

350
00:14:29,519 --> 00:14:33,519
so we have to do it on different core

351
00:14:32,320 --> 00:14:36,560
routines

352
00:14:33,519 --> 00:14:39,680
to be able to complete the code or we

353
00:14:36,560 --> 00:14:42,239
can alter the channel

354
00:14:39,680 --> 00:14:44,000
by adding a buffer so now i have a

355
00:14:42,240 --> 00:14:45,760
buffer of one

356
00:14:44,000 --> 00:14:47,360
so you can send to the channel it's

357
00:14:45,760 --> 00:14:50,399
gonna buffer the value and

358
00:14:47,360 --> 00:14:53,440
release the suspension and

359
00:14:50,399 --> 00:14:55,440
so there are a couple different types of

360
00:14:53,440 --> 00:14:57,360
channels where you get the buffered one

361
00:14:55,440 --> 00:14:58,480
you decide how big the buffer is going

362
00:14:57,360 --> 00:15:02,079
to be

363
00:14:58,480 --> 00:15:02,079
before send suspends

364
00:15:03,600 --> 00:15:07,519
and then we have unlimited when send

365
00:15:06,320 --> 00:15:11,199
never suspends

366
00:15:07,519 --> 00:15:14,320
you can just keep on hitting it

367
00:15:11,199 --> 00:15:15,760
and it's gonna be like essentially a

368
00:15:14,320 --> 00:15:18,959
blocking queue

369
00:15:15,760 --> 00:15:19,519
um conflated we talked about a little

370
00:15:18,959 --> 00:15:22,319
bit in

371
00:15:19,519 --> 00:15:22,959
earlier talks that's actually gonna

372
00:15:22,320 --> 00:15:24,959
store

373
00:15:22,959 --> 00:15:27,920
the recent value so send will never

374
00:15:24,959 --> 00:15:30,319
suspend on this one either

375
00:15:27,920 --> 00:15:31,599
if it has a value it's going to replace

376
00:15:30,320 --> 00:15:34,399
it so it's always

377
00:15:31,600 --> 00:15:35,440
only going to keep the latest one and if

378
00:15:34,399 --> 00:15:38,639
someone receives that

379
00:15:35,440 --> 00:15:41,839
value it's going to be empty so receive

380
00:15:38,639 --> 00:15:43,680
can still suspend until there's a value

381
00:15:41,839 --> 00:15:48,000
there

382
00:15:43,680 --> 00:15:50,239
and rendezvous is the default way

383
00:15:48,000 --> 00:15:51,440
one send and one receive function they

384
00:15:50,240 --> 00:15:55,839
have to meet

385
00:15:51,440 --> 00:15:55,839
to transfer the value

386
00:15:58,240 --> 00:16:01,600
yeah and also there are terminal

387
00:16:00,560 --> 00:16:04,160
operators

388
00:16:01,600 --> 00:16:05,199
or functions two channels like to list

389
00:16:04,160 --> 00:16:06,639
here

390
00:16:05,199 --> 00:16:08,639
that's actually going to wait for the

391
00:16:06,639 --> 00:16:12,560
entire channel to complete

392
00:16:08,639 --> 00:16:16,240
and then we're gonna make it a list

393
00:16:12,560 --> 00:16:19,359
and this won't terminate either

394
00:16:16,240 --> 00:16:21,519
because it doesn't know if the channel

395
00:16:19,360 --> 00:16:24,480
is done sending or not

396
00:16:21,519 --> 00:16:28,160
we have to close the channels to be able

397
00:16:24,480 --> 00:16:28,160
to have terminal functions on them

398
00:16:30,639 --> 00:16:36,880
so let's see where they're excel

399
00:16:34,720 --> 00:16:38,320
and there's a pattern called fanning you

400
00:16:36,880 --> 00:16:41,680
have many producers

401
00:16:38,320 --> 00:16:44,880
and only one consumer

402
00:16:41,680 --> 00:16:45,390
so here we launch

403
00:16:44,880 --> 00:16:48,160
two

404
00:16:45,390 --> 00:16:51,279
[Music]

405
00:16:48,160 --> 00:16:52,800
we launched two core routines um and

406
00:16:51,279 --> 00:16:55,199
we're gonna send them to a

407
00:16:52,800 --> 00:16:56,560
race suspended function that's just

408
00:16:55,199 --> 00:17:00,959
gonna randomly

409
00:16:56,560 --> 00:17:03,439
uh release them in zero to five seconds

410
00:17:00,959 --> 00:17:04,000
and then we're gonna have one core

411
00:17:03,440 --> 00:17:07,120
routine

412
00:17:04,000 --> 00:17:08,079
that's listening or receiving these

413
00:17:07,119 --> 00:17:12,510
functions

414
00:17:08,079 --> 00:17:13,678
or these channels and

415
00:17:12,510 --> 00:17:16,000
[Music]

416
00:17:13,679 --> 00:17:17,280
yeah we can either get charlie bob or

417
00:17:16,000 --> 00:17:20,880
bob charlie

418
00:17:17,280 --> 00:17:23,199
it all depends on the random function

419
00:17:20,880 --> 00:17:24,240
the other way around is called the fan

420
00:17:23,199 --> 00:17:26,720
out

421
00:17:24,240 --> 00:17:27,839
where we have one producer many

422
00:17:26,720 --> 00:17:29,760
consumers

423
00:17:27,839 --> 00:17:31,200
like if you want to do concurrent work

424
00:17:29,760 --> 00:17:34,000
on a huge list

425
00:17:31,200 --> 00:17:34,240
you can put them out through one channel

426
00:17:34,000 --> 00:17:36,559
and

427
00:17:34,240 --> 00:17:39,600
have multiple core routines work on it

428
00:17:36,559 --> 00:17:42,720
and the same time

429
00:17:39,600 --> 00:17:46,080
here we just loop 30 times and send

430
00:17:42,720 --> 00:17:47,840
30 items and then we close the channel

431
00:17:46,080 --> 00:17:50,000
and then we can actually iterate over

432
00:17:47,840 --> 00:17:53,039
the channel with a for loop

433
00:17:50,000 --> 00:17:56,080
so we create three

434
00:17:53,039 --> 00:17:57,600
co routines that all have a for loop

435
00:17:56,080 --> 00:17:59,360
and we're going to get a result

436
00:17:57,600 --> 00:18:02,719
something like this

437
00:17:59,360 --> 00:18:06,479
and what i've noticed is it isn't always

438
00:18:02,720 --> 00:18:08,799
ordered this list so

439
00:18:06,480 --> 00:18:11,200
i don't know why if you put a delay in

440
00:18:08,799 --> 00:18:16,559
the suspending function it's always

441
00:18:11,200 --> 00:18:19,760
ordered so i have to look into that

442
00:18:16,559 --> 00:18:22,080
we can also have there are builders

443
00:18:19,760 --> 00:18:23,120
for these kind of things like a produce

444
00:18:22,080 --> 00:18:25,120
builder

445
00:18:23,120 --> 00:18:26,959
that actually creates this channel for

446
00:18:25,120 --> 00:18:31,120
us you can all

447
00:18:26,960 --> 00:18:33,840
you can call send instead of just

448
00:18:31,120 --> 00:18:36,000
yeah just send instead of channel.send

449
00:18:33,840 --> 00:18:39,120
and it closes the channel

450
00:18:36,000 --> 00:18:42,080
when once the closure is complete

451
00:18:39,120 --> 00:18:44,000
and you can also call consume each on

452
00:18:42,080 --> 00:18:44,320
the channel instead of having a for loop

453
00:18:44,000 --> 00:18:47,840
or

454
00:18:44,320 --> 00:18:50,320
multiple receipts so it's gonna keep on

455
00:18:47,840 --> 00:18:52,720
consuming receiving until the channel

456
00:18:50,320 --> 00:18:52,720
closes

457
00:18:54,000 --> 00:19:00,799
next up is the mutex mutual

458
00:18:57,360 --> 00:19:03,760
exclusion printer for kotlin

459
00:19:00,799 --> 00:19:05,840
so if you remember this code it's not

460
00:19:03,760 --> 00:19:07,840
thread safe but we can make it thread

461
00:19:05,840 --> 00:19:11,600
safe with a mutex

462
00:19:07,840 --> 00:19:14,320
it's kind of a re-entrant lock

463
00:19:11,600 --> 00:19:15,360
so you can lock a mutex you can unlock a

464
00:19:14,320 --> 00:19:18,720
mutex

465
00:19:15,360 --> 00:19:21,600
and this function with lock

466
00:19:18,720 --> 00:19:22,559
actually first locks it then it builds a

467
00:19:21,600 --> 00:19:25,120
try block

468
00:19:22,559 --> 00:19:26,960
and inside the try block is your code

469
00:19:25,120 --> 00:19:27,840
and on the final block it's going to

470
00:19:26,960 --> 00:19:31,200
unlock it

471
00:19:27,840 --> 00:19:34,080
so it's a safe way of using these locks

472
00:19:31,200 --> 00:19:35,280
and now this code is thread safe it's

473
00:19:34,080 --> 00:19:39,760
fine great

474
00:19:35,280 --> 00:19:41,600
grained and it's custom but it's safe

475
00:19:39,760 --> 00:19:43,679
the same thing is with the the

476
00:19:41,600 --> 00:19:47,280
synchronized example

477
00:19:43,679 --> 00:19:50,720
we can actually make that work as well

478
00:19:47,280 --> 00:19:53,120
by using a mutex instead of synchronized

479
00:19:50,720 --> 00:19:54,960
so this actually works and it prints

480
00:19:53,120 --> 00:19:57,520
starting endings starting ending

481
00:19:54,960 --> 00:19:57,520
every time

482
00:19:58,960 --> 00:20:08,000
still have some time to go over flow

483
00:20:02,480 --> 00:20:11,520
which is the the kotlin way of reactive

484
00:20:08,000 --> 00:20:12,799
reactive streams and it's kind of

485
00:20:11,520 --> 00:20:16,960
similar to channels

486
00:20:12,799 --> 00:20:20,158
but not really you have an emit function

487
00:20:16,960 --> 00:20:21,280
instead of send and you have collect or

488
00:20:20,159 --> 00:20:23,840
other terminal but

489
00:20:21,280 --> 00:20:25,678
the most common one is collect instead

490
00:20:23,840 --> 00:20:27,520
of consume each

491
00:20:25,679 --> 00:20:29,520
but they're basically doing the same

492
00:20:27,520 --> 00:20:30,240
thing the big difference is that a

493
00:20:29,520 --> 00:20:32,720
channel

494
00:20:30,240 --> 00:20:34,159
you have is hot meaning you have a co

495
00:20:32,720 --> 00:20:36,559
routine behind it or

496
00:20:34,159 --> 00:20:38,559
multiple core routines feeding data

497
00:20:36,559 --> 00:20:41,918
there is active all the time

498
00:20:38,559 --> 00:20:44,000
a flow is actually cold until you call

499
00:20:41,919 --> 00:20:46,960
the terminal

500
00:20:44,000 --> 00:20:47,760
function or a terminal function on it so

501
00:20:46,960 --> 00:20:50,720
it's not going to do

502
00:20:47,760 --> 00:20:52,879
anything until you clicked and you can

503
00:20:50,720 --> 00:20:56,159
collect it multiple times and

504
00:20:52,880 --> 00:20:58,559
hopefully get the same result

505
00:20:56,159 --> 00:21:00,840
yeah you get the same execution the

506
00:20:58,559 --> 00:21:04,080
result is up to you

507
00:21:00,840 --> 00:21:08,080
um so here we get value 1 2

508
00:21:04,080 --> 00:21:10,480
to 10 and we also have operators

509
00:21:08,080 --> 00:21:13,360
like coming from the stream world like

510
00:21:10,480 --> 00:21:13,360
filter map

511
00:21:14,159 --> 00:21:17,679
and also extension functions like here

512
00:21:16,720 --> 00:21:21,520
we have a range

513
00:21:17,679 --> 00:21:24,480
as flow you can have a list as flow

514
00:21:21,520 --> 00:21:26,480
but the more important thing about

515
00:21:24,480 --> 00:21:30,640
communications with flows and

516
00:21:26,480 --> 00:21:32,400
threads is that the collect or the

517
00:21:30,640 --> 00:21:35,520
terminal operator

518
00:21:32,400 --> 00:21:39,120
always determines on what context

519
00:21:35,520 --> 00:21:42,240
we're going to run on which dispatcher

520
00:21:39,120 --> 00:21:44,959
so now we still have that function main

521
00:21:42,240 --> 00:21:49,360
round blocking so we're running on main

522
00:21:44,960 --> 00:21:51,840
both flow on main and collect on main

523
00:21:49,360 --> 00:21:52,719
but usually we don't want to do that we

524
00:21:51,840 --> 00:21:56,559
used to

525
00:21:52,720 --> 00:21:59,679
we want to have like a background job

526
00:21:56,559 --> 00:22:02,879
so we can add the flow on

527
00:21:59,679 --> 00:22:03,840
which decides all the preceding

528
00:22:02,880 --> 00:22:05,919
operators

529
00:22:03,840 --> 00:22:07,039
that don't have their own context is

530
00:22:05,919 --> 00:22:10,480
gonna use this one

531
00:22:07,039 --> 00:22:10,720
instead so in this case we're gonna flow

532
00:22:10,480 --> 00:22:13,919
on

533
00:22:10,720 --> 00:22:17,760
a worker one but we still collect on

534
00:22:13,919 --> 00:22:20,880
the main thread or the main dispatcher

535
00:22:17,760 --> 00:22:24,158
also and just to show that

536
00:22:20,880 --> 00:22:27,039
it's only proceeding we add

537
00:22:24,159 --> 00:22:27,600
the map on print line as well so map on

538
00:22:27,039 --> 00:22:30,799
is on

539
00:22:27,600 --> 00:22:32,559
main filter is also main

540
00:22:30,799 --> 00:22:34,240
if we want to change that we have to

541
00:22:32,559 --> 00:22:37,840
move the flow on

542
00:22:34,240 --> 00:22:40,320
so we can move it down to under the map

543
00:22:37,840 --> 00:22:41,678
and now everything about it is on the

544
00:22:40,320 --> 00:22:45,520
dispatcher default and

545
00:22:41,679 --> 00:22:45,520
in this case on work one

546
00:22:46,960 --> 00:22:52,290
we can also just jump around if we want

547
00:22:49,360 --> 00:22:53,439
to we can have multiple flow ons

548
00:22:52,290 --> 00:22:58,158
[Music]

549
00:22:53,440 --> 00:23:02,640
and one final thing uh the with context

550
00:22:58,159 --> 00:23:05,600
uh inside of flow is

551
00:23:02,640 --> 00:23:06,640
don't use it you can get away with it if

552
00:23:05,600 --> 00:23:10,399
you're lucky

553
00:23:06,640 --> 00:23:12,880
if you your collect or terminal function

554
00:23:10,400 --> 00:23:13,919
is on the same dispatcher you might get

555
00:23:12,880 --> 00:23:18,320
away with it

556
00:23:13,919 --> 00:23:21,919
otherwise you will have a runtime error

557
00:23:18,320 --> 00:23:24,399
so use the flow on it's to preserve

558
00:23:21,919 --> 00:23:24,400
context

559
00:23:24,480 --> 00:23:28,779
thank you

560
00:23:25,650 --> 00:23:28,779
[Applause]

561
00:23:31,250 --> 00:23:37,840
[Applause]

562
00:23:34,840 --> 00:23:37,840
questions

563
00:23:46,799 --> 00:23:50,480
are you going to have available the

564
00:23:48,880 --> 00:23:52,240
slice well

565
00:23:50,480 --> 00:23:54,640
are you going to have available the

566
00:23:52,240 --> 00:23:57,039
slice yeah they're available now at

567
00:23:54,640 --> 00:23:57,039
foster

568
00:24:02,840 --> 00:24:05,840
okay

569
00:24:06,400 --> 00:24:19,840
thank you very much

570
00:24:22,080 --> 00:24:24,158
you

