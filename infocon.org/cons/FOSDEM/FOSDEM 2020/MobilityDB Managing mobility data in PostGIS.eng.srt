1
00:00:05,200 --> 00:00:12,799
so hello everyone

2
00:00:07,600 --> 00:00:16,880
i am mahmoud professor in ulb

3
00:00:12,799 --> 00:00:19,439
in this campus and we are doing uh

4
00:00:16,880 --> 00:00:21,759
mobilitydb it's a moving object database

5
00:00:19,439 --> 00:00:24,560
system

6
00:00:21,760 --> 00:00:26,080
so it is meant for trajectory data

7
00:00:24,560 --> 00:00:29,279
management

8
00:00:26,080 --> 00:00:32,000
um already

9
00:00:29,279 --> 00:00:33,670
in the talk of visarion we got an idea

10
00:00:32,000 --> 00:00:34,960
what's a trajectory

11
00:00:33,670 --> 00:00:38,160
[Music]

12
00:00:34,960 --> 00:00:39,200
in mobilitydb the time dimension is also

13
00:00:38,160 --> 00:00:43,679
taken

14
00:00:39,200 --> 00:00:47,200
into account so if you have

15
00:00:43,680 --> 00:00:50,559
gps track from your mobile or uh

16
00:00:47,200 --> 00:00:51,520
some gps tracker a navigation device or

17
00:00:50,559 --> 00:00:53,680
so on

18
00:00:51,520 --> 00:00:55,360
it gives you more or less in data like

19
00:00:53,680 --> 00:00:58,399
this so you get some

20
00:00:55,360 --> 00:00:58,879
identifier for uh for for the trip and

21
00:00:58,399 --> 00:01:01,920
then

22
00:00:58,879 --> 00:01:05,280
a sequence of point and time yeah

23
00:01:01,920 --> 00:01:08,560
you can put this in postgres

24
00:01:05,280 --> 00:01:11,840
in my sequel you can use a boost

25
00:01:08,560 --> 00:01:16,000
library in order to start

26
00:01:11,840 --> 00:01:20,640
doing data management of this

27
00:01:16,000 --> 00:01:20,640
what mobilitydb does is it

28
00:01:20,799 --> 00:01:25,920
puts the whole trip together so it

29
00:01:23,759 --> 00:01:26,880
encapsulates it creates this structure

30
00:01:25,920 --> 00:01:29,840
for a trip

31
00:01:26,880 --> 00:01:30,479
where you have a point at timestamp and

32
00:01:29,840 --> 00:01:34,320
then

33
00:01:30,479 --> 00:01:36,720
a second point a timestamp so you you

34
00:01:34,320 --> 00:01:39,279
put the whole sequence together in one

35
00:01:36,720 --> 00:01:42,000
data type and that becomes

36
00:01:39,280 --> 00:01:44,479
a data element in your table and then

37
00:01:42,000 --> 00:01:46,880
you can start

38
00:01:44,479 --> 00:01:48,240
writing functions overwritten sql to

39
00:01:46,880 --> 00:01:49,360
calculate the speed to calculate the

40
00:01:48,240 --> 00:01:55,280
heading

41
00:01:49,360 --> 00:02:00,320
to do selections to do joins and so on

42
00:01:55,280 --> 00:02:03,280
so generally speaking this is a

43
00:02:00,320 --> 00:02:04,240
general architecture you have posted sql

44
00:02:03,280 --> 00:02:07,600
providing

45
00:02:04,240 --> 00:02:09,598
these relational types

46
00:02:07,600 --> 00:02:11,519
some advanced types like xml and json as

47
00:02:09,598 --> 00:02:14,560
well and then on top you have

48
00:02:11,520 --> 00:02:16,319
postgis which provides two main

49
00:02:14,560 --> 00:02:21,440
abstractions geometry and

50
00:02:16,319 --> 00:02:23,760
geography so you can be doing maps

51
00:02:21,440 --> 00:02:24,800
and then you have mobility b on top that

52
00:02:23,760 --> 00:02:27,280
provides

53
00:02:24,800 --> 00:02:28,400
the temporal information that adds a

54
00:02:27,280 --> 00:02:31,120
temporal information

55
00:02:28,400 --> 00:02:33,360
to post gs and postgresql types so you

56
00:02:31,120 --> 00:02:36,319
get a temporal geometry point

57
00:02:33,360 --> 00:02:38,560
representing a a car for example or a

58
00:02:36,319 --> 00:02:41,200
person moving

59
00:02:38,560 --> 00:02:42,319
over time you get temporal geography

60
00:02:41,200 --> 00:02:43,839
point

61
00:02:42,319 --> 00:02:46,640
according to the coordinates of their

62
00:02:43,840 --> 00:02:49,360
geographical geometric

63
00:02:46,640 --> 00:02:51,920
but also you get temporal float temporal

64
00:02:49,360 --> 00:02:55,120
integer temporal text temporal boolean

65
00:02:51,920 --> 00:02:56,559
and these are important for evaluating

66
00:02:55,120 --> 00:02:58,239
functions and predicates over

67
00:02:56,560 --> 00:03:00,400
trajectories for example the speed of a

68
00:02:58,239 --> 00:03:01,840
trajectory

69
00:03:00,400 --> 00:03:03,920
is changing over time so that's a

70
00:03:01,840 --> 00:03:06,159
temporal fluid you want to check a

71
00:03:03,920 --> 00:03:10,640
predicate of our trajectory

72
00:03:06,159 --> 00:03:12,480
is a car now inside brussels

73
00:03:10,640 --> 00:03:14,079
so the result will be a temporal boolean

74
00:03:12,480 --> 00:03:14,480
because sometimes it's true sometimes

75
00:03:14,080 --> 00:03:17,360
it's

76
00:03:14,480 --> 00:03:18,399
it's false so these types have to also

77
00:03:17,360 --> 00:03:20,720
be supported

78
00:03:18,400 --> 00:03:22,560
and you can imagine that the list of

79
00:03:20,720 --> 00:03:25,200
types of temporal types can

80
00:03:22,560 --> 00:03:26,080
can be extended to support uh different

81
00:03:25,200 --> 00:03:28,319
applications

82
00:03:26,080 --> 00:03:30,879
right now these are the main ones

83
00:03:28,319 --> 00:03:33,679
supported in mobilitydb

84
00:03:30,879 --> 00:03:34,319
so mobilitydb is a vertical extension

85
00:03:33,680 --> 00:03:37,920
that

86
00:03:34,319 --> 00:03:41,040
extends postgresql

87
00:03:37,920 --> 00:03:44,079
at all data management levels uh

88
00:03:41,040 --> 00:03:45,760
so it extends the data model with both

89
00:03:44,080 --> 00:03:46,000
time types and temporal types that i

90
00:03:45,760 --> 00:03:49,359
just

91
00:03:46,000 --> 00:03:52,720
mentioned so you can use them in

92
00:03:49,360 --> 00:03:56,480
as attribute types in your table

93
00:03:52,720 --> 00:03:59,519
it extends the indexes

94
00:03:56,480 --> 00:04:02,399
so that one can process

95
00:03:59,519 --> 00:04:03,200
fairly large tables uh quickly so it

96
00:04:02,400 --> 00:04:05,760
extends the

97
00:04:03,200 --> 00:04:08,480
the gist index of positive sql which is

98
00:04:05,760 --> 00:04:10,640
a kind of uh which is r3 actually

99
00:04:08,480 --> 00:04:11,060
the spgs that's a space partitioning so

100
00:04:10,640 --> 00:04:12,399
it's

101
00:04:11,060 --> 00:04:16,238
[Music]

102
00:04:12,400 --> 00:04:18,880
a kind of great structure

103
00:04:16,238 --> 00:04:20,399
the b3 index it also extends a query

104
00:04:18,880 --> 00:04:24,240
optimizer

105
00:04:20,399 --> 00:04:25,919
so that one can do vacuum analyze

106
00:04:24,240 --> 00:04:28,400
to collect statistics about these

107
00:04:25,919 --> 00:04:31,680
temporal types

108
00:04:28,400 --> 00:04:33,840
and to be able so that the optimizer can

109
00:04:31,680 --> 00:04:35,440
can estimate selectivity of predicates

110
00:04:33,840 --> 00:04:37,679
and and do its

111
00:04:35,440 --> 00:04:38,800
optimization stuff invoke the indexes

112
00:04:37,680 --> 00:04:42,720
when relevant

113
00:04:38,800 --> 00:04:46,400
uh try to find the best execution plan

114
00:04:42,720 --> 00:04:46,400
and then a big set of operations

115
00:04:46,639 --> 00:04:50,560
for example you can you can always

116
00:04:49,840 --> 00:04:52,960
project

117
00:04:50,560 --> 00:04:54,800
remove the time dimension project to

118
00:04:52,960 --> 00:04:57,680
align string

119
00:04:54,800 --> 00:05:00,400
and then do all kinds of processing on

120
00:04:57,680 --> 00:05:00,400
the line string

121
00:05:00,960 --> 00:05:06,479
if you want to include the time then you

122
00:05:04,240 --> 00:05:08,000
you use the lifted operations we call

123
00:05:06,479 --> 00:05:10,960
them lifted because they

124
00:05:08,000 --> 00:05:11,520
lift the static operations with time so

125
00:05:10,960 --> 00:05:14,880
you can

126
00:05:11,520 --> 00:05:18,240
do arithmetic on temporal numbers

127
00:05:14,880 --> 00:05:19,840
uh can do binary operations on temporal

128
00:05:18,240 --> 00:05:23,280
booleans

129
00:05:19,840 --> 00:05:27,520
can do distance and topology operations

130
00:05:23,280 --> 00:05:30,638
on temporal points and so on

131
00:05:27,520 --> 00:05:31,840
this is all built as an extension not a

132
00:05:30,639 --> 00:05:34,400
fork

133
00:05:31,840 --> 00:05:35,440
to possibly sql and because it's an

134
00:05:34,400 --> 00:05:38,159
extension

135
00:05:35,440 --> 00:05:39,840
it's by default should be we hope

136
00:05:38,160 --> 00:05:43,360
compatible with

137
00:05:39,840 --> 00:05:46,239
other postgresql other tools in the in

138
00:05:43,360 --> 00:05:49,460
the ecosystem of postgresql

139
00:05:46,240 --> 00:05:50,960
we have tested with some and

140
00:05:49,460 --> 00:05:56,239
[Music]

141
00:05:50,960 --> 00:05:56,239
we wish to test those more for example

142
00:05:56,720 --> 00:06:03,120
integrating with pg routing for

143
00:05:59,600 --> 00:06:03,120
calculating shortest distance

144
00:06:03,600 --> 00:06:06,720
so that to support to support network

145
00:06:05,600 --> 00:06:08,080
points uh

146
00:06:06,720 --> 00:06:10,319
you know you can represent the

147
00:06:08,080 --> 00:06:11,280
coordinates either absolute as latitude

148
00:06:10,319 --> 00:06:14,479
and longitude

149
00:06:11,280 --> 00:06:16,318
or as map matched like a uh a

150
00:06:14,479 --> 00:06:19,039
an identifier to a certain road in a

151
00:06:16,319 --> 00:06:22,560
road network and the fraction

152
00:06:19,039 --> 00:06:25,840
of uh of a distance that is travelled

153
00:06:22,560 --> 00:06:27,680
to get more context uh pipeline db

154
00:06:25,840 --> 00:06:29,039
provides some stream processing of our

155
00:06:27,680 --> 00:06:32,479
positive sql

156
00:06:29,039 --> 00:06:34,080
we did some let's say toy experiment on

157
00:06:32,479 --> 00:06:36,479
it

158
00:06:34,080 --> 00:06:38,080
we do support good integration with

159
00:06:36,479 --> 00:06:41,440
cytos

160
00:06:38,080 --> 00:06:46,800
cytos is for scalability so that

161
00:06:41,440 --> 00:06:49,280
you can run a postgresql database

162
00:06:46,800 --> 00:06:51,039
on a cluster and your queries get

163
00:06:49,280 --> 00:06:53,840
distributed

164
00:06:51,039 --> 00:06:55,039
so combining both mobility debian cytos

165
00:06:53,840 --> 00:06:57,280
one can

166
00:06:55,039 --> 00:06:57,280
do

167
00:06:58,319 --> 00:07:02,479
query query big data sizes so my

168
00:07:00,880 --> 00:07:05,759
colleague there is

169
00:07:02,479 --> 00:07:08,560
responsible for this part um

170
00:07:05,759 --> 00:07:10,800
for for a quick start uh using

171
00:07:08,560 --> 00:07:14,319
mobilitydb there is a docker image

172
00:07:10,800 --> 00:07:16,720
yeah and so on so

173
00:07:14,319 --> 00:07:19,120
uh how does it look like loading the

174
00:07:16,720 --> 00:07:20,880
data the most common format is comma

175
00:07:19,120 --> 00:07:24,479
separated you can always

176
00:07:20,880 --> 00:07:27,520
transfer whatever tracking format to

177
00:07:24,479 --> 00:07:27,520
some comma separated

178
00:07:28,840 --> 00:07:33,280
so most important create extension

179
00:07:31,440 --> 00:07:36,960
mobility db

180
00:07:33,280 --> 00:07:39,039
cascade that's how to start supporting

181
00:07:36,960 --> 00:07:40,638
this spatial temporal operations in your

182
00:07:39,039 --> 00:07:44,080
postgresql database

183
00:07:40,639 --> 00:07:46,639
cascade will also uh

184
00:07:44,080 --> 00:07:47,599
create extension post this if it is not

185
00:07:46,639 --> 00:07:50,479
there

186
00:07:47,599 --> 00:07:50,800
yeah because uh basically mobilitydb

187
00:07:50,479 --> 00:07:53,039
does

188
00:07:50,800 --> 00:07:54,400
uh manage the temporal part and its

189
00:07:53,039 --> 00:07:56,318
relation to special part

190
00:07:54,400 --> 00:07:58,159
and when whenever it is about special

191
00:07:56,319 --> 00:08:01,360
processing it delegates

192
00:07:58,160 --> 00:08:04,160
to post this uh

193
00:08:01,360 --> 00:08:06,160
so in this table at the left that's a

194
00:08:04,160 --> 00:08:06,639
pretty standard one that you would use

195
00:08:06,160 --> 00:08:09,680
for

196
00:08:06,639 --> 00:08:12,639
any uh for just loading the

197
00:08:09,680 --> 00:08:13,680
the flat information you get from the

198
00:08:12,639 --> 00:08:16,319
gps device

199
00:08:13,680 --> 00:08:18,240
so you have longitude latitude and time

200
00:08:16,319 --> 00:08:19,599
these are the key things and also some

201
00:08:18,240 --> 00:08:22,639
identifier

202
00:08:19,599 --> 00:08:24,960
for the moving object and the trip

203
00:08:22,639 --> 00:08:26,800
and that's the one you can use using you

204
00:08:24,960 --> 00:08:30,479
can do with mobilitydb

205
00:08:26,800 --> 00:08:32,959
here you you see one column called trip

206
00:08:30,479 --> 00:08:34,640
which is a t geometry point this is the

207
00:08:32,958 --> 00:08:37,919
one that's going to carry

208
00:08:34,640 --> 00:08:40,799
the complete trip so every row

209
00:08:37,919 --> 00:08:41,760
in this table will represent a trip and

210
00:08:40,799 --> 00:08:43,760
in order to

211
00:08:41,760 --> 00:08:46,319
load this table in this table and create

212
00:08:43,760 --> 00:08:46,319
your trips

213
00:08:47,519 --> 00:08:54,720
basically you combine every point with

214
00:08:50,720 --> 00:08:56,880
its timestamp do whatever projection

215
00:08:54,720 --> 00:08:58,080
you want in order to put it in the

216
00:08:56,880 --> 00:09:01,680
coordinate system

217
00:08:58,080 --> 00:09:02,080
required create an instance of these and

218
00:09:01,680 --> 00:09:05,439
then

219
00:09:02,080 --> 00:09:06,959
aggregate all instances that are for the

220
00:09:05,440 --> 00:09:09,680
same trip and same

221
00:09:06,959 --> 00:09:10,959
car aggregate them in an array and then

222
00:09:09,680 --> 00:09:14,640
put this array

223
00:09:10,959 --> 00:09:18,239
in a temporal geometry point so now

224
00:09:14,640 --> 00:09:22,000
you have this complete trip

225
00:09:18,240 --> 00:09:25,680
in a single daytime

226
00:09:22,000 --> 00:09:29,519
um to support well you can you can

227
00:09:25,680 --> 00:09:33,279
you can also use other formats

228
00:09:29,519 --> 00:09:36,320
gtfs for public transport schedules

229
00:09:33,279 --> 00:09:38,560
um and there is a tutorial about this on

230
00:09:36,320 --> 00:09:40,880
the github of mobilitydb

231
00:09:38,560 --> 00:09:44,479
that shows step by step how to create

232
00:09:40,880 --> 00:09:44,480
trajectories from gtfs

233
00:09:45,200 --> 00:09:48,959
google location data if you can download

234
00:09:47,680 --> 00:09:52,560
your own track and then

235
00:09:48,959 --> 00:09:55,439
start playing with it

236
00:09:52,560 --> 00:09:57,920
actually google stores a lot so it will

237
00:09:55,440 --> 00:09:57,920
be fun

238
00:09:58,480 --> 00:10:03,680
you can start calculating aggregates how

239
00:10:02,480 --> 00:10:06,240
much time

240
00:10:03,680 --> 00:10:07,040
you spent in driving or you spent

241
00:10:06,240 --> 00:10:09,920
walking

242
00:10:07,040 --> 00:10:11,439
where you go if you manage to get

243
00:10:09,920 --> 00:10:14,719
location date of someone else that's

244
00:10:11,440 --> 00:10:14,720
becoming more interesting

245
00:10:16,000 --> 00:10:20,880
and that's also another workshop so you

246
00:10:18,560 --> 00:10:24,560
get a step-by-step

247
00:10:20,880 --> 00:10:27,920
tutorial a third workshop that's nice

248
00:10:24,560 --> 00:10:31,119
is managing ais data this is a

249
00:10:27,920 --> 00:10:33,199
ship data basically here we use some

250
00:10:31,120 --> 00:10:34,240
data published from the danish maritime

251
00:10:33,200 --> 00:10:36,480
authority

252
00:10:34,240 --> 00:10:38,000
they have huge data size like three

253
00:10:36,480 --> 00:10:41,680
terabytes

254
00:10:38,000 --> 00:10:44,839
of ship tracking data

255
00:10:41,680 --> 00:10:47,199
this only shows a single day after some

256
00:10:44,839 --> 00:10:49,440
filtering

257
00:10:47,200 --> 00:10:50,399
it has so the original file is 10

258
00:10:49,440 --> 00:10:53,040
million

259
00:10:50,399 --> 00:10:56,000
rows and one gigabyte not not very big

260
00:10:53,040 --> 00:10:56,000
but you can go bigger

261
00:10:58,000 --> 00:11:01,600
this is an application done by

262
00:10:59,760 --> 00:11:05,439
colleagues

263
00:11:01,600 --> 00:11:08,800
in moscow who use mobilitydb to

264
00:11:05,440 --> 00:11:11,920
to to play with the public transport

265
00:11:08,800 --> 00:11:14,000
well not to play they want to put it

266
00:11:11,920 --> 00:11:16,079
it was a public transport network in in

267
00:11:14,000 --> 00:11:19,279
moscow and they did this nice

268
00:11:16,079 --> 00:11:23,359
velocity maps basically by aggregating

269
00:11:19,279 --> 00:11:23,360
the speciotemporal trajectories

270
00:11:25,120 --> 00:11:29,839
yeah very nice visualization

271
00:11:30,399 --> 00:11:33,200
if it works

272
00:11:33,440 --> 00:11:36,560
so this is normally

273
00:11:39,120 --> 00:11:43,440
yeah it will start moving so that's only

274
00:11:42,480 --> 00:11:46,959
yesterday

275
00:11:43,440 --> 00:11:50,880
uh had very nice meeting with

276
00:11:46,959 --> 00:11:53,040
our colleague yangsuk from

277
00:11:50,880 --> 00:11:56,160
from the artificial intelligence

278
00:11:53,040 --> 00:12:00,399
research center in japan

279
00:11:56,160 --> 00:12:04,719
actually visualizing mfjson mfjsun is a

280
00:12:00,399 --> 00:12:07,440
new to appear ogc standard

281
00:12:04,720 --> 00:12:09,120
i know from the talk of judy that not

282
00:12:07,440 --> 00:12:11,839
many are fan of ogc

283
00:12:09,120 --> 00:12:12,880
but it is changing ogc now is doing

284
00:12:11,839 --> 00:12:17,760
pretty cool stuff

285
00:12:12,880 --> 00:12:17,760
including standards for moving features

286
00:12:18,160 --> 00:12:22,160
so this data basically was exported from

287
00:12:20,160 --> 00:12:25,279
mobilitydb as mfjson

288
00:12:22,160 --> 00:12:28,480
imported in this cesium extension

289
00:12:25,279 --> 00:12:29,600
and then visualized in a moving this is

290
00:12:28,480 --> 00:12:33,120
one of the ships

291
00:12:29,600 --> 00:12:33,120
in the in the ais example

292
00:12:35,279 --> 00:12:40,399
they even did some 3d so you can see a

293
00:12:38,639 --> 00:12:42,399
space-time cube

294
00:12:40,399 --> 00:12:44,720
this is the same shape but now just a

295
00:12:42,399 --> 00:12:47,200
special temporal

296
00:12:44,720 --> 00:12:47,200
movement

297
00:12:50,959 --> 00:12:56,880
so uh let's look

298
00:12:54,079 --> 00:12:58,638
more about queries in mobilitydb and

299
00:12:56,880 --> 00:12:59,600
what kind of operations you can get

300
00:12:58,639 --> 00:13:03,279
there

301
00:12:59,600 --> 00:13:04,959
uh so in this example in the following

302
00:13:03,279 --> 00:13:08,800
few ones

303
00:13:04,959 --> 00:13:11,680
the same ship database will be used

304
00:13:08,800 --> 00:13:13,760
basically we have a table ships that has

305
00:13:11,680 --> 00:13:16,560
an identifier for a trip

306
00:13:13,760 --> 00:13:19,839
that has a trip trajectory as a geometry

307
00:13:16,560 --> 00:13:23,199
point temporal geometry point

308
00:13:19,839 --> 00:13:26,639
over ground this is a typical

309
00:13:23,200 --> 00:13:30,480
of the observation reported by the

310
00:13:26,639 --> 00:13:33,760
ais sensors that tells you the speed

311
00:13:30,480 --> 00:13:34,000
of the ship and because it changes over

312
00:13:33,760 --> 00:13:35,760
time

313
00:13:34,000 --> 00:13:36,880
it's loaded into a temporal fluid so

314
00:13:35,760 --> 00:13:38,560
this is coming from the source

315
00:13:36,880 --> 00:13:41,040
information not calculated

316
00:13:38,560 --> 00:13:42,638
course overground also temporal fluid

317
00:13:41,040 --> 00:13:44,639
and then i pre-calculate

318
00:13:42,639 --> 00:13:46,560
the special trajectory which is a line

319
00:13:44,639 --> 00:13:50,380
string

320
00:13:46,560 --> 00:13:52,638
project the same trip uh into some

321
00:13:50,380 --> 00:13:54,560
[Music]

322
00:13:52,639 --> 00:13:58,399
projected coordinate systems the etrs

323
00:13:54,560 --> 00:14:01,040
which fits the area of denmark

324
00:13:58,399 --> 00:14:02,160
now if we want to list all the ships

325
00:14:01,040 --> 00:14:06,319
that commute between

326
00:14:02,160 --> 00:14:08,319
these two ports rudaby and put a garden

327
00:14:06,320 --> 00:14:09,600
so you have two ports and you want to

328
00:14:08,320 --> 00:14:12,560
see which ships

329
00:14:09,600 --> 00:14:14,839
commute around so i express this in this

330
00:14:12,560 --> 00:14:17,518
sql query

331
00:14:14,839 --> 00:14:19,120
basically the two ports are represented

332
00:14:17,519 --> 00:14:19,920
as two rectangles and then we are

333
00:14:19,120 --> 00:14:23,199
interested

334
00:14:19,920 --> 00:14:24,479
in the trips that intersect the two

335
00:14:23,199 --> 00:14:28,079
rectangles together

336
00:14:24,480 --> 00:14:30,800
so that two predicates intersects

337
00:14:28,079 --> 00:14:31,839
so this predicate is a mobility db1 it

338
00:14:30,800 --> 00:14:34,399
accepts

339
00:14:31,839 --> 00:14:35,120
a trajectory at a temporal geometry

340
00:14:34,399 --> 00:14:37,920
point

341
00:14:35,120 --> 00:14:39,440
and some geometry and it returns a

342
00:14:37,920 --> 00:14:41,519
boolean

343
00:14:39,440 --> 00:14:44,000
yeah and then in order to do this

344
00:14:41,519 --> 00:14:47,360
efficiently you need an r3

345
00:14:44,000 --> 00:14:51,040
so you create a gist index

346
00:14:47,360 --> 00:14:55,120
over the projected trip column

347
00:14:51,040 --> 00:14:58,399
so some gst index will will will be used

348
00:14:55,120 --> 00:14:58,399
behind the execution of this

349
00:14:59,360 --> 00:15:02,399
and this is the result the two ports are

350
00:15:01,440 --> 00:15:04,079
the red

351
00:15:02,399 --> 00:15:07,519
rectangles and then these are all the

352
00:15:04,079 --> 00:15:07,519
ships traversing

353
00:15:08,800 --> 00:15:14,560
another query find the ships that have

354
00:15:12,399 --> 00:15:16,320
speed over ground different from the

355
00:15:14,560 --> 00:15:18,880
speed calculated from trajectory

356
00:15:16,320 --> 00:15:19,920
basically in this table you have two

357
00:15:18,880 --> 00:15:22,880
speed

358
00:15:19,920 --> 00:15:23,760
components one that is coming from the

359
00:15:22,880 --> 00:15:26,880
sensor

360
00:15:23,760 --> 00:15:28,639
sog and one that you can calculate from

361
00:15:26,880 --> 00:15:30,000
the special temporal trajectory that has

362
00:15:28,639 --> 00:15:31,440
been constructed

363
00:15:30,000 --> 00:15:33,279
normally they should be the same if they

364
00:15:31,440 --> 00:15:36,000
are not the same then the sensor is

365
00:15:33,279 --> 00:15:39,360
providing some

366
00:15:36,000 --> 00:15:40,560
wrong information so

367
00:15:39,360 --> 00:15:41,839
i don't know why the query should be

368
00:15:40,560 --> 00:15:42,719
interesting i thought it's interesting

369
00:15:41,839 --> 00:15:46,560
so i

370
00:15:42,720 --> 00:15:47,839
i try it uh get everything from the

371
00:15:46,560 --> 00:15:50,399
table ships

372
00:15:47,839 --> 00:15:52,240
and then perform a minus between the two

373
00:15:50,399 --> 00:15:54,320
speed components will convert both to

374
00:15:52,240 --> 00:15:56,079
kilometers per hour

375
00:15:54,320 --> 00:15:57,680
and then convert to mine and and this

376
00:15:56,079 --> 00:15:59,439
minus is a temporal minus

377
00:15:57,680 --> 00:16:00,800
between two temporal fluids so it's

378
00:15:59,440 --> 00:16:02,560
going to be calculating the difference

379
00:16:00,800 --> 00:16:06,160
at every time instant

380
00:16:02,560 --> 00:16:09,359
and producing a temporary float and

381
00:16:06,160 --> 00:16:11,360
the time weighted average uh will

382
00:16:09,360 --> 00:16:13,440
summarize this temporal float into a

383
00:16:11,360 --> 00:16:15,440
single float

384
00:16:13,440 --> 00:16:16,959
and compares if the speed difference is

385
00:16:15,440 --> 00:16:20,160
greater than 10

386
00:16:16,959 --> 00:16:21,040
then show me this trip so this is what i

387
00:16:20,160 --> 00:16:23,199
just explained

388
00:16:21,040 --> 00:16:24,560
you have two speed components the one

389
00:16:23,199 --> 00:16:25,920
calculated the blue one is the one

390
00:16:24,560 --> 00:16:26,880
calculated from the special temporal

391
00:16:25,920 --> 00:16:30,319
trajectory

392
00:16:26,880 --> 00:16:31,920
the orange one is the one so g

393
00:16:30,320 --> 00:16:34,079
if you do a temporal minus this is what

394
00:16:31,920 --> 00:16:36,000
you get and then

395
00:16:34,079 --> 00:16:37,758
you summarize this using time weighted

396
00:16:36,000 --> 00:16:40,639
average to get a single

397
00:16:37,759 --> 00:16:40,639
uh float

398
00:16:41,040 --> 00:16:44,240
i didn't put a result here but we got

399
00:16:43,360 --> 00:16:47,759
some trips that

400
00:16:44,240 --> 00:16:50,480
really showed noise um this is another

401
00:16:47,759 --> 00:16:53,519
query for uh

402
00:16:50,480 --> 00:16:57,199
an aggregation so here it aggregates

403
00:16:53,519 --> 00:17:00,320
the length of the of the trips

404
00:16:57,199 --> 00:17:02,479
in per day per hour

405
00:17:00,320 --> 00:17:04,079
so basically we want to see what is the

406
00:17:02,480 --> 00:17:06,480
distance traveled per

407
00:17:04,079 --> 00:17:07,438
ships every hour so every hour in the

408
00:17:06,480 --> 00:17:09,599
day

409
00:17:07,439 --> 00:17:11,520
how many uh what is the total distance

410
00:17:09,599 --> 00:17:13,918
traveled by all ships

411
00:17:11,520 --> 00:17:15,439
as an indicator of how busy the danish

412
00:17:13,919 --> 00:17:19,120
water is

413
00:17:15,439 --> 00:17:23,760
every hour so we create a

414
00:17:19,119 --> 00:17:26,958
relation of uh 24 periods the 24 hours

415
00:17:23,760 --> 00:17:30,000
and for every period we restrict that

416
00:17:26,959 --> 00:17:33,039
trajectory to this period

417
00:17:30,000 --> 00:17:36,720
and then just uh calculate the length

418
00:17:33,039 --> 00:17:40,000
in kilometers of of the

419
00:17:36,720 --> 00:17:43,039
trib and do a regular sum over this

420
00:17:40,000 --> 00:17:46,160
group by the period so you get something

421
00:17:43,039 --> 00:17:48,879
like this so per hour this is a total

422
00:17:46,160 --> 00:17:52,799
traversal distance by

423
00:17:48,880 --> 00:17:56,400
all the ships uh nothing interesting

424
00:17:52,799 --> 00:18:00,559
more or less it is the same all the day

425
00:17:56,400 --> 00:18:03,760
but the query is interesting

426
00:18:00,559 --> 00:18:05,678
um this is a temporal aggregate so in

427
00:18:03,760 --> 00:18:09,280
the previous one we did a sum

428
00:18:05,679 --> 00:18:09,280
here that's a temporal sum

429
00:18:09,440 --> 00:18:13,039
and it is using the operator cumulative

430
00:18:12,000 --> 00:18:16,080
length

431
00:18:13,039 --> 00:18:16,799
cumulative length at every time instant

432
00:18:16,080 --> 00:18:19,280
it tells

433
00:18:16,799 --> 00:18:20,879
how what is the distance that has been

434
00:18:19,280 --> 00:18:22,879
traversed so far

435
00:18:20,880 --> 00:18:24,080
from the beginning of the trip so the

436
00:18:22,880 --> 00:18:26,640
result is a temporal

437
00:18:24,080 --> 00:18:27,678
float and now you have multiple temporal

438
00:18:26,640 --> 00:18:31,120
fluids

439
00:18:27,679 --> 00:18:34,160
per trip so

440
00:18:31,120 --> 00:18:36,080
you do a a temporal sum

441
00:18:34,160 --> 00:18:38,960
which will sum these temporal floats at

442
00:18:36,080 --> 00:18:41,039
every time instant

443
00:18:38,960 --> 00:18:42,000
and the result is a temporal force that

444
00:18:41,039 --> 00:18:45,360
looks like this so

445
00:18:42,000 --> 00:18:49,039
this is a time this is a distance

446
00:18:45,360 --> 00:18:52,159
and you see that it is steep increasing

447
00:18:49,039 --> 00:18:55,440
which confirms the previous query that

448
00:18:52,160 --> 00:18:58,880
there is no difference according to uh

449
00:18:55,440 --> 00:19:01,360
to the hour or the time this is another

450
00:18:58,880 --> 00:19:04,160
trip to do a join

451
00:19:01,360 --> 00:19:05,840
here we want to see whether there were

452
00:19:04,160 --> 00:19:08,720
some danger

453
00:19:05,840 --> 00:19:09,520
situations in the data set where two

454
00:19:08,720 --> 00:19:12,640
ships

455
00:19:09,520 --> 00:19:15,918
convey came very close to one another

456
00:19:12,640 --> 00:19:19,600
and for this predicate

457
00:19:15,919 --> 00:19:22,799
distance within taking two trajectories

458
00:19:19,600 --> 00:19:26,799
and checking whether they have ever

459
00:19:22,799 --> 00:19:29,840
came to 300 meters close to one another

460
00:19:26,799 --> 00:19:33,280
so this query is

461
00:19:29,840 --> 00:19:36,959
joining the self-joining the ship

462
00:19:33,280 --> 00:19:40,000
to itself and if so for these

463
00:19:36,960 --> 00:19:43,440
trajectories show me the shortest line

464
00:19:40,000 --> 00:19:43,440
between the two trajectories

465
00:19:44,960 --> 00:19:52,320
so the result is something like this

466
00:19:49,360 --> 00:19:53,840
the blue ships and the green ships

467
00:19:52,320 --> 00:19:57,120
whenever

468
00:19:53,840 --> 00:20:00,559
a blue ship comes close to a green ship

469
00:19:57,120 --> 00:20:03,760
300 meters or less we see this

470
00:20:00,559 --> 00:20:06,000
red line so the ones above are at the

471
00:20:03,760 --> 00:20:08,960
entrance of the port

472
00:20:06,000 --> 00:20:10,480
so that's not a big deal ships are going

473
00:20:08,960 --> 00:20:12,640
slow they are entering the port

474
00:20:10,480 --> 00:20:14,320
but maybe this one is more interesting

475
00:20:12,640 --> 00:20:16,480
because it happens

476
00:20:14,320 --> 00:20:17,360
just in the middle two ships are coming

477
00:20:16,480 --> 00:20:19,360
close to one another

478
00:20:17,360 --> 00:20:20,399
maybe one would like to further look at

479
00:20:19,360 --> 00:20:22,479
their direction

480
00:20:20,400 --> 00:20:23,520
their speed where they heading towards

481
00:20:22,480 --> 00:20:27,360
one another

482
00:20:23,520 --> 00:20:31,120
so you can continue writing

483
00:20:27,360 --> 00:20:33,280
adding more complexity to the sql

484
00:20:31,120 --> 00:20:35,600
this is what i mentioned in the

485
00:20:33,280 --> 00:20:38,879
beginning you can run this on a cluster

486
00:20:35,600 --> 00:20:42,000
just put on every node cytos mobility db

487
00:20:38,880 --> 00:20:45,440
possibly sql and postgis

488
00:20:42,000 --> 00:20:48,960
the data can will be sharded

489
00:20:45,440 --> 00:20:51,360
and replicated and then the user query

490
00:20:48,960 --> 00:20:53,440
you have few management commands to

491
00:20:51,360 --> 00:20:54,959
shard your data and to create reference

492
00:20:53,440 --> 00:20:57,039
tables and so on

493
00:20:54,960 --> 00:20:59,039
and then everything else is transparent

494
00:20:57,039 --> 00:21:03,360
you just write the query it gets

495
00:20:59,039 --> 00:21:06,480
distributed and we saw that

496
00:21:03,360 --> 00:21:09,520
on four machines we gained like

497
00:21:06,480 --> 00:21:13,600
the queries become 20 times faster

498
00:21:09,520 --> 00:21:16,000
so to to end

499
00:21:13,600 --> 00:21:18,480
mobilitydb is a moving object database

500
00:21:16,000 --> 00:21:19,600
system it's an extension of postgresql

501
00:21:18,480 --> 00:21:23,760
and procedures

502
00:21:19,600 --> 00:21:25,360
it's developed by the team in ulb

503
00:21:23,760 --> 00:21:27,039
it's open source it's available in

504
00:21:25,360 --> 00:21:29,678
github

505
00:21:27,039 --> 00:21:31,039
and it's compliant with the ogc standard

506
00:21:29,679 --> 00:21:33,120
for removing features

507
00:21:31,039 --> 00:21:34,480
the new development that is happening

508
00:21:33,120 --> 00:21:39,918
over there

509
00:21:34,480 --> 00:21:45,360
so yeah it doesn't show the last

510
00:21:39,919 --> 00:21:48,080
slide thank you very much

511
00:21:45,360 --> 00:21:51,360
we have one minute for one question and

512
00:21:48,080 --> 00:21:56,158
even a short one at that point

513
00:21:51,360 --> 00:21:57,918
please could you speak up a little

514
00:21:56,159 --> 00:21:58,720
traffic management so basically as i

515
00:21:57,919 --> 00:22:02,480
understand you have

516
00:21:58,720 --> 00:22:06,080
two dimensional elements

517
00:22:02,480 --> 00:22:09,280
would it be or is it already able to

518
00:22:06,080 --> 00:22:12,720
be to find the distances between flying

519
00:22:09,280 --> 00:22:12,720
airplanes but you need to

520
00:22:13,039 --> 00:22:17,600
uh yes and no it builds on top of the

521
00:22:16,159 --> 00:22:20,320
post this point

522
00:22:17,600 --> 00:22:22,240
which can be three-dimensional but i

523
00:22:20,320 --> 00:22:24,480
know that the distance functions in both

524
00:22:22,240 --> 00:22:26,559
this are not very accurate when they

525
00:22:24,480 --> 00:22:28,559
come to third dimension

526
00:22:26,559 --> 00:22:30,158
so the distance is done by posgs

527
00:22:28,559 --> 00:22:32,399
basically mobility db will manage the

528
00:22:30,159 --> 00:22:32,400
fine

529
00:22:32,559 --> 00:22:41,840
okay thank you very much again thank you

530
00:22:42,240 --> 00:22:44,320
you

