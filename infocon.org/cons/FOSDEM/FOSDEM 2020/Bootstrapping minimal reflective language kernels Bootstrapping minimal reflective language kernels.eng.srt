1
00:00:05,440 --> 00:00:08,720
hello

2
00:00:06,000 --> 00:00:10,160
good morning again now yes i am for

3
00:00:08,720 --> 00:00:13,200
myself paulo

4
00:00:10,160 --> 00:00:15,440
i am with carolina hernandez and we are

5
00:00:13,200 --> 00:00:16,239
going to present a bootstrapping minimal

6
00:00:15,440 --> 00:00:18,480
reflective

7
00:00:16,239 --> 00:00:20,159
language kernels that basically is

8
00:00:18,480 --> 00:00:22,800
something that we use

9
00:00:20,160 --> 00:00:23,680
for pharaoh itself but we want to be

10
00:00:22,800 --> 00:00:27,039
able to use

11
00:00:23,680 --> 00:00:30,720
for other tools i am with

12
00:00:27,039 --> 00:00:32,399
carolina hernandez she's a phd student

13
00:00:30,720 --> 00:00:32,960
she's working a lot in the bootstrapping

14
00:00:32,399 --> 00:00:35,360
of

15
00:00:32,960 --> 00:00:36,559
kernels using faro and the tools and the

16
00:00:35,360 --> 00:00:39,680
problems that

17
00:00:36,559 --> 00:00:41,760
we have on them so the question should

18
00:00:39,680 --> 00:00:42,879
be i will do a little introduction of

19
00:00:41,760 --> 00:00:45,199
the problem that we have

20
00:00:42,879 --> 00:00:47,440
and she will provide the solutions to

21
00:00:45,200 --> 00:00:47,440
them

22
00:00:47,600 --> 00:00:53,600
well this is my i myself i

23
00:00:50,879 --> 00:00:54,640
am a pharaoh engineer i work in the

24
00:00:53,600 --> 00:00:59,039
pharaoh consortium

25
00:00:54,640 --> 00:01:02,640
i basically my my my show is trying to

26
00:00:59,039 --> 00:01:05,199
take the innovative ideas and the

27
00:01:02,640 --> 00:01:07,760
nice things done by researchers and try

28
00:01:05,199 --> 00:01:10,798
to do it them for real

29
00:01:07,760 --> 00:01:13,200
in a with an industrial

30
00:01:10,799 --> 00:01:14,560
quality on some time of trying to do it

31
00:01:13,200 --> 00:01:18,560
for real

32
00:01:14,560 --> 00:01:20,799
so what are crafted kernel languages

33
00:01:18,560 --> 00:01:23,200
well basically the idea that we have is

34
00:01:20,799 --> 00:01:25,920
that we want to produce

35
00:01:23,200 --> 00:01:27,439
as many languages as we need we want to

36
00:01:25,920 --> 00:01:29,600
produce as many runtimes

37
00:01:27,439 --> 00:01:31,119
as we need we need to produce the to

38
00:01:29,600 --> 00:01:33,600
have the ability to

39
00:01:31,119 --> 00:01:34,400
produce languages and runtimes for a

40
00:01:33,600 --> 00:01:36,640
small

41
00:01:34,400 --> 00:01:38,880
domains or languages and runtime for

42
00:01:36,640 --> 00:01:41,439
specific domains and we want to have

43
00:01:38,880 --> 00:01:43,280
a given language that give us support

44
00:01:41,439 --> 00:01:45,119
for implementing our problem

45
00:01:43,280 --> 00:01:46,799
but also it gives us all the tools that

46
00:01:45,119 --> 00:01:48,880
we need but not

47
00:01:46,799 --> 00:01:50,079
much more because we want to have small

48
00:01:48,880 --> 00:01:54,399
languages

49
00:01:50,079 --> 00:01:57,919
why basically this is useful for iot for

50
00:01:54,399 --> 00:02:00,560
all the uh resource constraint uh

51
00:01:57,920 --> 00:02:01,600
devices that we can have but also it can

52
00:02:00,560 --> 00:02:04,320
be useful

53
00:02:01,600 --> 00:02:05,679
when we have we are paying by resources

54
00:02:04,320 --> 00:02:08,720
for example if we are using

55
00:02:05,680 --> 00:02:10,640
a cloud computing or if we are using

56
00:02:08,720 --> 00:02:13,760
virtualization we want to

57
00:02:10,639 --> 00:02:15,119
improve the usage of resources so you we

58
00:02:13,760 --> 00:02:18,160
only want to pay

59
00:02:15,120 --> 00:02:21,120
what we are really using

60
00:02:18,160 --> 00:02:22,640
but as this is a piece of software we

61
00:02:21,120 --> 00:02:24,080
have to generate it

62
00:02:22,640 --> 00:02:26,238
it from the source code we have to

63
00:02:24,080 --> 00:02:28,319
compile it we have to deploy it

64
00:02:26,239 --> 00:02:29,520
if it has some kind of problem we have

65
00:02:28,319 --> 00:02:32,000
we want to debug it

66
00:02:29,520 --> 00:02:33,840
and we want to update it so if we take

67
00:02:32,000 --> 00:02:36,800
our system

68
00:02:33,840 --> 00:02:38,080
so big system and we start reducing it

69
00:02:36,800 --> 00:02:40,560
and we remove for example

70
00:02:38,080 --> 00:02:41,680
the debugging capabilities how we debug

71
00:02:40,560 --> 00:02:45,040
it

72
00:02:41,680 --> 00:02:47,200
so we will have to have shipping

73
00:02:45,040 --> 00:02:48,239
in the small run time all the debugging

74
00:02:47,200 --> 00:02:50,958
capabilities or

75
00:02:48,239 --> 00:02:51,840
if we want to i update it well we want

76
00:02:50,959 --> 00:02:54,319
we have to

77
00:02:51,840 --> 00:02:55,920
also keep the updated so we want to try

78
00:02:54,319 --> 00:02:58,879
to see what are the tools

79
00:02:55,920 --> 00:02:59,440
required to minimize this overhead and

80
00:02:58,879 --> 00:03:02,840
still

81
00:02:59,440 --> 00:03:06,239
be able to debug the system update them

82
00:03:02,840 --> 00:03:10,959
dynamically and develop them

83
00:03:06,239 --> 00:03:14,080
in a in a nice reproducible way

84
00:03:10,959 --> 00:03:17,440
so our proposed approach is use a

85
00:03:14,080 --> 00:03:21,200
high-level bootstrap where we have

86
00:03:17,440 --> 00:03:23,920
a language that uses a lot of

87
00:03:21,200 --> 00:03:25,200
reflection where we can define in our

88
00:03:23,920 --> 00:03:27,679
small language in our

89
00:03:25,200 --> 00:03:29,119
small run time a lot of the operations

90
00:03:27,680 --> 00:03:30,959
the reflective or the

91
00:03:29,120 --> 00:03:32,640
a lot of the required reflective

92
00:03:30,959 --> 00:03:35,920
operations to do these

93
00:03:32,640 --> 00:03:38,958
modifications we want to generate them

94
00:03:35,920 --> 00:03:40,319
this small language and kernels by doing

95
00:03:38,959 --> 00:03:42,879
a bootstrap

96
00:03:40,319 --> 00:03:45,679
this is normal we want to start from

97
00:03:42,879 --> 00:03:48,480
from the source code only

98
00:03:45,680 --> 00:03:48,879
but we want to do it in an environment

99
00:03:48,480 --> 00:03:51,280
and

100
00:03:48,879 --> 00:03:52,000
set of tools that allows us to debug it

101
00:03:51,280 --> 00:03:55,280
to update

102
00:03:52,000 --> 00:03:56,480
and to deploy this working in a high

103
00:03:55,280 --> 00:03:59,840
level we don't want to

104
00:03:56,480 --> 00:04:03,040
be crafting the

105
00:03:59,840 --> 00:04:04,480
the language kernel really by hand

106
00:04:03,040 --> 00:04:07,040
because it takes a lot of

107
00:04:04,480 --> 00:04:08,959
of work actually we are using a

108
00:04:07,040 --> 00:04:11,359
bootstrapping process for pharaoh

109
00:04:08,959 --> 00:04:13,519
itself but the problem with that is that

110
00:04:11,360 --> 00:04:16,720
this bootstrapping process

111
00:04:13,519 --> 00:04:18,798
is very complicated we need to you

112
00:04:16,720 --> 00:04:20,720
master a lot of things to know before

113
00:04:18,798 --> 00:04:22,719
being able to touch it without crashing

114
00:04:20,720 --> 00:04:24,160
or you start touching and run the full

115
00:04:22,720 --> 00:04:26,320
bootstrap it fails

116
00:04:24,160 --> 00:04:27,680
touch again it fails and it takes a lot

117
00:04:26,320 --> 00:04:31,680
of time so we want to have

118
00:04:27,680 --> 00:04:34,960
really good tools that uses

119
00:04:31,680 --> 00:04:37,520
the reflective features

120
00:04:34,960 --> 00:04:39,198
uses the ability to to to interpret the

121
00:04:37,520 --> 00:04:42,719
language and to simulate it

122
00:04:39,199 --> 00:04:46,560
and give us better bootstrapping tools

123
00:04:42,720 --> 00:04:47,040
so this is in part some development to

124
00:04:46,560 --> 00:04:50,240
improve

125
00:04:47,040 --> 00:04:52,320
our life like developer safari to strap

126
00:04:50,240 --> 00:04:53,120
new versions of arrow but also it can be

127
00:04:52,320 --> 00:04:56,080
extended to

128
00:04:53,120 --> 00:04:58,800
bootstrap smaller kernels and smaller

129
00:04:56,080 --> 00:04:58,800
applications

130
00:04:59,040 --> 00:05:03,520
so basically the context that we have

131
00:05:01,520 --> 00:05:06,799
now in faro

132
00:05:03,520 --> 00:05:08,560
is that we have a language definition of

133
00:05:06,800 --> 00:05:09,280
a runtime definition that is basically

134
00:05:08,560 --> 00:05:11,600
source code

135
00:05:09,280 --> 00:05:12,320
small talk source code that we execute

136
00:05:11,600 --> 00:05:16,240
this

137
00:05:12,320 --> 00:05:19,280
small talk circle is run in inside a

138
00:05:16,240 --> 00:05:22,320
pre-existing photo that we will

139
00:05:19,280 --> 00:05:24,000
generate a new image executing the code

140
00:05:22,320 --> 00:05:26,960
and the bootstrap step by step

141
00:05:24,000 --> 00:05:28,800
this problem is that touching the

142
00:05:26,960 --> 00:05:30,799
modifying this source cause requires a

143
00:05:28,800 --> 00:05:31,840
lot of knowledge or a lot of patience

144
00:05:30,800 --> 00:05:34,960
because it

145
00:05:31,840 --> 00:05:37,919
is a lot of trial and error once the

146
00:05:34,960 --> 00:05:39,359
full furrow image generates a small

147
00:05:37,919 --> 00:05:42,000
image of the kernel

148
00:05:39,360 --> 00:05:43,440
it can be executed itself independently

149
00:05:42,000 --> 00:05:46,639
in its own virtual

150
00:05:43,440 --> 00:05:50,719
virtual machine however

151
00:05:46,639 --> 00:05:53,440
i will pass now to carolina

152
00:05:50,720 --> 00:05:54,560
this can always fail most of the time

153
00:05:53,440 --> 00:05:59,520
this fails that is the

154
00:05:54,560 --> 00:05:59,520
the problem okay

155
00:06:02,319 --> 00:06:08,560
like this this thanks okay

156
00:06:05,520 --> 00:06:10,479
so as pablo was saying yes the bootstrap

157
00:06:08,560 --> 00:06:12,240
process is complicated and the thing is

158
00:06:10,479 --> 00:06:15,280
that it requires a lot of

159
00:06:12,240 --> 00:06:18,400
expertise to debug it and to basically

160
00:06:15,280 --> 00:06:18,880
modify the language definition so the

161
00:06:18,400 --> 00:06:20,719
problem

162
00:06:18,880 --> 00:06:22,240
specifically is that inside the language

163
00:06:20,720 --> 00:06:24,479
definition if we have

164
00:06:22,240 --> 00:06:25,280
unintended errors which we will call

165
00:06:24,479 --> 00:06:28,240
defects

166
00:06:25,280 --> 00:06:29,440
okay they will generate failures during

167
00:06:28,240 --> 00:06:32,240
the bootstrap process

168
00:06:29,440 --> 00:06:32,800
or during the execution of the of the

169
00:06:32,240 --> 00:06:36,319
kernel

170
00:06:32,800 --> 00:06:38,720
after it was deployed so yeah

171
00:06:36,319 --> 00:06:40,479
it can happen that some defects prevent

172
00:06:38,720 --> 00:06:44,720
the kernel from generated

173
00:06:40,479 --> 00:06:46,800
and that's fine it's we can

174
00:06:44,720 --> 00:06:48,800
know ahead of time but the problem is

175
00:06:46,800 --> 00:06:49,919
some kinds of defects they will manifest

176
00:06:48,800 --> 00:06:52,479
only after

177
00:06:49,919 --> 00:06:53,440
so we will generate a buggy kernel which

178
00:06:52,479 --> 00:06:55,039
will fail here

179
00:06:53,440 --> 00:06:56,880
and the problem is that in here

180
00:06:55,039 --> 00:06:57,520
sometimes we are running this small

181
00:06:56,880 --> 00:07:01,440
kernel

182
00:06:57,520 --> 00:07:03,840
in a resource constraint device which

183
00:07:01,440 --> 00:07:04,719
given the fact that the kernel is small

184
00:07:03,840 --> 00:07:06,400
we don't have

185
00:07:04,720 --> 00:07:08,639
debugging support we don't have

186
00:07:06,400 --> 00:07:11,120
sometimes the layer of communication

187
00:07:08,639 --> 00:07:12,000
uh to debug remotely so this is the

188
00:07:11,120 --> 00:07:15,120
challenge

189
00:07:12,000 --> 00:07:17,199
okay what do you want

190
00:07:15,120 --> 00:07:19,039
what do we want we want to open the

191
00:07:17,199 --> 00:07:21,360
bootstrap process to the community and

192
00:07:19,039 --> 00:07:23,440
we want to allow to anyone to be able to

193
00:07:21,360 --> 00:07:24,160
modify the current booster process of

194
00:07:23,440 --> 00:07:28,319
photo

195
00:07:24,160 --> 00:07:32,080
or to use the the same set of tools

196
00:07:28,319 --> 00:07:38,319
for creating their own small languages

197
00:07:32,080 --> 00:07:41,359
so since fixing errors is a complex task

198
00:07:38,319 --> 00:07:44,879
we intend to provide

199
00:07:41,360 --> 00:07:48,000
high-level tools which will allows us to

200
00:07:44,879 --> 00:07:50,639
create maybe from zero if you want

201
00:07:48,000 --> 00:07:51,680
or or modify an exist an existing

202
00:07:50,639 --> 00:07:54,639
language definition

203
00:07:51,680 --> 00:07:58,160
just the source code and after to debug

204
00:07:54,639 --> 00:08:01,360
the full process

205
00:07:58,160 --> 00:08:03,520
okay so among the tools that we are

206
00:08:01,360 --> 00:08:06,960
providing we have a code editor

207
00:08:03,520 --> 00:08:09,758
okay which is used to modify the

208
00:08:06,960 --> 00:08:10,719
the source source code of the language

209
00:08:09,759 --> 00:08:14,080
and

210
00:08:10,720 --> 00:08:16,479
this code editor provides the same

211
00:08:14,080 --> 00:08:17,599
features that the code editor in faro

212
00:08:16,479 --> 00:08:20,000
provides currently

213
00:08:17,599 --> 00:08:20,878
we can browse code navigate we can

214
00:08:20,000 --> 00:08:23,280
perform

215
00:08:20,879 --> 00:08:25,440
refactorings etc and this is something

216
00:08:23,280 --> 00:08:27,119
that we have before because usually the

217
00:08:25,440 --> 00:08:31,120
edition of the code was

218
00:08:27,120 --> 00:08:34,719
made by hand in a plain text

219
00:08:31,120 --> 00:08:36,560
file so this is to start with

220
00:08:34,719 --> 00:08:37,919
the next thing that we are providing is

221
00:08:36,559 --> 00:08:41,598
debugging support

222
00:08:37,919 --> 00:08:44,000
okay so we provide a custom divider

223
00:08:41,599 --> 00:08:44,800
which allows us to debug the bootstrap

224
00:08:44,000 --> 00:08:47,440
process

225
00:08:44,800 --> 00:08:49,680
but also the application that will run

226
00:08:47,440 --> 00:08:52,959
inside the generated kernel

227
00:08:49,680 --> 00:08:55,519
okay so uh

228
00:08:52,959 --> 00:08:56,880
and this this debugger will allows us to

229
00:08:55,519 --> 00:08:59,680
debug the application

230
00:08:56,880 --> 00:09:00,880
before the deploying so we managed to do

231
00:08:59,680 --> 00:09:04,000
this by providing

232
00:09:00,880 --> 00:09:06,160
a simulated environment uh

233
00:09:04,000 --> 00:09:09,680
in which the application will run and we

234
00:09:06,160 --> 00:09:13,439
will be able to debug it

235
00:09:09,680 --> 00:09:16,719
this debugger also provides low level

236
00:09:13,440 --> 00:09:20,080
high level tools

237
00:09:16,720 --> 00:09:23,120
for dealing with low level

238
00:09:20,080 --> 00:09:24,560
features regarding the interaction that

239
00:09:23,120 --> 00:09:25,120
the kernel will have with the virtual

240
00:09:24,560 --> 00:09:28,479
machine

241
00:09:25,120 --> 00:09:28,480
but yeah it's

242
00:09:28,959 --> 00:09:35,518
okay uh we also provide a set of ins

243
00:09:32,480 --> 00:09:36,160
inspectors for to be able to inspect the

244
00:09:35,519 --> 00:09:38,800
kernel

245
00:09:36,160 --> 00:09:39,839
while it is being generated and each one

246
00:09:38,800 --> 00:09:41,279
of the objects

247
00:09:39,839 --> 00:09:42,959
or of the elements that we are

248
00:09:41,279 --> 00:09:46,240
installing inside of it

249
00:09:42,959 --> 00:09:50,719
so as an example in here

250
00:09:46,240 --> 00:09:50,720
for example we are seeing an array of

251
00:09:50,800 --> 00:09:54,719
important objects which are instances

252
00:09:53,600 --> 00:09:56,560
inside the kernel

253
00:09:54,720 --> 00:09:58,720
and we can see for example the main

254
00:09:56,560 --> 00:10:00,319
process that we are installing we can

255
00:09:58,720 --> 00:10:03,360
inspect it and since photo

256
00:10:00,320 --> 00:10:06,560
is is fully reflective

257
00:10:03,360 --> 00:10:09,200
et cetera we can provide through a

258
00:10:06,560 --> 00:10:10,640
photo capabilities the ability to see

259
00:10:09,200 --> 00:10:14,240
what is inside the

260
00:10:10,640 --> 00:10:16,800
the kernel in a high level way we also

261
00:10:14,240 --> 00:10:19,200
are providing visual analysis of the

262
00:10:16,800 --> 00:10:21,279
language definition which are available

263
00:10:19,200 --> 00:10:23,040
even before the generating process so

264
00:10:21,279 --> 00:10:24,480
this way you can see for example the

265
00:10:23,040 --> 00:10:28,079
hierarchy for classes

266
00:10:24,480 --> 00:10:30,959
the initial inherent in

267
00:10:28,079 --> 00:10:33,199
inheritance inheritance hierarchy for

268
00:10:30,959 --> 00:10:34,160
classes we can see the number of methods

269
00:10:33,200 --> 00:10:36,640
per class

270
00:10:34,160 --> 00:10:38,959
it's just a set of visual tools tools

271
00:10:36,640 --> 00:10:41,920
which will give you a general view

272
00:10:38,959 --> 00:10:42,399
of how your kernel will look like and

273
00:10:41,920 --> 00:10:45,519
what

274
00:10:42,399 --> 00:10:47,279
it does contain contain so it is

275
00:10:45,519 --> 00:10:50,079
important to notice that this is

276
00:10:47,279 --> 00:10:51,279
not only a constraint to the generation

277
00:10:50,079 --> 00:10:54,079
of new languages

278
00:10:51,279 --> 00:10:55,040
but it is also useful for developing the

279
00:10:54,079 --> 00:10:57,439
application

280
00:10:55,040 --> 00:10:58,319
which will be installed inside inside

281
00:10:57,440 --> 00:11:01,200
the kernel

282
00:10:58,320 --> 00:11:03,440
so to provide this support we don't need

283
00:11:01,200 --> 00:11:05,120
to modify nothing because the same tool

284
00:11:03,440 --> 00:11:05,920
set which we are using to debug the

285
00:11:05,120 --> 00:11:08,240
bootstrap

286
00:11:05,920 --> 00:11:11,040
allows us to debug the application that

287
00:11:08,240 --> 00:11:11,040
we run after

288
00:11:11,200 --> 00:11:17,040
and yeah that's it

289
00:11:15,120 --> 00:11:29,839
thank you for your attention and i'm

290
00:11:17,040 --> 00:11:29,839
open to questions

291
00:11:37,980 --> 00:11:42,000
[Music]

292
00:11:39,680 --> 00:11:42,719
okay for the case of a small language

293
00:11:42,000 --> 00:11:46,399
you could

294
00:11:42,720 --> 00:11:50,480
for example develop a language

295
00:11:46,399 --> 00:11:53,920
that is specifically

296
00:11:50,480 --> 00:11:57,440
that is small is the smallest

297
00:11:53,920 --> 00:11:59,680
language that you need to run a specific

298
00:11:57,440 --> 00:12:01,440
application for example in an arduino

299
00:11:59,680 --> 00:12:03,120
i don't know you want an application

300
00:12:01,440 --> 00:12:07,120
that i don't know

301
00:12:03,120 --> 00:12:10,240
needs to check a sensor every

302
00:12:07,120 --> 00:12:12,079
i don't know one second so

303
00:12:10,240 --> 00:12:14,079
you don't need big part of the library

304
00:12:12,079 --> 00:12:15,279
that we are providing right now in photo

305
00:12:14,079 --> 00:12:15,920
you don't need it because it's very

306
00:12:15,279 --> 00:12:18,560
simple

307
00:12:15,920 --> 00:12:19,599
so that way you can get rid of most of

308
00:12:18,560 --> 00:12:23,040
the features that

309
00:12:19,600 --> 00:12:25,120
uh that comes by default in the

310
00:12:23,040 --> 00:12:27,040
in in a minimal kernel and you can

311
00:12:25,120 --> 00:12:30,560
obtain a kernel which will weight

312
00:12:27,040 --> 00:12:33,839
i don't know 50 kilobytes maybe less

313
00:12:30,560 --> 00:12:36,959
so there's no need for all the dynamic

314
00:12:33,839 --> 00:12:40,560
memory management

315
00:12:36,959 --> 00:12:43,920
we no we have uh we have a minimal

316
00:12:40,560 --> 00:12:46,160
kernel definition which is what it is

317
00:12:43,920 --> 00:12:47,199
required by the virtual machine to run

318
00:12:46,160 --> 00:12:50,639
an image

319
00:12:47,200 --> 00:12:53,279
so that is provided since the beginning

320
00:12:50,639 --> 00:12:54,560
given that on top of that you can start

321
00:12:53,279 --> 00:12:57,439
adding things

322
00:12:54,560 --> 00:12:58,079
and you can make it as as minimal as you

323
00:12:57,440 --> 00:13:07,839
can

324
00:12:58,079 --> 00:13:07,839
as you want yeah yes

325
00:13:22,320 --> 00:13:25,839
we are i'm not sure if i understood

326
00:13:24,320 --> 00:13:28,160
where the the question but

327
00:13:25,839 --> 00:13:29,600
we are aiming to run always in the same

328
00:13:28,160 --> 00:13:31,439
virtual machine

329
00:13:29,600 --> 00:13:32,800
our small kernels are running always in

330
00:13:31,440 --> 00:13:36,000
the same virtual machine

331
00:13:32,800 --> 00:13:37,859
which runs faro now this is like the

332
00:13:36,000 --> 00:13:39,199
the the

333
00:13:37,860 --> 00:13:43,040
[Music]

334
00:13:39,199 --> 00:13:45,920
er yeah the scope

335
00:13:43,040 --> 00:13:46,719
of this project we have a parallel

336
00:13:45,920 --> 00:13:49,040
project which

337
00:13:46,720 --> 00:13:50,720
are working on minimizing the virtual

338
00:13:49,040 --> 00:13:52,560
machine we're working with

339
00:13:50,720 --> 00:13:54,079
but for now we are fixing the virtual

340
00:13:52,560 --> 00:13:54,638
machine this is the virtual machine that

341
00:13:54,079 --> 00:13:56,239
you have

342
00:13:54,639 --> 00:13:58,560
and yeah it's a bicolor interpreter

343
00:13:56,240 --> 00:14:00,880
filter machine and uh

344
00:13:58,560 --> 00:14:02,399
so we are generating these kernels which

345
00:14:00,880 --> 00:14:04,240
are completely compatible with this

346
00:14:02,399 --> 00:14:07,600
virtual machine

347
00:14:04,240 --> 00:14:09,279
just yeah it's just to to add the

348
00:14:07,600 --> 00:14:11,000
the virtual machine that we have now we

349
00:14:09,279 --> 00:14:13,279
have basically running for

350
00:14:11,000 --> 00:14:17,600
[Music]

351
00:14:13,279 --> 00:14:21,839
32 and 64-bit pcs and 32-bit

352
00:14:17,600 --> 00:14:25,760
arm architectures we this is a sheet

353
00:14:21,839 --> 00:14:29,680
based or should improve a bike

354
00:14:25,760 --> 00:14:32,160
machine and we are working to generate

355
00:14:29,680 --> 00:14:34,239
alternative to this for example directly

356
00:14:32,160 --> 00:14:35,839
generating the device

357
00:14:34,240 --> 00:14:37,519
the machine code from the buy code

358
00:14:35,839 --> 00:14:40,320
during the the execution

359
00:14:37,519 --> 00:14:42,240
but all these solutions of directly

360
00:14:40,320 --> 00:14:45,279
generating machine code

361
00:14:42,240 --> 00:14:46,320
it will require some work or some

362
00:14:45,279 --> 00:14:48,399
research how to

363
00:14:46,320 --> 00:14:51,120
to keep all the dynamic features of

364
00:14:48,399 --> 00:14:53,360
pharaoh it's just generating code but

365
00:14:51,120 --> 00:14:54,160
as carolina says this is a part of the

366
00:14:53,360 --> 00:14:57,519
story we

367
00:14:54,160 --> 00:15:01,040
we are also working in the in the

368
00:14:57,519 --> 00:15:01,600
in improving the vm and the part that we

369
00:15:01,040 --> 00:15:03,760
are now

370
00:15:01,600 --> 00:15:05,839
is in the tooling of the vm because also

371
00:15:03,760 --> 00:15:08,880
we are want to democratize the

372
00:15:05,839 --> 00:15:11,600
the the access to the vm uh and

373
00:15:08,880 --> 00:15:12,959
so it make it easy to to new new

374
00:15:11,600 --> 00:15:17,279
improvements and it does

375
00:15:12,959 --> 00:15:17,279
not need to be an expert to do it

376
00:15:24,839 --> 00:15:27,839
yes

377
00:15:34,240 --> 00:15:38,959
yeah we're writing in a slang that is a

378
00:15:36,880 --> 00:15:42,000
a kind of distribution of small talk

379
00:15:38,959 --> 00:15:43,920
and then that is a compiled into c it's

380
00:15:42,000 --> 00:15:45,920
a subset it's similar it's a similar

381
00:15:43,920 --> 00:15:49,120
solution that for example our python

382
00:15:45,920 --> 00:15:51,439
where we have a small subset of a pharah

383
00:15:49,120 --> 00:15:53,839
that can be directly compiled or can

384
00:15:51,440 --> 00:15:54,800
can be transpiled to c and we are using

385
00:15:53,839 --> 00:15:57,199
that to

386
00:15:54,800 --> 00:15:58,319
uh generate the the lowest the lowest

387
00:15:57,199 --> 00:16:01,199
level

388
00:15:58,320 --> 00:16:03,519
the then on top of that you have your

389
00:16:01,199 --> 00:16:06,839
small talk of you follow and you can do

390
00:16:03,519 --> 00:16:08,959
all the reflective and dynamic stuff

391
00:16:06,839 --> 00:16:12,560
usually

392
00:16:08,959 --> 00:16:16,160
we have tried we still we are as we

393
00:16:12,560 --> 00:16:19,199
well assembly is lacking a is lacking

394
00:16:16,160 --> 00:16:20,639
a garbage collection or a nicer memory

395
00:16:19,199 --> 00:16:22,800
model that allows us to

396
00:16:20,639 --> 00:16:25,279
to have actually an arbitrary memory

397
00:16:22,800 --> 00:16:25,920
model we are a little limited but it can

398
00:16:25,279 --> 00:16:28,480
run

399
00:16:25,920 --> 00:16:30,560
uh but there is also a translation to

400
00:16:28,480 --> 00:16:32,800
directly to javascript that works

401
00:16:30,560 --> 00:16:34,239
better even than the version of

402
00:16:32,800 --> 00:16:36,560
webassembly we are still

403
00:16:34,240 --> 00:16:38,079
kind of limited by the limitations of

404
00:16:36,560 --> 00:16:42,638
well assembly until the

405
00:16:38,079 --> 00:16:46,560
the next release

406
00:16:42,639 --> 00:16:51,160
here he's just outside okay

407
00:16:46,560 --> 00:16:55,469
thank you

408
00:16:51,160 --> 00:16:55,469
[Applause]

409
00:16:57,440 --> 00:16:59,519
you

