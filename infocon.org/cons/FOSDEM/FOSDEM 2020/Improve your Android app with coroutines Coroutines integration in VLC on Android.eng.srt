1
00:00:06,480 --> 00:00:10,480
okay

2
00:00:07,440 --> 00:00:13,360
everyone thank you for coming uh

3
00:00:10,480 --> 00:00:13,840
yeah okay if you leave the room please

4
00:00:13,360 --> 00:00:15,678
help

5
00:00:13,840 --> 00:00:17,119
your chair because it's really noisy

6
00:00:15,679 --> 00:00:19,199
otherwise also

7
00:00:17,119 --> 00:00:21,039
we still have three licenses because

8
00:00:19,199 --> 00:00:25,439
actually one

9
00:00:21,039 --> 00:00:27,359
got uh yeah someone won it so

10
00:00:25,439 --> 00:00:28,800
quick recall that you can open a pull

11
00:00:27,359 --> 00:00:31,519
request and send it to me

12
00:00:28,800 --> 00:00:33,120
and you basically get get a license now

13
00:00:31,519 --> 00:00:35,760
it's time to introduce

14
00:00:33,120 --> 00:00:36,399
again joffrey that is going to talk

15
00:00:35,760 --> 00:00:38,800
about

16
00:00:36,399 --> 00:00:45,840
improve your android app with curitins

17
00:00:38,800 --> 00:00:45,839
so please welcome

18
00:00:46,160 --> 00:00:50,319
so hello again for some of you do you

19
00:00:48,239 --> 00:00:53,360
hear me correctly

20
00:00:50,320 --> 00:00:57,280
okay good um so i'll talk

21
00:00:53,360 --> 00:01:00,239
to you about the routines again

22
00:00:57,280 --> 00:01:02,960
um so once more i'm a video online

23
00:01:00,239 --> 00:01:04,239
member and i work at video labs which is

24
00:01:02,960 --> 00:01:06,560
a

25
00:01:04,239 --> 00:01:07,840
company dedicated to have full people

26
00:01:06,560 --> 00:01:11,680
people full-time on

27
00:01:07,840 --> 00:01:14,240
vlc development i doing the vs android

28
00:01:11,680 --> 00:01:14,240
adaptation

29
00:01:15,100 --> 00:01:18,240
[Music]

30
00:01:19,600 --> 00:01:27,039
first of all in android we have an

31
00:01:22,880 --> 00:01:30,240
callback based api mostly

32
00:01:27,040 --> 00:01:32,720
and the catch of proteins if you had the

33
00:01:30,240 --> 00:01:33,600
basic this morning is that we just trade

34
00:01:32,720 --> 00:01:37,039
some

35
00:01:33,600 --> 00:01:39,759
blocking operation for like

36
00:01:37,040 --> 00:01:40,640
call back hidden stuff so we dispatched

37
00:01:39,759 --> 00:01:42,560
our code

38
00:01:40,640 --> 00:01:44,240
like we use and learn android for

39
00:01:42,560 --> 00:01:47,439
example of when we post

40
00:01:44,240 --> 00:01:49,919
a runnable in a thread so this the

41
00:01:47,439 --> 00:01:52,398
function are not a call stack anymore

42
00:01:49,920 --> 00:01:54,560
execution is not immediate

43
00:01:52,399 --> 00:01:57,040
so the catch here on android is that we

44
00:01:54,560 --> 00:01:59,200
have to keep in mind that the dispatch

45
00:01:57,040 --> 00:02:00,079
is very important and we may not respect

46
00:01:59,200 --> 00:02:02,880
the

47
00:02:00,079 --> 00:02:04,320
the ui state we cannot assume what the

48
00:02:02,880 --> 00:02:07,839
ui state is

49
00:02:04,320 --> 00:02:10,160
for example here i just

50
00:02:07,840 --> 00:02:12,480
show you the run on ui thread which is a

51
00:02:10,160 --> 00:02:15,440
convenient method on java

52
00:02:12,480 --> 00:02:17,040
you have the equivalent on uh with code

53
00:02:15,440 --> 00:02:20,079
chains which is basically just

54
00:02:17,040 --> 00:02:22,239
launch this will

55
00:02:20,080 --> 00:02:24,080
dispatch except if you precise that you

56
00:02:22,239 --> 00:02:27,360
don't want this initial dispatch and the

57
00:02:24,080 --> 00:02:31,280
code will be executed immediately

58
00:02:27,360 --> 00:02:31,280
until it suspends of course

59
00:02:34,879 --> 00:02:38,239
for example here we are in the oncreate

60
00:02:36,959 --> 00:02:41,840
callback

61
00:02:38,239 --> 00:02:44,480
and we launch a code routine so i print

62
00:02:41,840 --> 00:02:46,640
something at every step and you can read

63
00:02:44,480 --> 00:02:49,200
that

64
00:02:46,640 --> 00:02:51,040
it means that we are on create we end

65
00:02:49,200 --> 00:02:53,679
the oncreate

66
00:02:51,040 --> 00:02:55,200
before the code the corrupting starts we

67
00:02:53,680 --> 00:02:57,920
even

68
00:02:55,200 --> 00:02:58,720
print onstart so we go to the onstart

69
00:02:57,920 --> 00:03:01,839
state

70
00:02:58,720 --> 00:03:05,760
before the this

71
00:03:01,840 --> 00:03:08,640
discount in the launch is executed

72
00:03:05,760 --> 00:03:10,319
and then we have our code in running so

73
00:03:08,640 --> 00:03:11,518
just be aware that if you launch a

74
00:03:10,319 --> 00:03:14,799
protein like let's say

75
00:03:11,519 --> 00:03:15,200
oncreate you it will effectively execute

76
00:03:14,800 --> 00:03:19,120
once

77
00:03:15,200 --> 00:03:23,119
the app is already created and possibly

78
00:03:19,120 --> 00:03:23,120
once the activity is destroyed

79
00:03:24,159 --> 00:03:27,760
maybe user will just launch the europe

80
00:03:27,040 --> 00:03:29,440
in

81
00:03:27,760 --> 00:03:31,679
in landscape mode and you have a screen

82
00:03:29,440 --> 00:03:33,680
rotation exiting so

83
00:03:31,680 --> 00:03:37,280
the activity can be instantly destroyed

84
00:03:33,680 --> 00:03:39,120
before you creating executes

85
00:03:37,280 --> 00:03:40,959
fortunately for us there is the code

86
00:03:39,120 --> 00:03:44,840
routine scope

87
00:03:40,959 --> 00:03:46,400
to help implement the structured

88
00:03:44,840 --> 00:03:51,040
concurrency

89
00:03:46,400 --> 00:03:54,400
which will allow us to map the

90
00:03:51,040 --> 00:03:58,159
to map our coroutines life with the

91
00:03:54,400 --> 00:03:59,760
android lifecycles so first of all

92
00:03:58,159 --> 00:04:01,439
we use the scope like an object it's

93
00:03:59,760 --> 00:04:02,959
just a container for the currency

94
00:04:01,439 --> 00:04:05,680
context the default one

95
00:04:02,959 --> 00:04:06,000
and it will host also a parent job which

96
00:04:05,680 --> 00:04:09,200
we

97
00:04:06,000 --> 00:04:12,000
can use to just cancel every job once we

98
00:04:09,200 --> 00:04:15,200
are done with the view

99
00:04:12,000 --> 00:04:15,920
here show you the basics again so launch

100
00:04:15,200 --> 00:04:19,599
is

101
00:04:15,920 --> 00:04:22,320
usually the entry point of a routine

102
00:04:19,600 --> 00:04:23,040
it returns a job so if you want to have

103
00:04:22,320 --> 00:04:25,680
a

104
00:04:23,040 --> 00:04:26,320
concealable stuff you can just use a

105
00:04:25,680 --> 00:04:30,160
launch inside

106
00:04:26,320 --> 00:04:30,159
another routine and cancel it

107
00:04:30,560 --> 00:04:34,639
at will there is the with context call

108
00:04:33,840 --> 00:04:36,560
you

109
00:04:34,639 --> 00:04:39,520
with context you can precise the context

110
00:04:36,560 --> 00:04:42,000
here i just tell that i want to execute

111
00:04:39,520 --> 00:04:44,000
it with the dispatcher that i owe which

112
00:04:42,000 --> 00:04:46,400
is a higher threat pool

113
00:04:44,000 --> 00:04:48,400
to like get an image so we access files

114
00:04:46,400 --> 00:04:50,320
we just wanted to

115
00:04:48,400 --> 00:04:51,440
want this to be executed in the thread

116
00:04:50,320 --> 00:04:53,759
pool and in

117
00:04:51,440 --> 00:04:55,600
the meantime the main thread is free so

118
00:04:53,759 --> 00:04:56,479
the correcting is suspended which means

119
00:04:55,600 --> 00:04:58,320
that

120
00:04:56,479 --> 00:04:59,840
the main thread is free for other

121
00:04:58,320 --> 00:05:03,280
operations you app

122
00:04:59,840 --> 00:05:04,320
continues its life and you'll get back

123
00:05:03,280 --> 00:05:07,758
to it once the

124
00:05:04,320 --> 00:05:09,919
job is ready the image is fetched and

125
00:05:07,759 --> 00:05:11,520
the bitmap is ready to be executed so we

126
00:05:09,919 --> 00:05:11,919
come back to the main thread when once

127
00:05:11,520 --> 00:05:14,240
it's

128
00:05:11,919 --> 00:05:16,799
available and we can like fill our

129
00:05:14,240 --> 00:05:16,800
imageview

130
00:05:16,880 --> 00:05:20,400
there there is also a creatine scope

131
00:05:19,199 --> 00:05:23,680
function which is

132
00:05:20,400 --> 00:05:26,080
very like the with context

133
00:05:23,680 --> 00:05:27,919
with contacts actually is a new carotene

134
00:05:26,080 --> 00:05:31,359
scope inner country scope in the

135
00:05:27,919 --> 00:05:32,960
current one and the protein cup awaits

136
00:05:31,360 --> 00:05:37,199
for all its children to be

137
00:05:32,960 --> 00:05:40,880
over so in this example i used the

138
00:05:37,199 --> 00:05:43,840
call to launch two parallel jobs and

139
00:05:40,880 --> 00:05:46,400
and use the results as soon as both i

140
00:05:43,840 --> 00:05:48,638
have completed

141
00:05:46,400 --> 00:05:50,159
and this curriculum scope call is just

142
00:05:48,639 --> 00:05:53,680
suspending until

143
00:05:50,160 --> 00:05:56,000
all operations are over

144
00:05:53,680 --> 00:05:56,960
exactly exactly like with contact

145
00:05:56,000 --> 00:05:58,960
because this is

146
00:05:56,960 --> 00:06:00,400
again the same thing with contacts are

147
00:05:58,960 --> 00:06:04,080
some shortcuts

148
00:06:00,400 --> 00:06:07,198
if we already are in the correct context

149
00:06:04,080 --> 00:06:10,240
but basically that's it um

150
00:06:07,199 --> 00:06:14,080
so the most convenient thing here is

151
00:06:10,240 --> 00:06:16,240
the the core routine scope

152
00:06:14,080 --> 00:06:18,560
matching our our life cycle and android

153
00:06:16,240 --> 00:06:21,680
x the especially the ktx

154
00:06:18,560 --> 00:06:22,479
extension now provide a usual extension

155
00:06:21,680 --> 00:06:25,360
function

156
00:06:22,479 --> 00:06:26,719
we have a ready to use like cycle scope

157
00:06:25,360 --> 00:06:28,880
in our activity now

158
00:06:26,720 --> 00:06:30,160
we just have to use it it will initiate

159
00:06:28,880 --> 00:06:32,479
a curating scope

160
00:06:30,160 --> 00:06:34,960
and this scope will be cancelled when

161
00:06:32,479 --> 00:06:38,639
the activity is destroyed

162
00:06:34,960 --> 00:06:41,840
so for any croatian job you have to do

163
00:06:38,639 --> 00:06:45,280
just use this scope and it will do this

164
00:06:41,840 --> 00:06:49,039
creation and cancellation for you

165
00:06:45,280 --> 00:06:51,520
so in this launch for example

166
00:06:49,039 --> 00:06:53,440
i'm sure the code this code will be

167
00:06:51,520 --> 00:06:56,639
executed once

168
00:06:53,440 --> 00:06:59,680
the the activity is

169
00:06:56,639 --> 00:07:00,560
still alive uh if i fetch a file in the

170
00:06:59,680 --> 00:07:03,280
background thread

171
00:07:00,560 --> 00:07:03,840
and i come back when the activity is

172
00:07:03,280 --> 00:07:07,119
dead

173
00:07:03,840 --> 00:07:09,039
is destroyed this protein won't resume

174
00:07:07,120 --> 00:07:09,759
so the fire has been fetched but we

175
00:07:09,039 --> 00:07:13,360
won't

176
00:07:09,759 --> 00:07:15,199
use it it will it just will be dropped

177
00:07:13,360 --> 00:07:18,319
we don't come back in the main thread if

178
00:07:15,199 --> 00:07:20,240
the scope in cancel

179
00:07:18,319 --> 00:07:23,039
and there is the equivalent for

180
00:07:20,240 --> 00:07:24,960
viewmodel which is much more uh

181
00:07:23,039 --> 00:07:26,159
useful because usually you want to

182
00:07:24,960 --> 00:07:29,039
execute your current

183
00:07:26,160 --> 00:07:31,120
view models it supports it survives the

184
00:07:29,039 --> 00:07:33,599
screen rotation for example

185
00:07:31,120 --> 00:07:34,560
so it's recommended to use it so this is

186
00:07:33,599 --> 00:07:37,360
vmware scope

187
00:07:34,560 --> 00:07:38,080
and very same thing once you view model

188
00:07:37,360 --> 00:07:41,199
is clear

189
00:07:38,080 --> 00:07:41,680
the scope is cancelled all your job jobs

190
00:07:41,199 --> 00:07:44,240
are

191
00:07:41,680 --> 00:07:45,840
cancelled and you don't have to if you

192
00:07:44,240 --> 00:07:49,199
implemented it correctly

193
00:07:45,840 --> 00:07:49,198
this is automagic

194
00:07:51,759 --> 00:07:57,680
and this is how you

195
00:07:55,039 --> 00:07:58,878
implement a correction scope if you ever

196
00:07:57,680 --> 00:08:02,240
needed to

197
00:07:58,879 --> 00:08:06,319
do that for another object another

198
00:08:02,240 --> 00:08:08,240
life cycle another session let's say um

199
00:08:06,319 --> 00:08:09,919
you can either create a scope a

200
00:08:08,240 --> 00:08:12,080
curtainscope object or you can

201
00:08:09,919 --> 00:08:13,599
your class can implement the creatine

202
00:08:12,080 --> 00:08:16,719
code interface

203
00:08:13,599 --> 00:08:18,319
you just have to override the value

204
00:08:16,720 --> 00:08:22,319
currency context which will

205
00:08:18,319 --> 00:08:23,440
just here be like the we want to work

206
00:08:22,319 --> 00:08:25,919
in the main thread so use

207
00:08:23,440 --> 00:08:29,919
dispatchers.main and we add a surprise

208
00:08:25,919 --> 00:08:30,639
supervisor job to just control our all

209
00:08:29,919 --> 00:08:33,360
our

210
00:08:30,639 --> 00:08:34,799
children proteins and consider them once

211
00:08:33,360 --> 00:08:38,399
we're done

212
00:08:34,799 --> 00:08:42,718
and then whenever your object

213
00:08:38,399 --> 00:08:45,279
is clear and you click you cancel the

214
00:08:42,719 --> 00:08:45,920
the curating scope you have a console

215
00:08:45,279 --> 00:08:48,000
function

216
00:08:45,920 --> 00:08:49,519
the area is the actual implementation of

217
00:08:48,000 --> 00:08:51,600
this function it's just called

218
00:08:49,519 --> 00:08:53,200
the job in the context and cancel it so

219
00:08:51,600 --> 00:08:55,519
this is the parent job of all your

220
00:08:53,200 --> 00:08:58,000
coatings

221
00:08:55,519 --> 00:09:00,399
a nice addition really recent in android

222
00:08:58,000 --> 00:09:03,440
x is when started

223
00:09:00,399 --> 00:09:04,160
it's a with context call with a custom

224
00:09:03,440 --> 00:09:07,360
dispatcher

225
00:09:04,160 --> 00:09:10,480
and this dispatcher will be add a queue

226
00:09:07,360 --> 00:09:14,240
for job and will be posed whenever

227
00:09:10,480 --> 00:09:17,440
the let's say your activity or your

228
00:09:14,240 --> 00:09:22,160
life cycle owner is not on started state

229
00:09:17,440 --> 00:09:25,279
so your activity comes background

230
00:09:22,160 --> 00:09:28,480
the your coating won't resume

231
00:09:25,279 --> 00:09:30,720
so from a background task it

232
00:09:28,480 --> 00:09:33,279
the result is already stored but it

233
00:09:30,720 --> 00:09:36,640
won't execute and once the activity is

234
00:09:33,279 --> 00:09:39,760
started again we will do this region

235
00:09:36,640 --> 00:09:41,439
and use the the result and of course

236
00:09:39,760 --> 00:09:43,920
this will be concerned too if the

237
00:09:41,440 --> 00:09:45,360
activity is destroyed there is a

238
00:09:43,920 --> 00:09:48,560
conveniency

239
00:09:45,360 --> 00:09:50,880
launch when started function which just

240
00:09:48,560 --> 00:09:52,800
wrap this with context with this one

241
00:09:50,880 --> 00:09:54,720
starting in the launch goal so we

242
00:09:52,800 --> 00:09:57,359
don't have to already be encouraging to

243
00:09:54,720 --> 00:09:57,360
start some job

244
00:10:03,519 --> 00:10:10,560
and today most of the libraries support

245
00:10:07,440 --> 00:10:12,720
uh suspend function um i

246
00:10:10,560 --> 00:10:14,479
showed a retrofit example this morning

247
00:10:12,720 --> 00:10:16,560
you can now just

248
00:10:14,480 --> 00:10:18,640
define a your retrofit function as

249
00:10:16,560 --> 00:10:20,399
suspend and you have the correct result

250
00:10:18,640 --> 00:10:22,000
this is the very thing same thing for

251
00:10:20,399 --> 00:10:25,040
rube um

252
00:10:22,000 --> 00:10:28,160
instead of having

253
00:10:25,040 --> 00:10:30,160
a blocking function or just wanted to

254
00:10:28,160 --> 00:10:31,199
you can have like a live data of your

255
00:10:30,160 --> 00:10:32,959
result

256
00:10:31,200 --> 00:10:35,360
which is really extremely useful on

257
00:10:32,959 --> 00:10:37,279
phone android but you also can

258
00:10:35,360 --> 00:10:38,800
declare it as a suspense function which

259
00:10:37,279 --> 00:10:41,519
will return the type you want

260
00:10:38,800 --> 00:10:42,959
so this will suspend during the

261
00:10:41,519 --> 00:10:44,480
background work

262
00:10:42,959 --> 00:10:46,079
and you come back on main thread with

263
00:10:44,480 --> 00:10:49,200
your result you

264
00:10:46,079 --> 00:10:52,239
also can get a flow

265
00:10:49,200 --> 00:10:52,720
and just consume your flow and room will

266
00:10:52,240 --> 00:10:54,800
emit

267
00:10:52,720 --> 00:10:57,200
in this flow every time your data is

268
00:10:54,800 --> 00:10:57,199
updated

269
00:10:57,760 --> 00:11:02,959
so that's three different ways to just

270
00:11:00,399 --> 00:11:06,240
wait for your result and safely

271
00:11:02,959 --> 00:11:06,239
manage it in name thread

272
00:11:08,480 --> 00:11:13,040
you have some transformation available

273
00:11:11,380 --> 00:11:14,959
[Music]

274
00:11:13,040 --> 00:11:16,959
and here is the the simple

275
00:11:14,959 --> 00:11:19,920
implementation you

276
00:11:16,959 --> 00:11:21,518
um i just use a mediator like data which

277
00:11:19,920 --> 00:11:24,640
is a live data subscribing

278
00:11:21,519 --> 00:11:26,240
subscribing another one to expose its

279
00:11:24,640 --> 00:11:28,000
result and in the meantime you can do

280
00:11:26,240 --> 00:11:30,160
some transformation and i use

281
00:11:28,000 --> 00:11:31,200
the launch call to execute in a

282
00:11:30,160 --> 00:11:35,360
corrupting some

283
00:11:31,200 --> 00:11:35,360
work i want to offload from let's say

284
00:11:37,600 --> 00:11:41,360
and android ktx now has some extension

285
00:11:40,640 --> 00:11:44,319
function like

286
00:11:41,360 --> 00:11:45,040
map which does exactly exactly that so

287
00:11:44,320 --> 00:11:47,680
you have

288
00:11:45,040 --> 00:11:48,560
some switch map and some transformation

289
00:11:47,680 --> 00:11:50,880
really with

290
00:11:48,560 --> 00:11:52,160
simple uh extra content extension

291
00:11:50,880 --> 00:11:55,279
function and you can do

292
00:11:52,160 --> 00:11:56,399
some creating job on it there is the

293
00:11:55,279 --> 00:12:01,680
reverse

294
00:11:56,399 --> 00:12:03,839
approach also you can create a live data

295
00:12:01,680 --> 00:12:04,959
within a curating scope doing some

296
00:12:03,839 --> 00:12:07,839
suspending function

297
00:12:04,959 --> 00:12:08,560
and um posting its value when it's ready

298
00:12:07,839 --> 00:12:10,320
so here

299
00:12:08,560 --> 00:12:13,359
we have a really really simple one we

300
00:12:10,320 --> 00:12:17,120
just emit hello every second

301
00:12:13,360 --> 00:12:20,160
so the idea is to do uh live data which

302
00:12:17,120 --> 00:12:20,160
is almost like a flow

303
00:12:21,120 --> 00:12:25,120
so this is suspending you can do io in

304
00:12:24,560 --> 00:12:27,359
it

305
00:12:25,120 --> 00:12:28,240
anything you want with with context or

306
00:12:27,360 --> 00:12:30,639
anything

307
00:12:28,240 --> 00:12:31,760
and emit in the live data really easily

308
00:12:30,639 --> 00:12:35,519
now

309
00:12:31,760 --> 00:12:36,480
um it seems like that uh life cycle live

310
00:12:35,519 --> 00:12:39,760
data ktx

311
00:12:36,480 --> 00:12:41,360
starting version 2.2 so

312
00:12:39,760 --> 00:12:45,279
and then you just have to observe this

313
00:12:41,360 --> 00:12:45,279
and get the result in your ui

314
00:12:47,640 --> 00:12:52,880
[Music]

315
00:12:48,880 --> 00:12:57,439
now for complete different

316
00:12:52,880 --> 00:13:00,639
use case you have actors on

317
00:12:57,440 --> 00:13:03,839
kotliniks this will probably be

318
00:13:00,639 --> 00:13:07,279
either replaced or enriched by for

319
00:13:03,839 --> 00:13:07,839
a finer api but this is very like a

320
00:13:07,279 --> 00:13:10,320
handler

321
00:13:07,839 --> 00:13:11,519
except that this handler is executing a

322
00:13:10,320 --> 00:13:13,440
connections clock and you can do

323
00:13:11,519 --> 00:13:14,240
suspending functions so you you will

324
00:13:13,440 --> 00:13:17,760
queue

325
00:13:14,240 --> 00:13:20,000
some suspending calls and you can

326
00:13:17,760 --> 00:13:21,120
uh do what we call like confine

327
00:13:20,000 --> 00:13:24,880
mutability

328
00:13:21,120 --> 00:13:28,320
so here i do some like modification and

329
00:13:24,880 --> 00:13:32,079
deletion and also read access on some

330
00:13:28,320 --> 00:13:35,120
on my data set so if i do all of this

331
00:13:32,079 --> 00:13:37,680
through my actor i am guaranteed that

332
00:13:35,120 --> 00:13:38,800
all operation will execute once one

333
00:13:37,680 --> 00:13:41,040
after the other

334
00:13:38,800 --> 00:13:42,560
so i never have any concurrent access on

335
00:13:41,040 --> 00:13:44,880
it so i don't need

336
00:13:42,560 --> 00:13:45,839
any lock i don't need to block any

337
00:13:44,880 --> 00:13:48,880
thread

338
00:13:45,839 --> 00:13:51,279
it just bq and to use it i'll just

339
00:13:48,880 --> 00:13:52,079
here i offer to the thread so it's a

340
00:13:51,279 --> 00:13:54,399
completely

341
00:13:52,079 --> 00:13:56,079
i think it doesn't suspend you just

342
00:13:54,399 --> 00:13:58,639
offer and uh

343
00:13:56,079 --> 00:14:00,319
in my case i chose uh unlimited capacity

344
00:13:58,639 --> 00:14:04,639
so the offer will always accept

345
00:14:00,320 --> 00:14:04,639
until the this actor is closed

346
00:14:05,839 --> 00:14:10,560
and this sector will automatically close

347
00:14:08,399 --> 00:14:12,560
once the lifecycle is cancelled also

348
00:14:10,560 --> 00:14:15,279
so always the same id with structured

349
00:14:12,560 --> 00:14:15,279
concurrency

350
00:14:15,360 --> 00:14:19,120
so this this actor will leave as long as

351
00:14:18,560 --> 00:14:22,399
the

352
00:14:19,120 --> 00:14:23,440
current coding scope so i'll just like

353
00:14:22,399 --> 00:14:25,920
offer to this

354
00:14:23,440 --> 00:14:26,480
uh to this sector any operation i want

355
00:14:25,920 --> 00:14:28,240
to do

356
00:14:26,480 --> 00:14:30,079
there will be queue they will execute

357
00:14:28,240 --> 00:14:34,000
and you can do any suspending function

358
00:14:30,079 --> 00:14:34,000
calculation io access etc

359
00:14:35,680 --> 00:14:41,839
this has been really a useful

360
00:14:38,720 --> 00:14:42,639
repository layer of vlc to do some

361
00:14:41,839 --> 00:14:45,760
complicated

362
00:14:42,639 --> 00:14:47,920
operation like any modification also

363
00:14:45,760 --> 00:14:50,079
and expose it then expose it to the ui

364
00:14:47,920 --> 00:14:52,719
so if you have a reactive

365
00:14:50,079 --> 00:14:54,479
um architecture so if you are use live

366
00:14:52,720 --> 00:14:56,240
data a lot you just basically

367
00:14:54,480 --> 00:14:58,079
you ui will just observe the results so

368
00:14:56,240 --> 00:15:00,560
you don't need synchronous

369
00:14:58,079 --> 00:15:00,560
result

370
00:15:03,440 --> 00:15:07,920
now interesting part of kotlin core

371
00:15:06,959 --> 00:15:12,160
routines are

372
00:15:07,920 --> 00:15:15,199
the callback l wrapping we just

373
00:15:12,160 --> 00:15:17,519
uh we can hide

374
00:15:15,199 --> 00:15:18,560
all of these callbacks and get a simple

375
00:15:17,519 --> 00:15:20,160
function to

376
00:15:18,560 --> 00:15:22,399
get the result and suspend in the

377
00:15:20,160 --> 00:15:24,319
meantime it's just when one the

378
00:15:22,399 --> 00:15:26,320
until the callbacks are called so here

379
00:15:24,320 --> 00:15:30,480
this is um

380
00:15:26,320 --> 00:15:33,199
the lib vlc fibrozine asynchronous api

381
00:15:30,480 --> 00:15:35,199
so we basically request to browse a

382
00:15:33,199 --> 00:15:36,880
certain url and then we have callbacks

383
00:15:35,199 --> 00:15:40,399
to

384
00:15:36,880 --> 00:15:43,360
to to tell us that we discovered

385
00:15:40,399 --> 00:15:44,000
every media on the on the fly and then

386
00:15:43,360 --> 00:15:45,759
at the end

387
00:15:44,000 --> 00:15:47,680
the browse is ended and all the

388
00:15:45,759 --> 00:15:50,639
discovery all the folder

389
00:15:47,680 --> 00:15:50,638
has been discovered

390
00:15:51,600 --> 00:15:58,240
so first time implementation was just

391
00:15:55,040 --> 00:16:01,519
we add a list that we filled

392
00:15:58,240 --> 00:16:02,240
we declared listener to get the

393
00:16:01,519 --> 00:16:05,680
callbacks

394
00:16:02,240 --> 00:16:07,680
which will get it the refresh

395
00:16:05,680 --> 00:16:10,079
function was just requesting this

396
00:16:07,680 --> 00:16:10,079
browsing

397
00:16:10,160 --> 00:16:13,839
and telling which listener will continue

398
00:16:12,079 --> 00:16:17,758
the job and then in this in the

399
00:16:13,839 --> 00:16:23,440
this job we had to fill the list and

400
00:16:17,759 --> 00:16:26,480
basically expose it to the ui in the end

401
00:16:23,440 --> 00:16:28,639
now we have um flow

402
00:16:26,480 --> 00:16:29,600
in this case it's based on uh on the

403
00:16:28,639 --> 00:16:32,800
channel

404
00:16:29,600 --> 00:16:35,440
like we really like the actors

405
00:16:32,800 --> 00:16:37,120
but this has the uh quality of being a

406
00:16:35,440 --> 00:16:40,320
call stream

407
00:16:37,120 --> 00:16:40,320
so we declare a flow

408
00:16:40,720 --> 00:16:46,320
and this will be executed only when

409
00:16:44,240 --> 00:16:47,519
someone will consume it not before so

410
00:16:46,320 --> 00:16:50,880
this is declarative

411
00:16:47,519 --> 00:16:53,440
so read this code and this will not be

412
00:16:50,880 --> 00:16:55,759
executed immediately just whenever it's

413
00:16:53,440 --> 00:17:00,000
it's lazy

414
00:16:55,759 --> 00:17:00,000
so in this flow we declare our listener

415
00:17:00,399 --> 00:17:06,720
and we offer our media

416
00:17:03,600 --> 00:17:09,520
to our channel because this is a

417
00:17:06,720 --> 00:17:12,400
callback flow which is a channel flow

418
00:17:09,520 --> 00:17:14,160
under the hood this is a channel working

419
00:17:12,400 --> 00:17:15,120
so in this one we have a callbacks and

420
00:17:14,160 --> 00:17:17,839
this callback

421
00:17:15,119 --> 00:17:19,438
fill the channel and close it once we're

422
00:17:17,839 --> 00:17:23,198
done

423
00:17:19,439 --> 00:17:25,039
and then we can request

424
00:17:23,199 --> 00:17:26,559
request our browsing the listener is

425
00:17:25,039 --> 00:17:32,480
ready and await

426
00:17:26,559 --> 00:17:34,960
the result to be ready

427
00:17:32,480 --> 00:17:36,799
the usage of it is um first of all i

428
00:17:34,960 --> 00:17:39,679
show the simplest

429
00:17:36,799 --> 00:17:40,879
operator is collect so for every new

430
00:17:39,679 --> 00:17:42,480
file we discovered

431
00:17:40,880 --> 00:17:44,559
the collect will be and we can like

432
00:17:42,480 --> 00:17:47,840
print the name

433
00:17:44,559 --> 00:17:47,840
and this is suspending

434
00:17:49,280 --> 00:17:53,039
we also have like two list operator

435
00:17:51,840 --> 00:17:56,159
which

436
00:17:53,039 --> 00:18:00,240
waits for the all files to be ready and

437
00:17:56,160 --> 00:18:01,440
we get the list and we also can do some

438
00:18:00,240 --> 00:18:04,720
transformation because flow

439
00:18:01,440 --> 00:18:07,360
are as matching as uh api matching

440
00:18:04,720 --> 00:18:09,440
eric's java for example so we have here

441
00:18:07,360 --> 00:18:11,520
is the map not new so we filtered an

442
00:18:09,440 --> 00:18:12,720
element and then on a nominal one we can

443
00:18:11,520 --> 00:18:16,720
do our transformation

444
00:18:12,720 --> 00:18:16,720
and continue to expose it

445
00:18:18,720 --> 00:18:23,200
this is how we wrap callbacks for single

446
00:18:20,960 --> 00:18:26,400
shot api

447
00:18:23,200 --> 00:18:28,559
we in this example we just want to start

448
00:18:26,400 --> 00:18:30,559
the vlc media library and once

449
00:18:28,559 --> 00:18:31,840
it's ready once it's ready we want to

450
00:18:30,559 --> 00:18:35,200
exit

451
00:18:31,840 --> 00:18:35,199
query some media

452
00:18:35,440 --> 00:18:42,960
so i just write a iron function

453
00:18:40,160 --> 00:18:43,919
um we have a shortcut if media libraries

454
00:18:42,960 --> 00:18:46,480
already started

455
00:18:43,919 --> 00:18:48,400
we just do our call we don't need to

456
00:18:46,480 --> 00:18:52,240
suspend but otherwise

457
00:18:48,400 --> 00:18:55,200
we'll uh we'll prepare a listener

458
00:18:52,240 --> 00:18:56,080
for the for i mean the callback call

459
00:18:55,200 --> 00:18:57,600
when the library

460
00:18:56,080 --> 00:18:59,600
is ready and we start the la this

461
00:18:57,600 --> 00:19:02,799
library once it's ready the

462
00:18:59,600 --> 00:19:05,039
continuation resume will resume the core

463
00:19:02,799 --> 00:19:08,840
routine this is how we create a routine

464
00:19:05,039 --> 00:19:10,720
and we're ready to execute so this

465
00:19:08,840 --> 00:19:13,199
function

466
00:19:10,720 --> 00:19:15,039
can be cancelled concealable too we have

467
00:19:13,200 --> 00:19:17,760
an additional call to

468
00:19:15,039 --> 00:19:19,520
to do and so for if we connect the

469
00:19:17,760 --> 00:19:21,520
current scope is cancelled we

470
00:19:19,520 --> 00:19:24,240
properly remove the listener we add and

471
00:19:21,520 --> 00:19:24,879
we don't wait for the result and the

472
00:19:24,240 --> 00:19:28,240
user

473
00:19:24,880 --> 00:19:31,520
is extremely simple we just swap our

474
00:19:28,240 --> 00:19:33,280
media library call in the in this

475
00:19:31,520 --> 00:19:35,120
function and we have automatically a

476
00:19:33,280 --> 00:19:37,280
suspending function which

477
00:19:35,120 --> 00:19:38,399
waits for the immediate brewery to be

478
00:19:37,280 --> 00:19:40,960
ready and then

479
00:19:38,400 --> 00:19:40,960
where is it

480
00:19:42,080 --> 00:19:46,080
another fun one is using flow for events

481
00:19:44,960 --> 00:19:49,360
i guess you saw

482
00:19:46,080 --> 00:19:50,480
that this morning still working with the

483
00:19:49,360 --> 00:19:53,280
channel so we

484
00:19:50,480 --> 00:19:55,120
do a channel we consume it as a flow and

485
00:19:53,280 --> 00:19:56,080
basically this is for our recyclerview

486
00:19:55,120 --> 00:19:58,159
adapter

487
00:19:56,080 --> 00:20:00,559
so every click of element or long click

488
00:19:58,160 --> 00:20:04,799
is sent to this channel

489
00:20:00,559 --> 00:20:04,799
and this channel is transformed as a

490
00:20:04,840 --> 00:20:09,280
flow

491
00:20:06,240 --> 00:20:13,280
and then on the fragment side we just

492
00:20:09,280 --> 00:20:15,600
collect the this flow to get the

493
00:20:13,280 --> 00:20:17,918
the the click events so it's pretty

494
00:20:15,600 --> 00:20:21,199
simple on each and we process it

495
00:20:17,919 --> 00:20:22,559
so we have a click sealed class and then

496
00:20:21,200 --> 00:20:27,360
we launch in

497
00:20:22,559 --> 00:20:29,200
lifecycle scope to be in our ui scope

498
00:20:27,360 --> 00:20:30,559
and then this is the extension function

499
00:20:29,200 --> 00:20:33,200
of click process

500
00:20:30,559 --> 00:20:36,799
so we have the simple click a long click

501
00:20:33,200 --> 00:20:38,960
operation etc that's fairly easy to use

502
00:20:36,799 --> 00:20:42,240
so just with consumer flow and we just

503
00:20:38,960 --> 00:20:42,240
declare how we will do it

504
00:20:42,559 --> 00:20:46,399
and that's a very clean way to pass

505
00:20:44,640 --> 00:20:49,840
events from your adapter

506
00:20:46,400 --> 00:20:49,840
to your fragments for example

507
00:20:52,159 --> 00:21:03,840
that's it for me for today for android x

508
00:20:55,280 --> 00:21:03,840
i hope you will enjoy

509
00:21:08,000 --> 00:21:20,970
are there questions

510
00:21:17,840 --> 00:21:20,970
[Applause]

511
00:21:26,400 --> 00:21:33,120
we're starting a new android project and

512
00:21:30,159 --> 00:21:33,760
we are currently having problems with

513
00:21:33,120 --> 00:21:36,719
the

514
00:21:33,760 --> 00:21:37,600
debugging do you have any tips about how

515
00:21:36,720 --> 00:21:41,039
can we debug

516
00:21:37,600 --> 00:21:44,480
such complex core routines

517
00:21:41,039 --> 00:21:47,679
debugging yeah so you want some tips for

518
00:21:44,480 --> 00:21:47,679
the beginner core routine right

519
00:21:48,080 --> 00:21:53,039
judgement tries to make this work easier

520
00:21:52,080 --> 00:21:56,240
and

521
00:21:53,039 --> 00:21:56,799
the debugger which is better and better

522
00:21:56,240 --> 00:21:59,520
to

523
00:21:56,799 --> 00:22:01,840
follow this course the stack trace are

524
00:21:59,520 --> 00:22:05,760
more respectful of the

525
00:22:01,840 --> 00:22:08,158
real code stack now in this case also i

526
00:22:05,760 --> 00:22:08,960
uh i didn't tell you tell you in this

527
00:22:08,159 --> 00:22:10,960
talk but

528
00:22:08,960 --> 00:22:13,280
when you define a query in context you

529
00:22:10,960 --> 00:22:27,280
can give it a name

530
00:22:13,280 --> 00:22:30,320
this is just a string to add

531
00:22:27,280 --> 00:22:32,000
i don't have an example but

532
00:22:30,320 --> 00:22:33,600
let's say in the with context you say

533
00:22:32,000 --> 00:22:36,240
you have the dispatcher.io

534
00:22:33,600 --> 00:22:37,280
you can just add the plus operator and

535
00:22:36,240 --> 00:22:41,840
you pass it a string

536
00:22:37,280 --> 00:22:41,840
and this is the name of your protein

537
00:22:43,190 --> 00:22:46,299
[Music]

538
00:22:49,840 --> 00:22:55,840
any other question

539
00:22:56,559 --> 00:23:10,639
and thank you very much thank you

540
00:23:08,559 --> 00:23:10,639
you

