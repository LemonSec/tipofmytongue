1
00:00:06,319 --> 00:00:11,200
okay so we've got another lightning talk

2
00:00:08,080 --> 00:00:15,679
from alexis celia

3
00:00:11,200 --> 00:00:18,080
go ahead um so i'm alexi or cloudhead

4
00:00:15,679 --> 00:00:19,039
and i'm going to talk about the problem

5
00:00:18,080 --> 00:00:21,439
of

6
00:00:19,039 --> 00:00:23,680
peer-to-peer code collaboration and what

7
00:00:21,439 --> 00:00:27,039
we're doing at monadic

8
00:00:23,680 --> 00:00:30,080
around this so

9
00:00:27,039 --> 00:00:33,120
um i'd like to start with git because

10
00:00:30,080 --> 00:00:34,960
i think this is today the foundation for

11
00:00:33,120 --> 00:00:35,599
code collaboration it's the common

12
00:00:34,960 --> 00:00:37,920
ground

13
00:00:35,600 --> 00:00:38,800
and what i mean by that is that um you

14
00:00:37,920 --> 00:00:41,920
know despite us

15
00:00:38,800 --> 00:00:43,680
using maybe gitlab github or mailing

16
00:00:41,920 --> 00:00:46,640
lists or whatever it is

17
00:00:43,680 --> 00:00:48,399
there's always at the center of that git

18
00:00:46,640 --> 00:00:51,440
at least for most people

19
00:00:48,399 --> 00:00:53,600
and if we want to talk about

20
00:00:51,440 --> 00:00:55,039
code collaboration therefore we should

21
00:00:53,600 --> 00:00:59,120
start with git

22
00:00:55,039 --> 00:01:00,800
um however uh

23
00:00:59,120 --> 00:01:02,160
there are a few things missing from git

24
00:01:00,800 --> 00:01:04,559
as a protocol

25
00:01:02,160 --> 00:01:06,080
um and this is why things like like

26
00:01:04,559 --> 00:01:09,520
hosted platforms

27
00:01:06,080 --> 00:01:11,039
are so popular um

28
00:01:09,520 --> 00:01:12,720
so i broke it down to three categories

29
00:01:11,040 --> 00:01:15,280
there's discovery

30
00:01:12,720 --> 00:01:17,920
so this is the problem of finding change

31
00:01:15,280 --> 00:01:20,159
sets to merge or finding peers

32
00:01:17,920 --> 00:01:21,280
finding remotes places to push to things

33
00:01:20,159 --> 00:01:23,920
like that

34
00:01:21,280 --> 00:01:25,520
canonicity which is to know which is the

35
00:01:23,920 --> 00:01:27,600
upstream that

36
00:01:25,520 --> 00:01:30,000
i should download my changes from or i

37
00:01:27,600 --> 00:01:33,039
should download a release from

38
00:01:30,000 --> 00:01:36,479
and social artifacts so

39
00:01:33,040 --> 00:01:39,360
i get the bare bones get only

40
00:01:36,479 --> 00:01:40,079
only supports code and if we want things

41
00:01:39,360 --> 00:01:42,799
like issues

42
00:01:40,079 --> 00:01:45,679
and uh and uh pull requests or things

43
00:01:42,799 --> 00:01:49,439
like that um we need something extra

44
00:01:45,680 --> 00:01:52,880
um so let's look at what has been

45
00:01:49,439 --> 00:01:54,320
done to resolve these so first of all we

46
00:01:52,880 --> 00:01:56,320
have mailing lists so this is kind of

47
00:01:54,320 --> 00:02:00,559
the first solution

48
00:01:56,320 --> 00:02:00,559
that there was and um

49
00:02:00,719 --> 00:02:06,399
so it's it's fairly simple in a way

50
00:02:04,000 --> 00:02:09,360
but in terms of user experience and

51
00:02:06,399 --> 00:02:12,560
usability it's not great and so

52
00:02:09,360 --> 00:02:16,080
from there we kind of moved towards um

53
00:02:12,560 --> 00:02:19,920
uh what i'm calling hosted platforms

54
00:02:16,080 --> 00:02:21,520
and here we have our usability and

55
00:02:19,920 --> 00:02:24,238
you know it's it's become really

56
00:02:21,520 --> 00:02:28,000
mainstream um

57
00:02:24,239 --> 00:02:30,560
but we have another problem which is um

58
00:02:28,000 --> 00:02:31,920
a lot of these are not free software um

59
00:02:30,560 --> 00:02:34,000
they are not necessarily

60
00:02:31,920 --> 00:02:36,079
resilient in that uh they are run by

61
00:02:34,000 --> 00:02:39,120
for-profit companies

62
00:02:36,080 --> 00:02:39,599
and they are they're controlled in a way

63
00:02:39,120 --> 00:02:42,480
that

64
00:02:39,599 --> 00:02:44,238
does not allow communities to sort of um

65
00:02:42,480 --> 00:02:46,959
stir them in the direction that is best

66
00:02:44,239 --> 00:02:50,319
for the community

67
00:02:46,959 --> 00:02:52,560
so um

68
00:02:50,319 --> 00:02:54,640
what does peer-to-peer have to say about

69
00:02:52,560 --> 00:02:59,280
this is there is there something we can

70
00:02:54,640 --> 00:03:01,839
do with peer-to-peer technology um that

71
00:02:59,280 --> 00:03:03,280
could fill this gap that get the

72
00:03:01,840 --> 00:03:07,680
protocol

73
00:03:03,280 --> 00:03:07,680
has in terms of code collaboration

74
00:03:08,080 --> 00:03:14,000
so first of all just to explain why we

75
00:03:10,959 --> 00:03:14,000
would want to do this so

76
00:03:14,319 --> 00:03:18,799
peer to peer systems are resilient and

77
00:03:16,480 --> 00:03:19,599
this is the most interesting thing about

78
00:03:18,800 --> 00:03:21,840
them

79
00:03:19,599 --> 00:03:22,640
they're economically resilient which

80
00:03:21,840 --> 00:03:25,280
means that

81
00:03:22,640 --> 00:03:26,798
they don't depend on making a profit and

82
00:03:25,280 --> 00:03:28,000
this is simply because the burden is

83
00:03:26,799 --> 00:03:31,120
shared across

84
00:03:28,000 --> 00:03:33,519
the network and the community so

85
00:03:31,120 --> 00:03:35,599
typically users host nodes and therefore

86
00:03:33,519 --> 00:03:38,879
we don't need to pay for hosting

87
00:03:35,599 --> 00:03:42,000
um politically resilient which is

88
00:03:38,879 --> 00:03:44,399
to say that there is no authority or

89
00:03:42,000 --> 00:03:46,159
or country or government that can shut

90
00:03:44,400 --> 00:03:49,519
down a peer-to-peer network um

91
00:03:46,159 --> 00:03:52,000
easily for everyone at least

92
00:03:49,519 --> 00:03:53,120
and finally technically resilient uh

93
00:03:52,000 --> 00:03:55,840
because there's no single point of

94
00:03:53,120 --> 00:03:59,280
failure right it's quite hard to ddos

95
00:03:55,840 --> 00:04:02,959
or to dos a peer-to-peer system

96
00:03:59,280 --> 00:04:05,360
um so

97
00:04:02,959 --> 00:04:07,200
before diving into into our solution i

98
00:04:05,360 --> 00:04:08,799
want to talk about an example

99
00:04:07,200 --> 00:04:11,760
peer-to-peer system that

100
00:04:08,799 --> 00:04:13,280
i really like called secure scuttlebutt

101
00:04:11,760 --> 00:04:14,879
and the reason i want to talk about this

102
00:04:13,280 --> 00:04:17,600
is that we're going to use

103
00:04:14,879 --> 00:04:18,399
we're going to take some inspiration

104
00:04:17,600 --> 00:04:20,799
from it

105
00:04:18,399 --> 00:04:21,918
for our code collaboration solution um

106
00:04:20,798 --> 00:04:22,638
one of the coolest things about

107
00:04:21,918 --> 00:04:24,719
scuttlebutt

108
00:04:22,639 --> 00:04:25,840
is this what we call a social overlay

109
00:04:24,720 --> 00:04:29,360
protocol

110
00:04:25,840 --> 00:04:29,840
which is that um essentially replication

111
00:04:29,360 --> 00:04:32,479
works

112
00:04:29,840 --> 00:04:32,880
based on your social network so if you

113
00:04:32,479 --> 00:04:35,520
um

114
00:04:32,880 --> 00:04:36,639
in in the center here you have uh the

115
00:04:35,520 --> 00:04:39,440
the user

116
00:04:36,639 --> 00:04:40,880
um in the pink circle then you have a

117
00:04:39,440 --> 00:04:42,479
circle of friends and a circle of

118
00:04:40,880 --> 00:04:45,440
friends of friends and

119
00:04:42,479 --> 00:04:47,280
everything within the the two circles is

120
00:04:45,440 --> 00:04:49,360
replicated by the user in the middle

121
00:04:47,280 --> 00:04:50,400
right everything out of the circle so

122
00:04:49,360 --> 00:04:52,639
the dotted little

123
00:04:50,400 --> 00:04:53,758
uh little squares are not replicated so

124
00:04:52,639 --> 00:04:56,000
essentially you choose what you

125
00:04:53,759 --> 00:04:59,360
replicate based on who you follow

126
00:04:56,000 --> 00:05:01,120
and you sort of by proxy choose

127
00:04:59,360 --> 00:05:02,479
friends of friends and you also

128
00:05:01,120 --> 00:05:05,199
replicate those

129
00:05:02,479 --> 00:05:06,400
and this has proved to work quite well

130
00:05:05,199 --> 00:05:10,240
at least

131
00:05:06,400 --> 00:05:12,479
for the size of networks scuttlebutt has

132
00:05:10,240 --> 00:05:14,080
um another cool thing about this is that

133
00:05:12,479 --> 00:05:17,360
um uh

134
00:05:14,080 --> 00:05:20,960
you essentially um

135
00:05:17,360 --> 00:05:23,919
each so identities are cryptographic

136
00:05:20,960 --> 00:05:25,280
they use public keys and therefore it's

137
00:05:23,919 --> 00:05:28,400
very easy to verify

138
00:05:25,280 --> 00:05:30,559
uh if something is um uh

139
00:05:28,400 --> 00:05:32,239
legitimate by just verifying the

140
00:05:30,560 --> 00:05:33,680
signatures on the content

141
00:05:32,240 --> 00:05:35,759
and we're gonna we're also gonna use

142
00:05:33,680 --> 00:05:39,120
this uh property

143
00:05:35,759 --> 00:05:40,479
uh cool so what about code collaboration

144
00:05:39,120 --> 00:05:42,400
so how do we how do we sort of take

145
00:05:40,479 --> 00:05:44,080
these ideas um this

146
00:05:42,400 --> 00:05:46,080
kind of scuttlebutt ideas and the things

147
00:05:44,080 --> 00:05:50,560
we talked about resilience and how do we

148
00:05:46,080 --> 00:05:53,719
uh get to a code collaboration solution

149
00:05:50,560 --> 00:05:54,960
so our project is called radical um

150
00:05:53,720 --> 00:05:58,000
[Music]

151
00:05:54,960 --> 00:06:01,758
and uh radical essentially get plus

152
00:05:58,000 --> 00:06:05,440
uh peer-to-peer um

153
00:06:01,759 --> 00:06:07,120
and um there's a there's a few

154
00:06:05,440 --> 00:06:08,479
kind of properties it has that i'm going

155
00:06:07,120 --> 00:06:10,880
to introduce quickly

156
00:06:08,479 --> 00:06:13,280
um of course it's offline first so it

157
00:06:10,880 --> 00:06:16,719
keeps that property that git already has

158
00:06:13,280 --> 00:06:18,239
um it's secure um

159
00:06:16,720 --> 00:06:19,919
in the same way scuttlebutt is secure in

160
00:06:18,240 --> 00:06:21,199
that it's it's all based on

161
00:06:19,919 --> 00:06:23,520
cryptographic identities

162
00:06:21,199 --> 00:06:26,240
and so everything is signed every single

163
00:06:23,520 --> 00:06:28,719
object in a network is signed by someone

164
00:06:26,240 --> 00:06:29,759
um and of course it's peer-to-peer um in

165
00:06:28,720 --> 00:06:31,840
the sense that

166
00:06:29,759 --> 00:06:33,840
um you don't really need a server

167
00:06:31,840 --> 00:06:37,119
although in some cases we'll see i

168
00:06:33,840 --> 00:06:41,119
could be useful but it's not required

169
00:06:37,120 --> 00:06:42,240
um and the the design is based on three

170
00:06:41,120 --> 00:06:45,120
technologies which

171
00:06:42,240 --> 00:06:45,600
um we kind of take our inspiration from

172
00:06:45,120 --> 00:06:48,479
um

173
00:06:45,600 --> 00:06:49,199
so scuttlebutt i just talked about um

174
00:06:48,479 --> 00:06:51,919
where we

175
00:06:49,199 --> 00:06:52,479
we take the um the follow graph but

176
00:06:51,919 --> 00:06:55,680
instead of

177
00:06:52,479 --> 00:06:57,840
a social network we use a network of um

178
00:06:55,680 --> 00:06:58,880
of clones essentially of uh of

179
00:06:57,840 --> 00:07:01,520
repositories

180
00:06:58,880 --> 00:07:02,800
and their remotes um there's tough the

181
00:07:01,520 --> 00:07:05,520
update framework which

182
00:07:02,800 --> 00:07:06,000
um maybe some people know about um which

183
00:07:05,520 --> 00:07:08,000
uh

184
00:07:06,000 --> 00:07:09,520
is a is a way to sort of uh

185
00:07:08,000 --> 00:07:11,599
authoritatively um

186
00:07:09,520 --> 00:07:14,318
update a set of maintainers for example

187
00:07:11,599 --> 00:07:16,880
um or a set of metadata around a project

188
00:07:14,319 --> 00:07:17,440
um even under under attack like a stolen

189
00:07:16,880 --> 00:07:19,199
key and

190
00:07:17,440 --> 00:07:21,360
and things like that and finally get

191
00:07:19,199 --> 00:07:24,240
which i already talked about

192
00:07:21,360 --> 00:07:25,599
um which radical is is uh really based

193
00:07:24,240 --> 00:07:28,960
on

194
00:07:25,599 --> 00:07:31,680
so why why why git

195
00:07:28,960 --> 00:07:33,440
so of course um you know as we talked

196
00:07:31,680 --> 00:07:35,840
about as a common ground for

197
00:07:33,440 --> 00:07:36,639
uh source code collaboration but it's

198
00:07:35,840 --> 00:07:39,280
actually

199
00:07:36,639 --> 00:07:39,919
cool for peer-to-peer in even more ways

200
00:07:39,280 --> 00:07:42,638
right

201
00:07:39,919 --> 00:07:44,639
um so for one it's optimized for full

202
00:07:42,639 --> 00:07:46,879
replication so this is great for

203
00:07:44,639 --> 00:07:48,720
for peer-to-peer offline first systems

204
00:07:46,879 --> 00:07:50,800
um second it's designed for the bizarre

205
00:07:48,720 --> 00:07:52,720
model and it turns out the bizarre model

206
00:07:50,800 --> 00:07:55,360
um where there's no real um you know

207
00:07:52,720 --> 00:07:57,360
kind of central server you push to

208
00:07:55,360 --> 00:07:59,039
um works really well for peer-to-peer

209
00:07:57,360 --> 00:08:00,080
where there typically isn't a central

210
00:07:59,039 --> 00:08:03,360
server either

211
00:08:00,080 --> 00:08:04,960
so this works really well for us um

212
00:08:03,360 --> 00:08:06,560
finally pac files pack files are really

213
00:08:04,960 --> 00:08:07,359
really cool um and it's one of the

214
00:08:06,560 --> 00:08:09,759
reasons why

215
00:08:07,360 --> 00:08:10,879
um certain sort of uh peer-to-peer

216
00:08:09,759 --> 00:08:13,360
networks

217
00:08:10,879 --> 00:08:14,479
didn't work for us uh like ipfs and i

218
00:08:13,360 --> 00:08:17,440
can talk more about this

219
00:08:14,479 --> 00:08:17,919
after the presentation um because pac

220
00:08:17,440 --> 00:08:20,160
files

221
00:08:17,919 --> 00:08:22,240
is an interactive protocol which makes

222
00:08:20,160 --> 00:08:24,240
uh replication super super fast

223
00:08:22,240 --> 00:08:26,080
um and most of you know about it so i'm

224
00:08:24,240 --> 00:08:28,960
not gonna go into it

225
00:08:26,080 --> 00:08:30,800
um cool so let's talk about the the

226
00:08:28,960 --> 00:08:32,000
architecture of radical quickly

227
00:08:30,800 --> 00:08:34,080
um we don't have that much time but i

228
00:08:32,000 --> 00:08:36,880
think just kind of um

229
00:08:34,080 --> 00:08:38,000
going briefly into it so each user

230
00:08:36,880 --> 00:08:41,039
essentially

231
00:08:38,000 --> 00:08:44,320
um is this uh this yellow

232
00:08:41,039 --> 00:08:44,640
sort of square and um each user runs two

233
00:08:44,320 --> 00:08:47,279
or

234
00:08:44,640 --> 00:08:48,959
has two essentially copies which are not

235
00:08:47,279 --> 00:08:51,040
really copies or hard link but

236
00:08:48,959 --> 00:08:52,640
they're they're they're two logical

237
00:08:51,040 --> 00:08:53,839
copies of the repository there's one

238
00:08:52,640 --> 00:08:56,080
working tree

239
00:08:53,839 --> 00:08:57,600
which is the uh the working copy which

240
00:08:56,080 --> 00:09:00,160
is the one you kind of

241
00:08:57,600 --> 00:09:00,959
edit and commit and this is what you use

242
00:09:00,160 --> 00:09:02,719
day to day

243
00:09:00,959 --> 00:09:04,479
and there's a hidden replicated copy

244
00:09:02,720 --> 00:09:05,680
which is what's being replicated to the

245
00:09:04,480 --> 00:09:08,640
other peers

246
00:09:05,680 --> 00:09:10,239
right and so from the working copy

247
00:09:08,640 --> 00:09:12,000
standpoint it looks like

248
00:09:10,240 --> 00:09:14,480
typical you know if you'd use github or

249
00:09:12,000 --> 00:09:15,519
whatever but in the replicated copy we

250
00:09:14,480 --> 00:09:19,200
have other things

251
00:09:15,519 --> 00:09:21,760
so um we have for instance um

252
00:09:19,200 --> 00:09:22,640
remotes of remotes so as i don't know if

253
00:09:21,760 --> 00:09:25,279
you can read it but

254
00:09:22,640 --> 00:09:26,560
you can essentially um we we store two

255
00:09:25,279 --> 00:09:29,439
degrees out

256
00:09:26,560 --> 00:09:31,359
of all of our remotes and there's some

257
00:09:29,440 --> 00:09:34,080
other sort of hidden branches um

258
00:09:31,360 --> 00:09:34,800
which give metadata around the project

259
00:09:34,080 --> 00:09:36,800
um

260
00:09:34,800 --> 00:09:38,560
so the concept of a project is just kind

261
00:09:36,800 --> 00:09:41,120
of like a set of repositories

262
00:09:38,560 --> 00:09:42,640
that all have the intent to be one thing

263
00:09:41,120 --> 00:09:44,480
one logical thing

264
00:09:42,640 --> 00:09:46,319
and a contributor and this is the

265
00:09:44,480 --> 00:09:47,360
information on the specific clone or

266
00:09:46,320 --> 00:09:51,120
specific

267
00:09:47,360 --> 00:09:54,880
um tree essentially that that you have

268
00:09:51,120 --> 00:09:55,519
on your computer um and so the the the

269
00:09:54,880 --> 00:09:57,760
purple

270
00:09:55,519 --> 00:09:59,600
um the the replicated copies sort of

271
00:09:57,760 --> 00:10:01,839
replicate amongst each other

272
00:09:59,600 --> 00:10:03,440
and the user pushes locally essentially

273
00:10:01,839 --> 00:10:06,560
it's like a it's a file protocol

274
00:10:03,440 --> 00:10:08,880
push so it's instant um

275
00:10:06,560 --> 00:10:10,239
but the the get push is when you want to

276
00:10:08,880 --> 00:10:11,600
publish when you want to make something

277
00:10:10,240 --> 00:10:13,440
public essentially

278
00:10:11,600 --> 00:10:14,959
and before that it's just kind of your

279
00:10:13,440 --> 00:10:18,560
own

280
00:10:14,959 --> 00:10:19,760
your own copy and so diving a little bit

281
00:10:18,560 --> 00:10:21,359
into the

282
00:10:19,760 --> 00:10:22,800
you know what what is this idea of

283
00:10:21,360 --> 00:10:24,079
project and why do we use tuff and

284
00:10:22,800 --> 00:10:27,359
things like that

285
00:10:24,079 --> 00:10:29,839
um so this is kind of a mock um

286
00:10:27,360 --> 00:10:31,200
view of this this project file and so

287
00:10:29,839 --> 00:10:32,399
it's it's essentially in a disjoint

288
00:10:31,200 --> 00:10:35,279
branch right it's in a

289
00:10:32,399 --> 00:10:36,399
branch that is hidden and you have of

290
00:10:35,279 --> 00:10:37,519
course like project name

291
00:10:36,399 --> 00:10:39,279
but the most important thing is you have

292
00:10:37,519 --> 00:10:40,720
a list of maintainers right and these

293
00:10:39,279 --> 00:10:43,920
are public keys

294
00:10:40,720 --> 00:10:46,399
and updating this list of maintainers

295
00:10:43,920 --> 00:10:47,199
requires essentially a signature from a

296
00:10:46,399 --> 00:10:50,959
quorum

297
00:10:47,200 --> 00:10:52,640
of maintainers so um

298
00:10:50,959 --> 00:10:54,640
you can essentially verify this when you

299
00:10:52,640 --> 00:10:55,519
clone a project and verify that the code

300
00:10:54,640 --> 00:10:58,640
is essentially

301
00:10:55,519 --> 00:11:00,399
approved by the maintainers in some way

302
00:10:58,640 --> 00:11:02,240
and the way this works is that this

303
00:11:00,399 --> 00:11:03,760
initial project file which has the the

304
00:11:02,240 --> 00:11:06,720
initial list of maintainers

305
00:11:03,760 --> 00:11:07,200
is hashed um or it's it's committed and

306
00:11:06,720 --> 00:11:09,440
the

307
00:11:07,200 --> 00:11:11,680
the um the commit hash becomes a project

308
00:11:09,440 --> 00:11:13,519
id right and so that's what you share

309
00:11:11,680 --> 00:11:15,199
and so when you receive a when you clone

310
00:11:13,519 --> 00:11:19,200
a project you have the project id

311
00:11:15,200 --> 00:11:21,279
you verify the the project metadata file

312
00:11:19,200 --> 00:11:22,320
and you verify you sort of go through

313
00:11:21,279 --> 00:11:24,160
the history

314
00:11:22,320 --> 00:11:25,680
of that file which is again in its own

315
00:11:24,160 --> 00:11:27,360
branch um

316
00:11:25,680 --> 00:11:28,800
and verify each step making sure there's

317
00:11:27,360 --> 00:11:30,160
a quorum of signatures

318
00:11:28,800 --> 00:11:31,920
if there are updates like adding

319
00:11:30,160 --> 00:11:34,959
maintainer removing a maintainer and

320
00:11:31,920 --> 00:11:36,880
and so forth and then

321
00:11:34,959 --> 00:11:38,319
each clone so so there's there's one of

322
00:11:36,880 --> 00:11:39,279
these project files for the for the

323
00:11:38,320 --> 00:11:42,079
entire uh

324
00:11:39,279 --> 00:11:43,680
project for the for yeah and there's one

325
00:11:42,079 --> 00:11:45,279
of these contributor files for each

326
00:11:43,680 --> 00:11:46,160
clone in that project right so each

327
00:11:45,279 --> 00:11:48,000
person will have

328
00:11:46,160 --> 00:11:49,360
their own contributor file which has

329
00:11:48,000 --> 00:11:51,440
their signing key

330
00:11:49,360 --> 00:11:53,200
and which also has refs that are signed

331
00:11:51,440 --> 00:11:55,519
by that sign-in key so this is

332
00:11:53,200 --> 00:11:56,639
kind of the the counterpart to that

333
00:11:55,519 --> 00:11:59,120
which says that

334
00:11:56,639 --> 00:11:59,760
um i as a contributor or maintainer

335
00:11:59,120 --> 00:12:03,120
right

336
00:11:59,760 --> 00:12:05,200
um i'm signing this reference saying um

337
00:12:03,120 --> 00:12:06,800
i approve of this this is a legitimate

338
00:12:05,200 --> 00:12:08,480
change right and so in a peer-to-peer

339
00:12:06,800 --> 00:12:11,839
network you can sort of attest that

340
00:12:08,480 --> 00:12:13,680
things are um

341
00:12:11,839 --> 00:12:15,839
authoritative basically and you make

342
00:12:13,680 --> 00:12:18,800
sure that someone hasn't just

343
00:12:15,839 --> 00:12:20,079
you know cloned a cloned project changed

344
00:12:18,800 --> 00:12:22,000
the maintainers and then

345
00:12:20,079 --> 00:12:23,359
signed a bunch of refs and you have no

346
00:12:22,000 --> 00:12:26,399
idea if this is still

347
00:12:23,360 --> 00:12:28,639
something you want to build and use

348
00:12:26,399 --> 00:12:31,680
essentially

349
00:12:28,639 --> 00:12:32,320
um in terms of replication i'm not going

350
00:12:31,680 --> 00:12:35,040
to go into

351
00:12:32,320 --> 00:12:37,120
lots of details either but you know

352
00:12:35,040 --> 00:12:39,519
essentially um

353
00:12:37,120 --> 00:12:41,360
we're building a gossip-based protocol

354
00:12:39,519 --> 00:12:44,720
where um

355
00:12:41,360 --> 00:12:46,480
when you have a new uh ref for something

356
00:12:44,720 --> 00:12:48,560
uh you just announce it to your

357
00:12:46,480 --> 00:12:50,320
connected peers uh you say hey

358
00:12:48,560 --> 00:12:52,000
here's for this project id here's a new

359
00:12:50,320 --> 00:12:55,120
ref and here's the hash of that

360
00:12:52,000 --> 00:12:56,880
ref right and then the

361
00:12:55,120 --> 00:12:58,560
appear will just fetch and they will

362
00:12:56,880 --> 00:13:02,079
fetch through the git protocol

363
00:12:58,560 --> 00:13:03,439
because that's what's super fast um

364
00:13:02,079 --> 00:13:05,120
fetch the ref of course they do all the

365
00:13:03,440 --> 00:13:06,399
validation then if it's the first time

366
00:13:05,120 --> 00:13:07,360
they see your project they will go

367
00:13:06,399 --> 00:13:09,519
through the whole

368
00:13:07,360 --> 00:13:10,480
uh project metadata first without even

369
00:13:09,519 --> 00:13:11,760
having to

370
00:13:10,480 --> 00:13:13,600
clone the source code and that's one of

371
00:13:11,760 --> 00:13:16,160
the cool things is that having

372
00:13:13,600 --> 00:13:18,000
um source code in one branch and having

373
00:13:16,160 --> 00:13:18,880
metadata and the other things in other

374
00:13:18,000 --> 00:13:20,959
branches you can

375
00:13:18,880 --> 00:13:22,880
sort of do a shallow clone and just kind

376
00:13:20,959 --> 00:13:24,000
of verify the the authenticity of the

377
00:13:22,880 --> 00:13:27,600
project before

378
00:13:24,000 --> 00:13:29,120
you download the whole source code um

379
00:13:27,600 --> 00:13:30,639
yeah and by the way for i'm not talking

380
00:13:29,120 --> 00:13:32,959
about like how we do issues and

381
00:13:30,639 --> 00:13:35,040
and pr's and that kind of thing um here

382
00:13:32,959 --> 00:13:37,279
but it's the same principle so

383
00:13:35,040 --> 00:13:38,240
um there's there's going to be hidden

384
00:13:37,279 --> 00:13:40,720
branches

385
00:13:38,240 --> 00:13:41,760
uh with issues with revisions and so you

386
00:13:40,720 --> 00:13:43,199
could also

387
00:13:41,760 --> 00:13:44,639
you know maybe you're just interested in

388
00:13:43,199 --> 00:13:45,680
issues and you don't want to download

389
00:13:44,639 --> 00:13:48,240
the whole source code

390
00:13:45,680 --> 00:13:49,199
because your user who is not a developer

391
00:13:48,240 --> 00:13:49,680
and you just want to create an issue

392
00:13:49,199 --> 00:13:51,680
right

393
00:13:49,680 --> 00:13:53,680
so um these will work kind of in the

394
00:13:51,680 --> 00:13:56,880
same way

395
00:13:53,680 --> 00:13:59,760
um and that's about it

396
00:13:56,880 --> 00:14:00,480
um you can find out more information on

397
00:13:59,760 --> 00:14:04,959
the website

398
00:14:00,480 --> 00:14:04,959
uh it's it's still in heavy development

399
00:14:05,120 --> 00:14:09,279
but there's there's more info there

400
00:14:15,440 --> 00:14:19,360
so we've got a minute for questions if i

401
00:14:17,040 --> 00:14:19,360
could just

402
00:14:20,959 --> 00:14:25,279
is there a way to revoke a maintainer if

403
00:14:23,519 --> 00:14:26,800
somebody goes rogue and starts putting

404
00:14:25,279 --> 00:14:29,279
malicious changes in

405
00:14:26,800 --> 00:14:30,319
yes uh so is there a way to revoke the

406
00:14:29,279 --> 00:14:32,480
maintainer yes

407
00:14:30,320 --> 00:14:34,079
um again it depends on kind of the the

408
00:14:32,480 --> 00:14:35,920
quorum and the rules of your

409
00:14:34,079 --> 00:14:38,000
of your project metadata file but

410
00:14:35,920 --> 00:14:39,760
essentially um if it's two out

411
00:14:38,000 --> 00:14:41,360
like two out of three for example and

412
00:14:39,760 --> 00:14:42,560
you want to remove one maintainer you

413
00:14:41,360 --> 00:14:44,480
need two signatures

414
00:14:42,560 --> 00:14:46,160
and then of course the the person

415
00:14:44,480 --> 00:14:46,800
downloading the project will verify that

416
00:14:46,160 --> 00:14:48,639
that was

417
00:14:46,800 --> 00:14:58,800
legitimately removed that maintainer was

418
00:14:48,639 --> 00:15:01,600
allowed to be removed

419
00:14:58,800 --> 00:15:02,719
how secure is radical uh that's a

420
00:15:01,600 --> 00:15:06,079
complicated question

421
00:15:02,720 --> 00:15:08,160
um so as secure as can be

422
00:15:06,079 --> 00:15:09,199
um so we're building it we're designing

423
00:15:08,160 --> 00:15:11,920
it in a way that

424
00:15:09,199 --> 00:15:13,920
um we're using everything available to

425
00:15:11,920 --> 00:15:15,760
make it as secure as possible

426
00:15:13,920 --> 00:15:17,120
and as i said like everything is is

427
00:15:15,760 --> 00:15:20,160
signed and

428
00:15:17,120 --> 00:15:22,639
um can be verified and attested

429
00:15:20,160 --> 00:15:22,639
essentially

430
00:15:23,839 --> 00:15:33,190
okay awesome thank you very much

431
00:15:26,330 --> 00:15:33,190
[Applause]

