1
00:00:05,359 --> 00:00:10,240
thank you so i am here again

2
00:00:07,520 --> 00:00:11,920
for those who were not here one hour ago

3
00:00:10,240 --> 00:00:14,320
i am a researcher at ibm

4
00:00:11,920 --> 00:00:16,800
research and i will present now another

5
00:00:14,320 --> 00:00:18,720
piece of the puzzle of this uh

6
00:00:16,800 --> 00:00:20,240
epochs project that we are leading at

7
00:00:18,720 --> 00:00:22,479
ibm so i will

8
00:00:20,240 --> 00:00:24,240
very quickly skip this knowledge and

9
00:00:22,480 --> 00:00:24,720
same acknowledgement as before so same

10
00:00:24,240 --> 00:00:27,519
people

11
00:00:24,720 --> 00:00:30,000
thank you to all of them uh in the

12
00:00:27,519 --> 00:00:32,720
interest of time i will move forward

13
00:00:30,000 --> 00:00:32,720
so uh

14
00:00:33,120 --> 00:00:36,879
again i mean i have said this already

15
00:00:35,760 --> 00:00:38,719
and

16
00:00:36,880 --> 00:00:40,879
at this time of the day i think i have

17
00:00:38,719 --> 00:00:44,160
already seen maybe

18
00:00:40,879 --> 00:00:47,039
four or five talk trying to motivate uh

19
00:00:44,160 --> 00:00:47,599
this idea of uh hardware specialization

20
00:00:47,039 --> 00:00:49,760
right

21
00:00:47,600 --> 00:00:51,199
genius chip so i don't need to go too

22
00:00:49,760 --> 00:00:53,440
much in detail the

23
00:00:51,199 --> 00:00:54,480
the hardware specialization era is

24
00:00:53,440 --> 00:00:57,599
already here

25
00:00:54,480 --> 00:00:58,718
this is a interesting uh die photo of a

26
00:00:57,600 --> 00:01:00,480
cell phone

27
00:00:58,719 --> 00:01:02,000
chip processor where you can see for

28
00:01:00,480 --> 00:01:02,640
example that in addition to the

29
00:01:02,000 --> 00:01:04,879
traditional

30
00:01:02,640 --> 00:01:06,000
general purpose cpu your today you have

31
00:01:04,879 --> 00:01:09,920
also gpus

32
00:01:06,000 --> 00:01:12,240
one or more and you have plenty of

33
00:01:09,920 --> 00:01:13,920
acceleration in genes for different

34
00:01:12,240 --> 00:01:15,280
functions in in the cell phone so this

35
00:01:13,920 --> 00:01:17,680
is a very nice

36
00:01:15,280 --> 00:01:18,720
example of a highly heterogeneous

37
00:01:17,680 --> 00:01:22,000
process

38
00:01:18,720 --> 00:01:24,960
but i i mean the question is

39
00:01:22,000 --> 00:01:25,680
how do we schedule applications

40
00:01:24,960 --> 00:01:29,199
processes

41
00:01:25,680 --> 00:01:29,600
threads in this uh kind of heterogeneous

42
00:01:29,200 --> 00:01:30,640
chip

43
00:01:29,600 --> 00:01:32,479
right i mean it's not it's not

44
00:01:30,640 --> 00:01:34,960
straightforward because uh the

45
00:01:32,479 --> 00:01:37,360
conventional schedulers like linux linux

46
00:01:34,960 --> 00:01:39,360
scheduler is not optimized for that

47
00:01:37,360 --> 00:01:40,560
uh this is true right in order to

48
00:01:39,360 --> 00:01:42,079
exploit the characteristics of a

49
00:01:40,560 --> 00:01:44,640
heterogeneous chip so

50
00:01:42,079 --> 00:01:45,919
we think that there is a need there is

51
00:01:44,640 --> 00:01:48,720
at least a call

52
00:01:45,920 --> 00:01:50,000
to think uh harder in terms of creating

53
00:01:48,720 --> 00:01:52,479
more intelligent

54
00:01:50,000 --> 00:01:55,840
and efficient scheduling schedulers for

55
00:01:52,479 --> 00:01:55,840
hedogenous chips

56
00:01:56,240 --> 00:02:03,199
and how does that impact on new radio

57
00:01:59,920 --> 00:02:06,000
right so in my previous talk i presented

58
00:02:03,200 --> 00:02:09,759
this era application where i show

59
00:02:06,000 --> 00:02:11,599
this new radio ao 2.11p

60
00:02:09,758 --> 00:02:13,440
transceiver but in the application there

61
00:02:11,599 --> 00:02:16,560
was also a ros part with

62
00:02:13,440 --> 00:02:19,599
multiple blogs doing different things

63
00:02:16,560 --> 00:02:21,760
right bunch of stuff so

64
00:02:19,599 --> 00:02:23,920
in general the message is today's

65
00:02:21,760 --> 00:02:26,000
applications are

66
00:02:23,920 --> 00:02:27,280
very heterogeneous in their nature so

67
00:02:26,000 --> 00:02:28,160
it's not just about the hardware the

68
00:02:27,280 --> 00:02:30,239
software is very

69
00:02:28,160 --> 00:02:32,000
heterogeneous so in other words the

70
00:02:30,239 --> 00:02:33,200
tetragenetic at software level in the

71
00:02:32,000 --> 00:02:35,760
application is

72
00:02:33,200 --> 00:02:36,958
driven the need for specialized hardware

73
00:02:35,760 --> 00:02:38,720
right

74
00:02:36,959 --> 00:02:40,800
actually in this flow graph we can see

75
00:02:38,720 --> 00:02:42,800
that there are many blocks and all of

76
00:02:40,800 --> 00:02:45,120
them are doing different stuff right

77
00:02:42,800 --> 00:02:45,120
so

78
00:02:46,720 --> 00:02:50,879
if we have to execute this program we

79
00:02:48,640 --> 00:02:52,399
may have already an underlying chip with

80
00:02:50,879 --> 00:02:54,319
some accelerators let's say

81
00:02:52,400 --> 00:02:55,840
we may have an accelerator for the fft

82
00:02:54,319 --> 00:02:56,879
we have we may have an accelerator for

83
00:02:55,840 --> 00:02:58,879
vtrv

84
00:02:56,879 --> 00:03:00,480
uh decoding we may have accelerator for

85
00:02:58,879 --> 00:03:02,959
other stuff right

86
00:03:00,480 --> 00:03:04,159
but as far as we know and this connects

87
00:03:02,959 --> 00:03:07,200
i think very well with uh

88
00:03:04,159 --> 00:03:09,200
this morning's talk by by marcus uh

89
00:03:07,200 --> 00:03:10,238
the the current version of the new radio

90
00:03:09,200 --> 00:03:12,640
scheduler

91
00:03:10,239 --> 00:03:13,599
is not aware of this degree of the

92
00:03:12,640 --> 00:03:15,679
heterogeneity

93
00:03:13,599 --> 00:03:17,280
in the in the chip right which if

94
00:03:15,680 --> 00:03:19,200
exploited properly

95
00:03:17,280 --> 00:03:20,800
can provide significant benefit in terms

96
00:03:19,200 --> 00:03:23,679
of drought put as well as power

97
00:03:20,800 --> 00:03:25,519
performance efficiency improvement

98
00:03:23,680 --> 00:03:27,760
actually i mean regarding the new radio

99
00:03:25,519 --> 00:03:30,640
scheduler some prior work this is an

100
00:03:27,760 --> 00:03:32,640
another paper from from bastian have

101
00:03:30,640 --> 00:03:33,599
shown that some simple tweakings to to

102
00:03:32,640 --> 00:03:35,599
the scheduler can

103
00:03:33,599 --> 00:03:36,640
really provide some great improvement in

104
00:03:35,599 --> 00:03:38,560
this case for

105
00:03:36,640 --> 00:03:39,920
cash effectiveness right so we believe

106
00:03:38,560 --> 00:03:41,120
that there is room for improvement for

107
00:03:39,920 --> 00:03:45,040
example in terms of

108
00:03:41,120 --> 00:03:45,040
scheduling on a telegenic chips

109
00:03:45,599 --> 00:03:50,079
and this is the also the the the picture

110
00:03:48,239 --> 00:03:51,840
i presented before i mean before when i

111
00:03:50,080 --> 00:03:53,920
talked about the array i was

112
00:03:51,840 --> 00:03:55,840
moving in this layer now i will be

113
00:03:53,920 --> 00:03:56,879
moving in this operating system layer

114
00:03:55,840 --> 00:03:58,400
but we are

115
00:03:56,879 --> 00:04:00,560
with this project we are addressing the

116
00:03:58,400 --> 00:04:05,040
entire hardware software

117
00:04:00,560 --> 00:04:05,040
stack in this darpa dsoc program

118
00:04:05,200 --> 00:04:11,200
so let's go into this idea of task

119
00:04:08,799 --> 00:04:13,360
scheduling on heterogeneous platforms

120
00:04:11,200 --> 00:04:15,280
i will present an open source tool that

121
00:04:13,360 --> 00:04:18,239
we developed that is called stomp

122
00:04:15,280 --> 00:04:20,399
which allows us to prototype scheduling

123
00:04:18,238 --> 00:04:23,440
new scheduling policies in a very easy

124
00:04:20,399 --> 00:04:24,320
and fast manner so let me introduce a

125
00:04:23,440 --> 00:04:26,400
stump

126
00:04:24,320 --> 00:04:28,560
a stump which stands for scheduling

127
00:04:26,400 --> 00:04:30,239
techniques optimization in heterogeneous

128
00:04:28,560 --> 00:04:31,199
multiprocessor i didn't want to put the

129
00:04:30,240 --> 00:04:33,280
edge there so

130
00:04:31,199 --> 00:04:34,800
this is but i wouldn't i wanted to have

131
00:04:33,280 --> 00:04:37,919
it ingenious

132
00:04:34,800 --> 00:04:42,720
uh it's an open source uh tool that

133
00:04:37,919 --> 00:04:43,440
has allowed us to um prototype and

134
00:04:42,720 --> 00:04:44,800
evaluate

135
00:04:43,440 --> 00:04:46,719
new scheduling policies for

136
00:04:44,800 --> 00:04:47,759
heterogeneous platform in a very agile

137
00:04:46,720 --> 00:04:50,560
manner

138
00:04:47,759 --> 00:04:51,360
that simple it's written in python and

139
00:04:50,560 --> 00:04:53,440
it's very

140
00:04:51,360 --> 00:04:54,639
easy to customize i mean a stomp user

141
00:04:53,440 --> 00:04:56,800
can very easy

142
00:04:54,639 --> 00:04:58,639
very easily uh create new scheduling

143
00:04:56,800 --> 00:04:59,759
policies and plug those policy into

144
00:04:58,639 --> 00:05:01,520
stump and

145
00:04:59,759 --> 00:05:03,199
evaluate what happens if we want to

146
00:05:01,520 --> 00:05:04,880
schedule let's say uh

147
00:05:03,199 --> 00:05:07,039
a representative and array application

148
00:05:04,880 --> 00:05:08,560
on a illustrative heterogeneous

149
00:05:07,039 --> 00:05:11,120
processor right

150
00:05:08,560 --> 00:05:11,759
in stomp there are basically three main

151
00:05:11,120 --> 00:05:13,759
elements

152
00:05:11,759 --> 00:05:15,120
we have tasks which are as you can

153
00:05:13,759 --> 00:05:17,680
imagine the units of work

154
00:05:15,120 --> 00:05:18,800
you can call them jobs processes threads

155
00:05:17,680 --> 00:05:20,240
whatever

156
00:05:18,800 --> 00:05:22,880
and these are the things that are

157
00:05:20,240 --> 00:05:25,840
executed on our telegenius

158
00:05:22,880 --> 00:05:25,840
processor right

159
00:05:25,919 --> 00:05:30,000
in actually we talk about task types

160
00:05:28,560 --> 00:05:31,840
right this is the most interesting part

161
00:05:30,000 --> 00:05:33,840
we say this is an fft task this is a

162
00:05:31,840 --> 00:05:34,638
decoding task this is a convolution task

163
00:05:33,840 --> 00:05:36,400
right

164
00:05:34,639 --> 00:05:38,080
then we have servers or processing

165
00:05:36,400 --> 00:05:39,520
elements which are these

166
00:05:38,080 --> 00:05:40,960
blue boxes here right i mean these are

167
00:05:39,520 --> 00:05:41,440
your processing units in your in your

168
00:05:40,960 --> 00:05:43,120
chip

169
00:05:41,440 --> 00:05:44,880
you can have also different types of

170
00:05:43,120 --> 00:05:45,280
processing elements general purpose

171
00:05:44,880 --> 00:05:47,360
scores

172
00:05:45,280 --> 00:05:50,080
gpus different type of accelerators

173
00:05:47,360 --> 00:05:52,080
right this is all customizable

174
00:05:50,080 --> 00:05:53,919
and then the most important part is the

175
00:05:52,080 --> 00:05:55,840
scheduler this green box here

176
00:05:53,919 --> 00:05:57,680
which will basically take tasks from

177
00:05:55,840 --> 00:05:58,479
this queue and try to scale them across

178
00:05:57,680 --> 00:06:01,520
the available

179
00:05:58,479 --> 00:06:03,758
processing elements or servers right and

180
00:06:01,520 --> 00:06:05,758
what we want to do is to allow the user

181
00:06:03,759 --> 00:06:06,000
to write to write in a very easy manner

182
00:06:05,759 --> 00:06:07,520
new

183
00:06:06,000 --> 00:06:09,280
scheduling policies that can be plugged

184
00:06:07,520 --> 00:06:12,960
into the scheduler for

185
00:06:09,280 --> 00:06:16,000
easy let's say evaluation

186
00:06:12,960 --> 00:06:19,280
so the task can arrive to this

187
00:06:16,000 --> 00:06:21,759
central queue either probabilistically

188
00:06:19,280 --> 00:06:24,318
or we can generate uh traces of tasks

189
00:06:21,759 --> 00:06:26,720
from real executions

190
00:06:24,319 --> 00:06:28,240
thus also have some attributes like for

191
00:06:26,720 --> 00:06:31,280
example the service time

192
00:06:28,240 --> 00:06:32,880
of a given task type on a given server

193
00:06:31,280 --> 00:06:35,440
type right so we say let's see

194
00:06:32,880 --> 00:06:37,360
this is an fft task that has this

195
00:06:35,440 --> 00:06:40,080
service time on a general purpose core

196
00:06:37,360 --> 00:06:42,319
on a gpu on an accelerator etc

197
00:06:40,080 --> 00:06:44,080
we are also adding support for power

198
00:06:42,319 --> 00:06:46,639
consumption so the task will also have

199
00:06:44,080 --> 00:06:48,960
some power information associated

200
00:06:46,639 --> 00:06:51,120
and the most important part is this i

201
00:06:48,960 --> 00:06:53,919
mean the user can extend

202
00:06:51,120 --> 00:06:54,639
uh the base scheduling policy python

203
00:06:53,919 --> 00:06:57,599
class

204
00:06:54,639 --> 00:06:59,120
and create its own uh scaling policy in

205
00:06:57,599 --> 00:07:00,560
a very easy manner right this is the

206
00:06:59,120 --> 00:07:02,720
logic that will

207
00:07:00,560 --> 00:07:05,280
instruct the scheduler what to do with

208
00:07:02,720 --> 00:07:08,319
the task at the scheduling time

209
00:07:05,280 --> 00:07:08,719
so it's a very simple idea uh but very

210
00:07:08,319 --> 00:07:12,240
very

211
00:07:08,720 --> 00:07:15,280
at the end it's a very useful tool

212
00:07:12,240 --> 00:07:16,479
so how a storm works internally there

213
00:07:15,280 --> 00:07:19,679
are two uh

214
00:07:16,479 --> 00:07:22,880
components one is the meta scheduler

215
00:07:19,680 --> 00:07:24,560
that red box they are meta and the other

216
00:07:22,880 --> 00:07:27,120
one is the the scheduler this

217
00:07:24,560 --> 00:07:28,880
green box here called sched they

218
00:07:27,120 --> 00:07:31,039
communicate communicate to each other

219
00:07:28,880 --> 00:07:34,319
through these two cues

220
00:07:31,039 --> 00:07:36,400
a ready queue and a completed queue

221
00:07:34,319 --> 00:07:38,639
and the idea is very simple meta

222
00:07:36,400 --> 00:07:41,840
basically will do some pre-processing on

223
00:07:38,639 --> 00:07:44,879
task let's say uh to connect more what

224
00:07:41,840 --> 00:07:45,359
with what you usually deal with that can

225
00:07:44,879 --> 00:07:48,000
be

226
00:07:45,360 --> 00:07:48,560
for example new radio blocks right so

227
00:07:48,000 --> 00:07:50,160
let's say

228
00:07:48,560 --> 00:07:51,520
meta will pre-process the new radio

229
00:07:50,160 --> 00:07:52,400
block that had to be executed in the

230
00:07:51,520 --> 00:07:54,878
system

231
00:07:52,400 --> 00:07:55,679
and we'll for example track dependencies

232
00:07:54,879 --> 00:07:57,280
and those

233
00:07:55,680 --> 00:07:59,520
blocks those stacks that are ready will

234
00:07:57,280 --> 00:08:00,000
be put in this queue for the scheduler

235
00:07:59,520 --> 00:08:03,520
to

236
00:08:00,000 --> 00:08:04,240
place that block in a processing element

237
00:08:03,520 --> 00:08:07,520
right

238
00:08:04,240 --> 00:08:09,120
when the task or or radio block

239
00:08:07,520 --> 00:08:10,878
completes then the scheduler will put

240
00:08:09,120 --> 00:08:13,520
that back on this completed queue so the

241
00:08:10,879 --> 00:08:16,000
meta is notified all this

242
00:08:13,520 --> 00:08:18,318
is done and can keep tracking

243
00:08:16,000 --> 00:08:20,879
dependencies right

244
00:08:18,319 --> 00:08:21,440
uh the input of a stomp stomp is all all

245
00:08:20,879 --> 00:08:23,680
this

246
00:08:21,440 --> 00:08:25,360
here plus this here so the input comes

247
00:08:23,680 --> 00:08:28,400
as you may imagine in the form

248
00:08:25,360 --> 00:08:30,160
of directed a cyclic graph dax right

249
00:08:28,400 --> 00:08:31,520
where a dac may represent let's say an

250
00:08:30,160 --> 00:08:33,839
application a

251
00:08:31,520 --> 00:08:35,439
new radio flow graph and the nodes are

252
00:08:33,839 --> 00:08:38,719
the tasks or the

253
00:08:35,440 --> 00:08:38,719
blocks that we have to execute

254
00:08:38,799 --> 00:08:42,399
so as i said meta does some

255
00:08:40,719 --> 00:08:45,760
pre-processing on this

256
00:08:42,399 --> 00:08:48,000
task one interesting thing that

257
00:08:45,760 --> 00:08:49,360
meta does is to compute the rank

258
00:08:48,000 --> 00:08:51,920
associated to each

259
00:08:49,360 --> 00:08:53,600
task to each radio block to execute a

260
00:08:51,920 --> 00:08:56,399
rank is basically a metric

261
00:08:53,600 --> 00:08:58,160
that tells us i mean uh how fast we

262
00:08:56,399 --> 00:09:01,760
should execute

263
00:08:58,160 --> 00:09:03,040
that task right so high rank means we

264
00:09:01,760 --> 00:09:04,800
have to execute this

265
00:09:03,040 --> 00:09:06,160
very fast i mean but there is maybe some

266
00:09:04,800 --> 00:09:07,120
real-time constraint that we have to

267
00:09:06,160 --> 00:09:09,120
meet

268
00:09:07,120 --> 00:09:10,720
lower rank means when we have more slack

269
00:09:09,120 --> 00:09:13,120
we can wait a little bit more so

270
00:09:10,720 --> 00:09:14,480
basically the the tasks are order in

271
00:09:13,120 --> 00:09:16,800
this this ready queue by

272
00:09:14,480 --> 00:09:18,399
rank how do we compute rank that is

273
00:09:16,800 --> 00:09:19,760
implement implementation specific the

274
00:09:18,399 --> 00:09:22,640
user can define

275
00:09:19,760 --> 00:09:24,560
uh what rank means in he or she a

276
00:09:22,640 --> 00:09:26,959
specific implementation but usually rank

277
00:09:24,560 --> 00:09:28,640
is a function of the task priority

278
00:09:26,959 --> 00:09:30,079
as well as the slack i mean the amount

279
00:09:28,640 --> 00:09:33,040
of time that the task

280
00:09:30,080 --> 00:09:33,360
has to complete as well as for example

281
00:09:33,040 --> 00:09:35,519
the

282
00:09:33,360 --> 00:09:36,480
task work worst case execution time

283
00:09:35,519 --> 00:09:37,839
which usually is

284
00:09:36,480 --> 00:09:39,440
running the tasks on the worst

285
00:09:37,839 --> 00:09:40,560
processing element let's say the cpu

286
00:09:39,440 --> 00:09:42,640
core right

287
00:09:40,560 --> 00:09:44,479
so this is one possible formula for run

288
00:09:42,640 --> 00:09:46,880
could be many others

289
00:09:44,480 --> 00:09:48,320
and also meta can in some cases we can

290
00:09:46,880 --> 00:09:51,760
enable

291
00:09:48,320 --> 00:09:53,920
this feature that if a dog didn't

292
00:09:51,760 --> 00:09:54,800
complete on time if the dog missed its

293
00:09:53,920 --> 00:09:57,360
deadline

294
00:09:54,800 --> 00:09:59,120
then meta may decide to drop that that

295
00:09:57,360 --> 00:10:00,320
that completely in order to reduce

296
00:09:59,120 --> 00:10:02,560
traffic and give more

297
00:10:00,320 --> 00:10:04,000
chances to other dags to complete on

298
00:10:02,560 --> 00:10:08,399
time so we have also that

299
00:10:04,000 --> 00:10:11,920
option available so the scheduler

300
00:10:08,399 --> 00:10:16,079
which is the other box in this

301
00:10:11,920 --> 00:10:18,160
in this diagram is where as i explained

302
00:10:16,079 --> 00:10:22,160
before is where the user

303
00:10:18,160 --> 00:10:25,279
will plug he his or she

304
00:10:22,160 --> 00:10:26,319
scheduling policy right so this is very

305
00:10:25,279 --> 00:10:27,920
easy actually i mean

306
00:10:26,320 --> 00:10:29,920
the only thing we have to do is to

307
00:10:27,920 --> 00:10:31,439
extend this base scheduling policy

308
00:10:29,920 --> 00:10:32,880
python class

309
00:10:31,440 --> 00:10:34,720
more specifically what we have to

310
00:10:32,880 --> 00:10:37,600
provide is an implementation for this

311
00:10:34,720 --> 00:10:38,720
assigned task to server function which

312
00:10:37,600 --> 00:10:40,959
basically

313
00:10:38,720 --> 00:10:42,399
tells the scheduler what to do with

314
00:10:40,959 --> 00:10:44,479
tasks in the req

315
00:10:42,399 --> 00:10:46,079
at scheduling time in this for example

316
00:10:44,480 --> 00:10:48,000
in this very

317
00:10:46,079 --> 00:10:49,760
simple implementation this is just for

318
00:10:48,000 --> 00:10:52,240
illustration purposes only

319
00:10:49,760 --> 00:10:53,519
what we are doing is we are taking uh

320
00:10:52,240 --> 00:10:56,399
the task

321
00:10:53,519 --> 00:10:56,800
at the head of the queue this one here

322
00:10:56,399 --> 00:11:00,399
right

323
00:10:56,800 --> 00:11:02,079
and we try to place that task i mean the

324
00:11:00,399 --> 00:11:04,320
scheduler will try to place that

325
00:11:02,079 --> 00:11:05,839
that task on the fastest processing

326
00:11:04,320 --> 00:11:07,519
element let's say an accelerator

327
00:11:05,839 --> 00:11:09,600
if that processing element is not

328
00:11:07,519 --> 00:11:11,200
available then the task will remain in

329
00:11:09,600 --> 00:11:13,519
the head of the cube this is what

330
00:11:11,200 --> 00:11:15,200
is implemented here very easy stuff just

331
00:11:13,519 --> 00:11:15,839
for illustration purposes only we want

332
00:11:15,200 --> 00:11:17,920
to make

333
00:11:15,839 --> 00:11:20,480
more intelligence scheduling policies of

334
00:11:17,920 --> 00:11:20,479
course right

335
00:11:21,440 --> 00:11:25,040
then we can of course easily configure

336
00:11:23,440 --> 00:11:26,560
stomp with different parameters for

337
00:11:25,040 --> 00:11:28,880
example we can indicate

338
00:11:26,560 --> 00:11:30,079
what scheduling policy we want to use

339
00:11:28,880 --> 00:11:32,560
right so

340
00:11:30,079 --> 00:11:33,519
in this case we are saying sk stomp to

341
00:11:32,560 --> 00:11:35,839
go and look for

342
00:11:33,519 --> 00:11:37,200
file call python script called simple

343
00:11:35,839 --> 00:11:40,320
policy version 3

344
00:11:37,200 --> 00:11:41,519
under the policies folder right and then

345
00:11:40,320 --> 00:11:43,040
we can configure the number of

346
00:11:41,519 --> 00:11:44,480
processing elements we are saying that

347
00:11:43,040 --> 00:11:47,120
we have in this example

348
00:11:44,480 --> 00:11:49,120
eight general purpose cores two gpus and

349
00:11:47,120 --> 00:11:52,720
one fft accelerator

350
00:11:49,120 --> 00:11:54,639
and then we define our tasks right for

351
00:11:52,720 --> 00:11:57,120
example we say that we have tasks of

352
00:11:54,639 --> 00:11:59,519
type fft with different service time for

353
00:11:57,120 --> 00:12:02,079
the different processing element types

354
00:11:59,519 --> 00:12:02,800
and we may have other type of tasks also

355
00:12:02,079 --> 00:12:05,920
let's say

356
00:12:02,800 --> 00:12:06,240
decoders or or convolutions or whatever

357
00:12:05,920 --> 00:12:09,279
right

358
00:12:06,240 --> 00:12:10,000
so it's very easy to configure let me

359
00:12:09,279 --> 00:12:12,000
show a very simple

360
00:12:10,000 --> 00:12:13,839
example how this works right let's say

361
00:12:12,000 --> 00:12:16,160
we have an input dag of

362
00:12:13,839 --> 00:12:17,120
five tasks of five let's say new radio

363
00:12:16,160 --> 00:12:20,719
blocks

364
00:12:17,120 --> 00:12:20,720
uh which is that one showed there

365
00:12:20,800 --> 00:12:25,040
and then we what does the meta scaler

366
00:12:24,079 --> 00:12:26,800
does is try to

367
00:12:25,040 --> 00:12:28,959
determine what is the the deadline for

368
00:12:26,800 --> 00:12:30,479
this dag to complete which in this case

369
00:12:28,959 --> 00:12:32,800
is defined as the

370
00:12:30,480 --> 00:12:34,560
execution time of the longest path the

371
00:12:32,800 --> 00:12:37,920
critical path in this case there is

372
00:12:34,560 --> 00:12:39,518
0 1 3 and 4 in the worst in the worst

373
00:12:37,920 --> 00:12:40,560
case meaning running on in this case on

374
00:12:39,519 --> 00:12:42,880
the cpu

375
00:12:40,560 --> 00:12:44,079
so for that critical path running on the

376
00:12:42,880 --> 00:12:47,040
cpu that is

377
00:12:44,079 --> 00:12:49,040
uh around one is 1100 unit of time by

378
00:12:47,040 --> 00:12:50,839
the way stop stop is unitless so the

379
00:12:49,040 --> 00:12:52,240
user defines the meaning of a unit of

380
00:12:50,839 --> 00:12:54,079
time

381
00:12:52,240 --> 00:12:56,320
so then at time zero at the very

382
00:12:54,079 --> 00:12:59,359
beginning meta will take the first

383
00:12:56,320 --> 00:13:01,680
route now there and we compute

384
00:12:59,360 --> 00:13:03,519
its rank using whatever formula for the

385
00:13:01,680 --> 00:13:05,519
rank has been defined in this case

386
00:13:03,519 --> 00:13:07,519
we are using that formula and for this

387
00:13:05,519 --> 00:13:10,160
specific uh

388
00:13:07,519 --> 00:13:11,279
initial case the rank is is is very high

389
00:13:10,160 --> 00:13:13,760
it's infinite

390
00:13:11,279 --> 00:13:15,040
um i don't want to go into much detail

391
00:13:13,760 --> 00:13:17,839
here because of a

392
00:13:15,040 --> 00:13:18,800
lack of time but what for that first

393
00:13:17,839 --> 00:13:20,480
node basically

394
00:13:18,800 --> 00:13:22,399
meta will take that now we'll compute

395
00:13:20,480 --> 00:13:25,600
the run we'll put it in the red queue

396
00:13:22,399 --> 00:13:27,680
and that task will execute

397
00:13:25,600 --> 00:13:29,040
after the scheduler places on on the

398
00:13:27,680 --> 00:13:30,479
processing element that task will

399
00:13:29,040 --> 00:13:32,240
execute let's say that

400
00:13:30,480 --> 00:13:34,320
since everything was available in the

401
00:13:32,240 --> 00:13:37,440
chip that task was

402
00:13:34,320 --> 00:13:39,680
executed not in a ship in a cpu but on

403
00:13:37,440 --> 00:13:41,920
an accelerator so instead of taking 500

404
00:13:39,680 --> 00:13:44,399
units of time it took 10 units of time

405
00:13:41,920 --> 00:13:46,719
which is good because that gives us some

406
00:13:44,399 --> 00:13:50,000
let's say time back for the rest of the

407
00:13:46,720 --> 00:13:54,160
task in the in the dac right so

408
00:13:50,000 --> 00:13:57,760
at time 10 after that task completed

409
00:13:54,160 --> 00:13:59,760
then meta will update the rank of

410
00:13:57,760 --> 00:14:01,680
of task 1 and 2 which are the ones that

411
00:13:59,760 --> 00:14:03,040
now are ready because they satisfy their

412
00:14:01,680 --> 00:14:06,000
dependencies right

413
00:14:03,040 --> 00:14:07,920
so using the same formula as before we

414
00:14:06,000 --> 00:14:08,959
compute ranks of task one and rank of

415
00:14:07,920 --> 00:14:10,880
task two

416
00:14:08,959 --> 00:14:12,959
and in this case in this simple example

417
00:14:10,880 --> 00:14:15,439
rank of one of task one is

418
00:14:12,959 --> 00:14:16,000
larger than of task two so the next one

419
00:14:15,440 --> 00:14:18,880
that will

420
00:14:16,000 --> 00:14:21,120
go into the ready queue is that task

421
00:14:18,880 --> 00:14:23,439
number one the decoder there

422
00:14:21,120 --> 00:14:24,160
that will be scheduled by the scheduler

423
00:14:23,440 --> 00:14:25,839
uh

424
00:14:24,160 --> 00:14:27,760
based on the on the scheduling policy

425
00:14:25,839 --> 00:14:29,920
that the scholar is using at that time

426
00:14:27,760 --> 00:14:31,680
and this process continues for all the

427
00:14:29,920 --> 00:14:35,199
tasks in the dark until

428
00:14:31,680 --> 00:14:38,319
the full dag completes basically

429
00:14:35,199 --> 00:14:39,920
in a storm we also support uh multi-dog

430
00:14:38,320 --> 00:14:42,480
execution meaning that we can have

431
00:14:39,920 --> 00:14:44,079
multiple of these dogs running at the

432
00:14:42,480 --> 00:14:45,839
same time right

433
00:14:44,079 --> 00:14:48,560
in that in that case basically the meta

434
00:14:45,839 --> 00:14:51,440
scaler will keep track of dependencies

435
00:14:48,560 --> 00:14:53,279
across all the dags and will will update

436
00:14:51,440 --> 00:14:54,959
the ranks also across all the dags

437
00:14:53,279 --> 00:14:57,839
at the same time there is no let's say

438
00:14:54,959 --> 00:15:01,199
sequentiality in that regard right

439
00:14:57,839 --> 00:15:04,800
but this is another feature of a stone

440
00:15:01,199 --> 00:15:06,399
so let me show you some preliminary

441
00:15:04,800 --> 00:15:07,599
numbers that we have generated with the

442
00:15:06,399 --> 00:15:10,839
stump for

443
00:15:07,600 --> 00:15:12,240
an illustrative let's say a new radio

444
00:15:10,839 --> 00:15:15,360
example

445
00:15:12,240 --> 00:15:16,720
so what we did is we we defined the

446
00:15:15,360 --> 00:15:19,360
trace of dags with

447
00:15:16,720 --> 00:15:20,320
1000 dags right let's let's think about

448
00:15:19,360 --> 00:15:23,519
these darks as

449
00:15:20,320 --> 00:15:26,079
1000 new radio flow graph right

450
00:15:23,519 --> 00:15:26,639
in this case uh two different type with

451
00:15:26,079 --> 00:15:29,839
five

452
00:15:26,639 --> 00:15:32,560
and two tasks with five and two

453
00:15:29,839 --> 00:15:34,560
blocks right so very simple ones and we

454
00:15:32,560 --> 00:15:37,359
assign priorities to these dags

455
00:15:34,560 --> 00:15:38,319
one and two randomly and we define the

456
00:15:37,360 --> 00:15:40,240
deadline to for

457
00:15:38,320 --> 00:15:42,880
that to complete as as i explained

458
00:15:40,240 --> 00:15:45,680
before like the

459
00:15:42,880 --> 00:15:46,720
length of the path the critical path

460
00:15:45,680 --> 00:15:49,839
running on the worst

461
00:15:46,720 --> 00:15:51,920
case processing element

462
00:15:49,839 --> 00:15:53,839
in this case the cpus right and we find

463
00:15:51,920 --> 00:15:55,360
three three simple task type fft

464
00:15:53,839 --> 00:15:58,560
convolution and decoder

465
00:15:55,360 --> 00:16:00,639
right and the metric of interest is the

466
00:15:58,560 --> 00:16:01,839
number of dags let's say flow graph that

467
00:16:00,639 --> 00:16:04,000
met their

468
00:16:01,839 --> 00:16:05,440
uh real-time deadline uh during

469
00:16:04,000 --> 00:16:08,079
execution right

470
00:16:05,440 --> 00:16:09,600
so we created five simple scheduling

471
00:16:08,079 --> 00:16:11,120
policy very simple i mean starting from

472
00:16:09,600 --> 00:16:12,560
simple ones to more complex more

473
00:16:11,120 --> 00:16:15,680
interesting ones

474
00:16:12,560 --> 00:16:17,599
uh ts1 and ts2 are non-blocking

475
00:16:15,680 --> 00:16:20,479
uh scheduling policies which basically

476
00:16:17,600 --> 00:16:24,320
means that the scheduler will

477
00:16:20,480 --> 00:16:26,160
look uh uh within a window of tasks in

478
00:16:24,320 --> 00:16:28,240
the ready queue not just the one in the

479
00:16:26,160 --> 00:16:30,959
head of the cube but the window

480
00:16:28,240 --> 00:16:31,440
um and we'll try to schedule all of them

481
00:16:30,959 --> 00:16:33,439
even if

482
00:16:31,440 --> 00:16:34,560
one before couldn't be scheduled because

483
00:16:33,440 --> 00:16:36,800
i mean there was

484
00:16:34,560 --> 00:16:38,719
no availability accelerator it will keep

485
00:16:36,800 --> 00:16:41,439
looking in that window this is why

486
00:16:38,720 --> 00:16:42,399
these two are called non-blocking and

487
00:16:41,440 --> 00:16:44,720
ts2 is a

488
00:16:42,399 --> 00:16:46,079
it's a valuational variation of ts1

489
00:16:44,720 --> 00:16:48,240
where

490
00:16:46,079 --> 00:16:50,160
at the scheduling time not only the

491
00:16:48,240 --> 00:16:50,639
scheduler will traverse that window but

492
00:16:50,160 --> 00:16:53,120
we'll

493
00:16:50,639 --> 00:16:54,959
keep in mind what was done with the

494
00:16:53,120 --> 00:16:55,600
previous task in that window so we know

495
00:16:54,959 --> 00:16:57,119
what

496
00:16:55,600 --> 00:16:59,519
what was the scaling decision for the

497
00:16:57,120 --> 00:17:00,160
previous task and that allows us to make

498
00:16:59,519 --> 00:17:02,720
a little bit

499
00:17:00,160 --> 00:17:03,519
better scheduling decisions but in these

500
00:17:02,720 --> 00:17:06,640
two cases

501
00:17:03,519 --> 00:17:08,480
meta is only used for uh dependency

502
00:17:06,640 --> 00:17:10,319
tracking only right there is no run

503
00:17:08,480 --> 00:17:13,039
computation in this case

504
00:17:10,319 --> 00:17:13,918
so then we have like an improved version

505
00:17:13,039 --> 00:17:16,879
of ts2

506
00:17:13,919 --> 00:17:18,160
using meta for both dependency tracking

507
00:17:16,880 --> 00:17:19,919
as well as a rank

508
00:17:18,160 --> 00:17:23,120
computation right and we have these

509
00:17:19,919 --> 00:17:25,839
three versions ms1 ms2 and ms3

510
00:17:23,119 --> 00:17:27,520
where basically the difference is just

511
00:17:25,839 --> 00:17:30,080
the formula that we use to compute the

512
00:17:27,520 --> 00:17:32,879
rank right so for example in ms1 we use

513
00:17:30,080 --> 00:17:33,360
the task deadline its average execution

514
00:17:32,880 --> 00:17:36,160
time

515
00:17:33,360 --> 00:17:38,320
across the all available processing

516
00:17:36,160 --> 00:17:41,200
elements and the priority

517
00:17:38,320 --> 00:17:43,039
uh in ms2 is again we use we compute the

518
00:17:41,200 --> 00:17:44,960
rank as a function of the tax deadline

519
00:17:43,039 --> 00:17:46,799
the maximum execution time across the

520
00:17:44,960 --> 00:17:48,000
different processing elements and

521
00:17:46,799 --> 00:17:50,240
priority

522
00:17:48,000 --> 00:17:52,400
and ms3 the rank is computed as a

523
00:17:50,240 --> 00:17:54,640
function of the available slack

524
00:17:52,400 --> 00:17:56,000
and the maximum execution time as well

525
00:17:54,640 --> 00:17:58,799
as the priority so

526
00:17:56,000 --> 00:18:00,880
five different policies let's see what

527
00:17:58,799 --> 00:18:02,960
we get

528
00:18:00,880 --> 00:18:05,520
so what we get is something that we what

529
00:18:02,960 --> 00:18:09,039
we expected

530
00:18:05,520 --> 00:18:09,840
ms3 uh is uh the the most interesting of

531
00:18:09,039 --> 00:18:12,879
these five

532
00:18:09,840 --> 00:18:14,159
uh policies because it's the one that

533
00:18:12,880 --> 00:18:17,280
allow us to

534
00:18:14,160 --> 00:18:19,039
allow dogs to complete in time in the

535
00:18:17,280 --> 00:18:21,039
most cases so this chart what is showing

536
00:18:19,039 --> 00:18:23,440
is the percentage of that let's say

537
00:18:21,039 --> 00:18:25,039
radio flow graph that complete within

538
00:18:23,440 --> 00:18:27,360
the deadline

539
00:18:25,039 --> 00:18:28,080
as a function of the five different

540
00:18:27,360 --> 00:18:32,320
policies

541
00:18:28,080 --> 00:18:35,760
for different arrival times of dax

542
00:18:32,320 --> 00:18:37,439
and as i said we have two priorities of

543
00:18:35,760 --> 00:18:38,480
dax right priority one and higher

544
00:18:37,440 --> 00:18:40,320
priority two

545
00:18:38,480 --> 00:18:42,640
so for example what we see here is that

546
00:18:40,320 --> 00:18:46,799
ms3 for this particular case

547
00:18:42,640 --> 00:18:49,120
allows all 100 of the high priority

548
00:18:46,799 --> 00:18:50,000
dogs to complete within their deadline

549
00:18:49,120 --> 00:18:54,559
right compared to

550
00:18:50,000 --> 00:18:55,840
the other policy which is good right um

551
00:18:54,559 --> 00:18:57,360
and you see this is about by the way

552
00:18:55,840 --> 00:18:58,080
it's a very simple policy i mean we are

553
00:18:57,360 --> 00:18:59,520
not doing

554
00:18:58,080 --> 00:19:01,840
it's not rocket science right i mean

555
00:18:59,520 --> 00:19:02,559
some simple tweaks can help us to

556
00:19:01,840 --> 00:19:06,000
optimize

557
00:19:02,559 --> 00:19:07,600
the scheduling so let me

558
00:19:06,000 --> 00:19:09,520
have some time let me show this this is

559
00:19:07,600 --> 00:19:12,559
a video recording of how to run

560
00:19:09,520 --> 00:19:15,840
stump very simple also nothing that

561
00:19:12,559 --> 00:19:19,039
will impress you um but

562
00:19:15,840 --> 00:19:22,559
it's just a two minute videos as i said

563
00:19:19,039 --> 00:19:24,240
we use these traces of uh of dags so we

564
00:19:22,559 --> 00:19:26,480
have a script called trace generator

565
00:19:24,240 --> 00:19:28,240
that would generate a synthetic trace of

566
00:19:26,480 --> 00:19:29,760
of dags in this case we have one

567
00:19:28,240 --> 00:19:32,640
thousand dags that arrive

568
00:19:29,760 --> 00:19:33,600
at different arrival times so the second

569
00:19:32,640 --> 00:19:36,000
field is the

570
00:19:33,600 --> 00:19:38,320
the dag id and and this is the duct type

571
00:19:36,000 --> 00:19:41,600
so we have one thousand

572
00:19:38,320 --> 00:19:44,879
dags that arrive to our simulated system

573
00:19:41,600 --> 00:19:48,639
right synthetic very simply trace we can

574
00:19:44,880 --> 00:19:48,640
generate that from real execution too

575
00:19:49,039 --> 00:19:52,160
then we configure stomp using this json

576
00:19:51,679 --> 00:19:53,840
file

577
00:19:52,160 --> 00:19:56,640
we indicate for example the policy that

578
00:19:53,840 --> 00:19:59,039
we want to use

579
00:19:56,640 --> 00:20:00,559
we can indicate for example well as i

580
00:19:59,039 --> 00:20:02,720
said before i mean what processing

581
00:20:00,559 --> 00:20:05,918
elements we have in our system

582
00:20:02,720 --> 00:20:07,360
and lower below we also indicate the

583
00:20:05,919 --> 00:20:11,520
different

584
00:20:07,360 --> 00:20:13,439
task types right ffts convolutions and

585
00:20:11,520 --> 00:20:15,679
i think we have also something else

586
00:20:13,440 --> 00:20:17,200
decoder

587
00:20:15,679 --> 00:20:18,880
so one way to execute the stump is with

588
00:20:17,200 --> 00:20:20,559
the stomp main script

589
00:20:18,880 --> 00:20:22,400
but then we have a more convenient

590
00:20:20,559 --> 00:20:25,200
script called run all

591
00:20:22,400 --> 00:20:26,559
which will run multiple configurations

592
00:20:25,200 --> 00:20:30,000
of stomp

593
00:20:26,559 --> 00:20:30,000
uh that can be easily

594
00:20:32,159 --> 00:20:36,400
defined here the in the in the at the

595
00:20:34,799 --> 00:20:38,320
beginning of that script we can

596
00:20:36,400 --> 00:20:40,400
say which which policies we want to

597
00:20:38,320 --> 00:20:42,480
evaluate uh what is for example

598
00:20:40,400 --> 00:20:44,000
the arrival times etc so this script

599
00:20:42,480 --> 00:20:45,919
will execute multiple

600
00:20:44,000 --> 00:20:48,640
combinations at the same time which is

601
00:20:45,919 --> 00:20:50,240
very convenient

602
00:20:48,640 --> 00:20:51,919
so what the video is showing just is

603
00:20:50,240 --> 00:20:55,360
just how do we call that

604
00:20:51,919 --> 00:20:59,280
script we can indicate well

605
00:20:55,360 --> 00:21:02,479
verbose dump everything on a csv

606
00:20:59,280 --> 00:21:04,000
file and this is the input dac that you

607
00:21:02,480 --> 00:21:05,919
the input that trace that you have to

608
00:21:04,000 --> 00:21:07,679
use so right now it's in this example

609
00:21:05,919 --> 00:21:09,360
it's only one combination so we are

610
00:21:07,679 --> 00:21:11,520
actually executing one instance of a

611
00:21:09,360 --> 00:21:17,360
stomp and passing all that

612
00:21:11,520 --> 00:21:19,280
json uh string to to um

613
00:21:17,360 --> 00:21:21,439
to configure that a specific execution

614
00:21:19,280 --> 00:21:23,360
so it finishes and it generates

615
00:21:21,440 --> 00:21:25,120
an output file that we can easily

616
00:21:23,360 --> 00:21:26,320
process with another script that we call

617
00:21:25,120 --> 00:21:29,360
collect

618
00:21:26,320 --> 00:21:31,760
py that will just parse the output

619
00:21:29,360 --> 00:21:32,559
and in this case this will print out for

620
00:21:31,760 --> 00:21:34,240
example

621
00:21:32,559 --> 00:21:36,158
we can we can print other things with in

622
00:21:34,240 --> 00:21:37,360
this case the average response time of

623
00:21:36,159 --> 00:21:39,440
all the dags

624
00:21:37,360 --> 00:21:41,840
uh for for that specific simulation

625
00:21:39,440 --> 00:21:44,320
right so very simple i mean

626
00:21:41,840 --> 00:21:46,320
you can run that this learn and how to

627
00:21:44,320 --> 00:21:50,480
run this in five minutes i mean it's

628
00:21:46,320 --> 00:21:50,480
extremely simple so um

629
00:21:52,640 --> 00:21:59,760
so let me let me wrap up here um

630
00:21:56,400 --> 00:22:03,280
stomp is a is an effort that is uh in

631
00:21:59,760 --> 00:22:05,039
in inactive development right and we are

632
00:22:03,280 --> 00:22:06,879
considering thinking about some new

633
00:22:05,039 --> 00:22:09,919
features to be added

634
00:22:06,880 --> 00:22:12,880
uh for example like support for more

635
00:22:09,919 --> 00:22:14,000
complete input trace format we want to

636
00:22:12,880 --> 00:22:16,640
also generate more

637
00:22:14,000 --> 00:22:19,440
statistics i think some interesting

638
00:22:16,640 --> 00:22:21,520
things that i want to mention is that

639
00:22:19,440 --> 00:22:22,720
as part of this new feature that we will

640
00:22:21,520 --> 00:22:25,360
incorporate we

641
00:22:22,720 --> 00:22:26,640
will have support for power modeling

642
00:22:25,360 --> 00:22:28,240
it's not just about

643
00:22:26,640 --> 00:22:30,400
performance throughput but also power

644
00:22:28,240 --> 00:22:32,480
efficiency

645
00:22:30,400 --> 00:22:34,880
and something that i think we think is

646
00:22:32,480 --> 00:22:38,720
very very interesting we want to explore

647
00:22:34,880 --> 00:22:40,640
more machine learning like

648
00:22:38,720 --> 00:22:42,080
scheduling policies right what the five

649
00:22:40,640 --> 00:22:42,960
policies that i show in the example

650
00:22:42,080 --> 00:22:46,240
below

651
00:22:42,960 --> 00:22:47,840
uh are relatively simply heuristics

652
00:22:46,240 --> 00:22:49,520
we think that we can exploit some

653
00:22:47,840 --> 00:22:50,000
machine learning techniques to do even

654
00:22:49,520 --> 00:22:52,158
better

655
00:22:50,000 --> 00:22:53,440
not necessarily we have to go to complex

656
00:22:52,159 --> 00:22:55,200
deep learning right

657
00:22:53,440 --> 00:22:56,960
we can talk about i don't know simple

658
00:22:55,200 --> 00:22:59,200
decision trees for example right so we

659
00:22:56,960 --> 00:23:02,159
want to go into into that area

660
00:22:59,200 --> 00:23:02,640
and i am emphasizing this because this

661
00:23:02,159 --> 00:23:05,360
is some

662
00:23:02,640 --> 00:23:06,240
some interesting area where everybody

663
00:23:05,360 --> 00:23:08,240
can eventually

664
00:23:06,240 --> 00:23:09,520
collaborate or contribute if interested

665
00:23:08,240 --> 00:23:11,280
right so we believe that

666
00:23:09,520 --> 00:23:13,600
machine learning can can provide some

667
00:23:11,280 --> 00:23:15,600
very good benefits when it comes to

668
00:23:13,600 --> 00:23:17,039
scheduling of tasks in in heterogeneous

669
00:23:15,600 --> 00:23:19,039
platforms

670
00:23:17,039 --> 00:23:20,080
and we want to move from the abstract to

671
00:23:19,039 --> 00:23:22,640
the more concrete

672
00:23:20,080 --> 00:23:24,000
we are adding support to characterize

673
00:23:22,640 --> 00:23:25,600
real

674
00:23:24,000 --> 00:23:27,280
applications like for example real new

675
00:23:25,600 --> 00:23:30,000
radio walls and generate

676
00:23:27,280 --> 00:23:31,520
duct traces from those real execution

677
00:23:30,000 --> 00:23:33,840
instead of just creating

678
00:23:31,520 --> 00:23:34,960
synthetic duct traces right but the

679
00:23:33,840 --> 00:23:37,520
stump is already

680
00:23:34,960 --> 00:23:38,880
a very nice tool that provides plenty of

681
00:23:37,520 --> 00:23:41,679
opportunities

682
00:23:38,880 --> 00:23:43,520
to explore the the program domain and

683
00:23:41,679 --> 00:23:45,120
generate conclusions so please i mean

684
00:23:43,520 --> 00:23:47,520
check it out and play with it and

685
00:23:45,120 --> 00:23:49,520
provide your feedback

686
00:23:47,520 --> 00:23:51,600
you can check out the dev branch if you

687
00:23:49,520 --> 00:23:55,360
want which provides more leading edge

688
00:23:51,600 --> 00:23:56,639
features so please let us let us know if

689
00:23:55,360 --> 00:23:58,559
there is any any feedback

690
00:23:56,640 --> 00:23:59,919
that you can provide or in any way that

691
00:23:58,559 --> 00:24:01,440
you think you can contribute or

692
00:23:59,919 --> 00:24:03,120
collaborate

693
00:24:01,440 --> 00:24:15,200
so thank you very much you won't see my

694
00:24:03,120 --> 00:24:15,199
face again today this is my last thought

