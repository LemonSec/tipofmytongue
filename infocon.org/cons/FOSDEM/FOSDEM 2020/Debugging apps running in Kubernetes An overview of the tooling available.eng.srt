1
00:00:06,240 --> 00:00:11,519
great

2
00:00:06,799 --> 00:00:14,480
so um i was in a talk earlier today

3
00:00:11,519 --> 00:00:15,360
in the go dev room from andre where he

4
00:00:14,480 --> 00:00:18,480
was talking about

5
00:00:15,360 --> 00:00:20,560
advanced techniques of debugging go

6
00:00:18,480 --> 00:00:21,920
and he asked the audience how do you

7
00:00:20,560 --> 00:00:25,519
debug

8
00:00:21,920 --> 00:00:28,800
and everybody shouted out print line

9
00:00:25,519 --> 00:00:31,679
and it's quite clear that debugging

10
00:00:28,800 --> 00:00:32,239
you know kind of lost its way over time

11
00:00:31,679 --> 00:00:34,160
um

12
00:00:32,238 --> 00:00:35,440
but at the same time it's not because

13
00:00:34,160 --> 00:00:36,959
we've got this great dev room and

14
00:00:35,440 --> 00:00:38,559
there's been amazing talks

15
00:00:36,960 --> 00:00:40,079
from people talking about the debugging

16
00:00:38,559 --> 00:00:42,559
tools that are out there

17
00:00:40,079 --> 00:00:43,440
and i'm gonna go through this is mainly

18
00:00:42,559 --> 00:00:46,879
a tool talk

19
00:00:43,440 --> 00:00:47,920
i'll do some demos but the tools are

20
00:00:46,879 --> 00:00:51,039
still

21
00:00:47,920 --> 00:00:52,480
in their infancy i'd say um and

22
00:00:51,039 --> 00:00:53,920
debugging isn't going to be your first

23
00:00:52,480 --> 00:00:54,959
problem when you get into kubernetes

24
00:00:53,920 --> 00:00:57,360
your first problem is

25
00:00:54,960 --> 00:00:58,719
deployment you want to focus on your ci

26
00:00:57,360 --> 00:01:01,840
cd process

27
00:00:58,719 --> 00:01:03,039
ideally with some git ops techniques and

28
00:01:01,840 --> 00:01:04,879
then once you have

29
00:01:03,039 --> 00:01:07,280
a good flow of getting code into

30
00:01:04,879 --> 00:01:09,600
production you then need monitoring

31
00:01:07,280 --> 00:01:10,400
and there is a whole dev room on

32
00:01:09,600 --> 00:01:12,960
monitoring

33
00:01:10,400 --> 00:01:14,240
and tracing open tracing is a fantastic

34
00:01:12,960 --> 00:01:16,640
technique for finding out what's

35
00:01:14,240 --> 00:01:18,960
happening in your application

36
00:01:16,640 --> 00:01:19,920
once you got all that going then on your

37
00:01:18,960 --> 00:01:22,240
day three

38
00:01:19,920 --> 00:01:23,439
if you're that fast you can start

39
00:01:22,240 --> 00:01:25,920
debugging

40
00:01:23,439 --> 00:01:26,639
and just so we're all on the same page i

41
00:01:25,920 --> 00:01:29,360
want to just

42
00:01:26,640 --> 00:01:30,880
do some basic kubernetes talk uh

43
00:01:29,360 --> 00:01:32,320
hopefully it's the end of the conference

44
00:01:30,880 --> 00:01:34,560
and you've been able to pick up

45
00:01:32,320 --> 00:01:36,158
at least enough to where you don't need

46
00:01:34,560 --> 00:01:37,680
this but just so we're all

47
00:01:36,159 --> 00:01:40,960
on the same page well i keep going

48
00:01:37,680 --> 00:01:44,079
through the container is the core

49
00:01:40,960 --> 00:01:46,158
well the pot itself i guess i i think of

50
00:01:44,079 --> 00:01:47,839
as the core component in kubernetes

51
00:01:46,159 --> 00:01:49,759
and in a pod you have a container

52
00:01:47,840 --> 00:01:50,479
running you can have multiple containers

53
00:01:49,759 --> 00:01:52,720
running

54
00:01:50,479 --> 00:01:53,679
uh ideally it's preferably just one

55
00:01:52,720 --> 00:01:55,600
container but

56
00:01:53,680 --> 00:01:57,439
there's no restrictions you can have

57
00:01:55,600 --> 00:02:00,640
containers you can have volumes

58
00:01:57,439 --> 00:02:02,320
with data in them or not as you like

59
00:02:00,640 --> 00:02:04,560
there's networking capabilities that

60
00:02:02,320 --> 00:02:08,079
kubernetes provides you

61
00:02:04,560 --> 00:02:09,759
and this is kind of your your basic

62
00:02:08,080 --> 00:02:11,280
concept of what you want to do with

63
00:02:09,758 --> 00:02:13,279
kubernetes is run your

64
00:02:11,280 --> 00:02:14,400
docker image run your application in a

65
00:02:13,280 --> 00:02:15,840
docker image it doesn't have to be

66
00:02:14,400 --> 00:02:19,200
docker either but

67
00:02:15,840 --> 00:02:22,160
primarily it is and so those

68
00:02:19,200 --> 00:02:23,119
pods then run inside a node and the node

69
00:02:22,160 --> 00:02:25,520
would be

70
00:02:23,120 --> 00:02:26,959
typically an actual machine and you can

71
00:02:25,520 --> 00:02:29,920
have multiple nodes

72
00:02:26,959 --> 00:02:30,560
and distributed across all sorts of

73
00:02:29,920 --> 00:02:33,200
areas

74
00:02:30,560 --> 00:02:35,280
and each pod can then be in different

75
00:02:33,200 --> 00:02:36,480
nodes and distribute out in all sorts of

76
00:02:35,280 --> 00:02:39,599
different ways

77
00:02:36,480 --> 00:02:41,760
kubernetes is there to provide the

78
00:02:39,599 --> 00:02:43,599
orchestration you tell it what you want

79
00:02:41,760 --> 00:02:45,599
you give it the configuration this is

80
00:02:43,599 --> 00:02:47,839
how i want my environment to be like

81
00:02:45,599 --> 00:02:48,959
and kubernetes does its best effort to

82
00:02:47,840 --> 00:02:51,519
give you that

83
00:02:48,959 --> 00:02:53,519
so if a pod crashes if your application

84
00:02:51,519 --> 00:02:55,360
has a crash and it shuts down

85
00:02:53,519 --> 00:02:57,200
kubernetes will do its best effort to

86
00:02:55,360 --> 00:02:58,800
spin that up if the node

87
00:02:57,200 --> 00:03:00,879
gets lost yeah if you're in the cloud

88
00:02:58,800 --> 00:03:02,959
and they just take that vm away from you

89
00:03:00,879 --> 00:03:04,000
kubernetes will do its best effort to

90
00:03:02,959 --> 00:03:06,720
shift those pods over

91
00:03:04,000 --> 00:03:07,680
there to a new node or other nodes you

92
00:03:06,720 --> 00:03:09,760
do have

93
00:03:07,680 --> 00:03:12,159
so again that's it's a best effort

94
00:03:09,760 --> 00:03:15,519
technique

95
00:03:12,159 --> 00:03:19,200
based on what you want so

96
00:03:15,519 --> 00:03:22,800
hopefully that's kubernetes in a minute

97
00:03:19,200 --> 00:03:24,798
and now into debugging and everything

98
00:03:22,800 --> 00:03:26,640
that i'm going to show you today i do

99
00:03:24,799 --> 00:03:30,560
not recommend to do in production

100
00:03:26,640 --> 00:03:32,958
all these tools have huge security risks

101
00:03:30,560 --> 00:03:33,680
let alone just taking your whole system

102
00:03:32,959 --> 00:03:36,239
down

103
00:03:33,680 --> 00:03:38,560
so i gave a talk yesterday about

104
00:03:36,239 --> 00:03:38,879
ephemeral environments i'd love to plug

105
00:03:38,560 --> 00:03:40,959
that

106
00:03:38,879 --> 00:03:42,399
there's a lot of tools on how you can

107
00:03:40,959 --> 00:03:43,280
get set up in a non-production

108
00:03:42,400 --> 00:03:45,680
environment

109
00:03:43,280 --> 00:03:46,400
and i mentioned andre's talk earlier

110
00:03:45,680 --> 00:03:48,480
today

111
00:03:46,400 --> 00:03:50,159
and there was a great talk from lucas

112
00:03:48,480 --> 00:03:51,920
about

113
00:03:50,159 --> 00:03:54,159
one of the tools i'll talk about later

114
00:03:51,920 --> 00:03:57,760
that you can check out

115
00:03:54,159 --> 00:04:01,280
um and

116
00:03:57,760 --> 00:04:03,200
yeah i mentioned that like

117
00:04:01,280 --> 00:04:05,519
there's this one technique of just

118
00:04:03,200 --> 00:04:07,280
logging out what you want to find

119
00:04:05,519 --> 00:04:08,799
in your application but the debugging

120
00:04:07,280 --> 00:04:10,640
has so much more power

121
00:04:08,799 --> 00:04:13,360
that when you can utilize it you can

122
00:04:10,640 --> 00:04:17,199
really get the best development process

123
00:04:13,360 --> 00:04:19,359
available so with the tools

124
00:04:17,199 --> 00:04:20,720
uh i want to start with two that i

125
00:04:19,358 --> 00:04:23,198
particularly find

126
00:04:20,720 --> 00:04:24,800
more like they're my favorites uh

127
00:04:23,199 --> 00:04:26,000
they're the first ones that i got these

128
00:04:24,800 --> 00:04:28,000
to work and when i

129
00:04:26,000 --> 00:04:29,680
was able to set break points in my ide

130
00:04:28,000 --> 00:04:32,160
on something running in kubernetes

131
00:04:29,680 --> 00:04:33,759
i thought oh this is great stuff and i

132
00:04:32,160 --> 00:04:36,720
did it with the use of

133
00:04:33,759 --> 00:04:38,400
one tool was k-sync and the concept is

134
00:04:36,720 --> 00:04:39,199
that you have your file that runs in

135
00:04:38,400 --> 00:04:42,638
your pod

136
00:04:39,199 --> 00:04:44,960
and you know it's just an html file and

137
00:04:42,639 --> 00:04:46,720
you build that docker image and you put

138
00:04:44,960 --> 00:04:48,479
that file in it then you run your pod in

139
00:04:46,720 --> 00:04:51,360
that file sitting there in the cloud

140
00:04:48,479 --> 00:04:51,840
or in your cluster and you have that

141
00:04:51,360 --> 00:04:53,120
file

142
00:04:51,840 --> 00:04:54,799
in that docker image and you want to

143
00:04:53,120 --> 00:04:56,560
change that without having to recompile

144
00:04:54,800 --> 00:04:59,040
a whole docker image and everything

145
00:04:56,560 --> 00:05:00,560
and so k-sync will sync a directory

146
00:04:59,040 --> 00:05:04,000
that's on your local machine

147
00:05:00,560 --> 00:05:05,919
with the directory that's in the pod

148
00:05:04,000 --> 00:05:07,600
and so then on your file and your local

149
00:05:05,919 --> 00:05:09,440
machine you can change the file

150
00:05:07,600 --> 00:05:11,120
and it'll get synced into that container

151
00:05:09,440 --> 00:05:13,520
your docker won't restart

152
00:05:11,120 --> 00:05:16,080
it just updates the file and you now

153
00:05:13,520 --> 00:05:19,680
have the change that you wanted

154
00:05:16,080 --> 00:05:22,000
available to you in your running system

155
00:05:19,680 --> 00:05:23,120
once you have this going you can then

156
00:05:22,000 --> 00:05:26,800
connect

157
00:05:23,120 --> 00:05:28,320
a tool called squash which is basically

158
00:05:26,800 --> 00:05:29,840
a wrapper around debugging for

159
00:05:28,320 --> 00:05:32,240
kubernetes it'll

160
00:05:29,840 --> 00:05:33,280
spin up another container in its own

161
00:05:32,240 --> 00:05:35,759
namespace

162
00:05:33,280 --> 00:05:36,880
which opens up the port connections and

163
00:05:35,759 --> 00:05:38,800
so then your

164
00:05:36,880 --> 00:05:40,560
ide locally will have that port

165
00:05:38,800 --> 00:05:41,520
connection configured

166
00:05:40,560 --> 00:05:43,759
so then when you're running the

167
00:05:41,520 --> 00:05:45,359
application and hit the point where you

168
00:05:43,759 --> 00:05:45,919
would have a break point it would then

169
00:05:45,360 --> 00:05:48,320
trigger

170
00:05:45,919 --> 00:05:49,359
in your ide and stop the pause the

171
00:05:48,320 --> 00:05:53,599
application while you

172
00:05:49,360 --> 00:05:56,880
develop um squash

173
00:05:53,600 --> 00:06:00,479
is limited to delve

174
00:05:56,880 --> 00:06:03,840
for go and java and gdp

175
00:06:00,479 --> 00:06:06,719
um they had uh plans to support

176
00:06:03,840 --> 00:06:07,198
python and node.js this year this past

177
00:06:06,720 --> 00:06:09,280
year

178
00:06:07,199 --> 00:06:10,880
and didn't reach those goals so of

179
00:06:09,280 --> 00:06:12,799
course they're open for

180
00:06:10,880 --> 00:06:15,520
contribute contributors to help get

181
00:06:12,800 --> 00:06:18,240
there um

182
00:06:15,520 --> 00:06:19,440
but yeah so as i said this was when i

183
00:06:18,240 --> 00:06:22,720
got these two tools

184
00:06:19,440 --> 00:06:25,440
working and they each do their own thing

185
00:06:22,720 --> 00:06:26,720
so they don't have that extra complexity

186
00:06:25,440 --> 00:06:28,240
when something goes wrong

187
00:06:26,720 --> 00:06:29,840
if something goes wrong with one of them

188
00:06:28,240 --> 00:06:30,960
you know uh this is where i need to

189
00:06:29,840 --> 00:06:33,198
focus my attention

190
00:06:30,960 --> 00:06:34,479
you don't have one tool trying to do 70

191
00:06:33,199 --> 00:06:37,520
things and you're like wait what

192
00:06:34,479 --> 00:06:39,120
is it this no it's there yeah so so

193
00:06:37,520 --> 00:06:41,599
that's again the benefit of having these

194
00:06:39,120 --> 00:06:43,680
two separations

195
00:06:41,600 --> 00:06:45,199
there's another tool called telepresence

196
00:06:43,680 --> 00:06:47,600
which when this works

197
00:06:45,199 --> 00:06:49,440
this is even better this when this works

198
00:06:47,600 --> 00:06:52,479
this is probably the best

199
00:06:49,440 --> 00:06:54,400
um the concept is that you have

200
00:06:52,479 --> 00:06:56,240
traffic coming into your cluster into

201
00:06:54,400 --> 00:06:57,758
your pod you know communicating with

202
00:06:56,240 --> 00:06:58,639
other pods in your network and coming

203
00:06:57,759 --> 00:07:00,560
back out

204
00:06:58,639 --> 00:07:02,240
and you know you want to debug something

205
00:07:00,560 --> 00:07:04,479
in one of these pods

206
00:07:02,240 --> 00:07:06,639
so with telepresence you create this

207
00:07:04,479 --> 00:07:08,719
tunnel into your local machine

208
00:07:06,639 --> 00:07:11,440
and your local machine then has access

209
00:07:08,720 --> 00:07:13,919
to everything else that's in the cluster

210
00:07:11,440 --> 00:07:15,280
and so as i mentioned about not doing

211
00:07:13,919 --> 00:07:18,080
this in production

212
00:07:15,280 --> 00:07:19,520
if you do this in production and traffic

213
00:07:18,080 --> 00:07:21,039
comes in here and then goes to your

214
00:07:19,520 --> 00:07:22,799
local machine and you're not running the

215
00:07:21,039 --> 00:07:24,479
app on your local machine

216
00:07:22,800 --> 00:07:26,960
there's that's the end of the traffic

217
00:07:24,479 --> 00:07:29,280
right or if you have a break point

218
00:07:26,960 --> 00:07:30,479
sitting on your ide and somebody hits

219
00:07:29,280 --> 00:07:31,919
that break point yeah that's

220
00:07:30,479 --> 00:07:33,359
the end of it like nobody's gonna get

221
00:07:31,919 --> 00:07:34,080
back the results that they're waiting

222
00:07:33,360 --> 00:07:37,120
for

223
00:07:34,080 --> 00:07:38,560
um telepresence

224
00:07:37,120 --> 00:07:40,400
because it creates this interesting

225
00:07:38,560 --> 00:07:43,759
networking um

226
00:07:40,400 --> 00:07:47,039
at least when we develop it um or we

227
00:07:43,759 --> 00:07:48,879
use it with go applications we have to

228
00:07:47,039 --> 00:07:51,520
create a new vpn

229
00:07:48,879 --> 00:07:52,639
for this network and you can't use

230
00:07:51,520 --> 00:07:54,799
another vpn

231
00:07:52,639 --> 00:07:56,639
while you have telepresence running so

232
00:07:54,800 --> 00:07:59,680
if you have as we have

233
00:07:56,639 --> 00:08:02,000
vpn for all our outside developers to be

234
00:07:59,680 --> 00:08:04,639
able to access the internal networking

235
00:08:02,000 --> 00:08:06,400
they're not able to use the vpn and

236
00:08:04,639 --> 00:08:09,919
develop with telepresence it's not

237
00:08:06,400 --> 00:08:12,000
compatible for two vpns at the same time

238
00:08:09,919 --> 00:08:14,240
at least with that technique of creating

239
00:08:12,000 --> 00:08:18,400
the network that uses

240
00:08:14,240 --> 00:08:20,639
mac os and go and so there's

241
00:08:18,400 --> 00:08:23,198
the documentation on telepresence gets

242
00:08:20,639 --> 00:08:24,639
into its limitations and what you can do

243
00:08:23,199 --> 00:08:27,199
and how you can do it with

244
00:08:24,639 --> 00:08:27,759
different ides as well and integrate it

245
00:08:27,199 --> 00:08:30,879
with your id

246
00:08:27,759 --> 00:08:33,279
directly so check it out if you can get

247
00:08:30,879 --> 00:08:34,640
it to work you're going to love it

248
00:08:33,279 --> 00:08:36,399
if you can't then try one of the other

249
00:08:34,640 --> 00:08:37,919
tools there's also an

250
00:08:36,399 --> 00:08:40,000
important aspect with telepresence is

251
00:08:37,919 --> 00:08:43,120
when you start the application locally

252
00:08:40,000 --> 00:08:44,800
you know if you have the settings in

253
00:08:43,120 --> 00:08:47,040
your pod that say

254
00:08:44,800 --> 00:08:47,839
you know which ports something connects

255
00:08:47,040 --> 00:08:50,719
to like

256
00:08:47,839 --> 00:08:52,399
all the configuration that's available

257
00:08:50,720 --> 00:08:53,600
for the docker image that's running in

258
00:08:52,399 --> 00:08:56,080
the pod

259
00:08:53,600 --> 00:08:57,040
you need to know when you execute the

260
00:08:56,080 --> 00:08:59,360
command locally

261
00:08:57,040 --> 00:09:02,240
if you need to know that this here is

262
00:08:59,360 --> 00:09:04,000
called you know db on port 306 when you

263
00:09:02,240 --> 00:09:04,560
execute locally you have to know that

264
00:09:04,000 --> 00:09:08,160
it's

265
00:09:04,560 --> 00:09:10,959
db 306 and so forth

266
00:09:08,160 --> 00:09:11,680
okay so the next tool to talk about is

267
00:09:10,959 --> 00:09:14,959
scaffolds

268
00:09:11,680 --> 00:09:18,079
which basically combines the two

269
00:09:14,959 --> 00:09:18,880
of k-sync and squash into one tool and

270
00:09:18,080 --> 00:09:21,760
it's

271
00:09:18,880 --> 00:09:22,780
available in intellij and vs code as a

272
00:09:21,760 --> 00:09:24,160
plugin

273
00:09:22,780 --> 00:09:26,880
[Music]

274
00:09:24,160 --> 00:09:28,399
and it works fantastic when you have

275
00:09:26,880 --> 00:09:30,880
just this smaller

276
00:09:28,399 --> 00:09:31,760
like the one application with less

277
00:09:30,880 --> 00:09:34,959
dependency

278
00:09:31,760 --> 00:09:35,760
structure and it'll manage the syncing

279
00:09:34,959 --> 00:09:38,800
of the file

280
00:09:35,760 --> 00:09:40,880
into the pod if it

281
00:09:38,800 --> 00:09:42,640
it'll know that if you have a compiled

282
00:09:40,880 --> 00:09:44,399
language that it'll need to spin up the

283
00:09:42,640 --> 00:09:45,519
new docker image it'll spin that up for

284
00:09:44,399 --> 00:09:47,360
you put it in the

285
00:09:45,519 --> 00:09:49,279
place that you tell it to and pull it

286
00:09:47,360 --> 00:09:51,600
down and start the pot again and

287
00:09:49,279 --> 00:09:52,720
have everything running locally in your

288
00:09:51,600 --> 00:09:55,120
ide and

289
00:09:52,720 --> 00:09:57,440
you get a lot of fantastic usability

290
00:09:55,120 --> 00:10:00,000
when it works

291
00:09:57,440 --> 00:10:00,640
and it was interesting because i have

292
00:10:00,000 --> 00:10:02,000
this

293
00:10:00,640 --> 00:10:03,600
demo that i'm going to go through with

294
00:10:02,000 --> 00:10:04,000
this application and i was trying to get

295
00:10:03,600 --> 00:10:05,040
scaffold

296
00:10:04,000 --> 00:10:07,040
to work with it because i thought oh

297
00:10:05,040 --> 00:10:08,880
this is you know a great tool this is

298
00:10:07,040 --> 00:10:10,560
how you should use it but i couldn't

299
00:10:08,880 --> 00:10:11,360
actually get it to work on something

300
00:10:10,560 --> 00:10:14,399
that had

301
00:10:11,360 --> 00:10:15,920
this pre-built helm charts that i

302
00:10:14,399 --> 00:10:16,959
already had my application it was

303
00:10:15,920 --> 00:10:18,880
already there

304
00:10:16,959 --> 00:10:20,719
it you then have to do everything

305
00:10:18,880 --> 00:10:22,399
manually and once you start doing things

306
00:10:20,720 --> 00:10:24,160
manually some things don't work and then

307
00:10:22,399 --> 00:10:26,240
you got to figure out how i did

308
00:10:24,160 --> 00:10:27,600
so i didn't get there maybe i didn't

309
00:10:26,240 --> 00:10:30,079
spend enough time with it

310
00:10:27,600 --> 00:10:31,200
all these tools they're as i said

311
00:10:30,079 --> 00:10:32,000
they're in their infancy they're going

312
00:10:31,200 --> 00:10:35,279
to take some time

313
00:10:32,000 --> 00:10:36,480
to get rolling yeah so don't expect to

314
00:10:35,279 --> 00:10:40,000
just flip it on and

315
00:10:36,480 --> 00:10:42,160
ah this is wonderful so um

316
00:10:40,000 --> 00:10:43,440
the the last tool i wanted to talk about

317
00:10:42,160 --> 00:10:47,519
was

318
00:10:43,440 --> 00:10:50,240
the a new ide from eclipse that

319
00:10:47,519 --> 00:10:51,440
actually runs in the kubernetes cluster

320
00:10:50,240 --> 00:10:54,160
so

321
00:10:51,440 --> 00:10:55,680
all that networking and mismatch and

322
00:10:54,160 --> 00:10:57,279
trying to figure out how to sync files

323
00:10:55,680 --> 00:10:58,640
you don't have to do because your ide is

324
00:10:57,279 --> 00:11:01,760
actually running there

325
00:10:58,640 --> 00:11:03,920
with the pods started up with the code

326
00:11:01,760 --> 00:11:07,360
that you're developing right there so

327
00:11:03,920 --> 00:11:09,920
the ide is a browser-based uh interface

328
00:11:07,360 --> 00:11:11,360
but you just interact directly with it

329
00:11:09,920 --> 00:11:14,479
and get all the

330
00:11:11,360 --> 00:11:14,959
all the magic there lucas had given gave

331
00:11:14,480 --> 00:11:17,279
a

332
00:11:14,959 --> 00:11:18,319
great talk on this a little while ago

333
00:11:17,279 --> 00:11:20,480
and

334
00:11:18,320 --> 00:11:22,399
it helped answer why when i tried to set

335
00:11:20,480 --> 00:11:24,399
it up two days ago

336
00:11:22,399 --> 00:11:26,000
i still was like how is this going to

337
00:11:24,399 --> 00:11:28,480
work what's going on here

338
00:11:26,000 --> 00:11:29,519
it's brand new i think it's just been

339
00:11:28,480 --> 00:11:33,360
out a few weeks

340
00:11:29,519 --> 00:11:34,640
so um it'll be good pretty soon i think

341
00:11:33,360 --> 00:11:37,760
based on what i'm hearing

342
00:11:34,640 --> 00:11:39,600
and the the one limitation now is that

343
00:11:37,760 --> 00:11:41,600
if you're doing it in

344
00:11:39,600 --> 00:11:43,680
like your local machine if you're

345
00:11:41,600 --> 00:11:45,680
spinning up a mini cube as an example

346
00:11:43,680 --> 00:11:47,359
and then installing it that install

347
00:11:45,680 --> 00:11:47,839
process takes a little bit of time as

348
00:11:47,360 --> 00:11:50,560
well

349
00:11:47,839 --> 00:11:51,440
and so it's not a quick up and running

350
00:11:50,560 --> 00:11:53,119
experience

351
00:11:51,440 --> 00:11:54,720
at least if you're doing it locally if

352
00:11:53,120 --> 00:11:55,600
you have a cluster in the cloud where

353
00:11:54,720 --> 00:11:57,040
it's running

354
00:11:55,600 --> 00:11:58,720
you don't need that extra time of

355
00:11:57,040 --> 00:12:00,079
getting up and running but if you have

356
00:11:58,720 --> 00:12:01,920
that cluster in the cloud

357
00:12:00,079 --> 00:12:06,160
other developers can then interact with

358
00:12:01,920 --> 00:12:06,160
the same code base i believe so

359
00:12:06,560 --> 00:12:12,638
demo time um i learned a lesson and

360
00:12:10,560 --> 00:12:15,680
recorded my demos

361
00:12:12,639 --> 00:12:17,279
but what i haven't done was figured out

362
00:12:15,680 --> 00:12:20,638
how to actually

363
00:12:17,279 --> 00:12:22,800
give a demo based on a recording so uh

364
00:12:20,639 --> 00:12:24,959
we'll see how this goes and yeah it's

365
00:12:22,800 --> 00:12:27,599
not going good yet because i didn't

366
00:12:24,959 --> 00:12:27,599
share the screen

367
00:12:30,800 --> 00:12:33,920
yeah that should go

368
00:12:36,839 --> 00:12:41,200
uh-huh

369
00:12:38,720 --> 00:12:42,079
okay so here i'm going to be demoing

370
00:12:41,200 --> 00:12:45,519
k-sync

371
00:12:42,079 --> 00:12:49,120
um and i start out by running mini cube

372
00:12:45,519 --> 00:12:51,040
on the machine and i'm using a

373
00:12:49,120 --> 00:12:52,720
slightly older version of kubernetes and

374
00:12:51,040 --> 00:12:56,399
not very older google

375
00:12:52,720 --> 00:13:00,720
only released it like a few weeks ago so

376
00:12:56,399 --> 00:13:01,680
um i made it available in gke i mean a

377
00:13:00,720 --> 00:13:04,639
few weeks ago

378
00:13:01,680 --> 00:13:06,160
but that's because the the application

379
00:13:04,639 --> 00:13:08,000
that i'm going to be installing there

380
00:13:06,160 --> 00:13:10,000
doesn't have the new api versions

381
00:13:08,000 --> 00:13:13,760
configured so the

382
00:13:10,000 --> 00:13:16,480
the app only works with 1.15 mb4

383
00:13:13,760 --> 00:13:18,639
um so now everything's up we have our

384
00:13:16,480 --> 00:13:19,519
our cluster we have default namespace

385
00:13:18,639 --> 00:13:23,600
and everything

386
00:13:19,519 --> 00:13:23,600
the cube system namespace and

387
00:13:23,760 --> 00:13:27,120
i got home installed locally but not in

388
00:13:26,720 --> 00:13:30,480
the

389
00:13:27,120 --> 00:13:33,760
help in minicube so install that

390
00:13:30,480 --> 00:13:35,519
i have armador installed which again was

391
00:13:33,760 --> 00:13:38,399
in the talk i gave yesterday

392
00:13:35,519 --> 00:13:40,079
on how that works so now i'm going to

393
00:13:38,399 --> 00:13:42,800
need to pull some code down

394
00:13:40,079 --> 00:13:43,760
and there's this example voting app that

395
00:13:42,800 --> 00:13:49,519
i went into

396
00:13:43,760 --> 00:13:52,000
that has these different components and

397
00:13:49,519 --> 00:13:54,000
the idea is that i'm gonna clone this

398
00:13:52,000 --> 00:13:55,279
repo i'm gonna be a developer of the

399
00:13:54,000 --> 00:13:56,880
voting app i'm gonna be

400
00:13:55,279 --> 00:13:58,959
you know this front-end developer

401
00:13:56,880 --> 00:14:02,079
working on a python application

402
00:13:58,959 --> 00:14:05,199
and so i need this set of code here

403
00:14:02,079 --> 00:14:09,439
and so i clone that code

404
00:14:05,199 --> 00:14:09,439
copy it into another directory

405
00:14:10,160 --> 00:14:15,760
and then i also want to

406
00:14:13,920 --> 00:14:17,199
have the helm configuration for that

407
00:14:15,760 --> 00:14:19,279
code and

408
00:14:17,199 --> 00:14:21,920
of course docker doesn't give that in

409
00:14:19,279 --> 00:14:23,920
their sample file but

410
00:14:21,920 --> 00:14:24,959
code fresh had originally wrote it and

411
00:14:23,920 --> 00:14:27,360
then i

412
00:14:24,959 --> 00:14:30,000
added it into armador and the

413
00:14:27,360 --> 00:14:33,120
documentation there so

414
00:14:30,000 --> 00:14:35,440
we can easily pull down the the helm

415
00:14:33,120 --> 00:14:38,560
chart with the armador configuration

416
00:14:35,440 --> 00:14:41,760
and merge that into the voting code

417
00:14:38,560 --> 00:14:45,839
so as a developer of the voting app this

418
00:14:41,760 --> 00:14:45,839
is kind of the

419
00:14:46,160 --> 00:14:48,959
this would be the

420
00:14:49,760 --> 00:14:55,839
code i would have locally um with

421
00:14:53,120 --> 00:14:59,519
you know my app.python my doctor file my

422
00:14:55,839 --> 00:15:02,880
helm configuration

423
00:14:59,519 --> 00:15:05,040
in the helm configuration i have

424
00:15:02,880 --> 00:15:06,959
the armador file with the dependencies

425
00:15:05,040 --> 00:15:11,279
that i need

426
00:15:06,959 --> 00:15:14,399
and the dockerfile that

427
00:15:11,279 --> 00:15:16,720
adds this app and

428
00:15:14,399 --> 00:15:17,680
here we can see that there's you know

429
00:15:16,720 --> 00:15:21,120
cats and dogs

430
00:15:17,680 --> 00:15:24,800
that are available for voting

431
00:15:21,120 --> 00:15:26,480
and in the example of using k-sync i'm

432
00:15:24,800 --> 00:15:28,479
going to want to switch from

433
00:15:26,480 --> 00:15:30,399
being able to vote for cats because i'm

434
00:15:28,480 --> 00:15:33,199
just not a big fan of cats but

435
00:15:30,399 --> 00:15:35,199
i love bunnies so i'm going to work on

436
00:15:33,199 --> 00:15:37,680
making that happen

437
00:15:35,199 --> 00:15:40,160
so first we're going to install the

438
00:15:37,680 --> 00:15:42,319
whole environment

439
00:15:40,160 --> 00:15:44,160
of all the components we need so there's

440
00:15:42,320 --> 00:15:46,800
the five charts to be installed

441
00:15:44,160 --> 00:15:49,040
one of them is the voting app and the

442
00:15:46,800 --> 00:15:52,839
others are the postgres the redis

443
00:15:49,040 --> 00:15:54,319
the results app and the worker those got

444
00:15:52,839 --> 00:15:57,680
installed

445
00:15:54,320 --> 00:16:01,440
then we can see they're

446
00:15:57,680 --> 00:16:05,599
installed but not yet running so we'll

447
00:16:01,440 --> 00:16:08,160
wait for them to get running which

448
00:16:05,600 --> 00:16:10,240
are 39 seconds 50 seconds that went

449
00:16:08,160 --> 00:16:13,360
quite fast time's flying

450
00:16:10,240 --> 00:16:16,000
uh so everything should be running the

451
00:16:13,360 --> 00:16:16,560
database is still initializing postgres

452
00:16:16,000 --> 00:16:19,440
is still

453
00:16:16,560 --> 00:16:22,560
a bit slow but we should be able to now

454
00:16:19,440 --> 00:16:25,120
load up the front end

455
00:16:22,560 --> 00:16:27,359
so we'll use mini cube to open the front

456
00:16:25,120 --> 00:16:27,360
end

457
00:16:30,240 --> 00:16:40,079
there's the cats and dogs

458
00:16:37,360 --> 00:16:40,480
and we'll load up the results so we can

459
00:16:40,079 --> 00:16:44,000
see

460
00:16:40,480 --> 00:16:44,000
yep i voted for a dog

461
00:16:44,079 --> 00:16:46,239
and

462
00:16:47,519 --> 00:16:52,160
here we go in and change cats to bunnies

463
00:16:52,959 --> 00:16:59,439
maybe nope not yet

464
00:16:56,320 --> 00:17:03,360
first we want to set up k-sync

465
00:16:59,440 --> 00:17:04,079
so it's already installed but it's not

466
00:17:03,360 --> 00:17:07,199
initialized

467
00:17:04,079 --> 00:17:10,399
into my cluster so that runs and then i

468
00:17:07,199 --> 00:17:11,039
start watching and so k-sync will now

469
00:17:10,400 --> 00:17:14,160
just watch

470
00:17:11,039 --> 00:17:15,520
what's happening in the cluster and then

471
00:17:14,160 --> 00:17:19,039
i'll have to create

472
00:17:15,520 --> 00:17:22,559
an actual instance to

473
00:17:19,039 --> 00:17:26,240
i don't know to be watched i guess um

474
00:17:22,559 --> 00:17:29,678
and from that uh i'll need to know

475
00:17:26,240 --> 00:17:30,840
the oh maybe i'm showing you something

476
00:17:29,679 --> 00:17:33,679
else first

477
00:17:30,840 --> 00:17:35,678
no

478
00:17:33,679 --> 00:17:37,919
yeah so here you can see that there's in

479
00:17:35,679 --> 00:17:39,919
the coop system so k-sync has to have

480
00:17:37,919 --> 00:17:42,400
these extra privileges too

481
00:17:39,919 --> 00:17:45,679
which you again wouldn't want to include

482
00:17:42,400 --> 00:17:47,600
in your production environment

483
00:17:45,679 --> 00:17:50,880
so here it's just sitting there waiting

484
00:17:47,600 --> 00:17:50,879
and listening and

485
00:17:51,120 --> 00:17:56,159
it's gonna need the um the app selector

486
00:17:54,960 --> 00:17:59,440
for the pod

487
00:17:56,160 --> 00:18:03,760
so the voting app has the the label

488
00:17:59,440 --> 00:18:03,760
that will be needed during the create

489
00:18:04,480 --> 00:18:08,640
ah so first i show you some

490
00:18:06,880 --> 00:18:09,919
documentation on casing

491
00:18:08,640 --> 00:18:12,640
show you how i google to get

492
00:18:09,919 --> 00:18:12,640
documentation

493
00:18:12,960 --> 00:18:20,480
um and quickly read through it all yeah

494
00:18:16,799 --> 00:18:20,480
yep yep yep yep

495
00:18:21,200 --> 00:18:29,039
there we go get that selector um

496
00:18:24,880 --> 00:18:31,840
and so

497
00:18:29,039 --> 00:18:32,160
we need to take a look what our labels

498
00:18:31,840 --> 00:18:34,720
are

499
00:18:32,160 --> 00:18:34,720
in our pod

500
00:18:41,039 --> 00:18:44,320
uh there's a lot to read through here

501
00:18:42,720 --> 00:18:47,919
but there's the voting app

502
00:18:44,320 --> 00:18:49,678
and there's the selector and

503
00:18:47,919 --> 00:18:52,640
i'm going to speed this up because we

504
00:18:49,679 --> 00:18:52,640
might be low on time

505
00:18:53,120 --> 00:18:56,879
hopefully i can talk fast enough where i

506
00:18:54,559 --> 00:18:57,520
make a directory so i have this theory

507
00:18:56,880 --> 00:19:00,799
where

508
00:18:57,520 --> 00:19:02,240
um with k-sync you know it syncs the

509
00:19:00,799 --> 00:19:04,639
folder from your local

510
00:19:02,240 --> 00:19:05,600
machine to the folder that's in the

511
00:19:04,640 --> 00:19:09,679
docker image

512
00:19:05,600 --> 00:19:13,039
and in the docker image you know we have

513
00:19:09,679 --> 00:19:15,440
hopefully just a small subset of what

514
00:19:13,039 --> 00:19:17,440
what you need to run yeah so in the

515
00:19:15,440 --> 00:19:19,440
actual code base you have your docker

516
00:19:17,440 --> 00:19:21,280
file you have your application you have

517
00:19:19,440 --> 00:19:22,080
all your configuration you have your ide

518
00:19:21,280 --> 00:19:24,160
settings

519
00:19:22,080 --> 00:19:25,918
and hopefully your docker image is

520
00:19:24,160 --> 00:19:27,840
compiled and built without all that

521
00:19:25,919 --> 00:19:29,120
extra stuff and just the application you

522
00:19:27,840 --> 00:19:31,918
need and so

523
00:19:29,120 --> 00:19:32,399
when i do a casing i don't want to sync

524
00:19:31,919 --> 00:19:35,120
my

525
00:19:32,400 --> 00:19:36,480
directory of my code i want to sync just

526
00:19:35,120 --> 00:19:38,320
an empty directory

527
00:19:36,480 --> 00:19:39,520
and get all the stuff from the docker

528
00:19:38,320 --> 00:19:42,159
image first onto my

529
00:19:39,520 --> 00:19:42,799
machine and then copy things from my

530
00:19:42,160 --> 00:19:46,080
local

531
00:19:42,799 --> 00:19:47,200
environment into that and this is maybe

532
00:19:46,080 --> 00:19:49,199
because

533
00:19:47,200 --> 00:19:50,720
we work primarily in golang which is a

534
00:19:49,200 --> 00:19:52,880
compiled language

535
00:19:50,720 --> 00:19:54,480
and you need to compile it anyways i'm

536
00:19:52,880 --> 00:19:56,720
not going to have it in my local

537
00:19:54,480 --> 00:19:58,880
in the directory of my code base so i'm

538
00:19:56,720 --> 00:20:01,760
going to have to copy it over anyways

539
00:19:58,880 --> 00:20:03,440
um and so here i'm going in and i'm

540
00:20:01,760 --> 00:20:05,200
showing you what's in the folder

541
00:20:03,440 --> 00:20:06,880
that's synced and then what's in the

542
00:20:05,200 --> 00:20:08,240
actual docker image there

543
00:20:06,880 --> 00:20:10,480
now of course they built the docker

544
00:20:08,240 --> 00:20:13,039
image with the dockerfile

545
00:20:10,480 --> 00:20:14,000
my whole ideal of you know separating

546
00:20:13,039 --> 00:20:16,158
out what's there

547
00:20:14,000 --> 00:20:17,200
is lost on this technique with this

548
00:20:16,159 --> 00:20:19,200
example but

549
00:20:17,200 --> 00:20:21,440
um you got to do things right if you

550
00:20:19,200 --> 00:20:24,080
want to be right now

551
00:20:21,440 --> 00:20:25,600
baby steps um there we go now i changed

552
00:20:24,080 --> 00:20:28,320
some bunnies

553
00:20:25,600 --> 00:20:29,520
and i saved the file again it doesn't

554
00:20:28,320 --> 00:20:32,080
sync anything yet

555
00:20:29,520 --> 00:20:33,360
because i only saved it into that local

556
00:20:32,080 --> 00:20:36,480
directory

557
00:20:33,360 --> 00:20:39,120
but then i copy it into the casing

558
00:20:36,480 --> 00:20:39,120
directory

559
00:20:40,080 --> 00:20:44,080
and we see that

560
00:20:45,919 --> 00:20:49,919
there it goes it copied the file

561
00:20:48,640 --> 00:20:52,480
reloaded

562
00:20:49,919 --> 00:20:53,520
the pod didn't actually stop but there's

563
00:20:52,480 --> 00:20:56,960
our bunnies

564
00:20:53,520 --> 00:21:00,320
we can vote for bunnies and

565
00:20:56,960 --> 00:21:03,120
well we voted for cats that didn't work

566
00:21:00,320 --> 00:21:04,799
so i think that's the end of this demo

567
00:21:03,120 --> 00:21:08,158
um

568
00:21:04,799 --> 00:21:11,440
and then whoops

569
00:21:08,159 --> 00:21:14,480
uh how do i

570
00:21:11,440 --> 00:21:17,840
go so let's try to fix the

571
00:21:14,480 --> 00:21:20,799
the bunnies on the back end um

572
00:21:17,840 --> 00:21:21,600
and my theory is that it's a problem in

573
00:21:20,799 --> 00:21:25,039
the worker

574
00:21:21,600 --> 00:21:26,399
um and so we have the

575
00:21:25,039 --> 00:21:28,559
the voting app in the front end and the

576
00:21:26,400 --> 00:21:31,679
worker that converts it into

577
00:21:28,559 --> 00:21:34,960
then in the result app and

578
00:21:31,679 --> 00:21:36,720
the worker is a java application so

579
00:21:34,960 --> 00:21:38,320
in theory in this i could have used

580
00:21:36,720 --> 00:21:41,360
squash however

581
00:21:38,320 --> 00:21:42,639
um i'm not a java developer so i

582
00:21:41,360 --> 00:21:44,479
ran into a whole bunch of problems

583
00:21:42,640 --> 00:21:46,240
getting that to work so

584
00:21:44,480 --> 00:21:47,600
in this demo i'm going to use

585
00:21:46,240 --> 00:21:50,880
telepresence

586
00:21:47,600 --> 00:21:53,280
and be able to spin up the worker

587
00:21:50,880 --> 00:21:55,520
um on my local machine while it's

588
00:21:53,280 --> 00:22:00,080
connecting to the redis and the postgres

589
00:21:55,520 --> 00:22:03,440
and in the cloud so i start up intellij

590
00:22:00,080 --> 00:22:05,439
go into the worker code um

591
00:22:03,440 --> 00:22:07,520
and again i took it from the example

592
00:22:05,440 --> 00:22:09,600
like i took their code you know so

593
00:22:07,520 --> 00:22:11,120
this is me as a developer of the worker

594
00:22:09,600 --> 00:22:14,399
i want to debug the worker

595
00:22:11,120 --> 00:22:15,120
and i go into their source code here

596
00:22:14,400 --> 00:22:17,840
there's just

597
00:22:15,120 --> 00:22:17,840
one file

598
00:22:18,400 --> 00:22:20,559
and

599
00:22:22,000 --> 00:22:25,360
it does the connection to the redis into

600
00:22:23,679 --> 00:22:26,720
the database and then it just waits for

601
00:22:25,360 --> 00:22:30,879
things to happen

602
00:22:26,720 --> 00:22:33,039
um and

603
00:22:30,880 --> 00:22:36,799
in a moment i'm going to set up the

604
00:22:33,039 --> 00:22:36,799
configuration to be able to debug

605
00:22:37,520 --> 00:22:40,879
don't know what i'm doing there there we

606
00:22:40,480 --> 00:22:44,240
go

607
00:22:40,880 --> 00:22:44,720
set a break point and then go into the

608
00:22:44,240 --> 00:22:46,960
menu

609
00:22:44,720 --> 00:22:46,960
and

610
00:23:05,520 --> 00:23:09,360
okay so debugging it's waiting for redis

611
00:23:08,080 --> 00:23:11,120
right because

612
00:23:09,360 --> 00:23:12,559
i started the application but i don't

613
00:23:11,120 --> 00:23:14,080
have the connection to redis i'm just

614
00:23:12,559 --> 00:23:22,480
running an app on my machine

615
00:23:14,080 --> 00:23:24,799
so now i need to turn telepresence on

616
00:23:22,480 --> 00:23:24,799
and

617
00:23:29,760 --> 00:23:34,840
what i need to do that uh so i have this

618
00:23:32,960 --> 00:23:37,520
redis

619
00:23:34,840 --> 00:23:38,959
um it was actually interesting so i

620
00:23:37,520 --> 00:23:40,240
already have the telepresence command

621
00:23:38,960 --> 00:23:41,679
set up i'm going to swap out the

622
00:23:40,240 --> 00:23:44,720
deployment of the worker

623
00:23:41,679 --> 00:23:47,600
to be a telepresence instance and

624
00:23:44,720 --> 00:23:48,400
so i'm going to do that i have to get my

625
00:23:47,600 --> 00:23:52,399
password right

626
00:23:48,400 --> 00:23:52,400
and then telepresence starts up

627
00:23:53,440 --> 00:23:56,720
then i was going to show you about how

628
00:23:55,679 --> 00:23:58,480
there's you know

629
00:23:56,720 --> 00:23:59,919
ways of doing this with mini cube

630
00:23:58,480 --> 00:24:02,720
there's plugins for

631
00:23:59,919 --> 00:24:04,400
development with intellij there's a

632
00:24:02,720 --> 00:24:06,240
whole lot of different options here

633
00:24:04,400 --> 00:24:08,400
and here you can see that i'm using the

634
00:24:06,240 --> 00:24:10,080
tcp connection with the vpn so that has

635
00:24:08,400 --> 00:24:13,679
the limitation that

636
00:24:10,080 --> 00:24:15,918
only tell one telepresence and

637
00:24:13,679 --> 00:24:17,120
so i'm still waiting for redis uh what

638
00:24:15,919 --> 00:24:20,000
actually happens

639
00:24:17,120 --> 00:24:22,000
with this uh instance is that the redis

640
00:24:20,000 --> 00:24:24,320
dns name doesn't

641
00:24:22,000 --> 00:24:25,200
resolve so i have to change the reddish

642
00:24:24,320 --> 00:24:28,960
to be the port

643
00:24:25,200 --> 00:24:31,760
uh i think this is just a setting on my

644
00:24:28,960 --> 00:24:32,480
local mini cube thing but the db

645
00:24:31,760 --> 00:24:35,120
resolves

646
00:24:32,480 --> 00:24:35,600
so there we go we're connected we got

647
00:24:35,120 --> 00:24:38,879
redis

648
00:24:35,600 --> 00:24:40,320
and the db running

649
00:24:38,880 --> 00:24:42,080
and now we're going to set a break point

650
00:24:40,320 --> 00:24:43,200
to see what happens when we vote

651
00:24:42,080 --> 00:24:45,520
and we're going to go and we're going to

652
00:24:43,200 --> 00:24:48,720
vote we're going to vote for a dog

653
00:24:45,520 --> 00:24:51,918
and it doesn't change because

654
00:24:48,720 --> 00:24:53,840
it hit the break point here yep there he

655
00:24:51,919 --> 00:24:58,400
goes it votes in the queue

656
00:24:53,840 --> 00:25:00,399
and to speed things up uh

657
00:24:58,400 --> 00:25:03,120
yup so we vote for b we can see that

658
00:25:00,400 --> 00:25:06,880
there's it's actually coming in just as

659
00:25:03,120 --> 00:25:09,039
the letter a and not as bunnies or cats

660
00:25:06,880 --> 00:25:11,279
or anything so

661
00:25:09,039 --> 00:25:13,360
it's not even a bug in the worker it's a

662
00:25:11,279 --> 00:25:15,840
bug in the front end application that i

663
00:25:13,360 --> 00:25:19,120
didn't change what i needed to change

664
00:25:15,840 --> 00:25:20,480
yeah so that was a nice demo i have five

665
00:25:19,120 --> 00:25:24,000
minutes left to try

666
00:25:20,480 --> 00:25:27,840
to do a demo of squash that

667
00:25:24,000 --> 00:25:28,480
um it's not here i uploaded a zip file

668
00:25:27,840 --> 00:25:32,320
with the

669
00:25:28,480 --> 00:25:34,559
this codes that i've got um

670
00:25:32,320 --> 00:25:34,559
so

671
00:25:36,480 --> 00:25:40,559
in vs code i've got just this simple

672
00:25:38,880 --> 00:25:42,559
application with a kubernetes

673
00:25:40,559 --> 00:25:47,039
configuration of just a

674
00:25:42,559 --> 00:25:48,559
service in a pod running on port 8080

675
00:25:47,039 --> 00:25:50,960
the docker file is really

676
00:25:48,559 --> 00:25:54,399
straightforward i uploaded

677
00:25:50,960 --> 00:25:57,600
the default docker file into quay

678
00:25:54,400 --> 00:25:59,279
and the application is really

679
00:25:57,600 --> 00:26:00,480
i was looking at this i must have taken

680
00:25:59,279 --> 00:26:01,279
this from somewhere because it doesn't

681
00:26:00,480 --> 00:26:04,720
make any sense

682
00:26:01,279 --> 00:26:08,320
but um it gets the point across

683
00:26:04,720 --> 00:26:13,520
and so if i

684
00:26:08,320 --> 00:26:13,520
first run it apply

685
00:26:14,559 --> 00:26:19,039
and so and then i gotta port forward

686
00:26:22,480 --> 00:26:26,960
so we can see that it's add is true so

687
00:26:25,919 --> 00:26:28,720
i'm trying to add

688
00:26:26,960 --> 00:26:30,320
option one to option two so i'm trying

689
00:26:28,720 --> 00:26:32,320
to add two plus two

690
00:26:30,320 --> 00:26:33,520
and it equals zero all right so clearly

691
00:26:32,320 --> 00:26:38,480
there's a bug there

692
00:26:33,520 --> 00:26:40,559
um and so now i need to first

693
00:26:38,480 --> 00:26:42,480
set up the casing because again go is a

694
00:26:40,559 --> 00:26:44,480
compiled language so i need to compile

695
00:26:42,480 --> 00:26:45,760
the changes and have it with the debug

696
00:26:44,480 --> 00:26:49,360
available and so

697
00:26:45,760 --> 00:26:54,320
let's do a k-sync watch

698
00:26:49,360 --> 00:26:54,320
and a case sync

699
00:26:54,400 --> 00:27:00,880
create nope that's not it

700
00:26:58,559 --> 00:27:00,879
um

701
00:27:05,840 --> 00:27:10,080
so it's in that name call it calc hell

702
00:27:08,880 --> 00:27:12,890
this should be good

703
00:27:10,080 --> 00:27:14,000
so now i've got this thing

704
00:27:12,890 --> 00:27:17,120
[Music]

705
00:27:14,000 --> 00:27:22,240
yep there we go running case sync

706
00:27:17,120 --> 00:27:25,360
get yeah so now that's um

707
00:27:22,240 --> 00:27:29,360
we're in the code so if i do make

708
00:27:25,360 --> 00:27:29,360
um k-sync

709
00:27:29,840 --> 00:27:34,000
this is just going to build the

710
00:27:31,360 --> 00:27:37,600
application and save it into the casing

711
00:27:34,000 --> 00:27:41,039
folder which i think should have worked

712
00:27:37,600 --> 00:27:41,678
and the poor forwarding is still there

713
00:27:41,039 --> 00:27:44,559
and so in the

714
00:27:41,679 --> 00:27:45,760
code in here i can do i already

715
00:27:44,559 --> 00:27:49,760
installed the squash

716
00:27:45,760 --> 00:27:51,440
plugin into vs code i um

717
00:27:49,760 --> 00:27:53,360
yeah that's basically all you need to do

718
00:27:51,440 --> 00:27:55,840
that in delve needs to be installed

719
00:27:53,360 --> 00:27:56,559
and then you start up squash and it

720
00:27:55,840 --> 00:28:00,000
squash

721
00:27:56,559 --> 00:28:05,360
is running in another namespace um

722
00:28:00,000 --> 00:28:08,720
so get a namespace

723
00:28:05,360 --> 00:28:12,799
so there's the squash debugger

724
00:28:08,720 --> 00:28:14,480
runs there and as i start it up it says

725
00:28:12,799 --> 00:28:16,240
hey you know i've got

726
00:28:14,480 --> 00:28:19,120
all these spaces where do you want to

727
00:28:16,240 --> 00:28:21,120
debug something i got it running an sq

728
00:28:19,120 --> 00:28:22,479
and here's the example app and which

729
00:28:21,120 --> 00:28:25,760
debugger do you want to use

730
00:28:22,480 --> 00:28:30,159
delve and so now

731
00:28:25,760 --> 00:28:34,720
it should just start up

732
00:28:30,159 --> 00:28:35,520
there we go and i can set a breakpoint

733
00:28:34,720 --> 00:28:39,440
somewhere

734
00:28:35,520 --> 00:28:42,799
in the code and around here after this

735
00:28:39,440 --> 00:28:47,760
print calculating and

736
00:28:42,799 --> 00:28:47,760
load the app it didn't work

737
00:28:55,760 --> 00:29:04,000
what if i change this

738
00:29:00,399 --> 00:29:04,000
and then do another make

739
00:29:09,520 --> 00:29:13,679
and that's probably why it's not

740
00:29:12,159 --> 00:29:17,520
actually updating the

741
00:29:13,679 --> 00:29:20,640
binary um coop cuddle

742
00:29:17,520 --> 00:29:22,799
get pot i think i'm a little

743
00:29:20,640 --> 00:29:24,240
low on time here to find out why this

744
00:29:22,799 --> 00:29:27,360
isn't working um

745
00:29:24,240 --> 00:29:27,919
but again i uploaded this code base and

746
00:29:27,360 --> 00:29:29,840
so

747
00:29:27,919 --> 00:29:31,679
based on part of what i said you might

748
00:29:29,840 --> 00:29:32,399
be able to piece this together on your

749
00:29:31,679 --> 00:29:34,799
own

750
00:29:32,399 --> 00:29:35,520
um one last thing to show you is kube

751
00:29:34,799 --> 00:29:38,559
cuddle

752
00:29:35,520 --> 00:29:41,930
exec minus i t

753
00:29:38,559 --> 00:29:43,440
minus n sq bm spin

754
00:29:41,930 --> 00:29:46,480
[Music]

755
00:29:43,440 --> 00:29:50,399
h ls minus all

756
00:29:46,480 --> 00:29:53,200
so here we can see that the

757
00:29:50,399 --> 00:29:54,639
the application was updated well you

758
00:29:53,200 --> 00:29:58,320
know an hour ago

759
00:29:54,640 --> 00:30:01,200
but no real time based on time zone

760
00:29:58,320 --> 00:30:03,200
the file got synced it just didn't

761
00:30:01,200 --> 00:30:09,840
change

762
00:30:03,200 --> 00:30:09,840
time's up um thank you

763
00:30:16,960 --> 00:30:19,039
you

