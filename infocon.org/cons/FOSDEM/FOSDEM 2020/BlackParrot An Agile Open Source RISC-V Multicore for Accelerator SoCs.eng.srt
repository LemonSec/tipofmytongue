1
00:00:05,359 --> 00:00:08,480
hi

2
00:00:05,680 --> 00:00:09,920
my name is university of washington uh

3
00:00:08,480 --> 00:00:10,639
i'm going to talk about blackberry we're

4
00:00:09,920 --> 00:00:12,799
announcing

5
00:00:10,639 --> 00:00:14,959
our new agile open source response

6
00:00:12,799 --> 00:00:17,520
multi-core

7
00:00:14,960 --> 00:00:18,560
as a host uh core for accelerator-based

8
00:00:17,520 --> 00:00:20,880
sms

9
00:00:18,560 --> 00:00:23,680
this work is done between washington and

10
00:00:20,880 --> 00:00:25,840
boston university

11
00:00:23,680 --> 00:00:26,960
so the kind of motivation here is that

12
00:00:25,840 --> 00:00:28,080
traditional hardware design

13
00:00:26,960 --> 00:00:29,920
methodologies

14
00:00:28,080 --> 00:00:32,000
usually rely on proprietary tooling and

15
00:00:29,920 --> 00:00:34,239
proprietary ip libraries that

16
00:00:32,000 --> 00:00:35,680
don't promote reuse and uh you know are

17
00:00:34,239 --> 00:00:36,879
not accessible to hobbyists or

18
00:00:35,680 --> 00:00:40,000
researchers

19
00:00:36,880 --> 00:00:42,399
so and but at the same time new open

20
00:00:40,000 --> 00:00:43,200
source tables and open source libraries

21
00:00:42,399 --> 00:00:45,039
are

22
00:00:43,200 --> 00:00:48,480
providing a way for obvious researchers

23
00:00:45,039 --> 00:00:48,480
to get involved in this ecosystem

24
00:00:49,039 --> 00:00:52,320
but it's no coincidence that this is

25
00:00:50,879 --> 00:00:54,320
happening in an era where diverse

26
00:00:52,320 --> 00:00:56,320
workloads require custom silicon

27
00:00:54,320 --> 00:00:57,680
accelerators allow us to team gaming's

28
00:00:56,320 --> 00:00:59,199
performance gains while traditional

29
00:00:57,680 --> 00:01:01,359
transistor scaling is kind of figured

30
00:00:59,199 --> 00:01:01,358
out

31
00:01:01,840 --> 00:01:05,920
but while custom accelerators are the

32
00:01:04,000 --> 00:01:07,760
secret sauce for these new systems

33
00:01:05,920 --> 00:01:09,439
they don't stand alone you need all

34
00:01:07,760 --> 00:01:12,479
sorts of components like the uncore

35
00:01:09,439 --> 00:01:12,798
i o chip testing capabilities in order

36
00:01:12,479 --> 00:01:13,679
to

37
00:01:12,799 --> 00:01:15,600
you know maintain your own

38
00:01:13,680 --> 00:01:16,479
infrastructure just to develop a small

39
00:01:15,600 --> 00:01:19,520
accelerator

40
00:01:16,479 --> 00:01:21,360
uh to do a specific big function task

41
00:01:19,520 --> 00:01:22,479
the getting angus components wrong can

42
00:01:21,360 --> 00:01:26,640
completely destroy all of your

43
00:01:22,479 --> 00:01:28,479
accelerated gains so general purpose

44
00:01:26,640 --> 00:01:28,960
scores are needed to coordinate all of

45
00:01:28,479 --> 00:01:30,720
these

46
00:01:28,960 --> 00:01:32,479
accelerators all the moving parts all

47
00:01:30,720 --> 00:01:34,079
these uncore systems

48
00:01:32,479 --> 00:01:35,360
um but when you're adding a new host

49
00:01:34,079 --> 00:01:36,960
score to the system there are several

50
00:01:35,360 --> 00:01:38,400
considerations

51
00:01:36,960 --> 00:01:40,240
you want to be efficient performance

52
00:01:38,400 --> 00:01:41,680
reliable it needs to be able to do what

53
00:01:40,240 --> 00:01:43,520
you want in your power and performance

54
00:01:41,680 --> 00:01:45,040
envelope

55
00:01:43,520 --> 00:01:46,720
it needs to be able to control a diverse

56
00:01:45,040 --> 00:01:50,240
set of accelerators

57
00:01:46,720 --> 00:01:52,000
both with standard and custom interfaces

58
00:01:50,240 --> 00:01:53,439
it needs to be trustable it needs to use

59
00:01:52,000 --> 00:01:54,960
standard design principles standard

60
00:01:53,439 --> 00:01:55,679
dynamic methodologies standard design

61
00:01:54,960 --> 00:01:57,279
languages

62
00:01:55,680 --> 00:01:59,759
so that people can just look at it and

63
00:01:57,280 --> 00:02:01,600
sketch it and know that it's quality

64
00:01:59,759 --> 00:02:02,880
and the ip needs to be extensively

65
00:02:01,600 --> 00:02:04,158
verified

66
00:02:02,880 --> 00:02:05,600
if you have to do this redesign

67
00:02:04,159 --> 00:02:08,399
re-verification you've lost all your

68
00:02:05,600 --> 00:02:09,598
benefits of reuse

69
00:02:08,399 --> 00:02:10,720
unless it needs to be free in open

70
00:02:09,598 --> 00:02:11,519
source you need to be able to play

71
00:02:10,720 --> 00:02:13,280
around with this

72
00:02:11,520 --> 00:02:15,200
and understand if it will fit into your

73
00:02:13,280 --> 00:02:18,720
system without purchasing a license

74
00:02:15,200 --> 00:02:18,720
or assigning restrictive ndas

75
00:02:19,200 --> 00:02:22,000
so you'll end up just being able to

76
00:02:20,480 --> 00:02:22,959
click in an accelerator this is the

77
00:02:22,000 --> 00:02:25,280
ideal case

78
00:02:22,959 --> 00:02:26,879
so in order to fit this niche we've

79
00:02:25,280 --> 00:02:28,640
developed black card

80
00:02:26,879 --> 00:02:31,040
we call it a base class for accelerated

81
00:02:28,640 --> 00:02:31,518
socs because we envision people taking

82
00:02:31,040 --> 00:02:33,519
the code

83
00:02:31,519 --> 00:02:34,959
extending it to their own circumstances

84
00:02:33,519 --> 00:02:37,599
and then contributing back

85
00:02:34,959 --> 00:02:38,480
so that other people can reuse it we've

86
00:02:37,599 --> 00:02:39,840
designed the architecture

87
00:02:38,480 --> 00:02:41,840
flexible enough to allow for this

88
00:02:39,840 --> 00:02:45,519
extensibility and we've released the

89
00:02:41,840 --> 00:02:45,519
code under permissive bsd license

90
00:02:46,239 --> 00:02:49,120
but we don't want black card to be the

91
00:02:47,680 --> 00:02:51,440
best score on the market that's not our

92
00:02:49,120 --> 00:02:53,200
goal our highest performance more rather

93
00:02:51,440 --> 00:02:55,200
we want fly car to be small efficient

94
00:02:53,200 --> 00:02:56,480
and obtrusive we want to be

95
00:02:55,200 --> 00:02:57,920
able to go in as many systems as

96
00:02:56,480 --> 00:02:59,518
possible without dominating the

97
00:02:57,920 --> 00:03:01,040
performance or area

98
00:02:59,519 --> 00:03:03,200
restricted performance or dominating the

99
00:03:01,040 --> 00:03:05,840
area

100
00:03:03,200 --> 00:03:07,119
so on our route to you know going global

101
00:03:05,840 --> 00:03:10,080
we measure our progress around

102
00:03:07,120 --> 00:03:11,200
four distinct taxes if quality do people

103
00:03:10,080 --> 00:03:12,879
trust the code

104
00:03:11,200 --> 00:03:16,238
will people be able to uh you know

105
00:03:12,879 --> 00:03:16,239
justify putting into silicon

106
00:03:16,400 --> 00:03:20,000
will people be able to use it everywhere

107
00:03:18,319 --> 00:03:23,760
will it fit into all use cases and be

108
00:03:20,000 --> 00:03:25,280
able to use all accelerators with them

109
00:03:23,760 --> 00:03:26,798
does live parrot have everything that

110
00:03:25,280 --> 00:03:28,560
you need

111
00:03:26,799 --> 00:03:30,319
can't do all the general purpose code

112
00:03:28,560 --> 00:03:32,879
and host all the kind of accelerators

113
00:03:30,319 --> 00:03:35,280
that you want and just as importantly

114
00:03:32,879 --> 00:03:36,879
does it have a minimal set of features

115
00:03:35,280 --> 00:03:39,040
unused functionality in silicon takes up

116
00:03:36,879 --> 00:03:40,319
power and area and most importantly it

117
00:03:39,040 --> 00:03:43,359
adds complexity which increases

118
00:03:40,319 --> 00:03:43,359
verification costs

119
00:03:43,519 --> 00:03:46,720
and lastly is sufficient is it does it

120
00:03:45,519 --> 00:03:47,760
do what you want in the power

121
00:03:46,720 --> 00:03:50,400
performance envelope

122
00:03:47,760 --> 00:03:50,399
that you need

123
00:03:50,959 --> 00:03:53,840
so this is kind of the design principles

124
00:03:52,560 --> 00:03:54,959
that we've come up with for black

125
00:03:53,840 --> 00:03:56,400
pairing

126
00:03:54,959 --> 00:03:58,080
when we try to add a new feature we

127
00:03:56,400 --> 00:03:59,599
consider these three factors

128
00:03:58,080 --> 00:04:01,360
we try to be tiny we want to have a

129
00:03:59,599 --> 00:04:03,119
small code base and small uh

130
00:04:01,360 --> 00:04:04,879
design so that it will fit as many

131
00:04:03,120 --> 00:04:06,159
places as possible and also so that

132
00:04:04,879 --> 00:04:06,879
people can wrap their head around the

133
00:04:06,159 --> 00:04:08,480
code

134
00:04:06,879 --> 00:04:09,920
be able to go into the code base and be

135
00:04:08,480 --> 00:04:12,000
able to find issues

136
00:04:09,920 --> 00:04:13,040
uh without having you know this kind of

137
00:04:12,000 --> 00:04:16,639
overwhelming

138
00:04:13,040 --> 00:04:18,399
part of the uh it's overwhelming code is

139
00:04:16,639 --> 00:04:20,000
we try to reuse open source libraries

140
00:04:18,399 --> 00:04:22,320
like basic stl

141
00:04:20,000 --> 00:04:23,840
google risk idb directly hard flow

142
00:04:22,320 --> 00:04:25,520
things that are well verified and well

143
00:04:23,840 --> 00:04:27,119
documented so that people can

144
00:04:25,520 --> 00:04:29,440
come in with their own experience and be

145
00:04:27,120 --> 00:04:31,199
familiar with the blackberry code is

146
00:04:29,440 --> 00:04:33,199
we also want to be modular we want

147
00:04:31,199 --> 00:04:34,400
people to be able to modify only a small

148
00:04:33,199 --> 00:04:36,080
part of the code

149
00:04:34,400 --> 00:04:37,440
and be able to make their own changes

150
00:04:36,080 --> 00:04:39,280
without having to

151
00:04:37,440 --> 00:04:40,560
verify other parts of the system have

152
00:04:39,280 --> 00:04:43,039
these cascading effects that are

153
00:04:40,560 --> 00:04:45,759
extremely difficult to debug

154
00:04:43,040 --> 00:04:46,479
unless we want to be friendly this kind

155
00:04:45,759 --> 00:04:48,240
of means

156
00:04:46,479 --> 00:04:49,359
you know as engineers want to reinvent

157
00:04:48,240 --> 00:04:50,639
the wheel all the time because it's

158
00:04:49,360 --> 00:04:52,800
super fun

159
00:04:50,639 --> 00:04:53,919
but it makes more sense to reuse

160
00:04:52,800 --> 00:04:55,759
libraries that exist

161
00:04:53,919 --> 00:04:57,198
reuse code and you know avoid

162
00:04:55,759 --> 00:04:59,600
non-vegetarian syndrome as much as

163
00:04:57,199 --> 00:04:59,600
possible

164
00:05:00,240 --> 00:05:03,440
so that's kind of setting up the stage

165
00:05:01,680 --> 00:05:05,600
of why we develop blackberry and what

166
00:05:03,440 --> 00:05:07,600
our design goals and methodologies

167
00:05:05,600 --> 00:05:09,520
now talk about the system architecture

168
00:05:07,600 --> 00:05:10,720
uh kind of this uncore component that

169
00:05:09,520 --> 00:05:14,000
makes it really easy to integrate

170
00:05:10,720 --> 00:05:14,000
accelerator into our system

171
00:05:14,880 --> 00:05:18,479
and i want to note we're not trying to

172
00:05:16,160 --> 00:05:20,000
develop a soc generator

173
00:05:18,479 --> 00:05:22,000
our role here is more to provide a

174
00:05:20,000 --> 00:05:23,919
reference sfc methodology and a bunch of

175
00:05:22,000 --> 00:05:25,360
building blocks that people can use to

176
00:05:23,919 --> 00:05:26,320
plug in their own acceleration for black

177
00:05:25,360 --> 00:05:28,240
cars spc

178
00:05:26,320 --> 00:05:30,639
or integrate black card soc components

179
00:05:28,240 --> 00:05:33,120
into their own systems

180
00:05:30,639 --> 00:05:34,400
so in our system classifier comprises of

181
00:05:33,120 --> 00:05:35,919
three knobs

182
00:05:34,400 --> 00:05:37,198
uh there's what we call the bedrock

183
00:05:35,919 --> 00:05:38,159
network for managing coherence

184
00:05:37,199 --> 00:05:40,080
transactions

185
00:05:38,160 --> 00:05:42,000
the i o network which manages off-ship

186
00:05:40,080 --> 00:05:44,080
communication and the memory network

187
00:05:42,000 --> 00:05:45,600
which manages dram communication

188
00:05:44,080 --> 00:05:47,440
these are all connected via wormhole

189
00:05:45,600 --> 00:05:50,960
routers which are small efficient

190
00:05:47,440 --> 00:05:52,160
and fairly easy to verify and we use

191
00:05:50,960 --> 00:05:53,840
regularized tiles

192
00:05:52,160 --> 00:05:56,960
to make sure that it fits into a normal

193
00:05:53,840 --> 00:05:56,960
hierarchy of a pan foil

194
00:05:58,240 --> 00:06:03,280
so i mentioned bedrock this is our fully

195
00:06:00,960 --> 00:06:04,840
cash coherent multi-core infrastructure

196
00:06:03,280 --> 00:06:06,318
which allows traditional messy type

197
00:06:04,840 --> 00:06:09,599
coherence

198
00:06:06,319 --> 00:06:12,000
using a novel protocol this protocol

199
00:06:09,600 --> 00:06:13,039
develops divides the system into two

200
00:06:12,000 --> 00:06:16,319
components

201
00:06:13,039 --> 00:06:19,680
local cache engines or lcds

202
00:06:16,319 --> 00:06:21,840
cache coherence engines or ccps

203
00:06:19,680 --> 00:06:23,600
the interesting thing about this is that

204
00:06:21,840 --> 00:06:26,239
cces have all the actual

205
00:06:23,600 --> 00:06:28,000
protocol information local cache engines

206
00:06:26,240 --> 00:06:29,840
only respond to very simple messages and

207
00:06:28,000 --> 00:06:31,199
have limited shadow state knowledge of

208
00:06:29,840 --> 00:06:32,638
the entire system

209
00:06:31,199 --> 00:06:34,400
by doing this we can eliminate all

210
00:06:32,639 --> 00:06:38,319
transient states during the protocol

211
00:06:34,400 --> 00:06:38,318
which makes it vastly simpler to verify

212
00:06:40,319 --> 00:06:43,759
so now let's take a look at the sample

213
00:06:42,240 --> 00:06:45,440
blackbird soc this kind of

214
00:06:43,759 --> 00:06:46,720
reference with all the bells and

215
00:06:45,440 --> 00:06:48,319
whistles that you can make with the

216
00:06:46,720 --> 00:06:49,680
bipartite soc

217
00:06:48,319 --> 00:06:51,360
uh it turns out we can separate

218
00:06:49,680 --> 00:06:53,039
blackberry tiles into four distinct

219
00:06:51,360 --> 00:06:55,120
categories

220
00:06:53,039 --> 00:06:57,360
quartiles are the most basic type a

221
00:06:55,120 --> 00:06:58,800
single coherent coordinate multi-core

222
00:06:57,360 --> 00:07:02,800
along with uncore composites needed to

223
00:06:58,800 --> 00:07:04,880
communicate with the rest of the system

224
00:07:02,800 --> 00:07:06,479
streaming accelerator or io tiles do not

225
00:07:04,880 --> 00:07:08,319
catch coherent memory

226
00:07:06,479 --> 00:07:09,840
uh instead they stream data to and from

227
00:07:08,319 --> 00:07:11,759
the core now this could be something

228
00:07:09,840 --> 00:07:14,560
like a gpu or fixed function accelerator

229
00:07:11,759 --> 00:07:16,400
versus the dma

230
00:07:14,560 --> 00:07:17,919
there's also cocurin accelerators which

231
00:07:16,400 --> 00:07:19,520
do uh you know

232
00:07:17,919 --> 00:07:21,280
fine-grained communication between the

233
00:07:19,520 --> 00:07:23,359
core and the accelerator uh

234
00:07:21,280 --> 00:07:24,880
cache computer memory this is useful for

235
00:07:23,360 --> 00:07:26,479
cooperative workloads

236
00:07:24,880 --> 00:07:28,159
uh this is an interesting part of black

237
00:07:26,479 --> 00:07:30,400
parrot because you're able to have

238
00:07:28,160 --> 00:07:31,599
cores and accelerators very fine during

239
00:07:30,400 --> 00:07:33,440
communication

240
00:07:31,599 --> 00:07:36,000
this introduces a whole class of socks

241
00:07:33,440 --> 00:07:38,000
that people should develop

242
00:07:36,000 --> 00:07:39,199
and last we can extend the memory of the

243
00:07:38,000 --> 00:07:40,800
tile

244
00:07:39,199 --> 00:07:42,720
throughout the system rather using l2

245
00:07:40,800 --> 00:07:44,319
extension tiles

246
00:07:42,720 --> 00:07:46,319
extending the distributed l2 and

247
00:07:44,319 --> 00:07:47,199
providing more directory tags at l2

248
00:07:46,319 --> 00:07:48,800
cache

249
00:07:47,199 --> 00:07:50,319
which allows you to change your memory

250
00:07:48,800 --> 00:07:52,720
to compute ratio for a specific

251
00:07:50,319 --> 00:07:54,000
application

252
00:07:52,720 --> 00:07:55,280
now let's zoom into a blackheart

253
00:07:54,000 --> 00:07:58,879
quartile and look at the uncore

254
00:07:55,280 --> 00:08:00,719
components that make it really easy

255
00:07:58,879 --> 00:08:01,919
so quartiles times have everything that

256
00:08:00,720 --> 00:08:03,360
you need

257
00:08:01,919 --> 00:08:06,878
and you'll see a lot of these components

258
00:08:03,360 --> 00:08:06,879
repeated in all the other tile types

259
00:08:07,280 --> 00:08:10,638
these tiles connect with basio steel

260
00:08:09,360 --> 00:08:11,919
wormhole routers

261
00:08:10,639 --> 00:08:13,759
this is leveraging an open source

262
00:08:11,919 --> 00:08:14,639
library we don't maintain code for these

263
00:08:13,759 --> 00:08:16,400
routers

264
00:08:14,639 --> 00:08:18,720
so we're able to keep our code base lean

265
00:08:16,400 --> 00:08:20,239
and narrow

266
00:08:18,720 --> 00:08:21,919
there's also work called concentrators

267
00:08:20,240 --> 00:08:24,720
which allow all the components to talk

268
00:08:21,919 --> 00:08:24,719
through one router

269
00:08:24,800 --> 00:08:28,560
there's a cce which manages directory

270
00:08:26,800 --> 00:08:31,759
tags and the coherence information

271
00:08:28,560 --> 00:08:33,760
for a slice of memory in the system so

272
00:08:31,759 --> 00:08:35,919
all the cores are able to request data

273
00:08:33,760 --> 00:08:38,640
from this one cce which serializes all

274
00:08:35,919 --> 00:08:38,640
the protocols

275
00:08:39,200 --> 00:08:42,640
there's also black cards deeply

276
00:08:40,479 --> 00:08:43,200
integrated l1 caches and distribute l2

277
00:08:42,640 --> 00:08:45,120
cache

278
00:08:43,200 --> 00:08:46,880
which provides fast performance on file

279
00:08:45,120 --> 00:08:48,240
memory

280
00:08:46,880 --> 00:08:50,320
and last is the actual blackberry

281
00:08:48,240 --> 00:08:52,000
corelogic and this is the only custom

282
00:08:50,320 --> 00:08:54,000
logic in the tile everything else here

283
00:08:52,000 --> 00:08:55,600
is reused with other components

284
00:08:54,000 --> 00:08:57,440
uh in fact you know anyone who has their

285
00:08:55,600 --> 00:08:59,040
owner sky software uh please come talk

286
00:08:57,440 --> 00:09:02,560
to me after this we'd love to integrate

287
00:08:59,040 --> 00:09:02,560
more chords into the black parrot family

288
00:09:02,880 --> 00:09:06,000
so now we've looked at the encore

289
00:09:04,080 --> 00:09:07,600
components for a black fairy tile look

290
00:09:06,000 --> 00:09:07,839
at how to compose other tile types in

291
00:09:07,600 --> 00:09:12,320
the

292
00:09:07,839 --> 00:09:14,320
taxonomy l2 extension tiles maintain the

293
00:09:12,320 --> 00:09:16,320
coherence directory tags

294
00:09:14,320 --> 00:09:17,680
with a standard cc but package the rest

295
00:09:16,320 --> 00:09:19,200
of the area with l2 cache

296
00:09:17,680 --> 00:09:21,199
so you basically just rip out the core

297
00:09:19,200 --> 00:09:24,160
but reuse all the rest of the

298
00:09:21,200 --> 00:09:25,680
memory you can use in the title coherent

299
00:09:24,160 --> 00:09:27,760
accelerator tiles

300
00:09:25,680 --> 00:09:29,839
had a standard lcd but a simpler version

301
00:09:27,760 --> 00:09:31,600
of cce which only manages configuration

302
00:09:29,839 --> 00:09:35,120
data scratch pad memory

303
00:09:31,600 --> 00:09:38,399
and local on tile memory that is not

304
00:09:35,120 --> 00:09:38,399
coherent with the rest of the system

305
00:09:38,480 --> 00:09:42,640
streaming accelerator tiles are reused

306
00:09:40,800 --> 00:09:45,920
as a metal cc

307
00:09:42,640 --> 00:09:47,519
uh but have no need for a coherent lcd

308
00:09:45,920 --> 00:09:49,279
instead they communicate over the i o

309
00:09:47,519 --> 00:09:52,560
network or simply stream results back

310
00:09:49,279 --> 00:09:52,560
and forth in the rest of the system

311
00:09:53,200 --> 00:09:56,320
and even among these accelerators

312
00:09:54,640 --> 00:09:57,600
blackberry has several different level

313
00:09:56,320 --> 00:09:59,519
logics

314
00:09:57,600 --> 00:10:01,200
several different levels of integration

315
00:09:59,519 --> 00:10:02,399
project that you can have

316
00:10:01,200 --> 00:10:04,560
because all of the troop occurrence

317
00:10:02,399 --> 00:10:05,920
stays managed by the cc as long as you

318
00:10:04,560 --> 00:10:06,719
have a cc attached to the bedrock

319
00:10:05,920 --> 00:10:09,279
network

320
00:10:06,720 --> 00:10:10,000
you can have lcds that have different

321
00:10:09,279 --> 00:10:12,399
types of

322
00:10:10,000 --> 00:10:13,360
components seamlessly integrated without

323
00:10:12,399 --> 00:10:16,360
having to

324
00:10:13,360 --> 00:10:17,519
write any custom coherence logic

325
00:10:16,360 --> 00:10:19,600
[Music]

326
00:10:17,519 --> 00:10:21,279
for a stream accelerator the system only

327
00:10:19,600 --> 00:10:21,920
or the stream accelerator only needs to

328
00:10:21,279 --> 00:10:24,079
generate

329
00:10:21,920 --> 00:10:25,760
command and response requests which

330
00:10:24,079 --> 00:10:27,839
could be used over any standard memory

331
00:10:25,760 --> 00:10:29,760
protocol

332
00:10:27,839 --> 00:10:31,040
in order to attach coherent accelerator

333
00:10:29,760 --> 00:10:33,680
the designer can reuse

334
00:10:31,040 --> 00:10:36,000
card's lcds and data cache and only have

335
00:10:33,680 --> 00:10:38,079
custom accelerator logic for the actual

336
00:10:36,000 --> 00:10:40,399
uh you know accelerator fixed pump to

337
00:10:38,079 --> 00:10:42,079
modern

338
00:10:40,399 --> 00:10:43,680
if a designer wants more control over

339
00:10:42,079 --> 00:10:45,519
the specification

340
00:10:43,680 --> 00:10:48,000
they're able to use completely custom

341
00:10:45,519 --> 00:10:49,760
cache to reuse blackheart's lce

342
00:10:48,000 --> 00:10:52,880
just reusing this standard cache service

343
00:10:49,760 --> 00:10:54,480
interface that we've designed

344
00:10:52,880 --> 00:10:56,240
and lastly designers are free to

345
00:10:54,480 --> 00:10:58,480
implement full custom accelerators which

346
00:10:56,240 --> 00:11:00,959
obey the simple lce functionality

347
00:10:58,480 --> 00:11:02,720
required by the bedrock protocols this

348
00:11:00,959 --> 00:11:03,920
option offers the most flexibility

349
00:11:02,720 --> 00:11:05,839
but it has to trade off longer

350
00:11:03,920 --> 00:11:07,360
development times

351
00:11:05,839 --> 00:11:09,600
we've developed this to be so modular

352
00:11:07,360 --> 00:11:11,760
however that you can start with your

353
00:11:09,600 --> 00:11:13,600
custom accelerator and standard black

354
00:11:11,760 --> 00:11:15,360
paracords and then one by one

355
00:11:13,600 --> 00:11:16,640
go down the stack and customize to get

356
00:11:15,360 --> 00:11:19,839
the best performance maintain

357
00:11:16,640 --> 00:11:19,839
testability of each step

358
00:11:20,399 --> 00:11:22,959
so now we've looked at the system

359
00:11:21,600 --> 00:11:23,839
architecture we'll dive a little bit

360
00:11:22,959 --> 00:11:26,959
into the

361
00:11:23,839 --> 00:11:27,440
architecture this part of the talk is a

362
00:11:26,959 --> 00:11:29,199
little bit

363
00:11:27,440 --> 00:11:30,800
you know this is the first version of

364
00:11:29,200 --> 00:11:31,839
the blackberry core marker for micro

365
00:11:30,800 --> 00:11:33,120
architecture

366
00:11:31,839 --> 00:11:35,279
because we define this as standard

367
00:11:33,120 --> 00:11:36,959
interfaces you can seamlessly switch in

368
00:11:35,279 --> 00:11:40,240
and out these different core components

369
00:11:36,959 --> 00:11:42,000
without any impact on the system

370
00:11:40,240 --> 00:11:43,279
so the library core itself is a simple

371
00:11:42,000 --> 00:11:47,040
in-order pipeline

372
00:11:43,279 --> 00:11:49,839
uh in stages with full forwarding fpu

373
00:11:47,040 --> 00:11:52,240
and non-blocking not installing uh

374
00:11:49,839 --> 00:11:52,240
backup

375
00:11:53,519 --> 00:11:57,360
interestingly the directory controller

376
00:11:55,519 --> 00:11:58,959
is not a standard fsm based

377
00:11:57,360 --> 00:12:00,720
uh directory controller like you'd find

378
00:11:58,959 --> 00:12:02,079
in most messy based systems

379
00:12:00,720 --> 00:12:03,760
uh we actually have a programmable

380
00:12:02,079 --> 00:12:06,959
caption here in engine

381
00:12:03,760 --> 00:12:07,839
which uses a custom risk isa to add

382
00:12:06,959 --> 00:12:11,920
functionality

383
00:12:07,839 --> 00:12:13,360
after to add functionality

384
00:12:11,920 --> 00:12:15,279
this gives you the flexibility to

385
00:12:13,360 --> 00:12:16,800
program different types of coherence

386
00:12:15,279 --> 00:12:19,519
traffic such as security

387
00:12:16,800 --> 00:12:24,399
functionality and debug information even

388
00:12:19,519 --> 00:12:26,160
after you've taped it out into silicon

389
00:12:24,399 --> 00:12:28,079
and all these building blocks uh like

390
00:12:26,160 --> 00:12:29,760
i've had early on have these standard

391
00:12:28,079 --> 00:12:31,359
latency incentive interfaces

392
00:12:29,760 --> 00:12:33,279
we spend a lot of time making sure these

393
00:12:31,360 --> 00:12:35,040
interfaces are able to have a wide range

394
00:12:33,279 --> 00:12:36,880
of implementations on either side

395
00:12:35,040 --> 00:12:39,040
without impacting the functionality or

396
00:12:36,880 --> 00:12:40,480
timing information of other blocks

397
00:12:39,040 --> 00:12:41,839
this is key to making sure that

398
00:12:40,480 --> 00:12:43,519
blackboard is a scalable development

399
00:12:41,839 --> 00:12:45,519
model and people from all over the world

400
00:12:43,519 --> 00:12:48,880
are able to modify different components

401
00:12:45,519 --> 00:12:48,880
and able to integrate them together

402
00:12:50,160 --> 00:12:52,639
so now we've talked about library's

403
00:12:51,600 --> 00:12:53,519
design philosophy and system

404
00:12:52,639 --> 00:12:54,639
architecture

405
00:12:53,519 --> 00:12:56,399
uh so we'll talk about how we're going

406
00:12:54,639 --> 00:12:58,880
to flock of users and developers around

407
00:12:56,399 --> 00:12:58,880
the project

408
00:12:59,600 --> 00:13:03,360
first we have our modular hardware

409
00:13:01,279 --> 00:13:04,639
compliance testing and this is driven by

410
00:13:03,360 --> 00:13:05,200
the insight that test benches are

411
00:13:04,639 --> 00:13:08,560
expensive

412
00:13:05,200 --> 00:13:10,880
the tests are very invaluable developers

413
00:13:08,560 --> 00:13:13,040
are able to modify small systems of

414
00:13:10,880 --> 00:13:14,560
small components of the system and use

415
00:13:13,040 --> 00:13:15,519
these standard hardware interface

416
00:13:14,560 --> 00:13:17,518
compliance tests

417
00:13:15,519 --> 00:13:19,200
to make sure that their interface or

418
00:13:17,519 --> 00:13:20,720
their information is compliant with the

419
00:13:19,200 --> 00:13:22,480
standard interfaces

420
00:13:20,720 --> 00:13:24,079
this testing structure allows blackberry

421
00:13:22,480 --> 00:13:27,120
to be confidently accessible

422
00:13:24,079 --> 00:13:27,120
robust verification

423
00:13:27,839 --> 00:13:30,720
we're trying to develop blackheart as an

424
00:13:29,360 --> 00:13:32,079
example of community-driven

425
00:13:30,720 --> 00:13:33,279
microarchitecture

426
00:13:32,079 --> 00:13:35,120
just as lance has this global

427
00:13:33,279 --> 00:13:35,519
stewardship and distributed developer

428
00:13:35,120 --> 00:13:37,519
base

429
00:13:35,519 --> 00:13:39,279
we want black period to be directed by

430
00:13:37,519 --> 00:13:40,000
the community rather than controlled by

431
00:13:39,279 --> 00:13:43,519
any single

432
00:13:40,000 --> 00:13:45,440
entity the first method is recognizing

433
00:13:43,519 --> 00:13:46,959
that ideally lifeguard users will become

434
00:13:45,440 --> 00:13:48,480
its developers we want to make it as

435
00:13:46,959 --> 00:13:49,839
easy as possible for someone to go from

436
00:13:48,480 --> 00:13:52,560
downloading blackberry to making their

437
00:13:49,839 --> 00:13:53,760
phone call request first pull request

438
00:13:52,560 --> 00:13:55,040
we don't want people to have to have

439
00:13:53,760 --> 00:13:56,480
intimate architectural knowledge of the

440
00:13:55,040 --> 00:13:58,480
system to improve

441
00:13:56,480 --> 00:14:00,480
uh you know their small area of

442
00:13:58,480 --> 00:14:02,320
expertise if you have a tlb expert you

443
00:14:00,480 --> 00:14:03,519
don't want to have him to him recorder

444
00:14:02,320 --> 00:14:04,880
to understand

445
00:14:03,519 --> 00:14:07,279
need to understand the brand predictor

446
00:14:04,880 --> 00:14:08,880
in order to modify it

447
00:14:07,279 --> 00:14:10,800
second is building a development

448
00:14:08,880 --> 00:14:12,720
infrastructure based on freely available

449
00:14:10,800 --> 00:14:14,319
casuals

450
00:14:12,720 --> 00:14:16,000
this lowers the variable entry so that

451
00:14:14,320 --> 00:14:18,639
hobbyists and researchers are able

452
00:14:16,000 --> 00:14:19,760
to you know get started up and running

453
00:14:18,639 --> 00:14:21,519
the system

454
00:14:19,760 --> 00:14:23,439
and last is focusing on out-of-the-box

455
00:14:21,519 --> 00:14:25,839
experience users should be able to go

456
00:14:23,440 --> 00:14:28,560
from github to simulation or even asic

457
00:14:25,839 --> 00:14:29,920
in only a matter of flips without having

458
00:14:28,560 --> 00:14:32,959
to debug tool chains or install

459
00:14:29,920 --> 00:14:32,959
proprietary software

460
00:14:34,880 --> 00:14:38,160
we've successfully run blackberry on

461
00:14:36,639 --> 00:14:41,040
arctic 7 and

462
00:14:38,160 --> 00:14:42,800
genesis 2 fpgas we're also diligently

463
00:14:41,040 --> 00:14:44,319
working to get blackberry into lightest

464
00:14:42,800 --> 00:14:48,880
which is an fpga

465
00:14:44,320 --> 00:14:51,360
opening open source fpga based

466
00:14:48,880 --> 00:14:52,079
open source python based fpga design

467
00:14:51,360 --> 00:14:54,399
environment

468
00:14:52,079 --> 00:14:55,359
which allows people to have their own

469
00:14:54,399 --> 00:14:56,800
fpga

470
00:14:55,360 --> 00:14:58,480
and all the peripherals accessible by

471
00:14:56,800 --> 00:14:59,839
black parrot but we don't have to

472
00:14:58,480 --> 00:15:01,519
maintain any of the code in our

473
00:14:59,839 --> 00:15:03,279
essential infrastructure

474
00:15:01,519 --> 00:15:04,560
we're very excited for this because you

475
00:15:03,279 --> 00:15:07,120
know we don't want to maintain that

476
00:15:04,560 --> 00:15:08,719
infrastructure but we would love to get

477
00:15:07,120 --> 00:15:11,199
blackberry at the hands of all the fpga

478
00:15:08,720 --> 00:15:11,199
users in the

479
00:15:11,600 --> 00:15:14,959
that world also been taped out in

480
00:15:13,040 --> 00:15:16,880
advanced 12 nanometer process mode with

481
00:15:14,959 --> 00:15:18,880
many more tape huts on the web

482
00:15:16,880 --> 00:15:20,399
this is a process agnostic design which

483
00:15:18,880 --> 00:15:22,880
has been validated in several different

484
00:15:20,399 --> 00:15:22,880
techniques

485
00:15:23,360 --> 00:15:27,440
and not only is black parts rtl open

486
00:15:25,120 --> 00:15:28,320
source we also open source the tape out

487
00:15:27,440 --> 00:15:30,959
directories

488
00:15:28,320 --> 00:15:32,560
that we use for taking out our chips

489
00:15:30,959 --> 00:15:34,160
this is at github.com

490
00:15:32,560 --> 00:15:37,439
backcard examples you can go today and

491
00:15:34,160 --> 00:15:39,360
look at our synthesis scripts

492
00:15:37,440 --> 00:15:40,800
timing constraints different memory

493
00:15:39,360 --> 00:15:43,120
information

494
00:15:40,800 --> 00:15:44,959
and all our flight card takeouts past

495
00:15:43,120 --> 00:15:46,480
the future will be hosting there

496
00:15:44,959 --> 00:15:48,079
we're also hoping that anyone who takes

497
00:15:46,480 --> 00:15:50,079
out black parrot outside of our group

498
00:15:48,079 --> 00:15:50,959
contributes to that repo so we can share

499
00:15:50,079 --> 00:15:53,279
these

500
00:15:50,959 --> 00:15:54,560
insights of how to get a very performant

501
00:15:53,279 --> 00:15:57,759
soc

502
00:15:54,560 --> 00:15:59,518
qrr quality of results

503
00:15:57,759 --> 00:16:00,959
we also participate in the open road cad

504
00:15:59,519 --> 00:16:03,600
flow which is a

505
00:16:00,959 --> 00:16:05,599
free and open source 24 hour push button

506
00:16:03,600 --> 00:16:08,240
cad flow brand new

507
00:16:05,600 --> 00:16:09,199
being developed right now and this

508
00:16:08,240 --> 00:16:11,880
allows for you

509
00:16:09,199 --> 00:16:13,519
using open's open road psg paper and

510
00:16:11,880 --> 00:16:14,880
3pdk45

511
00:16:13,519 --> 00:16:18,000
to push all the way through an open

512
00:16:14,880 --> 00:16:18,000
source cash flow today

513
00:16:20,160 --> 00:16:23,680
this is a picture of uh blackheart

514
00:16:22,079 --> 00:16:25,439
genesis releasing

515
00:16:23,680 --> 00:16:27,040
and we say genesis released because we

516
00:16:25,440 --> 00:16:28,160
view our role as bootstrapping

517
00:16:27,040 --> 00:16:29,279
development

518
00:16:28,160 --> 00:16:31,279
rather than becoming stewards of the

519
00:16:29,279 --> 00:16:32,560
code ourselves permanently

520
00:16:31,279 --> 00:16:34,399
we don't want to elect her over the

521
00:16:32,560 --> 00:16:36,560
fence every six months have people

522
00:16:34,399 --> 00:16:38,880
you know fork it and have it to their

523
00:16:36,560 --> 00:16:40,479
own needs and then never contribute back

524
00:16:38,880 --> 00:16:44,160
and have this kind of central

525
00:16:40,480 --> 00:16:44,160
agreed-upon standard

526
00:16:44,560 --> 00:16:48,000
we want this landslide development model

527
00:16:46,320 --> 00:16:48,880
where everyone works on the same code

528
00:16:48,000 --> 00:16:51,120
base

529
00:16:48,880 --> 00:16:51,120
and

530
00:16:55,519 --> 00:16:58,880
so i presented blackberry the landscape

531
00:16:57,680 --> 00:17:00,239
multicore

532
00:16:58,880 --> 00:17:01,839
silicon validated to ready to be

533
00:17:00,240 --> 00:17:03,279
included as a host core for your next

534
00:17:01,839 --> 00:17:05,120
accelerator project

535
00:17:03,279 --> 00:17:06,720
you want to build up the left user base

536
00:17:05,119 --> 00:17:08,639
please use the explorer break things

537
00:17:06,720 --> 00:17:10,959
crazy issues pull requests

538
00:17:08,640 --> 00:17:12,480
um we're looking for a particular help

539
00:17:10,959 --> 00:17:14,079
with reporting benchmarks we need a lot

540
00:17:12,480 --> 00:17:16,959
of help on the software side just

541
00:17:14,079 --> 00:17:19,198
you know person power and importing the

542
00:17:16,959 --> 00:17:20,640
various fpgas

543
00:17:19,199 --> 00:17:22,559
different development environments are

544
00:17:20,640 --> 00:17:22,959
interesting to us we love to see bugs

545
00:17:22,559 --> 00:17:25,280
for

546
00:17:22,959 --> 00:17:26,880
i'm trying to debug us a new one to 14

547
00:17:25,280 --> 00:17:28,960
point and

548
00:17:26,880 --> 00:17:30,559
we're also looking to uh integrate black

549
00:17:28,960 --> 00:17:32,000
pair with any novel accelerator system

550
00:17:30,559 --> 00:17:34,399
that you have

551
00:17:32,000 --> 00:17:36,640
so together please come talk to me if

552
00:17:34,400 --> 00:17:38,160
you're interested in working with us

553
00:17:36,640 --> 00:17:41,280
we can make lifetime the global default

554
00:17:38,160 --> 00:17:47,840
choice for risk pivot boards

555
00:17:41,280 --> 00:17:47,840
so thank you

556
00:17:56,160 --> 00:18:00,080
how many contributors have you got

557
00:17:58,720 --> 00:18:03,200
outside of

558
00:18:00,080 --> 00:18:04,639
the two universities you have to repeat

559
00:18:03,200 --> 00:18:06,160
it because we don't have those

560
00:18:04,640 --> 00:18:09,120
questions the question was how many two

561
00:18:06,160 --> 00:18:09,120
years have we had outside

562
00:18:09,600 --> 00:18:14,879
so blackbirds uh kind of developed

563
00:18:12,240 --> 00:18:16,320
collaboratively with patient best deal

564
00:18:14,880 --> 00:18:18,559
we have many outside contributors to

565
00:18:16,320 --> 00:18:19,760
facebook stl and we've had issues that

566
00:18:18,559 --> 00:18:21,678
have been raised in black cards have

567
00:18:19,760 --> 00:18:23,120
been fixed there

568
00:18:21,679 --> 00:18:28,160
blackfire itself we're trying to build

569
00:18:23,120 --> 00:18:30,959
up this community more so

570
00:18:28,160 --> 00:18:30,960
any other questions

571
00:18:32,160 --> 00:18:40,480
thank you

