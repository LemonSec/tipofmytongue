1
00:00:05,839 --> 00:00:07,839
okay

2
00:00:06,319 --> 00:00:09,200
next step we've got the courier soda

3
00:00:07,839 --> 00:00:12,639
it's going to be talking about lazy

4
00:00:09,200 --> 00:00:15,678
distribution of container images

5
00:00:12,639 --> 00:00:16,640
hi i'm akira from ngk corporation i'm a

6
00:00:15,679 --> 00:00:19,119
manager of

7
00:00:16,640 --> 00:00:20,560
conscienti and er moby and robbie

8
00:00:19,119 --> 00:00:22,320
birkitch

9
00:00:20,560 --> 00:00:23,599
in this work i will show how to run

10
00:00:22,320 --> 00:00:26,640
containers

11
00:00:23,600 --> 00:00:28,400
without awaking for completion of

12
00:00:26,640 --> 00:00:30,640
downloading the images

13
00:00:28,400 --> 00:00:32,719
and there are lots of uh alternative

14
00:00:30,640 --> 00:00:33,760
image formats are proposed to support uh

15
00:00:32,719 --> 00:00:36,000
this uh

16
00:00:33,760 --> 00:00:37,280
razer distribution technology and ammo

17
00:00:36,000 --> 00:00:39,920
gross amounts

18
00:00:37,280 --> 00:00:40,800
uh this format uh strategies is getting

19
00:00:39,920 --> 00:00:43,040
wider option

20
00:00:40,800 --> 00:00:46,078
and it's already adapted by a country

21
00:00:43,040 --> 00:00:49,200
and also apothema

22
00:00:46,079 --> 00:00:51,680
let's start with the demo uh in this

23
00:00:49,200 --> 00:00:58,000
demo i will show a resin distribution of

24
00:00:51,680 --> 00:01:01,280
docker ios driver python 3.7 image

25
00:00:58,000 --> 00:01:02,000
uh so the top uh pen is for legacy and

26
00:01:01,280 --> 00:01:05,920
the bottom

27
00:01:02,000 --> 00:01:09,119
is for studies and in this demo i'm uh

28
00:01:05,920 --> 00:01:12,479
showing a python with uh just

29
00:01:09,119 --> 00:01:16,240
the print hello world and the strategies

30
00:01:12,479 --> 00:01:20,000
sergey's image just took 5.2 seconds

31
00:01:16,240 --> 00:01:23,600
for a downloading image and executing a

32
00:01:20,000 --> 00:01:27,040
print hello world but realistic format

33
00:01:23,600 --> 00:01:30,079
takes more time it's still taking time

34
00:01:27,040 --> 00:01:32,880
so it took 26.5 seconds

35
00:01:30,079 --> 00:01:33,439
and so the circuit format is five times

36
00:01:32,880 --> 00:01:35,920
faster

37
00:01:33,439 --> 00:01:40,559
compared to the reality format for uh

38
00:01:35,920 --> 00:01:42,880
bringing hello world

39
00:01:40,560 --> 00:01:44,399
so let's look into the problems of the

40
00:01:42,880 --> 00:01:46,240
current docker and australia image

41
00:01:44,399 --> 00:01:48,079
format

42
00:01:46,240 --> 00:01:49,679
uh most of country implementations

43
00:01:48,079 --> 00:01:52,240
including docker mobi

44
00:01:49,680 --> 00:01:53,920
protoman and contrary and cryo and even

45
00:01:52,240 --> 00:01:57,600
singularity chromos chromosome

46
00:01:53,920 --> 00:02:00,799
oci standard format it's ocs standard

47
00:01:57,600 --> 00:02:01,919
is based on the relative image format uh

48
00:02:00,799 --> 00:02:04,240
so the uh

49
00:02:01,920 --> 00:02:06,000
the joke and oca focuses on the legacy

50
00:02:04,240 --> 00:02:10,399
compatibility rather than

51
00:02:06,000 --> 00:02:10,399
uh making a technical innovations

52
00:02:10,560 --> 00:02:14,640
so the biggest problem is that it's

53
00:02:13,120 --> 00:02:19,280
based on a

54
00:02:14,640 --> 00:02:22,640
term format uh appeared in 1970s

55
00:02:19,280 --> 00:02:25,840
originally for a magnetic table media

56
00:02:22,640 --> 00:02:30,799
the magnetic media is shown here

57
00:02:25,840 --> 00:02:34,480
search for what cycles are taped media

58
00:02:30,800 --> 00:02:38,239
this is a pdp enable mini computer

59
00:02:34,480 --> 00:02:42,000
so the tape archive doesn't support

60
00:02:38,239 --> 00:02:44,480
random access for the obvious reason

61
00:02:42,000 --> 00:02:46,800
so this is not good fit for file system

62
00:02:44,480 --> 00:02:50,238
images

63
00:02:46,800 --> 00:02:53,280
so the typical archive is

64
00:02:50,239 --> 00:02:55,360
composed like this uh so you have a

65
00:02:53,280 --> 00:02:56,879
metadata who is a first fire at the

66
00:02:55,360 --> 00:03:00,000
beginning of the archive

67
00:02:56,879 --> 00:03:02,560
and the second file for us

68
00:03:00,000 --> 00:03:03,280
so to mount this archive as a file

69
00:03:02,560 --> 00:03:06,720
system

70
00:03:03,280 --> 00:03:09,280
and you need to scan the l for a virtual

71
00:03:06,720 --> 00:03:12,879
magnetic tip

72
00:03:09,280 --> 00:03:16,800
if we could have an external index file

73
00:03:12,879 --> 00:03:18,959
we can mount this as a file system

74
00:03:16,800 --> 00:03:20,480
but this doesn't work for a compressor

75
00:03:18,959 --> 00:03:24,879
archive because

76
00:03:20,480 --> 00:03:24,879
zip doesn't support a thick operation

77
00:03:25,360 --> 00:03:29,760
and the second program is a terrible

78
00:03:27,360 --> 00:03:32,640
dozen support data application

79
00:03:29,760 --> 00:03:34,079
so the control registry may contain uh

80
00:03:32,640 --> 00:03:37,518
very similar but

81
00:03:34,080 --> 00:03:40,480
slightly different images uh

82
00:03:37,519 --> 00:03:42,239
with different versions or with

83
00:03:40,480 --> 00:03:44,399
different cpu architectures

84
00:03:42,239 --> 00:03:46,640
or with different computational files

85
00:03:44,400 --> 00:03:48,959
and there's less edc

86
00:03:46,640 --> 00:03:49,920
so the tables of this image are very

87
00:03:48,959 --> 00:03:53,360
likely to raise

88
00:03:49,920 --> 00:03:55,280
the stress but this is not a huge deal

89
00:03:53,360 --> 00:03:56,799
when you have enough budget for the

90
00:03:55,280 --> 00:04:00,799
cloud series that is used

91
00:03:56,799 --> 00:04:04,319
as a background of the registry

92
00:04:00,799 --> 00:04:06,959
uh so the most important issue is

93
00:04:04,319 --> 00:04:07,518
that the turbo requires scanning the

94
00:04:06,959 --> 00:04:10,000
whole

95
00:04:07,519 --> 00:04:11,040
partial magnetic tip for mounting as

96
00:04:10,000 --> 00:04:13,519
multi-user

97
00:04:11,040 --> 00:04:14,159
archive as a file system uh so

98
00:04:13,519 --> 00:04:17,519
industrial

99
00:04:14,159 --> 00:04:20,959
uh i focus this issue

100
00:04:17,519 --> 00:04:23,280
for the arrest distribution so why do

101
00:04:20,959 --> 00:04:26,400
you want a resident distribution

102
00:04:23,280 --> 00:04:29,359
there's already a good scientific paper

103
00:04:26,400 --> 00:04:29,840
about this so according to this paper uh

104
00:04:29,360 --> 00:04:32,560
only

105
00:04:29,840 --> 00:04:34,560
six point four six point four percent of

106
00:04:32,560 --> 00:04:36,800
the data is actually used

107
00:04:34,560 --> 00:04:38,080
and more than and ninety percent are

108
00:04:36,800 --> 00:04:41,600
just a waste

109
00:04:38,080 --> 00:04:44,639
of actual workload uh here are

110
00:04:41,600 --> 00:04:46,000
some expected use cases of razer

111
00:04:44,639 --> 00:04:49,600
distribution

112
00:04:46,000 --> 00:04:52,720
so the rest distribution is the

113
00:04:49,600 --> 00:04:53,840
most good for sdk images are used in

114
00:04:52,720 --> 00:04:56,639
docker file

115
00:04:53,840 --> 00:04:58,239
so the sdk used images in the dockerfile

116
00:04:56,639 --> 00:05:00,320
contains

117
00:04:58,240 --> 00:05:01,680
some compilers and some libraries and

118
00:05:00,320 --> 00:05:04,159
some header files

119
00:05:01,680 --> 00:05:06,160
but most of these hedges and libraries

120
00:05:04,160 --> 00:05:10,160
are not actually used

121
00:05:06,160 --> 00:05:13,280
for actual compilation and

122
00:05:10,160 --> 00:05:14,400
also uh for uh local fires uh we don't

123
00:05:13,280 --> 00:05:17,119
need to consider

124
00:05:14,400 --> 00:05:18,000
uh ford's tolerance against uh wrestling

125
00:05:17,120 --> 00:05:20,560
failures

126
00:05:18,000 --> 00:05:21,280
uh because uh docker built is already

127
00:05:20,560 --> 00:05:23,280
freaky

128
00:05:21,280 --> 00:05:25,039
as the whole absolute install some

129
00:05:23,280 --> 00:05:28,080
practice open phase

130
00:05:25,039 --> 00:05:28,960
with some http error so you don't need

131
00:05:28,080 --> 00:05:33,198
to consider

132
00:05:28,960 --> 00:05:33,198
for tolerance obviously failures

133
00:05:34,160 --> 00:05:38,720
there is also a good use cases such as a

134
00:05:37,600 --> 00:05:41,440
function as a service

135
00:05:38,720 --> 00:05:42,800
because for function as a service the

136
00:05:41,440 --> 00:05:45,840
search up latency

137
00:05:42,800 --> 00:05:47,199
is very important and we can also use

138
00:05:45,840 --> 00:05:50,320
the laser distribution for

139
00:05:47,199 --> 00:05:53,919
web applications with a huge number of

140
00:05:50,320 --> 00:05:56,880
html files and graphic files

141
00:05:53,919 --> 00:05:57,599
and it's also good for uh jupyter

142
00:05:56,880 --> 00:06:00,319
notebooks

143
00:05:57,600 --> 00:06:00,639
with big data samples and also we can

144
00:06:00,319 --> 00:06:03,680
use

145
00:06:00,639 --> 00:06:06,800
the whole ground kde desktop

146
00:06:03,680 --> 00:06:09,039
in a container so maybe just real with

147
00:06:06,800 --> 00:06:10,960
the ear orbs uh contourized linux

148
00:06:09,039 --> 00:06:14,159
desktop

149
00:06:10,960 --> 00:06:16,560
but for these use cases uh probably uh

150
00:06:14,160 --> 00:06:19,840
we need to consider a full tutorial

151
00:06:16,560 --> 00:06:21,280
until the image is 100 percent chest

152
00:06:19,840 --> 00:06:24,880
locally

153
00:06:21,280 --> 00:06:29,359
you can use kubernetes readiness proof

154
00:06:24,880 --> 00:06:29,360
for inspecting the status

155
00:06:29,840 --> 00:06:36,400
and so three years ago

156
00:06:33,039 --> 00:06:38,240
we did a first attempt

157
00:06:36,400 --> 00:06:40,560
but it failed so i will show it as a

158
00:06:38,240 --> 00:06:43,680
postmodern story

159
00:06:40,560 --> 00:06:46,400
so our first attempt was that a

160
00:06:43,680 --> 00:06:48,400
fire grain which i show in open source

161
00:06:46,400 --> 00:06:51,198
summit in north america

162
00:06:48,400 --> 00:06:51,840
it was composed of a protobuffer index

163
00:06:51,199 --> 00:06:55,120
file

164
00:06:51,840 --> 00:06:59,198
and contact addressable small profiles

165
00:06:55,120 --> 00:07:02,400
like this so this protocol message

166
00:06:59,199 --> 00:07:05,360
contains a chart256 digest

167
00:07:02,400 --> 00:07:07,599
for each of fives and each of what are

168
00:07:05,360 --> 00:07:10,800
content addressable by the uh

169
00:07:07,599 --> 00:07:10,800
two five six digest

170
00:07:11,039 --> 00:07:14,880
but this five way information become

171
00:07:14,160 --> 00:07:17,759
popular

172
00:07:14,880 --> 00:07:18,639
because of income incompatibility with

173
00:07:17,759 --> 00:07:21,360
legacy

174
00:07:18,639 --> 00:07:21,759
terrible and there is also a checking

175
00:07:21,360 --> 00:07:23,919
and

176
00:07:21,759 --> 00:07:24,880
equation so it's hard to finalize the

177
00:07:23,919 --> 00:07:27,120
spec when

178
00:07:24,880 --> 00:07:28,000
no implementation exists and it's also

179
00:07:27,120 --> 00:07:30,240
hard to promote

180
00:07:28,000 --> 00:07:31,680
implementation when the speech is not

181
00:07:30,240 --> 00:07:34,000
finalized

182
00:07:31,680 --> 00:07:35,280
and also we didn't criticize the use

183
00:07:34,000 --> 00:07:37,919
case so

184
00:07:35,280 --> 00:07:39,119
we too much focus on the application but

185
00:07:37,919 --> 00:07:42,400
the application

186
00:07:39,120 --> 00:07:44,720
appeared not so important

187
00:07:42,400 --> 00:07:45,520
there was also a huge performance

188
00:07:44,720 --> 00:07:48,720
overhead

189
00:07:45,520 --> 00:07:51,280
because of the number of small http

190
00:07:48,720 --> 00:07:51,280
requests

191
00:07:51,440 --> 00:07:58,479
so the new solution in in

192
00:07:54,479 --> 00:08:01,680
this year is studies the strategies

193
00:07:58,479 --> 00:08:04,400
format is proposed by brad fitzpatrick

194
00:08:01,680 --> 00:08:04,879
at google uh mostly for accelerating the

195
00:08:04,400 --> 00:08:07,520
ci

196
00:08:04,879 --> 00:08:10,080
of the go language project and it

197
00:08:07,520 --> 00:08:13,520
doesn't focus on data duplication

198
00:08:10,080 --> 00:08:16,560
it only works on a lazy distribution

199
00:08:13,520 --> 00:08:17,039
the circus format is uh fully compatible

200
00:08:16,560 --> 00:08:20,160
with

201
00:08:17,039 --> 00:08:22,240
legacy turbo format but

202
00:08:20,160 --> 00:08:24,960
strategically different so that in the

203
00:08:22,240 --> 00:08:28,080
legacy star home the entire

204
00:08:24,960 --> 00:08:31,359
archive is jiji but the first thing is

205
00:08:28,080 --> 00:08:33,838
each of five is uh gg

206
00:08:31,360 --> 00:08:35,919
so the uh the compression granularity is

207
00:08:33,839 --> 00:08:41,039
different

208
00:08:35,919 --> 00:08:43,000
and also we have uh strategies dot index

209
00:08:41,039 --> 00:08:44,640
at the end of the archive this

210
00:08:43,000 --> 00:08:48,480
index.json has

211
00:08:44,640 --> 00:08:52,480
all metadata for the all files in the

212
00:08:48,480 --> 00:08:55,279
archive so we only need

213
00:08:52,480 --> 00:08:56,080
this studies dot index suggestion for

214
00:08:55,279 --> 00:08:58,800
mounting this

215
00:08:56,080 --> 00:08:59,680
image and actual files in archive can be

216
00:08:58,800 --> 00:09:04,560
uh fetched

217
00:08:59,680 --> 00:09:04,560
on demand using http range requests

218
00:09:05,200 --> 00:09:11,440
and the strategies is being adopted

219
00:09:08,240 --> 00:09:12,480
by severe congenital times including uh

220
00:09:11,440 --> 00:09:15,839
continuity

221
00:09:12,480 --> 00:09:19,200
and the protoman for quantity uh my

222
00:09:15,839 --> 00:09:21,600
current kohei token entity implemented

223
00:09:19,200 --> 00:09:22,800
this as a contingency substitute

224
00:09:21,600 --> 00:09:25,760
programming

225
00:09:22,800 --> 00:09:27,920
and continuity implementation has more

226
00:09:25,760 --> 00:09:30,720
aggressive optimization

227
00:09:27,920 --> 00:09:31,360
uh proportional joseph scribner at red

228
00:09:30,720 --> 00:09:34,160
hat

229
00:09:31,360 --> 00:09:35,120
is working on a future overlay with

230
00:09:34,160 --> 00:09:39,839
programming

231
00:09:35,120 --> 00:09:42,240
for supporting strategies in portman

232
00:09:39,839 --> 00:09:45,120
and for continuing implementation we

233
00:09:42,240 --> 00:09:47,920
have some optimization technology

234
00:09:45,120 --> 00:09:48,720
so we profile actual file access

235
00:09:47,920 --> 00:09:52,399
patterns

236
00:09:48,720 --> 00:09:54,720
by running an equivalent of yokara

237
00:09:52,399 --> 00:09:56,160
and we review the file entries in the

238
00:09:54,720 --> 00:09:58,560
archive so that

239
00:09:56,160 --> 00:10:00,240
relevant files can be privileged in a

240
00:09:58,560 --> 00:10:03,199
single http request

241
00:10:00,240 --> 00:10:04,240
so in this example we have a slash

242
00:10:03,200 --> 00:10:06,880
apb.pi

243
00:10:04,240 --> 00:10:07,519
as entry point uh so apparently uh we

244
00:10:06,880 --> 00:10:10,640
need uh

245
00:10:07,519 --> 00:10:14,640
this python file so we put this file

246
00:10:10,640 --> 00:10:17,040
at the head of the archive

247
00:10:14,640 --> 00:10:18,959
and we also need a python interpreter

248
00:10:17,040 --> 00:10:21,599
uses recipients responsible three

249
00:10:18,959 --> 00:10:23,760
and this parser interpreter requires

250
00:10:21,600 --> 00:10:27,360
thrust ribs thrust ribosomes through

251
00:10:23,760 --> 00:10:29,439
and also we need some python modules

252
00:10:27,360 --> 00:10:30,640
and say use the slash lipstick python

253
00:10:29,440 --> 00:10:33,600
three thresh

254
00:10:30,640 --> 00:10:34,560
uh blah blah but we don't need or

255
00:10:33,600 --> 00:10:37,600
personal archive

256
00:10:34,560 --> 00:10:40,880
so we only prefer uh

257
00:10:37,600 --> 00:10:41,920
python modules that uh really we really

258
00:10:40,880 --> 00:10:45,439
need for absolute

259
00:10:41,920 --> 00:10:50,000
buy and we prefetch

260
00:10:45,440 --> 00:10:53,120
these red files in a single http request

261
00:10:50,000 --> 00:10:56,720
currently uh we need to

262
00:10:53,120 --> 00:10:59,920
do equivalent object for

263
00:10:56,720 --> 00:11:00,959
getting file access patterns but in

264
00:10:59,920 --> 00:11:03,920
future maybe

265
00:11:00,959 --> 00:11:04,719
we can do some static analysis using led

266
00:11:03,920 --> 00:11:06,719
commands

267
00:11:04,720 --> 00:11:09,279
or maybe some machine learning

268
00:11:06,720 --> 00:11:12,399
technology

269
00:11:09,279 --> 00:11:16,240
and here are some benchmark results

270
00:11:12,399 --> 00:11:19,040
using a druka hub and

271
00:11:16,240 --> 00:11:21,440
the contrary host was rotated on

272
00:11:19,040 --> 00:11:25,040
easy-to-orbit leisure

273
00:11:21,440 --> 00:11:26,079
and for benchmark we used typical based

274
00:11:25,040 --> 00:11:29,439
images

275
00:11:26,079 --> 00:11:33,199
with a compiled hello world like

276
00:11:29,440 --> 00:11:38,079
workload so who's a python

277
00:11:33,200 --> 00:11:38,079
the legacy image uh took more than

278
00:11:39,120 --> 00:11:45,440
26 seconds and strategies

279
00:11:42,240 --> 00:11:46,240
image just need about five seconds so

280
00:11:45,440 --> 00:11:50,480
it's

281
00:11:46,240 --> 00:11:54,240
five times faster the result was

282
00:11:50,480 --> 00:11:54,240
similar for ccc image

283
00:11:55,600 --> 00:11:59,040
also the result was similar for a

284
00:11:58,399 --> 00:12:01,440
quarant

285
00:11:59,040 --> 00:12:01,439
image

286
00:12:02,320 --> 00:12:08,800
for grass switch image the result was

287
00:12:05,680 --> 00:12:12,560
slightly different so the legacy image

288
00:12:08,800 --> 00:12:15,599
took about 25 seconds

289
00:12:12,560 --> 00:12:18,399
but the circuits with without

290
00:12:15,600 --> 00:12:22,000
optimization is not so fast

291
00:12:18,399 --> 00:12:25,760
but with optimization the stargaze image

292
00:12:22,000 --> 00:12:28,160
becomes much faster so it's about

293
00:12:25,760 --> 00:12:31,600
12 seconds so it's two times faster

294
00:12:28,160 --> 00:12:31,600
compared to the legacy format

295
00:12:33,600 --> 00:12:38,320
and we are planning to do much more

296
00:12:36,880 --> 00:12:41,040
optimizations

297
00:12:38,320 --> 00:12:41,839
soon for implementation we are planning

298
00:12:41,040 --> 00:12:45,199
to

299
00:12:41,839 --> 00:12:48,639
parallelize http operations across

300
00:12:45,200 --> 00:12:49,680
images this was hard because of the

301
00:12:48,639 --> 00:12:52,000
design gap

302
00:12:49,680 --> 00:12:53,199
in quantitative programming design but i

303
00:12:52,000 --> 00:12:56,560
think we can

304
00:12:53,200 --> 00:12:58,880
improve in the uh coming weeks

305
00:12:56,560 --> 00:13:00,000
and for specifications uh we are

306
00:12:58,880 --> 00:13:04,000
planning to use

307
00:13:00,000 --> 00:13:07,680
a z-std compression format instead of

308
00:13:04,000 --> 00:13:11,279
z-dip this was proposed by giuseppe

309
00:13:07,680 --> 00:13:15,359
for mostly for images with a lot of

310
00:13:11,279 --> 00:13:17,920
small files so using the std

311
00:13:15,360 --> 00:13:19,399
is not compatible with the current oci

312
00:13:17,920 --> 00:13:22,479
immediate browser

313
00:13:19,399 --> 00:13:25,279
1.0.1 but the next

314
00:13:22,480 --> 00:13:26,320
revision of oci image spec is likely to

315
00:13:25,279 --> 00:13:29,760
support

316
00:13:26,320 --> 00:13:32,079
the std as a compression format so

317
00:13:29,760 --> 00:13:32,800
this is compatible with the next version

318
00:13:32,079 --> 00:13:35,839
of the

319
00:13:32,800 --> 00:13:35,839
oceanic spec

320
00:13:36,959 --> 00:13:40,239
and we are also planning to integrate

321
00:13:38,959 --> 00:13:43,518
strategies into

322
00:13:40,240 --> 00:13:47,120
a building and

323
00:13:43,519 --> 00:13:50,000
we we plan to support producing

324
00:13:47,120 --> 00:13:51,519
surges images using build kit and also

325
00:13:50,000 --> 00:13:54,639
we will support

326
00:13:51,519 --> 00:13:57,440
uh consuming surges images as

327
00:13:54,639 --> 00:13:59,040
a base images of docker files that

328
00:13:57,440 --> 00:14:03,839
appears in

329
00:13:59,040 --> 00:14:03,839
from instructions of dockerfiles

330
00:14:05,199 --> 00:14:09,760
and also there are other alternative

331
00:14:08,240 --> 00:14:12,959
formats that supports

332
00:14:09,760 --> 00:14:13,439
raise distribution for example a certain

333
00:14:12,959 --> 00:14:16,719
brain

334
00:14:13,440 --> 00:14:19,279
influence is already widely deployed

335
00:14:16,720 --> 00:14:21,199
in certain and easier friends

336
00:14:19,279 --> 00:14:23,519
environments

337
00:14:21,199 --> 00:14:24,560
but the thromboembellish format is not

338
00:14:23,519 --> 00:14:27,600
compatible

339
00:14:24,560 --> 00:14:30,319
with legacy oci tables

340
00:14:27,600 --> 00:14:32,399
and there's already implementation for

341
00:14:30,320 --> 00:14:34,800
continuity

342
00:14:32,399 --> 00:14:35,920
and there's also a proposal for

343
00:14:34,800 --> 00:14:39,279
professor of

344
00:14:35,920 --> 00:14:41,680
what is called oci version 2

345
00:14:39,279 --> 00:14:42,560
and this is proposed by alexa at suse

346
00:14:41,680 --> 00:14:46,560
but this is

347
00:14:42,560 --> 00:14:48,959
not official oci format at this moment

348
00:14:46,560 --> 00:14:50,880
and it's also not compatible with uh oca

349
00:14:48,959 --> 00:14:52,719
browser one tables

350
00:14:50,880 --> 00:14:54,399
and the russell version two uh will

351
00:14:52,720 --> 00:14:57,360
focus on data publication

352
00:14:54,399 --> 00:14:58,800
using rustic algorithm so it's a very

353
00:14:57,360 --> 00:15:01,839
different from

354
00:14:58,800 --> 00:15:04,760
studies format and there's already a

355
00:15:01,839 --> 00:15:06,079
work in progress implementation for uh

356
00:15:04,760 --> 00:15:09,279
um

357
00:15:06,079 --> 00:15:10,880
image manipulation too but as far as i

358
00:15:09,279 --> 00:15:14,079
know there is no runtime

359
00:15:10,880 --> 00:15:17,199
implementation exists for this uh

360
00:15:14,079 --> 00:15:17,199
oci version 2.

361
00:15:18,800 --> 00:15:23,839
and there is also ipscs proposed by

362
00:15:22,000 --> 00:15:27,839
eduardi at natoprix

363
00:15:23,839 --> 00:15:31,440
the ipcs format is built on ipfs

364
00:15:27,839 --> 00:15:34,800
which is a p2p uh

365
00:15:31,440 --> 00:15:38,320
p2p stress this is not compatible

366
00:15:34,800 --> 00:15:40,800
with oca troubles but we already have

367
00:15:38,320 --> 00:15:44,320
implementation for continuity

368
00:15:40,800 --> 00:15:46,880
and also microsoft azure built

369
00:15:44,320 --> 00:15:49,279
something similar using assembly

370
00:15:46,880 --> 00:15:52,720
protocol and busy images

371
00:15:49,279 --> 00:15:55,839
but this project is not a free software

372
00:15:52,720 --> 00:15:58,480
at this moment

373
00:15:55,839 --> 00:15:59,199
so to recap my talk there are lots of

374
00:15:58,480 --> 00:16:00,880
alternative

375
00:15:59,199 --> 00:16:03,040
alternative image formats appropriate

376
00:16:00,880 --> 00:16:07,199
for resin distribution

377
00:16:03,040 --> 00:16:10,639
but compatibility is very important

378
00:16:07,199 --> 00:16:13,680
and surges is getting wider adoption

379
00:16:10,639 --> 00:16:15,920
it's uncomfortable with legacy or cmss

380
00:16:13,680 --> 00:16:17,040
and it's already adopted by country and

381
00:16:15,920 --> 00:16:19,360
also by

382
00:16:17,040 --> 00:16:20,399
cutting them and for contributing

383
00:16:19,360 --> 00:16:25,839
implementation

384
00:16:20,399 --> 00:16:28,880
we support uh prefetching optimization

385
00:16:25,839 --> 00:16:31,920
so our implementation is available at

386
00:16:28,880 --> 00:16:34,320
this github repo this is currently under

387
00:16:31,920 --> 00:16:36,000
my colleagues early double account but

388
00:16:34,320 --> 00:16:39,839
this is expected to be moved

389
00:16:36,000 --> 00:16:42,800
under the documentary contrary soon

390
00:16:39,839 --> 00:16:43,519
and we requested for comments such as

391
00:16:42,800 --> 00:16:46,800
building

392
00:16:43,519 --> 00:16:50,000
imperative use cases and how

393
00:16:46,800 --> 00:16:51,859
we can do more efficient optimization

394
00:16:50,000 --> 00:17:01,490
thanks

395
00:16:51,860 --> 00:17:01,490
[Applause]

396
00:17:02,839 --> 00:17:05,839
questions

397
00:17:09,839 --> 00:17:16,480
hi thank you for the talk um is it

398
00:17:13,199 --> 00:17:18,400
do i understand correctly that only the

399
00:17:16,480 --> 00:17:21,839
needed files will be downloaded

400
00:17:18,400 --> 00:17:24,559
sorry uh just speak largely um

401
00:17:21,839 --> 00:17:27,119
do i understand correctly that only the

402
00:17:24,559 --> 00:17:29,360
needed files will be downloaded so not

403
00:17:27,119 --> 00:17:32,080
the full image will be downloaded

404
00:17:29,360 --> 00:17:32,879
on the oh yeah so that pro image is

405
00:17:32,080 --> 00:17:36,480
downloaded

406
00:17:32,880 --> 00:17:40,480
only uh files that are actually accessed

407
00:17:36,480 --> 00:17:40,480
is downloaded okay cool

408
00:17:41,840 --> 00:17:48,799
other questions

409
00:17:46,400 --> 00:17:48,799
oh no

410
00:17:51,200 --> 00:17:56,960
i didn't understood if it is already

411
00:17:54,160 --> 00:17:59,679
integrated with build kit or not

412
00:17:56,960 --> 00:18:00,400
uh so not integrated into uh we are

413
00:17:59,679 --> 00:18:03,679
planning

414
00:18:00,400 --> 00:18:06,700
uh sir please stay tuned

415
00:18:03,679 --> 00:18:08,400
so please wait

416
00:18:06,700 --> 00:18:12,720
[Music]

417
00:18:08,400 --> 00:18:14,960
oh yeah so who creates the stargaze

418
00:18:12,720 --> 00:18:15,919
index.json file and how many container

419
00:18:14,960 --> 00:18:19,679
images and

420
00:18:15,919 --> 00:18:22,160
any given json what the stargaze.json

421
00:18:19,679 --> 00:18:23,760
index file who creates that the buildkit

422
00:18:22,160 --> 00:18:26,960
tool

423
00:18:23,760 --> 00:18:27,600
uh currently uh we have some converter

424
00:18:26,960 --> 00:18:31,600
tool

425
00:18:27,600 --> 00:18:34,879
uh in our uh repository uh so please uh

426
00:18:31,600 --> 00:18:34,879
see uh

427
00:18:36,080 --> 00:18:40,879
we have some converter commands in this

428
00:18:39,120 --> 00:18:42,399
repo so when you say white adoption i

429
00:18:40,880 --> 00:18:43,679
just want to know percentage of images

430
00:18:42,400 --> 00:18:46,720
that have the stargaze

431
00:18:43,679 --> 00:18:49,840
json file already today uh

432
00:18:46,720 --> 00:18:52,160
so the json file is generated by the uh

433
00:18:49,840 --> 00:18:52,959
converter tool in this repo uh does that

434
00:18:52,160 --> 00:18:55,520
answer your question

435
00:18:52,960 --> 00:18:56,000
and last question any any distribution

436
00:18:55,520 --> 00:18:57,760
spec

437
00:18:56,000 --> 00:18:59,520
changes that you expect for this to have

438
00:18:57,760 --> 00:19:01,840
wider no change okay

439
00:18:59,520 --> 00:19:03,360
so uh it's even compatible with uh

440
00:19:01,840 --> 00:19:05,840
drupal hub

441
00:19:03,360 --> 00:19:06,959
so actually are we use docker hub hosted

442
00:19:05,840 --> 00:19:10,559
by doka ink

443
00:19:06,960 --> 00:19:14,240
without any modification

444
00:19:10,559 --> 00:19:14,240
one last question if there's any

445
00:19:18,320 --> 00:19:25,840
i think we're good thank you

446
00:19:30,960 --> 00:19:33,039
you

