1
00:00:05,040 --> 00:00:08,559
hi everyone

2
00:00:06,000 --> 00:00:09,599
um thank you for thank you for coming

3
00:00:08,559 --> 00:00:12,239
and attending

4
00:00:09,599 --> 00:00:15,519
uh i'm quentin i've been working on bpf

5
00:00:12,240 --> 00:00:17,039
for about five years now

6
00:00:15,519 --> 00:00:18,720
i started at sixth street and then i

7
00:00:17,039 --> 00:00:21,600
worked at metrodom on

8
00:00:18,720 --> 00:00:23,198
bpf hardware flows uh so the objective

9
00:00:21,600 --> 00:00:25,599
of the presentation today

10
00:00:23,199 --> 00:00:27,599
is just to give you an update about the

11
00:00:25,599 --> 00:00:30,400
latest bpf

12
00:00:27,599 --> 00:00:32,960
features maybe what's getting inside the

13
00:00:30,400 --> 00:00:35,920
the vpf architecture in the camera

14
00:00:32,960 --> 00:00:37,360
what can be used to create more

15
00:00:35,920 --> 00:00:40,960
efficient programs

16
00:00:37,360 --> 00:00:44,160
and these kind of things so um

17
00:00:40,960 --> 00:00:48,160
i'll start with epf basics like

18
00:00:44,160 --> 00:00:50,078
the the core features of bpf that are

19
00:00:48,160 --> 00:00:53,199
evolving

20
00:00:50,079 --> 00:00:54,879
and present also the

21
00:00:53,199 --> 00:00:57,199
new features we're getting with the

22
00:00:54,879 --> 00:00:59,920
latest batch set

23
00:00:57,199 --> 00:01:00,399
and depending on time also a word about

24
00:00:59,920 --> 00:01:03,520
the

25
00:01:00,399 --> 00:01:07,439
bpf universe i mean bpf tooling

26
00:01:03,520 --> 00:01:11,119
and projects based on bpf yourself so uh

27
00:01:07,439 --> 00:01:15,279
just before we start a few reminders

28
00:01:11,119 --> 00:01:19,200
about how ebpf works so you get

29
00:01:15,280 --> 00:01:21,680
programs compiled from c most often

30
00:01:19,200 --> 00:01:24,640
with clang or llvm and then inject it

31
00:01:21,680 --> 00:01:27,360
from user space into the kernel

32
00:01:24,640 --> 00:01:29,040
where you can attach them to one of the

33
00:01:27,360 --> 00:01:33,039
existing hooks so that can be

34
00:01:29,040 --> 00:01:36,079
tc or xtp or sockets for networking or k

35
00:01:33,040 --> 00:01:37,759
probes for tracing and so on

36
00:01:36,079 --> 00:01:39,520
before attaching them you have to make

37
00:01:37,759 --> 00:01:41,759
sure that those programs won't crash

38
00:01:39,520 --> 00:01:43,200
your candles so you have a verifier that

39
00:01:41,759 --> 00:01:46,000
make sure the program is safe and

40
00:01:43,200 --> 00:01:46,640
terminates you can also jit compile it

41
00:01:46,000 --> 00:01:50,240
to have

42
00:01:46,640 --> 00:01:53,200
a most efficient a more efficient

43
00:01:50,240 --> 00:01:54,000
execution so the characteristics of such

44
00:01:53,200 --> 00:01:57,200
programs

45
00:01:54,000 --> 00:01:59,439
they are using 64-bit long instructions

46
00:01:57,200 --> 00:02:00,880
they are using 11 registers including

47
00:01:59,439 --> 00:02:04,158
one for the stack

48
00:02:00,880 --> 00:02:07,759
which is 512 bytes

49
00:02:04,159 --> 00:02:09,599
you can have about four thousand

50
00:02:07,759 --> 00:02:13,120
instructions in a program

51
00:02:09,598 --> 00:02:13,119
and you don't have loop load

52
00:02:13,520 --> 00:02:16,959
well that was true at least at the

53
00:02:15,040 --> 00:02:20,879
beginning so we have had

54
00:02:16,959 --> 00:02:24,080
a few changes of that uh recently so

55
00:02:20,879 --> 00:02:26,399
the stack is still 512 bytes

56
00:02:24,080 --> 00:02:27,280
but you do have a frequency that can

57
00:02:26,400 --> 00:02:30,239
allow you to

58
00:02:27,280 --> 00:02:31,519
to to use more indirectly i'll come back

59
00:02:30,239 --> 00:02:35,599
on that later

60
00:02:31,519 --> 00:02:37,360
uh excuse me um

61
00:02:35,599 --> 00:02:38,720
we don't have the same limitation as

62
00:02:37,360 --> 00:02:40,640
before in terms

63
00:02:38,720 --> 00:02:42,160
of the number of instructions in a

64
00:02:40,640 --> 00:02:44,720
program so you could have

65
00:02:42,160 --> 00:02:45,760
only four uh 4k instructions now you

66
00:02:44,720 --> 00:02:47,840
have

67
00:02:45,760 --> 00:02:49,040
up to one million instructions it's

68
00:02:47,840 --> 00:02:52,080
naturally that i can

69
00:02:49,040 --> 00:02:53,920
have any program uh doing

70
00:02:52,080 --> 00:02:55,200
one million instructions it's the number

71
00:02:53,920 --> 00:02:56,799
of instructions that will be

72
00:02:55,200 --> 00:02:59,518
validated by the verifier so the

73
00:02:56,800 --> 00:03:01,200
verifier emulates all the execution

74
00:02:59,519 --> 00:03:02,959
paths of the program

75
00:03:01,200 --> 00:03:04,399
and it can check up to one million

76
00:03:02,959 --> 00:03:05,240
instructions and that went

77
00:03:04,400 --> 00:03:07,800
up from

78
00:03:05,240 --> 00:03:10,800
[Music]

79
00:03:07,800 --> 00:03:14,800
130 thousand or so

80
00:03:10,800 --> 00:03:17,519
a few few months ago a few years ago

81
00:03:14,800 --> 00:03:18,000
so we have bounded loops too now in uh

82
00:03:17,519 --> 00:03:21,200
starting

83
00:03:18,000 --> 00:03:23,200
from kernel 5.3

84
00:03:21,200 --> 00:03:25,040
they are bounded in the sense that you

85
00:03:23,200 --> 00:03:26,640
must still ensure that your loop will

86
00:03:25,040 --> 00:03:27,679
terminate so basically the verify your

87
00:03:26,640 --> 00:03:30,879
needs to

88
00:03:27,680 --> 00:03:32,319
make sure that you you won't be doing

89
00:03:30,879 --> 00:03:35,280
weird stuff

90
00:03:32,319 --> 00:03:36,560
that could introduce uh infinite loops

91
00:03:35,280 --> 00:03:40,000
in the kernel but

92
00:03:36,560 --> 00:03:43,599
uh that's pretty useful for the

93
00:03:40,000 --> 00:03:45,599
for the for the most different use cases

94
00:03:43,599 --> 00:03:49,518
that needs loop so that's

95
00:03:45,599 --> 00:03:52,079
quite quite nice to have

96
00:03:49,519 --> 00:03:53,439
in terms of performance i won't go too

97
00:03:52,080 --> 00:03:55,040
much into the details but we have a

98
00:03:53,439 --> 00:03:55,359
number of performance improvements that

99
00:03:55,040 --> 00:03:58,959
are

100
00:03:55,360 --> 00:04:01,920
happening in the camera for bpf so a lvm

101
00:03:58,959 --> 00:04:04,560
can favor 32-bit sub-registers

102
00:04:01,920 --> 00:04:05,280
in the programs and we get better

103
00:04:04,560 --> 00:04:07,920
performance

104
00:04:05,280 --> 00:04:09,840
and lower code size for some

105
00:04:07,920 --> 00:04:10,958
architectures mostly 32-bit touch

106
00:04:09,840 --> 00:04:14,159
textures

107
00:04:10,959 --> 00:04:16,000
um that was especially relevant uh

108
00:04:14,159 --> 00:04:17,599
when i was at metronome because we are

109
00:04:16,000 --> 00:04:19,358
trying to make the the

110
00:04:17,600 --> 00:04:21,440
programs as small as possible to make

111
00:04:19,358 --> 00:04:25,198
them fit on the cars for example

112
00:04:21,440 --> 00:04:28,479
uh one of the latest uh addition to bpf

113
00:04:25,199 --> 00:04:31,919
is a new set of supplements that can

114
00:04:28,479 --> 00:04:33,840
help you work with maps and especially

115
00:04:31,919 --> 00:04:34,960
when you want to do a lot of operations

116
00:04:33,840 --> 00:04:37,758
on maps like

117
00:04:34,960 --> 00:04:40,000
look up a high number of values or date

118
00:04:37,759 --> 00:04:42,560
a high number of values in the map

119
00:04:40,000 --> 00:04:44,240
before that you would iterate over each

120
00:04:42,560 --> 00:04:44,880
entry in the maps or hash maps array

121
00:04:44,240 --> 00:04:47,680
maps

122
00:04:44,880 --> 00:04:49,440
compatible with bpf and you had a risk

123
00:04:47,680 --> 00:04:51,520
of hitting your deleted entry if the

124
00:04:49,440 --> 00:04:53,840
entry had been deleted before the

125
00:04:51,520 --> 00:04:55,599
uh before you reach it in the list and

126
00:04:53,840 --> 00:04:56,799
now you have those batch variations that

127
00:04:55,600 --> 00:04:58,800
can help you make that

128
00:04:56,800 --> 00:05:00,400
faster more efficiently and without this

129
00:04:58,800 --> 00:05:03,919
risk

130
00:05:00,400 --> 00:05:06,000
af xdp gets some improvements too

131
00:05:03,919 --> 00:05:07,680
but there's a presentation on page pull

132
00:05:06,000 --> 00:05:11,919
i think later so

133
00:05:07,680 --> 00:05:14,320
i won't mention af xzp here

134
00:05:11,919 --> 00:05:16,159
so i jump to what's actually new in

135
00:05:14,320 --> 00:05:17,919
terms of features new things you can do

136
00:05:16,160 --> 00:05:21,199
with

137
00:05:17,919 --> 00:05:23,359
bpf but that that's still pretty low

138
00:05:21,199 --> 00:05:24,880
level i'm not talking too much about new

139
00:05:23,360 --> 00:05:27,120
use case really because we're still

140
00:05:24,880 --> 00:05:30,320
focusing on networking so that's still

141
00:05:27,120 --> 00:05:32,800
the the classics and ddos and um

142
00:05:30,320 --> 00:05:34,000
load balancing i'm talking just about

143
00:05:32,800 --> 00:05:36,000
what new

144
00:05:34,000 --> 00:05:37,759
things you can use in your programs

145
00:05:36,000 --> 00:05:41,120
themselves so we have

146
00:05:37,759 --> 00:05:43,680
btf which is bpa type format it's a

147
00:05:41,120 --> 00:05:46,000
format for for data close to dwarf which

148
00:05:43,680 --> 00:05:49,600
is used for debugging programs

149
00:05:46,000 --> 00:05:53,199
on linux btf provides information

150
00:05:49,600 --> 00:05:56,960
for bpf programs and maps too

151
00:05:53,199 --> 00:05:59,680
so one simple example is here

152
00:05:56,960 --> 00:06:00,799
we have a dump from the the program

153
00:05:59,680 --> 00:06:02,960
that's running

154
00:06:00,800 --> 00:06:05,039
inside the kernel and we can see that we

155
00:06:02,960 --> 00:06:07,440
still have the c instructions that were

156
00:06:05,039 --> 00:06:08,560
used to compile this program so the c

157
00:06:07,440 --> 00:06:12,000
instructions were

158
00:06:08,560 --> 00:06:14,720
encoded into btf and send along the

159
00:06:12,000 --> 00:06:15,840
the bpf byte code to the kernel so we

160
00:06:14,720 --> 00:06:20,479
can

161
00:06:15,840 --> 00:06:23,119
keep track of them

162
00:06:20,479 --> 00:06:25,880
so btf is naturally one of the latest

163
00:06:23,120 --> 00:06:27,199
features in the sense it's been around

164
00:06:25,880 --> 00:06:29,120
64.18

165
00:06:27,199 --> 00:06:31,120
but it's receiving a lot of a lot of

166
00:06:29,120 --> 00:06:33,520
changes a lot of improvements

167
00:06:31,120 --> 00:06:36,080
uh and it's used by more and of features

168
00:06:33,520 --> 00:06:39,440
too so that's why i'm mentioning it

169
00:06:36,080 --> 00:06:41,440
it's generated with pa hole or llvm

170
00:06:39,440 --> 00:06:43,199
btf objects are verified in the kernel

171
00:06:41,440 --> 00:06:44,160
for consistency so you cannot just

172
00:06:43,199 --> 00:06:47,440
introduce

173
00:06:44,160 --> 00:06:48,240
any any btf object that you like it has

174
00:06:47,440 --> 00:06:51,840
to match

175
00:06:48,240 --> 00:06:55,199
with the program on maps you're using

176
00:06:51,840 --> 00:06:58,560
we can also produce a btf

177
00:06:55,199 --> 00:07:00,639
blob for all the symbols in the kernel

178
00:06:58,560 --> 00:07:02,240
we do need a specific configuration

179
00:07:00,639 --> 00:07:04,240
option for doing that but after that you

180
00:07:02,240 --> 00:07:08,240
have ppf data available in the

181
00:07:04,240 --> 00:07:11,680
ccfs system file that allows you to uh

182
00:07:08,240 --> 00:07:12,479
to access to all the symbols that can be

183
00:07:11,680 --> 00:07:15,280
used

184
00:07:12,479 --> 00:07:16,159
by bpf probes for example when using bpa

185
00:07:15,280 --> 00:07:19,520
from trace

186
00:07:16,160 --> 00:07:20,800
transports or k probes uh it allows you

187
00:07:19,520 --> 00:07:24,080
to access

188
00:07:20,800 --> 00:07:26,479
uh data structures from the kernel just

189
00:07:24,080 --> 00:07:28,159
not with uh with an offset from the

190
00:07:26,479 --> 00:07:29,758
beginning of the stroke that we as we

191
00:07:28,160 --> 00:07:31,360
had to do before but

192
00:07:29,759 --> 00:07:32,880
directly with the name of the field in

193
00:07:31,360 --> 00:07:34,720
the struct and that's especially

194
00:07:32,880 --> 00:07:36,719
important for trying to

195
00:07:34,720 --> 00:07:38,479
compile the tracing program just once

196
00:07:36,720 --> 00:07:41,520
and being able to run it

197
00:07:38,479 --> 00:07:42,318
on a variety of kernels that might have

198
00:07:41,520 --> 00:07:43,680
changes

199
00:07:42,319 --> 00:07:46,479
in that structure depending on the

200
00:07:43,680 --> 00:07:49,280
compilation options or kernel versions

201
00:07:46,479 --> 00:07:51,280
uh so that's what we call compile once

202
00:07:49,280 --> 00:07:54,878
run everywhere for bpf

203
00:07:51,280 --> 00:07:55,520
um but really it's being used for a lot

204
00:07:54,879 --> 00:07:59,199
of things

205
00:07:55,520 --> 00:08:02,318
so we also have now global data

206
00:07:59,199 --> 00:08:05,440
in bpf which means

207
00:08:02,319 --> 00:08:06,160
sorry which means that we can use global

208
00:08:05,440 --> 00:08:09,919
variables

209
00:08:06,160 --> 00:08:13,280
in the bpf uh source in c

210
00:08:09,919 --> 00:08:14,719
and it translates into data being stored

211
00:08:13,280 --> 00:08:18,400
in specific uh

212
00:08:14,720 --> 00:08:18,400
sections of the elf file

213
00:08:18,479 --> 00:08:22,719
and that's uh that's useful for making

214
00:08:21,680 --> 00:08:25,520
bpf

215
00:08:22,720 --> 00:08:27,199
templates in one way so you can just

216
00:08:25,520 --> 00:08:28,479
have your object file that you compile

217
00:08:27,199 --> 00:08:30,560
from c

218
00:08:28,479 --> 00:08:32,319
with this global data in read-only

219
00:08:30,560 --> 00:08:34,240
sections and then you can just

220
00:08:32,320 --> 00:08:35,440
update the read-only sections instead of

221
00:08:34,240 --> 00:08:38,320
trying to uh

222
00:08:35,440 --> 00:08:40,320
to find the relevant information the in

223
00:08:38,320 --> 00:08:42,479
the code section and

224
00:08:40,320 --> 00:08:45,279
uh so you can adapt your program uh with

225
00:08:42,479 --> 00:08:48,720
that to due to a variety of use cases

226
00:08:45,279 --> 00:08:51,920
or configuration changes um

227
00:08:48,720 --> 00:08:55,680
this global data can be is

228
00:08:51,920 --> 00:08:58,399
used with a maps somehow to to

229
00:08:55,680 --> 00:09:00,000
to interact with user space too so you

230
00:08:58,399 --> 00:09:03,040
have a possibility to

231
00:09:00,000 --> 00:09:06,240
map them from user space and to

232
00:09:03,040 --> 00:09:06,880
to be able to read them and to see what

233
00:09:06,240 --> 00:09:10,640
the

234
00:09:06,880 --> 00:09:13,680
what the program in the kernel is using

235
00:09:10,640 --> 00:09:16,160
something close to global data is

236
00:09:13,680 --> 00:09:17,920
another kind of variables it's

237
00:09:16,160 --> 00:09:18,480
externally valuable so you can have

238
00:09:17,920 --> 00:09:21,040
extern

239
00:09:18,480 --> 00:09:22,240
something in a c program that you

240
00:09:21,040 --> 00:09:25,040
compare into bpf

241
00:09:22,240 --> 00:09:26,640
it's actually limited to a very small

242
00:09:25,040 --> 00:09:27,839
number of variables which are linux

243
00:09:26,640 --> 00:09:31,120
kernel version

244
00:09:27,839 --> 00:09:32,320
and the config underscore something that

245
00:09:31,120 --> 00:09:36,000
you can use to

246
00:09:32,320 --> 00:09:38,560
configure your kernel and so this is one

247
00:09:36,000 --> 00:09:40,800
thing that relies on btf for example uh

248
00:09:38,560 --> 00:09:43,518
support for those external variables

249
00:09:40,800 --> 00:09:44,319
and using them makes you able to adapt

250
00:09:43,519 --> 00:09:48,320
your program

251
00:09:44,320 --> 00:09:50,160
to uh with uh clauses like if i'm using

252
00:09:48,320 --> 00:09:51,760
a linux scanner version that is higher

253
00:09:50,160 --> 00:09:55,760
than 4.

254
00:09:51,760 --> 00:10:00,240
something you can adapt your program

255
00:09:55,760 --> 00:10:01,920
we have vpf trampolines that can convert

256
00:10:00,240 --> 00:10:03,760
the native credit conversion so the host

257
00:10:01,920 --> 00:10:04,880
coding convention into bpf coding

258
00:10:03,760 --> 00:10:07,920
convention

259
00:10:04,880 --> 00:10:08,640
it's it's a way to attach programs more

260
00:10:07,920 --> 00:10:11,360
efficiently

261
00:10:08,640 --> 00:10:12,000
to entry and exit of functions it's

262
00:10:11,360 --> 00:10:15,120
useful

263
00:10:12,000 --> 00:10:16,320
for um for networking program too

264
00:10:15,120 --> 00:10:19,839
because now you can attach

265
00:10:16,320 --> 00:10:20,399
program at the insurance and exit of xdp

266
00:10:19,839 --> 00:10:23,120
programs

267
00:10:20,399 --> 00:10:24,480
say and see all incoming packets to your

268
00:10:23,120 --> 00:10:26,240
bpf program

269
00:10:24,480 --> 00:10:28,079
and outgoing packets so you can see the

270
00:10:26,240 --> 00:10:29,920
changes that occur for example so that

271
00:10:28,079 --> 00:10:32,479
that would be a good thing for the

272
00:10:29,920 --> 00:10:34,560
beginning it can also be used

273
00:10:32,480 --> 00:10:36,640
in the what what is called the bpf

274
00:10:34,560 --> 00:10:38,800
dispatcher which is a mechanism when

275
00:10:36,640 --> 00:10:40,240
you're reusing those bpf trampolines to

276
00:10:38,800 --> 00:10:44,000
avoid the cost of

277
00:10:40,240 --> 00:10:46,959
red pallets um following uh meltdown

278
00:10:44,000 --> 00:10:48,240
and spectra attacks when putting xdp

279
00:10:46,959 --> 00:10:51,199
programs so we get also

280
00:10:48,240 --> 00:10:52,000
performance improvements through that

281
00:10:51,200 --> 00:10:55,519
another thing

282
00:10:52,000 --> 00:10:58,240
is uh global function and dynamic

283
00:10:55,519 --> 00:11:01,680
linking which appeared just in the in

284
00:10:58,240 --> 00:11:06,640
the latest uh weeks or days

285
00:11:01,680 --> 00:11:09,040
um we have um

286
00:11:06,640 --> 00:11:09,680
a global function supported by lib bpf

287
00:11:09,040 --> 00:11:11,680
now

288
00:11:09,680 --> 00:11:12,719
which means the functions you're using

289
00:11:11,680 --> 00:11:14,560
in your main

290
00:11:12,720 --> 00:11:16,399
call you're coding in your main program

291
00:11:14,560 --> 00:11:19,518
don't have to be static anymore

292
00:11:16,399 --> 00:11:22,399
um and the the

293
00:11:19,519 --> 00:11:24,160
they can be loaded as separate programs

294
00:11:22,399 --> 00:11:26,160
no sorry the functions are loaded

295
00:11:24,160 --> 00:11:27,439
inside your program and they act as

296
00:11:26,160 --> 00:11:30,160
placeholders so

297
00:11:27,440 --> 00:11:31,279
at runtime you can jump from your bpf

298
00:11:30,160 --> 00:11:34,880
program

299
00:11:31,279 --> 00:11:38,079
into another bpf program of type bpf

300
00:11:34,880 --> 00:11:40,079
prototype text sorry and

301
00:11:38,079 --> 00:11:41,519
come back so just as you would do with a

302
00:11:40,079 --> 00:11:43,359
regular function call but there are

303
00:11:41,519 --> 00:11:44,959
different bpf programs so you're

304
00:11:43,360 --> 00:11:46,160
starting to get something that can be

305
00:11:44,959 --> 00:11:48,560
really modular

306
00:11:46,160 --> 00:11:50,240
and you could imagine building a bpf

307
00:11:48,560 --> 00:11:52,719
library that can

308
00:11:50,240 --> 00:11:54,720
be injected as a set of small programs

309
00:11:52,720 --> 00:11:56,079
and call them from a main program so

310
00:11:54,720 --> 00:11:58,560
that allows for

311
00:11:56,079 --> 00:12:00,319
dynamic policies i want to change the

312
00:11:58,560 --> 00:12:02,239
the processing of that packet depending

313
00:12:00,320 --> 00:12:05,839
on what its

314
00:12:02,240 --> 00:12:07,920
metadata are that can help for code

315
00:12:05,839 --> 00:12:10,160
reuse i don't want to

316
00:12:07,920 --> 00:12:12,880
use the same snippet in all my programs

317
00:12:10,160 --> 00:12:16,240
i can just call it as an extension

318
00:12:12,880 --> 00:12:18,480
and since i have less code reviews i get

319
00:12:16,240 --> 00:12:20,320
a shorter verification time too

320
00:12:18,480 --> 00:12:22,839
because i just need to to inject those

321
00:12:20,320 --> 00:12:25,440
extension ones

322
00:12:22,839 --> 00:12:26,160
um another mechanism that appeared

323
00:12:25,440 --> 00:12:29,360
recently

324
00:12:26,160 --> 00:12:32,160
is uh the possibility to overwrite the

325
00:12:29,360 --> 00:12:34,320
strict ups in the kernel which

326
00:12:32,160 --> 00:12:35,760
is quite restricted at the moment

327
00:12:34,320 --> 00:12:37,279
because there is

328
00:12:35,760 --> 00:12:39,200
some wrapping to do in the kernel for

329
00:12:37,279 --> 00:12:41,279
the stroke of so those structures that

330
00:12:39,200 --> 00:12:44,399
hold operations to do

331
00:12:41,279 --> 00:12:44,399
on some specific

332
00:12:45,279 --> 00:12:50,959
algorithm so the only one that's being

333
00:12:48,079 --> 00:12:54,000
handled now is tcp congestion ops

334
00:12:50,959 --> 00:12:57,119
and machine cafe law i think

335
00:12:54,000 --> 00:12:58,320
use that to uh to implement a custom tcp

336
00:12:57,120 --> 00:13:02,000
congestion control

337
00:12:58,320 --> 00:13:02,320
just with ppf programs by uh overriding

338
00:13:02,000 --> 00:13:04,480
the

339
00:13:02,320 --> 00:13:07,680
the operations that are that are being

340
00:13:04,480 --> 00:13:10,880
done by default in the kernel

341
00:13:07,680 --> 00:13:14,160
so that's a possibility to to introduce

342
00:13:10,880 --> 00:13:16,959
new use cases too there is

343
00:13:14,160 --> 00:13:17,839
more to come very likely because the the

344
00:13:16,959 --> 00:13:21,040
community

345
00:13:17,839 --> 00:13:24,399
is very active we have improvements

346
00:13:21,040 --> 00:13:27,120
on xdp so multibuffer xdp is being

347
00:13:24,399 --> 00:13:30,160
discussed egress xdp is being discussed

348
00:13:27,120 --> 00:13:33,680
uh static linking

349
00:13:30,160 --> 00:13:37,199
that would be the merging of several

350
00:13:33,680 --> 00:13:38,160
object files into just one bps so you

351
00:13:37,200 --> 00:13:41,519
could have

352
00:13:38,160 --> 00:13:42,719
really library in written in c about bpf

353
00:13:41,519 --> 00:13:45,440
programs and just

354
00:13:42,720 --> 00:13:46,320
compile them together to have your bpf

355
00:13:45,440 --> 00:13:49,120
programs

356
00:13:46,320 --> 00:13:51,120
is being discussed to would like to have

357
00:13:49,120 --> 00:13:53,600
step by step debugging one day

358
00:13:51,120 --> 00:13:54,480
to uh to be able to better debug bpf

359
00:13:53,600 --> 00:13:56,800
programs

360
00:13:54,480 --> 00:13:58,320
uh some other use cases too there is a

361
00:13:56,800 --> 00:14:00,560
linux security module

362
00:13:58,320 --> 00:14:01,920
based on bpf which is being discussed at

363
00:14:00,560 --> 00:14:04,800
the moment

364
00:14:01,920 --> 00:14:04,800
not merged yet

365
00:14:05,120 --> 00:14:11,440
i wanted to make a brief update about

366
00:14:08,079 --> 00:14:13,439
the tools and projects

367
00:14:11,440 --> 00:14:15,600
but i don't have much time so i just

368
00:14:13,440 --> 00:14:18,880
leave this slide and if you have

369
00:14:15,600 --> 00:14:21,360
some questions maybe i'll take them down

370
00:14:18,880 --> 00:14:21,360
thank you

371
00:14:21,740 --> 00:14:31,839
[Applause]

372
00:14:28,839 --> 00:14:31,839
yes

373
00:14:37,600 --> 00:14:41,120
so so do i think the the possibility to

374
00:14:40,000 --> 00:14:43,680
do map on

375
00:14:41,120 --> 00:14:45,040
some values is going to be the end of

376
00:14:43,680 --> 00:14:48,079
the regular way to

377
00:14:45,040 --> 00:14:48,480
to use a bpf system code to communicate

378
00:14:48,079 --> 00:14:51,839
with

379
00:14:48,480 --> 00:14:53,600
maps between user specifier no i don't

380
00:14:51,839 --> 00:14:55,839
think so

381
00:14:53,600 --> 00:14:57,519
because it's restricted to uh to some

382
00:14:55,839 --> 00:14:59,460
specific use case i think it will be

383
00:14:57,519 --> 00:15:00,720
global data for now

384
00:14:59,460 --> 00:15:04,800
[Music]

385
00:15:00,720 --> 00:15:06,000
and i mean you have a lot of different

386
00:15:04,800 --> 00:15:07,680
map types

387
00:15:06,000 --> 00:15:10,160
a lot of different things you can update

388
00:15:07,680 --> 00:15:10,479
in them and that would not necessarily

389
00:15:10,160 --> 00:15:14,160
be

390
00:15:10,480 --> 00:15:17,680
suitable for and mapping things

391
00:15:14,160 --> 00:15:19,600
so the more we can a map i suppose the

392
00:15:17,680 --> 00:15:20,239
best it gets in terms of performance but

393
00:15:19,600 --> 00:15:23,600
we're not

394
00:15:20,240 --> 00:15:25,199
just here yet in terms of replacement

395
00:15:23,600 --> 00:15:27,199
thumbs up so if you have any other

396
00:15:25,199 --> 00:15:37,920
questions please come and

397
00:15:27,199 --> 00:15:37,920
let me know thank you

