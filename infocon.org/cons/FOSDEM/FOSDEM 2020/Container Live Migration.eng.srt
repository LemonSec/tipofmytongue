1
00:00:05,759 --> 00:00:09,360
welcome to my

2
00:00:06,720 --> 00:00:11,678
um talk about container life migration

3
00:00:09,360 --> 00:00:14,959
my name is arden rivo i work at

4
00:00:11,679 --> 00:00:17,520
redhead i'm

5
00:00:14,960 --> 00:00:18,400
involved in process migration which is

6
00:00:17,520 --> 00:00:21,520
the basis for

7
00:00:18,400 --> 00:00:23,599
container migration since for the last

8
00:00:21,520 --> 00:00:24,880
10 years at least this is all based on

9
00:00:23,600 --> 00:00:27,279
creo

10
00:00:24,880 --> 00:00:29,359
which i will um give an introduction

11
00:00:27,279 --> 00:00:32,079
about here and i'm working on clear

12
00:00:29,359 --> 00:00:34,719
since 2012 at least

13
00:00:32,079 --> 00:00:37,120
and i'm focusing on container migration

14
00:00:34,719 --> 00:00:39,120
since 2015.

15
00:00:37,120 --> 00:00:40,718
everything i'm talking about here has

16
00:00:39,120 --> 00:00:44,399
been already written down

17
00:00:40,719 --> 00:00:47,920
an article can be found here

18
00:00:44,399 --> 00:00:50,160
and i

19
00:00:47,920 --> 00:00:51,440
want to start with the definition what i

20
00:00:50,160 --> 00:00:54,879
think or

21
00:00:51,440 --> 00:00:58,399
what i do when i say

22
00:00:54,879 --> 00:01:01,680
container life migration because

23
00:00:58,399 --> 00:01:04,960
it's something people often ask me

24
00:01:01,680 --> 00:01:06,960
about the details so basically

25
00:01:04,959 --> 00:01:10,080
it's the idea of transferring a running

26
00:01:06,960 --> 00:01:12,158
container from one system to another

27
00:01:10,080 --> 00:01:13,600
you could also say stateful migration so

28
00:01:12,159 --> 00:01:15,680
the process just

29
00:01:13,600 --> 00:01:16,640
continues to run at the same point in

30
00:01:15,680 --> 00:01:20,000
time

31
00:01:16,640 --> 00:01:23,280
you stopped it um before the migration

32
00:01:20,000 --> 00:01:26,320
and and this the the basic concept

33
00:01:23,280 --> 00:01:28,159
is i serialize the process or the whole

34
00:01:26,320 --> 00:01:30,880
container on my source system

35
00:01:28,159 --> 00:01:33,280
somehow then i transfer it to the

36
00:01:30,880 --> 00:01:35,600
destination system and then i just

37
00:01:33,280 --> 00:01:36,560
restore it restart it and the container

38
00:01:35,600 --> 00:01:39,600
keeps on running

39
00:01:36,560 --> 00:01:43,520
at the same point in time i

40
00:01:39,600 --> 00:01:45,600
started the migration of the whole thing

41
00:01:43,520 --> 00:01:47,119
and as already mentioned this is all

42
00:01:45,600 --> 00:01:50,880
based on on crew

43
00:01:47,119 --> 00:01:53,920
checkpoint restore in in user space

44
00:01:50,880 --> 00:01:55,759
and and there are multiple integrations

45
00:01:53,920 --> 00:01:56,320
of checkpoint restore user space in

46
00:01:55,759 --> 00:01:59,280
different

47
00:01:56,320 --> 00:02:00,398
um container runtimes i will give an

48
00:01:59,280 --> 00:02:03,439
overview later

49
00:02:00,399 --> 00:02:04,880
which container runtime has creo support

50
00:02:03,439 --> 00:02:08,799
right now

51
00:02:04,880 --> 00:02:11,440
and the the main

52
00:02:08,800 --> 00:02:13,200
things i will demo will all be

53
00:02:11,440 --> 00:02:15,520
department based

54
00:02:13,200 --> 00:02:17,679
and so this is about the integration of

55
00:02:15,520 --> 00:02:20,400
creo and podman and how to use it to

56
00:02:17,680 --> 00:02:22,640
live migrate containers

57
00:02:20,400 --> 00:02:24,080
so i want to give you some details about

58
00:02:22,640 --> 00:02:26,559
about creo works

59
00:02:24,080 --> 00:02:28,239
how creole works so the first step you

60
00:02:26,560 --> 00:02:29,520
have to do you have to checkpoint your

61
00:02:28,239 --> 00:02:31,920
processes

62
00:02:29,520 --> 00:02:34,000
so you have a container and you have

63
00:02:31,920 --> 00:02:35,599
multiple processes running inside it and

64
00:02:34,000 --> 00:02:37,280
you tell crew

65
00:02:35,599 --> 00:02:39,599
i want to checkpoint this container you

66
00:02:37,280 --> 00:02:41,360
point it or you give it the pid of the

67
00:02:39,599 --> 00:02:42,879
first process in the container and it

68
00:02:41,360 --> 00:02:46,720
will just

69
00:02:42,879 --> 00:02:48,959
stop and collect the information of all

70
00:02:46,720 --> 00:02:51,120
processes in the process trees so all

71
00:02:48,959 --> 00:02:54,319
child processes are always

72
00:02:51,120 --> 00:02:57,120
check pointed and with your uh

73
00:02:54,319 --> 00:02:57,518
with the first process and curio does

74
00:02:57,120 --> 00:03:00,560
this

75
00:02:57,519 --> 00:03:02,560
um one possible way how crea does this

76
00:03:00,560 --> 00:03:04,720
is using p trace to stop the process

77
00:03:02,560 --> 00:03:06,400
there's also the way to using the

78
00:03:04,720 --> 00:03:08,000
the c group freezer to stop the

79
00:03:06,400 --> 00:03:10,239
processes

80
00:03:08,000 --> 00:03:11,920
and so previous stops the processes

81
00:03:10,239 --> 00:03:13,440
collects all the information and writes

82
00:03:11,920 --> 00:03:16,799
it to disk

83
00:03:13,440 --> 00:03:18,560
and so the tool is named trio is named

84
00:03:16,800 --> 00:03:20,239
checkpoint restore in user space and

85
00:03:18,560 --> 00:03:23,440
there's a reason for the name

86
00:03:20,239 --> 00:03:27,440
because before checkpoint restore

87
00:03:23,440 --> 00:03:27,440
in user space was

88
00:03:27,519 --> 00:03:31,120
developed there were multiple other

89
00:03:29,360 --> 00:03:32,879
checkpoint restore implementations for

90
00:03:31,120 --> 00:03:34,400
linux there and they were not in user

91
00:03:32,879 --> 00:03:36,079
space they were either completely in

92
00:03:34,400 --> 00:03:39,440
kernel space

93
00:03:36,080 --> 00:03:44,000
or they were even more in user space

94
00:03:39,440 --> 00:03:44,000
with um cisco

95
00:03:45,680 --> 00:03:53,760
syscall uh something

96
00:03:50,000 --> 00:03:56,640
something so whatever so um creo

97
00:03:53,760 --> 00:03:58,640
3 works a different way um creo tries to

98
00:03:56,640 --> 00:03:59,599
use existing um kernel interfaces as

99
00:03:58,640 --> 00:04:02,958
much as possible

100
00:03:59,599 --> 00:04:06,480
so there's basically not

101
00:04:02,959 --> 00:04:09,360
one um kernel interface

102
00:04:06,480 --> 00:04:11,040
added by crew which is only useful for

103
00:04:09,360 --> 00:04:13,599
checkpoint restore

104
00:04:11,040 --> 00:04:15,439
the interfaces crew added to the kernel

105
00:04:13,599 --> 00:04:17,358
most of the time to

106
00:04:15,439 --> 00:04:18,880
get more information about the running

107
00:04:17,358 --> 00:04:22,079
process

108
00:04:18,880 --> 00:04:23,919
from the kernel so other

109
00:04:22,079 --> 00:04:25,680
there are also for for a lot of the

110
00:04:23,919 --> 00:04:27,198
things crew added there are other use

111
00:04:25,680 --> 00:04:28,880
cases which are using this

112
00:04:27,199 --> 00:04:30,960
new information which could be added

113
00:04:28,880 --> 00:04:33,199
since 2012

114
00:04:30,960 --> 00:04:33,198
and

115
00:04:34,000 --> 00:04:37,280
once creo collected all the information

116
00:04:36,000 --> 00:04:39,120
from the profile system

117
00:04:37,280 --> 00:04:42,000
then there's the next step which is

118
00:04:39,120 --> 00:04:44,479
called the parasite code

119
00:04:42,000 --> 00:04:45,199
this is probably my most favorite part

120
00:04:44,479 --> 00:04:47,758
of trio

121
00:04:45,199 --> 00:04:51,360
because it's it's also the craziest if

122
00:04:47,759 --> 00:04:53,040
you go into the details because it's

123
00:04:51,360 --> 00:04:55,040
you you wouldn't expect something like

124
00:04:53,040 --> 00:04:58,240
this when you start

125
00:04:55,040 --> 00:05:00,000
looking at a project like i don't know i

126
00:04:58,240 --> 00:05:01,440
wouldn't expect it at all somebody doing

127
00:05:00,000 --> 00:05:03,759
like something like this

128
00:05:01,440 --> 00:05:05,680
so the parasite code is injected into

129
00:05:03,759 --> 00:05:06,960
the running process so the process has

130
00:05:05,680 --> 00:05:10,320
been

131
00:05:06,960 --> 00:05:13,680
stopped paused using ptrace and now

132
00:05:10,320 --> 00:05:15,680
um creo extracts some code out of the

133
00:05:13,680 --> 00:05:17,440
process using ptrace and replaces this

134
00:05:15,680 --> 00:05:19,280
code with a parasite code

135
00:05:17,440 --> 00:05:21,520
now that the parasite code is in there

136
00:05:19,280 --> 00:05:23,520
it restarts the process at the point of

137
00:05:21,520 --> 00:05:24,240
the parasite code the parasite code is

138
00:05:23,520 --> 00:05:27,599
running

139
00:05:24,240 --> 00:05:30,880
inside of the address space of the

140
00:05:27,600 --> 00:05:33,520
processes it wants to dump and so

141
00:05:30,880 --> 00:05:34,240
and it's running uh kind of a daemon so

142
00:05:33,520 --> 00:05:36,639
and the

143
00:05:34,240 --> 00:05:38,080
parasite code connects to the main creo

144
00:05:36,639 --> 00:05:41,199
process and the clear process

145
00:05:38,080 --> 00:05:41,599
can send commands there to the process

146
00:05:41,199 --> 00:05:44,160
to

147
00:05:41,600 --> 00:05:45,759
do things from within the address space

148
00:05:44,160 --> 00:05:47,919
of the running process

149
00:05:45,759 --> 00:05:49,919
and one of the main or one of the

150
00:05:47,919 --> 00:05:51,599
biggest things which are happening from

151
00:05:49,919 --> 00:05:53,599
inside of the

152
00:05:51,600 --> 00:05:56,160
from the parasite code is dumping the

153
00:05:53,600 --> 00:05:58,479
memory from the process

154
00:05:56,160 --> 00:06:00,319
to disk so that it can be later be

155
00:05:58,479 --> 00:06:02,880
restored and the same

156
00:06:00,319 --> 00:06:04,240
memory information is there as before

157
00:06:02,880 --> 00:06:08,319
checkpointing

158
00:06:04,240 --> 00:06:11,520
and although ptrace offers a way to um

159
00:06:08,319 --> 00:06:14,880
to extract a memory from the process

160
00:06:11,520 --> 00:06:17,280
um out of the process um this is this

161
00:06:14,880 --> 00:06:18,840
this used to be slow at a point um where

162
00:06:17,280 --> 00:06:23,440
the parasite code

163
00:06:18,840 --> 00:06:26,400
was written and if you're looking at

164
00:06:23,440 --> 00:06:27,039
migration times the the dumping of the

165
00:06:26,400 --> 00:06:29,520
memory

166
00:06:27,039 --> 00:06:31,759
is really fast because most of the time

167
00:06:29,520 --> 00:06:34,159
for your migration will always be spent

168
00:06:31,759 --> 00:06:35,600
by the transfer by the network transfer

169
00:06:34,160 --> 00:06:37,520
to transfer the

170
00:06:35,600 --> 00:06:38,960
checkpoint image from one system to

171
00:06:37,520 --> 00:06:40,719
another so

172
00:06:38,960 --> 00:06:42,400
the parasite code is used to write all

173
00:06:40,720 --> 00:06:45,600
this information to disks

174
00:06:42,400 --> 00:06:48,239
and to disk and once the parasite code

175
00:06:45,600 --> 00:06:51,039
is done it's removed from the process

176
00:06:48,240 --> 00:06:54,639
the prio cost is now curing the process

177
00:06:51,039 --> 00:06:57,120
the original code is restored

178
00:06:54,639 --> 00:06:58,720
or the parasite code is removed and the

179
00:06:57,120 --> 00:06:59,840
original code which was there will be

180
00:06:58,720 --> 00:07:02,800
copied back

181
00:06:59,840 --> 00:07:04,880
so that if you want to continue to run

182
00:07:02,800 --> 00:07:06,240
your process it will just run without

183
00:07:04,880 --> 00:07:08,560
ever knowing that it was

184
00:07:06,240 --> 00:07:09,599
under the control of the parasite code

185
00:07:08,560 --> 00:07:11,360
and at this point

186
00:07:09,599 --> 00:07:12,960
the checkpointing is is basically

187
00:07:11,360 --> 00:07:14,319
finished all the information has been

188
00:07:12,960 --> 00:07:18,239
written to disk

189
00:07:14,319 --> 00:07:20,080
and in the case of um

190
00:07:18,240 --> 00:07:21,360
for migration you would probably kill

191
00:07:20,080 --> 00:07:23,359
your target process

192
00:07:21,360 --> 00:07:25,759
so that it stopped but it also can

193
00:07:23,360 --> 00:07:27,599
continue to run this is um

194
00:07:25,759 --> 00:07:28,960
whatever you feel like is the best for

195
00:07:27,599 --> 00:07:31,280
your use case

196
00:07:28,960 --> 00:07:32,799
and what's also interesting about

197
00:07:31,280 --> 00:07:34,960
container life migration is

198
00:07:32,800 --> 00:07:36,720
if you're running with podman you're

199
00:07:34,960 --> 00:07:38,000
probably running on a system with se

200
00:07:36,720 --> 00:07:41,039
linux

201
00:07:38,000 --> 00:07:42,639
and as a linux and creo is especially

202
00:07:41,039 --> 00:07:44,479
interesting i gave a talk at a linux

203
00:07:42,639 --> 00:07:47,280
security summit about this

204
00:07:44,479 --> 00:07:49,280
because preview does things which the se

205
00:07:47,280 --> 00:07:50,799
linux policy is not really happy about

206
00:07:49,280 --> 00:07:53,119
so you have to

207
00:07:50,800 --> 00:07:54,160
invest some additional time to let crew

208
00:07:53,120 --> 00:07:57,120
do the right

209
00:07:54,160 --> 00:07:59,039
things if it's running under s linux

210
00:07:57,120 --> 00:08:02,800
control

211
00:07:59,039 --> 00:08:05,759
but um this is just too much for today

212
00:08:02,800 --> 00:08:07,199
here for my time and so the once the

213
00:08:05,759 --> 00:08:08,319
checkpointing is finished you come to

214
00:08:07,199 --> 00:08:11,280
the second step

215
00:08:08,319 --> 00:08:12,160
that's the restoring of the process and

216
00:08:11,280 --> 00:08:14,318
um

217
00:08:12,160 --> 00:08:16,479
so first what creo does it reads all the

218
00:08:14,319 --> 00:08:18,800
checkpoint images to see um

219
00:08:16,479 --> 00:08:19,919
what what is there and then um creo

220
00:08:18,800 --> 00:08:23,039
basically creates

221
00:08:19,919 --> 00:08:25,680
a process for each process which

222
00:08:23,039 --> 00:08:26,159
used to be in the process tree and for

223
00:08:25,680 --> 00:08:30,080
each

224
00:08:26,160 --> 00:08:31,840
threat which used to be there and

225
00:08:30,080 --> 00:08:34,079
there was a talk at linux plumbers

226
00:08:31,840 --> 00:08:35,120
conference i gave about crew and the pid

227
00:08:34,080 --> 00:08:37,760
dance because

228
00:08:35,120 --> 00:08:42,240
um creating a process used to be

229
00:08:37,760 --> 00:08:42,240
complicated on on linux so you had to

230
00:08:42,958 --> 00:08:47,680
there was an interface and you had to

231
00:08:44,560 --> 00:08:48,399
write the pid you want to the interface

232
00:08:47,680 --> 00:08:50,479
and do

233
00:08:48,399 --> 00:08:52,000
and then be really fast with the fork

234
00:08:50,480 --> 00:08:52,560
and hope that no other process is

235
00:08:52,000 --> 00:08:55,680
created

236
00:08:52,560 --> 00:08:57,279
during the same time but with we

237
00:08:55,680 --> 00:09:00,399
with the help of christian we introduced

238
00:08:57,279 --> 00:09:02,560
clone 3 and now we can create a process

239
00:09:00,399 --> 00:09:04,800
with a certain pid this is

240
00:09:02,560 --> 00:09:07,040
available since i guess since monday

241
00:09:04,800 --> 00:09:10,319
linux 5.5 and creo also

242
00:09:07,040 --> 00:09:11,680
has all the code to use clone 3 if your

243
00:09:10,320 --> 00:09:14,560
kernel has it

244
00:09:11,680 --> 00:09:16,560
so now creo can create new processes

245
00:09:14,560 --> 00:09:17,359
with less this calls and without any

246
00:09:16,560 --> 00:09:18,719
races that

247
00:09:17,360 --> 00:09:20,399
some other process might have been

248
00:09:18,720 --> 00:09:22,320
created in between

249
00:09:20,399 --> 00:09:23,600
and once all these processes have been

250
00:09:22,320 --> 00:09:26,959
created

251
00:09:23,600 --> 00:09:28,640
um those processes are now morphed

252
00:09:26,959 --> 00:09:30,959
into the process which should be

253
00:09:28,640 --> 00:09:33,040
restored and then

254
00:09:30,959 --> 00:09:34,959
i like the position and the example

255
00:09:33,040 --> 00:09:37,680
about file descriptors so

256
00:09:34,959 --> 00:09:39,040
um queer you just so what crew does

257
00:09:37,680 --> 00:09:40,319
during checkpointing it

258
00:09:39,040 --> 00:09:42,560
tries to figure out all the file

259
00:09:40,320 --> 00:09:43,360
descriptors and to which file they point

260
00:09:42,560 --> 00:09:45,839
and

261
00:09:43,360 --> 00:09:47,760
which position they are and this writes

262
00:09:45,839 --> 00:09:49,839
and q writes that to the

263
00:09:47,760 --> 00:09:51,600
checkpoint images and once the process

264
00:09:49,839 --> 00:09:53,120
is restored

265
00:09:51,600 --> 00:09:55,120
the file is opened with the same file

266
00:09:53,120 --> 00:09:56,720
descriptor it's seek to the same

267
00:09:55,120 --> 00:09:57,200
position and once the process keeps on

268
00:09:56,720 --> 00:09:59,120
running

269
00:09:57,200 --> 00:10:00,640
the file descriptors in exactly the same

270
00:09:59,120 --> 00:10:02,240
situation it used to be before

271
00:10:00,640 --> 00:10:04,240
checkpointing and so that's

272
00:10:02,240 --> 00:10:07,440
basically what creo does with all the

273
00:10:04,240 --> 00:10:10,720
other resources the process is using

274
00:10:07,440 --> 00:10:13,120
all the memory pages are mapped back

275
00:10:10,720 --> 00:10:14,000
to the place where they used to be

276
00:10:13,120 --> 00:10:16,720
before

277
00:10:14,000 --> 00:10:18,000
check pointing and we are loading all

278
00:10:16,720 --> 00:10:20,959
the security settings

279
00:10:18,000 --> 00:10:22,640
up armor as illinois and satcom we're

280
00:10:20,959 --> 00:10:23,199
doing this as late as possible as

281
00:10:22,640 --> 00:10:26,880
mentioned

282
00:10:23,200 --> 00:10:29,600
to do not have those policies interfere

283
00:10:26,880 --> 00:10:32,000
with crews changing of the process or

284
00:10:29,600 --> 00:10:35,120
restoring of the process

285
00:10:32,000 --> 00:10:38,320
and once the process has

286
00:10:35,120 --> 00:10:39,279
been set up in all the ways that it has

287
00:10:38,320 --> 00:10:41,360
to be

288
00:10:39,279 --> 00:10:43,120
we are jumping back in the original code

289
00:10:41,360 --> 00:10:44,800
and the code and the processes can

290
00:10:43,120 --> 00:10:47,200
continue to run at the same point in

291
00:10:44,800 --> 00:10:51,439
time where we check pointed

292
00:10:47,200 --> 00:10:54,720
them before so that's where the

293
00:10:51,440 --> 00:10:57,519
process restore is finished basically

294
00:10:54,720 --> 00:11:00,640
and so now to um container live

295
00:10:57,519 --> 00:11:03,600
migration to the actual

296
00:11:00,640 --> 00:11:04,800
inclusion of creo into different pros

297
00:11:03,600 --> 00:11:06,320
projects

298
00:11:04,800 --> 00:11:08,719
i think the first one i have to mention

299
00:11:06,320 --> 00:11:13,120
here is openvset because

300
00:11:08,720 --> 00:11:16,000
they invented crew for their container

301
00:11:13,120 --> 00:11:17,600
use case to be able to live migrate

302
00:11:16,000 --> 00:11:18,320
their containers from one system to

303
00:11:17,600 --> 00:11:21,760
another

304
00:11:18,320 --> 00:11:25,360
i never used it myself but

305
00:11:21,760 --> 00:11:28,880
that's the group who invented kriyu

306
00:11:25,360 --> 00:11:32,240
then one interesting user of crew

307
00:11:28,880 --> 00:11:32,800
is is google which we were informed like

308
00:11:32,240 --> 00:11:37,040
one and a half

309
00:11:32,800 --> 00:11:39,839
years ago and so google actually uses on

310
00:11:37,040 --> 00:11:40,959
in their container runtime borg creo to

311
00:11:39,839 --> 00:11:44,000
live migrate

312
00:11:40,959 --> 00:11:45,760
processes in production a lot and as far

313
00:11:44,000 --> 00:11:46,720
as we upstream crew know it they're very

314
00:11:45,760 --> 00:11:49,920
happy with

315
00:11:46,720 --> 00:11:51,360
what how it works and it works reliably

316
00:11:49,920 --> 00:11:52,240
for them so this is something which

317
00:11:51,360 --> 00:11:55,360
we're

318
00:11:52,240 --> 00:11:58,399
pretty happy about as upstream

319
00:11:55,360 --> 00:12:01,920
and lexilexd has a long integration of

320
00:11:58,399 --> 00:12:04,720
um creo for a very long time already

321
00:12:01,920 --> 00:12:05,599
then there's an integration of creo in

322
00:12:04,720 --> 00:12:08,000
in docker

323
00:12:05,600 --> 00:12:08,720
it's you have to enable the experimental

324
00:12:08,000 --> 00:12:11,440
mode to

325
00:12:08,720 --> 00:12:12,560
to use it and at this point in time i

326
00:12:11,440 --> 00:12:15,760
would say it's it's

327
00:12:12,560 --> 00:12:18,560
basically unmaintained so i'm not sure

328
00:12:15,760 --> 00:12:20,079
how good it works right now

329
00:12:18,560 --> 00:12:22,239
and then the thing i've been working on

330
00:12:20,079 --> 00:12:23,040
the last two years is the integration of

331
00:12:22,240 --> 00:12:26,399
creo

332
00:12:23,040 --> 00:12:28,399
trio and department and we have seen a

333
00:12:26,399 --> 00:12:29,600
talk about podman in the morning already

334
00:12:28,399 --> 00:12:32,160
it's a

335
00:12:29,600 --> 00:12:33,120
container engine runtime which is demon

336
00:12:32,160 --> 00:12:36,319
less

337
00:12:33,120 --> 00:12:38,560
and rootless and

338
00:12:36,320 --> 00:12:39,760
and i started to work on this beginning

339
00:12:38,560 --> 00:12:43,359
of 2018

340
00:12:39,760 --> 00:12:45,760
and first code was merged in may

341
00:12:43,360 --> 00:12:47,760
uh was written in may and merged and in

342
00:12:45,760 --> 00:12:49,760
october 2018 this was only the

343
00:12:47,760 --> 00:12:50,480
checkpoint restore implementation so you

344
00:12:49,760 --> 00:12:52,560
could

345
00:12:50,480 --> 00:12:54,560
checkpoint your container reboot your

346
00:12:52,560 --> 00:12:55,040
system restore your container and it

347
00:12:54,560 --> 00:12:56,959
would

348
00:12:55,040 --> 00:12:58,800
continue to run at the same point you

349
00:12:56,959 --> 00:13:01,040
have checkpointed it

350
00:12:58,800 --> 00:13:01,839
and then i continued oh and this

351
00:13:01,040 --> 00:13:04,719
required

352
00:13:01,839 --> 00:13:05,760
changes in all the levels of portman run

353
00:13:04,720 --> 00:13:08,880
c

354
00:13:05,760 --> 00:13:10,880
con mon and also creo um

355
00:13:08,880 --> 00:13:11,920
for how popman handles network

356
00:13:10,880 --> 00:13:14,800
namespaces

357
00:13:11,920 --> 00:13:16,319
and then after that i continue to work

358
00:13:14,800 --> 00:13:18,639
on the container live migration for

359
00:13:16,320 --> 00:13:19,760
portman this was merged in 2019 last

360
00:13:18,639 --> 00:13:23,519
year

361
00:13:19,760 --> 00:13:25,839
is already also required and changes on

362
00:13:23,519 --> 00:13:29,040
all the levels of

363
00:13:25,839 --> 00:13:31,519
um which were which are involved also

364
00:13:29,040 --> 00:13:34,079
the s linux changes were part of this

365
00:13:31,519 --> 00:13:34,560
and with this i'm already at my mi demo

366
00:13:34,079 --> 00:13:36,719
i

367
00:13:34,560 --> 00:13:38,000
copied the commands from my demo here on

368
00:13:36,720 --> 00:13:48,160
the slides

369
00:13:38,000 --> 00:13:50,320
but let's run them here

370
00:13:48,160 --> 00:13:51,680
um what i'm doing here is i'm running uh

371
00:13:50,320 --> 00:13:53,920
uh um

372
00:13:51,680 --> 00:13:55,519
i'm running a container with a wildfly

373
00:13:53,920 --> 00:13:57,199
container i have a

374
00:13:55,519 --> 00:13:59,279
stateful application there so that

375
00:13:57,199 --> 00:14:00,839
container migration is at least somehow

376
00:13:59,279 --> 00:14:03,600
useful

377
00:14:00,839 --> 00:14:06,800
um so that's another container here

378
00:14:03,600 --> 00:14:07,600
um the wildfly container is is a nice

379
00:14:06,800 --> 00:14:10,240
use case

380
00:14:07,600 --> 00:14:11,040
um because it actually takes some time

381
00:14:10,240 --> 00:14:12,800
to start

382
00:14:11,040 --> 00:14:15,599
because all the java things need to be

383
00:14:12,800 --> 00:14:17,199
loaded and and actually restoring it

384
00:14:15,600 --> 00:14:17,760
from the checkpoint is much faster like

385
00:14:17,199 --> 00:14:20,639
50

386
00:14:17,760 --> 00:14:22,000
faster than using it then starting the

387
00:14:20,639 --> 00:14:25,040
container fresh

388
00:14:22,000 --> 00:14:28,639
so now i can access my

389
00:14:25,040 --> 00:14:30,480
my java container so i have the simplest

390
00:14:28,639 --> 00:14:32,079
application which just returns an

391
00:14:30,480 --> 00:14:34,320
integer and every time i

392
00:14:32,079 --> 00:14:36,160
read it it's increased by one so i'm

393
00:14:34,320 --> 00:14:38,560
using curl to access

394
00:14:36,160 --> 00:14:40,560
the ip address from the container and my

395
00:14:38,560 --> 00:14:43,040
application is called hello world

396
00:14:40,560 --> 00:14:44,160
and the first result is zero and the

397
00:14:43,040 --> 00:14:46,240
second result is

398
00:14:44,160 --> 00:14:47,199
one so it's it's simple but it's

399
00:14:46,240 --> 00:14:49,760
stateful

400
00:14:47,199 --> 00:14:51,199
now i'm telling potman to um checkpoint

401
00:14:49,760 --> 00:14:53,680
to a container i'm using

402
00:14:51,199 --> 00:14:55,359
the the flag minus ours this tells

403
00:14:53,680 --> 00:14:57,120
podman to keep the container running so

404
00:14:55,360 --> 00:14:59,839
i'm making a checkpoint of my container

405
00:14:57,120 --> 00:15:03,360
while it keeps on running

406
00:14:59,839 --> 00:15:04,959
so now podman is telling preview to make

407
00:15:03,360 --> 00:15:06,079
the checkpoint the checkpoint has been

408
00:15:04,959 --> 00:15:08,638
written to disk

409
00:15:06,079 --> 00:15:10,079
and now i'm accessing my container again

410
00:15:08,639 --> 00:15:13,040
and now it should say two

411
00:15:10,079 --> 00:15:15,120
and three and so the container keeps on

412
00:15:13,040 --> 00:15:15,680
running while i made the checkpoint now

413
00:15:15,120 --> 00:15:18,639
i'm

414
00:15:15,680 --> 00:15:18,638
transferring the

415
00:15:19,040 --> 00:15:23,360
the uh the checkpoint archive the

416
00:15:21,279 --> 00:15:24,959
archive includes all the files about the

417
00:15:23,360 --> 00:15:26,800
running processes

418
00:15:24,959 --> 00:15:28,479
all the memory pages which have been

419
00:15:26,800 --> 00:15:31,199
damned and all the

420
00:15:28,480 --> 00:15:32,959
changes which have been made to the file

421
00:15:31,199 --> 00:15:35,758
system of the container so this includes

422
00:15:32,959 --> 00:15:38,079
all file system changes and all process

423
00:15:35,759 --> 00:15:41,440
state which i'm now transferring

424
00:15:38,079 --> 00:15:44,959
to another vm on my system and

425
00:15:41,440 --> 00:15:48,000
now i'm telling potman on the other

426
00:15:44,959 --> 00:15:50,399
system to restore the container

427
00:15:48,000 --> 00:15:51,279
and this takes about four seconds

428
00:15:50,399 --> 00:15:53,040
usually

429
00:15:51,279 --> 00:15:55,600
something like this now the container is

430
00:15:53,040 --> 00:15:58,000
restored and now i can access the com

431
00:15:55,600 --> 00:15:58,720
container using curl again and now i'm

432
00:15:58,000 --> 00:16:02,399
getting back

433
00:15:58,720 --> 00:16:04,959
the two which i got back there on top

434
00:16:02,399 --> 00:16:07,040
which is the same value before check

435
00:16:04,959 --> 00:16:09,199
pointing the container so

436
00:16:07,040 --> 00:16:10,319
a checkpoint in the container it

437
00:16:09,199 --> 00:16:12,079
probably changed

438
00:16:10,320 --> 00:16:13,920
each state but i can continue the

439
00:16:12,079 --> 00:16:14,638
container from the same state and it

440
00:16:13,920 --> 00:16:18,160
used to be

441
00:16:14,639 --> 00:16:22,000
before checkpointing that's my demo

442
00:16:18,160 --> 00:16:24,319
and with that i'm already done

443
00:16:22,000 --> 00:16:24,320
thanks

444
00:16:31,839 --> 00:16:37,839
okay biker

445
00:16:38,639 --> 00:16:42,000
uh hi thank you for your talk uh it's

446
00:16:40,560 --> 00:16:44,079
cool technology um

447
00:16:42,000 --> 00:16:45,440
have you mentioned that a year and a

448
00:16:44,079 --> 00:16:47,040
half ago google

449
00:16:45,440 --> 00:16:48,639
integrated this into borg my

450
00:16:47,040 --> 00:16:50,240
understanding about kubernetes is

451
00:16:48,639 --> 00:16:51,920
stuff's supposed to flow from borg and

452
00:16:50,240 --> 00:16:55,120
kubernetes at least theoretically

453
00:16:51,920 --> 00:16:56,240
have you heard any noise about people

454
00:16:55,120 --> 00:16:59,440
being interested in

455
00:16:56,240 --> 00:17:01,040
checkpoint restore in kubernetes

456
00:16:59,440 --> 00:17:03,120
no personally i haven't heard anything

457
00:17:01,040 --> 00:17:05,918
of that but it's

458
00:17:03,120 --> 00:17:06,959
so basically this was integrating it

459
00:17:05,919 --> 00:17:10,160
into portman

460
00:17:06,959 --> 00:17:10,720
is my first step into getting it somehow

461
00:17:10,160 --> 00:17:12,720
into

462
00:17:10,720 --> 00:17:14,480
kubernetes so now i have to somehow get

463
00:17:12,720 --> 00:17:17,439
it into i don't know cryo

464
00:17:14,480 --> 00:17:18,799
and or something like this and and then

465
00:17:17,439 --> 00:17:21,919
maybe kubernetes

466
00:17:18,799 --> 00:17:24,559
but that google uses it internally

467
00:17:21,919 --> 00:17:26,720
might make the discussion about the

468
00:17:24,559 --> 00:17:28,799
usefulness of container life migration

469
00:17:26,720 --> 00:17:29,919
to kubernetes maybe a bit easier because

470
00:17:28,799 --> 00:17:31,679
that's

471
00:17:29,919 --> 00:17:34,000
probably one of the problems that

472
00:17:31,679 --> 00:17:38,000
containers are stateless why won't you

473
00:17:34,000 --> 00:17:40,720
why do you have to live migrate them but

474
00:17:38,000 --> 00:17:44,240
but besides that it might may be easier

475
00:17:40,720 --> 00:17:44,240
to get it into kubernetes as well

476
00:17:44,320 --> 00:17:48,639
hi you talked about uh file descriptors

477
00:17:47,200 --> 00:17:50,880
being copied over uh

478
00:17:48,640 --> 00:17:51,919
can you talk more about sockets being

479
00:17:50,880 --> 00:17:55,280
copied over like

480
00:17:51,919 --> 00:17:58,480
how it's how it works behind the back

481
00:17:55,280 --> 00:18:02,399
so this is probably the question about

482
00:17:58,480 --> 00:18:05,520
tcp socket something like this so um

483
00:18:02,400 --> 00:18:07,600
crew can checkpoint and restore network

484
00:18:05,520 --> 00:18:08,240
sockets so if you have a working tcp

485
00:18:07,600 --> 00:18:10,080
connection

486
00:18:08,240 --> 00:18:13,120
it will still work on the destination

487
00:18:10,080 --> 00:18:16,480
host the only thing you have to do the

488
00:18:13,120 --> 00:18:18,320
restart process have to have access to

489
00:18:16,480 --> 00:18:20,080
the same ip address because without the

490
00:18:18,320 --> 00:18:23,280
same ip address you cannot

491
00:18:20,080 --> 00:18:23,918
restore a tcp connection and for udp it

492
00:18:23,280 --> 00:18:27,120
doesn't

493
00:18:23,919 --> 00:18:29,039
matter it's just it just works

494
00:18:27,120 --> 00:18:31,439
and for tcp you have to have the same ip

495
00:18:29,039 --> 00:18:31,440
address

496
00:18:31,760 --> 00:18:36,480
other questions okay

497
00:18:39,520 --> 00:18:44,559
there's another one

498
00:18:42,640 --> 00:18:46,400
databases could you please tell us more

499
00:18:44,559 --> 00:18:48,639
about how it's good with databases of

500
00:18:46,400 --> 00:18:50,960
course we had this experience before

501
00:18:48,640 --> 00:18:52,320
and databases nothing like they usually

502
00:18:50,960 --> 00:18:55,360
need to be stateful and

503
00:18:52,320 --> 00:18:58,799
that was a problem for us to handle

504
00:18:55,360 --> 00:19:01,039
migration of active databases actually

505
00:18:58,799 --> 00:19:02,480
so how is the progress right now with

506
00:19:01,039 --> 00:19:05,840
this

507
00:19:02,480 --> 00:19:08,080
thank you so um databases so

508
00:19:05,840 --> 00:19:10,000
i guess this basically depends on how

509
00:19:08,080 --> 00:19:13,120
your database is outlayed in your

510
00:19:10,000 --> 00:19:15,280
in your container if your all your

511
00:19:13,120 --> 00:19:17,199
database files are mounted into the

512
00:19:15,280 --> 00:19:19,200
container then it's probably you

513
00:19:17,200 --> 00:19:20,480
migrate your container and you have to

514
00:19:19,200 --> 00:19:22,480
migrate your

515
00:19:20,480 --> 00:19:24,799
data directory and then restore it it

516
00:19:22,480 --> 00:19:28,559
should work um

517
00:19:24,799 --> 00:19:33,200
there are many years ago

518
00:19:28,559 --> 00:19:36,879
we tried to migrate oracle databases

519
00:19:33,200 --> 00:19:39,679
and this worked but the database shut

520
00:19:36,880 --> 00:19:42,720
down itself after the migration

521
00:19:39,679 --> 00:19:45,200
and we think um

522
00:19:42,720 --> 00:19:46,320
that this is because the time is

523
00:19:45,200 --> 00:19:48,880
different on the different

524
00:19:46,320 --> 00:19:50,960
hosts so with the time name space which

525
00:19:48,880 --> 00:19:54,640
was just accepted

526
00:19:50,960 --> 00:19:55,360
this week um and once it makes its way

527
00:19:54,640 --> 00:19:58,559
to creo

528
00:19:55,360 --> 00:19:59,760
this could be a resolved in a way that

529
00:19:58,559 --> 00:20:01,840
we can

530
00:19:59,760 --> 00:20:04,000
tell the process in the container that

531
00:20:01,840 --> 00:20:04,799
your time actually hasn't changed you're

532
00:20:04,000 --> 00:20:07,120
still running

533
00:20:04,799 --> 00:20:08,559
on the same clock monotonic as before or

534
00:20:07,120 --> 00:20:10,559
something like this so

535
00:20:08,559 --> 00:20:12,240
there's the work on the time name space

536
00:20:10,559 --> 00:20:17,039
is probably the most important for

537
00:20:12,240 --> 00:20:17,039
for the database i would guess but

538
00:20:17,600 --> 00:20:21,840
thank you

