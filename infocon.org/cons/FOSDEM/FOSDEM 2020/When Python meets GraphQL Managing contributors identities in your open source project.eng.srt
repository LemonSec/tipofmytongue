1
00:00:05,759 --> 00:00:10,320
can you hear me

2
00:00:07,200 --> 00:00:12,719
now much better right okay

3
00:00:10,320 --> 00:00:14,400
okay now it's working okay hi everyone

4
00:00:12,719 --> 00:00:17,198
again

5
00:00:14,400 --> 00:00:18,720
okay so thank you for being here my name

6
00:00:17,199 --> 00:00:21,920
is miguel angel fernandez

7
00:00:18,720 --> 00:00:24,320
i'm working at detergent

8
00:00:21,920 --> 00:00:25,199
my company does software development

9
00:00:24,320 --> 00:00:28,240
analytics

10
00:00:25,199 --> 00:00:30,800
i'm part of the engineering team

11
00:00:28,240 --> 00:00:32,719
i'm working as a software developer and

12
00:00:30,800 --> 00:00:35,920
i'm also involved involved in stuff

13
00:00:32,719 --> 00:00:39,200
related with data and metrics

14
00:00:35,920 --> 00:00:41,360
okay so first to give you a a glance

15
00:00:39,200 --> 00:00:42,239
of the talk first i'm going to talk

16
00:00:41,360 --> 00:00:44,879
about

17
00:00:42,239 --> 00:00:45,440
the problem we are trying to solve and

18
00:00:44,879 --> 00:00:48,879
then

19
00:00:45,440 --> 00:00:49,599
we are talking about uh graphql a little

20
00:00:48,879 --> 00:00:51,599
bit

21
00:00:49,600 --> 00:00:52,640
and then we are going to see a little

22
00:00:51,600 --> 00:00:55,120
bit of uh

23
00:00:52,640 --> 00:00:56,840
how the implementation went and the

24
00:00:55,120 --> 00:01:00,640
process and so on

25
00:00:56,840 --> 00:01:04,080
okay so we have uh we have people

26
00:01:00,640 --> 00:01:06,159
contributing to a software project

27
00:01:04,080 --> 00:01:07,280
and people contributing to an open

28
00:01:06,159 --> 00:01:12,000
source project

29
00:01:07,280 --> 00:01:14,400
uses a lot of different tools right we

30
00:01:12,000 --> 00:01:16,799
have huge variety of tools depending on

31
00:01:14,400 --> 00:01:18,080
the aspect you want to focus on could be

32
00:01:16,799 --> 00:01:21,280
code could be

33
00:01:18,080 --> 00:01:23,759
messaging right so

34
00:01:21,280 --> 00:01:25,680
you may want to ask some questions about

35
00:01:23,759 --> 00:01:27,520
the project

36
00:01:25,680 --> 00:01:29,040
so first is how can i how can you

37
00:01:27,520 --> 00:01:31,119
measure your project that's that's the

38
00:01:29,040 --> 00:01:32,960
main question

39
00:01:31,119 --> 00:01:34,560
first is how many contributors do we

40
00:01:32,960 --> 00:01:37,759
have these are basic questions

41
00:01:34,560 --> 00:01:38,479
right another question could be how many

42
00:01:37,759 --> 00:01:41,520
companies

43
00:01:38,479 --> 00:01:45,119
are contributing to my project okay

44
00:01:41,520 --> 00:01:48,158
to ask to answer these basic questions

45
00:01:45,119 --> 00:01:49,040
uh you need to focus on identities right

46
00:01:48,159 --> 00:01:51,200
and to have

47
00:01:49,040 --> 00:01:53,119
all the contributors for your project

48
00:01:51,200 --> 00:01:56,159
properly identified right

49
00:01:53,119 --> 00:01:58,560
so this is an example this is

50
00:01:56,159 --> 00:02:00,399
a guy contributing to a project his name

51
00:01:58,560 --> 00:02:03,119
is tom bridle

52
00:02:00,399 --> 00:02:05,520
and he's affiliated with slithering okay

53
00:02:03,119 --> 00:02:08,399
he's part of hogwarts

54
00:02:05,520 --> 00:02:10,799
and then we have another contributor

55
00:02:08,399 --> 00:02:14,400
this guy over here

56
00:02:10,800 --> 00:02:17,680
is called lord voldemort he's working as

57
00:02:14,400 --> 00:02:17,680
a freelance switzer now

58
00:02:18,879 --> 00:02:26,079
but wait he's the same person

59
00:02:22,480 --> 00:02:27,920
so as a project manager you may not have

60
00:02:26,080 --> 00:02:29,599
this information so it's difficult to

61
00:02:27,920 --> 00:02:31,359
properly identify

62
00:02:29,599 --> 00:02:33,119
a contributor in your project if you

63
00:02:31,360 --> 00:02:35,440
don't identify them properly

64
00:02:33,120 --> 00:02:37,040
you may think that these are different

65
00:02:35,440 --> 00:02:37,840
contributors but they are not they are

66
00:02:37,040 --> 00:02:41,599
deserved person

67
00:02:37,840 --> 00:02:44,080
right this is one of the problems

68
00:02:41,599 --> 00:02:45,679
another problem is that an open source

69
00:02:44,080 --> 00:02:46,160
project is a little bit more complex

70
00:02:45,680 --> 00:02:48,959
than that

71
00:02:46,160 --> 00:02:50,799
right first this is our ceo the ceo of

72
00:02:48,959 --> 00:02:53,200
my company manrique

73
00:02:50,800 --> 00:02:54,319
so he has made a lot of comments get

74
00:02:53,200 --> 00:02:57,679
comments with

75
00:02:54,319 --> 00:03:01,119
different emails he has

76
00:02:57,680 --> 00:03:01,680
his github account he has participated

77
00:03:01,120 --> 00:03:03,519
in

78
00:03:01,680 --> 00:03:06,319
several mailing lists with different

79
00:03:03,519 --> 00:03:07,599
emails he has a fabricator account to do

80
00:03:06,319 --> 00:03:11,679
ticketing

81
00:03:07,599 --> 00:03:14,799
he has a slack with different channels

82
00:03:11,680 --> 00:03:15,440
and he has worked in many companies

83
00:03:14,800 --> 00:03:17,280
right

84
00:03:15,440 --> 00:03:18,879
and we have also the dates where he

85
00:03:17,280 --> 00:03:22,239
started where he end

86
00:03:18,879 --> 00:03:24,159
when he ended right so it's a little bit

87
00:03:22,239 --> 00:03:27,280
more complex than the other

88
00:03:24,159 --> 00:03:30,959
than the other case right okay so

89
00:03:27,280 --> 00:03:32,560
how do we solve this uh the question you

90
00:03:30,959 --> 00:03:34,640
may ask is who is who

91
00:03:32,560 --> 00:03:36,239
and who is going to ask this question

92
00:03:34,640 --> 00:03:38,000
could be anyone but

93
00:03:36,239 --> 00:03:40,000
usually this is the project manager

94
00:03:38,000 --> 00:03:40,720
getting crazy about all these identities

95
00:03:40,000 --> 00:03:46,480
and how to

96
00:03:40,720 --> 00:03:48,640
identify everyone sorry about the mouse

97
00:03:46,480 --> 00:03:49,518
and here comes hurting hat which is the

98
00:03:48,640 --> 00:03:51,839
tool

99
00:03:49,519 --> 00:03:53,599
i'm talking about he's the sorting hat

100
00:03:51,840 --> 00:03:56,720
for you for those of you

101
00:03:53,599 --> 00:03:59,920
that you don't know harry potter that

102
00:03:56,720 --> 00:04:00,560
this hat is the one that the students

103
00:03:59,920 --> 00:04:02,640
puts in

104
00:04:00,560 --> 00:04:05,599
in their head and it tells you which

105
00:04:02,640 --> 00:04:07,920
house in hogwarts you should be in right

106
00:04:05,599 --> 00:04:08,879
so sorting hat is using a relational

107
00:04:07,920 --> 00:04:11,200
model

108
00:04:08,879 --> 00:04:13,359
with all the entities that are related

109
00:04:11,200 --> 00:04:14,159
with the with identities you can you can

110
00:04:13,360 --> 00:04:16,639
see their

111
00:04:14,159 --> 00:04:17,519
profiles you can see enrollments

112
00:04:16,639 --> 00:04:20,560
organizations

113
00:04:17,519 --> 00:04:23,919
domain and so on right

114
00:04:20,560 --> 00:04:26,000
okay so we have the the guy

115
00:04:23,919 --> 00:04:28,639
from before this is love baltimore and

116
00:04:26,000 --> 00:04:30,880
tom riddle right

117
00:04:28,639 --> 00:04:31,840
we knew we know that he belonged to a

118
00:04:30,880 --> 00:04:35,040
slithering

119
00:04:31,840 --> 00:04:38,239
and we have a basic profile about him so

120
00:04:35,040 --> 00:04:41,360
sorting hat can help you can help us

121
00:04:38,240 --> 00:04:44,639
saying okay merge these two identities

122
00:04:41,360 --> 00:04:45,280
affiliate this person and complete his

123
00:04:44,639 --> 00:04:49,120
profile

124
00:04:45,280 --> 00:04:49,119
with this information okay

125
00:04:49,600 --> 00:04:55,360
okay so far how can you interact with

126
00:04:52,880 --> 00:04:57,759
shorting hat so you can interact with

127
00:04:55,360 --> 00:05:00,160
certain hat via command line

128
00:04:57,759 --> 00:05:01,919
you can use hashtag which is a web tool

129
00:05:00,160 --> 00:05:04,479
based on jango to

130
00:05:01,919 --> 00:05:05,680
to communicate with shorting hat and you

131
00:05:04,479 --> 00:05:07,120
can

132
00:05:05,680 --> 00:05:09,680
interact with certain hat as a python

133
00:05:07,120 --> 00:05:11,520
module okay

134
00:05:09,680 --> 00:05:14,000
so the main idea here is to build a

135
00:05:11,520 --> 00:05:17,120
robust api for sorting hat

136
00:05:14,000 --> 00:05:19,039
uh for making this easier even easier to

137
00:05:17,120 --> 00:05:20,160
integrate it with other external

138
00:05:19,039 --> 00:05:22,400
applications

139
00:05:20,160 --> 00:05:23,759
it has to be flexible and easy to adapt

140
00:05:22,400 --> 00:05:24,638
to new technologies and other

141
00:05:23,759 --> 00:05:26,160
technologies

142
00:05:24,639 --> 00:05:28,320
and of course ensure consistent

143
00:05:26,160 --> 00:05:32,080
consistency as we expect that

144
00:05:28,320 --> 00:05:35,120
many users are are using sorting hat

145
00:05:32,080 --> 00:05:39,198
at the same time right

146
00:05:35,120 --> 00:05:42,080
and here comes graphql

147
00:05:39,199 --> 00:05:43,840
how many of you know something about

148
00:05:42,080 --> 00:05:47,359
graphql

149
00:05:43,840 --> 00:05:50,719
okay so probably

150
00:05:47,360 --> 00:05:53,360
most of you or those who raise your hand

151
00:05:50,720 --> 00:05:54,960
just giving a quick definition graphql

152
00:05:53,360 --> 00:05:57,120
is a query language

153
00:05:54,960 --> 00:05:58,719
uh is typically typically served over

154
00:05:57,120 --> 00:06:02,639
http

155
00:05:58,720 --> 00:06:05,840
protocol it is also a specification

156
00:06:02,639 --> 00:06:07,440
for client server communication right

157
00:06:05,840 --> 00:06:09,599
but it doesn't tell you

158
00:06:07,440 --> 00:06:11,840
which language should you use or how the

159
00:06:09,600 --> 00:06:14,160
data has to be stored or how to

160
00:06:11,840 --> 00:06:15,119
uh which client you have to support that

161
00:06:14,160 --> 00:06:17,680
that's the

162
00:06:15,120 --> 00:06:19,840
it's only a specification right and it

163
00:06:17,680 --> 00:06:21,039
is based on graph theory so it uses

164
00:06:19,840 --> 00:06:23,359
concepts from

165
00:06:21,039 --> 00:06:24,960
mathematical graph theory for those of

166
00:06:23,360 --> 00:06:27,440
you just in case you don't know

167
00:06:24,960 --> 00:06:28,880
if you see the graphql logo the pink

168
00:06:27,440 --> 00:06:30,880
dots are the nodes

169
00:06:28,880 --> 00:06:32,319
the lines between them are the edges and

170
00:06:30,880 --> 00:06:35,759
the connections means

171
00:06:32,319 --> 00:06:38,800
the direction of those edges okay

172
00:06:35,759 --> 00:06:41,680
okay so let's compare a traditional

173
00:06:38,800 --> 00:06:42,960
breast based application versus graphql

174
00:06:41,680 --> 00:06:44,880
approach

175
00:06:42,960 --> 00:06:46,880
a rest tradition our traditional rest

176
00:06:44,880 --> 00:06:48,080
approach is the one used by hot style

177
00:06:46,880 --> 00:06:51,360
which is the web interface

178
00:06:48,080 --> 00:06:54,719
we and we are we have right now so

179
00:06:51,360 --> 00:06:57,280
imagine that you you want a basic view

180
00:06:54,720 --> 00:06:59,120
of a profile of a person so you have an

181
00:06:57,280 --> 00:07:01,840
unique identity which is the

182
00:06:59,120 --> 00:07:03,199
the main id for that person and you what

183
00:07:01,840 --> 00:07:05,919
you want the

184
00:07:03,199 --> 00:07:07,759
uh his or her identities in all the data

185
00:07:05,919 --> 00:07:09,680
sources

186
00:07:07,759 --> 00:07:11,680
you want also the profile with the name

187
00:07:09,680 --> 00:07:14,880
maybe the gender the country

188
00:07:11,680 --> 00:07:18,080
okay also the enrollments

189
00:07:14,880 --> 00:07:21,840
and uh for every enrollment uh a main

190
00:07:18,080 --> 00:07:23,919
domain for that organization okay

191
00:07:21,840 --> 00:07:25,039
and this is what the query will look

192
00:07:23,919 --> 00:07:28,560
like will

193
00:07:25,039 --> 00:07:31,199
look like in graphql okay

194
00:07:28,560 --> 00:07:32,720
so as you see in one request you are

195
00:07:31,199 --> 00:07:34,240
asking for

196
00:07:32,720 --> 00:07:36,319
all the things that you need for that

197
00:07:34,240 --> 00:07:39,039
view and you can specify

198
00:07:36,319 --> 00:07:39,680
at the level of the field of every

199
00:07:39,039 --> 00:07:42,800
endpoint

200
00:07:39,680 --> 00:07:44,720
what you want to show okay so

201
00:07:42,800 --> 00:07:47,280
i'm not i'm not going to be partial

202
00:07:44,720 --> 00:07:49,919
right now i'm just wanted to

203
00:07:47,280 --> 00:07:51,919
point the strongest points the worst

204
00:07:49,919 --> 00:07:55,680
points for the traditional

205
00:07:51,919 --> 00:07:59,440
um approach and the best for graphql one

206
00:07:55,680 --> 00:08:00,960
so as i said rest is just a convention

207
00:07:59,440 --> 00:08:02,479
between the server and the client it's

208
00:08:00,960 --> 00:08:05,440
not a specification so

209
00:08:02,479 --> 00:08:06,080
you may have your own rules for that you

210
00:08:05,440 --> 00:08:07,919
can have

211
00:08:06,080 --> 00:08:09,199
more data than you need or less data

212
00:08:07,919 --> 00:08:12,479
than you need that's over or

213
00:08:09,199 --> 00:08:13,840
under fetching the api documentation is

214
00:08:12,479 --> 00:08:15,680
not tied to development

215
00:08:13,840 --> 00:08:17,520
and we all know how hard is to write

216
00:08:15,680 --> 00:08:19,919
good documentation to

217
00:08:17,520 --> 00:08:21,520
the things that we we code and as you

218
00:08:19,919 --> 00:08:24,000
have seen in the last

219
00:08:21,520 --> 00:08:24,840
slide you have multiple requests for a

220
00:08:24,000 --> 00:08:28,879
per view

221
00:08:24,840 --> 00:08:31,039
right what about gradual

222
00:08:28,879 --> 00:08:32,719
is a strongly typed language this means

223
00:08:31,039 --> 00:08:34,880
you define

224
00:08:32,719 --> 00:08:36,240
the abstract types you have and its

225
00:08:34,880 --> 00:08:40,000
field will

226
00:08:36,240 --> 00:08:42,320
which type so it should have

227
00:08:40,000 --> 00:08:44,320
uh so the client defines what if

228
00:08:42,320 --> 00:08:45,600
receives as you saw in the other query

229
00:08:44,320 --> 00:08:48,480
the client is telling

230
00:08:45,600 --> 00:08:49,519
how it how it wants to receive the

231
00:08:48,480 --> 00:08:51,360
information

232
00:08:49,519 --> 00:08:52,640
the server only sends what the client

233
00:08:51,360 --> 00:08:55,680
needs

234
00:08:52,640 --> 00:08:59,120
and there is one single request per view

235
00:08:55,680 --> 00:09:03,439
so summarizing i think we

236
00:08:59,120 --> 00:09:06,080
we get graphql as a winner

237
00:09:03,440 --> 00:09:08,800
i'm talking about implementing process a

238
00:09:06,080 --> 00:09:11,760
little bit

239
00:09:08,800 --> 00:09:12,560
so first we are going to talk about the

240
00:09:11,760 --> 00:09:16,640
data model

241
00:09:12,560 --> 00:09:18,399
and schema we are going to talk about

242
00:09:16,640 --> 00:09:20,160
how to implement basic queries and

243
00:09:18,399 --> 00:09:22,399
mutations which are basic entities

244
00:09:20,160 --> 00:09:25,360
together with the schema basic entities

245
00:09:22,399 --> 00:09:25,360
of graphql

246
00:09:25,600 --> 00:09:30,240
we added support for paginated results

247
00:09:30,480 --> 00:09:34,560
we are now in the process of adding

248
00:09:32,320 --> 00:09:37,920
authentication we are talking about how

249
00:09:34,560 --> 00:09:38,560
we are doing that and also some further

250
00:09:37,920 --> 00:09:42,160
steps

251
00:09:38,560 --> 00:09:44,160
okay okay about implementation

252
00:09:42,160 --> 00:09:46,319
and graphql as i said before is not tied

253
00:09:44,160 --> 00:09:48,839
to any programming language so you may

254
00:09:46,320 --> 00:09:50,080
you find implementation for different

255
00:09:48,839 --> 00:09:53,519
languages

256
00:09:50,080 --> 00:09:56,320
graphene is a library that provides

257
00:09:53,519 --> 00:09:58,320
tools to implement a graphql based api

258
00:09:56,320 --> 00:10:01,279
and graphene django

259
00:09:58,320 --> 00:10:01,920
is a library which is built on top of

260
00:10:01,279 --> 00:10:03,839
graphene

261
00:10:01,920 --> 00:10:05,199
right so it provides some additional

262
00:10:03,839 --> 00:10:07,839
abstractions that

263
00:10:05,200 --> 00:10:09,760
you need it may ease the process of

264
00:10:07,839 --> 00:10:10,399
implementing graphical functionality

265
00:10:09,760 --> 00:10:13,519
using

266
00:10:10,399 --> 00:10:14,959
django using django objects how many of

267
00:10:13,519 --> 00:10:17,920
you

268
00:10:14,959 --> 00:10:20,079
knows django and have or have worked

269
00:10:17,920 --> 00:10:22,240
with django before

270
00:10:20,079 --> 00:10:23,199
okay so uh most of you are familiar with

271
00:10:22,240 --> 00:10:26,880
django

272
00:10:23,200 --> 00:10:28,640
perfect okay so first we have to do is

273
00:10:26,880 --> 00:10:32,079
to define the schema right

274
00:10:28,640 --> 00:10:34,720
and basically graphql needs

275
00:10:32,079 --> 00:10:35,519
three basic entities the schema is

276
00:10:34,720 --> 00:10:38,079
defined

277
00:10:35,519 --> 00:10:40,880
by types which types are we going to

278
00:10:38,079 --> 00:10:43,040
need for our model

279
00:10:40,880 --> 00:10:44,800
and on top of those types we are going

280
00:10:43,040 --> 00:10:45,519
to define queries for obtaining the

281
00:10:44,800 --> 00:10:49,680
results

282
00:10:45,519 --> 00:10:53,040
asking for those objects of those types

283
00:10:49,680 --> 00:10:55,439
and mutations which are request

284
00:10:53,040 --> 00:10:56,160
changing the objects we have in the

285
00:10:55,440 --> 00:10:59,360
database

286
00:10:56,160 --> 00:11:00,079
right and that's that as a whole makes

287
00:10:59,360 --> 00:11:04,560
the graphql

288
00:11:00,079 --> 00:11:07,760
schema okay okay so what does

289
00:11:04,560 --> 00:11:10,800
this look like in django

290
00:11:07,760 --> 00:11:12,880
okay so as most of you know

291
00:11:10,800 --> 00:11:14,319
go but i think that goes for the rest of

292
00:11:12,880 --> 00:11:16,480
the of the people too

293
00:11:14,320 --> 00:11:17,360
instead of types in general we define

294
00:11:16,480 --> 00:11:21,279
models

295
00:11:17,360 --> 00:11:22,079
right for the queries we are defining we

296
00:11:21,279 --> 00:11:24,880
have to

297
00:11:22,079 --> 00:11:25,439
define resolvers which are functions uh

298
00:11:24,880 --> 00:11:28,399
telling

299
00:11:25,440 --> 00:11:30,160
how to solve each query how to return

300
00:11:28,399 --> 00:11:32,320
the results

301
00:11:30,160 --> 00:11:33,600
and the mutations are operations

302
00:11:32,320 --> 00:11:35,920
creating things

303
00:11:33,600 --> 00:11:37,200
reading things updating or deleting any

304
00:11:35,920 --> 00:11:39,439
object in the database

305
00:11:37,200 --> 00:11:39,440
okay

306
00:11:40,480 --> 00:11:44,640
and that's the grafiniango schema about

307
00:11:43,200 --> 00:11:47,839
the data model

308
00:11:44,640 --> 00:11:49,519
it turns out it is already a graph we

309
00:11:47,839 --> 00:11:52,639
saw before a picture

310
00:11:49,519 --> 00:11:56,800
so it made sense to to

311
00:11:52,639 --> 00:11:58,240
modalize this as a graph being

312
00:11:56,800 --> 00:12:00,399
the nodes you see the nodes and the

313
00:11:58,240 --> 00:12:02,880
edges right so we

314
00:12:00,399 --> 00:12:04,240
will have nodes for identities nodes for

315
00:12:02,880 --> 00:12:06,480
the profile

316
00:12:04,240 --> 00:12:08,839
nodes for the domains nodes for the

317
00:12:06,480 --> 00:12:11,839
organizations and so on

318
00:12:08,839 --> 00:12:11,839
okay

319
00:12:12,480 --> 00:12:20,079
okay so let's start uh

320
00:12:15,839 --> 00:12:22,480
sneaking something uh somehow into the

321
00:12:20,079 --> 00:12:25,199
implementation so this is a basic recipe

322
00:12:22,480 --> 00:12:27,519
for building a query in graphql using

323
00:12:25,200 --> 00:12:28,240
the graphene django library i don't know

324
00:12:27,519 --> 00:12:30,160
for those

325
00:12:28,240 --> 00:12:32,000
in the back please tell me if you can

326
00:12:30,160 --> 00:12:34,319
see the code if not

327
00:12:32,000 --> 00:12:35,519
remember that the slides are available

328
00:12:34,320 --> 00:12:37,600
in in the

329
00:12:35,519 --> 00:12:39,600
website of this talk you can see a link

330
00:12:37,600 --> 00:12:42,880
to the slides okay

331
00:12:39,600 --> 00:12:45,440
so first you define a class in in

332
00:12:42,880 --> 00:12:47,360
models script in django creating an

333
00:12:45,440 --> 00:12:50,480
object so we are defining here

334
00:12:47,360 --> 00:12:51,600
a simple one which is an organization it

335
00:12:50,480 --> 00:12:54,000
only has

336
00:12:51,600 --> 00:12:55,360
one field which is the name which is a

337
00:12:54,000 --> 00:12:58,639
chart field right this is

338
00:12:55,360 --> 00:13:00,480
django syntax

339
00:12:58,639 --> 00:13:02,800
and then in the script related to the

340
00:13:00,480 --> 00:13:05,200
schema we are

341
00:13:02,800 --> 00:13:06,800
saying graphql okay this is an

342
00:13:05,200 --> 00:13:09,920
organization type

343
00:13:06,800 --> 00:13:11,040
object and it's based on the model we

344
00:13:09,920 --> 00:13:13,680
have created there

345
00:13:11,040 --> 00:13:15,920
okay and then we can define the

346
00:13:13,680 --> 00:13:18,638
different queries we want to

347
00:13:15,920 --> 00:13:20,240
we want to have so first is a query

348
00:13:18,639 --> 00:13:22,639
asking for organizations

349
00:13:20,240 --> 00:13:24,079
it will going to return a list of

350
00:13:22,639 --> 00:13:26,240
organization type objects

351
00:13:24,079 --> 00:13:27,599
right and then we have the resolver

352
00:13:26,240 --> 00:13:31,040
which get the objects

353
00:13:27,600 --> 00:13:34,240
and they it orders the the

354
00:13:31,040 --> 00:13:36,079
results by name right

355
00:13:34,240 --> 00:13:38,000
and the good thing is documentation is

356
00:13:36,079 --> 00:13:40,399
already updated

357
00:13:38,000 --> 00:13:41,440
if you check i don't know if you any of

358
00:13:40,399 --> 00:13:43,199
you have played

359
00:13:41,440 --> 00:13:44,800
with graphql before but most of the

360
00:13:43,199 --> 00:13:47,839
implementations use

361
00:13:44,800 --> 00:13:49,439
a basic interface called graphic ul

362
00:13:47,839 --> 00:13:51,279
where you can see that

363
00:13:49,440 --> 00:13:52,720
you can perform the queries and see the

364
00:13:51,279 --> 00:13:55,439
results

365
00:13:52,720 --> 00:13:56,000
and there is a there is a section for

366
00:13:55,440 --> 00:13:58,000
the

367
00:13:56,000 --> 00:13:59,199
automatic documentation that is created

368
00:13:58,000 --> 00:14:00,800
based on the schema

369
00:13:59,199 --> 00:14:02,959
so you can see there there is a query

370
00:14:00,800 --> 00:14:06,399
defined and which objects

371
00:14:02,959 --> 00:14:08,800
are this is this query returning

372
00:14:06,399 --> 00:14:09,839
it's an organization type object it has

373
00:14:08,800 --> 00:14:12,399
an id

374
00:14:09,839 --> 00:14:14,320
created at time and last modified these

375
00:14:12,399 --> 00:14:17,440
these fields are added by django

376
00:14:14,320 --> 00:14:20,800
because it is inheriting from a very

377
00:14:17,440 --> 00:14:21,920
basic jungle class and the name field we

378
00:14:20,800 --> 00:14:26,160
have added before

379
00:14:21,920 --> 00:14:28,639
okay about building mutations

380
00:14:26,160 --> 00:14:29,680
it's similar we have to define in the

381
00:14:28,639 --> 00:14:32,880
schema

382
00:14:29,680 --> 00:14:34,479
how are we calling the mutation which is

383
00:14:32,880 --> 00:14:36,399
in this case other organization we want

384
00:14:34,480 --> 00:14:37,519
to add a new organization into the

385
00:14:36,399 --> 00:14:41,040
database

386
00:14:37,519 --> 00:14:42,800
with the field name so we defined that

387
00:14:41,040 --> 00:14:44,560
the field is an organization type

388
00:14:42,800 --> 00:14:47,040
field which is the one we have defined

389
00:14:44,560 --> 00:14:48,719
before for the query okay

390
00:14:47,040 --> 00:14:50,800
and then we have another class for

391
00:14:48,720 --> 00:14:52,399
defining all the mutations like the one

392
00:14:50,800 --> 00:14:55,680
before for the queries

393
00:14:52,399 --> 00:14:57,519
and you can you can say here

394
00:14:55,680 --> 00:14:59,040
this is a field we are where we are

395
00:14:57,519 --> 00:15:00,000
expecting a field which is the name for

396
00:14:59,040 --> 00:15:03,599
adding the

397
00:15:00,000 --> 00:15:07,279
organization okay so if you

398
00:15:03,600 --> 00:15:09,839
if you check on the function mutate

399
00:15:07,279 --> 00:15:11,360
it it calls to uh another faction called

400
00:15:09,839 --> 00:15:14,079
i've organization right

401
00:15:11,360 --> 00:15:16,000
this is behind the scenes is calling

402
00:15:14,079 --> 00:15:19,359
this is how we have defined this

403
00:15:16,000 --> 00:15:20,399
a method in the api script taking care

404
00:15:19,360 --> 00:15:23,920
of

405
00:15:20,399 --> 00:15:26,800
validating or controlling the

406
00:15:23,920 --> 00:15:29,439
errors that we may have and also that

407
00:15:26,800 --> 00:15:31,920
apa method calls a db method that

408
00:15:29,440 --> 00:15:33,759
handles the interaction with the

409
00:15:31,920 --> 00:15:36,079
database itself

410
00:15:33,759 --> 00:15:37,680
in this case we are validating the field

411
00:15:36,079 --> 00:15:39,439
and checking for integrity errors to

412
00:15:37,680 --> 00:15:42,160
check that it's not duplicate or

413
00:15:39,440 --> 00:15:44,240
things like that and again the

414
00:15:42,160 --> 00:15:46,880
documentation is already updated so this

415
00:15:44,240 --> 00:15:46,880
is a good thing

416
00:15:48,240 --> 00:15:52,839
okay about pagination there are many

417
00:15:51,199 --> 00:15:56,800
ways to implement

418
00:15:52,839 --> 00:15:59,440
pagination most of the methods proposed

419
00:15:56,800 --> 00:15:59,439
are based on

420
00:16:00,160 --> 00:16:07,040
first offset method right

421
00:16:03,839 --> 00:16:09,680
you can also use the id of an object

422
00:16:07,040 --> 00:16:11,199
or you can use a cursor that you is an

423
00:16:09,680 --> 00:16:13,758
object that you create for that

424
00:16:11,199 --> 00:16:17,279
the question you may have is how are we

425
00:16:13,759 --> 00:16:21,120
getting this cursor in case we are

426
00:16:17,279 --> 00:16:22,639
we are following any of these approaches

427
00:16:21,120 --> 00:16:24,160
the thing is the cursor is not a

428
00:16:22,639 --> 00:16:26,320
property of the

429
00:16:24,160 --> 00:16:27,839
of the object itself you can store that

430
00:16:26,320 --> 00:16:30,720
in an organization object or

431
00:16:27,839 --> 00:16:31,920
a identity object right it's a property

432
00:16:30,720 --> 00:16:33,920
of the connection

433
00:16:31,920 --> 00:16:35,680
and that here it comes the concept of

434
00:16:33,920 --> 00:16:38,560
edges and connections

435
00:16:35,680 --> 00:16:39,599
so imagine that you have two nodes and

436
00:16:38,560 --> 00:16:42,959
one node is friend

437
00:16:39,600 --> 00:16:45,759
a another node is friend b so

438
00:16:42,959 --> 00:16:46,638
you have the forensic time and that that

439
00:16:45,759 --> 00:16:48,560
value only

440
00:16:46,639 --> 00:16:51,199
makes sense in the connection it's not a

441
00:16:48,560 --> 00:16:53,439
property of each of it only makes sense

442
00:16:51,199 --> 00:16:54,240
about the connection right so this is

443
00:16:53,440 --> 00:16:56,399
information that

444
00:16:54,240 --> 00:16:58,079
is specific for the connection for the

445
00:16:56,399 --> 00:17:00,800
edge rather than the object

446
00:16:58,079 --> 00:17:01,758
themselves there are specifications for

447
00:17:00,800 --> 00:17:05,839
for building this

448
00:17:01,759 --> 00:17:08,799
in graphql like rely but

449
00:17:05,839 --> 00:17:09,918
for this particular case it's too

450
00:17:08,799 --> 00:17:12,639
complex because

451
00:17:09,919 --> 00:17:15,199
we will have to change the whole model

452
00:17:12,640 --> 00:17:18,240
we have defined before

453
00:17:15,199 --> 00:17:21,520
and well basically

454
00:17:18,240 --> 00:17:23,199
we wanted to take our own approach but

455
00:17:21,520 --> 00:17:26,319
without inventing the wheel

456
00:17:23,199 --> 00:17:29,120
right so in this case we went for a

457
00:17:26,319 --> 00:17:29,918
hybrid approach using offsets and limits

458
00:17:29,120 --> 00:17:33,199
but using

459
00:17:29,919 --> 00:17:35,520
paginator jango objects which where it's

460
00:17:33,200 --> 00:17:38,640
already implemented it's well tested

461
00:17:35,520 --> 00:17:40,799
we we know it works well so

462
00:17:38,640 --> 00:17:42,000
and we also are benefiting from edges

463
00:17:40,799 --> 00:17:44,480
and connections

464
00:17:42,000 --> 00:17:45,360
okay so i will talk about this in a

465
00:17:44,480 --> 00:17:47,200
moment so

466
00:17:45,360 --> 00:17:48,719
it seems like we are complicating our

467
00:17:47,200 --> 00:17:50,720
lives but it is

468
00:17:48,720 --> 00:17:52,000
not it is not work because we are using

469
00:17:50,720 --> 00:17:55,120
a well proven

470
00:17:52,000 --> 00:17:56,960
uh implementation of of this

471
00:17:55,120 --> 00:17:58,399
so this is what a query looks like i

472
00:17:56,960 --> 00:18:01,440
don't know if i think i

473
00:17:58,400 --> 00:18:02,960
i didn't show any query before so you

474
00:18:01,440 --> 00:18:05,360
can see the query is

475
00:18:02,960 --> 00:18:06,640
explicit in two parts first in

476
00:18:05,360 --> 00:18:08,320
organization i'm asking for

477
00:18:06,640 --> 00:18:10,240
organizations right

478
00:18:08,320 --> 00:18:11,918
we are setting the filters i'm asking

479
00:18:10,240 --> 00:18:15,280
for the first page

480
00:18:11,919 --> 00:18:17,760
and i have i want free results per page

481
00:18:15,280 --> 00:18:18,960
and then we have two different parts the

482
00:18:17,760 --> 00:18:21,200
entities

483
00:18:18,960 --> 00:18:23,679
section is the information about the

484
00:18:21,200 --> 00:18:25,919
notes the objects we are asking for

485
00:18:23,679 --> 00:18:26,880
and the page info is staying for is the

486
00:18:25,919 --> 00:18:28,400
information

487
00:18:26,880 --> 00:18:30,480
in the information about the connection

488
00:18:28,400 --> 00:18:32,000
in this case the pagination fields

489
00:18:30,480 --> 00:18:34,400
you can see in the left the result of

490
00:18:32,000 --> 00:18:36,000
this query it gives you the list of

491
00:18:34,400 --> 00:18:37,919
organizations

492
00:18:36,000 --> 00:18:39,760
and it tells you okay this is the first

493
00:18:37,919 --> 00:18:41,600
page

494
00:18:39,760 --> 00:18:43,440
page size is three this is the the

495
00:18:41,600 --> 00:18:46,559
fields we have

496
00:18:43,440 --> 00:18:48,640
specified in the query we have two pages

497
00:18:46,559 --> 00:18:49,918
we have one next page but we don't have

498
00:18:48,640 --> 00:18:52,080
any previous page

499
00:18:49,919 --> 00:18:53,760
we start in one ending in three and we

500
00:18:52,080 --> 00:18:55,678
have five total results so

501
00:18:53,760 --> 00:18:58,000
in this case the client knows how to ask

502
00:18:55,679 --> 00:18:59,760
for the next results

503
00:18:58,000 --> 00:19:02,480
this is bigger just in case for the

504
00:18:59,760 --> 00:19:02,480
people in the back

505
00:19:04,240 --> 00:19:10,240
okay so

506
00:19:07,840 --> 00:19:12,240
this is how it is implemented behind the

507
00:19:10,240 --> 00:19:14,880
scenes so basically we have to create

508
00:19:12,240 --> 00:19:16,080
an astra type in top of the different

509
00:19:14,880 --> 00:19:19,760
types

510
00:19:16,080 --> 00:19:21,360
so coming up this is the django objects

511
00:19:19,760 --> 00:19:22,720
the paginator django objects we are

512
00:19:21,360 --> 00:19:24,559
creating

513
00:19:22,720 --> 00:19:26,480
this is the query results this is the

514
00:19:24,559 --> 00:19:27,280
the notes information the identities the

515
00:19:26,480 --> 00:19:29,679
profiles

516
00:19:27,280 --> 00:19:31,520
the organizations etc and this is the

517
00:19:29,679 --> 00:19:34,480
imagination info the information that

518
00:19:31,520 --> 00:19:36,559
goes into the into the connection side

519
00:19:34,480 --> 00:19:39,600
and this is a constructor method

520
00:19:36,559 --> 00:19:40,320
so now everyone and sorry every time we

521
00:19:39,600 --> 00:19:43,199
want to

522
00:19:40,320 --> 00:19:44,399
add a new type it has to inherit from

523
00:19:43,200 --> 00:19:46,720
that abstract type

524
00:19:44,400 --> 00:19:48,960
so in this case organization type is

525
00:19:46,720 --> 00:19:52,080
going to be organization patinated type

526
00:19:48,960 --> 00:19:54,320
inheriting from that one and then we

527
00:19:52,080 --> 00:19:58,000
have to modify all queries

528
00:19:54,320 --> 00:20:01,200
for when we call the resolver we have to

529
00:19:58,000 --> 00:20:03,120
uh we have to construct a national

530
00:20:01,200 --> 00:20:04,320
paginated type to get the paginated

531
00:20:03,120 --> 00:20:07,439
results

532
00:20:04,320 --> 00:20:11,039
as a result of the query okay

533
00:20:07,440 --> 00:20:12,400
okay about authentication uh we have

534
00:20:11,039 --> 00:20:14,799
follow an approach

535
00:20:12,400 --> 00:20:16,960
of using json what tokens i don't know

536
00:20:14,799 --> 00:20:19,440
if any of you is aware of

537
00:20:16,960 --> 00:20:20,000
is familiar with with this technology

538
00:20:19,440 --> 00:20:22,159
the thing is

539
00:20:20,000 --> 00:20:23,679
is basically an existing user has to

540
00:20:22,159 --> 00:20:26,159
generate a token

541
00:20:23,679 --> 00:20:28,400
which has to be included in the http

542
00:20:26,159 --> 00:20:31,600
authorization authorization

543
00:20:28,400 --> 00:20:33,919
sorry header with the http request

544
00:20:31,600 --> 00:20:35,439
so this token has to be generated by a

545
00:20:33,919 --> 00:20:37,919
pre existing user

546
00:20:35,440 --> 00:20:38,720
using a mutation that gives you this

547
00:20:37,919 --> 00:20:41,200
this token

548
00:20:38,720 --> 00:20:41,919
okay and we are using a module called

549
00:20:41,200 --> 00:20:45,200
graphene

550
00:20:41,919 --> 00:20:48,720
gw gw t

551
00:20:45,200 --> 00:20:49,520
okay and how to test this this was a

552
00:20:48,720 --> 00:20:51,760
little bit

553
00:20:49,520 --> 00:20:53,280
difficult to test at first time until

554
00:20:51,760 --> 00:20:55,120
you set up everything

555
00:20:53,280 --> 00:20:56,960
so first you have to use an application

556
00:20:55,120 --> 00:20:58,959
which is capable of modifying the

557
00:20:56,960 --> 00:21:01,440
headers of the request otherwise

558
00:20:58,960 --> 00:21:02,000
you are not going to be able to perform

559
00:21:01,440 --> 00:21:03,840
the request

560
00:21:02,000 --> 00:21:05,200
and get rid of the result and

561
00:21:03,840 --> 00:21:08,240
configuring the django

562
00:21:05,200 --> 00:21:09,520
cs the csrf token if any of you have

563
00:21:08,240 --> 00:21:11,520
played with django

564
00:21:09,520 --> 00:21:13,440
it's not trivial if you haven't seen it

565
00:21:11,520 --> 00:21:15,679
before so

566
00:21:13,440 --> 00:21:17,120
i used an application called song i

567
00:21:15,679 --> 00:21:18,799
don't know if any of you

568
00:21:17,120 --> 00:21:22,080
knows that i recommend you to have a

569
00:21:18,799 --> 00:21:25,600
look at it you can

570
00:21:22,080 --> 00:21:26,240
you can see the token csr csrf token

571
00:21:25,600 --> 00:21:28,320
there

572
00:21:26,240 --> 00:21:29,600
as a request cookie and then the

573
00:21:28,320 --> 00:21:32,240
authorization

574
00:21:29,600 --> 00:21:33,039
header with the json web token which is

575
00:21:32,240 --> 00:21:35,679
the these

576
00:21:33,039 --> 00:21:36,400
three letters and then the long talking

577
00:21:35,679 --> 00:21:39,679
and

578
00:21:36,400 --> 00:21:42,559
after that and about how to test in this

579
00:21:39,679 --> 00:21:44,240
this also gave us some some problems

580
00:21:42,559 --> 00:21:47,360
because we have to create some

581
00:21:44,240 --> 00:21:49,600
context in the connection to to

582
00:21:47,360 --> 00:21:51,439
in order to create the unit test and to

583
00:21:49,600 --> 00:21:53,600
make this work

584
00:21:51,440 --> 00:21:54,480
i don't have i think time for more i

585
00:21:53,600 --> 00:21:57,520
have one

586
00:21:54,480 --> 00:22:00,559
bonus slide in case you you want to

587
00:21:57,520 --> 00:22:01,600
to check how to do filtering about

588
00:22:00,559 --> 00:22:03,440
future work

589
00:22:01,600 --> 00:22:06,158
we have to implement a command line and

590
00:22:03,440 --> 00:22:09,280
web client for this

591
00:22:06,159 --> 00:22:10,799
server part we we are developing we have

592
00:22:09,280 --> 00:22:12,799
to limit nested queries which is

593
00:22:10,799 --> 00:22:14,400
something a problem in graphql

594
00:22:12,799 --> 00:22:16,000
because you can you can ask

595
00:22:14,400 --> 00:22:18,320
organizations and then domains

596
00:22:16,000 --> 00:22:19,039
and then organization from that domains

597
00:22:18,320 --> 00:22:20,799
and so on

598
00:22:19,039 --> 00:22:22,720
so you will you will have an infinite

599
00:22:20,799 --> 00:22:25,280
loop of queries

600
00:22:22,720 --> 00:22:27,679
and of course feedback is welcome you

601
00:22:25,280 --> 00:22:31,039
have the link of the repository in the

602
00:22:27,679 --> 00:22:32,720
in the talk uh the talk main page

603
00:22:31,039 --> 00:22:36,480
and only saying that shorting hat is

604
00:22:32,720 --> 00:22:38,640
part of grimoire lab which is a bigger

605
00:22:36,480 --> 00:22:40,000
a bigger platform to gather to produce

606
00:22:38,640 --> 00:22:45,360
software development analytics

607
00:22:40,000 --> 00:22:45,360
so please have a look and thank you

608
00:22:51,440 --> 00:22:55,840
any questions

609
00:22:58,480 --> 00:23:09,840
i think we're gone thank you

