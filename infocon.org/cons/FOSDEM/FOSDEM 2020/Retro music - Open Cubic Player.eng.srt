1
00:00:05,600 --> 00:00:09,840
okay

2
00:00:07,359 --> 00:00:10,559
hello my name is steven and i'm the

3
00:00:09,840 --> 00:00:13,200
person that

4
00:00:10,559 --> 00:00:16,720
rewrote and ported open qb player over

5
00:00:13,200 --> 00:00:19,119
to linux and bsd and then

6
00:00:16,720 --> 00:00:20,400
many probably has a question why and to

7
00:00:19,119 --> 00:00:22,880
do that

8
00:00:20,400 --> 00:00:24,479
i want to step back in time a bit to my

9
00:00:22,880 --> 00:00:26,640
childhood

10
00:00:24,480 --> 00:00:29,599
so the very first computer me and my

11
00:00:26,640 --> 00:00:32,640
brother had was an old apple 2e

12
00:00:29,599 --> 00:00:35,280
and received that with a couple of games

13
00:00:32,640 --> 00:00:37,600
and a basic tutorial so that got me

14
00:00:35,280 --> 00:00:40,879
curious into software pro

15
00:00:37,600 --> 00:00:41,440
programming a bit and of course we also

16
00:00:40,879 --> 00:00:43,839
had an

17
00:00:41,440 --> 00:00:46,399
old game console that we could connect

18
00:00:43,840 --> 00:00:49,600
to our tv

19
00:00:46,399 --> 00:00:50,079
but as we grew older my big brother

20
00:00:49,600 --> 00:00:53,280
bought

21
00:00:50,079 --> 00:00:54,480
a computer and this had the awesome

22
00:00:53,280 --> 00:00:58,800
specifications

23
00:00:54,480 --> 00:01:03,199
of a 33 megahertz cpu that we of course

24
00:00:58,800 --> 00:01:06,320
upgraded to 66 megahertz

25
00:01:03,199 --> 00:01:09,280
it had a whopping 4 megabytes of

26
00:01:06,320 --> 00:01:10,080
memory that of course we could upgrade

27
00:01:09,280 --> 00:01:13,360
to 20

28
00:01:10,080 --> 00:01:16,798
still not so much and

29
00:01:13,360 --> 00:01:18,159
200 megabytes of storage and most of you

30
00:01:16,799 --> 00:01:19,040
can probably guess that if you have an

31
00:01:18,159 --> 00:01:21,759
mp3

32
00:01:19,040 --> 00:01:24,400
mp3 collection of music you cannot fit

33
00:01:21,759 --> 00:01:25,920
so much music on this computer

34
00:01:24,400 --> 00:01:27,840
which means that back in the days we had

35
00:01:25,920 --> 00:01:30,320
other means of music

36
00:01:27,840 --> 00:01:33,439
which we back then called module files

37
00:01:30,320 --> 00:01:33,439
or amiga modules

38
00:01:33,840 --> 00:01:40,479
but this computer only had a pc speaker

39
00:01:37,280 --> 00:01:41,439
all what's known as a beeper and i will

40
00:01:40,479 --> 00:01:44,000
do a little

41
00:01:41,439 --> 00:01:44,639
quick demo about how music would sound

42
00:01:44,000 --> 00:01:47,280
on such

43
00:01:44,640 --> 00:01:47,280
a machine

44
00:01:52,560 --> 00:01:56,560
so we have inertia player which could

45
00:01:54,720 --> 00:02:00,479
actually output audio

46
00:01:56,560 --> 00:02:02,079
into the speaker and the music quality

47
00:02:00,479 --> 00:02:03,039
would then come out of the speaker so it

48
00:02:02,079 --> 00:02:06,839
would be even

49
00:02:03,040 --> 00:02:08,879
worse than this but at least it was

50
00:02:06,840 --> 00:02:11,520
music

51
00:02:08,878 --> 00:02:12,799
so yes let's get that out of the way

52
00:02:11,520 --> 00:02:17,520
again

53
00:02:12,800 --> 00:02:22,879
i need to get the mouse out okay

54
00:02:17,520 --> 00:02:26,080
easier so yes

55
00:02:22,879 --> 00:02:27,920
so my brother he decided that we wanted

56
00:02:26,080 --> 00:02:31,280
to have some better audio quality

57
00:02:27,920 --> 00:02:34,079
so he bought an audio card

58
00:02:31,280 --> 00:02:35,200
which was a clone of some some plastic

59
00:02:34,080 --> 00:02:36,720
card

60
00:02:35,200 --> 00:02:38,958
and with that we could suddenly have

61
00:02:36,720 --> 00:02:41,519
better music and we could also have

62
00:02:38,959 --> 00:02:44,080
music in our games as well

63
00:02:41,519 --> 00:02:45,360
and at this time we also got access to

64
00:02:44,080 --> 00:02:48,000
cubic cubic player

65
00:02:45,360 --> 00:02:49,120
which i found to be an awesome source

66
00:02:48,000 --> 00:02:51,440
software

67
00:02:49,120 --> 00:03:04,720
so let me get dosbox up and running

68
00:02:51,440 --> 00:03:06,959
again two seconds

69
00:03:04,720 --> 00:03:08,480
so you will be presented with a file

70
00:03:06,959 --> 00:03:11,599
browser similar to

71
00:03:08,480 --> 00:03:15,200
like this and your music would be

72
00:03:11,599 --> 00:03:15,200
presented with nice colors

73
00:03:15,280 --> 00:03:20,159
and the audio was much better as well

74
00:03:18,160 --> 00:03:23,519
[Music]

75
00:03:20,159 --> 00:03:25,890
and for me my entire childhood of music

76
00:03:23,519 --> 00:03:27,680
was in software like this

77
00:03:25,890 --> 00:03:31,599
[Music]

78
00:03:27,680 --> 00:03:32,480
so yes i really miss those days from my

79
00:03:31,599 --> 00:03:36,238
childhood i have

80
00:03:32,480 --> 00:03:36,238
no nostalgia for it

81
00:03:36,480 --> 00:03:42,399
so for our computer

82
00:03:40,560 --> 00:03:44,560
i started learn programming with

83
00:03:42,400 --> 00:03:46,480
turbopascal

84
00:03:44,560 --> 00:03:48,720
and the available information for that

85
00:03:46,480 --> 00:03:49,920
was not that great my local library had

86
00:03:48,720 --> 00:03:52,080
some few books of it

87
00:03:49,920 --> 00:03:53,119
all the books seems to really go into

88
00:03:52,080 --> 00:03:55,680
learning to make you

89
00:03:53,120 --> 00:03:57,280
make like an inventory of your music

90
00:03:55,680 --> 00:03:58,560
collection and that was kind of the

91
00:03:57,280 --> 00:04:00,239
level

92
00:03:58,560 --> 00:04:02,080
you would learn about when they read

93
00:04:00,239 --> 00:04:04,640
those books

94
00:04:02,080 --> 00:04:05,840
so later in high school i learned a new

95
00:04:04,640 --> 00:04:08,159
programming language

96
00:04:05,840 --> 00:04:10,799
delphi which basically was pascal

97
00:04:08,159 --> 00:04:13,760
wrapped into windows instead

98
00:04:10,799 --> 00:04:15,439
so i didn't quite get so much more use

99
00:04:13,760 --> 00:04:18,000
out of that

100
00:04:15,439 --> 00:04:19,040
but some friends in the class above me

101
00:04:18,000 --> 00:04:22,720
introduced me to

102
00:04:19,040 --> 00:04:26,080
linux and he gave me a copy

103
00:04:22,720 --> 00:04:28,320
of a linux distribution on cds

104
00:04:26,080 --> 00:04:29,599
and with those were also source of

105
00:04:28,320 --> 00:04:32,719
everything

106
00:04:29,600 --> 00:04:34,880
and suddenly you could find could go

107
00:04:32,720 --> 00:04:35,840
into a depth of every part of the

108
00:04:34,880 --> 00:04:38,159
machine

109
00:04:35,840 --> 00:04:39,440
anything you wondered how it worked you

110
00:04:38,160 --> 00:04:41,600
could find the source code

111
00:04:39,440 --> 00:04:44,240
if you wanted to make your own things

112
00:04:41,600 --> 00:04:47,520
you could copy paste from other things

113
00:04:44,240 --> 00:04:48,560
so for me open source was a real opener

114
00:04:47,520 --> 00:04:51,359
for learning how to

115
00:04:48,560 --> 00:04:51,360
program a program

116
00:04:52,720 --> 00:04:59,600
but music back in 2000 on linux

117
00:04:56,400 --> 00:05:03,039
was not that much fun though we had the

118
00:04:59,600 --> 00:05:04,400
mick mikmod to play modules back then it

119
00:05:03,039 --> 00:05:05,919
didn't have a colors yet

120
00:05:04,400 --> 00:05:08,159
but i didn't manage to find the

121
00:05:05,919 --> 00:05:09,680
screenshots on google that was that old

122
00:05:08,160 --> 00:05:11,919
actually

123
00:05:09,680 --> 00:05:14,880
and if you're on a graphical environment

124
00:05:11,919 --> 00:05:17,039
you could have xms and similar players

125
00:05:14,880 --> 00:05:18,800
but it didn't give me quite a feeling if

126
00:05:17,039 --> 00:05:19,520
you want to play old amiga files it

127
00:05:18,800 --> 00:05:22,080
didn't show

128
00:05:19,520 --> 00:05:23,198
anything about how it actually worked

129
00:05:22,080 --> 00:05:26,080
and i really missed it

130
00:05:23,199 --> 00:05:26,720
had had that old nostalgic feeling i

131
00:05:26,080 --> 00:05:31,120
could never

132
00:05:26,720 --> 00:05:32,240
really be sold so i kept on watching on

133
00:05:31,120 --> 00:05:34,800
cue cubic player

134
00:05:32,240 --> 00:05:35,600
and one day they had renamed it to open

135
00:05:34,800 --> 00:05:40,400
cubic player

136
00:05:35,600 --> 00:05:42,560
and released the source yes

137
00:05:40,400 --> 00:05:44,320
and if anything is open source that

138
00:05:42,560 --> 00:05:45,039
means that everybody can use it straight

139
00:05:44,320 --> 00:05:48,080
off like

140
00:05:45,039 --> 00:05:50,240
that's how it works right no

141
00:05:48,080 --> 00:05:51,680
it just means that this you can compile

142
00:05:50,240 --> 00:05:54,080
it on dos

143
00:05:51,680 --> 00:05:56,960
it didn't really help that much on linux

144
00:05:54,080 --> 00:06:00,400
so i felt a bit disappointed as well

145
00:05:56,960 --> 00:06:01,359
but hey what can you do when you are

146
00:06:00,400 --> 00:06:03,599
young

147
00:06:01,360 --> 00:06:05,600
you download it and you take a look

148
00:06:03,600 --> 00:06:08,720
inside

149
00:06:05,600 --> 00:06:10,560
and for me what i did is that i started

150
00:06:08,720 --> 00:06:14,080
just with a blank

151
00:06:10,560 --> 00:06:14,880
project and i started first to copy over

152
00:06:14,080 --> 00:06:18,000
the main

153
00:06:14,880 --> 00:06:21,919
function but

154
00:06:18,000 --> 00:06:25,280
let's first take a little look of dos

155
00:06:21,919 --> 00:06:28,479
this is what many of you have never used

156
00:06:25,280 --> 00:06:29,520
it's a disk operating system and as the

157
00:06:28,479 --> 00:06:33,360
name implies

158
00:06:29,520 --> 00:06:37,440
it has a file system api so yes

159
00:06:33,360 --> 00:06:40,080
but if you had graphics

160
00:06:37,440 --> 00:06:42,719
that means that your software would talk

161
00:06:40,080 --> 00:06:47,520
directly to the graphic card

162
00:06:42,720 --> 00:06:50,639
so that doesn't port well into linux

163
00:06:47,520 --> 00:06:53,520
memory management well you had a one

164
00:06:50,639 --> 00:06:55,759
megabyte memory but the program had

165
00:06:53,520 --> 00:06:59,758
access to the cpu

166
00:06:55,759 --> 00:07:02,800
and they could change their memory maps

167
00:06:59,759 --> 00:07:04,240
same also where they come to programs

168
00:07:02,800 --> 00:07:06,000
being only 16-bit

169
00:07:04,240 --> 00:07:07,840
but the programs could do whatever they

170
00:07:06,000 --> 00:07:10,880
want they could change the cpu over to

171
00:07:07,840 --> 00:07:10,880
32-bit mode

172
00:07:11,199 --> 00:07:15,840
and dust did not have anything or no

173
00:07:14,319 --> 00:07:18,720
knowledge of processes

174
00:07:15,840 --> 00:07:19,198
it was just a single process it was your

175
00:07:18,720 --> 00:07:21,680
soft

176
00:07:19,199 --> 00:07:21,680
software

177
00:07:22,319 --> 00:07:27,039
and lastly there's no sound api in dos

178
00:07:26,080 --> 00:07:29,440
which means that

179
00:07:27,039 --> 00:07:31,840
all software written does talk directly

180
00:07:29,440 --> 00:07:34,080
to the sound cards

181
00:07:31,840 --> 00:07:35,919
so if you was to so if you had a

182
00:07:34,080 --> 00:07:37,919
multimedia software back in

183
00:07:35,919 --> 00:07:39,840
those it means that you had to implement

184
00:07:37,919 --> 00:07:42,560
hardware support for everything

185
00:07:39,840 --> 00:07:44,560
and that your multimedia program or game

186
00:07:42,560 --> 00:07:49,120
would be an operating system in itself

187
00:07:44,560 --> 00:07:49,120
when you compare it to modern standards

188
00:07:49,759 --> 00:07:56,639
so yes i started

189
00:07:52,879 --> 00:08:01,120
allocating my main function mains

190
00:07:56,639 --> 00:08:04,720
and i copy that into a blank project and

191
00:08:01,120 --> 00:08:07,440
see if it could compile and

192
00:08:04,720 --> 00:08:09,520
first thing and notice this lots of

193
00:08:07,440 --> 00:08:11,280
things can be removed

194
00:08:09,520 --> 00:08:13,198
so for instance to check if you had a

195
00:08:11,280 --> 00:08:16,000
virus infection in those

196
00:08:13,199 --> 00:08:19,199
doesn't really matter so that would we

197
00:08:16,000 --> 00:08:22,560
could easily remove

198
00:08:19,199 --> 00:08:26,000
so next dependency it it got

199
00:08:22,560 --> 00:08:28,560
was to a list of initializers

200
00:08:26,000 --> 00:08:31,280
and the first in this initializer was to

201
00:08:28,560 --> 00:08:34,080
configure all the interrupts

202
00:08:31,280 --> 00:08:35,519
in linux we don't really need this so

203
00:08:34,080 --> 00:08:38,479
lots of things we can

204
00:08:35,519 --> 00:08:38,479
simply remove

205
00:08:38,958 --> 00:08:46,239
next thing came on the list was

206
00:08:42,640 --> 00:08:49,920
was actually support for dll files

207
00:08:46,240 --> 00:08:52,000
in dos which is kind kind of special

208
00:08:49,920 --> 00:08:53,599
since most people don't think dos has

209
00:08:52,000 --> 00:08:56,640
dlls that they don't

210
00:08:53,600 --> 00:08:59,440
in it actually do not do that but

211
00:08:56,640 --> 00:09:00,720
some c compilers have their own support

212
00:08:59,440 --> 00:09:03,200
for this

213
00:09:00,720 --> 00:09:04,560
but hey in linux we have something

214
00:09:03,200 --> 00:09:07,440
similar

215
00:09:04,560 --> 00:09:09,839
in libsy we can open essa files using

216
00:09:07,440 --> 00:09:11,920
some built-in functions in libsy

217
00:09:09,839 --> 00:09:13,040
so a lot of this functionality we could

218
00:09:11,920 --> 00:09:16,880
simply strip out

219
00:09:13,040 --> 00:09:16,880
and easily replace as well

220
00:09:17,440 --> 00:09:25,360
so api conversions that had to be done

221
00:09:22,000 --> 00:09:27,279
so dlls we already mentioned those three

222
00:09:25,360 --> 00:09:30,320
could remap to libsy

223
00:09:27,279 --> 00:09:30,959
own implementation next thing on the

224
00:09:30,320 --> 00:09:34,880
list is

225
00:09:30,959 --> 00:09:37,439
graphical output and

226
00:09:34,880 --> 00:09:39,040
in linux it's more common if you have a

227
00:09:37,440 --> 00:09:42,640
text mod application use

228
00:09:39,040 --> 00:09:44,399
n cursors or if you run it in a console

229
00:09:42,640 --> 00:09:45,279
you can actually get direct access to

230
00:09:44,399 --> 00:09:50,399
the buffers

231
00:09:45,279 --> 00:09:53,040
using some special devices

232
00:09:50,399 --> 00:09:54,320
keyboard input is also quite simple

233
00:09:53,040 --> 00:09:56,719
actually in linux

234
00:09:54,320 --> 00:09:58,800
we either use n cursors or you can read

235
00:09:56,720 --> 00:10:00,720
standard inputs

236
00:09:58,800 --> 00:10:02,079
and you can map up all of these special

237
00:10:00,720 --> 00:10:05,200
keys and

238
00:10:02,079 --> 00:10:08,239
like up and down

239
00:10:05,200 --> 00:10:11,120
next thing on the list was the

240
00:10:08,240 --> 00:10:11,440
audio mixer routines they were written

241
00:10:11,120 --> 00:10:14,480
in

242
00:10:11,440 --> 00:10:16,240
assembler so those

243
00:10:14,480 --> 00:10:18,399
we will see in the next slide a bit i

244
00:10:16,240 --> 00:10:19,040
had to rewrite them so they could

245
00:10:18,399 --> 00:10:22,000
compile

246
00:10:19,040 --> 00:10:22,000
with gcc

247
00:10:23,600 --> 00:10:29,200
audio hard hardware drivers in linux we

248
00:10:27,120 --> 00:10:32,640
have the advantage that linux can handle

249
00:10:29,200 --> 00:10:36,560
audio for us and this we do either using

250
00:10:32,640 --> 00:10:36,560
open sound systems or alsa

251
00:10:36,640 --> 00:10:41,760
later i also added support for x11

252
00:10:39,680 --> 00:10:43,439
and sdl so suddenly you have a big

253
00:10:41,760 --> 00:10:46,480
matrix of different

254
00:10:43,440 --> 00:10:48,240
inputs and output devices and this also

255
00:10:46,480 --> 00:10:50,399
makes it possible to run it on

256
00:10:48,240 --> 00:10:51,760
quite large large collection of

257
00:10:50,399 --> 00:10:55,279
different

258
00:10:51,760 --> 00:10:55,279
unix-based os's

259
00:10:55,600 --> 00:10:59,040
but of course things doesn't always work

260
00:10:58,000 --> 00:11:01,040
out

261
00:10:59,040 --> 00:11:02,319
the first problem arrived when a person

262
00:11:01,040 --> 00:11:05,519
tried to run this on an

263
00:11:02,320 --> 00:11:09,200
old mac a really old one

264
00:11:05,519 --> 00:11:12,079
it had an m68k cpu

265
00:11:09,200 --> 00:11:13,360
and that has a different endian and some

266
00:11:12,079 --> 00:11:15,680
of you never

267
00:11:13,360 --> 00:11:16,720
probably never heard about an ndn before

268
00:11:15,680 --> 00:11:20,000
so do a quick

269
00:11:16,720 --> 00:11:24,160
introduce introduction to that

270
00:11:20,000 --> 00:11:27,279
so first if we have our memory as a long

271
00:11:24,160 --> 00:11:30,399
list of addresses each address can store

272
00:11:27,279 --> 00:11:32,720
one byte so

273
00:11:30,399 --> 00:11:33,440
what you do when they want to store two

274
00:11:32,720 --> 00:11:36,800
bytes

275
00:11:33,440 --> 00:11:36,800
into this system

276
00:11:37,040 --> 00:11:44,640
well you can choose

277
00:11:40,240 --> 00:11:47,040
to have one byte before the other

278
00:11:44,640 --> 00:11:49,279
and both are correct this is called

279
00:11:47,040 --> 00:11:51,360
little endian and big and then

280
00:11:49,279 --> 00:11:52,399
different cpu architectures and file

281
00:11:51,360 --> 00:11:55,600
formats choose

282
00:11:52,399 --> 00:11:58,959
to implement different ones and

283
00:11:55,600 --> 00:11:59,839
why the juice i don't know but it means

284
00:11:58,959 --> 00:12:02,638
that

285
00:11:59,839 --> 00:12:04,800
whenever you load a file we need to be

286
00:12:02,639 --> 00:12:06,959
aware of which engine it is stored in

287
00:12:04,800 --> 00:12:10,800
and convert it to whatever your local

288
00:12:06,959 --> 00:12:14,079
cpu actually expects

289
00:12:10,800 --> 00:12:16,479
so with that out of the way

290
00:12:14,079 --> 00:12:18,800
i mentioned that original mixers were

291
00:12:16,480 --> 00:12:21,360
written in assembler

292
00:12:18,800 --> 00:12:22,319
and this was probably chosen because c

293
00:12:21,360 --> 00:12:24,560
compilers and c

294
00:12:22,320 --> 00:12:25,760
plus plus compiles back in the days were

295
00:12:24,560 --> 00:12:28,000
not very efficient

296
00:12:25,760 --> 00:12:28,959
with the code they produced and the

297
00:12:28,000 --> 00:12:32,160
machines were not

298
00:12:28,959 --> 00:12:32,800
super fast so with code that really very

299
00:12:32,160 --> 00:12:35,600
important

300
00:12:32,800 --> 00:12:37,599
would be handwritten in assembler and

301
00:12:35,600 --> 00:12:38,079
you would call up these functions from

302
00:12:37,600 --> 00:12:41,120
your

303
00:12:38,079 --> 00:12:43,359
pro program

304
00:12:41,120 --> 00:12:44,399
i initially chose to keep the assembler

305
00:12:43,360 --> 00:12:47,920
mostly as is

306
00:12:44,399 --> 00:12:49,600
hardly on the slide but i was put this

307
00:12:47,920 --> 00:12:53,120
inside a little

308
00:12:49,600 --> 00:12:53,680
wrapper and you can glue it into c as is

309
00:12:53,120 --> 00:12:56,560
and you

310
00:12:53,680 --> 00:12:57,839
but you need to inform gcc about which

311
00:12:56,560 --> 00:13:01,518
registers are used as

312
00:12:57,839 --> 00:13:04,639
inputs and outputs and suddenly gcc can

313
00:13:01,519 --> 00:13:08,160
use the assembler block as is

314
00:13:04,639 --> 00:13:09,920
but this is not very compatible when we

315
00:13:08,160 --> 00:13:11,839
want to have different cpus

316
00:13:09,920 --> 00:13:13,439
and also when we want to have 64-bit

317
00:13:11,839 --> 00:13:15,680
support

318
00:13:13,440 --> 00:13:17,360
so all of the assembly functions need to

319
00:13:15,680 --> 00:13:21,120
have alternative versions

320
00:13:17,360 --> 00:13:23,760
in c and even had one

321
00:13:21,120 --> 00:13:24,480
contributor writing the one the

322
00:13:23,760 --> 00:13:27,120
assembler

323
00:13:24,480 --> 00:13:27,920
functions to see for the floating point

324
00:13:27,120 --> 00:13:31,839
units

325
00:13:27,920 --> 00:13:31,839
so i didn't have to do everything myself

326
00:13:32,240 --> 00:13:39,040
so let's jump yeah one more thing

327
00:13:36,000 --> 00:13:41,519
background idler back in

328
00:13:39,040 --> 00:13:42,719
year 2000s machines were still a bit

329
00:13:41,519 --> 00:13:44,800
slow

330
00:13:42,720 --> 00:13:46,000
and if you open the final file browser

331
00:13:44,800 --> 00:13:48,000
inside cubic player

332
00:13:46,000 --> 00:13:49,279
the music would every now and then skip

333
00:13:48,000 --> 00:13:52,000
a bit

334
00:13:49,279 --> 00:13:53,120
so i choose to look at how this was sold

335
00:13:52,000 --> 00:13:55,440
in dos

336
00:13:53,120 --> 00:13:56,480
and in those they would use add time

337
00:13:55,440 --> 00:13:59,760
timer int

338
00:13:56,480 --> 00:14:02,399
interrupts and in linux you don't have

339
00:13:59,760 --> 00:14:05,199
interrupts in a pro program but for

340
00:14:02,399 --> 00:14:08,320
timer we have something similar similar

341
00:14:05,199 --> 00:14:10,160
we have something called sig timer

342
00:14:08,320 --> 00:14:11,360
and you can instruct the kernel to give

343
00:14:10,160 --> 00:14:15,040
a signal

344
00:14:11,360 --> 00:14:18,320
on that signal handler at a given

345
00:14:15,040 --> 00:14:19,760
interval so i chose to copy paste the

346
00:14:18,320 --> 00:14:24,240
original code from

347
00:14:19,760 --> 00:14:24,240
cubic player for this but

348
00:14:24,399 --> 00:14:27,920
it kept on locking up my console and

349
00:14:26,720 --> 00:14:29,920
earlier in the night

350
00:14:27,920 --> 00:14:31,040
i initially did not know why this

351
00:14:29,920 --> 00:14:34,800
happened

352
00:14:31,040 --> 00:14:36,399
so i was able to get out the little

353
00:14:34,800 --> 00:14:38,399
piece of code

354
00:14:36,399 --> 00:14:39,440
and initially thought it would be a bug

355
00:14:38,399 --> 00:14:41,600
in my code

356
00:14:39,440 --> 00:14:42,560
or gcc and that my code just simply

357
00:14:41,600 --> 00:14:45,760
locked up my term

358
00:14:42,560 --> 00:14:48,959
terminal but machine was still okay

359
00:14:45,760 --> 00:14:51,620
it turned out to not be that it turned

360
00:14:48,959 --> 00:14:52,800
out that i had hit a zero day exploit

361
00:14:51,620 --> 00:14:56,560
[Laughter]

362
00:14:52,800 --> 00:15:00,000
by pure accident so it turns out

363
00:14:56,560 --> 00:15:03,599
that the ffpu is actually

364
00:15:00,000 --> 00:15:06,160
async with the rest of the cpu core so

365
00:15:03,600 --> 00:15:08,560
when you do a store and restore of all

366
00:15:06,160 --> 00:15:10,639
the registers in the ffpu

367
00:15:08,560 --> 00:15:12,239
it doesn't happen immediately it takes a

368
00:15:10,639 --> 00:15:15,360
little time before it actually

369
00:15:12,240 --> 00:15:17,120
happens and what i did

370
00:15:15,360 --> 00:15:18,959
in the original code that i kept from

371
00:15:17,120 --> 00:15:19,760
those is i wanted to preserve the state

372
00:15:18,959 --> 00:15:22,560
of the ms

373
00:15:19,760 --> 00:15:24,160
of the fpu because i didn't know if this

374
00:15:22,560 --> 00:15:28,079
was necessary to do or not

375
00:15:24,160 --> 00:15:30,880
in in a sig timer and i had by mistake

376
00:15:28,079 --> 00:15:32,479
left out a little star and so the

377
00:15:30,880 --> 00:15:35,759
pointer was not the

378
00:15:32,480 --> 00:15:37,920
reference the enough amount of time

379
00:15:35,759 --> 00:15:39,199
so this code actually crashed but the

380
00:15:37,920 --> 00:15:41,040
crash didn't happen

381
00:15:39,199 --> 00:15:43,599
immediately it happened after the code

382
00:15:41,040 --> 00:15:45,439
returned back into the kernel space

383
00:15:43,600 --> 00:15:48,000
and the kernel space exceptional handler

384
00:15:45,440 --> 00:15:48,880
routine didn't expect this kind of

385
00:15:48,000 --> 00:15:51,680
things to happen

386
00:15:48,880 --> 00:15:53,600
so it kept on trying to restore the fpu

387
00:15:51,680 --> 00:15:55,439
over and over and over again

388
00:15:53,600 --> 00:15:58,959
so you basically had a ddos attack as

389
00:15:55,440 --> 00:15:58,959
long as you had a login access

390
00:16:01,279 --> 00:16:05,199
so let's jump back in time to see how

391
00:16:04,480 --> 00:16:10,399
music

392
00:16:05,199 --> 00:16:13,279
used to be done before and this chip

393
00:16:10,399 --> 00:16:14,720
looks like a weird name it had many

394
00:16:13,279 --> 00:16:17,920
different names it was sold on

395
00:16:14,720 --> 00:16:21,120
many different brands and

396
00:16:17,920 --> 00:16:23,759
if you look deep inside it

397
00:16:21,120 --> 00:16:24,959
we can see that it has a little pattern

398
00:16:23,759 --> 00:16:27,279
we have

399
00:16:24,959 --> 00:16:28,160
three different pulse generators they

400
00:16:27,279 --> 00:16:29,759
named it

401
00:16:28,160 --> 00:16:31,279
today we'll probably just call this

402
00:16:29,759 --> 00:16:34,399
square wave gen

403
00:16:31,279 --> 00:16:37,839
generators and a simple

404
00:16:34,399 --> 00:16:40,959
noise generate generator

405
00:16:37,839 --> 00:16:41,839
for each channel you could choose to use

406
00:16:40,959 --> 00:16:46,239
the pulse

407
00:16:41,839 --> 00:16:46,240
generator or the noise or both

408
00:16:46,480 --> 00:16:50,480
they added what they named a global

409
00:16:49,199 --> 00:16:53,758
envelope

410
00:16:50,480 --> 00:16:56,880
generator very advanced name basically

411
00:16:53,759 --> 00:16:57,839
it's a shape you can choose and you can

412
00:16:56,880 --> 00:17:00,240
choose how fast

413
00:16:57,839 --> 00:17:03,680
this shape goes and this can be used as

414
00:17:00,240 --> 00:17:06,559
your source for the volume adjustments

415
00:17:03,680 --> 00:17:07,520
and each of the three channels could

416
00:17:06,559 --> 00:17:10,240
then choose

417
00:17:07,520 --> 00:17:10,240
one of these

418
00:17:12,000 --> 00:17:16,079
to either choose the global end analog

419
00:17:14,160 --> 00:17:19,280
generator or a statically

420
00:17:16,079 --> 00:17:23,039
set volume so how does this

421
00:17:19,280 --> 00:17:26,000
actually sound let's start a little

422
00:17:23,039 --> 00:17:26,000
demo program

423
00:17:30,840 --> 00:17:38,559
ta-da so this is what

424
00:17:34,960 --> 00:17:39,039
a little louder so we don't have so many

425
00:17:38,559 --> 00:17:42,320
knobs

426
00:17:39,039 --> 00:17:42,320
we can to twist and turn

427
00:17:44,880 --> 00:17:50,160
but hey we can make sounds

428
00:17:50,720 --> 00:17:54,480
so let's get that closed away before we

429
00:17:54,080 --> 00:17:57,600
kill

430
00:17:54,480 --> 00:17:57,600
any more ears here

431
00:17:59,520 --> 00:18:05,360
so let's see the next slide so

432
00:18:02,880 --> 00:18:08,000
we're so this chip had them three square

433
00:18:05,360 --> 00:18:10,399
wave auto outputs and was used in a big

434
00:18:08,000 --> 00:18:14,160
selection of products

435
00:18:10,400 --> 00:18:17,520
including the set x spectrum 128

436
00:18:14,160 --> 00:18:20,640
cpc atari st

437
00:18:17,520 --> 00:18:21,200
and common for all of these machines are

438
00:18:20,640 --> 00:18:24,160
that are

439
00:18:21,200 --> 00:18:25,360
very small amount of memory and there

440
00:18:24,160 --> 00:18:27,520
were no standard

441
00:18:25,360 --> 00:18:29,918
standardized way for how the music

442
00:18:27,520 --> 00:18:31,600
should be stored and play back

443
00:18:29,919 --> 00:18:33,919
and also a very limited amount of

444
00:18:31,600 --> 00:18:36,080
processing power per frame which is why

445
00:18:33,919 --> 00:18:39,520
many games also only had music at the

446
00:18:36,080 --> 00:18:41,840
intro and not during the game as well

447
00:18:39,520 --> 00:18:43,520
and a two different location i got asked

448
00:18:41,840 --> 00:18:45,199
if i could implement support for

449
00:18:43,520 --> 00:18:48,480
different kind of

450
00:18:45,200 --> 00:18:49,360
music from games the first one was to

451
00:18:48,480 --> 00:18:52,320
use

452
00:18:49,360 --> 00:18:53,520
islap which is a library that emulates

453
00:18:52,320 --> 00:18:56,399
the cpu

454
00:18:53,520 --> 00:18:57,360
and the sound chip from this setex

455
00:18:56,400 --> 00:19:00,640
spectrums and

456
00:18:57,360 --> 00:19:00,639
some similar machines

457
00:19:01,280 --> 00:19:04,720
and the other request was em files which

458
00:19:04,320 --> 00:19:08,000
is

459
00:19:04,720 --> 00:19:10,480
sd using sd sound library this one

460
00:19:08,000 --> 00:19:14,000
instead of emulating the cpu it just

461
00:19:10,480 --> 00:19:14,799
has stored one long dump of what the

462
00:19:14,000 --> 00:19:17,840
regulators

463
00:19:14,799 --> 00:19:20,240
were so how did this music

464
00:19:17,840 --> 00:19:20,240
sound

465
00:19:23,520 --> 00:19:28,480
so section

466
00:19:30,640 --> 00:19:37,360
so we can have music

467
00:19:33,810 --> 00:19:41,120
[Music]

468
00:19:37,360 --> 00:19:43,199
yes music is nice

469
00:19:41,120 --> 00:19:44,719
but how did they actually make this

470
00:19:43,200 --> 00:19:48,640
music

471
00:19:44,720 --> 00:19:50,160
if we look into an uh dump of the music

472
00:19:48,640 --> 00:19:52,720
from one of those games

473
00:19:50,160 --> 00:19:53,919
it's actually machine code it was hand

474
00:19:52,720 --> 00:19:55,760
written

475
00:19:53,919 --> 00:19:58,160
and either the music composer need to

476
00:19:55,760 --> 00:20:00,640
learn how to make machine codes or

477
00:19:58,160 --> 00:20:02,159
the music about it needed to cooperate

478
00:20:00,640 --> 00:20:04,720
with a programmer and they need to

479
00:20:02,159 --> 00:20:08,159
cooperate for how to store the music

480
00:20:04,720 --> 00:20:08,159
and how it should be played back

481
00:20:10,799 --> 00:20:16,639
so next up next iteration of

482
00:20:14,240 --> 00:20:18,480
sound chips happened with the commodore

483
00:20:16,640 --> 00:20:20,559
64.

484
00:20:18,480 --> 00:20:21,520
here they choose to have instead of only

485
00:20:20,559 --> 00:20:23,760
square waves

486
00:20:21,520 --> 00:20:26,158
they added support for sawtooth and

487
00:20:23,760 --> 00:20:30,080
triangles as well

488
00:20:26,159 --> 00:20:34,159
and instead of having one global volume

489
00:20:30,080 --> 00:20:37,918
generator each channel has its own

490
00:20:34,159 --> 00:20:38,640
has its own call it adsr which is attack

491
00:20:37,919 --> 00:20:40,960
decay

492
00:20:38,640 --> 00:20:41,919
sustain and release which basically

493
00:20:40,960 --> 00:20:44,880
means that you can

494
00:20:41,919 --> 00:20:46,799
choose how one specific voice will how

495
00:20:44,880 --> 00:20:49,760
fast it will turn on and how fast it

496
00:20:46,799 --> 00:20:52,480
will turn off again when we play a note

497
00:20:49,760 --> 00:20:53,360
and many people also say that one big

498
00:20:52,480 --> 00:20:55,760
change for this

499
00:20:53,360 --> 00:20:56,719
was that they added filters that you

500
00:20:55,760 --> 00:21:00,480
could actually

501
00:20:56,720 --> 00:21:02,480
low pass and high pass the odds audio

502
00:21:00,480 --> 00:21:04,880
so let's do a quick demo for this chip

503
00:21:02,480 --> 00:21:04,880
as well

504
00:21:09,200 --> 00:21:13,760
[Music]

505
00:21:11,440 --> 00:21:17,480
so suddenly we have way more knobs we

506
00:21:13,760 --> 00:21:24,499
can turn there

507
00:21:17,480 --> 00:21:24,499
[Music]

508
00:21:28,840 --> 00:21:31,840
so

509
00:21:35,760 --> 00:21:39,280
okay so

510
00:21:41,120 --> 00:21:45,039
so how did music sound then win this

511
00:21:43,600 --> 00:21:47,039
with the chip

512
00:21:45,039 --> 00:21:49,360
and it was lucky that the game that the

513
00:21:47,039 --> 00:21:53,520
music was played just recently was

514
00:21:49,360 --> 00:21:53,520
available on the commodore 64 as well

515
00:21:54,920 --> 00:21:59,600
[Music]

516
00:21:57,120 --> 00:22:01,360
so this is why commodore 64

517
00:21:59,600 --> 00:22:03,439
[Music]

518
00:22:01,360 --> 00:22:05,439
is said to be a very important change

519
00:22:03,440 --> 00:22:08,320
for how music sounds

520
00:22:05,440 --> 00:22:10,559
because it's still only three voices but

521
00:22:08,320 --> 00:22:13,200
since you have much more control of what

522
00:22:10,559 --> 00:22:13,678
what those three voices do the music

523
00:22:13,200 --> 00:22:17,840
sounds

524
00:22:13,679 --> 00:22:21,120
better so

525
00:22:17,840 --> 00:22:22,959
commodore 64 also had more mem memory

526
00:22:21,120 --> 00:22:26,158
personal stand standard

527
00:22:22,960 --> 00:22:27,360
which means that the audio routines for

528
00:22:26,159 --> 00:22:30,080
rendering the music

529
00:22:27,360 --> 00:22:32,000
could also be bigger which means that

530
00:22:30,080 --> 00:22:33,678
more games would actually feature music

531
00:22:32,000 --> 00:22:38,000
as the game was playing playing

532
00:22:33,679 --> 00:22:38,000
not just during before the game in the

533
00:22:38,840 --> 00:22:41,840
introduction

534
00:22:46,720 --> 00:22:55,679
yes so next thing up

535
00:22:52,080 --> 00:22:58,480
yes also the implementation

536
00:22:55,679 --> 00:22:58,799
of playing back this music is using lib

537
00:22:58,480 --> 00:23:00,960
sid

538
00:22:58,799 --> 00:23:03,918
sid play which is another open source

539
00:23:00,960 --> 00:23:03,919
pro projects

540
00:23:04,080 --> 00:23:09,439
and as well sid fancy music is still

541
00:23:06,880 --> 00:23:09,919
done using machine code so not much has

542
00:23:09,440 --> 00:23:15,280
changed

543
00:23:09,919 --> 00:23:18,480
there though so what's changed

544
00:23:15,280 --> 00:23:20,840
then in the pcs we were starting to see

545
00:23:18,480 --> 00:23:23,679
something named opl

546
00:23:20,840 --> 00:23:26,480
chips and these chips

547
00:23:23,679 --> 00:23:28,720
would feature up to nine channels each

548
00:23:26,480 --> 00:23:30,240
channels would have two operators

549
00:23:28,720 --> 00:23:32,159
that they were working in the same

550
00:23:30,240 --> 00:23:34,799
frequency but they could be offset

551
00:23:32,159 --> 00:23:37,120
to have different harmonics these could

552
00:23:34,799 --> 00:23:39,440
either play audio at the same time

553
00:23:37,120 --> 00:23:40,399
or they could be looped back together so

554
00:23:39,440 --> 00:23:42,480
that one

555
00:23:40,400 --> 00:23:45,200
output of the first operator would be

556
00:23:42,480 --> 00:23:51,520
added to the frequency

557
00:23:45,200 --> 00:23:53,440
into the second op operator

558
00:23:51,520 --> 00:23:54,720
and they have a total of nine channels

559
00:23:53,440 --> 00:23:57,919
three of these channels could be

560
00:23:54,720 --> 00:23:57,919
replaced with drums

561
00:23:58,000 --> 00:24:05,840
so how does this chip then sound like

562
00:24:07,200 --> 00:24:12,320
suddenly we got even more knobs we can

563
00:24:09,679 --> 00:24:12,320
twist and turn

564
00:24:12,559 --> 00:24:19,840
so let's do different harmonics for the

565
00:24:16,840 --> 00:24:19,840
operators

566
00:24:22,640 --> 00:24:26,559
but one thing that changed a lot since

567
00:24:25,120 --> 00:24:30,840
commodore 64 is that

568
00:24:26,559 --> 00:24:32,158
all of the sounds are based on sine

569
00:24:30,840 --> 00:24:34,959
waves

570
00:24:32,159 --> 00:24:35,279
so let's do a super quick demo of how

571
00:24:34,960 --> 00:24:47,840
what

572
00:24:35,279 --> 00:24:47,840
music sounds like with this chip

573
00:24:49,130 --> 00:24:57,919
[Music]

574
00:24:58,480 --> 00:25:02,159
so this will be the tip typical music of

575
00:25:00,960 --> 00:25:05,279
the start of the dos

576
00:25:02,159 --> 00:25:07,200
era so

577
00:25:05,279 --> 00:25:09,039
what other chips did we have have around

578
00:25:07,200 --> 00:25:12,240
in the world let's jump a bit

579
00:25:09,039 --> 00:25:12,240
into short time

580
00:25:12,559 --> 00:25:17,200
so commodore didn't give up since

581
00:25:15,679 --> 00:25:20,080
even though the pcs were coming to the

582
00:25:17,200 --> 00:25:23,440
market they come up with amiga

583
00:25:20,080 --> 00:25:26,320
and on amiga we had a sound chip

584
00:25:23,440 --> 00:25:27,120
and they removed the idea of having

585
00:25:26,320 --> 00:25:29,279
having this

586
00:25:27,120 --> 00:25:31,600
synthetic generators instead you will

587
00:25:29,279 --> 00:25:33,440
play back audio samples

588
00:25:31,600 --> 00:25:35,360
and you could choose how fast these

589
00:25:33,440 --> 00:25:37,039
other samples are played back

590
00:25:35,360 --> 00:25:39,279
which gives you different notes and you

591
00:25:37,039 --> 00:25:42,400
can adjust the volume

592
00:25:39,279 --> 00:25:43,360
the amiga features two channels for the

593
00:25:42,400 --> 00:25:47,200
left speakers

594
00:25:43,360 --> 00:25:50,399
and two for the right so a typical music

595
00:25:47,200 --> 00:25:52,559
editor on the amiga would look like this

596
00:25:50,400 --> 00:25:54,799
where we have four major columns

597
00:25:52,559 --> 00:25:58,000
controlling each of the four channels of

598
00:25:54,799 --> 00:26:01,279
on the sound chip each of these

599
00:25:58,000 --> 00:26:03,600
columns you can subdivide into

600
00:26:01,279 --> 00:26:05,760
a note which gives you the initial pitch

601
00:26:03,600 --> 00:26:09,120
of a note

602
00:26:05,760 --> 00:26:11,039
we give it an instrument so

603
00:26:09,120 --> 00:26:12,559
typical amiga modules initially only had

604
00:26:11,039 --> 00:26:15,360
typical support for 16

605
00:26:12,559 --> 00:26:17,520
in instruments and it's only one digit

606
00:26:15,360 --> 00:26:22,158
you could have a volume

607
00:26:17,520 --> 00:26:24,400
effects and parameters to that effect

608
00:26:22,159 --> 00:26:25,520
so what kind of effects could we expect

609
00:26:24,400 --> 00:26:28,720
to do with this sound chip

610
00:26:25,520 --> 00:26:30,480
it's so basic in design right

611
00:26:28,720 --> 00:26:32,240
you can actually do quite a lot by

612
00:26:30,480 --> 00:26:33,600
adjusting the pitch alone

613
00:26:32,240 --> 00:26:35,520
adjusting the pitch alone you can

614
00:26:33,600 --> 00:26:36,799
probably do most of things you can do an

615
00:26:35,520 --> 00:26:38,639
electric guitar

616
00:26:36,799 --> 00:26:40,000
dragging your hand up and down or

617
00:26:38,640 --> 00:26:43,200
vibrating

618
00:26:40,000 --> 00:26:44,799
and all kind of effects and same also

619
00:26:43,200 --> 00:26:47,200
with the volume

620
00:26:44,799 --> 00:26:48,480
by the volume you can slide up and down

621
00:26:47,200 --> 00:26:51,919
or you could do tremolo

622
00:26:48,480 --> 00:26:54,240
by vibrating the vibrating it quickly on

623
00:26:51,919 --> 00:26:54,240
and off

624
00:26:54,720 --> 00:27:02,400
next generation of audio in games

625
00:26:58,640 --> 00:27:05,600
first come the question what was music

626
00:27:02,400 --> 00:27:08,960
well you could divide music into

627
00:27:05,600 --> 00:27:11,039
instruments and no cheats

628
00:27:08,960 --> 00:27:14,159
and here a new standard come up with

629
00:27:11,039 --> 00:27:16,480
keyboards general midi

630
00:27:14,159 --> 00:27:17,840
they went through all of the instruments

631
00:27:16,480 --> 00:27:21,760
and made it into a long

632
00:27:17,840 --> 00:27:26,720
database with major groups like pianos

633
00:27:21,760 --> 00:27:30,320
drums organs and music sheets

634
00:27:26,720 --> 00:27:31,919
a midi file has 16 channels

635
00:27:30,320 --> 00:27:33,360
each channels you can look up as an

636
00:27:31,919 --> 00:27:35,200
actor

637
00:27:33,360 --> 00:27:37,120
which means that you can only play one

638
00:27:35,200 --> 00:27:38,640
kind of instrument at any given time but

639
00:27:37,120 --> 00:27:41,760
you can tell it to change

640
00:27:38,640 --> 00:27:45,520
what kind of instrument it has so midi

641
00:27:41,760 --> 00:27:47,440
is basically a 16 person band

642
00:27:45,520 --> 00:27:48,799
and the note cheat you can convert into

643
00:27:47,440 --> 00:27:50,799
a list of events

644
00:27:48,799 --> 00:27:53,760
when to turn on and off different notes

645
00:27:50,799 --> 00:27:58,158
and what instruments to play

646
00:27:53,760 --> 00:28:01,200
in order to support midi files we use

647
00:27:58,159 --> 00:28:04,720
team dt it's a very old project that

648
00:28:01,200 --> 00:28:07,120
loads sound fonts and renders

649
00:28:04,720 --> 00:28:09,840
the events given in the media file to an

650
00:28:07,120 --> 00:28:09,840
audio stream

651
00:28:10,159 --> 00:28:17,440
so others file formats

652
00:28:14,000 --> 00:28:18,159
mp3 files we're used to doing by using

653
00:28:17,440 --> 00:28:20,960
amp

654
00:28:18,159 --> 00:28:22,000
which is an old old engine to decode mp3

655
00:28:20,960 --> 00:28:25,440
files

656
00:28:22,000 --> 00:28:27,840
it is buggy and instead of bug fixing it

657
00:28:25,440 --> 00:28:28,720
it was easy to just use libmod which

658
00:28:27,840 --> 00:28:31,760
basically all

659
00:28:28,720 --> 00:28:34,159
this distros has installed anyhow same

660
00:28:31,760 --> 00:28:36,240
with og files flag files

661
00:28:34,159 --> 00:28:37,440
all all of those are standard available

662
00:28:36,240 --> 00:28:40,960
in a distro so

663
00:28:37,440 --> 00:28:43,520
just use the alarm libraries and the

664
00:28:40,960 --> 00:28:44,080
files was already built in it's very

665
00:28:43,520 --> 00:28:47,440
basic

666
00:28:44,080 --> 00:28:47,439
easy to pass them

667
00:28:48,399 --> 00:28:56,158
so do i get requests for new formats yes

668
00:28:53,440 --> 00:28:58,080
but luckily many of them are already

669
00:28:56,159 --> 00:29:02,880
open source and you can copy paste

670
00:28:58,080 --> 00:29:02,879
in and out from from them so

671
00:29:03,360 --> 00:29:07,520
last slide thank you all and making your

672
00:29:06,480 --> 00:29:09,440
project open source

673
00:29:07,520 --> 00:29:10,559
is not a negative thing it makes it

674
00:29:09,440 --> 00:29:13,039
possible for you to get

675
00:29:10,559 --> 00:29:13,918
feed feedback bug fixes and if you

676
00:29:13,039 --> 00:29:17,760
abandon the project

677
00:29:13,919 --> 00:29:19,919
other can pick it up and convert it

678
00:29:17,760 --> 00:29:21,440
so thanks to the original authors of

679
00:29:19,919 --> 00:29:23,760
cubic players

680
00:29:21,440 --> 00:29:25,600
contributors and all different libraries

681
00:29:23,760 --> 00:29:29,200
that are open

682
00:29:25,600 --> 00:29:32,879
you can use as is or copy paste out of

683
00:29:29,200 --> 00:29:41,840
and some example sources of music

684
00:29:32,880 --> 00:29:41,840
thank you

685
00:29:42,640 --> 00:29:47,760
i think my time is up so don't think we

686
00:29:44,399 --> 00:29:47,760
have so much time for questions

687
00:29:48,399 --> 00:29:53,360
yeah yeah so if you have any questions

688
00:29:51,679 --> 00:29:54,159
you can either send them to foster or

689
00:29:53,360 --> 00:30:07,360
you can

690
00:29:54,159 --> 00:30:07,360
grab me out in the hall

