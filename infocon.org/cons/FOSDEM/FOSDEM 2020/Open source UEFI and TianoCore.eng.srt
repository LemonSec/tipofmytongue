1
00:00:06,640 --> 00:00:12,719
hi everyone my name is leif lindholm

2
00:00:09,599 --> 00:00:14,320
i used to work for lenaro for many years

3
00:00:12,719 --> 00:00:16,000
and part of this material was created

4
00:00:14,320 --> 00:00:17,760
when i was still employed by linaros i

5
00:00:16,000 --> 00:00:18,960
figured i owe them to build the logo up

6
00:00:17,760 --> 00:00:21,680
there

7
00:00:18,960 --> 00:00:22,080
as of the start of this year i now work

8
00:00:21,680 --> 00:00:25,680
for

9
00:00:22,080 --> 00:00:28,959
nuvia which is a processor company

10
00:00:25,680 --> 00:00:31,920
i'm also one of the stewards

11
00:00:28,960 --> 00:00:34,640
for the tiana core project which is the

12
00:00:31,920 --> 00:00:36,640
umbrella project for the

13
00:00:34,640 --> 00:00:39,280
open source reference implementation of

14
00:00:36,640 --> 00:00:42,840
the uefi specification

15
00:00:39,280 --> 00:00:46,800
and i'm here to talk a little bit about

16
00:00:42,840 --> 00:00:47,600
um open source uefi and tiana core and

17
00:00:46,800 --> 00:00:50,959
how we're

18
00:00:47,600 --> 00:00:54,559
trying to help improve the interactions

19
00:00:50,960 --> 00:00:57,360
with community with regards to

20
00:00:54,559 --> 00:00:59,199
updating specifications and there's a

21
00:00:57,360 --> 00:00:59,839
special thing we agreed last night art

22
00:00:59,199 --> 00:01:01,920
is going to pop

23
00:00:59,840 --> 00:01:04,159
in at the last few minutes to talk about

24
00:01:01,920 --> 00:01:07,520
some ideas he has about

25
00:01:04,159 --> 00:01:13,840
unifying the linux kernel boot protocol

26
00:01:07,520 --> 00:01:13,840
on ue5 platforms

27
00:01:15,600 --> 00:01:22,000
so i'll start with what we call the uefi

28
00:01:18,799 --> 00:01:22,000
code first process

29
00:01:23,119 --> 00:01:26,479
code first is kind of a weird thing to

30
00:01:25,600 --> 00:01:28,559
be talking about

31
00:01:26,479 --> 00:01:30,159
at fosdem i think everyone in this room

32
00:01:28,560 --> 00:01:32,240
knows what it is just not that you

33
00:01:30,159 --> 00:01:35,439
needed to have a name for it

34
00:01:32,240 --> 00:01:39,360
um what we mean in this context is

35
00:01:35,439 --> 00:01:42,158
maybe easier to explain by talking about

36
00:01:39,360 --> 00:01:44,079
how the ue5 forum has worked on

37
00:01:42,159 --> 00:01:46,880
specification changes or additions

38
00:01:44,079 --> 00:01:46,880
up to this point

39
00:01:48,159 --> 00:01:52,479
and that requires some history the uefi

40
00:01:50,560 --> 00:01:54,720
form was originally set up

41
00:01:52,479 --> 00:01:55,679
as a collaborative environment between

42
00:01:54,720 --> 00:01:56,880
on the one side

43
00:01:55,680 --> 00:01:58,799
a bunch of competing hardware

44
00:01:56,880 --> 00:02:02,079
manufacturers like

45
00:01:58,799 --> 00:02:04,880
amd and alarm but also

46
00:02:02,079 --> 00:02:05,679
system in card vendors and on the other

47
00:02:04,880 --> 00:02:07,759
side

48
00:02:05,680 --> 00:02:09,679
a bunch of competing firmware houses or

49
00:02:07,759 --> 00:02:11,038
bios vendors as we still tend to call

50
00:02:09,679 --> 00:02:14,000
them

51
00:02:11,038 --> 00:02:16,000
and peace was maintained in this

52
00:02:14,000 --> 00:02:19,200
situation

53
00:02:16,000 --> 00:02:21,280
by the ufi forum bylaws which as

54
00:02:19,200 --> 00:02:23,760
many industry standards organizations at

55
00:02:21,280 --> 00:02:25,280
least these days

56
00:02:23,760 --> 00:02:26,959
focus quite strongly on protecting

57
00:02:25,280 --> 00:02:30,720
against submarine patents

58
00:02:26,959 --> 00:02:30,720
making it into public specs

59
00:02:31,599 --> 00:02:34,959
and the ultimate guarantee of this

60
00:02:34,239 --> 00:02:36,640
protection

61
00:02:34,959 --> 00:02:38,720
is the process through which

62
00:02:36,640 --> 00:02:41,839
specification changes happen

63
00:02:38,720 --> 00:02:44,480
um which happens through effectively

64
00:02:41,840 --> 00:02:44,959
well mantis or bugzilla tickets being

65
00:02:44,480 --> 00:02:47,359
tracked

66
00:02:44,959 --> 00:02:51,360
in the background and called engineering

67
00:02:47,360 --> 00:02:56,319
change requests or ecrs and these ecrs

68
00:02:51,360 --> 00:02:58,959
are discussed in nda covered meetings

69
00:02:56,319 --> 00:02:59,839
as part of the specification publication

70
00:02:58,959 --> 00:03:01,519
process

71
00:02:59,840 --> 00:03:02,879
members are then given a deadline of

72
00:03:01,519 --> 00:03:06,800
speaking up

73
00:03:02,879 --> 00:03:09,920
or implicitly giving up any opportunity

74
00:03:06,800 --> 00:03:13,040
to claim infringement on any of their

75
00:03:09,920 --> 00:03:17,119
patents in the future

76
00:03:13,040 --> 00:03:18,799
as a result of this the the guidelines

77
00:03:17,120 --> 00:03:21,920
has have always been

78
00:03:18,800 --> 00:03:25,680
that before public publication

79
00:03:21,920 --> 00:03:28,798
um code implementing new features cannot

80
00:03:25,680 --> 00:03:32,000
under any circumstances be published

81
00:03:28,799 --> 00:03:34,959
and as someone who was working

82
00:03:32,000 --> 00:03:36,000
on the 64-bit arm side to try to get

83
00:03:34,959 --> 00:03:38,000
things out

84
00:03:36,000 --> 00:03:41,120
aligned in time this can be more than

85
00:03:38,000 --> 00:03:41,120
slightly frustrating

86
00:03:42,000 --> 00:03:46,080
so the the key point is that really only

87
00:03:44,799 --> 00:03:46,879
after the specification has been

88
00:03:46,080 --> 00:03:49,360
released

89
00:03:46,879 --> 00:03:52,560
is anyone actually protected from the

90
00:03:49,360 --> 00:03:52,560
the patent nonsense

91
00:03:56,959 --> 00:04:03,680
so going back to code first

92
00:04:00,480 --> 00:04:04,640
in short it's a proposal for how we can

93
00:04:03,680 --> 00:04:06,879
organize

94
00:04:04,640 --> 00:04:10,720
the work of prototyping new features in

95
00:04:06,879 --> 00:04:10,720
public without violating the bylaws

96
00:04:11,599 --> 00:04:17,199
i recently sent out a proposal to

97
00:04:14,799 --> 00:04:18,880
the edk ii rfc and edk to develop

98
00:04:17,199 --> 00:04:21,359
mailing lists

99
00:04:18,880 --> 00:04:22,880
the specific message is a link you can

100
00:04:21,358 --> 00:04:23,919
download from the presentation which

101
00:04:22,880 --> 00:04:27,120
should be in the system

102
00:04:23,919 --> 00:04:29,919
already and

103
00:04:27,120 --> 00:04:31,360
the short short version of what this

104
00:04:29,919 --> 00:04:33,840
actually means is

105
00:04:31,360 --> 00:04:34,560
we will be tracking development of new

106
00:04:33,840 --> 00:04:37,840
features

107
00:04:34,560 --> 00:04:41,360
in the tiana core bugzilla and

108
00:04:37,840 --> 00:04:44,479
we will have reference code

109
00:04:41,360 --> 00:04:46,560
and documentation of of the new uh

110
00:04:44,479 --> 00:04:49,280
features held under the tiana core

111
00:04:46,560 --> 00:04:49,280
github area

112
00:04:49,680 --> 00:04:52,960
and then i think i forgot to put a slide

113
00:04:51,440 --> 00:04:56,080
in that points out

114
00:04:52,960 --> 00:04:58,960
that um

115
00:04:56,080 --> 00:05:00,560
once we've done this we've prototyped in

116
00:04:58,960 --> 00:05:03,680
the open

117
00:05:00,560 --> 00:05:04,880
then it will turn into an ecr which can

118
00:05:03,680 --> 00:05:11,199
be discussed by the forum

119
00:05:04,880 --> 00:05:14,639
and the bylaw bylaws are not violated

120
00:05:11,199 --> 00:05:16,080
okay um i think that went quite quick

121
00:05:14,639 --> 00:05:18,160
does anyone have any questions on that

122
00:05:16,080 --> 00:05:20,479
section before i move on to other random

123
00:05:18,160 --> 00:05:20,479
bits

124
00:05:20,639 --> 00:05:27,199
okay so

125
00:05:24,160 --> 00:05:31,520
i have a question yeah the question is

126
00:05:27,199 --> 00:05:33,120
uh how can you ensure that your

127
00:05:31,520 --> 00:05:36,320
proposals

128
00:05:33,120 --> 00:05:39,039
approach don't violate any patents

129
00:05:36,320 --> 00:05:39,039
because nobody

130
00:05:41,280 --> 00:05:44,719
so the question is how can you ensure

131
00:05:43,199 --> 00:05:46,960
that you're not violating any patents

132
00:05:44,720 --> 00:05:48,800
while you're prototyping the feature

133
00:05:46,960 --> 00:05:50,560
uh and the simple answer to that is you

134
00:05:48,800 --> 00:05:52,000
can't right because we've not gone

135
00:05:50,560 --> 00:05:54,800
through that process yet

136
00:05:52,000 --> 00:05:55,440
so while you're prototyping it we would

137
00:05:54,800 --> 00:05:57,039
you know

138
00:05:55,440 --> 00:05:59,440
recommend that you don't put the

139
00:05:57,039 --> 00:06:00,960
prototype thing into your product

140
00:05:59,440 --> 00:06:03,360
but it does mean we can do all of the

141
00:06:00,960 --> 00:06:05,758
development in public

142
00:06:03,360 --> 00:06:07,600
beforehand rather than doing something

143
00:06:05,759 --> 00:06:10,240
in the specification and then moving

144
00:06:07,600 --> 00:06:10,240
into the public

145
00:06:15,600 --> 00:06:19,600
it's that is certainly theoretical

146
00:06:17,199 --> 00:06:22,880
possibility but the intent is very much

147
00:06:19,600 --> 00:06:24,639
that that's not going to be the case

148
00:06:22,880 --> 00:06:27,199
you may want to did you explain staging

149
00:06:24,639 --> 00:06:27,199
because maybe

150
00:06:31,600 --> 00:06:35,039
yeah so i mean as a when we're putting

151
00:06:34,240 --> 00:06:37,520
the

152
00:06:35,039 --> 00:06:38,800
um whilst the things are are in flight

153
00:06:37,520 --> 00:06:41,198
we have a

154
00:06:38,800 --> 00:06:43,680
repository called edk2 staging on that

155
00:06:41,199 --> 00:06:46,720
github area which is separate from the

156
00:06:43,680 --> 00:06:48,880
main edk2 repository is that what you

157
00:06:46,720 --> 00:06:48,880
meant

158
00:06:51,360 --> 00:06:56,160
so this isn't actually news as such

159
00:06:54,560 --> 00:06:59,039
as in i could have presented this last

160
00:06:56,160 --> 00:07:00,639
year but i didn't give a talk last year

161
00:06:59,039 --> 00:07:02,560
so it's the first time it's been talked

162
00:07:00,639 --> 00:07:05,759
about at foster i think

163
00:07:02,560 --> 00:07:09,360
um so viewify

164
00:07:05,759 --> 00:07:11,199
self-certification test suite

165
00:07:09,360 --> 00:07:13,440
there are many test suites available to

166
00:07:11,199 --> 00:07:14,880
help verify the correctness of system

167
00:07:13,440 --> 00:07:15,680
firmware you have the firmware test

168
00:07:14,880 --> 00:07:18,159
suite

169
00:07:15,680 --> 00:07:19,520
have the arm server acs you have chipset

170
00:07:18,160 --> 00:07:20,960
and and probably a bunch of others that

171
00:07:19,520 --> 00:07:22,880
i couldn't be bothered to dig up for the

172
00:07:20,960 --> 00:07:26,080
list

173
00:07:22,880 --> 00:07:28,719
the uefi sct is a very basic one

174
00:07:26,080 --> 00:07:30,159
but it verifies fundamental api

175
00:07:28,720 --> 00:07:34,160
conformance for

176
00:07:30,160 --> 00:07:38,479
uefi implementations historically

177
00:07:34,160 --> 00:07:40,479
that was not only secret but

178
00:07:38,479 --> 00:07:43,440
like not properly version controlled

179
00:07:40,479 --> 00:07:47,120
really and it was all a bit of a mess

180
00:07:43,440 --> 00:07:49,360
but as of october 2018 that is now

181
00:07:47,120 --> 00:07:50,879
open source on github and people can

182
00:07:49,360 --> 00:07:54,720
contribute to it

183
00:07:50,879 --> 00:07:54,720
um and

184
00:07:55,120 --> 00:08:01,440
yeah i think i'm giving up on that

185
00:07:58,400 --> 00:08:02,719
one of the benefits of sct is that it is

186
00:08:01,440 --> 00:08:07,199
a test suite

187
00:08:02,720 --> 00:08:08,960
for all uefi implementations

188
00:08:07,199 --> 00:08:12,319
so with the addition of the uefi

189
00:08:08,960 --> 00:08:14,080
interfaces to to you boots it's it's

190
00:08:12,319 --> 00:08:15,599
been really useful to be able to prove

191
00:08:14,080 --> 00:08:18,080
in device consistency between the

192
00:08:15,599 --> 00:08:21,120
implementations and

193
00:08:18,080 --> 00:08:23,120
for me even more important is that we're

194
00:08:21,120 --> 00:08:23,759
finally able to test the test suite

195
00:08:23,120 --> 00:08:27,599
against

196
00:08:23,759 --> 00:08:29,599
different implementations and as part of

197
00:08:27,599 --> 00:08:31,759
of his work with ubud heinrich has

198
00:08:29,599 --> 00:08:32,159
already resolved some issues in the uefi

199
00:08:31,759 --> 00:08:35,360
shell

200
00:08:32,159 --> 00:08:37,039
and in inside sct itself which we could

201
00:08:35,360 --> 00:08:41,760
not trigger

202
00:08:37,039 --> 00:08:45,120
just against edk ii

203
00:08:41,760 --> 00:08:45,839
right some completely random unrelated

204
00:08:45,120 --> 00:08:49,760
slides

205
00:08:45,839 --> 00:08:53,279
before i hand over to our art

206
00:08:49,760 --> 00:08:53,600
risk five i actually missed the risk 5

207
00:08:53,279 --> 00:08:57,040
talk

208
00:08:53,600 --> 00:09:01,279
earlier today but the support for

209
00:08:57,040 --> 00:09:03,839
64-bit risk 5 is going upstream in edk-2

210
00:09:01,279 --> 00:09:04,560
a proof of concept port was initially

211
00:09:03,839 --> 00:09:08,160
submitted

212
00:09:04,560 --> 00:09:10,800
in 2016. um

213
00:09:08,160 --> 00:09:12,719
but that was then kind of left alone

214
00:09:10,800 --> 00:09:15,359
until

215
00:09:12,720 --> 00:09:17,040
summer last year um but now we've been

216
00:09:15,360 --> 00:09:17,680
going through and reworking it i've been

217
00:09:17,040 --> 00:09:20,160
reviewing it

218
00:09:17,680 --> 00:09:21,359
and abner chatting at hp and reworking

219
00:09:20,160 --> 00:09:24,079
it and upstreaming it

220
00:09:21,360 --> 00:09:25,920
and working also with opensbi to make

221
00:09:24,080 --> 00:09:29,360
that easier to plug into

222
00:09:25,920 --> 00:09:31,920
the edk2 port so you can track the

223
00:09:29,360 --> 00:09:35,519
current status on the risc-5

224
00:09:31,920 --> 00:09:36,079
v2 port at that link if you click there

225
00:09:35,519 --> 00:09:37,920
now

226
00:09:36,080 --> 00:09:40,640
you're going to find something very very

227
00:09:37,920 --> 00:09:42,880
boring but if you wait a few days

228
00:09:40,640 --> 00:09:45,360
i'm going to have the latest stage of

229
00:09:42,880 --> 00:09:48,560
things up there

230
00:09:45,360 --> 00:09:52,320
my personal goal is that we

231
00:09:48,560 --> 00:09:57,439
include risk 5 in the q2

232
00:09:52,320 --> 00:09:57,440
stable tag of edk2

233
00:10:03,519 --> 00:10:09,120
licensing always important at

234
00:10:06,560 --> 00:10:11,279
fosdem edk2 used to have a really

235
00:10:09,120 --> 00:10:13,760
tedious licensing situation

236
00:10:11,279 --> 00:10:15,360
um with a separate tiana core

237
00:10:13,760 --> 00:10:17,120
contribution agreement

238
00:10:15,360 --> 00:10:19,360
working in conjunction with the two

239
00:10:17,120 --> 00:10:23,120
class bsd

240
00:10:19,360 --> 00:10:27,519
finally april last year we

241
00:10:23,120 --> 00:10:29,920
re-licensed all of this to a bsd2 clause

242
00:10:27,519 --> 00:10:31,200
with the explicit patent grant which

243
00:10:29,920 --> 00:10:33,680
gives exactly the same

244
00:10:31,200 --> 00:10:35,120
kind of protection as the tiana

245
00:10:33,680 --> 00:10:38,239
contribution agreement did

246
00:10:35,120 --> 00:10:40,800
but it wasn't home rolled

247
00:10:38,240 --> 00:10:42,880
at the same time we took the opportunity

248
00:10:40,800 --> 00:10:46,000
to transition to using spdx

249
00:10:42,880 --> 00:10:49,040
instead of regurgitating hold licenses

250
00:10:46,000 --> 00:10:49,680
in in every single source file and the

251
00:10:49,040 --> 00:10:52,719
open source

252
00:10:49,680 --> 00:10:53,599
platform three edk2 platforms also uh

253
00:10:52,720 --> 00:10:56,720
followed suits

254
00:10:53,600 --> 00:11:00,880
uh in a bit later last year so that's

255
00:10:56,720 --> 00:11:04,480
that's all up scratch

256
00:11:00,880 --> 00:11:06,399
um we support python 3 and python 2

257
00:11:04,480 --> 00:11:08,079
these days which may or may not be

258
00:11:06,399 --> 00:11:10,480
useful depending on how many extensions

259
00:11:08,079 --> 00:11:10,479
you get

260
00:11:10,800 --> 00:11:14,880
we fixed the maintainers text format so

261
00:11:13,519 --> 00:11:18,320
we used to have

262
00:11:14,880 --> 00:11:20,160
a bit of a very non-granular

263
00:11:18,320 --> 00:11:22,160
way of who was maintaining which part of

264
00:11:20,160 --> 00:11:23,680
code we've now moved to something that

265
00:11:22,160 --> 00:11:26,480
looks a lot more like what

266
00:11:23,680 --> 00:11:28,239
qemu and linux have and also develop

267
00:11:26,480 --> 00:11:29,920
some new um

268
00:11:28,240 --> 00:11:32,240
scripts to help so we have a get

269
00:11:29,920 --> 00:11:35,279
maintained at pi

270
00:11:32,240 --> 00:11:38,399
and i also wrote a setup git dot pi to

271
00:11:35,279 --> 00:11:40,320
make some some common known good

272
00:11:38,399 --> 00:11:43,839
settings for sending things to tiana

273
00:11:40,320 --> 00:11:43,839
core work right

274
00:11:45,279 --> 00:11:49,680
and no

275
00:11:49,839 --> 00:11:57,839
no i think i think it's time for art

276
00:12:06,480 --> 00:12:13,680
oh yeah i have stickers

277
00:12:10,720 --> 00:12:15,360
just hold it like this um good afternoon

278
00:12:13,680 --> 00:12:16,079
everyone my name is rb seville i work

279
00:12:15,360 --> 00:12:21,120
for arm

280
00:12:16,079 --> 00:12:21,120
and i manage the linux efi

281
00:12:22,839 --> 00:12:27,920
subsystem

282
00:12:24,160 --> 00:12:31,279
wonderful okay um

283
00:12:27,920 --> 00:12:31,839
yeah so i maintain the efi subsystem in

284
00:12:31,279 --> 00:12:34,240
linux

285
00:12:31,839 --> 00:12:37,279
and well my background is arm i was

286
00:12:34,240 --> 00:12:39,120
formerly at lenaro as well

287
00:12:37,279 --> 00:12:40,959
and only lately like the past month or

288
00:12:39,120 --> 00:12:43,040
so i have to have the pleasure of

289
00:12:40,959 --> 00:12:46,239
looking at the x86 code we have in the

290
00:12:43,040 --> 00:12:49,120
file stop to boot

291
00:12:46,240 --> 00:12:51,360
uh well find innit rds and find command

292
00:12:49,120 --> 00:12:53,839
line find parameters etc

293
00:12:51,360 --> 00:12:56,000
and so what i'm looking into now

294
00:12:53,839 --> 00:12:58,320
especially because we want to have

295
00:12:56,000 --> 00:12:59,600
secure boot stuff going up streaming

296
00:12:58,320 --> 00:13:03,120
grub in other places

297
00:12:59,600 --> 00:13:06,320
is to see if we can

298
00:13:03,120 --> 00:13:07,760
unify that get rid of all the well

299
00:13:06,320 --> 00:13:09,279
bespoke pieces for different

300
00:13:07,760 --> 00:13:10,480
architectures that live in the various

301
00:13:09,279 --> 00:13:18,000
boot loaders

302
00:13:10,480 --> 00:13:18,000
so what up yes sorry

303
00:13:18,839 --> 00:13:21,839
is

304
00:13:22,399 --> 00:13:25,680
okay that's an interesting uh yeah um

305
00:13:25,200 --> 00:13:28,480
okay

306
00:13:25,680 --> 00:13:30,479
so what i'm proposing what i'm uh

307
00:13:28,480 --> 00:13:31,120
prototyping and what i'll send out to

308
00:13:30,480 --> 00:13:34,399
the list

309
00:13:31,120 --> 00:13:37,839
soon is a way of booting

310
00:13:34,399 --> 00:13:39,120
the linux kernel in efi mode completely

311
00:13:37,839 --> 00:13:41,279
generically

312
00:13:39,120 --> 00:13:41,279
so

313
00:13:42,399 --> 00:13:46,959
yes so what i will be proposing and

314
00:13:44,959 --> 00:13:49,040
sending to the list soon is a way to

315
00:13:46,959 --> 00:13:50,638
boot the linux kernel from grub or from

316
00:13:49,040 --> 00:13:53,680
you boot or for whatever efi

317
00:13:50,639 --> 00:13:56,160
capable system firmware

318
00:13:53,680 --> 00:13:56,800
completely generically so there will be

319
00:13:56,160 --> 00:14:00,000
no

320
00:13:56,800 --> 00:14:00,560
dt handling to put in init rd addresses

321
00:14:00,000 --> 00:14:02,959
or no

322
00:14:00,560 --> 00:14:04,319
boot params truck that gets populated

323
00:14:02,959 --> 00:14:09,920
etc it's all

324
00:14:04,320 --> 00:14:12,959
simple efi protocols and interfaces

325
00:14:09,920 --> 00:14:15,360
that should permit like the next

326
00:14:12,959 --> 00:14:16,560
architecture that gets crop support or

327
00:14:15,360 --> 00:14:18,399
the next

328
00:14:16,560 --> 00:14:20,160
architecture that gets added to you or

329
00:14:18,399 --> 00:14:21,760
whatever to just use complete generic

330
00:14:20,160 --> 00:14:23,760
interfaces

331
00:14:21,760 --> 00:14:25,199
and hopefully move over the existing

332
00:14:23,760 --> 00:14:28,880
architectures

333
00:14:25,199 --> 00:14:30,719
well we discussed yesterday it may take

334
00:14:28,880 --> 00:14:32,320
five years it may take 20 years but at

335
00:14:30,720 --> 00:14:35,600
least we have something

336
00:14:32,320 --> 00:14:38,000
to move towards to to make it completely

337
00:14:35,600 --> 00:14:38,000
generic

338
00:14:39,199 --> 00:14:45,839
any questions about that

339
00:14:50,240 --> 00:14:54,560
uh no no no it doesn't look like it does

340
00:14:55,600 --> 00:15:02,959
you mentioned a running against

341
00:14:58,959 --> 00:15:06,719
piano core and running against ubud

342
00:15:02,959 --> 00:15:10,000
implementation but have you run a ct

343
00:15:06,720 --> 00:15:12,079
against some closed binary close closed

344
00:15:10,000 --> 00:15:14,560
ufi implementations

345
00:15:12,079 --> 00:15:15,279
i have i personally know but they all do

346
00:15:14,560 --> 00:15:18,719
it themselves

347
00:15:15,279 --> 00:15:20,000
so sorry

348
00:15:18,720 --> 00:15:22,320
i was expecting martian to be loud

349
00:15:20,000 --> 00:15:24,399
enough to be heard from over there

350
00:15:22,320 --> 00:15:27,120
the question was whether i had tested

351
00:15:24,399 --> 00:15:29,440
sct on any closed source

352
00:15:27,120 --> 00:15:30,639
bias implementations i personally

353
00:15:29,440 --> 00:15:32,399
haven't

354
00:15:30,639 --> 00:15:34,240
i know other people have and i know that

355
00:15:32,399 --> 00:15:41,839
all of the bias vendors that they kind

356
00:15:34,240 --> 00:15:41,839
of have to do it

357
00:15:46,959 --> 00:15:57,619
okay thank you

358
00:15:53,890 --> 00:15:57,620
[Applause]

359
00:16:00,800 --> 00:16:02,880
you

