1
00:00:06,640 --> 00:00:08,879
okay

2
00:00:09,519 --> 00:00:15,280
our next talk andre is going to uh

3
00:00:12,000 --> 00:00:17,440
update us on srs lte

4
00:00:15,280 --> 00:00:19,439
thanks so we should be running behind

5
00:00:17,440 --> 00:00:20,880
and that would mean that we are in 2020

6
00:00:19,439 --> 00:00:24,240
in february is the second

7
00:00:20,880 --> 00:00:26,160
it's two past two yeah

8
00:00:24,240 --> 00:00:29,439
it's the only day ever that americans

9
00:00:26,160 --> 00:00:32,560
get there and that's the only

10
00:00:29,439 --> 00:00:32,560
and it's the only slot

11
00:00:33,760 --> 00:00:37,120
cool so for those of you who don't know

12
00:00:36,640 --> 00:00:40,879
us

13
00:00:37,120 --> 00:00:44,239
we're building uh open source end-to-end

14
00:00:40,879 --> 00:00:47,519
3gbp protocol stacks so with

15
00:00:44,239 --> 00:00:48,640
our software you can build like fully in

16
00:00:47,520 --> 00:00:52,079
software run a

17
00:00:48,640 --> 00:00:54,079
entire lte network so you can have a ue

18
00:00:52,079 --> 00:00:55,920
you have an enode b which is the base

19
00:00:54,079 --> 00:00:57,760
station and a core network

20
00:00:55,920 --> 00:01:00,079
you can that run that entirely in

21
00:00:57,760 --> 00:01:01,199
software with usurps or or rf front ends

22
00:01:00,079 --> 00:01:03,280
you can use the e note b

23
00:01:01,199 --> 00:01:04,640
connect commercial handset so your phone

24
00:01:03,280 --> 00:01:06,400
to the enough b

25
00:01:04,640 --> 00:01:08,080
or you can use the ue and connect to a

26
00:01:06,400 --> 00:01:12,320
commercial

27
00:01:08,080 --> 00:01:12,798
cell if you if you want so um and we do

28
00:01:12,320 --> 00:01:14,960
all

29
00:01:12,799 --> 00:01:17,439
sorts of crazy things with that so we we

30
00:01:14,960 --> 00:01:20,559
put the uis in cars and then planes and

31
00:01:17,439 --> 00:01:23,360
uh like satellites and stuff like this

32
00:01:20,560 --> 00:01:25,280
um most of us know us obviously through

33
00:01:23,360 --> 00:01:29,360
the open source project and

34
00:01:25,280 --> 00:01:32,320
um like we have a big or long history of

35
00:01:29,360 --> 00:01:34,000
of uh researchers that use it for like

36
00:01:32,320 --> 00:01:36,240
security analysis

37
00:01:34,000 --> 00:01:37,680
and that would be uh like a list of the

38
00:01:36,240 --> 00:01:40,960
gsma which is a

39
00:01:37,680 --> 00:01:43,520
like a central uh entity that collects

40
00:01:40,960 --> 00:01:45,439
um security vulnerabilities uh

41
00:01:43,520 --> 00:01:48,880
discovered in three stacks

42
00:01:45,439 --> 00:01:51,199
um and out of this list um

43
00:01:48,880 --> 00:01:52,640
all of those uh have used srs lte so

44
00:01:51,200 --> 00:01:55,840
it's pretty so eight

45
00:01:52,640 --> 00:01:56,960
eight out of 11 of the recent cbds have

46
00:01:55,840 --> 00:01:59,439
have used that

47
00:01:56,960 --> 00:02:02,000
and we have a list online on ssid.com

48
00:01:59,439 --> 00:02:02,398
and it lists currently over 165 resource

49
00:02:02,000 --> 00:02:04,719
paid

50
00:02:02,399 --> 00:02:05,520
research papers using our software for

51
00:02:04,719 --> 00:02:06,880
um

52
00:02:05,520 --> 00:02:08,799
but obviously there's other use cases

53
00:02:06,880 --> 00:02:10,478
not just research or not just security

54
00:02:08,800 --> 00:02:12,080
research

55
00:02:10,479 --> 00:02:13,520
so what are we talking about a little

56
00:02:12,080 --> 00:02:17,440
bit is uh the highlights

57
00:02:13,520 --> 00:02:20,000
of srs lte uh from from 2019

58
00:02:17,440 --> 00:02:21,520
we're looking a little bit of at 2020.

59
00:02:20,000 --> 00:02:22,000
uh then i had a little talk about a

60
00:02:21,520 --> 00:02:23,360
little bit

61
00:02:22,000 --> 00:02:25,280
about the platforms that we're targeting

62
00:02:23,360 --> 00:02:27,680
because this has um

63
00:02:25,280 --> 00:02:30,319
we've extended this a little bit uh and

64
00:02:27,680 --> 00:02:34,000
uh briefly this uh touching

65
00:02:30,319 --> 00:02:35,760
well uh continuous integration um

66
00:02:34,000 --> 00:02:38,560
continuous delivery test and quality

67
00:02:35,760 --> 00:02:42,720
assurance in in general

68
00:02:38,560 --> 00:02:45,840
so in 2019 uh we had um

69
00:02:42,720 --> 00:02:46,640
three um releases so we've uh been

70
00:02:45,840 --> 00:02:50,480
following a

71
00:02:46,640 --> 00:02:53,760
um like a three um

72
00:02:50,480 --> 00:02:56,799
release cycle uh and in early 19

73
00:02:53,760 --> 00:02:59,920
uh we we added um

74
00:02:56,800 --> 00:03:01,840
dtd support so uh time

75
00:02:59,920 --> 00:03:03,040
division duplexing something that is not

76
00:03:01,840 --> 00:03:06,560
used here but

77
00:03:03,040 --> 00:03:09,840
in in china carrier aggregation

78
00:03:06,560 --> 00:03:11,920
to the ue we added a 3gbp channel

79
00:03:09,840 --> 00:03:15,120
simulator so you could

80
00:03:11,920 --> 00:03:17,518
basically emulate a channel

81
00:03:15,120 --> 00:03:19,280
when it is received from the ue or

82
00:03:17,519 --> 00:03:20,959
transmitted at the enough b

83
00:03:19,280 --> 00:03:23,200
uh we added paging and user plane

84
00:03:20,959 --> 00:03:26,239
encryption uh to the enough b

85
00:03:23,200 --> 00:03:29,518
and the epc you know in o6

86
00:03:26,239 --> 00:03:33,200
um we basically used

87
00:03:29,519 --> 00:03:36,239
those two releases in 1906 and 1909 to

88
00:03:33,200 --> 00:03:37,359
refactor a big portion of our of our

89
00:03:36,239 --> 00:03:40,239
protocol stack

90
00:03:37,360 --> 00:03:40,799
so there hasn't been a lot of features

91
00:03:40,239 --> 00:03:43,200
added into

92
00:03:40,799 --> 00:03:44,720
this reason also the next one so we

93
00:03:43,200 --> 00:03:47,119
focused on preparing it

94
00:03:44,720 --> 00:03:47,920
and making it scalable for for all the

95
00:03:47,120 --> 00:03:50,319
development

96
00:03:47,920 --> 00:03:52,238
all developments that yeah we were

97
00:03:50,319 --> 00:03:55,760
planning to do

98
00:03:52,239 --> 00:03:59,599
so we did it in summer and in 1909

99
00:03:55,760 --> 00:04:02,798
we started to open source the first

100
00:03:59,599 --> 00:04:04,000
5g and r blocks which were uh yeah

101
00:04:02,799 --> 00:04:06,000
i'm going to talk about this a little

102
00:04:04,000 --> 00:04:08,799
bit uh in detail but there were kind of

103
00:04:06,000 --> 00:04:10,239
extensions to protocol layers uh to data

104
00:04:08,799 --> 00:04:13,840
plane protocol layers that we had

105
00:04:10,239 --> 00:04:16,478
um we started to put mbiot which has

106
00:04:13,840 --> 00:04:17,600
previously been a closed source

107
00:04:16,478 --> 00:04:20,238
implementation

108
00:04:17,600 --> 00:04:22,560
we started to put that open source

109
00:04:20,238 --> 00:04:25,280
through the community we added a circuit

110
00:04:22,560 --> 00:04:27,680
circuit switched fallback so that you

111
00:04:25,280 --> 00:04:30,960
can actually use

112
00:04:27,680 --> 00:04:34,080
have a network of 2g and 4g and have

113
00:04:30,960 --> 00:04:38,239
someone um yeah falling back to to

114
00:04:34,080 --> 00:04:41,359
uh to 2g for for having calls

115
00:04:38,240 --> 00:04:45,199
yeah thanks to to howard for uh who's

116
00:04:41,360 --> 00:04:49,520
unfortunately sick this day so

117
00:04:45,199 --> 00:04:49,520
get better soon so we get more

118
00:04:50,720 --> 00:04:54,080
more editions from howard there

119
00:04:55,199 --> 00:04:59,120
yeah we also added uh conformance

120
00:04:56,960 --> 00:05:00,239
testing um like we started to add the

121
00:04:59,120 --> 00:05:03,600
conformance testing

122
00:05:00,240 --> 00:05:06,639
architecture there um and in 1912 so

123
00:05:03,600 --> 00:05:10,720
just in december uh we added uh

124
00:05:06,639 --> 00:05:11,280
for the protocol layers for for 5g we

125
00:05:10,720 --> 00:05:14,000
added

126
00:05:11,280 --> 00:05:16,239
support for rc message packing unpacking

127
00:05:14,000 --> 00:05:17,120
and also for interacting with the 5g

128
00:05:16,240 --> 00:05:20,400
core

129
00:05:17,120 --> 00:05:21,039
we started to add ngap packing as well

130
00:05:20,400 --> 00:05:23,039
as

131
00:05:21,039 --> 00:05:24,159
some cycling support i'll be talking

132
00:05:23,039 --> 00:05:26,639
about this

133
00:05:24,160 --> 00:05:26,639
later on

134
00:05:27,680 --> 00:05:32,479
so for 2020 we are actually planning to

135
00:05:30,320 --> 00:05:35,360
change our release cycle a little bit

136
00:05:32,479 --> 00:05:35,919
so those past years in which we have

137
00:05:35,360 --> 00:05:38,479
done

138
00:05:35,919 --> 00:05:39,440
a three-month uh cycle they have been

139
00:05:38,479 --> 00:05:42,159
quite stressful

140
00:05:39,440 --> 00:05:43,840
um not only because it takes a lot of

141
00:05:42,160 --> 00:05:46,320
time to prepare releases and

142
00:05:43,840 --> 00:05:47,520
you know fix everyone wants to you know

143
00:05:46,320 --> 00:05:49,440
get

144
00:05:47,520 --> 00:05:51,359
you know pull requests merged in and

145
00:05:49,440 --> 00:05:53,759
then you need to make sure that

146
00:05:51,360 --> 00:05:54,479
you do the quality assurance okay and

147
00:05:53,759 --> 00:05:56,160
that everything

148
00:05:54,479 --> 00:05:57,919
does not you know break and you don't

149
00:05:56,160 --> 00:06:01,199
introduce regressions

150
00:05:57,919 --> 00:06:03,280
um but especially the the o6 and

151
00:06:01,199 --> 00:06:05,039
012 release they were quite hard because

152
00:06:03,280 --> 00:06:06,400
it was close to christmas everyone was

153
00:06:05,039 --> 00:06:10,240
on vacation

154
00:06:06,400 --> 00:06:13,120
um and and then that's why we

155
00:06:10,240 --> 00:06:13,520
we decided to to go uh for that six

156
00:06:13,120 --> 00:06:15,280
month

157
00:06:13,520 --> 00:06:17,599
uh cycle from now on basically so that

158
00:06:15,280 --> 00:06:19,919
there won't be a 20 or three

159
00:06:17,600 --> 00:06:22,240
so we will adopting kind of the ubuntu

160
00:06:19,919 --> 00:06:25,919
cycle and then releasing an in

161
00:06:22,240 --> 00:06:28,080
no4 and no 10 because that

162
00:06:25,919 --> 00:06:30,479
better fits our development cycle so

163
00:06:28,080 --> 00:06:32,080
basically after the

164
00:06:30,479 --> 00:06:34,159
well after the start of the year you

165
00:06:32,080 --> 00:06:34,719
have enough time to prepare things and

166
00:06:34,160 --> 00:06:37,759
then

167
00:06:34,720 --> 00:06:40,880
at least that's what is our intention um

168
00:06:37,759 --> 00:06:42,080
we'll see and then for the autumn

169
00:06:40,880 --> 00:06:44,400
release

170
00:06:42,080 --> 00:06:45,758
after the summer everyone comes back and

171
00:06:44,400 --> 00:06:46,239
you develop and test and then you have a

172
00:06:45,759 --> 00:06:47,759
good

173
00:06:46,240 --> 00:06:50,479
autumn release so that that's what we

174
00:06:47,759 --> 00:06:53,680
were looking at uh for for 2020 at least

175
00:06:50,479 --> 00:06:54,880
let's see if we uh change that in 21 i

176
00:06:53,680 --> 00:06:57,039
don't know

177
00:06:54,880 --> 00:06:59,280
okay so what are the upcoming uh

178
00:06:57,039 --> 00:07:02,318
features for 2020

179
00:06:59,280 --> 00:07:02,880
so we will add more 5g and our stuff for

180
00:07:02,319 --> 00:07:05,840
sure

181
00:07:02,880 --> 00:07:08,080
and something that we are looking at is

182
00:07:05,840 --> 00:07:10,560
nsa so non-standalone mode

183
00:07:08,080 --> 00:07:11,680
which uh basically means that and and

184
00:07:10,560 --> 00:07:12,960
all

185
00:07:11,680 --> 00:07:15,520
deployments that you're currently out

186
00:07:12,960 --> 00:07:17,280
there they are non-standalone which

187
00:07:15,520 --> 00:07:19,599
basically means that you always have a

188
00:07:17,280 --> 00:07:20,479
4g which kind of serve as an anchor

189
00:07:19,599 --> 00:07:23,599
carrier

190
00:07:20,479 --> 00:07:24,159
and all the control all the signaling is

191
00:07:23,599 --> 00:07:27,599
going

192
00:07:24,160 --> 00:07:30,720
over 4g always and and

193
00:07:27,599 --> 00:07:34,159
the nr is just to offload and to provide

194
00:07:30,720 --> 00:07:37,120
high throughput essentially and um

195
00:07:34,160 --> 00:07:38,160
and it only supports the data plane so

196
00:07:37,120 --> 00:07:41,039
you know b

197
00:07:38,160 --> 00:07:42,960
you know can ask to enable a 5g bearer

198
00:07:41,039 --> 00:07:44,960
and then you have additional

199
00:07:42,960 --> 00:07:46,479
capacity and the additional channel that

200
00:07:44,960 --> 00:07:49,039
goes over

201
00:07:46,479 --> 00:07:50,960
over nr but you always need 4g so

202
00:07:49,039 --> 00:07:52,639
there's no no way

203
00:07:50,960 --> 00:07:54,400
as opposed to standalone where you

204
00:07:52,639 --> 00:07:58,960
really have on the right side

205
00:07:54,400 --> 00:08:01,919
like a 5g core so a core network that um

206
00:07:58,960 --> 00:08:03,440
you know exists and speaks to the the

207
00:08:01,919 --> 00:08:05,758
the 5g language and

208
00:08:03,440 --> 00:08:06,879
and can really run independently well

209
00:08:05,759 --> 00:08:10,400
standalone

210
00:08:06,879 --> 00:08:11,599
as the name says um and as for most of

211
00:08:10,400 --> 00:08:13,599
our development

212
00:08:11,599 --> 00:08:15,520
developments we are focusing on the ue

213
00:08:13,599 --> 00:08:18,159
first so this will

214
00:08:15,520 --> 00:08:18,560
be added in the beginning and then later

215
00:08:18,160 --> 00:08:23,120
on

216
00:08:18,560 --> 00:08:26,080
the enough b what we have done so far is

217
00:08:23,120 --> 00:08:27,120
the user plane protocol layers like all

218
00:08:26,080 --> 00:08:29,199
the extensions to mac

219
00:08:27,120 --> 00:08:30,479
are c pdcp they're they're pretty much

220
00:08:29,199 --> 00:08:33,039
done uh

221
00:08:30,479 --> 00:08:34,559
the the full control plane is is there

222
00:08:33,039 --> 00:08:37,360
uh for non center load

223
00:08:34,559 --> 00:08:38,478
so announcing that my phone is uh able

224
00:08:37,360 --> 00:08:40,479
to speak 5g

225
00:08:38,479 --> 00:08:42,080
and stuff like this that you need to do

226
00:08:40,479 --> 00:08:44,399
and and that's all

227
00:08:42,080 --> 00:08:46,959
all there so what we're looking at now

228
00:08:44,399 --> 00:08:49,519
is to to do the control plane

229
00:08:46,959 --> 00:08:51,439
uh i mean not really control plane but

230
00:08:49,519 --> 00:08:54,720
the part of the nr

231
00:08:51,440 --> 00:08:56,800
that is still needed for

232
00:08:54,720 --> 00:08:58,959
let's say on this side uh so there's a

233
00:08:56,800 --> 00:09:01,680
little bit of control and and

234
00:08:58,959 --> 00:09:02,239
signaling needed um adding this and then

235
00:09:01,680 --> 00:09:04,239
we're

236
00:09:02,240 --> 00:09:05,680
extending the phi uh so we will be

237
00:09:04,240 --> 00:09:09,839
writing a

238
00:09:05,680 --> 00:09:13,199
x86 implementation of the nrfi

239
00:09:09,839 --> 00:09:14,399
as well as in rf socks on fpga based

240
00:09:13,200 --> 00:09:17,920
implementation that

241
00:09:14,399 --> 00:09:20,959
leverages some hardware effect on

242
00:09:17,920 --> 00:09:22,000
on xilinx fabric and we will targeting

243
00:09:20,959 --> 00:09:23,760
those um

244
00:09:22,000 --> 00:09:25,040
and uh the upper protocol is there just

245
00:09:23,760 --> 00:09:27,600
run on on the arms

246
00:09:25,040 --> 00:09:29,120
in in this platform or in x86 so this is

247
00:09:27,600 --> 00:09:33,440
not um

248
00:09:29,120 --> 00:09:35,440
this is no problem uh cv2x uh

249
00:09:33,440 --> 00:09:38,000
uh so basically we've heard about uh

250
00:09:35,440 --> 00:09:41,360
card to car communication um

251
00:09:38,000 --> 00:09:43,920
using uh 11p so there's kind of two

252
00:09:41,360 --> 00:09:44,800
competing standards uh for for the car

253
00:09:43,920 --> 00:09:46,399
communication

254
00:09:44,800 --> 00:09:48,560
one is based on wi-fi and the other one

255
00:09:46,399 --> 00:09:50,399
is the cellular um

256
00:09:48,560 --> 00:09:52,959
way and that's why they put c there so

257
00:09:50,399 --> 00:09:55,279
it's the cellular v2x

258
00:09:52,959 --> 00:09:56,800
and um so basically what it means if

259
00:09:55,279 --> 00:09:57,360
you're if you're talking in a cellular

260
00:09:56,800 --> 00:10:00,880
context

261
00:09:57,360 --> 00:10:03,920
is that usually like a phone is

262
00:10:00,880 --> 00:10:06,560
is connected to um to a base station and

263
00:10:03,920 --> 00:10:10,319
there's uplink downlink going through

264
00:10:06,560 --> 00:10:11,599
um back and forth between a ui and the

265
00:10:10,320 --> 00:10:14,720
base station

266
00:10:11,600 --> 00:10:16,560
and um if there is if you have two ues

267
00:10:14,720 --> 00:10:18,079
that want to communicate you always need

268
00:10:16,560 --> 00:10:19,518
to go through the um

269
00:10:18,079 --> 00:10:21,439
for the base station so you center

270
00:10:19,519 --> 00:10:23,440
essentially having a round trip time

271
00:10:21,440 --> 00:10:25,519
or a round trip between two degrees it's

272
00:10:23,440 --> 00:10:26,480
like up to the base station down to the

273
00:10:25,519 --> 00:10:29,600
ue

274
00:10:26,480 --> 00:10:32,000
up to the um base station and done

275
00:10:29,600 --> 00:10:33,360
uh to the u again and the idea is uh i

276
00:10:32,000 --> 00:10:34,800
mean if they're close enough to each

277
00:10:33,360 --> 00:10:38,079
other we could just you know

278
00:10:34,800 --> 00:10:39,439
have a side link so sl uh so let those

279
00:10:38,079 --> 00:10:41,359
two devices um

280
00:10:39,440 --> 00:10:42,720
communicate directly with each other

281
00:10:41,360 --> 00:10:45,760
that's that's essentially what

282
00:10:42,720 --> 00:10:48,560
what um what titling brings

283
00:10:45,760 --> 00:10:50,000
using lte signals more or less like

284
00:10:48,560 --> 00:10:53,040
modified versions of that but

285
00:10:50,000 --> 00:10:55,760
um more or less lte phi and 5g5

286
00:10:53,040 --> 00:10:56,480
in the future and we have started to to

287
00:10:55,760 --> 00:11:00,160
implement that

288
00:10:56,480 --> 00:11:02,640
and then and we're targeting uh like all

289
00:11:00,160 --> 00:11:04,480
four modes we have a full file layer

290
00:11:02,640 --> 00:11:08,160
implementation of sidelink

291
00:11:04,480 --> 00:11:11,519
and we have joined a

292
00:11:08,160 --> 00:11:14,480
etsy sponsored intro ability testing

293
00:11:11,519 --> 00:11:15,200
in december malaga where we uh

294
00:11:14,480 --> 00:11:19,040
essentially

295
00:11:15,200 --> 00:11:20,480
uh tested vulnerability with all um like

296
00:11:19,040 --> 00:11:22,240
implementation from all vendors like

297
00:11:20,480 --> 00:11:25,120
from test equipment manufacturers

298
00:11:22,240 --> 00:11:26,079
as well as all baseband chips and

299
00:11:25,120 --> 00:11:28,320
baseband

300
00:11:26,079 --> 00:11:30,640
yeah baseband chips that are then put

301
00:11:28,320 --> 00:11:31,279
into uh units onboard units from from

302
00:11:30,640 --> 00:11:33,360
from

303
00:11:31,279 --> 00:11:34,800
various vendors and and that's that's

304
00:11:33,360 --> 00:11:37,040
something that we will

305
00:11:34,800 --> 00:11:38,479
open source uh as well in the next

306
00:11:37,040 --> 00:11:42,399
release

307
00:11:38,480 --> 00:11:43,360
um mbit have been uh briefly mentioning

308
00:11:42,399 --> 00:11:46,000
that so we've been

309
00:11:43,360 --> 00:11:47,120
developing this in private and uh and

310
00:11:46,000 --> 00:11:49,200
but then

311
00:11:47,120 --> 00:11:50,639
later last year decided to to open

312
00:11:49,200 --> 00:11:53,040
source that and um

313
00:11:50,639 --> 00:11:53,920
we will uh be adding a full file layer

314
00:11:53,040 --> 00:11:57,519
for the ue

315
00:11:53,920 --> 00:11:59,279
and the entb into mainline uh srs lte

316
00:11:57,519 --> 00:12:00,639
the and that's something that you can

317
00:11:59,279 --> 00:12:02,399
get then so you

318
00:12:00,639 --> 00:12:04,399
in most countries if you turn on uh

319
00:12:02,399 --> 00:12:06,240
geoforce4 you spot

320
00:12:04,399 --> 00:12:07,519
um in the 800 megahertz spend more or

321
00:12:06,240 --> 00:12:10,959
less um

322
00:12:07,519 --> 00:12:12,399
like from in some uh networks you you

323
00:12:10,959 --> 00:12:15,680
spot something like this which is

324
00:12:12,399 --> 00:12:17,279
uh an mbit carrier uh in-band in the lte

325
00:12:15,680 --> 00:12:17,760
sectional sometimes also out of band

326
00:12:17,279 --> 00:12:20,399
here to

327
00:12:17,760 --> 00:12:21,920
to not raise those resources um and

328
00:12:20,399 --> 00:12:24,399
that's something that you can then uh

329
00:12:21,920 --> 00:12:25,599
sync on and decode the reason for not

330
00:12:24,399 --> 00:12:28,079
putting the up layers is

331
00:12:25,600 --> 00:12:28,959
uh is only resources so we do have them

332
00:12:28,079 --> 00:12:32,399
but we need to

333
00:12:28,959 --> 00:12:34,479
uh uh yeah refactor them and then

334
00:12:32,399 --> 00:12:36,320
put them there but the file will be will

335
00:12:34,480 --> 00:12:38,160
be a little bit there

336
00:12:36,320 --> 00:12:40,000
and that's something that you can then

337
00:12:38,160 --> 00:12:40,399
have like a graphical user interface

338
00:12:40,000 --> 00:12:42,880
with

339
00:12:40,399 --> 00:12:43,760
uh constellation sync and some message

340
00:12:42,880 --> 00:12:47,519
decoding

341
00:12:43,760 --> 00:12:47,519
uh of the broadcasting messages

342
00:12:47,600 --> 00:12:52,320
then crmq that's something that um we've

343
00:12:50,320 --> 00:12:53,760
been briefly talking about uh in the

344
00:12:52,320 --> 00:12:57,440
last

345
00:12:53,760 --> 00:13:00,800
foster where we

346
00:12:57,440 --> 00:13:03,440
basically the idea is to to run

347
00:13:00,800 --> 00:13:04,639
lte networks without needing without

348
00:13:03,440 --> 00:13:07,360
requiring

349
00:13:04,639 --> 00:13:08,160
rf hardware so basically to lower the

350
00:13:07,360 --> 00:13:10,399
entrance level

351
00:13:08,160 --> 00:13:11,680
a little bit so so you can run an lte

352
00:13:10,399 --> 00:13:14,480
network but you always

353
00:13:11,680 --> 00:13:15,599
need at least two relatively expensive

354
00:13:14,480 --> 00:13:19,200
um

355
00:13:15,600 --> 00:13:20,959
devices and a few computers and

356
00:13:19,200 --> 00:13:23,200
and with this you can you could do that

357
00:13:20,959 --> 00:13:26,399
um basically without hardware

358
00:13:23,200 --> 00:13:28,880
um and uh for us as developers that's a

359
00:13:26,399 --> 00:13:29,760
pretty attractive uh i mean we do have

360
00:13:28,880 --> 00:13:33,360
hardware but

361
00:13:29,760 --> 00:13:35,360
we want to use it for for um running

362
00:13:33,360 --> 00:13:37,279
wall grind and and then address

363
00:13:35,360 --> 00:13:39,440
sanitizer and gdb

364
00:13:37,279 --> 00:13:40,560
uh stuff that you cannot do if you're if

365
00:13:39,440 --> 00:13:43,279
you're running over the air

366
00:13:40,560 --> 00:13:45,439
with a user uh so you want to run stuff

367
00:13:43,279 --> 00:13:46,639
faster slower pause and stuff like this

368
00:13:45,440 --> 00:13:48,480
and and maybe uh

369
00:13:46,639 --> 00:13:49,839
emulate more complex scenarios with

370
00:13:48,480 --> 00:13:51,279
multiple e-node b's that are very

371
00:13:49,839 --> 00:13:54,639
difficult to control

372
00:13:51,279 --> 00:13:57,760
um and to orchestrate um

373
00:13:54,639 --> 00:13:59,199
and so the idea was to uh to basically

374
00:13:57,760 --> 00:14:01,439
use crmq

375
00:13:59,199 --> 00:14:02,959
and instead of sending those iq samples

376
00:14:01,440 --> 00:14:06,720
i mean we're still running the full file

377
00:14:02,959 --> 00:14:09,839
to user we are you know using

378
00:14:06,720 --> 00:14:11,600
crmq to send it over ipc or ip to a

379
00:14:09,839 --> 00:14:14,959
receiver

380
00:14:11,600 --> 00:14:15,440
and then we yeah we basically add a time

381
00:14:14,959 --> 00:14:17,599
stamp

382
00:14:15,440 --> 00:14:18,959
synchronization for that because lte is

383
00:14:17,600 --> 00:14:21,760
a like

384
00:14:18,959 --> 00:14:22,800
very much depends on time uh stamps and

385
00:14:21,760 --> 00:14:25,519
and

386
00:14:22,800 --> 00:14:27,439
you know time synchronization uh so we

387
00:14:25,519 --> 00:14:30,720
we added support for that

388
00:14:27,440 --> 00:14:32,720
um and then we've also removed all the

389
00:14:30,720 --> 00:14:34,000
dependencies from system timers and the

390
00:14:32,720 --> 00:14:36,720
ue and the enoch b

391
00:14:34,000 --> 00:14:38,240
um this year so there's no all the all

392
00:14:36,720 --> 00:14:39,120
the timings derived from the samples

393
00:14:38,240 --> 00:14:41,519
that come from from

394
00:14:39,120 --> 00:14:43,040
from crmq in that case or from the user

395
00:14:41,519 --> 00:14:45,199
if you if you run it normally

396
00:14:43,040 --> 00:14:46,800
that allows you to run a full end-to-end

397
00:14:45,199 --> 00:14:49,359
system like in the cmake

398
00:14:46,800 --> 00:14:51,519
um like testing thing without requiring

399
00:14:49,360 --> 00:14:53,680
containers and other dependencies

400
00:14:51,519 --> 00:14:55,199
so it's very basic but it allows you to

401
00:14:53,680 --> 00:14:57,120
to run those things with a with make

402
00:14:55,199 --> 00:14:58,639
test basically

403
00:14:57,120 --> 00:15:00,880
and that's just a screenshot of how how

404
00:14:58,639 --> 00:15:02,639
this looks like it's three consoles here

405
00:15:00,880 --> 00:15:06,240
you have the core network

406
00:15:02,639 --> 00:15:08,079
uh srs epc then the e note b um

407
00:15:06,240 --> 00:15:09,360
and then here you have a ue that

408
00:15:08,079 --> 00:15:10,800
attached to

409
00:15:09,360 --> 00:15:14,480
you know it's a great channel look at

410
00:15:10,800 --> 00:15:17,439
this uh look at this constellation uh

411
00:15:14,480 --> 00:15:18,000
and uh yeah and you you see like it's it

412
00:15:17,440 --> 00:15:20,480
just

413
00:15:18,000 --> 00:15:21,360
behaves as as if you're uh running over

414
00:15:20,480 --> 00:15:24,079
the air um

415
00:15:21,360 --> 00:15:25,440
very good and it's all running on on one

416
00:15:24,079 --> 00:15:27,439
machine and and and

417
00:15:25,440 --> 00:15:29,199
you can debug it you can gdp it you can

418
00:15:27,440 --> 00:15:31,920
single step through it it's

419
00:15:29,199 --> 00:15:32,240
it's it's all all good at least on the

420
00:15:31,920 --> 00:15:36,160
right

421
00:15:32,240 --> 00:15:37,360
on the rent side okay ss and you know be

422
00:15:36,160 --> 00:15:39,439
outlook so

423
00:15:37,360 --> 00:15:42,240
so actually ss you know b is always a

424
00:15:39,440 --> 00:15:44,560
little bit like the snapchat of ours so

425
00:15:42,240 --> 00:15:45,440
so we're like focusing on on the ue so

426
00:15:44,560 --> 00:15:48,319
much

427
00:15:45,440 --> 00:15:49,600
uh but it's it's not i mean we really

428
00:15:48,320 --> 00:15:52,639
don't mean that

429
00:15:49,600 --> 00:15:54,240
um but the good news is that we will be

430
00:15:52,639 --> 00:15:56,160
focusing on src not be

431
00:15:54,240 --> 00:15:57,600
a lot more in the in the upcoming months

432
00:15:56,160 --> 00:15:59,600
um so we

433
00:15:57,600 --> 00:16:01,680
not only add new features uh like

434
00:15:59,600 --> 00:16:03,920
handover for instance so this is

435
00:16:01,680 --> 00:16:05,199
needed if if you have two cells and you

436
00:16:03,920 --> 00:16:07,439
in your ue moves

437
00:16:05,199 --> 00:16:09,359
um so it's leaving basically the the

438
00:16:07,440 --> 00:16:11,360
cell range of one base stage to the

439
00:16:09,360 --> 00:16:14,079
other one you need to do a handover

440
00:16:11,360 --> 00:16:14,639
uh so that that will be added there will

441
00:16:14,079 --> 00:16:17,279
also be

442
00:16:14,639 --> 00:16:18,560
support for carrier aggregation so a

443
00:16:17,279 --> 00:16:22,079
single ue

444
00:16:18,560 --> 00:16:24,079
cannot only have a primary uh carrier

445
00:16:22,079 --> 00:16:25,599
but you can add multiple carriers uh to

446
00:16:24,079 --> 00:16:28,160
it so and that's needed for

447
00:16:25,600 --> 00:16:28,800
um yeah for increasing bandwidth

448
00:16:28,160 --> 00:16:33,920
obviously

449
00:16:28,800 --> 00:16:38,000
um so yeah you can combine up to

450
00:16:33,920 --> 00:16:38,719
well five in release 10 and up to 32 in

451
00:16:38,000 --> 00:16:42,240
theory

452
00:16:38,720 --> 00:16:45,519
uh in i don't know at least 13 i think

453
00:16:42,240 --> 00:16:49,120
uh so we see how how much dsp we have

454
00:16:45,519 --> 00:16:50,320
to do that and we will focusing on

455
00:16:49,120 --> 00:16:52,160
performance and stability

456
00:16:50,320 --> 00:16:53,680
stability a lot so we we're going to

457
00:16:52,160 --> 00:16:58,160
deploy this and this needs to be

458
00:16:53,680 --> 00:17:00,479
uh like uh like rock be rock solid

459
00:16:58,160 --> 00:17:00,480
um

460
00:17:08,160 --> 00:17:15,439
target platforms so up until now uh

461
00:17:11,439 --> 00:17:18,079
we have really just um i mean the

462
00:17:15,439 --> 00:17:18,880
the priority has always been on x86 uh

463
00:17:18,079 --> 00:17:22,000
so the fi

464
00:17:18,880 --> 00:17:24,160
is so computationally intense that

465
00:17:22,000 --> 00:17:25,039
it's not really a viable to run a full

466
00:17:24,160 --> 00:17:27,360
ate

467
00:17:25,039 --> 00:17:30,720
on any anything else like the fi on

468
00:17:27,359 --> 00:17:30,719
anything else on x86

469
00:17:31,280 --> 00:17:35,760
just because all of the you know all of

470
00:17:33,120 --> 00:17:37,199
the like cindy that is required and and

471
00:17:35,760 --> 00:17:39,200
and even arm

472
00:17:37,200 --> 00:17:40,880
i mean it does have 70 but it's it's

473
00:17:39,200 --> 00:17:43,919
even if if you have a powerful

474
00:17:40,880 --> 00:17:45,919
uh like the snapdragon or raspberry pi 4

475
00:17:43,919 --> 00:17:47,120
uh it's still hard i mean you can run uh

476
00:17:45,919 --> 00:17:49,679
like smaller bandwidths

477
00:17:47,120 --> 00:17:51,360
like six po b's is probably okay but a

478
00:17:49,679 --> 00:17:53,679
20 megahertz or 20

479
00:17:51,360 --> 00:17:54,399
20 megahertz lte signal and there's no

480
00:17:53,679 --> 00:17:59,039
way you can

481
00:17:54,400 --> 00:18:02,559
run the entire fly uh in an arm um

482
00:17:59,039 --> 00:18:05,600
um but it's getting better um

483
00:18:02,559 --> 00:18:08,480
and uh and and uh

484
00:18:05,600 --> 00:18:09,520
yeah the idea is um to basically widen

485
00:18:08,480 --> 00:18:13,520
that a little bit because

486
00:18:09,520 --> 00:18:17,200
obviously it's getting better um and

487
00:18:13,520 --> 00:18:20,720
up until to now having focused on on

488
00:18:17,200 --> 00:18:24,080
on x86 only we will expand that um so

489
00:18:20,720 --> 00:18:26,400
we do uh support arm already um

490
00:18:24,080 --> 00:18:27,120
but we will extend this to to sync ultra

491
00:18:26,400 --> 00:18:31,039
scale

492
00:18:27,120 --> 00:18:34,719
so in fact we have a full um a full fi

493
00:18:31,039 --> 00:18:36,480
uh for downlink on in fpga

494
00:18:34,720 --> 00:18:38,559
that basically offloads all the heavy

495
00:18:36,480 --> 00:18:41,360
stuff uh to an fpga to

496
00:18:38,559 --> 00:18:42,000
to sync ultra scale plus and only runs

497
00:18:41,360 --> 00:18:44,799
the the

498
00:18:42,000 --> 00:18:45,440
protocol layers uh l2 s3 so the upper

499
00:18:44,799 --> 00:18:48,240
none so

500
00:18:45,440 --> 00:18:49,520
uh not so these p critical things uh in

501
00:18:48,240 --> 00:18:53,840
arm

502
00:18:49,520 --> 00:18:57,520
um and and that's something that we

503
00:18:53,840 --> 00:18:58,720
do with the same uh code base so we're

504
00:18:57,520 --> 00:19:00,320
this is not something

505
00:18:58,720 --> 00:19:02,160
different or different four or so so

506
00:19:00,320 --> 00:19:04,399
we're intending to

507
00:19:02,160 --> 00:19:07,120
maintain this and use the same code base

508
00:19:04,400 --> 00:19:09,679
that runs on on all those uh platforms

509
00:19:07,120 --> 00:19:10,799
uh and we will see i mean maybe the arm

510
00:19:09,679 --> 00:19:14,000
i haven't looked at the

511
00:19:10,799 --> 00:19:15,200
at the nvidia ones perhaps a little bit

512
00:19:14,000 --> 00:19:17,840
more performant but

513
00:19:15,200 --> 00:19:19,360
um but maybe you can even run a bigger

514
00:19:17,840 --> 00:19:22,320
cell there with all these p

515
00:19:19,360 --> 00:19:23,439
in the arm um that would be would be

516
00:19:22,320 --> 00:19:25,520
cool

517
00:19:23,440 --> 00:19:27,679
so besides the wide range of rf hardware

518
00:19:25,520 --> 00:19:30,400
we're also tying a wide range of these p

519
00:19:27,679 --> 00:19:30,400
platforms here

520
00:19:30,640 --> 00:19:36,240
um quality assurance um so

521
00:19:33,679 --> 00:19:37,120
this is yeah like if you want to target

522
00:19:36,240 --> 00:19:39,360
um

523
00:19:37,120 --> 00:19:42,479
like commercial crate uh i mean

524
00:19:39,360 --> 00:19:44,799
depending on what that means uh

525
00:19:42,480 --> 00:19:46,400
um deployments and and then things i

526
00:19:44,799 --> 00:19:48,720
mean you have to really look after

527
00:19:46,400 --> 00:19:49,919
after quality and then after you know

528
00:19:48,720 --> 00:19:52,720
regressions that you

529
00:19:49,919 --> 00:19:53,840
do in your development and that you

530
00:19:52,720 --> 00:19:56,000
introduce and then

531
00:19:53,840 --> 00:19:57,120
that basically what you what you're uh

532
00:19:56,000 --> 00:19:58,559
you know putting there

533
00:19:57,120 --> 00:20:00,159
to a customer sending to casper or

534
00:19:58,559 --> 00:20:02,399
putting um

535
00:20:00,160 --> 00:20:04,159
on github that actually satisfies your

536
00:20:02,400 --> 00:20:06,000
your needs and one of the

537
00:20:04,159 --> 00:20:07,600
building steps is obviously a continuous

538
00:20:06,000 --> 00:20:10,720
integration platform

539
00:20:07,600 --> 00:20:13,199
um that we have um and then

540
00:20:10,720 --> 00:20:14,559
we currently have a around 600 not

541
00:20:13,200 --> 00:20:16,480
exactly 600 it's a little bit less

542
00:20:14,559 --> 00:20:18,480
depending on what configuration you have

543
00:20:16,480 --> 00:20:19,520
a unit test that we're constantly

544
00:20:18,480 --> 00:20:22,640
running in

545
00:20:19,520 --> 00:20:25,840
in jenkins that is

546
00:20:22,640 --> 00:20:29,039
building for uh for x86 and arm

547
00:20:25,840 --> 00:20:32,559
uh running atrocities of all grind um

548
00:20:29,039 --> 00:20:34,080
limited on arm and then basically

549
00:20:32,559 --> 00:20:36,799
executing those tests on the pull

550
00:20:34,080 --> 00:20:38,399
request basis and periodically in

551
00:20:36,799 --> 00:20:41,520
jenkins as well

552
00:20:38,400 --> 00:20:43,120
so we also try to leverage from

553
00:20:41,520 --> 00:20:45,679
static code analysis tools that is

554
00:20:43,120 --> 00:20:48,320
available for open source projects

555
00:20:45,679 --> 00:20:49,760
like coverity um a tool from from

556
00:20:48,320 --> 00:20:52,000
synopsis

557
00:20:49,760 --> 00:20:53,919
as well as lgtm and that's something

558
00:20:52,000 --> 00:20:54,640
that we basically did in the in the last

559
00:20:53,919 --> 00:20:57,440
release

560
00:20:54,640 --> 00:20:59,200
so by looking at the initial analysis

561
00:20:57,440 --> 00:20:59,679
you kind of had a code quality batch of

562
00:20:59,200 --> 00:21:02,960
e

563
00:20:59,679 --> 00:21:04,000
which is like the like the the worst you

564
00:21:02,960 --> 00:21:08,080
can get

565
00:21:04,000 --> 00:21:10,400
uh i mean it wasn't that bad actually uh

566
00:21:08,080 --> 00:21:12,000
and then and then we uh you know

567
00:21:10,400 --> 00:21:15,200
addressed a few of them

568
00:21:12,000 --> 00:21:16,000
some of them were yeah anyway so you you

569
00:21:15,200 --> 00:21:18,080
get now

570
00:21:16,000 --> 00:21:19,200
a and then and and i hope we will get an

571
00:21:18,080 --> 00:21:20,639
a plus uh

572
00:21:19,200 --> 00:21:22,559
so that's that would be the best that's

573
00:21:20,640 --> 00:21:24,799
the second best uh

574
00:21:22,559 --> 00:21:25,600
um but it also depends obviously on the

575
00:21:24,799 --> 00:21:27,280
ratio between

576
00:21:25,600 --> 00:21:29,039
uh code lines of code and errors that

577
00:21:27,280 --> 00:21:32,158
you have

578
00:21:29,039 --> 00:21:34,559
um yes and then

579
00:21:32,159 --> 00:21:37,039
obviously unit is not enough so we are

580
00:21:34,559 --> 00:21:39,360
rf people so we have also an rf

581
00:21:37,039 --> 00:21:40,720
continuous integration uh that we call

582
00:21:39,360 --> 00:21:43,280
rfci internally that we

583
00:21:40,720 --> 00:21:44,080
heavily use for yeah finding regression

584
00:21:43,280 --> 00:21:46,960
bugs and

585
00:21:44,080 --> 00:21:48,080
um and things like that that target or

586
00:21:46,960 --> 00:21:51,840
that are related to

587
00:21:48,080 --> 00:21:54,960
to rf things like um like yeah

588
00:21:51,840 --> 00:21:56,080
dsp and enough related uh issues and we

589
00:21:54,960 --> 00:21:59,120
have been developing an

590
00:21:56,080 --> 00:22:03,039
in-house testbed where we used

591
00:21:59,120 --> 00:22:04,399
jenkins that ssh into machines launch

592
00:22:03,039 --> 00:22:06,720
docker

593
00:22:04,400 --> 00:22:08,880
python scripts that you know post

594
00:22:06,720 --> 00:22:09,600
process results and analyze logs and

595
00:22:08,880 --> 00:22:12,640
stuff like this

596
00:22:09,600 --> 00:22:14,158
create reports and

597
00:22:12,640 --> 00:22:15,520
that's also that we actually is also

598
00:22:14,159 --> 00:22:17,280
something that we execute on each pull

599
00:22:15,520 --> 00:22:20,480
request and periodically like

600
00:22:17,280 --> 00:22:21,440
long running handover tests uh 24 hours

601
00:22:20,480 --> 00:22:23,679
48 hours

602
00:22:21,440 --> 00:22:25,440
that we run um you know weekly on a

603
00:22:23,679 --> 00:22:28,559
weekly basis

604
00:22:25,440 --> 00:22:30,559
um something that uh

605
00:22:28,559 --> 00:22:31,600
yeah we would like to announce uh here

606
00:22:30,559 --> 00:22:35,280
as well is that

607
00:22:31,600 --> 00:22:37,840
we've recently um you know uh

608
00:22:35,280 --> 00:22:39,440
agreed with salesforcom that we are more

609
00:22:37,840 --> 00:22:42,480
closely working together

610
00:22:39,440 --> 00:22:44,640
and basically adopting because this

611
00:22:42,480 --> 00:22:46,720
in-house testbed i mean it was a good

612
00:22:44,640 --> 00:22:50,320
thing for us and it worked for us

613
00:22:46,720 --> 00:22:53,840
um but um there's a tool called or

614
00:22:50,320 --> 00:22:54,639
a yeah like a software called osmo gsm

615
00:22:53,840 --> 00:22:58,240
tester

616
00:22:54,640 --> 00:23:01,600
which uh has um a lot more features that

617
00:22:58,240 --> 00:23:02,640
that we uh had and and uh it just made a

618
00:23:01,600 --> 00:23:05,120
lot of sense to

619
00:23:02,640 --> 00:23:06,640
kind of get srs lte support into osmo

620
00:23:05,120 --> 00:23:09,439
gcm tester

621
00:23:06,640 --> 00:23:10,240
so everyone else can use that um it's

622
00:23:09,440 --> 00:23:12,799
already uh

623
00:23:10,240 --> 00:23:13,280
like open source is an osmocomp project

624
00:23:12,799 --> 00:23:15,918
um

625
00:23:13,280 --> 00:23:17,918
so we will adding awesome gsm ssd

626
00:23:15,919 --> 00:23:21,280
support to osmo gsm tester

627
00:23:17,919 --> 00:23:25,360
um and then um basically we'll

628
00:23:21,280 --> 00:23:28,480
rebuild uh that uh entire framework with

629
00:23:25,360 --> 00:23:30,080
running tests and uh producing logs and

630
00:23:28,480 --> 00:23:32,799
and reports and and

631
00:23:30,080 --> 00:23:34,000
uh probably also trying to make those um

632
00:23:32,799 --> 00:23:37,200
you know available for

633
00:23:34,000 --> 00:23:38,880
for uh for the outside world

634
00:23:37,200 --> 00:23:41,919
and also extend the the arf

635
00:23:38,880 --> 00:23:44,159
infrastructure and that's um

636
00:23:41,919 --> 00:23:46,080
a photograph that howard actually took

637
00:23:44,159 --> 00:23:49,440
so that's uh installation

638
00:23:46,080 --> 00:23:51,760
in in sourcebook home

639
00:23:49,440 --> 00:23:55,200
where there is where systemcom has built

640
00:23:51,760 --> 00:23:59,440
like a rack and a 19-inch um

641
00:23:55,200 --> 00:24:03,360
one uh one new um

642
00:23:59,440 --> 00:24:04,159
essentially um housing that that houses

643
00:24:03,360 --> 00:24:06,158
uh like

644
00:24:04,159 --> 00:24:07,200
various rf front ends and all connected

645
00:24:06,159 --> 00:24:09,520
cable together

646
00:24:07,200 --> 00:24:11,360
with variable antenna all controlled um

647
00:24:09,520 --> 00:24:14,400
remotely so this allows you to

648
00:24:11,360 --> 00:24:14,879
you know reproduce experiments to run

649
00:24:14,400 --> 00:24:17,360
those

650
00:24:14,880 --> 00:24:18,960
uh continuously and that's something

651
00:24:17,360 --> 00:24:19,918
that we are looking forward to and then

652
00:24:18,960 --> 00:24:23,039
extending also

653
00:24:19,919 --> 00:24:25,679
uh osmodius and tesla for that

654
00:24:23,039 --> 00:24:28,000
another thing was um conformance testing

655
00:24:25,679 --> 00:24:29,520
so i will briefly touch this uh so

656
00:24:28,000 --> 00:24:31,200
all the uis that we have all the phones

657
00:24:29,520 --> 00:24:33,200
that we have um they're

658
00:24:31,200 --> 00:24:34,720
um they're running conformance tests so

659
00:24:33,200 --> 00:24:37,440
they need to uh obey

660
00:24:34,720 --> 00:24:38,080
uh like tests that 3gbp actually uh it

661
00:24:37,440 --> 00:24:39,840
does

662
00:24:38,080 --> 00:24:41,760
and you usually do that you go to a

663
00:24:39,840 --> 00:24:45,360
testing entity you get a rodent schwarz

664
00:24:41,760 --> 00:24:47,360
uh one million uh you know euro thing

665
00:24:45,360 --> 00:24:48,320
that you can test your e with nobody can

666
00:24:47,360 --> 00:24:51,840
afford that

667
00:24:48,320 --> 00:24:53,918
um so what we did is uh to

668
00:24:51,840 --> 00:24:56,320
use eclipse titan it's an eclipse

669
00:24:53,919 --> 00:24:57,039
broadcast it's a ttc m3 compiler that is

670
00:24:56,320 --> 00:24:58,559
actually

671
00:24:57,039 --> 00:25:01,120
the language that the conformance has

672
00:24:58,559 --> 00:25:02,320
implemented in and and basically wrote a

673
00:25:01,120 --> 00:25:04,719
system simulator

674
00:25:02,320 --> 00:25:05,600
that basically acts like this guy uh

675
00:25:04,720 --> 00:25:07,679
without phi

676
00:25:05,600 --> 00:25:09,439
a fake fi and that's something that we

677
00:25:07,679 --> 00:25:10,880
can run on a raspberry pi it's all

678
00:25:09,440 --> 00:25:13,279
integrated in our

679
00:25:10,880 --> 00:25:14,799
conform in our continuous integration

680
00:25:13,279 --> 00:25:17,760
and

681
00:25:14,799 --> 00:25:19,039
i mean this is something that um that uh

682
00:25:17,760 --> 00:25:21,440
like really helps to

683
00:25:19,039 --> 00:25:22,720
to make sure the ue actually uh does

684
00:25:21,440 --> 00:25:24,159
what it is supposed to do and it

685
00:25:22,720 --> 00:25:27,520
complies with all the

686
00:25:24,159 --> 00:25:30,000
um you know all the conformance

687
00:25:27,520 --> 00:25:30,559
requirements uh on the protocol side of

688
00:25:30,000 --> 00:25:32,720
things and

689
00:25:30,559 --> 00:25:33,678
we are running fully unmodified protocol

690
00:25:32,720 --> 00:25:36,559
stack there

691
00:25:33,679 --> 00:25:38,559
uh to test against the tests and that's

692
00:25:36,559 --> 00:25:43,840
it

693
00:25:38,559 --> 00:25:43,840
thank you

694
00:25:51,200 --> 00:25:55,039
no i mean there's like we have um please

695
00:25:53,760 --> 00:25:58,640
repeat the question

696
00:25:55,039 --> 00:26:03,600
uh yeah sorry so is the our serial uh mq

697
00:25:58,640 --> 00:26:05,679
uh transport lte specific or not um

698
00:26:03,600 --> 00:26:07,039
there is uh like timestamp

699
00:26:05,679 --> 00:26:07,760
synchronization and resampling and the

700
00:26:07,039 --> 00:26:09,440
resetting

701
00:26:07,760 --> 00:26:11,440
thing is something that you just you

702
00:26:09,440 --> 00:26:13,120
know put a a base rate because

703
00:26:11,440 --> 00:26:15,760
how do you reconnect so base station

704
00:26:13,120 --> 00:26:17,360
depends uh on the bandwidth so it

705
00:26:15,760 --> 00:26:18,720
first surges in a lower bandwidth and

706
00:26:17,360 --> 00:26:20,399
changes the bandwidth so you need to do

707
00:26:18,720 --> 00:26:23,279
a little bit of resampling

708
00:26:20,400 --> 00:26:24,559
uh there but i mean other than that no

709
00:26:23,279 --> 00:26:27,919
it's it's

710
00:26:24,559 --> 00:26:27,918
it's not lt specific at all

711
00:26:33,600 --> 00:26:39,279
thanks for that question uh yes um

712
00:26:36,640 --> 00:26:42,000
the question was uh if we have been

713
00:26:39,279 --> 00:26:44,720
looking at the pluto uh to implement lte

714
00:26:42,000 --> 00:26:45,039
yes so two things the pluto like eddie

715
00:26:44,720 --> 00:26:48,400
is

716
00:26:45,039 --> 00:26:50,000
like really requires strict timing um

717
00:26:48,400 --> 00:26:51,520
so we need to know when we receive

718
00:26:50,000 --> 00:26:52,799
samples what the time is and when we

719
00:26:51,520 --> 00:26:53,279
transmit them because the transmitter is

720
00:26:52,799 --> 00:26:54,639
always

721
00:26:53,279 --> 00:26:56,960
um you know aligned to the to the

722
00:26:54,640 --> 00:26:57,520
receive side and what we need to add

723
00:26:56,960 --> 00:26:59,760
there

724
00:26:57,520 --> 00:27:03,600
uh is timestamp uh support because the

725
00:26:59,760 --> 00:27:03,600
bluetooth io doesn't have timestamp

726
00:27:04,840 --> 00:27:09,120
support

727
00:27:07,039 --> 00:27:10,400
very good we're really looking forward

728
00:27:09,120 --> 00:27:13,678
to that so

729
00:27:10,400 --> 00:27:17,120
then the extension of uh

730
00:27:13,679 --> 00:27:19,840
of that would be uh yes you could

731
00:27:17,120 --> 00:27:20,719
perhaps run the mbaot on the bluetooth

732
00:27:19,840 --> 00:27:22,720
itself

733
00:27:20,720 --> 00:27:24,159
definitely on the host but you still

734
00:27:22,720 --> 00:27:26,480
have your two usb 2

735
00:27:24,159 --> 00:27:28,559
bandwidth uh limitation so you can

736
00:27:26,480 --> 00:27:28,960
definitely run the the mbit and probably

737
00:27:28,559 --> 00:27:32,080
is

738
00:27:28,960 --> 00:27:33,600
like a small lte cell 6 pmb 15 burbs

739
00:27:32,080 --> 00:27:35,279
but definitely not the bigger ones

740
00:27:33,600 --> 00:27:36,959
because they're like 20 megahertz so

741
00:27:35,279 --> 00:27:38,640
you and then you're not getting that

742
00:27:36,960 --> 00:27:41,039
over the usb 2.

743
00:27:38,640 --> 00:27:42,000
you want to remark if you're going to

744
00:27:41,039 --> 00:27:45,120
jenkins there are

745
00:27:42,000 --> 00:27:45,120
better alternatives

746
00:27:45,200 --> 00:27:49,840
oh okay

747
00:27:52,240 --> 00:27:55,520
yeah i mean we just used jenkins for

748
00:27:54,000 --> 00:27:57,840
continuous integration really uh

749
00:27:55,520 --> 00:27:58,639
so it's not are you already using it oh

750
00:27:57,840 --> 00:28:03,840
yeah yeah

751
00:27:58,640 --> 00:28:03,840
yeah yeah yeah

752
00:28:14,720 --> 00:28:17,840
no i mean we don't so the question is if

753
00:28:16,720 --> 00:28:20,960
we if we have

754
00:28:17,840 --> 00:28:24,080
sms support so uh

755
00:28:20,960 --> 00:28:26,399
no no we we don't do that um i mean it's

756
00:28:24,080 --> 00:28:27,520
it's possible to send sms over nas

757
00:28:26,399 --> 00:28:31,199
signaling from the

758
00:28:27,520 --> 00:28:33,200
from the epc um and i know of

759
00:28:31,200 --> 00:28:34,240
like a few like users on the list who

760
00:28:33,200 --> 00:28:36,000
have looked into this

761
00:28:34,240 --> 00:28:37,440
uh but there is not it's not officially

762
00:28:36,000 --> 00:28:40,240
supported in our

763
00:28:37,440 --> 00:28:40,240
in the open source

764
00:28:40,880 --> 00:28:44,880
okay yeah yeah

765
00:28:47,910 --> 00:28:50,959
[Music]

766
00:28:56,799 --> 00:29:00,080
so i mean there's a few hemorrhoid users

767
00:28:59,279 --> 00:29:02,080
i know of

768
00:29:00,080 --> 00:29:03,520
and then they yeah obviously i mean the

769
00:29:02,080 --> 00:29:04,879
limitation is

770
00:29:03,520 --> 00:29:13,840
the rf that you're using and we are

771
00:29:04,880 --> 00:29:13,840
agnostic we are rf agnostic so we can um

772
00:29:22,240 --> 00:29:27,440
yeah i mean like so there's a like

773
00:29:25,520 --> 00:29:29,520
uh we we have a lookup table for all the

774
00:29:27,440 --> 00:29:31,919
3gbp uh

775
00:29:29,520 --> 00:29:33,039
like official channels and maybe you

776
00:29:31,919 --> 00:29:35,840
cannot directly

777
00:29:33,039 --> 00:29:37,279
um use your channel of interest because

778
00:29:35,840 --> 00:29:39,439
it's not an official one but you can

779
00:29:37,279 --> 00:29:42,880
obviously add this if you want yeah i

780
00:29:39,440 --> 00:29:42,880
mean i don't see a problem there

