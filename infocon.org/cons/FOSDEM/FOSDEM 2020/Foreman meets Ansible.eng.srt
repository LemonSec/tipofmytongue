1
00:00:05,600 --> 00:00:10,080
all right

2
00:00:06,240 --> 00:00:10,800
our next uh session is a love story

3
00:00:10,080 --> 00:00:14,240
about how

4
00:00:10,800 --> 00:00:16,160
foreman met ansible um adam uh

5
00:00:14,240 --> 00:00:17,920
take it away thank you walter for

6
00:00:16,160 --> 00:00:20,320
introducing me and the talk

7
00:00:17,920 --> 00:00:21,279
uh as walter mentioned it's a talk about

8
00:00:20,320 --> 00:00:24,160
what happened

9
00:00:21,279 --> 00:00:26,240
when foreign and sybil and where we are

10
00:00:24,160 --> 00:00:29,679
now

11
00:00:26,240 --> 00:00:32,399
uh i'm adam ruzicka

12
00:00:29,679 --> 00:00:33,360
i'm a software engineer at red hat i

13
00:00:32,399 --> 00:00:35,520
joined red hat

14
00:00:33,360 --> 00:00:36,480
something a little bit over five years

15
00:00:35,520 --> 00:00:39,040
ago

16
00:00:36,480 --> 00:00:39,680
and since the start i was working on

17
00:00:39,040 --> 00:00:45,039
foreman

18
00:00:39,680 --> 00:00:47,840
or related projects as plugins and so on

19
00:00:45,039 --> 00:00:50,879
i'm adam rozitzka on github in case you

20
00:00:47,840 --> 00:00:53,360
want to check out my stuff

21
00:00:50,879 --> 00:00:54,640
i'm aruzitska on freenode if you want to

22
00:00:53,360 --> 00:00:58,000
reach out to me

23
00:00:54,640 --> 00:01:01,359
or underscore arus underscore

24
00:00:58,000 --> 00:01:04,159
on twitter and

25
00:01:01,359 --> 00:01:05,199
that was enough about me you're not here

26
00:01:04,159 --> 00:01:08,400
because of me

27
00:01:05,199 --> 00:01:12,240
you're here for this so this talk

28
00:01:08,400 --> 00:01:14,000
is about the forman ansible plugin

29
00:01:12,240 --> 00:01:15,360
if you're here because you thought it

30
00:01:14,000 --> 00:01:17,920
will be about forman

31
00:01:15,360 --> 00:01:19,119
ansible modules i'll have to let you

32
00:01:17,920 --> 00:01:23,200
down it's not about that

33
00:01:19,119 --> 00:01:27,600
it's about this plugin and

34
00:01:23,200 --> 00:01:30,720
we'll start right away so i assume

35
00:01:27,600 --> 00:01:34,399
that you have

36
00:01:30,720 --> 00:01:37,119
a formant deployment without ansible

37
00:01:34,400 --> 00:01:39,040
so just a couple of steps how to get it

38
00:01:37,119 --> 00:01:42,479
up and running

39
00:01:39,040 --> 00:01:44,720
ansible is in fact a specialization of

40
00:01:42,479 --> 00:01:48,000
the remote execution plugin

41
00:01:44,720 --> 00:01:50,158
so it needs it to work you can

42
00:01:48,000 --> 00:01:51,119
install remote execution with this

43
00:01:50,159 --> 00:01:53,200
simple command

44
00:01:51,119 --> 00:01:54,640
you run the format installer feed it

45
00:01:53,200 --> 00:01:57,360
some options and it will

46
00:01:54,640 --> 00:01:57,360
do its magic

47
00:01:58,560 --> 00:02:01,920
then the similar thing for instable just

48
00:02:01,280 --> 00:02:05,119
the names

49
00:02:01,920 --> 00:02:08,399
of the options are different and

50
00:02:05,119 --> 00:02:09,360
in the end this is what i personally

51
00:02:08,399 --> 00:02:11,680
like to do

52
00:02:09,360 --> 00:02:13,599
it's probably not such a good idea in

53
00:02:11,680 --> 00:02:16,560
production environments

54
00:02:13,599 --> 00:02:18,160
and what this option does it makes the

55
00:02:16,560 --> 00:02:21,520
installer

56
00:02:18,160 --> 00:02:23,120
take the public key that

57
00:02:21,520 --> 00:02:24,560
foreman is using to connect to the

58
00:02:23,120 --> 00:02:28,080
remote machines

59
00:02:24,560 --> 00:02:29,920
and put it into roots authorized keys

60
00:02:28,080 --> 00:02:31,680
so you can use formant to run remote

61
00:02:29,920 --> 00:02:34,958
execution or ansible

62
00:02:31,680 --> 00:02:39,040
against the format machine itself

63
00:02:34,959 --> 00:02:42,400
again you may or may not want to do that

64
00:02:39,040 --> 00:02:44,720
of course you can run it all at once

65
00:02:42,400 --> 00:02:46,480
you can use a slightly condensed form it

66
00:02:44,720 --> 00:02:46,879
then looks like this it takes i don't

67
00:02:46,480 --> 00:02:49,280
know

68
00:02:46,879 --> 00:02:50,000
five to ten minutes to get it up and

69
00:02:49,280 --> 00:02:53,360
running

70
00:02:50,000 --> 00:02:53,360
and you're there

71
00:02:54,560 --> 00:03:00,000
uh okay so you had an empty format

72
00:02:57,760 --> 00:03:01,599
you're in the installer it installed for

73
00:03:00,000 --> 00:03:05,200
the ansible plugin

74
00:03:01,599 --> 00:03:05,760
but you have a blank formant or you have

75
00:03:05,200 --> 00:03:09,040
a

76
00:03:05,760 --> 00:03:10,480
one host the format itself oh sorry

77
00:03:09,040 --> 00:03:13,440
where is it

78
00:03:10,480 --> 00:03:15,119
different type it may look like this

79
00:03:13,440 --> 00:03:18,159
sorry the ui kind of breaks when you

80
00:03:15,120 --> 00:03:20,480
zoom in too much

81
00:03:18,159 --> 00:03:21,679
but in here i have a single host it's

82
00:03:20,480 --> 00:03:25,359
the forman instance

83
00:03:21,680 --> 00:03:27,040
itself and well you could do that you

84
00:03:25,360 --> 00:03:28,799
could deploy the four man and then use

85
00:03:27,040 --> 00:03:29,760
it to run ansible against the format

86
00:03:28,799 --> 00:03:32,400
itself

87
00:03:29,760 --> 00:03:34,239
but that's that's not the point why you

88
00:03:32,400 --> 00:03:38,480
have either foreman or ansible

89
00:03:34,239 --> 00:03:38,480
right so

90
00:03:39,519 --> 00:03:42,959
the best option would be to let foreman

91
00:03:42,560 --> 00:03:44,840
do

92
00:03:42,959 --> 00:03:46,080
what it does best and that is

93
00:03:44,840 --> 00:03:48,400
provisioning

94
00:03:46,080 --> 00:03:50,239
if you provision machines for four man

95
00:03:48,400 --> 00:03:53,040
you would get them in the inventory

96
00:03:50,239 --> 00:03:54,400
environment you can then run ansible uh

97
00:03:53,040 --> 00:03:56,879
when you're provisioning

98
00:03:54,400 --> 00:03:59,280
it deploys the ssh keys for my nose

99
00:03:56,879 --> 00:04:02,560
about to the machines so you can

100
00:03:59,280 --> 00:04:05,760
connect to them and even if

101
00:04:02,560 --> 00:04:06,879
during the creation if you assign roles

102
00:04:05,760 --> 00:04:09,359
to that host

103
00:04:06,879 --> 00:04:11,518
it applies them to that host at the end

104
00:04:09,360 --> 00:04:13,120
of the provisioning so

105
00:04:11,519 --> 00:04:15,840
you can get the machines configured

106
00:04:13,120 --> 00:04:15,840
fairly quickly

107
00:04:16,639 --> 00:04:21,280
but every now and then someone comes and

108
00:04:19,839 --> 00:04:24,080
asks

109
00:04:21,279 --> 00:04:26,479
hey farming is cool and all but i

110
00:04:24,080 --> 00:04:28,400
already have machines and i

111
00:04:26,479 --> 00:04:30,320
don't want to reprovision them just to

112
00:04:28,400 --> 00:04:31,840
get them into inventory to be able to

113
00:04:30,320 --> 00:04:35,759
run ansible against them

114
00:04:31,840 --> 00:04:37,840
what can i do luckily

115
00:04:35,759 --> 00:04:39,520
there is a way when you're in the

116
00:04:37,840 --> 00:04:42,239
installer it deploys

117
00:04:39,520 --> 00:04:43,440
an ansible callback a plugin basically

118
00:04:42,240 --> 00:04:46,080
to lansible

119
00:04:43,440 --> 00:04:47,600
which at the end of the run reports the

120
00:04:46,080 --> 00:04:50,800
facts about the machines

121
00:04:47,600 --> 00:04:54,400
to foreman and when that happens

122
00:04:50,800 --> 00:04:56,720
you get your hosts created in format so

123
00:04:54,400 --> 00:04:57,599
let's try that right now let's see if i

124
00:04:56,720 --> 00:04:59,759
can

125
00:04:57,600 --> 00:05:02,800
remember all the right magic

126
00:04:59,759 --> 00:05:05,919
implementations we need to do

127
00:05:02,800 --> 00:05:08,320
so first uh

128
00:05:05,919 --> 00:05:09,758
the callback is configured only for the

129
00:05:08,320 --> 00:05:11,680
form and proxy user

130
00:05:09,759 --> 00:05:13,680
if you did this as root or any other

131
00:05:11,680 --> 00:05:15,199
user it wouldn't work

132
00:05:13,680 --> 00:05:17,199
i'm talking out of the box you could

133
00:05:15,199 --> 00:05:19,520
make it work but out of the box you have

134
00:05:17,199 --> 00:05:22,840
to do it as the form proxy user

135
00:05:19,520 --> 00:05:24,000
so we'll get another bash shell as that

136
00:05:22,840 --> 00:05:27,280
user

137
00:05:24,000 --> 00:05:31,280
and then i have

138
00:05:27,280 --> 00:05:34,080
an inventory handy ready in here

139
00:05:31,280 --> 00:05:34,880
and i can do something like ansible

140
00:05:34,080 --> 00:05:38,479
playbook

141
00:05:34,880 --> 00:05:42,320
dash inventory the path

142
00:05:38,479 --> 00:05:44,479
and then we need to provide a playbook

143
00:05:42,320 --> 00:05:46,080
i don't want to write it as a file so

144
00:05:44,479 --> 00:05:50,880
maybe we can do something

145
00:05:46,080 --> 00:05:54,320
like this and then we write the playbook

146
00:05:50,880 --> 00:05:57,840
so we do all hosts

147
00:05:54,320 --> 00:05:58,960
we give it some tasks and we run the

148
00:05:57,840 --> 00:06:01,679
setup

149
00:05:58,960 --> 00:06:02,719
this is important it doesn't work with

150
00:06:01,680 --> 00:06:04,840
anything else

151
00:06:02,720 --> 00:06:07,039
setup is the one that triggers the

152
00:06:04,840 --> 00:06:10,638
callback

153
00:06:07,039 --> 00:06:12,639
and that is enough we end the playbook

154
00:06:10,639 --> 00:06:13,840
we end the subshell or whatever it is

155
00:06:12,639 --> 00:06:16,960
and it runs

156
00:06:13,840 --> 00:06:22,719
permission denied okay who knows why

157
00:06:16,960 --> 00:06:22,719
what did i miss any wild ideas

158
00:06:24,720 --> 00:06:31,680
actually two things keys and the user

159
00:06:28,639 --> 00:06:35,120
so let's jump right back

160
00:06:31,680 --> 00:06:38,800
and connect as root and

161
00:06:35,120 --> 00:06:38,800
use the right private key

162
00:06:39,520 --> 00:06:44,560
by default it lives in user share format

163
00:06:42,880 --> 00:06:46,800
proxy dot ssh

164
00:06:44,560 --> 00:06:48,560
id rsa format proxy that's the private

165
00:06:46,800 --> 00:06:51,840
key we use

166
00:06:48,560 --> 00:06:51,840
hopefully it should be better now

167
00:06:52,479 --> 00:06:59,360
we spin the wheel we wait for a bit

168
00:06:56,720 --> 00:07:01,039
but it's taking a bit of time that's a

169
00:06:59,360 --> 00:07:02,479
good sign it means it's actually doing

170
00:07:01,039 --> 00:07:05,360
something

171
00:07:02,479 --> 00:07:06,000
okay here's the first one second one go

172
00:07:05,360 --> 00:07:10,160
on

173
00:07:06,000 --> 00:07:11,120
come on uh the facts don't get reported

174
00:07:10,160 --> 00:07:13,039
until

175
00:07:11,120 --> 00:07:14,240
this all finishes so it makes no sense

176
00:07:13,039 --> 00:07:17,759
checking in the ui

177
00:07:14,240 --> 00:07:20,400
right now with first one sure

178
00:07:17,759 --> 00:07:23,199
um what about if you have a proxy from

179
00:07:20,400 --> 00:07:23,198
approximately

180
00:07:24,080 --> 00:07:28,479
okay so the question was what happens if

181
00:07:26,720 --> 00:07:30,560
you have a former proxy and with the

182
00:07:28,479 --> 00:07:32,719
keys on there so

183
00:07:30,560 --> 00:07:34,400
if you're provisioning through forman

184
00:07:32,720 --> 00:07:36,080
forman collects the keys from all the

185
00:07:34,400 --> 00:07:37,758
proxies you have and deploys them on the

186
00:07:36,080 --> 00:07:39,840
machines so you can then

187
00:07:37,759 --> 00:07:42,080
use any of those proxies to connect them

188
00:07:39,840 --> 00:07:42,080
there

189
00:07:43,039 --> 00:07:46,400
if you're doing something like this then

190
00:07:44,639 --> 00:07:47,360
you have to pick the proxy where you

191
00:07:46,400 --> 00:07:52,878
know the keys are

192
00:07:47,360 --> 00:07:55,919
right or use a password it works too

193
00:07:52,879 --> 00:07:59,599
okay uh this finished so let's check

194
00:07:55,919 --> 00:08:02,318
into the ui let's refresh that

195
00:07:59,599 --> 00:08:03,120
and boom there they are we can now

196
00:08:02,319 --> 00:08:06,319
select them

197
00:08:03,120 --> 00:08:09,199
and we can do things with them

198
00:08:06,319 --> 00:08:09,199
back to the slides

199
00:08:10,080 --> 00:08:13,599
this is what i did and even in here i

200
00:08:12,479 --> 00:08:18,000
missed the user

201
00:08:13,599 --> 00:08:20,719
sorry about that but yeah

202
00:08:18,000 --> 00:08:22,400
okay now we have the hosts what can we

203
00:08:20,720 --> 00:08:25,440
do with them

204
00:08:22,400 --> 00:08:27,359
as i mentioned the ansible plugin is a

205
00:08:25,440 --> 00:08:28,240
special variant of remote execution

206
00:08:27,360 --> 00:08:31,360
plugin

207
00:08:28,240 --> 00:08:34,479
so you can use ansible the same way

208
00:08:31,360 --> 00:08:38,080
you can just run commands or scripts

209
00:08:34,479 --> 00:08:41,279
against the target machines but

210
00:08:38,080 --> 00:08:44,959
let's be honest it's not

211
00:08:41,279 --> 00:08:48,880
what ansible is you know good for

212
00:08:44,959 --> 00:08:52,079
ansible is not as good ssh of pure as

213
00:08:48,880 --> 00:08:55,279
pure ssh is right uh

214
00:08:52,080 --> 00:08:57,360
we have time funny story uh

215
00:08:55,279 --> 00:08:59,279
i was doing some performance testing i

216
00:08:57,360 --> 00:09:00,399
just wanted to know how things behave

217
00:08:59,279 --> 00:09:02,880
under load

218
00:09:00,399 --> 00:09:03,440
and i wanted to run a simple date

219
00:09:02,880 --> 00:09:06,880
command

220
00:09:03,440 --> 00:09:09,279
on a bunch of hosts uh it was this

221
00:09:06,880 --> 00:09:11,040
laptop it has two cores and hyper

222
00:09:09,279 --> 00:09:14,240
threading so it's not really

223
00:09:11,040 --> 00:09:15,360
super beefy and if the load goes up

224
00:09:14,240 --> 00:09:17,120
above 10

225
00:09:15,360 --> 00:09:20,000
the machine locks up for like five

226
00:09:17,120 --> 00:09:22,160
minutes until the load goes down

227
00:09:20,000 --> 00:09:23,760
so i went in to form and ui and why i

228
00:09:22,160 --> 00:09:26,160
wanted to use ssh

229
00:09:23,760 --> 00:09:27,439
but i misclicked and selected ansible

230
00:09:26,160 --> 00:09:32,079
instead

231
00:09:27,440 --> 00:09:35,040
and ran the date command on 10 000 hosts

232
00:09:32,080 --> 00:09:36,160
from this machine it was back then when

233
00:09:35,040 --> 00:09:38,959
we had only the

234
00:09:36,160 --> 00:09:40,640
ansible playbook implementation which

235
00:09:38,959 --> 00:09:43,599
spawned a single

236
00:09:40,640 --> 00:09:45,519
ansible playbook process for each and

237
00:09:43,600 --> 00:09:48,320
every single host

238
00:09:45,519 --> 00:09:49,519
so i just clicked the button in the ui

239
00:09:48,320 --> 00:09:52,880
and suddenly spawned

240
00:09:49,519 --> 00:09:54,959
ten thousand ansible playbooks uh

241
00:09:52,880 --> 00:09:56,480
the last thing i could saw was that the

242
00:09:54,959 --> 00:10:00,640
load went up to about

243
00:09:56,480 --> 00:10:06,079
200 and the machine didn't recover i had

244
00:10:00,640 --> 00:10:06,079
to kill it and start over so

245
00:10:07,120 --> 00:10:12,640
if you just want to run shell scripts

246
00:10:09,120 --> 00:10:14,720
why not use just remote execution

247
00:10:12,640 --> 00:10:16,640
maybe a better use case is actually

248
00:10:14,720 --> 00:10:18,880
running in simple playbooks

249
00:10:16,640 --> 00:10:19,920
you can do that you can go into the ui

250
00:10:18,880 --> 00:10:22,240
you can either

251
00:10:19,920 --> 00:10:24,000
create playbooks as job templates

252
00:10:22,240 --> 00:10:26,560
because in remote execution

253
00:10:24,000 --> 00:10:28,320
and for manageable what you're on are

254
00:10:26,560 --> 00:10:30,239
actually templates which get rendered

255
00:10:28,320 --> 00:10:32,000
and you can provide inputs to them so we

256
00:10:30,240 --> 00:10:34,000
can you can either

257
00:10:32,000 --> 00:10:35,519
write your playbooks as templates which

258
00:10:34,000 --> 00:10:38,160
have no inputs

259
00:10:35,519 --> 00:10:40,079
or you can do what i do and that is have

260
00:10:38,160 --> 00:10:40,719
a single template which only thing it

261
00:10:40,079 --> 00:10:43,760
does is

262
00:10:40,720 --> 00:10:45,360
renders its single input

263
00:10:43,760 --> 00:10:47,519
so basically what you give to it as an

264
00:10:45,360 --> 00:10:48,959
input is the thing that gets wrong

265
00:10:47,519 --> 00:10:50,480
and then you can just go to the ui

266
00:10:48,959 --> 00:10:52,079
select custom playbook write your

267
00:10:50,480 --> 00:10:54,079
playbook in there and click submit and

268
00:10:52,079 --> 00:10:56,719
it runs

269
00:10:54,079 --> 00:10:56,719
you can do that

270
00:10:57,519 --> 00:11:01,680
however there's another way how you can

271
00:11:00,800 --> 00:11:04,880
use

272
00:11:01,680 --> 00:11:07,599
ansible and it is more kind of

273
00:11:04,880 --> 00:11:08,079
configuration management type approach

274
00:11:07,600 --> 00:11:11,680
uh

275
00:11:08,079 --> 00:11:13,920
anyone is familiar with puppet

276
00:11:11,680 --> 00:11:15,920
or stupid the other way who doesn't know

277
00:11:13,920 --> 00:11:18,560
puppet

278
00:11:15,920 --> 00:11:20,319
okay we have several people good so in

279
00:11:18,560 --> 00:11:22,640
the puppet world there's the puppet

280
00:11:20,320 --> 00:11:24,720
agent which runs on the remote machines

281
00:11:22,640 --> 00:11:26,480
and every once in a while it wakes up

282
00:11:24,720 --> 00:11:29,680
calls to the server asks

283
00:11:26,480 --> 00:11:31,279
hey what state should i be in then it

284
00:11:29,680 --> 00:11:32,800
tries to get into that state and it

285
00:11:31,279 --> 00:11:35,920
reports back

286
00:11:32,800 --> 00:11:38,079
to the server and this happen this

287
00:11:35,920 --> 00:11:40,479
happens periodically every i think 30

288
00:11:38,079 --> 00:11:42,880
minutes by default

289
00:11:40,480 --> 00:11:45,360
and you can mimic this behavior with

290
00:11:42,880 --> 00:11:48,880
four mana ansible

291
00:11:45,360 --> 00:11:51,519
you can describe the state you want

292
00:11:48,880 --> 00:11:52,160
the machines be in either by roles or

293
00:11:51,519 --> 00:11:55,760
just

294
00:11:52,160 --> 00:11:58,719
a single huge playbook whatever and

295
00:11:55,760 --> 00:11:59,839
then you can have it run periodically so

296
00:11:58,720 --> 00:12:02,160
instead of the machine

297
00:11:59,839 --> 00:12:03,760
waking up every once in a while four men

298
00:12:02,160 --> 00:12:06,079
will wake every once in a while

299
00:12:03,760 --> 00:12:07,200
and run that against the machine you

300
00:12:06,079 --> 00:12:09,040
will get fresh facts

301
00:12:07,200 --> 00:12:10,720
in format you will be sure that the

302
00:12:09,040 --> 00:12:12,399
machines are in the state you want them

303
00:12:10,720 --> 00:12:14,959
to be

304
00:12:12,399 --> 00:12:17,600
and that's a perfectly viable approach

305
00:12:14,959 --> 00:12:17,599
if you ask me

306
00:12:19,360 --> 00:12:23,440
several times i mentioned that you

307
00:12:21,680 --> 00:12:26,479
assign ansible roles

308
00:12:23,440 --> 00:12:30,399
to the hosts but with the roles

309
00:12:26,480 --> 00:12:32,880
it's the same problem as with hosts

310
00:12:30,399 --> 00:12:33,839
in order to have four men to be able to

311
00:12:32,880 --> 00:12:38,399
do something that

312
00:12:33,839 --> 00:12:41,519
with them it needs to know about them

313
00:12:38,399 --> 00:12:43,519
how do we do it luckily it's simple it's

314
00:12:41,519 --> 00:12:46,800
much simpler than with the hosts

315
00:12:43,519 --> 00:12:49,839
you can just import them they have to be

316
00:12:46,800 --> 00:12:50,800
by default in slash etc and sybil slash

317
00:12:49,839 --> 00:12:53,680
roles

318
00:12:50,800 --> 00:12:54,000
you just put them in there and then you

319
00:12:53,680 --> 00:12:56,638
go

320
00:12:54,000 --> 00:12:58,560
into configure and simply rolls and

321
00:12:56,639 --> 00:13:00,160
there will be a button that says import

322
00:12:58,560 --> 00:13:01,839
from and the hostname

323
00:13:00,160 --> 00:13:03,279
and you click that you will get a list

324
00:13:01,839 --> 00:13:04,079
you can select which ones you want to

325
00:13:03,279 --> 00:13:06,800
import

326
00:13:04,079 --> 00:13:08,319
and you will get them to foramen once

327
00:13:06,800 --> 00:13:11,680
you have them in formant

328
00:13:08,320 --> 00:13:13,279
you can assign them to hosts and

329
00:13:11,680 --> 00:13:16,160
then they will be around either when the

330
00:13:13,279 --> 00:13:18,880
host is provisioned or when you kick off

331
00:13:16,160 --> 00:13:20,240
it's called run all ansible roles i

332
00:13:18,880 --> 00:13:22,800
think

333
00:13:20,240 --> 00:13:24,240
and that's what will happen it will use

334
00:13:22,800 --> 00:13:26,560
these roles as

335
00:13:24,240 --> 00:13:28,639
the source of truth basically and we'll

336
00:13:26,560 --> 00:13:32,479
apply them to the host

337
00:13:28,639 --> 00:13:34,160
what we do in addition is that we scan

338
00:13:32,480 --> 00:13:37,600
those roles

339
00:13:34,160 --> 00:13:40,160
for variables so we look at the defaults

340
00:13:37,600 --> 00:13:43,519
and i think even vars

341
00:13:40,160 --> 00:13:47,040
from those roles and we try to

342
00:13:43,519 --> 00:13:48,959
guess what type they should be

343
00:13:47,040 --> 00:13:50,560
so if the role provides some defaults

344
00:13:48,959 --> 00:13:52,800
formant can take a look

345
00:13:50,560 --> 00:13:54,638
see okay it's a string right now and the

346
00:13:52,800 --> 00:13:58,399
value is something

347
00:13:54,639 --> 00:14:01,040
and then in formant you can see that

348
00:13:58,399 --> 00:14:03,199
this role has these variables which can

349
00:14:01,040 --> 00:14:04,800
change how the role behaves

350
00:14:03,199 --> 00:14:07,839
and you can see that it's a string and

351
00:14:04,800 --> 00:14:07,839
you can override it there

352
00:14:08,079 --> 00:14:11,279
you can either override globally or you

353
00:14:10,639 --> 00:14:15,360
can create

354
00:14:11,279 --> 00:14:18,079
matchers to you know say if the host has

355
00:14:15,360 --> 00:14:19,680
operating system i don't know centos

356
00:14:18,079 --> 00:14:23,439
then this value should be

357
00:14:19,680 --> 00:14:26,479
xyz alternatively

358
00:14:23,440 --> 00:14:28,800
you can set those as parameters directly

359
00:14:26,480 --> 00:14:32,480
on the hosts that works as well

360
00:14:28,800 --> 00:14:34,079
in host groups and even globally

361
00:14:32,480 --> 00:14:36,880
so there are several things how you can

362
00:14:34,079 --> 00:14:36,880
do the same thing

363
00:14:37,279 --> 00:14:44,720
okay i was talking for way too long

364
00:14:41,360 --> 00:14:47,360
let's see what i talked about so we

365
00:14:44,720 --> 00:14:50,800
already have the hosts

366
00:14:47,360 --> 00:14:51,519
uh let's import some roles so we can

367
00:14:50,800 --> 00:14:53,760
assign them

368
00:14:51,519 --> 00:14:54,720
so it's configure the ansible section

369
00:14:53,760 --> 00:14:57,680
and roles

370
00:14:54,720 --> 00:14:59,199
and see there's the big button we click

371
00:14:57,680 --> 00:15:02,880
it

372
00:14:59,199 --> 00:15:04,319
and it will list us which holes exist on

373
00:15:02,880 --> 00:15:06,399
the machine

374
00:15:04,320 --> 00:15:08,399
most of these come from the forklift

375
00:15:06,399 --> 00:15:10,800
project it's something we have for

376
00:15:08,399 --> 00:15:12,639
development of formant it allows you to

377
00:15:10,800 --> 00:15:16,000
spin up uh

378
00:15:12,639 --> 00:15:21,839
format instances using vagrant

379
00:15:16,000 --> 00:15:27,279
but it uses sensible roles to do that so

380
00:15:21,839 --> 00:15:31,199
we can import everything why not

381
00:15:27,279 --> 00:15:31,199
and let's do update

382
00:15:32,240 --> 00:15:38,000
and now we have them in format

383
00:15:35,440 --> 00:15:39,519
uh it's a two-step process right now we

384
00:15:38,000 --> 00:15:42,079
only have the roles

385
00:15:39,519 --> 00:15:44,000
so we may want to import the variables

386
00:15:42,079 --> 00:15:46,319
as well

387
00:15:44,000 --> 00:15:49,519
and it's again just click the button

388
00:15:46,320 --> 00:15:49,519
select the ones you want

389
00:15:49,680 --> 00:15:56,880
i want all the new ones

390
00:15:54,079 --> 00:15:56,880
too many of them

391
00:15:57,199 --> 00:16:00,000
and click update

392
00:16:00,480 --> 00:16:06,839
and it imports them

393
00:16:04,160 --> 00:16:08,160
now what i will show you i will deploy

394
00:16:06,839 --> 00:16:11,040
cjdns

395
00:16:08,160 --> 00:16:11,839
it's a project for mesh networking it

396
00:16:11,040 --> 00:16:14,880
can either

397
00:16:11,839 --> 00:16:15,920
act as an overlay network or it can act

398
00:16:14,880 --> 00:16:19,040
on the level two

399
00:16:15,920 --> 00:16:20,719
or layer two and in that case it doesn't

400
00:16:19,040 --> 00:16:22,560
need any configuration which is ideal

401
00:16:20,720 --> 00:16:27,680
and i can just switch it toggle

402
00:16:22,560 --> 00:16:27,680
in here and it will be fine so uh

403
00:16:28,639 --> 00:16:33,600
this is one of the variable it's set as

404
00:16:31,360 --> 00:16:37,519
a default in the ansible cg dns

405
00:16:33,600 --> 00:16:41,519
row and we can see that it's a default

406
00:16:37,519 --> 00:16:41,519
and by default it's

407
00:16:41,680 --> 00:16:46,160
it's false i don't want that

408
00:16:46,800 --> 00:16:53,120
i want it to be true so i just override

409
00:16:50,000 --> 00:16:55,839
it here and that's it

410
00:16:53,120 --> 00:16:57,600
now if i look at the var at the variable

411
00:16:55,839 --> 00:17:00,480
i can see a flag that

412
00:16:57,600 --> 00:17:02,079
it has some override configured so it

413
00:17:00,480 --> 00:17:05,839
gives a visual indication that

414
00:17:02,079 --> 00:17:05,839
there is something non-default

415
00:17:06,720 --> 00:17:15,120
then i go to the hosts

416
00:17:09,839 --> 00:17:15,119
and i assign the roles to them

417
00:17:15,839 --> 00:17:20,639
we go to edit then there's the ansible

418
00:17:17,919 --> 00:17:20,640
roles tab

419
00:17:21,679 --> 00:17:24,959
yeah and we have to find them in this

420
00:17:24,559 --> 00:17:28,319
list

421
00:17:24,959 --> 00:17:28,319
they are somewhere at the end

422
00:17:31,360 --> 00:17:39,600
small screen size okay it's this one

423
00:17:34,720 --> 00:17:42,160
i hope and still cj yo

424
00:17:39,600 --> 00:17:43,439
okay so we submitted and it's assigned

425
00:17:42,160 --> 00:17:47,039
to the host

426
00:17:43,440 --> 00:17:52,240
uh i could run this on this single one

427
00:17:47,039 --> 00:17:52,240
but let's do the cjdns1 as well

428
00:17:53,200 --> 00:17:58,320
just so we can see that it actually

429
00:17:55,919 --> 00:17:58,320
works

430
00:17:58,840 --> 00:18:06,639
there and we submit it

431
00:18:03,679 --> 00:18:08,880
then we can go to hosts select the first

432
00:18:06,640 --> 00:18:08,880
two

433
00:18:11,200 --> 00:18:16,960
and have them

434
00:18:14,559 --> 00:18:18,160
run all ansible roles it will take the

435
00:18:16,960 --> 00:18:21,039
roles we assigned and

436
00:18:18,160 --> 00:18:22,640
run them against the hosts uh this is

437
00:18:21,039 --> 00:18:25,200
current nightly setup

438
00:18:22,640 --> 00:18:26,480
uh i must admit we had some issues with

439
00:18:25,200 --> 00:18:28,640
the javascript stack

440
00:18:26,480 --> 00:18:31,440
recently so there should be chart right

441
00:18:28,640 --> 00:18:35,200
here which isn't currently there

442
00:18:31,440 --> 00:18:35,200
and everything failed okay that's new

443
00:18:35,600 --> 00:18:41,039
uh fail to connect could not resolve

444
00:18:38,400 --> 00:18:41,039
hostname

445
00:18:41,520 --> 00:18:47,360
okay we'll use uh poor man's dns

446
00:18:47,520 --> 00:18:57,840
and at this etc hosts

447
00:18:51,679 --> 00:18:57,840
i'll just uh

448
00:18:59,120 --> 00:19:01,520
jesus

449
00:19:02,880 --> 00:19:06,640
and i only need to do the first two so

450
00:19:05,679 --> 00:19:11,840
it won't take

451
00:19:06,640 --> 00:19:11,840
that long

452
00:19:14,799 --> 00:19:18,240
okay so this was a fun little exercise i

453
00:19:17,520 --> 00:19:22,960
cannot

454
00:19:18,240 --> 00:19:24,799
offer the job again same settings

455
00:19:22,960 --> 00:19:27,280
have it run hopefully this time it will

456
00:19:24,799 --> 00:19:27,280
be green

457
00:19:27,440 --> 00:19:33,039
while it runs uh

458
00:19:30,880 --> 00:19:36,799
before i start about it do we have any

459
00:19:33,039 --> 00:19:40,080
current formanciable users in here

460
00:19:36,799 --> 00:19:44,480
okay one two some other awesome

461
00:19:40,080 --> 00:19:47,840
uh i have some slides on

462
00:19:44,480 --> 00:19:51,520
what changed recently

463
00:19:47,840 --> 00:19:53,840
and that is we dropped support for the

464
00:19:51,520 --> 00:19:56,400
original ansible playbook

465
00:19:53,840 --> 00:19:57,918
uh thing so now it's only using and

466
00:19:56,400 --> 00:20:00,960
simple runner

467
00:19:57,919 --> 00:20:02,400
it also lifted the one process per one

468
00:20:00,960 --> 00:20:03,919
host requirement

469
00:20:02,400 --> 00:20:05,520
so that should be better you should now

470
00:20:03,919 --> 00:20:08,799
be able to use as

471
00:20:05,520 --> 00:20:12,720
an orchestrator basically

472
00:20:08,799 --> 00:20:14,639
and we reworked the way how we generate

473
00:20:12,720 --> 00:20:16,159
inventory for external services so if

474
00:20:14,640 --> 00:20:18,640
you use tower or

475
00:20:16,159 --> 00:20:20,080
awx to pull the inventory from formant

476
00:20:18,640 --> 00:20:24,320
it should

477
00:20:20,080 --> 00:20:26,080
be faster and we started deploying

478
00:20:24,320 --> 00:20:27,360
dynflow that's the internal

479
00:20:26,080 --> 00:20:30,559
orchestration engine

480
00:20:27,360 --> 00:20:31,678
or tasking engine we use to use sidekick

481
00:20:30,559 --> 00:20:34,480
under the hood

482
00:20:31,679 --> 00:20:35,360
so it should perform better be more

483
00:20:34,480 --> 00:20:38,559
scalable

484
00:20:35,360 --> 00:20:38,559
and more reliable

485
00:20:39,520 --> 00:20:43,039
that's for the news let's take a look

486
00:20:42,000 --> 00:20:46,480
back

487
00:20:43,039 --> 00:20:46,480
and we can see that

488
00:20:47,679 --> 00:20:55,679
it is still running all the role does is

489
00:20:52,080 --> 00:20:57,760
it enables e-bell it installs a package

490
00:20:55,679 --> 00:20:59,120
it generates configuration and it

491
00:20:57,760 --> 00:21:02,158
enables the service

492
00:20:59,120 --> 00:21:05,678
so it shouldn't take this long

493
00:21:02,159 --> 00:21:07,039
but it's still running we can use this

494
00:21:05,679 --> 00:21:10,480
time

495
00:21:07,039 --> 00:21:12,720
to do a little questions and answer

496
00:21:10,480 --> 00:21:14,400
session is there anything you would like

497
00:21:12,720 --> 00:21:18,080
me

498
00:21:14,400 --> 00:21:18,080
to talk about our gun

499
00:21:20,320 --> 00:21:25,120
so the question was whether we can

500
00:21:22,799 --> 00:21:26,000
change the variables for different hosts

501
00:21:25,120 --> 00:21:30,639
or host groups

502
00:21:26,000 --> 00:21:33,919
is that correct okay uh you can

503
00:21:30,640 --> 00:21:35,840
either you have to specify the matures

504
00:21:33,919 --> 00:21:37,840
so you go to ansible variables and then

505
00:21:35,840 --> 00:21:39,918
at the bottom of the page

506
00:21:37,840 --> 00:21:41,520
you can specify matures which match on

507
00:21:39,919 --> 00:21:42,960
different parts of the host so you can

508
00:21:41,520 --> 00:21:45,520
do it either this way

509
00:21:42,960 --> 00:21:46,240
or you can do go to the host group or to

510
00:21:45,520 --> 00:21:48,158
the host

511
00:21:46,240 --> 00:21:49,440
and edit the parameters of the host

512
00:21:48,159 --> 00:21:53,039
directly

513
00:21:49,440 --> 00:21:53,039
then that well you will be used to

514
00:21:55,919 --> 00:22:00,320
okay it's moving it's moving it

515
00:21:58,320 --> 00:22:04,000
performed the automatic configuration

516
00:22:00,320 --> 00:22:06,639
it restarted the service awesome so

517
00:22:04,000 --> 00:22:06,640
this is done

518
00:22:07,120 --> 00:22:11,199
we can see that all the hosts completed

519
00:22:09,520 --> 00:22:14,559
successfully

520
00:22:11,200 --> 00:22:16,240
and cj dns creates a new interface on

521
00:22:14,559 --> 00:22:19,678
the host

522
00:22:16,240 --> 00:22:20,799
but if we go here into next we can see

523
00:22:19,679 --> 00:22:22,720
it

524
00:22:20,799 --> 00:22:24,559
and that's because the facts about the

525
00:22:22,720 --> 00:22:26,720
host are collected at the beginning of

526
00:22:24,559 --> 00:22:29,280
the run so

527
00:22:26,720 --> 00:22:30,960
the effects got collected and then the

528
00:22:29,280 --> 00:22:36,000
interface appeared

529
00:22:30,960 --> 00:22:36,000
so we can't see it however if we

530
00:22:36,159 --> 00:22:44,400
run it again

531
00:22:40,799 --> 00:22:44,400
it should run much faster now

532
00:22:45,919 --> 00:22:50,960
and it should give us the right facts

533
00:22:49,360 --> 00:22:53,039
so this is something just to keep in

534
00:22:50,960 --> 00:22:57,039
mind we see that now it's

535
00:22:53,039 --> 00:22:57,039
blazing fast almost

536
00:22:58,480 --> 00:23:02,799
and it is done oops

537
00:23:03,919 --> 00:23:09,280
and if we go back and to the host

538
00:23:06,840 --> 00:23:11,840
details

539
00:23:09,280 --> 00:23:13,280
and into nix we can see that there is

540
00:23:11,840 --> 00:23:16,799
ton zero

541
00:23:13,280 --> 00:23:20,960
interface with mtu of 1300 and something

542
00:23:16,799 --> 00:23:20,960
and it has an ipv6 address

543
00:23:22,690 --> 00:23:25,839
[Music]

544
00:23:30,760 --> 00:23:36,320
[Music]

545
00:23:32,720 --> 00:23:38,159
oh i think the plan is to keep catello

546
00:23:36,320 --> 00:23:41,520
as a plugin

547
00:23:38,159 --> 00:23:43,039
and not really merge them to one forman

548
00:23:41,520 --> 00:23:44,240
is fairly modular

549
00:23:43,039 --> 00:23:46,400
you have the core which does

550
00:23:44,240 --> 00:23:50,320
provisioning and there are plugins for

551
00:23:46,400 --> 00:23:54,400
almost everything under the sun

552
00:23:50,320 --> 00:23:54,399
yeah i think it will stay this way

553
00:23:57,679 --> 00:24:05,840
all right we are almost out of time so

554
00:24:01,039 --> 00:24:05,840
one or two last questions

555
00:24:06,159 --> 00:24:09,760
please can you select which uh smart

556
00:24:09,039 --> 00:24:12,400
proxy

557
00:24:09,760 --> 00:24:13,120
uh is used to do the ansible run if

558
00:24:12,400 --> 00:24:15,520
you're

559
00:24:13,120 --> 00:24:17,840
having separate networks okay the

560
00:24:15,520 --> 00:24:19,360
question was if you can select the smart

561
00:24:17,840 --> 00:24:24,320
proxy which is used for

562
00:24:19,360 --> 00:24:27,918
running uh the job against the host

563
00:24:24,320 --> 00:24:30,158
you you can select it directly by

564
00:24:27,919 --> 00:24:31,679
like going into the form and saying hey

565
00:24:30,159 --> 00:24:35,039
use this one

566
00:24:31,679 --> 00:24:36,080
but you can configure your organizations

567
00:24:35,039 --> 00:24:38,799
locations

568
00:24:36,080 --> 00:24:39,918
subnets and things like that to perform

569
00:24:38,799 --> 00:24:44,400
the selection for you

570
00:24:39,919 --> 00:24:48,320
the way you want so it's doable

571
00:24:44,400 --> 00:24:48,320
in a kind of roundabout way

572
00:24:48,720 --> 00:24:51,279
yes please

573
00:24:56,240 --> 00:25:00,240
so the question was if the configuration

574
00:24:58,720 --> 00:25:02,559
of which hosts

575
00:25:00,240 --> 00:25:04,000
which roles are assigned to each host is

576
00:25:02,559 --> 00:25:05,039
something that could be version

577
00:25:04,000 --> 00:25:08,960
controllable

578
00:25:05,039 --> 00:25:11,600
right yes not currently

579
00:25:08,960 --> 00:25:11,600
i'm afraid

580
00:25:12,159 --> 00:25:15,360
but it sounds like a reasonable thing so

581
00:25:14,320 --> 00:25:18,879
please

582
00:25:15,360 --> 00:25:21,918
open an rfe for us and we can see

583
00:25:18,880 --> 00:25:21,919
what we can do about it

584
00:25:24,000 --> 00:25:31,520
okay please

585
00:25:28,080 --> 00:25:33,840
uh if we can use it together with puppet

586
00:25:31,520 --> 00:25:35,840
well you can there's nothing from

587
00:25:33,840 --> 00:25:38,080
stopping you from doing that

588
00:25:35,840 --> 00:25:43,840
they live completely side by side and

589
00:25:38,080 --> 00:25:43,840
it's up to you what you use

590
00:25:45,520 --> 00:25:48,559
okay it looks like there are no more

591
00:25:47,279 --> 00:25:56,640
questions so

592
00:25:48,559 --> 00:25:59,760
thank you very much for listening

593
00:25:56,640 --> 00:26:01,760
and please stop by the foreman booth and

594
00:25:59,760 --> 00:26:10,400
we can talk more

595
00:26:01,760 --> 00:26:10,400
thank you

