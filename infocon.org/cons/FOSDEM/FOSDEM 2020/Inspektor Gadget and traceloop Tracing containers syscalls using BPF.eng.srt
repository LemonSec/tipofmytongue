1
00:00:06,960 --> 00:00:10,639
okay

2
00:00:07,520 --> 00:00:12,239
so next one is going to be um

3
00:00:10,639 --> 00:00:14,919
album craic is going to be talking to us

4
00:00:12,240 --> 00:00:16,640
about tracing containers cisco's using

5
00:00:14,920 --> 00:00:18,480
bpf

6
00:00:16,640 --> 00:00:20,000
thank you for coming everybody can you

7
00:00:18,480 --> 00:00:22,320
hear me fine

8
00:00:20,000 --> 00:00:24,480
cool so i will talk about inspector

9
00:00:22,320 --> 00:00:25,199
gadget on traceroop on tracing container

10
00:00:24,480 --> 00:00:28,400
syscalls

11
00:00:25,199 --> 00:00:31,439
using bpf my name is albon

12
00:00:28,400 --> 00:00:33,440
i am kin folk at kinfolk we do

13
00:00:31,439 --> 00:00:35,520
uh low level linux development we have a

14
00:00:33,440 --> 00:00:38,160
linux distribution uh kubernetes

15
00:00:35,520 --> 00:00:39,840
distribution as well and we do cool uh

16
00:00:38,160 --> 00:00:45,120
things on top of that with

17
00:00:39,840 --> 00:00:48,079
bpf so um today i'm talking about

18
00:00:45,120 --> 00:00:48,640
stress kubernetes and bpf i really like

19
00:00:48,079 --> 00:00:51,440
to use

20
00:00:48,640 --> 00:00:51,680
stress as a debugging tool how many of

21
00:00:51,440 --> 00:00:54,718
you

22
00:00:51,680 --> 00:00:54,719
like to use stress

23
00:00:56,960 --> 00:01:03,359
like no no no okay

24
00:01:00,160 --> 00:01:06,720
well i like it sorry

25
00:01:03,359 --> 00:01:08,720
but i still find it useful so i like to

26
00:01:06,720 --> 00:01:10,960
use it to find out what my applications

27
00:01:08,720 --> 00:01:13,520
are doing

28
00:01:10,960 --> 00:01:14,720
um so i will present first uh the trace

29
00:01:13,520 --> 00:01:16,960
loop software

30
00:01:14,720 --> 00:01:18,240
uh what it does it trace system calls a

31
00:01:16,960 --> 00:01:21,360
bit similar to stress

32
00:01:18,240 --> 00:01:23,679
but done in a different way uh with

33
00:01:21,360 --> 00:01:24,560
it uses c groups and bpf and it uses

34
00:01:23,680 --> 00:01:26,479
overwritable

35
00:01:24,560 --> 00:01:27,759
ring buffers that i will explain a bit

36
00:01:26,479 --> 00:01:29,759
later

37
00:01:27,759 --> 00:01:32,720
and then i will talk about inspector

38
00:01:29,759 --> 00:01:34,960
gadget which is a kind of

39
00:01:32,720 --> 00:01:35,920
something on top to use trace loop on

40
00:01:34,960 --> 00:01:38,479
other things

41
00:01:35,920 --> 00:01:40,240
on top of a kubernetes cluster so trace

42
00:01:38,479 --> 00:01:41,600
loop is a command line tool or demon

43
00:01:40,240 --> 00:01:42,798
that you use on one machine and

44
00:01:41,600 --> 00:01:45,679
inspector gadget is on

45
00:01:42,799 --> 00:01:46,079
kubernetes cluster if you are interested

46
00:01:45,680 --> 00:01:48,000
by

47
00:01:46,079 --> 00:01:49,759
those projects you can join the

48
00:01:48,000 --> 00:01:50,640
kubernetes slack there is an inspector

49
00:01:49,759 --> 00:01:55,360
gadget

50
00:01:50,640 --> 00:01:58,479
channel there so it used vpf

51
00:01:55,360 --> 00:02:00,159
so bbf basically it's a by code that

52
00:01:58,479 --> 00:02:01,759
you can write your program in c compile

53
00:02:00,159 --> 00:02:04,960
it with celangelfvm

54
00:02:01,759 --> 00:02:08,000
into bpf by code you get

55
00:02:04,960 --> 00:02:10,000
object file and you can use um you can

56
00:02:08,000 --> 00:02:11,760
upload this object file into the kernel

57
00:02:10,000 --> 00:02:13,840
with the bpf system call

58
00:02:11,760 --> 00:02:15,200
and then the kernel will first verify

59
00:02:13,840 --> 00:02:16,959
that you don't do anything

60
00:02:15,200 --> 00:02:20,319
bad because this code is running in the

61
00:02:16,959 --> 00:02:22,480
kernel so it will be dangerous if it was

62
00:02:20,319 --> 00:02:24,160
cool access to any kind of canon memory

63
00:02:22,480 --> 00:02:26,238
and so on so there is some verification

64
00:02:24,160 --> 00:02:27,680
strict verification there and then the

65
00:02:26,239 --> 00:02:30,879
bpf program will be allowed to

66
00:02:27,680 --> 00:02:33,120
run on interact uh sounding message to

67
00:02:30,879 --> 00:02:35,840
user space through bfpf map and

68
00:02:33,120 --> 00:02:36,480
use some kernel function that color that

69
00:02:35,840 --> 00:02:39,440
are called

70
00:02:36,480 --> 00:02:40,959
bpf helper functions so that's bpf in a

71
00:02:39,440 --> 00:02:44,319
nutshell and we will use that

72
00:02:40,959 --> 00:02:44,319
for a trace loop

73
00:02:45,360 --> 00:02:50,400
so my use case why do i want to use a

74
00:02:47,760 --> 00:02:53,040
stress on kubernetes

75
00:02:50,400 --> 00:02:54,879
sometimes when something crashed i wish

76
00:02:53,040 --> 00:02:56,480
i wish i run that with stress to see

77
00:02:54,879 --> 00:02:58,879
what are the last system called it does

78
00:02:56,480 --> 00:03:01,599
but i cannot use a stress

79
00:02:58,879 --> 00:03:03,200
for every application on all the process

80
00:03:01,599 --> 00:03:04,720
in production that doesn't work because

81
00:03:03,200 --> 00:03:07,040
stress is slow

82
00:03:04,720 --> 00:03:08,400
and that's not really the use case that

83
00:03:07,040 --> 00:03:11,840
you cannot do that

84
00:03:08,400 --> 00:03:13,360
all the time if i want to use stress on

85
00:03:11,840 --> 00:03:15,120
only one application that is going to

86
00:03:13,360 --> 00:03:17,519
crash to be able to debug it

87
00:03:15,120 --> 00:03:19,440
i don't always know what which

88
00:03:17,519 --> 00:03:22,239
application is going to crash in advance

89
00:03:19,440 --> 00:03:24,079
so i cannot retractively start the

90
00:03:22,239 --> 00:03:27,200
stress programming

91
00:03:24,080 --> 00:03:27,760
so the idea is to have a system with bpf

92
00:03:27,200 --> 00:03:30,720
that

93
00:03:27,760 --> 00:03:31,760
record all the system codes executed by

94
00:03:30,720 --> 00:03:34,640
the older application

95
00:03:31,760 --> 00:03:35,760
on kubernetes and record that in a ring

96
00:03:34,640 --> 00:03:38,159
buffer

97
00:03:35,760 --> 00:03:39,200
it's an overrideable ring buffer so it's

98
00:03:38,159 --> 00:03:40,480
when it

99
00:03:39,200 --> 00:03:43,040
filled the ring buffer it's overwhelmed

100
00:03:40,480 --> 00:03:45,440
the previous events

101
00:03:43,040 --> 00:03:47,440
and then this ring buffer is there in

102
00:03:45,440 --> 00:03:50,000
memory and if a pod crash

103
00:03:47,440 --> 00:03:50,640
your application crashes then you can

104
00:03:50,000 --> 00:03:53,120
ask oh

105
00:03:50,640 --> 00:03:56,480
what were the last system calls in that

106
00:03:53,120 --> 00:03:56,480
we're recording in knowing buffer

107
00:03:57,360 --> 00:04:01,920
so here i compare stress on trace loop

108
00:04:00,319 --> 00:04:05,439
that works differently

109
00:04:01,920 --> 00:04:05,679
stress use ptrace it's the granularity

110
00:04:05,439 --> 00:04:08,480
is

111
00:04:05,680 --> 00:04:10,879
one process one or several processes one

112
00:04:08,480 --> 00:04:13,119
twist loop works with bpf on response

113
00:04:10,879 --> 00:04:15,518
the granularity is uh c group so i can

114
00:04:13,120 --> 00:04:19,358
select the c group where

115
00:04:15,519 --> 00:04:21,040
i will get the traces stress is

116
00:04:19,358 --> 00:04:23,440
kind of slow you cannot really use it

117
00:04:21,040 --> 00:04:25,680
for all the process for everything

118
00:04:23,440 --> 00:04:28,560
but restloop is fast because we don't

119
00:04:25,680 --> 00:04:30,320
actually read the system calls events

120
00:04:28,560 --> 00:04:32,320
only when something crash or when the

121
00:04:30,320 --> 00:04:34,159
user asks for it we get the last system

122
00:04:32,320 --> 00:04:37,280
calls

123
00:04:34,160 --> 00:04:39,880
and finally stress is reliable it's

124
00:04:37,280 --> 00:04:41,198
synchronous so you

125
00:04:39,880 --> 00:04:43,360
[Music]

126
00:04:41,199 --> 00:04:44,960
you cannot use events all the system

127
00:04:43,360 --> 00:04:46,800
calls that are done by your application

128
00:04:44,960 --> 00:04:49,280
will be printed by the stress command

129
00:04:46,800 --> 00:04:50,560
it will not forget some uh trust loop

130
00:04:49,280 --> 00:04:52,559
it's not like that

131
00:04:50,560 --> 00:04:54,840
it's possible that some events are lost

132
00:04:52,560 --> 00:04:57,280
because it use a ring buffer and

133
00:04:54,840 --> 00:05:00,638
if if you miss some

134
00:04:57,280 --> 00:05:03,119
events then that happens and sometimes

135
00:05:00,639 --> 00:05:05,280
you might not always get the parameters

136
00:05:03,120 --> 00:05:08,560
of the system calls

137
00:05:05,280 --> 00:05:09,520
as opposed to p2s using the method with

138
00:05:08,560 --> 00:05:10,960
vpf

139
00:05:09,520 --> 00:05:13,039
in some cases you might not have all the

140
00:05:10,960 --> 00:05:16,239
information but that's still very useful

141
00:05:13,039 --> 00:05:18,719
and good enough

142
00:05:16,240 --> 00:05:20,080
so what i do with uh tres loop is to add

143
00:05:18,720 --> 00:05:24,400
a trace point on the

144
00:05:20,080 --> 00:05:26,240
sys enter transparent on linux so every

145
00:05:24,400 --> 00:05:28,080
time we enter our system call

146
00:05:26,240 --> 00:05:30,160
this transform will be triggered and

147
00:05:28,080 --> 00:05:33,198
execute this bpf program

148
00:05:30,160 --> 00:05:34,880
and this bpa program will decide whether

149
00:05:33,199 --> 00:05:36,720
what to do with that system call it will

150
00:05:34,880 --> 00:05:40,960
first look in which the group

151
00:05:36,720 --> 00:05:42,720
it is in which cloud or which container

152
00:05:40,960 --> 00:05:44,638
and then depending on the container it

153
00:05:42,720 --> 00:05:48,000
will redirect the execution program

154
00:05:44,639 --> 00:05:52,479
to another bpf program so it use a bpf

155
00:05:48,000 --> 00:05:56,720
map of a special kind called

156
00:05:52,479 --> 00:05:59,280
map and depending on the c group it will

157
00:05:56,720 --> 00:06:00,160
redirect the execution to a different

158
00:05:59,280 --> 00:06:02,880
module

159
00:06:00,160 --> 00:06:04,560
and log the system calls in a different

160
00:06:02,880 --> 00:06:06,800
ring buffer

161
00:06:04,560 --> 00:06:08,800
those swing buffers are configured to be

162
00:06:06,800 --> 00:06:10,639
overwritable so that's not the default

163
00:06:08,800 --> 00:06:12,240
on path ring buffer where it's

164
00:06:10,639 --> 00:06:15,280
stopped writing when it's full but this

165
00:06:12,240 --> 00:06:19,120
one is just override continuously

166
00:06:15,280 --> 00:06:21,758
and then when the user asks for it

167
00:06:19,120 --> 00:06:24,880
the user can read the last system calls

168
00:06:21,759 --> 00:06:24,880
the last few system calls

169
00:06:24,960 --> 00:06:29,680
so i can do a demo of twice loop on a

170
00:06:27,840 --> 00:06:34,318
command line

171
00:06:29,680 --> 00:06:37,520
so trace loop is a cli command line tool

172
00:06:34,319 --> 00:06:37,520
is it big enough

173
00:06:37,840 --> 00:06:41,758
it can run as a demand or it can run on

174
00:06:40,319 --> 00:06:42,960
the command line like this here i will

175
00:06:41,759 --> 00:06:45,840
specify

176
00:06:42,960 --> 00:06:47,198
ultras whatever process in the is in a

177
00:06:45,840 --> 00:06:51,119
sshd

178
00:06:47,199 --> 00:06:54,319
group so let's try this

179
00:06:51,120 --> 00:06:58,160
ok now it starts to trace

180
00:06:54,319 --> 00:07:02,000
so i will generate some traffic on sshd

181
00:06:58,160 --> 00:07:05,120
i mean i want to

182
00:07:02,000 --> 00:07:06,240
make it do some system calls okay so now

183
00:07:05,120 --> 00:07:09,280
it

184
00:07:06,240 --> 00:07:10,560
did some system calls as you see you

185
00:07:09,280 --> 00:07:11,520
don't see any trace here because it

186
00:07:10,560 --> 00:07:13,360
doesn't actually

187
00:07:11,520 --> 00:07:15,680
look on the ring buffer only when i ask

188
00:07:13,360 --> 00:07:17,840
for it we are here with ctrl c

189
00:07:15,680 --> 00:07:19,360
i will get the last symptom calls from

190
00:07:17,840 --> 00:07:21,119
sshd so i see

191
00:07:19,360 --> 00:07:22,880
he does some social system called like

192
00:07:21,120 --> 00:07:26,720
receive message select

193
00:07:22,880 --> 00:07:28,240
um and so on and the last few

194
00:07:26,720 --> 00:07:30,960
system calls are printed here and i can

195
00:07:28,240 --> 00:07:33,599
debug my application

196
00:07:30,960 --> 00:07:35,039
okay so that was trace loop on the

197
00:07:33,599 --> 00:07:38,479
command line

198
00:07:35,039 --> 00:07:40,479
now i want to adapt it to kubernetes so

199
00:07:38,479 --> 00:07:41,840
what do we want for kubernetes we don't

200
00:07:40,479 --> 00:07:45,360
really want the user to

201
00:07:41,840 --> 00:07:46,719
ssh to another usually the user doesn't

202
00:07:45,360 --> 00:07:51,120
really care about pid

203
00:07:46,720 --> 00:07:53,360
or c groups but they care about

204
00:07:51,120 --> 00:07:55,199
kubernetes spots or kubernetes levels so

205
00:07:53,360 --> 00:07:57,759
you want to be able to select

206
00:07:55,199 --> 00:07:59,360
the thing to debug with a board or the

207
00:07:57,759 --> 00:08:01,440
labels

208
00:07:59,360 --> 00:08:03,199
and then the user experience which will

209
00:08:01,440 --> 00:08:05,919
be something close to coop ctl

210
00:08:03,199 --> 00:08:07,120
which is a common line tool for

211
00:08:05,919 --> 00:08:12,240
kubernetes

212
00:08:07,120 --> 00:08:13,680
and not having had to ssh on the node

213
00:08:12,240 --> 00:08:15,680
it turns out there are already

214
00:08:13,680 --> 00:08:19,120
kubernetes tools doing that so

215
00:08:15,680 --> 00:08:22,240
on the left side i have some bpf tools

216
00:08:19,120 --> 00:08:25,680
uh bpf trace bcc and trace loop

217
00:08:22,240 --> 00:08:26,000
on the right side some kubernetes level

218
00:08:25,680 --> 00:08:29,360
tools

219
00:08:26,000 --> 00:08:31,039
that use the tools from the left so

220
00:08:29,360 --> 00:08:32,560
uh that's really cool project for

221
00:08:31,039 --> 00:08:35,360
example quick ctl trace

222
00:08:32,559 --> 00:08:36,399
you can use bpx press on a kubernetes

223
00:08:35,360 --> 00:08:38,800
cluster

224
00:08:36,399 --> 00:08:40,719
on inspector gadget use bcc and twice

225
00:08:38,799 --> 00:08:41,919
group as well

226
00:08:40,719 --> 00:08:44,080
basically it worked like that when

227
00:08:41,919 --> 00:08:45,040
you're on your laptop you use a cube ctl

228
00:08:44,080 --> 00:08:48,720
gadget

229
00:08:45,040 --> 00:08:51,120
which is um client-side

230
00:08:48,720 --> 00:08:54,320
plug-in to keep cl and then it will

231
00:08:51,120 --> 00:08:56,640
issue some um

232
00:08:54,320 --> 00:08:58,880
api calls to kubernetes it will not do

233
00:08:56,640 --> 00:09:00,480
any ssh or any other things it will only

234
00:08:58,880 --> 00:09:04,000
go through the api server and

235
00:09:00,480 --> 00:09:07,200
request some bcc scripts or bpf program

236
00:09:04,000 --> 00:09:07,200
to be executed on the node

237
00:09:07,279 --> 00:09:10,640
uh so now it's time for another demo of

238
00:09:10,000 --> 00:09:15,279
uh

239
00:09:10,640 --> 00:09:18,560
trace loop on inspector gadget

240
00:09:15,279 --> 00:09:22,480
so here i have um some

241
00:09:18,560 --> 00:09:22,880
kubernetes parts running on what i will

242
00:09:22,480 --> 00:09:25,200
do

243
00:09:22,880 --> 00:09:26,959
i prepare here a command to run which

244
00:09:25,200 --> 00:09:30,399
will start a new port

245
00:09:26,959 --> 00:09:33,920
with some shell scripts here so

246
00:09:30,399 --> 00:09:37,279
i run my pod it computes

247
00:09:33,920 --> 00:09:39,519
a multiplication here and then

248
00:09:37,279 --> 00:09:41,600
um you don't want my transcript

249
00:09:39,519 --> 00:09:45,760
correctly so i don't see the result

250
00:09:41,600 --> 00:09:48,800
so but i still have a way to debug it

251
00:09:45,760 --> 00:09:52,800
even if i delete the board that i

252
00:09:48,800 --> 00:09:55,680
just used uh i have 10 minutes left

253
00:09:52,800 --> 00:09:56,640
i can uh my ipod is gone because i just

254
00:09:55,680 --> 00:10:00,399
deleted but

255
00:09:56,640 --> 00:10:02,160
uh with inspector gadget

256
00:10:00,399 --> 00:10:03,920
stress loop list i can see the list of

257
00:10:02,160 --> 00:10:06,640
the last few

258
00:10:03,920 --> 00:10:09,040
traces and i should be able to find one

259
00:10:06,640 --> 00:10:12,560
which is

260
00:10:09,040 --> 00:10:12,560
this one 28 seconds ago

261
00:10:13,279 --> 00:10:20,079
i will do inspector gadget

262
00:10:16,320 --> 00:10:21,680
trace loop show on this

263
00:10:20,079 --> 00:10:23,199
and that will be able to see the last

264
00:10:21,680 --> 00:10:25,599
system called that

265
00:10:23,200 --> 00:10:27,519
we're recording in the rig buffer so i

266
00:10:25,600 --> 00:10:33,519
can see for example that

267
00:10:27,519 --> 00:10:36,720
this oops the bc

268
00:10:33,519 --> 00:10:38,240
process on the shell process we're doing

269
00:10:36,720 --> 00:10:39,600
the multiplication and printing the

270
00:10:38,240 --> 00:10:43,760
output but

271
00:10:39,600 --> 00:10:43,760
so i can debug my application here

272
00:10:45,120 --> 00:10:50,320
okay uh so i will show some uh stop gaps

273
00:10:48,959 --> 00:10:52,479
in tres loop that are thing that i

274
00:10:50,320 --> 00:10:53,519
implement in interest loop which are not

275
00:10:52,480 --> 00:10:56,640
the perfect way

276
00:10:53,519 --> 00:11:01,360
but i will explain why

277
00:10:56,640 --> 00:11:01,760
so initially i what inspector gadget for

278
00:11:01,360 --> 00:11:03,760
uh

279
00:11:01,760 --> 00:11:05,360
kin fox linux distribution that's flat

280
00:11:03,760 --> 00:11:06,640
car container linux on kubernetes

281
00:11:05,360 --> 00:11:09,440
distribution

282
00:11:06,640 --> 00:11:10,000
uh but then i wanted to make it work on

283
00:11:09,440 --> 00:11:13,760
other

284
00:11:10,000 --> 00:11:16,000
normal uh i mean older

285
00:11:13,760 --> 00:11:17,360
linux kernels for example like a mini

286
00:11:16,000 --> 00:11:20,000
cube or gke

287
00:11:17,360 --> 00:11:21,680
user 4.14 which doesn't have what the

288
00:11:20,000 --> 00:11:24,959
bpa feature i wanted

289
00:11:21,680 --> 00:11:26,560
so for example it doesn't have this bpf

290
00:11:24,959 --> 00:11:29,040
helper function i wanted it doesn't have

291
00:11:26,560 --> 00:11:31,199
sql version 2 enabled by default

292
00:11:29,040 --> 00:11:34,160
and there is no proper way from

293
00:11:31,200 --> 00:11:36,320
kubernetes to use oci hooks

294
00:11:34,160 --> 00:11:37,600
so but still the trace loop program

295
00:11:36,320 --> 00:11:40,560
works on all those

296
00:11:37,600 --> 00:11:41,120
kubernetes distribution with some hacks

297
00:11:40,560 --> 00:11:44,479
or

298
00:11:41,120 --> 00:11:47,519
around or stop gaps so instead of using

299
00:11:44,480 --> 00:11:49,040
the get currency group id this bpf

300
00:11:47,519 --> 00:11:50,160
helper function that is not available on

301
00:11:49,040 --> 00:11:53,360
older kernels

302
00:11:50,160 --> 00:11:57,120
i use some custom way to get

303
00:11:53,360 --> 00:11:57,680
the id of name spaces or linux name

304
00:11:57,120 --> 00:11:59,920
spaces

305
00:11:57,680 --> 00:12:01,120
and then i find that to identify which

306
00:11:59,920 --> 00:12:04,319
container i am

307
00:12:01,120 --> 00:12:07,760
looking at um i don't have

308
00:12:04,320 --> 00:12:11,839
ci hooks so i cannot add

309
00:12:07,760 --> 00:12:14,959
a new module bpf module for each pod

310
00:12:11,839 --> 00:12:17,360
at the beginning of the container

311
00:12:14,959 --> 00:12:19,119
and i cannot really use the kubernetes

312
00:12:17,360 --> 00:12:20,160
api to discover a new container because

313
00:12:19,120 --> 00:12:22,959
that will be too late

314
00:12:20,160 --> 00:12:24,079
by the time i get the notification from

315
00:12:22,959 --> 00:12:26,479
the kubernetes api

316
00:12:24,079 --> 00:12:27,839
or for the docker api the container is

317
00:12:26,480 --> 00:12:29,519
already running it's already doing

318
00:12:27,839 --> 00:12:32,160
something scrolls so i will i will not

319
00:12:29,519 --> 00:12:34,560
catch the very first system calls

320
00:12:32,160 --> 00:12:35,439
so um that was an important use case for

321
00:12:34,560 --> 00:12:37,279
me to be able to

322
00:12:35,440 --> 00:12:39,200
twist the very first system calls

323
00:12:37,279 --> 00:12:41,279
because maybe this container

324
00:12:39,200 --> 00:12:44,560
crash crashed in the very first second

325
00:12:41,279 --> 00:12:48,560
and i want to be able to debug that

326
00:12:44,560 --> 00:12:51,119
so instead i have a pool of

327
00:12:48,560 --> 00:12:52,000
bpf modules that are preloaded on the

328
00:12:51,120 --> 00:12:55,279
dynamically

329
00:12:52,000 --> 00:12:56,480
in bpf link them to a new secret as they

330
00:12:55,279 --> 00:12:58,720
appear

331
00:12:56,480 --> 00:13:00,399
at this time i don't really know yet

332
00:12:58,720 --> 00:13:02,240
which kubernetes levels there

333
00:13:00,399 --> 00:13:04,320
or which pods which container they are

334
00:13:02,240 --> 00:13:08,560
but we can still reconcile that

335
00:13:04,320 --> 00:13:08,560
a bit later when i get the notification

336
00:13:09,600 --> 00:13:13,200
so so far talk about trace loop which is

337
00:13:12,160 --> 00:13:16,240
one gadget of

338
00:13:13,200 --> 00:13:18,959
inspector gadget there are other gadgets

339
00:13:16,240 --> 00:13:20,720
for different use case some for

340
00:13:18,959 --> 00:13:23,279
debugging your applications

341
00:13:20,720 --> 00:13:24,720
some ideas which are not finished yet

342
00:13:23,279 --> 00:13:27,600
this work in progress

343
00:13:24,720 --> 00:13:30,320
i want to be able to see what network

344
00:13:27,600 --> 00:13:30,320
connections my

345
00:13:30,639 --> 00:13:36,480
my pod is running and be able to help a

346
00:13:34,160 --> 00:13:39,519
developer to write network releases

347
00:13:36,480 --> 00:13:41,199
um yeah it's like doing security as an

348
00:13:39,519 --> 00:13:42,959
afterthought sometimes

349
00:13:41,199 --> 00:13:44,319
we have a we develop an application we

350
00:13:42,959 --> 00:13:46,160
think about security later

351
00:13:44,320 --> 00:13:47,440
and then we think oh we should maybe add

352
00:13:46,160 --> 00:13:50,719
some network policies or

353
00:13:47,440 --> 00:13:52,160
some psp or something like that but when

354
00:13:50,720 --> 00:13:53,839
the application is already developed we

355
00:13:52,160 --> 00:13:55,680
forgot other architecture and it's

356
00:13:53,839 --> 00:13:58,800
kind of useful to discover what it's

357
00:13:55,680 --> 00:14:01,439
doing and suggest to the developer

358
00:13:58,800 --> 00:14:02,880
network releases so that's not finished

359
00:14:01,440 --> 00:14:05,199
work but that's something i would like

360
00:14:02,880 --> 00:14:05,199
to have

361
00:14:05,279 --> 00:14:09,199
um i will just do a demo of uh exact

362
00:14:07,920 --> 00:14:11,599
snoop on

363
00:14:09,199 --> 00:14:13,439
open snoop that are tool that come from

364
00:14:11,600 --> 00:14:18,240
bcc so i just

365
00:14:13,440 --> 00:14:18,240
took the bcc scripts

366
00:14:19,760 --> 00:14:25,760
so i have the same kubernetes cluster

367
00:14:23,199 --> 00:14:27,359
and here i will inspect a gadget exact

368
00:14:25,760 --> 00:14:31,600
snoop and i will specify

369
00:14:27,360 --> 00:14:34,880
the label of the pod i want to trace

370
00:14:31,600 --> 00:14:39,519
and here on my three node cluster

371
00:14:34,880 --> 00:14:42,839
i will get every new process that has

372
00:14:39,519 --> 00:14:45,839
executed with i will say that with exact

373
00:14:42,839 --> 00:14:45,839
snoop

374
00:14:46,079 --> 00:14:51,439
okay i have the same thing with open

375
00:14:49,120 --> 00:14:51,440
snoop

376
00:14:52,560 --> 00:14:56,839
it does trace every time i open a new

377
00:14:55,600 --> 00:15:00,079
file

378
00:14:56,839 --> 00:15:02,560
so since i run some

379
00:15:00,079 --> 00:15:03,199
shell script issues libsy and so on and

380
00:15:02,560 --> 00:15:05,920
it opens

381
00:15:03,199 --> 00:15:05,920
different file

382
00:15:06,240 --> 00:15:13,440
okay to be able to do that

383
00:15:10,959 --> 00:15:15,359
i use something i call the gadget tracer

384
00:15:13,440 --> 00:15:17,440
manager

385
00:15:15,360 --> 00:15:18,720
um this is the thing i want to be able

386
00:15:17,440 --> 00:15:20,880
to

387
00:15:18,720 --> 00:15:22,160
filter on so usually i don't want to

388
00:15:20,880 --> 00:15:23,439
filter

389
00:15:22,160 --> 00:15:25,600
to get the information from all the

390
00:15:23,440 --> 00:15:28,000
polls always but i will select

391
00:15:25,600 --> 00:15:28,720
either with kubernetes label or on the

392
00:15:28,000 --> 00:15:31,120
specific

393
00:15:28,720 --> 00:15:31,839
kubernetes namespace or pawn name or

394
00:15:31,120 --> 00:15:34,079
node or

395
00:15:31,839 --> 00:15:36,959
container index when there are several

396
00:15:34,079 --> 00:15:39,040
containers in the same board

397
00:15:36,959 --> 00:15:41,279
so there are all the different way to

398
00:15:39,040 --> 00:15:43,120
filter things

399
00:15:41,279 --> 00:15:45,680
filtering by label is quite important to

400
00:15:43,120 --> 00:15:47,920
me because usually when you deploy a pod

401
00:15:45,680 --> 00:15:49,758
using a deployment on kubernetes you

402
00:15:47,920 --> 00:15:53,120
don't know in advance which

403
00:15:49,759 --> 00:15:55,839
what is the name of the problem because

404
00:15:53,120 --> 00:15:57,199
kubernetes we create the name with a

405
00:15:55,839 --> 00:15:59,279
random

406
00:15:57,199 --> 00:16:00,959
suffix so i don't know the name of the

407
00:15:59,279 --> 00:16:03,120
pod in advance and if i want to trace

408
00:16:00,959 --> 00:16:06,079
the very first system call

409
00:16:03,120 --> 00:16:06,959
i need to be able to to filter in other

410
00:16:06,079 --> 00:16:10,079
ways so i use

411
00:16:06,959 --> 00:16:12,239
labels and

412
00:16:10,079 --> 00:16:13,279
so pods can come and go i don't know the

413
00:16:12,240 --> 00:16:15,279
end in advance

414
00:16:13,279 --> 00:16:16,480
on the tracer can come and go too and i

415
00:16:15,279 --> 00:16:17,920
need a system to

416
00:16:16,480 --> 00:16:19,600
link them together for example this

417
00:16:17,920 --> 00:16:21,920
tracer will

418
00:16:19,600 --> 00:16:22,720
get this information from those two

419
00:16:21,920 --> 00:16:25,599
parts

420
00:16:22,720 --> 00:16:25,920
but not the third one and so on so for

421
00:16:25,600 --> 00:16:27,759
that

422
00:16:25,920 --> 00:16:29,279
the gadgets pressure manager is just a

423
00:16:27,759 --> 00:16:32,880
demand which has a

424
00:16:29,279 --> 00:16:33,920
grpc api and some method to add or

425
00:16:32,880 --> 00:16:37,199
remove

426
00:16:33,920 --> 00:16:39,519
containers or tracers

427
00:16:37,199 --> 00:16:40,959
so here i use oci hook press start every

428
00:16:39,519 --> 00:16:43,440
time there is a new container i

429
00:16:40,959 --> 00:16:44,719
had tell the tracer manager that there

430
00:16:43,440 --> 00:16:47,920
is a new container

431
00:16:44,720 --> 00:16:51,279
or when one stop and

432
00:16:47,920 --> 00:16:54,319
whenever an inspector gadget with some

433
00:16:51,279 --> 00:16:56,240
gadget um it will

434
00:16:54,320 --> 00:16:57,759
tell the jet fashion manager then there

435
00:16:56,240 --> 00:17:00,800
is a new tracer or

436
00:16:57,759 --> 00:17:02,320
one is stopped and what the tracer

437
00:17:00,800 --> 00:17:05,839
manager will do is to update

438
00:17:02,320 --> 00:17:06,160
bpf maps so there is one for each tracer

439
00:17:05,839 --> 00:17:10,000
and

440
00:17:06,160 --> 00:17:12,959
this map contains the list of c groups

441
00:17:10,000 --> 00:17:13,679
that the tracer should trace so the list

442
00:17:12,959 --> 00:17:17,520
of containers

443
00:17:13,679 --> 00:17:20,559
basically and then when around

444
00:17:17,520 --> 00:17:24,400
bcc scripts like a exact snoop

445
00:17:20,559 --> 00:17:26,799
i will specify which

446
00:17:24,400 --> 00:17:27,520
which bpf map to look at to know which c

447
00:17:26,799 --> 00:17:32,400
groups

448
00:17:27,520 --> 00:17:36,559
to trace basically to know which

449
00:17:32,400 --> 00:17:36,559
or container levels i want to trace

450
00:17:36,720 --> 00:17:40,000
um so if you want to contribute to those

451
00:17:39,200 --> 00:17:43,600
um i

452
00:17:40,000 --> 00:17:46,000
just created a couple of

453
00:17:43,600 --> 00:17:47,039
labels so there are some issues with a

454
00:17:46,000 --> 00:17:50,559
good first issue

455
00:17:47,039 --> 00:17:53,360
level on github that's things that are

456
00:17:50,559 --> 00:17:55,678
a bit more easier are unbeatable to help

457
00:17:53,360 --> 00:17:57,439
and there is this new inspector gadget

458
00:17:55,679 --> 00:18:00,480
slack channel that you can join and we

459
00:17:57,440 --> 00:18:02,600
can talk there as well

460
00:18:00,480 --> 00:18:11,869
thank you for now

461
00:18:02,600 --> 00:18:11,869
[Applause]

462
00:18:12,840 --> 00:18:15,840
yep

463
00:18:16,000 --> 00:18:19,919
so alvin you you mentioned your

464
00:18:17,919 --> 00:18:21,919
locomotive distribution

465
00:18:19,919 --> 00:18:23,120
so what do you need what you need that

466
00:18:21,919 --> 00:18:25,440
for

467
00:18:23,120 --> 00:18:27,199
is there anything you could can do with

468
00:18:25,440 --> 00:18:28,640
that with you cannot do with anything

469
00:18:27,200 --> 00:18:30,320
else

470
00:18:28,640 --> 00:18:32,640
um so it doesn't have anything magic

471
00:18:30,320 --> 00:18:35,840
that's just normal linux technology

472
00:18:32,640 --> 00:18:37,440
uh traceloop works on others or older

473
00:18:35,840 --> 00:18:40,480
kernels as well

474
00:18:37,440 --> 00:18:40,880
but for for the other gadgets i need the

475
00:18:40,480 --> 00:18:44,880
last

476
00:18:40,880 --> 00:18:44,880
latest bpf helper

477
00:18:45,039 --> 00:18:53,520
functions such as get

478
00:18:48,240 --> 00:18:53,520
gets group current id and i need

479
00:18:53,760 --> 00:19:00,559
i did some hacking run c to be able to

480
00:18:57,120 --> 00:19:03,600
add and remove those vi hooks that

481
00:19:00,559 --> 00:19:05,360
they are working progress in cryo on

482
00:19:03,600 --> 00:19:07,280
container d i think to be able to

483
00:19:05,360 --> 00:19:09,439
configure that but at the moment it's

484
00:19:07,280 --> 00:19:12,639
done in a

485
00:19:09,440 --> 00:19:15,039
 way until we get that upstream

486
00:19:12,640 --> 00:19:16,640
uh so they are on i use uh single

487
00:19:15,039 --> 00:19:18,960
version two as well

488
00:19:16,640 --> 00:19:21,360
um enabled by default so each container

489
00:19:18,960 --> 00:19:23,039
is in a different secret version too

490
00:19:21,360 --> 00:19:26,159
which might not be the case if you are

491
00:19:23,039 --> 00:19:28,240
running other kubernetes distribution

492
00:19:26,160 --> 00:19:29,840
but although all of that there are linux

493
00:19:28,240 --> 00:19:31,039
technologies so you can enable them

494
00:19:29,840 --> 00:19:33,600
elsewhere as well there is nothing

495
00:19:31,039 --> 00:19:36,960
really specific to

496
00:19:33,600 --> 00:19:52,240
locomotive or kubernetes distribution

497
00:19:36,960 --> 00:19:52,240
okay thank you

