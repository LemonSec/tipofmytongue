1
00:00:05,020 --> 00:00:10,840
hello everyone let's welcome our next

2
00:00:07,700 --> 00:00:13,730
speaker in security room on FOSDEM

3
00:00:10,840 --> 00:00:15,710
it's looking rabbits and his talk about

4
00:00:13,730 --> 00:00:18,309
selenium juice container and time so as

5
00:00:15,710 --> 00:00:18,309
welcome Akash

6
00:00:21,369 --> 00:00:27,710
so can you hear me fine okay before we

7
00:00:25,610 --> 00:00:29,300
start with the presentation I have one

8
00:00:27,710 --> 00:00:32,899
question for you how many of you know

9
00:00:29,300 --> 00:00:36,110
s-silly nooks so many people

10
00:00:32,899 --> 00:00:38,030
okay that's great so that'll be the

11
00:00:36,110 --> 00:00:42,109
introduction my name is Mukesh rabbit

12
00:00:38,030 --> 00:00:43,969
I'm still enough evangelist redheads I'm

13
00:00:42,109 --> 00:00:47,120
called some people already call me that

14
00:00:43,969 --> 00:00:50,059
I member of security technologies team

15
00:00:47,120 --> 00:00:52,218
at redhead and I morale and Fedora

16
00:00:50,059 --> 00:00:54,559
contributor to following packages which

17
00:00:52,219 --> 00:00:59,179
is selinux policy eggs guests

18
00:00:54,559 --> 00:01:01,160
Jude Itza and net label tools here are

19
00:00:59,179 --> 00:01:03,499
my here is my blog post is very

20
00:01:01,160 --> 00:01:06,170
interested in some it in some city east

21
00:01:03,499 --> 00:01:08,050
and house estelí nooks mitigate them you

22
00:01:06,170 --> 00:01:13,340
can find some interesting blog post and

23
00:01:08,050 --> 00:01:17,030
github link and also Twitter so why we

24
00:01:13,340 --> 00:01:20,990
are here I'll use a nice example of one

25
00:01:17,030 --> 00:01:24,710
of my colleagues from last week and in

26
00:01:20,990 --> 00:01:28,100
one open ship cluster the SEO Linux is

27
00:01:24,710 --> 00:01:32,330
enforced by default on this cluster

28
00:01:28,100 --> 00:01:38,389
there are almost 200 pots running more

29
00:01:32,330 --> 00:01:40,670
than 600 containers and 100 and 130 for

30
00:01:38,390 --> 00:01:42,860
containers run as privileged in this

31
00:01:40,670 --> 00:01:47,180
case I mean there is no s Linux is

32
00:01:42,860 --> 00:01:50,630
isolation for them and 134 is so many

33
00:01:47,180 --> 00:01:53,000
containers right so privileged

34
00:01:50,630 --> 00:01:54,830
containers are really scary and today I

35
00:01:53,000 --> 00:01:57,200
would like to teach you how you can

36
00:01:54,830 --> 00:02:02,090
generate X Linux policy for every

37
00:01:57,200 --> 00:02:04,910
container so quick introduction to Linux

38
00:02:02,090 --> 00:02:06,970
I make you as Linux experts in less than

39
00:02:04,910 --> 00:02:11,200
5 minutes hopefully

40
00:02:06,970 --> 00:02:13,370
so as Linux you probably know it is

41
00:02:11,200 --> 00:02:15,950
implementation of mandatory access

42
00:02:13,370 --> 00:02:17,770
control but we can say it's a process

43
00:02:15,950 --> 00:02:20,780
isolation

44
00:02:17,770 --> 00:02:22,989
technology for mitigate processes for to

45
00:02:20,780 --> 00:02:26,450
mitigate attacks by a privilege

46
00:02:22,989 --> 00:02:29,800
escalation one of the most important

47
00:02:26,450 --> 00:02:32,030
things you need to know are labels right

48
00:02:29,800 --> 00:02:34,459
in this case there are two examples

49
00:02:32,030 --> 00:02:37,610
container underscore team and container

50
00:02:34,459 --> 00:02:41,150
file underscore t these labels are

51
00:02:37,610 --> 00:02:43,610
assigned to processes or to system

52
00:02:41,150 --> 00:02:47,840
resources a system resource could be

53
00:02:43,610 --> 00:02:53,180
directory file symlink socket and many

54
00:02:47,840 --> 00:02:56,420
mores and this these labels are assigned

55
00:02:53,180 --> 00:02:59,209
to two processes and system resources by

56
00:02:56,420 --> 00:03:02,600
SELinux security policy

57
00:02:59,209 --> 00:03:06,110
so how labels looks like in reality for

58
00:03:02,600 --> 00:03:08,569
their store related to system resources

59
00:03:06,110 --> 00:03:12,319
they are stolen extended attributes of

60
00:03:08,569 --> 00:03:15,708
the file system for example X 2 X 3 and

61
00:03:12,319 --> 00:03:18,560
X 4 there are two ways how you can see

62
00:03:15,709 --> 00:03:22,519
the Esalen of label of some specific

63
00:03:18,560 --> 00:03:26,480
file in this case its / HC / password

64
00:03:22,519 --> 00:03:29,540
and as you can see the the whole isalean

65
00:03:26,480 --> 00:03:31,790
ops label is what is what is written in

66
00:03:29,540 --> 00:03:34,130
red but in this case we are interested

67
00:03:31,790 --> 00:03:37,010
only about the type with is the third

68
00:03:34,130 --> 00:03:41,690
part of the label which is passport

69
00:03:37,010 --> 00:03:44,660
underscore file underscore t so for four

70
00:03:41,690 --> 00:03:46,640
processes we can use a parameter capital

71
00:03:44,660 --> 00:03:49,820
Z for PS command

72
00:03:46,640 --> 00:03:52,309
and if we want to grab some label of

73
00:03:49,820 --> 00:03:54,200
container you can see that in the

74
00:03:52,310 --> 00:03:57,380
example there are three containers and

75
00:03:54,200 --> 00:03:59,140
each container has same 'silly nooks

76
00:03:57,380 --> 00:04:04,910
selinux type which is container

77
00:03:59,140 --> 00:04:06,768
underscore t which is here s Linux

78
00:04:04,910 --> 00:04:09,459
security policy describes the

79
00:04:06,769 --> 00:04:13,370
interaction between the processes and

80
00:04:09,459 --> 00:04:17,030
system resources right and we are using

81
00:04:13,370 --> 00:04:19,399
for the interaction allow rules and this

82
00:04:17,029 --> 00:04:21,500
is the example of the of the lro the

83
00:04:19,399 --> 00:04:22,159
first is keyword allowed that's quite

84
00:04:21,500 --> 00:04:24,370
clear

85
00:04:22,160 --> 00:04:30,229
the second thing saying that any process

86
00:04:24,370 --> 00:04:30,930
labeled as contain underscore P can read

87
00:04:30,229 --> 00:04:34,320
Oh

88
00:04:30,930 --> 00:04:36,870
pen and get a tribute of files labeled

89
00:04:34,320 --> 00:04:40,560
as container underscore file underscore

90
00:04:36,870 --> 00:04:43,949
team and the import what is important to

91
00:04:40,560 --> 00:04:45,900
say also that everything everything is

92
00:04:43,949 --> 00:04:49,470
denied by default so if you need to have

93
00:04:45,900 --> 00:04:51,508
explicitly allow rule inside the SELinux

94
00:04:49,470 --> 00:04:53,930
policy which is loaded to kernel to

95
00:04:51,509 --> 00:04:55,860
allow some to allow some Cisco and

96
00:04:53,930 --> 00:04:57,840
basically that's it you are now a

97
00:04:55,860 --> 00:05:02,009
salinas experts and that's all you need

98
00:04:57,840 --> 00:05:05,219
to know for generating SOS policies for

99
00:05:02,009 --> 00:05:09,050
containers of course okay so now we will

100
00:05:05,220 --> 00:05:12,419
talk about generic selinux policy for

101
00:05:09,050 --> 00:05:14,820
for each container without some custom

102
00:05:12,419 --> 00:05:17,909
SELinux policy we use the default one

103
00:05:14,820 --> 00:05:21,030
which is container underscore team this

104
00:05:17,910 --> 00:05:23,449
policy protects the host system from the

105
00:05:21,030 --> 00:05:28,469
container from the container processes

106
00:05:23,449 --> 00:05:32,099
and processes or containers in with this

107
00:05:28,470 --> 00:05:35,130
SOA Knox policy can only read or execute

108
00:05:32,099 --> 00:05:39,139
a files in slash user and these

109
00:05:35,130 --> 00:05:43,710
container processes can only read to

110
00:05:39,139 --> 00:05:45,750
sorry only bright to container files as

111
00:05:43,710 --> 00:05:47,969
I show you process type that's quite

112
00:05:45,750 --> 00:05:51,090
simple that's container with container

113
00:05:47,970 --> 00:05:54,060
underscore t SL a new label and file is

114
00:05:51,090 --> 00:05:55,948
every file and directory on the on the

115
00:05:54,060 --> 00:05:59,870
on the host file system labeled as

116
00:05:55,949 --> 00:06:03,330
container underscore file underscore P

117
00:05:59,870 --> 00:06:05,970
so this is this is really really nice

118
00:06:03,330 --> 00:06:08,940
light I really like it there these are

119
00:06:05,970 --> 00:06:11,940
the list just few of them few of CV is

120
00:06:08,940 --> 00:06:14,880
of container runtimes when there was a

121
00:06:11,940 --> 00:06:17,219
possibility that the process inside the

122
00:06:14,880 --> 00:06:19,349
container could could escape from

123
00:06:17,220 --> 00:06:21,479
container to the hosts file system and

124
00:06:19,349 --> 00:06:24,599
in several cases gets root access

125
00:06:21,479 --> 00:06:28,949
so anouk's blocked all of them the

126
00:06:24,599 --> 00:06:30,810
latest one is from February 2019 Vanessa

127
00:06:28,949 --> 00:06:36,810
Linux completely blocked this type of

128
00:06:30,810 --> 00:06:39,389
attack yep I say that okay so what about

129
00:06:36,810 --> 00:06:42,810
containers attacking each other for this

130
00:06:39,389 --> 00:06:45,510
we have also solution and it's a multi

131
00:06:42,810 --> 00:06:48,900
category security which is part of

132
00:06:45,510 --> 00:06:51,630
multi-level security so this is the way

133
00:06:48,900 --> 00:06:55,770
how it works with MCS we have two

134
00:06:51,630 --> 00:06:57,060
containers both of them has same asila

135
00:06:55,770 --> 00:06:59,370
noobs label which is container

136
00:06:57,060 --> 00:07:03,240
underscore tea by the categories are

137
00:06:59,370 --> 00:07:06,930
different first one has category C 1 and

138
00:07:03,240 --> 00:07:10,260
C 2 second one category C 2 and C 3 in

139
00:07:06,930 --> 00:07:12,420
the middle there are 3-3 files which

140
00:07:10,260 --> 00:07:14,190
same as Celine Celine ox type which is

141
00:07:12,420 --> 00:07:17,820
container underscore file underscore

142
00:07:14,190 --> 00:07:21,900
underscore t and as we can see following

143
00:07:17,820 --> 00:07:25,950
container can access this file because C

144
00:07:21,900 --> 00:07:29,310
2 and C 1 and C 2 is subset of C 1 and C

145
00:07:25,950 --> 00:07:31,950
2 what is interesting that file in the

146
00:07:29,310 --> 00:07:34,590
middle doesn't have any category and

147
00:07:31,950 --> 00:07:40,140
empty set is also subset of C 1 and C 2

148
00:07:34,590 --> 00:07:42,419
and same situation for C 2 and C 3 so

149
00:07:40,140 --> 00:07:45,330
this is very how we are isolating

150
00:07:42,420 --> 00:07:48,930
containers between each other please

151
00:07:45,330 --> 00:07:52,859
this is the same same slide but arrows

152
00:07:48,930 --> 00:08:00,870
showing what is not allowed so C 1 and C

153
00:07:52,860 --> 00:08:04,260
2 is not subset of C 2 and C 3 so you

154
00:08:00,870 --> 00:08:06,930
can ask how you can label some some

155
00:08:04,260 --> 00:08:10,110
directory as container underscore file

156
00:08:06,930 --> 00:08:12,900
underscore T container content around

157
00:08:10,110 --> 00:08:16,350
times has a really nice feature it's for

158
00:08:12,900 --> 00:08:18,929
sure supported in pod man and I'm pretty

159
00:08:16,350 --> 00:08:21,330
sure that is also in docker that if you

160
00:08:18,930 --> 00:08:24,720
if you starting some specific container

161
00:08:21,330 --> 00:08:28,050
you can by mouth for example in in the

162
00:08:24,720 --> 00:08:30,930
example slash var slash slash MariaDB

163
00:08:28,050 --> 00:08:34,409
and you put parameter capital Z so

164
00:08:30,930 --> 00:08:37,229
container runtime engine be reliable on

165
00:08:34,409 --> 00:08:39,510
the host system this directory to

166
00:08:37,229 --> 00:08:41,880
container underscore file underscore T

167
00:08:39,510 --> 00:08:44,550
also with the with the same categories

168
00:08:41,880 --> 00:08:47,610
like running container has that's

169
00:08:44,550 --> 00:08:50,040
because of the capital Z here if you

170
00:08:47,610 --> 00:08:53,600
want to have two containers and you want

171
00:08:50,040 --> 00:08:56,930
to share the same directory you can put

172
00:08:53,600 --> 00:08:59,870
small Z which means the grandpa

173
00:08:56,930 --> 00:09:01,430
the the engine just reliable reliable

174
00:08:59,870 --> 00:09:03,470
this directory has contained an

175
00:09:01,430 --> 00:09:08,180
underscore file underscore t with no

176
00:09:03,470 --> 00:09:10,790
specific categories so of course this

177
00:09:08,180 --> 00:09:14,359
solution has several problems the first

178
00:09:10,790 --> 00:09:16,969
one is that one generic default assumes

179
00:09:14,360 --> 00:09:19,750
policy for containers is too strict for

180
00:09:16,970 --> 00:09:22,640
for self certain cases for example

181
00:09:19,750 --> 00:09:25,550
federal civil group project needs

182
00:09:22,640 --> 00:09:28,460
container to read and write user home

183
00:09:25,550 --> 00:09:31,250
directories second one project flow and

184
00:09:28,460 --> 00:09:34,750
D needs to able to read locks stored in

185
00:09:31,250 --> 00:09:38,180
slash log slash mark on the host system

186
00:09:34,750 --> 00:09:40,940
there is another case when defaults

187
00:09:38,180 --> 00:09:43,849
Linux policy is too loose in certain

188
00:09:40,940 --> 00:09:45,710
cases there is no SLE nukes network

189
00:09:43,850 --> 00:09:49,400
controls which means that container can

190
00:09:45,710 --> 00:09:51,800
bind on any port and there is no SELinux

191
00:09:49,400 --> 00:09:53,930
container there is no SMS control for

192
00:09:51,800 --> 00:09:58,160
capabilities which means that running

193
00:09:53,930 --> 00:10:02,630
container has all Linux capabilities so

194
00:09:58,160 --> 00:10:04,279
we are able also to solve this so what's

195
00:10:02,630 --> 00:10:07,400
the current situation what can you do

196
00:10:04,279 --> 00:10:09,500
with with MCS and generic answer Linux

197
00:10:07,400 --> 00:10:11,300
policy let's say everyone to start

198
00:10:09,500 --> 00:10:14,740
container with flow and the project and

199
00:10:11,300 --> 00:10:17,689
we want to by mouth slash var slash log

200
00:10:14,740 --> 00:10:22,550
from from the host system and we use

201
00:10:17,690 --> 00:10:26,630
capital Z as a parameter it's here okay

202
00:10:22,550 --> 00:10:29,680
and this is not good actually it's

203
00:10:26,630 --> 00:10:32,450
pretty bad because all other confined

204
00:10:29,680 --> 00:10:35,150
services on the host system will not be

205
00:10:32,450 --> 00:10:37,430
able to write or read slash var slash

206
00:10:35,150 --> 00:10:39,890
log because the label will be container

207
00:10:37,430 --> 00:10:42,500
underscore file underscore T instead of

208
00:10:39,890 --> 00:10:46,790
var underscore log underscore T which is

209
00:10:42,500 --> 00:10:49,279
the default label for this path the

210
00:10:46,790 --> 00:10:52,370
worst situation what you can do you can

211
00:10:49,279 --> 00:10:55,240
use this egg eglee parameter which is

212
00:10:52,370 --> 00:10:58,279
here and basically you disable a

213
00:10:55,240 --> 00:11:02,170
'selenic separation for that container

214
00:10:58,279 --> 00:11:04,970
so this is the worst what you can do so

215
00:11:02,170 --> 00:11:07,010
solutions you can write completely new

216
00:11:04,970 --> 00:11:10,130
SOE knocks policy for your custom

217
00:11:07,010 --> 00:11:12,259
container but this is the best solution

218
00:11:10,130 --> 00:11:14,269
but it's really too difficult right for

219
00:11:12,259 --> 00:11:16,730
system administrator because you need to

220
00:11:14,269 --> 00:11:19,790
have let's be honest quite good Ursula

221
00:11:16,730 --> 00:11:22,579
noobs expertise the second thing what

222
00:11:19,790 --> 00:11:24,439
you can do is to add additional asila

223
00:11:22,579 --> 00:11:27,380
noobs rule for the container underscore

224
00:11:24,440 --> 00:11:29,509
t type this is Toni that I do because

225
00:11:27,380 --> 00:11:32,540
you need to know how to write a so annex

226
00:11:29,509 --> 00:11:34,940
policy and also these additional rules

227
00:11:32,540 --> 00:11:39,699
will apply for all containers on your

228
00:11:34,940 --> 00:11:44,060
system not to just your custom container

229
00:11:39,699 --> 00:11:46,790
so to solve all these issues there is a

230
00:11:44,060 --> 00:11:50,079
would it'sa project actually who did

231
00:11:46,790 --> 00:11:52,870
salmon fishing route in in slower and

232
00:11:50,079 --> 00:11:56,269
who did sighs a tool for generating

233
00:11:52,870 --> 00:12:01,670
Esalen of security profiles or policies

234
00:11:56,269 --> 00:12:04,250
for containers so the best way how to

235
00:12:01,670 --> 00:12:06,469
how to describe you it'sa let's use

236
00:12:04,250 --> 00:12:09,529
let's use for a big example let's start

237
00:12:06,470 --> 00:12:11,870
the container mounting slash home with

238
00:12:09,529 --> 00:12:15,100
permissions read and write let's mount

239
00:12:11,870 --> 00:12:19,209
slash var slash with read-only

240
00:12:15,100 --> 00:12:24,170
permissions and let's expose expose port

241
00:12:19,209 --> 00:12:27,319
2021 so as I told you generic answer

242
00:12:24,170 --> 00:12:30,500
Linux policy cannot read and write slash

243
00:12:27,319 --> 00:12:31,790
home as soon area Sonic's policy cannot

244
00:12:30,500 --> 00:12:34,519
read slash var slash

245
00:12:31,790 --> 00:12:39,050
for containers but on the other hand can

246
00:12:34,519 --> 00:12:41,149
expose all ports so I'm brave brave

247
00:12:39,050 --> 00:12:44,540
enough to show you live demo but let's

248
00:12:41,149 --> 00:12:46,670
let's finish the slides and and then I

249
00:12:44,540 --> 00:12:49,250
show you the demo but what will be there

250
00:12:46,670 --> 00:12:51,560
is we start the container with the with

251
00:12:49,250 --> 00:12:55,310
the by mounts and ports as I described

252
00:12:51,560 --> 00:12:58,339
then we only run inspection of the

253
00:12:55,310 --> 00:13:01,489
lightest started container which is here

254
00:12:58,339 --> 00:13:03,560
and would it's app you'll generate

255
00:13:01,490 --> 00:13:06,259
Esalen ox policy based on the inspection

256
00:13:03,560 --> 00:13:09,888
of container with name my underscore

257
00:13:06,259 --> 00:13:12,230
container which it's a such as the

258
00:13:09,889 --> 00:13:14,990
recommends to load for Vanessa Linux

259
00:13:12,230 --> 00:13:18,620
policies which is this load current

260
00:13:14,990 --> 00:13:20,959
we just restart we just restart in the

261
00:13:18,620 --> 00:13:23,120
container with with the following

262
00:13:20,959 --> 00:13:23,810
parameter where we are basically saying

263
00:13:23,120 --> 00:13:26,750
to

264
00:13:23,810 --> 00:13:29,630
not to use generic gasoline looks policy

265
00:13:26,750 --> 00:13:32,180
container underscore t but our which is

266
00:13:29,630 --> 00:13:36,830
michael underscore container dot

267
00:13:32,180 --> 00:13:39,529
processed and that's it then just just

268
00:13:36,830 --> 00:13:42,470
to prove it when we run PS we will see

269
00:13:39,529 --> 00:13:46,160
that our container is running with it

270
00:13:42,470 --> 00:13:48,440
with Avenue a saline with label so how

271
00:13:46,160 --> 00:13:51,410
it looks like what what wants under the

272
00:13:48,440 --> 00:13:54,440
hood so the whole concept here is based

273
00:13:51,410 --> 00:13:57,560
on the block inheritance feature in SIL

274
00:13:54,440 --> 00:14:00,710
language where would it suck creates or

275
00:13:57,560 --> 00:14:03,469
come behind in rules from predefined

276
00:14:00,710 --> 00:14:06,110
sealed blocks or we can say templates so

277
00:14:03,470 --> 00:14:08,000
with its inspects inspects container and

278
00:14:06,110 --> 00:14:12,110
looking for mouths ports and

279
00:14:08,000 --> 00:14:14,240
capabilities and combines these

280
00:14:12,110 --> 00:14:16,250
predefined blocks with with with the

281
00:14:14,240 --> 00:14:21,050
base valve which is based underscore

282
00:14:16,250 --> 00:14:24,140
container underscore sorry dot seal so

283
00:14:21,050 --> 00:14:27,560
this is the way we will use the base a

284
00:14:24,140 --> 00:14:30,050
block which is needed for reading and

285
00:14:27,560 --> 00:14:33,290
executing files in slash user and

286
00:14:30,050 --> 00:14:38,300
reading configuration file in slash at

287
00:14:33,290 --> 00:14:42,199
sea then we will use net block which we

288
00:14:38,300 --> 00:14:44,449
need for by Dingaan for biting on TCP

289
00:14:42,200 --> 00:14:47,780
port 21 which is labeled as FTP

290
00:14:44,450 --> 00:14:50,570
underscore port and next block is home

291
00:14:47,780 --> 00:14:54,949
which we need for reading and writing to

292
00:14:50,570 --> 00:14:57,770
user home directories Odessa basically

293
00:14:54,950 --> 00:15:00,530
inherits allow rules inside these blocks

294
00:14:57,770 --> 00:15:05,390
and generate new acelino policy with the

295
00:15:00,530 --> 00:15:08,360
name my container we also mount slash

296
00:15:05,390 --> 00:15:10,970
var slash all right inside the container

297
00:15:08,360 --> 00:15:13,430
but for this there is no predefined

298
00:15:10,970 --> 00:15:16,430
block so what would each I can do is to

299
00:15:13,430 --> 00:15:19,910
look to directory slash var slash

300
00:15:16,430 --> 00:15:22,400
all possible cellino's labels which

301
00:15:19,910 --> 00:15:25,910
could be inside this directory generate

302
00:15:22,400 --> 00:15:28,160
generate block in this case let's call

303
00:15:25,910 --> 00:15:30,380
it spool and again inherits all these

304
00:15:28,160 --> 00:15:32,540
allow rules to arrest Linux policy and

305
00:15:30,380 --> 00:15:35,360
that's it

306
00:15:32,540 --> 00:15:36,899
this kind of generated as Linux policy

307
00:15:35,360 --> 00:15:39,300
you can use with for all

308
00:15:36,899 --> 00:15:40,079
following run times which is bottom and

309
00:15:39,300 --> 00:15:45,389
docker

310
00:15:40,079 --> 00:15:47,969
buildup and also kubernetes so these are

311
00:15:45,389 --> 00:15:54,540
the these are the slice slide so let's

312
00:15:47,970 --> 00:15:58,050
let's try it with demo ok so I installed

313
00:15:54,540 --> 00:16:00,029
can you see it good perfect

314
00:15:58,050 --> 00:16:03,269
so I install all necessary packages

315
00:16:00,029 --> 00:16:06,689
which is good it's a pod man and settles

316
00:16:03,269 --> 00:16:08,999
I tell you what it settles in the moment

317
00:16:06,689 --> 00:16:10,949
so let's check what's the s Sulli looks

318
00:16:08,999 --> 00:16:15,480
the status on this system

319
00:16:10,949 --> 00:16:18,529
hopefully it's it's enforcing ok cool so

320
00:16:15,480 --> 00:16:21,480
we have a solution enforcing let's start

321
00:16:18,529 --> 00:16:24,959
reached I'll start the container from

322
00:16:21,480 --> 00:16:31,079
the example so we are mounting slash

323
00:16:24,959 --> 00:16:34,859
home slash var spool and exposing 421 ok

324
00:16:31,079 --> 00:16:37,199
container is started and we we see that

325
00:16:34,860 --> 00:16:40,410
Esalen of label of the count of the

326
00:16:37,199 --> 00:16:42,719
container is containing underscore t sub

327
00:16:40,410 --> 00:16:45,540
sorry it's here and here are the random

328
00:16:42,720 --> 00:16:49,139
randomly generated randomly generated

329
00:16:45,540 --> 00:16:52,349
containers now you see it command se

330
00:16:49,139 --> 00:16:55,529
search basically I'm querying the LRO's

331
00:16:52,350 --> 00:16:58,110
inside the s Linux policy loaded into

332
00:16:55,529 --> 00:17:00,569
kernel if there is if there is a present

333
00:16:58,110 --> 00:17:02,730
allow rule the first one is related to

334
00:17:00,569 --> 00:17:05,668
slash home slash home has a cellino's

335
00:17:02,730 --> 00:17:07,679
label home underscore root underscore t

336
00:17:05,669 --> 00:17:10,020
and if there is no there is no output

337
00:17:07,679 --> 00:17:12,419
which means there is no LRO the same

338
00:17:10,020 --> 00:17:16,168
situation with the VAR spool that's

339
00:17:12,419 --> 00:17:18,419
pretty clear the pad has a salinity

340
00:17:16,169 --> 00:17:22,470
levels bar underscore spool underscore

341
00:17:18,419 --> 00:17:25,110
tee tee there is no there is no LRO but

342
00:17:22,470 --> 00:17:28,559
on the other hand for the port we can

343
00:17:25,109 --> 00:17:31,678
see that container which is part of

344
00:17:28,559 --> 00:17:37,668
these attributes can basically by mount

345
00:17:31,679 --> 00:17:42,919
on a solemn bind on any tcp any tcp

346
00:17:37,669 --> 00:17:47,909
ports another let's let's let's continue

347
00:17:42,919 --> 00:17:49,919
now we run wood itself so we need we

348
00:17:47,909 --> 00:17:50,400
need the inspection file of the of the

349
00:17:49,919 --> 00:17:52,710
lightest

350
00:17:50,400 --> 00:17:55,380
container put it to standard input of

351
00:17:52,710 --> 00:17:58,200
hood itza and the parameter is the name

352
00:17:55,380 --> 00:18:05,100
of the of the newest olynyk's policy so

353
00:17:58,200 --> 00:18:06,920
let's start it policy is created and did

354
00:18:05,100 --> 00:18:10,080
sir recommends to load following

355
00:18:06,920 --> 00:18:12,270
following templates and finalize the

356
00:18:10,080 --> 00:18:21,889
Linux policy for our container using

357
00:18:12,270 --> 00:18:27,230
command AC module so let's do that and

358
00:18:21,890 --> 00:18:27,230
we stopped the lightest container

359
00:18:30,260 --> 00:18:36,780
perfect and restart container again but

360
00:18:34,200 --> 00:18:39,140
with following following parameter which

361
00:18:36,780 --> 00:18:42,360
is which saying to start

362
00:18:39,140 --> 00:18:45,660
container with the with the following

363
00:18:42,360 --> 00:18:48,149
gasoline oops label and as we can see

364
00:18:45,660 --> 00:18:51,120
it's not running as container underscore

365
00:18:48,150 --> 00:18:54,540
T but it's our custom SELinux type and

366
00:18:51,120 --> 00:18:56,820
we are running again to se search and as

367
00:18:54,540 --> 00:19:01,980
we can see the allow rules are now there

368
00:18:56,820 --> 00:19:04,620
right so this this container can can

369
00:19:01,980 --> 00:19:08,790
read and write a directories under slash

370
00:19:04,620 --> 00:19:11,459
home can access to slash var slash and

371
00:19:08,790 --> 00:19:17,310
but again on the other hand can bind

372
00:19:11,460 --> 00:19:19,800
only on port label FTP underscore / on

373
00:19:17,310 --> 00:19:24,620
disk or T which is which is Esalen of

374
00:19:19,800 --> 00:19:27,629
label for TCP port 21 and basically

375
00:19:24,620 --> 00:19:29,699
that's it so now you are able to

376
00:19:27,630 --> 00:19:35,850
generate as so in ops policy really

377
00:19:29,700 --> 00:19:37,470
quickly so here are the links for

378
00:19:35,850 --> 00:19:40,110
widgets a for code meant if you are

379
00:19:37,470 --> 00:19:43,170
interested how it looks like the the

380
00:19:40,110 --> 00:19:47,429
inheritance in in in units ax you can

381
00:19:43,170 --> 00:19:49,620
look on on Woody's PLC and you have the

382
00:19:47,430 --> 00:19:52,300
links so that's it thank you and if you

383
00:19:49,620 --> 00:20:00,760
have any questions I'm ready

384
00:19:52,300 --> 00:20:00,760
[Applause]

385
00:20:02,240 --> 00:20:10,080
thanks for your talk now as a new

386
00:20:06,020 --> 00:20:11,550
selinux expert I was wondering why this

387
00:20:10,080 --> 00:20:13,649
you did sir part

388
00:20:11,550 --> 00:20:15,419
could this be in principle or some part

389
00:20:13,650 --> 00:20:17,640
of Portman I mean you're basically

390
00:20:15,420 --> 00:20:18,270
already passing all the information to

391
00:20:17,640 --> 00:20:20,460
part man

392
00:20:18,270 --> 00:20:23,700
the part to read read write and read the

393
00:20:20,460 --> 00:20:26,730
only stuff yes it's good point actually

394
00:20:23,700 --> 00:20:28,770
I discussed it with Padma Padma and

395
00:20:26,730 --> 00:20:32,640
maintain us to include it there but

396
00:20:28,770 --> 00:20:34,530
somehow aren't fortunately for me they

397
00:20:32,640 --> 00:20:43,860
agreed they did survey will be separate

398
00:20:34,530 --> 00:20:46,800
to pass we discussed that question about

399
00:20:43,860 --> 00:20:48,780
wobbling so you said that man is

400
00:20:46,800 --> 00:20:52,730
relabeling all the files in the

401
00:20:48,780 --> 00:20:55,379
container on container start not really

402
00:20:52,730 --> 00:20:57,480
excellence is not enabled inside the

403
00:20:55,380 --> 00:21:00,660
container right so the portman is

404
00:20:57,480 --> 00:21:03,690
enabling the stuff on the host level so

405
00:21:00,660 --> 00:21:05,580
which me it in in the host right so

406
00:21:03,690 --> 00:21:08,430
there is no esta Linux there is no as

407
00:21:05,580 --> 00:21:12,060
silly nooks that the container drinks a

408
00:21:08,430 --> 00:21:14,400
lot of file operation yes okay so for if

409
00:21:12,060 --> 00:21:17,610
container is like large first a lot of

410
00:21:14,400 --> 00:21:20,280
files its it would kind of slow yeah yes

411
00:21:17,610 --> 00:21:21,419
yes we know about this issue we discuss

412
00:21:20,280 --> 00:21:24,030
it recently

413
00:21:21,420 --> 00:21:27,480
inside the Esalen of steam and most

414
00:21:24,030 --> 00:21:29,639
probably we will work on this for future

415
00:21:27,480 --> 00:21:32,160
to kind of to make the relay blink

416
00:21:29,640 --> 00:21:38,510
faster maybe there are there are ways

417
00:21:32,160 --> 00:21:38,510
how to do that some other questions

418
00:21:40,380 --> 00:21:45,259
I didn't see never someone in the back

419
00:21:48,409 --> 00:21:53,399
do you have some plan to integrate it

420
00:21:50,880 --> 00:21:56,159
into kubernetes because right now you're

421
00:21:53,399 --> 00:21:58,320
writing code man then write this out and

422
00:21:56,159 --> 00:21:59,880
then the round pot man again if I'm

423
00:21:58,320 --> 00:22:02,668
writing a kubernetes or any other

424
00:21:59,880 --> 00:22:06,120
orchestration manifest yes I'm doing it

425
00:22:02,669 --> 00:22:08,159
once so how well it works with

426
00:22:06,120 --> 00:22:10,799
kubernetes missiles and whatever else

427
00:22:08,159 --> 00:22:14,120
there is on the market a very good

428
00:22:10,799 --> 00:22:17,820
question thank you for that

429
00:22:14,120 --> 00:22:20,250
in near future there will be on github

430
00:22:17,820 --> 00:22:23,189
there already there should be already

431
00:22:20,250 --> 00:22:25,080
there should be container we would sign

432
00:22:23,190 --> 00:22:28,769
inside there and basically you can

433
00:22:25,080 --> 00:22:30,240
almost fully automatically they generate

434
00:22:28,769 --> 00:22:33,149
a soon enough policy inside the

435
00:22:30,240 --> 00:22:36,870
kubernetes we put we put a notation

436
00:22:33,149 --> 00:22:40,979
generator salinas policy - - docker file

437
00:22:36,870 --> 00:22:42,779
right so there is there is operator it

438
00:22:40,980 --> 00:22:45,029
recognized that some container was

439
00:22:42,779 --> 00:22:48,210
started with the denotation desenex

440
00:22:45,029 --> 00:22:51,809
policies SMS policies generated however

441
00:22:48,210 --> 00:22:54,320
there are still technical issues for

442
00:22:51,809 --> 00:22:57,269
example how to how to maintain

443
00:22:54,320 --> 00:22:58,980
selinux policy between the cluster and

444
00:22:57,269 --> 00:23:01,080
stuff like that so it's not easy but we

445
00:22:58,980 --> 00:23:03,570
are working on that and some proof of

446
00:23:01,080 --> 00:23:06,740
concept you can already find on on it's

447
00:23:03,570 --> 00:23:06,740
our web page

448
00:23:13,470 --> 00:23:17,730
so maybe a follow-up to the other

449
00:23:14,669 --> 00:23:19,110
question so is there a I mean it takes a

450
00:23:17,730 --> 00:23:21,029
while for good it's a tool to generate

451
00:23:19,110 --> 00:23:23,100
the policy but if the policy is really

452
00:23:21,029 --> 00:23:25,409
large it's also performance hit on every

453
00:23:23,100 --> 00:23:27,870
container start is really not having to

454
00:23:25,409 --> 00:23:31,820
to do that or is that really fast and or

455
00:23:27,870 --> 00:23:36,779
can you maybe show what the CI CI L was

456
00:23:31,820 --> 00:23:43,529
generated yeah I can do that actually

457
00:23:36,779 --> 00:23:46,799
this is this is pretty fast these this

458
00:23:43,529 --> 00:23:49,080
is Leslie knope's policy but you can see

459
00:23:46,799 --> 00:23:52,350
the first one is that the blog is called

460
00:23:49,080 --> 00:23:54,779
my underscore container you see that you

461
00:23:52,350 --> 00:23:57,509
can see the second and third line saying

462
00:23:54,779 --> 00:24:00,169
that inherit all allow rules from the DS

463
00:23:57,509 --> 00:24:03,690
free these blocks which is container

464
00:24:00,169 --> 00:24:06,179
restricted underscore net container the

465
00:24:03,690 --> 00:24:08,639
next line is related to capabilities so

466
00:24:06,179 --> 00:24:10,740
this is this is quite quickly and all

467
00:24:08,639 --> 00:24:13,139
the rest of the allow rules are related

468
00:24:10,740 --> 00:24:15,330
only to slash var slash because there is

469
00:24:13,139 --> 00:24:18,870
no predefined there is no predefined

470
00:24:15,330 --> 00:24:20,370
template actually this is this is not

471
00:24:18,870 --> 00:24:21,840
this is not problem we can we can

472
00:24:20,370 --> 00:24:25,018
generate this annex policy really

473
00:24:21,840 --> 00:24:27,299
quickly because we do suggest parsing

474
00:24:25,019 --> 00:24:29,009
the inspection file which is in JSON

475
00:24:27,299 --> 00:24:31,019
format and looking if there is

476
00:24:29,009 --> 00:24:34,649
predefined if there is a predefined

477
00:24:31,019 --> 00:24:37,230
block then just set the list of

478
00:24:34,649 --> 00:24:39,059
capabilities from inspection file and if

479
00:24:37,230 --> 00:24:40,830
there if there is a need generate also

480
00:24:39,059 --> 00:24:43,019
allow rules but the main issue is

481
00:24:40,830 --> 00:24:46,500
related to Toralei blink

482
00:24:43,019 --> 00:24:48,240
yeah okay thank you for a torque we've

483
00:24:46,500 --> 00:24:52,159
got last house a minute so we will

484
00:24:48,240 --> 00:24:52,159
probably end and distort thank you

485
00:24:57,210 --> 00:24:59,270
you

