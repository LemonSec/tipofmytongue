1
00:00:04,960 --> 00:00:09,760
from germany

2
00:00:06,080 --> 00:00:14,080
on spunky yeah um

3
00:00:09,760 --> 00:00:16,960
hi i'm martin and since 10 years i'm

4
00:00:14,080 --> 00:00:18,480
working at genoad labs in dresden and

5
00:00:16,960 --> 00:00:22,560
germany

6
00:00:18,480 --> 00:00:24,960
so what i was mainly involved there

7
00:00:22,560 --> 00:00:26,799
in the genoad framework i don't know and

8
00:00:24,960 --> 00:00:29,039
do anyone know about the genome

9
00:00:26,800 --> 00:00:33,040
framework here

10
00:00:29,039 --> 00:00:36,000
yeah someone okay uh it's like an

11
00:00:33,040 --> 00:00:36,719
operating uh framework operating system

12
00:00:36,000 --> 00:00:39,920
framework

13
00:00:36,719 --> 00:00:41,040
uh to create operating systems and yeah

14
00:00:39,920 --> 00:00:44,000
i was involved there

15
00:00:41,040 --> 00:00:45,519
in creating the first in-house kernel

16
00:00:44,000 --> 00:00:49,280
for gnode and

17
00:00:45,520 --> 00:00:51,120
then in drivers and hardware support

18
00:00:49,280 --> 00:00:53,039
especially for arm

19
00:00:51,120 --> 00:00:55,199
and after that i switched a little bit

20
00:00:53,039 --> 00:00:58,320
to a testing infrastructure

21
00:00:55,199 --> 00:01:02,320
and built an automated tester and

22
00:00:58,320 --> 00:01:06,240
then yeah i finally ended up

23
00:01:02,320 --> 00:01:08,799
with adder and spark last year and

24
00:01:06,240 --> 00:01:09,600
to be honest i'm a total new newbie to

25
00:01:08,799 --> 00:01:13,680
this

26
00:01:09,600 --> 00:01:14,880
i visited at a deaf room last year the

27
00:01:13,680 --> 00:01:18,799
first time and

28
00:01:14,880 --> 00:01:22,640
yeah i was very very excited about

29
00:01:18,799 --> 00:01:26,080
experimenting with it and

30
00:01:22,640 --> 00:01:29,680
then i yeah i thought about

31
00:01:26,080 --> 00:01:32,320
uh how can i how can i leverage from

32
00:01:29,680 --> 00:01:34,240
this how can i

33
00:01:32,320 --> 00:01:35,839
do some error in my own system in my

34
00:01:34,240 --> 00:01:40,479
working system uh

35
00:01:35,840 --> 00:01:42,320
in g note and i thought why not uh

36
00:01:40,479 --> 00:01:44,640
write a kernel for it because it's the

37
00:01:42,320 --> 00:01:47,839
most fundamental task i want to

38
00:01:44,640 --> 00:01:50,960
trust it the most and yeah

39
00:01:47,840 --> 00:01:52,159
so first a little bit about genode in

40
00:01:50,960 --> 00:01:55,199
general because

41
00:01:52,159 --> 00:01:57,200
not everyone knows about it uh

42
00:01:55,200 --> 00:01:59,360
i said that g note is an operating

43
00:01:57,200 --> 00:02:02,880
system framework it's not actually

44
00:01:59,360 --> 00:02:04,479
an operating system and this framework

45
00:02:02,880 --> 00:02:06,320
consists of three parts

46
00:02:04,479 --> 00:02:07,600
first you see here at the bottom of the

47
00:02:06,320 --> 00:02:10,799
picture that

48
00:02:07,600 --> 00:02:14,239
genode runs on several kernels mostly

49
00:02:10,800 --> 00:02:17,599
microkernels there are a lot of

50
00:02:14,239 --> 00:02:20,800
third-party kernels like nova sl4

51
00:02:17,599 --> 00:02:23,359
fiasco c or linux

52
00:02:20,800 --> 00:02:23,840
and there is also this in-house kernel i

53
00:02:23,360 --> 00:02:27,599
mentioned

54
00:02:23,840 --> 00:02:30,000
uh that has the beautiful name base hw

55
00:02:27,599 --> 00:02:31,280
and on top of that we have the first

56
00:02:30,000 --> 00:02:34,319
component of gnode

57
00:02:31,280 --> 00:02:37,200
uh it's the core and

58
00:02:34,319 --> 00:02:38,799
what core does it actually translates

59
00:02:37,200 --> 00:02:41,599
from all these different uh

60
00:02:38,800 --> 00:02:43,680
kernel interfaces to the generic genode

61
00:02:41,599 --> 00:02:46,879
api abstraction

62
00:02:43,680 --> 00:02:47,920
so that every component then runs on top

63
00:02:46,879 --> 00:02:50,239
of it

64
00:02:47,920 --> 00:02:52,559
generally is kernel agnostic you don't

65
00:02:50,239 --> 00:02:56,000
have to recompile it normally to

66
00:02:52,560 --> 00:02:57,200
to use it on a different term once you

67
00:02:56,000 --> 00:03:01,200
decide to

68
00:02:57,200 --> 00:03:05,040
switch and then on top of it you have a

69
00:03:01,200 --> 00:03:06,799
west collection of components

70
00:03:05,040 --> 00:03:08,239
that you can put together like lego

71
00:03:06,800 --> 00:03:10,159
bricks

72
00:03:08,239 --> 00:03:12,000
to create your own individual system and

73
00:03:10,159 --> 00:03:14,799
this individual system can

74
00:03:12,000 --> 00:03:16,319
scale from embedded systems up to like

75
00:03:14,800 --> 00:03:19,599
desktop systems

76
00:03:16,319 --> 00:03:22,879
we actually in in our office we

77
00:03:19,599 --> 00:03:23,280
use all uh our own desktop system built

78
00:03:22,879 --> 00:03:26,959
on

79
00:03:23,280 --> 00:03:29,680
uh on gnode uh for working

80
00:03:26,959 --> 00:03:30,959
and yeah you can see there are a lot of

81
00:03:29,680 --> 00:03:34,239
drivers for the

82
00:03:30,959 --> 00:03:37,760
most common uh hardware

83
00:03:34,239 --> 00:03:41,360
on x86 and on arm and

84
00:03:37,760 --> 00:03:44,239
then you have these native resource

85
00:03:41,360 --> 00:03:46,000
multiplexers like a router for

86
00:03:44,239 --> 00:03:51,360
networking an audio mixer

87
00:03:46,000 --> 00:03:54,879
and so on then there are system services

88
00:03:51,360 --> 00:03:57,599
like for instance the the the init

89
00:03:54,879 --> 00:04:00,798
this is a very special one because it's

90
00:03:57,599 --> 00:04:02,720
it's used very broadly in genode

91
00:04:00,799 --> 00:04:04,879
because it can dynamically load

92
00:04:02,720 --> 00:04:06,000
subsystems so you can start other

93
00:04:04,879 --> 00:04:09,518
applications with it

94
00:04:06,000 --> 00:04:11,120
and and control and manage them and also

95
00:04:09,519 --> 00:04:15,200
the services between them

96
00:04:11,120 --> 00:04:17,040
and and the resources

97
00:04:15,200 --> 00:04:18,959
then on top of that you have

98
00:04:17,040 --> 00:04:19,600
applications several these these green

99
00:04:18,959 --> 00:04:21,060
bricks here

100
00:04:19,600 --> 00:04:23,120
are native applications

101
00:04:21,060 --> 00:04:26,479
[Music]

102
00:04:23,120 --> 00:04:28,080
that run natively on gnode for instance

103
00:04:26,479 --> 00:04:29,840
you have there these depot query and

104
00:04:28,080 --> 00:04:31,520
depot deploy these are tools for the

105
00:04:29,840 --> 00:04:34,560
package management for

106
00:04:31,520 --> 00:04:36,799
which brings gene node

107
00:04:34,560 --> 00:04:38,479
or for instance the skype manager is

108
00:04:36,800 --> 00:04:41,680
like a

109
00:04:38,479 --> 00:04:45,280
managing component for a desktop system

110
00:04:41,680 --> 00:04:48,479
yeah and then there are a lot of

111
00:04:45,280 --> 00:04:50,799
ported programs or also because uh

112
00:04:48,479 --> 00:04:52,639
um geno provides also an ellipsey

113
00:04:50,800 --> 00:04:55,600
abstraction and projects

114
00:04:52,639 --> 00:04:56,320
for porting components and you can see

115
00:04:55,600 --> 00:04:59,600
okay we have

116
00:04:56,320 --> 00:05:01,440
a gdp virtualbox gcc

117
00:04:59,600 --> 00:05:03,039
and all the stuff you need normally to

118
00:05:01,440 --> 00:05:07,039
work uh

119
00:05:03,039 --> 00:05:10,240
independently from other systems so

120
00:05:07,039 --> 00:05:13,199
uh and then a lot of libraries i have

121
00:05:10,240 --> 00:05:14,639
colored in i have put them with

122
00:05:13,199 --> 00:05:17,120
different bricks

123
00:05:14,639 --> 00:05:18,320
because yeah what i wanted to show with

124
00:05:17,120 --> 00:05:20,560
these bricks is

125
00:05:18,320 --> 00:05:22,479
all the components are very well

126
00:05:20,560 --> 00:05:25,600
separated from each other

127
00:05:22,479 --> 00:05:27,199
so what core or what the the system does

128
00:05:25,600 --> 00:05:29,199
is it applies a very strict

129
00:05:27,199 --> 00:05:31,360
organizational structure

130
00:05:29,199 --> 00:05:32,560
so the complexity of the whole system

131
00:05:31,360 --> 00:05:35,680
can be managed

132
00:05:32,560 --> 00:05:36,240
so normally all these components don't

133
00:05:35,680 --> 00:05:39,840
know

134
00:05:36,240 --> 00:05:42,639
from each other they only see services

135
00:05:39,840 --> 00:05:44,560
and they know how to use them but they

136
00:05:42,639 --> 00:05:47,759
don't know from where they come

137
00:05:44,560 --> 00:05:50,880
so normally you have only client server

138
00:05:47,759 --> 00:05:52,880
relations between them and parent-child

139
00:05:50,880 --> 00:05:54,320
relations but the components themselves

140
00:05:52,880 --> 00:05:57,919
don't know about

141
00:05:54,320 --> 00:06:01,280
from where it comes and

142
00:05:57,919 --> 00:06:04,560
yeah so i wanted to start here

143
00:06:01,280 --> 00:06:08,159
with the base hw kernel because it's

144
00:06:04,560 --> 00:06:12,080
an in-house kernel i know a lot about it

145
00:06:08,160 --> 00:06:16,160
about its internals and it's very easy

146
00:06:12,080 --> 00:06:19,680
to to modify because

147
00:06:16,160 --> 00:06:21,120
the base hw kernel is not really in a

148
00:06:19,680 --> 00:06:23,280
self-standing kernel

149
00:06:21,120 --> 00:06:25,600
it's a library that is linked again

150
00:06:23,280 --> 00:06:29,840
against the core of gnode

151
00:06:25,600 --> 00:06:32,840
and it's less than 10 000 lines of code

152
00:06:29,840 --> 00:06:35,758
a lot less if you specialize on one

153
00:06:32,840 --> 00:06:39,039
architecture and

154
00:06:35,759 --> 00:06:40,479
these these modules that the base hw

155
00:06:39,039 --> 00:06:43,440
kernel is made of are

156
00:06:40,479 --> 00:06:45,919
also very well pretty well separated

157
00:06:43,440 --> 00:06:49,360
from each other

158
00:06:45,919 --> 00:06:49,919
so you can pick them out and translate

159
00:06:49,360 --> 00:06:53,759
them for

160
00:06:49,919 --> 00:06:56,630
for instance or modify them without

161
00:06:53,759 --> 00:06:58,000
having to change all the interfaces

162
00:06:56,630 --> 00:07:01,599
[Music]

163
00:06:58,000 --> 00:07:03,919
okay and one special thing

164
00:07:01,599 --> 00:07:05,520
about the base hw kernel is as i said

165
00:07:03,919 --> 00:07:07,840
it's linked against core

166
00:07:05,520 --> 00:07:09,359
so it runs in the same address space but

167
00:07:07,840 --> 00:07:11,119
it's separated from the core

168
00:07:09,360 --> 00:07:12,160
functionality through a syscall

169
00:07:11,120 --> 00:07:14,800
interface

170
00:07:12,160 --> 00:07:15,520
the cisco interface is very small

171
00:07:14,800 --> 00:07:17,599
because

172
00:07:15,520 --> 00:07:20,400
we wanted to keep things very

173
00:07:17,599 --> 00:07:24,639
minimalistic in the base hw kernel

174
00:07:20,400 --> 00:07:27,679
it has like 25 public systems

175
00:07:24,639 --> 00:07:30,800
two user components and

176
00:07:27,680 --> 00:07:31,360
20 private syscalls that can only call

177
00:07:30,800 --> 00:07:34,960
core

178
00:07:31,360 --> 00:07:38,639
so they are for internal operation only

179
00:07:34,960 --> 00:07:41,599
yeah and yeah another nice thing about

180
00:07:38,639 --> 00:07:44,639
this is single threaded

181
00:07:41,599 --> 00:07:48,319
our approach was okay if you have a smp

182
00:07:44,639 --> 00:07:51,520
or something like that it's it's enough

183
00:07:48,319 --> 00:07:54,240
to have a thread for each cpu and you

184
00:07:51,520 --> 00:07:55,758
simply lock the whole kernel while one

185
00:07:54,240 --> 00:07:58,479
cpu is in the kernel

186
00:07:55,759 --> 00:07:58,960
because kernel passes are very very fast

187
00:07:58,479 --> 00:08:00,960
you

188
00:07:58,960 --> 00:08:02,080
you get into it and then you get ordered

189
00:08:00,960 --> 00:08:04,000
and done

190
00:08:02,080 --> 00:08:05,840
you have nothing to block there you have

191
00:08:04,000 --> 00:08:08,800
nothing to normally you

192
00:08:05,840 --> 00:08:09,919
you don't do a lot in there and so it

193
00:08:08,800 --> 00:08:13,360
should be fine with a

194
00:08:09,919 --> 00:08:16,479
big kernel lock yeah so this makes this

195
00:08:13,360 --> 00:08:19,120
whole kernel only a big state machine

196
00:08:16,479 --> 00:08:19,758
that is really really really good to

197
00:08:19,120 --> 00:08:23,199
control

198
00:08:19,759 --> 00:08:26,000
and especially really easy to transfer

199
00:08:23,199 --> 00:08:27,440
into other contexts for a newbie like me

200
00:08:26,000 --> 00:08:30,160
in edo and spark

201
00:08:27,440 --> 00:08:31,280
so i thought it's the it's the perfect

202
00:08:30,160 --> 00:08:34,399
goal for me

203
00:08:31,280 --> 00:08:37,279
to go for yeah

204
00:08:34,399 --> 00:08:37,599
now i have to get back a little bit we

205
00:08:37,279 --> 00:08:40,640
had

206
00:08:37,599 --> 00:08:43,360
an adder and spark project

207
00:08:40,640 --> 00:08:44,800
last year that was the main reason why i

208
00:08:43,360 --> 00:08:47,200
started to

209
00:08:44,800 --> 00:08:49,279
to learn this language and to get into

210
00:08:47,200 --> 00:08:49,279
it

211
00:08:49,760 --> 00:08:54,399
it's a block encryptor unfortunately a

212
00:08:53,360 --> 00:08:57,519
blocker encryption

213
00:08:54,399 --> 00:09:00,640
is a little bit complex so uh

214
00:08:57,519 --> 00:09:03,760
it's not ready yet i i'd like to

215
00:09:00,640 --> 00:09:04,240
show it maybe next year i don't know uh

216
00:09:03,760 --> 00:09:06,720
but

217
00:09:04,240 --> 00:09:07,360
what we had uh during the design phrase

218
00:09:06,720 --> 00:09:10,399
of this

219
00:09:07,360 --> 00:09:13,600
blocking crypto was a

220
00:09:10,399 --> 00:09:17,680
in-depth uh discussion about how

221
00:09:13,600 --> 00:09:19,680
to how to find a good design how

222
00:09:17,680 --> 00:09:21,279
c plus plus and allah and spark can work

223
00:09:19,680 --> 00:09:23,920
together

224
00:09:21,279 --> 00:09:25,120
uh the native uh the native genode

225
00:09:23,920 --> 00:09:27,599
environment is in c

226
00:09:25,120 --> 00:09:29,760
plus and yeah we don't want to change

227
00:09:27,600 --> 00:09:33,200
this

228
00:09:29,760 --> 00:09:36,080
uh in the first step of course

229
00:09:33,200 --> 00:09:37,279
and so we came up with this design for

230
00:09:36,080 --> 00:09:39,970
every

231
00:09:37,279 --> 00:09:41,279
spark a package that

232
00:09:39,970 --> 00:09:43,839
[Music]

233
00:09:41,279 --> 00:09:46,000
in that shall interact with simple plus

234
00:09:43,839 --> 00:09:47,600
or that shall be called from c plus plus

235
00:09:46,000 --> 00:09:51,120
battle

236
00:09:47,600 --> 00:09:53,760
there is a c

237
00:09:51,120 --> 00:09:54,880
class that has only the public interface

238
00:09:53,760 --> 00:09:58,399
declarations

239
00:09:54,880 --> 00:10:01,439
so you can do the public calls on it and

240
00:09:58,399 --> 00:10:05,040
it is bloated to the size of

241
00:10:01,440 --> 00:10:07,600
a record in spark that

242
00:10:05,040 --> 00:10:09,439
this record this is the the object that

243
00:10:07,600 --> 00:10:11,680
contains the object layout

244
00:10:09,440 --> 00:10:13,120
so to say it's like a text type if you

245
00:10:11,680 --> 00:10:16,399
want so

246
00:10:13,120 --> 00:10:18,800
and yeah then

247
00:10:16,399 --> 00:10:19,760
you can leave all the allocation things

248
00:10:18,800 --> 00:10:22,719
out of spark and

249
00:10:19,760 --> 00:10:23,600
other uh you you can allocate your c

250
00:10:22,720 --> 00:10:27,279
plus plus clear

251
00:10:23,600 --> 00:10:29,360
class here and in the sql plus world

252
00:10:27,279 --> 00:10:30,959
and call your functions and what they do

253
00:10:29,360 --> 00:10:33,760
is they go through

254
00:10:30,959 --> 00:10:36,719
some kind of intermediate package that

255
00:10:33,760 --> 00:10:38,319
is prefixed with cxx for instance

256
00:10:36,720 --> 00:10:40,160
and this package does all the

257
00:10:38,320 --> 00:10:43,279
conversation add a conversion

258
00:10:40,160 --> 00:10:46,480
between the arguments uh that are all

259
00:10:43,279 --> 00:10:48,000
still in in c plus plus without any

260
00:10:46,480 --> 00:10:52,079
restrictions

261
00:10:48,000 --> 00:10:56,320
they are all con they are all translated

262
00:10:52,079 --> 00:11:00,079
to a spark compliant way

263
00:10:56,320 --> 00:11:03,440
to into this type as to be said

264
00:11:00,079 --> 00:11:05,599
to fulfill this type safety and then

265
00:11:03,440 --> 00:11:07,440
the same function is called at the real

266
00:11:05,600 --> 00:11:11,360
spark package

267
00:11:07,440 --> 00:11:14,560
so what this makes is you can

268
00:11:11,360 --> 00:11:15,279
have in your c plus bus world this class

269
00:11:14,560 --> 00:11:17,760
that

270
00:11:15,279 --> 00:11:19,760
is interchangeable so you you can have

271
00:11:17,760 --> 00:11:23,200
in c plus plus implementation

272
00:11:19,760 --> 00:11:24,800
or a spark implementation it's it

273
00:11:23,200 --> 00:11:26,880
doesn't matter for the c plus plus code

274
00:11:24,800 --> 00:11:29,359
it doesn't see this even

275
00:11:26,880 --> 00:11:31,279
and on the other side it's the same with

276
00:11:29,360 --> 00:11:34,880
the spark package i can all

277
00:11:31,279 --> 00:11:37,519
can do all my uh my cool stuff uh

278
00:11:34,880 --> 00:11:39,040
with contracts and stuff uh with getting

279
00:11:37,519 --> 00:11:41,680
without getting annoyed by

280
00:11:39,040 --> 00:11:44,480
uh the fact that it's actually allocated

281
00:11:41,680 --> 00:11:48,000
and called by the c plus plus side

282
00:11:44,480 --> 00:11:50,320
so i wanted to

283
00:11:48,000 --> 00:11:51,839
use this approach also for base hw

284
00:11:50,320 --> 00:11:54,800
because

285
00:11:51,839 --> 00:11:57,040
i wanted to take the base hw design but

286
00:11:54,800 --> 00:11:59,439
i don't wanted to re-implement it

287
00:11:57,040 --> 00:12:00,079
all in one step because i wouldn't have

288
00:11:59,440 --> 00:12:01,920
any

289
00:12:00,079 --> 00:12:03,359
intermediate steps where i can test it

290
00:12:01,920 --> 00:12:07,120
and see if my

291
00:12:03,360 --> 00:12:11,200
if my approach is really successful so

292
00:12:07,120 --> 00:12:14,800
this let me

293
00:12:11,200 --> 00:12:16,399
translate the single modules uh pick out

294
00:12:14,800 --> 00:12:19,839
single modules of the basal chubby

295
00:12:16,399 --> 00:12:21,519
kernel and replace them with spark with

296
00:12:19,839 --> 00:12:23,440
other implementations

297
00:12:21,519 --> 00:12:25,600
actually it's not spark i will come to

298
00:12:23,440 --> 00:12:29,200
this later

299
00:12:25,600 --> 00:12:32,240
um yeah so how far did i get

300
00:12:29,200 --> 00:12:34,000
first of all i had to move all the other

301
00:12:32,240 --> 00:12:35,279
runtime into the kernel this was a

302
00:12:34,000 --> 00:12:38,720
little bit of work

303
00:12:35,279 --> 00:12:41,360
but fortunately i had a lot of uh

304
00:12:38,720 --> 00:12:43,920
preparation work done already by the

305
00:12:41,360 --> 00:12:46,560
guys from component by johannes leman

306
00:12:43,920 --> 00:12:48,000
and alexander signier and they helped us

307
00:12:46,560 --> 00:12:50,560
a lot with this

308
00:12:48,000 --> 00:12:52,320
they they had always an open ear if we

309
00:12:50,560 --> 00:12:54,880
had any problems with the

310
00:12:52,320 --> 00:12:56,000
with the header runtime on gnode and

311
00:12:54,880 --> 00:12:57,920
there were some

312
00:12:56,000 --> 00:12:59,200
quite difficult problems that i couldn't

313
00:12:57,920 --> 00:13:03,279
understand with my

314
00:12:59,200 --> 00:13:06,399
knowledge um yeah once this was done

315
00:13:03,279 --> 00:13:09,040
i started with the data structures

316
00:13:06,399 --> 00:13:09,519
on the right side there's it's pretty

317
00:13:09,040 --> 00:13:13,040
simple

318
00:13:09,519 --> 00:13:15,519
it's only a list essentially

319
00:13:13,040 --> 00:13:16,560
and a queue a double linked list and a

320
00:13:15,519 --> 00:13:20,240
queue in

321
00:13:16,560 --> 00:13:22,880
base hw um but

322
00:13:20,240 --> 00:13:24,480
there i had one reason why i wouldn't go

323
00:13:22,880 --> 00:13:28,240
for spark directly

324
00:13:24,480 --> 00:13:31,440
i wanted but the problem is that base hw

325
00:13:28,240 --> 00:13:34,720
is dependent on pointers

326
00:13:31,440 --> 00:13:35,600
and it uses it a lot and it's a little

327
00:13:34,720 --> 00:13:38,399
bit hard to get

328
00:13:35,600 --> 00:13:38,880
rid of it in the first step so i decided

329
00:13:38,399 --> 00:13:41,279
to

330
00:13:38,880 --> 00:13:42,160
use access types and unfortunately we

331
00:13:41,279 --> 00:13:45,120
don't have uh

332
00:13:42,160 --> 00:13:45,920
borrowing supported yet in other runtime

333
00:13:45,120 --> 00:13:49,519
on gnode

334
00:13:45,920 --> 00:13:52,800
so it should be uh fine uh

335
00:13:49,519 --> 00:13:56,320
still with ada yeah

336
00:13:52,800 --> 00:13:59,040
we can't go to spark directly um

337
00:13:56,320 --> 00:14:01,040
yeah then the second step was the

338
00:13:59,040 --> 00:14:03,599
signaling in the rpc

339
00:14:01,040 --> 00:14:04,719
and my experience with this was once i

340
00:14:03,600 --> 00:14:08,720
have translated

341
00:14:04,720 --> 00:14:12,399
the modules and i had yeah managed a

342
00:14:08,720 --> 00:14:16,000
huge amount of compiler errors that

343
00:14:12,399 --> 00:14:19,360
i had to face this was really uh it

344
00:14:16,000 --> 00:14:22,079
made me almost crazy like hours of

345
00:14:19,360 --> 00:14:22,880
compiler warnings but uh the cool thing

346
00:14:22,079 --> 00:14:24,800
about it is

347
00:14:22,880 --> 00:14:26,240
once they were implemented they worked

348
00:14:24,800 --> 00:14:29,359
out of the box and i could

349
00:14:26,240 --> 00:14:31,199
uh not only do some single

350
00:14:29,360 --> 00:14:32,480
little tests or something like that but

351
00:14:31,199 --> 00:14:35,760
i could directly

352
00:14:32,480 --> 00:14:38,800
uh put a huge system on it

353
00:14:35,760 --> 00:14:39,519
and run it and it worked and that's

354
00:14:38,800 --> 00:14:41,439
really cool

355
00:14:39,519 --> 00:14:42,720
that's something you're not very

356
00:14:41,440 --> 00:14:44,800
accustomed to

357
00:14:42,720 --> 00:14:47,040
if you're developing in c or c plus plus

358
00:14:44,800 --> 00:14:49,680
i guess

359
00:14:47,040 --> 00:14:51,279
and uh the third thing that i started

360
00:14:49,680 --> 00:14:54,800
this winter

361
00:14:51,279 --> 00:14:56,800
uh was the scheduler and this

362
00:14:54,800 --> 00:14:59,120
yeah it was it was essentially the same

363
00:14:56,800 --> 00:15:00,719
the schedule is pretty complex

364
00:14:59,120 --> 00:15:02,800
compared to the other modules in the

365
00:15:00,720 --> 00:15:05,760
base hw kernel because it

366
00:15:02,800 --> 00:15:07,599
is the only kernel that applies the

367
00:15:05,760 --> 00:15:11,199
quota based

368
00:15:07,600 --> 00:15:14,240
cpu scheduling system that g note has so

369
00:15:11,199 --> 00:15:15,359
you can trade a cpu time between

370
00:15:14,240 --> 00:15:17,279
components

371
00:15:15,360 --> 00:15:18,959
and this makes it a little bit hard so

372
00:15:17,279 --> 00:15:21,519
it's a little bit complex but

373
00:15:18,959 --> 00:15:22,079
anyways it worked out of the box and uh

374
00:15:21,519 --> 00:15:25,600
that's

375
00:15:22,079 --> 00:15:28,160
really cool so

376
00:15:25,600 --> 00:15:28,880
that's a nice thing uh yeah and uh

377
00:15:28,160 --> 00:15:32,079
between them

378
00:15:28,880 --> 00:15:34,320
okay uh what what you might have

379
00:15:32,079 --> 00:15:36,239
figured out is uh all the other modules

380
00:15:34,320 --> 00:15:40,320
that are yet not implemented

381
00:15:36,240 --> 00:15:41,440
in in adder are i i take them directly

382
00:15:40,320 --> 00:15:43,839
from base hw

383
00:15:41,440 --> 00:15:45,600
and they work together with the with the

384
00:15:43,839 --> 00:15:48,800
other modules without any

385
00:15:45,600 --> 00:15:51,839
modification okay

386
00:15:48,800 --> 00:15:55,680
so what are the plans um

387
00:15:51,839 --> 00:15:59,279
this year i'm very

388
00:15:55,680 --> 00:15:59,839
very definitely want to put all spanky

389
00:15:59,279 --> 00:16:02,079
and adder

390
00:15:59,839 --> 00:16:03,120
that's the first thing i want to get rid

391
00:16:02,079 --> 00:16:05,680
of the

392
00:16:03,120 --> 00:16:07,600
residual base hw code and all the c plus

393
00:16:05,680 --> 00:16:10,000
plus stuff

394
00:16:07,600 --> 00:16:11,279
then yeah we want to publish a blocking

395
00:16:10,000 --> 00:16:14,399
crypto and maybe

396
00:16:11,279 --> 00:16:17,759
next year i can show it here

397
00:16:14,399 --> 00:16:21,600
hopefully and

398
00:16:17,759 --> 00:16:25,199
until the end of 2020

399
00:16:21,600 --> 00:16:29,519
i want to do a second step

400
00:16:25,199 --> 00:16:33,439
once i get got rid of all the base hw

401
00:16:29,519 --> 00:16:36,800
stuff in spunky i'm free to redesign it

402
00:16:33,440 --> 00:16:39,440
so essentially i can try some

403
00:16:36,800 --> 00:16:40,079
some strategies and strategies that i

404
00:16:39,440 --> 00:16:43,040
have

405
00:16:40,079 --> 00:16:44,880
for getting rid of pointers that's

406
00:16:43,040 --> 00:16:48,480
that's the main thing i think

407
00:16:44,880 --> 00:16:50,880
and to convert all spanky and spark

408
00:16:48,480 --> 00:16:51,759
and then of course i'd really really

409
00:16:50,880 --> 00:16:54,560
like to

410
00:16:51,759 --> 00:16:55,920
prove some basic assumptions about the

411
00:16:54,560 --> 00:16:59,839
kernel

412
00:16:55,920 --> 00:17:02,959
yeah and in 21 i'm looking for newland

413
00:16:59,839 --> 00:17:06,799
i am very deliberate about

414
00:17:02,959 --> 00:17:09,438
uh yeah putting the bass loop in

415
00:17:06,799 --> 00:17:10,000
of g note uh so to say the the native

416
00:17:09,439 --> 00:17:13,120
genode

417
00:17:10,000 --> 00:17:16,319
environment so you can have pure

418
00:17:13,119 --> 00:17:19,599
other components in in gnode

419
00:17:16,319 --> 00:17:20,559
and uh this would also allow me uh to do

420
00:17:19,599 --> 00:17:23,678
another project

421
00:17:20,559 --> 00:17:24,319
uh namely uh converting all core uh the

422
00:17:23,679 --> 00:17:27,120
whole

423
00:17:24,319 --> 00:17:27,599
core component of g node into into adder

424
00:17:27,119 --> 00:17:29,600
and

425
00:17:27,599 --> 00:17:33,120
this would be really cool because the

426
00:17:29,600 --> 00:17:34,559
core component is like the kernel itself

427
00:17:33,120 --> 00:17:37,120
something that everything on geno

428
00:17:34,559 --> 00:17:38,480
depends on yeah and it would be a nice

429
00:17:37,120 --> 00:17:42,320
experiment for me to learn

430
00:17:38,480 --> 00:17:45,039
new stuff with alan spark so yeah

431
00:17:42,320 --> 00:17:46,799
that's it from my side you can try it

432
00:17:45,039 --> 00:17:50,240
out if you want uh

433
00:17:46,799 --> 00:17:50,720
because um actually yeah i i wanted to

434
00:17:50,240 --> 00:17:54,480
show this

435
00:17:50,720 --> 00:17:56,400
i i forgot this um if you want not watch

436
00:17:54,480 --> 00:17:58,240
system is this what i'm running on it's

437
00:17:56,400 --> 00:18:01,440
bunky itself

438
00:17:58,240 --> 00:18:05,120
and you can see here that it's

439
00:18:01,440 --> 00:18:07,039
already yeah pretty

440
00:18:05,120 --> 00:18:08,320
productive i would say you can see here

441
00:18:07,039 --> 00:18:11,840
okay i wanted to start

442
00:18:08,320 --> 00:18:14,399
a window manager for instance

443
00:18:11,840 --> 00:18:14,879
and then i have to grant it the rights

444
00:18:14,400 --> 00:18:18,000
to

445
00:18:14,880 --> 00:18:19,679
access the services it needs because i

446
00:18:18,000 --> 00:18:21,360
the system doesn't decide this on its

447
00:18:19,679 --> 00:18:24,320
own

448
00:18:21,360 --> 00:18:24,959
i will give it a gui and pointer shape

449
00:18:24,320 --> 00:18:28,000
service

450
00:18:24,960 --> 00:18:32,320
then some clipboard stuff

451
00:18:28,000 --> 00:18:36,640
and i add this component it starts here

452
00:18:32,320 --> 00:18:40,080
and now that i have a vm i i could

453
00:18:36,640 --> 00:18:40,880
blend out the presentation now that i

454
00:18:40,080 --> 00:18:43,139
have a vm

455
00:18:40,880 --> 00:18:46,329
i could start for instance

456
00:18:43,140 --> 00:18:46,329
[Music]

457
00:18:46,880 --> 00:18:50,320
a top view that was programmed by

458
00:18:49,280 --> 00:18:53,360
alexander

459
00:18:50,320 --> 00:18:55,678
uh butcher that is also

460
00:18:53,360 --> 00:18:56,879
that is also working in who is also

461
00:18:55,679 --> 00:19:00,320
working in our

462
00:18:56,880 --> 00:19:00,559
office and now i give it a theme vm that

463
00:19:00,320 --> 00:19:05,280
i

464
00:19:00,559 --> 00:19:07,600
just started and fonts file system

465
00:19:05,280 --> 00:19:09,980
i i forgot to start the fonts file

466
00:19:07,600 --> 00:19:13,049
system sorry

467
00:19:09,980 --> 00:19:13,049
[Music]

468
00:19:14,799 --> 00:19:22,160
where is the local upload system

469
00:19:18,080 --> 00:19:26,000
configuration i start this font server

470
00:19:22,160 --> 00:19:26,000
and then you know

471
00:19:27,200 --> 00:19:35,840
to its top view so i can try it again

472
00:19:32,240 --> 00:19:39,360
whoop and where is it here

473
00:19:35,840 --> 00:19:42,799
okay so it should start and we can go

474
00:19:39,360 --> 00:19:46,399
out of the control panel and see here

475
00:19:42,799 --> 00:19:49,679
some thing whip

476
00:19:46,400 --> 00:19:53,600
and now we could

477
00:19:49,679 --> 00:19:58,320
start this and

478
00:19:53,600 --> 00:19:58,320
actually this is a bit fast

479
00:19:58,960 --> 00:20:03,520
so yeah you see it's working pretty

480
00:20:01,760 --> 00:20:06,879
snappy

481
00:20:03,520 --> 00:20:08,320
and it's already running all the

482
00:20:06,880 --> 00:20:10,799
communication power and

483
00:20:08,320 --> 00:20:12,000
the the the rpc and the signaling and

484
00:20:10,799 --> 00:20:14,480
the scheduling bit

485
00:20:12,000 --> 00:20:15,440
uh all in adder and that's that's really

486
00:20:14,480 --> 00:20:21,840
cool i like it

487
00:20:15,440 --> 00:20:21,840
so thank you for listening

488
00:20:22,480 --> 00:20:25,760
and try out these things

489
00:20:25,840 --> 00:20:35,840
okay any questions

490
00:20:40,559 --> 00:20:49,840
your opinion experience what has helped

491
00:20:43,679 --> 00:20:49,840
to reach this in the language or

492
00:20:55,760 --> 00:20:59,600
i think uh and that's that's only from

493
00:20:58,320 --> 00:21:03,039
yeah uh

494
00:20:59,600 --> 00:21:05,199
the question was what has helped that

495
00:21:03,039 --> 00:21:06,879
my implementation worked out of the box

496
00:21:05,200 --> 00:21:11,520
with adder and spark

497
00:21:06,880 --> 00:21:14,400
what do i think helped a lot and i think

498
00:21:11,520 --> 00:21:16,320
at least in my case it's uh that the

499
00:21:14,400 --> 00:21:19,760
language disciplined me

500
00:21:16,320 --> 00:21:21,918
to find ways to clearly to to find a

501
00:21:19,760 --> 00:21:26,158
clear solution to the problem

502
00:21:21,919 --> 00:21:28,480
not to try to find some short bags if i

503
00:21:26,159 --> 00:21:30,720
get into troubles or into problems but

504
00:21:28,480 --> 00:21:32,640
the language doesn't allow for this it

505
00:21:30,720 --> 00:21:34,480
says no stop this is the wrong way and

506
00:21:32,640 --> 00:21:35,039
then i have to turn back and go again

507
00:21:34,480 --> 00:21:36,559
and have

508
00:21:35,039 --> 00:21:38,640
find another design or something like

509
00:21:36,559 --> 00:21:40,240
that and that that helps me at least a

510
00:21:38,640 --> 00:21:43,679
lot

511
00:21:40,240 --> 00:21:47,760
and the other thing is um

512
00:21:43,679 --> 00:21:49,440
that you that that i felt that i get a

513
00:21:47,760 --> 00:21:53,520
certain

514
00:21:49,440 --> 00:21:57,120
don't know a certain way of programming

515
00:21:53,520 --> 00:22:00,639
while doing this for a long time i i

516
00:21:57,120 --> 00:22:01,280
get enough of kind of thinking about

517
00:22:00,640 --> 00:22:04,400
problems

518
00:22:01,280 --> 00:22:07,120
and that's really cool it uh it

519
00:22:04,400 --> 00:22:08,400
encourages you to break down and break

520
00:22:07,120 --> 00:22:11,600
things down to simple

521
00:22:08,400 --> 00:22:12,000
solutions and not to just use the

522
00:22:11,600 --> 00:22:15,439
tooling

523
00:22:12,000 --> 00:22:19,200
that is very complex and fancy and

524
00:22:15,440 --> 00:22:19,200
yeah i think that's it

525
00:22:31,600 --> 00:22:35,678
with ada at the beginning of last year i

526
00:22:34,480 --> 00:22:37,760
started

527
00:22:35,679 --> 00:22:39,360
yeah it's pretty exactly i started at

528
00:22:37,760 --> 00:22:42,559
the beginning of last year

529
00:22:39,360 --> 00:22:45,120
i mean i had a lot of support i

530
00:22:42,559 --> 00:22:47,200
had some books i had john schliemann and

531
00:22:45,120 --> 00:22:48,879
alexander sanjay who already know a lot

532
00:22:47,200 --> 00:22:53,120
about spark data

533
00:22:48,880 --> 00:22:55,520
and you you have seen eventually

534
00:22:53,120 --> 00:22:56,479
the the presentation of of johannes

535
00:22:55,520 --> 00:22:59,679
leman

536
00:22:56,480 --> 00:23:02,799
they are not doing the the high abstract

537
00:22:59,679 --> 00:23:07,039
uh no say simple stuff

538
00:23:02,799 --> 00:23:10,400
but uh yeah and

539
00:23:07,039 --> 00:23:10,400
yeah that's it

540
00:23:11,360 --> 00:23:18,158
okay yeah these are actually not my

541
00:23:14,960 --> 00:23:22,159
questions we come from reddit

542
00:23:18,159 --> 00:23:23,679
okay that's nice

543
00:23:22,159 --> 00:23:25,440
you know some of them might have been

544
00:23:23,679 --> 00:23:26,320
answered already so the first question

545
00:23:25,440 --> 00:23:28,320
was uh

546
00:23:26,320 --> 00:23:30,240
if the effort goes well will we consider

547
00:23:28,320 --> 00:23:32,399
having the spark ada version replace the

548
00:23:30,240 --> 00:23:35,200
original c plus plus one

549
00:23:32,400 --> 00:23:36,159
and i suppose if not what would convince

550
00:23:35,200 --> 00:23:38,880
them so you

551
00:23:36,159 --> 00:23:40,080
enough to make such a move so i think uh

552
00:23:38,880 --> 00:23:41,600
what was sourcing

553
00:23:40,080 --> 00:23:42,879
convert what if the effort goes

554
00:23:41,600 --> 00:23:45,199
available we'll consider having the

555
00:23:42,880 --> 00:23:47,279
spark ada version replace the original c

556
00:23:45,200 --> 00:23:49,520
plus plus kernel

557
00:23:47,279 --> 00:23:51,039
ah yeah yeah okay no i don't think that

558
00:23:49,520 --> 00:23:54,158
this will happen

559
00:23:51,039 --> 00:23:54,960
because the first thing is we always

560
00:23:54,159 --> 00:23:56,799
leveraged

561
00:23:54,960 --> 00:23:58,480
from the benefits of having multiple

562
00:23:56,799 --> 00:24:00,960
kernels

563
00:23:58,480 --> 00:24:01,520
underneath g node so what you have

564
00:24:00,960 --> 00:24:05,039
normally

565
00:24:01,520 --> 00:24:08,320
is that that it's very broad a testing

566
00:24:05,039 --> 00:24:10,559
basis yeah if one kernel behaves

567
00:24:08,320 --> 00:24:12,559
one way the other the other way

568
00:24:10,559 --> 00:24:13,840
especially the scheduling for instance

569
00:24:12,559 --> 00:24:16,879
uh the timing

570
00:24:13,840 --> 00:24:19,199
it's all different so for for us

571
00:24:16,880 --> 00:24:20,720
i had a lot of benefits regarding

572
00:24:19,200 --> 00:24:22,960
development and testing

573
00:24:20,720 --> 00:24:24,960
so i don't see the point why to remove

574
00:24:22,960 --> 00:24:27,440
the base hw kernel it's a nice approach

575
00:24:24,960 --> 00:24:31,279
and has its benefits

576
00:24:27,440 --> 00:24:32,400
and i think i think especially the other

577
00:24:31,279 --> 00:24:34,559
thing is that

578
00:24:32,400 --> 00:24:35,679
when i start to redesign the spunky

579
00:24:34,559 --> 00:24:38,639
kernel it went

580
00:24:35,679 --> 00:24:39,440
it will end up with a an approach i

581
00:24:38,640 --> 00:24:41,760
think that is

582
00:24:39,440 --> 00:24:42,880
quite different from the base hw

583
00:24:41,760 --> 00:24:44,960
approach

584
00:24:42,880 --> 00:24:47,039
because all the memory layout has to

585
00:24:44,960 --> 00:24:49,760
change i have to rethink this

586
00:24:47,039 --> 00:24:51,679
and therefore i don't think that this is

587
00:24:49,760 --> 00:24:54,879
a replacement for base hw

588
00:24:51,679 --> 00:24:58,559
it's just another way to emerge

589
00:24:54,880 --> 00:25:00,880
okay then there was a question what

590
00:24:58,559 --> 00:25:04,639
hardware are you using

591
00:25:00,880 --> 00:25:07,760
uh excuse me what hardware are you

592
00:25:04,640 --> 00:25:10,799
uh yeah this this is x86

593
00:25:07,760 --> 00:25:13,520
with 64-bit only i

594
00:25:10,799 --> 00:25:15,279
i specialized on this platform for the

595
00:25:13,520 --> 00:25:18,320
first step of course

596
00:25:15,279 --> 00:25:20,640
and unfortunately

597
00:25:18,320 --> 00:25:22,320
yeah i don't have the time to do it all

598
00:25:20,640 --> 00:25:25,360
at once

599
00:25:22,320 --> 00:25:29,600
but yeah i'm planning to go on arm

600
00:25:25,360 --> 00:25:31,840
also if this is possible and the base hw

601
00:25:29,600 --> 00:25:35,039
kernel already ex

602
00:25:31,840 --> 00:25:37,039
supports several arm platforms and x86

603
00:25:35,039 --> 00:25:40,240
and risk five and stuff

604
00:25:37,039 --> 00:25:42,559
uh we'll see with time but for me the

605
00:25:40,240 --> 00:25:44,240
most important thing is x86 because i'm

606
00:25:42,559 --> 00:25:46,240
using it on my laptop

607
00:25:44,240 --> 00:25:48,080
so in your particular case with the

608
00:25:46,240 --> 00:25:50,720
spunky kernel would basically be a

609
00:25:48,080 --> 00:25:54,720
question of the runtime

610
00:25:50,720 --> 00:25:57,760
from ada sorry

611
00:25:54,720 --> 00:25:59,279
yeah so from your side from the spunky

612
00:25:57,760 --> 00:26:02,158
kernel it would basically

613
00:25:59,279 --> 00:26:04,400
be the question of what uh hardware is

614
00:26:02,159 --> 00:26:07,840
supported by the ada runtime

615
00:26:04,400 --> 00:26:10,440
uh yeah yeah yeah i i

616
00:26:07,840 --> 00:26:12,000
yeah the question was from why

617
00:26:10,440 --> 00:26:14,799
[Music]

618
00:26:12,000 --> 00:26:16,799
if i specialize on a certain

619
00:26:14,799 --> 00:26:19,360
architecture and

620
00:26:16,799 --> 00:26:21,360
if it for my view was only decision a

621
00:26:19,360 --> 00:26:24,240
decision because of the

622
00:26:21,360 --> 00:26:24,719
of the support of the other runtime and

623
00:26:24,240 --> 00:26:27,039
yeah

624
00:26:24,720 --> 00:26:27,760
i mean i i haven't thought about it a

625
00:26:27,039 --> 00:26:29,600
lot uh

626
00:26:27,760 --> 00:26:31,919
the the thing is that this blocking

627
00:26:29,600 --> 00:26:36,080
crypto project that we had that

628
00:26:31,919 --> 00:26:38,000
is developed for x86 now and so it was

629
00:26:36,080 --> 00:26:41,439
natural for me to keep this

630
00:26:38,000 --> 00:26:44,480
also because that it has the most uh

631
00:26:41,440 --> 00:26:47,840
the most beneficial uh the biggest

632
00:26:44,480 --> 00:26:50,480
benefit for me yeah okay next question

633
00:26:47,840 --> 00:26:51,439
yeah sorry are there any other questions

634
00:26:50,480 --> 00:26:56,240
here in the room

635
00:26:51,440 --> 00:26:56,240
sorry yeah i i intermixed them yeah okay

636
00:26:59,039 --> 00:27:05,200
yeah yeah okay uh no sorry it might be

637
00:27:02,159 --> 00:27:08,640
uh maybe you've missed it

638
00:27:05,200 --> 00:27:10,159
i don't know there is this borrowing

639
00:27:08,640 --> 00:27:12,080
support for

640
00:27:10,159 --> 00:27:14,080
proving contracts with spark but the

641
00:27:12,080 --> 00:27:16,559
problem is that this borrowing

642
00:27:14,080 --> 00:27:19,039
is not yet supported in the error

643
00:27:16,559 --> 00:27:21,440
runtime of genome

644
00:27:19,039 --> 00:27:22,240
so this would be a thing yeah i don't

645
00:27:21,440 --> 00:27:24,080
know it's a

646
00:27:22,240 --> 00:27:26,480
little bit more work uh this is another

647
00:27:24,080 --> 00:27:29,279
thing i want to go into it

648
00:27:26,480 --> 00:27:30,399
uh i missed it in the plans uh that i

649
00:27:29,279 --> 00:27:32,559
want to broaden the

650
00:27:30,399 --> 00:27:34,080
the support of the other end time genome

651
00:27:32,559 --> 00:27:37,200
because there are several things

652
00:27:34,080 --> 00:27:40,080
missing yeah okay

653
00:27:37,200 --> 00:27:41,679
yeah okay so what are some of the

654
00:27:40,080 --> 00:27:44,639
significant challenges when

655
00:27:41,679 --> 00:27:45,279
with converting to ada okay the question

656
00:27:44,640 --> 00:27:47,840
is what

657
00:27:45,279 --> 00:27:49,679
are the significant what were the

658
00:27:47,840 --> 00:27:52,158
significant challenges when converting

659
00:27:49,679 --> 00:27:52,159
to ada

660
00:27:53,120 --> 00:27:59,840
i must say it wasn't a lot

661
00:27:57,200 --> 00:28:01,039
mostly because i restricted myself a lot

662
00:27:59,840 --> 00:28:04,639
in either

663
00:28:01,039 --> 00:28:08,720
because i wanted to make it very well

664
00:28:04,640 --> 00:28:11,760
fit to spark later for instance

665
00:28:08,720 --> 00:28:16,559
i wanted to have pure packages only

666
00:28:11,760 --> 00:28:19,039
i wanted to don't have

667
00:28:16,559 --> 00:28:19,760
inheritance yet because i don't know a

668
00:28:19,039 --> 00:28:23,760
lot about

669
00:28:19,760 --> 00:28:27,360
inheritance no no more

670
00:28:23,760 --> 00:28:29,440
but yeah so i i

671
00:28:27,360 --> 00:28:31,600
changed a little bit the base hw design

672
00:28:29,440 --> 00:28:35,039
for instance to not use inheritance that

673
00:28:31,600 --> 00:28:38,080
uh heavily and i

674
00:28:35,039 --> 00:28:38,960
yeah these preparation works or for

675
00:28:38,080 --> 00:28:41,918
instance i

676
00:28:38,960 --> 00:28:42,720
i want to don't wanted procedures within

677
00:28:41,919 --> 00:28:45,360
any no

678
00:28:42,720 --> 00:28:46,880
functions within out parameters yeah for

679
00:28:45,360 --> 00:28:47,760
that i had to change the c plus plus

680
00:28:46,880 --> 00:28:50,799
code a little bit

681
00:28:47,760 --> 00:28:53,440
but i think uh the main thing where a

682
00:28:50,799 --> 00:28:55,918
little detail in the devil

683
00:28:53,440 --> 00:28:57,520
that uh generics didn't work out of the

684
00:28:55,919 --> 00:29:00,799
box because

685
00:28:57,520 --> 00:29:03,918
we had no finalization

686
00:29:00,799 --> 00:29:04,879
not not generics in general but generics

687
00:29:03,919 --> 00:29:09,120
with

688
00:29:04,880 --> 00:29:11,200
with how is it called with

689
00:29:09,120 --> 00:29:12,879
incomplete types if you have an

690
00:29:11,200 --> 00:29:13,600
incomplete type and want to put it in a

691
00:29:12,880 --> 00:29:15,760
generic

692
00:29:13,600 --> 00:29:18,080
there you need finance finalization by

693
00:29:15,760 --> 00:29:21,600
default and this isn't supported yet so

694
00:29:18,080 --> 00:29:24,559
johannes helped me with this a lot again

695
00:29:21,600 --> 00:29:25,120
he knew then after some research that

696
00:29:24,559 --> 00:29:27,200
that

697
00:29:25,120 --> 00:29:28,559
there is a pragma for no finalization

698
00:29:27,200 --> 00:29:32,240
yeah thanks

699
00:29:28,559 --> 00:29:33,279
a second uh johannes just comment about

700
00:29:32,240 --> 00:29:37,600
the

701
00:29:33,279 --> 00:29:39,440
support the runtime supports

702
00:29:37,600 --> 00:29:41,120
the boring concept as far as i know

703
00:29:39,440 --> 00:29:42,159
purely in spark so you don't need any

704
00:29:41,120 --> 00:29:43,678
runtime support

705
00:29:42,159 --> 00:29:46,000
but at the point when you started there

706
00:29:43,679 --> 00:29:48,720
was just no boring support in spark

707
00:29:46,000 --> 00:29:50,399
yeah so you can could in theory now use

708
00:29:48,720 --> 00:29:52,480
pointers but

709
00:29:50,399 --> 00:29:55,039
the support you need is when you are

710
00:29:52,480 --> 00:29:55,039
going to prove

711
00:29:59,200 --> 00:30:05,840
okay yeah i i just blended it out

712
00:30:02,399 --> 00:30:09,360
for the first time actually yeah okay

713
00:30:05,840 --> 00:30:12,000
okay almost last question also

714
00:30:09,360 --> 00:30:13,199
yeah no problem is the conversion to ada

715
00:30:12,000 --> 00:30:16,480
helping to identify

716
00:30:13,200 --> 00:30:19,520
issues that weren't apparent before

717
00:30:16,480 --> 00:30:21,760
not real issues i must admit because

718
00:30:19,520 --> 00:30:23,760
we had all already productive systems

719
00:30:21,760 --> 00:30:24,960
running on base hw before and it was

720
00:30:23,760 --> 00:30:27,360
tested very well

721
00:30:24,960 --> 00:30:28,000
but what i found and definitely where

722
00:30:27,360 --> 00:30:31,199
some

723
00:30:28,000 --> 00:30:34,320
uh some no i don't

724
00:30:31,200 --> 00:30:37,440
don't i i don't know

725
00:30:34,320 --> 00:30:40,158
like like uh gray areas

726
00:30:37,440 --> 00:30:41,919
where i was lucky that we don't uh

727
00:30:40,159 --> 00:30:42,480
didn't have problems with the c plus

728
00:30:41,919 --> 00:30:44,000
plus

729
00:30:42,480 --> 00:30:46,080
encode before and because it was

730
00:30:44,000 --> 00:30:49,679
programmed a little bit dirty

731
00:30:46,080 --> 00:30:51,678
yeah and when when i started to

732
00:30:49,679 --> 00:30:52,960
to fix all the compile errors i had with

733
00:30:51,679 --> 00:30:56,080
adder and spark i had

734
00:30:52,960 --> 00:30:56,640
i had to clean up these these gray areas

735
00:30:56,080 --> 00:30:59,039
but

736
00:30:56,640 --> 00:31:00,159
there were no real issues with the base

737
00:30:59,039 --> 00:31:03,200
hw

738
00:31:00,159 --> 00:31:05,519
okay last question for

739
00:31:03,200 --> 00:31:06,480
normal data codes but basically from

740
00:31:05,519 --> 00:31:08,399
what i understood

741
00:31:06,480 --> 00:31:11,200
the gluing code between c plus plus and

742
00:31:08,399 --> 00:31:12,799
spark are you using any static analyzers

743
00:31:11,200 --> 00:31:15,919
and if so which one

744
00:31:12,799 --> 00:31:18,960
for the glue code between them no

745
00:31:15,919 --> 00:31:22,880
no uh i i didn't

746
00:31:18,960 --> 00:31:25,440
uh analyze it uh in in general um

747
00:31:22,880 --> 00:31:27,200
with you mean with approval or something

748
00:31:25,440 --> 00:31:30,399
like that

749
00:31:27,200 --> 00:31:32,080
yeah well i just you know voted him a

750
00:31:30,399 --> 00:31:34,080
couple of questions

751
00:31:32,080 --> 00:31:36,000
yeah this will be a future task

752
00:31:34,080 --> 00:31:37,360
definitely i i want to get rid of the

753
00:31:36,000 --> 00:31:38,320
glue code and the c plus plus code

754
00:31:37,360 --> 00:31:41,360
anyways

755
00:31:38,320 --> 00:31:44,840
so i didn't see a point in

756
00:31:41,360 --> 00:31:48,240
analyzing it yeah thanks

757
00:31:44,840 --> 00:31:59,760
yeah any other questions

758
00:31:48,240 --> 00:31:59,760
oh okay thanks

