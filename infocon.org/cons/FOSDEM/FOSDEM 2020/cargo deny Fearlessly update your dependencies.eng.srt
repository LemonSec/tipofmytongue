1
00:00:06,399 --> 00:00:09,679
uh yeah

2
00:00:07,359 --> 00:00:11,920
uh so this talk is about cargo deny

3
00:00:09,679 --> 00:00:14,920
which is a tool that

4
00:00:11,920 --> 00:00:16,560
we have made to help us manage our

5
00:00:14,920 --> 00:00:18,000
dependencies um

6
00:00:16,560 --> 00:00:20,000
so we're going to talk a little about

7
00:00:18,000 --> 00:00:22,560
the situation

8
00:00:20,000 --> 00:00:23,279
and kind of why we made this tool and

9
00:00:22,560 --> 00:00:25,119
what the

10
00:00:23,279 --> 00:00:26,880
idea of it is and then go through kind

11
00:00:25,119 --> 00:00:30,960
of what it currently offers and

12
00:00:26,880 --> 00:00:33,600
possible features for it

13
00:00:30,960 --> 00:00:34,880
a little bit about me uh i've been in

14
00:00:33,600 --> 00:00:38,800
game development for

15
00:00:34,880 --> 00:00:41,280
about 13 years um been at

16
00:00:38,800 --> 00:00:45,280
uh smaller companies larger companies

17
00:00:41,280 --> 00:00:47,840
and now very small companies

18
00:00:45,280 --> 00:00:48,480
and right now i'm at embark we're game

19
00:00:47,840 --> 00:00:51,520
development

20
00:00:48,480 --> 00:00:52,480
studio and we're riding an engine and

21
00:00:51,520 --> 00:00:56,320
platform in rust

22
00:00:52,480 --> 00:00:56,319
as well as other stuff not in rust

23
00:00:57,199 --> 00:01:00,879
so yeah so here's the situation about

24
00:00:59,280 --> 00:01:04,720
why we created the tool

25
00:01:00,879 --> 00:01:08,720
um and it is totally our fault

26
00:01:04,720 --> 00:01:11,439
um so can i give a context of where

27
00:01:08,720 --> 00:01:12,798
most of us are coming from we're we've

28
00:01:11,439 --> 00:01:15,520
been in game dev for

29
00:01:12,799 --> 00:01:16,479
uh quite a while and generally uh game

30
00:01:15,520 --> 00:01:19,360
development is in

31
00:01:16,479 --> 00:01:20,080
large mono repository style uh code

32
00:01:19,360 --> 00:01:24,000
bases

33
00:01:20,080 --> 00:01:26,720
um and there's basically very very

34
00:01:24,000 --> 00:01:28,720
few uh external dependencies and all the

35
00:01:26,720 --> 00:01:32,320
external dependencies that you do have

36
00:01:28,720 --> 00:01:35,679
are vendored typically into the codebase

37
00:01:32,320 --> 00:01:35,679
where they rot

38
00:01:36,079 --> 00:01:40,639
and basically as a kind of consequence

39
00:01:39,360 --> 00:01:43,600
of vendoring

40
00:01:40,640 --> 00:01:44,079
there's extremely little interaction

41
00:01:43,600 --> 00:01:46,320
with

42
00:01:44,079 --> 00:01:47,279
game development in general and open

43
00:01:46,320 --> 00:01:49,679
source software

44
00:01:47,280 --> 00:01:53,040
so even though some software is used

45
00:01:49,680 --> 00:01:56,960
like a typical example would be zlib or

46
00:01:53,040 --> 00:01:58,560
other compression libraries like

47
00:01:56,960 --> 00:02:00,479
they get pulled down they get vendored

48
00:01:58,560 --> 00:02:02,000
and basically that's it there's no more

49
00:02:00,479 --> 00:02:04,719
interaction there's no bug reports

50
00:02:02,000 --> 00:02:08,080
there's no pr's there's no

51
00:02:04,719 --> 00:02:10,000
kind of hey could you add this feature

52
00:02:08,080 --> 00:02:11,680
um that's important to us usually it's

53
00:02:10,000 --> 00:02:12,800
added internally never shared with

54
00:02:11,680 --> 00:02:15,840
anyone else

55
00:02:12,800 --> 00:02:17,200
um and and this is kind of like this

56
00:02:15,840 --> 00:02:18,879
would be what i would call classical

57
00:02:17,200 --> 00:02:20,799
game dev uh not everyone

58
00:02:18,879 --> 00:02:23,599
operates this way but this is kind of

59
00:02:20,800 --> 00:02:27,040
the modus operandi

60
00:02:23,599 --> 00:02:29,679
and so if you turn to

61
00:02:27,040 --> 00:02:31,040
the rust ecosystem the rust ecosystem is

62
00:02:29,680 --> 00:02:33,680
basically complete

63
00:02:31,040 --> 00:02:35,599
and utter opposite of this right pretty

64
00:02:33,680 --> 00:02:38,720
much everything is

65
00:02:35,599 --> 00:02:40,399
shared and public and if it's not public

66
00:02:38,720 --> 00:02:42,000
at the beginning it eventually becomes

67
00:02:40,400 --> 00:02:44,319
public

68
00:02:42,000 --> 00:02:46,000
or at least people can talk openly about

69
00:02:44,319 --> 00:02:49,119
what they're working on even if it's not

70
00:02:46,000 --> 00:02:51,920
actual public code

71
00:02:49,120 --> 00:02:52,319
uh and obviously everyone knows like

72
00:02:51,920 --> 00:02:54,160
it's

73
00:02:52,319 --> 00:02:56,238
uh quite large i think the screenshot

74
00:02:54,160 --> 00:03:00,079
was taken two days ago or something

75
00:02:56,239 --> 00:03:04,000
um and yeah there's like a huge

76
00:03:00,080 --> 00:03:06,720
but but uh being a huge uh

77
00:03:04,000 --> 00:03:07,440
package well not compared to npm but a

78
00:03:06,720 --> 00:03:09,760
large

79
00:03:07,440 --> 00:03:13,519
package repository uh with a lot of

80
00:03:09,760 --> 00:03:16,079
crates there's a huge number of axes

81
00:03:13,519 --> 00:03:16,560
that have different levels of quality

82
00:03:16,080 --> 00:03:20,000
and

83
00:03:16,560 --> 00:03:23,570
commitment from maintainers and uh

84
00:03:20,000 --> 00:03:26,239
yeah there's like just a huge amount of

85
00:03:23,570 --> 00:03:30,239
[Music]

86
00:03:26,239 --> 00:03:30,239
options available across the ecosystem

87
00:03:30,959 --> 00:03:34,879
so going back to game development like

88
00:03:33,200 --> 00:03:35,679
uh when we started the company like

89
00:03:34,879 --> 00:03:37,840
obviously

90
00:03:35,680 --> 00:03:38,720
uh most game development is on c plus

91
00:03:37,840 --> 00:03:41,760
plus so

92
00:03:38,720 --> 00:03:45,519
going to rust was a big

93
00:03:41,760 --> 00:03:48,239
kind of thing that we wanted to do um

94
00:03:45,519 --> 00:03:50,080
and obviously the one of the motivating

95
00:03:48,239 --> 00:03:51,920
factors for this was using this amazing

96
00:03:50,080 --> 00:03:55,040
crazy ecosystem

97
00:03:51,920 --> 00:03:56,480
um so we use uh quite a lot of external

98
00:03:55,040 --> 00:03:59,840
dependencies on our

99
00:03:56,480 --> 00:04:00,798
main primary project right now about 400

100
00:03:59,840 --> 00:04:04,239
plus

101
00:04:00,799 --> 00:04:04,879
um and we tend to keep all of them up to

102
00:04:04,239 --> 00:04:08,480
date we

103
00:04:04,879 --> 00:04:12,000
kind of tend to live ahead we

104
00:04:08,480 --> 00:04:13,439
update some sometimes several times a

105
00:04:12,000 --> 00:04:16,720
day sometimes

106
00:04:13,439 --> 00:04:21,040
but typically on a weekly cadence

107
00:04:16,720 --> 00:04:24,240
and we actually have never vendored

108
00:04:21,040 --> 00:04:25,040
any dependencies we always fork use a

109
00:04:24,240 --> 00:04:27,919
patch to

110
00:04:25,040 --> 00:04:28,400
get repository until our pr is merged

111
00:04:27,919 --> 00:04:31,198
and then

112
00:04:28,400 --> 00:04:32,239
returned back to the original project

113
00:04:31,199 --> 00:04:33,840
and so we're

114
00:04:32,240 --> 00:04:36,960
kind of working quite differently from

115
00:04:33,840 --> 00:04:36,960
how we used to work

116
00:04:39,199 --> 00:04:43,759
so yeah so the problem that comes with

117
00:04:42,000 --> 00:04:45,199
this the created ecosystem is moving

118
00:04:43,759 --> 00:04:48,800
quite quickly

119
00:04:45,199 --> 00:04:50,479
we're updating quite frequently and

120
00:04:48,800 --> 00:04:52,560
you can't just look at the cargo log

121
00:04:50,479 --> 00:04:55,758
file or cargo tree

122
00:04:52,560 --> 00:04:56,160
or license hound or you know all the

123
00:04:55,759 --> 00:04:58,080
kind of

124
00:04:56,160 --> 00:04:59,919
stuff all the time is just extremely

125
00:04:58,080 --> 00:05:03,120
tedious

126
00:04:59,919 --> 00:05:06,719
and while cargo gives some tools

127
00:05:03,120 --> 00:05:08,080
it doesn't actually give you a complete

128
00:05:06,720 --> 00:05:10,960
picture

129
00:05:08,080 --> 00:05:11,680
of of the crates because it doesn't

130
00:05:10,960 --> 00:05:13,120
really have

131
00:05:11,680 --> 00:05:14,560
that capability because people have

132
00:05:13,120 --> 00:05:15,680
different use cases and different uh

133
00:05:14,560 --> 00:05:18,960
requirements

134
00:05:15,680 --> 00:05:22,000
and it's kind of up to you

135
00:05:18,960 --> 00:05:25,198
and basically uh we have this cadence

136
00:05:22,000 --> 00:05:28,000
now of updating quite frequently and

137
00:05:25,199 --> 00:05:29,840
the rust ecosystem is obviously uh

138
00:05:28,000 --> 00:05:31,759
moving quite fast and

139
00:05:29,840 --> 00:05:33,198
moving faster in terms of new crates and

140
00:05:31,759 --> 00:05:35,840
some crates get updated you know

141
00:05:33,199 --> 00:05:37,199
multiple times a day and we basically

142
00:05:35,840 --> 00:05:38,719
want to keep this cadence

143
00:05:37,199 --> 00:05:40,320
for now maybe we'll change it in the

144
00:05:38,720 --> 00:05:42,000
future but for now we want to be

145
00:05:40,320 --> 00:05:44,000
updating quickly and fastly

146
00:05:42,000 --> 00:05:46,639
getting new features fixing bugs all

147
00:05:44,000 --> 00:05:46,639
that kind of stuff

148
00:05:46,880 --> 00:05:53,919
so that's where cargo denied comes in so

149
00:05:50,639 --> 00:05:54,800
so basically our kind of high concept of

150
00:05:53,919 --> 00:05:57,520
the the tool

151
00:05:54,800 --> 00:05:59,840
is that it's a linter for your crate

152
00:05:57,520 --> 00:05:59,840
graph

153
00:06:01,440 --> 00:06:04,719
so so the idea is to kind of treat your

154
00:06:03,680 --> 00:06:07,840
crate graph as

155
00:06:04,720 --> 00:06:08,479
a code and basically do what clippy does

156
00:06:07,840 --> 00:06:11,599
which is

157
00:06:08,479 --> 00:06:12,080
look for things that you've configured

158
00:06:11,600 --> 00:06:15,520
for

159
00:06:12,080 --> 00:06:18,000
and warn you or error and

160
00:06:15,520 --> 00:06:19,599
basically make sure that as your crate

161
00:06:18,000 --> 00:06:25,120
graph changes

162
00:06:19,600 --> 00:06:25,120
your expectations are met every time

163
00:06:25,280 --> 00:06:29,520
and so what we're checking for currently

164
00:06:27,360 --> 00:06:31,520
are licenses

165
00:06:29,520 --> 00:06:32,960
bands or you know basically i don't want

166
00:06:31,520 --> 00:06:36,159
particular crate or crates

167
00:06:32,960 --> 00:06:38,960
in my dependency graph uh duplic

168
00:06:36,160 --> 00:06:39,759
duplicate versions of crates uh security

169
00:06:38,960 --> 00:06:43,840
advisories

170
00:06:39,759 --> 00:06:43,840
and sources of your crates

171
00:06:45,280 --> 00:06:49,039
licenses so yeah we just had a little

172
00:06:48,720 --> 00:06:52,240
bit

173
00:06:49,039 --> 00:06:55,840
of information uh from uh

174
00:06:52,240 --> 00:06:59,120
about licenses uh so kind of

175
00:06:55,840 --> 00:06:59,919
again going over this crates usually

176
00:06:59,120 --> 00:07:01,759
specify their

177
00:06:59,919 --> 00:07:03,840
their license terms in the cargo

178
00:07:01,759 --> 00:07:05,599
metadata

179
00:07:03,840 --> 00:07:09,359
and this is kind of a pretty pretty

180
00:07:05,599 --> 00:07:09,360
typical one mit or apache 2

181
00:07:09,840 --> 00:07:14,719
and then they also have the ability to

182
00:07:11,680 --> 00:07:17,599
give a relative path to a license file

183
00:07:14,720 --> 00:07:20,960
but you have to manually inspect that

184
00:07:17,599 --> 00:07:22,719
because cargo doesn't care about it

185
00:07:20,960 --> 00:07:24,318
um and so basically the question we want

186
00:07:22,720 --> 00:07:24,960
to ask is are the all the crates that

187
00:07:24,319 --> 00:07:27,520
we're using

188
00:07:24,960 --> 00:07:28,400
using licenses that we find acceptable

189
00:07:27,520 --> 00:07:30,240
um

190
00:07:28,400 --> 00:07:32,400
and then making sure that holds true

191
00:07:30,240 --> 00:07:34,880
over time so if we add new crates

192
00:07:32,400 --> 00:07:35,679
it has licenses that we find acceptable

193
00:07:34,880 --> 00:07:37,440
and then

194
00:07:35,680 --> 00:07:38,720
uh it's also possible for crates to

195
00:07:37,440 --> 00:07:41,440
change licenses

196
00:07:38,720 --> 00:07:42,639
uh when they make a version change

197
00:07:41,440 --> 00:07:45,840
sometimes even in

198
00:07:42,639 --> 00:07:45,840
patch versions

199
00:07:46,400 --> 00:07:50,239
and so so basically this is a short

200
00:07:48,960 --> 00:07:52,479
snippet of a

201
00:07:50,240 --> 00:07:53,840
configuration that you could have so

202
00:07:52,479 --> 00:07:55,280
basically say

203
00:07:53,840 --> 00:07:57,440
you can configure what happens with

204
00:07:55,280 --> 00:08:00,878
unlicensed crates

205
00:07:57,440 --> 00:08:03,280
a crates out of copyleft

206
00:08:00,879 --> 00:08:04,720
and then a set of licenses that you

207
00:08:03,280 --> 00:08:08,000
explicitly allow

208
00:08:04,720 --> 00:08:08,400
as well as kind of exceptions for cases

209
00:08:08,000 --> 00:08:10,319
where

210
00:08:08,400 --> 00:08:12,560
you maybe don't want to blanket allow a

211
00:08:10,319 --> 00:08:16,800
particular license across all the crates

212
00:08:12,560 --> 00:08:16,800
possible but on a particular crate

213
00:08:16,879 --> 00:08:20,879
and then you can have other things like

214
00:08:18,479 --> 00:08:25,039
fs free or osi approved

215
00:08:20,879 --> 00:08:28,479
as well basically what it does is

216
00:08:25,039 --> 00:08:31,680
evaluates the sp spdx expression

217
00:08:28,479 --> 00:08:34,159
that's gathered from the crate um

218
00:08:31,680 --> 00:08:35,440
and so in this case because we

219
00:08:34,159 --> 00:08:38,080
explicitly allowed both

220
00:08:35,440 --> 00:08:39,599
mit and apache 2 it evaluates to true

221
00:08:38,080 --> 00:08:40,719
because both sides of the expression are

222
00:08:39,599 --> 00:08:44,240
true

223
00:08:40,719 --> 00:08:46,720
and this works for basically all

224
00:08:44,240 --> 00:08:47,920
spdex expressions including ones that

225
00:08:46,720 --> 00:08:51,519
actually aren't representable

226
00:08:47,920 --> 00:08:54,160
in cargo because they're parsing

227
00:08:51,519 --> 00:08:55,120
in cargo for the license field is

228
00:08:54,160 --> 00:08:57,519
actually not

229
00:08:55,120 --> 00:08:57,519
correct

230
00:09:00,160 --> 00:09:06,560
and so as we saw earlier there are

231
00:09:03,360 --> 00:09:07,839
some caveats to this

232
00:09:06,560 --> 00:09:09,839
right now there's only kind of two

233
00:09:07,839 --> 00:09:11,760
sources of input

234
00:09:09,839 --> 00:09:13,519
which is the license field itself as

235
00:09:11,760 --> 00:09:14,240
well as any license files that are in

236
00:09:13,519 --> 00:09:16,800
the crate route

237
00:09:14,240 --> 00:09:18,080
and so we basically scan the license

238
00:09:16,800 --> 00:09:21,680
files

239
00:09:18,080 --> 00:09:23,920
to determine the license that it's

240
00:09:21,680 --> 00:09:25,599
in the file and then we basically

241
00:09:23,920 --> 00:09:26,640
combine them all together with an and

242
00:09:25,600 --> 00:09:29,760
expression

243
00:09:26,640 --> 00:09:33,040
uh to be maximally um

244
00:09:29,760 --> 00:09:36,319
uh covered uh but

245
00:09:33,040 --> 00:09:39,680
uh in practice um that's

246
00:09:36,320 --> 00:09:40,080
not really accurate because especially

247
00:09:39,680 --> 00:09:43,439
for

248
00:09:40,080 --> 00:09:44,000
c dependencies people tend to include c

249
00:09:43,440 --> 00:09:46,399
code

250
00:09:44,000 --> 00:09:47,120
into the rest crate link it in with

251
00:09:46,399 --> 00:09:48,800
everything else

252
00:09:47,120 --> 00:09:50,399
and then kind of completely ignore that

253
00:09:48,800 --> 00:09:51,839
the sea dependency has a completely

254
00:09:50,399 --> 00:09:53,519
different license than the rest of the

255
00:09:51,839 --> 00:09:56,640
crate

256
00:09:53,519 --> 00:09:58,640
and um yeah so

257
00:09:56,640 --> 00:09:59,839
we have a another tool called cargo

258
00:09:58,640 --> 00:10:02,720
about which is

259
00:09:59,839 --> 00:10:04,079
uh about kind of doing a similar thing

260
00:10:02,720 --> 00:10:06,320
to the

261
00:10:04,079 --> 00:10:07,439
uh notice uh thing that we heard about

262
00:10:06,320 --> 00:10:09,920
earlier but the

263
00:10:07,440 --> 00:10:11,680
basic idea is that it takes it does do

264
00:10:09,920 --> 00:10:12,399
full source code scanning of everything

265
00:10:11,680 --> 00:10:14,399
and then

266
00:10:12,399 --> 00:10:16,480
uh finds all licenses and make sure they

267
00:10:14,399 --> 00:10:17,440
comply with uh what the crate says and

268
00:10:16,480 --> 00:10:20,480
then otherwise

269
00:10:17,440 --> 00:10:22,160
it'll force you to specify

270
00:10:20,480 --> 00:10:23,839
the licenses that you found and what the

271
00:10:22,160 --> 00:10:25,120
expression is for the the crate as a

272
00:10:23,839 --> 00:10:28,399
whole

273
00:10:25,120 --> 00:10:30,160
uh but yeah cargo and i's job is to do

274
00:10:28,399 --> 00:10:34,800
that very very quickly so this

275
00:10:30,160 --> 00:10:34,800
takes you know a millisecond or so

276
00:10:34,880 --> 00:10:42,560
um so yeah there are crates that we

277
00:10:38,720 --> 00:10:46,000
don't want um and this is totally fine

278
00:10:42,560 --> 00:10:47,518
uh not all crates match the requirements

279
00:10:46,000 --> 00:10:50,000
that you have for your project

280
00:10:47,519 --> 00:10:51,040
and there's a lot of crates that have

281
00:10:50,000 --> 00:10:53,440
different

282
00:10:51,040 --> 00:10:55,279
philosophies about how they update or

283
00:10:53,440 --> 00:10:57,120
what features they provide

284
00:10:55,279 --> 00:10:59,040
versus other crates that kind of operate

285
00:10:57,120 --> 00:11:02,000
in the same niche

286
00:10:59,040 --> 00:11:03,519
and so sometimes we find them and we're

287
00:11:02,000 --> 00:11:05,920
we say yeah we don't want this

288
00:11:03,519 --> 00:11:07,920
and we want to keep it out for all time

289
00:11:05,920 --> 00:11:09,439
uh so particular example

290
00:11:07,920 --> 00:11:11,040
uh that was kind of the motivating

291
00:11:09,440 --> 00:11:12,240
reason for creating this tool in the

292
00:11:11,040 --> 00:11:16,719
first place was uh

293
00:11:12,240 --> 00:11:19,040
openssl we despise openssl

294
00:11:16,720 --> 00:11:20,240
and unfortunately basically anytime you

295
00:11:19,040 --> 00:11:22,319
do tls

296
00:11:20,240 --> 00:11:23,920
and the rust ecosystem it's almost

297
00:11:22,320 --> 00:11:26,079
always the case that

298
00:11:23,920 --> 00:11:27,120
openssl is the default implementation

299
00:11:26,079 --> 00:11:29,439
for that

300
00:11:27,120 --> 00:11:31,760
even if they provide a feature to use uh

301
00:11:29,440 --> 00:11:34,800
for example russell cell or something

302
00:11:31,760 --> 00:11:35,920
um and kind of the reason uh that we

303
00:11:34,800 --> 00:11:38,000
find this annoying is

304
00:11:35,920 --> 00:11:39,040
it does have system dependencies so if

305
00:11:38,000 --> 00:11:40,800
you have different

306
00:11:39,040 --> 00:11:42,560
systems they have different versions of

307
00:11:40,800 --> 00:11:44,719
open openssl and then particularly for

308
00:11:42,560 --> 00:11:46,479
windows we have some windows users who

309
00:11:44,720 --> 00:11:47,839
aren't necessarily programmers and it's

310
00:11:46,480 --> 00:11:48,640
another dependency that they have to

311
00:11:47,839 --> 00:11:50,959
install

312
00:11:48,640 --> 00:11:53,439
and keep up to date and it's just

313
00:11:50,959 --> 00:11:53,439
tedious

314
00:11:54,560 --> 00:11:57,599
so we have yeah this is a very simple

315
00:11:57,040 --> 00:12:00,160
example

316
00:11:57,600 --> 00:12:00,800
uh the reason is doing the name is you

317
00:12:00,160 --> 00:12:02,800
can also

318
00:12:00,800 --> 00:12:04,479
have specify particular versions that

319
00:12:02,800 --> 00:12:08,839
you deny instead of

320
00:12:04,480 --> 00:12:12,959
just the all versions of the crate

321
00:12:08,839 --> 00:12:15,920
uh and we do like a quick change here so

322
00:12:12,959 --> 00:12:17,760
that's request and we just turn off uh

323
00:12:15,920 --> 00:12:19,360
on default features by deleting the

324
00:12:17,760 --> 00:12:22,639
default features faults

325
00:12:19,360 --> 00:12:26,320
and by default request uses openssl

326
00:12:22,639 --> 00:12:28,880
and we see that there's an arinel

327
00:12:26,320 --> 00:12:29,680
and then basically every time cargo deny

328
00:12:28,880 --> 00:12:32,160
finds

329
00:12:29,680 --> 00:12:33,519
anything that anything wrong and it puts

330
00:12:32,160 --> 00:12:35,040
a warning or air that pertains to a

331
00:12:33,519 --> 00:12:39,120
particular crate

332
00:12:35,040 --> 00:12:41,439
it optionally will produce the

333
00:12:39,120 --> 00:12:42,880
inverse dependency graph basically how

334
00:12:41,440 --> 00:12:45,680
the crate gets pulled into your

335
00:12:42,880 --> 00:12:45,680
to your crate graph

336
00:12:48,160 --> 00:12:53,920
so the next check would be duplicates

337
00:12:51,279 --> 00:12:56,240
which is a kind of interesting case in

338
00:12:53,920 --> 00:12:56,240
rust

339
00:12:56,959 --> 00:13:01,599
so if you're not aware dependency

340
00:12:59,760 --> 00:13:05,120
resolution is hard

341
00:13:01,600 --> 00:13:09,040
and it's actually an mp hard problem

342
00:13:05,120 --> 00:13:10,800
and so uh some package managers

343
00:13:09,040 --> 00:13:12,719
uh will say you can only have one

344
00:13:10,800 --> 00:13:16,240
version of particular dependency

345
00:13:12,720 --> 00:13:19,040
in the in your project

346
00:13:16,240 --> 00:13:21,040
and if you have conflicting versions you

347
00:13:19,040 --> 00:13:24,160
have to figure out how to

348
00:13:21,040 --> 00:13:27,279
manually go down to one version

349
00:13:24,160 --> 00:13:30,319
cargo however does not it

350
00:13:27,279 --> 00:13:30,320
introduces a trade-off

351
00:13:30,639 --> 00:13:34,959
so here's a really simple case so we

352
00:13:33,440 --> 00:13:38,480
have a year's crate

353
00:13:34,959 --> 00:13:41,359
that depends on both theirs some other

354
00:13:38,480 --> 00:13:42,720
crate as well as log and then theirs

355
00:13:41,360 --> 00:13:44,160
crate also depends on log but

356
00:13:42,720 --> 00:13:45,279
fortunately they both resolve to the

357
00:13:44,160 --> 00:13:46,959
same version

358
00:13:45,279 --> 00:13:48,639
and so everything's fine right you just

359
00:13:46,959 --> 00:13:52,479
have one version of log and

360
00:13:48,639 --> 00:13:55,120
everything is great uh the much more

361
00:13:52,480 --> 00:13:55,519
common case in in the rest ecosystem is

362
00:13:55,120 --> 00:13:58,560
that

363
00:13:55,519 --> 00:13:59,040
you depend on uh one version of log you

364
00:13:58,560 --> 00:14:00,800
have

365
00:13:59,040 --> 00:14:02,160
another dependency has a different

366
00:14:00,800 --> 00:14:05,439
version of log

367
00:14:02,160 --> 00:14:08,160
and so in this case

368
00:14:05,440 --> 00:14:08,880
like in the classical dependency

369
00:14:08,160 --> 00:14:11,600
resolution

370
00:14:08,880 --> 00:14:11,920
this is unsatisfiable and like you have

371
00:14:11,600 --> 00:14:13,600
to

372
00:14:11,920 --> 00:14:15,599
choose one or the other and you have to

373
00:14:13,600 --> 00:14:19,120
somehow get them to both

374
00:14:15,600 --> 00:14:23,120
work but cargo

375
00:14:19,120 --> 00:14:23,120
just says why not both

376
00:14:24,079 --> 00:14:29,519
and this is great by saying we can have

377
00:14:27,199 --> 00:14:32,000
multiple versions of the same dependency

378
00:14:29,519 --> 00:14:33,360
you can automatically kind of resolve

379
00:14:32,000 --> 00:14:36,079
dependency

380
00:14:33,360 --> 00:14:36,880
dependencies quite easily and and also

381
00:14:36,079 --> 00:14:40,160
fast

382
00:14:36,880 --> 00:14:43,279
this is kind of one of the great kind of

383
00:14:40,160 --> 00:14:44,800
introductions to us like you know when

384
00:14:43,279 --> 00:14:47,040
you're coming especially from like c

385
00:14:44,800 --> 00:14:49,199
plus or something and you're adding

386
00:14:47,040 --> 00:14:51,279
dependencies and getting functionality

387
00:14:49,199 --> 00:14:52,479
and everything just works and it's kind

388
00:14:51,279 --> 00:14:55,760
of magical

389
00:14:52,480 --> 00:14:57,760
um and it also allows uh

390
00:14:55,760 --> 00:14:58,800
most importantly for the ecosystem as a

391
00:14:57,760 --> 00:15:02,000
whole to

392
00:14:58,800 --> 00:15:04,319
evolve at differing paces right so one

393
00:15:02,000 --> 00:15:06,800
crate can decide i want to use this

394
00:15:04,320 --> 00:15:08,560
bleeding edge version of some crate and

395
00:15:06,800 --> 00:15:10,959
then the rest of the ecosystem is

396
00:15:08,560 --> 00:15:12,399
saying okay well actually that one's

397
00:15:10,959 --> 00:15:15,439
kind of risky

398
00:15:12,399 --> 00:15:16,880
maybe i'll wait

399
00:15:15,440 --> 00:15:19,120
until it's kind of stabilized or

400
00:15:16,880 --> 00:15:21,199
something but they can both use that and

401
00:15:19,120 --> 00:15:24,839
you can use all the crates that use

402
00:15:21,199 --> 00:15:26,319
any of the versions and it's totally

403
00:15:24,839 --> 00:15:29,759
fine

404
00:15:26,320 --> 00:15:32,720
the cons of course are not great um

405
00:15:29,759 --> 00:15:33,440
so if you have more versions more crates

406
00:15:32,720 --> 00:15:35,920
then you

407
00:15:33,440 --> 00:15:36,720
download more to compile and then if you

408
00:15:35,920 --> 00:15:38,560
compile more

409
00:15:36,720 --> 00:15:40,639
you link more and if you link more you

410
00:15:38,560 --> 00:15:43,359
have larger outputs and that's both

411
00:15:40,639 --> 00:15:44,320
the actual final binaries that you ship

412
00:15:43,360 --> 00:15:47,360
as well as

413
00:15:44,320 --> 00:15:50,399
your local target directories which can

414
00:15:47,360 --> 00:15:54,000
get quite large and then the fun you

415
00:15:50,399 --> 00:15:57,440
expected type x and got type x

416
00:15:54,000 --> 00:16:00,399
thanks cargo no rust

417
00:15:57,440 --> 00:16:01,519
um so the duplicate handling basically

418
00:16:00,399 --> 00:16:04,639
gives you

419
00:16:01,519 --> 00:16:07,199
the way to

420
00:16:04,639 --> 00:16:08,399
see look at your crate graph give a

421
00:16:07,199 --> 00:16:10,639
concise kind of

422
00:16:08,399 --> 00:16:11,519
inclusion graph for that and then allow

423
00:16:10,639 --> 00:16:13,360
you to

424
00:16:11,519 --> 00:16:15,440
kind of manage how you deal with

425
00:16:13,360 --> 00:16:16,639
duplicates

426
00:16:15,440 --> 00:16:18,079
[Music]

427
00:16:16,639 --> 00:16:19,680
so we basically say okay we're going to

428
00:16:18,079 --> 00:16:23,199
deny multiple versions and we're going

429
00:16:19,680 --> 00:16:25,040
to skip a few

430
00:16:23,199 --> 00:16:26,719
and then this is kind of what it looks

431
00:16:25,040 --> 00:16:28,079
like so if we have two versions of

432
00:16:26,720 --> 00:16:30,800
base64

433
00:16:28,079 --> 00:16:32,160
um it'll basically give you the included

434
00:16:30,800 --> 00:16:34,479
graph for both

435
00:16:32,160 --> 00:16:35,519
all the versions they have more than

436
00:16:34,480 --> 00:16:38,800
more than two the

437
00:16:35,519 --> 00:16:41,279
two is the typical case and then kind of

438
00:16:38,800 --> 00:16:42,959
uh yeah highlight where they're coming

439
00:16:41,279 --> 00:16:45,839
in

440
00:16:42,959 --> 00:16:47,359
but also has a different graph output as

441
00:16:45,839 --> 00:16:51,040
well

442
00:16:47,360 --> 00:16:54,240
optionally and the idea is that

443
00:16:51,040 --> 00:16:56,160
uh the blue lines show the path to the

444
00:16:54,240 --> 00:16:57,920
lowest version which is typically the

445
00:16:56,160 --> 00:17:00,399
one that you want to get rid of

446
00:16:57,920 --> 00:17:02,160
uh and then the red path is the path to

447
00:17:00,399 --> 00:17:03,519
the one with the fewest number of edges

448
00:17:02,160 --> 00:17:06,319
which is typically going to be the one

449
00:17:03,519 --> 00:17:10,240
that's the easiest to remove

450
00:17:06,319 --> 00:17:12,399
uh obviously this is a contrived case

451
00:17:10,240 --> 00:17:14,640
uh this is kind of much more typically

452
00:17:12,400 --> 00:17:17,280
what uh the graph will look like

453
00:17:14,640 --> 00:17:18,799
um i think this is like x-way land and

454
00:17:17,280 --> 00:17:21,039
win it or something

455
00:17:18,799 --> 00:17:23,039
but yeah there's like multiple duplicate

456
00:17:21,039 --> 00:17:26,160
versions there that all go to this one

457
00:17:23,039 --> 00:17:27,679
and yeah it's it can be a mess um but

458
00:17:26,160 --> 00:17:31,360
the idea is that

459
00:17:27,679 --> 00:17:33,039
uh yeah it gives you the notice like hey

460
00:17:31,360 --> 00:17:35,199
something is here

461
00:17:33,039 --> 00:17:36,640
uh and then once you find nucleus then

462
00:17:35,200 --> 00:17:37,679
yeah we have to decide what we want to

463
00:17:36,640 --> 00:17:39,600
do with them

464
00:17:37,679 --> 00:17:42,400
uh sometimes you don't care and that's

465
00:17:39,600 --> 00:17:44,159
totally fine so then you just skip it

466
00:17:42,400 --> 00:17:45,520
and then often you'll want to maybe open

467
00:17:44,160 --> 00:17:49,039
a pr to bump

468
00:17:45,520 --> 00:17:51,120
a version that needs bumping or

469
00:17:49,039 --> 00:17:52,879
change your version to point to the same

470
00:17:51,120 --> 00:17:54,799
version that it depends he's using to

471
00:17:52,880 --> 00:17:56,960
just get rid of the duplicate

472
00:17:54,799 --> 00:18:01,200
there's basically you know whatever you

473
00:17:56,960 --> 00:18:04,080
want to do there's a lot of options

474
00:18:01,200 --> 00:18:04,880
and and kind of to reiterate kind of the

475
00:18:04,080 --> 00:18:06,799
point like

476
00:18:04,880 --> 00:18:08,000
uh we don't think duplicates are bad

477
00:18:06,799 --> 00:18:10,000
because like i said that

478
00:18:08,000 --> 00:18:11,280
it does have a lot of positives it can

479
00:18:10,000 --> 00:18:13,280
it lets you just do

480
00:18:11,280 --> 00:18:15,039
your work without kind of getting in the

481
00:18:13,280 --> 00:18:18,160
way

482
00:18:15,039 --> 00:18:19,280
but the duplicate detection is there so

483
00:18:18,160 --> 00:18:21,600
that you can

484
00:18:19,280 --> 00:18:24,879
notice it and actually make a decision

485
00:18:21,600 --> 00:18:24,879
about how you want to deal with it

486
00:18:25,360 --> 00:18:31,600
next we have advisories

487
00:18:28,559 --> 00:18:35,600
so the advisories is are built on top of

488
00:18:31,600 --> 00:18:37,600
rust sec so if anyone's used cargo audit

489
00:18:35,600 --> 00:18:39,439
this is the same core crate that cargo

490
00:18:37,600 --> 00:18:42,639
audit uses to

491
00:18:39,440 --> 00:18:46,080
download deserialize

492
00:18:42,640 --> 00:18:49,280
and inspect your your crates

493
00:18:46,080 --> 00:18:52,320
with advisories

494
00:18:49,280 --> 00:18:55,200
and this is cool because it allows for

495
00:18:52,320 --> 00:18:56,480
a kind of centralized knowledge base of

496
00:18:55,200 --> 00:18:57,200
advisories for all different kinds of

497
00:18:56,480 --> 00:18:59,840
things

498
00:18:57,200 --> 00:19:01,840
that people can contribute to and kind

499
00:18:59,840 --> 00:19:04,720
of

500
00:19:01,840 --> 00:19:04,720
help each other with

501
00:19:05,120 --> 00:19:09,520
and it's not just for vulnerabilities

502
00:19:08,080 --> 00:19:11,520
there's also notices for

503
00:19:09,520 --> 00:19:12,960
unmaintained crates so chris that the

504
00:19:11,520 --> 00:19:14,639
author is either um completely

505
00:19:12,960 --> 00:19:16,640
unresponsive or

506
00:19:14,640 --> 00:19:17,679
explicitly said like i i'm not working

507
00:19:16,640 --> 00:19:20,080
on this anymore or

508
00:19:17,679 --> 00:19:21,919
for creates that served a purpose but

509
00:19:20,080 --> 00:19:24,080
for example maybe not be in

510
00:19:21,919 --> 00:19:26,960
uh the standard library itself or have

511
00:19:24,080 --> 00:19:30,559
been supplanted by a superior crate

512
00:19:26,960 --> 00:19:32,000
um it also can detect yanked versions uh

513
00:19:30,559 --> 00:19:33,678
this isn't really a problem practice

514
00:19:32,000 --> 00:19:36,799
that i've noticed but it's there

515
00:19:33,679 --> 00:19:38,240
if you want it as well as like

516
00:19:36,799 --> 00:19:41,360
obviously the possibility of more kind

517
00:19:38,240 --> 00:19:41,360
of advisories in the future

518
00:19:41,840 --> 00:19:45,360
uh so yeah so you can basically say how

519
00:19:43,919 --> 00:19:46,799
you want to deal with vulnerabilities

520
00:19:45,360 --> 00:19:48,000
how you want to deal with unmaintained

521
00:19:46,799 --> 00:19:48,559
crates how you want to deal with the ink

522
00:19:48,000 --> 00:19:50,799
crates

523
00:19:48,559 --> 00:19:52,559
and then the ability to ignore specific

524
00:19:50,799 --> 00:19:54,400
advisories that

525
00:19:52,559 --> 00:19:56,639
maybe you don't care about in this case

526
00:19:54,400 --> 00:19:57,600
this the spin is unmaintained but lazy

527
00:19:56,640 --> 00:20:00,640
static uses it

528
00:19:57,600 --> 00:20:01,280
and everything uses lazy static so it's

529
00:20:00,640 --> 00:20:03,280
kind of

530
00:20:01,280 --> 00:20:06,000
yeah up to lazy static to remove it at

531
00:20:03,280 --> 00:20:07,840
some point

532
00:20:06,000 --> 00:20:09,120
and this kind of the output it gives you

533
00:20:07,840 --> 00:20:11,280
it kind of gives you the

534
00:20:09,120 --> 00:20:12,959
information that's stored in the the

535
00:20:11,280 --> 00:20:16,879
database for each advisory

536
00:20:12,960 --> 00:20:19,360
um and that will give you links to

537
00:20:16,880 --> 00:20:20,400
you know alternatives in the case of on

538
00:20:19,360 --> 00:20:23,120
main crates

539
00:20:20,400 --> 00:20:23,600
or what versions you should update to to

540
00:20:23,120 --> 00:20:27,120
get

541
00:20:23,600 --> 00:20:27,120
rid of the security vulnerability

542
00:20:28,080 --> 00:20:32,879
and the last thing that we have is the

543
00:20:30,320 --> 00:20:32,879
source truck

544
00:20:33,120 --> 00:20:36,320
so core guy has multiple sources uh that

545
00:20:35,760 --> 00:20:39,440
it can

546
00:20:36,320 --> 00:20:41,678
use as uh for crates so there's the

547
00:20:39,440 --> 00:20:44,799
local source from a file path

548
00:20:41,679 --> 00:20:48,720
uh it creates io registries but then

549
00:20:44,799 --> 00:20:51,840
most importantly get uh so this is the

550
00:20:48,720 --> 00:20:53,520
blog post kind of motivated uh

551
00:20:51,840 --> 00:20:54,959
the edition of this check and it's

552
00:20:53,520 --> 00:20:57,840
basically talking about

553
00:20:54,960 --> 00:21:00,880
npm lock files um but there is some

554
00:20:57,840 --> 00:21:04,000
relation to cargo log files

555
00:21:00,880 --> 00:21:04,720
so we have a typical kind of pr for my

556
00:21:04,000 --> 00:21:07,200
boss

557
00:21:04,720 --> 00:21:07,919
uh updated dependencies and as is

558
00:21:07,200 --> 00:21:11,520
typical with

559
00:21:07,919 --> 00:21:15,280
github it'll just hide the diff

560
00:21:11,520 --> 00:21:16,158
looks fine but if you look in the log

561
00:21:15,280 --> 00:21:18,080
file you

562
00:21:16,159 --> 00:21:19,679
would see that actually the version

563
00:21:18,080 --> 00:21:20,240
changed but also the source change right

564
00:21:19,679 --> 00:21:22,080
so

565
00:21:20,240 --> 00:21:24,080
so instead of going to create cio now

566
00:21:22,080 --> 00:21:26,879
it's going to get.com definitely not

567
00:21:24,080 --> 00:21:26,879
mining bitcoins

568
00:21:27,120 --> 00:21:32,879
uh so yeah uh so

569
00:21:30,720 --> 00:21:34,080
so basically the configuration for this

570
00:21:32,880 --> 00:21:36,960
is just whether you lot

571
00:21:34,080 --> 00:21:38,240
allow or deny um unknown registries and

572
00:21:36,960 --> 00:21:40,640
unknown git sources

573
00:21:38,240 --> 00:21:41,520
and then basically if you deny unknown

574
00:21:40,640 --> 00:21:44,080
git sources or

575
00:21:41,520 --> 00:21:44,799
or registries you kind of opt into them

576
00:21:44,080 --> 00:21:47,840
instead of

577
00:21:44,799 --> 00:21:52,960
uh you know the typical case of just

578
00:21:47,840 --> 00:21:54,959
opting to get anything from anywhere

579
00:21:52,960 --> 00:21:56,480
and that's kind of the output of it yeah

580
00:21:54,960 --> 00:21:57,840
just as

581
00:21:56,480 --> 00:22:01,039
fun as source that wasn't explicitly

582
00:21:57,840 --> 00:22:04,240
allowed and then points to the actual

583
00:22:01,039 --> 00:22:07,840
thing so

584
00:22:04,240 --> 00:22:10,080
so future um we probably

585
00:22:07,840 --> 00:22:12,000
want to add more checks uh so one

586
00:22:10,080 --> 00:22:13,678
example of maybe the unused dependencies

587
00:22:12,000 --> 00:22:16,880
so there is u depths

588
00:22:13,679 --> 00:22:18,640
uh but that does actually hook into rust

589
00:22:16,880 --> 00:22:21,360
c itself

590
00:22:18,640 --> 00:22:24,159
we think it could be faster to just

591
00:22:21,360 --> 00:22:26,639
check for unused dependencies

592
00:22:24,159 --> 00:22:28,080
just by doing red glasses and so forth

593
00:22:26,640 --> 00:22:30,559
uh we're also thinking about doing

594
00:22:28,080 --> 00:22:31,918
maybe proc micro build rs kind of stuff

595
00:22:30,559 --> 00:22:35,039
as well because

596
00:22:31,919 --> 00:22:37,280
uh while product macros and build rs are

597
00:22:35,039 --> 00:22:39,039
great uh they're also huge security

598
00:22:37,280 --> 00:22:40,879
holes and

599
00:22:39,039 --> 00:22:42,320
we kind of want to be at least aware

600
00:22:40,880 --> 00:22:42,720
when we add a dependency on something

601
00:22:42,320 --> 00:22:45,439
that

602
00:22:42,720 --> 00:22:46,080
uses a procedural macro or build rs file

603
00:22:45,440 --> 00:22:49,120
for example

604
00:22:46,080 --> 00:22:52,158
just so that we can kind of say

605
00:22:49,120 --> 00:22:54,639
should we be adding this and

606
00:22:52,159 --> 00:22:55,919
yeah if anyone else has any ideas of

607
00:22:54,640 --> 00:22:58,400
other things that could be added to it

608
00:22:55,919 --> 00:22:58,400
would be cool

609
00:22:58,960 --> 00:23:02,000
and then also there's this issue for

610
00:23:01,120 --> 00:23:05,280
cargo

611
00:23:02,000 --> 00:23:07,120
but the basic idea is that cargo could

612
00:23:05,280 --> 00:23:08,320
expose some way to hook into the

613
00:23:07,120 --> 00:23:10,719
dependency resolution

614
00:23:08,320 --> 00:23:11,678
of cargo itself and this would be really

615
00:23:10,720 --> 00:23:14,559
cool because

616
00:23:11,679 --> 00:23:16,640
instead of right now cargo deny just

617
00:23:14,559 --> 00:23:18,240
looks at the

618
00:23:16,640 --> 00:23:20,159
dependent the resolved dependencies

619
00:23:18,240 --> 00:23:22,400
after cargo is done with it

620
00:23:20,159 --> 00:23:23,919
if you had this you could add dependency

621
00:23:22,400 --> 00:23:24,960
resolution time stop something from

622
00:23:23,919 --> 00:23:26,720
getting into your graph

623
00:23:24,960 --> 00:23:27,919
in the first place um this would be

624
00:23:26,720 --> 00:23:29,600
particularly useful for things like

625
00:23:27,919 --> 00:23:31,360
security vulnerabilities like

626
00:23:29,600 --> 00:23:33,360
i don't want to add a dependency and

627
00:23:31,360 --> 00:23:36,559
then have my ci fail i just want to not

628
00:23:33,360 --> 00:23:38,959
have it in there in the first place

629
00:23:36,559 --> 00:23:40,799
and we do have a github action that you

630
00:23:38,960 --> 00:23:41,279
can use and here's a few of the users

631
00:23:40,799 --> 00:23:43,918
most of

632
00:23:41,279 --> 00:23:45,200
them are our crates but there is tonic

633
00:23:43,919 --> 00:23:48,320
the grpc

634
00:23:45,200 --> 00:23:50,799
library and here's

635
00:23:48,320 --> 00:23:51,600
yeah links to all the stuff so the tool

636
00:23:50,799 --> 00:23:54,400
itself

637
00:23:51,600 --> 00:23:56,158
uh spdx expression parser and evaluator

638
00:23:54,400 --> 00:23:57,279
creates is like a simple

639
00:23:56,159 --> 00:23:59,600
thing that basically takes program

640
00:23:57,279 --> 00:24:02,159
metadata and marries it to pet graph

641
00:23:59,600 --> 00:24:04,320
uh there's config expert which evaluates

642
00:24:02,159 --> 00:24:06,720
configuration expressions

643
00:24:04,320 --> 00:24:08,720
and then there's cargo audit and russec

644
00:24:06,720 --> 00:24:10,480
and then cargo about our kind of license

645
00:24:08,720 --> 00:24:19,840
attribution tool as well

646
00:24:10,480 --> 00:24:19,840
so yeah that's it

647
00:24:31,200 --> 00:24:37,679
curabalt uh uh uses the

648
00:24:34,720 --> 00:24:38,720
uh more like it deep scans the every

649
00:24:37,679 --> 00:24:41,919
single file

650
00:24:38,720 --> 00:24:45,440
uh in uh create source to detect

651
00:24:41,919 --> 00:24:47,279
any licenses and then basically

652
00:24:45,440 --> 00:24:48,880
make sure that they match the declared

653
00:24:47,279 --> 00:24:52,080
licenses and if they don't

654
00:24:48,880 --> 00:24:54,559
uh basically gives a error and then

655
00:24:52,080 --> 00:24:56,639
uh you can configure to say like okay

656
00:24:54,559 --> 00:24:58,720
actually there's an additional license

657
00:24:56,640 --> 00:25:00,240
in this location but basically just

658
00:24:58,720 --> 00:25:02,720
takes them all together

659
00:25:00,240 --> 00:25:04,480
puts all the attributions and for each

660
00:25:02,720 --> 00:25:06,080
crate together and then

661
00:25:04,480 --> 00:25:07,520
you can take that information and pass

662
00:25:06,080 --> 00:25:09,199
it to a handlebar template

663
00:25:07,520 --> 00:25:12,000
and then the handlebar template can be

664
00:25:09,200 --> 00:25:13,279
whatever you want we use like a html one

665
00:25:12,000 --> 00:25:15,600
and the idea is you know create

666
00:25:13,279 --> 00:25:17,279
something like the firefox uh

667
00:25:15,600 --> 00:25:18,799
attribution page so that you can list

668
00:25:17,279 --> 00:25:20,080
every single crate that's being used

669
00:25:18,799 --> 00:25:23,760
every single license that's used and

670
00:25:20,080 --> 00:25:23,760
then the license text for each of the

671
00:25:26,840 --> 00:25:29,840
crates

