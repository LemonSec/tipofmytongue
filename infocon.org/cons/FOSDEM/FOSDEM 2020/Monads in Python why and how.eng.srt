1
00:00:04,960 --> 00:00:08,960
let's talk

2
00:00:06,640 --> 00:00:09,760
please welcome vincent who's gonna tell

3
00:00:08,960 --> 00:00:17,920
us how to

4
00:00:09,760 --> 00:00:17,920
do monad in python thank you

5
00:00:41,760 --> 00:00:49,440
all right try again

6
00:00:45,200 --> 00:00:54,079
cool so my name is vincent and

7
00:00:49,440 --> 00:00:54,079
i'm going to talk about monads in python

8
00:00:54,719 --> 00:01:00,000
so i'm a software engineer and i have

9
00:00:58,399 --> 00:01:01,920
around four years of experience in

10
00:01:00,000 --> 00:01:04,239
python

11
00:01:01,920 --> 00:01:07,199
and it happens that i'm a big fan of

12
00:01:04,239 --> 00:01:07,199
functional programming

13
00:01:08,159 --> 00:01:13,280
so monads have a pretty bad

14
00:01:11,600 --> 00:01:16,320
reputation in the world of programming

15
00:01:13,280 --> 00:01:19,360
but have some goals for this talk

16
00:01:16,320 --> 00:01:23,839
is to show that at its core monard is

17
00:01:19,360 --> 00:01:26,320
a simple but powerful concept

18
00:01:23,840 --> 00:01:28,720
and that monarch can be leveraged in

19
00:01:26,320 --> 00:01:32,240
python

20
00:01:28,720 --> 00:01:34,320
so have some warning to give

21
00:01:32,240 --> 00:01:35,280
this talk will be more practically

22
00:01:34,320 --> 00:01:40,320
inclined than

23
00:01:35,280 --> 00:01:43,680
theoretical uregos uh

24
00:01:40,320 --> 00:01:47,119
so let's start with a

25
00:01:43,680 --> 00:01:49,759
motivating example um

26
00:01:47,119 --> 00:01:50,240
so let's say that we have we we want to

27
00:01:49,759 --> 00:01:52,960
time

28
00:01:50,240 --> 00:01:55,679
some functions that is to to measure the

29
00:01:52,960 --> 00:01:58,960
time of execution of some functions

30
00:01:55,680 --> 00:02:01,600
uh one way you can do it is to

31
00:01:58,960 --> 00:02:02,079
create a function decorator like this

32
00:02:01,600 --> 00:02:04,640
which

33
00:02:02,079 --> 00:02:06,399
starts a timer before the execution of

34
00:02:04,640 --> 00:02:07,600
the function and ends the timer after

35
00:02:06,399 --> 00:02:09,598
the execution

36
00:02:07,600 --> 00:02:12,160
and then returns the results and the

37
00:02:09,598 --> 00:02:15,200
time of execution

38
00:02:12,160 --> 00:02:18,560
so let's have some some functions

39
00:02:15,200 --> 00:02:22,000
and let's use our our new decorator

40
00:02:18,560 --> 00:02:24,400
so one problem i have is how to change

41
00:02:22,000 --> 00:02:28,080
this how to change those functions and

42
00:02:24,400 --> 00:02:28,080
get the total time of execution

43
00:02:29,440 --> 00:02:32,959
so one of you one obvious way to do it

44
00:02:32,319 --> 00:02:34,958
would be

45
00:02:32,959 --> 00:02:36,000
just to to call the function

46
00:02:34,959 --> 00:02:38,720
sequentially like this

47
00:02:36,000 --> 00:02:40,000
and unpack the the results the

48
00:02:38,720 --> 00:02:42,959
intermediary results

49
00:02:40,000 --> 00:02:45,280
and the times of execution and just sum

50
00:02:42,959 --> 00:02:48,840
the times

51
00:02:45,280 --> 00:02:50,480
so there are some things which could be

52
00:02:48,840 --> 00:02:52,560
improved

53
00:02:50,480 --> 00:02:54,160
first we need to repeat the logic of

54
00:02:52,560 --> 00:02:56,560
unpacking the value and time

55
00:02:54,160 --> 00:02:58,000
at each step of the computation and as

56
00:02:56,560 --> 00:03:00,879
programmers we don't like

57
00:02:58,000 --> 00:03:00,879
repeating things

58
00:03:01,599 --> 00:03:05,040
but something is which we need to repeat

59
00:03:04,400 --> 00:03:06,640
we need to

60
00:03:05,040 --> 00:03:09,599
repeat the summation in this case we

61
00:03:06,640 --> 00:03:09,599
need to sum twice

62
00:03:10,480 --> 00:03:14,000
so let's introduce a function that i

63
00:03:13,680 --> 00:03:18,080
call

64
00:03:14,000 --> 00:03:21,440
bind and which takes a

65
00:03:18,080 --> 00:03:24,799
which says as arguments uh a tuple

66
00:03:21,440 --> 00:03:26,319
uh of of some value and the time of

67
00:03:24,799 --> 00:03:29,440
execution

68
00:03:26,319 --> 00:03:31,359
and a function f uh

69
00:03:29,440 --> 00:03:32,640
so we you can imagine that the time

70
00:03:31,360 --> 00:03:34,560
which is called in the first

71
00:03:32,640 --> 00:03:36,238
which is stored in the first argument is

72
00:03:34,560 --> 00:03:40,080
the time that has been

73
00:03:36,239 --> 00:03:40,080
computed and accumulated so far

74
00:03:40,720 --> 00:03:44,480
so the bind function is just going to

75
00:03:42,879 --> 00:03:46,720
apply the function um

76
00:03:44,480 --> 00:03:48,959
the value which is stored on the left at

77
00:03:46,720 --> 00:03:52,239
the zero index of the tuple

78
00:03:48,959 --> 00:03:53,680
and compute the the new time of

79
00:03:52,239 --> 00:03:56,560
execution

80
00:03:53,680 --> 00:03:57,040
and then return the results and the the

81
00:03:56,560 --> 00:03:58,840
time

82
00:03:57,040 --> 00:04:01,200
we had before and the new time of

83
00:03:58,840 --> 00:04:03,920
execution

84
00:04:01,200 --> 00:04:04,879
so with this bind function which

85
00:04:03,920 --> 00:04:07,439
abstracts away

86
00:04:04,879 --> 00:04:08,079
the things which were repeated before we

87
00:04:07,439 --> 00:04:11,680
can

88
00:04:08,080 --> 00:04:15,840
rewrite our example this way and t

89
00:04:11,680 --> 00:04:15,840
contains the total time of execution

90
00:04:16,639 --> 00:04:18,880
okay

91
00:04:20,880 --> 00:04:24,800
one thing which is less nice here is

92
00:04:22,479 --> 00:04:28,479
that we are nesting binds and it can be

93
00:04:24,800 --> 00:04:32,479
a bit harder to read

94
00:04:28,479 --> 00:04:35,520
so we can keep this same approach and

95
00:04:32,479 --> 00:04:36,479
uh use a more object-oriented approach

96
00:04:35,520 --> 00:04:39,680
instead

97
00:04:36,479 --> 00:04:42,000
so instead of using plain tuples let's

98
00:04:39,680 --> 00:04:44,320
do let's define a class time value which

99
00:04:42,000 --> 00:04:45,440
just wraps a value and the time of

100
00:04:44,320 --> 00:04:47,520
execution

101
00:04:45,440 --> 00:04:49,360
and let's define a bind method which

102
00:04:47,520 --> 00:04:53,440
does the same thing as before

103
00:04:49,360 --> 00:04:58,240
but just returns a new time value object

104
00:04:53,440 --> 00:05:00,560
this way so we have to update our

105
00:04:58,240 --> 00:05:02,560
our previous decorator to uh to take

106
00:05:00,560 --> 00:05:06,560
this into account

107
00:05:02,560 --> 00:05:08,960
to take the new class into account and

108
00:05:06,560 --> 00:05:11,120
we can arrive to this results like write

109
00:05:08,960 --> 00:05:14,400
this

110
00:05:11,120 --> 00:05:14,400
solve the problem this way

111
00:05:15,520 --> 00:05:18,560
so it's the same as before but we are

112
00:05:17,039 --> 00:05:20,719
chaining methods instead of nesting

113
00:05:18,560 --> 00:05:24,000
functions which can arguably be

114
00:05:20,720 --> 00:05:27,199
easier to read

115
00:05:24,000 --> 00:05:32,000
so what did we just do we just

116
00:05:27,199 --> 00:05:32,000
invented a monad the time value class

117
00:05:32,160 --> 00:05:36,240
but we still don't know what is the

118
00:05:33,840 --> 00:05:36,239
monad

119
00:05:36,320 --> 00:05:40,639
so let's let's try to get a sense of

120
00:05:38,800 --> 00:05:44,560
what it is

121
00:05:40,639 --> 00:05:49,199
uh so monad is a general concept

122
00:05:44,560 --> 00:05:49,199
with time value being one instance of it

123
00:05:49,280 --> 00:05:52,880
it can be seen as a design pattern which

124
00:05:52,160 --> 00:05:55,440
helps us

125
00:05:52,880 --> 00:05:59,039
compose functions with effects and in

126
00:05:55,440 --> 00:05:59,039
this case effects means like

127
00:05:59,199 --> 00:06:03,759
measuring your time of execution

128
00:06:04,000 --> 00:06:08,240
so there is there is a useful analogy

129
00:06:06,319 --> 00:06:10,960
which is to say that

130
00:06:08,240 --> 00:06:12,160
uh so you have a monad and you have

131
00:06:10,960 --> 00:06:16,080
monadic values

132
00:06:12,160 --> 00:06:18,800
so for instance uh a plane value is

133
00:06:16,080 --> 00:06:20,400
is an integer and the monastic value is

134
00:06:18,800 --> 00:06:23,600
a plane value plus

135
00:06:20,400 --> 00:06:25,679
a time of execution so it's

136
00:06:23,600 --> 00:06:27,919
it can be useful to see a monarch a

137
00:06:25,680 --> 00:06:34,319
monadic value as a

138
00:06:27,919 --> 00:06:37,440
a a value plus a context

139
00:06:34,319 --> 00:06:39,600
so what is it good for so make

140
00:06:37,440 --> 00:06:42,639
composition of functions easier

141
00:06:39,600 --> 00:06:45,039
so as we've seen it it's made the

142
00:06:42,639 --> 00:06:49,280
composition of functions with

143
00:06:45,039 --> 00:06:50,880
time measurements easier than before

144
00:06:49,280 --> 00:06:53,440
it avoids repeating computational

145
00:06:50,880 --> 00:06:53,440
patterns

146
00:06:53,520 --> 00:06:58,479
and it but it's particularly useful when

147
00:06:56,479 --> 00:07:01,280
you have a pipeline of operations like

148
00:06:58,479 --> 00:07:01,280
we had before

149
00:07:01,759 --> 00:07:08,720
so how to define a iman ad

150
00:07:05,680 --> 00:07:11,599
okay so normally you have to define what

151
00:07:08,720 --> 00:07:15,360
is called the unit function

152
00:07:11,599 --> 00:07:17,840
or constructor so its role is simply to

153
00:07:15,360 --> 00:07:20,560
take a plane value and transform it into

154
00:07:17,840 --> 00:07:23,599
a magnetic value

155
00:07:20,560 --> 00:07:25,840
define a bind function which

156
00:07:23,599 --> 00:07:28,639
encodes the logic of applying a function

157
00:07:25,840 --> 00:07:32,960
to a monastic value

158
00:07:28,639 --> 00:07:34,880
so i just mentioned here that uh

159
00:07:32,960 --> 00:07:36,880
theoretically speaking you you should

160
00:07:34,880 --> 00:07:40,400
make sure that unit and bytes

161
00:07:36,880 --> 00:07:43,680
uh comply with some rules some laws

162
00:07:40,400 --> 00:07:46,638
but i'm not going to cover that here and

163
00:07:43,680 --> 00:07:49,360
it's pretty it's like those who are

164
00:07:46,639 --> 00:07:49,360
quite intuitive

165
00:07:50,319 --> 00:07:54,800
um so yeah so if we go back to our time

166
00:07:53,360 --> 00:07:57,440
value example

167
00:07:54,800 --> 00:07:59,840
so unit here is simply the constructor

168
00:07:57,440 --> 00:07:59,840
that we have

169
00:08:01,199 --> 00:08:04,720
and bind is just yeah the the binding

170
00:08:03,599 --> 00:08:07,599
effect that we

171
00:08:04,720 --> 00:08:07,599
that we've seen before

172
00:08:08,000 --> 00:08:13,840
so let's go ahead with another example

173
00:08:14,400 --> 00:08:21,120
okay uh so let's imagine that we have

174
00:08:17,840 --> 00:08:23,679
a code like this which like

175
00:08:21,120 --> 00:08:25,440
we have a sequence of computations and

176
00:08:23,680 --> 00:08:26,000
at each step of the computation we can

177
00:08:25,440 --> 00:08:28,960
have

178
00:08:26,000 --> 00:08:31,440
known values and in this case we can

179
00:08:28,960 --> 00:08:35,279
find ourselves

180
00:08:31,440 --> 00:08:36,559
checking for nouns very often

181
00:08:35,279 --> 00:08:38,479
so for instance let's say we are

182
00:08:36,559 --> 00:08:40,958
creating a social network and we have a

183
00:08:38,479 --> 00:08:42,560
user object and we want to get

184
00:08:40,958 --> 00:08:44,880
the friends of the first friend of this

185
00:08:42,559 --> 00:08:44,880
user

186
00:08:45,450 --> 00:08:50,880
[Music]

187
00:08:46,959 --> 00:08:53,920
so in this code sample we

188
00:08:50,880 --> 00:08:55,200
we repeat we have to repeat the if else

189
00:08:53,920 --> 00:08:57,040
known guards which can be a bit

190
00:08:55,200 --> 00:08:59,440
cumbersome

191
00:08:57,040 --> 00:09:00,560
so the question is can we abstract this

192
00:08:59,440 --> 00:09:05,519
away with

193
00:09:00,560 --> 00:09:05,518
a monads anyway yes we can

194
00:09:05,680 --> 00:09:11,839
we can with the so-called maybe monad so

195
00:09:09,279 --> 00:09:12,880
maybe monad is is one of the most simple

196
00:09:11,839 --> 00:09:16,399
and common monad

197
00:09:12,880 --> 00:09:19,439
that you can encounter so

198
00:09:16,399 --> 00:09:21,519
what is the idea behind it so

199
00:09:19,440 --> 00:09:23,519
the idea is that you can have two kind

200
00:09:21,519 --> 00:09:25,920
of values

201
00:09:23,519 --> 00:09:28,640
either full or empty mt corresponds to

202
00:09:25,920 --> 00:09:28,640
the non-value

203
00:09:29,839 --> 00:09:32,959
if an mc value is encountered during a

204
00:09:31,760 --> 00:09:36,640
computation pipeline

205
00:09:32,959 --> 00:09:38,479
just just re-forward it don't don't even

206
00:09:36,640 --> 00:09:41,600
try to apply

207
00:09:38,480 --> 00:09:44,240
to bind more functions

208
00:09:41,600 --> 00:09:45,760
and this allows us to not to check for

209
00:09:44,240 --> 00:09:47,680
none at every step

210
00:09:45,760 --> 00:09:50,959
so i'm going to show you the codes say

211
00:09:47,680 --> 00:09:54,800
and hopefully this will be more clear

212
00:09:50,959 --> 00:09:57,359
so let's try to define a maybe class

213
00:09:54,800 --> 00:09:59,199
so it's simply going to be maybe it's

214
00:09:57,360 --> 00:10:01,680
simply going to be a wrapper around

215
00:09:59,200 --> 00:10:03,200
a value that we store in a in an

216
00:10:01,680 --> 00:10:07,599
attribute

217
00:10:03,200 --> 00:10:07,600
and units is simply the constructor

218
00:10:08,240 --> 00:10:15,760
binds so if the value is none

219
00:10:13,440 --> 00:10:19,279
we had that means that we had at some

220
00:10:15,760 --> 00:10:21,360
point encountered a

221
00:10:19,279 --> 00:10:22,720
some computation which returns which

222
00:10:21,360 --> 00:10:24,560
returns the empty value so

223
00:10:22,720 --> 00:10:26,320
we don't need to do anything more we

224
00:10:24,560 --> 00:10:29,439
just we can just

225
00:10:26,320 --> 00:10:32,959
return we can just return it

226
00:10:29,440 --> 00:10:35,760
on the other hand if uh

227
00:10:32,959 --> 00:10:37,199
if the the monad is if the maybe monad

228
00:10:35,760 --> 00:10:39,200
is is full

229
00:10:37,200 --> 00:10:41,120
we can proceed with applying the f

230
00:10:39,200 --> 00:10:43,920
function so we apply it to the save that

231
00:10:41,120 --> 00:10:45,760
value attributes

232
00:10:43,920 --> 00:10:48,399
so here there is a small distinction to

233
00:10:45,760 --> 00:10:52,240
make uh

234
00:10:48,399 --> 00:10:55,279
depending whether on that uh whether

235
00:10:52,240 --> 00:10:57,760
f returns a maybe value or whether it

236
00:10:55,279 --> 00:11:00,160
returns a plane value

237
00:10:57,760 --> 00:11:02,160
so if if it returns maybe value i just

238
00:11:00,160 --> 00:11:04,240
returned the maybe value

239
00:11:02,160 --> 00:11:05,199
if it returns a plain value i've wrapped

240
00:11:04,240 --> 00:11:07,519
it

241
00:11:05,200 --> 00:11:09,200
around the unit constructor so the

242
00:11:07,519 --> 00:11:12,240
reason i do this is

243
00:11:09,200 --> 00:11:13,600
is to be able to to ensure that we

244
00:11:12,240 --> 00:11:16,000
return maybes

245
00:11:13,600 --> 00:11:19,279
and that we will be able to chain more

246
00:11:16,000 --> 00:11:19,279
binds in the computation

247
00:11:19,920 --> 00:11:28,800
so some note for monad experts

248
00:11:24,000 --> 00:11:31,760
here i'm just completing bind and map

249
00:11:28,800 --> 00:11:32,479
um and we can rewrite our previous

250
00:11:31,760 --> 00:11:36,560
example

251
00:11:32,480 --> 00:11:36,560
uh with the bind method this way

252
00:11:38,480 --> 00:11:42,800
so we we just take the the initial value

253
00:11:41,680 --> 00:11:45,120
props and

254
00:11:42,800 --> 00:11:46,160
uh wrap it into the the maybe

255
00:11:45,120 --> 00:11:49,760
constructor

256
00:11:46,160 --> 00:11:49,760
and apply successive binds on it

257
00:11:50,320 --> 00:11:54,240
so what's nice here is that we can chain

258
00:11:52,560 --> 00:11:57,199
function without longer

259
00:11:54,240 --> 00:11:58,000
non-guards because the none the

260
00:11:57,200 --> 00:12:01,760
non-check is

261
00:11:58,000 --> 00:12:01,760
is done once and for all in the

262
00:12:02,079 --> 00:12:07,519
in the maybe monarch code in the bind

263
00:12:04,320 --> 00:12:07,519
function in the bind method

264
00:12:08,079 --> 00:12:11,920
is there a way that you can be more

265
00:12:09,360 --> 00:12:15,360
concise and yes we can by

266
00:12:11,920 --> 00:12:17,120
using the dynamics of python

267
00:12:15,360 --> 00:12:18,720
so very quickly because i think i'm

268
00:12:17,120 --> 00:12:21,680
lacking time

269
00:12:18,720 --> 00:12:21,680
oh okay cool

270
00:12:21,839 --> 00:12:28,320
so okay the idea is that

271
00:12:25,120 --> 00:12:29,279
instead of doing binds of lambda object

272
00:12:28,320 --> 00:12:31,760
method

273
00:12:29,279 --> 00:12:34,079
what i really want to do is is maybe you

274
00:12:31,760 --> 00:12:37,200
need that method

275
00:12:34,079 --> 00:12:39,839
this could be more compact

276
00:12:37,200 --> 00:12:42,079
so and a natural idea that we can ha

277
00:12:39,839 --> 00:12:45,200
that we can have here is to use

278
00:12:42,079 --> 00:12:48,239
the get that magic method

279
00:12:45,200 --> 00:12:49,600
um so

280
00:12:48,240 --> 00:12:51,519
okay i'm not going to get into the

281
00:12:49,600 --> 00:12:54,399
details here but by defining

282
00:12:51,519 --> 00:12:56,240
uh get out in some way in the maybe in

283
00:12:54,399 --> 00:13:00,240
the maybe class

284
00:12:56,240 --> 00:13:03,440
uh so there is some distinction to make

285
00:13:00,240 --> 00:13:05,120
if uh the fields which we

286
00:13:03,440 --> 00:13:09,040
are trying to access is a function or

287
00:13:05,120 --> 00:13:09,040
not but the idea is the same

288
00:13:09,760 --> 00:13:14,800
we can rewrite our example this way

289
00:13:15,040 --> 00:13:20,319
one thing to note is that this get at

290
00:13:18,240 --> 00:13:22,079
thing is independent of the monad we are

291
00:13:20,320 --> 00:13:25,200
considering so we could use it on

292
00:13:22,079 --> 00:13:26,239
over a month of course there is the

293
00:13:25,200 --> 00:13:29,920
downside that

294
00:13:26,240 --> 00:13:32,639
there is some performance penalty with

295
00:13:29,920 --> 00:13:35,839
by using such a thing it can be make the

296
00:13:32,639 --> 00:13:35,839
code harder to listen about

297
00:13:37,200 --> 00:13:42,560
um so now i'm going to talk about

298
00:13:40,720 --> 00:13:46,000
the notion of monad comprehension which

299
00:13:42,560 --> 00:13:46,000
is a bit experimental

300
00:13:46,240 --> 00:13:50,480
so what you are going to see here is not

301
00:13:48,079 --> 00:13:53,680
production ready

302
00:13:50,480 --> 00:13:56,560
uh so let's

303
00:13:53,680 --> 00:13:57,439
let's reconsider our time value example

304
00:13:56,560 --> 00:13:59,279
uh

305
00:13:57,440 --> 00:14:00,480
everything went well because we had a

306
00:13:59,279 --> 00:14:02,959
linear pipeline

307
00:14:00,480 --> 00:14:04,160
by that i mean at every step of the

308
00:14:02,959 --> 00:14:06,160
computation

309
00:14:04,160 --> 00:14:07,519
we only needed the previous the result

310
00:14:06,160 --> 00:14:09,519
of the previous step

311
00:14:07,519 --> 00:14:12,079
but it's not all it's not always the

312
00:14:09,519 --> 00:14:12,720
case for instance here we have a

313
00:14:12,079 --> 00:14:16,638
pipeline

314
00:14:12,720 --> 00:14:17,839
where we depend the final value that we

315
00:14:16,639 --> 00:14:19,680
are interested in

316
00:14:17,839 --> 00:14:21,519
is the is the first value that we

317
00:14:19,680 --> 00:14:23,519
computed so

318
00:14:21,519 --> 00:14:26,480
in the non-monetic version of the code

319
00:14:23,519 --> 00:14:29,120
it would be trivial to do so like this

320
00:14:26,480 --> 00:14:30,320
but with the monadic version uh it will

321
00:14:29,120 --> 00:14:33,279
be more involved

322
00:14:30,320 --> 00:14:35,760
because you need to to nest binds in

323
00:14:33,279 --> 00:14:40,079
order to create a closure

324
00:14:35,760 --> 00:14:40,079
where you can keep x0 in the scope

325
00:14:40,800 --> 00:14:48,079
so can we have something

326
00:14:44,320 --> 00:14:48,079
uh friendlier than that

327
00:14:48,720 --> 00:14:55,120
uh okay so what i really want to write

328
00:14:52,639 --> 00:14:55,120
is this

329
00:14:55,680 --> 00:15:03,680
so this might be might bending

330
00:14:58,880 --> 00:15:03,680
but my idea is that

331
00:15:05,040 --> 00:15:09,120
i would somehow i would like to to

332
00:15:07,519 --> 00:15:11,199
modify the meaning of the list

333
00:15:09,120 --> 00:15:13,680
comprehension syntax

334
00:15:11,199 --> 00:15:16,079
in order to use it not only on lists but

335
00:15:13,680 --> 00:15:20,800
on any kind of monarch

336
00:15:16,079 --> 00:15:23,120
so in this case the time value

337
00:15:20,800 --> 00:15:23,839
would be a time value another list and

338
00:15:23,120 --> 00:15:27,680
for x

339
00:15:23,839 --> 00:15:30,610
0 in fast one it would read as x0 equal

340
00:15:27,680 --> 00:15:32,239
first one dot value

341
00:15:30,610 --> 00:15:34,959
[Music]

342
00:15:32,240 --> 00:15:36,560
okay so so this intuition so i'm not

343
00:15:34,959 --> 00:15:37,199
going to get into the details but this

344
00:15:36,560 --> 00:15:40,959
intuition

345
00:15:37,199 --> 00:15:41,758
comes from the fact that lists are

346
00:15:40,959 --> 00:15:44,399
monads

347
00:15:41,759 --> 00:15:45,759
and a lease comprehension can be can be

348
00:15:44,399 --> 00:15:48,720
rewritten in terms of

349
00:15:45,759 --> 00:15:48,720
unit and bind

350
00:15:52,560 --> 00:15:55,920
so the idea is to to generalize the

351
00:15:55,040 --> 00:15:59,279
syntax

352
00:15:55,920 --> 00:15:59,279
of uh

353
00:15:59,360 --> 00:16:03,120
of these comprehensions to to

354
00:16:01,839 --> 00:16:05,920
comprehension or any

355
00:16:03,120 --> 00:16:05,920
on any monad

356
00:16:07,279 --> 00:16:10,959
so if some people are used to haskell

357
00:16:09,360 --> 00:16:13,839
this is very similar to the

358
00:16:10,959 --> 00:16:13,839
the do notation

359
00:16:14,720 --> 00:16:19,519
and but raise the catch python doesn't

360
00:16:18,240 --> 00:16:23,279
doesn't allow us to

361
00:16:19,519 --> 00:16:26,160
overload the meaning of comprehensions

362
00:16:23,279 --> 00:16:26,720
so the solution i came up with i mean i

363
00:16:26,160 --> 00:16:28,240
took his

364
00:16:26,720 --> 00:16:30,320
inspiration from something so the

365
00:16:28,240 --> 00:16:35,279
solution which was found

366
00:16:30,320 --> 00:16:38,079
was to use asc transformations so

367
00:16:35,279 --> 00:16:39,759
a small reminder when you are executing

368
00:16:38,079 --> 00:16:42,479
your python program

369
00:16:39,759 --> 00:16:43,920
uh it goes this roughly this way so you

370
00:16:42,480 --> 00:16:46,639
have the python source

371
00:16:43,920 --> 00:16:47,759
source code which is scanned and passed

372
00:16:46,639 --> 00:16:50,639
into a

373
00:16:47,759 --> 00:16:52,079
an abstract syntax tree it's then

374
00:16:50,639 --> 00:16:55,920
compiled into python

375
00:16:52,079 --> 00:16:59,439
bytecode and it's then interpreted

376
00:16:55,920 --> 00:17:01,120
so uh by asd transformation i mean doing

377
00:16:59,440 --> 00:17:05,360
something like this

378
00:17:01,120 --> 00:17:08,160
like taking an ast transform it

379
00:17:05,359 --> 00:17:09,359
into a new ist which corresponds to a

380
00:17:08,160 --> 00:17:12,319
new code

381
00:17:09,359 --> 00:17:12,319
and then compile it

382
00:17:12,880 --> 00:17:16,079
so with this technique you can pretty

383
00:17:14,400 --> 00:17:20,160
much like make piton

384
00:17:16,079 --> 00:17:20,159
p python do whatever you want

385
00:17:21,359 --> 00:17:32,799
so the way i did it i implemented it

386
00:17:26,480 --> 00:17:36,880
is with a a function decorator

387
00:17:32,799 --> 00:17:40,320
which expects as argument a class

388
00:17:36,880 --> 00:17:43,919
which is expected to have

389
00:17:40,320 --> 00:17:43,918
a unit and bind method

390
00:17:44,840 --> 00:17:50,159
and

391
00:17:46,960 --> 00:17:52,160
and given this class uh decorates a

392
00:17:50,160 --> 00:17:54,799
function and transforms

393
00:17:52,160 --> 00:17:55,919
uh the the semantics of the of list

394
00:17:54,799 --> 00:17:58,080
comprehensions

395
00:17:55,919 --> 00:18:01,120
so i haven't put the code of the

396
00:17:58,080 --> 00:18:02,799
decorator here but

397
00:18:01,120 --> 00:18:04,639
i can show show it to people who are

398
00:18:02,799 --> 00:18:07,840
interested afterwards

399
00:18:04,640 --> 00:18:07,840
and it's available on github

400
00:18:08,000 --> 00:18:15,840
um so

401
00:18:11,919 --> 00:18:15,840
it would work this way and

402
00:18:16,880 --> 00:18:20,799
the non-linear pipeline that we had

403
00:18:18,799 --> 00:18:23,840
before could be written this way

404
00:18:20,799 --> 00:18:26,000
so we have we have some

405
00:18:23,840 --> 00:18:28,000
we need to put the code in some function

406
00:18:26,000 --> 00:18:30,559
f and decorate it with

407
00:18:28,000 --> 00:18:32,720
the monad comprehension decorator with

408
00:18:30,559 --> 00:18:35,760
the time value class

409
00:18:32,720 --> 00:18:37,200
and this way what looks like a list

410
00:18:35,760 --> 00:18:42,400
comprehension will

411
00:18:37,200 --> 00:18:45,440
actually be a time value

412
00:18:42,400 --> 00:18:47,039
uh we could so

413
00:18:45,440 --> 00:18:49,440
let's see another example with the maybe

414
00:18:47,039 --> 00:18:49,440
monad

415
00:18:50,080 --> 00:18:56,320
so here we're just summing like

416
00:18:53,360 --> 00:18:58,159
uh maybe five and maybe six and what we

417
00:18:56,320 --> 00:19:00,960
get is

418
00:18:58,160 --> 00:19:00,960
maybe eleven

419
00:19:01,679 --> 00:19:08,080
so f3 terms maybe not a list and for x

420
00:19:04,720 --> 00:19:11,840
in maybe five reads as x equal maybe

421
00:19:08,080 --> 00:19:11,840
five dot value

422
00:19:12,400 --> 00:19:16,240
still with the maybe monad but

423
00:19:16,720 --> 00:19:23,360
with with one of the value which is the

424
00:19:20,240 --> 00:19:24,880
in fact dmc value we should get gmt

425
00:19:23,360 --> 00:19:29,280
value in the end

426
00:19:24,880 --> 00:19:31,840
and it's indeed what what we get

427
00:19:29,280 --> 00:19:33,120
so now this is the solution to the

428
00:19:31,840 --> 00:19:38,080
nonlinear

429
00:19:33,120 --> 00:19:40,159
the nonlinear pipeline problem so

430
00:19:38,080 --> 00:19:43,199
conclusion

431
00:19:40,160 --> 00:19:44,080
takeaway so i hope that you are somehow

432
00:19:43,200 --> 00:19:49,760
convinced that

433
00:19:44,080 --> 00:19:52,480
monad is not that complicated

434
00:19:49,760 --> 00:19:53,520
uh simple monads are simple to implement

435
00:19:52,480 --> 00:19:55,360
and again

436
00:19:53,520 --> 00:19:56,960
what i'm saying is not here is not

437
00:19:55,360 --> 00:20:00,879
absolute truth there's

438
00:19:56,960 --> 00:20:00,880
many ways you could implement monads

439
00:20:02,240 --> 00:20:07,120
monads are not as alien as you as one

440
00:20:05,600 --> 00:20:09,039
may think

441
00:20:07,120 --> 00:20:11,120
for those who know those of you who know

442
00:20:09,039 --> 00:20:14,320
twisted like the deferred object is

443
00:20:11,120 --> 00:20:17,360
actually a kind of monad

444
00:20:14,320 --> 00:20:19,760
there are some some maybe

445
00:20:17,360 --> 00:20:20,399
some maybe monarch equivalents which are

446
00:20:19,760 --> 00:20:23,120
found in

447
00:20:20,400 --> 00:20:25,520
other mainstream languages such as rust

448
00:20:23,120 --> 00:20:25,520
java

449
00:20:25,600 --> 00:20:30,959
promises are kind of monad in in

450
00:20:28,320 --> 00:20:30,960
javascript

451
00:20:31,120 --> 00:20:34,239
the linque syntax is very close to monad

452
00:20:33,280 --> 00:20:37,760
comprehension in c

453
00:20:34,240 --> 00:20:40,480
sharp so here are some

454
00:20:37,760 --> 00:20:42,799
references from which i took heavy

455
00:20:40,480 --> 00:20:45,840
inspiration

456
00:20:42,799 --> 00:20:49,840
you can find the code on github and

457
00:20:45,840 --> 00:20:49,840
thank you

458
00:20:50,140 --> 00:20:56,359
[Applause]

459
00:20:56,480 --> 00:21:03,840
and we have five minutes for questions

460
00:21:06,490 --> 00:21:10,240
[Music]

461
00:21:07,919 --> 00:21:12,400
if you're leaving the if you are leaving

462
00:21:10,240 --> 00:21:14,840
the room please do it quietly so people

463
00:21:12,400 --> 00:21:17,840
can still listen to the questions thank

464
00:21:14,840 --> 00:21:17,840
you

465
00:21:56,840 --> 00:22:01,760
vincent

466
00:21:59,679 --> 00:22:01,760
you

