1
00:00:06,640 --> 00:00:12,559
hi guys

2
00:00:08,720 --> 00:00:15,519
i'm juan going to do this talk

3
00:00:12,559 --> 00:00:17,600
before we start we didn't start yet

4
00:00:15,519 --> 00:00:19,520
before we start i wanted to ask just uh

5
00:00:17,600 --> 00:00:20,400
i can tailor it a bit better for your

6
00:00:19,520 --> 00:00:23,759
needs

7
00:00:20,400 --> 00:00:26,479
uh how many of you guys actually like

8
00:00:23,760 --> 00:00:27,279
or are enthusiasts or go about like

9
00:00:26,480 --> 00:00:29,119
rendering

10
00:00:27,279 --> 00:00:30,400
you guys if you can raise your hand how

11
00:00:29,119 --> 00:00:32,558
many like rendering

12
00:00:30,400 --> 00:00:33,920
okay that's quite a good amount oh okay

13
00:00:32,558 --> 00:00:35,680
how many of you that do rendering

14
00:00:33,920 --> 00:00:39,360
actually are interested

15
00:00:35,680 --> 00:00:43,200
in bulking okay that's a good amount

16
00:00:39,360 --> 00:00:45,760
how many actually understand vulcan

17
00:00:43,200 --> 00:00:47,360
uh not so many okay okay then i won't go

18
00:00:45,760 --> 00:00:49,039
into that many super

19
00:00:47,360 --> 00:00:50,399
low level technical details of woolcon

20
00:00:49,039 --> 00:00:52,719
because it can be

21
00:00:50,399 --> 00:00:55,199
uh we tried this a few months ago and it

22
00:00:52,719 --> 00:00:58,800
didn't end very well because uh

23
00:00:55,199 --> 00:01:02,480
uh lucan is like a bit difficult

24
00:00:58,800 --> 00:01:03,890
uh takes a while so we still have a bit

25
00:01:02,480 --> 00:01:05,119
more time i guess

26
00:01:03,890 --> 00:01:09,200
[Music]

27
00:01:05,119 --> 00:01:09,200
five minutes okay so that's okay

28
00:01:09,840 --> 00:01:13,680
well nice to see so many interests so

29
00:01:11,520 --> 00:01:15,920
much interest in rendering yes

30
00:01:13,680 --> 00:01:17,439
when it's worried that today you see a

31
00:01:15,920 --> 00:01:19,200
lot of game engines and like

32
00:01:17,439 --> 00:01:20,479
including a lot and that people wouldn't

33
00:01:19,200 --> 00:01:22,720
be interested anymore

34
00:01:20,479 --> 00:01:23,840
about rendering but nice to see regulars

35
00:01:22,720 --> 00:01:27,110
actually

36
00:01:23,840 --> 00:01:28,960
like it so

37
00:01:27,110 --> 00:01:32,240
[Music]

38
00:01:28,960 --> 00:01:34,559
okay how many here have you scolot

39
00:01:32,240 --> 00:01:35,360
oh nice good to see so many other

40
00:01:34,560 --> 00:01:38,320
juicers

41
00:01:35,360 --> 00:01:39,600
it keeps growing every year that's nice

42
00:01:38,320 --> 00:01:42,720
nice to know that you're here and not in

43
00:01:39,600 --> 00:01:47,360
the global game jam at least that's

44
00:01:42,720 --> 00:01:47,360
it's something so

45
00:01:51,680 --> 00:01:56,079
okay well the talk will be mostly about

46
00:01:54,640 --> 00:01:57,759
uh

47
00:01:56,079 --> 00:01:59,839
the kind of things that we take

48
00:01:57,759 --> 00:02:03,520
advantage of using woocomm

49
00:01:59,840 --> 00:02:05,520
i think mumbulkan came out a few years

50
00:02:03,520 --> 00:02:07,759
ago it wasn't very clear

51
00:02:05,520 --> 00:02:08,799
what it was for because you had opengl

52
00:02:07,759 --> 00:02:11,599
it worked

53
00:02:08,800 --> 00:02:12,800
it there was directx 11 and director x12

54
00:02:11,599 --> 00:02:14,799
was still kind of like

55
00:02:12,800 --> 00:02:16,720
something new and nobody really quite

56
00:02:14,800 --> 00:02:19,760
got what it was about

57
00:02:16,720 --> 00:02:23,200
uh when we saw vulcan we were like

58
00:02:19,760 --> 00:02:24,239
what is this for so we took a while

59
00:02:23,200 --> 00:02:26,879
actually to get

60
00:02:24,239 --> 00:02:27,920
the engine to be ported to we'll come

61
00:02:26,879 --> 00:02:32,079
it's still in

62
00:02:27,920 --> 00:02:35,040
in the process uh we learned a few

63
00:02:32,080 --> 00:02:35,680
bad things about opengl while porting it

64
00:02:35,040 --> 00:02:38,720
open gl

65
00:02:35,680 --> 00:02:40,879
three and four one more like 3.3

66
00:02:38,720 --> 00:02:41,920
so we had a lot of problem with the

67
00:02:40,879 --> 00:02:44,640
drivers and

68
00:02:41,920 --> 00:02:46,000
a lot of driver backs with opengl now

69
00:02:44,640 --> 00:02:47,679
for example

70
00:02:46,000 --> 00:02:49,200
we started having bugs that we didn't

71
00:02:47,680 --> 00:02:52,480
have before because

72
00:02:49,200 --> 00:02:54,160
the gpu makers just abandoned the

73
00:02:52,480 --> 00:02:56,160
opengl drivers and they start bit

74
00:02:54,160 --> 00:02:59,440
rotting for example

75
00:02:56,160 --> 00:03:00,000
so in the end we really had to to go to

76
00:02:59,440 --> 00:03:02,159
glucan

77
00:03:00,000 --> 00:03:03,519
and when you for example we started

78
00:03:02,159 --> 00:03:06,239
getting

79
00:03:03,519 --> 00:03:07,040
reports from users about performance

80
00:03:06,239 --> 00:03:09,440
issues they have

81
00:03:07,040 --> 00:03:10,400
and you would look like for example you

82
00:03:09,440 --> 00:03:13,440
render a scene with

83
00:03:10,400 --> 00:03:16,000
20 000 objects it was super slow

84
00:03:13,440 --> 00:03:16,640
uh because every object uses a different

85
00:03:16,000 --> 00:03:19,280
material

86
00:03:16,640 --> 00:03:20,000
like but not even a different material a

87
00:03:19,280 --> 00:03:21,599
different

88
00:03:20,000 --> 00:03:24,159
geometry the material was the same for

89
00:03:21,599 --> 00:03:26,640
20 000. i was really slow

90
00:03:24,159 --> 00:03:27,920
so i was like what if we try with the

91
00:03:26,640 --> 00:03:29,440
same geometry like

92
00:03:27,920 --> 00:03:31,280
they were 20 000 they have different

93
00:03:29,440 --> 00:03:31,599
geometry but just a cube like you know

94
00:03:31,280 --> 00:03:34,319
not

95
00:03:31,599 --> 00:03:35,518
many vertices uh we tried using the same

96
00:03:34,319 --> 00:03:38,798
tube and then it went

97
00:03:35,519 --> 00:03:41,120
super blexing fast so there's cases

98
00:03:38,799 --> 00:03:43,040
in opengl drivers like that you the

99
00:03:41,120 --> 00:03:44,879
driver does like validation some things

100
00:03:43,040 --> 00:03:46,000
under the house and some combinations of

101
00:03:44,879 --> 00:03:49,040
circumstances that you don't

102
00:03:46,000 --> 00:03:49,760
really know and they result in slowdowns

103
00:03:49,040 --> 00:03:52,079
that are

104
00:03:49,760 --> 00:03:53,920
kind of unpredictable uh if you're like

105
00:03:52,080 --> 00:03:55,439
using linux and mesa you can kind of see

106
00:03:53,920 --> 00:03:58,798
what the driver does i'm not sure have

107
00:03:55,439 --> 00:04:00,959
any of you actually seen any mesa code

108
00:03:58,799 --> 00:04:02,239
well it's it's interesting uh if you

109
00:04:00,959 --> 00:04:05,280
want to see how a driver

110
00:04:02,239 --> 00:04:06,799
over gl driver works uh they do a lot of

111
00:04:05,280 --> 00:04:07,439
a lot more under the hood that you may

112
00:04:06,799 --> 00:04:10,560
expect

113
00:04:07,439 --> 00:04:11,519
that a driver does so with vulcan it's

114
00:04:10,560 --> 00:04:15,519
kind of like

115
00:04:11,519 --> 00:04:17,440
the the gpu makers

116
00:04:15,519 --> 00:04:19,358
they went like completely to the other

117
00:04:17,440 --> 00:04:21,440
side they said we're going to make an

118
00:04:19,358 --> 00:04:23,359
api that is completely low level

119
00:04:21,440 --> 00:04:25,520
it does no validation for you you can

120
00:04:23,360 --> 00:04:27,520
actually crash your operating system

121
00:04:25,520 --> 00:04:28,560
or more like your windowing system using

122
00:04:27,520 --> 00:04:30,479
vulcan

123
00:04:28,560 --> 00:04:33,040
because it doesn't know validation you

124
00:04:30,479 --> 00:04:36,080
can just do whatever you want

125
00:04:33,040 --> 00:04:38,960
so they went totally the other side

126
00:04:36,080 --> 00:04:39,758
and i got a few low caps of my computer

127
00:04:38,960 --> 00:04:42,239
especially if

128
00:04:39,759 --> 00:04:43,840
you run windows it's kind of crashes on

129
00:04:42,240 --> 00:04:47,040
the video restarts

130
00:04:43,840 --> 00:04:49,039
if you're using x11 it just dies

131
00:04:47,040 --> 00:04:51,440
so you have to just restart it yourself

132
00:04:49,040 --> 00:04:54,720
or kill it from a terminal

133
00:04:51,440 --> 00:04:56,080
so you start learning the kind of things

134
00:04:54,720 --> 00:04:57,840
that crash and you're like why they

135
00:04:56,080 --> 00:04:59,199
didn't validate this it was so easy but

136
00:04:57,840 --> 00:05:00,960
actually

137
00:04:59,199 --> 00:05:02,240
the philosophy was we won't validate

138
00:05:00,960 --> 00:05:03,919
anything just do whatever you want you

139
00:05:02,240 --> 00:05:05,919
have the full performance

140
00:05:03,919 --> 00:05:07,520
uh we give you the gun loaded you just

141
00:05:05,919 --> 00:05:10,560
do whatever you want

142
00:05:07,520 --> 00:05:11,120
uh so it's very interesting actually so

143
00:05:10,560 --> 00:05:13,440
well

144
00:05:11,120 --> 00:05:14,639
are we on time to start church yeah two

145
00:05:13,440 --> 00:05:17,440
minutes okay

146
00:05:14,639 --> 00:05:19,199
uh in two minutes yeah well two more

147
00:05:17,440 --> 00:05:20,479
minutes okay then uh

148
00:05:19,199 --> 00:05:24,639
i will tell you a bit more about

149
00:05:20,479 --> 00:05:26,320
bulgaria yes um validation layers

150
00:05:24,639 --> 00:05:27,759
yes you have validation layers the

151
00:05:26,320 --> 00:05:28,960
validation layers are actually really

152
00:05:27,759 --> 00:05:31,280
useful

153
00:05:28,960 --> 00:05:33,039
but the problem is that if you do

154
00:05:31,280 --> 00:05:34,559
something the validation layer may spit

155
00:05:33,039 --> 00:05:35,919
an error this is something that took me

156
00:05:34,560 --> 00:05:37,680
a while to understand because

157
00:05:35,919 --> 00:05:39,198
i used to put the validation layers and

158
00:05:37,680 --> 00:05:40,880
the validation layers were throw an

159
00:05:39,199 --> 00:05:42,400
error every time something goes out but

160
00:05:40,880 --> 00:05:43,919
validation

161
00:05:42,400 --> 00:05:46,080
doesn't do really anything it just

162
00:05:43,919 --> 00:05:47,359
throws an error but passes your command

163
00:05:46,080 --> 00:05:50,080
through any way

164
00:05:47,360 --> 00:05:51,199
so the problem is that i got a lot of

165
00:05:50,080 --> 00:05:53,440
crashes even with

166
00:05:51,199 --> 00:05:55,120
a validation layer it was why isn't it

167
00:05:53,440 --> 00:05:57,280
validating it but yeah it was printing

168
00:05:55,120 --> 00:05:59,919
the error but then the computer froze

169
00:05:57,280 --> 00:06:01,599
so you you have to put a breakpoint on

170
00:05:59,919 --> 00:06:04,479
the validation layer when it

171
00:06:01,600 --> 00:06:06,000
tells you to write an error and then you

172
00:06:04,479 --> 00:06:07,840
you can survive it by just

173
00:06:06,000 --> 00:06:09,360
like catching the error before it

174
00:06:07,840 --> 00:06:10,799
freezes like this kind of things are

175
00:06:09,360 --> 00:06:12,000
really cool when you work with with

176
00:06:10,800 --> 00:06:14,800
vulcan

177
00:06:12,000 --> 00:06:16,800
uh you start learning it like uh just by

178
00:06:14,800 --> 00:06:18,479
making those mistakes i guess

179
00:06:16,800 --> 00:06:20,240
uh and then i was getting the actual

180
00:06:18,479 --> 00:06:21,680
error from the validation layer

181
00:06:20,240 --> 00:06:23,520
but i didn't know it because it was

182
00:06:21,680 --> 00:06:24,560
freezing so it was like hey nowhere over

183
00:06:23,520 --> 00:06:26,479
splintered like yeah

184
00:06:24,560 --> 00:06:28,080
you of course it doesn't keep scrolling

185
00:06:26,479 --> 00:06:30,400
because it's frozen

186
00:06:28,080 --> 00:06:32,560
so these kind of things are it's very

187
00:06:30,400 --> 00:06:34,000
hardcore but once you start getting the

188
00:06:32,560 --> 00:06:36,880
hang of vulcan

189
00:06:34,000 --> 00:06:38,560
i think it's beautiful that you get so

190
00:06:36,880 --> 00:06:40,639
so much low level access to

191
00:06:38,560 --> 00:06:42,800
decide how to adapt your rendering code

192
00:06:40,639 --> 00:06:44,880
the best as possible as your engine

193
00:06:42,800 --> 00:06:47,120
uh to your code on your engine actually

194
00:06:44,880 --> 00:06:49,039
one thing i i found is that glock is a

195
00:06:47,120 --> 00:06:51,199
general purpose game engine

196
00:06:49,039 --> 00:06:52,719
and we're okay okay well i will just

197
00:06:51,199 --> 00:06:53,759
conclude this phrase and start the

198
00:06:52,720 --> 00:06:57,520
presentation so i go

199
00:06:53,759 --> 00:06:59,360
to general purpose game engine and

200
00:06:57,520 --> 00:07:00,880
since we need to satisfy the needs of so

201
00:06:59,360 --> 00:07:04,080
many games we need to

202
00:07:00,880 --> 00:07:06,159
look for algorithms that are kind of

203
00:07:04,080 --> 00:07:07,919
all-rounders you know maybe there's

204
00:07:06,160 --> 00:07:09,759
algorithms for i don't know for cooling

205
00:07:07,919 --> 00:07:10,799
the scene or for doing rendering shadow

206
00:07:09,759 --> 00:07:12,639
mapping uh

207
00:07:10,800 --> 00:07:14,560
different kinds of materials there are

208
00:07:12,639 --> 00:07:17,680
better for different kind of games

209
00:07:14,560 --> 00:07:20,160
if you were making your own aaa super

210
00:07:17,680 --> 00:07:22,000
high budget game you will be fine doing

211
00:07:20,160 --> 00:07:23,520
your own stuff

212
00:07:22,000 --> 00:07:25,199
but when you have a general purpose game

213
00:07:23,520 --> 00:07:26,960
engine you need to find all rounders you

214
00:07:25,199 --> 00:07:27,840
know algorithms that will work for most

215
00:07:26,960 --> 00:07:29,758
of the games

216
00:07:27,840 --> 00:07:31,359
and maybe add some tweaking options for

217
00:07:29,759 --> 00:07:33,840
different kind of games but mostly it

218
00:07:31,360 --> 00:07:35,919
should be like good performance overall

219
00:07:33,840 --> 00:07:37,679
but not best performance for specific

220
00:07:35,919 --> 00:07:39,280
use case maybe some users just take the

221
00:07:37,680 --> 00:07:40,000
code and optimize it for a specific use

222
00:07:39,280 --> 00:07:42,080
case

223
00:07:40,000 --> 00:07:43,759
but yeah it's uh it's interesting vulcan

224
00:07:42,080 --> 00:07:45,199
is really good if you want to like

225
00:07:43,759 --> 00:07:47,360
extract the

226
00:07:45,199 --> 00:07:48,400
latest the the smallest drip of

227
00:07:47,360 --> 00:07:51,199
performance

228
00:07:48,400 --> 00:07:53,120
out of of the api if you're making like

229
00:07:51,199 --> 00:07:56,319
a custom game made in bootcamp

230
00:07:53,120 --> 00:07:58,400
uh but for something general purpose

231
00:07:56,319 --> 00:08:00,400
it's a little more complicated i think

232
00:07:58,400 --> 00:08:01,039
they they didn't design it so much for

233
00:08:00,400 --> 00:08:03,039
it

234
00:08:01,039 --> 00:08:04,639
uh so there was a lot of trigger that

235
00:08:03,039 --> 00:08:05,280
needed to be done but yeah it's very

236
00:08:04,639 --> 00:08:06,879
interesting

237
00:08:05,280 --> 00:08:09,440
so if you're going to learn bull candles

238
00:08:06,879 --> 00:08:11,759
just good luck it's very nice

239
00:08:09,440 --> 00:08:13,199
so i will start with a few facts about

240
00:08:11,759 --> 00:08:14,800
kodot

241
00:08:13,199 --> 00:08:17,360
little information about the game the

242
00:08:14,800 --> 00:08:19,520
game engine

243
00:08:17,360 --> 00:08:20,400
although this fully open source we make

244
00:08:19,520 --> 00:08:23,758
a mit

245
00:08:20,400 --> 00:08:25,520
licensed engine it only uses a

246
00:08:23,759 --> 00:08:27,919
compatible third party license so we

247
00:08:25,520 --> 00:08:30,318
don't mix proprietary or gpl or anything

248
00:08:27,919 --> 00:08:33,838
just mit compatible license

249
00:08:30,319 --> 00:08:35,919
and we have it on hosted on github uh

250
00:08:33,839 --> 00:08:36,880
one main thing like why making an open

251
00:08:35,919 --> 00:08:40,079
source game engine

252
00:08:36,880 --> 00:08:43,120
uh what's what's the point of doing that

253
00:08:40,080 --> 00:08:45,519
and many people don't know that like of

254
00:08:43,120 --> 00:08:47,760
all the software industry revenue

255
00:08:45,519 --> 00:08:49,440
uh the whole software industry like

256
00:08:47,760 --> 00:08:51,680
everything that writes code and sells it

257
00:08:49,440 --> 00:08:54,560
the whole software industry revenue

258
00:08:51,680 --> 00:08:55,839
out of all that revenue 25 comes from

259
00:08:54,560 --> 00:08:58,560
the video game industry

260
00:08:55,839 --> 00:09:00,160
you know but when you hear about open

261
00:08:58,560 --> 00:09:03,439
source you don't really hear about games

262
00:09:00,160 --> 00:09:06,160
you just hear about python apache

263
00:09:03,440 --> 00:09:08,640
mongodb like things that are my

264
00:09:06,160 --> 00:09:10,719
productivity a business

265
00:09:08,640 --> 00:09:12,399
services so there's kind of a big gap in

266
00:09:10,720 --> 00:09:13,279
open source in general for whatever is

267
00:09:12,399 --> 00:09:16,480
games

268
00:09:13,279 --> 00:09:19,760
i think so god tries to fit

269
00:09:16,480 --> 00:09:21,600
to feel that 25 missing for the open

270
00:09:19,760 --> 00:09:23,920
source software

271
00:09:21,600 --> 00:09:25,839
so we we feel our mission is important

272
00:09:23,920 --> 00:09:27,120
ever even if uh

273
00:09:25,839 --> 00:09:29,440
it's kind of fun because you know in

274
00:09:27,120 --> 00:09:31,279
like in we go to

275
00:09:29,440 --> 00:09:32,560
events like gdc and they're like open

276
00:09:31,279 --> 00:09:34,399
source go to an open source

277
00:09:32,560 --> 00:09:36,160
event and we come to open source events

278
00:09:34,399 --> 00:09:38,160
our games go to a game event like

279
00:09:36,160 --> 00:09:39,519
so we're kind of like in the middle of

280
00:09:38,160 --> 00:09:41,199
something we believe our mission is

281
00:09:39,519 --> 00:09:42,240
super important but we are still in a

282
00:09:41,200 --> 00:09:45,600
limbo

283
00:09:42,240 --> 00:09:46,959
so well yeah we are fully open source uh

284
00:09:45,600 --> 00:09:49,200
we have a really active developer

285
00:09:46,959 --> 00:09:51,359
community this actually is old

286
00:09:49,200 --> 00:09:53,200
we have over a thousand now contributors

287
00:09:51,360 --> 00:09:55,200
like well over a thousand this has some

288
00:09:53,200 --> 00:09:56,880
months and it's already one from eight

289
00:09:55,200 --> 00:09:58,480
hundred two thousand

290
00:09:56,880 --> 00:10:00,480
uh we have more country core

291
00:09:58,480 --> 00:10:02,000
contributors in fact they got a 3.2 we

292
00:10:00,480 --> 00:10:05,120
just released color 3.2

293
00:10:02,000 --> 00:10:07,680
uh some days ago i had like

294
00:10:05,120 --> 00:10:09,040
almost 400 contributors so there's a lot

295
00:10:07,680 --> 00:10:10,560
of people really interested in

296
00:10:09,040 --> 00:10:12,319
in making this engine happen and

297
00:10:10,560 --> 00:10:14,800
contributing

298
00:10:12,320 --> 00:10:16,480
it's i think the third or fourth most

299
00:10:14,800 --> 00:10:17,839
fastest growing project in github or

300
00:10:16,480 --> 00:10:19,839
something like that

301
00:10:17,839 --> 00:10:21,839
and we have like hundreds of prs opened

302
00:10:19,839 --> 00:10:25,519
every month

303
00:10:21,839 --> 00:10:27,200
so it's quite a growing project

304
00:10:25,519 --> 00:10:29,040
we have a very active user community

305
00:10:27,200 --> 00:10:30,880
again this is how we just released 3.1

306
00:10:29,040 --> 00:10:34,000
so this probably keeps going

307
00:10:30,880 --> 00:10:35,680
uh so yeah we we have like a large

308
00:10:34,000 --> 00:10:36,720
community on steam we publish golothon's

309
00:10:35,680 --> 00:10:40,160
team uh so

310
00:10:36,720 --> 00:10:41,600
we know uh we have a lot of we now have

311
00:10:40,160 --> 00:10:43,600
like over 900

312
00:10:41,600 --> 00:10:44,959
reviews in our repository overwhelmingly

313
00:10:43,600 --> 00:10:47,519
positive

314
00:10:44,959 --> 00:10:49,119
uh so yeah if you go to twitter if you

315
00:10:47,519 --> 00:10:50,320
want to read it if you go to discord if

316
00:10:49,120 --> 00:10:52,480
you go to irc

317
00:10:50,320 --> 00:10:53,519
uh facebook you will find really large

318
00:10:52,480 --> 00:10:55,360
code communities

319
00:10:53,519 --> 00:10:58,839
really helpful we try to make sure that

320
00:10:55,360 --> 00:11:02,000
the tone is always nice and friendly

321
00:10:58,839 --> 00:11:05,920
so well let's go

322
00:11:02,000 --> 00:11:09,040
about uh let's start end with the facts

323
00:11:05,920 --> 00:11:11,120
go with vulcan so uh

324
00:11:09,040 --> 00:11:12,160
godot used to be a proprietary game

325
00:11:11,120 --> 00:11:14,320
engine uh

326
00:11:12,160 --> 00:11:15,439
ariel mansour and i had our company for

327
00:11:14,320 --> 00:11:17,760
a long time

328
00:11:15,440 --> 00:11:20,160
uh at some point we open source the game

329
00:11:17,760 --> 00:11:21,920
engine like in 2014 and it started

330
00:11:20,160 --> 00:11:23,120
growing back then it was mostly mean for

331
00:11:21,920 --> 00:11:24,880
mobile it had 3d

332
00:11:23,120 --> 00:11:26,560
rendering but it wasn't very good it was

333
00:11:24,880 --> 00:11:29,279
just open gl2

334
00:11:26,560 --> 00:11:31,279
when the three came out uh we ported to

335
00:11:29,279 --> 00:11:32,000
opengl 3.3 so we could use newer

336
00:11:31,279 --> 00:11:35,279
features and

337
00:11:32,000 --> 00:11:37,200
use opengl es3 with at the time

338
00:11:35,279 --> 00:11:38,959
it was a few years ago it was seemed

339
00:11:37,200 --> 00:11:41,680
like a really good idea

340
00:11:38,959 --> 00:11:43,920
uh but the truth is that opengl mobile

341
00:11:41,680 --> 00:11:44,479
is broken the drivers are all broken uh

342
00:11:43,920 --> 00:11:47,839
mobile

343
00:11:44,480 --> 00:11:49,360
devices don't get updated so it's uh it

344
00:11:47,839 --> 00:11:51,680
was a pain

345
00:11:49,360 --> 00:11:53,360
uh and then yeah we saw that opengl when

346
00:11:51,680 --> 00:11:54,800
vulcan came out they said yeah this is

347
00:11:53,360 --> 00:11:56,320
going to be an alternative we're going

348
00:11:54,800 --> 00:11:59,279
to continue working on opengl

349
00:11:56,320 --> 00:12:01,120
lies it's abundant nobody cares any more

350
00:11:59,279 --> 00:12:03,760
about opengl it's dead

351
00:12:01,120 --> 00:12:05,200
so uh one thing about the vigil is that

352
00:12:03,760 --> 00:12:07,040
the api design is

353
00:12:05,200 --> 00:12:08,800
does not really map very well to modern

354
00:12:07,040 --> 00:12:11,120
hardware

355
00:12:08,800 --> 00:12:12,560
it's not really when you learn bootcamp

356
00:12:11,120 --> 00:12:13,279
you realize what the hardware actually

357
00:12:12,560 --> 00:12:15,839
does

358
00:12:13,279 --> 00:12:16,720
and you understand that opengl doesn't

359
00:12:15,839 --> 00:12:18,240
really

360
00:12:16,720 --> 00:12:20,320
like i will give you a very small

361
00:12:18,240 --> 00:12:22,000
example since so many of you actually

362
00:12:20,320 --> 00:12:23,600
are interested in rendering you know in

363
00:12:22,000 --> 00:12:26,320
opengl you can like set

364
00:12:23,600 --> 00:12:28,320
the vertex buffer you can set uh the

365
00:12:26,320 --> 00:12:31,839
textures in use you can set

366
00:12:28,320 --> 00:12:33,920
uh a lot of uh rastering operations like

367
00:12:31,839 --> 00:12:36,399
the winding of the triangles or if you

368
00:12:33,920 --> 00:12:37,839
draw lines or if you write uh quads or

369
00:12:36,399 --> 00:12:40,639
quasi nodes anymore

370
00:12:37,839 --> 00:12:42,160
triangles lines points you can change a

371
00:12:40,639 --> 00:12:43,200
lot of things and then you call the draw

372
00:12:42,160 --> 00:12:44,959
function

373
00:12:43,200 --> 00:12:46,959
when did you know that when you do all

374
00:12:44,959 --> 00:12:48,719
these things changing the state opengl

375
00:12:46,959 --> 00:12:50,719
actually is patching the shader

376
00:12:48,720 --> 00:12:52,720
and actually it's modifying the code of

377
00:12:50,720 --> 00:12:54,079
the shader it has a shader in memory

378
00:12:52,720 --> 00:12:55,440
that you bind the shader

379
00:12:54,079 --> 00:12:57,199
you change all these things then it

380
00:12:55,440 --> 00:12:59,760
binds the shader and if you change

381
00:12:57,200 --> 00:13:01,279
like the shader it needs to re patch the

382
00:12:59,760 --> 00:13:02,319
shader with all the changes you have

383
00:13:01,279 --> 00:13:05,040
done

384
00:13:02,320 --> 00:13:07,040
so there's a lot of code invisible code

385
00:13:05,040 --> 00:13:08,639
inside of ngl that you don't know that

386
00:13:07,040 --> 00:13:09,760
is patching the shader and doing a lot

387
00:13:08,639 --> 00:13:12,639
of work every time you

388
00:13:09,760 --> 00:13:13,920
change those status the apis are like

389
00:13:12,639 --> 00:13:16,959
vulcan which are

390
00:13:13,920 --> 00:13:18,000
called uh it's not entirely stateless

391
00:13:16,959 --> 00:13:20,880
but it's mostly

392
00:13:18,000 --> 00:13:22,160
pipeline based it's called pipeline base

393
00:13:20,880 --> 00:13:24,480
you just create that one

394
00:13:22,160 --> 00:13:25,920
object with all the states uh and if you

395
00:13:24,480 --> 00:13:27,600
want to change the state you just create

396
00:13:25,920 --> 00:13:30,479
more of those objects you know

397
00:13:27,600 --> 00:13:31,360
if you want uh the pipeline has like the

398
00:13:30,480 --> 00:13:33,760
shader

399
00:13:31,360 --> 00:13:36,959
and all the states you set in opengl

400
00:13:33,760 --> 00:13:39,199
like the vertex buffer format and the

401
00:13:36,959 --> 00:13:40,399
the geometry and the analysing

402
00:13:39,199 --> 00:13:43,120
everything just in one

403
00:13:40,399 --> 00:13:45,040
object so the thing is when you set a

404
00:13:43,120 --> 00:13:45,760
pipeline to draw it just sets everything

405
00:13:45,040 --> 00:13:47,680
at once

406
00:13:45,760 --> 00:13:49,120
and it's super super fast this this is

407
00:13:47,680 --> 00:13:52,399
really fast

408
00:13:49,120 --> 00:13:53,040
so vulcan forces you to be uh to just

409
00:13:52,399 --> 00:13:55,680
get your

410
00:13:53,040 --> 00:13:56,480
your your data together properly and

411
00:13:55,680 --> 00:13:58,160
when you set

412
00:13:56,480 --> 00:14:00,480
everything together it's just just much

413
00:13:58,160 --> 00:14:02,319
faster so these kind of things make it

414
00:14:00,480 --> 00:14:03,839
much more optimal to draw a large amount

415
00:14:02,320 --> 00:14:05,760
of actions when we started

416
00:14:03,839 --> 00:14:07,440
porting the engine to woolcon the first

417
00:14:05,760 --> 00:14:09,439
thing we noticed was a huge

418
00:14:07,440 --> 00:14:11,680
increment in performance even in the 2d

419
00:14:09,440 --> 00:14:13,519
engine because we just called gl draw

420
00:14:11,680 --> 00:14:14,800
arrays like every time we draw a

421
00:14:13,519 --> 00:14:17,040
primitive

422
00:14:14,800 --> 00:14:18,399
and just using wool gun even if you are

423
00:14:17,040 --> 00:14:20,079
doing the same amount like not

424
00:14:18,399 --> 00:14:21,519
the same but similar amount of cards the

425
00:14:20,079 --> 00:14:26,079
performance was like whoa

426
00:14:21,519 --> 00:14:28,160
what's impressive how much it it uh

427
00:14:26,079 --> 00:14:29,519
so when vulcan is more modern than

428
00:14:28,160 --> 00:14:31,279
benjiel

429
00:14:29,519 --> 00:14:32,959
it's smart up to more up to date for

430
00:14:31,279 --> 00:14:34,000
example if you want to use ray tracing

431
00:14:32,959 --> 00:14:37,359
extensions now

432
00:14:34,000 --> 00:14:38,800
uh there's going to be it's only nvidia

433
00:14:37,360 --> 00:14:41,600
but soon there's going to be like an

434
00:14:38,800 --> 00:14:43,839
official rtx implementation for glucan

435
00:14:41,600 --> 00:14:45,839
so this is not any longer in opengl

436
00:14:43,839 --> 00:14:49,040
because as i said eventually

437
00:14:45,839 --> 00:14:51,199
uh so the all the new extensions like

438
00:14:49,040 --> 00:14:52,800
hdr rendering a lot of these things are

439
00:14:51,199 --> 00:14:54,880
just coming out for vulcan opengl is

440
00:14:52,800 --> 00:14:57,519
just ignore nowadays

441
00:14:54,880 --> 00:14:58,399
uh it kind of this sounds a bit worse or

442
00:14:57,519 --> 00:15:00,560
weird

443
00:14:58,399 --> 00:15:02,480
but it really works as an entry barrier

444
00:15:00,560 --> 00:15:03,359
uh because we have the problem that for

445
00:15:02,480 --> 00:15:06,240
example

446
00:15:03,360 --> 00:15:07,760
all the rendering we we thought that we

447
00:15:06,240 --> 00:15:10,480
were going to making

448
00:15:07,760 --> 00:15:12,000
opengl 3.3 compatible which dates back

449
00:15:10,480 --> 00:15:16,000
to directx 10 like

450
00:15:12,000 --> 00:15:18,639
2008 to 1079 i think i think around that

451
00:15:16,000 --> 00:15:19,920
so you can run all the hygiene goto 3

452
00:15:18,639 --> 00:15:23,680
renderers and shaders

453
00:15:19,920 --> 00:15:25,040
in really old hardware and truth is that

454
00:15:23,680 --> 00:15:26,239
that doesn't work in that hardware

455
00:15:25,040 --> 00:15:27,120
because the hardware has too little

456
00:15:26,240 --> 00:15:30,320
video memory

457
00:15:27,120 --> 00:15:32,000
to delete limitations it's low so with

458
00:15:30,320 --> 00:15:34,240
vulcan we can just make sure that if you

459
00:15:32,000 --> 00:15:35,920
have all hardware you're not going to

460
00:15:34,240 --> 00:15:37,839
to ruin it because it's just designed

461
00:15:35,920 --> 00:15:39,599
for modern stuff and we don't have users

462
00:15:37,839 --> 00:15:41,440
complaining i go through this low

463
00:15:39,600 --> 00:15:43,120
because yes you run it in 10 years old

464
00:15:41,440 --> 00:15:44,639
hardware and you're pretty

465
00:15:43,120 --> 00:15:46,560
pretty effects on of course it's going

466
00:15:44,639 --> 00:15:48,480
to be slow so now it's a nice entry

467
00:15:46,560 --> 00:15:49,199
barrier which means that we can focus on

468
00:15:48,480 --> 00:15:51,040
like

469
00:15:49,199 --> 00:15:52,560
optimizations and new features and

470
00:15:51,040 --> 00:15:54,639
everything and people that uses bootcamp

471
00:15:52,560 --> 00:15:56,560
will be able to run it and if you have a

472
00:15:54,639 --> 00:15:58,000
computer that does not support vulcan

473
00:15:56,560 --> 00:15:59,839
you're going to be using the opengl

474
00:15:58,000 --> 00:16:00,880
renderer which is the compatibility

475
00:15:59,839 --> 00:16:02,800
render

476
00:16:00,880 --> 00:16:04,399
which which is the same for hardware so

477
00:16:02,800 --> 00:16:08,319
you will be fine anyway i mean less

478
00:16:04,399 --> 00:16:08,320
confusion for the users is good for us

479
00:16:09,920 --> 00:16:13,680
one of the new things we added to a lot

480
00:16:11,519 --> 00:16:15,120
is creating a new a new layer which is

481
00:16:13,680 --> 00:16:19,599
rendering device

482
00:16:15,120 --> 00:16:21,600
uh now this is very interesting uh

483
00:16:19,600 --> 00:16:23,279
the rendering aps actually even if

484
00:16:21,600 --> 00:16:25,600
bootcamp looks really really

485
00:16:23,279 --> 00:16:26,639
complicated because it is you can

486
00:16:25,600 --> 00:16:28,880
actually abstract

487
00:16:26,639 --> 00:16:31,040
to a higher level api really easily and

488
00:16:28,880 --> 00:16:32,560
make something really simple because now

489
00:16:31,040 --> 00:16:35,199
we only have like pretty much the

490
00:16:32,560 --> 00:16:38,638
textures the buffers

491
00:16:35,199 --> 00:16:41,040
uh the the frame buffers and even some

492
00:16:38,639 --> 00:16:44,720
apis like metal don't even have that

493
00:16:41,040 --> 00:16:46,480
uh you have the the shaders the

494
00:16:44,720 --> 00:16:48,320
pipelines and then the

495
00:16:46,480 --> 00:16:49,519
the render list and that's it there's

496
00:16:48,320 --> 00:16:53,040
not so much

497
00:16:49,519 --> 00:16:55,680
uh actually amazingly uh even if in some

498
00:16:53,040 --> 00:16:57,519
aspects vulcan is really complicated uh

499
00:16:55,680 --> 00:16:58,638
a lot of complexity that came from the

500
00:16:57,519 --> 00:17:00,560
time of opengl

501
00:16:58,639 --> 00:17:02,000
has been lifted because now a lot of

502
00:17:00,560 --> 00:17:03,599
things are more general purpose than

503
00:17:02,000 --> 00:17:05,679
they used to be

504
00:17:03,600 --> 00:17:07,280
so in d4 we're going to have the

505
00:17:05,679 --> 00:17:08,559
resource error which is the the main

506
00:17:07,280 --> 00:17:10,319
abstraction for rendering

507
00:17:08,559 --> 00:17:11,678
is it's the the entry barrier for

508
00:17:10,319 --> 00:17:12,639
anything that has to do with with

509
00:17:11,679 --> 00:17:14,480
rendering

510
00:17:12,640 --> 00:17:16,319
and we're going to have two rasterizers

511
00:17:14,480 --> 00:17:18,079
one is going to use fds

512
00:17:16,319 --> 00:17:19,839
rendering device and rendering devices

513
00:17:18,079 --> 00:17:22,240
what abstracts will come

514
00:17:19,839 --> 00:17:23,280
we can make it attract now metal or

515
00:17:22,240 --> 00:17:24,959
directx 12

516
00:17:23,280 --> 00:17:26,639
or there's some people forcing it to

517
00:17:24,959 --> 00:17:27,360
playstation we can't do it because we're

518
00:17:26,640 --> 00:17:29,039
open source

519
00:17:27,359 --> 00:17:30,840
but they can use support it's much

520
00:17:29,039 --> 00:17:33,360
easier to port rendering device to

521
00:17:30,840 --> 00:17:34,720
bootcamp and then we have a raster user

522
00:17:33,360 --> 00:17:38,080
that is glds2

523
00:17:34,720 --> 00:17:40,640
uh maybe we we will add some gles3

524
00:17:38,080 --> 00:17:42,000
functionality uh and this just uses

525
00:17:40,640 --> 00:17:43,679
opengl es

526
00:17:42,000 --> 00:17:45,520
so we have a completely different i mean

527
00:17:43,679 --> 00:17:46,000
visual server abstracts the api but then

528
00:17:45,520 --> 00:17:47,918
you're going

529
00:17:46,000 --> 00:17:49,520
to have a different completely different

530
00:17:47,919 --> 00:17:51,919
backend depending on

531
00:17:49,520 --> 00:17:53,679
modern stuff or compatibility stuff so

532
00:17:51,919 --> 00:17:54,400
if this is transparent to user you just

533
00:17:53,679 --> 00:17:56,080
switch

534
00:17:54,400 --> 00:17:58,240
if you want to use opengl or vulcan and

535
00:17:56,080 --> 00:18:00,159
everything just works

536
00:17:58,240 --> 00:18:01,600
whatever is done in opengl doesn't

537
00:18:00,160 --> 00:18:04,720
appear it's just hidden

538
00:18:01,600 --> 00:18:06,399
so so well the other thing that

539
00:18:04,720 --> 00:18:07,919
users requested a lot of things that you

540
00:18:06,400 --> 00:18:09,120
couldn't do before that you will be able

541
00:18:07,919 --> 00:18:10,640
to do english for is that

542
00:18:09,120 --> 00:18:12,559
you will be able to access from your

543
00:18:10,640 --> 00:18:14,240
scripting language or whatever you want

544
00:18:12,559 --> 00:18:14,879
like c plus plus two rendering device

545
00:18:14,240 --> 00:18:17,280
which is the

546
00:18:14,880 --> 00:18:18,960
the bull can abstract like the rendering

547
00:18:17,280 --> 00:18:20,720
abstraction so if you actually want to

548
00:18:18,960 --> 00:18:22,000
do like more advanced custom rendering

549
00:18:20,720 --> 00:18:23,679
on the engine now you

550
00:18:22,000 --> 00:18:25,360
you will be able to because you will be

551
00:18:23,679 --> 00:18:28,000
able to insert your own code

552
00:18:25,360 --> 00:18:28,959
during the rendering loop that hopefully

553
00:18:28,000 --> 00:18:30,799
will be very nice

554
00:18:28,960 --> 00:18:32,160
uh it was one of the most requested

555
00:18:30,799 --> 00:18:34,080
features

556
00:18:32,160 --> 00:18:35,840
uh and yeah it's eventually portable to

557
00:18:34,080 --> 00:18:38,000
more apis uh there's

558
00:18:35,840 --> 00:18:39,520
like 14 if you wanted to portal 3 to the

559
00:18:38,000 --> 00:18:41,200
playstation you have to

560
00:18:39,520 --> 00:18:42,799
write the entire raster resource which

561
00:18:41,200 --> 00:18:44,880
is really huge

562
00:18:42,799 --> 00:18:46,720
for gold four you just put like

563
00:18:44,880 --> 00:18:50,640
rendering device and that's it it's much

564
00:18:46,720 --> 00:18:52,000
much smaller so

565
00:18:50,640 --> 00:18:53,840
another thing we're going to have in

566
00:18:52,000 --> 00:18:57,520
gold four we we

567
00:18:53,840 --> 00:19:00,879
decided it was the best way to go is

568
00:18:57,520 --> 00:19:03,440
at first we tried to do our rendering

569
00:19:00,880 --> 00:19:04,559
uh woolkind rendering code that supports

570
00:19:03,440 --> 00:19:07,840
both

571
00:19:04,559 --> 00:19:09,918
mobile and desktop but as as we

572
00:19:07,840 --> 00:19:11,678
started working on this we realized that

573
00:19:09,919 --> 00:19:13,360
mobile and desktop are really completely

574
00:19:11,679 --> 00:19:14,880
different architectures it's not even

575
00:19:13,360 --> 00:19:15,918
worth trying to use the same code for

576
00:19:14,880 --> 00:19:17,600
both

577
00:19:15,919 --> 00:19:19,520
so algorithm is going to have a high and

578
00:19:17,600 --> 00:19:20,959
low end bootcamp renderers this is

579
00:19:19,520 --> 00:19:23,440
separate from the opengl

580
00:19:20,960 --> 00:19:24,000
legacy renderer so the high end will be

581
00:19:23,440 --> 00:19:26,320
just

582
00:19:24,000 --> 00:19:27,760
for for for desktop we are just going to

583
00:19:26,320 --> 00:19:30,159
use like for example

584
00:19:27,760 --> 00:19:31,120
let me give you a few examples like on

585
00:19:30,160 --> 00:19:32,960
desktop

586
00:19:31,120 --> 00:19:34,959
bootcamp has something called uh

587
00:19:32,960 --> 00:19:36,320
descriptor sets which is the amount of

588
00:19:34,960 --> 00:19:38,400
uh

589
00:19:36,320 --> 00:19:40,000
like you could call it uniforms and

590
00:19:38,400 --> 00:19:40,880
other things that you combine to shaders

591
00:19:40,000 --> 00:19:43,039
in groups

592
00:19:40,880 --> 00:19:45,520
uh like on desktop it's like i think the

593
00:19:43,039 --> 00:19:48,720
limit is 16 but the mobile is four

594
00:19:45,520 --> 00:19:51,760
so you you when you have more you can

595
00:19:48,720 --> 00:19:52,000
optimize more a lot of things uh so we

596
00:19:51,760 --> 00:19:53,520
were

597
00:19:52,000 --> 00:19:55,039
being restricted to fortress from a

598
00:19:53,520 --> 00:19:56,720
while then at some point it's no it's

599
00:19:55,039 --> 00:19:58,400
not worth it let's just make that hike

600
00:19:56,720 --> 00:20:01,280
and use this

601
00:19:58,400 --> 00:20:02,159
for example on desktop you can have

602
00:20:01,280 --> 00:20:05,600
something called

603
00:20:02,159 --> 00:20:07,200
uh indirect texturing indirect texture

604
00:20:05,600 --> 00:20:08,240
addressing you can put all your textures

605
00:20:07,200 --> 00:20:10,080
in a big array

606
00:20:08,240 --> 00:20:12,320
and then you use an integer to address

607
00:20:10,080 --> 00:20:13,840
the textures this works fine on desktop

608
00:20:12,320 --> 00:20:17,200
it has very little cost

609
00:20:13,840 --> 00:20:19,199
on mobile you just can't do it

610
00:20:17,200 --> 00:20:20,640
so and for example on mobile you still

611
00:20:19,200 --> 00:20:23,200
have really low

612
00:20:20,640 --> 00:20:24,720
texture limits like i think you can some

613
00:20:23,200 --> 00:20:26,640
architectures like arm

614
00:20:24,720 --> 00:20:29,679
my lead drivers don't let you have more

615
00:20:26,640 --> 00:20:31,840
than 16 textures in total or samplers

616
00:20:29,679 --> 00:20:33,440
actually not even some purchase textures

617
00:20:31,840 --> 00:20:34,559
that you can't have more than 16

618
00:20:33,440 --> 00:20:37,919
textures

619
00:20:34,559 --> 00:20:39,678
per shader while on

620
00:20:37,919 --> 00:20:41,280
desktop this is infinite you can have

621
00:20:39,679 --> 00:20:42,880
all the textures you want maybe the

622
00:20:41,280 --> 00:20:44,399
samplers are limited because it's a

623
00:20:42,880 --> 00:20:46,640
hardware limitation but the texture you

624
00:20:44,400 --> 00:20:48,240
can have as many as you want so

625
00:20:46,640 --> 00:20:50,159
the problem is that the difference

626
00:20:48,240 --> 00:20:51,840
between what you can do on mobile and

627
00:20:50,159 --> 00:20:52,480
what you can do on desktop right now is

628
00:20:51,840 --> 00:20:55,918
so big

629
00:20:52,480 --> 00:20:57,440
it's so so big it doesn't really really

630
00:20:55,919 --> 00:20:59,520
make sense to make something that works

631
00:20:57,440 --> 00:21:02,000
for both you know you're going to be

632
00:20:59,520 --> 00:21:03,280
crippling the desktop uh just to make

633
00:21:02,000 --> 00:21:04,720
mobile work

634
00:21:03,280 --> 00:21:07,200
so you're we're going to have high and

635
00:21:04,720 --> 00:21:10,960
low end runner i think for vulcan it

636
00:21:07,200 --> 00:21:12,480
makes the most sense also uh

637
00:21:10,960 --> 00:21:14,480
for mobile there's something you can do

638
00:21:12,480 --> 00:21:15,039
which call it's a bootcamp feature which

639
00:21:14,480 --> 00:21:17,200
is called

640
00:21:15,039 --> 00:21:19,360
sub passes have you heard of surpasses

641
00:21:17,200 --> 00:21:20,960
what's passive sir

642
00:21:19,360 --> 00:21:22,959
something you can use on mobile due to

643
00:21:20,960 --> 00:21:24,720
home mobile chipset works like mobile

644
00:21:22,960 --> 00:21:25,919
have a lot of uh

645
00:21:24,720 --> 00:21:28,159
when you have something rendered when

646
00:21:25,919 --> 00:21:29,679
you render on on desktop uh it's

647
00:21:28,159 --> 00:21:31,200
just brute force pretty much it just

648
00:21:29,679 --> 00:21:32,159
draws all the triangles to throw one

649
00:21:31,200 --> 00:21:34,159
after the other

650
00:21:32,159 --> 00:21:35,679
on mobile the screen is divided like in

651
00:21:34,159 --> 00:21:38,080
tiles in cells

652
00:21:35,679 --> 00:21:39,280
and every cell has a list of the

653
00:21:38,080 --> 00:21:40,879
triangles that

654
00:21:39,280 --> 00:21:43,120
that touch the cell when you render and

655
00:21:40,880 --> 00:21:44,320
then at the end it graspers all the

656
00:21:43,120 --> 00:21:47,280
triangles they do it

657
00:21:44,320 --> 00:21:49,120
this way so they can have like more

658
00:21:47,280 --> 00:21:50,879
parallelism and actually

659
00:21:49,120 --> 00:21:52,399
it's like even if you render forward

660
00:21:50,880 --> 00:21:54,400
it's always different because

661
00:21:52,400 --> 00:21:56,960
it only says the last pixel that was

662
00:21:54,400 --> 00:21:59,760
around after it's like a mini d version

663
00:21:56,960 --> 00:22:00,480
rendering a tile so because they work

664
00:21:59,760 --> 00:22:01,919
like that

665
00:22:00,480 --> 00:22:03,600
maybe you want to have many passes like

666
00:22:01,919 --> 00:22:04,880
for example you do a different renderer

667
00:22:03,600 --> 00:22:06,559
and then the first pass you want to

668
00:22:04,880 --> 00:22:07,360
render all the materials and the second

669
00:22:06,559 --> 00:22:09,918
pass you want to

670
00:22:07,360 --> 00:22:11,678
do the shading so if you have sub passes

671
00:22:09,919 --> 00:22:14,240
you're telling the mobile

672
00:22:11,679 --> 00:22:16,159
driver that after this pass i'm going to

673
00:22:14,240 --> 00:22:16,559
the shading so if a tile is done doing

674
00:22:16,159 --> 00:22:18,400
the

675
00:22:16,559 --> 00:22:19,840
the rendering of the triangles it can go

676
00:22:18,400 --> 00:22:22,400
to the next pass

677
00:22:19,840 --> 00:22:24,320
while the other ties didn't finish so

678
00:22:22,400 --> 00:22:26,400
it's so different

679
00:22:24,320 --> 00:22:27,360
mobile and desktop are really different

680
00:22:26,400 --> 00:22:29,039
so you should probably

681
00:22:27,360 --> 00:22:31,039
if you're going to use bootcamp we can

682
00:22:29,039 --> 00:22:32,000
give you such low level access to this

683
00:22:31,039 --> 00:22:33,520
kind of things that

684
00:22:32,000 --> 00:22:35,120
it's a ways to try to make something

685
00:22:33,520 --> 00:22:36,879
that works on both just make one that

686
00:22:35,120 --> 00:22:38,719
works for mobile just won't make one

687
00:22:36,880 --> 00:22:41,120
that works for desktop that's what we

688
00:22:38,720 --> 00:22:43,120
ended up doing with godot

689
00:22:41,120 --> 00:22:44,399
so the idea is that they are still both

690
00:22:43,120 --> 00:22:45,360
compatible and you will be able to

691
00:22:44,400 --> 00:22:49,360
switch between the high

692
00:22:45,360 --> 00:22:49,360
and low end renderers at any time

693
00:22:50,480 --> 00:22:54,720
um well as i was saying before vulcan is

694
00:22:53,360 --> 00:22:56,240
designed for

695
00:22:54,720 --> 00:22:57,760
uh i explained to you this is just

696
00:22:56,240 --> 00:22:59,679
design for low uh

697
00:22:57,760 --> 00:23:02,559
bottlenecks right low amount of volume

698
00:22:59,679 --> 00:23:04,559
just very low driver ahead you just can

699
00:23:02,559 --> 00:23:05,918
it's amazing you just do a lot of call

700
00:23:04,559 --> 00:23:08,158
draw calls you can have like

701
00:23:05,919 --> 00:23:10,159
i don't know 50 000 draw calls in vulcan

702
00:23:08,159 --> 00:23:13,039
and it uses so little cpu compared to

703
00:23:10,159 --> 00:23:15,039
open shield that it's it's it's amazing

704
00:23:13,039 --> 00:23:16,320
so the first thing as i was telling

705
00:23:15,039 --> 00:23:19,679
before that we saw

706
00:23:16,320 --> 00:23:19,918
uh when moving from opengl to vulcan was

707
00:23:19,679 --> 00:23:22,559
the

708
00:23:19,919 --> 00:23:23,440
a massive improvement of performance

709
00:23:22,559 --> 00:23:25,280
when

710
00:23:23,440 --> 00:23:26,720
just drawing a large amount of objects

711
00:23:25,280 --> 00:23:29,840
to the or

712
00:23:26,720 --> 00:23:31,200
it's just a massive improvement uh one

713
00:23:29,840 --> 00:23:32,720
thing that people may get confused is

714
00:23:31,200 --> 00:23:35,200
that yes vulcan is faster

715
00:23:32,720 --> 00:23:37,440
but calling the api is mostly faster

716
00:23:35,200 --> 00:23:38,080
like if you have a very simple scene

717
00:23:37,440 --> 00:23:40,159
like uh

718
00:23:38,080 --> 00:23:41,840
just one room with a few things that are

719
00:23:40,159 --> 00:23:43,679
furniture and really complex shaders

720
00:23:41,840 --> 00:23:45,760
it's going to run the same in opengl

721
00:23:43,679 --> 00:23:47,360
and in bulk and because the shader

722
00:23:45,760 --> 00:23:49,520
performance is the same in both

723
00:23:47,360 --> 00:23:51,360
it is that doesn't change but if you

724
00:23:49,520 --> 00:23:55,120
have a really huge like

725
00:23:51,360 --> 00:23:57,840
scenario like a city or i don't know uh

726
00:23:55,120 --> 00:23:59,279
unders underwater or something really

727
00:23:57,840 --> 00:24:00,879
big that you can see really far away

728
00:23:59,279 --> 00:24:01,200
yeah bulkan will make a big difference

729
00:24:00,880 --> 00:24:03,760
there

730
00:24:01,200 --> 00:24:04,799
like for really large stuff or something

731
00:24:03,760 --> 00:24:06,400
that has a lot of

732
00:24:04,799 --> 00:24:08,559
small objects that's going to make just

733
00:24:06,400 --> 00:24:12,720
a huge difference

734
00:24:08,559 --> 00:24:16,000
so uh

735
00:24:12,720 --> 00:24:16,640
yeah that's kind of the same for 2d it

736
00:24:16,000 --> 00:24:19,279
improved

737
00:24:16,640 --> 00:24:21,279
the performance improve hugely it's

738
00:24:19,279 --> 00:24:23,840
impressive how how fast it is like

739
00:24:21,279 --> 00:24:26,080
for 2d it's very difficult like when you

740
00:24:23,840 --> 00:24:26,959
work on 2d on opengl you usually want to

741
00:24:26,080 --> 00:24:28,960
implement like

742
00:24:26,960 --> 00:24:30,400
things like batching because there's a

743
00:24:28,960 --> 00:24:32,320
lot of just

744
00:24:30,400 --> 00:24:34,080
put everything in an array and then send

745
00:24:32,320 --> 00:24:36,799
it to render

746
00:24:34,080 --> 00:24:38,240
because uh the cost of the draw call

747
00:24:36,799 --> 00:24:41,600
itself is kind of slow

748
00:24:38,240 --> 00:24:44,640
in in mobile especially mobile

749
00:24:41,600 --> 00:24:46,320
but with vulcan is like since

750
00:24:44,640 --> 00:24:48,159
there's no validation between the drug

751
00:24:46,320 --> 00:24:50,000
rules or anything you you can't just

752
00:24:48,159 --> 00:24:52,159
throw the the comments and it doesn't

753
00:24:50,000 --> 00:24:54,000
seem to really have any

754
00:24:52,159 --> 00:24:56,240
uh performance impact that's really

755
00:24:54,000 --> 00:24:58,080
impressive how how well the drivers are

756
00:24:56,240 --> 00:24:58,720
optimized for a very high amount and if

757
00:24:58,080 --> 00:25:01,199
you want to

758
00:24:58,720 --> 00:25:02,320
even optimize it better what you can do

759
00:25:01,200 --> 00:25:04,000
is simply like

760
00:25:02,320 --> 00:25:06,000
run like the render list you can

761
00:25:04,000 --> 00:25:07,919
separate it uh you have the

762
00:25:06,000 --> 00:25:10,240
imaging you want to render 20 000

763
00:25:07,919 --> 00:25:12,240
objects you can run threads that each

764
00:25:10,240 --> 00:25:14,400
like you want to run eight threads each

765
00:25:12,240 --> 00:25:15,919
each one renders a chunk of the objects

766
00:25:14,400 --> 00:25:17,360
in a separate part of the list and then

767
00:25:15,919 --> 00:25:20,320
if you put them together and send this

768
00:25:17,360 --> 00:25:22,559
kind of organizations are great

769
00:25:20,320 --> 00:25:22,559
so

770
00:25:24,559 --> 00:25:29,760
this is really important it it's a very

771
00:25:27,760 --> 00:25:32,720
big advantage of pulcan but

772
00:25:29,760 --> 00:25:33,440
uh it's very often overlooked uh is that

773
00:25:32,720 --> 00:25:35,200
opengl

774
00:25:33,440 --> 00:25:37,039
is very buggy because it's very complex

775
00:25:35,200 --> 00:25:40,880
if you look at an opengl driver it's

776
00:25:37,039 --> 00:25:42,799
huge it's really really big you can even

777
00:25:40,880 --> 00:25:44,799
if you look in google you can read

778
00:25:42,799 --> 00:25:46,799
horror stories about people working at

779
00:25:44,799 --> 00:25:47,918
nvidia or amd working on drivers like

780
00:25:46,799 --> 00:25:50,400
for example

781
00:25:47,919 --> 00:25:52,240
they were saying i think at the time

782
00:25:50,400 --> 00:25:55,200
opengl for came out i think i i

783
00:25:52,240 --> 00:25:56,880
remember reading that reading that amd

784
00:25:55,200 --> 00:25:59,840
decided to rewrite

785
00:25:56,880 --> 00:26:01,840
their opengl driver and they started

786
00:25:59,840 --> 00:26:04,320
because the old one was too slow

787
00:26:01,840 --> 00:26:06,080
and they started they first rewrote it

788
00:26:04,320 --> 00:26:07,678
and it was very fast

789
00:26:06,080 --> 00:26:09,439
but it was very incompatible it didn't

790
00:26:07,679 --> 00:26:11,360
work with a lot of games so they have

791
00:26:09,440 --> 00:26:12,799
to start adding patches to make it work

792
00:26:11,360 --> 00:26:14,959
better with different games

793
00:26:12,799 --> 00:26:16,480
by the time they they ended up adding

794
00:26:14,960 --> 00:26:18,159
all the patches to make it work like the

795
00:26:16,480 --> 00:26:19,039
old driver it was slower than the old

796
00:26:18,159 --> 00:26:22,080
driver

797
00:26:19,039 --> 00:26:23,760
because and this is amd i mean the

798
00:26:22,080 --> 00:26:26,799
the top company that make these kind of

799
00:26:23,760 --> 00:26:28,720
things so opengl is very complex

800
00:26:26,799 --> 00:26:30,080
it's very difficult to optimize because

801
00:26:28,720 --> 00:26:32,080
you need to like

802
00:26:30,080 --> 00:26:33,760
you need to optimize the way you think

803
00:26:32,080 --> 00:26:35,520
games are going to use it but then games

804
00:26:33,760 --> 00:26:38,240
may use it a different way

805
00:26:35,520 --> 00:26:39,760
uh it's typical software design problem

806
00:26:38,240 --> 00:26:40,799
uh if you try to make something super

807
00:26:39,760 --> 00:26:43,520
flexible

808
00:26:40,799 --> 00:26:44,480
uh you're going to end with something

809
00:26:43,520 --> 00:26:46,158
complicated

810
00:26:44,480 --> 00:26:48,000
and then it's not going to be useful

811
00:26:46,159 --> 00:26:49,360
because user users don't really want to

812
00:26:48,000 --> 00:26:50,240
use it that way they still want to use

813
00:26:49,360 --> 00:26:52,879
it to different

814
00:26:50,240 --> 00:26:53,600
so with glucan they were like we suck we

815
00:26:52,880 --> 00:26:55,679
can't make

816
00:26:53,600 --> 00:26:56,799
this kind of complex apis but just just

817
00:26:55,679 --> 00:26:58,320
let's make something

818
00:26:56,799 --> 00:27:00,720
really low level and let users do

819
00:26:58,320 --> 00:27:02,559
whatever they want

820
00:27:00,720 --> 00:27:04,240
and because of that the apis are so

821
00:27:02,559 --> 00:27:05,279
simple they map so directly to the

822
00:27:04,240 --> 00:27:07,360
hardware

823
00:27:05,279 --> 00:27:08,640
that they are very less prone to have

824
00:27:07,360 --> 00:27:10,158
backs because it's just

825
00:27:08,640 --> 00:27:11,919
much smaller if you look at the bulk and

826
00:27:10,159 --> 00:27:13,919
driver like the messer drivers it's just

827
00:27:11,919 --> 00:27:15,679
much smaller it just maps much more

828
00:27:13,919 --> 00:27:17,600
directly to the hardware

829
00:27:15,679 --> 00:27:19,360
uh this is very they're very interesting

830
00:27:17,600 --> 00:27:21,600
i think this was a really good decision

831
00:27:19,360 --> 00:27:22,799
at first when you started learning bulk

832
00:27:21,600 --> 00:27:24,240
and you're like what this is so

833
00:27:22,799 --> 00:27:26,240
complicated why they made it so

834
00:27:24,240 --> 00:27:26,960
complicated but in the end you realize

835
00:27:26,240 --> 00:27:29,279
that

836
00:27:26,960 --> 00:27:30,960
uh what you write is going to be a lot

837
00:27:29,279 --> 00:27:32,480
more effort that is going to work much

838
00:27:30,960 --> 00:27:34,080
better and it's going to be like

839
00:27:32,480 --> 00:27:35,919
less buggy when you run it on different

840
00:27:34,080 --> 00:27:39,439
hardware uh

841
00:27:35,919 --> 00:27:42,480
which isn't to say that uh you just

842
00:27:39,440 --> 00:27:44,720
if you have nvidia or amd uh for example

843
00:27:42,480 --> 00:27:46,080
you still need to try everywhere because

844
00:27:44,720 --> 00:27:47,440
there are things like barriers for

845
00:27:46,080 --> 00:27:48,639
example vulcan has something called

846
00:27:47,440 --> 00:27:50,480
barriers

847
00:27:48,640 --> 00:27:52,240
which you used to a synchronization

848
00:27:50,480 --> 00:27:56,000
points between different kinds of

849
00:27:52,240 --> 00:27:57,760
uh of tasks like for example compute

850
00:27:56,000 --> 00:27:59,679
you don't you do compute and then you

851
00:27:57,760 --> 00:28:01,039
want to use what you did for compute for

852
00:27:59,679 --> 00:28:02,559
rendering and using architecture you

853
00:28:01,039 --> 00:28:05,120
need a barrier

854
00:28:02,559 --> 00:28:05,600
both for for waiting until the compute

855
00:28:05,120 --> 00:28:07,360
is done

856
00:28:05,600 --> 00:28:08,959
and for converting the resulting image

857
00:28:07,360 --> 00:28:10,799
to something readable

858
00:28:08,960 --> 00:28:12,640
uh by what is rendering you need this

859
00:28:10,799 --> 00:28:15,840
kind of barriers uh which

860
00:28:12,640 --> 00:28:16,960
you need to put everywhere in in bulking

861
00:28:15,840 --> 00:28:18,720
and

862
00:28:16,960 --> 00:28:20,480
bulking bars are really complex they

863
00:28:18,720 --> 00:28:22,080
have a lot of options and not

864
00:28:20,480 --> 00:28:23,600
not all the hardware implements all the

865
00:28:22,080 --> 00:28:25,360
waters you know

866
00:28:23,600 --> 00:28:26,719
i think nvidia implements them like more

867
00:28:25,360 --> 00:28:30,799
coarse and amd

868
00:28:26,720 --> 00:28:32,880
is more fine grained so an intel

869
00:28:30,799 --> 00:28:34,960
intel just like doesn't care about

870
00:28:32,880 --> 00:28:36,880
anything i think it's like

871
00:28:34,960 --> 00:28:38,640
my experiment with intel is whatever you

872
00:28:36,880 --> 00:28:42,240
do even if you forget all the warriors

873
00:28:38,640 --> 00:28:46,000
still works so it's really weird

874
00:28:42,240 --> 00:28:48,720
so intel is just weird but uh

875
00:28:46,000 --> 00:28:49,600
but the thing is uh because of this i

876
00:28:48,720 --> 00:28:52,240
had problems like

877
00:28:49,600 --> 00:28:52,639
getting you get something to work like

878
00:28:52,240 --> 00:28:55,120
even

879
00:28:52,640 --> 00:28:56,399
in the same amd drivers i got things to

880
00:28:55,120 --> 00:28:59,120
work in amd

881
00:28:56,399 --> 00:28:59,918
in in mesa but didn't work in the

882
00:28:59,120 --> 00:29:01,760
official

883
00:28:59,919 --> 00:29:03,679
amd driver for linux and then you can

884
00:29:01,760 --> 00:29:05,520
swap it and then it works

885
00:29:03,679 --> 00:29:07,520
in one and doesn't work then you go to

886
00:29:05,520 --> 00:29:09,360
nvidia and just doesn't work

887
00:29:07,520 --> 00:29:10,879
on intel it always works it's amazing

888
00:29:09,360 --> 00:29:12,479
because it's it's it's

889
00:29:10,880 --> 00:29:14,320
raster pricing i don't think they even

890
00:29:12,480 --> 00:29:16,399
support warriors in intel

891
00:29:14,320 --> 00:29:18,399
but well that's what he was saying less

892
00:29:16,399 --> 00:29:19,918
complexity is uh

893
00:29:18,399 --> 00:29:22,239
less points of fine you still have to

894
00:29:19,919 --> 00:29:25,200
test in all the hardware but

895
00:29:22,240 --> 00:29:25,200
let's prontobacks

896
00:29:25,279 --> 00:29:28,960
one problem we have with opengl is that

897
00:29:27,279 --> 00:29:32,480
opengl doesn't have a standard

898
00:29:28,960 --> 00:29:35,520
way of uh catching the shaders so

899
00:29:32,480 --> 00:29:36,080
our users often complain that an object

900
00:29:35,520 --> 00:29:38,639
appears

901
00:29:36,080 --> 00:29:40,399
on screen that was never rendered and

902
00:29:38,640 --> 00:29:41,679
even if you pre-compile the shader

903
00:29:40,399 --> 00:29:45,039
before

904
00:29:41,679 --> 00:29:46,080
it still has like uh it still has like a

905
00:29:45,039 --> 00:29:48,240
delay

906
00:29:46,080 --> 00:29:49,439
because the driver waits until

907
00:29:48,240 --> 00:29:51,840
everything is ready to

908
00:29:49,440 --> 00:29:53,679
to to render to just actually compile

909
00:29:51,840 --> 00:29:55,760
the shader

910
00:29:53,679 --> 00:29:57,760
so there with opengl we have a lot of

911
00:29:55,760 --> 00:29:59,600
styles all the time

912
00:29:57,760 --> 00:30:02,158
so users have to resort to doing half

913
00:29:59,600 --> 00:30:03,840
like making like a loading screen

914
00:30:02,159 --> 00:30:05,919
that be that actually is a plane that

915
00:30:03,840 --> 00:30:06,480
has all the objects that need to be

916
00:30:05,919 --> 00:30:08,480
rendered

917
00:30:06,480 --> 00:30:10,399
you know with all the materials but you

918
00:30:08,480 --> 00:30:12,720
don't see them they are behind the wall

919
00:30:10,399 --> 00:30:14,719
so that actually forces it to actually

920
00:30:12,720 --> 00:30:16,640
compile all the materials before

921
00:30:14,720 --> 00:30:18,480
you go into the game this is very very

922
00:30:16,640 --> 00:30:20,960
typical with opengl

923
00:30:18,480 --> 00:30:22,399
uh with vulcan what they added was is

924
00:30:20,960 --> 00:30:25,200
something called spear v

925
00:30:22,399 --> 00:30:26,158
spear vis like a shader byte code you

926
00:30:25,200 --> 00:30:28,640
compile

927
00:30:26,159 --> 00:30:30,320
glsl you can actually compile hlsl which

928
00:30:28,640 --> 00:30:31,440
is very popular because it's the

929
00:30:30,320 --> 00:30:33,360
microsoft one

930
00:30:31,440 --> 00:30:35,120
uh people that do rendering prefer

931
00:30:33,360 --> 00:30:38,399
directx i don't

932
00:30:35,120 --> 00:30:39,039
but uh hlsl is very popular i i think i

933
00:30:38,399 --> 00:30:41,520
don't like it

934
00:30:39,039 --> 00:30:42,960
honestly i think this glsl is nicer but

935
00:30:41,520 --> 00:30:44,960
well anyway

936
00:30:42,960 --> 00:30:46,159
uh you can compare to spear v from

937
00:30:44,960 --> 00:30:49,200
either of the languages

938
00:30:46,159 --> 00:30:51,039
uh on on vulcan and the interesting

939
00:30:49,200 --> 00:30:53,039
thing is that

940
00:30:51,039 --> 00:30:55,200
spirit is not really a shader by code

941
00:30:53,039 --> 00:30:58,240
that x that gets executed

942
00:30:55,200 --> 00:31:00,720
by the by the gpu it's more like

943
00:30:58,240 --> 00:31:01,519
a middle you know if you have seen

944
00:31:00,720 --> 00:31:04,320
compiler

945
00:31:01,519 --> 00:31:04,720
theory it's like the it's like the ssa

946
00:31:04,320 --> 00:31:06,480
form

947
00:31:04,720 --> 00:31:08,880
of the of the shader it's kind of

948
00:31:06,480 --> 00:31:10,240
pre-optimized up to a point but it's

949
00:31:08,880 --> 00:31:11,440
still not a vital i mean it's not

950
00:31:10,240 --> 00:31:12,399
something you can put on a virtual

951
00:31:11,440 --> 00:31:15,279
machine and

952
00:31:12,399 --> 00:31:16,479
on a gp on rooney more like it so the

953
00:31:15,279 --> 00:31:20,080
interesting thing is that

954
00:31:16,480 --> 00:31:23,200
it is faster to go from spear v

955
00:31:20,080 --> 00:31:26,158
to the to the actual gpu bytecode that

956
00:31:23,200 --> 00:31:28,080
going from glsl it has also the problem

957
00:31:26,159 --> 00:31:29,039
with opengl for example one problem we

958
00:31:28,080 --> 00:31:30,639
have is that

959
00:31:29,039 --> 00:31:32,559
if you have to list all the glsr

960
00:31:30,640 --> 00:31:35,679
compilers you have for example

961
00:31:32,559 --> 00:31:37,600
the the amd one the nvidia one the intel

962
00:31:35,679 --> 00:31:40,000
one the web browser one because of

963
00:31:37,600 --> 00:31:42,080
webgl you have the mobile ones like for

964
00:31:40,000 --> 00:31:42,320
example the mali one the qualcomm one

965
00:31:42,080 --> 00:31:44,879
the

966
00:31:42,320 --> 00:31:46,639
tegra one the apple one because apple

967
00:31:44,880 --> 00:31:48,159
now no longer uses power vr

968
00:31:46,640 --> 00:31:50,399
they make their own gpu so now we have

969
00:31:48,159 --> 00:31:53,360
the apple compiler for glsen so

970
00:31:50,399 --> 00:31:53,918
there's like 10 compilers for glsl uh

971
00:31:53,360 --> 00:31:56,158
and

972
00:31:53,919 --> 00:31:58,320
one of them is always going to break

973
00:31:56,159 --> 00:31:59,360
because parking text is is much more

974
00:31:58,320 --> 00:32:02,320
difficult than

975
00:31:59,360 --> 00:32:04,399
in theory it isn't but in practice it is

976
00:32:02,320 --> 00:32:06,000
parsing text is more prone than parsing

977
00:32:04,399 --> 00:32:09,678
just a bicode that has very

978
00:32:06,000 --> 00:32:10,799
specific instructions so spirovi has the

979
00:32:09,679 --> 00:32:12,320
advantage that

980
00:32:10,799 --> 00:32:14,320
once it compiles to spear v you know

981
00:32:12,320 --> 00:32:16,559
it's going to work

982
00:32:14,320 --> 00:32:18,399
and it's faster to compile from spear v

983
00:32:16,559 --> 00:32:20,000
to uh

984
00:32:18,399 --> 00:32:22,320
to actually the right code the thing is

985
00:32:20,000 --> 00:32:25,440
the following

986
00:32:22,320 --> 00:32:27,918
the only thing you can actually

987
00:32:25,440 --> 00:32:29,279
send from one from imagine you want to

988
00:32:27,919 --> 00:32:31,039
distribute your game

989
00:32:29,279 --> 00:32:32,480
you can distribute speed with shaders

990
00:32:31,039 --> 00:32:34,158
but you can't distribute pipeline

991
00:32:32,480 --> 00:32:35,360
objects you can actually get the binary

992
00:32:34,159 --> 00:32:36,960
of the pipeline object because the

993
00:32:35,360 --> 00:32:38,879
pipeline object i mean

994
00:32:36,960 --> 00:32:41,360
you have shader code you compile it you

995
00:32:38,880 --> 00:32:44,480
got spur v spear v you combine

996
00:32:41,360 --> 00:32:46,399
uh with all the um rasterizer

997
00:32:44,480 --> 00:32:48,080
data like which kind of triangles which

998
00:32:46,399 --> 00:32:49,439
kind of frame buffer which will perform

999
00:32:48,080 --> 00:32:51,600
at everything

1000
00:32:49,440 --> 00:32:52,799
all these you get the pipeline estate

1001
00:32:51,600 --> 00:32:54,799
object

1002
00:32:52,799 --> 00:32:56,000
the pipeline is platform dependent it's

1003
00:32:54,799 --> 00:32:58,559
even driver dependent

1004
00:32:56,000 --> 00:33:00,960
you can comp you can't even like if you

1005
00:32:58,559 --> 00:33:02,320
make a game and distribute it for amd

1006
00:33:00,960 --> 00:33:04,880
they may change the driver and it's not

1007
00:33:02,320 --> 00:33:07,760
going to work anymore so

1008
00:33:04,880 --> 00:33:08,640
you you need to you can use to catch it

1009
00:33:07,760 --> 00:33:10,399
locally

1010
00:33:08,640 --> 00:33:12,080
the pipeline on your computer you have

1011
00:33:10,399 --> 00:33:13,518
to catch it even saving the driver

1012
00:33:12,080 --> 00:33:15,039
version

1013
00:33:13,519 --> 00:33:16,799
there's a few articles about that

1014
00:33:15,039 --> 00:33:18,559
there's pretty interesting

1015
00:33:16,799 --> 00:33:20,639
because it's very easy to break

1016
00:33:18,559 --> 00:33:23,918
something catching a pipeline state

1017
00:33:20,640 --> 00:33:25,919
but the thing is that even that

1018
00:33:23,919 --> 00:33:27,039
compiling spiritual pipeline is really

1019
00:33:25,919 --> 00:33:30,640
fast compared to just

1020
00:33:27,039 --> 00:33:33,600
all the whole thing uh in fact

1021
00:33:30,640 --> 00:33:34,480
uh i don't want to go sidetrack too much

1022
00:33:33,600 --> 00:33:36,399
but

1023
00:33:34,480 --> 00:33:38,559
uh there's web gpu coming you've

1024
00:33:36,399 --> 00:33:40,399
probably heard of web gpu there's a big

1025
00:33:38,559 --> 00:33:43,440
discussion now you have we have apple

1026
00:33:40,399 --> 00:33:43,760
on one side uh you have google microsoft

1027
00:33:43,440 --> 00:33:45,679
and

1028
00:33:43,760 --> 00:33:47,039
mozilla on the other side because apple

1029
00:33:45,679 --> 00:33:50,000
wants to use something called

1030
00:33:47,039 --> 00:33:52,720
wh lsl which is a text format and all

1031
00:33:50,000 --> 00:33:54,480
the others want to use as pv for web gpu

1032
00:33:52,720 --> 00:33:56,159
and it's been years and they haven't

1033
00:33:54,480 --> 00:33:57,600
agreed apple really

1034
00:33:56,159 --> 00:33:59,840
doesn't want to have anything to do with

1035
00:33:57,600 --> 00:34:00,879
chronos they are even duplicated up in

1036
00:33:59,840 --> 00:34:03,600
gl they are like

1037
00:34:00,880 --> 00:34:05,279
say away chronos and all the other

1038
00:34:03,600 --> 00:34:06,639
people are not experienced amazing why

1039
00:34:05,279 --> 00:34:08,320
not use experience we have a lot of

1040
00:34:06,640 --> 00:34:09,679
tooling for spirit which is amazing we

1041
00:34:08,320 --> 00:34:12,560
can convert it within a lot

1042
00:34:09,679 --> 00:34:13,440
of different languages so they are

1043
00:34:12,560 --> 00:34:16,239
completely

1044
00:34:13,440 --> 00:34:17,918
uh in in the completely i don't think

1045
00:34:16,239 --> 00:34:19,520
they will ever agree so we probably see

1046
00:34:17,918 --> 00:34:22,158
web gpu for

1047
00:34:19,520 --> 00:34:24,239
with spear v for these browsers and with

1048
00:34:22,159 --> 00:34:25,599
w hlsl for safari uh

1049
00:34:24,239 --> 00:34:26,959
that's probably what's going to end up

1050
00:34:25,599 --> 00:34:29,679
happening at this point because apple

1051
00:34:26,960 --> 00:34:33,359
just doesn't want to concede anything

1052
00:34:29,679 --> 00:34:34,879
so i actually

1053
00:34:33,359 --> 00:34:36,639
went into arguments with people from

1054
00:34:34,879 --> 00:34:38,078
apple because they really defend the

1055
00:34:36,639 --> 00:34:40,879
stance on wh lsl

1056
00:34:38,079 --> 00:34:43,520
uh and my experience just with godot on

1057
00:34:40,879 --> 00:34:46,560
web gpu um but you're on webgl

1058
00:34:43,520 --> 00:34:47,679
compiling a glsl shader it takes a long

1059
00:34:46,560 --> 00:34:49,599
long time for what

1060
00:34:47,679 --> 00:34:51,280
because it's so many validations for c

1061
00:34:49,599 --> 00:34:52,960
security so just using bytecode it's

1062
00:34:51,280 --> 00:34:53,919
probably still dangerous but it's faster

1063
00:34:52,960 --> 00:34:57,599
so

1064
00:34:53,918 --> 00:34:58,640
so that's the well another interesting

1065
00:34:57,599 --> 00:35:02,320
thing about

1066
00:34:58,640 --> 00:35:03,680
uh vulcan is threats uh

1067
00:35:02,320 --> 00:35:05,040
when you hear about threads and bulkhead

1068
00:35:03,680 --> 00:35:06,160
the only thing that probably comes to

1069
00:35:05,040 --> 00:35:09,359
mind is what you heard

1070
00:35:06,160 --> 00:35:10,640
about uh the the secondary command

1071
00:35:09,359 --> 00:35:12,000
buffers uh

1072
00:35:10,640 --> 00:35:14,078
you probably if you are going to read

1073
00:35:12,000 --> 00:35:15,599
about bulk you can use secondary command

1074
00:35:14,079 --> 00:35:16,480
buffers you create each one in a thread

1075
00:35:15,599 --> 00:35:18,079
and then you put

1076
00:35:16,480 --> 00:35:19,599
all of them together and then send it to

1077
00:35:18,079 --> 00:35:20,880
the rendering is faster yeah it is

1078
00:35:19,599 --> 00:35:22,240
faster

1079
00:35:20,880 --> 00:35:23,760
but there's many things that are really

1080
00:35:22,240 --> 00:35:24,240
cool that you can do with vulcan like

1081
00:35:23,760 --> 00:35:28,240
the first

1082
00:35:24,240 --> 00:35:29,919
is that since it takes pv and not glsl

1083
00:35:28,240 --> 00:35:31,520
and even if it takes privy on whatever

1084
00:35:29,920 --> 00:35:33,520
you want you can just compile shaders

1085
00:35:31,520 --> 00:35:36,640
and threads and then you fit the spear v

1086
00:35:33,520 --> 00:35:37,200
uh it's super super efficient uh you can

1087
00:35:36,640 --> 00:35:39,359
actually

1088
00:35:37,200 --> 00:35:41,118
create many multiple render lists not

1089
00:35:39,359 --> 00:35:42,640
just one with multiple

1090
00:35:41,119 --> 00:35:44,240
secondary command buffers you can create

1091
00:35:42,640 --> 00:35:45,598
multiple render lists at the same time

1092
00:35:44,240 --> 00:35:47,279
which is also amazing

1093
00:35:45,599 --> 00:35:49,599
like imagine you're rendering like

1094
00:35:47,280 --> 00:35:51,359
shadow mapping uh i need to render like

1095
00:35:49,599 --> 00:35:53,040
uh directional light shadow mapping you

1096
00:35:51,359 --> 00:35:54,799
need like the four splits that are

1097
00:35:53,040 --> 00:35:56,400
typical to this you can like just create

1098
00:35:54,800 --> 00:35:56,720
one render list for each at the same

1099
00:35:56,400 --> 00:35:59,520
time

1100
00:35:56,720 --> 00:36:00,560
like as an example you can do a lot of

1101
00:35:59,520 --> 00:36:04,079
really amazing uh

1102
00:36:00,560 --> 00:36:05,520
optimizations in in in vulcan with that

1103
00:36:04,079 --> 00:36:07,119
the other thing that is really amazing

1104
00:36:05,520 --> 00:36:08,560
is all the all the cues with

1105
00:36:07,119 --> 00:36:10,079
asynchronous texture and buffer

1106
00:36:08,560 --> 00:36:10,720
transfers when you start learning

1107
00:36:10,079 --> 00:36:12,000
bootcamp

1108
00:36:10,720 --> 00:36:13,520
one of the first things you see the

1109
00:36:12,000 --> 00:36:14,160
first is bulk and device and then you

1110
00:36:13,520 --> 00:36:16,880
see the

1111
00:36:14,160 --> 00:36:18,640
bulk and cues the bulk and qs are really

1112
00:36:16,880 --> 00:36:20,880
interesting is like

1113
00:36:18,640 --> 00:36:21,680
by definition one of them has to be

1114
00:36:20,880 --> 00:36:23,680
rendering

1115
00:36:21,680 --> 00:36:25,040
compute and transfer and then it has to

1116
00:36:23,680 --> 00:36:27,118
have one transfer one and

1117
00:36:25,040 --> 00:36:28,560
one compute one i think i think it was

1118
00:36:27,119 --> 00:36:29,680
something like that

1119
00:36:28,560 --> 00:36:31,200
the interesting thing is that for

1120
00:36:29,680 --> 00:36:32,879
example imagine you're running the game

1121
00:36:31,200 --> 00:36:36,078
but you want to load a texture

1122
00:36:32,880 --> 00:36:38,640
uh asynchronously what you do is

1123
00:36:36,079 --> 00:36:40,320
you just use the transfer queue for that

1124
00:36:38,640 --> 00:36:41,520
you just allocate the texture because

1125
00:36:40,320 --> 00:36:43,599
texture location is completely

1126
00:36:41,520 --> 00:36:44,960
independent of whatever you are doing

1127
00:36:43,599 --> 00:36:46,400
so you just allocate the memory for a

1128
00:36:44,960 --> 00:36:48,160
texture and then you use the transfer

1129
00:36:46,400 --> 00:36:49,760
queue to send the texture while you're

1130
00:36:48,160 --> 00:36:51,839
still doing your normal rendering under

1131
00:36:49,760 --> 00:36:54,320
thread so that's super super efficient

1132
00:36:51,839 --> 00:36:55,680
and i really like that uh and you can do

1133
00:36:54,320 --> 00:36:57,760
the same with buffers if you want to

1134
00:36:55,680 --> 00:37:00,640
upload geometry textures everything you

1135
00:36:57,760 --> 00:37:02,320
use the the the transfer cues for this

1136
00:37:00,640 --> 00:37:03,759
or even if you want to do things on a

1137
00:37:02,320 --> 00:37:06,880
thread for compute you can run

1138
00:37:03,760 --> 00:37:08,079
compute at the same time as so all these

1139
00:37:06,880 --> 00:37:10,079
kind of things are really really

1140
00:37:08,079 --> 00:37:11,760
nice i actually really enjoy the way it

1141
00:37:10,079 --> 00:37:14,000
works it's super complicated but once

1142
00:37:11,760 --> 00:37:15,520
you understand exactly what it is it's

1143
00:37:14,000 --> 00:37:16,960
really enjoyable

1144
00:37:15,520 --> 00:37:19,680
and you can make a lot of really nice

1145
00:37:16,960 --> 00:37:22,720
optimizations

1146
00:37:19,680 --> 00:37:23,118
so another interesting thing about this

1147
00:37:22,720 --> 00:37:26,160
is

1148
00:37:23,119 --> 00:37:27,119
uh when you learn if you come from

1149
00:37:26,160 --> 00:37:29,598
direct text

1150
00:37:27,119 --> 00:37:30,880
12 like uh or directors and you go to

1151
00:37:29,599 --> 00:37:32,240
vulcan

1152
00:37:30,880 --> 00:37:34,640
it it's going to appear really

1153
00:37:32,240 --> 00:37:36,319
complicated because we can forces you a

1154
00:37:34,640 --> 00:37:38,078
lot of things that are normally not

1155
00:37:36,320 --> 00:37:39,359
necessary for desktop because these

1156
00:37:38,079 --> 00:37:42,880
things are actually

1157
00:37:39,359 --> 00:37:44,160
more optimal on mobile the secondary

1158
00:37:42,880 --> 00:37:47,119
what i already told you

1159
00:37:44,160 --> 00:37:48,640
talk to you about the the render passes

1160
00:37:47,119 --> 00:37:50,320
you can just

1161
00:37:48,640 --> 00:37:52,480
break the rendering rather passes so the

1162
00:37:50,320 --> 00:37:54,160
tiles in the mobile gpu can do work in

1163
00:37:52,480 --> 00:37:55,760
parallel even in separate presses

1164
00:37:54,160 --> 00:37:57,520
otherwise it has to finish

1165
00:37:55,760 --> 00:37:59,520
and then go to the next one this is more

1166
00:37:57,520 --> 00:38:01,280
optimal the image barriers are

1167
00:37:59,520 --> 00:38:03,680
interesting like for example

1168
00:38:01,280 --> 00:38:04,800
uh you can use something as a as a

1169
00:38:03,680 --> 00:38:06,799
render buffer

1170
00:38:04,800 --> 00:38:08,160
and then you want to use it as a texture

1171
00:38:06,800 --> 00:38:10,320
and you want to do a lot of

1172
00:38:08,160 --> 00:38:12,160
work like that uh since you have to

1173
00:38:10,320 --> 00:38:13,920
specify all the conversions between

1174
00:38:12,160 --> 00:38:15,520
what you're using the image for you can

1175
00:38:13,920 --> 00:38:16,960
actually take a lot of interesting

1176
00:38:15,520 --> 00:38:19,359
optimizations

1177
00:38:16,960 --> 00:38:20,720
uh so yeah it's interesting because it

1178
00:38:19,359 --> 00:38:22,400
it kind of sucks if you're

1179
00:38:20,720 --> 00:38:24,078
going for only desktop but if you want

1180
00:38:22,400 --> 00:38:25,440
to optimize for mobile there's a lot of

1181
00:38:24,079 --> 00:38:27,119
opportunities there that are really

1182
00:38:25,440 --> 00:38:30,480
interesting

1183
00:38:27,119 --> 00:38:32,160
so the last thing is that since we used

1184
00:38:30,480 --> 00:38:33,280
opengl we didn't have compute there was

1185
00:38:32,160 --> 00:38:35,200
opencl

1186
00:38:33,280 --> 00:38:36,560
but it was never well supported because

1187
00:38:35,200 --> 00:38:40,160
nvidia kind of

1188
00:38:36,560 --> 00:38:43,520
sabotaged it uh there's a lot of uh

1189
00:38:40,160 --> 00:38:46,560
how you call it like a lot of

1190
00:38:43,520 --> 00:38:50,240
internal politics

1191
00:38:46,560 --> 00:38:53,279
in rendering it's amazing uh so

1192
00:38:50,240 --> 00:38:55,520
nvidia sabotage open cl so what they

1193
00:38:53,280 --> 00:38:57,200
ended up doing it uh and yeah apple

1194
00:38:55,520 --> 00:39:00,000
proposed it and then abandoned it

1195
00:38:57,200 --> 00:39:02,240
it's it's so weird so the interesting

1196
00:39:00,000 --> 00:39:04,960
thing about compute is in vulcan is that

1197
00:39:02,240 --> 00:39:06,560
you just use it with glsl uh it may seem

1198
00:39:04,960 --> 00:39:06,960
a bit weird because people use compute

1199
00:39:06,560 --> 00:39:10,480
just

1200
00:39:06,960 --> 00:39:12,320
c open cl or c uh cuda

1201
00:39:10,480 --> 00:39:14,320
but gls is pretty nice for compute i

1202
00:39:12,320 --> 00:39:14,640
mean you can still do things normally

1203
00:39:14,320 --> 00:39:16,560
and

1204
00:39:14,640 --> 00:39:18,319
and it's pretty like to the point you

1205
00:39:16,560 --> 00:39:20,078
know uh

1206
00:39:18,320 --> 00:39:21,839
and a lot of optimizations can be done

1207
00:39:20,079 --> 00:39:23,200
like for example normally in opengl

1208
00:39:21,839 --> 00:39:25,040
you if you want to do a full screen

1209
00:39:23,200 --> 00:39:27,118
effect you draw like a quad

1210
00:39:25,040 --> 00:39:28,880
or some people even draw a triangle so

1211
00:39:27,119 --> 00:39:30,720
it doesn't render the middle

1212
00:39:28,880 --> 00:39:32,480
like the middle line which supposedly

1213
00:39:30,720 --> 00:39:33,839
it's faster

1214
00:39:32,480 --> 00:39:36,079
so well there's a lot of things but in

1215
00:39:33,839 --> 00:39:37,680
compute you just don't you just run the

1216
00:39:36,079 --> 00:39:39,520
compute directly you don't have to go

1217
00:39:37,680 --> 00:39:41,359
through the through the

1218
00:39:39,520 --> 00:39:43,680
drawing the geometry it just does

1219
00:39:41,359 --> 00:39:46,078
compute so it's super interesting

1220
00:39:43,680 --> 00:39:47,440
and we are actually exposing uh compute

1221
00:39:46,079 --> 00:39:48,880
to the user because

1222
00:39:47,440 --> 00:39:50,880
if you see a lot of games it's very

1223
00:39:48,880 --> 00:39:52,320
interesting compute now is so complex

1224
00:39:50,880 --> 00:39:53,839
that you can use it for gameplay

1225
00:39:52,320 --> 00:39:55,359
you can like if you want to make a game

1226
00:39:53,839 --> 00:39:58,480
that has like 10 000

1227
00:39:55,359 --> 00:40:00,400
enemies you can write totally destroy

1228
00:39:58,480 --> 00:40:01,359
your cpu trying to do this or you just

1229
00:40:00,400 --> 00:40:04,480
can use compute

1230
00:40:01,359 --> 00:40:05,920
and compute works fantastic

1231
00:40:04,480 --> 00:40:08,240
and the interesting thing is and in bulk

1232
00:40:05,920 --> 00:40:10,160
and you can have more than one device

1233
00:40:08,240 --> 00:40:12,640
bootcamp has the bk device you can have

1234
00:40:10,160 --> 00:40:14,480
more than one dbk device so you can just

1235
00:40:12,640 --> 00:40:15,920
have your device for rendering and you

1236
00:40:14,480 --> 00:40:19,359
can have your device for

1237
00:40:15,920 --> 00:40:21,440
uh doing game logic uh which is

1238
00:40:19,359 --> 00:40:23,279
really interesting especially on desktop

1239
00:40:21,440 --> 00:40:24,960
uh but you can do really complex in

1240
00:40:23,280 --> 00:40:27,599
logic like

1241
00:40:24,960 --> 00:40:28,560
internally it's going to still like send

1242
00:40:27,599 --> 00:40:30,480
one thing at the time

1243
00:40:28,560 --> 00:40:32,400
supposedly i don't really know the

1244
00:40:30,480 --> 00:40:34,160
implementation details

1245
00:40:32,400 --> 00:40:35,680
but you can still do it and it works

1246
00:40:34,160 --> 00:40:37,359
really well you can optimize your games

1247
00:40:35,680 --> 00:40:39,839
a lot with with compute now

1248
00:40:37,359 --> 00:40:40,480
uh i think this is not something that is

1249
00:40:39,839 --> 00:40:42,078
used much

1250
00:40:40,480 --> 00:40:44,000
in game development but i've seen

1251
00:40:42,079 --> 00:40:47,359
compute a huge opportunity to

1252
00:40:44,000 --> 00:40:50,720
optimize lots of types of gameplay

1253
00:40:47,359 --> 00:40:52,480
so and this is just a few

1254
00:40:50,720 --> 00:40:54,640
goals related things because the talk is

1255
00:40:52,480 --> 00:40:56,079
about

1256
00:40:54,640 --> 00:40:57,680
one thing that we are doing in the new

1257
00:40:56,079 --> 00:41:00,720
rendering a lot

1258
00:40:57,680 --> 00:41:01,520
is that this is a kind of usability

1259
00:41:00,720 --> 00:41:04,879
thing you're making

1260
00:41:01,520 --> 00:41:06,480
an engine for people to use so you give

1261
00:41:04,880 --> 00:41:08,000
them an option to

1262
00:41:06,480 --> 00:41:09,440
you give it a in an effect you give you

1263
00:41:08,000 --> 00:41:11,040
an option you want to look ugly or

1264
00:41:09,440 --> 00:41:12,800
pretty like quality low and high

1265
00:41:11,040 --> 00:41:15,279
and user will always put height because

1266
00:41:12,800 --> 00:41:17,440
like it looks better like why not

1267
00:41:15,280 --> 00:41:18,880
and then they go like wow this is really

1268
00:41:17,440 --> 00:41:22,640
slow this engine sucks

1269
00:41:18,880 --> 00:41:24,319
so we learned that mistake so what we

1270
00:41:22,640 --> 00:41:25,200
don't know is moving on everything

1271
00:41:24,319 --> 00:41:27,839
related to

1272
00:41:25,200 --> 00:41:29,520
uh the quality and performance with the

1273
00:41:27,839 --> 00:41:31,680
general settings of the engine

1274
00:41:29,520 --> 00:41:33,040
and we put it like this is low this is

1275
00:41:31,680 --> 00:41:36,078
fast uh

1276
00:41:33,040 --> 00:41:39,200
hoping that this will be uh a bit more

1277
00:41:36,079 --> 00:41:41,119
um obvious for the user that you're like

1278
00:41:39,200 --> 00:41:43,680
making these mistakes and also

1279
00:41:41,119 --> 00:41:45,040
this is more like a way that god works

1280
00:41:43,680 --> 00:41:46,720
when you have project settings you don't

1281
00:41:45,040 --> 00:41:48,079
have overrides like for example if it's

1282
00:41:46,720 --> 00:41:49,439
going to run on mobile you can override

1283
00:41:48,079 --> 00:41:51,440
the setting for mobile

1284
00:41:49,440 --> 00:41:52,560
and having the quality settings on the

1285
00:41:51,440 --> 00:41:53,920
on the project settings

1286
00:41:52,560 --> 00:41:56,160
for example if you want this is the

1287
00:41:53,920 --> 00:41:58,480
depth of field setting you know

1288
00:41:56,160 --> 00:42:00,078
uh box is super fast but looks like a

1289
00:41:58,480 --> 00:42:02,319
box is kind of a weird

1290
00:42:00,079 --> 00:42:04,640
debug feel effect but it's super fast if

1291
00:42:02,319 --> 00:42:07,759
you use it for something small it's okay

1292
00:42:04,640 --> 00:42:10,319
uh and circle it's super slow but looks

1293
00:42:07,760 --> 00:42:12,079
amazing it's only for like ultimate

1294
00:42:10,319 --> 00:42:14,240
dedicated gpus

1295
00:42:12,079 --> 00:42:15,359
so what you can do is you can put an

1296
00:42:14,240 --> 00:42:17,520
override uh

1297
00:42:15,359 --> 00:42:19,598
of deposit shape if you are targeting

1298
00:42:17,520 --> 00:42:22,640
mobile you can override this

1299
00:42:19,599 --> 00:42:23,359
and go from circle to box and you can

1300
00:42:22,640 --> 00:42:25,279
have for example

1301
00:42:23,359 --> 00:42:27,119
right for low and high end renderers and

1302
00:42:25,280 --> 00:42:29,599
the high end can use circle the low one

1303
00:42:27,119 --> 00:42:31,839
can use hexagon for example

1304
00:42:29,599 --> 00:42:34,079
so this is pretty cool of the new things

1305
00:42:31,839 --> 00:42:38,400
we are doing

1306
00:42:34,079 --> 00:42:41,760
and lastly this is the last item um

1307
00:42:38,400 --> 00:42:43,680
one thing that uh we went from opengl to

1308
00:42:41,760 --> 00:42:44,800
bootcamp but we never had heretics

1309
00:42:43,680 --> 00:42:46,960
rendering so

1310
00:42:44,800 --> 00:42:47,920
we always kept all the like the

1311
00:42:46,960 --> 00:42:49,200
interpolation

1312
00:42:47,920 --> 00:42:51,280
the mid-maps and everything in the

1313
00:42:49,200 --> 00:42:52,399
texture which is what happens in opengl

1314
00:42:51,280 --> 00:42:55,280
in godot 3.

1315
00:42:52,400 --> 00:42:55,920
but now textures and samplers are

1316
00:42:55,280 --> 00:42:57,520
separate

1317
00:42:55,920 --> 00:42:59,040
and it's really cool because if you

1318
00:42:57,520 --> 00:43:00,640
separate them you have you can have as

1319
00:42:59,040 --> 00:43:03,119
many textures as you want

1320
00:43:00,640 --> 00:43:04,240
just reducing the numbers but now users

1321
00:43:03,119 --> 00:43:06,800
will have to move

1322
00:43:04,240 --> 00:43:08,720
the this like for example now we have

1323
00:43:06,800 --> 00:43:10,400
this in each node for 2d you have to

1324
00:43:08,720 --> 00:43:11,598
configure if you want which kind of

1325
00:43:10,400 --> 00:43:12,960
filtering you want

1326
00:43:11,599 --> 00:43:14,480
and if you make materials you have to

1327
00:43:12,960 --> 00:43:16,560
configure the filtering in the material

1328
00:43:14,480 --> 00:43:19,440
no longer in the texture that's the last

1329
00:43:16,560 --> 00:43:20,880
change we have to do this again improves

1330
00:43:19,440 --> 00:43:22,960
performance and make sure you have

1331
00:43:20,880 --> 00:43:24,720
unlimited textures but the way you work

1332
00:43:22,960 --> 00:43:27,920
on it is just a bit different

1333
00:43:24,720 --> 00:43:29,040
but that's all so well this concludes

1334
00:43:27,920 --> 00:43:31,520
the talk

1335
00:43:29,040 --> 00:43:33,040
uh if you have any questions or want to

1336
00:43:31,520 --> 00:43:34,480
know more

1337
00:43:33,040 --> 00:43:36,319
sorry know more about the daughter of

1338
00:43:34,480 --> 00:43:39,520
william or anything i'm here

1339
00:43:36,319 --> 00:43:41,520
to answer questions uh you were first

1340
00:43:39,520 --> 00:43:43,680
sorry yeah since you mentioned web gpu

1341
00:43:41,520 --> 00:43:46,800
what are your plans here

1342
00:43:43,680 --> 00:43:48,720
ah that's a good question uh

1343
00:43:46,800 --> 00:43:50,640
it will be interesting to make a

1344
00:43:48,720 --> 00:43:52,319
rendering device for web gpu because

1345
00:43:50,640 --> 00:43:55,598
it's it's very interesting

1346
00:43:52,319 --> 00:43:58,640
i don't think there is any bull can uh

1347
00:43:55,599 --> 00:44:00,640
over web gpu uh could it could be easier

1348
00:43:58,640 --> 00:44:02,480
to at least test it if we had a vulcan

1349
00:44:00,640 --> 00:44:04,319
wrapper for web gpu

1350
00:44:02,480 --> 00:44:06,000
uh but we're probably going to have to

1351
00:44:04,319 --> 00:44:09,040
write the backend for it that would

1352
00:44:06,000 --> 00:44:10,640
hopefully will be very interesting

1353
00:44:09,040 --> 00:44:12,079
i don't see that it's going to be this

1354
00:44:10,640 --> 00:44:14,000
dispute between

1355
00:44:12,079 --> 00:44:16,560
apple and the rest of the world doesn't

1356
00:44:14,000 --> 00:44:19,760
seem like it's going to get solved so

1357
00:44:16,560 --> 00:44:21,520
uh i can imagine that the spear v2 guys

1358
00:44:19,760 --> 00:44:22,800
are going to make something to convert

1359
00:44:21,520 --> 00:44:27,280
spirit back

1360
00:44:22,800 --> 00:44:29,680
to that exchanger so it runs an apple uh

1361
00:44:27,280 --> 00:44:30,640
so yeah that's kind of what i think

1362
00:44:29,680 --> 00:44:32,319
about it

1363
00:44:30,640 --> 00:44:34,560
i guess it's uh it's going to work

1364
00:44:32,319 --> 00:44:36,079
eventually it's going to be a bit messy

1365
00:44:34,560 --> 00:44:38,480
on safari probably

1366
00:44:36,079 --> 00:44:39,119
but yeah they just implement it

1367
00:44:38,480 --> 00:44:42,880
eventually

1368
00:44:39,119 --> 00:44:44,319
uh probably forgot 4.1 not 4.4 which

1369
00:44:42,880 --> 00:44:47,200
more or less is stable now

1370
00:44:44,319 --> 00:44:49,279
but yeah and you want to draw something

1371
00:44:47,200 --> 00:44:53,598
is there any reason for apple to want

1372
00:44:49,280 --> 00:44:56,800
their ws i have no clue

1373
00:44:53,599 --> 00:44:58,560
oh yeah sorry he asked if there is any

1374
00:44:56,800 --> 00:45:00,800
reason for apple to

1375
00:44:58,560 --> 00:45:02,160
deny i really don't know what's going on

1376
00:45:00,800 --> 00:45:03,520
it's internal politics between the

1377
00:45:02,160 --> 00:45:05,520
companies

1378
00:45:03,520 --> 00:45:07,040
for us people outside doesn't make any

1379
00:45:05,520 --> 00:45:09,280
sense uh

1380
00:45:07,040 --> 00:45:10,319
i think apple exited chronos at some

1381
00:45:09,280 --> 00:45:12,160
point because

1382
00:45:10,319 --> 00:45:14,160
apple was part of the volcano working

1383
00:45:12,160 --> 00:45:16,078
group up to some point and then they

1384
00:45:14,160 --> 00:45:18,560
exited cronus and they have nothing to

1385
00:45:16,079 --> 00:45:21,599
do with chronos anymore uh

1386
00:45:18,560 --> 00:45:24,400
maybe that has anything to eat but but

1387
00:45:21,599 --> 00:45:27,599
what gpu is actually w3c it's not

1388
00:45:24,400 --> 00:45:29,119
uh chronos but spirit is chronos so

1389
00:45:27,599 --> 00:45:30,560
maybe because they don't want to have

1390
00:45:29,119 --> 00:45:32,000
anything with chronos i

1391
00:45:30,560 --> 00:45:34,000
really don't know it's just speculation

1392
00:45:32,000 --> 00:45:37,440
i don't know what that's

1393
00:45:34,000 --> 00:45:40,720
also um does

1394
00:45:37,440 --> 00:45:44,240
ios support volcan

1395
00:45:40,720 --> 00:45:47,598
if so it has a spare v support

1396
00:45:44,240 --> 00:45:49,040
no ios and mac os don't super wukan they

1397
00:45:47,599 --> 00:45:52,079
support metal

1398
00:45:49,040 --> 00:45:54,400
the thing is that uh

1399
00:45:52,079 --> 00:45:55,599
it's not really a secret if you dig into

1400
00:45:54,400 --> 00:45:57,359
it but

1401
00:45:55,599 --> 00:45:58,960
apple knows that nobody really cares

1402
00:45:57,359 --> 00:46:01,440
about metal because the

1403
00:45:58,960 --> 00:46:02,160
the the gamers don't really use mac so

1404
00:46:01,440 --> 00:46:04,400
what they did

1405
00:46:02,160 --> 00:46:06,399
recently is just add more features to

1406
00:46:04,400 --> 00:46:08,160
metal so the molten bk which is the

1407
00:46:06,400 --> 00:46:09,280
wrapper the brass bulkhead over metal

1408
00:46:08,160 --> 00:46:12,839
just works better

1409
00:46:09,280 --> 00:46:16,000
uh they secretly did it let's say

1410
00:46:12,839 --> 00:46:17,680
uh apple is you know it's a very secrecy

1411
00:46:16,000 --> 00:46:18,560
company you won't see them at any event

1412
00:46:17,680 --> 00:46:21,598
they don't have the

1413
00:46:18,560 --> 00:46:23,359
public engineers uh it's it's like

1414
00:46:21,599 --> 00:46:24,720
so in the end it works really well we

1415
00:46:23,359 --> 00:46:26,880
may eventually import

1416
00:46:24,720 --> 00:46:28,240
uh rendering device to metal if we see

1417
00:46:26,880 --> 00:46:30,880
that there is a benefit and

1418
00:46:28,240 --> 00:46:32,240
an improvement in performance because

1419
00:46:30,880 --> 00:46:33,599
why not otherwise

1420
00:46:32,240 --> 00:46:36,000
but in the meantime right now it's

1421
00:46:33,599 --> 00:46:38,000
working with multi mbk works really well

1422
00:46:36,000 --> 00:46:40,160
i run it on macos and it just works so

1423
00:46:38,000 --> 00:46:44,000
it's okay

1424
00:46:40,160 --> 00:46:47,118
any other question oh well let's go

1425
00:46:44,000 --> 00:46:48,880
right to left sorry you started okay um

1426
00:46:47,119 --> 00:46:50,640
when you talked in the beginning not

1427
00:46:48,880 --> 00:46:52,960
about running but about get off

1428
00:46:50,640 --> 00:46:55,040
um you mentioned how the development is

1429
00:46:52,960 --> 00:46:58,079
going and everything but how about users

1430
00:46:55,040 --> 00:46:59,680
games using your engine how does the

1431
00:46:58,079 --> 00:47:02,000
community look from this direction

1432
00:46:59,680 --> 00:47:03,598
and also because like now we're talking

1433
00:47:02,000 --> 00:47:06,079
about devices mac ios

1434
00:47:03,599 --> 00:47:08,319
everything do you know where godot is

1435
00:47:06,079 --> 00:47:08,319
used

1436
00:47:09,200 --> 00:47:13,279
that's quite more well if it's the

1437
00:47:11,440 --> 00:47:16,240
question is more about the community

1438
00:47:13,280 --> 00:47:17,920
uh if i understand uh what they use it

1439
00:47:16,240 --> 00:47:21,200
more and what they are expecting

1440
00:47:17,920 --> 00:47:23,520
uh the biggest complaint the program is

1441
00:47:21,200 --> 00:47:24,960
started as a 2d engine mostly it has 3d

1442
00:47:23,520 --> 00:47:26,640
but almost nobody use it

1443
00:47:24,960 --> 00:47:29,200
so nobody even bothers to use it on

1444
00:47:26,640 --> 00:47:30,000
reportbacks when we rewrote it in opengl

1445
00:47:29,200 --> 00:47:31,680
3.3

1446
00:47:30,000 --> 00:47:33,680
more people started to use it and they

1447
00:47:31,680 --> 00:47:35,359
had a lot of complaining that it was low

1448
00:47:33,680 --> 00:47:37,279
that they needed features and a lot of

1449
00:47:35,359 --> 00:47:39,920
things

1450
00:47:37,280 --> 00:47:41,359
so at the same time we realized we were

1451
00:47:39,920 --> 00:47:42,160
going to continue working up in gl

1452
00:47:41,359 --> 00:47:45,279
because it just

1453
00:47:42,160 --> 00:47:48,000
didn't work in a lot of levels i'll say

1454
00:47:45,280 --> 00:47:49,200
so we had to set the rendering stone for

1455
00:47:48,000 --> 00:47:51,839
two years

1456
00:47:49,200 --> 00:47:53,200
uh fix a lot of the bugs because 3.0 was

1457
00:47:51,839 --> 00:47:55,040
a very big release and now we are

1458
00:47:53,200 --> 00:47:57,680
porting everything to vulcan and trying

1459
00:47:55,040 --> 00:47:59,520
to satisfy all the demands from users

1460
00:47:57,680 --> 00:48:01,440
about like improved performance more

1461
00:47:59,520 --> 00:48:02,880
features more modern features

1462
00:48:01,440 --> 00:48:05,119
more portability working on the

1463
00:48:02,880 --> 00:48:07,200
platforms so right now

1464
00:48:05,119 --> 00:48:08,480
the direction is trying to cope with all

1465
00:48:07,200 --> 00:48:10,960
the use of demand

1466
00:48:08,480 --> 00:48:12,079
uh it's like the engine is slowly going

1467
00:48:10,960 --> 00:48:14,559
from

1468
00:48:12,079 --> 00:48:16,319
mostly to the engine to a 3d engine too

1469
00:48:14,559 --> 00:48:17,280
but yeah it takes a while until

1470
00:48:16,319 --> 00:48:18,640
everything

1471
00:48:17,280 --> 00:48:20,079
i think the vulcan one is going to be

1472
00:48:18,640 --> 00:48:22,240
really cool i mean it's going to be

1473
00:48:20,079 --> 00:48:24,720
almost on the same level as using like

1474
00:48:22,240 --> 00:48:26,240
the high and rendering unity or unreal

1475
00:48:24,720 --> 00:48:26,959
so it's going to be more or less in that

1476
00:48:26,240 --> 00:48:29,680
same level

1477
00:48:26,960 --> 00:48:30,400
i hope uh or at least it will be close

1478
00:48:29,680 --> 00:48:32,000
enough that

1479
00:48:30,400 --> 00:48:33,680
everything else that is missing can be

1480
00:48:32,000 --> 00:48:36,640
added without that much effort so yeah

1481
00:48:33,680 --> 00:48:38,000
that's the situation uh wait we weren't

1482
00:48:36,640 --> 00:48:40,799
we're going

1483
00:48:38,000 --> 00:48:41,920
yeah yeah so um the vulcan branch is now

1484
00:48:40,800 --> 00:48:43,760
merged into master

1485
00:48:41,920 --> 00:48:45,359
does that mean that uh next week's

1486
00:48:43,760 --> 00:48:49,839
probably or in the future

1487
00:48:45,359 --> 00:48:49,839
probably yeah

1488
00:48:53,359 --> 00:48:57,119
oh no no not close uh it's going to be

1489
00:48:56,400 --> 00:48:58,960
broken for

1490
00:48:57,119 --> 00:49:01,200
for a while in master i mean it's going

1491
00:48:58,960 --> 00:49:02,160
to you shouldn't board your game to

1492
00:49:01,200 --> 00:49:06,399
vulcan

1493
00:49:02,160 --> 00:49:08,319
yet some people some really

1494
00:49:06,400 --> 00:49:09,839
some people that love living on the edge

1495
00:49:08,319 --> 00:49:11,279
are actually publishing their name on

1496
00:49:09,839 --> 00:49:14,240
the woodcam branch

1497
00:49:11,280 --> 00:49:16,079
but you should probably not do it

1498
00:49:14,240 --> 00:49:16,720
probably by the middle of the year that

1499
00:49:16,079 --> 00:49:19,680
will come

1500
00:49:16,720 --> 00:49:20,640
branch will be complete uh like may june

1501
00:49:19,680 --> 00:49:22,240
or july

1502
00:49:20,640 --> 00:49:24,078
and then we will focus on stabilization

1503
00:49:22,240 --> 00:49:28,000
so release will probably be the

1504
00:49:24,079 --> 00:49:30,000
gold for second uh half of the year

1505
00:49:28,000 --> 00:49:31,440
it will be very useful probably by the

1506
00:49:30,000 --> 00:49:32,800
middle of the you already will be

1507
00:49:31,440 --> 00:49:34,720
able to use it fine it's just going to

1508
00:49:32,800 --> 00:49:36,400
have bugs uh just

1509
00:49:34,720 --> 00:49:37,839
for developing it's okay for releasing

1510
00:49:36,400 --> 00:49:39,280
maybe not so much and when we can

1511
00:49:37,839 --> 00:49:40,319
actually release will be a few months

1512
00:49:39,280 --> 00:49:42,800
later

1513
00:49:40,319 --> 00:49:44,480
so that's kind of the roadmap but yeah

1514
00:49:42,800 --> 00:49:45,920
it's going to be totally broken in a

1515
00:49:44,480 --> 00:49:49,839
week

1516
00:49:45,920 --> 00:49:50,240
yeah sorry is it going to be possible to

1517
00:49:49,839 --> 00:49:53,680
put

1518
00:49:50,240 --> 00:49:56,879
games from 3-2 to 4.

1519
00:49:53,680 --> 00:49:59,118
uh yeah uh porting games from

1520
00:49:56,880 --> 00:50:00,000
godot 3.2 to 4 should be much easier

1521
00:49:59,119 --> 00:50:01,680
than it was

1522
00:50:00,000 --> 00:50:03,200
going from two to three which completely

1523
00:50:01,680 --> 00:50:06,319
broke a lot of things

1524
00:50:03,200 --> 00:50:08,319
uh most of the most of the data is

1525
00:50:06,319 --> 00:50:09,599
remains compatible you should be able to

1526
00:50:08,319 --> 00:50:11,920
put your project

1527
00:50:09,599 --> 00:50:13,599
maybe the scripts the the biggest change

1528
00:50:11,920 --> 00:50:15,520
may probably be that you have to adjust

1529
00:50:13,599 --> 00:50:17,280
the texture options in the material

1530
00:50:15,520 --> 00:50:19,599
now because they will be gone from the

1531
00:50:17,280 --> 00:50:21,359
texture and the fact that gd script is

1532
00:50:19,599 --> 00:50:23,359
going to suffer compatibility breaking

1533
00:50:21,359 --> 00:50:24,799
changes we will not be so terrible and

1534
00:50:23,359 --> 00:50:28,480
will be really good

1535
00:50:24,800 --> 00:50:30,640
uh he's doing them not me uh and uh

1536
00:50:28,480 --> 00:50:32,640
but it will be really really much much

1537
00:50:30,640 --> 00:50:34,240
better uh we actually may make a screen

1538
00:50:32,640 --> 00:50:36,480
uh we can just parse the old ones and

1539
00:50:34,240 --> 00:50:38,720
compare to new ones probably

1540
00:50:36,480 --> 00:50:40,960
so probably an export tool will will be

1541
00:50:38,720 --> 00:50:44,799
needed but

1542
00:50:40,960 --> 00:50:46,559
compared to the pain that she knows

1543
00:50:44,800 --> 00:50:48,880
sporting your game from two to three

1544
00:50:46,559 --> 00:50:53,359
this will be a lot less

1545
00:50:48,880 --> 00:50:54,880
a lot less painful so yeah that's it

1546
00:50:53,359 --> 00:50:56,480
we have time for more questions over

1547
00:50:54,880 --> 00:50:59,760
here yeah okay

1548
00:50:56,480 --> 00:51:00,559
so good for what is what is it gonna use

1549
00:50:59,760 --> 00:51:03,359
on desktop

1550
00:51:00,559 --> 00:51:03,359
windows platforms

1551
00:51:04,000 --> 00:51:09,760
uh do the windows desktop platform exist

1552
00:51:07,119 --> 00:51:09,760
on superbug

1553
00:51:10,720 --> 00:51:14,399
oh you mean the older the older

1554
00:51:12,240 --> 00:51:16,720
computers that have a gpu that don't run

1555
00:51:14,400 --> 00:51:20,319
vulcan

1556
00:51:16,720 --> 00:51:22,879
now that's going to keep using opengl

1557
00:51:20,319 --> 00:51:23,359
the thing is that those are all and have

1558
00:51:22,880 --> 00:51:26,240
i mean

1559
00:51:23,359 --> 00:51:27,920
what limits you in those platforms is

1560
00:51:26,240 --> 00:51:31,439
not so much

1561
00:51:27,920 --> 00:51:33,440
uh the feature set but the resources and

1562
00:51:31,440 --> 00:51:36,480
the performance like if you make a game

1563
00:51:33,440 --> 00:51:38,640
uh with vulcan in mind you're thinking

1564
00:51:36,480 --> 00:51:40,319
of the the gpus that have maybe four

1565
00:51:38,640 --> 00:51:43,279
gigabytes of video memory

1566
00:51:40,319 --> 00:51:44,640
uh are really fast uh the older devices

1567
00:51:43,280 --> 00:51:46,160
that don't support bootcamp which is

1568
00:51:44,640 --> 00:51:48,960
kind of like the directx

1569
00:51:46,160 --> 00:51:50,240
10 level devices uh they usually only

1570
00:51:48,960 --> 00:51:52,559
have like 200

1571
00:51:50,240 --> 00:51:53,839
megabytes of video memory and they are

1572
00:51:52,559 --> 00:51:56,640
usually like just

1573
00:51:53,839 --> 00:51:58,240
lower uh they don't have usually as much

1574
00:51:56,640 --> 00:51:58,799
for maybe a high gain one has a bit more

1575
00:51:58,240 --> 00:52:01,439
but

1576
00:51:58,800 --> 00:52:02,400
in average they are not like they are

1577
00:52:01,440 --> 00:52:03,839
not as powerful

1578
00:52:02,400 --> 00:52:05,760
and they will still not be able to run

1579
00:52:03,839 --> 00:52:07,359
the game so if you want to make a

1580
00:52:05,760 --> 00:52:08,800
for 2d games it's fine because they will

1581
00:52:07,359 --> 00:52:10,640
look the same and

1582
00:52:08,800 --> 00:52:12,400
it's just going to work i mean it's not

1583
00:52:10,640 --> 00:52:14,640
going to have a lot of difference

1584
00:52:12,400 --> 00:52:15,920
but for 3d games if if you want to make

1585
00:52:14,640 --> 00:52:19,200
something that uses all the

1586
00:52:15,920 --> 00:52:20,960
highest and rendering features on

1587
00:52:19,200 --> 00:52:22,799
on those computers it's just not going

1588
00:52:20,960 --> 00:52:24,400
to work

1589
00:52:22,800 --> 00:52:25,839
i mean it's going to work but it's going

1590
00:52:24,400 --> 00:52:27,440
to be slower so you should probably use

1591
00:52:25,839 --> 00:52:29,040
something like instead of

1592
00:52:27,440 --> 00:52:30,880
a box account tracing for global

1593
00:52:29,040 --> 00:52:32,880
illumination you may want to use

1594
00:52:30,880 --> 00:52:34,480
like mapping which is faster if you want

1595
00:52:32,880 --> 00:52:35,520
to run on that device but yeah that's

1596
00:52:34,480 --> 00:52:38,640
that's kind of the

1597
00:52:35,520 --> 00:52:42,160
the goal so we have

1598
00:52:38,640 --> 00:52:45,920
more time here any other question so

1599
00:52:42,160 --> 00:52:46,879
yes about the rendering uh the render

1600
00:52:45,920 --> 00:52:49,599
ring back ends

1601
00:52:46,880 --> 00:52:50,319
um i don't know if godot has a pdr

1602
00:52:49,599 --> 00:52:54,240
pipeline

1603
00:52:50,319 --> 00:52:56,400
yeah it is pbr well uh if you wanna

1604
00:52:54,240 --> 00:52:57,439
implement new rendering techniques you

1605
00:52:56,400 --> 00:52:59,440
have to implement

1606
00:52:57,440 --> 00:53:00,800
to implement it for each backend say for

1607
00:52:59,440 --> 00:53:02,800
the low end

1608
00:53:00,800 --> 00:53:04,000
renderer and the high end renderer for

1609
00:53:02,800 --> 00:53:05,680
broken uh

1610
00:53:04,000 --> 00:53:07,760
no that should be the same it should

1611
00:53:05,680 --> 00:53:09,598
work so

1612
00:53:07,760 --> 00:53:11,359
one thing we discussed a lot which may

1613
00:53:09,599 --> 00:53:13,440
be interesting for you if you are into

1614
00:53:11,359 --> 00:53:15,759
rendering

1615
00:53:13,440 --> 00:53:16,720
is that god is mean to be an easy to use

1616
00:53:15,760 --> 00:53:19,760
game engine

1617
00:53:16,720 --> 00:53:20,640
so one thing we are not implementing as

1618
00:53:19,760 --> 00:53:22,800
an example

1619
00:53:20,640 --> 00:53:24,319
is temporal anti-aliasing because it

1620
00:53:22,800 --> 00:53:26,079
means you need to

1621
00:53:24,319 --> 00:53:27,920
let users that make shadows understand

1622
00:53:26,079 --> 00:53:28,880
that they need to get a hold of motion

1623
00:53:27,920 --> 00:53:31,040
vectors and it's

1624
00:53:28,880 --> 00:53:32,960
super difficult i mean it's already

1625
00:53:31,040 --> 00:53:34,800
difficult for really big games or that

1626
00:53:32,960 --> 00:53:37,440
have a lot of budget so

1627
00:53:34,800 --> 00:53:39,040
expecting our users to to be able to

1628
00:53:37,440 --> 00:53:40,079
maintain motion vectors is probably not

1629
00:53:39,040 --> 00:53:41,440
worth it

1630
00:53:40,079 --> 00:53:43,119
so what you're going to do is find

1631
00:53:41,440 --> 00:53:44,880
alternate ways to do the same like for

1632
00:53:43,119 --> 00:53:45,760
example the high end rendering a lot is

1633
00:53:44,880 --> 00:53:47,920
going to use

1634
00:53:45,760 --> 00:53:48,880
forward rendering with cluster lighting

1635
00:53:47,920 --> 00:53:51,440
which is kind of

1636
00:53:48,880 --> 00:53:53,440
uh trendy now it's it's like i think

1637
00:53:51,440 --> 00:53:55,280
what most new games use now like the new

1638
00:53:53,440 --> 00:53:57,680
doom for example uses that and i think

1639
00:53:55,280 --> 00:54:01,359
many new games are moving to that

1640
00:53:57,680 --> 00:54:02,160
uh so maybe then you have the problem

1641
00:54:01,359 --> 00:54:04,078
that some

1642
00:54:02,160 --> 00:54:05,680
things have more aliasing that are not

1643
00:54:04,079 --> 00:54:07,599
just the geometry uh

1644
00:54:05,680 --> 00:54:09,440
so we are like using other techniques to

1645
00:54:07,599 --> 00:54:11,839
like reduce that aliasing and still have

1646
00:54:09,440 --> 00:54:14,800
very stable image as an example

1647
00:54:11,839 --> 00:54:16,000
the lower end rendering may use a

1648
00:54:14,800 --> 00:54:18,160
different technique maybe it's just

1649
00:54:16,000 --> 00:54:19,200
forward single pass or soft or maybe on

1650
00:54:18,160 --> 00:54:22,640
the older

1651
00:54:19,200 --> 00:54:23,520
devices will be forward but multi

1652
00:54:22,640 --> 00:54:26,160
multi-pass

1653
00:54:23,520 --> 00:54:27,599
which is better for real stuff but the

1654
00:54:26,160 --> 00:54:30,319
shader you write

1655
00:54:27,599 --> 00:54:31,920
gives you like glsl to write your your

1656
00:54:30,319 --> 00:54:35,359
code but it's not the glsl

1657
00:54:31,920 --> 00:54:36,880
from opengl it's like a managed gsl

1658
00:54:35,359 --> 00:54:39,440
that is very easy to use has all the

1659
00:54:36,880 --> 00:54:41,760
complexion has a lot of outputs already

1660
00:54:39,440 --> 00:54:43,760
assigned for you to write

1661
00:54:41,760 --> 00:54:45,280
so you write that code and then that

1662
00:54:43,760 --> 00:54:46,640
gets compiled for the high end for the

1663
00:54:45,280 --> 00:54:48,160
medium and for the glowing and you don't

1664
00:54:46,640 --> 00:54:49,839
have to do anything and if you want to

1665
00:54:48,160 --> 00:54:50,960
implement like custom lighting you can

1666
00:54:49,839 --> 00:54:53,200
like write

1667
00:54:50,960 --> 00:54:55,200
like shaders and you have for example

1668
00:54:53,200 --> 00:54:56,960
you have the vertex shader the fragment

1669
00:54:55,200 --> 00:54:59,200
shader and the light shader if you want

1670
00:54:56,960 --> 00:55:00,720
the code that runs for each light so you

1671
00:54:59,200 --> 00:55:02,078
want to read something custom you do

1672
00:55:00,720 --> 00:55:04,078
that and then that's going to be

1673
00:55:02,079 --> 00:55:06,000
compiled as different the different

1674
00:55:04,079 --> 00:55:08,000
rendering technique will still run your

1675
00:55:06,000 --> 00:55:11,359
your shader in different ways and you

1676
00:55:08,000 --> 00:55:11,359
just write it once and it works

1677
00:55:12,880 --> 00:55:17,440
any more questions or are we okay

1678
00:55:18,000 --> 00:55:21,119
are you running validation

1679
00:55:24,319 --> 00:55:29,839
validation layers oh yes yes to the back

1680
00:55:27,599 --> 00:55:30,880
it's always we always run bootcamp

1681
00:55:29,839 --> 00:55:34,240
validation

1682
00:55:30,880 --> 00:55:38,720
you see errors in your work of the port

1683
00:55:34,240 --> 00:55:41,279
uh i think there's nothing now uh but uh

1684
00:55:38,720 --> 00:55:42,879
who knows i mean i usually develop on

1685
00:55:41,280 --> 00:55:46,000
nvidia

1686
00:55:42,880 --> 00:55:47,440
and test an md and intel but right now

1687
00:55:46,000 --> 00:55:49,200
it's not meant to be stable so there's

1688
00:55:47,440 --> 00:55:51,599
probably some errors if you're running

1689
00:55:49,200 --> 00:55:53,279
different uh when it's stable it's not

1690
00:55:51,599 --> 00:55:54,640
going to have any errors of course but

1691
00:55:53,280 --> 00:55:56,640
right now yeah it's

1692
00:55:54,640 --> 00:55:58,799
it's typical to use something that works

1693
00:55:56,640 --> 00:56:00,400
in one platform and then the other uses

1694
00:55:58,799 --> 00:56:03,119
also nvidia has their own validation

1695
00:56:00,400 --> 00:56:05,760
layers besides the lunar g

1696
00:56:03,119 --> 00:56:07,920
so uh usually it throws different errors

1697
00:56:05,760 --> 00:56:09,839
the nvidia ones are usually like

1698
00:56:07,920 --> 00:56:11,200
i don't care about that so just turn

1699
00:56:09,839 --> 00:56:13,040
them off uh

1700
00:56:11,200 --> 00:56:14,319
but it was the same with opengl they

1701
00:56:13,040 --> 00:56:16,160
just give you too much information

1702
00:56:14,319 --> 00:56:17,359
usually they assume too much about what

1703
00:56:16,160 --> 00:56:20,799
you're doing

1704
00:56:17,359 --> 00:56:24,799
but uh but yeah the idea is that you can

1705
00:56:20,799 --> 00:56:27,920
anyway turn it on and run it and uh

1706
00:56:24,799 --> 00:56:29,920
we we're going to have uh uh

1707
00:56:27,920 --> 00:56:31,200
one of our contributors is setting up a

1708
00:56:29,920 --> 00:56:32,960
farm that if you

1709
00:56:31,200 --> 00:56:34,960
have like commits and prs and everything

1710
00:56:32,960 --> 00:56:36,000
it's going to run benchmarks and things

1711
00:56:34,960 --> 00:56:37,520
and it's going to like

1712
00:56:36,000 --> 00:56:39,760
capture it there is a regression in

1713
00:56:37,520 --> 00:56:42,079
performance rigorous and inequality

1714
00:56:39,760 --> 00:56:43,520
if there are validation layer errors

1715
00:56:42,079 --> 00:56:45,599
that appear

1716
00:56:43,520 --> 00:56:48,000
so to avoid this kind of cases we are

1717
00:56:45,599 --> 00:56:48,960
doing trying to use ci for this kind of

1718
00:56:48,000 --> 00:56:51,280
things

1719
00:56:48,960 --> 00:56:52,400
we actually got a really nice donation

1720
00:56:51,280 --> 00:56:54,960
from amd

1721
00:56:52,400 --> 00:56:56,319
to the gpus and cpus to make this this

1722
00:56:54,960 --> 00:56:57,839
little farm

1723
00:56:56,319 --> 00:57:00,319
so it's going to be pretty cool once

1724
00:56:57,839 --> 00:57:00,319
it's working

1725
00:57:00,400 --> 00:57:04,000
yes uh is there any key differences

1726
00:57:02,799 --> 00:57:06,400
between what gpu

1727
00:57:04,000 --> 00:57:07,520
and vulcan or is it like webgl web gpu

1728
00:57:06,400 --> 00:57:10,559
is more like metal

1729
00:57:07,520 --> 00:57:13,839
because apple proposed it so

1730
00:57:10,559 --> 00:57:15,599
yeah it's it's so funny because

1731
00:57:13,839 --> 00:57:18,000
sorry i don't i shouldn't say that but

1732
00:57:15,599 --> 00:57:21,359
but they proposed web gpu with

1733
00:57:18,000 --> 00:57:23,920
wh lsl and everybody was like well

1734
00:57:21,359 --> 00:57:26,000
that's been good term with apple we

1735
00:57:23,920 --> 00:57:28,400
could have done wolkan for the web but

1736
00:57:26,000 --> 00:57:30,960
let's do web gpu you know because it's

1737
00:57:28,400 --> 00:57:34,559
okay metal is easier to validate than

1738
00:57:30,960 --> 00:57:36,720
vulcan uh and they went with apples

1739
00:57:34,559 --> 00:57:37,760
and they told up yeah but we'd like to

1740
00:57:36,720 --> 00:57:40,000
use spear v

1741
00:57:37,760 --> 00:57:40,799
not really an apple was well let's

1742
00:57:40,000 --> 00:57:43,520
discuss it

1743
00:57:40,799 --> 00:57:45,520
like four years later i police that no

1744
00:57:43,520 --> 00:57:46,000
way not touching spurvy so yeah that's

1745
00:57:45,520 --> 00:57:49,040
what's

1746
00:57:46,000 --> 00:57:49,760
happening sorry to interject if this is

1747
00:57:49,040 --> 00:57:55,839
not

1748
00:57:49,760 --> 00:57:55,839
correct um

1749
00:57:57,599 --> 00:58:00,960
you're going to give more information

1750
00:57:58,960 --> 00:58:03,520
really

1751
00:58:00,960 --> 00:58:05,680
you're you're all witnesses to this

1752
00:58:03,520 --> 00:58:09,040
don't forget

1753
00:58:05,680 --> 00:58:10,558
okay so yeah uh i hope actually i hope

1754
00:58:09,040 --> 00:58:12,880
this is solved at some point because

1755
00:58:10,559 --> 00:58:14,400
it's really annoying to be an honest

1756
00:58:12,880 --> 00:58:16,400
it's been webgl

1757
00:58:14,400 --> 00:58:17,920
sucks pretty much uh it has too many

1758
00:58:16,400 --> 00:58:20,160
problems it's okay for simple things but

1759
00:58:17,920 --> 00:58:23,200
porting a game engine to webgl

1760
00:58:20,160 --> 00:58:25,279
uh has too many shortcomings especially

1761
00:58:23,200 --> 00:58:26,078
shader compilation is just a big big

1762
00:58:25,280 --> 00:58:29,520
pain

1763
00:58:26,079 --> 00:58:31,040
uh so i hope uh if if this situation is

1764
00:58:29,520 --> 00:58:32,559
resolved at some point that would be

1765
00:58:31,040 --> 00:58:34,720
fantastic i really hope

1766
00:58:32,559 --> 00:58:35,599
uh this this gets solved so i will

1767
00:58:34,720 --> 00:58:38,720
assist your

1768
00:58:35,599 --> 00:58:42,000
presentation any more questions

1769
00:58:38,720 --> 00:58:51,839
or are we okay

1770
00:58:42,000 --> 00:58:51,839
okay thanks everybody

1771
00:58:53,680 --> 00:58:55,759
you

