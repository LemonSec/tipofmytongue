1
00:00:05,440 --> 00:00:09,599
hello

2
00:00:06,480 --> 00:00:13,360
happy fosdem ah my name is

3
00:00:09,599 --> 00:00:16,560
ilya borishnikov and uh

4
00:00:13,360 --> 00:00:17,759
okay my name is elia marishnikov a few

5
00:00:16,560 --> 00:00:20,880
words about me

6
00:00:17,760 --> 00:00:24,320
i'm a curator of awi

7
00:00:20,880 --> 00:00:27,919
i work at align technology and i use

8
00:00:24,320 --> 00:00:27,920
rust and webassembly at work

9
00:00:29,119 --> 00:00:32,238
and if you go and check arbi you can

10
00:00:31,760 --> 00:00:34,160
find

11
00:00:32,238 --> 00:00:35,599
the number of crates like with the

12
00:00:34,160 --> 00:00:37,919
description and so on

13
00:00:35,600 --> 00:00:40,160
if you know a nice grace and great and

14
00:00:37,920 --> 00:00:42,719
it's not presented there you can just

15
00:00:40,160 --> 00:00:45,360
leave an issue or a kind of a suggestion

16
00:00:42,719 --> 00:00:48,559
it would be very useful

17
00:00:45,360 --> 00:00:49,440
ah so it would be a talk mostly about

18
00:00:48,559 --> 00:00:52,718
wasn't binding

19
00:00:49,440 --> 00:00:53,519
so what what is it and why why is it

20
00:00:52,719 --> 00:00:55,920
useful

21
00:00:53,520 --> 00:00:56,800
why do we need it actually we can

22
00:00:55,920 --> 00:00:59,120
compile

23
00:00:56,800 --> 00:01:02,239
rust to web assembly just using plain

24
00:00:59,120 --> 00:01:05,119
rust c or cargo build

25
00:01:02,239 --> 00:01:06,479
and here is an example of building

26
00:01:05,119 --> 00:01:09,200
webassembly module

27
00:01:06,479 --> 00:01:10,640
just using plain rust c but in case in

28
00:01:09,200 --> 00:01:14,240
this case we have to

29
00:01:10,640 --> 00:01:17,200
do all the memory management on our own

30
00:01:14,240 --> 00:01:17,920
like here we have it first to allocate

31
00:01:17,200 --> 00:01:22,240
the memory

32
00:01:17,920 --> 00:01:24,960
and send the pointer back to javascript

33
00:01:22,240 --> 00:01:25,759
then we have to set the memory from

34
00:01:24,960 --> 00:01:28,000
javascript

35
00:01:25,759 --> 00:01:29,360
because javascript and webassembly have

36
00:01:28,000 --> 00:01:31,280
different memories we have

37
00:01:29,360 --> 00:01:32,799
to copy data from javascript memory to

38
00:01:31,280 --> 00:01:35,920
webassembly memory

39
00:01:32,799 --> 00:01:36,320
and then we call our computation where

40
00:01:35,920 --> 00:01:38,960
we

41
00:01:36,320 --> 00:01:39,679
construct the slides from raw parts and

42
00:01:38,960 --> 00:01:43,039
so on

43
00:01:39,680 --> 00:01:46,720
so just we have to do it on our own

44
00:01:43,040 --> 00:01:49,840
using plain rust c and it's a way to

45
00:01:46,720 --> 00:01:52,840
compile we use cdi lib

46
00:01:49,840 --> 00:01:54,560
it's just dynamical library then using a

47
00:01:52,840 --> 00:01:57,119
target

48
00:01:54,560 --> 00:01:58,079
and when calling from javascript it

49
00:01:57,119 --> 00:02:00,159
looks like this

50
00:01:58,079 --> 00:02:03,758
so at first we need to fashion

51
00:02:00,159 --> 00:02:08,560
instantiate our webassembly module

52
00:02:03,759 --> 00:02:12,160
then we have to access our exports

53
00:02:08,560 --> 00:02:13,599
then allocating memory and now we have a

54
00:02:12,160 --> 00:02:16,400
pointer

55
00:02:13,599 --> 00:02:17,760
then we have a view into this memory and

56
00:02:16,400 --> 00:02:20,160
as you can see we divide

57
00:02:17,760 --> 00:02:21,760
each pointer by four because the viewer

58
00:02:20,160 --> 00:02:26,079
is offset in

59
00:02:21,760 --> 00:02:28,640
in 32 array and pointer is in bytes

60
00:02:26,080 --> 00:02:30,800
so we have to do all of this on our own

61
00:02:28,640 --> 00:02:32,879
then when we set the memory we basically

62
00:02:30,800 --> 00:02:34,400
copy the array from javascript memory to

63
00:02:32,879 --> 00:02:37,440
webassembly memory

64
00:02:34,400 --> 00:02:40,319
and then finally we can do

65
00:02:37,440 --> 00:02:40,959
our computation and the function names

66
00:02:40,319 --> 00:02:44,480
they are

67
00:02:40,959 --> 00:02:46,080
all in a snake case like in rust we are

68
00:02:44,480 --> 00:02:50,640
not used to this in javascript

69
00:02:46,080 --> 00:02:52,800
so it looks a bit strange then

70
00:02:50,640 --> 00:02:54,559
we can do the same again in washing

71
00:02:52,800 --> 00:02:57,840
binding

72
00:02:54,560 --> 00:03:01,200
uh using the cdi lib again

73
00:02:57,840 --> 00:03:03,920
just adding the dependency

74
00:03:01,200 --> 00:03:04,319
and once my engine does all of this for

75
00:03:03,920 --> 00:03:07,359
us

76
00:03:04,319 --> 00:03:09,040
it just manages takes the memory

77
00:03:07,360 --> 00:03:10,959
management and

78
00:03:09,040 --> 00:03:13,440
and so on and generates javascript for

79
00:03:10,959 --> 00:03:16,720
us and we can

80
00:03:13,440 --> 00:03:17,200
annotate our functions uh to have a

81
00:03:16,720 --> 00:03:20,879
correct

82
00:03:17,200 --> 00:03:23,518
correct camel case javascript names

83
00:03:20,879 --> 00:03:25,920
everything looks cool so it's just our

84
00:03:23,519 --> 00:03:25,920
rust

85
00:03:26,000 --> 00:03:30,879
function without any unsway for extern

86
00:03:28,959 --> 00:03:33,280
but it's unsafe inside it's just a

87
00:03:30,879 --> 00:03:35,518
wrapper

88
00:03:33,280 --> 00:03:37,200
and then from javascript we just import

89
00:03:35,519 --> 00:03:41,280
it

90
00:03:37,200 --> 00:03:44,399
and like any other javascript function

91
00:03:41,280 --> 00:03:44,879
we pass the data again like we used to

92
00:03:44,400 --> 00:03:47,440
do

93
00:03:44,879 --> 00:03:48,079
and you receive the results well what

94
00:03:47,440 --> 00:03:51,599
that's

95
00:03:48,080 --> 00:03:54,640
just the point of uh wasn't buying it

96
00:03:51,599 --> 00:03:57,760
it just does a lot of work for us

97
00:03:54,640 --> 00:04:01,518
then what about std web

98
00:03:57,760 --> 00:04:06,079
there is really a there was a crate

99
00:04:01,519 --> 00:04:08,080
just created before wasn't binding and

100
00:04:06,080 --> 00:04:09,519
a lot of libraries written using the

101
00:04:08,080 --> 00:04:12,560
studio app

102
00:04:09,519 --> 00:04:14,080
and after wasn't managing was created

103
00:04:12,560 --> 00:04:15,840
and became more mainstream people

104
00:04:14,080 --> 00:04:18,320
started to suggest like let's

105
00:04:15,840 --> 00:04:19,199
let's rewrite this library from std web

106
00:04:18,320 --> 00:04:22,240
2

107
00:04:19,199 --> 00:04:25,759
was binding but

108
00:04:22,240 --> 00:04:25,759
what if instead we could

109
00:04:25,919 --> 00:04:31,120
just build them together and

110
00:04:29,120 --> 00:04:33,120
just use both of them without writing

111
00:04:31,120 --> 00:04:37,199
anything

112
00:04:33,120 --> 00:04:39,520
and it was a suggestion to do this

113
00:04:37,199 --> 00:04:41,120
it required to make some changes to

114
00:04:39,520 --> 00:04:43,840
wasn't binding itself

115
00:04:41,120 --> 00:04:45,280
was one of the most noticeable change

116
00:04:43,840 --> 00:04:48,719
was

117
00:04:45,280 --> 00:04:52,080
just snippets as

118
00:04:48,720 --> 00:04:54,840
javascript is a modern assembly

119
00:04:52,080 --> 00:04:57,840
we can have inline javascript in our

120
00:04:54,840 --> 00:04:57,840
rust

121
00:04:57,919 --> 00:05:02,880
seriously i'm not kidding it's just so

122
00:05:00,800 --> 00:05:05,600
here

123
00:05:02,880 --> 00:05:06,479
we write javascript when we annotate it

124
00:05:05,600 --> 00:05:09,680
it's like

125
00:05:06,479 --> 00:05:11,520
the corresponding uh rust function we

126
00:05:09,680 --> 00:05:15,360
connect them like with js name

127
00:05:11,520 --> 00:05:18,560
and so on and then we call

128
00:05:15,360 --> 00:05:20,720
javascript from our rust that's

129
00:05:18,560 --> 00:05:20,720
it

130
00:05:21,600 --> 00:05:28,320
so it was the addition

131
00:05:25,039 --> 00:05:30,639
it was imagine which helped to build

132
00:05:28,320 --> 00:05:32,800
a part of a std web on top of what's

133
00:05:30,639 --> 00:05:36,479
managing

134
00:05:32,800 --> 00:05:38,960
and luckily the initial

135
00:05:36,479 --> 00:05:39,520
support of limited interoperability so

136
00:05:38,960 --> 00:05:41,520
expect

137
00:05:39,520 --> 00:05:43,758
not everything would work perfectly but

138
00:05:41,520 --> 00:05:46,799
at least after a certain point

139
00:05:43,759 --> 00:05:53,840
it would work it was really released

140
00:05:46,800 --> 00:05:53,840
and i think it's a big deal

141
00:05:54,240 --> 00:06:02,080
then just another big point like when

142
00:05:58,160 --> 00:06:04,560
we are writing for writing rust for web

143
00:06:02,080 --> 00:06:06,318
just it would be hard to write

144
00:06:04,560 --> 00:06:08,960
everything on our own we

145
00:06:06,319 --> 00:06:09,520
have to use libraries it would be really

146
00:06:08,960 --> 00:06:12,080
nice

147
00:06:09,520 --> 00:06:13,039
so when you just grab a library and

148
00:06:12,080 --> 00:06:15,680
compile it

149
00:06:13,039 --> 00:06:16,639
and everything is fine it's great and

150
00:06:15,680 --> 00:06:20,639
this year

151
00:06:16,639 --> 00:06:23,680
there was a number of libraries which

152
00:06:20,639 --> 00:06:26,639
got webassembly support or improved

153
00:06:23,680 --> 00:06:27,680
for example chrono or recently there was

154
00:06:26,639 --> 00:06:30,960
a release of

155
00:06:27,680 --> 00:06:33,440
we need which got web assembly support

156
00:06:30,960 --> 00:06:34,080
using both ccd web or wasn't by engine

157
00:06:33,440 --> 00:06:38,080
you can choose

158
00:06:34,080 --> 00:06:38,080
which one and

159
00:06:38,560 --> 00:06:46,319
rand improved some fixed some issues

160
00:06:43,440 --> 00:06:47,120
and a lot of other crates i guess gfix

161
00:06:46,319 --> 00:06:51,120
rs got

162
00:06:47,120 --> 00:06:54,960
will simply support this this year

163
00:06:51,120 --> 00:06:58,800
so about

164
00:06:54,960 --> 00:07:02,000
rayon there was a nice addition

165
00:06:58,800 --> 00:07:04,000
which allows you to handle the

166
00:07:02,000 --> 00:07:05,360
threspounding on your own and you can

167
00:07:04,000 --> 00:07:07,280
even use

168
00:07:05,360 --> 00:07:10,479
with a bit of luck you can use rayon

169
00:07:07,280 --> 00:07:10,479
inside of the browser

170
00:07:14,840 --> 00:07:22,719
then it was a really big feature when

171
00:07:18,479 --> 00:07:26,560
i think away it landed in unstable rust

172
00:07:22,720 --> 00:07:29,840
and when it comes to

173
00:07:26,560 --> 00:07:32,560
webassembly we have to connect

174
00:07:29,840 --> 00:07:35,280
javascript promises with uh

175
00:07:32,560 --> 00:07:37,360
rust features and the create wasn't

176
00:07:35,280 --> 00:07:40,318
binding features does this for us

177
00:07:37,360 --> 00:07:41,840
so it provides interoperability and it

178
00:07:40,319 --> 00:07:45,039
is a distant

179
00:07:41,840 --> 00:07:50,318
executor so it's a rust executor built

180
00:07:45,039 --> 00:07:50,318
on top of javascript promises

181
00:07:50,639 --> 00:07:56,240
and let's check an example

182
00:07:53,919 --> 00:07:57,359
at first we need to define some

183
00:07:56,240 --> 00:08:00,720
javascript function

184
00:07:57,360 --> 00:08:00,720
which will return the promise

185
00:08:02,240 --> 00:08:08,479
like this and

186
00:08:06,240 --> 00:08:08,479
then

187
00:08:10,319 --> 00:08:16,960
we annotate our function the first line

188
00:08:13,759 --> 00:08:21,039
it means that this function will run

189
00:08:16,960 --> 00:08:21,039
when we just initialize the model

190
00:08:21,120 --> 00:08:28,319
so it's just like a main and

191
00:08:26,479 --> 00:08:29,758
then we can get the promise from

192
00:08:28,319 --> 00:08:34,240
javascript

193
00:08:29,759 --> 00:08:38,000
when call calling delayed answer

194
00:08:34,240 --> 00:08:41,760
and js future can convert promise

195
00:08:38,000 --> 00:08:44,080
to to future so we can we convert

196
00:08:41,760 --> 00:08:44,959
the promise to future and then await on

197
00:08:44,080 --> 00:08:48,560
it

198
00:08:44,959 --> 00:08:52,000
uh resolving it to a result

199
00:08:48,560 --> 00:08:55,680
and uh after this we can just log the

200
00:08:52,000 --> 00:08:56,480
the message and from javascript side it

201
00:08:55,680 --> 00:09:01,040
looks like this

202
00:08:56,480 --> 00:09:04,720
we just called init and what was uh

203
00:09:01,040 --> 00:09:07,839
written in was by just start

204
00:09:04,720 --> 00:09:08,240
everything would run and all the things

205
00:09:07,839 --> 00:09:10,880
stuff

206
00:09:08,240 --> 00:09:13,040
so you can just have i think a weight in

207
00:09:10,880 --> 00:09:14,000
wasn't binding and use it on stable and

208
00:09:13,040 --> 00:09:22,319
everything works

209
00:09:14,000 --> 00:09:26,399
and so it's really cool

210
00:09:22,320 --> 00:09:29,120
then there were a lot of

211
00:09:26,399 --> 00:09:30,480
talks about webassembly going outside of

212
00:09:29,120 --> 00:09:34,839
the browser

213
00:09:30,480 --> 00:09:38,000
and we do have a number of

214
00:09:34,839 --> 00:09:39,519
runtimes supporting web assembly so it's

215
00:09:38,000 --> 00:09:42,959
not only browser

216
00:09:39,519 --> 00:09:45,440
but any arbitrary

217
00:09:42,959 --> 00:09:46,160
just run time which can run it and cargo

218
00:09:45,440 --> 00:09:50,160
buzzy

219
00:09:46,160 --> 00:09:54,160
is kind of similar to

220
00:09:50,160 --> 00:09:56,959
wasn't pack so wasn't pack creates a

221
00:09:54,160 --> 00:09:57,680
package for you like npm package or just

222
00:09:56,959 --> 00:10:00,880
a package

223
00:09:57,680 --> 00:10:03,599
which you can run with javascript and

224
00:10:00,880 --> 00:10:04,160
cargo wise creates a package which you

225
00:10:03,600 --> 00:10:07,120
can run

226
00:10:04,160 --> 00:10:08,160
in standalone runtime for example in

227
00:10:07,120 --> 00:10:11,279
wasn't time

228
00:10:08,160 --> 00:10:14,399
or any other so it also supports

229
00:10:11,279 --> 00:10:15,600
like building and running so you can

230
00:10:14,399 --> 00:10:19,279
cargo wise iran

231
00:10:15,600 --> 00:10:22,079
or something like this and it's

232
00:10:19,279 --> 00:10:22,079
really nice to

233
00:10:24,640 --> 00:10:31,600
also there was a well the things before

234
00:10:29,200 --> 00:10:32,720
they are kind of more related to rust or

235
00:10:31,600 --> 00:10:37,760
to interrupt

236
00:10:32,720 --> 00:10:37,760
but this one is an extension of

237
00:10:38,000 --> 00:10:42,640
specification multi value is

238
00:10:43,200 --> 00:10:46,320
if i understand if i understand it

239
00:10:45,680 --> 00:10:50,160
correct

240
00:10:46,320 --> 00:10:54,240
it is not supported by all browsers yet

241
00:10:50,160 --> 00:10:56,959
but well if runtime supports it

242
00:10:54,240 --> 00:10:57,519
you can use it but you still have to

243
00:10:56,959 --> 00:11:00,800
build

244
00:10:57,519 --> 00:11:04,160
rust and uh here

245
00:11:00,800 --> 00:11:06,160
is a great article by nick fitzgerald

246
00:11:04,160 --> 00:11:07,760
where he writes about implementing

247
00:11:06,160 --> 00:11:12,319
multi-value

248
00:11:07,760 --> 00:11:14,959
in wasmbing and a number of other tools

249
00:11:12,320 --> 00:11:15,760
and it is a prerequisite for interface

250
00:11:14,959 --> 00:11:18,800
types

251
00:11:15,760 --> 00:11:21,680
because at the moment we can have

252
00:11:18,800 --> 00:11:23,599
we can return only numbers from web

253
00:11:21,680 --> 00:11:24,000
assembly or accept only numbers and if

254
00:11:23,600 --> 00:11:27,600
we

255
00:11:24,000 --> 00:11:29,360
want to pass an array for example

256
00:11:27,600 --> 00:11:32,480
in the browser we have to copy e to

257
00:11:29,360 --> 00:11:36,480
webassembly memory and pass the pointers

258
00:11:32,480 --> 00:11:38,880
so interface types would allow us to

259
00:11:36,480 --> 00:11:41,600
pass arrays or strings it's just a

260
00:11:38,880 --> 00:11:44,320
definition of a memory layout

261
00:11:41,600 --> 00:11:44,800
and multi-value is a prerequisite for it

262
00:11:44,320 --> 00:11:47,680
so

263
00:11:44,800 --> 00:11:48,800
the support of multi-value was added to

264
00:11:47,680 --> 00:11:52,560
what's margin

265
00:11:48,800 --> 00:11:52,560
and read more in this article

266
00:11:54,000 --> 00:11:58,639
and to summarize

267
00:11:59,600 --> 00:12:06,720
we got better enterability

268
00:12:03,440 --> 00:12:08,880
more libraries supporting compiling to

269
00:12:06,720 --> 00:12:11,279
web assembly

270
00:12:08,880 --> 00:12:12,880
we can now use async await with rust in

271
00:12:11,279 --> 00:12:16,560
a browser

272
00:12:12,880 --> 00:12:17,839
and we have more runtimes and better

273
00:12:16,560 --> 00:12:21,119
support with

274
00:12:17,839 --> 00:12:22,320
cargobise and new features like

275
00:12:21,120 --> 00:12:25,440
multi-value

276
00:12:22,320 --> 00:12:27,920
and really a lot of bug fixes were

277
00:12:25,440 --> 00:12:28,720
made with a number of different tools

278
00:12:27,920 --> 00:12:32,479
and crates

279
00:12:28,720 --> 00:12:35,839
and so on well i guess that's all

280
00:12:32,480 --> 00:12:38,399
and if you want more

281
00:12:35,839 --> 00:12:39,360
information i posted all the examples

282
00:12:38,399 --> 00:12:41,200
from the talk to

283
00:12:39,360 --> 00:12:43,600
github you can check them and run on

284
00:12:41,200 --> 00:12:48,320
your own like play with it

285
00:12:43,600 --> 00:12:48,320
or also the links are here

286
00:12:48,639 --> 00:12:53,839
so that's it thanks

287
00:12:58,000 --> 00:13:01,040
yeah questions

288
00:13:01,360 --> 00:13:06,160
okay you mentioned that was my engine

289
00:13:04,240 --> 00:13:09,279
features comes with its own

290
00:13:06,160 --> 00:13:11,040
executor can you clarify if you can mix

291
00:13:09,279 --> 00:13:12,639
like javascript-based features with rust

292
00:13:11,040 --> 00:13:16,079
features

293
00:13:12,639 --> 00:13:16,079
okay the question is

294
00:13:17,279 --> 00:13:21,680
that wasn't buying features comes with

295
00:13:20,079 --> 00:13:24,638
its own executor so

296
00:13:21,680 --> 00:13:25,439
can we mix the javascript promises with

297
00:13:24,639 --> 00:13:29,120
rust features

298
00:13:25,440 --> 00:13:32,079
yes we definitely can uh so

299
00:13:29,120 --> 00:13:32,639
the key the executor does uh paul paul

300
00:13:32,079 --> 00:13:35,439
until

301
00:13:32,639 --> 00:13:36,399
the future is ready and here the poll is

302
00:13:35,440 --> 00:13:40,399
done

303
00:13:36,399 --> 00:13:44,240
using a callback to javascript

304
00:13:40,399 --> 00:13:47,199
so we need just a way to

305
00:13:44,240 --> 00:13:48,160
to not block to to leave the runtime to

306
00:13:47,199 --> 00:13:51,599
do a next stick

307
00:13:48,160 --> 00:13:54,079
for example if we if we are not using a

308
00:13:51,600 --> 00:13:55,279
future if we have to wait we need a

309
00:13:54,079 --> 00:13:57,519
mechanism to wait

310
00:13:55,279 --> 00:13:59,490
so this making this waiting thing is

311
00:13:57,519 --> 00:14:00,560
done using

312
00:13:59,490 --> 00:14:04,720
[Music]

313
00:14:00,560 --> 00:14:09,199
using promises uh in particularly

314
00:14:04,720 --> 00:14:11,600
we have weight i think atomic

315
00:14:09,199 --> 00:14:13,760
weight i think it's a proposal there is

316
00:14:11,600 --> 00:14:17,680
also a

317
00:14:13,760 --> 00:14:20,720
polyfill so

318
00:14:17,680 --> 00:14:21,359
just in short yes we can use both of

319
00:14:20,720 --> 00:14:23,920
them and

320
00:14:21,360 --> 00:14:23,920
interpret

321
00:14:28,839 --> 00:14:31,839
next

322
00:14:32,800 --> 00:14:45,839
three two one

323
00:14:36,560 --> 00:14:45,839
ah that's it thank you very much

324
00:14:46,480 --> 00:14:48,560
you

