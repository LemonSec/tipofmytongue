1
00:00:06,720 --> 00:00:10,320
oh yeah

2
00:00:07,279 --> 00:00:12,559
okay thank you hi

3
00:00:10,320 --> 00:00:14,400
uh thanks for coming my talk uh i

4
00:00:12,559 --> 00:00:17,520
appreciate that um this is

5
00:00:14,400 --> 00:00:20,240
two small talks in in one talk

6
00:00:17,520 --> 00:00:22,160
uh we just made a new major release of

7
00:00:20,240 --> 00:00:23,279
guile guile three so i'm very happy and

8
00:00:22,160 --> 00:00:25,519
relieved

9
00:00:23,279 --> 00:00:26,560
and tired and and so we wanted to

10
00:00:25,519 --> 00:00:29,439
celebrate that a little bit

11
00:00:26,560 --> 00:00:30,000
uh and then also i was thinking about

12
00:00:29,439 --> 00:00:31,920
some minimal

13
00:00:30,000 --> 00:00:33,920
languages obviously the theme of the

14
00:00:31,920 --> 00:00:35,840
room guile is minimal but it's

15
00:00:33,920 --> 00:00:38,320
it's old and old things have a tendency

16
00:00:35,840 --> 00:00:40,160
to grow or in size or how do you

17
00:00:38,320 --> 00:00:42,320
maintain a minimal aspect through time

18
00:00:40,160 --> 00:00:43,519
and in fact how do you maintain a thing

19
00:00:42,320 --> 00:00:44,000
through time like what have you observed

20
00:00:43,520 --> 00:00:46,160
so that

21
00:00:44,000 --> 00:00:47,200
i have a i have a second uh mini talk

22
00:00:46,160 --> 00:00:49,038
which is

23
00:00:47,200 --> 00:00:50,800
things i've learned as being part of

24
00:00:49,039 --> 00:00:53,840
guile over the last um

25
00:00:50,800 --> 00:00:57,599
i don't know uh 15 years or so

26
00:00:53,840 --> 00:00:59,359
okay so kyle i i describe it as

27
00:00:57,600 --> 00:01:00,640
something which is old which is ancient

28
00:00:59,359 --> 00:01:02,559
but which is also

29
00:01:00,640 --> 00:01:05,199
spry and spry meaning that it's active

30
00:01:02,559 --> 00:01:07,360
and lively and we just had a new release

31
00:01:05,199 --> 00:01:08,880
and to show that i can start with some

32
00:01:07,360 --> 00:01:09,679
micro benchmarks which you obviously

33
00:01:08,880 --> 00:01:12,479
can't see

34
00:01:09,680 --> 00:01:14,240
but the issue this is comparing kyle 3

35
00:01:12,479 --> 00:01:14,960
versus cow 2 and the more paint is on

36
00:01:14,240 --> 00:01:19,119
there

37
00:01:14,960 --> 00:01:21,520
the better uh guile is uh than guile 2.

38
00:01:19,119 --> 00:01:23,040
if you see some very thin white lines

39
00:01:21,520 --> 00:01:24,000
there each one of those light lines is

40
00:01:23,040 --> 00:01:26,240
two times more

41
00:01:24,000 --> 00:01:27,759
right so more than half of the

42
00:01:26,240 --> 00:01:28,479
benchmarks are more than two times as

43
00:01:27,759 --> 00:01:30,799
fast

44
00:01:28,479 --> 00:01:32,640
and one of them for some reason is 32

45
00:01:30,799 --> 00:01:35,360
times as fast uh so it's a

46
00:01:32,640 --> 00:01:36,640
micro benchmark result um and if i take

47
00:01:35,360 --> 00:01:38,880
a

48
00:01:36,640 --> 00:01:41,040
larger more real result perhaps this is

49
00:01:38,880 --> 00:01:42,240
um benchmarking a function we have in

50
00:01:41,040 --> 00:01:43,040
gail which is the core of the

51
00:01:42,240 --> 00:01:45,920
interpreter

52
00:01:43,040 --> 00:01:46,880
called eval this is eval from that you

53
00:01:45,920 --> 00:01:49,680
learn in you know

54
00:01:46,880 --> 00:01:50,640
sick p or things like this uh it used to

55
00:01:49,680 --> 00:01:52,880
be in

56
00:01:50,640 --> 00:01:53,920
in guy 1.8 when i started with kyle

57
00:01:52,880 --> 00:01:56,399
about

58
00:01:53,920 --> 00:01:57,759
15 years ago or so this function was

59
00:01:56,399 --> 00:01:59,119
implemented in c

60
00:01:57,759 --> 00:02:01,280
and we changed to have it implemented in

61
00:01:59,119 --> 00:02:03,280
scheme when we added the the compiler

62
00:02:01,280 --> 00:02:05,360
when we did that at first things slowed

63
00:02:03,280 --> 00:02:06,640
down quite a bit because our compiler

64
00:02:05,360 --> 00:02:08,160
wasn't that great and our virtual

65
00:02:06,640 --> 00:02:09,919
machine wasn't that great it had a

66
00:02:08,160 --> 00:02:10,878
number of advantages but as you can see

67
00:02:09,919 --> 00:02:13,280
we went from

68
00:02:10,878 --> 00:02:14,480
uh computing the 30th fibonacci number

69
00:02:13,280 --> 00:02:17,599
using the interpreter

70
00:02:14,480 --> 00:02:19,519
uh from 32 seconds uh

71
00:02:17,599 --> 00:02:21,519
up to four and a half seconds again a

72
00:02:19,520 --> 00:02:23,840
log scale on the y-axis here

73
00:02:21,520 --> 00:02:26,160
uh but as we've improved from kyle 2 0

74
00:02:23,840 --> 00:02:28,080
to 2-2 and now finally to 3.0

75
00:02:26,160 --> 00:02:29,440
we're back with the performance of

76
00:02:28,080 --> 00:02:31,120
primitive eval

77
00:02:29,440 --> 00:02:32,480
except now it's meant in scheme whereas

78
00:02:31,120 --> 00:02:35,120
before it was implemented in c

79
00:02:32,480 --> 00:02:36,160
so uh pretty pretty pleased with that

80
00:02:35,120 --> 00:02:37,599
effect

81
00:02:36,160 --> 00:02:39,120
and if we take a larger benchmark like

82
00:02:37,599 --> 00:02:40,799
something like geeks geeks the package

83
00:02:39,120 --> 00:02:43,599
manager written in guile

84
00:02:40,800 --> 00:02:44,560
uh on some tasks it can improve by i

85
00:02:43,599 --> 00:02:48,319
don't know five percent

86
00:02:44,560 --> 00:02:50,400
10 15 perhaps uh depends on how much

87
00:02:48,319 --> 00:02:51,839
other things you're doing io or or

88
00:02:50,400 --> 00:02:55,280
things like this

89
00:02:51,840 --> 00:02:57,519
so i think pretty pretty good um

90
00:02:55,280 --> 00:02:59,360
uh but that when i actually looked up

91
00:02:57,519 --> 00:03:01,200
the definition of spry

92
00:02:59,360 --> 00:03:02,650
it didn't say just active and lively it

93
00:03:01,200 --> 00:03:06,560
said especially of an old person

94
00:03:02,650 --> 00:03:07,920
[Laughter]

95
00:03:06,560 --> 00:03:10,319
which is funny because it's the word i

96
00:03:07,920 --> 00:03:12,399
thought about to describe kyle

97
00:03:10,319 --> 00:03:14,000
and and then i was offended by the

98
00:03:12,400 --> 00:03:15,680
definition and then i realized you know

99
00:03:14,000 --> 00:03:17,440
this is reality and i should just accept

100
00:03:15,680 --> 00:03:20,159
it

101
00:03:17,440 --> 00:03:21,280
i turned 40 last week also so this is

102
00:03:20,159 --> 00:03:23,599
this is related

103
00:03:21,280 --> 00:03:25,120
uh so golly's old guy's real old you

104
00:03:23,599 --> 00:03:27,440
know like you know

105
00:03:25,120 --> 00:03:29,680
it's not it's not on the upswing like a

106
00:03:27,440 --> 00:03:32,799
new language like like rust for example

107
00:03:29,680 --> 00:03:33,760
it's not elixir it's it's old right it's

108
00:03:32,799 --> 00:03:36,959
older

109
00:03:33,760 --> 00:03:40,079
than probably some people it fuzz them

110
00:03:36,959 --> 00:03:41,599
right it's older than javascript

111
00:03:40,080 --> 00:03:44,000
uh which i realized today was three to

112
00:03:41,599 --> 00:03:46,319
the power three years before girl three

113
00:03:44,000 --> 00:03:47,760
um and it's built from old things right

114
00:03:46,319 --> 00:03:49,518
guile itself was not built

115
00:03:47,760 --> 00:03:51,200
you know out of nothing i wasn't around

116
00:03:49,519 --> 00:03:53,760
then obviously i was 13.

117
00:03:51,200 --> 00:03:55,599
um guy was built on top of an

118
00:03:53,760 --> 00:03:57,518
implementation called scm

119
00:03:55,599 --> 00:03:58,640
which itself was built on top of an

120
00:03:57,519 --> 00:04:02,319
invitation called

121
00:03:58,640 --> 00:04:05,359
scheme in one defund siod in 1988 before

122
00:04:02,319 --> 00:04:07,040
bash before ticol and these things

123
00:04:05,360 --> 00:04:08,480
themselves are built on old things right

124
00:04:07,040 --> 00:04:09,359
like their implementations of scheme

125
00:04:08,480 --> 00:04:12,238
which is old

126
00:04:09,360 --> 00:04:12,640
old right which is like a dialectic list

127
00:04:12,239 --> 00:04:15,040
which is

128
00:04:12,640 --> 00:04:16,399
old which is an implementation of the

129
00:04:15,040 --> 00:04:19,358
lambda calculus which was

130
00:04:16,399 --> 00:04:21,519
three to the four power years ago uh so

131
00:04:19,358 --> 00:04:21,519
i

132
00:04:23,520 --> 00:04:27,198
what you have after evolving with time

133
00:04:25,040 --> 00:04:30,240
the world is not the same as it was

134
00:04:27,199 --> 00:04:32,560
81 years ago nor 27 years ago nor

135
00:04:30,240 --> 00:04:33,840
nor nine or three like we have to keep

136
00:04:32,560 --> 00:04:35,360
adapting so how do you how do you

137
00:04:33,840 --> 00:04:37,280
maintain a minimal system

138
00:04:35,360 --> 00:04:39,199
as we go forward in time and i thought

139
00:04:37,280 --> 00:04:42,479
about this and and i understand

140
00:04:39,199 --> 00:04:43,840
history as as a dialectic process right

141
00:04:42,479 --> 00:04:44,800
you have you have tensions between

142
00:04:43,840 --> 00:04:46,880
things

143
00:04:44,800 --> 00:04:48,800
and when you resolve these tensions

144
00:04:46,880 --> 00:04:50,400
you're not ping-pong back and forth

145
00:04:48,800 --> 00:04:53,680
between stability

146
00:04:50,400 --> 00:04:55,758
and change or between minimalism and

147
00:04:53,680 --> 00:04:57,040
complete you know everything's included

148
00:04:55,759 --> 00:04:58,080
when you resolve these tensions you get

149
00:04:57,040 --> 00:04:59,040
to another state and you have new

150
00:04:58,080 --> 00:05:01,520
tensions

151
00:04:59,040 --> 00:05:02,880
right and and these tensions drive

152
00:05:01,520 --> 00:05:06,240
forward the

153
00:05:02,880 --> 00:05:08,159
the motor of history and as marx says uh

154
00:05:06,240 --> 00:05:09,840
men make their own history and you know

155
00:05:08,160 --> 00:05:10,880
language of the day but they do not make

156
00:05:09,840 --> 00:05:12,719
it as they please they do not make it

157
00:05:10,880 --> 00:05:14,719
under self-circum selected circumstances

158
00:05:12,720 --> 00:05:16,080
but under circumstances existing already

159
00:05:14,720 --> 00:05:18,000
right we're always building on things

160
00:05:16,080 --> 00:05:20,080
before we're never creating new minimal

161
00:05:18,000 --> 00:05:21,520
things out of nothing we're always

162
00:05:20,080 --> 00:05:22,719
advancing from where we find ourselves

163
00:05:21,520 --> 00:05:24,080
and then once we've advanced we find

164
00:05:22,720 --> 00:05:24,720
ourselves somewhere else and so we have

165
00:05:24,080 --> 00:05:28,000
to move

166
00:05:24,720 --> 00:05:29,520
and keep on moving on and so how do we

167
00:05:28,000 --> 00:05:30,880
remain minimal over time and in the

168
00:05:29,520 --> 00:05:32,400
context of guile like what are the

169
00:05:30,880 --> 00:05:35,199
tensions that operate

170
00:05:32,400 --> 00:05:36,960
and how do these tensions uh kind of

171
00:05:35,199 --> 00:05:39,280
turn the crank of history like

172
00:05:36,960 --> 00:05:40,320
like moving guile forward to a a newer

173
00:05:39,280 --> 00:05:42,239
and newer state

174
00:05:40,320 --> 00:05:43,680
in time right and and is it going

175
00:05:42,240 --> 00:05:44,320
forward or backwards but it's certainly

176
00:05:43,680 --> 00:05:46,479
like

177
00:05:44,320 --> 00:05:47,520
uh developing and so i i see the

178
00:05:46,479 --> 00:05:49,039
tensions as like

179
00:05:47,520 --> 00:05:51,400
the problems in the world like the web

180
00:05:49,039 --> 00:05:54,639
was not a thing in

181
00:05:51,400 --> 00:05:56,479
1936 or whatever uh

182
00:05:54,639 --> 00:05:57,919
between like having something stable

183
00:05:56,479 --> 00:05:59,280
that you want to build on versus having

184
00:05:57,919 --> 00:06:00,159
something that can change and adapt to

185
00:05:59,280 --> 00:06:01,840
new

186
00:06:00,160 --> 00:06:03,840
to new circumstances or can improve

187
00:06:01,840 --> 00:06:04,960
itself um

188
00:06:03,840 --> 00:06:07,198
there are a number of other tensions in

189
00:06:04,960 --> 00:06:07,680
here and so i'm in this talk i want to

190
00:06:07,199 --> 00:06:11,280
give

191
00:06:07,680 --> 00:06:13,840
some observations that i i have on um

192
00:06:11,280 --> 00:06:15,039
on how these tensions operate and pull

193
00:06:13,840 --> 00:06:18,840
pull language uh

194
00:06:15,039 --> 00:06:21,280
forward so one of the one of the

195
00:06:18,840 --> 00:06:24,560
um lessons i've taken from

196
00:06:21,280 --> 00:06:27,599
guile is is that uh

197
00:06:24,560 --> 00:06:29,840
as far as an optimization pattern you're

198
00:06:27,600 --> 00:06:31,199
often you think about where you are and

199
00:06:29,840 --> 00:06:32,479
how can i get immediately better right

200
00:06:31,199 --> 00:06:32,880
you take a step in that direction this

201
00:06:32,479 --> 00:06:35,359
is

202
00:06:32,880 --> 00:06:36,400
hill climbing and it's widely known that

203
00:06:35,360 --> 00:06:39,759
you're not going to find

204
00:06:36,400 --> 00:06:41,198
necessarily a global maximum if hill

205
00:06:39,759 --> 00:06:43,840
climbing is your approach for language

206
00:06:41,199 --> 00:06:46,080
development or for

207
00:06:43,840 --> 00:06:47,440
for program maintenance or or anything

208
00:06:46,080 --> 00:06:48,560
because you could you could climb and

209
00:06:47,440 --> 00:06:50,240
you could reach one hill but there could

210
00:06:48,560 --> 00:06:52,000
be other hills that you don't know of

211
00:06:50,240 --> 00:06:53,360
and and if you knew of them obviously

212
00:06:52,000 --> 00:06:54,400
you'd be on them already but you just

213
00:06:53,360 --> 00:06:56,720
can't know because

214
00:06:54,400 --> 00:06:58,560
you only see what's directly around you

215
00:06:56,720 --> 00:07:00,800
and so like as a language evolution

216
00:06:58,560 --> 00:07:03,599
strategy i find hill climbing is

217
00:07:00,800 --> 00:07:04,560
is a recipe for death in the end because

218
00:07:03,599 --> 00:07:06,159
uh

219
00:07:04,560 --> 00:07:08,160
if you ever reach that maximum do you

220
00:07:06,160 --> 00:07:09,919
have nowhere to go right you're just

221
00:07:08,160 --> 00:07:11,759
you're stopped like why would you step

222
00:07:09,919 --> 00:07:15,039
down in anywhere that's worse

223
00:07:11,759 --> 00:07:17,680
um and so i found that's where gail was

224
00:07:15,039 --> 00:07:19,520
15 years ago or so we had optimized and

225
00:07:17,680 --> 00:07:22,800
optimized and optimized to be

226
00:07:19,520 --> 00:07:26,000
a scheme that you would link to from c

227
00:07:22,800 --> 00:07:29,840
and uh we got to what we thought was

228
00:07:26,000 --> 00:07:31,360
a good position but it had a lot of uh

229
00:07:29,840 --> 00:07:31,840
had a lot of downsides that we couldn't

230
00:07:31,360 --> 00:07:34,880
reach

231
00:07:31,840 --> 00:07:36,239
through uh incremental steps to getting

232
00:07:34,880 --> 00:07:39,680
somewhere else

233
00:07:36,240 --> 00:07:40,639
so uh wild hill climbing has its places

234
00:07:39,680 --> 00:07:42,880
it's not

235
00:07:40,639 --> 00:07:44,000
it's not enough right another thing i

236
00:07:42,880 --> 00:07:46,479
learned in guile is that

237
00:07:44,000 --> 00:07:47,360
uh users stay with you unless you push

238
00:07:46,479 --> 00:07:49,440
them away

239
00:07:47,360 --> 00:07:50,960
right just out of inertia no they'll you

240
00:07:49,440 --> 00:07:52,319
know bleed off through time right

241
00:07:50,960 --> 00:07:54,719
uh you'll get new users through other

242
00:07:52,319 --> 00:07:56,879
processes possibly uh

243
00:07:54,720 --> 00:07:59,120
but the the real you know exodus events

244
00:07:56,879 --> 00:08:02,080
are when you break things for users

245
00:07:59,120 --> 00:08:03,440
right and and the the way to break

246
00:08:02,080 --> 00:08:04,400
things for users is to change your

247
00:08:03,440 --> 00:08:05,919
interface

248
00:08:04,400 --> 00:08:08,318
and there are many kinds of interfaces

249
00:08:05,919 --> 00:08:09,198
like it's the eye and api and cli and

250
00:08:08,319 --> 00:08:10,479
abi

251
00:08:09,199 --> 00:08:12,319
right whenever you change any of these

252
00:08:10,479 --> 00:08:13,120
things you're going to lose some of your

253
00:08:12,319 --> 00:08:16,080
users

254
00:08:13,120 --> 00:08:18,080
right so one one lesson here can be

255
00:08:16,080 --> 00:08:21,440
don't change right never change

256
00:08:18,080 --> 00:08:23,758
which is not this is a way to

257
00:08:21,440 --> 00:08:25,520
move forward with your users obviously

258
00:08:23,759 --> 00:08:26,160
not the whole thing but if we take some

259
00:08:25,520 --> 00:08:29,280
examples

260
00:08:26,160 --> 00:08:31,919
um python 3 obviously

261
00:08:29,280 --> 00:08:33,439
has some some some problems in this

262
00:08:31,919 --> 00:08:35,039
nature that you know i'm not

263
00:08:33,440 --> 00:08:37,519
expert on but i certainly know they

264
00:08:35,039 --> 00:08:38,640
exist kyle had a thing in 1.8 called

265
00:08:37,519 --> 00:08:40,880
local eval

266
00:08:38,640 --> 00:08:42,479
where you could evaluate an expression

267
00:08:40,880 --> 00:08:45,519
within a lexical context

268
00:08:42,479 --> 00:08:47,279
at runtime we took it away because we

269
00:08:45,519 --> 00:08:49,120
thought that when we added a compiler

270
00:08:47,279 --> 00:08:50,480
that we couldn't support this feature

271
00:08:49,120 --> 00:08:51,680
but it turned out to be so important

272
00:08:50,480 --> 00:08:52,560
that we had to figure out how to add it

273
00:08:51,680 --> 00:08:54,079
back

274
00:08:52,560 --> 00:08:55,839
otherwise we're just going to lose some

275
00:08:54,080 --> 00:08:59,200
important users

276
00:08:55,839 --> 00:09:00,160
we have some there's some scheme itself

277
00:08:59,200 --> 00:09:02,000
is evaluating

278
00:09:00,160 --> 00:09:03,199
is evolving in different ways and one of

279
00:09:02,000 --> 00:09:06,080
the evolutions was a

280
00:09:03,200 --> 00:09:08,080
standard call called r6rs which includes

281
00:09:06,080 --> 00:09:09,600
some syntax which conflicts with old

282
00:09:08,080 --> 00:09:12,480
dial syntax and we don't really have a

283
00:09:09,600 --> 00:09:14,959
good way to deprecate syntax

284
00:09:12,480 --> 00:09:15,519
so we don't have the r6rs syntax on by

285
00:09:14,959 --> 00:09:18,239
default

286
00:09:15,519 --> 00:09:19,040
right now and finally you would not

287
00:09:18,240 --> 00:09:22,480
design

288
00:09:19,040 --> 00:09:24,480
guile today with mutable pairs

289
00:09:22,480 --> 00:09:25,360
with you wouldn't design it with set

290
00:09:24,480 --> 00:09:27,040
right you wouldn't design it with

291
00:09:25,360 --> 00:09:28,800
mutable variables that would not be

292
00:09:27,040 --> 00:09:30,640
what you would design it's not it's not

293
00:09:28,800 --> 00:09:31,439
necessary there are other ways to do it

294
00:09:30,640 --> 00:09:33,600
they're

295
00:09:31,440 --> 00:09:35,200
much more clear but we have them around

296
00:09:33,600 --> 00:09:38,240
because if we took them away

297
00:09:35,200 --> 00:09:39,920
our users would go away um but at the

298
00:09:38,240 --> 00:09:41,519
same time you you can't keep all your

299
00:09:39,920 --> 00:09:44,719
users right like

300
00:09:41,519 --> 00:09:46,000
like you're going to change right so

301
00:09:44,720 --> 00:09:49,040
if you can't take the the previous

302
00:09:46,000 --> 00:09:51,519
strategy of never changing anything

303
00:09:49,040 --> 00:09:52,880
then you have to say well okay sometimes

304
00:09:51,519 --> 00:09:53,760
you have to lose some users and so you

305
00:09:52,880 --> 00:09:55,360
need to know

306
00:09:53,760 --> 00:09:57,040
when that's okay and it's hard to know

307
00:09:55,360 --> 00:09:57,839
right we've we've made mistakes in the

308
00:09:57,040 --> 00:10:00,160
past

309
00:09:57,839 --> 00:10:01,839
um but if you don't change it all you

310
00:10:00,160 --> 00:10:04,160
will reach one of these local maxima

311
00:10:01,839 --> 00:10:04,959
and you will your project will be dead

312
00:10:04,160 --> 00:10:06,880
right

313
00:10:04,959 --> 00:10:08,239
um so for example we switched in guile

314
00:10:06,880 --> 00:10:10,959
from

315
00:10:08,240 --> 00:10:12,800
in 1.8 we had this thing where macros

316
00:10:10,959 --> 00:10:13,680
which are user extensions to program

317
00:10:12,800 --> 00:10:15,359
syntax

318
00:10:13,680 --> 00:10:17,359
would be expanded the first time a bit

319
00:10:15,360 --> 00:10:20,720
of code was evaluated

320
00:10:17,360 --> 00:10:22,240
and this it had a number of downsides

321
00:10:20,720 --> 00:10:24,079
and we switched to a

322
00:10:22,240 --> 00:10:25,519
uh an approach where the whole program

323
00:10:24,079 --> 00:10:27,680
was expanded before

324
00:10:25,519 --> 00:10:29,040
anything was evaluated well you could

325
00:10:27,680 --> 00:10:29,680
evaluate during expansion but that was a

326
00:10:29,040 --> 00:10:30,880
separate

327
00:10:29,680 --> 00:10:32,800
separate concern and that's when we

328
00:10:30,880 --> 00:10:35,839
switched to p syntax and so that

329
00:10:32,800 --> 00:10:38,959
if you have side effects uh when you

330
00:10:35,839 --> 00:10:40,800
are expanding in your macros then they

331
00:10:38,959 --> 00:10:42,560
run at a different time

332
00:10:40,800 --> 00:10:44,399
when you do expansion eagerly versus

333
00:10:42,560 --> 00:10:45,439
lazily and we switched to this eager

334
00:10:44,399 --> 00:10:47,279
expansion

335
00:10:45,440 --> 00:10:48,640
and it broke some things for people but

336
00:10:47,279 --> 00:10:50,079
i think the benefits were enough that

337
00:10:48,640 --> 00:10:51,279
like we got a more expressive system

338
00:10:50,079 --> 00:10:52,880
that we were able to

339
00:10:51,279 --> 00:10:55,360
uh recoup the users on the other side

340
00:10:52,880 --> 00:10:56,640
but it was pain uh similarly we we

341
00:10:55,360 --> 00:10:57,279
switched uh garbage collector we

342
00:10:56,640 --> 00:10:59,040
currently use

343
00:10:57,279 --> 00:11:00,720
the bone collector which is pretty weird

344
00:10:59,040 --> 00:11:03,680
for a modern language

345
00:11:00,720 --> 00:11:04,079
but it works really well for some uses

346
00:11:03,680 --> 00:11:07,359
one

347
00:11:04,079 --> 00:11:07,359
one issue is that it runs

348
00:11:07,760 --> 00:11:10,880
generally you don't need to tell it how

349
00:11:09,360 --> 00:11:12,399
to trace your object graph

350
00:11:10,880 --> 00:11:14,320
but when you do need to tell it how to

351
00:11:12,399 --> 00:11:16,880
do it it's very tricky

352
00:11:14,320 --> 00:11:18,480
and so users which had used this api

353
00:11:16,880 --> 00:11:20,079
that allowed them to

354
00:11:18,480 --> 00:11:22,240
augment the garbage collector's notion

355
00:11:20,079 --> 00:11:23,599
of what is live had a really hard

356
00:11:22,240 --> 00:11:25,760
problem and still have a really hard

357
00:11:23,600 --> 00:11:26,320
problem uh migrating off of kyle 1.8

358
00:11:25,760 --> 00:11:28,720
which is

359
00:11:26,320 --> 00:11:29,519
had its last release uh 12 years ago or

360
00:11:28,720 --> 00:11:33,120
so

361
00:11:29,519 --> 00:11:34,079
um the introduction of a notion of

362
00:11:33,120 --> 00:11:37,040
compile time

363
00:11:34,079 --> 00:11:38,399
is in a way runs against minimalism in

364
00:11:37,040 --> 00:11:41,040
some ways

365
00:11:38,399 --> 00:11:42,240
and it it complicates things for users

366
00:11:41,040 --> 00:11:44,719
but uh

367
00:11:42,240 --> 00:11:46,640
we did that and also we did the python 3

368
00:11:44,720 --> 00:11:48,240
thing more or less

369
00:11:46,640 --> 00:11:50,319
more or less of using unicode for

370
00:11:48,240 --> 00:11:51,279
strings and i think it was the right

371
00:11:50,320 --> 00:11:54,480
choice but it was

372
00:11:51,279 --> 00:11:54,480
it was painful for some people

373
00:11:54,959 --> 00:12:00,880
so so every interface you have is costs

374
00:11:58,399 --> 00:12:01,839
right as as maintainer and and i hope

375
00:12:00,880 --> 00:12:03,439
that these lessons

376
00:12:01,839 --> 00:12:05,600
i i speak from a guy perspective but i

377
00:12:03,440 --> 00:12:07,040
think that every library author every

378
00:12:05,600 --> 00:12:08,560
program author creates a language of

379
00:12:07,040 --> 00:12:11,439
some sort for their users

380
00:12:08,560 --> 00:12:12,000
uh so the things i say i i think should

381
00:12:11,440 --> 00:12:15,920
apply for

382
00:12:12,000 --> 00:12:18,639
for other programs as well that um

383
00:12:15,920 --> 00:12:20,000
say in gail we have a binary api and so

384
00:12:18,639 --> 00:12:20,720
the easiest way to do this is just to

385
00:12:20,000 --> 00:12:23,200
minimize your

386
00:12:20,720 --> 00:12:24,560
entire uh interface so for example go

387
00:12:23,200 --> 00:12:26,399
does not have a dynamic linking

388
00:12:24,560 --> 00:12:27,199
interface because it statically compiles

389
00:12:26,399 --> 00:12:29,279
it's a great

390
00:12:27,200 --> 00:12:30,480
radical solution of this i think geeks

391
00:12:29,279 --> 00:12:32,160
has a monorepo

392
00:12:30,480 --> 00:12:33,519
right monorepos are also a kind of great

393
00:12:32,160 --> 00:12:35,040
solution because you don't have

394
00:12:33,519 --> 00:12:37,200
too much of an interface between what

395
00:12:35,040 --> 00:12:38,800
you work on and and separate things to

396
00:12:37,200 --> 00:12:40,720
develop at different paces

397
00:12:38,800 --> 00:12:42,560
recently we released cal 3.0 and i

398
00:12:40,720 --> 00:12:44,480
forgot to make some functions exported

399
00:12:42,560 --> 00:12:45,680
in the c api and now i get bug reports

400
00:12:44,480 --> 00:12:48,240
and i have to add them back

401
00:12:45,680 --> 00:12:49,199
there's unintentional change but uh you

402
00:12:48,240 --> 00:12:50,480
know

403
00:12:49,200 --> 00:12:52,079
this thing that was just out there that

404
00:12:50,480 --> 00:12:53,680
was providing no value i accidentally

405
00:12:52,079 --> 00:12:54,880
broke it and now i have to do some work

406
00:12:53,680 --> 00:12:57,920
i don't like doing work

407
00:12:54,880 --> 00:12:59,279
so anyway the the

408
00:12:57,920 --> 00:13:01,279
the pattern we have in guile for

409
00:12:59,279 --> 00:13:02,560
allowing us to change right allowing us

410
00:13:01,279 --> 00:13:04,000
to evolve and change

411
00:13:02,560 --> 00:13:06,000
is parallel installation and this

412
00:13:04,000 --> 00:13:08,079
applies everywhere that we we change

413
00:13:06,000 --> 00:13:09,120
right this is you know the pattern so

414
00:13:08,079 --> 00:13:12,160
for example

415
00:13:09,120 --> 00:13:13,760
uh we have libguile dash 2.0.0 which you

416
00:13:12,160 --> 00:13:15,120
can install in parallel on your system

417
00:13:13,760 --> 00:13:17,760
with lipcoil

418
00:13:15,120 --> 00:13:19,600
3.0 and this philosophy was outlined

419
00:13:17,760 --> 00:13:21,040
almost 20 years ago by havoc pennington

420
00:13:19,600 --> 00:13:22,480
and this great article if you haven't

421
00:13:21,040 --> 00:13:23,439
read it yet i definitely suggest you

422
00:13:22,480 --> 00:13:25,440
take a look at it

423
00:13:23,440 --> 00:13:26,560
um and and the correlation of this is

424
00:13:25,440 --> 00:13:28,399
that if you

425
00:13:26,560 --> 00:13:29,760
you cannot change the meaning of any

426
00:13:28,399 --> 00:13:31,279
existing interface

427
00:13:29,760 --> 00:13:32,959
right you can extend the meaning you can

428
00:13:31,279 --> 00:13:33,600
add new meaning it doesn't conflict with

429
00:13:32,959 --> 00:13:35,040
old meaning

430
00:13:33,600 --> 00:13:36,880
but if you ever change the meaning of

431
00:13:35,040 --> 00:13:38,399
something you need to

432
00:13:36,880 --> 00:13:40,800
add a new name like you need to give it

433
00:13:38,399 --> 00:13:41,519
a new name uh whether it's gal 3.0

434
00:13:40,800 --> 00:13:43,120
versus

435
00:13:41,519 --> 00:13:44,880
gal2 but in the case like we had a

436
00:13:43,120 --> 00:13:47,199
function called make struct

437
00:13:44,880 --> 00:13:48,720
that took this extra argument to support

438
00:13:47,199 --> 00:13:49,040
something that was deprecated there's a

439
00:13:48,720 --> 00:13:51,120
very

440
00:13:49,040 --> 00:13:52,719
low level facility we weren't able to

441
00:13:51,120 --> 00:13:53,040
actually adapt this function so i had to

442
00:13:52,720 --> 00:13:54,560
give

443
00:13:53,040 --> 00:13:56,639
make a replacement called make struck no

444
00:13:54,560 --> 00:13:58,638
tail at some point i'll deprecate

445
00:13:56,639 --> 00:14:00,800
make structs and and maybe swap them

446
00:13:58,639 --> 00:14:01,600
back but i it takes a long time to do

447
00:14:00,800 --> 00:14:03,359
this

448
00:14:01,600 --> 00:14:04,480
additionally we have like m4 macros that

449
00:14:03,360 --> 00:14:06,160
can allow you to say you know actually

450
00:14:04,480 --> 00:14:08,160
don't move me to gal three right keep me

451
00:14:06,160 --> 00:14:09,199
on guile 2.2 right because i can't

452
00:14:08,160 --> 00:14:11,680
i don't have time to deal with this

453
00:14:09,199 --> 00:14:13,120
right now uh and as a counter example

454
00:14:11,680 --> 00:14:14,560
lib tool does not help us at all

455
00:14:13,120 --> 00:14:16,320
right i i don't know what it gives you

456
00:14:14,560 --> 00:14:17,920
the lib tool versioning i it's never

457
00:14:16,320 --> 00:14:19,440
solved any problem for me

458
00:14:17,920 --> 00:14:21,120
i mean maybe it's good for distros but

459
00:14:19,440 --> 00:14:24,959
it doesn't help me evolve kyle

460
00:14:21,120 --> 00:14:26,880
um we could talk about that

461
00:14:24,959 --> 00:14:28,160
the thing that facilitates change though

462
00:14:26,880 --> 00:14:29,439
is so you add a new name

463
00:14:28,160 --> 00:14:31,839
right you want people to migrate to the

464
00:14:29,440 --> 00:14:33,680
new name uh our pattern that we use here

465
00:14:31,839 --> 00:14:35,199
is deprecation and it applies

466
00:14:33,680 --> 00:14:37,359
everywhere on the c api you can add

467
00:14:35,199 --> 00:14:40,240
attribute deprecated to functions

468
00:14:37,360 --> 00:14:41,839
types uh variables and and you can give

469
00:14:40,240 --> 00:14:42,880
a message when you do this to say please

470
00:14:41,839 --> 00:14:44,720
migrate to this

471
00:14:42,880 --> 00:14:46,480
so when the users who are capable of

472
00:14:44,720 --> 00:14:48,079
making this change compile this

473
00:14:46,480 --> 00:14:49,199
uh they see this message like oh man

474
00:14:48,079 --> 00:14:50,319
it's giving me all these warnings you

475
00:14:49,199 --> 00:14:52,240
know i gotta

476
00:14:50,320 --> 00:14:53,600
get on this if they decide to switch to

477
00:14:52,240 --> 00:14:55,360
the new api right um

478
00:14:53,600 --> 00:14:57,040
you have to give them time we have this

479
00:14:55,360 --> 00:14:59,199
also in in scheme

480
00:14:57,040 --> 00:15:00,399
uh which if you run your program at the

481
00:14:59,199 --> 00:15:01,519
end it might print out you use some

482
00:15:00,399 --> 00:15:03,040
dedicated features please set an

483
00:15:01,519 --> 00:15:04,720
environment variable to let you

484
00:15:03,040 --> 00:15:06,319
tell us we'll tell you more about these

485
00:15:04,720 --> 00:15:09,040
features when they come

486
00:15:06,320 --> 00:15:10,639
uh and and we have facilities to kind of

487
00:15:09,040 --> 00:15:12,160
if deaf them out if they're

488
00:15:10,639 --> 00:15:13,680
if you're running in a configuration

489
00:15:12,160 --> 00:15:14,560
where you disable deprecation because

490
00:15:13,680 --> 00:15:16,638
you want to know

491
00:15:14,560 --> 00:15:18,800
is my program compatible with the future

492
00:15:16,639 --> 00:15:22,079
can i migrate at my own pace

493
00:15:18,800 --> 00:15:24,240
um so that gets to our arch pattern of

494
00:15:22,079 --> 00:15:25,599
maintaining minimality which is okay you

495
00:15:24,240 --> 00:15:27,279
need to change something

496
00:15:25,600 --> 00:15:28,800
you replace it with something new you

497
00:15:27,279 --> 00:15:30,480
deprecate the old thing and

498
00:15:28,800 --> 00:15:31,758
ask people to migrate over and then

499
00:15:30,480 --> 00:15:33,680
eventually remove and remove is

500
00:15:31,759 --> 00:15:35,759
important because otherwise

501
00:15:33,680 --> 00:15:36,800
you're maximal you're not minimal right

502
00:15:35,759 --> 00:15:38,639
uh so

503
00:15:36,800 --> 00:15:40,000
and this allows us to change anything

504
00:15:38,639 --> 00:15:41,440
and and the only

505
00:15:40,000 --> 00:15:43,040
question here is how long do we have to

506
00:15:41,440 --> 00:15:45,360
keep something deprecated

507
00:15:43,040 --> 00:15:47,199
uh and for some things they they might

508
00:15:45,360 --> 00:15:49,040
stay deprecated for 10 years

509
00:15:47,199 --> 00:15:51,279
uh it depends on how active your your

510
00:15:49,040 --> 00:15:53,680
user community is like how

511
00:15:51,279 --> 00:15:55,839
how what what their change philosophy is

512
00:15:53,680 --> 00:15:57,040
uh guile coming from a kind of old uh

513
00:15:55,839 --> 00:15:58,480
gnu perspective

514
00:15:57,040 --> 00:16:00,880
we're definitely starting from like oh

515
00:15:58,480 --> 00:16:03,040
don't change things uh point of view

516
00:16:00,880 --> 00:16:04,399
um but generally for for gal interfaces

517
00:16:03,040 --> 00:16:06,399
we'll we'll go

518
00:16:04,399 --> 00:16:08,639
we'll deprecate something and let's say

519
00:16:06,399 --> 00:16:10,320
we deprecate in 3.0

520
00:16:08,639 --> 00:16:11,839
when 3.2 comes out we'll remove the

521
00:16:10,320 --> 00:16:13,680
deprecated interface so

522
00:16:11,839 --> 00:16:15,040
you can only migrate on to 3.2 which

523
00:16:13,680 --> 00:16:16,638
presumably provides you with better

524
00:16:15,040 --> 00:16:19,199
things once you remove the

525
00:16:16,639 --> 00:16:20,800
old thing so make struct is still around

526
00:16:19,199 --> 00:16:23,758
with this crappy interface

527
00:16:20,800 --> 00:16:25,839
we uh we just migrated to c99 i'm so

528
00:16:23,759 --> 00:16:29,519
ashamed to admit it

529
00:16:25,839 --> 00:16:31,600
off of c89 yeah so we had uh like

530
00:16:29,519 --> 00:16:33,519
defines for un8 that are now obviously

531
00:16:31,600 --> 00:16:36,639
replaced by standard int

532
00:16:33,519 --> 00:16:36,639
now from 20 years ago

533
00:16:36,800 --> 00:16:39,439
this thing is still in guile but now it

534
00:16:38,320 --> 00:16:41,360
gives you a deprecation warning and

535
00:16:39,440 --> 00:16:42,720
we'll remove it next time

536
00:16:41,360 --> 00:16:44,560
and sometimes we don't succeed maybe the

537
00:16:42,720 --> 00:16:46,240
replacement didn't take into account the

538
00:16:44,560 --> 00:16:47,680
use cases of users so i added something

539
00:16:46,240 --> 00:16:49,199
called foreign objects to replace a

540
00:16:47,680 --> 00:16:51,199
facility

541
00:16:49,199 --> 00:16:52,959
in guile where you can extend guile with

542
00:16:51,199 --> 00:16:55,040
new types that are backed by some c

543
00:16:52,959 --> 00:16:56,239
implementation and it hasn't been a real

544
00:16:55,040 --> 00:16:57,759
success so i don't know if we'll be able

545
00:16:56,240 --> 00:16:59,199
to actually migrate off or

546
00:16:57,759 --> 00:17:01,440
or if i'm gonna have to remove foreign

547
00:16:59,199 --> 00:17:05,199
objects or i don't know exactly

548
00:17:01,440 --> 00:17:06,959
anyway so once you once you change

549
00:17:05,199 --> 00:17:08,559
you you reach a new stable point so for

550
00:17:06,959 --> 00:17:10,559
me unstable series

551
00:17:08,559 --> 00:17:11,678
and stable series are also part of this

552
00:17:10,559 --> 00:17:14,639
pattern like

553
00:17:11,679 --> 00:17:15,839
uh you get to this the stable point 3.0

554
00:17:14,640 --> 00:17:18,000
right i haven't looked at the mailing

555
00:17:15,839 --> 00:17:20,079
list since 3.0 came out because

556
00:17:18,000 --> 00:17:22,240
you know i i can't change some things

557
00:17:20,079 --> 00:17:24,399
you know i'll have to fix the bugs but

558
00:17:22,240 --> 00:17:26,480
but users are going to be able to rely

559
00:17:24,400 --> 00:17:27,679
on 3.0 being the same for some number of

560
00:17:26,480 --> 00:17:29,520
years at this point

561
00:17:27,679 --> 00:17:30,960
um i also didn't look at mailings

562
00:17:29,520 --> 00:17:35,440
because i went and holiday but

563
00:17:30,960 --> 00:17:37,760
unrelated um that

564
00:17:35,440 --> 00:17:39,600
in a stable series you yourself have

565
00:17:37,760 --> 00:17:41,760
dependencies and they must share your

566
00:17:39,600 --> 00:17:43,199
your same ideals with regards to

567
00:17:41,760 --> 00:17:45,280
stability and change

568
00:17:43,200 --> 00:17:48,080
uh so we can't depend on anything that

569
00:17:45,280 --> 00:17:49,520
isn't isn't as stable as gail's goals

570
00:17:48,080 --> 00:17:51,760
whereas if you're like a new minimal

571
00:17:49,520 --> 00:17:53,360
language that comes out you know in 2020

572
00:17:51,760 --> 00:17:55,360
you might be able to depend on stuff

573
00:17:53,360 --> 00:17:57,760
it's very you know fast changing because

574
00:17:55,360 --> 00:17:58,479
you haven't built up the user users yet

575
00:17:57,760 --> 00:18:00,080
to

576
00:17:58,480 --> 00:18:01,520
be change averse they're still active in

577
00:18:00,080 --> 00:18:02,879
your programs and if you change

578
00:18:01,520 --> 00:18:03,679
something in six months or 12 months

579
00:18:02,880 --> 00:18:05,120
then

580
00:18:03,679 --> 00:18:06,720
maybe you can take your users with you

581
00:18:05,120 --> 00:18:08,239
but as you get older um

582
00:18:06,720 --> 00:18:10,400
we definitely need more more stability

583
00:18:08,240 --> 00:18:11,120
so we we only depend on very very stable

584
00:18:10,400 --> 00:18:13,280
things

585
00:18:11,120 --> 00:18:15,039
uh with the exception of gnu lib which

586
00:18:13,280 --> 00:18:16,399
is one of these include only libraries

587
00:18:15,039 --> 00:18:18,879
which has helped us to

588
00:18:16,400 --> 00:18:20,960
to migrate forward without much risk of

589
00:18:18,880 --> 00:18:24,880
change there

590
00:18:20,960 --> 00:18:27,760
right so um the other thing is that

591
00:18:24,880 --> 00:18:28,960
as a author of a language you know be

592
00:18:27,760 --> 00:18:30,799
that language library or

593
00:18:28,960 --> 00:18:32,559
guile or whatever you're going to get

594
00:18:30,799 --> 00:18:34,559
pressures for users

595
00:18:32,559 --> 00:18:35,678
to have for you to add things right to

596
00:18:34,559 --> 00:18:36,559
make your language bigger to add

597
00:18:35,679 --> 00:18:38,799
features

598
00:18:36,559 --> 00:18:40,000
or what have you and then guile being

599
00:18:38,799 --> 00:18:42,799
based on scheme

600
00:18:40,000 --> 00:18:44,880
i found that it's been already really

601
00:18:42,799 --> 00:18:47,120
good that we empower our users that the

602
00:18:44,880 --> 00:18:48,640
the the language constructs they create

603
00:18:47,120 --> 00:18:49,840
sit on a first class level with the

604
00:18:48,640 --> 00:18:52,640
language constructs

605
00:18:49,840 --> 00:18:53,280
that are defined in guile uh so users

606
00:18:52,640 --> 00:18:55,679
obviously can

607
00:18:53,280 --> 00:18:57,200
extend dial with modules and such but i

608
00:18:55,679 --> 00:18:58,320
think the the syntax question is really

609
00:18:57,200 --> 00:19:00,400
important as well

610
00:18:58,320 --> 00:19:01,840
we we all know the the the problems that

611
00:19:00,400 --> 00:19:03,280
come in extending the syntax of

612
00:19:01,840 --> 00:19:04,240
javascript or python or something like

613
00:19:03,280 --> 00:19:06,720
this because

614
00:19:04,240 --> 00:19:08,000
uh syntax keywords are a first class

615
00:19:06,720 --> 00:19:09,200
part of the language that users don't

616
00:19:08,000 --> 00:19:11,120
really have access to

617
00:19:09,200 --> 00:19:12,240
whereas in scheme we're able to evolve

618
00:19:11,120 --> 00:19:14,559
this uh

619
00:19:12,240 --> 00:19:17,520
evolve the syntax without my permission

620
00:19:14,559 --> 00:19:19,440
my permission as galco maintainer

621
00:19:17,520 --> 00:19:21,280
the other thing is that uh often you

622
00:19:19,440 --> 00:19:23,440
have a maybe a performance difference

623
00:19:21,280 --> 00:19:24,480
especially in language implementations a

624
00:19:23,440 --> 00:19:26,960
user defines

625
00:19:24,480 --> 00:19:28,160
some facility it doesn't perform as well

626
00:19:26,960 --> 00:19:30,240
as something implemented in guile

627
00:19:28,160 --> 00:19:32,000
because guile has access to all the

628
00:19:30,240 --> 00:19:33,280
speed you know shortcuts and things like

629
00:19:32,000 --> 00:19:34,240
this and this is a real problem we had

630
00:19:33,280 --> 00:19:38,160
in 1.8

631
00:19:34,240 --> 00:19:41,360
it pushed users towards a a uh

632
00:19:38,160 --> 00:19:42,240
overuse of c extensions it added to our

633
00:19:41,360 --> 00:19:43,600
interface there

634
00:19:42,240 --> 00:19:45,600
we still have a lot of that interface

635
00:19:43,600 --> 00:19:48,719
that we still have to maintain

636
00:19:45,600 --> 00:19:50,719
and having made this leap

637
00:19:48,720 --> 00:19:52,960
to have a better compiler and runtime

638
00:19:50,720 --> 00:19:55,120
system users can now define things in

639
00:19:52,960 --> 00:19:58,320
scheme that are

640
00:19:55,120 --> 00:20:00,159
perf acceptable generally so

641
00:19:58,320 --> 00:20:02,480
so my lesson here is that if you empower

642
00:20:00,160 --> 00:20:04,240
your users to create things that sit on

643
00:20:02,480 --> 00:20:05,520
as peers to the facilities defined in

644
00:20:04,240 --> 00:20:07,200
the language then

645
00:20:05,520 --> 00:20:09,280
they need less from you which is good

646
00:20:07,200 --> 00:20:11,360
because i don't want to do things

647
00:20:09,280 --> 00:20:13,120
um speaking of not wanting to do things

648
00:20:11,360 --> 00:20:14,879
users come with code

649
00:20:13,120 --> 00:20:16,799
sometimes and they want you to take it

650
00:20:14,880 --> 00:20:19,280
right an extension to

651
00:20:16,799 --> 00:20:21,200
uh an extension to your your software

652
00:20:19,280 --> 00:20:23,039
the software you're responsible for

653
00:20:21,200 --> 00:20:24,559
and this is almost always a burden and

654
00:20:23,039 --> 00:20:26,799
so

655
00:20:24,559 --> 00:20:28,720
so for me i i really prefer this empower

656
00:20:26,799 --> 00:20:29,200
the users uh separate modules sort of

657
00:20:28,720 --> 00:20:30,640
things

658
00:20:29,200 --> 00:20:32,000
except when the the feature is just

659
00:20:30,640 --> 00:20:33,360
quite stable and it's not going to

660
00:20:32,000 --> 00:20:35,200
demand anything of me

661
00:20:33,360 --> 00:20:36,479
but that involves a commitment from the

662
00:20:35,200 --> 00:20:37,840
users as well like

663
00:20:36,480 --> 00:20:39,760
they have to realize that this thing

664
00:20:37,840 --> 00:20:42,559
they're they're adding is stable

665
00:20:39,760 --> 00:20:43,039
or you know participate actively in

666
00:20:42,559 --> 00:20:45,678
guile

667
00:20:43,039 --> 00:20:46,240
maintenance uh so you just need some

668
00:20:45,679 --> 00:20:48,559
some

669
00:20:46,240 --> 00:20:50,000
some agreement there and so some things

670
00:20:48,559 --> 00:20:51,440
we have in guile are in because they're

671
00:20:50,000 --> 00:20:52,080
super stable and some things are out

672
00:20:51,440 --> 00:20:54,159
because

673
00:20:52,080 --> 00:20:55,280
like fibers for example is a lightweight

674
00:20:54,159 --> 00:20:56,720
concurrency facility

675
00:20:55,280 --> 00:20:58,720
i haven't added it to a guy because i

676
00:20:56,720 --> 00:21:00,159
don't know if i

677
00:20:58,720 --> 00:21:02,480
i don't know if it's stable enough i

678
00:21:00,159 --> 00:21:04,640
don't know so right

679
00:21:02,480 --> 00:21:06,320
um just a couple more more things the

680
00:21:04,640 --> 00:21:08,159
the greatest problem we have in gail

681
00:21:06,320 --> 00:21:10,720
right now with regards to evolution

682
00:21:08,159 --> 00:21:12,320
is memory management on the c interface

683
00:21:10,720 --> 00:21:13,360
would be really nice for us to have a

684
00:21:12,320 --> 00:21:15,520
precise

685
00:21:13,360 --> 00:21:17,280
generational garbage collector instead

686
00:21:15,520 --> 00:21:19,679
we use a

687
00:21:17,280 --> 00:21:21,918
sometimes precise sometimes conservative

688
00:21:19,679 --> 00:21:25,440
it details

689
00:21:21,919 --> 00:21:27,600
the bone collector which doesn't offer

690
00:21:25,440 --> 00:21:29,440
bump pointer generational allocation if

691
00:21:27,600 --> 00:21:31,600
you look at the the micro benchmarks the

692
00:21:29,440 --> 00:21:33,840
the way to get the next bump to reach

693
00:21:31,600 --> 00:21:34,959
scheme is to have a good garbage

694
00:21:33,840 --> 00:21:37,520
collector

695
00:21:34,960 --> 00:21:38,400
but it's very difficult on the c level

696
00:21:37,520 --> 00:21:41,039
to

697
00:21:38,400 --> 00:21:42,640
uh have all of your users change this

698
00:21:41,039 --> 00:21:44,158
api in a very fundamental way

699
00:21:42,640 --> 00:21:46,240
i'm not really sure how we're going to

700
00:21:44,159 --> 00:21:47,919
get there gal is not the only language

701
00:21:46,240 --> 00:21:50,799
with these problems even

702
00:21:47,919 --> 00:21:51,679
pipes has issues with regards to when

703
00:21:50,799 --> 00:21:53,360
the delete

704
00:21:51,679 --> 00:21:55,200
finalizer gets called or destructor or

705
00:21:53,360 --> 00:21:56,399
whatever it is in python relative to c

706
00:21:55,200 --> 00:21:58,400
python which where it happens a

707
00:21:56,400 --> 00:22:00,159
different time

708
00:21:58,400 --> 00:22:02,480
and if we look in the future though so

709
00:22:00,159 --> 00:22:03,440
we we're around in the circle like we've

710
00:22:02,480 --> 00:22:05,200
gone from stable

711
00:22:03,440 --> 00:22:06,559
to change and now we're back to stable

712
00:22:05,200 --> 00:22:08,159
again and and

713
00:22:06,559 --> 00:22:09,520
gail's perspective i want to i want to

714
00:22:08,159 --> 00:22:10,559
add another dimension to parallel

715
00:22:09,520 --> 00:22:13,120
installability

716
00:22:10,559 --> 00:22:13,840
users can do most anything they want uh

717
00:22:13,120 --> 00:22:15,918
with

718
00:22:13,840 --> 00:22:18,000
with guile defining new constructs that

719
00:22:15,919 --> 00:22:18,799
are on on a par with with kyle's

720
00:22:18,000 --> 00:22:20,320
constructs

721
00:22:18,799 --> 00:22:21,918
with the exception of whatever language

722
00:22:20,320 --> 00:22:24,559
it is at the top of your file

723
00:22:21,919 --> 00:22:26,400
right at the top of your file it's still

724
00:22:24,559 --> 00:22:28,720
kind of this default guile environment

725
00:22:26,400 --> 00:22:30,080
this default dial syntax and racket has

726
00:22:28,720 --> 00:22:32,000
this really wonderful

727
00:22:30,080 --> 00:22:33,760
uh elegant solution of this which is

728
00:22:32,000 --> 00:22:36,000
called hash lang you just sort of

729
00:22:33,760 --> 00:22:37,360
note what language your file is in at

730
00:22:36,000 --> 00:22:39,039
the top and you can have

731
00:22:37,360 --> 00:22:40,399
pretty significantly different syntaxes

732
00:22:39,039 --> 00:22:42,799
you can have a

733
00:22:40,400 --> 00:22:44,240
more more friendly perhaps approach to

734
00:22:42,799 --> 00:22:45,600
to using libraries so i want to

735
00:22:44,240 --> 00:22:47,840
have that i find that to be parallel

736
00:22:45,600 --> 00:22:49,039
installability for source languages even

737
00:22:47,840 --> 00:22:49,760
source languages that are radically

738
00:22:49,039 --> 00:22:52,640
different than

739
00:22:49,760 --> 00:22:54,000
than scheme and additionally i've been

740
00:22:52,640 --> 00:22:55,520
working in the weeds right i haven't

741
00:22:54,000 --> 00:22:57,679
been working so much on the

742
00:22:55,520 --> 00:22:59,200
on the higher linguistic levels and i i

743
00:22:57,679 --> 00:23:00,720
think racket has

744
00:22:59,200 --> 00:23:02,400
shown a lot of idioms that are really

745
00:23:00,720 --> 00:23:03,520
useful that we would like to sediment

746
00:23:02,400 --> 00:23:07,200
down into gal's

747
00:23:03,520 --> 00:23:09,120
riverbed and so the thing about the the

748
00:23:07,200 --> 00:23:10,720
dialectic is it doesn't advance

749
00:23:09,120 --> 00:23:12,479
guile itself it's still people doing

750
00:23:10,720 --> 00:23:14,080
things and until now it's been me you

751
00:23:12,480 --> 00:23:16,640
know sort of cranking around from

752
00:23:14,080 --> 00:23:18,158
stable release to the development cycle

753
00:23:16,640 --> 00:23:18,640
and then back to stable release and i i

754
00:23:18,159 --> 00:23:19,919
want to

755
00:23:18,640 --> 00:23:22,000
see if i can step back and let other

756
00:23:19,919 --> 00:23:24,880
people uh hold that

757
00:23:22,000 --> 00:23:26,400
uh some more whether that's like i put a

758
00:23:24,880 --> 00:23:27,440
lot of effort into the community or if i

759
00:23:26,400 --> 00:23:28,880
just step back for a year and see what

760
00:23:27,440 --> 00:23:30,080
happens i'm not i'm not sure what what's

761
00:23:28,880 --> 00:23:32,320
going to do it but

762
00:23:30,080 --> 00:23:33,120
one of those things will work uh so yeah

763
00:23:32,320 --> 00:23:36,320
uh that's

764
00:23:33,120 --> 00:23:51,840
that's my thoughts on evolving language

765
00:23:36,320 --> 00:23:51,840
questions welcome

766
00:24:01,039 --> 00:24:07,440
that's a very good question the question

767
00:24:04,080 --> 00:24:10,080
is when is it a good idea to lose users

768
00:24:07,440 --> 00:24:10,480
from from the the selfish perspective of

769
00:24:10,080 --> 00:24:13,120
gail

770
00:24:10,480 --> 00:24:14,159
it's better to lose users if you recoup

771
00:24:13,120 --> 00:24:16,559
more users

772
00:24:14,159 --> 00:24:18,320
than you lost but you don't recoup new

773
00:24:16,559 --> 00:24:20,080
users tomorrow right

774
00:24:18,320 --> 00:24:21,200
it's a it's a function that you expect

775
00:24:20,080 --> 00:24:22,000
that it's going to come in at some point

776
00:24:21,200 --> 00:24:24,640
in time

777
00:24:22,000 --> 00:24:26,640
so is it better if you like you lose 10

778
00:24:24,640 --> 00:24:29,120
of your users but you get

779
00:24:26,640 --> 00:24:31,279
20 more in three years or or does it

780
00:24:29,120 --> 00:24:32,959
need to be six months

781
00:24:31,279 --> 00:24:34,400
it really depends on your goals as far

782
00:24:32,960 --> 00:24:36,799
as your your your growth

783
00:24:34,400 --> 00:24:38,720
right and if you expect to grow a lot

784
00:24:36,799 --> 00:24:41,679
then you can lose all your users

785
00:24:38,720 --> 00:24:43,039
right i think kyle's more on a smaller

786
00:24:41,679 --> 00:24:47,840
curve

787
00:24:43,039 --> 00:24:47,840
upwards i hope yes

788
00:24:54,880 --> 00:24:58,240
the question is is gasol using auto

789
00:24:56,480 --> 00:25:01,919
tools yes

790
00:24:58,240 --> 00:25:04,559
it does um it's horrible

791
00:25:01,919 --> 00:25:06,080
it's horrible in ways i understand i i

792
00:25:04,559 --> 00:25:08,240
don't have any particular plans to

793
00:25:06,080 --> 00:25:09,439
switch off but if somebody wants to

794
00:25:08,240 --> 00:25:12,159
give a crack at that that could be

795
00:25:09,440 --> 00:25:14,799
interesting but i i would note also that

796
00:25:12,159 --> 00:25:18,159
i got bug reports after i released kyle

797
00:25:14,799 --> 00:25:21,760
from itanium people and

798
00:25:18,159 --> 00:25:24,559
hppa systems and so it

799
00:25:21,760 --> 00:25:24,960
is it okay to lose those users i don't

800
00:25:24,559 --> 00:25:29,600
know

801
00:25:24,960 --> 00:25:32,960
i don't know yeah

802
00:25:29,600 --> 00:25:36,719
it's right yeah you you mentioned

803
00:25:32,960 --> 00:25:39,600
uh like a slide or two ago

804
00:25:36,720 --> 00:25:40,320
that you want to take a little step back

805
00:25:39,600 --> 00:25:44,000
and let

806
00:25:40,320 --> 00:25:47,279
other people contribute but i remember

807
00:25:44,000 --> 00:25:48,559
in some of your previous either a talk

808
00:25:47,279 --> 00:25:51,840
or a blog post

809
00:25:48,559 --> 00:25:55,200
that you work best alone

810
00:25:51,840 --> 00:25:56,320
so how do you see that so the question

811
00:25:55,200 --> 00:25:59,440
is uh

812
00:25:56,320 --> 00:26:00,480
i would like evidently to allow other

813
00:25:59,440 --> 00:26:02,559
people to

814
00:26:00,480 --> 00:26:03,840
facilitate other people contribute but

815
00:26:02,559 --> 00:26:05,360
i've said previously that i work best

816
00:26:03,840 --> 00:26:06,720
alone which is true

817
00:26:05,360 --> 00:26:08,719
i don't know what the resolution there

818
00:26:06,720 --> 00:26:11,840
is i i don't know right now it's a

819
00:26:08,720 --> 00:26:11,840
desire without a plan

820
00:26:14,000 --> 00:26:27,360
okay thank you very much

821
00:26:25,279 --> 00:26:27,360
you

