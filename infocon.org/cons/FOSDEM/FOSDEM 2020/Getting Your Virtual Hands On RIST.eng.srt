1
00:00:14,080 --> 00:00:18,400
hello

2
00:00:14,960 --> 00:00:20,480
custom okay perfect

3
00:00:18,400 --> 00:00:22,720
all right um i will be talking about

4
00:00:20,480 --> 00:00:24,320
wrist a new interoperable

5
00:00:22,720 --> 00:00:27,680
error correction protocol for the

6
00:00:24,320 --> 00:00:31,119
transmission of media streams

7
00:00:27,680 --> 00:00:33,760
all right so uh the presentation will be

8
00:00:31,119 --> 00:00:35,519
divided in in three parts

9
00:00:33,760 --> 00:00:37,360
we will start with a general overview

10
00:00:35,520 --> 00:00:39,200
and history of error correction

11
00:00:37,360 --> 00:00:41,360
protocols

12
00:00:39,200 --> 00:00:44,000
then we'll move to talk about the new

13
00:00:41,360 --> 00:00:46,879
open source library librist

14
00:00:44,000 --> 00:00:48,559
and finally we will talk about some

15
00:00:46,879 --> 00:00:51,760
virtual image tools that are available

16
00:00:48,559 --> 00:00:51,760
for integration testing

17
00:00:52,719 --> 00:00:57,120
all right so let's start with the basic

18
00:00:55,280 --> 00:00:59,840
concepts first the error correction

19
00:00:57,120 --> 00:00:59,839
protocols

20
00:01:00,480 --> 00:01:03,839
what are the basics we send media

21
00:01:02,160 --> 00:01:06,080
streams

22
00:01:03,840 --> 00:01:07,840
using udps because we want to maximize

23
00:01:06,080 --> 00:01:10,479
bandwidth usage

24
00:01:07,840 --> 00:01:11,520
and we want to achieve consistent and

25
00:01:10,479 --> 00:01:14,880
reliable

26
00:01:11,520 --> 00:01:17,920
latency on a network transmission

27
00:01:14,880 --> 00:01:19,520
however because udp has no

28
00:01:17,920 --> 00:01:23,280
acknowledgement mechanism

29
00:01:19,520 --> 00:01:24,798
like tcp does and uh

30
00:01:23,280 --> 00:01:26,640
because of this without error

31
00:01:24,799 --> 00:01:27,520
corrections there will be some packet

32
00:01:26,640 --> 00:01:29,360
loss

33
00:01:27,520 --> 00:01:32,960
and the packet loss will cause video on

34
00:01:29,360 --> 00:01:34,960
audio artifacts in your transmission

35
00:01:32,960 --> 00:01:36,720
there are several possible ways in which

36
00:01:34,960 --> 00:01:38,640
we can overcome this right

37
00:01:36,720 --> 00:01:41,439
we can add redundant data in the packets

38
00:01:38,640 --> 00:01:44,399
themselves to rebuild the drop packets

39
00:01:41,439 --> 00:01:48,158
this is called for error correction or

40
00:01:44,399 --> 00:01:48,159
we can add two-way communications

41
00:01:49,360 --> 00:01:57,840
hold on i need to adjust this

42
00:01:55,520 --> 00:01:59,280
or we can add two-way communications

43
00:01:57,840 --> 00:02:02,560
such that the receiving

44
00:01:59,280 --> 00:02:03,200
side will resend uh for the lost packets

45
00:02:02,560 --> 00:02:05,200
and they will

46
00:02:03,200 --> 00:02:07,040
be retransmitted in real time this

47
00:02:05,200 --> 00:02:11,200
process is called

48
00:02:07,040 --> 00:02:12,800
a air q uh automatic repeat request

49
00:02:11,200 --> 00:02:16,319
mechanisms

50
00:02:12,800 --> 00:02:18,080
so the arq has been around the air q and

51
00:02:16,319 --> 00:02:19,119
the fs in both they have been around for

52
00:02:18,080 --> 00:02:21,200
more than 40 years

53
00:02:19,120 --> 00:02:22,400
in one way or another and there are

54
00:02:21,200 --> 00:02:25,280
dozens of

55
00:02:22,400 --> 00:02:25,920
open and close source implementations of

56
00:02:25,280 --> 00:02:29,280
both

57
00:02:25,920 --> 00:02:31,760
or both types of protocol wrist is a new

58
00:02:29,280 --> 00:02:33,040
officially published interoperable

59
00:02:31,760 --> 00:02:36,879
standard

60
00:02:33,040 --> 00:02:40,079
to perform this error correction

61
00:02:36,879 --> 00:02:42,239
okay what are the typical usage of error

62
00:02:40,080 --> 00:02:43,840
correction protocols

63
00:02:42,239 --> 00:02:46,080
they're generally used for content

64
00:02:43,840 --> 00:02:46,640
streams from remote to the studio for

65
00:02:46,080 --> 00:02:49,519
mixing

66
00:02:46,640 --> 00:02:51,040
prior to broadcast cable cast or

67
00:02:49,519 --> 00:02:54,319
streaming

68
00:02:51,040 --> 00:02:58,319
uh for sports news and opinion shows

69
00:02:54,319 --> 00:03:02,079
foreign tv feeds ethnic cable offering

70
00:02:58,319 --> 00:03:02,079
you know mass shootings etc

71
00:03:02,239 --> 00:03:08,640
in today's world internet connections

72
00:03:05,519 --> 00:03:12,800
have better uptimes than expectancy

73
00:03:08,640 --> 00:03:14,399
lead list lines uh there's a

74
00:03:12,800 --> 00:03:18,080
we're going to publish a study of two

75
00:03:14,400 --> 00:03:20,000
years of a very large provider that had

76
00:03:18,080 --> 00:03:22,800
a number of list lines all over the

77
00:03:20,000 --> 00:03:25,040
world and they had in parallel

78
00:03:22,800 --> 00:03:26,640
inner lines from the same places the

79
00:03:25,040 --> 00:03:30,079
uptime was higher

80
00:03:26,640 --> 00:03:32,559
on the internet lines however unlike

81
00:03:30,080 --> 00:03:34,319
these lines internet connections are

82
00:03:32,560 --> 00:03:35,920
expected to be lossy

83
00:03:34,319 --> 00:03:37,359
there's an expectation that if you

84
00:03:35,920 --> 00:03:38,798
transmit any type of protocol that

85
00:03:37,360 --> 00:03:43,040
doesn't have acknowledgement

86
00:03:38,799 --> 00:03:43,040
like udp there will be packet loss

87
00:03:43,440 --> 00:03:49,760
so how does it work the protocol itself

88
00:03:47,040 --> 00:03:50,480
typically you know ignore the image on

89
00:03:49,760 --> 00:03:51,840
the right just

90
00:03:50,480 --> 00:03:53,599
one particular implementation but

91
00:03:51,840 --> 00:03:55,439
typically they all have the same type of

92
00:03:53,599 --> 00:03:57,518
mechanism

93
00:03:55,439 --> 00:03:59,359
you use a timestamp and a sequence

94
00:03:57,519 --> 00:04:02,159
number a sequential number

95
00:03:59,360 --> 00:04:04,000
on the on the sender side and you tag

96
00:04:02,159 --> 00:04:06,239
each packet

97
00:04:04,000 --> 00:04:07,439
and with this data the receiver can

98
00:04:06,239 --> 00:04:09,120
easily identify

99
00:04:07,439 --> 00:04:11,599
any missing packet by looking at the

100
00:04:09,120 --> 00:04:13,599
sequence numbers

101
00:04:11,599 --> 00:04:14,640
upon detection of a loss packet the

102
00:04:13,599 --> 00:04:16,959
receiver

103
00:04:14,640 --> 00:04:18,880
is going to request a retransmit to the

104
00:04:16,959 --> 00:04:22,000
sender for that missing data

105
00:04:18,880 --> 00:04:23,840
and this is all done in real time

106
00:04:22,000 --> 00:04:25,600
finally upon the receiving of that

107
00:04:23,840 --> 00:04:26,560
missing data the receiver inserts the

108
00:04:25,600 --> 00:04:28,880
packet

109
00:04:26,560 --> 00:04:30,800
into the buffer and then this all

110
00:04:28,880 --> 00:04:33,120
happens before that part of the content

111
00:04:30,800 --> 00:04:34,160
is delivered to the receiving player or

112
00:04:33,120 --> 00:04:37,199
whatever it is that's

113
00:04:34,160 --> 00:04:37,199
you know on the other side

114
00:04:37,520 --> 00:04:42,479
so what are other additional requirement

115
00:04:39,840 --> 00:04:45,599
or a wish list

116
00:04:42,479 --> 00:04:47,199
that we would like to have on on a error

117
00:04:45,600 --> 00:04:51,040
correction protocol

118
00:04:47,199 --> 00:04:52,800
well typically

119
00:04:51,040 --> 00:04:54,080
implementation of the protocols have to

120
00:04:52,800 --> 00:04:55,520
account for the fact

121
00:04:54,080 --> 00:04:58,240
that one or both sides of the

122
00:04:55,520 --> 00:05:01,198
transmissions might be behind a nat

123
00:04:58,240 --> 00:05:02,800
with no public ip address right or

124
00:05:01,199 --> 00:05:05,360
perhaps the bandwidth is not enough on

125
00:05:02,800 --> 00:05:08,840
one isp for the quality they desire

126
00:05:05,360 --> 00:05:10,080
and they need to combine two or more isp

127
00:05:08,840 --> 00:05:11,919
links

128
00:05:10,080 --> 00:05:14,639
some of these can all be achieved using

129
00:05:11,919 --> 00:05:18,080
tricks and techniques like port mapping

130
00:05:14,639 --> 00:05:19,840
vpns and bonding but that would mean

131
00:05:18,080 --> 00:05:20,560
that in order to use an error correction

132
00:05:19,840 --> 00:05:22,239
protocol

133
00:05:20,560 --> 00:05:24,720
you will need to be also a networking

134
00:05:22,240 --> 00:05:27,919
expert to set it all up right

135
00:05:24,720 --> 00:05:28,639
so instead these features are in most

136
00:05:27,919 --> 00:05:31,039
cases

137
00:05:28,639 --> 00:05:32,880
added to the different implementations

138
00:05:31,039 --> 00:05:38,000
of air correction protocols

139
00:05:32,880 --> 00:05:40,320
out there

140
00:05:38,000 --> 00:05:41,120
so error correction protocols right

141
00:05:40,320 --> 00:05:43,840
here's a

142
00:05:41,120 --> 00:05:45,600
a shameless pitch dozer is my

143
00:05:43,840 --> 00:05:48,719
proprietary patented

144
00:05:45,600 --> 00:05:49,520
protocol and it's typically sold with a

145
00:05:48,720 --> 00:05:51,600
hardware

146
00:05:49,520 --> 00:05:54,240
or a vm containing a customization

147
00:05:51,600 --> 00:05:55,840
version of the linux os

148
00:05:54,240 --> 00:05:59,600
the ultra has won several awards

149
00:05:55,840 --> 00:06:01,919
including an engineering mi4 technology

150
00:05:59,600 --> 00:06:03,440
there are several other proprietary and

151
00:06:01,919 --> 00:06:07,520
patented protocols

152
00:06:03,440 --> 00:06:09,039
in use today most of them

153
00:06:07,520 --> 00:06:11,680
leverage their technology to sell

154
00:06:09,039 --> 00:06:13,280
reliable links as a service

155
00:06:11,680 --> 00:06:14,800
not just to you know they don't just

156
00:06:13,280 --> 00:06:18,400
give you the

157
00:06:14,800 --> 00:06:19,440
the devices one particular vendor's

158
00:06:18,400 --> 00:06:21,280
implementation

159
00:06:19,440 --> 00:06:22,880
hi-vision was published as an open

160
00:06:21,280 --> 00:06:26,000
source a couple of years ago

161
00:06:22,880 --> 00:06:26,000
under the name of srt

162
00:06:26,800 --> 00:06:30,080
i've been told that the source code

163
00:06:28,240 --> 00:06:32,560
release seems to have some

164
00:06:30,080 --> 00:06:33,359
inherent design issues with thread

165
00:06:32,560 --> 00:06:36,720
safety

166
00:06:33,360 --> 00:06:37,759
and with readability and up until

167
00:06:36,720 --> 00:06:39,360
recently

168
00:06:37,759 --> 00:06:41,120
it had no public specs i think they

169
00:06:39,360 --> 00:06:43,919
finally published an unofficial

170
00:06:41,120 --> 00:06:46,080
spec for it but it is you know that

171
00:06:43,919 --> 00:06:47,919
particular ventures vendors

172
00:06:46,080 --> 00:06:50,000
implementation of an error correction

173
00:06:47,919 --> 00:06:52,880
protocol

174
00:06:50,000 --> 00:06:55,039
so let's dive now into risk itself what

175
00:06:52,880 --> 00:06:57,280
is it and how it was born

176
00:06:55,039 --> 00:06:57,280
right

177
00:06:58,240 --> 00:07:01,520
here's an excerpt of from the executive

178
00:07:00,800 --> 00:07:04,400
summary

179
00:07:01,520 --> 00:07:05,840
of the first published wrist simple

180
00:07:04,400 --> 00:07:07,359
profile document

181
00:07:05,840 --> 00:07:09,119
i typically don't like read anything

182
00:07:07,360 --> 00:07:10,800
verbatim that's on the screen but

183
00:07:09,120 --> 00:07:12,400
in this case i think it's worth it's

184
00:07:10,800 --> 00:07:15,360
worth it

185
00:07:12,400 --> 00:07:16,159
so it basically says many solutions

186
00:07:15,360 --> 00:07:18,160
exist

187
00:07:16,160 --> 00:07:19,759
in the market for reliable streaming

188
00:07:18,160 --> 00:07:21,680
over the internet

189
00:07:19,759 --> 00:07:22,800
these solutions all use the same types

190
00:07:21,680 --> 00:07:25,680
of techniques

191
00:07:22,800 --> 00:07:27,360
but they are all proprietary and do not

192
00:07:25,680 --> 00:07:30,000
interoperate

193
00:07:27,360 --> 00:07:31,759
this technical recommendation contains a

194
00:07:30,000 --> 00:07:34,000
protocol specification

195
00:07:31,759 --> 00:07:35,919
for reliable streaming over the internet

196
00:07:34,000 --> 00:07:39,520
so any users can mix and match

197
00:07:35,919 --> 00:07:42,560
solutions from different vendors

198
00:07:39,520 --> 00:07:45,520
that pretty much summarizes uh

199
00:07:42,560 --> 00:07:46,639
you know why why it was born what was

200
00:07:45,520 --> 00:07:49,919
achieved with the wrist

201
00:07:46,639 --> 00:07:52,960
was very unusual a group of

202
00:07:49,919 --> 00:07:53,520
industry experts including most if not

203
00:07:52,960 --> 00:07:55,758
all

204
00:07:53,520 --> 00:07:57,440
patent owners of different air

205
00:07:55,759 --> 00:07:59,680
correction protocols

206
00:07:57,440 --> 00:08:02,000
they work together to publish an

207
00:07:59,680 --> 00:08:02,720
interoperable standard that was free and

208
00:08:02,000 --> 00:08:06,319
clear

209
00:08:02,720 --> 00:08:08,400
of all patents and

210
00:08:06,319 --> 00:08:09,360
which also included the combined

211
00:08:08,400 --> 00:08:11,359
knowledge

212
00:08:09,360 --> 00:08:12,479
and experience of all these different

213
00:08:11,360 --> 00:08:14,240
vendors

214
00:08:12,479 --> 00:08:16,400
that have been using these technologies

215
00:08:14,240 --> 00:08:19,280
for the last few years

216
00:08:16,400 --> 00:08:21,520
so this was not a theoretical exercise

217
00:08:19,280 --> 00:08:24,799
on the contrary it was a culmination

218
00:08:21,520 --> 00:08:27,840
of a multi-year multi-vendor real world

219
00:08:24,800 --> 00:08:27,840
world experiment

220
00:08:30,400 --> 00:08:34,079
so where does it stand now right it has

221
00:08:32,719 --> 00:08:37,039
been almost two years since the

222
00:08:34,080 --> 00:08:38,320
the work group started and we have

223
00:08:37,039 --> 00:08:39,919
published two documents we have

224
00:08:38,320 --> 00:08:42,880
published one documents and i'm about to

225
00:08:39,919 --> 00:08:42,880
publish the second one

226
00:08:43,519 --> 00:08:47,279
they they correspond to the simple

227
00:08:45,120 --> 00:08:51,120
profile which is the tr061

228
00:08:47,279 --> 00:08:51,120
and the main profile tr062

229
00:08:51,760 --> 00:08:55,439
here i also show uh some of the

230
00:08:54,160 --> 00:08:57,439
companies that are part of the group

231
00:08:55,440 --> 00:09:00,320
and that are very active actually i

232
00:08:57,440 --> 00:09:01,920
forgot to include your company sorry

233
00:09:00,320 --> 00:09:04,240
you're not in the group you're in the

234
00:09:01,920 --> 00:09:06,560
forum all right

235
00:09:04,240 --> 00:09:08,800
yeah so we have collectively performed

236
00:09:06,560 --> 00:09:11,199
several interrupt testing events

237
00:09:08,800 --> 00:09:12,160
of each other's implementations so it's

238
00:09:11,200 --> 00:09:14,399
not just you know

239
00:09:12,160 --> 00:09:15,279
one library that everybody uses but

240
00:09:14,399 --> 00:09:18,160
everybody

241
00:09:15,279 --> 00:09:18,880
has written their own code and we've got

242
00:09:18,160 --> 00:09:22,399
interrupts

243
00:09:18,880 --> 00:09:26,000
among everybody and most notably

244
00:09:22,399 --> 00:09:28,880
wrist is now part of aws as well as a

245
00:09:26,000 --> 00:09:28,880
ninjas mechanism

246
00:09:29,920 --> 00:09:34,719
an important aspect of of the design

247
00:09:32,560 --> 00:09:38,239
philosophy of the group

248
00:09:34,720 --> 00:09:41,200
is that we leverage existing rfcs

249
00:09:38,240 --> 00:09:42,720
as much as practically possible to keep

250
00:09:41,200 --> 00:09:44,240
the final spec short

251
00:09:42,720 --> 00:09:46,880
and at the same time very well

252
00:09:44,240 --> 00:09:46,880
documented

253
00:09:48,080 --> 00:09:52,880
so let's talk about for the the first

254
00:09:50,480 --> 00:09:54,880
the very simple profile that has been

255
00:09:52,880 --> 00:09:56,080
already published for over a year and

256
00:09:54,880 --> 00:10:00,000
has been implemented

257
00:09:56,080 --> 00:10:02,640
you know uh by a number of projects

258
00:10:00,000 --> 00:10:05,519
so the simple profile was designed with

259
00:10:02,640 --> 00:10:08,160
the idea of graceful degradation

260
00:10:05,519 --> 00:10:10,000
in other words senders that do not

261
00:10:08,160 --> 00:10:12,000
support risks can still send their

262
00:10:10,000 --> 00:10:14,880
streams to receivers that do

263
00:10:12,000 --> 00:10:16,560
and vice versa the one and only

264
00:10:14,880 --> 00:10:17,279
requirement is that you transmit your

265
00:10:16,560 --> 00:10:20,160
stream

266
00:10:17,279 --> 00:10:22,160
with a valid rtp header which is pretty

267
00:10:20,160 --> 00:10:24,000
standard

268
00:10:22,160 --> 00:10:25,360
in addition when you want packet

269
00:10:24,000 --> 00:10:27,600
recovery

270
00:10:25,360 --> 00:10:29,200
you open a second connection from the

271
00:10:27,600 --> 00:10:31,600
sender to the receiver

272
00:10:29,200 --> 00:10:33,519
and you exchange rtcp packets over the

273
00:10:31,600 --> 00:10:35,839
second connection

274
00:10:33,519 --> 00:10:37,279
these rtcp packets can contain like you

275
00:10:35,839 --> 00:10:40,560
see here an example

276
00:10:37,279 --> 00:10:43,680
uh timestamps count of packets sent

277
00:10:40,560 --> 00:10:46,319
etc they can also be empty packets for

278
00:10:43,680 --> 00:10:47,279
you know like a keep alive to establish

279
00:10:46,320 --> 00:10:50,399
state of

280
00:10:47,279 --> 00:10:53,279
a firewall etc now uh

281
00:10:50,399 --> 00:10:55,760
once this secondary rtcp channel is

282
00:10:53,279 --> 00:10:58,240
established the receiver uses it

283
00:10:55,760 --> 00:10:58,800
for re-transmission requests among other

284
00:10:58,240 --> 00:11:01,839
things

285
00:10:58,800 --> 00:11:01,839
we'll go more in detail later

286
00:11:03,440 --> 00:11:08,880
so let's recap simple profile has its

287
00:11:05,839 --> 00:11:12,000
basic characteristics

288
00:11:08,880 --> 00:11:13,760
the use of rtp you can see that the use

289
00:11:12,000 --> 00:11:16,720
of rtp and rtcp

290
00:11:13,760 --> 00:11:18,480
were a result of the design goals for

291
00:11:16,720 --> 00:11:19,519
the simple profile which was graceful

292
00:11:18,480 --> 00:11:21,360
degradation

293
00:11:19,519 --> 00:11:23,760
and leveraging of existing standards and

294
00:11:21,360 --> 00:11:23,760
specs

295
00:11:24,000 --> 00:11:27,600
so pretty simple it's somebody that has

296
00:11:25,920 --> 00:11:30,640
an rtp implementation

297
00:11:27,600 --> 00:11:33,440
it will take them a day to add a packet

298
00:11:30,640 --> 00:11:33,439
recovery to it

299
00:11:34,240 --> 00:11:40,160
possible rtcp

300
00:11:37,360 --> 00:11:41,600
messages used you know these are

301
00:11:40,160 --> 00:11:44,160
standard messages and

302
00:11:41,600 --> 00:11:45,920
we leverage them for the protocol on the

303
00:11:44,160 --> 00:11:47,920
center side we have send the reports

304
00:11:45,920 --> 00:11:49,439
empty reports source description

305
00:11:47,920 --> 00:11:50,560
receiver you have we have a receive

306
00:11:49,440 --> 00:11:52,720
report and

307
00:11:50,560 --> 00:11:54,160
the most important the negative and

308
00:11:52,720 --> 00:11:57,920
acknowledgement packet

309
00:11:54,160 --> 00:12:01,600
to request the the missing packets

310
00:11:57,920 --> 00:12:04,800
all right here uh is uh

311
00:12:01,600 --> 00:12:06,959
how this knack based recovery works

312
00:12:04,800 --> 00:12:08,800
with a little bit more detail an

313
00:12:06,959 --> 00:12:10,079
important you know thing to consider in

314
00:12:08,800 --> 00:12:13,279
this diagram

315
00:12:10,079 --> 00:12:16,399
is that as you can see

316
00:12:13,279 --> 00:12:20,079
we have the first packet loss

317
00:12:16,399 --> 00:12:21,440
not received and the receiver side

318
00:12:20,079 --> 00:12:23,120
does not send the acknowledgement

319
00:12:21,440 --> 00:12:24,800
immediately there's a gap there

320
00:12:23,120 --> 00:12:27,200
and that gap is important because we

321
00:12:24,800 --> 00:12:28,959
need to account for packet reordering in

322
00:12:27,200 --> 00:12:29,920
udp transmissions there's always a

323
00:12:28,959 --> 00:12:32,319
possibility

324
00:12:29,920 --> 00:12:33,360
of packet reordering or not only packet

325
00:12:32,320 --> 00:12:35,839
loss so

326
00:12:33,360 --> 00:12:36,639
the receiver might interpret a missing

327
00:12:35,839 --> 00:12:39,120
sequence

328
00:12:36,639 --> 00:12:41,360
as a loss when in reality it's just a

329
00:12:39,120 --> 00:12:43,200
reorder packet that arrives later

330
00:12:41,360 --> 00:12:44,480
so it's important for us to have this

331
00:12:43,200 --> 00:12:45,600
gap before we request the first

332
00:12:44,480 --> 00:12:47,839
transmission

333
00:12:45,600 --> 00:12:49,519
so the nag message is sent back to the

334
00:12:47,839 --> 00:12:52,639
sender the sender

335
00:12:49,519 --> 00:12:54,720
processes and sends the

336
00:12:52,639 --> 00:12:55,839
the packet again the data packet and

337
00:12:54,720 --> 00:12:59,040
then continues with the

338
00:12:55,839 --> 00:13:00,079
natural flow in parallel and that's

339
00:12:59,040 --> 00:13:02,399
pretty much the

340
00:13:00,079 --> 00:13:03,680
the mechanism it's it's very simplistic

341
00:13:02,399 --> 00:13:06,240
very effective

342
00:13:03,680 --> 00:13:06,719
it's uh something that has been around

343
00:13:06,240 --> 00:13:10,480
for

344
00:13:06,720 --> 00:13:12,800
40 years and it requires certain

345
00:13:10,480 --> 00:13:15,360
parameters which are all specified

346
00:13:12,800 --> 00:13:15,359
in detail

347
00:13:16,240 --> 00:13:24,160
we support two types of knack messages

348
00:13:21,120 --> 00:13:25,839
we use either a bit mask or a range and

349
00:13:24,160 --> 00:13:28,319
it's up to the receiver

350
00:13:25,839 --> 00:13:29,600
to request the one or the other one

351
00:13:28,320 --> 00:13:31,839
might be more efficient or the other

352
00:13:29,600 --> 00:13:36,720
depending on the amount of data loss

353
00:13:31,839 --> 00:13:36,720
uh the network is exhibiting

354
00:13:38,959 --> 00:13:42,399
so we also suggest some defaults based

355
00:13:41,360 --> 00:13:44,480
on

356
00:13:42,399 --> 00:13:46,639
experience uh by you know it was a

357
00:13:44,480 --> 00:13:49,279
consensus among all the vendors and all

358
00:13:46,639 --> 00:13:51,440
everybody that participated that for a

359
00:13:49,279 --> 00:13:54,079
typical internet connection

360
00:13:51,440 --> 00:13:56,160
across you know from one coast to the us

361
00:13:54,079 --> 00:13:56,959
uh to the other or across the atlantic

362
00:13:56,160 --> 00:13:59,439
or anywhere

363
00:13:56,959 --> 00:14:01,119
you know across europe this this

364
00:13:59,440 --> 00:14:03,440
defaults work quite well

365
00:14:01,120 --> 00:14:05,600
if you can sustain a thousand sec a

366
00:14:03,440 --> 00:14:07,360
thousand milliseconds of

367
00:14:05,600 --> 00:14:09,440
latency which is the size of the buffer

368
00:14:07,360 --> 00:14:11,120
on the center side these parameters will

369
00:14:09,440 --> 00:14:17,040
work quite well

370
00:14:11,120 --> 00:14:18,720
for any internet link

371
00:14:17,040 --> 00:14:21,839
in reality if you see the graph on the

372
00:14:18,720 --> 00:14:22,160
right a protocol can be implemented also

373
00:14:21,839 --> 00:14:24,240
to

374
00:14:22,160 --> 00:14:26,079
make those parameters dependent on the

375
00:14:24,240 --> 00:14:26,720
round trip times it's not necessarily

376
00:14:26,079 --> 00:14:28,880
fixed

377
00:14:26,720 --> 00:14:30,160
a good implementation will use a

378
00:14:28,880 --> 00:14:30,880
real-time measurement of the writing

379
00:14:30,160 --> 00:14:34,160
trip time

380
00:14:30,880 --> 00:14:37,680
to adjust the parameters

381
00:14:34,160 --> 00:14:40,000
in real time so uh

382
00:14:37,680 --> 00:14:41,519
let's move now to the main profile which

383
00:14:40,000 --> 00:14:42,320
is the the one that's about to be

384
00:14:41,519 --> 00:14:45,199
published

385
00:14:42,320 --> 00:14:45,920
it was supposed to be published by uh

386
00:14:45,199 --> 00:14:48,399
you know

387
00:14:45,920 --> 00:14:50,160
today but it's still on the review it's

388
00:14:48,399 --> 00:14:55,199
it's it's going to come out in the next

389
00:14:50,160 --> 00:14:57,120
couple of weeks so for the main profile

390
00:14:55,199 --> 00:14:58,800
which came basically a year after the

391
00:14:57,120 --> 00:15:01,199
simple profile

392
00:14:58,800 --> 00:15:02,800
the design goals were slightly different

393
00:15:01,199 --> 00:15:06,479
we now needed to achieve

394
00:15:02,800 --> 00:15:09,839
multiplexing and encryption

395
00:15:06,480 --> 00:15:13,120
and some other requirements as well

396
00:15:09,839 --> 00:15:16,480
which we'll go over for this

397
00:15:13,120 --> 00:15:18,320
then we didn't need or require

398
00:15:16,480 --> 00:15:20,480
any type of graceful degradation main

399
00:15:18,320 --> 00:15:23,519
profile connections can only

400
00:15:20,480 --> 00:15:25,680
you know be established among two

401
00:15:23,519 --> 00:15:26,880
wrist devices there's no longer the

402
00:15:25,680 --> 00:15:29,599
universality

403
00:15:26,880 --> 00:15:30,480
of having an rtp stream be the first

404
00:15:29,600 --> 00:15:33,279
thing that the

405
00:15:30,480 --> 00:15:33,279
each other sees

406
00:15:34,959 --> 00:15:39,359
so what does the main profile bring to

407
00:15:37,920 --> 00:15:41,519
the table

408
00:15:39,360 --> 00:15:43,759
we needed a way to multiplex so we used

409
00:15:41,519 --> 00:15:46,959
gre gre tunneling

410
00:15:43,759 --> 00:15:50,000
why dre well one it eliminates

411
00:15:46,959 --> 00:15:55,119
the use of an extra port it allows for

412
00:15:50,000 --> 00:15:56,880
the multiplexing of streams

413
00:15:55,120 --> 00:15:58,560
there are published encryption and

414
00:15:56,880 --> 00:16:01,600
authentication standards

415
00:15:58,560 --> 00:16:04,160
we can use on top of it

416
00:16:01,600 --> 00:16:06,320
in our case we chose dtls and a form of

417
00:16:04,160 --> 00:16:09,519
pre-shared key

418
00:16:06,320 --> 00:16:12,399
gary stanz stands for general

419
00:16:09,519 --> 00:16:12,399
encapsulation

420
00:16:12,959 --> 00:16:18,638
we can also separate another important

421
00:16:16,399 --> 00:16:20,480
side effect or having now one port and

422
00:16:18,639 --> 00:16:23,440
one multiplexing

423
00:16:20,480 --> 00:16:24,800
is that we can separate the connection

424
00:16:23,440 --> 00:16:26,959
initiation rule

425
00:16:24,800 --> 00:16:28,399
from the packet recovery role so this

426
00:16:26,959 --> 00:16:31,040
allows for the possibility that

427
00:16:28,399 --> 00:16:32,079
either side can be behind a nut or

428
00:16:31,040 --> 00:16:33,599
firewall

429
00:16:32,079 --> 00:16:36,000
it's no longer like in the simple

430
00:16:33,600 --> 00:16:37,920
profile case where the receiver side had

431
00:16:36,000 --> 00:16:40,880
to have either a public ip

432
00:16:37,920 --> 00:16:42,000
or a port mapping now either side can

433
00:16:40,880 --> 00:16:44,079
sit behind an ad

434
00:16:42,000 --> 00:16:46,160
and we can establish the connection at

435
00:16:44,079 --> 00:16:49,359
the gre level at the tonal level

436
00:16:46,160 --> 00:16:52,959
and then on top of that we can send the

437
00:16:49,360 --> 00:16:52,959
data with the packet recovery

438
00:16:53,680 --> 00:16:58,479
an additional benefit of gre that if the

439
00:16:56,399 --> 00:17:01,120
implementer desires it

440
00:16:58,480 --> 00:17:04,400
it allows for the tunneling of any other

441
00:17:01,120 --> 00:17:07,760
type of data ground

442
00:17:04,400 --> 00:17:10,559
not only uh udp or streams

443
00:17:07,760 --> 00:17:10,559
video streams

444
00:17:11,119 --> 00:17:15,599
all right so after the gre protocol

445
00:17:13,280 --> 00:17:15,599
header

446
00:17:16,000 --> 00:17:20,720
uh and we we support two types of

447
00:17:19,039 --> 00:17:24,000
headers if you look at it here

448
00:17:20,720 --> 00:17:25,280
a the typical use you have a udp header

449
00:17:24,000 --> 00:17:26,799
where you transmit your data and you

450
00:17:25,280 --> 00:17:28,319
have the now the gre

451
00:17:26,799 --> 00:17:30,320
header right here with the optional

452
00:17:28,319 --> 00:17:32,720
flags okay

453
00:17:30,320 --> 00:17:33,439
uh one of the parameters of the gre

454
00:17:32,720 --> 00:17:35,760
header is

455
00:17:33,440 --> 00:17:37,039
what protocol type is going to be your

456
00:17:35,760 --> 00:17:40,400
payload

457
00:17:37,039 --> 00:17:43,039
so you can do a standard ip payload

458
00:17:40,400 --> 00:17:44,559
which is a full data grind mode and then

459
00:17:43,039 --> 00:17:46,960
this now becomes

460
00:17:44,559 --> 00:17:49,440
just an ip datagram you're going to have

461
00:17:46,960 --> 00:17:49,919
another ipv4 header or an ipvc whatever

462
00:17:49,440 --> 00:17:52,720
you

463
00:17:49,919 --> 00:17:54,240
you prefer and then you payload under it

464
00:17:52,720 --> 00:17:57,679
but we also supported

465
00:17:54,240 --> 00:17:59,919
added support for a new protocol type

466
00:17:57,679 --> 00:18:01,039
that's not part of the normal gre

467
00:17:59,919 --> 00:18:04,720
specification

468
00:18:01,039 --> 00:18:05,679
specific for risk to use it for reduced

469
00:18:04,720 --> 00:18:09,600
overhead

470
00:18:05,679 --> 00:18:10,559
then the new type only has four uses

471
00:18:09,600 --> 00:18:13,600
four byte

472
00:18:10,559 --> 00:18:15,678
source port and destination port and

473
00:18:13,600 --> 00:18:17,840
then it assumes that what follows

474
00:18:15,679 --> 00:18:19,840
is an rtp message just like with a

475
00:18:17,840 --> 00:18:21,600
simple profile

476
00:18:19,840 --> 00:18:24,639
so you can do it as simple as a

477
00:18:21,600 --> 00:18:24,639
complicated as you want

478
00:18:27,760 --> 00:18:31,919
all right so there are two possible

479
00:18:30,160 --> 00:18:33,200
encryption methods supported by the main

480
00:18:31,919 --> 00:18:37,280
profile

481
00:18:33,200 --> 00:18:39,679
dtls and psk dtls

482
00:18:37,280 --> 00:18:40,399
uses ssl certificates and all the

483
00:18:39,679 --> 00:18:42,880
security

484
00:18:40,400 --> 00:18:44,320
complications that are associated with

485
00:18:42,880 --> 00:18:47,760
certificates

486
00:18:44,320 --> 00:18:51,439
psk on the other hand uh supports a

487
00:18:47,760 --> 00:18:53,200
simpler pass freighter passphrase mode

488
00:18:51,440 --> 00:18:54,960
with the downside that now you have to

489
00:18:53,200 --> 00:18:58,320
get that pass phrase

490
00:18:54,960 --> 00:19:01,360
you know communicate it to both ends

491
00:18:58,320 --> 00:19:05,039
through some secure channel you know

492
00:19:01,360 --> 00:19:05,840
a phone call uh perfectly a secure way

493
00:19:05,039 --> 00:19:09,280
but

494
00:19:05,840 --> 00:19:12,959
it has now you have to perform that

495
00:19:09,280 --> 00:19:16,000
outside of the scope of the protocol

496
00:19:12,960 --> 00:19:17,760
so what is the current status of rest

497
00:19:16,000 --> 00:19:19,679
of these protocols we have the simple

498
00:19:17,760 --> 00:19:22,840
profile was completed

499
00:19:19,679 --> 00:19:24,160
integrated and tested it's part of vlc

500
00:19:22,840 --> 00:19:27,360
u-pipe

501
00:19:24,160 --> 00:19:29,520
g streamer and others uh

502
00:19:27,360 --> 00:19:31,199
it's on uh all the vendors that are part

503
00:19:29,520 --> 00:19:34,080
of the

504
00:19:31,200 --> 00:19:34,720
work group and you know people keep

505
00:19:34,080 --> 00:19:38,000
adding it

506
00:19:34,720 --> 00:19:41,200
the simple profile on a weekly basis

507
00:19:38,000 --> 00:19:43,440
the main profile that adds the gre

508
00:19:41,200 --> 00:19:46,080
encapsulation and the encryption

509
00:19:43,440 --> 00:19:46,720
it was finished and sent to review just

510
00:19:46,080 --> 00:19:48,879
uh

511
00:19:46,720 --> 00:19:49,840
a few weeks ago we were expecting to be

512
00:19:48,880 --> 00:19:52,320
done by now

513
00:19:49,840 --> 00:19:53,360
is most likely going to be done before

514
00:19:52,320 --> 00:19:56,879
the month is over

515
00:19:53,360 --> 00:19:56,879
probably within the next week or two

516
00:19:57,760 --> 00:20:02,158
there's a new open source library that

517
00:20:00,880 --> 00:20:04,880
was created with the

518
00:20:02,159 --> 00:20:05,760
main profile called librist the main

519
00:20:04,880 --> 00:20:07,840
library see

520
00:20:05,760 --> 00:20:09,600
it's going to live under the umbrella of

521
00:20:07,840 --> 00:20:13,439
the vlc

522
00:20:09,600 --> 00:20:16,799
uh g lab code base with a public group

523
00:20:13,440 --> 00:20:18,000
uh it was coded and uh following the

524
00:20:16,799 --> 00:20:21,039
standards of the

525
00:20:18,000 --> 00:20:24,240
david decoder

526
00:20:21,039 --> 00:20:26,000
same rule sets apply for both and

527
00:20:24,240 --> 00:20:28,080
we're waiting for the document to be

528
00:20:26,000 --> 00:20:29,520
officially published so that we can push

529
00:20:28,080 --> 00:20:31,280
the

530
00:20:29,520 --> 00:20:32,879
library to the to the reaper right now

531
00:20:31,280 --> 00:20:35,840
the repo is empty waiting for that

532
00:20:32,880 --> 00:20:35,840
document to be published

533
00:20:36,880 --> 00:20:40,159
the main profile is scheduled to have

534
00:20:39,360 --> 00:20:42,879
interrupt

535
00:20:40,159 --> 00:20:44,640
between all the companies at california

536
00:20:42,880 --> 00:20:47,120
in the next two weeks

537
00:20:44,640 --> 00:20:48,960
at cobalt's offices and then after that

538
00:20:47,120 --> 00:20:49,280
there's an immediate vsf conference

539
00:20:48,960 --> 00:20:51,840
where

540
00:20:49,280 --> 00:20:52,720
there's also going to be a demo of all

541
00:20:51,840 --> 00:20:54,879
the companies

542
00:20:52,720 --> 00:20:55,840
uh interoperating at about nine of them

543
00:20:54,880 --> 00:20:58,480
i believe

544
00:20:55,840 --> 00:21:00,559
uh showing the main profile uh with race

545
00:20:58,480 --> 00:21:02,799
being transmitted for the from different

546
00:21:00,559 --> 00:21:04,960
parts of the world to a local monitor

547
00:21:02,799 --> 00:21:04,960
there

548
00:21:05,520 --> 00:21:12,320
all right so let's talk about libris now

549
00:21:09,120 --> 00:21:16,239
basic features it's it's a library

550
00:21:12,320 --> 00:21:20,320
simple apis multi-thread safe

551
00:21:16,240 --> 00:21:22,240
you know the it has

552
00:21:20,320 --> 00:21:24,080
sample applications with it the sample

553
00:21:22,240 --> 00:21:24,640
applications are just for a single

554
00:21:24,080 --> 00:21:26,799
stream

555
00:21:24,640 --> 00:21:28,000
but the library supports any number of

556
00:21:26,799 --> 00:21:29,840
it uh

557
00:21:28,000 --> 00:21:31,440
the library supports point to

558
00:21:29,840 --> 00:21:35,840
multi-point you can configure

559
00:21:31,440 --> 00:21:38,960
every aspect of it and best of all

560
00:21:35,840 --> 00:21:42,959
it hides all the complexities of

561
00:21:38,960 --> 00:21:44,480
not import mapping keep alive sockets

562
00:21:42,960 --> 00:21:46,400
you don't need to be a network

563
00:21:44,480 --> 00:21:47,840
networking expert to use it or to

564
00:21:46,400 --> 00:21:49,840
implement it

565
00:21:47,840 --> 00:21:51,439
with 20 lines of code on each side you

566
00:21:49,840 --> 00:21:52,080
have a risk connection between two end

567
00:21:51,440 --> 00:21:54,000
points

568
00:21:52,080 --> 00:21:56,399
your code doesn't even need to open the

569
00:21:54,000 --> 00:21:56,400
sockets

570
00:21:56,559 --> 00:22:00,080
so what are the more advanced features

571
00:21:58,880 --> 00:22:03,679
of the library

572
00:22:00,080 --> 00:22:04,320
uh aes encryption either dtls or psk

573
00:22:03,679 --> 00:22:07,039
right now the

574
00:22:04,320 --> 00:22:09,200
the current libris only supports psk

575
00:22:07,039 --> 00:22:12,158
somebody wants to help out with the tls

576
00:22:09,200 --> 00:22:14,240
they're welcome multiple streams we have

577
00:22:12,159 --> 00:22:18,080
an optional compression that is not

578
00:22:14,240 --> 00:22:21,280
part of the standard but you know

579
00:22:18,080 --> 00:22:23,840
we found that uh it's effective in

580
00:22:21,280 --> 00:22:25,600
some streams we can encapsulate

581
00:22:23,840 --> 00:22:28,799
multicast

582
00:22:25,600 --> 00:22:30,639
and now we can specify which side is

583
00:22:28,799 --> 00:22:32,720
going to initiate the connection

584
00:22:30,640 --> 00:22:33,760
independent of which side is sending the

585
00:22:32,720 --> 00:22:37,600
screen

586
00:22:33,760 --> 00:22:38,799
all that is supported in the library uh

587
00:22:37,600 --> 00:22:40,320
for somebody that wants to implement

588
00:22:38,799 --> 00:22:40,879
advanced features they're not part of

589
00:22:40,320 --> 00:22:42,639
the

590
00:22:40,880 --> 00:22:45,200
sample application that comes with it

591
00:22:42,640 --> 00:22:49,120
it's very simplistic

592
00:22:45,200 --> 00:22:52,880
so next the virtual images

593
00:22:49,120 --> 00:22:53,439
right how can we make it easier for

594
00:22:52,880 --> 00:22:55,440
people to

595
00:22:53,440 --> 00:22:56,480
implement the protocol the standard

596
00:22:55,440 --> 00:22:59,520
right well

597
00:22:56,480 --> 00:23:01,520
step one is to provide a false library

598
00:22:59,520 --> 00:23:03,120
which we have already done we have list

599
00:23:01,520 --> 00:23:06,559
reader to be published

600
00:23:03,120 --> 00:23:10,080
step two is to provide an easy way

601
00:23:06,559 --> 00:23:11,039
to use a pre-wrap os image that has the

602
00:23:10,080 --> 00:23:14,240
application

603
00:23:11,039 --> 00:23:16,240
and library already compiled inside and

604
00:23:14,240 --> 00:23:17,840
give them a simple gui to configure it

605
00:23:16,240 --> 00:23:19,440
as a relay

606
00:23:17,840 --> 00:23:21,439
so they don't even have to compile the

607
00:23:19,440 --> 00:23:24,559
library they compile the code

608
00:23:21,440 --> 00:23:26,960
they just grab the image

609
00:23:24,559 --> 00:23:28,480
put it on the virtualization engine of

610
00:23:26,960 --> 00:23:30,159
their choice

611
00:23:28,480 --> 00:23:32,240
and test their code against that image

612
00:23:30,159 --> 00:23:32,640
that image will serve as a relay receive

613
00:23:32,240 --> 00:23:34,960
it

614
00:23:32,640 --> 00:23:36,480
let them play it in vlc or vice versus

615
00:23:34,960 --> 00:23:38,159
sending and let you play

616
00:23:36,480 --> 00:23:40,720
a content that that you put on the on

617
00:23:38,159 --> 00:23:42,559
the image

618
00:23:40,720 --> 00:23:44,159
shameless speech again the idea is that

619
00:23:42,559 --> 00:23:46,879
you will love the image so much

620
00:23:44,159 --> 00:23:47,520
that you want you will want to buy other

621
00:23:46,880 --> 00:23:51,840
flavors

622
00:23:47,520 --> 00:23:51,840
of images that have more functionality

623
00:23:54,240 --> 00:23:57,520
all right so

624
00:23:58,159 --> 00:24:02,240
demo applications here's the workflow of

625
00:24:01,279 --> 00:24:04,720
a typical use

626
00:24:02,240 --> 00:24:06,480
of the image or the or the sample

627
00:24:04,720 --> 00:24:10,000
applications that's included with the

628
00:24:06,480 --> 00:24:11,840
with the library itself at the recenter

629
00:24:10,000 --> 00:24:14,240
side

630
00:24:11,840 --> 00:24:15,439
we listen to a udp port read a local

631
00:24:14,240 --> 00:24:18,080
stream

632
00:24:15,440 --> 00:24:20,559
udp standard encapsulating tourists and

633
00:24:18,080 --> 00:24:23,600
send it to multiple locations encrypted

634
00:24:20,559 --> 00:24:25,678
similar to what they've shown in several

635
00:24:23,600 --> 00:24:32,080
presentations today

636
00:24:25,679 --> 00:24:35,840
that was done right on the receiver side

637
00:24:32,080 --> 00:24:39,279
read the rest restream decrypted

638
00:24:35,840 --> 00:24:41,120
and output to the next stage device

639
00:24:39,279 --> 00:24:43,360
it could be a player or maybe you want

640
00:24:41,120 --> 00:24:44,799
output as a local network multicast to

641
00:24:43,360 --> 00:24:46,399
be used

642
00:24:44,799 --> 00:24:49,279
locally you know in the receiver side

643
00:24:46,400 --> 00:24:49,279
for other purposes

644
00:24:54,159 --> 00:24:59,520
so possible uses of the image tested

645
00:24:56,640 --> 00:25:03,919
learn it adhob live stream transmittal

646
00:24:59,520 --> 00:25:08,240
you know a relay development

647
00:25:03,919 --> 00:25:11,360
whatever you want to use it for okay

648
00:25:08,240 --> 00:25:13,279
so some more advanced use cases that

649
00:25:11,360 --> 00:25:14,000
require that that are not available in

650
00:25:13,279 --> 00:25:19,039
the current sample

651
00:25:14,000 --> 00:25:19,039
application uh are you know

652
00:25:19,919 --> 00:25:24,240
virtual tab or ton interfaces you can

653
00:25:22,480 --> 00:25:27,039
actually bridge

654
00:25:24,240 --> 00:25:28,159
two machines using interfaces using the

655
00:25:27,039 --> 00:25:30,000
wrist protocol

656
00:25:28,159 --> 00:25:32,159
and have zero configuration mode for the

657
00:25:30,000 --> 00:25:33,760
streams whatever you push on one side

658
00:25:32,159 --> 00:25:35,840
automatically shuts out in the other

659
00:25:33,760 --> 00:25:39,679
machine across the internet with

660
00:25:35,840 --> 00:25:39,678
with the error correction on it

661
00:25:39,760 --> 00:25:43,279
so this allows for the easy multiplexing

662
00:25:41,760 --> 00:25:45,360
of streams

663
00:25:43,279 --> 00:25:46,400
we also support in the library already

664
00:25:45,360 --> 00:25:48,959
load balancing

665
00:25:46,400 --> 00:25:50,960
and redundancy and there are no

666
00:25:48,960 --> 00:25:54,159
limitations of any kinds for the use of

667
00:25:50,960 --> 00:25:55,520
the library in commercial applications

668
00:25:54,159 --> 00:25:57,440
the licensing model is the same as the

669
00:25:55,520 --> 00:26:01,279
david i forget this lg i think it's not

670
00:25:57,440 --> 00:26:04,490
a gps it's an even looser one

671
00:26:01,279 --> 00:26:08,000
so thank you so much

672
00:26:04,490 --> 00:26:11,840
[Applause]

673
00:26:08,000 --> 00:26:11,840
if there are a few questions

674
00:26:15,520 --> 00:26:19,440
does the library still have a

675
00:26:16,960 --> 00:26:22,559
circuit-based api like libsrt so people

676
00:26:19,440 --> 00:26:22,559
can drop things in

677
00:26:23,200 --> 00:26:26,640
i'm not sure i understand the question

678
00:26:24,720 --> 00:26:28,320
what do you mean by

679
00:26:26,640 --> 00:26:30,159
one of the things that slt did was just

680
00:26:28,320 --> 00:26:31,120
pretend their application was a socket

681
00:26:30,159 --> 00:26:33,200
so people

682
00:26:31,120 --> 00:26:34,719
who already use sockets didn't have to

683
00:26:33,200 --> 00:26:39,760
do very much if anything

684
00:26:34,720 --> 00:26:41,520
so yeah

685
00:26:39,760 --> 00:26:42,799
we don't have that now but it would be

686
00:26:41,520 --> 00:26:46,000
very easy to add

687
00:26:42,799 --> 00:26:49,760
an emulator yes i mean the code

688
00:26:46,000 --> 00:26:52,080
will be online and and it's very clear

689
00:26:49,760 --> 00:26:53,600
it's very structured so it would be

690
00:26:52,080 --> 00:26:56,000
easier to follow i tried once to read

691
00:26:53,600 --> 00:26:58,799
the srt code

692
00:26:56,000 --> 00:26:58,799
unsuccessfully

693
00:26:59,120 --> 00:27:03,120
firewall port opening can be a problem

694
00:27:01,520 --> 00:27:05,039
in some organization

695
00:27:03,120 --> 00:27:07,279
do you have a more we have a mode to

696
00:27:05,039 --> 00:27:10,080
ease firewall traversal like stun

697
00:27:07,279 --> 00:27:12,320
i think so what we have we have the

698
00:27:10,080 --> 00:27:13,360
ability to initiate the connection from

699
00:27:12,320 --> 00:27:14,960
either side

700
00:27:13,360 --> 00:27:16,879
so if one organization is giving you

701
00:27:14,960 --> 00:27:19,520
problems just go to the other end

702
00:27:16,880 --> 00:27:20,159
and get get a public ip or a port map in

703
00:27:19,520 --> 00:27:21,760
there

704
00:27:20,159 --> 00:27:24,000
and that will you'll be able to

705
00:27:21,760 --> 00:27:26,080
establish connection a lot of the time

706
00:27:24,000 --> 00:27:28,320
it's easy to get a poor outbound port

707
00:27:26,080 --> 00:27:31,039
open or it's already open and you don't

708
00:27:28,320 --> 00:27:31,039
have to do anything

709
00:27:31,120 --> 00:27:34,239
finally are all these competing

710
00:27:32,960 --> 00:27:35,840
protocols a problem

711
00:27:34,240 --> 00:27:39,360
it's just software after all and they

712
00:27:35,840 --> 00:27:41,918
can all be implemented in products

713
00:27:39,360 --> 00:27:42,719
well it's a problem because until one

714
00:27:41,919 --> 00:27:45,039
standard

715
00:27:42,720 --> 00:27:46,799
dominates you know somebody that wants

716
00:27:45,039 --> 00:27:49,600
to create a new link

717
00:27:46,799 --> 00:27:51,200
is when i have to decide do i use risk

718
00:27:49,600 --> 00:27:54,000
do i use srt

719
00:27:51,200 --> 00:27:54,880
do i buy dozer do i buy some other

720
00:27:54,000 --> 00:28:01,120
implementation

721
00:27:54,880 --> 00:28:04,880
what do i do so i paid my money on wrist

722
00:28:01,120 --> 00:28:07,520
but i'm biased so any other question

723
00:28:04,880 --> 00:28:07,520
from the floor

724
00:28:08,480 --> 00:28:15,520
no well thank you ringo

725
00:28:13,200 --> 00:28:16,720
i would like to thank all the organizers

726
00:28:15,520 --> 00:28:20,639
of this nicely room

727
00:28:16,720 --> 00:28:23,360
the ebu france and ben who helped us

728
00:28:20,640 --> 00:28:24,480
film everything right behind the camera

729
00:28:23,360 --> 00:28:26,959
kirana

730
00:28:24,480 --> 00:28:28,799
and all of you attended and will now

731
00:28:26,960 --> 00:28:31,120
help us clean the room

732
00:28:28,799 --> 00:28:32,799
so please take all the trust that you

733
00:28:31,120 --> 00:28:42,559
can and put it in the

734
00:28:32,799 --> 00:28:42,559
background thank you

