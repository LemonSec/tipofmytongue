1
00:00:06,560 --> 00:00:12,879
hello everyone

2
00:00:08,639 --> 00:00:15,120
so today we will go through lfvm

3
00:00:12,880 --> 00:00:17,840
and express within the free basic

4
00:00:15,120 --> 00:00:21,038
ecosystem

5
00:00:17,840 --> 00:00:23,198
so i'm a david carlier according to

6
00:00:21,039 --> 00:00:25,519
various open source project can but more

7
00:00:23,199 --> 00:00:29,119
or less related to the obesity world

8
00:00:25,519 --> 00:00:32,640
can be video games can be enterprise

9
00:00:29,119 --> 00:00:33,600
or routed software more related to the

10
00:00:32,640 --> 00:00:38,800
topic of the day

11
00:00:33,600 --> 00:00:38,800
i 11 kilometer since may 2018

12
00:00:38,879 --> 00:00:47,760
okay so what is llvm

13
00:00:44,559 --> 00:00:49,440
lvm is a compound of two sets and front

14
00:00:47,760 --> 00:00:53,039
ends

15
00:00:49,440 --> 00:00:57,280
frontals which are able to generate

16
00:00:53,039 --> 00:01:00,879
what we call lvm ir ir stands for

17
00:00:57,280 --> 00:01:04,080
intimidated representations kind of

18
00:01:00,879 --> 00:01:07,360
high level assembly but much more

19
00:01:04,080 --> 00:01:10,400
architectural entrepreneurs so if

20
00:01:07,360 --> 00:01:12,080
we take as an example clang or clunk

21
00:01:10,400 --> 00:01:14,320
plus plus proteins

22
00:01:12,080 --> 00:01:16,960
from your source code the elixir will

23
00:01:14,320 --> 00:01:19,279
generate symbols

24
00:01:16,960 --> 00:01:20,399
which will be sent to to the same map to

25
00:01:19,280 --> 00:01:24,080
generate

26
00:01:20,400 --> 00:01:27,439
the ast which is abstract syntax tree

27
00:01:24,080 --> 00:01:30,720
then to the code gen to generate

28
00:01:27,439 --> 00:01:30,720
the allivem ir

29
00:01:32,400 --> 00:01:39,119
so with llvm

30
00:01:35,759 --> 00:01:42,159
we have also tools you can build

31
00:01:39,119 --> 00:01:45,200
a nice just time compilers you can

32
00:01:42,159 --> 00:01:48,399
extend lfm itself for instance

33
00:01:45,200 --> 00:01:50,000
you can make module what we call module

34
00:01:48,399 --> 00:01:53,280
pass which is

35
00:01:50,000 --> 00:01:55,280
an exception on the compilation unit

36
00:01:53,280 --> 00:01:58,399
perspective

37
00:01:55,280 --> 00:02:01,439
and then function pass basic block pass

38
00:01:58,399 --> 00:02:04,479
and so on when you can

39
00:02:01,439 --> 00:02:06,559
do social checking you can add some

40
00:02:04,479 --> 00:02:08,000
a structure remove some instruction if

41
00:02:06,560 --> 00:02:11,840
you like

42
00:02:08,000 --> 00:02:15,200
it's uh the compilation times

43
00:02:11,840 --> 00:02:18,959
pass right

44
00:02:15,200 --> 00:02:19,519
you have in addition the possibility to

45
00:02:18,959 --> 00:02:22,560
do some

46
00:02:19,520 --> 00:02:26,560
static code analysis

47
00:02:22,560 --> 00:02:27,680
we have what we call sanitizers we go

48
00:02:26,560 --> 00:02:31,200
through

49
00:02:27,680 --> 00:02:34,560
later all of this

50
00:02:31,200 --> 00:02:38,238
available in freebsd since

51
00:02:34,560 --> 00:02:41,360
9 10 ish first it was just an option

52
00:02:38,239 --> 00:02:46,560
parallel to the old gcc 4.2

53
00:02:41,360 --> 00:02:46,560
it was first a need to to replace

54
00:02:46,800 --> 00:02:54,480
the old 4.2 which was the last gpl 2

55
00:02:50,959 --> 00:02:56,879
version so it was quite quite a blocker

56
00:02:54,480 --> 00:02:57,679
because from this we can't do c plus

57
00:02:56,879 --> 00:03:00,959
plus 11

58
00:02:57,680 --> 00:03:03,040
and so forth you can do only c 99 so it

59
00:03:00,959 --> 00:03:05,840
was time to to replace this

60
00:03:03,040 --> 00:03:05,840
for the system

61
00:03:06,480 --> 00:03:11,679
so then it became full part of the

62
00:03:08,560 --> 00:03:15,200
system since the free basic 10

63
00:03:11,680 --> 00:03:18,959
i mean it's used to build the kernel

64
00:03:15,200 --> 00:03:21,280
the other land most of the most of the

65
00:03:18,959 --> 00:03:21,280
parts

66
00:03:22,480 --> 00:03:29,040
so so yes the freebsd code base gets

67
00:03:25,599 --> 00:03:33,040
some a lot of changes to fit

68
00:03:29,040 --> 00:03:36,480
clang criteria

69
00:03:33,040 --> 00:03:40,239
hello yes

70
00:03:36,480 --> 00:03:44,399
a lot of challenges to fit more modern

71
00:03:40,239 --> 00:03:46,400
style and so on so so then

72
00:03:44,400 --> 00:03:48,159
and then the time goes more and more

73
00:03:46,400 --> 00:03:51,360
architecture were supported

74
00:03:48,159 --> 00:03:54,720
a amd 64 arm

75
00:03:51,360 --> 00:03:55,840
until 90 and then maybe now maybe only

76
00:03:54,720 --> 00:03:59,599
spark 64

77
00:03:55,840 --> 00:04:03,040
remains a bit behind the rest but

78
00:03:59,599 --> 00:04:03,040
that's already a nice progress

79
00:04:04,239 --> 00:04:15,280
so yes here we go

80
00:04:07,840 --> 00:04:17,918
so solidizers what are these

81
00:04:15,280 --> 00:04:19,199
i it's not really to clean up things uh

82
00:04:17,918 --> 00:04:22,400
unlike the main

83
00:04:19,199 --> 00:04:24,160
the name my i say it's more to to detect

84
00:04:22,400 --> 00:04:28,239
at home time

85
00:04:24,160 --> 00:04:30,400
some type of bugs so it's kind of

86
00:04:28,240 --> 00:04:31,280
complete pretty much well the static

87
00:04:30,400 --> 00:04:35,280
analysis

88
00:04:31,280 --> 00:04:38,400
part so so sanitizer

89
00:04:35,280 --> 00:04:41,599
gives many different

90
00:04:38,400 --> 00:04:42,320
runtime gatherings to detect some type

91
00:04:41,600 --> 00:04:46,160
of

92
00:04:42,320 --> 00:04:49,199
work for memory for rest condition

93
00:04:46,160 --> 00:04:49,759
for several kind of overflow for

94
00:04:49,199 --> 00:04:52,639
instance

95
00:04:49,759 --> 00:04:53,199
we have memory sanitizer it's mainly

96
00:04:52,639 --> 00:04:56,880
about

97
00:04:53,199 --> 00:05:00,000
initial variables

98
00:04:56,880 --> 00:05:01,520
address sanitizer it's more for a double

99
00:05:00,000 --> 00:05:03,840
free

100
00:05:01,520 --> 00:05:07,280
[Music]

101
00:05:03,840 --> 00:05:10,320
epsic overflow right for

102
00:05:07,280 --> 00:05:11,758
only netbehz also in addition the leak

103
00:05:10,320 --> 00:05:16,479
sanitizer

104
00:05:11,759 --> 00:05:19,199
which which is pretty effective and

105
00:05:16,479 --> 00:05:20,880
also have much less performance compared

106
00:05:19,199 --> 00:05:24,000
to tools like valgrind

107
00:05:20,880 --> 00:05:26,719
for example which can be 20 times slower

108
00:05:24,000 --> 00:05:28,880
whereas with other sanitizer it's five

109
00:05:26,720 --> 00:05:32,160
times slower sometimes

110
00:05:28,880 --> 00:05:35,039
so yeah it's pretty much

111
00:05:32,160 --> 00:05:36,000
we have undefined behavior sanitizer

112
00:05:35,039 --> 00:05:38,400
this kind of

113
00:05:36,000 --> 00:05:39,440
small switch swiss knife side other

114
00:05:38,400 --> 00:05:42,560
admits

115
00:05:39,440 --> 00:05:43,280
there is no shadow memory mapping unlike

116
00:05:42,560 --> 00:05:46,720
adversaries

117
00:05:43,280 --> 00:05:49,520
or memory sanitizers so so they

118
00:05:46,720 --> 00:05:52,960
it was for instance possible to party to

119
00:05:49,520 --> 00:05:56,159
open bsd for this

120
00:05:52,960 --> 00:05:58,719
for this reason it's it's kind of small

121
00:05:56,160 --> 00:06:00,460
uh site as it's only for attack overflow

122
00:05:58,720 --> 00:06:02,400
with the line pointers

123
00:06:00,460 --> 00:06:05,520
[Music]

124
00:06:02,400 --> 00:06:07,840
in the performance drop is pretty small

125
00:06:05,520 --> 00:06:09,359
compared to right you can combine it

126
00:06:07,840 --> 00:06:11,440
with other sanitizer

127
00:06:09,360 --> 00:06:13,680
whereas memory sanitizer and address

128
00:06:11,440 --> 00:06:15,360
sanitizer you can't use it

129
00:06:13,680 --> 00:06:18,319
use them in the same time they are

130
00:06:15,360 --> 00:06:22,000
mutually exclusive

131
00:06:18,319 --> 00:06:25,360
we have a nice rest condition detection

132
00:06:22,000 --> 00:06:25,360
called head sanitizer

133
00:06:28,160 --> 00:06:32,160
so all of them are supported at freebsd

134
00:06:31,039 --> 00:06:35,120
in addition

135
00:06:32,160 --> 00:06:37,120
we have components like deep further to

136
00:06:35,120 --> 00:06:39,039
do some fuzzing

137
00:06:37,120 --> 00:06:42,639
and x-ray transmutation to do some

138
00:06:39,039 --> 00:06:42,639
performance benchmarking

139
00:06:46,840 --> 00:06:49,840
right

140
00:06:51,840 --> 00:07:05,840
so for example sorry

141
00:07:02,720 --> 00:07:08,960
so for example this very basic

142
00:07:05,840 --> 00:07:13,679
code address is perfectly capable

143
00:07:08,960 --> 00:07:16,960
to catch the first the first error

144
00:07:13,680 --> 00:07:18,000
the double free is perfectly capable to

145
00:07:16,960 --> 00:07:21,359
catch it

146
00:07:18,000 --> 00:07:21,360
so use after free as well

147
00:07:28,880 --> 00:07:36,479
as you can see it detects the first hip

148
00:07:33,039 --> 00:07:38,719
overflow as you can see it displays a

149
00:07:36,479 --> 00:07:38,719
line

150
00:07:42,840 --> 00:07:45,840
here

151
00:07:53,039 --> 00:07:58,639
memory sanitizer as well as capab to

152
00:07:56,160 --> 00:08:01,840
catch this initialized variable

153
00:07:58,639 --> 00:08:05,759
which can go under the radar

154
00:08:01,840 --> 00:08:08,400
very well in production it works

155
00:08:05,759 --> 00:08:09,919
ish in all this and production

156
00:08:08,400 --> 00:08:13,840
environment but

157
00:08:09,919 --> 00:08:13,840
it's not correct code obviously

158
00:08:21,680 --> 00:08:27,759
as well crazy is perfectly capable

159
00:08:24,720 --> 00:08:31,120
to catch this nice condition this

160
00:08:27,759 --> 00:08:33,759
obvious condition

161
00:08:31,120 --> 00:08:33,759
like this

162
00:08:39,279 --> 00:08:45,200
again it show you where the problem

163
00:08:42,880 --> 00:08:45,200
lies

164
00:08:48,080 --> 00:08:55,839
i'm sorry okay

165
00:08:58,399 --> 00:09:01,920
so air memory sanitizer was able to

166
00:09:01,440 --> 00:09:05,519
catch

167
00:09:01,920 --> 00:09:09,839
the initera's variable

168
00:09:05,519 --> 00:09:09,839
very well

169
00:09:14,080 --> 00:09:17,440
is capable to catch those two obvious

170
00:09:16,480 --> 00:09:20,800
errors

171
00:09:17,440 --> 00:09:37,839
the the alignment issue and then

172
00:09:20,800 --> 00:09:37,839
the antenna will follow which is below

173
00:09:54,240 --> 00:10:08,160
as you can see

174
00:10:04,399 --> 00:10:08,160
oh no okay that's good

175
00:10:10,240 --> 00:10:16,000
so here to show you the flag to pass to

176
00:10:14,320 --> 00:10:20,959
the to the front ends

177
00:10:16,000 --> 00:10:25,360
so memorize this memory address

178
00:10:20,959 --> 00:10:25,359
threats are traded on different behavior

179
00:10:30,839 --> 00:10:33,839
right

180
00:10:44,839 --> 00:10:50,160
so

181
00:10:47,440 --> 00:10:52,640
so we mentioned earlier the leap further

182
00:10:50,160 --> 00:10:52,640
component

183
00:10:53,040 --> 00:10:56,880
but what is fuzzing all about in the

184
00:10:54,800 --> 00:10:57,199
first place well it's a tested technique

185
00:10:56,880 --> 00:11:00,000
to

186
00:10:57,200 --> 00:11:01,200
to catch certain type of bugs with

187
00:11:00,000 --> 00:11:03,600
software

188
00:11:01,200 --> 00:11:04,320
mainly libraries i might say which

189
00:11:03,600 --> 00:11:07,600
relies on

190
00:11:04,320 --> 00:11:09,920
external inputs can be just reading a

191
00:11:07,600 --> 00:11:13,760
config file can be listed in a circuit

192
00:11:09,920 --> 00:11:17,120
whatever you like if we take another an

193
00:11:13,760 --> 00:11:19,680
example an image picture pressure

194
00:11:17,120 --> 00:11:20,399
if you want to fuzz the the picture

195
00:11:19,680 --> 00:11:23,760
format

196
00:11:20,399 --> 00:11:28,880
detection if you want to first if it's

197
00:11:23,760 --> 00:11:31,600
how it is png gp and so on

198
00:11:28,880 --> 00:11:32,560
so the lip filter will will use inputs

199
00:11:31,600 --> 00:11:35,839
which we

200
00:11:32,560 --> 00:11:40,079
can call purposes in the fuzzing

201
00:11:35,839 --> 00:11:41,920
vocabulary so those corporates

202
00:11:40,079 --> 00:11:43,680
don't have to be full picture can be

203
00:11:41,920 --> 00:11:47,040
just the first bytes

204
00:11:43,680 --> 00:11:48,000
of the picture format then the deep

205
00:11:47,040 --> 00:11:51,680
further we take

206
00:11:48,000 --> 00:11:54,880
those purposes we proceed to do some

207
00:11:51,680 --> 00:11:57,680
transformation which we call mutations

208
00:11:54,880 --> 00:11:58,800
it will answer some random bites to some

209
00:11:57,680 --> 00:12:01,839
random offset

210
00:11:58,800 --> 00:12:04,240
remove some other bites eventually in

211
00:12:01,839 --> 00:12:08,320
order to trigger segmentation faults

212
00:12:04,240 --> 00:12:11,600
this era whatever those mutations

213
00:12:08,320 --> 00:12:12,560
will be then stored so they can be

214
00:12:11,600 --> 00:12:16,240
reused

215
00:12:12,560 --> 00:12:16,239
when once you fix your bugs

216
00:12:16,320 --> 00:12:22,800
so fuzzing is meant to be around

217
00:12:19,600 --> 00:12:25,040
long enough i mean hours at least if not

218
00:12:22,800 --> 00:12:28,079
days if not weeks if necessary

219
00:12:25,040 --> 00:12:31,199
in order to to cover the code as

220
00:12:28,079 --> 00:12:34,239
as much as possible

221
00:12:31,200 --> 00:12:34,880
so as you can see that completes pretty

222
00:12:34,240 --> 00:12:39,360
well

223
00:12:34,880 --> 00:12:42,560
the unit test we all know

224
00:12:39,360 --> 00:12:44,880
but lead physique

225
00:12:42,560 --> 00:12:45,920
is fuzzing is nice but there is some

226
00:12:44,880 --> 00:12:48,480
culprits i mean

227
00:12:45,920 --> 00:12:49,439
as i said it fits better with library

228
00:12:48,480 --> 00:12:52,880
because with

229
00:12:49,440 --> 00:12:53,279
monolithic for instance if you want to

230
00:12:52,880 --> 00:12:58,079
fuzz

231
00:12:53,279 --> 00:13:02,079
nginx that can become very difficult

232
00:12:58,079 --> 00:13:05,120
it's a software relay relying on events

233
00:13:02,079 --> 00:13:08,719
and further run the code

234
00:13:05,120 --> 00:13:09,839
several times that can contradict pretty

235
00:13:08,720 --> 00:13:12,880
well pretty much

236
00:13:09,839 --> 00:13:14,160
the epic application workflow for for

237
00:13:12,880 --> 00:13:16,320
this case

238
00:13:14,160 --> 00:13:17,439
you might need to to do a lot of

239
00:13:16,320 --> 00:13:35,839
contrasts

240
00:13:17,440 --> 00:13:35,839
in order to fit further needs

241
00:14:00,839 --> 00:14:06,000
oh

242
00:14:03,360 --> 00:14:06,000
so here

243
00:14:06,560 --> 00:14:12,079
to display the our lip puzzle works you

244
00:14:09,680 --> 00:14:15,279
have your first bin array

245
00:14:12,079 --> 00:14:18,079
you have one or several core processes

246
00:14:15,279 --> 00:14:18,959
we have also as an option it supports

247
00:14:18,079 --> 00:14:22,479
dictionary

248
00:14:18,959 --> 00:14:24,719
dictionary is a sort of way to to guide

249
00:14:22,480 --> 00:14:25,920
the phrasing sometimes you may want may

250
00:14:24,720 --> 00:14:29,040
want to avoid

251
00:14:25,920 --> 00:14:30,959
too much pointless hardness

252
00:14:29,040 --> 00:14:32,399
let's take as an example you want to

253
00:14:30,959 --> 00:14:34,880
fuzz

254
00:14:32,399 --> 00:14:37,680
http server you may not want to fuzz

255
00:14:34,880 --> 00:14:39,680
keywords like get put direct and so on

256
00:14:37,680 --> 00:14:40,880
just maybe some part of the client

257
00:14:39,680 --> 00:14:44,000
request

258
00:14:40,880 --> 00:14:47,839
so dictionary is a good way to to

259
00:14:44,000 --> 00:14:52,160
to to to to guide a little bit

260
00:14:47,839 --> 00:14:55,199
make more sense of the freezing

261
00:14:52,160 --> 00:14:57,519
and then with

262
00:14:55,199 --> 00:14:58,639
the the corpus and then eventually the

263
00:14:57,519 --> 00:15:01,760
dictionary

264
00:14:58,639 --> 00:15:03,680
the inputs will undergo some mutation

265
00:15:01,760 --> 00:15:05,279
and those mutations will be then stored

266
00:15:03,680 --> 00:15:13,839
in the same place

267
00:15:05,279 --> 00:15:13,839
as the original inputs

268
00:15:24,839 --> 00:15:29,839
so

269
00:15:26,639 --> 00:15:32,480
so oh in politics

270
00:15:29,839 --> 00:15:32,880
work live further you need to to at

271
00:15:32,480 --> 00:15:35,839
least

272
00:15:32,880 --> 00:15:38,480
implement lfm for the test when input

273
00:15:35,839 --> 00:15:42,560
which take as an argument

274
00:15:38,480 --> 00:15:42,560
the the mutated data

275
00:15:43,120 --> 00:15:48,399
so so it's a social function

276
00:15:46,240 --> 00:15:50,000
right and then you do what you have to

277
00:15:48,399 --> 00:15:52,959
do with this

278
00:15:50,000 --> 00:15:55,839
so for instance there is an obvious

279
00:15:52,959 --> 00:15:59,279
overflow here

280
00:15:55,839 --> 00:16:02,720
so that's why i recommend to to combine

281
00:15:59,279 --> 00:16:09,839
further with at least an essential like

282
00:16:02,720 --> 00:16:09,839
a preservative for instance

283
00:16:10,000 --> 00:16:23,839
you compile your first binary

284
00:16:42,690 --> 00:16:45,779
[Music]

285
00:16:48,839 --> 00:16:51,839
um

286
00:17:02,839 --> 00:17:05,839
uh

287
00:17:15,439 --> 00:17:19,839
so i type this

288
00:17:32,160 --> 00:17:47,840
and then

289
00:17:48,559 --> 00:17:52,080
it comes with several options you can

290
00:17:51,520 --> 00:17:55,360
shows

291
00:17:52,080 --> 00:17:58,480
how how much run it will do

292
00:17:55,360 --> 00:18:00,080
so the memory usage limits if you want

293
00:17:58,480 --> 00:18:01,670
to do some parallel

294
00:18:00,080 --> 00:18:03,600
jobs

295
00:18:01,670 --> 00:18:07,120
[Music]

296
00:18:03,600 --> 00:18:07,120
what you can do as well

297
00:18:08,480 --> 00:18:15,520
is the the the max length of

298
00:18:11,840 --> 00:18:20,720
inputs the initial seed

299
00:18:15,520 --> 00:18:24,720
for randomness it has plenty

300
00:18:20,720 --> 00:18:27,840
but again on three basis elixir

301
00:18:24,720 --> 00:18:30,160
detection is not supported but there's

302
00:18:27,840 --> 00:18:30,159
many

303
00:18:35,200 --> 00:18:43,840
so then you have to to create

304
00:18:38,240 --> 00:18:43,840
a meaningful purpose folder

305
00:19:18,400 --> 00:19:27,600
for instance i asked him to run

306
00:19:24,400 --> 00:19:30,400
to 200 time with this

307
00:19:27,600 --> 00:19:30,399
input folder

308
00:19:32,640 --> 00:19:36,799
and then it was able to catch the the

309
00:19:35,520 --> 00:19:53,840
overflow

310
00:19:36,799 --> 00:19:53,840
so it created a crash file

311
00:20:04,840 --> 00:20:07,840
okay

312
00:20:32,840 --> 00:20:35,840
okay

313
00:20:46,840 --> 00:20:49,840
again

314
00:20:52,880 --> 00:21:00,240
so yeah normally it it should create

315
00:20:56,400 --> 00:21:02,690
some uh mutated data with a nash code

316
00:21:00,240 --> 00:21:05,759
and then the transform

317
00:21:02,690 --> 00:21:05,759
[Music]

318
00:21:14,840 --> 00:21:17,840
inputs

319
00:21:28,840 --> 00:21:31,840
um

320
00:21:42,840 --> 00:21:45,840
so

321
00:21:54,480 --> 00:21:59,520
so ah as you can see okay it is

322
00:22:02,159 --> 00:22:10,640
so we have now uh exclusion

323
00:22:06,159 --> 00:22:10,640
it's a as i said earlier

324
00:22:10,720 --> 00:22:17,360
for doing performance benchmarking means

325
00:22:14,799 --> 00:22:18,799
for example you are doing virtually the

326
00:22:17,360 --> 00:22:19,918
new version of your software for your

327
00:22:18,799 --> 00:22:21,918
company

328
00:22:19,919 --> 00:22:23,840
and then a customer of yours calls you

329
00:22:21,919 --> 00:22:27,200
to tell you that

330
00:22:23,840 --> 00:22:29,280
this new role is at the the

331
00:22:27,200 --> 00:22:31,679
severe performance drops compared to the

332
00:22:29,280 --> 00:22:34,720
previous version

333
00:22:31,679 --> 00:22:36,720
so extra smooth action allows you at

334
00:22:34,720 --> 00:22:37,919
least will help you to find out where

335
00:22:36,720 --> 00:22:41,200
the bottlenecks

336
00:22:37,919 --> 00:22:45,039
really lies

337
00:22:41,200 --> 00:22:48,240
so excrusmotation will when you compile

338
00:22:45,039 --> 00:22:51,280
your binary with x-rays mutation will

339
00:22:48,240 --> 00:22:53,840
put some asthmatic hook in each

340
00:22:51,280 --> 00:22:56,240
functional entry in each function

341
00:22:53,840 --> 00:22:57,760
excites

342
00:22:56,240 --> 00:22:59,760
for the instrument and function because

343
00:22:57,760 --> 00:23:00,559
you can choose which function you want

344
00:22:59,760 --> 00:23:03,600
to assume at

345
00:23:00,559 --> 00:23:06,480
which function you don't want to

346
00:23:03,600 --> 00:23:06,959
as for instance the more function you

347
00:23:06,480 --> 00:23:10,000
assume

348
00:23:06,960 --> 00:23:11,679
the slower the binary will get so you

349
00:23:10,000 --> 00:23:14,799
have to choose carefully

350
00:23:11,679 --> 00:23:23,840
which which part of the code you want

351
00:23:14,799 --> 00:23:23,840
to experiment

352
00:23:26,559 --> 00:23:29,520
in order to do this

353
00:23:30,400 --> 00:23:37,440
you need to add those attributes

354
00:23:34,799 --> 00:23:39,918
so you you want to ask for not always

355
00:23:37,440 --> 00:23:39,919
those two

356
00:23:43,520 --> 00:23:50,158
you can also to say you don't want to

357
00:23:46,559 --> 00:23:53,918
to you have to to to to do

358
00:23:50,159 --> 00:23:53,919
to write these attributes

359
00:23:58,640 --> 00:24:05,840
to to describe the function you you you

360
00:24:01,120 --> 00:24:05,840
want to avoid to instrument

361
00:24:26,320 --> 00:24:30,000
so by default when you run once you run

362
00:24:28,640 --> 00:24:33,440
your your

363
00:24:30,000 --> 00:24:36,320
updated binary it will create

364
00:24:33,440 --> 00:24:36,960
a file but you can change the the file

365
00:24:36,320 --> 00:24:39,120
name

366
00:24:36,960 --> 00:24:41,840
by default x y log is the name of the

367
00:24:39,120 --> 00:24:41,840
application and then

368
00:24:44,840 --> 00:24:52,080
right but then

369
00:24:48,720 --> 00:24:55,760
this llvm x-ray

370
00:24:52,080 --> 00:24:55,760
we can we can find out

371
00:24:59,200 --> 00:25:02,880
you can do some accounting that means

372
00:25:01,120 --> 00:25:04,879
showing where the your applications

373
00:25:02,880 --> 00:25:06,480
spend most of the time you can order

374
00:25:04,880 --> 00:25:10,480
because it will generate kind of

375
00:25:06,480 --> 00:25:10,480
csv like presentation

376
00:25:24,000 --> 00:25:28,960
so it says here the first version of the

377
00:25:27,360 --> 00:25:32,158
fibonacci

378
00:25:28,960 --> 00:25:36,480
function is the

379
00:25:32,159 --> 00:25:40,240
the bottleneck in this case right

380
00:25:36,480 --> 00:25:43,039
so that's nice adding some battery bits

381
00:25:40,240 --> 00:25:43,440
in in practical i might say you might

382
00:25:43,039 --> 00:25:46,480
not

383
00:25:43,440 --> 00:25:46,960
want to touch your code too much to that

384
00:25:46,480 --> 00:25:50,400
degree

385
00:25:46,960 --> 00:25:53,279
at least when it's your cooperate

386
00:25:50,400 --> 00:25:54,400
work so fortunately there is another

387
00:25:53,279 --> 00:25:58,240
solution

388
00:25:54,400 --> 00:26:01,360
it's via an external configuration file

389
00:25:58,240 --> 00:26:05,440
as follow can say

390
00:26:01,360 --> 00:26:10,639
please always assume those those two

391
00:26:05,440 --> 00:26:24,400
and you can say like this too never

392
00:26:10,640 --> 00:26:29,919
as not this one please and then you

393
00:26:24,400 --> 00:26:29,919
can pass this config file as follow

394
00:26:36,840 --> 00:26:42,639
right

395
00:26:39,440 --> 00:26:53,840
same thing it generates

396
00:26:42,640 --> 00:26:53,840
the same binary

397
00:26:57,679 --> 00:27:02,960
so to summaries summarize

398
00:27:00,799 --> 00:27:06,080
here your your binary compiled with

399
00:27:02,960 --> 00:27:09,919
extra instrumentation

400
00:27:06,080 --> 00:27:13,678
so i mentioned uh uh asumutas and oak

401
00:27:09,919 --> 00:27:17,039
but they are empty until you run you run

402
00:27:13,679 --> 00:27:19,840
the binary and then it will fill with

403
00:27:17,039 --> 00:27:20,320
with the timer with timer so in the

404
00:27:19,840 --> 00:27:22,799
beginning

405
00:27:20,320 --> 00:27:25,279
of each function it is in the end the

406
00:27:22,799 --> 00:27:28,960
excite point of of each function

407
00:27:25,279 --> 00:27:28,960
in order to generate the delta

408
00:27:32,480 --> 00:27:36,000
so with llvm x-ray graph you can

409
00:27:34,640 --> 00:27:37,360
generate

410
00:27:36,000 --> 00:27:40,399
the chord graph and then from this you

411
00:27:37,360 --> 00:27:48,639
can generate svg

412
00:27:40,399 --> 00:27:51,360
for example

413
00:27:48,640 --> 00:27:52,159
so uh exponential mutation works works

414
00:27:51,360 --> 00:27:55,360
well with

415
00:27:52,159 --> 00:27:57,520
multi-thread uh case but

416
00:27:55,360 --> 00:27:59,199
you you have the possibility to to

417
00:27:57,520 --> 00:28:00,158
aggregate data because it can become

418
00:27:59,200 --> 00:28:02,880
very variables

419
00:28:00,159 --> 00:28:04,000
obviously so you can aggregate you can

420
00:28:02,880 --> 00:28:07,679
tell to aggregate

421
00:28:04,000 --> 00:28:07,679
the data in one point

422
00:28:09,440 --> 00:28:17,840
so um

423
00:28:25,840 --> 00:28:29,760
so yes that will be all unfortunately my

424
00:28:28,559 --> 00:28:32,799
freebsd

425
00:28:29,760 --> 00:28:33,600
machine had crashed yesterday so i

426
00:28:32,799 --> 00:28:36,080
couldn't

427
00:28:33,600 --> 00:28:36,080
use it

428
00:28:37,279 --> 00:28:42,880
if you have any concerned questions

429
00:28:44,399 --> 00:28:53,439
some questions

