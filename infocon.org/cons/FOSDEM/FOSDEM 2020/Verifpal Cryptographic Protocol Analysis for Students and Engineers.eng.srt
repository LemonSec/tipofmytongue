1
00:00:13,280 --> 00:00:17,919
hello everyone

2
00:00:14,960 --> 00:00:17,920
so

3
00:00:28,840 --> 00:00:34,559
hello

4
00:00:31,599 --> 00:00:35,760
okay uh thank you very much um so i'm

5
00:00:34,559 --> 00:00:38,559
going to be talking about

6
00:00:35,760 --> 00:00:39,680
birthpal which is a new framework for

7
00:00:38,559 --> 00:00:41,280
the cryptographic

8
00:00:39,680 --> 00:00:43,200
uh for the analysis of cryptographic

9
00:00:41,280 --> 00:00:46,320
protocols so

10
00:00:43,200 --> 00:00:50,640
uh you guys use tls right https

11
00:00:46,320 --> 00:00:54,399
signal uh kerberos wireguard openvpn

12
00:00:50,640 --> 00:00:58,000
ipsec uh fido uh

13
00:00:54,399 --> 00:00:59,520
mqtt all of these protocols tend to have

14
00:00:58,000 --> 00:01:01,039
some encryption in them and it's

15
00:00:59,520 --> 00:01:02,480
important to verify the security of

16
00:01:01,039 --> 00:01:03,920
these protocols because

17
00:01:02,480 --> 00:01:06,158
there could be bugs like you know tls

18
00:01:03,920 --> 00:01:07,680
1.1 had bugs and then tls 1.2 head bugs

19
00:01:06,159 --> 00:01:08,960
and then tls 1.3 it was the first

20
00:01:07,680 --> 00:01:10,720
version of tls that was actually

21
00:01:08,960 --> 00:01:12,240
produced

22
00:01:10,720 --> 00:01:14,240
in collaboration with people who work

23
00:01:12,240 --> 00:01:16,000
and the formal analysis and verification

24
00:01:14,240 --> 00:01:17,679
of protocols in order to eliminate bugs

25
00:01:16,000 --> 00:01:18,560
during the design phase and not during

26
00:01:17,680 --> 00:01:21,520
the

27
00:01:18,560 --> 00:01:22,640
production phase so um formal

28
00:01:21,520 --> 00:01:24,158
verification is a

29
00:01:22,640 --> 00:01:25,680
technology that's existed for a while

30
00:01:24,159 --> 00:01:27,759
where you can use software tools in

31
00:01:25,680 --> 00:01:30,960
order to analyze protocols like

32
00:01:27,759 --> 00:01:32,560
tls and signal to determine whether they

33
00:01:30,960 --> 00:01:34,720
actually achieve the security guarantees

34
00:01:32,560 --> 00:01:36,799
that you expect them to achieve

35
00:01:34,720 --> 00:01:39,360
and it turns out that protocols can

36
00:01:36,799 --> 00:01:40,640
behave in unexpected ways and that's why

37
00:01:39,360 --> 00:01:42,399
this has been a very interesting and

38
00:01:40,640 --> 00:01:45,119
productive field with

39
00:01:42,399 --> 00:01:46,720
many different types of tools um for

40
00:01:45,119 --> 00:01:48,240
verifying primitives and implementations

41
00:01:46,720 --> 00:01:48,960
there's a different set of utilities but

42
00:01:48,240 --> 00:01:51,679
today

43
00:01:48,960 --> 00:01:53,679
what i want to talk about is verifying

44
00:01:51,680 --> 00:01:56,079
protocols

45
00:01:53,680 --> 00:01:57,920
and not primitives or implementations so

46
00:01:56,079 --> 00:02:00,639
when you want to verify a protocol

47
00:01:57,920 --> 00:02:01,920
generally speaking you do something

48
00:02:00,640 --> 00:02:03,040
called the symbolic protocol

49
00:02:01,920 --> 00:02:04,799
verification

50
00:02:03,040 --> 00:02:06,960
uh the main tools for this in the path

51
00:02:04,799 --> 00:02:08,959
for the past 10 20 years

52
00:02:06,960 --> 00:02:10,639
have been proveref and tamarin they've

53
00:02:08,959 --> 00:02:12,480
they've existed for a very long time

54
00:02:10,639 --> 00:02:13,839
proverb has existed for almost 20 years

55
00:02:12,480 --> 00:02:16,079
in one form or another and tamaran has

56
00:02:13,840 --> 00:02:18,000
existed i believe for at least 10 years

57
00:02:16,080 --> 00:02:19,280
and the way that you use these tools is

58
00:02:18,000 --> 00:02:21,440
that you basically

59
00:02:19,280 --> 00:02:22,319
write a model of signal or a model of

60
00:02:21,440 --> 00:02:23,599
tls

61
00:02:22,319 --> 00:02:26,238
you know like you describe what

62
00:02:23,599 --> 00:02:28,000
cryptographic operations happen and

63
00:02:26,239 --> 00:02:29,360
uh for example we can describe a model

64
00:02:28,000 --> 00:02:31,440
where signal

65
00:02:29,360 --> 00:02:33,040
uh a signal session exists where alice

66
00:02:31,440 --> 00:02:34,560
sends a message to bob and bob responds

67
00:02:33,040 --> 00:02:37,040
and alice responds again

68
00:02:34,560 --> 00:02:38,319
or tls 1.3 between a server and a bunch

69
00:02:37,040 --> 00:02:40,480
of clients and so on

70
00:02:38,319 --> 00:02:42,238
and then we can ask the verifier

71
00:02:40,480 --> 00:02:44,640
questions based on the model

72
00:02:42,239 --> 00:02:45,440
so for example you know in this model of

73
00:02:44,640 --> 00:02:48,160
tls

74
00:02:45,440 --> 00:02:49,599
is are the clients authenticated to the

75
00:02:48,160 --> 00:02:52,000
server is the server authenticated to

76
00:02:49,599 --> 00:02:55,200
clients or can an impersonation happen

77
00:02:52,000 --> 00:02:56,239
are the payloads confidential against an

78
00:02:55,200 --> 00:02:58,319
active attacker

79
00:02:56,239 --> 00:02:59,680
and then the verifier will try to find

80
00:02:58,319 --> 00:03:01,679
contradictions

81
00:02:59,680 --> 00:03:03,120
so this is great right it's been used to

82
00:03:01,680 --> 00:03:04,080
analyze and papers have been published

83
00:03:03,120 --> 00:03:06,239
in the past four years

84
00:03:04,080 --> 00:03:08,159
at top level security conferences on

85
00:03:06,239 --> 00:03:09,920
formally verifying and finding attacks

86
00:03:08,159 --> 00:03:11,280
and signal tls

87
00:03:09,920 --> 00:03:13,280
noise protocol framework scuttlebutt

88
00:03:11,280 --> 00:03:15,200
bluetooth 5g and these papers you know

89
00:03:13,280 --> 00:03:17,840
they're really well received

90
00:03:15,200 --> 00:03:19,280
sometimes they win awards and so this is

91
00:03:17,840 --> 00:03:20,959
like a great way to work

92
00:03:19,280 --> 00:03:23,360
and it allows practitioners to reason

93
00:03:20,959 --> 00:03:25,280
better about their protocols before

94
00:03:23,360 --> 00:03:26,879
or as they are implemented so why isn't

95
00:03:25,280 --> 00:03:30,080
it used more

96
00:03:26,879 --> 00:03:31,679
well um it's these tools tend to be

97
00:03:30,080 --> 00:03:34,799
really specialized they tend to be

98
00:03:31,680 --> 00:03:35,200
focused uh made by academia for academia

99
00:03:34,799 --> 00:03:38,000
and

100
00:03:35,200 --> 00:03:38,798
uh while they are really advanced and

101
00:03:38,000 --> 00:03:42,400
correct and

102
00:03:38,799 --> 00:03:45,120
excellent one thing that isn't

103
00:03:42,400 --> 00:03:46,879
a particular priority for them is sort

104
00:03:45,120 --> 00:03:50,400
of intuitiveness of the language

105
00:03:46,879 --> 00:03:51,200
so in the top two most used and advanced

106
00:03:50,400 --> 00:03:53,680
tools

107
00:03:51,200 --> 00:03:55,920
you can't even really uh intuitively

108
00:03:53,680 --> 00:03:57,280
describe a protocol or intuitively or

109
00:03:55,920 --> 00:03:59,599
describe you know what alice is doing

110
00:03:57,280 --> 00:04:01,360
what bob is doing certainly in proverbs

111
00:03:59,599 --> 00:04:02,159
uh there's no notion of principles

112
00:04:01,360 --> 00:04:04,879
there's just you know

113
00:04:02,159 --> 00:04:06,879
stuff that happens in the void and

114
00:04:04,879 --> 00:04:08,640
somehow a protocol emerges so

115
00:04:06,879 --> 00:04:10,640
uh the way to describe these things is

116
00:04:08,640 --> 00:04:13,040
very unintuitive in my view

117
00:04:10,640 --> 00:04:14,238
and that's why verify exists so it's a

118
00:04:13,040 --> 00:04:16,399
new uh

119
00:04:14,239 --> 00:04:17,680
software project the first alpha version

120
00:04:16,399 --> 00:04:20,000
was released

121
00:04:17,680 --> 00:04:21,440
uh four months ago uh and there's been a

122
00:04:20,000 --> 00:04:22,240
lot of development since then and it's

123
00:04:21,440 --> 00:04:25,440
become it's

124
00:04:22,240 --> 00:04:26,400
not it's in beta now and uh vera file is

125
00:04:25,440 --> 00:04:28,000
really cool because

126
00:04:26,400 --> 00:04:30,000
it separates itself from other formal

127
00:04:28,000 --> 00:04:32,479
verification uh software

128
00:04:30,000 --> 00:04:34,160
for protocols in four ways so we have an

129
00:04:32,479 --> 00:04:35,199
uh an intuitive language for modeling

130
00:04:34,160 --> 00:04:36,560
protocols

131
00:04:35,199 --> 00:04:38,320
but that can like you know it's an

132
00:04:36,560 --> 00:04:40,479
intuitive easy to understand language

133
00:04:38,320 --> 00:04:41,919
but you can still reason about advanced

134
00:04:40,479 --> 00:04:43,440
protocols like signal and noise so it

135
00:04:41,919 --> 00:04:45,440
doesn't sacrifice the ability to reason

136
00:04:43,440 --> 00:04:48,719
about really advanced protocols

137
00:04:45,440 --> 00:04:50,320
uh modeling that avoids user error um

138
00:04:48,720 --> 00:04:51,600
analysis output that's easy to

139
00:04:50,320 --> 00:04:52,719
understand you know if you try to

140
00:04:51,600 --> 00:04:54,400
analyze the protocol in

141
00:04:52,720 --> 00:04:56,400
other tools you might get this attack

142
00:04:54,400 --> 00:04:58,638
trace which is like

143
00:04:56,400 --> 00:04:59,520
you know 30 pages long and difficult to

144
00:04:58,639 --> 00:05:01,360
understand and

145
00:04:59,520 --> 00:05:03,198
verify it speaks to you in english so

146
00:05:01,360 --> 00:05:05,199
you can understand what's going on

147
00:05:03,199 --> 00:05:06,639
and hopefully i'm also this isn't

148
00:05:05,199 --> 00:05:08,160
doesn't really exist right now

149
00:05:06,639 --> 00:05:09,440
like other than a visual studio code

150
00:05:08,160 --> 00:05:10,639
extension but i'm also hoping to

151
00:05:09,440 --> 00:05:13,360
integrate it

152
00:05:10,639 --> 00:05:14,880
uh with the developer's workflow and you

153
00:05:13,360 --> 00:05:16,320
can you know analyze for uh

154
00:05:14,880 --> 00:05:17,919
advanced security properties like

155
00:05:16,320 --> 00:05:19,120
forward secrecy which is something that

156
00:05:17,919 --> 00:05:20,479
you might be familiar with if you use

157
00:05:19,120 --> 00:05:22,000
signal

158
00:05:20,479 --> 00:05:24,080
and also it has features like fresh

159
00:05:22,000 --> 00:05:25,759
values unbounded sessions uh you know

160
00:05:24,080 --> 00:05:26,719
you can analyze every single possible

161
00:05:25,759 --> 00:05:29,680
execution of

162
00:05:26,720 --> 00:05:31,919
a protocol um and so here's what the

163
00:05:29,680 --> 00:05:33,680
language looks like as you can see so

164
00:05:31,919 --> 00:05:35,039
there's a really simple example on the

165
00:05:33,680 --> 00:05:37,120
left and on the right

166
00:05:35,039 --> 00:05:38,560
there just a graphic representing what

167
00:05:37,120 --> 00:05:40,720
it's like over the network

168
00:05:38,560 --> 00:05:42,639
so you know we declare the attacker we

169
00:05:40,720 --> 00:05:44,639
we're declaring an active attacker

170
00:05:42,639 --> 00:05:46,400
and then uh we declare the principles

171
00:05:44,639 --> 00:05:46,720
bob and alice alice generates a private

172
00:05:46,400 --> 00:05:48,799
key

173
00:05:46,720 --> 00:05:49,840
calculates a public key sends the public

174
00:05:48,800 --> 00:05:52,479
key to bob

175
00:05:49,840 --> 00:05:54,479
and then bob generates a public key and

176
00:05:52,479 --> 00:05:57,680
encrypts a message to alice

177
00:05:54,479 --> 00:05:58,400
based on his private key analysis public

178
00:05:57,680 --> 00:06:00,479
key

179
00:05:58,400 --> 00:06:02,560
and so this is like the most simple

180
00:06:00,479 --> 00:06:04,159
possible diffie-hellman protocol right

181
00:06:02,560 --> 00:06:05,440
you know alice has a public key bob has

182
00:06:04,160 --> 00:06:06,400
a public key they calculate a shared

183
00:06:05,440 --> 00:06:08,160
secret

184
00:06:06,400 --> 00:06:10,719
and they send a message believe it or

185
00:06:08,160 --> 00:06:14,720
not modeling this in other tools can

186
00:06:10,720 --> 00:06:16,639
be way um bigger than this

187
00:06:14,720 --> 00:06:18,160
maybe not an example this simple but if

188
00:06:16,639 --> 00:06:19,360
we want to get more complicated

189
00:06:18,160 --> 00:06:21,840
something that couldn't be modeled in

190
00:06:19,360 --> 00:06:23,680
verifial in 100 lines would take maybe

191
00:06:21,840 --> 00:06:25,599
500 lines or 300 lines and other

192
00:06:23,680 --> 00:06:27,120
tools and would not allow you to

193
00:06:25,600 --> 00:06:29,120
intuitively describe what's going on and

194
00:06:27,120 --> 00:06:30,400
also would need you to define

195
00:06:29,120 --> 00:06:32,240
the primitives so you would need to

196
00:06:30,400 --> 00:06:33,599
define what encryption is what

197
00:06:32,240 --> 00:06:36,240
diffie-hellman is

198
00:06:33,600 --> 00:06:37,120
in vervepal the primitives are built in

199
00:06:36,240 --> 00:06:38,960
so

200
00:06:37,120 --> 00:06:41,039
users cannot define their own primitives

201
00:06:38,960 --> 00:06:44,159
and that's meant to basically remove

202
00:06:41,039 --> 00:06:45,120
uh a surface in which the users can make

203
00:06:44,160 --> 00:06:46,960
mistakes

204
00:06:45,120 --> 00:06:48,720
define primitives incorrectly i don't

205
00:06:46,960 --> 00:06:49,919
see a need to allow users to define

206
00:06:48,720 --> 00:06:51,599
their own primitives and the

207
00:06:49,919 --> 00:06:53,520
library of primitives in verified is

208
00:06:51,599 --> 00:06:55,680
always growing so um

209
00:06:53,520 --> 00:06:56,960
it started off with the obvious

210
00:06:55,680 --> 00:07:00,560
primitives you know hash

211
00:06:56,960 --> 00:07:02,159
mac assert hkdf um encryption decryption

212
00:07:00,560 --> 00:07:03,120
authenticated encryption authenticated

213
00:07:02,160 --> 00:07:06,319
decryption

214
00:07:03,120 --> 00:07:08,720
uh signing and signature verification

215
00:07:06,319 --> 00:07:10,400
but also we added password hashing uh

216
00:07:08,720 --> 00:07:11,599
shamir secret sharing public key

217
00:07:10,400 --> 00:07:16,159
encryption

218
00:07:11,599 --> 00:07:18,000
um soon there's gonna be uh oprs as well

219
00:07:16,160 --> 00:07:19,440
and all of these primitives allow us to

220
00:07:18,000 --> 00:07:19,919
model interesting protocols for example

221
00:07:19,440 --> 00:07:21,520
we can

222
00:07:19,919 --> 00:07:23,840
declare values that are passwords and

223
00:07:21,520 --> 00:07:25,599
then we can model them such that

224
00:07:23,840 --> 00:07:27,119
they're not secure to be used as part of

225
00:07:25,599 --> 00:07:28,840
a encryption key unless they're

226
00:07:27,120 --> 00:07:30,720
stretched first using a password hashing

227
00:07:28,840 --> 00:07:32,159
function

228
00:07:30,720 --> 00:07:34,720
if you look at the verve pile manual

229
00:07:32,160 --> 00:07:38,000
you'll see that there's a full example

230
00:07:34,720 --> 00:07:41,759
of verifial analyzing signal

231
00:07:38,000 --> 00:07:43,599
so i don't think it's worth it to go

232
00:07:41,759 --> 00:07:46,479
through these slides

233
00:07:43,599 --> 00:07:47,680
but uh yeah so you can find more

234
00:07:46,479 --> 00:07:48,800
information about how signal was

235
00:07:47,680 --> 00:07:51,120
analyzed in verify

236
00:07:48,800 --> 00:07:52,000
on the website or in the manual uh a lot

237
00:07:51,120 --> 00:07:55,759
of projects well

238
00:07:52,000 --> 00:07:57,919
some projects are using verify um

239
00:07:55,759 --> 00:08:00,080
you can see the list here there's also

240
00:07:57,919 --> 00:08:01,520
example modules of popular software such

241
00:08:00,080 --> 00:08:03,599
as signals called about photon mail and

242
00:08:01,520 --> 00:08:06,560
telegram

243
00:08:03,599 --> 00:08:08,080
and also the verb pal user manual comes

244
00:08:06,560 --> 00:08:10,720
with

245
00:08:08,080 --> 00:08:13,198
a entire japanese style manga where

246
00:08:10,720 --> 00:08:15,199
verftile goes on adventures

247
00:08:13,199 --> 00:08:16,800
in formal verification and fights bad

248
00:08:15,199 --> 00:08:18,879
guys who are like trying to break

249
00:08:16,800 --> 00:08:21,360
protocols it's a lot of fun

250
00:08:18,879 --> 00:08:22,879
and i really like this manual because i

251
00:08:21,360 --> 00:08:23,599
honestly believe that if you want to

252
00:08:22,879 --> 00:08:25,520
learn about

253
00:08:23,599 --> 00:08:27,120
protocols and how they work and how to

254
00:08:25,520 --> 00:08:29,440
analyze them i don't think that there

255
00:08:27,120 --> 00:08:31,280
exists any better educational material

256
00:08:29,440 --> 00:08:32,640
for beginners i mean for advanced uh

257
00:08:31,280 --> 00:08:33,519
people there's definitely way better

258
00:08:32,640 --> 00:08:36,159
materials but for

259
00:08:33,519 --> 00:08:37,519
absolute beginners it's a really amazing

260
00:08:36,159 --> 00:08:39,120
manual and i really think you should

261
00:08:37,519 --> 00:08:40,880
check it out and definitely

262
00:08:39,120 --> 00:08:42,560
recommend it to people who are just

263
00:08:40,880 --> 00:08:44,000
starting off with protocols and

264
00:08:42,559 --> 00:08:45,439
understanding cryptographic protocols

265
00:08:44,000 --> 00:08:48,480
and how to analyze them

266
00:08:45,440 --> 00:08:50,640
so check out this manual uh there's also

267
00:08:48,480 --> 00:08:53,279
a eurocrypt affiliated event

268
00:08:50,640 --> 00:08:54,959
that might happen so that will happen in

269
00:08:53,279 --> 00:08:56,720
may um

270
00:08:54,959 --> 00:08:58,959
so yeah there's a visual studio code

271
00:08:56,720 --> 00:09:01,360
extension and uh

272
00:08:58,959 --> 00:09:03,760
you can try verifypal today so i just

273
00:09:01,360 --> 00:09:07,200
very quickly am gonna

274
00:09:03,760 --> 00:09:10,319
uh show uh

275
00:09:07,200 --> 00:09:12,320
like a super quick demo so

276
00:09:10,320 --> 00:09:13,360
this is what a verified model would look

277
00:09:12,320 --> 00:09:16,320
like

278
00:09:13,360 --> 00:09:17,120
here on the left uh you see like this is

279
00:09:16,320 --> 00:09:20,240
verfpal

280
00:09:17,120 --> 00:09:23,920
uh this is the verve pal signal model

281
00:09:20,240 --> 00:09:27,760
oh okay thank you um

282
00:09:23,920 --> 00:09:30,560
there we go wow uh

283
00:09:27,760 --> 00:09:32,160
okay well you can certainly see it now

284
00:09:30,560 --> 00:09:35,439
um

285
00:09:32,160 --> 00:09:40,319
maybe you see it a bit too much okay

286
00:09:35,440 --> 00:09:40,320
so there and then

287
00:09:40,560 --> 00:09:48,479
uh whatever white light okay great

288
00:09:44,720 --> 00:09:51,120
so um there we go

289
00:09:48,480 --> 00:09:52,720
so here you have the model and uh you

290
00:09:51,120 --> 00:09:56,399
can just basically go

291
00:09:52,720 --> 00:09:57,360
you know verifial verify examples and

292
00:09:56,399 --> 00:09:59,519
then it'll just

293
00:09:57,360 --> 00:10:01,680
do some analysis and try to figure out

294
00:09:59,519 --> 00:10:03,120
whether it can find attacks

295
00:10:01,680 --> 00:10:06,560
and if it finds an attack it will

296
00:10:03,120 --> 00:10:06,560
basically look like this

297
00:10:14,160 --> 00:10:18,880
there so this is a

298
00:10:17,200 --> 00:10:20,959
intentionally broken model of signal

299
00:10:18,880 --> 00:10:24,079
like oh if the attacker has

300
00:10:20,959 --> 00:10:25,599
the uh long-term identity keys and is

301
00:10:24,079 --> 00:10:27,760
men in the middle of the ephemeral keys

302
00:10:25,600 --> 00:10:29,760
then there's no forward secrecy there's

303
00:10:27,760 --> 00:10:31,920
no confidentiality and it shows you like

304
00:10:29,760 --> 00:10:32,800
you know confidentiality is violated for

305
00:10:31,920 --> 00:10:34,319
the message

306
00:10:32,800 --> 00:10:35,599
it violates that it is able to find a

307
00:10:34,320 --> 00:10:37,600
contradiction to the queries that we've

308
00:10:35,600 --> 00:10:40,800
described here at the bottom

309
00:10:37,600 --> 00:10:42,399
um and yeah that's basically it

310
00:10:40,800 --> 00:10:47,839
i'm happy to take questions and thank

311
00:10:42,399 --> 00:10:47,839
you very much for your attention

312
00:10:48,320 --> 00:10:52,399
uh you you can download it today for uh

313
00:10:51,200 --> 00:10:54,640
all operating systems

314
00:10:52,399 --> 00:10:56,240
linux mac os windows freebsd on the

315
00:10:54,640 --> 00:10:57,360
website that's free open source software

316
00:10:56,240 --> 00:11:00,320
and i also have stickers if you're

317
00:10:57,360 --> 00:11:03,680
interested i can give you stickers

318
00:11:00,320 --> 00:11:03,680
are there questions in the room

319
00:11:10,959 --> 00:11:14,079
first thank you so much for the software

320
00:11:13,120 --> 00:11:16,399
looks very interesting

321
00:11:14,079 --> 00:11:17,199
especially compared to the older tools

322
00:11:16,399 --> 00:11:20,640
so as

323
00:11:17,200 --> 00:11:23,680
say an engineer or software developer

324
00:11:20,640 --> 00:11:24,880
i'm implementing an instantiation of the

325
00:11:23,680 --> 00:11:26,560
signal protocol

326
00:11:24,880 --> 00:11:28,000
so this would be useful for me to verify

327
00:11:26,560 --> 00:11:30,959
my implementation and so

328
00:11:28,000 --> 00:11:32,399
on not as a new uh implementation of the

329
00:11:30,959 --> 00:11:34,399
siegel a new protocol

330
00:11:32,399 --> 00:11:36,720
so for that i would have to maybe do an

331
00:11:34,399 --> 00:11:38,720
extension and collaborate with you

332
00:11:36,720 --> 00:11:41,600
but to verify the implementations this

333
00:11:38,720 --> 00:11:43,600
would i'll just take the existing

334
00:11:41,600 --> 00:11:44,640
verve pal cannot be used to verify

335
00:11:43,600 --> 00:11:46,240
implementations

336
00:11:44,640 --> 00:11:48,000
implementations are written in code you

337
00:11:46,240 --> 00:11:48,880
need to model the protocol in verifia's

338
00:11:48,000 --> 00:11:50,880
own language

339
00:11:48,880 --> 00:11:52,399
and actually it is very useful

340
00:11:50,880 --> 00:11:54,000
specifically if you're coming up with

341
00:11:52,399 --> 00:11:56,800
your own protocol

342
00:11:54,000 --> 00:11:58,800
it is it's most useful for people who

343
00:11:56,800 --> 00:11:59,839
are currently in the design phase of a

344
00:11:58,800 --> 00:12:01,599
new protocol

345
00:11:59,839 --> 00:12:03,839
or have doubts about an existing

346
00:12:01,600 --> 00:12:04,560
protocol if a protocol is already very

347
00:12:03,839 --> 00:12:06,320
well tested

348
00:12:04,560 --> 00:12:07,920
especially using tools that have existed

349
00:12:06,320 --> 00:12:09,920
for literally decades

350
00:12:07,920 --> 00:12:11,599
uh there's really little point in

351
00:12:09,920 --> 00:12:12,880
modeling it in verified except for

352
00:12:11,600 --> 00:12:14,560
educational purposes

353
00:12:12,880 --> 00:12:15,920
but if it's a new protocol an in-house

354
00:12:14,560 --> 00:12:17,599
protocol

355
00:12:15,920 --> 00:12:19,360
or especially if you're making

356
00:12:17,600 --> 00:12:20,880
modifications to a protocol to suit your

357
00:12:19,360 --> 00:12:22,560
own particular use case

358
00:12:20,880 --> 00:12:24,880
then modelling and verve pile becomes

359
00:12:22,560 --> 00:12:26,399
very lucrative because it's much faster

360
00:12:24,880 --> 00:12:28,880
it allows you to get results way more

361
00:12:26,399 --> 00:12:31,200
quickly and the uh complexity overhead

362
00:12:28,880 --> 00:12:33,600
of of obtaining a result and

363
00:12:31,200 --> 00:12:35,279
insight into your protocol is infinitely

364
00:12:33,600 --> 00:12:37,200
smaller than other tools

365
00:12:35,279 --> 00:12:38,720
yeah so the direct advantage i see is

366
00:12:37,200 --> 00:12:40,480
exactly that the queries are simpler

367
00:12:38,720 --> 00:12:42,320
everything is simpler and

368
00:12:40,480 --> 00:12:43,600
more trivial and thus eventually more

369
00:12:42,320 --> 00:12:52,959
secure thank you

370
00:12:43,600 --> 00:12:55,519
thanks do we have more questions

371
00:12:52,959 --> 00:12:57,040
um hello thanks for the talk um i'm

372
00:12:55,519 --> 00:13:00,720
wondering uh how

373
00:12:57,040 --> 00:13:03,040
do we see the variables or the

374
00:13:00,720 --> 00:13:04,079
the one that you called primitives are

375
00:13:03,040 --> 00:13:07,439
they variables or

376
00:13:04,079 --> 00:13:09,439
how should we see them too so verve tile

377
00:13:07,440 --> 00:13:10,880
has its own modeling language and if you

378
00:13:09,440 --> 00:13:12,560
look at the uh

379
00:13:10,880 --> 00:13:14,720
uh primitives that are declared here so

380
00:13:12,560 --> 00:13:16,000
essentially there's a bunch of keywords

381
00:13:14,720 --> 00:13:18,320
and they're all listed inside the

382
00:13:16,000 --> 00:13:19,760
verified user manual and each of them

383
00:13:18,320 --> 00:13:20,079
functions in a specific way like for

384
00:13:19,760 --> 00:13:22,079
example

385
00:13:20,079 --> 00:13:23,680
you have an uh encryption primitive

386
00:13:22,079 --> 00:13:24,239
decryption primitive signature there's a

387
00:13:23,680 --> 00:13:26,160
set of them

388
00:13:24,240 --> 00:13:27,839
i think there's like 15 or 16 of them

389
00:13:26,160 --> 00:13:29,760
and sometimes i add more

390
00:13:27,839 --> 00:13:31,680
and each of them works in a particular

391
00:13:29,760 --> 00:13:32,480
way and you can read the manual to learn

392
00:13:31,680 --> 00:13:34,479
more

393
00:13:32,480 --> 00:13:37,040
about what they do and how to use them

394
00:13:34,480 --> 00:13:38,720
and uh there's a sort of standardized

395
00:13:37,040 --> 00:13:40,160
sort of set of expectations of how they

396
00:13:38,720 --> 00:13:41,440
work and how they're constructed

397
00:13:40,160 --> 00:13:42,800
for example when i define a new

398
00:13:41,440 --> 00:13:44,560
primitive and verifiable i write it

399
00:13:42,800 --> 00:13:46,479
using a primitive definition language

400
00:13:44,560 --> 00:13:48,000
that's inside verified

401
00:13:46,480 --> 00:13:50,320
it's not like just a random bunch of

402
00:13:48,000 --> 00:13:51,440
things and um

403
00:13:50,320 --> 00:13:52,880
they're basically just meant to

404
00:13:51,440 --> 00:13:53,760
represent common cryptographic

405
00:13:52,880 --> 00:13:55,360
operations like

406
00:13:53,760 --> 00:13:57,120
public key encryption symmetric

407
00:13:55,360 --> 00:13:58,720
encryption showing your secret sharing

408
00:13:57,120 --> 00:14:01,199
password hashing they're not

409
00:13:58,720 --> 00:14:03,600
particularly unintuitive they're just

410
00:14:01,199 --> 00:14:04,240
standard cryptographic operations so i i

411
00:14:03,600 --> 00:14:05,680
think that

412
00:14:04,240 --> 00:14:07,440
i don't think verify will ever have more

413
00:14:05,680 --> 00:14:08,800
than 20 primitives because

414
00:14:07,440 --> 00:14:10,880
i don't think there are more than 20

415
00:14:08,800 --> 00:14:14,959
fundamental cryptographic operations

416
00:14:10,880 --> 00:14:17,279
um if you allow me as well like like m1

417
00:14:14,959 --> 00:14:18,079
e1 the stuff like this should we see

418
00:14:17,279 --> 00:14:21,439
them like as

419
00:14:18,079 --> 00:14:24,880
variables in the code or

420
00:14:21,440 --> 00:14:26,480
yes yeah totally yeah all right so

421
00:14:24,880 --> 00:14:28,560
these are symbolic representations this

422
00:14:26,480 --> 00:14:30,320
is a symbolic model so there's no notion

423
00:14:28,560 --> 00:14:33,359
of like addition or

424
00:14:30,320 --> 00:14:34,560
or or values i'm just going to let the

425
00:14:33,360 --> 00:14:34,959
gentleman over here ask a question

426
00:14:34,560 --> 00:14:38,959
because

427
00:14:34,959 --> 00:14:38,959
he's raised his hand many times the last

428
00:14:42,839 --> 00:14:46,399
question

429
00:14:45,290 --> 00:14:48,719
[Music]

430
00:14:46,399 --> 00:14:50,639
uh is there a way to specify uh elliptic

431
00:14:48,720 --> 00:14:53,040
curves or isogeny's

432
00:14:50,639 --> 00:14:55,040
protocols in verify so when you're

433
00:14:53,040 --> 00:14:56,480
verifying things in the symbolic model

434
00:14:55,040 --> 00:14:58,639
you're basically looking at the

435
00:14:56,480 --> 00:15:00,320
assumptions on diffie-hellman

436
00:14:58,639 --> 00:15:02,399
it doesn't matter whether you obtain the

437
00:15:00,320 --> 00:15:04,560
helmet using classical finite field if

438
00:15:02,399 --> 00:15:08,399
you helmet elliptic curve isogeny

439
00:15:04,560 --> 00:15:11,279
uh learning with errors

440
00:15:08,399 --> 00:15:12,079
what we care about is the chord you held

441
00:15:11,279 --> 00:15:13,439
an assumption itself

442
00:15:12,079 --> 00:15:15,839
and yes of course diffie-hellman is

443
00:15:13,440 --> 00:15:15,839
supported

444
00:15:17,440 --> 00:15:21,120
then let's have a round of applause for

445
00:15:19,040 --> 00:15:27,839
the speaker

446
00:15:21,120 --> 00:15:27,839
thank you

447
00:15:29,839 --> 00:15:33,759
oh thank you so much thanks a lot

448
00:15:38,839 --> 00:15:41,839
yes

449
00:15:50,240 --> 00:15:52,320
you

