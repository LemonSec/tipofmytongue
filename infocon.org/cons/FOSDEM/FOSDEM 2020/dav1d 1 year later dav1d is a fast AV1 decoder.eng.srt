1
00:00:05,279 --> 00:00:07,759
our next speaker is a dear friend of

2
00:00:06,640 --> 00:00:10,639
mine

3
00:00:07,759 --> 00:00:11,519
zoro baptista will talk to us about

4
00:00:10,639 --> 00:00:17,919
david

5
00:00:11,519 --> 00:00:17,920
an 1881 decoder

6
00:00:20,240 --> 00:00:24,479
hello do you hear me yeah okay i wonder

7
00:00:22,880 --> 00:00:25,919
why half of the room is here because you

8
00:00:24,480 --> 00:00:26,720
know probably better than david about

9
00:00:25,920 --> 00:00:30,400
than me

10
00:00:26,720 --> 00:00:33,440
but let's try anyway so um

11
00:00:30,400 --> 00:00:34,480
yeah oops okay so

12
00:00:33,440 --> 00:00:38,730
yeah that doesn't work

13
00:00:34,480 --> 00:00:38,730
[Applause]

14
00:00:39,600 --> 00:00:43,280
yeah i'm using kd with wayland and

15
00:00:42,000 --> 00:00:47,840
sometimes crashing with the

16
00:00:43,280 --> 00:00:47,840
office um yes

17
00:00:50,000 --> 00:00:54,559
why does the clicker not work okay so

18
00:00:52,800 --> 00:00:56,239
i'm the president of videoline i work on

19
00:00:54,559 --> 00:00:56,959
various open source projects including

20
00:00:56,239 --> 00:01:00,160
vlc

21
00:00:56,960 --> 00:01:01,120
x264 david fm peg and others where i

22
00:01:00,160 --> 00:01:04,878
maintain some

23
00:01:01,120 --> 00:01:07,600
dvd stack and a bit of blu-ray stacks um

24
00:01:04,879 --> 00:01:09,600
i'm annoying uh to many of those

25
00:01:07,600 --> 00:01:11,520
projects when they screw up

26
00:01:09,600 --> 00:01:13,360
so i'm not probably the biggest

27
00:01:11,520 --> 00:01:16,479
developer there but i'm doing

28
00:01:13,360 --> 00:01:21,039
everything else no

29
00:01:16,479 --> 00:01:22,400
yes so av one um so vp9 is everyone just

30
00:01:21,040 --> 00:01:26,000
vp9 plus plus av

31
00:01:22,400 --> 00:01:29,360
vp9 is a semi failure it's a good

32
00:01:26,000 --> 00:01:32,079
codec but no one uses it um when you ask

33
00:01:29,360 --> 00:01:34,240
youtube they don't even have many people

34
00:01:32,079 --> 00:01:36,960
actually submitting video in vp9

35
00:01:34,240 --> 00:01:37,839
and there are many reasons for that um

36
00:01:36,960 --> 00:01:39,600
the reason

37
00:01:37,840 --> 00:01:41,200
is mostly because like there was no spec

38
00:01:39,600 --> 00:01:42,960
for a long time there was a codec but no

39
00:01:41,200 --> 00:01:45,439
specs um there was absolutely no

40
00:01:42,960 --> 00:01:47,759
ecosystem except a few open source tools

41
00:01:45,439 --> 00:01:49,919
um like have you ever watched an anime

42
00:01:47,759 --> 00:01:52,960
in vp9

43
00:01:49,920 --> 00:01:56,079
maybe right one okay amazing you're the

44
00:01:52,960 --> 00:01:56,079
only one right um

45
00:01:56,399 --> 00:02:00,320
but like like like like you've never

46
00:01:58,000 --> 00:02:02,719
been on on on the cloud bay right and so

47
00:02:00,320 --> 00:02:04,000
a vp9 encoding anime right so like the

48
00:02:02,719 --> 00:02:05,919
format is a failure

49
00:02:04,000 --> 00:02:07,759
um one of the reason also is that h64

50
00:02:05,920 --> 00:02:09,520
was so good and so well

51
00:02:07,759 --> 00:02:11,120
integrated that it worked so they

52
00:02:09,520 --> 00:02:13,120
decided um

53
00:02:11,120 --> 00:02:14,879
so except youtube and netflix no one

54
00:02:13,120 --> 00:02:17,599
actually used vp9

55
00:02:14,879 --> 00:02:19,359
largely um so for everyone they decided

56
00:02:17,599 --> 00:02:21,440
to not just do vp10

57
00:02:19,360 --> 00:02:23,120
but to do something that was actually

58
00:02:21,440 --> 00:02:25,120
open with actual ecosystem

59
00:02:23,120 --> 00:02:26,319
and i think that more or less um they

60
00:02:25,120 --> 00:02:28,000
managed to do it

61
00:02:26,319 --> 00:02:30,238
um it's interesting that basically there

62
00:02:28,000 --> 00:02:33,840
is like three companies that actually

63
00:02:30,239 --> 00:02:34,480
worked on ev1 um mozilla in cisco plus

64
00:02:33,840 --> 00:02:36,239
google

65
00:02:34,480 --> 00:02:37,760
and there is an actual uh alliance for

66
00:02:36,239 --> 00:02:39,680
open media which is open

67
00:02:37,760 --> 00:02:41,200
and where people actually contribute

68
00:02:39,680 --> 00:02:43,840
well we cannot do say that

69
00:02:41,200 --> 00:02:45,679
about vp9 so everyone has a lot of

70
00:02:43,840 --> 00:02:48,560
amazing results

71
00:02:45,680 --> 00:02:49,519
we are talking of 20 to 25 better than

72
00:02:48,560 --> 00:02:52,239
vp9

73
00:02:49,519 --> 00:02:54,319
and around the same around hevc and you

74
00:02:52,239 --> 00:02:55,040
can discuss about so many cases but like

75
00:02:54,319 --> 00:02:58,000
that's the

76
00:02:55,040 --> 00:02:59,840
rough numbers that you should remember

77
00:02:58,000 --> 00:03:02,879
20 better than hvc is a good

78
00:02:59,840 --> 00:03:04,400
number 25.

79
00:03:02,879 --> 00:03:05,840
and there is a lot of things happening

80
00:03:04,400 --> 00:03:07,200
on the ecosystem there is at least three

81
00:03:05,840 --> 00:03:09,200
open source encoders

82
00:03:07,200 --> 00:03:11,518
um one is going to be presented just

83
00:03:09,200 --> 00:03:13,359
after my talk uh there is a libero

84
00:03:11,519 --> 00:03:14,560
encoder which is like the reference one

85
00:03:13,360 --> 00:03:17,920
which is uh

86
00:03:14,560 --> 00:03:19,599
extremely extremely extremely slow

87
00:03:17,920 --> 00:03:21,839
and a difficult code base there is a new

88
00:03:19,599 --> 00:03:24,159
one that is happening that called

89
00:03:21,840 --> 00:03:25,200
svt everyone which is basically um done

90
00:03:24,159 --> 00:03:27,440
by intel

91
00:03:25,200 --> 00:03:28,399
um it's difficult to talk about that

92
00:03:27,440 --> 00:03:30,239
because like

93
00:03:28,400 --> 00:03:32,159
six months ago it was nowhere they were

94
00:03:30,239 --> 00:03:34,480
announced at ibc six months ago

95
00:03:32,159 --> 00:03:35,840
and they're advancing fast um it's

96
00:03:34,480 --> 00:03:38,798
actually usable

97
00:03:35,840 --> 00:03:40,319
to produce some videos uh but a lot of

98
00:03:38,799 --> 00:03:41,120
like non-open source people are working

99
00:03:40,319 --> 00:03:43,119
on ev1

100
00:03:41,120 --> 00:03:45,120
there is eve that is a very good encoder

101
00:03:43,120 --> 00:03:47,920
about everyone extremely slow so

102
00:03:45,120 --> 00:03:48,959
atom harmonic bit moving also are doing

103
00:03:47,920 --> 00:03:51,359
a lot of things around

104
00:03:48,959 --> 00:03:52,480
everyone and there are actual hardware

105
00:03:51,360 --> 00:03:54,560
encoders like um

106
00:03:52,480 --> 00:03:56,079
ng kodak is working on and some other

107
00:03:54,560 --> 00:03:57,040
mostly chinese companies working on

108
00:03:56,080 --> 00:04:00,080
fpgas

109
00:03:57,040 --> 00:04:01,840
or a6 for av1

110
00:04:00,080 --> 00:04:03,599
there are actual deployments of everyone

111
00:04:01,840 --> 00:04:05,840
like almost since day one

112
00:04:03,599 --> 00:04:07,359
um youtube netflix facebook but quite a

113
00:04:05,840 --> 00:04:09,280
few cloud vendors

114
00:04:07,360 --> 00:04:11,120
who are selling a lot of things about

115
00:04:09,280 --> 00:04:11,840
encoding video have an option to encode

116
00:04:11,120 --> 00:04:13,439
to everyone

117
00:04:11,840 --> 00:04:15,599
so people care and you know what there

118
00:04:13,439 --> 00:04:17,599
are specs and there are even specs to

119
00:04:15,599 --> 00:04:19,759
put that inside mp4 mkv

120
00:04:17,600 --> 00:04:21,919
ts and other stuff like that amazing

121
00:04:19,759 --> 00:04:23,199
right um and this year is the year of

122
00:04:21,918 --> 00:04:25,280
ev1 because hardware

123
00:04:23,199 --> 00:04:26,960
is coming intel has more or less

124
00:04:25,280 --> 00:04:30,239
announced that they were doing it

125
00:04:26,960 --> 00:04:32,719
this year with their gen 10 ships um

126
00:04:30,240 --> 00:04:33,759
nvidia is also more or less said that

127
00:04:32,720 --> 00:04:36,240
they were for the next

128
00:04:33,759 --> 00:04:37,199
chip so probably around when when they

129
00:04:36,240 --> 00:04:40,320
announced products which is

130
00:04:37,199 --> 00:04:42,960
gdc usually amd also but like the

131
00:04:40,320 --> 00:04:45,040
samsung tv at cs had everyone decoding

132
00:04:42,960 --> 00:04:46,000
uh i'm logic broadcom and a few others i

133
00:04:45,040 --> 00:04:48,479
forgot show

134
00:04:46,000 --> 00:04:50,240
chips that were actually usable produced

135
00:04:48,479 --> 00:04:52,560
that can decode av1

136
00:04:50,240 --> 00:04:54,160
and all of those can decode both eight

137
00:04:52,560 --> 00:04:55,120
bits and ten bits which is quite

138
00:04:54,160 --> 00:04:57,040
important because like

139
00:04:55,120 --> 00:04:58,880
you remember for h264 lots of people

140
00:04:57,040 --> 00:05:00,720
just had ha 8-bit decoders and not

141
00:04:58,880 --> 00:05:04,000
10-bit

142
00:05:00,720 --> 00:05:05,600
and 2020 is also the year of the

143
00:05:04,000 --> 00:05:08,400
competition like you probably heard

144
00:05:05,600 --> 00:05:11,199
about vvc which is coming in july

145
00:05:08,400 --> 00:05:12,080
evc which is coming between april and

146
00:05:11,199 --> 00:05:15,120
july

147
00:05:12,080 --> 00:05:15,520
um which is basically a version of a vvc

148
00:05:15,120 --> 00:05:18,320
with

149
00:05:15,520 --> 00:05:18,320
less patents

150
00:05:19,440 --> 00:05:24,080
there is something called mpeg-5 lc evc

151
00:05:22,320 --> 00:05:25,280
ecv something like that which is

152
00:05:24,080 --> 00:05:28,880
actually not a codec

153
00:05:25,280 --> 00:05:31,198
but just like post and pre filters

154
00:05:28,880 --> 00:05:33,199
and the aom community is already talking

155
00:05:31,199 --> 00:05:34,720
about research on av2 so things are

156
00:05:33,199 --> 00:05:36,960
going fast

157
00:05:34,720 --> 00:05:39,039
so is that an actual composition i don't

158
00:05:36,960 --> 00:05:42,320
think so um

159
00:05:39,039 --> 00:05:43,520
most in like vvc is amazing in terms of

160
00:05:42,320 --> 00:05:45,199
technical quality

161
00:05:43,520 --> 00:05:47,680
most of the improvements are based on

162
00:05:45,199 --> 00:05:48,320
hvc and hvc have three or four patent

163
00:05:47,680 --> 00:05:51,440
pools so

164
00:05:48,320 --> 00:05:52,639
like you can expect that since h264 are

165
00:05:51,440 --> 00:05:54,719
two htbc

166
00:05:52,639 --> 00:05:56,000
vvc is going to have five or six or

167
00:05:54,720 --> 00:05:57,919
seven um

168
00:05:56,000 --> 00:05:59,600
means like no one can actually deploy

169
00:05:57,919 --> 00:06:00,318
that because it's insane those many

170
00:05:59,600 --> 00:06:02,479
patent pools

171
00:06:00,319 --> 00:06:04,479
and there is so many people um who are

172
00:06:02,479 --> 00:06:06,000
now big companies who are just turned

173
00:06:04,479 --> 00:06:09,440
into patent holes like nokia

174
00:06:06,000 --> 00:06:11,280
or outside of patent pools anyway

175
00:06:09,440 --> 00:06:12,800
um and so the question is are

176
00:06:11,280 --> 00:06:16,159
improvements good enough

177
00:06:12,800 --> 00:06:17,360
uh to justify the cost well like htvc is

178
00:06:16,160 --> 00:06:19,919
not deployed anywhere

179
00:06:17,360 --> 00:06:21,840
than broadcast so everything that is

180
00:06:19,919 --> 00:06:23,280
online is basically skip that

181
00:06:21,840 --> 00:06:26,318
so i guess it's going to be the same for

182
00:06:23,280 --> 00:06:29,599
vvc evc which is like oh

183
00:06:26,319 --> 00:06:31,199
we're we're not really so much patented

184
00:06:29,600 --> 00:06:32,560
but then you remove some of the game so

185
00:06:31,199 --> 00:06:33,840
like if you remove so many of the game

186
00:06:32,560 --> 00:06:34,479
you're going to be at the level of every

187
00:06:33,840 --> 00:06:37,758
one

188
00:06:34,479 --> 00:06:40,560
then why not choose every one right um

189
00:06:37,759 --> 00:06:42,160
and then like other stuff are actually

190
00:06:40,560 --> 00:06:44,560
not codex and could be applied to

191
00:06:42,160 --> 00:06:46,160
open source codecs so i think that um

192
00:06:44,560 --> 00:06:46,880
even if competition is coming they're

193
00:06:46,160 --> 00:06:48,880
going to have

194
00:06:46,880 --> 00:06:51,840
that's their last big shot and they

195
00:06:48,880 --> 00:06:54,960
might have like difficulties

196
00:06:51,840 --> 00:06:58,638
so david um david um

197
00:06:54,960 --> 00:07:01,280
is an av-1 decoder as the name says um

198
00:06:58,639 --> 00:07:02,080
the the idea was that we actually need

199
00:07:01,280 --> 00:07:04,479
to have a good

200
00:07:02,080 --> 00:07:05,680
and fast software decoder because like a

201
00:07:04,479 --> 00:07:06,719
lot of people are not going to have

202
00:07:05,680 --> 00:07:08,639
hardware decoders

203
00:07:06,720 --> 00:07:09,840
and until people can decode then you're

204
00:07:08,639 --> 00:07:12,560
screwed because your pro

205
00:07:09,840 --> 00:07:13,280
your your codec is not being played

206
00:07:12,560 --> 00:07:14,960
anywhere

207
00:07:13,280 --> 00:07:16,479
and and the problem is that everything

208
00:07:14,960 --> 00:07:17,198
you're going to see it's true for

209
00:07:16,479 --> 00:07:19,758
everyone

210
00:07:17,199 --> 00:07:21,199
for vvc and all the new codecs they are

211
00:07:19,759 --> 00:07:24,400
very complex

212
00:07:21,199 --> 00:07:25,759
like a lot of code is required to write

213
00:07:24,400 --> 00:07:28,080
an if you want decoder

214
00:07:25,759 --> 00:07:29,120
because like we tried like we tried to

215
00:07:28,080 --> 00:07:31,039
take any

216
00:07:29,120 --> 00:07:32,560
small gains also there is lots of tools

217
00:07:31,039 --> 00:07:33,520
and you take one person here one person

218
00:07:32,560 --> 00:07:35,199
here one person

219
00:07:33,520 --> 00:07:38,400
but that's a huge code base compared to

220
00:07:35,199 --> 00:07:41,120
h364 or vp8 or vp9

221
00:07:38,400 --> 00:07:42,880
um so the idea was like we need to have

222
00:07:41,120 --> 00:07:44,400
a very good software implementation that

223
00:07:42,880 --> 00:07:46,800
is extremely fast and like

224
00:07:44,400 --> 00:07:48,239
every cycle counts because if we are

225
00:07:46,800 --> 00:07:49,199
going to deploy that it's going to be

226
00:07:48,240 --> 00:07:52,400
billions people

227
00:07:49,199 --> 00:07:53,919
who still have their correct and actual

228
00:07:52,400 --> 00:07:55,198
machine that they have today and not

229
00:07:53,919 --> 00:07:56,639
their new machines

230
00:07:55,199 --> 00:07:58,479
and if we don't have that then everyone

231
00:07:56,639 --> 00:08:00,400
will fail

232
00:07:58,479 --> 00:08:03,120
the idea was to use basically the people

233
00:08:00,400 --> 00:08:04,638
from uh vlc ffmpeg and this c4 who

234
00:08:03,120 --> 00:08:07,919
actually know how to write c

235
00:08:04,639 --> 00:08:10,319
and how know how to correctly write

236
00:08:07,919 --> 00:08:13,758
portable and cross-platform tools

237
00:08:10,319 --> 00:08:16,160
and don't use um cmake or um some

238
00:08:13,759 --> 00:08:16,879
weird configure stuff like leap vpx and

239
00:08:16,160 --> 00:08:18,800
aom that

240
00:08:16,879 --> 00:08:19,919
basically is impossible to port to so

241
00:08:18,800 --> 00:08:22,160
many platforms

242
00:08:19,919 --> 00:08:23,520
uh and one of the goal was to have a

243
00:08:22,160 --> 00:08:25,919
small binary size

244
00:08:23,520 --> 00:08:27,520
because for um youtube or facebook when

245
00:08:25,919 --> 00:08:29,440
they ship the decoder in their

246
00:08:27,520 --> 00:08:31,359
android apps they actually care about

247
00:08:29,440 --> 00:08:32,159
the binary size and that was for example

248
00:08:31,360 --> 00:08:34,560
the mistake

249
00:08:32,159 --> 00:08:35,519
um that was done in ffvp9 which was a

250
00:08:34,559 --> 00:08:37,760
fempe

251
00:08:35,519 --> 00:08:38,799
vp9 decoder that was done before by

252
00:08:37,760 --> 00:08:41,120
basically the team that

253
00:08:38,799 --> 00:08:42,799
basically did david and they didn't care

254
00:08:41,120 --> 00:08:45,920
that much about the um

255
00:08:42,799 --> 00:08:48,240
binary size and that was an issue

256
00:08:45,920 --> 00:08:49,439
so we launched it well last year now

257
00:08:48,240 --> 00:08:51,279
almost one year and a half ago in

258
00:08:49,440 --> 00:08:53,600
october 2018

259
00:08:51,279 --> 00:08:55,120
and we had like a release quite soon

260
00:08:53,600 --> 00:08:58,800
after and it's been improving

261
00:08:55,120 --> 00:08:59,920
quite a bit um just a bit of history

262
00:08:58,800 --> 00:09:01,680
like

263
00:08:59,920 --> 00:09:03,040
announce was in october like like

264
00:09:01,680 --> 00:09:04,640
already like three months after we had

265
00:09:03,040 --> 00:09:06,160
like the first release which was already

266
00:09:04,640 --> 00:09:06,800
four times faster than the reference and

267
00:09:06,160 --> 00:09:09,680
the only

268
00:09:06,800 --> 00:09:12,800
uh decoder at that time um and i was of

269
00:09:09,680 --> 00:09:14,959
course focused on x86 um 64 bits

270
00:09:12,800 --> 00:09:16,959
and then like um after three months we

271
00:09:14,959 --> 00:09:17,839
did another release which was focused on

272
00:09:16,959 --> 00:09:20,160
arm

273
00:09:17,839 --> 00:09:22,959
um like we are already twice as fast as

274
00:09:20,160 --> 00:09:25,839
libya on arm 64. and the same

275
00:09:22,959 --> 00:09:28,239
we went every release we focus on like

276
00:09:25,839 --> 00:09:31,760
less important platforms like r32

277
00:09:28,240 --> 00:09:34,640
and then sse3 and then even ffc 2

278
00:09:31,760 --> 00:09:35,519
and so on and so on and so on um so we

279
00:09:34,640 --> 00:09:36,959
have like

280
00:09:35,519 --> 00:09:39,040
one release every two or three months

281
00:09:36,959 --> 00:09:41,599
which is quite nice

282
00:09:39,040 --> 00:09:42,399
performance is amazing right like we're

283
00:09:41,600 --> 00:09:44,800
talking about

284
00:09:42,399 --> 00:09:46,560
three to five times faster than the

285
00:09:44,800 --> 00:09:46,880
reference decoder the reference decoder

286
00:09:46,560 --> 00:09:48,719
has

287
00:09:46,880 --> 00:09:50,160
assembly in it right like it's not like

288
00:09:48,720 --> 00:09:52,480
we're comparing c to

289
00:09:50,160 --> 00:09:53,760
to non-c versions right it's assembly

290
00:09:52,480 --> 00:09:57,600
against assembly

291
00:09:53,760 --> 00:09:59,439
um when we started um ronald who's

292
00:09:57,600 --> 00:10:01,200
wrote a lot of the code of david said

293
00:09:59,440 --> 00:10:03,200
yeah we might be two or

294
00:10:01,200 --> 00:10:05,760
two two and a half times faster no we

295
00:10:03,200 --> 00:10:09,040
are a lot faster

296
00:10:05,760 --> 00:10:09,600
and we even faster on ssc2 where we did

297
00:10:09,040 --> 00:10:11,839
not

298
00:10:09,600 --> 00:10:14,480
write as much assembly as we did for the

299
00:10:11,839 --> 00:10:17,760
other platforms

300
00:10:14,480 --> 00:10:20,079
then arm so um you can see that i'm

301
00:10:17,760 --> 00:10:23,040
comparing to the new

302
00:10:20,079 --> 00:10:25,439
oh yeah well i got to let the new one

303
00:10:23,040 --> 00:10:28,719
which is leap jf1 which is a

304
00:10:25,440 --> 00:10:30,720
another decoder wrote by chrome um

305
00:10:28,720 --> 00:10:32,640
and totally not in a non-invented year

306
00:10:30,720 --> 00:10:34,160
syndrome fashion

307
00:10:32,640 --> 00:10:36,800
because they really wanted to have one

308
00:10:34,160 --> 00:10:38,240
that will be faster than david on arm

309
00:10:36,800 --> 00:10:40,560
so that's the blue one and as you can

310
00:10:38,240 --> 00:10:43,839
see well david is

311
00:10:40,560 --> 00:10:45,040
quite a bit faster already and they're

312
00:10:43,839 --> 00:10:48,320
improving but

313
00:10:45,040 --> 00:10:50,959
they're not getting close to us um

314
00:10:48,320 --> 00:10:52,240
so we're talking two two and a half to

315
00:10:50,959 --> 00:10:55,760
four times faster than

316
00:10:52,240 --> 00:10:57,040
the other decoders that's a question

317
00:10:55,760 --> 00:10:59,200
that was like

318
00:10:57,040 --> 00:11:02,160
asked quite a bit in the past which was

319
00:10:59,200 --> 00:11:05,120
um what is the complexity of doing av1

320
00:11:02,160 --> 00:11:06,800
decoding so here you can see in yellow

321
00:11:05,120 --> 00:11:10,000
which is the ff 8264

322
00:11:06,800 --> 00:11:10,959
decoder so the decoder of h264 inside

323
00:11:10,000 --> 00:11:14,000
ffmpeg

324
00:11:10,959 --> 00:11:17,119
then you have in red the vp91 and then

325
00:11:14,000 --> 00:11:19,920
in in green you got hevc and david

326
00:11:17,120 --> 00:11:20,560
um what you can see more or less is that

327
00:11:19,920 --> 00:11:23,680
of course

328
00:11:20,560 --> 00:11:25,680
vp9 and h2c4 are way easier to decode

329
00:11:23,680 --> 00:11:27,519
but that when you spent enough time on

330
00:11:25,680 --> 00:11:29,120
david on av1 you can do

331
00:11:27,519 --> 00:11:31,360
the codes are around the same

332
00:11:29,120 --> 00:11:33,200
complexities and ff hvc

333
00:11:31,360 --> 00:11:35,040
um then you're going to say yeah but you

334
00:11:33,200 --> 00:11:38,480
didn't spend enough time in htvc

335
00:11:35,040 --> 00:11:40,800
sure we could maybe make the hvc decoder

336
00:11:38,480 --> 00:11:42,959
a bit faster but not so much faster

337
00:11:40,800 --> 00:11:44,160
so everyone is not that complex to the

338
00:11:42,959 --> 00:11:46,880
code

339
00:11:44,160 --> 00:11:47,680
in terms of cpu but as there are many

340
00:11:46,880 --> 00:11:51,040
tools it's

341
00:11:47,680 --> 00:11:53,199
long to code okay

342
00:11:51,040 --> 00:11:54,480
um are there some weird stuff in on the

343
00:11:53,200 --> 00:11:57,839
david yes

344
00:11:54,480 --> 00:11:59,519
there are two oops uh there are two

345
00:11:57,839 --> 00:12:00,800
things that are weird for a decoder the

346
00:11:59,519 --> 00:12:03,920
first one is actually

347
00:12:00,800 --> 00:12:06,160
dual pass inc decoder not encoder

348
00:12:03,920 --> 00:12:07,920
you see i just made a mistake uh it's

349
00:12:06,160 --> 00:12:09,760
quite hard to have that the first part

350
00:12:07,920 --> 00:12:10,560
is basically to analyze a few things to

351
00:12:09,760 --> 00:12:13,519
be able to

352
00:12:10,560 --> 00:12:14,880
um to schedule after um and also to to

353
00:12:13,519 --> 00:12:16,000
do a lot of parsing because there is a

354
00:12:14,880 --> 00:12:18,800
lot of things to pass

355
00:12:16,000 --> 00:12:19,760
uh at the entry point of an ev1 stream

356
00:12:18,800 --> 00:12:21,839
um obu

357
00:12:19,760 --> 00:12:24,240
and other stuff that were probably not

358
00:12:21,839 --> 00:12:26,480
the best designed ever

359
00:12:24,240 --> 00:12:27,839
but they were in a rush and the second

360
00:12:26,480 --> 00:12:30,720
one decodes

361
00:12:27,839 --> 00:12:32,320
and and we have a what is more um

362
00:12:30,720 --> 00:12:34,639
important for most of the people

363
00:12:32,320 --> 00:12:35,440
is that we have a dual threading model

364
00:12:34,639 --> 00:12:37,360
so

365
00:12:35,440 --> 00:12:38,959
we have a frame threading model so you

366
00:12:37,360 --> 00:12:41,440
start decoding

367
00:12:38,959 --> 00:12:42,560
one frame before the next one but at the

368
00:12:41,440 --> 00:12:44,959
same time we have a

369
00:12:42,560 --> 00:12:46,479
slight or tile threading models where

370
00:12:44,959 --> 00:12:47,839
you can basically because

371
00:12:46,480 --> 00:12:51,839
most of the video you're going to see in

372
00:12:47,839 --> 00:12:54,000
everyone are including slice or tiles

373
00:12:51,839 --> 00:12:55,839
so you can start decoding like the first

374
00:12:54,000 --> 00:12:56,399
row the second row the third row and so

375
00:12:55,839 --> 00:12:59,600
on

376
00:12:56,399 --> 00:13:02,000
so when you when you uh try to get the

377
00:12:59,600 --> 00:13:04,639
best performance out of david

378
00:13:02,000 --> 00:13:05,760
you need to basically set both how many

379
00:13:04,639 --> 00:13:07,120
styling thread

380
00:13:05,760 --> 00:13:09,519
and how many framing threads you're

381
00:13:07,120 --> 00:13:10,959
going to have and the thing is we might

382
00:13:09,519 --> 00:13:14,160
add more threads

383
00:13:10,959 --> 00:13:15,680
for the filters um so

384
00:13:14,160 --> 00:13:17,279
we need to do something about that to

385
00:13:15,680 --> 00:13:18,319
have everything automatic and works at

386
00:13:17,279 --> 00:13:20,079
the best

387
00:13:18,320 --> 00:13:21,680
and we would like not to use machine

388
00:13:20,079 --> 00:13:23,839
learning to decide that

389
00:13:21,680 --> 00:13:24,800
even though it's completely in fashion

390
00:13:23,839 --> 00:13:29,360
to do that

391
00:13:24,800 --> 00:13:31,359
um the rest like looks like a normal

392
00:13:29,360 --> 00:13:34,800
decoder like you have in the baby kodak

393
00:13:31,360 --> 00:13:38,560
except a bit bigger so the question is

394
00:13:34,800 --> 00:13:41,439
why um why is david faster

395
00:13:38,560 --> 00:13:43,199
than the competition um and there are

396
00:13:41,440 --> 00:13:44,160
like three main reasons the first one is

397
00:13:43,199 --> 00:13:46,560
like

398
00:13:44,160 --> 00:13:48,000
here we're seeing the single thread c

399
00:13:46,560 --> 00:13:50,399
version and you see that the c

400
00:13:48,000 --> 00:13:52,160
is quite well optimized and well written

401
00:13:50,399 --> 00:13:52,800
because already the c version in single

402
00:13:52,160 --> 00:13:55,439
thread

403
00:13:52,800 --> 00:13:56,319
is fast and more is coming because there

404
00:13:55,440 --> 00:13:59,040
is

405
00:13:56,320 --> 00:14:00,839
one big part of david that was that is

406
00:13:59,040 --> 00:14:02,639
not optimized in the c version that is

407
00:14:00,839 --> 00:14:05,680
coming soon

408
00:14:02,639 --> 00:14:08,560
in two weeks yeah sure in two weeks

409
00:14:05,680 --> 00:14:10,319
um the threading is quite amazing like

410
00:14:08,560 --> 00:14:10,638
um so this is the number of threads yes

411
00:14:10,320 --> 00:14:13,120
this

412
00:14:10,639 --> 00:14:14,480
is 2 thousand threads that is a graph

413
00:14:13,120 --> 00:14:17,279
that was done by some of the

414
00:14:14,480 --> 00:14:18,240
mozilla teams um and you see that

415
00:14:17,279 --> 00:14:21,360
basically like

416
00:14:18,240 --> 00:14:21,920
david's actually like scaled with

417
00:14:21,360 --> 00:14:25,120
threading

418
00:14:21,920 --> 00:14:28,079
quite a bit and if you see uh libero m

419
00:14:25,120 --> 00:14:28,480
or ejv one they just like chap around

420
00:14:28,079 --> 00:14:29,920
four

421
00:14:28,480 --> 00:14:31,519
or eight thread and then there they

422
00:14:29,920 --> 00:14:32,719
don't improve while david can still

423
00:14:31,519 --> 00:14:35,920
improve which means that

424
00:14:32,720 --> 00:14:38,320
like it's actually good um

425
00:14:35,920 --> 00:14:39,360
oops of course the other way um and we

426
00:14:38,320 --> 00:14:42,720
write

427
00:14:39,360 --> 00:14:43,519
actually low uh level code um that means

428
00:14:42,720 --> 00:14:45,760
c

429
00:14:43,519 --> 00:14:47,519
um so leave jv1 is in c plus plus so

430
00:14:45,760 --> 00:14:50,000
there is no c plus plus overhead

431
00:14:47,519 --> 00:14:50,720
we write handwritten assembly not

432
00:14:50,000 --> 00:14:52,959
intrinsics

433
00:14:50,720 --> 00:14:55,600
yeah but increasings are easier yes they

434
00:14:52,959 --> 00:14:57,518
are easier but you lose between 10 to 15

435
00:14:55,600 --> 00:14:58,639
that's what we've seen lately on the

436
00:14:57,519 --> 00:15:00,720
various threads

437
00:14:58,639 --> 00:15:02,000
on the ffmpeg mailing list interesting

438
00:15:00,720 --> 00:15:04,639
are slower

439
00:15:02,000 --> 00:15:05,920
almost always um so no interesting

440
00:15:04,639 --> 00:15:08,399
handwritten assembly

441
00:15:05,920 --> 00:15:10,079
so basically dvd is like the c version

442
00:15:08,399 --> 00:15:12,959
is faster in single thread

443
00:15:10,079 --> 00:15:13,439
we can scale better with threads and we

444
00:15:12,959 --> 00:15:15,920
write

445
00:15:13,440 --> 00:15:19,760
lower level code which means that of

446
00:15:15,920 --> 00:15:19,760
course no one is going to be david ever

447
00:15:22,399 --> 00:15:26,079
so basically in an ev1 in david there is

448
00:15:25,199 --> 00:15:28,319
like eight

449
00:15:26,079 --> 00:15:29,279
stage that are basically um um that we

450
00:15:28,320 --> 00:15:31,920
managed to

451
00:15:29,279 --> 00:15:33,040
asm correctly the first one is msac

452
00:15:31,920 --> 00:15:35,839
which is basically

453
00:15:33,040 --> 00:15:36,719
uh an entropy decoder there is inverse

454
00:15:35,839 --> 00:15:38,480
transform

455
00:15:36,720 --> 00:15:40,320
the motion compensation the intra

456
00:15:38,480 --> 00:15:42,720
prediction another

457
00:15:40,320 --> 00:15:44,480
fall after is our loop field our filters

458
00:15:42,720 --> 00:15:47,440
loop filter loop restoration

459
00:15:44,480 --> 00:15:48,560
the famous c dev and the film grain um

460
00:15:47,440 --> 00:15:50,480
film grain is quite

461
00:15:48,560 --> 00:15:51,599
um debatable because a lot of people

462
00:15:50,480 --> 00:15:54,639
don't like that

463
00:15:51,600 --> 00:15:56,480
but so when you now start and run uh

464
00:15:54,639 --> 00:15:59,199
david and you perfect you realize that

465
00:15:56,480 --> 00:16:02,399
the the the the parts that are basically

466
00:15:59,199 --> 00:16:04,560
non ism are around 25

467
00:16:02,399 --> 00:16:06,240
of the runtime um and that's mostly on

468
00:16:04,560 --> 00:16:09,839
the what we call the fmv

469
00:16:06,240 --> 00:16:09,839
and the decode uh coefficient

470
00:16:10,480 --> 00:16:16,959
um so that's for avx2 fsc3 i'm

471
00:16:13,519 --> 00:16:18,959
34 and i'm i'm 64 i'm 32.

472
00:16:16,959 --> 00:16:21,199
uh you can see that basically the

473
00:16:18,959 --> 00:16:23,359
optimization done for avx2 are full

474
00:16:21,199 --> 00:16:25,279
and we there is not much to gain on

475
00:16:23,360 --> 00:16:27,360
writing better optimizations

476
00:16:25,279 --> 00:16:29,519
um there is just like a few tools like

477
00:16:27,360 --> 00:16:30,240
in 444 or some interpretations that are

478
00:16:29,519 --> 00:16:33,279
not done

479
00:16:30,240 --> 00:16:33,759
for ssc3 ss3 is probably one of the most

480
00:16:33,279 --> 00:16:35,439
difficult

481
00:16:33,759 --> 00:16:37,680
assembly to write because we need to

482
00:16:35,440 --> 00:16:39,040
support both 32 bits which has

483
00:16:37,680 --> 00:16:40,959
absolutely no registers

484
00:16:39,040 --> 00:16:42,719
and 64 bits and you need to care about

485
00:16:40,959 --> 00:16:43,839
the windows calling convention and the

486
00:16:42,720 --> 00:16:45,680
linux

487
00:16:43,839 --> 00:16:47,920
convention and of course mac which is

488
00:16:45,680 --> 00:16:50,239
another mess so that's quite a bit

489
00:16:47,920 --> 00:16:52,000
um difficult but that was mostly done

490
00:16:50,240 --> 00:16:52,639
there is some field grain that is done

491
00:16:52,000 --> 00:16:55,199
but it's not

492
00:16:52,639 --> 00:16:55,839
merged yet so next release it's merged

493
00:16:55,199 --> 00:16:58,719
and

494
00:16:55,839 --> 00:16:59,839
as you can see we did some parts in ssc2

495
00:16:58,720 --> 00:17:01,920
because that was easier

496
00:16:59,839 --> 00:17:03,600
mostly it's an entropy decoder which

497
00:17:01,920 --> 00:17:06,559
there is no in avx2

498
00:17:03,600 --> 00:17:07,919
um some of the motion compensation one

499
00:17:06,559 --> 00:17:11,119
of the loop restoration

500
00:17:07,919 --> 00:17:11,520
and the cdf arm 64 you can see that most

501
00:17:11,119 --> 00:17:13,760
every

502
00:17:11,520 --> 00:17:14,959
mostly everything is done except the

503
00:17:13,760 --> 00:17:17,760
film grain

504
00:17:14,959 --> 00:17:18,000
um and arm 32 has still quite a bit of

505
00:17:17,760 --> 00:17:19,520
work

506
00:17:18,000 --> 00:17:21,599
to be done the entropy coding the

507
00:17:19,520 --> 00:17:24,559
inverse transform which is large

508
00:17:21,599 --> 00:17:25,359
to write in um for everyone because it's

509
00:17:24,559 --> 00:17:27,760
quite large

510
00:17:25,359 --> 00:17:28,879
and the intra predictions like there is

511
00:17:27,760 --> 00:17:33,760
dc h and v

512
00:17:28,880 --> 00:17:37,039
that are done but the rest are not

513
00:17:33,760 --> 00:17:39,440
which brings me to that um here you can

514
00:17:37,039 --> 00:17:42,320
see basically the oops

515
00:17:39,440 --> 00:17:43,919
you can see the x264 is an encoder it's

516
00:17:42,320 --> 00:17:45,520
extremely fast it's blah blah blah we

517
00:17:43,919 --> 00:17:48,000
wrote a lot of assembly

518
00:17:45,520 --> 00:17:48,799
and when you look at the graph of x264

519
00:17:48,000 --> 00:17:51,840
you see that

520
00:17:48,799 --> 00:17:54,720
around 25 of the code base is assembly

521
00:17:51,840 --> 00:17:55,039
and um the rest is c um and of course

522
00:17:54,720 --> 00:17:58,480
like

523
00:17:55,039 --> 00:18:01,360
if you look e364 is 68 000 lines of code

524
00:17:58,480 --> 00:18:02,080
and around you see 37 lines of code of

525
00:18:01,360 --> 00:18:03,760
assembly

526
00:18:02,080 --> 00:18:05,678
and when you take the whole ebv codec

527
00:18:03,760 --> 00:18:06,000
which is half a million line of code in

528
00:18:05,679 --> 00:18:08,640
c

529
00:18:06,000 --> 00:18:09,600
you see that it's 80 000 lines of code

530
00:18:08,640 --> 00:18:13,280
of assembly

531
00:18:09,600 --> 00:18:16,559
but david is weird it's only 25 000

532
00:18:13,280 --> 00:18:19,840
lines of c but already 64 kilo

533
00:18:16,559 --> 00:18:20,480
lines of code of assembly that's like um

534
00:18:19,840 --> 00:18:23,439
that's

535
00:18:20,480 --> 00:18:25,280
more a lot more than x264 and almost as

536
00:18:23,440 --> 00:18:25,919
much as what you have in libya kodak

537
00:18:25,280 --> 00:18:28,559
because there is

538
00:18:25,919 --> 00:18:30,240
the 10 bits arm assembly and x86

539
00:18:28,559 --> 00:18:32,000
assembly that is coming soon

540
00:18:30,240 --> 00:18:33,919
and it's going to make that just for one

541
00:18:32,000 --> 00:18:36,960
decoder to be right more assembly than

542
00:18:33,919 --> 00:18:36,960
the whole ebay codec

543
00:18:39,919 --> 00:18:46,480
we worked on something weird last

544
00:18:43,200 --> 00:18:47,840
summer so if you listen to me like one

545
00:18:46,480 --> 00:18:50,320
year ago

546
00:18:47,840 --> 00:18:50,879
i would say like yeah everything related

547
00:18:50,320 --> 00:18:53,360
to gp

548
00:18:50,880 --> 00:18:54,799
gpu is idiotic it's too slow there is

549
00:18:53,360 --> 00:18:56,719
too much latency

550
00:18:54,799 --> 00:18:57,840
i've said that quite a bit quite a few

551
00:18:56,720 --> 00:18:59,520
times um

552
00:18:57,840 --> 00:19:01,280
and other people of the community said

553
00:18:59,520 --> 00:19:03,039
that too right it's very difficult

554
00:19:01,280 --> 00:19:05,360
because then you have like the latency

555
00:19:03,039 --> 00:19:05,679
to upload the textures and get it back

556
00:19:05,360 --> 00:19:07,840
and

557
00:19:05,679 --> 00:19:09,120
like it's quite difficult a lot of tools

558
00:19:07,840 --> 00:19:11,760
are cuda based and

559
00:19:09,120 --> 00:19:13,360
which is like not open source at all

560
00:19:11,760 --> 00:19:14,160
because like nvidia doesn't like open

561
00:19:13,360 --> 00:19:18,479
source

562
00:19:14,160 --> 00:19:21,600
um but we said like what about we try

563
00:19:18,480 --> 00:19:24,400
anyway um

564
00:19:21,600 --> 00:19:25,280
in david the film grain is already a gls

565
00:19:24,400 --> 00:19:26,640
cell shader

566
00:19:25,280 --> 00:19:28,720
right you have a c version that is

567
00:19:26,640 --> 00:19:30,400
optimized but what we advise people is

568
00:19:28,720 --> 00:19:32,720
to actually do that in the player

569
00:19:30,400 --> 00:19:35,120
because the film grain is really at

570
00:19:32,720 --> 00:19:36,960
after that your decoding is done

571
00:19:35,120 --> 00:19:39,360
but the question was can we do more can

572
00:19:36,960 --> 00:19:41,039
we do cdf loop restoration and

573
00:19:39,360 --> 00:19:42,719
other loop filters and it's very

574
00:19:41,039 --> 00:19:44,640
difficult because you cannot really know

575
00:19:42,720 --> 00:19:47,039
if it's going to be faster

576
00:19:44,640 --> 00:19:49,039
but do you actually care about being

577
00:19:47,039 --> 00:19:51,200
faster or do you not

578
00:19:49,039 --> 00:19:52,799
what you mostly care about is the

579
00:19:51,200 --> 00:19:54,640
consumption right

580
00:19:52,799 --> 00:19:56,720
how much battery drain is it going to be

581
00:19:54,640 --> 00:19:59,200
on your phone on your android phone

582
00:19:56,720 --> 00:20:00,080
um and because as soon as you got 60 fps

583
00:19:59,200 --> 00:20:03,039
you don't care if

584
00:20:00,080 --> 00:20:04,480
doing 70 fps it's only for gamers who

585
00:20:03,039 --> 00:20:07,039
care about 140

586
00:20:04,480 --> 00:20:08,799
4ds but for video you don't care about

587
00:20:07,039 --> 00:20:10,158
that what you care is to not drain your

588
00:20:08,799 --> 00:20:10,639
battery when you're watching your video

589
00:20:10,159 --> 00:20:12,559
on

590
00:20:10,640 --> 00:20:14,080
instagram or in snapchat or whatever

591
00:20:12,559 --> 00:20:17,120
you're watching um

592
00:20:14,080 --> 00:20:19,199
so we had a g-sock um who did that

593
00:20:17,120 --> 00:20:21,760
during the summer the guy had no idea

594
00:20:19,200 --> 00:20:24,080
about most everyone

595
00:20:21,760 --> 00:20:27,039
and so he did basically the cdf and the

596
00:20:24,080 --> 00:20:30,480
loop restorations of both sdr and wiener

597
00:20:27,039 --> 00:20:32,960
in vulcan shaders tested on an android

598
00:20:30,480 --> 00:20:36,480
huawei phone

599
00:20:32,960 --> 00:20:36,799
i think uh yeah huawei p20 and what you

600
00:20:36,480 --> 00:20:39,840
see

601
00:20:36,799 --> 00:20:43,039
is that what we saw is that like we

602
00:20:39,840 --> 00:20:46,000
didn't get any speed increase however

603
00:20:43,039 --> 00:20:47,120
for like basically the same um the same

604
00:20:46,000 --> 00:20:49,600
decoding time

605
00:20:47,120 --> 00:20:50,239
so we put basically a vlc running and

606
00:20:49,600 --> 00:20:52,480
playing

607
00:20:50,240 --> 00:20:54,720
playing the file on loop you see that

608
00:20:52,480 --> 00:20:58,080
basically we get 20 percent

609
00:20:54,720 --> 00:21:03,280
less battery drain on that um

610
00:20:58,080 --> 00:21:06,399
just by using gpu computers um

611
00:21:03,280 --> 00:21:07,440
which was not expected um so what is the

612
00:21:06,400 --> 00:21:09,520
future

613
00:21:07,440 --> 00:21:10,720
the next work on on david is going to be

614
00:21:09,520 --> 00:21:14,320
of course 10 bits

615
00:21:10,720 --> 00:21:17,440
um and then decide what we can do

616
00:21:14,320 --> 00:21:20,158
about gp gpu and

617
00:21:17,440 --> 00:21:20,799
how can we move that to the next level

618
00:21:20,159 --> 00:21:25,039
thank you

619
00:21:20,799 --> 00:21:31,840
and i'm taking questions am i allowed

620
00:21:25,039 --> 00:21:31,840
how much time

621
00:21:32,159 --> 00:21:35,840
we have a lot of questions i'm not sure

622
00:21:33,679 --> 00:21:37,440
we'll be able to answer all of them

623
00:21:35,840 --> 00:21:38,959
but let's start how the dual pass

624
00:21:37,440 --> 00:21:40,960
requirements fits

625
00:21:38,960 --> 00:21:42,559
with the current low latency to end the

626
00:21:40,960 --> 00:21:45,679
streaming world

627
00:21:42,559 --> 00:21:49,200
um i don't think it matters most much

628
00:21:45,679 --> 00:21:50,159
on the way it's done um it could be

629
00:21:49,200 --> 00:21:53,600
problematic

630
00:21:50,159 --> 00:21:55,039
um in some cases but i don't think it

631
00:21:53,600 --> 00:21:56,080
matters the way it's implemented maybe

632
00:21:55,039 --> 00:21:58,879
you should spread that

633
00:21:56,080 --> 00:21:59,439
also but that should be okay are the

634
00:21:58,880 --> 00:22:02,559
sisvel

635
00:21:59,440 --> 00:22:03,600
patent pool for everyone valid i would

636
00:22:02,559 --> 00:22:07,039
say

637
00:22:03,600 --> 00:22:10,480
no um they they are surely

638
00:22:07,039 --> 00:22:11,840
ivy one patent pool patents that exist

639
00:22:10,480 --> 00:22:14,320
because like there is a patent on

640
00:22:11,840 --> 00:22:16,080
absolutely everything i think it's like

641
00:22:14,320 --> 00:22:17,840
very very very small things so they

642
00:22:16,080 --> 00:22:19,520
don't matter at all and i think it's

643
00:22:17,840 --> 00:22:20,959
just the usual third that

644
00:22:19,520 --> 00:22:22,799
they're doing

645
00:22:20,960 --> 00:22:24,960
all of this is for eight bits which is

646
00:22:22,799 --> 00:22:26,400
nice and fast what about 10 bits and hdr

647
00:22:24,960 --> 00:22:28,720
yeah it's coming uh

648
00:22:26,400 --> 00:22:29,919
probably first will be arm64 and then

649
00:22:28,720 --> 00:22:32,159
x36

650
00:22:29,919 --> 00:22:36,080
is it possible to use av1 as an intro

651
00:22:32,159 --> 00:22:40,000
yes is it a good idea i'm not sure

652
00:22:36,080 --> 00:22:40,559
why um i think stuff like ff ffv1 are

653
00:22:40,000 --> 00:22:42,960
easier

654
00:22:40,559 --> 00:22:43,918
to do that i mean like i don't think

655
00:22:42,960 --> 00:22:46,240
everyone was

656
00:22:43,919 --> 00:22:47,200
done for that but like there are people

657
00:22:46,240 --> 00:22:51,120
around there that

658
00:22:47,200 --> 00:22:52,480
might know better yeah avif for images

659
00:22:51,120 --> 00:22:54,080
but

660
00:22:52,480 --> 00:22:56,320
what are the major companies missing

661
00:22:54,080 --> 00:22:58,799
from aom and

662
00:22:56,320 --> 00:22:58,799
bbc

663
00:22:59,679 --> 00:23:03,440
uh i would say that some of the people

664
00:23:02,400 --> 00:23:06,080
who are in aom

665
00:23:03,440 --> 00:23:08,240
like samsung and apple are important and

666
00:23:06,080 --> 00:23:10,960
we don't know exactly what they're doing

667
00:23:08,240 --> 00:23:12,400
because those are big companies who is

668
00:23:10,960 --> 00:23:14,159
currently using david

669
00:23:12,400 --> 00:23:15,760
oh that's a good question so every

670
00:23:14,159 --> 00:23:17,520
version of chrome every version of

671
00:23:15,760 --> 00:23:19,039
firefox that is shipped every version of

672
00:23:17,520 --> 00:23:21,120
vlc fm peg

673
00:23:19,039 --> 00:23:22,480
and most players based on the fm pack

674
00:23:21,120 --> 00:23:24,559
use david so

675
00:23:22,480 --> 00:23:26,480
that's around everyone that is shipping

676
00:23:24,559 --> 00:23:28,760
everyone except android

677
00:23:26,480 --> 00:23:30,000
what kind of operations do you use from

678
00:23:28,760 --> 00:23:33,200
s633

679
00:23:30,000 --> 00:23:37,840
but i'm not in ssc too

680
00:23:33,200 --> 00:23:37,840
ask that guy

681
00:23:47,919 --> 00:23:50,799
so you have to write

682
00:23:51,840 --> 00:23:55,439
well if you want more details ask him

683
00:23:55,600 --> 00:23:58,639
can david use gpu acceleration i think

684
00:23:57,440 --> 00:24:01,200
you answered that yeah

685
00:23:58,640 --> 00:24:02,320
no that's not opencl not cuda this is

686
00:24:01,200 --> 00:24:05,679
compute shaders

687
00:24:02,320 --> 00:24:08,399
we're using uh vulcan compute shaders

688
00:24:05,679 --> 00:24:10,080
and not when do you think we can expect

689
00:24:08,400 --> 00:24:14,000
wide av1 support in cheap

690
00:24:10,080 --> 00:24:15,678
low end devices end of the year

691
00:24:14,000 --> 00:24:17,200
september you will have cheap or

692
00:24:15,679 --> 00:24:21,039
cheapest android

693
00:24:17,200 --> 00:24:25,039
like 200 to 300 devices that can decode

694
00:24:21,039 --> 00:24:32,879
81 8-bit 10-bit 1080p real time

695
00:24:25,039 --> 00:24:34,960
thank you daily thanks

696
00:24:32,880 --> 00:24:34,960
you

