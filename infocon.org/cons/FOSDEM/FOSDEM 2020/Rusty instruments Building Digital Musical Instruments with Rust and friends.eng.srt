1
00:00:05,520 --> 00:00:08,879
hi

2
00:00:06,160 --> 00:00:10,160
um yes i'm sorry i'm not very well

3
00:00:08,880 --> 00:00:10,639
actually so i would have brought some

4
00:00:10,160 --> 00:00:12,320
demos

5
00:00:10,639 --> 00:00:13,759
it's just been a bit of a rough couple

6
00:00:12,320 --> 00:00:14,719
of days just got cold but i just not

7
00:00:13,759 --> 00:00:17,760
feeling the best

8
00:00:14,719 --> 00:00:19,279
and i traveled on friday so i apologize

9
00:00:17,760 --> 00:00:21,840
i'm from the uk so it was a pretty

10
00:00:19,279 --> 00:00:23,198
miserable day on friday and

11
00:00:21,840 --> 00:00:25,119
i'd like to i think myself a fairly

12
00:00:23,199 --> 00:00:27,359
inclusive and open person and i'm

13
00:00:25,119 --> 00:00:29,279
yeah there's sad times at the moment but

14
00:00:27,359 --> 00:00:30,880
anyway we'll move on for that and

15
00:00:29,279 --> 00:00:32,238
so i'm going to talk about and i would

16
00:00:30,880 --> 00:00:33,199
have had some demos and played some

17
00:00:32,238 --> 00:00:35,440
music for you but

18
00:00:33,200 --> 00:00:36,559
yeah about a project that i've been

19
00:00:35,440 --> 00:00:38,079
working on for a while

20
00:00:36,559 --> 00:00:39,919
i'm at the university of west of england

21
00:00:38,079 --> 00:00:41,520
with some phd students of mine

22
00:00:39,920 --> 00:00:42,800
some of them musicians and composers

23
00:00:41,520 --> 00:00:44,160
some of them are computer scientists and

24
00:00:42,800 --> 00:00:47,199
we kind of have this mix

25
00:00:44,160 --> 00:00:49,760
collaboration group and in particular

26
00:00:47,200 --> 00:00:51,280
we've got this music project which look

27
00:00:49,760 --> 00:00:55,120
is looking at

28
00:00:51,280 --> 00:00:57,520
um materializations

29
00:00:55,120 --> 00:00:58,239
of musical controllers in particular but

30
00:00:57,520 --> 00:01:00,000
also

31
00:00:58,239 --> 00:01:01,519
dsp code and everything and stuff and

32
00:01:00,000 --> 00:01:02,719
although that's more my area rather than

33
00:01:01,520 --> 00:01:03,440
some of my students they're much more

34
00:01:02,719 --> 00:01:06,960
interested in

35
00:01:03,440 --> 00:01:10,320
composition and in interaction so hci

36
00:01:06,960 --> 00:01:13,600
stuff and we've kind of built up this

37
00:01:10,320 --> 00:01:15,119
infrastructure that is around physical

38
00:01:13,600 --> 00:01:16,000
computing so a lot of stuff

39
00:01:15,119 --> 00:01:19,040
some of the stuff i'll show you in

40
00:01:16,000 --> 00:01:21,840
pictures is actually building up

41
00:01:19,040 --> 00:01:23,439
um physical instruments but the idea is

42
00:01:21,840 --> 00:01:24,960
rather than the musician having to go

43
00:01:23,439 --> 00:01:26,880
and buy something off the shelf or

44
00:01:24,960 --> 00:01:28,559
more expensive they we want to make them

45
00:01:26,880 --> 00:01:29,920
so they could potentially build it

46
00:01:28,560 --> 00:01:31,360
now of course that's not for everyone

47
00:01:29,920 --> 00:01:33,040
i'm not saying that but the idea of

48
00:01:31,360 --> 00:01:36,000
trying to breaking down that barrier

49
00:01:33,040 --> 00:01:37,600
of having non-engineers build build

50
00:01:36,000 --> 00:01:39,119
instruments and things and you know we

51
00:01:37,600 --> 00:01:40,158
see software like that some things like

52
00:01:39,119 --> 00:01:42,399
pd or max

53
00:01:40,159 --> 00:01:44,079
msp visual programming is supposed to

54
00:01:42,399 --> 00:01:44,479
intense like that but it's still very

55
00:01:44,079 --> 00:01:46,079
much

56
00:01:44,479 --> 00:01:48,159
in the programming environments rather

57
00:01:46,079 --> 00:01:50,158
than in

58
00:01:48,159 --> 00:01:51,439
actual physical computing and of course

59
00:01:50,159 --> 00:01:53,439
the maker community

60
00:01:51,439 --> 00:01:55,039
has broken that down quite a lot for i

61
00:01:53,439 --> 00:01:57,360
mean still a lot of people who are

62
00:01:55,040 --> 00:01:58,799
you know tech savvy and things like that

63
00:01:57,360 --> 00:02:00,320
but they're starting to break down those

64
00:01:58,799 --> 00:02:01,920
barriers and some things and so we're

65
00:02:00,320 --> 00:02:05,119
we're looking at that intersection

66
00:02:01,920 --> 00:02:06,880
really interested and in a minute i'll

67
00:02:05,119 --> 00:02:08,160
just give you a flick to that this is

68
00:02:06,880 --> 00:02:09,679
the website where you can find out lots

69
00:02:08,160 --> 00:02:10,478
of stuff there's the github links of all

70
00:02:09,679 --> 00:02:12,000
the

71
00:02:10,479 --> 00:02:13,680
code you'll see that it's not just russ

72
00:02:12,000 --> 00:02:15,440
code and that's what i'll talk a little

73
00:02:13,680 --> 00:02:19,360
bit about that in a minute

74
00:02:15,440 --> 00:02:20,800
but um so i mean my my motto

75
00:02:19,360 --> 00:02:22,959
is over the years i've worked in

76
00:02:20,800 --> 00:02:23,840
industry for a long time it's just used

77
00:02:22,959 --> 00:02:25,440
the right thing

78
00:02:23,840 --> 00:02:26,640
to solve the problem of course what you

79
00:02:25,440 --> 00:02:27,760
think is the right thing is not always

80
00:02:26,640 --> 00:02:29,679
what other people think is the right

81
00:02:27,760 --> 00:02:31,760
thing but that's a separate story and

82
00:02:29,680 --> 00:02:33,200
you know i'm no more right than anyone

83
00:02:31,760 --> 00:02:34,879
else's so i'm not going to kind of

84
00:02:33,200 --> 00:02:36,160
advocate one thing or another i'll just

85
00:02:34,879 --> 00:02:37,040
show you the kind of things that i'm

86
00:02:36,160 --> 00:02:39,120
interested in

87
00:02:37,040 --> 00:02:40,319
and have been using rust for but in

88
00:02:39,120 --> 00:02:42,560
particular i'm really

89
00:02:40,319 --> 00:02:44,000
keen on rust as an intersection with

90
00:02:42,560 --> 00:02:45,519
other languages i don't want it to be

91
00:02:44,000 --> 00:02:47,280
the solution for everything

92
00:02:45,519 --> 00:02:48,239
and i don't want the other things i use

93
00:02:47,280 --> 00:02:49,519
to be a solution for everything because

94
00:02:48,239 --> 00:02:51,599
i don't think they are

95
00:02:49,519 --> 00:02:52,720
so i just um where it makes sense is

96
00:02:51,599 --> 00:02:55,119
what i do

97
00:02:52,720 --> 00:02:56,560
so there's a long history of musical

98
00:02:55,120 --> 00:02:57,920
instruments obviously

99
00:02:56,560 --> 00:02:59,599
and i'm mostly thinking from a western

100
00:02:57,920 --> 00:03:00,079
perspective i don't at all want to say

101
00:02:59,599 --> 00:03:03,760
there aren't

102
00:03:00,080 --> 00:03:06,159
many other kind of ways and

103
00:03:03,760 --> 00:03:07,760
ways of looking uh from an entomological

104
00:03:06,159 --> 00:03:09,040
point of view about musical instruments

105
00:03:07,760 --> 00:03:10,159
i just don't have that much experience

106
00:03:09,040 --> 00:03:11,440
in it so i wouldn't want to talk about

107
00:03:10,159 --> 00:03:13,359
it and present it

108
00:03:11,440 --> 00:03:14,720
here but from a western place you know

109
00:03:13,360 --> 00:03:17,200
we've got the kind of classical

110
00:03:14,720 --> 00:03:18,959
periods particularly from kind of around

111
00:03:17,200 --> 00:03:20,480
shakespearean time in in my

112
00:03:18,959 --> 00:03:21,680
history you know where musical

113
00:03:20,480 --> 00:03:23,200
instruments started but particularly

114
00:03:21,680 --> 00:03:24,799
since we had the printing press

115
00:03:23,200 --> 00:03:26,879
you know and music became be able to

116
00:03:24,799 --> 00:03:27,599
distribute the kind of musical form of

117
00:03:26,879 --> 00:03:30,319
the instrument

118
00:03:27,599 --> 00:03:32,238
became quite fixed you know the piano

119
00:03:30,319 --> 00:03:33,280
didn't emerge first it was the printing

120
00:03:32,239 --> 00:03:35,360
press that emerged

121
00:03:33,280 --> 00:03:37,040
and the ability to distribute music made

122
00:03:35,360 --> 00:03:38,319
wanted to standardize

123
00:03:37,040 --> 00:03:39,519
things and i'm sure we can all agree

124
00:03:38,319 --> 00:03:41,119
that standardization is good in some

125
00:03:39,519 --> 00:03:42,159
ways but it also does hold us back in

126
00:03:41,120 --> 00:03:44,239
other ways you know and

127
00:03:42,159 --> 00:03:45,359
um and so of course we've got to the

128
00:03:44,239 --> 00:03:47,200
modern times

129
00:03:45,360 --> 00:03:48,799
electronics you know the the 19th

130
00:03:47,200 --> 00:03:50,480
century had lots of bad 20th century

131
00:03:48,799 --> 00:03:52,319
story had lots of bad things

132
00:03:50,480 --> 00:03:54,238
caused by many of the innovations but

133
00:03:52,319 --> 00:03:56,640
also had many incredible things and

134
00:03:54,239 --> 00:03:57,680
i'm sure as we work in technology it's a

135
00:03:56,640 --> 00:03:59,518
kind of difficult

136
00:03:57,680 --> 00:04:01,200
balancing act you know sometimes i feel

137
00:03:59,519 --> 00:04:03,040
that we should just throw it all away

138
00:04:01,200 --> 00:04:04,238
not by the next phone or whatever and

139
00:04:03,040 --> 00:04:06,159
other times i'm thinking wow this is

140
00:04:04,239 --> 00:04:08,480
amazing you know so anyway

141
00:04:06,159 --> 00:04:09,439
uh in the uk we had this thing called

142
00:04:08,480 --> 00:04:12,079
the uh

143
00:04:09,439 --> 00:04:14,000
bbc uh radio workshop was where they did

144
00:04:12,080 --> 00:04:15,760
the dalek soundtrack you know for doctor

145
00:04:14,000 --> 00:04:17,759
who and all of that sort of stuff

146
00:04:15,760 --> 00:04:18,880
which is famous and so they started to

147
00:04:17,759 --> 00:04:20,000
build these studios

148
00:04:18,880 --> 00:04:21,680
i even managed to get a picture of a

149
00:04:20,000 --> 00:04:22,720
woman rather than a guy which was great

150
00:04:21,680 --> 00:04:24,000
actually that the

151
00:04:22,720 --> 00:04:26,000
radiophonic workshop was a real place

152
00:04:24,000 --> 00:04:27,600
where that women had quite a lot of

153
00:04:26,000 --> 00:04:29,120
very innovative dealer derbyshire is the

154
00:04:27,600 --> 00:04:29,919
famous one but there's a lot of others

155
00:04:29,120 --> 00:04:32,240
as well

156
00:04:29,919 --> 00:04:33,440
and of course in the 80s we had people

157
00:04:32,240 --> 00:04:34,880
starting to break away from the more

158
00:04:33,440 --> 00:04:36,240
conventional instruments and finding and

159
00:04:34,880 --> 00:04:37,360
being able to make instruments out of

160
00:04:36,240 --> 00:04:39,520
other things

161
00:04:37,360 --> 00:04:41,840
you know particularly the obvious one is

162
00:04:39,520 --> 00:04:42,080
the the record deck and making that into

163
00:04:41,840 --> 00:04:45,840
an

164
00:04:42,080 --> 00:04:48,639
instrument in its own right and today

165
00:04:45,840 --> 00:04:49,679
we have many people live coding is a

166
00:04:48,639 --> 00:04:51,199
popular thing

167
00:04:49,680 --> 00:04:52,080
and we've got this kind of world of

168
00:04:51,199 --> 00:04:53,600
where people are sitting in front of

169
00:04:52,080 --> 00:04:54,639
their laptops and

170
00:04:53,600 --> 00:04:57,199
you know i've been to lots of musical

171
00:04:54,639 --> 00:04:58,639
events it's not that exciting to see

172
00:04:57,199 --> 00:05:00,560
people sitting in front of their laptops

173
00:04:58,639 --> 00:05:02,240
but the music they make and the stuff

174
00:05:00,560 --> 00:05:03,680
they're using is incredible

175
00:05:02,240 --> 00:05:05,680
right you know i'm not a live coders

176
00:05:03,680 --> 00:05:07,440
myself but i love the kind of philosophy

177
00:05:05,680 --> 00:05:11,039
behind what they're trying to

178
00:05:07,440 --> 00:05:12,240
really that's sorry yes

179
00:05:11,039 --> 00:05:13,599
yeah i think it wouldn't go to sleep

180
00:05:12,240 --> 00:05:15,280
when i got in full screen in chrome but

181
00:05:13,600 --> 00:05:16,400
it still does anyway

182
00:05:15,280 --> 00:05:18,719
i can probably turn it off i'm not going

183
00:05:16,400 --> 00:05:19,758
to worry about that now but

184
00:05:18,720 --> 00:05:21,039
one of the things we're really

185
00:05:19,759 --> 00:05:22,960
interested in so i'm really interested

186
00:05:21,039 --> 00:05:24,719
in digital using digital

187
00:05:22,960 --> 00:05:26,320
uh synthesis and digital generation of

188
00:05:24,720 --> 00:05:28,240
musical instruments and so how we can

189
00:05:26,320 --> 00:05:30,000
connect to these digital devices

190
00:05:28,240 --> 00:05:31,280
but in maybe a less conventional way not

191
00:05:30,000 --> 00:05:32,960
sitting in front of a laptop but also

192
00:05:31,280 --> 00:05:34,159
not sitting in front of a keyboard

193
00:05:32,960 --> 00:05:36,880
and so we're interested in building

194
00:05:34,160 --> 00:05:38,400
things so there's been a lot of work

195
00:05:36,880 --> 00:05:39,919
particularly there's this out of queen

196
00:05:38,400 --> 00:05:40,799
mary in the uk there's this thing called

197
00:05:39,919 --> 00:05:42,159
the bella board

198
00:05:40,800 --> 00:05:44,639
which is very much inspired by the

199
00:05:42,160 --> 00:05:47,840
arduino kind of maker environment

200
00:05:44,639 --> 00:05:50,560
but it's got a very high-end

201
00:05:47,840 --> 00:05:52,320
you know dsp and you know particularly

202
00:05:50,560 --> 00:05:52,720
the audio the op-amps and all that you

203
00:05:52,320 --> 00:05:54,719
know

204
00:05:52,720 --> 00:05:56,240
they're non-cheap you know it's ratchet

205
00:05:54,720 --> 00:05:57,919
is a very simple board but you still pay

206
00:05:56,240 --> 00:05:59,919
150 pounds for it because the op-amps

207
00:05:57,919 --> 00:06:02,639
they're using are expensive not cheap

208
00:05:59,919 --> 00:06:03,039
you know and it's a full 24-bit dac and

209
00:06:02,639 --> 00:06:04,240
eight

210
00:06:03,039 --> 00:06:06,080
and so forth and stuff and things it's a

211
00:06:04,240 --> 00:06:06,639
really nice little board and it can

212
00:06:06,080 --> 00:06:08,159
support

213
00:06:06,639 --> 00:06:09,680
it it multiplexes the channels so you

214
00:06:08,160 --> 00:06:11,520
can have full 96

215
00:06:09,680 --> 00:06:13,280
kilohertz kind of speed but if you want

216
00:06:11,520 --> 00:06:13,840
to have 16 channels you get down to like

217
00:06:13,280 --> 00:06:15,758
22

218
00:06:13,840 --> 00:06:17,119
you know so depending on what you'll do

219
00:06:15,759 --> 00:06:18,639
um but it's really nice

220
00:06:17,120 --> 00:06:20,880
and it's you know it's a full linux

221
00:06:18,639 --> 00:06:22,479
stack it's based on a beaglebone

222
00:06:20,880 --> 00:06:24,080
and they modify the kernel so they can

223
00:06:22,479 --> 00:06:25,680
get real time and so forth

224
00:06:24,080 --> 00:06:27,440
and of course it's a linux stack so we

225
00:06:25,680 --> 00:06:28,880
can build and compile

226
00:06:27,440 --> 00:06:30,560
using our favorite languages whatever

227
00:06:28,880 --> 00:06:32,560
that may be whether it's c plus plus or

228
00:06:30,560 --> 00:06:34,080
rust or anything else for that matter

229
00:06:32,560 --> 00:06:36,160
they do a lot of stuff with pd

230
00:06:34,080 --> 00:06:37,440
which is a visual programming language

231
00:06:36,160 --> 00:06:38,080
and things because a lot of musicians

232
00:06:37,440 --> 00:06:40,240
aren't

233
00:06:38,080 --> 00:06:41,599
going to be found in that so these are

234
00:06:40,240 --> 00:06:43,039
kind of conventional interfaces i won't

235
00:06:41,600 --> 00:06:45,520
spend too long

236
00:06:43,039 --> 00:06:46,479
on these stuff hopefully things this is

237
00:06:45,520 --> 00:06:48,080
the kind of

238
00:06:46,479 --> 00:06:50,639
field the maker field these are actually

239
00:06:48,080 --> 00:06:52,080
all bella based instruments

240
00:06:50,639 --> 00:06:54,080
that people have built and most of these

241
00:06:52,080 --> 00:06:55,680
are not you know not all of them

242
00:06:54,080 --> 00:06:57,280
are engineers most of them aren't

243
00:06:55,680 --> 00:06:59,680
engineers most of them are musicians

244
00:06:57,280 --> 00:07:01,119
who have just ended up programming from

245
00:06:59,680 --> 00:07:02,639
for a necessity

246
00:07:01,120 --> 00:07:04,720
looking at some of their code is you

247
00:07:02,639 --> 00:07:06,080
know interesting let's say

248
00:07:04,720 --> 00:07:07,520
but this guy up here he's built this is

249
00:07:06,080 --> 00:07:09,199
a complete retro drum machine he

250
00:07:07,520 --> 00:07:10,479
completed it and as far as i know before

251
00:07:09,199 --> 00:07:11,039
he started this project took him about

252
00:07:10,479 --> 00:07:12,479
two years

253
00:07:11,039 --> 00:07:14,159
he'd never had any programming

254
00:07:12,479 --> 00:07:15,599
experience at all and he managed to do

255
00:07:14,160 --> 00:07:16,639
it you know he you know stack overflow

256
00:07:15,599 --> 00:07:17,759
helped him a lot and something he's

257
00:07:16,639 --> 00:07:19,120
great talking to him it's amazing

258
00:07:17,759 --> 00:07:21,039
project you know to think

259
00:07:19,120 --> 00:07:22,639
that this guy is just a musician has

260
00:07:21,039 --> 00:07:24,800
spent all of his time mostly playing

261
00:07:22,639 --> 00:07:26,880
analog instruments like guitars and

262
00:07:24,800 --> 00:07:28,720
pianos and then he just decided

263
00:07:26,880 --> 00:07:29,680
he saw a talk on bella i don't know even

264
00:07:28,720 --> 00:07:30,800
though i'm probably a kind of

265
00:07:29,680 --> 00:07:32,400
conservator or something someone talked

266
00:07:30,800 --> 00:07:33,759
about it was inspired to build it

267
00:07:32,400 --> 00:07:36,400
and it's pretty amazing that we've made

268
00:07:33,759 --> 00:07:39,840
that accessible you know

269
00:07:36,400 --> 00:07:41,758
now he first programmed it in pd

270
00:07:39,840 --> 00:07:43,758
then he programmed it in c so you can

271
00:07:41,759 --> 00:07:44,879
imagine the experience he had it was not

272
00:07:43,759 --> 00:07:46,240
a good experience and

273
00:07:44,879 --> 00:07:47,440
he's great you can find his blog so you

274
00:07:46,240 --> 00:07:48,720
can go off my website you can find his

275
00:07:47,440 --> 00:07:49,520
blogs about it and it's really great to

276
00:07:48,720 --> 00:07:51,919
read and

277
00:07:49,520 --> 00:07:53,359
yeah i think he now complains that he

278
00:07:51,919 --> 00:07:53,840
didn't have enough time making music but

279
00:07:53,360 --> 00:07:56,000
you know

280
00:07:53,840 --> 00:07:57,440
anyway all right these are the sort of

281
00:07:56,000 --> 00:07:58,479
things we are making i'm not really

282
00:07:57,440 --> 00:07:59,280
going to talk about this much time i'm

283
00:07:58,479 --> 00:08:00,560
all going to talk about

284
00:07:59,280 --> 00:08:01,520
the kind of language side of things and

285
00:08:00,560 --> 00:08:02,400
everything but these are the sort of

286
00:08:01,520 --> 00:08:04,719
things

287
00:08:02,400 --> 00:08:05,758
so this is a pressure sensor so that

288
00:08:04,720 --> 00:08:06,800
rather than being

289
00:08:05,759 --> 00:08:08,080
compassionate you know we have a lot of

290
00:08:06,800 --> 00:08:09,520
ipads and stuff and things people doing

291
00:08:08,080 --> 00:08:10,080
in capacity but it doesn't have any kind

292
00:08:09,520 --> 00:08:11,599
of haptic

293
00:08:10,080 --> 00:08:14,080
kind of feedback and so that's the kind

294
00:08:11,599 --> 00:08:15,680
of a real issue so we took this pressure

295
00:08:14,080 --> 00:08:16,479
sensor and we've worked out different

296
00:08:15,680 --> 00:08:19,599
ways

297
00:08:16,479 --> 00:08:21,039
of um generating

298
00:08:19,599 --> 00:08:22,878
musical instruments or interfaces in

299
00:08:21,039 --> 00:08:24,080
particular you know i'm not there very

300
00:08:22,879 --> 00:08:26,479
much i'll show you in a second

301
00:08:24,080 --> 00:08:27,758
separation for it and up here for

302
00:08:26,479 --> 00:08:28,878
example these are three these are some

303
00:08:27,759 --> 00:08:31,039
3d printed

304
00:08:28,879 --> 00:08:32,640
designs that i've designed that they're

305
00:08:31,039 --> 00:08:34,240
connectable they can be horizontal or

306
00:08:32,640 --> 00:08:35,039
vertical and they connect together with

307
00:08:34,240 --> 00:08:36,880
just lego

308
00:08:35,039 --> 00:08:38,080
pieces but the key thing about it of

309
00:08:36,880 --> 00:08:39,200
course if i brought a demo i could have

310
00:08:38,080 --> 00:08:41,039
shown you

311
00:08:39,200 --> 00:08:42,719
is that they're all based on magnets so

312
00:08:41,039 --> 00:08:44,080
originally i designed them to be

313
00:08:42,719 --> 00:08:46,000
using a hall sensor so you could just

314
00:08:44,080 --> 00:08:46,560
detect the magnetic field when they move

315
00:08:46,000 --> 00:08:48,000
so

316
00:08:46,560 --> 00:08:49,599
but these actually don't have a whole

317
00:08:48,000 --> 00:08:50,720
sensor that rely on the pressure and so

318
00:08:49,600 --> 00:08:52,640
but the only reason we're using the

319
00:08:50,720 --> 00:08:55,839
magnets is to give the haptic feedback

320
00:08:52,640 --> 00:08:57,519
so the button pops or the slider you get

321
00:08:55,839 --> 00:08:59,120
just a nice little feel of the actually

322
00:08:57,519 --> 00:09:00,160
being resistive you know rather than

323
00:08:59,120 --> 00:09:02,560
just sticking

324
00:09:00,160 --> 00:09:03,360
and this is a little 2d one which just

325
00:09:02,560 --> 00:09:05,040
drags it

326
00:09:03,360 --> 00:09:06,000
centers back in the center if the magnet

327
00:09:05,040 --> 00:09:07,199
was in so obviously this picture is

328
00:09:06,000 --> 00:09:08,560
taken about the magnet in it

329
00:09:07,200 --> 00:09:10,000
but if the magnet was there it would be

330
00:09:08,560 --> 00:09:10,479
centered and then you push it and so you

331
00:09:10,000 --> 00:09:12,080
get

332
00:09:10,480 --> 00:09:13,920
so it's very simple and just literally

333
00:09:12,080 --> 00:09:16,320
underneath that just felt

334
00:09:13,920 --> 00:09:17,279
and things so the bit that this talk is

335
00:09:16,320 --> 00:09:18,959
more about

336
00:09:17,279 --> 00:09:21,279
is how do we describe these interfaces

337
00:09:18,959 --> 00:09:22,560
in software so they can be materialized

338
00:09:21,279 --> 00:09:25,439
in in hardware

339
00:09:22,560 --> 00:09:26,800
and in particular this is a it's made by

340
00:09:25,440 --> 00:09:28,080
a company called sensor

341
00:09:26,800 --> 00:09:30,160
in silicon valley and i think they make

342
00:09:28,080 --> 00:09:31,519
touch pads you know for things like

343
00:09:30,160 --> 00:09:35,120
macbooks and stuff and things

344
00:09:31,519 --> 00:09:37,200
and they have a really nice uh very

345
00:09:35,120 --> 00:09:38,480
you know it's a uart they have a little

346
00:09:37,200 --> 00:09:40,640
a dongle which you can either

347
00:09:38,480 --> 00:09:41,839
plug straight into a usb to get a usb

348
00:09:40,640 --> 00:09:43,920
connection to it

349
00:09:41,839 --> 00:09:45,120
or they have a little dongle which takes

350
00:09:43,920 --> 00:09:46,399
the usb and just turns it into a

351
00:09:45,120 --> 00:09:48,080
straight to a uart so then you can

352
00:09:46,399 --> 00:09:50,160
connect directly to

353
00:09:48,080 --> 00:09:52,399
a sternal piece of hardware like an

354
00:09:50,160 --> 00:09:53,839
embedded stm or anything that supports

355
00:09:52,399 --> 00:09:56,240
you know serial i mean it's

356
00:09:53,839 --> 00:09:57,279
quite trivial so all of the software

357
00:09:56,240 --> 00:09:58,720
that we've written

358
00:09:57,279 --> 00:09:59,839
that connects to this device not the

359
00:09:58,720 --> 00:10:00,399
stuff that necessarily generates the

360
00:09:59,839 --> 00:10:02,959
interface

361
00:10:00,399 --> 00:10:04,079
is all written in rust and so that's

362
00:10:02,959 --> 00:10:05,760
what i mean i'm not going to go into a

363
00:10:04,079 --> 00:10:08,079
lot of depth about that today

364
00:10:05,760 --> 00:10:09,120
but i mean the punchline which i have at

365
00:10:08,079 --> 00:10:11,599
the end

366
00:10:09,120 --> 00:10:13,279
is that for me the killer thing about

367
00:10:11,600 --> 00:10:14,320
using rust for this project

368
00:10:13,279 --> 00:10:15,519
other than i really like the

369
00:10:14,320 --> 00:10:17,360
abstractions which is what i'll talk a

370
00:10:15,519 --> 00:10:19,839
little bit about in a minute

371
00:10:17,360 --> 00:10:21,760
is that i developed all on here for

372
00:10:19,839 --> 00:10:23,040
about a year and a half

373
00:10:21,760 --> 00:10:25,040
nothing else didn't test anything

374
00:10:23,040 --> 00:10:25,519
anywhere else it was all just driving on

375
00:10:25,040 --> 00:10:26,719
here

376
00:10:25,519 --> 00:10:28,640
because you know i don't use anything

377
00:10:26,720 --> 00:10:31,200
else so i used some linux vms

378
00:10:28,640 --> 00:10:32,720
for my students but to be honest i quite

379
00:10:31,200 --> 00:10:34,320
like my mac i don't use xcode just you

380
00:10:32,720 --> 00:10:35,200
know just at the prompt with clang and

381
00:10:34,320 --> 00:10:38,079
stuff

382
00:10:35,200 --> 00:10:39,200
and uh with rust and when i ported it to

383
00:10:38,079 --> 00:10:42,399
the raspberry pi

384
00:10:39,200 --> 00:10:43,600
to windows that's the only two platforms

385
00:10:42,399 --> 00:10:44,399
so far we haven't done it because sound

386
00:10:43,600 --> 00:10:47,920
is not so great

387
00:10:44,399 --> 00:10:50,560
on linux um two days

388
00:10:47,920 --> 00:10:51,040
i think maybe overall with you know it

389
00:10:50,560 --> 00:10:52,800
just it

390
00:10:51,040 --> 00:10:54,319
i really didn't have to do very much you

391
00:10:52,800 --> 00:10:55,120
know there was a few things that didn't

392
00:10:54,320 --> 00:10:57,120
work

393
00:10:55,120 --> 00:10:58,800
you know particularly the audio drivers

394
00:10:57,120 --> 00:11:00,399
you have to build by hand and it's

395
00:10:58,800 --> 00:11:02,880
rusted pointed to it and stuff and

396
00:11:00,399 --> 00:11:04,480
things but it was pretty amazing i was

397
00:11:02,880 --> 00:11:05,760
really impressed

398
00:11:04,480 --> 00:11:07,839
and you know you know the greatest thing

399
00:11:05,760 --> 00:11:11,120
for me about rust is is gargoyle and

400
00:11:07,839 --> 00:11:12,880
the package manager is just amazing

401
00:11:11,120 --> 00:11:14,079
that being said i went to build the demo

402
00:11:12,880 --> 00:11:15,360
yesterday and of course i've installed

403
00:11:14,079 --> 00:11:15,920
the latest version of rust for other

404
00:11:15,360 --> 00:11:17,519
reasons

405
00:11:15,920 --> 00:11:19,519
and nothing builds anymore because of

406
00:11:17,519 --> 00:11:21,360
all the packages are out today and

407
00:11:19,519 --> 00:11:22,720
so that is still a pain but it's a lot

408
00:11:21,360 --> 00:11:24,640
lot better than

409
00:11:22,720 --> 00:11:26,480
using c plus without a package manager

410
00:11:24,640 --> 00:11:28,959
and building everything by hand

411
00:11:26,480 --> 00:11:30,640
and i mean it's crap right it's still

412
00:11:28,959 --> 00:11:32,000
crap and eve i was just working with

413
00:11:30,640 --> 00:11:34,399
someone just the other day looking at

414
00:11:32,000 --> 00:11:35,519
building helping them with a c plus app

415
00:11:34,399 --> 00:11:36,320
that they got we started to use the

416
00:11:35,519 --> 00:11:37,680
microsoft c

417
00:11:36,320 --> 00:11:39,600
plus package manager which i didn't know

418
00:11:37,680 --> 00:11:41,839
about and

419
00:11:39,600 --> 00:11:43,839
it would only install 32-bit binaries on

420
00:11:41,839 --> 00:11:44,720
the 64-bit windows machine so i still

421
00:11:43,839 --> 00:11:46,240
haven't you know

422
00:11:44,720 --> 00:11:47,839
it's still not great whereas the rust

423
00:11:46,240 --> 00:11:49,200
one's amazing so

424
00:11:47,839 --> 00:11:51,760
i'm going to say that and i use haskell

425
00:11:49,200 --> 00:11:52,959
a lot and so i use a phone called stack

426
00:11:51,760 --> 00:11:54,319
i know people use there's another one

427
00:11:52,959 --> 00:11:55,680
called cabal and i'm not going to get

428
00:11:54,320 --> 00:11:57,279
into the political arguments of that

429
00:11:55,680 --> 00:11:59,120
but it's still pretty amazing right and

430
00:11:57,279 --> 00:12:00,320
in the way that it puts everything silos

431
00:11:59,120 --> 00:12:02,000
here it's just great i just want to

432
00:12:00,320 --> 00:12:03,360
whoever i've heard the person's here

433
00:12:02,000 --> 00:12:05,440
develops it but thanks because it's

434
00:12:03,360 --> 00:12:06,959
really great so cool

435
00:12:05,440 --> 00:12:08,160
anyway so we're going to go back in

436
00:12:06,959 --> 00:12:09,279
history just for a little bit just to

437
00:12:08,160 --> 00:12:10,800
talk because this is more of a talk

438
00:12:09,279 --> 00:12:12,240
about how i benefit and what i find i

439
00:12:10,800 --> 00:12:15,040
like about rust

440
00:12:12,240 --> 00:12:16,399
and why i use it so hopefully you can

441
00:12:15,040 --> 00:12:19,680
guess where i started programming

442
00:12:16,399 --> 00:12:21,200
i'm quite old now but um you know

443
00:12:19,680 --> 00:12:22,719
i haven't had my bbc micro for a long

444
00:12:21,200 --> 00:12:24,639
time but

445
00:12:22,720 --> 00:12:26,880
my brother and i used to fight over it

446
00:12:24,639 --> 00:12:28,560
and he makes films now so he doesn't do

447
00:12:26,880 --> 00:12:31,519
any of this stuff you know

448
00:12:28,560 --> 00:12:31,920
and uh but i did a lot of this i loved

449
00:12:31,519 --> 00:12:33,680
it

450
00:12:31,920 --> 00:12:34,959
just typing in code for magazines you

451
00:12:33,680 --> 00:12:35,920
know i'm sure we can all say you know

452
00:12:34,959 --> 00:12:38,079
history

453
00:12:35,920 --> 00:12:39,680
and obviously at some point typing in

454
00:12:38,079 --> 00:12:41,519
basic was not enough and so you could do

455
00:12:39,680 --> 00:12:43,439
inline assembler inside the basic

456
00:12:41,519 --> 00:12:45,519
interpreter pretty cool

457
00:12:43,440 --> 00:12:46,639
and 6502 it's great you know this is

458
00:12:45,519 --> 00:12:48,399
where i all started

459
00:12:46,639 --> 00:12:50,839
that's why i went to university not

460
00:12:48,399 --> 00:12:53,040
until i was a bit older but it was

461
00:12:50,839 --> 00:12:54,160
and of course actually the first

462
00:12:53,040 --> 00:12:54,880
programming language i use the universe

463
00:12:54,160 --> 00:12:56,719
was lisp

464
00:12:54,880 --> 00:12:58,160
which i still love to this day because

465
00:12:56,720 --> 00:13:01,760
of its lovely

466
00:12:58,160 --> 00:13:03,120
you know um braces but anyway bizarre

467
00:13:01,760 --> 00:13:05,680
but of course we did this i did a lot of

468
00:13:03,120 --> 00:13:06,880
this it was a you know computer science

469
00:13:05,680 --> 00:13:08,560
and maths degree

470
00:13:06,880 --> 00:13:10,720
we had solaris machines we did a lot of

471
00:13:08,560 --> 00:13:12,800
c you know programming in c

472
00:13:10,720 --> 00:13:14,560
and i'm not going to not i still love c

473
00:13:12,800 --> 00:13:15,760
today you know it's an amazing language

474
00:13:14,560 --> 00:13:16,880
it has lots of flaws and we wouldn't

475
00:13:15,760 --> 00:13:19,600
design the same today

476
00:13:16,880 --> 00:13:20,160
and thrust i suppose but i still love it

477
00:13:19,600 --> 00:13:21,920
okay

478
00:13:20,160 --> 00:13:23,120
and then i went and left after i

479
00:13:21,920 --> 00:13:23,839
finished my pizza obviously i did some

480
00:13:23,120 --> 00:13:25,920
scripting

481
00:13:23,839 --> 00:13:28,480
i still mostly do bash i'm not not

482
00:13:25,920 --> 00:13:30,240
really a perfect person but anyway

483
00:13:28,480 --> 00:13:32,399
i did my phd and i did haskell

484
00:13:30,240 --> 00:13:33,600
completely and so this is i just want to

485
00:13:32,399 --> 00:13:34,639
come a little bit about this the reason

486
00:13:33,600 --> 00:13:36,240
i'm putting this up

487
00:13:34,639 --> 00:13:37,920
and i still use haskell today i still

488
00:13:36,240 --> 00:13:39,199
love it and

489
00:13:37,920 --> 00:13:40,560
you know it's i suppose the alternative

490
00:13:39,199 --> 00:13:41,599
to python or whatever i use it for those

491
00:13:40,560 --> 00:13:43,839
sorts of things

492
00:13:41,600 --> 00:13:45,120
but of course i worked in industry for

493
00:13:43,839 --> 00:13:49,519
15

494
00:13:45,120 --> 00:13:51,440
years and um yeah i used this language

495
00:13:49,519 --> 00:13:52,800
and you know for a long time i really

496
00:13:51,440 --> 00:13:54,000
thought it was amazing and i really

497
00:13:52,800 --> 00:13:55,680
liked it

498
00:13:54,000 --> 00:13:56,800
and you know i'm not going to deny that

499
00:13:55,680 --> 00:13:58,079
you know i was a bit naive i don't know

500
00:13:56,800 --> 00:13:59,040
i just you know did some good things

501
00:13:58,079 --> 00:14:00,800
about it

502
00:13:59,040 --> 00:14:02,319
i felt called i could do template

503
00:14:00,800 --> 00:14:04,399
programming and you know

504
00:14:02,320 --> 00:14:05,839
outsmart people it was stupid but you

505
00:14:04,399 --> 00:14:07,839
know i did

506
00:14:05,839 --> 00:14:09,920
but and i also did some of this stuff i

507
00:14:07,839 --> 00:14:10,399
mostly worked in a graphics group in md

508
00:14:09,920 --> 00:14:13,360
for

509
00:14:10,399 --> 00:14:14,560
15 years and i was involved with this

510
00:14:13,360 --> 00:14:17,519
which has its own things

511
00:14:14,560 --> 00:14:19,040
i'm not going to talk about these things

512
00:14:17,519 --> 00:14:20,639
and then of course i discovered npm i

513
00:14:19,040 --> 00:14:21,439
met that discovered npm before i

514
00:14:20,639 --> 00:14:23,680
discovered

515
00:14:21,440 --> 00:14:25,199
and kabul and stack i couldn't find a

516
00:14:23,680 --> 00:14:27,760
stacked logo stuff at the kabul one this

517
00:14:25,199 --> 00:14:30,719
is a haskell package manager

518
00:14:27,760 --> 00:14:32,639
and i hadn't done any rust at this point

519
00:14:30,720 --> 00:14:35,760
but i was back at university

520
00:14:32,639 --> 00:14:36,880
and i was working in this domain and i

521
00:14:35,760 --> 00:14:38,639
was pretty

522
00:14:36,880 --> 00:14:40,079
frustrated to be honest it you know it's

523
00:14:38,639 --> 00:14:42,320
a bit like fitting

524
00:14:40,079 --> 00:14:43,760
a peg into a round hole right it's a bit

525
00:14:42,320 --> 00:14:44,720
apparently this i actually use this one

526
00:14:43,760 --> 00:14:45,439
because apparently this was from a

527
00:14:44,720 --> 00:14:47,760
brexit

528
00:14:45,440 --> 00:14:50,720
website this is how some people perceive

529
00:14:47,760 --> 00:14:52,480
the uk and the european union

530
00:14:50,720 --> 00:14:54,000
think lots of expletives about now and

531
00:14:52,480 --> 00:14:56,399
swear words and what you yeah

532
00:14:54,000 --> 00:14:58,079
anyway but this is a bit like c plus

533
00:14:56,399 --> 00:14:58,639
plus and haskell right there two things

534
00:14:58,079 --> 00:15:00,800
are

535
00:14:58,639 --> 00:15:02,480
counted to each other they don't many of

536
00:15:00,800 --> 00:15:03,359
the abstractions i think in haskell are

537
00:15:02,480 --> 00:15:04,240
really important they're really

538
00:15:03,360 --> 00:15:05,360
interesting

539
00:15:04,240 --> 00:15:07,760
i don't want you know there's lots of

540
00:15:05,360 --> 00:15:11,360
extensions and gdits if you're

541
00:15:07,760 --> 00:15:13,040
uh tda g-a-d-t's which generalized

542
00:15:11,360 --> 00:15:14,240
abstract date which are all great

543
00:15:13,040 --> 00:15:16,000
but they're a bit of an intellectual

544
00:15:14,240 --> 00:15:17,040
exercise in in showing how smart you are

545
00:15:16,000 --> 00:15:17,920
rather than whether they're actually

546
00:15:17,040 --> 00:15:19,279
that useful

547
00:15:17,920 --> 00:15:21,519
and those debates about putting them

548
00:15:19,279 --> 00:15:22,959
into rust and stuff but whatever

549
00:15:21,519 --> 00:15:24,320
at the same time haskell does provide

550
00:15:22,959 --> 00:15:25,599
really nice abstractions and very quick

551
00:15:24,320 --> 00:15:26,880
to work with just like people tell me

552
00:15:25,600 --> 00:15:28,240
about python i'm not going to make any

553
00:15:26,880 --> 00:15:30,480
stances against it i like the static

554
00:15:28,240 --> 00:15:33,199
type system versus dynamic but

555
00:15:30,480 --> 00:15:33,759
so in 2015 i came to my first ever

556
00:15:33,199 --> 00:15:35,120
foster

557
00:15:33,759 --> 00:15:36,880
just back the friend of mine who's still

558
00:15:35,120 --> 00:15:37,440
here today a colleague is brought me

559
00:15:36,880 --> 00:15:39,920
then

560
00:15:37,440 --> 00:15:41,279
with some students and this is where i

561
00:15:39,920 --> 00:15:42,959
heard someone talking about rust i just

562
00:15:41,279 --> 00:15:45,279
overheard it in the mozilla dev room

563
00:15:42,959 --> 00:15:46,319
knew nothing about it and so this has

564
00:15:45,279 --> 00:15:48,240
been my journey

565
00:15:46,320 --> 00:15:49,360
since then and actually i really really

566
00:15:48,240 --> 00:15:52,639
think

567
00:15:49,360 --> 00:15:54,000
that i've been able to kind of fit that

568
00:15:52,639 --> 00:15:55,440
square peg into a round hole

569
00:15:54,000 --> 00:15:57,279
in some sense rust does that really well

570
00:15:55,440 --> 00:16:01,279
and that's what i really wanted to say

571
00:15:57,279 --> 00:16:02,560
thing and it's not the borrower checker

572
00:16:01,279 --> 00:16:03,759
you know i'm to be honest i'm not that

573
00:16:02,560 --> 00:16:05,439
interested in the borrower check i can

574
00:16:03,759 --> 00:16:06,639
see that it's great for security or that

575
00:16:05,440 --> 00:16:08,320
but to be honest we didn't have it i'd

576
00:16:06,639 --> 00:16:09,120
still use rust i don't really care i've

577
00:16:08,320 --> 00:16:10,399
spent

578
00:16:09,120 --> 00:16:12,000
three years actually learning how it all

579
00:16:10,399 --> 00:16:13,839
works and fighting it and reading papers

580
00:16:12,000 --> 00:16:15,360
to understand it so that was a pain

581
00:16:13,839 --> 00:16:17,120
but i don't really care that much about

582
00:16:15,360 --> 00:16:18,639
it to be honest but i admit

583
00:16:17,120 --> 00:16:20,320
that i don't write software for many

584
00:16:18,639 --> 00:16:21,680
other people myself so it probably

585
00:16:20,320 --> 00:16:22,880
doesn't matter that much to me you know

586
00:16:21,680 --> 00:16:25,040
where i can see that it's good great

587
00:16:22,880 --> 00:16:26,880
applications it's really useful

588
00:16:25,040 --> 00:16:28,240
the thing i would say and i wanted to

589
00:16:26,880 --> 00:16:29,839
make clear about that

590
00:16:28,240 --> 00:16:32,720
is that it's the thing that means i

591
00:16:29,839 --> 00:16:34,240
can't teach rust to first years

592
00:16:32,720 --> 00:16:36,160
i don't in my university i think it's

593
00:16:34,240 --> 00:16:39,279
just too much i can't teach

594
00:16:36,160 --> 00:16:40,240
raster first years because of it's a lot

595
00:16:39,279 --> 00:16:41,439
to take in

596
00:16:40,240 --> 00:16:42,959
particularly if you haven't had a lot of

597
00:16:41,440 --> 00:16:44,399
computer science and programming

598
00:16:42,959 --> 00:16:45,279
experience and most of your experiences

599
00:16:44,399 --> 00:16:47,519
in python

600
00:16:45,279 --> 00:16:48,399
or something i personally feel that it's

601
00:16:47,519 --> 00:16:50,079
too much

602
00:16:48,399 --> 00:16:51,120
you know people they find it hard my

603
00:16:50,079 --> 00:16:52,560
students find it hard they don't even

604
00:16:51,120 --> 00:16:54,079
read the error messages you know you're

605
00:16:52,560 --> 00:16:55,680
trying to get them to look in if they

606
00:16:54,079 --> 00:16:57,120
start to read those complicated

607
00:16:55,680 --> 00:16:58,800
you know be like reading the messages

608
00:16:57,120 --> 00:17:00,160
template meta programming they're not

609
00:16:58,800 --> 00:17:01,519
for the faint-hearted and

610
00:17:00,160 --> 00:17:04,000
you know it's not for the faint-hearted

611
00:17:01,519 --> 00:17:05,839
i mean just a comment and

612
00:17:04,000 --> 00:17:08,799
so i don't think i use the borrow

613
00:17:05,839 --> 00:17:10,639
checker to anywhere the kind of

614
00:17:08,799 --> 00:17:12,160
power that you could use it and it's

615
00:17:10,640 --> 00:17:13,760
just because it's not interested the

616
00:17:12,160 --> 00:17:15,600
abstractions i'm interested in are

617
00:17:13,760 --> 00:17:17,039
things like traits

618
00:17:15,599 --> 00:17:18,399
and the you know the parametric

619
00:17:17,039 --> 00:17:19,679
polymorphism that you can do over those

620
00:17:18,400 --> 00:17:22,400
traits and things like that

621
00:17:19,679 --> 00:17:23,839
and build it up the um the kind of

622
00:17:22,400 --> 00:17:25,360
additions of kind of you know

623
00:17:23,839 --> 00:17:27,839
obviously the range loops but moving

624
00:17:25,359 --> 00:17:29,678
those more into having nice

625
00:17:27,839 --> 00:17:31,280
um where you can return things and get

626
00:17:29,679 --> 00:17:32,880
the nice buildups of

627
00:17:31,280 --> 00:17:34,960
functional kind of style expressions and

628
00:17:32,880 --> 00:17:36,480
things so that for me has been the bit

629
00:17:34,960 --> 00:17:38,640
that was missing from c plus plus the

630
00:17:36,480 --> 00:17:40,160
course they're putting it in

631
00:17:38,640 --> 00:17:42,080
well you know it's like this again isn't

632
00:17:40,160 --> 00:17:43,280
it they're putting it into c plus some

633
00:17:42,080 --> 00:17:44,960
somehow

634
00:17:43,280 --> 00:17:46,879
and i find myself writing more c code

635
00:17:44,960 --> 00:17:48,240
than i do c plus plus now because of

636
00:17:46,880 --> 00:17:49,600
of that problem right it's just so

637
00:17:48,240 --> 00:17:51,039
complicated and it doesn't really seem

638
00:17:49,600 --> 00:17:52,480
to fit that well

639
00:17:51,039 --> 00:17:54,000
anyway so that's what i was going to

640
00:17:52,480 --> 00:17:55,840
that's an aside i want to talk about it

641
00:17:54,000 --> 00:17:59,200
so i ended up using rust

642
00:17:55,840 --> 00:18:03,039
so back to the main part of the talk

643
00:17:59,200 --> 00:18:04,640
and so here is a diagram that comes from

644
00:18:03,039 --> 00:18:06,400
this guy called thor magnuson

645
00:18:04,640 --> 00:18:07,919
who's a famous musicologist stroke

646
00:18:06,400 --> 00:18:10,559
computer scientist stroke

647
00:18:07,919 --> 00:18:11,919
musician who's a professor at sussex

648
00:18:10,559 --> 00:18:16,399
university

649
00:18:11,919 --> 00:18:18,400
in the uk and he describes an instrument

650
00:18:16,400 --> 00:18:20,080
uh to look something like this so you've

651
00:18:18,400 --> 00:18:22,000
got this kind of the sound engines

652
00:18:20,080 --> 00:18:23,360
here the sound production things you've

653
00:18:22,000 --> 00:18:24,880
got obviously you've got your synthesis

654
00:18:23,360 --> 00:18:27,199
whatever over here whatever is creating

655
00:18:24,880 --> 00:18:29,440
the sound and then you've got this

656
00:18:27,200 --> 00:18:30,880
gestural control

657
00:18:29,440 --> 00:18:32,320
here which is the interface that i

658
00:18:30,880 --> 00:18:32,960
showed you the bit where you're

659
00:18:32,320 --> 00:18:35,200
performing

660
00:18:32,960 --> 00:18:36,559
uh interaction with the instrument

661
00:18:35,200 --> 00:18:38,320
itself

662
00:18:36,559 --> 00:18:40,000
and obviously there's feedback there's

663
00:18:38,320 --> 00:18:41,760
audio feedback coming from here

664
00:18:40,000 --> 00:18:43,039
and there's hopefully haptic feedback

665
00:18:41,760 --> 00:18:47,360
coming from the interface

666
00:18:43,039 --> 00:18:50,000
itself and um

667
00:18:47,360 --> 00:18:51,840
really i've kind of completely separated

668
00:18:50,000 --> 00:18:53,360
i don't really think they are separate

669
00:18:51,840 --> 00:18:54,879
i'm not trying to argue they're separate

670
00:18:53,360 --> 00:18:56,479
but it's much easier just like

671
00:18:54,880 --> 00:18:58,640
discretizing examples in itself

672
00:18:56,480 --> 00:19:00,000
if we separate those two things out and

673
00:18:58,640 --> 00:19:00,799
a lot of my work has been looking at

674
00:19:00,000 --> 00:19:02,480
that

675
00:19:00,799 --> 00:19:04,720
uh dividing that line and of course the

676
00:19:02,480 --> 00:19:05,919
mapping then becomes a serious problem

677
00:19:04,720 --> 00:19:08,000
and it's not one that's that easily

678
00:19:05,919 --> 00:19:09,440
solved at this point so you'll see i

679
00:19:08,000 --> 00:19:10,559
have a whole and i'll talk about just at

680
00:19:09,440 --> 00:19:13,679
the end the whole

681
00:19:10,559 --> 00:19:15,360
rust based system which is purely

682
00:19:13,679 --> 00:19:17,120
on this side of the world which is just

683
00:19:15,360 --> 00:19:18,399
doing synthesis dsp

684
00:19:17,120 --> 00:19:20,399
it actually integrates this language

685
00:19:18,400 --> 00:19:23,520
called faust which is a

686
00:19:20,400 --> 00:19:24,960
purely functional language for dsp just

687
00:19:23,520 --> 00:19:26,960
it allows you to

688
00:19:24,960 --> 00:19:28,880
write dsp graphs in a functional

689
00:19:26,960 --> 00:19:30,960
expression it's just very mathematical

690
00:19:28,880 --> 00:19:32,720
it's really nice we've got this little

691
00:19:30,960 --> 00:19:34,880
of it generates c plus plus i've

692
00:19:32,720 --> 00:19:37,120
modified it so it generates rust now

693
00:19:34,880 --> 00:19:38,559
and um it's just you know generates a

694
00:19:37,120 --> 00:19:40,239
effectively a trait with some

695
00:19:38,559 --> 00:19:42,000
simple methods for initializing it and

696
00:19:40,240 --> 00:19:44,000
then a function to ask for

697
00:19:42,000 --> 00:19:45,039
n number of samples it's not

698
00:19:44,000 --> 00:19:46,880
particularly difficult

699
00:19:45,039 --> 00:19:48,559
all the smarts is done in the vals

700
00:19:46,880 --> 00:19:49,280
compiler which i don't have anything to

701
00:19:48,559 --> 00:19:50,799
do with

702
00:19:49,280 --> 00:19:52,879
they're all based in france and super

703
00:19:50,799 --> 00:19:54,639
smart mathematicians

704
00:19:52,880 --> 00:19:56,240
working at a conservatory which is kind

705
00:19:54,640 --> 00:19:59,280
of slightly odd but

706
00:19:56,240 --> 00:19:59,919
anyway but and a lot of this here has

707
00:19:59,280 --> 00:20:02,158
been

708
00:19:59,919 --> 00:20:02,960
building physical interfaces but using

709
00:20:02,159 --> 00:20:06,640
rust

710
00:20:02,960 --> 00:20:08,480
to interact with the physical world okay

711
00:20:06,640 --> 00:20:10,480
and i'm not going to talk about it today

712
00:20:08,480 --> 00:20:12,159
but we've also got an embedded platform

713
00:20:10,480 --> 00:20:12,720
which is all hardware which is based on

714
00:20:12,159 --> 00:20:16,320
stm

715
00:20:12,720 --> 00:20:18,720
or arm based microcontrollers mostly m4s

716
00:20:16,320 --> 00:20:20,080
and stuff that we use to do to connect

717
00:20:18,720 --> 00:20:24,400
to the physical world for

718
00:20:20,080 --> 00:20:24,399
actuation and sensing and

719
00:20:25,200 --> 00:20:28,559
i did develop some of that initially

720
00:20:27,200 --> 00:20:30,400
started doing that in rust

721
00:20:28,559 --> 00:20:32,480
i started working on that writing you

722
00:20:30,400 --> 00:20:33,840
know from bear machine writing it up

723
00:20:32,480 --> 00:20:35,120
but i gotta be honest after about a year

724
00:20:33,840 --> 00:20:36,080
i kind of gave up and i've just write

725
00:20:35,120 --> 00:20:38,158
all in c now

726
00:20:36,080 --> 00:20:39,280
just because of the code is really

727
00:20:38,159 --> 00:20:43,360
simple

728
00:20:39,280 --> 00:20:45,360
it's not very complicated and we use st

729
00:20:43,360 --> 00:20:46,719
chips and they provide reasonably good

730
00:20:45,360 --> 00:20:48,320
libraries and so

731
00:20:46,720 --> 00:20:49,440
there was just a lot of work and i know

732
00:20:48,320 --> 00:20:50,399
some brilliant there's some brilliant

733
00:20:49,440 --> 00:20:52,960
work going on

734
00:20:50,400 --> 00:20:54,320
and i guess when that's got to maturity

735
00:20:52,960 --> 00:20:55,520
that'll be great ginger because i can

736
00:20:54,320 --> 00:20:56,879
just start off and i won't have to do

737
00:20:55,520 --> 00:20:59,039
all that work of getting

738
00:20:56,880 --> 00:21:00,400
the registers to map and all that so i

739
00:20:59,039 --> 00:21:01,039
you know i'm going to put my hands up

740
00:21:00,400 --> 00:21:02,400
here

741
00:21:01,039 --> 00:21:04,080
i wish i hadn't had to go back but i

742
00:21:02,400 --> 00:21:05,919
chose just for practicality reasons to

743
00:21:04,080 --> 00:21:07,918
go back to using c

744
00:21:05,919 --> 00:21:09,679
for for speed of use and i think that's

745
00:21:07,919 --> 00:21:11,919
really my message about

746
00:21:09,679 --> 00:21:13,039
my use of rust is that where it's been

747
00:21:11,919 --> 00:21:14,720
amazing

748
00:21:13,039 --> 00:21:16,240
is that you know you've got a credible

749
00:21:14,720 --> 00:21:17,200
ecosystem even though it has not that

750
00:21:16,240 --> 00:21:19,520
old

751
00:21:17,200 --> 00:21:21,039
and it works mostly across most

752
00:21:19,520 --> 00:21:22,559
platforms i've tried

753
00:21:21,039 --> 00:21:24,559
and you know it can be packaged up it's

754
00:21:22,559 --> 00:21:25,760
really great and that is a bit more

755
00:21:24,559 --> 00:21:29,039
tricky on the embedded

756
00:21:25,760 --> 00:21:30,400
world today okay so i probably won't

757
00:21:29,039 --> 00:21:31,760
talk too much about this but if you

758
00:21:30,400 --> 00:21:33,200
imagine that we've got an interface like

759
00:21:31,760 --> 00:21:35,039
this so i've got this whole system where

760
00:21:33,200 --> 00:21:37,760
you describe them in terms of

761
00:21:35,039 --> 00:21:38,960
extended svgs and you can you can draw

762
00:21:37,760 --> 00:21:40,480
them or you can write them in a little

763
00:21:38,960 --> 00:21:41,360
domain specific language which i'll show

764
00:21:40,480 --> 00:21:44,000
you

765
00:21:41,360 --> 00:21:45,360
in a second and you can mark them up to

766
00:21:44,000 --> 00:21:46,960
say whether these are generating what

767
00:21:45,360 --> 00:21:48,559
kind of gesture you can do

768
00:21:46,960 --> 00:21:50,799
whether they're generating something

769
00:21:48,559 --> 00:21:52,080
called midi or osc which is open sound

770
00:21:50,799 --> 00:21:54,799
control just a way of

771
00:21:52,080 --> 00:21:56,559
communicating standard to communications

772
00:21:54,799 --> 00:21:59,200
and you take these svgs

773
00:21:56,559 --> 00:22:00,320
and then you run it through this system

774
00:21:59,200 --> 00:22:02,240
up here

775
00:22:00,320 --> 00:22:03,200
so this is uh it's a domain specific

776
00:22:02,240 --> 00:22:04,400
language it's actually an embedded

777
00:22:03,200 --> 00:22:04,960
domain specific language although you

778
00:22:04,400 --> 00:22:07,120
wouldn't know

779
00:22:04,960 --> 00:22:08,080
because i've embedded it in haskell so

780
00:22:07,120 --> 00:22:09,280
this is the point

781
00:22:08,080 --> 00:22:10,960
where you can see the different things

782
00:22:09,280 --> 00:22:12,879
with rust coming in i think using it

783
00:22:10,960 --> 00:22:14,320
where it makes best

784
00:22:12,880 --> 00:22:15,840
one of the things i've found limiting at

785
00:22:14,320 --> 00:22:17,280
the moment well one of the things that

786
00:22:15,840 --> 00:22:20,320
haskell is incredibly

787
00:22:17,280 --> 00:22:22,799
expressive with that you can embed

788
00:22:20,320 --> 00:22:23,360
a domain specific language in haskell

789
00:22:22,799 --> 00:22:25,120
and you

790
00:22:23,360 --> 00:22:26,799
and kind of rework the syntax you know

791
00:22:25,120 --> 00:22:27,918
it's not racket so you can't completely

792
00:22:26,799 --> 00:22:29,120
rewrite the syntax

793
00:22:27,919 --> 00:22:31,280
but using this thing called template

794
00:22:29,120 --> 00:22:32,559
haskell which brings in template meta

795
00:22:31,280 --> 00:22:33,039
programming but we won't go there but

796
00:22:32,559 --> 00:22:34,480
it's

797
00:22:33,039 --> 00:22:36,240
quite nice of being able to define your

798
00:22:34,480 --> 00:22:39,919
own own

799
00:22:36,240 --> 00:22:41,600
um syntax not completely you have to

800
00:22:39,919 --> 00:22:43,280
borrow some haskell syntax

801
00:22:41,600 --> 00:22:45,039
and rust i've still found that because

802
00:22:43,280 --> 00:22:47,120
of it still looks see-ish

803
00:22:45,039 --> 00:22:48,640
in some ways you just still end up with

804
00:22:47,120 --> 00:22:49,280
a syntax that looks quite programming

805
00:22:48,640 --> 00:22:50,720
languagey

806
00:22:49,280 --> 00:22:52,480
even though you can definitely embed it

807
00:22:50,720 --> 00:22:53,919
so i think that's a trade-off

808
00:22:52,480 --> 00:22:55,840
and that's why that top one up there is

809
00:22:53,919 --> 00:22:58,480
haskell rather than uh

810
00:22:55,840 --> 00:23:00,080
rust and you know it's not performance

811
00:22:58,480 --> 00:23:02,080
is not critical at that top one

812
00:23:00,080 --> 00:23:03,360
it's not doing anything this one down

813
00:23:02,080 --> 00:23:05,918
here

814
00:23:03,360 --> 00:23:07,918
is doing uh path tracing and

815
00:23:05,919 --> 00:23:08,559
rasterization i'll show you the pipeline

816
00:23:07,919 --> 00:23:11,120
in a minute

817
00:23:08,559 --> 00:23:12,720
so performance is is important here and

818
00:23:11,120 --> 00:23:14,080
it wouldn't be so simple in haskell i

819
00:23:12,720 --> 00:23:15,520
mean it's still offline

820
00:23:14,080 --> 00:23:17,520
so we're not doing real-time rendering

821
00:23:15,520 --> 00:23:18,720
or anything like that and so you could

822
00:23:17,520 --> 00:23:20,080
probably get away with writing in high

823
00:23:18,720 --> 00:23:20,480
school but just didn't feel natural to

824
00:23:20,080 --> 00:23:24,240
me

825
00:23:20,480 --> 00:23:25,760
much better fit with um

826
00:23:24,240 --> 00:23:27,440
rust and there's also this amazing

827
00:23:25,760 --> 00:23:29,360
library called lion or leon

828
00:23:27,440 --> 00:23:30,480
yeah lion i think it is which is a 2d

829
00:23:29,360 --> 00:23:32,240
path rendering

830
00:23:30,480 --> 00:23:33,360
library which i've modified slightly but

831
00:23:32,240 --> 00:23:34,880
mostly i've used it out of the box and

832
00:23:33,360 --> 00:23:38,080
it's just a wonderful library

833
00:23:34,880 --> 00:23:40,240
developed by this guy nicholas and um

834
00:23:38,080 --> 00:23:42,080
and again depending where we're going

835
00:23:40,240 --> 00:23:43,600
this is all offline and generating

836
00:23:42,080 --> 00:23:45,039
this this generates things for what's

837
00:23:43,600 --> 00:23:46,320
called the rolly light pad which i'll

838
00:23:45,039 --> 00:23:49,760
show a picture of a minute

839
00:23:46,320 --> 00:23:50,000
which is a little embedded controller

840
00:23:49,760 --> 00:23:52,480
which

841
00:23:50,000 --> 00:23:54,159
has a touch sensitive interface with 15

842
00:23:52,480 --> 00:23:56,000
by 15 leds

843
00:23:54,159 --> 00:23:57,200
and you can upload little c programs

844
00:23:56,000 --> 00:23:59,039
onto it they're not c

845
00:23:57,200 --> 00:24:00,400
but let's see like it's like a little

846
00:23:59,039 --> 00:24:01,120
embedded language that you can upload

847
00:24:00,400 --> 00:24:03,520
onto it

848
00:24:01,120 --> 00:24:04,719
so here we're actually generating code

849
00:24:03,520 --> 00:24:06,879
you know just text files

850
00:24:04,720 --> 00:24:08,559
that are then uploaded onto the thing so

851
00:24:06,880 --> 00:24:09,840
we're not doing any real-time processing

852
00:24:08,559 --> 00:24:12,399
or handling so speed again

853
00:24:09,840 --> 00:24:13,360
is not the critical thing symbolic

854
00:24:12,400 --> 00:24:15,120
processing

855
00:24:13,360 --> 00:24:16,799
of what's outputted here which is i'll

856
00:24:15,120 --> 00:24:17,918
show the json file a second over here

857
00:24:16,799 --> 00:24:19,120
though this is the thing that connects

858
00:24:17,919 --> 00:24:21,279
to the touch sensor

859
00:24:19,120 --> 00:24:23,199
that i was talking about this is real

860
00:24:21,279 --> 00:24:24,400
time so this is basically a driver

861
00:24:23,200 --> 00:24:26,559
you know it's driving he's talking with

862
00:24:24,400 --> 00:24:28,240
a very low level usb driver and this is

863
00:24:26,559 --> 00:24:29,918
doing all the mapping

864
00:24:28,240 --> 00:24:31,760
from the rasterization i'll show you

865
00:24:29,919 --> 00:24:34,960
what i mean by that in a second but

866
00:24:31,760 --> 00:24:37,279
effectively it's rasterization and uh

867
00:24:34,960 --> 00:24:38,559
here so performance is critical because

868
00:24:37,279 --> 00:24:40,240
you know we're actually this is running

869
00:24:38,559 --> 00:24:42,158
live with a musician playing it

870
00:24:40,240 --> 00:24:43,600
all the processing of when you touch

871
00:24:42,159 --> 00:24:45,520
something mapping it

872
00:24:43,600 --> 00:24:46,959
to the semantic meaning of you know are

873
00:24:45,520 --> 00:24:47,679
you in the right place on the sensor

874
00:24:46,960 --> 00:24:49,120
what does it mean

875
00:24:47,679 --> 00:24:51,039
what's the action you want to perform

876
00:24:49,120 --> 00:24:53,520
it's all happening in real time

877
00:24:51,039 --> 00:24:55,279
and effectively hopefully you'll know

878
00:24:53,520 --> 00:24:58,400
that usb

879
00:24:55,279 --> 00:25:00,880
usb uh jitter is pretty awful

880
00:24:58,400 --> 00:25:03,120
on particularly on windows and you know

881
00:25:00,880 --> 00:25:06,480
plus or minus three milliseconds

882
00:25:03,120 --> 00:25:07,840
is good and even on the mac

883
00:25:06,480 --> 00:25:09,600
it's around two milliseconds but it

884
00:25:07,840 --> 00:25:12,080
doesn't jitter which is quite nice

885
00:25:09,600 --> 00:25:13,678
and and then you've got the latency of

886
00:25:12,080 --> 00:25:15,360
evolved as well i've taken that

887
00:25:13,679 --> 00:25:16,720
and generally on the mac actually it's

888
00:25:15,360 --> 00:25:18,879
around recent

889
00:25:16,720 --> 00:25:20,240
upgrades around seven milliseconds on

890
00:25:18,880 --> 00:25:20,720
average without jitter which is pretty

891
00:25:20,240 --> 00:25:22,720
good

892
00:25:20,720 --> 00:25:24,159
they say that you want to be between you

893
00:25:22,720 --> 00:25:25,360
know when you perform an action to

894
00:25:24,159 --> 00:25:26,840
hearing a sound

895
00:25:25,360 --> 00:25:28,559
you kind of want to be within 10

896
00:25:26,840 --> 00:25:30,240
milliseconds but if you think that it's

897
00:25:28,559 --> 00:25:31,279
taking seven milliseconds to guarantee

898
00:25:30,240 --> 00:25:33,120
that you're going to get thing you

899
00:25:31,279 --> 00:25:34,960
haven't got that much space to do

900
00:25:33,120 --> 00:25:36,080
any computation on the other side you

901
00:25:34,960 --> 00:25:37,120
know still doing synthesis i mean

902
00:25:36,080 --> 00:25:37,600
obviously you're creating more than the

903
00:25:37,120 --> 00:25:39,439
same

904
00:25:37,600 --> 00:25:40,799
so this is performance was really

905
00:25:39,440 --> 00:25:42,720
important here

906
00:25:40,799 --> 00:25:43,840
initially i started in c plus and it was

907
00:25:42,720 --> 00:25:46,240
just you know c

908
00:25:43,840 --> 00:25:47,840
plus bus and you know i'm fortunate

909
00:25:46,240 --> 00:25:49,440
enough to be in a research group

910
00:25:47,840 --> 00:25:51,039
and so i get to explore things and play

911
00:25:49,440 --> 00:25:52,480
around with stuff and so and i've been

912
00:25:51,039 --> 00:25:52,960
to boston and so rust is where we are

913
00:25:52,480 --> 00:25:56,559
here and

914
00:25:52,960 --> 00:26:00,480
it's brilliant you know as i say it's

915
00:25:56,559 --> 00:26:01,840
that whole stack has just been great

916
00:26:00,480 --> 00:26:03,440
okay so i won't go into a lot of

917
00:26:01,840 --> 00:26:04,240
languages here but just to give you an

918
00:26:03,440 --> 00:26:05,679
idea

919
00:26:04,240 --> 00:26:07,200
these are the kind of things that people

920
00:26:05,679 --> 00:26:08,480
write in the language if we actually

921
00:26:07,200 --> 00:26:10,400
have a visual editor as well so you can

922
00:26:08,480 --> 00:26:13,039
just use it in the web browser and draw

923
00:26:10,400 --> 00:26:14,400
but um i'm quite interested in what you

924
00:26:13,039 --> 00:26:17,120
can't do in a visual editor it's a

925
00:26:14,400 --> 00:26:17,120
particularly promo graph

926
00:26:18,240 --> 00:26:22,080
programmatic uh you know expression so

927
00:26:20,480 --> 00:26:22,799
for example i've got this little example

928
00:26:22,080 --> 00:26:25,039
where you have

929
00:26:22,799 --> 00:26:26,320
an interface of sliders that is drawn in

930
00:26:25,039 --> 00:26:27,840
the sine wave

931
00:26:26,320 --> 00:26:28,799
and that would be pretty hard to i mean

932
00:26:27,840 --> 00:26:30,158
you could do it in something like

933
00:26:28,799 --> 00:26:31,520
illustrator in our little thing

934
00:26:30,159 --> 00:26:33,120
but you wouldn't be exactly following

935
00:26:31,520 --> 00:26:34,320
the sine wave you'd probably be off and

936
00:26:33,120 --> 00:26:35,760
you know it'll be a pain

937
00:26:34,320 --> 00:26:37,439
maybe you could use a beast blind or

938
00:26:35,760 --> 00:26:38,158
something but and so we have a little

939
00:26:37,440 --> 00:26:39,360
language

940
00:26:38,159 --> 00:26:42,240
that you can write this is like a stop

941
00:26:39,360 --> 00:26:44,080
button and um you know it's got size

942
00:26:42,240 --> 00:26:45,679
it's a square one for this case

943
00:26:44,080 --> 00:26:47,760
and you can have something like a pad

944
00:26:45,679 --> 00:26:49,440
and then you can start talking about

945
00:26:47,760 --> 00:26:50,960
uh the kind of address this so this is

946
00:26:49,440 --> 00:26:53,279
the um

947
00:26:50,960 --> 00:26:54,559
an osc address so this is effectively

948
00:26:53,279 --> 00:26:57,279
the message

949
00:26:54,559 --> 00:26:58,480
i'm doing right for time on it yeah okay

950
00:26:57,279 --> 00:26:59,919
so and i'm not going to go into a lot of

951
00:26:58,480 --> 00:27:01,520
details about this

952
00:26:59,919 --> 00:27:03,200
but you can compose them together and

953
00:27:01,520 --> 00:27:03,679
build up more complex interfaces i mean

954
00:27:03,200 --> 00:27:05,279
it's not

955
00:27:03,679 --> 00:27:06,799
rocket science you know it's the

956
00:27:05,279 --> 00:27:10,480
standard stuff

957
00:27:06,799 --> 00:27:11,918
this does you know use some stuff in

958
00:27:10,480 --> 00:27:12,799
haskell like dependent types and stuff

959
00:27:11,919 --> 00:27:14,799
to make this

960
00:27:12,799 --> 00:27:16,639
all kind of fall out and it uses this

961
00:27:14,799 --> 00:27:17,918
special extended use dependent type we

962
00:27:16,640 --> 00:27:20,000
can overload the syntax

963
00:27:17,919 --> 00:27:22,080
which gives us these special operators

964
00:27:20,000 --> 00:27:23,440
which allow us to have

965
00:27:22,080 --> 00:27:24,639
arguments that aren't ordered you know

966
00:27:23,440 --> 00:27:25,840
you can actually write these arguments

967
00:27:24,640 --> 00:27:27,360
in any way and so

968
00:27:25,840 --> 00:27:28,639
there's a i mean it's more of a if

969
00:27:27,360 --> 00:27:29,520
you're interested in type systems it's

970
00:27:28,640 --> 00:27:31,679
quite fun

971
00:27:29,520 --> 00:27:34,399
but it doesn't really matter to the user

972
00:27:31,679 --> 00:27:36,559
you can build up interfaces

973
00:27:34,399 --> 00:27:37,439
and there's a little domain specific

974
00:27:36,559 --> 00:27:40,000
controllers

975
00:27:37,440 --> 00:27:41,120
what's interesting here is that we have

976
00:27:40,000 --> 00:27:45,039
a representation

977
00:27:41,120 --> 00:27:46,320
these all just map to standard svg types

978
00:27:45,039 --> 00:27:48,080
right you know that's a really nice

979
00:27:46,320 --> 00:27:50,639
thing about svgs is

980
00:27:48,080 --> 00:27:51,678
that of course they're just xml and if

981
00:27:50,640 --> 00:27:52,960
you extend it

982
00:27:51,679 --> 00:27:54,000
illustrator will still display it or

983
00:27:52,960 --> 00:27:55,760
your web browser will sit and it will

984
00:27:54,000 --> 00:27:57,279
just ignore any metadata

985
00:27:55,760 --> 00:27:59,039
that it doesn't care about i mean it's

986
00:27:57,279 --> 00:27:59,520
great you know and obviously nothing to

987
00:27:59,039 --> 00:28:01,120
do with me

988
00:27:59,520 --> 00:28:02,799
people are doing this for years it's

989
00:28:01,120 --> 00:28:04,080
just really handy particularly because

990
00:28:02,799 --> 00:28:05,440
this is kind of a graphical

991
00:28:04,080 --> 00:28:06,799
thing that users can see their

992
00:28:05,440 --> 00:28:08,399
interfaces and things like that so it

993
00:28:06,799 --> 00:28:11,360
works quite well

994
00:28:08,399 --> 00:28:13,039
and obviously we have things like this

995
00:28:11,360 --> 00:28:14,799
it

996
00:28:13,039 --> 00:28:16,080
what i didn't realize when i started off

997
00:28:14,799 --> 00:28:17,200
doing it i should mention that

998
00:28:16,080 --> 00:28:19,120
i mean this is nothing to do with rust

999
00:28:17,200 --> 00:28:21,360
or anything was that initially i just

1000
00:28:19,120 --> 00:28:25,120
used these three standard

1001
00:28:21,360 --> 00:28:27,199
svg types which aren't using um

1002
00:28:25,120 --> 00:28:28,879
paths right they're not doing b-splines

1003
00:28:27,200 --> 00:28:29,360
or anything like that or any kind of

1004
00:28:28,880 --> 00:28:31,679
thing

1005
00:28:29,360 --> 00:28:32,719
but it and it's really easy to map if

1006
00:28:31,679 --> 00:28:33,760
you imagine

1007
00:28:32,720 --> 00:28:36,880
well particularly if you know anything

1008
00:28:33,760 --> 00:28:38,158
about rasterization and uh desolation

1009
00:28:36,880 --> 00:28:39,760
once you take this shape you try

1010
00:28:38,159 --> 00:28:41,200
analyzing i'll show it like a minute you

1011
00:28:39,760 --> 00:28:42,240
can then rasterize it into effectively

1012
00:28:41,200 --> 00:28:43,919
an array

1013
00:28:42,240 --> 00:28:45,279
and you just get a bitmap of where

1014
00:28:43,919 --> 00:28:46,399
people touch right because it gives you

1015
00:28:45,279 --> 00:28:48,399
a kind of mapping

1016
00:28:46,399 --> 00:28:49,678
from a position on the on the screen to

1017
00:28:48,399 --> 00:28:51,279
a point in an array and once you've got

1018
00:28:49,679 --> 00:28:52,880
a point in the array course you've got a

1019
00:28:51,279 --> 00:28:55,360
pointer to a class and you know or

1020
00:28:52,880 --> 00:28:57,200
whatever a data type and then you can

1021
00:28:55,360 --> 00:28:58,399
perform an action and you get

1022
00:28:57,200 --> 00:29:00,399
effectively

1023
00:28:58,399 --> 00:29:02,080
order one look up you know for your

1024
00:29:00,399 --> 00:29:05,199
touch which is really important

1025
00:29:02,080 --> 00:29:06,559
but it turns out that actually because

1026
00:29:05,200 --> 00:29:07,279
we're doing tessellation which i'll show

1027
00:29:06,559 --> 00:29:08,240
you what that means

1028
00:29:07,279 --> 00:29:09,840
people who don't know what that means in

1029
00:29:08,240 --> 00:29:11,520
a minute is that you can take arbitrary

1030
00:29:09,840 --> 00:29:12,720
paths and so people could start to draw

1031
00:29:11,520 --> 00:29:14,000
weird

1032
00:29:12,720 --> 00:29:15,760
you know they're still vector drawings

1033
00:29:14,000 --> 00:29:18,559
so they're not completely weird

1034
00:29:15,760 --> 00:29:19,520
uh shapes for their interfaces that all

1035
00:29:18,559 --> 00:29:20,879
works brilliantly

1036
00:29:19,520 --> 00:29:23,279
of course the difficult part is then to

1037
00:29:20,880 --> 00:29:25,440
recognize gestures because you know

1038
00:29:23,279 --> 00:29:26,880
if you've got some weird curve like this

1039
00:29:25,440 --> 00:29:28,559
how do they want to interact with it

1040
00:29:26,880 --> 00:29:30,000
is it following the path or do they want

1041
00:29:28,559 --> 00:29:31,440
to interact with you know multiple

1042
00:29:30,000 --> 00:29:32,480
fingers things like that and so i still

1043
00:29:31,440 --> 00:29:34,640
haven't solved that

1044
00:29:32,480 --> 00:29:36,240
problem yet i'm working on that and i

1045
00:29:34,640 --> 00:29:38,080
i've kind of got a bit of a mapping but

1046
00:29:36,240 --> 00:29:39,919
it's still something to work out

1047
00:29:38,080 --> 00:29:41,360
so this is the svg that's created you

1048
00:29:39,919 --> 00:29:42,960
know we won't worry about that

1049
00:29:41,360 --> 00:29:45,120
so this is where rust really plays its

1050
00:29:42,960 --> 00:29:47,679
key role in this pipeline

1051
00:29:45,120 --> 00:29:50,158
is that so i don't know how many people

1052
00:29:47,679 --> 00:29:53,200
are familiar with the graphics pipeline

1053
00:29:50,159 --> 00:29:54,480
yeah also quite a few is great so

1054
00:29:53,200 --> 00:29:56,320
hopefully you'll realize that this is

1055
00:29:54,480 --> 00:29:58,240
effectively a graphics pipeline you know

1056
00:29:56,320 --> 00:29:58,639
my background's in graphics and so i do

1057
00:29:58,240 --> 00:30:00,240
this

1058
00:29:58,640 --> 00:30:02,159
so effectively we take these shapes up

1059
00:30:00,240 --> 00:30:04,159
here is what and what you do if you're

1060
00:30:02,159 --> 00:30:04,960
rendering a 3d game or a 2d game

1061
00:30:04,159 --> 00:30:07,840
particularly if you're going to run it

1062
00:30:04,960 --> 00:30:09,279
on a gpu is you take some primitives

1063
00:30:07,840 --> 00:30:10,959
some shapes up there and

1064
00:30:09,279 --> 00:30:12,559
they're normally they'll be effectively

1065
00:30:10,960 --> 00:30:16,480
they'll be described in terms

1066
00:30:12,559 --> 00:30:17,840
of um triangles so this phase

1067
00:30:16,480 --> 00:30:19,840
would have already happened you'd have a

1068
00:30:17,840 --> 00:30:21,199
mesh and you just you just render that

1069
00:30:19,840 --> 00:30:23,279
to the gpu and if you haven't

1070
00:30:21,200 --> 00:30:24,799
you'll do this phase so this phase is

1071
00:30:23,279 --> 00:30:25,919
basically shape tessellation which

1072
00:30:24,799 --> 00:30:28,480
basically takes

1073
00:30:25,919 --> 00:30:29,600
an arbitrary shape i mean it can't be

1074
00:30:28,480 --> 00:30:31,120
completely arbitrary but

1075
00:30:29,600 --> 00:30:32,959
as long as it's described mathematically

1076
00:30:31,120 --> 00:30:35,120
either as a b-spline or as a

1077
00:30:32,960 --> 00:30:36,720
standard geometric shape like that and

1078
00:30:35,120 --> 00:30:39,360
you divide it into triangles

1079
00:30:36,720 --> 00:30:40,799
okay so modern gpus of course support

1080
00:30:39,360 --> 00:30:41,199
this actually in hardware as well so you

1081
00:30:40,799 --> 00:30:43,440
can

1082
00:30:41,200 --> 00:30:44,559
do normally you send it a triangle and

1083
00:30:43,440 --> 00:30:46,480
maybe divide that into

1084
00:30:44,559 --> 00:30:47,760
more triangles so you can increase the

1085
00:30:46,480 --> 00:30:49,279
resolution without

1086
00:30:47,760 --> 00:30:50,720
having to send too many triangles in the

1087
00:30:49,279 --> 00:30:52,159
first place but we're not interested in

1088
00:30:50,720 --> 00:30:53,440
that

1089
00:30:52,159 --> 00:30:56,159
what we really do is we have this shape

1090
00:30:53,440 --> 00:30:58,399
assembly phase we label it with a number

1091
00:30:56,159 --> 00:31:00,399
here because we want to have a unique id

1092
00:30:58,399 --> 00:31:02,479
when it comes into the system itself

1093
00:31:00,399 --> 00:31:03,840
we tessellate it and this is where lion

1094
00:31:02,480 --> 00:31:04,399
comes in so i'll just give you the

1095
00:31:03,840 --> 00:31:07,199
little

1096
00:31:04,399 --> 00:31:08,320
thing here he's done all the work hard

1097
00:31:07,200 --> 00:31:09,360
work for this there's some really smart

1098
00:31:08,320 --> 00:31:11,039
way this is all the stuff they're doing

1099
00:31:09,360 --> 00:31:12,399
for the web gpu stuff and things like

1100
00:31:11,039 --> 00:31:14,399
that and relate to you know

1101
00:31:12,399 --> 00:31:15,760
in the five um i don't know if he works

1102
00:31:14,399 --> 00:31:16,959
for mozilla but quite a few of the

1103
00:31:15,760 --> 00:31:19,120
mozilla team are working on this and

1104
00:31:16,960 --> 00:31:21,120
related things

1105
00:31:19,120 --> 00:31:23,360
um so we tessellate we generate

1106
00:31:21,120 --> 00:31:25,120
basically a set of triangles

1107
00:31:23,360 --> 00:31:26,799
and then you have this phase of

1108
00:31:25,120 --> 00:31:27,600
rasterization so this is the bit in the

1109
00:31:26,799 --> 00:31:28,799
gpu

1110
00:31:27,600 --> 00:31:30,480
where they're actually generating the

1111
00:31:28,799 --> 00:31:31,600
pixels you know they've gone from these

1112
00:31:30,480 --> 00:31:33,760
geometric shapes

1113
00:31:31,600 --> 00:31:34,959
effectively a triangle and they generate

1114
00:31:33,760 --> 00:31:36,960
a bunch of colours

1115
00:31:34,960 --> 00:31:38,960
that sit on the thing the observation

1116
00:31:36,960 --> 00:31:40,720
here is that we don't really care about

1117
00:31:38,960 --> 00:31:42,559
the colours because all we want to do is

1118
00:31:40,720 --> 00:31:44,720
generate a lookup table in front of

1119
00:31:42,559 --> 00:31:48,639
thing so we just we just write out

1120
00:31:44,720 --> 00:31:51,360
our number that we generated in at shape

1121
00:31:48,640 --> 00:31:52,559
um assembly and i'm using shape assembly

1122
00:31:51,360 --> 00:31:53,439
because they call it primitive assembly

1123
00:31:52,559 --> 00:31:54,799
in the

1124
00:31:53,440 --> 00:31:56,159
graphics pipeline so it's just a bit of

1125
00:31:54,799 --> 00:31:57,840
a play on that it's just really

1126
00:31:56,159 --> 00:31:59,600
assigning a unique number

1127
00:31:57,840 --> 00:32:01,279
okay and so you can see that we've just

1128
00:31:59,600 --> 00:32:06,000
generated this lookup table

1129
00:32:01,279 --> 00:32:09,600
and clearly this will be the size of our

1130
00:32:06,000 --> 00:32:11,519
um device that we want to target

1131
00:32:09,600 --> 00:32:13,120
whatever that might be okay so i'll move

1132
00:32:11,519 --> 00:32:14,480
on quickly this is what it might look

1133
00:32:13,120 --> 00:32:16,559
like when it's tessellating

1134
00:32:14,480 --> 00:32:17,679
obviously tessellating squares and

1135
00:32:16,559 --> 00:32:20,399
rectangles

1136
00:32:17,679 --> 00:32:22,159
or rectangles and triangles with trivial

1137
00:32:20,399 --> 00:32:26,000
it only becomes complicated

1138
00:32:22,159 --> 00:32:27,919
when you're doing um uh non

1139
00:32:26,000 --> 00:32:29,760
square shapes or rectangle shapes

1140
00:32:27,919 --> 00:32:31,840
actually circles pretty straightforward

1141
00:32:29,760 --> 00:32:32,960
it only really becomes complicated if

1142
00:32:31,840 --> 00:32:33,918
you have a squiggly thing like that

1143
00:32:32,960 --> 00:32:35,600
because you might have a

1144
00:32:33,919 --> 00:32:37,440
you want to draw a line and it will go

1145
00:32:35,600 --> 00:32:38,719
outside of the thing and so you have to

1146
00:32:37,440 --> 00:32:40,000
start chopping that up and that

1147
00:32:38,720 --> 00:32:41,760
that's where it becomes complicated

1148
00:32:40,000 --> 00:32:44,080
that's where a few bugs have come up

1149
00:32:41,760 --> 00:32:45,440
in line where they miss a point and you

1150
00:32:44,080 --> 00:32:47,279
end up with a fat line rather than a

1151
00:32:45,440 --> 00:32:48,799
thin line things like that but anyway

1152
00:32:47,279 --> 00:32:50,640
that's uh most of that's been resolved

1153
00:32:48,799 --> 00:32:53,200
now and

1154
00:32:50,640 --> 00:32:53,840
um this is literally what happens you

1155
00:32:53,200 --> 00:32:55,760
know

1156
00:32:53,840 --> 00:32:57,360
with your thing and if we are

1157
00:32:55,760 --> 00:32:58,559
rasterizing it

1158
00:32:57,360 --> 00:33:00,399
this is what you look like you know

1159
00:32:58,559 --> 00:33:01,519
you've gone when you think about the

1160
00:33:00,399 --> 00:33:03,039
size of the stencil so

1161
00:33:01,519 --> 00:33:05,120
this is you know looks like an 8-bit

1162
00:33:03,039 --> 00:33:05,519
retro image you know but it's it's like

1163
00:33:05,120 --> 00:33:09,518
that

1164
00:33:05,519 --> 00:33:10,640
okay all right so then finally we get to

1165
00:33:09,519 --> 00:33:12,480
the end bit

1166
00:33:10,640 --> 00:33:13,760
we're just really i don't know why it's

1167
00:33:12,480 --> 00:33:15,440
done that

1168
00:33:13,760 --> 00:33:17,200
that would have been a nice bit of jason

1169
00:33:15,440 --> 00:33:20,880
which would have shown you

1170
00:33:17,200 --> 00:33:22,399
the wow

1171
00:33:20,880 --> 00:33:24,080
i have to fix that but up here you can

1172
00:33:22,399 --> 00:33:25,760
see there's the buffer up here

1173
00:33:24,080 --> 00:33:27,120
so this is the buffer which is the is

1174
00:33:25,760 --> 00:33:29,519
the one to one mapping

1175
00:33:27,120 --> 00:33:30,879
with the is the array basically the maps

1176
00:33:29,519 --> 00:33:31,519
has been rasterized for all possible

1177
00:33:30,880 --> 00:33:34,880
shapes

1178
00:33:31,519 --> 00:33:38,640
and so all you'll see is a

1179
00:33:34,880 --> 00:33:41,919
a 250 by 180 array

1180
00:33:38,640 --> 00:33:43,919
of um shape id numbers so you know

1181
00:33:41,919 --> 00:33:45,360
if it was a circle it would have five in

1182
00:33:43,919 --> 00:33:46,080
it if it was going round and things like

1183
00:33:45,360 --> 00:33:48,559
that

1184
00:33:46,080 --> 00:33:49,279
so there is one drawback with this whole

1185
00:33:48,559 --> 00:33:52,960
system

1186
00:33:49,279 --> 00:33:54,799
and which i will mention and is that

1187
00:33:52,960 --> 00:33:57,120
hopefully you can see here i'm not going

1188
00:33:54,799 --> 00:33:58,799
to evaluate all these points

1189
00:33:57,120 --> 00:34:00,158
okay because this is nicely aliased here

1190
00:33:58,799 --> 00:34:01,440
and so you kind of get this when you

1191
00:34:00,159 --> 00:34:03,360
look at it from far away

1192
00:34:01,440 --> 00:34:04,960
it will look like it's nice and round i

1193
00:34:03,360 --> 00:34:06,719
have to make a decide whether this is

1194
00:34:04,960 --> 00:34:08,320
the in point and this is the out

1195
00:34:06,720 --> 00:34:10,320
and so it's potential if you're doing

1196
00:34:08,320 --> 00:34:12,560
very fine

1197
00:34:10,320 --> 00:34:14,480
grained interfaces you might get

1198
00:34:12,560 --> 00:34:16,078
behaviors that you're not expecting

1199
00:34:14,480 --> 00:34:17,520
so and i don't really have a good

1200
00:34:16,079 --> 00:34:18,720
solution for that moment anyway i'll

1201
00:34:17,520 --> 00:34:19,759
move on quickly because i haven't got

1202
00:34:18,719 --> 00:34:21,040
that long this is what these two

1203
00:34:19,760 --> 00:34:22,399
interfaces look like

1204
00:34:21,040 --> 00:34:25,839
this is the really light pad this little

1205
00:34:22,399 --> 00:34:27,839
company from london who make these uh

1206
00:34:25,839 --> 00:34:28,960
overpriced box so finally i'm just going

1207
00:34:27,839 --> 00:34:30,320
to finish

1208
00:34:28,960 --> 00:34:32,839
how long i've got left about five

1209
00:34:30,320 --> 00:34:35,359
minutes yeah cool

1210
00:34:32,839 --> 00:34:36,239
um so this is a little application i've

1211
00:34:35,359 --> 00:34:37,440
developed

1212
00:34:36,239 --> 00:34:41,598
it's completely written in rust it's

1213
00:34:37,440 --> 00:34:43,679
about 25 000 lines of rust it's 100 rust

1214
00:34:41,599 --> 00:34:45,280
and um it doesn't build anymore because

1215
00:34:43,679 --> 00:34:48,000
i upgraded the compiler but

1216
00:34:45,280 --> 00:34:50,240
anyway but it's actually but it's really

1217
00:34:48,000 --> 00:34:52,000
nice so it uses that line so it's all 2d

1218
00:34:50,239 --> 00:34:54,239
based uh rendering path rendering

1219
00:34:52,000 --> 00:34:55,040
to generate all the graphics step

1220
00:34:54,239 --> 00:34:56,959
sequences

1221
00:34:55,040 --> 00:34:59,279
it uses the simple threading library you

1222
00:34:56,960 --> 00:35:01,839
know and the cues and everything

1223
00:34:59,280 --> 00:35:03,280
and but and it runs really really well

1224
00:35:01,839 --> 00:35:03,599
the performance has been amazing on my

1225
00:35:03,280 --> 00:35:05,200
mac

1226
00:35:03,599 --> 00:35:06,640
and something really great because you

1227
00:35:05,200 --> 00:35:07,839
know it was a question when we started

1228
00:35:06,640 --> 00:35:09,520
this project whether rust

1229
00:35:07,839 --> 00:35:10,960
was quite ready for doing real-time

1230
00:35:09,520 --> 00:35:12,880
audio and i know a few people from

1231
00:35:10,960 --> 00:35:14,960
aberton have been exploring it their big

1232
00:35:12,880 --> 00:35:16,640
audio company but it's just been great

1233
00:35:14,960 --> 00:35:17,920
and it's been a real pleasure to write

1234
00:35:16,640 --> 00:35:20,319
it and

1235
00:35:17,920 --> 00:35:20,960
and everything and what's been really

1236
00:35:20,320 --> 00:35:23,119
nice

1237
00:35:20,960 --> 00:35:25,359
and i'll just finish up on this there's

1238
00:35:23,119 --> 00:35:27,760
this group as i said

1239
00:35:25,359 --> 00:35:28,799
in france from paris and france who have

1240
00:35:27,760 --> 00:35:31,599
developed this

1241
00:35:28,800 --> 00:35:32,640
functional programming for dsp

1242
00:35:31,599 --> 00:35:34,960
programming language

1243
00:35:32,640 --> 00:35:36,400
for sound synthesis and audio processing

1244
00:35:34,960 --> 00:35:37,839
and it's a really nice

1245
00:35:36,400 --> 00:35:39,440
it's very mathematical so if you're

1246
00:35:37,839 --> 00:35:40,640
interested if you're good at dsp and

1247
00:35:39,440 --> 00:35:42,240
understand it it's brilliant place to

1248
00:35:40,640 --> 00:35:43,359
start because you're almost writing the

1249
00:35:42,240 --> 00:35:44,799
dsp equations

1250
00:35:43,359 --> 00:35:46,960
and stuff and things you know it has

1251
00:35:44,800 --> 00:35:50,000
delay lines and all that sort of stuff

1252
00:35:46,960 --> 00:35:51,920
and as i said that the you write

1253
00:35:50,000 --> 00:35:54,720
something that looks a bit like this

1254
00:35:51,920 --> 00:35:55,920
and so um very simple code if the stupid

1255
00:35:54,720 --> 00:35:57,680
thing wasn't wrong you can see that

1256
00:35:55,920 --> 00:36:01,280
there's a simple little oscillator

1257
00:35:57,680 --> 00:36:02,720
you can set the frequency and

1258
00:36:01,280 --> 00:36:04,480
the only thing that i don't like about

1259
00:36:02,720 --> 00:36:05,520
it is that they've

1260
00:36:04,480 --> 00:36:07,119
kind of assumed that you have this

1261
00:36:05,520 --> 00:36:08,640
little kind of web-based interface or

1262
00:36:07,119 --> 00:36:09,839
little guise that they generate for

1263
00:36:08,640 --> 00:36:11,520
interacting with it

1264
00:36:09,839 --> 00:36:13,119
and so that's okay and there's ways of

1265
00:36:11,520 --> 00:36:14,079
linking that with c plus software or

1266
00:36:13,119 --> 00:36:15,359
whatever

1267
00:36:14,079 --> 00:36:16,320
which if i went to the next slide and it

1268
00:36:15,359 --> 00:36:18,480
was working well you'll be able to see

1269
00:36:16,320 --> 00:36:19,920
the c plus plus code

1270
00:36:18,480 --> 00:36:22,560
but i don't know why it's done that

1271
00:36:19,920 --> 00:36:25,119
sorry about that but you can see

1272
00:36:22,560 --> 00:36:26,078
that if i can yeah up here so this one

1273
00:36:25,119 --> 00:36:27,760
here

1274
00:36:26,079 --> 00:36:29,359
it generates these codes and that comes

1275
00:36:27,760 --> 00:36:30,480
from the fact

1276
00:36:29,359 --> 00:36:32,799
of course i just want to go back one

1277
00:36:30,480 --> 00:36:33,839
slide that they have this hate slider up

1278
00:36:32,800 --> 00:36:36,240
here which describes

1279
00:36:33,839 --> 00:36:37,599
a kind of an interaction with the

1280
00:36:36,240 --> 00:36:38,640
outside world you know it's a side

1281
00:36:37,599 --> 00:36:40,800
effect effectively

1282
00:36:38,640 --> 00:36:42,160
but it's all functional and so they need

1283
00:36:40,800 --> 00:36:44,720
a way of connecting that

1284
00:36:42,160 --> 00:36:46,078
and to do that they introduce these

1285
00:36:44,720 --> 00:36:47,598
variables when they generate the cpu

1286
00:36:46,079 --> 00:36:49,599
plus code or and when i generate the

1287
00:36:47,599 --> 00:36:51,839
rust code it generates something as well

1288
00:36:49,599 --> 00:36:52,640
and then they have a way you have they

1289
00:36:51,839 --> 00:36:54,799
have like this

1290
00:36:52,640 --> 00:36:56,078
ui that you pass in which is the thing

1291
00:36:54,800 --> 00:36:57,680
that's controlling it

1292
00:36:56,079 --> 00:36:59,680
which actually has been a real pain for

1293
00:36:57,680 --> 00:37:00,560
us because when you build up an audio

1294
00:36:59,680 --> 00:37:02,078
application

1295
00:37:00,560 --> 00:37:03,119
that's not really how you want to pass

1296
00:37:02,079 --> 00:37:04,400
around your day you really want to

1297
00:37:03,119 --> 00:37:06,320
separate it

1298
00:37:04,400 --> 00:37:07,680
as you know the ui wants to run in a

1299
00:37:06,320 --> 00:37:10,160
completely separate thread

1300
00:37:07,680 --> 00:37:10,799
that isn't real-time dependent whereas

1301
00:37:10,160 --> 00:37:12,879
the um

1302
00:37:10,800 --> 00:37:14,320
audio thread has got to be you know

1303
00:37:12,880 --> 00:37:16,640
real-time doesn't want to be

1304
00:37:14,320 --> 00:37:17,520
and so it can miss control signals

1305
00:37:16,640 --> 00:37:19,440
because it might not

1306
00:37:17,520 --> 00:37:20,800
look at the queue because of time things

1307
00:37:19,440 --> 00:37:22,000
and everything whereas this is kind of

1308
00:37:20,800 --> 00:37:26,480
all got it fixed in

1309
00:37:22,000 --> 00:37:30,079
so what i ended up having to do was

1310
00:37:26,480 --> 00:37:33,280
um sorry about that it's really annoying

1311
00:37:30,079 --> 00:37:34,960
but basically if i slide over to here

1312
00:37:33,280 --> 00:37:37,760
you'll see that there's these functions

1313
00:37:34,960 --> 00:37:41,200
here so when i generate

1314
00:37:37,760 --> 00:37:42,560
the um the rust code you basically

1315
00:37:41,200 --> 00:37:44,640
describe a json file

1316
00:37:42,560 --> 00:37:46,240
which describes the uh the site the

1317
00:37:44,640 --> 00:37:47,920
variables that you want to change

1318
00:37:46,240 --> 00:37:49,359
and then it generates the rust code

1319
00:37:47,920 --> 00:37:50,800
looking at that and will generate

1320
00:37:49,359 --> 00:37:51,839
just a bunch of setters and getters i

1321
00:37:50,800 --> 00:37:52,480
mean fairly straightforward there's

1322
00:37:51,839 --> 00:37:54,960
nothing

1323
00:37:52,480 --> 00:37:56,480
smart about it it's really very simple

1324
00:37:54,960 --> 00:37:58,880
code it just has a simple

1325
00:37:56,480 --> 00:38:00,079
uh strut plus a simple implementation

1326
00:37:58,880 --> 00:38:03,280
the implementation is

1327
00:38:00,079 --> 00:38:04,480
initialize the audio process that you

1328
00:38:03,280 --> 00:38:07,520
know the the

1329
00:38:04,480 --> 00:38:08,480
um synthesizer or whatever variables

1330
00:38:07,520 --> 00:38:10,160
need to be initialized

1331
00:38:08,480 --> 00:38:12,720
and then it has a compute function that

1332
00:38:10,160 --> 00:38:14,160
you call for how many frames you want so

1333
00:38:12,720 --> 00:38:14,560
maybe you've got a 64 frames that you

1334
00:38:14,160 --> 00:38:16,399
need

1335
00:38:14,560 --> 00:38:17,839
and you just call it and it did a simple

1336
00:38:16,400 --> 00:38:18,800
loop the really nice thing about the

1337
00:38:17,839 --> 00:38:20,400
false compiler

1338
00:38:18,800 --> 00:38:22,160
is because it's the way it compiles is

1339
00:38:20,400 --> 00:38:23,520
that there's only a single outer loop

1340
00:38:22,160 --> 00:38:25,200
there's no nested even though you might

1341
00:38:23,520 --> 00:38:26,720
write it with recursion inside it

1342
00:38:25,200 --> 00:38:28,480
it can propagate it all the way to the

1343
00:38:26,720 --> 00:38:30,160
top so you end up with a single loop and

1344
00:38:28,480 --> 00:38:32,560
so it's incredibly performant

1345
00:38:30,160 --> 00:38:34,078
and of course you know llvm can rip

1346
00:38:32,560 --> 00:38:35,839
through it and optimize it really well

1347
00:38:34,079 --> 00:38:36,480
there's no aliasing there's nothing so

1348
00:38:35,839 --> 00:38:39,680
it just

1349
00:38:36,480 --> 00:38:42,160
the code it generates is great and so

1350
00:38:39,680 --> 00:38:43,839
it's a really nice interaction and

1351
00:38:42,160 --> 00:38:46,000
it's benefited that rust was written in

1352
00:38:43,839 --> 00:38:48,480
llvm because i now just generate

1353
00:38:46,000 --> 00:38:50,480
from llvm because the faust goes to llvm

1354
00:38:48,480 --> 00:38:52,800
as well so that's been really great

1355
00:38:50,480 --> 00:38:54,720
and um you know another great thing

1356
00:38:52,800 --> 00:38:56,960
about rust is that it chose to use llvm

1357
00:38:54,720 --> 00:39:00,319
which i love you know gcc is the

1358
00:38:56,960 --> 00:39:01,920
haunt of my life and anyway so that's it

1359
00:39:00,320 --> 00:39:03,280
really just wanted to say

1360
00:39:01,920 --> 00:39:05,040
and i just yeah the i suppose the

1361
00:39:03,280 --> 00:39:07,920
punchline i already gave it to you

1362
00:39:05,040 --> 00:39:08,480
was that it was really brilliant i just

1363
00:39:07,920 --> 00:39:09,599
the package

1364
00:39:08,480 --> 00:39:10,960
that's the thing for me about it

1365
00:39:09,599 --> 00:39:11,920
everything else i love in rust i would

1366
00:39:10,960 --> 00:39:14,720
use it all the time

1367
00:39:11,920 --> 00:39:15,599
but cargo's just it's just been the best

1368
00:39:14,720 --> 00:39:17,200
thing

1369
00:39:15,599 --> 00:39:18,720
you know and npm you know well

1370
00:39:17,200 --> 00:39:20,480
javascript hey

1371
00:39:18,720 --> 00:39:23,919
i still quite like javascript i can't

1372
00:39:20,480 --> 00:39:23,920
deny it anyway that's it

1373
00:39:26,839 --> 00:39:29,839
thanks

1374
00:39:39,200 --> 00:39:43,839
okay yes

1375
00:39:54,839 --> 00:39:57,839
um

1376
00:40:00,480 --> 00:40:04,800
so the question is that in rust there

1377
00:40:02,400 --> 00:40:05,440
are um some other work going on with

1378
00:40:04,800 --> 00:40:08,240
particularly

1379
00:40:05,440 --> 00:40:09,520
in video and audio and image based

1380
00:40:08,240 --> 00:40:11,598
control systems

1381
00:40:09,520 --> 00:40:13,119
is there an overlap with this work i

1382
00:40:11,599 --> 00:40:14,640
guess there probably is i must admit i'm

1383
00:40:13,119 --> 00:40:16,240
not that familiar with them

1384
00:40:14,640 --> 00:40:19,359
and so but i don't see any reason why

1385
00:40:16,240 --> 00:40:22,399
they wouldn't be i i don't

1386
00:40:19,359 --> 00:40:23,920
i th there's some novel work in this but

1387
00:40:22,400 --> 00:40:25,440
the rust part of it probably isn't that

1388
00:40:23,920 --> 00:40:27,040
novel other than

1389
00:40:25,440 --> 00:40:28,640
i think it's a great application for us

1390
00:40:27,040 --> 00:40:29,759
you know we wanted performance but i

1391
00:40:28,640 --> 00:40:31,440
really care about having some of those

1392
00:40:29,760 --> 00:40:32,480
high level extractions and that for me

1393
00:40:31,440 --> 00:40:33,760
is the main

1394
00:40:32,480 --> 00:40:36,960
that's why i would encourage people to

1395
00:40:33,760 --> 00:40:38,240
use rust again i know a lot of

1396
00:40:36,960 --> 00:40:39,520
people and i hear people in my

1397
00:40:38,240 --> 00:40:40,799
university particularly people in the

1398
00:40:39,520 --> 00:40:42,240
security groups talking about russ

1399
00:40:40,800 --> 00:40:43,839
because microsoft's now talking about it

1400
00:40:42,240 --> 00:40:44,160
you know and absolutely that's great

1401
00:40:43,839 --> 00:40:45,839
right

1402
00:40:44,160 --> 00:40:46,960
i completely see that it's just like

1403
00:40:45,839 --> 00:40:48,480
fall asleep when they start talking

1404
00:40:46,960 --> 00:40:49,119
about it so it's just not me but that's

1405
00:40:48,480 --> 00:40:51,359
just a

1406
00:40:49,119 --> 00:40:52,880
personal thing and not a criticism of

1407
00:40:51,359 --> 00:40:54,880
rust at all when the barrage i mean

1408
00:40:52,880 --> 00:40:57,760
it's amazing it's just not my interest

1409
00:40:54,880 --> 00:40:59,520
so but yeah

1410
00:40:57,760 --> 00:41:01,760
so unfortunately that's all the time we

1411
00:40:59,520 --> 00:41:03,599
have okay um

1412
00:41:01,760 --> 00:41:05,599
you'll probably be available in the

1413
00:41:03,599 --> 00:41:06,720
hallway yeah if my cold

1414
00:41:05,599 --> 00:41:08,400
actually feel a bit better now i think

1415
00:41:06,720 --> 00:41:09,040
it's just got a sweat on so it's good

1416
00:41:08,400 --> 00:41:21,599
but yes

1417
00:41:09,040 --> 00:41:21,599
yeah definitely

