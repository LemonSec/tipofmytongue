1
00:00:22,960 --> 00:00:25,599
so

2
00:00:23,279 --> 00:00:26,640
our next speaker comes almost every year

3
00:00:25,599 --> 00:00:28,480
to foster them

4
00:00:26,640 --> 00:00:30,720
all the way from a very far away front

5
00:00:28,480 --> 00:00:33,360
country you will

6
00:00:30,720 --> 00:00:34,800
he not only comes to belgium in foster

7
00:00:33,360 --> 00:00:36,399
time but he also comes during the

8
00:00:34,800 --> 00:00:37,519
postgres conference in belgium which is

9
00:00:36,399 --> 00:00:39,600
in may

10
00:00:37,520 --> 00:00:41,600
because he loves cycling and he loves

11
00:00:39,600 --> 00:00:42,399
beer which is something very difficult

12
00:00:41,600 --> 00:00:44,399
from belgium

13
00:00:42,399 --> 00:00:45,760
that's why he is he comes here he's

14
00:00:44,399 --> 00:00:46,719
going to talk about his expertise and

15
00:00:45,760 --> 00:00:48,000
posters anyway

16
00:00:46,719 --> 00:00:50,879
and if you have very good questions

17
00:00:48,000 --> 00:00:52,239
people is giving up to 10 euros for this

18
00:00:50,879 --> 00:00:54,640
balls but if you're giving a good

19
00:00:52,239 --> 00:00:56,640
question for ilya you can get this

20
00:00:54,640 --> 00:00:58,559
for free now after you ask your question

21
00:00:56,640 --> 00:01:02,480
okay so please welcome

22
00:00:58,559 --> 00:01:02,480
kosmodineski thank you boris

23
00:01:03,359 --> 00:01:07,360
so it's it's very neat from boris not to

24
00:01:05,920 --> 00:01:09,760
give the stress ball

25
00:01:07,360 --> 00:01:12,720
before the talk and it's only after the

26
00:01:09,760 --> 00:01:16,240
question then i have a chance to leave

27
00:01:12,720 --> 00:01:18,158
so hi everyone uh i'm ilya

28
00:01:16,240 --> 00:01:19,679
maybe if you've been paul frost before

29
00:01:18,159 --> 00:01:21,840
you saw me already

30
00:01:19,680 --> 00:01:23,759
i'm working for data grid we're doing

31
00:01:21,840 --> 00:01:27,040
some postgresql services

32
00:01:23,759 --> 00:01:28,000
uh i try to to do postgresql services as

33
00:01:27,040 --> 00:01:30,240
well but

34
00:01:28,000 --> 00:01:33,520
regret to say i do more excellent

35
00:01:30,240 --> 00:01:35,679
nowadays but still

36
00:01:33,520 --> 00:01:37,200
we have some experience in upgrading

37
00:01:35,680 --> 00:01:39,119
postgresql installations

38
00:01:37,200 --> 00:01:41,040
and i will share some information we

39
00:01:39,119 --> 00:01:44,640
have uh to you

40
00:01:41,040 --> 00:01:45,280
so uh just to figure out who already

41
00:01:44,640 --> 00:01:49,280
runs

42
00:01:45,280 --> 00:01:52,560
postgresql 12 oh maybe someone

43
00:01:49,280 --> 00:01:52,560
runs 13.

44
00:01:55,280 --> 00:02:01,280
that's why nobody runs 14 yet so

45
00:01:59,040 --> 00:02:01,280
10

46
00:02:02,719 --> 00:02:12,480
9.6 9.5

47
00:02:07,840 --> 00:02:17,200
9.4 you need to upgrade probably

48
00:02:12,480 --> 00:02:17,200
several days already seven

49
00:02:18,400 --> 00:02:20,640
okay

50
00:02:21,520 --> 00:02:25,040
just to figure out how many people need

51
00:02:23,520 --> 00:02:27,280
actually to upgrade and

52
00:02:25,040 --> 00:02:28,640
on what version specific things i need

53
00:02:27,280 --> 00:02:33,280
to concentrate

54
00:02:28,640 --> 00:02:36,319
anyway so uh why i prepare on this talk

55
00:02:33,280 --> 00:02:37,599
because upgrading your postgresql is not

56
00:02:36,319 --> 00:02:40,640
a rocket science it's

57
00:02:37,599 --> 00:02:44,480
actually quite easy job to do but

58
00:02:40,640 --> 00:02:47,440
all this uh there are some small details

59
00:02:44,480 --> 00:02:48,640
which are actually completely which

60
00:02:47,440 --> 00:02:51,040
could completely ruin

61
00:02:48,640 --> 00:02:52,799
all your process so basically if you

62
00:02:51,040 --> 00:02:54,799
take a look on the documentation of how

63
00:02:52,800 --> 00:02:55,519
to operate postgresql and pj upgrade

64
00:02:54,800 --> 00:02:57,599
it's simple

65
00:02:55,519 --> 00:02:59,519
pretty much straightforward but if you

66
00:02:57,599 --> 00:03:01,200
have really heavy loaded database

67
00:02:59,519 --> 00:03:03,280
and you are not concentrated on some

68
00:03:01,200 --> 00:03:04,399
small details uh you can ruin your

69
00:03:03,280 --> 00:03:06,890
database

70
00:03:04,400 --> 00:03:08,319
and this is actually

71
00:03:06,890 --> 00:03:11,760
[Music]

72
00:03:08,319 --> 00:03:14,079
a key problem for upgrades so um

73
00:03:11,760 --> 00:03:15,359
you can get downtime which you don't

74
00:03:14,080 --> 00:03:17,760
want you can

75
00:03:15,360 --> 00:03:18,560
ruin your database you can ruin your

76
00:03:17,760 --> 00:03:20,399
data

77
00:03:18,560 --> 00:03:22,159
which is not the same thing with ruining

78
00:03:20,400 --> 00:03:23,599
database it's even worser

79
00:03:22,159 --> 00:03:25,760
because if you don't have a backup for

80
00:03:23,599 --> 00:03:29,119
example it could be a big problem

81
00:03:25,760 --> 00:03:32,239
and you need to know your

82
00:03:29,120 --> 00:03:34,000
system not only your database but

83
00:03:32,239 --> 00:03:36,080
uh for example how your application

84
00:03:34,000 --> 00:03:39,360
works uh from which hosted

85
00:03:36,080 --> 00:03:40,000
goals uh which features of database it

86
00:03:39,360 --> 00:03:43,680
uses

87
00:03:40,000 --> 00:03:44,720
and so on so um besides of that long

88
00:03:43,680 --> 00:03:47,360
preparation time

89
00:03:44,720 --> 00:03:48,720
long planning time maybe night shift and

90
00:03:47,360 --> 00:03:51,920
because of this

91
00:03:48,720 --> 00:03:52,480
most dbas do not like upgrades i don't

92
00:03:51,920 --> 00:03:56,000
know

93
00:03:52,480 --> 00:03:56,000
who considered himself as db

94
00:03:58,840 --> 00:04:03,439
okay who likes to upgrade databases

95
00:04:03,519 --> 00:04:09,840
okay me too because you know i'm

96
00:04:07,760 --> 00:04:11,760
that person who normally works with

97
00:04:09,840 --> 00:04:14,879
excel so when i have a chance to

98
00:04:11,760 --> 00:04:18,000
look in postgres i'm really happy uh so

99
00:04:14,879 --> 00:04:18,639
um but most of the debates are actually

100
00:04:18,000 --> 00:04:22,240
scaring

101
00:04:18,639 --> 00:04:25,600
of uh upgrades uh and uh they are

102
00:04:22,240 --> 00:04:28,800
attached to outdated versions uh and

103
00:04:25,600 --> 00:04:29,600
uh this is like sort of cage 22. so you

104
00:04:28,800 --> 00:04:31,840
know

105
00:04:29,600 --> 00:04:33,759
which sort of surgeon is the best

106
00:04:31,840 --> 00:04:36,880
surgeon

107
00:04:33,759 --> 00:04:40,240
that one which makes lots of manual work

108
00:04:36,880 --> 00:04:42,560
lots of operations so basically the

109
00:04:40,240 --> 00:04:44,000
cardio surgeon's supposed to to do his

110
00:04:42,560 --> 00:04:46,160
job like every day

111
00:04:44,000 --> 00:04:47,759
and then he is fit enough to do the

112
00:04:46,160 --> 00:04:50,160
routine operations quite

113
00:04:47,759 --> 00:04:51,280
successfully and that's the problem with

114
00:04:50,160 --> 00:04:54,080
uh upgrades

115
00:04:51,280 --> 00:04:54,638
if you are sticky to an old version uh

116
00:04:54,080 --> 00:04:58,479
maybe

117
00:04:54,639 --> 00:05:01,280
then it would be necessary to upgrade

118
00:04:58,479 --> 00:05:01,840
you do not have required skill because

119
00:05:01,280 --> 00:05:04,479
you don't

120
00:05:01,840 --> 00:05:06,400
do not do upgrades quite frequently and

121
00:05:04,479 --> 00:05:08,639
that could be a problem you will ruin

122
00:05:06,400 --> 00:05:11,280
those things because you do it that

123
00:05:08,639 --> 00:05:14,960
rarely so any upgrade became

124
00:05:11,280 --> 00:05:18,159
a major stress for you and that that's a

125
00:05:14,960 --> 00:05:22,638
bad thing for your database you're

126
00:05:18,160 --> 00:05:25,360
trying to keep safe and up and running

127
00:05:22,639 --> 00:05:26,000
so my suggestion actually uh i can

128
00:05:25,360 --> 00:05:28,400
understand

129
00:05:26,000 --> 00:05:30,080
if your production environment should

130
00:05:28,400 --> 00:05:33,120
work on certain version

131
00:05:30,080 --> 00:05:35,039
uh more than one year it's quite

132
00:05:33,120 --> 00:05:36,320
acceptable maybe you need sort of

133
00:05:35,039 --> 00:05:40,400
security audit

134
00:05:36,320 --> 00:05:40,400
some other requirements which

135
00:05:40,560 --> 00:05:44,320
cannot allow you to upgrade like every

136
00:05:42,720 --> 00:05:45,520
year than we have a new release of

137
00:05:44,320 --> 00:05:48,159
postgres

138
00:05:45,520 --> 00:05:49,680
but even if you do not upgrade your

139
00:05:48,160 --> 00:05:53,840
productive environment

140
00:05:49,680 --> 00:05:56,319
just set up the stage uh put the

141
00:05:53,840 --> 00:05:57,280
same amount of data there and try to

142
00:05:56,319 --> 00:06:00,240
upgrade so

143
00:05:57,280 --> 00:06:01,198
basically if you see devrem uh pushes

144
00:06:00,240 --> 00:06:03,039
the new package

145
00:06:01,199 --> 00:06:05,199
try to upgrade you will get that

146
00:06:03,039 --> 00:06:08,960
practice uh in your fingers and

147
00:06:05,199 --> 00:06:13,280
that really uh will help you

148
00:06:08,960 --> 00:06:15,919
to do real upgrades successfully

149
00:06:13,280 --> 00:06:17,440
uh why we need to upgrade obviously bug

150
00:06:15,919 --> 00:06:20,400
fixes security fixes

151
00:06:17,440 --> 00:06:21,520
things like this so basically uh you can

152
00:06:20,400 --> 00:06:24,799
only be

153
00:06:21,520 --> 00:06:27,680
safe if you are upgraded because

154
00:06:24,800 --> 00:06:29,600
there are lots of issues uh which arise

155
00:06:27,680 --> 00:06:32,639
from time to time and we need to

156
00:06:29,600 --> 00:06:34,639
uh fix them uh recently

157
00:06:32,639 --> 00:06:36,479
i would say over the last five years at

158
00:06:34,639 --> 00:06:40,319
least maybe even

159
00:06:36,479 --> 00:06:42,080
like last 10 years the tempo postgres

160
00:06:40,319 --> 00:06:45,280
takes is

161
00:06:42,080 --> 00:06:47,359
incredibly fast so people

162
00:06:45,280 --> 00:06:49,840
bring in new features that improves

163
00:06:47,360 --> 00:06:53,520
performance quite drastically

164
00:06:49,840 --> 00:06:55,679
so uh and now um actually

165
00:06:53,520 --> 00:06:56,719
many software developers are much more

166
00:06:55,680 --> 00:06:59,039
agile than

167
00:06:56,720 --> 00:07:00,479
they used to be like in a bank 20 years

168
00:06:59,039 --> 00:07:03,680
ago so they

169
00:07:00,479 --> 00:07:07,120
want new features they want new features

170
00:07:03,680 --> 00:07:10,960
of json they want new features of

171
00:07:07,120 --> 00:07:14,160
something and as dba you actually

172
00:07:10,960 --> 00:07:14,799
uh supports to help developers if your

173
00:07:14,160 --> 00:07:17,599
developer

174
00:07:14,800 --> 00:07:19,199
yourself or if you're a devops you

175
00:07:17,599 --> 00:07:22,639
probably already know that

176
00:07:19,199 --> 00:07:26,080
you need to bring new features fast so

177
00:07:22,639 --> 00:07:30,240
in postgresql it's necessary to upgrade

178
00:07:26,080 --> 00:07:32,240
fast and that's part of the deal um

179
00:07:30,240 --> 00:07:33,280
and when you're upgrading on time it

180
00:07:32,240 --> 00:07:35,759
makes it easier

181
00:07:33,280 --> 00:07:36,638
so if you run something seven something

182
00:07:35,759 --> 00:07:39,840
right now

183
00:07:36,639 --> 00:07:44,240
uh i would say like uh

184
00:07:39,840 --> 00:07:46,799
call me so i cannot explain that in one

185
00:07:44,240 --> 00:07:47,599
talk or even a new tutorial because for

186
00:07:46,800 --> 00:07:50,560
such

187
00:07:47,599 --> 00:07:51,680
upgrade which is not on time you will

188
00:07:50,560 --> 00:07:54,879
need

189
00:07:51,680 --> 00:07:57,199
a lot of uh like preparation a lot of

190
00:07:54,879 --> 00:07:58,720
investigation what we supposed to do it

191
00:07:57,199 --> 00:08:01,759
and so on so like

192
00:07:58,720 --> 00:08:04,400
then you upgrade like within this

193
00:08:01,759 --> 00:08:05,440
window then you need to upgrade like in

194
00:08:04,400 --> 00:08:08,080
once

195
00:08:05,440 --> 00:08:09,120
a year uh once in two years once in

196
00:08:08,080 --> 00:08:11,520
three years

197
00:08:09,120 --> 00:08:13,440
it it would be quite okay but upgrading

198
00:08:11,520 --> 00:08:16,318
from very old version it's like

199
00:08:13,440 --> 00:08:17,680
complicated task uh and well yeah i

200
00:08:16,319 --> 00:08:19,759
personally appreciate if you run

201
00:08:17,680 --> 00:08:22,080
seven something or eight something

202
00:08:19,759 --> 00:08:24,960
because well as consultants we are happy

203
00:08:22,080 --> 00:08:25,359
to meet such customers it's our favorite

204
00:08:24,960 --> 00:08:28,719
so

205
00:08:25,360 --> 00:08:29,840
one big cooperation with starting with

206
00:08:28,720 --> 00:08:31,680
letter o

207
00:08:29,840 --> 00:08:33,439
they just double the prices of the

208
00:08:31,680 --> 00:08:36,399
support for old versions

209
00:08:33,440 --> 00:08:38,560
but well as a community member i always

210
00:08:36,399 --> 00:08:41,919
advise you to upgrade

211
00:08:38,559 --> 00:08:44,959
so um in postgresql world we have a

212
00:08:41,919 --> 00:08:47,600
very specific term uh which goes

213
00:08:44,959 --> 00:08:48,560
major upgrades and minor upgrades what

214
00:08:47,600 --> 00:08:51,279
is all about

215
00:08:48,560 --> 00:08:53,439
previously uh we used to have a very

216
00:08:51,279 --> 00:08:57,680
ridiculous version numbering

217
00:08:53,440 --> 00:09:00,800
so it was like 9.4.3

218
00:08:57,680 --> 00:09:04,800
so we basically used to had

219
00:09:00,800 --> 00:09:06,719
two major uh release numbers and one

220
00:09:04,800 --> 00:09:09,199
minor release numbers it was very

221
00:09:06,720 --> 00:09:12,959
confusing and that's why we moved to

222
00:09:09,200 --> 00:09:14,080
modern after 9.6 a system of numeration

223
00:09:12,959 --> 00:09:17,760
like 10

224
00:09:14,080 --> 00:09:21,040
point something uh and one is major

225
00:09:17,760 --> 00:09:24,560
one is minor uh so uh basically

226
00:09:21,040 --> 00:09:28,719
once a year there is a major release

227
00:09:24,560 --> 00:09:32,640
which includes new features and

228
00:09:28,720 --> 00:09:36,240
after that because new features always

229
00:09:32,640 --> 00:09:36,959
bring not only fun wow fun it's still

230
00:09:36,240 --> 00:09:39,519
fun

231
00:09:36,959 --> 00:09:40,160
but also lots of bugs because people

232
00:09:39,519 --> 00:09:44,320
rework

233
00:09:40,160 --> 00:09:49,120
on the back end so we need to fix them

234
00:09:44,320 --> 00:09:51,519
and we have during a year lots of minor

235
00:09:49,120 --> 00:09:52,480
uh releases and we need to perform minor

236
00:09:51,519 --> 00:09:55,200
upgrades

237
00:09:52,480 --> 00:09:55,760
uh so the definition is in major

238
00:09:55,200 --> 00:09:58,160
upgrades

239
00:09:55,760 --> 00:09:59,600
there are new features in minor there

240
00:09:58,160 --> 00:10:03,199
are no new features it's like

241
00:09:59,600 --> 00:10:06,000
uh fixing old stuff so it's it's really

242
00:10:03,200 --> 00:10:08,079
important to distinguish that uh and

243
00:10:06,000 --> 00:10:10,160
because of that nature of major upgrades

244
00:10:08,079 --> 00:10:11,040
uh the methods of upgrading databases is

245
00:10:10,160 --> 00:10:14,399
different

246
00:10:11,040 --> 00:10:18,000
um and let's there is some sort

247
00:10:14,399 --> 00:10:21,839
rule of thumb uh now we're probably

248
00:10:18,000 --> 00:10:24,959
supposed to upgrade to version 12.

249
00:10:21,839 --> 00:10:29,200
uh why so version 12 was like

250
00:10:24,959 --> 00:10:32,560
in the autumn and it was like 12.0

251
00:10:29,200 --> 00:10:35,680
and uh i generally do not recommend uh

252
00:10:32,560 --> 00:10:38,319
to install any sort of uh

253
00:10:35,680 --> 00:10:39,279
postgresql in critic mission critical

254
00:10:38,320 --> 00:10:42,480
production

255
00:10:39,279 --> 00:10:44,560
which has no minor upgrades yet

256
00:10:42,480 --> 00:10:45,519
because those new features bring in lots

257
00:10:44,560 --> 00:10:49,040
of bugs

258
00:10:45,519 --> 00:10:51,839
so generally i would say from version 8

259
00:10:49,040 --> 00:10:52,800
i have some sort of uh not very accurate

260
00:10:51,839 --> 00:10:55,040
statistics

261
00:10:52,800 --> 00:10:56,160
and i would say like it's a half a year

262
00:10:55,040 --> 00:10:59,439
after the release

263
00:10:56,160 --> 00:11:02,399
so basically you can start if you

264
00:10:59,440 --> 00:11:03,519
really uh if you upgrade first some

265
00:11:02,399 --> 00:11:06,160
staging then

266
00:11:03,519 --> 00:11:06,800
non-productive environment uh after that

267
00:11:06,160 --> 00:11:09,360
you can

268
00:11:06,800 --> 00:11:10,160
try to start uh um upgrading your

269
00:11:09,360 --> 00:11:13,399
product in

270
00:11:10,160 --> 00:11:16,959
a productive environment like version

271
00:11:13,399 --> 00:11:18,800
12.2 to 12.3

272
00:11:16,959 --> 00:11:20,319
it's usually like half a year from

273
00:11:18,800 --> 00:11:24,240
initial release

274
00:11:20,320 --> 00:11:26,959
but that's like really

275
00:11:24,240 --> 00:11:28,240
some sort of catch-22 as well because we

276
00:11:26,959 --> 00:11:31,680
need to fix

277
00:11:28,240 --> 00:11:33,839
the bugs and if nobody upgrades

278
00:11:31,680 --> 00:11:34,800
that is difficult but well there are

279
00:11:33,839 --> 00:11:37,279
people who upgrade

280
00:11:34,800 --> 00:11:38,240
just immediately because developers want

281
00:11:37,279 --> 00:11:43,040
new features

282
00:11:38,240 --> 00:11:46,240
so real time still works

283
00:11:43,040 --> 00:11:48,480
before any upgrade that's like

284
00:11:46,240 --> 00:11:50,160
a very important rule read carefully

285
00:11:48,480 --> 00:11:52,720
version-specific release notes

286
00:11:50,160 --> 00:11:53,839
because sometimes there are some

287
00:11:52,720 --> 00:11:56,320
specific

288
00:11:53,839 --> 00:11:58,399
issues with upgrade procedure and

289
00:11:56,320 --> 00:12:00,720
they're always in the release notes

290
00:11:58,399 --> 00:12:01,519
so basically take a look on that very

291
00:12:00,720 --> 00:12:03,600
carefully

292
00:12:01,519 --> 00:12:05,360
uh like if you are a successful

293
00:12:03,600 --> 00:12:07,200
postgresql dba

294
00:12:05,360 --> 00:12:08,399
you will learn to learn even release

295
00:12:07,200 --> 00:12:10,079
notes in your

296
00:12:08,399 --> 00:12:11,440
smartphone then you update in your

297
00:12:10,079 --> 00:12:15,270
application so it's like

298
00:12:11,440 --> 00:12:16,560
uh automatic sanity check

299
00:12:15,270 --> 00:12:20,160
[Music]

300
00:12:16,560 --> 00:12:22,000
play with uh upgrade method you like

301
00:12:20,160 --> 00:12:23,279
like several times before you perform

302
00:12:22,000 --> 00:12:25,680
actual upgrade

303
00:12:23,279 --> 00:12:28,079
because something can go wrong and there

304
00:12:25,680 --> 00:12:31,199
could be lots of problems

305
00:12:28,079 --> 00:12:31,760
uh talk to your development team if they

306
00:12:31,200 --> 00:12:34,399
want

307
00:12:31,760 --> 00:12:35,760
this major version upgrade if they have

308
00:12:34,399 --> 00:12:39,120
some different

309
00:12:35,760 --> 00:12:41,279
issues if they use uh something

310
00:12:39,120 --> 00:12:42,639
outdated things which are mentioned in

311
00:12:41,279 --> 00:12:45,600
release notes so basically

312
00:12:42,639 --> 00:12:46,480
a good idea is actually to sit with your

313
00:12:45,600 --> 00:12:48,079
i don't know

314
00:12:46,480 --> 00:12:49,920
architect who is responsible for

315
00:12:48,079 --> 00:12:51,839
application level and

316
00:12:49,920 --> 00:12:53,519
read the release notes carefully

317
00:12:51,839 --> 00:12:57,120
together just to

318
00:12:53,519 --> 00:13:00,240
to to align of course nobody do this but

319
00:12:57,120 --> 00:13:02,639
it's a good idea to do this anyway

320
00:13:00,240 --> 00:13:04,240
and of course make a backup and check it

321
00:13:02,639 --> 00:13:07,519
by test recovery

322
00:13:04,240 --> 00:13:10,320
and it's it's involved uh

323
00:13:07,519 --> 00:13:10,720
and test recovery is most important part

324
00:13:10,320 --> 00:13:13,519
of

325
00:13:10,720 --> 00:13:14,320
this bullet because the only guarantee

326
00:13:13,519 --> 00:13:17,440
that you have

327
00:13:14,320 --> 00:13:20,480
a proper backup is that you checked

328
00:13:17,440 --> 00:13:23,040
recovery that it is recovers cross

329
00:13:20,480 --> 00:13:23,760
check check some things like this they

330
00:13:23,040 --> 00:13:27,120
do not have

331
00:13:23,760 --> 00:13:29,040
any guarantee so basically test that

332
00:13:27,120 --> 00:13:31,839
you do not lose your data because

333
00:13:29,040 --> 00:13:34,399
upgrade could be a risky process

334
00:13:31,839 --> 00:13:36,399
mine upgrades are theoretically easy you

335
00:13:34,399 --> 00:13:38,720
simply install new binaries

336
00:13:36,399 --> 00:13:40,720
start new database on the new data

337
00:13:38,720 --> 00:13:42,800
directory

338
00:13:40,720 --> 00:13:44,560
so there are no new features the binary

339
00:13:42,800 --> 00:13:48,719
format is the same

340
00:13:44,560 --> 00:13:51,760
completely easy uh

341
00:13:48,720 --> 00:13:54,320
there are some issues first issue is

342
00:13:51,760 --> 00:13:55,279
uh when your data is supposed to be

343
00:13:54,320 --> 00:13:58,800
online

344
00:13:55,279 --> 00:14:00,000
uh you probably want to pause pg balance

345
00:13:58,800 --> 00:14:02,959
or things like this

346
00:14:00,000 --> 00:14:04,000
uh and then you're stopping your

347
00:14:02,959 --> 00:14:07,040
database

348
00:14:04,000 --> 00:14:09,920
it could stop like long time

349
00:14:07,040 --> 00:14:11,519
because you have lots of dirty pages and

350
00:14:09,920 --> 00:14:14,479
they need to be checkpointed

351
00:14:11,519 --> 00:14:14,959
uh to the disk uh and if you do not play

352
00:14:14,480 --> 00:14:17,199
enough

353
00:14:14,959 --> 00:14:19,359
with this upgrade method you will run

354
00:14:17,199 --> 00:14:21,120
into problems because for example you're

355
00:14:19,360 --> 00:14:23,040
trying to stop you have some

356
00:14:21,120 --> 00:14:25,040
technological window like

357
00:14:23,040 --> 00:14:26,240
several seconds to restart your database

358
00:14:25,040 --> 00:14:29,439
it takes longer

359
00:14:26,240 --> 00:14:31,760
you became nervous somebody calls you

360
00:14:29,440 --> 00:14:32,560
and says our databases offline things

361
00:14:31,760 --> 00:14:35,360
like this

362
00:14:32,560 --> 00:14:35,839
then you try to stop database with minus

363
00:14:35,360 --> 00:14:38,160
m

364
00:14:35,839 --> 00:14:39,680
you ruin your database and well it's

365
00:14:38,160 --> 00:14:42,160
it's bad practice so don't do

366
00:14:39,680 --> 00:14:43,040
do like this issue checkpoint like

367
00:14:42,160 --> 00:14:45,839
several times

368
00:14:43,040 --> 00:14:46,800
then start to stop database then it goes

369
00:14:45,839 --> 00:14:49,040
smoothly so

370
00:14:46,800 --> 00:14:50,079
just prepare play with all these

371
00:14:49,040 --> 00:14:52,959
combinations

372
00:14:50,079 --> 00:14:53,680
uh not to ruin actually very easy

373
00:14:52,959 --> 00:14:56,560
procedure

374
00:14:53,680 --> 00:14:57,040
compared to another one and another

375
00:14:56,560 --> 00:14:59,839
thing

376
00:14:57,040 --> 00:15:01,199
keep an eye of uh upgrading all the

377
00:14:59,839 --> 00:15:04,800
related packages

378
00:15:01,199 --> 00:15:06,880
so um yeah of course

379
00:15:04,800 --> 00:15:08,399
and of course do uh pick up a check

380
00:15:06,880 --> 00:15:11,199
recovery uh

381
00:15:08,399 --> 00:15:12,160
as you do it's like a default point

382
00:15:11,199 --> 00:15:14,639
everywhere

383
00:15:12,160 --> 00:15:15,439
so check all the packages which could

384
00:15:14,639 --> 00:15:17,920
contain

385
00:15:15,440 --> 00:15:19,040
something considering postgres because

386
00:15:17,920 --> 00:15:22,479
if you do not upgrade

387
00:15:19,040 --> 00:15:24,399
postgresql uh client that's that's okay

388
00:15:22,480 --> 00:15:26,560
probably you will get that warning

389
00:15:24,399 --> 00:15:27,600
uh your sapphire developers would get

390
00:15:26,560 --> 00:15:30,560
that warning you

391
00:15:27,600 --> 00:15:31,839
upgrade them later but if you use some

392
00:15:30,560 --> 00:15:35,199
sort of contribs

393
00:15:31,839 --> 00:15:38,480
if you use some debug symbols

394
00:15:35,199 --> 00:15:40,639
things like this you should be aware

395
00:15:38,480 --> 00:15:43,839
that you upgraded everything and

396
00:15:40,639 --> 00:15:47,040
especially things like pg bouncer

397
00:15:43,839 --> 00:15:49,519
things like application level libraries

398
00:15:47,040 --> 00:15:50,639
drivers and so on so basically the good

399
00:15:49,519 --> 00:15:53,839
practice is to have

400
00:15:50,639 --> 00:15:56,320
everything of the same version because

401
00:15:53,839 --> 00:15:58,240
it could be issues

402
00:15:56,320 --> 00:15:59,920
major upgrade methods are much more

403
00:15:58,240 --> 00:16:02,959
complicated because

404
00:15:59,920 --> 00:16:05,839
internal structures could be quite

405
00:16:02,959 --> 00:16:06,880
different so for that purpose we have

406
00:16:05,839 --> 00:16:09,519
several methods

407
00:16:06,880 --> 00:16:11,600
and we can choose which method is less

408
00:16:09,519 --> 00:16:14,720
dangerous

409
00:16:11,600 --> 00:16:16,959
good old dump restore pg upgrade

410
00:16:14,720 --> 00:16:18,320
and some replication based methods

411
00:16:16,959 --> 00:16:23,040
that's the set we

412
00:16:18,320 --> 00:16:26,079
we have and we can try to do this

413
00:16:23,040 --> 00:16:27,599
pg dump is a good way to upgrade your

414
00:16:26,079 --> 00:16:31,040
postgresql

415
00:16:27,600 --> 00:16:34,000
instance if you can afford this

416
00:16:31,040 --> 00:16:36,000
because if you have a large database if

417
00:16:34,000 --> 00:16:37,600
this database is heavy loaded

418
00:16:36,000 --> 00:16:39,360
it could be really tricky to upgrade

419
00:16:37,600 --> 00:16:41,279
with uh pg dump

420
00:16:39,360 --> 00:16:42,880
but if you can afford this if you have

421
00:16:41,279 --> 00:16:46,079
like a couple of hundred

422
00:16:42,880 --> 00:16:47,439
gigabytes of data uh it's not really

423
00:16:46,079 --> 00:16:50,079
heavy loaded

424
00:16:47,440 --> 00:16:51,600
it could be good you are on a safe side

425
00:16:50,079 --> 00:16:54,160
because it's simple method

426
00:16:51,600 --> 00:16:56,480
you can do that quickly and you will be

427
00:16:54,160 --> 00:16:56,480
happy

428
00:16:57,120 --> 00:17:01,600
there's a frequent question actually uh

429
00:16:59,440 --> 00:17:04,559
how i should upgrade

430
00:17:01,600 --> 00:17:06,880
my database if i run postgres inside

431
00:17:04,559 --> 00:17:09,839
docker

432
00:17:06,880 --> 00:17:10,559
well uh most of the things i'm talking

433
00:17:09,839 --> 00:17:12,319
about here

434
00:17:10,559 --> 00:17:13,760
are for just normal server not a

435
00:17:12,319 --> 00:17:16,079
container because

436
00:17:13,760 --> 00:17:17,199
usually if you run database in container

437
00:17:16,079 --> 00:17:19,280
it's like

438
00:17:17,199 --> 00:17:20,559
if it's small database for some micro

439
00:17:19,280 --> 00:17:22,879
servers for

440
00:17:20,559 --> 00:17:24,399
some team which showed up and doing some

441
00:17:22,880 --> 00:17:26,559
research or things like this

442
00:17:24,400 --> 00:17:27,679
it's a small database uh inside the

443
00:17:26,559 --> 00:17:30,559
container

444
00:17:27,679 --> 00:17:32,559
you have the data on outside disk uh

445
00:17:30,559 --> 00:17:36,160
it's not big

446
00:17:32,559 --> 00:17:39,120
enough it's not heavy loaded because uh

447
00:17:36,160 --> 00:17:39,760
usually if it's like this you run into

448
00:17:39,120 --> 00:17:41,760
problems

449
00:17:39,760 --> 00:17:43,200
before you're thinking of upgrade so

450
00:17:41,760 --> 00:17:44,799
it's basically would be much more

451
00:17:43,200 --> 00:17:48,400
earlier

452
00:17:44,799 --> 00:17:52,000
so pg dump is good way to do upgrade

453
00:17:48,400 --> 00:17:55,039
with uh docker uh there is some project

454
00:17:52,000 --> 00:17:58,240
of running pg upgrade inside docker

455
00:17:55,039 --> 00:17:59,679
i think it's called uh pg docker pg

456
00:17:58,240 --> 00:18:01,520
upgrade

457
00:17:59,679 --> 00:18:03,200
it basically runs pg upgrade inside the

458
00:18:01,520 --> 00:18:05,918
container

459
00:18:03,200 --> 00:18:06,799
i tried to play with that uh i do not

460
00:18:05,919 --> 00:18:09,440
claim i

461
00:18:06,799 --> 00:18:10,000
saw that in production but then i played

462
00:18:09,440 --> 00:18:11,840
that

463
00:18:10,000 --> 00:18:13,679
on my computer actually i run into

464
00:18:11,840 --> 00:18:15,918
problems several times so basically it's

465
00:18:13,679 --> 00:18:18,799
i would not advise to do this so try to

466
00:18:15,919 --> 00:18:21,600
keep picture dump

467
00:18:18,799 --> 00:18:22,400
problem is if you have requirements on

468
00:18:21,600 --> 00:18:25,120
downtime

469
00:18:22,400 --> 00:18:26,320
that could be tricky to to do this uh

470
00:18:25,120 --> 00:18:29,760
another problem is

471
00:18:26,320 --> 00:18:33,120
uh this space can be quite expensive

472
00:18:29,760 --> 00:18:36,480
and for pga upgrade using dump restore

473
00:18:33,120 --> 00:18:38,799
most likely you need extra disk space

474
00:18:36,480 --> 00:18:39,919
or you need work with some tricky

475
00:18:38,799 --> 00:18:43,200
procedure

476
00:18:39,919 --> 00:18:45,440
which can ruin your data

477
00:18:43,200 --> 00:18:47,160
good thing it works with any postgresql

478
00:18:45,440 --> 00:18:50,240
version since

479
00:18:47,160 --> 00:18:51,840
9.7 but there could be some issues

480
00:18:50,240 --> 00:18:53,600
but theoretically you can upgrade even

481
00:18:51,840 --> 00:18:55,360
from very old

482
00:18:53,600 --> 00:18:56,879
versions because it has nothing to do

483
00:18:55,360 --> 00:19:00,240
with binary format

484
00:18:56,880 --> 00:19:03,679
it has only uh to do with your schema

485
00:19:00,240 --> 00:19:06,480
with logical structure so it's not like

486
00:19:03,679 --> 00:19:07,760
uh data files so nothing changed there

487
00:19:06,480 --> 00:19:10,880
but for example if you have

488
00:19:07,760 --> 00:19:11,520
really old database on old version and

489
00:19:10,880 --> 00:19:14,960
use

490
00:19:11,520 --> 00:19:18,000
intensively stored procedures something

491
00:19:14,960 --> 00:19:20,080
was changing during that

492
00:19:18,000 --> 00:19:22,480
time and you need actually check

493
00:19:20,080 --> 00:19:23,280
compatibility of your server logic in

494
00:19:22,480 --> 00:19:26,720
this case

495
00:19:23,280 --> 00:19:29,918
and that could be tricky actually

496
00:19:26,720 --> 00:19:32,240
pidgey dump has option of custom format

497
00:19:29,919 --> 00:19:34,480
you can compress this and it's proper

498
00:19:32,240 --> 00:19:38,000
way to to do the pg dump

499
00:19:34,480 --> 00:19:41,600
and it can save you

500
00:19:38,000 --> 00:19:42,160
some some disk space actually pg dump

501
00:19:41,600 --> 00:19:44,799
can

502
00:19:42,160 --> 00:19:46,080
do several jobs so it can do things in

503
00:19:44,799 --> 00:19:49,200
parallel

504
00:19:46,080 --> 00:19:51,120
and in some cases you just

505
00:19:49,200 --> 00:19:52,720
need to experiment with this it could be

506
00:19:51,120 --> 00:19:56,719
good for you because it would be

507
00:19:52,720 --> 00:20:00,799
easier and faster but the problem is

508
00:19:56,720 --> 00:20:04,400
uh if you do tricky things like pg dump

509
00:20:00,799 --> 00:20:06,310
from this port and in pipe you restore

510
00:20:04,400 --> 00:20:07,760
to another port to save

511
00:20:06,310 --> 00:20:10,000
[Music]

512
00:20:07,760 --> 00:20:11,280
some some time to do that faster i do

513
00:20:10,000 --> 00:20:14,240
not recommend to do this

514
00:20:11,280 --> 00:20:14,799
don't do it at home but you can try uh

515
00:20:14,240 --> 00:20:18,000
you can

516
00:20:14,799 --> 00:20:21,360
not do this using multiple jobs

517
00:20:18,000 --> 00:20:24,799
so just figure out

518
00:20:21,360 --> 00:20:26,399
what you need actually and try with jobs

519
00:20:24,799 --> 00:20:29,600
or without

520
00:20:26,400 --> 00:20:30,799
and if your installation can be upgraded

521
00:20:29,600 --> 00:20:34,080
like this

522
00:20:30,799 --> 00:20:34,879
that's good congratulations that's uh

523
00:20:34,080 --> 00:20:38,480
that's not

524
00:20:34,880 --> 00:20:40,320
tricky uh anymore uh and

525
00:20:38,480 --> 00:20:42,240
that was probably you will be happy

526
00:20:40,320 --> 00:20:44,879
about this uh a small

527
00:20:42,240 --> 00:20:46,080
uh natas which actually would be uh

528
00:20:44,880 --> 00:20:49,360
quite useful for us

529
00:20:46,080 --> 00:20:50,720
uh on the future slides as well don't

530
00:20:49,360 --> 00:20:53,600
forget about

531
00:20:50,720 --> 00:20:54,960
uh locales so basically especially if

532
00:20:53,600 --> 00:20:59,199
you are not only using

533
00:20:54,960 --> 00:21:02,960
uh english if you're using french

534
00:20:59,200 --> 00:21:03,760
german russian dutch something which

535
00:21:02,960 --> 00:21:06,880
requires

536
00:21:03,760 --> 00:21:09,440
a specific locale you can be

537
00:21:06,880 --> 00:21:10,320
actually run into problem if uh you

538
00:21:09,440 --> 00:21:12,320
interface

539
00:21:10,320 --> 00:21:14,399
your new database in different locale or

540
00:21:12,320 --> 00:21:17,439
just forget to install ice and

541
00:21:14,400 --> 00:21:18,720
using default or kale uh everything goes

542
00:21:17,440 --> 00:21:21,039
okay normally

543
00:21:18,720 --> 00:21:21,840
so you can dump restore and at some

544
00:21:21,039 --> 00:21:25,200
point you will

545
00:21:21,840 --> 00:21:27,918
figure out that uh swords uh doesn't

546
00:21:25,200 --> 00:21:28,640
do not work properly things like this

547
00:21:27,919 --> 00:21:30,480
you can spend

548
00:21:28,640 --> 00:21:31,679
lots of time on troubleshooting those

549
00:21:30,480 --> 00:21:34,720
things so

550
00:21:31,679 --> 00:21:35,520
um put on your checklist actually that

551
00:21:34,720 --> 00:21:38,640
you need to

552
00:21:35,520 --> 00:21:41,760
double check uh the locale and it's

553
00:21:38,640 --> 00:21:44,240
supposed to be exactly the same uh

554
00:21:41,760 --> 00:21:45,760
major upgrade using pg dumb the

555
00:21:44,240 --> 00:21:48,159
procedure is quite easy

556
00:21:45,760 --> 00:21:49,520
you install new binaries in source new

557
00:21:48,159 --> 00:21:51,919
cluster

558
00:21:49,520 --> 00:21:53,440
don't forget about local change config

559
00:21:51,919 --> 00:21:55,520
files appropriately

560
00:21:53,440 --> 00:21:58,159
that could be a problem just like with

561
00:21:55,520 --> 00:22:02,879
uh failover and switchover

562
00:21:58,159 --> 00:22:06,559
don't forget that you need pg hba.conf

563
00:22:02,880 --> 00:22:09,600
same like on your old database because

564
00:22:06,559 --> 00:22:11,039
after that you will let application work

565
00:22:09,600 --> 00:22:13,120
with the database and

566
00:22:11,039 --> 00:22:14,720
it doesn't work that's the common

567
00:22:13,120 --> 00:22:16,320
problem so

568
00:22:14,720 --> 00:22:18,640
keep an eye on that synchronize those

569
00:22:16,320 --> 00:22:21,678
things

570
00:22:18,640 --> 00:22:23,360
that could be very good idea to use the

571
00:22:21,679 --> 00:22:26,400
newer version pg dump

572
00:22:23,360 --> 00:22:29,918
but if you're upgrading from really old

573
00:22:26,400 --> 00:22:33,200
version could be issues with really old

574
00:22:29,919 --> 00:22:36,559
things uh and uh

575
00:22:33,200 --> 00:22:39,120
again read release notes use the new one

576
00:22:36,559 --> 00:22:40,399
if you're working with something very

577
00:22:39,120 --> 00:22:43,760
old

578
00:22:40,400 --> 00:22:47,520
just test that 10 times then

579
00:22:43,760 --> 00:22:48,080
restore your dump and try to figure out

580
00:22:47,520 --> 00:22:50,480
if

581
00:22:48,080 --> 00:22:52,000
everything is okay test it see if

582
00:22:50,480 --> 00:22:55,120
application works

583
00:22:52,000 --> 00:22:56,799
nothing strange and so on

584
00:22:55,120 --> 00:22:58,559
then switch your application to the new

585
00:22:56,799 --> 00:23:01,280
cluster and

586
00:22:58,559 --> 00:23:02,480
usually because we run into such

587
00:23:01,280 --> 00:23:05,760
problems many

588
00:23:02,480 --> 00:23:09,360
times do not delete your

589
00:23:05,760 --> 00:23:14,000
old cluster immediately even if

590
00:23:09,360 --> 00:23:16,158
there's not quite much disk space

591
00:23:14,000 --> 00:23:17,280
keep it for some time because something

592
00:23:16,159 --> 00:23:20,840
can go wrong and

593
00:23:17,280 --> 00:23:24,000
could be a problem pg upgrade

594
00:23:20,840 --> 00:23:24,559
for major upgrades i would say that's a

595
00:23:24,000 --> 00:23:27,600
major

596
00:23:24,559 --> 00:23:30,799
method we use and it's tricky

597
00:23:27,600 --> 00:23:34,559
but actually it's most useful one

598
00:23:30,799 --> 00:23:34,559
procedure is simple as well

599
00:23:35,360 --> 00:23:39,760
but um to figure out how to do this we

600
00:23:39,360 --> 00:23:42,240
need to

601
00:23:39,760 --> 00:23:43,039
figure out how it works and based on

602
00:23:42,240 --> 00:23:45,520
that

603
00:23:43,039 --> 00:23:47,279
we need to choose uh the way how we

604
00:23:45,520 --> 00:23:48,000
upgrade it would be slightly different

605
00:23:47,279 --> 00:23:51,039
for

606
00:23:48,000 --> 00:23:54,640
just send one server uh for

607
00:23:51,039 --> 00:23:57,520
um primary hot standby configuration

608
00:23:54,640 --> 00:23:59,039
uh and uh for some tricky situations and

609
00:23:57,520 --> 00:24:02,240
you really really

610
00:23:59,039 --> 00:24:05,440
have very small technological window to

611
00:24:02,240 --> 00:24:07,840
perform the upgrade

612
00:24:05,440 --> 00:24:10,320
then you could not allow your downtime

613
00:24:07,840 --> 00:24:13,439
and of course details details

614
00:24:10,320 --> 00:24:15,360
uh so pg upgrade is very smart idea you

615
00:24:13,440 --> 00:24:18,640
have

616
00:24:15,360 --> 00:24:21,120
old and new database cluster and there

617
00:24:18,640 --> 00:24:24,720
is a mechanism which actually

618
00:24:21,120 --> 00:24:28,399
takes the old binary files and

619
00:24:24,720 --> 00:24:31,679
detach them from the old cluster somehow

620
00:24:28,400 --> 00:24:33,279
and then moves all the information

621
00:24:31,679 --> 00:24:36,799
postgres needs for normal work

622
00:24:33,279 --> 00:24:40,320
like uh you know transaction id counter

623
00:24:36,799 --> 00:24:41,440
like pg catalog uh the statistics is

624
00:24:40,320 --> 00:24:44,480
tricky thing

625
00:24:41,440 --> 00:24:47,039
and moves that to the new thing

626
00:24:44,480 --> 00:24:47,760
and then you take the user data and add

627
00:24:47,039 --> 00:24:50,559
that

628
00:24:47,760 --> 00:24:51,520
uh to a new database and it works like

629
00:24:50,559 --> 00:24:55,039
this

630
00:24:51,520 --> 00:24:55,760
so theoretically the basic idea is very

631
00:24:55,039 --> 00:24:58,400
simple

632
00:24:55,760 --> 00:25:00,559
and well bruce monson wrote this tool

633
00:24:58,400 --> 00:25:02,400
like many years ago and since that time

634
00:25:00,559 --> 00:25:05,520
it's it's online it works

635
00:25:02,400 --> 00:25:09,120
but vera tricks so

636
00:25:05,520 --> 00:25:12,158
the idea is first we decouple pgc lock

637
00:25:09,120 --> 00:25:14,959
and from new cluster

638
00:25:12,159 --> 00:25:16,640
a couple old pgc log to a new cluster

639
00:25:14,960 --> 00:25:20,000
and set the proper seed

640
00:25:16,640 --> 00:25:22,240
uh to which allows us actually to to run

641
00:25:20,000 --> 00:25:24,559
database from the same point from the

642
00:25:22,240 --> 00:25:27,760
same transaction

643
00:25:24,559 --> 00:25:28,480
when then we restore the schema all the

644
00:25:27,760 --> 00:25:30,960
things we need

645
00:25:28,480 --> 00:25:31,840
to operate with our database normally

646
00:25:30,960 --> 00:25:35,520
and

647
00:25:31,840 --> 00:25:36,959
then we did that if the data files with

648
00:25:35,520 --> 00:25:38,240
user data would be the same

649
00:25:36,960 --> 00:25:40,080
everything's supposed to be the same

650
00:25:38,240 --> 00:25:41,520
because we we have the same schema we

651
00:25:40,080 --> 00:25:43,760
have the same transaction

652
00:25:41,520 --> 00:25:44,639
uh visibility map i think like this so

653
00:25:43,760 --> 00:25:47,600
we basically

654
00:25:44,640 --> 00:25:48,320
copy them link them or clone them to new

655
00:25:47,600 --> 00:25:51,360
cluster

656
00:25:48,320 --> 00:25:52,720
and it looks like the old one uh it

657
00:25:51,360 --> 00:25:56,240
sounds like

658
00:25:52,720 --> 00:25:58,960
slightly tricky and it is

659
00:25:56,240 --> 00:26:00,080
so procedure is like this you create

660
00:25:58,960 --> 00:26:03,200
empty database

661
00:26:00,080 --> 00:26:04,480
uh for a new version of postgresql don't

662
00:26:03,200 --> 00:26:07,200
forget about the kl

663
00:26:04,480 --> 00:26:09,039
things like this uh stop database with

664
00:26:07,200 --> 00:26:12,240
uh old postgresql version

665
00:26:09,039 --> 00:26:15,120
of course you need if you can prevent

666
00:26:12,240 --> 00:26:16,400
application to connect because it can

667
00:26:15,120 --> 00:26:19,279
ruin things

668
00:26:16,400 --> 00:26:20,480
we need afford some sort of downtime if

669
00:26:19,279 --> 00:26:23,600
you're using pga

670
00:26:20,480 --> 00:26:25,600
bouncer you can put pg bounce on pause

671
00:26:23,600 --> 00:26:27,439
and those uh connections from the

672
00:26:25,600 --> 00:26:30,158
application will wait

673
00:26:27,440 --> 00:26:30,799
so theoretically it will minimize

674
00:26:30,159 --> 00:26:34,000
downtime

675
00:26:30,799 --> 00:26:36,158
again then you start

676
00:26:34,000 --> 00:26:37,039
upgrade procedure with pg upgrade

677
00:26:36,159 --> 00:26:40,159
command

678
00:26:37,039 --> 00:26:40,559
it's like there's a documentation it's

679
00:26:40,159 --> 00:26:44,640
quite

680
00:26:40,559 --> 00:26:47,200
obvious uh in this case

681
00:26:44,640 --> 00:26:48,000
then you start after it successfully

682
00:26:47,200 --> 00:26:51,600
finishes

683
00:26:48,000 --> 00:26:53,200
you start database on a new version

684
00:26:51,600 --> 00:26:55,360
then you start to collect statistics

685
00:26:53,200 --> 00:26:56,720
because um during this procedure

686
00:26:55,360 --> 00:27:00,399
statistics uh

687
00:26:56,720 --> 00:27:02,480
is the uh new so postgresql do not bring

688
00:27:00,400 --> 00:27:04,240
old statistics to a new cluster pj

689
00:27:02,480 --> 00:27:05,600
upgrade doesn't do this

690
00:27:04,240 --> 00:27:07,679
and you need to recollect your new

691
00:27:05,600 --> 00:27:08,399
statistics because if statistic is

692
00:27:07,679 --> 00:27:10,320
different

693
00:27:08,400 --> 00:27:11,840
uh plans would be different if it's

694
00:27:10,320 --> 00:27:13,520
heavy loaded database it could be an

695
00:27:11,840 --> 00:27:16,399
issue

696
00:27:13,520 --> 00:27:17,918
then the statistic collection started at

697
00:27:16,400 --> 00:27:20,080
some point

698
00:27:17,919 --> 00:27:22,320
you can open your database for new

699
00:27:20,080 --> 00:27:25,360
connections of course if you do not have

700
00:27:22,320 --> 00:27:26,960
a really high transaction rate

701
00:27:25,360 --> 00:27:28,719
you can do that immediately and collect

702
00:27:26,960 --> 00:27:32,000
statistics but if you have

703
00:27:28,720 --> 00:27:34,159
really lots of transactions most likely

704
00:27:32,000 --> 00:27:37,279
you start

705
00:27:34,159 --> 00:27:39,760
collecting statistics then it says your

706
00:27:37,279 --> 00:27:41,039
uh like 10 of your statistics is

707
00:27:39,760 --> 00:27:43,520
collected

708
00:27:41,039 --> 00:27:44,240
then you can open database and database

709
00:27:43,520 --> 00:27:46,480
proceed

710
00:27:44,240 --> 00:27:47,360
to collect statistics but already some

711
00:27:46,480 --> 00:27:50,640
plans would be

712
00:27:47,360 --> 00:27:53,678
quite okay this process is tricky so

713
00:27:50,640 --> 00:27:57,679
when you do this keep an eye

714
00:27:53,679 --> 00:28:00,640
that there are not a lot of logs

715
00:27:57,679 --> 00:28:03,039
and based on that probably let database

716
00:28:00,640 --> 00:28:05,440
to collect statistics slightly longer

717
00:28:03,039 --> 00:28:06,080
after several upgrades you will figure

718
00:28:05,440 --> 00:28:08,320
out that

719
00:28:06,080 --> 00:28:09,760
uh you need for example a slightly

720
00:28:08,320 --> 00:28:12,799
longer technological window

721
00:28:09,760 --> 00:28:17,840
so basically it's like it's thing

722
00:28:12,799 --> 00:28:17,840
which comes with experience

723
00:28:19,200 --> 00:28:24,000
minimizing down time pg bouncing has a

724
00:28:21,760 --> 00:28:27,760
very good feature pulse resume

725
00:28:24,000 --> 00:28:28,720
again your intention is to pause pg

726
00:28:27,760 --> 00:28:31,919
bouncer

727
00:28:28,720 --> 00:28:33,440
and then it is paused quickly restart

728
00:28:31,919 --> 00:28:35,520
the database and it's like

729
00:28:33,440 --> 00:28:37,919
uh it's tricky thing so it's basically

730
00:28:35,520 --> 00:28:40,799
like uh

731
00:28:37,919 --> 00:28:42,240
many things could go wrong uh issue the

732
00:28:40,799 --> 00:28:45,679
checkpoint to let your

733
00:28:42,240 --> 00:28:46,720
server actually stop quicker and then

734
00:28:45,679 --> 00:28:50,720
you can

735
00:28:46,720 --> 00:28:54,240
use minus k link

736
00:28:50,720 --> 00:28:56,399
to do the pg upgrade like very fast

737
00:28:54,240 --> 00:28:57,279
so basically pg upgrade has two major

738
00:28:56,399 --> 00:29:00,320
regimes

739
00:28:57,279 --> 00:29:02,240
it can copy files and that is tricky

740
00:29:00,320 --> 00:29:04,639
because it's like pg dump you need

741
00:29:02,240 --> 00:29:06,080
extra time to copy things from one

742
00:29:04,640 --> 00:29:10,480
location to another one

743
00:29:06,080 --> 00:29:13,600
and it has a problem that you need

744
00:29:10,480 --> 00:29:17,039
again um double uh

745
00:29:13,600 --> 00:29:20,000
dick space so that's that's why

746
00:29:17,039 --> 00:29:21,200
uh for heavy loaded database we use this

747
00:29:20,000 --> 00:29:23,919
ruling thing

748
00:29:21,200 --> 00:29:24,640
and that makes a pg upgrade extremely

749
00:29:23,919 --> 00:29:28,159
dangerous

750
00:29:24,640 --> 00:29:31,279
because if ruling doesn't work

751
00:29:28,159 --> 00:29:34,399
you can lose your data so

752
00:29:31,279 --> 00:29:37,360
always think twice if uh

753
00:29:34,399 --> 00:29:39,039
your database is not big enough and if

754
00:29:37,360 --> 00:29:41,840
you can afford like

755
00:29:39,039 --> 00:29:42,960
a minute more of downtime most likely

756
00:29:41,840 --> 00:29:46,320
you can

757
00:29:42,960 --> 00:29:49,200
move the things with copying

758
00:29:46,320 --> 00:29:49,760
if you can afford this do this use

759
00:29:49,200 --> 00:29:53,039
relink

760
00:29:49,760 --> 00:29:56,240
only if you have very very strong

761
00:29:53,039 --> 00:29:59,520
requirements on downtime because

762
00:29:56,240 --> 00:30:00,640
it's much better to have a downtime of

763
00:29:59,520 --> 00:30:03,200
several minutes

764
00:30:00,640 --> 00:30:04,480
than a couple of hours of storm from

765
00:30:03,200 --> 00:30:07,360
backup

766
00:30:04,480 --> 00:30:09,679
things like this but it's everything

767
00:30:07,360 --> 00:30:12,879
depends on planning

768
00:30:09,679 --> 00:30:16,880
so um common question is what to

769
00:30:12,880 --> 00:30:20,399
upgrade first hot standby or primary

770
00:30:16,880 --> 00:30:23,840
or whatever my suggestion is actually

771
00:30:20,399 --> 00:30:27,439
first you upgrade a primary as it is a

772
00:30:23,840 --> 00:30:30,639
standalone server so just upgrade it

773
00:30:27,440 --> 00:30:31,360
leave your replicas alone if something

774
00:30:30,640 --> 00:30:33,760
goes wrong

775
00:30:31,360 --> 00:30:34,559
for example with relinking things you

776
00:30:33,760 --> 00:30:38,240
can

777
00:30:34,559 --> 00:30:39,760
just promote the replica brief

778
00:30:38,240 --> 00:30:41,760
and repeat the process from the

779
00:30:39,760 --> 00:30:43,520
beginning so basically uh

780
00:30:41,760 --> 00:30:45,440
you will be on a safe side because

781
00:30:43,520 --> 00:30:47,840
switching to the replica it's

782
00:30:45,440 --> 00:30:48,559
smooth process you most likely do that

783
00:30:47,840 --> 00:30:52,158
frequently

784
00:30:48,559 --> 00:30:54,080
so you can do this don't try to upgrade

785
00:30:52,159 --> 00:30:55,039
everything simultaneously most likely

786
00:30:54,080 --> 00:30:59,120
that never ends

787
00:30:55,039 --> 00:30:59,120
well then

788
00:30:59,279 --> 00:31:04,080
you see that everything is upgraded it

789
00:31:01,840 --> 00:31:06,559
it works it looks like your database

790
00:31:04,080 --> 00:31:08,799
not like some function chain style thing

791
00:31:06,559 --> 00:31:10,080
uh just re-instantiate your replica one

792
00:31:08,799 --> 00:31:12,399
by one again

793
00:31:10,080 --> 00:31:14,559
and you will have your replicas your

794
00:31:12,399 --> 00:31:17,760
cluster like it is upgraded

795
00:31:14,559 --> 00:31:20,000
um so you pause pg on

796
00:31:17,760 --> 00:31:21,120
uh on standby clone replica from

797
00:31:20,000 --> 00:31:23,039
upgraded primary

798
00:31:21,120 --> 00:31:25,039
using pg based backup actually

799
00:31:23,039 --> 00:31:29,039
documentation probably still says

800
00:31:25,039 --> 00:31:31,120
uh use rsync i never advise to use rsync

801
00:31:29,039 --> 00:31:34,158
because even experience that people

802
00:31:31,120 --> 00:31:35,279
do make mistakes then they do backup

803
00:31:34,159 --> 00:31:38,320
scripts manually

804
00:31:35,279 --> 00:31:39,919
pj backup is a good tool use it

805
00:31:38,320 --> 00:31:41,519
or using pidgey backrest whatever you

806
00:31:39,919 --> 00:31:43,360
prefer

807
00:31:41,519 --> 00:31:44,799
and then resume pick a bouncer start

808
00:31:43,360 --> 00:31:47,199
connections

809
00:31:44,799 --> 00:31:48,399
or start pidgey bouncer allow your

810
00:31:47,200 --> 00:31:52,080
application to go in

811
00:31:48,399 --> 00:31:54,479
so that's procedures like this

812
00:31:52,080 --> 00:31:56,879
now come details which can ruin

813
00:31:54,480 --> 00:31:56,880
everything

814
00:31:56,960 --> 00:32:00,080
there is no optimizer statistics so

815
00:31:59,039 --> 00:32:03,840
there is a

816
00:32:00,080 --> 00:32:06,480
script which is not a part of

817
00:32:03,840 --> 00:32:07,678
pj upgrade so basically pg upgrade

818
00:32:06,480 --> 00:32:10,559
generates a script

819
00:32:07,679 --> 00:32:12,080
which you need to run manually double

820
00:32:10,559 --> 00:32:14,720
check documentation about this

821
00:32:12,080 --> 00:32:17,279
so basically you need to be prepared to

822
00:32:14,720 --> 00:32:17,279
such things

823
00:32:17,840 --> 00:32:21,439
basically it does vacuum db minus minus

824
00:32:20,640 --> 00:32:23,440
all

825
00:32:21,440 --> 00:32:24,799
minus analysis and stages analyzing

826
00:32:23,440 --> 00:32:28,080
stages it

827
00:32:24,799 --> 00:32:31,760
this is uh what i told you so it just

828
00:32:28,080 --> 00:32:33,600
starts to analyze in parts doesn't try

829
00:32:31,760 --> 00:32:34,559
to make all the analyze for entire

830
00:32:33,600 --> 00:32:37,279
database which

831
00:32:34,559 --> 00:32:37,760
can be actually quite difficult uh if

832
00:32:37,279 --> 00:32:41,679
you have

833
00:32:37,760 --> 00:32:45,360
heavy workload since 9.5

834
00:32:41,679 --> 00:32:47,120
you can run wacom db in parallel and

835
00:32:45,360 --> 00:32:48,719
which can be extremely good if you have

836
00:32:47,120 --> 00:32:52,320
a large database so

837
00:32:48,720 --> 00:32:55,039
don't hesitate to open this script read

838
00:32:52,320 --> 00:32:56,639
what it is in it and maybe edit it

839
00:32:55,039 --> 00:32:58,720
something

840
00:32:56,640 --> 00:33:01,200
along to your requirements so you can

841
00:32:58,720 --> 00:33:04,799
use different things

842
00:33:01,200 --> 00:33:08,080
and uh we're actually basically just

843
00:33:04,799 --> 00:33:10,799
running wacom db minus mana so manually

844
00:33:08,080 --> 00:33:12,000
just not using that script we have from

845
00:33:10,799 --> 00:33:15,120
sort of our own

846
00:33:12,000 --> 00:33:17,120
uh and again keep an eye on locks maybe

847
00:33:15,120 --> 00:33:20,799
you need to stop the script because it's

848
00:33:17,120 --> 00:33:23,518
relatively safe it's just statistics and

849
00:33:20,799 --> 00:33:25,760
block users from connecting or maybe

850
00:33:23,519 --> 00:33:28,000
block only some users

851
00:33:25,760 --> 00:33:29,120
which are issuing heavy updates or

852
00:33:28,000 --> 00:33:32,880
things like this

853
00:33:29,120 --> 00:33:35,760
then rerun statistics so uh be creative

854
00:33:32,880 --> 00:33:36,799
experiment on stage not on the

855
00:33:35,760 --> 00:33:38,240
production and

856
00:33:36,799 --> 00:33:40,639
you will be on a safe side in this

857
00:33:38,240 --> 00:33:40,640
regard

858
00:33:40,880 --> 00:33:44,159
documentation suggests to use rsync i

859
00:33:43,360 --> 00:33:47,279
would say

860
00:33:44,159 --> 00:33:50,080
use pg based backup so

861
00:33:47,279 --> 00:33:50,720
there are lots of possibilities to shoot

862
00:33:50,080 --> 00:33:54,240
your lag

863
00:33:50,720 --> 00:33:54,240
and maybe not only the leg

864
00:33:55,120 --> 00:33:59,439
some distributions like debian ubuntu

865
00:33:57,600 --> 00:34:02,320
have of course wrappers

866
00:33:59,440 --> 00:34:04,240
which allow you to do things like

867
00:34:02,320 --> 00:34:06,320
semi-automatically

868
00:34:04,240 --> 00:34:07,279
never ever do that for mission critical

869
00:34:06,320 --> 00:34:09,839
database

870
00:34:07,279 --> 00:34:10,639
uh i like debian i like ubuntu they're

871
00:34:09,839 --> 00:34:13,119
nice

872
00:34:10,639 --> 00:34:15,200
people with beautiful products so with

873
00:34:13,119 --> 00:34:18,159
very good

874
00:34:15,199 --> 00:34:18,960
approach good attitude to building the

875
00:34:18,159 --> 00:34:22,159
distributions

876
00:34:18,960 --> 00:34:25,119
but the problem is all those wrappers

877
00:34:22,159 --> 00:34:26,639
increase numbers of bug you can hit and

878
00:34:25,119 --> 00:34:29,760
pga upgrade is

879
00:34:26,639 --> 00:34:31,599
complex enough so don't do it try to do

880
00:34:29,760 --> 00:34:35,119
it as manually as you can

881
00:34:31,599 --> 00:34:38,720
like with a backup it should be simple

882
00:34:35,119 --> 00:34:42,480
as possible so

883
00:34:38,719 --> 00:34:44,638
manually extensions

884
00:34:42,480 --> 00:34:46,040
it's important thing extensions is a

885
00:34:44,639 --> 00:34:49,760
beautiful mechanism but

886
00:34:46,040 --> 00:34:53,279
slightly work in progress

887
00:34:49,760 --> 00:34:54,159
so some aspects of extensions are not

888
00:34:53,280 --> 00:34:57,119
quite good

889
00:34:54,159 --> 00:34:57,839
and one of the problem is the auto of

890
00:34:57,119 --> 00:35:00,960
extension

891
00:34:57,839 --> 00:35:02,480
support is supposed to take care of

892
00:35:00,960 --> 00:35:05,680
upgrading scripts

893
00:35:02,480 --> 00:35:09,680
you can never ever know if that job

894
00:35:05,680 --> 00:35:10,240
was done properly and if it was done on

895
00:35:09,680 --> 00:35:11,680
time

896
00:35:10,240 --> 00:35:14,240
then you decide to upgrade to this

897
00:35:11,680 --> 00:35:14,640
version is this extension up to date or

898
00:35:14,240 --> 00:35:16,479
not

899
00:35:14,640 --> 00:35:18,480
most likely if it is extension which

900
00:35:16,480 --> 00:35:20,640
ships together with postgres it is

901
00:35:18,480 --> 00:35:22,880
because people do check those things but

902
00:35:20,640 --> 00:35:26,078
for third party extensions that's not

903
00:35:22,880 --> 00:35:28,560
true sometimes so pg upgrade

904
00:35:26,079 --> 00:35:29,280
keeps old versions of extensions which

905
00:35:28,560 --> 00:35:31,839
could be

906
00:35:29,280 --> 00:35:32,480
a problem because it will not work

907
00:35:31,839 --> 00:35:36,240
within the

908
00:35:32,480 --> 00:35:39,520
new database so normally

909
00:35:36,240 --> 00:35:39,919
the default prerequisite is to run cycle

910
00:35:39,520 --> 00:35:41,839
for

911
00:35:39,920 --> 00:35:43,200
all extension and perform alter

912
00:35:41,839 --> 00:35:46,480
extension name

913
00:35:43,200 --> 00:35:47,919
update so just uh at the point then

914
00:35:46,480 --> 00:35:48,800
you're experimenting on your test

915
00:35:47,920 --> 00:35:51,280
database

916
00:35:48,800 --> 00:35:53,280
do that take a look what is going on

917
00:35:51,280 --> 00:35:55,440
there if you have some warnings things

918
00:35:53,280 --> 00:35:58,880
like this if something doesn't work

919
00:35:55,440 --> 00:36:02,800
go for it do it some extensions

920
00:35:58,880 --> 00:36:04,079
are unknown to to require the special

921
00:36:02,800 --> 00:36:06,640
care for example post

922
00:36:04,079 --> 00:36:07,280
js should be updated before an upgrade

923
00:36:06,640 --> 00:36:09,598
actually

924
00:36:07,280 --> 00:36:10,480
so basically after that it would be like

925
00:36:09,599 --> 00:36:13,920
tricky things

926
00:36:10,480 --> 00:36:16,079
but once again uh don't believe me

927
00:36:13,920 --> 00:36:17,680
uh and just take a photo of this slide

928
00:36:16,079 --> 00:36:20,720
and work on this

929
00:36:17,680 --> 00:36:23,598
every upgrade you need to

930
00:36:20,720 --> 00:36:26,160
go through release notes uh keep in mind

931
00:36:23,599 --> 00:36:30,079
which sort of extensions you have

932
00:36:26,160 --> 00:36:32,960
and actually manually scrutinize

933
00:36:30,079 --> 00:36:35,839
what things you're supposed to to do to

934
00:36:32,960 --> 00:36:35,839
in order to upgrade

935
00:36:37,119 --> 00:36:40,880
there are lots of improvements in pg

936
00:36:39,680 --> 00:36:42,960
upgrades

937
00:36:40,880 --> 00:36:45,119
recently so basically i would say that

938
00:36:42,960 --> 00:36:48,320
pg upgrades uh

939
00:36:45,119 --> 00:36:51,440
are getting better faster

940
00:36:48,320 --> 00:36:51,920
now for example cloning is supported for

941
00:36:51,440 --> 00:36:56,160
newer

942
00:36:51,920 --> 00:36:59,280
versions of linux kernel it's safer than

943
00:36:56,160 --> 00:37:02,399
old thing with relinking

944
00:36:59,280 --> 00:37:05,440
and well it's good thing

945
00:37:02,400 --> 00:37:06,480
but be careful you need a proper file

946
00:37:05,440 --> 00:37:09,520
system

947
00:37:06,480 --> 00:37:11,359
and well

948
00:37:09,520 --> 00:37:12,800
some people actually trying to perform

949
00:37:11,359 --> 00:37:16,319
pg upgrade with cloning

950
00:37:12,800 --> 00:37:18,800
or uh relinking having um

951
00:37:16,320 --> 00:37:20,720
database and writer headlocks for

952
00:37:18,800 --> 00:37:23,839
example on different file systems

953
00:37:20,720 --> 00:37:27,118
it never ends well so basically uh

954
00:37:23,839 --> 00:37:29,200
check twice uh i probably

955
00:37:27,119 --> 00:37:31,839
on every slide i can repeat this check

956
00:37:29,200 --> 00:37:33,520
twice and see if it works

957
00:37:31,839 --> 00:37:34,960
using replication method to upgrade

958
00:37:33,520 --> 00:37:37,920
postgresql

959
00:37:34,960 --> 00:37:38,320
i would say that it's not the thing i

960
00:37:37,920 --> 00:37:41,680
would

961
00:37:38,320 --> 00:37:42,240
advise you but you can try the problem

962
00:37:41,680 --> 00:37:44,319
is

963
00:37:42,240 --> 00:37:45,680
that in spite of all the problems with

964
00:37:44,320 --> 00:37:49,119
pg upgrade

965
00:37:45,680 --> 00:37:52,000
this thing promising you zero downtime

966
00:37:49,119 --> 00:37:54,320
but you need to do lots of things

967
00:37:52,000 --> 00:37:58,000
manually so it's very rubber intensive

968
00:37:54,320 --> 00:38:00,880
and uh then it is so you usually can

969
00:37:58,000 --> 00:38:01,280
like miss miss something forget to move

970
00:38:00,880 --> 00:38:03,520
some

971
00:38:01,280 --> 00:38:05,119
table or things like this but sometimes

972
00:38:03,520 --> 00:38:07,839
it's useful

973
00:38:05,119 --> 00:38:09,280
the idea is set up new database cluster

974
00:38:07,839 --> 00:38:13,359
set up replication

975
00:38:09,280 --> 00:38:15,599
which one is preferred for you and then

976
00:38:13,359 --> 00:38:17,680
just perform a file over because those

977
00:38:15,599 --> 00:38:19,920
types of replication

978
00:38:17,680 --> 00:38:21,279
are working with different versions

979
00:38:19,920 --> 00:38:22,640
mostly

980
00:38:21,280 --> 00:38:24,640
mostly working with different versions

981
00:38:22,640 --> 00:38:25,920
of postgres normal binary replication

982
00:38:24,640 --> 00:38:29,279
doesn't

983
00:38:25,920 --> 00:38:32,960
so logical replication is relatively new

984
00:38:29,280 --> 00:38:36,800
uh promising method and from 9.4 you can

985
00:38:32,960 --> 00:38:39,040
upgrade to a newer version using this

986
00:38:36,800 --> 00:38:41,040
the problem is you need to check

987
00:38:39,040 --> 00:38:42,400
documentation carefully for each release

988
00:38:41,040 --> 00:38:45,839
as you do

989
00:38:42,400 --> 00:38:47,440
and then figure out how to manually

990
00:38:45,839 --> 00:38:50,400
actually

991
00:38:47,440 --> 00:38:52,960
migrate to entire database so basically

992
00:38:50,400 --> 00:38:55,920
uh logical replication is being designed

993
00:38:52,960 --> 00:38:56,240
uh for uh like partial application so if

994
00:38:55,920 --> 00:38:58,720
you

995
00:38:56,240 --> 00:38:59,439
need to migrate entire thing uh it's

996
00:38:58,720 --> 00:39:02,078
lots of

997
00:38:59,440 --> 00:39:02,720
work for you so just double check this

998
00:39:02,079 --> 00:39:04,880
um

999
00:39:02,720 --> 00:39:06,720
there are some things which allows you

1000
00:39:04,880 --> 00:39:10,240
to automate the process

1001
00:39:06,720 --> 00:39:13,040
and uh check that you replicate

1002
00:39:10,240 --> 00:39:15,040
uh everything you need so don't forget

1003
00:39:13,040 --> 00:39:18,880
about sequences things like this

1004
00:39:15,040 --> 00:39:22,079
uh and as well uh keep in mind that

1005
00:39:18,880 --> 00:39:23,839
uh on your upgraded database you need uh

1006
00:39:22,079 --> 00:39:25,280
users and trolls and permissions and

1007
00:39:23,839 --> 00:39:27,520
things like this so

1008
00:39:25,280 --> 00:39:28,480
this way of replicating data and

1009
00:39:27,520 --> 00:39:32,240
upgrading data

1010
00:39:28,480 --> 00:39:35,839
is more difficult use it only if you

1011
00:39:32,240 --> 00:39:38,879
need really zero downtime slowly one

1012
00:39:35,839 --> 00:39:41,119
it's old really really old method and

1013
00:39:38,880 --> 00:39:43,839
still compatible with postgres but

1014
00:39:41,119 --> 00:39:44,720
i would not uh bet that it would be

1015
00:39:43,839 --> 00:39:48,640
compatible

1016
00:39:44,720 --> 00:39:52,078
for a long time and you

1017
00:39:48,640 --> 00:39:56,078
literally can migrate from from

1018
00:39:52,079 --> 00:39:59,119
really old versions of postgresql

1019
00:39:56,079 --> 00:40:01,440
uh fairwaller could be done very fast

1020
00:39:59,119 --> 00:40:02,480
so basically it's trigger-based even on

1021
00:40:01,440 --> 00:40:05,440
heavy load

1022
00:40:02,480 --> 00:40:06,640
it works uh it's nightmare to operate

1023
00:40:05,440 --> 00:40:09,280
that for a long time

1024
00:40:06,640 --> 00:40:11,359
but if you only need that for for an

1025
00:40:09,280 --> 00:40:14,480
upgrade it could be a nice thing

1026
00:40:11,359 --> 00:40:16,240
but it's complicated and if you're not

1027
00:40:14,480 --> 00:40:17,839
quite experienced person in terms of

1028
00:40:16,240 --> 00:40:20,078
swani you know like

1029
00:40:17,839 --> 00:40:21,680
once twice uh read the documentation

1030
00:40:20,079 --> 00:40:24,000
everything is usual

1031
00:40:21,680 --> 00:40:24,879
but you need extra disk space and it's

1032
00:40:24,000 --> 00:40:27,920
trigger base

1033
00:40:24,880 --> 00:40:28,400
so if it's trigger base uh it could be

1034
00:40:27,920 --> 00:40:32,079
really

1035
00:40:28,400 --> 00:40:35,280
very cpu intensive both on the old

1036
00:40:32,079 --> 00:40:37,599
uh server and new server one dice

1037
00:40:35,280 --> 00:40:39,359
i never ever recommended actually to use

1038
00:40:37,599 --> 00:40:42,160
that but some people prefer that

1039
00:40:39,359 --> 00:40:42,799
to sloany sloany is complicated

1040
00:40:42,160 --> 00:40:45,359
nightmare

1041
00:40:42,800 --> 00:40:47,200
long dice is the same thing but not the

1042
00:40:45,359 --> 00:40:50,240
taut and not that bulletproof

1043
00:40:47,200 --> 00:40:51,200
so what can possibly go wrong but uh the

1044
00:40:50,240 --> 00:40:53,359
idea is

1045
00:40:51,200 --> 00:40:55,520
like uh it's not under that heavy

1046
00:40:53,359 --> 00:40:57,598
development like sloane used to be

1047
00:40:55,520 --> 00:40:59,680
before the binaural replication and

1048
00:40:57,599 --> 00:41:02,000
before logical replication

1049
00:40:59,680 --> 00:41:03,598
so it's like really buggy and it was

1050
00:41:02,000 --> 00:41:06,800
designed for different

1051
00:41:03,599 --> 00:41:09,280
things like transferring data

1052
00:41:06,800 --> 00:41:10,160
partially so i do not recommend to use

1053
00:41:09,280 --> 00:41:12,960
it

1054
00:41:10,160 --> 00:41:14,879
conclusion so that's some sort of a

1055
00:41:12,960 --> 00:41:18,319
matrix uh what we have

1056
00:41:14,880 --> 00:41:18,960
we have methods uh downtime extra disk

1057
00:41:18,319 --> 00:41:22,319
space

1058
00:41:18,960 --> 00:41:25,839
complexity and risking so

1059
00:41:22,319 --> 00:41:29,359
pg upgrade with relink

1060
00:41:25,839 --> 00:41:31,839
is low downtime low

1061
00:41:29,359 --> 00:41:32,880
disk space complexity is high a risk and

1062
00:41:31,839 --> 00:41:36,000
is very high

1063
00:41:32,880 --> 00:41:36,720
but still if you want to be on the safe

1064
00:41:36,000 --> 00:41:39,359
side use

1065
00:41:36,720 --> 00:41:42,560
this one or use this one if you have

1066
00:41:39,359 --> 00:41:46,160
some special requirements

1067
00:41:42,560 --> 00:41:47,839
go for i would say logical replication

1068
00:41:46,160 --> 00:41:49,520
if it doesn't work for you for some

1069
00:41:47,839 --> 00:41:51,200
reason for sloany

1070
00:41:49,520 --> 00:41:52,880
but most likely logical replication

1071
00:41:51,200 --> 00:41:55,839
because it's like a

1072
00:41:52,880 --> 00:41:57,520
new method uh under heavy development uh

1073
00:41:55,839 --> 00:41:57,920
nobody can guarantee that sloany would

1074
00:41:57,520 --> 00:42:01,280
be

1075
00:41:57,920 --> 00:42:02,240
uh that good uh like in five or three

1076
00:42:01,280 --> 00:42:05,359
years

1077
00:42:02,240 --> 00:42:06,240
so that's like a conclusion it's a good

1078
00:42:05,359 --> 00:42:09,440
written list

1079
00:42:06,240 --> 00:42:12,959
of using some of those methods

1080
00:42:09,440 --> 00:42:15,839
um maybe uh not very fresh one

1081
00:42:12,960 --> 00:42:16,319
so for example this talk of bruce is

1082
00:42:15,839 --> 00:42:20,000
quite

1083
00:42:16,319 --> 00:42:21,359
quite old but he wrote pg upgrade and uh

1084
00:42:20,000 --> 00:42:23,200
there are lots of good explanation how

1085
00:42:21,359 --> 00:42:26,799
it works

1086
00:42:23,200 --> 00:42:30,078
there are some blog posts so enjoy

1087
00:42:26,800 --> 00:42:30,640
keep an eye on that and slides would be

1088
00:42:30,079 --> 00:42:33,680
online

1089
00:42:30,640 --> 00:42:34,400
video would be online so you can return

1090
00:42:33,680 --> 00:42:36,319
to this

1091
00:42:34,400 --> 00:42:37,599
and if you have questions you can email

1092
00:42:36,319 --> 00:42:42,560
them to me

1093
00:42:37,599 --> 00:42:42,560
later or just ask them right now thank

1094
00:42:42,839 --> 00:42:45,839
you

1095
00:42:48,000 --> 00:42:59,839
we do have some time for questions so if

1096
00:42:49,760 --> 00:42:59,839
you want okay

1097
00:43:08,720 --> 00:43:15,040
okay so the question is uh how to do uh

1098
00:43:12,720 --> 00:43:15,839
smooth migrations then you upgrade your

1099
00:43:15,040 --> 00:43:19,040
application

1100
00:43:15,839 --> 00:43:22,240
am i correct so there are

1101
00:43:19,040 --> 00:43:23,920
several tools for doing this but uh i

1102
00:43:22,240 --> 00:43:25,040
would not say there is a civil bullet

1103
00:43:23,920 --> 00:43:28,480
for this

1104
00:43:25,040 --> 00:43:28,480
so basically some uh

1105
00:43:29,280 --> 00:43:33,040
oram frameworks things like this like

1106
00:43:31,280 --> 00:43:34,800
ruby xf record suggest

1107
00:43:33,040 --> 00:43:36,240
to do those migrations from the

1108
00:43:34,800 --> 00:43:38,640
application side

1109
00:43:36,240 --> 00:43:40,720
uh i would say many people who try to

1110
00:43:38,640 --> 00:43:43,200
use that finally ending up with

1111
00:43:40,720 --> 00:43:44,480
like creating files on disk with ultra

1112
00:43:43,200 --> 00:43:46,640
commands and

1113
00:43:44,480 --> 00:43:48,319
uh just basically manually preparing

1114
00:43:46,640 --> 00:43:52,000
that from

1115
00:43:48,319 --> 00:43:52,000
uh from

1116
00:43:53,119 --> 00:43:57,040
some some internal logic they used to to

1117
00:43:55,920 --> 00:43:59,359
create

1118
00:43:57,040 --> 00:44:00,960
the application so i would not say some

1119
00:43:59,359 --> 00:44:03,680
automatical tools

1120
00:44:00,960 --> 00:44:05,280
are working good in this regard uh if if

1121
00:44:03,680 --> 00:44:07,279
you're keeping track on

1122
00:44:05,280 --> 00:44:08,560
everything in your database for example

1123
00:44:07,280 --> 00:44:11,839
to perform the

1124
00:44:08,560 --> 00:44:14,000
upgrade using uh logical replication

1125
00:44:11,839 --> 00:44:15,680
that's basically like some script which

1126
00:44:14,000 --> 00:44:18,800
goes through all the database

1127
00:44:15,680 --> 00:44:20,240
uh keep track on all the tables uh and

1128
00:44:18,800 --> 00:44:22,160
prepares

1129
00:44:20,240 --> 00:44:23,520
comments you need to install logical

1130
00:44:22,160 --> 00:44:24,799
replication

1131
00:44:23,520 --> 00:44:26,880
i would actually suggest if you're

1132
00:44:24,800 --> 00:44:28,800
interested in particularly in that part

1133
00:44:26,880 --> 00:44:30,079
ask boris those things because he is

1134
00:44:28,800 --> 00:44:32,079
much more experienced at

1135
00:44:30,079 --> 00:44:34,000
logical replication working in the

1136
00:44:32,079 --> 00:44:39,280
company which creates that

1137
00:44:34,000 --> 00:44:39,280
it's like yeah i address you two to him

1138
00:44:40,720 --> 00:44:46,240
why don't you like to use pg restore

1139
00:44:43,839 --> 00:44:46,240
piping

1140
00:44:47,359 --> 00:44:53,520
yeah well why not

1141
00:44:50,800 --> 00:44:55,839
uh repeat why i do not recommend to use

1142
00:44:53,520 --> 00:44:59,280
uh pg restore uh

1143
00:44:55,839 --> 00:45:01,759
in a pidgey dump pipe pj restore

1144
00:44:59,280 --> 00:45:03,280
uh well you can do this but it's not an

1145
00:45:01,760 --> 00:45:07,280
easy thing so basically

1146
00:45:03,280 --> 00:45:09,599
um you can do this but

1147
00:45:07,280 --> 00:45:10,800
something can go wrong if you use

1148
00:45:09,599 --> 00:45:13,520
different location

1149
00:45:10,800 --> 00:45:14,960
different locale things like this but if

1150
00:45:13,520 --> 00:45:17,759
you know what you're doing

1151
00:45:14,960 --> 00:45:18,400
welcome why not we actually uh used to

1152
00:45:17,760 --> 00:45:22,400
do

1153
00:45:18,400 --> 00:45:26,240
i think this piping from pg dump to psql

1154
00:45:22,400 --> 00:45:29,280
before actually pt restore was written

1155
00:45:26,240 --> 00:45:31,598
so it's really old practice

1156
00:45:29,280 --> 00:45:32,960
migrating from one server to another yes

1157
00:45:31,599 --> 00:45:46,000
it makes sense it's a good

1158
00:45:32,960 --> 00:45:49,040
it's a good question here

1159
00:45:46,000 --> 00:45:52,960
no it's it's it's a good question um

1160
00:45:49,040 --> 00:45:56,400
so the question was um how to estimate

1161
00:45:52,960 --> 00:45:57,599
uh downtime uh how long it takes to

1162
00:45:56,400 --> 00:45:59,280
migrate or

1163
00:45:57,599 --> 00:46:01,920
to upgrade from one server to another

1164
00:45:59,280 --> 00:46:03,760
one i would say that

1165
00:46:01,920 --> 00:46:06,079
one of the best estimation is like

1166
00:46:03,760 --> 00:46:08,000
previous upgrades

1167
00:46:06,079 --> 00:46:12,160
so if you know your database you can

1168
00:46:08,000 --> 00:46:14,160
figure it out and even this doesn't work

1169
00:46:12,160 --> 00:46:15,200
i would say that's like some rule of

1170
00:46:14,160 --> 00:46:18,960
thumbs uh

1171
00:46:15,200 --> 00:46:21,520
if you have um some amounts of data

1172
00:46:18,960 --> 00:46:23,839
if you are sure that you can actually

1173
00:46:21,520 --> 00:46:27,520
disconnect some heavy up

1174
00:46:23,839 --> 00:46:29,119
updates from your database you probably

1175
00:46:27,520 --> 00:46:33,280
can guess something if you know

1176
00:46:29,119 --> 00:46:34,960
your database how long does it take on

1177
00:46:33,280 --> 00:46:37,760
those disks to copy

1178
00:46:34,960 --> 00:46:38,400
things uh from uh one location to

1179
00:46:37,760 --> 00:46:40,160
another

1180
00:46:38,400 --> 00:46:42,560
it's good if you have a test server

1181
00:46:40,160 --> 00:46:44,480
which is like the same configuration

1182
00:46:42,560 --> 00:46:45,440
or you can detach one of your replicas

1183
00:46:44,480 --> 00:46:46,400
with supposed to be the same

1184
00:46:45,440 --> 00:46:48,400
configuration

1185
00:46:46,400 --> 00:46:49,760
just try to figure out copying files how

1186
00:46:48,400 --> 00:46:52,880
long does it take

1187
00:46:49,760 --> 00:46:56,079
so it it is not like proper estimation

1188
00:46:52,880 --> 00:46:58,800
but at least you will figure out that

1189
00:46:56,079 --> 00:47:00,240
for example okay on such disks just

1190
00:46:58,800 --> 00:47:03,280
copying the data files

1191
00:47:00,240 --> 00:47:05,439
would would be too long

1192
00:47:03,280 --> 00:47:06,640
and you need to find another method for

1193
00:47:05,440 --> 00:47:09,440
example

1194
00:47:06,640 --> 00:47:10,160
but it's it's like experience things so

1195
00:47:09,440 --> 00:47:12,240
basically

1196
00:47:10,160 --> 00:47:14,160
that's why i suggest do upgrades

1197
00:47:12,240 --> 00:47:16,799
recently and try to

1198
00:47:14,160 --> 00:47:18,000
for example take your production data if

1199
00:47:16,800 --> 00:47:21,119
it's possible

1200
00:47:18,000 --> 00:47:24,960
try to do without uh any

1201
00:47:21,119 --> 00:47:27,280
uh heavy load and upgrade and figure out

1202
00:47:24,960 --> 00:47:28,559
how would it take on production and

1203
00:47:27,280 --> 00:47:29,440
basically it's a good thing with

1204
00:47:28,559 --> 00:47:31,359
upgrades because

1205
00:47:29,440 --> 00:47:32,480
uh most likely you need to close

1206
00:47:31,359 --> 00:47:36,319
databases for

1207
00:47:32,480 --> 00:47:37,359
for heavy changes so it's much more

1208
00:47:36,319 --> 00:47:41,040
easier than

1209
00:47:37,359 --> 00:47:43,839
for example estimate performance on uh

1210
00:47:41,040 --> 00:47:44,319
detached replica or standby so it's it's

1211
00:47:43,839 --> 00:47:47,440
a good

1212
00:47:44,319 --> 00:47:47,440
good news in this regard

1213
00:47:48,640 --> 00:47:55,598
so minor upgrade what is the order

1214
00:47:52,319 --> 00:47:58,640
do you first install the packages

1215
00:47:55,599 --> 00:48:02,000
and then you restart posters before

1216
00:47:58,640 --> 00:48:04,480
you stop postgres update the packages

1217
00:48:02,000 --> 00:48:06,640
and then start focusing good question i

1218
00:48:04,480 --> 00:48:09,680
repeat the question

1219
00:48:06,640 --> 00:48:12,240
don't give him a ball uh so what's

1220
00:48:09,680 --> 00:48:13,839
the order of um what's the sequence of

1221
00:48:12,240 --> 00:48:17,040
our uh things so

1222
00:48:13,839 --> 00:48:18,078
uh by my minor upgrade uh do we install

1223
00:48:17,040 --> 00:48:21,920
packages first

1224
00:48:18,079 --> 00:48:24,960
then stop postgres and uh

1225
00:48:21,920 --> 00:48:27,200
uh then start postgres uh uh

1226
00:48:24,960 --> 00:48:28,240
or we first stop postgres and install

1227
00:48:27,200 --> 00:48:31,279
packages

1228
00:48:28,240 --> 00:48:34,640
um it depends on the distribution

1229
00:48:31,280 --> 00:48:35,280
uh actually but uh i would suggest if

1230
00:48:34,640 --> 00:48:37,440
you

1231
00:48:35,280 --> 00:48:39,599
can allow your downtime be on a safe

1232
00:48:37,440 --> 00:48:43,359
side stop postgres install

1233
00:48:39,599 --> 00:48:45,040
new binaries then do the things but in

1234
00:48:43,359 --> 00:48:47,598
real world we actually

1235
00:48:45,040 --> 00:48:49,200
every time we install new binaries uh

1236
00:48:47,599 --> 00:48:50,480
trying to figure out that for example

1237
00:48:49,200 --> 00:48:54,160
debian do not

1238
00:48:50,480 --> 00:48:58,079
start do not spoil some things for us

1239
00:48:54,160 --> 00:49:00,558
and after that we actually do

1240
00:48:58,079 --> 00:49:01,599
stop postdress move to new things and so

1241
00:49:00,559 --> 00:49:04,079
on

1242
00:49:01,599 --> 00:49:05,599
i think the rpms uh also restart them

1243
00:49:04,079 --> 00:49:07,680
trying to install them

1244
00:49:05,599 --> 00:49:09,599
but the problem is if they're mobile so

1245
00:49:07,680 --> 00:49:11,279
for multiple instances

1246
00:49:09,599 --> 00:49:12,800
only the first one will start the main

1247
00:49:11,280 --> 00:49:13,520
one will just restart the other one

1248
00:49:12,800 --> 00:49:15,359
which is just

1249
00:49:13,520 --> 00:49:17,520
stay over there but we will use this

1250
00:49:15,359 --> 00:49:21,520
problem in version 13. yeah well uh

1251
00:49:17,520 --> 00:49:23,440
then uh then you think uh yeah so

1252
00:49:21,520 --> 00:49:25,119
though there was input from devrum that

1253
00:49:23,440 --> 00:49:28,640
rpms also

1254
00:49:25,119 --> 00:49:31,920
actually actually restart your database

1255
00:49:28,640 --> 00:49:34,960
uh then you try to do like i described

1256
00:49:31,920 --> 00:49:37,839
but my point is actually that you

1257
00:49:34,960 --> 00:49:38,319
should do those things more manually

1258
00:49:37,839 --> 00:49:41,759
because

1259
00:49:38,319 --> 00:49:44,240
you know rpms as well as

1260
00:49:41,760 --> 00:49:46,000
other packet managers they allow you a

1261
00:49:44,240 --> 00:49:48,399
lot of

1262
00:49:46,000 --> 00:49:49,839
sort of automation things to make things

1263
00:49:48,400 --> 00:49:52,160
for dba simpler

1264
00:49:49,839 --> 00:49:53,119
but those automation is unpredictable so

1265
00:49:52,160 --> 00:49:55,520
basically

1266
00:49:53,119 --> 00:49:56,160
disable those things try to do that

1267
00:49:55,520 --> 00:49:58,880
manually

1268
00:49:56,160 --> 00:50:00,720
then endeavor and fix them then you will

1269
00:49:58,880 --> 00:50:02,720
enjoy and include that on the slide that

1270
00:50:00,720 --> 00:50:12,240
definitely fix things

1271
00:50:02,720 --> 00:50:12,240
go on use automatic things

1272
00:50:19,760 --> 00:50:23,680
would i need to make a directory a new

1273
00:50:22,240 --> 00:50:27,040
backup when i

1274
00:50:23,680 --> 00:50:28,799
did a bg upgrade so the question is if

1275
00:50:27,040 --> 00:50:30,000
you are using not pg based backup but

1276
00:50:28,800 --> 00:50:33,119
using pg backrest

1277
00:50:30,000 --> 00:50:34,000
uh is it applicable everything which i

1278
00:50:33,119 --> 00:50:38,079
told

1279
00:50:34,000 --> 00:50:41,839
uh or you need to make uh pidgey back

1280
00:50:38,079 --> 00:50:41,839
pitch based backup

1281
00:50:42,079 --> 00:50:45,839
should i immediately make a new field

1282
00:50:46,640 --> 00:50:52,000
um what do you

1283
00:50:49,760 --> 00:50:53,599
understand of immediate backup actually

1284
00:50:52,000 --> 00:50:56,079
so

1285
00:50:53,599 --> 00:50:58,240
theoretically answer is yes because you

1286
00:50:56,079 --> 00:50:58,640
need your backup and you cannot restore

1287
00:50:58,240 --> 00:51:01,759
that

1288
00:50:58,640 --> 00:51:03,839
uh for a new version because it's been

1289
00:51:01,760 --> 00:51:06,720
arranged compatible

1290
00:51:03,839 --> 00:51:07,279
but i would not suggest you to make a

1291
00:51:06,720 --> 00:51:09,200
backup

1292
00:51:07,280 --> 00:51:11,040
immediately if you have heavy loaded

1293
00:51:09,200 --> 00:51:13,919
database which is

1294
00:51:11,040 --> 00:51:15,440
right now collecting the statistics so

1295
00:51:13,920 --> 00:51:16,319
there is some vulnerability period

1296
00:51:15,440 --> 00:51:19,520
because if you

1297
00:51:16,319 --> 00:51:20,000
will make a backup as well it would be

1298
00:51:19,520 --> 00:51:22,800
maybe

1299
00:51:20,000 --> 00:51:23,200
too too heavy for your database so wait

1300
00:51:22,800 --> 00:51:25,359
like

1301
00:51:23,200 --> 00:51:27,040
several minutes then start to do this

1302
00:51:25,359 --> 00:51:29,839
but basically you need to understand

1303
00:51:27,040 --> 00:51:30,800
that if you upgraded to new binaries you

1304
00:51:29,839 --> 00:51:34,078
do not have

1305
00:51:30,800 --> 00:51:36,319
a backup anymore because all backups are

1306
00:51:34,079 --> 00:51:38,240
backups from the previous version you

1307
00:51:36,319 --> 00:51:41,520
need to install previous version

1308
00:51:38,240 --> 00:51:42,160
then upgrade things like this so as soon

1309
00:51:41,520 --> 00:51:44,400
as you can

1310
00:51:42,160 --> 00:51:47,118
do the new binary backup or backup with

1311
00:51:44,400 --> 00:51:47,119
pidgey backrest

1312
00:51:49,040 --> 00:51:52,880
yeah you can get me outside yeah thank

1313
00:51:51,680 --> 00:52:04,720
you

1314
00:51:52,880 --> 00:52:04,720
thank you

