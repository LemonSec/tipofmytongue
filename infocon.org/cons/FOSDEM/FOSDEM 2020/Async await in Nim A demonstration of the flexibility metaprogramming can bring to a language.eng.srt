1
00:00:06,000 --> 00:00:09,280
hello everyone

2
00:00:06,960 --> 00:00:10,480
um and thank you for coming to this last

3
00:00:09,280 --> 00:00:12,320
talk of the day

4
00:00:10,480 --> 00:00:13,599
i know you both are probably like

5
00:00:12,320 --> 00:00:16,720
itching to get home

6
00:00:13,599 --> 00:00:20,080
um so my name is dominic pihata

7
00:00:16,720 --> 00:00:23,198
and i am a long time core contributor to

8
00:00:20,080 --> 00:00:23,599
nim i am actually the one that wrote the

9
00:00:23,199 --> 00:00:26,720
first

10
00:00:23,600 --> 00:00:28,480
book on them called nim in action

11
00:00:26,720 --> 00:00:30,240
right now though i spend my days working

12
00:00:28,480 --> 00:00:34,399
at facebook and

13
00:00:30,240 --> 00:00:36,719
my nights working in them whenever i can

14
00:00:34,399 --> 00:00:39,520
but let's get right into the talk so

15
00:00:36,719 --> 00:00:41,680
async awaiting them

16
00:00:39,520 --> 00:00:43,440
so many of you here likely do not need

17
00:00:41,680 --> 00:00:45,120
to hear this

18
00:00:43,440 --> 00:00:47,039
maybe some of you already heard of nim

19
00:00:45,120 --> 00:00:48,718
but for those not familiar

20
00:00:47,039 --> 00:00:50,960
with it and for the benefit of those

21
00:00:48,719 --> 00:00:52,320
watching at home

22
00:00:50,960 --> 00:00:54,160
i just want to say a few words of

23
00:00:52,320 --> 00:00:56,719
introduction so

24
00:00:54,160 --> 00:00:58,160
what is nim so obviously nim is a

25
00:00:56,719 --> 00:00:59,840
programming language

26
00:00:58,160 --> 00:01:02,640
but it has a few characteristics that

27
00:00:59,840 --> 00:01:06,000
make it quite special

28
00:01:02,640 --> 00:01:09,439
um it is efficient and portable

29
00:01:06,000 --> 00:01:13,520
uh it compiles to either c c plus plus

30
00:01:09,439 --> 00:01:17,360
or even objective c

31
00:01:13,520 --> 00:01:21,199
and javascript yes thank you

32
00:01:17,360 --> 00:01:23,680
so that allows it to match c speed and

33
00:01:21,200 --> 00:01:24,640
it also gives it access to c's wide

34
00:01:23,680 --> 00:01:27,759
range of

35
00:01:24,640 --> 00:01:30,479
libraries and things like that

36
00:01:27,759 --> 00:01:31,600
it is easy to pick up nim focuses on

37
00:01:30,479 --> 00:01:34,720
building a small

38
00:01:31,600 --> 00:01:36,720
language core with more features

39
00:01:34,720 --> 00:01:39,520
implemented using its brilliant

40
00:01:36,720 --> 00:01:41,840
macro system and this makes it easy for

41
00:01:39,520 --> 00:01:43,920
anyone to pick up

42
00:01:41,840 --> 00:01:45,520
it is a modern language as it includes

43
00:01:43,920 --> 00:01:48,880
many features you'd expect

44
00:01:45,520 --> 00:01:52,158
out of one this includes generics

45
00:01:48,880 --> 00:01:53,679
iterators closures a brilliant module

46
00:01:52,159 --> 00:01:55,920
system

47
00:01:53,680 --> 00:01:56,880
things like that and it is production

48
00:01:55,920 --> 00:01:59,680
ready

49
00:01:56,880 --> 00:02:01,039
so we recently had a 1.0 release just

50
00:01:59,680 --> 00:02:02,960
last year

51
00:02:01,040 --> 00:02:05,200
so name now guarantees backwards

52
00:02:02,960 --> 00:02:07,919
compatibility

53
00:02:05,200 --> 00:02:09,598
making it ready for use in production

54
00:02:07,920 --> 00:02:10,640
and the great thing about the 1.0

55
00:02:09,598 --> 00:02:12,720
release

56
00:02:10,639 --> 00:02:14,000
is that shipped with two very amazing

57
00:02:12,720 --> 00:02:17,120
features

58
00:02:14,000 --> 00:02:20,000
those being procedural macros

59
00:02:17,120 --> 00:02:20,720
and async await and we will touch on

60
00:02:20,000 --> 00:02:23,360
both of these

61
00:02:20,720 --> 00:02:23,359
in this stock

62
00:02:24,080 --> 00:02:30,239
so with out of the way

63
00:02:27,680 --> 00:02:33,200
let's move on to the main topic but

64
00:02:30,239 --> 00:02:37,200
let's go over some basics

65
00:02:33,200 --> 00:02:39,920
so what is the problem with i o um

66
00:02:37,200 --> 00:02:42,160
i operations such as reading data from a

67
00:02:39,920 --> 00:02:44,879
hard drive or receiving

68
00:02:42,160 --> 00:02:45,680
information over the network can be very

69
00:02:44,879 --> 00:02:48,480
slow

70
00:02:45,680 --> 00:02:50,239
and performing synchronous io will

71
00:02:48,480 --> 00:02:51,518
result in your application not doing any

72
00:02:50,239 --> 00:02:53,200
useful work

73
00:02:51,519 --> 00:02:55,760
while your eye operations are in

74
00:02:53,200 --> 00:02:58,238
progress in other words

75
00:02:55,760 --> 00:03:00,159
your application becomes blocked a

76
00:02:58,239 --> 00:03:02,800
synchronous die on the other hand

77
00:03:00,159 --> 00:03:04,000
solves this by offering a mechanism

78
00:03:02,800 --> 00:03:06,560
which allows you to check whether

79
00:03:04,000 --> 00:03:08,400
an i o operation has completed

80
00:03:06,560 --> 00:03:09,599
repeatedly

81
00:03:08,400 --> 00:03:13,920
but there's no way to do this in a

82
00:03:09,599 --> 00:03:13,920
simple way so what can we do

83
00:03:14,319 --> 00:03:17,518
how do you manage thousands of i

84
00:03:16,080 --> 00:03:20,959
operations

85
00:03:17,519 --> 00:03:23,040
with many different actions to be taken

86
00:03:20,959 --> 00:03:24,879
when each operation completes

87
00:03:23,040 --> 00:03:26,239
now the most basic solution is to use

88
00:03:24,879 --> 00:03:30,959
callbacks but

89
00:03:26,239 --> 00:03:32,560
let's face it as many of you likely know

90
00:03:30,959 --> 00:03:34,159
callbacks become very difficult to

91
00:03:32,560 --> 00:03:37,200
manage that's an example of

92
00:03:34,159 --> 00:03:37,200
some callbacks in nim

93
00:03:37,519 --> 00:03:42,239
the main reason for this is that they

94
00:03:39,760 --> 00:03:44,480
basically fail to compose well

95
00:03:42,239 --> 00:03:45,280
ideally what we want is to write reo

96
00:03:44,480 --> 00:03:48,560
code

97
00:03:45,280 --> 00:03:50,080
in a similar way that we write our non-i

98
00:03:48,560 --> 00:03:52,799
o code already

99
00:03:50,080 --> 00:03:54,000
um just to explain what this code is uh

100
00:03:52,799 --> 00:03:56,959
it's

101
00:03:54,000 --> 00:03:57,920
basically three functions the get data

102
00:03:56,959 --> 00:04:00,560
at the bottom

103
00:03:57,920 --> 00:04:02,000
uh reads 100 bytes of uh data from a

104
00:04:00,560 --> 00:04:05,200
socket

105
00:04:02,000 --> 00:04:07,920
uh takes a call back called

106
00:04:05,200 --> 00:04:09,760
on god first data then reads another 100

107
00:04:07,920 --> 00:04:10,319
bytes then takes in another callback and

108
00:04:09,760 --> 00:04:13,599
then that

109
00:04:10,319 --> 00:04:17,120
callback finally uh prints out the

110
00:04:13,599 --> 00:04:17,120
result from the receive call

111
00:04:17,680 --> 00:04:21,120
so callbacks suck i hope we can all

112
00:04:20,720 --> 00:04:25,360
agree

113
00:04:21,120 --> 00:04:27,680
a lot so

114
00:04:25,360 --> 00:04:29,759
i think one of the best solutions is

115
00:04:27,680 --> 00:04:32,000
what we call async weight

116
00:04:29,759 --> 00:04:32,800
and this is another example showing just

117
00:04:32,000 --> 00:04:38,160
that

118
00:04:32,800 --> 00:04:41,040
so we have again a get data procedure

119
00:04:38,160 --> 00:04:42,479
taking a socket an async socket you see

120
00:04:41,040 --> 00:04:43,680
the async pragma there

121
00:04:42,479 --> 00:04:45,520
which signifies that it's in a

122
00:04:43,680 --> 00:04:47,600
synchronous procedure

123
00:04:45,520 --> 00:04:49,599
and it's immediately clear that the

124
00:04:47,600 --> 00:04:50,479
first 100 bytes that we read from the

125
00:04:49,600 --> 00:04:53,440
socket

126
00:04:50,479 --> 00:04:55,280
just gets discarded and we only use the

127
00:04:53,440 --> 00:04:58,800
second 100 bytes

128
00:04:55,280 --> 00:05:00,320
and we only print it out so the code is

129
00:04:58,800 --> 00:05:03,520
much easier to reason about

130
00:05:00,320 --> 00:05:07,360
and while you have these await

131
00:05:03,520 --> 00:05:07,680
calls they do offer a useful hint as to

132
00:05:07,360 --> 00:05:11,840
where

133
00:05:07,680 --> 00:05:11,840
io is being performed

134
00:05:12,000 --> 00:05:17,039
now you've probably seen this in other

135
00:05:13,360 --> 00:05:17,039
languages like c sharp and rust

136
00:05:17,280 --> 00:05:20,960
but there's something special about this

137
00:05:20,080 --> 00:05:22,960
it's

138
00:05:20,960 --> 00:05:24,239
it's completely implemented using macros

139
00:05:22,960 --> 00:05:25,599
in them

140
00:05:24,240 --> 00:05:27,919
there is no support for this in the

141
00:05:25,600 --> 00:05:30,160
compiler at all

142
00:05:27,919 --> 00:05:31,280
and this is basically what i will

143
00:05:30,160 --> 00:05:34,320
outline uh

144
00:05:31,280 --> 00:05:36,239
in more detail now but let's first

145
00:05:34,320 --> 00:05:39,840
go through how all of the components of

146
00:05:36,240 --> 00:05:41,680
nim's async fit together

147
00:05:39,840 --> 00:05:43,440
yeah so much easier to really understand

148
00:05:41,680 --> 00:05:45,280
hopefully

149
00:05:43,440 --> 00:05:47,039
so there really isn't much to it uh

150
00:05:45,280 --> 00:05:50,479
there's four components

151
00:05:47,039 --> 00:05:53,440
you've got your future your

152
00:05:50,479 --> 00:05:54,800
async procedures selectors module and

153
00:05:53,440 --> 00:05:56,639
the async dispatcher

154
00:05:54,800 --> 00:05:59,199
so let's look at these in a little bit

155
00:05:56,639 --> 00:05:59,199
more detail

156
00:05:59,919 --> 00:06:06,639
so the future is just a simple

157
00:06:03,600 --> 00:06:08,319
object which acts as a container

158
00:06:06,639 --> 00:06:10,639
if i just run through the code at the

159
00:06:08,319 --> 00:06:12,880
top you see it's a

160
00:06:10,639 --> 00:06:15,520
simple type definition a generic one

161
00:06:12,880 --> 00:06:18,719
which takes a generic type t

162
00:06:15,520 --> 00:06:21,280
and there's four fields

163
00:06:18,720 --> 00:06:22,640
value which stores the value stored in

164
00:06:21,280 --> 00:06:24,318
the future

165
00:06:22,640 --> 00:06:26,400
[Music]

166
00:06:24,319 --> 00:06:29,039
a call back which you can set to a

167
00:06:26,400 --> 00:06:29,039
procedure

168
00:06:29,199 --> 00:06:36,479
and when the future gets completed

169
00:06:32,880 --> 00:06:38,960
that callback gets called

170
00:06:36,479 --> 00:06:40,960
a finished field to just track whether

171
00:06:38,960 --> 00:06:42,400
the feature has completed or not and an

172
00:06:40,960 --> 00:06:45,440
exception

173
00:06:42,400 --> 00:06:49,840
when for example some error occurs

174
00:06:45,440 --> 00:06:49,840
during the computation of your future

175
00:06:59,759 --> 00:07:03,919
so let's move on to the async procedures

176
00:07:02,400 --> 00:07:07,039
now

177
00:07:03,919 --> 00:07:09,520
so here we have another example of one

178
00:07:07,039 --> 00:07:10,318
it's a procedure called find page size

179
00:07:09,520 --> 00:07:13,599
it takes

180
00:07:10,319 --> 00:07:16,639
two arguments an async http client

181
00:07:13,599 --> 00:07:18,880
and a url and it returns a future

182
00:07:16,639 --> 00:07:21,680
containing an integer

183
00:07:18,880 --> 00:07:23,440
and what you see after that is obviously

184
00:07:21,680 --> 00:07:25,199
the async pragma again to signify that

185
00:07:23,440 --> 00:07:28,400
it's an asic procedure

186
00:07:25,199 --> 00:07:31,520
and in the body we just use the http

187
00:07:28,400 --> 00:07:34,638
client to send an http get

188
00:07:31,520 --> 00:07:38,479
to the url and then we return

189
00:07:34,639 --> 00:07:38,479
the length of the data that we receive

190
00:07:39,120 --> 00:07:43,360
so question now becomes since nim has no

191
00:07:42,080 --> 00:07:45,520
idea about

192
00:07:43,360 --> 00:07:46,400
how async procedures work or anything

193
00:07:45,520 --> 00:07:48,960
like that

194
00:07:46,400 --> 00:07:51,440
how do we express this without the async

195
00:07:48,960 --> 00:07:51,440
pragma

196
00:07:52,639 --> 00:07:58,319
so one possible way is to translate it

197
00:07:56,240 --> 00:08:00,879
to use callbacks

198
00:07:58,319 --> 00:08:02,400
and this is what this would look like

199
00:08:00,879 --> 00:08:04,720
you have

200
00:08:02,400 --> 00:08:06,239
first align like the the function is

201
00:08:04,720 --> 00:08:08,800
very similar you don't have the async

202
00:08:06,240 --> 00:08:12,160
pragma anymore

203
00:08:08,800 --> 00:08:15,599
you have a result being set to a

204
00:08:12,160 --> 00:08:17,680
newly allocated future uh

205
00:08:15,599 --> 00:08:19,360
and then we call the get content uh

206
00:08:17,680 --> 00:08:22,879
procedure again

207
00:08:19,360 --> 00:08:24,000
which returns a future we assign it to a

208
00:08:22,879 --> 00:08:26,639
new variable we

209
00:08:24,000 --> 00:08:27,840
we assign a new procedure to its

210
00:08:26,639 --> 00:08:30,319
callback field

211
00:08:27,840 --> 00:08:32,799
and then in that callback field we

212
00:08:30,319 --> 00:08:35,839
complete the resulting future with the

213
00:08:32,799 --> 00:08:37,199
length of our data future

214
00:08:35,839 --> 00:08:38,839
there's a lot of features going around

215
00:08:37,200 --> 00:08:41,839
here but i hope you understand what i

216
00:08:38,839 --> 00:08:41,839
mean

217
00:08:42,080 --> 00:08:46,959
so this is not ideal

218
00:08:45,519 --> 00:08:48,640
the problem with it is that it doesn't

219
00:08:46,959 --> 00:08:50,160
scale

220
00:08:48,640 --> 00:08:53,040
as soon as you introduce more control

221
00:08:50,160 --> 00:08:56,319
flow into your synchronous procedure

222
00:08:53,040 --> 00:08:58,000
you will run into problems

223
00:08:56,320 --> 00:08:59,600
translating it will become very

224
00:08:58,000 --> 00:09:02,800
difficult

225
00:08:59,600 --> 00:09:04,160
now i should preface this with something

226
00:09:02,800 --> 00:09:06,800
that andreas

227
00:09:04,160 --> 00:09:09,120
told me and that is that apparently it

228
00:09:06,800 --> 00:09:11,439
is possible to achieve this

229
00:09:09,120 --> 00:09:13,040
but i looked into it and i couldn't find

230
00:09:11,440 --> 00:09:13,600
anything any programming language that

231
00:09:13,040 --> 00:09:17,439
does this

232
00:09:13,600 --> 00:09:20,560
even javascript uh if you use babel

233
00:09:17,440 --> 00:09:23,839
to translate javascript code with await

234
00:09:20,560 --> 00:09:26,319
into etsuma script 5. it still uses

235
00:09:23,839 --> 00:09:28,560
iterators

236
00:09:26,320 --> 00:09:29,519
which takes us to our second translation

237
00:09:28,560 --> 00:09:32,880
attempt

238
00:09:29,519 --> 00:09:33,440
which is using an iterator and you see

239
00:09:32,880 --> 00:09:36,320
here

240
00:09:33,440 --> 00:09:38,160
we have again very similar code it's

241
00:09:36,320 --> 00:09:40,959
just that we're using iterators

242
00:09:38,160 --> 00:09:42,240
we have the closure pragma which in nim

243
00:09:40,959 --> 00:09:43,839
basically turns the

244
00:09:42,240 --> 00:09:45,760
iterator into something that can be

245
00:09:43,839 --> 00:09:49,200
allocated on the heap

246
00:09:45,760 --> 00:09:51,920
um and this makes it much easier to

247
00:09:49,200 --> 00:09:55,360
translate because it allows us to simply

248
00:09:51,920 --> 00:09:57,279
change each await statement into a yield

249
00:09:55,360 --> 00:09:59,680
and the rest is fairly similar to the

250
00:09:57,279 --> 00:10:02,480
previous code but hopefully

251
00:09:59,680 --> 00:10:03,120
that helps you see that it wouldn't be

252
00:10:02,480 --> 00:10:04,800
as

253
00:10:03,120 --> 00:10:07,760
difficult to translate a more

254
00:10:04,800 --> 00:10:07,760
complicated example

255
00:10:11,200 --> 00:10:14,880
so the scalability problems are solved

256
00:10:15,360 --> 00:10:19,279
so now we go on to some meta programming

257
00:10:17,760 --> 00:10:22,319
in them

258
00:10:19,279 --> 00:10:25,439
i'm going to show you how you would

259
00:10:22,320 --> 00:10:25,440
achieve this translation

260
00:10:25,920 --> 00:10:33,680
okay so we have this

261
00:10:30,240 --> 00:10:36,320
again a single procedure it's a bit

262
00:10:33,680 --> 00:10:37,599
i would say simpler than the previous

263
00:10:36,320 --> 00:10:38,160
one even though it's slightly simpler

264
00:10:37,600 --> 00:10:42,000
but

265
00:10:38,160 --> 00:10:42,000
still just for the case of this example

266
00:10:42,959 --> 00:10:46,959
i think we need to simplify it a little

267
00:10:44,839 --> 00:10:49,519
bit

268
00:10:46,959 --> 00:10:50,719
so when you're starting developing

269
00:10:49,519 --> 00:10:52,720
macros in nim

270
00:10:50,720 --> 00:10:54,240
usually what you start with is something

271
00:10:52,720 --> 00:10:59,279
like this

272
00:10:54,240 --> 00:10:59,279
so this is an async macro it takes a

273
00:10:59,440 --> 00:11:05,360
body parameter of type on typed and this

274
00:11:02,800 --> 00:11:09,040
is like a magical type which just

275
00:11:05,360 --> 00:11:12,240
refers to more

276
00:11:09,040 --> 00:11:13,920
more than one code statement and we

277
00:11:12,240 --> 00:11:16,320
return a non-typed as well because we

278
00:11:13,920 --> 00:11:18,479
are basically transforming a procedure

279
00:11:16,320 --> 00:11:19,920
code statement into another code

280
00:11:18,480 --> 00:11:21,839
statement

281
00:11:19,920 --> 00:11:23,839
and in the body of it all we're doing is

282
00:11:21,839 --> 00:11:24,160
we're displaying the tree representation

283
00:11:23,839 --> 00:11:27,519
of

284
00:11:24,160 --> 00:11:30,160
our abstract syntax tree

285
00:11:27,519 --> 00:11:31,600
and this is what that looks like so at

286
00:11:30,160 --> 00:11:34,399
the bottom you have a link

287
00:11:31,600 --> 00:11:35,760
if you want to try it out on the nim

288
00:11:34,399 --> 00:11:37,120
playground you can run it in your

289
00:11:35,760 --> 00:11:40,000
browser

290
00:11:37,120 --> 00:11:40,959
but basically you get this nice tree

291
00:11:40,000 --> 00:11:42,720
structure

292
00:11:40,959 --> 00:11:44,800
where you have each of the components of

293
00:11:42,720 --> 00:11:48,000
our procedure the name

294
00:11:44,800 --> 00:11:51,439
test async the parameters in this case

295
00:11:48,000 --> 00:11:54,839
it's just the return value and the body

296
00:11:51,440 --> 00:11:57,839
which contains the await and the return

297
00:11:54,839 --> 00:11:57,839
statement

298
00:11:59,839 --> 00:12:04,800
so going back to our example how do we

299
00:12:02,560 --> 00:12:07,518
develop our macro to translate

300
00:12:04,800 --> 00:12:08,839
our procedure our synchronous procedure

301
00:12:07,519 --> 00:12:12,480
into an equivalent

302
00:12:08,839 --> 00:12:15,200
iterator well we do something like this

303
00:12:12,480 --> 00:12:15,839
and i've obviously taken some liberties

304
00:12:15,200 --> 00:12:18,480
here

305
00:12:15,839 --> 00:12:19,120
because i wouldn't be able to show

306
00:12:18,480 --> 00:12:20,800
something

307
00:12:19,120 --> 00:12:22,880
that would work generically for all

308
00:12:20,800 --> 00:12:24,079
asynchronous procedures it would just

309
00:12:22,880 --> 00:12:26,320
they just wouldn't fit on the slide

310
00:12:24,079 --> 00:12:29,599
obviously uh

311
00:12:26,320 --> 00:12:31,680
so what we do here is we just hard code

312
00:12:29,600 --> 00:12:34,000
the location and the asd for each of the

313
00:12:31,680 --> 00:12:37,359
nodes that we're translating

314
00:12:34,000 --> 00:12:40,480
and that's what you see there so we take

315
00:12:37,360 --> 00:12:41,680
the first child note of our body and we

316
00:12:40,480 --> 00:12:43,120
assign it to the name

317
00:12:41,680 --> 00:12:44,800
variable which is the name of our

318
00:12:43,120 --> 00:12:48,639
procedure

319
00:12:44,800 --> 00:12:49,760
and then we take the return type which

320
00:12:48,639 --> 00:12:52,320
is in the third

321
00:12:49,760 --> 00:12:53,040
child and then the first gives us the

322
00:12:52,320 --> 00:12:56,000
actual

323
00:12:53,040 --> 00:12:58,160
return type and the awaited function

324
00:12:56,000 --> 00:13:00,079
which just grabs it from the body

325
00:12:58,160 --> 00:13:01,199
and assumes that there is just one so

326
00:13:00,079 --> 00:13:02,638
obviously this would break pretty

327
00:13:01,200 --> 00:13:04,720
quickly

328
00:13:02,639 --> 00:13:06,560
and then we use this nice feature in

329
00:13:04,720 --> 00:13:09,200
them which allows us to

330
00:13:06,560 --> 00:13:10,880
basically quote what we want to output

331
00:13:09,200 --> 00:13:15,279
in our macro

332
00:13:10,880 --> 00:13:18,639
we use the backticks to fill in the

333
00:13:15,279 --> 00:13:18,639
asd nodes that we want

334
00:13:18,720 --> 00:13:22,480
and basically that will be the result

335
00:13:20,480 --> 00:13:25,519
and then we display

336
00:13:22,480 --> 00:13:28,079
the result of our macro

337
00:13:25,519 --> 00:13:29,120
the ast nodes that we are returning in

338
00:13:28,079 --> 00:13:32,239
the form of

339
00:13:29,120 --> 00:13:35,440
nim code

340
00:13:32,240 --> 00:13:37,920
and again you can oh it's not up yet

341
00:13:35,440 --> 00:13:38,880
and again you can use that link at the

342
00:13:37,920 --> 00:13:40,880
bottom there

343
00:13:38,880 --> 00:13:43,279
to play around with this and if we run

344
00:13:40,880 --> 00:13:46,639
this code we will get

345
00:13:43,279 --> 00:13:49,839
that displayed in our console which is

346
00:13:46,639 --> 00:13:49,839
the result of our macro

347
00:13:52,639 --> 00:13:55,839
so that concludes the meta programming

348
00:13:55,120 --> 00:13:57,360
um

349
00:13:55,839 --> 00:13:59,440
hopefully that gives you a bit of an

350
00:13:57,360 --> 00:14:00,240
idea of how it works and maybe inspires

351
00:13:59,440 --> 00:14:03,120
you to take a look

352
00:14:00,240 --> 00:14:04,399
at it in more detail so let's just

353
00:14:03,120 --> 00:14:05,519
quickly run through some of the other

354
00:14:04,399 --> 00:14:08,639
components so

355
00:14:05,519 --> 00:14:10,000
we have the selectors module which

356
00:14:08,639 --> 00:14:12,720
it's basically in the standard library

357
00:14:10,000 --> 00:14:12,720
and it implements

358
00:14:13,680 --> 00:14:17,680
a readiness based i o api it basically

359
00:14:16,800 --> 00:14:20,719
wraps

360
00:14:17,680 --> 00:14:21,680
e paul kq and things like that and gives

361
00:14:20,720 --> 00:14:25,120
it in a nice

362
00:14:21,680 --> 00:14:27,680
api it's dependency free it's

363
00:14:25,120 --> 00:14:29,199
high performance and yeah it's extremely

364
00:14:27,680 --> 00:14:31,120
portable because it supports basically

365
00:14:29,199 --> 00:14:33,120
everything

366
00:14:31,120 --> 00:14:35,360
we also have the async dispatcher which

367
00:14:33,120 --> 00:14:37,839
is built on top of selectors

368
00:14:35,360 --> 00:14:39,040
and it implements a proactor api so

369
00:14:37,839 --> 00:14:41,279
instead of asking

370
00:14:39,040 --> 00:14:43,040
the system hey i want to read from the

371
00:14:41,279 --> 00:14:44,079
socket can i read from the socket you

372
00:14:43,040 --> 00:14:47,040
say

373
00:14:44,079 --> 00:14:47,760
i want to read 100 bytes of data from

374
00:14:47,040 --> 00:14:49,680
the socket

375
00:14:47,760 --> 00:14:51,120
and then it it lets you know when that

376
00:14:49,680 --> 00:14:52,638
is ready

377
00:14:51,120 --> 00:14:55,040
and this is actually how it works on

378
00:14:52,639 --> 00:14:56,880
windows with i o completion ports

379
00:14:55,040 --> 00:14:59,839
so this module also implements i o

380
00:14:56,880 --> 00:15:01,680
completion ports on windows

381
00:14:59,839 --> 00:15:03,120
and provides like a layer on top of the

382
00:15:01,680 --> 00:15:06,000
selector's module to provide the

383
00:15:03,120 --> 00:15:06,000
proactor api

384
00:15:06,240 --> 00:15:11,199
okay so really quickly the current

385
00:15:08,959 --> 00:15:12,719
status of names async

386
00:15:11,199 --> 00:15:15,920
it's used in production this is the nim

387
00:15:12,720 --> 00:15:19,199
forum it runs on it

388
00:15:15,920 --> 00:15:21,040
we also have this http server which gets

389
00:15:19,199 --> 00:15:21,760
quite good numbers on the tech and power

390
00:15:21,040 --> 00:15:24,319
benchmarks

391
00:15:21,760 --> 00:15:26,319
it's up there with rust it's called http

392
00:15:24,320 --> 00:15:29,199
beast if you want to take a look

393
00:15:26,320 --> 00:15:30,959
and the future of async you know

394
00:15:29,199 --> 00:15:33,920
borrowing some ideas from rust

395
00:15:30,959 --> 00:15:35,599
maybe using zero cost abstractions by

396
00:15:33,920 --> 00:15:36,719
using polling features

397
00:15:35,600 --> 00:15:39,759
better integration with newest

398
00:15:36,720 --> 00:15:42,800
parallelism we don't have any way to

399
00:15:39,759 --> 00:15:47,440
use spawn and a weight spawn currently

400
00:15:42,800 --> 00:15:47,439
and better stack traces as well so

401
00:15:48,639 --> 00:15:54,399
best way to learn grab my book

402
00:15:52,480 --> 00:15:55,759
and that's it there's some more links

403
00:15:54,399 --> 00:15:56,410
and yeah happy to ask

404
00:15:55,759 --> 00:16:04,950
our new questions

405
00:15:56,410 --> 00:16:04,949
[Applause]

406
00:16:19,440 --> 00:16:22,000
okay good

407
00:16:24,720 --> 00:16:32,880
um that is a good question uh well

408
00:16:29,600 --> 00:16:34,639
i think that would have ended up being

409
00:16:32,880 --> 00:16:36,160
a lot more complex in a language like

410
00:16:34,639 --> 00:16:37,519
them which is supposed to be a systems

411
00:16:36,160 --> 00:16:40,000
programming language

412
00:16:37,519 --> 00:16:41,680
where if you have green threads i would

413
00:16:40,000 --> 00:16:44,000
assume you would also need a runtime

414
00:16:41,680 --> 00:16:45,680
to use them whereas with this you can

415
00:16:44,000 --> 00:16:47,279
kind of choose not to use it if you

416
00:16:45,680 --> 00:16:51,839
don't really want to

417
00:16:47,279 --> 00:16:51,839
that's the main reason

418
00:17:01,519 --> 00:17:05,839
or would you use a callback

419
00:17:14,959 --> 00:17:18,079
so i'm not entirely sure what you mean

420
00:17:17,280 --> 00:17:19,599
like

421
00:17:18,079 --> 00:17:21,039
if i have a callback i don't know what

422
00:17:19,599 --> 00:17:22,879
the callback can be called any number of

423
00:17:21,039 --> 00:17:26,480
times

424
00:17:22,880 --> 00:17:26,480
should i keep that code

425
00:17:27,359 --> 00:17:30,479
well the way it currently works in them

426
00:17:29,760 --> 00:17:33,280
is that

427
00:17:30,480 --> 00:17:34,480
each future basically can emulate a

428
00:17:33,280 --> 00:17:36,080
callback

429
00:17:34,480 --> 00:17:37,679
so because you're you're returning a

430
00:17:36,080 --> 00:17:38,960
future from every synchronous procedure

431
00:17:37,679 --> 00:17:41,760
and you can say

432
00:17:38,960 --> 00:17:42,559
okay assign a call back to this future

433
00:17:41,760 --> 00:17:46,080
and call it

434
00:17:42,559 --> 00:17:47,678
when um whenever it's ready

435
00:17:46,080 --> 00:17:49,199
so that's how you do it every time you

436
00:17:47,679 --> 00:17:49,840
read from the socket you would get a new

437
00:17:49,200 --> 00:17:51,360
feature

438
00:17:49,840 --> 00:17:55,439
and you would assign the callback to it

439
00:17:51,360 --> 00:17:55,439
repeatedly does that make sense

440
00:17:56,720 --> 00:18:01,760
okay all right we're done

441
00:18:00,160 --> 00:18:04,400
cool thank you so much for these

442
00:18:01,760 --> 00:18:04,400
brilliant talks

443
00:18:11,200 --> 00:18:21,039
if you leave the room look around you to

444
00:18:12,799 --> 00:18:21,039
see if there's any loser

