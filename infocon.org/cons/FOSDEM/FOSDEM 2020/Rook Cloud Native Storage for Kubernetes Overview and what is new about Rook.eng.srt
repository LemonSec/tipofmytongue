1
00:00:05,839 --> 00:00:09,440
all right then

2
00:00:06,720 --> 00:00:09,920
uh welcome to our first group talk of

3
00:00:09,440 --> 00:00:12,639
the day

4
00:00:09,920 --> 00:00:17,920
uh please welcome with me alex on rook

5
00:00:12,639 --> 00:00:17,919
intro and what's new

6
00:00:19,279 --> 00:00:26,800
thank you um well first of all

7
00:00:23,680 --> 00:00:28,320
if technology works as we want so um i'm

8
00:00:26,800 --> 00:00:30,480
alexander

9
00:00:28,320 --> 00:00:32,000
i'm a devops engineer at claudical i'm

10
00:00:30,480 --> 00:00:33,920
one of the rook maintainers

11
00:00:32,000 --> 00:00:35,920
and well certified kubernetes

12
00:00:33,920 --> 00:00:39,440
administrator

13
00:00:35,920 --> 00:00:40,640
um so before i'm just jumping into the

14
00:00:39,440 --> 00:00:43,280
topics quick

15
00:00:40,640 --> 00:00:44,079
point that you see on the rough outline

16
00:00:43,280 --> 00:00:46,800
on

17
00:00:44,079 --> 00:00:48,079
what i'm going to talk about first part

18
00:00:46,800 --> 00:00:51,199
kubernetes and storage

19
00:00:48,079 --> 00:00:54,000
just a quick point on how is it looking

20
00:00:51,199 --> 00:00:54,960
in kubernetes what's the situation what

21
00:00:54,000 --> 00:00:58,480
is rook

22
00:00:54,960 --> 00:01:00,559
did you well get kind of a bit of uh

23
00:00:58,480 --> 00:01:01,519
an overview on what even what is rook

24
00:01:00,559 --> 00:01:04,000
even

25
00:01:01,520 --> 00:01:05,840
um architecture and then we're going to

26
00:01:04,000 --> 00:01:09,119
dive into the new features

27
00:01:05,840 --> 00:01:12,320
also in the road map for the future and

28
00:01:09,119 --> 00:01:14,799
just as a well last point to throw in

29
00:01:12,320 --> 00:01:15,758
we are looking to graduate the project

30
00:01:14,799 --> 00:01:18,640
soon

31
00:01:15,759 --> 00:01:19,280
so um i'm going to talk about that in a

32
00:01:18,640 --> 00:01:22,640
bit

33
00:01:19,280 --> 00:01:26,479
as well so kubernetes and storage

34
00:01:22,640 --> 00:01:29,439
um in kubernetes if you want storage

35
00:01:26,479 --> 00:01:30,640
uh you're well basically bound to use uh

36
00:01:29,439 --> 00:01:34,320
external storage

37
00:01:30,640 --> 00:01:35,680
meaning well taking on premise with bare

38
00:01:34,320 --> 00:01:37,919
metal as an example

39
00:01:35,680 --> 00:01:40,880
you need to have some sort of storage

40
00:01:37,920 --> 00:01:40,880
already existing

41
00:01:41,040 --> 00:01:46,320
not to name any names but well

42
00:01:44,640 --> 00:01:48,960
there's bigger appliances for storage

43
00:01:46,320 --> 00:01:48,960
you might have

44
00:01:49,840 --> 00:01:54,880
well if you're just on premise that

45
00:01:52,479 --> 00:01:56,960
might be already enough for you

46
00:01:54,880 --> 00:01:59,199
but in general with the storage share

47
00:01:56,960 --> 00:02:01,439
it's not too portable

48
00:01:59,200 --> 00:02:02,640
um meaning that if you go from

49
00:02:01,439 --> 00:02:06,000
on-premise and

50
00:02:02,640 --> 00:02:10,000
you're on the um the uh

51
00:02:06,000 --> 00:02:13,599
multi-cloud hybrid cloud kind of trip

52
00:02:10,000 --> 00:02:16,000
um well your appliance in

53
00:02:13,599 --> 00:02:17,119
in the data center might not be

54
00:02:16,000 --> 00:02:21,120
sufficient for

55
00:02:17,120 --> 00:02:24,160
well your aws or whatever cloud scenario

56
00:02:21,120 --> 00:02:26,319
so um

57
00:02:24,160 --> 00:02:28,480
well as we have it if you haven't if

58
00:02:26,319 --> 00:02:30,079
your appliances in the basement and not

59
00:02:28,480 --> 00:02:33,119
in the aws cloud or

60
00:02:30,080 --> 00:02:34,319
gcp wherever well you need to have

61
00:02:33,120 --> 00:02:37,040
access to the services

62
00:02:34,319 --> 00:02:38,399
um that's not too much of a challenge if

63
00:02:37,040 --> 00:02:41,679
you're just on premise but

64
00:02:38,400 --> 00:02:43,840
well um but it's

65
00:02:41,680 --> 00:02:44,800
it's in general just like a it's not too

66
00:02:43,840 --> 00:02:46,640
portable

67
00:02:44,800 --> 00:02:48,000
unless you are in the same environment

68
00:02:46,640 --> 00:02:51,040
all the time

69
00:02:48,000 --> 00:02:54,160
um for if you're more

70
00:02:51,040 --> 00:02:55,120
less in a cloud environment the problem

71
00:02:54,160 --> 00:02:59,040
with arises

72
00:02:55,120 --> 00:03:02,239
is um well you're kind of locked in

73
00:02:59,040 --> 00:03:05,359
because if you're with aws well

74
00:03:02,239 --> 00:03:05,760
you can use their ebs and their well

75
00:03:05,360 --> 00:03:08,319
their

76
00:03:05,760 --> 00:03:10,799
file system and well s3 and so on at

77
00:03:08,319 --> 00:03:13,359
least s3 is a bit

78
00:03:10,800 --> 00:03:14,959
more open if you will so so that's not

79
00:03:13,360 --> 00:03:17,200
too much of a problem but normal

80
00:03:14,959 --> 00:03:18,239
well classic storage like block and file

81
00:03:17,200 --> 00:03:21,518
system storage

82
00:03:18,239 --> 00:03:24,159
is kind of a burden to have

83
00:03:21,519 --> 00:03:25,519
well switching from environment even

84
00:03:24,159 --> 00:03:27,679
though

85
00:03:25,519 --> 00:03:29,040
as we have in kubernetes storage classes

86
00:03:27,680 --> 00:03:33,840
and such which kind of

87
00:03:29,040 --> 00:03:33,840
are well a bit of an abstraction there

88
00:03:33,920 --> 00:03:37,200
well it's still a bit of a challenge

89
00:03:35,519 --> 00:03:41,599
because if you have a bug

90
00:03:37,200 --> 00:03:44,399
on well on let's say your local

91
00:03:41,599 --> 00:03:46,319
appliance storage and you move it to aws

92
00:03:44,400 --> 00:03:48,640
and you don't have to back there

93
00:03:46,319 --> 00:03:50,480
well there's certain scenarios where

94
00:03:48,640 --> 00:03:52,079
it's simply a bit

95
00:03:50,480 --> 00:03:54,959
more important to have the same storage

96
00:03:52,080 --> 00:03:58,480
from your on-premise or whatever to

97
00:03:54,959 --> 00:04:01,280
full production so now

98
00:03:58,480 --> 00:04:02,640
and another point um well if you're a

99
00:04:01,280 --> 00:04:04,239
big company you probably don't have to

100
00:04:02,640 --> 00:04:07,279
too much as a problem

101
00:04:04,239 --> 00:04:08,239
um you need to have someone that manages

102
00:04:07,280 --> 00:04:11,519
to search

103
00:04:08,239 --> 00:04:13,360
so if you just put some appliance in and

104
00:04:11,519 --> 00:04:15,280
while it runs then

105
00:04:13,360 --> 00:04:17,120
well you might not need to manage it too

106
00:04:15,280 --> 00:04:18,720
much but

107
00:04:17,120 --> 00:04:20,399
still at least it feels a bit weird to

108
00:04:18,720 --> 00:04:22,000
just put in some compliance and yeah it

109
00:04:20,399 --> 00:04:25,440
runs it runs and

110
00:04:22,000 --> 00:04:27,280
it runs till it doesn't run yeah well um

111
00:04:25,440 --> 00:04:29,680
so kind of the question there who's

112
00:04:27,280 --> 00:04:33,840
managing the surge

113
00:04:29,680 --> 00:04:33,840
so that's where we come to what is rook

114
00:04:35,280 --> 00:04:40,159
rook is well a storage operator

115
00:04:41,280 --> 00:04:45,440
the part of the operator part i'm going

116
00:04:43,759 --> 00:04:46,479
to go into that concept a bit further

117
00:04:45,440 --> 00:04:48,479
later on

118
00:04:46,479 --> 00:04:49,520
the part of operator is simply as it

119
00:04:48,479 --> 00:04:52,800
kind of implies

120
00:04:49,520 --> 00:04:55,599
well i'm for example an operator to well

121
00:04:52,800 --> 00:04:56,880
operate well some some crane or

122
00:04:55,600 --> 00:04:59,919
something

123
00:04:56,880 --> 00:05:03,520
it's kind of the same if you think uh

124
00:04:59,919 --> 00:05:06,719
for rook tear it's well operating uh

125
00:05:03,520 --> 00:05:08,240
things like saf hfs and other storage

126
00:05:06,720 --> 00:05:10,000
systems storage software

127
00:05:08,240 --> 00:05:12,160
back ends provide us how you want name

128
00:05:10,000 --> 00:05:12,160
it

129
00:05:12,240 --> 00:05:16,880
and the point with root there is that it

130
00:05:14,400 --> 00:05:19,599
well you have kubernetes oh well fine

131
00:05:16,880 --> 00:05:20,240
put rook on at unfcef for example or hfa

132
00:05:19,600 --> 00:05:22,880
so

133
00:05:20,240 --> 00:05:23,280
it's generally not just about safter

134
00:05:22,880 --> 00:05:26,560
it's

135
00:05:23,280 --> 00:05:29,840
general point of those well

136
00:05:26,560 --> 00:05:31,120
complex storage systems um

137
00:05:29,840 --> 00:05:33,280
making them easy to run in your

138
00:05:31,120 --> 00:05:36,800
kubernetes cluster so

139
00:05:33,280 --> 00:05:38,159
well in containers and yet and the part

140
00:05:36,800 --> 00:05:39,840
of where

141
00:05:38,160 --> 00:05:41,759
well where the rook part with the

142
00:05:39,840 --> 00:05:44,960
operations is coming in is

143
00:05:41,759 --> 00:05:47,520
um it's it's trying to have it as

144
00:05:44,960 --> 00:05:49,440
abstract as possible but with also a

145
00:05:47,520 --> 00:05:51,198
good amount of customizability either

146
00:05:49,440 --> 00:05:55,440
way for the users

147
00:05:51,199 --> 00:05:57,280
where rook takes care of deploying

148
00:05:55,440 --> 00:05:59,680
managing installation configuration all

149
00:05:57,280 --> 00:06:02,719
those hundred steps

150
00:05:59,680 --> 00:06:05,520
and well in the end you create

151
00:06:02,720 --> 00:06:06,800
one two more objects to talk about the

152
00:06:05,520 --> 00:06:10,479
kubernetes part there

153
00:06:06,800 --> 00:06:11,280
and bam ceph cluster in your kubernetes

154
00:06:10,479 --> 00:06:13,840
cluster

155
00:06:11,280 --> 00:06:15,440
ready to be used by the applications

156
00:06:13,840 --> 00:06:16,960
well if you want to bring that to

157
00:06:15,440 --> 00:06:18,000
production it's a bit more to think

158
00:06:16,960 --> 00:06:20,318
about like

159
00:06:18,000 --> 00:06:22,319
what kind of distance on but well kind

160
00:06:20,319 --> 00:06:23,280
of if you think about more on a lower

161
00:06:22,319 --> 00:06:27,199
level

162
00:06:23,280 --> 00:06:29,520
still remains that rook will take care

163
00:06:27,199 --> 00:06:30,400
as good as possible about those points

164
00:06:29,520 --> 00:06:34,400
for storage

165
00:06:30,400 --> 00:06:36,479
software um but well let's kind of step

166
00:06:34,400 --> 00:06:39,440
a bit back there

167
00:06:36,479 --> 00:06:40,240
rook it's open source apache 2.0 license

168
00:06:39,440 --> 00:06:42,639
we are

169
00:06:40,240 --> 00:06:44,240
a project of the cncf we currently

170
00:06:42,639 --> 00:06:46,960
that's also later on i said

171
00:06:44,240 --> 00:06:47,680
we're looking to graduate the project as

172
00:06:46,960 --> 00:06:50,799
um

173
00:06:47,680 --> 00:06:53,039
as other projects like kubernetes

174
00:06:50,800 --> 00:06:55,520
prometheus as well have already done

175
00:06:53,039 --> 00:07:00,000
great shooting from cncf so

176
00:06:55,520 --> 00:07:00,000
we're trying to do that as well um

177
00:07:00,240 --> 00:07:06,400
as we had with the operator part

178
00:07:03,680 --> 00:07:07,520
um to make it easily possible in

179
00:07:06,400 --> 00:07:09,679
kubernetes

180
00:07:07,520 --> 00:07:11,359
we can introduce so-called custom

181
00:07:09,680 --> 00:07:14,479
resource definitions

182
00:07:11,360 --> 00:07:16,160
um those are basically well a

183
00:07:14,479 --> 00:07:18,159
possibility for users

184
00:07:16,160 --> 00:07:21,440
especially more well administrators of

185
00:07:18,160 --> 00:07:24,880
the cluster to extend the kubernetes api

186
00:07:21,440 --> 00:07:26,719
so well for rook looking at saf there we

187
00:07:24,880 --> 00:07:27,759
would for example have a ceph cluster

188
00:07:26,720 --> 00:07:31,759
object

189
00:07:27,759 --> 00:07:33,440
for well other purposes like well

190
00:07:31,759 --> 00:07:34,880
my skill for example you might want to

191
00:07:33,440 --> 00:07:36,479
have like a my skill database or

192
00:07:34,880 --> 00:07:39,409
something object which

193
00:07:36,479 --> 00:07:40,880
um especially looking at

194
00:07:39,410 --> 00:07:44,000
[Music]

195
00:07:40,880 --> 00:07:47,919
well user experience for the developers

196
00:07:44,000 --> 00:07:50,639
if they need a database well go ahead

197
00:07:47,919 --> 00:07:53,280
create your mysql database object and

198
00:07:50,639 --> 00:07:55,120
some operator in the end will take care

199
00:07:53,280 --> 00:07:56,960
of creating all the things needed for

200
00:07:55,120 --> 00:07:57,599
the database it's the same concept there

201
00:07:56,960 --> 00:07:59,520
for rook

202
00:07:57,599 --> 00:08:00,878
the admin hopefully not just all the

203
00:07:59,520 --> 00:08:04,400
users on the cluster

204
00:08:00,879 --> 00:08:07,039
um creates a ceph cluster object

205
00:08:04,400 --> 00:08:08,000
and based on the specifications in that

206
00:08:07,039 --> 00:08:10,960
object

207
00:08:08,000 --> 00:08:12,000
rook will take care of um well for

208
00:08:10,960 --> 00:08:13,840
example for sev

209
00:08:12,000 --> 00:08:16,319
to create osds from the disks in the

210
00:08:13,840 --> 00:08:20,239
servers we'll discover them

211
00:08:16,319 --> 00:08:21,840
and uh well create the um

212
00:08:20,240 --> 00:08:24,319
create the command structures and all

213
00:08:21,840 --> 00:08:26,159
needed uh to for example then tell seth

214
00:08:24,319 --> 00:08:29,919
volume to use those in those disks

215
00:08:26,160 --> 00:08:32,399
based on these specifications um

216
00:08:29,919 --> 00:08:34,000
yeah i already mentioned that it's not

217
00:08:32,399 --> 00:08:37,279
just about ceph

218
00:08:34,000 --> 00:08:42,240
it's also about r storage which well

219
00:08:37,279 --> 00:08:45,519
is yeah well complicated to run

220
00:08:42,240 --> 00:08:48,640
um saf cockroaches be at your fest

221
00:08:45,519 --> 00:08:50,880
uh cassandra nfs yuga by db

222
00:08:48,640 --> 00:08:52,240
um kind of shout out to the yugo by tb

223
00:08:50,880 --> 00:08:56,000
people they just

224
00:08:52,240 --> 00:08:59,200
joined with like version 1.1

225
00:08:56,000 --> 00:09:02,399
um great people and

226
00:08:59,200 --> 00:09:03,279
yeah the idea is to grow that even

227
00:09:02,399 --> 00:09:04,720
further

228
00:09:03,279 --> 00:09:06,399
so it's not just as like seth or

229
00:09:04,720 --> 00:09:08,720
something the idea is that

230
00:09:06,399 --> 00:09:10,560
uh in a broader sense well i have my own

231
00:09:08,720 --> 00:09:13,839
premise for example i create myself

232
00:09:10,560 --> 00:09:15,199
cluster using a rook cef operator and oh

233
00:09:13,839 --> 00:09:18,480
well i need a

234
00:09:15,200 --> 00:09:20,480
i need a well yoga by db and i create it

235
00:09:18,480 --> 00:09:23,680
and just for example tell it to use

236
00:09:20,480 --> 00:09:25,360
as normal kubernetes flow to claim

237
00:09:23,680 --> 00:09:27,519
persistent volume claims as a keyword

238
00:09:25,360 --> 00:09:28,720
there um the storage for example from

239
00:09:27,519 --> 00:09:31,920
the saf cluster because

240
00:09:28,720 --> 00:09:34,959
why not um

241
00:09:31,920 --> 00:09:37,199
so yeah going to the architecture

242
00:09:34,959 --> 00:09:38,479
there's in itself three layers you have

243
00:09:37,200 --> 00:09:41,120
the operator layer

244
00:09:38,480 --> 00:09:42,399
it's well managing the staff it's

245
00:09:41,120 --> 00:09:44,080
configuring it

246
00:09:42,399 --> 00:09:45,600
but the main point to mention it's not

247
00:09:44,080 --> 00:09:48,560
on the data path

248
00:09:45,600 --> 00:09:50,240
so there's no well my one operator part

249
00:09:48,560 --> 00:09:52,640
right now is down so oh

250
00:09:50,240 --> 00:09:56,000
no everything's halting i always stopped

251
00:09:52,640 --> 00:09:56,000
and that's not gonna happen

252
00:09:56,800 --> 00:09:59,839
for storage provisioning thankfully

253
00:09:59,200 --> 00:10:02,880
through the

254
00:09:59,839 --> 00:10:06,160
csi the container storage interface

255
00:10:02,880 --> 00:10:09,680
it's well it's amazing as it's

256
00:10:06,160 --> 00:10:11,519
not just um well for there was something

257
00:10:09,680 --> 00:10:15,199
previously

258
00:10:11,519 --> 00:10:17,360
don't remember like don't um

259
00:10:15,200 --> 00:10:18,320
well it's not too important it's flex

260
00:10:17,360 --> 00:10:20,079
volume

261
00:10:18,320 --> 00:10:21,920
point is with csi it's more like a

262
00:10:20,079 --> 00:10:23,839
common solution for general

263
00:10:21,920 --> 00:10:25,839
storage it has container storage

264
00:10:23,839 --> 00:10:28,000
interface as a name but

265
00:10:25,839 --> 00:10:29,519
it's general interface to more or less

266
00:10:28,000 --> 00:10:31,760
be able to say hey

267
00:10:29,519 --> 00:10:33,680
give me 50 gigs of storage and then on a

268
00:10:31,760 --> 00:10:34,880
node to say hey please mount the storage

269
00:10:33,680 --> 00:10:37,439
for example

270
00:10:34,880 --> 00:10:40,399
uh and that's great as previously we had

271
00:10:37,440 --> 00:10:42,880
written our own flex volume drive line

272
00:10:40,399 --> 00:10:43,760
well it's a pain to maintain such a

273
00:10:42,880 --> 00:10:47,200
driver

274
00:10:43,760 --> 00:10:47,760
so but that's also for it's not just for

275
00:10:47,200 --> 00:10:49,760
the sap

276
00:10:47,760 --> 00:10:51,120
part it's also for hfs for example as

277
00:10:49,760 --> 00:10:54,319
they're also providing

278
00:10:51,120 --> 00:10:55,440
block search and file system search rook

279
00:10:54,320 --> 00:10:57,839
takes care of

280
00:10:55,440 --> 00:10:59,040
setting up the csi driver as good as it

281
00:10:57,839 --> 00:11:01,279
can like there's

282
00:10:59,040 --> 00:11:03,199
definitely some points where well the

283
00:11:01,279 --> 00:11:04,160
admin need to step in to create storage

284
00:11:03,200 --> 00:11:07,680
classes to

285
00:11:04,160 --> 00:11:08,319
maybe well have certain changes certain

286
00:11:07,680 --> 00:11:11,680
security

287
00:11:08,320 --> 00:11:12,560
uh um levels specified in the storage

288
00:11:11,680 --> 00:11:14,399
class or something

289
00:11:12,560 --> 00:11:15,599
but main point is that rook will

290
00:11:14,399 --> 00:11:17,839
normally

291
00:11:15,600 --> 00:11:18,640
uh get you for example edge of cluster

292
00:11:17,839 --> 00:11:20,160
in a state where

293
00:11:18,640 --> 00:11:22,800
you just need to create a storage class

294
00:11:20,160 --> 00:11:25,120
so yeah

295
00:11:22,800 --> 00:11:26,719
so um as previously said for the

296
00:11:25,120 --> 00:11:27,600
operator the operator is not on data

297
00:11:26,720 --> 00:11:29,600
path

298
00:11:27,600 --> 00:11:30,880
so no need to worry about operator

299
00:11:29,600 --> 00:11:32,399
crashing or anything or being

300
00:11:30,880 --> 00:11:36,000
incompatible

301
00:11:32,399 --> 00:11:36,880
um it's just ceph or hfs or cassandra

302
00:11:36,000 --> 00:11:41,040
and so on

303
00:11:36,880 --> 00:11:44,640
there's well yeah um

304
00:11:41,040 --> 00:11:48,560
yeah um i mentioned

305
00:11:44,640 --> 00:11:51,040
uh previously like rook cev operator

306
00:11:48,560 --> 00:11:52,319
and there's even rook hfs operator and

307
00:11:51,040 --> 00:11:55,439
so on the point there is

308
00:11:52,320 --> 00:11:57,200
that it's separate operator it it's not

309
00:11:55,440 --> 00:11:59,760
like yeah i want to use tef

310
00:11:57,200 --> 00:12:02,560
but because i install rook i have the

311
00:11:59,760 --> 00:12:04,000
rook cephalopod hfs and then and so on

312
00:12:02,560 --> 00:12:05,839
operator that's not like it that's the

313
00:12:04,000 --> 00:12:07,600
reason why it's split like that

314
00:12:05,839 --> 00:12:10,399
if you want sev well go for this f

315
00:12:07,600 --> 00:12:12,000
operator if you want let's say

316
00:12:10,399 --> 00:12:13,440
cassandra as an example you use the

317
00:12:12,000 --> 00:12:14,720
cassandra operator so

318
00:12:13,440 --> 00:12:18,880
you have the freedom there to kind of

319
00:12:14,720 --> 00:12:18,880
say what you need and what you want

320
00:12:19,440 --> 00:12:22,639
so yeah well as that we have the rook

321
00:12:21,440 --> 00:12:24,880
operators

322
00:12:22,639 --> 00:12:27,279
that do the management configuration

323
00:12:24,880 --> 00:12:30,959
upgrades and stuff of the software

324
00:12:27,279 --> 00:12:30,959
um from

325
00:12:31,040 --> 00:12:34,959
from as previous as you said with like

326
00:12:33,360 --> 00:12:38,320
the operators

327
00:12:34,959 --> 00:12:39,359
and it's basically the same the operator

328
00:12:38,320 --> 00:12:41,600
is simply

329
00:12:39,360 --> 00:12:43,360
well automating certain actions which

330
00:12:41,600 --> 00:12:45,920
normally a human would need to do or

331
00:12:43,360 --> 00:12:46,399
well maybe even another automation tool

332
00:12:45,920 --> 00:12:49,839
um

333
00:12:46,399 --> 00:12:53,200
like well ansible or something so um

334
00:12:49,839 --> 00:12:54,399
yeah um coming back to the custom

335
00:12:53,200 --> 00:12:56,959
objects

336
00:12:54,399 --> 00:12:58,959
um if you create a sev cluster and say

337
00:12:56,959 --> 00:13:02,079
hey i want to use for example well my

338
00:12:58,959 --> 00:13:04,638
sdb drive or something or maybe my well

339
00:13:02,079 --> 00:13:06,079
you add to add a new disk in that

340
00:13:04,639 --> 00:13:08,639
definition and say well

341
00:13:06,079 --> 00:13:09,760
use my sdc disk as well the rook

342
00:13:08,639 --> 00:13:12,880
operator

343
00:13:09,760 --> 00:13:15,040
will take care based on that and

344
00:13:12,880 --> 00:13:16,720
well we'll see okay the state changed

345
00:13:15,040 --> 00:13:18,560
and act on that will trigger

346
00:13:16,720 --> 00:13:20,079
all the things needed all the

347
00:13:18,560 --> 00:13:21,199
preparation jobs for example for the

348
00:13:20,079 --> 00:13:24,160
osds

349
00:13:21,200 --> 00:13:25,600
and you will hopefully in a few well let

350
00:13:24,160 --> 00:13:27,680
it be a minute

351
00:13:25,600 --> 00:13:29,279
with some sometimes lvm and sound takes

352
00:13:27,680 --> 00:13:33,279
a bit of time

353
00:13:29,279 --> 00:13:35,680
uh at least for the volume part there um

354
00:13:33,279 --> 00:13:37,120
but yeah so in the end operator watching

355
00:13:35,680 --> 00:13:38,638
over everything seeing every state

356
00:13:37,120 --> 00:13:41,279
changed i need to do something

357
00:13:38,639 --> 00:13:42,399
and even kind of like uh health checking

358
00:13:41,279 --> 00:13:44,160
to a certain point

359
00:13:42,399 --> 00:13:46,639
where it's like oh we can't upgrade now

360
00:13:44,160 --> 00:13:49,279
because the status of the

361
00:13:46,639 --> 00:13:51,040
cluster right now says we have data uh

362
00:13:49,279 --> 00:13:52,639
well osd's down or something like that

363
00:13:51,040 --> 00:13:54,639
too many or so so

364
00:13:52,639 --> 00:13:57,120
um there's parts where the operator kind

365
00:13:54,639 --> 00:13:57,839
of tries to throw in a good amount of

366
00:13:57,120 --> 00:13:59,839
knowledge

367
00:13:57,839 --> 00:14:01,199
from a people that run sev cluster or

368
00:13:59,839 --> 00:14:02,480
even well more or less also the

369
00:14:01,199 --> 00:14:06,800
developer

370
00:14:02,480 --> 00:14:10,000
of sev where for example there's like a

371
00:14:06,800 --> 00:14:11,599
um what is called self safe to stop i

372
00:14:10,000 --> 00:14:12,240
think and safe to remove command and

373
00:14:11,600 --> 00:14:14,079
such

374
00:14:12,240 --> 00:14:15,760
and that's parts where rook also tries

375
00:14:14,079 --> 00:14:18,239
to um where we're

376
00:14:15,760 --> 00:14:19,120
more miles moving there and to use the

377
00:14:18,240 --> 00:14:23,610
seven native

378
00:14:19,120 --> 00:14:25,519
parts to um well

379
00:14:23,610 --> 00:14:27,120
[Music]

380
00:14:25,519 --> 00:14:29,279
have the cluster operate as safe as

381
00:14:27,120 --> 00:14:33,440
possibly

382
00:14:29,279 --> 00:14:36,160
um so from the root part

383
00:14:33,440 --> 00:14:38,079
um operator part again which simply is

384
00:14:36,160 --> 00:14:41,760
the kubernetes api there's not

385
00:14:38,079 --> 00:14:45,199
too much magic involved it's just normal

386
00:14:41,760 --> 00:14:48,959
power of kubernetes um

387
00:14:45,199 --> 00:14:51,120
nothing well too special there to say um

388
00:14:48,959 --> 00:14:53,119
i said it's managing upgrades and such

389
00:14:51,120 --> 00:14:55,440
it's trying to do them as

390
00:14:53,120 --> 00:14:56,320
already for like seven sounders well

391
00:14:55,440 --> 00:14:59,920
stateful

392
00:14:56,320 --> 00:14:59,920
if you want um there

393
00:15:00,000 --> 00:15:03,279
see um coming back to your custom resist

394
00:15:02,160 --> 00:15:05,439
definitions

395
00:15:03,279 --> 00:15:06,560
uh so we have those custom resource

396
00:15:05,440 --> 00:15:08,639
definitions

397
00:15:06,560 --> 00:15:10,319
and in those the admin specifies what

398
00:15:08,639 --> 00:15:12,560
they want they can

399
00:15:10,320 --> 00:15:13,360
you they can specify one device after

400
00:15:12,560 --> 00:15:15,920
another

401
00:15:13,360 --> 00:15:16,639
they can even if they're well in an aws

402
00:15:15,920 --> 00:15:18,719
environment or

403
00:15:16,639 --> 00:15:20,639
well in a cloud environment in general

404
00:15:18,720 --> 00:15:22,560
they can even specify that

405
00:15:20,639 --> 00:15:24,079
storage should be taken from like the

406
00:15:22,560 --> 00:15:24,719
cloud provider and such through again

407
00:15:24,079 --> 00:15:26,719
like

408
00:15:24,720 --> 00:15:28,480
standard kubernetes methods persistent

409
00:15:26,720 --> 00:15:31,519
volume claims and such

410
00:15:28,480 --> 00:15:35,279
and well just a normal

411
00:15:31,519 --> 00:15:36,959
way of kind of doing it and the object

412
00:15:35,279 --> 00:15:40,160
is basically in the end as kubernetes

413
00:15:36,959 --> 00:15:42,479
wants it it's the state as its desired

414
00:15:40,160 --> 00:15:43,279
so there's not it's the rook operator

415
00:15:42,480 --> 00:15:46,639
will try

416
00:15:43,279 --> 00:15:47,839
as long as possible uh to use the disk

417
00:15:46,639 --> 00:15:50,399
even if it doesn't exist

418
00:15:47,839 --> 00:15:52,839
or well it there's mechanisms in play to

419
00:15:50,399 --> 00:15:56,880
hopefully prevent that but just from a

420
00:15:52,839 --> 00:15:59,920
um just from a kubernetes standpoint

421
00:15:56,880 --> 00:16:02,560
if the object says hey use this disk

422
00:15:59,920 --> 00:16:04,560
it would technically well try forever

423
00:16:02,560 --> 00:16:04,800
because the user wants to decide state

424
00:16:04,560 --> 00:16:08,638
to

425
00:16:04,800 --> 00:16:12,560
use this disk so now

426
00:16:08,639 --> 00:16:15,839
so uh moving on to the new features

427
00:16:12,560 --> 00:16:19,599
you get a you got db joint in 1.1

428
00:16:15,839 --> 00:16:22,880
we already had rook release 1.2 but

429
00:16:19,600 --> 00:16:26,160
well yay new storage back end

430
00:16:22,880 --> 00:16:27,279
um same goes here we are a perfect

431
00:16:26,160 --> 00:16:30,319
example right now for the

432
00:16:27,279 --> 00:16:31,360
crd party custom resources we can define

433
00:16:30,320 --> 00:16:34,839
our own

434
00:16:31,360 --> 00:16:37,680
objects or even well own apis

435
00:16:34,839 --> 00:16:38,320
and the people that create those series

436
00:16:37,680 --> 00:16:41,120
can basically

437
00:16:38,320 --> 00:16:42,399
put in whatever they want and even have

438
00:16:41,120 --> 00:16:44,480
which is pretty powerful about

439
00:16:42,399 --> 00:16:46,720
kubernetes have validation and such in

440
00:16:44,480 --> 00:16:46,720
place

441
00:16:48,839 --> 00:16:56,399
hfs hfs has

442
00:16:52,240 --> 00:16:59,680
been able thanks to giovann issa

443
00:16:56,399 --> 00:17:05,199
i think i'm butchering the name mustafa

444
00:16:59,680 --> 00:17:07,280
um has implemented a multi-home network

445
00:17:05,199 --> 00:17:08,240
that's a big challenge a bit still in

446
00:17:07,280 --> 00:17:10,240
kubernetes

447
00:17:08,240 --> 00:17:11,679
i can tell you at least just from the

448
00:17:10,240 --> 00:17:14,880
general concept there

449
00:17:11,679 --> 00:17:15,439
for the well for the um for projects

450
00:17:14,880 --> 00:17:18,720
such as

451
00:17:15,439 --> 00:17:20,240
multis um if anyone has maybe heard

452
00:17:18,720 --> 00:17:23,280
about multis yet

453
00:17:20,240 --> 00:17:25,280
um the idea is simply to have again

454
00:17:23,280 --> 00:17:26,079
kubernetes native custom resources and

455
00:17:25,280 --> 00:17:29,678
such

456
00:17:26,079 --> 00:17:30,080
uh to be um to easily like be able to

457
00:17:29,679 --> 00:17:32,400
have

458
00:17:30,080 --> 00:17:33,600
multiple interfaces from the node but

459
00:17:32,400 --> 00:17:36,720
even virtual

460
00:17:33,600 --> 00:17:38,639
well overlay networks and such per

461
00:17:36,720 --> 00:17:40,480
application per pod running in your

462
00:17:38,640 --> 00:17:45,039
kubernetes cluster

463
00:17:40,480 --> 00:17:47,600
um he well he didn't just design it he

464
00:17:45,039 --> 00:17:49,039
even implemented it that's great that's

465
00:17:47,600 --> 00:17:53,678
cool to see

466
00:17:49,039 --> 00:17:56,400
um just kind of quick look here for um

467
00:17:53,679 --> 00:17:57,919
again part we just specify a new part of

468
00:17:56,400 --> 00:17:59,600
configuration

469
00:17:57,919 --> 00:18:02,080
in this case i think there's even not

470
00:17:59,600 --> 00:18:03,600
just support for multis but

471
00:18:02,080 --> 00:18:05,678
i can't get the name right now but

472
00:18:03,600 --> 00:18:07,600
indeed one of the other projects that's

473
00:18:05,679 --> 00:18:09,360
allowing custom networking stuff in

474
00:18:07,600 --> 00:18:12,399
kubernetes and easily

475
00:18:09,360 --> 00:18:13,039
um configure those networks to be used

476
00:18:12,400 --> 00:18:14,400
for these

477
00:18:13,039 --> 00:18:16,080
for this edge of this cluster in this

478
00:18:14,400 --> 00:18:19,120
case

479
00:18:16,080 --> 00:18:22,159
um for sev i think

480
00:18:19,120 --> 00:18:25,199
a lot of a lot of people including me

481
00:18:22,160 --> 00:18:26,840
um well have been kind of desperate for

482
00:18:25,200 --> 00:18:30,160
this feature

483
00:18:26,840 --> 00:18:33,600
um partitions

484
00:18:30,160 --> 00:18:36,720
finally at least to kind of uh

485
00:18:33,600 --> 00:18:37,600
bring up what my case is um maybe who

486
00:18:36,720 --> 00:18:40,640
knows hat's not

487
00:18:37,600 --> 00:18:43,360
hosting provider anyone maybe oh well

488
00:18:40,640 --> 00:18:46,000
they have cheap servers and you but you

489
00:18:43,360 --> 00:18:48,159
have two disks most of the time

490
00:18:46,000 --> 00:18:49,679
and there is still almost like four

491
00:18:48,160 --> 00:18:50,400
terabytes eight terabytes or something

492
00:18:49,679 --> 00:18:53,520
back

493
00:18:50,400 --> 00:18:54,799
and if i have my os on one of them i

494
00:18:53,520 --> 00:18:56,400
basically lose the whole disk

495
00:18:54,799 --> 00:18:58,639
because previously i couldn't use a

496
00:18:56,400 --> 00:19:00,960
partition which well i would

497
00:18:58,640 --> 00:19:03,120
100 gigs maybe for the os and the rest

498
00:19:00,960 --> 00:19:06,320
for seth because why not

499
00:19:03,120 --> 00:19:08,719
and finally i think the yeah

500
00:19:06,320 --> 00:19:10,799
since well with the upcoming i'm not

501
00:19:08,720 --> 00:19:12,160
sure if it's already out the 14.28

502
00:19:10,799 --> 00:19:16,400
release though

503
00:19:12,160 --> 00:19:19,440
that is available as a feature to use

504
00:19:16,400 --> 00:19:21,039
um yeah it's it's great to see it's

505
00:19:19,440 --> 00:19:23,520
awesome

506
00:19:21,039 --> 00:19:25,520
so big thanks for everyone that's

507
00:19:23,520 --> 00:19:25,918
contributing helping being on the slag

508
00:19:25,520 --> 00:19:28,960
just

509
00:19:25,919 --> 00:19:34,400
well also thanks for being here um

510
00:19:28,960 --> 00:19:37,440
yeah so for the roadmap

511
00:19:34,400 --> 00:19:38,400
well which just tried to further

512
00:19:37,440 --> 00:19:40,960
stabilize

513
00:19:38,400 --> 00:19:41,840
the custom resource definitions try not

514
00:19:40,960 --> 00:19:44,400
to well

515
00:19:41,840 --> 00:19:45,439
change them too much as we are on a

516
00:19:44,400 --> 00:19:49,200
stable level

517
00:19:45,440 --> 00:19:52,240
for seven hfs for example right now

518
00:19:49,200 --> 00:19:55,919
um we

519
00:19:52,240 --> 00:19:57,360
well we try to use we have well we have

520
00:19:55,919 --> 00:19:59,039
our own code

521
00:19:57,360 --> 00:20:01,120
that does like the watching on the

522
00:19:59,039 --> 00:20:05,200
custom objects and such

523
00:20:01,120 --> 00:20:07,439
um well it's

524
00:20:05,200 --> 00:20:08,880
well there's a bunch of other projects

525
00:20:07,440 --> 00:20:11,919
out there as well

526
00:20:08,880 --> 00:20:13,679
um which kind of offer a more well more

527
00:20:11,919 --> 00:20:16,240
commonly used

528
00:20:13,679 --> 00:20:18,840
um approach to doing that like the

529
00:20:16,240 --> 00:20:21,840
operator sdk

530
00:20:18,840 --> 00:20:26,000
from red hat chorus i think those

531
00:20:21,840 --> 00:20:28,080
two com project slash companies um

532
00:20:26,000 --> 00:20:29,360
so the idea is to well move away from

533
00:20:28,080 --> 00:20:31,360
our own

534
00:20:29,360 --> 00:20:34,080
stuff and get something which well

535
00:20:31,360 --> 00:20:38,080
everybody uses

536
00:20:34,080 --> 00:20:40,080
yeah um as we headed with yoga by db

537
00:20:38,080 --> 00:20:41,918
joining for 1.1 we hope to get

538
00:20:40,080 --> 00:20:43,120
more storage providers on board with

539
00:20:41,919 --> 00:20:45,440
rook

540
00:20:43,120 --> 00:20:49,520
for sev i talked about the multi-home

541
00:20:45,440 --> 00:20:53,120
network stuff for hfs um

542
00:20:49,520 --> 00:20:57,200
well it's soon also coming to seth

543
00:20:53,120 --> 00:20:57,199
in i think let me

544
00:20:57,679 --> 00:21:01,440
in where do you hear it it's planned for

545
00:21:00,400 --> 00:21:06,159
round 1.3

546
00:21:01,440 --> 00:21:09,280
thanks to uh sebastian han again um

547
00:21:06,159 --> 00:21:12,720
yeah let me go back one slide here

548
00:21:09,280 --> 00:21:14,840
um and first have parts the

549
00:21:12,720 --> 00:21:17,840
manager part who knows about the ceph

550
00:21:14,840 --> 00:21:17,840
manager

551
00:21:17,919 --> 00:21:20,100
who knows about the cell manager

552
00:21:19,200 --> 00:21:21,840
dashboard

553
00:21:20,100 --> 00:21:25,360
[Music]

554
00:21:21,840 --> 00:21:29,280
well the idea there is there's a cool

555
00:21:25,360 --> 00:21:29,280
dashboard where everybody is working on

556
00:21:29,360 --> 00:21:33,120
to in general have better integration

557
00:21:31,200 --> 00:21:35,360
with such orchestration tools

558
00:21:33,120 --> 00:21:36,399
like well the deepsea stuff and so on

559
00:21:35,360 --> 00:21:39,840
like the existing

560
00:21:36,400 --> 00:21:41,760
well rook also exists but um but also

561
00:21:39,840 --> 00:21:43,120
for rookside to even also better

562
00:21:41,760 --> 00:21:46,240
integrate it with that

563
00:21:43,120 --> 00:21:46,959
that's uh one of the ideas daniel is

564
00:21:46,240 --> 00:21:49,679
that you

565
00:21:46,960 --> 00:21:51,440
can specify everything you want in the

566
00:21:49,679 --> 00:21:54,400
cef cluster object

567
00:21:51,440 --> 00:21:55,679
um but if you want you can also just log

568
00:21:54,400 --> 00:21:57,840
into the dashboard

569
00:21:55,679 --> 00:21:59,600
see how which disks are available in

570
00:21:57,840 --> 00:22:00,559
each node and then just click click and

571
00:21:59,600 --> 00:22:05,199
say ah well

572
00:22:00,559 --> 00:22:06,960
make them osds or something and well

573
00:22:05,200 --> 00:22:08,960
we want to get there we're not quite

574
00:22:06,960 --> 00:22:10,559
there yet but it's getting better and

575
00:22:08,960 --> 00:22:13,679
better

576
00:22:10,559 --> 00:22:15,840
for hfs they simply want to feature um

577
00:22:13,679 --> 00:22:17,039
well to support new features that they

578
00:22:15,840 --> 00:22:18,158
have implemented in the project

579
00:22:17,039 --> 00:22:20,559
themselves

580
00:22:18,159 --> 00:22:22,799
um and one of the bigger parts here

581
00:22:20,559 --> 00:22:26,639
definitely is the cncf project

582
00:22:22,799 --> 00:22:28,639
graduation um but besides it there's

583
00:22:26,640 --> 00:22:32,559
more to come

584
00:22:28,640 --> 00:22:34,799
so we up we saw that project graduation

585
00:22:32,559 --> 00:22:37,200
um i'm not gonna bother you too much

586
00:22:34,799 --> 00:22:40,080
with dates or anything point being

587
00:22:37,200 --> 00:22:41,679
we joined uh the cncf project as a

588
00:22:40,080 --> 00:22:45,120
sandbox project in like

589
00:22:41,679 --> 00:22:47,440
2018 or something um

590
00:22:45,120 --> 00:22:48,959
and well we further improved and stuff

591
00:22:47,440 --> 00:22:52,240
and woo

592
00:22:48,960 --> 00:22:55,760
point being we tried to graduate in 2020

593
00:22:52,240 --> 00:22:59,200
so hopefully around well march

594
00:22:55,760 --> 00:23:03,840
um and well

595
00:22:59,200 --> 00:23:06,159
besides looking from the past to uh now

596
00:23:03,840 --> 00:23:07,439
well a lot of numbers have increased so

597
00:23:06,159 --> 00:23:08,159
that should probably mean something good

598
00:23:07,440 --> 00:23:12,400
right

599
00:23:08,159 --> 00:23:14,320
um it's growing

600
00:23:12,400 --> 00:23:16,559
to summarize that slide it's where the

601
00:23:14,320 --> 00:23:19,439
rook is growing further and further

602
00:23:16,559 --> 00:23:21,440
uh we have done also which is for a good

603
00:23:19,440 --> 00:23:25,760
amount of companies also very important

604
00:23:21,440 --> 00:23:29,440
there was a security audit about rook

605
00:23:25,760 --> 00:23:29,440
well an independent security audit

606
00:23:30,480 --> 00:23:34,240
was performed by the trail of bits guys

607
00:23:32,960 --> 00:23:36,720
um they even did the

608
00:23:34,240 --> 00:23:37,919
kubernetes security audit point being

609
00:23:36,720 --> 00:23:40,320
there were some

610
00:23:37,919 --> 00:23:41,440
vulnerabilities we fixed them or what

611
00:23:40,320 --> 00:23:43,439
else one or two small

612
00:23:41,440 --> 00:23:45,679
like well not two critical things which

613
00:23:43,440 --> 00:23:48,080
are still being fixed

614
00:23:45,679 --> 00:23:49,919
point is we got the security audit it

615
00:23:48,080 --> 00:23:52,080
looks good we didn't have too many

616
00:23:49,919 --> 00:23:55,360
critical things

617
00:23:52,080 --> 00:23:57,039
um in general just like the current

618
00:23:55,360 --> 00:23:58,879
fracture stuff we need to improve a bit

619
00:23:57,039 --> 00:24:02,158
on the ci part and such and

620
00:23:58,880 --> 00:24:04,240
well so

621
00:24:02,159 --> 00:24:06,240
should you run rook already who's

622
00:24:04,240 --> 00:24:08,960
running rook in development or so

623
00:24:06,240 --> 00:24:12,480
testing around playing with it okay

624
00:24:08,960 --> 00:24:12,480
who's running it in production

625
00:24:12,880 --> 00:24:16,840
oh well at least a few hands i'm happy

626
00:24:15,840 --> 00:24:19,760
about that

627
00:24:16,840 --> 00:24:22,879
um uh if you want

628
00:24:19,760 --> 00:24:24,158
like i would really encourage you to get

629
00:24:22,880 --> 00:24:27,279
in touch with me maybe

630
00:24:24,159 --> 00:24:30,840
now or you can also just you know

631
00:24:27,279 --> 00:24:33,120
send jared once a message on slack or on

632
00:24:30,840 --> 00:24:35,678
twitter

633
00:24:33,120 --> 00:24:36,320
and well kind of talk to him that we get

634
00:24:35,679 --> 00:24:39,600
a bit more

635
00:24:36,320 --> 00:24:41,840
um no what is called

636
00:24:39,600 --> 00:24:43,760
not customer testimonials but

637
00:24:41,840 --> 00:24:44,639
testimonials about people using the

638
00:24:43,760 --> 00:24:49,200
project

639
00:24:44,640 --> 00:24:53,039
and uh well using well using it simply

640
00:24:49,200 --> 00:24:54,720
um yeah and well for people that might

641
00:24:53,039 --> 00:24:54,960
not be able to say hey yeah we're using

642
00:24:54,720 --> 00:24:58,840
it

643
00:24:54,960 --> 00:25:02,559
it can also be confidential so well

644
00:24:58,840 --> 00:25:05,360
um well

645
00:25:02,559 --> 00:25:06,720
i'm working for claricle just as a point

646
00:25:05,360 --> 00:25:09,520
if you want to work on rook

647
00:25:06,720 --> 00:25:12,000
like to program go or something feel

648
00:25:09,520 --> 00:25:15,520
free to reach out to us or to me

649
00:25:12,000 --> 00:25:17,520
um but now getting back to rook

650
00:25:15,520 --> 00:25:19,120
if you want to get involved feel free to

651
00:25:17,520 --> 00:25:21,360
jump on our slack

652
00:25:19,120 --> 00:25:23,678
rook.io is also a great place in regards

653
00:25:21,360 --> 00:25:27,039
to the documentation and such

654
00:25:23,679 --> 00:25:29,600
um twitter we even have a mailing list

655
00:25:27,039 --> 00:25:31,039
we have community meetings so feel free

656
00:25:29,600 --> 00:25:35,279
to join

657
00:25:31,039 --> 00:25:38,080
and yeah

658
00:25:35,279 --> 00:25:38,080
you got the photo

659
00:25:39,039 --> 00:25:43,840
thank you

660
00:25:45,919 --> 00:25:51,520
um if you have any questions feel free

661
00:25:48,960 --> 00:25:54,720
to ask them now i'll try to repeat them

662
00:25:51,520 --> 00:25:54,720
as we well

663
00:25:55,039 --> 00:25:58,080
so audio issues yeah

664
00:26:08,880 --> 00:26:12,960
so the question is that there is an

665
00:26:10,640 --> 00:26:15,520
issue about extending persistent volumes

666
00:26:12,960 --> 00:26:16,799
slash persistent volume claims uh with

667
00:26:15,520 --> 00:26:20,000
csi right

668
00:26:16,799 --> 00:26:23,200
yes yes um that is

669
00:26:20,000 --> 00:26:24,960
solved well it's it's it's solved in

670
00:26:23,200 --> 00:26:27,200
master to be that guy

671
00:26:24,960 --> 00:26:29,159
but it's back ported as far as and now

672
00:26:27,200 --> 00:26:33,120
to

673
00:26:29,159 --> 00:26:35,760
1.2 something 1.22 or

674
00:26:33,120 --> 00:26:37,760
yeah it is in 1.2 as far as i know but

675
00:26:35,760 --> 00:26:39,039
not released yet or it is already in the

676
00:26:37,760 --> 00:26:41,120
latest patch release

677
00:26:39,039 --> 00:26:42,080
point being saf csi which brought this

678
00:26:41,120 --> 00:26:45,120
feature which

679
00:26:42,080 --> 00:26:46,720
is the for them the 2.0 release has

680
00:26:45,120 --> 00:26:49,879
brought this feature finally

681
00:26:46,720 --> 00:26:51,520
um probably worth checking out

682
00:26:49,880 --> 00:26:53,440
github.com csi

683
00:26:51,520 --> 00:27:05,360
i hope they've updated their feature

684
00:26:53,440 --> 00:27:07,360
table below um

685
00:27:05,360 --> 00:27:08,799
so the question is is it possible to use

686
00:27:07,360 --> 00:27:11,279
multiple well rook

687
00:27:08,799 --> 00:27:13,360
storage operators for example rook ceph

688
00:27:11,279 --> 00:27:16,720
and rook etcherfest in the same cluster

689
00:27:13,360 --> 00:27:18,840
um well technically speaking yeah

690
00:27:16,720 --> 00:27:20,159
sure that's not a problem they're in

691
00:27:18,840 --> 00:27:24,158
self-independent

692
00:27:20,159 --> 00:27:25,440
um well if you use the same disk for

693
00:27:24,159 --> 00:27:28,320
both there

694
00:27:25,440 --> 00:27:30,000
is a chance that you know one might take

695
00:27:28,320 --> 00:27:31,200
a disk first before the other or

696
00:27:30,000 --> 00:27:34,799
something but

697
00:27:31,200 --> 00:27:36,240
well it's um you have two people

698
00:27:34,799 --> 00:27:37,679
fighting over the same disk for example

699
00:27:36,240 --> 00:27:39,520
then it's

700
00:27:37,679 --> 00:27:41,039
not a clash of the operators because

701
00:27:39,520 --> 00:27:43,600
they don't know about each other but

702
00:27:41,039 --> 00:27:46,080
just a clash of the disks on the servers

703
00:27:43,600 --> 00:27:46,959
yeah if you separate like what notes

704
00:27:46,080 --> 00:27:48,320
they use

705
00:27:46,960 --> 00:27:50,559
uh then it shouldn't be too much of a

706
00:27:48,320 --> 00:27:50,960
prop yeah it's like the same with issue

707
00:27:50,559 --> 00:27:53,360
use

708
00:27:50,960 --> 00:27:54,559
seth and the cassandra one you don't you

709
00:27:53,360 --> 00:27:56,559
don't need to use the saffron

710
00:27:54,559 --> 00:27:58,240
in the end it's just normal piston

711
00:27:56,559 --> 00:27:58,960
volume clamp search and if you separate

712
00:27:58,240 --> 00:28:03,120
and so it's

713
00:27:58,960 --> 00:28:04,559
yeah yeah is um how high is the operator

714
00:28:03,120 --> 00:28:06,320
or how far you want to bring it in for

715
00:28:04,559 --> 00:28:07,760
example supporting day two operations

716
00:28:06,320 --> 00:28:09,760
and thinking about the different phases

717
00:28:07,760 --> 00:28:11,840
that an operator can have from

718
00:28:09,760 --> 00:28:13,039
phase three with all backup and recovery

719
00:28:11,840 --> 00:28:16,320
from phase five

720
00:28:13,039 --> 00:28:17,840
uh yeah so how is currently the rook

721
00:28:16,320 --> 00:28:21,918
operator in this sense and

722
00:28:17,840 --> 00:28:25,678
how is it evolving um so the question is

723
00:28:21,919 --> 00:28:28,799
uh let me try to summarize it um

724
00:28:25,679 --> 00:28:29,360
how far rook operator rook operators

725
00:28:28,799 --> 00:28:31,039
will go

726
00:28:29,360 --> 00:28:33,678
in regards to second day operations

727
00:28:31,039 --> 00:28:36,158
right um

728
00:28:33,679 --> 00:28:37,360
well one of the main power stereo at

729
00:28:36,159 --> 00:28:39,919
least is already covered by the

730
00:28:37,360 --> 00:28:41,918
operators for example for sev

731
00:28:39,919 --> 00:28:45,200
that's well the most common i know there

732
00:28:41,919 --> 00:28:48,240
is the health checking of the monitors

733
00:28:45,200 --> 00:28:49,120
um because well you don't want to lose

734
00:28:48,240 --> 00:28:52,559
your quorum i don't

735
00:28:49,120 --> 00:28:55,918
well um bad things will happen there

736
00:28:52,559 --> 00:28:59,760
um in regards to backups of volumes

737
00:28:55,919 --> 00:29:02,559
and such uh that's not a thing

738
00:28:59,760 --> 00:29:03,919
rook is looking too much into simply due

739
00:29:02,559 --> 00:29:05,440
to the fact there's already a big

740
00:29:03,919 --> 00:29:09,120
ecosystem around it like

741
00:29:05,440 --> 00:29:11,840
uh let me where do we have it uh

742
00:29:09,120 --> 00:29:13,760
from stashed project stash operator or

743
00:29:11,840 --> 00:29:15,439
well it's even an operator which has

744
00:29:13,760 --> 00:29:19,760
crds as well

745
00:29:15,440 --> 00:29:20,799
um there is haptic io or it well it was

746
00:29:19,760 --> 00:29:23,440
previously i think it's

747
00:29:20,799 --> 00:29:24,000
vmware or something now with their arc

748
00:29:23,440 --> 00:29:26,640
project

749
00:29:24,000 --> 00:29:28,880
i hope they didn't rename it as well

750
00:29:26,640 --> 00:29:31,679
yeah well valero yeah the new name

751
00:29:28,880 --> 00:29:33,360
um and there's a few more projects uh

752
00:29:31,679 --> 00:29:35,679
some even more on the seth layer if you

753
00:29:33,360 --> 00:29:36,639
want forza for example like becky ii i

754
00:29:35,679 --> 00:29:40,320
think

755
00:29:36,640 --> 00:29:42,399
um it's it's secondary operations but

756
00:29:40,320 --> 00:29:43,039
it's something just due to the diversity

757
00:29:42,399 --> 00:29:45,840
there

758
00:29:43,039 --> 00:29:47,520
in do you want it in cuban is fancy with

759
00:29:45,840 --> 00:29:49,520
customers those definitions are

760
00:29:47,520 --> 00:29:51,200
more outside just back up everything for

761
00:29:49,520 --> 00:29:54,000
example

762
00:29:51,200 --> 00:29:55,840
well and at least one phrase that kind

763
00:29:54,000 --> 00:29:59,360
of stuck with me from some people that

764
00:29:55,840 --> 00:30:01,649
uh do a bit more in regards to seth

765
00:29:59,360 --> 00:30:02,879
um is um

766
00:30:01,650 --> 00:30:05,120
[Music]

767
00:30:02,880 --> 00:30:06,880
if you want to back up steph cluster put

768
00:30:05,120 --> 00:30:09,279
in our self cluster besides it and it's

769
00:30:06,880 --> 00:30:09,279
like well

770
00:30:16,159 --> 00:30:23,840
uh howdy integration

771
00:30:26,399 --> 00:30:30,310
so you mean if you want to add a new

772
00:30:27,919 --> 00:30:32,320
storage background basically

773
00:30:30,310 --> 00:30:37,840
[Music]

774
00:30:32,320 --> 00:30:37,840
um so the question is um

775
00:30:38,080 --> 00:30:42,240
what do you need to do basically to add

776
00:30:40,320 --> 00:30:45,678
a new storage provider

777
00:30:42,240 --> 00:30:47,360
um well we have

778
00:30:45,679 --> 00:30:49,360
we well we're trying to improve that

779
00:30:47,360 --> 00:30:53,360
even further now

780
00:30:49,360 --> 00:30:56,639
the main idea is that um

781
00:30:53,360 --> 00:30:59,039
we have a lot of uh well framework like

782
00:30:56,640 --> 00:31:01,279
structures to call it like that it's not

783
00:30:59,039 --> 00:31:02,320
yet at a i would say full-blown

784
00:31:01,279 --> 00:31:04,159
framework for that

785
00:31:02,320 --> 00:31:05,840
but there's basically certain structures

786
00:31:04,159 --> 00:31:08,480
already available where you

787
00:31:05,840 --> 00:31:09,678
well you design yours it's a customer

788
00:31:08,480 --> 00:31:12,000
source definition

789
00:31:09,679 --> 00:31:13,200
and well to put it like that you can

790
00:31:12,000 --> 00:31:16,240
copy and paste

791
00:31:13,200 --> 00:31:17,840
certain parts of the codes which for

792
00:31:16,240 --> 00:31:19,600
example just do the easy part of

793
00:31:17,840 --> 00:31:20,639
watching and modifying your own

794
00:31:19,600 --> 00:31:22,879
functions then

795
00:31:20,640 --> 00:31:24,960
to well on ads like your new object has

796
00:31:22,880 --> 00:31:27,120
been created you react to it and such

797
00:31:24,960 --> 00:31:28,000
um there's a good amount of functions

798
00:31:27,120 --> 00:31:30,158
already available

799
00:31:28,000 --> 00:31:31,600
it can be still improved like i said um

800
00:31:30,159 --> 00:31:32,960
it's more like we're moving

801
00:31:31,600 --> 00:31:36,080
more and more to be a framework in that

802
00:31:32,960 --> 00:31:40,480
regard um yeah

803
00:31:36,080 --> 00:31:40,480
okay any other one

804
00:31:43,360 --> 00:31:47,918
um so the question is if one rook cef

805
00:31:46,240 --> 00:31:49,519
installation can support multiple

806
00:31:47,919 --> 00:31:53,840
clusters

807
00:31:49,519 --> 00:31:55,600
um to a certain extent yes you would

808
00:31:53,840 --> 00:31:58,320
have let's assume the following you have

809
00:31:55,600 --> 00:31:59,600
one cluster with the root ceph on it

810
00:31:58,320 --> 00:32:03,200
and you have let's say three other

811
00:31:59,600 --> 00:32:05,600
clusters every other kubernetes clusters

812
00:32:03,200 --> 00:32:07,679
um you would use rooksef just as normal

813
00:32:05,600 --> 00:32:08,240
in the uh first cluster to get seth

814
00:32:07,679 --> 00:32:10,000
running

815
00:32:08,240 --> 00:32:11,279
and in the other three clusters you

816
00:32:10,000 --> 00:32:15,600
could also use

817
00:32:11,279 --> 00:32:17,679
rook there to um with the um

818
00:32:15,600 --> 00:32:18,959
forget the name external cluster

819
00:32:17,679 --> 00:32:22,080
integration

820
00:32:18,960 --> 00:32:23,120
where um you would um take the access

821
00:32:22,080 --> 00:32:26,240
key and such from

822
00:32:23,120 --> 00:32:28,799
this cluster give it to each cluster and

823
00:32:26,240 --> 00:32:31,360
then the root have operator can also set

824
00:32:28,799 --> 00:32:33,519
up the certain things like csi and such

825
00:32:31,360 --> 00:32:34,559
though one important thing there to

826
00:32:33,519 --> 00:32:36,880
mention is

827
00:32:34,559 --> 00:32:38,639
the rooks have class in the cluster you

828
00:32:36,880 --> 00:32:38,880
need to run it with host network true as

829
00:32:38,640 --> 00:32:41,120
of

830
00:32:38,880 --> 00:32:41,919
right now because the other nodes and

831
00:32:41,120 --> 00:32:44,080
such they

832
00:32:41,919 --> 00:32:45,600
need to be able to access the osd's and

833
00:32:44,080 --> 00:32:46,720
the monsoon like well everything in the

834
00:32:45,600 --> 00:32:49,199
end so

835
00:32:46,720 --> 00:32:52,480
um that's one of the kind of

836
00:32:49,200 --> 00:32:52,480
restrictions as we have right now

837
00:32:56,880 --> 00:33:01,039
if you don't have any questions uh

838
00:32:58,880 --> 00:33:02,480
anymore well i got a few stickers still

839
00:33:01,039 --> 00:33:07,200
with me so

840
00:33:02,480 --> 00:33:11,840
uh feel free to grab them

841
00:33:07,200 --> 00:33:11,840
so yeah thank you

