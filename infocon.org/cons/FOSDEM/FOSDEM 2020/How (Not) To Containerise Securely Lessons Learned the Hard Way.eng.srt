1
00:00:06,879 --> 00:00:10,480
right

2
00:00:07,279 --> 00:00:14,080
hello everybody uh this is

3
00:00:10,480 --> 00:00:17,760
a bit of a monster of a talk because

4
00:00:14,080 --> 00:00:20,800
it has a lot of live demos in so

5
00:00:17,760 --> 00:00:23,600
i will ask you to uh to bear with me as

6
00:00:20,800 --> 00:00:27,279
i flip around all the time between

7
00:00:23,600 --> 00:00:31,840
whoops therefore windows

8
00:00:27,279 --> 00:00:31,840
there we go okie dokie

9
00:00:32,399 --> 00:00:39,120
so hello

10
00:00:35,920 --> 00:00:40,640
i am andy i like to break stuff and put

11
00:00:39,120 --> 00:00:42,399
it back together once i know how it's

12
00:00:40,640 --> 00:00:45,680
been working

13
00:00:42,399 --> 00:00:47,600
i work a control plane and i'm very

14
00:00:45,680 --> 00:00:49,600
proud to say that i have a trainer for

15
00:00:47,600 --> 00:00:52,480
various organizations

16
00:00:49,600 --> 00:00:53,920
which i might disappear eventually um

17
00:00:52,480 --> 00:00:57,038
watch out for sans sec

18
00:00:53,920 --> 00:00:58,160
584 which is a cloud native security

19
00:00:57,039 --> 00:01:00,079
course

20
00:00:58,160 --> 00:01:01,199
five days coming out next year that i'm

21
00:01:00,079 --> 00:01:04,640
uh

22
00:01:01,199 --> 00:01:05,360
pleased to be working with on a lot of

23
00:01:04,640 --> 00:01:07,439
battery

24
00:01:05,360 --> 00:01:09,439
marvelous i'm a founder of control plane

25
00:01:07,439 --> 00:01:11,360
which is continuous security

26
00:01:09,439 --> 00:01:13,600
engineering practices with a focus on

27
00:01:11,360 --> 00:01:15,439
cloud-native and regulated industries

28
00:01:13,600 --> 00:01:18,080
and i want to talk about container

29
00:01:15,439 --> 00:01:18,880
breakouts kubernetes break-ins cluster

30
00:01:18,080 --> 00:01:21,439
drive-bys

31
00:01:18,880 --> 00:01:22,640
api exploits pwning everything that we

32
00:01:21,439 --> 00:01:25,520
can find

33
00:01:22,640 --> 00:01:28,320
fingers crossed and how we fix the

34
00:01:25,520 --> 00:01:31,920
security skills gap in the cloud native

35
00:01:28,320 --> 00:01:35,520
ecosystem spoiler alert

36
00:01:31,920 --> 00:01:37,600
we do it by training the next generation

37
00:01:35,520 --> 00:01:40,880
of cloud native security engineers and

38
00:01:37,600 --> 00:01:43,439
architects with production-like systems

39
00:01:40,880 --> 00:01:44,880
that they can hack they can play ctfs

40
00:01:43,439 --> 00:01:46,798
until they can pop shells and they

41
00:01:44,880 --> 00:01:49,679
really understand what they're doing

42
00:01:46,799 --> 00:01:50,079
they test remediate and harden so we can

43
00:01:49,680 --> 00:01:52,960
hack

44
00:01:50,079 --> 00:01:54,960
back in we do this with models that we

45
00:01:52,960 --> 00:01:56,158
build the system these are threat models

46
00:01:54,960 --> 00:01:57,439
attack trees

47
00:01:56,159 --> 00:01:59,680
this is all open sourced under the

48
00:01:57,439 --> 00:02:01,439
financial services user group and cncf

49
00:01:59,680 --> 00:02:03,520
and the tax simulators which are

50
00:02:01,439 --> 00:02:05,360
production-like infrastructure

51
00:02:03,520 --> 00:02:07,119
in safe testing environments more on

52
00:02:05,360 --> 00:02:08,318
this later so

53
00:02:07,119 --> 00:02:10,479
what are we going to do i've got some

54
00:02:08,318 --> 00:02:12,879
local vms i've got gke

55
00:02:10,479 --> 00:02:15,120
got some droplets got some docker

56
00:02:12,879 --> 00:02:18,000
versions and some kernel versions

57
00:02:15,120 --> 00:02:18,800
and i will demo a hacking simulator

58
00:02:18,000 --> 00:02:22,080
right at the end

59
00:02:18,800 --> 00:02:25,120
if 30 minutes is enough uh also

60
00:02:22,080 --> 00:02:25,120
i am drinking through this

61
00:02:29,760 --> 00:02:33,599
premature perhaps ladies and gentlemen

62
00:02:31,760 --> 00:02:34,480
okay so what are we doing doc and

63
00:02:33,599 --> 00:02:36,480
kubernetes

64
00:02:34,480 --> 00:02:38,799
do we love kubernetes well broadly does

65
00:02:36,480 --> 00:02:40,079
it love us absolutely not

66
00:02:38,800 --> 00:02:42,000
why is it so difficult it is a

67
00:02:40,080 --> 00:02:43,360
distributed system we're all trained on

68
00:02:42,000 --> 00:02:45,440
monoliths and all of a sudden

69
00:02:43,360 --> 00:02:48,319
we have to deal with all sorts of

70
00:02:45,440 --> 00:02:50,640
different network based problems

71
00:02:48,319 --> 00:02:52,079
what is the problem with kubernetes well

72
00:02:50,640 --> 00:02:54,799
it's a layered security onion

73
00:02:52,080 --> 00:02:56,400
but if i can get onto a single node if i

74
00:02:54,800 --> 00:02:58,800
can root one of your workers

75
00:02:56,400 --> 00:03:00,640
i can probably root your whole cluster

76
00:02:58,800 --> 00:03:02,720
so

77
00:03:00,640 --> 00:03:04,159
containers containers are awesome we

78
00:03:02,720 --> 00:03:06,239
have to thank the uh

79
00:03:04,159 --> 00:03:08,399
hosts of this dev room for all the work

80
00:03:06,239 --> 00:03:10,879
they put in not only on lex d but also

81
00:03:08,400 --> 00:03:13,200
upstream into the lyrics colonel but

82
00:03:10,879 --> 00:03:13,920
they emerged from the primordial colonel

83
00:03:13,200 --> 00:03:15,599
soup

84
00:03:13,920 --> 00:03:17,280
a child of evolution rather than

85
00:03:15,599 --> 00:03:19,359
intelligent design

86
00:03:17,280 --> 00:03:20,640
that has morphed refined and been

87
00:03:19,360 --> 00:03:24,560
coerced into something

88
00:03:20,640 --> 00:03:24,958
usable but don't forget containers do

89
00:03:24,560 --> 00:03:27,200
not

90
00:03:24,959 --> 00:03:29,200
exist they are merely the resultant

91
00:03:27,200 --> 00:03:30,720
bundling and isolation left once we've

92
00:03:29,200 --> 00:03:33,280
set up our name spaces and c

93
00:03:30,720 --> 00:03:35,200
groups and linux security modules and

94
00:03:33,280 --> 00:03:38,560
started our precious little process

95
00:03:35,200 --> 00:03:41,359
inside and finally that being said

96
00:03:38,560 --> 00:03:44,239
we love oh that is a shame because that

97
00:03:41,360 --> 00:03:44,239
is an amazing gift

98
00:03:44,840 --> 00:03:48,239
kubernetes

99
00:03:46,720 --> 00:03:50,000
so this talk will go fast there's lots

100
00:03:48,239 --> 00:03:51,440
of demos i'll do my best

101
00:03:50,000 --> 00:03:53,840
a prayer to the demo gods and an

102
00:03:51,440 --> 00:03:53,840
offering

103
00:03:54,879 --> 00:03:57,760
let's go we all know this right we

104
00:03:56,480 --> 00:03:59,119
shouldn't run privileged we should not

105
00:03:57,760 --> 00:04:00,959
run your id 0

106
00:03:59,120 --> 00:04:02,799
and the doc socket should not be mounted

107
00:04:00,959 --> 00:04:04,159
inside a container why is that i hear

108
00:04:02,799 --> 00:04:07,760
you ask

109
00:04:04,159 --> 00:04:12,159
ah let's see okay where

110
00:04:07,760 --> 00:04:15,599
are we we are here hopefully

111
00:04:12,159 --> 00:04:17,680
nope we are here okay

112
00:04:15,599 --> 00:04:19,279
so we are spinning up a container with a

113
00:04:17,680 --> 00:04:21,840
double height of privilege flag

114
00:04:19,279 --> 00:04:22,799
what happens when we run privileged do

115
00:04:21,839 --> 00:04:25,840
you see anything

116
00:04:22,800 --> 00:04:26,720
in that list of mounted devices that we

117
00:04:25,840 --> 00:04:29,520
shouldn't do

118
00:04:26,720 --> 00:04:30,320
yes that is the host device that bda0

119
00:04:29,520 --> 00:04:32,880
mounted

120
00:04:30,320 --> 00:04:34,080
with etsy hosts on top of it why is that

121
00:04:32,880 --> 00:04:36,080
a bad thing

122
00:04:34,080 --> 00:04:38,240
because you can do as root inside the

123
00:04:36,080 --> 00:04:40,000
container and importantly there is no

124
00:04:38,240 --> 00:04:41,199
boundary between route inside and

125
00:04:40,000 --> 00:04:42,800
outside the container unless we have

126
00:04:41,199 --> 00:04:47,520
username spaces enabled

127
00:04:42,800 --> 00:04:50,320
what can we do we can mount dev vda1

128
00:04:47,520 --> 00:04:50,719
and we can put that inside our container

129
00:04:50,320 --> 00:04:52,880
at

130
00:04:50,720 --> 00:04:53,840
any old mount point and then what do we

131
00:04:52,880 --> 00:04:57,919
have there well

132
00:04:53,840 --> 00:05:00,638
that not that alias we have

133
00:04:57,919 --> 00:05:01,359
the hosts root file system that is not a

134
00:05:00,639 --> 00:05:03,520
good look

135
00:05:01,360 --> 00:05:04,880
can it get any worse well yes indeed it

136
00:05:03,520 --> 00:05:08,240
can

137
00:05:04,880 --> 00:05:10,479
let's just leave evidence that andy

138
00:05:08,240 --> 00:05:13,280
indeed was at one stage

139
00:05:10,479 --> 00:05:14,080
here all right and then we're back on

140
00:05:13,280 --> 00:05:16,479
the host

141
00:05:14,080 --> 00:05:17,280
what are we gonna do now have a look at

142
00:05:16,479 --> 00:05:19,359
the route

143
00:05:17,280 --> 00:05:20,638
and andy was there who is that owned by

144
00:05:19,360 --> 00:05:23,120
and when did that turn up

145
00:05:20,639 --> 00:05:25,919
1416 looks relatively recent and that's

146
00:05:23,120 --> 00:05:27,680
not how you spell stats

147
00:05:25,919 --> 00:05:29,440
yeah so that's a bad day do not run

148
00:05:27,680 --> 00:05:32,320
privilege

149
00:05:29,440 --> 00:05:34,320
um having uid zero inside container is

150
00:05:32,320 --> 00:05:36,320
not a vulnerability in and of itself

151
00:05:34,320 --> 00:05:37,759
but it leads to much easier privileged

152
00:05:36,320 --> 00:05:39,039
escalation if i can get inside your

153
00:05:37,759 --> 00:05:41,440
container

154
00:05:39,039 --> 00:05:41,440
okay

155
00:05:42,720 --> 00:05:46,000
and those were misconfigurations right

156
00:05:45,120 --> 00:05:47,280
that's

157
00:05:46,000 --> 00:05:49,600
that's something that we can actually

158
00:05:47,280 --> 00:05:50,799
defend in the pipeline so

159
00:05:49,600 --> 00:05:53,600
it's all very well talking about the

160
00:05:50,800 --> 00:05:55,759
problem let's talk about the fix as well

161
00:05:53,600 --> 00:05:57,280
in the container's life cycle unit tests

162
00:05:55,759 --> 00:05:58,720
are kind of run in isolation and i'm

163
00:05:57,280 --> 00:06:02,239
taking the test pyramid and i'm

164
00:05:58,720 --> 00:06:05,039
superimposing my own view over the top

165
00:06:02,240 --> 00:06:06,160
in this case unit tests are static or

166
00:06:05,039 --> 00:06:08,800
dynamic analysis

167
00:06:06,160 --> 00:06:10,639
on the container itself integration

168
00:06:08,800 --> 00:06:12,400
tests are probably more dynamic analysis

169
00:06:10,639 --> 00:06:13,919
inside container may be akin to actually

170
00:06:12,400 --> 00:06:15,679
testing the public apis

171
00:06:13,919 --> 00:06:16,799
of the application inside the container

172
00:06:15,680 --> 00:06:18,479
why is that important because the

173
00:06:16,800 --> 00:06:20,160
configuration changes with each

174
00:06:18,479 --> 00:06:21,919
environment that we promote it through

175
00:06:20,160 --> 00:06:23,759
the container stays the same but its

176
00:06:21,919 --> 00:06:25,520
behavior is dependent upon environment

177
00:06:23,759 --> 00:06:27,759
variables or config that we mount in

178
00:06:25,520 --> 00:06:29,758
so we have to test an end-to-end test

179
00:06:27,759 --> 00:06:31,520
that's the full system essentially

180
00:06:29,759 --> 00:06:33,199
so what we do static analysis for doc

181
00:06:31,520 --> 00:06:34,719
files we can link them

182
00:06:33,199 --> 00:06:36,560
and we can determine whether or not we

183
00:06:34,720 --> 00:06:38,240
have done certain things wrong

184
00:06:36,560 --> 00:06:39,840
something that we can't do or that is in

185
00:06:38,240 --> 00:06:40,720
fact very difficult to do is identify

186
00:06:39,840 --> 00:06:42,400
which user

187
00:06:40,720 --> 00:06:43,919
was running because that is runtime

188
00:06:42,400 --> 00:06:45,440
construct and we can switch users in the

189
00:06:43,919 --> 00:06:47,919
entry point for example

190
00:06:45,440 --> 00:06:49,120
so we probably oh also you can do

191
00:06:47,919 --> 00:06:52,080
cubanettes with

192
00:06:49,120 --> 00:06:52,720
uh cube sim a sec rather which is static

193
00:06:52,080 --> 00:06:54,560
analysis

194
00:06:52,720 --> 00:06:57,120
for cubanetti's resources this will tell

195
00:06:54,560 --> 00:06:58,880
you do not mount xyz and it will give

196
00:06:57,120 --> 00:07:00,160
you a risk score to try and quantify the

197
00:06:58,880 --> 00:07:01,680
danger of running a particular

198
00:07:00,160 --> 00:07:03,120
configuration

199
00:07:01,680 --> 00:07:05,520
there are lots of things that you can do

200
00:07:03,120 --> 00:07:07,759
in a podcast to break it

201
00:07:05,520 --> 00:07:09,520
right so what about dynamic testing well

202
00:07:07,759 --> 00:07:10,960
we can use inspect it's heavyweight it's

203
00:07:09,520 --> 00:07:11,840
ruby do you want to install ruby inside

204
00:07:10,960 --> 00:07:14,318
your container

205
00:07:11,840 --> 00:07:15,758
hell no what about server spec well it's

206
00:07:14,319 --> 00:07:17,680
still quite nice but again the same

207
00:07:15,759 --> 00:07:21,120
problem it's ruby so what do we

208
00:07:17,680 --> 00:07:23,599
use goss go serve spec it is simple

209
00:07:21,120 --> 00:07:24,400
declarative highly paralyzed and written

210
00:07:23,599 --> 00:07:27,840
in golang

211
00:07:24,400 --> 00:07:31,120
what does that say cloud native hooray

212
00:07:27,840 --> 00:07:31,679
so this is what gos looks like you have

213
00:07:31,120 --> 00:07:34,400
a simple

214
00:07:31,680 --> 00:07:36,240
yaml based format it runs everything by

215
00:07:34,400 --> 00:07:37,198
with default with 50 threads or go

216
00:07:36,240 --> 00:07:39,360
channels

217
00:07:37,199 --> 00:07:41,199
and in this case command is the type of

218
00:07:39,360 --> 00:07:42,479
test and the key here is the version

219
00:07:41,199 --> 00:07:44,240
so we're just making sure that our base

220
00:07:42,479 --> 00:07:44,719
container we have a contract with it

221
00:07:44,240 --> 00:07:47,759
that is

222
00:07:44,720 --> 00:07:48,560
shipping something to us right obviously

223
00:07:47,759 --> 00:07:49,919
you can use goss

224
00:07:48,560 --> 00:07:51,680
for anything and everything and i

225
00:07:49,919 --> 00:07:53,280
recommend it to the house

226
00:07:51,680 --> 00:07:55,840
what next let's break out of some

227
00:07:53,280 --> 00:07:58,000
containers who remembers dirty cow

228
00:07:55,840 --> 00:07:58,878
a copy on right vulnerability in the

229
00:07:58,000 --> 00:08:00,400
kernel

230
00:07:58,879 --> 00:08:02,319
which has been there since potentially

231
00:08:00,400 --> 00:08:06,000
2007 version 2

232
00:08:02,319 --> 00:08:06,879
6 22 and it's a copy on write race

233
00:08:06,000 --> 00:08:08,720
condition

234
00:08:06,879 --> 00:08:10,960
whereby an unprivileged user is able to

235
00:08:08,720 --> 00:08:14,240
write into root owned memory

236
00:08:10,960 --> 00:08:16,080
execute it and pop a shell

237
00:08:14,240 --> 00:08:17,440
exploitation of this bug does not need

238
00:08:16,080 --> 00:08:20,000
leave any trace

239
00:08:17,440 --> 00:08:21,840
of what happened it was detected by some

240
00:08:20,000 --> 00:08:22,639
dude running a rolling packet catcher on

241
00:08:21,840 --> 00:08:23,840
his honeypot

242
00:08:22,639 --> 00:08:26,479
who then pulled out binary and

243
00:08:23,840 --> 00:08:29,520
recompiled it what a guy

244
00:08:26,479 --> 00:08:31,919
okay why is it bad it hoses your system

245
00:08:29,520 --> 00:08:32,640
a containers in a default configuration

246
00:08:31,919 --> 00:08:35,120
at the time

247
00:08:32,640 --> 00:08:36,559
did not contain this bug containers rely

248
00:08:35,120 --> 00:08:38,000
on the kernel for protection system

249
00:08:36,559 --> 00:08:40,159
calls from inside a container

250
00:08:38,000 --> 00:08:41,599
do not hit a local kernel they are

251
00:08:40,159 --> 00:08:43,279
proxied onto the host

252
00:08:41,599 --> 00:08:45,839
this is why the kernel isolation model

253
00:08:43,279 --> 00:08:46,959
is more difficult and nuanced than a vm

254
00:08:45,839 --> 00:08:49,120
which has an entire

255
00:08:46,959 --> 00:08:50,160
full biosimulated version of the kernel

256
00:08:49,120 --> 00:08:52,000
running inside it

257
00:08:50,160 --> 00:08:53,519
instead of containers we get the speed

258
00:08:52,000 --> 00:08:54,240
increase we start our processes very

259
00:08:53,519 --> 00:08:55,920
quickly

260
00:08:54,240 --> 00:08:58,720
but we pay this penalty of processing

261
00:08:55,920 --> 00:09:00,479
system calls if the container

262
00:08:58,720 --> 00:09:02,399
is reliant upon the kernel and the

263
00:09:00,480 --> 00:09:04,560
colonel lets the containers guard down

264
00:09:02,399 --> 00:09:05,680
we are having a bad day there are ways

265
00:09:04,560 --> 00:09:08,079
around this

266
00:09:05,680 --> 00:09:08,719
let's have a look non-deterministic live

267
00:09:08,080 --> 00:09:11,760
demo

268
00:09:08,720 --> 00:09:15,600
woohoo okay so

269
00:09:11,760 --> 00:09:18,720
on to the

270
00:09:15,600 --> 00:09:20,399
dirty cow so this may suffer slightly on

271
00:09:18,720 --> 00:09:24,160
this screen

272
00:09:20,399 --> 00:09:28,560
my side they aren't already yes

273
00:09:24,160 --> 00:09:30,399
sorry unusual

274
00:09:28,560 --> 00:09:31,599
okay so what are we going to do here

275
00:09:30,399 --> 00:09:33,470
start team ups

276
00:09:31,600 --> 00:09:35,279
sweet

277
00:09:33,470 --> 00:09:37,920
[Applause]

278
00:09:35,279 --> 00:09:39,360
uh also i managed to remove the u-key

279
00:09:37,920 --> 00:09:41,760
from my keyboard so you'll notice i have

280
00:09:39,360 --> 00:09:43,200
trouble typing

281
00:09:41,760 --> 00:09:45,680
there was chocolate beneath it in a late

282
00:09:43,200 --> 00:09:51,839
night hacking session is my excuse

283
00:09:45,680 --> 00:09:51,839
okay and what exactly

284
00:09:52,880 --> 00:09:56,160
okay so what are we doing we've got

285
00:09:53,920 --> 00:10:00,240
docker at the top we have sysdig twice

286
00:09:56,160 --> 00:10:02,160
we have at the bottom temp.x which is

287
00:10:00,240 --> 00:10:03,440
a lock file that the exploit uses to

288
00:10:02,160 --> 00:10:05,199
determine whether it's been run

289
00:10:03,440 --> 00:10:06,959
because it's just spraying system calls

290
00:10:05,200 --> 00:10:08,320
highly parallelized it's a couple of

291
00:10:06,959 --> 00:10:10,560
right rate condition vulnerabilities so

292
00:10:08,320 --> 00:10:12,959
we do as much as possible

293
00:10:10,560 --> 00:10:14,959
in order to break it sorry this is going

294
00:10:12,959 --> 00:10:18,719
to be a little bit lower

295
00:10:14,959 --> 00:10:21,119
it's not solved i do apologize okay

296
00:10:18,720 --> 00:10:21,760
let's get into okay do we want to

297
00:10:21,120 --> 00:10:23,839
proceed

298
00:10:21,760 --> 00:10:25,120
yes please uh there's a number of

299
00:10:23,839 --> 00:10:26,399
exploits suggesting that actually the

300
00:10:25,120 --> 00:10:27,279
kernel version we're using is vulnerable

301
00:10:26,399 --> 00:10:29,120
but

302
00:10:27,279 --> 00:10:30,720
do we want to run for that armor in this

303
00:10:29,120 --> 00:10:32,880
case no because we have a specific

304
00:10:30,720 --> 00:10:35,040
configuration that will fix it

305
00:10:32,880 --> 00:10:36,560
and off we go so we're just firing dead

306
00:10:35,040 --> 00:10:37,599
beef is the exploit name wonderful

307
00:10:36,560 --> 00:10:40,880
choice of hex

308
00:10:37,600 --> 00:10:43,120
value and we are trying to patch the v

309
00:10:40,880 --> 00:10:44,959
dso virtual dynamic shared object which

310
00:10:43,120 --> 00:10:45,920
is kind of a proxy in user space to stop

311
00:10:44,959 --> 00:10:48,319
us having to hit

312
00:10:45,920 --> 00:10:50,079
the kernel all the time and then we're

313
00:10:48,320 --> 00:10:51,519
trying to p-trace it

314
00:10:50,079 --> 00:10:53,279
and at the point that we gain control of

315
00:10:51,519 --> 00:10:53,760
the process then we inject our own code

316
00:10:53,279 --> 00:10:56,720
in

317
00:10:53,760 --> 00:10:58,959
that will then you see we've got a

318
00:10:56,720 --> 00:11:00,640
listener running here on

319
00:10:58,959 --> 00:11:02,719
three lobster1234 on the hosts uh all

320
00:11:00,640 --> 00:11:04,319
the host adapters and then once this

321
00:11:02,720 --> 00:11:08,240
thing kicks in

322
00:11:04,320 --> 00:11:11,519
it will uh so that host adapter

323
00:11:08,240 --> 00:11:13,839
is where the the end point is um in

324
00:11:11,519 --> 00:11:15,440
in the bdso and once we pop that we will

325
00:11:13,839 --> 00:11:18,320
connect from inside

326
00:11:15,440 --> 00:11:19,920
the container to that and then we have

327
00:11:18,320 --> 00:11:22,240
root control of the host

328
00:11:19,920 --> 00:11:23,439
uh as i said this is non-deterministic

329
00:11:22,240 --> 00:11:25,279
if it doesn't finish by the time i

330
00:11:23,440 --> 00:11:26,480
finish this sentence i will come back to

331
00:11:25,279 --> 00:11:28,079
it because it will just have to be right

332
00:11:26,480 --> 00:11:29,680
in the background okay

333
00:11:28,079 --> 00:11:31,279
you will have to take my word for that

334
00:11:29,680 --> 00:11:32,719
and we'll come and have a look in a

335
00:11:31,279 --> 00:11:36,399
moment

336
00:11:32,720 --> 00:11:37,839
okay so what is going on there

337
00:11:36,399 --> 00:11:40,480
we've relied upon the p trade system

338
00:11:37,839 --> 00:11:43,680
called patch the v dso

339
00:11:40,480 --> 00:11:45,920
let's keep like this what just happened

340
00:11:43,680 --> 00:11:47,279
well theoretically we bypassed container

341
00:11:45,920 --> 00:11:48,560
security but

342
00:11:47,279 --> 00:11:51,279
let's see if anything's actually

343
00:11:48,560 --> 00:11:53,279
occurred yet yeah there we go hooray so

344
00:11:51,279 --> 00:11:55,760
this claims oh no this is one still

345
00:11:53,279 --> 00:11:57,680
okay it is non-deterministic let's keep

346
00:11:55,760 --> 00:11:59,519
on going

347
00:11:57,680 --> 00:12:00,959
all right so theoretically we've

348
00:11:59,519 --> 00:12:03,920
bypassed container

349
00:12:00,959 --> 00:12:05,839
container uh security mechanisms if we

350
00:12:03,920 --> 00:12:07,920
rerun that same

351
00:12:05,839 --> 00:12:09,440
exploit with a slightly modified app

352
00:12:07,920 --> 00:12:10,479
armor profile different to the default

353
00:12:09,440 --> 00:12:12,399
one that docker ships

354
00:12:10,480 --> 00:12:14,639
to block p-trace calls from within the

355
00:12:12,399 --> 00:12:17,200
namespace we effectively block this

356
00:12:14,639 --> 00:12:18,160
exploit but the actual solution is the

357
00:12:17,200 --> 00:12:21,680
patch our kernels

358
00:12:18,160 --> 00:12:24,160
as always run latest versions of things

359
00:12:21,680 --> 00:12:25,839
what can we do around this there's

360
00:12:24,160 --> 00:12:28,880
various things here but ultimately this

361
00:12:25,839 --> 00:12:30,560
is uh sandboxing fix

362
00:12:28,880 --> 00:12:32,160
there we go hooray okay so theoretically

363
00:12:30,560 --> 00:12:34,239
this has worked you can see

364
00:12:32,160 --> 00:12:35,439
it's got patch two of two because of the

365
00:12:34,240 --> 00:12:37,360
number of system calls we've made the

366
00:12:35,440 --> 00:12:41,120
second window will keep on spooling

367
00:12:37,360 --> 00:12:43,279
adam for nightime but here we should be

368
00:12:41,120 --> 00:12:45,200
root sweets you can see here that we've

369
00:12:43,279 --> 00:12:47,040
actually uh that is on the host at the

370
00:12:45,200 --> 00:12:49,760
bottom

371
00:12:47,040 --> 00:12:50,880
now because we were inside a container

372
00:12:49,760 --> 00:12:52,000
at this point

373
00:12:50,880 --> 00:12:54,000
we shouldn't be able to see anything on

374
00:12:52,000 --> 00:12:57,360
the host so what should we look for

375
00:12:54,000 --> 00:13:00,320
uh yes let's see if we're on c

376
00:12:57,360 --> 00:13:06,240
is there if we are going to grep we

377
00:13:00,320 --> 00:13:09,040
should probably use the word graph and

378
00:13:06,240 --> 00:13:11,839
nope because it's older than that

379
00:13:09,040 --> 00:13:13,760
for the rocket demon there we go so we

380
00:13:11,839 --> 00:13:16,079
should not be

381
00:13:13,760 --> 00:13:17,600
yeah okay uh obviously this kernel

382
00:13:16,079 --> 00:13:18,638
version is a few years old and i've had

383
00:13:17,600 --> 00:13:20,399
to keep this vm around

384
00:13:18,639 --> 00:13:21,920
but what we see there is we're inside a

385
00:13:20,399 --> 00:13:23,600
container and we're doing stuff on the

386
00:13:21,920 --> 00:13:24,639
host it's a bad day container isolation

387
00:13:23,600 --> 00:13:27,760
is broken

388
00:13:24,639 --> 00:13:30,639
let's continue so what do we do

389
00:13:27,760 --> 00:13:31,439
we modify um apple armor and setcom

390
00:13:30,639 --> 00:13:33,360
profiles

391
00:13:31,440 --> 00:13:35,600
we should be fine-tuning these things

392
00:13:33,360 --> 00:13:37,440
tools like uh jesse purcell's bane

393
00:13:35,600 --> 00:13:40,720
there's loads of new ebpf based

394
00:13:37,440 --> 00:13:42,240
set comp tracing stuff that will extract

395
00:13:40,720 --> 00:13:43,040
setcom profiles from running

396
00:13:42,240 --> 00:13:44,880
applications

397
00:13:43,040 --> 00:13:46,639
this is all the big container security

398
00:13:44,880 --> 00:13:48,800
tooling does for you anyway

399
00:13:46,639 --> 00:13:50,880
some bells and whistles uh or as i heard

400
00:13:48,800 --> 00:13:53,199
it describe belgian whistles

401
00:13:50,880 --> 00:13:54,160
around that um and of course you want to

402
00:13:53,199 --> 00:13:56,000
wait effectively

403
00:13:54,160 --> 00:13:57,839
these slides are available for austerity

404
00:13:56,000 --> 00:14:00,320
afterwards 13 minutes

405
00:13:57,839 --> 00:14:01,680
okay bypassing controls what else are we

406
00:14:00,320 --> 00:14:04,399
going to do

407
00:14:01,680 --> 00:14:06,160
well oh yes thanks jim some of these are

408
00:14:04,399 --> 00:14:09,519
just not loading in time are they

409
00:14:06,160 --> 00:14:12,959
uh bypass container security controls

410
00:14:09,519 --> 00:14:14,959
oh well that does move eventually

411
00:14:12,959 --> 00:14:16,880
so there was an app armor bypass

412
00:14:14,959 --> 00:14:18,800
recently this was quite interesting

413
00:14:16,880 --> 00:14:20,720
because

414
00:14:18,800 --> 00:14:21,839
ah these are just not loading okay can

415
00:14:20,720 --> 00:14:23,279
we get that cool

416
00:14:21,839 --> 00:14:25,279
so what we've seen here is we've just

417
00:14:23,279 --> 00:14:27,120
created a volume and put it over

418
00:14:25,279 --> 00:14:28,399
part of the proc file system we

419
00:14:27,120 --> 00:14:28,800
shouldn't be able to do that it was a

420
00:14:28,399 --> 00:14:30,560
bug

421
00:14:28,800 --> 00:14:31,920
but this means that when the application

422
00:14:30,560 --> 00:14:33,359
looks for information as to what

423
00:14:31,920 --> 00:14:35,519
apartment configuration

424
00:14:33,360 --> 00:14:36,720
is configured we've overwritten it and

425
00:14:35,519 --> 00:14:38,639
there is none

426
00:14:36,720 --> 00:14:40,000
sly little bypass i don't know how long

427
00:14:38,639 --> 00:14:43,360
this was around for

428
00:14:40,000 --> 00:14:46,399
probably a good long time um yeah proc

429
00:14:43,360 --> 00:14:48,639
self exe this one is fun this is

430
00:14:46,399 --> 00:14:50,240
uh taking a sim link or a pointer

431
00:14:48,639 --> 00:14:52,959
perhaps back to

432
00:14:50,240 --> 00:14:54,000
the uh docker run c binary from inside

433
00:14:52,959 --> 00:14:56,638
the container

434
00:14:54,000 --> 00:14:58,160
overwriting it and popping a shell and i

435
00:14:56,639 --> 00:15:00,880
will attempt to demo

436
00:14:58,160 --> 00:15:02,160
this one where are we now and this other

437
00:15:00,880 --> 00:15:05,680
stuff will carry on

438
00:15:02,160 --> 00:15:05,680
tonight um

439
00:15:10,320 --> 00:15:16,959
okay so let's go here

440
00:15:13,920 --> 00:15:18,560
um so what have we got we have a

441
00:15:16,959 --> 00:15:20,719
dockerfile

442
00:15:18,560 --> 00:15:21,680
and in that dockerfile you can see we

443
00:15:20,720 --> 00:15:23,440
have compiled

444
00:15:21,680 --> 00:15:26,000
some exploits we're actually patching

445
00:15:23,440 --> 00:15:28,720
setcomp inside the container

446
00:15:26,000 --> 00:15:29,199
and then um we're simulinking proc self

447
00:15:28,720 --> 00:15:31,040
exe

448
00:15:29,199 --> 00:15:32,240
to the entry point of the container um i

449
00:15:31,040 --> 00:15:33,599
should point out that none of these

450
00:15:32,240 --> 00:15:35,120
exploits are mine i'm just standing on

451
00:15:33,600 --> 00:15:37,440
the shoulders of giants of course

452
00:15:35,120 --> 00:15:39,120
and all of these are publicly available

453
00:15:37,440 --> 00:15:42,160
so what happens we build

454
00:15:39,120 --> 00:15:43,360
this docker file and actually what we've

455
00:15:42,160 --> 00:15:48,319
done

456
00:15:43,360 --> 00:15:48,320
in the exploit stage here

457
00:15:52,839 --> 00:16:00,480
is

458
00:15:54,560 --> 00:16:00,479
is actually from the other stage

459
00:16:00,560 --> 00:16:02,959
is

460
00:16:07,519 --> 00:16:11,279
is right here we go so we write the

461
00:16:09,440 --> 00:16:13,279
string cv 2019

462
00:16:11,279 --> 00:16:14,560
onto the end of the run c binary what

463
00:16:13,279 --> 00:16:16,399
would we actually do while we just

464
00:16:14,560 --> 00:16:17,680
replace it with a malicious payload like

465
00:16:16,399 --> 00:16:18,880
a file or a bash script that did

466
00:16:17,680 --> 00:16:20,880
something that we wanted

467
00:16:18,880 --> 00:16:23,360
so how do we prove this hasn't yet

468
00:16:20,880 --> 00:16:24,079
worked let's have a look at where run c

469
00:16:23,360 --> 00:16:25,360
is

470
00:16:24,079 --> 00:16:27,920
and we see at the end there is nothing

471
00:16:25,360 --> 00:16:28,560
there and then if we just run this

472
00:16:27,920 --> 00:16:29,759
container

473
00:16:28,560 --> 00:16:34,239
that i built earlier you'll have to

474
00:16:29,759 --> 00:16:37,440
trust me then what are we going to see

475
00:16:34,240 --> 00:16:38,000
nothing there we go so these are the

476
00:16:37,440 --> 00:16:40,639
terms

477
00:16:38,000 --> 00:16:42,160
codes return code consistent calls and

478
00:16:40,639 --> 00:16:43,680
we have appended our string

479
00:16:42,160 --> 00:16:45,279
so again what's happened we're inside a

480
00:16:43,680 --> 00:16:45,839
container a theoretical isolation

481
00:16:45,279 --> 00:16:47,680
boundary

482
00:16:45,839 --> 00:16:49,600
and we've been able to influence or

483
00:16:47,680 --> 00:16:51,120
impact things that sit on the host

484
00:16:49,600 --> 00:16:53,839
this is a bad day this is how we break

485
00:16:51,120 --> 00:16:55,440
out of containers what is the fix here

486
00:16:53,839 --> 00:16:57,440
don't run old versions of software

487
00:16:55,440 --> 00:16:58,800
really really easy but as we know

488
00:16:57,440 --> 00:17:00,880
everything is a people problem and our

489
00:16:58,800 --> 00:17:01,680
organizations probably mean that it's

490
00:17:00,880 --> 00:17:03,519
very difficult

491
00:17:01,680 --> 00:17:05,119
to keep things packed in a timely manner

492
00:17:03,519 --> 00:17:05,760
this is a mutable infrastructure this is

493
00:17:05,119 --> 00:17:08,399
aggressive

494
00:17:05,760 --> 00:17:09,119
builds and pipelines for all of our work

495
00:17:08,400 --> 00:17:12,240
for all

496
00:17:09,119 --> 00:17:12,239
of our servers

497
00:17:12,799 --> 00:17:21,520
onwards right what have we next

498
00:17:18,160 --> 00:17:22,400
all right we've done that one yeah here

499
00:17:21,520 --> 00:17:25,760
is the lesson

500
00:17:22,400 --> 00:17:27,360
patch your hosts we can use

501
00:17:25,760 --> 00:17:29,520
let's talk about this no yeah so we can

502
00:17:27,359 --> 00:17:30,879
use goss to

503
00:17:29,520 --> 00:17:32,240
test the kernel parameters to test the

504
00:17:30,880 --> 00:17:33,200
output of bash scripts the tests for

505
00:17:32,240 --> 00:17:36,480
everything

506
00:17:33,200 --> 00:17:38,640
and we can use it in a sly way um let's

507
00:17:36,480 --> 00:17:40,080
and one of my favorite quotes from uh

508
00:17:38,640 --> 00:17:43,200
esteemed track hosts

509
00:17:40,080 --> 00:17:44,960
containers are a user space fiction i i

510
00:17:43,200 --> 00:17:46,640
love that and it's

511
00:17:44,960 --> 00:17:48,480
you will notice here just don't really

512
00:17:46,640 --> 00:17:50,799
exist let's not forget we are still

513
00:17:48,480 --> 00:17:51,600
in the host kernel we are still poking

514
00:17:50,799 --> 00:17:54,240
around

515
00:17:51,600 --> 00:17:54,959
on the same machine we don't have this

516
00:17:54,240 --> 00:17:57,440
uh nested

517
00:17:54,960 --> 00:17:58,480
we have a virtualization as we would do

518
00:17:57,440 --> 00:18:03,520
with other

519
00:17:58,480 --> 00:18:03,520
containers um other yeah okay

520
00:18:04,000 --> 00:18:07,520
collection of stimuli and restrictions

521
00:18:05,600 --> 00:18:09,520
born from unintelligent design

522
00:18:07,520 --> 00:18:11,360
and years of evolution a lot like

523
00:18:09,520 --> 00:18:13,440
consciousness

524
00:18:11,360 --> 00:18:15,120
is there a lesson here no but everything

525
00:18:13,440 --> 00:18:16,799
on the internet and in our organizations

526
00:18:15,120 --> 00:18:18,959
is held together with string

527
00:18:16,799 --> 00:18:20,639
and sticky tape we should test

528
00:18:18,960 --> 00:18:22,160
everything because when it gets changed

529
00:18:20,640 --> 00:18:23,760
we need to maintain the same behavior as

530
00:18:22,160 --> 00:18:25,120
we had before we're doing this for

531
00:18:23,760 --> 00:18:26,320
ourselves we're doing this for future us

532
00:18:25,120 --> 00:18:27,840
we're doing this for the maintainers of

533
00:18:26,320 --> 00:18:28,320
the system but don't even know who we

534
00:18:27,840 --> 00:18:30,080
were

535
00:18:28,320 --> 00:18:31,678
we're doing this because we are good

536
00:18:30,080 --> 00:18:35,039
open source citizens

537
00:18:31,679 --> 00:18:36,480
and colleagues and we're putting a

538
00:18:35,039 --> 00:18:38,559
security test suite in place

539
00:18:36,480 --> 00:18:40,240
to help it so testing is a dark art it

540
00:18:38,559 --> 00:18:41,200
is a software engineering discipline we

541
00:18:40,240 --> 00:18:44,240
need rigor

542
00:18:41,200 --> 00:18:46,559
we need objectivity

543
00:18:44,240 --> 00:18:48,480
anything can be a security test what do

544
00:18:46,559 --> 00:18:51,840
we do arrange act assert

545
00:18:48,480 --> 00:18:53,600
prepare the environment uh perform some

546
00:18:51,840 --> 00:18:54,840
sort of execution and capture the result

547
00:18:53,600 --> 00:18:56,159
and then assert that it's actually

548
00:18:54,840 --> 00:18:58,639
worked

549
00:18:56,160 --> 00:19:00,080
prove it fails as expected this is very

550
00:18:58,640 --> 00:19:01,440
very important when writing tests

551
00:19:00,080 --> 00:19:02,639
otherwise you've just got a green test

552
00:19:01,440 --> 00:19:05,679
suite that doesn't actually

553
00:19:02,640 --> 00:19:08,400
catch anything and beware acceptance

554
00:19:05,679 --> 00:19:08,400
testing okay

555
00:19:08,480 --> 00:19:12,000
dead set trade yeah this is carry on

556
00:19:10,559 --> 00:19:15,120
could be a bit

557
00:19:12,000 --> 00:19:17,200
pressed for time testing update versions

558
00:19:15,120 --> 00:19:19,280
all right we've got again this is an

559
00:19:17,200 --> 00:19:22,799
example of

560
00:19:19,280 --> 00:19:25,039
how to paste an animated gif as a gif

561
00:19:22,799 --> 00:19:26,480
all right well nevermind there is a link

562
00:19:25,039 --> 00:19:28,480
there because basically

563
00:19:26,480 --> 00:19:29,520
it's very easy to build like test suites

564
00:19:28,480 --> 00:19:31,440
i love them

565
00:19:29,520 --> 00:19:32,559
testing is cool it's the only way we can

566
00:19:31,440 --> 00:19:34,720
prove that we're secure

567
00:19:32,559 --> 00:19:36,480
but we're not proving the absence of

568
00:19:34,720 --> 00:19:38,160
bugs we're not proving that the system

569
00:19:36,480 --> 00:19:39,760
is actually secure we're just saying for

570
00:19:38,160 --> 00:19:41,520
our particular model of it and our

571
00:19:39,760 --> 00:19:45,200
understanding at this point in time

572
00:19:41,520 --> 00:19:49,679
it conforms to some level of security

573
00:19:45,200 --> 00:19:49,679
okay but that was too easy right

574
00:19:50,000 --> 00:19:54,080
let's find some public clusters and

575
00:19:52,559 --> 00:19:56,399
phone those

576
00:19:54,080 --> 00:19:57,760
right and then clusters in the wild how

577
00:19:56,400 --> 00:19:59,520
many insecure kubernetes hosts do you

578
00:19:57,760 --> 00:20:02,960
think we can find a few seconds

579
00:19:59,520 --> 00:20:07,840
ten a hundred thousand

580
00:20:02,960 --> 00:20:07,840
very good it'll be a lot let's go

581
00:20:09,919 --> 00:20:15,520
okay this is yeah

582
00:20:13,200 --> 00:20:16,799
right i have my head of security to

583
00:20:15,520 --> 00:20:19,200
thank for that

584
00:20:16,799 --> 00:20:20,720
right this is binary edge binary

585
00:20:19,200 --> 00:20:24,799
showdown for infrastructure

586
00:20:20,720 --> 00:20:26,320
this search term finds open kubernetes

587
00:20:24,799 --> 00:20:28,320
it's not a nice day if you're on this

588
00:20:26,320 --> 00:20:29,918
list uh

589
00:20:28,320 --> 00:20:31,918
which uh where are we here this is

590
00:20:29,919 --> 00:20:33,280
actually a web page let's uh let's go

591
00:20:31,919 --> 00:20:35,840
back to

592
00:20:33,280 --> 00:20:35,840
yes

593
00:20:36,320 --> 00:20:40,399
this may not be legal in your

594
00:20:37,679 --> 00:20:42,559
jurisdiction alert

595
00:20:40,400 --> 00:20:45,039
what binary edge does is it connects to

596
00:20:42,559 --> 00:20:48,320
unauthenticated api endpoints

597
00:20:45,039 --> 00:20:48,960
that is a gray gray area so take this as

598
00:20:48,320 --> 00:20:50,399
you will

599
00:20:48,960 --> 00:20:52,880
but the platform has already scanned the

600
00:20:50,400 --> 00:20:55,600
ip4 address space for us

601
00:20:52,880 --> 00:20:57,679
and then poked at what it has found uh

602
00:20:55,600 --> 00:21:00,320
we can see up here that is the query

603
00:20:57,679 --> 00:21:00,960
and down here this is some chinese

604
00:21:00,320 --> 00:21:02,720
honeypot

605
00:21:00,960 --> 00:21:04,960
actual cluster who knows i wouldn't

606
00:21:02,720 --> 00:21:09,200
touch it with a barge pole

607
00:21:04,960 --> 00:21:09,200
so here is one i puned earlier

608
00:21:09,679 --> 00:21:12,640
let's go down here

609
00:21:14,840 --> 00:21:20,559
okay

610
00:21:17,679 --> 00:21:22,880
so let's uh some of these so let's test

611
00:21:20,559 --> 00:21:24,399
the api server and see if it is leaking

612
00:21:22,880 --> 00:21:27,679
anything useful

613
00:21:24,400 --> 00:21:28,240
um this is an nmap script that runs in

614
00:21:27,679 --> 00:21:31,840
the mac

615
00:21:28,240 --> 00:21:31,840
scripting engine

616
00:21:33,039 --> 00:21:36,000
let's go back up here

617
00:21:36,640 --> 00:21:42,400
and so m-map cube api server

618
00:21:39,919 --> 00:21:45,840
i run this with a little bit yeah so all

619
00:21:42,400 --> 00:21:45,840
we're doing here is

620
00:21:58,000 --> 00:22:01,840
okay so what we've done there is we've

621
00:22:00,559 --> 00:22:03,440
looked at a certain port we've checked

622
00:22:01,840 --> 00:22:04,399
for an http response and run a regular

623
00:22:03,440 --> 00:22:06,400
expression over it

624
00:22:04,400 --> 00:22:07,600
the regular expression matches git

625
00:22:06,400 --> 00:22:09,760
version git commits

626
00:22:07,600 --> 00:22:11,678
and we can see here that the api server

627
00:22:09,760 --> 00:22:12,158
the kubernetes api server is leaking its

628
00:22:11,679 --> 00:22:13,840
version

629
00:22:12,159 --> 00:22:15,600
information you would not do this with

630
00:22:13,840 --> 00:22:17,199
nginx you would not do it with apache we

631
00:22:15,600 --> 00:22:19,760
learned this lesson a long time ago

632
00:22:17,200 --> 00:22:20,720
but evidently kubernetes is better than

633
00:22:19,760 --> 00:22:24,080
us

634
00:22:20,720 --> 00:22:24,080
uh where are we now

635
00:22:24,840 --> 00:22:28,399
so well what do we think we can do about

636
00:22:28,000 --> 00:22:32,720
that

637
00:22:28,400 --> 00:22:32,720
version any ideas if we can attack it

638
00:22:32,799 --> 00:22:37,120
well one eleven four has uh one of the

639
00:22:35,440 --> 00:22:39,840
mother of all tvs

640
00:22:37,120 --> 00:22:40,639
uh associated with it it is it's poor

641
00:22:39,840 --> 00:22:42,720
error handling in

642
00:22:40,640 --> 00:22:44,000
in the mtls server essentially what

643
00:22:42,720 --> 00:22:45,520
happens is a websocket connection is

644
00:22:44,000 --> 00:22:47,760
instantiated that is

645
00:22:45,520 --> 00:22:49,200
bundled in a tls pipe if you like so the

646
00:22:47,760 --> 00:22:50,879
encryption is established and then

647
00:22:49,200 --> 00:22:52,880
the websocket communication goes over

648
00:22:50,880 --> 00:22:54,080
that there is incorrect handling of the

649
00:22:52,880 --> 00:22:56,400
web socket error

650
00:22:54,080 --> 00:22:57,760
code so the tunnel would stay open and

651
00:22:56,400 --> 00:22:58,640
we could then send whatever commands we

652
00:22:57,760 --> 00:23:00,480
wanted through

653
00:22:58,640 --> 00:23:01,760
this was initially the most extreme

654
00:23:00,480 --> 00:23:03,840
remote code execution

655
00:23:01,760 --> 00:23:04,960
actually it's scoped to reflective apis

656
00:23:03,840 --> 00:23:05,678
and it's a little bit more difficult to

657
00:23:04,960 --> 00:23:08,000
exploit

658
00:23:05,679 --> 00:23:09,440
than we thought about but let's try

659
00:23:08,000 --> 00:23:14,080
anyway

660
00:23:09,440 --> 00:23:17,440
okay so we have here

661
00:23:14,080 --> 00:23:19,678
okay so first of all we will just

662
00:23:17,440 --> 00:23:21,200
run this so we can see we're not

663
00:23:19,679 --> 00:23:22,480
actually running the exploits and as

664
00:23:21,200 --> 00:23:25,200
such

665
00:23:22,480 --> 00:23:25,200
we have

666
00:23:26,080 --> 00:23:29,760
uh and all we're doing here is opening a

667
00:23:29,039 --> 00:23:32,240
socket

668
00:23:29,760 --> 00:23:34,158
and sending this websocket upgrade

669
00:23:32,240 --> 00:23:35,440
connection six times

670
00:23:34,159 --> 00:23:37,520
but it's not handled correctly because

671
00:23:35,440 --> 00:23:40,559
we keep on sending it and exiting

672
00:23:37,520 --> 00:23:42,320
if we then uh

673
00:23:40,559 --> 00:23:43,678
say that we will exploit this to run

674
00:23:42,320 --> 00:23:44,960
that piece of code you'll see

675
00:23:43,679 --> 00:23:47,679
what we have at the bottom which is 403

676
00:23:44,960 --> 00:23:49,360
forbidden magically becomes a 200 okay

677
00:23:47,679 --> 00:23:51,120
as we have an unauthenticated request

678
00:23:49,360 --> 00:23:52,959
handled by the api server

679
00:23:51,120 --> 00:23:55,120
through that connection this is

680
00:23:52,960 --> 00:23:58,240
exploitable but a bit more difficult

681
00:23:55,120 --> 00:23:58,879
and i will leave that as an exercise to

682
00:23:58,240 --> 00:24:01,840
the reader

683
00:23:58,880 --> 00:24:01,840
seven minutes

684
00:24:01,919 --> 00:24:05,520
okay we can now watch it burn we can run

685
00:24:04,640 --> 00:24:07,679
some annette if we

686
00:24:05,520 --> 00:24:09,360
actually got pod deployment access we

687
00:24:07,679 --> 00:24:12,400
could deploy monero minders

688
00:24:09,360 --> 00:24:14,000
miners or change cluster creds uh i'll

689
00:24:12,400 --> 00:24:15,840
delete all the nodes

690
00:24:14,000 --> 00:24:17,440
so more lessons don't run a public api

691
00:24:15,840 --> 00:24:19,840
server endpoint on the internet

692
00:24:17,440 --> 00:24:20,799
it's a privileged api zero trust does

693
00:24:19,840 --> 00:24:23,360
not mean

694
00:24:20,799 --> 00:24:24,000
just trust everything is infinitely

695
00:24:23,360 --> 00:24:25,678
secure

696
00:24:24,000 --> 00:24:27,600
and all our authentication and

697
00:24:25,679 --> 00:24:30,400
authorization mechanisms just work

698
00:24:27,600 --> 00:24:33,039
they don't we would lay ourselves in any

699
00:24:30,400 --> 00:24:36,240
other situation tin foil hats are cool

700
00:24:33,039 --> 00:24:38,320
and moss knows best if you need

701
00:24:36,240 --> 00:24:39,279
another reason why not to run a public

702
00:24:38,320 --> 00:24:41,439
api server

703
00:24:39,279 --> 00:24:43,200
you may have heard of this attack thanks

704
00:24:41,440 --> 00:24:45,600
to roy mccune brad keitemann

705
00:24:43,200 --> 00:24:48,080
and ian coldwater for bringing the honk

706
00:24:45,600 --> 00:24:48,080
on this one

707
00:24:49,919 --> 00:24:54,559
this is uh essentially it's a fork bomb

708
00:24:53,600 --> 00:24:56,399
for yaml

709
00:24:54,559 --> 00:24:59,200
it's like a zip bomb it's internal

710
00:24:56,400 --> 00:25:00,720
recursion it will exhaust our api

711
00:24:59,200 --> 00:25:02,480
it should be noted that any string will

712
00:25:00,720 --> 00:25:03,679
do in data key a

713
00:25:02,480 --> 00:25:06,240
but honk has been emphatically

714
00:25:03,679 --> 00:25:09,200
recommended by the authors

715
00:25:06,240 --> 00:25:10,400
another open api moral zero trust trust

716
00:25:09,200 --> 00:25:12,080
verify mutual cryptographic

717
00:25:10,400 --> 00:25:14,720
authentication does not preclude the

718
00:25:12,080 --> 00:25:17,199
existence of other bugs

719
00:25:14,720 --> 00:25:19,120
and of course we update and we keep

720
00:25:17,200 --> 00:25:21,440
ourselves the hell offline

721
00:25:19,120 --> 00:25:24,719
okay let's see if this one was done in

722
00:25:21,440 --> 00:25:24,720
how many minutes i have left

723
00:25:26,880 --> 00:25:34,159
again i may suffer uh where am i

724
00:25:31,520 --> 00:25:35,760
oh that's another api test so let's try

725
00:25:34,159 --> 00:25:38,080
that again i don't know why that failed

726
00:25:35,760 --> 00:25:39,279
uh yeah of course we can write tests for

727
00:25:38,080 --> 00:25:40,799
everything and anything that we can

728
00:25:39,279 --> 00:25:44,080
programmatically

729
00:25:40,799 --> 00:25:46,720
do and this is just uh

730
00:25:44,080 --> 00:25:47,840
a test for the presence of bats and we

731
00:25:46,720 --> 00:25:48,720
don't care so much because we're now on

732
00:25:47,840 --> 00:25:51,760
the billionaire last

733
00:25:48,720 --> 00:25:56,000
okay so what do we have here

734
00:25:51,760 --> 00:25:59,200
uh so this is

735
00:25:56,000 --> 00:26:00,559
my nice server and i'm looking for

736
00:25:59,200 --> 00:26:03,840
something that i've now lost

737
00:26:00,559 --> 00:26:05,200
here we go so we'll run we've got time

738
00:26:03,840 --> 00:26:06,959
to do this we'll run that data so we can

739
00:26:05,200 --> 00:26:08,559
actually see something going on

740
00:26:06,960 --> 00:26:10,640
we'll check the api server logs we'll

741
00:26:08,559 --> 00:26:14,080
watch events and we

742
00:26:10,640 --> 00:26:17,760
will uh basically just fire loads of

743
00:26:14,080 --> 00:26:17,760
requests let's see what that says

744
00:26:18,080 --> 00:26:21,840
so we've got an exploit here which is

745
00:26:19,600 --> 00:26:25,840
just going to run

746
00:26:21,840 --> 00:26:25,840
this um

747
00:26:30,159 --> 00:26:33,679
so all we're doing is sending the self

748
00:26:31,600 --> 00:26:35,840
subject access review which says

749
00:26:33,679 --> 00:26:37,279
as an unauthenticated user if i was this

750
00:26:35,840 --> 00:26:39,279
user what would i be able to do

751
00:26:37,279 --> 00:26:40,400
that is not an authenticated api call we

752
00:26:39,279 --> 00:26:44,159
send our payload

753
00:26:40,400 --> 00:26:45,760
billions of honks and we are just doing

754
00:26:44,159 --> 00:26:47,039
it again and again and again which is

755
00:26:45,760 --> 00:26:50,080
what the try medium

756
00:26:47,039 --> 00:26:54,158
prefix is on this

757
00:26:50,080 --> 00:26:55,439
let's now source it okay

758
00:26:54,159 --> 00:26:57,520
so we'll come back to this in a minute

759
00:26:55,440 --> 00:26:58,240
but what we will start to see is the api

760
00:26:57,520 --> 00:27:00,000
server

761
00:26:58,240 --> 00:27:01,440
exhausting its threads failing its

762
00:27:00,000 --> 00:27:03,039
health checks and restarting

763
00:27:01,440 --> 00:27:04,640
because we keep so many sockets open

764
00:27:03,039 --> 00:27:06,400
doing this that is the end of the api

765
00:27:04,640 --> 00:27:08,240
servers even if they're load balanced

766
00:27:06,400 --> 00:27:09,840
there is an asymmetrical data flood in

767
00:27:08,240 --> 00:27:10,799
this attack they cannot handle the

768
00:27:09,840 --> 00:27:12,720
amount of

769
00:27:10,799 --> 00:27:14,720
recursion necessarily to infinitely

770
00:27:12,720 --> 00:27:18,799
recurse unsurprisingly

771
00:27:14,720 --> 00:27:21,840
so uh we will keep on going

772
00:27:18,799 --> 00:27:21,840
indeed we have the time

773
00:27:22,000 --> 00:27:26,799
that unfortunately i just started again

774
00:27:23,919 --> 00:27:28,799
that's not what you want to see

775
00:27:26,799 --> 00:27:30,320
testing testing a range active cert for

776
00:27:28,799 --> 00:27:31,840
network infrastructure well we've built

777
00:27:30,320 --> 00:27:33,600
a tool at control plane netizer is

778
00:27:31,840 --> 00:27:34,799
highly parallelized nmap these slides

779
00:27:33,600 --> 00:27:36,320
are available later

780
00:27:34,799 --> 00:27:38,000
we love batchcore i am the only

781
00:27:36,320 --> 00:27:38,879
maintainer left on this project please

782
00:27:38,000 --> 00:27:42,159
join me

783
00:27:38,880 --> 00:27:44,000
it's useful assertions for bash

784
00:27:42,159 --> 00:27:45,760
we've built some extensive and expansive

785
00:27:44,000 --> 00:27:48,880
test suites with that it's brilliant

786
00:27:45,760 --> 00:27:50,399
who runs istio in the room a few people

787
00:27:48,880 --> 00:27:53,600
this is for you

788
00:27:50,399 --> 00:27:55,039
especially you sir okay uh

789
00:27:53,600 --> 00:27:56,080
seo threats we did a lot of threat

790
00:27:55,039 --> 00:27:57,360
modeling around this there's lots of

791
00:27:56,080 --> 00:27:58,639
stuff that would go wrong with istio we

792
00:27:57,360 --> 00:27:59,120
don't use the pod security policy

793
00:27:58,640 --> 00:28:00,799
because it

794
00:27:59,120 --> 00:28:02,399
doesn't let us configure it so we have

795
00:28:00,799 --> 00:28:06,080
to use opa let's

796
00:28:02,399 --> 00:28:10,639
attack the mesh in the last two minutes

797
00:28:06,080 --> 00:28:15,520
okay so what have we got here

798
00:28:10,640 --> 00:28:15,520
what number are we on uh i server

799
00:28:18,240 --> 00:28:22,559
um i think i may actually be out of time

800
00:28:20,880 --> 00:28:24,399
but

801
00:28:22,559 --> 00:28:26,080
uh suffice to say there is no endpoint

802
00:28:24,399 --> 00:28:28,959
security you can hit

803
00:28:26,080 --> 00:28:29,600
localhost 1500 triple quits you can post

804
00:28:28,960 --> 00:28:31,120
to it

805
00:28:29,600 --> 00:28:33,120
and this issue will explain how you

806
00:28:31,120 --> 00:28:33,918
knock yourself off the mesh it is going

807
00:28:33,120 --> 00:28:34,799
to be fixed

808
00:28:33,919 --> 00:28:36,640
let's just start by making the

809
00:28:34,799 --> 00:28:37,918
administration's face and recursively

810
00:28:36,640 --> 00:28:40,799
correct ourselves

811
00:28:37,919 --> 00:28:41,840
um we are almost there how do we evade

812
00:28:40,799 --> 00:28:44,240
detection

813
00:28:41,840 --> 00:28:45,120
we stop the api server emitting its

814
00:28:44,240 --> 00:28:46,799
audit logs

815
00:28:45,120 --> 00:28:48,479
we black hole traffic we get in the way

816
00:28:46,799 --> 00:28:49,039
of the end point we deny the service the

817
00:28:48,480 --> 00:28:51,279
end point

818
00:28:49,039 --> 00:28:52,399
we root the cluster and we turn them off

819
00:28:51,279 --> 00:28:54,320
nice and easy

820
00:28:52,399 --> 00:28:55,918
deal with kubernetes hacking in a safe

821
00:28:54,320 --> 00:28:57,439
space how do we teach everybody the

822
00:28:55,919 --> 00:28:58,640
extreme amount of content i've packed

823
00:28:57,440 --> 00:29:00,640
into 30 minutes

824
00:28:58,640 --> 00:29:02,000
with this tool my time is up it teaches

825
00:29:00,640 --> 00:29:02,799
you all of this stuff but it's really

826
00:29:02,000 --> 00:29:06,559
great

827
00:29:02,799 --> 00:29:13,840
this is all wonderful that's everything

828
00:29:06,559 --> 00:29:13,840
that's unexpected thank you very much

829
00:29:25,760 --> 00:29:27,840
you

