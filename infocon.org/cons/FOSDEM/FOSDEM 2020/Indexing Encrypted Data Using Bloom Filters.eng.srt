1
00:00:05,759 --> 00:00:12,400
hello everybody

2
00:00:08,320 --> 00:00:16,400
the next talk is from claude veron

3
00:00:12,400 --> 00:00:18,480
his talk is about indexing encrypted

4
00:00:16,400 --> 00:00:21,759
data using bloom filters

5
00:00:18,480 --> 00:00:21,760
give him a warm welcome

6
00:00:24,480 --> 00:00:29,599
thank you okay first off there's

7
00:00:28,320 --> 00:00:32,000
there's going to be a lot of information

8
00:00:29,599 --> 00:00:35,360
on these slides don't try to read it all

9
00:00:32,000 --> 00:00:38,000
at once um it's available on the

10
00:00:35,360 --> 00:00:40,239
fosdem website and download it or in

11
00:00:38,000 --> 00:00:42,480
researchgate there so if you want to

12
00:00:40,239 --> 00:00:43,680
grab that so we're going to talk about

13
00:00:42,480 --> 00:00:45,360
encrypting

14
00:00:43,680 --> 00:00:47,600
data or researching encrypted data with

15
00:00:45,360 --> 00:00:49,120
bloom filters and we'll go through this

16
00:00:47,600 --> 00:00:50,879
process here we'll talk about the the

17
00:00:49,120 --> 00:00:52,879
goals and the the process

18
00:00:50,879 --> 00:00:54,399
to do that i'll talk a little

19
00:00:52,879 --> 00:00:57,680
introduction to bloom filters

20
00:00:54,399 --> 00:00:58,079
uh i have an example of doing this and

21
00:00:57,680 --> 00:01:00,320
we'll

22
00:00:58,079 --> 00:01:01,680
make sure we see if we met the goals and

23
00:01:00,320 --> 00:01:03,680
then there's some additional information

24
00:01:01,680 --> 00:01:06,640
and some resources

25
00:01:03,680 --> 00:01:08,240
at the end of the slides so first off

26
00:01:06,640 --> 00:01:08,799
the goals here first i want to point out

27
00:01:08,240 --> 00:01:11,280
first that

28
00:01:08,799 --> 00:01:12,000
indexing encrypted data using bloom

29
00:01:11,280 --> 00:01:13,680
filters is not

30
00:01:12,000 --> 00:01:15,280
a new idea this has been around for a

31
00:01:13,680 --> 00:01:17,119
little while there's a number of papers

32
00:01:15,280 --> 00:01:19,040
written about it

33
00:01:17,119 --> 00:01:20,560
but what what has changed is that we now

34
00:01:19,040 --> 00:01:23,200
have multi-dimensional bloom filters

35
00:01:20,560 --> 00:01:25,200
which is a mechanism for indexing

36
00:01:23,200 --> 00:01:27,200
uh bloom filters so you can we can now

37
00:01:25,200 --> 00:01:28,960
search large numbers of bloom filters

38
00:01:27,200 --> 00:01:31,439
very quickly

39
00:01:28,960 --> 00:01:32,158
um so what we're going to do here is

40
00:01:31,439 --> 00:01:35,279
we're going to

41
00:01:32,159 --> 00:01:37,040
identify encrypted documents or records

42
00:01:35,280 --> 00:01:38,240
that contain specific data

43
00:01:37,040 --> 00:01:40,159
and we're going to do this without

44
00:01:38,240 --> 00:01:41,920
decrypting the documents

45
00:01:40,159 --> 00:01:43,600
and we're going to try not to leak data

46
00:01:41,920 --> 00:01:44,960
through the index and not leak data

47
00:01:43,600 --> 00:01:46,399
through the queries

48
00:01:44,960 --> 00:01:48,320
what we're not going to talk about is

49
00:01:46,399 --> 00:01:49,520
how you distribute keys how you make

50
00:01:48,320 --> 00:01:51,199
sure that when you get the encrypted

51
00:01:49,520 --> 00:01:53,600
document you can decrypt it

52
00:01:51,200 --> 00:01:55,360
and none of that that's a separate

53
00:01:53,600 --> 00:01:58,158
problem that

54
00:01:55,360 --> 00:01:58,159
won't cover today

55
00:01:58,479 --> 00:02:03,759
okay so the process for doing this um

56
00:02:02,000 --> 00:02:06,479
first the right process obviously we

57
00:02:03,759 --> 00:02:08,560
need to start with our document or our

58
00:02:06,479 --> 00:02:11,440
properties we extract those and we

59
00:02:08,560 --> 00:02:13,200
create a bloom filter

60
00:02:11,440 --> 00:02:14,239
and then we encrypt the document so we

61
00:02:13,200 --> 00:02:15,440
have to start with an unencrypted

62
00:02:14,239 --> 00:02:17,280
document

63
00:02:15,440 --> 00:02:19,599
we get the properties encrypt the

64
00:02:17,280 --> 00:02:22,800
document we store the document

65
00:02:19,599 --> 00:02:25,040
in the encrypted database or

66
00:02:22,800 --> 00:02:26,640
encrypted in the database and then we

67
00:02:25,040 --> 00:02:28,400
store the we get the record back from

68
00:02:26,640 --> 00:02:30,000
the database and then we store the bloom

69
00:02:28,400 --> 00:02:32,319
filter and that reference

70
00:02:30,000 --> 00:02:34,480
in the uh multi-dimensional bloom filter

71
00:02:32,319 --> 00:02:35,839
or in the index the bloom filter index

72
00:02:34,480 --> 00:02:38,238
you know if you're storing a thousand

73
00:02:35,840 --> 00:02:39,440
filters or less um the fastest way to do

74
00:02:38,239 --> 00:02:41,599
that is a linear search

75
00:02:39,440 --> 00:02:42,800
and uh there just isn't a solution that

76
00:02:41,599 --> 00:02:45,280
can go faster than that

77
00:02:42,800 --> 00:02:47,040
once you get above a thousand records uh

78
00:02:45,280 --> 00:02:48,480
it starts to make sense to use something

79
00:02:47,040 --> 00:02:49,599
other than that as a different type of

80
00:02:48,480 --> 00:02:53,359
multi-dimensional

81
00:02:49,599 --> 00:02:55,518
bloom filter now our read process

82
00:02:53,360 --> 00:02:57,280
then this is fairly simple we take the

83
00:02:55,519 --> 00:02:59,680
properties we're looking for

84
00:02:57,280 --> 00:03:01,120
we hash them create the bloom filter we

85
00:02:59,680 --> 00:03:02,239
ask the multi-dimensional bloom filter

86
00:03:01,120 --> 00:03:04,159
for all the matches

87
00:03:02,239 --> 00:03:05,680
that'll tell us the records that match

88
00:03:04,159 --> 00:03:07,359
potentially match

89
00:03:05,680 --> 00:03:09,360
uh we get those back their encrypted

90
00:03:07,360 --> 00:03:11,680
records we can then decrypt them

91
00:03:09,360 --> 00:03:13,040
and uh and then filter out any false

92
00:03:11,680 --> 00:03:15,200
positives

93
00:03:13,040 --> 00:03:17,200
and you might ask why false positives

94
00:03:15,200 --> 00:03:19,200
what's what's going on there

95
00:03:17,200 --> 00:03:21,200
well the answer is in the bloom filter

96
00:03:19,200 --> 00:03:23,679
itself the bloom filter

97
00:03:21,200 --> 00:03:25,839
is this probabilistic data structure was

98
00:03:23,680 --> 00:03:26,159
described by burton bloom in 1970 and

99
00:03:25,840 --> 00:03:28,720
there's

100
00:03:26,159 --> 00:03:30,319
a reference to the paper there but you

101
00:03:28,720 --> 00:03:31,680
create the bloom filter by hashing your

102
00:03:30,319 --> 00:03:33,920
data multiple times

103
00:03:31,680 --> 00:03:35,280
so we've got a one-way hash we're going

104
00:03:33,920 --> 00:03:36,879
to run that against our properties

105
00:03:35,280 --> 00:03:40,480
multiple times and then we turn

106
00:03:36,879 --> 00:03:42,239
on a bit in a bit vector

107
00:03:40,480 --> 00:03:44,319
we can use the filters we can merge them

108
00:03:42,239 --> 00:03:45,760
together by creating a union of the bits

109
00:03:44,319 --> 00:03:47,440
that are turned on we can determine

110
00:03:45,760 --> 00:03:48,879
membership by doing intersection and

111
00:03:47,440 --> 00:03:51,200
seeing if we get back the one that we're

112
00:03:48,879 --> 00:03:53,040
looking for

113
00:03:51,200 --> 00:03:54,560
and because of this process it can yield

114
00:03:53,040 --> 00:03:56,239
false positives it'll tell you things

115
00:03:54,560 --> 00:03:56,879
exist in the in the filter when they

116
00:03:56,239 --> 00:03:58,560
don't

117
00:03:56,879 --> 00:04:00,399
but it'll never tell you that something

118
00:03:58,560 --> 00:04:01,920
doesn't exist in the filter if it is

119
00:04:00,400 --> 00:04:04,400
there

120
00:04:01,920 --> 00:04:05,599
so in our in our process when we get to

121
00:04:04,400 --> 00:04:07,200
the final step

122
00:04:05,599 --> 00:04:09,760
you have to filter out the the false

123
00:04:07,200 --> 00:04:09,760
positives

124
00:04:10,400 --> 00:04:14,879
oops let's go the other direction there

125
00:04:12,159 --> 00:04:16,478
we go all right so how was it defined

126
00:04:14,879 --> 00:04:18,000
um they are constrained by four

127
00:04:16,478 --> 00:04:20,320
properties basically

128
00:04:18,000 --> 00:04:21,519
you have the probability of a false

129
00:04:20,320 --> 00:04:23,040
positive

130
00:04:21,519 --> 00:04:25,040
you have the number of elements that the

131
00:04:23,040 --> 00:04:26,479
set represents

132
00:04:25,040 --> 00:04:28,560
you have the number of bits that are in

133
00:04:26,479 --> 00:04:30,240
the bit vector and the number of hash

134
00:04:28,560 --> 00:04:31,919
functions that you use so how many bits

135
00:04:30,240 --> 00:04:34,720
do you turn on for each element that

136
00:04:31,919 --> 00:04:34,719
you're going to put in

137
00:04:34,960 --> 00:04:39,198
uh mitch marker and upfall shown that

138
00:04:37,199 --> 00:04:42,320
those are all related by this equation

139
00:04:39,199 --> 00:04:44,479
on the on the chart there and

140
00:04:42,320 --> 00:04:45,680
thomas hurst has a calculator online so

141
00:04:44,479 --> 00:04:46,960
you can go in and play with the numbers

142
00:04:45,680 --> 00:04:48,960
and see what happens

143
00:04:46,960 --> 00:04:51,758
as you change these numbers and how they

144
00:04:48,960 --> 00:04:51,758
how they interact

145
00:04:51,840 --> 00:04:56,560
okay so we can now construct one and

146
00:04:54,960 --> 00:04:58,000
we've once we've figured out what our

147
00:04:56,560 --> 00:05:00,080
properties are going to be and how many

148
00:04:58,000 --> 00:05:01,680
objects we're going to put in and such

149
00:05:00,080 --> 00:05:03,359
then we come in and we have a number of

150
00:05:01,680 --> 00:05:04,880
buffers

151
00:05:03,360 --> 00:05:06,320
we know how big the bit buffer is that

152
00:05:04,880 --> 00:05:08,400
we're going to construct that was the m

153
00:05:06,320 --> 00:05:09,599
in the previous page

154
00:05:08,400 --> 00:05:11,758
we have the note so we go through each

155
00:05:09,600 --> 00:05:14,479
of the buffers and then for each of the

156
00:05:11,759 --> 00:05:16,080
uh hash number of hashes that we need we

157
00:05:14,479 --> 00:05:18,560
hash the buffer

158
00:05:16,080 --> 00:05:19,199
we take the mod turn the bit on in the

159
00:05:18,560 --> 00:05:20,639
bit buffer

160
00:05:19,199 --> 00:05:22,320
and we do that until we're done with the

161
00:05:20,639 --> 00:05:23,039
buffers and what you have left is this

162
00:05:22,320 --> 00:05:26,240
bit vector

163
00:05:23,039 --> 00:05:28,880
that is effectively your bloom filter

164
00:05:26,240 --> 00:05:29,360
okay now apache commons in version four

165
00:05:28,880 --> 00:05:31,600
five

166
00:05:29,360 --> 00:05:33,120
which is still a snapshot edition now

167
00:05:31,600 --> 00:05:35,759
has bloom filters

168
00:05:33,120 --> 00:05:37,360
involved you can use that and there's

169
00:05:35,759 --> 00:05:38,240
four lines of code here that describe

170
00:05:37,360 --> 00:05:41,840
how to do that

171
00:05:38,240 --> 00:05:43,600
in the in using the apache commons

172
00:05:41,840 --> 00:05:45,440
so you get the hash vector you have to

173
00:05:43,600 --> 00:05:48,880
get the uh the hash function

174
00:05:45,440 --> 00:05:50,880
in this case it's a murmur 128 hash

175
00:05:48,880 --> 00:05:52,320
we have a shape and then we're saying

176
00:05:50,880 --> 00:05:53,840
we're going to use that hash we're going

177
00:05:52,320 --> 00:05:56,800
to put 10 items

178
00:05:53,840 --> 00:05:58,719
into the filter and we want one in 2

179
00:05:56,800 --> 00:06:00,160
million

180
00:05:58,720 --> 00:06:02,639
you know probability of collision that's

181
00:06:00,160 --> 00:06:04,240
what we'll accept

182
00:06:02,639 --> 00:06:06,560
and then we create a dynamic hasher and

183
00:06:04,240 --> 00:06:08,160
in this case i only put one buffer in

184
00:06:06,560 --> 00:06:08,479
but if we had 10 buffers we would have

185
00:06:08,160 --> 00:06:11,440
10

186
00:06:08,479 --> 00:06:12,080
case 10 you know with statements and

187
00:06:11,440 --> 00:06:13,919
then build

188
00:06:12,080 --> 00:06:15,599
the hasher and then the final step is to

189
00:06:13,919 --> 00:06:18,400
build the bloom filter itself

190
00:06:15,600 --> 00:06:19,600
using the hasher and the shape so in the

191
00:06:18,400 --> 00:06:20,000
end here we end up with this bloom

192
00:06:19,600 --> 00:06:23,360
filter

193
00:06:20,000 --> 00:06:23,360
that represents the one object

194
00:06:23,759 --> 00:06:28,319
okay now there are some issues with this

195
00:06:26,080 --> 00:06:28,800
uh interval data doesn't work really

196
00:06:28,319 --> 00:06:30,639
well

197
00:06:28,800 --> 00:06:32,160
you cannot do less than greater than

198
00:06:30,639 --> 00:06:33,919
kind of comparisons

199
00:06:32,160 --> 00:06:35,840
but you can get around this by looking

200
00:06:33,919 --> 00:06:38,000
at you know small medium large and

201
00:06:35,840 --> 00:06:40,560
convert them to an ordinal values

202
00:06:38,000 --> 00:06:42,160
you can transform to integer values you

203
00:06:40,560 --> 00:06:43,840
could put the decimal value in

204
00:06:42,160 --> 00:06:45,440
but then you'd be looking for an exact

205
00:06:43,840 --> 00:06:48,000
match for that decimal value

206
00:06:45,440 --> 00:06:49,280
so if that works that's great but

207
00:06:48,000 --> 00:06:52,319
otherwise you might want to

208
00:06:49,280 --> 00:06:53,599
think about changing that data a bit

209
00:06:52,319 --> 00:06:56,960
the other problem you get is when you

210
00:06:53,599 --> 00:06:58,800
have properties that have similar values

211
00:06:56,960 --> 00:07:00,318
and the example i have here is that i'm

212
00:06:58,800 --> 00:07:02,000
talking about automobiles and if you

213
00:07:00,319 --> 00:07:03,840
talk about uh

214
00:07:02,000 --> 00:07:06,080
interior and exterior color and you have

215
00:07:03,840 --> 00:07:07,679
a white car with a red interior

216
00:07:06,080 --> 00:07:09,440
well you might have a red car with a

217
00:07:07,680 --> 00:07:10,080
white interior you would get a conflict

218
00:07:09,440 --> 00:07:12,319
there

219
00:07:10,080 --> 00:07:13,919
so that would be you know actually get a

220
00:07:12,319 --> 00:07:16,639
collision in your data

221
00:07:13,919 --> 00:07:18,560
so you can get around that by adding the

222
00:07:16,639 --> 00:07:20,400
the property name to the front of it as

223
00:07:18,560 --> 00:07:22,240
shown here with exterior white interior

224
00:07:20,400 --> 00:07:23,039
red or or something like that to make

225
00:07:22,240 --> 00:07:26,400
the values

226
00:07:23,039 --> 00:07:27,360
different so just some of the things you

227
00:07:26,400 --> 00:07:29,840
have to think about when you're doing

228
00:07:27,360 --> 00:07:31,440
the encoding

229
00:07:29,840 --> 00:07:33,198
right so i'm going to do a demo here for

230
00:07:31,440 --> 00:07:35,039
how this actually works but

231
00:07:33,199 --> 00:07:36,639
um i'm going to use the geonames

232
00:07:35,039 --> 00:07:38,880
database and for those of you who

233
00:07:36,639 --> 00:07:39,759
don't know what it is it is a database

234
00:07:38,880 --> 00:07:41,840
of

235
00:07:39,759 --> 00:07:43,120
basically every place that's got a name

236
00:07:41,840 --> 00:07:45,280
on the planet

237
00:07:43,120 --> 00:07:47,840
there's over 11 million unique features

238
00:07:45,280 --> 00:07:49,280
in it each of those objects has about 20

239
00:07:47,840 --> 00:07:51,679
properties

240
00:07:49,280 --> 00:07:54,479
for the purposes of this demo i'm simply

241
00:07:51,680 --> 00:07:57,199
going to select the feature code

242
00:07:54,479 --> 00:07:58,560
the country code and the first 10 names

243
00:07:57,199 --> 00:08:00,319
for the property because it has

244
00:07:58,560 --> 00:08:02,000
those properties can have multiple names

245
00:08:00,319 --> 00:08:03,280
some of them only have one but

246
00:08:02,000 --> 00:08:06,240
there's at least one in there that has

247
00:08:03,280 --> 00:08:08,318
over 300 names for this location

248
00:08:06,240 --> 00:08:11,199
there are 680 unique features in the

249
00:08:08,319 --> 00:08:13,440
database and there are 252 countries

250
00:08:11,199 --> 00:08:14,400
okay and i'm going to take the first two

251
00:08:13,440 --> 00:08:18,080
million of the

252
00:08:14,400 --> 00:08:21,440
those records and index them

253
00:08:18,080 --> 00:08:23,680
okay so um the demo code is available

254
00:08:21,440 --> 00:08:24,800
it's uh in the references so we're gonna

255
00:08:23,680 --> 00:08:27,919
take the first two million

256
00:08:24,800 --> 00:08:31,039
we're going to use the murmur hash like

257
00:08:27,919 --> 00:08:34,319
was noted in the earlier

258
00:08:31,039 --> 00:08:35,760
slide we're expecting we're putting 10

259
00:08:34,320 --> 00:08:37,200
objects in because i said we would take

260
00:08:35,760 --> 00:08:38,958
the first 10 value to take those 10

261
00:08:37,200 --> 00:08:40,959
values 10 names plus the 2

262
00:08:38,958 --> 00:08:42,319
it's actually 12 but most things don't

263
00:08:40,958 --> 00:08:45,119
have 10 names so we'll

264
00:08:42,320 --> 00:08:46,560
we'll slide by with by saying 10. uh

265
00:08:45,120 --> 00:08:47,200
we're gonna probability of one and two

266
00:08:46,560 --> 00:08:48,640
million

267
00:08:47,200 --> 00:08:50,399
uh and then you run that through the

268
00:08:48,640 --> 00:08:51,760
calculation and so you get an m of three

269
00:08:50,399 --> 00:08:54,720
hundred and two

270
00:08:51,760 --> 00:08:55,439
so that our room filter is 302 bits wide

271
00:08:54,720 --> 00:08:58,000
where

272
00:08:55,440 --> 00:09:00,640
each object that we every property we

273
00:08:58,000 --> 00:09:02,720
put in we have to hash it 21 times

274
00:09:00,640 --> 00:09:04,080
and we get a probability of just one

275
00:09:02,720 --> 00:09:07,040
over one in

276
00:09:04,080 --> 00:09:07,040
just over two million

277
00:09:07,200 --> 00:09:12,000
um the bloom filter library

278
00:09:10,480 --> 00:09:13,600
multi-dimensional bloom filter library

279
00:09:12,000 --> 00:09:14,640
has a hasher that doesn't retain the

280
00:09:13,600 --> 00:09:17,279
bite buffers

281
00:09:14,640 --> 00:09:18,959
so when we do the hashing you no longer

282
00:09:17,279 --> 00:09:20,000
have this the string that you hashed

283
00:09:18,959 --> 00:09:22,079
some of the other ones do

284
00:09:20,000 --> 00:09:25,040
but this this one doesn't so all we're

285
00:09:22,080 --> 00:09:28,399
going to have is the hashed values

286
00:09:25,040 --> 00:09:32,079
um okay the demo loads and it

287
00:09:28,399 --> 00:09:33,839
tells us hopefully that we've got

288
00:09:32,080 --> 00:09:35,680
two million oh good it worked we loaded

289
00:09:33,839 --> 00:09:38,000
anyway um

290
00:09:35,680 --> 00:09:38,880
so we've loaded 2 million records there

291
00:09:38,000 --> 00:09:42,240
are 400

292
00:09:38,880 --> 00:09:45,920
704 899 unique

293
00:09:42,240 --> 00:09:49,440
filters so we do have some collisions

294
00:09:45,920 --> 00:09:50,240
uh and i can enter let's see if we can

295
00:09:49,440 --> 00:09:53,120
do this

296
00:09:50,240 --> 00:09:53,120
with las vegas

297
00:09:53,680 --> 00:09:59,199
because that's where i grew up and ppl

298
00:09:57,120 --> 00:10:00,399
because it is a populated place and

299
00:09:59,200 --> 00:10:03,600
that's the code that

300
00:10:00,399 --> 00:10:07,920
geonames uses for populated place

301
00:10:03,600 --> 00:10:11,360
and then it gave me a whole list of them

302
00:10:07,920 --> 00:10:14,640
and if i scroll back

303
00:10:11,360 --> 00:10:19,120
hopefully if i can do this

304
00:10:14,640 --> 00:10:22,240
come on come on pay attention

305
00:10:19,120 --> 00:10:23,839
okay well we'll see if we get it up too

306
00:10:22,240 --> 00:10:27,600
far

307
00:10:23,839 --> 00:10:32,000
um yeah well there are

308
00:10:27,600 --> 00:10:35,839
several of them anyway

309
00:10:32,000 --> 00:10:37,360
ah there we go so there's one in uh

310
00:10:35,839 --> 00:10:39,600
that's in the bogota time

311
00:10:37,360 --> 00:10:41,200
so it's in colombia there's another one

312
00:10:39,600 --> 00:10:42,800
in colombia it's got you see it's got a

313
00:10:41,200 --> 00:10:44,959
couple of names there

314
00:10:42,800 --> 00:10:46,240
so this is the data that the geo names

315
00:10:44,959 --> 00:10:50,160
data

316
00:10:46,240 --> 00:10:54,320
um that one's in cuba

317
00:10:50,160 --> 00:10:54,319
so it found a number of las vegas

318
00:10:54,720 --> 00:11:01,920
las vegas around the world um

319
00:10:58,800 --> 00:11:04,560
very quickly and

320
00:11:01,920 --> 00:11:05,760
let's see um i was going to try

321
00:11:04,560 --> 00:11:07,439
something like

322
00:11:05,760 --> 00:11:09,600
what and see if it comes up with

323
00:11:07,440 --> 00:11:11,200
anything and it didn't um

324
00:11:09,600 --> 00:11:12,880
the next piece is going to do actually

325
00:11:11,200 --> 00:11:15,200
is i have it

326
00:11:12,880 --> 00:11:16,000
do a query have the demo do a query for

327
00:11:15,200 --> 00:11:19,360
all

328
00:11:16,000 --> 00:11:20,560
that first 2000 most common words in

329
00:11:19,360 --> 00:11:24,800
english

330
00:11:20,560 --> 00:11:28,079
and it does have a number of

331
00:11:24,800 --> 00:11:31,519
collisions so actually there was one

332
00:11:28,079 --> 00:11:34,640
there so saw

333
00:11:31,519 --> 00:11:37,839
apparently um if you just

334
00:11:34,640 --> 00:11:41,360
were to send in the word saw as your key

335
00:11:37,839 --> 00:11:44,320
it would tell you that this uh

336
00:11:41,360 --> 00:11:45,040
zinjan i suppose i can't get this to

337
00:11:44,320 --> 00:11:47,920
scroll down

338
00:11:45,040 --> 00:11:47,920
well that's um

339
00:11:48,160 --> 00:11:54,880
is the uh this is

340
00:11:51,519 --> 00:11:59,040
there we go there a couple of them so

341
00:11:54,880 --> 00:12:02,560
somehow saw hashes to one of the values

342
00:11:59,040 --> 00:12:03,920
for this location these actually two

343
00:12:02,560 --> 00:12:06,638
locations

344
00:12:03,920 --> 00:12:07,839
um and obviously you would filter them

345
00:12:06,639 --> 00:12:09,120
out then at the end

346
00:12:07,839 --> 00:12:10,720
when you've decrypted the data and

347
00:12:09,120 --> 00:12:11,760
you're looking for saw you go well it's

348
00:12:10,720 --> 00:12:15,920
not here

349
00:12:11,760 --> 00:12:19,920
obviously this is not what i want um

350
00:12:15,920 --> 00:12:23,279
okay so

351
00:12:19,920 --> 00:12:24,399
that's the uh there's the demo we did

352
00:12:23,279 --> 00:12:27,760
that okay

353
00:12:24,399 --> 00:12:29,279
so did we meet the goals um

354
00:12:27,760 --> 00:12:31,279
we're able to identify encrypted

355
00:12:29,279 --> 00:12:32,240
documents those documents i'll be honest

356
00:12:31,279 --> 00:12:33,760
they were encrypted

357
00:12:32,240 --> 00:12:35,760
i did the search and then decrypted to

358
00:12:33,760 --> 00:12:37,279
show it on the screen so we did search

359
00:12:35,760 --> 00:12:40,000
the encrypted documents

360
00:12:37,279 --> 00:12:41,439
for the data that we were looking for we

361
00:12:40,000 --> 00:12:44,480
did not require decryption of the

362
00:12:41,440 --> 00:12:46,560
documents to do the search

363
00:12:44,480 --> 00:12:48,079
um did we leak data through the index

364
00:12:46,560 --> 00:12:49,599
well what we've got in the index is a

365
00:12:48,079 --> 00:12:50,319
bunch of bloom filters which are

366
00:12:49,600 --> 00:12:53,120
multiple

367
00:12:50,320 --> 00:12:54,000
hashes of the data one using one-way

368
00:12:53,120 --> 00:12:55,519
hashes it's

369
00:12:54,000 --> 00:12:57,200
very unlikely you would be able to

370
00:12:55,519 --> 00:12:59,440
reverse engineer that

371
00:12:57,200 --> 00:13:01,519
you might be able to do some brute force

372
00:12:59,440 --> 00:13:03,200
type testing if you knew

373
00:13:01,519 --> 00:13:04,720
the structure of the bloomberg of the

374
00:13:03,200 --> 00:13:06,800
bloom filters and

375
00:13:04,720 --> 00:13:08,160
had some idea what the data was that was

376
00:13:06,800 --> 00:13:09,920
in the system

377
00:13:08,160 --> 00:13:11,839
so if you had some a priori knowledge

378
00:13:09,920 --> 00:13:13,599
you could probably come up with some

379
00:13:11,839 --> 00:13:16,160
collisions that you could use

380
00:13:13,600 --> 00:13:17,519
to figure out what data was in the uh in

381
00:13:16,160 --> 00:13:20,240
the index

382
00:13:17,519 --> 00:13:21,760
can we leak data through the query i

383
00:13:20,240 --> 00:13:23,279
think we mostly do that

384
00:13:21,760 --> 00:13:26,160
when you do the query you can tell how

385
00:13:23,279 --> 00:13:28,320
many objects how many fields

386
00:13:26,160 --> 00:13:29,199
are being queried for but you have the

387
00:13:28,320 --> 00:13:31,040
same problems

388
00:13:29,200 --> 00:13:32,480
in that you've only got the hashes and

389
00:13:31,040 --> 00:13:34,160
you would have to figure out

390
00:13:32,480 --> 00:13:35,760
what the data are that you're actually

391
00:13:34,160 --> 00:13:38,000
hashing uh

392
00:13:35,760 --> 00:13:39,360
again you could do brute force to try to

393
00:13:38,000 --> 00:13:41,120
to get around that

394
00:13:39,360 --> 00:13:44,560
um but it's unlikely that you would be

395
00:13:41,120 --> 00:13:46,160
able to get much out of it

396
00:13:44,560 --> 00:13:47,760
uh and i've got like i said i have some

397
00:13:46,160 --> 00:13:49,279
additional information about where bloom

398
00:13:47,760 --> 00:13:50,480
filters are used and whatnot i'm not

399
00:13:49,279 --> 00:13:50,880
going to go through all of that because

400
00:13:50,480 --> 00:13:53,519
i'm

401
00:13:50,880 --> 00:13:54,959
going to run out of time um what is a

402
00:13:53,519 --> 00:13:57,519
multi-dimensional bloom filter

403
00:13:54,959 --> 00:13:59,439
and then there are about three pages of

404
00:13:57,519 --> 00:14:01,120
references

405
00:13:59,440 --> 00:14:02,639
so you can look up all those things that

406
00:14:01,120 --> 00:14:05,839
were cited in the in the

407
00:14:02,639 --> 00:14:08,560
document so with that we ask if there

408
00:14:05,839 --> 00:14:08,560
are any questions

409
00:14:15,519 --> 00:14:18,240
questions okay

410
00:14:26,959 --> 00:14:30,880
hey thanks a lot for the talk um just

411
00:14:29,040 --> 00:14:33,360
one thing so what is the advantage

412
00:14:30,880 --> 00:14:34,959
of having it like this rather than for

413
00:14:33,360 --> 00:14:37,279
example creating a boolean format

414
00:14:34,959 --> 00:14:38,560
out of the clear text data encrypting it

415
00:14:37,279 --> 00:14:40,480
and then storing that to the server and

416
00:14:38,560 --> 00:14:42,560
then doing the searching on the client

417
00:14:40,480 --> 00:14:43,519
which then you can also do more complex

418
00:14:42,560 --> 00:14:45,439
indexes

419
00:14:43,519 --> 00:14:46,639
rather than just a bloom filter so if

420
00:14:45,440 --> 00:14:48,800
you want you're talking about building

421
00:14:46,639 --> 00:14:52,320
the bloom filter on the client

422
00:14:48,800 --> 00:14:53,599
and then searching uh the question

423
00:14:52,320 --> 00:14:55,440
what's with the advantage of doing this

424
00:14:53,600 --> 00:14:56,959
over building the filter on the client

425
00:14:55,440 --> 00:14:59,279
and storing the filter on the client

426
00:14:56,959 --> 00:15:01,518
no i mean so bluefin is just one example

427
00:14:59,279 --> 00:15:03,600
but you can have much more complex

428
00:15:01,519 --> 00:15:04,880
indexes and then have them encrypted and

429
00:15:03,600 --> 00:15:06,000
stored on the server and then on each

430
00:15:04,880 --> 00:15:07,760
client just download

431
00:15:06,000 --> 00:15:09,040
that very small index and then search

432
00:15:07,760 --> 00:15:10,240
based on that

433
00:15:09,040 --> 00:15:12,160
you would have to download the index

434
00:15:10,240 --> 00:15:13,440
you'd have to have an encrypted index on

435
00:15:12,160 --> 00:15:14,240
the server right and then you would

436
00:15:13,440 --> 00:15:16,720
download it

437
00:15:14,240 --> 00:15:18,079
and decrypt it and use that the

438
00:15:16,720 --> 00:15:18,959
advantage is you don't have to download

439
00:15:18,079 --> 00:15:20,479
and decrypt

440
00:15:18,959 --> 00:15:22,000
there's you don't have that problem so

441
00:15:20,480 --> 00:15:24,880
you don't have that overhead

442
00:15:22,000 --> 00:15:27,279
it's you could basically publish this uh

443
00:15:24,880 --> 00:15:30,959
with a very simple front end

444
00:15:27,279 --> 00:15:30,959
on it to do the queries

445
00:15:32,800 --> 00:15:35,279
any other

446
00:15:36,079 --> 00:15:41,839
everyone over here you have to run now

447
00:15:44,800 --> 00:15:48,000
um hopefully a small question how does

448
00:15:47,519 --> 00:15:50,560
the

449
00:15:48,000 --> 00:15:52,480
cardinality of like the how does the

450
00:15:50,560 --> 00:15:53,680
either cardinality or like complexity of

451
00:15:52,480 --> 00:15:57,279
the role values that

452
00:15:53,680 --> 00:15:59,279
you use to create the bloom filter

453
00:15:57,279 --> 00:16:00,480
affect the leakage of data so if you use

454
00:15:59,279 --> 00:16:02,800
like um

455
00:16:00,480 --> 00:16:06,560
three-letter engrams would that change

456
00:16:02,800 --> 00:16:09,199
how much data you can leak or like

457
00:16:06,560 --> 00:16:10,560
if you know like the the a priori stuff

458
00:16:09,199 --> 00:16:12,800
that you were talking about if you knew

459
00:16:10,560 --> 00:16:16,239
that the bloom filter data is basically

460
00:16:12,800 --> 00:16:16,959
three-letter engrams how would that

461
00:16:16,240 --> 00:16:19,920
affect

462
00:16:16,959 --> 00:16:21,599
um you leaking data through the query or

463
00:16:19,920 --> 00:16:23,519
the actual

464
00:16:21,600 --> 00:16:24,720
so if you were just indexing

465
00:16:23,519 --> 00:16:27,279
three-letter engrams

466
00:16:24,720 --> 00:16:28,560
um your filters would look different

467
00:16:27,279 --> 00:16:29,360
first off they'd be different size than

468
00:16:28,560 --> 00:16:33,839
the ones i had

469
00:16:29,360 --> 00:16:36,800
yeah right um but can you actually like

470
00:16:33,839 --> 00:16:37,519
prevent leakage of data using very small

471
00:16:36,800 --> 00:16:40,639
if

472
00:16:37,519 --> 00:16:43,440
if you use very small well

473
00:16:40,639 --> 00:16:43,759
if you had very small data set that you

474
00:16:43,440 --> 00:16:47,199
were

475
00:16:43,759 --> 00:16:48,639
using uh you would be much more probable

476
00:16:47,199 --> 00:16:52,160
you could figure out what was in it

477
00:16:48,639 --> 00:16:54,160
obviously so yeah if you if you know

478
00:16:52,160 --> 00:16:55,600
that there are only three letters you

479
00:16:54,160 --> 00:16:57,680
know there's only so many combinations

480
00:16:55,600 --> 00:17:00,959
so that would definitely help

481
00:16:57,680 --> 00:17:01,359
being able to crack it but so it's you

482
00:17:00,959 --> 00:17:04,799
know

483
00:17:01,360 --> 00:17:18,799
it's a probability problem

484
00:17:04,799 --> 00:17:18,799
okay thank you very much for your talk

