1
00:00:05,440 --> 00:00:07,759
hello

2
00:00:11,759 --> 00:00:18,640
so glad you got my name correctly

3
00:00:15,360 --> 00:00:20,880
so here is let's start

4
00:00:18,640 --> 00:00:23,279
some a few words about myself so that

5
00:00:20,880 --> 00:00:25,119
you can put this talk into some

6
00:00:23,279 --> 00:00:26,400
so that you can put this talk into some

7
00:00:25,119 --> 00:00:28,960
perspective

8
00:00:26,400 --> 00:00:31,519
so i've been working as a linux embodied

9
00:00:28,960 --> 00:00:33,760
engineer for the last seven years

10
00:00:31,519 --> 00:00:34,960
most of the time doing drones just like

11
00:00:33,760 --> 00:00:38,079
this one and

12
00:00:34,960 --> 00:00:39,680
other iot devices and i've to do that

13
00:00:38,079 --> 00:00:42,239
i've been using tools such as

14
00:00:39,680 --> 00:00:43,040
bill ruth yocto and alchemy which is an

15
00:00:42,239 --> 00:00:45,199
android

16
00:00:43,040 --> 00:00:46,640
build system but yeah most of the time

17
00:00:45,200 --> 00:00:49,760
using yokto which is the

18
00:00:46,640 --> 00:00:51,840
most popular one i think um

19
00:00:49,760 --> 00:00:54,079
yeah one thing one another thing about

20
00:00:51,840 --> 00:00:55,039
me is that i place a high value on the

21
00:00:54,079 --> 00:00:57,840
tools i use

22
00:00:55,039 --> 00:00:59,440
every day and so yeah for a few few

23
00:00:57,840 --> 00:01:01,120
years i've been switching distribution

24
00:00:59,440 --> 00:01:04,720
switching desktop environments

25
00:01:01,120 --> 00:01:06,479
switching everything um i kept using

26
00:01:04,720 --> 00:01:08,400
one software which is new mx for the

27
00:01:06,479 --> 00:01:12,080
last decade but yeah

28
00:01:08,400 --> 00:01:12,720
um never found in in bill root in

29
00:01:12,080 --> 00:01:15,520
yorktown

30
00:01:12,720 --> 00:01:17,280
in android a reliable tool that i want

31
00:01:15,520 --> 00:01:20,640
to carry on using

32
00:01:17,280 --> 00:01:23,280
and so yeah this is why i'm here

33
00:01:20,640 --> 00:01:24,799
so in the meantime i discovered new

34
00:01:23,280 --> 00:01:26,960
geeks

35
00:01:24,799 --> 00:01:28,159
a few years ago i've been quite involved

36
00:01:26,960 --> 00:01:30,158
with the new geeks

37
00:01:28,159 --> 00:01:32,400
i don't know how many of you have ever

38
00:01:30,159 --> 00:01:35,680
heard about newbies

39
00:01:32,400 --> 00:01:37,600
yeah great maybe you saw video talk

40
00:01:35,680 --> 00:01:41,119
yesterday

41
00:01:37,600 --> 00:01:42,399
so gnugex is many things it's started as

42
00:01:41,119 --> 00:01:44,880
a very innovative

43
00:01:42,399 --> 00:01:45,520
very innovative package manager based on

44
00:01:44,880 --> 00:01:47,439
mix

45
00:01:45,520 --> 00:01:49,600
but now it's much more than that it's a

46
00:01:47,439 --> 00:01:50,398
tool to instantiate an operating system

47
00:01:49,600 --> 00:01:52,960
which is called

48
00:01:50,399 --> 00:01:55,520
new gig system it's a container

49
00:01:52,960 --> 00:01:59,039
provisioning tool it's a ci tool it's

50
00:01:55,520 --> 00:02:01,840
yeah it's a lot of things and

51
00:01:59,040 --> 00:02:02,159
yeah back to yokto um what do we expect

52
00:02:01,840 --> 00:02:05,439
from

53
00:02:02,159 --> 00:02:07,759
yocto and such tools we expect

54
00:02:05,439 --> 00:02:08,959
obviously a tool that you can use to

55
00:02:07,759 --> 00:02:11,038
generate some

56
00:02:08,959 --> 00:02:12,640
disk image so that you can put them on

57
00:02:11,038 --> 00:02:14,000
an embedded device and boot from this

58
00:02:12,640 --> 00:02:16,799
disk image

59
00:02:14,000 --> 00:02:19,360
you also expect that this tool has a

60
00:02:16,800 --> 00:02:21,520
wide support of packages and recipes and

61
00:02:19,360 --> 00:02:23,120
bot support so that you don't have to

62
00:02:21,520 --> 00:02:26,400
write everything

63
00:02:23,120 --> 00:02:29,920
from scratch and you also

64
00:02:26,400 --> 00:02:30,720
expect a tool that will allow you to

65
00:02:29,920 --> 00:02:33,040
deal with

66
00:02:30,720 --> 00:02:34,400
your 10 different hardwares in 50

67
00:02:33,040 --> 00:02:36,879
hardware revisions

68
00:02:34,400 --> 00:02:38,640
in 10 different products and yeah in a

69
00:02:36,879 --> 00:02:41,200
few words help you cope with uh

70
00:02:38,640 --> 00:02:42,000
industrial mess which is a real thing

71
00:02:41,200 --> 00:02:44,560
and

72
00:02:42,000 --> 00:02:46,000
yeah so youtube does everything the

73
00:02:44,560 --> 00:02:48,959
other tools also

74
00:02:46,000 --> 00:02:50,720
but i've been wondering could bluegeeks

75
00:02:48,959 --> 00:02:52,800
do the same thing

76
00:02:50,720 --> 00:02:53,760
and if you want to stop listening the

77
00:02:52,800 --> 00:02:57,840
answer is yes

78
00:02:53,760 --> 00:02:57,840
but i'll expose you why

79
00:02:58,319 --> 00:03:05,200
so let's take a real world example

80
00:03:02,560 --> 00:03:06,640
let's say i have this board which is a

81
00:03:05,200 --> 00:03:10,959
buying x64

82
00:03:06,640 --> 00:03:15,040
and i want to make it fly so

83
00:03:10,959 --> 00:03:15,040
obviously there is some work

84
00:03:17,120 --> 00:03:19,840
well

85
00:03:20,159 --> 00:03:25,200
um so yeah one solution could be to

86
00:03:23,440 --> 00:03:26,159
install audiopilot which is a really

87
00:03:25,200 --> 00:03:28,159
nice software

88
00:03:26,159 --> 00:03:30,239
it's an autopilot you can use it to

89
00:03:28,159 --> 00:03:31,679
build some drones some helicopters some

90
00:03:30,239 --> 00:03:34,480
planes some submarine

91
00:03:31,680 --> 00:03:36,319
some crazy stuff um yeah let's say i

92
00:03:34,480 --> 00:03:37,040
want to install autopilot on this board

93
00:03:36,319 --> 00:03:38,640
so

94
00:03:37,040 --> 00:03:40,879
uh we'll see how it's done with the

95
00:03:38,640 --> 00:03:44,159
actor and then we'll see how it

96
00:03:40,879 --> 00:03:46,560
could be done with geeks so

97
00:03:44,159 --> 00:03:47,280
how would we do that with your let's say

98
00:03:46,560 --> 00:03:49,920
i'm using

99
00:03:47,280 --> 00:03:51,120
ubuntu so first i need to install some

100
00:03:49,920 --> 00:03:55,920
packages

101
00:03:51,120 --> 00:03:57,439
uh then i need to clone your sources

102
00:03:55,920 --> 00:03:58,958
so i use pokey which is a yokota

103
00:03:57,439 --> 00:04:00,640
distribution then

104
00:03:58,959 --> 00:04:02,480
i need to find some support for this

105
00:04:00,640 --> 00:04:04,640
board which is not included in this

106
00:04:02,480 --> 00:04:06,000
repository so i'll have to find an extra

107
00:04:04,640 --> 00:04:09,040
layer

108
00:04:06,000 --> 00:04:14,319
which i find there from some mr alistar

109
00:04:09,040 --> 00:04:17,839
23 i don't know about

110
00:04:14,319 --> 00:04:21,039
i'll clone the layer then

111
00:04:17,839 --> 00:04:22,078
i will source the environment then i

112
00:04:21,040 --> 00:04:24,400
need to tell you

113
00:04:22,079 --> 00:04:25,360
hey there is a new layer you need to

114
00:04:24,400 --> 00:04:27,280
take

115
00:04:25,360 --> 00:04:29,280
take it into account so i write this

116
00:04:27,280 --> 00:04:32,719
comment and then

117
00:04:29,280 --> 00:04:34,638
i need to add how to pilot the package

118
00:04:32,720 --> 00:04:37,360
or the palette to my image

119
00:04:34,639 --> 00:04:39,120
um it doesn't exist in actor so if you

120
00:04:37,360 --> 00:04:41,520
type this command it won't work

121
00:04:39,120 --> 00:04:42,400
it won't work at this step but let's say

122
00:04:41,520 --> 00:04:44,960
it does

123
00:04:42,400 --> 00:04:45,840
and so yeah you add autopilot and then

124
00:04:44,960 --> 00:04:48,159
you can

125
00:04:45,840 --> 00:04:49,679
produce your disk image so you'll type

126
00:04:48,160 --> 00:04:51,980
this command

127
00:04:49,680 --> 00:04:53,520
you'll wait um wait

128
00:04:51,980 --> 00:04:55,360
[Laughter]

129
00:04:53,520 --> 00:04:57,120
no no no before waiting you'll get this

130
00:04:55,360 --> 00:04:59,440
warning it says

131
00:04:57,120 --> 00:05:01,759
ah your house distribution ubuntu has

132
00:04:59,440 --> 00:05:04,240
not been validated you may experience

133
00:05:01,759 --> 00:05:06,479
unexpected failures uh you should use

134
00:05:04,240 --> 00:05:08,800
the tested distribution so

135
00:05:06,479 --> 00:05:09,520
i did not know ubuntu was such an exotic

136
00:05:08,800 --> 00:05:12,960
distribution

137
00:05:09,520 --> 00:05:15,359
i mean if i've been using like

138
00:05:12,960 --> 00:05:16,159
crazy stuff like game 2 or gig system

139
00:05:15,360 --> 00:05:17,840
all right

140
00:05:16,160 --> 00:05:20,160
i will never understand but understood

141
00:05:17,840 --> 00:05:22,799
but yeah i'm going to comment

142
00:05:20,160 --> 00:05:24,000
so yeah i see this i don't want to go

143
00:05:22,800 --> 00:05:25,759
any further because

144
00:05:24,000 --> 00:05:27,120
it means that yeah it may fail it may

145
00:05:25,759 --> 00:05:29,280
fail because of my distribution

146
00:05:27,120 --> 00:05:31,039
i won't know why i'll have to bisect it

147
00:05:29,280 --> 00:05:32,799
so

148
00:05:31,039 --> 00:05:34,719
the solution here would be to use the

149
00:05:32,800 --> 00:05:38,240
virtual machine or docker file but

150
00:05:34,720 --> 00:05:41,480
i really don't want to do that so

151
00:05:38,240 --> 00:05:44,000
let's keep going um

152
00:05:41,480 --> 00:05:47,120
[Music]

153
00:05:44,000 --> 00:05:49,440
so now you wait then you go to sleep

154
00:05:47,120 --> 00:05:50,240
then you come back then you don't have

155
00:05:49,440 --> 00:05:53,520
any

156
00:05:50,240 --> 00:05:56,080
space on your hard drive anymore

157
00:05:53,520 --> 00:05:57,520
but it works you get a disk image and

158
00:05:56,080 --> 00:06:00,159
yeah it does the job

159
00:05:57,520 --> 00:06:00,799
like it's not that hard and you can boot

160
00:06:00,160 --> 00:06:03,840
from it

161
00:06:00,800 --> 00:06:08,080
um yeah so

162
00:06:03,840 --> 00:06:10,479
it's a way of doing things another way

163
00:06:08,080 --> 00:06:11,520
would be to use gnu geeks so gnu geeks

164
00:06:10,479 --> 00:06:14,240
is based on

165
00:06:11,520 --> 00:06:15,198
guide language gnugil which is skin

166
00:06:14,240 --> 00:06:18,400
language

167
00:06:15,199 --> 00:06:19,280
and so obviously everything is written

168
00:06:18,400 --> 00:06:23,120
in guys so

169
00:06:19,280 --> 00:06:25,198
you you have to write guy and

170
00:06:23,120 --> 00:06:27,520
so you write something like that which

171
00:06:25,199 --> 00:06:31,280
is a an operating system configuration

172
00:06:27,520 --> 00:06:34,080
which tells uh to geeks um

173
00:06:31,280 --> 00:06:36,239
what will be the disk image you want and

174
00:06:34,080 --> 00:06:38,639
so you'll have to describe a few things

175
00:06:36,240 --> 00:06:40,479
so you'll have to tell the host name of

176
00:06:38,639 --> 00:06:43,039
your system you have to tell

177
00:06:40,479 --> 00:06:45,199
the bootloader you use which is a

178
00:06:43,039 --> 00:06:46,800
specific bootloader for this board

179
00:06:45,199 --> 00:06:48,319
some fields are implicit like for

180
00:06:46,800 --> 00:06:49,360
instance it doesn't say i want to use

181
00:06:48,319 --> 00:06:51,759
linux but

182
00:06:49,360 --> 00:06:53,440
it says it's an implicit field i could

183
00:06:51,759 --> 00:06:54,479
use another thing in the future like

184
00:06:53,440 --> 00:06:58,560
herd or

185
00:06:54,479 --> 00:07:00,560
stuff i have to specify some modules

186
00:06:58,560 --> 00:07:02,479
the file system i want to use the

187
00:07:00,560 --> 00:07:03,120
packages which are the base gigs

188
00:07:02,479 --> 00:07:05,599
packages

189
00:07:03,120 --> 00:07:06,880
plus are the pilot which is packaged in

190
00:07:05,599 --> 00:07:09,520
geeks

191
00:07:06,880 --> 00:07:11,759
which i did packaging geeks for this

192
00:07:09,520 --> 00:07:11,758
talk

193
00:07:12,000 --> 00:07:16,319
and some services so i'll take the base

194
00:07:14,080 --> 00:07:19,758
services and add a console

195
00:07:16,319 --> 00:07:21,360
console service and

196
00:07:19,759 --> 00:07:23,280
gnugix is a functional distribution

197
00:07:21,360 --> 00:07:24,240
which means that you apply functions to

198
00:07:23,280 --> 00:07:26,719
functions

199
00:07:24,240 --> 00:07:28,160
who checks functions as arguments so to

200
00:07:26,720 --> 00:07:30,319
go from this operating system

201
00:07:28,160 --> 00:07:31,759
declaration to your disk image obviously

202
00:07:30,319 --> 00:07:34,720
you need to apply your function

203
00:07:31,759 --> 00:07:35,280
and that function will be hey geeks

204
00:07:34,720 --> 00:07:38,319
please

205
00:07:35,280 --> 00:07:39,440
take my operating system and make a disk

206
00:07:38,319 --> 00:07:41,120
image from it and

207
00:07:39,440 --> 00:07:42,880
that's pretty much it i mean you can

208
00:07:41,120 --> 00:07:45,280
start a new repl

209
00:07:42,880 --> 00:07:46,319
type this function with this file as

210
00:07:45,280 --> 00:07:50,719
argument and

211
00:07:46,319 --> 00:07:53,599
you'll get a disk image you can also use

212
00:07:50,720 --> 00:07:54,000
a command to do that which is quite

213
00:07:53,599 --> 00:07:58,159
quite

214
00:07:54,000 --> 00:08:00,560
obvious you you say gigs i want a system

215
00:07:58,160 --> 00:08:02,160
a disk image system from the

216
00:08:00,560 --> 00:08:04,560
configuration file i show you

217
00:08:02,160 --> 00:08:06,000
and i want it for this board

218
00:08:04,560 --> 00:08:09,680
architecture

219
00:08:06,000 --> 00:08:12,400
then you wait um

220
00:08:09,680 --> 00:08:14,000
you may wait you might wait a few

221
00:08:12,400 --> 00:08:18,239
minutes if everything goes

222
00:08:14,000 --> 00:08:20,639
but yeah i'll get there and then

223
00:08:18,240 --> 00:08:21,440
when you have the disk image you can

224
00:08:20,639 --> 00:08:24,639
flash it

225
00:08:21,440 --> 00:08:25,599
on an sd card you plug the sd card on

226
00:08:24,639 --> 00:08:29,440
the

227
00:08:25,599 --> 00:08:33,039
board and it works too

228
00:08:29,440 --> 00:08:35,360
so some of this stuff

229
00:08:33,039 --> 00:08:36,240
is mainline some will come real soon if

230
00:08:35,360 --> 00:08:38,719
you try this

231
00:08:36,240 --> 00:08:40,080
on the current release it won't work but

232
00:08:38,719 --> 00:08:42,719
it may work in the

233
00:08:40,080 --> 00:08:42,719
future really

234
00:08:43,200 --> 00:08:48,800
and now the question is i know

235
00:08:46,320 --> 00:08:50,399
so yeah you get something like that or

236
00:08:48,800 --> 00:08:52,880
you have a

237
00:08:50,399 --> 00:08:54,000
a gig operating system you can see that

238
00:08:52,880 --> 00:08:56,480
hardicopter is running

239
00:08:54,000 --> 00:08:57,360
and in short you have to write one file

240
00:08:56,480 --> 00:08:59,519
around what

241
00:08:57,360 --> 00:09:01,279
right run right command wait a few

242
00:08:59,519 --> 00:09:03,200
minutes and then you get

243
00:09:01,279 --> 00:09:04,800
a system which does exactly what you

244
00:09:03,200 --> 00:09:10,160
want

245
00:09:04,800 --> 00:09:12,640
and the question is does it fly so

246
00:09:10,160 --> 00:09:14,399
sorry i can throw it out of the window

247
00:09:12,640 --> 00:09:15,839
but it might not be an early period

248
00:09:14,399 --> 00:09:18,880
supported flightman

249
00:09:15,839 --> 00:09:20,320
so yeah might find some motors and stuff

250
00:09:18,880 --> 00:09:23,439
first but

251
00:09:20,320 --> 00:09:26,240
uh the hardest part is done for

252
00:09:23,440 --> 00:09:27,839
us uh so now you know how it's done with

253
00:09:26,240 --> 00:09:31,519
geeks and yocto let's

254
00:09:27,839 --> 00:09:33,360
talk about the two tools so

255
00:09:31,519 --> 00:09:35,120
they have a different organization yokto

256
00:09:33,360 --> 00:09:37,200
has many layers

257
00:09:35,120 --> 00:09:39,600
maintained by different entities so for

258
00:09:37,200 --> 00:09:41,200
instance you can see that

259
00:09:39,600 --> 00:09:42,800
there are some open-embedded layers

260
00:09:41,200 --> 00:09:44,000
which are some kind of official layers

261
00:09:42,800 --> 00:09:45,760
with good support

262
00:09:44,000 --> 00:09:47,440
and there are some layers which are

263
00:09:45,760 --> 00:09:50,560
enough quite unofficial

264
00:09:47,440 --> 00:09:54,160
like the one i used for the board and

265
00:09:50,560 --> 00:09:56,640
the quality can vary a lot and

266
00:09:54,160 --> 00:09:58,719
geeks has a different approach we have

267
00:09:56,640 --> 00:10:02,720
only one git repository with

268
00:09:58,720 --> 00:10:02,720
every packages every box supported

269
00:10:03,040 --> 00:10:07,040
while you can add some ex some extra

270
00:10:06,000 --> 00:10:10,720
repositories with

271
00:10:07,040 --> 00:10:12,880
extra recipes um it's not the re

272
00:10:10,720 --> 00:10:13,760
recommended way of doing things i mean

273
00:10:12,880 --> 00:10:15,839
uh

274
00:10:13,760 --> 00:10:17,040
adding some patches is just one patch to

275
00:10:15,839 --> 00:10:19,200
one git repository

276
00:10:17,040 --> 00:10:20,640
everyone can do that it's very simple

277
00:10:19,200 --> 00:10:24,959
and so

278
00:10:20,640 --> 00:10:27,199
there we have different organizations um

279
00:10:24,959 --> 00:10:28,880
yeah one thing i want to talk about is

280
00:10:27,200 --> 00:10:32,399
build reproducibility

281
00:10:28,880 --> 00:10:36,480
uh also called deterministic compilation

282
00:10:32,399 --> 00:10:38,160
so yeah both gnomics and octo aim for

283
00:10:36,480 --> 00:10:39,680
reproducible builds if you read their

284
00:10:38,160 --> 00:10:42,399
documentation but if you read

285
00:10:39,680 --> 00:10:44,239
the youtube wiki you will it says

286
00:10:42,399 --> 00:10:44,640
depending on circumstances it might help

287
00:10:44,240 --> 00:10:46,399
to

288
00:10:44,640 --> 00:10:48,160
build on the same distro with the same

289
00:10:46,399 --> 00:10:51,279
packages instead in the same

290
00:10:48,160 --> 00:10:55,360
pass and using the same build hardware

291
00:10:51,279 --> 00:10:55,360
so can be quite tricky

292
00:10:55,680 --> 00:10:59,760
and what it means is that my colleague

293
00:10:58,640 --> 00:11:02,880
elise can

294
00:10:59,760 --> 00:11:03,760
build my disk image on her computer with

295
00:11:02,880 --> 00:11:05,920
a

296
00:11:03,760 --> 00:11:07,360
head distribution and i can take the

297
00:11:05,920 --> 00:11:10,000
exact same sources

298
00:11:07,360 --> 00:11:11,200
and it will fail on mine and i won't

299
00:11:10,000 --> 00:11:14,399
know why

300
00:11:11,200 --> 00:11:18,800
i can know why but

301
00:11:14,399 --> 00:11:21,360
it's yeah with new geeks

302
00:11:18,800 --> 00:11:22,000
things are a bit different geeks is

303
00:11:21,360 --> 00:11:25,680
building in

304
00:11:22,000 --> 00:11:28,079
isolated environments and

305
00:11:25,680 --> 00:11:29,519
you can expect you can expect that you

306
00:11:28,079 --> 00:11:31,680
get the same result

307
00:11:29,519 --> 00:11:33,600
uh even if you are running completely

308
00:11:31,680 --> 00:11:36,560
different host distributions

309
00:11:33,600 --> 00:11:38,480
uh on different hardware and we using

310
00:11:36,560 --> 00:11:40,719
different build paths

311
00:11:38,480 --> 00:11:42,320
the only thing that matters is that you

312
00:11:40,720 --> 00:11:43,920
run the same version of gnogix

313
00:11:42,320 --> 00:11:47,120
if you run the send version of gnubis

314
00:11:43,920 --> 00:11:49,360
you have the guarantee that

315
00:11:47,120 --> 00:11:50,399
you have a stronger guarantee at least

316
00:11:49,360 --> 00:11:52,480
um

317
00:11:50,399 --> 00:11:53,920
you don't need to use a docker image or

318
00:11:52,480 --> 00:11:57,040
a virtual machine

319
00:11:53,920 --> 00:11:59,920
and yeah i think it's

320
00:11:57,040 --> 00:11:59,920
it's a good point

321
00:12:00,959 --> 00:12:06,800
another thing is that um

322
00:12:04,079 --> 00:12:08,880
to build packages in geeks as i told you

323
00:12:06,800 --> 00:12:09,359
it's functional so you have to write a

324
00:12:08,880 --> 00:12:11,200
function

325
00:12:09,360 --> 00:12:12,639
that knows how how to build the package

326
00:12:11,200 --> 00:12:15,680
so it's a function that

327
00:12:12,639 --> 00:12:16,480
says okay run make and configure and mic

328
00:12:15,680 --> 00:12:17,920
and like install

329
00:12:16,480 --> 00:12:19,440
and you have to give this function some

330
00:12:17,920 --> 00:12:20,319
inputs which are the package

331
00:12:19,440 --> 00:12:22,399
dependencies

332
00:12:20,320 --> 00:12:25,020
and you get one output most of the time

333
00:12:22,399 --> 00:12:27,360
a binary

334
00:12:25,020 --> 00:12:29,279
[Music]

335
00:12:27,360 --> 00:12:30,480
geeks has an official ci build form

336
00:12:29,279 --> 00:12:33,040
which does

337
00:12:30,480 --> 00:12:34,800
all this stuff ahead of you and if when

338
00:12:33,040 --> 00:12:37,279
you start building your disk image

339
00:12:34,800 --> 00:12:39,279
it will say it will ask the server hey

340
00:12:37,279 --> 00:12:42,399
have you ever done this computation with

341
00:12:39,279 --> 00:12:43,600
this gig version and those inputs and if

342
00:12:42,399 --> 00:12:47,040
it says yes

343
00:12:43,600 --> 00:12:50,399
then you just download the output file

344
00:12:47,040 --> 00:12:52,079
and it will be much faster if this

345
00:12:50,399 --> 00:12:53,040
package is linux with all modules

346
00:12:52,079 --> 00:12:55,120
enabled

347
00:12:53,040 --> 00:12:58,160
yeah you'll be really glad that that it

348
00:12:55,120 --> 00:12:58,160
did and

349
00:12:58,399 --> 00:13:02,160
you can also with bluegeeks use

350
00:13:01,200 --> 00:13:04,639
offloading

351
00:13:02,160 --> 00:13:06,160
so you can set up several machines on

352
00:13:04,639 --> 00:13:09,279
several architecture

353
00:13:06,160 --> 00:13:11,199
and you can offload you can upload quite

354
00:13:09,279 --> 00:13:13,360
uh transparently the build to those

355
00:13:11,200 --> 00:13:15,519
machines which is very nice too

356
00:13:13,360 --> 00:13:16,480
um yoto has kind of the same mechanism

357
00:13:15,519 --> 00:13:18,560
about yes

358
00:13:16,480 --> 00:13:20,800
what we call substituting disks it's

359
00:13:18,560 --> 00:13:22,959
called share at state

360
00:13:20,800 --> 00:13:24,240
it's kind of what i described but it

361
00:13:22,959 --> 00:13:26,160
means that

362
00:13:24,240 --> 00:13:27,839
if your build machine is running a

363
00:13:26,160 --> 00:13:31,279
slightly different distribution or

364
00:13:27,839 --> 00:13:33,680
if it is ahead of you

365
00:13:31,279 --> 00:13:35,680
there were some appetite update which

366
00:13:33,680 --> 00:13:37,519
modified the versions

367
00:13:35,680 --> 00:13:39,040
chances of hitting substitutes and

368
00:13:37,519 --> 00:13:39,839
getting substitutes from the build

369
00:13:39,040 --> 00:13:43,120
machines

370
00:13:39,839 --> 00:13:45,519
are reduced and are

371
00:13:43,120 --> 00:13:46,320
very reduced and that's something that

372
00:13:45,519 --> 00:13:49,040
yeah

373
00:13:46,320 --> 00:13:50,720
we don't have in geeks and one of the

374
00:13:49,040 --> 00:13:52,399
other cool thing is that

375
00:13:50,720 --> 00:13:53,760
uh remember the configuration file i

376
00:13:52,399 --> 00:13:56,959
wrote i can do many things

377
00:13:53,760 --> 00:14:00,000
with it i can build the disk image

378
00:13:56,959 --> 00:14:01,439
for my architect my host architecture i

379
00:14:00,000 --> 00:14:04,639
can build a disk image

380
00:14:01,440 --> 00:14:06,320
for a foreign board architecture which

381
00:14:04,639 --> 00:14:08,800
is what i did earlier

382
00:14:06,320 --> 00:14:10,480
i can also reconfigure my system if i'm

383
00:14:08,800 --> 00:14:13,279
already running a gig system

384
00:14:10,480 --> 00:14:14,800
using the same configuration i can also

385
00:14:13,279 --> 00:14:17,439
spawn a disk image

386
00:14:14,800 --> 00:14:18,160
i can make a docker container out of it

387
00:14:17,440 --> 00:14:20,560
or

388
00:14:18,160 --> 00:14:21,519
i can deploy it to remote machines by

389
00:14:20,560 --> 00:14:24,560
ssh

390
00:14:21,519 --> 00:14:25,519
and all of this with almost the same

391
00:14:24,560 --> 00:14:30,000
configuration

392
00:14:25,519 --> 00:14:33,360
datacm you can do all this stuff

393
00:14:30,000 --> 00:14:34,720
um another cool thing is that yoktu is

394
00:14:33,360 --> 00:14:38,079
written in like

395
00:14:34,720 --> 00:14:42,000
bash and beatback language and python

396
00:14:38,079 --> 00:14:44,719
and it makes lots of languages

397
00:14:42,000 --> 00:14:46,560
and geeks is written in only one

398
00:14:44,720 --> 00:14:47,680
language and it means that you can use

399
00:14:46,560 --> 00:14:50,399
it to

400
00:14:47,680 --> 00:14:50,959
to build upon your your your disk image

401
00:14:50,399 --> 00:14:53,199
and

402
00:14:50,959 --> 00:14:54,000
for instance let's say i built the

403
00:14:53,199 --> 00:14:56,719
copter

404
00:14:54,000 --> 00:14:58,800
earlier and i want to change my mind and

405
00:14:56,720 --> 00:15:02,399
build the plane instead

406
00:14:58,800 --> 00:15:05,439
so i can write a function

407
00:15:02,399 --> 00:15:08,079
that takes a vehicle in argument

408
00:15:05,440 --> 00:15:10,480
and returns an operating system which

409
00:15:08,079 --> 00:15:15,359
inherits from the one i show you

410
00:15:10,480 --> 00:15:15,360
earlier and whose packages will be

411
00:15:15,519 --> 00:15:19,839
depending on this function who again

412
00:15:18,720 --> 00:15:21,920
takes the vehicle

413
00:15:19,839 --> 00:15:23,680
and if the vehicle is a copter it will

414
00:15:21,920 --> 00:15:25,360
use the heliocopter

415
00:15:23,680 --> 00:15:27,279
package which is a variant of audio

416
00:15:25,360 --> 00:15:29,199
pilot and if

417
00:15:27,279 --> 00:15:30,560
it's a plane you can use the audio plane

418
00:15:29,199 --> 00:15:32,479
package and then

419
00:15:30,560 --> 00:15:33,920
all you have to write is make vehicle

420
00:15:32,480 --> 00:15:36,240
copter or

421
00:15:33,920 --> 00:15:37,599
make vehicle plane and you get either a

422
00:15:36,240 --> 00:15:42,480
plane helicopter

423
00:15:37,600 --> 00:15:42,480
and having this flexibility

424
00:15:43,279 --> 00:15:47,759
uh is really nice i think as a as a

425
00:15:45,920 --> 00:15:50,560
system integrator

426
00:15:47,759 --> 00:15:51,920
you can build a lot of tools upon your

427
00:15:50,560 --> 00:15:54,638
your gig system

428
00:15:51,920 --> 00:15:56,000
and i'll give you other examples let's

429
00:15:54,639 --> 00:15:58,639
say

430
00:15:56,000 --> 00:15:59,040
i want to know all the licenses i have

431
00:15:58,639 --> 00:16:00,800
uh

432
00:15:59,040 --> 00:16:02,639
all the licenses of my packages which

433
00:16:00,800 --> 00:16:05,279
are involved in my disk image

434
00:16:02,639 --> 00:16:06,079
so i can start a gigs repeal or run the

435
00:16:05,279 --> 00:16:10,160
script

436
00:16:06,079 --> 00:16:11,839
which says um okay for all the packages

437
00:16:10,160 --> 00:16:15,600
in my operating system

438
00:16:11,839 --> 00:16:18,720
get the license and

439
00:16:15,600 --> 00:16:19,360
get the license name and print it and

440
00:16:18,720 --> 00:16:21,759
then you get

441
00:16:19,360 --> 00:16:22,480
all the licenses involved in your disk

442
00:16:21,759 --> 00:16:27,680
image

443
00:16:22,480 --> 00:16:27,680
just calling like three functions

444
00:16:29,920 --> 00:16:33,680
if i want to know all the packages which

445
00:16:32,720 --> 00:16:37,040
are licensed

446
00:16:33,680 --> 00:16:40,319
with gplv3

447
00:16:37,040 --> 00:16:41,439
it's quite easy too i

448
00:16:40,320 --> 00:16:44,560
call the same function to get the

449
00:16:41,440 --> 00:16:47,199
packages then i get the licenses

450
00:16:44,560 --> 00:16:48,079
and then i can filter them depending on

451
00:16:47,199 --> 00:16:50,880
their license

452
00:16:48,079 --> 00:16:55,279
and then again i have the list of

453
00:16:50,880 --> 00:16:59,120
packages which are licensed with gplv3

454
00:16:55,279 --> 00:17:02,079
but gigs can be seen as a

455
00:16:59,120 --> 00:17:02,880
scheme a scheme library so i can do

456
00:17:02,079 --> 00:17:05,839
pretty much

457
00:17:02,880 --> 00:17:05,839
what i want

458
00:17:06,959 --> 00:17:13,360
yeah and now let's say um i don't have a

459
00:17:10,240 --> 00:17:13,359
strong knowledge in

460
00:17:13,439 --> 00:17:18,160
like new lineups and stuff it happens

461
00:17:16,480 --> 00:17:20,079
sometimes i mean you have a team

462
00:17:18,160 --> 00:17:21,439
in industry you have a team of people

463
00:17:20,079 --> 00:17:23,119
who are

464
00:17:21,439 --> 00:17:25,360
their job is to do system integration

465
00:17:23,119 --> 00:17:28,719
and then you have engineers which are

466
00:17:25,359 --> 00:17:29,918
a signal engineer which runs spend all

467
00:17:28,720 --> 00:17:31,280
the time in matlab

468
00:17:29,919 --> 00:17:33,760
and sometimes they want to tweak a

469
00:17:31,280 --> 00:17:37,120
package like add the configure flag

470
00:17:33,760 --> 00:17:38,480
or change some things on the disk image

471
00:17:37,120 --> 00:17:41,439
and

472
00:17:38,480 --> 00:17:43,440
if if it's two of them it's okay but if

473
00:17:41,440 --> 00:17:44,400
it's 100 of them you want them to be

474
00:17:43,440 --> 00:17:46,720
quite independent

475
00:17:44,400 --> 00:17:49,280
and do the stuff by themselves so that

476
00:17:46,720 --> 00:17:51,520
they don't have to go and bother you

477
00:17:49,280 --> 00:17:52,720
and you don't have to explain them what

478
00:17:51,520 --> 00:17:56,080
is ubuntu

479
00:17:52,720 --> 00:17:59,120
and git and bidback and pokey

480
00:17:56,080 --> 00:18:02,080
and yeah and repo and

481
00:17:59,120 --> 00:18:02,799
yeah it can be it can be very fast for

482
00:18:02,080 --> 00:18:05,840
them

483
00:18:02,799 --> 00:18:09,039
so with with gigs the nice thing

484
00:18:05,840 --> 00:18:10,240
is that everything starts from the

485
00:18:09,039 --> 00:18:12,559
configuration file

486
00:18:10,240 --> 00:18:13,360
so if for instance they want to take

487
00:18:12,559 --> 00:18:16,559
your image

488
00:18:13,360 --> 00:18:20,000
and add an ssh server they can

489
00:18:16,559 --> 00:18:23,840
inherit as i did earlier from

490
00:18:20,000 --> 00:18:26,799
your system they can add one services

491
00:18:23,840 --> 00:18:27,360
which is open ssh and they can tweak

492
00:18:26,799 --> 00:18:29,840
some

493
00:18:27,360 --> 00:18:31,039
uh parameters which are yeah hello root

494
00:18:29,840 --> 00:18:34,320
login

495
00:18:31,039 --> 00:18:37,679
add one authorized key which is myki

496
00:18:34,320 --> 00:18:39,439
and run on a different port and

497
00:18:37,679 --> 00:18:41,120
it means that they don't have to add an

498
00:18:39,440 --> 00:18:44,799
extra layer make it henery

499
00:18:41,120 --> 00:18:45,280
from sshd then add an sshg configuration

500
00:18:44,799 --> 00:18:48,160
file

501
00:18:45,280 --> 00:18:48,160
modify it

502
00:18:48,480 --> 00:18:53,120
they just have to read the documentation

503
00:18:50,080 --> 00:18:56,320
find the suitable service

504
00:18:53,120 --> 00:18:59,520
use the the correct configuration and

505
00:18:56,320 --> 00:19:01,439
they can refresh an image

506
00:18:59,520 --> 00:19:04,799
this is true for open ssh but this is

507
00:19:01,440 --> 00:19:06,000
true for most services

508
00:19:04,799 --> 00:19:08,400
you can write your own services

509
00:19:06,000 --> 00:19:12,960
obviously

510
00:19:08,400 --> 00:19:12,960
i think it can be quite handy

511
00:19:14,320 --> 00:19:22,840
uh now some limits i mean

512
00:19:19,120 --> 00:19:24,000
yeah it's the last it's the last slide

513
00:19:22,840 --> 00:19:27,360
um

514
00:19:24,000 --> 00:19:30,400
well the octo and below it um alkene

515
00:19:27,360 --> 00:19:33,678
and android have been there for

516
00:19:30,400 --> 00:19:36,000
few years wow well i mean a lot of years

517
00:19:33,679 --> 00:19:38,320
they work like they work pretty well

518
00:19:36,000 --> 00:19:41,679
they have a wide white board of

519
00:19:38,320 --> 00:19:44,879
support of boards and packages and

520
00:19:41,679 --> 00:19:48,400
those yeah those are nice tools um

521
00:19:44,880 --> 00:19:50,480
geeks comes mostly from i mean

522
00:19:48,400 --> 00:19:53,360
at start people use it as a desktop

523
00:19:50,480 --> 00:19:56,000
distribution so

524
00:19:53,360 --> 00:19:59,039
it's recent that we started hacking on

525
00:19:56,000 --> 00:20:02,320
embedded devices and this means that

526
00:19:59,039 --> 00:20:06,879
while you you'll have many packages

527
00:20:02,320 --> 00:20:08,559
that build natively i mean you can build

528
00:20:06,880 --> 00:20:11,120
git on your computer you can build

529
00:20:08,559 --> 00:20:12,639
uh every other packages if you try to

530
00:20:11,120 --> 00:20:14,879
cross-compile them

531
00:20:12,640 --> 00:20:16,960
well it may fail because no one has

532
00:20:14,880 --> 00:20:18,559
tried before you

533
00:20:16,960 --> 00:20:20,720
the main use case of vector and bill

534
00:20:18,559 --> 00:20:23,918
root is to cross compile package so

535
00:20:20,720 --> 00:20:25,120
obviously yeah more packages are

536
00:20:23,919 --> 00:20:29,120
cross-compiling

537
00:20:25,120 --> 00:20:31,840
and another limit is that the the image

538
00:20:29,120 --> 00:20:32,639
is the image i produced earlier so this

539
00:20:31,840 --> 00:20:35,439
image

540
00:20:32,640 --> 00:20:36,799
is not that minimal with the octo it was

541
00:20:35,440 --> 00:20:40,320
300 megabytes

542
00:20:36,799 --> 00:20:43,200
and with new gigs it's 1.5 gigabytes

543
00:20:40,320 --> 00:20:45,840
um there are i mean there are no good

544
00:20:43,200 --> 00:20:47,679
reasons for it to be 1.5 gigabytes

545
00:20:45,840 --> 00:20:48,959
right it could it could really be like

546
00:20:47,679 --> 00:20:51,760
300 to that

547
00:20:48,960 --> 00:20:52,400
we have to spend some time and as i said

548
00:20:51,760 --> 00:20:55,520
it's

549
00:20:52,400 --> 00:20:56,720
not been a lot of time working on this

550
00:20:55,520 --> 00:20:59,120
stuff so

551
00:20:56,720 --> 00:21:01,200
we have some progress to do uh also we

552
00:20:59,120 --> 00:21:02,080
don't have support for the minimalist

553
00:21:01,200 --> 00:21:06,000
eclipsey like

554
00:21:02,080 --> 00:21:07,120
uh ellipsis everything we just used the

555
00:21:06,000 --> 00:21:10,720
plain glypc

556
00:21:07,120 --> 00:21:13,280
mostly and we have support for like 10

557
00:21:10,720 --> 00:21:17,840
15 birds which is nothing compared to

558
00:21:13,280 --> 00:21:20,610
yokto and um and friends

559
00:21:17,840 --> 00:21:22,399
but anyway i think that

560
00:21:20,610 --> 00:21:25,039
[Music]

561
00:21:22,400 --> 00:21:26,080
gnu geeks is already or almost already

562
00:21:25,039 --> 00:21:28,720
an alternative to

563
00:21:26,080 --> 00:21:29,678
to yokto i mean you can do what i want

564
00:21:28,720 --> 00:21:32,400
you can

565
00:21:29,679 --> 00:21:33,600
yeah in the future geek series you can

566
00:21:32,400 --> 00:21:35,520
download geeks

567
00:21:33,600 --> 00:21:37,280
get your board write your configuration

568
00:21:35,520 --> 00:21:40,639
file and flash it

569
00:21:37,280 --> 00:21:43,440
um and it may be

570
00:21:40,640 --> 00:21:44,240
it may be really really fast i mean if

571
00:21:43,440 --> 00:21:46,320
the ci

572
00:21:44,240 --> 00:21:48,320
server has been doing this stuff ahead

573
00:21:46,320 --> 00:21:51,039
of you building the disk image

574
00:21:48,320 --> 00:21:52,720
like 5-10 minutes um it won't take 15

575
00:21:51,039 --> 00:21:55,840
gigabyte 50 gigabyte

576
00:21:52,720 --> 00:21:57,520
uh it can be very fast and it can be

577
00:21:55,840 --> 00:21:58,799
really easy to you don't have to inspect

578
00:21:57,520 --> 00:21:59,918
layers you just have to write one

579
00:21:58,799 --> 00:22:03,600
configuration file

580
00:21:59,919 --> 00:22:06,159
and the schema api can really be nice

581
00:22:03,600 --> 00:22:08,959
i mean both for system engineers and

582
00:22:06,159 --> 00:22:12,159
both for and for developers

583
00:22:08,960 --> 00:22:15,440
and most important point

584
00:22:12,159 --> 00:22:18,960
new geeks is like really fun and you

585
00:22:15,440 --> 00:22:27,679
should come help us so thank you for

586
00:22:18,960 --> 00:22:29,440
your attention

587
00:22:27,679 --> 00:22:31,760
yeah i guess we have time for some

588
00:22:29,440 --> 00:22:31,760
questions

589
00:22:31,919 --> 00:22:36,080
so you mentioned binary reproducibility

590
00:22:34,880 --> 00:22:38,320
um

591
00:22:36,080 --> 00:22:39,840
what guarantees do you give is it just

592
00:22:38,320 --> 00:22:41,439
you know it will be roughly the same or

593
00:22:39,840 --> 00:22:42,799
is it really binary so i can build the

594
00:22:41,440 --> 00:22:44,000
image i can build it tomorrow and it

595
00:22:42,799 --> 00:22:46,240
will have the same

596
00:22:44,000 --> 00:22:47,840
project something yeah i try to use the

597
00:22:46,240 --> 00:22:49,120
right vocabulary which is quite

598
00:22:47,840 --> 00:22:52,720
complicated but

599
00:22:49,120 --> 00:22:52,719
what i mean is that um

600
00:22:53,120 --> 00:22:56,559
we we offer the ground the strong

601
00:22:55,200 --> 00:22:59,280
guarantees like building an

602
00:22:56,559 --> 00:22:59,678
isolated environment in containers and

603
00:22:59,280 --> 00:23:02,960
which

604
00:22:59,679 --> 00:23:05,600
with uh with well-known input so

605
00:23:02,960 --> 00:23:06,159
you have good good chances that you'll

606
00:23:05,600 --> 00:23:08,639
get

607
00:23:06,159 --> 00:23:10,000
the same result from one disk image to

608
00:23:08,640 --> 00:23:11,440
another disk image on different

609
00:23:10,000 --> 00:23:14,240
distributions and stuff

610
00:23:11,440 --> 00:23:15,840
but if one package is one package is

611
00:23:14,240 --> 00:23:18,799
including your timestamp

612
00:23:15,840 --> 00:23:19,439
in your binary then you get a different

613
00:23:18,799 --> 00:23:21,600
result

614
00:23:19,440 --> 00:23:24,000
and it's true with doctor it's true with

615
00:23:21,600 --> 00:23:26,840
gigs it's just that you have

616
00:23:24,000 --> 00:23:28,480
stronger guarant stronger chances to get

617
00:23:26,840 --> 00:23:30,000
reproducibility with geeks

618
00:23:28,480 --> 00:23:31,760
but you already handle things like the

619
00:23:30,000 --> 00:23:33,600
file system and

620
00:23:31,760 --> 00:23:35,120
the file system itself and i don't know

621
00:23:33,600 --> 00:23:37,039
these partition labels and stuff like

622
00:23:35,120 --> 00:23:51,840
that

623
00:23:37,039 --> 00:23:51,840
yeah i guess

624
00:24:01,919 --> 00:24:07,440
i mean the point of the uh

625
00:24:04,960 --> 00:24:08,000
so the question is uh with yok2 you can

626
00:24:07,440 --> 00:24:10,240
build some

627
00:24:08,000 --> 00:24:12,559
sdk uh do we have the same feature with

628
00:24:10,240 --> 00:24:12,559
geeks

629
00:24:12,720 --> 00:24:16,960
with jaktu it is often very useful to

630
00:24:15,279 --> 00:24:19,440
have this sdk because you

631
00:24:16,960 --> 00:24:20,080
can ship it to teams so that they don't

632
00:24:19,440 --> 00:24:22,400
have to

633
00:24:20,080 --> 00:24:24,399
download everything and they have a nice

634
00:24:22,400 --> 00:24:26,159
environment to hack

635
00:24:24,400 --> 00:24:27,679
that's something i didn't show with

636
00:24:26,159 --> 00:24:30,159
geeks but

637
00:24:27,679 --> 00:24:30,880
you have also some really powerful tools

638
00:24:30,159 --> 00:24:33,120
to

639
00:24:30,880 --> 00:24:36,400
hack in a given environment to build

640
00:24:33,120 --> 00:24:38,320
your packages your native packages

641
00:24:36,400 --> 00:24:41,440
and i mean it's not some really really

642
00:24:38,320 --> 00:24:43,678
dedicated tools like the sdk it's more

643
00:24:41,440 --> 00:24:44,720
it's more how giggs does stuff but i

644
00:24:43,679 --> 00:24:46,880
didn't had

645
00:24:44,720 --> 00:24:47,840
enough commands like gigs environment

646
00:24:46,880 --> 00:24:50,480
geeks

647
00:24:47,840 --> 00:24:52,639
that can do pretty much the same thing

648
00:24:50,480 --> 00:24:55,760
without being a specific

649
00:24:52,640 --> 00:24:58,840
thing like the sdk

650
00:24:55,760 --> 00:25:00,550
okay so it's time's up thank you

651
00:24:58,840 --> 00:25:06,980
everyone

652
00:25:00,550 --> 00:25:06,980
[Applause]

