1
00:00:05,520 --> 00:00:09,120
okay so

2
00:00:07,040 --> 00:00:10,719
hello everyone i'm fabian schutto this

3
00:00:09,120 --> 00:00:14,559
is a quarantine

4
00:00:10,719 --> 00:00:17,600
uh so first i'm gonna celebrate the

5
00:00:14,559 --> 00:00:21,198
20 years of fosdem by showing off my uh

6
00:00:17,600 --> 00:00:25,920
10 years old vintage t-shirts

7
00:00:21,199 --> 00:00:25,920
and so yes i am i am actually that old

8
00:00:26,080 --> 00:00:33,040
so a bsp generator for more than 3 000

9
00:00:29,679 --> 00:00:35,440
armed microcontrollers actually

10
00:00:33,040 --> 00:00:38,960
when i wrote the title i didn't check

11
00:00:35,440 --> 00:00:38,960
but it's more than 4000 now

12
00:00:39,040 --> 00:00:42,160
so what what is this about first we're

13
00:00:41,200 --> 00:00:44,559
going to start with

14
00:00:42,160 --> 00:00:45,599
some context and then the content will

15
00:00:44,559 --> 00:00:48,640
explain what what

16
00:00:45,600 --> 00:00:50,960
actually the the project is

17
00:00:48,640 --> 00:00:52,640
so the context is that we work for an

18
00:00:50,960 --> 00:00:55,680
open source software company

19
00:00:52,640 --> 00:00:59,199
called adacor we do open source

20
00:00:55,680 --> 00:01:02,719
software development tools so

21
00:00:59,199 --> 00:01:05,759
we contribute to gcc gdb we have

22
00:01:02,719 --> 00:01:08,080
ids code coverage analysis formal

23
00:01:05,760 --> 00:01:10,080
verification so and so forth

24
00:01:08,080 --> 00:01:13,280
and so in particular for the ada and

25
00:01:10,080 --> 00:01:15,679
spark programming languages

26
00:01:13,280 --> 00:01:17,280
and one of the the targets and the

27
00:01:15,680 --> 00:01:21,200
context that we support for

28
00:01:17,280 --> 00:01:26,159
our customer and user is the

29
00:01:21,200 --> 00:01:29,280
really bare metal embedded platforms

30
00:01:26,159 --> 00:01:32,000
uh and so we are independent from

31
00:01:29,280 --> 00:01:32,799
any hardware vendors and you will see

32
00:01:32,000 --> 00:01:36,479
why this is

33
00:01:32,799 --> 00:01:36,479
this can be a problem sometimes

34
00:01:36,560 --> 00:01:43,439
um so very quickly the hidden spark

35
00:01:40,079 --> 00:01:45,919
programming languages so it's

36
00:01:43,439 --> 00:01:47,039
uh ada is a language that is really

37
00:01:45,920 --> 00:01:49,840
designed for

38
00:01:47,040 --> 00:01:51,200
functional safety and that's why it's

39
00:01:49,840 --> 00:01:54,240
heavily used in

40
00:01:51,200 --> 00:01:59,600
the safety critical domain so avionics

41
00:01:54,240 --> 00:01:59,600
space railway and automotive now as well

42
00:02:00,399 --> 00:02:05,600
and so some of the useful key features

43
00:02:03,280 --> 00:02:09,280
the strong typing

44
00:02:05,600 --> 00:02:11,440
so yeah ada is a strong type language

45
00:02:09,280 --> 00:02:13,840
but what's most important is that you

46
00:02:11,440 --> 00:02:16,319
have the the capability to define very

47
00:02:13,840 --> 00:02:18,560
precisely your own types

48
00:02:16,319 --> 00:02:20,000
so that's ranges for instance is one

49
00:02:18,560 --> 00:02:22,000
example

50
00:02:20,000 --> 00:02:24,080
we also now have contract-based

51
00:02:22,000 --> 00:02:27,040
programming

52
00:02:24,080 --> 00:02:28,000
and one interesting feature that we will

53
00:02:27,040 --> 00:02:30,400
talk about later

54
00:02:28,000 --> 00:02:33,200
is the representation clauses which let

55
00:02:30,400 --> 00:02:35,760
you really precisely control the

56
00:02:33,200 --> 00:02:38,399
representation of your data at the

57
00:02:35,760 --> 00:02:40,799
hardware level

58
00:02:38,400 --> 00:02:42,080
and sparx spark is a subset of the ada

59
00:02:40,800 --> 00:02:45,519
language with

60
00:02:42,080 --> 00:02:46,160
tools for formal verification so you can

61
00:02:45,519 --> 00:02:48,840
have

62
00:02:46,160 --> 00:02:51,840
mathematical proof that your software is

63
00:02:48,840 --> 00:02:51,840
correct

64
00:02:53,760 --> 00:02:57,440
and so another piece of the context is

65
00:02:56,400 --> 00:03:00,319
the

66
00:02:57,440 --> 00:03:00,720
market of harm microcontrollers and so

67
00:03:00,319 --> 00:03:03,280
that's

68
00:03:00,720 --> 00:03:04,000
that's only arm you can also consider

69
00:03:03,280 --> 00:03:06,720
other

70
00:03:04,000 --> 00:03:07,680
architecture uh so there is dozens of

71
00:03:06,720 --> 00:03:11,440
vendors

72
00:03:07,680 --> 00:03:13,120
uh eight different architecture variants

73
00:03:11,440 --> 00:03:14,879
i think that's only eight so far but

74
00:03:13,120 --> 00:03:16,480
maybe there are there are more

75
00:03:14,879 --> 00:03:18,239
and of course you have thousands and

76
00:03:16,480 --> 00:03:21,679
thousands of different

77
00:03:18,239 --> 00:03:22,400
parts and so for instance can anyone

78
00:03:21,680 --> 00:03:25,440
tell me

79
00:03:22,400 --> 00:03:27,920
how many uh like how many ram there is

80
00:03:25,440 --> 00:03:27,920
in an

81
00:03:28,120 --> 00:03:35,040
ht32f22366

82
00:03:30,239 --> 00:03:36,720
or a mb9af155m

83
00:03:35,040 --> 00:03:38,319
um and so that's that's the kind of

84
00:03:36,720 --> 00:03:41,040
problem that we have when

85
00:03:38,319 --> 00:03:43,599
uh users come to us and say oh do you

86
00:03:41,040 --> 00:03:43,599
support the

87
00:03:44,840 --> 00:03:48,720
s6e2cc8h08

88
00:03:46,720 --> 00:03:50,159
well okay that's that's kind of

89
00:03:48,720 --> 00:03:54,239
difficult

90
00:03:50,159 --> 00:03:57,519
um so

91
00:03:54,239 --> 00:03:59,920
if we uh let dive a little bit

92
00:03:57,519 --> 00:04:01,280
deeper if we look just at one of those

93
00:03:59,920 --> 00:04:07,200
microcontroller

94
00:04:01,280 --> 00:04:11,120
so asm32f446lt6

95
00:04:07,200 --> 00:04:14,159
it's it's a beast you have 46

96
00:04:11,120 --> 00:04:14,159
peripherals in there

97
00:04:14,959 --> 00:04:22,479
to control those 46 peripherals you have

98
00:04:18,560 --> 00:04:24,080
more than 800 memory map registers

99
00:04:22,479 --> 00:04:26,000
and in those registers you have more

100
00:04:24,080 --> 00:04:30,479
than 6000 fields

101
00:04:26,000 --> 00:04:34,080
that you have to program

102
00:04:30,479 --> 00:04:36,400
and so the question for us since we are

103
00:04:34,080 --> 00:04:38,240
providing tools for let's say an

104
00:04:36,400 --> 00:04:41,440
alternative programming language

105
00:04:38,240 --> 00:04:44,479
so alternative means everything that is

106
00:04:41,440 --> 00:04:44,479
not cnc plus plus

107
00:04:45,120 --> 00:04:52,639
how can we actually

108
00:04:48,560 --> 00:04:54,880
provide drivers for this kind of

109
00:04:52,639 --> 00:04:56,080
architecture and for all the complexity

110
00:04:54,880 --> 00:04:58,719
of the ecosystem

111
00:04:56,080 --> 00:04:58,719
and the market

112
00:05:01,759 --> 00:05:05,280
and so in particular what we are looking

113
00:05:04,720 --> 00:05:09,520
at

114
00:05:05,280 --> 00:05:12,880
is the basic blocks to get started

115
00:05:09,520 --> 00:05:15,359
and so for us that means

116
00:05:12,880 --> 00:05:17,440
the linker script and the startup code

117
00:05:15,360 --> 00:05:20,720
that will be different for every

118
00:05:17,440 --> 00:05:22,560
microcontroller mostly because of the

119
00:05:20,720 --> 00:05:24,560
different architecture and also the

120
00:05:22,560 --> 00:05:27,280
memory layout so depending on

121
00:05:24,560 --> 00:05:28,720
how much ram or flash do you have the

122
00:05:27,280 --> 00:05:30,559
for instance the linker script would be

123
00:05:28,720 --> 00:05:35,360
will be different

124
00:05:30,560 --> 00:05:35,360
and also driver drivers if if possible

125
00:05:37,600 --> 00:05:44,800
and so lucky for us

126
00:05:40,639 --> 00:05:44,800
we have arm to the to the rescue

127
00:05:45,280 --> 00:05:50,080
so i don't know exactly when but some

128
00:05:46,960 --> 00:05:51,680
years ago arms started

129
00:05:50,080 --> 00:05:53,599
it's a bit difficult to describe what

130
00:05:51,680 --> 00:05:56,000
this is actually uh

131
00:05:53,600 --> 00:05:57,120
it's a it's it's an initiative it's a

132
00:05:56,000 --> 00:05:59,840
program

133
00:05:57,120 --> 00:06:01,280
called the cortex microcontroller

134
00:05:59,840 --> 00:06:06,560
software interface

135
00:06:01,280 --> 00:06:08,880
standard so cmc is for the uh

136
00:06:06,560 --> 00:06:10,400
for the happy few uh and so there's many

137
00:06:08,880 --> 00:06:13,840
many things in this uh

138
00:06:10,400 --> 00:06:16,080
under this this name uh so

139
00:06:13,840 --> 00:06:17,198
for instance there's the the dap so it's

140
00:06:16,080 --> 00:06:20,400
um

141
00:06:17,199 --> 00:06:23,360
more or less some kind of standardized

142
00:06:20,400 --> 00:06:26,159
hardware debugging probe interface

143
00:06:23,360 --> 00:06:29,919
that's what you get for instance if you

144
00:06:26,160 --> 00:06:32,560
if you plug a i think a micro bit

145
00:06:29,919 --> 00:06:33,520
development board you see a usb flash

146
00:06:32,560 --> 00:06:35,199
drive

147
00:06:33,520 --> 00:06:36,799
and you can just drag and drop program

148
00:06:35,199 --> 00:06:38,880
to it i think that's

149
00:06:36,800 --> 00:06:41,280
some of the stuff that is defined with

150
00:06:38,880 --> 00:06:44,400
with the dap

151
00:06:41,280 --> 00:06:44,400
the driver is a

152
00:06:44,800 --> 00:06:51,039
c driver

153
00:06:48,000 --> 00:06:52,960
api in a way so that

154
00:06:51,039 --> 00:06:54,318
hardware vendors are supposed to

155
00:06:52,960 --> 00:06:56,080
implement and provide for their

156
00:06:54,319 --> 00:07:00,160
microcontrollers

157
00:06:56,080 --> 00:07:00,159
but they don't always do that

158
00:07:00,319 --> 00:07:03,759
there is also more or less the same

159
00:07:03,120 --> 00:07:07,440
concept

160
00:07:03,759 --> 00:07:12,240
but for a real-time operating system

161
00:07:07,440 --> 00:07:15,919
so again an api to basically provide

162
00:07:12,240 --> 00:07:18,639
try to provide some kind of portability

163
00:07:15,919 --> 00:07:20,400
and then you have interesting libraries

164
00:07:18,639 --> 00:07:23,840
actually so there's a neural network

165
00:07:20,400 --> 00:07:26,880
library specifically for cortex-m

166
00:07:23,840 --> 00:07:29,520
there's also a dsp library

167
00:07:26,880 --> 00:07:30,080
and i forgot to put it but they also

168
00:07:29,520 --> 00:07:32,799
they also

169
00:07:30,080 --> 00:07:34,318
have a some kind of file system

170
00:07:32,800 --> 00:07:38,000
dedicated for uh

171
00:07:34,319 --> 00:07:39,759
for microcontrollers as well so this is

172
00:07:38,000 --> 00:07:42,960
uh you know very interesting but that's

173
00:07:39,759 --> 00:07:46,479
actually not the most interesting for us

174
00:07:42,960 --> 00:07:46,960
um because the other the remaining part

175
00:07:46,479 --> 00:07:50,000
of

176
00:07:46,960 --> 00:07:54,000
cmcs are the the

177
00:07:50,000 --> 00:07:56,160
cmc specs so in the general sense it's

178
00:07:54,000 --> 00:07:58,800
just a way to distribute

179
00:07:56,160 --> 00:07:59,680
software packages but what's interesting

180
00:07:58,800 --> 00:08:02,720
is the is the

181
00:07:59,680 --> 00:08:03,680
data inside and so in particular we will

182
00:08:02,720 --> 00:08:09,039
look at two

183
00:08:03,680 --> 00:08:10,960
kind of files uh the pdsc and the svd

184
00:08:09,039 --> 00:08:13,840
and so i have to explain that actually

185
00:08:10,960 --> 00:08:15,280
the the same syspack are provided by the

186
00:08:13,840 --> 00:08:18,638
hardware vendors

187
00:08:15,280 --> 00:08:20,159
so harm is defining uh

188
00:08:18,639 --> 00:08:22,000
more or less the structure and the and

189
00:08:20,160 --> 00:08:25,039
the data format but

190
00:08:22,000 --> 00:08:28,160
it's provided by the vendors and so

191
00:08:25,039 --> 00:08:29,199
in the in the pdsc uh what we what we

192
00:08:28,160 --> 00:08:32,159
will uh

193
00:08:29,199 --> 00:08:34,240
be interested in is a detailed

194
00:08:32,159 --> 00:08:34,640
specification for each microcontroller

195
00:08:34,240 --> 00:08:38,159
for

196
00:08:34,640 --> 00:08:40,799
for all the more than 300 for uh sorry

197
00:08:38,159 --> 00:08:42,559
for the more than three thousand or four

198
00:08:40,799 --> 00:08:45,279
thousand microcontroller you have

199
00:08:42,559 --> 00:08:47,279
a detailed specification available in

200
00:08:45,279 --> 00:08:50,880
the pdfc

201
00:08:47,279 --> 00:08:53,279
and the svd is a description of

202
00:08:50,880 --> 00:08:54,000
the peripherals the registers and the

203
00:08:53,279 --> 00:08:57,200
field that

204
00:08:54,000 --> 00:09:00,560
i mentioned earlier

205
00:08:57,200 --> 00:09:04,160
and so now i will

206
00:09:00,560 --> 00:09:09,839
let current tell you how we can use

207
00:09:04,160 --> 00:09:09,839
those data to provide the bsps

208
00:09:18,050 --> 00:09:21,189
[Music]

209
00:09:34,880 --> 00:09:39,839
so now the question is how can we use

210
00:09:37,120 --> 00:09:43,200
use all that data

211
00:09:39,839 --> 00:09:44,080
so first we can use a tool that we

212
00:09:43,200 --> 00:09:46,800
developed

213
00:09:44,080 --> 00:09:47,120
at a decor called svd trader so what it

214
00:09:46,800 --> 00:09:50,560
does

215
00:09:47,120 --> 00:09:54,560
is it takes an svd file

216
00:09:50,560 --> 00:09:57,680
so in that case uh a plain xml file

217
00:09:54,560 --> 00:10:00,959
that describes down to each um

218
00:09:57,680 --> 00:10:02,880
field of every register um what its

219
00:10:00,959 --> 00:10:04,239
purpose and what the different values of

220
00:10:02,880 --> 00:10:07,439
the

221
00:10:04,240 --> 00:10:09,360
of the registers are so

222
00:10:07,440 --> 00:10:12,079
svd trader will take that file and

223
00:10:09,360 --> 00:10:15,279
generate some ada bindings for it

224
00:10:12,079 --> 00:10:16,399
now how you how could you interact with

225
00:10:15,279 --> 00:10:19,279
register

226
00:10:16,399 --> 00:10:21,200
in c so you would probably do something

227
00:10:19,279 --> 00:10:22,959
like that so you define your macros

228
00:10:21,200 --> 00:10:25,120
uh you have a register that you set at

229
00:10:22,959 --> 00:10:26,800
an address and then with the binary

230
00:10:25,120 --> 00:10:31,440
operation you set

231
00:10:26,800 --> 00:10:34,479
uh the the mask that you want um

232
00:10:31,440 --> 00:10:37,040
on your register so it

233
00:10:34,480 --> 00:10:38,399
if it works it's fine but it can be kind

234
00:10:37,040 --> 00:10:40,719
of unwieldy

235
00:10:38,399 --> 00:10:41,760
and the c type system is not helping you

236
00:10:40,720 --> 00:10:45,200
uh with it here

237
00:10:41,760 --> 00:10:47,120
not at all so in ada

238
00:10:45,200 --> 00:10:48,640
we have what we call in ada spark entry

239
00:10:47,120 --> 00:10:50,000
actually we have what we call

240
00:10:48,640 --> 00:10:53,360
representation clauses

241
00:10:50,000 --> 00:10:56,079
so um here for example

242
00:10:53,360 --> 00:10:57,279
i i describe a type called pin sense

243
00:10:56,079 --> 00:11:00,000
which is an nm

244
00:10:57,279 --> 00:11:00,959
and i can specify its size so its size

245
00:11:00,000 --> 00:11:04,800
as bit so

246
00:11:00,959 --> 00:11:04,800
in our case it has two bit size

247
00:11:05,120 --> 00:11:10,640
for that enum i set specific values for

248
00:11:07,839 --> 00:11:10,640
every value of the end

249
00:11:11,440 --> 00:11:15,040
and after that what i can do is i

250
00:11:13,600 --> 00:11:16,959
described a

251
00:11:15,040 --> 00:11:18,319
type record so it's actually like a

252
00:11:16,959 --> 00:11:21,439
structure in c

253
00:11:18,320 --> 00:11:23,200
and i use the type previously described

254
00:11:21,440 --> 00:11:25,600
in the middle of the register to

255
00:11:23,200 --> 00:11:28,800
represent a specific register

256
00:11:25,600 --> 00:11:29,519
after that in my record i can set the

257
00:11:28,800 --> 00:11:32,319
specific

258
00:11:29,519 --> 00:11:34,800
bits range for every field of my

259
00:11:32,320 --> 00:11:34,800
structure

260
00:11:36,079 --> 00:11:40,719
and at the end all i have to do is

261
00:11:37,920 --> 00:11:40,719
instantiate

262
00:11:40,839 --> 00:11:44,959
um my type

263
00:11:42,880 --> 00:11:46,000
i o register with a variable register

264
00:11:44,959 --> 00:11:49,839
and i can set its

265
00:11:46,000 --> 00:11:52,800
address like that with a like that

266
00:11:49,839 --> 00:11:53,600
um and afterward if i want to disable or

267
00:11:52,800 --> 00:11:56,880
enable

268
00:11:53,600 --> 00:11:57,839
the sensor all i have to do is uh call a

269
00:11:56,880 --> 00:11:59,600
register that

270
00:11:57,839 --> 00:12:01,200
thing and then the value that you want

271
00:11:59,600 --> 00:12:05,120
to to put in there

272
00:12:01,200 --> 00:12:05,600
so what's the advantage the advantage is

273
00:12:05,120 --> 00:12:08,720
that

274
00:12:05,600 --> 00:12:12,240
the ada type system is quite strong

275
00:12:08,720 --> 00:12:14,320
and for example if you want in c to

276
00:12:12,240 --> 00:12:15,680
write

277
00:12:14,320 --> 00:12:18,000
let's say i have a field that is two

278
00:12:15,680 --> 00:12:19,199
bits and i and i write by mistake an

279
00:12:18,000 --> 00:12:22,959
integer on that

280
00:12:19,200 --> 00:12:24,880
well you will write the integer and

281
00:12:22,959 --> 00:12:26,160
there are some problems that will occur

282
00:12:24,880 --> 00:12:27,760
if you try to do something like that in

283
00:12:26,160 --> 00:12:29,439
ada the compiler will warn you and will

284
00:12:27,760 --> 00:12:31,839
tell you it will not work

285
00:12:29,440 --> 00:12:33,120
so that's that's that's the advantage

286
00:12:31,839 --> 00:12:35,440
here

287
00:12:33,120 --> 00:12:37,440
so now we have some bindings to the

288
00:12:35,440 --> 00:12:38,639
peripherals and the registers

289
00:12:37,440 --> 00:12:40,959
but now we still need to solve the

290
00:12:38,639 --> 00:12:41,600
problem of the crt0 and the linker

291
00:12:40,959 --> 00:12:45,279
script

292
00:12:41,600 --> 00:12:47,519
how to boot here comes

293
00:12:45,279 --> 00:12:48,560
my internship project at a decor that i

294
00:12:47,519 --> 00:12:51,600
started

295
00:12:48,560 --> 00:12:52,560
a year and a half ago it's called

296
00:12:51,600 --> 00:12:54,720
startup gen

297
00:12:52,560 --> 00:12:56,638
and what it does is it generates all

298
00:12:54,720 --> 00:12:57,600
that info for you so dcrt00 and the

299
00:12:56,639 --> 00:13:01,760
linker script

300
00:12:57,600 --> 00:13:01,760
from the content in the cmc specs

301
00:13:02,480 --> 00:13:08,240
so uh in the cmc packs we we have a lot

302
00:13:06,240 --> 00:13:09,440
of xml files actually but we also have

303
00:13:08,240 --> 00:13:13,600
another one called

304
00:13:09,440 --> 00:13:15,120
the pdsc with which describes um

305
00:13:13,600 --> 00:13:17,120
is it's really it's really big and it

306
00:13:15,120 --> 00:13:20,560
describes all the different devices

307
00:13:17,120 --> 00:13:21,920
and um their memories

308
00:13:20,560 --> 00:13:24,638
for example if there are bootloaders

309
00:13:21,920 --> 00:13:28,319
where they are located um

310
00:13:24,639 --> 00:13:30,560
what else path to the documentation

311
00:13:28,320 --> 00:13:31,440
so really a ton of stuff but what

312
00:13:30,560 --> 00:13:34,560
interests

313
00:13:31,440 --> 00:13:36,480
us here is only really the memory part

314
00:13:34,560 --> 00:13:39,920
so here we have a rom

315
00:13:36,480 --> 00:13:42,240
so it's marks a startup so the um

316
00:13:39,920 --> 00:13:43,599
the device will boot on the rom and then

317
00:13:42,240 --> 00:13:46,320
we have a ram

318
00:13:43,600 --> 00:13:47,760
so with a start address and a size and

319
00:13:46,320 --> 00:13:49,279
at the start is not

320
00:13:47,760 --> 00:13:52,480
initialized so we have to take care of

321
00:13:49,279 --> 00:13:56,000
initializing it ourselves

322
00:13:52,480 --> 00:13:56,959
so from that xml file we can write a gpr

323
00:13:56,000 --> 00:13:59,600
file gpr

324
00:13:56,959 --> 00:13:59,599
is our

325
00:14:00,079 --> 00:14:04,160
not internal representation at elect but

326
00:14:01,760 --> 00:14:04,160
it's a

327
00:14:04,800 --> 00:14:08,240
file format that we use uh to compile

328
00:14:07,279 --> 00:14:11,760
our projects with

329
00:14:08,240 --> 00:14:13,920
our um build system called gpr build

330
00:14:11,760 --> 00:14:16,000
so here we can see that basically i

331
00:14:13,920 --> 00:14:18,719
transcribed the content of the xml

332
00:14:16,000 --> 00:14:22,000
in gpr form so as you can see it's a bit

333
00:14:18,720 --> 00:14:22,000
more readable for human now

334
00:14:22,240 --> 00:14:28,160
and from the gpr file we can generate

335
00:14:25,440 --> 00:14:29,760
oh afterwards actually sorry what else

336
00:14:28,160 --> 00:14:30,079
is good with the gpr file is that you

337
00:14:29,760 --> 00:14:32,319
can

338
00:14:30,079 --> 00:14:33,920
take care of the the advantages of that

339
00:14:32,320 --> 00:14:35,199
language the gpr language

340
00:14:33,920 --> 00:14:37,599
and for example if you have a

341
00:14:35,199 --> 00:14:40,639
development board and a production board

342
00:14:37,600 --> 00:14:42,240
you can set different values depending

343
00:14:40,639 --> 00:14:44,560
on the variable dashboard that you pass

344
00:14:42,240 --> 00:14:47,440
as parameter when generating the code

345
00:14:44,560 --> 00:14:48,719
and the code will uh will change

346
00:14:47,440 --> 00:14:50,079
depending on if you have

347
00:14:48,720 --> 00:14:53,680
a border protection board so in that

348
00:14:50,079 --> 00:14:53,680
case the link script will be different

349
00:14:54,800 --> 00:15:02,000
so now startup gen okay thank you

350
00:14:58,079 --> 00:15:04,719
so startup gen

351
00:15:02,000 --> 00:15:06,160
will generate ocrt 0 and an intercept so

352
00:15:04,720 --> 00:15:09,279
here is the crt 0

353
00:15:06,160 --> 00:15:09,920
and we can see that it's the part where

354
00:15:09,279 --> 00:15:12,240
we copy

355
00:15:09,920 --> 00:15:12,959
all the all that is supposed to be in

356
00:15:12,240 --> 00:15:16,880
data

357
00:15:12,959 --> 00:15:20,079
when we when we call the main uh

358
00:15:16,880 --> 00:15:23,519
we copy the parts of the data sections

359
00:15:20,079 --> 00:15:25,680
from the rom to the ram

360
00:15:23,519 --> 00:15:26,560
so it's an assembly loop and all of that

361
00:15:25,680 --> 00:15:29,599
is generated

362
00:15:26,560 --> 00:15:31,920
based on the info we have in the cmc

363
00:15:29,600 --> 00:15:31,920
packs

364
00:15:32,079 --> 00:15:37,199
afterwards so this is part of the cms of

365
00:15:34,800 --> 00:15:41,040
the link script that is generated

366
00:15:37,199 --> 00:15:42,880
and you can see we have aram

367
00:15:41,040 --> 00:15:45,199
the rom so the flash and the ram

368
00:15:42,880 --> 00:15:48,240
actually and we put the text

369
00:15:45,199 --> 00:15:48,719
sections in the flash in our case every

370
00:15:48,240 --> 00:15:51,680
ram

371
00:15:48,720 --> 00:15:53,920
has a different data section bss

372
00:15:51,680 --> 00:15:56,560
sections all of that

373
00:15:53,920 --> 00:15:58,800
is because we really want a way to boot

374
00:15:56,560 --> 00:16:00,319
rapidly on the board and if the user

375
00:15:58,800 --> 00:16:02,479
wants to customize an interscript

376
00:16:00,320 --> 00:16:03,920
it's easier to tell the user to

377
00:16:02,480 --> 00:16:05,519
customize this is think of a script

378
00:16:03,920 --> 00:16:08,079
rather to come up with

379
00:16:05,519 --> 00:16:11,839
weird heuristics and will behave just to

380
00:16:08,079 --> 00:16:11,839
try and infer what the user would want

381
00:16:13,440 --> 00:16:17,199
so so as i told you there's a missing

382
00:16:16,480 --> 00:16:19,680
link between

383
00:16:17,199 --> 00:16:20,479
the xml file and the gpr file i told you

384
00:16:19,680 --> 00:16:22,800
i had to write it

385
00:16:20,480 --> 00:16:24,639
so that's not true actually currently

386
00:16:22,800 --> 00:16:27,040
it's handled by a database

387
00:16:24,639 --> 00:16:28,000
but it's in the difference in the repo

388
00:16:27,040 --> 00:16:30,079
because it's

389
00:16:28,000 --> 00:16:31,040
it's not finished currently we want to

390
00:16:30,079 --> 00:16:33,920
integrate it

391
00:16:31,040 --> 00:16:34,959
um in an ide so fabian told you before

392
00:16:33,920 --> 00:16:38,639
that we have an id

393
00:16:34,959 --> 00:16:39,599
called gnat studio and really the the

394
00:16:38,639 --> 00:16:43,519
point of that

395
00:16:39,600 --> 00:16:46,720
uh internship subject was to integrate

396
00:16:43,519 --> 00:16:47,680
um was to make startup gen so the tool

397
00:16:46,720 --> 00:16:50,079
to generate

398
00:16:47,680 --> 00:16:51,120
the code and then to integrate it in an

399
00:16:50,079 --> 00:16:54,079
id so the

400
00:16:51,120 --> 00:16:55,440
the so that you would be able to uh i

401
00:16:54,079 --> 00:16:56,399
want to start developing an ada on a

402
00:16:55,440 --> 00:16:59,040
given board

403
00:16:56,399 --> 00:16:59,519
i click new project i click a bsp

404
00:16:59,040 --> 00:17:00,800
project

405
00:16:59,519 --> 00:17:03,199
and then i select the bar that i want to

406
00:17:00,800 --> 00:17:04,959
develop on i click uh i click the button

407
00:17:03,199 --> 00:17:08,799
and then i can start developing an ada

408
00:17:04,959 --> 00:17:08,799
and everything is taken care of for me

409
00:17:10,319 --> 00:17:15,280
so this is the result that we have uh we

410
00:17:12,880 --> 00:17:19,199
can basically generate

411
00:17:15,280 --> 00:17:20,079
an ad spark um hardware bindings let's

412
00:17:19,199 --> 00:17:22,319
say

413
00:17:20,079 --> 00:17:23,198
so bsp for any context m controller that

414
00:17:22,319 --> 00:17:26,399
we have in our

415
00:17:23,199 --> 00:17:28,559
cmc pack data banks and

416
00:17:26,400 --> 00:17:29,600
it also includes how to boot the file

417
00:17:28,559 --> 00:17:31,678
how to how sorry

418
00:17:29,600 --> 00:17:34,399
how to boot the board so the chart is

419
00:17:31,679 --> 00:17:34,400
under linker script

420
00:17:35,919 --> 00:17:40,799
so thank you for attention do you have

421
00:17:38,240 --> 00:17:40,799
any questions

422
00:17:43,000 --> 00:17:46,240
yes guys are doing something quite

423
00:17:45,440 --> 00:17:48,720
similar

424
00:17:46,240 --> 00:17:50,799
i wonder if you'd expect them to them

425
00:17:48,720 --> 00:17:53,200
and if there's any way to share

426
00:17:50,799 --> 00:17:55,280
um work but for instance i don't know

427
00:17:53,200 --> 00:17:56,000
the other guys they maintain a load of

428
00:17:55,280 --> 00:18:00,559
patches

429
00:17:56,000 --> 00:18:02,799
against the vending yeah

430
00:18:00,559 --> 00:18:05,280
you have to correct errors and extend

431
00:18:02,799 --> 00:18:07,440
add extra information

432
00:18:05,280 --> 00:18:09,600
okay so the question is about uh the the

433
00:18:07,440 --> 00:18:10,480
rust embedded community that is doing

434
00:18:09,600 --> 00:18:13,199
also some

435
00:18:10,480 --> 00:18:15,280
some things with the svd and so you said

436
00:18:13,200 --> 00:18:18,320
they are also patching the svd to

437
00:18:15,280 --> 00:18:20,160
to fix them and so the question is do we

438
00:18:18,320 --> 00:18:22,559
do we talk with them or do are we aware

439
00:18:20,160 --> 00:18:25,679
of this of this effort i guess

440
00:18:22,559 --> 00:18:27,520
um so yes we have

441
00:18:25,679 --> 00:18:29,679
we've seen this this effort i talked

442
00:18:27,520 --> 00:18:30,720
with some of them saying that hey we do

443
00:18:29,679 --> 00:18:32,640
the same stuff

444
00:18:30,720 --> 00:18:34,960
actually i think we started a little bit

445
00:18:32,640 --> 00:18:38,400
before them

446
00:18:34,960 --> 00:18:38,799
and so so far we don't we don't reuse

447
00:18:38,400 --> 00:18:42,640
the

448
00:18:38,799 --> 00:18:44,879
the svd patching stuff but yeah

449
00:18:42,640 --> 00:18:46,960
i've talked with some of some of the

450
00:18:44,880 --> 00:18:49,760
people from the embedded rest and

451
00:18:46,960 --> 00:18:50,720
there's uh there's really a common

452
00:18:49,760 --> 00:18:53,760
interest here

453
00:18:50,720 --> 00:18:56,160
and i think in particular with uh

454
00:18:53,760 --> 00:18:57,600
so rust like us is an alternative

455
00:18:56,160 --> 00:18:59,919
programming language

456
00:18:57,600 --> 00:19:00,639
and the stuff we deal with here they

457
00:18:59,919 --> 00:19:03,120
will have to

458
00:19:00,640 --> 00:19:05,360
deal with it and so potentially what's

459
00:19:03,120 --> 00:19:06,959
interesting is to be able to

460
00:19:05,360 --> 00:19:08,479
talk to the hardware vendor and make

461
00:19:06,960 --> 00:19:11,200
sure they provide

462
00:19:08,480 --> 00:19:12,720
good uh svd files no i think they try to

463
00:19:11,200 --> 00:19:15,120
push the patches upstream

464
00:19:12,720 --> 00:19:16,160
very often yeah and also what what's

465
00:19:15,120 --> 00:19:19,360
important is that

466
00:19:16,160 --> 00:19:21,919
uh actually svd is not uh is not

467
00:19:19,360 --> 00:19:23,439
actually designed to generate code it's

468
00:19:21,919 --> 00:19:26,400
supposed to be

469
00:19:23,440 --> 00:19:27,840
a format for debugger so you can inspect

470
00:19:26,400 --> 00:19:30,720
the

471
00:19:27,840 --> 00:19:31,120
peripherals and so it's not it's not the

472
00:19:30,720 --> 00:19:33,679
real

473
00:19:31,120 --> 00:19:35,439
the intended usage for svd and so

474
00:19:33,679 --> 00:19:38,720
sometimes they are not very

475
00:19:35,440 --> 00:19:39,520
very good and also one of the problem i

476
00:19:38,720 --> 00:19:42,320
see is that

477
00:19:39,520 --> 00:19:43,360
so this is for arm it's very nice but

478
00:19:42,320 --> 00:19:46,639
for instance i

479
00:19:43,360 --> 00:19:49,199
we do a lot of programming on risk five

480
00:19:46,640 --> 00:19:51,360
as well and also i'm trying to push the

481
00:19:49,200 --> 00:19:52,720
risk five vendors to provide a svd files

482
00:19:51,360 --> 00:19:55,760
for their devices

483
00:19:52,720 --> 00:19:59,440
but it's not it's not

484
00:19:55,760 --> 00:20:04,000
always easy to to make

485
00:19:59,440 --> 00:20:04,000
to explain why this is important so yeah

486
00:20:11,520 --> 00:20:15,679
so the question is that we didn't show

487
00:20:13,760 --> 00:20:16,960
uh the implementation for interrupt

488
00:20:15,679 --> 00:20:19,039
vectors

489
00:20:16,960 --> 00:20:20,320
uh yes actually that's that's the part

490
00:20:19,039 --> 00:20:23,520
that we didn't show but

491
00:20:20,320 --> 00:20:25,678
in the gpr file you can specify so from

492
00:20:23,520 --> 00:20:28,080
the uh pdfc

493
00:20:25,679 --> 00:20:30,080
or from the svd actually you can you

494
00:20:28,080 --> 00:20:33,120
have the list of interrupts

495
00:20:30,080 --> 00:20:35,039
uh and we also generate

496
00:20:33,120 --> 00:20:36,158
we also generate the inter vectors and

497
00:20:35,039 --> 00:20:39,280
we generate the

498
00:20:36,159 --> 00:20:42,960
the vector table in the crt00 as well

499
00:20:39,280 --> 00:20:42,960
so we didn't show it but it's uh it's

500
00:20:46,840 --> 00:20:52,080
available so

501
00:20:49,520 --> 00:20:53,760
the question is if we if the if the

502
00:20:52,080 --> 00:20:54,799
interrupts are handled by the operating

503
00:20:53,760 --> 00:20:57,919
system

504
00:20:54,799 --> 00:20:59,360
um so depends on how you handle it so

505
00:20:57,919 --> 00:21:03,200
for cortex-m you always

506
00:20:59,360 --> 00:21:05,520
need to have a vector of the interrupt

507
00:21:03,200 --> 00:21:06,480
so what you can do is you can specify

508
00:21:05,520 --> 00:21:09,200
the

509
00:21:06,480 --> 00:21:10,640
the same handler name for every

510
00:21:09,200 --> 00:21:12,400
interrupt and that will go

511
00:21:10,640 --> 00:21:16,400
that would be the the symbol that your

512
00:21:12,400 --> 00:21:18,159
ertus is using

513
00:21:16,400 --> 00:21:20,559
you have to you would have to change the

514
00:21:18,159 --> 00:21:23,679
gpr file to specify that

515
00:21:20,559 --> 00:21:24,639
uh also what's important is that uh i

516
00:21:23,679 --> 00:21:27,280
guess the

517
00:21:24,640 --> 00:21:29,039
the main point of this effort is to make

518
00:21:27,280 --> 00:21:31,280
it easy to start

519
00:21:29,039 --> 00:21:34,158
but it will not cover all the possible

520
00:21:31,280 --> 00:21:35,678
use case because it's very complex

521
00:21:34,159 --> 00:21:38,320
and something that i want to mention as

522
00:21:35,679 --> 00:21:39,679
well so svd to ada of course is really

523
00:21:38,320 --> 00:21:43,360
focused on ada

524
00:21:39,679 --> 00:21:46,080
but the startup gen project

525
00:21:43,360 --> 00:21:48,399
can actually be used for for c or for

526
00:21:46,080 --> 00:21:50,399
probably for us as well it's

527
00:21:48,400 --> 00:21:52,640
it's just a crt00 and a link script

528
00:21:50,400 --> 00:21:58,159
that's not

529
00:21:52,640 --> 00:22:01,600
related to any specific language

530
00:21:58,159 --> 00:22:01,600
okay any more question

531
00:22:01,679 --> 00:22:12,640
nope okay thank you

