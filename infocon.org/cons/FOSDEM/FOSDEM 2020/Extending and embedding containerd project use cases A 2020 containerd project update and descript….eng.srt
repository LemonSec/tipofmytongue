1
00:00:05,600 --> 00:00:11,599
no i'll i'll keep it to 20 minutes

2
00:00:07,919 --> 00:00:14,719
or less so this is a

3
00:00:11,599 --> 00:00:16,320
third year getting to present container

4
00:00:14,719 --> 00:00:19,840
d kind of a mix of

5
00:00:16,320 --> 00:00:21,520
status update and um

6
00:00:19,840 --> 00:00:23,198
and really this year i'd like to focus

7
00:00:21,520 --> 00:00:24,640
you know

8
00:00:23,199 --> 00:00:26,400
most people have seen the architecture

9
00:00:24,640 --> 00:00:28,800
i'm not going to drag you through

10
00:00:26,400 --> 00:00:30,000
all of those details but how are people

11
00:00:28,800 --> 00:00:33,360
actually using it

12
00:00:30,000 --> 00:00:35,920
um and specifically there are some great

13
00:00:33,360 --> 00:00:38,160
ways that people are extending it and

14
00:00:35,920 --> 00:00:40,320
embedding it in other projects that

15
00:00:38,160 --> 00:00:41,519
wasn't really the initial design but uh

16
00:00:40,320 --> 00:00:43,840
thanks to some of

17
00:00:41,520 --> 00:00:45,280
the smarter people on the project

18
00:00:43,840 --> 00:00:47,200
there's some cool ways that people are

19
00:00:45,280 --> 00:00:50,000
using it so that's really

20
00:00:47,200 --> 00:00:50,960
the focus but i will take you through

21
00:00:50,000 --> 00:00:54,800
kind of a current

22
00:00:50,960 --> 00:00:54,800
state of container d um

23
00:00:55,360 --> 00:01:00,000
effectively um there's a couple things

24
00:00:59,039 --> 00:01:03,520
we can say about

25
00:01:00,000 --> 00:01:04,799
uh what it is container run time

26
00:01:03,520 --> 00:01:06,960
yes there's lots of people that have

27
00:01:04,799 --> 00:01:08,640
debated what we call a runtime or an

28
00:01:06,960 --> 00:01:10,880
engine

29
00:01:08,640 --> 00:01:12,400
you know we can get kind of stuck there

30
00:01:10,880 --> 00:01:15,280
but we think of it as below

31
00:01:12,400 --> 00:01:15,759
platforms like docker kubernetes but

32
00:01:15,280 --> 00:01:18,799
above

33
00:01:15,759 --> 00:01:20,240
lower level runtimes like the oci run c

34
00:01:18,799 --> 00:01:22,880
or some of the other things you've heard

35
00:01:20,240 --> 00:01:26,158
about in this room today cata containers

36
00:01:22,880 --> 00:01:28,000
firecracker g-visor and really

37
00:01:26,159 --> 00:01:29,520
we play that kind of resource management

38
00:01:28,000 --> 00:01:31,680
role between those

39
00:01:29,520 --> 00:01:34,079
those two levels a platform above us

40
00:01:31,680 --> 00:01:36,159
these low level runtimes below us

41
00:01:34,079 --> 00:01:37,839
you know managing that container process

42
00:01:36,159 --> 00:01:41,200
the image artifacts

43
00:01:37,840 --> 00:01:43,360
the the snapshots the metadata

44
00:01:41,200 --> 00:01:45,040
and we've tried to remain tightly scoped

45
00:01:43,360 --> 00:01:46,720
so a lot of people

46
00:01:45,040 --> 00:01:48,240
early on said oh container d is going to

47
00:01:46,720 --> 00:01:49,679
become another docker and have all these

48
00:01:48,240 --> 00:01:53,280
features

49
00:01:49,680 --> 00:01:56,079
our governance requires 100 maintainer

50
00:01:53,280 --> 00:01:57,680
approval to increase scope

51
00:01:56,079 --> 00:02:00,798
and the only thing we've really changed

52
00:01:57,680 --> 00:02:04,159
from that initial scope in 2016

53
00:02:00,799 --> 00:02:04,799
is adding the cri implementation into

54
00:02:04,159 --> 00:02:07,680
container d

55
00:02:04,799 --> 00:02:08,959
itself so there's a picture i think

56
00:02:07,680 --> 00:02:11,440
teary showed

57
00:02:08,959 --> 00:02:12,879
earlier today with cri container d

58
00:02:11,440 --> 00:02:14,000
separate from container d that was

59
00:02:12,879 --> 00:02:15,920
definitely true

60
00:02:14,000 --> 00:02:17,680
a few years ago but now it's actually

61
00:02:15,920 --> 00:02:20,799
the same binary

62
00:02:17,680 --> 00:02:21,760
so again we'll see as people have

63
00:02:20,800 --> 00:02:23,520
extended it

64
00:02:21,760 --> 00:02:25,200
we haven't added that into the core of

65
00:02:23,520 --> 00:02:27,680
container d we've allowed plug

66
00:02:25,200 --> 00:02:28,399
plug points and ways to do that without

67
00:02:27,680 --> 00:02:31,360
even

68
00:02:28,400 --> 00:02:32,319
modifying container d so where are we

69
00:02:31,360 --> 00:02:34,239
today

70
00:02:32,319 --> 00:02:36,879
uh we're the fifth project to graduate

71
00:02:34,239 --> 00:02:41,040
in the cncf so that happened

72
00:02:36,879 --> 00:02:41,040
just a few weeks after fosdem last year

73
00:02:41,120 --> 00:02:45,280
the great thing is again it's not uh

74
00:02:43,920 --> 00:02:47,040
just a project from

75
00:02:45,280 --> 00:02:48,480
from a small group of people we now have

76
00:02:47,040 --> 00:02:50,560
had over 200

77
00:02:48,480 --> 00:02:52,560
different contributors representing

78
00:02:50,560 --> 00:02:56,080
greater than 100 companies

79
00:02:52,560 --> 00:02:57,040
uh thanks to the cncf dev stats project

80
00:02:56,080 --> 00:02:59,280
you can go

81
00:02:57,040 --> 00:03:00,560
you know search on all this data and

82
00:02:59,280 --> 00:03:03,200
check out you know

83
00:03:00,560 --> 00:03:04,959
who's contributing who's involved and

84
00:03:03,200 --> 00:03:06,000
our current kind of governance status we

85
00:03:04,959 --> 00:03:07,920
have 13

86
00:03:06,000 --> 00:03:09,519
maintainers representing nine different

87
00:03:07,920 --> 00:03:12,879
companies so

88
00:03:09,519 --> 00:03:15,599
again i think uh there's been a a

89
00:03:12,879 --> 00:03:16,560
sense in which early on container d was

90
00:03:15,599 --> 00:03:19,119
seen as

91
00:03:16,560 --> 00:03:20,879
just another docker company project uh

92
00:03:19,120 --> 00:03:23,440
clearly that's not the case

93
00:03:20,879 --> 00:03:26,079
we have uh maintainers from amazon and

94
00:03:23,440 --> 00:03:28,720
alibaba and ibm and google

95
00:03:26,080 --> 00:03:30,560
and a lot of other individuals so

96
00:03:28,720 --> 00:03:32,400
effectively that

97
00:03:30,560 --> 00:03:34,000
just reflects that all the major cloud

98
00:03:32,400 --> 00:03:35,200
providers are using container d in some

99
00:03:34,000 --> 00:03:38,080
way we'll see how

100
00:03:35,200 --> 00:03:39,679
in a few minutes uh we do support both

101
00:03:38,080 --> 00:03:42,640
linux and windows

102
00:03:39,680 --> 00:03:44,560
across multiple architectures and we've

103
00:03:42,640 --> 00:03:45,440
added sub-projects to our governance and

104
00:03:44,560 --> 00:03:47,760
what i mean by that

105
00:03:45,440 --> 00:03:49,040
is there are interesting pieces that

106
00:03:47,760 --> 00:03:51,120
we're going to see in a few minutes

107
00:03:49,040 --> 00:03:52,239
things that people have created such as

108
00:03:51,120 --> 00:03:56,159
a rust-based

109
00:03:52,239 --> 00:03:57,439
ttrpc implementation ibm research is

110
00:03:56,159 --> 00:03:59,599
contributed

111
00:03:57,439 --> 00:04:00,560
image encryption library and again

112
00:03:59,599 --> 00:04:02,399
instead of

113
00:04:00,560 --> 00:04:04,480
expanding the scope of container d and

114
00:04:02,400 --> 00:04:07,040
adding these pieces into container d

115
00:04:04,480 --> 00:04:08,879
as the main project these are all pieces

116
00:04:07,040 --> 00:04:11,599
that are in sub projects

117
00:04:08,879 --> 00:04:13,518
within our container deorganization but

118
00:04:11,599 --> 00:04:15,280
maintained by the people who created

119
00:04:13,519 --> 00:04:19,199
them

120
00:04:15,280 --> 00:04:21,680
our most recent uh release container d13

121
00:04:19,199 --> 00:04:23,600
added windows support uh for the shin v2

122
00:04:21,680 --> 00:04:25,759
api

123
00:04:23,600 --> 00:04:27,759
amazon the firecracker team contributed

124
00:04:25,759 --> 00:04:30,320
a device mapper snapshotter

125
00:04:27,759 --> 00:04:32,880
which again was external we've actually

126
00:04:30,320 --> 00:04:35,440
accepted that into the project

127
00:04:32,880 --> 00:04:37,360
and then a new plugin interface for

128
00:04:35,440 --> 00:04:38,960
things like image encryption or special

129
00:04:37,360 --> 00:04:41,600
compression

130
00:04:38,960 --> 00:04:42,638
modes that you don't have to modify

131
00:04:41,600 --> 00:04:44,639
container d

132
00:04:42,639 --> 00:04:46,720
code to use these capabilities you can

133
00:04:44,639 --> 00:04:49,680
use a separate plug-in binary

134
00:04:46,720 --> 00:04:51,199
and then in the cri we support um per

135
00:04:49,680 --> 00:04:52,720
pod container shim so you're not

136
00:04:51,199 --> 00:04:54,240
starting a different shim

137
00:04:52,720 --> 00:04:56,000
for every container in the pod so

138
00:04:54,240 --> 00:04:59,040
there's some memory and cpu

139
00:04:56,000 --> 00:05:01,280
usage improvements there

140
00:04:59,040 --> 00:05:03,600
things that are in progress the second

141
00:05:01,280 --> 00:05:07,280
talk of the day in here if you caught it

142
00:05:03,600 --> 00:05:10,479
akihiro talked about remote snapshotters

143
00:05:07,280 --> 00:05:12,000
it's both in progress but also

144
00:05:10,479 --> 00:05:13,680
effectively there are some there are

145
00:05:12,000 --> 00:05:15,360
ways you can use those features today

146
00:05:13,680 --> 00:05:18,160
like akira talked about

147
00:05:15,360 --> 00:05:21,039
sea groups v2 there have been a ton of

148
00:05:18,160 --> 00:05:23,440
prs in our c groups

149
00:05:21,039 --> 00:05:24,400
subproject in the last i'd say a month

150
00:05:23,440 --> 00:05:26,639
or two

151
00:05:24,400 --> 00:05:28,159
and we're fairly close to having that

152
00:05:26,639 --> 00:05:30,880
complete

153
00:05:28,160 --> 00:05:33,039
the windows team is still working on

154
00:05:30,880 --> 00:05:36,240
their cri implementation

155
00:05:33,039 --> 00:05:38,159
and we're hoping to clarify how mount

156
00:05:36,240 --> 00:05:38,720
and resource management works again with

157
00:05:38,160 --> 00:05:41,680
all these

158
00:05:38,720 --> 00:05:43,120
uh interesting snapshots features coming

159
00:05:41,680 --> 00:05:45,120
down the pipe and i already mentioned

160
00:05:43,120 --> 00:05:48,080
image encryption

161
00:05:45,120 --> 00:05:50,639
so all that said who's using it today

162
00:05:48,080 --> 00:05:53,198
i've already mentioned the public clouds

163
00:05:50,639 --> 00:05:54,240
the kubernetes infra team we've got lots

164
00:05:53,199 --> 00:05:57,280
of end users

165
00:05:54,240 --> 00:06:00,400
various dev tools like kind

166
00:05:57,280 --> 00:06:02,000
custom sandboxes g-visor etc

167
00:06:00,400 --> 00:06:03,440
but the interesting thing is how are

168
00:06:02,000 --> 00:06:05,840
they using it so

169
00:06:03,440 --> 00:06:07,759
how do we see these projects actually

170
00:06:05,840 --> 00:06:11,039
using container d

171
00:06:07,759 --> 00:06:11,039
so i'll actually start at the bottom

172
00:06:11,120 --> 00:06:15,440
maybe the least interesting use case

173
00:06:13,360 --> 00:06:18,479
just using container d as a demon

174
00:06:15,440 --> 00:06:19,440
to handle those that resource management

175
00:06:18,479 --> 00:06:22,800
of containers

176
00:06:19,440 --> 00:06:24,319
through run c or other other binaries so

177
00:06:22,800 --> 00:06:25,919
docker and build kit are using it that

178
00:06:24,319 --> 00:06:27,919
way today

179
00:06:25,919 --> 00:06:29,758
step up from that you know who's using

180
00:06:27,919 --> 00:06:31,919
it as a kubernetes runtime

181
00:06:29,759 --> 00:06:33,199
there's a couple public clouds including

182
00:06:31,919 --> 00:06:35,680
ours there's

183
00:06:33,199 --> 00:06:37,120
end users ticketmaster there's alibaba

184
00:06:35,680 --> 00:06:39,759
another cloud

185
00:06:37,120 --> 00:06:41,680
who's both using it as a runtime and

186
00:06:39,759 --> 00:06:43,600
expanding it with their pouch container

187
00:06:41,680 --> 00:06:47,600
project

188
00:06:43,600 --> 00:06:51,360
micro cates in canonicals ubuntu

189
00:06:47,600 --> 00:06:51,919
kine k3s from rancher aws fargate is now

190
00:06:51,360 --> 00:06:55,680
using it

191
00:06:51,919 --> 00:06:59,039
to drive their firecracker based

192
00:06:55,680 --> 00:07:00,319
isolation so again i'm not going to dig

193
00:06:59,039 --> 00:07:01,759
into the details of that those are

194
00:07:00,319 --> 00:07:03,120
fairly straightforward you've heard

195
00:07:01,759 --> 00:07:06,639
today if you've been in here

196
00:07:03,120 --> 00:07:08,080
about the cri crn cri interface you can

197
00:07:06,639 --> 00:07:11,199
implement that

198
00:07:08,080 --> 00:07:13,520
with the cri container d component and

199
00:07:11,199 --> 00:07:16,960
of course then drive containers using

200
00:07:13,520 --> 00:07:20,880
the oci run c and other potential

201
00:07:16,960 --> 00:07:23,680
isolators so really where we'll

202
00:07:20,880 --> 00:07:24,639
focus for you know the last few minutes

203
00:07:23,680 --> 00:07:26,720
of this

204
00:07:24,639 --> 00:07:28,000
is who's using it as a library and so

205
00:07:26,720 --> 00:07:28,479
there's a couple ways you can do that

206
00:07:28,000 --> 00:07:31,680
the go

207
00:07:28,479 --> 00:07:33,280
client api so that's again

208
00:07:31,680 --> 00:07:35,440
an abstraction that we'll look at how

209
00:07:33,280 --> 00:07:37,599
that fits but there's a ton

210
00:07:35,440 --> 00:07:40,319
of projects that have chosen to use the

211
00:07:37,599 --> 00:07:43,440
go client api for a simple way

212
00:07:40,319 --> 00:07:47,199
to run containers to

213
00:07:43,440 --> 00:07:49,520
make a larger project use container d

214
00:07:47,199 --> 00:07:50,400
so open faz is one of the most recent

215
00:07:49,520 --> 00:07:53,599
ones where

216
00:07:50,400 --> 00:07:55,359
alex has been tweeting about fazd

217
00:07:53,599 --> 00:07:56,840
i already mentioned alibaba's pouch

218
00:07:55,360 --> 00:07:59,280
container which is an open source

219
00:07:56,840 --> 00:08:01,758
project you can go look how they've used

220
00:07:59,280 --> 00:08:03,919
the go client api to drive

221
00:08:01,759 --> 00:08:07,039
their container runtime they've always

222
00:08:03,919 --> 00:08:09,520
built essentially a docker clone with

223
00:08:07,039 --> 00:08:10,878
all the registry operations runtime

224
00:08:09,520 --> 00:08:14,000
operations

225
00:08:10,879 --> 00:08:15,840
in the pouch container offering

226
00:08:14,000 --> 00:08:17,120
our ibm cloud functions team has a

227
00:08:15,840 --> 00:08:19,679
driver to use

228
00:08:17,120 --> 00:08:20,720
container d is the runtime weaveworks

229
00:08:19,680 --> 00:08:24,800
has ignite

230
00:08:20,720 --> 00:08:27,199
which wraps firecracker and then

231
00:08:24,800 --> 00:08:28,319
some of the helm team and cnab if you've

232
00:08:27,199 --> 00:08:31,520
heard of those

233
00:08:28,319 --> 00:08:34,560
projects built a very nice

234
00:08:31,520 --> 00:08:35,120
library called oros which allows you to

235
00:08:34,559 --> 00:08:36,958
do

236
00:08:35,120 --> 00:08:38,320
very flexible things with registry

237
00:08:36,958 --> 00:08:41,359
interactions

238
00:08:38,320 --> 00:08:44,480
again via a nice go

239
00:08:41,360 --> 00:08:45,839
client implementation

240
00:08:44,480 --> 00:08:48,880
so there's that aspect of using

241
00:08:45,839 --> 00:08:49,920
container d there's also extensibility

242
00:08:48,880 --> 00:08:53,600
so

243
00:08:49,920 --> 00:08:55,279
plug points to make a custom resolver

244
00:08:53,600 --> 00:08:57,519
that talks to your registry

245
00:08:55,279 --> 00:08:58,560
maybe over an enhanced protocol that's

246
00:08:57,519 --> 00:09:00,560
not like the

247
00:08:58,560 --> 00:09:03,119
default docker registry protocol so

248
00:09:00,560 --> 00:09:06,560
amazon has built a resolver for ecr

249
00:09:03,120 --> 00:09:08,880
with that maybe you saw a blog post from

250
00:09:06,560 --> 00:09:10,160
the azure team about teleport

251
00:09:08,880 --> 00:09:12,640
and again they've written a custom

252
00:09:10,160 --> 00:09:14,000
snapshotter that is not open source so

253
00:09:12,640 --> 00:09:16,000
we can't see what it does but

254
00:09:14,000 --> 00:09:17,040
uh it was mentioned in a talk reeler

255
00:09:16,000 --> 00:09:21,279
today

256
00:09:17,040 --> 00:09:23,760
how he uses smb protocol and vhd images

257
00:09:21,279 --> 00:09:25,839
to do very interesting sharing of images

258
00:09:23,760 --> 00:09:28,959
across your cluster

259
00:09:25,839 --> 00:09:30,720
and i believe even within data centers

260
00:09:28,959 --> 00:09:32,959
and then remote snapshotter again

261
00:09:30,720 --> 00:09:36,399
akihiro did a great job this morning

262
00:09:32,959 --> 00:09:39,920
sharing about the star gz implementation

263
00:09:36,399 --> 00:09:43,360
and cern and the cvm fs team

264
00:09:39,920 --> 00:09:46,240
uh are also working on a remote snapshot

265
00:09:43,360 --> 00:09:48,000
so there's go api usage there's the

266
00:09:46,240 --> 00:09:50,240
extensibility points

267
00:09:48,000 --> 00:09:52,399
and then there's even all the different

268
00:09:50,240 --> 00:09:52,640
sub projects within container d like our

269
00:09:52,399 --> 00:09:55,760
c

270
00:09:52,640 --> 00:09:57,439
groups and our run c wrapper and

271
00:09:55,760 --> 00:09:59,040
other tools like that our console

272
00:09:57,440 --> 00:10:00,959
implementation

273
00:09:59,040 --> 00:10:02,719
so even creo for example imports

274
00:10:00,959 --> 00:10:06,000
container d c groups

275
00:10:02,720 --> 00:10:09,600
because it's just a nice default go

276
00:10:06,000 --> 00:10:12,720
implementation of c group functionality

277
00:10:09,600 --> 00:10:18,240
so let's look a little bit more at how

278
00:10:12,720 --> 00:10:20,399
this is actually happening um so

279
00:10:18,240 --> 00:10:22,000
again i promised i wouldn't dig into

280
00:10:20,399 --> 00:10:24,079
this architecture and belabor

281
00:10:22,000 --> 00:10:25,120
uh all these points so let's focus in on

282
00:10:24,079 --> 00:10:28,160
a few things and

283
00:10:25,120 --> 00:10:28,640
if you do want to have a more in-depth

284
00:10:28,160 --> 00:10:32,319
talk

285
00:10:28,640 --> 00:10:33,040
look for the kubecon san diego container

286
00:10:32,320 --> 00:10:36,079
detox

287
00:10:33,040 --> 00:10:37,360
on youtube and there's there's a great

288
00:10:36,079 --> 00:10:38,560
talk that

289
00:10:37,360 --> 00:10:40,560
that walks you through this whole

290
00:10:38,560 --> 00:10:42,479
architecture but let's focus in

291
00:10:40,560 --> 00:10:46,880
on the api i said a lot of people are

292
00:10:42,480 --> 00:10:50,160
using container d via the go api

293
00:10:46,880 --> 00:10:53,519
there's both the method by which

294
00:10:50,160 --> 00:10:56,000
the grpc api is exposed from container d

295
00:10:53,519 --> 00:10:56,959
so for example in the case of the cri

296
00:10:56,000 --> 00:11:00,079
plug-in

297
00:10:56,959 --> 00:11:03,040
it's simply the kubelets talking cri

298
00:11:00,079 --> 00:11:03,359
to the container d socket and the cri

299
00:11:03,040 --> 00:11:06,240
sub

300
00:11:03,360 --> 00:11:08,399
project of container d handling those

301
00:11:06,240 --> 00:11:09,680
and then using the go api to call into

302
00:11:08,399 --> 00:11:12,079
container d

303
00:11:09,680 --> 00:11:14,560
start the containers for your pod set up

304
00:11:12,079 --> 00:11:16,800
the cni networking etc

305
00:11:14,560 --> 00:11:18,399
so that's obviously a very clear usage

306
00:11:16,800 --> 00:11:22,160
of the go api

307
00:11:18,399 --> 00:11:22,160
from the cri implementation

308
00:11:22,399 --> 00:11:28,480
you also have low level access to all

309
00:11:24,320 --> 00:11:31,760
the grpca

310
00:11:28,480 --> 00:11:34,079
all the grpc services within container d

311
00:11:31,760 --> 00:11:36,319
so if you if you think our go api isn't

312
00:11:34,079 --> 00:11:37,839
giving you the level of detail you need

313
00:11:36,320 --> 00:11:40,079
from the metadata service or the

314
00:11:37,839 --> 00:11:42,880
snapshot service you can talk directly

315
00:11:40,079 --> 00:11:45,680
to those grpc api endpoints

316
00:11:42,880 --> 00:11:46,800
for those services and the godoc is all

317
00:11:45,680 --> 00:11:48,880
online

318
00:11:46,800 --> 00:11:49,839
and that part of container d is strongly

319
00:11:48,880 --> 00:11:53,120
versioned

320
00:11:49,839 --> 00:11:54,399
with all the guarantees of semver

321
00:11:53,120 --> 00:11:56,240
versioning

322
00:11:54,399 --> 00:11:57,440
and i don't think we've actually broken

323
00:11:56,240 --> 00:12:00,079
even across all

324
00:11:57,440 --> 00:12:01,040
all the releases to date broken any of

325
00:12:00,079 --> 00:12:05,359
those uh

326
00:12:01,040 --> 00:12:07,040
grpc level service apis

327
00:12:05,360 --> 00:12:09,360
so again you can talk to snapshots

328
00:12:07,040 --> 00:12:13,439
content containers tasks events

329
00:12:09,360 --> 00:12:15,360
directly through that api so again

330
00:12:13,440 --> 00:12:17,040
i won't go through all those services

331
00:12:15,360 --> 00:12:19,040
but you know those are all the core

332
00:12:17,040 --> 00:12:21,439
services that have their own grpc

333
00:12:19,040 --> 00:12:22,399
api definition that is strongly

334
00:12:21,440 --> 00:12:25,279
versioned

335
00:12:22,399 --> 00:12:27,440
that's abstracted for you nicely with

336
00:12:25,279 --> 00:12:29,360
the generic go api

337
00:12:27,440 --> 00:12:31,200
so a lot of those use cases that i said

338
00:12:29,360 --> 00:12:34,320
they're using the go library

339
00:12:31,200 --> 00:12:37,360
they've abstracted to uh to use that

340
00:12:34,320 --> 00:12:40,000
api rather than talk directly to grpc

341
00:12:37,360 --> 00:12:41,839
service endpoints

342
00:12:40,000 --> 00:12:44,880
so let's talk more about plugability at

343
00:12:41,839 --> 00:12:46,560
the bottom end content store

344
00:12:44,880 --> 00:12:48,160
obviously has a default implementation

345
00:12:46,560 --> 00:12:48,959
in container d but you can write your

346
00:12:48,160 --> 00:12:50,560
own

347
00:12:48,959 --> 00:12:52,560
and then snapshotters i've already

348
00:12:50,560 --> 00:12:54,160
mentioned a couple times remote

349
00:12:52,560 --> 00:12:56,160
snapshotters

350
00:12:54,160 --> 00:12:59,279
these are the ones that are built in but

351
00:12:56,160 --> 00:13:01,279
rfs overlay dev mapper

352
00:12:59,279 --> 00:13:02,480
and obviously the plugability and then

353
00:13:01,279 --> 00:13:06,560
we'll talk about

354
00:13:02,480 --> 00:13:08,800
shims so there's a shim api obviously we

355
00:13:06,560 --> 00:13:11,760
provide the implementation for run c

356
00:13:08,800 --> 00:13:13,680
but that's where things like g visor and

357
00:13:11,760 --> 00:13:16,399
kata and firecracker

358
00:13:13,680 --> 00:13:18,000
can write their own shim and i'll show

359
00:13:16,399 --> 00:13:19,360
that api at the end but let's walk

360
00:13:18,000 --> 00:13:21,680
through

361
00:13:19,360 --> 00:13:22,959
start to finish first starting with the

362
00:13:21,680 --> 00:13:26,319
content store

363
00:13:22,959 --> 00:13:28,638
so i mentioned this project auras

364
00:13:26,320 --> 00:13:30,399
that has written their own uh content

365
00:13:28,639 --> 00:13:32,000
store plug-in

366
00:13:30,399 --> 00:13:34,959
that means they don't have to modify

367
00:13:32,000 --> 00:13:37,360
container d

368
00:13:34,959 --> 00:13:38,719
and and it effectively allows them to

369
00:13:37,360 --> 00:13:40,480
provide a

370
00:13:38,720 --> 00:13:43,519
demon-less way to interact with

371
00:13:40,480 --> 00:13:44,880
registries using their own content store

372
00:13:43,519 --> 00:13:46,720
and so i don't know if anyone's used my

373
00:13:44,880 --> 00:13:49,199
manifest tool project

374
00:13:46,720 --> 00:13:50,000
which again doesn't need a docker demon

375
00:13:49,199 --> 00:13:52,399
or a container d

376
00:13:50,000 --> 00:13:53,040
daemon it just talks to a registry to

377
00:13:52,399 --> 00:13:56,639
build

378
00:13:53,040 --> 00:13:58,399
or to push multi-architecture manifests

379
00:13:56,639 --> 00:13:59,839
i've actually been rewriting that using

380
00:13:58,399 --> 00:14:02,399
oros

381
00:13:59,839 --> 00:14:04,240
project which has the content store

382
00:14:02,399 --> 00:14:06,639
implementation

383
00:14:04,240 --> 00:14:07,760
which allows me to throw away hundreds

384
00:14:06,639 --> 00:14:10,240
of lines of code

385
00:14:07,760 --> 00:14:11,760
in my project because they made this

386
00:14:10,240 --> 00:14:12,880
really nice interface for interacting

387
00:14:11,760 --> 00:14:16,319
with the registry

388
00:14:12,880 --> 00:14:17,920
via a very simple go we're going to talk

389
00:14:16,320 --> 00:14:20,399
about runtime shims in a minute

390
00:14:17,920 --> 00:14:22,160
those are separate binaries so if you go

391
00:14:20,399 --> 00:14:22,560
follow the firecracker installation

392
00:14:22,160 --> 00:14:24,639
guide

393
00:14:22,560 --> 00:14:26,560
with firecracker container d you're

394
00:14:24,639 --> 00:14:27,279
going to install their actual binary

395
00:14:26,560 --> 00:14:30,560
shim

396
00:14:27,279 --> 00:14:32,800
and configure container d to drive that

397
00:14:30,560 --> 00:14:32,800
shim

398
00:14:34,399 --> 00:14:38,800
so i already mentioned client plugins

399
00:14:37,120 --> 00:14:42,240
the thing i wanted to focus on

400
00:14:38,800 --> 00:14:44,240
here is that the remote opt

401
00:14:42,240 --> 00:14:46,079
interface it's maybe a little small

402
00:14:44,240 --> 00:14:48,320
these slides will be online

403
00:14:46,079 --> 00:14:50,079
later if you want to look deeper but

404
00:14:48,320 --> 00:14:51,519
this is how you can actually customize a

405
00:14:50,079 --> 00:14:53,120
resolver

406
00:14:51,519 --> 00:14:55,360
say you write your own registry it

407
00:14:53,120 --> 00:14:57,040
doesn't it's not oci compliant

408
00:14:55,360 --> 00:14:58,399
you just you know have your own way of

409
00:14:57,040 --> 00:15:01,680
resolving uh

410
00:14:58,399 --> 00:15:03,360
hashes to layers and manifests

411
00:15:01,680 --> 00:15:05,680
you can customize that fully with the

412
00:15:03,360 --> 00:15:07,120
remote opt again without changing a line

413
00:15:05,680 --> 00:15:09,199
of container decode

414
00:15:07,120 --> 00:15:10,320
so that's how amazon wrote their ecr

415
00:15:09,199 --> 00:15:12,160
resolver

416
00:15:10,320 --> 00:15:14,720
and again you can also replace any

417
00:15:12,160 --> 00:15:17,279
service the leases service the events

418
00:15:14,720 --> 00:15:19,680
the diff service the content store

419
00:15:17,279 --> 00:15:21,519
you can use all these handlers to have

420
00:15:19,680 --> 00:15:23,040
your own custom implementations again

421
00:15:21,519 --> 00:15:26,480
without having to

422
00:15:23,040 --> 00:15:28,319
change a line of code of container d

423
00:15:26,480 --> 00:15:30,720
you can also create your own container d

424
00:15:28,320 --> 00:15:33,839
binary embedded in your project

425
00:15:30,720 --> 00:15:36,560
that's what darren shepard did with k3s

426
00:15:33,839 --> 00:15:37,680
when you install k3s it's got the the

427
00:15:36,560 --> 00:15:39,599
sort of minified

428
00:15:37,680 --> 00:15:40,719
kubernetes he's removed a lot of things

429
00:15:39,600 --> 00:15:43,360
you don't need

430
00:15:40,720 --> 00:15:44,560
quote unquote and then he's built in

431
00:15:43,360 --> 00:15:47,440
container d

432
00:15:44,560 --> 00:15:49,359
using the same model so that you don't

433
00:15:47,440 --> 00:15:51,759
again have to install and maintain that

434
00:15:49,360 --> 00:15:53,759
it's all kind of back to the beautiful

435
00:15:51,759 --> 00:15:55,360
world of one big static binary

436
00:15:53,759 --> 00:15:57,759
you plop it down and you have everything

437
00:15:55,360 --> 00:15:57,759
you need

438
00:15:58,880 --> 00:16:05,360
snapshotters again

439
00:16:02,079 --> 00:16:07,839
we just voted to accept the star gz

440
00:16:05,360 --> 00:16:08,560
remote snapshotter as a subproject in

441
00:16:07,839 --> 00:16:12,240
container d

442
00:16:08,560 --> 00:16:13,758
so akihiro showed you the current github

443
00:16:12,240 --> 00:16:16,240
location that'll be moving

444
00:16:13,759 --> 00:16:18,720
into container d but that's one

445
00:16:16,240 --> 00:16:21,199
implementation of a snapshot or plugin

446
00:16:18,720 --> 00:16:22,639
that you'll then be able to again not

447
00:16:21,199 --> 00:16:27,199
have to change container d

448
00:16:22,639 --> 00:16:30,399
but you can run the star gz snapshotter

449
00:16:27,199 --> 00:16:33,519
cern's you know cvmfs snapshotter

450
00:16:30,399 --> 00:16:34,240
and you can configure and uh and run

451
00:16:33,519 --> 00:16:36,160
container d

452
00:16:34,240 --> 00:16:38,320
to use those special snapshotters

453
00:16:36,160 --> 00:16:40,480
without having to get prs into container

454
00:16:38,320 --> 00:16:42,800
d

455
00:16:40,480 --> 00:16:44,399
have your own custom file system that's

456
00:16:42,800 --> 00:16:46,560
the api you have to

457
00:16:44,399 --> 00:16:48,000
implement to become a snapshotter and

458
00:16:46,560 --> 00:16:50,880
again you can run that

459
00:16:48,000 --> 00:16:52,480
as a separate process this is an example

460
00:16:50,880 --> 00:16:56,000
of how you would simply do that

461
00:16:52,480 --> 00:16:58,079
in a go program listen on a socket

462
00:16:56,000 --> 00:17:00,160
change the proxy plug-in configuration

463
00:16:58,079 --> 00:17:03,279
to point to your new snapshotter

464
00:17:00,160 --> 00:17:06,480
and now you have the ability to use that

465
00:17:03,279 --> 00:17:06,480
within container d

466
00:17:07,039 --> 00:17:13,599
finally i mentioned the shims

467
00:17:10,160 --> 00:17:14,959
so again we provide the run c shims

468
00:17:13,599 --> 00:17:16,719
we have a couple variants of that

469
00:17:14,959 --> 00:17:18,559
because again our most recent release

470
00:17:16,720 --> 00:17:21,039
has the per pod

471
00:17:18,559 --> 00:17:22,720
shim implementation so there's a couple

472
00:17:21,039 --> 00:17:24,799
versions of that you can switch between

473
00:17:22,720 --> 00:17:27,120
them in your container deconfig

474
00:17:24,799 --> 00:17:28,960
microsoft provides run hcs for their

475
00:17:27,119 --> 00:17:30,719
windows implementation

476
00:17:28,960 --> 00:17:32,880
and then you have shims for cata

477
00:17:30,720 --> 00:17:34,880
firecracker g visor

478
00:17:32,880 --> 00:17:36,559
and maybe others i don't know about

479
00:17:34,880 --> 00:17:37,600
these are the major ones that that we're

480
00:17:36,559 --> 00:17:40,000
aware of and

481
00:17:37,600 --> 00:17:41,039
have talked to us and we've played

482
00:17:40,000 --> 00:17:43,280
around with

483
00:17:41,039 --> 00:17:45,120
again these are separate binaries you

484
00:17:43,280 --> 00:17:47,280
install them from these projects

485
00:17:45,120 --> 00:17:48,879
you configure container d and you can

486
00:17:47,280 --> 00:17:50,320
now use these runtimes

487
00:17:48,880 --> 00:17:53,919
without changing any of the other

488
00:17:50,320 --> 00:17:56,639
container d architecture

489
00:17:53,919 --> 00:17:57,360
so yeah a little more detail on that

490
00:17:56,640 --> 00:17:58,840
again

491
00:17:57,360 --> 00:18:00,719
what you have to implement is fairly

492
00:17:58,840 --> 00:18:03,120
minimal it's all about

493
00:18:00,720 --> 00:18:04,400
life cycle of a container so if you want

494
00:18:03,120 --> 00:18:06,959
to drive vms

495
00:18:04,400 --> 00:18:09,200
you just handle the start and stop pause

496
00:18:06,960 --> 00:18:12,720
unpause all those capabilities

497
00:18:09,200 --> 00:18:14,559
in the way that your runtime needs

498
00:18:12,720 --> 00:18:16,160
and there's a simple naming convection

499
00:18:14,559 --> 00:18:19,120
convention so

500
00:18:16,160 --> 00:18:20,720
when you start a container d process you

501
00:18:19,120 --> 00:18:25,120
can say use this

502
00:18:20,720 --> 00:18:28,160
runtime by by providing this type

503
00:18:25,120 --> 00:18:29,360
again here's all the api

504
00:18:28,160 --> 00:18:32,400
that you would have to implement to

505
00:18:29,360 --> 00:18:35,199
become a shim in the shin v2 api

506
00:18:32,400 --> 00:18:37,520
it's effectively the task service within

507
00:18:35,200 --> 00:18:40,480
container d

508
00:18:37,520 --> 00:18:41,200
so this is a copy of the for the former

509
00:18:40,480 --> 00:18:42,880
chart

510
00:18:41,200 --> 00:18:44,799
hopefully you can see the the

511
00:18:42,880 --> 00:18:47,600
highlighted areas

512
00:18:44,799 --> 00:18:48,240
especially in the top half and where on

513
00:18:47,600 --> 00:18:51,120
this

514
00:18:48,240 --> 00:18:52,559
those architecture charts they fit in to

515
00:18:51,120 --> 00:18:54,959
have extended

516
00:18:52,559 --> 00:18:56,320
or plug found the plug point that

517
00:18:54,960 --> 00:18:58,240
allowed them to do

518
00:18:56,320 --> 00:19:00,399
the special thing they wanted to do with

519
00:18:58,240 --> 00:19:03,280
uh container d

520
00:19:00,400 --> 00:19:03,840
so with that um i think we got a couple

521
00:19:03,280 --> 00:19:07,760
minutes

522
00:19:03,840 --> 00:19:10,399
or um so any questions

523
00:19:07,760 --> 00:19:12,400
i was a little bit quick but hopefully

524
00:19:10,400 --> 00:19:14,720
gave you an idea of where

525
00:19:12,400 --> 00:19:17,360
people are extending and using container

526
00:19:14,720 --> 00:19:17,360
deed today

527
00:19:18,000 --> 00:19:25,840
everyone wants to leave this one's done

528
00:19:20,960 --> 00:19:25,840
done with fosdem

529
00:19:26,480 --> 00:19:29,520
actually this is probably a question

530
00:19:28,000 --> 00:19:31,440
from somebody who doesn't really

531
00:19:29,520 --> 00:19:32,960
have an idea about how kubernetes works

532
00:19:31,440 --> 00:19:36,240
but um

533
00:19:32,960 --> 00:19:38,640
how how does cryo relate to container

534
00:19:36,240 --> 00:19:39,440
you said the cri shim is now part of

535
00:19:38,640 --> 00:19:42,799
container d

536
00:19:39,440 --> 00:19:44,720
right yes um

537
00:19:42,799 --> 00:19:46,639
yeah so what is the difference between

538
00:19:44,720 --> 00:19:50,840
cryo and container d

539
00:19:46,640 --> 00:19:53,039
basically yeah so effectively

540
00:19:50,840 --> 00:19:55,199
um

541
00:19:53,039 --> 00:19:56,640
the kublet points to a certain cri

542
00:19:55,200 --> 00:19:59,520
implementation so

543
00:19:56,640 --> 00:20:01,520
if i if i'm sitting on a worker node of

544
00:19:59,520 --> 00:20:02,720
a kubernetes cluster

545
00:20:01,520 --> 00:20:04,720
and i've got it configured to use

546
00:20:02,720 --> 00:20:07,360
container d it's pointing to our socket

547
00:20:04,720 --> 00:20:09,600
if you point that to creo's socket then

548
00:20:07,360 --> 00:20:11,840
obviously creo will handle

549
00:20:09,600 --> 00:20:12,639
how they've implemented driving run c

550
00:20:11,840 --> 00:20:15,039
which

551
00:20:12,640 --> 00:20:17,039
um you know they have support for cata

552
00:20:15,039 --> 00:20:18,799
they have support for run c

553
00:20:17,039 --> 00:20:20,240
many of those things are similar okay so

554
00:20:18,799 --> 00:20:22,400
they're similar they're basically

555
00:20:20,240 --> 00:20:25,440
similar project container d and cryo

556
00:20:22,400 --> 00:20:27,280
yes yes okay yeah similar in

557
00:20:25,440 --> 00:20:29,440
at when they're used as a kubernetes

558
00:20:27,280 --> 00:20:31,360
runtime i tell people they're

559
00:20:29,440 --> 00:20:32,640
effectively quite similar there are some

560
00:20:31,360 --> 00:20:35,120
design choices

561
00:20:32,640 --> 00:20:37,440
what's different is the rest of the

562
00:20:35,120 --> 00:20:40,080
architecture and the extensibility

563
00:20:37,440 --> 00:20:41,679
um not that they're missing from korea

564
00:20:40,080 --> 00:20:43,280
but that was not a design point

565
00:20:41,679 --> 00:20:45,440
right it was meant to be a kubernetes

566
00:20:43,280 --> 00:20:48,720
runtime so that's the path

567
00:20:45,440 --> 00:20:52,000
that creo implements interesting thanks

568
00:20:48,720 --> 00:21:02,400
yup okay thank you

569
00:20:52,000 --> 00:21:04,480
thank you

570
00:21:02,400 --> 00:21:04,480
you

